; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\SERIAL\COM_MDD2\mdd.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|dpCurSettings| [ DATA ]

  00000			 AREA	 |.bss|, NOINIT
|GlobalSerialHeadNumber| % 0x4

  00000			 AREA	 |.data|, DATA
|dpCurSettings| DCB "S", 0x0, "e", 0x0, "r", 0x0, "i", 0x0, "a", 0x0, "l", 0x0
	DCB	0x0, 0x0
	%	50
	DCB	"I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, 0x0, 0x0
	%	54
	DCB	"O", 0x0, "p", 0x0, "e", 0x0, "n", 0x0, 0x0, 0x0
	%	54
	DCB	"R", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, 0x0, 0x0
	%	54
	DCB	"W", 0x0, "r", 0x0, "i", 0x0, "t", 0x0, "e", 0x0, 0x0, 0x0
	%	52
	DCB	"C", 0x0, "l", 0x0, "o", 0x0, "s", 0x0, "e", 0x0, 0x0, 0x0
	%	52
	DCB	"I", 0x0, "o", 0x0, "c", 0x0, "t", 0x0, "l", 0x0, 0x0, 0x0
	%	52
	DCB	"T", 0x0, "h", 0x0, "r", 0x0, "e", 0x0, "a", 0x0, "d", 0x0
	DCB	0x0, 0x0
	%	50
	DCB	"E", 0x0, "v", 0x0, "e", 0x0, "n", 0x0, "t", 0x0, "s", 0x0
	DCB	0x0, 0x0
	%	50
	DCB	"C", 0x0, "r", 0x0, "i", 0x0, "t", 0x0, "S", 0x0, "e", 0x0
	DCB	"c", 0x0, 0x0, 0x0
	%	48
	DCB	"F", 0x0, "l", 0x0, "o", 0x0, "w", 0x0, "C", 0x0, "t", 0x0
	DCB	"r", 0x0, "l", 0x0, 0x0, 0x0
	%	46
	DCB	"I", 0x0, "n", 0x0, "f", 0x0, "r", 0x0, "a", 0x0, "r", 0x0
	DCB	"e", 0x0, "d", 0x0, 0x0, 0x0
	%	46
	DCB	"U", 0x0, "s", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, "R", 0x0
	DCB	"e", 0x0, "a", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"A", 0x0, "l", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, 0x0, 0x0
	%	52
	DCB	"F", 0x0, "u", 0x0, "n", 0x0, "c", 0x0, "t", 0x0, "i", 0x0
	DCB	"o", 0x0, "n", 0x0, 0x0, 0x0
	%	46
	DCB	"W", 0x0, "a", 0x0, "r", 0x0, "n", 0x0, "i", 0x0, "n", 0x0
	DCB	"g", 0x0, 0x0, 0x0
	%	48
	DCB	"E", 0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, 0x0, 0x0
	%	52
	DCD	0x0
	EXPORT	|??_C@_1DA@LGJDGOIM@?$AAp?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AA?5?$AAd?$AAe?$AAt?$AAa?$AAc?$AAh?$AA?5?$AAc?$AAa?$AAl?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DK@BHNGFHBN@?$AAs?$AAe?$AAr?$AAi?$AAa?$AAl?$AA?5?$AAp?$AAo?$AAr?$AAt?$AA?5?$AAp?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AA?5?$AAa?$AAt?$AAt?$AAa?$AAc?$AAh?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|DllEntry|
	IMPORT	|DisableThreadLibraryCalls|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|RegisterDbgZones|

  00000			 AREA	 |.pdata|, PDATA
|$T41363| DCD	|$LN11@DllEntry|
	DCD	0x40002e04
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\serial\com_mdd2\mdd.c

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@LGJDGOIM@?$AAp?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AA?5?$AAd?$AAe?$AAt?$AAa?$AAc?$AAh?$AA?5?$AAc?$AAa?$AAl?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "p"
	DCB	0x0, "r", 0x0, "o", 0x0, "c", 0x0, "e", 0x0, "s", 0x0, "s"
	DCB	0x0, " ", 0x0, "d", 0x0, "e", 0x0, "t", 0x0, "a", 0x0, "c"
	DCB	0x0, "h", 0x0, " ", 0x0, "c", 0x0, "a", 0x0, "l", 0x0, "l"
	DCB	0x0, "e", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DK@BHNGFHBN@?$AAs?$AAe?$AAr?$AAi?$AAa?$AAl?$AA?5?$AAp?$AAo?$AAr?$AAt?$AA?5?$AAp?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AA?5?$AAa?$AAt?$AAt?$AAa?$AAc?$AAh?$AA?$AN?$AA?6?$AA?$AA@| DCB "s"
	DCB	0x0, "e", 0x0, "r", 0x0, "i", 0x0, "a", 0x0, "l", 0x0, " "
	DCB	0x0, "p", 0x0, "o", 0x0, "r", 0x0, "t", 0x0, " ", 0x0, "p"
	DCB	0x0, "r", 0x0, "o", 0x0, "c", 0x0, "e", 0x0, "s", 0x0, "s"
	DCB	0x0, " ", 0x0, "a", 0x0, "t", 0x0, "t", 0x0, "a", 0x0, "c"
	DCB	0x0, "h", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DllEntry| PROC

; 141  : {

  00000		 |$LN11@DllEntry|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0007	 stmdb       sp!, {r0 - r2}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd00c	 sub         sp, sp, #0xC
  00010		 |$M41360|

; 142  :     if ( dwReason == DLL_PROCESS_ATTACH ) {

  00010	e59d3018	 ldr         r3, [sp, #0x18]
  00014	e3530001	 cmp         r3, #1
  00018	1a00000f	 bne         |$LN2@DllEntry|

; 143  :         DEBUGREGISTER(hinstDll);

  0001c	e59f108c	 ldr         r1, [pc, #0x8C]
  00020	e59d0014	 ldr         r0, [sp, #0x14]
  00024	eb000000	 bl          RegisterDbgZones

; 144  :         DEBUGMSG (ZONE_INIT, (TEXT("serial port process attach\r\n")));

  00028	e59f3080	 ldr         r3, [pc, #0x80]
  0002c	e5933440	 ldr         r3, [r3, #0x440]
  00030	e3130001	 tst         r3, #1
  00034	0a000004	 beq         |$LN5@DllEntry|
  00038	e59f0074	 ldr         r0, [pc, #0x74]
  0003c	eb000000	 bl          NKDbgPrintfW
  00040	e3a03001	 mov         r3, #1
  00044	e58d3004	 str         r3, [sp, #4]
  00048	ea000001	 b           |$LN6@DllEntry|
  0004c		 |$LN5@DllEntry|
  0004c	e3a03000	 mov         r3, #0
  00050	e58d3004	 str         r3, [sp, #4]
  00054		 |$LN6@DllEntry|

; 145  :         DisableThreadLibraryCalls((HMODULE) hinstDll);

  00054	e59d0014	 ldr         r0, [sp, #0x14]
  00058	eb000000	 bl          DisableThreadLibraryCalls
  0005c		 |$LN2@DllEntry|

; 146  :     }
; 147  : 
; 148  :     if ( dwReason == DLL_PROCESS_DETACH ) {

  0005c	e59d3018	 ldr         r3, [sp, #0x18]
  00060	e3530000	 cmp         r3, #0
  00064	1a00000a	 bne         |$LN1@DllEntry|

; 149  :         DEBUGMSG (ZONE_INIT, (TEXT("process detach called\r\n")));

  00068	e59f3040	 ldr         r3, [pc, #0x40]
  0006c	e5933440	 ldr         r3, [r3, #0x440]
  00070	e3130001	 tst         r3, #1
  00074	0a000004	 beq         |$LN7@DllEntry|
  00078	e59f002c	 ldr         r0, [pc, #0x2C]
  0007c	eb000000	 bl          NKDbgPrintfW
  00080	e3a03001	 mov         r3, #1
  00084	e58d3008	 str         r3, [sp, #8]
  00088	ea000001	 b           |$LN8@DllEntry|
  0008c		 |$LN7@DllEntry|
  0008c	e3a03000	 mov         r3, #0
  00090	e58d3008	 str         r3, [sp, #8]
  00094		 |$LN8@DllEntry|
  00094		 |$LN1@DllEntry|

; 150  :     }
; 151  : 
; 152  :     return(TRUE);

  00094	e3a03001	 mov         r3, #1
  00098	e58d3000	 str         r3, [sp]

; 153  : }

  0009c	e59d0000	 ldr         r0, [sp]
  000a0	e28dd00c	 add         sp, sp, #0xC
  000a4	e89d6000	 ldmia       sp, {sp, lr}
  000a8	e12fff1e	 bx          lr
  000ac		 |$LN12@DllEntry|
  000ac		 |$LN13@DllEntry|
  000ac	00000000	 DCD         |??_C@_1DA@LGJDGOIM@?$AAp?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AA?5?$AAd?$AAe?$AAt?$AAa?$AAc?$AAh?$AA?5?$AAc?$AAa?$AAl?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  000b0		 |$LN14@DllEntry|
  000b0	00000000	 DCD         |dpCurSettings|
  000b4		 |$LN15@DllEntry|
  000b4	00000000	 DCD         |??_C@_1DK@BHNGFHBN@?$AAs?$AAe?$AAr?$AAi?$AAa?$AAl?$AA?5?$AAp?$AAo?$AAr?$AAt?$AA?5?$AAp?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AA?5?$AAa?$AAt?$AAt?$AAa?$AAc?$AAh?$AA?$AN?$AA?6?$AA?$AA@|
  000b8		 |$M41361|

			 ENDP  ; |DllEntry|

	EXPORT	|??_C@_1EG@PNOECNFM@?$AAD?$AAo?$AAP?$AAu?$AAt?$AAB?$AAy?$AAt?$AAe?$AAs?$AA?5?$AAr?$AAe?$AAl?$AAe?$AAa?$AAs?$AAe?$AAd?$AA?5?$AAC?$AAr?$AAi?$AAt?$AAS?$AAe?$AAc?$AA?3?$AA?5?$AA?$CF?$AAx?$AA?4@| [ DATA ] ; `string'
	EXPORT	|SetEvent|
	EXPORT	|??_C@_1EO@IFEAHMMF@?$AAT?$AAr?$AAa?$AAn?$AAs?$AAm?$AAi?$AAs?$AAs?$AAi?$AAo?$AAn?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAe?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?5?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DI@GGPGJBLB@?$AA?$CF?$AAd?$AA?5?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?5?$AAa?$AAc?$AAt?$AAu?$AAa?$AAl?$AAl?$AAy?$AA?5?$AAc?$AAo?$AAp?$AAi?$AAe?$AAd?$AA?4?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DC@FONCMGND@?$AAA?$AAb?$AAo?$AAu?$AAt?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAo?$AAp?$AAy?$AA?5?$AA?$CF?$AAd?$AA?5?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GC@MPMHAODJ@?$AAT?$AAx?$AAR?$AAe?$AAa?$AAd?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AAT?$AAx?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AAT?$AAx?$AAB?$AAy@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DC@KIHGPOMJ@?$AAX?$AAO?$AAF?$AAF?$AA?8?$AAe?$AAd?$AA?0?$AA?5?$AAs?$AAe?$AAn?$AAd?$AA?5?$AAn?$AAo?$AAt?$AAh?$AAi?$AAn?$AAg?$AA?4?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BG@OPJKPKO@?$AAR?$AAT?$AAS?$AA?5?$AAs?$AAe?$AAt?$AA?4?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FC@IBKKBMKO@?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAE?$AAv?$AAe?$AAn?$AAt?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?5?$AAs?$AAe?$AAn?$AAt?$AA?5?$AAu?$AAp?$AA?9?$AAt@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EI@PHLIHGKN@?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAc?$AAl?$AAo?$AAs?$AAe?$AAd?$AA?$CB?$AA?5?$AAQ?$AAu?$AAi?$AAt?$AA?5?$AAt?$AAr?$AAa?$AAn?$AAs?$AAm?$AAi?$AAs?$AAs?$AAi?$AAo?$AAn@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DK@JKMHGAMG@?$AAD?$AAo?$AAP?$AAu?$AAt?$AAB?$AAy?$AAt?$AAe?$AAs?$AA?5?$AAg?$AAo?$AAt?$AA?5?$AAC?$AAr?$AAi?$AAt?$AAS?$AAe?$AAc?$AA?5?$AA?$CF?$AAx?$AA?4?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EE@GKGAJBJP@?$AAD?$AAo?$AAP?$AAu?$AAt?$AAB?$AAy?$AAt?$AAe?$AAs?$AA?5?$AAw?$AAa?$AAi?$AAt?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAC?$AAr?$AAi?$AAt?$AAS?$AAe?$AAc?$AA?5?$AA?$CF?$AAx?$AA?4?$AA?$AN@| [ DATA ] ; `string'
	EXPORT	|DoTxData|
	IMPORT	|LeaveCriticalSection|
	IMPORT	|EnterCriticalSection|

  00008			 AREA	 |.pdata|, PDATA
|$T41394| DCD	|$LN33@DoTxData|
	DCD	0x40014104

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EG@PNOECNFM@?$AAD?$AAo?$AAP?$AAu?$AAt?$AAB?$AAy?$AAt?$AAe?$AAs?$AA?5?$AAr?$AAe?$AAl?$AAe?$AAa?$AAs?$AAe?$AAd?$AA?5?$AAC?$AAr?$AAi?$AAt?$AAS?$AAe?$AAc?$AA?3?$AA?5?$AA?$CF?$AAx?$AA?4@| DCB "D"
	DCB	0x0, "o", 0x0, "P", 0x0, "u", 0x0, "t", 0x0, "B", 0x0, "y"
	DCB	0x0, "t", 0x0, "e", 0x0, "s", 0x0, " ", 0x0, "r", 0x0, "e"
	DCB	0x0, "l", 0x0, "e", 0x0, "a", 0x0, "s", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "C", 0x0, "r", 0x0, "i", 0x0, "t", 0x0, "S"
	DCB	0x0, "e", 0x0, "c", 0x0, ":", 0x0, " ", 0x0, "%", 0x0, "x"
	DCB	0x0, ".", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EO@IFEAHMMF@?$AAT?$AAr?$AAa?$AAn?$AAs?$AAm?$AAi?$AAs?$AAs?$AAi?$AAo?$AAn?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAe?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?5?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?5@| DCB "T"
	DCB	0x0, "r", 0x0, "a", 0x0, "n", 0x0, "s", 0x0, "m", 0x0, "i"
	DCB	0x0, "s", 0x0, "s", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, " "
	DCB	0x0, "c", 0x0, "o", 0x0, "m", 0x0, "p", 0x0, "l", 0x0, "e"
	DCB	0x0, "t", 0x0, "e", 0x0, ",", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, " ", 0x0, "b", 0x0, "y", 0x0, "t", 0x0, "e", 0x0, "s"
	DCB	0x0, " ", 0x0, "s", 0x0, "e", 0x0, "n", 0x0, "t", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DI@GGPGJBLB@?$AA?$CF?$AAd?$AA?5?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?5?$AAa?$AAc?$AAt?$AAu?$AAa?$AAl?$AAl?$AAy?$AA?5?$AAc?$AAo?$AAp?$AAi?$AAe?$AAd?$AA?4?$AA?$AN?$AA?6?$AA?$AA@| DCB "%"
	DCB	0x0, "d", 0x0, " ", 0x0, "b", 0x0, "y", 0x0, "t", 0x0, "e"
	DCB	0x0, "s", 0x0, " ", 0x0, "a", 0x0, "c", 0x0, "t", 0x0, "u"
	DCB	0x0, "a", 0x0, "l", 0x0, "l", 0x0, "y", 0x0, " ", 0x0, "c"
	DCB	0x0, "o", 0x0, "p", 0x0, "i", 0x0, "e", 0x0, "d", 0x0, "."
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DC@FONCMGND@?$AAA?$AAb?$AAo?$AAu?$AAt?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAo?$AAp?$AAy?$AA?5?$AA?$CF?$AAd?$AA?5?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?$AN?$AA?6?$AA?$AA@| DCB "A"
	DCB	0x0, "b", 0x0, "o", 0x0, "u", 0x0, "t", 0x0, " ", 0x0, "t"
	DCB	0x0, "o", 0x0, " ", 0x0, "c", 0x0, "o", 0x0, "p", 0x0, "y"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, "b", 0x0, "y"
	DCB	0x0, "t", 0x0, "e", 0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GC@MPMHAODJ@?$AAT?$AAx?$AAR?$AAe?$AAa?$AAd?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AAT?$AAx?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AAT?$AAx?$AAB?$AAy@| DCB "T"
	DCB	0x0, "x", 0x0, "R", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " "
	DCB	0x0, "T", 0x0, "x", 0x0, "L", 0x0, "e", 0x0, "n", 0x0, "g"
	DCB	0x0, "t", 0x0, "h", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, ",", 0x0, " ", 0x0, "T", 0x0, "x", 0x0, "B"
	DCB	0x0, "y", 0x0, "t", 0x0, "e", 0x0, "s", 0x0, "A", 0x0, "v"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, " ", 0x0, "=", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, ".", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DC@KIHGPOMJ@?$AAX?$AAO?$AAF?$AAF?$AA?8?$AAe?$AAd?$AA?0?$AA?5?$AAs?$AAe?$AAn?$AAd?$AA?5?$AAn?$AAo?$AAt?$AAh?$AAi?$AAn?$AAg?$AA?4?$AA?$AN?$AA?6?$AA?$AA@| DCB "X"
	DCB	0x0, "O", 0x0, "F", 0x0, "F", 0x0, "'", 0x0, "e", 0x0, "d"
	DCB	0x0, ",", 0x0, " ", 0x0, "s", 0x0, "e", 0x0, "n", 0x0, "d"
	DCB	0x0, " ", 0x0, "n", 0x0, "o", 0x0, "t", 0x0, "h", 0x0, "i"
	DCB	0x0, "n", 0x0, "g", 0x0, ".", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BG@OPJKPKO@?$AAR?$AAT?$AAS?$AA?5?$AAs?$AAe?$AAt?$AA?4?$AA?$AN?$AA?6?$AA?$AA@| DCB "R"
	DCB	0x0, "T", 0x0, "S", 0x0, " ", 0x0, "s", 0x0, "e", 0x0, "t"
	DCB	0x0, ".", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FC@IBKKBMKO@?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAE?$AAv?$AAe?$AAn?$AAt?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?5?$AAs?$AAe?$AAn?$AAt?$AA?5?$AAu?$AAp?$AA?9?$AAt@| DCB "S"
	DCB	0x0, "e", 0x0, "r", 0x0, "i", 0x0, "a", 0x0, "l", 0x0, "E"
	DCB	0x0, "v", 0x0, "e", 0x0, "n", 0x0, "t", 0x0, "H", 0x0, "a"
	DCB	0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e", 0x0, "r", 0x0, ":"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, "s", 0x0, "e"
	DCB	0x0, "n", 0x0, "t", 0x0, " ", 0x0, "u", 0x0, "p", 0x0, "-"
	DCB	0x0, "t", 0x0, "o", 0x0, "-", 0x0, "n", 0x0, "o", 0x0, "w"
	DCB	0x0, ".", 0x0, 0xa, 0x0, 0xd, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EI@PHLIHGKN@?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAc?$AAl?$AAo?$AAs?$AAe?$AAd?$AA?$CB?$AA?5?$AAQ?$AAu?$AAi?$AAt?$AA?5?$AAt?$AAr?$AAa?$AAn?$AAs?$AAm?$AAi?$AAs?$AAs?$AAi?$AAo?$AAn@| DCB "D"
	DCB	0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, " "
	DCB	0x0, "c", 0x0, "l", 0x0, "o", 0x0, "s", 0x0, "e", 0x0, "d"
	DCB	0x0, "!", 0x0, " ", 0x0, "Q", 0x0, "u", 0x0, "i", 0x0, "t"
	DCB	0x0, " ", 0x0, "t", 0x0, "r", 0x0, "a", 0x0, "n", 0x0, "s"
	DCB	0x0, "m", 0x0, "i", 0x0, "s", 0x0, "s", 0x0, "i", 0x0, "o"
	DCB	0x0, "n", 0x0, "!", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DK@JKMHGAMG@?$AAD?$AAo?$AAP?$AAu?$AAt?$AAB?$AAy?$AAt?$AAe?$AAs?$AA?5?$AAg?$AAo?$AAt?$AA?5?$AAC?$AAr?$AAi?$AAt?$AAS?$AAe?$AAc?$AA?5?$AA?$CF?$AAx?$AA?4?$AA?$AN?$AA?6?$AA?$AA@| DCB "D"
	DCB	0x0, "o", 0x0, "P", 0x0, "u", 0x0, "t", 0x0, "B", 0x0, "y"
	DCB	0x0, "t", 0x0, "e", 0x0, "s", 0x0, " ", 0x0, "g", 0x0, "o"
	DCB	0x0, "t", 0x0, " ", 0x0, "C", 0x0, "r", 0x0, "i", 0x0, "t"
	DCB	0x0, "S", 0x0, "e", 0x0, "c", 0x0, " ", 0x0, "%", 0x0, "x"
	DCB	0x0, ".", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EE@GKGAJBJP@?$AAD?$AAo?$AAP?$AAu?$AAt?$AAB?$AAy?$AAt?$AAe?$AAs?$AA?5?$AAw?$AAa?$AAi?$AAt?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAC?$AAr?$AAi?$AAt?$AAS?$AAe?$AAc?$AA?5?$AA?$CF?$AAx?$AA?4?$AA?$AN@| DCB "D"
	DCB	0x0, "o", 0x0, "P", 0x0, "u", 0x0, "t", 0x0, "B", 0x0, "y"
	DCB	0x0, "t", 0x0, "e", 0x0, "s", 0x0, " ", 0x0, "w", 0x0, "a"
	DCB	0x0, "i", 0x0, "t", 0x0, " ", 0x0, "f", 0x0, "o", 0x0, "r"
	DCB	0x0, " ", 0x0, "C", 0x0, "r", 0x0, "i", 0x0, "t", 0x0, "S"
	DCB	0x0, "e", 0x0, "c", 0x0, " ", 0x0, "%", 0x0, "x", 0x0, "."
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  000b8			 AREA	 |.text|, CODE, ARM

  000b8		 |DoTxData| PROC

; 162  : {

  000b8		 |$LN33@DoTxData|
  000b8	e1a0c00d	 mov         r12, sp
  000bc	e92d0001	 stmdb       sp!, {r0}
  000c0	e92d5000	 stmdb       sp!, {r12, lr}
  000c4	e24dd038	 sub         sp, sp, #0x38
  000c8		 |$M41391|

; 163  :     PHW_VTBL            pFuncTbl = pSerialHead->pHWObj->pFuncTbl;

  000c8	e59d3040	 ldr         r3, [sp, #0x40]
  000cc	e2833028	 add         r3, r3, #0x28
  000d0	e5933000	 ldr         r3, [r3]
  000d4	e2833008	 add         r3, r3, #8
  000d8	e5933000	 ldr         r3, [r3]
  000dc	e58d3004	 str         r3, [sp, #4]

; 164  :     PVOID               pHWHead = pSerialHead->pHWHead;

  000e0	e59d3040	 ldr         r3, [sp, #0x40]
  000e4	e283302c	 add         r3, r3, #0x2C
  000e8	e5933000	 ldr         r3, [r3]
  000ec	e58d3008	 str         r3, [sp, #8]

; 165  :     ULONG               Len;
; 166  : 
; 167  : 
; 168  : 
; 169  :     DEBUGMSG (ZONE_WRITE, (TEXT("DoPutBytes wait for CritSec %x.\r\n"),
; 170  :                            &(pSerialHead->TxBufferInfo.CS)));

  000f0	e59f3498	 ldr         r3, [pc, #0x498]
  000f4	e5933440	 ldr         r3, [r3, #0x440]
  000f8	e3130008	 tst         r3, #8
  000fc	0a000006	 beq         |$LN9@DoTxData|
  00100	e59d3040	 ldr         r3, [sp, #0x40]
  00104	e28310d0	 add         r1, r3, #0xD0
  00108	e59f04a8	 ldr         r0, [pc, #0x4A8]
  0010c	eb000000	 bl          NKDbgPrintfW
  00110	e3a03001	 mov         r3, #1
  00114	e58d300c	 str         r3, [sp, #0xC]
  00118	ea000001	 b           |$LN10@DoTxData|
  0011c		 |$LN9@DoTxData|
  0011c	e3a03000	 mov         r3, #0
  00120	e58d300c	 str         r3, [sp, #0xC]
  00124		 |$LN10@DoTxData|

; 171  :     TxEnterCS(pSerialHead);

  00124	e59d3040	 ldr         r3, [sp, #0x40]
  00128	e28300d0	 add         r0, r3, #0xD0
  0012c	eb000000	 bl          EnterCriticalSection

; 172  :     DEBUGMSG (ZONE_WRITE, (TEXT("DoPutBytes got CritSec %x.\r\n"),
; 173  :                            &(pSerialHead->TxBufferInfo.CS)));

  00130	e59f3458	 ldr         r3, [pc, #0x458]
  00134	e5933440	 ldr         r3, [r3, #0x440]
  00138	e3130008	 tst         r3, #8
  0013c	0a000006	 beq         |$LN11@DoTxData|
  00140	e59d3040	 ldr         r3, [sp, #0x40]
  00144	e28310d0	 add         r1, r3, #0xD0
  00148	e59f0464	 ldr         r0, [pc, #0x464]
  0014c	eb000000	 bl          NKDbgPrintfW
  00150	e3a03001	 mov         r3, #1
  00154	e58d3010	 str         r3, [sp, #0x10]
  00158	ea000001	 b           |$LN12@DoTxData|
  0015c		 |$LN11@DoTxData|
  0015c	e3a03000	 mov         r3, #0
  00160	e58d3010	 str         r3, [sp, #0x10]
  00164		 |$LN12@DoTxData|

; 174  : 
; 175  :     // If device was closed from under us, stop transmitting
; 176  :     if ( !pSerialHead->OpenCnt ) {

  00164	e59d3040	 ldr         r3, [sp, #0x40]
  00168	e2833090	 add         r3, r3, #0x90
  0016c	e5933000	 ldr         r3, [r3]
  00170	e3530000	 cmp         r3, #0
  00174	1a000028	 bne         |$LN6@DoTxData|

; 177  :         DEBUGMSG (ZONE_THREAD|ZONE_WRITE , (TEXT("Device closed! Quit transmission!\r\n")));

  00178	e59f3410	 ldr         r3, [pc, #0x410]
  0017c	e5933440	 ldr         r3, [r3, #0x440]
  00180	e2032040	 and         r2, r3, #0x40
  00184	e59f3404	 ldr         r3, [pc, #0x404]
  00188	e5933440	 ldr         r3, [r3, #0x440]
  0018c	e2033008	 and         r3, r3, #8
  00190	e1923003	 orrs        r3, r2, r3
  00194	0a000004	 beq         |$LN13@DoTxData|
  00198	e59f0410	 ldr         r0, [pc, #0x410]
  0019c	eb000000	 bl          NKDbgPrintfW
  001a0	e3a03001	 mov         r3, #1
  001a4	e58d3014	 str         r3, [sp, #0x14]
  001a8	ea000001	 b           |$LN14@DoTxData|
  001ac		 |$LN13@DoTxData|
  001ac	e3a03000	 mov         r3, #0
  001b0	e58d3014	 str         r3, [sp, #0x14]
  001b4		 |$LN14@DoTxData|

; 178  :         DEBUGMSG (ZONE_WRITE,
; 179  :                   (TEXT("SerialEventHandler: %d sent up-to-now.\n\r"),pSerialHead->TxBytesSent));

  001b4	e59f33d4	 ldr         r3, [pc, #0x3D4]
  001b8	e5933440	 ldr         r3, [r3, #0x440]
  001bc	e3130008	 tst         r3, #8
  001c0	0a000007	 beq         |$LN15@DoTxData|
  001c4	e59d3040	 ldr         r3, [sp, #0x40]
  001c8	e283305c	 add         r3, r3, #0x5C
  001cc	e5931000	 ldr         r1, [r3]
  001d0	e59f03d4	 ldr         r0, [pc, #0x3D4]
  001d4	eb000000	 bl          NKDbgPrintfW
  001d8	e3a03001	 mov         r3, #1
  001dc	e58d3018	 str         r3, [sp, #0x18]
  001e0	ea000001	 b           |$LN16@DoTxData|
  001e4		 |$LN15@DoTxData|
  001e4	e3a03000	 mov         r3, #0
  001e8	e58d3018	 str         r3, [sp, #0x18]
  001ec		 |$LN16@DoTxData|

; 180  :         pSerialHead->TxBufferInfo.TxCharBuffer = NULL;

  001ec	e59d3040	 ldr         r3, [sp, #0x40]
  001f0	e28320cc	 add         r2, r3, #0xCC
  001f4	e3a03000	 mov         r3, #0
  001f8	e5823000	 str         r3, [r2]

; 181  :         pSerialHead->TxBufferInfo.Length = 0;

  001fc	e59d3040	 ldr         r3, [sp, #0x40]
  00200	e28320c8	 add         r2, r3, #0xC8
  00204	e3a03000	 mov         r3, #0
  00208	e5823000	 str         r3, [r2]

; 182  :         TxRead(pSerialHead) = 0;

  0020c	e59d3040	 ldr         r3, [sp, #0x40]
  00210	e28320c4	 add         r2, r3, #0xC4
  00214	e3a03000	 mov         r3, #0
  00218	e5823000	 str         r3, [r2]
  0021c		 |$LN6@DoTxData|

; 183  :     }
; 184  : 
; 185  :     // Check the flow control status, and if not flowed off, call the
; 186  :     // hw TX routine to actually transmit some data.
; 187  :     if ( pSerialHead->TxBufferInfo.TxCharBuffer && TxBytesAvail(pSerialHead) ) {

  0021c	e59d3040	 ldr         r3, [sp, #0x40]
  00220	e28330cc	 add         r3, r3, #0xCC
  00224	e5933000	 ldr         r3, [r3]
  00228	e3530000	 cmp         r3, #0
  0022c	0a000099	 beq         |$LN5@DoTxData|
  00230	e59d3040	 ldr         r3, [sp, #0x40]
  00234	e28320c8	 add         r2, r3, #0xC8
  00238	e59d3040	 ldr         r3, [sp, #0x40]
  0023c	e28330c4	 add         r3, r3, #0xC4
  00240	e5922000	 ldr         r2, [r2]
  00244	e5933000	 ldr         r3, [r3]
  00248	e0523003	 subs        r3, r2, r3
  0024c	0a000091	 beq         |$LN5@DoTxData|

; 188  :         if ( pSerialHead->DCB.fRtsControl == RTS_CONTROL_TOGGLE ) {

  00250	e59d3040	 ldr         r3, [sp, #0x40]
  00254	e2833068	 add         r3, r3, #0x68
  00258	e5933000	 ldr         r3, [r3]
  0025c	e1a03903	 mov         r3, r3, lsl #18
  00260	e1a03f23	 mov         r3, r3, lsr #30
  00264	e3530003	 cmp         r3, #3
  00268	1a000014	 bne         |$LN4@DoTxData|

; 189  :             DEBUGMSG (ZONE_THREAD|ZONE_WRITE , (TEXT("RTS set.\r\n")));

  0026c	e59f331c	 ldr         r3, [pc, #0x31C]
  00270	e5933440	 ldr         r3, [r3, #0x440]
  00274	e2032040	 and         r2, r3, #0x40
  00278	e59f3310	 ldr         r3, [pc, #0x310]
  0027c	e5933440	 ldr         r3, [r3, #0x440]
  00280	e2033008	 and         r3, r3, #8
  00284	e1923003	 orrs        r3, r2, r3
  00288	0a000004	 beq         |$LN17@DoTxData|
  0028c	e59f0314	 ldr         r0, [pc, #0x314]
  00290	eb000000	 bl          NKDbgPrintfW
  00294	e3a03001	 mov         r3, #1
  00298	e58d301c	 str         r3, [sp, #0x1C]
  0029c	ea000001	 b           |$LN18@DoTxData|
  002a0		 |$LN17@DoTxData|
  002a0	e3a03000	 mov         r3, #0
  002a4	e58d301c	 str         r3, [sp, #0x1C]
  002a8		 |$LN18@DoTxData|

; 190  :             pFuncTbl->HWSetRTS(pHWHead);

  002a8	e59d0008	 ldr         r0, [sp, #8]
  002ac	e59d3004	 ldr         r3, [sp, #4]
  002b0	e2833040	 add         r3, r3, #0x40
  002b4	e5933000	 ldr         r3, [r3]
  002b8	e1a0e00f	 mov         lr, pc
  002bc	e12fff13	 bx          r3
  002c0		 |$LN4@DoTxData|

; 191  :         }
; 192  : 
; 193  :         // Don't transmit anything if we are flowed off.
; 194  :         if ( pSerialHead->StopXmit ) {

  002c0	e59d3040	 ldr         r3, [sp, #0x40]
  002c4	e2833094	 add         r3, r3, #0x94
  002c8	e5933000	 ldr         r3, [r3]
  002cc	e3130004	 tst         r3, #4
  002d0	0a000011	 beq         |$LN3@DoTxData|

; 195  :             // But we still need to call TxIntrHandler so that the interrupt
; 196  :             // gets cleared.
; 197  :             DEBUGMSG (ZONE_FLOW|ZONE_WRITE , (TEXT("XOFF'ed, send nothing.\r\n")));

  002d4	e59f32b4	 ldr         r3, [pc, #0x2B4]
  002d8	e5933440	 ldr         r3, [r3, #0x440]
  002dc	e2032c02	 and         r2, r3, #2, 24
  002e0	e59f32a8	 ldr         r3, [pc, #0x2A8]
  002e4	e5933440	 ldr         r3, [r3, #0x440]
  002e8	e2033008	 and         r3, r3, #8
  002ec	e1923003	 orrs        r3, r2, r3
  002f0	0a000004	 beq         |$LN19@DoTxData|
  002f4	e59f02a8	 ldr         r0, [pc, #0x2A8]
  002f8	eb000000	 bl          NKDbgPrintfW
  002fc	e3a03001	 mov         r3, #1
  00300	e58d3020	 str         r3, [sp, #0x20]
  00304	ea000001	 b           |$LN20@DoTxData|
  00308		 |$LN19@DoTxData|
  00308	e3a03000	 mov         r3, #0
  0030c	e58d3020	 str         r3, [sp, #0x20]
  00310		 |$LN20@DoTxData|

; 198  :             Len = 0;

  00310	e3a03000	 mov         r3, #0
  00314	e58d3000	 str         r3, [sp]

; 199  :         } else {

  00318	ea00001f	 b           |$LN2@DoTxData|
  0031c		 |$LN3@DoTxData|

; 200  :             DEBUGMSG (ZONE_WRITE,
; 201  :                       (TEXT("TxRead = %d, TxLength = %d, TxBytesAvail = %d.\r\n"),
; 202  :                        TxRead(pSerialHead), TxLength(pSerialHead),
; 203  :                        TxBytesAvail(pSerialHead)));

  0031c	e59f326c	 ldr         r3, [pc, #0x26C]
  00320	e5933440	 ldr         r3, [r3, #0x440]
  00324	e3130008	 tst         r3, #8
  00328	0a000011	 beq         |$LN21@DoTxData|
  0032c	e59d3040	 ldr         r3, [sp, #0x40]
  00330	e28320c8	 add         r2, r3, #0xC8
  00334	e59d3040	 ldr         r3, [sp, #0x40]
  00338	e28330c4	 add         r3, r3, #0xC4
  0033c	e5922000	 ldr         r2, [r2]
  00340	e5933000	 ldr         r3, [r3]
  00344	e0423003	 sub         r3, r2, r3
  00348	e59d2040	 ldr         r2, [sp, #0x40]
  0034c	e28220c8	 add         r2, r2, #0xC8
  00350	e5922000	 ldr         r2, [r2]
  00354	e59d1040	 ldr         r1, [sp, #0x40]
  00358	e28110c4	 add         r1, r1, #0xC4
  0035c	e5911000	 ldr         r1, [r1]
  00360	e59f0238	 ldr         r0, [pc, #0x238]
  00364	eb000000	 bl          NKDbgPrintfW
  00368	e3a03001	 mov         r3, #1
  0036c	e58d3024	 str         r3, [sp, #0x24]
  00370	ea000001	 b           |$LN22@DoTxData|
  00374		 |$LN21@DoTxData|
  00374	e3a03000	 mov         r3, #0
  00378	e58d3024	 str         r3, [sp, #0x24]
  0037c		 |$LN22@DoTxData|

; 204  :             Len = TxBytesAvail(pSerialHead);

  0037c	e59d3040	 ldr         r3, [sp, #0x40]
  00380	e28320c8	 add         r2, r3, #0xC8
  00384	e59d3040	 ldr         r3, [sp, #0x40]
  00388	e28330c4	 add         r3, r3, #0xC4
  0038c	e5922000	 ldr         r2, [r2]
  00390	e5933000	 ldr         r3, [r3]
  00394	e0423003	 sub         r3, r2, r3
  00398	e58d3000	 str         r3, [sp]
  0039c		 |$LN2@DoTxData|

; 205  :         }
; 206  :         DEBUGMSG (ZONE_WRITE, (TEXT("About to copy %d bytes\r\n"), Len));

  0039c	e59f31ec	 ldr         r3, [pc, #0x1EC]
  003a0	e5933440	 ldr         r3, [r3, #0x440]
  003a4	e3130008	 tst         r3, #8
  003a8	0a000005	 beq         |$LN23@DoTxData|
  003ac	e59d1000	 ldr         r1, [sp]
  003b0	e59f01e4	 ldr         r0, [pc, #0x1E4]
  003b4	eb000000	 bl          NKDbgPrintfW
  003b8	e3a03001	 mov         r3, #1
  003bc	e58d3028	 str         r3, [sp, #0x28]
  003c0	ea000001	 b           |$LN24@DoTxData|
  003c4		 |$LN23@DoTxData|
  003c4	e3a03000	 mov         r3, #0
  003c8	e58d3028	 str         r3, [sp, #0x28]
  003cc		 |$LN24@DoTxData|

; 207  :         pFuncTbl->HWTxIntrHandler(pHWHead,
; 208  :                                   TxBuffRead(pSerialHead),
; 209  :                                   &Len);

  003cc	e28d2000	 add         r2, sp, #0
  003d0	e59d3040	 ldr         r3, [sp, #0x40]
  003d4	e28310cc	 add         r1, r3, #0xCC
  003d8	e59d3040	 ldr         r3, [sp, #0x40]
  003dc	e28330c4	 add         r3, r3, #0xC4
  003e0	e5911000	 ldr         r1, [r1]
  003e4	e5933000	 ldr         r3, [r3]
  003e8	e0811003	 add         r1, r1, r3
  003ec	e59d0008	 ldr         r0, [sp, #8]
  003f0	e59d3004	 ldr         r3, [sp, #4]
  003f4	e283301c	 add         r3, r3, #0x1C
  003f8	e5933000	 ldr         r3, [r3]
  003fc	e1a0e00f	 mov         lr, pc
  00400	e12fff13	 bx          r3

; 210  :         DEBUGMSG (ZONE_WRITE, (TEXT("%d bytes actually copied.\r\n"), Len));

  00404	e59f3184	 ldr         r3, [pc, #0x184]
  00408	e5933440	 ldr         r3, [r3, #0x440]
  0040c	e3130008	 tst         r3, #8
  00410	0a000005	 beq         |$LN25@DoTxData|
  00414	e59d1000	 ldr         r1, [sp]
  00418	e59f0178	 ldr         r0, [pc, #0x178]
  0041c	eb000000	 bl          NKDbgPrintfW
  00420	e3a03001	 mov         r3, #1
  00424	e58d302c	 str         r3, [sp, #0x2C]
  00428	ea000001	 b           |$LN26@DoTxData|
  0042c		 |$LN25@DoTxData|
  0042c	e3a03000	 mov         r3, #0
  00430	e58d302c	 str         r3, [sp, #0x2C]
  00434		 |$LN26@DoTxData|

; 211  :         // Update Fifo info
; 212  :         pSerialHead->TxBytes += Len;

  00434	e59d3040	 ldr         r3, [sp, #0x40]
  00438	e2833054	 add         r3, r3, #0x54
  0043c	e5932000	 ldr         r2, [r3]
  00440	e59d3000	 ldr         r3, [sp]
  00444	e0822003	 add         r2, r2, r3
  00448	e59d3040	 ldr         r3, [sp, #0x40]
  0044c	e2833054	 add         r3, r3, #0x54
  00450	e5832000	 str         r2, [r3]

; 213  :         pSerialHead->TxBytesSent += Len;

  00454	e59d3040	 ldr         r3, [sp, #0x40]
  00458	e283305c	 add         r3, r3, #0x5C
  0045c	e5932000	 ldr         r2, [r3]
  00460	e59d3000	 ldr         r3, [sp]
  00464	e0822003	 add         r2, r2, r3
  00468	e59d3040	 ldr         r3, [sp, #0x40]
  0046c	e283305c	 add         r3, r3, #0x5C
  00470	e5832000	 str         r2, [r3]

; 214  :         TxRead(pSerialHead) += Len;

  00474	e59d3040	 ldr         r3, [sp, #0x40]
  00478	e28330c4	 add         r3, r3, #0xC4
  0047c	e5932000	 ldr         r2, [r3]
  00480	e59d3000	 ldr         r3, [sp]
  00484	e0822003	 add         r2, r2, r3
  00488	e59d3040	 ldr         r3, [sp, #0x40]
  0048c	e28330c4	 add         r3, r3, #0xC4
  00490	e5832000	 str         r2, [r3]

; 215  : 
; 216  :         // Even if everything was Tx'ed, don't signal TX complete until
; 217  :         // we get transmit interrupt indicating that the data has
; 218  :         // actually been sent.  Since few/no UARTS have a way to tell
; 219  :         // how much data remains, we don't bother trying to adjust the
; 220  :         // return length to account for partially completed hardware buffer TX
; 221  :     } else {

  00494	ea000025	 b           |$LN1@DoTxData|
  00498		 |$LN5@DoTxData|

; 222  :         // Even if there is nothing left to send, we need to call
; 223  :         // the interrupt handler so that it can clear the
; 224  :         // transmit interrupt
; 225  :         Len = 0;

  00498	e3a03000	 mov         r3, #0
  0049c	e58d3000	 str         r3, [sp]

; 226  :         pFuncTbl->HWTxIntrHandler(pHWHead,
; 227  :                                   NULL,
; 228  :                                   &Len);

  004a0	e28d2000	 add         r2, sp, #0
  004a4	e3a01000	 mov         r1, #0
  004a8	e59d0008	 ldr         r0, [sp, #8]
  004ac	e59d3004	 ldr         r3, [sp, #4]
  004b0	e283301c	 add         r3, r3, #0x1C
  004b4	e5933000	 ldr         r3, [r3]
  004b8	e1a0e00f	 mov         lr, pc
  004bc	e12fff13	 bx          r3

; 229  :         DEBUGMSG (ZONE_WRITE, (TEXT("Transmission complete, %d bytes sent\r\n"), Len));

  004c0	e59f30c8	 ldr         r3, [pc, #0xC8]
  004c4	e5933440	 ldr         r3, [r3, #0x440]
  004c8	e3130008	 tst         r3, #8
  004cc	0a000005	 beq         |$LN27@DoTxData|
  004d0	e59d1000	 ldr         r1, [sp]
  004d4	e59f00b8	 ldr         r0, [pc, #0xB8]
  004d8	eb000000	 bl          NKDbgPrintfW
  004dc	e3a03001	 mov         r3, #1
  004e0	e58d3030	 str         r3, [sp, #0x30]
  004e4	ea000001	 b           |$LN28@DoTxData|
  004e8		 |$LN27@DoTxData|
  004e8	e3a03000	 mov         r3, #0
  004ec	e58d3030	 str         r3, [sp, #0x30]
  004f0		 |$LN28@DoTxData|

; 230  :         pSerialHead->TxBufferInfo.TxCharBuffer = NULL;

  004f0	e59d3040	 ldr         r3, [sp, #0x40]
  004f4	e28320cc	 add         r2, r3, #0xCC
  004f8	e3a03000	 mov         r3, #0
  004fc	e5823000	 str         r3, [r2]

; 231  :         pSerialHead->TxBufferInfo.Length = 0;

  00500	e59d3040	 ldr         r3, [sp, #0x40]
  00504	e28320c8	 add         r2, r3, #0xC8
  00508	e3a03000	 mov         r3, #0
  0050c	e5823000	 str         r3, [r2]

; 232  :         TxRead(pSerialHead) = 0;

  00510	e59d3040	 ldr         r3, [sp, #0x40]
  00514	e28320c4	 add         r2, r3, #0xC4
  00518	e3a03000	 mov         r3, #0
  0051c	e5823000	 str         r3, [r2]

; 233  :         SetEvent(pSerialHead->hTransmitEvent);

  00520	e59d3040	 ldr         r3, [sp, #0x40]
  00524	e283303c	 add         r3, r3, #0x3C
  00528	e5930000	 ldr         r0, [r3]
  0052c	eb000000	 bl          SetEvent
  00530		 |$LN1@DoTxData|

; 234  :     }
; 235  : 
; 236  :     TxLeaveCS(pSerialHead);

  00530	e59d3040	 ldr         r3, [sp, #0x40]
  00534	e28300d0	 add         r0, r3, #0xD0
  00538	eb000000	 bl          LeaveCriticalSection

; 237  :     DEBUGMSG (ZONE_WRITE|ZONE_FUNCTION,
; 238  :               (TEXT("DoPutBytes released CritSec: %x.\r\n"),
; 239  :                &(pSerialHead->TxBufferInfo.CS)));

  0053c	e59f304c	 ldr         r3, [pc, #0x4C]
  00540	e5933440	 ldr         r3, [r3, #0x440]
  00544	e2032008	 and         r2, r3, #8
  00548	e59f3040	 ldr         r3, [pc, #0x40]
  0054c	e5933440	 ldr         r3, [r3, #0x440]
  00550	e2033a02	 and         r3, r3, #2, 20
  00554	e1923003	 orrs        r3, r2, r3
  00558	0a000006	 beq         |$LN29@DoTxData|
  0055c	e59d3040	 ldr         r3, [sp, #0x40]
  00560	e28310d0	 add         r1, r3, #0xD0
  00564	e59f0020	 ldr         r0, [pc, #0x20]
  00568	eb000000	 bl          NKDbgPrintfW
  0056c	e3a03001	 mov         r3, #1
  00570	e58d3034	 str         r3, [sp, #0x34]
  00574	ea000001	 b           |$LN30@DoTxData|
  00578		 |$LN29@DoTxData|
  00578	e3a03000	 mov         r3, #0
  0057c	e58d3034	 str         r3, [sp, #0x34]
  00580		 |$LN30@DoTxData|

; 240  : 
; 241  : }

  00580	e28dd038	 add         sp, sp, #0x38
  00584	e89d6000	 ldmia       sp, {sp, lr}
  00588	e12fff1e	 bx          lr
  0058c		 |$LN34@DoTxData|
  0058c		 |$LN35@DoTxData|
  0058c	00000000	 DCD         |??_C@_1EG@PNOECNFM@?$AAD?$AAo?$AAP?$AAu?$AAt?$AAB?$AAy?$AAt?$AAe?$AAs?$AA?5?$AAr?$AAe?$AAl?$AAe?$AAa?$AAs?$AAe?$AAd?$AA?5?$AAC?$AAr?$AAi?$AAt?$AAS?$AAe?$AAc?$AA?3?$AA?5?$AA?$CF?$AAx?$AA?4@|
  00590		 |$LN36@DoTxData|
  00590	00000000	 DCD         |dpCurSettings|
  00594		 |$LN37@DoTxData|
  00594	00000000	 DCD         |??_C@_1EO@IFEAHMMF@?$AAT?$AAr?$AAa?$AAn?$AAs?$AAm?$AAi?$AAs?$AAs?$AAi?$AAo?$AAn?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAe?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?5?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?5@|
  00598		 |$LN38@DoTxData|
  00598	00000000	 DCD         |??_C@_1DI@GGPGJBLB@?$AA?$CF?$AAd?$AA?5?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?5?$AAa?$AAc?$AAt?$AAu?$AAa?$AAl?$AAl?$AAy?$AA?5?$AAc?$AAo?$AAp?$AAi?$AAe?$AAd?$AA?4?$AA?$AN?$AA?6?$AA?$AA@|
  0059c		 |$LN39@DoTxData|
  0059c	00000000	 DCD         |??_C@_1DC@FONCMGND@?$AAA?$AAb?$AAo?$AAu?$AAt?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAo?$AAp?$AAy?$AA?5?$AA?$CF?$AAd?$AA?5?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?$AN?$AA?6?$AA?$AA@|
  005a0		 |$LN40@DoTxData|
  005a0	00000000	 DCD         |??_C@_1GC@MPMHAODJ@?$AAT?$AAx?$AAR?$AAe?$AAa?$AAd?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AAT?$AAx?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AAT?$AAx?$AAB?$AAy@|
  005a4		 |$LN41@DoTxData|
  005a4	00000000	 DCD         |??_C@_1DC@KIHGPOMJ@?$AAX?$AAO?$AAF?$AAF?$AA?8?$AAe?$AAd?$AA?0?$AA?5?$AAs?$AAe?$AAn?$AAd?$AA?5?$AAn?$AAo?$AAt?$AAh?$AAi?$AAn?$AAg?$AA?4?$AA?$AN?$AA?6?$AA?$AA@|
  005a8		 |$LN42@DoTxData|
  005a8	00000000	 DCD         |??_C@_1BG@OPJKPKO@?$AAR?$AAT?$AAS?$AA?5?$AAs?$AAe?$AAt?$AA?4?$AA?$AN?$AA?6?$AA?$AA@|
  005ac		 |$LN43@DoTxData|
  005ac	00000000	 DCD         |??_C@_1FC@IBKKBMKO@?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAE?$AAv?$AAe?$AAn?$AAt?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?5?$AAs?$AAe?$AAn?$AAt?$AA?5?$AAu?$AAp?$AA?9?$AAt@|
  005b0		 |$LN44@DoTxData|
  005b0	00000000	 DCD         |??_C@_1EI@PHLIHGKN@?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAc?$AAl?$AAo?$AAs?$AAe?$AAd?$AA?$CB?$AA?5?$AAQ?$AAu?$AAi?$AAt?$AA?5?$AAt?$AAr?$AAa?$AAn?$AAs?$AAm?$AAi?$AAs?$AAs?$AAi?$AAo?$AAn@|
  005b4		 |$LN45@DoTxData|
  005b4	00000000	 DCD         |??_C@_1DK@JKMHGAMG@?$AAD?$AAo?$AAP?$AAu?$AAt?$AAB?$AAy?$AAt?$AAe?$AAs?$AA?5?$AAg?$AAo?$AAt?$AA?5?$AAC?$AAr?$AAi?$AAt?$AAS?$AAe?$AAc?$AA?5?$AA?$CF?$AAx?$AA?4?$AA?$AN?$AA?6?$AA?$AA@|
  005b8		 |$LN46@DoTxData|
  005b8	00000000	 DCD         |??_C@_1EE@GKGAJBJP@?$AAD?$AAo?$AAP?$AAu?$AAt?$AAB?$AAy?$AAt?$AAe?$AAs?$AA?5?$AAw?$AAa?$AAi?$AAt?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAC?$AAr?$AAi?$AAt?$AAS?$AAe?$AAc?$AA?5?$AA?$CF?$AAx?$AA?4?$AA?$AN@|
  005bc		 |$M41392|

			 ENDP  ; |DoTxData|

	IMPORT	|EventModify|
; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T41413| DCD	|$LN5@SetEvent|
	DCD	0x40000e04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SetEvent| PROC

; 235  : _inline BOOL SetEvent(HANDLE h) {

  00000		 |$LN5@SetEvent|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd008	 sub         sp, sp, #8
  00010		 |$M41410|

; 236  : 	return EventModify(h,EVENT_SET);

  00010	e3a01003	 mov         r1, #3
  00014	e59d0010	 ldr         r0, [sp, #0x10]
  00018	eb000000	 bl          EventModify
  0001c	e58d0004	 str         r0, [sp, #4]
  00020	e59d3004	 ldr         r3, [sp, #4]
  00024	e58d3000	 str         r3, [sp]

; 237  : }

  00028	e59d0000	 ldr         r0, [sp]
  0002c	e28dd008	 add         sp, sp, #8
  00030	e89d6000	 ldmia       sp, {sp, lr}
  00034	e12fff1e	 bx          lr
  00038		 |$M41411|

			 ENDP  ; |SetEvent|

	EXPORT	|??_C@_1FI@GGFBGELP@?$AA?9?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAE?$AAv?$AAe?$AAn?$AAt?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?0?$AA?5?$AAF?$AAi?$AAf?$AAo?$AA?$CI?$AAR?$AA?$DN?$AA?$CF?$AAd?$AA?0?$AAW@| [ DATA ] ; `string'
	EXPORT	|EvaluateEventFlag|
	EXPORT	|??_C@_1CI@EJHAPNLK@?$AAL?$AAi?$AAn?$AAe?$AA?5?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?0?$AA?5?$AAi?$AAt?$AA?3?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CK@CPCFPBFI@?$AAO?$AAt?$AAh?$AAe?$AAr?$AA?5?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?0?$AA?5?$AAi?$AAt?$AA?3?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BG@KFPNBBDH@?$AAT?$AAx?$AA?5?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BO@CNGNDNHF@?$AAS?$AAe?$AAn?$AAd?$AAi?$AAn?$AAg?$AA?5?$AAX?$AAO?$AAF?$AAF?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EK@LMCHJDFJ@?$AAR?$AAT?$AAS?$AA_?$AAC?$AAO?$AAN?$AAT?$AAR?$AAO?$AAL?$AA_?$AAH?$AAA?$AAN?$AAD?$AAS?$AAH?$AAA?$AAK?$AAE?$AA?5?$AAC?$AAl?$AAe?$AAa?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAR@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EK@FLILIJBB@?$AAD?$AAT?$AAR?$AA_?$AAC?$AAO?$AAN?$AAT?$AAR?$AAO?$AAL?$AA_?$AAH?$AAA?$AAN?$AAD?$AAS?$AAH?$AAA?$AAK?$AAE?$AA?5?$AAC?$AAl?$AAe?$AAa?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAD@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BO@EEIJDLJ@?$AAR?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AAd?$AA?5?$AAX?$AAO?$AAN?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CA@EJJJJNNE@?$AAR?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AAd?$AA?5?$AAX?$AAO?$AAF?$AAF?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HG@EGFFDKNF@?$AAA?$AAf?$AAt?$AAe?$AAr?$AA?5?$AAH?$AAW?$AAG?$AAe?$AAt?$AAB?$AAy?$AAt?$AAe?$AAs?$AA?0?$AA?5?$AAF?$AAi?$AAf?$AAo?$AA?$CI?$AAR?$AA?$DN?$AA?$CF?$AAd?$AA?0?$AAW?$AA?$DN?$AA?$CF?$AAd@| [ DATA ] ; `string'
	EXPORT	|RxBytesAvail|
	EXPORT	|??_C@_1CE@NDNCGIIC@?$AAT?$AAo?$AAs?$AAs?$AAe?$AAd?$AA?5?$AA?$CF?$AAd?$AA?5?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BG@NHAMELLH@?$AAR?$AAx?$AA?5?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EM@PPCKGCIP@?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAE?$AAv?$AAe?$AAn?$AAt?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?0?$AA?5?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAs?$AA?5?$AA0@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EI@MHGBBLDA@?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAE?$AAv?$AAe?$AAn?$AAt?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?0?$AA?5?$AAN?$AAo?$AA?5?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CE@JLPIMJPF@?$AAE?$AAx?$AAi?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAt?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EE@PGFICLOP@?$AA?$CL?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAE?$AAv?$AAe?$AAn?$AAt?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?0?$AA?5?$AAp?$AAH?$AAe?$AAa?$AAd?$AA?5?$AA0?$AAx?$AA?$CF?$AAX?$AA?$AN@| [ DATA ] ; `string'
	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|SerialEventHandler|
	IMPORT	|InterlockedDecrement|
	IMPORT	|memmove|
	IMPORT	|InterlockedCompareExchange|
	IMPORT	|InterlockedIncrement|
	IMPORT	|ExitThread|
	IMPORT	|__security_cookie|
	IMPORT	|__GSHandlerCheck|
	IMPORT	|__security_check_cookie|

  00010			 AREA	 |.pdata|, PDATA
|$T41463| DCD	|$LN73@SerialEven|
	DCD	0xc002d204
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\serial\com_mdd2\mdd.c

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FI@GGFBGELP@?$AA?9?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAE?$AAv?$AAe?$AAn?$AAt?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?0?$AA?5?$AAF?$AAi?$AAf?$AAo?$AA?$CI?$AAR?$AA?$DN?$AA?$CF?$AAd?$AA?0?$AAW@| DCB "-"
	DCB	0x0, "S", 0x0, "e", 0x0, "r", 0x0, "i", 0x0, "a", 0x0, "l"
	DCB	0x0, "E", 0x0, "v", 0x0, "e", 0x0, "n", 0x0, "t", 0x0, "H"
	DCB	0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e", 0x0, "r"
	DCB	0x0, ",", 0x0, " ", 0x0, "F", 0x0, "i", 0x0, "f", 0x0, "o"
	DCB	0x0, "(", 0x0, "R", 0x0, "=", 0x0, "%", 0x0, "d", 0x0, ","
	DCB	0x0, "W", 0x0, "=", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, "L"
	DCB	0x0, "=", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@EJHAPNLK@?$AAL?$AAi?$AAn?$AAe?$AA?5?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?0?$AA?5?$AAi?$AAt?$AA?3?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "L"
	DCB	0x0, "i", 0x0, "n", 0x0, "e", 0x0, " ", 0x0, "E", 0x0, "v"
	DCB	0x0, "e", 0x0, "n", 0x0, "t", 0x0, ",", 0x0, " ", 0x0, "i"
	DCB	0x0, "t", 0x0, ":", 0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CK@CPCFPBFI@?$AAO?$AAt?$AAh?$AAe?$AAr?$AA?5?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?0?$AA?5?$AAi?$AAt?$AA?3?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "O"
	DCB	0x0, "t", 0x0, "h", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, "E"
	DCB	0x0, "v", 0x0, "e", 0x0, "n", 0x0, "t", 0x0, ",", 0x0, " "
	DCB	0x0, "i", 0x0, "t", 0x0, ":", 0x0, "%", 0x0, "x", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BG@KFPNBBDH@?$AAT?$AAx?$AA?5?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?$AN?$AA?6?$AA?$AA@| DCB "T"
	DCB	0x0, "x", 0x0, " ", 0x0, "E", 0x0, "v", 0x0, "e", 0x0, "n"
	DCB	0x0, "t", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@CNGNDNHF@?$AAS?$AAe?$AAn?$AAd?$AAi?$AAn?$AAg?$AA?5?$AAX?$AAO?$AAF?$AAF?$AA?$AN?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "e", 0x0, "n", 0x0, "d", 0x0, "i", 0x0, "n", 0x0, "g"
	DCB	0x0, " ", 0x0, "X", 0x0, "O", 0x0, "F", 0x0, "F", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EK@LMCHJDFJ@?$AAR?$AAT?$AAS?$AA_?$AAC?$AAO?$AAN?$AAT?$AAR?$AAO?$AAL?$AA_?$AAH?$AAA?$AAN?$AAD?$AAS?$AAH?$AAA?$AAK?$AAE?$AA?5?$AAC?$AAl?$AAe?$AAa?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAR@| DCB "R"
	DCB	0x0, "T", 0x0, "S", 0x0, "_", 0x0, "C", 0x0, "O", 0x0, "N"
	DCB	0x0, "T", 0x0, "R", 0x0, "O", 0x0, "L", 0x0, "_", 0x0, "H"
	DCB	0x0, "A", 0x0, "N", 0x0, "D", 0x0, "S", 0x0, "H", 0x0, "A"
	DCB	0x0, "K", 0x0, "E", 0x0, " ", 0x0, "C", 0x0, "l", 0x0, "e"
	DCB	0x0, "a", 0x0, "r", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, " "
	DCB	0x0, "R", 0x0, "T", 0x0, "S", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EK@FLILIJBB@?$AAD?$AAT?$AAR?$AA_?$AAC?$AAO?$AAN?$AAT?$AAR?$AAO?$AAL?$AA_?$AAH?$AAA?$AAN?$AAD?$AAS?$AAH?$AAA?$AAK?$AAE?$AA?5?$AAC?$AAl?$AAe?$AAa?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAD@| DCB "D"
	DCB	0x0, "T", 0x0, "R", 0x0, "_", 0x0, "C", 0x0, "O", 0x0, "N"
	DCB	0x0, "T", 0x0, "R", 0x0, "O", 0x0, "L", 0x0, "_", 0x0, "H"
	DCB	0x0, "A", 0x0, "N", 0x0, "D", 0x0, "S", 0x0, "H", 0x0, "A"
	DCB	0x0, "K", 0x0, "E", 0x0, " ", 0x0, "C", 0x0, "l", 0x0, "e"
	DCB	0x0, "a", 0x0, "r", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, " "
	DCB	0x0, "D", 0x0, "T", 0x0, "R", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@EEIJDLJ@?$AAR?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AAd?$AA?5?$AAX?$AAO?$AAN?$AA?$AN?$AA?6?$AA?$AA@| DCB "R"
	DCB	0x0, "e", 0x0, "c", 0x0, "e", 0x0, "i", 0x0, "v", 0x0, "e"
	DCB	0x0, "d", 0x0, " ", 0x0, "X", 0x0, "O", 0x0, "N", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CA@EJJJJNNE@?$AAR?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AAd?$AA?5?$AAX?$AAO?$AAF?$AAF?$AA?$AN?$AA?6?$AA?$AA@| DCB "R"
	DCB	0x0, "e", 0x0, "c", 0x0, "e", 0x0, "i", 0x0, "v", 0x0, "e"
	DCB	0x0, "d", 0x0, " ", 0x0, "X", 0x0, "O", 0x0, "F", 0x0, "F"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HG@EGFFDKNF@?$AAA?$AAf?$AAt?$AAe?$AAr?$AA?5?$AAH?$AAW?$AAG?$AAe?$AAt?$AAB?$AAy?$AAt?$AAe?$AAs?$AA?0?$AA?5?$AAF?$AAi?$AAf?$AAo?$AA?$CI?$AAR?$AA?$DN?$AA?$CF?$AAd?$AA?0?$AAW?$AA?$DN?$AA?$CF?$AAd@| DCB "A"
	DCB	0x0, "f", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, "H"
	DCB	0x0, "W", 0x0, "G", 0x0, "e", 0x0, "t", 0x0, "B", 0x0, "y"
	DCB	0x0, "t", 0x0, "e", 0x0, "s", 0x0, ",", 0x0, " ", 0x0, "F"
	DCB	0x0, "i", 0x0, "f", 0x0, "o", 0x0, "(", 0x0, "R", 0x0, "="
	DCB	0x0, "%", 0x0, "d", 0x0, ",", 0x0, "W", 0x0, "=", 0x0, "%"
	DCB	0x0, "d", 0x0, ",", 0x0, "B", 0x0, "A", 0x0, "=", 0x0, "%"
	DCB	0x0, "d", 0x0, ",", 0x0, "L", 0x0, "=", 0x0, "%", 0x0, "d"
	DCB	0x0, ")", 0x0, " ", 0x0, "B", 0x0, "y", 0x0, "t", 0x0, "e"
	DCB	0x0, "R", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, "=", 0x0, "%"
	DCB	0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@NDNCGIIC@?$AAT?$AAo?$AAs?$AAs?$AAe?$AAd?$AA?5?$AA?$CF?$AAd?$AA?5?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?$AN?$AA?6?$AA?$AA@| DCB "T"
	DCB	0x0, "o", 0x0, "s", 0x0, "s", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, " ", 0x0, "b", 0x0, "y", 0x0, "t"
	DCB	0x0, "e", 0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BG@NHAMELLH@?$AAR?$AAx?$AA?5?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?$AN?$AA?6?$AA?$AA@| DCB "R"
	DCB	0x0, "x", 0x0, " ", 0x0, "E", 0x0, "v", 0x0, "e", 0x0, "n"
	DCB	0x0, "t", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EM@PPCKGCIP@?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAE?$AAv?$AAe?$AAn?$AAt?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?0?$AA?5?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAs?$AA?5?$AA0@| DCB "S"
	DCB	0x0, "e", 0x0, "r", 0x0, "i", 0x0, "a", 0x0, "l", 0x0, "E"
	DCB	0x0, "v", 0x0, "e", 0x0, "n", 0x0, "t", 0x0, "H", 0x0, "a"
	DCB	0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e", 0x0, "r", 0x0, ","
	DCB	0x0, " ", 0x0, "I", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r"
	DCB	0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t", 0x0, "s", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "X", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EI@MHGBBLDA@?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAE?$AAv?$AAe?$AAn?$AAt?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?0?$AA?5?$AAN?$AAo?$AA?5?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt@| DCB "S"
	DCB	0x0, "e", 0x0, "r", 0x0, "i", 0x0, "a", 0x0, "l", 0x0, "E"
	DCB	0x0, "v", 0x0, "e", 0x0, "n", 0x0, "t", 0x0, "H", 0x0, "a"
	DCB	0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e", 0x0, "r", 0x0, ","
	DCB	0x0, " ", 0x0, "N", 0x0, "o", 0x0, " ", 0x0, "I", 0x0, "n"
	DCB	0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p"
	DCB	0x0, "t", 0x0, ".", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@JLPIMJPF@?$AAE?$AAx?$AAi?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAt?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "E"
	DCB	0x0, "x", 0x0, "i", 0x0, "t", 0x0, "t", 0x0, "i", 0x0, "n"
	DCB	0x0, "g", 0x0, " ", 0x0, "t", 0x0, "h", 0x0, "r", 0x0, "e"
	DCB	0x0, "a", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EE@PGFICLOP@?$AA?$CL?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAE?$AAv?$AAe?$AAn?$AAt?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?0?$AA?5?$AAp?$AAH?$AAe?$AAa?$AAd?$AA?5?$AA0?$AAx?$AA?$CF?$AAX?$AA?$AN@| DCB "+"
	DCB	0x0, "S", 0x0, "e", 0x0, "r", 0x0, "i", 0x0, "a", 0x0, "l"
	DCB	0x0, "E", 0x0, "v", 0x0, "e", 0x0, "n", 0x0, "t", 0x0, "H"
	DCB	0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e", 0x0, "r"
	DCB	0x0, ",", 0x0, " ", 0x0, "p", 0x0, "H", 0x0, "e", 0x0, "a"
	DCB	0x0, "d", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "X"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.xdata|, DATA
|$T41459| DCD	0xffffff90
; Function compile flags: /Odtp

  005bc			 AREA	 |.text|, CODE, ARM

  005bc	00000000	 DCD         |__GSHandlerCheck|
  005c0	00000000	 DCD         |$T41459|

  005c4		 |SerialEventHandler| PROC

; 245  : {

  005c4		 |$LN73@SerialEven|
  005c4	e1a0c00d	 mov         r12, sp
  005c8	e92d0001	 stmdb       sp!, {r0}
  005cc	e92d5000	 stmdb       sp!, {r12, lr}
  005d0	e24dd0a4	 sub         sp, sp, #0xA4
  005d4		 |$M41460|
  005d4	e59f3b2c	 ldr         r3, [pc, #0xB2C]
  005d8	e5933000	 ldr         r3, [r3]
  005dc	e58d3040	 str         r3, [sp, #0x40]

; 246  :     PHW_VTBL            pFuncTbl = pSerialHead->pHWObj->pFuncTbl;

  005e0	e59d30ac	 ldr         r3, [sp, #0xAC]
  005e4	e2833028	 add         r3, r3, #0x28
  005e8	e5933000	 ldr         r3, [r3]
  005ec	e2833008	 add         r3, r3, #8
  005f0	e5933000	 ldr         r3, [r3]
  005f4	e58d3014	 str         r3, [sp, #0x14]

; 247  :     PVOID               pHWHead = pSerialHead->pHWHead;

  005f8	e59d30ac	 ldr         r3, [sp, #0xAC]
  005fc	e283302c	 add         r3, r3, #0x2C
  00600	e5933000	 ldr         r3, [r3]
  00604	e58d3020	 str         r3, [sp, #0x20]

; 248  :     ULONG               CharIndex;
; 249  :     ULONG               RoomLeft = 0;

  00608	e3a03000	 mov         r3, #0
  0060c	e58d301c	 str         r3, [sp, #0x1C]

; 250  :     ULONG               TotalLeft = 0;

  00610	e3a03000	 mov         r3, #0
  00614	e58d3010	 str         r3, [sp, #0x10]

; 251  :     INTERRUPT_TYPE      it = INTR_NONE;

  00618	e3a03000	 mov         r3, #0
  0061c	e58d300c	 str         r3, [sp, #0xC]

; 252  :     BOOL                RxDataAvail = FALSE;

  00620	e3a03000	 mov         r3, #0
  00624	e58d3008	 str         r3, [sp, #8]

; 253  : 
; 254  :     DEBUGMSG (ZONE_THREAD, (TEXT("+SerialEventHandler, pHead 0x%X\r\n"),
; 255  :                             pSerialHead));

  00628	e59f3a98	 ldr         r3, [pc, #0xA98]
  0062c	e5933440	 ldr         r3, [r3, #0x440]
  00630	e3130040	 tst         r3, #0x40
  00634	0a000005	 beq         |$LN35@SerialEven|
  00638	e59d10ac	 ldr         r1, [sp, #0xAC]
  0063c	e59f0ac0	 ldr         r0, [pc, #0xAC0]
  00640	eb000000	 bl          NKDbgPrintfW
  00644	e3a03001	 mov         r3, #1
  00648	e58d304c	 str         r3, [sp, #0x4C]
  0064c	ea000001	 b           |$LN36@SerialEven|
  00650		 |$LN35@SerialEven|
  00650	e3a03000	 mov         r3, #0
  00654	e58d304c	 str         r3, [sp, #0x4C]
  00658		 |$LN36@SerialEven|

; 256  : 
; 257  :     if ( pSerialHead->KillRxThread ||
; 258  :          !pSerialHead->hSerialEvent ) {

  00658	e59d30ac	 ldr         r3, [sp, #0xAC]
  0065c	e2833094	 add         r3, r3, #0x94
  00660	e5933000	 ldr         r3, [r3]
  00664	e3130001	 tst         r3, #1
  00668	1a000004	 bne         |$LN31@SerialEven|
  0066c	e59d30ac	 ldr         r3, [sp, #0xAC]
  00670	e2833030	 add         r3, r3, #0x30
  00674	e5933000	 ldr         r3, [r3]
  00678	e3530000	 cmp         r3, #0
  0067c	1a000010	 bne         |$LN32@SerialEven|
  00680		 |$LN31@SerialEven|

; 259  :         DEBUGMSG (ZONE_THREAD, (TEXT("Exitting thread\r\n")));

  00680	e59f3a40	 ldr         r3, [pc, #0xA40]
  00684	e5933440	 ldr         r3, [r3, #0x440]
  00688	e3130040	 tst         r3, #0x40
  0068c	0a000004	 beq         |$LN37@SerialEven|
  00690	e59f0a68	 ldr         r0, [pc, #0xA68]
  00694	eb000000	 bl          NKDbgPrintfW
  00698	e3a03001	 mov         r3, #1
  0069c	e58d3050	 str         r3, [sp, #0x50]
  006a0	ea000001	 b           |$LN38@SerialEven|
  006a4		 |$LN37@SerialEven|
  006a4	e3a03000	 mov         r3, #0
  006a8	e58d3050	 str         r3, [sp, #0x50]
  006ac		 |$LN38@SerialEven|

; 260  :         SetEvent(pSerialHead->hKillDispatchThread);

  006ac	e59d30ac	 ldr         r3, [sp, #0xAC]
  006b0	e2833038	 add         r3, r3, #0x38
  006b4	e5930000	 ldr         r0, [r3]
  006b8	eb000000	 bl          SetEvent

; 261  :         ExitThread(0);

  006bc	e3a00000	 mov         r0, #0
  006c0	eb000000	 bl          ExitThread
  006c4		 |$LN32@SerialEven|

; 262  :     }
; 263  : 
; 264  : // NOTE - This one is a little tricky.  If the only owner is a monitoring task
; 265  : // then I don't have an owner for read/write, yet I might be in this routine
; 266  : // due to a change in line status.  Lets just do the best we can and increment
; 267  : // the count for the access owner if available.
; 268  :     if ( pSerialHead->pAccessOwner )

  006c4	e59d30ac	 ldr         r3, [sp, #0xAC]
  006c8	e2833c01	 add         r3, r3, #1, 24
  006cc	e5933000	 ldr         r3, [r3]
  006d0	e3530000	 cmp         r3, #0
  006d4	0a000004	 beq         |$LN30@SerialEven|

; 269  :         COM_INC_USAGE_CNT(pSerialHead->pAccessOwner);

  006d8	e59d30ac	 ldr         r3, [sp, #0xAC]
  006dc	e2833c01	 add         r3, r3, #1, 24
  006e0	e5933000	 ldr         r3, [r3]
  006e4	e283000c	 add         r0, r3, #0xC
  006e8	eb000000	 bl          InterlockedIncrement
  006ec		 |$LN30@SerialEven|
  006ec		 |$LN29@SerialEven|

; 270  : 
; 271  :     while ( 1 ) {
; 272  : 
; 273  :         if ( !(it = pFuncTbl->HWGetIntrType(pHWHead)) ) {

  006ec	e59d0020	 ldr         r0, [sp, #0x20]
  006f0	e59d3014	 ldr         r3, [sp, #0x14]
  006f4	e2833014	 add         r3, r3, #0x14
  006f8	e5933000	 ldr         r3, [r3]
  006fc	e1a0e00f	 mov         lr, pc
  00700	e12fff13	 bx          r3
  00704	e58d0054	 str         r0, [sp, #0x54]
  00708	e59d3054	 ldr         r3, [sp, #0x54]
  0070c	e58d300c	 str         r3, [sp, #0xC]
  00710	e59d300c	 ldr         r3, [sp, #0xC]
  00714	e3530000	 cmp         r3, #0
  00718	1a00000b	 bne         |$LN27@SerialEven|

; 274  :             DEBUGMSG (ZONE_THREAD,
; 275  :                       (TEXT("SerialEventHandler, No Interrupt.\r\n")));

  0071c	e59f39a4	 ldr         r3, [pc, #0x9A4]
  00720	e5933440	 ldr         r3, [r3, #0x440]
  00724	e3130040	 tst         r3, #0x40
  00728	0a000004	 beq         |$LN39@SerialEven|
  0072c	e59f09c8	 ldr         r0, [pc, #0x9C8]
  00730	eb000000	 bl          NKDbgPrintfW
  00734	e3a03001	 mov         r3, #1
  00738	e58d3058	 str         r3, [sp, #0x58]
  0073c	ea000001	 b           |$LN40@SerialEven|
  00740		 |$LN39@SerialEven|
  00740	e3a03000	 mov         r3, #0
  00744	e58d3058	 str         r3, [sp, #0x58]
  00748		 |$LN40@SerialEven|

; 276  :             break;

  00748	ea000230	 b           |$LN28@SerialEven|
  0074c		 |$LN27@SerialEven|

; 277  :         }
; 278  : 
; 279  :         DEBUGMSG (ZONE_THREAD,
; 280  :                   (TEXT("SerialEventHandler, Interrupts 0x%X\r\n"), it));

  0074c	e59f3974	 ldr         r3, [pc, #0x974]
  00750	e5933440	 ldr         r3, [r3, #0x440]
  00754	e3130040	 tst         r3, #0x40
  00758	0a000005	 beq         |$LN41@SerialEven|
  0075c	e59d100c	 ldr         r1, [sp, #0xC]
  00760	e59f0990	 ldr         r0, [pc, #0x990]
  00764	eb000000	 bl          NKDbgPrintfW
  00768	e3a03001	 mov         r3, #1
  0076c	e58d305c	 str         r3, [sp, #0x5C]
  00770	ea000001	 b           |$LN42@SerialEven|
  00774		 |$LN41@SerialEven|
  00774	e3a03000	 mov         r3, #0
  00778	e58d305c	 str         r3, [sp, #0x5C]
  0077c		 |$LN42@SerialEven|

; 281  :         if ( it & INTR_RX ) {

  0077c	e59d300c	 ldr         r3, [sp, #0xC]
  00780	e3130002	 tst         r3, #2
  00784	0a0001e2	 beq         |$LN26@SerialEven|

; 282  :             // It's read data event. Optimize the read by reading chunks
; 283  :             // if the user has not specified using xflow control
; 284  :             // or event/error/eof characters. Ack the receive,
; 285  :             // unmask the interrupt, get the current data pointer
; 286  :             // and see if data is available.
; 287  :             // Note: We have to copy RxRead and RxWrite index to local in order to make it atomic.
; 288  :             register DWORD RxWIndex=RxWrite(pSerialHead), RxRIndex=RxRead(pSerialHead);

  00788	e59d30ac	 ldr         r3, [sp, #0xAC]
  0078c	e28330a0	 add         r3, r3, #0xA0
  00790	e5933000	 ldr         r3, [r3]
  00794	e58d3024	 str         r3, [sp, #0x24]
  00798	e59d30ac	 ldr         r3, [sp, #0xAC]
  0079c	e283309c	 add         r3, r3, #0x9C
  007a0	e5933000	 ldr         r3, [r3]
  007a4	e58d3028	 str         r3, [sp, #0x28]

; 289  : 
; 290  :             DEBUGMSG (ZONE_THREAD|ZONE_READ , (TEXT("Rx Event\r\n")));

  007a8	e59f3918	 ldr         r3, [pc, #0x918]
  007ac	e5933440	 ldr         r3, [r3, #0x440]
  007b0	e2032040	 and         r2, r3, #0x40
  007b4	e59f390c	 ldr         r3, [pc, #0x90C]
  007b8	e5933440	 ldr         r3, [r3, #0x440]
  007bc	e2033004	 and         r3, r3, #4
  007c0	e1923003	 orrs        r3, r2, r3
  007c4	0a000004	 beq         |$LN43@SerialEven|
  007c8	e59f0924	 ldr         r0, [pc, #0x924]
  007cc	eb000000	 bl          NKDbgPrintfW
  007d0	e3a03001	 mov         r3, #1
  007d4	e58d3060	 str         r3, [sp, #0x60]
  007d8	ea000001	 b           |$LN44@SerialEven|
  007dc		 |$LN43@SerialEven|
  007dc	e3a03000	 mov         r3, #0
  007e0	e58d3060	 str         r3, [sp, #0x60]
  007e4		 |$LN44@SerialEven|

; 291  : 
; 292  :             if ( RxRIndex == 0 ) {

  007e4	e59d3028	 ldr         r3, [sp, #0x28]
  007e8	e3530000	 cmp         r3, #0
  007ec	1a000007	 bne         |$LN25@SerialEven|

; 293  :                 // have to leave one byte free.
; 294  :                 RoomLeft = RxLength(pSerialHead) - RxWIndex - 1;

  007f0	e59d30ac	 ldr         r3, [sp, #0xAC]
  007f4	e28330a4	 add         r3, r3, #0xA4
  007f8	e5932000	 ldr         r2, [r3]
  007fc	e59d3024	 ldr         r3, [sp, #0x24]
  00800	e0423003	 sub         r3, r2, r3
  00804	e2433001	 sub         r3, r3, #1
  00808	e58d301c	 str         r3, [sp, #0x1C]

; 295  :             } else {

  0080c	ea000005	 b           |$LN24@SerialEven|
  00810		 |$LN25@SerialEven|

; 296  :                 RoomLeft = RxLength(pSerialHead) - RxWIndex;

  00810	e59d30ac	 ldr         r3, [sp, #0xAC]
  00814	e28330a4	 add         r3, r3, #0xA4
  00818	e5932000	 ldr         r2, [r3]
  0081c	e59d3024	 ldr         r3, [sp, #0x24]
  00820	e0423003	 sub         r3, r2, r3
  00824	e58d301c	 str         r3, [sp, #0x1C]
  00828		 |$LN24@SerialEven|

; 297  :             }
; 298  :             if ( RxRIndex > RxWIndex ) {

  00828	e59d2028	 ldr         r2, [sp, #0x28]
  0082c	e59d3024	 ldr         r3, [sp, #0x24]
  00830	e1520003	 cmp         r2, r3
  00834	9a000004	 bls         |$LN23@SerialEven|

; 299  :                 RoomLeft = RxRIndex - RxWIndex - 1;

  00838	e59d2028	 ldr         r2, [sp, #0x28]
  0083c	e59d3024	 ldr         r3, [sp, #0x24]
  00840	e0423003	 sub         r3, r2, r3
  00844	e2433001	 sub         r3, r3, #1
  00848	e58d301c	 str         r3, [sp, #0x1C]
  0084c		 |$LN23@SerialEven|

; 300  :             }
; 301  :             if ( RoomLeft ) {

  0084c	e59d301c	 ldr         r3, [sp, #0x1C]
  00850	e3530000	 cmp         r3, #0
  00854	0a000017	 beq         |$LN22@SerialEven|

; 302  :                 pSerialHead->DroppedBytesPDD +=
; 303  :                 pFuncTbl->HWRxIntrHandler(pHWHead,
; 304  :                                           RxBuffWrite(pSerialHead),
; 305  :                                           &RoomLeft);

  00858	e28d201c	 add         r2, sp, #0x1C
  0085c	e59d30ac	 ldr         r3, [sp, #0xAC]
  00860	e28310ac	 add         r1, r3, #0xAC
  00864	e59d30ac	 ldr         r3, [sp, #0xAC]
  00868	e28330a0	 add         r3, r3, #0xA0
  0086c	e5911000	 ldr         r1, [r1]
  00870	e5933000	 ldr         r3, [r3]
  00874	e0811003	 add         r1, r1, r3
  00878	e59d0020	 ldr         r0, [sp, #0x20]
  0087c	e59d3014	 ldr         r3, [sp, #0x14]
  00880	e2833018	 add         r3, r3, #0x18
  00884	e5933000	 ldr         r3, [r3]
  00888	e1a0e00f	 mov         lr, pc
  0088c	e12fff13	 bx          r3
  00890	e58d0064	 str         r0, [sp, #0x64]
  00894	e59d30ac	 ldr         r3, [sp, #0xAC]
  00898	e283304c	 add         r3, r3, #0x4C
  0089c	e5932000	 ldr         r2, [r3]
  008a0	e59d3064	 ldr         r3, [sp, #0x64]
  008a4	e0822003	 add         r2, r2, r3
  008a8	e59d30ac	 ldr         r3, [sp, #0xAC]
  008ac	e283304c	 add         r3, r3, #0x4C
  008b0	e5832000	 str         r2, [r3]

; 306  :             } else {

  008b4	ea000032	 b           |$LN21@SerialEven|
  008b8		 |$LN22@SerialEven|

; 307  :                 BYTE    TempBuf[16];
; 308  :                 RoomLeft = 16;

  008b8	e3a03010	 mov         r3, #0x10
  008bc	e58d301c	 str         r3, [sp, #0x1C]

; 309  :                 pFuncTbl->HWRxIntrHandler(pHWHead,
; 310  :                                           TempBuf,
; 311  :                                           &RoomLeft);

  008c0	e28d201c	 add         r2, sp, #0x1C
  008c4	e28d102c	 add         r1, sp, #0x2C
  008c8	e59d0020	 ldr         r0, [sp, #0x20]
  008cc	e59d3014	 ldr         r3, [sp, #0x14]
  008d0	e2833018	 add         r3, r3, #0x18
  008d4	e5933000	 ldr         r3, [r3]
  008d8	e1a0e00f	 mov         lr, pc
  008dc	e12fff13	 bx          r3

; 312  : 
; 313  :                 pSerialHead->DroppedBytesMDD += RoomLeft;

  008e0	e59d30ac	 ldr         r3, [sp, #0xAC]
  008e4	e2833048	 add         r3, r3, #0x48
  008e8	e5932000	 ldr         r2, [r3]
  008ec	e59d301c	 ldr         r3, [sp, #0x1C]
  008f0	e0822003	 add         r2, r2, r3
  008f4	e59d30ac	 ldr         r3, [sp, #0xAC]
  008f8	e2833048	 add         r3, r3, #0x48
  008fc	e5832000	 str         r2, [r3]

; 314  :                 DEBUGMSG (ZONE_WARN|ZONE_READ, (TEXT("Tossed %d bytes\r\n"),
; 315  :                                                 RoomLeft));

  00900	e59f37c0	 ldr         r3, [pc, #0x7C0]
  00904	e5933440	 ldr         r3, [r3, #0x440]
  00908	e2032901	 and         r2, r3, #1, 18
  0090c	e59f37b4	 ldr         r3, [pc, #0x7B4]
  00910	e5933440	 ldr         r3, [r3, #0x440]
  00914	e2033004	 and         r3, r3, #4
  00918	e1923003	 orrs        r3, r2, r3
  0091c	0a000005	 beq         |$LN45@SerialEven|
  00920	e59d101c	 ldr         r1, [sp, #0x1C]
  00924	e59f07c4	 ldr         r0, [pc, #0x7C4]
  00928	eb000000	 bl          NKDbgPrintfW
  0092c	e3a03001	 mov         r3, #1
  00930	e58d3068	 str         r3, [sp, #0x68]
  00934	ea000001	 b           |$LN46@SerialEven|
  00938		 |$LN45@SerialEven|
  00938	e3a03000	 mov         r3, #0
  0093c	e58d3068	 str         r3, [sp, #0x68]
  00940		 |$LN46@SerialEven|

; 316  :                 RoomLeft = 0;

  00940	e3a03000	 mov         r3, #0
  00944	e58d301c	 str         r3, [sp, #0x1C]
  00948		 |$LN20@SerialEven|

; 317  :                 //InterlockedOR.
; 318  :                 {
; 319  :                     DWORD originalValue ;
; 320  :                     do {
; 321  :                         originalValue  =  pSerialHead->dwMddErrors ;                        

  00948	e59d30ac	 ldr         r3, [sp, #0xAC]
  0094c	e2833f41	 add         r3, r3, #0x41, 30
  00950	e5933000	 ldr         r3, [r3]
  00954	e58d303c	 str         r3, [sp, #0x3C]

; 322  :                     } while(originalValue != InterlockedCompareExchange((LPLONG)&pSerialHead->dwMddErrors, (LONG)(originalValue|CE_RXOVER),(LONG)originalValue));

  00958	e59d203c	 ldr         r2, [sp, #0x3C]
  0095c	e59d303c	 ldr         r3, [sp, #0x3C]
  00960	e3831001	 orr         r1, r3, #1
  00964	e59d30ac	 ldr         r3, [sp, #0xAC]
  00968	e2830f41	 add         r0, r3, #0x41, 30
  0096c	eb000000	 bl          InterlockedCompareExchange
  00970	e58d006c	 str         r0, [sp, #0x6C]
  00974	e59d203c	 ldr         r2, [sp, #0x3C]
  00978	e59d306c	 ldr         r3, [sp, #0x6C]
  0097c	e1520003	 cmp         r2, r3
  00980	1afffff0	 bne         |$LN20@SerialEven|
  00984		 |$LN21@SerialEven|

; 323  :                 }
; 324  :                 
; 325  :             }
; 326  : 
; 327  :             DEBUGMSG (ZONE_READ ,
; 328  :                       (TEXT("After HWGetBytes, Fifo(R=%d,W=%d,BA=%d,L=%d) ByteRead=%d\r\n"),
; 329  :                        RxRead(pSerialHead), RxWrite(pSerialHead),
; 330  :                        RxBytesAvail(pSerialHead), RxLength(pSerialHead),
; 331  :                        RoomLeft));

  00984	e59f373c	 ldr         r3, [pc, #0x73C]
  00988	e5933440	 ldr         r3, [r3, #0x440]
  0098c	e3130004	 tst         r3, #4
  00990	0a000014	 beq         |$LN47@SerialEven|
  00994	e59d00ac	 ldr         r0, [sp, #0xAC]
  00998	eb000000	 bl          RxBytesAvail
  0099c	e58d0070	 str         r0, [sp, #0x70]
  009a0	e59d301c	 ldr         r3, [sp, #0x1C]
  009a4	e58d3004	 str         r3, [sp, #4]
  009a8	e59d30ac	 ldr         r3, [sp, #0xAC]
  009ac	e28330a4	 add         r3, r3, #0xA4
  009b0	e5933000	 ldr         r3, [r3]
  009b4	e58d3000	 str         r3, [sp]
  009b8	e59d3070	 ldr         r3, [sp, #0x70]
  009bc	e59d20ac	 ldr         r2, [sp, #0xAC]
  009c0	e28220a0	 add         r2, r2, #0xA0
  009c4	e5922000	 ldr         r2, [r2]
  009c8	e59d10ac	 ldr         r1, [sp, #0xAC]
  009cc	e281109c	 add         r1, r1, #0x9C
  009d0	e5911000	 ldr         r1, [r1]
  009d4	e59f0710	 ldr         r0, [pc, #0x710]
  009d8	eb000000	 bl          NKDbgPrintfW
  009dc	e3a03001	 mov         r3, #1
  009e0	e58d3074	 str         r3, [sp, #0x74]
  009e4	ea000001	 b           |$LN48@SerialEven|
  009e8		 |$LN47@SerialEven|
  009e8	e3a03000	 mov         r3, #0
  009ec	e58d3074	 str         r3, [sp, #0x74]
  009f0		 |$LN48@SerialEven|

; 332  : 
; 333  : 
; 334  :             // If flow control enabled then we need to scan for XON/XOFF
; 335  :             // characters
; 336  :             if ( pSerialHead->XFlow ) {

  009f0	e59d30ac	 ldr         r3, [sp, #0xAC]
  009f4	e2833094	 add         r3, r3, #0x94
  009f8	e5933000	 ldr         r3, [r3]
  009fc	e3130002	 tst         r3, #2
  00a00	0a000088	 beq         |$LN17@SerialEven|

; 337  :                 for ( CharIndex=0; CharIndex < RoomLeft; ) {

  00a04	e3a03000	 mov         r3, #0
  00a08	e58d3018	 str         r3, [sp, #0x18]
  00a0c		 |$LN70@SerialEven|
  00a0c		 |$LN69@SerialEven|
  00a0c		 |$LN16@SerialEven|
  00a0c	e59d2018	 ldr         r2, [sp, #0x18]
  00a10	e59d301c	 ldr         r3, [sp, #0x1C]
  00a14	e1520003	 cmp         r2, r3
  00a18	2a000082	 bcs         |$LN15@SerialEven|

; 338  :                     if ( RxBuffWrite(pSerialHead)[CharIndex] ==
; 339  :                          pSerialHead->DCB.XoffChar ) {

  00a1c	e59d30ac	 ldr         r3, [sp, #0xAC]
  00a20	e28320ac	 add         r2, r3, #0xAC
  00a24	e59d30ac	 ldr         r3, [sp, #0xAC]
  00a28	e28330a0	 add         r3, r3, #0xA0
  00a2c	e5922000	 ldr         r2, [r2]
  00a30	e5933000	 ldr         r3, [r3]
  00a34	e0822003	 add         r2, r2, r3
  00a38	e59d3018	 ldr         r3, [sp, #0x18]
  00a3c	e0823003	 add         r3, r2, r3
  00a40	e5d33000	 ldrb        r3, [r3]
  00a44	e1a02003	 mov         r2, r3
  00a48	e59d30ac	 ldr         r3, [sp, #0xAC]
  00a4c	e2833076	 add         r3, r3, #0x76
  00a50	e1d330d0	 ldrsb       r3, [r3]
  00a54	e1520003	 cmp         r2, r3
  00a58	1a00002d	 bne         |$LN14@SerialEven|

; 340  :                         DEBUGMSG (ZONE_FLOW, (TEXT("Received XOFF\r\n")));

  00a5c	e59f3664	 ldr         r3, [pc, #0x664]
  00a60	e5933440	 ldr         r3, [r3, #0x440]
  00a64	e3130c02	 tst         r3, #2, 24
  00a68	0a000004	 beq         |$LN49@SerialEven|
  00a6c	e59f0674	 ldr         r0, [pc, #0x674]
  00a70	eb000000	 bl          NKDbgPrintfW
  00a74	e3a03001	 mov         r3, #1
  00a78	e58d3078	 str         r3, [sp, #0x78]
  00a7c	ea000001	 b           |$LN50@SerialEven|
  00a80		 |$LN49@SerialEven|
  00a80	e3a03000	 mov         r3, #0
  00a84	e58d3078	 str         r3, [sp, #0x78]
  00a88		 |$LN50@SerialEven|

; 341  : 
; 342  :                         pSerialHead->StopXmit = 1;

  00a88	e59d30ac	 ldr         r3, [sp, #0xAC]
  00a8c	e2833094	 add         r3, r3, #0x94
  00a90	e5933000	 ldr         r3, [r3]
  00a94	e3832004	 orr         r2, r3, #4
  00a98	e59d30ac	 ldr         r3, [sp, #0xAC]
  00a9c	e2833094	 add         r3, r3, #0x94
  00aa0	e5832000	 str         r2, [r3]

; 343  :                         memmove (RxBuffWrite(pSerialHead)+CharIndex,
; 344  :                                  RxBuffWrite(pSerialHead)+CharIndex+1,
; 345  :                                  RoomLeft - CharIndex);

  00aa4	e59d201c	 ldr         r2, [sp, #0x1C]
  00aa8	e59d3018	 ldr         r3, [sp, #0x18]
  00aac	e0422003	 sub         r2, r2, r3
  00ab0	e59d30ac	 ldr         r3, [sp, #0xAC]
  00ab4	e28310ac	 add         r1, r3, #0xAC
  00ab8	e59d30ac	 ldr         r3, [sp, #0xAC]
  00abc	e28330a0	 add         r3, r3, #0xA0
  00ac0	e5911000	 ldr         r1, [r1]
  00ac4	e5933000	 ldr         r3, [r3]
  00ac8	e0811003	 add         r1, r1, r3
  00acc	e59d3018	 ldr         r3, [sp, #0x18]
  00ad0	e0813003	 add         r3, r1, r3
  00ad4	e2831001	 add         r1, r3, #1
  00ad8	e59d30ac	 ldr         r3, [sp, #0xAC]
  00adc	e28300ac	 add         r0, r3, #0xAC
  00ae0	e59d30ac	 ldr         r3, [sp, #0xAC]
  00ae4	e28330a0	 add         r3, r3, #0xA0
  00ae8	e5900000	 ldr         r0, [r0]
  00aec	e5933000	 ldr         r3, [r3]
  00af0	e0800003	 add         r0, r0, r3
  00af4	e59d3018	 ldr         r3, [sp, #0x18]
  00af8	e0800003	 add         r0, r0, r3
  00afc	eb000000	 bl          memmove

; 346  :                         RoomLeft--;

  00b00	e59d301c	 ldr         r3, [sp, #0x1C]
  00b04	e2433001	 sub         r3, r3, #1
  00b08	e58d301c	 str         r3, [sp, #0x1C]

; 347  :                         continue;

  00b0c	eaffffbe	 b           |$LN16@SerialEven|

; 348  :                     } else if ( RxBuffWrite(pSerialHead)[CharIndex] ==

  00b10	ea000040	 b           |$LN13@SerialEven|
  00b14		 |$LN14@SerialEven|

; 349  :                                 pSerialHead->DCB.XonChar ) {

  00b14	e59d30ac	 ldr         r3, [sp, #0xAC]
  00b18	e28320ac	 add         r2, r3, #0xAC
  00b1c	e59d30ac	 ldr         r3, [sp, #0xAC]
  00b20	e28330a0	 add         r3, r3, #0xA0
  00b24	e5922000	 ldr         r2, [r2]
  00b28	e5933000	 ldr         r3, [r3]
  00b2c	e0822003	 add         r2, r2, r3
  00b30	e59d3018	 ldr         r3, [sp, #0x18]
  00b34	e0823003	 add         r3, r2, r3
  00b38	e5d33000	 ldrb        r3, [r3]
  00b3c	e1a02003	 mov         r2, r3
  00b40	e59d30ac	 ldr         r3, [sp, #0xAC]
  00b44	e2833075	 add         r3, r3, #0x75
  00b48	e1d330d0	 ldrsb       r3, [r3]
  00b4c	e1520003	 cmp         r2, r3
  00b50	1a000030	 bne         |$LN12@SerialEven|

; 350  :                         pSerialHead->StopXmit = 0;

  00b54	e59d30ac	 ldr         r3, [sp, #0xAC]
  00b58	e2833094	 add         r3, r3, #0x94
  00b5c	e5932000	 ldr         r2, [r3]
  00b60	e3e03004	 mvn         r3, #4
  00b64	e0022003	 and         r2, r2, r3
  00b68	e59d30ac	 ldr         r3, [sp, #0xAC]
  00b6c	e2833094	 add         r3, r3, #0x94
  00b70	e5832000	 str         r2, [r3]

; 351  :                         DEBUGMSG (ZONE_FLOW, (TEXT("Received XON\r\n")));

  00b74	e59f354c	 ldr         r3, [pc, #0x54C]
  00b78	e5933440	 ldr         r3, [r3, #0x440]
  00b7c	e3130c02	 tst         r3, #2, 24
  00b80	0a000004	 beq         |$LN51@SerialEven|
  00b84	e59f0558	 ldr         r0, [pc, #0x558]
  00b88	eb000000	 bl          NKDbgPrintfW
  00b8c	e3a03001	 mov         r3, #1
  00b90	e58d307c	 str         r3, [sp, #0x7C]
  00b94	ea000001	 b           |$LN52@SerialEven|
  00b98		 |$LN51@SerialEven|
  00b98	e3a03000	 mov         r3, #0
  00b9c	e58d307c	 str         r3, [sp, #0x7C]
  00ba0		 |$LN52@SerialEven|

; 352  :                         memmove (RxBuffWrite(pSerialHead)+CharIndex,
; 353  :                                  RxBuffWrite(pSerialHead)+CharIndex+1,
; 354  :                                  RoomLeft - CharIndex);

  00ba0	e59d201c	 ldr         r2, [sp, #0x1C]
  00ba4	e59d3018	 ldr         r3, [sp, #0x18]
  00ba8	e0422003	 sub         r2, r2, r3
  00bac	e59d30ac	 ldr         r3, [sp, #0xAC]
  00bb0	e28310ac	 add         r1, r3, #0xAC
  00bb4	e59d30ac	 ldr         r3, [sp, #0xAC]
  00bb8	e28330a0	 add         r3, r3, #0xA0
  00bbc	e5911000	 ldr         r1, [r1]
  00bc0	e5933000	 ldr         r3, [r3]
  00bc4	e0811003	 add         r1, r1, r3
  00bc8	e59d3018	 ldr         r3, [sp, #0x18]
  00bcc	e0813003	 add         r3, r1, r3
  00bd0	e2831001	 add         r1, r3, #1
  00bd4	e59d30ac	 ldr         r3, [sp, #0xAC]
  00bd8	e28300ac	 add         r0, r3, #0xAC
  00bdc	e59d30ac	 ldr         r3, [sp, #0xAC]
  00be0	e28330a0	 add         r3, r3, #0xA0
  00be4	e5900000	 ldr         r0, [r0]
  00be8	e5933000	 ldr         r3, [r3]
  00bec	e0800003	 add         r0, r0, r3
  00bf0	e59d3018	 ldr         r3, [sp, #0x18]
  00bf4	e0800003	 add         r0, r0, r3
  00bf8	eb000000	 bl          memmove

; 355  :                         RoomLeft--;

  00bfc	e59d301c	 ldr         r3, [sp, #0x1C]
  00c00	e2433001	 sub         r3, r3, #1
  00c04	e58d301c	 str         r3, [sp, #0x1C]

; 356  :                         // We disabled TX on XOFF, so now we need to start sending
; 357  :                         // again. Easiest way is to pretend we saw a TX interrupt
; 358  :                         it |= INTR_TX;

  00c08	e59d300c	 ldr         r3, [sp, #0xC]
  00c0c	e3833004	 orr         r3, r3, #4
  00c10	e58d300c	 str         r3, [sp, #0xC]

; 359  :                         continue;

  00c14	eaffff7c	 b           |$LN69@SerialEven|
  00c18		 |$LN12@SerialEven|
  00c18		 |$LN13@SerialEven|

; 360  :                     }
; 361  :                     CharIndex++;

  00c18	e59d3018	 ldr         r3, [sp, #0x18]
  00c1c	e2833001	 add         r3, r3, #1
  00c20	e58d3018	 str         r3, [sp, #0x18]

; 362  :                 }

  00c24	eaffff78	 b           |$LN70@SerialEven|
  00c28		 |$LN15@SerialEven|
  00c28		 |$LN17@SerialEven|

; 363  :             }
; 364  : 
; 365  :             pSerialHead->RxBytes += RoomLeft;

  00c28	e59d30ac	 ldr         r3, [sp, #0xAC]
  00c2c	e2833050	 add         r3, r3, #0x50
  00c30	e5932000	 ldr         r2, [r3]
  00c34	e59d301c	 ldr         r3, [sp, #0x1C]
  00c38	e0822003	 add         r2, r2, r3
  00c3c	e59d30ac	 ldr         r3, [sp, #0xAC]
  00c40	e2833050	 add         r3, r3, #0x50
  00c44	e5832000	 str         r2, [r3]

; 366  :             RxWrite(pSerialHead) =
; 367  :                 (RxWrite(pSerialHead)+RoomLeft<RxLength(pSerialHead)? RxWrite(pSerialHead)+RoomLeft: RxWrite(pSerialHead)+RoomLeft-RxLength(pSerialHead));

  00c48	e59d30ac	 ldr         r3, [sp, #0xAC]
  00c4c	e28330a0	 add         r3, r3, #0xA0
  00c50	e5932000	 ldr         r2, [r3]
  00c54	e59d301c	 ldr         r3, [sp, #0x1C]
  00c58	e0822003	 add         r2, r2, r3
  00c5c	e59d30ac	 ldr         r3, [sp, #0xAC]
  00c60	e28330a4	 add         r3, r3, #0xA4
  00c64	e5933000	 ldr         r3, [r3]
  00c68	e1520003	 cmp         r2, r3
  00c6c	2a000006	 bcs         |$LN53@SerialEven|
  00c70	e59d30ac	 ldr         r3, [sp, #0xAC]
  00c74	e28330a0	 add         r3, r3, #0xA0
  00c78	e5932000	 ldr         r2, [r3]
  00c7c	e59d301c	 ldr         r3, [sp, #0x1C]
  00c80	e0823003	 add         r3, r2, r3
  00c84	e58d3080	 str         r3, [sp, #0x80]
  00c88	ea000009	 b           |$LN54@SerialEven|
  00c8c		 |$LN53@SerialEven|
  00c8c	e59d30ac	 ldr         r3, [sp, #0xAC]
  00c90	e28330a0	 add         r3, r3, #0xA0
  00c94	e5932000	 ldr         r2, [r3]
  00c98	e59d301c	 ldr         r3, [sp, #0x1C]
  00c9c	e0822003	 add         r2, r2, r3
  00ca0	e59d30ac	 ldr         r3, [sp, #0xAC]
  00ca4	e28330a4	 add         r3, r3, #0xA4
  00ca8	e5933000	 ldr         r3, [r3]
  00cac	e0423003	 sub         r3, r2, r3
  00cb0	e58d3080	 str         r3, [sp, #0x80]
  00cb4		 |$LN54@SerialEven|
  00cb4	e59d30ac	 ldr         r3, [sp, #0xAC]
  00cb8	e28320a0	 add         r2, r3, #0xA0
  00cbc	e59d3080	 ldr         r3, [sp, #0x80]
  00cc0	e5823000	 str         r3, [r2]

; 368  :             if ( RoomLeft ) {

  00cc4	e59d301c	 ldr         r3, [sp, #0x1C]
  00cc8	e3530000	 cmp         r3, #0
  00ccc	0a000001	 beq         |$LN11@SerialEven|

; 369  :                 RxDataAvail = TRUE;

  00cd0	e3a03001	 mov         r3, #1
  00cd4	e58d3008	 str         r3, [sp, #8]
  00cd8		 |$LN11@SerialEven|

; 370  :             }
; 371  : 
; 372  :             if ( IsIncreasedToFlowOff(pSerialHead)) {

  00cd8	e59d00ac	 ldr         r0, [sp, #0xAC]
  00cdc	eb000000	 bl          RxBytesAvail
  00ce0	e58d0084	 str         r0, [sp, #0x84]
  00ce4	e59d30ac	 ldr         r3, [sp, #0xAC]
  00ce8	e2833070	 add         r3, r3, #0x70
  00cec	e1d310b0	 ldrh        r1, [r3]
  00cf0	e59d30ac	 ldr         r3, [sp, #0xAC]
  00cf4	e28330a4	 add         r3, r3, #0xA4
  00cf8	e5932000	 ldr         r2, [r3]
  00cfc	e59d3084	 ldr         r3, [sp, #0x84]
  00d00	e0423003	 sub         r3, r2, r3
  00d04	e1510003	 cmp         r1, r3
  00d08	3a000081	 bcc         |$LN10@SerialEven|

; 373  :                 if ( (pSerialHead->DCB.fDtrControl == DTR_CONTROL_HANDSHAKE) && (!pSerialHead->DtrFlow)) {

  00d0c	e59d30ac	 ldr         r3, [sp, #0xAC]
  00d10	e2833068	 add         r3, r3, #0x68
  00d14	e5933000	 ldr         r3, [r3]
  00d18	e1a03d03	 mov         r3, r3, lsl #26
  00d1c	e1a03f23	 mov         r3, r3, lsr #30
  00d20	e3530002	 cmp         r3, #2
  00d24	1a000020	 bne         |$LN9@SerialEven|
  00d28	e59d30ac	 ldr         r3, [sp, #0xAC]
  00d2c	e2833094	 add         r3, r3, #0x94
  00d30	e5933000	 ldr         r3, [r3]
  00d34	e3130010	 tst         r3, #0x10
  00d38	1a00001b	 bne         |$LN9@SerialEven|

; 374  :                     DEBUGMSG (ZONE_READ|ZONE_FLOW,
; 375  :                               (TEXT("DTR_CONTROL_HANDSHAKE Clearing DTR\r\n")));

  00d3c	e59f3384	 ldr         r3, [pc, #0x384]
  00d40	e5933440	 ldr         r3, [r3, #0x440]
  00d44	e2032004	 and         r2, r3, #4
  00d48	e59f3378	 ldr         r3, [pc, #0x378]
  00d4c	e5933440	 ldr         r3, [r3, #0x440]
  00d50	e2033c02	 and         r3, r3, #2, 24
  00d54	e1923003	 orrs        r3, r2, r3
  00d58	0a000004	 beq         |$LN55@SerialEven|
  00d5c	e59f037c	 ldr         r0, [pc, #0x37C]
  00d60	eb000000	 bl          NKDbgPrintfW
  00d64	e3a03001	 mov         r3, #1
  00d68	e58d3088	 str         r3, [sp, #0x88]
  00d6c	ea000001	 b           |$LN56@SerialEven|
  00d70		 |$LN55@SerialEven|
  00d70	e3a03000	 mov         r3, #0
  00d74	e58d3088	 str         r3, [sp, #0x88]
  00d78		 |$LN56@SerialEven|

; 376  :                     pSerialHead->DtrFlow = 1;

  00d78	e59d30ac	 ldr         r3, [sp, #0xAC]
  00d7c	e2833094	 add         r3, r3, #0x94
  00d80	e5933000	 ldr         r3, [r3]
  00d84	e3832010	 orr         r2, r3, #0x10
  00d88	e59d30ac	 ldr         r3, [sp, #0xAC]
  00d8c	e2833094	 add         r3, r3, #0x94
  00d90	e5832000	 str         r2, [r3]

; 377  :                     pFuncTbl->HWClearDTR(pHWHead);

  00d94	e59d0020	 ldr         r0, [sp, #0x20]
  00d98	e59d3014	 ldr         r3, [sp, #0x14]
  00d9c	e2833034	 add         r3, r3, #0x34
  00da0	e5933000	 ldr         r3, [r3]
  00da4	e1a0e00f	 mov         lr, pc
  00da8	e12fff13	 bx          r3
  00dac		 |$LN9@SerialEven|

; 378  :                 }
; 379  :                 if ( (pSerialHead->DCB.fRtsControl == RTS_CONTROL_HANDSHAKE) && (!pSerialHead->RtsFlow)) {

  00dac	e59d30ac	 ldr         r3, [sp, #0xAC]
  00db0	e2833068	 add         r3, r3, #0x68
  00db4	e5933000	 ldr         r3, [r3]
  00db8	e1a03903	 mov         r3, r3, lsl #18
  00dbc	e1a03f23	 mov         r3, r3, lsr #30
  00dc0	e3530002	 cmp         r3, #2
  00dc4	1a000020	 bne         |$LN8@SerialEven|
  00dc8	e59d30ac	 ldr         r3, [sp, #0xAC]
  00dcc	e2833094	 add         r3, r3, #0x94
  00dd0	e5933000	 ldr         r3, [r3]
  00dd4	e3130020	 tst         r3, #0x20
  00dd8	1a00001b	 bne         |$LN8@SerialEven|

; 380  :                     DEBUGMSG (ZONE_READ|ZONE_FLOW,
; 381  :                               (TEXT("RTS_CONTROL_HANDSHAKE Clearing RTS\r\n")));

  00ddc	e59f32e4	 ldr         r3, [pc, #0x2E4]
  00de0	e5933440	 ldr         r3, [r3, #0x440]
  00de4	e2032004	 and         r2, r3, #4
  00de8	e59f32d8	 ldr         r3, [pc, #0x2D8]
  00dec	e5933440	 ldr         r3, [r3, #0x440]
  00df0	e2033c02	 and         r3, r3, #2, 24
  00df4	e1923003	 orrs        r3, r2, r3
  00df8	0a000004	 beq         |$LN57@SerialEven|
  00dfc	e59f02d8	 ldr         r0, [pc, #0x2D8]
  00e00	eb000000	 bl          NKDbgPrintfW
  00e04	e3a03001	 mov         r3, #1
  00e08	e58d308c	 str         r3, [sp, #0x8C]
  00e0c	ea000001	 b           |$LN58@SerialEven|
  00e10		 |$LN57@SerialEven|
  00e10	e3a03000	 mov         r3, #0
  00e14	e58d308c	 str         r3, [sp, #0x8C]
  00e18		 |$LN58@SerialEven|

; 382  :                     pSerialHead->RtsFlow = 1;

  00e18	e59d30ac	 ldr         r3, [sp, #0xAC]
  00e1c	e2833094	 add         r3, r3, #0x94
  00e20	e5933000	 ldr         r3, [r3]
  00e24	e3832020	 orr         r2, r3, #0x20
  00e28	e59d30ac	 ldr         r3, [sp, #0xAC]
  00e2c	e2833094	 add         r3, r3, #0x94
  00e30	e5832000	 str         r2, [r3]

; 383  :                     pFuncTbl->HWClearRTS(pHWHead);

  00e34	e59d0020	 ldr         r0, [sp, #0x20]
  00e38	e59d3014	 ldr         r3, [sp, #0x14]
  00e3c	e283303c	 add         r3, r3, #0x3C
  00e40	e5933000	 ldr         r3, [r3]
  00e44	e1a0e00f	 mov         lr, pc
  00e48	e12fff13	 bx          r3
  00e4c		 |$LN8@SerialEven|

; 384  :                 }
; 385  : 
; 386  :                 /* If Xon/Xoff flow control is desired. check the limit against
; 387  :                  * the remaining room and act accordingly.
; 388  :                  */
; 389  :                 if ( pSerialHead->DCB.fInX && !(pSerialHead->SentXoff)) {

  00e4c	e59d30ac	 ldr         r3, [sp, #0xAC]
  00e50	e2833068	 add         r3, r3, #0x68
  00e54	e5933000	 ldr         r3, [r3]
  00e58	e3130c02	 tst         r3, #2, 24
  00e5c	0a00002c	 beq         |$LN7@SerialEven|
  00e60	e59d30ac	 ldr         r3, [sp, #0xAC]
  00e64	e2833094	 add         r3, r3, #0x94
  00e68	e5933000	 ldr         r3, [r3]
  00e6c	e3130008	 tst         r3, #8
  00e70	1a000027	 bne         |$LN7@SerialEven|

; 390  :                     DEBUGMSG (ZONE_FLOW, (TEXT("Sending XOFF\r\n")));

  00e74	e59f324c	 ldr         r3, [pc, #0x24C]
  00e78	e5933440	 ldr         r3, [r3, #0x440]
  00e7c	e3130c02	 tst         r3, #2, 24
  00e80	0a000004	 beq         |$LN59@SerialEven|
  00e84	e59f024c	 ldr         r0, [pc, #0x24C]
  00e88	eb000000	 bl          NKDbgPrintfW
  00e8c	e3a03001	 mov         r3, #1
  00e90	e58d3090	 str         r3, [sp, #0x90]
  00e94	ea000001	 b           |$LN60@SerialEven|
  00e98		 |$LN59@SerialEven|
  00e98	e3a03000	 mov         r3, #0
  00e9c	e58d3090	 str         r3, [sp, #0x90]
  00ea0		 |$LN60@SerialEven|

; 391  :                     pFuncTbl->HWXmitComChar(pHWHead, pSerialHead->DCB.XoffChar);

  00ea0	e59d30ac	 ldr         r3, [sp, #0xAC]
  00ea4	e2833076	 add         r3, r3, #0x76
  00ea8	e1d330d0	 ldrsb       r3, [r3]
  00eac	e20310ff	 and         r1, r3, #0xFF
  00eb0	e59d0020	 ldr         r0, [sp, #0x20]
  00eb4	e59d3014	 ldr         r3, [sp, #0x14]
  00eb8	e2833054	 add         r3, r3, #0x54
  00ebc	e5933000	 ldr         r3, [r3]
  00ec0	e1a0e00f	 mov         lr, pc
  00ec4	e12fff13	 bx          r3

; 392  : 
; 393  :                     pSerialHead->SentXoff = 1;

  00ec8	e59d30ac	 ldr         r3, [sp, #0xAC]
  00ecc	e2833094	 add         r3, r3, #0x94
  00ed0	e5933000	 ldr         r3, [r3]
  00ed4	e3832008	 orr         r2, r3, #8
  00ed8	e59d30ac	 ldr         r3, [sp, #0xAC]
  00edc	e2833094	 add         r3, r3, #0x94
  00ee0	e5832000	 str         r2, [r3]

; 394  :                     if ( !pSerialHead->DCB.fTXContinueOnXoff ) {

  00ee4	e59d30ac	 ldr         r3, [sp, #0xAC]
  00ee8	e2833068	 add         r3, r3, #0x68
  00eec	e5933000	 ldr         r3, [r3]
  00ef0	e3130080	 tst         r3, #0x80
  00ef4	1a000006	 bne         |$LN6@SerialEven|

; 395  :                         pSerialHead->StopXmit = 1;

  00ef8	e59d30ac	 ldr         r3, [sp, #0xAC]
  00efc	e2833094	 add         r3, r3, #0x94
  00f00	e5933000	 ldr         r3, [r3]
  00f04	e3832004	 orr         r2, r3, #4
  00f08	e59d30ac	 ldr         r3, [sp, #0xAC]
  00f0c	e2833094	 add         r3, r3, #0x94
  00f10	e5832000	 str         r2, [r3]
  00f14		 |$LN6@SerialEven|
  00f14		 |$LN7@SerialEven|
  00f14		 |$LN10@SerialEven|
  00f14		 |$LN26@SerialEven|

; 396  :                     }
; 397  :                 }
; 398  :             }
; 399  :         }
; 400  : 
; 401  :         if ( it & INTR_TX ) {

  00f14	e59d300c	 ldr         r3, [sp, #0xC]
  00f18	e3130004	 tst         r3, #4
  00f1c	0a000010	 beq         |$LN5@SerialEven|

; 402  :             DEBUGMSG (ZONE_THREAD|ZONE_WRITE , (TEXT("Tx Event\r\n")));

  00f20	e59f31a0	 ldr         r3, [pc, #0x1A0]
  00f24	e5933440	 ldr         r3, [r3, #0x440]
  00f28	e2032040	 and         r2, r3, #0x40
  00f2c	e59f3194	 ldr         r3, [pc, #0x194]
  00f30	e5933440	 ldr         r3, [r3, #0x440]
  00f34	e2033008	 and         r3, r3, #8
  00f38	e1923003	 orrs        r3, r2, r3
  00f3c	0a000004	 beq         |$LN61@SerialEven|
  00f40	e59f018c	 ldr         r0, [pc, #0x18C]
  00f44	eb000000	 bl          NKDbgPrintfW
  00f48	e3a03001	 mov         r3, #1
  00f4c	e58d3094	 str         r3, [sp, #0x94]
  00f50	ea000001	 b           |$LN62@SerialEven|
  00f54		 |$LN61@SerialEven|
  00f54	e3a03000	 mov         r3, #0
  00f58	e58d3094	 str         r3, [sp, #0x94]
  00f5c		 |$LN62@SerialEven|

; 403  :             DoTxData( pSerialHead );

  00f5c	e59d00ac	 ldr         r0, [sp, #0xAC]
  00f60	eb000000	 bl          DoTxData
  00f64		 |$LN5@SerialEven|

; 404  :         }
; 405  : 
; 406  :         if ( (it & INTR_MODEM) ) {

  00f64	e59d300c	 ldr         r3, [sp, #0xC]
  00f68	e3130008	 tst         r3, #8
  00f6c	0a000011	 beq         |$LN4@SerialEven|

; 407  :             DEBUGMSG (ZONE_THREAD, (TEXT("Other Event, it:%x\r\n"), it));

  00f70	e59f3150	 ldr         r3, [pc, #0x150]
  00f74	e5933440	 ldr         r3, [r3, #0x440]
  00f78	e3130040	 tst         r3, #0x40
  00f7c	0a000005	 beq         |$LN63@SerialEven|
  00f80	e59d100c	 ldr         r1, [sp, #0xC]
  00f84	e59f0144	 ldr         r0, [pc, #0x144]
  00f88	eb000000	 bl          NKDbgPrintfW
  00f8c	e3a03001	 mov         r3, #1
  00f90	e58d3098	 str         r3, [sp, #0x98]
  00f94	ea000001	 b           |$LN64@SerialEven|
  00f98		 |$LN63@SerialEven|
  00f98	e3a03000	 mov         r3, #0
  00f9c	e58d3098	 str         r3, [sp, #0x98]
  00fa0		 |$LN64@SerialEven|

; 408  : 
; 409  :             /* Call low level status clean up code.
; 410  :              */
; 411  :             pFuncTbl->HWModemIntrHandler(pHWHead);

  00fa0	e59d0020	 ldr         r0, [sp, #0x20]
  00fa4	e59d3014	 ldr         r3, [sp, #0x14]
  00fa8	e2833020	 add         r3, r3, #0x20
  00fac	e5933000	 ldr         r3, [r3]
  00fb0	e1a0e00f	 mov         lr, pc
  00fb4	e12fff13	 bx          r3
  00fb8		 |$LN4@SerialEven|

; 412  :         }
; 413  : 
; 414  :         if ( it & INTR_LINE ) {

  00fb8	e59d300c	 ldr         r3, [sp, #0xC]
  00fbc	e3130001	 tst         r3, #1
  00fc0	0a000011	 beq         |$LN3@SerialEven|

; 415  :             DEBUGMSG (ZONE_THREAD, (TEXT("Line Event, it:%x\r\n"), it));

  00fc4	e59f30fc	 ldr         r3, [pc, #0xFC]
  00fc8	e5933440	 ldr         r3, [r3, #0x440]
  00fcc	e3130040	 tst         r3, #0x40
  00fd0	0a000005	 beq         |$LN65@SerialEven|
  00fd4	e59d100c	 ldr         r1, [sp, #0xC]
  00fd8	e59f00ec	 ldr         r0, [pc, #0xEC]
  00fdc	eb000000	 bl          NKDbgPrintfW
  00fe0	e3a03001	 mov         r3, #1
  00fe4	e58d309c	 str         r3, [sp, #0x9C]
  00fe8	ea000001	 b           |$LN66@SerialEven|
  00fec		 |$LN65@SerialEven|
  00fec	e3a03000	 mov         r3, #0
  00ff0	e58d309c	 str         r3, [sp, #0x9C]
  00ff4		 |$LN66@SerialEven|

; 416  : 
; 417  :             /* Call low level line status clean up code.
; 418  :              * Then unmask the interrupt
; 419  :              */
; 420  :             pFuncTbl->HWLineIntrHandler(pHWHead);

  00ff4	e59d0020	 ldr         r0, [sp, #0x20]
  00ff8	e59d3014	 ldr         r3, [sp, #0x14]
  00ffc	e2833024	 add         r3, r3, #0x24
  01000	e5933000	 ldr         r3, [r3]
  01004	e1a0e00f	 mov         lr, pc
  01008	e12fff13	 bx          r3
  0100c		 |$LN3@SerialEven|

; 421  :         }
; 422  :     }

  0100c	eafffdb6	 b           |$LN29@SerialEven|
  01010		 |$LN28@SerialEven|

; 423  : 
; 424  :     // We kept this till the end to optimize the above loop
; 425  :     if ( RxDataAvail ) {

  01010	e59d3008	 ldr         r3, [sp, #8]
  01014	e3530000	 cmp         r3, #0
  01018	0a000006	 beq         |$LN2@SerialEven|

; 426  :         // Signal COM_Read that bytes are available.
; 427  :         SetEvent(pSerialHead->hReadEvent);

  0101c	e59d30ac	 ldr         r3, [sp, #0xAC]
  01020	e2833034	 add         r3, r3, #0x34
  01024	e5930000	 ldr         r0, [r3]
  01028	eb000000	 bl          SetEvent

; 428  :         EvaluateEventFlag(pSerialHead, EV_RXCHAR);

  0102c	e3a01001	 mov         r1, #1
  01030	e59d00ac	 ldr         r0, [sp, #0xAC]
  01034	eb000000	 bl          EvaluateEventFlag
  01038		 |$LN2@SerialEven|

; 429  :     }
; 430  : 
; 431  :     DEBUGMSG (ZONE_THREAD ,
; 432  :               (TEXT("-SerialEventHandler, Fifo(R=%d,W=%d,L=%d)\r\n"),
; 433  :                RxRead(pSerialHead), RxWrite(pSerialHead),
; 434  :                RxLength(pSerialHead)));

  01038	e59f3088	 ldr         r3, [pc, #0x88]
  0103c	e5933440	 ldr         r3, [r3, #0x440]
  01040	e3130040	 tst         r3, #0x40
  01044	0a00000d	 beq         |$LN67@SerialEven|
  01048	e59d30ac	 ldr         r3, [sp, #0xAC]
  0104c	e28330a4	 add         r3, r3, #0xA4
  01050	e5933000	 ldr         r3, [r3]
  01054	e59d20ac	 ldr         r2, [sp, #0xAC]
  01058	e28220a0	 add         r2, r2, #0xA0
  0105c	e5922000	 ldr         r2, [r2]
  01060	e59d10ac	 ldr         r1, [sp, #0xAC]
  01064	e281109c	 add         r1, r1, #0x9C
  01068	e5911000	 ldr         r1, [r1]
  0106c	e59f0050	 ldr         r0, [pc, #0x50]
  01070	eb000000	 bl          NKDbgPrintfW
  01074	e3a03001	 mov         r3, #1
  01078	e58d30a0	 str         r3, [sp, #0xA0]
  0107c	ea000001	 b           |$LN68@SerialEven|
  01080		 |$LN67@SerialEven|
  01080	e3a03000	 mov         r3, #0
  01084	e58d30a0	 str         r3, [sp, #0xA0]
  01088		 |$LN68@SerialEven|

; 435  : 
; 436  :     if ( pSerialHead->pAccessOwner )

  01088	e59d30ac	 ldr         r3, [sp, #0xAC]
  0108c	e2833c01	 add         r3, r3, #1, 24
  01090	e5933000	 ldr         r3, [r3]
  01094	e3530000	 cmp         r3, #0
  01098	0a000004	 beq         |$LN1@SerialEven|

; 437  :         COM_DEC_USAGE_CNT(pSerialHead->pAccessOwner);

  0109c	e59d30ac	 ldr         r3, [sp, #0xAC]
  010a0	e2833c01	 add         r3, r3, #1, 24
  010a4	e5933000	 ldr         r3, [r3]
  010a8	e283000c	 add         r0, r3, #0xC
  010ac	eb000000	 bl          InterlockedDecrement
  010b0		 |$LN1@SerialEven|

; 245  : {

  010b0	e59d0040	 ldr         r0, [sp, #0x40]
  010b4	eb000000	 bl          __security_check_cookie

; 438  :     return;
; 439  : }

  010b8	e28dd0a4	 add         sp, sp, #0xA4
  010bc	e89d6000	 ldmia       sp, {sp, lr}
  010c0	e12fff1e	 bx          lr
  010c4		 |$LN74@SerialEven|
  010c4		 |$LN75@SerialEven|
  010c4	00000000	 DCD         |??_C@_1FI@GGFBGELP@?$AA?9?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAE?$AAv?$AAe?$AAn?$AAt?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?0?$AA?5?$AAF?$AAi?$AAf?$AAo?$AA?$CI?$AAR?$AA?$DN?$AA?$CF?$AAd?$AA?0?$AAW@|
  010c8		 |$LN76@SerialEven|
  010c8	00000000	 DCD         |dpCurSettings|
  010cc		 |$LN77@SerialEven|
  010cc	00000000	 DCD         |??_C@_1CI@EJHAPNLK@?$AAL?$AAi?$AAn?$AAe?$AA?5?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?0?$AA?5?$AAi?$AAt?$AA?3?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  010d0		 |$LN78@SerialEven|
  010d0	00000000	 DCD         |??_C@_1CK@CPCFPBFI@?$AAO?$AAt?$AAh?$AAe?$AAr?$AA?5?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?0?$AA?5?$AAi?$AAt?$AA?3?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  010d4		 |$LN79@SerialEven|
  010d4	00000000	 DCD         |??_C@_1BG@KFPNBBDH@?$AAT?$AAx?$AA?5?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?$AN?$AA?6?$AA?$AA@|
  010d8		 |$LN80@SerialEven|
  010d8	00000000	 DCD         |??_C@_1BO@CNGNDNHF@?$AAS?$AAe?$AAn?$AAd?$AAi?$AAn?$AAg?$AA?5?$AAX?$AAO?$AAF?$AAF?$AA?$AN?$AA?6?$AA?$AA@|
  010dc		 |$LN81@SerialEven|
  010dc	00000000	 DCD         |??_C@_1EK@LMCHJDFJ@?$AAR?$AAT?$AAS?$AA_?$AAC?$AAO?$AAN?$AAT?$AAR?$AAO?$AAL?$AA_?$AAH?$AAA?$AAN?$AAD?$AAS?$AAH?$AAA?$AAK?$AAE?$AA?5?$AAC?$AAl?$AAe?$AAa?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAR@|
  010e0		 |$LN82@SerialEven|
  010e0	00000000	 DCD         |??_C@_1EK@FLILIJBB@?$AAD?$AAT?$AAR?$AA_?$AAC?$AAO?$AAN?$AAT?$AAR?$AAO?$AAL?$AA_?$AAH?$AAA?$AAN?$AAD?$AAS?$AAH?$AAA?$AAK?$AAE?$AA?5?$AAC?$AAl?$AAe?$AAa?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAD@|
  010e4		 |$LN83@SerialEven|
  010e4	00000000	 DCD         |??_C@_1BO@EEIJDLJ@?$AAR?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AAd?$AA?5?$AAX?$AAO?$AAN?$AA?$AN?$AA?6?$AA?$AA@|
  010e8		 |$LN84@SerialEven|
  010e8	00000000	 DCD         |??_C@_1CA@EJJJJNNE@?$AAR?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AAd?$AA?5?$AAX?$AAO?$AAF?$AAF?$AA?$AN?$AA?6?$AA?$AA@|
  010ec		 |$LN85@SerialEven|
  010ec	00000000	 DCD         |??_C@_1HG@EGFFDKNF@?$AAA?$AAf?$AAt?$AAe?$AAr?$AA?5?$AAH?$AAW?$AAG?$AAe?$AAt?$AAB?$AAy?$AAt?$AAe?$AAs?$AA?0?$AA?5?$AAF?$AAi?$AAf?$AAo?$AA?$CI?$AAR?$AA?$DN?$AA?$CF?$AAd?$AA?0?$AAW?$AA?$DN?$AA?$CF?$AAd@|
  010f0		 |$LN86@SerialEven|
  010f0	00000000	 DCD         |??_C@_1CE@NDNCGIIC@?$AAT?$AAo?$AAs?$AAs?$AAe?$AAd?$AA?5?$AA?$CF?$AAd?$AA?5?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?$AN?$AA?6?$AA?$AA@|
  010f4		 |$LN87@SerialEven|
  010f4	00000000	 DCD         |??_C@_1BG@NHAMELLH@?$AAR?$AAx?$AA?5?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?$AN?$AA?6?$AA?$AA@|
  010f8		 |$LN88@SerialEven|
  010f8	00000000	 DCD         |??_C@_1EM@PPCKGCIP@?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAE?$AAv?$AAe?$AAn?$AAt?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?0?$AA?5?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAs?$AA?5?$AA0@|
  010fc		 |$LN89@SerialEven|
  010fc	00000000	 DCD         |??_C@_1EI@MHGBBLDA@?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAE?$AAv?$AAe?$AAn?$AAt?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?0?$AA?5?$AAN?$AAo?$AA?5?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt@|
  01100		 |$LN90@SerialEven|
  01100	00000000	 DCD         |??_C@_1CE@JLPIMJPF@?$AAE?$AAx?$AAi?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAt?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  01104		 |$LN91@SerialEven|
  01104	00000000	 DCD         |??_C@_1EE@PGFICLOP@?$AA?$CL?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAE?$AAv?$AAe?$AAn?$AAt?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?0?$AA?5?$AAp?$AAH?$AAe?$AAa?$AAd?$AA?5?$AA0?$AAx?$AA?$CF?$AAX?$AA?$AN@|
  01108		 |$LN92@SerialEven|
  01108	00000000	 DCD         |__security_cookie|
  0110c		 |$M41461|

			 ENDP  ; |SerialEventHandler|

; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\serial\com_mdd2\serpriv.h

  00000			 AREA	 |.pdata|, PDATA
|$T41490| DCD	|$LN7@RxBytesAva|
	DCD	0x40002304
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |RxBytesAvail| PROC

; 143  : __inline  ULONG RxBytesAvail(PHW_INDEP_INFO  pSH) {

  00000		 |$LN7@RxBytesAva|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd010	 sub         sp, sp, #0x10
  00010		 |$M41487|

; 144  :     // Note: We have to copy RxRead and RxWrite index to local in order to make it atomic.
; 145  :     register DWORD RxWIndex=RxWrite(pSH), RxRIndex=RxRead(pSH);

  00010	e59d3018	 ldr         r3, [sp, #0x18]
  00014	e28330a0	 add         r3, r3, #0xA0
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3000	 str         r3, [sp]
  00020	e59d3018	 ldr         r3, [sp, #0x18]
  00024	e283309c	 add         r3, r3, #0x9C
  00028	e5933000	 ldr         r3, [r3]
  0002c	e58d3004	 str         r3, [sp, #4]

; 146  :     return (RxWIndex>=RxRIndex?RxWIndex- RxRIndex : RxLength(pSH) - RxRIndex + RxWIndex );

  00030	e59d2000	 ldr         r2, [sp]
  00034	e59d3004	 ldr         r3, [sp, #4]
  00038	e1520003	 cmp         r2, r3
  0003c	3a000004	 bcc         |$LN3@RxBytesAva|
  00040	e59d2000	 ldr         r2, [sp]
  00044	e59d3004	 ldr         r3, [sp, #4]
  00048	e0423003	 sub         r3, r2, r3
  0004c	e58d300c	 str         r3, [sp, #0xC]
  00050	ea000007	 b           |$LN4@RxBytesAva|
  00054		 |$LN3@RxBytesAva|
  00054	e59d3018	 ldr         r3, [sp, #0x18]
  00058	e28330a4	 add         r3, r3, #0xA4
  0005c	e5932000	 ldr         r2, [r3]
  00060	e59d3004	 ldr         r3, [sp, #4]
  00064	e0422003	 sub         r2, r2, r3
  00068	e59d3000	 ldr         r3, [sp]
  0006c	e0823003	 add         r3, r2, r3
  00070	e58d300c	 str         r3, [sp, #0xC]
  00074		 |$LN4@RxBytesAva|
  00074	e59d300c	 ldr         r3, [sp, #0xC]
  00078	e58d3008	 str         r3, [sp, #8]

; 147  : }

  0007c	e59d0008	 ldr         r0, [sp, #8]
  00080	e28dd010	 add         sp, sp, #0x10
  00084	e89d6000	 ldmia       sp, {sp, lr}
  00088	e12fff1e	 bx          lr
  0008c		 |$M41488|

			 ENDP  ; |RxBytesAvail|

	EXPORT	|??_C@_1DI@KMMMNJHO@?$AAC?$AAr?$AAe?$AAa?$AAt?$AAe?$AAd?$AA?5?$AAr?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AA?5?$AAt?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?5?$AA?$CF?$AAX?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EM@FFMAHOCG@?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAd?$AAi?$AAs?$AAp?$AAa?$AAt?$AAc?$AAh?$AA?5?$AAt?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?5?$AA?$CI@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@MPKANNOJ@?$AAS?$AAp?$AAi?$AAn?$AAn?$AAi?$AAn?$AAg?$AA?5?$AAt?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?$CF?$AAX?$AA?6?$AA?$AN?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DO@GDLJAKBF@?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAi?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?6?$AA?$AN?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EI@EFCKMID@?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AA0?$AAx?$AA?$CF?$AAX?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF@| [ DATA ] ; `string'
	EXPORT	|StartDispatchThread|
	IMPORT	|GetLastError|
	IMPORT	|CreateThread|
	IMPORT	|InterruptDone|
	IMPORT	|InterruptInitialize|

  00018			 AREA	 |.pdata|, PDATA
|$T41510| DCD	|$LN17@StartDispa|
	DCD	0x40009904
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\serial\com_mdd2\mdd.c

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DI@KMMMNJHO@?$AAC?$AAr?$AAe?$AAa?$AAt?$AAe?$AAd?$AA?5?$AAr?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AA?5?$AAt?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?5?$AA?$CF?$AAX?$AA?$AN?$AA?6?$AA?$AA@| DCB "C"
	DCB	0x0, "r", 0x0, "e", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "r", 0x0, "e", 0x0, "c", 0x0, "e", 0x0, "i"
	DCB	0x0, "v", 0x0, "e", 0x0, " ", 0x0, "t", 0x0, "h", 0x0, "r"
	DCB	0x0, "e", 0x0, "a", 0x0, "d", 0x0, " ", 0x0, "%", 0x0, "X"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EM@FFMAHOCG@?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAd?$AAi?$AAs?$AAp?$AAa?$AAt?$AAc?$AAh?$AA?5?$AAt?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?5?$AA?$CI@| DCB "E"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "c"
	DCB	0x0, "r", 0x0, "e", 0x0, "a", 0x0, "t", 0x0, "i", 0x0, "n"
	DCB	0x0, "g", 0x0, " ", 0x0, "d", 0x0, "i", 0x0, "s", 0x0, "p"
	DCB	0x0, "a", 0x0, "t", 0x0, "c", 0x0, "h", 0x0, " ", 0x0, "t"
	DCB	0x0, "h", 0x0, "r", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, " "
	DCB	0x0, "(", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xa, 0x0, 0xd
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@MPKANNOJ@?$AAS?$AAp?$AAi?$AAn?$AAn?$AAi?$AAn?$AAg?$AA?5?$AAt?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?$CF?$AAX?$AA?6?$AA?$AN?$AA?$AA@| DCB "S"
	DCB	0x0, "p", 0x0, "i", 0x0, "n", 0x0, "n", 0x0, "i", 0x0, "n"
	DCB	0x0, "g", 0x0, " ", 0x0, "t", 0x0, "h", 0x0, "r", 0x0, "e"
	DCB	0x0, "a", 0x0, "d", 0x0, "%", 0x0, "X", 0x0, 0xa, 0x0, 0xd
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@GDLJAKBF@?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAi?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?6?$AA?$AN?$AA?$AA@| DCB "E"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "i"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a", 0x0, "l"
	DCB	0x0, "i", 0x0, "z", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, " "
	DCB	0x0, "i", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r"
	DCB	0x0, "u", 0x0, "p", 0x0, "t", 0x0, 0xa, 0x0, 0xd, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EI@EFCKMID@?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AA0?$AAx?$AA?$CF?$AAX?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF@| DCB "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a", 0x0, "l"
	DCB	0x0, "i", 0x0, "z", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, " "
	DCB	0x0, "i", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r"
	DCB	0x0, "u", 0x0, "p", 0x0, "t", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "X", 0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "X", 0x0, 0xa, 0x0, 0xd, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  0110c			 AREA	 |.text|, CODE, ARM

  0110c		 |StartDispatchThread| PROC

; 511  : {

  0110c		 |$LN17@StartDispa|
  0110c	e1a0c00d	 mov         r12, sp
  01110	e92d0001	 stmdb       sp!, {r0}
  01114	e92d5000	 stmdb       sp!, {r12, lr}
  01118	e24dd034	 sub         sp, sp, #0x34
  0111c		 |$M41507|

; 512  :     // Initialize the interrupt to be associated with the hSerialEvent
; 513  :     // event. GetByte waits on this event and acts as a second
; 514  :     // level decoder determining the type of serial event. If this return
; 515  :     // fails, then another process has registered for the interrupt, so
; 516  :     // fail the init and set the hSerialEvent to NULL.
; 517  :     DEBUGMSG(ZONE_INIT,
; 518  :              (TEXT("Initializing interrupt 0x%X, 0x%X\n\r"),
; 519  :               pSerialHead->pHWObj->dwIntID, pSerialHead->hSerialEvent));

  0111c	e59f3234	 ldr         r3, [pc, #0x234]
  01120	e5933440	 ldr         r3, [r3, #0x440]
  01124	e3130001	 tst         r3, #1
  01128	0a00000c	 beq         |$LN5@StartDispa|
  0112c	e59d303c	 ldr         r3, [sp, #0x3C]
  01130	e2833030	 add         r3, r3, #0x30
  01134	e5932000	 ldr         r2, [r3]
  01138	e59d303c	 ldr         r3, [sp, #0x3C]
  0113c	e2833028	 add         r3, r3, #0x28
  01140	e5933000	 ldr         r3, [r3]
  01144	e2833004	 add         r3, r3, #4
  01148	e5931000	 ldr         r1, [r3]
  0114c	e59f0218	 ldr         r0, [pc, #0x218]
  01150	eb000000	 bl          NKDbgPrintfW
  01154	e3a03001	 mov         r3, #1
  01158	e58d3014	 str         r3, [sp, #0x14]
  0115c	ea000001	 b           |$LN6@StartDispa|
  01160		 |$LN5@StartDispa|
  01160	e3a03000	 mov         r3, #0
  01164	e58d3014	 str         r3, [sp, #0x14]
  01168		 |$LN6@StartDispa|

; 520  : 
; 521  :     if ( !InterruptInitialize(pSerialHead->pHWObj->dwIntID,
; 522  :                               pSerialHead->hSerialEvent,
; 523  :                               NULL,
; 524  :                               0) ) {

  01168	e3a03000	 mov         r3, #0
  0116c	e3a02000	 mov         r2, #0
  01170	e59d103c	 ldr         r1, [sp, #0x3C]
  01174	e2811030	 add         r1, r1, #0x30
  01178	e5911000	 ldr         r1, [r1]
  0117c	e59d003c	 ldr         r0, [sp, #0x3C]
  01180	e2800028	 add         r0, r0, #0x28
  01184	e5900000	 ldr         r0, [r0]
  01188	e2800004	 add         r0, r0, #4
  0118c	e5900000	 ldr         r0, [r0]
  01190	eb000000	 bl          InterruptInitialize
  01194	e58d0018	 str         r0, [sp, #0x18]
  01198	e59d3018	 ldr         r3, [sp, #0x18]
  0119c	e3530000	 cmp         r3, #0
  011a0	1a000011	 bne         |$LN2@StartDispa|

; 525  :         DEBUGMSG(ZONE_INIT | ZONE_ERROR,
; 526  :                  (TEXT("Error initializing interrupt\n\r")));

  011a4	e59f31ac	 ldr         r3, [pc, #0x1AC]
  011a8	e5933440	 ldr         r3, [r3, #0x440]
  011ac	e2032001	 and         r2, r3, #1
  011b0	e59f31a0	 ldr         r3, [pc, #0x1A0]
  011b4	e5933440	 ldr         r3, [r3, #0x440]
  011b8	e2033902	 and         r3, r3, #2, 18
  011bc	e1923003	 orrs        r3, r2, r3
  011c0	0a000004	 beq         |$LN7@StartDispa|
  011c4	e59f019c	 ldr         r0, [pc, #0x19C]
  011c8	eb000000	 bl          NKDbgPrintfW
  011cc	e3a03001	 mov         r3, #1
  011d0	e58d301c	 str         r3, [sp, #0x1C]
  011d4	ea000001	 b           |$LN8@StartDispa|
  011d8		 |$LN7@StartDispa|
  011d8	e3a03000	 mov         r3, #0
  011dc	e58d301c	 str         r3, [sp, #0x1C]
  011e0		 |$LN8@StartDispa|

; 527  :         return(FALSE);

  011e0	e3a03000	 mov         r3, #0
  011e4	e58d3008	 str         r3, [sp, #8]
  011e8	ea000055	 b           |$LN3@StartDispa|
  011ec		 |$LN2@StartDispa|

; 528  :     }
; 529  : 
; 530  :     InterruptDone(pSerialHead->pHWObj->dwIntID);

  011ec	e59d303c	 ldr         r3, [sp, #0x3C]
  011f0	e2833028	 add         r3, r3, #0x28
  011f4	e5933000	 ldr         r3, [r3]
  011f8	e2833004	 add         r3, r3, #4
  011fc	e5930000	 ldr         r0, [r3]
  01200	eb000000	 bl          InterruptDone

; 531  : 
; 532  :     // Set up the dispatch thread and it's kill flag. Note that the thread
; 533  :     // fills in its own handle in pSerialHead.
; 534  :     pSerialHead->KillRxThread = 0;

  01204	e59d303c	 ldr         r3, [sp, #0x3C]
  01208	e2833094	 add         r3, r3, #0x94
  0120c	e5932000	 ldr         r2, [r3]
  01210	e3e03001	 mvn         r3, #1
  01214	e0022003	 and         r2, r2, r3
  01218	e59d303c	 ldr         r3, [sp, #0x3C]
  0121c	e2833094	 add         r3, r3, #0x94
  01220	e5832000	 str         r2, [r3]

; 535  :     pSerialHead->pDispatchThread = NULL;

  01224	e59d303c	 ldr         r3, [sp, #0x3C]
  01228	e2832040	 add         r2, r3, #0x40
  0122c	e3a03000	 mov         r3, #0
  01230	e5823000	 str         r3, [r2]

; 536  : 
; 537  :     DEBUGMSG(ZONE_INIT,
; 538  :              (TEXT("Spinning thread%X\n\r"), pSerialHead));

  01234	e59f311c	 ldr         r3, [pc, #0x11C]
  01238	e5933440	 ldr         r3, [r3, #0x440]
  0123c	e3130001	 tst         r3, #1
  01240	0a000005	 beq         |$LN9@StartDispa|
  01244	e59d103c	 ldr         r1, [sp, #0x3C]
  01248	e59f0114	 ldr         r0, [pc, #0x114]
  0124c	eb000000	 bl          NKDbgPrintfW
  01250	e3a03001	 mov         r3, #1
  01254	e58d3020	 str         r3, [sp, #0x20]
  01258	ea000001	 b           |$LN10@StartDispa|
  0125c		 |$LN9@StartDispa|
  0125c	e3a03000	 mov         r3, #0
  01260	e58d3020	 str         r3, [sp, #0x20]
  01264		 |$LN10@StartDispa|

; 539  : 
; 540  :     pSerialHead->pDispatchThread = CreateThread(NULL,0, SerialDispatchThread,
; 541  :                                                 pSerialHead, 0,NULL);

  01264	e3a03000	 mov         r3, #0
  01268	e58d3004	 str         r3, [sp, #4]
  0126c	e3a03000	 mov         r3, #0
  01270	e58d3000	 str         r3, [sp]
  01274	e59d303c	 ldr         r3, [sp, #0x3C]
  01278	e59f20e0	 ldr         r2, [pc, #0xE0]
  0127c	e3a01000	 mov         r1, #0
  01280	e3a00000	 mov         r0, #0
  01284	eb000000	 bl          CreateThread
  01288	e58d0024	 str         r0, [sp, #0x24]
  0128c	e59d303c	 ldr         r3, [sp, #0x3C]
  01290	e2832040	 add         r2, r3, #0x40
  01294	e59d3024	 ldr         r3, [sp, #0x24]
  01298	e5823000	 str         r3, [r2]

; 542  :     if ( pSerialHead->pDispatchThread == NULL ) {

  0129c	e59d303c	 ldr         r3, [sp, #0x3C]
  012a0	e2833040	 add         r3, r3, #0x40
  012a4	e5933000	 ldr         r3, [r3]
  012a8	e3530000	 cmp         r3, #0
  012ac	1a000014	 bne         |$LN1@StartDispa|

; 543  :         DEBUGMSG(ZONE_INIT|ZONE_ERROR,
; 544  :                  (TEXT("Error creating dispatch thread (%d)\n\r"),
; 545  :                   GetLastError()));

  012b0	e59f30a0	 ldr         r3, [pc, #0xA0]
  012b4	e5933440	 ldr         r3, [r3, #0x440]
  012b8	e2032001	 and         r2, r3, #1
  012bc	e59f3094	 ldr         r3, [pc, #0x94]
  012c0	e5933440	 ldr         r3, [r3, #0x440]
  012c4	e2033902	 and         r3, r3, #2, 18
  012c8	e1923003	 orrs        r3, r2, r3
  012cc	0a000007	 beq         |$LN11@StartDispa|
  012d0	eb000000	 bl          GetLastError
  012d4	e58d0028	 str         r0, [sp, #0x28]
  012d8	e59d1028	 ldr         r1, [sp, #0x28]
  012dc	e59f0078	 ldr         r0, [pc, #0x78]
  012e0	eb000000	 bl          NKDbgPrintfW
  012e4	e3a03001	 mov         r3, #1
  012e8	e58d302c	 str         r3, [sp, #0x2C]
  012ec	ea000001	 b           |$LN12@StartDispa|
  012f0		 |$LN11@StartDispa|
  012f0	e3a03000	 mov         r3, #0
  012f4	e58d302c	 str         r3, [sp, #0x2C]
  012f8		 |$LN12@StartDispa|

; 546  :         return(FALSE);

  012f8	e3a03000	 mov         r3, #0
  012fc	e58d3008	 str         r3, [sp, #8]
  01300	ea00000f	 b           |$LN3@StartDispa|
  01304		 |$LN1@StartDispa|

; 547  :     }
; 548  : 
; 549  :     DEBUGMSG (ZONE_INIT, (TEXT("Created receive thread %X\r\n"),
; 550  :                           pSerialHead->pDispatchThread));

  01304	e59f304c	 ldr         r3, [pc, #0x4C]
  01308	e5933440	 ldr         r3, [r3, #0x440]
  0130c	e3130001	 tst         r3, #1
  01310	0a000007	 beq         |$LN13@StartDispa|
  01314	e59d303c	 ldr         r3, [sp, #0x3C]
  01318	e2833040	 add         r3, r3, #0x40
  0131c	e5931000	 ldr         r1, [r3]
  01320	e59f002c	 ldr         r0, [pc, #0x2C]
  01324	eb000000	 bl          NKDbgPrintfW
  01328	e3a03001	 mov         r3, #1
  0132c	e58d3030	 str         r3, [sp, #0x30]
  01330	ea000001	 b           |$LN14@StartDispa|
  01334		 |$LN13@StartDispa|
  01334	e3a03000	 mov         r3, #0
  01338	e58d3030	 str         r3, [sp, #0x30]
  0133c		 |$LN14@StartDispa|

; 551  :     return(TRUE);

  0133c	e3a03001	 mov         r3, #1
  01340	e58d3008	 str         r3, [sp, #8]
  01344		 |$LN3@StartDispa|

; 552  : }

  01344	e59d0008	 ldr         r0, [sp, #8]
  01348	e28dd034	 add         sp, sp, #0x34
  0134c	e89d6000	 ldmia       sp, {sp, lr}
  01350	e12fff1e	 bx          lr
  01354		 |$LN18@StartDispa|
  01354		 |$LN19@StartDispa|
  01354	00000000	 DCD         |??_C@_1DI@KMMMNJHO@?$AAC?$AAr?$AAe?$AAa?$AAt?$AAe?$AAd?$AA?5?$AAr?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AA?5?$AAt?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?5?$AA?$CF?$AAX?$AA?$AN?$AA?6?$AA?$AA@|
  01358		 |$LN20@StartDispa|
  01358	00000000	 DCD         |dpCurSettings|
  0135c		 |$LN21@StartDispa|
  0135c	00000000	 DCD         |??_C@_1EM@FFMAHOCG@?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAd?$AAi?$AAs?$AAp?$AAa?$AAt?$AAc?$AAh?$AA?5?$AAt?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?5?$AA?$CI@|
  01360		 |$LN22@StartDispa|
  01360	00000000	 DCD         |SerialDispatchThread|
  01364		 |$LN23@StartDispa|
  01364	00000000	 DCD         |??_C@_1CI@MPKANNOJ@?$AAS?$AAp?$AAi?$AAn?$AAn?$AAi?$AAn?$AAg?$AA?5?$AAt?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?$CF?$AAX?$AA?6?$AA?$AN?$AA?$AA@|
  01368		 |$LN24@StartDispa|
  01368	00000000	 DCD         |??_C@_1DO@GDLJAKBF@?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAi?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?6?$AA?$AN?$AA?$AA@|
  0136c		 |$LN25@StartDispa|
  0136c	00000000	 DCD         |??_C@_1EI@EFCKMID@?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AA0?$AAx?$AA?$CF?$AAX?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF@|
  01370		 |$M41508|

			 ENDP  ; |StartDispatchThread|

	EXPORT	|??_C@_1EE@NKOOKCAI@?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAD?$AAi?$AAs?$AAp?$AAa?$AAt?$AAc?$AAh?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?5?$AA?$CF?$AAx?$AA?5?$AAe?$AAx?$AAi?$AAt?$AAi?$AAn?$AAg?$AA?$AN@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BO@CNJNPPHP@?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?5?$AA?$CF?$AAX?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EI@IJEBFPL@?$AAS?$AAp?$AAi?$AAn?$AAn?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAn?$AA?5?$AAd?$AAi?$AAs?$AAp?$AAa?$AAt?$AAc?$AAh?$AA?5?$AAt?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?5?$AA?$CF?$AAX?$AA?5?$AA?$CF@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EE@JPBAFGIH@?$AAE?$AAn?$AAt?$AAe?$AAr?$AAe?$AAd?$AA?5?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAD?$AAi?$AAs?$AAp?$AAa?$AAt?$AAc?$AAh?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?5?$AA?$CF?$AAX?$AA?$AN@| [ DATA ] ; `string'
	IMPORT	|WaitForSingleObject|
	IMPORT	|Sleep|

  00020			 AREA	 |.pdata|, PDATA
|$T41532| DCD	|$LN18@SerialDisp|
	DCD	0x40006f04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EE@NKOOKCAI@?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAD?$AAi?$AAs?$AAp?$AAa?$AAt?$AAc?$AAh?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?5?$AA?$CF?$AAx?$AA?5?$AAe?$AAx?$AAi?$AAt?$AAi?$AAn?$AAg?$AA?$AN@| DCB "S"
	DCB	0x0, "e", 0x0, "r", 0x0, "i", 0x0, "a", 0x0, "l", 0x0, "D"
	DCB	0x0, "i", 0x0, "s", 0x0, "p", 0x0, "a", 0x0, "t", 0x0, "c"
	DCB	0x0, "h", 0x0, "T", 0x0, "h", 0x0, "r", 0x0, "e", 0x0, "a"
	DCB	0x0, "d", 0x0, " ", 0x0, "%", 0x0, "x", 0x0, " ", 0x0, "e"
	DCB	0x0, "x", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "n", 0x0, "g"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@CNJNPPHP@?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?5?$AA?$CF?$AAX?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "E"
	DCB	0x0, "v", 0x0, "e", 0x0, "n", 0x0, "t", 0x0, " ", 0x0, "%"
	DCB	0x0, "X", 0x0, ",", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EI@IJEBFPL@?$AAS?$AAp?$AAi?$AAn?$AAn?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAn?$AA?5?$AAd?$AAi?$AAs?$AAp?$AAa?$AAt?$AAc?$AAh?$AA?5?$AAt?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?5?$AA?$CF?$AAX?$AA?5?$AA?$CF@| DCB "S"
	DCB	0x0, "p", 0x0, "i", 0x0, "n", 0x0, "n", 0x0, "i", 0x0, "n"
	DCB	0x0, "g", 0x0, " ", 0x0, "i", 0x0, "n", 0x0, " ", 0x0, "d"
	DCB	0x0, "i", 0x0, "s", 0x0, "p", 0x0, "a", 0x0, "t", 0x0, "c"
	DCB	0x0, "h", 0x0, " ", 0x0, "t", 0x0, "h", 0x0, "r", 0x0, "e"
	DCB	0x0, "a", 0x0, "d", 0x0, " ", 0x0, "%", 0x0, "X", 0x0, " "
	DCB	0x0, "%", 0x0, "X", 0x0, 0xa, 0x0, 0xd, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EE@JPBAFGIH@?$AAE?$AAn?$AAt?$AAe?$AAr?$AAe?$AAd?$AA?5?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAD?$AAi?$AAs?$AAp?$AAa?$AAt?$AAc?$AAh?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?5?$AA?$CF?$AAX?$AA?$AN@| DCB "E"
	DCB	0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "S", 0x0, "e", 0x0, "r", 0x0, "i", 0x0, "a"
	DCB	0x0, "l", 0x0, "D", 0x0, "i", 0x0, "s", 0x0, "p", 0x0, "a"
	DCB	0x0, "t", 0x0, "c", 0x0, "h", 0x0, "T", 0x0, "h", 0x0, "r"
	DCB	0x0, "e", 0x0, "a", 0x0, "d", 0x0, " ", 0x0, "%", 0x0, "X"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  01370			 AREA	 |.text|, CODE, ARM

  01370		 |SerialDispatchThread| PROC

; 464  : {

  01370		 |$LN18@SerialDisp|
  01370	e1a0c00d	 mov         r12, sp
  01374	e92d0001	 stmdb       sp!, {r0}
  01378	e92d5000	 stmdb       sp!, {r12, lr}
  0137c	e24dd020	 sub         sp, sp, #0x20
  01380		 |$M41529|

; 465  :     PHW_INDEP_INFO      pSerialHead    = (PHW_INDEP_INFO)pContext;

  01380	e59d3028	 ldr         r3, [sp, #0x28]
  01384	e58d3000	 str         r3, [sp]

; 466  :     ULONG               WaitReturn;
; 467  : 
; 468  :     DEBUGMSG (ZONE_THREAD, (TEXT("Entered SerialDispatchThread %X\r\n"),
; 469  :                             pSerialHead));

  01388	e59f318c	 ldr         r3, [pc, #0x18C]
  0138c	e5933440	 ldr         r3, [r3, #0x440]
  01390	e3130040	 tst         r3, #0x40
  01394	0a000005	 beq         |$LN8@SerialDisp|
  01398	e59d1000	 ldr         r1, [sp]
  0139c	e59f0184	 ldr         r0, [pc, #0x184]
  013a0	eb000000	 bl          NKDbgPrintfW
  013a4	e3a03001	 mov         r3, #1
  013a8	e58d300c	 str         r3, [sp, #0xC]
  013ac	ea000001	 b           |$LN9@SerialDisp|
  013b0		 |$LN8@SerialDisp|
  013b0	e3a03000	 mov         r3, #0
  013b4	e58d300c	 str         r3, [sp, #0xC]
  013b8		 |$LN9@SerialDisp|

; 470  : 
; 471  :     // It is possible for a PDD to use this routine in its private thread, so
; 472  :     // don't just assume that the MDD synchronization mechanism is in place.
; 473  :     if ( pSerialHead->pHWObj->BindFlags & THREAD_IN_MDD ) {

  013b8	e59d3000	 ldr         r3, [sp]
  013bc	e2833028	 add         r3, r3, #0x28
  013c0	e5933000	 ldr         r3, [r3]
  013c4	e5933000	 ldr         r3, [r3]
  013c8	e3130003	 tst         r3, #3
  013cc	0a000016	 beq         |$LN5@SerialDisp|

; 474  :         DEBUGMSG(ZONE_INIT,
; 475  :                  (TEXT("Spinning in dispatch thread %X %X\n\r"), pSerialHead, pSerialHead->pHWObj));

  013d0	e59f3144	 ldr         r3, [pc, #0x144]
  013d4	e5933440	 ldr         r3, [r3, #0x440]
  013d8	e3130001	 tst         r3, #1
  013dc	0a000008	 beq         |$LN10@SerialDisp|
  013e0	e59d3000	 ldr         r3, [sp]
  013e4	e2833028	 add         r3, r3, #0x28
  013e8	e5932000	 ldr         r2, [r3]
  013ec	e59d1000	 ldr         r1, [sp]
  013f0	e59f012c	 ldr         r0, [pc, #0x12C]
  013f4	eb000000	 bl          NKDbgPrintfW
  013f8	e3a03001	 mov         r3, #1
  013fc	e58d3010	 str         r3, [sp, #0x10]
  01400	ea000001	 b           |$LN11@SerialDisp|
  01404		 |$LN10@SerialDisp|
  01404	e3a03000	 mov         r3, #0
  01408	e58d3010	 str         r3, [sp, #0x10]
  0140c		 |$LN11@SerialDisp|
  0140c		 |$LN4@SerialDisp|

; 476  :         while ( !pSerialHead->pDispatchThread ) {

  0140c	e59d3000	 ldr         r3, [sp]
  01410	e2833040	 add         r3, r3, #0x40
  01414	e5933000	 ldr         r3, [r3]
  01418	e3530000	 cmp         r3, #0
  0141c	1a000002	 bne         |$LN3@SerialDisp|

; 477  :             Sleep(20);

  01420	e3a00014	 mov         r0, #0x14
  01424	eb000000	 bl          Sleep

; 478  :         }

  01428	eafffff7	 b           |$LN4@SerialDisp|
  0142c		 |$LN3@SerialDisp|
  0142c		 |$LN5@SerialDisp|
  0142c		 |$LN2@SerialDisp|

; 479  :     }
; 480  : 
; 481  :     /* Wait for the event that any serial port action creates.
; 482  :      */
; 483  :     while ( !pSerialHead->KillRxThread ) {

  0142c	e59d3000	 ldr         r3, [sp]
  01430	e2833094	 add         r3, r3, #0x94
  01434	e5933000	 ldr         r3, [r3]
  01438	e3130001	 tst         r3, #1
  0143c	1a000023	 bne         |$LN1@SerialDisp|

; 484  :         DEBUGMSG (ZONE_THREAD, (TEXT("Event %X, %d\r\n"),
; 485  :                                 pSerialHead->hSerialEvent,
; 486  :                                 pSerialHead->pHWObj->dwIntID ));

  01440	e59f30d4	 ldr         r3, [pc, #0xD4]
  01444	e5933440	 ldr         r3, [r3, #0x440]
  01448	e3130040	 tst         r3, #0x40
  0144c	0a00000c	 beq         |$LN12@SerialDisp|
  01450	e59d3000	 ldr         r3, [sp]
  01454	e2833028	 add         r3, r3, #0x28
  01458	e5933000	 ldr         r3, [r3]
  0145c	e2833004	 add         r3, r3, #4
  01460	e5932000	 ldr         r2, [r3]
  01464	e59d3000	 ldr         r3, [sp]
  01468	e2833030	 add         r3, r3, #0x30
  0146c	e5931000	 ldr         r1, [r3]
  01470	e59f00a8	 ldr         r0, [pc, #0xA8]
  01474	eb000000	 bl          NKDbgPrintfW
  01478	e3a03001	 mov         r3, #1
  0147c	e58d3014	 str         r3, [sp, #0x14]
  01480	ea000001	 b           |$LN13@SerialDisp|
  01484		 |$LN12@SerialDisp|
  01484	e3a03000	 mov         r3, #0
  01488	e58d3014	 str         r3, [sp, #0x14]
  0148c		 |$LN13@SerialDisp|

; 487  :         WaitReturn = WaitForSingleObject(pSerialHead->hSerialEvent, INFINITE);

  0148c	e3e01000	 mvn         r1, #0
  01490	e59d3000	 ldr         r3, [sp]
  01494	e2833030	 add         r3, r3, #0x30
  01498	e5930000	 ldr         r0, [r3]
  0149c	eb000000	 bl          WaitForSingleObject
  014a0	e58d0018	 str         r0, [sp, #0x18]
  014a4	e59d3018	 ldr         r3, [sp, #0x18]
  014a8	e58d3004	 str         r3, [sp, #4]

; 488  : 
; 489  :         SerialEventHandler(pSerialHead);

  014ac	e59d0000	 ldr         r0, [sp]
  014b0	eb000000	 bl          SerialEventHandler

; 490  :         InterruptDone(pSerialHead->pHWObj->dwIntID);

  014b4	e59d3000	 ldr         r3, [sp]
  014b8	e2833028	 add         r3, r3, #0x28
  014bc	e5933000	 ldr         r3, [r3]
  014c0	e2833004	 add         r3, r3, #4
  014c4	e5930000	 ldr         r0, [r3]
  014c8	eb000000	 bl          InterruptDone

; 491  :     }

  014cc	eaffffd6	 b           |$LN2@SerialDisp|
  014d0		 |$LN1@SerialDisp|

; 492  : 
; 493  :     DEBUGMSG (ZONE_THREAD, (TEXT("SerialDispatchThread %x exiting\r\n"),
; 494  :                             pSerialHead));

  014d0	e59f3044	 ldr         r3, [pc, #0x44]
  014d4	e5933440	 ldr         r3, [r3, #0x440]
  014d8	e3130040	 tst         r3, #0x40
  014dc	0a000005	 beq         |$LN14@SerialDisp|
  014e0	e59d1000	 ldr         r1, [sp]
  014e4	e59f002c	 ldr         r0, [pc, #0x2C]
  014e8	eb000000	 bl          NKDbgPrintfW
  014ec	e3a03001	 mov         r3, #1
  014f0	e58d301c	 str         r3, [sp, #0x1C]
  014f4	ea000001	 b           |$LN15@SerialDisp|
  014f8		 |$LN14@SerialDisp|
  014f8	e3a03000	 mov         r3, #0
  014fc	e58d301c	 str         r3, [sp, #0x1C]
  01500		 |$LN15@SerialDisp|

; 495  :     return(0);

  01500	e3a03000	 mov         r3, #0
  01504	e58d3008	 str         r3, [sp, #8]

; 496  : }

  01508	e59d0008	 ldr         r0, [sp, #8]
  0150c	e28dd020	 add         sp, sp, #0x20
  01510	e89d6000	 ldmia       sp, {sp, lr}
  01514	e12fff1e	 bx          lr
  01518		 |$LN19@SerialDisp|
  01518		 |$LN20@SerialDisp|
  01518	00000000	 DCD         |??_C@_1EE@NKOOKCAI@?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAD?$AAi?$AAs?$AAp?$AAa?$AAt?$AAc?$AAh?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?5?$AA?$CF?$AAx?$AA?5?$AAe?$AAx?$AAi?$AAt?$AAi?$AAn?$AAg?$AA?$AN@|
  0151c		 |$LN21@SerialDisp|
  0151c	00000000	 DCD         |dpCurSettings|
  01520		 |$LN22@SerialDisp|
  01520	00000000	 DCD         |??_C@_1BO@CNJNPPHP@?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?5?$AA?$CF?$AAX?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  01524		 |$LN23@SerialDisp|
  01524	00000000	 DCD         |??_C@_1EI@IJEBFPL@?$AAS?$AAp?$AAi?$AAn?$AAn?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAn?$AA?5?$AAd?$AAi?$AAs?$AAp?$AAa?$AAt?$AAc?$AAh?$AA?5?$AAt?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?5?$AA?$CF?$AAX?$AA?5?$AA?$CF@|
  01528		 |$LN24@SerialDisp|
  01528	00000000	 DCD         |??_C@_1EE@JPBAFGIH@?$AAE?$AAn?$AAt?$AAe?$AAr?$AAe?$AAd?$AA?5?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAD?$AAi?$AAs?$AAp?$AAa?$AAt?$AAc?$AAh?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?5?$AA?$CF?$AAX?$AA?$AN@|
  0152c		 |$M41530|

			 ENDP  ; |SerialDispatchThread|

	EXPORT	|??_C@_1DM@NEFLPBFN@?$AA?$AN?$AA?6?$AAR?$AAe?$AAt?$AAu?$AAr?$AAn?$AAe?$AAd?$AA?5?$AAf?$AAr?$AAo?$AAm?$AA?5?$AAC?$AAl?$AAo?$AAs?$AAe?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DO@BPPHAKCP@?$AA?$AN?$AA?6?$AAT?$AAr?$AAy?$AAi?$AAn?$AAg?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAC?$AAl?$AAo?$AAs?$AAe?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EI@FHNFOMPC@?$AA?$AN?$AA?6?$AAT?$AAr?$AAy?$AAi?$AAn?$AAg?$AA?5?$AAt?$AAo?$AA?5?$AAs?$AAi?$AAg?$AAn?$AAa?$AAl?$AA?5?$AAs?$AAe?$AAr?$AAi?$AAa?$AAl?$AA?5?$AAt?$AAh?$AAr?$AAe?$AAa?$AAd@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EI@JFKDHKHE@?$AA?$AN?$AA?6?$AAT?$AAr?$AAy?$AAi?$AAn?$AAg?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAl?$AAo?$AAs?$AAe?$AA?5?$AAd?$AAi?$AAs?$AAp?$AAa?$AAt?$AAc?$AAh?$AA?5?$AAt?$AAh?$AAr?$AAe?$AAa@| [ DATA ] ; `string'
	EXPORT	|GetCurrentThread|
	EXPORT	|StopDispatchThread|
	IMPORT	|InterruptDisable|
	IMPORT	|CloseHandle|
	IMPORT	|CeSetThreadPriority|
	IMPORT	|CeGetThreadPriority|

  00028			 AREA	 |.pdata|, PDATA
|$T41552| DCD	|$LN15@StopDispat|
	DCD	0x40007a04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@NEFLPBFN@?$AA?$AN?$AA?6?$AAR?$AAe?$AAt?$AAu?$AAr?$AAn?$AAe?$AAd?$AA?5?$AAf?$AAr?$AAo?$AAm?$AA?5?$AAC?$AAl?$AAo?$AAs?$AAe?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AA?$AN?$AA?6?$AA?$AA@| DCB 0xd
	DCB	0x0, 0xa, 0x0, "R", 0x0, "e", 0x0, "t", 0x0, "u", 0x0, "r"
	DCB	0x0, "n", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "f", 0x0, "r"
	DCB	0x0, "o", 0x0, "m", 0x0, " ", 0x0, "C", 0x0, "l", 0x0, "o"
	DCB	0x0, "s", 0x0, "e", 0x0, "H", 0x0, "a", 0x0, "n", 0x0, "d"
	DCB	0x0, "l", 0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@BPPHAKCP@?$AA?$AN?$AA?6?$AAT?$AAr?$AAy?$AAi?$AAn?$AAg?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAC?$AAl?$AAo?$AAs?$AAe?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AA?$AN?$AA?6?$AA?$AA@| DCB 0xd
	DCB	0x0, 0xa, 0x0, "T", 0x0, "r", 0x0, "y", 0x0, "i", 0x0, "n"
	DCB	0x0, "g", 0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "c"
	DCB	0x0, "a", 0x0, "l", 0x0, "l", 0x0, " ", 0x0, "C", 0x0, "l"
	DCB	0x0, "o", 0x0, "s", 0x0, "e", 0x0, "H", 0x0, "a", 0x0, "n"
	DCB	0x0, "d", 0x0, "l", 0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EI@FHNFOMPC@?$AA?$AN?$AA?6?$AAT?$AAr?$AAy?$AAi?$AAn?$AAg?$AA?5?$AAt?$AAo?$AA?5?$AAs?$AAi?$AAg?$AAn?$AAa?$AAl?$AA?5?$AAs?$AAe?$AAr?$AAi?$AAa?$AAl?$AA?5?$AAt?$AAh?$AAr?$AAe?$AAa?$AAd@| DCB 0xd
	DCB	0x0, 0xa, 0x0, "T", 0x0, "r", 0x0, "y", 0x0, "i", 0x0, "n"
	DCB	0x0, "g", 0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "s"
	DCB	0x0, "i", 0x0, "g", 0x0, "n", 0x0, "a", 0x0, "l", 0x0, " "
	DCB	0x0, "s", 0x0, "e", 0x0, "r", 0x0, "i", 0x0, "a", 0x0, "l"
	DCB	0x0, " ", 0x0, "t", 0x0, "h", 0x0, "r", 0x0, "e", 0x0, "a"
	DCB	0x0, "d", 0x0, ".", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EI@JFKDHKHE@?$AA?$AN?$AA?6?$AAT?$AAr?$AAy?$AAi?$AAn?$AAg?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAl?$AAo?$AAs?$AAe?$AA?5?$AAd?$AAi?$AAs?$AAp?$AAa?$AAt?$AAc?$AAh?$AA?5?$AAt?$AAh?$AAr?$AAe?$AAa@| DCB 0xd
	DCB	0x0, 0xa, 0x0, "T", 0x0, "r", 0x0, "y", 0x0, "i", 0x0, "n"
	DCB	0x0, "g", 0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "c"
	DCB	0x0, "l", 0x0, "o", 0x0, "s", 0x0, "e", 0x0, " ", 0x0, "d"
	DCB	0x0, "i", 0x0, "s", 0x0, "p", 0x0, "a", 0x0, "t", 0x0, "c"
	DCB	0x0, "h", 0x0, " ", 0x0, "t", 0x0, "h", 0x0, "r", 0x0, "e"
	DCB	0x0, "a", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  0152c			 AREA	 |.text|, CODE, ARM

  0152c		 |StopDispatchThread| PROC

; 568  : {

  0152c		 |$LN15@StopDispat|
  0152c	e1a0c00d	 mov         r12, sp
  01530	e92d0001	 stmdb       sp!, {r0}
  01534	e92d5000	 stmdb       sp!, {r12, lr}
  01538	e24dd024	 sub         sp, sp, #0x24
  0153c		 |$M41549|

; 569  :     HANDLE              pThisThread = GetCurrentThread();

  0153c	eb000000	 bl          GetCurrentThread
  01540	e58d000c	 str         r0, [sp, #0xC]
  01544	e59d300c	 ldr         r3, [sp, #0xC]
  01548	e58d3000	 str         r3, [sp]

; 570  :     ULONG               priority256;
; 571  : 
; 572  :     /* If we have an interrupt handler thread, kill it */
; 573  :     if ( pSerialHead->pDispatchThread ) {

  0154c	e59d302c	 ldr         r3, [sp, #0x2C]
  01550	e2833040	 add         r3, r3, #0x40
  01554	e5933000	 ldr         r3, [r3]
  01558	e3530000	 cmp         r3, #0
  0155c	0a000050	 beq         |$LN2@StopDispat|

; 574  :         DEBUGMSG (ZONE_INIT, (TEXT("\r\nTrying to close dispatch thread\r\n")));

  01560	e59f319c	 ldr         r3, [pc, #0x19C]
  01564	e5933440	 ldr         r3, [r3, #0x440]
  01568	e3130001	 tst         r3, #1
  0156c	0a000004	 beq         |$LN5@StopDispat|
  01570	e59f0198	 ldr         r0, [pc, #0x198]
  01574	eb000000	 bl          NKDbgPrintfW
  01578	e3a03001	 mov         r3, #1
  0157c	e58d3010	 str         r3, [sp, #0x10]
  01580	ea000001	 b           |$LN6@StopDispat|
  01584		 |$LN5@StopDispat|
  01584	e3a03000	 mov         r3, #0
  01588	e58d3010	 str         r3, [sp, #0x10]
  0158c		 |$LN6@StopDispat|

; 575  : 
; 576  :         /* Set the priority of the dispatch thread to be equal to this one,
; 577  :          * so that it shuts down before we free its memory. If this routine
; 578  :          * has been called from SerialDllEntry then RxCharBuffer is set to
; 579  :          * NULL and the dispatch thread is already dead, so just skip the
; 580  :          * code which kills the thread.
; 581  :          */
; 582  :         priority256 = CeGetThreadPriority(pThisThread);

  0158c	e59d0000	 ldr         r0, [sp]
  01590	eb000000	 bl          CeGetThreadPriority
  01594	e58d0014	 str         r0, [sp, #0x14]
  01598	e59d3014	 ldr         r3, [sp, #0x14]
  0159c	e58d3004	 str         r3, [sp, #4]

; 583  :         CeSetThreadPriority(pSerialHead->pDispatchThread, priority256);

  015a0	e59d1004	 ldr         r1, [sp, #4]
  015a4	e59d302c	 ldr         r3, [sp, #0x2C]
  015a8	e2833040	 add         r3, r3, #0x40
  015ac	e5930000	 ldr         r0, [r3]
  015b0	eb000000	 bl          CeSetThreadPriority

; 584  : 
; 585  :         /* Signal the Dispatch thread to die.
; 586  :          */
; 587  :         pSerialHead->KillRxThread = 1;

  015b4	e59d302c	 ldr         r3, [sp, #0x2C]
  015b8	e2833094	 add         r3, r3, #0x94
  015bc	e5933000	 ldr         r3, [r3]
  015c0	e3832001	 orr         r2, r3, #1
  015c4	e59d302c	 ldr         r3, [sp, #0x2C]
  015c8	e2833094	 add         r3, r3, #0x94
  015cc	e5832000	 str         r2, [r3]

; 588  :         DEBUGMSG (ZONE_INIT, (TEXT("\r\nTrying to signal serial thread.\r\n")));

  015d0	e59f312c	 ldr         r3, [pc, #0x12C]
  015d4	e5933440	 ldr         r3, [r3, #0x440]
  015d8	e3130001	 tst         r3, #1
  015dc	0a000004	 beq         |$LN7@StopDispat|
  015e0	e59f0124	 ldr         r0, [pc, #0x124]
  015e4	eb000000	 bl          NKDbgPrintfW
  015e8	e3a03001	 mov         r3, #1
  015ec	e58d3018	 str         r3, [sp, #0x18]
  015f0	ea000001	 b           |$LN8@StopDispat|
  015f4		 |$LN7@StopDispat|
  015f4	e3a03000	 mov         r3, #0
  015f8	e58d3018	 str         r3, [sp, #0x18]
  015fc		 |$LN8@StopDispat|

; 589  :         SetEvent(pSerialHead->hSerialEvent);

  015fc	e59d302c	 ldr         r3, [sp, #0x2C]
  01600	e2833030	 add         r3, r3, #0x30
  01604	e5930000	 ldr         r0, [r3]
  01608	eb000000	 bl          SetEvent

; 590  : 
; 591  :         WaitForSingleObject(pSerialHead->hKillDispatchThread, 3000);

  0160c	e3a01c0b	 mov         r1, #0xB, 24
  01610	e38110b8	 orr         r1, r1, #0xB8
  01614	e59d302c	 ldr         r3, [sp, #0x2C]
  01618	e2833038	 add         r3, r3, #0x38
  0161c	e5930000	 ldr         r0, [r3]
  01620	eb000000	 bl          WaitForSingleObject

; 592  :         Sleep(10);

  01624	e3a0000a	 mov         r0, #0xA
  01628	eb000000	 bl          Sleep

; 593  : 
; 594  :         DEBUGMSG (ZONE_INIT, (TEXT("\r\nTrying to call CloseHandle\r\n")));

  0162c	e59f30d0	 ldr         r3, [pc, #0xD0]
  01630	e5933440	 ldr         r3, [r3, #0x440]
  01634	e3130001	 tst         r3, #1
  01638	0a000004	 beq         |$LN9@StopDispat|
  0163c	e59f00c4	 ldr         r0, [pc, #0xC4]
  01640	eb000000	 bl          NKDbgPrintfW
  01644	e3a03001	 mov         r3, #1
  01648	e58d301c	 str         r3, [sp, #0x1C]
  0164c	ea000001	 b           |$LN10@StopDispat|
  01650		 |$LN9@StopDispat|
  01650	e3a03000	 mov         r3, #0
  01654	e58d301c	 str         r3, [sp, #0x1C]
  01658		 |$LN10@StopDispat|

; 595  : 
; 596  :         CloseHandle(pSerialHead->pDispatchThread);

  01658	e59d302c	 ldr         r3, [sp, #0x2C]
  0165c	e2833040	 add         r3, r3, #0x40
  01660	e5930000	 ldr         r0, [r3]
  01664	eb000000	 bl          CloseHandle

; 597  :         pSerialHead->pDispatchThread = NULL;

  01668	e59d302c	 ldr         r3, [sp, #0x2C]
  0166c	e2832040	 add         r2, r3, #0x40
  01670	e3a03000	 mov         r3, #0
  01674	e5823000	 str         r3, [r2]

; 598  :         DEBUGMSG (ZONE_INIT, (TEXT("\r\nReturned from CloseHandle\r\n")));

  01678	e59f3084	 ldr         r3, [pc, #0x84]
  0167c	e5933440	 ldr         r3, [r3, #0x440]
  01680	e3130001	 tst         r3, #1
  01684	0a000004	 beq         |$LN11@StopDispat|
  01688	e59f0070	 ldr         r0, [pc, #0x70]
  0168c	eb000000	 bl          NKDbgPrintfW
  01690	e3a03001	 mov         r3, #1
  01694	e58d3020	 str         r3, [sp, #0x20]
  01698	ea000001	 b           |$LN12@StopDispat|
  0169c		 |$LN11@StopDispat|
  0169c	e3a03000	 mov         r3, #0
  016a0	e58d3020	 str         r3, [sp, #0x20]
  016a4		 |$LN12@StopDispat|
  016a4		 |$LN2@StopDispat|

; 599  :     }
; 600  : 
; 601  :     if ( pSerialHead->pHWObj ) {

  016a4	e59d302c	 ldr         r3, [sp, #0x2C]
  016a8	e2833028	 add         r3, r3, #0x28
  016ac	e5933000	 ldr         r3, [r3]
  016b0	e3530000	 cmp         r3, #0
  016b4	0a00000b	 beq         |$LN1@StopDispat|

; 602  :         /* Ack any remaining interrupts and unregister the event from the
; 603  :          * logical interrupt.
; 604  :          */
; 605  :         InterruptDone(pSerialHead->pHWObj->dwIntID);

  016b8	e59d302c	 ldr         r3, [sp, #0x2C]
  016bc	e2833028	 add         r3, r3, #0x28
  016c0	e5933000	 ldr         r3, [r3]
  016c4	e2833004	 add         r3, r3, #4
  016c8	e5930000	 ldr         r0, [r3]
  016cc	eb000000	 bl          InterruptDone

; 606  :         InterruptDisable(pSerialHead->pHWObj->dwIntID);

  016d0	e59d302c	 ldr         r3, [sp, #0x2C]
  016d4	e2833028	 add         r3, r3, #0x28
  016d8	e5933000	 ldr         r3, [r3]
  016dc	e2833004	 add         r3, r3, #4
  016e0	e5930000	 ldr         r0, [r3]
  016e4	eb000000	 bl          InterruptDisable
  016e8		 |$LN1@StopDispat|

; 607  :     }
; 608  : 
; 609  :     return(TRUE);

  016e8	e3a03001	 mov         r3, #1
  016ec	e58d3008	 str         r3, [sp, #8]

; 610  : }

  016f0	e59d0008	 ldr         r0, [sp, #8]
  016f4	e28dd024	 add         sp, sp, #0x24
  016f8	e89d6000	 ldmia       sp, {sp, lr}
  016fc	e12fff1e	 bx          lr
  01700		 |$LN16@StopDispat|
  01700		 |$LN17@StopDispat|
  01700	00000000	 DCD         |??_C@_1DM@NEFLPBFN@?$AA?$AN?$AA?6?$AAR?$AAe?$AAt?$AAu?$AAr?$AAn?$AAe?$AAd?$AA?5?$AAf?$AAr?$AAo?$AAm?$AA?5?$AAC?$AAl?$AAo?$AAs?$AAe?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AA?$AN?$AA?6?$AA?$AA@|
  01704		 |$LN18@StopDispat|
  01704	00000000	 DCD         |dpCurSettings|
  01708		 |$LN19@StopDispat|
  01708	00000000	 DCD         |??_C@_1DO@BPPHAKCP@?$AA?$AN?$AA?6?$AAT?$AAr?$AAy?$AAi?$AAn?$AAg?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAC?$AAl?$AAo?$AAs?$AAe?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AA?$AN?$AA?6?$AA?$AA@|
  0170c		 |$LN20@StopDispat|
  0170c	00000000	 DCD         |??_C@_1EI@FHNFOMPC@?$AA?$AN?$AA?6?$AAT?$AAr?$AAy?$AAi?$AAn?$AAg?$AA?5?$AAt?$AAo?$AA?5?$AAs?$AAi?$AAg?$AAn?$AAa?$AAl?$AA?5?$AAs?$AAe?$AAr?$AAi?$AAa?$AAl?$AA?5?$AAt?$AAh?$AAr?$AAe?$AAa?$AAd@|
  01710		 |$LN21@StopDispat|
  01710	00000000	 DCD         |??_C@_1EI@JFKDHKHE@?$AA?$AN?$AA?6?$AAT?$AAr?$AAy?$AAi?$AAn?$AAg?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAl?$AAo?$AAs?$AAe?$AA?5?$AAd?$AAi?$AAs?$AAp?$AAa?$AAt?$AAc?$AAh?$AA?5?$AAt?$AAh?$AAr?$AAe?$AAa@|
  01714		 |$M41550|

			 ENDP  ; |StopDispatchThread|

; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T41564| DCD	|$LN5@GetCurrent|
	DCD	0x40000601
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |GetCurrentThread| PROC

; 351  : _inline HANDLE GetCurrentThread(void) {

  00000		 |$LN5@GetCurrent|
  00000	e24dd004	 sub         sp, sp, #4
  00004		 |$M41561|

; 352  : 	return ((HANDLE)(SH_CURTHREAD+SYS_HANDLE_BASE));

  00004	e3a03041	 mov         r3, #0x41
  00008	e58d3000	 str         r3, [sp]

; 353  : }

  0000c	e59d0000	 ldr         r0, [sp]
  00010	e28dd004	 add         sp, sp, #4
  00014	e12fff1e	 bx          lr
  00018		 |$M41562|

			 ENDP  ; |GetCurrentThread|

	EXPORT	|??_C@_1FE@DAKNODMA@?$AAI?$AAO?$AAC?$AAT?$AAL?$AA?3?$AAR?$AAT?$AAS?$AA_?$AAC?$AAO?$AAN?$AAT?$AAR?$AAO?$AAL?$AA_?$AAH?$AAA?$AAN?$AAD?$AAS?$AAH?$AAA?$AAK?$AAE?$AA?5?$AAS?$AAe?$AAt?$AAt@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FG@IDPAINNF@?$AAI?$AAO?$AAC?$AAT?$AAL?$AA?3?$AAR?$AAT?$AAS?$AA_?$AAC?$AAO?$AAN?$AAT?$AAR?$AAO?$AAL?$AA_?$AAH?$AAA?$AAN?$AAD?$AAS?$AAH?$AAA?$AAK?$AAE?$AA?5?$AAC?$AAl?$AAe?$AAa@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FE@MINNMIFE@?$AAI?$AAO?$AAC?$AAT?$AAL?$AA?3?$AAD?$AAT?$AAR?$AA_?$AAC?$AAO?$AAN?$AAT?$AAR?$AAO?$AAL?$AA_?$AAH?$AAA?$AAN?$AAD?$AAS?$AAH?$AAA?$AAK?$AAE?$AA?5?$AAS?$AAe?$AAt?$AAt@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FG@GEFMJHJN@?$AAI?$AAO?$AAC?$AAT?$AAL?$AA?3?$AAD?$AAT?$AAR?$AA_?$AAC?$AAO?$AAN?$AAT?$AAR?$AAO?$AAL?$AA_?$AAH?$AAA?$AAN?$AAD?$AAS?$AAH?$AAA?$AAK?$AAE?$AA?5?$AAC?$AAl?$AAe?$AAa@| [ DATA ] ; `string'
	EXPORT	|ApplyDCB|
	IMPORT	|memcpy|

  00030			 AREA	 |.pdata|, PDATA
|$T41580| DCD	|$LN37@ApplyDCB|
	DCD	0x40018204
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\serial\com_mdd2\mdd.c

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FE@DAKNODMA@?$AAI?$AAO?$AAC?$AAT?$AAL?$AA?3?$AAR?$AAT?$AAS?$AA_?$AAC?$AAO?$AAN?$AAT?$AAR?$AAO?$AAL?$AA_?$AAH?$AAA?$AAN?$AAD?$AAS?$AAH?$AAA?$AAK?$AAE?$AA?5?$AAS?$AAe?$AAt?$AAt@| DCB "I"
	DCB	0x0, "O", 0x0, "C", 0x0, "T", 0x0, "L", 0x0, ":", 0x0, "R"
	DCB	0x0, "T", 0x0, "S", 0x0, "_", 0x0, "C", 0x0, "O", 0x0, "N"
	DCB	0x0, "T", 0x0, "R", 0x0, "O", 0x0, "L", 0x0, "_", 0x0, "H"
	DCB	0x0, "A", 0x0, "N", 0x0, "D", 0x0, "S", 0x0, "H", 0x0, "A"
	DCB	0x0, "K", 0x0, "E", 0x0, " ", 0x0, "S", 0x0, "e", 0x0, "t"
	DCB	0x0, "t", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, " ", 0x0, "R"
	DCB	0x0, "T", 0x0, "S", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FG@IDPAINNF@?$AAI?$AAO?$AAC?$AAT?$AAL?$AA?3?$AAR?$AAT?$AAS?$AA_?$AAC?$AAO?$AAN?$AAT?$AAR?$AAO?$AAL?$AA_?$AAH?$AAA?$AAN?$AAD?$AAS?$AAH?$AAA?$AAK?$AAE?$AA?5?$AAC?$AAl?$AAe?$AAa@| DCB "I"
	DCB	0x0, "O", 0x0, "C", 0x0, "T", 0x0, "L", 0x0, ":", 0x0, "R"
	DCB	0x0, "T", 0x0, "S", 0x0, "_", 0x0, "C", 0x0, "O", 0x0, "N"
	DCB	0x0, "T", 0x0, "R", 0x0, "O", 0x0, "L", 0x0, "_", 0x0, "H"
	DCB	0x0, "A", 0x0, "N", 0x0, "D", 0x0, "S", 0x0, "H", 0x0, "A"
	DCB	0x0, "K", 0x0, "E", 0x0, " ", 0x0, "C", 0x0, "l", 0x0, "e"
	DCB	0x0, "a", 0x0, "r", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, " "
	DCB	0x0, "R", 0x0, "T", 0x0, "S", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FE@MINNMIFE@?$AAI?$AAO?$AAC?$AAT?$AAL?$AA?3?$AAD?$AAT?$AAR?$AA_?$AAC?$AAO?$AAN?$AAT?$AAR?$AAO?$AAL?$AA_?$AAH?$AAA?$AAN?$AAD?$AAS?$AAH?$AAA?$AAK?$AAE?$AA?5?$AAS?$AAe?$AAt?$AAt@| DCB "I"
	DCB	0x0, "O", 0x0, "C", 0x0, "T", 0x0, "L", 0x0, ":", 0x0, "D"
	DCB	0x0, "T", 0x0, "R", 0x0, "_", 0x0, "C", 0x0, "O", 0x0, "N"
	DCB	0x0, "T", 0x0, "R", 0x0, "O", 0x0, "L", 0x0, "_", 0x0, "H"
	DCB	0x0, "A", 0x0, "N", 0x0, "D", 0x0, "S", 0x0, "H", 0x0, "A"
	DCB	0x0, "K", 0x0, "E", 0x0, " ", 0x0, "S", 0x0, "e", 0x0, "t"
	DCB	0x0, "t", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, " ", 0x0, "D"
	DCB	0x0, "T", 0x0, "R", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FG@GEFMJHJN@?$AAI?$AAO?$AAC?$AAT?$AAL?$AA?3?$AAD?$AAT?$AAR?$AA_?$AAC?$AAO?$AAN?$AAT?$AAR?$AAO?$AAL?$AA_?$AAH?$AAA?$AAN?$AAD?$AAS?$AAH?$AAA?$AAK?$AAE?$AA?5?$AAC?$AAl?$AAe?$AAa@| DCB "I"
	DCB	0x0, "O", 0x0, "C", 0x0, "T", 0x0, "L", 0x0, ":", 0x0, "D"
	DCB	0x0, "T", 0x0, "R", 0x0, "_", 0x0, "C", 0x0, "O", 0x0, "N"
	DCB	0x0, "T", 0x0, "R", 0x0, "O", 0x0, "L", 0x0, "_", 0x0, "H"
	DCB	0x0, "A", 0x0, "N", 0x0, "D", 0x0, "S", 0x0, "H", 0x0, "A"
	DCB	0x0, "K", 0x0, "E", 0x0, " ", 0x0, "C", 0x0, "l", 0x0, "e"
	DCB	0x0, "a", 0x0, "r", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, " "
	DCB	0x0, "D", 0x0, "T", 0x0, "R", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Odtp

  01714			 AREA	 |.text|, CODE, ARM

  01714		 |ApplyDCB| PROC

; 622  : {

  01714		 |$LN37@ApplyDCB|
  01714	e1a0c00d	 mov         r12, sp
  01718	e92d0007	 stmdb       sp!, {r0 - r2}
  0171c	e92d5000	 stmdb       sp!, {r12, lr}
  01720	e24dd02c	 sub         sp, sp, #0x2C
  01724		 |$M41577|

; 623  :     PHWOBJ          pHWObj      = pSerialHead->pHWObj;

  01724	e59d3034	 ldr         r3, [sp, #0x34]
  01728	e2833028	 add         r3, r3, #0x28
  0172c	e5933000	 ldr         r3, [r3]
  01730	e58d3000	 str         r3, [sp]

; 624  : 
; 625  :     if (!(pDCB->XoffLim< pSerialHead->RxBufferInfo.Length &&
; 626  :             pDCB->XonLim< pSerialHead->RxBufferInfo.Length - pDCB->XoffLim )) {

  01734	e59d3038	 ldr         r3, [sp, #0x38]
  01738	e2833010	 add         r3, r3, #0x10
  0173c	e1d320b0	 ldrh        r2, [r3]
  01740	e59d3034	 ldr         r3, [sp, #0x34]
  01744	e28330a4	 add         r3, r3, #0xA4
  01748	e5933000	 ldr         r3, [r3]
  0174c	e1520003	 cmp         r2, r3
  01750	2a00000b	 bcs         |$LN23@ApplyDCB|
  01754	e59d3038	 ldr         r3, [sp, #0x38]
  01758	e283300e	 add         r3, r3, #0xE
  0175c	e1d300b0	 ldrh        r0, [r3]
  01760	e59d3034	 ldr         r3, [sp, #0x34]
  01764	e28310a4	 add         r1, r3, #0xA4
  01768	e59d3038	 ldr         r3, [sp, #0x38]
  0176c	e2833010	 add         r3, r3, #0x10
  01770	e1d320b0	 ldrh        r2, [r3]
  01774	e5913000	 ldr         r3, [r1]
  01778	e0433002	 sub         r3, r3, r2
  0177c	e1500003	 cmp         r0, r3
  01780	3a000002	 bcc         |$LN24@ApplyDCB|
  01784		 |$LN23@ApplyDCB|

; 627  :         return FALSE;

  01784	e3a03000	 mov         r3, #0
  01788	e58d3004	 str         r3, [sp, #4]
  0178c	ea000159	 b           |$LN25@ApplyDCB|
  01790		 |$LN24@ApplyDCB|

; 628  :     }
; 629  :     
; 630  :     if (pDCB->fOutX || pDCB->fInX ) {

  01790	e59d3038	 ldr         r3, [sp, #0x38]
  01794	e2833008	 add         r3, r3, #8
  01798	e5933000	 ldr         r3, [r3]
  0179c	e3130c01	 tst         r3, #1, 24
  017a0	1a000004	 bne         |$LN21@ApplyDCB|
  017a4	e59d3038	 ldr         r3, [sp, #0x38]
  017a8	e2833008	 add         r3, r3, #8
  017ac	e5933000	 ldr         r3, [r3]
  017b0	e3130c02	 tst         r3, #2, 24
  017b4	0a00000a	 beq         |$LN22@ApplyDCB|
  017b8		 |$LN21@ApplyDCB|

; 631  :         if (pDCB->XonChar == pDCB->XoffChar)

  017b8	e59d3038	 ldr         r3, [sp, #0x38]
  017bc	e2833015	 add         r3, r3, #0x15
  017c0	e1d320d0	 ldrsb       r2, [r3]
  017c4	e59d3038	 ldr         r3, [sp, #0x38]
  017c8	e2833016	 add         r3, r3, #0x16
  017cc	e1d330d0	 ldrsb       r3, [r3]
  017d0	e1520003	 cmp         r2, r3
  017d4	1a000002	 bne         |$LN20@ApplyDCB|

; 632  :             return FALSE;

  017d8	e3a03000	 mov         r3, #0
  017dc	e58d3004	 str         r3, [sp, #4]
  017e0	ea000144	 b           |$LN25@ApplyDCB|
  017e4		 |$LN20@ApplyDCB|
  017e4		 |$LN22@ApplyDCB|

; 633  :     } 
; 634  : 
; 635  :     if ( !pHWObj->pFuncTbl->HWSetDCB(pSerialHead->pHWHead,
; 636  :                                      pDCB) ) {

  017e4	e59d1038	 ldr         r1, [sp, #0x38]
  017e8	e59d3034	 ldr         r3, [sp, #0x34]
  017ec	e283302c	 add         r3, r3, #0x2C
  017f0	e5930000	 ldr         r0, [r3]
  017f4	e59d3000	 ldr         r3, [sp]
  017f8	e2833008	 add         r3, r3, #8
  017fc	e5933000	 ldr         r3, [r3]
  01800	e283306c	 add         r3, r3, #0x6C
  01804	e5933000	 ldr         r3, [r3]
  01808	e1a0e00f	 mov         lr, pc
  0180c	e12fff13	 bx          r3
  01810	e58d0008	 str         r0, [sp, #8]
  01814	e59d3008	 ldr         r3, [sp, #8]
  01818	e3530000	 cmp         r3, #0
  0181c	1a000002	 bne         |$LN19@ApplyDCB|

; 637  :         return(FALSE);

  01820	e3a03000	 mov         r3, #0
  01824	e58d3004	 str         r3, [sp, #4]
  01828	ea000132	 b           |$LN25@ApplyDCB|
  0182c		 |$LN19@ApplyDCB|

; 638  :     }
; 639  : 
; 640  :     if ( !fOpen ) {

  0182c	e59d303c	 ldr         r3, [sp, #0x3C]
  01830	e3530000	 cmp         r3, #0
  01834	1a000002	 bne         |$LN18@ApplyDCB|

; 641  :         return(TRUE);

  01838	e3a03001	 mov         r3, #1
  0183c	e58d3004	 str         r3, [sp, #4]
  01840	ea00012c	 b           |$LN25@ApplyDCB|
  01844		 |$LN18@ApplyDCB|

; 642  :     }
; 643  :         // If PDD SetDCB was successful, save the supplied DCB and
; 644  :         // configure port to match these settings.
; 645  :     memcpy(&(pSerialHead->DCB), pDCB, sizeof(DCB));

  01844	e3a0201c	 mov         r2, #0x1C
  01848	e59d1038	 ldr         r1, [sp, #0x38]
  0184c	e59d3034	 ldr         r3, [sp, #0x34]
  01850	e2830060	 add         r0, r3, #0x60
  01854	eb000000	 bl          memcpy

; 646  : 
; 647  :     if ( pSerialHead->DCB.fDtrControl == DTR_CONTROL_DISABLE ) {

  01858	e59d3034	 ldr         r3, [sp, #0x34]
  0185c	e2833068	 add         r3, r3, #0x68
  01860	e5933000	 ldr         r3, [r3]
  01864	e1a03d03	 mov         r3, r3, lsl #26
  01868	e1b03f23	 movs        r3, r3, lsr #30
  0186c	1a00000a	 bne         |$LN17@ApplyDCB|

; 648  :         pHWObj->pFuncTbl->HWClearDTR(pSerialHead->pHWHead);

  01870	e59d3034	 ldr         r3, [sp, #0x34]
  01874	e283302c	 add         r3, r3, #0x2C
  01878	e5930000	 ldr         r0, [r3]
  0187c	e59d3000	 ldr         r3, [sp]
  01880	e2833008	 add         r3, r3, #8
  01884	e5933000	 ldr         r3, [r3]
  01888	e2833034	 add         r3, r3, #0x34
  0188c	e5933000	 ldr         r3, [r3]
  01890	e1a0e00f	 mov         lr, pc
  01894	e12fff13	 bx          r3
  01898	ea000010	 b           |$LN16@ApplyDCB|
  0189c		 |$LN17@ApplyDCB|

; 649  :     } else if ( pSerialHead->DCB.fDtrControl == DTR_CONTROL_ENABLE ) {

  0189c	e59d3034	 ldr         r3, [sp, #0x34]
  018a0	e2833068	 add         r3, r3, #0x68
  018a4	e5933000	 ldr         r3, [r3]
  018a8	e1a03d03	 mov         r3, r3, lsl #26
  018ac	e1a03f23	 mov         r3, r3, lsr #30
  018b0	e3530001	 cmp         r3, #1
  018b4	1a000009	 bne         |$LN15@ApplyDCB|

; 650  :         pHWObj->pFuncTbl->HWSetDTR(pSerialHead->pHWHead);

  018b8	e59d3034	 ldr         r3, [sp, #0x34]
  018bc	e283302c	 add         r3, r3, #0x2C
  018c0	e5930000	 ldr         r0, [r3]
  018c4	e59d3000	 ldr         r3, [sp]
  018c8	e2833008	 add         r3, r3, #8
  018cc	e5933000	 ldr         r3, [r3]
  018d0	e2833038	 add         r3, r3, #0x38
  018d4	e5933000	 ldr         r3, [r3]
  018d8	e1a0e00f	 mov         lr, pc
  018dc	e12fff13	 bx          r3
  018e0		 |$LN15@ApplyDCB|
  018e0		 |$LN16@ApplyDCB|

; 651  :     }
; 652  : 
; 653  :     if ( pSerialHead->DCB.fRtsControl == RTS_CONTROL_DISABLE ) {

  018e0	e59d3034	 ldr         r3, [sp, #0x34]
  018e4	e2833068	 add         r3, r3, #0x68
  018e8	e5933000	 ldr         r3, [r3]
  018ec	e1a03903	 mov         r3, r3, lsl #18
  018f0	e1b03f23	 movs        r3, r3, lsr #30
  018f4	1a00000a	 bne         |$LN14@ApplyDCB|

; 654  :         pHWObj->pFuncTbl->HWClearRTS(pSerialHead->pHWHead);

  018f8	e59d3034	 ldr         r3, [sp, #0x34]
  018fc	e283302c	 add         r3, r3, #0x2C
  01900	e5930000	 ldr         r0, [r3]
  01904	e59d3000	 ldr         r3, [sp]
  01908	e2833008	 add         r3, r3, #8
  0190c	e5933000	 ldr         r3, [r3]
  01910	e283303c	 add         r3, r3, #0x3C
  01914	e5933000	 ldr         r3, [r3]
  01918	e1a0e00f	 mov         lr, pc
  0191c	e12fff13	 bx          r3
  01920	ea000010	 b           |$LN13@ApplyDCB|
  01924		 |$LN14@ApplyDCB|

; 655  :     } else if ( pSerialHead->DCB.fRtsControl == RTS_CONTROL_ENABLE ) {

  01924	e59d3034	 ldr         r3, [sp, #0x34]
  01928	e2833068	 add         r3, r3, #0x68
  0192c	e5933000	 ldr         r3, [r3]
  01930	e1a03903	 mov         r3, r3, lsl #18
  01934	e1a03f23	 mov         r3, r3, lsr #30
  01938	e3530001	 cmp         r3, #1
  0193c	1a000009	 bne         |$LN12@ApplyDCB|

; 656  :         pHWObj->pFuncTbl->HWSetRTS(pSerialHead->pHWHead);

  01940	e59d3034	 ldr         r3, [sp, #0x34]
  01944	e283302c	 add         r3, r3, #0x2C
  01948	e5930000	 ldr         r0, [r3]
  0194c	e59d3000	 ldr         r3, [sp]
  01950	e2833008	 add         r3, r3, #8
  01954	e5933000	 ldr         r3, [r3]
  01958	e2833040	 add         r3, r3, #0x40
  0195c	e5933000	 ldr         r3, [r3]
  01960	e1a0e00f	 mov         lr, pc
  01964	e12fff13	 bx          r3
  01968		 |$LN12@ApplyDCB|
  01968		 |$LN13@ApplyDCB|

; 657  :     }
; 658  : 
; 659  :     if ( pSerialHead->DCB.fDtrControl == DTR_CONTROL_HANDSHAKE ) {

  01968	e59d3034	 ldr         r3, [sp, #0x34]
  0196c	e2833068	 add         r3, r3, #0x68
  01970	e5933000	 ldr         r3, [r3]
  01974	e1a03d03	 mov         r3, r3, lsl #26
  01978	e1a03f23	 mov         r3, r3, lsr #30
  0197c	e3530002	 cmp         r3, #2
  01980	1a00005c	 bne         |$LN11@ApplyDCB|

; 660  :         if ( (!pSerialHead->DtrFlow) && IsIncreasedToFlowOff(pSerialHead)) {

  01984	e59d3034	 ldr         r3, [sp, #0x34]
  01988	e2833094	 add         r3, r3, #0x94
  0198c	e5933000	 ldr         r3, [r3]
  01990	e3130010	 tst         r3, #0x10
  01994	1a00002d	 bne         |$LN10@ApplyDCB|
  01998	e59d0034	 ldr         r0, [sp, #0x34]
  0199c	eb000000	 bl          RxBytesAvail
  019a0	e58d000c	 str         r0, [sp, #0xC]
  019a4	e59d3034	 ldr         r3, [sp, #0x34]
  019a8	e2833070	 add         r3, r3, #0x70
  019ac	e1d310b0	 ldrh        r1, [r3]
  019b0	e59d3034	 ldr         r3, [sp, #0x34]
  019b4	e28330a4	 add         r3, r3, #0xA4
  019b8	e5932000	 ldr         r2, [r3]
  019bc	e59d300c	 ldr         r3, [sp, #0xC]
  019c0	e0423003	 sub         r3, r2, r3
  019c4	e1510003	 cmp         r1, r3
  019c8	3a000020	 bcc         |$LN10@ApplyDCB|

; 661  :             DEBUGMSG (ZONE_READ|ZONE_FLOW,
; 662  :                       (TEXT("IOCTL:DTR_CONTROL_HANDSHAKE Clearing DTR\r\n")));

  019cc	e59f3338	 ldr         r3, [pc, #0x338]
  019d0	e5933440	 ldr         r3, [r3, #0x440]
  019d4	e2032004	 and         r2, r3, #4
  019d8	e59f332c	 ldr         r3, [pc, #0x32C]
  019dc	e5933440	 ldr         r3, [r3, #0x440]
  019e0	e2033c02	 and         r3, r3, #2, 24
  019e4	e1923003	 orrs        r3, r2, r3
  019e8	0a000004	 beq         |$LN27@ApplyDCB|
  019ec	e59f0324	 ldr         r0, [pc, #0x324]
  019f0	eb000000	 bl          NKDbgPrintfW
  019f4	e3a03001	 mov         r3, #1
  019f8	e58d3010	 str         r3, [sp, #0x10]
  019fc	ea000001	 b           |$LN28@ApplyDCB|
  01a00		 |$LN27@ApplyDCB|
  01a00	e3a03000	 mov         r3, #0
  01a04	e58d3010	 str         r3, [sp, #0x10]
  01a08		 |$LN28@ApplyDCB|

; 663  :             pSerialHead->DtrFlow = 1;

  01a08	e59d3034	 ldr         r3, [sp, #0x34]
  01a0c	e2833094	 add         r3, r3, #0x94
  01a10	e5933000	 ldr         r3, [r3]
  01a14	e3832010	 orr         r2, r3, #0x10
  01a18	e59d3034	 ldr         r3, [sp, #0x34]
  01a1c	e2833094	 add         r3, r3, #0x94
  01a20	e5832000	 str         r2, [r3]

; 664  :             pHWObj->pFuncTbl->HWClearDTR(pSerialHead->pHWHead);

  01a24	e59d3034	 ldr         r3, [sp, #0x34]
  01a28	e283302c	 add         r3, r3, #0x2C
  01a2c	e5930000	 ldr         r0, [r3]
  01a30	e59d3000	 ldr         r3, [sp]
  01a34	e2833008	 add         r3, r3, #8
  01a38	e5933000	 ldr         r3, [r3]
  01a3c	e2833034	 add         r3, r3, #0x34
  01a40	e5933000	 ldr         r3, [r3]
  01a44	e1a0e00f	 mov         lr, pc
  01a48	e12fff13	 bx          r3
  01a4c	ea000029	 b           |$LN9@ApplyDCB|
  01a50		 |$LN10@ApplyDCB|

; 665  :         } else if (IsReducedToFlowOn(pSerialHead)){

  01a50	e59d0034	 ldr         r0, [sp, #0x34]
  01a54	eb000000	 bl          RxBytesAvail
  01a58	e58d0014	 str         r0, [sp, #0x14]
  01a5c	e59d3034	 ldr         r3, [sp, #0x34]
  01a60	e283306e	 add         r3, r3, #0x6E
  01a64	e1d320b0	 ldrh        r2, [r3]
  01a68	e59d3014	 ldr         r3, [sp, #0x14]
  01a6c	e1520003	 cmp         r2, r3
  01a70	3a000020	 bcc         |$LN8@ApplyDCB|

; 666  :             DEBUGMSG (ZONE_READ|ZONE_FLOW,
; 667  :                       (TEXT("IOCTL:DTR_CONTROL_HANDSHAKE Setting DTR\r\n")));

  01a74	e59f3290	 ldr         r3, [pc, #0x290]
  01a78	e5933440	 ldr         r3, [r3, #0x440]
  01a7c	e2032004	 and         r2, r3, #4
  01a80	e59f3284	 ldr         r3, [pc, #0x284]
  01a84	e5933440	 ldr         r3, [r3, #0x440]
  01a88	e2033c02	 and         r3, r3, #2, 24
  01a8c	e1923003	 orrs        r3, r2, r3
  01a90	0a000004	 beq         |$LN29@ApplyDCB|
  01a94	e59f0278	 ldr         r0, [pc, #0x278]
  01a98	eb000000	 bl          NKDbgPrintfW
  01a9c	e3a03001	 mov         r3, #1
  01aa0	e58d3018	 str         r3, [sp, #0x18]
  01aa4	ea000001	 b           |$LN30@ApplyDCB|
  01aa8		 |$LN29@ApplyDCB|
  01aa8	e3a03000	 mov         r3, #0
  01aac	e58d3018	 str         r3, [sp, #0x18]
  01ab0		 |$LN30@ApplyDCB|

; 668  :             pSerialHead->DtrFlow = 0;

  01ab0	e59d3034	 ldr         r3, [sp, #0x34]
  01ab4	e2833094	 add         r3, r3, #0x94
  01ab8	e5932000	 ldr         r2, [r3]
  01abc	e3e03010	 mvn         r3, #0x10
  01ac0	e0022003	 and         r2, r2, r3
  01ac4	e59d3034	 ldr         r3, [sp, #0x34]
  01ac8	e2833094	 add         r3, r3, #0x94
  01acc	e5832000	 str         r2, [r3]

; 669  :             pHWObj->pFuncTbl->HWSetDTR(pSerialHead->pHWHead);

  01ad0	e59d3034	 ldr         r3, [sp, #0x34]
  01ad4	e283302c	 add         r3, r3, #0x2C
  01ad8	e5930000	 ldr         r0, [r3]
  01adc	e59d3000	 ldr         r3, [sp]
  01ae0	e2833008	 add         r3, r3, #8
  01ae4	e5933000	 ldr         r3, [r3]
  01ae8	e2833038	 add         r3, r3, #0x38
  01aec	e5933000	 ldr         r3, [r3]
  01af0	e1a0e00f	 mov         lr, pc
  01af4	e12fff13	 bx          r3
  01af8		 |$LN8@ApplyDCB|
  01af8		 |$LN9@ApplyDCB|
  01af8		 |$LN11@ApplyDCB|

; 670  :         }
; 671  :     }
; 672  :     if ( pSerialHead->DCB.fRtsControl == RTS_CONTROL_HANDSHAKE ) {

  01af8	e59d3034	 ldr         r3, [sp, #0x34]
  01afc	e2833068	 add         r3, r3, #0x68
  01b00	e5933000	 ldr         r3, [r3]
  01b04	e1a03903	 mov         r3, r3, lsl #18
  01b08	e1a03f23	 mov         r3, r3, lsr #30
  01b0c	e3530002	 cmp         r3, #2
  01b10	1a00005c	 bne         |$LN7@ApplyDCB|

; 673  :         if ( (!pSerialHead->RtsFlow) && IsIncreasedToFlowOff(pSerialHead)){

  01b14	e59d3034	 ldr         r3, [sp, #0x34]
  01b18	e2833094	 add         r3, r3, #0x94
  01b1c	e5933000	 ldr         r3, [r3]
  01b20	e3130020	 tst         r3, #0x20
  01b24	1a00002d	 bne         |$LN6@ApplyDCB|
  01b28	e59d0034	 ldr         r0, [sp, #0x34]
  01b2c	eb000000	 bl          RxBytesAvail
  01b30	e58d001c	 str         r0, [sp, #0x1C]
  01b34	e59d3034	 ldr         r3, [sp, #0x34]
  01b38	e2833070	 add         r3, r3, #0x70
  01b3c	e1d310b0	 ldrh        r1, [r3]
  01b40	e59d3034	 ldr         r3, [sp, #0x34]
  01b44	e28330a4	 add         r3, r3, #0xA4
  01b48	e5932000	 ldr         r2, [r3]
  01b4c	e59d301c	 ldr         r3, [sp, #0x1C]
  01b50	e0423003	 sub         r3, r2, r3
  01b54	e1510003	 cmp         r1, r3
  01b58	3a000020	 bcc         |$LN6@ApplyDCB|

; 674  :             DEBUGMSG (ZONE_READ|ZONE_FLOW,
; 675  :                       (TEXT("IOCTL:RTS_CONTROL_HANDSHAKE Clearing RTS\r\n")));

  01b5c	e59f31a8	 ldr         r3, [pc, #0x1A8]
  01b60	e5933440	 ldr         r3, [r3, #0x440]
  01b64	e2032004	 and         r2, r3, #4
  01b68	e59f319c	 ldr         r3, [pc, #0x19C]
  01b6c	e5933440	 ldr         r3, [r3, #0x440]
  01b70	e2033c02	 and         r3, r3, #2, 24
  01b74	e1923003	 orrs        r3, r2, r3
  01b78	0a000004	 beq         |$LN31@ApplyDCB|
  01b7c	e59f018c	 ldr         r0, [pc, #0x18C]
  01b80	eb000000	 bl          NKDbgPrintfW
  01b84	e3a03001	 mov         r3, #1
  01b88	e58d3020	 str         r3, [sp, #0x20]
  01b8c	ea000001	 b           |$LN32@ApplyDCB|
  01b90		 |$LN31@ApplyDCB|
  01b90	e3a03000	 mov         r3, #0
  01b94	e58d3020	 str         r3, [sp, #0x20]
  01b98		 |$LN32@ApplyDCB|

; 676  :             pSerialHead->RtsFlow = 1;

  01b98	e59d3034	 ldr         r3, [sp, #0x34]
  01b9c	e2833094	 add         r3, r3, #0x94
  01ba0	e5933000	 ldr         r3, [r3]
  01ba4	e3832020	 orr         r2, r3, #0x20
  01ba8	e59d3034	 ldr         r3, [sp, #0x34]
  01bac	e2833094	 add         r3, r3, #0x94
  01bb0	e5832000	 str         r2, [r3]

; 677  :             pHWObj->pFuncTbl->HWClearRTS(pSerialHead->pHWHead);

  01bb4	e59d3034	 ldr         r3, [sp, #0x34]
  01bb8	e283302c	 add         r3, r3, #0x2C
  01bbc	e5930000	 ldr         r0, [r3]
  01bc0	e59d3000	 ldr         r3, [sp]
  01bc4	e2833008	 add         r3, r3, #8
  01bc8	e5933000	 ldr         r3, [r3]
  01bcc	e283303c	 add         r3, r3, #0x3C
  01bd0	e5933000	 ldr         r3, [r3]
  01bd4	e1a0e00f	 mov         lr, pc
  01bd8	e12fff13	 bx          r3
  01bdc	ea000029	 b           |$LN5@ApplyDCB|
  01be0		 |$LN6@ApplyDCB|

; 678  :         } else if (IsReducedToFlowOn(pSerialHead)) {

  01be0	e59d0034	 ldr         r0, [sp, #0x34]
  01be4	eb000000	 bl          RxBytesAvail
  01be8	e58d0024	 str         r0, [sp, #0x24]
  01bec	e59d3034	 ldr         r3, [sp, #0x34]
  01bf0	e283306e	 add         r3, r3, #0x6E
  01bf4	e1d320b0	 ldrh        r2, [r3]
  01bf8	e59d3024	 ldr         r3, [sp, #0x24]
  01bfc	e1520003	 cmp         r2, r3
  01c00	3a000020	 bcc         |$LN4@ApplyDCB|

; 679  :             DEBUGMSG (ZONE_READ|ZONE_FLOW,
; 680  :                       (TEXT("IOCTL:RTS_CONTROL_HANDSHAKE Setting RTS\r\n")));

  01c04	e59f3100	 ldr         r3, [pc, #0x100]
  01c08	e5933440	 ldr         r3, [r3, #0x440]
  01c0c	e2032004	 and         r2, r3, #4
  01c10	e59f30f4	 ldr         r3, [pc, #0xF4]
  01c14	e5933440	 ldr         r3, [r3, #0x440]
  01c18	e2033c02	 and         r3, r3, #2, 24
  01c1c	e1923003	 orrs        r3, r2, r3
  01c20	0a000004	 beq         |$LN33@ApplyDCB|
  01c24	e59f00dc	 ldr         r0, [pc, #0xDC]
  01c28	eb000000	 bl          NKDbgPrintfW
  01c2c	e3a03001	 mov         r3, #1
  01c30	e58d3028	 str         r3, [sp, #0x28]
  01c34	ea000001	 b           |$LN34@ApplyDCB|
  01c38		 |$LN33@ApplyDCB|
  01c38	e3a03000	 mov         r3, #0
  01c3c	e58d3028	 str         r3, [sp, #0x28]
  01c40		 |$LN34@ApplyDCB|

; 681  :             pSerialHead->RtsFlow = 0;

  01c40	e59d3034	 ldr         r3, [sp, #0x34]
  01c44	e2833094	 add         r3, r3, #0x94
  01c48	e5932000	 ldr         r2, [r3]
  01c4c	e3e03020	 mvn         r3, #0x20
  01c50	e0022003	 and         r2, r2, r3
  01c54	e59d3034	 ldr         r3, [sp, #0x34]
  01c58	e2833094	 add         r3, r3, #0x94
  01c5c	e5832000	 str         r2, [r3]

; 682  :             pHWObj->pFuncTbl->HWSetRTS(pSerialHead->pHWHead);

  01c60	e59d3034	 ldr         r3, [sp, #0x34]
  01c64	e283302c	 add         r3, r3, #0x2C
  01c68	e5930000	 ldr         r0, [r3]
  01c6c	e59d3000	 ldr         r3, [sp]
  01c70	e2833008	 add         r3, r3, #8
  01c74	e5933000	 ldr         r3, [r3]
  01c78	e2833040	 add         r3, r3, #0x40
  01c7c	e5933000	 ldr         r3, [r3]
  01c80	e1a0e00f	 mov         lr, pc
  01c84	e12fff13	 bx          r3
  01c88		 |$LN4@ApplyDCB|
  01c88		 |$LN5@ApplyDCB|
  01c88		 |$LN7@ApplyDCB|

; 683  :         }
; 684  :     }
; 685  : 
; 686  :     if ( pSerialHead->DCB.fOutX || pSerialHead->DCB.fInX ) {

  01c88	e59d3034	 ldr         r3, [sp, #0x34]
  01c8c	e2833068	 add         r3, r3, #0x68
  01c90	e5933000	 ldr         r3, [r3]
  01c94	e3130c01	 tst         r3, #1, 24
  01c98	1a000004	 bne         |$LN2@ApplyDCB|
  01c9c	e59d3034	 ldr         r3, [sp, #0x34]
  01ca0	e2833068	 add         r3, r3, #0x68
  01ca4	e5933000	 ldr         r3, [r3]
  01ca8	e3130c02	 tst         r3, #2, 24
  01cac	0a000007	 beq         |$LN3@ApplyDCB|
  01cb0		 |$LN2@ApplyDCB|

; 687  :         pSerialHead->XFlow = 1;

  01cb0	e59d3034	 ldr         r3, [sp, #0x34]
  01cb4	e2833094	 add         r3, r3, #0x94
  01cb8	e5933000	 ldr         r3, [r3]
  01cbc	e3832002	 orr         r2, r3, #2
  01cc0	e59d3034	 ldr         r3, [sp, #0x34]
  01cc4	e2833094	 add         r3, r3, #0x94
  01cc8	e5832000	 str         r2, [r3]

; 688  :     } else {

  01ccc	ea000007	 b           |$LN1@ApplyDCB|
  01cd0		 |$LN3@ApplyDCB|

; 689  :         pSerialHead->XFlow = 0;

  01cd0	e59d3034	 ldr         r3, [sp, #0x34]
  01cd4	e2833094	 add         r3, r3, #0x94
  01cd8	e5932000	 ldr         r2, [r3]
  01cdc	e3e03002	 mvn         r3, #2
  01ce0	e0022003	 and         r2, r2, r3
  01ce4	e59d3034	 ldr         r3, [sp, #0x34]
  01ce8	e2833094	 add         r3, r3, #0x94
  01cec	e5832000	 str         r2, [r3]
  01cf0		 |$LN1@ApplyDCB|

; 690  :     }
; 691  :     return(TRUE);

  01cf0	e3a03001	 mov         r3, #1
  01cf4	e58d3004	 str         r3, [sp, #4]
  01cf8		 |$LN25@ApplyDCB|

; 692  : }

  01cf8	e59d0004	 ldr         r0, [sp, #4]
  01cfc	e28dd02c	 add         sp, sp, #0x2C
  01d00	e89d6000	 ldmia       sp, {sp, lr}
  01d04	e12fff1e	 bx          lr
  01d08		 |$LN38@ApplyDCB|
  01d08		 |$LN39@ApplyDCB|
  01d08	00000000	 DCD         |??_C@_1FE@DAKNODMA@?$AAI?$AAO?$AAC?$AAT?$AAL?$AA?3?$AAR?$AAT?$AAS?$AA_?$AAC?$AAO?$AAN?$AAT?$AAR?$AAO?$AAL?$AA_?$AAH?$AAA?$AAN?$AAD?$AAS?$AAH?$AAA?$AAK?$AAE?$AA?5?$AAS?$AAe?$AAt?$AAt@|
  01d0c		 |$LN40@ApplyDCB|
  01d0c	00000000	 DCD         |dpCurSettings|
  01d10		 |$LN41@ApplyDCB|
  01d10	00000000	 DCD         |??_C@_1FG@IDPAINNF@?$AAI?$AAO?$AAC?$AAT?$AAL?$AA?3?$AAR?$AAT?$AAS?$AA_?$AAC?$AAO?$AAN?$AAT?$AAR?$AAO?$AAL?$AA_?$AAH?$AAA?$AAN?$AAD?$AAS?$AAH?$AAA?$AAK?$AAE?$AA?5?$AAC?$AAl?$AAe?$AAa@|
  01d14		 |$LN42@ApplyDCB|
  01d14	00000000	 DCD         |??_C@_1FE@MINNMIFE@?$AAI?$AAO?$AAC?$AAT?$AAL?$AA?3?$AAD?$AAT?$AAR?$AA_?$AAC?$AAO?$AAN?$AAT?$AAR?$AAO?$AAL?$AA_?$AAH?$AAA?$AAN?$AAD?$AAS?$AAH?$AAA?$AAK?$AAE?$AA?5?$AAS?$AAe?$AAt?$AAt@|
  01d18		 |$LN43@ApplyDCB|
  01d18	00000000	 DCD         |??_C@_1FG@GEFMJHJN@?$AAI?$AAO?$AAC?$AAT?$AAL?$AA?3?$AAD?$AAT?$AAR?$AA_?$AAC?$AAO?$AAN?$AAT?$AAR?$AAO?$AAL?$AA_?$AAH?$AAA?$AAN?$AAD?$AAS?$AAH?$AAA?$AAK?$AAE?$AA?5?$AAC?$AAl?$AAe?$AAa@|
  01d1c		 |$M41578|

			 ENDP  ; |ApplyDCB|

	EXPORT	|??_C@_1BI@NFEFLGML@?$AA?9?$AAC?$AAO?$AAM?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EI@FNCKFJMM@?$AAR?$AAx?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?5?$AAi?$AAn?$AAi?$AAt?$AA?8?$AAe?$AAd?$AA?5?$AAw?$AAi?$AAt?$AAh?$AA?5?$AAs?$AAt?$AAa?$AAr?$AAt?$AA?5?$AAa?$AAt?$AA?5?$AA?$CF@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CC@POKINGEF@?$AAR?$AAx?$AAH?$AAe?$AAa?$AAd?$AA?5?$AAi?$AAn?$AAi?$AAt?$AA?8?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GG@FCOIFIDD@?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAr?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AA?5?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?0@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DE@CLLKJMN@?$AAB?$AAa?$AAc?$AAk?$AA?5?$AAf?$AAr?$AAo?$AAm?$AA?5?$AAh?$AAa?$AAr?$AAd?$AAw?$AAa?$AAr?$AAe?$AA?5?$AAi?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GG@LFOFGOL@?$AAH?$AAa?$AAr?$AAd?$AAw?$AAa?$AAr?$AAe?$AA?5?$AAd?$AAo?$AAe?$AAs?$AAn?$AA?8?$AAt?$AA?5?$AAi?$AAn?$AAi?$AAt?$AA?5?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AAl?$AAy?$AA?0@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EA@DFMKFADA@?$AAA?$AAb?$AAo?$AAu?$AAt?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAH?$AAW?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CF?$AAs?$AA?0?$AA0?$AAx?$AA?$CF?$AAX?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FI@OHFMJBNJ@?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAi?$AAn?$AA?5?$AAG?$AAe?$AAt?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?0?$AA?5?$AAC?$AAO?$AAM?$AA_?$AAI?$AAn@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BM@EFMMMFDH@?$AAD?$AAe?$AAv?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$CF?$AAX?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GI@IGAGBKDE@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAP?$AAr?$AAi?$AAo?$AAr?$AAi?$AAt?$AAy?$AA2?$AA5?$AA6?$AA?5?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?0@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BI@BHLBGEOK@?$AAP?$AAr?$AAi?$AAo?$AAr?$AAi?$AAt?$AAy?$AA2?$AA5?$AA6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HA@FDKKDCHL@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AAv@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CC@KMPFMANC@?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FK@GNPHIAEF@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5?$AAd?$AAe?$AAv?$AAk?$AAe?$AAy?$AAp?$AAa?$AAt?$AAh?$AA?0?$AA?5?$AAC?$AAO?$AAM?$AA_?$AAI@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CC@OIKDCOFG@?$AAT?$AAr?$AAy?$AA?5?$AAt?$AAo?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5?$AA?$CF?$AAs?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|COM_Deinit|
	EXPORT	|??_C@_1FA@BECDDKGM@?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAe?$AAv?$AAe?$AAn?$AAt?$AA?0?$AA?5?$AAC?$AAO?$AAM?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?5?$AAf@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HG@FCOJGPAE@?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAm?$AAe?$AAm?$AAo?$AAr?$AAy?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAp?$AAS?$AAe?$AAr@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BI@GFHIOEJL@?$AA?$CL?$AAC?$AAO?$AAM?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|COM_Init|
	IMPORT	|GetSerialObject|
	IMPORT	|RegCloseKey|
	IMPORT	|RegQueryValueExW|
	IMPORT	|OpenDeviceKey|
	IMPORT	|CreateEventW|
	IMPORT	|InitializeCriticalSection|
	IMPORT	|memset|
	IMPORT	|LocalAlloc|

  00038			 AREA	 |.pdata|, PDATA
|$T41630| DCD	|$LN50@COM_Init|
	DCD	0x40024504

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BI@NFEFLGML@?$AA?9?$AAC?$AAO?$AAM?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "C", 0x0, "O", 0x0, "M", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EI@FNCKFJMM@?$AAR?$AAx?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?5?$AAi?$AAn?$AAi?$AAt?$AA?8?$AAe?$AAd?$AA?5?$AAw?$AAi?$AAt?$AAh?$AA?5?$AAs?$AAt?$AAa?$AAr?$AAt?$AA?5?$AAa?$AAt?$AA?5?$AA?$CF@| DCB "R"
	DCB	0x0, "x", 0x0, "B", 0x0, "u", 0x0, "f", 0x0, "f", 0x0, "e"
	DCB	0x0, "r", 0x0, " ", 0x0, "i", 0x0, "n", 0x0, "i", 0x0, "t"
	DCB	0x0, "'", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "w", 0x0, "i"
	DCB	0x0, "t", 0x0, "h", 0x0, " ", 0x0, "s", 0x0, "t", 0x0, "a"
	DCB	0x0, "r", 0x0, "t", 0x0, " ", 0x0, "a", 0x0, "t", 0x0, " "
	DCB	0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CC@POKINGEF@?$AAR?$AAx?$AAH?$AAe?$AAa?$AAd?$AA?5?$AAi?$AAn?$AAi?$AAt?$AA?8?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "R"
	DCB	0x0, "x", 0x0, "H", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, " "
	DCB	0x0, "i", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "'", 0x0, "e"
	DCB	0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GG@FCOIFIDD@?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAr?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AA?5?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?0@| DCB "E"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "a"
	DCB	0x0, "l", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t"
	DCB	0x0, "i", 0x0, "n", 0x0, "g", 0x0, " ", 0x0, "r", 0x0, "e"
	DCB	0x0, "c", 0x0, "e", 0x0, "i", 0x0, "v", 0x0, "e", 0x0, " "
	DCB	0x0, "b", 0x0, "u", 0x0, "f", 0x0, "f", 0x0, "e", 0x0, "r"
	DCB	0x0, ",", 0x0, " ", 0x0, "C", 0x0, "O", 0x0, "M", 0x0, "_"
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, " ", 0x0, "f"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, 0xa
	DCB	0x0, 0xd, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DE@CLLKJMN@?$AAB?$AAa?$AAc?$AAk?$AA?5?$AAf?$AAr?$AAo?$AAm?$AA?5?$AAh?$AAa?$AAr?$AAd?$AAw?$AAa?$AAr?$AAe?$AA?5?$AAi?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@| DCB "B"
	DCB	0x0, "a", 0x0, "c", 0x0, "k", 0x0, " ", 0x0, "f", 0x0, "r"
	DCB	0x0, "o", 0x0, "m", 0x0, " ", 0x0, "h", 0x0, "a", 0x0, "r"
	DCB	0x0, "d", 0x0, "w", 0x0, "a", 0x0, "r", 0x0, "e", 0x0, " "
	DCB	0x0, "i", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GG@LFOFGOL@?$AAH?$AAa?$AAr?$AAd?$AAw?$AAa?$AAr?$AAe?$AA?5?$AAd?$AAo?$AAe?$AAs?$AAn?$AA?8?$AAt?$AA?5?$AAi?$AAn?$AAi?$AAt?$AA?5?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AAl?$AAy?$AA?0@| DCB "H"
	DCB	0x0, "a", 0x0, "r", 0x0, "d", 0x0, "w", 0x0, "a", 0x0, "r"
	DCB	0x0, "e", 0x0, " ", 0x0, "d", 0x0, "o", 0x0, "e", 0x0, "s"
	DCB	0x0, "n", 0x0, "'", 0x0, "t", 0x0, " ", 0x0, "i", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, " ", 0x0, "c", 0x0, "o", 0x0, "r"
	DCB	0x0, "r", 0x0, "e", 0x0, "c", 0x0, "t", 0x0, "l", 0x0, "y"
	DCB	0x0, ",", 0x0, " ", 0x0, "C", 0x0, "O", 0x0, "M", 0x0, "_"
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, " ", 0x0, "f"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@DFMKFADA@?$AAA?$AAb?$AAo?$AAu?$AAt?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAH?$AAW?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CF?$AAs?$AA?0?$AA0?$AAx?$AA?$CF?$AAX?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "A"
	DCB	0x0, "b", 0x0, "o", 0x0, "u", 0x0, "t", 0x0, " ", 0x0, "t"
	DCB	0x0, "o", 0x0, " ", 0x0, "c", 0x0, "a", 0x0, "l", 0x0, "l"
	DCB	0x0, " ", 0x0, "H", 0x0, "W", 0x0, "I", 0x0, "n", 0x0, "i"
	DCB	0x0, "t", 0x0, "(", 0x0, "%", 0x0, "s", 0x0, ",", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "X", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FI@OHFMJBNJ@?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAi?$AAn?$AA?5?$AAG?$AAe?$AAt?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?0?$AA?5?$AAC?$AAO?$AAM?$AA_?$AAI?$AAn@| DCB "E"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "i"
	DCB	0x0, "n", 0x0, " ", 0x0, "G", 0x0, "e", 0x0, "t", 0x0, "S"
	DCB	0x0, "e", 0x0, "r", 0x0, "i", 0x0, "a", 0x0, "l", 0x0, "O"
	DCB	0x0, "b", 0x0, "j", 0x0, "e", 0x0, "c", 0x0, "t", 0x0, ","
	DCB	0x0, " ", 0x0, "C", 0x0, "O", 0x0, "M", 0x0, "_", 0x0, "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, " ", 0x0, "f", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, 0xa, 0x0, 0xd
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@EFMMMFDH@?$AAD?$AAe?$AAv?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$CF?$AAX?$AA?$AN?$AA?6?$AA?$AA@| DCB "D"
	DCB	0x0, "e", 0x0, "v", 0x0, "I", 0x0, "n", 0x0, "d", 0x0, "e"
	DCB	0x0, "x", 0x0, " ", 0x0, "%", 0x0, "X", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GI@IGAGBKDE@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAP?$AAr?$AAi?$AAo?$AAr?$AAi?$AAt?$AAy?$AA2?$AA5?$AA6?$AA?5?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?0@| DCB "F"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "t", 0x0, "o", 0x0, " ", 0x0, "g", 0x0, "e", 0x0, "t"
	DCB	0x0, " ", 0x0, "P", 0x0, "r", 0x0, "i", 0x0, "o", 0x0, "r"
	DCB	0x0, "i", 0x0, "t", 0x0, "y", 0x0, "2", 0x0, "5", 0x0, "6"
	DCB	0x0, " ", 0x0, "v", 0x0, "a", 0x0, "l", 0x0, "u", 0x0, "e"
	DCB	0x0, ",", 0x0, " ", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "a"
	DCB	0x0, "u", 0x0, "l", 0x0, "t", 0x0, "i", 0x0, "n", 0x0, "g"
	DCB	0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BI@BHLBGEOK@?$AAP?$AAr?$AAi?$AAo?$AAr?$AAi?$AAt?$AAy?$AA2?$AA5?$AA6?$AA?$AA@| DCB "P"
	DCB	0x0, "r", 0x0, "i", 0x0, "o", 0x0, "r", 0x0, "i", 0x0, "t"
	DCB	0x0, "y", 0x0, "2", 0x0, "5", 0x0, "6", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HA@FDKKDCHL@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AAv@| DCB "F"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "t", 0x0, "o", 0x0, " ", 0x0, "g", 0x0, "e", 0x0, "t"
	DCB	0x0, " ", 0x0, "D", 0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c"
	DCB	0x0, "e", 0x0, "A", 0x0, "r", 0x0, "r", 0x0, "a", 0x0, "y"
	DCB	0x0, "I", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "x", 0x0, " "
	DCB	0x0, "v", 0x0, "a", 0x0, "l", 0x0, "u", 0x0, "e", 0x0, ","
	DCB	0x0, " ", 0x0, "C", 0x0, "O", 0x0, "M", 0x0, "_", 0x0, "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, " ", 0x0, "f", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CC@KMPFMANC@?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?$AA@| DCB "D"
	DCB	0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "A"
	DCB	0x0, "r", 0x0, "r", 0x0, "a", 0x0, "y", 0x0, "I", 0x0, "n"
	DCB	0x0, "d", 0x0, "e", 0x0, "x", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FK@GNPHIAEF@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5?$AAd?$AAe?$AAv?$AAk?$AAe?$AAy?$AAp?$AAa?$AAt?$AAh?$AA?0?$AA?5?$AAC?$AAO?$AAM?$AA_?$AAI@| DCB "F"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "t", 0x0, "o", 0x0, " ", 0x0, "o", 0x0, "p", 0x0, "e"
	DCB	0x0, "n", 0x0, " ", 0x0, "d", 0x0, "e", 0x0, "v", 0x0, "k"
	DCB	0x0, "e", 0x0, "y", 0x0, "p", 0x0, "a", 0x0, "t", 0x0, "h"
	DCB	0x0, ",", 0x0, " ", 0x0, "C", 0x0, "O", 0x0, "M", 0x0, "_"
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, " ", 0x0, "f"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CC@OIKDCOFG@?$AAT?$AAr?$AAy?$AA?5?$AAt?$AAo?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5?$AA?$CF?$AAs?$AA?$AN?$AA?6?$AA?$AA@| DCB "T"
	DCB	0x0, "r", 0x0, "y", 0x0, " ", 0x0, "t", 0x0, "o", 0x0, " "
	DCB	0x0, "o", 0x0, "p", 0x0, "e", 0x0, "n", 0x0, " ", 0x0, "%"
	DCB	0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FA@BECDDKGM@?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAe?$AAv?$AAe?$AAn?$AAt?$AA?0?$AA?5?$AAC?$AAO?$AAM?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?5?$AAf@| DCB "E"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "c"
	DCB	0x0, "r", 0x0, "e", 0x0, "a", 0x0, "t", 0x0, "i", 0x0, "n"
	DCB	0x0, "g", 0x0, " ", 0x0, "e", 0x0, "v", 0x0, "e", 0x0, "n"
	DCB	0x0, "t", 0x0, ",", 0x0, " ", 0x0, "C", 0x0, "O", 0x0, "M"
	DCB	0x0, "_", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, " "
	DCB	0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, 0xa, 0x0, 0xd, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HG@FCOJGPAE@?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAm?$AAe?$AAm?$AAo?$AAr?$AAy?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAp?$AAS?$AAe?$AAr@| DCB "E"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "a"
	DCB	0x0, "l", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t"
	DCB	0x0, "i", 0x0, "n", 0x0, "g", 0x0, " ", 0x0, "m", 0x0, "e"
	DCB	0x0, "m", 0x0, "o", 0x0, "r", 0x0, "y", 0x0, " ", 0x0, "f"
	DCB	0x0, "o", 0x0, "r", 0x0, " ", 0x0, "p", 0x0, "S", 0x0, "e"
	DCB	0x0, "r", 0x0, "i", 0x0, "a", 0x0, "l", 0x0, "H", 0x0, "e"
	DCB	0x0, "a", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "C", 0x0, "O"
	DCB	0x0, "M", 0x0, "_", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t"
	DCB	0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e"
	DCB	0x0, "d", 0x0, 0xa, 0x0, 0xd, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BI@GFHIOEJL@?$AA?$CL?$AAC?$AAO?$AAM?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "C", 0x0, "O", 0x0, "M", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  01d1c			 AREA	 |.text|, CODE, ARM

  01d1c		 |COM_Init| PROC

; 715  : {

  01d1c		 |$LN50@COM_Init|
  01d1c	e1a0c00d	 mov         r12, sp
  01d20	e92d0001	 stmdb       sp!, {r0}
  01d24	e92d5000	 stmdb       sp!, {r12, lr}
  01d28	e24dd0b4	 sub         sp, sp, #0xB4
  01d2c		 |$M41627|

; 716  :     PVOID           pHWHead     = NULL;

  01d2c	e3a03000	 mov         r3, #0
  01d30	e58d3024	 str         r3, [sp, #0x24]

; 717  :     PHW_INDEP_INFO  pSerialHead = NULL;

  01d34	e3a03000	 mov         r3, #0
  01d38	e58d3008	 str         r3, [sp, #8]

; 718  :     ULONG           HWBufferSize;
; 719  :     DWORD           DevIndex;
; 720  :     HKEY            hKey;
; 721  :     ULONG           kreserved = 0, kvaluetype;

  01d3c	e3a03000	 mov         r3, #0
  01d40	e58d300c	 str         r3, [sp, #0xC]

; 722  :     ULONG           datasize = sizeof(ULONG);

  01d44	e3a03004	 mov         r3, #4
  01d48	e58d3020	 str         r3, [sp, #0x20]

; 723  : 
; 724  :     /*
; 725  :      *  INTERNAL: this routine initializes the hardware abstraction interface
; 726  :      *  via HWInit(). It allocates a data structure representing this
; 727  :      *  instantiation of the device. It also creates an event and initializes
; 728  :      *  a critical section for receiving as well as registering the logical
; 729  :      *  interrupt dwIntID with NK via InterruptInitialize. This call
; 730  :      *  requires that the hardware dependent portion export apis that return
; 731  :      *  the physical address of the receive buffer and the size of that buffer.
; 732  :      *  Finally, it creates a buffer to act as an intermediate
; 733  :      *  buffer when receiving.
; 734  :      */
; 735  :     DEBUGMSG (ZONE_INIT | ZONE_FUNCTION, (TEXT("+COM_Init\r\n")));

  01d4c	e59f3894	 ldr         r3, [pc, #0x894]
  01d50	e5933440	 ldr         r3, [r3, #0x440]
  01d54	e2032001	 and         r2, r3, #1
  01d58	e59f3888	 ldr         r3, [pc, #0x888]
  01d5c	e5933440	 ldr         r3, [r3, #0x440]
  01d60	e2033a02	 and         r3, r3, #2, 20
  01d64	e1923003	 orrs        r3, r2, r3
  01d68	0a000004	 beq         |$LN14@COM_Init|
  01d6c	e59f08b8	 ldr         r0, [pc, #0x8B8]
  01d70	eb000000	 bl          NKDbgPrintfW
  01d74	e3a03001	 mov         r3, #1
  01d78	e58d303c	 str         r3, [sp, #0x3C]
  01d7c	ea000001	 b           |$LN15@COM_Init|
  01d80		 |$LN14@COM_Init|
  01d80	e3a03000	 mov         r3, #0
  01d84	e58d303c	 str         r3, [sp, #0x3C]
  01d88		 |$LN15@COM_Init|

; 736  : 
; 737  :     // Allocate our control structure.
; 738  :     pSerialHead  =  (PHW_INDEP_INFO)LocalAlloc(LPTR, sizeof(HW_INDEP_INFO));

  01d88	e3a01f42	 mov         r1, #0x42, 30
  01d8c	e3a00040	 mov         r0, #0x40
  01d90	eb000000	 bl          LocalAlloc
  01d94	e58d0040	 str         r0, [sp, #0x40]
  01d98	e59d3040	 ldr         r3, [sp, #0x40]
  01d9c	e58d3008	 str         r3, [sp, #8]

; 739  : 
; 740  :     // Check that LocalAlloc did stuff ok too.
; 741  :     if ( !pSerialHead ) {

  01da0	e59d3008	 ldr         r3, [sp, #8]
  01da4	e3530000	 cmp         r3, #0
  01da8	1a000011	 bne         |$LN11@COM_Init|

; 742  :         DEBUGMSG(ZONE_INIT | ZONE_ERROR,
; 743  :                  (TEXT("Error allocating memory for pSerialHead, COM_Init failed\n\r")));

  01dac	e59f3834	 ldr         r3, [pc, #0x834]
  01db0	e5933440	 ldr         r3, [r3, #0x440]
  01db4	e2032001	 and         r2, r3, #1
  01db8	e59f3828	 ldr         r3, [pc, #0x828]
  01dbc	e5933440	 ldr         r3, [r3, #0x440]
  01dc0	e2033902	 and         r3, r3, #2, 18
  01dc4	e1923003	 orrs        r3, r2, r3
  01dc8	0a000004	 beq         |$LN16@COM_Init|
  01dcc	e59f0854	 ldr         r0, [pc, #0x854]
  01dd0	eb000000	 bl          NKDbgPrintfW
  01dd4	e3a03001	 mov         r3, #1
  01dd8	e58d3044	 str         r3, [sp, #0x44]
  01ddc	ea000001	 b           |$LN17@COM_Init|
  01de0		 |$LN16@COM_Init|
  01de0	e3a03000	 mov         r3, #0
  01de4	e58d3044	 str         r3, [sp, #0x44]
  01de8		 |$LN17@COM_Init|

; 744  :         return(NULL);

  01de8	e3a03000	 mov         r3, #0
  01dec	e58d3028	 str         r3, [sp, #0x28]
  01df0	ea0001f7	 b           |$LN12@COM_Init|
  01df4		 |$LN11@COM_Init|

; 745  :     }
; 746  :     memset(pSerialHead,0,sizeof(HW_INDEP_INFO));

  01df4	e3a02f42	 mov         r2, #0x42, 30
  01df8	e3a01000	 mov         r1, #0
  01dfc	e59d0008	 ldr         r0, [sp, #8]
  01e00	eb000000	 bl          memset

; 747  : 
; 748  :     // Initially, open list is empty.
; 749  :     InitializeListHead( &pSerialHead->OpenList );

  01e04	e59d3008	 ldr         r3, [sp, #8]
  01e08	e28320e4	 add         r2, r3, #0xE4
  01e0c	e59d3008	 ldr         r3, [sp, #8]
  01e10	e28330e8	 add         r3, r3, #0xE8
  01e14	e5832000	 str         r2, [r3]
  01e18	e59d3008	 ldr         r3, [sp, #8]
  01e1c	e28310e8	 add         r1, r3, #0xE8
  01e20	e59d3008	 ldr         r3, [sp, #8]
  01e24	e28320e4	 add         r2, r3, #0xE4
  01e28	e5913000	 ldr         r3, [r1]
  01e2c	e5823000	 str         r3, [r2]

; 750  :     InitializeCriticalSection(&(pSerialHead->OpenCS));

  01e30	e59d3008	 ldr         r3, [sp, #8]
  01e34	e28300ec	 add         r0, r3, #0xEC
  01e38	eb000000	 bl          InitializeCriticalSection

; 751  : 
; 752  :     /* Initialize the critical sections that will guard the parts of
; 753  :      * the receive and transmit buffers.
; 754  :      */
; 755  :     InitializeCriticalSection(&(pSerialHead->ReceiveCritSec1));

  01e3c	e59d3008	 ldr         r3, [sp, #8]
  01e40	e2830014	 add         r0, r3, #0x14
  01e44	eb000000	 bl          InitializeCriticalSection

; 756  :     InitializeCriticalSection(&(pSerialHead->TransmitCritSec1));

  01e48	e59d0008	 ldr         r0, [sp, #8]
  01e4c	eb000000	 bl          InitializeCriticalSection

; 757  :     
; 758  :     /* Initialize the critical section that guard the receive and Xmit buffer
; 759  :     */
; 760  :     InitializeCriticalSection(&(pSerialHead->RxBufferInfo.CS));

  01e50	e59d3008	 ldr         r3, [sp, #8]
  01e54	e28300b0	 add         r0, r3, #0xB0
  01e58	eb000000	 bl          InitializeCriticalSection

; 761  :     InitializeCriticalSection(&(pSerialHead->TxBufferInfo.CS));

  01e5c	e59d3008	 ldr         r3, [sp, #8]
  01e60	e28300d0	 add         r0, r3, #0xD0
  01e64	eb000000	 bl          InitializeCriticalSection

; 762  :     
; 763  :     pSerialHead->pAccessOwner = NULL;

  01e68	e59d3008	 ldr         r3, [sp, #8]
  01e6c	e2832c01	 add         r2, r3, #1, 24
  01e70	e3a03000	 mov         r3, #0
  01e74	e5823000	 str         r3, [r2]

; 764  :     pSerialHead->fEventMask = 0;

  01e78	e59d3008	 ldr         r3, [sp, #8]
  01e7c	e2832098	 add         r2, r3, #0x98
  01e80	e3a03000	 mov         r3, #0
  01e84	e5823000	 str         r3, [r2]

; 765  : 
; 766  :     // Init CommTimeouts.
; 767  :     pSerialHead->CommTimeouts.ReadIntervalTimeout = READ_TIMEOUT;

  01e88	e59d3008	 ldr         r3, [sp, #8]
  01e8c	e283207c	 add         r2, r3, #0x7C
  01e90	e3a030fa	 mov         r3, #0xFA
  01e94	e5823000	 str         r3, [r2]

; 768  :     pSerialHead->CommTimeouts.ReadTotalTimeoutMultiplier =
; 769  :     READ_TIMEOUT_MULTIPLIER;

  01e98	e59d3008	 ldr         r3, [sp, #8]
  01e9c	e2832080	 add         r2, r3, #0x80
  01ea0	e3a0300a	 mov         r3, #0xA
  01ea4	e5823000	 str         r3, [r2]

; 770  :     pSerialHead->CommTimeouts.ReadTotalTimeoutConstant =
; 771  :     READ_TIMEOUT_CONSTANT;

  01ea8	e59d3008	 ldr         r3, [sp, #8]
  01eac	e2832084	 add         r2, r3, #0x84
  01eb0	e3a03064	 mov         r3, #0x64
  01eb4	e5823000	 str         r3, [r2]

; 772  :     pSerialHead->CommTimeouts.WriteTotalTimeoutMultiplier=  0;

  01eb8	e59d3008	 ldr         r3, [sp, #8]
  01ebc	e2832088	 add         r2, r3, #0x88
  01ec0	e3a03000	 mov         r3, #0
  01ec4	e5823000	 str         r3, [r2]

; 773  :     pSerialHead->CommTimeouts.WriteTotalTimeoutConstant =   0;

  01ec8	e59d3008	 ldr         r3, [sp, #8]
  01ecc	e283208c	 add         r2, r3, #0x8C
  01ed0	e3a03000	 mov         r3, #0
  01ed4	e5823000	 str         r3, [r2]

; 774  : 
; 775  :     /* Create tx and rx events and stash in global struct field. Check return.
; 776  :      */
; 777  :     pSerialHead->hSerialEvent = CreateEvent(0,FALSE,FALSE,NULL);

  01ed8	e3a03000	 mov         r3, #0
  01edc	e3a02000	 mov         r2, #0
  01ee0	e3a01000	 mov         r1, #0
  01ee4	e3a00000	 mov         r0, #0
  01ee8	eb000000	 bl          CreateEventW
  01eec	e58d0048	 str         r0, [sp, #0x48]
  01ef0	e59d3008	 ldr         r3, [sp, #8]
  01ef4	e2832030	 add         r2, r3, #0x30
  01ef8	e59d3048	 ldr         r3, [sp, #0x48]
  01efc	e5823000	 str         r3, [r2]

; 778  :     pSerialHead->hKillDispatchThread = CreateEvent(0, FALSE, FALSE, NULL);

  01f00	e3a03000	 mov         r3, #0
  01f04	e3a02000	 mov         r2, #0
  01f08	e3a01000	 mov         r1, #0
  01f0c	e3a00000	 mov         r0, #0
  01f10	eb000000	 bl          CreateEventW
  01f14	e58d004c	 str         r0, [sp, #0x4C]
  01f18	e59d3008	 ldr         r3, [sp, #8]
  01f1c	e2832038	 add         r2, r3, #0x38
  01f20	e59d304c	 ldr         r3, [sp, #0x4C]
  01f24	e5823000	 str         r3, [r2]

; 779  :     pSerialHead->hTransmitEvent = CreateEvent(0, FALSE, FALSE, NULL);

  01f28	e3a03000	 mov         r3, #0
  01f2c	e3a02000	 mov         r2, #0
  01f30	e3a01000	 mov         r1, #0
  01f34	e3a00000	 mov         r0, #0
  01f38	eb000000	 bl          CreateEventW
  01f3c	e58d0050	 str         r0, [sp, #0x50]
  01f40	e59d3008	 ldr         r3, [sp, #8]
  01f44	e283203c	 add         r2, r3, #0x3C
  01f48	e59d3050	 ldr         r3, [sp, #0x50]
  01f4c	e5823000	 str         r3, [r2]

; 780  :     pSerialHead->hReadEvent = CreateEvent(0, FALSE, FALSE, NULL);

  01f50	e3a03000	 mov         r3, #0
  01f54	e3a02000	 mov         r2, #0
  01f58	e3a01000	 mov         r1, #0
  01f5c	e3a00000	 mov         r0, #0
  01f60	eb000000	 bl          CreateEventW
  01f64	e58d0054	 str         r0, [sp, #0x54]
  01f68	e59d3008	 ldr         r3, [sp, #8]
  01f6c	e2832034	 add         r2, r3, #0x34
  01f70	e59d3054	 ldr         r3, [sp, #0x54]
  01f74	e5823000	 str         r3, [r2]

; 781  : 
; 782  :     if ( !pSerialHead->hSerialEvent || !pSerialHead->hKillDispatchThread ||
; 783  :          !pSerialHead->hTransmitEvent || !pSerialHead->hReadEvent ) {

  01f78	e59d3008	 ldr         r3, [sp, #8]
  01f7c	e2833030	 add         r3, r3, #0x30
  01f80	e5933000	 ldr         r3, [r3]
  01f84	e3530000	 cmp         r3, #0
  01f88	0a00000e	 beq         |$LN9@COM_Init|
  01f8c	e59d3008	 ldr         r3, [sp, #8]
  01f90	e2833038	 add         r3, r3, #0x38
  01f94	e5933000	 ldr         r3, [r3]
  01f98	e3530000	 cmp         r3, #0
  01f9c	0a000009	 beq         |$LN9@COM_Init|
  01fa0	e59d3008	 ldr         r3, [sp, #8]
  01fa4	e283303c	 add         r3, r3, #0x3C
  01fa8	e5933000	 ldr         r3, [r3]
  01fac	e3530000	 cmp         r3, #0
  01fb0	0a000004	 beq         |$LN9@COM_Init|
  01fb4	e59d3008	 ldr         r3, [sp, #8]
  01fb8	e2833034	 add         r3, r3, #0x34
  01fbc	e5933000	 ldr         r3, [r3]
  01fc0	e3530000	 cmp         r3, #0
  01fc4	1a000013	 bne         |$LN10@COM_Init|
  01fc8		 |$LN9@COM_Init|

; 784  :         DEBUGMSG(ZONE_ERROR | ZONE_INIT,
; 785  :                  (TEXT("Error creating event, COM_Init failed\n\r")));

  01fc8	e59f3618	 ldr         r3, [pc, #0x618]
  01fcc	e5933440	 ldr         r3, [r3, #0x440]
  01fd0	e2032902	 and         r2, r3, #2, 18
  01fd4	e59f360c	 ldr         r3, [pc, #0x60C]
  01fd8	e5933440	 ldr         r3, [r3, #0x440]
  01fdc	e2033001	 and         r3, r3, #1
  01fe0	e1923003	 orrs        r3, r2, r3
  01fe4	0a000004	 beq         |$LN18@COM_Init|
  01fe8	e59f0634	 ldr         r0, [pc, #0x634]
  01fec	eb000000	 bl          NKDbgPrintfW
  01ff0	e3a03001	 mov         r3, #1
  01ff4	e58d3058	 str         r3, [sp, #0x58]
  01ff8	ea000001	 b           |$LN19@COM_Init|
  01ffc		 |$LN18@COM_Init|
  01ffc	e3a03000	 mov         r3, #0
  02000	e58d3058	 str         r3, [sp, #0x58]
  02004		 |$LN19@COM_Init|

; 786  :         COM_Deinit(pSerialHead);

  02004	e59d0008	 ldr         r0, [sp, #8]
  02008	eb000000	 bl          COM_Deinit

; 787  :         return(NULL);

  0200c	e3a03000	 mov         r3, #0
  02010	e58d3028	 str         r3, [sp, #0x28]
  02014	ea00016e	 b           |$LN12@COM_Init|
  02018		 |$LN10@COM_Init|

; 788  :     }
; 789  : 
; 790  :     /* Want to use the Identifier to do RegOpenKey and RegQueryValue (?)
; 791  :      * to get the index to be passed to GetHWObj.
; 792  :      * The HWObj will also have a flag denoting whether to start the
; 793  :      * listening thread or provide the callback.
; 794  :      */
; 795  :     DEBUGMSG (ZONE_INIT,(TEXT("Try to open %s\r\n"), (LPCTSTR)Identifier));

  02018	e59f35c8	 ldr         r3, [pc, #0x5C8]
  0201c	e5933440	 ldr         r3, [r3, #0x440]
  02020	e3130001	 tst         r3, #1
  02024	0a000005	 beq         |$LN20@COM_Init|
  02028	e59d10bc	 ldr         r1, [sp, #0xBC]
  0202c	e59f05ec	 ldr         r0, [pc, #0x5EC]
  02030	eb000000	 bl          NKDbgPrintfW
  02034	e3a03001	 mov         r3, #1
  02038	e58d305c	 str         r3, [sp, #0x5C]
  0203c	ea000001	 b           |$LN21@COM_Init|
  02040		 |$LN20@COM_Init|
  02040	e3a03000	 mov         r3, #0
  02044	e58d305c	 str         r3, [sp, #0x5C]
  02048		 |$LN21@COM_Init|

; 796  :     hKey = OpenDeviceKey((LPCTSTR)Identifier);

  02048	e59d00bc	 ldr         r0, [sp, #0xBC]
  0204c	eb000000	 bl          OpenDeviceKey
  02050	e58d0060	 str         r0, [sp, #0x60]
  02054	e59d3060	 ldr         r3, [sp, #0x60]
  02058	e58d3010	 str         r3, [sp, #0x10]

; 797  :     if ( !hKey ) {

  0205c	e59d3010	 ldr         r3, [sp, #0x10]
  02060	e3530000	 cmp         r3, #0
  02064	1a000013	 bne         |$LN8@COM_Init|

; 798  :         DEBUGMSG (ZONE_INIT | ZONE_ERROR,
; 799  :                   (TEXT("Failed to open devkeypath, COM_Init failed\r\n")));

  02068	e59f3578	 ldr         r3, [pc, #0x578]
  0206c	e5933440	 ldr         r3, [r3, #0x440]
  02070	e2032001	 and         r2, r3, #1
  02074	e59f356c	 ldr         r3, [pc, #0x56C]
  02078	e5933440	 ldr         r3, [r3, #0x440]
  0207c	e2033902	 and         r3, r3, #2, 18
  02080	e1923003	 orrs        r3, r2, r3
  02084	0a000004	 beq         |$LN22@COM_Init|
  02088	e59f058c	 ldr         r0, [pc, #0x58C]
  0208c	eb000000	 bl          NKDbgPrintfW
  02090	e3a03001	 mov         r3, #1
  02094	e58d3064	 str         r3, [sp, #0x64]
  02098	ea000001	 b           |$LN23@COM_Init|
  0209c		 |$LN22@COM_Init|
  0209c	e3a03000	 mov         r3, #0
  020a0	e58d3064	 str         r3, [sp, #0x64]
  020a4		 |$LN23@COM_Init|

; 800  :         COM_Deinit(pSerialHead);

  020a4	e59d0008	 ldr         r0, [sp, #8]
  020a8	eb000000	 bl          COM_Deinit

; 801  :         return(NULL);

  020ac	e3a03000	 mov         r3, #0
  020b0	e58d3028	 str         r3, [sp, #0x28]
  020b4	ea000146	 b           |$LN12@COM_Init|
  020b8		 |$LN8@COM_Init|

; 802  :     }
; 803  : 
; 804  :     datasize = sizeof(DWORD);

  020b8	e3a03004	 mov         r3, #4
  020bc	e58d3020	 str         r3, [sp, #0x20]

; 805  : 
; 806  :     if ( RegQueryValueEx(hKey, L"DeviceArrayIndex", NULL, &kvaluetype,
; 807  :                          (LPBYTE)&DevIndex, &datasize) ) {

  020c0	e28d3020	 add         r3, sp, #0x20
  020c4	e58d3004	 str         r3, [sp, #4]
  020c8	e28d301c	 add         r3, sp, #0x1C
  020cc	e58d3000	 str         r3, [sp]
  020d0	e28d3014	 add         r3, sp, #0x14
  020d4	e3a02000	 mov         r2, #0
  020d8	e59f1538	 ldr         r1, [pc, #0x538]
  020dc	e59d0010	 ldr         r0, [sp, #0x10]
  020e0	eb000000	 bl          RegQueryValueExW
  020e4	e58d0068	 str         r0, [sp, #0x68]
  020e8	e59d3068	 ldr         r3, [sp, #0x68]
  020ec	e3530000	 cmp         r3, #0
  020f0	0a000015	 beq         |$LN7@COM_Init|

; 808  :         DEBUGMSG (ZONE_INIT | ZONE_ERROR,
; 809  :                   (TEXT("Failed to get DeviceArrayIndex value, COM_Init failed\r\n")));

  020f4	e59f34ec	 ldr         r3, [pc, #0x4EC]
  020f8	e5933440	 ldr         r3, [r3, #0x440]
  020fc	e2032001	 and         r2, r3, #1
  02100	e59f34e0	 ldr         r3, [pc, #0x4E0]
  02104	e5933440	 ldr         r3, [r3, #0x440]
  02108	e2033902	 and         r3, r3, #2, 18
  0210c	e1923003	 orrs        r3, r2, r3
  02110	0a000004	 beq         |$LN24@COM_Init|
  02114	e59f04f8	 ldr         r0, [pc, #0x4F8]
  02118	eb000000	 bl          NKDbgPrintfW
  0211c	e3a03001	 mov         r3, #1
  02120	e58d306c	 str         r3, [sp, #0x6C]
  02124	ea000001	 b           |$LN25@COM_Init|
  02128		 |$LN24@COM_Init|
  02128	e3a03000	 mov         r3, #0
  0212c	e58d306c	 str         r3, [sp, #0x6C]
  02130		 |$LN25@COM_Init|

; 810  :         RegCloseKey (hKey);

  02130	e59d0010	 ldr         r0, [sp, #0x10]
  02134	eb000000	 bl          RegCloseKey

; 811  :         COM_Deinit(pSerialHead);

  02138	e59d0008	 ldr         r0, [sp, #8]
  0213c	eb000000	 bl          COM_Deinit

; 812  :         return(NULL);

  02140	e3a03000	 mov         r3, #0
  02144	e58d3028	 str         r3, [sp, #0x28]
  02148	ea000121	 b           |$LN12@COM_Init|
  0214c		 |$LN7@COM_Init|

; 813  :     }
; 814  : 
; 815  :     datasize = sizeof(DWORD);

  0214c	e3a03004	 mov         r3, #4
  02150	e58d3020	 str         r3, [sp, #0x20]

; 816  :     if ( RegQueryValueEx(hKey, L"Priority256", NULL, &kvaluetype,
; 817  :                          (LPBYTE)&pSerialHead->Priority256, &datasize) ) {

  02154	e28d3020	 add         r3, sp, #0x20
  02158	e58d3004	 str         r3, [sp, #4]
  0215c	e59d3008	 ldr         r3, [sp, #8]
  02160	e2833044	 add         r3, r3, #0x44
  02164	e58d3000	 str         r3, [sp]
  02168	e28d3014	 add         r3, sp, #0x14
  0216c	e3a02000	 mov         r2, #0
  02170	e59f1498	 ldr         r1, [pc, #0x498]
  02174	e59d0010	 ldr         r0, [sp, #0x10]
  02178	eb000000	 bl          RegQueryValueExW
  0217c	e58d0070	 str         r0, [sp, #0x70]
  02180	e59d3070	 ldr         r3, [sp, #0x70]
  02184	e3530000	 cmp         r3, #0
  02188	0a000015	 beq         |$LN6@COM_Init|

; 818  :         pSerialHead->Priority256 = DEFAULT_CE_THREAD_PRIORITY;

  0218c	e59d3008	 ldr         r3, [sp, #8]
  02190	e2832044	 add         r2, r3, #0x44
  02194	e3a03067	 mov         r3, #0x67
  02198	e5823000	 str         r3, [r2]

; 819  :         DEBUGMSG (ZONE_INIT | ZONE_WARN,
; 820  :                   (TEXT("Failed to get Priority256 value, defaulting to %d\r\n"), pSerialHead->Priority256));

  0219c	e59f3444	 ldr         r3, [pc, #0x444]
  021a0	e5933440	 ldr         r3, [r3, #0x440]
  021a4	e2032001	 and         r2, r3, #1
  021a8	e59f3438	 ldr         r3, [pc, #0x438]
  021ac	e5933440	 ldr         r3, [r3, #0x440]
  021b0	e2033901	 and         r3, r3, #1, 18
  021b4	e1923003	 orrs        r3, r2, r3
  021b8	0a000007	 beq         |$LN26@COM_Init|
  021bc	e59d3008	 ldr         r3, [sp, #8]
  021c0	e2833044	 add         r3, r3, #0x44
  021c4	e5931000	 ldr         r1, [r3]
  021c8	e59f043c	 ldr         r0, [pc, #0x43C]
  021cc	eb000000	 bl          NKDbgPrintfW
  021d0	e3a03001	 mov         r3, #1
  021d4	e58d3074	 str         r3, [sp, #0x74]
  021d8	ea000001	 b           |$LN27@COM_Init|
  021dc		 |$LN26@COM_Init|
  021dc	e3a03000	 mov         r3, #0
  021e0	e58d3074	 str         r3, [sp, #0x74]
  021e4		 |$LN27@COM_Init|
  021e4		 |$LN6@COM_Init|

; 821  :     }
; 822  : 
; 823  :     RegCloseKey (hKey);

  021e4	e59d0010	 ldr         r0, [sp, #0x10]
  021e8	eb000000	 bl          RegCloseKey

; 824  : 
; 825  :     DEBUGMSG (ZONE_INIT,
; 826  :               (TEXT("DevIndex %X\r\n"), DevIndex));

  021ec	e59f33f4	 ldr         r3, [pc, #0x3F4]
  021f0	e5933440	 ldr         r3, [r3, #0x440]
  021f4	e3130001	 tst         r3, #1
  021f8	0a000005	 beq         |$LN28@COM_Init|
  021fc	e59d101c	 ldr         r1, [sp, #0x1C]
  02200	e59f0400	 ldr         r0, [pc, #0x400]
  02204	eb000000	 bl          NKDbgPrintfW
  02208	e3a03001	 mov         r3, #1
  0220c	e58d3078	 str         r3, [sp, #0x78]
  02210	ea000001	 b           |$LN29@COM_Init|
  02214		 |$LN28@COM_Init|
  02214	e3a03000	 mov         r3, #0
  02218	e58d3078	 str         r3, [sp, #0x78]
  0221c		 |$LN29@COM_Init|

; 827  : 
; 828  :     // Initialize hardware dependent data.
; 829  :     pSerialHead->pHWObj = GetSerialObject( DevIndex );

  0221c	e59d001c	 ldr         r0, [sp, #0x1C]
  02220	eb000000	 bl          GetSerialObject
  02224	e58d007c	 str         r0, [sp, #0x7C]
  02228	e59d3008	 ldr         r3, [sp, #8]
  0222c	e2832028	 add         r2, r3, #0x28
  02230	e59d307c	 ldr         r3, [sp, #0x7C]
  02234	e5823000	 str         r3, [r2]

; 830  :     if ( !pSerialHead->pHWObj ) {

  02238	e59d3008	 ldr         r3, [sp, #8]
  0223c	e2833028	 add         r3, r3, #0x28
  02240	e5933000	 ldr         r3, [r3]
  02244	e3530000	 cmp         r3, #0
  02248	1a000013	 bne         |$LN5@COM_Init|

; 831  :         DEBUGMSG(ZONE_ERROR | ZONE_INIT,
; 832  :                  (TEXT("Error in GetSerialObject, COM_Init failed\n\r")));

  0224c	e59f3394	 ldr         r3, [pc, #0x394]
  02250	e5933440	 ldr         r3, [r3, #0x440]
  02254	e2032902	 and         r2, r3, #2, 18
  02258	e59f3388	 ldr         r3, [pc, #0x388]
  0225c	e5933440	 ldr         r3, [r3, #0x440]
  02260	e2033001	 and         r3, r3, #1
  02264	e1923003	 orrs        r3, r2, r3
  02268	0a000004	 beq         |$LN30@COM_Init|
  0226c	e59f0390	 ldr         r0, [pc, #0x390]
  02270	eb000000	 bl          NKDbgPrintfW
  02274	e3a03001	 mov         r3, #1
  02278	e58d3080	 str         r3, [sp, #0x80]
  0227c	ea000001	 b           |$LN31@COM_Init|
  02280		 |$LN30@COM_Init|
  02280	e3a03000	 mov         r3, #0
  02284	e58d3080	 str         r3, [sp, #0x80]
  02288		 |$LN31@COM_Init|

; 833  :         COM_Deinit(pSerialHead);

  02288	e59d0008	 ldr         r0, [sp, #8]
  0228c	eb000000	 bl          COM_Deinit

; 834  :         return(NULL);

  02290	e3a03000	 mov         r3, #0
  02294	e58d3028	 str         r3, [sp, #0x28]
  02298	ea0000cd	 b           |$LN12@COM_Init|
  0229c		 |$LN5@COM_Init|

; 835  :     }
; 836  : 
; 837  :     DEBUGMSG (ZONE_INIT, (TEXT("About to call HWInit(%s,0x%X)\r\n"),
; 838  :                           Identifier, pSerialHead));

  0229c	e59f3344	 ldr         r3, [pc, #0x344]
  022a0	e5933440	 ldr         r3, [r3, #0x440]
  022a4	e3130001	 tst         r3, #1
  022a8	0a000006	 beq         |$LN32@COM_Init|
  022ac	e59d2008	 ldr         r2, [sp, #8]
  022b0	e59d10bc	 ldr         r1, [sp, #0xBC]
  022b4	e59f0344	 ldr         r0, [pc, #0x344]
  022b8	eb000000	 bl          NKDbgPrintfW
  022bc	e3a03001	 mov         r3, #1
  022c0	e58d3084	 str         r3, [sp, #0x84]
  022c4	ea000001	 b           |$LN33@COM_Init|
  022c8		 |$LN32@COM_Init|
  022c8	e3a03000	 mov         r3, #0
  022cc	e58d3084	 str         r3, [sp, #0x84]
  022d0		 |$LN33@COM_Init|

; 839  :     pHWHead = pSerialHead->pHWObj->pFuncTbl->HWInit(Identifier, pSerialHead, pSerialHead->pHWObj);

  022d0	e59d3008	 ldr         r3, [sp, #8]
  022d4	e2833028	 add         r3, r3, #0x28
  022d8	e5932000	 ldr         r2, [r3]
  022dc	e59d1008	 ldr         r1, [sp, #8]
  022e0	e59d00bc	 ldr         r0, [sp, #0xBC]
  022e4	e59d3008	 ldr         r3, [sp, #8]
  022e8	e2833028	 add         r3, r3, #0x28
  022ec	e5933000	 ldr         r3, [r3]
  022f0	e2833008	 add         r3, r3, #8
  022f4	e5933000	 ldr         r3, [r3]
  022f8	e5933000	 ldr         r3, [r3]
  022fc	e1a0e00f	 mov         lr, pc
  02300	e12fff13	 bx          r3
  02304	e58d0088	 str         r0, [sp, #0x88]
  02308	e59d3088	 ldr         r3, [sp, #0x88]
  0230c	e58d3024	 str         r3, [sp, #0x24]

; 840  :     pSerialHead->pHWHead = pHWHead;

  02310	e59d3008	 ldr         r3, [sp, #8]
  02314	e283202c	 add         r2, r3, #0x2C
  02318	e59d3024	 ldr         r3, [sp, #0x24]
  0231c	e5823000	 str         r3, [r2]

; 841  : 
; 842  :     /* Check that HWInit did stuff ok.  From here on out, call Deinit function
; 843  :      * when things fail.
; 844  :      */
; 845  :     if ( !pHWHead ) {

  02320	e59d3024	 ldr         r3, [sp, #0x24]
  02324	e3530000	 cmp         r3, #0
  02328	1a000013	 bne         |$LN4@COM_Init|

; 846  :         DEBUGMSG (ZONE_INIT | ZONE_ERROR,
; 847  :                   (TEXT("Hardware doesn't init correctly, COM_Init failed\r\n")));

  0232c	e59f32b4	 ldr         r3, [pc, #0x2B4]
  02330	e5933440	 ldr         r3, [r3, #0x440]
  02334	e2032001	 and         r2, r3, #1
  02338	e59f32a8	 ldr         r3, [pc, #0x2A8]
  0233c	e5933440	 ldr         r3, [r3, #0x440]
  02340	e2033902	 and         r3, r3, #2, 18
  02344	e1923003	 orrs        r3, r2, r3
  02348	0a000004	 beq         |$LN34@COM_Init|
  0234c	e59f02a8	 ldr         r0, [pc, #0x2A8]
  02350	eb000000	 bl          NKDbgPrintfW
  02354	e3a03001	 mov         r3, #1
  02358	e58d308c	 str         r3, [sp, #0x8C]
  0235c	ea000001	 b           |$LN35@COM_Init|
  02360		 |$LN34@COM_Init|
  02360	e3a03000	 mov         r3, #0
  02364	e58d308c	 str         r3, [sp, #0x8C]
  02368		 |$LN35@COM_Init|

; 848  :         COM_Deinit(pSerialHead);

  02368	e59d0008	 ldr         r0, [sp, #8]
  0236c	eb000000	 bl          COM_Deinit

; 849  :         return(NULL);

  02370	e3a03000	 mov         r3, #0
  02374	e58d3028	 str         r3, [sp, #0x28]
  02378	ea000095	 b           |$LN12@COM_Init|
  0237c		 |$LN4@COM_Init|

; 850  :     }
; 851  :     DEBUGMSG (ZONE_INIT,
; 852  :               (TEXT("Back from hardware init\r\n")));

  0237c	e59f3264	 ldr         r3, [pc, #0x264]
  02380	e5933440	 ldr         r3, [r3, #0x440]
  02384	e3130001	 tst         r3, #1
  02388	0a000004	 beq         |$LN36@COM_Init|
  0238c	e59f0264	 ldr         r0, [pc, #0x264]
  02390	eb000000	 bl          NKDbgPrintfW
  02394	e3a03001	 mov         r3, #1
  02398	e58d3090	 str         r3, [sp, #0x90]
  0239c	ea000001	 b           |$LN37@COM_Init|
  023a0		 |$LN36@COM_Init|
  023a0	e3a03000	 mov         r3, #0
  023a4	e58d3090	 str         r3, [sp, #0x90]
  023a8		 |$LN37@COM_Init|

; 853  : 
; 854  :     // Allocate at least twice the hardware buffer size so we have headroom
; 855  :     HWBufferSize        = 2 * pSerialHead->pHWObj->pFuncTbl->HWGetRxBufferSize(pHWHead);

  023a8	e59d0024	 ldr         r0, [sp, #0x24]
  023ac	e59d3008	 ldr         r3, [sp, #8]
  023b0	e2833028	 add         r3, r3, #0x28
  023b4	e5933000	 ldr         r3, [r3]
  023b8	e2833008	 add         r3, r3, #8
  023bc	e5933000	 ldr         r3, [r3]
  023c0	e2833028	 add         r3, r3, #0x28
  023c4	e5933000	 ldr         r3, [r3]
  023c8	e1a0e00f	 mov         lr, pc
  023cc	e12fff13	 bx          r3
  023d0	e58d0094	 str         r0, [sp, #0x94]
  023d4	e59d2094	 ldr         r2, [sp, #0x94]
  023d8	e3a03002	 mov         r3, #2
  023dc	e0030392	 mul         r3, r2, r3
  023e0	e58d3018	 str         r3, [sp, #0x18]

; 856  : 
; 857  :     // Init rx buffer and buffer length here.
; 858  :     pSerialHead->RxBufferInfo.Length =
; 859  :     HWBufferSize > RX_BUFFER_SIZE ? HWBufferSize:RX_BUFFER_SIZE;

  023e4	e59d3018	 ldr         r3, [sp, #0x18]
  023e8	e3530b02	 cmp         r3, #2, 22
  023ec	9a000002	 bls         |$LN38@COM_Init|
  023f0	e59d3018	 ldr         r3, [sp, #0x18]
  023f4	e58d3098	 str         r3, [sp, #0x98]
  023f8	ea000001	 b           |$LN39@COM_Init|
  023fc		 |$LN38@COM_Init|
  023fc	e3a03b02	 mov         r3, #2, 22
  02400	e58d3098	 str         r3, [sp, #0x98]
  02404		 |$LN39@COM_Init|
  02404	e59d3008	 ldr         r3, [sp, #8]
  02408	e28320a4	 add         r2, r3, #0xA4
  0240c	e59d3098	 ldr         r3, [sp, #0x98]
  02410	e5823000	 str         r3, [r2]

; 860  : 
; 861  :     pSerialHead->RxBufferInfo.RxCharBuffer =
; 862  :     LocalAlloc(LPTR, pSerialHead->RxBufferInfo.Length);

  02414	e59d3008	 ldr         r3, [sp, #8]
  02418	e28330a4	 add         r3, r3, #0xA4
  0241c	e5931000	 ldr         r1, [r3]
  02420	e3a00040	 mov         r0, #0x40
  02424	eb000000	 bl          LocalAlloc
  02428	e58d009c	 str         r0, [sp, #0x9C]
  0242c	e59d3008	 ldr         r3, [sp, #8]
  02430	e28320ac	 add         r2, r3, #0xAC
  02434	e59d309c	 ldr         r3, [sp, #0x9C]
  02438	e5823000	 str         r3, [r2]

; 863  : 
; 864  :     if ( !pSerialHead->RxBufferInfo.RxCharBuffer ) {

  0243c	e59d3008	 ldr         r3, [sp, #8]
  02440	e28330ac	 add         r3, r3, #0xAC
  02444	e5933000	 ldr         r3, [r3]
  02448	e3530000	 cmp         r3, #0
  0244c	1a000013	 bne         |$LN3@COM_Init|

; 865  :         DEBUGMSG(ZONE_INIT|ZONE_ERROR,
; 866  :                  (TEXT("Error allocating receive buffer, COM_Init failed\n\r")));

  02450	e59f3190	 ldr         r3, [pc, #0x190]
  02454	e5933440	 ldr         r3, [r3, #0x440]
  02458	e2032001	 and         r2, r3, #1
  0245c	e59f3184	 ldr         r3, [pc, #0x184]
  02460	e5933440	 ldr         r3, [r3, #0x440]
  02464	e2033902	 and         r3, r3, #2, 18
  02468	e1923003	 orrs        r3, r2, r3
  0246c	0a000004	 beq         |$LN40@COM_Init|
  02470	e59f017c	 ldr         r0, [pc, #0x17C]
  02474	eb000000	 bl          NKDbgPrintfW
  02478	e3a03001	 mov         r3, #1
  0247c	e58d30a0	 str         r3, [sp, #0xA0]
  02480	ea000001	 b           |$LN41@COM_Init|
  02484		 |$LN40@COM_Init|
  02484	e3a03000	 mov         r3, #0
  02488	e58d30a0	 str         r3, [sp, #0xA0]
  0248c		 |$LN41@COM_Init|

; 867  :         COM_Deinit(pSerialHead);

  0248c	e59d0008	 ldr         r0, [sp, #8]
  02490	eb000000	 bl          COM_Deinit

; 868  :         return(NULL);

  02494	e3a03000	 mov         r3, #0
  02498	e58d3028	 str         r3, [sp, #0x28]
  0249c	ea00004c	 b           |$LN12@COM_Init|
  024a0		 |$LN3@COM_Init|

; 869  :     }
; 870  : 
; 871  :     DEBUGMSG (ZONE_INIT, (TEXT("RxHead init'ed\r\n")));

  024a0	e59f3140	 ldr         r3, [pc, #0x140]
  024a4	e5933440	 ldr         r3, [r3, #0x440]
  024a8	e3130001	 tst         r3, #1
  024ac	0a000004	 beq         |$LN42@COM_Init|
  024b0	e59f0138	 ldr         r0, [pc, #0x138]
  024b4	eb000000	 bl          NKDbgPrintfW
  024b8	e3a03001	 mov         r3, #1
  024bc	e58d30a4	 str         r3, [sp, #0xA4]
  024c0	ea000001	 b           |$LN43@COM_Init|
  024c4		 |$LN42@COM_Init|
  024c4	e3a03000	 mov         r3, #0
  024c8	e58d30a4	 str         r3, [sp, #0xA4]
  024cc		 |$LN43@COM_Init|

; 872  : 
; 873  :     RxResetFifo(pSerialHead);

  024cc	e59d3008	 ldr         r3, [sp, #8]
  024d0	e283209c	 add         r2, r3, #0x9C
  024d4	e3a03000	 mov         r3, #0
  024d8	e5823000	 str         r3, [r2]
  024dc	e59d3008	 ldr         r3, [sp, #8]
  024e0	e28320a0	 add         r2, r3, #0xA0
  024e4	e3a03000	 mov         r3, #0
  024e8	e5823000	 str         r3, [r2]

; 874  : 
; 875  :     DEBUGMSG (ZONE_INIT, (TEXT("RxBuffer init'ed with start at %x\r\n"),
; 876  :                           pSerialHead->RxBufferInfo.RxCharBuffer));

  024ec	e59f30f4	 ldr         r3, [pc, #0xF4]
  024f0	e5933440	 ldr         r3, [r3, #0x440]
  024f4	e3130001	 tst         r3, #1
  024f8	0a000007	 beq         |$LN44@COM_Init|
  024fc	e59d3008	 ldr         r3, [sp, #8]
  02500	e28330ac	 add         r3, r3, #0xAC
  02504	e5931000	 ldr         r1, [r3]
  02508	e59f00dc	 ldr         r0, [pc, #0xDC]
  0250c	eb000000	 bl          NKDbgPrintfW
  02510	e3a03001	 mov         r3, #1
  02514	e58d30a8	 str         r3, [sp, #0xA8]
  02518	ea000001	 b           |$LN45@COM_Init|
  0251c		 |$LN44@COM_Init|
  0251c	e3a03000	 mov         r3, #0
  02520	e58d30a8	 str         r3, [sp, #0xA8]
  02524		 |$LN45@COM_Init|

; 877  : 
; 878  :     if ( pSerialHead->pHWObj->BindFlags & THREAD_AT_INIT ) {

  02524	e59d3008	 ldr         r3, [sp, #8]
  02528	e2833028	 add         r3, r3, #0x28
  0252c	e5933000	 ldr         r3, [r3]
  02530	e5933000	 ldr         r3, [r3]
  02534	e3130001	 tst         r3, #1
  02538	0a00000a	 beq         |$LN2@COM_Init|

; 879  :         // Hook the interrupt and start the associated thread.
; 880  :         if ( ! StartDispatchThread( pSerialHead ) ) {

  0253c	e59d0008	 ldr         r0, [sp, #8]
  02540	eb000000	 bl          StartDispatchThread
  02544	e58d00ac	 str         r0, [sp, #0xAC]
  02548	e59d30ac	 ldr         r3, [sp, #0xAC]
  0254c	e3530000	 cmp         r3, #0
  02550	1a000004	 bne         |$LN1@COM_Init|

; 881  :             // Failed on InterruptInitialize or CreateThread.  Bail.
; 882  :             COM_Deinit(pSerialHead);

  02554	e59d0008	 ldr         r0, [sp, #8]
  02558	eb000000	 bl          COM_Deinit

; 883  :             return(NULL);

  0255c	e3a03000	 mov         r3, #0
  02560	e58d3028	 str         r3, [sp, #0x28]
  02564	ea00001a	 b           |$LN12@COM_Init|
  02568		 |$LN1@COM_Init|
  02568		 |$LN2@COM_Init|

; 884  :         }
; 885  : 
; 886  :     }
; 887  : 
; 888  :     // OK, now that everything is ready on our end, give the PDD
; 889  :     // one last chance to init interrupts, etc.
; 890  :     (void) pSerialHead->pHWObj->pFuncTbl->HWPostInit( pHWHead );

  02568	e59d0024	 ldr         r0, [sp, #0x24]
  0256c	e59d3008	 ldr         r3, [sp, #8]
  02570	e2833028	 add         r3, r3, #0x28
  02574	e5933000	 ldr         r3, [r3]
  02578	e2833008	 add         r3, r3, #8
  0257c	e5933000	 ldr         r3, [r3]
  02580	e2833004	 add         r3, r3, #4
  02584	e5933000	 ldr         r3, [r3]
  02588	e1a0e00f	 mov         lr, pc
  0258c	e12fff13	 bx          r3

; 891  : 
; 892  :     DEBUGMSG (ZONE_INIT | ZONE_FUNCTION, (TEXT("-COM_Init\r\n")));

  02590	e59f3050	 ldr         r3, [pc, #0x50]
  02594	e5933440	 ldr         r3, [r3, #0x440]
  02598	e2032001	 and         r2, r3, #1
  0259c	e59f3044	 ldr         r3, [pc, #0x44]
  025a0	e5933440	 ldr         r3, [r3, #0x440]
  025a4	e2033a02	 and         r3, r3, #2, 20
  025a8	e1923003	 orrs        r3, r2, r3
  025ac	0a000004	 beq         |$LN46@COM_Init|
  025b0	e59f002c	 ldr         r0, [pc, #0x2C]
  025b4	eb000000	 bl          NKDbgPrintfW
  025b8	e3a03001	 mov         r3, #1
  025bc	e58d30b0	 str         r3, [sp, #0xB0]
  025c0	ea000001	 b           |$LN47@COM_Init|
  025c4		 |$LN46@COM_Init|
  025c4	e3a03000	 mov         r3, #0
  025c8	e58d30b0	 str         r3, [sp, #0xB0]
  025cc		 |$LN47@COM_Init|

; 893  :     return(pSerialHead);

  025cc	e59d3008	 ldr         r3, [sp, #8]
  025d0	e58d3028	 str         r3, [sp, #0x28]
  025d4		 |$LN12@COM_Init|

; 894  : }

  025d4	e59d0028	 ldr         r0, [sp, #0x28]
  025d8	e28dd0b4	 add         sp, sp, #0xB4
  025dc	e89d6000	 ldmia       sp, {sp, lr}
  025e0	e12fff1e	 bx          lr
  025e4		 |$LN51@COM_Init|
  025e4		 |$LN52@COM_Init|
  025e4	00000000	 DCD         |??_C@_1BI@NFEFLGML@?$AA?9?$AAC?$AAO?$AAM?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@|
  025e8		 |$LN53@COM_Init|
  025e8	00000000	 DCD         |dpCurSettings|
  025ec		 |$LN54@COM_Init|
  025ec	00000000	 DCD         |??_C@_1EI@FNCKFJMM@?$AAR?$AAx?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?5?$AAi?$AAn?$AAi?$AAt?$AA?8?$AAe?$AAd?$AA?5?$AAw?$AAi?$AAt?$AAh?$AA?5?$AAs?$AAt?$AAa?$AAr?$AAt?$AA?5?$AAa?$AAt?$AA?5?$AA?$CF@|
  025f0		 |$LN55@COM_Init|
  025f0	00000000	 DCD         |??_C@_1CC@POKINGEF@?$AAR?$AAx?$AAH?$AAe?$AAa?$AAd?$AA?5?$AAi?$AAn?$AAi?$AAt?$AA?8?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  025f4		 |$LN56@COM_Init|
  025f4	00000000	 DCD         |??_C@_1GG@FCOIFIDD@?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAr?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AA?5?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?0@|
  025f8		 |$LN57@COM_Init|
  025f8	00000000	 DCD         |??_C@_1DE@CLLKJMN@?$AAB?$AAa?$AAc?$AAk?$AA?5?$AAf?$AAr?$AAo?$AAm?$AA?5?$AAh?$AAa?$AAr?$AAd?$AAw?$AAa?$AAr?$AAe?$AA?5?$AAi?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@|
  025fc		 |$LN58@COM_Init|
  025fc	00000000	 DCD         |??_C@_1GG@LFOFGOL@?$AAH?$AAa?$AAr?$AAd?$AAw?$AAa?$AAr?$AAe?$AA?5?$AAd?$AAo?$AAe?$AAs?$AAn?$AA?8?$AAt?$AA?5?$AAi?$AAn?$AAi?$AAt?$AA?5?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AAl?$AAy?$AA?0@|
  02600		 |$LN59@COM_Init|
  02600	00000000	 DCD         |??_C@_1EA@DFMKFADA@?$AAA?$AAb?$AAo?$AAu?$AAt?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAH?$AAW?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CF?$AAs?$AA?0?$AA0?$AAx?$AA?$CF?$AAX?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  02604		 |$LN60@COM_Init|
  02604	00000000	 DCD         |??_C@_1FI@OHFMJBNJ@?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAi?$AAn?$AA?5?$AAG?$AAe?$AAt?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?0?$AA?5?$AAC?$AAO?$AAM?$AA_?$AAI?$AAn@|
  02608		 |$LN61@COM_Init|
  02608	00000000	 DCD         |??_C@_1BM@EFMMMFDH@?$AAD?$AAe?$AAv?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$CF?$AAX?$AA?$AN?$AA?6?$AA?$AA@|
  0260c		 |$LN62@COM_Init|
  0260c	00000000	 DCD         |??_C@_1GI@IGAGBKDE@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAP?$AAr?$AAi?$AAo?$AAr?$AAi?$AAt?$AAy?$AA2?$AA5?$AA6?$AA?5?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?0@|
  02610		 |$LN63@COM_Init|
  02610	00000000	 DCD         |??_C@_1BI@BHLBGEOK@?$AAP?$AAr?$AAi?$AAo?$AAr?$AAi?$AAt?$AAy?$AA2?$AA5?$AA6?$AA?$AA@|
  02614		 |$LN64@COM_Init|
  02614	00000000	 DCD         |??_C@_1HA@FDKKDCHL@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AAv@|
  02618		 |$LN65@COM_Init|
  02618	00000000	 DCD         |??_C@_1CC@KMPFMANC@?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?$AA@|
  0261c		 |$LN66@COM_Init|
  0261c	00000000	 DCD         |??_C@_1FK@GNPHIAEF@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5?$AAd?$AAe?$AAv?$AAk?$AAe?$AAy?$AAp?$AAa?$AAt?$AAh?$AA?0?$AA?5?$AAC?$AAO?$AAM?$AA_?$AAI@|
  02620		 |$LN67@COM_Init|
  02620	00000000	 DCD         |??_C@_1CC@OIKDCOFG@?$AAT?$AAr?$AAy?$AA?5?$AAt?$AAo?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5?$AA?$CF?$AAs?$AA?$AN?$AA?6?$AA?$AA@|
  02624		 |$LN68@COM_Init|
  02624	00000000	 DCD         |??_C@_1FA@BECDDKGM@?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAe?$AAv?$AAe?$AAn?$AAt?$AA?0?$AA?5?$AAC?$AAO?$AAM?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?5?$AAf@|
  02628		 |$LN69@COM_Init|
  02628	00000000	 DCD         |??_C@_1HG@FCOJGPAE@?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAm?$AAe?$AAm?$AAo?$AAr?$AAy?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAp?$AAS?$AAe?$AAr@|
  0262c		 |$LN70@COM_Init|
  0262c	00000000	 DCD         |??_C@_1BI@GFHIOEJL@?$AA?$CL?$AAC?$AAO?$AAM?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@|
  02630		 |$M41628|

			 ENDP  ; |COM_Init|

	EXPORT	|??_C@_1CE@HHPKLFBI@?$AAH?$AAW?$AA?5?$AAO?$AAp?$AAe?$AAn?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?4?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FG@FDKJAEDJ@?$AAC?$AAO?$AAM?$AA_?$AAO?$AAp?$AAe?$AAn?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAS?$AAt?$AAa?$AAr?$AAt?$AAD?$AAi?$AAs?$AAp?$AAa?$AAt?$AAc?$AAh?$AAT?$AAh@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FA@GFAOJBEN@?$AAC?$AAO?$AAM?$AA_?$AAO?$AAp?$AAe?$AAn?$AA?3?$AA?5?$AAS?$AAt?$AAa?$AAr?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAD?$AAi?$AAs?$AAp?$AAa?$AAt?$AAc?$AAh?$AAT?$AAh?$AAr?$AAe?$AAa@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EK@MCEDHMPN@?$AAC?$AAO?$AAM?$AA_?$AAO?$AAp?$AAe?$AAn?$AA?3?$AA?5?$AAF?$AAi?$AAr?$AAs?$AAt?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5?$AA?3?$AA?5?$AAD?$AAo?$AA?5?$AAI?$AAn?$AAi?$AAt?$AA?5?$AAx@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EK@MFLOMJPC@?$AA?9?$AAC?$AAO?$AAM?$AA_?$AAO?$AAp?$AAe?$AAn?$AA?5?$AAh?$AAa?$AAn?$AAd?$AAl?$AAe?$AA?5?$AAx?$AA?$CF?$AAX?$AA?0?$AA?5?$AAx?$AA?$CF?$AAX?$AA?0?$AA?5?$AAR?$AAe?$AAf?$AA?5?$AAx@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GC@CLBBDJNN@?$AAC?$AAO?$AAM?$AA_?$AAO?$AAp?$AAe?$AAn?$AA?3?$AA?5?$AAA?$AAc?$AAc?$AAe?$AAs?$AAs?$AA?5?$AAp?$AAe?$AAr?$AAm?$AAi?$AAs?$AAs?$AAi?$AAo?$AAn?$AA?5?$AAh?$AAa?$AAn?$AAd@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HC@GGJLMGKF@?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAm?$AAe?$AAm?$AAo?$AAr?$AAy?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAp?$AAO?$AAp?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HA@GJBLLAJC@?$AAO?$AAp?$AAe?$AAn?$AA?5?$AAr?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAe?$AAd?$AA?5?$AAa?$AAc?$AAc?$AAe?$AAs?$AAs?$AA?5?$AA?$CF?$AAx?$AA?0?$AA?5?$AAh?$AAa?$AAn?$AAd?$AAl?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EK@IHGIHNNE@?$AAO?$AAp?$AAe?$AAn?$AA?5?$AAa?$AAt?$AAt?$AAe?$AAm?$AAp?$AAt?$AAe?$AAd?$AA?5?$AAo?$AAn?$AA?5?$AAu?$AAn?$AAi?$AAn?$AAi?$AAt?$AAe?$AAd?$AA?5?$AAd?$AAe?$AAv?$AAi?$AAc@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FM@OGLFDPL@?$AA?$CL?$AAC?$AAO?$AAM?$AA_?$AAO?$AAp?$AAe?$AAn?$AA?5?$AAh?$AAa?$AAn?$AAd?$AAl?$AAe?$AA?5?$AAx?$AA?$CF?$AAX?$AA?0?$AA?5?$AAa?$AAc?$AAc?$AAe?$AAs?$AAs?$AA?5?$AAx?$AA?$CF?$AAX@| [ DATA ] ; `string'
	EXPORT	|COM_Open|
	IMPORT	|LocalFree|
	IMPORT	|DeleteCriticalSection|
	IMPORT	|SetLastError|

  00040			 AREA	 |.pdata|, PDATA
|$T41680| DCD	|$LN50@COM_Open|
	DCD	0x4002f204

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@HHPKLFBI@?$AAH?$AAW?$AA?5?$AAO?$AAp?$AAe?$AAn?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?4?$AA?$AN?$AA?6?$AA?$AA@| DCB "H"
	DCB	0x0, "W", 0x0, " ", 0x0, "O", 0x0, "p", 0x0, "e", 0x0, "n"
	DCB	0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e"
	DCB	0x0, "d", 0x0, ".", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FG@FDKJAEDJ@?$AAC?$AAO?$AAM?$AA_?$AAO?$AAp?$AAe?$AAn?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAS?$AAt?$AAa?$AAr?$AAt?$AAD?$AAi?$AAs?$AAp?$AAa?$AAt?$AAc?$AAh?$AAT?$AAh@| DCB "C"
	DCB	0x0, "O", 0x0, "M", 0x0, "_", 0x0, "O", 0x0, "p", 0x0, "e"
	DCB	0x0, "n", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "S", 0x0, "t"
	DCB	0x0, "a", 0x0, "r", 0x0, "t", 0x0, "D", 0x0, "i", 0x0, "s"
	DCB	0x0, "p", 0x0, "a", 0x0, "t", 0x0, "c", 0x0, "h", 0x0, "T"
	DCB	0x0, "h", 0x0, "r", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, " "
	DCB	0x0, "x", 0x0, "%", 0x0, "X", 0x0, 0xa, 0x0, 0xd, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FA@GFAOJBEN@?$AAC?$AAO?$AAM?$AA_?$AAO?$AAp?$AAe?$AAn?$AA?3?$AA?5?$AAS?$AAt?$AAa?$AAr?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAD?$AAi?$AAs?$AAp?$AAa?$AAt?$AAc?$AAh?$AAT?$AAh?$AAr?$AAe?$AAa@| DCB "C"
	DCB	0x0, "O", 0x0, "M", 0x0, "_", 0x0, "O", 0x0, "p", 0x0, "e"
	DCB	0x0, "n", 0x0, ":", 0x0, " ", 0x0, "S", 0x0, "t", 0x0, "a"
	DCB	0x0, "r", 0x0, "t", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, " "
	DCB	0x0, "D", 0x0, "i", 0x0, "s", 0x0, "p", 0x0, "a", 0x0, "t"
	DCB	0x0, "c", 0x0, "h", 0x0, "T", 0x0, "h", 0x0, "r", 0x0, "e"
	DCB	0x0, "a", 0x0, "d", 0x0, " ", 0x0, "x", 0x0, "%", 0x0, "X"
	DCB	0x0, 0xa, 0x0, 0xd, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EK@MCEDHMPN@?$AAC?$AAO?$AAM?$AA_?$AAO?$AAp?$AAe?$AAn?$AA?3?$AA?5?$AAF?$AAi?$AAr?$AAs?$AAt?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5?$AA?3?$AA?5?$AAD?$AAo?$AA?5?$AAI?$AAn?$AAi?$AAt?$AA?5?$AAx@| DCB "C"
	DCB	0x0, "O", 0x0, "M", 0x0, "_", 0x0, "O", 0x0, "p", 0x0, "e"
	DCB	0x0, "n", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "i", 0x0, "r"
	DCB	0x0, "s", 0x0, "t", 0x0, " ", 0x0, "o", 0x0, "p", 0x0, "e"
	DCB	0x0, "n", 0x0, " ", 0x0, ":", 0x0, " ", 0x0, "D", 0x0, "o"
	DCB	0x0, " ", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, " "
	DCB	0x0, "x", 0x0, "%", 0x0, "X", 0x0, 0xa, 0x0, 0xd, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EK@MFLOMJPC@?$AA?9?$AAC?$AAO?$AAM?$AA_?$AAO?$AAp?$AAe?$AAn?$AA?5?$AAh?$AAa?$AAn?$AAd?$AAl?$AAe?$AA?5?$AAx?$AA?$CF?$AAX?$AA?0?$AA?5?$AAx?$AA?$CF?$AAX?$AA?0?$AA?5?$AAR?$AAe?$AAf?$AA?5?$AAx@| DCB "-"
	DCB	0x0, "C", 0x0, "O", 0x0, "M", 0x0, "_", 0x0, "O", 0x0, "p"
	DCB	0x0, "e", 0x0, "n", 0x0, " ", 0x0, "h", 0x0, "a", 0x0, "n"
	DCB	0x0, "d", 0x0, "l", 0x0, "e", 0x0, " ", 0x0, "x", 0x0, "%"
	DCB	0x0, "X", 0x0, ",", 0x0, " ", 0x0, "x", 0x0, "%", 0x0, "X"
	DCB	0x0, ",", 0x0, " ", 0x0, "R", 0x0, "e", 0x0, "f", 0x0, " "
	DCB	0x0, "x", 0x0, "%", 0x0, "X", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GC@CLBBDJNN@?$AAC?$AAO?$AAM?$AA_?$AAO?$AAp?$AAe?$AAn?$AA?3?$AA?5?$AAA?$AAc?$AAc?$AAe?$AAs?$AAs?$AA?5?$AAp?$AAe?$AAr?$AAm?$AAi?$AAs?$AAs?$AAi?$AAo?$AAn?$AA?5?$AAh?$AAa?$AAn?$AAd@| DCB "C"
	DCB	0x0, "O", 0x0, "M", 0x0, "_", 0x0, "O", 0x0, "p", 0x0, "e"
	DCB	0x0, "n", 0x0, ":", 0x0, " ", 0x0, "A", 0x0, "c", 0x0, "c"
	DCB	0x0, "e", 0x0, "s", 0x0, "s", 0x0, " ", 0x0, "p", 0x0, "e"
	DCB	0x0, "r", 0x0, "m", 0x0, "i", 0x0, "s", 0x0, "s", 0x0, "i"
	DCB	0x0, "o", 0x0, "n", 0x0, " ", 0x0, "h", 0x0, "a", 0x0, "n"
	DCB	0x0, "d", 0x0, "l", 0x0, "e", 0x0, " ", 0x0, "g", 0x0, "r"
	DCB	0x0, "a", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "x", 0x0, "%", 0x0, "X", 0x0, 0xa, 0x0, 0xd, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HC@GGJLMGKF@?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAm?$AAe?$AAm?$AAo?$AAr?$AAy?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAp?$AAO?$AAp?$AAe@| DCB "E"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "a"
	DCB	0x0, "l", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t"
	DCB	0x0, "i", 0x0, "n", 0x0, "g", 0x0, " ", 0x0, "m", 0x0, "e"
	DCB	0x0, "m", 0x0, "o", 0x0, "r", 0x0, "y", 0x0, " ", 0x0, "f"
	DCB	0x0, "o", 0x0, "r", 0x0, " ", 0x0, "p", 0x0, "O", 0x0, "p"
	DCB	0x0, "e", 0x0, "n", 0x0, "H", 0x0, "e", 0x0, "a", 0x0, "d"
	DCB	0x0, ",", 0x0, " ", 0x0, "C", 0x0, "O", 0x0, "M", 0x0, "_"
	DCB	0x0, "O", 0x0, "p", 0x0, "e", 0x0, "n", 0x0, " ", 0x0, "f"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, 0xa
	DCB	0x0, 0xd, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HA@GJBLLAJC@?$AAO?$AAp?$AAe?$AAn?$AA?5?$AAr?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAe?$AAd?$AA?5?$AAa?$AAc?$AAc?$AAe?$AAs?$AAs?$AA?5?$AA?$CF?$AAx?$AA?0?$AA?5?$AAh?$AAa?$AAn?$AAd?$AAl?$AAe@| DCB "O"
	DCB	0x0, "p", 0x0, "e", 0x0, "n", 0x0, " ", 0x0, "r", 0x0, "e"
	DCB	0x0, "q", 0x0, "u", 0x0, "e", 0x0, "s", 0x0, "t", 0x0, "e"
	DCB	0x0, "d", 0x0, " ", 0x0, "a", 0x0, "c", 0x0, "c", 0x0, "e"
	DCB	0x0, "s", 0x0, "s", 0x0, " ", 0x0, "%", 0x0, "x", 0x0, ","
	DCB	0x0, " ", 0x0, "h", 0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l"
	DCB	0x0, "e", 0x0, " ", 0x0, "x", 0x0, "%", 0x0, "X", 0x0, " "
	DCB	0x0, "a", 0x0, "l", 0x0, "r", 0x0, "e", 0x0, "a", 0x0, "d"
	DCB	0x0, "y", 0x0, " ", 0x0, "h", 0x0, "a", 0x0, "s", 0x0, " "
	DCB	0x0, "x", 0x0, "%", 0x0, "X", 0x0, "!", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EK@IHGIHNNE@?$AAO?$AAp?$AAe?$AAn?$AA?5?$AAa?$AAt?$AAt?$AAe?$AAm?$AAp?$AAt?$AAe?$AAd?$AA?5?$AAo?$AAn?$AA?5?$AAu?$AAn?$AAi?$AAn?$AAi?$AAt?$AAe?$AAd?$AA?5?$AAd?$AAe?$AAv?$AAi?$AAc@| DCB "O"
	DCB	0x0, "p", 0x0, "e", 0x0, "n", 0x0, " ", 0x0, "a", 0x0, "t"
	DCB	0x0, "t", 0x0, "e", 0x0, "m", 0x0, "p", 0x0, "t", 0x0, "e"
	DCB	0x0, "d", 0x0, " ", 0x0, "o", 0x0, "n", 0x0, " ", 0x0, "u"
	DCB	0x0, "n", 0x0, "i", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "e"
	DCB	0x0, "d", 0x0, " ", 0x0, "d", 0x0, "e", 0x0, "v", 0x0, "i"
	DCB	0x0, "c", 0x0, "e", 0x0, "!", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FM@OGLFDPL@?$AA?$CL?$AAC?$AAO?$AAM?$AA_?$AAO?$AAp?$AAe?$AAn?$AA?5?$AAh?$AAa?$AAn?$AAd?$AAl?$AAe?$AA?5?$AAx?$AA?$CF?$AAX?$AA?0?$AA?5?$AAa?$AAc?$AAc?$AAe?$AAs?$AAs?$AA?5?$AAx?$AA?$CF?$AAX@| DCB "+"
	DCB	0x0, "C", 0x0, "O", 0x0, "M", 0x0, "_", 0x0, "O", 0x0, "p"
	DCB	0x0, "e", 0x0, "n", 0x0, " ", 0x0, "h", 0x0, "a", 0x0, "n"
	DCB	0x0, "d", 0x0, "l", 0x0, "e", 0x0, " ", 0x0, "x", 0x0, "%"
	DCB	0x0, "X", 0x0, ",", 0x0, " ", 0x0, "a", 0x0, "c", 0x0, "c"
	DCB	0x0, "e", 0x0, "s", 0x0, "s", 0x0, " ", 0x0, "x", 0x0, "%"
	DCB	0x0, "X", 0x0, ",", 0x0, " ", 0x0, "s", 0x0, "h", 0x0, "a"
	DCB	0x0, "r", 0x0, "e", 0x0, " ", 0x0, "x", 0x0, "%", 0x0, "X"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  02630			 AREA	 |.text|, CODE, ARM

  02630		 |COM_Open| PROC

; 913  : {

  02630		 |$LN50@COM_Open|
  02630	e1a0c00d	 mov         r12, sp
  02634	e92d0007	 stmdb       sp!, {r0 - r2}
  02638	e92d5000	 stmdb       sp!, {r12, lr}
  0263c	e24dd05c	 sub         sp, sp, #0x5C
  02640		 |$M41677|

; 914  :     PHW_INDEP_INFO  pSerialHead = (PHW_INDEP_INFO)pHead;

  02640	e59d3064	 ldr         r3, [sp, #0x64]
  02644	e58d3000	 str         r3, [sp]

; 915  :     PHW_OPEN_INFO   pOpenHead;
; 916  :     PHWOBJ          pHWObj      = pSerialHead->pHWObj;

  02648	e59d3000	 ldr         r3, [sp]
  0264c	e2833028	 add         r3, r3, #0x28
  02650	e5933000	 ldr         r3, [r3]
  02654	e58d3004	 str         r3, [sp, #4]

; 917  : 
; 918  :     DEBUGMSG (ZONE_OPEN|ZONE_FUNCTION, (TEXT("+COM_Open handle x%X, access x%X, share x%X\r\n"),
; 919  :                                         pHead, AccessCode, ShareMode));

  02658	e59f3b70	 ldr         r3, [pc, #0xB70]
  0265c	e5933440	 ldr         r3, [r3, #0x440]
  02660	e2032002	 and         r2, r3, #2
  02664	e59f3b64	 ldr         r3, [pc, #0xB64]
  02668	e5933440	 ldr         r3, [r3, #0x440]
  0266c	e2033a02	 and         r3, r3, #2, 20
  02670	e1923003	 orrs        r3, r2, r3
  02674	0a000007	 beq         |$LN24@COM_Open|
  02678	e59d306c	 ldr         r3, [sp, #0x6C]
  0267c	e59d2068	 ldr         r2, [sp, #0x68]
  02680	e59d1064	 ldr         r1, [sp, #0x64]
  02684	e59f0b68	 ldr         r0, [pc, #0xB68]
  02688	eb000000	 bl          NKDbgPrintfW
  0268c	e3a03001	 mov         r3, #1
  02690	e58d301c	 str         r3, [sp, #0x1C]
  02694	ea000001	 b           |$LN25@COM_Open|
  02698		 |$LN24@COM_Open|
  02698	e3a03000	 mov         r3, #0
  0269c	e58d301c	 str         r3, [sp, #0x1C]
  026a0		 |$LN25@COM_Open|

; 920  : 
; 921  :     // Return NULL if SerialInit failed.
; 922  :     if ( !pSerialHead ) {

  026a0	e59d3000	 ldr         r3, [sp]
  026a4	e3530000	 cmp         r3, #0
  026a8	1a000013	 bne         |$LN21@COM_Open|

; 923  :         DEBUGMSG (ZONE_OPEN|ZONE_ERROR,
; 924  :                   (TEXT("Open attempted on uninited device!\r\n")));

  026ac	e59f3b1c	 ldr         r3, [pc, #0xB1C]
  026b0	e5933440	 ldr         r3, [r3, #0x440]
  026b4	e2032002	 and         r2, r3, #2
  026b8	e59f3b10	 ldr         r3, [pc, #0xB10]
  026bc	e5933440	 ldr         r3, [r3, #0x440]
  026c0	e2033902	 and         r3, r3, #2, 18
  026c4	e1923003	 orrs        r3, r2, r3
  026c8	0a000004	 beq         |$LN26@COM_Open|
  026cc	e59f0b1c	 ldr         r0, [pc, #0xB1C]
  026d0	eb000000	 bl          NKDbgPrintfW
  026d4	e3a03001	 mov         r3, #1
  026d8	e58d3020	 str         r3, [sp, #0x20]
  026dc	ea000001	 b           |$LN27@COM_Open|
  026e0		 |$LN26@COM_Open|
  026e0	e3a03000	 mov         r3, #0
  026e4	e58d3020	 str         r3, [sp, #0x20]
  026e8		 |$LN27@COM_Open|

; 925  :         SetLastError(ERROR_INVALID_HANDLE);

  026e8	e3a00006	 mov         r0, #6
  026ec	eb000000	 bl          SetLastError

; 926  :         return(NULL);

  026f0	e3a03000	 mov         r3, #0
  026f4	e58d3018	 str         r3, [sp, #0x18]
  026f8	ea0002af	 b           |$LN22@COM_Open|
  026fc		 |$LN21@COM_Open|

; 927  :     }
; 928  : 
; 929  :     if (AccessCode & DEVACCESS_BUSNAMESPACE ) {

  026fc	e59d3068	 ldr         r3, [sp, #0x68]
  02700	e3130c01	 tst         r3, #1, 24
  02704	0a000003	 beq         |$LN20@COM_Open|

; 930  :         AccessCode &=~(GENERIC_READ |GENERIC_WRITE|GENERIC_EXECUTE|GENERIC_ALL);

  02708	e59d2068	 ldr         r2, [sp, #0x68]
  0270c	e3e0320f	 mvn         r3, #0xF, 4
  02710	e0023003	 and         r3, r2, r3
  02714	e58d3068	 str         r3, [sp, #0x68]
  02718		 |$LN20@COM_Open|

; 931  :     }
; 932  : 
; 933  :     // Return NULL if opening with access & someone else already has
; 934  :     if ( (AccessCode & (GENERIC_READ | GENERIC_WRITE)) &&
; 935  :          pSerialHead->pAccessOwner ) {

  02718	e59d3068	 ldr         r3, [sp, #0x68]
  0271c	e3130103	 tst         r3, #3, 2
  02720	0a000021	 beq         |$LN19@COM_Open|
  02724	e59d3000	 ldr         r3, [sp]
  02728	e2833c01	 add         r3, r3, #1, 24
  0272c	e5933000	 ldr         r3, [r3]
  02730	e3530000	 cmp         r3, #0
  02734	0a00001c	 beq         |$LN19@COM_Open|

; 936  :         DEBUGMSG (ZONE_OPEN|ZONE_ERROR,
; 937  :                   (TEXT("Open requested access %x, handle x%X already has x%X!\r\n"),
; 938  :                    AccessCode, pSerialHead->pAccessOwner,
; 939  :                    pSerialHead->pAccessOwner->AccessCode));

  02738	e59f3a90	 ldr         r3, [pc, #0xA90]
  0273c	e5933440	 ldr         r3, [r3, #0x440]
  02740	e2032002	 and         r2, r3, #2
  02744	e59f3a84	 ldr         r3, [pc, #0xA84]
  02748	e5933440	 ldr         r3, [r3, #0x440]
  0274c	e2033902	 and         r3, r3, #2, 18
  02750	e1923003	 orrs        r3, r2, r3
  02754	0a00000d	 beq         |$LN28@COM_Open|
  02758	e59d3000	 ldr         r3, [sp]
  0275c	e2833c01	 add         r3, r3, #1, 24
  02760	e5933000	 ldr         r3, [r3]
  02764	e2833004	 add         r3, r3, #4
  02768	e5933000	 ldr         r3, [r3]
  0276c	e59d2000	 ldr         r2, [sp]
  02770	e2822c01	 add         r2, r2, #1, 24
  02774	e5922000	 ldr         r2, [r2]
  02778	e59d1068	 ldr         r1, [sp, #0x68]
  0277c	e59f0a68	 ldr         r0, [pc, #0xA68]
  02780	eb000000	 bl          NKDbgPrintfW
  02784	e3a03001	 mov         r3, #1
  02788	e58d3024	 str         r3, [sp, #0x24]
  0278c	ea000001	 b           |$LN29@COM_Open|
  02790		 |$LN28@COM_Open|
  02790	e3a03000	 mov         r3, #0
  02794	e58d3024	 str         r3, [sp, #0x24]
  02798		 |$LN29@COM_Open|

; 940  :         SetLastError(ERROR_INVALID_ACCESS);

  02798	e3a0000c	 mov         r0, #0xC
  0279c	eb000000	 bl          SetLastError

; 941  :         return(NULL);

  027a0	e3a03000	 mov         r3, #0
  027a4	e58d3018	 str         r3, [sp, #0x18]
  027a8	ea000283	 b           |$LN22@COM_Open|
  027ac		 |$LN19@COM_Open|

; 942  :     }
; 943  : 
; 944  :     // OK, lets allocate an open structure
; 945  :     pOpenHead    =  (PHW_OPEN_INFO)LocalAlloc(LPTR, sizeof(HW_OPEN_INFO));

  027ac	e3a0103c	 mov         r1, #0x3C
  027b0	e3a00040	 mov         r0, #0x40
  027b4	eb000000	 bl          LocalAlloc
  027b8	e58d0028	 str         r0, [sp, #0x28]
  027bc	e59d3028	 ldr         r3, [sp, #0x28]
  027c0	e58d3008	 str         r3, [sp, #8]

; 946  :     if ( !pOpenHead ) {

  027c4	e59d3008	 ldr         r3, [sp, #8]
  027c8	e3530000	 cmp         r3, #0
  027cc	1a000011	 bne         |$LN18@COM_Open|

; 947  :         DEBUGMSG(ZONE_INIT | ZONE_ERROR,
; 948  :                  (TEXT("Error allocating memory for pOpenHead, COM_Open failed\n\r")));

  027d0	e59f39f8	 ldr         r3, [pc, #0x9F8]
  027d4	e5933440	 ldr         r3, [r3, #0x440]
  027d8	e2032001	 and         r2, r3, #1
  027dc	e59f39ec	 ldr         r3, [pc, #0x9EC]
  027e0	e5933440	 ldr         r3, [r3, #0x440]
  027e4	e2033902	 and         r3, r3, #2, 18
  027e8	e1923003	 orrs        r3, r2, r3
  027ec	0a000004	 beq         |$LN30@COM_Open|
  027f0	e59f09f0	 ldr         r0, [pc, #0x9F0]
  027f4	eb000000	 bl          NKDbgPrintfW
  027f8	e3a03001	 mov         r3, #1
  027fc	e58d302c	 str         r3, [sp, #0x2C]
  02800	ea000001	 b           |$LN31@COM_Open|
  02804		 |$LN30@COM_Open|
  02804	e3a03000	 mov         r3, #0
  02808	e58d302c	 str         r3, [sp, #0x2C]
  0280c		 |$LN31@COM_Open|

; 949  :         return(NULL);

  0280c	e3a03000	 mov         r3, #0
  02810	e58d3018	 str         r3, [sp, #0x18]
  02814	ea000268	 b           |$LN22@COM_Open|
  02818		 |$LN18@COM_Open|

; 950  :     }
; 951  : 
; 952  :     // Init the structure
; 953  :     pOpenHead->pSerialHead = pSerialHead;  // pointer back to our parent

  02818	e59d2000	 ldr         r2, [sp]
  0281c	e59d3008	 ldr         r3, [sp, #8]
  02820	e5832000	 str         r2, [r3]

; 954  :     pOpenHead->StructUsers = 0;

  02824	e59d3008	 ldr         r3, [sp, #8]
  02828	e283200c	 add         r2, r3, #0xC
  0282c	e3a03000	 mov         r3, #0
  02830	e5823000	 str         r3, [r2]

; 955  :     pOpenHead->AccessCode = AccessCode;

  02834	e59d3008	 ldr         r3, [sp, #8]
  02838	e2832004	 add         r2, r3, #4
  0283c	e59d3068	 ldr         r3, [sp, #0x68]
  02840	e5823000	 str         r3, [r2]

; 956  :     pOpenHead->ShareMode = ShareMode;

  02844	e59d3008	 ldr         r3, [sp, #8]
  02848	e2832008	 add         r2, r3, #8
  0284c	e59d306c	 ldr         r3, [sp, #0x6C]
  02850	e5823000	 str         r3, [r2]

; 957  :     pOpenHead->CommEvents.hCommEvent = CreateEvent(NULL, FALSE, FALSE, NULL);

  02854	e3a03000	 mov         r3, #0
  02858	e3a02000	 mov         r2, #0
  0285c	e3a01000	 mov         r1, #0
  02860	e3a00000	 mov         r0, #0
  02864	eb000000	 bl          CreateEventW
  02868	e58d0030	 str         r0, [sp, #0x30]
  0286c	e59d3008	 ldr         r3, [sp, #8]
  02870	e2832010	 add         r2, r3, #0x10
  02874	e59d3030	 ldr         r3, [sp, #0x30]
  02878	e5823000	 str         r3, [r2]

; 958  :     pOpenHead->CommEvents.fEventMask = 0;

  0287c	e59d3008	 ldr         r3, [sp, #8]
  02880	e2832014	 add         r2, r3, #0x14
  02884	e3a03000	 mov         r3, #0
  02888	e5823000	 str         r3, [r2]

; 959  :     pOpenHead->CommEvents.fEventData = 0;

  0288c	e59d3008	 ldr         r3, [sp, #8]
  02890	e2832018	 add         r2, r3, #0x18
  02894	e3a03000	 mov         r3, #0
  02898	e5823000	 str         r3, [r2]

; 960  :     pOpenHead->CommEvents.fAbort = 0;

  0289c	e59d3008	 ldr         r3, [sp, #8]
  028a0	e283201c	 add         r2, r3, #0x1C
  028a4	e3a03000	 mov         r3, #0
  028a8	e5823000	 str         r3, [r2]

; 961  :     InitializeCriticalSection(&(pOpenHead->CommEvents.EventCS));

  028ac	e59d3008	 ldr         r3, [sp, #8]
  028b0	e2830020	 add         r0, r3, #0x20
  028b4	eb000000	 bl          InitializeCriticalSection

; 962  : 
; 963  :     // if we have access permissions, note it in pSerialhead
; 964  :     if ( AccessCode & (GENERIC_READ | GENERIC_WRITE) ) {

  028b8	e59d3068	 ldr         r3, [sp, #0x68]
  028bc	e3130103	 tst         r3, #3, 2
  028c0	0a000013	 beq         |$LN17@COM_Open|

; 965  :         DEBUGMSG(ZONE_INIT|ZONE_CLOSE,
; 966  :                  (TEXT("COM_Open: Access permission handle granted x%X\n\r"),
; 967  :                   pOpenHead));

  028c4	e59f3904	 ldr         r3, [pc, #0x904]
  028c8	e5933440	 ldr         r3, [r3, #0x440]
  028cc	e2032001	 and         r2, r3, #1
  028d0	e59f38f8	 ldr         r3, [pc, #0x8F8]
  028d4	e5933440	 ldr         r3, [r3, #0x440]
  028d8	e2033010	 and         r3, r3, #0x10
  028dc	e1923003	 orrs        r3, r2, r3
  028e0	0a000005	 beq         |$LN32@COM_Open|
  028e4	e59d1008	 ldr         r1, [sp, #8]
  028e8	e59f08f4	 ldr         r0, [pc, #0x8F4]
  028ec	eb000000	 bl          NKDbgPrintfW
  028f0	e3a03001	 mov         r3, #1
  028f4	e58d3034	 str         r3, [sp, #0x34]
  028f8	ea000001	 b           |$LN33@COM_Open|
  028fc		 |$LN32@COM_Open|
  028fc	e3a03000	 mov         r3, #0
  02900	e58d3034	 str         r3, [sp, #0x34]
  02904		 |$LN33@COM_Open|

; 968  :         pSerialHead->pAccessOwner = pOpenHead;

  02904	e59d3000	 ldr         r3, [sp]
  02908	e2832c01	 add         r2, r3, #1, 24
  0290c	e59d3008	 ldr         r3, [sp, #8]
  02910	e5823000	 str         r3, [r2]
  02914		 |$LN17@COM_Open|

; 969  :     }
; 970  : 
; 971  :     // add this open entry to list of open entries.
; 972  :     // Note that we hold the open CS for the duration of the routine since
; 973  :     // all of our state info is in flux during this time.  In particular,
; 974  :     // without the CS is would be possible for an open & close to be going on
; 975  :     // simultaneously and have bad things happen like spinning a new event
; 976  :     // thread before the old one was gone, etc.
; 977  :     EnterCriticalSection(&(pSerialHead->OpenCS));

  02914	e59d3000	 ldr         r3, [sp]
  02918	e28300ec	 add         r0, r3, #0xEC
  0291c	eb000000	 bl          EnterCriticalSection

; 978  :     InsertHeadList(&pSerialHead->OpenList,
; 979  :                    &pOpenHead->llist);

  02920	e59d3000	 ldr         r3, [sp]
  02924	e28330e4	 add         r3, r3, #0xE4
  02928	e58d3010	 str         r3, [sp, #0x10]
  0292c	e59d3010	 ldr         r3, [sp, #0x10]
  02930	e5933000	 ldr         r3, [r3]
  02934	e58d300c	 str         r3, [sp, #0xC]
  02938	e59d3008	 ldr         r3, [sp, #8]
  0293c	e2832034	 add         r2, r3, #0x34
  02940	e59d300c	 ldr         r3, [sp, #0xC]
  02944	e5823000	 str         r3, [r2]
  02948	e59d3008	 ldr         r3, [sp, #8]
  0294c	e2832038	 add         r2, r3, #0x38
  02950	e59d3010	 ldr         r3, [sp, #0x10]
  02954	e5823000	 str         r3, [r2]
  02958	e59d3008	 ldr         r3, [sp, #8]
  0295c	e2832034	 add         r2, r3, #0x34
  02960	e59d300c	 ldr         r3, [sp, #0xC]
  02964	e2833004	 add         r3, r3, #4
  02968	e5832000	 str         r2, [r3]
  0296c	e59d3008	 ldr         r3, [sp, #8]
  02970	e2832034	 add         r2, r3, #0x34
  02974	e59d3010	 ldr         r3, [sp, #0x10]
  02978	e5832000	 str         r2, [r3]

; 980  : 
; 981  :     // We do special for Power Manger and Device Manager.
; 982  :     if ((pOpenHead->AccessCode &  DEVACCESS_BUSNAMESPACE) || (ShareMode & DEVACCESS_PMEXT_MODE) ) {

  0297c	e59d3008	 ldr         r3, [sp, #8]
  02980	e2833004	 add         r3, r3, #4
  02984	e5933000	 ldr         r3, [r3]
  02988	e3130c01	 tst         r3, #1, 24
  0298c	1a000002	 bne         |$LN12@COM_Open|
  02990	e59d306c	 ldr         r3, [sp, #0x6C]
  02994	e3130102	 tst         r3, #2, 2
  02998	0a00001a	 beq         |$LN13@COM_Open|
  0299c		 |$LN12@COM_Open|

; 983  :         // OK, We do not need initialize pSerailHead and start any thread. return the handle now.
; 984  :         LeaveCriticalSection(&(pSerialHead->OpenCS));

  0299c	e59d3000	 ldr         r3, [sp]
  029a0	e28300ec	 add         r0, r3, #0xEC
  029a4	eb000000	 bl          LeaveCriticalSection

; 985  :         DEBUGMSG (ZONE_OPEN|ZONE_FUNCTION, (TEXT("-COM_Open handle x%X, x%X, Ref x%X\r\n"),
; 986  :                                         pOpenHead, pOpenHead->pSerialHead, pSerialHead->OpenCnt));

  029a8	e59f3820	 ldr         r3, [pc, #0x820]
  029ac	e5933440	 ldr         r3, [r3, #0x440]
  029b0	e2032002	 and         r2, r3, #2
  029b4	e59f3814	 ldr         r3, [pc, #0x814]
  029b8	e5933440	 ldr         r3, [r3, #0x440]
  029bc	e2033a02	 and         r3, r3, #2, 20
  029c0	e1923003	 orrs        r3, r2, r3
  029c4	0a00000a	 beq         |$LN34@COM_Open|
  029c8	e59d3000	 ldr         r3, [sp]
  029cc	e2833090	 add         r3, r3, #0x90
  029d0	e5933000	 ldr         r3, [r3]
  029d4	e59d2008	 ldr         r2, [sp, #8]
  029d8	e5922000	 ldr         r2, [r2]
  029dc	e59d1008	 ldr         r1, [sp, #8]
  029e0	e59f07e4	 ldr         r0, [pc, #0x7E4]
  029e4	eb000000	 bl          NKDbgPrintfW
  029e8	e3a03001	 mov         r3, #1
  029ec	e58d3038	 str         r3, [sp, #0x38]
  029f0	ea000001	 b           |$LN35@COM_Open|
  029f4		 |$LN34@COM_Open|
  029f4	e3a03000	 mov         r3, #0
  029f8	e58d3038	 str         r3, [sp, #0x38]
  029fc		 |$LN35@COM_Open|

; 987  :         return(pOpenHead);

  029fc	e59d3008	 ldr         r3, [sp, #8]
  02a00	e58d3018	 str         r3, [sp, #0x18]
  02a04	ea0001ec	 b           |$LN22@COM_Open|
  02a08		 |$LN13@COM_Open|

; 988  : 
; 989  :     }
; 990  :     //
; 991  : 
; 992  :     // If port not yet opened, we need to do some init
; 993  :     if ( ! pSerialHead->OpenCnt ) {

  02a08	e59d3000	 ldr         r3, [sp]
  02a0c	e2833090	 add         r3, r3, #0x90
  02a10	e5933000	 ldr         r3, [r3]
  02a14	e3530000	 cmp         r3, #0
  02a18	1a000181	 bne         |$LN11@COM_Open|

; 994  :         DEBUGMSG(ZONE_INIT|ZONE_OPEN,
; 995  :                  (TEXT("COM_Open: First open : Do Init x%X\n\r"),
; 996  :                   pOpenHead));

  02a1c	e59f37ac	 ldr         r3, [pc, #0x7AC]
  02a20	e5933440	 ldr         r3, [r3, #0x440]
  02a24	e2032001	 and         r2, r3, #1
  02a28	e59f37a0	 ldr         r3, [pc, #0x7A0]
  02a2c	e5933440	 ldr         r3, [r3, #0x440]
  02a30	e2033002	 and         r3, r3, #2
  02a34	e1923003	 orrs        r3, r2, r3
  02a38	0a000005	 beq         |$LN36@COM_Open|
  02a3c	e59d1008	 ldr         r1, [sp, #8]
  02a40	e59f0798	 ldr         r0, [pc, #0x798]
  02a44	eb000000	 bl          NKDbgPrintfW
  02a48	e3a03001	 mov         r3, #1
  02a4c	e58d303c	 str         r3, [sp, #0x3C]
  02a50	ea000001	 b           |$LN37@COM_Open|
  02a54		 |$LN36@COM_Open|
  02a54	e3a03000	 mov         r3, #0
  02a58	e58d303c	 str         r3, [sp, #0x3C]
  02a5c		 |$LN37@COM_Open|

; 997  : 
; 998  :         if ( pSerialHead->pHWObj->BindFlags & THREAD_AT_OPEN ) {

  02a5c	e59d3000	 ldr         r3, [sp]
  02a60	e2833028	 add         r3, r3, #0x28
  02a64	e5933000	 ldr         r3, [r3]
  02a68	e5933000	 ldr         r3, [r3]
  02a6c	e3130002	 tst         r3, #2
  02a70	0a000026	 beq         |$LN10@COM_Open|

; 999  :             DEBUGMSG(ZONE_INIT|ZONE_OPEN,
; 1000 :                      (TEXT("COM_Open: Starting DispatchThread x%X\n\r"),
; 1001 :                       pOpenHead));

  02a74	e59f3754	 ldr         r3, [pc, #0x754]
  02a78	e5933440	 ldr         r3, [r3, #0x440]
  02a7c	e2032001	 and         r2, r3, #1
  02a80	e59f3748	 ldr         r3, [pc, #0x748]
  02a84	e5933440	 ldr         r3, [r3, #0x440]
  02a88	e2033002	 and         r3, r3, #2
  02a8c	e1923003	 orrs        r3, r2, r3
  02a90	0a000005	 beq         |$LN38@COM_Open|
  02a94	e59d1008	 ldr         r1, [sp, #8]
  02a98	e59f073c	 ldr         r0, [pc, #0x73C]
  02a9c	eb000000	 bl          NKDbgPrintfW
  02aa0	e3a03001	 mov         r3, #1
  02aa4	e58d3040	 str         r3, [sp, #0x40]
  02aa8	ea000001	 b           |$LN39@COM_Open|
  02aac		 |$LN38@COM_Open|
  02aac	e3a03000	 mov         r3, #0
  02ab0	e58d3040	 str         r3, [sp, #0x40]
  02ab4		 |$LN39@COM_Open|

; 1002 :             // Hook the interrupt and start the associated thread.
; 1003 :             if ( ! StartDispatchThread( pSerialHead ) ) {

  02ab4	e59d0000	 ldr         r0, [sp]
  02ab8	eb000000	 bl          StartDispatchThread
  02abc	e58d0044	 str         r0, [sp, #0x44]
  02ac0	e59d3044	 ldr         r3, [sp, #0x44]
  02ac4	e3530000	 cmp         r3, #0
  02ac8	1a000010	 bne         |$LN9@COM_Open|

; 1004 :                 // Failed on InterruptInitialize or CreateThread.  Bail.
; 1005 :                 DEBUGMSG(ZONE_INIT|ZONE_OPEN,
; 1006 :                          (TEXT("COM_Open: Failed StartDispatchThread x%X\n\r"),
; 1007 :                           pOpenHead));

  02acc	e59f36fc	 ldr         r3, [pc, #0x6FC]
  02ad0	e5933440	 ldr         r3, [r3, #0x440]
  02ad4	e2032001	 and         r2, r3, #1
  02ad8	e59f36f0	 ldr         r3, [pc, #0x6F0]
  02adc	e5933440	 ldr         r3, [r3, #0x440]
  02ae0	e2033002	 and         r3, r3, #2
  02ae4	e1923003	 orrs        r3, r2, r3
  02ae8	0a000005	 beq         |$LN40@COM_Open|
  02aec	e59d1008	 ldr         r1, [sp, #8]
  02af0	e59f06e0	 ldr         r0, [pc, #0x6E0]
  02af4	eb000000	 bl          NKDbgPrintfW
  02af8	e3a03001	 mov         r3, #1
  02afc	e58d3048	 str         r3, [sp, #0x48]
  02b00	ea000001	 b           |$LN41@COM_Open|
  02b04		 |$LN40@COM_Open|
  02b04	e3a03000	 mov         r3, #0
  02b08	e58d3048	 str         r3, [sp, #0x48]
  02b0c		 |$LN41@COM_Open|

; 1008 :                 goto OpenFail;

  02b0c	ea000166	 b           |$OpenFail$40404|
  02b10		 |$LN9@COM_Open|
  02b10		 |$LN10@COM_Open|

; 1009 :             }
; 1010 :         }
; 1011 : 
; 1012 :         pSerialHead->RxBytes = 0;

  02b10	e59d3000	 ldr         r3, [sp]
  02b14	e2832050	 add         r2, r3, #0x50
  02b18	e3a03000	 mov         r3, #0
  02b1c	e5823000	 str         r3, [r2]

; 1013 :         pSerialHead->TxBytes = 0;

  02b20	e59d3000	 ldr         r3, [sp]
  02b24	e2832054	 add         r2, r3, #0x54
  02b28	e3a03000	 mov         r3, #0
  02b2c	e5823000	 str         r3, [r2]

; 1014 :         pSerialHead->TxBytesPending = 0;

  02b30	e59d3000	 ldr         r3, [sp]
  02b34	e2832058	 add         r2, r3, #0x58
  02b38	e3a03000	 mov         r3, #0
  02b3c	e5823000	 str         r3, [r2]

; 1015 :         pSerialHead->DroppedBytesMDD = 0;

  02b40	e59d3000	 ldr         r3, [sp]
  02b44	e2832048	 add         r2, r3, #0x48
  02b48	e3a03000	 mov         r3, #0
  02b4c	e5823000	 str         r3, [r2]

; 1016 :         pSerialHead->DroppedBytesPDD = 0;

  02b50	e59d3000	 ldr         r3, [sp]
  02b54	e283204c	 add         r2, r3, #0x4C
  02b58	e3a03000	 mov         r3, #0
  02b5c	e5823000	 str         r3, [r2]

; 1017 : 
; 1018 :         pSerialHead->DCB.DCBlength  = sizeof(DCB);

  02b60	e59d3000	 ldr         r3, [sp]
  02b64	e2832060	 add         r2, r3, #0x60
  02b68	e3a0301c	 mov         r3, #0x1C
  02b6c	e5823000	 str         r3, [r2]

; 1019 :         pSerialHead->DCB.BaudRate   = 9600;

  02b70	e59d3000	 ldr         r3, [sp]
  02b74	e2832064	 add         r2, r3, #0x64
  02b78	e3a03d96	 mov         r3, #0x96, 26
  02b7c	e5823000	 str         r3, [r2]

; 1020 :         pSerialHead->DCB.fBinary    = TRUE;

  02b80	e59d3000	 ldr         r3, [sp]
  02b84	e2833068	 add         r3, r3, #0x68
  02b88	e5933000	 ldr         r3, [r3]
  02b8c	e3832001	 orr         r2, r3, #1
  02b90	e59d3000	 ldr         r3, [sp]
  02b94	e2833068	 add         r3, r3, #0x68
  02b98	e5832000	 str         r2, [r3]

; 1021 :         pSerialHead->DCB.fParity    = FALSE;

  02b9c	e59d3000	 ldr         r3, [sp]
  02ba0	e2833068	 add         r3, r3, #0x68
  02ba4	e5932000	 ldr         r2, [r3]
  02ba8	e3e03002	 mvn         r3, #2
  02bac	e0022003	 and         r2, r2, r3
  02bb0	e59d3000	 ldr         r3, [sp]
  02bb4	e2833068	 add         r3, r3, #0x68
  02bb8	e5832000	 str         r2, [r3]

; 1022 : 
; 1023 :         pSerialHead->DCB.fOutxCtsFlow = FALSE;

  02bbc	e59d3000	 ldr         r3, [sp]
  02bc0	e2833068	 add         r3, r3, #0x68
  02bc4	e5932000	 ldr         r2, [r3]
  02bc8	e3e03004	 mvn         r3, #4
  02bcc	e0022003	 and         r2, r2, r3
  02bd0	e59d3000	 ldr         r3, [sp]
  02bd4	e2833068	 add         r3, r3, #0x68
  02bd8	e5832000	 str         r2, [r3]

; 1024 :         pSerialHead->DCB.fOutxDsrFlow = FALSE;

  02bdc	e59d3000	 ldr         r3, [sp]
  02be0	e2833068	 add         r3, r3, #0x68
  02be4	e5932000	 ldr         r2, [r3]
  02be8	e3e03008	 mvn         r3, #8
  02bec	e0022003	 and         r2, r2, r3
  02bf0	e59d3000	 ldr         r3, [sp]
  02bf4	e2833068	 add         r3, r3, #0x68
  02bf8	e5832000	 str         r2, [r3]

; 1025 :         pSerialHead->DCB.fDtrControl = DTR_CONTROL_ENABLE;

  02bfc	e59d3000	 ldr         r3, [sp]
  02c00	e2833068	 add         r3, r3, #0x68
  02c04	e5932000	 ldr         r2, [r3]
  02c08	e3e03030	 mvn         r3, #0x30
  02c0c	e0023003	 and         r3, r2, r3
  02c10	e3832010	 orr         r2, r3, #0x10
  02c14	e59d3000	 ldr         r3, [sp]
  02c18	e2833068	 add         r3, r3, #0x68
  02c1c	e5832000	 str         r2, [r3]

; 1026 :         pSerialHead->DCB.fDsrSensitivity = FALSE;

  02c20	e59d3000	 ldr         r3, [sp]
  02c24	e2833068	 add         r3, r3, #0x68
  02c28	e5932000	 ldr         r2, [r3]
  02c2c	e3e03040	 mvn         r3, #0x40
  02c30	e0022003	 and         r2, r2, r3
  02c34	e59d3000	 ldr         r3, [sp]
  02c38	e2833068	 add         r3, r3, #0x68
  02c3c	e5832000	 str         r2, [r3]

; 1027 :         pSerialHead->DCB.fTXContinueOnXoff = FALSE;

  02c40	e59d3000	 ldr         r3, [sp]
  02c44	e2833068	 add         r3, r3, #0x68
  02c48	e5932000	 ldr         r2, [r3]
  02c4c	e3e03080	 mvn         r3, #0x80
  02c50	e0022003	 and         r2, r2, r3
  02c54	e59d3000	 ldr         r3, [sp]
  02c58	e2833068	 add         r3, r3, #0x68
  02c5c	e5832000	 str         r2, [r3]

; 1028 :         pSerialHead->DCB.fOutX      = FALSE;

  02c60	e59d3000	 ldr         r3, [sp]
  02c64	e2833068	 add         r3, r3, #0x68
  02c68	e5932000	 ldr         r2, [r3]
  02c6c	e3e03c01	 mvn         r3, #1, 24
  02c70	e0022003	 and         r2, r2, r3
  02c74	e59d3000	 ldr         r3, [sp]
  02c78	e2833068	 add         r3, r3, #0x68
  02c7c	e5832000	 str         r2, [r3]

; 1029 :         pSerialHead->DCB.fInX       = FALSE;

  02c80	e59d3000	 ldr         r3, [sp]
  02c84	e2833068	 add         r3, r3, #0x68
  02c88	e5932000	 ldr         r2, [r3]
  02c8c	e3e03c02	 mvn         r3, #2, 24
  02c90	e0022003	 and         r2, r2, r3
  02c94	e59d3000	 ldr         r3, [sp]
  02c98	e2833068	 add         r3, r3, #0x68
  02c9c	e5832000	 str         r2, [r3]

; 1030 :         pSerialHead->DCB.fErrorChar = FALSE; //NOTE: ignored

  02ca0	e59d3000	 ldr         r3, [sp]
  02ca4	e2833068	 add         r3, r3, #0x68
  02ca8	e5932000	 ldr         r2, [r3]
  02cac	e3e03b01	 mvn         r3, #1, 22
  02cb0	e0022003	 and         r2, r2, r3
  02cb4	e59d3000	 ldr         r3, [sp]
  02cb8	e2833068	 add         r3, r3, #0x68
  02cbc	e5832000	 str         r2, [r3]

; 1031 :         pSerialHead->DCB.fNull      = FALSE; //NOTE: ignored

  02cc0	e59d3000	 ldr         r3, [sp]
  02cc4	e2833068	 add         r3, r3, #0x68
  02cc8	e5932000	 ldr         r2, [r3]
  02ccc	e3e03b02	 mvn         r3, #2, 22
  02cd0	e0022003	 and         r2, r2, r3
  02cd4	e59d3000	 ldr         r3, [sp]
  02cd8	e2833068	 add         r3, r3, #0x68
  02cdc	e5832000	 str         r2, [r3]

; 1032 :         pSerialHead->DCB.fRtsControl = RTS_CONTROL_ENABLE;

  02ce0	e59d3000	 ldr         r3, [sp]
  02ce4	e2833068	 add         r3, r3, #0x68
  02ce8	e5932000	 ldr         r2, [r3]
  02cec	e3e03a03	 mvn         r3, #3, 20
  02cf0	e0023003	 and         r3, r2, r3
  02cf4	e3832a01	 orr         r2, r3, #1, 20
  02cf8	e59d3000	 ldr         r3, [sp]
  02cfc	e2833068	 add         r3, r3, #0x68
  02d00	e5832000	 str         r2, [r3]

; 1033 :         pSerialHead->DCB.fAbortOnError = FALSE; //NOTE: ignored

  02d04	e59d3000	 ldr         r3, [sp]
  02d08	e2833068	 add         r3, r3, #0x68
  02d0c	e5932000	 ldr         r2, [r3]
  02d10	e3e03901	 mvn         r3, #1, 18
  02d14	e0022003	 and         r2, r2, r3
  02d18	e59d3000	 ldr         r3, [sp]
  02d1c	e2833068	 add         r3, r3, #0x68
  02d20	e5832000	 str         r2, [r3]

; 1034 : 
; 1035 :         pSerialHead->DCB.XonLim     = (WORD)((pSerialHead->RxBufferInfo.Length) >> 1) ; // Line up with XP code.

  02d24	e59d3000	 ldr         r3, [sp]
  02d28	e28330a4	 add         r3, r3, #0xA4
  02d2c	e5933000	 ldr         r3, [r3]
  02d30	e1a030a3	 mov         r3, r3, lsr #1
  02d34	e1a02803	 mov         r2, r3, lsl #16
  02d38	e1a02822	 mov         r2, r2, lsr #16
  02d3c	e59d3000	 ldr         r3, [sp]
  02d40	e283306e	 add         r3, r3, #0x6E
  02d44	e1c320b0	 strh        r2, [r3]

; 1036 :         pSerialHead->DCB.XoffLim    = (WORD)((pSerialHead->RxBufferInfo.Length) >> 3) ;

  02d48	e59d3000	 ldr         r3, [sp]
  02d4c	e28330a4	 add         r3, r3, #0xA4
  02d50	e5933000	 ldr         r3, [r3]
  02d54	e1a031a3	 mov         r3, r3, lsr #3
  02d58	e1a02803	 mov         r2, r3, lsl #16
  02d5c	e1a02822	 mov         r2, r2, lsr #16
  02d60	e59d3000	 ldr         r3, [sp]
  02d64	e2833070	 add         r3, r3, #0x70
  02d68	e1c320b0	 strh        r2, [r3]

; 1037 :         if ( pSerialHead->RxBufferInfo.Length - pSerialHead->DCB.XoffLim <= pSerialHead->DCB.XonLim ) { // Checking for illgle value

  02d6c	e59d3000	 ldr         r3, [sp]
  02d70	e28310a4	 add         r1, r3, #0xA4
  02d74	e59d3000	 ldr         r3, [sp]
  02d78	e2833070	 add         r3, r3, #0x70
  02d7c	e1d320b0	 ldrh        r2, [r3]
  02d80	e5913000	 ldr         r3, [r1]
  02d84	e0432002	 sub         r2, r3, r2
  02d88	e59d3000	 ldr         r3, [sp]
  02d8c	e283306e	 add         r3, r3, #0x6E
  02d90	e1d330b0	 ldrh        r3, [r3]
  02d94	e1520003	 cmp         r2, r3
  02d98	8a00000c	 bhi         |$LN8@COM_Open|

; 1038 :             pSerialHead->DCB.XonLim  = (WORD)(pSerialHead->RxBufferInfo.Length - pSerialHead->DCB.XoffLim -1)  ;

  02d9c	e59d3000	 ldr         r3, [sp]
  02da0	e28310a4	 add         r1, r3, #0xA4
  02da4	e59d3000	 ldr         r3, [sp]
  02da8	e2833070	 add         r3, r3, #0x70
  02dac	e1d320b0	 ldrh        r2, [r3]
  02db0	e5913000	 ldr         r3, [r1]
  02db4	e0433002	 sub         r3, r3, r2
  02db8	e2433001	 sub         r3, r3, #1
  02dbc	e1a02803	 mov         r2, r3, lsl #16
  02dc0	e1a02822	 mov         r2, r2, lsr #16
  02dc4	e59d3000	 ldr         r3, [sp]
  02dc8	e283306e	 add         r3, r3, #0x6E
  02dcc	e1c320b0	 strh        r2, [r3]
  02dd0		 |$LN8@COM_Open|

; 1039 :         }
; 1040 : 
; 1041 :         pSerialHead->DCB.ByteSize   = 8;

  02dd0	e59d3000	 ldr         r3, [sp]
  02dd4	e2832072	 add         r2, r3, #0x72
  02dd8	e3a03008	 mov         r3, #8
  02ddc	e5c23000	 strb        r3, [r2]

; 1042 :         pSerialHead->DCB.Parity     = NOPARITY;

  02de0	e59d3000	 ldr         r3, [sp]
  02de4	e2832073	 add         r2, r3, #0x73
  02de8	e3a03000	 mov         r3, #0
  02dec	e5c23000	 strb        r3, [r2]

; 1043 :         pSerialHead->DCB.StopBits   = ONESTOPBIT;

  02df0	e59d3000	 ldr         r3, [sp]
  02df4	e2832074	 add         r2, r3, #0x74
  02df8	e3a03000	 mov         r3, #0
  02dfc	e5c23000	 strb        r3, [r2]

; 1044 : 
; 1045 :         pSerialHead->DCB.XonChar    = X_ON_CHAR;

  02e00	e59d3000	 ldr         r3, [sp]
  02e04	e2832075	 add         r2, r3, #0x75
  02e08	e3a03011	 mov         r3, #0x11
  02e0c	e5c23000	 strb        r3, [r2]

; 1046 :         pSerialHead->DCB.XoffChar   = X_OFF_CHAR;

  02e10	e59d3000	 ldr         r3, [sp]
  02e14	e2832076	 add         r2, r3, #0x76
  02e18	e3a03013	 mov         r3, #0x13
  02e1c	e5c23000	 strb        r3, [r2]

; 1047 :         pSerialHead->DCB.ErrorChar  = ERROR_CHAR;

  02e20	e59d3000	 ldr         r3, [sp]
  02e24	e2832077	 add         r2, r3, #0x77
  02e28	e3a0300d	 mov         r3, #0xD
  02e2c	e5c23000	 strb        r3, [r2]

; 1048 :         pSerialHead->DCB.EofChar    = E_OF_CHAR;

  02e30	e59d3000	 ldr         r3, [sp]
  02e34	e2832078	 add         r2, r3, #0x78
  02e38	e3a0300d	 mov         r3, #0xD
  02e3c	e5c23000	 strb        r3, [r2]

; 1049 :         pSerialHead->DCB.EvtChar    = EVENT_CHAR;

  02e40	e59d3000	 ldr         r3, [sp]
  02e44	e2832079	 add         r2, r3, #0x79
  02e48	e3a0300d	 mov         r3, #0xD
  02e4c	e5c23000	 strb        r3, [r2]

; 1050 : 
; 1051 :         pSerialHead->StopXmit = 0;

  02e50	e59d3000	 ldr         r3, [sp]
  02e54	e2833094	 add         r3, r3, #0x94
  02e58	e5932000	 ldr         r2, [r3]
  02e5c	e3e03004	 mvn         r3, #4
  02e60	e0022003	 and         r2, r2, r3
  02e64	e59d3000	 ldr         r3, [sp]
  02e68	e2833094	 add         r3, r3, #0x94
  02e6c	e5832000	 str         r2, [r3]

; 1052 :         pSerialHead->SentXoff = 0;

  02e70	e59d3000	 ldr         r3, [sp]
  02e74	e2833094	 add         r3, r3, #0x94
  02e78	e5932000	 ldr         r2, [r3]
  02e7c	e3e03008	 mvn         r3, #8
  02e80	e0022003	 and         r2, r2, r3
  02e84	e59d3000	 ldr         r3, [sp]
  02e88	e2833094	 add         r3, r3, #0x94
  02e8c	e5832000	 str         r2, [r3]

; 1053 :         pSerialHead->DtrFlow = 0;

  02e90	e59d3000	 ldr         r3, [sp]
  02e94	e2833094	 add         r3, r3, #0x94
  02e98	e5932000	 ldr         r2, [r3]
  02e9c	e3e03010	 mvn         r3, #0x10
  02ea0	e0022003	 and         r2, r2, r3
  02ea4	e59d3000	 ldr         r3, [sp]
  02ea8	e2833094	 add         r3, r3, #0x94
  02eac	e5832000	 str         r2, [r3]

; 1054 :         pSerialHead->RtsFlow = 0;

  02eb0	e59d3000	 ldr         r3, [sp]
  02eb4	e2833094	 add         r3, r3, #0x94
  02eb8	e5932000	 ldr         r2, [r3]
  02ebc	e3e03020	 mvn         r3, #0x20
  02ec0	e0022003	 and         r2, r2, r3
  02ec4	e59d3000	 ldr         r3, [sp]
  02ec8	e2833094	 add         r3, r3, #0x94
  02ecc	e5832000	 str         r2, [r3]

; 1055 : 
; 1056 :         ApplyDCB (pSerialHead, &(pSerialHead->DCB), FALSE);

  02ed0	e3a02000	 mov         r2, #0
  02ed4	e59d3000	 ldr         r3, [sp]
  02ed8	e2831060	 add         r1, r3, #0x60
  02edc	e59d0000	 ldr         r0, [sp]
  02ee0	eb000000	 bl          ApplyDCB

; 1057 : 
; 1058 :         pHWObj->pFuncTbl->HWSetCommTimeouts(pSerialHead->pHWHead,
; 1059 :                                             &(pSerialHead->CommTimeouts));

  02ee4	e59d3000	 ldr         r3, [sp]
  02ee8	e283107c	 add         r1, r3, #0x7C
  02eec	e59d3000	 ldr         r3, [sp]
  02ef0	e283302c	 add         r3, r3, #0x2C
  02ef4	e5930000	 ldr         r0, [r3]
  02ef8	e59d3004	 ldr         r3, [sp, #4]
  02efc	e2833008	 add         r3, r3, #8
  02f00	e5933000	 ldr         r3, [r3]
  02f04	e2833070	 add         r3, r3, #0x70
  02f08	e5933000	 ldr         r3, [r3]
  02f0c	e1a0e00f	 mov         lr, pc
  02f10	e12fff13	 bx          r3

; 1060 : 
; 1061 :         if ( !pHWObj->pFuncTbl->HWOpen(pSerialHead->pHWHead) ) {

  02f14	e59d3000	 ldr         r3, [sp]
  02f18	e283302c	 add         r3, r3, #0x2C
  02f1c	e5930000	 ldr         r0, [r3]
  02f20	e59d3004	 ldr         r3, [sp, #4]
  02f24	e2833008	 add         r3, r3, #8
  02f28	e5933000	 ldr         r3, [r3]
  02f2c	e283300c	 add         r3, r3, #0xC
  02f30	e5933000	 ldr         r3, [r3]
  02f34	e1a0e00f	 mov         lr, pc
  02f38	e12fff13	 bx          r3
  02f3c	e58d004c	 str         r0, [sp, #0x4C]
  02f40	e59d304c	 ldr         r3, [sp, #0x4C]
  02f44	e3530000	 cmp         r3, #0
  02f48	1a00000f	 bne         |$LN7@COM_Open|

; 1062 :             DEBUGMSG (ZONE_OPEN|ZONE_ERROR, (TEXT("HW Open failed.\r\n")));

  02f4c	e59f327c	 ldr         r3, [pc, #0x27C]
  02f50	e5933440	 ldr         r3, [r3, #0x440]
  02f54	e2032002	 and         r2, r3, #2
  02f58	e59f3270	 ldr         r3, [pc, #0x270]
  02f5c	e5933440	 ldr         r3, [r3, #0x440]
  02f60	e2033902	 and         r3, r3, #2, 18
  02f64	e1923003	 orrs        r3, r2, r3
  02f68	0a000004	 beq         |$LN42@COM_Open|
  02f6c	e59f0260	 ldr         r0, [pc, #0x260]
  02f70	eb000000	 bl          NKDbgPrintfW
  02f74	e3a03001	 mov         r3, #1
  02f78	e58d3050	 str         r3, [sp, #0x50]
  02f7c	ea000001	 b           |$LN43@COM_Open|
  02f80		 |$LN42@COM_Open|
  02f80	e3a03000	 mov         r3, #0
  02f84	e58d3050	 str         r3, [sp, #0x50]
  02f88		 |$LN43@COM_Open|

; 1063 :             goto OpenFail;

  02f88	ea000047	 b           |$OpenFail$40404|
  02f8c		 |$LN7@COM_Open|

; 1064 :         }
; 1065 : 
; 1066 :         pHWObj->pFuncTbl->HWPurgeComm(pSerialHead->pHWHead, PURGE_RXCLEAR);

  02f8c	e3a01008	 mov         r1, #8
  02f90	e59d3000	 ldr         r3, [sp]
  02f94	e283302c	 add         r3, r3, #0x2C
  02f98	e5930000	 ldr         r0, [r3]
  02f9c	e59d3004	 ldr         r3, [sp, #4]
  02fa0	e2833008	 add         r3, r3, #8
  02fa4	e5933000	 ldr         r3, [r3]
  02fa8	e2833068	 add         r3, r3, #0x68
  02fac	e5933000	 ldr         r3, [r3]
  02fb0	e1a0e00f	 mov         lr, pc
  02fb4	e12fff13	 bx          r3

; 1067 :         memset(pSerialHead->RxBufferInfo.RxCharBuffer, 0, pSerialHead->RxBufferInfo.Length);

  02fb8	e59d3000	 ldr         r3, [sp]
  02fbc	e28330a4	 add         r3, r3, #0xA4
  02fc0	e5932000	 ldr         r2, [r3]
  02fc4	e3a01000	 mov         r1, #0
  02fc8	e59d3000	 ldr         r3, [sp]
  02fcc	e28330ac	 add         r3, r3, #0xAC
  02fd0	e5930000	 ldr         r0, [r3]
  02fd4	eb000000	 bl          memset

; 1068 : 
; 1069 :         if ( pHWObj->BindFlags & THREAD_IN_MDD ) {

  02fd8	e59d3004	 ldr         r3, [sp, #4]
  02fdc	e5933000	 ldr         r3, [r3]
  02fe0	e3130003	 tst         r3, #3
  02fe4	0a000006	 beq         |$LN6@COM_Open|

; 1070 :             CeSetThreadPriority(pSerialHead->pDispatchThread,
; 1071 :                                 pSerialHead->Priority256);

  02fe8	e59d3000	 ldr         r3, [sp]
  02fec	e2833044	 add         r3, r3, #0x44
  02ff0	e5931000	 ldr         r1, [r3]
  02ff4	e59d3000	 ldr         r3, [sp]
  02ff8	e2833040	 add         r3, r3, #0x40
  02ffc	e5930000	 ldr         r0, [r3]
  03000	eb000000	 bl          CeSetThreadPriority
  03004		 |$LN6@COM_Open|

; 1072 :         }
; 1073 : 
; 1074 :         RxResetFifo (pSerialHead);

  03004	e59d3000	 ldr         r3, [sp]
  03008	e283209c	 add         r2, r3, #0x9C
  0300c	e3a03000	 mov         r3, #0
  03010	e5823000	 str         r3, [r2]
  03014	e59d3000	 ldr         r3, [sp]
  03018	e28320a0	 add         r2, r3, #0xA0
  0301c	e3a03000	 mov         r3, #0
  03020	e5823000	 str         r3, [r2]
  03024		 |$LN11@COM_Open|

; 1075 :     }
; 1076 : 
; 1077 :     ++(pSerialHead->OpenCnt);

  03024	e59d3000	 ldr         r3, [sp]
  03028	e2833090	 add         r3, r3, #0x90
  0302c	e5933000	 ldr         r3, [r3]
  03030	e2832001	 add         r2, r3, #1
  03034	e59d3000	 ldr         r3, [sp]
  03038	e2833090	 add         r3, r3, #0x90
  0303c	e5832000	 str         r2, [r3]

; 1078 : 
; 1079 :     // OK, we are finally back in a stable state.  Release the CS.
; 1080 :     LeaveCriticalSection(&(pSerialHead->OpenCS));

  03040	e59d3000	 ldr         r3, [sp]
  03044	e28300ec	 add         r0, r3, #0xEC
  03048	eb000000	 bl          LeaveCriticalSection

; 1081 : 
; 1082 :     DEBUGMSG (ZONE_OPEN|ZONE_FUNCTION, (TEXT("-COM_Open handle x%X, x%X, Ref x%X\r\n"),
; 1083 :                                         pOpenHead, pOpenHead->pSerialHead, pSerialHead->OpenCnt));

  0304c	e59f317c	 ldr         r3, [pc, #0x17C]
  03050	e5933440	 ldr         r3, [r3, #0x440]
  03054	e2032002	 and         r2, r3, #2
  03058	e59f3170	 ldr         r3, [pc, #0x170]
  0305c	e5933440	 ldr         r3, [r3, #0x440]
  03060	e2033a02	 and         r3, r3, #2, 20
  03064	e1923003	 orrs        r3, r2, r3
  03068	0a00000a	 beq         |$LN44@COM_Open|
  0306c	e59d3000	 ldr         r3, [sp]
  03070	e2833090	 add         r3, r3, #0x90
  03074	e5933000	 ldr         r3, [r3]
  03078	e59d2008	 ldr         r2, [sp, #8]
  0307c	e5922000	 ldr         r2, [r2]
  03080	e59d1008	 ldr         r1, [sp, #8]
  03084	e59f0140	 ldr         r0, [pc, #0x140]
  03088	eb000000	 bl          NKDbgPrintfW
  0308c	e3a03001	 mov         r3, #1
  03090	e58d3054	 str         r3, [sp, #0x54]
  03094	ea000001	 b           |$LN45@COM_Open|
  03098		 |$LN44@COM_Open|
  03098	e3a03000	 mov         r3, #0
  0309c	e58d3054	 str         r3, [sp, #0x54]
  030a0		 |$LN45@COM_Open|

; 1084 : 
; 1085 :     return(pOpenHead);

  030a0	e59d3008	 ldr         r3, [sp, #8]
  030a4	e58d3018	 str         r3, [sp, #0x18]
  030a8	ea000043	 b           |$LN22@COM_Open|
  030ac		 |$OpenFail$40404|

; 1086 : 
; 1087 :     OpenFail :
; 1088 :     DEBUGMSG (ZONE_OPEN|ZONE_FUNCTION, (TEXT("-COM_Open handle x%X, x%X, Ref x%X\r\n"),
; 1089 :                                         NULL, pOpenHead->pSerialHead, pSerialHead->OpenCnt));

  030ac	e59f311c	 ldr         r3, [pc, #0x11C]
  030b0	e5933440	 ldr         r3, [r3, #0x440]
  030b4	e2032002	 and         r2, r3, #2
  030b8	e59f3110	 ldr         r3, [pc, #0x110]
  030bc	e5933440	 ldr         r3, [r3, #0x440]
  030c0	e2033a02	 and         r3, r3, #2, 20
  030c4	e1923003	 orrs        r3, r2, r3
  030c8	0a00000a	 beq         |$LN46@COM_Open|
  030cc	e59d3000	 ldr         r3, [sp]
  030d0	e2833090	 add         r3, r3, #0x90
  030d4	e5933000	 ldr         r3, [r3]
  030d8	e59d2008	 ldr         r2, [sp, #8]
  030dc	e5922000	 ldr         r2, [r2]
  030e0	e3a01000	 mov         r1, #0
  030e4	e59f00e0	 ldr         r0, [pc, #0xE0]
  030e8	eb000000	 bl          NKDbgPrintfW
  030ec	e3a03001	 mov         r3, #1
  030f0	e58d3058	 str         r3, [sp, #0x58]
  030f4	ea000001	 b           |$LN47@COM_Open|
  030f8		 |$LN46@COM_Open|
  030f8	e3a03000	 mov         r3, #0
  030fc	e58d3058	 str         r3, [sp, #0x58]
  03100		 |$LN47@COM_Open|

; 1090 : 
; 1091 :     SetLastError(ERROR_OPEN_FAILED);

  03100	e3a0006e	 mov         r0, #0x6E
  03104	eb000000	 bl          SetLastError

; 1092 : 
; 1093 :     // If this was the handle with access permission, remove pointer
; 1094 :     if ( pOpenHead == pSerialHead->pAccessOwner )

  03108	e59d3000	 ldr         r3, [sp]
  0310c	e2833c01	 add         r3, r3, #1, 24
  03110	e59d2008	 ldr         r2, [sp, #8]
  03114	e5933000	 ldr         r3, [r3]
  03118	e1520003	 cmp         r2, r3
  0311c	1a000003	 bne         |$LN5@COM_Open|

; 1095 :         pSerialHead->pAccessOwner = NULL;

  03120	e59d3000	 ldr         r3, [sp]
  03124	e2832c01	 add         r2, r3, #1, 24
  03128	e3a03000	 mov         r3, #0
  0312c	e5823000	 str         r3, [r2]
  03130		 |$LN5@COM_Open|

; 1096 : 
; 1097 :     // Remove the Open entry from the linked list
; 1098 :     RemoveEntryList(&pOpenHead->llist);

  03130	e59d3008	 ldr         r3, [sp, #8]
  03134	e2833034	 add         r3, r3, #0x34
  03138	e58d3014	 str         r3, [sp, #0x14]
  0313c	e59d3014	 ldr         r3, [sp, #0x14]
  03140	e2833004	 add         r3, r3, #4
  03144	e5932000	 ldr         r2, [r3]
  03148	e59d3014	 ldr         r3, [sp, #0x14]
  0314c	e5933000	 ldr         r3, [r3]
  03150	e5823000	 str         r3, [r2]
  03154	e59d3014	 ldr         r3, [sp, #0x14]
  03158	e2831004	 add         r1, r3, #4
  0315c	e59d3014	 ldr         r3, [sp, #0x14]
  03160	e5933000	 ldr         r3, [r3]
  03164	e2832004	 add         r2, r3, #4
  03168	e5913000	 ldr         r3, [r1]
  0316c	e5823000	 str         r3, [r2]

; 1099 : 
; 1100 :     // OK, everything is stable so release the critical section
; 1101 :     LeaveCriticalSection(&(pSerialHead->OpenCS));

  03170	e59d3000	 ldr         r3, [sp]
  03174	e28300ec	 add         r0, r3, #0xEC
  03178	eb000000	 bl          LeaveCriticalSection

; 1102 : 
; 1103 :     // Free all data allocated in open
; 1104 :     if ( pOpenHead->CommEvents.hCommEvent )

  0317c	e59d3008	 ldr         r3, [sp, #8]
  03180	e2833010	 add         r3, r3, #0x10
  03184	e5933000	 ldr         r3, [r3]
  03188	e3530000	 cmp         r3, #0
  0318c	0a000003	 beq         |$LN1@COM_Open|

; 1105 :         CloseHandle(pOpenHead->CommEvents.hCommEvent);

  03190	e59d3008	 ldr         r3, [sp, #8]
  03194	e2833010	 add         r3, r3, #0x10
  03198	e5930000	 ldr         r0, [r3]
  0319c	eb000000	 bl          CloseHandle
  031a0		 |$LN1@COM_Open|

; 1106 :     DeleteCriticalSection(&(pOpenHead->CommEvents.EventCS));

  031a0	e59d3008	 ldr         r3, [sp, #8]
  031a4	e2830020	 add         r0, r3, #0x20
  031a8	eb000000	 bl          DeleteCriticalSection

; 1107 :     LocalFree( pOpenHead );

  031ac	e59d0008	 ldr         r0, [sp, #8]
  031b0	eb000000	 bl          LocalFree

; 1108 : 
; 1109 :     return(NULL);

  031b4	e3a03000	 mov         r3, #0
  031b8	e58d3018	 str         r3, [sp, #0x18]
  031bc		 |$LN22@COM_Open|

; 1110 : 
; 1111 : 
; 1112 : }

  031bc	e59d0018	 ldr         r0, [sp, #0x18]
  031c0	e28dd05c	 add         sp, sp, #0x5C
  031c4	e89d6000	 ldmia       sp, {sp, lr}
  031c8	e12fff1e	 bx          lr
  031cc		 |$LN51@COM_Open|
  031cc		 |$LN52@COM_Open|
  031cc	00000000	 DCD         |??_C@_1EK@MFLOMJPC@?$AA?9?$AAC?$AAO?$AAM?$AA_?$AAO?$AAp?$AAe?$AAn?$AA?5?$AAh?$AAa?$AAn?$AAd?$AAl?$AAe?$AA?5?$AAx?$AA?$CF?$AAX?$AA?0?$AA?5?$AAx?$AA?$CF?$AAX?$AA?0?$AA?5?$AAR?$AAe?$AAf?$AA?5?$AAx@|
  031d0		 |$LN53@COM_Open|
  031d0	00000000	 DCD         |dpCurSettings|
  031d4		 |$LN54@COM_Open|
  031d4	00000000	 DCD         |??_C@_1CE@HHPKLFBI@?$AAH?$AAW?$AA?5?$AAO?$AAp?$AAe?$AAn?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?4?$AA?$AN?$AA?6?$AA?$AA@|
  031d8		 |$LN55@COM_Open|
  031d8	00000000	 DCD         |??_C@_1FG@FDKJAEDJ@?$AAC?$AAO?$AAM?$AA_?$AAO?$AAp?$AAe?$AAn?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAS?$AAt?$AAa?$AAr?$AAt?$AAD?$AAi?$AAs?$AAp?$AAa?$AAt?$AAc?$AAh?$AAT?$AAh@|
  031dc		 |$LN56@COM_Open|
  031dc	00000000	 DCD         |??_C@_1FA@GFAOJBEN@?$AAC?$AAO?$AAM?$AA_?$AAO?$AAp?$AAe?$AAn?$AA?3?$AA?5?$AAS?$AAt?$AAa?$AAr?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAD?$AAi?$AAs?$AAp?$AAa?$AAt?$AAc?$AAh?$AAT?$AAh?$AAr?$AAe?$AAa@|
  031e0		 |$LN57@COM_Open|
  031e0	00000000	 DCD         |??_C@_1EK@MCEDHMPN@?$AAC?$AAO?$AAM?$AA_?$AAO?$AAp?$AAe?$AAn?$AA?3?$AA?5?$AAF?$AAi?$AAr?$AAs?$AAt?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5?$AA?3?$AA?5?$AAD?$AAo?$AA?5?$AAI?$AAn?$AAi?$AAt?$AA?5?$AAx@|
  031e4		 |$LN58@COM_Open|
  031e4	00000000	 DCD         |??_C@_1GC@CLBBDJNN@?$AAC?$AAO?$AAM?$AA_?$AAO?$AAp?$AAe?$AAn?$AA?3?$AA?5?$AAA?$AAc?$AAc?$AAe?$AAs?$AAs?$AA?5?$AAp?$AAe?$AAr?$AAm?$AAi?$AAs?$AAs?$AAi?$AAo?$AAn?$AA?5?$AAh?$AAa?$AAn?$AAd@|
  031e8		 |$LN59@COM_Open|
  031e8	00000000	 DCD         |??_C@_1HC@GGJLMGKF@?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAm?$AAe?$AAm?$AAo?$AAr?$AAy?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAp?$AAO?$AAp?$AAe@|
  031ec		 |$LN60@COM_Open|
  031ec	00000000	 DCD         |??_C@_1HA@GJBLLAJC@?$AAO?$AAp?$AAe?$AAn?$AA?5?$AAr?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAe?$AAd?$AA?5?$AAa?$AAc?$AAc?$AAe?$AAs?$AAs?$AA?5?$AA?$CF?$AAx?$AA?0?$AA?5?$AAh?$AAa?$AAn?$AAd?$AAl?$AAe@|
  031f0		 |$LN61@COM_Open|
  031f0	00000000	 DCD         |??_C@_1EK@IHGIHNNE@?$AAO?$AAp?$AAe?$AAn?$AA?5?$AAa?$AAt?$AAt?$AAe?$AAm?$AAp?$AAt?$AAe?$AAd?$AA?5?$AAo?$AAn?$AA?5?$AAu?$AAn?$AAi?$AAn?$AAi?$AAt?$AAe?$AAd?$AA?5?$AAd?$AAe?$AAv?$AAi?$AAc@|
  031f4		 |$LN62@COM_Open|
  031f4	00000000	 DCD         |??_C@_1FM@OGLFDPL@?$AA?$CL?$AAC?$AAO?$AAM?$AA_?$AAO?$AAp?$AAe?$AAn?$AA?5?$AAh?$AAa?$AAn?$AAd?$AAl?$AAe?$AA?5?$AAx?$AA?$CF?$AAX?$AA?0?$AA?5?$AAa?$AAc?$AAc?$AAe?$AAs?$AAs?$AA?5?$AAx?$AA?$CF?$AAX@|
  031f8		 |$M41678|

			 ENDP  ; |COM_Open|

	EXPORT	|??_C@_1CA@KJOIAGGH@?$AA?9?$AAC?$AAO?$AAM?$AA_?$AAP?$AAr?$AAe?$AAC?$AAl?$AAo?$AAs?$AAe?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EK@NAJGEFLJ@?$AA?$CB?$AA?$CB?$AAP?$AAr?$AAe?$AAC?$AAl?$AAo?$AAs?$AAe?$AA?5?$AAo?$AAf?$AA?5?$AAn?$AAo?$AAn?$AA?9?$AAo?$AAp?$AAe?$AAn?$AA?5?$AAs?$AAe?$AAr?$AAi?$AAa?$AAl?$AA?5?$AAp?$AAo@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FM@KBMCIDEH@?$AAC?$AAO?$AAM?$AA_?$AAP?$AAr?$AAe?$AAC?$AAl?$AAo?$AAs?$AAe?$AA?3?$AA?5?$AAs?$AAe?$AAr?$AAi?$AAa?$AAl?$AA?5?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?5?$AAt?$AAo?$AA?5?$AAe?$AAx@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FE@NPNGHGCB@?$AAC?$AAO?$AAM?$AA_?$AAP?$AAr?$AAe?$AAC?$AAl?$AAo?$AAs?$AAe?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?5?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?5?$AAi?$AAn?$AA?5?$AAM?$AAD?$AAD?$AA?5?$AAf?$AAu@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FA@EDDADDPP@?$AA?$CB?$AA?$CB?$AAC?$AAO?$AAM?$AA_?$AAP?$AAr?$AAe?$AAC?$AAl?$AAo?$AAs?$AAe?$AA?3?$AA?5?$AAp?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAH?$AAe?$AAa?$AAd?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN@| [ DATA ] ; `string'
	EXPORT	|COM_PreClose|

  00048			 AREA	 |.pdata|, PDATA
|$T41708| DCD	|$LN20@COM_PreClo|
	DCD	0x4000aa04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CA@KJOIAGGH@?$AA?9?$AAC?$AAO?$AAM?$AA_?$AAP?$AAr?$AAe?$AAC?$AAl?$AAo?$AAs?$AAe?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "C", 0x0, "O", 0x0, "M", 0x0, "_", 0x0, "P", 0x0, "r"
	DCB	0x0, "e", 0x0, "C", 0x0, "l", 0x0, "o", 0x0, "s", 0x0, "e"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EK@NAJGEFLJ@?$AA?$CB?$AA?$CB?$AAP?$AAr?$AAe?$AAC?$AAl?$AAo?$AAs?$AAe?$AA?5?$AAo?$AAf?$AA?5?$AAn?$AAo?$AAn?$AA?9?$AAo?$AAp?$AAe?$AAn?$AA?5?$AAs?$AAe?$AAr?$AAi?$AAa?$AAl?$AA?5?$AAp?$AAo@| DCB "!"
	DCB	0x0, "!", 0x0, "P", 0x0, "r", 0x0, "e", 0x0, "C", 0x0, "l"
	DCB	0x0, "o", 0x0, "s", 0x0, "e", 0x0, " ", 0x0, "o", 0x0, "f"
	DCB	0x0, " ", 0x0, "n", 0x0, "o", 0x0, "n", 0x0, "-", 0x0, "o"
	DCB	0x0, "p", 0x0, "e", 0x0, "n", 0x0, " ", 0x0, "s", 0x0, "e"
	DCB	0x0, "r", 0x0, "i", 0x0, "a", 0x0, "l", 0x0, " ", 0x0, "p"
	DCB	0x0, "o", 0x0, "r", 0x0, "t", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FM@KBMCIDEH@?$AAC?$AAO?$AAM?$AA_?$AAP?$AAr?$AAe?$AAC?$AAl?$AAo?$AAs?$AAe?$AA?3?$AA?5?$AAs?$AAe?$AAr?$AAi?$AAa?$AAl?$AA?5?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?5?$AAt?$AAo?$AA?5?$AAe?$AAx@| DCB "C"
	DCB	0x0, "O", 0x0, "M", 0x0, "_", 0x0, "P", 0x0, "r", 0x0, "e"
	DCB	0x0, "C", 0x0, "l", 0x0, "o", 0x0, "s", 0x0, "e", 0x0, ":"
	DCB	0x0, " ", 0x0, "s", 0x0, "e", 0x0, "r", 0x0, "i", 0x0, "a"
	DCB	0x0, "l", 0x0, " ", 0x0, "u", 0x0, "s", 0x0, "e", 0x0, "r"
	DCB	0x0, "s", 0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "e"
	DCB	0x0, "x", 0x0, "i", 0x0, "t", 0x0, ",", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, " ", 0x0, "l", 0x0, "e", 0x0, "f", 0x0, "t"
	DCB	0x0, 0xa, 0x0, 0xd, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FE@NPNGHGCB@?$AAC?$AAO?$AAM?$AA_?$AAP?$AAr?$AAe?$AAC?$AAl?$AAo?$AAs?$AAe?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?5?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?5?$AAi?$AAn?$AA?5?$AAM?$AAD?$AAD?$AA?5?$AAf?$AAu@| DCB "C"
	DCB	0x0, "O", 0x0, "M", 0x0, "_", 0x0, "P", 0x0, "r", 0x0, "e"
	DCB	0x0, "C", 0x0, "l", 0x0, "o", 0x0, "s", 0x0, "e", 0x0, ":"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, "u", 0x0, "s"
	DCB	0x0, "e", 0x0, "r", 0x0, "s", 0x0, " ", 0x0, "i", 0x0, "n"
	DCB	0x0, " ", 0x0, "M", 0x0, "D", 0x0, "D", 0x0, " ", 0x0, "f"
	DCB	0x0, "u", 0x0, "n", 0x0, "c", 0x0, "t", 0x0, "i", 0x0, "o"
	DCB	0x0, "n", 0x0, "s", 0x0, 0xa, 0x0, 0xd, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FA@EDDADDPP@?$AA?$CB?$AA?$CB?$AAC?$AAO?$AAM?$AA_?$AAP?$AAr?$AAe?$AAC?$AAl?$AAo?$AAs?$AAe?$AA?3?$AA?5?$AAp?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAH?$AAe?$AAa?$AAd?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN@| DCB "!"
	DCB	0x0, "!", 0x0, "C", 0x0, "O", 0x0, "M", 0x0, "_", 0x0, "P"
	DCB	0x0, "r", 0x0, "e", 0x0, "C", 0x0, "l", 0x0, "o", 0x0, "s"
	DCB	0x0, "e", 0x0, ":", 0x0, " ", 0x0, "p", 0x0, "S", 0x0, "e"
	DCB	0x0, "r", 0x0, "i", 0x0, "a", 0x0, "l", 0x0, "H", 0x0, "e"
	DCB	0x0, "a", 0x0, "d", 0x0, " ", 0x0, "=", 0x0, "=", 0x0, " "
	DCB	0x0, "N", 0x0, "U", 0x0, "L", 0x0, "L", 0x0, "!", 0x0, "!"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  031f8			 AREA	 |.text|, CODE, ARM

  031f8		 |COM_PreClose| PROC

; 1128 : {

  031f8		 |$LN20@COM_PreClo|
  031f8	e1a0c00d	 mov         r12, sp
  031fc	e92d0001	 stmdb       sp!, {r0}
  03200	e92d5000	 stmdb       sp!, {r12, lr}
  03204	e24dd020	 sub         sp, sp, #0x20
  03208		 |$M41705|

; 1129 :     PHW_INDEP_INFO  pSerialHead = pOpenHead->pSerialHead;

  03208	e59d3028	 ldr         r3, [sp, #0x28]
  0320c	e5933000	 ldr         r3, [r3]
  03210	e58d3000	 str         r3, [sp]

; 1130 :     PHWOBJ          pHWObj;
; 1131 : 
; 1132 :     if ( !pSerialHead ) {

  03214	e59d3000	 ldr         r3, [sp]
  03218	e3530000	 cmp         r3, #0
  0321c	1a00000d	 bne         |$LN5@COM_PreClo|

; 1133 :         DEBUGMSG (ZONE_ERROR, (TEXT("!!COM_PreClose: pSerialHead == NULL!!\r\n")));

  03220	e59f3264	 ldr         r3, [pc, #0x264]
  03224	e5933440	 ldr         r3, [r3, #0x440]
  03228	e3130902	 tst         r3, #2, 18
  0322c	0a000004	 beq         |$LN8@COM_PreClo|
  03230	e59f0264	 ldr         r0, [pc, #0x264]
  03234	eb000000	 bl          NKDbgPrintfW
  03238	e3a03001	 mov         r3, #1
  0323c	e58d300c	 str         r3, [sp, #0xC]
  03240	ea000001	 b           |$LN9@COM_PreClo|
  03244		 |$LN8@COM_PreClo|
  03244	e3a03000	 mov         r3, #0
  03248	e58d300c	 str         r3, [sp, #0xC]
  0324c		 |$LN9@COM_PreClo|

; 1134 :         return FALSE;

  0324c	e3a03000	 mov         r3, #0
  03250	e58d3008	 str         r3, [sp, #8]
  03254	ea000087	 b           |$LN6@COM_PreClo|
  03258		 |$LN5@COM_PreClo|

; 1135 :     }
; 1136 :     pHWObj = (PHWOBJ)pSerialHead->pHWObj;

  03258	e59d3000	 ldr         r3, [sp]
  0325c	e2833028	 add         r3, r3, #0x28
  03260	e5933000	 ldr         r3, [r3]
  03264	e58d3004	 str         r3, [sp, #4]

; 1137 : 
; 1138 :     // Use the OpenCS to make sure we don't collide with an in-progress open.
; 1139 :     EnterCriticalSection(&(pSerialHead->OpenCS));

  03268	e59d3000	 ldr         r3, [sp]
  0326c	e28300ec	 add         r0, r3, #0xEC
  03270	eb000000	 bl          EnterCriticalSection

; 1140 :     if (!(pOpenHead->AccessCode & DEVACCESS_BUSNAMESPACE)) {

  03274	e59d3028	 ldr         r3, [sp, #0x28]
  03278	e2833004	 add         r3, r3, #4
  0327c	e5933000	 ldr         r3, [r3]
  03280	e3130c01	 tst         r3, #1, 24
  03284	1a000067	 bne         |$LN4@COM_PreClo|

; 1141 :         if ( pSerialHead->OpenCnt ) {

  03288	e59d3000	 ldr         r3, [sp]
  0328c	e2833090	 add         r3, r3, #0x90
  03290	e5933000	 ldr         r3, [r3]
  03294	e3530000	 cmp         r3, #0
  03298	0a000055	 beq         |$LN3@COM_PreClo|

; 1142 :             DEBUGMSG(ZONE_INIT|ZONE_CLOSE,
; 1143 :                      (TEXT("COM_PreClose: %d users in MDD functions\n\r"),pOpenHead->StructUsers));

  0329c	e59f31e8	 ldr         r3, [pc, #0x1E8]
  032a0	e5933440	 ldr         r3, [r3, #0x440]
  032a4	e2032001	 and         r2, r3, #1
  032a8	e59f31dc	 ldr         r3, [pc, #0x1DC]
  032ac	e5933440	 ldr         r3, [r3, #0x440]
  032b0	e2033010	 and         r3, r3, #0x10
  032b4	e1923003	 orrs        r3, r2, r3
  032b8	0a000007	 beq         |$LN10@COM_PreClo|
  032bc	e59d3028	 ldr         r3, [sp, #0x28]
  032c0	e283300c	 add         r3, r3, #0xC
  032c4	e5931000	 ldr         r1, [r3]
  032c8	e59f01c8	 ldr         r0, [pc, #0x1C8]
  032cc	eb000000	 bl          NKDbgPrintfW
  032d0	e3a03001	 mov         r3, #1
  032d4	e58d3010	 str         r3, [sp, #0x10]
  032d8	ea000001	 b           |$LN11@COM_PreClo|
  032dc		 |$LN10@COM_PreClo|
  032dc	e3a03000	 mov         r3, #0
  032e0	e58d3010	 str         r3, [sp, #0x10]
  032e4		 |$LN11@COM_PreClo|

; 1144 : 
; 1145 :             // For any open handle, we must free pending waitcommevents
; 1146 :             EnterCriticalSection(&(pOpenHead->CommEvents.EventCS));

  032e4	e59d3028	 ldr         r3, [sp, #0x28]
  032e8	e2830020	 add         r0, r3, #0x20
  032ec	eb000000	 bl          EnterCriticalSection

; 1147 :             pOpenHead->CommEvents.fEventMask = 0;

  032f0	e59d3028	 ldr         r3, [sp, #0x28]
  032f4	e2832014	 add         r2, r3, #0x14
  032f8	e3a03000	 mov         r3, #0
  032fc	e5823000	 str         r3, [r2]

; 1148 :             pOpenHead->CommEvents.fAbort = 1;

  03300	e59d3028	 ldr         r3, [sp, #0x28]
  03304	e283201c	 add         r2, r3, #0x1C
  03308	e3a03001	 mov         r3, #1
  0330c	e5823000	 str         r3, [r2]

; 1149 :             SetEvent(pOpenHead->CommEvents.hCommEvent);

  03310	e59d3028	 ldr         r3, [sp, #0x28]
  03314	e2833010	 add         r3, r3, #0x10
  03318	e5930000	 ldr         r0, [r3]
  0331c	eb000000	 bl          SetEvent

; 1150 :             LeaveCriticalSection(&(pOpenHead->CommEvents.EventCS));

  03320	e59d3028	 ldr         r3, [sp, #0x28]
  03324	e2830020	 add         r0, r3, #0x20
  03328	eb000000	 bl          LeaveCriticalSection

; 1151 : 
; 1152 :             // And only for the handle with access permissions do we
; 1153 :             // have to worry about read, write, etc being blocked.
; 1154 :             if ( pOpenHead->AccessCode & (GENERIC_READ | GENERIC_WRITE) ) {

  0332c	e59d3028	 ldr         r3, [sp, #0x28]
  03330	e2833004	 add         r3, r3, #4
  03334	e5933000	 ldr         r3, [r3]
  03338	e3130103	 tst         r3, #3, 2
  0333c	0a000015	 beq         |$LN2@COM_PreClo|

; 1155 :                 pSerialHead->fAbortRead=1;

  03340	e59d3000	 ldr         r3, [sp]
  03344	e2833094	 add         r3, r3, #0x94
  03348	e5933000	 ldr         r3, [r3]
  0334c	e3832040	 orr         r2, r3, #0x40
  03350	e59d3000	 ldr         r3, [sp]
  03354	e2833094	 add         r3, r3, #0x94
  03358	e5832000	 str         r2, [r3]

; 1156 :                 SetEvent(pSerialHead->hReadEvent);

  0335c	e59d3000	 ldr         r3, [sp]
  03360	e2833034	 add         r3, r3, #0x34
  03364	e5930000	 ldr         r0, [r3]
  03368	eb000000	 bl          SetEvent

; 1157 :                 pSerialHead->fAbortTransmit=1;

  0336c	e59d3000	 ldr         r3, [sp]
  03370	e2833094	 add         r3, r3, #0x94
  03374	e5933000	 ldr         r3, [r3]
  03378	e3832080	 orr         r2, r3, #0x80
  0337c	e59d3000	 ldr         r3, [sp]
  03380	e2833094	 add         r3, r3, #0x94
  03384	e5832000	 str         r2, [r3]

; 1158 :                 SetEvent(pSerialHead->hTransmitEvent);

  03388	e59d3000	 ldr         r3, [sp]
  0338c	e283303c	 add         r3, r3, #0x3C
  03390	e5930000	 ldr         r0, [r3]
  03394	eb000000	 bl          SetEvent
  03398		 |$LN2@COM_PreClo|

; 1159 :             }
; 1160 : 
; 1161 :             DEBUGMSG(ZONE_CLOSE|ZONE_INIT|ZONE_ERROR,
; 1162 :                      (TEXT("COM_PreClose: serial users to exit, %d left\n\r"),
; 1163 :                       pOpenHead->StructUsers));

  03398	e59f30ec	 ldr         r3, [pc, #0xEC]
  0339c	e5933440	 ldr         r3, [r3, #0x440]
  033a0	e2032010	 and         r2, r3, #0x10
  033a4	e59f30e0	 ldr         r3, [pc, #0xE0]
  033a8	e5933440	 ldr         r3, [r3, #0x440]
  033ac	e2033001	 and         r3, r3, #1
  033b0	e1822003	 orr         r2, r2, r3
  033b4	e59f30d0	 ldr         r3, [pc, #0xD0]
  033b8	e5933440	 ldr         r3, [r3, #0x440]
  033bc	e2033902	 and         r3, r3, #2, 18
  033c0	e1923003	 orrs        r3, r2, r3
  033c4	0a000007	 beq         |$LN12@COM_PreClo|
  033c8	e59d3028	 ldr         r3, [sp, #0x28]
  033cc	e283300c	 add         r3, r3, #0xC
  033d0	e5931000	 ldr         r1, [r3]
  033d4	e59f00b8	 ldr         r0, [pc, #0xB8]
  033d8	eb000000	 bl          NKDbgPrintfW
  033dc	e3a03001	 mov         r3, #1
  033e0	e58d3014	 str         r3, [sp, #0x14]
  033e4	ea000001	 b           |$LN13@COM_PreClo|
  033e8		 |$LN12@COM_PreClo|
  033e8	e3a03000	 mov         r3, #0
  033ec	e58d3014	 str         r3, [sp, #0x14]
  033f0		 |$LN13@COM_PreClo|

; 1164 : 
; 1165 :         } else {

  033f0	ea00000c	 b           |$LN1@COM_PreClo|
  033f4		 |$LN3@COM_PreClo|

; 1166 :             DEBUGMSG (ZONE_ERROR, (TEXT("!!PreClose of non-open serial port\r\n")));

  033f4	e59f3090	 ldr         r3, [pc, #0x90]
  033f8	e5933440	 ldr         r3, [r3, #0x440]
  033fc	e3130902	 tst         r3, #2, 18
  03400	0a000004	 beq         |$LN14@COM_PreClo|
  03404	e59f0084	 ldr         r0, [pc, #0x84]
  03408	eb000000	 bl          NKDbgPrintfW
  0340c	e3a03001	 mov         r3, #1
  03410	e58d3018	 str         r3, [sp, #0x18]
  03414	ea000001	 b           |$LN15@COM_PreClo|
  03418		 |$LN14@COM_PreClo|
  03418	e3a03000	 mov         r3, #0
  0341c	e58d3018	 str         r3, [sp, #0x18]
  03420		 |$LN15@COM_PreClo|

; 1167 :             SetLastError(ERROR_INVALID_HANDLE);

  03420	e3a00006	 mov         r0, #6
  03424	eb000000	 bl          SetLastError
  03428		 |$LN1@COM_PreClo|
  03428		 |$LN4@COM_PreClo|

; 1168 :         }
; 1169 :     }
; 1170 :     // OK, other inits/opens can go ahead.
; 1171 :     LeaveCriticalSection(&(pSerialHead->OpenCS));

  03428	e59d3000	 ldr         r3, [sp]
  0342c	e28300ec	 add         r0, r3, #0xEC
  03430	eb000000	 bl          LeaveCriticalSection

; 1172 : 
; 1173 :     DEBUGMSG (ZONE_CLOSE|ZONE_FUNCTION, (TEXT("-COM_PreClose\r\n")));

  03434	e59f3050	 ldr         r3, [pc, #0x50]
  03438	e5933440	 ldr         r3, [r3, #0x440]
  0343c	e2032010	 and         r2, r3, #0x10
  03440	e59f3044	 ldr         r3, [pc, #0x44]
  03444	e5933440	 ldr         r3, [r3, #0x440]
  03448	e2033a02	 and         r3, r3, #2, 20
  0344c	e1923003	 orrs        r3, r2, r3
  03450	0a000004	 beq         |$LN16@COM_PreClo|
  03454	e59f002c	 ldr         r0, [pc, #0x2C]
  03458	eb000000	 bl          NKDbgPrintfW
  0345c	e3a03001	 mov         r3, #1
  03460	e58d301c	 str         r3, [sp, #0x1C]
  03464	ea000001	 b           |$LN17@COM_PreClo|
  03468		 |$LN16@COM_PreClo|
  03468	e3a03000	 mov         r3, #0
  0346c	e58d301c	 str         r3, [sp, #0x1C]
  03470		 |$LN17@COM_PreClo|

; 1174 :     return TRUE;

  03470	e3a03001	 mov         r3, #1
  03474	e58d3008	 str         r3, [sp, #8]
  03478		 |$LN6@COM_PreClo|

; 1175 : }

  03478	e59d0008	 ldr         r0, [sp, #8]
  0347c	e28dd020	 add         sp, sp, #0x20
  03480	e89d6000	 ldmia       sp, {sp, lr}
  03484	e12fff1e	 bx          lr
  03488		 |$LN21@COM_PreClo|
  03488		 |$LN22@COM_PreClo|
  03488	00000000	 DCD         |??_C@_1CA@KJOIAGGH@?$AA?9?$AAC?$AAO?$AAM?$AA_?$AAP?$AAr?$AAe?$AAC?$AAl?$AAo?$AAs?$AAe?$AA?$AN?$AA?6?$AA?$AA@|
  0348c		 |$LN23@COM_PreClo|
  0348c	00000000	 DCD         |dpCurSettings|
  03490		 |$LN24@COM_PreClo|
  03490	00000000	 DCD         |??_C@_1EK@NAJGEFLJ@?$AA?$CB?$AA?$CB?$AAP?$AAr?$AAe?$AAC?$AAl?$AAo?$AAs?$AAe?$AA?5?$AAo?$AAf?$AA?5?$AAn?$AAo?$AAn?$AA?9?$AAo?$AAp?$AAe?$AAn?$AA?5?$AAs?$AAe?$AAr?$AAi?$AAa?$AAl?$AA?5?$AAp?$AAo@|
  03494		 |$LN25@COM_PreClo|
  03494	00000000	 DCD         |??_C@_1FM@KBMCIDEH@?$AAC?$AAO?$AAM?$AA_?$AAP?$AAr?$AAe?$AAC?$AAl?$AAo?$AAs?$AAe?$AA?3?$AA?5?$AAs?$AAe?$AAr?$AAi?$AAa?$AAl?$AA?5?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?5?$AAt?$AAo?$AA?5?$AAe?$AAx@|
  03498		 |$LN26@COM_PreClo|
  03498	00000000	 DCD         |??_C@_1FE@NPNGHGCB@?$AAC?$AAO?$AAM?$AA_?$AAP?$AAr?$AAe?$AAC?$AAl?$AAo?$AAs?$AAe?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?5?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?5?$AAi?$AAn?$AA?5?$AAM?$AAD?$AAD?$AA?5?$AAf?$AAu@|
  0349c		 |$LN27@COM_PreClo|
  0349c	00000000	 DCD         |??_C@_1FA@EDDADDPP@?$AA?$CB?$AA?$CB?$AAC?$AAO?$AAM?$AA_?$AAP?$AAr?$AAe?$AAC?$AAl?$AAo?$AAs?$AAe?$AA?3?$AA?5?$AAp?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAH?$AAe?$AAa?$AAd?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN@|
  034a0		 |$M41706|

			 ENDP  ; |COM_PreClose|

	EXPORT	|??_C@_1BK@GDIGGGLD@?$AA?9?$AAC?$AAO?$AAM?$AA_?$AAC?$AAl?$AAo?$AAs?$AAe?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EE@HJGCIAAB@?$AA?$CB?$AA?$CB?$AAC?$AAl?$AAo?$AAs?$AAe?$AA?5?$AAo?$AAf?$AA?5?$AAn?$AAo?$AAn?$AA?9?$AAo?$AAp?$AAe?$AAn?$AA?5?$AAs?$AAe?$AAr?$AAi?$AAa?$AAl?$AA?5?$AAp?$AAo?$AAr?$AAt?$AA?$AN@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FA@FDHIAIFB@?$AAC?$AAO?$AAM?$AA_?$AAC?$AAl?$AAo?$AAs?$AAe?$AA?3?$AA?5?$AAC?$AAl?$AAo?$AAs?$AAe?$AAd?$AA?5?$AAa?$AAc?$AAc?$AAe?$AAs?$AAs?$AA?5?$AAo?$AAw?$AAn?$AAe?$AAr?$AA?5?$AAh@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EO@KHAJIML@?$AAC?$AAO?$AAM?$AA_?$AAC?$AAl?$AAo?$AAs?$AAe?$AA?5?$AA?3?$AA?5?$AAS?$AAt?$AAo?$AAp?$AAp?$AAi?$AAn?$AAg?$AA?5?$AAD?$AAi?$AAs?$AAp?$AAa?$AAt?$AAc?$AAh?$AA?5?$AAT?$AAh@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DA@HIJABIAN@?$AAR?$AAe?$AAt?$AAu?$AAr?$AAn?$AAe?$AAd?$AA?5?$AAf?$AAr?$AAo?$AAm?$AA?5?$AAH?$AAW?$AAC?$AAl?$AAo?$AAs?$AAe?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DA@EPLPIONK@?$AAA?$AAb?$AAo?$AAu?$AAt?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAH?$AAW?$AAC?$AAl?$AAo?$AAs?$AAe?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1JK@JHJOGNCH@?$AAC?$AAO?$AAM?$AA_?$AAC?$AAl?$AAo?$AAs?$AAe?$AA?3?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?5?$AAh?$AAa?$AAn?$AAd?$AAl?$AAe?$AAs?$AA?$CJ?$AA?5?$AAt?$AAo?$AAt?$AAa?$AAl?$AA?5?$AAR?$AAX@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EK@JBKGBIGA@?$AA?$CB?$AA?$CB?$AAC?$AAO?$AAM?$AA_?$AAC?$AAl?$AAo?$AAs?$AAe?$AA?3?$AA?5?$AAp?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAH?$AAe?$AAa?$AAd?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BK@FMFILLAC@?$AA?$CL?$AAC?$AAO?$AAM?$AA_?$AAC?$AAl?$AAo?$AAs?$AAe?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|COM_Close|
	IMPORT	|SetThreadPriority|

  00050			 AREA	 |.pdata|, PDATA
|$T41739| DCD	|$LN39@COM_Close|
	DCD	0x40013004

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BK@GDIGGGLD@?$AA?9?$AAC?$AAO?$AAM?$AA_?$AAC?$AAl?$AAo?$AAs?$AAe?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "C", 0x0, "O", 0x0, "M", 0x0, "_", 0x0, "C", 0x0, "l"
	DCB	0x0, "o", 0x0, "s", 0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EE@HJGCIAAB@?$AA?$CB?$AA?$CB?$AAC?$AAl?$AAo?$AAs?$AAe?$AA?5?$AAo?$AAf?$AA?5?$AAn?$AAo?$AAn?$AA?9?$AAo?$AAp?$AAe?$AAn?$AA?5?$AAs?$AAe?$AAr?$AAi?$AAa?$AAl?$AA?5?$AAp?$AAo?$AAr?$AAt?$AA?$AN@| DCB "!"
	DCB	0x0, "!", 0x0, "C", 0x0, "l", 0x0, "o", 0x0, "s", 0x0, "e"
	DCB	0x0, " ", 0x0, "o", 0x0, "f", 0x0, " ", 0x0, "n", 0x0, "o"
	DCB	0x0, "n", 0x0, "-", 0x0, "o", 0x0, "p", 0x0, "e", 0x0, "n"
	DCB	0x0, " ", 0x0, "s", 0x0, "e", 0x0, "r", 0x0, "i", 0x0, "a"
	DCB	0x0, "l", 0x0, " ", 0x0, "p", 0x0, "o", 0x0, "r", 0x0, "t"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FA@FDHIAIFB@?$AAC?$AAO?$AAM?$AA_?$AAC?$AAl?$AAo?$AAs?$AAe?$AA?3?$AA?5?$AAC?$AAl?$AAo?$AAs?$AAe?$AAd?$AA?5?$AAa?$AAc?$AAc?$AAe?$AAs?$AAs?$AA?5?$AAo?$AAw?$AAn?$AAe?$AAr?$AA?5?$AAh@| DCB "C"
	DCB	0x0, "O", 0x0, "M", 0x0, "_", 0x0, "C", 0x0, "l", 0x0, "o"
	DCB	0x0, "s", 0x0, "e", 0x0, ":", 0x0, " ", 0x0, "C", 0x0, "l"
	DCB	0x0, "o", 0x0, "s", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "a"
	DCB	0x0, "c", 0x0, "c", 0x0, "e", 0x0, "s", 0x0, "s", 0x0, " "
	DCB	0x0, "o", 0x0, "w", 0x0, "n", 0x0, "e", 0x0, "r", 0x0, " "
	DCB	0x0, "h", 0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e"
	DCB	0x0, 0xa, 0x0, 0xd, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EO@KHAJIML@?$AAC?$AAO?$AAM?$AA_?$AAC?$AAl?$AAo?$AAs?$AAe?$AA?5?$AA?3?$AA?5?$AAS?$AAt?$AAo?$AAp?$AAp?$AAi?$AAn?$AAg?$AA?5?$AAD?$AAi?$AAs?$AAp?$AAa?$AAt?$AAc?$AAh?$AA?5?$AAT?$AAh@| DCB "C"
	DCB	0x0, "O", 0x0, "M", 0x0, "_", 0x0, "C", 0x0, "l", 0x0, "o"
	DCB	0x0, "s", 0x0, "e", 0x0, " ", 0x0, ":", 0x0, " ", 0x0, "S"
	DCB	0x0, "t", 0x0, "o", 0x0, "p", 0x0, "p", 0x0, "i", 0x0, "n"
	DCB	0x0, "g", 0x0, " ", 0x0, "D", 0x0, "i", 0x0, "s", 0x0, "p"
	DCB	0x0, "a", 0x0, "t", 0x0, "c", 0x0, "h", 0x0, " ", 0x0, "T"
	DCB	0x0, "h", 0x0, "r", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@HIJABIAN@?$AAR?$AAe?$AAt?$AAu?$AAr?$AAn?$AAe?$AAd?$AA?5?$AAf?$AAr?$AAo?$AAm?$AA?5?$AAH?$AAW?$AAC?$AAl?$AAo?$AAs?$AAe?$AA?$AN?$AA?6?$AA?$AA@| DCB "R"
	DCB	0x0, "e", 0x0, "t", 0x0, "u", 0x0, "r", 0x0, "n", 0x0, "e"
	DCB	0x0, "d", 0x0, " ", 0x0, "f", 0x0, "r", 0x0, "o", 0x0, "m"
	DCB	0x0, " ", 0x0, "H", 0x0, "W", 0x0, "C", 0x0, "l", 0x0, "o"
	DCB	0x0, "s", 0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@EPLPIONK@?$AAA?$AAb?$AAo?$AAu?$AAt?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAH?$AAW?$AAC?$AAl?$AAo?$AAs?$AAe?$AA?$AN?$AA?6?$AA?$AA@| DCB "A"
	DCB	0x0, "b", 0x0, "o", 0x0, "u", 0x0, "t", 0x0, " ", 0x0, "t"
	DCB	0x0, "o", 0x0, " ", 0x0, "c", 0x0, "a", 0x0, "l", 0x0, "l"
	DCB	0x0, " ", 0x0, "H", 0x0, "W", 0x0, "C", 0x0, "l", 0x0, "o"
	DCB	0x0, "s", 0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JK@JHJOGNCH@?$AAC?$AAO?$AAM?$AA_?$AAC?$AAl?$AAo?$AAs?$AAe?$AA?3?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?5?$AAh?$AAa?$AAn?$AAd?$AAl?$AAe?$AAs?$AA?$CJ?$AA?5?$AAt?$AAo?$AAt?$AAa?$AAl?$AA?5?$AAR?$AAX@| DCB "C"
	DCB	0x0, "O", 0x0, "M", 0x0, "_", 0x0, "C", 0x0, "l", 0x0, "o"
	DCB	0x0, "s", 0x0, "e", 0x0, ":", 0x0, " ", 0x0, "(", 0x0, "%"
	DCB	0x0, "d", 0x0, " ", 0x0, "h", 0x0, "a", 0x0, "n", 0x0, "d"
	DCB	0x0, "l", 0x0, "e", 0x0, "s", 0x0, ")", 0x0, " ", 0x0, "t"
	DCB	0x0, "o", 0x0, "t", 0x0, "a", 0x0, "l", 0x0, " ", 0x0, "R"
	DCB	0x0, "X", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " "
	DCB	0x0, "t", 0x0, "o", 0x0, "t", 0x0, "a", 0x0, "l", 0x0, " "
	DCB	0x0, "T", 0x0, "X", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ","
	DCB	0x0, " ", 0x0, "d", 0x0, "r", 0x0, "o", 0x0, "p", 0x0, "p"
	DCB	0x0, "e", 0x0, "d", 0x0, " ", 0x0, "(", 0x0, "m", 0x0, "d"
	DCB	0x0, "d", 0x0, ",", 0x0, " ", 0x0, "p", 0x0, "d", 0x0, "d"
	DCB	0x0, ")", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, "%"
	DCB	0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EK@JBKGBIGA@?$AA?$CB?$AA?$CB?$AAC?$AAO?$AAM?$AA_?$AAC?$AAl?$AAo?$AAs?$AAe?$AA?3?$AA?5?$AAp?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAH?$AAe?$AAa?$AAd?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL@| DCB "!"
	DCB	0x0, "!", 0x0, "C", 0x0, "O", 0x0, "M", 0x0, "_", 0x0, "C"
	DCB	0x0, "l", 0x0, "o", 0x0, "s", 0x0, "e", 0x0, ":", 0x0, " "
	DCB	0x0, "p", 0x0, "S", 0x0, "e", 0x0, "r", 0x0, "i", 0x0, "a"
	DCB	0x0, "l", 0x0, "H", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, " "
	DCB	0x0, "=", 0x0, "=", 0x0, " ", 0x0, "N", 0x0, "U", 0x0, "L"
	DCB	0x0, "L", 0x0, "!", 0x0, "!", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BK@FMFILLAC@?$AA?$CL?$AAC?$AAO?$AAM?$AA_?$AAC?$AAl?$AAo?$AAs?$AAe?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "C", 0x0, "O", 0x0, "M", 0x0, "_", 0x0, "C", 0x0, "l"
	DCB	0x0, "o", 0x0, "s", 0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Odtp

  034a0			 AREA	 |.text|, CODE, ARM

  034a0		 |COM_Close| PROC

; 1193 : {

  034a0		 |$LN39@COM_Close|
  034a0	e1a0c00d	 mov         r12, sp
  034a4	e92d0001	 stmdb       sp!, {r0}
  034a8	e92d5000	 stmdb       sp!, {r12, lr}
  034ac	e24dd048	 sub         sp, sp, #0x48
  034b0		 |$M41736|

; 1194 :     PHW_INDEP_INFO  pSerialHead = pOpenHead->pSerialHead;

  034b0	e59d3050	 ldr         r3, [sp, #0x50]
  034b4	e5933000	 ldr         r3, [r3]
  034b8	e58d3008	 str         r3, [sp, #8]

; 1195 :     PHWOBJ          pHWObj;
; 1196 :     //int i;
; 1197 :     BOOL            RetCode = TRUE;

  034bc	e3a03001	 mov         r3, #1
  034c0	e58d3010	 str         r3, [sp, #0x10]

; 1198 : 
; 1199 :     DEBUGMSG (ZONE_CLOSE|ZONE_FUNCTION, (TEXT("+COM_Close\r\n")));

  034c4	e59f3470	 ldr         r3, [pc, #0x470]
  034c8	e5933440	 ldr         r3, [r3, #0x440]
  034cc	e2032010	 and         r2, r3, #0x10
  034d0	e59f3464	 ldr         r3, [pc, #0x464]
  034d4	e5933440	 ldr         r3, [r3, #0x440]
  034d8	e2033a02	 and         r3, r3, #2, 20
  034dc	e1923003	 orrs        r3, r2, r3
  034e0	0a000004	 beq         |$LN21@COM_Close|
  034e4	e59f0470	 ldr         r0, [pc, #0x470]
  034e8	eb000000	 bl          NKDbgPrintfW
  034ec	e3a03001	 mov         r3, #1
  034f0	e58d3028	 str         r3, [sp, #0x28]
  034f4	ea000001	 b           |$LN22@COM_Close|
  034f8		 |$LN21@COM_Close|
  034f8	e3a03000	 mov         r3, #0
  034fc	e58d3028	 str         r3, [sp, #0x28]
  03500		 |$LN22@COM_Close|

; 1200 : 
; 1201 :     if ( !pSerialHead ) {

  03500	e59d3008	 ldr         r3, [sp, #8]
  03504	e3530000	 cmp         r3, #0
  03508	1a00000f	 bne         |$LN18@COM_Close|

; 1202 :         DEBUGMSG (ZONE_ERROR, (TEXT("!!COM_Close: pSerialHead == NULL!!\r\n")));

  0350c	e59f3428	 ldr         r3, [pc, #0x428]
  03510	e5933440	 ldr         r3, [r3, #0x440]
  03514	e3130902	 tst         r3, #2, 18
  03518	0a000004	 beq         |$LN23@COM_Close|
  0351c	e59f0434	 ldr         r0, [pc, #0x434]
  03520	eb000000	 bl          NKDbgPrintfW
  03524	e3a03001	 mov         r3, #1
  03528	e58d302c	 str         r3, [sp, #0x2C]
  0352c	ea000001	 b           |$LN24@COM_Close|
  03530		 |$LN23@COM_Close|
  03530	e3a03000	 mov         r3, #0
  03534	e58d302c	 str         r3, [sp, #0x2C]
  03538		 |$LN24@COM_Close|

; 1203 :         SetLastError(ERROR_INVALID_HANDLE);

  03538	e3a00006	 mov         r0, #6
  0353c	eb000000	 bl          SetLastError

; 1204 :         return(FALSE);

  03540	e3a03000	 mov         r3, #0
  03544	e58d301c	 str         r3, [sp, #0x1C]
  03548	ea0000f6	 b           |$LN19@COM_Close|
  0354c		 |$LN18@COM_Close|

; 1205 :     }
; 1206 :     pHWObj = (PHWOBJ)pSerialHead->pHWObj;

  0354c	e59d3008	 ldr         r3, [sp, #8]
  03550	e2833028	 add         r3, r3, #0x28
  03554	e5933000	 ldr         r3, [r3]
  03558	e58d300c	 str         r3, [sp, #0xC]

; 1207 : 
; 1208 :     // Use the OpenCS to make sure we don't collide with an in-progress open.
; 1209 :     EnterCriticalSection(&(pSerialHead->OpenCS));

  0355c	e59d3008	 ldr         r3, [sp, #8]
  03560	e28300ec	 add         r0, r3, #0xEC
  03564	eb000000	 bl          EnterCriticalSection

; 1210 :     // We do special for Power Manger and Device Manager.
; 1211 :     if (pOpenHead->AccessCode & DEVACCESS_BUSNAMESPACE) {

  03568	e59d3050	 ldr         r3, [sp, #0x50]
  0356c	e2833004	 add         r3, r3, #4
  03570	e5933000	 ldr         r3, [r3]
  03574	e3130c01	 tst         r3, #1, 24
  03578	0a00001e	 beq         |$LN17@COM_Close|

; 1212 : 
; 1213 : 
; 1214 :         // Remove the entry from the linked list
; 1215 :         RemoveEntryList(&pOpenHead->llist);

  0357c	e59d3050	 ldr         r3, [sp, #0x50]
  03580	e2833034	 add         r3, r3, #0x34
  03584	e58d3014	 str         r3, [sp, #0x14]
  03588	e59d3014	 ldr         r3, [sp, #0x14]
  0358c	e2833004	 add         r3, r3, #4
  03590	e5932000	 ldr         r2, [r3]
  03594	e59d3014	 ldr         r3, [sp, #0x14]
  03598	e5933000	 ldr         r3, [r3]
  0359c	e5823000	 str         r3, [r2]
  035a0	e59d3014	 ldr         r3, [sp, #0x14]
  035a4	e2831004	 add         r1, r3, #4
  035a8	e59d3014	 ldr         r3, [sp, #0x14]
  035ac	e5933000	 ldr         r3, [r3]
  035b0	e2832004	 add         r2, r3, #4
  035b4	e5913000	 ldr         r3, [r1]
  035b8	e5823000	 str         r3, [r2]

; 1216 : 
; 1217 :         // Free all data allocated in open
; 1218 :         DeleteCriticalSection(&(pOpenHead->CommEvents.EventCS));

  035bc	e59d3050	 ldr         r3, [sp, #0x50]
  035c0	e2830020	 add         r0, r3, #0x20
  035c4	eb000000	 bl          DeleteCriticalSection

; 1219 :         if ( pOpenHead->CommEvents.hCommEvent )

  035c8	e59d3050	 ldr         r3, [sp, #0x50]
  035cc	e2833010	 add         r3, r3, #0x10
  035d0	e5933000	 ldr         r3, [r3]
  035d4	e3530000	 cmp         r3, #0
  035d8	0a000003	 beq         |$LN13@COM_Close|

; 1220 :             CloseHandle(pOpenHead->CommEvents.hCommEvent);

  035dc	e59d3050	 ldr         r3, [sp, #0x50]
  035e0	e2833010	 add         r3, r3, #0x10
  035e4	e5930000	 ldr         r0, [r3]
  035e8	eb000000	 bl          CloseHandle
  035ec		 |$LN13@COM_Close|

; 1221 :         LocalFree( pOpenHead );

  035ec	e59d0050	 ldr         r0, [sp, #0x50]
  035f0	eb000000	 bl          LocalFree

; 1222 :     }
; 1223 :     else

  035f4	ea0000b7	 b           |$LN12@COM_Close|
  035f8		 |$LN17@COM_Close|

; 1224 :     if ( pSerialHead->OpenCnt ) {

  035f8	e59d3008	 ldr         r3, [sp, #8]
  035fc	e2833090	 add         r3, r3, #0x90
  03600	e5933000	 ldr         r3, [r3]
  03604	e3530000	 cmp         r3, #0
  03608	0a0000a3	 beq         |$LN11@COM_Close|

; 1225 :         --(pSerialHead->OpenCnt);

  0360c	e59d3008	 ldr         r3, [sp, #8]
  03610	e2833090	 add         r3, r3, #0x90
  03614	e5933000	 ldr         r3, [r3]
  03618	e2432001	 sub         r2, r3, #1
  0361c	e59d3008	 ldr         r3, [sp, #8]
  03620	e2833090	 add         r3, r3, #0x90
  03624	e5832000	 str         r2, [r3]

; 1226 : 
; 1227 :         DEBUGMSG (1,
; 1228 :                   (TEXT("COM_Close: (%d handles) total RX %d, total TX %d, dropped (mdd, pdd) %d,%d\r\n"),
; 1229 :                    pSerialHead->OpenCnt, pSerialHead->RxBytes, pSerialHead->TxBytes, pSerialHead->DroppedBytesMDD, pSerialHead->DroppedBytesPDD));

  03628	e59d3008	 ldr         r3, [sp, #8]
  0362c	e283304c	 add         r3, r3, #0x4C
  03630	e5933000	 ldr         r3, [r3]
  03634	e58d3004	 str         r3, [sp, #4]
  03638	e59d3008	 ldr         r3, [sp, #8]
  0363c	e2833048	 add         r3, r3, #0x48
  03640	e5933000	 ldr         r3, [r3]
  03644	e58d3000	 str         r3, [sp]
  03648	e59d3008	 ldr         r3, [sp, #8]
  0364c	e2833054	 add         r3, r3, #0x54
  03650	e5933000	 ldr         r3, [r3]
  03654	e59d2008	 ldr         r2, [sp, #8]
  03658	e2822050	 add         r2, r2, #0x50
  0365c	e5922000	 ldr         r2, [r2]
  03660	e59d1008	 ldr         r1, [sp, #8]
  03664	e2811090	 add         r1, r1, #0x90
  03668	e5911000	 ldr         r1, [r1]
  0366c	e59f02e0	 ldr         r0, [pc, #0x2E0]
  03670	eb000000	 bl          NKDbgPrintfW

; 1230 : 
; 1231 :         // In multi open case, do we need to restore state later on or something???
; 1232 :         if ( pHWObj && pSerialHead->OpenCnt==0 && (pHWObj->BindFlags & THREAD_IN_MDD) &&
; 1233 :             pSerialHead->pDispatchThread ) {

  03674	e59d300c	 ldr         r3, [sp, #0xC]
  03678	e3530000	 cmp         r3, #0
  0367c	0a000012	 beq         |$LN10@COM_Close|
  03680	e59d3008	 ldr         r3, [sp, #8]
  03684	e2833090	 add         r3, r3, #0x90
  03688	e5933000	 ldr         r3, [r3]
  0368c	e3530000	 cmp         r3, #0
  03690	1a00000d	 bne         |$LN10@COM_Close|
  03694	e59d300c	 ldr         r3, [sp, #0xC]
  03698	e5933000	 ldr         r3, [r3]
  0369c	e3130003	 tst         r3, #3
  036a0	0a000009	 beq         |$LN10@COM_Close|
  036a4	e59d3008	 ldr         r3, [sp, #8]
  036a8	e2833040	 add         r3, r3, #0x40
  036ac	e5933000	 ldr         r3, [r3]
  036b0	e3530000	 cmp         r3, #0
  036b4	0a000004	 beq         |$LN10@COM_Close|

; 1234 :             SetThreadPriority(pSerialHead->pDispatchThread,
; 1235 :                               THREAD_PRIORITY_NORMAL);

  036b8	e3a01003	 mov         r1, #3
  036bc	e59d3008	 ldr         r3, [sp, #8]
  036c0	e2833040	 add         r3, r3, #0x40
  036c4	e5930000	 ldr         r0, [r3]
  036c8	eb000000	 bl          SetThreadPriority
  036cc		 |$LN10@COM_Close|

; 1236 :         }
; 1237 : 
; 1238 :         // If we are closing the last open handle, then close PDD also
; 1239 :         if ( !pSerialHead->OpenCnt ) {

  036cc	e59d3008	 ldr         r3, [sp, #8]
  036d0	e2833090	 add         r3, r3, #0x90
  036d4	e5933000	 ldr         r3, [r3]
  036d8	e3530000	 cmp         r3, #0
  036dc	1a000035	 bne         |$LN9@COM_Close|

; 1240 :             DEBUGMSG (ZONE_CLOSE, (TEXT("About to call HWClose\r\n")));

  036e0	e59f3254	 ldr         r3, [pc, #0x254]
  036e4	e5933440	 ldr         r3, [r3, #0x440]
  036e8	e3130010	 tst         r3, #0x10
  036ec	0a000004	 beq         |$LN25@COM_Close|
  036f0	e59f0258	 ldr         r0, [pc, #0x258]
  036f4	eb000000	 bl          NKDbgPrintfW
  036f8	e3a03001	 mov         r3, #1
  036fc	e58d3030	 str         r3, [sp, #0x30]
  03700	ea000001	 b           |$LN26@COM_Close|
  03704		 |$LN25@COM_Close|
  03704	e3a03000	 mov         r3, #0
  03708	e58d3030	 str         r3, [sp, #0x30]
  0370c		 |$LN26@COM_Close|

; 1241 :             if ( pHWObj )

  0370c	e59d300c	 ldr         r3, [sp, #0xC]
  03710	e3530000	 cmp         r3, #0
  03714	0a000009	 beq         |$LN8@COM_Close|

; 1242 :                 pHWObj->pFuncTbl->HWClose(pSerialHead->pHWHead);

  03718	e59d3008	 ldr         r3, [sp, #8]
  0371c	e283302c	 add         r3, r3, #0x2C
  03720	e5930000	 ldr         r0, [r3]
  03724	e59d300c	 ldr         r3, [sp, #0xC]
  03728	e2833008	 add         r3, r3, #8
  0372c	e5933000	 ldr         r3, [r3]
  03730	e2833010	 add         r3, r3, #0x10
  03734	e5933000	 ldr         r3, [r3]
  03738	e1a0e00f	 mov         lr, pc
  0373c	e12fff13	 bx          r3
  03740		 |$LN8@COM_Close|

; 1243 :             DEBUGMSG (ZONE_CLOSE, (TEXT("Returned from HWClose\r\n")));

  03740	e59f31f4	 ldr         r3, [pc, #0x1F4]
  03744	e5933440	 ldr         r3, [r3, #0x440]
  03748	e3130010	 tst         r3, #0x10
  0374c	0a000004	 beq         |$LN27@COM_Close|
  03750	e59f01f4	 ldr         r0, [pc, #0x1F4]
  03754	eb000000	 bl          NKDbgPrintfW
  03758	e3a03001	 mov         r3, #1
  0375c	e58d3034	 str         r3, [sp, #0x34]
  03760	ea000001	 b           |$LN28@COM_Close|
  03764		 |$LN27@COM_Close|
  03764	e3a03000	 mov         r3, #0
  03768	e58d3034	 str         r3, [sp, #0x34]
  0376c		 |$LN28@COM_Close|

; 1244 : 
; 1245 :             // And if thread was spun in open, kill it now.
; 1246 :             if ( pSerialHead->pHWObj->BindFlags & THREAD_AT_OPEN ) {

  0376c	e59d3008	 ldr         r3, [sp, #8]
  03770	e2833028	 add         r3, r3, #0x28
  03774	e5933000	 ldr         r3, [r3]
  03778	e5933000	 ldr         r3, [r3]
  0377c	e3130002	 tst         r3, #2
  03780	0a00000c	 beq         |$LN7@COM_Close|

; 1247 :                 DEBUGMSG (ZONE_CLOSE, (TEXT("COM_Close : Stopping Dispatch Thread\r\n")));

  03784	e59f31b0	 ldr         r3, [pc, #0x1B0]
  03788	e5933440	 ldr         r3, [r3, #0x440]
  0378c	e3130010	 tst         r3, #0x10
  03790	0a000004	 beq         |$LN29@COM_Close|
  03794	e59f01ac	 ldr         r0, [pc, #0x1AC]
  03798	eb000000	 bl          NKDbgPrintfW
  0379c	e3a03001	 mov         r3, #1
  037a0	e58d3038	 str         r3, [sp, #0x38]
  037a4	ea000001	 b           |$LN30@COM_Close|
  037a8		 |$LN29@COM_Close|
  037a8	e3a03000	 mov         r3, #0
  037ac	e58d3038	 str         r3, [sp, #0x38]
  037b0		 |$LN30@COM_Close|

; 1248 :                 StopDispatchThread( pSerialHead );

  037b0	e59d0008	 ldr         r0, [sp, #8]
  037b4	eb000000	 bl          StopDispatchThread
  037b8		 |$LN7@COM_Close|
  037b8		 |$LN9@COM_Close|

; 1249 :             }
; 1250 :         }
; 1251 : 
; 1252 : 
; 1253 :         // If this was the handle with access permission, remove pointer
; 1254 :         if ( pOpenHead == pSerialHead->pAccessOwner ) {

  037b8	e59d3008	 ldr         r3, [sp, #8]
  037bc	e2833c01	 add         r3, r3, #1, 24
  037c0	e59d2050	 ldr         r2, [sp, #0x50]
  037c4	e5933000	 ldr         r3, [r3]
  037c8	e1520003	 cmp         r2, r3
  037cc	1a000013	 bne         |$LN6@COM_Close|

; 1255 :             DEBUGMSG(ZONE_INIT|ZONE_CLOSE,
; 1256 :                      (TEXT("COM_Close: Closed access owner handle\n\r"),
; 1257 :                       pOpenHead));

  037d0	e59f3164	 ldr         r3, [pc, #0x164]
  037d4	e5933440	 ldr         r3, [r3, #0x440]
  037d8	e2032001	 and         r2, r3, #1
  037dc	e59f3158	 ldr         r3, [pc, #0x158]
  037e0	e5933440	 ldr         r3, [r3, #0x440]
  037e4	e2033010	 and         r3, r3, #0x10
  037e8	e1923003	 orrs        r3, r2, r3
  037ec	0a000005	 beq         |$LN31@COM_Close|
  037f0	e59d1050	 ldr         r1, [sp, #0x50]
  037f4	e59f0148	 ldr         r0, [pc, #0x148]
  037f8	eb000000	 bl          NKDbgPrintfW
  037fc	e3a03001	 mov         r3, #1
  03800	e58d303c	 str         r3, [sp, #0x3C]
  03804	ea000001	 b           |$LN32@COM_Close|
  03808		 |$LN31@COM_Close|
  03808	e3a03000	 mov         r3, #0
  0380c	e58d303c	 str         r3, [sp, #0x3C]
  03810		 |$LN32@COM_Close|

; 1258 : 
; 1259 :             pSerialHead->pAccessOwner = NULL;

  03810	e59d3008	 ldr         r3, [sp, #8]
  03814	e2832c01	 add         r2, r3, #1, 24
  03818	e3a03000	 mov         r3, #0
  0381c	e5823000	 str         r3, [r2]
  03820		 |$LN6@COM_Close|

; 1260 :         }
; 1261 : 
; 1262 :         // Remove the entry from the linked list
; 1263 :         RemoveEntryList(&pOpenHead->llist);

  03820	e59d3050	 ldr         r3, [sp, #0x50]
  03824	e2833034	 add         r3, r3, #0x34
  03828	e58d3018	 str         r3, [sp, #0x18]
  0382c	e59d3018	 ldr         r3, [sp, #0x18]
  03830	e2833004	 add         r3, r3, #4
  03834	e5932000	 ldr         r2, [r3]
  03838	e59d3018	 ldr         r3, [sp, #0x18]
  0383c	e5933000	 ldr         r3, [r3]
  03840	e5823000	 str         r3, [r2]
  03844	e59d3018	 ldr         r3, [sp, #0x18]
  03848	e2831004	 add         r1, r3, #4
  0384c	e59d3018	 ldr         r3, [sp, #0x18]
  03850	e5933000	 ldr         r3, [r3]
  03854	e2832004	 add         r2, r3, #4
  03858	e5913000	 ldr         r3, [r1]
  0385c	e5823000	 str         r3, [r2]

; 1264 : 
; 1265 :         // Free all data allocated in open
; 1266 :         DeleteCriticalSection(&(pOpenHead->CommEvents.EventCS));

  03860	e59d3050	 ldr         r3, [sp, #0x50]
  03864	e2830020	 add         r0, r3, #0x20
  03868	eb000000	 bl          DeleteCriticalSection

; 1267 :         if ( pOpenHead->CommEvents.hCommEvent )

  0386c	e59d3050	 ldr         r3, [sp, #0x50]
  03870	e2833010	 add         r3, r3, #0x10
  03874	e5933000	 ldr         r3, [r3]
  03878	e3530000	 cmp         r3, #0
  0387c	0a000003	 beq         |$LN2@COM_Close|

; 1268 :             CloseHandle(pOpenHead->CommEvents.hCommEvent);

  03880	e59d3050	 ldr         r3, [sp, #0x50]
  03884	e2833010	 add         r3, r3, #0x10
  03888	e5930000	 ldr         r0, [r3]
  0388c	eb000000	 bl          CloseHandle
  03890		 |$LN2@COM_Close|

; 1269 :         LocalFree( pOpenHead );

  03890	e59d0050	 ldr         r0, [sp, #0x50]
  03894	eb000000	 bl          LocalFree

; 1270 :     } else {

  03898	ea00000e	 b           |$LN1@COM_Close|
  0389c		 |$LN11@COM_Close|

; 1271 :         DEBUGMSG (ZONE_ERROR, (TEXT("!!Close of non-open serial port\r\n")));

  0389c	e59f3098	 ldr         r3, [pc, #0x98]
  038a0	e5933440	 ldr         r3, [r3, #0x440]
  038a4	e3130902	 tst         r3, #2, 18
  038a8	0a000004	 beq         |$LN33@COM_Close|
  038ac	e59f008c	 ldr         r0, [pc, #0x8C]
  038b0	eb000000	 bl          NKDbgPrintfW
  038b4	e3a03001	 mov         r3, #1
  038b8	e58d3040	 str         r3, [sp, #0x40]
  038bc	ea000001	 b           |$LN34@COM_Close|
  038c0		 |$LN33@COM_Close|
  038c0	e3a03000	 mov         r3, #0
  038c4	e58d3040	 str         r3, [sp, #0x40]
  038c8		 |$LN34@COM_Close|

; 1272 :         SetLastError(ERROR_INVALID_HANDLE);

  038c8	e3a00006	 mov         r0, #6
  038cc	eb000000	 bl          SetLastError

; 1273 :         RetCode = FALSE;

  038d0	e3a03000	 mov         r3, #0
  038d4	e58d3010	 str         r3, [sp, #0x10]
  038d8		 |$LN1@COM_Close|
  038d8		 |$LN12@COM_Close|

; 1274 :     }
; 1275 : 
; 1276 :     // OK, other inits/opens can go ahead.
; 1277 :     LeaveCriticalSection(&(pSerialHead->OpenCS));

  038d8	e59d3008	 ldr         r3, [sp, #8]
  038dc	e28300ec	 add         r0, r3, #0xEC
  038e0	eb000000	 bl          LeaveCriticalSection

; 1278 : 
; 1279 :     DEBUGMSG (ZONE_CLOSE|ZONE_FUNCTION, (TEXT("-COM_Close\r\n")));

  038e4	e59f3050	 ldr         r3, [pc, #0x50]
  038e8	e5933440	 ldr         r3, [r3, #0x440]
  038ec	e2032010	 and         r2, r3, #0x10
  038f0	e59f3044	 ldr         r3, [pc, #0x44]
  038f4	e5933440	 ldr         r3, [r3, #0x440]
  038f8	e2033a02	 and         r3, r3, #2, 20
  038fc	e1923003	 orrs        r3, r2, r3
  03900	0a000004	 beq         |$LN35@COM_Close|
  03904	e59f002c	 ldr         r0, [pc, #0x2C]
  03908	eb000000	 bl          NKDbgPrintfW
  0390c	e3a03001	 mov         r3, #1
  03910	e58d3044	 str         r3, [sp, #0x44]
  03914	ea000001	 b           |$LN36@COM_Close|
  03918		 |$LN35@COM_Close|
  03918	e3a03000	 mov         r3, #0
  0391c	e58d3044	 str         r3, [sp, #0x44]
  03920		 |$LN36@COM_Close|

; 1280 :     return(RetCode);

  03920	e59d3010	 ldr         r3, [sp, #0x10]
  03924	e58d301c	 str         r3, [sp, #0x1C]
  03928		 |$LN19@COM_Close|

; 1281 : }

  03928	e59d001c	 ldr         r0, [sp, #0x1C]
  0392c	e28dd048	 add         sp, sp, #0x48
  03930	e89d6000	 ldmia       sp, {sp, lr}
  03934	e12fff1e	 bx          lr
  03938		 |$LN40@COM_Close|
  03938		 |$LN41@COM_Close|
  03938	00000000	 DCD         |??_C@_1BK@GDIGGGLD@?$AA?9?$AAC?$AAO?$AAM?$AA_?$AAC?$AAl?$AAo?$AAs?$AAe?$AA?$AN?$AA?6?$AA?$AA@|
  0393c		 |$LN42@COM_Close|
  0393c	00000000	 DCD         |dpCurSettings|
  03940		 |$LN43@COM_Close|
  03940	00000000	 DCD         |??_C@_1EE@HJGCIAAB@?$AA?$CB?$AA?$CB?$AAC?$AAl?$AAo?$AAs?$AAe?$AA?5?$AAo?$AAf?$AA?5?$AAn?$AAo?$AAn?$AA?9?$AAo?$AAp?$AAe?$AAn?$AA?5?$AAs?$AAe?$AAr?$AAi?$AAa?$AAl?$AA?5?$AAp?$AAo?$AAr?$AAt?$AA?$AN@|
  03944		 |$LN44@COM_Close|
  03944	00000000	 DCD         |??_C@_1FA@FDHIAIFB@?$AAC?$AAO?$AAM?$AA_?$AAC?$AAl?$AAo?$AAs?$AAe?$AA?3?$AA?5?$AAC?$AAl?$AAo?$AAs?$AAe?$AAd?$AA?5?$AAa?$AAc?$AAc?$AAe?$AAs?$AAs?$AA?5?$AAo?$AAw?$AAn?$AAe?$AAr?$AA?5?$AAh@|
  03948		 |$LN45@COM_Close|
  03948	00000000	 DCD         |??_C@_1EO@KHAJIML@?$AAC?$AAO?$AAM?$AA_?$AAC?$AAl?$AAo?$AAs?$AAe?$AA?5?$AA?3?$AA?5?$AAS?$AAt?$AAo?$AAp?$AAp?$AAi?$AAn?$AAg?$AA?5?$AAD?$AAi?$AAs?$AAp?$AAa?$AAt?$AAc?$AAh?$AA?5?$AAT?$AAh@|
  0394c		 |$LN46@COM_Close|
  0394c	00000000	 DCD         |??_C@_1DA@HIJABIAN@?$AAR?$AAe?$AAt?$AAu?$AAr?$AAn?$AAe?$AAd?$AA?5?$AAf?$AAr?$AAo?$AAm?$AA?5?$AAH?$AAW?$AAC?$AAl?$AAo?$AAs?$AAe?$AA?$AN?$AA?6?$AA?$AA@|
  03950		 |$LN47@COM_Close|
  03950	00000000	 DCD         |??_C@_1DA@EPLPIONK@?$AAA?$AAb?$AAo?$AAu?$AAt?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAH?$AAW?$AAC?$AAl?$AAo?$AAs?$AAe?$AA?$AN?$AA?6?$AA?$AA@|
  03954		 |$LN48@COM_Close|
  03954	00000000	 DCD         |??_C@_1JK@JHJOGNCH@?$AAC?$AAO?$AAM?$AA_?$AAC?$AAl?$AAo?$AAs?$AAe?$AA?3?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?5?$AAh?$AAa?$AAn?$AAd?$AAl?$AAe?$AAs?$AA?$CJ?$AA?5?$AAt?$AAo?$AAt?$AAa?$AAl?$AA?5?$AAR?$AAX@|
  03958		 |$LN49@COM_Close|
  03958	00000000	 DCD         |??_C@_1EK@JBKGBIGA@?$AA?$CB?$AA?$CB?$AAC?$AAO?$AAM?$AA_?$AAC?$AAl?$AAo?$AAs?$AAe?$AA?3?$AA?5?$AAp?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAH?$AAe?$AAa?$AAd?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL@|
  0395c		 |$LN50@COM_Close|
  0395c	00000000	 DCD         |??_C@_1BK@FMFILLAC@?$AA?$CL?$AAC?$AAO?$AAM?$AA_?$AAC?$AAl?$AAo?$AAs?$AAe?$AA?$AN?$AA?6?$AA?$AA@|
  03960		 |$M41737|

			 ENDP  ; |COM_Close|

	EXPORT	|??_C@_1CE@KKIBLMOF@?$AA?9?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAE?$AAx?$AAi?$AAt?$AAi?$AAn?$AAg?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FE@DFEILEFJ@?$AA?$CB?$AA?$CB?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAE?$AAx?$AAi?$AAt?$AAi?$AAn?$AAg?$AA?3?$AA?5?$AAp?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAH?$AAe?$AAa?$AAd?$AA?5?$AA?$DN?$AA?$DN@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CE@GDEBELBJ@?$AA?$CL?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAE?$AAx?$AAi?$AAt?$AAi?$AAn?$AAg?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|ProcessExiting|

  00058			 AREA	 |.pdata|, PDATA
|$T41762| DCD	|$LN13@ProcessExi|
	DCD	0x40004704

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@KKIBLMOF@?$AA?9?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAE?$AAx?$AAi?$AAt?$AAi?$AAn?$AAg?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "P", 0x0, "r", 0x0, "o", 0x0, "c", 0x0, "e", 0x0, "s"
	DCB	0x0, "s", 0x0, "E", 0x0, "x", 0x0, "i", 0x0, "t", 0x0, "i"
	DCB	0x0, "n", 0x0, "g", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FE@DFEILEFJ@?$AA?$CB?$AA?$CB?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAE?$AAx?$AAi?$AAt?$AAi?$AAn?$AAg?$AA?3?$AA?5?$AAp?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAH?$AAe?$AAa?$AAd?$AA?5?$AA?$DN?$AA?$DN@| DCB "!"
	DCB	0x0, "!", 0x0, "P", 0x0, "r", 0x0, "o", 0x0, "c", 0x0, "e"
	DCB	0x0, "s", 0x0, "s", 0x0, "E", 0x0, "x", 0x0, "i", 0x0, "t"
	DCB	0x0, "i", 0x0, "n", 0x0, "g", 0x0, ":", 0x0, " ", 0x0, "p"
	DCB	0x0, "S", 0x0, "e", 0x0, "r", 0x0, "i", 0x0, "a", 0x0, "l"
	DCB	0x0, "H", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, " ", 0x0, "="
	DCB	0x0, "=", 0x0, " ", 0x0, "N", 0x0, "U", 0x0, "L", 0x0, "L"
	DCB	0x0, "!", 0x0, "!", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@GDEBELBJ@?$AA?$CL?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAE?$AAx?$AAi?$AAt?$AAi?$AAn?$AAg?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "P", 0x0, "r", 0x0, "o", 0x0, "c", 0x0, "e", 0x0, "s"
	DCB	0x0, "s", 0x0, "E", 0x0, "x", 0x0, "i", 0x0, "t", 0x0, "i"
	DCB	0x0, "n", 0x0, "g", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  03960			 AREA	 |.text|, CODE, ARM

  03960		 |ProcessExiting| PROC

; 1288 : {

  03960		 |$LN13@ProcessExi|
  03960	e1a0c00d	 mov         r12, sp
  03964	e92d0001	 stmdb       sp!, {r0}
  03968	e92d5000	 stmdb       sp!, {r12, lr}
  0396c	e24dd018	 sub         sp, sp, #0x18
  03970		 |$M41759|

; 1289 :     PHW_INDEP_INFO  pSerialHead = pOpenHead->pSerialHead;

  03970	e59d3020	 ldr         r3, [sp, #0x20]
  03974	e5933000	 ldr         r3, [r3]
  03978	e58d3000	 str         r3, [sp]

; 1290 :     //PHWOBJ          pHWObj;
; 1291 :     //int i;
; 1292 :     BOOL            RetCode = TRUE;

  0397c	e3a03001	 mov         r3, #1
  03980	e58d3004	 str         r3, [sp, #4]

; 1293 : 
; 1294 :     DEBUGMSG (ZONE_CLOSE|ZONE_FUNCTION, (TEXT("+ProcessExiting\r\n")));

  03984	e59f30e4	 ldr         r3, [pc, #0xE4]
  03988	e5933440	 ldr         r3, [r3, #0x440]
  0398c	e2032010	 and         r2, r3, #0x10
  03990	e59f30d8	 ldr         r3, [pc, #0xD8]
  03994	e5933440	 ldr         r3, [r3, #0x440]
  03998	e2033a02	 and         r3, r3, #2, 20
  0399c	e1923003	 orrs        r3, r2, r3
  039a0	0a000004	 beq         |$LN5@ProcessExi|
  039a4	e59f00cc	 ldr         r0, [pc, #0xCC]
  039a8	eb000000	 bl          NKDbgPrintfW
  039ac	e3a03001	 mov         r3, #1
  039b0	e58d300c	 str         r3, [sp, #0xC]
  039b4	ea000001	 b           |$LN6@ProcessExi|
  039b8		 |$LN5@ProcessExi|
  039b8	e3a03000	 mov         r3, #0
  039bc	e58d300c	 str         r3, [sp, #0xC]
  039c0		 |$LN6@ProcessExi|

; 1295 : 
; 1296 :     if ( !pSerialHead ) {

  039c0	e59d3000	 ldr         r3, [sp]
  039c4	e3530000	 cmp         r3, #0
  039c8	1a000010	 bne         |$LN2@ProcessExi|

; 1297 :         DEBUGMSG (ZONE_ERROR, (TEXT("!!ProcessExiting: pSerialHead == NULL!!\r\n")));

  039cc	e59f309c	 ldr         r3, [pc, #0x9C]
  039d0	e5933440	 ldr         r3, [r3, #0x440]
  039d4	e3130902	 tst         r3, #2, 18
  039d8	0a000004	 beq         |$LN7@ProcessExi|
  039dc	e59f0090	 ldr         r0, [pc, #0x90]
  039e0	eb000000	 bl          NKDbgPrintfW
  039e4	e3a03001	 mov         r3, #1
  039e8	e58d3010	 str         r3, [sp, #0x10]
  039ec	ea000001	 b           |$LN8@ProcessExi|
  039f0		 |$LN7@ProcessExi|
  039f0	e3a03000	 mov         r3, #0
  039f4	e58d3010	 str         r3, [sp, #0x10]
  039f8		 |$LN8@ProcessExi|

; 1298 :         SetLastError(ERROR_INVALID_HANDLE);

  039f8	e3a00006	 mov         r0, #6
  039fc	eb000000	 bl          SetLastError

; 1299 :         return(FALSE);

  03a00	e3a03000	 mov         r3, #0
  03a04	e58d3008	 str         r3, [sp, #8]
  03a08	ea000013	 b           |$LN3@ProcessExi|

; 1300 :     }
; 1301 :     else {

  03a0c	ea000012	 b           |$LN1@ProcessExi|
  03a10		 |$LN2@ProcessExi|

; 1302 :         COM_PreClose(pOpenHead);

  03a10	e59d0020	 ldr         r0, [sp, #0x20]
  03a14	eb000000	 bl          COM_PreClose

; 1303 :         DEBUGMSG (ZONE_CLOSE|ZONE_FUNCTION, (TEXT("-ProcessExiting\r\n")));

  03a18	e59f3050	 ldr         r3, [pc, #0x50]
  03a1c	e5933440	 ldr         r3, [r3, #0x440]
  03a20	e2032010	 and         r2, r3, #0x10
  03a24	e59f3044	 ldr         r3, [pc, #0x44]
  03a28	e5933440	 ldr         r3, [r3, #0x440]
  03a2c	e2033a02	 and         r3, r3, #2, 20
  03a30	e1923003	 orrs        r3, r2, r3
  03a34	0a000004	 beq         |$LN9@ProcessExi|
  03a38	e59f002c	 ldr         r0, [pc, #0x2C]
  03a3c	eb000000	 bl          NKDbgPrintfW
  03a40	e3a03001	 mov         r3, #1
  03a44	e58d3014	 str         r3, [sp, #0x14]
  03a48	ea000001	 b           |$LN10@ProcessExi|
  03a4c		 |$LN9@ProcessExi|
  03a4c	e3a03000	 mov         r3, #0
  03a50	e58d3014	 str         r3, [sp, #0x14]
  03a54		 |$LN10@ProcessExi|

; 1304 :         return(TRUE);

  03a54	e3a03001	 mov         r3, #1
  03a58	e58d3008	 str         r3, [sp, #8]
  03a5c		 |$LN1@ProcessExi|
  03a5c		 |$LN3@ProcessExi|

; 1305 :     }
; 1306 : }

  03a5c	e59d0008	 ldr         r0, [sp, #8]
  03a60	e28dd018	 add         sp, sp, #0x18
  03a64	e89d6000	 ldmia       sp, {sp, lr}
  03a68	e12fff1e	 bx          lr
  03a6c		 |$LN14@ProcessExi|
  03a6c		 |$LN15@ProcessExi|
  03a6c	00000000	 DCD         |??_C@_1CE@KKIBLMOF@?$AA?9?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAE?$AAx?$AAi?$AAt?$AAi?$AAn?$AAg?$AA?$AN?$AA?6?$AA?$AA@|
  03a70		 |$LN16@ProcessExi|
  03a70	00000000	 DCD         |dpCurSettings|
  03a74		 |$LN17@ProcessExi|
  03a74	00000000	 DCD         |??_C@_1FE@DFEILEFJ@?$AA?$CB?$AA?$CB?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAE?$AAx?$AAi?$AAt?$AAi?$AAn?$AAg?$AA?3?$AA?5?$AAp?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAH?$AAe?$AAa?$AAd?$AA?5?$AA?$DN?$AA?$DN@|
  03a78		 |$LN18@ProcessExi|
  03a78	00000000	 DCD         |??_C@_1CE@GDEBELBJ@?$AA?$CL?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAE?$AAx?$AAi?$AAt?$AAi?$AAn?$AAg?$AA?$AN?$AA?6?$AA?$AA@|
  03a7c		 |$M41760|

			 ENDP  ; |ProcessExiting|

	EXPORT	|??_C@_1CC@EOGEOIEK@?$AA?9?$AAC?$AAO?$AAM?$AA_?$AAP?$AAr?$AAe?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DI@PDPAMALM@?$AAR?$AAe?$AAt?$AAu?$AAr?$AAn?$AAe?$AAd?$AA?5?$AAf?$AAr?$AAo?$AAm?$AA?5?$AAH?$AAW?$AAP?$AAr?$AAe?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DI@JGMLCPMK@?$AAA?$AAb?$AAo?$AAu?$AAt?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAH?$AAW?$AAP?$AAr?$AAe?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EM@KLLBGOIP@?$AA?5?$AAP?$AAr?$AAe?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?5?$AA?9?$AAP?$AAr?$AAe?$AA?5?$AAC?$AAl?$AAo?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AA?5?$AA0@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EO@HNCGHLKP@?$AAC?$AAO?$AAM?$AA_?$AAP?$AAr?$AAe?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?5?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAf?$AAi?$AAn?$AAd?$AA?5?$AAp?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CC@JFGJAOPO@?$AA?$CL?$AAC?$AAO?$AAM?$AA_?$AAP?$AAr?$AAe?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|COM_PreDeinit|

  00060			 AREA	 |.pdata|, PDATA
|$T41785| DCD	|$LN22@COM_PreDei|
	DCD	0x4000a604

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CC@EOGEOIEK@?$AA?9?$AAC?$AAO?$AAM?$AA_?$AAP?$AAr?$AAe?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "C", 0x0, "O", 0x0, "M", 0x0, "_", 0x0, "P", 0x0, "r"
	DCB	0x0, "e", 0x0, "D", 0x0, "e", 0x0, "i", 0x0, "n", 0x0, "i"
	DCB	0x0, "t", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DI@PDPAMALM@?$AAR?$AAe?$AAt?$AAu?$AAr?$AAn?$AAe?$AAd?$AA?5?$AAf?$AAr?$AAo?$AAm?$AA?5?$AAH?$AAW?$AAP?$AAr?$AAe?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@| DCB "R"
	DCB	0x0, "e", 0x0, "t", 0x0, "u", 0x0, "r", 0x0, "n", 0x0, "e"
	DCB	0x0, "d", 0x0, " ", 0x0, "f", 0x0, "r", 0x0, "o", 0x0, "m"
	DCB	0x0, " ", 0x0, "H", 0x0, "W", 0x0, "P", 0x0, "r", 0x0, "e"
	DCB	0x0, "D", 0x0, "e", 0x0, "i", 0x0, "n", 0x0, "i", 0x0, "t"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DI@JGMLCPMK@?$AAA?$AAb?$AAo?$AAu?$AAt?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAH?$AAW?$AAP?$AAr?$AAe?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@| DCB "A"
	DCB	0x0, "b", 0x0, "o", 0x0, "u", 0x0, "t", 0x0, " ", 0x0, "t"
	DCB	0x0, "o", 0x0, " ", 0x0, "c", 0x0, "a", 0x0, "l", 0x0, "l"
	DCB	0x0, " ", 0x0, "H", 0x0, "W", 0x0, "P", 0x0, "r", 0x0, "e"
	DCB	0x0, "D", 0x0, "e", 0x0, "i", 0x0, "n", 0x0, "i", 0x0, "t"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EM@KLLBGOIP@?$AA?5?$AAP?$AAr?$AAe?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?5?$AA?9?$AAP?$AAr?$AAe?$AA?5?$AAC?$AAl?$AAo?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AA?5?$AA0@| DCB " "
	DCB	0x0, "P", 0x0, "r", 0x0, "e", 0x0, "D", 0x0, "e", 0x0, "i"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, " ", 0x0, "-", 0x0, "P"
	DCB	0x0, "r", 0x0, "e", 0x0, " ", 0x0, "C", 0x0, "l", 0x0, "o"
	DCB	0x0, "s", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, " ", 0x0, "H"
	DCB	0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "X", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EO@HNCGHLKP@?$AAC?$AAO?$AAM?$AA_?$AAP?$AAr?$AAe?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?5?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAf?$AAi?$AAn?$AAd?$AA?5?$AAp?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl@| DCB "C"
	DCB	0x0, "O", 0x0, "M", 0x0, "_", 0x0, "P", 0x0, "r", 0x0, "e"
	DCB	0x0, "D", 0x0, "e", 0x0, "i", 0x0, "n", 0x0, "i", 0x0, "t"
	DCB	0x0, " ", 0x0, "c", 0x0, "a", 0x0, "n", 0x0, "'", 0x0, "t"
	DCB	0x0, " ", 0x0, "f", 0x0, "i", 0x0, "n", 0x0, "d", 0x0, " "
	DCB	0x0, "p", 0x0, "S", 0x0, "e", 0x0, "r", 0x0, "i", 0x0, "a"
	DCB	0x0, "l", 0x0, "H", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CC@JFGJAOPO@?$AA?$CL?$AAC?$AAO?$AAM?$AA_?$AAP?$AAr?$AAe?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "C", 0x0, "O", 0x0, "M", 0x0, "_", 0x0, "P", 0x0, "r"
	DCB	0x0, "e", 0x0, "D", 0x0, "e", 0x0, "i", 0x0, "n", 0x0, "i"
	DCB	0x0, "t", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  03a7c			 AREA	 |.text|, CODE, ARM

  03a7c		 |COM_PreDeinit| PROC

; 1316 : {

  03a7c		 |$LN22@COM_PreDei|
  03a7c	e1a0c00d	 mov         r12, sp
  03a80	e92d0001	 stmdb       sp!, {r0}
  03a84	e92d5000	 stmdb       sp!, {r12, lr}
  03a88	e24dd024	 sub         sp, sp, #0x24
  03a8c		 |$M41782|

; 1317 :     DEBUGMSG (ZONE_INIT|ZONE_FUNCTION, (TEXT("+COM_PreDeinit\r\n")));

  03a8c	e59f3268	 ldr         r3, [pc, #0x268]
  03a90	e5933440	 ldr         r3, [r3, #0x440]
  03a94	e2032001	 and         r2, r3, #1
  03a98	e59f325c	 ldr         r3, [pc, #0x25C]
  03a9c	e5933440	 ldr         r3, [r3, #0x440]
  03aa0	e2033a02	 and         r3, r3, #2, 20
  03aa4	e1923003	 orrs        r3, r2, r3
  03aa8	0a000004	 beq         |$LN8@COM_PreDei|
  03aac	e59f025c	 ldr         r0, [pc, #0x25C]
  03ab0	eb000000	 bl          NKDbgPrintfW
  03ab4	e3a03001	 mov         r3, #1
  03ab8	e58d300c	 str         r3, [sp, #0xC]
  03abc	ea000001	 b           |$LN9@COM_PreDei|
  03ac0		 |$LN8@COM_PreDei|
  03ac0	e3a03000	 mov         r3, #0
  03ac4	e58d300c	 str         r3, [sp, #0xC]
  03ac8		 |$LN9@COM_PreDei|

; 1318 : 
; 1319 :     if ( !pSerialHead ) {

  03ac8	e59d302c	 ldr         r3, [sp, #0x2C]
  03acc	e3530000	 cmp         r3, #0
  03ad0	1a000013	 bne         |$LN5@COM_PreDei|

; 1320 :         /* Can't do much without this */
; 1321 :         DEBUGMSG (ZONE_INIT|ZONE_ERROR,
; 1322 :                   (TEXT("COM_PreDeinit can't find pSerialHead\r\n")));

  03ad4	e59f3220	 ldr         r3, [pc, #0x220]
  03ad8	e5933440	 ldr         r3, [r3, #0x440]
  03adc	e2032001	 and         r2, r3, #1
  03ae0	e59f3214	 ldr         r3, [pc, #0x214]
  03ae4	e5933440	 ldr         r3, [r3, #0x440]
  03ae8	e2033902	 and         r3, r3, #2, 18
  03aec	e1923003	 orrs        r3, r2, r3
  03af0	0a000004	 beq         |$LN10@COM_PreDei|
  03af4	e59f0210	 ldr         r0, [pc, #0x210]
  03af8	eb000000	 bl          NKDbgPrintfW
  03afc	e3a03001	 mov         r3, #1
  03b00	e58d3010	 str         r3, [sp, #0x10]
  03b04	ea000001	 b           |$LN11@COM_PreDei|
  03b08		 |$LN10@COM_PreDei|
  03b08	e3a03000	 mov         r3, #0
  03b0c	e58d3010	 str         r3, [sp, #0x10]
  03b10		 |$LN11@COM_PreDei|

; 1323 :         SetLastError(ERROR_INVALID_HANDLE);

  03b10	e3a00006	 mov         r0, #6
  03b14	eb000000	 bl          SetLastError

; 1324 :         return(FALSE);

  03b18	e3a03000	 mov         r3, #0
  03b1c	e58d3008	 str         r3, [sp, #8]
  03b20	ea000070	 b           |$LN6@COM_PreDei|
  03b24		 |$LN5@COM_PreDei|

; 1325 :     }
; 1326 :     /*
; 1327 :     ** Call PreClose, if we have a user.  Note that this call will ensure that
; 1328 :     ** all users are out of the serial routines before it returns.
; 1329 :     */
; 1330 :     if ( pSerialHead->OpenCnt ) {

  03b24	e59d302c	 ldr         r3, [sp, #0x2C]
  03b28	e2833090	 add         r3, r3, #0x90
  03b2c	e5933000	 ldr         r3, [r3]
  03b30	e3530000	 cmp         r3, #0
  03b34	0a000027	 beq         |$LN4@COM_PreDei|

; 1331 :         PLIST_ENTRY     pEntry;
; 1332 :         PHW_OPEN_INFO   pOpenHead;
; 1333 :         EnterCriticalSection(&(pSerialHead->OpenCS));

  03b38	e59d302c	 ldr         r3, [sp, #0x2C]
  03b3c	e28300ec	 add         r0, r3, #0xEC
  03b40	eb000000	 bl          EnterCriticalSection

; 1334 :         pEntry = pSerialHead->OpenList.Flink;

  03b44	e59d302c	 ldr         r3, [sp, #0x2C]
  03b48	e28330e4	 add         r3, r3, #0xE4
  03b4c	e5933000	 ldr         r3, [r3]
  03b50	e58d3000	 str         r3, [sp]
  03b54		 |$LN3@COM_PreDei|

; 1335 :         while ( pEntry != &pSerialHead->OpenList ) {

  03b54	e59d302c	 ldr         r3, [sp, #0x2C]
  03b58	e28320e4	 add         r2, r3, #0xE4
  03b5c	e59d3000	 ldr         r3, [sp]
  03b60	e1530002	 cmp         r3, r2
  03b64	0a000018	 beq         |$LN2@COM_PreDei|

; 1336 :             pOpenHead = CONTAINING_RECORD( pEntry, HW_OPEN_INFO, llist);

  03b68	e59d3000	 ldr         r3, [sp]
  03b6c	e2433034	 sub         r3, r3, #0x34
  03b70	e58d3004	 str         r3, [sp, #4]

; 1337 :             pEntry = pEntry->Flink;  // advance to next

  03b74	e59d3000	 ldr         r3, [sp]
  03b78	e5933000	 ldr         r3, [r3]
  03b7c	e58d3000	 str         r3, [sp]

; 1338 : 
; 1339 :             DEBUGMSG (ZONE_INIT | ZONE_CLOSE, (TEXT(" PreDeinit -Pre Closing Handle 0x%X\r\n"),
; 1340 :                                                pOpenHead ));

  03b80	e59f3174	 ldr         r3, [pc, #0x174]
  03b84	e5933440	 ldr         r3, [r3, #0x440]
  03b88	e2032001	 and         r2, r3, #1
  03b8c	e59f3168	 ldr         r3, [pc, #0x168]
  03b90	e5933440	 ldr         r3, [r3, #0x440]
  03b94	e2033010	 and         r3, r3, #0x10
  03b98	e1923003	 orrs        r3, r2, r3
  03b9c	0a000005	 beq         |$LN12@COM_PreDei|
  03ba0	e59d1004	 ldr         r1, [sp, #4]
  03ba4	e59f015c	 ldr         r0, [pc, #0x15C]
  03ba8	eb000000	 bl          NKDbgPrintfW
  03bac	e3a03001	 mov         r3, #1
  03bb0	e58d3014	 str         r3, [sp, #0x14]
  03bb4	ea000001	 b           |$LN13@COM_PreDei|
  03bb8		 |$LN12@COM_PreDei|
  03bb8	e3a03000	 mov         r3, #0
  03bbc	e58d3014	 str         r3, [sp, #0x14]
  03bc0		 |$LN13@COM_PreDei|

; 1341 :             COM_PreClose(pOpenHead);

  03bc0	e59d0004	 ldr         r0, [sp, #4]
  03bc4	eb000000	 bl          COM_PreClose

; 1342 :         }

  03bc8	eaffffe1	 b           |$LN3@COM_PreDei|
  03bcc		 |$LN2@COM_PreDei|

; 1343 :         LeaveCriticalSection(&(pSerialHead->OpenCS));

  03bcc	e59d302c	 ldr         r3, [sp, #0x2C]
  03bd0	e28300ec	 add         r0, r3, #0xEC
  03bd4	eb000000	 bl          LeaveCriticalSection
  03bd8		 |$LN4@COM_PreDei|

; 1344 :     }
; 1345 :     /* Now, call HW specific predeinit function */
; 1346 :     if (pSerialHead->pHWHead && pSerialHead->pHWObj && pSerialHead->pHWObj->pFuncTbl ) {

  03bd8	e59d302c	 ldr         r3, [sp, #0x2C]
  03bdc	e283302c	 add         r3, r3, #0x2C
  03be0	e5933000	 ldr         r3, [r3]
  03be4	e3530000	 cmp         r3, #0
  03be8	0a00002d	 beq         |$LN1@COM_PreDei|
  03bec	e59d302c	 ldr         r3, [sp, #0x2C]
  03bf0	e2833028	 add         r3, r3, #0x28
  03bf4	e5933000	 ldr         r3, [r3]
  03bf8	e3530000	 cmp         r3, #0
  03bfc	0a000028	 beq         |$LN1@COM_PreDei|
  03c00	e59d302c	 ldr         r3, [sp, #0x2C]
  03c04	e2833028	 add         r3, r3, #0x28
  03c08	e5933000	 ldr         r3, [r3]
  03c0c	e2833008	 add         r3, r3, #8
  03c10	e5933000	 ldr         r3, [r3]
  03c14	e3530000	 cmp         r3, #0
  03c18	0a000021	 beq         |$LN1@COM_PreDei|

; 1347 :         DEBUGMSG (ZONE_INIT, (TEXT("About to call HWPreDeinit\r\n")));

  03c1c	e59f30d8	 ldr         r3, [pc, #0xD8]
  03c20	e5933440	 ldr         r3, [r3, #0x440]
  03c24	e3130001	 tst         r3, #1
  03c28	0a000004	 beq         |$LN14@COM_PreDei|
  03c2c	e59f00d0	 ldr         r0, [pc, #0xD0]
  03c30	eb000000	 bl          NKDbgPrintfW
  03c34	e3a03001	 mov         r3, #1
  03c38	e58d3018	 str         r3, [sp, #0x18]
  03c3c	ea000001	 b           |$LN15@COM_PreDei|
  03c40		 |$LN14@COM_PreDei|
  03c40	e3a03000	 mov         r3, #0
  03c44	e58d3018	 str         r3, [sp, #0x18]
  03c48		 |$LN15@COM_PreDei|

; 1348 :         pSerialHead->pHWObj->pFuncTbl->HWPreDeinit(pSerialHead->pHWHead);

  03c48	e59d302c	 ldr         r3, [sp, #0x2C]
  03c4c	e283302c	 add         r3, r3, #0x2C
  03c50	e5930000	 ldr         r0, [r3]
  03c54	e59d302c	 ldr         r3, [sp, #0x2C]
  03c58	e2833028	 add         r3, r3, #0x28
  03c5c	e5933000	 ldr         r3, [r3]
  03c60	e2833008	 add         r3, r3, #8
  03c64	e5933000	 ldr         r3, [r3]
  03c68	e283305c	 add         r3, r3, #0x5C
  03c6c	e5933000	 ldr         r3, [r3]
  03c70	e1a0e00f	 mov         lr, pc
  03c74	e12fff13	 bx          r3

; 1349 :         DEBUGMSG (ZONE_INIT, (TEXT("Returned from HWPreDeinit\r\n")));

  03c78	e59f307c	 ldr         r3, [pc, #0x7C]
  03c7c	e5933440	 ldr         r3, [r3, #0x440]
  03c80	e3130001	 tst         r3, #1
  03c84	0a000004	 beq         |$LN16@COM_PreDei|
  03c88	e59f0070	 ldr         r0, [pc, #0x70]
  03c8c	eb000000	 bl          NKDbgPrintfW
  03c90	e3a03001	 mov         r3, #1
  03c94	e58d301c	 str         r3, [sp, #0x1C]
  03c98	ea000001	 b           |$LN17@COM_PreDei|
  03c9c		 |$LN16@COM_PreDei|
  03c9c	e3a03000	 mov         r3, #0
  03ca0	e58d301c	 str         r3, [sp, #0x1C]
  03ca4		 |$LN17@COM_PreDei|
  03ca4		 |$LN1@COM_PreDei|

; 1350 :     }
; 1351 : 
; 1352 :     DEBUGMSG (ZONE_INIT|ZONE_FUNCTION, (TEXT("-COM_PreDeinit\r\n")));

  03ca4	e59f3050	 ldr         r3, [pc, #0x50]
  03ca8	e5933440	 ldr         r3, [r3, #0x440]
  03cac	e2032001	 and         r2, r3, #1
  03cb0	e59f3044	 ldr         r3, [pc, #0x44]
  03cb4	e5933440	 ldr         r3, [r3, #0x440]
  03cb8	e2033a02	 and         r3, r3, #2, 20
  03cbc	e1923003	 orrs        r3, r2, r3
  03cc0	0a000004	 beq         |$LN18@COM_PreDei|
  03cc4	e59f002c	 ldr         r0, [pc, #0x2C]
  03cc8	eb000000	 bl          NKDbgPrintfW
  03ccc	e3a03001	 mov         r3, #1
  03cd0	e58d3020	 str         r3, [sp, #0x20]
  03cd4	ea000001	 b           |$LN19@COM_PreDei|
  03cd8		 |$LN18@COM_PreDei|
  03cd8	e3a03000	 mov         r3, #0
  03cdc	e58d3020	 str         r3, [sp, #0x20]
  03ce0		 |$LN19@COM_PreDei|

; 1353 :     return TRUE;

  03ce0	e3a03001	 mov         r3, #1
  03ce4	e58d3008	 str         r3, [sp, #8]
  03ce8		 |$LN6@COM_PreDei|

; 1354 : }

  03ce8	e59d0008	 ldr         r0, [sp, #8]
  03cec	e28dd024	 add         sp, sp, #0x24
  03cf0	e89d6000	 ldmia       sp, {sp, lr}
  03cf4	e12fff1e	 bx          lr
  03cf8		 |$LN23@COM_PreDei|
  03cf8		 |$LN24@COM_PreDei|
  03cf8	00000000	 DCD         |??_C@_1CC@EOGEOIEK@?$AA?9?$AAC?$AAO?$AAM?$AA_?$AAP?$AAr?$AAe?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@|
  03cfc		 |$LN25@COM_PreDei|
  03cfc	00000000	 DCD         |dpCurSettings|
  03d00		 |$LN26@COM_PreDei|
  03d00	00000000	 DCD         |??_C@_1DI@PDPAMALM@?$AAR?$AAe?$AAt?$AAu?$AAr?$AAn?$AAe?$AAd?$AA?5?$AAf?$AAr?$AAo?$AAm?$AA?5?$AAH?$AAW?$AAP?$AAr?$AAe?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@|
  03d04		 |$LN27@COM_PreDei|
  03d04	00000000	 DCD         |??_C@_1DI@JGMLCPMK@?$AAA?$AAb?$AAo?$AAu?$AAt?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAH?$AAW?$AAP?$AAr?$AAe?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@|
  03d08		 |$LN28@COM_PreDei|
  03d08	00000000	 DCD         |??_C@_1EM@KLLBGOIP@?$AA?5?$AAP?$AAr?$AAe?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?5?$AA?9?$AAP?$AAr?$AAe?$AA?5?$AAC?$AAl?$AAo?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AA?5?$AA0@|
  03d0c		 |$LN29@COM_PreDei|
  03d0c	00000000	 DCD         |??_C@_1EO@HNCGHLKP@?$AAC?$AAO?$AAM?$AA_?$AAP?$AAr?$AAe?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?5?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAf?$AAi?$AAn?$AAd?$AA?5?$AAp?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl@|
  03d10		 |$LN30@COM_PreDei|
  03d10	00000000	 DCD         |??_C@_1CC@JFGJAOPO@?$AA?$CL?$AAC?$AAO?$AAM?$AA_?$AAP?$AAr?$AAe?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@|
  03d14		 |$M41783|

			 ENDP  ; |COM_PreDeinit|

	EXPORT	|??_C@_1BM@OGICEDGH@?$AA?9?$AAC?$AAO?$AAM?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DC@CLHJIHHM@?$AAR?$AAe?$AAt?$AAu?$AAr?$AAn?$AAe?$AAd?$AA?5?$AAf?$AAr?$AAo?$AAm?$AA?5?$AAH?$AAW?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DC@PMGMNFPK@?$AAA?$AAb?$AAo?$AAu?$AAt?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAH?$AAW?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EA@JDMAPCPA@?$AA?5?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?5?$AA?9?$AA?5?$AAC?$AAl?$AAo?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AA?5?$AA0?$AAx?$AA?$CF?$AAX?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EI@FADDJAGG@?$AAC?$AAO?$AAM?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?5?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAf?$AAi?$AAn?$AAd?$AA?5?$AAp?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAH?$AAe?$AAa@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BM@ODDOENCJ@?$AA?$CL?$AAC?$AAO?$AAM?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00068			 AREA	 |.pdata|, PDATA
|$T41811| DCD	|$LN28@COM_Deinit|
	DCD	0x4000f004

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@OGICEDGH@?$AA?9?$AAC?$AAO?$AAM?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "C", 0x0, "O", 0x0, "M", 0x0, "_", 0x0, "D", 0x0, "e"
	DCB	0x0, "i", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DC@CLHJIHHM@?$AAR?$AAe?$AAt?$AAu?$AAr?$AAn?$AAe?$AAd?$AA?5?$AAf?$AAr?$AAo?$AAm?$AA?5?$AAH?$AAW?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@| DCB "R"
	DCB	0x0, "e", 0x0, "t", 0x0, "u", 0x0, "r", 0x0, "n", 0x0, "e"
	DCB	0x0, "d", 0x0, " ", 0x0, "f", 0x0, "r", 0x0, "o", 0x0, "m"
	DCB	0x0, " ", 0x0, "H", 0x0, "W", 0x0, "D", 0x0, "e", 0x0, "i"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DC@PMGMNFPK@?$AAA?$AAb?$AAo?$AAu?$AAt?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAH?$AAW?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@| DCB "A"
	DCB	0x0, "b", 0x0, "o", 0x0, "u", 0x0, "t", 0x0, " ", 0x0, "t"
	DCB	0x0, "o", 0x0, " ", 0x0, "c", 0x0, "a", 0x0, "l", 0x0, "l"
	DCB	0x0, " ", 0x0, "H", 0x0, "W", 0x0, "D", 0x0, "e", 0x0, "i"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@JDMAPCPA@?$AA?5?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?5?$AA?9?$AA?5?$AAC?$AAl?$AAo?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AA?5?$AA0?$AAx?$AA?$CF?$AAX?$AA?$AN?$AA?6?$AA?$AA@| DCB " "
	DCB	0x0, "D", 0x0, "e", 0x0, "i", 0x0, "n", 0x0, "i", 0x0, "t"
	DCB	0x0, " ", 0x0, "-", 0x0, " ", 0x0, "C", 0x0, "l", 0x0, "o"
	DCB	0x0, "s", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, " ", 0x0, "H"
	DCB	0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "X", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EI@FADDJAGG@?$AAC?$AAO?$AAM?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?5?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAf?$AAi?$AAn?$AAd?$AA?5?$AAp?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAH?$AAe?$AAa@| DCB "C"
	DCB	0x0, "O", 0x0, "M", 0x0, "_", 0x0, "D", 0x0, "e", 0x0, "i"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, " ", 0x0, "c", 0x0, "a"
	DCB	0x0, "n", 0x0, "'", 0x0, "t", 0x0, " ", 0x0, "f", 0x0, "i"
	DCB	0x0, "n", 0x0, "d", 0x0, " ", 0x0, "p", 0x0, "S", 0x0, "e"
	DCB	0x0, "r", 0x0, "i", 0x0, "a", 0x0, "l", 0x0, "H", 0x0, "e"
	DCB	0x0, "a", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@ODDOENCJ@?$AA?$CL?$AAC?$AAO?$AAM?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "C", 0x0, "O", 0x0, "M", 0x0, "_", 0x0, "D", 0x0, "e"
	DCB	0x0, "i", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  03d14			 AREA	 |.text|, CODE, ARM

  03d14		 |COM_Deinit| PROC

; 1364 : {

  03d14		 |$LN28@COM_Deinit|
  03d14	e1a0c00d	 mov         r12, sp
  03d18	e92d0001	 stmdb       sp!, {r0}
  03d1c	e92d5000	 stmdb       sp!, {r12, lr}
  03d20	e24dd024	 sub         sp, sp, #0x24
  03d24		 |$M41808|

; 1365 :     DEBUGMSG (ZONE_INIT|ZONE_FUNCTION, (TEXT("+COM_Deinit\r\n")));

  03d24	e59f3390	 ldr         r3, [pc, #0x390]
  03d28	e5933440	 ldr         r3, [r3, #0x440]
  03d2c	e2032001	 and         r2, r3, #1
  03d30	e59f3384	 ldr         r3, [pc, #0x384]
  03d34	e5933440	 ldr         r3, [r3, #0x440]
  03d38	e2033a02	 and         r3, r3, #2, 20
  03d3c	e1923003	 orrs        r3, r2, r3
  03d40	0a000004	 beq         |$LN14@COM_Deinit|
  03d44	e59f0384	 ldr         r0, [pc, #0x384]
  03d48	eb000000	 bl          NKDbgPrintfW
  03d4c	e3a03001	 mov         r3, #1
  03d50	e58d300c	 str         r3, [sp, #0xC]
  03d54	ea000001	 b           |$LN15@COM_Deinit|
  03d58		 |$LN14@COM_Deinit|
  03d58	e3a03000	 mov         r3, #0
  03d5c	e58d300c	 str         r3, [sp, #0xC]
  03d60		 |$LN15@COM_Deinit|

; 1366 : 
; 1367 :     if ( !pSerialHead ) {

  03d60	e59d302c	 ldr         r3, [sp, #0x2C]
  03d64	e3530000	 cmp         r3, #0
  03d68	1a000013	 bne         |$LN11@COM_Deinit|

; 1368 :         /* Can't do much without this */
; 1369 :         DEBUGMSG (ZONE_INIT|ZONE_ERROR,
; 1370 :                   (TEXT("COM_Deinit can't find pSerialHead\r\n")));

  03d6c	e59f3348	 ldr         r3, [pc, #0x348]
  03d70	e5933440	 ldr         r3, [r3, #0x440]
  03d74	e2032001	 and         r2, r3, #1
  03d78	e59f333c	 ldr         r3, [pc, #0x33C]
  03d7c	e5933440	 ldr         r3, [r3, #0x440]
  03d80	e2033902	 and         r3, r3, #2, 18
  03d84	e1923003	 orrs        r3, r2, r3
  03d88	0a000004	 beq         |$LN16@COM_Deinit|
  03d8c	e59f0338	 ldr         r0, [pc, #0x338]
  03d90	eb000000	 bl          NKDbgPrintfW
  03d94	e3a03001	 mov         r3, #1
  03d98	e58d3010	 str         r3, [sp, #0x10]
  03d9c	ea000001	 b           |$LN17@COM_Deinit|
  03da0		 |$LN16@COM_Deinit|
  03da0	e3a03000	 mov         r3, #0
  03da4	e58d3010	 str         r3, [sp, #0x10]
  03da8		 |$LN17@COM_Deinit|

; 1371 :         SetLastError(ERROR_INVALID_HANDLE);

  03da8	e3a00006	 mov         r0, #6
  03dac	eb000000	 bl          SetLastError

; 1372 :         return(FALSE);

  03db0	e3a03000	 mov         r3, #0
  03db4	e58d3008	 str         r3, [sp, #8]
  03db8	ea0000ba	 b           |$LN12@COM_Deinit|
  03dbc		 |$LN11@COM_Deinit|

; 1373 :     }
; 1374 : 
; 1375 :     // If we have an interrupt handler thread, kill it
; 1376 :     if (pSerialHead->pHWObj && (pSerialHead->pHWObj->BindFlags & THREAD_IN_MDD)!=0 ) {

  03dbc	e59d302c	 ldr         r3, [sp, #0x2C]
  03dc0	e2833028	 add         r3, r3, #0x28
  03dc4	e5933000	 ldr         r3, [r3]
  03dc8	e3530000	 cmp         r3, #0
  03dcc	0a000007	 beq         |$LN10@COM_Deinit|
  03dd0	e59d302c	 ldr         r3, [sp, #0x2C]
  03dd4	e2833028	 add         r3, r3, #0x28
  03dd8	e5933000	 ldr         r3, [r3]
  03ddc	e5933000	 ldr         r3, [r3]
  03de0	e3130003	 tst         r3, #3
  03de4	0a000001	 beq         |$LN10@COM_Deinit|

; 1377 :         StopDispatchThread( pSerialHead );

  03de8	e59d002c	 ldr         r0, [sp, #0x2C]
  03dec	eb000000	 bl          StopDispatchThread
  03df0		 |$LN10@COM_Deinit|

; 1378 :     }
; 1379 : 
; 1380 :     /*
; 1381 :     ** Call close, if we have a user.  Note that this call will ensure that
; 1382 :     ** all users are out of the serial routines before it returns, so we can
; 1383 :     ** go ahead and free our internal memory.
; 1384 :     */
; 1385 :     EnterCriticalSection(&(pSerialHead->OpenCS));

  03df0	e59d302c	 ldr         r3, [sp, #0x2C]
  03df4	e28300ec	 add         r0, r3, #0xEC
  03df8	eb000000	 bl          EnterCriticalSection

; 1386 :     if ( pSerialHead->OpenCnt ) {

  03dfc	e59d302c	 ldr         r3, [sp, #0x2C]
  03e00	e2833090	 add         r3, r3, #0x90
  03e04	e5933000	 ldr         r3, [r3]
  03e08	e3530000	 cmp         r3, #0
  03e0c	0a000021	 beq         |$LN9@COM_Deinit|

; 1387 :         PLIST_ENTRY     pEntry;
; 1388 :         PHW_OPEN_INFO   pOpenHead;
; 1389 : 
; 1390 :         pEntry = pSerialHead->OpenList.Flink;

  03e10	e59d302c	 ldr         r3, [sp, #0x2C]
  03e14	e28330e4	 add         r3, r3, #0xE4
  03e18	e5933000	 ldr         r3, [r3]
  03e1c	e58d3000	 str         r3, [sp]
  03e20		 |$LN8@COM_Deinit|

; 1391 :         while ( pEntry != &pSerialHead->OpenList ) {

  03e20	e59d302c	 ldr         r3, [sp, #0x2C]
  03e24	e28320e4	 add         r2, r3, #0xE4
  03e28	e59d3000	 ldr         r3, [sp]
  03e2c	e1530002	 cmp         r3, r2
  03e30	0a000018	 beq         |$LN7@COM_Deinit|

; 1392 :             pOpenHead = CONTAINING_RECORD( pEntry, HW_OPEN_INFO, llist);

  03e34	e59d3000	 ldr         r3, [sp]
  03e38	e2433034	 sub         r3, r3, #0x34
  03e3c	e58d3004	 str         r3, [sp, #4]

; 1393 :             pEntry = pEntry->Flink;  // advance to next

  03e40	e59d3000	 ldr         r3, [sp]
  03e44	e5933000	 ldr         r3, [r3]
  03e48	e58d3000	 str         r3, [sp]

; 1394 : 
; 1395 :             DEBUGMSG (ZONE_INIT | ZONE_CLOSE, (TEXT(" Deinit - Closing Handle 0x%X\r\n"),
; 1396 :                                                pOpenHead ));

  03e4c	e59f3268	 ldr         r3, [pc, #0x268]
  03e50	e5933440	 ldr         r3, [r3, #0x440]
  03e54	e2032001	 and         r2, r3, #1
  03e58	e59f325c	 ldr         r3, [pc, #0x25C]
  03e5c	e5933440	 ldr         r3, [r3, #0x440]
  03e60	e2033010	 and         r3, r3, #0x10
  03e64	e1923003	 orrs        r3, r2, r3
  03e68	0a000005	 beq         |$LN18@COM_Deinit|
  03e6c	e59d1004	 ldr         r1, [sp, #4]
  03e70	e59f0250	 ldr         r0, [pc, #0x250]
  03e74	eb000000	 bl          NKDbgPrintfW
  03e78	e3a03001	 mov         r3, #1
  03e7c	e58d3014	 str         r3, [sp, #0x14]
  03e80	ea000001	 b           |$LN19@COM_Deinit|
  03e84		 |$LN18@COM_Deinit|
  03e84	e3a03000	 mov         r3, #0
  03e88	e58d3014	 str         r3, [sp, #0x14]
  03e8c		 |$LN19@COM_Deinit|

; 1397 :             COM_Close(pOpenHead);

  03e8c	e59d0004	 ldr         r0, [sp, #4]
  03e90	eb000000	 bl          COM_Close

; 1398 :         }

  03e94	eaffffe1	 b           |$LN8@COM_Deinit|
  03e98		 |$LN7@COM_Deinit|
  03e98		 |$LN9@COM_Deinit|

; 1399 :     }
; 1400 :     LeaveCriticalSection(&(pSerialHead->OpenCS));

  03e98	e59d302c	 ldr         r3, [sp, #0x2C]
  03e9c	e28300ec	 add         r0, r3, #0xEC
  03ea0	eb000000	 bl          LeaveCriticalSection

; 1401 : 
; 1402 :     /* Free our resources */
; 1403 :     if ( pSerialHead->hSerialEvent )

  03ea4	e59d302c	 ldr         r3, [sp, #0x2C]
  03ea8	e2833030	 add         r3, r3, #0x30
  03eac	e5933000	 ldr         r3, [r3]
  03eb0	e3530000	 cmp         r3, #0
  03eb4	0a000003	 beq         |$LN6@COM_Deinit|

; 1404 :         CloseHandle(pSerialHead->hSerialEvent);

  03eb8	e59d302c	 ldr         r3, [sp, #0x2C]
  03ebc	e2833030	 add         r3, r3, #0x30
  03ec0	e5930000	 ldr         r0, [r3]
  03ec4	eb000000	 bl          CloseHandle
  03ec8		 |$LN6@COM_Deinit|

; 1405 :     if ( pSerialHead->hKillDispatchThread )

  03ec8	e59d302c	 ldr         r3, [sp, #0x2C]
  03ecc	e2833038	 add         r3, r3, #0x38
  03ed0	e5933000	 ldr         r3, [r3]
  03ed4	e3530000	 cmp         r3, #0
  03ed8	0a000003	 beq         |$LN5@COM_Deinit|

; 1406 :         CloseHandle(pSerialHead->hKillDispatchThread);

  03edc	e59d302c	 ldr         r3, [sp, #0x2C]
  03ee0	e2833038	 add         r3, r3, #0x38
  03ee4	e5930000	 ldr         r0, [r3]
  03ee8	eb000000	 bl          CloseHandle
  03eec		 |$LN5@COM_Deinit|

; 1407 :     if ( pSerialHead->hTransmitEvent )

  03eec	e59d302c	 ldr         r3, [sp, #0x2C]
  03ef0	e283303c	 add         r3, r3, #0x3C
  03ef4	e5933000	 ldr         r3, [r3]
  03ef8	e3530000	 cmp         r3, #0
  03efc	0a000003	 beq         |$LN4@COM_Deinit|

; 1408 :         CloseHandle(pSerialHead->hTransmitEvent);

  03f00	e59d302c	 ldr         r3, [sp, #0x2C]
  03f04	e283303c	 add         r3, r3, #0x3C
  03f08	e5930000	 ldr         r0, [r3]
  03f0c	eb000000	 bl          CloseHandle
  03f10		 |$LN4@COM_Deinit|

; 1409 :     if ( pSerialHead->hReadEvent )

  03f10	e59d302c	 ldr         r3, [sp, #0x2C]
  03f14	e2833034	 add         r3, r3, #0x34
  03f18	e5933000	 ldr         r3, [r3]
  03f1c	e3530000	 cmp         r3, #0
  03f20	0a000003	 beq         |$LN3@COM_Deinit|

; 1410 :         CloseHandle(pSerialHead->hReadEvent);

  03f24	e59d302c	 ldr         r3, [sp, #0x2C]
  03f28	e2833034	 add         r3, r3, #0x34
  03f2c	e5930000	 ldr         r0, [r3]
  03f30	eb000000	 bl          CloseHandle
  03f34		 |$LN3@COM_Deinit|

; 1411 : 
; 1412 :     DeleteCriticalSection(&(pSerialHead->ReceiveCritSec1));

  03f34	e59d302c	 ldr         r3, [sp, #0x2C]
  03f38	e2830014	 add         r0, r3, #0x14
  03f3c	eb000000	 bl          DeleteCriticalSection

; 1413 :     DeleteCriticalSection(&(pSerialHead->TransmitCritSec1));

  03f40	e59d002c	 ldr         r0, [sp, #0x2C]
  03f44	eb000000	 bl          DeleteCriticalSection

; 1414 :     DeleteCriticalSection(&(pSerialHead->RxBufferInfo.CS));

  03f48	e59d302c	 ldr         r3, [sp, #0x2C]
  03f4c	e28300b0	 add         r0, r3, #0xB0
  03f50	eb000000	 bl          DeleteCriticalSection

; 1415 :     DeleteCriticalSection(&(pSerialHead->TxBufferInfo.CS));

  03f54	e59d302c	 ldr         r3, [sp, #0x2C]
  03f58	e28300d0	 add         r0, r3, #0xD0
  03f5c	eb000000	 bl          DeleteCriticalSection

; 1416 :     DeleteCriticalSection(&(pSerialHead->OpenCS));

  03f60	e59d302c	 ldr         r3, [sp, #0x2C]
  03f64	e28300ec	 add         r0, r3, #0xEC
  03f68	eb000000	 bl          DeleteCriticalSection

; 1417 : 
; 1418 :     if ( pSerialHead->RxBufferInfo.RxCharBuffer )

  03f6c	e59d302c	 ldr         r3, [sp, #0x2C]
  03f70	e28330ac	 add         r3, r3, #0xAC
  03f74	e5933000	 ldr         r3, [r3]
  03f78	e3530000	 cmp         r3, #0
  03f7c	0a000003	 beq         |$LN2@COM_Deinit|

; 1419 :         LocalFree(pSerialHead->RxBufferInfo.RxCharBuffer);

  03f80	e59d302c	 ldr         r3, [sp, #0x2C]
  03f84	e28330ac	 add         r3, r3, #0xAC
  03f88	e5930000	 ldr         r0, [r3]
  03f8c	eb000000	 bl          LocalFree
  03f90		 |$LN2@COM_Deinit|

; 1420 : 
; 1421 :     /* Now, call HW specific deinit function */
; 1422 :     if (pSerialHead->pHWHead && pSerialHead->pHWObj && pSerialHead->pHWObj->pFuncTbl ) {

  03f90	e59d302c	 ldr         r3, [sp, #0x2C]
  03f94	e283302c	 add         r3, r3, #0x2C
  03f98	e5933000	 ldr         r3, [r3]
  03f9c	e3530000	 cmp         r3, #0
  03fa0	0a00002d	 beq         |$LN1@COM_Deinit|
  03fa4	e59d302c	 ldr         r3, [sp, #0x2C]
  03fa8	e2833028	 add         r3, r3, #0x28
  03fac	e5933000	 ldr         r3, [r3]
  03fb0	e3530000	 cmp         r3, #0
  03fb4	0a000028	 beq         |$LN1@COM_Deinit|
  03fb8	e59d302c	 ldr         r3, [sp, #0x2C]
  03fbc	e2833028	 add         r3, r3, #0x28
  03fc0	e5933000	 ldr         r3, [r3]
  03fc4	e2833008	 add         r3, r3, #8
  03fc8	e5933000	 ldr         r3, [r3]
  03fcc	e3530000	 cmp         r3, #0
  03fd0	0a000021	 beq         |$LN1@COM_Deinit|

; 1423 :         DEBUGMSG (ZONE_INIT, (TEXT("About to call HWDeinit\r\n")));

  03fd4	e59f30e0	 ldr         r3, [pc, #0xE0]
  03fd8	e5933440	 ldr         r3, [r3, #0x440]
  03fdc	e3130001	 tst         r3, #1
  03fe0	0a000004	 beq         |$LN20@COM_Deinit|
  03fe4	e59f00d8	 ldr         r0, [pc, #0xD8]
  03fe8	eb000000	 bl          NKDbgPrintfW
  03fec	e3a03001	 mov         r3, #1
  03ff0	e58d3018	 str         r3, [sp, #0x18]
  03ff4	ea000001	 b           |$LN21@COM_Deinit|
  03ff8		 |$LN20@COM_Deinit|
  03ff8	e3a03000	 mov         r3, #0
  03ffc	e58d3018	 str         r3, [sp, #0x18]
  04000		 |$LN21@COM_Deinit|

; 1424 :         pSerialHead->pHWObj->pFuncTbl->HWDeinit(pSerialHead->pHWHead);

  04000	e59d302c	 ldr         r3, [sp, #0x2C]
  04004	e283302c	 add         r3, r3, #0x2C
  04008	e5930000	 ldr         r0, [r3]
  0400c	e59d302c	 ldr         r3, [sp, #0x2C]
  04010	e2833028	 add         r3, r3, #0x28
  04014	e5933000	 ldr         r3, [r3]
  04018	e2833008	 add         r3, r3, #8
  0401c	e5933000	 ldr         r3, [r3]
  04020	e2833008	 add         r3, r3, #8
  04024	e5933000	 ldr         r3, [r3]
  04028	e1a0e00f	 mov         lr, pc
  0402c	e12fff13	 bx          r3

; 1425 :         DEBUGMSG (ZONE_INIT, (TEXT("Returned from HWDeinit\r\n")));

  04030	e59f3084	 ldr         r3, [pc, #0x84]
  04034	e5933440	 ldr         r3, [r3, #0x440]
  04038	e3130001	 tst         r3, #1
  0403c	0a000004	 beq         |$LN22@COM_Deinit|
  04040	e59f0078	 ldr         r0, [pc, #0x78]
  04044	eb000000	 bl          NKDbgPrintfW
  04048	e3a03001	 mov         r3, #1
  0404c	e58d301c	 str         r3, [sp, #0x1C]
  04050	ea000001	 b           |$LN23@COM_Deinit|
  04054		 |$LN22@COM_Deinit|
  04054	e3a03000	 mov         r3, #0
  04058	e58d301c	 str         r3, [sp, #0x1C]
  0405c		 |$LN23@COM_Deinit|
  0405c		 |$LN1@COM_Deinit|

; 1426 :     }
; 1427 : 
; 1428 :     LocalFree(pSerialHead);

  0405c	e59d002c	 ldr         r0, [sp, #0x2C]
  04060	eb000000	 bl          LocalFree

; 1429 : 
; 1430 :     DEBUGMSG (ZONE_INIT|ZONE_FUNCTION, (TEXT("-COM_Deinit\r\n")));

  04064	e59f3050	 ldr         r3, [pc, #0x50]
  04068	e5933440	 ldr         r3, [r3, #0x440]
  0406c	e2032001	 and         r2, r3, #1
  04070	e59f3044	 ldr         r3, [pc, #0x44]
  04074	e5933440	 ldr         r3, [r3, #0x440]
  04078	e2033a02	 and         r3, r3, #2, 20
  0407c	e1923003	 orrs        r3, r2, r3
  04080	0a000004	 beq         |$LN24@COM_Deinit|
  04084	e59f002c	 ldr         r0, [pc, #0x2C]
  04088	eb000000	 bl          NKDbgPrintfW
  0408c	e3a03001	 mov         r3, #1
  04090	e58d3020	 str         r3, [sp, #0x20]
  04094	ea000001	 b           |$LN25@COM_Deinit|
  04098		 |$LN24@COM_Deinit|
  04098	e3a03000	 mov         r3, #0
  0409c	e58d3020	 str         r3, [sp, #0x20]
  040a0		 |$LN25@COM_Deinit|

; 1431 :     return(TRUE);

  040a0	e3a03001	 mov         r3, #1
  040a4	e58d3008	 str         r3, [sp, #8]
  040a8		 |$LN12@COM_Deinit|

; 1432 : }

  040a8	e59d0008	 ldr         r0, [sp, #8]
  040ac	e28dd024	 add         sp, sp, #0x24
  040b0	e89d6000	 ldmia       sp, {sp, lr}
  040b4	e12fff1e	 bx          lr
  040b8		 |$LN29@COM_Deinit|
  040b8		 |$LN30@COM_Deinit|
  040b8	00000000	 DCD         |??_C@_1BM@OGICEDGH@?$AA?9?$AAC?$AAO?$AAM?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@|
  040bc		 |$LN31@COM_Deinit|
  040bc	00000000	 DCD         |dpCurSettings|
  040c0		 |$LN32@COM_Deinit|
  040c0	00000000	 DCD         |??_C@_1DC@CLHJIHHM@?$AAR?$AAe?$AAt?$AAu?$AAr?$AAn?$AAe?$AAd?$AA?5?$AAf?$AAr?$AAo?$AAm?$AA?5?$AAH?$AAW?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@|
  040c4		 |$LN33@COM_Deinit|
  040c4	00000000	 DCD         |??_C@_1DC@PMGMNFPK@?$AAA?$AAb?$AAo?$AAu?$AAt?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAH?$AAW?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@|
  040c8		 |$LN34@COM_Deinit|
  040c8	00000000	 DCD         |??_C@_1EA@JDMAPCPA@?$AA?5?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?5?$AA?9?$AA?5?$AAC?$AAl?$AAo?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AA?5?$AA0?$AAx?$AA?$CF?$AAX?$AA?$AN?$AA?6?$AA?$AA@|
  040cc		 |$LN35@COM_Deinit|
  040cc	00000000	 DCD         |??_C@_1EI@FADDJAGG@?$AAC?$AAO?$AAM?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?5?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAf?$AAi?$AAn?$AAd?$AA?5?$AAp?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAH?$AAe?$AAa@|
  040d0		 |$LN36@COM_Deinit|
  040d0	00000000	 DCD         |??_C@_1BM@ODDOENCJ@?$AA?$CL?$AAC?$AAO?$AAM?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@|
  040d4		 |$M41809|

			 ENDP  ; |COM_Deinit|

	EXPORT	|??_C@_1GI@KJLFCJIJ@?$AA?9?$AAC?$AAO?$AAM?$AA_?$AAR?$AAE?$AAA?$AAD?$AA?3?$AA?5?$AAr?$AAe?$AAt?$AAu?$AAr?$AAn?$AAi?$AAn?$AAg?$AA?5?$AA?$CF?$AAd?$AA?5?$AA?$CI?$AAt?$AAo?$AAt?$AAa?$AAl?$AA?5?$AA?$CF@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CO@BMKNIMFL@?$AAR?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AAB?$AAy?$AAt?$AAe?$AAs?$AA?5?$AAe?$AAx?$AAi?$AAt?$AAi?$AAn?$AAg?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EI@NJBLBAI@?$AAD?$AAT?$AAR?$AA_?$AAC?$AAO?$AAN?$AAT?$AAR?$AAO?$AAL?$AA_?$AAH?$AAA?$AAN?$AAD?$AAS?$AAH?$AAA?$AAK?$AAE?$AA?5?$AAS?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAD?$AAT@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EI@PFOBJKJM@?$AAR?$AAT?$AAS?$AA_?$AAC?$AAO?$AAN?$AAT?$AAR?$AAO?$AAL?$AA_?$AAH?$AAA?$AAN?$AAD?$AAS?$AAH?$AAA?$AAK?$AAE?$AA?5?$AAS?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAR?$AAT@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BM@LDMNCPPP@?$AAS?$AAe?$AAn?$AAd?$AAi?$AAn?$AAg?$AA?5?$AAX?$AAO?$AAN?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DO@LAJCOFEP@?$AAC?$AAO?$AAM?$AA_?$AAR?$AAe?$AAa?$AAd?$AA?5?$AA?9?$AA?5?$AAd?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAw?$AAa?$AAs?$AA?5?$AAc?$AAl?$AAo?$AAs?$AAe?$AAd?$AA?6?$AA?$AN?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DG@NGGANINM@?$AAC?$AAO?$AAM?$AA_?$AAR?$AAe?$AAa?$AAd?$AA?5?$AA?9?$AA?5?$AAA?$AAb?$AAo?$AAr?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CK@GLIEOMOP@?$AAA?$AAb?$AAo?$AAu?$AAt?$AA?5?$AAt?$AAo?$AA?5?$AAw?$AAa?$AAi?$AAt?$AA?5?$AA?$CF?$AAd?$AAm?$AAs?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FC@CGIHBGNN@?$AAT?$AAo?$AAp?$AA?5?$AAo?$AAf?$AA?5?$AAL?$AAo?$AAo?$AAp?$AA?5?$AAF?$AAi?$AAf?$AAo?$AA?$CI?$AAR?$AA?$DN?$AA?$CF?$AAd?$AA?0?$AAW?$AA?$DN?$AA?$CF?$AAd?$AA?0?$AAL?$AA?$DN?$AA?$CF?$AAd?$AA?0@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CE@PICJNKFA@?$AAT?$AAo?$AAt?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?3?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FO@KCNFPNI@?$AAC?$AAO?$AAM?$AA_?$AAR?$AAE?$AAA?$AAD?$AA?0?$AA?5?$AAb?$AAa?$AAd?$AA?5?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$CI?$AA0?$AAx?$AA?$CF?$AAx?$AA?$CJ?$AA?5?$AAo?$AAr?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FE@BNFDNPPG@?$AAC?$AAO?$AAM?$AA_?$AAR?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAA?$AAc?$AAc?$AAe?$AAs?$AAs?$AA?5?$AAp?$AAe?$AAr?$AAm?$AAi?$AAs?$AAs?$AAi?$AAo?$AAn?$AA?5?$AAf?$AAa?$AAi?$AAl@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DI@CKPKPEIH@?$AAC?$AAO?$AAM?$AA_?$AAR?$AAE?$AAA?$AAD?$AA?0?$AA?5?$AAd?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DC@DDENEIPK@?$AAC?$AAO?$AAM?$AA_?$AAR?$AAE?$AAA?$AAD?$AA?0?$AA?5?$AAW?$AAr?$AAo?$AAn?$AAg?$AA?5?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DE@HFOANDEN@?$AA?$CL?$AAC?$AAO?$AAM?$AA_?$AAR?$AAE?$AAA?$AAD?$AA?$CI?$AA0?$AAx?$AA?$CF?$AAX?$AA?0?$AA0?$AAx?$AA?$CF?$AAX?$AA?0?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|COM_Read|
	IMPORT	|GetTickCount|
	IMPORT	|CeSafeCopyMemory|

  00070			 AREA	 |.pdata|, PDATA
|$T41873| DCD	|$LN78@COM_Read|
	DCD	0x4002d404

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GI@KJLFCJIJ@?$AA?9?$AAC?$AAO?$AAM?$AA_?$AAR?$AAE?$AAA?$AAD?$AA?3?$AA?5?$AAr?$AAe?$AAt?$AAu?$AAr?$AAn?$AAi?$AAn?$AAg?$AA?5?$AA?$CF?$AAd?$AA?5?$AA?$CI?$AAt?$AAo?$AAt?$AAa?$AAl?$AA?5?$AA?$CF@| DCB "-"
	DCB	0x0, "C", 0x0, "O", 0x0, "M", 0x0, "_", 0x0, "R", 0x0, "E"
	DCB	0x0, "A", 0x0, "D", 0x0, ":", 0x0, " ", 0x0, "r", 0x0, "e"
	DCB	0x0, "t", 0x0, "u", 0x0, "r", 0x0, "n", 0x0, "i", 0x0, "n"
	DCB	0x0, "g", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, "("
	DCB	0x0, "t", 0x0, "o", 0x0, "t", 0x0, "a", 0x0, "l", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "d", 0x0, "r"
	DCB	0x0, "o", 0x0, "p", 0x0, "p", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, ",", 0x0, "%", 0x0, "d", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@BMKNIMFL@?$AAR?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AAB?$AAy?$AAt?$AAe?$AAs?$AA?5?$AAe?$AAx?$AAi?$AAt?$AAi?$AAn?$AAg?$AA?$AN?$AA?6?$AA?$AA@| DCB "R"
	DCB	0x0, "e", 0x0, "c", 0x0, "e", 0x0, "i", 0x0, "v", 0x0, "e"
	DCB	0x0, "B", 0x0, "y", 0x0, "t", 0x0, "e", 0x0, "s", 0x0, " "
	DCB	0x0, "e", 0x0, "x", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "n"
	DCB	0x0, "g", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EI@NJBLBAI@?$AAD?$AAT?$AAR?$AA_?$AAC?$AAO?$AAN?$AAT?$AAR?$AAO?$AAL?$AA_?$AAH?$AAA?$AAN?$AAD?$AAS?$AAH?$AAA?$AAK?$AAE?$AA?5?$AAS?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAD?$AAT@| DCB "D"
	DCB	0x0, "T", 0x0, "R", 0x0, "_", 0x0, "C", 0x0, "O", 0x0, "N"
	DCB	0x0, "T", 0x0, "R", 0x0, "O", 0x0, "L", 0x0, "_", 0x0, "H"
	DCB	0x0, "A", 0x0, "N", 0x0, "D", 0x0, "S", 0x0, "H", 0x0, "A"
	DCB	0x0, "K", 0x0, "E", 0x0, " ", 0x0, "S", 0x0, "e", 0x0, "t"
	DCB	0x0, "t", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, " ", 0x0, "D"
	DCB	0x0, "T", 0x0, "R", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EI@PFOBJKJM@?$AAR?$AAT?$AAS?$AA_?$AAC?$AAO?$AAN?$AAT?$AAR?$AAO?$AAL?$AA_?$AAH?$AAA?$AAN?$AAD?$AAS?$AAH?$AAA?$AAK?$AAE?$AA?5?$AAS?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAR?$AAT@| DCB "R"
	DCB	0x0, "T", 0x0, "S", 0x0, "_", 0x0, "C", 0x0, "O", 0x0, "N"
	DCB	0x0, "T", 0x0, "R", 0x0, "O", 0x0, "L", 0x0, "_", 0x0, "H"
	DCB	0x0, "A", 0x0, "N", 0x0, "D", 0x0, "S", 0x0, "H", 0x0, "A"
	DCB	0x0, "K", 0x0, "E", 0x0, " ", 0x0, "S", 0x0, "e", 0x0, "t"
	DCB	0x0, "t", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, " ", 0x0, "R"
	DCB	0x0, "T", 0x0, "S", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@LDMNCPPP@?$AAS?$AAe?$AAn?$AAd?$AAi?$AAn?$AAg?$AA?5?$AAX?$AAO?$AAN?$AA?$AN?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "e", 0x0, "n", 0x0, "d", 0x0, "i", 0x0, "n", 0x0, "g"
	DCB	0x0, " ", 0x0, "X", 0x0, "O", 0x0, "N", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@LAJCOFEP@?$AAC?$AAO?$AAM?$AA_?$AAR?$AAe?$AAa?$AAd?$AA?5?$AA?9?$AA?5?$AAd?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAw?$AAa?$AAs?$AA?5?$AAc?$AAl?$AAo?$AAs?$AAe?$AAd?$AA?6?$AA?$AN?$AA?$AA@| DCB "C"
	DCB	0x0, "O", 0x0, "M", 0x0, "_", 0x0, "R", 0x0, "e", 0x0, "a"
	DCB	0x0, "d", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "d", 0x0, "e"
	DCB	0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, " ", 0x0, "w"
	DCB	0x0, "a", 0x0, "s", 0x0, " ", 0x0, "c", 0x0, "l", 0x0, "o"
	DCB	0x0, "s", 0x0, "e", 0x0, "d", 0x0, 0xa, 0x0, 0xd, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DG@NGGANINM@?$AAC?$AAO?$AAM?$AA_?$AAR?$AAe?$AAa?$AAd?$AA?5?$AA?9?$AA?5?$AAA?$AAb?$AAo?$AAr?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "C"
	DCB	0x0, "O", 0x0, "M", 0x0, "_", 0x0, "R", 0x0, "e", 0x0, "a"
	DCB	0x0, "d", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "A", 0x0, "b"
	DCB	0x0, "o", 0x0, "r", 0x0, "t", 0x0, "i", 0x0, "n", 0x0, "g"
	DCB	0x0, " ", 0x0, "r", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CK@GLIEOMOP@?$AAA?$AAb?$AAo?$AAu?$AAt?$AA?5?$AAt?$AAo?$AA?5?$AAw?$AAa?$AAi?$AAt?$AA?5?$AA?$CF?$AAd?$AAm?$AAs?$AA?$AN?$AA?6?$AA?$AA@| DCB "A"
	DCB	0x0, "b", 0x0, "o", 0x0, "u", 0x0, "t", 0x0, " ", 0x0, "t"
	DCB	0x0, "o", 0x0, " ", 0x0, "w", 0x0, "a", 0x0, "i", 0x0, "t"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, "m", 0x0, "s", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FC@CGIHBGNN@?$AAT?$AAo?$AAp?$AA?5?$AAo?$AAf?$AA?5?$AAL?$AAo?$AAo?$AAp?$AA?5?$AAF?$AAi?$AAf?$AAo?$AA?$CI?$AAR?$AA?$DN?$AA?$CF?$AAd?$AA?0?$AAW?$AA?$DN?$AA?$CF?$AAd?$AA?0?$AAL?$AA?$DN?$AA?$CF?$AAd?$AA?0@| DCB "T"
	DCB	0x0, "o", 0x0, "p", 0x0, " ", 0x0, "o", 0x0, "f", 0x0, " "
	DCB	0x0, "L", 0x0, "o", 0x0, "o", 0x0, "p", 0x0, " ", 0x0, "F"
	DCB	0x0, "i", 0x0, "f", 0x0, "o", 0x0, "(", 0x0, "R", 0x0, "="
	DCB	0x0, "%", 0x0, "d", 0x0, ",", 0x0, "W", 0x0, "=", 0x0, "%"
	DCB	0x0, "d", 0x0, ",", 0x0, "L", 0x0, "=", 0x0, "%", 0x0, "d"
	DCB	0x0, ",", 0x0, "B", 0x0, "A", 0x0, "=", 0x0, "%", 0x0, "d"
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@PICJNKFA@?$AAT?$AAo?$AAt?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?3?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "T"
	DCB	0x0, "o", 0x0, "t", 0x0, "a", 0x0, "l", 0x0, "T", 0x0, "i"
	DCB	0x0, "m", 0x0, "e", 0x0, "o", 0x0, "u", 0x0, "t", 0x0, ":"
	DCB	0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FO@KCNFPNI@?$AAC?$AAO?$AAM?$AA_?$AAR?$AAE?$AAA?$AAD?$AA?0?$AA?5?$AAb?$AAa?$AAd?$AA?5?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$CI?$AA0?$AAx?$AA?$CF?$AAx?$AA?$CJ?$AA?5?$AAo?$AAr?$AA?5@| DCB "C"
	DCB	0x0, "O", 0x0, "M", 0x0, "_", 0x0, "R", 0x0, "E", 0x0, "A"
	DCB	0x0, "D", 0x0, ",", 0x0, " ", 0x0, "b", 0x0, "a", 0x0, "d"
	DCB	0x0, " ", 0x0, " ", 0x0, "p", 0x0, "o", 0x0, "i", 0x0, "n"
	DCB	0x0, "t", 0x0, "e", 0x0, "r", 0x0, "(", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "x", 0x0, ")", 0x0, " ", 0x0, "o", 0x0, "r"
	DCB	0x0, " ", 0x0, "l", 0x0, "e", 0x0, "n", 0x0, "g", 0x0, "t"
	DCB	0x0, "h", 0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x"
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FE@BNFDNPPG@?$AAC?$AAO?$AAM?$AA_?$AAR?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAA?$AAc?$AAc?$AAe?$AAs?$AAs?$AA?5?$AAp?$AAe?$AAr?$AAm?$AAi?$AAs?$AAs?$AAi?$AAo?$AAn?$AA?5?$AAf?$AAa?$AAi?$AAl@| DCB "C"
	DCB	0x0, "O", 0x0, "M", 0x0, "_", 0x0, "R", 0x0, "e", 0x0, "a"
	DCB	0x0, "d", 0x0, ":", 0x0, " ", 0x0, "A", 0x0, "c", 0x0, "c"
	DCB	0x0, "e", 0x0, "s", 0x0, "s", 0x0, " ", 0x0, "p", 0x0, "e"
	DCB	0x0, "r", 0x0, "m", 0x0, "i", 0x0, "s", 0x0, "s", 0x0, "i"
	DCB	0x0, "o", 0x0, "n", 0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i"
	DCB	0x0, "l", 0x0, "u", 0x0, "r", 0x0, "e", 0x0, " ", 0x0, "x"
	DCB	0x0, "%", 0x0, "X", 0x0, 0xa, 0x0, 0xd, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DI@CKPKPEIH@?$AAC?$AAO?$AAM?$AA_?$AAR?$AAE?$AAA?$AAD?$AA?0?$AA?5?$AAd?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?$AN?$AA?6?$AA?$AA@| DCB "C"
	DCB	0x0, "O", 0x0, "M", 0x0, "_", 0x0, "R", 0x0, "E", 0x0, "A"
	DCB	0x0, "D", 0x0, ",", 0x0, " ", 0x0, "d", 0x0, "e", 0x0, "v"
	DCB	0x0, "i", 0x0, "c", 0x0, "e", 0x0, " ", 0x0, "n", 0x0, "o"
	DCB	0x0, "t", 0x0, " ", 0x0, "o", 0x0, "p", 0x0, "e", 0x0, "n"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DC@DDENEIPK@?$AAC?$AAO?$AAM?$AA_?$AAR?$AAE?$AAA?$AAD?$AA?0?$AA?5?$AAW?$AAr?$AAo?$AAn?$AAg?$AA?5?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AA?$AN?$AA?6?$AA?$AA@| DCB "C"
	DCB	0x0, "O", 0x0, "M", 0x0, "_", 0x0, "R", 0x0, "E", 0x0, "A"
	DCB	0x0, "D", 0x0, ",", 0x0, " ", 0x0, "W", 0x0, "r", 0x0, "o"
	DCB	0x0, "n", 0x0, "g", 0x0, " ", 0x0, "H", 0x0, "a", 0x0, "n"
	DCB	0x0, "d", 0x0, "l", 0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DE@HFOANDEN@?$AA?$CL?$AAC?$AAO?$AAM?$AA_?$AAR?$AAE?$AAA?$AAD?$AA?$CI?$AA0?$AAx?$AA?$CF?$AAX?$AA?0?$AA0?$AAx?$AA?$CF?$AAX?$AA?0?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "C", 0x0, "O", 0x0, "M", 0x0, "_", 0x0, "R", 0x0, "E"
	DCB	0x0, "A", 0x0, "D", 0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "X", 0x0, ",", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "X"
	DCB	0x0, ",", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  040d4			 AREA	 |.text|, CODE, ARM

  040d4		 |COM_Read| PROC

; 1452 : {

  040d4		 |$LN78@COM_Read|
  040d4	e1a0c00d	 mov         r12, sp
  040d8	e92d0007	 stmdb       sp!, {r0 - r2}
  040dc	e92d5000	 stmdb       sp!, {r12, lr}
  040e0	e24dd0c0	 sub         sp, sp, #0xC0
  040e4		 |$M41870|

; 1453 :     PHW_OPEN_INFO   pOpenHead = (PHW_OPEN_INFO)pHead;

  040e4	e59d30c8	 ldr         r3, [sp, #0xC8]
  040e8	e58d3018	 str         r3, [sp, #0x18]

; 1454 :     PHW_INDEP_INFO  pSerialHead;// = pOpenHead->pSerialHead;
; 1455 :     PHW_VTBL        pFuncTbl;//       = pSerialHead->pHWObj->pFuncTbl;
; 1456 :     PVOID           pHWHead ;//       = pSerialHead->pHWHead;
; 1457 :     ULONG           Ticks;
; 1458 :     ULONG           Timeout;
; 1459 :     ULONG           BytesRead = 0;

  040ec	e3a03000	 mov         r3, #0
  040f0	e58d3020	 str         r3, [sp, #0x20]

; 1460 :     ULONG           IntervalTimeout;    // The interval timeout
; 1461 :     ULONG           AddIntervalTimeout;
; 1462 :     ULONG           TotalTimeout;       // The Total Timeout
; 1463 :     ULONG           TimeSpent = 0;      // How much time have we been waiting?

  040f4	e3a03000	 mov         r3, #0
  040f8	e58d300c	 str         r3, [sp, #0xC]

; 1464 :     ULONG           Len;
; 1465 : 
; 1466 :     DEBUGMSG (ZONE_USR_READ|ZONE_FUNCTION,
; 1467 :               (TEXT("+COM_READ(0x%X,0x%X,%d)\r\n"),
; 1468 :                pHead, pTargetBuffer, BufferLength));

  040fc	e59f3ae0	 ldr         r3, [pc, #0xAE0]
  04100	e5933440	 ldr         r3, [r3, #0x440]
  04104	e2032b02	 and         r2, r3, #2, 22
  04108	e59f3ad4	 ldr         r3, [pc, #0xAD4]
  0410c	e5933440	 ldr         r3, [r3, #0x440]
  04110	e2033a02	 and         r3, r3, #2, 20
  04114	e1923003	 orrs        r3, r2, r3
  04118	0a000007	 beq         |$LN30@COM_Read|
  0411c	e59d30d0	 ldr         r3, [sp, #0xD0]
  04120	e59d20cc	 ldr         r2, [sp, #0xCC]
  04124	e59d10c8	 ldr         r1, [sp, #0xC8]
  04128	e59f0af0	 ldr         r0, [pc, #0xAF0]
  0412c	eb000000	 bl          NKDbgPrintfW
  04130	e3a03001	 mov         r3, #1
  04134	e58d3044	 str         r3, [sp, #0x44]
  04138	ea000001	 b           |$LN31@COM_Read|
  0413c		 |$LN30@COM_Read|
  0413c	e3a03000	 mov         r3, #0
  04140	e58d3044	 str         r3, [sp, #0x44]
  04144		 |$LN31@COM_Read|

; 1469 :     if (pOpenHead==NULL) {

  04144	e59d3018	 ldr         r3, [sp, #0x18]
  04148	e3530000	 cmp         r3, #0
  0414c	1a000013	 bne         |$LN27@COM_Read|

; 1470 :         DEBUGMSG (ZONE_USR_READ|ZONE_ERROR, (TEXT("COM_READ, Wrong Handle\r\n") ));

  04150	e59f3a8c	 ldr         r3, [pc, #0xA8C]
  04154	e5933440	 ldr         r3, [r3, #0x440]
  04158	e2032b02	 and         r2, r3, #2, 22
  0415c	e59f3a80	 ldr         r3, [pc, #0xA80]
  04160	e5933440	 ldr         r3, [r3, #0x440]
  04164	e2033902	 and         r3, r3, #2, 18
  04168	e1923003	 orrs        r3, r2, r3
  0416c	0a000004	 beq         |$LN32@COM_Read|
  04170	e59f0aa4	 ldr         r0, [pc, #0xAA4]
  04174	eb000000	 bl          NKDbgPrintfW
  04178	e3a03001	 mov         r3, #1
  0417c	e58d3048	 str         r3, [sp, #0x48]
  04180	ea000001	 b           |$LN33@COM_Read|
  04184		 |$LN32@COM_Read|
  04184	e3a03000	 mov         r3, #0
  04188	e58d3048	 str         r3, [sp, #0x48]
  0418c		 |$LN33@COM_Read|

; 1471 :         SetLastError (ERROR_INVALID_HANDLE);

  0418c	e3a00006	 mov         r0, #6
  04190	eb000000	 bl          SetLastError

; 1472 :         return(ULONG)-1;

  04194	e3e03000	 mvn         r3, #0
  04198	e58d3038	 str         r3, [sp, #0x38]
  0419c	ea00028b	 b           |$LN28@COM_Read|
  041a0		 |$LN27@COM_Read|

; 1473 :     }
; 1474 :     pSerialHead = pOpenHead->pSerialHead;

  041a0	e59d3018	 ldr         r3, [sp, #0x18]
  041a4	e5933000	 ldr         r3, [r3]
  041a8	e58d3008	 str         r3, [sp, #8]

; 1475 :     // Check to see that the call is valid.
; 1476 :     if ( !pSerialHead || !pSerialHead->OpenCnt ) {

  041ac	e59d3008	 ldr         r3, [sp, #8]
  041b0	e3530000	 cmp         r3, #0
  041b4	0a000004	 beq         |$LN25@COM_Read|
  041b8	e59d3008	 ldr         r3, [sp, #8]
  041bc	e2833090	 add         r3, r3, #0x90
  041c0	e5933000	 ldr         r3, [r3]
  041c4	e3530000	 cmp         r3, #0
  041c8	1a000013	 bne         |$LN26@COM_Read|
  041cc		 |$LN25@COM_Read|

; 1477 :         DEBUGMSG (ZONE_USR_READ|ZONE_ERROR,
; 1478 :                   (TEXT("COM_READ, device not open\r\n") ));

  041cc	e59f3a10	 ldr         r3, [pc, #0xA10]
  041d0	e5933440	 ldr         r3, [r3, #0x440]
  041d4	e2032b02	 and         r2, r3, #2, 22
  041d8	e59f3a04	 ldr         r3, [pc, #0xA04]
  041dc	e5933440	 ldr         r3, [r3, #0x440]
  041e0	e2033902	 and         r3, r3, #2, 18
  041e4	e1923003	 orrs        r3, r2, r3
  041e8	0a000004	 beq         |$LN34@COM_Read|
  041ec	e59f0a24	 ldr         r0, [pc, #0xA24]
  041f0	eb000000	 bl          NKDbgPrintfW
  041f4	e3a03001	 mov         r3, #1
  041f8	e58d304c	 str         r3, [sp, #0x4C]
  041fc	ea000001	 b           |$LN35@COM_Read|
  04200		 |$LN34@COM_Read|
  04200	e3a03000	 mov         r3, #0
  04204	e58d304c	 str         r3, [sp, #0x4C]
  04208		 |$LN35@COM_Read|

; 1479 :         SetLastError (ERROR_INVALID_HANDLE);

  04208	e3a00006	 mov         r0, #6
  0420c	eb000000	 bl          SetLastError

; 1480 :         return(ULONG)-1;

  04210	e3e03000	 mvn         r3, #0
  04214	e58d3038	 str         r3, [sp, #0x38]
  04218	ea00026c	 b           |$LN28@COM_Read|
  0421c		 |$LN26@COM_Read|

; 1481 :     }
; 1482 :     pFuncTbl  = pSerialHead->pHWObj->pFuncTbl;

  0421c	e59d3008	 ldr         r3, [sp, #8]
  04220	e2833028	 add         r3, r3, #0x28
  04224	e5933000	 ldr         r3, [r3]
  04228	e2833008	 add         r3, r3, #8
  0422c	e5933000	 ldr         r3, [r3]
  04230	e58d3014	 str         r3, [sp, #0x14]

; 1483 :     pHWHead   = pSerialHead->pHWHead;

  04234	e59d3008	 ldr         r3, [sp, #8]
  04238	e283302c	 add         r3, r3, #0x2C
  0423c	e5933000	 ldr         r3, [r3]
  04240	e58d302c	 str         r3, [sp, #0x2C]

; 1484 : 
; 1485 :     // Make sure the caller has access permissions
; 1486 :     if ( !(pOpenHead->AccessCode & GENERIC_READ) ) {

  04244	e59d3018	 ldr         r3, [sp, #0x18]
  04248	e2833004	 add         r3, r3, #4
  0424c	e5933000	 ldr         r3, [r3]
  04250	e3130102	 tst         r3, #2, 2
  04254	1a000016	 bne         |$LN24@COM_Read|

; 1487 :         DEBUGMSG(ZONE_USR_READ|ZONE_ERROR,
; 1488 :                  (TEXT("COM_Read: Access permission failure x%X\n\r"),
; 1489 :                   pOpenHead->AccessCode));

  04258	e59f3984	 ldr         r3, [pc, #0x984]
  0425c	e5933440	 ldr         r3, [r3, #0x440]
  04260	e2032b02	 and         r2, r3, #2, 22
  04264	e59f3978	 ldr         r3, [pc, #0x978]
  04268	e5933440	 ldr         r3, [r3, #0x440]
  0426c	e2033902	 and         r3, r3, #2, 18
  04270	e1923003	 orrs        r3, r2, r3
  04274	0a000007	 beq         |$LN36@COM_Read|
  04278	e59d3018	 ldr         r3, [sp, #0x18]
  0427c	e2833004	 add         r3, r3, #4
  04280	e5931000	 ldr         r1, [r3]
  04284	e59f0988	 ldr         r0, [pc, #0x988]
  04288	eb000000	 bl          NKDbgPrintfW
  0428c	e3a03001	 mov         r3, #1
  04290	e58d3050	 str         r3, [sp, #0x50]
  04294	ea000001	 b           |$LN37@COM_Read|
  04298		 |$LN36@COM_Read|
  04298	e3a03000	 mov         r3, #0
  0429c	e58d3050	 str         r3, [sp, #0x50]
  042a0		 |$LN37@COM_Read|

; 1490 :         SetLastError (ERROR_INVALID_ACCESS);

  042a0	e3a0000c	 mov         r0, #0xC
  042a4	eb000000	 bl          SetLastError

; 1491 :         return(ULONG)-1;

  042a8	e3e03000	 mvn         r3, #0
  042ac	e58d3038	 str         r3, [sp, #0x38]
  042b0	ea000246	 b           |$LN28@COM_Read|
  042b4		 |$LN24@COM_Read|

; 1492 :     }
; 1493 : 
; 1494 :     if ( pTargetBuffer == NULL || BufferLength == 0 ) {

  042b4	e59d30cc	 ldr         r3, [sp, #0xCC]
  042b8	e3530000	 cmp         r3, #0
  042bc	0a000002	 beq         |$LN22@COM_Read|
  042c0	e59d30d0	 ldr         r3, [sp, #0xD0]
  042c4	e3530000	 cmp         r3, #0
  042c8	1a000017	 bne         |$LN23@COM_Read|
  042cc		 |$LN22@COM_Read|

; 1495 :         DEBUGMSG (ZONE_READ|ZONE_ERROR,
; 1496 :                   (TEXT("COM_READ, bad  pointer(0x%x) or length(0x%x)\r\n"),pTargetBuffer, BufferLength));

  042cc	e59f3910	 ldr         r3, [pc, #0x910]
  042d0	e5933440	 ldr         r3, [r3, #0x440]
  042d4	e2032004	 and         r2, r3, #4
  042d8	e59f3904	 ldr         r3, [pc, #0x904]
  042dc	e5933440	 ldr         r3, [r3, #0x440]
  042e0	e2033902	 and         r3, r3, #2, 18
  042e4	e1923003	 orrs        r3, r2, r3
  042e8	0a000006	 beq         |$LN38@COM_Read|
  042ec	e59d20d0	 ldr         r2, [sp, #0xD0]
  042f0	e59d10cc	 ldr         r1, [sp, #0xCC]
  042f4	e59f0914	 ldr         r0, [pc, #0x914]
  042f8	eb000000	 bl          NKDbgPrintfW
  042fc	e3a03001	 mov         r3, #1
  04300	e58d3054	 str         r3, [sp, #0x54]
  04304	ea000001	 b           |$LN39@COM_Read|
  04308		 |$LN38@COM_Read|
  04308	e3a03000	 mov         r3, #0
  0430c	e58d3054	 str         r3, [sp, #0x54]
  04310		 |$LN39@COM_Read|

; 1497 :         BytesRead = (ULONG)-1;

  04310	e3e03000	 mvn         r3, #0
  04314	e58d3020	 str         r3, [sp, #0x20]

; 1498 :         SetLastError(ERROR_INVALID_PARAMETER);

  04318	e3a00057	 mov         r0, #0x57
  0431c	eb000000	 bl          SetLastError

; 1499 :         return(ULONG)-1;

  04320	e3e03000	 mvn         r3, #0
  04324	e58d3038	 str         r3, [sp, #0x38]
  04328	ea000228	 b           |$LN28@COM_Read|
  0432c		 |$LN23@COM_Read|

; 1500 :     }
; 1501 : 
; 1502 :     COM_INC_USAGE_CNT(pOpenHead);

  0432c	e59d3018	 ldr         r3, [sp, #0x18]
  04330	e283000c	 add         r0, r3, #0xC
  04334	eb000000	 bl          InterlockedIncrement

; 1503 : 
; 1504 :     /* Practice safe threading.
; 1505 :      */
; 1506 :     EnterCriticalSection(&(pSerialHead->ReceiveCritSec1));

  04338	e59d3008	 ldr         r3, [sp, #8]
  0433c	e2830014	 add         r0, r3, #0x14
  04340	eb000000	 bl          EnterCriticalSection

; 1507 :     pSerialHead->fAbortRead = 0;

  04344	e59d3008	 ldr         r3, [sp, #8]
  04348	e2833094	 add         r3, r3, #0x94
  0434c	e5932000	 ldr         r2, [r3]
  04350	e3e03040	 mvn         r3, #0x40
  04354	e0022003	 and         r2, r2, r3
  04358	e59d3008	 ldr         r3, [sp, #8]
  0435c	e2833094	 add         r3, r3, #0x94
  04360	e5832000	 str         r2, [r3]

; 1508 : 
; 1509 :     /* Compute total time to wait. Take product and add constant.
; 1510 :      */
; 1511 :     if ( MAXDWORD != pSerialHead->CommTimeouts.ReadTotalTimeoutMultiplier ) {

  04364	e59d3008	 ldr         r3, [sp, #8]
  04368	e2833080	 add         r3, r3, #0x80
  0436c	e5933000	 ldr         r3, [r3]
  04370	e3730001	 cmn         r3, #1
  04374	0a000010	 beq         |$LN21@COM_Read|

; 1512 :         TotalTimeout = pSerialHead->CommTimeouts.ReadTotalTimeoutMultiplier*BufferLength +
; 1513 :                        pSerialHead->CommTimeouts.ReadTotalTimeoutConstant;

  04378	e59d3008	 ldr         r3, [sp, #8]
  0437c	e2833080	 add         r3, r3, #0x80
  04380	e5931000	 ldr         r1, [r3]
  04384	e59d30d0	 ldr         r3, [sp, #0xD0]
  04388	e0020391	 mul         r2, r1, r3
  0438c	e59d3008	 ldr         r3, [sp, #8]
  04390	e2833084	 add         r3, r3, #0x84
  04394	e5933000	 ldr         r3, [r3]
  04398	e0823003	 add         r3, r2, r3
  0439c	e58d301c	 str         r3, [sp, #0x1C]

; 1514 :         // Because we are using FIFO and water level is set to 8, we have to do following
; 1515 :         AddIntervalTimeout=pSerialHead->CommTimeouts.ReadTotalTimeoutMultiplier*8;

  043a0	e59d3008	 ldr         r3, [sp, #8]
  043a4	e2833080	 add         r3, r3, #0x80
  043a8	e5932000	 ldr         r2, [r3]
  043ac	e3a03008	 mov         r3, #8
  043b0	e0030392	 mul         r3, r2, r3
  043b4	e58d3024	 str         r3, [sp, #0x24]

; 1516 :     } else {

  043b8	ea000005	 b           |$LN20@COM_Read|
  043bc		 |$LN21@COM_Read|

; 1517 :         TotalTimeout = pSerialHead->CommTimeouts.ReadTotalTimeoutConstant;

  043bc	e59d3008	 ldr         r3, [sp, #8]
  043c0	e2833084	 add         r3, r3, #0x84
  043c4	e5933000	 ldr         r3, [r3]
  043c8	e58d301c	 str         r3, [sp, #0x1C]

; 1518 :         AddIntervalTimeout=0;

  043cc	e3a03000	 mov         r3, #0
  043d0	e58d3024	 str         r3, [sp, #0x24]
  043d4		 |$LN20@COM_Read|

; 1519 :     }
; 1520 :     IntervalTimeout = pSerialHead->CommTimeouts.ReadIntervalTimeout;

  043d4	e59d3008	 ldr         r3, [sp, #8]
  043d8	e283307c	 add         r3, r3, #0x7C
  043dc	e5933000	 ldr         r3, [r3]
  043e0	e58d3004	 str         r3, [sp, #4]

; 1521 :     if ((IntervalTimeout < MAXDWORD  - AddIntervalTimeout) && (IntervalTimeout != 0)) {

  043e4	e59d2024	 ldr         r2, [sp, #0x24]
  043e8	e3e03000	 mvn         r3, #0
  043ec	e0622003	 rsb         r2, r2, r3
  043f0	e59d3004	 ldr         r3, [sp, #4]
  043f4	e1530002	 cmp         r3, r2
  043f8	2a000006	 bcs         |$LN19@COM_Read|
  043fc	e59d3004	 ldr         r3, [sp, #4]
  04400	e3530000	 cmp         r3, #0
  04404	0a000003	 beq         |$LN19@COM_Read|

; 1522 :         IntervalTimeout +=AddIntervalTimeout;

  04408	e59d2004	 ldr         r2, [sp, #4]
  0440c	e59d3024	 ldr         r3, [sp, #0x24]
  04410	e0823003	 add         r3, r2, r3
  04414	e58d3004	 str         r3, [sp, #4]
  04418		 |$LN19@COM_Read|

; 1523 :     };
; 1524 : 
; 1525 :     DEBUGMSG (ZONE_USR_READ, (TEXT("TotalTimeout:%d\r\n"), TotalTimeout));

  04418	e59f37c4	 ldr         r3, [pc, #0x7C4]
  0441c	e5933440	 ldr         r3, [r3, #0x440]
  04420	e3130b02	 tst         r3, #2, 22
  04424	0a000005	 beq         |$LN40@COM_Read|
  04428	e59d101c	 ldr         r1, [sp, #0x1C]
  0442c	e59f07d8	 ldr         r0, [pc, #0x7D8]
  04430	eb000000	 bl          NKDbgPrintfW
  04434	e3a03001	 mov         r3, #1
  04438	e58d3058	 str         r3, [sp, #0x58]
  0443c	ea000001	 b           |$LN41@COM_Read|
  04440		 |$LN40@COM_Read|
  04440	e3a03000	 mov         r3, #0
  04444	e58d3058	 str         r3, [sp, #0x58]
  04448		 |$LN41@COM_Read|
  04448		 |$LN18@COM_Read|

; 1526 : 
; 1527 :     while ( BufferLength ) {

  04448	e59d30d0	 ldr         r3, [sp, #0xD0]
  0444c	e3530000	 cmp         r3, #0
  04450	0a0001b1	 beq         |$LN17@COM_Read|

; 1528 :         DEBUGMSG (ZONE_USR_READ,
; 1529 :                   (TEXT("Top of Loop Fifo(R=%d,W=%d,L=%d,BA=%d)\r\n"),
; 1530 :                    RxRead(pSerialHead), RxWrite(pSerialHead),
; 1531 :                    RxLength(pSerialHead),
; 1532 :                    RxBytesAvail(pSerialHead)));

  04454	e59f3788	 ldr         r3, [pc, #0x788]
  04458	e5933440	 ldr         r3, [r3, #0x440]
  0445c	e3130b02	 tst         r3, #2, 22
  04460	0a000012	 beq         |$LN42@COM_Read|
  04464	e59d0008	 ldr         r0, [sp, #8]
  04468	eb000000	 bl          RxBytesAvail
  0446c	e58d005c	 str         r0, [sp, #0x5C]
  04470	e59d305c	 ldr         r3, [sp, #0x5C]
  04474	e58d3000	 str         r3, [sp]
  04478	e59d3008	 ldr         r3, [sp, #8]
  0447c	e28330a4	 add         r3, r3, #0xA4
  04480	e5933000	 ldr         r3, [r3]
  04484	e59d2008	 ldr         r2, [sp, #8]
  04488	e28220a0	 add         r2, r2, #0xA0
  0448c	e5922000	 ldr         r2, [r2]
  04490	e59d1008	 ldr         r1, [sp, #8]
  04494	e281109c	 add         r1, r1, #0x9C
  04498	e5911000	 ldr         r1, [r1]
  0449c	e59f0764	 ldr         r0, [pc, #0x764]
  044a0	eb000000	 bl          NKDbgPrintfW
  044a4	e3a03001	 mov         r3, #1
  044a8	e58d3060	 str         r3, [sp, #0x60]
  044ac	ea000001	 b           |$LN43@COM_Read|
  044b0		 |$LN42@COM_Read|
  044b0	e3a03000	 mov         r3, #0
  044b4	e58d3060	 str         r3, [sp, #0x60]
  044b8		 |$LN43@COM_Read|

; 1533 :         if ( RxBytesAvail(pSerialHead) ) {

  044b8	e59d0008	 ldr         r0, [sp, #8]
  044bc	eb000000	 bl          RxBytesAvail
  044c0	e58d0064	 str         r0, [sp, #0x64]
  044c4	e59d3064	 ldr         r3, [sp, #0x64]
  044c8	e3530000	 cmp         r3, #0
  044cc	0a00006f	 beq         |$LN16@COM_Read|

; 1534 :             RxEnterCS(pSerialHead);

  044d0	e59d3008	 ldr         r3, [sp, #8]
  044d4	e28300b0	 add         r0, r3, #0xB0
  044d8	eb000000	 bl          EnterCriticalSection

; 1535 :             // Copy the data over
; 1536 :             // This only copies the continous portion, This will cause a loop
; 1537 :             // if the receive data spans the end of the buffer.
; 1538 :             Len = MIN(RxBytesAvail(pSerialHead),
; 1539 :                       RxLength(pSerialHead)-RxRead(pSerialHead));

  044dc	e59d0008	 ldr         r0, [sp, #8]
  044e0	eb000000	 bl          RxBytesAvail
  044e4	e58d0068	 str         r0, [sp, #0x68]
  044e8	e59d3008	 ldr         r3, [sp, #8]
  044ec	e28320a4	 add         r2, r3, #0xA4
  044f0	e59d3008	 ldr         r3, [sp, #8]
  044f4	e283309c	 add         r3, r3, #0x9C
  044f8	e5922000	 ldr         r2, [r2]
  044fc	e5933000	 ldr         r3, [r3]
  04500	e0422003	 sub         r2, r2, r3
  04504	e59d3068	 ldr         r3, [sp, #0x68]
  04508	e1530002	 cmp         r3, r2
  0450c	2a000005	 bcs         |$LN44@COM_Read|
  04510	e59d0008	 ldr         r0, [sp, #8]
  04514	eb000000	 bl          RxBytesAvail
  04518	e58d006c	 str         r0, [sp, #0x6C]
  0451c	e59d306c	 ldr         r3, [sp, #0x6C]
  04520	e58d3070	 str         r3, [sp, #0x70]
  04524	ea000007	 b           |$LN45@COM_Read|
  04528		 |$LN44@COM_Read|
  04528	e59d3008	 ldr         r3, [sp, #8]
  0452c	e28320a4	 add         r2, r3, #0xA4
  04530	e59d3008	 ldr         r3, [sp, #8]
  04534	e283309c	 add         r3, r3, #0x9C
  04538	e5922000	 ldr         r2, [r2]
  0453c	e5933000	 ldr         r3, [r3]
  04540	e0423003	 sub         r3, r2, r3
  04544	e58d3070	 str         r3, [sp, #0x70]
  04548		 |$LN45@COM_Read|
  04548	e59d3070	 ldr         r3, [sp, #0x70]
  0454c	e58d3010	 str         r3, [sp, #0x10]

; 1540 :             Len = MIN(Len, BufferLength);

  04550	e59d2010	 ldr         r2, [sp, #0x10]
  04554	e59d30d0	 ldr         r3, [sp, #0xD0]
  04558	e1520003	 cmp         r2, r3
  0455c	2a000002	 bcs         |$LN46@COM_Read|
  04560	e59d3010	 ldr         r3, [sp, #0x10]
  04564	e58d3074	 str         r3, [sp, #0x74]
  04568	ea000001	 b           |$LN47@COM_Read|
  0456c		 |$LN46@COM_Read|
  0456c	e59d30d0	 ldr         r3, [sp, #0xD0]
  04570	e58d3074	 str         r3, [sp, #0x74]
  04574		 |$LN47@COM_Read|
  04574	e59d3074	 ldr         r3, [sp, #0x74]
  04578	e58d3010	 str         r3, [sp, #0x10]

; 1541 :             DEBUGMSG (ZONE_USR_READ, (TEXT("About to copy %d bytes\r\n"), Len));

  0457c	e59f3660	 ldr         r3, [pc, #0x660]
  04580	e5933440	 ldr         r3, [r3, #0x440]
  04584	e3130b02	 tst         r3, #2, 22
  04588	0a000005	 beq         |$LN48@COM_Read|
  0458c	e59d1010	 ldr         r1, [sp, #0x10]
  04590	e59f066c	 ldr         r0, [pc, #0x66C]
  04594	eb000000	 bl          NKDbgPrintfW
  04598	e3a03001	 mov         r3, #1
  0459c	e58d3078	 str         r3, [sp, #0x78]
  045a0	ea000001	 b           |$LN49@COM_Read|
  045a4		 |$LN48@COM_Read|
  045a4	e3a03000	 mov         r3, #0
  045a8	e58d3078	 str         r3, [sp, #0x78]
  045ac		 |$LN49@COM_Read|

; 1542 :             CeSafeCopyMemory (pTargetBuffer, RxBuffRead(pSerialHead), Len);

  045ac	e59d2010	 ldr         r2, [sp, #0x10]
  045b0	e59d3008	 ldr         r3, [sp, #8]
  045b4	e28310ac	 add         r1, r3, #0xAC
  045b8	e59d3008	 ldr         r3, [sp, #8]
  045bc	e283309c	 add         r3, r3, #0x9C
  045c0	e5911000	 ldr         r1, [r1]
  045c4	e5933000	 ldr         r3, [r3]
  045c8	e0811003	 add         r1, r1, r3
  045cc	e59d00cc	 ldr         r0, [sp, #0xCC]
  045d0	eb000000	 bl          CeSafeCopyMemory

; 1543 :             // Update Fifo info
; 1544 :             RxRead(pSerialHead) =
; 1545 :                 (RxRead(pSerialHead)+ Len<RxLength(pSerialHead)? RxRead(pSerialHead)+Len: RxRead(pSerialHead)+Len-RxLength(pSerialHead));

  045d4	e59d3008	 ldr         r3, [sp, #8]
  045d8	e283309c	 add         r3, r3, #0x9C
  045dc	e5932000	 ldr         r2, [r3]
  045e0	e59d3010	 ldr         r3, [sp, #0x10]
  045e4	e0822003	 add         r2, r2, r3
  045e8	e59d3008	 ldr         r3, [sp, #8]
  045ec	e28330a4	 add         r3, r3, #0xA4
  045f0	e5933000	 ldr         r3, [r3]
  045f4	e1520003	 cmp         r2, r3
  045f8	2a000006	 bcs         |$LN50@COM_Read|
  045fc	e59d3008	 ldr         r3, [sp, #8]
  04600	e283309c	 add         r3, r3, #0x9C
  04604	e5932000	 ldr         r2, [r3]
  04608	e59d3010	 ldr         r3, [sp, #0x10]
  0460c	e0823003	 add         r3, r2, r3
  04610	e58d307c	 str         r3, [sp, #0x7C]
  04614	ea000009	 b           |$LN51@COM_Read|
  04618		 |$LN50@COM_Read|
  04618	e59d3008	 ldr         r3, [sp, #8]
  0461c	e283309c	 add         r3, r3, #0x9C
  04620	e5932000	 ldr         r2, [r3]
  04624	e59d3010	 ldr         r3, [sp, #0x10]
  04628	e0822003	 add         r2, r2, r3
  0462c	e59d3008	 ldr         r3, [sp, #8]
  04630	e28330a4	 add         r3, r3, #0xA4
  04634	e5933000	 ldr         r3, [r3]
  04638	e0423003	 sub         r3, r2, r3
  0463c	e58d307c	 str         r3, [sp, #0x7C]
  04640		 |$LN51@COM_Read|
  04640	e59d3008	 ldr         r3, [sp, #8]
  04644	e283209c	 add         r2, r3, #0x9C
  04648	e59d307c	 ldr         r3, [sp, #0x7C]
  0464c	e5823000	 str         r3, [r2]

; 1546 : 
; 1547 :             // Update all the pointers.
; 1548 :             BufferLength -= Len;

  04650	e59d20d0	 ldr         r2, [sp, #0xD0]
  04654	e59d3010	 ldr         r3, [sp, #0x10]
  04658	e0423003	 sub         r3, r2, r3
  0465c	e58d30d0	 str         r3, [sp, #0xD0]

; 1549 :             pTargetBuffer += Len;

  04660	e59d20cc	 ldr         r2, [sp, #0xCC]
  04664	e59d3010	 ldr         r3, [sp, #0x10]
  04668	e0823003	 add         r3, r2, r3
  0466c	e58d30cc	 str         r3, [sp, #0xCC]

; 1550 :             BytesRead += Len;

  04670	e59d2020	 ldr         r2, [sp, #0x20]
  04674	e59d3010	 ldr         r3, [sp, #0x10]
  04678	e0823003	 add         r3, r2, r3
  0467c	e58d3020	 str         r3, [sp, #0x20]

; 1551 :             RxLeaveCS(pSerialHead);

  04680	e59d3008	 ldr         r3, [sp, #8]
  04684	e28300b0	 add         r0, r3, #0xB0
  04688	eb000000	 bl          LeaveCriticalSection

; 1552 :         } else {

  0468c	ea00008a	 b           |$LN15@COM_Read|
  04690		 |$LN16@COM_Read|

; 1553 :             // Wait for a serial event?
; 1554 :             if ( IntervalTimeout == MAXDWORD){  // Special Case see Remarks of COMMTIMEOUTS

  04690	e59d3004	 ldr         r3, [sp, #4]
  04694	e3730001	 cmn         r3, #1
  04698	1a000008	 bne         |$LN14@COM_Read|

; 1555 :                 if (TotalTimeout == 0)

  0469c	e59d301c	 ldr         r3, [sp, #0x1C]
  046a0	e3530000	 cmp         r3, #0
  046a4	1a000001	 bne         |$LN13@COM_Read|

; 1556 :                     // For some reason this means don't wait.
; 1557 :                     break;

  046a8	ea00011b	 b           |$LN17@COM_Read|

; 1558 :                 else

  046ac	ea000003	 b           |$LN12@COM_Read|
  046b0		 |$LN13@COM_Read|

; 1559 :                 if (BytesRead!=0) // There is data in the buffer or has been readed.

  046b0	e59d3020	 ldr         r3, [sp, #0x20]
  046b4	e3530000	 cmp         r3, #0
  046b8	0a000000	 beq         |$LN11@COM_Read|

; 1560 :                     break;

  046bc	ea000116	 b           |$LN17@COM_Read|
  046c0		 |$LN11@COM_Read|
  046c0		 |$LN12@COM_Read|
  046c0		 |$LN14@COM_Read|

; 1561 :             }
; 1562 :             Timeout=(TotalTimeout!=0?TotalTimeout:MAXDWORD);

  046c0	e59d301c	 ldr         r3, [sp, #0x1C]
  046c4	e3530000	 cmp         r3, #0
  046c8	0a000002	 beq         |$LN52@COM_Read|
  046cc	e59d301c	 ldr         r3, [sp, #0x1C]
  046d0	e58d3080	 str         r3, [sp, #0x80]
  046d4	ea000001	 b           |$LN53@COM_Read|
  046d8		 |$LN52@COM_Read|
  046d8	e3e03000	 mvn         r3, #0
  046dc	e58d3080	 str         r3, [sp, #0x80]
  046e0		 |$LN53@COM_Read|
  046e0	e59d3080	 ldr         r3, [sp, #0x80]
  046e4	e58d3028	 str         r3, [sp, #0x28]

; 1563 :             // Total timeout is valid
; 1564 :             if ( TimeSpent >= Timeout ) {

  046e8	e59d200c	 ldr         r2, [sp, #0xC]
  046ec	e59d3028	 ldr         r3, [sp, #0x28]
  046f0	e1520003	 cmp         r2, r3
  046f4	3a000000	 bcc         |$LN10@COM_Read|

; 1565 :                 // Timed out.
; 1566 :                 break;

  046f8	ea000107	 b           |$LN17@COM_Read|
  046fc		 |$LN10@COM_Read|

; 1567 :             }
; 1568 :             Timeout -= TimeSpent;

  046fc	e59d2028	 ldr         r2, [sp, #0x28]
  04700	e59d300c	 ldr         r3, [sp, #0xC]
  04704	e0423003	 sub         r3, r2, r3
  04708	e58d3028	 str         r3, [sp, #0x28]

; 1569 :             // On first byte we only use interval timeout
; 1570 :             // on subsequent we use minimum of Interval and Timeout
; 1571 :             if ( BytesRead) {

  0470c	e59d3020	 ldr         r3, [sp, #0x20]
  04710	e3530000	 cmp         r3, #0
  04714	0a00001a	 beq         |$LN9@COM_Read|

; 1572 :                 Timeout = MIN(Timeout, (IntervalTimeout!=0?IntervalTimeout:MAXDWORD));

  04718	e59d3004	 ldr         r3, [sp, #4]
  0471c	e3530000	 cmp         r3, #0
  04720	0a000002	 beq         |$LN54@COM_Read|
  04724	e59d3004	 ldr         r3, [sp, #4]
  04728	e58d3084	 str         r3, [sp, #0x84]
  0472c	ea000001	 b           |$LN55@COM_Read|
  04730		 |$LN54@COM_Read|
  04730	e3e03000	 mvn         r3, #0
  04734	e58d3084	 str         r3, [sp, #0x84]
  04738		 |$LN55@COM_Read|
  04738	e59d2028	 ldr         r2, [sp, #0x28]
  0473c	e59d3084	 ldr         r3, [sp, #0x84]
  04740	e1520003	 cmp         r2, r3
  04744	2a000002	 bcs         |$LN58@COM_Read|
  04748	e59d3028	 ldr         r3, [sp, #0x28]
  0474c	e58d3088	 str         r3, [sp, #0x88]
  04750	ea000009	 b           |$LN59@COM_Read|
  04754		 |$LN58@COM_Read|
  04754	e59d3004	 ldr         r3, [sp, #4]
  04758	e3530000	 cmp         r3, #0
  0475c	0a000002	 beq         |$LN56@COM_Read|
  04760	e59d3004	 ldr         r3, [sp, #4]
  04764	e58d308c	 str         r3, [sp, #0x8C]
  04768	ea000001	 b           |$LN57@COM_Read|
  0476c		 |$LN56@COM_Read|
  0476c	e3e03000	 mvn         r3, #0
  04770	e58d308c	 str         r3, [sp, #0x8C]
  04774		 |$LN57@COM_Read|
  04774	e59d308c	 ldr         r3, [sp, #0x8C]
  04778	e58d3088	 str         r3, [sp, #0x88]
  0477c		 |$LN59@COM_Read|
  0477c	e59d3088	 ldr         r3, [sp, #0x88]
  04780	e58d3028	 str         r3, [sp, #0x28]
  04784		 |$LN9@COM_Read|

; 1573 :             }
; 1574 :             Ticks = GetTickCount();

  04784	eb000000	 bl          GetTickCount
  04788	e58d0090	 str         r0, [sp, #0x90]
  0478c	e59d3090	 ldr         r3, [sp, #0x90]
  04790	e58d3030	 str         r3, [sp, #0x30]

; 1575 :             DEBUGMSG (ZONE_USR_READ, (TEXT("About to wait %dms\r\n"), Timeout));

  04794	e59f3448	 ldr         r3, [pc, #0x448]
  04798	e5933440	 ldr         r3, [r3, #0x440]
  0479c	e3130b02	 tst         r3, #2, 22
  047a0	0a000005	 beq         |$LN60@COM_Read|
  047a4	e59d1028	 ldr         r1, [sp, #0x28]
  047a8	e59f0450	 ldr         r0, [pc, #0x450]
  047ac	eb000000	 bl          NKDbgPrintfW
  047b0	e3a03001	 mov         r3, #1
  047b4	e58d3094	 str         r3, [sp, #0x94]
  047b8	ea000001	 b           |$LN61@COM_Read|
  047bc		 |$LN60@COM_Read|
  047bc	e3a03000	 mov         r3, #0
  047c0	e58d3094	 str         r3, [sp, #0x94]
  047c4		 |$LN61@COM_Read|

; 1576 : 
; 1577 :             if ( WAIT_TIMEOUT == WaitForSingleObject (pSerialHead->hReadEvent,
; 1578 :                                                       Timeout) ) {

  047c4	e59d1028	 ldr         r1, [sp, #0x28]
  047c8	e59d3008	 ldr         r3, [sp, #8]
  047cc	e2833034	 add         r3, r3, #0x34
  047d0	e5930000	 ldr         r0, [r3]
  047d4	eb000000	 bl          WaitForSingleObject
  047d8	e58d0098	 str         r0, [sp, #0x98]
  047dc	e59d2098	 ldr         r2, [sp, #0x98]
  047e0	e3a03c01	 mov         r3, #1, 24
  047e4	e3833002	 orr         r3, r3, #2
  047e8	e1520003	 cmp         r2, r3
  047ec	1a000000	 bne         |$LN8@COM_Read|

; 1579 :                 // Timeout
; 1580 :                 break;

  047f0	ea0000c9	 b           |$LN17@COM_Read|
  047f4		 |$LN8@COM_Read|

; 1581 :             }
; 1582 :             // Since ticks is a ULONG this handles wrap.
; 1583 :             Ticks = GetTickCount() - Ticks;

  047f4	eb000000	 bl          GetTickCount
  047f8	e58d009c	 str         r0, [sp, #0x9C]
  047fc	e59d209c	 ldr         r2, [sp, #0x9C]
  04800	e59d3030	 ldr         r3, [sp, #0x30]
  04804	e0423003	 sub         r3, r2, r3
  04808	e58d3030	 str         r3, [sp, #0x30]

; 1584 :             TimeSpent += Ticks;

  0480c	e59d200c	 ldr         r2, [sp, #0xC]
  04810	e59d3030	 ldr         r3, [sp, #0x30]
  04814	e0823003	 add         r3, r2, r3
  04818	e58d300c	 str         r3, [sp, #0xC]

; 1585 : 
; 1586 :             // In the absense of WaitForMultipleObjects, we use flags to
; 1587 :             // handle errors/aborts. Check for aborts or asynchronous closes.
; 1588 :             if ( pSerialHead->fAbortRead ) {

  0481c	e59d3008	 ldr         r3, [sp, #8]
  04820	e2833094	 add         r3, r3, #0x94
  04824	e5933000	 ldr         r3, [r3]
  04828	e3130040	 tst         r3, #0x40
  0482c	0a00000b	 beq         |$LN7@COM_Read|

; 1589 :                 DEBUGMSG(ZONE_USR_READ,(TEXT("COM_Read - Aborting read\r\n")));

  04830	e59f33ac	 ldr         r3, [pc, #0x3AC]
  04834	e5933440	 ldr         r3, [r3, #0x440]
  04838	e3130b02	 tst         r3, #2, 22
  0483c	0a000004	 beq         |$LN62@COM_Read|
  04840	e59f03b4	 ldr         r0, [pc, #0x3B4]
  04844	eb000000	 bl          NKDbgPrintfW
  04848	e3a03001	 mov         r3, #1
  0484c	e58d30a0	 str         r3, [sp, #0xA0]
  04850	ea000001	 b           |$LN63@COM_Read|
  04854		 |$LN62@COM_Read|
  04854	e3a03000	 mov         r3, #0
  04858	e58d30a0	 str         r3, [sp, #0xA0]
  0485c		 |$LN63@COM_Read|

; 1590 :                 break;

  0485c	ea0000ae	 b           |$LN17@COM_Read|
  04860		 |$LN7@COM_Read|

; 1591 :             }
; 1592 : 
; 1593 :             if ( !pSerialHead->OpenCnt ) {

  04860	e59d3008	 ldr         r3, [sp, #8]
  04864	e2833090	 add         r3, r3, #0x90
  04868	e5933000	 ldr         r3, [r3]
  0486c	e3530000	 cmp         r3, #0
  04870	1a000011	 bne         |$LN6@COM_Read|

; 1594 :                 DEBUGMSG(ZONE_USR_READ|ZONE_ERROR,
; 1595 :                          (TEXT("COM_Read - device was closed\n\r")));

  04874	e59f3368	 ldr         r3, [pc, #0x368]
  04878	e5933440	 ldr         r3, [r3, #0x440]
  0487c	e2032b02	 and         r2, r3, #2, 22
  04880	e59f335c	 ldr         r3, [pc, #0x35C]
  04884	e5933440	 ldr         r3, [r3, #0x440]
  04888	e2033902	 and         r3, r3, #2, 18
  0488c	e1923003	 orrs        r3, r2, r3
  04890	0a000004	 beq         |$LN64@COM_Read|
  04894	e59f035c	 ldr         r0, [pc, #0x35C]
  04898	eb000000	 bl          NKDbgPrintfW
  0489c	e3a03001	 mov         r3, #1
  048a0	e58d30a4	 str         r3, [sp, #0xA4]
  048a4	ea000001	 b           |$LN65@COM_Read|
  048a8		 |$LN64@COM_Read|
  048a8	e3a03000	 mov         r3, #0
  048ac	e58d30a4	 str         r3, [sp, #0xA4]
  048b0		 |$LN65@COM_Read|

; 1596 :                 SetLastError(ERROR_INVALID_HANDLE);

  048b0	e3a00006	 mov         r0, #6
  048b4	eb000000	 bl          SetLastError

; 1597 :                 break;

  048b8	ea000097	 b           |$LN17@COM_Read|
  048bc		 |$LN6@COM_Read|
  048bc		 |$LN15@COM_Read|

; 1598 :             }
; 1599 :         }
; 1600 : 
; 1601 :         if (IsReducedToFlowOn(pSerialHead)) {

  048bc	e59d0008	 ldr         r0, [sp, #8]
  048c0	eb000000	 bl          RxBytesAvail
  048c4	e58d00a8	 str         r0, [sp, #0xA8]
  048c8	e59d3008	 ldr         r3, [sp, #8]
  048cc	e283306e	 add         r3, r3, #0x6E
  048d0	e1d320b0	 ldrh        r2, [r3]
  048d4	e59d30a8	 ldr         r3, [sp, #0xA8]
  048d8	e1520003	 cmp         r2, r3
  048dc	3a00008d	 bcc         |$LN5@COM_Read|

; 1602 :             // Are we below the SW flow control limits?
; 1603 :             if ( pSerialHead->DCB.fInX && pSerialHead->SentXoff) {

  048e0	e59d3008	 ldr         r3, [sp, #8]
  048e4	e2833068	 add         r3, r3, #0x68
  048e8	e5933000	 ldr         r3, [r3]
  048ec	e3130c02	 tst         r3, #2, 24
  048f0	0a000036	 beq         |$LN4@COM_Read|
  048f4	e59d3008	 ldr         r3, [sp, #8]
  048f8	e2833094	 add         r3, r3, #0x94
  048fc	e5933000	 ldr         r3, [r3]
  04900	e3130008	 tst         r3, #8
  04904	0a000031	 beq         |$LN4@COM_Read|

; 1604 :                 PHWOBJ  pHWObj  = pSerialHead->pHWObj;

  04908	e59d3008	 ldr         r3, [sp, #8]
  0490c	e2833028	 add         r3, r3, #0x28
  04910	e5933000	 ldr         r3, [r3]
  04914	e58d3034	 str         r3, [sp, #0x34]

; 1605 :                 DEBUGMSG (ZONE_FLOW, (TEXT("Sending XON\r\n")));

  04918	e59f32c4	 ldr         r3, [pc, #0x2C4]
  0491c	e5933440	 ldr         r3, [r3, #0x440]
  04920	e3130c02	 tst         r3, #2, 24
  04924	0a000004	 beq         |$LN66@COM_Read|
  04928	e59f02c4	 ldr         r0, [pc, #0x2C4]
  0492c	eb000000	 bl          NKDbgPrintfW
  04930	e3a03001	 mov         r3, #1
  04934	e58d30ac	 str         r3, [sp, #0xAC]
  04938	ea000001	 b           |$LN67@COM_Read|
  0493c		 |$LN66@COM_Read|
  0493c	e3a03000	 mov         r3, #0
  04940	e58d30ac	 str         r3, [sp, #0xAC]
  04944		 |$LN67@COM_Read|

; 1606 :                 pSerialHead->SentXoff = 0;

  04944	e59d3008	 ldr         r3, [sp, #8]
  04948	e2833094	 add         r3, r3, #0x94
  0494c	e5932000	 ldr         r2, [r3]
  04950	e3e03008	 mvn         r3, #8
  04954	e0022003	 and         r2, r2, r3
  04958	e59d3008	 ldr         r3, [sp, #8]
  0495c	e2833094	 add         r3, r3, #0x94
  04960	e5832000	 str         r2, [r3]

; 1607 :                 if ( !pSerialHead->DCB.fTXContinueOnXoff ) {

  04964	e59d3008	 ldr         r3, [sp, #8]
  04968	e2833068	 add         r3, r3, #0x68
  0496c	e5933000	 ldr         r3, [r3]
  04970	e3130080	 tst         r3, #0x80
  04974	1a000007	 bne         |$LN3@COM_Read|

; 1608 :                     pSerialHead->StopXmit = 0;

  04978	e59d3008	 ldr         r3, [sp, #8]
  0497c	e2833094	 add         r3, r3, #0x94
  04980	e5932000	 ldr         r2, [r3]
  04984	e3e03004	 mvn         r3, #4
  04988	e0022003	 and         r2, r2, r3
  0498c	e59d3008	 ldr         r3, [sp, #8]
  04990	e2833094	 add         r3, r3, #0x94
  04994	e5832000	 str         r2, [r3]
  04998		 |$LN3@COM_Read|

; 1609 :                 }
; 1610 :                 pHWObj->pFuncTbl->HWXmitComChar(pSerialHead->pHWHead,
; 1611 :                                                 pSerialHead->DCB.XonChar);

  04998	e59d3008	 ldr         r3, [sp, #8]
  0499c	e2833075	 add         r3, r3, #0x75
  049a0	e1d330d0	 ldrsb       r3, [r3]
  049a4	e20310ff	 and         r1, r3, #0xFF
  049a8	e59d3008	 ldr         r3, [sp, #8]
  049ac	e283302c	 add         r3, r3, #0x2C
  049b0	e5930000	 ldr         r0, [r3]
  049b4	e59d3034	 ldr         r3, [sp, #0x34]
  049b8	e2833008	 add         r3, r3, #8
  049bc	e5933000	 ldr         r3, [r3]
  049c0	e2833054	 add         r3, r3, #0x54
  049c4	e5933000	 ldr         r3, [r3]
  049c8	e1a0e00f	 mov         lr, pc
  049cc	e12fff13	 bx          r3
  049d0		 |$LN4@COM_Read|

; 1612 :             }
; 1613 :             if ( pSerialHead->RtsFlow &&
; 1614 :                  (pSerialHead->DCB.fRtsControl == RTS_CONTROL_HANDSHAKE) ) {

  049d0	e59d3008	 ldr         r3, [sp, #8]
  049d4	e2833094	 add         r3, r3, #0x94
  049d8	e5933000	 ldr         r3, [r3]
  049dc	e3130020	 tst         r3, #0x20
  049e0	0a000023	 beq         |$LN2@COM_Read|
  049e4	e59d3008	 ldr         r3, [sp, #8]
  049e8	e2833068	 add         r3, r3, #0x68
  049ec	e5933000	 ldr         r3, [r3]
  049f0	e1a03903	 mov         r3, r3, lsl #18
  049f4	e1a03f23	 mov         r3, r3, lsr #30
  049f8	e3530002	 cmp         r3, #2
  049fc	1a00001c	 bne         |$LN2@COM_Read|

; 1615 :                 DEBUGMSG (ZONE_USR_READ|ZONE_FLOW,
; 1616 :                           (TEXT("RTS_CONTROL_HANDSHAKE Setting RTS\r\n")));

  04a00	e59f31dc	 ldr         r3, [pc, #0x1DC]
  04a04	e5933440	 ldr         r3, [r3, #0x440]
  04a08	e2032b02	 and         r2, r3, #2, 22
  04a0c	e59f31d0	 ldr         r3, [pc, #0x1D0]
  04a10	e5933440	 ldr         r3, [r3, #0x440]
  04a14	e2033c02	 and         r3, r3, #2, 24
  04a18	e1923003	 orrs        r3, r2, r3
  04a1c	0a000004	 beq         |$LN68@COM_Read|
  04a20	e59f01c8	 ldr         r0, [pc, #0x1C8]
  04a24	eb000000	 bl          NKDbgPrintfW
  04a28	e3a03001	 mov         r3, #1
  04a2c	e58d30b0	 str         r3, [sp, #0xB0]
  04a30	ea000001	 b           |$LN69@COM_Read|
  04a34		 |$LN68@COM_Read|
  04a34	e3a03000	 mov         r3, #0
  04a38	e58d30b0	 str         r3, [sp, #0xB0]
  04a3c		 |$LN69@COM_Read|

; 1617 :                 pSerialHead->RtsFlow = 0;

  04a3c	e59d3008	 ldr         r3, [sp, #8]
  04a40	e2833094	 add         r3, r3, #0x94
  04a44	e5932000	 ldr         r2, [r3]
  04a48	e3e03020	 mvn         r3, #0x20
  04a4c	e0022003	 and         r2, r2, r3
  04a50	e59d3008	 ldr         r3, [sp, #8]
  04a54	e2833094	 add         r3, r3, #0x94
  04a58	e5832000	 str         r2, [r3]

; 1618 :                 pFuncTbl->HWSetRTS(pHWHead);

  04a5c	e59d002c	 ldr         r0, [sp, #0x2C]
  04a60	e59d3014	 ldr         r3, [sp, #0x14]
  04a64	e2833040	 add         r3, r3, #0x40
  04a68	e5933000	 ldr         r3, [r3]
  04a6c	e1a0e00f	 mov         lr, pc
  04a70	e12fff13	 bx          r3
  04a74		 |$LN2@COM_Read|

; 1619 :             }
; 1620 :             if ( pSerialHead->DtrFlow &&
; 1621 :                  (pSerialHead->DCB.fDtrControl == DTR_CONTROL_HANDSHAKE) ) {

  04a74	e59d3008	 ldr         r3, [sp, #8]
  04a78	e2833094	 add         r3, r3, #0x94
  04a7c	e5933000	 ldr         r3, [r3]
  04a80	e3130010	 tst         r3, #0x10
  04a84	0a000023	 beq         |$LN1@COM_Read|
  04a88	e59d3008	 ldr         r3, [sp, #8]
  04a8c	e2833068	 add         r3, r3, #0x68
  04a90	e5933000	 ldr         r3, [r3]
  04a94	e1a03d03	 mov         r3, r3, lsl #26
  04a98	e1a03f23	 mov         r3, r3, lsr #30
  04a9c	e3530002	 cmp         r3, #2
  04aa0	1a00001c	 bne         |$LN1@COM_Read|

; 1622 :                 DEBUGMSG (ZONE_USR_READ|ZONE_FLOW,
; 1623 :                           (TEXT("DTR_CONTROL_HANDSHAKE Setting DTR\r\n")));

  04aa4	e59f3138	 ldr         r3, [pc, #0x138]
  04aa8	e5933440	 ldr         r3, [r3, #0x440]
  04aac	e2032b02	 and         r2, r3, #2, 22
  04ab0	e59f312c	 ldr         r3, [pc, #0x12C]
  04ab4	e5933440	 ldr         r3, [r3, #0x440]
  04ab8	e2033c02	 and         r3, r3, #2, 24
  04abc	e1923003	 orrs        r3, r2, r3
  04ac0	0a000004	 beq         |$LN70@COM_Read|
  04ac4	e59f0120	 ldr         r0, [pc, #0x120]
  04ac8	eb000000	 bl          NKDbgPrintfW
  04acc	e3a03001	 mov         r3, #1
  04ad0	e58d30b4	 str         r3, [sp, #0xB4]
  04ad4	ea000001	 b           |$LN71@COM_Read|
  04ad8		 |$LN70@COM_Read|
  04ad8	e3a03000	 mov         r3, #0
  04adc	e58d30b4	 str         r3, [sp, #0xB4]
  04ae0		 |$LN71@COM_Read|

; 1624 :                 pSerialHead->DtrFlow = 0;

  04ae0	e59d3008	 ldr         r3, [sp, #8]
  04ae4	e2833094	 add         r3, r3, #0x94
  04ae8	e5932000	 ldr         r2, [r3]
  04aec	e3e03010	 mvn         r3, #0x10
  04af0	e0022003	 and         r2, r2, r3
  04af4	e59d3008	 ldr         r3, [sp, #8]
  04af8	e2833094	 add         r3, r3, #0x94
  04afc	e5832000	 str         r2, [r3]

; 1625 :                 pFuncTbl->HWSetDTR(pHWHead);

  04b00	e59d002c	 ldr         r0, [sp, #0x2C]
  04b04	e59d3014	 ldr         r3, [sp, #0x14]
  04b08	e2833038	 add         r3, r3, #0x38
  04b0c	e5933000	 ldr         r3, [r3]
  04b10	e1a0e00f	 mov         lr, pc
  04b14	e12fff13	 bx          r3
  04b18		 |$LN1@COM_Read|
  04b18		 |$LN5@COM_Read|

; 1626 :             }
; 1627 :         }
; 1628 : 
; 1629 :     }

  04b18	eafffe4a	 b           |$LN18@COM_Read|
  04b1c		 |$LN17@COM_Read|

; 1630 : 
; 1631 :     DEBUGMSG (ZONE_USR_READ, (TEXT("ReceiveBytes exiting\r\n")));

  04b1c	e59f30c0	 ldr         r3, [pc, #0xC0]
  04b20	e5933440	 ldr         r3, [r3, #0x440]
  04b24	e3130b02	 tst         r3, #2, 22
  04b28	0a000004	 beq         |$LN72@COM_Read|
  04b2c	e59f00b4	 ldr         r0, [pc, #0xB4]
  04b30	eb000000	 bl          NKDbgPrintfW
  04b34	e3a03001	 mov         r3, #1
  04b38	e58d30b8	 str         r3, [sp, #0xB8]
  04b3c	ea000001	 b           |$LN73@COM_Read|
  04b40		 |$LN72@COM_Read|
  04b40	e3a03000	 mov         r3, #0
  04b44	e58d30b8	 str         r3, [sp, #0xB8]
  04b48		 |$LN73@COM_Read|

; 1632 : 
; 1633 :     LeaveCriticalSection(&(pSerialHead->ReceiveCritSec1));

  04b48	e59d3008	 ldr         r3, [sp, #8]
  04b4c	e2830014	 add         r0, r3, #0x14
  04b50	eb000000	 bl          LeaveCriticalSection

; 1634 : 
; 1635 :     DEBUGMSG (ZONE_USR_READ|ZONE_FUNCTION,
; 1636 :               (TEXT("-COM_READ: returning %d (total %d, dropped %d,%d)\r\n"),
; 1637 :                BytesRead, pSerialHead->RxBytes, pSerialHead->DroppedBytesMDD,pSerialHead->DroppedBytesPDD));

  04b54	e59f3088	 ldr         r3, [pc, #0x88]
  04b58	e5933440	 ldr         r3, [r3, #0x440]
  04b5c	e2032b02	 and         r2, r3, #2, 22
  04b60	e59f307c	 ldr         r3, [pc, #0x7C]
  04b64	e5933440	 ldr         r3, [r3, #0x440]
  04b68	e2033a02	 and         r3, r3, #2, 20
  04b6c	e1923003	 orrs        r3, r2, r3
  04b70	0a00000f	 beq         |$LN74@COM_Read|
  04b74	e59d3008	 ldr         r3, [sp, #8]
  04b78	e283304c	 add         r3, r3, #0x4C
  04b7c	e5933000	 ldr         r3, [r3]
  04b80	e58d3000	 str         r3, [sp]
  04b84	e59d3008	 ldr         r3, [sp, #8]
  04b88	e2833048	 add         r3, r3, #0x48
  04b8c	e5933000	 ldr         r3, [r3]
  04b90	e59d2008	 ldr         r2, [sp, #8]
  04b94	e2822050	 add         r2, r2, #0x50
  04b98	e5922000	 ldr         r2, [r2]
  04b9c	e59d1020	 ldr         r1, [sp, #0x20]
  04ba0	e59f0038	 ldr         r0, [pc, #0x38]
  04ba4	eb000000	 bl          NKDbgPrintfW
  04ba8	e3a03001	 mov         r3, #1
  04bac	e58d30bc	 str         r3, [sp, #0xBC]
  04bb0	ea000001	 b           |$LN75@COM_Read|
  04bb4		 |$LN74@COM_Read|
  04bb4	e3a03000	 mov         r3, #0
  04bb8	e58d30bc	 str         r3, [sp, #0xBC]
  04bbc		 |$LN75@COM_Read|

; 1638 : 
; 1639 :     COM_DEC_USAGE_CNT(pOpenHead);

  04bbc	e59d3018	 ldr         r3, [sp, #0x18]
  04bc0	e283000c	 add         r0, r3, #0xC
  04bc4	eb000000	 bl          InterlockedDecrement

; 1640 : 
; 1641 :     return(BytesRead);

  04bc8	e59d3020	 ldr         r3, [sp, #0x20]
  04bcc	e58d3038	 str         r3, [sp, #0x38]
  04bd0		 |$LN28@COM_Read|

; 1642 : }

  04bd0	e59d0038	 ldr         r0, [sp, #0x38]
  04bd4	e28dd0c0	 add         sp, sp, #0xC0
  04bd8	e89d6000	 ldmia       sp, {sp, lr}
  04bdc	e12fff1e	 bx          lr
  04be0		 |$LN79@COM_Read|
  04be0		 |$LN80@COM_Read|
  04be0	00000000	 DCD         |??_C@_1GI@KJLFCJIJ@?$AA?9?$AAC?$AAO?$AAM?$AA_?$AAR?$AAE?$AAA?$AAD?$AA?3?$AA?5?$AAr?$AAe?$AAt?$AAu?$AAr?$AAn?$AAi?$AAn?$AAg?$AA?5?$AA?$CF?$AAd?$AA?5?$AA?$CI?$AAt?$AAo?$AAt?$AAa?$AAl?$AA?5?$AA?$CF@|
  04be4		 |$LN81@COM_Read|
  04be4	00000000	 DCD         |dpCurSettings|
  04be8		 |$LN82@COM_Read|
  04be8	00000000	 DCD         |??_C@_1CO@BMKNIMFL@?$AAR?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AAB?$AAy?$AAt?$AAe?$AAs?$AA?5?$AAe?$AAx?$AAi?$AAt?$AAi?$AAn?$AAg?$AA?$AN?$AA?6?$AA?$AA@|
  04bec		 |$LN83@COM_Read|
  04bec	00000000	 DCD         |??_C@_1EI@NJBLBAI@?$AAD?$AAT?$AAR?$AA_?$AAC?$AAO?$AAN?$AAT?$AAR?$AAO?$AAL?$AA_?$AAH?$AAA?$AAN?$AAD?$AAS?$AAH?$AAA?$AAK?$AAE?$AA?5?$AAS?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAD?$AAT@|
  04bf0		 |$LN84@COM_Read|
  04bf0	00000000	 DCD         |??_C@_1EI@PFOBJKJM@?$AAR?$AAT?$AAS?$AA_?$AAC?$AAO?$AAN?$AAT?$AAR?$AAO?$AAL?$AA_?$AAH?$AAA?$AAN?$AAD?$AAS?$AAH?$AAA?$AAK?$AAE?$AA?5?$AAS?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAR?$AAT@|
  04bf4		 |$LN85@COM_Read|
  04bf4	00000000	 DCD         |??_C@_1BM@LDMNCPPP@?$AAS?$AAe?$AAn?$AAd?$AAi?$AAn?$AAg?$AA?5?$AAX?$AAO?$AAN?$AA?$AN?$AA?6?$AA?$AA@|
  04bf8		 |$LN86@COM_Read|
  04bf8	00000000	 DCD         |??_C@_1DO@LAJCOFEP@?$AAC?$AAO?$AAM?$AA_?$AAR?$AAe?$AAa?$AAd?$AA?5?$AA?9?$AA?5?$AAd?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAw?$AAa?$AAs?$AA?5?$AAc?$AAl?$AAo?$AAs?$AAe?$AAd?$AA?6?$AA?$AN?$AA?$AA@|
  04bfc		 |$LN87@COM_Read|
  04bfc	00000000	 DCD         |??_C@_1DG@NGGANINM@?$AAC?$AAO?$AAM?$AA_?$AAR?$AAe?$AAa?$AAd?$AA?5?$AA?9?$AA?5?$AAA?$AAb?$AAo?$AAr?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  04c00		 |$LN88@COM_Read|
  04c00	00000000	 DCD         |??_C@_1CK@GLIEOMOP@?$AAA?$AAb?$AAo?$AAu?$AAt?$AA?5?$AAt?$AAo?$AA?5?$AAw?$AAa?$AAi?$AAt?$AA?5?$AA?$CF?$AAd?$AAm?$AAs?$AA?$AN?$AA?6?$AA?$AA@|
  04c04		 |$LN89@COM_Read|
  04c04	00000000	 DCD         |??_C@_1DC@FONCMGND@?$AAA?$AAb?$AAo?$AAu?$AAt?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAo?$AAp?$AAy?$AA?5?$AA?$CF?$AAd?$AA?5?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?$AN?$AA?6?$AA?$AA@|
  04c08		 |$LN90@COM_Read|
  04c08	00000000	 DCD         |??_C@_1FC@CGIHBGNN@?$AAT?$AAo?$AAp?$AA?5?$AAo?$AAf?$AA?5?$AAL?$AAo?$AAo?$AAp?$AA?5?$AAF?$AAi?$AAf?$AAo?$AA?$CI?$AAR?$AA?$DN?$AA?$CF?$AAd?$AA?0?$AAW?$AA?$DN?$AA?$CF?$AAd?$AA?0?$AAL?$AA?$DN?$AA?$CF?$AAd?$AA?0@|
  04c0c		 |$LN91@COM_Read|
  04c0c	00000000	 DCD         |??_C@_1CE@PICJNKFA@?$AAT?$AAo?$AAt?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?3?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  04c10		 |$LN92@COM_Read|
  04c10	00000000	 DCD         |??_C@_1FO@KCNFPNI@?$AAC?$AAO?$AAM?$AA_?$AAR?$AAE?$AAA?$AAD?$AA?0?$AA?5?$AAb?$AAa?$AAd?$AA?5?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$CI?$AA0?$AAx?$AA?$CF?$AAx?$AA?$CJ?$AA?5?$AAo?$AAr?$AA?5@|
  04c14		 |$LN93@COM_Read|
  04c14	00000000	 DCD         |??_C@_1FE@BNFDNPPG@?$AAC?$AAO?$AAM?$AA_?$AAR?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAA?$AAc?$AAc?$AAe?$AAs?$AAs?$AA?5?$AAp?$AAe?$AAr?$AAm?$AAi?$AAs?$AAs?$AAi?$AAo?$AAn?$AA?5?$AAf?$AAa?$AAi?$AAl@|
  04c18		 |$LN94@COM_Read|
  04c18	00000000	 DCD         |??_C@_1DI@CKPKPEIH@?$AAC?$AAO?$AAM?$AA_?$AAR?$AAE?$AAA?$AAD?$AA?0?$AA?5?$AAd?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?$AN?$AA?6?$AA?$AA@|
  04c1c		 |$LN95@COM_Read|
  04c1c	00000000	 DCD         |??_C@_1DC@DDENEIPK@?$AAC?$AAO?$AAM?$AA_?$AAR?$AAE?$AAA?$AAD?$AA?0?$AA?5?$AAW?$AAr?$AAo?$AAn?$AAg?$AA?5?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AA?$AN?$AA?6?$AA?$AA@|
  04c20		 |$LN96@COM_Read|
  04c20	00000000	 DCD         |??_C@_1DE@HFOANDEN@?$AA?$CL?$AAC?$AAO?$AAM?$AA_?$AAR?$AAE?$AAA?$AAD?$AA?$CI?$AA0?$AAx?$AA?$CF?$AAX?$AA?0?$AA0?$AAx?$AA?$CF?$AAX?$AA?0?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  04c24		 |$M41871|

			 ENDP  ; |COM_Read|

	EXPORT	|??_C@_1DG@PKENKCNO@?$AA?9?$AAC?$AAO?$AAM?$AA_?$AAW?$AAR?$AAI?$AAT?$AAE?$AA?0?$AA?5?$AAr?$AAe?$AAt?$AAu?$AAr?$AAn?$AAi?$AAn?$AAg?$AA?5?$AA?$CF?$AAd?$AA?6?$AA?$AN?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FE@LGJDMHNB@?$AAC?$AAO?$AAM?$AA_?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?5?$AAr?$AAe?$AAl?$AAe?$AAa?$AAs?$AAe?$AAd?$AA?5?$AAC?$AAr?$AAi?$AAt?$AAS?$AAe?$AAc?$AA?3?$AA?5?$AA?$CF?$AAx?$AA?4?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EA@JFKAOONE@?$AAC?$AAO?$AAM?$AA_?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAe?$AAd?$AA?5?$AAn?$AAo?$AAr?$AAm?$AAa?$AAl?$AAl?$AAy?$AA?4?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CO@GMIGOOP@?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EA@JJCCGAEK@?$AAC?$AAO?$AAM?$AA_?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?5?$AA?9?$AA?5?$AAd?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAw?$AAa?$AAs?$AA?5?$AAc?$AAl?$AAo?$AAs?$AAe?$AAd?$AA?6?$AA?$AN?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DK@IBJJCGOP@?$AAC?$AAO?$AAM?$AA_?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?5?$AA?9?$AA?5?$AAA?$AAb?$AAo?$AAr?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAw?$AAr?$AAi?$AAt?$AAe?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GK@PCKMKKFI@?$AAC?$AAO?$AAM?$AA_?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?5?$AAw?$AAa?$AAi?$AAt?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAt?$AAr?$AAa?$AAn?$AAs?$AAm?$AAi?$AAs?$AAs?$AAi?$AAo?$AAn?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EE@GAMOAJJK@?$AAC?$AAO?$AAM?$AA_?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?5?$AAr?$AAe?$AAl?$AAe?$AAa?$AAs?$AAe?$AAd?$AA?5?$AAC?$AAr?$AAi?$AAt?$AAS?$AAe?$AAc?$AA?3?$AA?5?$AA?$CF?$AAx?$AA?4?$AA?$AN@| [ DATA ] ; `string'
	EXPORT	|ResetEvent|
	EXPORT	|??_C@_1DI@DJLNOFJH@?$AAC?$AAO?$AAM?$AA_?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?5?$AAg?$AAo?$AAt?$AA?5?$AAC?$AAr?$AAi?$AAt?$AAS?$AAe?$AAc?$AA?5?$AA?$CF?$AAx?$AA?4?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DI@CAEOCHGO@?$AAC?$AAO?$AAM?$AA_?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?5?$AAG?$AAo?$AAt?$AA?5?$AAC?$AAr?$AAi?$AAt?$AAS?$AAe?$AAc?$AA?5?$AA?$CF?$AAx?$AA?4?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EC@FLKHHNEC@?$AAC?$AAO?$AAM?$AA_?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?5?$AAw?$AAa?$AAi?$AAt?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAC?$AAr?$AAi?$AAt?$AAS?$AAe?$AAc?$AA?5?$AA?$CF?$AAx?$AA?4?$AA?$AN?$AA?6@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1KG@HJMEIMAA@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GC@BNCJFOA@?$AAC?$AAO?$AAM?$AA_?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?5?$AAC?$AAe?$AAA?$AAl?$AAl?$AAo?$AAc?$AAA?$AAs?$AAy?$AAn?$AAc?$AAh?$AAr?$AAo?$AAn?$AAo?$AAu?$AAs?$AAB?$AAu?$AAf@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GA@CAKHMJEI@?$AAC?$AAO?$AAM?$AA_?$AAW?$AAR?$AAI?$AAT?$AAE?$AA?0?$AA?5?$AAb?$AAa?$AAd?$AA?5?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$CI?$AA0?$AAx?$AA?$CF?$AAx?$AA?$CJ?$AA?5?$AAo?$AAr@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FG@IAEGGCHL@?$AAC?$AAO?$AAM?$AA_?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAA?$AAc?$AAc?$AAe?$AAs?$AAs?$AA?5?$AAp?$AAe?$AAr?$AAm?$AAi?$AAs?$AAs?$AAi?$AAo?$AAn?$AA?5?$AAf?$AAa?$AAi@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DK@PMCNIBAH@?$AAC?$AAO?$AAM?$AA_?$AAW?$AAR?$AAI?$AAT?$AAE?$AA?0?$AA?5?$AAd?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DK@NPDDAOLJ@?$AA?$CL?$AAC?$AAO?$AAM?$AA_?$AAW?$AAR?$AAI?$AAT?$AAE?$AA?$CI?$AA0?$AAx?$AA?$CF?$AAX?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AAX?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|COM_Write|
	IMPORT	|CeFreeAsynchronousBuffer|
	IMPORT	|CeAllocAsynchronousBuffer|

  00078			 AREA	 |.pdata|, PDATA
|$T41939| DCD	|$LN62@COM_Write|
	DCD	0x40024204

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DG@PKENKCNO@?$AA?9?$AAC?$AAO?$AAM?$AA_?$AAW?$AAR?$AAI?$AAT?$AAE?$AA?0?$AA?5?$AAr?$AAe?$AAt?$AAu?$AAr?$AAn?$AAi?$AAn?$AAg?$AA?5?$AA?$CF?$AAd?$AA?6?$AA?$AN?$AA?$AA@| DCB "-"
	DCB	0x0, "C", 0x0, "O", 0x0, "M", 0x0, "_", 0x0, "W", 0x0, "R"
	DCB	0x0, "I", 0x0, "T", 0x0, "E", 0x0, ",", 0x0, " ", 0x0, "r"
	DCB	0x0, "e", 0x0, "t", 0x0, "u", 0x0, "r", 0x0, "n", 0x0, "i"
	DCB	0x0, "n", 0x0, "g", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xa
	DCB	0x0, 0xd, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FE@LGJDMHNB@?$AAC?$AAO?$AAM?$AA_?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?5?$AAr?$AAe?$AAl?$AAe?$AAa?$AAs?$AAe?$AAd?$AA?5?$AAC?$AAr?$AAi?$AAt?$AAS?$AAe?$AAc?$AA?3?$AA?5?$AA?$CF?$AAx?$AA?4?$AA?5@| DCB "C"
	DCB	0x0, "O", 0x0, "M", 0x0, "_", 0x0, "W", 0x0, "r", 0x0, "i"
	DCB	0x0, "t", 0x0, "e", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "l"
	DCB	0x0, "e", 0x0, "a", 0x0, "s", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "C", 0x0, "r", 0x0, "i", 0x0, "t", 0x0, "S", 0x0, "e"
	DCB	0x0, "c", 0x0, ":", 0x0, " ", 0x0, "%", 0x0, "x", 0x0, "."
	DCB	0x0, " ", 0x0, "E", 0x0, "x", 0x0, "i", 0x0, "t", 0x0, "i"
	DCB	0x0, "n", 0x0, "g", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@JFKAOONE@?$AAC?$AAO?$AAM?$AA_?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAe?$AAd?$AA?5?$AAn?$AAo?$AAr?$AAm?$AAa?$AAl?$AAl?$AAy?$AA?4?$AA?$AN?$AA?6?$AA?$AA@| DCB "C"
	DCB	0x0, "O", 0x0, "M", 0x0, "_", 0x0, "W", 0x0, "r", 0x0, "i"
	DCB	0x0, "t", 0x0, "e", 0x0, " ", 0x0, "c", 0x0, "o", 0x0, "m"
	DCB	0x0, "p", 0x0, "l", 0x0, "e", 0x0, "t", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "n", 0x0, "o", 0x0, "r", 0x0, "m", 0x0, "a"
	DCB	0x0, "l", 0x0, "l", 0x0, "y", 0x0, ".", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@GMIGOOP@?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "W"
	DCB	0x0, "r", 0x0, "i", 0x0, "t", 0x0, "e", 0x0, " ", 0x0, "t"
	DCB	0x0, "i", 0x0, "m", 0x0, "e", 0x0, "o", 0x0, "u", 0x0, "t"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@JJCCGAEK@?$AAC?$AAO?$AAM?$AA_?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?5?$AA?9?$AA?5?$AAd?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAw?$AAa?$AAs?$AA?5?$AAc?$AAl?$AAo?$AAs?$AAe?$AAd?$AA?6?$AA?$AN?$AA?$AA@| DCB "C"
	DCB	0x0, "O", 0x0, "M", 0x0, "_", 0x0, "W", 0x0, "r", 0x0, "i"
	DCB	0x0, "t", 0x0, "e", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "d"
	DCB	0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, " "
	DCB	0x0, "w", 0x0, "a", 0x0, "s", 0x0, " ", 0x0, "c", 0x0, "l"
	DCB	0x0, "o", 0x0, "s", 0x0, "e", 0x0, "d", 0x0, 0xa, 0x0, 0xd
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DK@IBJJCGOP@?$AAC?$AAO?$AAM?$AA_?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?5?$AA?9?$AA?5?$AAA?$AAb?$AAo?$AAr?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAw?$AAr?$AAi?$AAt?$AAe?$AA?$AN?$AA?6?$AA?$AA@| DCB "C"
	DCB	0x0, "O", 0x0, "M", 0x0, "_", 0x0, "W", 0x0, "r", 0x0, "i"
	DCB	0x0, "t", 0x0, "e", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "A"
	DCB	0x0, "b", 0x0, "o", 0x0, "r", 0x0, "t", 0x0, "i", 0x0, "n"
	DCB	0x0, "g", 0x0, " ", 0x0, "w", 0x0, "r", 0x0, "i", 0x0, "t"
	DCB	0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GK@PCKMKKFI@?$AAC?$AAO?$AAM?$AA_?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?5?$AAw?$AAa?$AAi?$AAt?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAt?$AAr?$AAa?$AAn?$AAs?$AAm?$AAi?$AAs?$AAs?$AAi?$AAo?$AAn?$AA?5@| DCB "C"
	DCB	0x0, "O", 0x0, "M", 0x0, "_", 0x0, "W", 0x0, "r", 0x0, "i"
	DCB	0x0, "t", 0x0, "e", 0x0, " ", 0x0, "w", 0x0, "a", 0x0, "i"
	DCB	0x0, "t", 0x0, " ", 0x0, "f", 0x0, "o", 0x0, "r", 0x0, " "
	DCB	0x0, "t", 0x0, "r", 0x0, "a", 0x0, "n", 0x0, "s", 0x0, "m"
	DCB	0x0, "i", 0x0, "s", 0x0, "s", 0x0, "i", 0x0, "o", 0x0, "n"
	DCB	0x0, " ", 0x0, "c", 0x0, "o", 0x0, "m", 0x0, "p", 0x0, "l"
	DCB	0x0, "e", 0x0, "t", 0x0, "e", 0x0, " ", 0x0, "e", 0x0, "v"
	DCB	0x0, "e", 0x0, "n", 0x0, "t", 0x0, " ", 0x0, "%", 0x0, "x"
	DCB	0x0, ".", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EE@GAMOAJJK@?$AAC?$AAO?$AAM?$AA_?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?5?$AAr?$AAe?$AAl?$AAe?$AAa?$AAs?$AAe?$AAd?$AA?5?$AAC?$AAr?$AAi?$AAt?$AAS?$AAe?$AAc?$AA?3?$AA?5?$AA?$CF?$AAx?$AA?4?$AA?$AN@| DCB "C"
	DCB	0x0, "O", 0x0, "M", 0x0, "_", 0x0, "W", 0x0, "r", 0x0, "i"
	DCB	0x0, "t", 0x0, "e", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "l"
	DCB	0x0, "e", 0x0, "a", 0x0, "s", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "C", 0x0, "r", 0x0, "i", 0x0, "t", 0x0, "S", 0x0, "e"
	DCB	0x0, "c", 0x0, ":", 0x0, " ", 0x0, "%", 0x0, "x", 0x0, "."
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DI@DJLNOFJH@?$AAC?$AAO?$AAM?$AA_?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?5?$AAg?$AAo?$AAt?$AA?5?$AAC?$AAr?$AAi?$AAt?$AAS?$AAe?$AAc?$AA?5?$AA?$CF?$AAx?$AA?4?$AA?$AN?$AA?6?$AA?$AA@| DCB "C"
	DCB	0x0, "O", 0x0, "M", 0x0, "_", 0x0, "W", 0x0, "r", 0x0, "i"
	DCB	0x0, "t", 0x0, "e", 0x0, " ", 0x0, "g", 0x0, "o", 0x0, "t"
	DCB	0x0, " ", 0x0, "C", 0x0, "r", 0x0, "i", 0x0, "t", 0x0, "S"
	DCB	0x0, "e", 0x0, "c", 0x0, " ", 0x0, "%", 0x0, "x", 0x0, "."
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DI@CAEOCHGO@?$AAC?$AAO?$AAM?$AA_?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?5?$AAG?$AAo?$AAt?$AA?5?$AAC?$AAr?$AAi?$AAt?$AAS?$AAe?$AAc?$AA?5?$AA?$CF?$AAx?$AA?4?$AA?$AN?$AA?6?$AA?$AA@| DCB "C"
	DCB	0x0, "O", 0x0, "M", 0x0, "_", 0x0, "W", 0x0, "r", 0x0, "i"
	DCB	0x0, "t", 0x0, "e", 0x0, " ", 0x0, "G", 0x0, "o", 0x0, "t"
	DCB	0x0, " ", 0x0, "C", 0x0, "r", 0x0, "i", 0x0, "t", 0x0, "S"
	DCB	0x0, "e", 0x0, "c", 0x0, " ", 0x0, "%", 0x0, "x", 0x0, "."
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EC@FLKHHNEC@?$AAC?$AAO?$AAM?$AA_?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?5?$AAw?$AAa?$AAi?$AAt?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAC?$AAr?$AAi?$AAt?$AAS?$AAe?$AAc?$AA?5?$AA?$CF?$AAx?$AA?4?$AA?$AN?$AA?6@| DCB "C"
	DCB	0x0, "O", 0x0, "M", 0x0, "_", 0x0, "W", 0x0, "r", 0x0, "i"
	DCB	0x0, "t", 0x0, "e", 0x0, " ", 0x0, "w", 0x0, "a", 0x0, "i"
	DCB	0x0, "t", 0x0, " ", 0x0, "f", 0x0, "o", 0x0, "r", 0x0, " "
	DCB	0x0, "C", 0x0, "r", 0x0, "i", 0x0, "t", 0x0, "S", 0x0, "e"
	DCB	0x0, "c", 0x0, " ", 0x0, "%", 0x0, "x", 0x0, ".", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@| DCB "%"
	DCB	0x0, "s", 0x0, ":", 0x0, " ", 0x0, "D", 0x0, "E", 0x0, "B"
	DCB	0x0, "U", 0x0, "G", 0x0, "C", 0x0, "H", 0x0, "K", 0x0, " "
	DCB	0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "i", 0x0, "n", 0x0, " ", 0x0, "f", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, " ", 0x0, "%", 0x0, "s", 0x0, " "
	DCB	0x0, "a", 0x0, "t", 0x0, " ", 0x0, "l", 0x0, "i", 0x0, "n"
	DCB	0x0, "e", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@| DCB "U", 0x0
	DCB	"n", 0x0, "k", 0x0, "n", 0x0, "o", 0x0, "w", 0x0, "n", 0x0
	DCB	0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KG@HJMEIMAA@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@| DCB "C"
	DCB	0x0, ":", 0x0, "\\", 0x0, "W", 0x0, "I", 0x0, "N", 0x0, "C"
	DCB	0x0, "E", 0x0, "6", 0x0, "0", 0x0, "0", 0x0, "\\", 0x0, "P"
	DCB	0x0, "L", 0x0, "A", 0x0, "T", 0x0, "F", 0x0, "O", 0x0, "R"
	DCB	0x0, "M", 0x0, "\\", 0x0, "C", 0x0, "O", 0x0, "M", 0x0, "M"
	DCB	0x0, "O", 0x0, "N", 0x0, "\\", 0x0, "S", 0x0, "R", 0x0, "C"
	DCB	0x0, "\\", 0x0, "S", 0x0, "O", 0x0, "C", 0x0, "\\", 0x0, "C"
	DCB	0x0, "O", 0x0, "M", 0x0, "M", 0x0, "O", 0x0, "N", 0x0, "_"
	DCB	0x0, "T", 0x0, "I", 0x0, "_", 0x0, "V", 0x0, "1", 0x0, "\\"
	DCB	0x0, "C", 0x0, "O", 0x0, "M", 0x0, "M", 0x0, "O", 0x0, "N"
	DCB	0x0, "_", 0x0, "T", 0x0, "I", 0x0, "\\", 0x0, "S", 0x0, "E"
	DCB	0x0, "R", 0x0, "I", 0x0, "A", 0x0, "L", 0x0, "\\", 0x0, "C"
	DCB	0x0, "O", 0x0, "M", 0x0, "_", 0x0, "M", 0x0, "D", 0x0, "D"
	DCB	0x0, "2", 0x0, "\\", 0x0, ".", 0x0, "\\", 0x0, "m", 0x0, "d"
	DCB	0x0, "d", 0x0, ".", 0x0, "c", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GC@BNCJFOA@?$AAC?$AAO?$AAM?$AA_?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?5?$AAC?$AAe?$AAA?$AAl?$AAl?$AAo?$AAc?$AAA?$AAs?$AAy?$AAn?$AAc?$AAh?$AAr?$AAo?$AAn?$AAo?$AAu?$AAs?$AAB?$AAu?$AAf@| DCB "C"
	DCB	0x0, "O", 0x0, "M", 0x0, "_", 0x0, "W", 0x0, "r", 0x0, "i"
	DCB	0x0, "t", 0x0, "e", 0x0, " ", 0x0, "C", 0x0, "e", 0x0, "A"
	DCB	0x0, "l", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "A", 0x0, "s"
	DCB	0x0, "y", 0x0, "n", 0x0, "c", 0x0, "h", 0x0, "r", 0x0, "o"
	DCB	0x0, "n", 0x0, "o", 0x0, "u", 0x0, "s", 0x0, "B", 0x0, "u"
	DCB	0x0, "f", 0x0, "f", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, "E"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "("
	DCB	0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GA@CAKHMJEI@?$AAC?$AAO?$AAM?$AA_?$AAW?$AAR?$AAI?$AAT?$AAE?$AA?0?$AA?5?$AAb?$AAa?$AAd?$AA?5?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$CI?$AA0?$AAx?$AA?$CF?$AAx?$AA?$CJ?$AA?5?$AAo?$AAr@| DCB "C"
	DCB	0x0, "O", 0x0, "M", 0x0, "_", 0x0, "W", 0x0, "R", 0x0, "I"
	DCB	0x0, "T", 0x0, "E", 0x0, ",", 0x0, " ", 0x0, "b", 0x0, "a"
	DCB	0x0, "d", 0x0, " ", 0x0, " ", 0x0, "p", 0x0, "o", 0x0, "i"
	DCB	0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "(", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "x", 0x0, ")", 0x0, " ", 0x0, "o"
	DCB	0x0, "r", 0x0, " ", 0x0, "l", 0x0, "e", 0x0, "n", 0x0, "g"
	DCB	0x0, "t", 0x0, "h", 0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "x", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FG@IAEGGCHL@?$AAC?$AAO?$AAM?$AA_?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAA?$AAc?$AAc?$AAe?$AAs?$AAs?$AA?5?$AAp?$AAe?$AAr?$AAm?$AAi?$AAs?$AAs?$AAi?$AAo?$AAn?$AA?5?$AAf?$AAa?$AAi@| DCB "C"
	DCB	0x0, "O", 0x0, "M", 0x0, "_", 0x0, "W", 0x0, "r", 0x0, "i"
	DCB	0x0, "t", 0x0, "e", 0x0, ":", 0x0, " ", 0x0, "A", 0x0, "c"
	DCB	0x0, "c", 0x0, "e", 0x0, "s", 0x0, "s", 0x0, " ", 0x0, "p"
	DCB	0x0, "e", 0x0, "r", 0x0, "m", 0x0, "i", 0x0, "s", 0x0, "s"
	DCB	0x0, "i", 0x0, "o", 0x0, "n", 0x0, " ", 0x0, "f", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "u", 0x0, "r", 0x0, "e", 0x0, " "
	DCB	0x0, "x", 0x0, "%", 0x0, "X", 0x0, 0xa, 0x0, 0xd, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DK@PMCNIBAH@?$AAC?$AAO?$AAM?$AA_?$AAW?$AAR?$AAI?$AAT?$AAE?$AA?0?$AA?5?$AAd?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?$AN?$AA?6?$AA?$AA@| DCB "C"
	DCB	0x0, "O", 0x0, "M", 0x0, "_", 0x0, "W", 0x0, "R", 0x0, "I"
	DCB	0x0, "T", 0x0, "E", 0x0, ",", 0x0, " ", 0x0, "d", 0x0, "e"
	DCB	0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, " ", 0x0, "n"
	DCB	0x0, "o", 0x0, "t", 0x0, " ", 0x0, "o", 0x0, "p", 0x0, "e"
	DCB	0x0, "n", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DK@NPDDAOLJ@?$AA?$CL?$AAC?$AAO?$AAM?$AA_?$AAW?$AAR?$AAI?$AAT?$AAE?$AA?$CI?$AA0?$AAx?$AA?$CF?$AAX?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AAX?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "C", 0x0, "O", 0x0, "M", 0x0, "_", 0x0, "W", 0x0, "R"
	DCB	0x0, "I", 0x0, "T", 0x0, "E", 0x0, "(", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "X", 0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "X", 0x0, ",", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  04c24			 AREA	 |.text|, CODE, ARM

  04c24		 |COM_Write| PROC

; 1657 : {

  04c24		 |$LN62@COM_Write|
  04c24	e1a0c00d	 mov         r12, sp
  04c28	e92d0007	 stmdb       sp!, {r0 - r2}
  04c2c	e92d5000	 stmdb       sp!, {r12, lr}
  04c30	e24dd098	 sub         sp, sp, #0x98
  04c34		 |$M41936|

; 1658 :     PHW_OPEN_INFO   pOpenHead = (PHW_OPEN_INFO)pHead;

  04c34	e59d30a0	 ldr         r3, [sp, #0xA0]
  04c38	e58d3014	 str         r3, [sp, #0x14]

; 1659 :     PHW_INDEP_INFO  pSerialHead = pOpenHead->pSerialHead;

  04c3c	e59d3014	 ldr         r3, [sp, #0x14]
  04c40	e5933000	 ldr         r3, [r3]
  04c44	e58d3004	 str         r3, [sp, #4]

; 1660 :     ULONG               BytesWritten   = 0;

  04c48	e3a03000	 mov         r3, #0
  04c4c	e58d3020	 str         r3, [sp, #0x20]

; 1661 :     ULONG               TotalWritten   = 0;

  04c50	e3a03000	 mov         r3, #0
  04c54	e58d3000	 str         r3, [sp]

; 1662 :     PHWOBJ              pHWObj         = NULL;

  04c58	e3a03000	 mov         r3, #0
  04c5c	e58d300c	 str         r3, [sp, #0xC]

; 1663 :     PVOID               pHWHead        = NULL;

  04c60	e3a03000	 mov         r3, #0
  04c64	e58d3028	 str         r3, [sp, #0x28]

; 1664 :     PHW_VTBL            pFuncTbl       = NULL;

  04c68	e3a03000	 mov         r3, #0
  04c6c	e58d3010	 str         r3, [sp, #0x10]

; 1665 :     ULONG               TotalTimeout;   // The Total Timeout
; 1666 :     ULONG               Timeout;        // The Timeout value actually used
; 1667 :     ULONG               WaitReturn;
; 1668 :     PUCHAR              pvMapped = NULL;

  04c70	e3a03000	 mov         r3, #0
  04c74	e58d3008	 str         r3, [sp, #8]

; 1669 :     
; 1670 :     DEBUGMSG (ZONE_WRITE|ZONE_FUNCTION,
; 1671 :               (TEXT("+COM_WRITE(0x%X, 0x%X, %d)\r\n"), pHead,
; 1672 :                pSourceBytes, NumberOfBytes));

  04c78	e59f3860	 ldr         r3, [pc, #0x860]
  04c7c	e5933440	 ldr         r3, [r3, #0x440]
  04c80	e2032008	 and         r2, r3, #8
  04c84	e59f3854	 ldr         r3, [pc, #0x854]
  04c88	e5933440	 ldr         r3, [r3, #0x440]
  04c8c	e2033a02	 and         r3, r3, #2, 20
  04c90	e1923003	 orrs        r3, r2, r3
  04c94	0a000007	 beq         |$LN18@COM_Write|
  04c98	e59d30a8	 ldr         r3, [sp, #0xA8]
  04c9c	e59d20a4	 ldr         r2, [sp, #0xA4]
  04ca0	e59d10a0	 ldr         r1, [sp, #0xA0]
  04ca4	e59f087c	 ldr         r0, [pc, #0x87C]
  04ca8	eb000000	 bl          NKDbgPrintfW
  04cac	e3a03001	 mov         r3, #1
  04cb0	e58d3034	 str         r3, [sp, #0x34]
  04cb4	ea000001	 b           |$LN19@COM_Write|
  04cb8		 |$LN18@COM_Write|
  04cb8	e3a03000	 mov         r3, #0
  04cbc	e58d3034	 str         r3, [sp, #0x34]
  04cc0		 |$LN19@COM_Write|

; 1673 : 
; 1674 : 
; 1675 :     // Check validity of handle
; 1676 :     if ( !pSerialHead || !pSerialHead->OpenCnt ) {

  04cc0	e59d3004	 ldr         r3, [sp, #4]
  04cc4	e3530000	 cmp         r3, #0
  04cc8	0a000004	 beq         |$LN14@COM_Write|
  04ccc	e59d3004	 ldr         r3, [sp, #4]
  04cd0	e2833090	 add         r3, r3, #0x90
  04cd4	e5933000	 ldr         r3, [r3]
  04cd8	e3530000	 cmp         r3, #0
  04cdc	1a000013	 bne         |$LN15@COM_Write|
  04ce0		 |$LN14@COM_Write|

; 1677 :         DEBUGMSG (ZONE_WRITE|ZONE_ERROR,
; 1678 :                   (TEXT("COM_WRITE, device not open\r\n") ));

  04ce0	e59f37f8	 ldr         r3, [pc, #0x7F8]
  04ce4	e5933440	 ldr         r3, [r3, #0x440]
  04ce8	e2032008	 and         r2, r3, #8
  04cec	e59f37ec	 ldr         r3, [pc, #0x7EC]
  04cf0	e5933440	 ldr         r3, [r3, #0x440]
  04cf4	e2033902	 and         r3, r3, #2, 18
  04cf8	e1923003	 orrs        r3, r2, r3
  04cfc	0a000004	 beq         |$LN20@COM_Write|
  04d00	e59f081c	 ldr         r0, [pc, #0x81C]
  04d04	eb000000	 bl          NKDbgPrintfW
  04d08	e3a03001	 mov         r3, #1
  04d0c	e58d3038	 str         r3, [sp, #0x38]
  04d10	ea000001	 b           |$LN21@COM_Write|
  04d14		 |$LN20@COM_Write|
  04d14	e3a03000	 mov         r3, #0
  04d18	e58d3038	 str         r3, [sp, #0x38]
  04d1c		 |$LN21@COM_Write|

; 1679 :         SetLastError (ERROR_INVALID_HANDLE);

  04d1c	e3a00006	 mov         r0, #6
  04d20	eb000000	 bl          SetLastError

; 1680 :         return(ULONG)-1;

  04d24	e3e03000	 mvn         r3, #0
  04d28	e58d3030	 str         r3, [sp, #0x30]
  04d2c	ea0001e6	 b           |$LN16@COM_Write|
  04d30		 |$LN15@COM_Write|

; 1681 :     }
; 1682 : 
; 1683 :     // Make sure the caller has access permissions
; 1684 :     if ( !(pOpenHead->AccessCode & GENERIC_WRITE) ) {

  04d30	e59d3014	 ldr         r3, [sp, #0x14]
  04d34	e2833004	 add         r3, r3, #4
  04d38	e5933000	 ldr         r3, [r3]
  04d3c	e3130101	 tst         r3, #1, 2
  04d40	1a000016	 bne         |$LN13@COM_Write|

; 1685 :         DEBUGMSG(ZONE_USR_READ|ZONE_ERROR,
; 1686 :                  (TEXT("COM_Write: Access permission failure x%X\n\r"),
; 1687 :                   pOpenHead->AccessCode));

  04d44	e59f3794	 ldr         r3, [pc, #0x794]
  04d48	e5933440	 ldr         r3, [r3, #0x440]
  04d4c	e2032b02	 and         r2, r3, #2, 22
  04d50	e59f3788	 ldr         r3, [pc, #0x788]
  04d54	e5933440	 ldr         r3, [r3, #0x440]
  04d58	e2033902	 and         r3, r3, #2, 18
  04d5c	e1923003	 orrs        r3, r2, r3
  04d60	0a000007	 beq         |$LN22@COM_Write|
  04d64	e59d3014	 ldr         r3, [sp, #0x14]
  04d68	e2833004	 add         r3, r3, #4
  04d6c	e5931000	 ldr         r1, [r3]
  04d70	e59f07a8	 ldr         r0, [pc, #0x7A8]
  04d74	eb000000	 bl          NKDbgPrintfW
  04d78	e3a03001	 mov         r3, #1
  04d7c	e58d303c	 str         r3, [sp, #0x3C]
  04d80	ea000001	 b           |$LN23@COM_Write|
  04d84		 |$LN22@COM_Write|
  04d84	e3a03000	 mov         r3, #0
  04d88	e58d303c	 str         r3, [sp, #0x3C]
  04d8c		 |$LN23@COM_Write|

; 1688 :         SetLastError (ERROR_INVALID_ACCESS);

  04d8c	e3a0000c	 mov         r0, #0xC
  04d90	eb000000	 bl          SetLastError

; 1689 :         return(ULONG)-1;

  04d94	e3e03000	 mvn         r3, #0
  04d98	e58d3030	 str         r3, [sp, #0x30]
  04d9c	ea0001ca	 b           |$LN16@COM_Write|
  04da0		 |$LN13@COM_Write|

; 1690 :     }
; 1691 : 
; 1692 :     if ( pSourceBytes == NULL ||  NumberOfBytes == 0 ) {

  04da0	e59d30a4	 ldr         r3, [sp, #0xA4]
  04da4	e3530000	 cmp         r3, #0
  04da8	0a000002	 beq         |$LN11@COM_Write|
  04dac	e59d30a8	 ldr         r3, [sp, #0xA8]
  04db0	e3530000	 cmp         r3, #0
  04db4	1a000015	 bne         |$LN12@COM_Write|
  04db8		 |$LN11@COM_Write|

; 1693 :         DEBUGMSG (ZONE_WRITE|ZONE_ERROR,
; 1694 :                   (TEXT("COM_WRITE, bad  pointer(0x%x) or length(0x%x)\r\n"), pSourceBytes, NumberOfBytes));

  04db8	e59f3720	 ldr         r3, [pc, #0x720]
  04dbc	e5933440	 ldr         r3, [r3, #0x440]
  04dc0	e2032008	 and         r2, r3, #8
  04dc4	e59f3714	 ldr         r3, [pc, #0x714]
  04dc8	e5933440	 ldr         r3, [r3, #0x440]
  04dcc	e2033902	 and         r3, r3, #2, 18
  04dd0	e1923003	 orrs        r3, r2, r3
  04dd4	0a000006	 beq         |$LN24@COM_Write|
  04dd8	e59d20a8	 ldr         r2, [sp, #0xA8]
  04ddc	e59d10a4	 ldr         r1, [sp, #0xA4]
  04de0	e59f0734	 ldr         r0, [pc, #0x734]
  04de4	eb000000	 bl          NKDbgPrintfW
  04de8	e3a03001	 mov         r3, #1
  04dec	e58d3040	 str         r3, [sp, #0x40]
  04df0	ea000001	 b           |$LN25@COM_Write|
  04df4		 |$LN24@COM_Write|
  04df4	e3a03000	 mov         r3, #0
  04df8	e58d3040	 str         r3, [sp, #0x40]
  04dfc		 |$LN25@COM_Write|

; 1695 :         SetLastError(ERROR_INVALID_PARAMETER);

  04dfc	e3a00057	 mov         r0, #0x57
  04e00	eb000000	 bl          SetLastError

; 1696 :         return(ULONG)-1;

  04e04	e3e03000	 mvn         r3, #0
  04e08	e58d3030	 str         r3, [sp, #0x30]
  04e0c	ea0001ae	 b           |$LN16@COM_Write|
  04e10		 |$LN12@COM_Write|

; 1697 :     }
; 1698 :     // Mapping Memory Because IST access it.
; 1699 :     if (!SUCCEEDED(CeAllocAsynchronousBuffer(&pvMapped, pSourceBytes, NumberOfBytes, ARG_I_PTR )) || pvMapped == NULL) {

  04e10	e3a03004	 mov         r3, #4
  04e14	e59d20a8	 ldr         r2, [sp, #0xA8]
  04e18	e59d10a4	 ldr         r1, [sp, #0xA4]
  04e1c	e28d0008	 add         r0, sp, #8
  04e20	eb000000	 bl          CeAllocAsynchronousBuffer
  04e24	e58d0044	 str         r0, [sp, #0x44]
  04e28	e59d3044	 ldr         r3, [sp, #0x44]
  04e2c	e3530000	 cmp         r3, #0
  04e30	ba000002	 blt         |$LN9@COM_Write|
  04e34	e59d3008	 ldr         r3, [sp, #8]
  04e38	e3530000	 cmp         r3, #0
  04e3c	1a00001b	 bne         |$LN10@COM_Write|
  04e40		 |$LN9@COM_Write|

; 1700 :         DEBUGMSG (ZONE_WRITE|ZONE_ERROR,
; 1701 :             (TEXT("COM_Write CeAllocAsynchronousBuffer Error (%d)\r\n"),GetLastError()));

  04e40	e59f3698	 ldr         r3, [pc, #0x698]
  04e44	e5933440	 ldr         r3, [r3, #0x440]
  04e48	e2032008	 and         r2, r3, #8
  04e4c	e59f368c	 ldr         r3, [pc, #0x68C]
  04e50	e5933440	 ldr         r3, [r3, #0x440]
  04e54	e2033902	 and         r3, r3, #2, 18
  04e58	e1923003	 orrs        r3, r2, r3
  04e5c	0a000007	 beq         |$LN26@COM_Write|
  04e60	eb000000	 bl          GetLastError
  04e64	e58d0048	 str         r0, [sp, #0x48]
  04e68	e59d1048	 ldr         r1, [sp, #0x48]
  04e6c	e59f06a4	 ldr         r0, [pc, #0x6A4]
  04e70	eb000000	 bl          NKDbgPrintfW
  04e74	e3a03001	 mov         r3, #1
  04e78	e58d304c	 str         r3, [sp, #0x4C]
  04e7c	ea000001	 b           |$LN27@COM_Write|
  04e80		 |$LN26@COM_Write|
  04e80	e3a03000	 mov         r3, #0
  04e84	e58d304c	 str         r3, [sp, #0x4C]
  04e88		 |$LN27@COM_Write|

; 1702 :         ASSERT(FALSE);

  04e88	e3a03c06	 mov         r3, #6, 24
  04e8c	e38330a6	 orr         r3, r3, #0xA6
  04e90	e59f2654	 ldr         r2, [pc, #0x654]
  04e94	e59f164c	 ldr         r1, [pc, #0x64C]
  04e98	e59f0644	 ldr         r0, [pc, #0x644]
  04e9c	eb000000	 bl          NKDbgPrintfW
  04ea0	e6000010	 __debugbreak_ce

; 1703 :         return (ULONG) -1;

  04ea4	e3e03000	 mvn         r3, #0
  04ea8	e58d3030	 str         r3, [sp, #0x30]
  04eac	ea000186	 b           |$LN16@COM_Write|
  04eb0		 |$LN10@COM_Write|

; 1704 :     }
; 1705 : 
; 1706 :     COM_INC_USAGE_CNT(pOpenHead);

  04eb0	e59d3014	 ldr         r3, [sp, #0x14]
  04eb4	e283000c	 add         r0, r3, #0xC
  04eb8	eb000000	 bl          InterlockedIncrement

; 1707 : 
; 1708 :     pHWObj   = pSerialHead->pHWObj;

  04ebc	e59d3004	 ldr         r3, [sp, #4]
  04ec0	e2833028	 add         r3, r3, #0x28
  04ec4	e5933000	 ldr         r3, [r3]
  04ec8	e58d300c	 str         r3, [sp, #0xC]

; 1709 :     pHWHead  = pSerialHead->pHWHead;

  04ecc	e59d3004	 ldr         r3, [sp, #4]
  04ed0	e283302c	 add         r3, r3, #0x2C
  04ed4	e5933000	 ldr         r3, [r3]
  04ed8	e58d3028	 str         r3, [sp, #0x28]

; 1710 :     pFuncTbl = pHWObj->pFuncTbl;

  04edc	e59d300c	 ldr         r3, [sp, #0xC]
  04ee0	e2833008	 add         r3, r3, #8
  04ee4	e5933000	 ldr         r3, [r3]
  04ee8	e58d3010	 str         r3, [sp, #0x10]

; 1711 : 
; 1712 :     /* Lock out other threads from messing with these pointers.
; 1713 :      */
; 1714 :     DEBUGMSG (ZONE_WRITE, (TEXT("COM_Write wait for CritSec %x.\r\n"),
; 1715 :                            &(pSerialHead->TransmitCritSec1)));

  04eec	e59f35ec	 ldr         r3, [pc, #0x5EC]
  04ef0	e5933440	 ldr         r3, [r3, #0x440]
  04ef4	e3130008	 tst         r3, #8
  04ef8	0a000005	 beq         |$LN28@COM_Write|
  04efc	e59d1004	 ldr         r1, [sp, #4]
  04f00	e59f05f4	 ldr         r0, [pc, #0x5F4]
  04f04	eb000000	 bl          NKDbgPrintfW
  04f08	e3a03001	 mov         r3, #1
  04f0c	e58d3050	 str         r3, [sp, #0x50]
  04f10	ea000001	 b           |$LN29@COM_Write|
  04f14		 |$LN28@COM_Write|
  04f14	e3a03000	 mov         r3, #0
  04f18	e58d3050	 str         r3, [sp, #0x50]
  04f1c		 |$LN29@COM_Write|

; 1716 :     EnterCriticalSection(&(pSerialHead->TransmitCritSec1));

  04f1c	e59d0004	 ldr         r0, [sp, #4]
  04f20	eb000000	 bl          EnterCriticalSection

; 1717 :     DEBUGMSG (ZONE_WRITE, (TEXT("COM_Write Got CritSec %x.\r\n"),
; 1718 :                            &(pSerialHead->TransmitCritSec1)));

  04f24	e59f35b4	 ldr         r3, [pc, #0x5B4]
  04f28	e5933440	 ldr         r3, [r3, #0x440]
  04f2c	e3130008	 tst         r3, #8
  04f30	0a000005	 beq         |$LN30@COM_Write|
  04f34	e59d1004	 ldr         r1, [sp, #4]
  04f38	e59f05d4	 ldr         r0, [pc, #0x5D4]
  04f3c	eb000000	 bl          NKDbgPrintfW
  04f40	e3a03001	 mov         r3, #1
  04f44	e58d3054	 str         r3, [sp, #0x54]
  04f48	ea000001	 b           |$LN31@COM_Write|
  04f4c		 |$LN30@COM_Write|
  04f4c	e3a03000	 mov         r3, #0
  04f50	e58d3054	 str         r3, [sp, #0x54]
  04f54		 |$LN31@COM_Write|

; 1719 : 
; 1720 :     DEBUGMSG (ZONE_WRITE, (TEXT("COM_Write wait for CritSec %x.\r\n"),
; 1721 :                            &(pSerialHead->TxBufferInfo.CS)));

  04f54	e59f3584	 ldr         r3, [pc, #0x584]
  04f58	e5933440	 ldr         r3, [r3, #0x440]
  04f5c	e3130008	 tst         r3, #8
  04f60	0a000006	 beq         |$LN32@COM_Write|
  04f64	e59d3004	 ldr         r3, [sp, #4]
  04f68	e28310d0	 add         r1, r3, #0xD0
  04f6c	e59f0588	 ldr         r0, [pc, #0x588]
  04f70	eb000000	 bl          NKDbgPrintfW
  04f74	e3a03001	 mov         r3, #1
  04f78	e58d3058	 str         r3, [sp, #0x58]
  04f7c	ea000001	 b           |$LN33@COM_Write|
  04f80		 |$LN32@COM_Write|
  04f80	e3a03000	 mov         r3, #0
  04f84	e58d3058	 str         r3, [sp, #0x58]
  04f88		 |$LN33@COM_Write|

; 1722 :     TxEnterCS(pSerialHead);

  04f88	e59d3004	 ldr         r3, [sp, #4]
  04f8c	e28300d0	 add         r0, r3, #0xD0
  04f90	eb000000	 bl          EnterCriticalSection

; 1723 :     DEBUGMSG (ZONE_WRITE, (TEXT("COM_Write got CritSec %x.\r\n"),
; 1724 :                            &(pSerialHead->TxBufferInfo.CS)));

  04f94	e59f3544	 ldr         r3, [pc, #0x544]
  04f98	e5933440	 ldr         r3, [r3, #0x440]
  04f9c	e3130008	 tst         r3, #8
  04fa0	0a000006	 beq         |$LN34@COM_Write|
  04fa4	e59d3004	 ldr         r3, [sp, #4]
  04fa8	e28310d0	 add         r1, r3, #0xD0
  04fac	e59f0544	 ldr         r0, [pc, #0x544]
  04fb0	eb000000	 bl          NKDbgPrintfW
  04fb4	e3a03001	 mov         r3, #1
  04fb8	e58d305c	 str         r3, [sp, #0x5C]
  04fbc	ea000001	 b           |$LN35@COM_Write|
  04fc0		 |$LN34@COM_Write|
  04fc0	e3a03000	 mov         r3, #0
  04fc4	e58d305c	 str         r3, [sp, #0x5C]
  04fc8		 |$LN35@COM_Write|

; 1725 : 
; 1726 :     pSerialHead->fAbortTransmit = 0;

  04fc8	e59d3004	 ldr         r3, [sp, #4]
  04fcc	e2833094	 add         r3, r3, #0x94
  04fd0	e5932000	 ldr         r2, [r3]
  04fd4	e3e03080	 mvn         r3, #0x80
  04fd8	e0022003	 and         r2, r2, r3
  04fdc	e59d3004	 ldr         r3, [sp, #4]
  04fe0	e2833094	 add         r3, r3, #0x94
  04fe4	e5832000	 str         r2, [r3]

; 1727 :     // Clear any pending event
; 1728 :     WaitForSingleObject(pSerialHead->hTransmitEvent,0);

  04fe8	e3a01000	 mov         r1, #0
  04fec	e59d3004	 ldr         r3, [sp, #4]
  04ff0	e283303c	 add         r3, r3, #0x3C
  04ff4	e5930000	 ldr         r0, [r3]
  04ff8	eb000000	 bl          WaitForSingleObject

; 1729 :     pSerialHead->TxBufferInfo.TxCharBuffer = pvMapped ;

  04ffc	e59d3004	 ldr         r3, [sp, #4]
  05000	e28320cc	 add         r2, r3, #0xCC
  05004	e59d3008	 ldr         r3, [sp, #8]
  05008	e5823000	 str         r3, [r2]

; 1730 :     pSerialHead->TxBufferInfo.Length = NumberOfBytes;

  0500c	e59d3004	 ldr         r3, [sp, #4]
  05010	e28320c8	 add         r2, r3, #0xC8
  05014	e59d30a8	 ldr         r3, [sp, #0xA8]
  05018	e5823000	 str         r3, [r2]

; 1731 :     TxRead(pSerialHead) = 0;

  0501c	e59d3004	 ldr         r3, [sp, #4]
  05020	e28320c4	 add         r2, r3, #0xC4
  05024	e3a03000	 mov         r3, #0
  05028	e5823000	 str         r3, [r2]

; 1732 :     pSerialHead->TxBytesSent = 0;

  0502c	e59d3004	 ldr         r3, [sp, #4]
  05030	e283205c	 add         r2, r3, #0x5C
  05034	e3a03000	 mov         r3, #0
  05038	e5823000	 str         r3, [r2]

; 1733 :     pSerialHead->TxBytesPending = NumberOfBytes;

  0503c	e59d3004	 ldr         r3, [sp, #4]
  05040	e2832058	 add         r2, r3, #0x58
  05044	e59d30a8	 ldr         r3, [sp, #0xA8]
  05048	e5823000	 str         r3, [r2]

; 1734 : 
; 1735 :     // Make sure an event isn't hanging around from a previous write time out.
; 1736 :     ResetEvent( pSerialHead->hTransmitEvent );

  0504c	e59d3004	 ldr         r3, [sp, #4]
  05050	e283303c	 add         r3, r3, #0x3C
  05054	e5930000	 ldr         r0, [r3]
  05058	eb000000	 bl          ResetEvent

; 1737 : 
; 1738 :     TxLeaveCS(pSerialHead);

  0505c	e59d3004	 ldr         r3, [sp, #4]
  05060	e28300d0	 add         r0, r3, #0xD0
  05064	eb000000	 bl          LeaveCriticalSection

; 1739 :     DEBUGMSG (ZONE_WRITE|ZONE_FUNCTION,
; 1740 :               (TEXT("COM_Write released CritSec: %x.\r\n"),
; 1741 :                &(pSerialHead->TxBufferInfo.CS)));

  05068	e59f3470	 ldr         r3, [pc, #0x470]
  0506c	e5933440	 ldr         r3, [r3, #0x440]
  05070	e2032008	 and         r2, r3, #8
  05074	e59f3464	 ldr         r3, [pc, #0x464]
  05078	e5933440	 ldr         r3, [r3, #0x440]
  0507c	e2033a02	 and         r3, r3, #2, 20
  05080	e1923003	 orrs        r3, r2, r3
  05084	0a000006	 beq         |$LN36@COM_Write|
  05088	e59d3004	 ldr         r3, [sp, #4]
  0508c	e28310d0	 add         r1, r3, #0xD0
  05090	e59f045c	 ldr         r0, [pc, #0x45C]
  05094	eb000000	 bl          NKDbgPrintfW
  05098	e3a03001	 mov         r3, #1
  0509c	e58d3060	 str         r3, [sp, #0x60]
  050a0	ea000001	 b           |$LN37@COM_Write|
  050a4		 |$LN36@COM_Write|
  050a4	e3a03000	 mov         r3, #0
  050a8	e58d3060	 str         r3, [sp, #0x60]
  050ac		 |$LN37@COM_Write|

; 1742 : 
; 1743 :     // We call the same write routine that a TX_INTR does.  It queus as
; 1744 :     // much data as possible, then returns.  From then on, the normal
; 1745 :     // interrupt mechanism kicks in.
; 1746 :     DoTxData( pSerialHead );

  050ac	e59d0004	 ldr         r0, [sp, #4]
  050b0	eb000000	 bl          DoTxData

; 1747 : 
; 1748 :     TotalTimeout = pSerialHead->CommTimeouts.WriteTotalTimeoutMultiplier*NumberOfBytes +
; 1749 :                    pSerialHead->CommTimeouts.WriteTotalTimeoutConstant;

  050b4	e59d3004	 ldr         r3, [sp, #4]
  050b8	e2833088	 add         r3, r3, #0x88
  050bc	e5931000	 ldr         r1, [r3]
  050c0	e59d30a8	 ldr         r3, [sp, #0xA8]
  050c4	e0020391	 mul         r2, r1, r3
  050c8	e59d3004	 ldr         r3, [sp, #4]
  050cc	e283308c	 add         r3, r3, #0x8C
  050d0	e5933000	 ldr         r3, [r3]
  050d4	e0823003	 add         r3, r2, r3
  050d8	e58d3018	 str         r3, [sp, #0x18]

; 1750 : 
; 1751 :     if ( !TotalTimeout )

  050dc	e59d3018	 ldr         r3, [sp, #0x18]
  050e0	e3530000	 cmp         r3, #0
  050e4	1a000002	 bne         |$LN8@COM_Write|

; 1752 :         Timeout = INFINITE;

  050e8	e3e03000	 mvn         r3, #0
  050ec	e58d301c	 str         r3, [sp, #0x1C]

; 1753 :     else

  050f0	ea000001	 b           |$LN7@COM_Write|
  050f4		 |$LN8@COM_Write|

; 1754 :         Timeout = TotalTimeout;

  050f4	e59d3018	 ldr         r3, [sp, #0x18]
  050f8	e58d301c	 str         r3, [sp, #0x1C]
  050fc		 |$LN7@COM_Write|

; 1755 : 
; 1756 :     DEBUGMSG (ZONE_WRITE, (TEXT("COM_Write wait for transmission complete event %x.\r\n"),
; 1757 :                            pSerialHead->hTransmitEvent));

  050fc	e59f33dc	 ldr         r3, [pc, #0x3DC]
  05100	e5933440	 ldr         r3, [r3, #0x440]
  05104	e3130008	 tst         r3, #8
  05108	0a000007	 beq         |$LN38@COM_Write|
  0510c	e59d3004	 ldr         r3, [sp, #4]
  05110	e283303c	 add         r3, r3, #0x3C
  05114	e5931000	 ldr         r1, [r3]
  05118	e59f03f0	 ldr         r0, [pc, #0x3F0]
  0511c	eb000000	 bl          NKDbgPrintfW
  05120	e3a03001	 mov         r3, #1
  05124	e58d3064	 str         r3, [sp, #0x64]
  05128	ea000001	 b           |$LN39@COM_Write|
  0512c		 |$LN38@COM_Write|
  0512c	e3a03000	 mov         r3, #0
  05130	e58d3064	 str         r3, [sp, #0x64]
  05134		 |$LN39@COM_Write|

; 1758 : 
; 1759 :     WaitReturn = WaitForSingleObject (pSerialHead->hTransmitEvent, Timeout);

  05134	e59d101c	 ldr         r1, [sp, #0x1C]
  05138	e59d3004	 ldr         r3, [sp, #4]
  0513c	e283303c	 add         r3, r3, #0x3C
  05140	e5930000	 ldr         r0, [r3]
  05144	eb000000	 bl          WaitForSingleObject
  05148	e58d0068	 str         r0, [sp, #0x68]
  0514c	e59d3068	 ldr         r3, [sp, #0x68]
  05150	e58d3024	 str         r3, [sp, #0x24]

; 1760 : 
; 1761 :     // In the absense of WaitForMultipleObjects, we use flags to
; 1762 :     // handle errors/aborts. Check for aborts or asynchronous closes.
; 1763 :     if ( pSerialHead->fAbortTransmit ) {

  05154	e59d3004	 ldr         r3, [sp, #4]
  05158	e2833094	 add         r3, r3, #0x94
  0515c	e5933000	 ldr         r3, [r3]
  05160	e3130080	 tst         r3, #0x80
  05164	0a00000b	 beq         |$LN6@COM_Write|

; 1764 :         DEBUGMSG(ZONE_USR_READ,(TEXT("COM_Write - Aborting write\r\n")));

  05168	e59f3370	 ldr         r3, [pc, #0x370]
  0516c	e5933440	 ldr         r3, [r3, #0x440]
  05170	e3130b02	 tst         r3, #2, 22
  05174	0a000004	 beq         |$LN40@COM_Write|
  05178	e59f038c	 ldr         r0, [pc, #0x38C]
  0517c	eb000000	 bl          NKDbgPrintfW
  05180	e3a03001	 mov         r3, #1
  05184	e58d306c	 str         r3, [sp, #0x6C]
  05188	ea000001	 b           |$LN41@COM_Write|
  0518c		 |$LN40@COM_Write|
  0518c	e3a03000	 mov         r3, #0
  05190	e58d306c	 str         r3, [sp, #0x6C]
  05194		 |$LN41@COM_Write|

; 1765 :         goto LEAVEWRITE;

  05194	ea000036	 b           |$LEAVEWRITE$40725|
  05198		 |$LN6@COM_Write|

; 1766 :     }
; 1767 : 
; 1768 :     if ( !pSerialHead->OpenCnt ) {

  05198	e59d3004	 ldr         r3, [sp, #4]
  0519c	e2833090	 add         r3, r3, #0x90
  051a0	e5933000	 ldr         r3, [r3]
  051a4	e3530000	 cmp         r3, #0
  051a8	1a000011	 bne         |$LN5@COM_Write|

; 1769 :         DEBUGMSG(ZONE_WRITE|ZONE_ERROR,
; 1770 :                  (TEXT("COM_Write - device was closed\n\r")));

  051ac	e59f332c	 ldr         r3, [pc, #0x32C]
  051b0	e5933440	 ldr         r3, [r3, #0x440]
  051b4	e2032008	 and         r2, r3, #8
  051b8	e59f3320	 ldr         r3, [pc, #0x320]
  051bc	e5933440	 ldr         r3, [r3, #0x440]
  051c0	e2033902	 and         r3, r3, #2, 18
  051c4	e1923003	 orrs        r3, r2, r3
  051c8	0a000004	 beq         |$LN42@COM_Write|
  051cc	e59f0334	 ldr         r0, [pc, #0x334]
  051d0	eb000000	 bl          NKDbgPrintfW
  051d4	e3a03001	 mov         r3, #1
  051d8	e58d3070	 str         r3, [sp, #0x70]
  051dc	ea000001	 b           |$LN43@COM_Write|
  051e0		 |$LN42@COM_Write|
  051e0	e3a03000	 mov         r3, #0
  051e4	e58d3070	 str         r3, [sp, #0x70]
  051e8		 |$LN43@COM_Write|

; 1771 :         SetLastError(ERROR_INVALID_HANDLE);

  051e8	e3a00006	 mov         r0, #6
  051ec	eb000000	 bl          SetLastError

; 1772 :         goto LEAVEWRITE;

  051f0	ea00001f	 b           |$LEAVEWRITE$40725|
  051f4		 |$LN5@COM_Write|

; 1773 :     }
; 1774 : 
; 1775 : #ifdef DEBUG
; 1776 :     if ( WAIT_TIMEOUT == WaitReturn ) {

  051f4	e59d2024	 ldr         r2, [sp, #0x24]
  051f8	e3a03c01	 mov         r3, #1, 24
  051fc	e3833002	 orr         r3, r3, #2
  05200	e1520003	 cmp         r2, r3
  05204	1a00000f	 bne         |$LN4@COM_Write|

; 1777 :         // Timeout
; 1778 :         DEBUGMSG (ZONE_WARN, (TEXT("Write timeout %d, %d\r\n"), NumberOfBytes, pSerialHead->TxBytesPending));

  05208	e59f32d0	 ldr         r3, [pc, #0x2D0]
  0520c	e5933440	 ldr         r3, [r3, #0x440]
  05210	e3130901	 tst         r3, #1, 18
  05214	0a000008	 beq         |$LN44@COM_Write|
  05218	e59d3004	 ldr         r3, [sp, #4]
  0521c	e2833058	 add         r3, r3, #0x58
  05220	e5932000	 ldr         r2, [r3]
  05224	e59d10a8	 ldr         r1, [sp, #0xA8]
  05228	e59f02d4	 ldr         r0, [pc, #0x2D4]
  0522c	eb000000	 bl          NKDbgPrintfW
  05230	e3a03001	 mov         r3, #1
  05234	e58d3074	 str         r3, [sp, #0x74]
  05238	ea000001	 b           |$LN45@COM_Write|
  0523c		 |$LN44@COM_Write|
  0523c	e3a03000	 mov         r3, #0
  05240	e58d3074	 str         r3, [sp, #0x74]
  05244		 |$LN45@COM_Write|

; 1779 :     } else {

  05244	ea00000a	 b           |$LN3@COM_Write|
  05248		 |$LN4@COM_Write|

; 1780 :         DEBUGMSG (ZONE_WRITE, (TEXT("COM_Write completed normally.\r\n")));

  05248	e59f3290	 ldr         r3, [pc, #0x290]
  0524c	e5933440	 ldr         r3, [r3, #0x440]
  05250	e3130008	 tst         r3, #8
  05254	0a000004	 beq         |$LN46@COM_Write|
  05258	e59f02a0	 ldr         r0, [pc, #0x2A0]
  0525c	eb000000	 bl          NKDbgPrintfW
  05260	e3a03001	 mov         r3, #1
  05264	e58d3078	 str         r3, [sp, #0x78]
  05268	ea000001	 b           |$LN47@COM_Write|
  0526c		 |$LN46@COM_Write|
  0526c	e3a03000	 mov         r3, #0
  05270	e58d3078	 str         r3, [sp, #0x78]
  05274		 |$LN47@COM_Write|
  05274		 |$LN3@COM_Write|
  05274		 |$LEAVEWRITE$40725|

; 1781 :     }
; 1782 : #endif
; 1783 : 
; 1784 :     LEAVEWRITE:
; 1785 :     // Regardless of timeout, we need to clear the TxBufferInfo
; 1786 :     // to prevent ISR from possibly coming around and trying to use
; 1787 :     // the buffer after we have returned to the caller.
; 1788 :     DEBUGMSG (ZONE_WRITE, (TEXT("COM_Write wait for CritSec %x.\r\n"),
; 1789 :                            &(pSerialHead->TxBufferInfo.CS)));

  05274	e59f3264	 ldr         r3, [pc, #0x264]
  05278	e5933440	 ldr         r3, [r3, #0x440]
  0527c	e3130008	 tst         r3, #8
  05280	0a000006	 beq         |$LN48@COM_Write|
  05284	e59d3004	 ldr         r3, [sp, #4]
  05288	e28310d0	 add         r1, r3, #0xD0
  0528c	e59f0268	 ldr         r0, [pc, #0x268]
  05290	eb000000	 bl          NKDbgPrintfW
  05294	e3a03001	 mov         r3, #1
  05298	e58d307c	 str         r3, [sp, #0x7C]
  0529c	ea000001	 b           |$LN49@COM_Write|
  052a0		 |$LN48@COM_Write|
  052a0	e3a03000	 mov         r3, #0
  052a4	e58d307c	 str         r3, [sp, #0x7C]
  052a8		 |$LN49@COM_Write|

; 1790 :     TxEnterCS(pSerialHead);

  052a8	e59d3004	 ldr         r3, [sp, #4]
  052ac	e28300d0	 add         r0, r3, #0xD0
  052b0	eb000000	 bl          EnterCriticalSection

; 1791 :     DEBUGMSG (ZONE_WRITE, (TEXT("COM_Write got CritSec %x.\r\n"),
; 1792 :                            &(pSerialHead->TxBufferInfo.CS)));

  052b4	e59f3224	 ldr         r3, [pc, #0x224]
  052b8	e5933440	 ldr         r3, [r3, #0x440]
  052bc	e3130008	 tst         r3, #8
  052c0	0a000006	 beq         |$LN50@COM_Write|
  052c4	e59d3004	 ldr         r3, [sp, #4]
  052c8	e28310d0	 add         r1, r3, #0xD0
  052cc	e59f0224	 ldr         r0, [pc, #0x224]
  052d0	eb000000	 bl          NKDbgPrintfW
  052d4	e3a03001	 mov         r3, #1
  052d8	e58d3080	 str         r3, [sp, #0x80]
  052dc	ea000001	 b           |$LN51@COM_Write|
  052e0		 |$LN50@COM_Write|
  052e0	e3a03000	 mov         r3, #0
  052e4	e58d3080	 str         r3, [sp, #0x80]
  052e8		 |$LN51@COM_Write|

; 1793 :     pSerialHead->TxBufferInfo.TxCharBuffer = NULL;

  052e8	e59d3004	 ldr         r3, [sp, #4]
  052ec	e28320cc	 add         r2, r3, #0xCC
  052f0	e3a03000	 mov         r3, #0
  052f4	e5823000	 str         r3, [r2]

; 1794 :     pSerialHead->TxBufferInfo.Length = 0;

  052f8	e59d3004	 ldr         r3, [sp, #4]
  052fc	e28320c8	 add         r2, r3, #0xC8
  05300	e3a03000	 mov         r3, #0
  05304	e5823000	 str         r3, [r2]

; 1795 :     pSerialHead->TxBytesPending = 0;

  05308	e59d3004	 ldr         r3, [sp, #4]
  0530c	e2832058	 add         r2, r3, #0x58
  05310	e3a03000	 mov         r3, #0
  05314	e5823000	 str         r3, [r2]

; 1796 :     TxRead(pSerialHead) = 0;

  05318	e59d3004	 ldr         r3, [sp, #4]
  0531c	e28320c4	 add         r2, r3, #0xC4
  05320	e3a03000	 mov         r3, #0
  05324	e5823000	 str         r3, [r2]

; 1797 :     TxLeaveCS(pSerialHead);

  05328	e59d3004	 ldr         r3, [sp, #4]
  0532c	e28300d0	 add         r0, r3, #0xD0
  05330	eb000000	 bl          LeaveCriticalSection

; 1798 :     DEBUGMSG (ZONE_WRITE|ZONE_FUNCTION,
; 1799 :               (TEXT("COM_Write released CritSec: %x.\r\n"),
; 1800 :                &(pSerialHead->TxBufferInfo.CS)));

  05334	e59f31a4	 ldr         r3, [pc, #0x1A4]
  05338	e5933440	 ldr         r3, [r3, #0x440]
  0533c	e2032008	 and         r2, r3, #8
  05340	e59f3198	 ldr         r3, [pc, #0x198]
  05344	e5933440	 ldr         r3, [r3, #0x440]
  05348	e2033a02	 and         r3, r3, #2, 20
  0534c	e1923003	 orrs        r3, r2, r3
  05350	0a000006	 beq         |$LN52@COM_Write|
  05354	e59d3004	 ldr         r3, [sp, #4]
  05358	e28310d0	 add         r1, r3, #0xD0
  0535c	e59f0190	 ldr         r0, [pc, #0x190]
  05360	eb000000	 bl          NKDbgPrintfW
  05364	e3a03001	 mov         r3, #1
  05368	e58d3084	 str         r3, [sp, #0x84]
  0536c	ea000001	 b           |$LN53@COM_Write|
  05370		 |$LN52@COM_Write|
  05370	e3a03000	 mov         r3, #0
  05374	e58d3084	 str         r3, [sp, #0x84]
  05378		 |$LN53@COM_Write|

; 1801 : 
; 1802 : 
; 1803 :     LeaveCriticalSection(&(pSerialHead->TransmitCritSec1));

  05378	e59d0004	 ldr         r0, [sp, #4]
  0537c	eb000000	 bl          LeaveCriticalSection

; 1804 :     DEBUGMSG (ZONE_WRITE|ZONE_FUNCTION,
; 1805 :               (TEXT("COM_Write released CritSec: %x. Exiting\r\n"),
; 1806 :                &(pSerialHead->TransmitCritSec1)));

  05380	e59f3158	 ldr         r3, [pc, #0x158]
  05384	e5933440	 ldr         r3, [r3, #0x440]
  05388	e2032008	 and         r2, r3, #8
  0538c	e59f314c	 ldr         r3, [pc, #0x14C]
  05390	e5933440	 ldr         r3, [r3, #0x440]
  05394	e2033a02	 and         r3, r3, #2, 20
  05398	e1923003	 orrs        r3, r2, r3
  0539c	0a000005	 beq         |$LN54@COM_Write|
  053a0	e59d1004	 ldr         r1, [sp, #4]
  053a4	e59f0144	 ldr         r0, [pc, #0x144]
  053a8	eb000000	 bl          NKDbgPrintfW
  053ac	e3a03001	 mov         r3, #1
  053b0	e58d3088	 str         r3, [sp, #0x88]
  053b4	ea000001	 b           |$LN55@COM_Write|
  053b8		 |$LN54@COM_Write|
  053b8	e3a03000	 mov         r3, #0
  053bc	e58d3088	 str         r3, [sp, #0x88]
  053c0		 |$LN55@COM_Write|

; 1807 : 
; 1808 :     /* OK, the Transmitter has gone empty.
; 1809 :      */
; 1810 :     EvaluateEventFlag(pSerialHead, EV_TXEMPTY);

  053c0	e3a01004	 mov         r1, #4
  053c4	e59d0004	 ldr         r0, [sp, #4]
  053c8	eb000000	 bl          EvaluateEventFlag

; 1811 : 
; 1812 :     if ( pSerialHead->DCB.fRtsControl == RTS_CONTROL_TOGGLE ) {

  053cc	e59d3004	 ldr         r3, [sp, #4]
  053d0	e2833068	 add         r3, r3, #0x68
  053d4	e5933000	 ldr         r3, [r3]
  053d8	e1a03903	 mov         r3, r3, lsl #18
  053dc	e1a03f23	 mov         r3, r3, lsr #30
  053e0	e3530003	 cmp         r3, #3
  053e4	1a000005	 bne         |$LN2@COM_Write|

; 1813 :         pFuncTbl->HWClearRTS(pHWHead);

  053e8	e59d0028	 ldr         r0, [sp, #0x28]
  053ec	e59d3010	 ldr         r3, [sp, #0x10]
  053f0	e283303c	 add         r3, r3, #0x3C
  053f4	e5933000	 ldr         r3, [r3]
  053f8	e1a0e00f	 mov         lr, pc
  053fc	e12fff13	 bx          r3
  05400		 |$LN2@COM_Write|

; 1814 :     }
; 1815 : 
; 1816 :     COM_DEC_USAGE_CNT(pOpenHead);

  05400	e59d3014	 ldr         r3, [sp, #0x14]
  05404	e283000c	 add         r0, r3, #0xC
  05408	eb000000	 bl          InterlockedDecrement

; 1817 :     if (pvMapped) {

  0540c	e59d3008	 ldr         r3, [sp, #8]
  05410	e3530000	 cmp         r3, #0
  05414	0a000016	 beq         |$LN1@COM_Write|

; 1818 :         HRESULT hResult= CeFreeAsynchronousBuffer(pvMapped,pSourceBytes,NumberOfBytes,ARG_I_PTR) ;

  05418	e3a03004	 mov         r3, #4
  0541c	e59d20a8	 ldr         r2, [sp, #0xA8]
  05420	e59d10a4	 ldr         r1, [sp, #0xA4]
  05424	e59d0008	 ldr         r0, [sp, #8]
  05428	eb000000	 bl          CeFreeAsynchronousBuffer
  0542c	e58d008c	 str         r0, [sp, #0x8C]
  05430	e59d308c	 ldr         r3, [sp, #0x8C]
  05434	e58d302c	 str         r3, [sp, #0x2C]

; 1819 :         ASSERT(SUCCEEDED(hResult));

  05438	e59d302c	 ldr         r3, [sp, #0x2C]
  0543c	e3530000	 cmp         r3, #0
  05440	ba000002	 blt         |$LN56@COM_Write|
  05444	e3a03001	 mov         r3, #1
  05448	e58d3090	 str         r3, [sp, #0x90]
  0544c	ea000008	 b           |$LN57@COM_Write|
  05450		 |$LN56@COM_Write|
  05450	e3a03c07	 mov         r3, #7, 24
  05454	e383301b	 orr         r3, r3, #0x1B
  05458	e59f208c	 ldr         r2, [pc, #0x8C]
  0545c	e59f1084	 ldr         r1, [pc, #0x84]
  05460	e59f007c	 ldr         r0, [pc, #0x7C]
  05464	eb000000	 bl          NKDbgPrintfW
  05468	e6000010	 __debugbreak_ce
  0546c	e3a03000	 mov         r3, #0
  05470	e58d3090	 str         r3, [sp, #0x90]
  05474		 |$LN57@COM_Write|
  05474		 |$LN1@COM_Write|

; 1820 :     }
; 1821 :     DEBUGMSG (ZONE_WRITE|ZONE_FUNCTION,
; 1822 :               (TEXT("-COM_WRITE, returning %d\n\r"),pSerialHead->TxBytesSent));

  05474	e59f3064	 ldr         r3, [pc, #0x64]
  05478	e5933440	 ldr         r3, [r3, #0x440]
  0547c	e2032008	 and         r2, r3, #8
  05480	e59f3058	 ldr         r3, [pc, #0x58]
  05484	e5933440	 ldr         r3, [r3, #0x440]
  05488	e2033a02	 and         r3, r3, #2, 20
  0548c	e1923003	 orrs        r3, r2, r3
  05490	0a000007	 beq         |$LN58@COM_Write|
  05494	e59d3004	 ldr         r3, [sp, #4]
  05498	e283305c	 add         r3, r3, #0x5C
  0549c	e5931000	 ldr         r1, [r3]
  054a0	e59f0034	 ldr         r0, [pc, #0x34]
  054a4	eb000000	 bl          NKDbgPrintfW
  054a8	e3a03001	 mov         r3, #1
  054ac	e58d3094	 str         r3, [sp, #0x94]
  054b0	ea000001	 b           |$LN59@COM_Write|
  054b4		 |$LN58@COM_Write|
  054b4	e3a03000	 mov         r3, #0
  054b8	e58d3094	 str         r3, [sp, #0x94]
  054bc		 |$LN59@COM_Write|

; 1823 :     return(pSerialHead->TxBytesSent);

  054bc	e59d3004	 ldr         r3, [sp, #4]
  054c0	e283305c	 add         r3, r3, #0x5C
  054c4	e5933000	 ldr         r3, [r3]
  054c8	e58d3030	 str         r3, [sp, #0x30]
  054cc		 |$LN16@COM_Write|

; 1824 : }

  054cc	e59d0030	 ldr         r0, [sp, #0x30]
  054d0	e28dd098	 add         sp, sp, #0x98
  054d4	e89d6000	 ldmia       sp, {sp, lr}
  054d8	e12fff1e	 bx          lr
  054dc		 |$LN63@COM_Write|
  054dc		 |$LN64@COM_Write|
  054dc	00000000	 DCD         |??_C@_1DG@PKENKCNO@?$AA?9?$AAC?$AAO?$AAM?$AA_?$AAW?$AAR?$AAI?$AAT?$AAE?$AA?0?$AA?5?$AAr?$AAe?$AAt?$AAu?$AAr?$AAn?$AAi?$AAn?$AAg?$AA?5?$AA?$CF?$AAd?$AA?6?$AA?$AN?$AA?$AA@|
  054e0		 |$LN65@COM_Write|
  054e0	00000000	 DCD         |dpCurSettings|
  054e4		 |$LN66@COM_Write|
  054e4	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  054e8		 |$LN67@COM_Write|
  054e8	00000000	 DCD         |??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@|
  054ec		 |$LN68@COM_Write|
  054ec	00000000	 DCD         |??_C@_1KG@HJMEIMAA@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  054f0		 |$LN69@COM_Write|
  054f0	00000000	 DCD         |??_C@_1FE@LGJDMHNB@?$AAC?$AAO?$AAM?$AA_?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?5?$AAr?$AAe?$AAl?$AAe?$AAa?$AAs?$AAe?$AAd?$AA?5?$AAC?$AAr?$AAi?$AAt?$AAS?$AAe?$AAc?$AA?3?$AA?5?$AA?$CF?$AAx?$AA?4?$AA?5@|
  054f4		 |$LN70@COM_Write|
  054f4	00000000	 DCD         |??_C@_1EE@GAMOAJJK@?$AAC?$AAO?$AAM?$AA_?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?5?$AAr?$AAe?$AAl?$AAe?$AAa?$AAs?$AAe?$AAd?$AA?5?$AAC?$AAr?$AAi?$AAt?$AAS?$AAe?$AAc?$AA?3?$AA?5?$AA?$CF?$AAx?$AA?4?$AA?$AN@|
  054f8		 |$LN71@COM_Write|
  054f8	00000000	 DCD         |??_C@_1DI@DJLNOFJH@?$AAC?$AAO?$AAM?$AA_?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?5?$AAg?$AAo?$AAt?$AA?5?$AAC?$AAr?$AAi?$AAt?$AAS?$AAe?$AAc?$AA?5?$AA?$CF?$AAx?$AA?4?$AA?$AN?$AA?6?$AA?$AA@|
  054fc		 |$LN72@COM_Write|
  054fc	00000000	 DCD         |??_C@_1EC@FLKHHNEC@?$AAC?$AAO?$AAM?$AA_?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?5?$AAw?$AAa?$AAi?$AAt?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAC?$AAr?$AAi?$AAt?$AAS?$AAe?$AAc?$AA?5?$AA?$CF?$AAx?$AA?4?$AA?$AN?$AA?6@|
  05500		 |$LN73@COM_Write|
  05500	00000000	 DCD         |??_C@_1EA@JFKAOONE@?$AAC?$AAO?$AAM?$AA_?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAe?$AAd?$AA?5?$AAn?$AAo?$AAr?$AAm?$AAa?$AAl?$AAl?$AAy?$AA?4?$AA?$AN?$AA?6?$AA?$AA@|
  05504		 |$LN74@COM_Write|
  05504	00000000	 DCD         |??_C@_1CO@GMIGOOP@?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  05508		 |$LN75@COM_Write|
  05508	00000000	 DCD         |??_C@_1EA@JJCCGAEK@?$AAC?$AAO?$AAM?$AA_?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?5?$AA?9?$AA?5?$AAd?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAw?$AAa?$AAs?$AA?5?$AAc?$AAl?$AAo?$AAs?$AAe?$AAd?$AA?6?$AA?$AN?$AA?$AA@|
  0550c		 |$LN76@COM_Write|
  0550c	00000000	 DCD         |??_C@_1DK@IBJJCGOP@?$AAC?$AAO?$AAM?$AA_?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?5?$AA?9?$AA?5?$AAA?$AAb?$AAo?$AAr?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAw?$AAr?$AAi?$AAt?$AAe?$AA?$AN?$AA?6?$AA?$AA@|
  05510		 |$LN77@COM_Write|
  05510	00000000	 DCD         |??_C@_1GK@PCKMKKFI@?$AAC?$AAO?$AAM?$AA_?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?5?$AAw?$AAa?$AAi?$AAt?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAt?$AAr?$AAa?$AAn?$AAs?$AAm?$AAi?$AAs?$AAs?$AAi?$AAo?$AAn?$AA?5@|
  05514		 |$LN78@COM_Write|
  05514	00000000	 DCD         |??_C@_1DI@CAEOCHGO@?$AAC?$AAO?$AAM?$AA_?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?5?$AAG?$AAo?$AAt?$AA?5?$AAC?$AAr?$AAi?$AAt?$AAS?$AAe?$AAc?$AA?5?$AA?$CF?$AAx?$AA?4?$AA?$AN?$AA?6?$AA?$AA@|
  05518		 |$LN79@COM_Write|
  05518	00000000	 DCD         |??_C@_1GC@BNCJFOA@?$AAC?$AAO?$AAM?$AA_?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?5?$AAC?$AAe?$AAA?$AAl?$AAl?$AAo?$AAc?$AAA?$AAs?$AAy?$AAn?$AAc?$AAh?$AAr?$AAo?$AAn?$AAo?$AAu?$AAs?$AAB?$AAu?$AAf@|
  0551c		 |$LN80@COM_Write|
  0551c	00000000	 DCD         |??_C@_1GA@CAKHMJEI@?$AAC?$AAO?$AAM?$AA_?$AAW?$AAR?$AAI?$AAT?$AAE?$AA?0?$AA?5?$AAb?$AAa?$AAd?$AA?5?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$CI?$AA0?$AAx?$AA?$CF?$AAx?$AA?$CJ?$AA?5?$AAo?$AAr@|
  05520		 |$LN81@COM_Write|
  05520	00000000	 DCD         |??_C@_1FG@IAEGGCHL@?$AAC?$AAO?$AAM?$AA_?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAA?$AAc?$AAc?$AAe?$AAs?$AAs?$AA?5?$AAp?$AAe?$AAr?$AAm?$AAi?$AAs?$AAs?$AAi?$AAo?$AAn?$AA?5?$AAf?$AAa?$AAi@|
  05524		 |$LN82@COM_Write|
  05524	00000000	 DCD         |??_C@_1DK@PMCNIBAH@?$AAC?$AAO?$AAM?$AA_?$AAW?$AAR?$AAI?$AAT?$AAE?$AA?0?$AA?5?$AAd?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?$AN?$AA?6?$AA?$AA@|
  05528		 |$LN83@COM_Write|
  05528	00000000	 DCD         |??_C@_1DK@NPDDAOLJ@?$AA?$CL?$AAC?$AAO?$AAM?$AA_?$AAW?$AAR?$AAI?$AAT?$AAE?$AA?$CI?$AA0?$AAx?$AA?$CF?$AAX?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AAX?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  0552c		 |$M41937|

			 ENDP  ; |COM_Write|

; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T41966| DCD	|$LN5@ResetEvent|
	DCD	0x40000e04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |ResetEvent| PROC

; 223  : _inline BOOL ResetEvent(HANDLE h) {

  00000		 |$LN5@ResetEvent|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd008	 sub         sp, sp, #8
  00010		 |$M41963|

; 224  : 	return EventModify(h,EVENT_RESET);

  00010	e3a01002	 mov         r1, #2
  00014	e59d0010	 ldr         r0, [sp, #0x10]
  00018	eb000000	 bl          EventModify
  0001c	e58d0004	 str         r0, [sp, #4]
  00020	e59d3004	 ldr         r3, [sp, #4]
  00024	e58d3000	 str         r3, [sp]

; 225  : }

  00028	e59d0000	 ldr         r0, [sp]
  0002c	e28dd008	 add         sp, sp, #8
  00030	e89d6000	 ldmia       sp, {sp, lr}
  00034	e12fff1e	 bx          lr
  00038		 |$M41964|

			 ENDP  ; |ResetEvent|

	EXPORT	|COM_Seek|

  00080			 AREA	 |.pdata|, PDATA
|$T41974| DCD	|$LN5@COM_Seek|
	DCD	0x40000a04
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\serial\com_mdd2\mdd.c

  0552c			 AREA	 |.text|, CODE, ARM

  0552c		 |COM_Seek| PROC

; 1832 : {

  0552c		 |$LN5@COM_Seek|
  0552c	e1a0c00d	 mov         r12, sp
  05530	e92d0007	 stmdb       sp!, {r0 - r2}
  05534	e92d5000	 stmdb       sp!, {r12, lr}
  05538	e24dd004	 sub         sp, sp, #4
  0553c		 |$M41971|

; 1833 :     return(ULONG)-1;

  0553c	e3e03000	 mvn         r3, #0
  05540	e58d3000	 str         r3, [sp]

; 1834 : }

  05544	e59d0000	 ldr         r0, [sp]
  05548	e28dd004	 add         sp, sp, #4
  0554c	e89d6000	 ldmia       sp, {sp, lr}
  05550	e12fff1e	 bx          lr
  05554		 |$M41972|

			 ENDP  ; |COM_Seek|

	EXPORT	|COM_PowerUp|

  00088			 AREA	 |.pdata|, PDATA
|$T41980| DCD	|$LN7@COM_PowerU|
	DCD	0x40002404
; Function compile flags: /Odtp

  05554			 AREA	 |.text|, CODE, ARM

  05554		 |COM_PowerUp| PROC

; 1846 : {

  05554		 |$LN7@COM_PowerU|
  05554	e1a0c00d	 mov         r12, sp
  05558	e92d0001	 stmdb       sp!, {r0}
  0555c	e92d5000	 stmdb       sp!, {r12, lr}
  05560	e24dd010	 sub         sp, sp, #0x10
  05564		 |$M41977|

; 1847 :     PHW_INDEP_INFO  pHWIHead    = (PHW_INDEP_INFO)pHead;

  05564	e59d3018	 ldr         r3, [sp, #0x18]
  05568	e58d3004	 str         r3, [sp, #4]

; 1848 :     PHWOBJ          pHWObj;
; 1849 : 
; 1850 :     if (pHWIHead) {

  0556c	e59d3004	 ldr         r3, [sp, #4]
  05570	e3530000	 cmp         r3, #0
  05574	0a000014	 beq         |$LN2@COM_PowerU|

; 1851 :         pHWObj = (PHWOBJ)pHWIHead->pHWObj;

  05578	e59d3004	 ldr         r3, [sp, #4]
  0557c	e2833028	 add         r3, r3, #0x28
  05580	e5933000	 ldr         r3, [r3]
  05584	e58d3000	 str         r3, [sp]

; 1852 :         if (pHWObj)

  05588	e59d3000	 ldr         r3, [sp]
  0558c	e3530000	 cmp         r3, #0
  05590	0a00000d	 beq         |$LN1@COM_PowerU|

; 1853 :             return(pHWObj->pFuncTbl->HWPowerOn(pHWIHead->pHWHead));

  05594	e59d3004	 ldr         r3, [sp, #4]
  05598	e283302c	 add         r3, r3, #0x2C
  0559c	e5930000	 ldr         r0, [r3]
  055a0	e59d3000	 ldr         r3, [sp]
  055a4	e2833008	 add         r3, r3, #8
  055a8	e5933000	 ldr         r3, [r3]
  055ac	e2833030	 add         r3, r3, #0x30
  055b0	e5933000	 ldr         r3, [r3]
  055b4	e1a0e00f	 mov         lr, pc
  055b8	e12fff13	 bx          r3
  055bc	e58d000c	 str         r0, [sp, #0xC]
  055c0	e59d300c	 ldr         r3, [sp, #0xC]
  055c4	e58d3008	 str         r3, [sp, #8]
  055c8	ea000001	 b           |$LN3@COM_PowerU|
  055cc		 |$LN1@COM_PowerU|
  055cc		 |$LN2@COM_PowerU|

; 1854 :     }
; 1855 :     return FALSE;

  055cc	e3a03000	 mov         r3, #0
  055d0	e58d3008	 str         r3, [sp, #8]
  055d4		 |$LN3@COM_PowerU|

; 1856 : }

  055d4	e59d0008	 ldr         r0, [sp, #8]
  055d8	e28dd010	 add         sp, sp, #0x10
  055dc	e89d6000	 ldmia       sp, {sp, lr}
  055e0	e12fff1e	 bx          lr
  055e4		 |$M41978|

			 ENDP  ; |COM_PowerUp|

	EXPORT	|COM_PowerDown|

  00090			 AREA	 |.pdata|, PDATA
|$T41986| DCD	|$LN7@COM_PowerD|
	DCD	0x40002404
; Function compile flags: /Odtp

  055e4			 AREA	 |.text|, CODE, ARM

  055e4		 |COM_PowerDown| PROC

; 1868 : {

  055e4		 |$LN7@COM_PowerD|
  055e4	e1a0c00d	 mov         r12, sp
  055e8	e92d0001	 stmdb       sp!, {r0}
  055ec	e92d5000	 stmdb       sp!, {r12, lr}
  055f0	e24dd010	 sub         sp, sp, #0x10
  055f4		 |$M41983|

; 1869 :     PHW_INDEP_INFO          pHWIHead    = (PHW_INDEP_INFO)pHead;

  055f4	e59d3018	 ldr         r3, [sp, #0x18]
  055f8	e58d3000	 str         r3, [sp]

; 1870 : 
; 1871 :     if ( pHWIHead ) {

  055fc	e59d3000	 ldr         r3, [sp]
  05600	e3530000	 cmp         r3, #0
  05604	0a000014	 beq         |$LN2@COM_PowerD|

; 1872 :         PHWOBJ  pHWObj = (PHWOBJ)pHWIHead->pHWObj;

  05608	e59d3000	 ldr         r3, [sp]
  0560c	e2833028	 add         r3, r3, #0x28
  05610	e5933000	 ldr         r3, [r3]
  05614	e58d3004	 str         r3, [sp, #4]

; 1873 :         if ( pHWObj)

  05618	e59d3004	 ldr         r3, [sp, #4]
  0561c	e3530000	 cmp         r3, #0
  05620	0a00000d	 beq         |$LN1@COM_PowerD|

; 1874 :             return(pHWObj->pFuncTbl->HWPowerOff(pHWIHead->pHWHead));

  05624	e59d3000	 ldr         r3, [sp]
  05628	e283302c	 add         r3, r3, #0x2C
  0562c	e5930000	 ldr         r0, [r3]
  05630	e59d3004	 ldr         r3, [sp, #4]
  05634	e2833008	 add         r3, r3, #8
  05638	e5933000	 ldr         r3, [r3]
  0563c	e283302c	 add         r3, r3, #0x2C
  05640	e5933000	 ldr         r3, [r3]
  05644	e1a0e00f	 mov         lr, pc
  05648	e12fff13	 bx          r3
  0564c	e58d000c	 str         r0, [sp, #0xC]
  05650	e59d300c	 ldr         r3, [sp, #0xC]
  05654	e58d3008	 str         r3, [sp, #8]
  05658	ea000001	 b           |$LN3@COM_PowerD|
  0565c		 |$LN1@COM_PowerD|
  0565c		 |$LN2@COM_PowerD|

; 1875 :     }
; 1876 :     return FALSE;

  0565c	e3a03000	 mov         r3, #0
  05660	e58d3008	 str         r3, [sp, #8]
  05664		 |$LN3@COM_PowerD|

; 1877 : }

  05664	e59d0008	 ldr         r0, [sp, #8]
  05668	e28dd010	 add         sp, sp, #0x10
  0566c	e89d6000	 ldmia       sp, {sp, lr}
  05670	e12fff1e	 bx          lr
  05674		 |$M41984|

			 ENDP  ; |COM_PowerDown|

	EXPORT	|SerialGetDroppedByteNumber|

  00098			 AREA	 |.pdata|, PDATA
|$T41992| DCD	|$LN6@SerialGetD|
	DCD	0x40001804
; Function compile flags: /Odtp

  05674			 AREA	 |.text|, CODE, ARM

  05674		 |SerialGetDroppedByteNumber| PROC

; 1891 : {

  05674		 |$LN6@SerialGetD|
  05674	e1a0c00d	 mov         r12, sp
  05678	e92d0001	 stmdb       sp!, {r0}
  0567c	e92d5000	 stmdb       sp!, {r12, lr}
  05680	e24dd008	 sub         sp, sp, #8
  05684		 |$M41989|

; 1892 :     PHW_INDEP_INFO          pHWIHead    = (PHW_INDEP_INFO)pHead;

  05684	e59d3010	 ldr         r3, [sp, #0x10]
  05688	e58d3000	 str         r3, [sp]

; 1893 : 
; 1894 :     if ( !pHWIHead ) {

  0568c	e59d3000	 ldr         r3, [sp]
  05690	e3530000	 cmp         r3, #0
  05694	1a000002	 bne         |$LN1@SerialGetD|

; 1895 :         return(0);

  05698	e3a03000	 mov         r3, #0
  0569c	e58d3004	 str         r3, [sp, #4]
  056a0	ea000007	 b           |$LN2@SerialGetD|
  056a4		 |$LN1@SerialGetD|

; 1896 :     }
; 1897 : 
; 1898 :     return(pHWIHead->DroppedBytesMDD+pHWIHead->DroppedBytesPDD);

  056a4	e59d3000	 ldr         r3, [sp]
  056a8	e2832048	 add         r2, r3, #0x48
  056ac	e59d3000	 ldr         r3, [sp]
  056b0	e283304c	 add         r3, r3, #0x4C
  056b4	e5922000	 ldr         r2, [r2]
  056b8	e5933000	 ldr         r3, [r3]
  056bc	e0823003	 add         r3, r2, r3
  056c0	e58d3004	 str         r3, [sp, #4]
  056c4		 |$LN2@SerialGetD|

; 1899 : }

  056c4	e59d0004	 ldr         r0, [sp, #4]
  056c8	e28dd008	 add         sp, sp, #8
  056cc	e89d6000	 ldmia       sp, {sp, lr}
  056d0	e12fff1e	 bx          lr
  056d4		 |$M41990|

			 ENDP  ; |SerialGetDroppedByteNumber|

	EXPORT	|??_C@_1EO@HJMBEPIE@?$AA?9?$AAW?$AAa?$AAi?$AAt?$AAC?$AAo?$AAm?$AAm?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?5?$AA?9?$AA?5?$AA?$CK?$AAp?$AAf?$AAd?$AAw?$AAE?$AAv?$AAe?$AAn?$AAt?$AAM?$AAa?$AAs?$AAk?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EK@BIALANPL@?$AA?9?$AAW?$AAa?$AAi?$AAt?$AAC?$AAo?$AAm?$AAm?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?5?$AA?9?$AA?5?$AAd?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAw?$AAa?$AAs?$AA?5?$AAc?$AAl?$AAo?$AAs@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EI@FGBADKHH@?$AA?5?$AAW?$AAa?$AAi?$AAt?$AAC?$AAo?$AAm?$AAm?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?5?$AA?9?$AA?5?$AAM?$AAa?$AAs?$AAk?$AA?5?$AAw?$AAa?$AAs?$AA?5?$AAc?$AAl?$AAe?$AAa?$AAr?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GI@MFJIILJA@?$AA?5?$AAW?$AAa?$AAi?$AAt?$AAC?$AAo?$AAm?$AAm?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?5?$AA?9?$AA?5?$AAE?$AAv?$AAe?$AAn?$AAt?$AAs?$AA?5?$AA0?$AAx?$AA?$CF?$AAX?$AA?0?$AA?5?$AAM?$AAa@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EM@NBPFGEAJ@?$AA?9?$AAW?$AAa?$AAi?$AAt?$AAC?$AAo?$AAm?$AAm?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?5?$AA?9?$AA?5?$AAM?$AAa?$AAs?$AAk?$AA?5?$AAa?$AAl?$AAr?$AAe?$AAa?$AAd?$AAy?$AA?5?$AAc?$AAl@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FM@MENBDCNM@?$AA?9?$AAW?$AAa?$AAi?$AAt?$AAC?$AAo?$AAm?$AAm?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?5?$AA?9?$AA?5?$AAd?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAo?$AAp?$AAe?$AAn@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EI@CENKJDJK@?$AA?$CL?$AAW?$AAa?$AAi?$AAt?$AAC?$AAo?$AAm?$AAm?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?5?$AAx?$AA?$CF?$AAX?$AA?5?$AAx?$AA?$CF?$AAX?$AA?0?$AA?5?$AAp?$AAM?$AAa?$AAs?$AAk?$AA?5?$AAx?$AA?$CF@| [ DATA ] ; `string'
	EXPORT	|WaitCommEvent_mdd|
	IMPORT	|InterlockedExchange|
	IMPORT	|__C_specific_handler|

  000a0			 AREA	 |.pdata|, PDATA
|$T42025| DCD	|$LN42@WaitCommEv|
	DCD	0xc000fa05
|$T42027| DCD	|$LN32@WaitCommEv|
	DCD	0x40000b01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EO@HJMBEPIE@?$AA?9?$AAW?$AAa?$AAi?$AAt?$AAC?$AAo?$AAm?$AAm?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?5?$AA?9?$AA?5?$AA?$CK?$AAp?$AAf?$AAd?$AAw?$AAE?$AAv?$AAe?$AAn?$AAt?$AAM?$AAa?$AAs?$AAk?$AA?5@| DCB "-"
	DCB	0x0, "W", 0x0, "a", 0x0, "i", 0x0, "t", 0x0, "C", 0x0, "o"
	DCB	0x0, "m", 0x0, "m", 0x0, "E", 0x0, "v", 0x0, "e", 0x0, "n"
	DCB	0x0, "t", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "*", 0x0, "p"
	DCB	0x0, "f", 0x0, "d", 0x0, "w", 0x0, "E", 0x0, "v", 0x0, "e"
	DCB	0x0, "n", 0x0, "t", 0x0, "M", 0x0, "a", 0x0, "s", 0x0, "k"
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "X", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EK@BIALANPL@?$AA?9?$AAW?$AAa?$AAi?$AAt?$AAC?$AAo?$AAm?$AAm?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?5?$AA?9?$AA?5?$AAd?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAw?$AAa?$AAs?$AA?5?$AAc?$AAl?$AAo?$AAs@| DCB "-"
	DCB	0x0, "W", 0x0, "a", 0x0, "i", 0x0, "t", 0x0, "C", 0x0, "o"
	DCB	0x0, "m", 0x0, "m", 0x0, "E", 0x0, "v", 0x0, "e", 0x0, "n"
	DCB	0x0, "t", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "d", 0x0, "e"
	DCB	0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, " ", 0x0, "w"
	DCB	0x0, "a", 0x0, "s", 0x0, " ", 0x0, "c", 0x0, "l", 0x0, "o"
	DCB	0x0, "s", 0x0, "e", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EI@FGBADKHH@?$AA?5?$AAW?$AAa?$AAi?$AAt?$AAC?$AAo?$AAm?$AAm?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?5?$AA?9?$AA?5?$AAM?$AAa?$AAs?$AAk?$AA?5?$AAw?$AAa?$AAs?$AA?5?$AAc?$AAl?$AAe?$AAa?$AAr?$AAe@| DCB " "
	DCB	0x0, "W", 0x0, "a", 0x0, "i", 0x0, "t", 0x0, "C", 0x0, "o"
	DCB	0x0, "m", 0x0, "m", 0x0, "E", 0x0, "v", 0x0, "e", 0x0, "n"
	DCB	0x0, "t", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "M", 0x0, "a"
	DCB	0x0, "s", 0x0, "k", 0x0, " ", 0x0, "w", 0x0, "a", 0x0, "s"
	DCB	0x0, " ", 0x0, "c", 0x0, "l", 0x0, "e", 0x0, "a", 0x0, "r"
	DCB	0x0, "e", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GI@MFJIILJA@?$AA?5?$AAW?$AAa?$AAi?$AAt?$AAC?$AAo?$AAm?$AAm?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?5?$AA?9?$AA?5?$AAE?$AAv?$AAe?$AAn?$AAt?$AAs?$AA?5?$AA0?$AAx?$AA?$CF?$AAX?$AA?0?$AA?5?$AAM?$AAa@| DCB " "
	DCB	0x0, "W", 0x0, "a", 0x0, "i", 0x0, "t", 0x0, "C", 0x0, "o"
	DCB	0x0, "m", 0x0, "m", 0x0, "E", 0x0, "v", 0x0, "e", 0x0, "n"
	DCB	0x0, "t", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "E", 0x0, "v"
	DCB	0x0, "e", 0x0, "n", 0x0, "t", 0x0, "s", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "X", 0x0, ",", 0x0, " ", 0x0, "M"
	DCB	0x0, "a", 0x0, "s", 0x0, "k", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "X", 0x0, ",", 0x0, " ", 0x0, "A", 0x0, "b"
	DCB	0x0, "o", 0x0, "r", 0x0, "t", 0x0, " ", 0x0, "%", 0x0, "X"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EM@NBPFGEAJ@?$AA?9?$AAW?$AAa?$AAi?$AAt?$AAC?$AAo?$AAm?$AAm?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?5?$AA?9?$AA?5?$AAM?$AAa?$AAs?$AAk?$AA?5?$AAa?$AAl?$AAr?$AAe?$AAa?$AAd?$AAy?$AA?5?$AAc?$AAl@| DCB "-"
	DCB	0x0, "W", 0x0, "a", 0x0, "i", 0x0, "t", 0x0, "C", 0x0, "o"
	DCB	0x0, "m", 0x0, "m", 0x0, "E", 0x0, "v", 0x0, "e", 0x0, "n"
	DCB	0x0, "t", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "M", 0x0, "a"
	DCB	0x0, "s", 0x0, "k", 0x0, " ", 0x0, "a", 0x0, "l", 0x0, "r"
	DCB	0x0, "e", 0x0, "a", 0x0, "d", 0x0, "y", 0x0, " ", 0x0, "c"
	DCB	0x0, "l", 0x0, "e", 0x0, "a", 0x0, "r", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FM@MENBDCNM@?$AA?9?$AAW?$AAa?$AAi?$AAt?$AAC?$AAo?$AAm?$AAm?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?5?$AA?9?$AA?5?$AAd?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAo?$AAp?$AAe?$AAn@| DCB "-"
	DCB	0x0, "W", 0x0, "a", 0x0, "i", 0x0, "t", 0x0, "C", 0x0, "o"
	DCB	0x0, "m", 0x0, "m", 0x0, "E", 0x0, "v", 0x0, "e", 0x0, "n"
	DCB	0x0, "t", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "d", 0x0, "e"
	DCB	0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, " ", 0x0, "n"
	DCB	0x0, "o", 0x0, "t", 0x0, " ", 0x0, "o", 0x0, "p", 0x0, "e"
	DCB	0x0, "n", 0x0, " ", 0x0, "(", 0x0, "x", 0x0, "%", 0x0, "X"
	DCB	0x0, ",", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, " "
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EI@CENKJDJK@?$AA?$CL?$AAW?$AAa?$AAi?$AAt?$AAC?$AAo?$AAm?$AAm?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?5?$AAx?$AA?$CF?$AAX?$AA?5?$AAx?$AA?$CF?$AAX?$AA?0?$AA?5?$AAp?$AAM?$AAa?$AAs?$AAk?$AA?5?$AAx?$AA?$CF@| DCB "+"
	DCB	0x0, "W", 0x0, "a", 0x0, "i", 0x0, "t", 0x0, "C", 0x0, "o"
	DCB	0x0, "m", 0x0, "m", 0x0, "E", 0x0, "v", 0x0, "e", 0x0, "n"
	DCB	0x0, "t", 0x0, " ", 0x0, "x", 0x0, "%", 0x0, "X", 0x0, " "
	DCB	0x0, "x", 0x0, "%", 0x0, "X", 0x0, ",", 0x0, " ", 0x0, "p"
	DCB	0x0, "M", 0x0, "a", 0x0, "s", 0x0, "k", 0x0, " ", 0x0, "x"
	DCB	0x0, "%", 0x0, "X", 0x0, 0xa, 0x0, 0xd, 0x0, 0x0, 0x0 ; `string'

  00004			 AREA	 |.xdata|, DATA
|$T42023| DCD	0x1
	DCD	|$LN36@WaitCommEv|
	DCD	|$LN37@WaitCommEv|
	DCD	|$LN32@WaitCommEv|
	DCD	|$LN33@WaitCommEv|
; Function compile flags: /Odtp

  056d4			 AREA	 |.text|, CODE, ARM

  056d4	00000000	 DCD         |__C_specific_handler|
  056d8	00000000	 DCD         |$T42023|

  056dc		 |WaitCommEvent_mdd| PROC

; 1913 : {

  056dc		 |$LN42@WaitCommEv|
  056dc	e1a0c00d	 mov         r12, sp
  056e0	e92d0007	 stmdb       sp!, {r0 - r2}
  056e4	e92d5800	 stmdb       sp!, {r11, r12, lr}
  056e8	e28db00c	 add         r11, sp, #0xC
  056ec	e24dd030	 sub         sp, sp, #0x30
  056f0		 |$LN40@WaitCommEv|

; 1914 :     PHW_INDEP_INFO  pHWIHead = pOpenHead->pSerialHead;

  056f0	e59b3000	 ldr         r3, [r11]
  056f4	e5933000	 ldr         r3, [r3]
  056f8	e50b3038	 str         r3, [r11, #-0x38]

; 1915 :     DWORD           dwEventData;
; 1916 : 
; 1917 :     DEBUGMSG(ZONE_FUNCTION|ZONE_EVENTS,(TEXT("+WaitCommEvent x%X x%X, pMask x%X\n\r"),
; 1918 :                                         pOpenHead, pHWIHead , pfdwEventMask));

  056fc	e59f33d0	 ldr         r3, [pc, #0x3D0]
  05700	e5933440	 ldr         r3, [r3, #0x440]
  05704	e2032a02	 and         r2, r3, #2, 20
  05708	e59f33c4	 ldr         r3, [pc, #0x3C4]
  0570c	e5933440	 ldr         r3, [r3, #0x440]
  05710	e2033080	 and         r3, r3, #0x80
  05714	e1923003	 orrs        r3, r2, r3
  05718	0a000007	 beq         |$LN15@WaitCommEv|
  0571c	e59b3004	 ldr         r3, [r11, #4]
  05720	e51b2038	 ldr         r2, [r11, #-0x38]
  05724	e59b1000	 ldr         r1, [r11]
  05728	e59f03bc	 ldr         r0, [pc, #0x3BC]
  0572c	eb000000	 bl          NKDbgPrintfW
  05730	e3a03001	 mov         r3, #1
  05734	e50b3030	 str         r3, [r11, #-0x30]
  05738	ea000001	 b           |$LN16@WaitCommEv|
  0573c		 |$LN15@WaitCommEv|
  0573c	e3a03000	 mov         r3, #0
  05740	e50b3030	 str         r3, [r11, #-0x30]
  05744		 |$LN16@WaitCommEv|

; 1919 : 
; 1920 :     if ( !pHWIHead || !pHWIHead->OpenCnt ) {

  05744	e51b3038	 ldr         r3, [r11, #-0x38]
  05748	e3530000	 cmp         r3, #0
  0574c	0a000004	 beq         |$LN11@WaitCommEv|
  05750	e51b3038	 ldr         r3, [r11, #-0x38]
  05754	e2833090	 add         r3, r3, #0x90
  05758	e5933000	 ldr         r3, [r3]
  0575c	e3530000	 cmp         r3, #0
  05760	1a000022	 bne         |$LN12@WaitCommEv|
  05764		 |$LN11@WaitCommEv|

; 1921 :         DEBUGMSG (ZONE_ERROR|ZONE_EVENTS, (TEXT("-WaitCommEvent - device not open (x%X, %d) \r\n"),
; 1922 :                                            pHWIHead, (pHWIHead == NULL) ? 0 : pHWIHead->OpenCnt));

  05764	e59f3368	 ldr         r3, [pc, #0x368]
  05768	e5933440	 ldr         r3, [r3, #0x440]
  0576c	e2032902	 and         r2, r3, #2, 18
  05770	e59f335c	 ldr         r3, [pc, #0x35C]
  05774	e5933440	 ldr         r3, [r3, #0x440]
  05778	e2033080	 and         r3, r3, #0x80
  0577c	e1923003	 orrs        r3, r2, r3
  05780	0a000010	 beq         |$LN19@WaitCommEv|
  05784	e51b3038	 ldr         r3, [r11, #-0x38]
  05788	e3530000	 cmp         r3, #0
  0578c	1a000002	 bne         |$LN17@WaitCommEv|
  05790	e3a03000	 mov         r3, #0
  05794	e50b302c	 str         r3, [r11, #-0x2C]
  05798	ea000003	 b           |$LN18@WaitCommEv|
  0579c		 |$LN17@WaitCommEv|
  0579c	e51b3038	 ldr         r3, [r11, #-0x38]
  057a0	e2833090	 add         r3, r3, #0x90
  057a4	e5933000	 ldr         r3, [r3]
  057a8	e50b302c	 str         r3, [r11, #-0x2C]
  057ac		 |$LN18@WaitCommEv|
  057ac	e51b202c	 ldr         r2, [r11, #-0x2C]
  057b0	e51b1038	 ldr         r1, [r11, #-0x38]
  057b4	e59f032c	 ldr         r0, [pc, #0x32C]
  057b8	eb000000	 bl          NKDbgPrintfW
  057bc	e3a03001	 mov         r3, #1
  057c0	e50b3028	 str         r3, [r11, #-0x28]
  057c4	ea000001	 b           |$LN20@WaitCommEv|
  057c8		 |$LN19@WaitCommEv|
  057c8	e3a03000	 mov         r3, #0
  057cc	e50b3028	 str         r3, [r11, #-0x28]
  057d0		 |$LN20@WaitCommEv|

; 1923 :         *pfdwEventMask = 0;

  057d0	e59b2004	 ldr         r2, [r11, #4]
  057d4	e3a03000	 mov         r3, #0
  057d8	e5823000	 str         r3, [r2]

; 1924 :         SetLastError(ERROR_INVALID_HANDLE);

  057dc	e3a00006	 mov         r0, #6
  057e0	eb000000	 bl          SetLastError

; 1925 :         return(FALSE);

  057e4	e3a03000	 mov         r3, #0
  057e8	e50b3034	 str         r3, [r11, #-0x34]
  057ec	ea0000b0	 b           |$LN13@WaitCommEv|
  057f0		 |$LN12@WaitCommEv|

; 1926 :     }
; 1927 : 
; 1928 :     // We should return immediately if mask is 0
; 1929 :     if ( !pOpenHead->CommEvents.fEventMask ) {

  057f0	e59b3000	 ldr         r3, [r11]
  057f4	e2833014	 add         r3, r3, #0x14
  057f8	e5933000	 ldr         r3, [r3]
  057fc	e3530000	 cmp         r3, #0
  05800	1a000016	 bne         |$LN10@WaitCommEv|

; 1930 :         DEBUGMSG (ZONE_ERROR|ZONE_EVENTS, (TEXT("-WaitCommEvent - Mask already clear\r\n")));

  05804	e59f32c8	 ldr         r3, [pc, #0x2C8]
  05808	e5933440	 ldr         r3, [r3, #0x440]
  0580c	e2032902	 and         r2, r3, #2, 18
  05810	e59f32bc	 ldr         r3, [pc, #0x2BC]
  05814	e5933440	 ldr         r3, [r3, #0x440]
  05818	e2033080	 and         r3, r3, #0x80
  0581c	e1923003	 orrs        r3, r2, r3
  05820	0a000004	 beq         |$LN21@WaitCommEv|
  05824	e59f02b8	 ldr         r0, [pc, #0x2B8]
  05828	eb000000	 bl          NKDbgPrintfW
  0582c	e3a03001	 mov         r3, #1
  05830	e50b3024	 str         r3, [r11, #-0x24]
  05834	ea000001	 b           |$LN22@WaitCommEv|
  05838		 |$LN21@WaitCommEv|
  05838	e3a03000	 mov         r3, #0
  0583c	e50b3024	 str         r3, [r11, #-0x24]
  05840		 |$LN22@WaitCommEv|

; 1931 :         *pfdwEventMask = 0;

  05840	e59b2004	 ldr         r2, [r11, #4]
  05844	e3a03000	 mov         r3, #0
  05848	e5823000	 str         r3, [r2]

; 1932 :         SetLastError(ERROR_INVALID_PARAMETER);

  0584c	e3a00057	 mov         r0, #0x57
  05850	eb000000	 bl          SetLastError

; 1933 :         return(FALSE);

  05854	e3a03000	 mov         r3, #0
  05858	e50b3034	 str         r3, [r11, #-0x34]
  0585c	ea000094	 b           |$LN13@WaitCommEv|
  05860		 |$LN10@WaitCommEv|

; 1934 :     }
; 1935 : 
; 1936 :     COM_INC_USAGE_CNT(pOpenHead);

  05860	e59b3000	 ldr         r3, [r11]
  05864	e283000c	 add         r0, r3, #0xC
  05868	eb000000	 bl          InterlockedIncrement

; 1937 : 
; 1938 :     // Abort should only affect us once we start waiting.  Ignore any old aborts
; 1939 :     pOpenHead->CommEvents.fAbort = 0;

  0586c	e59b3000	 ldr         r3, [r11]
  05870	e283201c	 add         r2, r3, #0x1C
  05874	e3a03000	 mov         r3, #0
  05878	e5823000	 str         r3, [r2]
  0587c		 |$LN9@WaitCommEv|

; 1940 : 
; 1941 :     while ( pHWIHead->OpenCnt ) {

  0587c	e51b3038	 ldr         r3, [r11, #-0x38]
  05880	e2833090	 add         r3, r3, #0x90
  05884	e5933000	 ldr         r3, [r3]
  05888	e3530000	 cmp         r3, #0
  0588c	0a000059	 beq         |$LN8@WaitCommEv|

; 1942 :         // Read and clear any event bits
; 1943 :         EnterCriticalSection(&(pOpenHead->CommEvents.EventCS));

  05890	e59b3000	 ldr         r3, [r11]
  05894	e2830020	 add         r0, r3, #0x20
  05898	eb000000	 bl          EnterCriticalSection

; 1944 :         ResetEvent(pOpenHead->CommEvents.hCommEvent);

  0589c	e59b3000	 ldr         r3, [r11]
  058a0	e2833010	 add         r3, r3, #0x10
  058a4	e5930000	 ldr         r0, [r3]
  058a8	eb000000	 bl          ResetEvent

; 1945 :         dwEventData = InterlockedExchange( &(pOpenHead->CommEvents.fEventData), 0 );

  058ac	e3a01000	 mov         r1, #0
  058b0	e59b3000	 ldr         r3, [r11]
  058b4	e2830018	 add         r0, r3, #0x18
  058b8	eb000000	 bl          InterlockedExchange
  058bc	e50b0020	 str         r0, [r11, #-0x20]
  058c0	e51b3020	 ldr         r3, [r11, #-0x20]
  058c4	e50b303c	 str         r3, [r11, #-0x3C]

; 1946 :         DEBUGMSG (ZONE_EVENTS, (TEXT(" WaitCommEvent - Events 0x%X, Mask 0x%X, Abort %X\r\n"),
; 1947 :                                 dwEventData,
; 1948 :                                 pOpenHead->CommEvents.fEventMask,
; 1949 :                                 pOpenHead->CommEvents.fAbort ));

  058c8	e59f3204	 ldr         r3, [pc, #0x204]
  058cc	e5933440	 ldr         r3, [r3, #0x440]
  058d0	e3130080	 tst         r3, #0x80
  058d4	0a00000b	 beq         |$LN23@WaitCommEv|
  058d8	e59b3000	 ldr         r3, [r11]
  058dc	e283301c	 add         r3, r3, #0x1C
  058e0	e5933000	 ldr         r3, [r3]
  058e4	e59b2000	 ldr         r2, [r11]
  058e8	e2822014	 add         r2, r2, #0x14
  058ec	e5922000	 ldr         r2, [r2]
  058f0	e51b103c	 ldr         r1, [r11, #-0x3C]
  058f4	e59f01e4	 ldr         r0, [pc, #0x1E4]
  058f8	eb000000	 bl          NKDbgPrintfW
  058fc	e3a03001	 mov         r3, #1
  05900	e50b301c	 str         r3, [r11, #-0x1C]
  05904	ea000001	 b           |$LN24@WaitCommEv|
  05908		 |$LN23@WaitCommEv|
  05908	e3a03000	 mov         r3, #0
  0590c	e50b301c	 str         r3, [r11, #-0x1C]
  05910		 |$LN24@WaitCommEv|

; 1950 : 
; 1951 :         // See if we got any events of interest or mask is reset to zero
; 1952 :         if ( (dwEventData & pOpenHead->CommEvents.fEventMask) != 0 ||
; 1953 :                 pOpenHead->CommEvents.fEventMask == 0 ) {

  05910	e59b3000	 ldr         r3, [r11]
  05914	e2833014	 add         r3, r3, #0x14
  05918	e51b203c	 ldr         r2, [r11, #-0x3C]
  0591c	e5933000	 ldr         r3, [r3]
  05920	e1120003	 tst         r2, r3
  05924	1a000004	 bne         |$LN6@WaitCommEv|
  05928	e59b3000	 ldr         r3, [r11]
  0592c	e2833014	 add         r3, r3, #0x14
  05930	e5933000	 ldr         r3, [r3]
  05934	e3530000	 cmp         r3, #0
  05938	1a00000d	 bne         |$LN7@WaitCommEv|
  0593c		 |$LN6@WaitCommEv|
  0593c		 |$LN36@WaitCommEv|

; 1954 :             __try {
; 1955 :                 *pfdwEventMask = dwEventData & pOpenHead->CommEvents.fEventMask;

  0593c	e59b3000	 ldr         r3, [r11]
  05940	e2833014	 add         r3, r3, #0x14
  05944	e51b203c	 ldr         r2, [r11, #-0x3C]
  05948	e5933000	 ldr         r3, [r3]
  0594c	e0022003	 and         r2, r2, r3
  05950	e59b3004	 ldr         r3, [r11, #4]
  05954	e5832000	 str         r2, [r3]
  05958		 |$LN37@WaitCommEv|

; 1956 :             }

  05958	ea000000	 b           |$LN38@WaitCommEv|
  0595c		 |$LN33@WaitCommEv|
  0595c	eaffffff	 b           |$LN38@WaitCommEv|
  05960		 |$LN38@WaitCommEv|

; 1958 :             };
; 1959 :             LeaveCriticalSection(&(pOpenHead->CommEvents.EventCS));

  05960	e59b3000	 ldr         r3, [r11]
  05964	e2830020	 add         r0, r3, #0x20
  05968	eb000000	 bl          LeaveCriticalSection

; 1960 :             break;

  0596c	ea000021	 b           |$LN8@WaitCommEv|

; 1961 :         }
; 1962 :         else

  05970	ea000002	 b           |$LN4@WaitCommEv|
  05974		 |$LN7@WaitCommEv|

; 1963 :             LeaveCriticalSection(&(pOpenHead->CommEvents.EventCS));

  05974	e59b3000	 ldr         r3, [r11]
  05978	e2830020	 add         r0, r3, #0x20
  0597c	eb000000	 bl          LeaveCriticalSection
  05980		 |$LN4@WaitCommEv|

; 1964 : 
; 1965 :         // Wait for an event from PDD, or from SetCommMask
; 1966 :         WaitForSingleObject(pOpenHead->CommEvents.hCommEvent,
; 1967 :                             (ULONG)-1);

  05980	e3e01000	 mvn         r1, #0
  05984	e59b3000	 ldr         r3, [r11]
  05988	e2833010	 add         r3, r3, #0x10
  0598c	e5930000	 ldr         r0, [r3]
  05990	eb000000	 bl          WaitForSingleObject

; 1968 : 
; 1969 :         // We should return immediately if mask was set via SetCommMask.
; 1970 :         if ( pOpenHead->CommEvents.fAbort ) {

  05994	e59b3000	 ldr         r3, [r11]
  05998	e283301c	 add         r3, r3, #0x1C
  0599c	e5933000	 ldr         r3, [r3]
  059a0	e3530000	 cmp         r3, #0
  059a4	0a000012	 beq         |$LN3@WaitCommEv|

; 1971 :             // We must have been terminated by SetCommMask()
; 1972 :             // Return TRUE with a mask of 0.
; 1973 :             DEBUGMSG (ZONE_ERROR|ZONE_EVENTS, (TEXT(" WaitCommEvent - Mask was cleared\r\n")));

  059a8	e59f3124	 ldr         r3, [pc, #0x124]
  059ac	e5933440	 ldr         r3, [r3, #0x440]
  059b0	e2032902	 and         r2, r3, #2, 18
  059b4	e59f3118	 ldr         r3, [pc, #0x118]
  059b8	e5933440	 ldr         r3, [r3, #0x440]
  059bc	e2033080	 and         r3, r3, #0x80
  059c0	e1923003	 orrs        r3, r2, r3
  059c4	0a000004	 beq         |$LN25@WaitCommEv|
  059c8	e59f010c	 ldr         r0, [pc, #0x10C]
  059cc	eb000000	 bl          NKDbgPrintfW
  059d0	e3a03001	 mov         r3, #1
  059d4	e50b3018	 str         r3, [r11, #-0x18]
  059d8	ea000001	 b           |$LN26@WaitCommEv|
  059dc		 |$LN25@WaitCommEv|
  059dc	e3a03000	 mov         r3, #0
  059e0	e50b3018	 str         r3, [r11, #-0x18]
  059e4		 |$LN26@WaitCommEv|

; 1974 :             *pfdwEventMask = 0;

  059e4	e59b2004	 ldr         r2, [r11, #4]
  059e8	e3a03000	 mov         r3, #0
  059ec	e5823000	 str         r3, [r2]

; 1975 :             break;

  059f0	ea000000	 b           |$LN8@WaitCommEv|
  059f4		 |$LN3@WaitCommEv|

; 1976 :         }
; 1977 : 
; 1978 :     }

  059f4	eaffffa0	 b           |$LN9@WaitCommEv|
  059f8		 |$LN8@WaitCommEv|

; 1979 : 
; 1980 :     COM_DEC_USAGE_CNT(pOpenHead);

  059f8	e59b3000	 ldr         r3, [r11]
  059fc	e283000c	 add         r0, r3, #0xC
  05a00	eb000000	 bl          InterlockedDecrement

; 1981 : 
; 1982 :     // Check and see if device was closed while we were waiting
; 1983 :     if ( !pHWIHead->OpenCnt ) {

  05a04	e51b3038	 ldr         r3, [r11, #-0x38]
  05a08	e2833090	 add         r3, r3, #0x90
  05a0c	e5933000	 ldr         r3, [r3]
  05a10	e3530000	 cmp         r3, #0
  05a14	1a000017	 bne         |$LN2@WaitCommEv|

; 1984 :         // Device was closed.  Get out of here.
; 1985 :         DEBUGMSG (ZONE_EVENTS|ZONE_ERROR,
; 1986 :                   (TEXT("-WaitCommEvent - device was closed\r\n")));

  05a18	e59f30b4	 ldr         r3, [pc, #0xB4]
  05a1c	e5933440	 ldr         r3, [r3, #0x440]
  05a20	e2032080	 and         r2, r3, #0x80
  05a24	e59f30a8	 ldr         r3, [pc, #0xA8]
  05a28	e5933440	 ldr         r3, [r3, #0x440]
  05a2c	e2033902	 and         r3, r3, #2, 18
  05a30	e1923003	 orrs        r3, r2, r3
  05a34	0a000004	 beq         |$LN27@WaitCommEv|
  05a38	e59f0098	 ldr         r0, [pc, #0x98]
  05a3c	eb000000	 bl          NKDbgPrintfW
  05a40	e3a03001	 mov         r3, #1
  05a44	e50b3014	 str         r3, [r11, #-0x14]
  05a48	ea000001	 b           |$LN28@WaitCommEv|
  05a4c		 |$LN27@WaitCommEv|
  05a4c	e3a03000	 mov         r3, #0
  05a50	e50b3014	 str         r3, [r11, #-0x14]
  05a54		 |$LN28@WaitCommEv|

; 1987 :         *pfdwEventMask = 0;

  05a54	e59b2004	 ldr         r2, [r11, #4]
  05a58	e3a03000	 mov         r3, #0
  05a5c	e5823000	 str         r3, [r2]

; 1988 :         SetLastError (ERROR_INVALID_HANDLE);

  05a60	e3a00006	 mov         r0, #6
  05a64	eb000000	 bl          SetLastError

; 1989 :         return(FALSE);

  05a68	e3a03000	 mov         r3, #0
  05a6c	e50b3034	 str         r3, [r11, #-0x34]
  05a70	ea00000f	 b           |$LN13@WaitCommEv|

; 1990 :     } else {

  05a74	ea00000e	 b           |$LN1@WaitCommEv|
  05a78		 |$LN2@WaitCommEv|

; 1991 :         // We either got an event or a SetCommMask 0.
; 1992 :         DEBUGMSG (ZONE_EVENTS,
; 1993 :                   (TEXT("-WaitCommEvent - *pfdwEventMask 0x%X\r\n"),
; 1994 :                    *pfdwEventMask));

  05a78	e59f3054	 ldr         r3, [pc, #0x54]
  05a7c	e5933440	 ldr         r3, [r3, #0x440]
  05a80	e3130080	 tst         r3, #0x80
  05a84	0a000006	 beq         |$LN29@WaitCommEv|
  05a88	e59b3004	 ldr         r3, [r11, #4]
  05a8c	e5931000	 ldr         r1, [r3]
  05a90	e59f0038	 ldr         r0, [pc, #0x38]
  05a94	eb000000	 bl          NKDbgPrintfW
  05a98	e3a03001	 mov         r3, #1
  05a9c	e50b3010	 str         r3, [r11, #-0x10]
  05aa0	ea000001	 b           |$LN30@WaitCommEv|
  05aa4		 |$LN29@WaitCommEv|
  05aa4	e3a03000	 mov         r3, #0
  05aa8	e50b3010	 str         r3, [r11, #-0x10]
  05aac		 |$LN30@WaitCommEv|

; 1995 :         return(TRUE);

  05aac	e3a03001	 mov         r3, #1
  05ab0	e50b3034	 str         r3, [r11, #-0x34]
  05ab4		 |$LN1@WaitCommEv|
  05ab4		 |$LN13@WaitCommEv|
  05ab4		 |$LN31@WaitCommEv|

; 1996 :     }
; 1997 : }

  05ab4	e51b0034	 ldr         r0, [r11, #-0x34]
  05ab8	e24bd00c	 sub         sp, r11, #0xC
  05abc	e89d6800	 ldmia       sp, {r11, sp, lr}
  05ac0	e12fff1e	 bx          lr

			 ENDP  ; |WaitCommEvent_mdd|

  05ac4		 |$LN32@WaitCommEv|
  05ac4		 |$LN41@WaitCommEv|

; 1957 :             __except(EXCEPTION_EXECUTE_HANDLER) {

  05ac4	e52de004	 str         lr, [sp, #-4]!
  05ac8		 |$LN35@WaitCommEv|
  05ac8		 |$LN44@WaitCommEv|
  05ac8	e3a00001	 mov         r0, #1
  05acc		 |$LN34@WaitCommEv|
  05acc	e49df004	 ldr         pc, [sp], #4
  05ad0		 |$LN46@WaitCommEv|
  05ad0		 |$LN47@WaitCommEv|
  05ad0	00000000	 DCD         |??_C@_1EO@HJMBEPIE@?$AA?9?$AAW?$AAa?$AAi?$AAt?$AAC?$AAo?$AAm?$AAm?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?5?$AA?9?$AA?5?$AA?$CK?$AAp?$AAf?$AAd?$AAw?$AAE?$AAv?$AAe?$AAn?$AAt?$AAM?$AAa?$AAs?$AAk?$AA?5@|
  05ad4		 |$LN48@WaitCommEv|
  05ad4	00000000	 DCD         |dpCurSettings|
  05ad8		 |$LN49@WaitCommEv|
  05ad8	00000000	 DCD         |??_C@_1EK@BIALANPL@?$AA?9?$AAW?$AAa?$AAi?$AAt?$AAC?$AAo?$AAm?$AAm?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?5?$AA?9?$AA?5?$AAd?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAw?$AAa?$AAs?$AA?5?$AAc?$AAl?$AAo?$AAs@|
  05adc		 |$LN50@WaitCommEv|
  05adc	00000000	 DCD         |??_C@_1EI@FGBADKHH@?$AA?5?$AAW?$AAa?$AAi?$AAt?$AAC?$AAo?$AAm?$AAm?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?5?$AA?9?$AA?5?$AAM?$AAa?$AAs?$AAk?$AA?5?$AAw?$AAa?$AAs?$AA?5?$AAc?$AAl?$AAe?$AAa?$AAr?$AAe@|
  05ae0		 |$LN51@WaitCommEv|
  05ae0	00000000	 DCD         |??_C@_1GI@MFJIILJA@?$AA?5?$AAW?$AAa?$AAi?$AAt?$AAC?$AAo?$AAm?$AAm?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?5?$AA?9?$AA?5?$AAE?$AAv?$AAe?$AAn?$AAt?$AAs?$AA?5?$AA0?$AAx?$AA?$CF?$AAX?$AA?0?$AA?5?$AAM?$AAa@|
  05ae4		 |$LN52@WaitCommEv|
  05ae4	00000000	 DCD         |??_C@_1EM@NBPFGEAJ@?$AA?9?$AAW?$AAa?$AAi?$AAt?$AAC?$AAo?$AAm?$AAm?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?5?$AA?9?$AA?5?$AAM?$AAa?$AAs?$AAk?$AA?5?$AAa?$AAl?$AAr?$AAe?$AAa?$AAd?$AAy?$AA?5?$AAc?$AAl@|
  05ae8		 |$LN53@WaitCommEv|
  05ae8	00000000	 DCD         |??_C@_1FM@MENBDCNM@?$AA?9?$AAW?$AAa?$AAi?$AAt?$AAC?$AAo?$AAm?$AAm?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?5?$AA?9?$AA?5?$AAd?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAo?$AAp?$AAe?$AAn@|
  05aec		 |$LN54@WaitCommEv|
  05aec	00000000	 DCD         |??_C@_1EI@CENKJDJK@?$AA?$CL?$AAW?$AAa?$AAi?$AAt?$AAC?$AAo?$AAm?$AAm?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?5?$AAx?$AA?$CF?$AAX?$AA?5?$AAx?$AA?$CF?$AAX?$AA?0?$AA?5?$AAp?$AAM?$AAa?$AAs?$AAk?$AA?5?$AAx?$AA?$CF@|
  05af0		 |$LN45@WaitCommEv|
  05af0		 |$LN43@WaitCommEv|
	EXPORT	|??_C@_1GM@NOKKMADJ@?$AA?5?$AAC?$AAo?$AAm?$AAm?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?5?$AA?9?$AA?5?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?5?$AA0?$AAx?$AA?$CF?$AAX?$AA?0?$AA?5?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FI@GNEBOJFH@?$AA?5?$AAC?$AAo?$AAm?$AAm?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?5?$AA?9?$AA?5?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?5?$AA0?$AAx?$AA?$CF?$AAX?$AA?0?$AA?5?$AAG?$AAl?$AAo?$AAb?$AAa?$AAl?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HI@JMOKNKMM@?$AA?5?$AAE?$AAv?$AAa?$AAl?$AAu?$AAa?$AAt?$AAe?$AAE?$AAv?$AAe?$AAn?$AAt?$AAF?$AAl?$AAa?$AAg?$AA?5?$AA?$CI?$AAe?$AAv?$AAe?$AAn?$AAt?$AAM?$AAa?$AAs?$AAk?$AA?5?$AA?$DN?$AA?5@| [ DATA ] ; `string'

  000b0			 AREA	 |.pdata|, PDATA
|$T42050| DCD	|$LN19@EvaluateEv|
	DCD	0x40008404

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GM@NOKKMADJ@?$AA?5?$AAC?$AAo?$AAm?$AAm?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?5?$AA?9?$AA?5?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?5?$AA0?$AAx?$AA?$CF?$AAX?$AA?0?$AA?5?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AA?5@| DCB " "
	DCB	0x0, "C", 0x0, "o", 0x0, "m", 0x0, "m", 0x0, "E", 0x0, "v"
	DCB	0x0, "e", 0x0, "n", 0x0, "t", 0x0, " ", 0x0, "-", 0x0, " "
	DCB	0x0, "E", 0x0, "v", 0x0, "e", 0x0, "n", 0x0, "t", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "X", 0x0, ",", 0x0, " "
	DCB	0x0, "H", 0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e"
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "X", 0x0, " "
	DCB	0x0, "M", 0x0, "a", 0x0, "s", 0x0, "k", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "X", 0x0, " ", 0x0, "(", 0x0, "%"
	DCB	0x0, "X", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FI@GNEBOJFH@?$AA?5?$AAC?$AAo?$AAm?$AAm?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?5?$AA?9?$AA?5?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?5?$AA0?$AAx?$AA?$CF?$AAX?$AA?0?$AA?5?$AAG?$AAl?$AAo?$AAb?$AAa?$AAl?$AA?5@| DCB " "
	DCB	0x0, "C", 0x0, "o", 0x0, "m", 0x0, "m", 0x0, "E", 0x0, "v"
	DCB	0x0, "e", 0x0, "n", 0x0, "t", 0x0, " ", 0x0, "-", 0x0, " "
	DCB	0x0, "E", 0x0, "v", 0x0, "e", 0x0, "n", 0x0, "t", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "X", 0x0, ",", 0x0, " "
	DCB	0x0, "G", 0x0, "l", 0x0, "o", 0x0, "b", 0x0, "a", 0x0, "l"
	DCB	0x0, " ", 0x0, "M", 0x0, "a", 0x0, "s", 0x0, "k", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "X", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HI@JMOKNKMM@?$AA?5?$AAE?$AAv?$AAa?$AAl?$AAu?$AAa?$AAt?$AAe?$AAE?$AAv?$AAe?$AAn?$AAt?$AAF?$AAl?$AAa?$AAg?$AA?5?$AA?$CI?$AAe?$AAv?$AAe?$AAn?$AAt?$AAM?$AAa?$AAs?$AAk?$AA?5?$AA?$DN?$AA?5@| DCB " "
	DCB	0x0, "E", 0x0, "v", 0x0, "a", 0x0, "l", 0x0, "u", 0x0, "a"
	DCB	0x0, "t", 0x0, "e", 0x0, "E", 0x0, "v", 0x0, "e", 0x0, "n"
	DCB	0x0, "t", 0x0, "F", 0x0, "l", 0x0, "a", 0x0, "g", 0x0, " "
	DCB	0x0, "(", 0x0, "e", 0x0, "v", 0x0, "e", 0x0, "n", 0x0, "t"
	DCB	0x0, "M", 0x0, "a", 0x0, "s", 0x0, "k", 0x0, " ", 0x0, "="
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, ")"
	DCB	0x0, " ", 0x0, "-", 0x0, " ", 0x0, "d", 0x0, "e", 0x0, "v"
	DCB	0x0, "i", 0x0, "c", 0x0, "e", 0x0, " ", 0x0, "w", 0x0, "a"
	DCB	0x0, "s", 0x0, " ", 0x0, "c", 0x0, "l", 0x0, "o", 0x0, "s"
	DCB	0x0, "e", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  05af0			 AREA	 |.text|, CODE, ARM

  05af0		 |EvaluateEventFlag| PROC

; 2023 : {

  05af0		 |$LN19@EvaluateEv|
  05af0	e1a0c00d	 mov         r12, sp
  05af4	e92d0003	 stmdb       sp!, {r0, r1}
  05af8	e92d5000	 stmdb       sp!, {r12, lr}
  05afc	e24dd034	 sub         sp, sp, #0x34
  05b00		 |$M42047|

; 2024 :     PHW_INDEP_INFO  pHWIHead = (PHW_INDEP_INFO)pHead;

  05b00	e59d303c	 ldr         r3, [sp, #0x3C]
  05b04	e58d3014	 str         r3, [sp, #0x14]

; 2025 :     PLIST_ENTRY     pEntry;
; 2026 :     PHW_OPEN_INFO   pOpenHead;
; 2027 :     DWORD           dwTmpEvent, dwOrigEvent;
; 2028 :     BOOL            fRetCode;
; 2029 : 
; 2030 :     if ( !pHWIHead->OpenCnt ) {

  05b08	e59d3014	 ldr         r3, [sp, #0x14]
  05b0c	e2833090	 add         r3, r3, #0x90
  05b10	e5933000	 ldr         r3, [r3]
  05b14	e3530000	 cmp         r3, #0
  05b18	1a000012	 bne         |$LN8@EvaluateEv|

; 2031 :         DEBUGMSG (ZONE_EVENTS|ZONE_ERROR,
; 2032 :                   (TEXT(" EvaluateEventFlag (eventMask = 0x%x) - device was closed\r\n"),fdwEventMask));

  05b1c	e59f31d0	 ldr         r3, [pc, #0x1D0]
  05b20	e5933440	 ldr         r3, [r3, #0x440]
  05b24	e2032080	 and         r2, r3, #0x80
  05b28	e59f31c4	 ldr         r3, [pc, #0x1C4]
  05b2c	e5933440	 ldr         r3, [r3, #0x440]
  05b30	e2033902	 and         r3, r3, #2, 18
  05b34	e1923003	 orrs        r3, r2, r3
  05b38	0a000005	 beq         |$LN11@EvaluateEv|
  05b3c	e59d1040	 ldr         r1, [sp, #0x40]
  05b40	e59f01b4	 ldr         r0, [pc, #0x1B4]
  05b44	eb000000	 bl          NKDbgPrintfW
  05b48	e3a03001	 mov         r3, #1
  05b4c	e58d3020	 str         r3, [sp, #0x20]
  05b50	ea000001	 b           |$LN12@EvaluateEv|
  05b54		 |$LN11@EvaluateEv|
  05b54	e3a03000	 mov         r3, #0
  05b58	e58d3020	 str         r3, [sp, #0x20]
  05b5c		 |$LN12@EvaluateEv|

; 2033 :         SetLastError (ERROR_INVALID_HANDLE);

  05b5c	e3a00006	 mov         r0, #6
  05b60	eb000000	 bl          SetLastError

; 2034 :         return;

  05b64	ea00005e	 b           |$LN9@EvaluateEv|
  05b68		 |$LN8@EvaluateEv|

; 2035 :     }
; 2036 : 
; 2037 :     DEBUGMSG (ZONE_EVENTS, (TEXT(" CommEvent - Event 0x%X, Global Mask 0x%X\r\n"),
; 2038 :                             fdwEventMask,
; 2039 :                             pHWIHead->fEventMask));

  05b68	e59f3184	 ldr         r3, [pc, #0x184]
  05b6c	e5933440	 ldr         r3, [r3, #0x440]
  05b70	e3130080	 tst         r3, #0x80
  05b74	0a000008	 beq         |$LN13@EvaluateEv|
  05b78	e59d3014	 ldr         r3, [sp, #0x14]
  05b7c	e2833098	 add         r3, r3, #0x98
  05b80	e5932000	 ldr         r2, [r3]
  05b84	e59d1040	 ldr         r1, [sp, #0x40]
  05b88	e59f0168	 ldr         r0, [pc, #0x168]
  05b8c	eb000000	 bl          NKDbgPrintfW
  05b90	e3a03001	 mov         r3, #1
  05b94	e58d3024	 str         r3, [sp, #0x24]
  05b98	ea000001	 b           |$LN14@EvaluateEv|
  05b9c		 |$LN13@EvaluateEv|
  05b9c	e3a03000	 mov         r3, #0
  05ba0	e58d3024	 str         r3, [sp, #0x24]
  05ba4		 |$LN14@EvaluateEv|

; 2040 : 
; 2041 :     // Now that we support multiple opens, we must check mask for each open handle
; 2042 :     // To keep this relatively painless, we keep a per-device mask which is the
; 2043 :     // bitwise or of each current open mask.  We can check this first before doing
; 2044 :     // all the linked list work to figure out who to notify
; 2045 :     if ( pHWIHead->fEventMask & fdwEventMask ) {

  05ba4	e59d3014	 ldr         r3, [sp, #0x14]
  05ba8	e2833098	 add         r3, r3, #0x98
  05bac	e5932000	 ldr         r2, [r3]
  05bb0	e59d3040	 ldr         r3, [sp, #0x40]
  05bb4	e1120003	 tst         r2, r3
  05bb8	0a000049	 beq         |$LN7@EvaluateEv|

; 2046 :         pEntry = pHWIHead->OpenList.Flink;

  05bbc	e59d3014	 ldr         r3, [sp, #0x14]
  05bc0	e28330e4	 add         r3, r3, #0xE4
  05bc4	e5933000	 ldr         r3, [r3]
  05bc8	e58d3004	 str         r3, [sp, #4]
  05bcc		 |$LN6@EvaluateEv|

; 2047 :         while ( pEntry != &pHWIHead->OpenList ) {

  05bcc	e59d3014	 ldr         r3, [sp, #0x14]
  05bd0	e28320e4	 add         r2, r3, #0xE4
  05bd4	e59d3004	 ldr         r3, [sp, #4]
  05bd8	e1530002	 cmp         r3, r2
  05bdc	0a000040	 beq         |$LN5@EvaluateEv|

; 2048 :             pOpenHead = CONTAINING_RECORD( pEntry, HW_OPEN_INFO, llist);

  05be0	e59d3004	 ldr         r3, [sp, #4]
  05be4	e2433034	 sub         r3, r3, #0x34
  05be8	e58d3010	 str         r3, [sp, #0x10]

; 2049 :             pEntry = pEntry->Flink;  // advance to next

  05bec	e59d3004	 ldr         r3, [sp, #4]
  05bf0	e5933000	 ldr         r3, [r3]
  05bf4	e58d3004	 str         r3, [sp, #4]

; 2050 : 
; 2051 :             EnterCriticalSection(&(pOpenHead->CommEvents.EventCS));

  05bf8	e59d3010	 ldr         r3, [sp, #0x10]
  05bfc	e2830020	 add         r0, r3, #0x20
  05c00	eb000000	 bl          EnterCriticalSection

; 2052 :             // Don't do anything unless this event is of interest to the MDD.
; 2053 :             if ( pOpenHead->CommEvents.fEventMask & fdwEventMask ) {

  05c04	e59d3010	 ldr         r3, [sp, #0x10]
  05c08	e2833014	 add         r3, r3, #0x14
  05c0c	e5932000	 ldr         r2, [r3]
  05c10	e59d3040	 ldr         r3, [sp, #0x40]
  05c14	e1120003	 tst         r2, r3
  05c18	0a00002d	 beq         |$LN4@EvaluateEv|

; 2054 :                 // Store the event data
; 2055 :                 dwOrigEvent = pOpenHead->CommEvents.fEventData;

  05c1c	e59d3010	 ldr         r3, [sp, #0x10]
  05c20	e2833018	 add         r3, r3, #0x18
  05c24	e5933000	 ldr         r3, [r3]
  05c28	e58d3018	 str         r3, [sp, #0x18]
  05c2c		 |$LN3@EvaluateEv|

; 2056 :                 do {
; 2057 :                     dwTmpEvent = dwOrigEvent;

  05c2c	e59d3018	 ldr         r3, [sp, #0x18]
  05c30	e58d3008	 str         r3, [sp, #8]

; 2058 :                     dwOrigEvent = InterlockedExchange(&(pOpenHead->CommEvents.fEventData),
; 2059 :                                                       dwTmpEvent | fdwEventMask) ;

  05c34	e59d2008	 ldr         r2, [sp, #8]
  05c38	e59d3040	 ldr         r3, [sp, #0x40]
  05c3c	e1821003	 orr         r1, r2, r3
  05c40	e59d3010	 ldr         r3, [sp, #0x10]
  05c44	e2830018	 add         r0, r3, #0x18
  05c48	eb000000	 bl          InterlockedExchange
  05c4c	e58d0028	 str         r0, [sp, #0x28]
  05c50	e59d3028	 ldr         r3, [sp, #0x28]
  05c54	e58d3018	 str         r3, [sp, #0x18]

; 2060 : 
; 2061 :                 } while ( dwTmpEvent != dwOrigEvent );

  05c58	e59d2008	 ldr         r2, [sp, #8]
  05c5c	e59d3018	 ldr         r3, [sp, #0x18]
  05c60	e1520003	 cmp         r2, r3
  05c64	1afffff0	 bne         |$LN3@EvaluateEv|

; 2062 : 
; 2063 :                 // Signal the MDD that new event data is available.
; 2064 :                 fRetCode = SetEvent(pOpenHead->CommEvents.hCommEvent);

  05c68	e59d3010	 ldr         r3, [sp, #0x10]
  05c6c	e2833010	 add         r3, r3, #0x10
  05c70	e5930000	 ldr         r0, [r3]
  05c74	eb000000	 bl          SetEvent
  05c78	e58d002c	 str         r0, [sp, #0x2C]
  05c7c	e59d302c	 ldr         r3, [sp, #0x2C]
  05c80	e58d300c	 str         r3, [sp, #0xC]

; 2065 :                 DEBUGMSG (ZONE_EVENTS, (TEXT(" CommEvent - Event 0x%X, Handle 0x%X Mask 0x%X (%X)\r\n"),
; 2066 :                                         dwTmpEvent | fdwEventMask,
; 2067 :                                         pOpenHead,
; 2068 :                                         pOpenHead->CommEvents.fEventMask,
; 2069 :                                         fRetCode));

  05c84	e59f3068	 ldr         r3, [pc, #0x68]
  05c88	e5933440	 ldr         r3, [r3, #0x440]
  05c8c	e3130080	 tst         r3, #0x80
  05c90	0a00000d	 beq         |$LN15@EvaluateEv|
  05c94	e59d300c	 ldr         r3, [sp, #0xC]
  05c98	e58d3000	 str         r3, [sp]
  05c9c	e59d3010	 ldr         r3, [sp, #0x10]
  05ca0	e2833014	 add         r3, r3, #0x14
  05ca4	e5933000	 ldr         r3, [r3]
  05ca8	e59d2010	 ldr         r2, [sp, #0x10]
  05cac	e59d0008	 ldr         r0, [sp, #8]
  05cb0	e59d1040	 ldr         r1, [sp, #0x40]
  05cb4	e1801001	 orr         r1, r0, r1
  05cb8	e59f0030	 ldr         r0, [pc, #0x30]
  05cbc	eb000000	 bl          NKDbgPrintfW
  05cc0	e3a03001	 mov         r3, #1
  05cc4	e58d3030	 str         r3, [sp, #0x30]
  05cc8	ea000001	 b           |$LN16@EvaluateEv|
  05ccc		 |$LN15@EvaluateEv|
  05ccc	e3a03000	 mov         r3, #0
  05cd0	e58d3030	 str         r3, [sp, #0x30]
  05cd4		 |$LN16@EvaluateEv|
  05cd4		 |$LN4@EvaluateEv|

; 2070 : 
; 2071 :             }
; 2072 :             LeaveCriticalSection(&(pOpenHead->CommEvents.EventCS));

  05cd4	e59d3010	 ldr         r3, [sp, #0x10]
  05cd8	e2830020	 add         r0, r3, #0x20
  05cdc	eb000000	 bl          LeaveCriticalSection

; 2073 :         }

  05ce0	eaffffb9	 b           |$LN6@EvaluateEv|
  05ce4		 |$LN5@EvaluateEv|
  05ce4		 |$LN7@EvaluateEv|
  05ce4		 |$LN9@EvaluateEv|

; 2074 :     }
; 2075 : 
; 2076 :     return;
; 2077 : }

  05ce4	e28dd034	 add         sp, sp, #0x34
  05ce8	e89d6000	 ldmia       sp, {sp, lr}
  05cec	e12fff1e	 bx          lr
  05cf0		 |$LN20@EvaluateEv|
  05cf0		 |$LN21@EvaluateEv|
  05cf0	00000000	 DCD         |??_C@_1GM@NOKKMADJ@?$AA?5?$AAC?$AAo?$AAm?$AAm?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?5?$AA?9?$AA?5?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?5?$AA0?$AAx?$AA?$CF?$AAX?$AA?0?$AA?5?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AA?5@|
  05cf4		 |$LN22@EvaluateEv|
  05cf4	00000000	 DCD         |dpCurSettings|
  05cf8		 |$LN23@EvaluateEv|
  05cf8	00000000	 DCD         |??_C@_1FI@GNEBOJFH@?$AA?5?$AAC?$AAo?$AAm?$AAm?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?5?$AA?9?$AA?5?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?5?$AA0?$AAx?$AA?$CF?$AAX?$AA?0?$AA?5?$AAG?$AAl?$AAo?$AAb?$AAa?$AAl?$AA?5@|
  05cfc		 |$LN24@EvaluateEv|
  05cfc	00000000	 DCD         |??_C@_1HI@JMOKNKMM@?$AA?5?$AAE?$AAv?$AAa?$AAl?$AAu?$AAa?$AAt?$AAe?$AAE?$AAv?$AAe?$AAn?$AAt?$AAF?$AAl?$AAa?$AAg?$AA?5?$AA?$CI?$AAe?$AAv?$AAe?$AAn?$AAt?$AAM?$AAa?$AAs?$AAk?$AA?5?$AA?$DN?$AA?5@|
  05d00		 |$M42048|

			 ENDP  ; |EvaluateEventFlag|

	EXPORT	|??_C@_1EM@GAPNEPLB@?$AA?9?$AAC?$AAO?$AAM?$AA_?$AAI?$AAO?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?5?$AA?$CF?$AAs?$AA?5?$AAE?$AAc?$AAo?$AAd?$AAe?$AA?$DN?$AA?$CF?$AAd?$AA?5?$AA?$CI?$AAl?$AAe?$AAn?$AA?$DN@| [ DATA ] ; `string'
	EXPORT	|??_C@_1M@ILHOPKA@?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BA@JFDCMKFN@?$AAS?$AAu?$AAc?$AAc?$AAe?$AAs?$AAs?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CG@MLMOPDDN@?$AAI?$AAO?$AAC?$AAT?$AAL?$AA?5?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAI?$AAR?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CC@LGNHCIBI@?$AAI?$AAR?$AA?5?$AAm?$AAo?$AAd?$AAe?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CE@NOAPAGNI@?$AAI?$AAO?$AAC?$AAT?$AAL?$AA?5?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAI?$AAR?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CG@IAPBOCP@?$AA?5?$AAA?$AAp?$AAp?$AAl?$AAy?$AAD?$AAC?$AAB?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DA@GPICLALP@?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAS?$AAE?$AAR?$AAI?$AAA?$AAL?$AA_?$AAS?$AAE?$AAT?$AA_?$AAD?$AAC?$AAB?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DA@MBKJPAMD@?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAS?$AAE?$AAR?$AAI?$AAA?$AAL?$AA_?$AAG?$AAE?$AAT?$AA_?$AAD?$AAC?$AAB?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EI@KIHCPENE@?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAS?$AAE?$AAR?$AAI?$AAA?$AAL?$AA_?$AAI?$AAM?$AAM?$AAE?$AAD?$AAI?$AAA?$AAT?$AAE?$AA_?$AAC?$AAH?$AAA?$AAR?$AA?5?$AA0?$AAx?$AA?$CF@| [ DATA ] ; `string'
	EXPORT	|PulseEvent|
	EXPORT	|??_C@_1FE@LCKDINPA@?$AA?5?$AAF?$AAl?$AAu?$AAs?$AAh?$AAi?$AAn?$AAg?$AA?5?$AA?$CF?$AAd?$AA?5?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?5?$AAf?$AAr?$AAo?$AAm?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAr?$AAe?$AAa?$AAd@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DG@NONFKDMH@?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAS?$AAE?$AAR?$AAI?$AAA?$AAL?$AA_?$AAP?$AAU?$AAR?$AAG?$AAE?$AA?5?$AA0?$AAx?$AA?$CF?$AAX?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DK@FGFBKMCP@?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAS?$AAE?$AAR?$AAI?$AAA?$AAL?$AA_?$AAG?$AAE?$AAT?$AA_?$AAT?$AAI?$AAM?$AAE?$AAO?$AAU?$AAT?$AAS?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GE@COCIEMAI@?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAS?$AAE?$AAR?$AAI?$AAA?$AAL?$AA_?$AAS?$AAE?$AAT?$AA_?$AAC?$AAO?$AAM?$AAM?$AAT?$AAI?$AAM?$AAE?$AAO?$AAU?$AAT?$AAS?$AA?5?$AA?$CI@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DO@COBPCJBD@?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAS?$AAE?$AAR?$AAI?$AAA?$AAL?$AA_?$AAG?$AAE?$AAT?$AA_?$AAP?$AAR?$AAO?$AAP?$AAE?$AAR?$AAT?$AAI?$AAE?$AAS?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EA@IBDHDHLD@?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAS?$AAE?$AAR?$AAI?$AAA?$AAL?$AA_?$AAG?$AAE?$AAT?$AA_?$AAM?$AAO?$AAD?$AAE?$AAM?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DO@GPNOPFOC@?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAS?$AAE?$AAR?$AAI?$AAA?$AAL?$AA_?$AAG?$AAE?$AAT?$AA_?$AAC?$AAO?$AAM?$AAM?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FE@DCNACOPO@?$AA?5?$AAC?$AAO?$AAM?$AA_?$AAI?$AAO?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?5?$AA?9?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAi?$AAn?$AA?5?$AAW?$AAa?$AAi?$AAt?$AAC?$AAo@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DK@MHHDNLMO@?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAS?$AAE?$AAR?$AAI?$AAA?$AAL?$AA_?$AAW?$AAA?$AAI?$AAT?$AA_?$AAO?$AAN?$AA_?$AAM?$AAA?$AAS?$AAK?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FG@BOKINKK@?$AA?5?$AAS?$AAe?$AAt?$AAW?$AAa?$AAi?$AAt?$AAM?$AAa?$AAs?$AAk?$AA?5?$AA?9?$AA?5?$AAm?$AAa?$AAs?$AAk?$AA?5?$AAx?$AA?$CF?$AAX?$AA?0?$AA?5?$AAg?$AAl?$AAo?$AAb?$AAa?$AAl?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EK@BIBFMIMA@?$AA?5?$AAS?$AAe?$AAt?$AAW?$AAa?$AAi?$AAt?$AAM?$AAa?$AAs?$AAk?$AA?5?$AA?9?$AA?5?$AAh?$AAa?$AAn?$AAd?$AAl?$AAe?$AA?5?$AAx?$AA?$CF?$AAX?$AA?5?$AAm?$AAa?$AAs?$AAk?$AA?5?$AAx@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EG@JONHGGFH@?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAS?$AAE?$AAR?$AAI?$AAA?$AAL?$AA_?$AAS?$AAE?$AAT?$AA_?$AAW?$AAA?$AAI?$AAT?$AA_?$AAM?$AAA?$AAS?$AAK?$AA?5?$AA0?$AAx?$AA?$CF?$AAX@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CK@EJMDEGNB@?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAp?$AAa?$AAr?$AAa?$AAm?$AAe?$AAt?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DM@BJAAJCOJ@?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAS?$AAE?$AAR?$AAI?$AAA?$AAL?$AA_?$AAG?$AAE?$AAT?$AA_?$AAW?$AAA?$AAI?$AAT?$AA_?$AAM?$AAA?$AAS?$AAK?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DA@CLADOFAD@?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAS?$AAE?$AAR?$AAI?$AAA?$AAL?$AA_?$AAS?$AAE?$AAT?$AA_?$AAX?$AAO?$AAN?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DC@OONFCAKE@?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAS?$AAE?$AAR?$AAI?$AAA?$AAL?$AA_?$AAS?$AAE?$AAT?$AA_?$AAX?$AAO?$AAF?$AAF?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DA@LCJAIJKL@?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAS?$AAE?$AAR?$AAI?$AAA?$AAL?$AA_?$AAC?$AAL?$AAR?$AA_?$AAR?$AAT?$AAS?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DA@PJMEFDIH@?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAS?$AAE?$AAR?$AAI?$AAA?$AAL?$AA_?$AAS?$AAE?$AAT?$AA_?$AAR?$AAT?$AAS?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DA@JNBPMBCJ@?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAS?$AAE?$AAR?$AAI?$AAA?$AAL?$AA_?$AAC?$AAL?$AAR?$AA_?$AAD?$AAT?$AAR?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DA@NGELBLAF@?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAS?$AAE?$AAR?$AAI?$AAA?$AAL?$AA_?$AAS?$AAE?$AAT?$AA_?$AAD?$AAT?$AAR?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DM@GNACIDMB@?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAS?$AAE?$AAR?$AAI?$AAA?$AAL?$AA_?$AAS?$AAE?$AAT?$AA_?$AAB?$AAR?$AAE?$AAA?$AAK?$AA_?$AAO?$AAF?$AAF?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DK@NGIHOHIF@?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAS?$AAE?$AAR?$AAI?$AAA?$AAL?$AA_?$AAS?$AAE?$AAT?$AA_?$AAB?$AAR?$AAE?$AAA?$AAK?$AA_?$AAO?$AAN?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GI@OFPAKAHG@?$AAC?$AAO?$AAM?$AA_?$AAI?$AAo?$AAc?$AAt?$AAl?$AA?3?$AA?5?$AAI?$AAo?$AAc?$AAt?$AAl?$AA?5?$AA?$CF?$AAx?$AA?5?$AAa?$AAc?$AAc?$AAe?$AAs?$AAs?$AA?5?$AAp?$AAe?$AAr?$AAm?$AAi@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CM@DKOMLJNL@?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AA?5?$AAi?$AAs?$AA?5?$AAe?$AAx?$AAi?$AAt?$AAi?$AAn?$AAg?$AA?4?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EK@GAFFJFEI@?$AA?5?$AAC?$AAO?$AAM?$AA_?$AAI?$AAO?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?5?$AA?9?$AA?5?$AAd?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAw?$AAa?$AAs?$AA?5?$AAc?$AAl?$AAo?$AAs@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GK@BPHGGHEJ@?$AA?$CL?$AAC?$AAO?$AAM?$AA_?$AAI?$AAO?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?$CI?$AA0?$AAx?$AA?$CF?$AAX?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AAX?$AA?0?$AA?5?$AA?$CF@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CM@ENDIALIE@?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAo?$AAc?$AAt?$AAl?$AA?5?$AA0?$AAx?$AA?$CF?$AAX?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|COM_IOControl|
	IMPORT	|memcpy|

  000b8			 AREA	 |.pdata|, PDATA
|$T42274| DCD	|$LN296@COM_IOCont|
	DCD	0xc0072c04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EM@GAPNEPLB@?$AA?9?$AAC?$AAO?$AAM?$AA_?$AAI?$AAO?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?5?$AA?$CF?$AAs?$AA?5?$AAE?$AAc?$AAo?$AAd?$AAe?$AA?$DN?$AA?$CF?$AAd?$AA?5?$AA?$CI?$AAl?$AAe?$AAn?$AA?$DN@| DCB "-"
	DCB	0x0, "C", 0x0, "O", 0x0, "M", 0x0, "_", 0x0, "I", 0x0, "O"
	DCB	0x0, "C", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o"
	DCB	0x0, "l", 0x0, " ", 0x0, "%", 0x0, "s", 0x0, " ", 0x0, "E"
	DCB	0x0, "c", 0x0, "o", 0x0, "d", 0x0, "e", 0x0, "=", 0x0, "%"
	DCB	0x0, "d", 0x0, " ", 0x0, "(", 0x0, "l", 0x0, "e", 0x0, "n"
	DCB	0x0, "=", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@ILHOPKA@?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?$AA@| DCB "E", 0x0, "r", 0x0
	DCB	"r", 0x0, "o", 0x0, "r", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@JFDCMKFN@?$AAS?$AAu?$AAc?$AAc?$AAe?$AAs?$AAs?$AA?$AA@| DCB "S", 0x0
	DCB	"u", 0x0, "c", 0x0, "c", 0x0, "e", 0x0, "s", 0x0, "s", 0x0
	DCB	0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CG@MLMOPDDN@?$AAI?$AAO?$AAC?$AAT?$AAL?$AA?5?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAI?$AAR?$AA?$AN?$AA?6?$AA?$AA@| DCB "I"
	DCB	0x0, "O", 0x0, "C", 0x0, "T", 0x0, "L", 0x0, " ", 0x0, "D"
	DCB	0x0, "i", 0x0, "s", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e"
	DCB	0x0, " ", 0x0, "I", 0x0, "R", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CC@LGNHCIBI@?$AAI?$AAR?$AA?5?$AAm?$AAo?$AAd?$AAe?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "I"
	DCB	0x0, "R", 0x0, " ", 0x0, "m", 0x0, "o", 0x0, "d", 0x0, "e"
	DCB	0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e"
	DCB	0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@NOAPAGNI@?$AAI?$AAO?$AAC?$AAT?$AAL?$AA?5?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAI?$AAR?$AA?$AN?$AA?6?$AA?$AA@| DCB "I"
	DCB	0x0, "O", 0x0, "C", 0x0, "T", 0x0, "L", 0x0, " ", 0x0, "E"
	DCB	0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, " "
	DCB	0x0, "I", 0x0, "R", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CG@IAPBOCP@?$AA?5?$AAA?$AAp?$AAp?$AAl?$AAy?$AAD?$AAC?$AAB?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB " "
	DCB	0x0, "A", 0x0, "p", 0x0, "p", 0x0, "l", 0x0, "y", 0x0, "D"
	DCB	0x0, "C", 0x0, "B", 0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@GPICLALP@?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAS?$AAE?$AAR?$AAI?$AAA?$AAL?$AA_?$AAS?$AAE?$AAT?$AA_?$AAD?$AAC?$AAB?$AA?$AN?$AA?6?$AA?$AA@| DCB " "
	DCB	0x0, "I", 0x0, "O", 0x0, "C", 0x0, "T", 0x0, "L", 0x0, "_"
	DCB	0x0, "S", 0x0, "E", 0x0, "R", 0x0, "I", 0x0, "A", 0x0, "L"
	DCB	0x0, "_", 0x0, "S", 0x0, "E", 0x0, "T", 0x0, "_", 0x0, "D"
	DCB	0x0, "C", 0x0, "B", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@MBKJPAMD@?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAS?$AAE?$AAR?$AAI?$AAA?$AAL?$AA_?$AAG?$AAE?$AAT?$AA_?$AAD?$AAC?$AAB?$AA?$AN?$AA?6?$AA?$AA@| DCB " "
	DCB	0x0, "I", 0x0, "O", 0x0, "C", 0x0, "T", 0x0, "L", 0x0, "_"
	DCB	0x0, "S", 0x0, "E", 0x0, "R", 0x0, "I", 0x0, "A", 0x0, "L"
	DCB	0x0, "_", 0x0, "G", 0x0, "E", 0x0, "T", 0x0, "_", 0x0, "D"
	DCB	0x0, "C", 0x0, "B", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EI@KIHCPENE@?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAS?$AAE?$AAR?$AAI?$AAA?$AAL?$AA_?$AAI?$AAM?$AAM?$AAE?$AAD?$AAI?$AAA?$AAT?$AAE?$AA_?$AAC?$AAH?$AAA?$AAR?$AA?5?$AA0?$AAx?$AA?$CF@| DCB " "
	DCB	0x0, "I", 0x0, "O", 0x0, "C", 0x0, "T", 0x0, "L", 0x0, "_"
	DCB	0x0, "S", 0x0, "E", 0x0, "R", 0x0, "I", 0x0, "A", 0x0, "L"
	DCB	0x0, "_", 0x0, "I", 0x0, "M", 0x0, "M", 0x0, "E", 0x0, "D"
	DCB	0x0, "I", 0x0, "A", 0x0, "T", 0x0, "E", 0x0, "_", 0x0, "C"
	DCB	0x0, "H", 0x0, "A", 0x0, "R", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "X", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FE@LCKDINPA@?$AA?5?$AAF?$AAl?$AAu?$AAs?$AAh?$AAi?$AAn?$AAg?$AA?5?$AA?$CF?$AAd?$AA?5?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?5?$AAf?$AAr?$AAo?$AAm?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAr?$AAe?$AAa?$AAd@| DCB " "
	DCB	0x0, "F", 0x0, "l", 0x0, "u", 0x0, "s", 0x0, "h", 0x0, "i"
	DCB	0x0, "n", 0x0, "g", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, " "
	DCB	0x0, "b", 0x0, "y", 0x0, "t", 0x0, "e", 0x0, "s", 0x0, " "
	DCB	0x0, "f", 0x0, "r", 0x0, "o", 0x0, "m", 0x0, " ", 0x0, "t"
	DCB	0x0, "h", 0x0, "e", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "a"
	DCB	0x0, "d", 0x0, " ", 0x0, "b", 0x0, "u", 0x0, "f", 0x0, "f"
	DCB	0x0, "e", 0x0, "r", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DG@NONFKDMH@?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAS?$AAE?$AAR?$AAI?$AAA?$AAL?$AA_?$AAP?$AAU?$AAR?$AAG?$AAE?$AA?5?$AA0?$AAx?$AA?$CF?$AAX?$AA?$AN?$AA?6?$AA?$AA@| DCB " "
	DCB	0x0, "I", 0x0, "O", 0x0, "C", 0x0, "T", 0x0, "L", 0x0, "_"
	DCB	0x0, "S", 0x0, "E", 0x0, "R", 0x0, "I", 0x0, "A", 0x0, "L"
	DCB	0x0, "_", 0x0, "P", 0x0, "U", 0x0, "R", 0x0, "G", 0x0, "E"
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "X", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DK@FGFBKMCP@?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAS?$AAE?$AAR?$AAI?$AAA?$AAL?$AA_?$AAG?$AAE?$AAT?$AA_?$AAT?$AAI?$AAM?$AAE?$AAO?$AAU?$AAT?$AAS?$AA?$AN?$AA?6?$AA?$AA@| DCB " "
	DCB	0x0, "I", 0x0, "O", 0x0, "C", 0x0, "T", 0x0, "L", 0x0, "_"
	DCB	0x0, "S", 0x0, "E", 0x0, "R", 0x0, "I", 0x0, "A", 0x0, "L"
	DCB	0x0, "_", 0x0, "G", 0x0, "E", 0x0, "T", 0x0, "_", 0x0, "T"
	DCB	0x0, "I", 0x0, "M", 0x0, "E", 0x0, "O", 0x0, "U", 0x0, "T"
	DCB	0x0, "S", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GE@COCIEMAI@?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAS?$AAE?$AAR?$AAI?$AAA?$AAL?$AA_?$AAS?$AAE?$AAT?$AA_?$AAC?$AAO?$AAM?$AAM?$AAT?$AAI?$AAM?$AAE?$AAO?$AAU?$AAT?$AAS?$AA?5?$AA?$CI@| DCB " "
	DCB	0x0, "I", 0x0, "O", 0x0, "C", 0x0, "T", 0x0, "L", 0x0, "_"
	DCB	0x0, "S", 0x0, "E", 0x0, "R", 0x0, "I", 0x0, "A", 0x0, "L"
	DCB	0x0, "_", 0x0, "S", 0x0, "E", 0x0, "T", 0x0, "_", 0x0, "C"
	DCB	0x0, "O", 0x0, "M", 0x0, "M", 0x0, "T", 0x0, "I", 0x0, "M"
	DCB	0x0, "E", 0x0, "O", 0x0, "U", 0x0, "T", 0x0, "S", 0x0, " "
	DCB	0x0, "(", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, "%", 0x0, "d"
	DCB	0x0, ",", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, "%", 0x0, "d"
	DCB	0x0, ",", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@COBPCJBD@?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAS?$AAE?$AAR?$AAI?$AAA?$AAL?$AA_?$AAG?$AAE?$AAT?$AA_?$AAP?$AAR?$AAO?$AAP?$AAE?$AAR?$AAT?$AAI?$AAE?$AAS?$AA?$AN?$AA?6?$AA?$AA@| DCB " "
	DCB	0x0, "I", 0x0, "O", 0x0, "C", 0x0, "T", 0x0, "L", 0x0, "_"
	DCB	0x0, "S", 0x0, "E", 0x0, "R", 0x0, "I", 0x0, "A", 0x0, "L"
	DCB	0x0, "_", 0x0, "G", 0x0, "E", 0x0, "T", 0x0, "_", 0x0, "P"
	DCB	0x0, "R", 0x0, "O", 0x0, "P", 0x0, "E", 0x0, "R", 0x0, "T"
	DCB	0x0, "I", 0x0, "E", 0x0, "S", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@IBDHDHLD@?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAS?$AAE?$AAR?$AAI?$AAA?$AAL?$AA_?$AAG?$AAE?$AAT?$AA_?$AAM?$AAO?$AAD?$AAE?$AAM?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA?$AN?$AA?6?$AA?$AA@| DCB " "
	DCB	0x0, "I", 0x0, "O", 0x0, "C", 0x0, "T", 0x0, "L", 0x0, "_"
	DCB	0x0, "S", 0x0, "E", 0x0, "R", 0x0, "I", 0x0, "A", 0x0, "L"
	DCB	0x0, "_", 0x0, "G", 0x0, "E", 0x0, "T", 0x0, "_", 0x0, "M"
	DCB	0x0, "O", 0x0, "D", 0x0, "E", 0x0, "M", 0x0, "S", 0x0, "T"
	DCB	0x0, "A", 0x0, "T", 0x0, "U", 0x0, "S", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@GPNOPFOC@?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAS?$AAE?$AAR?$AAI?$AAA?$AAL?$AA_?$AAG?$AAE?$AAT?$AA_?$AAC?$AAO?$AAM?$AAM?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA?$AN?$AA?6?$AA?$AA@| DCB " "
	DCB	0x0, "I", 0x0, "O", 0x0, "C", 0x0, "T", 0x0, "L", 0x0, "_"
	DCB	0x0, "S", 0x0, "E", 0x0, "R", 0x0, "I", 0x0, "A", 0x0, "L"
	DCB	0x0, "_", 0x0, "G", 0x0, "E", 0x0, "T", 0x0, "_", 0x0, "C"
	DCB	0x0, "O", 0x0, "M", 0x0, "M", 0x0, "S", 0x0, "T", 0x0, "A"
	DCB	0x0, "T", 0x0, "U", 0x0, "S", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FE@DCNACOPO@?$AA?5?$AAC?$AAO?$AAM?$AA_?$AAI?$AAO?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?5?$AA?9?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAi?$AAn?$AA?5?$AAW?$AAa?$AAi?$AAt?$AAC?$AAo@| DCB " "
	DCB	0x0, "C", 0x0, "O", 0x0, "M", 0x0, "_", 0x0, "I", 0x0, "O"
	DCB	0x0, "C", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o"
	DCB	0x0, "l", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "E", 0x0, "r"
	DCB	0x0, "r", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "i", 0x0, "n"
	DCB	0x0, " ", 0x0, "W", 0x0, "a", 0x0, "i", 0x0, "t", 0x0, "C"
	DCB	0x0, "o", 0x0, "m", 0x0, "m", 0x0, "E", 0x0, "v", 0x0, "e"
	DCB	0x0, "n", 0x0, "t", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DK@MHHDNLMO@?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAS?$AAE?$AAR?$AAI?$AAA?$AAL?$AA_?$AAW?$AAA?$AAI?$AAT?$AA_?$AAO?$AAN?$AA_?$AAM?$AAA?$AAS?$AAK?$AA?$AN?$AA?6?$AA?$AA@| DCB " "
	DCB	0x0, "I", 0x0, "O", 0x0, "C", 0x0, "T", 0x0, "L", 0x0, "_"
	DCB	0x0, "S", 0x0, "E", 0x0, "R", 0x0, "I", 0x0, "A", 0x0, "L"
	DCB	0x0, "_", 0x0, "W", 0x0, "A", 0x0, "I", 0x0, "T", 0x0, "_"
	DCB	0x0, "O", 0x0, "N", 0x0, "_", 0x0, "M", 0x0, "A", 0x0, "S"
	DCB	0x0, "K", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FG@BOKINKK@?$AA?5?$AAS?$AAe?$AAt?$AAW?$AAa?$AAi?$AAt?$AAM?$AAa?$AAs?$AAk?$AA?5?$AA?9?$AA?5?$AAm?$AAa?$AAs?$AAk?$AA?5?$AAx?$AA?$CF?$AAX?$AA?0?$AA?5?$AAg?$AAl?$AAo?$AAb?$AAa?$AAl?$AA?5@| DCB " "
	DCB	0x0, "S", 0x0, "e", 0x0, "t", 0x0, "W", 0x0, "a", 0x0, "i"
	DCB	0x0, "t", 0x0, "M", 0x0, "a", 0x0, "s", 0x0, "k", 0x0, " "
	DCB	0x0, "-", 0x0, " ", 0x0, "m", 0x0, "a", 0x0, "s", 0x0, "k"
	DCB	0x0, " ", 0x0, "x", 0x0, "%", 0x0, "X", 0x0, ",", 0x0, " "
	DCB	0x0, "g", 0x0, "l", 0x0, "o", 0x0, "b", 0x0, "a", 0x0, "l"
	DCB	0x0, " ", 0x0, "m", 0x0, "a", 0x0, "s", 0x0, "k", 0x0, " "
	DCB	0x0, "x", 0x0, "%", 0x0, "X", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EK@BIBFMIMA@?$AA?5?$AAS?$AAe?$AAt?$AAW?$AAa?$AAi?$AAt?$AAM?$AAa?$AAs?$AAk?$AA?5?$AA?9?$AA?5?$AAh?$AAa?$AAn?$AAd?$AAl?$AAe?$AA?5?$AAx?$AA?$CF?$AAX?$AA?5?$AAm?$AAa?$AAs?$AAk?$AA?5?$AAx@| DCB " "
	DCB	0x0, "S", 0x0, "e", 0x0, "t", 0x0, "W", 0x0, "a", 0x0, "i"
	DCB	0x0, "t", 0x0, "M", 0x0, "a", 0x0, "s", 0x0, "k", 0x0, " "
	DCB	0x0, "-", 0x0, " ", 0x0, "h", 0x0, "a", 0x0, "n", 0x0, "d"
	DCB	0x0, "l", 0x0, "e", 0x0, " ", 0x0, "x", 0x0, "%", 0x0, "X"
	DCB	0x0, " ", 0x0, "m", 0x0, "a", 0x0, "s", 0x0, "k", 0x0, " "
	DCB	0x0, "x", 0x0, "%", 0x0, "X", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EG@JONHGGFH@?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAS?$AAE?$AAR?$AAI?$AAA?$AAL?$AA_?$AAS?$AAE?$AAT?$AA_?$AAW?$AAA?$AAI?$AAT?$AA_?$AAM?$AAA?$AAS?$AAK?$AA?5?$AA0?$AAx?$AA?$CF?$AAX@| DCB " "
	DCB	0x0, "I", 0x0, "O", 0x0, "C", 0x0, "T", 0x0, "L", 0x0, "_"
	DCB	0x0, "S", 0x0, "E", 0x0, "R", 0x0, "I", 0x0, "A", 0x0, "L"
	DCB	0x0, "_", 0x0, "S", 0x0, "E", 0x0, "T", 0x0, "_", 0x0, "W"
	DCB	0x0, "A", 0x0, "I", 0x0, "T", 0x0, "_", 0x0, "M", 0x0, "A"
	DCB	0x0, "S", 0x0, "K", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "X", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CK@EJMDEGNB@?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAp?$AAa?$AAr?$AAa?$AAm?$AAe?$AAt?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@| DCB " "
	DCB	0x0, "I", 0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i"
	DCB	0x0, "d", 0x0, " ", 0x0, "p", 0x0, "a", 0x0, "r", 0x0, "a"
	DCB	0x0, "m", 0x0, "e", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@BJAAJCOJ@?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAS?$AAE?$AAR?$AAI?$AAA?$AAL?$AA_?$AAG?$AAE?$AAT?$AA_?$AAW?$AAA?$AAI?$AAT?$AA_?$AAM?$AAA?$AAS?$AAK?$AA?$AN?$AA?6?$AA?$AA@| DCB " "
	DCB	0x0, "I", 0x0, "O", 0x0, "C", 0x0, "T", 0x0, "L", 0x0, "_"
	DCB	0x0, "S", 0x0, "E", 0x0, "R", 0x0, "I", 0x0, "A", 0x0, "L"
	DCB	0x0, "_", 0x0, "G", 0x0, "E", 0x0, "T", 0x0, "_", 0x0, "W"
	DCB	0x0, "A", 0x0, "I", 0x0, "T", 0x0, "_", 0x0, "M", 0x0, "A"
	DCB	0x0, "S", 0x0, "K", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@CLADOFAD@?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAS?$AAE?$AAR?$AAI?$AAA?$AAL?$AA_?$AAS?$AAE?$AAT?$AA_?$AAX?$AAO?$AAN?$AA?$AN?$AA?6?$AA?$AA@| DCB " "
	DCB	0x0, "I", 0x0, "O", 0x0, "C", 0x0, "T", 0x0, "L", 0x0, "_"
	DCB	0x0, "S", 0x0, "E", 0x0, "R", 0x0, "I", 0x0, "A", 0x0, "L"
	DCB	0x0, "_", 0x0, "S", 0x0, "E", 0x0, "T", 0x0, "_", 0x0, "X"
	DCB	0x0, "O", 0x0, "N", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DC@OONFCAKE@?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAS?$AAE?$AAR?$AAI?$AAA?$AAL?$AA_?$AAS?$AAE?$AAT?$AA_?$AAX?$AAO?$AAF?$AAF?$AA?$AN?$AA?6?$AA?$AA@| DCB " "
	DCB	0x0, "I", 0x0, "O", 0x0, "C", 0x0, "T", 0x0, "L", 0x0, "_"
	DCB	0x0, "S", 0x0, "E", 0x0, "R", 0x0, "I", 0x0, "A", 0x0, "L"
	DCB	0x0, "_", 0x0, "S", 0x0, "E", 0x0, "T", 0x0, "_", 0x0, "X"
	DCB	0x0, "O", 0x0, "F", 0x0, "F", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@LCJAIJKL@?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAS?$AAE?$AAR?$AAI?$AAA?$AAL?$AA_?$AAC?$AAL?$AAR?$AA_?$AAR?$AAT?$AAS?$AA?$AN?$AA?6?$AA?$AA@| DCB " "
	DCB	0x0, "I", 0x0, "O", 0x0, "C", 0x0, "T", 0x0, "L", 0x0, "_"
	DCB	0x0, "S", 0x0, "E", 0x0, "R", 0x0, "I", 0x0, "A", 0x0, "L"
	DCB	0x0, "_", 0x0, "C", 0x0, "L", 0x0, "R", 0x0, "_", 0x0, "R"
	DCB	0x0, "T", 0x0, "S", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@PJMEFDIH@?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAS?$AAE?$AAR?$AAI?$AAA?$AAL?$AA_?$AAS?$AAE?$AAT?$AA_?$AAR?$AAT?$AAS?$AA?$AN?$AA?6?$AA?$AA@| DCB " "
	DCB	0x0, "I", 0x0, "O", 0x0, "C", 0x0, "T", 0x0, "L", 0x0, "_"
	DCB	0x0, "S", 0x0, "E", 0x0, "R", 0x0, "I", 0x0, "A", 0x0, "L"
	DCB	0x0, "_", 0x0, "S", 0x0, "E", 0x0, "T", 0x0, "_", 0x0, "R"
	DCB	0x0, "T", 0x0, "S", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@JNBPMBCJ@?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAS?$AAE?$AAR?$AAI?$AAA?$AAL?$AA_?$AAC?$AAL?$AAR?$AA_?$AAD?$AAT?$AAR?$AA?$AN?$AA?6?$AA?$AA@| DCB " "
	DCB	0x0, "I", 0x0, "O", 0x0, "C", 0x0, "T", 0x0, "L", 0x0, "_"
	DCB	0x0, "S", 0x0, "E", 0x0, "R", 0x0, "I", 0x0, "A", 0x0, "L"
	DCB	0x0, "_", 0x0, "C", 0x0, "L", 0x0, "R", 0x0, "_", 0x0, "D"
	DCB	0x0, "T", 0x0, "R", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@NGELBLAF@?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAS?$AAE?$AAR?$AAI?$AAA?$AAL?$AA_?$AAS?$AAE?$AAT?$AA_?$AAD?$AAT?$AAR?$AA?$AN?$AA?6?$AA?$AA@| DCB " "
	DCB	0x0, "I", 0x0, "O", 0x0, "C", 0x0, "T", 0x0, "L", 0x0, "_"
	DCB	0x0, "S", 0x0, "E", 0x0, "R", 0x0, "I", 0x0, "A", 0x0, "L"
	DCB	0x0, "_", 0x0, "S", 0x0, "E", 0x0, "T", 0x0, "_", 0x0, "D"
	DCB	0x0, "T", 0x0, "R", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@GNACIDMB@?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAS?$AAE?$AAR?$AAI?$AAA?$AAL?$AA_?$AAS?$AAE?$AAT?$AA_?$AAB?$AAR?$AAE?$AAA?$AAK?$AA_?$AAO?$AAF?$AAF?$AA?$AN?$AA?6?$AA?$AA@| DCB " "
	DCB	0x0, "I", 0x0, "O", 0x0, "C", 0x0, "T", 0x0, "L", 0x0, "_"
	DCB	0x0, "S", 0x0, "E", 0x0, "R", 0x0, "I", 0x0, "A", 0x0, "L"
	DCB	0x0, "_", 0x0, "S", 0x0, "E", 0x0, "T", 0x0, "_", 0x0, "B"
	DCB	0x0, "R", 0x0, "E", 0x0, "A", 0x0, "K", 0x0, "_", 0x0, "O"
	DCB	0x0, "F", 0x0, "F", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DK@NGIHOHIF@?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAS?$AAE?$AAR?$AAI?$AAA?$AAL?$AA_?$AAS?$AAE?$AAT?$AA_?$AAB?$AAR?$AAE?$AAA?$AAK?$AA_?$AAO?$AAN?$AA?$AN?$AA?6?$AA?$AA@| DCB " "
	DCB	0x0, "I", 0x0, "O", 0x0, "C", 0x0, "T", 0x0, "L", 0x0, "_"
	DCB	0x0, "S", 0x0, "E", 0x0, "R", 0x0, "I", 0x0, "A", 0x0, "L"
	DCB	0x0, "_", 0x0, "S", 0x0, "E", 0x0, "T", 0x0, "_", 0x0, "B"
	DCB	0x0, "R", 0x0, "E", 0x0, "A", 0x0, "K", 0x0, "_", 0x0, "O"
	DCB	0x0, "N", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GI@OFPAKAHG@?$AAC?$AAO?$AAM?$AA_?$AAI?$AAo?$AAc?$AAt?$AAl?$AA?3?$AA?5?$AAI?$AAo?$AAc?$AAt?$AAl?$AA?5?$AA?$CF?$AAx?$AA?5?$AAa?$AAc?$AAc?$AAe?$AAs?$AAs?$AA?5?$AAp?$AAe?$AAr?$AAm?$AAi@| DCB "C"
	DCB	0x0, "O", 0x0, "M", 0x0, "_", 0x0, "I", 0x0, "o", 0x0, "c"
	DCB	0x0, "t", 0x0, "l", 0x0, ":", 0x0, " ", 0x0, "I", 0x0, "o"
	DCB	0x0, "c", 0x0, "t", 0x0, "l", 0x0, " ", 0x0, "%", 0x0, "x"
	DCB	0x0, " ", 0x0, "a", 0x0, "c", 0x0, "c", 0x0, "e", 0x0, "s"
	DCB	0x0, "s", 0x0, " ", 0x0, "p", 0x0, "e", 0x0, "r", 0x0, "m"
	DCB	0x0, "i", 0x0, "s", 0x0, "s", 0x0, "i", 0x0, "o", 0x0, "n"
	DCB	0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "u"
	DCB	0x0, "r", 0x0, "e", 0x0, " ", 0x0, "x", 0x0, "%", 0x0, "X"
	DCB	0x0, 0xa, 0x0, 0xd, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@DKOMLJNL@?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AA?5?$AAi?$AAs?$AA?5?$AAe?$AAx?$AAi?$AAt?$AAi?$AAn?$AAg?$AA?4?$AA?$AN?$AA?6?$AA?$AA@| DCB "P"
	DCB	0x0, "r", 0x0, "o", 0x0, "c", 0x0, "e", 0x0, "s", 0x0, "s"
	DCB	0x0, " ", 0x0, "i", 0x0, "s", 0x0, " ", 0x0, "e", 0x0, "x"
	DCB	0x0, "i", 0x0, "t", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, "."
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EK@GAFFJFEI@?$AA?5?$AAC?$AAO?$AAM?$AA_?$AAI?$AAO?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?5?$AA?9?$AA?5?$AAd?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAw?$AAa?$AAs?$AA?5?$AAc?$AAl?$AAo?$AAs@| DCB " "
	DCB	0x0, "C", 0x0, "O", 0x0, "M", 0x0, "_", 0x0, "I", 0x0, "O"
	DCB	0x0, "C", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o"
	DCB	0x0, "l", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "d", 0x0, "e"
	DCB	0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, " ", 0x0, "w"
	DCB	0x0, "a", 0x0, "s", 0x0, " ", 0x0, "c", 0x0, "l", 0x0, "o"
	DCB	0x0, "s", 0x0, "e", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GK@BPHGGHEJ@?$AA?$CL?$AAC?$AAO?$AAM?$AA_?$AAI?$AAO?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?$CI?$AA0?$AAx?$AA?$CF?$AAX?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AAX?$AA?0?$AA?5?$AA?$CF@| DCB "+"
	DCB	0x0, "C", 0x0, "O", 0x0, "M", 0x0, "_", 0x0, "I", 0x0, "O"
	DCB	0x0, "C", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o"
	DCB	0x0, "l", 0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "X"
	DCB	0x0, ",", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "X", 0x0, ",", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "X", 0x0, ",", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "X"
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@ENDIALIE@?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAo?$AAc?$AAt?$AAl?$AA?5?$AA0?$AAx?$AA?$CF?$AAX?$AA?$AN?$AA?6?$AA?$AA@| DCB " "
	DCB	0x0, "I", 0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i"
	DCB	0x0, "d", 0x0, " ", 0x0, "i", 0x0, "o", 0x0, "c", 0x0, "t"
	DCB	0x0, "l", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "X"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00018			 AREA	 |.xdata|, DATA
|$T42270| DCD	0xfffffea8
; Function compile flags: /Odtp

  05d00			 AREA	 |.text|, CODE, ARM

  05d00	00000000	 DCD         |__GSHandlerCheck|
  05d04	00000000	 DCD         |$T42270|

  05d08		 |COM_IOControl| PROC

; 2100 : {

  05d08		 |$LN296@COM_IOCont|
  05d08	e1a0c00d	 mov         r12, sp
  05d0c	e92d000f	 stmdb       sp!, {r0 - r3}
  05d10	e92d5010	 stmdb       sp!, {r4, r12, lr}
  05d14	e24ddf7b	 sub         sp, sp, #0x7B, 30
  05d18		 |$M42271|
  05d18	e59f3c64	 ldr         r3, [pc, #0xC64]
  05d1c	e5933000	 ldr         r3, [r3]
  05d20	e58d30b0	 str         r3, [sp, #0xB0]

; 2101 :     BOOL            RetVal           = TRUE;        // Initialize to success

  05d24	e3a03001	 mov         r3, #1
  05d28	e58d3010	 str         r3, [sp, #0x10]

; 2102 :     PHW_INDEP_INFO  pHWIHead; //= pOpenHead->pSerialHead;
; 2103 :     PLIST_ENTRY     pEntry;
; 2104 :     PHWOBJ          pHWObj   = NULL;

  05d2c	e3a03000	 mov         r3, #0
  05d30	e58d3018	 str         r3, [sp, #0x18]

; 2105 :     PVOID           pHWHead  = NULL;

  05d34	e3a03000	 mov         r3, #0
  05d38	e58d3028	 str         r3, [sp, #0x28]

; 2106 :     PHW_VTBL        pFuncTbl = NULL;

  05d3c	e3a03000	 mov         r3, #0
  05d40	e58d301c	 str         r3, [sp, #0x1C]

; 2107 :     UCHAR           stopbits = 0;

  05d44	e3a03000	 mov         r3, #0
  05d48	e5cd302c	 strb        r3, [sp, #0x2C]

; 2108 :     DWORD           dwFlags;
; 2109 : 
; 2110 :     if (pOpenHead==NULL) {

  05d4c	e59d31f8	 ldr         r3, [sp, #0x1F8]
  05d50	e3530000	 cmp         r3, #0
  05d54	1a000006	 bne         |$LN93@COM_IOCont|

; 2111 :         SetLastError (ERROR_INVALID_HANDLE);

  05d58	e3a00006	 mov         r0, #6
  05d5c	eb000000	 bl          SetLastError

; 2112 :         return(FALSE);

  05d60	e59d00b0	 ldr         r0, [sp, #0xB0]
  05d64	eb000000	 bl          __security_check_cookie
  05d68	e3a03000	 mov         r3, #0
  05d6c	e58d30b4	 str         r3, [sp, #0xB4]
  05d70	ea0006f2	 b           |$LN94@COM_IOCont|
  05d74		 |$LN93@COM_IOCont|

; 2113 :     }
; 2114 :     pHWIHead = pOpenHead->pSerialHead;

  05d74	e59d31f8	 ldr         r3, [sp, #0x1F8]
  05d78	e5933000	 ldr         r3, [r3]
  05d7c	e58d3020	 str         r3, [sp, #0x20]

; 2115 :     if ( pHWIHead ) {

  05d80	e59d3020	 ldr         r3, [sp, #0x20]
  05d84	e3530000	 cmp         r3, #0
  05d88	0a00000c	 beq         |$LN92@COM_IOCont|

; 2116 :         pHWObj   = (PHWOBJ)pHWIHead->pHWObj;

  05d8c	e59d3020	 ldr         r3, [sp, #0x20]
  05d90	e2833028	 add         r3, r3, #0x28
  05d94	e5933000	 ldr         r3, [r3]
  05d98	e58d3018	 str         r3, [sp, #0x18]

; 2117 :         pFuncTbl = pHWObj->pFuncTbl;

  05d9c	e59d3018	 ldr         r3, [sp, #0x18]
  05da0	e2833008	 add         r3, r3, #8
  05da4	e5933000	 ldr         r3, [r3]
  05da8	e58d301c	 str         r3, [sp, #0x1C]

; 2118 :         pHWHead  = pHWIHead->pHWHead;

  05dac	e59d3020	 ldr         r3, [sp, #0x20]
  05db0	e283302c	 add         r3, r3, #0x2C
  05db4	e5933000	 ldr         r3, [r3]
  05db8	e58d3028	 str         r3, [sp, #0x28]

; 2119 :     } else {

  05dbc	ea000006	 b           |$LN91@COM_IOCont|
  05dc0		 |$LN92@COM_IOCont|

; 2120 :         SetLastError (ERROR_INVALID_HANDLE);

  05dc0	e3a00006	 mov         r0, #6
  05dc4	eb000000	 bl          SetLastError

; 2121 :         return(FALSE);

  05dc8	e59d00b0	 ldr         r0, [sp, #0xB0]
  05dcc	eb000000	 bl          __security_check_cookie
  05dd0	e3a03000	 mov         r3, #0
  05dd4	e58d30b4	 str         r3, [sp, #0xB4]
  05dd8	ea0006d8	 b           |$LN94@COM_IOCont|
  05ddc		 |$LN91@COM_IOCont|

; 2122 :     }
; 2123 : 
; 2124 :     if (((pOpenHead->AccessCode & DEVACCESS_BUSNAMESPACE)!=0) ||
; 2125 :         ((pOpenHead->ShareMode & DEVACCESS_PMEXT_MODE) != 0)){ // Special IOCTL

  05ddc	e59d31f8	 ldr         r3, [sp, #0x1F8]
  05de0	e2833004	 add         r3, r3, #4
  05de4	e5933000	 ldr         r3, [r3]
  05de8	e3130c01	 tst         r3, #1, 24
  05dec	1a000004	 bne         |$LN89@COM_IOCont|
  05df0	e59d31f8	 ldr         r3, [sp, #0x1F8]
  05df4	e2833008	 add         r3, r3, #8
  05df8	e5933000	 ldr         r3, [r3]
  05dfc	e3130102	 tst         r3, #2, 2
  05e00	0a000052	 beq         |$LN90@COM_IOCont|
  05e04		 |$LN89@COM_IOCont|

; 2126 :         switch (dwCode) {

  05e04	e59d31fc	 ldr         r3, [sp, #0x1FC]
  05e08	e58d30e8	 str         r3, [sp, #0xE8]
  05e0c	e59d20e8	 ldr         r2, [sp, #0xE8]
  05e10	e59f3b4c	 ldr         r3, [pc, #0xB4C]
  05e14	e1520003	 cmp         r2, r3
  05e18	8a000011	 bhi         |$LN98@COM_IOCont|
  05e1c	e59d20e8	 ldr         r2, [sp, #0xE8]
  05e20	e59f3b3c	 ldr         r3, [pc, #0xB3C]
  05e24	e1520003	 cmp         r2, r3
  05e28	0a000016	 beq         |$LN86@COM_IOCont|
  05e2c	e59d20e8	 ldr         r2, [sp, #0xE8]
  05e30	e3a03832	 mov         r3, #0x32, 16
  05e34	e3833a01	 orr         r3, r3, #1, 20
  05e38	e1520003	 cmp         r2, r3
  05e3c	0a000011	 beq         |$LN86@COM_IOCont|
  05e40	e59d20e8	 ldr         r2, [sp, #0xE8]
  05e44	e59f3b34	 ldr         r3, [pc, #0xB34]
  05e48	e1520003	 cmp         r2, r3
  05e4c	0a00000d	 beq         |$LN86@COM_IOCont|
  05e50	e59d20e8	 ldr         r2, [sp, #0xE8]
  05e54	e59f3b04	 ldr         r3, [pc, #0xB04]
  05e58	e1520003	 cmp         r2, r3
  05e5c	0a000009	 beq         |$LN86@COM_IOCont|
  05e60	ea000031	 b           |$LN83@COM_IOCont|
  05e64		 |$LN98@COM_IOCont|
  05e64	e59d20e8	 ldr         r2, [sp, #0xE8]
  05e68	e59f3b0c	 ldr         r3, [pc, #0xB0C]
  05e6c	e1520003	 cmp         r2, r3
  05e70	0a000004	 beq         |$LN86@COM_IOCont|
  05e74	e59d20e8	 ldr         r2, [sp, #0xE8]
  05e78	e59f3adc	 ldr         r3, [pc, #0xADC]
  05e7c	e1520003	 cmp         r2, r3
  05e80	0a000000	 beq         |$LN86@COM_IOCont|
  05e84	ea000028	 b           |$LN83@COM_IOCont|
  05e88		 |$LN86@COM_IOCont|

; 2127 :         case IOCTL_POWER_CAPABILITIES:case IOCTL_POWER_SET:case IOCTL_POWER_GET:
; 2128 :         case IOCTL_POWER_QUERY:case IOCTL_REGISTER_POWER_RELATIONSHIP:
; 2129 :         case IOCTL_CONTEXT_RESTORE:
; 2130 :             // Power is Handle by PDD.
; 2131 :             // Pass IOCTL through to PDD if hook is provided
; 2132 :             if ( (pFuncTbl->HWIoctl == NULL) ||
; 2133 :                  (pFuncTbl->HWIoctl(pHWHead,dwCode,pBufIn,dwLenIn,pBufOut,dwLenOut, pdwActualOut) == FALSE)) {

  05e88	e59d301c	 ldr         r3, [sp, #0x1C]
  05e8c	e2833074	 add         r3, r3, #0x74
  05e90	e5933000	 ldr         r3, [r3]
  05e94	e3530000	 cmp         r3, #0
  05e98	0a000012	 beq         |$LN84@COM_IOCont|
  05e9c	e59d3210	 ldr         r3, [sp, #0x210]
  05ea0	e58d3008	 str         r3, [sp, #8]
  05ea4	e59d320c	 ldr         r3, [sp, #0x20C]
  05ea8	e58d3004	 str         r3, [sp, #4]
  05eac	e59d3208	 ldr         r3, [sp, #0x208]
  05eb0	e58d3000	 str         r3, [sp]
  05eb4	e59d3204	 ldr         r3, [sp, #0x204]
  05eb8	e59d2200	 ldr         r2, [sp, #0x200]
  05ebc	e59d11fc	 ldr         r1, [sp, #0x1FC]
  05ec0	e59d0028	 ldr         r0, [sp, #0x28]
  05ec4	e59de01c	 ldr         lr, [sp, #0x1C]
  05ec8	e28ee074	 add         lr, lr, #0x74
  05ecc	e59e4000	 ldr         r4, [lr]
  05ed0	e1a0e00f	 mov         lr, pc
  05ed4	e12fff14	 bx          r4
  05ed8	e58d00ec	 str         r0, [sp, #0xEC]
  05edc	e59d30ec	 ldr         r3, [sp, #0xEC]
  05ee0	e3530000	 cmp         r3, #0
  05ee4	1a00000f	 bne         |$LN85@COM_IOCont|
  05ee8		 |$LN84@COM_IOCont|

; 2134 :                 SetLastError (ERROR_INVALID_PARAMETER);

  05ee8	e3a00057	 mov         r0, #0x57
  05eec	eb000000	 bl          SetLastError

; 2135 :                 RetVal = FALSE;

  05ef0	e3a03000	 mov         r3, #0
  05ef4	e58d3010	 str         r3, [sp, #0x10]

; 2136 :                 DEBUGMSG (ZONE_IOCTL, (TEXT(" Invalid ioctl 0x%X\r\n"), dwCode));

  05ef8	e59f3a28	 ldr         r3, [pc, #0xA28]
  05efc	e5933440	 ldr         r3, [r3, #0x440]
  05f00	e3130020	 tst         r3, #0x20
  05f04	0a000005	 beq         |$LN96@COM_IOCont|
  05f08	e59d11fc	 ldr         r1, [sp, #0x1FC]
  05f0c	e59f0a64	 ldr         r0, [pc, #0xA64]
  05f10	eb000000	 bl          NKDbgPrintfW
  05f14	e3a03001	 mov         r3, #1
  05f18	e58d30f0	 str         r3, [sp, #0xF0]
  05f1c	ea000001	 b           |$LN97@COM_IOCont|
  05f20		 |$LN96@COM_IOCont|
  05f20	e3a03000	 mov         r3, #0
  05f24	e58d30f0	 str         r3, [sp, #0xF0]
  05f28		 |$LN97@COM_IOCont|
  05f28		 |$LN85@COM_IOCont|

; 2137 :             }
; 2138 :             break;

  05f28	ea000003	 b           |$LN87@COM_IOCont|
  05f2c		 |$LN83@COM_IOCont|

; 2139 :         default:
; 2140 :             SetLastError (ERROR_INVALID_HANDLE);

  05f2c	e3a00006	 mov         r0, #6
  05f30	eb000000	 bl          SetLastError

; 2141 :             RetVal = FALSE;

  05f34	e3a03000	 mov         r3, #0
  05f38	e58d3010	 str         r3, [sp, #0x10]
  05f3c		 |$LN87@COM_IOCont|

; 2142 :             break;
; 2143 :         }
; 2144 :         return RetVal;

  05f3c	e59d00b0	 ldr         r0, [sp, #0xB0]
  05f40	eb000000	 bl          __security_check_cookie
  05f44	e59d3010	 ldr         r3, [sp, #0x10]
  05f48	e58d30b4	 str         r3, [sp, #0xB4]
  05f4c	ea00067b	 b           |$LN94@COM_IOCont|
  05f50		 |$LN90@COM_IOCont|

; 2145 :     }
; 2146 : 
; 2147 :     DEBUGMSG (ZONE_IOCTL|ZONE_FUNCTION,
; 2148 :               (TEXT("+COM_IOControl(0x%X, %d, 0x%X, %d, 0x%X, %d, 0x%X)\r\n"),
; 2149 :                pOpenHead, dwCode, pBufIn, dwLenIn, pBufOut,
; 2150 :                dwLenOut, pdwActualOut));

  05f50	e59f39d0	 ldr         r3, [pc, #0x9D0]
  05f54	e5933440	 ldr         r3, [r3, #0x440]
  05f58	e2032020	 and         r2, r3, #0x20
  05f5c	e59f39c4	 ldr         r3, [pc, #0x9C4]
  05f60	e5933440	 ldr         r3, [r3, #0x440]
  05f64	e2033a02	 and         r3, r3, #2, 20
  05f68	e1923003	 orrs        r3, r2, r3
  05f6c	0a00000f	 beq         |$LN99@COM_IOCont|
  05f70	e59d3210	 ldr         r3, [sp, #0x210]
  05f74	e58d300c	 str         r3, [sp, #0xC]
  05f78	e59d320c	 ldr         r3, [sp, #0x20C]
  05f7c	e58d3008	 str         r3, [sp, #8]
  05f80	e59d3208	 ldr         r3, [sp, #0x208]
  05f84	e58d3004	 str         r3, [sp, #4]
  05f88	e59d3204	 ldr         r3, [sp, #0x204]
  05f8c	e58d3000	 str         r3, [sp]
  05f90	e59d3200	 ldr         r3, [sp, #0x200]
  05f94	e59d21fc	 ldr         r2, [sp, #0x1FC]
  05f98	e59d11f8	 ldr         r1, [sp, #0x1F8]
  05f9c	e59f09d0	 ldr         r0, [pc, #0x9D0]
  05fa0	eb000000	 bl          NKDbgPrintfW
  05fa4	e3a03001	 mov         r3, #1
  05fa8	e58d30f4	 str         r3, [sp, #0xF4]
  05fac	ea000001	 b           |$LN100@COM_IOCont|
  05fb0		 |$LN99@COM_IOCont|
  05fb0	e3a03000	 mov         r3, #0
  05fb4	e58d30f4	 str         r3, [sp, #0xF4]
  05fb8		 |$LN100@COM_IOCont|

; 2151 : 
; 2152 :     if ( !pHWIHead->OpenCnt ) {

  05fb8	e59d3020	 ldr         r3, [sp, #0x20]
  05fbc	e2833090	 add         r3, r3, #0x90
  05fc0	e5933000	 ldr         r3, [r3]
  05fc4	e3530000	 cmp         r3, #0
  05fc8	1a000015	 bne         |$LN82@COM_IOCont|

; 2153 :         DEBUGMSG (ZONE_IOCTL|ZONE_ERROR,
; 2154 :                   (TEXT(" COM_IOControl - device was closed\r\n")));

  05fcc	e59f3954	 ldr         r3, [pc, #0x954]
  05fd0	e5933440	 ldr         r3, [r3, #0x440]
  05fd4	e2032020	 and         r2, r3, #0x20
  05fd8	e59f3948	 ldr         r3, [pc, #0x948]
  05fdc	e5933440	 ldr         r3, [r3, #0x440]
  05fe0	e2033902	 and         r3, r3, #2, 18
  05fe4	e1923003	 orrs        r3, r2, r3
  05fe8	0a000004	 beq         |$LN101@COM_IOCont|
  05fec	e59f097c	 ldr         r0, [pc, #0x97C]
  05ff0	eb000000	 bl          NKDbgPrintfW
  05ff4	e3a03001	 mov         r3, #1
  05ff8	e58d30f8	 str         r3, [sp, #0xF8]
  05ffc	ea000001	 b           |$LN102@COM_IOCont|
  06000		 |$LN101@COM_IOCont|
  06000	e3a03000	 mov         r3, #0
  06004	e58d30f8	 str         r3, [sp, #0xF8]
  06008		 |$LN102@COM_IOCont|

; 2155 :         SetLastError (ERROR_INVALID_HANDLE);

  06008	e3a00006	 mov         r0, #6
  0600c	eb000000	 bl          SetLastError

; 2156 :         return(FALSE);

  06010	e59d00b0	 ldr         r0, [sp, #0xB0]
  06014	eb000000	 bl          __security_check_cookie
  06018	e3a03000	 mov         r3, #0
  0601c	e58d30b4	 str         r3, [sp, #0xB4]
  06020	ea000646	 b           |$LN94@COM_IOCont|
  06024		 |$LN82@COM_IOCont|

; 2157 :     }
; 2158 : 
; 2159 :     if ( dwCode == IOCTL_PSL_NOTIFY ) {

  06024	e59d21fc	 ldr         r2, [sp, #0x1FC]
  06028	e59f393c	 ldr         r3, [pc, #0x93C]
  0602c	e1520003	 cmp         r2, r3
  06030	1a00001c	 bne         |$LN81@COM_IOCont|

; 2160 :         PDEVICE_PSL_NOTIFY pPslPacket = (PDEVICE_PSL_NOTIFY)pBufIn;

  06034	e59d3200	 ldr         r3, [sp, #0x200]
  06038	e58d3030	 str         r3, [sp, #0x30]

; 2161 :         if ( (pPslPacket->dwSize == sizeof(DEVICE_PSL_NOTIFY)) && (pPslPacket->dwFlags == DLL_PROCESS_EXITING) ) {

  0603c	e59d3030	 ldr         r3, [sp, #0x30]
  06040	e5933000	 ldr         r3, [r3]
  06044	e3530010	 cmp         r3, #0x10
  06048	1a000011	 bne         |$LN80@COM_IOCont|
  0604c	e59d3030	 ldr         r3, [sp, #0x30]
  06050	e2833004	 add         r3, r3, #4
  06054	e5933000	 ldr         r3, [r3]
  06058	e3530004	 cmp         r3, #4
  0605c	1a00000c	 bne         |$LN80@COM_IOCont|

; 2162 :             DEBUGMSG(ZONE_IOCTL, (TEXT("Process is exiting.\r\n")));

  06060	e59f38c0	 ldr         r3, [pc, #0x8C0]
  06064	e5933440	 ldr         r3, [r3, #0x440]
  06068	e3130020	 tst         r3, #0x20
  0606c	0a000004	 beq         |$LN103@COM_IOCont|
  06070	e59f08f0	 ldr         r0, [pc, #0x8F0]
  06074	eb000000	 bl          NKDbgPrintfW
  06078	e3a03001	 mov         r3, #1
  0607c	e58d30fc	 str         r3, [sp, #0xFC]
  06080	ea000001	 b           |$LN104@COM_IOCont|
  06084		 |$LN103@COM_IOCont|
  06084	e3a03000	 mov         r3, #0
  06088	e58d30fc	 str         r3, [sp, #0xFC]
  0608c		 |$LN104@COM_IOCont|

; 2163 :             ProcessExiting(pOpenHead);

  0608c	e59d01f8	 ldr         r0, [sp, #0x1F8]
  06090	eb000000	 bl          ProcessExiting
  06094		 |$LN80@COM_IOCont|

; 2164 :         }
; 2165 :         return (TRUE);

  06094	e59d00b0	 ldr         r0, [sp, #0xB0]
  06098	eb000000	 bl          __security_check_cookie
  0609c	e3a03001	 mov         r3, #1
  060a0	e58d30b4	 str         r3, [sp, #0xB4]
  060a4	ea000625	 b           |$LN94@COM_IOCont|
  060a8		 |$LN81@COM_IOCont|

; 2166 :     }
; 2167 :     // Make sure the caller has access permissions
; 2168 :     // NOTE : Pay attention here.  I hate to make this check repeatedly
; 2169 :     // below, so I'll optimize it here.  But as you add new ioctl's be
; 2170 :     // sure to account for them in this if check.
; 2171 :     if ( !( (dwCode == IOCTL_SERIAL_GET_WAIT_MASK) ||
; 2172 :             (dwCode == IOCTL_SERIAL_SET_WAIT_MASK) ||
; 2173 :             (dwCode == IOCTL_SERIAL_WAIT_ON_MASK) ||
; 2174 :             (dwCode == IOCTL_SERIAL_GET_MODEMSTATUS) ||
; 2175 :             (dwCode == IOCTL_SERIAL_GET_PROPERTIES) ||
; 2176 :             (dwCode == IOCTL_SERIAL_GET_TIMEOUTS) ||
; 2177 :             (dwCode == IOCTL_POWER_CAPABILITIES) ||
; 2178 :             (dwCode == IOCTL_POWER_QUERY) ||
; 2179 :             (dwCode == IOCTL_POWER_SET) ||
; 2180 :             (dwCode == IOCTL_CONTEXT_RESTORE) ) ) {

  060a8	e59d21fc	 ldr         r2, [sp, #0x1FC]
  060ac	e3a0381b	 mov         r3, #0x1B, 16
  060b0	e3833024	 orr         r3, r3, #0x24
  060b4	e1520003	 cmp         r2, r3
  060b8	0a000048	 beq         |$LN79@COM_IOCont|
  060bc	e59d21fc	 ldr         r2, [sp, #0x1FC]
  060c0	e3a0381b	 mov         r3, #0x1B, 16
  060c4	e3833028	 orr         r3, r3, #0x28
  060c8	e1520003	 cmp         r2, r3
  060cc	0a000043	 beq         |$LN79@COM_IOCont|
  060d0	e59d21fc	 ldr         r2, [sp, #0x1FC]
  060d4	e3a0381b	 mov         r3, #0x1B, 16
  060d8	e383302c	 orr         r3, r3, #0x2C
  060dc	e1520003	 cmp         r2, r3
  060e0	0a00003e	 beq         |$LN79@COM_IOCont|
  060e4	e59d21fc	 ldr         r2, [sp, #0x1FC]
  060e8	e3a0381b	 mov         r3, #0x1B, 16
  060ec	e3833034	 orr         r3, r3, #0x34
  060f0	e1520003	 cmp         r2, r3
  060f4	0a000039	 beq         |$LN79@COM_IOCont|
  060f8	e59d21fc	 ldr         r2, [sp, #0x1FC]
  060fc	e3a0381b	 mov         r3, #0x1B, 16
  06100	e3833038	 orr         r3, r3, #0x38
  06104	e1520003	 cmp         r2, r3
  06108	0a000034	 beq         |$LN79@COM_IOCont|
  0610c	e59d21fc	 ldr         r2, [sp, #0x1FC]
  06110	e3a0381b	 mov         r3, #0x1B, 16
  06114	e3833040	 orr         r3, r3, #0x40
  06118	e1520003	 cmp         r2, r3
  0611c	0a00002f	 beq         |$LN79@COM_IOCont|
  06120	e59d21fc	 ldr         r2, [sp, #0x1FC]
  06124	e3a03832	 mov         r3, #0x32, 16
  06128	e3833a01	 orr         r3, r3, #1, 20
  0612c	e1520003	 cmp         r2, r3
  06130	0a00002a	 beq         |$LN79@COM_IOCont|
  06134	e59d21fc	 ldr         r2, [sp, #0x1FC]
  06138	e59f3824	 ldr         r3, [pc, #0x824]
  0613c	e1520003	 cmp         r2, r3
  06140	0a000026	 beq         |$LN79@COM_IOCont|
  06144	e59d21fc	 ldr         r2, [sp, #0x1FC]
  06148	e59f3810	 ldr         r3, [pc, #0x810]
  0614c	e1520003	 cmp         r2, r3
  06150	0a000022	 beq         |$LN79@COM_IOCont|
  06154	e59d21fc	 ldr         r2, [sp, #0x1FC]
  06158	e59f37fc	 ldr         r3, [pc, #0x7FC]
  0615c	e1520003	 cmp         r2, r3
  06160	0a00001e	 beq         |$LN79@COM_IOCont|

; 2181 :         // If not one of the above operations, then read or write
; 2182 :         // access permissions are required.
; 2183 :         if ( !(pOpenHead->AccessCode & (GENERIC_READ | GENERIC_WRITE) ) ) {

  06164	e59d31f8	 ldr         r3, [sp, #0x1F8]
  06168	e2833004	 add         r3, r3, #4
  0616c	e5933000	 ldr         r3, [r3]
  06170	e3130103	 tst         r3, #3, 2
  06174	1a000019	 bne         |$LN78@COM_IOCont|

; 2184 :             DEBUGMSG(ZONE_IOCTL|ZONE_ERROR,
; 2185 :                      (TEXT("COM_Ioctl: Ioctl %x access permission failure x%X\n\r"),
; 2186 :                       dwCode, pOpenHead->AccessCode));

  06178	e59f37a8	 ldr         r3, [pc, #0x7A8]
  0617c	e5933440	 ldr         r3, [r3, #0x440]
  06180	e2032020	 and         r2, r3, #0x20
  06184	e59f379c	 ldr         r3, [pc, #0x79C]
  06188	e5933440	 ldr         r3, [r3, #0x440]
  0618c	e2033902	 and         r3, r3, #2, 18
  06190	e1923003	 orrs        r3, r2, r3
  06194	0a000008	 beq         |$LN105@COM_IOCont|
  06198	e59d31f8	 ldr         r3, [sp, #0x1F8]
  0619c	e2833004	 add         r3, r3, #4
  061a0	e5932000	 ldr         r2, [r3]
  061a4	e59d11fc	 ldr         r1, [sp, #0x1FC]
  061a8	e59f07a8	 ldr         r0, [pc, #0x7A8]
  061ac	eb000000	 bl          NKDbgPrintfW
  061b0	e3a03001	 mov         r3, #1
  061b4	e58d3100	 str         r3, [sp, #0x100]
  061b8	ea000001	 b           |$LN106@COM_IOCont|
  061bc		 |$LN105@COM_IOCont|
  061bc	e3a03000	 mov         r3, #0
  061c0	e58d3100	 str         r3, [sp, #0x100]
  061c4		 |$LN106@COM_IOCont|

; 2187 :             SetLastError (ERROR_INVALID_ACCESS);

  061c4	e3a0000c	 mov         r0, #0xC
  061c8	eb000000	 bl          SetLastError

; 2188 :             return(FALSE);

  061cc	e59d00b0	 ldr         r0, [sp, #0xB0]
  061d0	eb000000	 bl          __security_check_cookie
  061d4	e3a03000	 mov         r3, #0
  061d8	e58d30b4	 str         r3, [sp, #0xB4]
  061dc	ea0005d7	 b           |$LN94@COM_IOCont|
  061e0		 |$LN78@COM_IOCont|
  061e0		 |$LN79@COM_IOCont|

; 2189 :         }
; 2190 : 
; 2191 :     }
; 2192 : 
; 2193 :     COM_INC_USAGE_CNT(pOpenHead);

  061e0	e59d31f8	 ldr         r3, [sp, #0x1F8]
  061e4	e283000c	 add         r0, r3, #0xC
  061e8	eb000000	 bl          InterlockedIncrement

; 2194 : 
; 2195 :     switch ( dwCode ) {

  061ec	e59d31fc	 ldr         r3, [sp, #0x1FC]
  061f0	e58d3104	 str         r3, [sp, #0x104]
  061f4	e59d2104	 ldr         r2, [sp, #0x104]
  061f8	e3a0381b	 mov         r3, #0x1B, 16
  061fc	e3833004	 orr         r3, r3, #4
  06200	e0423003	 sub         r3, r2, r3
  06204	e58d3104	 str         r3, [sp, #0x104]
  06208	e59d3104	 ldr         r3, [sp, #0x104]
  0620c	e3530058	 cmp         r3, #0x58
  06210	8a00056a	 bhi         |$LN3@COM_IOCont|
  06214	e59d2104	 ldr         r2, [sp, #0x104]
  06218	e1a03102	 mov         r3, r2, lsl #2
  0621c	e083300f	 add         r3, r3, pc
  06220	e5933004	 ldr         r3, [r3, #4]
  06224	e08ff003	 add         pc, pc, r3
  06228		 |$LN204@COM_IOCont|
  06228		 |$LN203@COM_IOCont|
  06228		 |$LN205@COM_IOCont|
  06228	00000160	 DCD         0x160
  0622c		 |$LN206@COM_IOCont|
  0622c	00001594	 DCD         0x1594
  06230		 |$LN207@COM_IOCont|
  06230	00001594	 DCD         0x1594
  06234		 |$LN208@COM_IOCont|
  06234	00001594	 DCD         0x1594
  06238		 |$LN209@COM_IOCont|
  06238	000001a8	 DCD         0x1a8
  0623c		 |$LN210@COM_IOCont|
  0623c	00001594	 DCD         0x1594
  06240		 |$LN211@COM_IOCont|
  06240	00001594	 DCD         0x1594
  06244		 |$LN212@COM_IOCont|
  06244	00001594	 DCD         0x1594
  06248		 |$LN213@COM_IOCont|
  06248	000001f0	 DCD         0x1f0
  0624c		 |$LN214@COM_IOCont|
  0624c	00001594	 DCD         0x1594
  06250		 |$LN215@COM_IOCont|
  06250	00001594	 DCD         0x1594
  06254		 |$LN216@COM_IOCont|
  06254	00001594	 DCD         0x1594
  06258		 |$LN217@COM_IOCont|
  06258	00000268	 DCD         0x268
  0625c		 |$LN218@COM_IOCont|
  0625c	00001594	 DCD         0x1594
  06260		 |$LN219@COM_IOCont|
  06260	00001594	 DCD         0x1594
  06264		 |$LN220@COM_IOCont|
  06264	00001594	 DCD         0x1594
  06268		 |$LN221@COM_IOCont|
  06268	000002e0	 DCD         0x2e0
  0626c		 |$LN222@COM_IOCont|
  0626c	00001594	 DCD         0x1594
  06270		 |$LN223@COM_IOCont|
  06270	00001594	 DCD         0x1594
  06274		 |$LN224@COM_IOCont|
  06274	00001594	 DCD         0x1594
  06278		 |$LN225@COM_IOCont|
  06278	00000358	 DCD         0x358
  0627c		 |$LN226@COM_IOCont|
  0627c	00001594	 DCD         0x1594
  06280		 |$LN227@COM_IOCont|
  06280	00001594	 DCD         0x1594
  06284		 |$LN228@COM_IOCont|
  06284	00001594	 DCD         0x1594
  06288		 |$LN229@COM_IOCont|
  06288	000003d0	 DCD         0x3d0
  0628c		 |$LN230@COM_IOCont|
  0628c	00001594	 DCD         0x1594
  06290		 |$LN231@COM_IOCont|
  06290	00001594	 DCD         0x1594
  06294		 |$LN232@COM_IOCont|
  06294	00001594	 DCD         0x1594
  06298		 |$LN233@COM_IOCont|
  06298	0000045c	 DCD         0x45c
  0629c		 |$LN234@COM_IOCont|
  0629c	00001594	 DCD         0x1594
  062a0		 |$LN235@COM_IOCont|
  062a0	00001594	 DCD         0x1594
  062a4		 |$LN236@COM_IOCont|
  062a4	00001594	 DCD         0x1594
  062a8		 |$LN237@COM_IOCont|
  062a8	000004f0	 DCD         0x4f0
  062ac		 |$LN238@COM_IOCont|
  062ac	00001594	 DCD         0x1594
  062b0		 |$LN239@COM_IOCont|
  062b0	00001594	 DCD         0x1594
  062b4		 |$LN240@COM_IOCont|
  062b4	00001594	 DCD         0x1594
  062b8		 |$LN241@COM_IOCont|
  062b8	000005a4	 DCD         0x5a4
  062bc		 |$LN242@COM_IOCont|
  062bc	00001594	 DCD         0x1594
  062c0		 |$LN243@COM_IOCont|
  062c0	00001594	 DCD         0x1594
  062c4		 |$LN244@COM_IOCont|
  062c4	00001594	 DCD         0x1594
  062c8		 |$LN245@COM_IOCont|
  062c8	000007e4	 DCD         0x7e4
  062cc		 |$LN246@COM_IOCont|
  062cc	00001594	 DCD         0x1594
  062d0		 |$LN247@COM_IOCont|
  062d0	00001594	 DCD         0x1594
  062d4		 |$LN248@COM_IOCont|
  062d4	00001594	 DCD         0x1594
  062d8		 |$LN249@COM_IOCont|
  062d8	00000900	 DCD         0x900
  062dc		 |$LN250@COM_IOCont|
  062dc	00001594	 DCD         0x1594
  062e0		 |$LN251@COM_IOCont|
  062e0	00001594	 DCD         0x1594
  062e4		 |$LN252@COM_IOCont|
  062e4	00001594	 DCD         0x1594
  062e8		 |$LN253@COM_IOCont|
  062e8	00000a90	 DCD         0xa90
  062ec		 |$LN254@COM_IOCont|
  062ec	00001594	 DCD         0x1594
  062f0		 |$LN255@COM_IOCont|
  062f0	00001594	 DCD         0x1594
  062f4		 |$LN256@COM_IOCont|
  062f4	00001594	 DCD         0x1594
  062f8		 |$LN257@COM_IOCont|
  062f8	00000b60	 DCD         0xb60
  062fc		 |$LN258@COM_IOCont|
  062fc	00001594	 DCD         0x1594
  06300		 |$LN259@COM_IOCont|
  06300	00001594	 DCD         0x1594
  06304		 |$LN260@COM_IOCont|
  06304	00001594	 DCD         0x1594
  06308		 |$LN261@COM_IOCont|
  06308	00000c3c	 DCD         0xc3c
  0630c		 |$LN262@COM_IOCont|
  0630c	00001594	 DCD         0x1594
  06310		 |$LN263@COM_IOCont|
  06310	00001594	 DCD         0x1594
  06314		 |$LN264@COM_IOCont|
  06314	00001594	 DCD         0x1594
  06318		 |$LN265@COM_IOCont|
  06318	00000d3c	 DCD         0xd3c
  0631c		 |$LN266@COM_IOCont|
  0631c	00001594	 DCD         0x1594
  06320		 |$LN267@COM_IOCont|
  06320	00001594	 DCD         0x1594
  06324		 |$LN268@COM_IOCont|
  06324	00001594	 DCD         0x1594
  06328		 |$LN269@COM_IOCont|
  06328	00000e00	 DCD         0xe00
  0632c		 |$LN270@COM_IOCont|
  0632c	00001594	 DCD         0x1594
  06330		 |$LN271@COM_IOCont|
  06330	00001594	 DCD         0x1594
  06334		 |$LN272@COM_IOCont|
  06334	00001594	 DCD         0x1594
  06338		 |$LN273@COM_IOCont|
  06338	00001224	 DCD         0x1224
  0633c		 |$LN274@COM_IOCont|
  0633c	00001594	 DCD         0x1594
  06340		 |$LN275@COM_IOCont|
  06340	00001594	 DCD         0x1594
  06344		 |$LN276@COM_IOCont|
  06344	00001594	 DCD         0x1594
  06348		 |$LN277@COM_IOCont|
  06348	00001238	 DCD         0x1238
  0634c		 |$LN278@COM_IOCont|
  0634c	00001594	 DCD         0x1594
  06350		 |$LN279@COM_IOCont|
  06350	00001594	 DCD         0x1594
  06354		 |$LN280@COM_IOCont|
  06354	00001594	 DCD         0x1594
  06358		 |$LN281@COM_IOCont|
  06358	000012e4	 DCD         0x12e4
  0635c		 |$LN282@COM_IOCont|
  0635c	00001594	 DCD         0x1594
  06360		 |$LN283@COM_IOCont|
  06360	00001594	 DCD         0x1594
  06364		 |$LN284@COM_IOCont|
  06364	00001594	 DCD         0x1594
  06368		 |$LN285@COM_IOCont|
  06368	00001398	 DCD         0x1398
  0636c		 |$LN286@COM_IOCont|
  0636c	00001594	 DCD         0x1594
  06370		 |$LN287@COM_IOCont|
  06370	00001594	 DCD         0x1594
  06374		 |$LN288@COM_IOCont|
  06374	00001594	 DCD         0x1594
  06378		 |$LN289@COM_IOCont|
  06378	00001494	 DCD         0x1494
  0637c		 |$LN290@COM_IOCont|
  0637c	00001594	 DCD         0x1594
  06380		 |$LN291@COM_IOCont|
  06380	00001594	 DCD         0x1594
  06384		 |$LN292@COM_IOCont|
  06384	00001594	 DCD         0x1594
  06388		 |$LN293@COM_IOCont|
  06388	0000154c	 DCD         0x154c
  0638c		 |$LN75@COM_IOCont|

; 2196 :     // ****************************************************************
; 2197 :     //
; 2198 :     //  @func BOOL      | IOCTL_SERIAL_SET_BREAK_ON |
; 2199 :     //                          Device IO control routine to set the break state.
; 2200 :     //
; 2201 :     //  @parm DWORD | dwOpenData | value returned from COM_Open call
; 2202 :     //  @parm DWORD | dwCode | IOCTL_SERIAL_SET_BREAK_ON
; 2203 :     //  @parm PBYTE | pBufIn | Ignored
; 2204 :     //  @parm DWORD | dwLenIn | Ignored
; 2205 :     //  @parm PBYTE | pBufOut | Ignored
; 2206 :     //  @parm DWORD | dwLenOut | Ignored
; 2207 :     //  @parm PDWORD | pdwActualOut | Ignored
; 2208 :     //
; 2209 :     //  @rdesc          Returns TRUE for success, FALSE for failure (and
; 2210 :     //                          sets thread error code)
; 2211 :     //
; 2212 :     //  @remark Sets the transmission line in a break state until
; 2213 :     //                          <f IOCTL_SERIAL_SET_BREAK_OFF> is called.
; 2214 :     //
; 2215 :     case IOCTL_SERIAL_SET_BREAK_ON :
; 2216 :         DEBUGMSG (ZONE_IOCTL,
; 2217 :                   (TEXT(" IOCTL_SERIAL_SET_BREAK_ON\r\n")));

  0638c	e59f3594	 ldr         r3, [pc, #0x594]
  06390	e5933440	 ldr         r3, [r3, #0x440]
  06394	e3130020	 tst         r3, #0x20
  06398	0a000004	 beq         |$LN107@COM_IOCont|
  0639c	e59f05b0	 ldr         r0, [pc, #0x5B0]
  063a0	eb000000	 bl          NKDbgPrintfW
  063a4	e3a03001	 mov         r3, #1
  063a8	e58d3108	 str         r3, [sp, #0x108]
  063ac	ea000001	 b           |$LN108@COM_IOCont|
  063b0		 |$LN107@COM_IOCont|
  063b0	e3a03000	 mov         r3, #0
  063b4	e58d3108	 str         r3, [sp, #0x108]
  063b8		 |$LN108@COM_IOCont|

; 2218 :         pFuncTbl->HWSetBreak(pHWHead);

  063b8	e59d0028	 ldr         r0, [sp, #0x28]
  063bc	e59d301c	 ldr         r3, [sp, #0x1C]
  063c0	e2833050	 add         r3, r3, #0x50
  063c4	e5933000	 ldr         r3, [r3]
  063c8	e1a0e00f	 mov         lr, pc
  063cc	e12fff13	 bx          r3

; 2219 :         break;

  063d0	ea000522	 b           |$LN76@COM_IOCont|
  063d4		 |$LN74@COM_IOCont|

; 2220 : 
; 2221 :         // ****************************************************************
; 2222 :         //
; 2223 :         //      @func BOOL      | IOCTL_SERIAL_SET_BREAK_OFF |
; 2224 :         //                              Device IO control routine to clear the break state.
; 2225 :         //
; 2226 :         //      @parm DWORD | dwOpenData | value returned from COM_Open call
; 2227 :         //      @parm DWORD | dwCode | IOCTL_SERIAL_SET_BREAK_OFF
; 2228 :         //      @parm PBYTE | pBufIn | Ignored
; 2229 :         //      @parm DWORD | dwLenIn | Ignored
; 2230 :         //      @parm PBYTE | pBufOut | Ignored
; 2231 :         //      @parm DWORD | dwLenOut | Ignored
; 2232 :         //      @parm PDWORD | pdwActualOut | Ignored
; 2233 :         //
; 2234 :         //      @rdesc          Returns TRUE for success, FALSE for failure (and
; 2235 :         //                              sets thread error code)
; 2236 :         //
; 2237 :         //      @remark         Restores character transmission for the communications
; 2238 :         //                              device and places the transmission line in a nonbreak state
; 2239 :         //                              (called after <f IOCTL_SERIAL_SET_BREAK_ON>).
; 2240 :         //
; 2241 :     case IOCTL_SERIAL_SET_BREAK_OFF :
; 2242 :         DEBUGMSG (ZONE_IOCTL, (TEXT(" IOCTL_SERIAL_SET_BREAK_OFF\r\n")));

  063d4	e59f354c	 ldr         r3, [pc, #0x54C]
  063d8	e5933440	 ldr         r3, [r3, #0x440]
  063dc	e3130020	 tst         r3, #0x20
  063e0	0a000004	 beq         |$LN109@COM_IOCont|
  063e4	e59f0564	 ldr         r0, [pc, #0x564]
  063e8	eb000000	 bl          NKDbgPrintfW
  063ec	e3a03001	 mov         r3, #1
  063f0	e58d310c	 str         r3, [sp, #0x10C]
  063f4	ea000001	 b           |$LN110@COM_IOCont|
  063f8		 |$LN109@COM_IOCont|
  063f8	e3a03000	 mov         r3, #0
  063fc	e58d310c	 str         r3, [sp, #0x10C]
  06400		 |$LN110@COM_IOCont|

; 2243 :         pFuncTbl->HWClearBreak(pHWHead);

  06400	e59d0028	 ldr         r0, [sp, #0x28]
  06404	e59d301c	 ldr         r3, [sp, #0x1C]
  06408	e283304c	 add         r3, r3, #0x4C
  0640c	e5933000	 ldr         r3, [r3]
  06410	e1a0e00f	 mov         lr, pc
  06414	e12fff13	 bx          r3

; 2244 :         break;

  06418	ea000510	 b           |$LN76@COM_IOCont|
  0641c		 |$LN73@COM_IOCont|

; 2245 : 
; 2246 :         // ****************************************************************
; 2247 :         //
; 2248 :         //      @func BOOL      | IOCTL_SERIAL_SET_DTR |
; 2249 :         //                              Device IO control routine to set DTR high.
; 2250 :         //
; 2251 :         //      @parm DWORD | dwOpenData | value returned from COM_Open call
; 2252 :         //      @parm DWORD | dwCode | IOCTL_SERIAL_SET_DTR
; 2253 :         //      @parm PBYTE | pBufIn | Ignored
; 2254 :         //      @parm DWORD | dwLenIn | Ignored
; 2255 :         //      @parm PBYTE | pBufOut | Ignored
; 2256 :         //      @parm DWORD | dwLenOut | Ignored
; 2257 :         //      @parm PDWORD | pdwActualOut | Ignored
; 2258 :         //
; 2259 :         //      @rdesc          Returns TRUE for success, FALSE for failure (and
; 2260 :         //                              sets thread error code)
; 2261 :         //
; 2262 :         //      @xref           <f IOCTL_SERIAL_CLR_DTR>
; 2263 :         //
; 2264 :     case IOCTL_SERIAL_SET_DTR :
; 2265 :         DEBUGMSG (ZONE_IOCTL, (TEXT(" IOCTL_SERIAL_SET_DTR\r\n")));

  0641c	e59f3504	 ldr         r3, [pc, #0x504]
  06420	e5933440	 ldr         r3, [r3, #0x440]
  06424	e3130020	 tst         r3, #0x20
  06428	0a000004	 beq         |$LN111@COM_IOCont|
  0642c	e59f0518	 ldr         r0, [pc, #0x518]
  06430	eb000000	 bl          NKDbgPrintfW
  06434	e3a03001	 mov         r3, #1
  06438	e58d3110	 str         r3, [sp, #0x110]
  0643c	ea000001	 b           |$LN112@COM_IOCont|
  06440		 |$LN111@COM_IOCont|
  06440	e3a03000	 mov         r3, #0
  06444	e58d3110	 str         r3, [sp, #0x110]
  06448		 |$LN112@COM_IOCont|

; 2266 :         /* It's an error to call this if DCB uses DTR_CONTROL_HANDSHAKE.
; 2267 :          */
; 2268 :         if ( pHWIHead->DCB.fDtrControl != DTR_CONTROL_HANDSHAKE ) {

  06448	e59d3020	 ldr         r3, [sp, #0x20]
  0644c	e2833068	 add         r3, r3, #0x68
  06450	e5933000	 ldr         r3, [r3]
  06454	e1a03d03	 mov         r3, r3, lsl #26
  06458	e1a03f23	 mov         r3, r3, lsr #30
  0645c	e3530002	 cmp         r3, #2
  06460	0a000006	 beq         |$LN72@COM_IOCont|

; 2269 :             pFuncTbl->HWSetDTR(pHWHead);

  06464	e59d0028	 ldr         r0, [sp, #0x28]
  06468	e59d301c	 ldr         r3, [sp, #0x1C]
  0646c	e2833038	 add         r3, r3, #0x38
  06470	e5933000	 ldr         r3, [r3]
  06474	e1a0e00f	 mov         lr, pc
  06478	e12fff13	 bx          r3

; 2270 :         } else {

  0647c	ea000003	 b           |$LN71@COM_IOCont|
  06480		 |$LN72@COM_IOCont|

; 2271 :             SetLastError (ERROR_INVALID_PARAMETER);

  06480	e3a00057	 mov         r0, #0x57
  06484	eb000000	 bl          SetLastError

; 2272 :             RetVal = FALSE;

  06488	e3a03000	 mov         r3, #0
  0648c	e58d3010	 str         r3, [sp, #0x10]
  06490		 |$LN71@COM_IOCont|

; 2273 :         }
; 2274 :         break;

  06490	ea0004f2	 b           |$LN76@COM_IOCont|
  06494		 |$LN70@COM_IOCont|

; 2275 : 
; 2276 :         // ****************************************************************
; 2277 :         //
; 2278 :         //      @func BOOL      | IOCTL_SERIAL_CLR_DTR |
; 2279 :         //                              Device IO control routine to set DTR low.
; 2280 :         //
; 2281 :         //      @parm DWORD | dwOpenData | value returned from COM_Open call
; 2282 :         //      @parm DWORD | dwCode | IOCTL_SERIAL_CLR_DTR
; 2283 :         //      @parm PBYTE | pBufIn | Ignored
; 2284 :         //      @parm DWORD | dwLenIn | Ignored
; 2285 :         //      @parm PBYTE | pBufOut | Ignored
; 2286 :         //      @parm DWORD | dwLenOut | Ignored
; 2287 :         //      @parm PDWORD | pdwActualOut | Ignored
; 2288 :         //
; 2289 :         //      @rdesc          Returns TRUE for success, FALSE for failure (and
; 2290 :         //                              sets thread error code)
; 2291 :         //
; 2292 :         //      @xref           <f IOCTL_SERIAL_SET_DTR>
; 2293 :         //
; 2294 :     case IOCTL_SERIAL_CLR_DTR :
; 2295 :         DEBUGMSG (ZONE_IOCTL, (TEXT(" IOCTL_SERIAL_CLR_DTR\r\n")));

  06494	e59f348c	 ldr         r3, [pc, #0x48C]
  06498	e5933440	 ldr         r3, [r3, #0x440]
  0649c	e3130020	 tst         r3, #0x20
  064a0	0a000004	 beq         |$LN113@COM_IOCont|
  064a4	e59f049c	 ldr         r0, [pc, #0x49C]
  064a8	eb000000	 bl          NKDbgPrintfW
  064ac	e3a03001	 mov         r3, #1
  064b0	e58d3114	 str         r3, [sp, #0x114]
  064b4	ea000001	 b           |$LN114@COM_IOCont|
  064b8		 |$LN113@COM_IOCont|
  064b8	e3a03000	 mov         r3, #0
  064bc	e58d3114	 str         r3, [sp, #0x114]
  064c0		 |$LN114@COM_IOCont|

; 2296 :         /* It's an error to call this if DCB uses DTR_CONTROL_HANDSHAKE.
; 2297 :          */
; 2298 :         if ( pHWIHead->DCB.fDtrControl != DTR_CONTROL_HANDSHAKE ) {

  064c0	e59d3020	 ldr         r3, [sp, #0x20]
  064c4	e2833068	 add         r3, r3, #0x68
  064c8	e5933000	 ldr         r3, [r3]
  064cc	e1a03d03	 mov         r3, r3, lsl #26
  064d0	e1a03f23	 mov         r3, r3, lsr #30
  064d4	e3530002	 cmp         r3, #2
  064d8	0a000006	 beq         |$LN69@COM_IOCont|

; 2299 :             pFuncTbl->HWClearDTR(pHWHead);

  064dc	e59d0028	 ldr         r0, [sp, #0x28]
  064e0	e59d301c	 ldr         r3, [sp, #0x1C]
  064e4	e2833034	 add         r3, r3, #0x34
  064e8	e5933000	 ldr         r3, [r3]
  064ec	e1a0e00f	 mov         lr, pc
  064f0	e12fff13	 bx          r3

; 2300 :         } else {

  064f4	ea000003	 b           |$LN68@COM_IOCont|
  064f8		 |$LN69@COM_IOCont|

; 2301 :             SetLastError (ERROR_INVALID_PARAMETER);

  064f8	e3a00057	 mov         r0, #0x57
  064fc	eb000000	 bl          SetLastError

; 2302 :             RetVal = FALSE;

  06500	e3a03000	 mov         r3, #0
  06504	e58d3010	 str         r3, [sp, #0x10]
  06508		 |$LN68@COM_IOCont|

; 2303 :         }
; 2304 :         break;

  06508	ea0004d4	 b           |$LN76@COM_IOCont|
  0650c		 |$LN67@COM_IOCont|

; 2305 : 
; 2306 :         // ****************************************************************
; 2307 :         //
; 2308 :         //      @func   BOOL | IOCTL_SERIAL_SET_RTS |
; 2309 :         //                              Device IO control routine to set RTS high.
; 2310 :         //
; 2311 :         //      @parm DWORD | dwOpenData | value returned from COM_Open call
; 2312 :         //      @parm DWORD | dwCode | IOCTL_SERIAL_SET_RTS
; 2313 :         //      @parm PBYTE | pBufIn | Ignored
; 2314 :         //      @parm DWORD | dwLenIn | Ignored
; 2315 :         //      @parm PBYTE | pBufOut | Ignored
; 2316 :         //      @parm DWORD | dwLenOut | Ignored
; 2317 :         //      @parm PDWORD | pdwActualOut | Ignored
; 2318 :         //
; 2319 :         //      @rdesc          Returns TRUE for success, FALSE for failure (and
; 2320 :         //                              sets thread error code)
; 2321 :         //
; 2322 :         //      @xref           <f IOCTL_SERIAL_CLR_RTS>
; 2323 :         //
; 2324 :     case IOCTL_SERIAL_SET_RTS :
; 2325 :         DEBUGMSG (ZONE_IOCTL, (TEXT(" IOCTL_SERIAL_SET_RTS\r\n")));

  0650c	e59f3414	 ldr         r3, [pc, #0x414]
  06510	e5933440	 ldr         r3, [r3, #0x440]
  06514	e3130020	 tst         r3, #0x20
  06518	0a000004	 beq         |$LN115@COM_IOCont|
  0651c	e59f0420	 ldr         r0, [pc, #0x420]
  06520	eb000000	 bl          NKDbgPrintfW
  06524	e3a03001	 mov         r3, #1
  06528	e58d3118	 str         r3, [sp, #0x118]
  0652c	ea000001	 b           |$LN116@COM_IOCont|
  06530		 |$LN115@COM_IOCont|
  06530	e3a03000	 mov         r3, #0
  06534	e58d3118	 str         r3, [sp, #0x118]
  06538		 |$LN116@COM_IOCont|

; 2326 :         /* It's an error to call this if DCB uses RTS_CONTROL_HANDSHAKE.
; 2327 :          */
; 2328 :         if ( pHWIHead->DCB.fRtsControl != RTS_CONTROL_HANDSHAKE ) {

  06538	e59d3020	 ldr         r3, [sp, #0x20]
  0653c	e2833068	 add         r3, r3, #0x68
  06540	e5933000	 ldr         r3, [r3]
  06544	e1a03903	 mov         r3, r3, lsl #18
  06548	e1a03f23	 mov         r3, r3, lsr #30
  0654c	e3530002	 cmp         r3, #2
  06550	0a000006	 beq         |$LN66@COM_IOCont|

; 2329 :             pFuncTbl->HWSetRTS(pHWHead);

  06554	e59d0028	 ldr         r0, [sp, #0x28]
  06558	e59d301c	 ldr         r3, [sp, #0x1C]
  0655c	e2833040	 add         r3, r3, #0x40
  06560	e5933000	 ldr         r3, [r3]
  06564	e1a0e00f	 mov         lr, pc
  06568	e12fff13	 bx          r3

; 2330 :         } else {

  0656c	ea000003	 b           |$LN65@COM_IOCont|
  06570		 |$LN66@COM_IOCont|

; 2331 :             SetLastError (ERROR_INVALID_PARAMETER);

  06570	e3a00057	 mov         r0, #0x57
  06574	eb000000	 bl          SetLastError

; 2332 :             RetVal = FALSE;

  06578	e3a03000	 mov         r3, #0
  0657c	e58d3010	 str         r3, [sp, #0x10]
  06580		 |$LN65@COM_IOCont|

; 2333 :         }
; 2334 :         break;

  06580	ea0004b6	 b           |$LN76@COM_IOCont|
  06584		 |$LN64@COM_IOCont|

; 2335 : 
; 2336 :         // ****************************************************************
; 2337 :         //
; 2338 :         //      @func   BOOL | IOCTL_SERIAL_CLR_RTS |
; 2339 :         //                              Device IO control routine to set RTS low.
; 2340 :         //
; 2341 :         //      @parm DWORD | dwOpenData | value returned from COM_Open call
; 2342 :         //      @parm DWORD | dwCode | IOCTL_SERIAL_CLR_RTS
; 2343 :         //      @parm PBYTE | pBufIn | Ignored
; 2344 :         //      @parm DWORD | dwLenIn | Ignored
; 2345 :         //      @parm PBYTE | pBufOut | Ignored
; 2346 :         //      @parm DWORD | dwLenOut | Ignored
; 2347 :         //      @parm PDWORD | pdwActualOut | Ignored
; 2348 :         //
; 2349 :         //      @rdesc          Returns TRUE for success, FALSE for failure (and
; 2350 :         //                              sets thread error code)
; 2351 :         //
; 2352 :         //      @xref           <f IOCTL_SERIAL_SET_RTS>
; 2353 :         //
; 2354 :     case IOCTL_SERIAL_CLR_RTS :
; 2355 :         DEBUGMSG (ZONE_IOCTL, (TEXT(" IOCTL_SERIAL_CLR_RTS\r\n")));

  06584	e59f339c	 ldr         r3, [pc, #0x39C]
  06588	e5933440	 ldr         r3, [r3, #0x440]
  0658c	e3130020	 tst         r3, #0x20
  06590	0a000004	 beq         |$LN117@COM_IOCont|
  06594	e59f03a4	 ldr         r0, [pc, #0x3A4]
  06598	eb000000	 bl          NKDbgPrintfW
  0659c	e3a03001	 mov         r3, #1
  065a0	e58d311c	 str         r3, [sp, #0x11C]
  065a4	ea000001	 b           |$LN118@COM_IOCont|
  065a8		 |$LN117@COM_IOCont|
  065a8	e3a03000	 mov         r3, #0
  065ac	e58d311c	 str         r3, [sp, #0x11C]
  065b0		 |$LN118@COM_IOCont|

; 2356 :         /* It's an error to call this if DCB uses RTS_CONTROL_HANDSHAKE.
; 2357 :          */
; 2358 :         if ( pHWIHead->DCB.fRtsControl != RTS_CONTROL_HANDSHAKE ) {

  065b0	e59d3020	 ldr         r3, [sp, #0x20]
  065b4	e2833068	 add         r3, r3, #0x68
  065b8	e5933000	 ldr         r3, [r3]
  065bc	e1a03903	 mov         r3, r3, lsl #18
  065c0	e1a03f23	 mov         r3, r3, lsr #30
  065c4	e3530002	 cmp         r3, #2
  065c8	0a000006	 beq         |$LN63@COM_IOCont|

; 2359 :             pFuncTbl->HWClearRTS(pHWHead);

  065cc	e59d0028	 ldr         r0, [sp, #0x28]
  065d0	e59d301c	 ldr         r3, [sp, #0x1C]
  065d4	e283303c	 add         r3, r3, #0x3C
  065d8	e5933000	 ldr         r3, [r3]
  065dc	e1a0e00f	 mov         lr, pc
  065e0	e12fff13	 bx          r3

; 2360 :         } else {

  065e4	ea000003	 b           |$LN62@COM_IOCont|
  065e8		 |$LN63@COM_IOCont|

; 2361 :             SetLastError (ERROR_INVALID_PARAMETER);

  065e8	e3a00057	 mov         r0, #0x57
  065ec	eb000000	 bl          SetLastError

; 2362 :             RetVal = FALSE;

  065f0	e3a03000	 mov         r3, #0
  065f4	e58d3010	 str         r3, [sp, #0x10]
  065f8		 |$LN62@COM_IOCont|

; 2363 :         }
; 2364 :         break;

  065f8	ea000498	 b           |$LN76@COM_IOCont|
  065fc		 |$LN61@COM_IOCont|

; 2365 : 
; 2366 :         // ****************************************************************
; 2367 :         //
; 2368 :         //      @func BOOL      | IOCTL_SERIAL_SET_XOFF |
; 2369 :         //                              Device IO control routine to cause transmission
; 2370 :         //                              to act as if an XOFF character has been received.
; 2371 :         //
; 2372 :         //      @parm DWORD | dwOpenData | value returned from COM_Open call
; 2373 :         //      @parm DWORD | dwCode | IOCTL_SERIAL_SET_XOFF
; 2374 :         //      @parm PBYTE | pBufIn | Ignored
; 2375 :         //      @parm DWORD | dwLenIn | Ignored
; 2376 :         //      @parm PBYTE | pBufOut | Ignored
; 2377 :         //      @parm DWORD | dwLenOut | Ignored
; 2378 :         //      @parm PDWORD | pdwActualOut | Ignored
; 2379 :         //
; 2380 :         //      @rdesc          Returns TRUE for success, FALSE for failure (and
; 2381 :         //                              sets thread error code)
; 2382 :         //
; 2383 :         //      @xref           <f IOCTL_SERIAL_SET_XON>
; 2384 :         //
; 2385 :     case IOCTL_SERIAL_SET_XOFF :
; 2386 :         DEBUGMSG (ZONE_IOCTL|ZONE_FLOW, (TEXT(" IOCTL_SERIAL_SET_XOFF\r\n")));

  065fc	e59f3324	 ldr         r3, [pc, #0x324]
  06600	e5933440	 ldr         r3, [r3, #0x440]
  06604	e2032020	 and         r2, r3, #0x20
  06608	e59f3318	 ldr         r3, [pc, #0x318]
  0660c	e5933440	 ldr         r3, [r3, #0x440]
  06610	e2033c02	 and         r3, r3, #2, 24
  06614	e1923003	 orrs        r3, r2, r3
  06618	0a000004	 beq         |$LN119@COM_IOCont|
  0661c	e59f0318	 ldr         r0, [pc, #0x318]
  06620	eb000000	 bl          NKDbgPrintfW
  06624	e3a03001	 mov         r3, #1
  06628	e58d3120	 str         r3, [sp, #0x120]
  0662c	ea000001	 b           |$LN120@COM_IOCont|
  06630		 |$LN119@COM_IOCont|
  06630	e3a03000	 mov         r3, #0
  06634	e58d3120	 str         r3, [sp, #0x120]
  06638		 |$LN120@COM_IOCont|

; 2387 :         if ( pHWIHead->XFlow ) {

  06638	e59d3020	 ldr         r3, [sp, #0x20]
  0663c	e2833094	 add         r3, r3, #0x94
  06640	e5933000	 ldr         r3, [r3]
  06644	e3130002	 tst         r3, #2
  06648	0a00000d	 beq         |$LN60@COM_IOCont|

; 2388 :             pHWIHead->StopXmit = 1;

  0664c	e59d3020	 ldr         r3, [sp, #0x20]
  06650	e2833094	 add         r3, r3, #0x94
  06654	e5933000	 ldr         r3, [r3]
  06658	e3832004	 orr         r2, r3, #4
  0665c	e59d3020	 ldr         r3, [sp, #0x20]
  06660	e2833094	 add         r3, r3, #0x94
  06664	e5832000	 str         r2, [r3]

; 2389 :             pHWIHead->SentXoff = 1;

  06668	e59d3020	 ldr         r3, [sp, #0x20]
  0666c	e2833094	 add         r3, r3, #0x94
  06670	e5933000	 ldr         r3, [r3]
  06674	e3832008	 orr         r2, r3, #8
  06678	e59d3020	 ldr         r3, [sp, #0x20]
  0667c	e2833094	 add         r3, r3, #0x94
  06680	e5832000	 str         r2, [r3]
  06684		 |$LN60@COM_IOCont|

; 2390 :         }
; 2391 :         break;

  06684	ea000475	 b           |$LN76@COM_IOCont|
  06688		 |$LN59@COM_IOCont|

; 2392 : 
; 2393 :         // ****************************************************************
; 2394 :         //
; 2395 :         //      @func BOOL      | IOCTL_SERIAL_SET_XON |
; 2396 :         //                              Device IO control routine to cause transmission
; 2397 :         //                              to act as if an XON character has been received.
; 2398 :         //
; 2399 :         //      @parm DWORD | dwOpenData | value returned from COM_Open call
; 2400 :         //      @parm DWORD | dwCode | IOCTL_SERIAL_SET_XON
; 2401 :         //      @parm PBYTE | pBufIn | Ignored
; 2402 :         //      @parm DWORD | dwLenIn | Ignored
; 2403 :         //      @parm PBYTE | pBufOut | Ignored
; 2404 :         //      @parm DWORD | dwLenOut | Ignored
; 2405 :         //      @parm PDWORD | pdwActualOut | Ignored
; 2406 :         //
; 2407 :         //      @rdesc          Returns TRUE for success, FALSE for failure (and
; 2408 :         //                              sets thread error code)
; 2409 :         //
; 2410 :         //      @xref           <f IOCTL_SERIAL_SET_XOFF>
; 2411 :         //
; 2412 :     case IOCTL_SERIAL_SET_XON :
; 2413 :         DEBUGMSG (ZONE_IOCTL|ZONE_FLOW, (TEXT(" IOCTL_SERIAL_SET_XON\r\n")));

  06688	e59f3298	 ldr         r3, [pc, #0x298]
  0668c	e5933440	 ldr         r3, [r3, #0x440]
  06690	e2032020	 and         r2, r3, #0x20
  06694	e59f328c	 ldr         r3, [pc, #0x28C]
  06698	e5933440	 ldr         r3, [r3, #0x440]
  0669c	e2033c02	 and         r3, r3, #2, 24
  066a0	e1923003	 orrs        r3, r2, r3
  066a4	0a000004	 beq         |$LN121@COM_IOCont|
  066a8	e59f0288	 ldr         r0, [pc, #0x288]
  066ac	eb000000	 bl          NKDbgPrintfW
  066b0	e3a03001	 mov         r3, #1
  066b4	e58d3124	 str         r3, [sp, #0x124]
  066b8	ea000001	 b           |$LN122@COM_IOCont|
  066bc		 |$LN121@COM_IOCont|
  066bc	e3a03000	 mov         r3, #0
  066c0	e58d3124	 str         r3, [sp, #0x124]
  066c4		 |$LN122@COM_IOCont|

; 2414 :         if ( pHWIHead->XFlow ) {

  066c4	e59d3020	 ldr         r3, [sp, #0x20]
  066c8	e2833094	 add         r3, r3, #0x94
  066cc	e5933000	 ldr         r3, [r3]
  066d0	e3130002	 tst         r3, #2
  066d4	0a00000f	 beq         |$LN58@COM_IOCont|

; 2415 :             pHWIHead->StopXmit = 0;

  066d8	e59d3020	 ldr         r3, [sp, #0x20]
  066dc	e2833094	 add         r3, r3, #0x94
  066e0	e5932000	 ldr         r2, [r3]
  066e4	e3e03004	 mvn         r3, #4
  066e8	e0022003	 and         r2, r2, r3
  066ec	e59d3020	 ldr         r3, [sp, #0x20]
  066f0	e2833094	 add         r3, r3, #0x94
  066f4	e5832000	 str         r2, [r3]

; 2416 :             pHWIHead->SentXoff = 0;

  066f8	e59d3020	 ldr         r3, [sp, #0x20]
  066fc	e2833094	 add         r3, r3, #0x94
  06700	e5932000	 ldr         r2, [r3]
  06704	e3e03008	 mvn         r3, #8
  06708	e0022003	 and         r2, r2, r3
  0670c	e59d3020	 ldr         r3, [sp, #0x20]
  06710	e2833094	 add         r3, r3, #0x94
  06714	e5832000	 str         r2, [r3]
  06718		 |$LN58@COM_IOCont|

; 2417 :         }
; 2418 :         break;

  06718	ea000450	 b           |$LN76@COM_IOCont|
  0671c		 |$LN57@COM_IOCont|

; 2419 : 
; 2420 :         // ****************************************************************
; 2421 :         //
; 2422 :         //      @func           BOOL | IOCTL_SERIAL_GET_WAIT_MASK |
; 2423 :         //                              Device IO control routine to retrieve the value
; 2424 :         //                              of the event mask.
; 2425 :         //
; 2426 :         //      @parm DWORD | dwOpenData | value returned from COM_Open call
; 2427 :         //      @parm DWORD | dwCode | IOCTL_SERIAL_GET_WAIT_MASK
; 2428 :         //      @parm PBYTE | pBufIn | Ignored
; 2429 :         //      @parm DWORD | dwLenIn | Ignored
; 2430 :         //      @parm PBYTE | pBufOut | Points to DWORD to place event mask
; 2431 :         //      @parm DWORD | dwLenOut | should be sizeof(DWORD) or larger
; 2432 :         //      @parm PDWORD | pdwActualOut | Points to DWORD to return length
; 2433 :         //                              of returned data (should be set to sizeof(DWORD) if no
; 2434 :         //                              error)
; 2435 :         //
; 2436 :         //      @rdesc          Returns TRUE for success, FALSE for failure (and
; 2437 :         //                              sets thread error code)
; 2438 :         //
; 2439 :         //      @xref           <f IOCTL_SERIAL_SET_WAIT_MASK>
; 2440 :         //                              <f IOCTL_SERIAL_WAIT_ON_MASK>
; 2441 :         //
; 2442 :     case IOCTL_SERIAL_GET_WAIT_MASK :
; 2443 :         DEBUGMSG (ZONE_IOCTL, (TEXT(" IOCTL_SERIAL_GET_WAIT_MASK\r\n")));

  0671c	e59f3204	 ldr         r3, [pc, #0x204]
  06720	e5933440	 ldr         r3, [r3, #0x440]
  06724	e3130020	 tst         r3, #0x20
  06728	0a000004	 beq         |$LN123@COM_IOCont|
  0672c	e59f0200	 ldr         r0, [pc, #0x200]
  06730	eb000000	 bl          NKDbgPrintfW
  06734	e3a03001	 mov         r3, #1
  06738	e58d3128	 str         r3, [sp, #0x128]
  0673c	ea000001	 b           |$LN124@COM_IOCont|
  06740		 |$LN123@COM_IOCont|
  06740	e3a03000	 mov         r3, #0
  06744	e58d3128	 str         r3, [sp, #0x128]
  06748		 |$LN124@COM_IOCont|

; 2444 :         if ( (dwLenOut < sizeof(DWORD)) || (NULL == pBufOut) ||
; 2445 :              (NULL == pdwActualOut) ) {

  06748	e59d320c	 ldr         r3, [sp, #0x20C]
  0674c	e3530004	 cmp         r3, #4
  06750	3a000005	 bcc         |$LN55@COM_IOCont|
  06754	e59d3208	 ldr         r3, [sp, #0x208]
  06758	e3530000	 cmp         r3, #0
  0675c	0a000002	 beq         |$LN55@COM_IOCont|
  06760	e59d3210	 ldr         r3, [sp, #0x210]
  06764	e3530000	 cmp         r3, #0
  06768	1a00000f	 bne         |$LN56@COM_IOCont|
  0676c		 |$LN55@COM_IOCont|

; 2446 :             SetLastError (ERROR_INVALID_PARAMETER);

  0676c	e3a00057	 mov         r0, #0x57
  06770	eb000000	 bl          SetLastError

; 2447 :             RetVal = FALSE;

  06774	e3a03000	 mov         r3, #0
  06778	e58d3010	 str         r3, [sp, #0x10]

; 2448 :             DEBUGMSG (ZONE_IOCTL, (TEXT(" Invalid parameter\r\n")));

  0677c	e59f31a4	 ldr         r3, [pc, #0x1A4]
  06780	e5933440	 ldr         r3, [r3, #0x440]
  06784	e3130020	 tst         r3, #0x20
  06788	0a000004	 beq         |$LN125@COM_IOCont|
  0678c	e59f019c	 ldr         r0, [pc, #0x19C]
  06790	eb000000	 bl          NKDbgPrintfW
  06794	e3a03001	 mov         r3, #1
  06798	e58d312c	 str         r3, [sp, #0x12C]
  0679c	ea000001	 b           |$LN126@COM_IOCont|
  067a0		 |$LN125@COM_IOCont|
  067a0	e3a03000	 mov         r3, #0
  067a4	e58d312c	 str         r3, [sp, #0x12C]
  067a8		 |$LN126@COM_IOCont|

; 2449 :             break;

  067a8	ea00042c	 b           |$LN76@COM_IOCont|
  067ac		 |$LN56@COM_IOCont|

; 2450 :         }
; 2451 :         // Set The Wait Mask
; 2452 :         *(DWORD *)pBufOut = pOpenHead->CommEvents.fEventMask;

  067ac	e59d31f8	 ldr         r3, [sp, #0x1F8]
  067b0	e2833014	 add         r3, r3, #0x14
  067b4	e5932000	 ldr         r2, [r3]
  067b8	e59d3208	 ldr         r3, [sp, #0x208]
  067bc	e5832000	 str         r2, [r3]

; 2453 :         // Return the size
; 2454 :         *pdwActualOut = sizeof(DWORD);

  067c0	e59d2210	 ldr         r2, [sp, #0x210]
  067c4	e3a03004	 mov         r3, #4
  067c8	e5823000	 str         r3, [r2]

; 2455 :         break;

  067cc	ea000423	 b           |$LN76@COM_IOCont|
  067d0		 |$LN54@COM_IOCont|

; 2456 : 
; 2457 :         // ****************************************************************
; 2458 :         //
; 2459 :         //      @func BOOL      | IOCTL_SERIAL_SET_WAIT_MASK |
; 2460 :         //                              Device IO control routine to set the value
; 2461 :         //                              of the event mask.
; 2462 :         //
; 2463 :         //      @parm DWORD | dwOpenData | value returned from COM_Open call
; 2464 :         //      @parm DWORD | dwCode | IOCTL_SERIAL_SET_WAIT_MASK
; 2465 :         //      @parm PBYTE | pBufIn | Pointer to the DWORD mask value
; 2466 :         //      @parm DWORD | dwLenIn | should be sizeof(DWORD)
; 2467 :         //      @parm PBYTE | pBufOut | Ignored
; 2468 :         //      @parm DWORD | dwLenOut | Ignored
; 2469 :         //      @parm PDWORD | pdwActualOut | Ignored
; 2470 :         //
; 2471 :         //      @rdesc          Returns TRUE for success, FALSE for failure (and
; 2472 :         //                              sets thread error code)
; 2473 :         //
; 2474 :         //      @xref           <f IOCTL_SERIAL_GET_WAIT_MASK>
; 2475 :         //                              <f IOCTL_SERIAL_WAIT_ON_MASK>
; 2476 :         //
; 2477 :     case IOCTL_SERIAL_SET_WAIT_MASK :
; 2478 :         if ( (dwLenIn < sizeof(DWORD)) || (NULL == pBufIn) ) {

  067d0	e59d3204	 ldr         r3, [sp, #0x204]
  067d4	e3530004	 cmp         r3, #4
  067d8	3a000002	 bcc         |$LN52@COM_IOCont|
  067dc	e59d3200	 ldr         r3, [sp, #0x200]
  067e0	e3530000	 cmp         r3, #0
  067e4	1a000010	 bne         |$LN53@COM_IOCont|
  067e8		 |$LN52@COM_IOCont|

; 2479 :             SetLastError (ERROR_INVALID_PARAMETER);

  067e8	e3a00057	 mov         r0, #0x57
  067ec	eb000000	 bl          SetLastError

; 2480 :             RetVal = FALSE;

  067f0	e3a03000	 mov         r3, #0
  067f4	e58d3010	 str         r3, [sp, #0x10]

; 2481 :             DEBUGMSG (ZONE_IOCTL, (TEXT(" Invalid parameter\r\n")));

  067f8	e59f3128	 ldr         r3, [pc, #0x128]
  067fc	e5933440	 ldr         r3, [r3, #0x440]
  06800	e3130020	 tst         r3, #0x20
  06804	0a000004	 beq         |$LN127@COM_IOCont|
  06808	e59f0120	 ldr         r0, [pc, #0x120]
  0680c	eb000000	 bl          NKDbgPrintfW
  06810	e3a03001	 mov         r3, #1
  06814	e58d3130	 str         r3, [sp, #0x130]
  06818	ea000001	 b           |$LN128@COM_IOCont|
  0681c		 |$LN127@COM_IOCont|
  0681c	e3a03000	 mov         r3, #0
  06820	e58d3130	 str         r3, [sp, #0x130]
  06824		 |$LN128@COM_IOCont|

; 2482 :             break;

  06824	ea00040d	 b           |$LN76@COM_IOCont|

; 2483 :         }
; 2484 :         else {

  06828	ea000077	 b           |$LN51@COM_IOCont|
  0682c		 |$LN53@COM_IOCont|

; 2485 :             DWORD dwFlagEventMask = 0;

  0682c	e3a03000	 mov         r3, #0
  06830	e58d3034	 str         r3, [sp, #0x34]

; 2486 :             dwFlagEventMask = *(DWORD *)pBufIn;

  06834	e59d3200	 ldr         r3, [sp, #0x200]
  06838	e5933000	 ldr         r3, [r3]
  0683c	e58d3034	 str         r3, [sp, #0x34]

; 2487 :             DEBUGMSG (ZONE_IOCTL, (TEXT(" IOCTL_SERIAL_SET_WAIT_MASK 0x%X\r\n"),dwFlagEventMask));

  06840	e59f30e0	 ldr         r3, [pc, #0xE0]
  06844	e5933440	 ldr         r3, [r3, #0x440]
  06848	e3130020	 tst         r3, #0x20
  0684c	0a000005	 beq         |$LN129@COM_IOCont|
  06850	e59d1034	 ldr         r1, [sp, #0x34]
  06854	e59f00d0	 ldr         r0, [pc, #0xD0]
  06858	eb000000	 bl          NKDbgPrintfW
  0685c	e3a03001	 mov         r3, #1
  06860	e58d3134	 str         r3, [sp, #0x134]
  06864	ea000001	 b           |$LN130@COM_IOCont|
  06868		 |$LN129@COM_IOCont|
  06868	e3a03000	 mov         r3, #0
  0686c	e58d3134	 str         r3, [sp, #0x134]
  06870		 |$LN130@COM_IOCont|

; 2488 :             EnterCriticalSection(&(pOpenHead->CommEvents.EventCS));

  06870	e59d31f8	 ldr         r3, [sp, #0x1F8]
  06874	e2830020	 add         r0, r3, #0x20
  06878	eb000000	 bl          EnterCriticalSection

; 2489 :             // OK, now we can actually set the mask
; 2490 :             pOpenHead->CommEvents.fEventMask = dwFlagEventMask;

  0687c	e59d31f8	 ldr         r3, [sp, #0x1F8]
  06880	e2832014	 add         r2, r3, #0x14
  06884	e59d3034	 ldr         r3, [sp, #0x34]
  06888	e5823000	 str         r3, [r2]

; 2491 : 
; 2492 :             // NOTE: If there is an outstanding WaitCommEvent, it should
; 2493 :             // return an error when SET_WAIT_MASK is called.  We accomplish
; 2494 :             // this by generating an hCommEvent which will wake the WaitComm
; 2495 :             // and subsequently return error (since no event bits will be set )
; 2496 :             pOpenHead->CommEvents.fAbort = 1;

  0688c	e59d31f8	 ldr         r3, [sp, #0x1F8]
  06890	e283201c	 add         r2, r3, #0x1C
  06894	e3a03001	 mov         r3, #1
  06898	e5823000	 str         r3, [r2]

; 2497 :             SetEvent(pOpenHead->CommEvents.hCommEvent);

  0689c	e59d31f8	 ldr         r3, [sp, #0x1F8]
  068a0	e2833010	 add         r3, r3, #0x10
  068a4	e5930000	 ldr         r0, [r3]
  068a8	eb000000	 bl          SetEvent

; 2498 : 
; 2499 :             // And calculate the OR of all masks for this port.  Use a temp
; 2500 :             // variable so that the other threads don't see a partial mask
; 2501 :             dwFlags = 0;

  068ac	e3a03000	 mov         r3, #0
  068b0	e58d3024	 str         r3, [sp, #0x24]

; 2502 :             pEntry = pHWIHead->OpenList.Flink;

  068b4	e59d3020	 ldr         r3, [sp, #0x20]
  068b8	e28330e4	 add         r3, r3, #0xE4
  068bc	e5933000	 ldr         r3, [r3]
  068c0	e58d3014	 str         r3, [sp, #0x14]
  068c4		 |$LN50@COM_IOCont|

; 2503 :             while ( pEntry != &pHWIHead->OpenList ) {

  068c4	e59d3020	 ldr         r3, [sp, #0x20]
  068c8	e28320e4	 add         r2, r3, #0xE4
  068cc	e59d3014	 ldr         r3, [sp, #0x14]
  068d0	e1530002	 cmp         r3, r2
  068d4	0a000034	 beq         |$LN49@COM_IOCont|

; 2504 :                 PHW_OPEN_INFO   pTmpOpenHead;
; 2505 : 
; 2506 :                 pTmpOpenHead = CONTAINING_RECORD( pEntry, HW_OPEN_INFO, llist);

  068d8	e59d3014	 ldr         r3, [sp, #0x14]
  068dc	e2433034	 sub         r3, r3, #0x34
  068e0	e58d3038	 str         r3, [sp, #0x38]

; 2507 :                 pEntry = pEntry->Flink;    // advance to next

  068e4	e59d3014	 ldr         r3, [sp, #0x14]
  068e8	e5933000	 ldr         r3, [r3]
  068ec	e58d3014	 str         r3, [sp, #0x14]

; 2508 : 
; 2509 :                 DEBUGMSG (ZONE_EVENTS, (TEXT(" SetWaitMask - handle x%X mask x%X\r\n"),
; 2510 :                                         pTmpOpenHead, pTmpOpenHead->CommEvents.fEventMask));

  068f0	e59f3030	 ldr         r3, [pc, #0x30]
  068f4	e5933440	 ldr         r3, [r3, #0x440]
  068f8	e3130080	 tst         r3, #0x80
  068fc	0a000021	 beq         |$LN131@COM_IOCont|
  06900	e59d3038	 ldr         r3, [sp, #0x38]
  06904	e2833014	 add         r3, r3, #0x14
  06908	e5932000	 ldr         r2, [r3]
  0690c	e59d1038	 ldr         r1, [sp, #0x38]
  06910	e59f000c	 ldr         r0, [pc, #0xC]
  06914	eb000000	 bl          NKDbgPrintfW
  06918	e3a03001	 mov         r3, #1
  0691c	e58d3138	 str         r3, [sp, #0x138]
  06920	ea00001a	 b           |$LN132@COM_IOCont|
  06924		 |$LN324@COM_IOCont|
  06924		 |$LN325@COM_IOCont|
  06924	00000000	 DCD         |??_C@_1EK@BIBFMIMA@?$AA?5?$AAS?$AAe?$AAt?$AAW?$AAa?$AAi?$AAt?$AAM?$AAa?$AAs?$AAk?$AA?5?$AA?9?$AA?5?$AAh?$AAa?$AAn?$AAd?$AAl?$AAe?$AA?5?$AAx?$AA?$CF?$AAX?$AA?5?$AAm?$AAa?$AAs?$AAk?$AA?5?$AAx@|
  06928		 |$LN326@COM_IOCont|
  06928	00000000	 DCD         |dpCurSettings|
  0692c		 |$LN327@COM_IOCont|
  0692c	00000000	 DCD         |??_C@_1EG@JONHGGFH@?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAS?$AAE?$AAR?$AAI?$AAA?$AAL?$AA_?$AAS?$AAE?$AAT?$AA_?$AAW?$AAA?$AAI?$AAT?$AA_?$AAM?$AAA?$AAS?$AAK?$AA?5?$AA0?$AAx?$AA?$CF?$AAX@|
  06930		 |$LN328@COM_IOCont|
  06930	00000000	 DCD         |??_C@_1CK@EJMDEGNB@?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAp?$AAa?$AAr?$AAa?$AAm?$AAe?$AAt?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@|
  06934		 |$LN329@COM_IOCont|
  06934	00000000	 DCD         |??_C@_1DM@BJAAJCOJ@?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAS?$AAE?$AAR?$AAI?$AAA?$AAL?$AA_?$AAG?$AAE?$AAT?$AA_?$AAW?$AAA?$AAI?$AAT?$AA_?$AAM?$AAA?$AAS?$AAK?$AA?$AN?$AA?6?$AA?$AA@|
  06938		 |$LN330@COM_IOCont|
  06938	00000000	 DCD         |??_C@_1DA@CLADOFAD@?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAS?$AAE?$AAR?$AAI?$AAA?$AAL?$AA_?$AAS?$AAE?$AAT?$AA_?$AAX?$AAO?$AAN?$AA?$AN?$AA?6?$AA?$AA@|
  0693c		 |$LN331@COM_IOCont|
  0693c	00000000	 DCD         |??_C@_1DC@OONFCAKE@?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAS?$AAE?$AAR?$AAI?$AAA?$AAL?$AA_?$AAS?$AAE?$AAT?$AA_?$AAX?$AAO?$AAF?$AAF?$AA?$AN?$AA?6?$AA?$AA@|
  06940		 |$LN332@COM_IOCont|
  06940	00000000	 DCD         |??_C@_1DA@LCJAIJKL@?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAS?$AAE?$AAR?$AAI?$AAA?$AAL?$AA_?$AAC?$AAL?$AAR?$AA_?$AAR?$AAT?$AAS?$AA?$AN?$AA?6?$AA?$AA@|
  06944		 |$LN333@COM_IOCont|
  06944	00000000	 DCD         |??_C@_1DA@PJMEFDIH@?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAS?$AAE?$AAR?$AAI?$AAA?$AAL?$AA_?$AAS?$AAE?$AAT?$AA_?$AAR?$AAT?$AAS?$AA?$AN?$AA?6?$AA?$AA@|
  06948		 |$LN334@COM_IOCont|
  06948	00000000	 DCD         |??_C@_1DA@JNBPMBCJ@?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAS?$AAE?$AAR?$AAI?$AAA?$AAL?$AA_?$AAC?$AAL?$AAR?$AA_?$AAD?$AAT?$AAR?$AA?$AN?$AA?6?$AA?$AA@|
  0694c		 |$LN335@COM_IOCont|
  0694c	00000000	 DCD         |??_C@_1DA@NGELBLAF@?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAS?$AAE?$AAR?$AAI?$AAA?$AAL?$AA_?$AAS?$AAE?$AAT?$AA_?$AAD?$AAT?$AAR?$AA?$AN?$AA?6?$AA?$AA@|
  06950		 |$LN336@COM_IOCont|
  06950	00000000	 DCD         |??_C@_1DM@GNACIDMB@?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAS?$AAE?$AAR?$AAI?$AAA?$AAL?$AA_?$AAS?$AAE?$AAT?$AA_?$AAB?$AAR?$AAE?$AAA?$AAK?$AA_?$AAO?$AAF?$AAF?$AA?$AN?$AA?6?$AA?$AA@|
  06954		 |$LN337@COM_IOCont|
  06954	00000000	 DCD         |??_C@_1DK@NGIHOHIF@?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAS?$AAE?$AAR?$AAI?$AAA?$AAL?$AA_?$AAS?$AAE?$AAT?$AA_?$AAB?$AAR?$AAE?$AAA?$AAK?$AA_?$AAO?$AAN?$AA?$AN?$AA?6?$AA?$AA@|
  06958		 |$LN338@COM_IOCont|
  06958	00000000	 DCD         |??_C@_1GI@OFPAKAHG@?$AAC?$AAO?$AAM?$AA_?$AAI?$AAo?$AAc?$AAt?$AAl?$AA?3?$AA?5?$AAI?$AAo?$AAc?$AAt?$AAl?$AA?5?$AA?$CF?$AAx?$AA?5?$AAa?$AAc?$AAc?$AAe?$AAs?$AAs?$AA?5?$AAp?$AAe?$AAr?$AAm?$AAi@|
  0695c		 |$LN339@COM_IOCont|
  0695c	80038140	 DCD         0x80038140
  06960		 |$LN340@COM_IOCont|
  06960	00321008	 DCD         0x321008
  06964		 |$LN341@COM_IOCont|
  06964	0032100c	 DCD         0x32100c
  06968		 |$LN342@COM_IOCont|
  06968	00000000	 DCD         |??_C@_1CM@DKOMLJNL@?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AA?5?$AAi?$AAs?$AA?5?$AAe?$AAx?$AAi?$AAt?$AAi?$AAn?$AAg?$AA?4?$AA?$AN?$AA?6?$AA?$AA@|
  0696c		 |$LN343@COM_IOCont|
  0696c	010303ff	 DCD         0x10303ff
  06970		 |$LN344@COM_IOCont|
  06970	00000000	 DCD         |??_C@_1EK@GAFFJFEI@?$AA?5?$AAC?$AAO?$AAM?$AA_?$AAI?$AAO?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?5?$AA?9?$AA?5?$AAd?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAw?$AAa?$AAs?$AA?5?$AAc?$AAl?$AAo?$AAs@|
  06974		 |$LN345@COM_IOCont|
  06974	00000000	 DCD         |??_C@_1GK@BPHGGHEJ@?$AA?$CL?$AAC?$AAO?$AAM?$AA_?$AAI?$AAO?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?$CI?$AA0?$AAx?$AA?$CF?$AAX?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AAX?$AA?0?$AA?5?$AA?$CF@|
  06978		 |$LN346@COM_IOCont|
  06978	00000000	 DCD         |??_C@_1CM@ENDIALIE@?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAo?$AAc?$AAt?$AAl?$AA?5?$AA0?$AAx?$AA?$CF?$AAX?$AA?$AN?$AA?6?$AA?$AA@|
  0697c		 |$LN347@COM_IOCont|
  0697c	00321018	 DCD         0x321018
  06980		 |$LN348@COM_IOCont|
  06980	00321004	 DCD         0x321004
  06984		 |$LN349@COM_IOCont|
  06984	00000000	 DCD         |__security_cookie|
  06988		 |$LN131@COM_IOCont|
  06988	e3a03000	 mov         r3, #0
  0698c	e58d3138	 str         r3, [sp, #0x138]
  06990		 |$LN132@COM_IOCont|

; 2511 :                 dwFlags |= pTmpOpenHead->CommEvents.fEventMask;

  06990	e59d3038	 ldr         r3, [sp, #0x38]
  06994	e2833014	 add         r3, r3, #0x14
  06998	e59d2024	 ldr         r2, [sp, #0x24]
  0699c	e5933000	 ldr         r3, [r3]
  069a0	e1823003	 orr         r3, r2, r3
  069a4	e58d3024	 str         r3, [sp, #0x24]

; 2512 :             }

  069a8	eaffffc5	 b           |$LN50@COM_IOCont|
  069ac		 |$LN49@COM_IOCont|

; 2513 :             pHWIHead->fEventMask = dwFlags;

  069ac	e59d3020	 ldr         r3, [sp, #0x20]
  069b0	e2832098	 add         r2, r3, #0x98
  069b4	e59d3024	 ldr         r3, [sp, #0x24]
  069b8	e5823000	 str         r3, [r2]

; 2514 :             LeaveCriticalSection(&(pOpenHead->CommEvents.EventCS));

  069bc	e59d31f8	 ldr         r3, [sp, #0x1F8]
  069c0	e2830020	 add         r0, r3, #0x20
  069c4	eb000000	 bl          LeaveCriticalSection

; 2515 :             DEBUGMSG (ZONE_EVENTS, (TEXT(" SetWaitMask - mask x%X, global mask x%X\r\n"),
; 2516 :                                     pOpenHead->CommEvents.fEventMask, pHWIHead->fEventMask));

  069c8	e59f3f8c	 ldr         r3, [pc, #0xF8C]
  069cc	e5933440	 ldr         r3, [r3, #0x440]
  069d0	e3130080	 tst         r3, #0x80
  069d4	0a00000a	 beq         |$LN133@COM_IOCont|
  069d8	e59d3020	 ldr         r3, [sp, #0x20]
  069dc	e2833098	 add         r3, r3, #0x98
  069e0	e5932000	 ldr         r2, [r3]
  069e4	e59d31f8	 ldr         r3, [sp, #0x1F8]
  069e8	e2833014	 add         r3, r3, #0x14
  069ec	e5931000	 ldr         r1, [r3]
  069f0	e59f0fbc	 ldr         r0, [pc, #0xFBC]
  069f4	eb000000	 bl          NKDbgPrintfW
  069f8	e3a03001	 mov         r3, #1
  069fc	e58d313c	 str         r3, [sp, #0x13C]
  06a00	ea000001	 b           |$LN134@COM_IOCont|
  06a04		 |$LN133@COM_IOCont|
  06a04	e3a03000	 mov         r3, #0
  06a08	e58d313c	 str         r3, [sp, #0x13C]
  06a0c		 |$LN134@COM_IOCont|
  06a0c		 |$LN51@COM_IOCont|

; 2517 : 
; 2518 :         }
; 2519 :         break;

  06a0c	ea000393	 b           |$LN76@COM_IOCont|
  06a10		 |$LN48@COM_IOCont|

; 2520 : 
; 2521 :         // ****************************************************************
; 2522 :         //
; 2523 :         //      @func BOOL      | IOCTL_SERIAL_WAIT_ON_MASK |
; 2524 :         //                              Device IO control routine to wait for a communications
; 2525 :         //                              event that matches one in the event mask
; 2526 :         //
; 2527 :         //      @parm DWORD | dwOpenData | value returned from COM_Open call
; 2528 :         //      @parm DWORD | dwCode | IOCTL_SERIAL_WAIT_ON_MASK
; 2529 :         //      @parm PBYTE | pBufIn | Ignored
; 2530 :         //      @parm DWORD | dwLenIn | Ignored
; 2531 :         //      @parm PBYTE | pBufOut | Points to DWORD to place event mask.
; 2532 :         //                              The returned mask will show the event that terminated
; 2533 :         //                              the wait.  If a process attempts to change the device
; 2534 :         //                              handle's event mask by using the IOCTL_SERIAL_SET_WAIT_MASK
; 2535 :         //                              call the driver should return immediately with (DWORD)0 as
; 2536 :         //                              the returned event mask.
; 2537 :         //      @parm DWORD | dwLenOut | should be sizeof(DWORD) or larger
; 2538 :         //      @parm PDWORD | pdwActualOut | Points to DWORD to return length
; 2539 :         //                              of returned data (should be set to sizeof(DWORD) if no
; 2540 :         //                              error)
; 2541 :         //
; 2542 :         //      @rdesc          Returns TRUE for success, FALSE for failure (and
; 2543 :         //                              sets thread error code)
; 2544 :         //
; 2545 :         //      @xref           <f IOCTL_SERIAL_GET_WAIT_MASK>
; 2546 :         //                              <f IOCTL_SERIAL_SET_WAIT_MASK>
; 2547 :         //
; 2548 :     case IOCTL_SERIAL_WAIT_ON_MASK :
; 2549 :         DEBUGMSG (ZONE_IOCTL, (TEXT(" IOCTL_SERIAL_WAIT_ON_MASK\r\n")));

  06a10	e59f3f44	 ldr         r3, [pc, #0xF44]
  06a14	e5933440	 ldr         r3, [r3, #0x440]
  06a18	e3130020	 tst         r3, #0x20
  06a1c	0a000004	 beq         |$LN135@COM_IOCont|
  06a20	e59f0f88	 ldr         r0, [pc, #0xF88]
  06a24	eb000000	 bl          NKDbgPrintfW
  06a28	e3a03001	 mov         r3, #1
  06a2c	e58d3140	 str         r3, [sp, #0x140]
  06a30	ea000001	 b           |$LN136@COM_IOCont|
  06a34		 |$LN135@COM_IOCont|
  06a34	e3a03000	 mov         r3, #0
  06a38	e58d3140	 str         r3, [sp, #0x140]
  06a3c		 |$LN136@COM_IOCont|

; 2550 :         if ( (dwLenOut < sizeof(DWORD)) || (NULL == pBufOut) ||
; 2551 :              (NULL == pdwActualOut) ) {

  06a3c	e59d320c	 ldr         r3, [sp, #0x20C]
  06a40	e3530004	 cmp         r3, #4
  06a44	3a000005	 bcc         |$LN46@COM_IOCont|
  06a48	e59d3208	 ldr         r3, [sp, #0x208]
  06a4c	e3530000	 cmp         r3, #0
  06a50	0a000002	 beq         |$LN46@COM_IOCont|
  06a54	e59d3210	 ldr         r3, [sp, #0x210]
  06a58	e3530000	 cmp         r3, #0
  06a5c	1a000010	 bne         |$LN47@COM_IOCont|
  06a60		 |$LN46@COM_IOCont|

; 2552 :             SetLastError (ERROR_INVALID_PARAMETER);

  06a60	e3a00057	 mov         r0, #0x57
  06a64	eb000000	 bl          SetLastError

; 2553 :             RetVal = FALSE;

  06a68	e3a03000	 mov         r3, #0
  06a6c	e58d3010	 str         r3, [sp, #0x10]

; 2554 :             DEBUGMSG (ZONE_IOCTL, (TEXT(" Invalid parameter\r\n")));

  06a70	e59f3ee4	 ldr         r3, [pc, #0xEE4]
  06a74	e5933440	 ldr         r3, [r3, #0x440]
  06a78	e3130020	 tst         r3, #0x20
  06a7c	0a000004	 beq         |$LN137@COM_IOCont|
  06a80	e59f0ef0	 ldr         r0, [pc, #0xEF0]
  06a84	eb000000	 bl          NKDbgPrintfW
  06a88	e3a03001	 mov         r3, #1
  06a8c	e58d3144	 str         r3, [sp, #0x144]
  06a90	ea000001	 b           |$LN138@COM_IOCont|
  06a94		 |$LN137@COM_IOCont|
  06a94	e3a03000	 mov         r3, #0
  06a98	e58d3144	 str         r3, [sp, #0x144]
  06a9c		 |$LN138@COM_IOCont|

; 2555 :             break;

  06a9c	ea00036f	 b           |$LN76@COM_IOCont|

; 2556 :         }
; 2557 :         else {

  06aa0	ea000020	 b           |$LN45@COM_IOCont|
  06aa4		 |$LN47@COM_IOCont|

; 2558 :             DWORD dwFlagEventMask = 0;

  06aa4	e3a03000	 mov         r3, #0
  06aa8	e58d303c	 str         r3, [sp, #0x3C]

; 2559 :             if ( WaitCommEvent_mdd(pOpenHead, &dwFlagEventMask, NULL) == FALSE ) {

  06aac	e3a02000	 mov         r2, #0
  06ab0	e28d103c	 add         r1, sp, #0x3C
  06ab4	e59d01f8	 ldr         r0, [sp, #0x1F8]
  06ab8	eb000000	 bl          WaitCommEvent_mdd
  06abc	e58d0148	 str         r0, [sp, #0x148]
  06ac0	e59d3148	 ldr         r3, [sp, #0x148]
  06ac4	e3530000	 cmp         r3, #0
  06ac8	1a000010	 bne         |$LN44@COM_IOCont|

; 2560 :                 // Device may have been closed or removed while we were waiting
; 2561 :                 DEBUGMSG (ZONE_IOCTL|ZONE_ERROR,
; 2562 :                           (TEXT(" COM_IOControl - Error in WaitCommEvent\r\n")));

  06acc	e59f3e88	 ldr         r3, [pc, #0xE88]
  06ad0	e5933440	 ldr         r3, [r3, #0x440]
  06ad4	e2032020	 and         r2, r3, #0x20
  06ad8	e59f3e7c	 ldr         r3, [pc, #0xE7C]
  06adc	e5933440	 ldr         r3, [r3, #0x440]
  06ae0	e2033902	 and         r3, r3, #2, 18
  06ae4	e1923003	 orrs        r3, r2, r3
  06ae8	0a000004	 beq         |$LN139@COM_IOCont|
  06aec	e59f0eb8	 ldr         r0, [pc, #0xEB8]
  06af0	eb000000	 bl          NKDbgPrintfW
  06af4	e3a03001	 mov         r3, #1
  06af8	e58d314c	 str         r3, [sp, #0x14C]
  06afc	ea000001	 b           |$LN140@COM_IOCont|
  06b00		 |$LN139@COM_IOCont|
  06b00	e3a03000	 mov         r3, #0
  06b04	e58d314c	 str         r3, [sp, #0x14C]
  06b08		 |$LN140@COM_IOCont|

; 2563 :                 RetVal = FALSE;

  06b08	e3a03000	 mov         r3, #0
  06b0c	e58d3010	 str         r3, [sp, #0x10]
  06b10		 |$LN44@COM_IOCont|

; 2564 :             }
; 2565 :             *((DWORD *)pBufOut)= dwFlagEventMask;

  06b10	e59d203c	 ldr         r2, [sp, #0x3C]
  06b14	e59d3208	 ldr         r3, [sp, #0x208]
  06b18	e5832000	 str         r2, [r3]

; 2566 :             // Return the size
; 2567 :             *pdwActualOut = sizeof(DWORD);

  06b1c	e59d2210	 ldr         r2, [sp, #0x210]
  06b20	e3a03004	 mov         r3, #4
  06b24	e5823000	 str         r3, [r2]
  06b28		 |$LN45@COM_IOCont|

; 2568 : 
; 2569 :         }
; 2570 :         break;

  06b28	ea00034c	 b           |$LN76@COM_IOCont|
  06b2c		 |$LN43@COM_IOCont|

; 2571 : 
; 2572 :         // ****************************************************************
; 2573 :         //
; 2574 :         //      @func BOOL      | IOCTL_SERIAL_GET_COMMSTATUS |
; 2575 :         //                              Device IO control routine to clear any pending
; 2576 :         //                              communications errors and return the current communication
; 2577 :         //                              status.
; 2578 :         //
; 2579 :         //      @parm DWORD | dwOpenData | value returned from COM_Open call
; 2580 :         //      @parm DWORD | dwCode | IOCTL_SERIAL_GET_COMMSTATUS
; 2581 :         //      @parm PBYTE | pBufIn | Ignored
; 2582 :         //      @parm DWORD | dwLenIn | Ignored
; 2583 :         //      @parm PBYTE | pBufOut | Points to a <f SERIAL_DEV_STATUS>
; 2584 :         //                              structure for the returned status information
; 2585 :         //      @parm DWORD | dwLenOut | should be sizeof(SERIAL_DEV_STATUS)
; 2586 :         //                              or larger
; 2587 :         //      @parm PDWORD | pdwActualOut | Points to DWORD to return length
; 2588 :         //                              of returned data (should be set to
; 2589 :         //                              sizeof(SERIAL_DEV_STATUS) if no error)
; 2590 :         //
; 2591 :         //      @rdesc          Returns TRUE for success, FALSE for failure (and
; 2592 :         //                              sets thread error code)
; 2593 :         //
; 2594 :         //
; 2595 :     case IOCTL_SERIAL_GET_COMMSTATUS :
; 2596 :         {
; 2597 :             SERIAL_DEV_STATUS SerialDevStat;
; 2598 : 
; 2599 :             DEBUGMSG (ZONE_IOCTL, (TEXT(" IOCTL_SERIAL_GET_COMMSTATUS\r\n")));

  06b2c	e59f3e28	 ldr         r3, [pc, #0xE28]
  06b30	e5933440	 ldr         r3, [r3, #0x440]
  06b34	e3130020	 tst         r3, #0x20
  06b38	0a000004	 beq         |$LN141@COM_IOCont|
  06b3c	e59f0e64	 ldr         r0, [pc, #0xE64]
  06b40	eb000000	 bl          NKDbgPrintfW
  06b44	e3a03001	 mov         r3, #1
  06b48	e58d3150	 str         r3, [sp, #0x150]
  06b4c	ea000001	 b           |$LN142@COM_IOCont|
  06b50		 |$LN141@COM_IOCont|
  06b50	e3a03000	 mov         r3, #0
  06b54	e58d3150	 str         r3, [sp, #0x150]
  06b58		 |$LN142@COM_IOCont|

; 2600 :             if ( (dwLenOut < sizeof(SERIAL_DEV_STATUS)) || (NULL == pBufOut) ||
; 2601 :                  (NULL == pdwActualOut) ) {

  06b58	e59d320c	 ldr         r3, [sp, #0x20C]
  06b5c	e3530010	 cmp         r3, #0x10
  06b60	3a000005	 bcc         |$LN41@COM_IOCont|
  06b64	e59d3208	 ldr         r3, [sp, #0x208]
  06b68	e3530000	 cmp         r3, #0
  06b6c	0a000002	 beq         |$LN41@COM_IOCont|
  06b70	e59d3210	 ldr         r3, [sp, #0x210]
  06b74	e3530000	 cmp         r3, #0
  06b78	1a00000f	 bne         |$LN42@COM_IOCont|
  06b7c		 |$LN41@COM_IOCont|

; 2602 :                 SetLastError (ERROR_INVALID_PARAMETER);

  06b7c	e3a00057	 mov         r0, #0x57
  06b80	eb000000	 bl          SetLastError

; 2603 :                 RetVal = FALSE;

  06b84	e3a03000	 mov         r3, #0
  06b88	e58d3010	 str         r3, [sp, #0x10]

; 2604 :                 DEBUGMSG (ZONE_IOCTL, (TEXT(" Invalid parameter\r\n")));

  06b8c	e59f3dc8	 ldr         r3, [pc, #0xDC8]
  06b90	e5933440	 ldr         r3, [r3, #0x440]
  06b94	e3130020	 tst         r3, #0x20
  06b98	0a000004	 beq         |$LN143@COM_IOCont|
  06b9c	e59f0dd4	 ldr         r0, [pc, #0xDD4]
  06ba0	eb000000	 bl          NKDbgPrintfW
  06ba4	e3a03001	 mov         r3, #1
  06ba8	e58d3154	 str         r3, [sp, #0x154]
  06bac	ea000001	 b           |$LN144@COM_IOCont|
  06bb0		 |$LN143@COM_IOCont|
  06bb0	e3a03000	 mov         r3, #0
  06bb4	e58d3154	 str         r3, [sp, #0x154]
  06bb8		 |$LN144@COM_IOCont|

; 2605 :                 break;

  06bb8	ea000328	 b           |$LN76@COM_IOCont|
  06bbc		 |$LN42@COM_IOCont|

; 2606 :             }
; 2607 :             // Clear the ComStat structure & get PDD related status
; 2608 :             memset ((char *) &(SerialDevStat.ComStat), 0, sizeof(COMSTAT));

  06bbc	e3a0200c	 mov         r2, #0xC
  06bc0	e3a01000	 mov         r1, #0
  06bc4	e28d0044	 add         r0, sp, #0x44
  06bc8	eb000000	 bl          memset

; 2609 :             
; 2610 :             // Set The Error Mask
; 2611 :             SerialDevStat.Errors = InterlockedExchange((LPLONG)&pHWIHead->dwMddErrors,0);

  06bcc	e3a01000	 mov         r1, #0
  06bd0	e59d3020	 ldr         r3, [sp, #0x20]
  06bd4	e2830f41	 add         r0, r3, #0x41, 30
  06bd8	eb000000	 bl          InterlockedExchange
  06bdc	e58d0158	 str         r0, [sp, #0x158]
  06be0	e59d3158	 ldr         r3, [sp, #0x158]
  06be4	e58d3040	 str         r3, [sp, #0x40]

; 2612 :             SerialDevStat.Errors |= pFuncTbl->HWGetStatus(pHWHead, &(SerialDevStat.ComStat));

  06be8	e28d1044	 add         r1, sp, #0x44
  06bec	e59d0028	 ldr         r0, [sp, #0x28]
  06bf0	e59d301c	 ldr         r3, [sp, #0x1C]
  06bf4	e2833058	 add         r3, r3, #0x58
  06bf8	e5933000	 ldr         r3, [r3]
  06bfc	e1a0e00f	 mov         lr, pc
  06c00	e12fff13	 bx          r3
  06c04	e58d015c	 str         r0, [sp, #0x15C]
  06c08	e59d2040	 ldr         r2, [sp, #0x40]
  06c0c	e59d315c	 ldr         r3, [sp, #0x15C]
  06c10	e1823003	 orr         r3, r2, r3
  06c14	e58d3040	 str         r3, [sp, #0x40]

; 2613 : 
; 2614 :             // PDD set fCtsHold, fDsrHold, fRLSDHold, and fTXim.  The MDD then
; 2615 :             // needs to set fXoffHold, fXoffSent, cbInQue, and cbOutQue.
; 2616 :             SerialDevStat.ComStat.cbInQue = RxBytesAvail(pHWIHead);

  06c18	e59d0020	 ldr         r0, [sp, #0x20]
  06c1c	eb000000	 bl          RxBytesAvail
  06c20	e58d0160	 str         r0, [sp, #0x160]
  06c24	e59d3160	 ldr         r3, [sp, #0x160]
  06c28	e58d3048	 str         r3, [sp, #0x48]

; 2617 :             SerialDevStat.ComStat.cbOutQue =  pHWIHead->TxBytesPending;

  06c2c	e59d3020	 ldr         r3, [sp, #0x20]
  06c30	e2833058	 add         r3, r3, #0x58
  06c34	e5933000	 ldr         r3, [r3]
  06c38	e58d304c	 str         r3, [sp, #0x4C]

; 2618 :             SerialDevStat.ComStat.fXoffHold = pHWIHead->StopXmit;

  06c3c	e59d3020	 ldr         r3, [sp, #0x20]
  06c40	e2833094	 add         r3, r3, #0x94
  06c44	e5933000	 ldr         r3, [r3]
  06c48	e1a03e83	 mov         r3, r3, lsl #29
  06c4c	e1a01fa3	 mov         r1, r3, lsr #31
  06c50	e59d2044	 ldr         r2, [sp, #0x44]
  06c54	e3e03008	 mvn         r3, #8
  06c58	e0022003	 and         r2, r2, r3
  06c5c	e2013001	 and         r3, r1, #1
  06c60	e1a03183	 mov         r3, r3, lsl #3
  06c64	e1823003	 orr         r3, r2, r3
  06c68	e58d3044	 str         r3, [sp, #0x44]

; 2619 :             SerialDevStat.ComStat.fXoffSent = pHWIHead->SentXoff;

  06c6c	e59d3020	 ldr         r3, [sp, #0x20]
  06c70	e2833094	 add         r3, r3, #0x94
  06c74	e5933000	 ldr         r3, [r3]
  06c78	e1a03e03	 mov         r3, r3, lsl #28
  06c7c	e1a01fa3	 mov         r1, r3, lsr #31
  06c80	e59d2044	 ldr         r2, [sp, #0x44]
  06c84	e3e03010	 mvn         r3, #0x10
  06c88	e0022003	 and         r2, r2, r3
  06c8c	e2013001	 and         r3, r1, #1
  06c90	e1a03203	 mov         r3, r3, lsl #4
  06c94	e1823003	 orr         r3, r2, r3
  06c98	e58d3044	 str         r3, [sp, #0x44]

; 2620 : 
; 2621 :             *((PSERIAL_DEV_STATUS)pBufOut) = SerialDevStat;

  06c9c	e59d0208	 ldr         r0, [sp, #0x208]
  06ca0	e28d1040	 add         r1, sp, #0x40
  06ca4	e3a02010	 mov         r2, #0x10
  06ca8	eb000000	 bl          memcpy

; 2622 :             *pdwActualOut = sizeof(SERIAL_DEV_STATUS);

  06cac	e59d2210	 ldr         r2, [sp, #0x210]
  06cb0	e3a03010	 mov         r3, #0x10
  06cb4	e5823000	 str         r3, [r2]

; 2623 : 
; 2624 :         }
; 2625 : 
; 2626 :         break;

  06cb8	ea0002e8	 b           |$LN76@COM_IOCont|
  06cbc		 |$LN40@COM_IOCont|

; 2627 : 
; 2628 :         // ****************************************************************
; 2629 :         //
; 2630 :         //      @func BOOL      | IOCTL_SERIAL_GET_MODEMSTATUS |
; 2631 :         //                              Device IO control routine to retrieve current
; 2632 :         //                              modem control-register values
; 2633 :         //
; 2634 :         //      @parm DWORD | dwOpenData | value returned from COM_Open call
; 2635 :         //      @parm DWORD | dwCode | IOCTL_SERIAL_GET_MODEMSTATUS
; 2636 :         //      @parm PBYTE | pBufIn | Ignored
; 2637 :         //      @parm DWORD | dwLenIn | Ignored
; 2638 :         //      @parm PBYTE | pBufOut | Points to a DWORD for the returned
; 2639 :         //                              modem status information
; 2640 :         //      @parm DWORD | dwLenOut | should be sizeof(DWORD)
; 2641 :         //                              or larger
; 2642 :         //      @parm PDWORD | pdwActualOut | Points to DWORD to return length
; 2643 :         //                              of returned data (should be set to sizeof(DWORD)
; 2644 :         //                              if no error)
; 2645 :         //
; 2646 :         //      @rdesc          Returns TRUE for success, FALSE for failure (and
; 2647 :         //                              sets thread error code)
; 2648 :         //
; 2649 :         //
; 2650 :     case IOCTL_SERIAL_GET_MODEMSTATUS :  {
; 2651 :         DWORD dwModemStatus = 0 ;

  06cbc	e3a03000	 mov         r3, #0
  06cc0	e58d3050	 str         r3, [sp, #0x50]

; 2652 :         DEBUGMSG (ZONE_IOCTL, (TEXT(" IOCTL_SERIAL_GET_MODEMSTATUS\r\n")));

  06cc4	e59f3c90	 ldr         r3, [pc, #0xC90]
  06cc8	e5933440	 ldr         r3, [r3, #0x440]
  06ccc	e3130020	 tst         r3, #0x20
  06cd0	0a000004	 beq         |$LN145@COM_IOCont|
  06cd4	e59f0cc8	 ldr         r0, [pc, #0xCC8]
  06cd8	eb000000	 bl          NKDbgPrintfW
  06cdc	e3a03001	 mov         r3, #1
  06ce0	e58d3164	 str         r3, [sp, #0x164]
  06ce4	ea000001	 b           |$LN146@COM_IOCont|
  06ce8		 |$LN145@COM_IOCont|
  06ce8	e3a03000	 mov         r3, #0
  06cec	e58d3164	 str         r3, [sp, #0x164]
  06cf0		 |$LN146@COM_IOCont|

; 2653 :         if ( (dwLenOut < sizeof(DWORD)) || (NULL == pBufOut) ||
; 2654 :              (NULL == pdwActualOut) ) {

  06cf0	e59d320c	 ldr         r3, [sp, #0x20C]
  06cf4	e3530004	 cmp         r3, #4
  06cf8	3a000005	 bcc         |$LN38@COM_IOCont|
  06cfc	e59d3208	 ldr         r3, [sp, #0x208]
  06d00	e3530000	 cmp         r3, #0
  06d04	0a000002	 beq         |$LN38@COM_IOCont|
  06d08	e59d3210	 ldr         r3, [sp, #0x210]
  06d0c	e3530000	 cmp         r3, #0
  06d10	1a00000f	 bne         |$LN39@COM_IOCont|
  06d14		 |$LN38@COM_IOCont|

; 2655 :             SetLastError (ERROR_INVALID_PARAMETER);

  06d14	e3a00057	 mov         r0, #0x57
  06d18	eb000000	 bl          SetLastError

; 2656 :             RetVal = FALSE;

  06d1c	e3a03000	 mov         r3, #0
  06d20	e58d3010	 str         r3, [sp, #0x10]

; 2657 :             DEBUGMSG (ZONE_IOCTL, (TEXT(" Invalid parameter\r\n")));

  06d24	e59f3c30	 ldr         r3, [pc, #0xC30]
  06d28	e5933440	 ldr         r3, [r3, #0x440]
  06d2c	e3130020	 tst         r3, #0x20
  06d30	0a000004	 beq         |$LN147@COM_IOCont|
  06d34	e59f0c3c	 ldr         r0, [pc, #0xC3C]
  06d38	eb000000	 bl          NKDbgPrintfW
  06d3c	e3a03001	 mov         r3, #1
  06d40	e58d3168	 str         r3, [sp, #0x168]
  06d44	ea000001	 b           |$LN148@COM_IOCont|
  06d48		 |$LN147@COM_IOCont|
  06d48	e3a03000	 mov         r3, #0
  06d4c	e58d3168	 str         r3, [sp, #0x168]
  06d50		 |$LN148@COM_IOCont|

; 2658 :             break;

  06d50	ea0002c2	 b           |$LN76@COM_IOCont|
  06d54		 |$LN39@COM_IOCont|

; 2659 :         }
; 2660 : 
; 2661 :         // Set the Modem Status dword
; 2662 :         pFuncTbl->HWGetModemStatus(pHWHead, &dwModemStatus);

  06d54	e28d1050	 add         r1, sp, #0x50
  06d58	e59d0028	 ldr         r0, [sp, #0x28]
  06d5c	e59d301c	 ldr         r3, [sp, #0x1C]
  06d60	e2833060	 add         r3, r3, #0x60
  06d64	e5933000	 ldr         r3, [r3]
  06d68	e1a0e00f	 mov         lr, pc
  06d6c	e12fff13	 bx          r3

; 2663 :         // Return the size
; 2664 :         *pdwActualOut = sizeof(DWORD);

  06d70	e59d2210	 ldr         r2, [sp, #0x210]
  06d74	e3a03004	 mov         r3, #4
  06d78	e5823000	 str         r3, [r2]

; 2665 :         *((PULONG)pBufOut) = dwModemStatus;

  06d7c	e59d2050	 ldr         r2, [sp, #0x50]
  06d80	e59d3208	 ldr         r3, [sp, #0x208]
  06d84	e5832000	 str         r2, [r3]

; 2666 :     }
; 2667 :         break;

  06d88	ea0002b4	 b           |$LN76@COM_IOCont|
  06d8c		 |$LN37@COM_IOCont|

; 2668 : 
; 2669 :         // ****************************************************************
; 2670 :         //
; 2671 :         //      @func BOOL      | IOCTL_SERIAL_GET_PROPERTIES |
; 2672 :         //                              Device IO control routine to retrieve information
; 2673 :         //                              about the communications properties for the device.
; 2674 :         //
; 2675 :         //      @parm DWORD | dwOpenData | value returned from COM_Open call
; 2676 :         //      @parm DWORD | dwCode | IOCTL_SERIAL_GET_PROPERTIES
; 2677 :         //      @parm PBYTE | pBufIn | Ignored
; 2678 :         //      @parm DWORD | dwLenIn | Ignored
; 2679 :         //      @parm PBYTE | pBufOut | Points to a <f COMMPROP> structure
; 2680 :         //                              for the returned information.
; 2681 :         //      @parm DWORD | dwLenOut | should be sizeof(COMMPROP)
; 2682 :         //                              or larger
; 2683 :         //      @parm PDWORD | pdwActualOut | Points to DWORD to return length
; 2684 :         //                              of returned data (should be set to sizeof(COMMPROP)
; 2685 :         //                              if no error)
; 2686 :         //
; 2687 :         //      @rdesc          Returns TRUE for success, FALSE for failure (and
; 2688 :         //                              sets thread error code)
; 2689 :         //
; 2690 :         //
; 2691 :     case IOCTL_SERIAL_GET_PROPERTIES :{
; 2692 :         COMMPROP commProp;
; 2693 :         DEBUGMSG (ZONE_IOCTL, (TEXT(" IOCTL_SERIAL_GET_PROPERTIES\r\n")));

  06d8c	e59f3bc8	 ldr         r3, [pc, #0xBC8]
  06d90	e5933440	 ldr         r3, [r3, #0x440]
  06d94	e3130020	 tst         r3, #0x20
  06d98	0a000004	 beq         |$LN149@COM_IOCont|
  06d9c	e59f0bfc	 ldr         r0, [pc, #0xBFC]
  06da0	eb000000	 bl          NKDbgPrintfW
  06da4	e3a03001	 mov         r3, #1
  06da8	e58d316c	 str         r3, [sp, #0x16C]
  06dac	ea000001	 b           |$LN150@COM_IOCont|
  06db0		 |$LN149@COM_IOCont|
  06db0	e3a03000	 mov         r3, #0
  06db4	e58d316c	 str         r3, [sp, #0x16C]
  06db8		 |$LN150@COM_IOCont|

; 2694 :         if ( (dwLenOut < sizeof(COMMPROP)) || (NULL == pBufOut) ||
; 2695 :              (NULL == pdwActualOut) ) {

  06db8	e59d320c	 ldr         r3, [sp, #0x20C]
  06dbc	e3530040	 cmp         r3, #0x40
  06dc0	3a000005	 bcc         |$LN35@COM_IOCont|
  06dc4	e59d3208	 ldr         r3, [sp, #0x208]
  06dc8	e3530000	 cmp         r3, #0
  06dcc	0a000002	 beq         |$LN35@COM_IOCont|
  06dd0	e59d3210	 ldr         r3, [sp, #0x210]
  06dd4	e3530000	 cmp         r3, #0
  06dd8	1a00000f	 bne         |$LN36@COM_IOCont|
  06ddc		 |$LN35@COM_IOCont|

; 2696 :             SetLastError (ERROR_INVALID_PARAMETER);

  06ddc	e3a00057	 mov         r0, #0x57
  06de0	eb000000	 bl          SetLastError

; 2697 :             RetVal = FALSE;

  06de4	e3a03000	 mov         r3, #0
  06de8	e58d3010	 str         r3, [sp, #0x10]

; 2698 :             DEBUGMSG (ZONE_IOCTL, (TEXT(" Invalid parameter\r\n")));

  06dec	e59f3b68	 ldr         r3, [pc, #0xB68]
  06df0	e5933440	 ldr         r3, [r3, #0x440]
  06df4	e3130020	 tst         r3, #0x20
  06df8	0a000004	 beq         |$LN151@COM_IOCont|
  06dfc	e59f0b74	 ldr         r0, [pc, #0xB74]
  06e00	eb000000	 bl          NKDbgPrintfW
  06e04	e3a03001	 mov         r3, #1
  06e08	e58d3170	 str         r3, [sp, #0x170]
  06e0c	ea000001	 b           |$LN152@COM_IOCont|
  06e10		 |$LN151@COM_IOCont|
  06e10	e3a03000	 mov         r3, #0
  06e14	e58d3170	 str         r3, [sp, #0x170]
  06e18		 |$LN152@COM_IOCont|

; 2699 :             break;

  06e18	ea000290	 b           |$LN76@COM_IOCont|
  06e1c		 |$LN36@COM_IOCont|

; 2700 :         }
; 2701 : 
; 2702 :         // Clear the ComMProp structure
; 2703 :         memset ((char *) &commProp, 0, sizeof(COMMPROP));

  06e1c	e3a02040	 mov         r2, #0x40
  06e20	e3a01000	 mov         r1, #0
  06e24	e28d0054	 add         r0, sp, #0x54
  06e28	eb000000	 bl          memset

; 2704 : 
; 2705 :         pFuncTbl->HWGetCommProperties(pHWHead, &commProp);

  06e2c	e28d1054	 add         r1, sp, #0x54
  06e30	e59d0028	 ldr         r0, [sp, #0x28]
  06e34	e59d301c	 ldr         r3, [sp, #0x1C]
  06e38	e2833064	 add         r3, r3, #0x64
  06e3c	e5933000	 ldr         r3, [r3]
  06e40	e1a0e00f	 mov         lr, pc
  06e44	e12fff13	 bx          r3

; 2706 : 
; 2707 :         *((LPCOMMPROP)pBufOut) = commProp;

  06e48	e59d0208	 ldr         r0, [sp, #0x208]
  06e4c	e28d1054	 add         r1, sp, #0x54
  06e50	e3a02040	 mov         r2, #0x40
  06e54	eb000000	 bl          memcpy

; 2708 :         *pdwActualOut = sizeof(COMMPROP);

  06e58	e59d2210	 ldr         r2, [sp, #0x210]
  06e5c	e3a03040	 mov         r3, #0x40
  06e60	e5823000	 str         r3, [r2]

; 2709 :     }
; 2710 :         break;

  06e64	ea00027d	 b           |$LN76@COM_IOCont|
  06e68		 |$LN34@COM_IOCont|

; 2711 : 
; 2712 :         // ****************************************************************
; 2713 :         //
; 2714 :         //      @func BOOL      | IOCTL_SERIAL_SET_TIMEOUTS |
; 2715 :         //                              Device IO control routine to set the time-out parameters
; 2716 :         //                              for all read and write operations on a specified
; 2717 :         //                              communications device
; 2718 :         //
; 2719 :         //      @parm DWORD | dwOpenData | value returned from COM_Open call
; 2720 :         //      @parm DWORD | dwCode | IOCTL_SERIAL_SET_TIMEOUTS
; 2721 :         //      @parm PBYTE | pBufIn | Pointer to the <f COMMTIMEOUTS> structure
; 2722 :         //      @parm DWORD | dwLenIn | should be sizeof(COMMTIMEOUTS)
; 2723 :         //      @parm PBYTE | pBufOut | Ignored
; 2724 :         //      @parm DWORD | dwLenOut | Ignored
; 2725 :         //      @parm PDWORD | pdwActualOut | Ignored
; 2726 :         //
; 2727 :         //      @rdesc          Returns TRUE for success, FALSE for failure (and
; 2728 :         //                              sets thread error code)
; 2729 :         //
; 2730 :         //      @xref           <f IOCTL_SERIAL_GET_TIMEOUTS>
; 2731 :         //
; 2732 :     case IOCTL_SERIAL_SET_TIMEOUTS :
; 2733 :         if ( (dwLenIn < sizeof(COMMTIMEOUTS)) || (NULL == pBufIn) ) {

  06e68	e59d3204	 ldr         r3, [sp, #0x204]
  06e6c	e3530014	 cmp         r3, #0x14
  06e70	3a000002	 bcc         |$LN32@COM_IOCont|
  06e74	e59d3200	 ldr         r3, [sp, #0x200]
  06e78	e3530000	 cmp         r3, #0
  06e7c	1a00000f	 bne         |$LN33@COM_IOCont|
  06e80		 |$LN32@COM_IOCont|

; 2734 :             SetLastError (ERROR_INVALID_PARAMETER);

  06e80	e3a00057	 mov         r0, #0x57
  06e84	eb000000	 bl          SetLastError

; 2735 :             RetVal = FALSE;

  06e88	e3a03000	 mov         r3, #0
  06e8c	e58d3010	 str         r3, [sp, #0x10]

; 2736 :             DEBUGMSG (ZONE_IOCTL, (TEXT(" Invalid parameter\r\n")));

  06e90	e59f3ac4	 ldr         r3, [pc, #0xAC4]
  06e94	e5933440	 ldr         r3, [r3, #0x440]
  06e98	e3130020	 tst         r3, #0x20
  06e9c	0a000004	 beq         |$LN153@COM_IOCont|
  06ea0	e59f0ad0	 ldr         r0, [pc, #0xAD0]
  06ea4	eb000000	 bl          NKDbgPrintfW
  06ea8	e3a03001	 mov         r3, #1
  06eac	e58d3174	 str         r3, [sp, #0x174]
  06eb0	ea000001	 b           |$LN154@COM_IOCont|
  06eb4		 |$LN153@COM_IOCont|
  06eb4	e3a03000	 mov         r3, #0
  06eb8	e58d3174	 str         r3, [sp, #0x174]
  06ebc		 |$LN154@COM_IOCont|

; 2737 :             break;

  06ebc	ea000267	 b           |$LN76@COM_IOCont|
  06ec0		 |$LN33@COM_IOCont|

; 2738 :         }
; 2739 :         pHWIHead->CommTimeouts = *((COMMTIMEOUTS *)pBufIn) ;

  06ec0	e59d1200	 ldr         r1, [sp, #0x200]
  06ec4	e59d3020	 ldr         r3, [sp, #0x20]
  06ec8	e283007c	 add         r0, r3, #0x7C
  06ecc	e3a02014	 mov         r2, #0x14
  06ed0	eb000000	 bl          memcpy

; 2740 :         DEBUGMSG (ZONE_IOCTL,
; 2741 :                   (TEXT(" IOCTL_SERIAL_SET_COMMTIMEOUTS (%d,%d,%d,%d,%d)\r\n"),
; 2742 :                    pHWIHead->CommTimeouts.ReadIntervalTimeout,
; 2743 :                    pHWIHead->CommTimeouts.ReadTotalTimeoutMultiplier,
; 2744 :                    pHWIHead->CommTimeouts.ReadTotalTimeoutConstant,
; 2745 :                    pHWIHead->CommTimeouts.WriteTotalTimeoutMultiplier,
; 2746 :                    pHWIHead->CommTimeouts.WriteTotalTimeoutConstant));

  06ed4	e59f3a80	 ldr         r3, [pc, #0xA80]
  06ed8	e5933440	 ldr         r3, [r3, #0x440]
  06edc	e3130020	 tst         r3, #0x20
  06ee0	0a000015	 beq         |$LN155@COM_IOCont|
  06ee4	e59d3020	 ldr         r3, [sp, #0x20]
  06ee8	e283308c	 add         r3, r3, #0x8C
  06eec	e5933000	 ldr         r3, [r3]
  06ef0	e58d3004	 str         r3, [sp, #4]
  06ef4	e59d3020	 ldr         r3, [sp, #0x20]
  06ef8	e2833088	 add         r3, r3, #0x88
  06efc	e5933000	 ldr         r3, [r3]
  06f00	e58d3000	 str         r3, [sp]
  06f04	e59d3020	 ldr         r3, [sp, #0x20]
  06f08	e2833084	 add         r3, r3, #0x84
  06f0c	e5933000	 ldr         r3, [r3]
  06f10	e59d2020	 ldr         r2, [sp, #0x20]
  06f14	e2822080	 add         r2, r2, #0x80
  06f18	e5922000	 ldr         r2, [r2]
  06f1c	e59d1020	 ldr         r1, [sp, #0x20]
  06f20	e281107c	 add         r1, r1, #0x7C
  06f24	e5911000	 ldr         r1, [r1]
  06f28	e59f0a6c	 ldr         r0, [pc, #0xA6C]
  06f2c	eb000000	 bl          NKDbgPrintfW
  06f30	e3a03001	 mov         r3, #1
  06f34	e58d3178	 str         r3, [sp, #0x178]
  06f38	ea000001	 b           |$LN156@COM_IOCont|
  06f3c		 |$LN155@COM_IOCont|
  06f3c	e3a03000	 mov         r3, #0
  06f40	e58d3178	 str         r3, [sp, #0x178]
  06f44		 |$LN156@COM_IOCont|

; 2747 : 
; 2748 :         pFuncTbl->HWSetCommTimeouts(pHWHead,&pHWIHead->CommTimeouts);

  06f44	e59d3020	 ldr         r3, [sp, #0x20]
  06f48	e283107c	 add         r1, r3, #0x7C
  06f4c	e59d0028	 ldr         r0, [sp, #0x28]
  06f50	e59d301c	 ldr         r3, [sp, #0x1C]
  06f54	e2833070	 add         r3, r3, #0x70
  06f58	e5933000	 ldr         r3, [r3]
  06f5c	e1a0e00f	 mov         lr, pc
  06f60	e12fff13	 bx          r3

; 2749 :         break;

  06f64	ea00023d	 b           |$LN76@COM_IOCont|
  06f68		 |$LN31@COM_IOCont|

; 2750 : 
; 2751 :         // ****************************************************************
; 2752 :         //
; 2753 :         //      @func BOOL      | IOCTL_SERIAL_GET_TIMEOUTS |
; 2754 :         //                              Device IO control routine to get the time-out parameters
; 2755 :         //                              for all read and write operations on a specified
; 2756 :         //                              communications device
; 2757 :         //
; 2758 :         //      @parm DWORD | dwOpenData | value returned from COM_Open call
; 2759 :         //      @parm DWORD | dwCode | IOCTL_SERIAL_GET_TIMEOUTS
; 2760 :         //      @parm PBYTE | pBufIn | Ignored
; 2761 :         //      @parm DWORD | dwLenIn | Ignored
; 2762 :         //      @parm PBYTE | pBufOut | Pointer to a <f COMMTIMEOUTS> structure
; 2763 :         //                              for the returned data
; 2764 :         //      @parm DWORD | dwLenOut | should be sizeof(COMMTIMEOUTS)
; 2765 :         //      @parm PDWORD | pdwActualOut | Points to DWORD to return length
; 2766 :         //                              of returned data (should be set to sizeof(COMMTIMEOUTS)
; 2767 :         //                              if no error)
; 2768 :         //
; 2769 :         //      @rdesc          Returns TRUE for success, FALSE for failure (and
; 2770 :         //                              sets thread error code)
; 2771 :         //
; 2772 :         //      @xref           <f IOCTL_SERIAL_GET_TIMEOUTS>
; 2773 :         //
; 2774 :     case IOCTL_SERIAL_GET_TIMEOUTS :
; 2775 :         DEBUGMSG (ZONE_IOCTL, (TEXT(" IOCTL_SERIAL_GET_TIMEOUTS\r\n")));

  06f68	e59f39ec	 ldr         r3, [pc, #0x9EC]
  06f6c	e5933440	 ldr         r3, [r3, #0x440]
  06f70	e3130020	 tst         r3, #0x20
  06f74	0a000004	 beq         |$LN157@COM_IOCont|
  06f78	e59f0a18	 ldr         r0, [pc, #0xA18]
  06f7c	eb000000	 bl          NKDbgPrintfW
  06f80	e3a03001	 mov         r3, #1
  06f84	e58d317c	 str         r3, [sp, #0x17C]
  06f88	ea000001	 b           |$LN158@COM_IOCont|
  06f8c		 |$LN157@COM_IOCont|
  06f8c	e3a03000	 mov         r3, #0
  06f90	e58d317c	 str         r3, [sp, #0x17C]
  06f94		 |$LN158@COM_IOCont|

; 2776 :         if ( (dwLenOut < sizeof(COMMTIMEOUTS)) || (NULL == pBufOut) ||
; 2777 :              (NULL == pdwActualOut) ) {

  06f94	e59d320c	 ldr         r3, [sp, #0x20C]
  06f98	e3530014	 cmp         r3, #0x14
  06f9c	3a000005	 bcc         |$LN29@COM_IOCont|
  06fa0	e59d3208	 ldr         r3, [sp, #0x208]
  06fa4	e3530000	 cmp         r3, #0
  06fa8	0a000002	 beq         |$LN29@COM_IOCont|
  06fac	e59d3210	 ldr         r3, [sp, #0x210]
  06fb0	e3530000	 cmp         r3, #0
  06fb4	1a00000f	 bne         |$LN30@COM_IOCont|
  06fb8		 |$LN29@COM_IOCont|

; 2778 :             SetLastError (ERROR_INVALID_PARAMETER);

  06fb8	e3a00057	 mov         r0, #0x57
  06fbc	eb000000	 bl          SetLastError

; 2779 :             RetVal = FALSE;

  06fc0	e3a03000	 mov         r3, #0
  06fc4	e58d3010	 str         r3, [sp, #0x10]

; 2780 :             DEBUGMSG (ZONE_IOCTL, (TEXT(" Invalid parameter\r\n")));

  06fc8	e59f398c	 ldr         r3, [pc, #0x98C]
  06fcc	e5933440	 ldr         r3, [r3, #0x440]
  06fd0	e3130020	 tst         r3, #0x20
  06fd4	0a000004	 beq         |$LN159@COM_IOCont|
  06fd8	e59f0998	 ldr         r0, [pc, #0x998]
  06fdc	eb000000	 bl          NKDbgPrintfW
  06fe0	e3a03001	 mov         r3, #1
  06fe4	e58d3180	 str         r3, [sp, #0x180]
  06fe8	ea000001	 b           |$LN160@COM_IOCont|
  06fec		 |$LN159@COM_IOCont|
  06fec	e3a03000	 mov         r3, #0
  06ff0	e58d3180	 str         r3, [sp, #0x180]
  06ff4		 |$LN160@COM_IOCont|

; 2781 :             break;

  06ff4	ea000219	 b           |$LN76@COM_IOCont|
  06ff8		 |$LN30@COM_IOCont|

; 2782 :         }
; 2783 : 
; 2784 :             // Clear the structure
; 2785 :         memset ((char *) ((COMMTIMEOUTS *)pBufOut), 0,
; 2786 :                 sizeof(COMMTIMEOUTS));

  06ff8	e3a02014	 mov         r2, #0x14
  06ffc	e3a01000	 mov         r1, #0
  07000	e59d0208	 ldr         r0, [sp, #0x208]
  07004	eb000000	 bl          memset

; 2787 :         memcpy((LPCOMMTIMEOUTS)pBufOut, &(pHWIHead->CommTimeouts),
; 2788 :                sizeof(COMMTIMEOUTS));

  07008	e3a02014	 mov         r2, #0x14
  0700c	e59d3020	 ldr         r3, [sp, #0x20]
  07010	e283107c	 add         r1, r3, #0x7C
  07014	e59d0208	 ldr         r0, [sp, #0x208]
  07018	eb000000	 bl          memcpy

; 2789 :         // Return the size
; 2790 :         *pdwActualOut = sizeof(COMMTIMEOUTS);

  0701c	e59d2210	 ldr         r2, [sp, #0x210]
  07020	e3a03014	 mov         r3, #0x14
  07024	e5823000	 str         r3, [r2]

; 2791 :         break;

  07028	ea00020c	 b           |$LN76@COM_IOCont|
  0702c		 |$LN28@COM_IOCont|

; 2792 : 
; 2793 :         // ****************************************************************
; 2794 :         //
; 2795 :         //      @func BOOL      | IOCTL_SERIAL_PURGE |
; 2796 :         //                              Device IO control routine to discard characters from the
; 2797 :         //                              output or input buffer of a specified communications
; 2798 :         //                              resource.  It can also terminate pending read or write
; 2799 :         //                              operations on the resource
; 2800 :         //
; 2801 :         //      @parm DWORD | dwOpenData | value returned from COM_Open call
; 2802 :         //      @parm DWORD | dwCode | IOCTL_SERIAL_PURGE
; 2803 :         //      @parm PBYTE | pBufIn | Pointer to a DWORD containing the action
; 2804 :         //      @parm DWORD | dwLenIn | Should be sizeof(DWORD)
; 2805 :         //      @parm PBYTE | pBufOut | Ignored
; 2806 :         //      @parm DWORD | dwLenOut | Ignored
; 2807 :         //      @parm PDWORD | pdwActualOut | Ignored
; 2808 :         //
; 2809 :         //      @rdesc          Returns TRUE for success, FALSE for failure (and
; 2810 :         //                              sets thread error code)
; 2811 :         //
; 2812 :         //
; 2813 :     case IOCTL_SERIAL_PURGE :
; 2814 :         if ( (dwLenIn < sizeof(DWORD)) || (NULL == pBufIn) ) {

  0702c	e59d3204	 ldr         r3, [sp, #0x204]
  07030	e3530004	 cmp         r3, #4
  07034	3a000002	 bcc         |$LN26@COM_IOCont|
  07038	e59d3200	 ldr         r3, [sp, #0x200]
  0703c	e3530000	 cmp         r3, #0
  07040	1a00000f	 bne         |$LN27@COM_IOCont|
  07044		 |$LN26@COM_IOCont|

; 2815 :             SetLastError (ERROR_INVALID_PARAMETER);

  07044	e3a00057	 mov         r0, #0x57
  07048	eb000000	 bl          SetLastError

; 2816 :             RetVal = FALSE;

  0704c	e3a03000	 mov         r3, #0
  07050	e58d3010	 str         r3, [sp, #0x10]

; 2817 :             DEBUGMSG (ZONE_IOCTL, (TEXT(" Invalid parameter\r\n")));

  07054	e59f3900	 ldr         r3, [pc, #0x900]
  07058	e5933440	 ldr         r3, [r3, #0x440]
  0705c	e3130020	 tst         r3, #0x20
  07060	0a000004	 beq         |$LN161@COM_IOCont|
  07064	e59f090c	 ldr         r0, [pc, #0x90C]
  07068	eb000000	 bl          NKDbgPrintfW
  0706c	e3a03001	 mov         r3, #1
  07070	e58d3184	 str         r3, [sp, #0x184]
  07074	ea000001	 b           |$LN162@COM_IOCont|
  07078		 |$LN161@COM_IOCont|
  07078	e3a03000	 mov         r3, #0
  0707c	e58d3184	 str         r3, [sp, #0x184]
  07080		 |$LN162@COM_IOCont|

; 2818 :             break;

  07080	ea0001f6	 b           |$LN76@COM_IOCont|
  07084		 |$LN27@COM_IOCont|

; 2819 :         }
; 2820 :         dwFlags = *((PDWORD) pBufIn);

  07084	e59d3200	 ldr         r3, [sp, #0x200]
  07088	e5933000	 ldr         r3, [r3]
  0708c	e58d3024	 str         r3, [sp, #0x24]

; 2821 : 
; 2822 :         DEBUGMSG (ZONE_IOCTL, (TEXT(" IOCTL_SERIAL_PURGE 0x%X\r\n"),dwFlags));

  07090	e59f38c4	 ldr         r3, [pc, #0x8C4]
  07094	e5933440	 ldr         r3, [r3, #0x440]
  07098	e3130020	 tst         r3, #0x20
  0709c	0a000005	 beq         |$LN163@COM_IOCont|
  070a0	e59d1024	 ldr         r1, [sp, #0x24]
  070a4	e59f08e8	 ldr         r0, [pc, #0x8E8]
  070a8	eb000000	 bl          NKDbgPrintfW
  070ac	e3a03001	 mov         r3, #1
  070b0	e58d3188	 str         r3, [sp, #0x188]
  070b4	ea000001	 b           |$LN164@COM_IOCont|
  070b8		 |$LN163@COM_IOCont|
  070b8	e3a03000	 mov         r3, #0
  070bc	e58d3188	 str         r3, [sp, #0x188]
  070c0		 |$LN164@COM_IOCont|

; 2823 : 
; 2824 :         pFuncTbl->HWPurgeComm(pHWHead,dwFlags);

  070c0	e59d1024	 ldr         r1, [sp, #0x24]
  070c4	e59d0028	 ldr         r0, [sp, #0x28]
  070c8	e59d301c	 ldr         r3, [sp, #0x1C]
  070cc	e2833068	 add         r3, r3, #0x68
  070d0	e5933000	 ldr         r3, [r3]
  070d4	e1a0e00f	 mov         lr, pc
  070d8	e12fff13	 bx          r3

; 2825 :         if ( dwFlags & PURGE_RXCLEAR ) {

  070dc	e59d3024	 ldr         r3, [sp, #0x24]
  070e0	e3130008	 tst         r3, #8
  070e4	0a0000bc	 beq         |$LN25@COM_IOCont|

; 2826 :             RxEnterCS(pHWIHead);

  070e8	e59d3020	 ldr         r3, [sp, #0x20]
  070ec	e28300b0	 add         r0, r3, #0xB0
  070f0	eb000000	 bl          EnterCriticalSection

; 2827 :             DEBUGMSG(ZONE_IOCTL|ZONE_USR_READ,
; 2828 :                      (TEXT(" Flushing %d bytes from the read buffer\r\n"),RxBytesAvail(pHWIHead)));

  070f4	e59f3860	 ldr         r3, [pc, #0x860]
  070f8	e5933440	 ldr         r3, [r3, #0x440]
  070fc	e2032020	 and         r2, r3, #0x20
  07100	e59f3854	 ldr         r3, [pc, #0x854]
  07104	e5933440	 ldr         r3, [r3, #0x440]
  07108	e2033b02	 and         r3, r3, #2, 22
  0710c	e1923003	 orrs        r3, r2, r3
  07110	0a000008	 beq         |$LN165@COM_IOCont|
  07114	e59d0020	 ldr         r0, [sp, #0x20]
  07118	eb000000	 bl          RxBytesAvail
  0711c	e58d018c	 str         r0, [sp, #0x18C]
  07120	e59d118c	 ldr         r1, [sp, #0x18C]
  07124	e59f0864	 ldr         r0, [pc, #0x864]
  07128	eb000000	 bl          NKDbgPrintfW
  0712c	e3a03001	 mov         r3, #1
  07130	e58d3190	 str         r3, [sp, #0x190]
  07134	ea000001	 b           |$LN166@COM_IOCont|
  07138		 |$LN165@COM_IOCont|
  07138	e3a03000	 mov         r3, #0
  0713c	e58d3190	 str         r3, [sp, #0x190]
  07140		 |$LN166@COM_IOCont|

; 2829 :             pHWIHead->RxBufferInfo.Read = pHWIHead->RxBufferInfo.Write;

  07140	e59d3020	 ldr         r3, [sp, #0x20]
  07144	e28310a0	 add         r1, r3, #0xA0
  07148	e59d3020	 ldr         r3, [sp, #0x20]
  0714c	e283209c	 add         r2, r3, #0x9C
  07150	e5913000	 ldr         r3, [r1]
  07154	e5823000	 str         r3, [r2]

; 2830 :             memset(pHWIHead->RxBufferInfo.RxCharBuffer, 0, pHWIHead->RxBufferInfo.Length);

  07158	e59d3020	 ldr         r3, [sp, #0x20]
  0715c	e28330a4	 add         r3, r3, #0xA4
  07160	e5932000	 ldr         r2, [r3]
  07164	e3a01000	 mov         r1, #0
  07168	e59d3020	 ldr         r3, [sp, #0x20]
  0716c	e28330ac	 add         r3, r3, #0xAC
  07170	e5930000	 ldr         r0, [r3]
  07174	eb000000	 bl          memset

; 2831 :             RxLeaveCS(pHWIHead);

  07178	e59d3020	 ldr         r3, [sp, #0x20]
  0717c	e28300b0	 add         r0, r3, #0xB0
  07180	eb000000	 bl          LeaveCriticalSection

; 2832 :             // Clear any flow control state
; 2833 :             if ( pHWIHead->DCB.fInX && pHWIHead->SentXoff ) {

  07184	e59d3020	 ldr         r3, [sp, #0x20]
  07188	e2833068	 add         r3, r3, #0x68
  0718c	e5933000	 ldr         r3, [r3]
  07190	e3130c02	 tst         r3, #2, 24
  07194	0a000034	 beq         |$LN24@COM_IOCont|
  07198	e59d3020	 ldr         r3, [sp, #0x20]
  0719c	e2833094	 add         r3, r3, #0x94
  071a0	e5933000	 ldr         r3, [r3]
  071a4	e3130008	 tst         r3, #8
  071a8	0a00002f	 beq         |$LN24@COM_IOCont|

; 2834 :                 DEBUGMSG (ZONE_IOCTL|ZONE_FLOW, (TEXT("Sending XON\r\n")));

  071ac	e59f37a8	 ldr         r3, [pc, #0x7A8]
  071b0	e5933440	 ldr         r3, [r3, #0x440]
  071b4	e2032020	 and         r2, r3, #0x20
  071b8	e59f379c	 ldr         r3, [pc, #0x79C]
  071bc	e5933440	 ldr         r3, [r3, #0x440]
  071c0	e2033c02	 and         r3, r3, #2, 24
  071c4	e1923003	 orrs        r3, r2, r3
  071c8	0a000004	 beq         |$LN167@COM_IOCont|
  071cc	e59f07b8	 ldr         r0, [pc, #0x7B8]
  071d0	eb000000	 bl          NKDbgPrintfW
  071d4	e3a03001	 mov         r3, #1
  071d8	e58d3194	 str         r3, [sp, #0x194]
  071dc	ea000001	 b           |$LN168@COM_IOCont|
  071e0		 |$LN167@COM_IOCont|
  071e0	e3a03000	 mov         r3, #0
  071e4	e58d3194	 str         r3, [sp, #0x194]
  071e8		 |$LN168@COM_IOCont|

; 2835 :                 pHWIHead->SentXoff = 0;

  071e8	e59d3020	 ldr         r3, [sp, #0x20]
  071ec	e2833094	 add         r3, r3, #0x94
  071f0	e5932000	 ldr         r2, [r3]
  071f4	e3e03008	 mvn         r3, #8
  071f8	e0022003	 and         r2, r2, r3
  071fc	e59d3020	 ldr         r3, [sp, #0x20]
  07200	e2833094	 add         r3, r3, #0x94
  07204	e5832000	 str         r2, [r3]

; 2836 :                 if ( !pHWIHead->DCB.fTXContinueOnXoff ) {

  07208	e59d3020	 ldr         r3, [sp, #0x20]
  0720c	e2833068	 add         r3, r3, #0x68
  07210	e5933000	 ldr         r3, [r3]
  07214	e3130080	 tst         r3, #0x80
  07218	1a000007	 bne         |$LN23@COM_IOCont|

; 2837 :                     pHWIHead->StopXmit = 0;

  0721c	e59d3020	 ldr         r3, [sp, #0x20]
  07220	e2833094	 add         r3, r3, #0x94
  07224	e5932000	 ldr         r2, [r3]
  07228	e3e03004	 mvn         r3, #4
  0722c	e0022003	 and         r2, r2, r3
  07230	e59d3020	 ldr         r3, [sp, #0x20]
  07234	e2833094	 add         r3, r3, #0x94
  07238	e5832000	 str         r2, [r3]
  0723c		 |$LN23@COM_IOCont|

; 2838 :                 }
; 2839 :                 pFuncTbl->HWXmitComChar(pHWIHead->pHWHead,pHWIHead->DCB.XonChar);

  0723c	e59d3020	 ldr         r3, [sp, #0x20]
  07240	e2833075	 add         r3, r3, #0x75
  07244	e1d330d0	 ldrsb       r3, [r3]
  07248	e20310ff	 and         r1, r3, #0xFF
  0724c	e59d3020	 ldr         r3, [sp, #0x20]
  07250	e283302c	 add         r3, r3, #0x2C
  07254	e5930000	 ldr         r0, [r3]
  07258	e59d301c	 ldr         r3, [sp, #0x1C]
  0725c	e2833054	 add         r3, r3, #0x54
  07260	e5933000	 ldr         r3, [r3]
  07264	e1a0e00f	 mov         lr, pc
  07268	e12fff13	 bx          r3
  0726c		 |$LN24@COM_IOCont|

; 2840 :             }
; 2841 :             if ( pHWIHead->RtsFlow &&
; 2842 :                  (pHWIHead->DCB.fRtsControl == RTS_CONTROL_HANDSHAKE) ) {

  0726c	e59d3020	 ldr         r3, [sp, #0x20]
  07270	e2833094	 add         r3, r3, #0x94
  07274	e5933000	 ldr         r3, [r3]
  07278	e3130020	 tst         r3, #0x20
  0727c	0a000029	 beq         |$LN22@COM_IOCont|
  07280	e59d3020	 ldr         r3, [sp, #0x20]
  07284	e2833068	 add         r3, r3, #0x68
  07288	e5933000	 ldr         r3, [r3]
  0728c	e1a03903	 mov         r3, r3, lsl #18
  07290	e1a03f23	 mov         r3, r3, lsr #30
  07294	e3530002	 cmp         r3, #2
  07298	1a000022	 bne         |$LN22@COM_IOCont|

; 2843 :                 DEBUGMSG (ZONE_IOCTL|ZONE_USR_READ|ZONE_FLOW,
; 2844 :                           (TEXT("RTS_CONTROL_HANDSHAKE Setting RTS\r\n")));

  0729c	e59f36b8	 ldr         r3, [pc, #0x6B8]
  072a0	e5933440	 ldr         r3, [r3, #0x440]
  072a4	e2032020	 and         r2, r3, #0x20
  072a8	e59f36ac	 ldr         r3, [pc, #0x6AC]
  072ac	e5933440	 ldr         r3, [r3, #0x440]
  072b0	e2033b02	 and         r3, r3, #2, 22
  072b4	e1822003	 orr         r2, r2, r3
  072b8	e59f369c	 ldr         r3, [pc, #0x69C]
  072bc	e5933440	 ldr         r3, [r3, #0x440]
  072c0	e2033c02	 and         r3, r3, #2, 24
  072c4	e1923003	 orrs        r3, r2, r3
  072c8	0a000004	 beq         |$LN169@COM_IOCont|
  072cc	e59f06b4	 ldr         r0, [pc, #0x6B4]
  072d0	eb000000	 bl          NKDbgPrintfW
  072d4	e3a03001	 mov         r3, #1
  072d8	e58d3198	 str         r3, [sp, #0x198]
  072dc	ea000001	 b           |$LN170@COM_IOCont|
  072e0		 |$LN169@COM_IOCont|
  072e0	e3a03000	 mov         r3, #0
  072e4	e58d3198	 str         r3, [sp, #0x198]
  072e8		 |$LN170@COM_IOCont|

; 2845 :                 pHWIHead->RtsFlow = 0;

  072e8	e59d3020	 ldr         r3, [sp, #0x20]
  072ec	e2833094	 add         r3, r3, #0x94
  072f0	e5932000	 ldr         r2, [r3]
  072f4	e3e03020	 mvn         r3, #0x20
  072f8	e0022003	 and         r2, r2, r3
  072fc	e59d3020	 ldr         r3, [sp, #0x20]
  07300	e2833094	 add         r3, r3, #0x94
  07304	e5832000	 str         r2, [r3]

; 2846 :                 pFuncTbl->HWSetRTS(pHWIHead->pHWHead);

  07308	e59d3020	 ldr         r3, [sp, #0x20]
  0730c	e283302c	 add         r3, r3, #0x2C
  07310	e5930000	 ldr         r0, [r3]
  07314	e59d301c	 ldr         r3, [sp, #0x1C]
  07318	e2833040	 add         r3, r3, #0x40
  0731c	e5933000	 ldr         r3, [r3]
  07320	e1a0e00f	 mov         lr, pc
  07324	e12fff13	 bx          r3
  07328		 |$LN22@COM_IOCont|

; 2847 :             }
; 2848 :             if ( pHWIHead->DtrFlow &&
; 2849 :                  (pHWIHead->DCB.fDtrControl == DTR_CONTROL_HANDSHAKE) ) {

  07328	e59d3020	 ldr         r3, [sp, #0x20]
  0732c	e2833094	 add         r3, r3, #0x94
  07330	e5933000	 ldr         r3, [r3]
  07334	e3130010	 tst         r3, #0x10
  07338	0a000027	 beq         |$LN21@COM_IOCont|
  0733c	e59d3020	 ldr         r3, [sp, #0x20]
  07340	e2833068	 add         r3, r3, #0x68
  07344	e5933000	 ldr         r3, [r3]
  07348	e1a03d03	 mov         r3, r3, lsl #26
  0734c	e1a03f23	 mov         r3, r3, lsr #30
  07350	e3530002	 cmp         r3, #2
  07354	1a000020	 bne         |$LN21@COM_IOCont|

; 2850 :                 DEBUGMSG (ZONE_IOCTL|ZONE_USR_READ|ZONE_FLOW,
; 2851 :                           (TEXT("DTR_CONTROL_HANDSHAKE Setting DTR\r\n")));

  07358	e59f35fc	 ldr         r3, [pc, #0x5FC]
  0735c	e5933440	 ldr         r3, [r3, #0x440]
  07360	e2032020	 and         r2, r3, #0x20
  07364	e59f35f0	 ldr         r3, [pc, #0x5F0]
  07368	e5933440	 ldr         r3, [r3, #0x440]
  0736c	e2033b02	 and         r3, r3, #2, 22
  07370	e1822003	 orr         r2, r2, r3
  07374	e59f35e0	 ldr         r3, [pc, #0x5E0]
  07378	e5933440	 ldr         r3, [r3, #0x440]
  0737c	e2033c02	 and         r3, r3, #2, 24
  07380	e1923003	 orrs        r3, r2, r3
  07384	0a000004	 beq         |$LN171@COM_IOCont|
  07388	e59f05f4	 ldr         r0, [pc, #0x5F4]
  0738c	eb000000	 bl          NKDbgPrintfW
  07390	e3a03001	 mov         r3, #1
  07394	e58d319c	 str         r3, [sp, #0x19C]
  07398	ea000001	 b           |$LN172@COM_IOCont|
  0739c		 |$LN171@COM_IOCont|
  0739c	e3a03000	 mov         r3, #0
  073a0	e58d319c	 str         r3, [sp, #0x19C]
  073a4		 |$LN172@COM_IOCont|

; 2852 :                 pHWIHead->DtrFlow = 0;

  073a4	e59d3020	 ldr         r3, [sp, #0x20]
  073a8	e2833094	 add         r3, r3, #0x94
  073ac	e5932000	 ldr         r2, [r3]
  073b0	e3e03010	 mvn         r3, #0x10
  073b4	e0022003	 and         r2, r2, r3
  073b8	e59d3020	 ldr         r3, [sp, #0x20]
  073bc	e2833094	 add         r3, r3, #0x94
  073c0	e5832000	 str         r2, [r3]

; 2853 :                 pFuncTbl->HWSetDTR(pHWHead);

  073c4	e59d0028	 ldr         r0, [sp, #0x28]
  073c8	e59d301c	 ldr         r3, [sp, #0x1C]
  073cc	e2833038	 add         r3, r3, #0x38
  073d0	e5933000	 ldr         r3, [r3]
  073d4	e1a0e00f	 mov         lr, pc
  073d8	e12fff13	 bx          r3
  073dc		 |$LN21@COM_IOCont|
  073dc		 |$LN25@COM_IOCont|

; 2854 :             }
; 2855 :         }
; 2856 : 
; 2857 :         // Now, free up any threads blocked in MDD. Reads and writes are in
; 2858 :         // loops, so they also need a flag to tell them to abort.
; 2859 :         if ( dwFlags & PURGE_RXABORT ) {

  073dc	e59d3024	 ldr         r3, [sp, #0x24]
  073e0	e3130002	 tst         r3, #2
  073e4	0a00000a	 beq         |$LN20@COM_IOCont|

; 2860 :             pHWIHead->fAbortRead = 1;

  073e8	e59d3020	 ldr         r3, [sp, #0x20]
  073ec	e2833094	 add         r3, r3, #0x94
  073f0	e5933000	 ldr         r3, [r3]
  073f4	e3832040	 orr         r2, r3, #0x40
  073f8	e59d3020	 ldr         r3, [sp, #0x20]
  073fc	e2833094	 add         r3, r3, #0x94
  07400	e5832000	 str         r2, [r3]

; 2861 :             PulseEvent(pHWIHead->hReadEvent);

  07404	e59d3020	 ldr         r3, [sp, #0x20]
  07408	e2833034	 add         r3, r3, #0x34
  0740c	e5930000	 ldr         r0, [r3]
  07410	eb000000	 bl          PulseEvent
  07414		 |$LN20@COM_IOCont|

; 2862 :         }
; 2863 :         if ( dwFlags & PURGE_TXABORT ) {

  07414	e59d3024	 ldr         r3, [sp, #0x24]
  07418	e3130001	 tst         r3, #1
  0741c	0a00000a	 beq         |$LN19@COM_IOCont|

; 2864 :             pHWIHead->fAbortTransmit      = 1;

  07420	e59d3020	 ldr         r3, [sp, #0x20]
  07424	e2833094	 add         r3, r3, #0x94
  07428	e5933000	 ldr         r3, [r3]
  0742c	e3832080	 orr         r2, r3, #0x80
  07430	e59d3020	 ldr         r3, [sp, #0x20]
  07434	e2833094	 add         r3, r3, #0x94
  07438	e5832000	 str         r2, [r3]

; 2865 :             // COM_Write() clears event upon entry, so we can use SetEvent
; 2866 :             SetEvent(pHWIHead->hTransmitEvent);

  0743c	e59d3020	 ldr         r3, [sp, #0x20]
  07440	e283303c	 add         r3, r3, #0x3C
  07444	e5930000	 ldr         r0, [r3]
  07448	eb000000	 bl          SetEvent
  0744c		 |$LN19@COM_IOCont|

; 2867 :         }
; 2868 : 
; 2869 :         break;

  0744c	ea000103	 b           |$LN76@COM_IOCont|
  07450		 |$LN18@COM_IOCont|

; 2870 : 
; 2871 :         // ****************************************************************
; 2872 :         //
; 2873 :         //      @func BOOL      | IOCTL_SERIAL_SET_QUEUE_SIZE |
; 2874 :         //                              Device IO control routine to set the queue sizes of of a
; 2875 :         //                              communications device
; 2876 :         //
; 2877 :         //      @parm DWORD | dwOpenData | value returned from COM_Open call
; 2878 :         //      @parm DWORD | dwCode | IOCTL_SERIAL_SET_QUEUE_SIZE
; 2879 :         //      @parm PBYTE | pBufIn | Pointer to a <f SERIAL_QUEUE_SIZES>
; 2880 :         //                              structure
; 2881 :         //      @parm DWORD | dwLenIn | should be sizeof(<f SERIAL_QUEUE_SIZES>)
; 2882 :         //      @parm PBYTE | pBufOut | Ignored
; 2883 :         //      @parm DWORD | dwLenOut | Ignored
; 2884 :         //      @parm PDWORD | pdwActualOut | Ignored
; 2885 :         //
; 2886 :         //      @rdesc          Returns TRUE for success, FALSE for failure (and
; 2887 :         //                              sets thread error code)
; 2888 :         //
; 2889 :         //
; 2890 :     case IOCTL_SERIAL_SET_QUEUE_SIZE :
; 2891 :         SetLastError(ERROR_NOT_SUPPORTED);

  07450	e3a00032	 mov         r0, #0x32
  07454	eb000000	 bl          SetLastError

; 2892 :         RetVal = FALSE;

  07458	e3a03000	 mov         r3, #0
  0745c	e58d3010	 str         r3, [sp, #0x10]

; 2893 :         // NOTE: Normally we would do something with the passed in parameter.
; 2894 :         // But we don't think the user has a better idea of queue sizes
; 2895 :         // compared to our infinite knowledge.
; 2896 : 
; 2897 :         break;

  07460	ea0000fe	 b           |$LN76@COM_IOCont|
  07464		 |$LN17@COM_IOCont|

; 2898 : 
; 2899 :         // ****************************************************************
; 2900 :         //
; 2901 :         //      @func BOOL      | IOCTL_SERIAL_IMMEDIATE_CHAR |
; 2902 :         //                              Device IO control routine to transmit a specified character
; 2903 :         //                              ahead of any pending data in the output buffer of the
; 2904 :         //                              communications device
; 2905 :         //
; 2906 :         //      @parm DWORD | dwOpenData | value returned from COM_Open call
; 2907 :         //      @parm DWORD | dwCode | IOCTL_SERIAL_IMMEDIATE_CHAR
; 2908 :         //      @parm PBYTE | pBufIn | Pointer to a UCHAR to send
; 2909 :         //      @parm DWORD | dwLenIn | should be sizeof(UCHAR)
; 2910 :         //      @parm PBYTE | pBufOut | Ignored
; 2911 :         //      @parm DWORD | dwLenOut | Ignored
; 2912 :         //      @parm PDWORD | pdwActualOut | Ignored
; 2913 :         //
; 2914 :         //      @rdesc          Returns TRUE for success, FALSE for failure (and
; 2915 :         //                              sets thread error code)
; 2916 :         //
; 2917 :         //
; 2918 :     case IOCTL_SERIAL_IMMEDIATE_CHAR :
; 2919 :         if ( (dwLenIn < sizeof(UCHAR)) || (NULL == pBufIn) ) {

  07464	e59d3204	 ldr         r3, [sp, #0x204]
  07468	e3530001	 cmp         r3, #1
  0746c	3a000002	 bcc         |$LN15@COM_IOCont|
  07470	e59d3200	 ldr         r3, [sp, #0x200]
  07474	e3530000	 cmp         r3, #0
  07478	1a00000f	 bne         |$LN16@COM_IOCont|
  0747c		 |$LN15@COM_IOCont|

; 2920 :             SetLastError (ERROR_INVALID_PARAMETER);

  0747c	e3a00057	 mov         r0, #0x57
  07480	eb000000	 bl          SetLastError

; 2921 :             RetVal = FALSE;

  07484	e3a03000	 mov         r3, #0
  07488	e58d3010	 str         r3, [sp, #0x10]

; 2922 :             DEBUGMSG (ZONE_IOCTL, (TEXT(" Invalid parameter\r\n")));

  0748c	e59f34c8	 ldr         r3, [pc, #0x4C8]
  07490	e5933440	 ldr         r3, [r3, #0x440]
  07494	e3130020	 tst         r3, #0x20
  07498	0a000004	 beq         |$LN173@COM_IOCont|
  0749c	e59f04d4	 ldr         r0, [pc, #0x4D4]
  074a0	eb000000	 bl          NKDbgPrintfW
  074a4	e3a03001	 mov         r3, #1
  074a8	e58d31a0	 str         r3, [sp, #0x1A0]
  074ac	ea000001	 b           |$LN174@COM_IOCont|
  074b0		 |$LN173@COM_IOCont|
  074b0	e3a03000	 mov         r3, #0
  074b4	e58d31a0	 str         r3, [sp, #0x1A0]
  074b8		 |$LN174@COM_IOCont|

; 2923 :             break;

  074b8	ea0000e8	 b           |$LN76@COM_IOCont|
  074bc		 |$LN16@COM_IOCont|

; 2924 :         }
; 2925 :         DEBUGMSG (ZONE_IOCTL, (TEXT(" IOCTL_SERIAL_IMMEDIATE_CHAR 0x%X\r\n"),
; 2926 :                                (UCHAR *)pBufIn));

  074bc	e59f3498	 ldr         r3, [pc, #0x498]
  074c0	e5933440	 ldr         r3, [r3, #0x440]
  074c4	e3130020	 tst         r3, #0x20
  074c8	0a000005	 beq         |$LN175@COM_IOCont|
  074cc	e59d1200	 ldr         r1, [sp, #0x200]
  074d0	e59f04a8	 ldr         r0, [pc, #0x4A8]
  074d4	eb000000	 bl          NKDbgPrintfW
  074d8	e3a03001	 mov         r3, #1
  074dc	e58d31a4	 str         r3, [sp, #0x1A4]
  074e0	ea000001	 b           |$LN176@COM_IOCont|
  074e4		 |$LN175@COM_IOCont|
  074e4	e3a03000	 mov         r3, #0
  074e8	e58d31a4	 str         r3, [sp, #0x1A4]
  074ec		 |$LN176@COM_IOCont|

; 2927 :         pFuncTbl->HWXmitComChar(pHWHead, *pBufIn);

  074ec	e59d3200	 ldr         r3, [sp, #0x200]
  074f0	e5d31000	 ldrb        r1, [r3]
  074f4	e59d0028	 ldr         r0, [sp, #0x28]
  074f8	e59d301c	 ldr         r3, [sp, #0x1C]
  074fc	e2833054	 add         r3, r3, #0x54
  07500	e5933000	 ldr         r3, [r3]
  07504	e1a0e00f	 mov         lr, pc
  07508	e12fff13	 bx          r3

; 2928 :         break;

  0750c	ea0000d3	 b           |$LN76@COM_IOCont|
  07510		 |$LN14@COM_IOCont|

; 2929 : 
; 2930 :         // ****************************************************************
; 2931 :         //
; 2932 :         //      @func BOOL      | IOCTL_SERIAL_GET_DCB |
; 2933 :         //                              Device IO control routine to get the device-control
; 2934 :         //                              block from a specified communications device
; 2935 :         //
; 2936 :         //      @parm DWORD | dwOpenData | value returned from COM_Open call
; 2937 :         //      @parm DWORD | dwCode | IOCTL_SERIAL_GET_DCB
; 2938 :         //      @parm PBYTE | pBufIn | Ignored
; 2939 :         //      @parm DWORD | dwLenIn | Ignored
; 2940 :         //      @parm PBYTE | pBufOut | Pointer to a <f DCB> structure
; 2941 :         //      @parm DWORD | dwLenOut | Should be sizeof(<f DCB>)
; 2942 :         //      @parm PDWORD | pdwActualOut | Pointer to DWORD to return length
; 2943 :         //                              of returned data (should be set to sizeof(<f DCB>) if
; 2944 :         //                              no error)
; 2945 :         //
; 2946 :         //      @rdesc          Returns TRUE for success, FALSE for failure (and
; 2947 :         //                              sets thread error code)
; 2948 :         //
; 2949 :         //
; 2950 :     case IOCTL_SERIAL_GET_DCB :
; 2951 :         DEBUGMSG (ZONE_IOCTL, (TEXT(" IOCTL_SERIAL_GET_DCB\r\n")));

  07510	e59f3444	 ldr         r3, [pc, #0x444]
  07514	e5933440	 ldr         r3, [r3, #0x440]
  07518	e3130020	 tst         r3, #0x20
  0751c	0a000004	 beq         |$LN177@COM_IOCont|
  07520	e59f0454	 ldr         r0, [pc, #0x454]
  07524	eb000000	 bl          NKDbgPrintfW
  07528	e3a03001	 mov         r3, #1
  0752c	e58d31a8	 str         r3, [sp, #0x1A8]
  07530	ea000001	 b           |$LN178@COM_IOCont|
  07534		 |$LN177@COM_IOCont|
  07534	e3a03000	 mov         r3, #0
  07538	e58d31a8	 str         r3, [sp, #0x1A8]
  0753c		 |$LN178@COM_IOCont|

; 2952 :         if ( (dwLenOut < sizeof(DCB)) || (NULL == pBufOut) ||
; 2953 :              (NULL == pdwActualOut) ) {

  0753c	e59d320c	 ldr         r3, [sp, #0x20C]
  07540	e353001c	 cmp         r3, #0x1C
  07544	3a000005	 bcc         |$LN12@COM_IOCont|
  07548	e59d3208	 ldr         r3, [sp, #0x208]
  0754c	e3530000	 cmp         r3, #0
  07550	0a000002	 beq         |$LN12@COM_IOCont|
  07554	e59d3210	 ldr         r3, [sp, #0x210]
  07558	e3530000	 cmp         r3, #0
  0755c	1a00000f	 bne         |$LN13@COM_IOCont|
  07560		 |$LN12@COM_IOCont|

; 2954 :             SetLastError (ERROR_INVALID_PARAMETER);

  07560	e3a00057	 mov         r0, #0x57
  07564	eb000000	 bl          SetLastError

; 2955 :             RetVal = FALSE;

  07568	e3a03000	 mov         r3, #0
  0756c	e58d3010	 str         r3, [sp, #0x10]

; 2956 :             DEBUGMSG (ZONE_IOCTL, (TEXT(" Invalid parameter\r\n")));

  07570	e59f33e4	 ldr         r3, [pc, #0x3E4]
  07574	e5933440	 ldr         r3, [r3, #0x440]
  07578	e3130020	 tst         r3, #0x20
  0757c	0a000004	 beq         |$LN179@COM_IOCont|
  07580	e59f03f0	 ldr         r0, [pc, #0x3F0]
  07584	eb000000	 bl          NKDbgPrintfW
  07588	e3a03001	 mov         r3, #1
  0758c	e58d31ac	 str         r3, [sp, #0x1AC]
  07590	ea000001	 b           |$LN180@COM_IOCont|
  07594		 |$LN179@COM_IOCont|
  07594	e3a03000	 mov         r3, #0
  07598	e58d31ac	 str         r3, [sp, #0x1AC]
  0759c		 |$LN180@COM_IOCont|

; 2957 :             break;

  0759c	ea0000af	 b           |$LN76@COM_IOCont|
  075a0		 |$LN13@COM_IOCont|

; 2958 :         }
; 2959 :         memcpy((char *)pBufOut, (char *)&(pHWIHead->DCB), sizeof(DCB));

  075a0	e3a0201c	 mov         r2, #0x1C
  075a4	e59d3020	 ldr         r3, [sp, #0x20]
  075a8	e2831060	 add         r1, r3, #0x60
  075ac	e59d0208	 ldr         r0, [sp, #0x208]
  075b0	eb000000	 bl          memcpy

; 2960 :         // Return the size
; 2961 :         *pdwActualOut = sizeof(DCB);

  075b4	e59d2210	 ldr         r2, [sp, #0x210]
  075b8	e3a0301c	 mov         r3, #0x1C
  075bc	e5823000	 str         r3, [r2]

; 2962 :         break;

  075c0	ea0000a6	 b           |$LN76@COM_IOCont|
  075c4		 |$LN11@COM_IOCont|

; 2963 : 
; 2964 :         // ****************************************************************
; 2965 :         //
; 2966 :         //      @func BOOL      | IOCTL_SERIAL_SET_DCB |
; 2967 :         //                              Device IO control routine to set the device-control
; 2968 :         //                              block on a specified communications device
; 2969 :         //
; 2970 :         //      @parm DWORD | dwOpenData | value returned from COM_Open call
; 2971 :         //      @parm DWORD | dwCode | IOCTL_SERIAL_SET_DCB
; 2972 :         //      @parm PBYTE | pBufIn | Pointer to a <f DCB> structure
; 2973 :         //      @parm DWORD | dwLenIn | should be sizeof(<f DCB>)
; 2974 :         //      @parm PBYTE | pBufOut | Ignored
; 2975 :         //      @parm DWORD | dwLenOut | Ignored
; 2976 :         //      @parm PDWORD | pdwActualOut | Ignored
; 2977 :         //
; 2978 :         //      @rdesc          Returns TRUE for success, FALSE for failure (and
; 2979 :         //                              sets thread error code)
; 2980 :         //
; 2981 :         //
; 2982 :     case IOCTL_SERIAL_SET_DCB :
; 2983 :         if ( (dwLenIn < sizeof(DCB)) || (NULL == pBufIn) ) {

  075c4	e59d3204	 ldr         r3, [sp, #0x204]
  075c8	e353001c	 cmp         r3, #0x1C
  075cc	3a000002	 bcc         |$LN9@COM_IOCont|
  075d0	e59d3200	 ldr         r3, [sp, #0x200]
  075d4	e3530000	 cmp         r3, #0
  075d8	1a000010	 bne         |$LN10@COM_IOCont|
  075dc		 |$LN9@COM_IOCont|

; 2984 :             SetLastError (ERROR_INVALID_PARAMETER);

  075dc	e3a00057	 mov         r0, #0x57
  075e0	eb000000	 bl          SetLastError

; 2985 :             RetVal = FALSE;

  075e4	e3a03000	 mov         r3, #0
  075e8	e58d3010	 str         r3, [sp, #0x10]

; 2986 :             DEBUGMSG (ZONE_IOCTL, (TEXT(" Invalid parameter\r\n")));

  075ec	e59f3368	 ldr         r3, [pc, #0x368]
  075f0	e5933440	 ldr         r3, [r3, #0x440]
  075f4	e3130020	 tst         r3, #0x20
  075f8	0a000004	 beq         |$LN181@COM_IOCont|
  075fc	e59f0374	 ldr         r0, [pc, #0x374]
  07600	eb000000	 bl          NKDbgPrintfW
  07604	e3a03001	 mov         r3, #1
  07608	e58d31b0	 str         r3, [sp, #0x1B0]
  0760c	ea000001	 b           |$LN182@COM_IOCont|
  07610		 |$LN181@COM_IOCont|
  07610	e3a03000	 mov         r3, #0
  07614	e58d31b0	 str         r3, [sp, #0x1B0]
  07618		 |$LN182@COM_IOCont|

; 2987 :             break;

  07618	ea000090	 b           |$LN76@COM_IOCont|

; 2988 :         }
; 2989 :         else {

  0761c	ea000026	 b           |$LN8@COM_IOCont|
  07620		 |$LN10@COM_IOCont|

; 2990 :             DCB localDCB;
; 2991 :             DEBUGMSG (ZONE_IOCTL, (TEXT(" IOCTL_SERIAL_SET_DCB\r\n")));

  07620	e59f3334	 ldr         r3, [pc, #0x334]
  07624	e5933440	 ldr         r3, [r3, #0x440]
  07628	e3130020	 tst         r3, #0x20
  0762c	0a000004	 beq         |$LN183@COM_IOCont|
  07630	e59f033c	 ldr         r0, [pc, #0x33C]
  07634	eb000000	 bl          NKDbgPrintfW
  07638	e3a03001	 mov         r3, #1
  0763c	e58d31b4	 str         r3, [sp, #0x1B4]
  07640	ea000001	 b           |$LN184@COM_IOCont|
  07644		 |$LN183@COM_IOCont|
  07644	e3a03000	 mov         r3, #0
  07648	e58d31b4	 str         r3, [sp, #0x1B4]
  0764c		 |$LN184@COM_IOCont|

; 2992 :             localDCB = *((DCB *)pBufIn);

  0764c	e59d1200	 ldr         r1, [sp, #0x200]
  07650	e28d0094	 add         r0, sp, #0x94
  07654	e3a0201c	 mov         r2, #0x1C
  07658	eb000000	 bl          memcpy

; 2993 :             if ( !ApplyDCB (pHWIHead, &localDCB, TRUE) ) {

  0765c	e3a02001	 mov         r2, #1
  07660	e28d1094	 add         r1, sp, #0x94
  07664	e59d0020	 ldr         r0, [sp, #0x20]
  07668	eb000000	 bl          ApplyDCB
  0766c	e58d01b8	 str         r0, [sp, #0x1B8]
  07670	e59d31b8	 ldr         r3, [sp, #0x1B8]
  07674	e3530000	 cmp         r3, #0
  07678	1a00000f	 bne         |$LN7@COM_IOCont|

; 2994 :                 //
; 2995 :                 // Most likely an unsupported baud rate was specified
; 2996 :                 //
; 2997 :                 SetLastError (ERROR_INVALID_PARAMETER);

  0767c	e3a00057	 mov         r0, #0x57
  07680	eb000000	 bl          SetLastError

; 2998 :                 RetVal = FALSE;

  07684	e3a03000	 mov         r3, #0
  07688	e58d3010	 str         r3, [sp, #0x10]

; 2999 :                 DEBUGMSG (ZONE_IOCTL, (TEXT(" ApplyDCB failed\r\n")));

  0768c	e59f32c8	 ldr         r3, [pc, #0x2C8]
  07690	e5933440	 ldr         r3, [r3, #0x440]
  07694	e3130020	 tst         r3, #0x20
  07698	0a000004	 beq         |$LN185@COM_IOCont|
  0769c	e59f02cc	 ldr         r0, [pc, #0x2CC]
  076a0	eb000000	 bl          NKDbgPrintfW
  076a4	e3a03001	 mov         r3, #1
  076a8	e58d31bc	 str         r3, [sp, #0x1BC]
  076ac	ea000001	 b           |$LN186@COM_IOCont|
  076b0		 |$LN185@COM_IOCont|
  076b0	e3a03000	 mov         r3, #0
  076b4	e58d31bc	 str         r3, [sp, #0x1BC]
  076b8		 |$LN186@COM_IOCont|

; 3000 :                 break;

  076b8	ea000068	 b           |$LN76@COM_IOCont|
  076bc		 |$LN7@COM_IOCont|
  076bc		 |$LN8@COM_IOCont|

; 3001 :             }
; 3002 :         }
; 3003 :         break;

  076bc	ea000067	 b           |$LN76@COM_IOCont|
  076c0		 |$LN6@COM_IOCont|

; 3004 : 
; 3005 :         // ****************************************************************
; 3006 :         //
; 3007 :         //      @func BOOL      | IOCTL_SERIAL_ENABLE_IR |
; 3008 :         //                              Device IO control routine to set the device-control
; 3009 :         //                              block on a specified communications device
; 3010 :         //
; 3011 :         //      @parm DWORD | dwOpenData | value returned from COM_Open call
; 3012 :         //      @parm DWORD | dwCode | IOCTL_SERIAL_ENABLE_IR
; 3013 :         //      @parm PBYTE | pBufIn | Ignored
; 3014 :         //      @parm DWORD | dwLenIn | Ignored
; 3015 :         //      @parm PBYTE | pBufOut | Ignored
; 3016 :         //      @parm DWORD | dwLenOut | Ignored
; 3017 :         //      @parm PDWORD | pdwActualOut | Ignored
; 3018 :         //
; 3019 :         //      @rdesc          Returns TRUE for success, FALSE for failure (and
; 3020 :         //                              sets thread error code)
; 3021 :         //
; 3022 :         //
; 3023 :     case IOCTL_SERIAL_ENABLE_IR :
; 3024 :         DEBUGMSG (ZONE_IR,
; 3025 :                   (TEXT("IOCTL Enable IR\r\n")));

  076c0	e59f3294	 ldr         r3, [pc, #0x294]
  076c4	e5933440	 ldr         r3, [r3, #0x440]
  076c8	e3130b01	 tst         r3, #1, 22
  076cc	0a000004	 beq         |$LN187@COM_IOCont|
  076d0	e59f0294	 ldr         r0, [pc, #0x294]
  076d4	eb000000	 bl          NKDbgPrintfW
  076d8	e3a03001	 mov         r3, #1
  076dc	e58d31c0	 str         r3, [sp, #0x1C0]
  076e0	ea000001	 b           |$LN188@COM_IOCont|
  076e4		 |$LN187@COM_IOCont|
  076e4	e3a03000	 mov         r3, #0
  076e8	e58d31c0	 str         r3, [sp, #0x1C0]
  076ec		 |$LN188@COM_IOCont|

; 3026 :         if ( !pFuncTbl->HWEnableIR(pHWHead, pHWIHead->DCB.BaudRate) ) {

  076ec	e59d3020	 ldr         r3, [sp, #0x20]
  076f0	e2833064	 add         r3, r3, #0x64
  076f4	e5931000	 ldr         r1, [r3]
  076f8	e59d0028	 ldr         r0, [sp, #0x28]
  076fc	e59d301c	 ldr         r3, [sp, #0x1C]
  07700	e2833044	 add         r3, r3, #0x44
  07704	e5933000	 ldr         r3, [r3]
  07708	e1a0e00f	 mov         lr, pc
  0770c	e12fff13	 bx          r3
  07710	e58d01c4	 str         r0, [sp, #0x1C4]
  07714	e59d31c4	 ldr         r3, [sp, #0x1C4]
  07718	e3530000	 cmp         r3, #0
  0771c	1a000014	 bne         |$LN5@COM_IOCont|

; 3027 :             RetVal = FALSE;

  07720	e3a03000	 mov         r3, #0
  07724	e58d3010	 str         r3, [sp, #0x10]

; 3028 : 
; 3029 :             DEBUGMSG (ZONE_IOCTL|ZONE_ERROR|ZONE_IR,
; 3030 :                       (TEXT("IR mode failed\r\n")));

  07728	e59f322c	 ldr         r3, [pc, #0x22C]
  0772c	e5933440	 ldr         r3, [r3, #0x440]
  07730	e2032020	 and         r2, r3, #0x20
  07734	e59f3220	 ldr         r3, [pc, #0x220]
  07738	e5933440	 ldr         r3, [r3, #0x440]
  0773c	e2033902	 and         r3, r3, #2, 18
  07740	e1822003	 orr         r2, r2, r3
  07744	e59f3210	 ldr         r3, [pc, #0x210]
  07748	e5933440	 ldr         r3, [r3, #0x440]
  0774c	e2033b01	 and         r3, r3, #1, 22
  07750	e1923003	 orrs        r3, r2, r3
  07754	0a000004	 beq         |$LN189@COM_IOCont|
  07758	e59f0208	 ldr         r0, [pc, #0x208]
  0775c	eb000000	 bl          NKDbgPrintfW
  07760	e3a03001	 mov         r3, #1
  07764	e58d31c8	 str         r3, [sp, #0x1C8]
  07768	ea000001	 b           |$LN190@COM_IOCont|
  0776c		 |$LN189@COM_IOCont|
  0776c	e3a03000	 mov         r3, #0
  07770	e58d31c8	 str         r3, [sp, #0x1C8]
  07774		 |$LN190@COM_IOCont|
  07774		 |$LN5@COM_IOCont|

; 3031 :         }
; 3032 : 
; 3033 :         break;

  07774	ea000039	 b           |$LN76@COM_IOCont|
  07778		 |$LN4@COM_IOCont|

; 3034 : 
; 3035 :         // ****************************************************************
; 3036 :         //
; 3037 :         //      @func BOOL      | IOCTL_SERIAL_DISABLE_IR |
; 3038 :         //                              Device IO control routine to set the device-control
; 3039 :         //                              block on a specified communications device
; 3040 :         //
; 3041 :         //      @parm DWORD | dwOpenData | value returned from COM_Open call
; 3042 :         //      @parm DWORD | dwCode | IOCTL_SERIAL_DISABLE_IR
; 3043 :         //      @parm PBYTE | pBufIn | Ignored
; 3044 :         //      @parm DWORD | dwLenIn | Ignored
; 3045 :         //      @parm PBYTE | pBufOut | Ignored
; 3046 :         //      @parm DWORD | dwLenOut | Ignored
; 3047 :         //      @parm PDWORD | pdwActualOut | Ignored
; 3048 :         //
; 3049 :         //      @rdesc          Returns TRUE for success, FALSE for failure (and
; 3050 :         //                              sets thread error code)
; 3051 :         //
; 3052 :         //
; 3053 :     case IOCTL_SERIAL_DISABLE_IR :
; 3054 :         DEBUGMSG (ZONE_IR,
; 3055 :                   (TEXT("IOCTL Disable IR\r\n")));

  07778	e59f31dc	 ldr         r3, [pc, #0x1DC]
  0777c	e5933440	 ldr         r3, [r3, #0x440]
  07780	e3130b01	 tst         r3, #1, 22
  07784	0a000004	 beq         |$LN191@COM_IOCont|
  07788	e59f01d4	 ldr         r0, [pc, #0x1D4]
  0778c	eb000000	 bl          NKDbgPrintfW
  07790	e3a03001	 mov         r3, #1
  07794	e58d31cc	 str         r3, [sp, #0x1CC]
  07798	ea000001	 b           |$LN192@COM_IOCont|
  0779c		 |$LN191@COM_IOCont|
  0779c	e3a03000	 mov         r3, #0
  077a0	e58d31cc	 str         r3, [sp, #0x1CC]
  077a4		 |$LN192@COM_IOCont|

; 3056 :         pFuncTbl->HWDisableIR(pHWHead);

  077a4	e59d0028	 ldr         r0, [sp, #0x28]
  077a8	e59d301c	 ldr         r3, [sp, #0x1C]
  077ac	e2833048	 add         r3, r3, #0x48
  077b0	e5933000	 ldr         r3, [r3]
  077b4	e1a0e00f	 mov         lr, pc
  077b8	e12fff13	 bx          r3

; 3057 :         break;

  077bc	ea000027	 b           |$LN76@COM_IOCont|
  077c0		 |$LN3@COM_IOCont|

; 3058 :     default :
; 3059 :         // Pass IOCTL through to PDD if hook is provided
; 3060 :         if ( (pFuncTbl->HWIoctl == NULL) ||
; 3061 :              (pFuncTbl->HWIoctl(pHWHead,dwCode,pBufIn,dwLenIn,pBufOut,dwLenOut,
; 3062 :                                 pdwActualOut) == FALSE) ) {

  077c0	e59d301c	 ldr         r3, [sp, #0x1C]
  077c4	e2833074	 add         r3, r3, #0x74
  077c8	e5933000	 ldr         r3, [r3]
  077cc	e3530000	 cmp         r3, #0
  077d0	0a000012	 beq         |$LN1@COM_IOCont|
  077d4	e59d3210	 ldr         r3, [sp, #0x210]
  077d8	e58d3008	 str         r3, [sp, #8]
  077dc	e59d320c	 ldr         r3, [sp, #0x20C]
  077e0	e58d3004	 str         r3, [sp, #4]
  077e4	e59d3208	 ldr         r3, [sp, #0x208]
  077e8	e58d3000	 str         r3, [sp]
  077ec	e59d3204	 ldr         r3, [sp, #0x204]
  077f0	e59d2200	 ldr         r2, [sp, #0x200]
  077f4	e59d11fc	 ldr         r1, [sp, #0x1FC]
  077f8	e59d0028	 ldr         r0, [sp, #0x28]
  077fc	e59de01c	 ldr         lr, [sp, #0x1C]
  07800	e28ee074	 add         lr, lr, #0x74
  07804	e59e4000	 ldr         r4, [lr]
  07808	e1a0e00f	 mov         lr, pc
  0780c	e12fff14	 bx          r4
  07810	e58d01d0	 str         r0, [sp, #0x1D0]
  07814	e59d31d0	 ldr         r3, [sp, #0x1D0]
  07818	e3530000	 cmp         r3, #0
  0781c	1a00000f	 bne         |$LN2@COM_IOCont|
  07820		 |$LN1@COM_IOCont|

; 3063 :             SetLastError (ERROR_INVALID_PARAMETER);

  07820	e3a00057	 mov         r0, #0x57
  07824	eb000000	 bl          SetLastError

; 3064 :             RetVal = FALSE;

  07828	e3a03000	 mov         r3, #0
  0782c	e58d3010	 str         r3, [sp, #0x10]

; 3065 :             DEBUGMSG (ZONE_IOCTL, (TEXT(" Invalid ioctl 0x%X\r\n"), dwCode));

  07830	e59f3124	 ldr         r3, [pc, #0x124]
  07834	e5933440	 ldr         r3, [r3, #0x440]
  07838	e3130020	 tst         r3, #0x20
  0783c	0a000005	 beq         |$LN193@COM_IOCont|
  07840	e59d11fc	 ldr         r1, [sp, #0x1FC]
  07844	e59f0114	 ldr         r0, [pc, #0x114]
  07848	eb000000	 bl          NKDbgPrintfW
  0784c	e3a03001	 mov         r3, #1
  07850	e58d31d4	 str         r3, [sp, #0x1D4]
  07854	ea000001	 b           |$LN194@COM_IOCont|
  07858		 |$LN193@COM_IOCont|
  07858	e3a03000	 mov         r3, #0
  0785c	e58d31d4	 str         r3, [sp, #0x1D4]
  07860		 |$LN194@COM_IOCont|
  07860		 |$LN2@COM_IOCont|
  07860		 |$LN76@COM_IOCont|

; 3066 :         }
; 3067 :         break;
; 3068 :     }
; 3069 : 
; 3070 :     COM_DEC_USAGE_CNT(pOpenHead);

  07860	e59d31f8	 ldr         r3, [sp, #0x1F8]
  07864	e283000c	 add         r0, r3, #0xC
  07868	eb000000	 bl          InterlockedDecrement

; 3071 : 
; 3072 :     DEBUGMSG (ZONE_IOCTL|ZONE_FUNCTION|(RetVal == FALSE?ZONE_ERROR:0),
; 3073 :               (TEXT("-COM_IOControl %s Ecode=%d (len=%d)\r\n"),
; 3074 :                (RetVal == TRUE) ? TEXT("Success") : TEXT("Error"),
; 3075 :                GetLastError(), (NULL == pdwActualOut) ? 0 : *pdwActualOut));

  0786c	e59d3010	 ldr         r3, [sp, #0x10]
  07870	e3530000	 cmp         r3, #0
  07874	1a000004	 bne         |$LN195@COM_IOCont|
  07878	e59f30dc	 ldr         r3, [pc, #0xDC]
  0787c	e5933440	 ldr         r3, [r3, #0x440]
  07880	e2033902	 and         r3, r3, #2, 18
  07884	e58d31d8	 str         r3, [sp, #0x1D8]
  07888	ea000001	 b           |$LN196@COM_IOCont|
  0788c		 |$LN195@COM_IOCont|
  0788c	e3a03000	 mov         r3, #0
  07890	e58d31d8	 str         r3, [sp, #0x1D8]
  07894		 |$LN196@COM_IOCont|
  07894	e59f30c0	 ldr         r3, [pc, #0xC0]
  07898	e5933440	 ldr         r3, [r3, #0x440]
  0789c	e2032020	 and         r2, r3, #0x20
  078a0	e59f30b4	 ldr         r3, [pc, #0xB4]
  078a4	e5933440	 ldr         r3, [r3, #0x440]
  078a8	e2033a02	 and         r3, r3, #2, 20
  078ac	e1822003	 orr         r2, r2, r3
  078b0	e59d31d8	 ldr         r3, [sp, #0x1D8]
  078b4	e1923003	 orrs        r3, r2, r3
  078b8	0a00001a	 beq         |$LN201@COM_IOCont|
  078bc	e59d3210	 ldr         r3, [sp, #0x210]
  078c0	e3530000	 cmp         r3, #0
  078c4	1a000002	 bne         |$LN197@COM_IOCont|
  078c8	e3a03000	 mov         r3, #0
  078cc	e58d31dc	 str         r3, [sp, #0x1DC]
  078d0	ea000002	 b           |$LN198@COM_IOCont|
  078d4		 |$LN197@COM_IOCont|
  078d4	e59d3210	 ldr         r3, [sp, #0x210]
  078d8	e5933000	 ldr         r3, [r3]
  078dc	e58d31dc	 str         r3, [sp, #0x1DC]
  078e0		 |$LN198@COM_IOCont|
  078e0	eb000000	 bl          GetLastError
  078e4	e58d01e0	 str         r0, [sp, #0x1E0]
  078e8	e59d3010	 ldr         r3, [sp, #0x10]
  078ec	e3530001	 cmp         r3, #1
  078f0	1a000002	 bne         |$LN199@COM_IOCont|
  078f4	e59f305c	 ldr         r3, [pc, #0x5C]
  078f8	e58d31e4	 str         r3, [sp, #0x1E4]
  078fc	ea000001	 b           |$LN200@COM_IOCont|
  07900		 |$LN199@COM_IOCont|
  07900	e59f304c	 ldr         r3, [pc, #0x4C]
  07904	e58d31e4	 str         r3, [sp, #0x1E4]
  07908		 |$LN200@COM_IOCont|
  07908	e59d31dc	 ldr         r3, [sp, #0x1DC]
  0790c	e59d21e0	 ldr         r2, [sp, #0x1E0]
  07910	e59d11e4	 ldr         r1, [sp, #0x1E4]
  07914	e59f0034	 ldr         r0, [pc, #0x34]
  07918	eb000000	 bl          NKDbgPrintfW
  0791c	e3a03001	 mov         r3, #1
  07920	e58d31e8	 str         r3, [sp, #0x1E8]
  07924	ea000001	 b           |$LN202@COM_IOCont|
  07928		 |$LN201@COM_IOCont|
  07928	e3a03000	 mov         r3, #0
  0792c	e58d31e8	 str         r3, [sp, #0x1E8]
  07930		 |$LN202@COM_IOCont|

; 3076 : 
; 3077 :     return(RetVal);

  07930	e59d00b0	 ldr         r0, [sp, #0xB0]
  07934	eb000000	 bl          __security_check_cookie
  07938	e59d3010	 ldr         r3, [sp, #0x10]
  0793c	e58d30b4	 str         r3, [sp, #0xB4]
  07940		 |$LN94@COM_IOCont|

; 3078 : }

  07940	e59d00b4	 ldr         r0, [sp, #0xB4]
  07944	e28ddf7b	 add         sp, sp, #0x7B, 30
  07948	e89d6010	 ldmia       sp, {r4, sp, lr}
  0794c	e12fff1e	 bx          lr
  07950		 |$LN297@COM_IOCont|
  07950		 |$LN298@COM_IOCont|
  07950	00000000	 DCD         |??_C@_1EM@GAPNEPLB@?$AA?9?$AAC?$AAO?$AAM?$AA_?$AAI?$AAO?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?5?$AA?$CF?$AAs?$AA?5?$AAE?$AAc?$AAo?$AAd?$AAe?$AA?$DN?$AA?$CF?$AAd?$AA?5?$AA?$CI?$AAl?$AAe?$AAn?$AA?$DN@|
  07954		 |$LN299@COM_IOCont|
  07954	00000000	 DCD         |??_C@_1M@ILHOPKA@?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?$AA@|
  07958		 |$LN300@COM_IOCont|
  07958	00000000	 DCD         |??_C@_1BA@JFDCMKFN@?$AAS?$AAu?$AAc?$AAc?$AAe?$AAs?$AAs?$AA?$AA@|
  0795c		 |$LN301@COM_IOCont|
  0795c	00000000	 DCD         |dpCurSettings|
  07960		 |$LN302@COM_IOCont|
  07960	00000000	 DCD         |??_C@_1CM@ENDIALIE@?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAo?$AAc?$AAt?$AAl?$AA?5?$AA0?$AAx?$AA?$CF?$AAX?$AA?$AN?$AA?6?$AA?$AA@|
  07964		 |$LN303@COM_IOCont|
  07964	00000000	 DCD         |??_C@_1CG@MLMOPDDN@?$AAI?$AAO?$AAC?$AAT?$AAL?$AA?5?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAI?$AAR?$AA?$AN?$AA?6?$AA?$AA@|
  07968		 |$LN304@COM_IOCont|
  07968	00000000	 DCD         |??_C@_1CC@LGNHCIBI@?$AAI?$AAR?$AA?5?$AAm?$AAo?$AAd?$AAe?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  0796c		 |$LN305@COM_IOCont|
  0796c	00000000	 DCD         |??_C@_1CE@NOAPAGNI@?$AAI?$AAO?$AAC?$AAT?$AAL?$AA?5?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAI?$AAR?$AA?$AN?$AA?6?$AA?$AA@|
  07970		 |$LN306@COM_IOCont|
  07970	00000000	 DCD         |??_C@_1CG@IAPBOCP@?$AA?5?$AAA?$AAp?$AAp?$AAl?$AAy?$AAD?$AAC?$AAB?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  07974		 |$LN307@COM_IOCont|
  07974	00000000	 DCD         |??_C@_1DA@GPICLALP@?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAS?$AAE?$AAR?$AAI?$AAA?$AAL?$AA_?$AAS?$AAE?$AAT?$AA_?$AAD?$AAC?$AAB?$AA?$AN?$AA?6?$AA?$AA@|
  07978		 |$LN308@COM_IOCont|
  07978	00000000	 DCD         |??_C@_1CK@EJMDEGNB@?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAp?$AAa?$AAr?$AAa?$AAm?$AAe?$AAt?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@|
  0797c		 |$LN309@COM_IOCont|
  0797c	00000000	 DCD         |??_C@_1DA@MBKJPAMD@?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAS?$AAE?$AAR?$AAI?$AAA?$AAL?$AA_?$AAG?$AAE?$AAT?$AA_?$AAD?$AAC?$AAB?$AA?$AN?$AA?6?$AA?$AA@|
  07980		 |$LN310@COM_IOCont|
  07980	00000000	 DCD         |??_C@_1EI@KIHCPENE@?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAS?$AAE?$AAR?$AAI?$AAA?$AAL?$AA_?$AAI?$AAM?$AAM?$AAE?$AAD?$AAI?$AAA?$AAT?$AAE?$AA_?$AAC?$AAH?$AAA?$AAR?$AA?5?$AA0?$AAx?$AA?$CF@|
  07984		 |$LN311@COM_IOCont|
  07984	00000000	 DCD         |??_C@_1EI@NJBLBAI@?$AAD?$AAT?$AAR?$AA_?$AAC?$AAO?$AAN?$AAT?$AAR?$AAO?$AAL?$AA_?$AAH?$AAA?$AAN?$AAD?$AAS?$AAH?$AAA?$AAK?$AAE?$AA?5?$AAS?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAD?$AAT@|
  07988		 |$LN312@COM_IOCont|
  07988	00000000	 DCD         |??_C@_1EI@PFOBJKJM@?$AAR?$AAT?$AAS?$AA_?$AAC?$AAO?$AAN?$AAT?$AAR?$AAO?$AAL?$AA_?$AAH?$AAA?$AAN?$AAD?$AAS?$AAH?$AAA?$AAK?$AAE?$AA?5?$AAS?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAR?$AAT@|
  0798c		 |$LN313@COM_IOCont|
  0798c	00000000	 DCD         |??_C@_1BM@LDMNCPPP@?$AAS?$AAe?$AAn?$AAd?$AAi?$AAn?$AAg?$AA?5?$AAX?$AAO?$AAN?$AA?$AN?$AA?6?$AA?$AA@|
  07990		 |$LN314@COM_IOCont|
  07990	00000000	 DCD         |??_C@_1FE@LCKDINPA@?$AA?5?$AAF?$AAl?$AAu?$AAs?$AAh?$AAi?$AAn?$AAg?$AA?5?$AA?$CF?$AAd?$AA?5?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?5?$AAf?$AAr?$AAo?$AAm?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAr?$AAe?$AAa?$AAd@|
  07994		 |$LN315@COM_IOCont|
  07994	00000000	 DCD         |??_C@_1DG@NONFKDMH@?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAS?$AAE?$AAR?$AAI?$AAA?$AAL?$AA_?$AAP?$AAU?$AAR?$AAG?$AAE?$AA?5?$AA0?$AAx?$AA?$CF?$AAX?$AA?$AN?$AA?6?$AA?$AA@|
  07998		 |$LN316@COM_IOCont|
  07998	00000000	 DCD         |??_C@_1DK@FGFBKMCP@?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAS?$AAE?$AAR?$AAI?$AAA?$AAL?$AA_?$AAG?$AAE?$AAT?$AA_?$AAT?$AAI?$AAM?$AAE?$AAO?$AAU?$AAT?$AAS?$AA?$AN?$AA?6?$AA?$AA@|
  0799c		 |$LN317@COM_IOCont|
  0799c	00000000	 DCD         |??_C@_1GE@COCIEMAI@?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAS?$AAE?$AAR?$AAI?$AAA?$AAL?$AA_?$AAS?$AAE?$AAT?$AA_?$AAC?$AAO?$AAM?$AAM?$AAT?$AAI?$AAM?$AAE?$AAO?$AAU?$AAT?$AAS?$AA?5?$AA?$CI@|
  079a0		 |$LN318@COM_IOCont|
  079a0	00000000	 DCD         |??_C@_1DO@COBPCJBD@?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAS?$AAE?$AAR?$AAI?$AAA?$AAL?$AA_?$AAG?$AAE?$AAT?$AA_?$AAP?$AAR?$AAO?$AAP?$AAE?$AAR?$AAT?$AAI?$AAE?$AAS?$AA?$AN?$AA?6?$AA?$AA@|
  079a4		 |$LN319@COM_IOCont|
  079a4	00000000	 DCD         |??_C@_1EA@IBDHDHLD@?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAS?$AAE?$AAR?$AAI?$AAA?$AAL?$AA_?$AAG?$AAE?$AAT?$AA_?$AAM?$AAO?$AAD?$AAE?$AAM?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA?$AN?$AA?6?$AA?$AA@|
  079a8		 |$LN320@COM_IOCont|
  079a8	00000000	 DCD         |??_C@_1DO@GPNOPFOC@?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAS?$AAE?$AAR?$AAI?$AAA?$AAL?$AA_?$AAG?$AAE?$AAT?$AA_?$AAC?$AAO?$AAM?$AAM?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA?$AN?$AA?6?$AA?$AA@|
  079ac		 |$LN321@COM_IOCont|
  079ac	00000000	 DCD         |??_C@_1FE@DCNACOPO@?$AA?5?$AAC?$AAO?$AAM?$AA_?$AAI?$AAO?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?5?$AA?9?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAi?$AAn?$AA?5?$AAW?$AAa?$AAi?$AAt?$AAC?$AAo@|
  079b0		 |$LN322@COM_IOCont|
  079b0	00000000	 DCD         |??_C@_1DK@MHHDNLMO@?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAS?$AAE?$AAR?$AAI?$AAA?$AAL?$AA_?$AAW?$AAA?$AAI?$AAT?$AA_?$AAO?$AAN?$AA_?$AAM?$AAA?$AAS?$AAK?$AA?$AN?$AA?6?$AA?$AA@|
  079b4		 |$LN323@COM_IOCont|
  079b4	00000000	 DCD         |??_C@_1FG@BOKINKK@?$AA?5?$AAS?$AAe?$AAt?$AAW?$AAa?$AAi?$AAt?$AAM?$AAa?$AAs?$AAk?$AA?5?$AA?9?$AA?5?$AAm?$AAa?$AAs?$AAk?$AA?5?$AAx?$AA?$CF?$AAX?$AA?0?$AA?5?$AAg?$AAl?$AAo?$AAb?$AAa?$AAl?$AA?5@|
  079b8		 |$M42272|

			 ENDP  ; |COM_IOControl|

; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T42333| DCD	|$LN5@PulseEvent|
	DCD	0x40000e04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PulseEvent| PROC

; 211  : _inline BOOL PulseEvent(HANDLE h) {

  00000		 |$LN5@PulseEvent|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd008	 sub         sp, sp, #8
  00010		 |$M42330|

; 212  : 	return EventModify(h,EVENT_PULSE);

  00010	e3a01001	 mov         r1, #1
  00014	e59d0010	 ldr         r0, [sp, #0x10]
  00018	eb000000	 bl          EventModify
  0001c	e58d0004	 str         r0, [sp, #4]
  00020	e59d3004	 ldr         r3, [sp, #4]
  00024	e58d3000	 str         r3, [sp]

; 213  : }

  00028	e59d0000	 ldr         r0, [sp]
  0002c	e28dd008	 add         sp, sp, #8
  00030	e89d6000	 ldmia       sp, {sp, lr}
  00034	e12fff1e	 bx          lr
  00038		 |$M42331|

			 ENDP  ; |PulseEvent|

	END
