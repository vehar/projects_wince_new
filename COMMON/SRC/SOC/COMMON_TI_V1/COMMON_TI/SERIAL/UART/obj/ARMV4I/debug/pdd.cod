; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\SERIAL\UART\pdd.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|??_C@_1BK@ECILAKDK@?$AAR?$AAt?$AAs?$AAC?$AAt?$AAs?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CG@DHJJPDED@?$AAR?$AAx?$AAF?$AAi?$AAf?$AAo?$AAT?$AAr?$AAi?$AAg?$AAg?$AAe?$AAr?$AAL?$AAe?$AAv?$AAe?$AAl?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CC@FIFIMOFA@?$AAX?$AAc?$AAv?$AAr?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAd?$AAL?$AAe?$AAv?$AAe?$AAl?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BO@NNHFJINL@?$AAX?$AAc?$AAv?$AAr?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAG?$AAp?$AAi?$AAo?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CA@JOFPGGEL@?$AAR?$AAx?$AAD?$AAm?$AAa?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AAS?$AAi?$AAz?$AAe?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BK@EAHGCAAM@?$AAR?$AAx?$AAD?$AAm?$AAa?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BM@EBCLBMAF@?$AAT?$AAX?$AAP?$AAa?$AAu?$AAs?$AAe?$AAT?$AAi?$AAm?$AAe?$AAM?$AAs?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CA@NHBAHBHE@?$AAT?$AAx?$AAD?$AAm?$AAa?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AAS?$AAi?$AAz?$AAe?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BK@HPKIPNLN@?$AAT?$AAx?$AAD?$AAm?$AAa?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BE@CEKAHLDM@?$AAH?$AAW?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BC@OKCHLFFC@?$AAR?$AAx?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BC@HNMEBGCB@?$AAW?$AAa?$AAk?$AAe?$AAC?$AAh?$AAa?$AAr?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BE@GPCELNGD@?$AAF?$AAr?$AAe?$AAq?$AAu?$AAe?$AAn?$AAc?$AAy?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1O@OJFFKIAG@?$AAH?$AAW?$AAM?$AAo?$AAd?$AAe?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CC@KMPFMANC@?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?$AA@| [ DATA ] ; `string'

  00000			 AREA	 |.bss|, NOINIT
|GlobalSerialHeadNumber| % 0x4

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BK@ECILAKDK@?$AAR?$AAt?$AAs?$AAC?$AAt?$AAs?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?$AA@| DCB "R"
	DCB	0x0, "t", 0x0, "s", 0x0, "C", 0x0, "t", 0x0, "s", 0x0, "E"
	DCB	0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CG@DHJJPDED@?$AAR?$AAx?$AAF?$AAi?$AAf?$AAo?$AAT?$AAr?$AAi?$AAg?$AAg?$AAe?$AAr?$AAL?$AAe?$AAv?$AAe?$AAl?$AA?$AA@| DCB "R"
	DCB	0x0, "x", 0x0, "F", 0x0, "i", 0x0, "f", 0x0, "o", 0x0, "T"
	DCB	0x0, "r", 0x0, "i", 0x0, "g", 0x0, "g", 0x0, "e", 0x0, "r"
	DCB	0x0, "L", 0x0, "e", 0x0, "v", 0x0, "e", 0x0, "l", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CC@FIFIMOFA@?$AAX?$AAc?$AAv?$AAr?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAd?$AAL?$AAe?$AAv?$AAe?$AAl?$AA?$AA@| DCB "X"
	DCB	0x0, "c", 0x0, "v", 0x0, "r", 0x0, "E", 0x0, "n", 0x0, "a"
	DCB	0x0, "b", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, "L", 0x0, "e"
	DCB	0x0, "v", 0x0, "e", 0x0, "l", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@NNHFJINL@?$AAX?$AAc?$AAv?$AAr?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAG?$AAp?$AAi?$AAo?$AA?$AA@| DCB "X"
	DCB	0x0, "c", 0x0, "v", 0x0, "r", 0x0, "E", 0x0, "n", 0x0, "a"
	DCB	0x0, "b", 0x0, "l", 0x0, "e", 0x0, "G", 0x0, "p", 0x0, "i"
	DCB	0x0, "o", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CA@JOFPGGEL@?$AAR?$AAx?$AAD?$AAm?$AAa?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AAS?$AAi?$AAz?$AAe?$AA?$AA@| DCB "R"
	DCB	0x0, "x", 0x0, "D", 0x0, "m", 0x0, "a", 0x0, "B", 0x0, "u"
	DCB	0x0, "f", 0x0, "f", 0x0, "e", 0x0, "r", 0x0, "S", 0x0, "i"
	DCB	0x0, "z", 0x0, "e", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BK@EAHGCAAM@?$AAR?$AAx?$AAD?$AAm?$AAa?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?$AA@| DCB "R"
	DCB	0x0, "x", 0x0, "D", 0x0, "m", 0x0, "a", 0x0, "R", 0x0, "e"
	DCB	0x0, "q", 0x0, "u", 0x0, "e", 0x0, "s", 0x0, "t", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@EBCLBMAF@?$AAT?$AAX?$AAP?$AAa?$AAu?$AAs?$AAe?$AAT?$AAi?$AAm?$AAe?$AAM?$AAs?$AA?$AA@| DCB "T"
	DCB	0x0, "X", 0x0, "P", 0x0, "a", 0x0, "u", 0x0, "s", 0x0, "e"
	DCB	0x0, "T", 0x0, "i", 0x0, "m", 0x0, "e", 0x0, "M", 0x0, "s"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CA@NHBAHBHE@?$AAT?$AAx?$AAD?$AAm?$AAa?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AAS?$AAi?$AAz?$AAe?$AA?$AA@| DCB "T"
	DCB	0x0, "x", 0x0, "D", 0x0, "m", 0x0, "a", 0x0, "B", 0x0, "u"
	DCB	0x0, "f", 0x0, "f", 0x0, "e", 0x0, "r", 0x0, "S", 0x0, "i"
	DCB	0x0, "z", 0x0, "e", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BK@HPKIPNLN@?$AAT?$AAx?$AAD?$AAm?$AAa?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?$AA@| DCB "T"
	DCB	0x0, "x", 0x0, "D", 0x0, "m", 0x0, "a", 0x0, "R", 0x0, "e"
	DCB	0x0, "q", 0x0, "u", 0x0, "e", 0x0, "s", 0x0, "t", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BE@CEKAHLDM@?$AAH?$AAW?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$AA@| DCB "H"
	DCB	0x0, "W", 0x0, "T", 0x0, "i", 0x0, "m", 0x0, "e", 0x0, "o"
	DCB	0x0, "u", 0x0, "t", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BC@OKCHLFFC@?$AAR?$AAx?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?$AA@| DCB "R"
	DCB	0x0, "x", 0x0, "B", 0x0, "u", 0x0, "f", 0x0, "f", 0x0, "e"
	DCB	0x0, "r", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BC@HNMEBGCB@?$AAW?$AAa?$AAk?$AAe?$AAC?$AAh?$AAa?$AAr?$AA?$AA@| DCB "W"
	DCB	0x0, "a", 0x0, "k", 0x0, "e", 0x0, "C", 0x0, "h", 0x0, "a"
	DCB	0x0, "r", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BE@GPCELNGD@?$AAF?$AAr?$AAe?$AAq?$AAu?$AAe?$AAn?$AAc?$AAy?$AA?$AA@| DCB "F"
	DCB	0x0, "r", 0x0, "e", 0x0, "q", 0x0, "u", 0x0, "e", 0x0, "n"
	DCB	0x0, "c", 0x0, "y", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1O@OJFFKIAG@?$AAH?$AAW?$AAM?$AAo?$AAd?$AAe?$AA?$AA@| DCB "H", 0x0, "W"
	DCB	0x0, "M", 0x0, "o", 0x0, "d", 0x0, "e", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CC@KMPFMANC@?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?$AA@| DCB "D"
	DCB	0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "A"
	DCB	0x0, "r", 0x0, "r", 0x0, "a", 0x0, "y", 0x0, "I", 0x0, "n"
	DCB	0x0, "d", 0x0, "e", 0x0, "x", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.data|, DATA
|g_pddVTbl| DCD	|HWInit|
	DCD	|HWPostInit|
	DCD	|HWDeinit|
	DCD	|HWOpen|
	DCD	|HWClose|
	DCD	|HWGetInterruptType|
	DCD	|HWRxIntr|
	DCD	|HWTxIntr|
	DCD	|HWModemIntr|
	DCD	|HWLineIntr|
	DCD	|HWGetRxBufferSize|
	DCD	|HWPowerOff|
	DCD	|HWPowerOn|
	DCD	|HWClearDTR|
	DCD	|HWSetDTR|
	DCD	|HWClearRTS|
	DCD	|HWSetRTS|
	DCD	|HWEnableIR|
	DCD	|HWDisableIR|
	DCD	|HWClearBreak|
	DCD	|HWSetBreak|
	DCD	|HWXmitComChar|
	DCD	|HWGetStatus|
	DCD	|HWReset|
	DCD	|HWGetModemStatus|
	DCD	|HWGetCommProperties|
	DCD	|HWPurgeComm|
	DCD	|HWSetDCB|
	DCD	|HWSetCommTimeouts|
	DCD	|HWIOCtl|

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
|s_deviceRegParams| DCD |??_C@_1CC@KMPFMANC@?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?$AA@|
	DCD	0x1
	DCD	0x1
	DCD	0xc
	DCD	0x4
	DCD	0x0
	DCD	|??_C@_1O@OJFFKIAG@?$AAH?$AAW?$AAM?$AAo?$AAd?$AAe?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x14
	DCD	0x4
	DCD	0x0
	DCD	|??_C@_1BE@GPCELNGD@?$AAF?$AAr?$AAe?$AAq?$AAu?$AAe?$AAn?$AAc?$AAy?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x4c
	DCD	0x4
	DCD	0x2dc6c00
	DCD	|??_C@_1BC@HNMEBGCB@?$AAW?$AAa?$AAk?$AAe?$AAC?$AAh?$AAa?$AAr?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x1c
	DCD	0x4
	DCD	0x32
	DCD	|??_C@_1BC@OKCHLFFC@?$AAR?$AAx?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x18
	DCD	0x4
	DCD	0x2000
	DCD	|??_C@_1BE@CEKAHLDM@?$AAH?$AAW?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x20
	DCD	0x4
	DCD	0x3e8
	DCD	|??_C@_1BK@HPKIPNLN@?$AAT?$AAx?$AAD?$AAm?$AAa?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0xf0
	DCD	0x4
	DCD	0xffffffff
	DCD	|??_C@_1CA@NHBAHBHE@?$AAT?$AAx?$AAD?$AAm?$AAa?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AAS?$AAi?$AAz?$AAe?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0xf4
	DCD	0x4
	DCD	0x2000
	DCD	|??_C@_1BM@EBCLBMAF@?$AAT?$AAX?$AAP?$AAa?$AAu?$AAs?$AAe?$AAT?$AAi?$AAm?$AAe?$AAM?$AAs?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0xec
	DCD	0x4
	DCD	0x25
	DCD	|??_C@_1BK@EAHGCAAM@?$AAR?$AAx?$AAD?$AAm?$AAa?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x10c
	DCD	0x4
	DCD	0xffffffff
	DCD	|??_C@_1CA@JOFPGGEL@?$AAR?$AAx?$AAD?$AAm?$AAa?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AAS?$AAi?$AAz?$AAe?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x110
	DCD	0x4
	DCD	0x2000
	DCD	|??_C@_1BO@NNHFJINL@?$AAX?$AAc?$AAv?$AAr?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAG?$AAp?$AAi?$AAo?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x170
	DCD	0x4
	DCD	0xffff
	DCD	|??_C@_1CC@FIFIMOFA@?$AAX?$AAc?$AAv?$AAr?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAd?$AAL?$AAe?$AAv?$AAe?$AAl?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x174
	DCD	0x4
	DCD	0xffff
	DCD	|??_C@_1CG@DHJJPDED@?$AAR?$AAx?$AAF?$AAi?$AAf?$AAo?$AAT?$AAr?$AAi?$AAg?$AAg?$AAe?$AAr?$AAL?$AAe?$AAv?$AAe?$AAl?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x154
	DCD	0x4
	DCD	0x20
	DCD	|??_C@_1BK@ECILAKDK@?$AAR?$AAt?$AAs?$AAC?$AAt?$AAs?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x158
	DCD	0x4
	DCD	0x0
	EXPORT	|SetDeviceClockState|
	IMPORT	|EnableDeviceClocks|

  00000			 AREA	 |.pdata|, PDATA
|$T46603| DCD	|$LN17@SetDeviceC|
	DCD	0x40002104
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\serial\uart\pdd.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SetDeviceClockState| PROC

; 308  : {

  00000		 |$LN17@SetDeviceC|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M46600|

; 309  : 	switch(dx)

  00010	e59d3010	 ldr         r3, [sp, #0x10]
  00014	e58d3000	 str         r3, [sp]
  00018	e59d3000	 ldr         r3, [sp]
  0001c	e3530004	 cmp         r3, #4
  00020	8a000014	 bhi         |$LN1@SetDeviceC|
  00024	e59d2000	 ldr         r2, [sp]
  00028	e1a03102	 mov         r3, r2, lsl #2
  0002c	e083300f	 add         r3, r3, pc
  00030	e5933004	 ldr         r3, [r3, #4]
  00034	e08ff003	 add         pc, pc, r3
  00038		 |$LN9@SetDeviceC|
  00038		 |$LN8@SetDeviceC|
  00038		 |$LN10@SetDeviceC|
  00038	00000010	 DCD         0x10
  0003c		 |$LN11@SetDeviceC|
  0003c	00000010	 DCD         0x10
  00040		 |$LN12@SetDeviceC|
  00040	00000010	 DCD         0x10
  00044		 |$LN13@SetDeviceC|
  00044	00000028	 DCD         0x28
  00048		 |$LN14@SetDeviceC|
  00048	00000028	 DCD         0x28
  0004c		 |$LN3@SetDeviceC|

; 310  : 	{
; 311  : 	case D0:
; 312  : 	case D1:
; 313  : 	case D2:
; 314  : 		EnableDeviceClocks(pPdd->DeviceID, TRUE);

  0004c	e3a01001	 mov         r1, #1
  00050	e59d300c	 ldr         r3, [sp, #0xC]
  00054	e2833010	 add         r3, r3, #0x10
  00058	e5930000	 ldr         r0, [r3]
  0005c	eb000000	 bl          EnableDeviceClocks

; 315  : 		break;

  00060	ea000004	 b           |$LN4@SetDeviceC|
  00064		 |$LN2@SetDeviceC|

; 316  : 	case D3:
; 317  : 	case D4:
; 318  : 		EnableDeviceClocks(pPdd->DeviceID, FALSE);

  00064	e3a01000	 mov         r1, #0
  00068	e59d300c	 ldr         r3, [sp, #0xC]
  0006c	e2833010	 add         r3, r3, #0x10
  00070	e5930000	 ldr         r0, [r3]
  00074	eb000000	 bl          EnableDeviceClocks
  00078		 |$LN1@SetDeviceC|
  00078		 |$LN4@SetDeviceC|

; 319  : 		break;
; 320  : 	default:
; 321  : 	break;
; 322  : 	}
; 323  : }

  00078	e28dd004	 add         sp, sp, #4
  0007c	e89d6000	 ldmia       sp, {sp, lr}
  00080	e12fff1e	 bx          lr
  00084		 |$M46601|

			 ENDP  ; |SetDeviceClockState|

	EXPORT	|DmaSetElementAndFrameCount|
	EXPORT	|DmaSetDstBuffer|
	EXPORT	|DmaGetLastWritePos|
	EXPORT	|IsDmaEnable|
	EXPORT	|UpdateDMARxPointer|
	IMPORT	|memcpy|
	IMPORT	|__rt_udiv|

  00008			 AREA	 |.pdata|, PDATA
|$T46612| DCD	|$LN18@UpdateDMAR|
	DCD	0x4000e904
; Function compile flags: /Odtp

  00084			 AREA	 |.text|, CODE, ARM

  00084		 |UpdateDMARxPointer| PROC

; 339  : {

  00084		 |$LN18@UpdateDMAR|
  00084	e1a0c00d	 mov         r12, sp
  00088	e92d0007	 stmdb       sp!, {r0 - r2}
  0008c	e92d5000	 stmdb       sp!, {r12, lr}
  00090	e24dd038	 sub         sp, sp, #0x38
  00094		 |$M46609|

; 340  :     BOOL        bRet = FALSE;

  00094	e3a03000	 mov         r3, #0
  00098	e58d3014	 str         r3, [sp, #0x14]

; 341  :     UINT32      nStartPos = 0;

  0009c	e3a03000	 mov         r3, #0
  000a0	e58d301c	 str         r3, [sp, #0x1C]

; 342  :     UINT32      nBufferSize = 0;

  000a4	e3a03000	 mov         r3, #0
  000a8	e58d3004	 str         r3, [sp, #4]

; 343  :     PHW_INDEP_INFO  pSerialHead = (PHW_INDEP_INFO)pPdd->pMdd;

  000ac	e59d3040	 ldr         r3, [sp, #0x40]
  000b0	e2833050	 add         r3, r3, #0x50
  000b4	e5933000	 ldr         r3, [r3]
  000b8	e58d3000	 str         r3, [sp]

; 344  :     UINT32      nMddRxPosHead = (UINT32)RxBuffRead(pSerialHead);

  000bc	e59d3000	 ldr         r3, [sp]
  000c0	e28320ac	 add         r2, r3, #0xAC
  000c4	e59d3000	 ldr         r3, [sp]
  000c8	e283309c	 add         r3, r3, #0x9C
  000cc	e5922000	 ldr         r2, [r2]
  000d0	e5933000	 ldr         r3, [r3]
  000d4	e0823003	 add         r3, r2, r3
  000d8	e58d3020	 str         r3, [sp, #0x20]

; 345  :     UINT32      nMddRxPosTail = (UINT32)RxBuffWrite(pSerialHead);

  000dc	e59d3000	 ldr         r3, [sp]
  000e0	e28320ac	 add         r2, r3, #0xAC
  000e4	e59d3000	 ldr         r3, [sp]
  000e8	e28330a0	 add         r3, r3, #0xA0
  000ec	e5922000	 ldr         r2, [r2]
  000f0	e5933000	 ldr         r3, [r3]
  000f4	e0823003	 add         r3, r2, r3
  000f8	e58d3010	 str         r3, [sp, #0x10]

; 346  :     UINT32      nRxDmaBuffer = (UINT32)pPdd->pRxDmaBuffer;

  000fc	e59d3040	 ldr         r3, [sp, #0x40]
  00100	e2833f45	 add         r3, r3, #0x45, 30
  00104	e5933000	 ldr         r3, [r3]
  00108	e58d3018	 str         r3, [sp, #0x18]

; 347  :     BOOL        bAllClear = (nMddRxPosHead == nMddRxPosTail);

  0010c	e59d2020	 ldr         r2, [sp, #0x20]
  00110	e59d3010	 ldr         r3, [sp, #0x10]
  00114	e1520003	 cmp         r2, r3
  00118	1a000002	 bne         |$LN14@UpdateDMAR|
  0011c	e3a03001	 mov         r3, #1
  00120	e58d302c	 str         r3, [sp, #0x2C]
  00124	ea000001	 b           |$LN15@UpdateDMAR|
  00128		 |$LN14@UpdateDMAR|
  00128	e3a03000	 mov         r3, #0
  0012c	e58d302c	 str         r3, [sp, #0x2C]
  00130		 |$LN15@UpdateDMAR|
  00130	e59d302c	 ldr         r3, [sp, #0x2C]
  00134	e58d300c	 str         r3, [sp, #0xC]

; 348  :     BOOL        bConfig = FALSE;

  00138	e3a03000	 mov         r3, #0
  0013c	e58d3008	 str         r3, [sp, #8]

; 349  : 
; 350  :     if(IsDmaEnable(pPdd->RxDmaInfo))

  00140	e59d3040	 ldr         r3, [sp, #0x40]
  00144	e2833f49	 add         r3, r3, #0x49, 30
  00148	e5930000	 ldr         r0, [r3]
  0014c	eb000000	 bl          IsDmaEnable
  00150	e58d0030	 str         r0, [sp, #0x30]
  00154	e59d3030	 ldr         r3, [sp, #0x30]
  00158	e3530000	 cmp         r3, #0
  0015c	0a000000	 beq         |$LN11@UpdateDMAR|

; 351  :     {
; 352  :         DEBUGMSG(TESTENABLE, (L"UpdateDMARxPointer: DMA Runing\r\n"));
; 353  :         goto cleanUp;

  00160	ea000070	 b           |$cleanUp$44784|
  00164		 |$LN11@UpdateDMAR|

; 354  :     }
; 355  : 
; 356  :     // If we are purging we set the last read pos equal to the last write pos
; 357  :     if(bPurge)

  00164	e59d3044	 ldr         r3, [sp, #0x44]
  00168	e3530000	 cmp         r3, #0
  0016c	0a000003	 beq         |$LN10@UpdateDMAR|

; 358  :     {
; 359  :        nMddRxPosHead = nMddRxPosTail;

  00170	e59d3010	 ldr         r3, [sp, #0x10]
  00174	e58d3020	 str         r3, [sp, #0x20]

; 360  :        bAllClear = TRUE;

  00178	e3a03001	 mov         r3, #1
  0017c	e58d300c	 str         r3, [sp, #0xC]
  00180		 |$LN10@UpdateDMAR|

; 361  :     }
; 362  : 
; 363  :     nStartPos = (UINT32)DmaGetLastWritePos(pPdd->RxDmaInfo) + dwOffSet;

  00180	e59d3040	 ldr         r3, [sp, #0x40]
  00184	e2833f49	 add         r3, r3, #0x49, 30
  00188	e5930000	 ldr         r0, [r3]
  0018c	eb000000	 bl          DmaGetLastWritePos
  00190	e58d0034	 str         r0, [sp, #0x34]
  00194	e59d2034	 ldr         r2, [sp, #0x34]
  00198	e59d3048	 ldr         r3, [sp, #0x48]
  0019c	e0823003	 add         r3, r2, r3
  001a0	e58d301c	 str         r3, [sp, #0x1C]

; 364  :     DEBUGMSG(TESTENABLE, (L"UpdateDMARxPointer: CurrentDMALocation = 0x%x"
; 365  :         L" nMddRxWIndex= 0x%x   nMddRxRIndex= 0x%x\r\n",
; 366  :         nStartPos, nMddRxPosTail, nMddRxPosHead));
; 367  : 
; 368  :     // Since we have to setup DMA to transfer multiple of frame size (or Rx Fifo's 
; 369  :     // trigger level) and we have to fill up the DMA buffer before wrap around, we 
; 370  :     // setup the DMA to fill few bytes more after the DMA buffer (yes, we did
; 371  :     // allocate that extra space, but just didn't tell MDD about that) at the end of
; 372  :     // this routine and we will have to copy the extra data to the beginning of the 
; 373  :     // DMA buffer when we are call to setup the DMA again.
; 374  :     if (nStartPos >= (nRxDmaBuffer + pPdd->RxDmaBufferSize))

  001a4	e59d3040	 ldr         r3, [sp, #0x40]
  001a8	e2833e11	 add         r3, r3, #0x11, 28
  001ac	e59d2018	 ldr         r2, [sp, #0x18]
  001b0	e5933000	 ldr         r3, [r3]
  001b4	e0822003	 add         r2, r2, r3
  001b8	e59d301c	 ldr         r3, [sp, #0x1C]
  001bc	e1530002	 cmp         r3, r2
  001c0	3a00001a	 bcc         |$LN9@UpdateDMAR|

; 375  :     {
; 376  :         DWORD   dwCount = nStartPos - (nRxDmaBuffer + pPdd->RxDmaBufferSize);

  001c4	e59d3040	 ldr         r3, [sp, #0x40]
  001c8	e2833e11	 add         r3, r3, #0x11, 28
  001cc	e59d2018	 ldr         r2, [sp, #0x18]
  001d0	e5933000	 ldr         r3, [r3]
  001d4	e0822003	 add         r2, r2, r3
  001d8	e59d301c	 ldr         r3, [sp, #0x1C]
  001dc	e0433002	 sub         r3, r3, r2
  001e0	e58d3024	 str         r3, [sp, #0x24]

; 377  :         DEBUGMSG(TESTENABLE,
; 378  :            (L"UpdateDMARxPointer: recv EndOfBlock DMA\r\n"));
; 379  :         if (dwCount > 0)

  001e4	e59d3024	 ldr         r3, [sp, #0x24]
  001e8	e3530000	 cmp         r3, #0
  001ec	9a00000b	 bls         |$LN8@UpdateDMAR|

; 380  :         {
; 381  :             pPdd->bRxWrapped   = TRUE;

  001f0	e59d3040	 ldr         r3, [sp, #0x40]
  001f4	e2832f52	 add         r2, r3, #0x52, 30
  001f8	e3a03001	 mov         r3, #1
  001fc	e5823000	 str         r3, [r2]

; 382  :             memcpy((BYTE*)nRxDmaBuffer, (BYTE*)(nRxDmaBuffer + pPdd->RxDmaBufferSize), dwCount);

  00200	e59d2024	 ldr         r2, [sp, #0x24]
  00204	e59d3040	 ldr         r3, [sp, #0x40]
  00208	e2833e11	 add         r3, r3, #0x11, 28
  0020c	e59d1018	 ldr         r1, [sp, #0x18]
  00210	e5933000	 ldr         r3, [r3]
  00214	e0811003	 add         r1, r1, r3
  00218	e59d0018	 ldr         r0, [sp, #0x18]
  0021c	eb000000	 bl          memcpy
  00220		 |$LN8@UpdateDMAR|

; 383  :     }
; 384  :         nStartPos = nRxDmaBuffer + dwCount;

  00220	e59d2018	 ldr         r2, [sp, #0x18]
  00224	e59d3024	 ldr         r3, [sp, #0x24]
  00228	e0823003	 add         r3, r2, r3
  0022c	e58d301c	 str         r3, [sp, #0x1C]
  00230		 |$LN9@UpdateDMAR|

; 385  :     }
; 386  : 
; 387  :     // check for start position if it is greater then MDD write position
; 388  :     if(/*(nStartPos >= nMddRxPosTail) && */
; 389  :         (nStartPos < (nRxDmaBuffer + pPdd->RxDmaBufferSize)) &&
; 390  :         (nStartPos > nMddRxPosHead))

  00230	e59d3040	 ldr         r3, [sp, #0x40]
  00234	e2833e11	 add         r3, r3, #0x11, 28
  00238	e59d2018	 ldr         r2, [sp, #0x18]
  0023c	e5933000	 ldr         r3, [r3]
  00240	e0822003	 add         r2, r2, r3
  00244	e59d301c	 ldr         r3, [sp, #0x1C]
  00248	e1530002	 cmp         r3, r2
  0024c	2a000010	 bcs         |$LN7@UpdateDMAR|
  00250	e59d201c	 ldr         r2, [sp, #0x1C]
  00254	e59d3020	 ldr         r3, [sp, #0x20]
  00258	e1520003	 cmp         r2, r3
  0025c	9a00000c	 bls         |$LN7@UpdateDMAR|

; 391  :     {
; 392  :         DEBUGMSG(TESTENABLE,
; 393  :             (L"(nStartPos < (nRxDmaBuffer + pPdd->RxDmaBufferSize))&&"
; 394  :             L"(nStartPos > nMddRxPosHead)\r\n"));
; 395  :         nStartPos = nStartPos;

  00260	e59d301c	 ldr         r3, [sp, #0x1C]
  00264	e58d301c	 str         r3, [sp, #0x1C]

; 396  :         nBufferSize = pPdd->RxDmaBufferSize - (nStartPos - nRxDmaBuffer);

  00268	e59d3040	 ldr         r3, [sp, #0x40]
  0026c	e2831e11	 add         r1, r3, #0x11, 28
  00270	e59d201c	 ldr         r2, [sp, #0x1C]
  00274	e59d3018	 ldr         r3, [sp, #0x18]
  00278	e0422003	 sub         r2, r2, r3
  0027c	e5913000	 ldr         r3, [r1]
  00280	e0433002	 sub         r3, r3, r2
  00284	e58d3004	 str         r3, [sp, #4]

; 397  :         bConfig = TRUE;

  00288	e3a03001	 mov         r3, #1
  0028c	e58d3008	 str         r3, [sp, #8]

; 398  :         goto cleanUp;

  00290	ea000024	 b           |$cleanUp$44784|
  00294		 |$LN7@UpdateDMAR|

; 399  :     }
; 400  :     // check for start position if less then MDD read position
; 401  :     if (nStartPos < nMddRxPosHead)

  00294	e59d201c	 ldr         r2, [sp, #0x1C]
  00298	e59d3020	 ldr         r3, [sp, #0x20]
  0029c	e1520003	 cmp         r2, r3
  002a0	2a000009	 bcs         |$LN6@UpdateDMAR|

; 402  :     {
; 403  :         DEBUGMSG(TESTENABLE, (L"(nStartPos < nMddRxPosHead)\r\n"));
; 404  :         // adjust the buffer length to only extend to the last read
; 405  :         // position of the mdd
; 406  :         nStartPos = nStartPos;

  002a4	e59d301c	 ldr         r3, [sp, #0x1C]
  002a8	e58d301c	 str         r3, [sp, #0x1C]

; 407  :         nBufferSize = (nMddRxPosHead - nStartPos) -1;

  002ac	e59d2020	 ldr         r2, [sp, #0x20]
  002b0	e59d301c	 ldr         r3, [sp, #0x1C]
  002b4	e0423003	 sub         r3, r2, r3
  002b8	e2433001	 sub         r3, r3, #1
  002bc	e58d3004	 str         r3, [sp, #4]

; 408  :         bConfig = TRUE;

  002c0	e3a03001	 mov         r3, #1
  002c4	e58d3008	 str         r3, [sp, #8]

; 409  :         goto cleanUp;

  002c8	ea000016	 b           |$cleanUp$44784|
  002cc		 |$LN6@UpdateDMAR|

; 410  :     }
; 411  :     if((bAllClear == TRUE) && (nStartPos == nMddRxPosHead))

  002cc	e59d300c	 ldr         r3, [sp, #0xC]
  002d0	e3530001	 cmp         r3, #1
  002d4	1a000013	 bne         |$LN5@UpdateDMAR|
  002d8	e59d201c	 ldr         r2, [sp, #0x1C]
  002dc	e59d3020	 ldr         r3, [sp, #0x20]
  002e0	e1520003	 cmp         r2, r3
  002e4	1a00000f	 bne         |$LN5@UpdateDMAR|

; 412  :     {
; 413  :         DEBUGMSG(TESTENABLE,
; 414  :             (L"(bAllClear == TRUE)&& (nMddRxPosHead = nRxDmaBuffer)\r\n"));
; 415  :         //check if it is not starting position then inc by 1
; 416  :         if(nStartPos != nRxDmaBuffer)

  002e8	e59d201c	 ldr         r2, [sp, #0x1C]
  002ec	e59d3018	 ldr         r3, [sp, #0x18]
  002f0	e1520003	 cmp         r2, r3
  002f4	0a000001	 beq         |$LN4@UpdateDMAR|

; 417  :             nStartPos =nStartPos;// + 1;

  002f8	e59d301c	 ldr         r3, [sp, #0x1C]
  002fc	e58d301c	 str         r3, [sp, #0x1C]
  00300		 |$LN4@UpdateDMAR|

; 418  :         nBufferSize = pPdd->RxDmaBufferSize - (nStartPos - nRxDmaBuffer);

  00300	e59d3040	 ldr         r3, [sp, #0x40]
  00304	e2831e11	 add         r1, r3, #0x11, 28
  00308	e59d201c	 ldr         r2, [sp, #0x1C]
  0030c	e59d3018	 ldr         r3, [sp, #0x18]
  00310	e0422003	 sub         r2, r2, r3
  00314	e5913000	 ldr         r3, [r1]
  00318	e0433002	 sub         r3, r3, r2
  0031c	e58d3004	 str         r3, [sp, #4]

; 419  :         bConfig = TRUE;

  00320	e3a03001	 mov         r3, #1
  00324	e58d3008	 str         r3, [sp, #8]
  00328		 |$LN5@UpdateDMAR|
  00328		 |$cleanUp$44784|

; 420  :         goto cleanUp;
; 421  :     }
; 422  : 
; 423  : cleanUp:
; 424  :     if(bConfig)

  00328	e59d3008	 ldr         r3, [sp, #8]
  0032c	e3530000	 cmp         r3, #0
  00330	0a000036	 beq         |$LN3@UpdateDMAR|

; 425  :     {
; 426  :         if ((nBufferSize <= 0) || (nBufferSize > pPdd->RxDmaBufferSize))

  00334	e59d3004	 ldr         r3, [sp, #4]
  00338	e3530000	 cmp         r3, #0
  0033c	9a000005	 bls         |$LN1@UpdateDMAR|
  00340	e59d3040	 ldr         r3, [sp, #0x40]
  00344	e2833e11	 add         r3, r3, #0x11, 28
  00348	e59d2004	 ldr         r2, [sp, #4]
  0034c	e5933000	 ldr         r3, [r3]
  00350	e1520003	 cmp         r2, r3
  00354	9a000004	 bls         |$LN2@UpdateDMAR|
  00358		 |$LN1@UpdateDMAR|

; 427  :             {
; 428  :                 bRet = FALSE;

  00358	e3a03000	 mov         r3, #0
  0035c	e58d3014	 str         r3, [sp, #0x14]

; 429  :                 return bRet;

  00360	e59d3014	 ldr         r3, [sp, #0x14]
  00364	e58d3028	 str         r3, [sp, #0x28]
  00368	ea00002a	 b           |$LN12@UpdateDMAR|
  0036c		 |$LN2@UpdateDMAR|

; 430  :             }
; 431  :         RETAILMSG(0,
; 432  :             (L"nBufferSize = 0x%x  nStartPos = 0x%x\r\n",
; 433  :             nBufferSize,
; 434  :             nStartPos));
; 435  : 
; 436  :         // update registers
; 437  :         DmaSetDstBuffer(pPdd->RxDmaInfo,
; 438  :             (UINT8*)nStartPos,
; 439  :             pPdd->paRxDmaBuffer + (nStartPos - nRxDmaBuffer));

  0036c	e59d3040	 ldr         r3, [sp, #0x40]
  00370	e2831f46	 add         r1, r3, #0x46, 30
  00374	e59d201c	 ldr         r2, [sp, #0x1C]
  00378	e59d3018	 ldr         r3, [sp, #0x18]
  0037c	e0422003	 sub         r2, r2, r3
  00380	e5913000	 ldr         r3, [r1]
  00384	e0832002	 add         r2, r3, r2
  00388	e59d101c	 ldr         r1, [sp, #0x1C]
  0038c	e59d3040	 ldr         r3, [sp, #0x40]
  00390	e2833f49	 add         r3, r3, #0x49, 30
  00394	e5930000	 ldr         r0, [r3]
  00398	eb000000	 bl          DmaSetDstBuffer

; 440  : 
; 441  :         // Since we have to setup DMA to transfer multiple of frame size (or Rx Fifo's 
; 442  :         // trigger level) and we have to fill up the DMA buffer before wrap around, we 
; 443  :         // will setup the DMA to fill few bytes more after the DMA buffer (yes, we did
; 444  :         // allocate that extra space, but just didn't tell MDD about that) here and we 
; 445  :         // will copy the extra data to the beginning of the DMA when we update the DMA 
; 446  :         // pointer next. See beginning of this routine.
; 447  :         nBufferSize += (pPdd->dwRxFifoTriggerLevel - 1);

  0039c	e59d3040	 ldr         r3, [sp, #0x40]
  003a0	e2833f55	 add         r3, r3, #0x55, 30
  003a4	e5933000	 ldr         r3, [r3]
  003a8	e2432001	 sub         r2, r3, #1
  003ac	e59d3004	 ldr         r3, [sp, #4]
  003b0	e0833002	 add         r3, r3, r2
  003b4	e58d3004	 str         r3, [sp, #4]

; 448  :         DmaSetElementAndFrameCount(pPdd->RxDmaInfo,
; 449  :             (UINT16)pPdd->dwRxFifoTriggerLevel, 
; 450  :             ((UINT16)(nBufferSize / pPdd->dwRxFifoTriggerLevel)));

  003b8	e59d3040	 ldr         r3, [sp, #0x40]
  003bc	e2833f55	 add         r3, r3, #0x55, 30
  003c0	e59d1004	 ldr         r1, [sp, #4]
  003c4	e5930000	 ldr         r0, [r3]
  003c8	eb000000	 bl          __rt_udiv
  003cc	e1a02800	 mov         r2, r0, lsl #16
  003d0	e1a02822	 mov         r2, r2, lsr #16
  003d4	e59d3040	 ldr         r3, [sp, #0x40]
  003d8	e2833f55	 add         r3, r3, #0x55, 30
  003dc	e5933000	 ldr         r3, [r3]
  003e0	e1a01803	 mov         r1, r3, lsl #16
  003e4	e1a01821	 mov         r1, r1, lsr #16
  003e8	e59d3040	 ldr         r3, [sp, #0x40]
  003ec	e2833f49	 add         r3, r3, #0x49, 30
  003f0	e5930000	 ldr         r0, [r3]
  003f4	eb000000	 bl          DmaSetElementAndFrameCount

; 451  : 
; 452  :         pPdd->pRxDMALastWrite = (VOID*)nStartPos;

  003f8	e59d3040	 ldr         r3, [sp, #0x40]
  003fc	e2832f53	 add         r2, r3, #0x53, 30
  00400	e59d301c	 ldr         r3, [sp, #0x1C]
  00404	e5823000	 str         r3, [r2]

; 453  : 
; 454  :         bRet = TRUE;

  00408	e3a03001	 mov         r3, #1
  0040c	e58d3014	 str         r3, [sp, #0x14]
  00410		 |$LN3@UpdateDMAR|

; 455  :     }
; 456  :     return bRet;

  00410	e59d3014	 ldr         r3, [sp, #0x14]
  00414	e58d3028	 str         r3, [sp, #0x28]
  00418		 |$LN12@UpdateDMAR|

; 457  : }

  00418	e59d0028	 ldr         r0, [sp, #0x28]
  0041c	e28dd038	 add         sp, sp, #0x38
  00420	e89d6000	 ldmia       sp, {sp, lr}
  00424	e12fff1e	 bx          lr
  00428		 |$M46610|

			 ENDP  ; |UpdateDMARxPointer|

; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\inc\omap_sdma_utility.h

  00000			 AREA	 |.pdata|, PDATA
|$T46617| DCD	|$LN6@DmaSetDstB|
	DCD	0x40001e03
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DmaSetDstBuffer| PROC

; 330  : {

  00000		 |$LN6@DmaSetDstB|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0007	 stmdb       sp!, {r0 - r2}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M46614|

; 331  :     // save values
; 332  :     //
; 333  :     pDataInfo->pDstBuffer = pBuffer;

  0000c	e59d3008	 ldr         r3, [sp, #8]
  00010	e2832004	 add         r2, r3, #4
  00014	e59d300c	 ldr         r3, [sp, #0xC]
  00018	e5823000	 str         r3, [r2]

; 334  :     pDataInfo->PhysAddrDstBuffer = PhysAddr;

  0001c	e59d3008	 ldr         r3, [sp, #8]
  00020	e283200c	 add         r2, r3, #0xC
  00024	e59d3010	 ldr         r3, [sp, #0x10]
  00028	e5823000	 str         r3, [r2]

; 335  : 
; 336  :     // set destination address
; 337  :     //
; 338  :     if (pDataInfo->pDmaLcReg != NULL)

  0002c	e59d3008	 ldr         r3, [sp, #8]
  00030	e2833014	 add         r3, r3, #0x14
  00034	e5933000	 ldr         r3, [r3]
  00038	e3530000	 cmp         r3, #0
  0003c	0a00000b	 beq         |$LN1@DmaSetDstB|

; 339  :         {
; 340  :         OUTREG32(&pDataInfo->pDmaLcReg->CDSA, PhysAddr);

  00040	e59d3008	 ldr         r3, [sp, #8]
  00044	e2833014	 add         r3, r3, #0x14
  00048	e5933000	 ldr         r3, [r3]
  0004c	e2832020	 add         r2, r3, #0x20
  00050	e59d3010	 ldr         r3, [sp, #0x10]
  00054	e5823000	 str         r3, [r2]

; 341  :         OUTREG32(&pDataInfo->pDmaLcReg->CDAC, PhysAddr);

  00058	e59d3008	 ldr         r3, [sp, #8]
  0005c	e2833014	 add         r3, r3, #0x14
  00060	e5933000	 ldr         r3, [r3]
  00064	e2832038	 add         r2, r3, #0x38
  00068	e59d3010	 ldr         r3, [sp, #0x10]
  0006c	e5823000	 str         r3, [r2]
  00070		 |$LN1@DmaSetDstB|

; 342  :         }
; 343  : }

  00070	e89d6000	 ldmia       sp, {sp, lr}
  00074	e12fff1e	 bx          lr
  00078		 |$M46615|

			 ENDP  ; |DmaSetDstBuffer|


  00000			 AREA	 |.pdata|, PDATA
|$T46624| DCD	|$LN5@DmaSetElem|
	DCD	0x40001103
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DmaSetElementAndFrameCount| PROC

; 386  : {

  00000		 |$LN5@DmaSetElem|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0007	 stmdb       sp!, {r0 - r2}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M46621|

; 387  :     // setup frame and element count for destination side
; 388  :     //
; 389  :     OUTREG32(&pDataInfo->pDmaLcReg->CEN , countElements);

  0000c	e59d3008	 ldr         r3, [sp, #8]
  00010	e2833014	 add         r3, r3, #0x14
  00014	e5933000	 ldr         r3, [r3]
  00018	e2832014	 add         r2, r3, #0x14
  0001c	e59d300c	 ldr         r3, [sp, #0xC]
  00020	e5823000	 str         r3, [r2]

; 390  :     OUTREG32(&pDataInfo->pDmaLcReg->CFN , countFrames);

  00024	e1dd21b0	 ldrh        r2, [sp, #0x10]
  00028	e59d3008	 ldr         r3, [sp, #8]
  0002c	e2833014	 add         r3, r3, #0x14
  00030	e5933000	 ldr         r3, [r3]
  00034	e2833018	 add         r3, r3, #0x18
  00038	e5832000	 str         r2, [r3]

; 391  : }

  0003c	e89d6000	 ldmia       sp, {sp, lr}
  00040	e12fff1e	 bx          lr
  00044		 |$M46622|

			 ENDP  ; |DmaSetElementAndFrameCount|


  00000			 AREA	 |.pdata|, PDATA
|$T46632| DCD	|$LN8@IsDmaEnabl|
	DCD	0x40001c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |IsDmaEnable| PROC

; 404  : {

  00000		 |$LN8@IsDmaEnabl|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd008	 sub         sp, sp, #8
  00010		 |$M46629|

; 405  :     volatile ULONG ulCCR;
; 406  : 
; 407  :     if (NULL == pDataInfo)

  00010	e59d3010	 ldr         r3, [sp, #0x10]
  00014	e3530000	 cmp         r3, #0
  00018	1a000002	 bne         |$LN3@IsDmaEnabl|

; 408  :        return FALSE;

  0001c	e3a03000	 mov         r3, #0
  00020	e58d3004	 str         r3, [sp, #4]
  00024	ea00000d	 b           |$LN4@IsDmaEnabl|
  00028		 |$LN3@IsDmaEnabl|

; 409  : 
; 410  :     ulCCR = INREG32(&pDataInfo->pDmaLcReg->CCR);

  00028	e59d3010	 ldr         r3, [sp, #0x10]
  0002c	e2833014	 add         r3, r3, #0x14
  00030	e5933000	 ldr         r3, [r3]
  00034	e5933000	 ldr         r3, [r3]
  00038	e58d3000	 str         r3, [sp]

; 411  : 
; 412  :     if (ulCCR & DMA_CCR_ENABLE)

  0003c	e59d3000	 ldr         r3, [sp]
  00040	e3130080	 tst         r3, #0x80
  00044	0a000003	 beq         |$LN2@IsDmaEnabl|

; 413  :         return TRUE;

  00048	e3a03001	 mov         r3, #1
  0004c	e58d3004	 str         r3, [sp, #4]
  00050	ea000002	 b           |$LN4@IsDmaEnabl|

; 414  :     else

  00054	ea000001	 b           |$LN1@IsDmaEnabl|
  00058		 |$LN2@IsDmaEnabl|

; 415  :         return FALSE;

  00058	e3a03000	 mov         r3, #0
  0005c	e58d3004	 str         r3, [sp, #4]
  00060		 |$LN1@IsDmaEnabl|
  00060		 |$LN4@IsDmaEnabl|

; 416  : }

  00060	e59d0004	 ldr         r0, [sp, #4]
  00064	e28dd008	 add         sp, sp, #8
  00068	e89d6000	 ldmia       sp, {sp, lr}
  0006c	e12fff1e	 bx          lr
  00070		 |$M46630|

			 ENDP  ; |IsDmaEnable|


  00000			 AREA	 |.pdata|, PDATA
|$T46640| DCD	|$LN5@DmaGetLast|
	DCD	0x40001804
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DmaGetLastWritePos| PROC

; 504  : {

  00000		 |$LN5@DmaGetLast|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd008	 sub         sp, sp, #8
  00010		 |$M46637|

; 505  :     UINT32  offset;
; 506  :     offset = INREG32(&pDataInfo->pDmaLcReg->CDAC) - pDataInfo->PhysAddrDstBuffer;

  00010	e59d3010	 ldr         r3, [sp, #0x10]
  00014	e2833014	 add         r3, r3, #0x14
  00018	e5933000	 ldr         r3, [r3]
  0001c	e2832038	 add         r2, r3, #0x38
  00020	e59d3010	 ldr         r3, [sp, #0x10]
  00024	e283300c	 add         r3, r3, #0xC
  00028	e5922000	 ldr         r2, [r2]
  0002c	e5933000	 ldr         r3, [r3]
  00030	e0423003	 sub         r3, r2, r3
  00034	e58d3000	 str         r3, [sp]

; 507  :     return ((UINT8*)pDataInfo->pDstBuffer + offset);

  00038	e59d3010	 ldr         r3, [sp, #0x10]
  0003c	e2833004	 add         r3, r3, #4
  00040	e5932000	 ldr         r2, [r3]
  00044	e59d3000	 ldr         r3, [sp]
  00048	e0823003	 add         r3, r2, r3
  0004c	e58d3004	 str         r3, [sp, #4]

; 508  : }

  00050	e59d0004	 ldr         r0, [sp, #4]
  00054	e28dd008	 add         sp, sp, #8
  00058	e89d6000	 ldmia       sp, {sp, lr}
  0005c	e12fff1e	 bx          lr
  00060		 |$M46638|

			 ENDP  ; |DmaGetLastWritePos|

	EXPORT	|DmaStart|
	EXPORT	|??_C@_1DM@LFDBCAED@?$AAU?$AAA?$AAR?$AAT?$AA?3?$AAS?$AAe?$AAt?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?3?$AA?5?$AAS?$AAt?$AAa?$AAr?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAD?$AAM?$AAA?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DE@LHCPPEPC@?$AAU?$AAA?$AAR?$AAT?$AA?3?$AAS?$AAe?$AAt?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?3?$AA?5?$AAs?$AAt?$AAo?$AAp?$AA?5?$AAD?$AAM?$AAA?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|SetEvent|
	EXPORT	|??_C@_1EC@OCKKHLOL@?$AAU?$AAA?$AAR?$AAT?$AA?3?$AAS?$AAe?$AAt?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?3?$AA?5?$AAD?$AA?$CF?$AAd?$AA?5?$AA?$CI?$AAc?$AAu?$AAr?$AAD?$AAx?$AA?$DN?$AAD?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6@| [ DATA ] ; `string'
	EXPORT	|SetPower|
	IMPORT	|LeaveCriticalSection|
	IMPORT	|SetDevicePowerState|
	IMPORT	|WaitForSingleObject|
	IMPORT	|Sleep|
	IMPORT	|GPIOSetBit|
	IMPORT	|GPIOClrBit|
	IMPORT	|EnterCriticalSection|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|dpCurSettings|

  00010			 AREA	 |.pdata|, PDATA
|$T46654| DCD	|$LN37@SetPower|
	DCD	0x40015004
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\serial\uart\pdd.c

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@LFDBCAED@?$AAU?$AAA?$AAR?$AAT?$AA?3?$AAS?$AAe?$AAt?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?3?$AA?5?$AAS?$AAt?$AAa?$AAr?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAD?$AAM?$AAA?$AA?$AN?$AA?6?$AA?$AA@| DCB "U"
	DCB	0x0, "A", 0x0, "R", 0x0, "T", 0x0, ":", 0x0, "S", 0x0, "e"
	DCB	0x0, "t", 0x0, "P", 0x0, "o", 0x0, "w", 0x0, "e", 0x0, "r"
	DCB	0x0, ":", 0x0, " ", 0x0, "S", 0x0, "t", 0x0, "a", 0x0, "r"
	DCB	0x0, "t", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, " ", 0x0, "D"
	DCB	0x0, "M", 0x0, "A", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DE@LHCPPEPC@?$AAU?$AAA?$AAR?$AAT?$AA?3?$AAS?$AAe?$AAt?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?3?$AA?5?$AAs?$AAt?$AAo?$AAp?$AA?5?$AAD?$AAM?$AAA?$AA?$AN?$AA?6?$AA?$AA@| DCB "U"
	DCB	0x0, "A", 0x0, "R", 0x0, "T", 0x0, ":", 0x0, "S", 0x0, "e"
	DCB	0x0, "t", 0x0, "P", 0x0, "o", 0x0, "w", 0x0, "e", 0x0, "r"
	DCB	0x0, ":", 0x0, " ", 0x0, "s", 0x0, "t", 0x0, "o", 0x0, "p"
	DCB	0x0, " ", 0x0, "D", 0x0, "M", 0x0, "A", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EC@OCKKHLOL@?$AAU?$AAA?$AAR?$AAT?$AA?3?$AAS?$AAe?$AAt?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?3?$AA?5?$AAD?$AA?$CF?$AAd?$AA?5?$AA?$CI?$AAc?$AAu?$AAr?$AAD?$AAx?$AA?$DN?$AAD?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6@| DCB "U"
	DCB	0x0, "A", 0x0, "R", 0x0, "T", 0x0, ":", 0x0, "S", 0x0, "e"
	DCB	0x0, "t", 0x0, "P", 0x0, "o", 0x0, "w", 0x0, "e", 0x0, "r"
	DCB	0x0, ":", 0x0, " ", 0x0, "D", 0x0, "%", 0x0, "d", 0x0, " "
	DCB	0x0, "(", 0x0, "c", 0x0, "u", 0x0, "r", 0x0, "D", 0x0, "x"
	DCB	0x0, "=", 0x0, "D", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  00428			 AREA	 |.text|, CODE, ARM

  00428		 |SetPower| PROC

; 992  : {

  00428		 |$LN37@SetPower|
  00428	e1a0c00d	 mov         r12, sp
  0042c	e92d0003	 stmdb       sp!, {r0, r1}
  00430	e92d5000	 stmdb       sp!, {r12, lr}
  00434	e24dd020	 sub         sp, sp, #0x20
  00438		 |$M46651|

; 993  :     BOOL rc = FALSE;

  00438	e3a03000	 mov         r3, #0
  0043c	e58d3000	 str         r3, [sp]

; 994  :     int nTimeout = 1000;

  00440	e3a03ffa	 mov         r3, #0xFA, 30
  00444	e58d3004	 str         r3, [sp, #4]

; 995  :    
; 996  :     DEBUGMSG(ZONE_FUNCTION, (TEXT("UART:SetPower: D%d (curDx=D%d)\r\n"), dx, pPdd->currentDX));

  00448	e59f350c	 ldr         r3, [pc, #0x50C]
  0044c	e5933440	 ldr         r3, [r3, #0x440]
  00450	e3130a02	 tst         r3, #2, 20
  00454	0a000008	 beq         |$LN29@SetPower|
  00458	e59d3028	 ldr         r3, [sp, #0x28]
  0045c	e2833030	 add         r3, r3, #0x30
  00460	e5932000	 ldr         r2, [r3]
  00464	e59d102c	 ldr         r1, [sp, #0x2C]
  00468	e59f04f4	 ldr         r0, [pc, #0x4F4]
  0046c	eb000000	 bl          NKDbgPrintfW
  00470	e3a03001	 mov         r3, #1
  00474	e58d3010	 str         r3, [sp, #0x10]
  00478	ea000001	 b           |$LN30@SetPower|
  0047c		 |$LN29@SetPower|
  0047c	e3a03000	 mov         r3, #0
  00480	e58d3010	 str         r3, [sp, #0x10]
  00484		 |$LN30@SetPower|

; 997  : 
; 998  :     EnterCriticalSection(&pPdd->powerCS);

  00484	e59d3028	 ldr         r3, [sp, #0x28]
  00488	e2830038	 add         r0, r3, #0x38
  0048c	eb000000	 bl          EnterCriticalSection

; 999  : 	
; 1000 :     // Device can't be set to lower power state than external
; 1001 :     if (dx < pPdd->externalDX) 

  00490	e59d3028	 ldr         r3, [sp, #0x28]
  00494	e2833034	 add         r3, r3, #0x34
  00498	e59d202c	 ldr         r2, [sp, #0x2C]
  0049c	e5933000	 ldr         r3, [r3]
  004a0	e1520003	 cmp         r2, r3
  004a4	aa000003	 bge         |$LN26@SetPower|

; 1002 :         dx = pPdd->externalDX;

  004a8	e59d3028	 ldr         r3, [sp, #0x28]
  004ac	e2833034	 add         r3, r3, #0x34
  004b0	e5933000	 ldr         r3, [r3]
  004b4	e58d302c	 str         r3, [sp, #0x2C]
  004b8		 |$LN26@SetPower|

; 1003 : 
; 1004 :     // Update state only when it is different from actual
; 1005 :     if (pPdd->currentDX != dx)

  004b8	e59d3028	 ldr         r3, [sp, #0x28]
  004bc	e2833030	 add         r3, r3, #0x30
  004c0	e5932000	 ldr         r2, [r3]
  004c4	e59d302c	 ldr         r3, [sp, #0x2C]
  004c8	e1520003	 cmp         r2, r3
  004cc	0a000118	 beq         |$LN25@SetPower|

; 1006 :     {
; 1007 :         if (pPdd->currentDX <= D2 && dx >= D3)

  004d0	e59d3028	 ldr         r3, [sp, #0x28]
  004d4	e2833030	 add         r3, r3, #0x30
  004d8	e5933000	 ldr         r3, [r3]
  004dc	e3530002	 cmp         r3, #2
  004e0	ca000092	 bgt         |$LN24@SetPower|
  004e4	e59d302c	 ldr         r3, [sp, #0x2C]
  004e8	e3530003	 cmp         r3, #3
  004ec	ba00008f	 blt         |$LN24@SetPower|

; 1008 :         {
; 1009 :             // going from D0/D1/D2 to D3/D4
; 1010 :             
; 1011 :             // turn off transceiver
; 1012 :             if (pPdd->hGpio != NULL)

  004f0	e59d3028	 ldr         r3, [sp, #0x28]
  004f4	e2833f5b	 add         r3, r3, #0x5B, 30
  004f8	e5933000	 ldr         r3, [r3]
  004fc	e3530000	 cmp         r3, #0
  00500	0a000015	 beq         |$LN23@SetPower|

; 1013 :             {   
; 1014 :                 // turn off xcvr while UART is still in D0/D1/D2 state because xcvr state
; 1015 :                 // change can generate interrupts that need to be handled.
; 1016 :                 if (pPdd->XcvrEnabledLevel)

  00504	e59d3028	 ldr         r3, [sp, #0x28]
  00508	e2833f5d	 add         r3, r3, #0x5D, 30
  0050c	e5933000	 ldr         r3, [r3]
  00510	e3530000	 cmp         r3, #0
  00514	0a000007	 beq         |$LN22@SetPower|

; 1017 :                     GPIOClrBit(pPdd->hGpio, pPdd->XcvrEnableGpio);

  00518	e59d3028	 ldr         r3, [sp, #0x28]
  0051c	e2833e17	 add         r3, r3, #0x17, 28
  00520	e5931000	 ldr         r1, [r3]
  00524	e59d3028	 ldr         r3, [sp, #0x28]
  00528	e2833f5b	 add         r3, r3, #0x5B, 30
  0052c	e5930000	 ldr         r0, [r3]
  00530	eb000000	 bl          GPIOClrBit

; 1018 :                 else

  00534	ea000006	 b           |$LN21@SetPower|
  00538		 |$LN22@SetPower|

; 1019 :                     GPIOSetBit(pPdd->hGpio, pPdd->XcvrEnableGpio);

  00538	e59d3028	 ldr         r3, [sp, #0x28]
  0053c	e2833e17	 add         r3, r3, #0x17, 28
  00540	e5931000	 ldr         r1, [r3]
  00544	e59d3028	 ldr         r3, [sp, #0x28]
  00548	e2833f5b	 add         r3, r3, #0x5B, 30
  0054c	e5930000	 ldr         r0, [r3]
  00550	eb000000	 bl          GPIOSetBit
  00554		 |$LN21@SetPower|

; 1020 :                 // Delay to allow time for any interrupt processing due to change in xcvr state
; 1021 :                 Sleep(25);

  00554	e3a00019	 mov         r0, #0x19
  00558	eb000000	 bl          Sleep
  0055c		 |$LN23@SetPower|
  0055c		 |$LN20@SetPower|

; 1022 :             }
; 1023 : 
; 1024 :             while((INREG8(&pPdd->pUartRegs->LSR) & UART_LSR_RX_FIFO_E) != 0) 

  0055c	e59d3028	 ldr         r3, [sp, #0x28]
  00560	e2833024	 add         r3, r3, #0x24
  00564	e5933000	 ldr         r3, [r3]
  00568	e2833014	 add         r3, r3, #0x14
  0056c	e5d33000	 ldrb        r3, [r3]
  00570	e3130001	 tst         r3, #1
  00574	0a000010	 beq         |$LN19@SetPower|

; 1025 :             {
; 1026 :                 if(--nTimeout == 0) 

  00578	e59d3004	 ldr         r3, [sp, #4]
  0057c	e2433001	 sub         r3, r3, #1
  00580	e58d3004	 str         r3, [sp, #4]
  00584	e59d3004	 ldr         r3, [sp, #4]
  00588	e3530000	 cmp         r3, #0
  0058c	1a000009	 bne         |$LN18@SetPower|

; 1027 :                 {
; 1028 :                     // Timedout so just empty the fifo
; 1029 :                     OUTREG8(&pPdd->pUartRegs->FCR, pPdd->CurrentFCR | UART_FCR_RX_FIFO_CLEAR);

  00590	e59d3028	 ldr         r3, [sp, #0x28]
  00594	e2833089	 add         r3, r3, #0x89
  00598	e5d33000	 ldrb        r3, [r3]
  0059c	e3833002	 orr         r3, r3, #2
  005a0	e20320ff	 and         r2, r3, #0xFF
  005a4	e59d3028	 ldr         r3, [sp, #0x28]
  005a8	e2833024	 add         r3, r3, #0x24
  005ac	e5933000	 ldr         r3, [r3]
  005b0	e2833008	 add         r3, r3, #8
  005b4	e5c32000	 strb        r2, [r3]
  005b8		 |$LN18@SetPower|

; 1030 :                 }
; 1031 :             }

  005b8	eaffffe7	 b           |$LN20@SetPower|
  005bc		 |$LN19@SetPower|

; 1032 : 
; 1033 :             //set event on power thread and put uart into force Idle
; 1034 : 
; 1035 :             if ( pPdd->RxTxRefCount )

  005bc	e59d3028	 ldr         r3, [sp, #0x28]
  005c0	e2833d05	 add         r3, r3, #5, 26
  005c4	e5933000	 ldr         r3, [r3]
  005c8	e3530000	 cmp         r3, #0
  005cc	0a000003	 beq         |$LN17@SetPower|

; 1036 :                 pPdd->RxTxRefCount = 0;

  005d0	e59d3028	 ldr         r3, [sp, #0x28]
  005d4	e2832d05	 add         r2, r3, #5, 26
  005d8	e3a03000	 mov         r3, #0
  005dc	e5823000	 str         r3, [r2]
  005e0		 |$LN17@SetPower|

; 1037 : 
; 1038 :             pPdd->bDisableAutoIdle = TRUE;

  005e0	e59d3028	 ldr         r3, [sp, #0x28]
  005e4	e2832f5a	 add         r2, r3, #0x5A, 30
  005e8	e3a03001	 mov         r3, #1
  005ec	e5823000	 str         r3, [r2]

; 1039 : 
; 1040 :             // Update current power state before triggering the power thread because
; 1041 :             // the power thread will set the UART's idle mode according to the 
; 1042 :             // current DX
; 1043 :             // We changed power state
; 1044 :             pPdd->currentDX = dx;

  005f0	e59d3028	 ldr         r3, [sp, #0x28]
  005f4	e2832030	 add         r2, r3, #0x30
  005f8	e59d302c	 ldr         r3, [sp, #0x2C]
  005fc	e5823000	 str         r3, [r2]

; 1045 : 
; 1046 :             if (pPdd->hPowerThread != NULL)

  00600	e59d3028	 ldr         r3, [sp, #0x28]
  00604	e2833e16	 add         r3, r3, #0x16, 28
  00608	e5933000	 ldr         r3, [r3]
  0060c	e3530000	 cmp         r3, #0
  00610	0a00001a	 beq         |$LN16@SetPower|

; 1047 :             {
; 1048 :                 DWORD   dwCount = 0;

  00614	e3a03000	 mov         r3, #0
  00618	e58d3008	 str         r3, [sp, #8]

; 1049 : 
; 1050 :                 SetEvent(pPdd->hPowerEvent);

  0061c	e59d3028	 ldr         r3, [sp, #0x28]
  00620	e2833f57	 add         r3, r3, #0x57, 30
  00624	e5930000	 ldr         r0, [r3]
  00628	eb000000	 bl          SetEvent
  0062c		 |$LN15@SetPower|

; 1051 : 
; 1052 :                 // Under some condition, the power thread wouldn't run until few
; 1053 :                 // hundreds of ms after the event is set in which case the we ended
; 1054 :                 // up turning off the UART before the power thread access the UART 
; 1055 :                 // registers and causing the power thread to crash. To avoid the problem,
; 1056 :                 // we wait until the power thread actually woke up from the event.
; 1057 :                 do
; 1058 :                 {
; 1059 :                     Sleep(5);

  0062c	e3a00005	 mov         r0, #5
  00630	eb000000	 bl          Sleep

; 1060 :                 } while ((WaitForSingleObject(pPdd->hPowerEvent, 1) != WAIT_TIMEOUT) && (dwCount++ < 1000));

  00634	e3a01001	 mov         r1, #1
  00638	e59d3028	 ldr         r3, [sp, #0x28]
  0063c	e2833f57	 add         r3, r3, #0x57, 30
  00640	e5930000	 ldr         r0, [r3]
  00644	eb000000	 bl          WaitForSingleObject
  00648	e58d0014	 str         r0, [sp, #0x14]
  0064c	e59d2014	 ldr         r2, [sp, #0x14]
  00650	e3a03c01	 mov         r3, #1, 24
  00654	e3833002	 orr         r3, r3, #2
  00658	e1520003	 cmp         r2, r3
  0065c	0a000005	 beq         |$LN12@SetPower|
  00660	e59d3008	 ldr         r3, [sp, #8]
  00664	e3530ffa	 cmp         r3, #0xFA, 30
  00668	e59d3008	 ldr         r3, [sp, #8]
  0066c	e2833001	 add         r3, r3, #1
  00670	e58d3008	 str         r3, [sp, #8]
  00674	3affffec	 bcc         |$LN15@SetPower|
  00678		 |$LN12@SetPower|

; 1061 : 
; 1062 :                 // Now the power woke up from the event, but we still need to give it
; 1063 :                 // a chance to set the UART idle mode before we can turn off the power
; 1064 :                 // to the UART module, otherwise we will generate exception in the 
; 1065 :                 // power thread.
; 1066 :                 Sleep(10);

  00678	e3a0000a	 mov         r0, #0xA
  0067c	eb000000	 bl          Sleep
  00680		 |$LN16@SetPower|

; 1067 :             }
; 1068 : 
; 1069 :             if (pPdd->bDmaInitialize == TRUE)

  00680	e59d3028	 ldr         r3, [sp, #0x28]
  00684	e2833e15	 add         r3, r3, #0x15, 28
  00688	e5933000	 ldr         r3, [r3]
  0068c	e3530001	 cmp         r3, #1
  00690	1a00000d	 bne         |$LN11@SetPower|

; 1070 :             {
; 1071 :                 DEBUGMSG(ZONE_FUNCTION, (TEXT("UART:SetPower: stop DMA\r\n")));

  00694	e59f32c0	 ldr         r3, [pc, #0x2C0]
  00698	e5933440	 ldr         r3, [r3, #0x440]
  0069c	e3130a02	 tst         r3, #2, 20
  006a0	0a000004	 beq         |$LN31@SetPower|
  006a4	e59f02b4	 ldr         r0, [pc, #0x2B4]
  006a8	eb000000	 bl          NKDbgPrintfW
  006ac	e3a03001	 mov         r3, #1
  006b0	e58d3018	 str         r3, [sp, #0x18]
  006b4	ea000001	 b           |$LN32@SetPower|
  006b8		 |$LN31@SetPower|
  006b8	e3a03000	 mov         r3, #0
  006bc	e58d3018	 str         r3, [sp, #0x18]
  006c0		 |$LN32@SetPower|

; 1072 :                 RxDmaStop(pPdd, FALSE);

  006c0	e3a01000	 mov         r1, #0
  006c4	e59d0028	 ldr         r0, [sp, #0x28]
  006c8	eb000000	 bl          RxDmaStop
  006cc		 |$LN11@SetPower|

; 1073 :             }
; 1074 : 
; 1075 :             // If we are going to shut down the power (or clock?), we need to disable all 
; 1076 :             // interrupt before we do so otherwise the interrupt will keep kicking if there
; 1077 :             // is a pending interrupt because we wouldn't be able to mask the interrupt once
; 1078 :             // we turn off the power (or clock?).
; 1079 :             pPdd->savedIntrMask = pPdd->intrMask;

  006cc	e59d3028	 ldr         r3, [sp, #0x28]
  006d0	e2831088	 add         r1, r3, #0x88
  006d4	e59d3028	 ldr         r3, [sp, #0x28]
  006d8	e2832f5f	 add         r2, r3, #0x5F, 30
  006dc	e5d13000	 ldrb        r3, [r1]
  006e0	e5c23000	 strb        r3, [r2]

; 1080 :             pPdd->intrMask = 0;

  006e4	e59d3028	 ldr         r3, [sp, #0x28]
  006e8	e2832088	 add         r2, r3, #0x88
  006ec	e3a03000	 mov         r3, #0
  006f0	e5c23000	 strb        r3, [r2]

; 1081 :             OUTREG8(&pPdd->pUartRegs->IER, pPdd->intrMask);

  006f4	e59d3028	 ldr         r3, [sp, #0x28]
  006f8	e2831088	 add         r1, r3, #0x88
  006fc	e59d3028	 ldr         r3, [sp, #0x28]
  00700	e2833024	 add         r3, r3, #0x24
  00704	e5933000	 ldr         r3, [r3]
  00708	e2832004	 add         r2, r3, #4
  0070c	e5d13000	 ldrb        r3, [r1]
  00710	e5c23000	 strb        r3, [r2]

; 1082 : 
; 1083 :                 SetDevicePowerState(pPdd->hParentBus, dx, NULL);

  00714	e3a02000	 mov         r2, #0
  00718	e59d102c	 ldr         r1, [sp, #0x2C]
  0071c	e59d3028	 ldr         r3, [sp, #0x28]
  00720	e283302c	 add         r3, r3, #0x2C
  00724	e5930000	 ldr         r0, [r3]
  00728	eb000000	 bl          SetDevicePowerState
  0072c	ea00007e	 b           |$LN10@SetPower|
  00730		 |$LN24@SetPower|

; 1084 : 				
; 1085 :         }
; 1086 :         else if (pPdd->currentDX >= D3 && dx <= D2)

  00730	e59d3028	 ldr         r3, [sp, #0x28]
  00734	e2833030	 add         r3, r3, #0x30
  00738	e5933000	 ldr         r3, [r3]
  0073c	e3530003	 cmp         r3, #3
  00740	ba00005e	 blt         |$LN9@SetPower|
  00744	e59d302c	 ldr         r3, [sp, #0x2C]
  00748	e3530002	 cmp         r3, #2
  0074c	ca00005b	 bgt         |$LN9@SetPower|

; 1087 :         {
; 1088 :             // going from D3/D4 to D0/D1/D2
; 1089 :             /* force it to D0 so that we can program the registers and restore context */
; 1090 : 			/* once that is done, set the power state to requested level */
; 1091 :             SetDevicePowerState(pPdd->hParentBus, D0, NULL);

  00750	e3a02000	 mov         r2, #0
  00754	e3a01000	 mov         r1, #0
  00758	e59d3028	 ldr         r3, [sp, #0x28]
  0075c	e283302c	 add         r3, r3, #0x2C
  00760	e5930000	 ldr         r0, [r3]
  00764	eb000000	 bl          SetDevicePowerState

; 1092 : 
; 1093 :             pPdd->intrMask = pPdd->savedIntrMask;

  00768	e59d3028	 ldr         r3, [sp, #0x28]
  0076c	e2831f5f	 add         r1, r3, #0x5F, 30
  00770	e59d3028	 ldr         r3, [sp, #0x28]
  00774	e2832088	 add         r2, r3, #0x88
  00778	e5d13000	 ldrb        r3, [r1]
  0077c	e5c23000	 strb        r3, [r2]

; 1094 :             OUTREG8(&pPdd->pUartRegs->IER, pPdd->intrMask);

  00780	e59d3028	 ldr         r3, [sp, #0x28]
  00784	e2831088	 add         r1, r3, #0x88
  00788	e59d3028	 ldr         r3, [sp, #0x28]
  0078c	e2833024	 add         r3, r3, #0x24
  00790	e5933000	 ldr         r3, [r3]
  00794	e2832004	 add         r2, r3, #4
  00798	e5d13000	 ldrb        r3, [r1]
  0079c	e5c23000	 strb        r3, [r2]

; 1095 : 
; 1096 : 			/* dont know why we need the check dx != currentDX */
; 1097 :             if ((dx != pPdd->currentDX) && (pPdd->bDmaInitialize == TRUE))

  007a0	e59d3028	 ldr         r3, [sp, #0x28]
  007a4	e2833030	 add         r3, r3, #0x30
  007a8	e59d202c	 ldr         r2, [sp, #0x2C]
  007ac	e5933000	 ldr         r3, [r3]
  007b0	e1520003	 cmp         r2, r3
  007b4	0a00001a	 beq         |$LN8@SetPower|
  007b8	e59d3028	 ldr         r3, [sp, #0x28]
  007bc	e2833e15	 add         r3, r3, #0x15, 28
  007c0	e5933000	 ldr         r3, [r3]
  007c4	e3530001	 cmp         r3, #1
  007c8	1a000015	 bne         |$LN8@SetPower|

; 1098 :             {
; 1099 :                 DEBUGMSG(ZONE_FUNCTION, (L"UART:SetPower: Starting DMA\r\n"));

  007cc	e59f3188	 ldr         r3, [pc, #0x188]
  007d0	e5933440	 ldr         r3, [r3, #0x440]
  007d4	e3130a02	 tst         r3, #2, 20
  007d8	0a000004	 beq         |$LN33@SetPower|
  007dc	e59f0174	 ldr         r0, [pc, #0x174]
  007e0	eb000000	 bl          NKDbgPrintfW
  007e4	e3a03001	 mov         r3, #1
  007e8	e58d301c	 str         r3, [sp, #0x1C]
  007ec	ea000001	 b           |$LN34@SetPower|
  007f0		 |$LN33@SetPower|
  007f0	e3a03000	 mov         r3, #0
  007f4	e58d301c	 str         r3, [sp, #0x1C]
  007f8		 |$LN34@SetPower|

; 1100 :                 UpdateDMARxPointer(pPdd, FALSE, 0);

  007f8	e3a02000	 mov         r2, #0
  007fc	e3a01000	 mov         r1, #0
  00800	e59d0028	 ldr         r0, [sp, #0x28]
  00804	eb000000	 bl          UpdateDMARxPointer

; 1101 : 
; 1102 :                 SetAutoIdle(pPdd, TRUE);

  00808	e3a01001	 mov         r1, #1
  0080c	e59d0028	 ldr         r0, [sp, #0x28]
  00810	eb000000	 bl          SetAutoIdle

; 1103 :                 DmaStart(pPdd->RxDmaInfo);

  00814	e59d3028	 ldr         r3, [sp, #0x28]
  00818	e2833f49	 add         r3, r3, #0x49, 30
  0081c	e5930000	 ldr         r0, [r3]
  00820	eb000000	 bl          DmaStart
  00824		 |$LN8@SetPower|

; 1104 :             }
; 1105 : 			if (dx != D0)

  00824	e59d302c	 ldr         r3, [sp, #0x2C]
  00828	e3530000	 cmp         r3, #0
  0082c	0a000005	 beq         |$LN7@SetPower|

; 1106 : 				SetDevicePowerState(pPdd->hParentBus, dx, NULL);

  00830	e3a02000	 mov         r2, #0
  00834	e59d102c	 ldr         r1, [sp, #0x2C]
  00838	e59d3028	 ldr         r3, [sp, #0x28]
  0083c	e283302c	 add         r3, r3, #0x2C
  00840	e5930000	 ldr         r0, [r3]
  00844	eb000000	 bl          SetDevicePowerState
  00848		 |$LN7@SetPower|

; 1107 : 
; 1108 :             pPdd->currentDX = dx;

  00848	e59d3028	 ldr         r3, [sp, #0x28]
  0084c	e2832030	 add         r2, r3, #0x30
  00850	e59d302c	 ldr         r3, [sp, #0x2C]
  00854	e5823000	 str         r3, [r2]

; 1109 : 
; 1110 :             if (pPdd->hGpio != NULL)

  00858	e59d3028	 ldr         r3, [sp, #0x28]
  0085c	e2833f5b	 add         r3, r3, #0x5B, 30
  00860	e5933000	 ldr         r3, [r3]
  00864	e3530000	 cmp         r3, #0
  00868	0a000013	 beq         |$LN6@SetPower|

; 1111 :             {   
; 1112 :                 // Xcvr is off, power it on
; 1113 :                 if (pPdd->XcvrEnabledLevel)

  0086c	e59d3028	 ldr         r3, [sp, #0x28]
  00870	e2833f5d	 add         r3, r3, #0x5D, 30
  00874	e5933000	 ldr         r3, [r3]
  00878	e3530000	 cmp         r3, #0
  0087c	0a000007	 beq         |$LN5@SetPower|

; 1114 :                     GPIOSetBit(pPdd->hGpio, pPdd->XcvrEnableGpio);

  00880	e59d3028	 ldr         r3, [sp, #0x28]
  00884	e2833e17	 add         r3, r3, #0x17, 28
  00888	e5931000	 ldr         r1, [r3]
  0088c	e59d3028	 ldr         r3, [sp, #0x28]
  00890	e2833f5b	 add         r3, r3, #0x5B, 30
  00894	e5930000	 ldr         r0, [r3]
  00898	eb000000	 bl          GPIOSetBit

; 1115 :                 else

  0089c	ea000006	 b           |$LN4@SetPower|
  008a0		 |$LN5@SetPower|

; 1116 :                     GPIOClrBit(pPdd->hGpio, pPdd->XcvrEnableGpio);

  008a0	e59d3028	 ldr         r3, [sp, #0x28]
  008a4	e2833e17	 add         r3, r3, #0x17, 28
  008a8	e5931000	 ldr         r1, [r3]
  008ac	e59d3028	 ldr         r3, [sp, #0x28]
  008b0	e2833f5b	 add         r3, r3, #0x5B, 30
  008b4	e5930000	 ldr         r0, [r3]
  008b8	eb000000	 bl          GPIOClrBit
  008bc		 |$LN4@SetPower|
  008bc		 |$LN6@SetPower|

; 1117 :             }

  008bc	ea00001a	 b           |$LN3@SetPower|
  008c0		 |$LN9@SetPower|

; 1118 :         }
; 1119 :         else if (pPdd->currentDX > dx)

  008c0	e59d3028	 ldr         r3, [sp, #0x28]
  008c4	e2833030	 add         r3, r3, #0x30
  008c8	e5932000	 ldr         r2, [r3]
  008cc	e59d302c	 ldr         r3, [sp, #0x2C]
  008d0	e1520003	 cmp         r2, r3
  008d4	da00000a	 ble         |$LN2@SetPower|

; 1120 :         {
; 1121 :             // going from D4 to D3, D2 to D1, D1 to D0
; 1122 :             SetDevicePowerState(pPdd->hParentBus, dx, NULL);

  008d8	e3a02000	 mov         r2, #0
  008dc	e59d102c	 ldr         r1, [sp, #0x2C]
  008e0	e59d3028	 ldr         r3, [sp, #0x28]
  008e4	e283302c	 add         r3, r3, #0x2C
  008e8	e5930000	 ldr         r0, [r3]
  008ec	eb000000	 bl          SetDevicePowerState

; 1123 :             pPdd->currentDX = dx;

  008f0	e59d3028	 ldr         r3, [sp, #0x28]
  008f4	e2832030	 add         r2, r3, #0x30
  008f8	e59d302c	 ldr         r3, [sp, #0x2C]
  008fc	e5823000	 str         r3, [r2]

; 1124 :         }
; 1125 :         else

  00900	ea000009	 b           |$LN1@SetPower|
  00904		 |$LN2@SetPower|

; 1126 :         {
; 1127 :             // going from D3 to D4, D0 to D1, D1 to D2
; 1128 :             SetDevicePowerState(pPdd->hParentBus, dx, NULL);

  00904	e3a02000	 mov         r2, #0
  00908	e59d102c	 ldr         r1, [sp, #0x2C]
  0090c	e59d3028	 ldr         r3, [sp, #0x28]
  00910	e283302c	 add         r3, r3, #0x2C
  00914	e5930000	 ldr         r0, [r3]
  00918	eb000000	 bl          SetDevicePowerState

; 1129 :             pPdd->currentDX = dx;

  0091c	e59d3028	 ldr         r3, [sp, #0x28]
  00920	e2832030	 add         r2, r3, #0x30
  00924	e59d302c	 ldr         r3, [sp, #0x2C]
  00928	e5823000	 str         r3, [r2]
  0092c		 |$LN1@SetPower|
  0092c		 |$LN3@SetPower|
  0092c		 |$LN10@SetPower|

; 1130 :         }
; 1131 :         
; 1132 :         rc = TRUE;

  0092c	e3a03001	 mov         r3, #1
  00930	e58d3000	 str         r3, [sp]
  00934		 |$LN25@SetPower|

; 1133 :     }
; 1134 : 
; 1135 :     //RETAILMSG(1,(L"UART: -SetPower Device Power state D%d\r\n", pPdd->currentDX));
; 1136 :     LeaveCriticalSection(&pPdd->powerCS);

  00934	e59d3028	 ldr         r3, [sp, #0x28]
  00938	e2830038	 add         r0, r3, #0x38
  0093c	eb000000	 bl          LeaveCriticalSection

; 1137 :     return rc;

  00940	e59d3000	 ldr         r3, [sp]
  00944	e58d300c	 str         r3, [sp, #0xC]

; 1138 : }

  00948	e59d000c	 ldr         r0, [sp, #0xC]
  0094c	e28dd020	 add         sp, sp, #0x20
  00950	e89d6000	 ldmia       sp, {sp, lr}
  00954	e12fff1e	 bx          lr
  00958		 |$LN38@SetPower|
  00958		 |$LN39@SetPower|
  00958	00000000	 DCD         |??_C@_1DM@LFDBCAED@?$AAU?$AAA?$AAR?$AAT?$AA?3?$AAS?$AAe?$AAt?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?3?$AA?5?$AAS?$AAt?$AAa?$AAr?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAD?$AAM?$AAA?$AA?$AN?$AA?6?$AA?$AA@|
  0095c		 |$LN40@SetPower|
  0095c	00000000	 DCD         |dpCurSettings|
  00960		 |$LN41@SetPower|
  00960	00000000	 DCD         |??_C@_1DE@LHCPPEPC@?$AAU?$AAA?$AAR?$AAT?$AA?3?$AAS?$AAe?$AAt?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?3?$AA?5?$AAs?$AAt?$AAo?$AAp?$AA?5?$AAD?$AAM?$AAA?$AA?$AN?$AA?6?$AA?$AA@|
  00964		 |$LN42@SetPower|
  00964	00000000	 DCD         |??_C@_1EC@OCKKHLOL@?$AAU?$AAA?$AAR?$AAT?$AA?3?$AAS?$AAe?$AAt?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?3?$AA?5?$AAD?$AA?$CF?$AAd?$AA?5?$AA?$CI?$AAc?$AAu?$AAr?$AAD?$AAx?$AA?$DN?$AAD?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6@|
  00968		 |$M46652|

			 ENDP  ; |SetPower|

	IMPORT	|EventModify|
; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T46665| DCD	|$LN5@SetEvent|
	DCD	0x40000e04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SetEvent| PROC

; 235  : _inline BOOL SetEvent(HANDLE h) {

  00000		 |$LN5@SetEvent|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd008	 sub         sp, sp, #8
  00010		 |$M46662|

; 236  : 	return EventModify(h,EVENT_SET);

  00010	e3a01003	 mov         r1, #3
  00014	e59d0010	 ldr         r0, [sp, #0x10]
  00018	eb000000	 bl          EventModify
  0001c	e58d0004	 str         r0, [sp, #4]
  00020	e59d3004	 ldr         r3, [sp, #4]
  00024	e58d3000	 str         r3, [sp]

; 237  : }

  00028	e59d0000	 ldr         r0, [sp]
  0002c	e28dd008	 add         sp, sp, #8
  00030	e89d6000	 ldmia       sp, {sp, lr}
  00034	e12fff1e	 bx          lr
  00038		 |$M46663|

			 ENDP  ; |SetEvent|

; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\inc\omap_sdma_utility.h

  00000			 AREA	 |.pdata|, PDATA
|$T46672| DCD	|$LN5@DmaStart|
	DCD	0x40000e03
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DmaStart| PROC

; 487  : {

  00000		 |$LN5@DmaStart|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M46669|

; 488  :     // enable the dma channel
; 489  :     //
; 490  :     SETREG32(&pDataInfo->pDmaLcReg->CCR , DMA_CCR_ENABLE);

  0000c	e59d3008	 ldr         r3, [sp, #8]
  00010	e2833014	 add         r3, r3, #0x14
  00014	e5933000	 ldr         r3, [r3]
  00018	e5933000	 ldr         r3, [r3]
  0001c	e3832080	 orr         r2, r3, #0x80
  00020	e59d3008	 ldr         r3, [sp, #8]
  00024	e2833014	 add         r3, r3, #0x14
  00028	e5933000	 ldr         r3, [r3]
  0002c	e5832000	 str         r2, [r3]

; 491  : }

  00030	e89d6000	 ldmia       sp, {sp, lr}
  00034	e12fff1e	 bx          lr
  00038		 |$M46670|

			 ENDP  ; |DmaStart|

	EXPORT	|??_C@_1HI@EFHNNLBF@?$AA?$CL?$AAH?$AAW?$AAG?$AAe?$AAt?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAT?$AAy?$AAp?$AAe?$AA?5?$AAP?$AAu?$AAl?$AAl?$AAe?$AAd?$AA?5?$AA?$CF?$AAd?$AA?5?$AAb?$AAy@| [ DATA ] ; `string'
	EXPORT	|DmaStop|

  00018			 AREA	 |.pdata|, PDATA
|$T46682| DCD	|$LN10@RxDmaStop|
	DCD	0x40004504
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\serial\uart\pdd.c

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HI@EFHNNLBF@?$AA?$CL?$AAH?$AAW?$AAG?$AAe?$AAt?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAT?$AAy?$AAp?$AAe?$AA?5?$AAP?$AAu?$AAl?$AAl?$AAe?$AAd?$AA?5?$AA?$CF?$AAd?$AA?5?$AAb?$AAy@| DCB "+"
	DCB	0x0, "H", 0x0, "W", 0x0, "G", 0x0, "e", 0x0, "t", 0x0, "I"
	DCB	0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u"
	DCB	0x0, "p", 0x0, "t", 0x0, "T", 0x0, "y", 0x0, "p", 0x0, "e"
	DCB	0x0, " ", 0x0, "P", 0x0, "u", 0x0, "l", 0x0, "l", 0x0, "e"
	DCB	0x0, "d", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, "b"
	DCB	0x0, "y", 0x0, "t", 0x0, "e", 0x0, "s", 0x0, ".", 0x0, " "
	DCB	0x0, "S", 0x0, "h", 0x0, "o", 0x0, "u", 0x0, "l", 0x0, "d"
	DCB	0x0, "n", 0x0, "'", 0x0, "t", 0x0, " ", 0x0, "b", 0x0, "e"
	DCB	0x0, " ", 0x0, "h", 0x0, "e", 0x0, "r", 0x0, "e", 0x0, "!"
	DCB	0x0, "!", 0x0, "!", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  00968			 AREA	 |.text|, CODE, ARM

  00968		 |RxDmaStop| PROC

; 469  : {

  00968		 |$LN10@RxDmaStop|
  00968	e1a0c00d	 mov         r12, sp
  0096c	e92d0003	 stmdb       sp!, {r0, r1}
  00970	e92d5000	 stmdb       sp!, {r12, lr}
  00974	e24dd018	 sub         sp, sp, #0x18
  00978		 |$M46679|

; 470  :     DWORD   dwCount     = 0;

  00978	e3a03000	 mov         r3, #0
  0097c	e58d3000	 str         r3, [sp]

; 471  :     BYTE*   pbDataPtr   = NULL;

  00980	e3a03000	 mov         r3, #0
  00984	e58d3004	 str         r3, [sp, #4]

; 472  : 
; 473  :     DmaStop(pPdd->RxDmaInfo);

  00988	e59d3020	 ldr         r3, [sp, #0x20]
  0098c	e2833f49	 add         r3, r3, #0x49, 30
  00990	e5930000	 ldr         r0, [r3]
  00994	eb000000	 bl          DmaStop

; 474  : 
; 475  :     pbDataPtr = DmaGetLastWritePos(pPdd->RxDmaInfo);

  00998	e59d3020	 ldr         r3, [sp, #0x20]
  0099c	e2833f49	 add         r3, r3, #0x49, 30
  009a0	e5930000	 ldr         r0, [r3]
  009a4	eb000000	 bl          DmaGetLastWritePos
  009a8	e58d000c	 str         r0, [sp, #0xC]
  009ac	e59d300c	 ldr         r3, [sp, #0xC]
  009b0	e58d3004	 str         r3, [sp, #4]
  009b4		 |$LN3@RxDmaStop|

; 476  :     while ((dwCount < MAX_RX_SERIALDMA_FRAMESIZE) && ((INREG8(&pPdd->pUartRegs->LSR) & UART_LSR_RX_FIFO_E) != 0))

  009b4	e59d3000	 ldr         r3, [sp]
  009b8	e353003f	 cmp         r3, #0x3F
  009bc	2a000012	 bcs         |$LN2@RxDmaStop|
  009c0	e59d3020	 ldr         r3, [sp, #0x20]
  009c4	e2833024	 add         r3, r3, #0x24
  009c8	e5933000	 ldr         r3, [r3]
  009cc	e2833014	 add         r3, r3, #0x14
  009d0	e5d33000	 ldrb        r3, [r3]
  009d4	e3130001	 tst         r3, #1
  009d8	0a00000b	 beq         |$LN2@RxDmaStop|

; 477  :     {
; 478  :         pbDataPtr[dwCount++] = INREG8(&pPdd->pUartRegs->RHR);

  009dc	e59d3020	 ldr         r3, [sp, #0x20]
  009e0	e2833024	 add         r3, r3, #0x24
  009e4	e5931000	 ldr         r1, [r3]
  009e8	e59d2004	 ldr         r2, [sp, #4]
  009ec	e59d3000	 ldr         r3, [sp]
  009f0	e0822003	 add         r2, r2, r3
  009f4	e5d13000	 ldrb        r3, [r1]
  009f8	e5c23000	 strb        r3, [r2]
  009fc	e59d3000	 ldr         r3, [sp]
  00a00	e2833001	 add         r3, r3, #1
  00a04	e58d3000	 str         r3, [sp]

; 479  :     }

  00a08	eaffffe9	 b           |$LN3@RxDmaStop|
  00a0c		 |$LN2@RxDmaStop|

; 480  :     
; 481  :     if (dwCount >= MAX_RX_SERIALDMA_FRAMESIZE)

  00a0c	e59d3000	 ldr         r3, [sp]
  00a10	e353003f	 cmp         r3, #0x3F
  00a14	3a00000b	 bcc         |$LN1@RxDmaStop|

; 482  :     {
; 483  :         DEBUGMSG(ZONE_ERROR, (L"+HWGetInterruptType Pulled %d bytes. Shouldn't be here!!!\r\n", dwCount));

  00a18	e59f3058	 ldr         r3, [pc, #0x58]
  00a1c	e5933440	 ldr         r3, [r3, #0x440]
  00a20	e3130902	 tst         r3, #2, 18
  00a24	0a000005	 beq         |$LN6@RxDmaStop|
  00a28	e59d1000	 ldr         r1, [sp]
  00a2c	e59f0040	 ldr         r0, [pc, #0x40]
  00a30	eb000000	 bl          NKDbgPrintfW
  00a34	e3a03001	 mov         r3, #1
  00a38	e58d3010	 str         r3, [sp, #0x10]
  00a3c	ea000001	 b           |$LN7@RxDmaStop|
  00a40		 |$LN6@RxDmaStop|
  00a40	e3a03000	 mov         r3, #0
  00a44	e58d3010	 str         r3, [sp, #0x10]
  00a48		 |$LN7@RxDmaStop|
  00a48		 |$LN1@RxDmaStop|

; 484  :         //UART_RegDump(pPdd);
; 485  :     }
; 486  : 
; 487  :     return UpdateDMARxPointer(pPdd, bPurge, dwCount);

  00a48	e59d2000	 ldr         r2, [sp]
  00a4c	e59d1024	 ldr         r1, [sp, #0x24]
  00a50	e59d0020	 ldr         r0, [sp, #0x20]
  00a54	eb000000	 bl          UpdateDMARxPointer
  00a58	e58d0014	 str         r0, [sp, #0x14]
  00a5c	e59d3014	 ldr         r3, [sp, #0x14]
  00a60	e58d3008	 str         r3, [sp, #8]

; 488  : }

  00a64	e59d0008	 ldr         r0, [sp, #8]
  00a68	e28dd018	 add         sp, sp, #0x18
  00a6c	e89d6000	 ldmia       sp, {sp, lr}
  00a70	e12fff1e	 bx          lr
  00a74		 |$LN11@RxDmaStop|
  00a74		 |$LN12@RxDmaStop|
  00a74	00000000	 DCD         |??_C@_1HI@EFHNNLBF@?$AA?$CL?$AAH?$AAW?$AAG?$AAe?$AAt?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAT?$AAy?$AAp?$AAe?$AA?5?$AAP?$AAu?$AAl?$AAl?$AAe?$AAd?$AA?5?$AA?$CF?$AAd?$AA?5?$AAb?$AAy@|
  00a78		 |$LN13@RxDmaStop|
  00a78	00000000	 DCD         |dpCurSettings|
  00a7c		 |$M46680|

			 ENDP  ; |RxDmaStop|

; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\inc\omap_sdma_utility.h

  00000			 AREA	 |.pdata|, PDATA
|$T46691| DCD	|$LN11@DmaStop|
	DCD	0x40002604
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DmaStop| PROC

; 449  : {

  00000		 |$LN11@DmaStop|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd008	 sub         sp, sp, #8
  00010		 |$M46688|

; 450  :     volatile ULONG ulCCR;
; 451  :     BOOL breakLoop = FALSE;

  00010	e3a03000	 mov         r3, #0
  00014	e58d3000	 str         r3, [sp]

; 452  : 
; 453  :     // disable standby in dma controller
; 454  :     //
; 455  :     CLRREG32(&pDataInfo->pDmaLcReg->CCR , DMA_CCR_ENABLE);

  00018	e59d3010	 ldr         r3, [sp, #0x10]
  0001c	e2833014	 add         r3, r3, #0x14
  00020	e5933000	 ldr         r3, [r3]
  00024	e5932000	 ldr         r2, [r3]
  00028	e3e03080	 mvn         r3, #0x80
  0002c	e0022003	 and         r2, r2, r3
  00030	e59d3010	 ldr         r3, [sp, #0x10]
  00034	e2833014	 add         r3, r3, #0x14
  00038	e5933000	 ldr         r3, [r3]
  0003c	e5832000	 str         r2, [r3]
  00040		 |$LN8@DmaStop|
  00040		 |$LN5@DmaStop|

; 456  : 
; 457  :     // ensure DMA transfer is completed by polling the active bits
; 458  :     //
; 459  :     while (breakLoop == FALSE)

  00040	e59d3000	 ldr         r3, [sp]
  00044	e3530000	 cmp         r3, #0
  00048	1a00000f	 bne         |$LN4@DmaStop|

; 460  :         {
; 461  :         ulCCR = INREG32(&pDataInfo->pDmaLcReg->CCR);

  0004c	e59d3010	 ldr         r3, [sp, #0x10]
  00050	e2833014	 add         r3, r3, #0x14
  00054	e5933000	 ldr         r3, [r3]
  00058	e5933000	 ldr         r3, [r3]
  0005c	e58d3004	 str         r3, [sp, #4]

; 462  :         if ((ulCCR & DMA_CCR_WR_ACTIVE) || (ulCCR & DMA_CCR_RD_ACTIVE))

  00060	e59d3004	 ldr         r3, [sp, #4]
  00064	e3130b01	 tst         r3, #1, 22
  00068	1a000002	 bne         |$LN2@DmaStop|
  0006c	e59d3004	 ldr         r3, [sp, #4]
  00070	e3130c02	 tst         r3, #2, 24
  00074	0a000001	 beq         |$LN3@DmaStop|
  00078		 |$LN2@DmaStop|

; 463  :             {
; 464  :             // fix this infinite loop
; 465  :             //
; 466  :             continue;

  00078	eafffff0	 b           |$LN5@DmaStop|

; 467  :             }
; 468  :         else

  0007c	ea000001	 b           |$LN1@DmaStop|
  00080		 |$LN3@DmaStop|

; 469  :             {
; 470  :             breakLoop = TRUE;

  00080	e3a03001	 mov         r3, #1
  00084	e58d3000	 str         r3, [sp]
  00088		 |$LN1@DmaStop|

; 471  :             }
; 472  :         }

  00088	eaffffec	 b           |$LN8@DmaStop|
  0008c		 |$LN4@DmaStop|

; 473  : 
; 474  : }

  0008c	e28dd008	 add         sp, sp, #8
  00090	e89d6000	 ldmia       sp, {sp, lr}
  00094	e12fff1e	 bx          lr
  00098		 |$M46689|

			 ENDP  ; |DmaStop|

	EXPORT	|??_C@_1CC@DHLFALGK@?$AA?9?$AAS?$AAe?$AAt?$AAA?$AAu?$AAt?$AAo?$AAI?$AAd?$AAl?$AAe?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CG@GODDPDIO@?$AA?$CL?$AAS?$AAe?$AAt?$AAA?$AAu?$AAt?$AAo?$AAI?$AAd?$AAl?$AAe?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|InterlockedDecrement|
	IMPORT	|InterlockedIncrement|

  00020			 AREA	 |.pdata|, PDATA
|$T46703| DCD	|$LN13@SetAutoIdl|
	DCD	0x40004e04
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\serial\uart\pdd.c

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CC@DHLFALGK@?$AA?9?$AAS?$AAe?$AAt?$AAA?$AAu?$AAt?$AAo?$AAI?$AAd?$AAl?$AAe?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "S", 0x0, "e", 0x0, "t", 0x0, "A", 0x0, "u", 0x0, "t"
	DCB	0x0, "o", 0x0, "I", 0x0, "d", 0x0, "l", 0x0, "e", 0x0, "("
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CG@GODDPDIO@?$AA?$CL?$AAS?$AAe?$AAt?$AAA?$AAu?$AAt?$AAo?$AAI?$AAd?$AAl?$AAe?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "S", 0x0, "e", 0x0, "t", 0x0, "A", 0x0, "u", 0x0, "t"
	DCB	0x0, "o", 0x0, "I", 0x0, "d", 0x0, "l", 0x0, "e", 0x0, "("
	DCB	0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Odtp

  00a7c			 AREA	 |.text|, CODE, ARM

  00a7c		 |SetAutoIdle| PROC

; 532  : {

  00a7c		 |$LN13@SetAutoIdl|
  00a7c	e1a0c00d	 mov         r12, sp
  00a80	e92d0003	 stmdb       sp!, {r0, r1}
  00a84	e92d5000	 stmdb       sp!, {r12, lr}
  00a88	e24dd010	 sub         sp, sp, #0x10
  00a8c		 |$M46700|

; 533  :     OMAP_UART_REGS *pUartRegs = pPdd->pUartRegs;

  00a8c	e59d3018	 ldr         r3, [sp, #0x18]
  00a90	e2833024	 add         r3, r3, #0x24
  00a94	e5933000	 ldr         r3, [r3]
  00a98	e58d3000	 str         r3, [sp]

; 534  : 
; 535  :     DEBUGMSG(ZONE_FUNCTION, (L"+SetAutoIdle(%d)\r\n", enable));

  00a9c	e59f3108	 ldr         r3, [pc, #0x108]
  00aa0	e5933440	 ldr         r3, [r3, #0x440]
  00aa4	e3130a02	 tst         r3, #2, 20
  00aa8	0a000005	 beq         |$LN7@SetAutoIdl|
  00aac	e59d101c	 ldr         r1, [sp, #0x1C]
  00ab0	e59f00f8	 ldr         r0, [pc, #0xF8]
  00ab4	eb000000	 bl          NKDbgPrintfW
  00ab8	e3a03001	 mov         r3, #1
  00abc	e58d3008	 str         r3, [sp, #8]
  00ac0	ea000001	 b           |$LN8@SetAutoIdl|
  00ac4		 |$LN7@SetAutoIdl|
  00ac4	e3a03000	 mov         r3, #0
  00ac8	e58d3008	 str         r3, [sp, #8]
  00acc		 |$LN8@SetAutoIdl|

; 536  : 
; 537  :     EnterCriticalSection(&pPdd->hwCS);

  00acc	e59d3018	 ldr         r3, [sp, #0x18]
  00ad0	e2830098	 add         r0, r3, #0x98
  00ad4	eb000000	 bl          EnterCriticalSection

; 538  : 
; 539  :     // Enable/disable hardware auto Idle
; 540  :     if (enable)

  00ad8	e59d301c	 ldr         r3, [sp, #0x1C]
  00adc	e3530000	 cmp         r3, #0
  00ae0	0a000010	 beq         |$LN4@SetAutoIdl|

; 541  :     {
; 542  :         if(!pPdd->RxTxRefCount)

  00ae4	e59d3018	 ldr         r3, [sp, #0x18]
  00ae8	e2833d05	 add         r3, r3, #5, 26
  00aec	e5933000	 ldr         r3, [r3]
  00af0	e3530000	 cmp         r3, #0
  00af4	1a000003	 bne         |$LN3@SetAutoIdl|

; 543  :             {
; 544  :                 OUTREG8(
; 545  :                 &pUartRegs->SYSC,
; 546  :                 // Disable force idle, to avoid data corruption
; 547  :                 UART_SYSC_IDLE_DISABLED|UART_SYSC_WAKEUP_ENABLE
; 548  :                 );

  00af8	e59d3000	 ldr         r3, [sp]
  00afc	e2832054	 add         r2, r3, #0x54
  00b00	e3a0300c	 mov         r3, #0xC
  00b04	e5c23000	 strb        r3, [r2]
  00b08		 |$LN3@SetAutoIdl|

; 549  :             }
; 550  :         pPdd->bDisableAutoIdle = FALSE;

  00b08	e59d3018	 ldr         r3, [sp, #0x18]
  00b0c	e2832f5a	 add         r2, r3, #0x5A, 30
  00b10	e3a03000	 mov         r3, #0
  00b14	e5823000	 str         r3, [r2]

; 551  :         InterlockedIncrement((LONG*) &pPdd->RxTxRefCount);

  00b18	e59d3018	 ldr         r3, [sp, #0x18]
  00b1c	e2830d05	 add         r0, r3, #5, 26
  00b20	eb000000	 bl          InterlockedIncrement

; 552  :     }
; 553  :     else

  00b24	ea00000b	 b           |$LN2@SetAutoIdl|
  00b28		 |$LN4@SetAutoIdl|

; 554  :     {
; 555  :         InterlockedDecrement((LONG*) &pPdd->RxTxRefCount);

  00b28	e59d3018	 ldr         r3, [sp, #0x18]
  00b2c	e2830d05	 add         r0, r3, #5, 26
  00b30	eb000000	 bl          InterlockedDecrement

; 556  :         if(!pPdd->RxTxRefCount) 

  00b34	e59d3018	 ldr         r3, [sp, #0x18]
  00b38	e2833d05	 add         r3, r3, #5, 26
  00b3c	e5933000	 ldr         r3, [r3]
  00b40	e3530000	 cmp         r3, #0
  00b44	1a000003	 bne         |$LN1@SetAutoIdl|

; 557  :             SetEvent(pPdd->hPowerEvent);

  00b48	e59d3018	 ldr         r3, [sp, #0x18]
  00b4c	e2833f57	 add         r3, r3, #0x57, 30
  00b50	e5930000	 ldr         r0, [r3]
  00b54	eb000000	 bl          SetEvent
  00b58		 |$LN1@SetAutoIdl|
  00b58		 |$LN2@SetAutoIdl|

; 558  :     }
; 559  : 
; 560  :     LeaveCriticalSection(&pPdd->hwCS);

  00b58	e59d3018	 ldr         r3, [sp, #0x18]
  00b5c	e2830098	 add         r0, r3, #0x98
  00b60	eb000000	 bl          LeaveCriticalSection

; 561  : 
; 562  :     DEBUGMSG(ZONE_FUNCTION, (L"-SetAutoIdle()\r\n"));

  00b64	e59f3040	 ldr         r3, [pc, #0x40]
  00b68	e5933440	 ldr         r3, [r3, #0x440]
  00b6c	e3130a02	 tst         r3, #2, 20
  00b70	0a000004	 beq         |$LN9@SetAutoIdl|
  00b74	e59f002c	 ldr         r0, [pc, #0x2C]
  00b78	eb000000	 bl          NKDbgPrintfW
  00b7c	e3a03001	 mov         r3, #1
  00b80	e58d300c	 str         r3, [sp, #0xC]
  00b84	ea000001	 b           |$LN10@SetAutoIdl|
  00b88		 |$LN9@SetAutoIdl|
  00b88	e3a03000	 mov         r3, #0
  00b8c	e58d300c	 str         r3, [sp, #0xC]
  00b90		 |$LN10@SetAutoIdl|

; 563  :     return TRUE;

  00b90	e3a03001	 mov         r3, #1
  00b94	e58d3004	 str         r3, [sp, #4]

; 564  : }

  00b98	e59d0004	 ldr         r0, [sp, #4]
  00b9c	e28dd010	 add         sp, sp, #0x10
  00ba0	e89d6000	 ldmia       sp, {sp, lr}
  00ba4	e12fff1e	 bx          lr
  00ba8		 |$LN14@SetAutoIdl|
  00ba8		 |$LN15@SetAutoIdl|
  00ba8	00000000	 DCD         |??_C@_1CC@DHLFALGK@?$AA?9?$AAS?$AAe?$AAt?$AAA?$AAu?$AAt?$AAo?$AAI?$AAd?$AAl?$AAe?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00bac		 |$LN16@SetAutoIdl|
  00bac	00000000	 DCD         |dpCurSettings|
  00bb0		 |$LN17@SetAutoIdl|
  00bb0	00000000	 DCD         |??_C@_1CG@GODDPDIO@?$AA?$CL?$AAS?$AAe?$AAt?$AAA?$AAu?$AAt?$AAo?$AAI?$AAd?$AAl?$AAe?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00bb4		 |$M46701|

			 ENDP  ; |SetAutoIdle|

	EXPORT	|??_C@_1DE@BMFKMGAF@?$AA?9?$AAG?$AAe?$AAt?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CI?$AA?$CJ?$AA?$DN?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CO@HBJOKJPN@?$AA?$CL?$AAG?$AAe?$AAt?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|GetSerialObject|
	IMPORT	|malloc|

  00028			 AREA	 |.pdata|, PDATA
|$T46717| DCD	|$LN10@GetSerialO|
	DCD	0x40003a04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DE@BMFKMGAF@?$AA?9?$AAG?$AAe?$AAt?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CI?$AA?$CJ?$AA?$DN?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "G", 0x0, "e", 0x0, "t", 0x0, "S", 0x0, "e", 0x0, "r"
	DCB	0x0, "i", 0x0, "a", 0x0, "l", 0x0, "O", 0x0, "b", 0x0, "j"
	DCB	0x0, "e", 0x0, "c", 0x0, "t", 0x0, "(", 0x0, ")", 0x0, "="
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@HBJOKJPN@?$AA?$CL?$AAG?$AAe?$AAt?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "G", 0x0, "e", 0x0, "t", 0x0, "S", 0x0, "e", 0x0, "r"
	DCB	0x0, "i", 0x0, "a", 0x0, "l", 0x0, "O", 0x0, "b", 0x0, "j"
	DCB	0x0, "e", 0x0, "c", 0x0, "t", 0x0, "(", 0x0, "%", 0x0, "d"
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  00bb4			 AREA	 |.text|, CODE, ARM

  00bb4		 |GetSerialObject| PROC

; 1152 : {

  00bb4		 |$LN10@GetSerialO|
  00bb4	e1a0c00d	 mov         r12, sp
  00bb8	e92d0001	 stmdb       sp!, {r0}
  00bbc	e92d5000	 stmdb       sp!, {r12, lr}
  00bc0	e24dd014	 sub         sp, sp, #0x14
  00bc4		 |$M46714|

; 1153 :     PHWOBJ pHWObj;
; 1154 : 
; 1155 :     UNREFERENCED_PARAMETER(index);
; 1156 :     DEBUGMSG(ZONE_FUNCTION, (L"+GetSerialObject(%d)\r\n", index));

  00bc4	e59f30c4	 ldr         r3, [pc, #0xC4]
  00bc8	e5933440	 ldr         r3, [r3, #0x440]
  00bcc	e3130a02	 tst         r3, #2, 20
  00bd0	0a000005	 beq         |$LN4@GetSerialO|
  00bd4	e59d101c	 ldr         r1, [sp, #0x1C]
  00bd8	e59f00b8	 ldr         r0, [pc, #0xB8]
  00bdc	eb000000	 bl          NKDbgPrintfW
  00be0	e3a03001	 mov         r3, #1
  00be4	e58d3008	 str         r3, [sp, #8]
  00be8	ea000001	 b           |$LN5@GetSerialO|
  00bec		 |$LN4@GetSerialO|
  00bec	e3a03000	 mov         r3, #0
  00bf0	e58d3008	 str         r3, [sp, #8]
  00bf4		 |$LN5@GetSerialO|

; 1157 : 
; 1158 :     // Allocate space for the HWOBJ.
; 1159 :     pHWObj = malloc(sizeof(HWOBJ));

  00bf4	e3a0000c	 mov         r0, #0xC
  00bf8	eb000000	 bl          malloc
  00bfc	e58d000c	 str         r0, [sp, #0xC]
  00c00	e59d300c	 ldr         r3, [sp, #0xC]
  00c04	e58d3000	 str         r3, [sp]

; 1160 :     if (pHWObj == NULL) goto cleanUp;

  00c08	e59d3000	 ldr         r3, [sp]
  00c0c	e3530000	 cmp         r3, #0
  00c10	1a000000	 bne         |$LN1@GetSerialO|
  00c14	ea00000a	 b           |$cleanUp$45116|
  00c18		 |$LN1@GetSerialO|

; 1161 : 
; 1162 :     // Fill in the HWObj structure
; 1163 :     pHWObj->BindFlags = THREAD_AT_OPEN;

  00c18	e59d2000	 ldr         r2, [sp]
  00c1c	e3a03002	 mov         r3, #2
  00c20	e5823000	 str         r3, [r2]

; 1164 :     pHWObj->dwIntID = 0;

  00c24	e59d3000	 ldr         r3, [sp]
  00c28	e2832004	 add         r2, r3, #4
  00c2c	e3a03000	 mov         r3, #0
  00c30	e5823000	 str         r3, [r2]

; 1165 :     pHWObj->pFuncTbl = &g_pddVTbl;

  00c34	e59d3000	 ldr         r3, [sp]
  00c38	e2832008	 add         r2, r3, #8
  00c3c	e59f3050	 ldr         r3, [pc, #0x50]
  00c40	e5823000	 str         r3, [r2]
  00c44		 |$cleanUp$45116|

; 1166 : 
; 1167 : cleanUp:
; 1168 :     DEBUGMSG(ZONE_FUNCTION, (L"-GetSerialObject()=0x%x\r\n", pHWObj));

  00c44	e59f3044	 ldr         r3, [pc, #0x44]
  00c48	e5933440	 ldr         r3, [r3, #0x440]
  00c4c	e3130a02	 tst         r3, #2, 20
  00c50	0a000005	 beq         |$LN6@GetSerialO|
  00c54	e59d1000	 ldr         r1, [sp]
  00c58	e59f002c	 ldr         r0, [pc, #0x2C]
  00c5c	eb000000	 bl          NKDbgPrintfW
  00c60	e3a03001	 mov         r3, #1
  00c64	e58d3010	 str         r3, [sp, #0x10]
  00c68	ea000001	 b           |$LN7@GetSerialO|
  00c6c		 |$LN6@GetSerialO|
  00c6c	e3a03000	 mov         r3, #0
  00c70	e58d3010	 str         r3, [sp, #0x10]
  00c74		 |$LN7@GetSerialO|

; 1169 :     return pHWObj;

  00c74	e59d3000	 ldr         r3, [sp]
  00c78	e58d3004	 str         r3, [sp, #4]

; 1170 : }

  00c7c	e59d0004	 ldr         r0, [sp, #4]
  00c80	e28dd014	 add         sp, sp, #0x14
  00c84	e89d6000	 ldmia       sp, {sp, lr}
  00c88	e12fff1e	 bx          lr
  00c8c		 |$LN11@GetSerialO|
  00c8c		 |$LN12@GetSerialO|
  00c8c	00000000	 DCD         |??_C@_1DE@BMFKMGAF@?$AA?9?$AAG?$AAe?$AAt?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CI?$AA?$CJ?$AA?$DN?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  00c90		 |$LN13@GetSerialO|
  00c90	00000000	 DCD         |dpCurSettings|
  00c94		 |$LN14@GetSerialO|
  00c94	00000000	 DCD         |g_pddVTbl|
  00c98		 |$LN15@GetSerialO|
  00c98	00000000	 DCD         |??_C@_1CO@HBJOKJPN@?$AA?$CL?$AAG?$AAe?$AAt?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00c9c		 |$M46715|

			 ENDP  ; |GetSerialObject|

	EXPORT	|??_C@_1BM@MIDMIFLO@?$AA?9?$AAI?$AAS?$AAT?$AA_?$AAR?$AAX?$AAD?$AAM?$AAA?$AA?3?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FK@GIEFHHLM@?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAI?$AAS?$AAT?$AA_?$AAR?$AAx?$AAD?$AAM?$AAA?$AA?3?$AA?5?$AAS?$AAh?$AAo?$AAu?$AAl?$AAd?$AAn?$AA?8?$AAt?$AA?5?$AAg?$AAe?$AAt?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FO@PBHPNCNC@?$AAI?$AAS?$AAT?$AA_?$AAR?$AAx?$AAD?$AAM?$AAA?$AA?3?$AA?5?$AAG?$AAo?$AAt?$AA?5?$AAE?$AAn?$AAd?$AA?5?$AAo?$AAf?$AA?5?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AAI?$AAn?$AAt?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IC@JDKHDJNB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAI?$AAS?$AAT?$AA_?$AAR?$AAx?$AAD?$AAM?$AAA?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAS?$AAi?$AAg?$AAn@| [ DATA ] ; `string'
	EXPORT	|DmaClearStatus|
	EXPORT	|DmaGetStatus|
	EXPORT	|??_C@_1GM@GPONIMLM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAI?$AAS?$AAT?$AA_?$AAR?$AAx?$AAD?$AAM?$AAA?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAe?$AAn?$AAa?$AAb@| [ DATA ] ; `string'
	EXPORT	|GetCurrentThread|
	EXPORT	|IST_RxDMA|
	IMPORT	|DmaInterruptDone|
	IMPORT	|DmaEnableInterrupts|
	IMPORT	|CeSetThreadPriority|

  00030			 AREA	 |.pdata|, PDATA
|$T46739| DCD	|$LN31@IST_RxDMA|
	DCD	0x4000d604

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@MIDMIFLO@?$AA?9?$AAI?$AAS?$AAT?$AA_?$AAR?$AAX?$AAD?$AAM?$AAA?$AA?3?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "I", 0x0, "S", 0x0, "T", 0x0, "_", 0x0, "R", 0x0, "X"
	DCB	0x0, "D", 0x0, "M", 0x0, "A", 0x0, ":", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FK@GIEFHHLM@?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAI?$AAS?$AAT?$AA_?$AAR?$AAx?$AAD?$AAM?$AAA?$AA?3?$AA?5?$AAS?$AAh?$AAo?$AAu?$AAl?$AAd?$AAn?$AA?8?$AAt?$AA?5?$AAg?$AAe?$AAt?$AA?5@| DCB "E"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, ":", 0x0, " "
	DCB	0x0, "I", 0x0, "S", 0x0, "T", 0x0, "_", 0x0, "R", 0x0, "x"
	DCB	0x0, "D", 0x0, "M", 0x0, "A", 0x0, ":", 0x0, " ", 0x0, "S"
	DCB	0x0, "h", 0x0, "o", 0x0, "u", 0x0, "l", 0x0, "d", 0x0, "n"
	DCB	0x0, "'", 0x0, "t", 0x0, " ", 0x0, "g", 0x0, "e", 0x0, "t"
	DCB	0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "h", 0x0, "e"
	DCB	0x0, "r", 0x0, "e", 0x0, "!", 0x0, "!", 0x0, "!", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FO@PBHPNCNC@?$AAI?$AAS?$AAT?$AA_?$AAR?$AAx?$AAD?$AAM?$AAA?$AA?3?$AA?5?$AAG?$AAo?$AAt?$AA?5?$AAE?$AAn?$AAd?$AA?5?$AAo?$AAf?$AA?5?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AAI?$AAn?$AAt?$AA?5@| DCB "I"
	DCB	0x0, "S", 0x0, "T", 0x0, "_", 0x0, "R", 0x0, "x", 0x0, "D"
	DCB	0x0, "M", 0x0, "A", 0x0, ":", 0x0, " ", 0x0, "G", 0x0, "o"
	DCB	0x0, "t", 0x0, " ", 0x0, "E", 0x0, "n", 0x0, "d", 0x0, " "
	DCB	0x0, "o", 0x0, "f", 0x0, " ", 0x0, "b", 0x0, "l", 0x0, "o"
	DCB	0x0, "c", 0x0, "k", 0x0, " ", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, " ", 0x0, "s", 0x0, "t", 0x0, "o", 0x0, "p", 0x0, "p"
	DCB	0x0, "i", 0x0, "n", 0x0, "g", 0x0, " ", 0x0, "D", 0x0, "M"
	DCB	0x0, "A", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IC@JDKHDJNB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAI?$AAS?$AAT?$AA_?$AAR?$AAx?$AAD?$AAM?$AAA?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAS?$AAi?$AAg?$AAn@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "I", 0x0, "S", 0x0, "T", 0x0, "_", 0x0, "R", 0x0, "x"
	DCB	0x0, "D", 0x0, "M", 0x0, "A", 0x0, ":", 0x0, " ", 0x0, "F"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "t", 0x0, "o", 0x0, " ", 0x0, "S", 0x0, "i", 0x0, "g"
	DCB	0x0, "n", 0x0, "a", 0x0, "l", 0x0, " ", 0x0, "D", 0x0, "M"
	DCB	0x0, "A", 0x0, " ", 0x0, "R", 0x0, "X", 0x0, " ", 0x0, "i"
	DCB	0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u"
	DCB	0x0, "p", 0x0, "t", 0x0, " ", 0x0, "c", 0x0, "o", 0x0, "m"
	DCB	0x0, "p", 0x0, "l", 0x0, "e", 0x0, "t", 0x0, "i", 0x0, "o"
	DCB	0x0, "n", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GM@GPONIMLM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAI?$AAS?$AAT?$AA_?$AAR?$AAx?$AAD?$AAM?$AAA?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAe?$AAn?$AAa?$AAb@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "I", 0x0, "S", 0x0, "T", 0x0, "_", 0x0, "R", 0x0, "x"
	DCB	0x0, "D", 0x0, "M", 0x0, "A", 0x0, ":", 0x0, " ", 0x0, "F"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "t", 0x0, "o", 0x0, " ", 0x0, "e", 0x0, "n", 0x0, "a"
	DCB	0x0, "b", 0x0, "l", 0x0, "e", 0x0, " ", 0x0, "D", 0x0, "M"
	DCB	0x0, "A", 0x0, " ", 0x0, "R", 0x0, "X", 0x0, " ", 0x0, "i"
	DCB	0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u"
	DCB	0x0, "p", 0x0, "t", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  00c9c			 AREA	 |.text|, CODE, ARM

  00c9c		 |IST_RxDMA| PROC

; 1179 : {

  00c9c		 |$LN31@IST_RxDMA|
  00c9c	e1a0c00d	 mov         r12, sp
  00ca0	e92d0001	 stmdb       sp!, {r0}
  00ca4	e92d5000	 stmdb       sp!, {r12, lr}
  00ca8	e24dd044	 sub         sp, sp, #0x44
  00cac		 |$M46736|

; 1180 :     UINT32 status;
; 1181 :     UARTPDD *pPdd = (UARTPDD *)pParam;

  00cac	e59d304c	 ldr         r3, [sp, #0x4C]
  00cb0	e58d3004	 str         r3, [sp, #4]

; 1182 : 
; 1183 :     //SetProcPermissions(0xFFFFFFFF);
; 1184 :     CeSetThreadPriority(GetCurrentThread(), 100);

  00cb4	eb000000	 bl          GetCurrentThread
  00cb8	e58d0010	 str         r0, [sp, #0x10]
  00cbc	e3a01064	 mov         r1, #0x64
  00cc0	e59d0010	 ldr         r0, [sp, #0x10]
  00cc4	eb000000	 bl          CeSetThreadPriority

; 1185 : 
; 1186 :     // register dma for interrupts
; 1187 :     if (DmaEnableInterrupts(pPdd->hRxDmaChannel, pPdd->hEventRxIstDma) == FALSE)

  00cc8	e59d3004	 ldr         r3, [sp, #4]
  00ccc	e2833f4a	 add         r3, r3, #0x4A, 30
  00cd0	e5931000	 ldr         r1, [r3]
  00cd4	e59d3004	 ldr         r3, [sp, #4]
  00cd8	e2833f4b	 add         r3, r3, #0x4B, 30
  00cdc	e5930000	 ldr         r0, [r3]
  00ce0	eb000000	 bl          DmaEnableInterrupts
  00ce4	e58d0014	 str         r0, [sp, #0x14]
  00ce8	e59d3014	 ldr         r3, [sp, #0x14]
  00cec	e3530000	 cmp         r3, #0
  00cf0	1a00000b	 bne         |$LN15@IST_RxDMA|

; 1188 :     {
; 1189 :         DEBUGMSG(ZONE_ERROR, (L"ERROR: IST_RxDMA: "
; 1190 :             L"Failed to enable DMA RX interrupt\r\n"
; 1191 :             ));

  00cf4	e59f32e4	 ldr         r3, [pc, #0x2E4]
  00cf8	e5933440	 ldr         r3, [r3, #0x440]
  00cfc	e3130902	 tst         r3, #2, 18
  00d00	0a000004	 beq         |$LN18@IST_RxDMA|
  00d04	e59f02e4	 ldr         r0, [pc, #0x2E4]
  00d08	eb000000	 bl          NKDbgPrintfW
  00d0c	e3a03001	 mov         r3, #1
  00d10	e58d3018	 str         r3, [sp, #0x18]
  00d14	ea000001	 b           |$LN19@IST_RxDMA|
  00d18		 |$LN18@IST_RxDMA|
  00d18	e3a03000	 mov         r3, #0
  00d1c	e58d3018	 str         r3, [sp, #0x18]
  00d20		 |$LN19@IST_RxDMA|

; 1192 :         goto cleanUp;

  00d20	ea00009c	 b           |$cleanUp$45129|
  00d24		 |$LN15@IST_RxDMA|
  00d24		 |$LN28@IST_RxDMA|
  00d24		 |$LN14@IST_RxDMA|

; 1193 :     }
; 1194 :     for(;;)
; 1195 :     {
; 1196 :         if (WaitForSingleObject(pPdd->hEventRxIstDma, INFINITE) == WAIT_OBJECT_0)

  00d24	e3e01000	 mvn         r1, #0
  00d28	e59d3004	 ldr         r3, [sp, #4]
  00d2c	e2833f4a	 add         r3, r3, #0x4A, 30
  00d30	e5930000	 ldr         r0, [r3]
  00d34	eb000000	 bl          WaitForSingleObject
  00d38	e58d001c	 str         r0, [sp, #0x1C]
  00d3c	e59d301c	 ldr         r3, [sp, #0x1C]
  00d40	e3530000	 cmp         r3, #0
  00d44	1a000092	 bne         |$LN12@IST_RxDMA|

; 1197 :         {
; 1198 :             // Check if this thread is to shutdown
; 1199 :             if (pPdd->bExitThread == TRUE) goto cleanUp;

  00d48	e59d3004	 ldr         r3, [sp, #4]
  00d4c	e2833f4e	 add         r3, r3, #0x4E, 30
  00d50	e5933000	 ldr         r3, [r3]
  00d54	e3530001	 cmp         r3, #1
  00d58	1a000000	 bne         |$LN11@IST_RxDMA|
  00d5c	ea00008d	 b           |$cleanUp$45129|
  00d60		 |$LN11@IST_RxDMA|

; 1200 :             // get cause of wake-up
; 1201 :             status = DmaGetStatus(pPdd->RxDmaInfo);

  00d60	e59d3004	 ldr         r3, [sp, #4]
  00d64	e2833f49	 add         r3, r3, #0x49, 30
  00d68	e5930000	 ldr         r0, [r3]
  00d6c	eb000000	 bl          DmaGetStatus
  00d70	e58d0020	 str         r0, [sp, #0x20]
  00d74	e59d3020	 ldr         r3, [sp, #0x20]
  00d78	e58d3000	 str         r3, [sp]

; 1202 :             if (status != 0)

  00d7c	e59d3000	 ldr         r3, [sp]
  00d80	e3530000	 cmp         r3, #0
  00d84	0a000082	 beq         |$LN10@IST_RxDMA|

; 1203 :             {
; 1204 :                 if (status & (DMA_CICR_BLOCK_IE | DMA_CICR_FRAME_IE))

  00d88	e59d3000	 ldr         r3, [sp]
  00d8c	e3130028	 tst         r3, #0x28
  00d90	0a00007f	 beq         |$LN9@IST_RxDMA|

; 1205 :                 {
; 1206 :                     // clear dma interrupts
; 1207 :                     DmaClearStatus(pPdd->RxDmaInfo, status);

  00d94	e59d1000	 ldr         r1, [sp]
  00d98	e59d3004	 ldr         r3, [sp, #4]
  00d9c	e2833f49	 add         r3, r3, #0x49, 30
  00da0	e5930000	 ldr         r0, [r3]
  00da4	eb000000	 bl          DmaClearStatus

; 1208 :                     if (DmaInterruptDone(pPdd->hRxDmaChannel) == FALSE)

  00da8	e59d3004	 ldr         r3, [sp, #4]
  00dac	e2833f4b	 add         r3, r3, #0x4B, 30
  00db0	e5930000	 ldr         r0, [r3]
  00db4	eb000000	 bl          DmaInterruptDone
  00db8	e58d0024	 str         r0, [sp, #0x24]
  00dbc	e59d3024	 ldr         r3, [sp, #0x24]
  00dc0	e3530000	 cmp         r3, #0
  00dc4	1a00000b	 bne         |$LN8@IST_RxDMA|

; 1209 :                     {
; 1210 :                         DEBUGMSG(ZONE_ERROR, (L"ERROR: IST_RxDMA: "
; 1211 :                             L"Failed to Signal DMA RX interrupt completion\r\n"
; 1212 :                             ));

  00dc8	e59f3210	 ldr         r3, [pc, #0x210]
  00dcc	e5933440	 ldr         r3, [r3, #0x440]
  00dd0	e3130902	 tst         r3, #2, 18
  00dd4	0a000004	 beq         |$LN20@IST_RxDMA|
  00dd8	e59f020c	 ldr         r0, [pc, #0x20C]
  00ddc	eb000000	 bl          NKDbgPrintfW
  00de0	e3a03001	 mov         r3, #1
  00de4	e58d3028	 str         r3, [sp, #0x28]
  00de8	ea000001	 b           |$LN21@IST_RxDMA|
  00dec		 |$LN20@IST_RxDMA|
  00dec	e3a03000	 mov         r3, #0
  00df0	e58d3028	 str         r3, [sp, #0x28]
  00df4		 |$LN21@IST_RxDMA|

; 1213 :                         goto cleanUp;

  00df4	ea000067	 b           |$cleanUp$45129|
  00df8		 |$LN8@IST_RxDMA|

; 1214 :                     }
; 1215 : 
; 1216 :                     if ((status & (DMA_CICR_BLOCK_IE | DMA_CICR_FRAME_IE)) == 0)

  00df8	e59d3000	 ldr         r3, [sp]
  00dfc	e3130028	 tst         r3, #0x28
  00e00	1a000000	 bne         |$LN7@IST_RxDMA|

; 1217 :                     {
; 1218 :                         continue;

  00e04	eaffffc6	 b           |$LN14@IST_RxDMA|
  00e08		 |$LN7@IST_RxDMA|

; 1219 :                     }
; 1220 : 
; 1221 :                     EnterCriticalSection(&pPdd->RxUpdatePtrCS);

  00e08	e59d3004	 ldr         r3, [sp, #4]
  00e0c	e28300c0	 add         r0, r3, #0xC0
  00e10	eb000000	 bl          EnterCriticalSection

; 1222 : 
; 1223 :                     if (status & DMA_CICR_BLOCK_IE )

  00e14	e59d3000	 ldr         r3, [sp]
  00e18	e3130020	 tst         r3, #0x20
  00e1c	0a00003a	 beq         |$LN6@IST_RxDMA|

; 1224 :                     {
; 1225 :                         SetAutoIdle(pPdd, FALSE);

  00e20	e3a01000	 mov         r1, #0
  00e24	e59d0004	 ldr         r0, [sp, #4]
  00e28	eb000000	 bl          SetAutoIdle

; 1226 : 
; 1227 :                         if (IsDmaEnable(pPdd->RxDmaInfo))

  00e2c	e59d3004	 ldr         r3, [sp, #4]
  00e30	e2833f49	 add         r3, r3, #0x49, 30
  00e34	e5930000	 ldr         r0, [r3]
  00e38	eb000000	 bl          IsDmaEnable
  00e3c	e58d002c	 str         r0, [sp, #0x2C]
  00e40	e59d302c	 ldr         r3, [sp, #0x2C]
  00e44	e3530000	 cmp         r3, #0
  00e48	0a00000e	 beq         |$LN5@IST_RxDMA|

; 1228 :                         {
; 1229 :                             DEBUGMSG(ZONE_FUNCTION, (L"IST_RxDMA: Got End of block Int stopping DMA\r\n"));

  00e4c	e59f318c	 ldr         r3, [pc, #0x18C]
  00e50	e5933440	 ldr         r3, [r3, #0x440]
  00e54	e3130a02	 tst         r3, #2, 20
  00e58	0a000004	 beq         |$LN22@IST_RxDMA|
  00e5c	e59f0184	 ldr         r0, [pc, #0x184]
  00e60	eb000000	 bl          NKDbgPrintfW
  00e64	e3a03001	 mov         r3, #1
  00e68	e58d3030	 str         r3, [sp, #0x30]
  00e6c	ea000001	 b           |$LN23@IST_RxDMA|
  00e70		 |$LN22@IST_RxDMA|
  00e70	e3a03000	 mov         r3, #0
  00e74	e58d3030	 str         r3, [sp, #0x30]
  00e78		 |$LN23@IST_RxDMA|

; 1230 :                             DmaStop(pPdd->RxDmaInfo);

  00e78	e59d3004	 ldr         r3, [sp, #4]
  00e7c	e2833f49	 add         r3, r3, #0x49, 30
  00e80	e5930000	 ldr         r0, [r3]
  00e84	eb000000	 bl          DmaStop
  00e88		 |$LN5@IST_RxDMA|

; 1231 :                         }
; 1232 : 
; 1233 :                         if((UpdateDMARxPointer(pPdd, FALSE, 0) == TRUE) && (pPdd->open == TRUE))

  00e88	e3a02000	 mov         r2, #0
  00e8c	e3a01000	 mov         r1, #0
  00e90	e59d0004	 ldr         r0, [sp, #4]
  00e94	eb000000	 bl          UpdateDMARxPointer
  00e98	e58d0034	 str         r0, [sp, #0x34]
  00e9c	e59d3034	 ldr         r3, [sp, #0x34]
  00ea0	e3530001	 cmp         r3, #1
  00ea4	1a00000c	 bne         |$LN4@IST_RxDMA|
  00ea8	e59d3004	 ldr         r3, [sp, #4]
  00eac	e2833054	 add         r3, r3, #0x54
  00eb0	e5933000	 ldr         r3, [r3]
  00eb4	e3530001	 cmp         r3, #1
  00eb8	1a000007	 bne         |$LN4@IST_RxDMA|

; 1234 :                         {
; 1235 :                             SetAutoIdle(pPdd, TRUE);

  00ebc	e3a01001	 mov         r1, #1
  00ec0	e59d0004	 ldr         r0, [sp, #4]
  00ec4	eb000000	 bl          SetAutoIdle

; 1236 :                             DmaStart(pPdd->RxDmaInfo);

  00ec8	e59d3004	 ldr         r3, [sp, #4]
  00ecc	e2833f49	 add         r3, r3, #0x49, 30
  00ed0	e5930000	 ldr         r0, [r3]
  00ed4	eb000000	 bl          DmaStart

; 1237 :                             DEBUGMSG(TESTENABLE, (L"IST_RxDMA: End of block DMA Start\r\n"));
; 1238 :                         }
; 1239 :                         else

  00ed8	ea00000a	 b           |$LN3@IST_RxDMA|
  00edc		 |$LN4@IST_RxDMA|

; 1240 :                         {
; 1241 :                             DEBUGMSG(ZONE_ERROR, (L"Error: IST_RxDMA: Shouldn't get to here!!!\r\n"));

  00edc	e59f30fc	 ldr         r3, [pc, #0xFC]
  00ee0	e5933440	 ldr         r3, [r3, #0x440]
  00ee4	e3130902	 tst         r3, #2, 18
  00ee8	0a000004	 beq         |$LN24@IST_RxDMA|
  00eec	e59f00f0	 ldr         r0, [pc, #0xF0]
  00ef0	eb000000	 bl          NKDbgPrintfW
  00ef4	e3a03001	 mov         r3, #1
  00ef8	e58d3038	 str         r3, [sp, #0x38]
  00efc	ea000001	 b           |$LN25@IST_RxDMA|
  00f00		 |$LN24@IST_RxDMA|
  00f00	e3a03000	 mov         r3, #0
  00f04	e58d3038	 str         r3, [sp, #0x38]
  00f08		 |$LN25@IST_RxDMA|
  00f08		 |$LN3@IST_RxDMA|

; 1242 :                         }
; 1243 :                     }
; 1244 :                     else

  00f08	ea000014	 b           |$LN2@IST_RxDMA|
  00f0c		 |$LN6@IST_RxDMA|

; 1245 :                     {
; 1246 :                         DWORD   dwLastDMAWrite = (DWORD)DmaGetLastWritePos(pPdd->RxDmaInfo);

  00f0c	e59d3004	 ldr         r3, [sp, #4]
  00f10	e2833f49	 add         r3, r3, #0x49, 30
  00f14	e5930000	 ldr         r0, [r3]
  00f18	eb000000	 bl          DmaGetLastWritePos
  00f1c	e58d003c	 str         r0, [sp, #0x3C]
  00f20	e59d303c	 ldr         r3, [sp, #0x3C]
  00f24	e58d3008	 str         r3, [sp, #8]

; 1247 : 
; 1248 :                         if (dwLastDMAWrite < ((DWORD)pPdd->pRxDmaBuffer + pPdd->RxDmaBufferSize))

  00f28	e59d3004	 ldr         r3, [sp, #4]
  00f2c	e2832f45	 add         r2, r3, #0x45, 30
  00f30	e59d3004	 ldr         r3, [sp, #4]
  00f34	e2833e11	 add         r3, r3, #0x11, 28
  00f38	e5922000	 ldr         r2, [r2]
  00f3c	e5933000	 ldr         r3, [r3]
  00f40	e0822003	 add         r2, r2, r3
  00f44	e59d3008	 ldr         r3, [sp, #8]
  00f48	e1530002	 cmp         r3, r2
  00f4c	2a000003	 bcs         |$LN1@IST_RxDMA|

; 1249 :                         {
; 1250 :                             pPdd->pRxDMALastWrite = (VOID*)dwLastDMAWrite;

  00f50	e59d3004	 ldr         r3, [sp, #4]
  00f54	e2832f53	 add         r2, r3, #0x53, 30
  00f58	e59d3008	 ldr         r3, [sp, #8]
  00f5c	e5823000	 str         r3, [r2]
  00f60		 |$LN1@IST_RxDMA|
  00f60		 |$LN2@IST_RxDMA|

; 1251 :                         }
; 1252 :                     }
; 1253 : 
; 1254 :                     pPdd->bRxDMASignaled = 1;

  00f60	e59d3004	 ldr         r3, [sp, #4]
  00f64	e2832f51	 add         r2, r3, #0x51, 30
  00f68	e3a03001	 mov         r3, #1
  00f6c	e5823000	 str         r3, [r2]

; 1255 :                     SetEvent( ((PHW_INDEP_INFO)pPdd->pMdd)->hSerialEvent);

  00f70	e59d3004	 ldr         r3, [sp, #4]
  00f74	e2833050	 add         r3, r3, #0x50
  00f78	e5933000	 ldr         r3, [r3]
  00f7c	e2833030	 add         r3, r3, #0x30
  00f80	e5930000	 ldr         r0, [r3]
  00f84	eb000000	 bl          SetEvent

; 1256 : 
; 1257 :                     LeaveCriticalSection(&pPdd->RxUpdatePtrCS);

  00f88	e59d3004	 ldr         r3, [sp, #4]
  00f8c	e28300c0	 add         r0, r3, #0xC0
  00f90	eb000000	 bl          LeaveCriticalSection
  00f94		 |$LN9@IST_RxDMA|
  00f94		 |$LN10@IST_RxDMA|
  00f94		 |$LN12@IST_RxDMA|

; 1258 :                 }
; 1259 :             }
; 1260 :         }
; 1261 :     }

  00f94	eaffff62	 b           |$LN28@IST_RxDMA|
  00f98		 |$cleanUp$45129|

; 1262 : 
; 1263 : cleanUp:
; 1264 :     DEBUGMSG(ZONE_FUNCTION, (L"-IST_RXDMA:\r\n"));

  00f98	e59f3040	 ldr         r3, [pc, #0x40]
  00f9c	e5933440	 ldr         r3, [r3, #0x440]
  00fa0	e3130a02	 tst         r3, #2, 20
  00fa4	0a000004	 beq         |$LN26@IST_RxDMA|
  00fa8	e59f002c	 ldr         r0, [pc, #0x2C]
  00fac	eb000000	 bl          NKDbgPrintfW
  00fb0	e3a03001	 mov         r3, #1
  00fb4	e58d3040	 str         r3, [sp, #0x40]
  00fb8	ea000001	 b           |$LN27@IST_RxDMA|
  00fbc		 |$LN26@IST_RxDMA|
  00fbc	e3a03000	 mov         r3, #0
  00fc0	e58d3040	 str         r3, [sp, #0x40]
  00fc4		 |$LN27@IST_RxDMA|

; 1265 :     return 1;

  00fc4	e3a03001	 mov         r3, #1
  00fc8	e58d300c	 str         r3, [sp, #0xC]

; 1266 : }

  00fcc	e59d000c	 ldr         r0, [sp, #0xC]
  00fd0	e28dd044	 add         sp, sp, #0x44
  00fd4	e89d6000	 ldmia       sp, {sp, lr}
  00fd8	e12fff1e	 bx          lr
  00fdc		 |$LN32@IST_RxDMA|
  00fdc		 |$LN33@IST_RxDMA|
  00fdc	00000000	 DCD         |??_C@_1BM@MIDMIFLO@?$AA?9?$AAI?$AAS?$AAT?$AA_?$AAR?$AAX?$AAD?$AAM?$AAA?$AA?3?$AA?$AN?$AA?6?$AA?$AA@|
  00fe0		 |$LN34@IST_RxDMA|
  00fe0	00000000	 DCD         |dpCurSettings|
  00fe4		 |$LN35@IST_RxDMA|
  00fe4	00000000	 DCD         |??_C@_1FK@GIEFHHLM@?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAI?$AAS?$AAT?$AA_?$AAR?$AAx?$AAD?$AAM?$AAA?$AA?3?$AA?5?$AAS?$AAh?$AAo?$AAu?$AAl?$AAd?$AAn?$AA?8?$AAt?$AA?5?$AAg?$AAe?$AAt?$AA?5@|
  00fe8		 |$LN36@IST_RxDMA|
  00fe8	00000000	 DCD         |??_C@_1FO@PBHPNCNC@?$AAI?$AAS?$AAT?$AA_?$AAR?$AAx?$AAD?$AAM?$AAA?$AA?3?$AA?5?$AAG?$AAo?$AAt?$AA?5?$AAE?$AAn?$AAd?$AA?5?$AAo?$AAf?$AA?5?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AAI?$AAn?$AAt?$AA?5@|
  00fec		 |$LN37@IST_RxDMA|
  00fec	00000000	 DCD         |??_C@_1IC@JDKHDJNB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAI?$AAS?$AAT?$AA_?$AAR?$AAx?$AAD?$AAM?$AAA?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAS?$AAi?$AAg?$AAn@|
  00ff0		 |$LN38@IST_RxDMA|
  00ff0	00000000	 DCD         |??_C@_1GM@GPONIMLM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAI?$AAS?$AAT?$AA_?$AAR?$AAx?$AAD?$AAM?$AAA?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAe?$AAn?$AAa?$AAb@|
  00ff4		 |$M46737|

			 ENDP  ; |IST_RxDMA|

; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T46752| DCD	|$LN5@GetCurrent|
	DCD	0x40000601
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |GetCurrentThread| PROC

; 351  : _inline HANDLE GetCurrentThread(void) {

  00000		 |$LN5@GetCurrent|
  00000	e24dd004	 sub         sp, sp, #4
  00004		 |$M46749|

; 352  : 	return ((HANDLE)(SH_CURTHREAD+SYS_HANDLE_BASE));

  00004	e3a03041	 mov         r3, #0x41
  00008	e58d3000	 str         r3, [sp]

; 353  : }

  0000c	e59d0000	 ldr         r0, [sp]
  00010	e28dd004	 add         sp, sp, #4
  00014	e12fff1e	 bx          lr
  00018		 |$M46750|

			 ENDP  ; |GetCurrentThread|

; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\inc\omap_sdma_utility.h

  00000			 AREA	 |.pdata|, PDATA
|$T46760| DCD	|$LN5@DmaGetStat|
	DCD	0x40000e04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DmaGetStatus| PROC

; 559  : {

  00000		 |$LN5@DmaGetStat|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M46757|

; 560  :     return INREG32(&pDataInfo->pDmaLcReg->CSR);

  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e2833014	 add         r3, r3, #0x14
  00018	e5933000	 ldr         r3, [r3]
  0001c	e283300c	 add         r3, r3, #0xC
  00020	e5933000	 ldr         r3, [r3]
  00024	e58d3000	 str         r3, [sp]

; 561  : }

  00028	e59d0000	 ldr         r0, [sp]
  0002c	e28dd004	 add         sp, sp, #4
  00030	e89d6000	 ldmia       sp, {sp, lr}
  00034	e12fff1e	 bx          lr
  00038		 |$M46758|

			 ENDP  ; |DmaGetStatus|


  00000			 AREA	 |.pdata|, PDATA
|$T46767| DCD	|$LN5@DmaClearSt|
	DCD	0x40000b03
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DmaClearStatus| PROC

; 575  : {

  00000		 |$LN5@DmaClearSt|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M46764|

; 576  :     OUTREG32(&pDataInfo->pDmaLcReg->CSR, dwStatus);

  0000c	e59d3008	 ldr         r3, [sp, #8]
  00010	e2833014	 add         r3, r3, #0x14
  00014	e5933000	 ldr         r3, [r3]
  00018	e283200c	 add         r2, r3, #0xC
  0001c	e59d300c	 ldr         r3, [sp, #0xC]
  00020	e5823000	 str         r3, [r2]

; 577  : }

  00024	e89d6000	 ldmia       sp, {sp, lr}
  00028	e12fff1e	 bx          lr
  0002c		 |$M46765|

			 ENDP  ; |DmaClearStatus|

	EXPORT	|??_C@_1DC@JGFCNLHE@?$AA?9?$AAH?$AAW?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AAp?$AAP?$AAd?$AAd?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EG@OEGIILDN@?$AAH?$AAW?$AAI?$AAn?$AAi?$AAt?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$CB?$AA?$CB?$AA?5?$AAC?$AAa?$AAl?$AAl?$AAi?$AAn?$AAg?$AA?5?$AAH?$AAW?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EG@ICLGMIEH@?$AAH?$AAW?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAs?$AAu?$AAc?$AAc?$AAe?$AAe?$AAd?$AAe?$AAd@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EK@FHJCOLEM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAH?$AAW?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAe?$AAv?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GE@PPGCIJJA@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAH?$AAW?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAo?$AAb?$AAt?$AAa?$AAi?$AAn?$AA?5?$AAS?$AAY?$AAS@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GA@FAAEJOHA@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAH?$AAW?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EE@FMEIFNEG@?$AAO?$AAM?$AAA?$AAP?$AA3?$AA5?$AAX?$AAX?$AA?5?$AAR?$AAX?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAd@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HK@BBLDLPBP@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAH?$AAW?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAi?$AAn?$AAg@| [ DATA ] ; `string'
	EXPORT	|??_C@_1MA@JDGKAMEC@?$AAH?$AAW?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAR?$AAx?$AAF?$AAi?$AAf?$AAo?$AAT?$AAr?$AAi?$AAg?$AAg?$AAe?$AAr?$AAL?$AAe?$AAv?$AAe?$AAl?$AA?5?$AAm?$AAu?$AAs?$AAt?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HG@BHIHOLB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAH?$AAW?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAR?$AAx?$AAD?$AAm?$AAa?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AAS?$AAi?$AAz?$AAe?$AA?5?$AAm@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FG@KHBPHCHG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAH?$AAW?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAC?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAD@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DE@CGCFDINI@?$AAH?$AAW?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAR?$AAx?$AAD?$AAm?$AAa?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EC@EEIOMCNH@?$AAO?$AAM?$AAA?$AAP?$AA3?$AA5?$AAX?$AAX?$AA?5?$AAT?$AAX?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAi?$AAn?$AAi?$AAt?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAe?$AAd?$AA?$AN?$AA?6@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FE@MELLBIFK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAe?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAT?$AAX?$AA?5?$AAi?$AAn@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EG@GOJKEHDB@?$AAO?$AAM?$AAA?$AAP?$AA3?$AA5?$AAX?$AAX?$AA?5?$AAT?$AAX?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAd@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GO@JHKBGJGP@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAH?$AAW?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAi?$AAn?$AAg@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HG@CKJGMIKG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAH?$AAW?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAT?$AAx?$AAD?$AAm?$AAa?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AAS?$AAi?$AAz?$AAe?$AA?5?$AAm@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FG@KKABACDB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAH?$AAW?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAC?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAD@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DE@PLCFDKBA@?$AAO?$AAM?$AAA?$AAP?$AA3?$AA5?$AAX?$AAX?$AA?5?$AAT?$AAX?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAe?$AAn?$AAa?$AAb?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DE@OPOFMPCE@?$AAH?$AAW?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAT?$AAx?$AAD?$AAm?$AAa?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FK@EBCJFPMH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAH?$AAW?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5?$AAg?$AAp@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GM@KEAJOIJP@?$AAH?$AAW?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAE?$AAx?$AAt?$AAe?$AAr?$AAn?$AAa?$AAl?$AA?5?$AAt?$AAr?$AAa?$AAn?$AAs?$AAc?$AAe?$AAi?$AAv?$AAe?$AAr?$AA?5?$AAc?$AAo?$AAn@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GG@EBBCDMFK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAH?$AAW?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAm?$AAa?$AAp?$AA?5?$AAp?$AAh?$AAy?$AAs?$AAi?$AAc@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DM@CGNHFLML@?$AAH?$AAW?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAM?$AAm?$AAM?$AAa?$AAp?$AAI?$AAo?$AAS?$AAp?$AAa?$AAc?$AAe?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FA@IMOKAIMA@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAH?$AAW?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAr?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IE@GEGDCGKO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAH?$AAW?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAr?$AAe?$AAt?$AAr?$AAi?$AAe?$AAv@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FO@HLLDLLCK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAH?$AAW?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5?$AAp?$AAa?$AAr?$AAe?$AAn@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HA@GDAKBEMI@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAH?$AAW?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAd?$AAr?$AAi?$AAv?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DK@GEEEGFBF@?$AA?$CL?$AAH?$AAW?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CF?$AAs?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|InitializeCriticalSection|
	IMPORT	|KernelIoControl|
	IMPORT	|CreateThread|
	IMPORT	|FreePhysMem|
	IMPORT	|CreateEventW|
	IMPORT	|AllocPhysMem|
	IMPORT	|LocalFree|
	IMPORT	|DmaAllocateChannel|
	IMPORT	|GPIOOpen|
	IMPORT	|MmMapIoSpace|
	IMPORT	|GetIrqByDevice|
	IMPORT	|GetAddressByDevice|
	IMPORT	|RequestDevicePads|
	IMPORT	|SOCGetUartDeviceByIndex|
	IMPORT	|CreateBusAccessHandle|
	IMPORT	|GetDeviceRegistryParams|
	IMPORT	|memset|
	IMPORT	|LocalAlloc|

  00038			 AREA	 |.pdata|, PDATA
|$T46835| DCD	|$LN84@HWInit|
	DCD	0x40039c04
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\serial\uart\pdd.c

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DC@JGFCNLHE@?$AA?9?$AAH?$AAW?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AAp?$AAP?$AAd?$AAd?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "H", 0x0, "W", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t"
	DCB	0x0, "(", 0x0, "p", 0x0, "P", 0x0, "d", 0x0, "d", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EG@OEGIILDN@?$AAH?$AAW?$AAI?$AAn?$AAi?$AAt?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$CB?$AA?$CB?$AA?5?$AAC?$AAa?$AAl?$AAl?$AAi?$AAn?$AAg?$AA?5?$AAH?$AAW?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt@| DCB "H"
	DCB	0x0, "W", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, " "
	DCB	0x0, "F", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, "!", 0x0, "!", 0x0, " ", 0x0, "C", 0x0, "a", 0x0, "l"
	DCB	0x0, "l", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, " ", 0x0, "H"
	DCB	0x0, "W", 0x0, "D", 0x0, "e", 0x0, "i", 0x0, "n", 0x0, "i"
	DCB	0x0, "t", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EG@ICLGMIEH@?$AAH?$AAW?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAs?$AAu?$AAc?$AAc?$AAe?$AAe?$AAd?$AAe?$AAd@| DCB "H"
	DCB	0x0, "W", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, ":"
	DCB	0x0, " ", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i"
	DCB	0x0, "a", 0x0, "l", 0x0, "i", 0x0, "z", 0x0, "a", 0x0, "t"
	DCB	0x0, "i", 0x0, "o", 0x0, "n", 0x0, " ", 0x0, "s", 0x0, "u"
	DCB	0x0, "c", 0x0, "c", 0x0, "e", 0x0, "e", 0x0, "d", 0x0, "e"
	DCB	0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EK@FHJCOLEM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAH?$AAW?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAe?$AAv?$AAe@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "H", 0x0, "W", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t"
	DCB	0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a", 0x0, "i", 0x0, "l"
	DCB	0x0, "e", 0x0, "d", 0x0, " ", 0x0, "c", 0x0, "r", 0x0, "e"
	DCB	0x0, "a", 0x0, "t", 0x0, "e", 0x0, " ", 0x0, "e", 0x0, "v"
	DCB	0x0, "e", 0x0, "n", 0x0, "t", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GE@PPGCIJJA@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAH?$AAW?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAo?$AAb?$AAt?$AAa?$AAi?$AAn?$AA?5?$AAS?$AAY?$AAS@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "H", 0x0, "W", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t"
	DCB	0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a", 0x0, "i", 0x0, "l"
	DCB	0x0, "e", 0x0, "d", 0x0, " ", 0x0, "o", 0x0, "b", 0x0, "t"
	DCB	0x0, "a", 0x0, "i", 0x0, "n", 0x0, " ", 0x0, "S", 0x0, "Y"
	DCB	0x0, "S", 0x0, "I", 0x0, "N", 0x0, "T", 0x0, "R", 0x0, " "
	DCB	0x0, "f", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "I", 0x0, "R"
	DCB	0x0, "Q", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GA@FAAEJOHA@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAH?$AAW?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "H", 0x0, "W", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t"
	DCB	0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a", 0x0, "i", 0x0, "l"
	DCB	0x0, "e", 0x0, "d", 0x0, " ", 0x0, "t", 0x0, "o", 0x0, " "
	DCB	0x0, "c", 0x0, "r", 0x0, "e", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, " ", 0x0, "D", 0x0, "M", 0x0, "A", 0x0, " ", 0x0, "R"
	DCB	0x0, "X", 0x0, " ", 0x0, "t", 0x0, "h", 0x0, "r", 0x0, "e"
	DCB	0x0, "a", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EE@FMEIFNEG@?$AAO?$AAM?$AAA?$AAP?$AA3?$AA5?$AAX?$AAX?$AA?5?$AAR?$AAX?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAd@| DCB "O"
	DCB	0x0, "M", 0x0, "A", 0x0, "P", 0x0, "3", 0x0, "5", 0x0, "X"
	DCB	0x0, "X", 0x0, " ", 0x0, "R", 0x0, "X", 0x0, " ", 0x0, "D"
	DCB	0x0, "M", 0x0, "A", 0x0, " ", 0x0, "b", 0x0, "u", 0x0, "f"
	DCB	0x0, "f", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, "a", 0x0, "l"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, "d", 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HK@BBLDLPBP@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAH?$AAW?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAi?$AAn?$AAg@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "H", 0x0, "W", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t"
	DCB	0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a", 0x0, "i", 0x0, "l"
	DCB	0x0, "e", 0x0, "d", 0x0, " ", 0x0, "a", 0x0, "l", 0x0, "l"
	DCB	0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "i", 0x0, "n"
	DCB	0x0, "g", 0x0, " ", 0x0, "t", 0x0, "r", 0x0, "a", 0x0, "n"
	DCB	0x0, "s", 0x0, "f", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, "b"
	DCB	0x0, "u", 0x0, "f", 0x0, "f", 0x0, "e", 0x0, "r", 0x0, " "
	DCB	0x0, "(", 0x0, "s", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, " "
	DCB	0x0, "%", 0x0, "u", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1MA@JDGKAMEC@?$AAH?$AAW?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAR?$AAx?$AAF?$AAi?$AAf?$AAo?$AAT?$AAr?$AAi?$AAg?$AAg?$AAe?$AAr?$AAL?$AAe?$AAv?$AAe?$AAl?$AA?5?$AAm?$AAu?$AAs?$AAt?$AA?5@| DCB "H"
	DCB	0x0, "W", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, ":"
	DCB	0x0, " ", 0x0, "R", 0x0, "x", 0x0, "F", 0x0, "i", 0x0, "f"
	DCB	0x0, "o", 0x0, "T", 0x0, "r", 0x0, "i", 0x0, "g", 0x0, "g"
	DCB	0x0, "e", 0x0, "r", 0x0, "L", 0x0, "e", 0x0, "v", 0x0, "e"
	DCB	0x0, "l", 0x0, " ", 0x0, "m", 0x0, "u", 0x0, "s", 0x0, "t"
	DCB	0x0, " ", 0x0, "b", 0x0, "e", 0x0, " ", 0x0, "l", 0x0, "e"
	DCB	0x0, "s", 0x0, "s", 0x0, " ", 0x0, "t", 0x0, "h", 0x0, "e"
	DCB	0x0, "n", 0x0, " ", 0x0, "F", 0x0, "I", 0x0, "F", 0x0, "O"
	DCB	0x0, " ", 0x0, "s", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, ".", 0x0, " ", 0x0, "R", 0x0, "e"
	DCB	0x0, "s", 0x0, "e", 0x0, "t", 0x0, " ", 0x0, "t", 0x0, "o"
	DCB	0x0, " ", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "a", 0x0, "u"
	DCB	0x0, "l", 0x0, "t", 0x0, " ", 0x0, "t", 0x0, "r", 0x0, "i"
	DCB	0x0, "g", 0x0, "g", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, "l"
	DCB	0x0, "e", 0x0, "v", 0x0, "e", 0x0, "l", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, ".", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HG@BHIHOLB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAH?$AAW?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAR?$AAx?$AAD?$AAm?$AAa?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AAS?$AAi?$AAz?$AAe?$AA?5?$AAm@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "H", 0x0, "W", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t"
	DCB	0x0, ":", 0x0, " ", 0x0, "R", 0x0, "x", 0x0, "D", 0x0, "m"
	DCB	0x0, "a", 0x0, "B", 0x0, "u", 0x0, "f", 0x0, "f", 0x0, "e"
	DCB	0x0, "r", 0x0, "S", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, " "
	DCB	0x0, "m", 0x0, "u", 0x0, "s", 0x0, "t", 0x0, " ", 0x0, "b"
	DCB	0x0, "e", 0x0, " ", 0x0, "a", 0x0, "t", 0x0, " ", 0x0, "l"
	DCB	0x0, "e", 0x0, "a", 0x0, "s", 0x0, "t", 0x0, " ", 0x0, "%"
	DCB	0x0, "u", 0x0, " ", 0x0, "b", 0x0, "y", 0x0, "t", 0x0, "e"
	DCB	0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FG@KHBPHCHG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAH?$AAW?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAC?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAD@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "H", 0x0, "W", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t"
	DCB	0x0, ":", 0x0, " ", 0x0, "C", 0x0, "a", 0x0, "n", 0x0, "n"
	DCB	0x0, "o", 0x0, "t", 0x0, " ", 0x0, "a", 0x0, "l", 0x0, "l"
	DCB	0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, " "
	DCB	0x0, "D", 0x0, "M", 0x0, "A", 0x0, " ", 0x0, "o", 0x0, "n"
	DCB	0x0, " ", 0x0, "R", 0x0, "X", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DE@CGCFDINI@?$AAH?$AAW?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAR?$AAx?$AAD?$AAm?$AAa?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?6?$AA?$AA@| DCB "H"
	DCB	0x0, "W", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, ":"
	DCB	0x0, " ", 0x0, "R", 0x0, "x", 0x0, "D", 0x0, "m", 0x0, "a"
	DCB	0x0, "R", 0x0, "e", 0x0, "q", 0x0, "u", 0x0, "e", 0x0, "s"
	DCB	0x0, "t", 0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EC@EEIOMCNH@?$AAO?$AAM?$AAA?$AAP?$AA3?$AA5?$AAX?$AAX?$AA?5?$AAT?$AAX?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAi?$AAn?$AAi?$AAt?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAe?$AAd?$AA?$AN?$AA?6@| DCB "O"
	DCB	0x0, "M", 0x0, "A", 0x0, "P", 0x0, "3", 0x0, "5", 0x0, "X"
	DCB	0x0, "X", 0x0, " ", 0x0, "T", 0x0, "X", 0x0, " ", 0x0, "D"
	DCB	0x0, "M", 0x0, "A", 0x0, " ", 0x0, "i", 0x0, "n", 0x0, "i"
	DCB	0x0, "t", 0x0, " ", 0x0, "c", 0x0, "o", 0x0, "m", 0x0, "p"
	DCB	0x0, "l", 0x0, "e", 0x0, "t", 0x0, "e", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FE@MELLBIFK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAe?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAT?$AAX?$AA?5?$AAi?$AAn@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, "F"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "t", 0x0, "o", 0x0, " ", 0x0, "e", 0x0, "n", 0x0, "a"
	DCB	0x0, "b", 0x0, "l", 0x0, "e", 0x0, " ", 0x0, "D", 0x0, "M"
	DCB	0x0, "A", 0x0, " ", 0x0, "T", 0x0, "X", 0x0, " ", 0x0, "i"
	DCB	0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u"
	DCB	0x0, "p", 0x0, "t", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EG@GOJKEHDB@?$AAO?$AAM?$AAA?$AAP?$AA3?$AA5?$AAX?$AAX?$AA?5?$AAT?$AAX?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAd@| DCB "O"
	DCB	0x0, "M", 0x0, "A", 0x0, "P", 0x0, "3", 0x0, "5", 0x0, "X"
	DCB	0x0, "X", 0x0, " ", 0x0, "T", 0x0, "X", 0x0, " ", 0x0, "D"
	DCB	0x0, "M", 0x0, "A", 0x0, " ", 0x0, "b", 0x0, "u", 0x0, "f"
	DCB	0x0, "f", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, "a", 0x0, "l"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GO@JHKBGJGP@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAH?$AAW?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAi?$AAn?$AAg@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "H", 0x0, "W", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t"
	DCB	0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a", 0x0, "i", 0x0, "l"
	DCB	0x0, "e", 0x0, "d", 0x0, " ", 0x0, "a", 0x0, "l", 0x0, "l"
	DCB	0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "i", 0x0, "n"
	DCB	0x0, "g", 0x0, " ", 0x0, "T", 0x0, "X", 0x0, " ", 0x0, "b"
	DCB	0x0, "u", 0x0, "f", 0x0, "f", 0x0, "e", 0x0, "r", 0x0, " "
	DCB	0x0, "(", 0x0, "s", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, " "
	DCB	0x0, "%", 0x0, "u", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HG@CKJGMIKG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAH?$AAW?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAT?$AAx?$AAD?$AAm?$AAa?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AAS?$AAi?$AAz?$AAe?$AA?5?$AAm@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "H", 0x0, "W", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t"
	DCB	0x0, ":", 0x0, " ", 0x0, "T", 0x0, "x", 0x0, "D", 0x0, "m"
	DCB	0x0, "a", 0x0, "B", 0x0, "u", 0x0, "f", 0x0, "f", 0x0, "e"
	DCB	0x0, "r", 0x0, "S", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, " "
	DCB	0x0, "m", 0x0, "u", 0x0, "s", 0x0, "t", 0x0, " ", 0x0, "b"
	DCB	0x0, "e", 0x0, " ", 0x0, "a", 0x0, "t", 0x0, " ", 0x0, "l"
	DCB	0x0, "e", 0x0, "a", 0x0, "s", 0x0, "t", 0x0, " ", 0x0, "%"
	DCB	0x0, "u", 0x0, " ", 0x0, "b", 0x0, "y", 0x0, "t", 0x0, "e"
	DCB	0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FG@KKABACDB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAH?$AAW?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAC?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAD@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "H", 0x0, "W", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t"
	DCB	0x0, ":", 0x0, " ", 0x0, "C", 0x0, "a", 0x0, "n", 0x0, "n"
	DCB	0x0, "o", 0x0, "t", 0x0, " ", 0x0, "a", 0x0, "l", 0x0, "l"
	DCB	0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, " "
	DCB	0x0, "D", 0x0, "M", 0x0, "A", 0x0, " ", 0x0, "o", 0x0, "n"
	DCB	0x0, " ", 0x0, "T", 0x0, "X", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DE@PLCFDKBA@?$AAO?$AAM?$AAA?$AAP?$AA3?$AA5?$AAX?$AAX?$AA?5?$AAT?$AAX?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAe?$AAn?$AAa?$AAb?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "O"
	DCB	0x0, "M", 0x0, "A", 0x0, "P", 0x0, "3", 0x0, "5", 0x0, "X"
	DCB	0x0, "X", 0x0, " ", 0x0, "T", 0x0, "X", 0x0, " ", 0x0, "D"
	DCB	0x0, "M", 0x0, "A", 0x0, " ", 0x0, "e", 0x0, "n", 0x0, "a"
	DCB	0x0, "b", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DE@OPOFMPCE@?$AAH?$AAW?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAT?$AAx?$AAD?$AAm?$AAa?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?6?$AA?$AA@| DCB "H"
	DCB	0x0, "W", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, ":"
	DCB	0x0, " ", 0x0, "T", 0x0, "x", 0x0, "D", 0x0, "m", 0x0, "a"
	DCB	0x0, "R", 0x0, "e", 0x0, "q", 0x0, "u", 0x0, "e", 0x0, "s"
	DCB	0x0, "t", 0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FK@EBCJFPMH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAH?$AAW?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5?$AAg?$AAp@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "H", 0x0, "W", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t"
	DCB	0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a", 0x0, "i", 0x0, "l"
	DCB	0x0, "e", 0x0, "d", 0x0, " ", 0x0, "t", 0x0, "o", 0x0, " "
	DCB	0x0, "o", 0x0, "p", 0x0, "e", 0x0, "n", 0x0, " ", 0x0, "g"
	DCB	0x0, "p", 0x0, "i", 0x0, "o", 0x0, " ", 0x0, "d", 0x0, "r"
	DCB	0x0, "i", 0x0, "v", 0x0, "e", 0x0, "r", 0x0, "!", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GM@KEAJOIJP@?$AAH?$AAW?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAE?$AAx?$AAt?$AAe?$AAr?$AAn?$AAa?$AAl?$AA?5?$AAt?$AAr?$AAa?$AAn?$AAs?$AAc?$AAe?$AAi?$AAv?$AAe?$AAr?$AA?5?$AAc?$AAo?$AAn@| DCB "H"
	DCB	0x0, "W", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, ":"
	DCB	0x0, " ", 0x0, "E", 0x0, "x", 0x0, "t", 0x0, "e", 0x0, "r"
	DCB	0x0, "n", 0x0, "a", 0x0, "l", 0x0, " ", 0x0, "t", 0x0, "r"
	DCB	0x0, "a", 0x0, "n", 0x0, "s", 0x0, "c", 0x0, "e", 0x0, "i"
	DCB	0x0, "v", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, "c", 0x0, "o"
	DCB	0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o", 0x0, "l", 0x0, "l"
	DCB	0x0, "e", 0x0, "d", 0x0, " ", 0x0, "w", 0x0, "i", 0x0, "t"
	DCB	0x0, "h", 0x0, " ", 0x0, "g", 0x0, "p", 0x0, "i", 0x0, "o"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GG@EBBCDMFK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAH?$AAW?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAm?$AAa?$AAp?$AA?5?$AAp?$AAh?$AAy?$AAs?$AAi?$AAc@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "H", 0x0, "W", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t"
	DCB	0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a", 0x0, "i", 0x0, "l"
	DCB	0x0, "e", 0x0, "d", 0x0, " ", 0x0, "m", 0x0, "a", 0x0, "p"
	DCB	0x0, " ", 0x0, "p", 0x0, "h", 0x0, "y", 0x0, "s", 0x0, "i"
	DCB	0x0, "c", 0x0, "a", 0x0, "l", 0x0, " ", 0x0, "m", 0x0, "e"
	DCB	0x0, "m", 0x0, "o", 0x0, "r", 0x0, "y", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@CGNHFLML@?$AAH?$AAW?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAM?$AAm?$AAM?$AAa?$AAp?$AAI?$AAo?$AAS?$AAp?$AAa?$AAc?$AAe?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?6?$AA?$AA@| DCB "H"
	DCB	0x0, "W", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, ":"
	DCB	0x0, " ", 0x0, "M", 0x0, "m", 0x0, "M", 0x0, "a", 0x0, "p"
	DCB	0x0, "I", 0x0, "o", 0x0, "S", 0x0, "p", 0x0, "a", 0x0, "c"
	DCB	0x0, "e", 0x0, ":", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "8", 0x0, "x", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FA@IMOKAIMA@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAH?$AAW?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAr?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "H", 0x0, "W", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t"
	DCB	0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a", 0x0, "i", 0x0, "l"
	DCB	0x0, "e", 0x0, "d", 0x0, " ", 0x0, "t", 0x0, "o", 0x0, " "
	DCB	0x0, "r", 0x0, "e", 0x0, "q", 0x0, "u", 0x0, "e", 0x0, "s"
	DCB	0x0, "t", 0x0, " ", 0x0, "p", 0x0, "a", 0x0, "d", 0x0, "s"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IE@GEGDCGKO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAH?$AAW?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAr?$AAe?$AAt?$AAr?$AAi?$AAe?$AAv@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "H", 0x0, "W", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t"
	DCB	0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a", 0x0, "i", 0x0, "l"
	DCB	0x0, "e", 0x0, "d", 0x0, " ", 0x0, "t", 0x0, "o", 0x0, " "
	DCB	0x0, "r", 0x0, "e", 0x0, "t", 0x0, "r", 0x0, "i", 0x0, "e"
	DCB	0x0, "v", 0x0, "e", 0x0, " ", 0x0, "v", 0x0, "a", 0x0, "l"
	DCB	0x0, "i", 0x0, "d", 0x0, " ", 0x0, "d", 0x0, "e", 0x0, "v"
	DCB	0x0, "i", 0x0, "c", 0x0, "e", 0x0, " ", 0x0, "I", 0x0, "D"
	DCB	0x0, " ", 0x0, "f", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "t"
	DCB	0x0, "h", 0x0, "i", 0x0, "s", 0x0, " ", 0x0, "U", 0x0, "A"
	DCB	0x0, "R", 0x0, "T", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FO@HLLDLLCK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAH?$AAW?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5?$AAp?$AAa?$AAr?$AAe?$AAn@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "H", 0x0, "W", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t"
	DCB	0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a", 0x0, "i", 0x0, "l"
	DCB	0x0, "e", 0x0, "d", 0x0, " ", 0x0, "o", 0x0, "p", 0x0, "e"
	DCB	0x0, "n", 0x0, " ", 0x0, "p", 0x0, "a", 0x0, "r", 0x0, "e"
	DCB	0x0, "n", 0x0, "t", 0x0, " ", 0x0, "b", 0x0, "u", 0x0, "s"
	DCB	0x0, " ", 0x0, "d", 0x0, "r", 0x0, "i", 0x0, "v", 0x0, "e"
	DCB	0x0, "r", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HA@GDAKBEMI@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAH?$AAW?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAd?$AAr?$AAi?$AAv?$AAe@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "H", 0x0, "W", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t"
	DCB	0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a", 0x0, "i", 0x0, "l"
	DCB	0x0, "e", 0x0, "d", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "a"
	DCB	0x0, "d", 0x0, " ", 0x0, "d", 0x0, "r", 0x0, "i", 0x0, "v"
	DCB	0x0, "e", 0x0, "r", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "g"
	DCB	0x0, "i", 0x0, "s", 0x0, "t", 0x0, "r", 0x0, "y", 0x0, " "
	DCB	0x0, "p", 0x0, "a", 0x0, "r", 0x0, "a", 0x0, "m", 0x0, "e"
	DCB	0x0, "t", 0x0, "e", 0x0, "r", 0x0, "s", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DK@GEEEGFBF@?$AA?$CL?$AAH?$AAW?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CF?$AAs?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "H", 0x0, "W", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t"
	DCB	0x0, "(", 0x0, "%", 0x0, "s", 0x0, ",", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ","
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  00ff4			 AREA	 |.text|, CODE, ARM

  00ff4		 |HWInit| PROC

; 1614 : {

  00ff4		 |$LN84@HWInit|
  00ff4	e1a0c00d	 mov         r12, sp
  00ff8	e92d0007	 stmdb       sp!, {r0 - r2}
  00ffc	e92d5000	 stmdb       sp!, {r12, lr}
  01000	e24dd0fc	 sub         sp, sp, #0xFC
  01004		 |$M46832|

; 1615 :     BOOL rc = FALSE;

  01004	e3a03000	 mov         r3, #0
  01008	e58d3008	 str         r3, [sp, #8]

; 1616 :     UARTPDD *pPdd = NULL;

  0100c	e3a03000	 mov         r3, #0
  01010	e58d3018	 str         r3, [sp, #0x18]

; 1617 :     PHYSICAL_ADDRESS pa;
; 1618 :     OMAP_UART_REGS *pUartRegs;
; 1619 : 
; 1620 :     DEBUGMSG(ZONE_OPEN||ZONE_FUNCTION, (
; 1621 :         L"+HWInit(%s, 0x%08x, 0x%08x\r\n", context, pMdd, pHWObj
; 1622 :         ));

  01014	e59f3dc8	 ldr         r3, [pc, #0xDC8]
  01018	e5933440	 ldr         r3, [r3, #0x440]
  0101c	e3130002	 tst         r3, #2
  01020	1a000006	 bne         |$LN28@HWInit|
  01024	e59f3db8	 ldr         r3, [pc, #0xDB8]
  01028	e5933440	 ldr         r3, [r3, #0x440]
  0102c	e3130a02	 tst         r3, #2, 20
  01030	1a000002	 bne         |$LN28@HWInit|
  01034	e3a03000	 mov         r3, #0
  01038	e58d3038	 str         r3, [sp, #0x38]
  0103c	ea000006	 b           |$LN29@HWInit|
  01040		 |$LN28@HWInit|
  01040	e59d310c	 ldr         r3, [sp, #0x10C]
  01044	e59d2108	 ldr         r2, [sp, #0x108]
  01048	e59d1104	 ldr         r1, [sp, #0x104]
  0104c	e59f0e0c	 ldr         r0, [pc, #0xE0C]
  01050	eb000000	 bl          NKDbgPrintfW
  01054	e3a03001	 mov         r3, #1
  01058	e58d3038	 str         r3, [sp, #0x38]
  0105c		 |$LN29@HWInit|

; 1623 : 
; 1624 : 
; 1625 :     // Allocate SER_INFO structure
; 1626 :     pPdd = LocalAlloc(LPTR, sizeof(UARTPDD));

  0105c	e3a01d06	 mov         r1, #6, 26
  01060	e3a00040	 mov         r0, #0x40
  01064	eb000000	 bl          LocalAlloc
  01068	e58d003c	 str         r0, [sp, #0x3C]
  0106c	e59d303c	 ldr         r3, [sp, #0x3C]
  01070	e58d3018	 str         r3, [sp, #0x18]

; 1627 :     if (pPdd == NULL) goto cleanUp;

  01074	e59d3018	 ldr         r3, [sp, #0x18]
  01078	e3530000	 cmp         r3, #0
  0107c	1a000000	 bne         |$LN25@HWInit|
  01080	ea000334	 b           |$cleanUp$45342|
  01084		 |$LN25@HWInit|

; 1628 : 
; 1629 :     memset(pPdd, 0x00, sizeof(UARTPDD));

  01084	e3a02d06	 mov         r2, #6, 26
  01088	e3a01000	 mov         r1, #0
  0108c	e59d0018	 ldr         r0, [sp, #0x18]
  01090	eb000000	 bl          memset

; 1630 : 
; 1631 :     // Read device parameters
; 1632 :     if (GetDeviceRegistryParams(
; 1633 :         (LPCWSTR)context, pPdd, dimof(s_deviceRegParams), s_deviceRegParams
; 1634 :         ) != ERROR_SUCCESS)

  01094	e59f3dc0	 ldr         r3, [pc, #0xDC0]
  01098	e3a0200f	 mov         r2, #0xF
  0109c	e59d1018	 ldr         r1, [sp, #0x18]
  010a0	e59d0104	 ldr         r0, [sp, #0x104]
  010a4	eb000000	 bl          GetDeviceRegistryParams
  010a8	e58d0040	 str         r0, [sp, #0x40]
  010ac	e59d3040	 ldr         r3, [sp, #0x40]
  010b0	e3530000	 cmp         r3, #0
  010b4	0a00000b	 beq         |$LN24@HWInit|

; 1635 : 
; 1636 :     {
; 1637 :         DEBUGMSG(ZONE_ERROR, (L"ERROR: HWInit: "
; 1638 :             L"Failed read driver registry parameters\r\n"
; 1639 :             ));

  010b8	e59f3d24	 ldr         r3, [pc, #0xD24]
  010bc	e5933440	 ldr         r3, [r3, #0x440]
  010c0	e3130902	 tst         r3, #2, 18
  010c4	0a000004	 beq         |$LN30@HWInit|
  010c8	e59f0d88	 ldr         r0, [pc, #0xD88]
  010cc	eb000000	 bl          NKDbgPrintfW
  010d0	e3a03001	 mov         r3, #1
  010d4	e58d3044	 str         r3, [sp, #0x44]
  010d8	ea000001	 b           |$LN31@HWInit|
  010dc		 |$LN30@HWInit|
  010dc	e3a03000	 mov         r3, #0
  010e0	e58d3044	 str         r3, [sp, #0x44]
  010e4		 |$LN31@HWInit|

; 1640 :         goto cleanUp;

  010e4	ea00031b	 b           |$cleanUp$45342|
  010e8		 |$LN24@HWInit|

; 1641 :     }
; 1642 : 
; 1643 : 
; 1644 :     // Open parent bus
; 1645 :     pPdd->hParentBus = CreateBusAccessHandle((LPCWSTR)context);

  010e8	e59d0104	 ldr         r0, [sp, #0x104]
  010ec	eb000000	 bl          CreateBusAccessHandle
  010f0	e58d0048	 str         r0, [sp, #0x48]
  010f4	e59d3018	 ldr         r3, [sp, #0x18]
  010f8	e283202c	 add         r2, r3, #0x2C
  010fc	e59d3048	 ldr         r3, [sp, #0x48]
  01100	e5823000	 str         r3, [r2]

; 1646 :     if (pPdd->hParentBus == NULL)

  01104	e59d3018	 ldr         r3, [sp, #0x18]
  01108	e283302c	 add         r3, r3, #0x2C
  0110c	e5933000	 ldr         r3, [r3]
  01110	e3530000	 cmp         r3, #0
  01114	1a00000b	 bne         |$LN23@HWInit|

; 1647 :     {
; 1648 :         DEBUGMSG(ZONE_ERROR, (L"ERROR: HWInit: "
; 1649 :             L"Failed open parent bus driver\r\n"
; 1650 :             ));

  01118	e59f3cc4	 ldr         r3, [pc, #0xCC4]
  0111c	e5933440	 ldr         r3, [r3, #0x440]
  01120	e3130902	 tst         r3, #2, 18
  01124	0a000004	 beq         |$LN32@HWInit|
  01128	e59f0d24	 ldr         r0, [pc, #0xD24]
  0112c	eb000000	 bl          NKDbgPrintfW
  01130	e3a03001	 mov         r3, #1
  01134	e58d304c	 str         r3, [sp, #0x4C]
  01138	ea000001	 b           |$LN33@HWInit|
  0113c		 |$LN32@HWInit|
  0113c	e3a03000	 mov         r3, #0
  01140	e58d304c	 str         r3, [sp, #0x4C]
  01144		 |$LN33@HWInit|

; 1651 :         goto cleanUp;

  01144	ea000303	 b           |$cleanUp$45342|
  01148		 |$LN23@HWInit|

; 1652 :     }
; 1653 : 	// Retrieve device index
; 1654 : 	pPdd->DeviceID = SOCGetUartDeviceByIndex(pPdd->UARTIndex);

  01148	e59d3018	 ldr         r3, [sp, #0x18]
  0114c	e283300c	 add         r3, r3, #0xC
  01150	e5930000	 ldr         r0, [r3]
  01154	eb000000	 bl          SOCGetUartDeviceByIndex
  01158	e58d0050	 str         r0, [sp, #0x50]
  0115c	e59d3018	 ldr         r3, [sp, #0x18]
  01160	e2832010	 add         r2, r3, #0x10
  01164	e59d3050	 ldr         r3, [sp, #0x50]
  01168	e5823000	 str         r3, [r2]

; 1655 : 
; 1656 : 	if (pPdd->DeviceID == OMAP_DEVICE_NONE)

  0116c	e59d3018	 ldr         r3, [sp, #0x18]
  01170	e2833010	 add         r3, r3, #0x10
  01174	e5933000	 ldr         r3, [r3]
  01178	e3730001	 cmn         r3, #1
  0117c	1a00000b	 bne         |$LN22@HWInit|

; 1657 : 	{
; 1658 :         DEBUGMSG(ZONE_ERROR, (L"ERROR: HWInit: "
; 1659 :             L"Failed to retrieve valid device ID for this UART\r\n"
; 1660 :             ));

  01180	e59f3c5c	 ldr         r3, [pc, #0xC5C]
  01184	e5933440	 ldr         r3, [r3, #0x440]
  01188	e3130902	 tst         r3, #2, 18
  0118c	0a000004	 beq         |$LN34@HWInit|
  01190	e59f0cb8	 ldr         r0, [pc, #0xCB8]
  01194	eb000000	 bl          NKDbgPrintfW
  01198	e3a03001	 mov         r3, #1
  0119c	e58d3054	 str         r3, [sp, #0x54]
  011a0	ea000001	 b           |$LN35@HWInit|
  011a4		 |$LN34@HWInit|
  011a4	e3a03000	 mov         r3, #0
  011a8	e58d3054	 str         r3, [sp, #0x54]
  011ac		 |$LN35@HWInit|

; 1661 :         goto cleanUp;

  011ac	ea0002e9	 b           |$cleanUp$45342|
  011b0		 |$LN22@HWInit|

; 1662 : 	}
; 1663 : 
; 1664 : 	// Perform pads configuration
; 1665 : 	if (!RequestDevicePads(pPdd->DeviceID))

  011b0	e59d3018	 ldr         r3, [sp, #0x18]
  011b4	e2833010	 add         r3, r3, #0x10
  011b8	e5930000	 ldr         r0, [r3]
  011bc	eb000000	 bl          RequestDevicePads
  011c0	e58d0058	 str         r0, [sp, #0x58]
  011c4	e59d3058	 ldr         r3, [sp, #0x58]
  011c8	e3530000	 cmp         r3, #0
  011cc	1a00000b	 bne         |$LN21@HWInit|

; 1666 : 	{
; 1667 :         DEBUGMSG(ZONE_ERROR, (L"ERROR: HWInit: "
; 1668 :             L"Failed to request pads\r\n"
; 1669 :             ));

  011d0	e59f3c0c	 ldr         r3, [pc, #0xC0C]
  011d4	e5933440	 ldr         r3, [r3, #0x440]
  011d8	e3130902	 tst         r3, #2, 18
  011dc	0a000004	 beq         |$LN36@HWInit|
  011e0	e59f0c64	 ldr         r0, [pc, #0xC64]
  011e4	eb000000	 bl          NKDbgPrintfW
  011e8	e3a03001	 mov         r3, #1
  011ec	e58d305c	 str         r3, [sp, #0x5C]
  011f0	ea000001	 b           |$LN37@HWInit|
  011f4		 |$LN36@HWInit|
  011f4	e3a03000	 mov         r3, #0
  011f8	e58d305c	 str         r3, [sp, #0x5C]
  011fc		 |$LN37@HWInit|

; 1670 :         goto cleanUp;

  011fc	ea0002d5	 b           |$cleanUp$45342|
  01200		 |$LN21@HWInit|

; 1671 : 	}
; 1672 : 
; 1673 :     // Map physical memory
; 1674 :     DEBUGMSG(ZONE_INIT, (L"HWInit: MmMapIoSpace: 0x%08x\n", pPdd->memBase[0]));

  01200	e59f3bdc	 ldr         r3, [pc, #0xBDC]
  01204	e5933440	 ldr         r3, [r3, #0x440]
  01208	e3130001	 tst         r3, #1
  0120c	0a000006	 beq         |$LN38@HWInit|
  01210	e59d3018	 ldr         r3, [sp, #0x18]
  01214	e5931000	 ldr         r1, [r3]
  01218	e59f0c28	 ldr         r0, [pc, #0xC28]
  0121c	eb000000	 bl          NKDbgPrintfW
  01220	e3a03001	 mov         r3, #1
  01224	e58d3060	 str         r3, [sp, #0x60]
  01228	ea000001	 b           |$LN39@HWInit|
  0122c		 |$LN38@HWInit|
  0122c	e3a03000	 mov         r3, #0
  01230	e58d3060	 str         r3, [sp, #0x60]
  01234		 |$LN39@HWInit|

; 1675 :     
; 1676 :     pPdd->memBase[0] = GetAddressByDevice(pPdd->DeviceID);

  01234	e59d3018	 ldr         r3, [sp, #0x18]
  01238	e2833010	 add         r3, r3, #0x10
  0123c	e5930000	 ldr         r0, [r3]
  01240	eb000000	 bl          GetAddressByDevice
  01244	e58d0064	 str         r0, [sp, #0x64]
  01248	e59d2064	 ldr         r2, [sp, #0x64]
  0124c	e59d3018	 ldr         r3, [sp, #0x18]
  01250	e5832000	 str         r2, [r3]

; 1677 :     pPdd->memLen[0] = sizeof(OMAP_UART_REGS);

  01254	e59d3018	 ldr         r3, [sp, #0x18]
  01258	e2832004	 add         r2, r3, #4
  0125c	e3a03061	 mov         r3, #0x61
  01260	e5823000	 str         r3, [r2]

; 1678 :     pPdd->irq = GetIrqByDevice(SOCGetUartDeviceByIndex(pPdd->UARTIndex),NULL);

  01264	e59d3018	 ldr         r3, [sp, #0x18]
  01268	e283300c	 add         r3, r3, #0xC
  0126c	e5930000	 ldr         r0, [r3]
  01270	eb000000	 bl          SOCGetUartDeviceByIndex
  01274	e58d0068	 str         r0, [sp, #0x68]
  01278	e3a01000	 mov         r1, #0
  0127c	e59d0068	 ldr         r0, [sp, #0x68]
  01280	eb000000	 bl          GetIrqByDevice
  01284	e58d006c	 str         r0, [sp, #0x6C]
  01288	e59d3018	 ldr         r3, [sp, #0x18]
  0128c	e2832008	 add         r2, r3, #8
  01290	e59d306c	 ldr         r3, [sp, #0x6C]
  01294	e5823000	 str         r3, [r2]

; 1679 :     // UART registers
; 1680 :     pa.QuadPart = pPdd->memBase[0];

  01298	e59d3018	 ldr         r3, [sp, #0x18]
  0129c	e5933000	 ldr         r3, [r3]
  012a0	e58d3010	 str         r3, [sp, #0x10]
  012a4	e3a03000	 mov         r3, #0
  012a8	e58d3014	 str         r3, [sp, #0x14]

; 1681 :     pUartRegs = MmMapIoSpace(pa, pPdd->memLen[0], FALSE);

  012ac	e3a03000	 mov         r3, #0
  012b0	e59d2018	 ldr         r2, [sp, #0x18]
  012b4	e2822004	 add         r2, r2, #4
  012b8	e5922000	 ldr         r2, [r2]
  012bc	e59d0010	 ldr         r0, [sp, #0x10]
  012c0	e59d1014	 ldr         r1, [sp, #0x14]
  012c4	eb000000	 bl          MmMapIoSpace
  012c8	e58d0070	 str         r0, [sp, #0x70]
  012cc	e59d3070	 ldr         r3, [sp, #0x70]
  012d0	e58d300c	 str         r3, [sp, #0xC]

; 1682 :     if (pUartRegs == NULL)

  012d4	e59d300c	 ldr         r3, [sp, #0xC]
  012d8	e3530000	 cmp         r3, #0
  012dc	1a00000c	 bne         |$LN20@HWInit|

; 1683 :     {
; 1684 :         DEBUGMSG(ZONE_ERROR, (L"ERROR: HWInit: "
; 1685 :             L"Failed map physical memory 0x%08x\r\n", pa.LowPart
; 1686 :             ));

  012e0	e59f3afc	 ldr         r3, [pc, #0xAFC]
  012e4	e5933440	 ldr         r3, [r3, #0x440]
  012e8	e3130902	 tst         r3, #2, 18
  012ec	0a000005	 beq         |$LN40@HWInit|
  012f0	e59d1010	 ldr         r1, [sp, #0x10]
  012f4	e59f0b48	 ldr         r0, [pc, #0xB48]
  012f8	eb000000	 bl          NKDbgPrintfW
  012fc	e3a03001	 mov         r3, #1
  01300	e58d3074	 str         r3, [sp, #0x74]
  01304	ea000001	 b           |$LN41@HWInit|
  01308		 |$LN40@HWInit|
  01308	e3a03000	 mov         r3, #0
  0130c	e58d3074	 str         r3, [sp, #0x74]
  01310		 |$LN41@HWInit|

; 1687 :         goto cleanUp;

  01310	ea000290	 b           |$cleanUp$45342|
  01314		 |$LN20@HWInit|

; 1688 :     }
; 1689 :     pPdd->pUartRegs = pUartRegs;

  01314	e59d3018	 ldr         r3, [sp, #0x18]
  01318	e2832024	 add         r2, r3, #0x24
  0131c	e59d300c	 ldr         r3, [sp, #0xC]
  01320	e5823000	 str         r3, [r2]

; 1690 : 
; 1691 :     if ((pPdd->XcvrEnableGpio != 0xFFFF) && ((pPdd->XcvrEnabledLevel == 0) || (pPdd->XcvrEnabledLevel == 1)))

  01324	e59d3018	 ldr         r3, [sp, #0x18]
  01328	e2833e17	 add         r3, r3, #0x17, 28
  0132c	e5932000	 ldr         r2, [r3]
  01330	e3a03cff	 mov         r3, #0xFF, 24
  01334	e38330ff	 orr         r3, r3, #0xFF
  01338	e1520003	 cmp         r2, r3
  0133c	0a000032	 beq         |$LN19@HWInit|
  01340	e59d3018	 ldr         r3, [sp, #0x18]
  01344	e2833f5d	 add         r3, r3, #0x5D, 30
  01348	e5933000	 ldr         r3, [r3]
  0134c	e3530000	 cmp         r3, #0
  01350	0a000004	 beq         |$LN18@HWInit|
  01354	e59d3018	 ldr         r3, [sp, #0x18]
  01358	e2833f5d	 add         r3, r3, #0x5D, 30
  0135c	e5933000	 ldr         r3, [r3]
  01360	e3530001	 cmp         r3, #1
  01364	1a000028	 bne         |$LN19@HWInit|
  01368		 |$LN18@HWInit|

; 1692 :     {
; 1693 :         DEBUGMSG(ZONE_INIT, (L"HWInit: External transceiver controlled with gpio %d\n", pPdd->XcvrEnableGpio));

  01368	e59f3a74	 ldr         r3, [pc, #0xA74]
  0136c	e5933440	 ldr         r3, [r3, #0x440]
  01370	e3130001	 tst         r3, #1
  01374	0a000007	 beq         |$LN42@HWInit|
  01378	e59d3018	 ldr         r3, [sp, #0x18]
  0137c	e2833e17	 add         r3, r3, #0x17, 28
  01380	e5931000	 ldr         r1, [r3]
  01384	e59f0ab4	 ldr         r0, [pc, #0xAB4]
  01388	eb000000	 bl          NKDbgPrintfW
  0138c	e3a03001	 mov         r3, #1
  01390	e58d3078	 str         r3, [sp, #0x78]
  01394	ea000001	 b           |$LN43@HWInit|
  01398		 |$LN42@HWInit|
  01398	e3a03000	 mov         r3, #0
  0139c	e58d3078	 str         r3, [sp, #0x78]
  013a0		 |$LN43@HWInit|

; 1694 :         // GPIO used to control external transceiver
; 1695 :         pPdd->hGpio = GPIOOpen();

  013a0	eb000000	 bl          GPIOOpen
  013a4	e58d007c	 str         r0, [sp, #0x7C]
  013a8	e59d3018	 ldr         r3, [sp, #0x18]
  013ac	e2832f5b	 add         r2, r3, #0x5B, 30
  013b0	e59d307c	 ldr         r3, [sp, #0x7C]
  013b4	e5823000	 str         r3, [r2]

; 1696 :         if (pPdd->hGpio == INVALID_HANDLE_VALUE)

  013b8	e59d3018	 ldr         r3, [sp, #0x18]
  013bc	e2833f5b	 add         r3, r3, #0x5B, 30
  013c0	e5933000	 ldr         r3, [r3]
  013c4	e3730001	 cmn         r3, #1
  013c8	1a00000f	 bne         |$LN17@HWInit|

; 1697 :         {
; 1698 :             pPdd->hGpio = NULL;

  013cc	e59d3018	 ldr         r3, [sp, #0x18]
  013d0	e2832f5b	 add         r2, r3, #0x5B, 30
  013d4	e3a03000	 mov         r3, #0
  013d8	e5823000	 str         r3, [r2]

; 1699 :      
; 1700 :             DEBUGMSG(ZONE_ERROR, (L"ERROR: HWInit: "
; 1701 :                 L"Failed to open gpio driver!\r\n"
; 1702 :                 ));

  013dc	e59f3a00	 ldr         r3, [pc, #0xA00]
  013e0	e5933440	 ldr         r3, [r3, #0x440]
  013e4	e3130902	 tst         r3, #2, 18
  013e8	0a000004	 beq         |$LN44@HWInit|
  013ec	e59f0a48	 ldr         r0, [pc, #0xA48]
  013f0	eb000000	 bl          NKDbgPrintfW
  013f4	e3a03001	 mov         r3, #1
  013f8	e58d3080	 str         r3, [sp, #0x80]
  013fc	ea000001	 b           |$LN45@HWInit|
  01400		 |$LN44@HWInit|
  01400	e3a03000	 mov         r3, #0
  01404	e58d3080	 str         r3, [sp, #0x80]
  01408		 |$LN45@HWInit|

; 1703 :             goto cleanUp;

  01408	ea000252	 b           |$cleanUp$45342|
  0140c		 |$LN17@HWInit|
  0140c		 |$LN19@HWInit|

; 1704 :         }
; 1705 :     }
; 1706 :             
; 1707 :         
; 1708 :     pPdd->bHWXmitComCharWaiting = FALSE;

  0140c	e59d3018	 ldr         r3, [sp, #0x18]
  01410	e2832e13	 add         r2, r3, #0x13, 28
  01414	e3a03000	 mov         r3, #0
  01418	e5823000	 str         r3, [r2]

; 1709 : 
; 1710 :     DEBUGMSG(ZONE_INIT, (L"HWInit: TxDmaRequest= %d\n", pPdd->TxDmaRequest));

  0141c	e59f39c0	 ldr         r3, [pc, #0x9C0]
  01420	e5933440	 ldr         r3, [r3, #0x440]
  01424	e3130001	 tst         r3, #1
  01428	0a000007	 beq         |$LN46@HWInit|
  0142c	e59d3018	 ldr         r3, [sp, #0x18]
  01430	e28330f0	 add         r3, r3, #0xF0
  01434	e5931000	 ldr         r1, [r3]
  01438	e59f09f8	 ldr         r0, [pc, #0x9F8]
  0143c	eb000000	 bl          NKDbgPrintfW
  01440	e3a03001	 mov         r3, #1
  01444	e58d3084	 str         r3, [sp, #0x84]
  01448	ea000001	 b           |$LN47@HWInit|
  0144c		 |$LN46@HWInit|
  0144c	e3a03000	 mov         r3, #0
  01450	e58d3084	 str         r3, [sp, #0x84]
  01454		 |$LN47@HWInit|

; 1711 : 
; 1712 :     pPdd->TxDmaInfo = NULL;     // init TX DMA as not used

  01454	e59d3018	 ldr         r3, [sp, #0x18]
  01458	e2832c01	 add         r2, r3, #1, 24
  0145c	e3a03000	 mov         r3, #0
  01460	e5823000	 str         r3, [r2]

; 1713 : 
; 1714 :     // Should driver use DMA for TX?
; 1715 :     if (pPdd->TxDmaRequest == -1)

  01464	e59d3018	 ldr         r3, [sp, #0x18]
  01468	e28330f0	 add         r3, r3, #0xF0
  0146c	e5933000	 ldr         r3, [r3]
  01470	e3730001	 cmn         r3, #1
  01474	1a000000	 bne         |$LN16@HWInit|

; 1716 :         {
; 1717 :             RETAILMSG(FALSE, (L"TX - DMA Disabled \r\n"));
; 1718 :             goto skipTXDMA;         // use FIFO, not DMA for TX.

  01478	ea0000d7	 b           |$skipTXDMA$45381|
  0147c		 |$LN16@HWInit|

; 1719 :         }
; 1720 : 
; 1721 :     // allocate dma channel
; 1722 :     pPdd->hTxDmaChannel = DmaAllocateChannel(DMA_TYPE_SYSTEM);

  0147c	e3a00000	 mov         r0, #0
  01480	eb000000	 bl          DmaAllocateChannel
  01484	e58d0088	 str         r0, [sp, #0x88]
  01488	e59d3018	 ldr         r3, [sp, #0x18]
  0148c	e2832f41	 add         r2, r3, #0x41, 30
  01490	e59d3088	 ldr         r3, [sp, #0x88]
  01494	e5823000	 str         r3, [r2]

; 1723 :     if (pPdd->hTxDmaChannel != NULL)

  01498	e59d3018	 ldr         r3, [sp, #0x18]
  0149c	e2833f41	 add         r3, r3, #0x41, 30
  014a0	e5933000	 ldr         r3, [r3]
  014a4	e3530000	 cmp         r3, #0
  014a8	0a0000cb	 beq         |$LN15@HWInit|

; 1724 :     {
; 1725 :         DEBUGMSG(ZONE_INIT, (L"OMAP35XX TX DMA enabled\r\n"));

  014ac	e59f3930	 ldr         r3, [pc, #0x930]
  014b0	e5933440	 ldr         r3, [r3, #0x440]
  014b4	e3130001	 tst         r3, #1
  014b8	0a000004	 beq         |$LN48@HWInit|
  014bc	e59f0970	 ldr         r0, [pc, #0x970]
  014c0	eb000000	 bl          NKDbgPrintfW
  014c4	e3a03001	 mov         r3, #1
  014c8	e58d308c	 str         r3, [sp, #0x8C]
  014cc	ea000001	 b           |$LN49@HWInit|
  014d0		 |$LN48@HWInit|
  014d0	e3a03000	 mov         r3, #0
  014d4	e58d308c	 str         r3, [sp, #0x8C]
  014d8		 |$LN49@HWInit|

; 1726 : 
; 1727 :         pPdd->TxDmaInfo = LocalAlloc(LMEM_ZEROINIT,sizeof(DmaDataInfo_t));

  014d8	e3a01018	 mov         r1, #0x18
  014dc	e3a00040	 mov         r0, #0x40
  014e0	eb000000	 bl          LocalAlloc
  014e4	e58d0090	 str         r0, [sp, #0x90]
  014e8	e59d3018	 ldr         r3, [sp, #0x18]
  014ec	e2832c01	 add         r2, r3, #1, 24
  014f0	e59d3090	 ldr         r3, [sp, #0x90]
  014f4	e5823000	 str         r3, [r2]

; 1728 :         if(!pPdd->TxDmaInfo)

  014f8	e59d3018	 ldr         r3, [sp, #0x18]
  014fc	e2833c01	 add         r3, r3, #1, 24
  01500	e5933000	 ldr         r3, [r3]
  01504	e3530000	 cmp         r3, #0
  01508	1a00000b	 bne         |$LN14@HWInit|

; 1729 :         {
; 1730 :             DEBUGMSG(ZONE_ERROR, (L"ERROR: HWInit: "
; 1731 :                 L"Cannot allocate DMA on TX\r\n"
; 1732 :                 ));

  0150c	e59f38d0	 ldr         r3, [pc, #0x8D0]
  01510	e5933440	 ldr         r3, [r3, #0x440]
  01514	e3130902	 tst         r3, #2, 18
  01518	0a000004	 beq         |$LN50@HWInit|
  0151c	e59f090c	 ldr         r0, [pc, #0x90C]
  01520	eb000000	 bl          NKDbgPrintfW
  01524	e3a03001	 mov         r3, #1
  01528	e58d3094	 str         r3, [sp, #0x94]
  0152c	ea000001	 b           |$LN51@HWInit|
  01530		 |$LN50@HWInit|
  01530	e3a03000	 mov         r3, #0
  01534	e58d3094	 str         r3, [sp, #0x94]
  01538		 |$LN51@HWInit|

; 1733 :             goto skipTXDMA;

  01538	ea0000a7	 b           |$skipTXDMA$45381|
  0153c		 |$LN14@HWInit|

; 1734 :         }
; 1735 :         if (pPdd->TxDmaBufferSize < MAX_TX_SERIALDMA_FRAMESIZE)

  0153c	e59d3018	 ldr         r3, [sp, #0x18]
  01540	e28330f4	 add         r3, r3, #0xF4
  01544	e5933000	 ldr         r3, [r3]
  01548	e353003f	 cmp         r3, #0x3F
  0154c	2a000014	 bcs         |$LN13@HWInit|

; 1736 :         {
; 1737 :             DEBUGMSG(ZONE_ERROR, (L"ERROR: HWInit: "
; 1738 :                 L"TxDmaBufferSize must be at least %u bytes\r\n",
; 1739 :                 MAX_TX_SERIALDMA_FRAMESIZE
; 1740 :                 ));

  01550	e59f388c	 ldr         r3, [pc, #0x88C]
  01554	e5933440	 ldr         r3, [r3, #0x440]
  01558	e3130902	 tst         r3, #2, 18
  0155c	0a000005	 beq         |$LN52@HWInit|
  01560	e3a0103f	 mov         r1, #0x3F
  01564	e59f08c0	 ldr         r0, [pc, #0x8C0]
  01568	eb000000	 bl          NKDbgPrintfW
  0156c	e3a03001	 mov         r3, #1
  01570	e58d3098	 str         r3, [sp, #0x98]
  01574	ea000001	 b           |$LN53@HWInit|
  01578		 |$LN52@HWInit|
  01578	e3a03000	 mov         r3, #0
  0157c	e58d3098	 str         r3, [sp, #0x98]
  01580		 |$LN53@HWInit|

; 1741 : 
; 1742 :             LocalFree(pPdd->TxDmaInfo);

  01580	e59d3018	 ldr         r3, [sp, #0x18]
  01584	e2833c01	 add         r3, r3, #1, 24
  01588	e5930000	 ldr         r0, [r3]
  0158c	eb000000	 bl          LocalFree

; 1743 :             pPdd->TxDmaInfo = NULL;

  01590	e59d3018	 ldr         r3, [sp, #0x18]
  01594	e2832c01	 add         r2, r3, #1, 24
  01598	e3a03000	 mov         r3, #0
  0159c	e5823000	 str         r3, [r2]

; 1744 :             goto skipTXDMA;

  015a0	ea00008d	 b           |$skipTXDMA$45381|
  015a4		 |$LN13@HWInit|

; 1745 :         }
; 1746 : 
; 1747 :         // Allocate DMA transfer buffer
; 1748 :         pPdd->pTxDmaBuffer = AllocPhysMem(
; 1749 :             pPdd->TxDmaBufferSize, PAGE_READWRITE|PAGE_NOCACHE, 0, 0, &pPdd->paTxDmaBuffer
; 1750 :             );

  015a4	e59d3018	 ldr         r3, [sp, #0x18]
  015a8	e28330fc	 add         r3, r3, #0xFC
  015ac	e58d3000	 str         r3, [sp]
  015b0	e3a03000	 mov         r3, #0
  015b4	e3a02000	 mov         r2, #0
  015b8	e3a01f81	 mov         r1, #0x81, 30
  015bc	e59d0018	 ldr         r0, [sp, #0x18]
  015c0	e28000f4	 add         r0, r0, #0xF4
  015c4	e5900000	 ldr         r0, [r0]
  015c8	eb000000	 bl          AllocPhysMem
  015cc	e58d009c	 str         r0, [sp, #0x9C]
  015d0	e59d3018	 ldr         r3, [sp, #0x18]
  015d4	e28320f8	 add         r2, r3, #0xF8
  015d8	e59d309c	 ldr         r3, [sp, #0x9C]
  015dc	e5823000	 str         r3, [r2]

; 1751 : 
; 1752 :         if (pPdd->pTxDmaBuffer == NULL)

  015e0	e59d3018	 ldr         r3, [sp, #0x18]
  015e4	e28330f8	 add         r3, r3, #0xF8
  015e8	e5933000	 ldr         r3, [r3]
  015ec	e3530000	 cmp         r3, #0
  015f0	1a000016	 bne         |$LN12@HWInit|

; 1753 :         {
; 1754 :             DEBUGMSG(ZONE_ERROR, (L"ERROR: HWInit: "
; 1755 :                 L"Failed allocating TX buffer (size %u)\r\n", pPdd->TxDmaBufferSize
; 1756 :                 ));

  015f4	e59f37e8	 ldr         r3, [pc, #0x7E8]
  015f8	e5933440	 ldr         r3, [r3, #0x440]
  015fc	e3130902	 tst         r3, #2, 18
  01600	0a000007	 beq         |$LN54@HWInit|
  01604	e59d3018	 ldr         r3, [sp, #0x18]
  01608	e28330f4	 add         r3, r3, #0xF4
  0160c	e5931000	 ldr         r1, [r3]
  01610	e59f0810	 ldr         r0, [pc, #0x810]
  01614	eb000000	 bl          NKDbgPrintfW
  01618	e3a03001	 mov         r3, #1
  0161c	e58d30a0	 str         r3, [sp, #0xA0]
  01620	ea000001	 b           |$LN55@HWInit|
  01624		 |$LN54@HWInit|
  01624	e3a03000	 mov         r3, #0
  01628	e58d30a0	 str         r3, [sp, #0xA0]
  0162c		 |$LN55@HWInit|

; 1757 :             LocalFree(pPdd->TxDmaInfo);

  0162c	e59d3018	 ldr         r3, [sp, #0x18]
  01630	e2833c01	 add         r3, r3, #1, 24
  01634	e5930000	 ldr         r0, [r3]
  01638	eb000000	 bl          LocalFree

; 1758 :             pPdd->TxDmaInfo = NULL;

  0163c	e59d3018	 ldr         r3, [sp, #0x18]
  01640	e2832c01	 add         r2, r3, #1, 24
  01644	e3a03000	 mov         r3, #0
  01648	e5823000	 str         r3, [r2]

; 1759 :             goto skipTXDMA;

  0164c	ea000062	 b           |$skipTXDMA$45381|
  01650		 |$LN12@HWInit|

; 1760 :         }
; 1761 :         DEBUGMSG(ZONE_INIT, (L"OMAP35XX TX DMA buffer allocated\r\n"));

  01650	e59f378c	 ldr         r3, [pc, #0x78C]
  01654	e5933440	 ldr         r3, [r3, #0x440]
  01658	e3130001	 tst         r3, #1
  0165c	0a000004	 beq         |$LN56@HWInit|
  01660	e59f07bc	 ldr         r0, [pc, #0x7BC]
  01664	eb000000	 bl          NKDbgPrintfW
  01668	e3a03001	 mov         r3, #1
  0166c	e58d30a4	 str         r3, [sp, #0xA4]
  01670	ea000001	 b           |$LN57@HWInit|
  01674		 |$LN56@HWInit|
  01674	e3a03000	 mov         r3, #0
  01678	e58d30a4	 str         r3, [sp, #0xA4]
  0167c		 |$LN57@HWInit|

; 1762 : 
; 1763 :         pPdd->TxDmaInfo->pSrcBuffer = NULL;

  0167c	e59d3018	 ldr         r3, [sp, #0x18]
  01680	e2833c01	 add         r3, r3, #1, 24
  01684	e5932000	 ldr         r2, [r3]
  01688	e3a03000	 mov         r3, #0
  0168c	e5823000	 str         r3, [r2]

; 1764 :         pPdd->TxDmaInfo->pDstBuffer = NULL;

  01690	e59d3018	 ldr         r3, [sp, #0x18]
  01694	e2833c01	 add         r3, r3, #1, 24
  01698	e5933000	 ldr         r3, [r3]
  0169c	e2832004	 add         r2, r3, #4
  016a0	e3a03000	 mov         r3, #0
  016a4	e5823000	 str         r3, [r2]

; 1765 :         pPdd->TxDmaInfo->PhysAddrSrcBuffer = 0;

  016a8	e59d3018	 ldr         r3, [sp, #0x18]
  016ac	e2833c01	 add         r3, r3, #1, 24
  016b0	e5933000	 ldr         r3, [r3]
  016b4	e2832008	 add         r2, r3, #8
  016b8	e3a03000	 mov         r3, #0
  016bc	e5823000	 str         r3, [r2]

; 1766 :         pPdd->TxDmaInfo->PhysAddrDstBuffer = 0;

  016c0	e59d3018	 ldr         r3, [sp, #0x18]
  016c4	e2833c01	 add         r3, r3, #1, 24
  016c8	e5933000	 ldr         r3, [r3]
  016cc	e283200c	 add         r2, r3, #0xC
  016d0	e3a03000	 mov         r3, #0
  016d4	e5823000	 str         r3, [r2]

; 1767 :         pPdd->bExitThread = FALSE;

  016d8	e59d3018	 ldr         r3, [sp, #0x18]
  016dc	e2832f4e	 add         r2, r3, #0x4E, 30
  016e0	e3a03000	 mov         r3, #0
  016e4	e5823000	 str         r3, [r2]

; 1768 :         pPdd->bSendSignal = FALSE;

  016e8	e59d3018	 ldr         r3, [sp, #0x18]
  016ec	e2832f4d	 add         r2, r3, #0x4D, 30
  016f0	e3a03000	 mov         r3, #0
  016f4	e5823000	 str         r3, [r2]

; 1769 :         pPdd->bRxBreak = FALSE;

  016f8	e59d3018	 ldr         r3, [sp, #0x18]
  016fc	e2832f5e	 add         r2, r3, #0x5E, 30
  01700	e3a03000	 mov         r3, #0
  01704	e5823000	 str         r3, [r2]

; 1770 :         
; 1771 :         //Event for Tx DMA Endofblock
; 1772 :         pPdd->hEventTxIstDma = CreateEvent(NULL, FALSE, FALSE, NULL);

  01708	e3a03000	 mov         r3, #0
  0170c	e3a02000	 mov         r2, #0
  01710	e3a01000	 mov         r1, #0
  01714	e3a00000	 mov         r0, #0
  01718	eb000000	 bl          CreateEventW
  0171c	e58d00a8	 str         r0, [sp, #0xA8]
  01720	e59d3018	 ldr         r3, [sp, #0x18]
  01724	e2832f42	 add         r2, r3, #0x42, 30
  01728	e59d30a8	 ldr         r3, [sp, #0xA8]
  0172c	e5823000	 str         r3, [r2]

; 1773 : 
; 1774 :         // register dma for interrupts
; 1775 :         if (DmaEnableInterrupts(pPdd->hTxDmaChannel, pPdd->hEventTxIstDma) == FALSE)

  01730	e59d3018	 ldr         r3, [sp, #0x18]
  01734	e2833f42	 add         r3, r3, #0x42, 30
  01738	e5931000	 ldr         r1, [r3]
  0173c	e59d3018	 ldr         r3, [sp, #0x18]
  01740	e2833f41	 add         r3, r3, #0x41, 30
  01744	e5930000	 ldr         r0, [r3]
  01748	eb000000	 bl          DmaEnableInterrupts
  0174c	e58d00ac	 str         r0, [sp, #0xAC]
  01750	e59d30ac	 ldr         r3, [sp, #0xAC]
  01754	e3530000	 cmp         r3, #0
  01758	1a000012	 bne         |$LN11@HWInit|

; 1776 :         {
; 1777 :             RETAILMSG(1,(TEXT("ERROR:Failed to enable DMA TX interrupt\r\n")));

  0175c	e59f06bc	 ldr         r0, [pc, #0x6BC]
  01760	eb000000	 bl          NKDbgPrintfW

; 1778 :             FreePhysMem( pPdd->pTxDmaBuffer );

  01764	e59d3018	 ldr         r3, [sp, #0x18]
  01768	e28330f8	 add         r3, r3, #0xF8
  0176c	e5930000	 ldr         r0, [r3]
  01770	eb000000	 bl          FreePhysMem

; 1779 :             pPdd->pTxDmaBuffer = NULL;

  01774	e59d3018	 ldr         r3, [sp, #0x18]
  01778	e28320f8	 add         r2, r3, #0xF8
  0177c	e3a03000	 mov         r3, #0
  01780	e5823000	 str         r3, [r2]

; 1780 :             LocalFree(pPdd->TxDmaInfo);

  01784	e59d3018	 ldr         r3, [sp, #0x18]
  01788	e2833c01	 add         r3, r3, #1, 24
  0178c	e5930000	 ldr         r0, [r3]
  01790	eb000000	 bl          LocalFree

; 1781 :             pPdd->TxDmaInfo = NULL;

  01794	e59d3018	 ldr         r3, [sp, #0x18]
  01798	e2832c01	 add         r2, r3, #1, 24
  0179c	e3a03000	 mov         r3, #0
  017a0	e5823000	 str         r3, [r2]

; 1782 :             goto skipTXDMA;

  017a4	ea00000c	 b           |$skipTXDMA$45381|
  017a8		 |$LN11@HWInit|

; 1783 :         }
; 1784 :         // Tx DMA configuration settings
; 1785 : 
; 1786 :         InitializeTxDMA(pPdd);

  017a8	e59d0018	 ldr         r0, [sp, #0x18]
  017ac	eb000000	 bl          InitializeTxDMA

; 1787 : 
; 1788 :         DEBUGMSG(ZONE_INIT, (L"OMAP35XX TX DMA init completed\r\n"));

  017b0	e59f362c	 ldr         r3, [pc, #0x62C]
  017b4	e5933440	 ldr         r3, [r3, #0x440]
  017b8	e3130001	 tst         r3, #1
  017bc	0a000004	 beq         |$LN58@HWInit|
  017c0	e59f0654	 ldr         r0, [pc, #0x654]
  017c4	eb000000	 bl          NKDbgPrintfW
  017c8	e3a03001	 mov         r3, #1
  017cc	e58d30b0	 str         r3, [sp, #0xB0]
  017d0	ea000001	 b           |$LN59@HWInit|
  017d4		 |$LN58@HWInit|
  017d4	e3a03000	 mov         r3, #0
  017d8	e58d30b0	 str         r3, [sp, #0xB0]
  017dc		 |$LN59@HWInit|
  017dc		 |$LN15@HWInit|
  017dc		 |$skipTXDMA$45381|

; 1789 : 
; 1790 :     }
; 1791 : skipTXDMA:
; 1792 : 
; 1793 :     pPdd->RxDmaInfo = NULL; // init RX DMA not used

  017dc	e59d3018	 ldr         r3, [sp, #0x18]
  017e0	e2832f49	 add         r2, r3, #0x49, 30
  017e4	e3a03000	 mov         r3, #0
  017e8	e5823000	 str         r3, [r2]

; 1794 :     pPdd->hRxDmaChannel = NULL;

  017ec	e59d3018	 ldr         r3, [sp, #0x18]
  017f0	e2832f4b	 add         r2, r3, #0x4B, 30
  017f4	e3a03000	 mov         r3, #0
  017f8	e5823000	 str         r3, [r2]

; 1795 : 
; 1796 :     DEBUGMSG(ZONE_INIT, (L"HWInit: RxDmaRequest= %d\n", pPdd->RxDmaRequest));

  017fc	e59f35e0	 ldr         r3, [pc, #0x5E0]
  01800	e5933440	 ldr         r3, [r3, #0x440]
  01804	e3130001	 tst         r3, #1
  01808	0a000007	 beq         |$LN60@HWInit|
  0180c	e59d3018	 ldr         r3, [sp, #0x18]
  01810	e2833f43	 add         r3, r3, #0x43, 30
  01814	e5931000	 ldr         r1, [r3]
  01818	e59f05f8	 ldr         r0, [pc, #0x5F8]
  0181c	eb000000	 bl          NKDbgPrintfW
  01820	e3a03001	 mov         r3, #1
  01824	e58d30b4	 str         r3, [sp, #0xB4]
  01828	ea000001	 b           |$LN61@HWInit|
  0182c		 |$LN60@HWInit|
  0182c	e3a03000	 mov         r3, #0
  01830	e58d30b4	 str         r3, [sp, #0xB4]
  01834		 |$LN61@HWInit|

; 1797 : 
; 1798 :     // Should driver use DMA for RX?
; 1799 :     if (pPdd->RxDmaRequest == -1)

  01834	e59d3018	 ldr         r3, [sp, #0x18]
  01838	e2833f43	 add         r3, r3, #0x43, 30
  0183c	e5933000	 ldr         r3, [r3]
  01840	e3730001	 cmn         r3, #1
  01844	1a000000	 bne         |$LN10@HWInit|

; 1800 :         {
; 1801 :             RETAILMSG(FALSE, (L"RX - DMA Disabled\r\n"));
; 1802 :             goto skipRXDMA; // use FIFO, not DMA for RX.

  01848	ea0000b6	 b           |$skipRXDMA$45416|
  0184c		 |$LN10@HWInit|

; 1803 :         }
; 1804 : 
; 1805 :     // allocate dma channel
; 1806 :     pPdd->hRxDmaChannel = DmaAllocateChannel(DMA_TYPE_SYSTEM);

  0184c	e3a00000	 mov         r0, #0
  01850	eb000000	 bl          DmaAllocateChannel
  01854	e58d00b8	 str         r0, [sp, #0xB8]
  01858	e59d3018	 ldr         r3, [sp, #0x18]
  0185c	e2832f4b	 add         r2, r3, #0x4B, 30
  01860	e59d30b8	 ldr         r3, [sp, #0xB8]
  01864	e5823000	 str         r3, [r2]

; 1807 :     if (pPdd->hRxDmaChannel != NULL)

  01868	e59d3018	 ldr         r3, [sp, #0x18]
  0186c	e2833f4b	 add         r3, r3, #0x4B, 30
  01870	e5933000	 ldr         r3, [r3]
  01874	e3530000	 cmp         r3, #0
  01878	0a0000aa	 beq         |$LN9@HWInit|

; 1808 :     {
; 1809 : 
; 1810 :         pPdd->RxDmaInfo = LocalAlloc(LMEM_ZEROINIT,sizeof(DmaDataInfo_t));

  0187c	e3a01018	 mov         r1, #0x18
  01880	e3a00040	 mov         r0, #0x40
  01884	eb000000	 bl          LocalAlloc
  01888	e58d00bc	 str         r0, [sp, #0xBC]
  0188c	e59d3018	 ldr         r3, [sp, #0x18]
  01890	e2832f49	 add         r2, r3, #0x49, 30
  01894	e59d30bc	 ldr         r3, [sp, #0xBC]
  01898	e5823000	 str         r3, [r2]

; 1811 :         if(!pPdd->RxDmaInfo)

  0189c	e59d3018	 ldr         r3, [sp, #0x18]
  018a0	e2833f49	 add         r3, r3, #0x49, 30
  018a4	e5933000	 ldr         r3, [r3]
  018a8	e3530000	 cmp         r3, #0
  018ac	1a00000b	 bne         |$LN8@HWInit|

; 1812 :         {
; 1813 :             DEBUGMSG(ZONE_ERROR, (L"ERROR: HWInit: "
; 1814 :                 L"Cannot allocate DMA on RX\r\n"
; 1815 :                 ));

  018b0	e59f352c	 ldr         r3, [pc, #0x52C]
  018b4	e5933440	 ldr         r3, [r3, #0x440]
  018b8	e3130902	 tst         r3, #2, 18
  018bc	0a000004	 beq         |$LN62@HWInit|
  018c0	e59f054c	 ldr         r0, [pc, #0x54C]
  018c4	eb000000	 bl          NKDbgPrintfW
  018c8	e3a03001	 mov         r3, #1
  018cc	e58d30c0	 str         r3, [sp, #0xC0]
  018d0	ea000001	 b           |$LN63@HWInit|
  018d4		 |$LN62@HWInit|
  018d4	e3a03000	 mov         r3, #0
  018d8	e58d30c0	 str         r3, [sp, #0xC0]
  018dc		 |$LN63@HWInit|

; 1816 :             goto skipRXDMA;

  018dc	ea000091	 b           |$skipRXDMA$45416|
  018e0		 |$LN8@HWInit|

; 1817 :         }
; 1818 : 
; 1819 :         if (pPdd->RxDmaBufferSize < MAX_RX_SERIALDMA_FRAMESIZE)

  018e0	e59d3018	 ldr         r3, [sp, #0x18]
  018e4	e2833e11	 add         r3, r3, #0x11, 28
  018e8	e5933000	 ldr         r3, [r3]
  018ec	e353003f	 cmp         r3, #0x3F
  018f0	2a000014	 bcs         |$LN7@HWInit|

; 1820 :         {
; 1821 :             DEBUGMSG(ZONE_ERROR, (L"ERROR: HWInit: "
; 1822 :                 L"RxDmaBufferSize must be at least %u bytes\r\n",
; 1823 :                 MAX_TX_SERIALDMA_FRAMESIZE
; 1824 :                 ));

  018f4	e59f34e8	 ldr         r3, [pc, #0x4E8]
  018f8	e5933440	 ldr         r3, [r3, #0x440]
  018fc	e3130902	 tst         r3, #2, 18
  01900	0a000005	 beq         |$LN64@HWInit|
  01904	e3a0103f	 mov         r1, #0x3F
  01908	e59f0500	 ldr         r0, [pc, #0x500]
  0190c	eb000000	 bl          NKDbgPrintfW
  01910	e3a03001	 mov         r3, #1
  01914	e58d30c4	 str         r3, [sp, #0xC4]
  01918	ea000001	 b           |$LN65@HWInit|
  0191c		 |$LN64@HWInit|
  0191c	e3a03000	 mov         r3, #0
  01920	e58d30c4	 str         r3, [sp, #0xC4]
  01924		 |$LN65@HWInit|

; 1825 :             LocalFree(pPdd->RxDmaInfo);

  01924	e59d3018	 ldr         r3, [sp, #0x18]
  01928	e2833f49	 add         r3, r3, #0x49, 30
  0192c	e5930000	 ldr         r0, [r3]
  01930	eb000000	 bl          LocalFree

; 1826 :             pPdd->RxDmaInfo = NULL;

  01934	e59d3018	 ldr         r3, [sp, #0x18]
  01938	e2832f49	 add         r2, r3, #0x49, 30
  0193c	e3a03000	 mov         r3, #0
  01940	e5823000	 str         r3, [r2]

; 1827 :             goto skipRXDMA;

  01944	ea000077	 b           |$skipRXDMA$45416|
  01948		 |$LN7@HWInit|

; 1828 :         }
; 1829 : 
; 1830 :         if (pPdd->dwRxFifoTriggerLevel > UART_FIFO_SIZE)

  01948	e59d3018	 ldr         r3, [sp, #0x18]
  0194c	e2833f55	 add         r3, r3, #0x55, 30
  01950	e5933000	 ldr         r3, [r3]
  01954	e3530040	 cmp         r3, #0x40
  01958	9a000010	 bls         |$LN6@HWInit|

; 1831 :         {
; 1832 :             DEBUGMSG(ZONE_INIT, (L"HWInit: "
; 1833 :                 L"RxFifoTriggerLevel must be less then FIFO size %d. Reset to default trigger level %d.\r\n",
; 1834 :                 UART_FIFO_SIZE, DEFAULT_RX_FIFO_TRIGGER_LEVEL
; 1835 :                 ));

  0195c	e59f3480	 ldr         r3, [pc, #0x480]
  01960	e5933440	 ldr         r3, [r3, #0x440]
  01964	e3130001	 tst         r3, #1
  01968	0a000006	 beq         |$LN66@HWInit|
  0196c	e3a02020	 mov         r2, #0x20
  01970	e3a01040	 mov         r1, #0x40
  01974	e59f0490	 ldr         r0, [pc, #0x490]
  01978	eb000000	 bl          NKDbgPrintfW
  0197c	e3a03001	 mov         r3, #1
  01980	e58d30c8	 str         r3, [sp, #0xC8]
  01984	ea000001	 b           |$LN67@HWInit|
  01988		 |$LN66@HWInit|
  01988	e3a03000	 mov         r3, #0
  0198c	e58d30c8	 str         r3, [sp, #0xC8]
  01990		 |$LN67@HWInit|

; 1836 :             pPdd->dwRxFifoTriggerLevel = DEFAULT_RX_FIFO_TRIGGER_LEVEL;

  01990	e59d3018	 ldr         r3, [sp, #0x18]
  01994	e2832f55	 add         r2, r3, #0x55, 30
  01998	e3a03020	 mov         r3, #0x20
  0199c	e5823000	 str         r3, [r2]
  019a0		 |$LN6@HWInit|

; 1837 :         }
; 1838 : 
; 1839 :         // Allocate DMA receive buffer. We need to allocate a few bytes more than we should
; 1840 :         // because the total number of bytes in a DMA transfer must be equal to mutliple of
; 1841 :         // frame size. In our case, the frame size is never greater than the FIFO size, so 
; 1842 :         // we simply allocate extra 64 byte (FIFO size) for the DMA buffer.
; 1843 :         pPdd->pRxDmaBuffer = AllocPhysMem(
; 1844 :             pPdd->RxDmaBufferSize + UART_FIFO_SIZE, PAGE_READWRITE|PAGE_NOCACHE, 0, 0,
; 1845 :             &pPdd->paRxDmaBuffer
; 1846 :             );

  019a0	e59d3018	 ldr         r3, [sp, #0x18]
  019a4	e2833f46	 add         r3, r3, #0x46, 30
  019a8	e58d3000	 str         r3, [sp]
  019ac	e3a03000	 mov         r3, #0
  019b0	e3a02000	 mov         r2, #0
  019b4	e3a01f81	 mov         r1, #0x81, 30
  019b8	e59d0018	 ldr         r0, [sp, #0x18]
  019bc	e2800e11	 add         r0, r0, #0x11, 28
  019c0	e5900000	 ldr         r0, [r0]
  019c4	e2800040	 add         r0, r0, #0x40
  019c8	eb000000	 bl          AllocPhysMem
  019cc	e58d00cc	 str         r0, [sp, #0xCC]
  019d0	e59d3018	 ldr         r3, [sp, #0x18]
  019d4	e2832f45	 add         r2, r3, #0x45, 30
  019d8	e59d30cc	 ldr         r3, [sp, #0xCC]
  019dc	e5823000	 str         r3, [r2]

; 1847 : 
; 1848 :         if (pPdd->pRxDmaBuffer == NULL)

  019e0	e59d3018	 ldr         r3, [sp, #0x18]
  019e4	e2833f45	 add         r3, r3, #0x45, 30
  019e8	e5933000	 ldr         r3, [r3]
  019ec	e3530000	 cmp         r3, #0
  019f0	1a000016	 bne         |$LN5@HWInit|

; 1849 :         {
; 1850 :             DEBUGMSG(ZONE_ERROR, (L"ERROR: HWInit: "
; 1851 :                 L"Failed allocating transfer buffer (size %u)\r\n",
; 1852 :                 pPdd->RxDmaBufferSize
; 1853 :                 ));

  019f4	e59f33e8	 ldr         r3, [pc, #0x3E8]
  019f8	e5933440	 ldr         r3, [r3, #0x440]
  019fc	e3130902	 tst         r3, #2, 18
  01a00	0a000007	 beq         |$LN68@HWInit|
  01a04	e59d3018	 ldr         r3, [sp, #0x18]
  01a08	e2833e11	 add         r3, r3, #0x11, 28
  01a0c	e5931000	 ldr         r1, [r3]
  01a10	e59f03f0	 ldr         r0, [pc, #0x3F0]
  01a14	eb000000	 bl          NKDbgPrintfW
  01a18	e3a03001	 mov         r3, #1
  01a1c	e58d30d0	 str         r3, [sp, #0xD0]
  01a20	ea000001	 b           |$LN69@HWInit|
  01a24		 |$LN68@HWInit|
  01a24	e3a03000	 mov         r3, #0
  01a28	e58d30d0	 str         r3, [sp, #0xD0]
  01a2c		 |$LN69@HWInit|

; 1854 :             LocalFree(pPdd->RxDmaInfo);

  01a2c	e59d3018	 ldr         r3, [sp, #0x18]
  01a30	e2833f49	 add         r3, r3, #0x49, 30
  01a34	e5930000	 ldr         r0, [r3]
  01a38	eb000000	 bl          LocalFree

; 1855 :             pPdd->RxDmaInfo = NULL;

  01a3c	e59d3018	 ldr         r3, [sp, #0x18]
  01a40	e2832f49	 add         r2, r3, #0x49, 30
  01a44	e3a03000	 mov         r3, #0
  01a48	e5823000	 str         r3, [r2]

; 1856 :             goto skipRXDMA;

  01a4c	ea000035	 b           |$skipRXDMA$45416|
  01a50		 |$LN5@HWInit|

; 1857 :         }
; 1858 :         DEBUGMSG(ZONE_INIT, (L"OMAP35XX RX DMA buffer allocated\n"));

  01a50	e59f338c	 ldr         r3, [pc, #0x38C]
  01a54	e5933440	 ldr         r3, [r3, #0x440]
  01a58	e3130001	 tst         r3, #1
  01a5c	0a000004	 beq         |$LN70@HWInit|
  01a60	e59f039c	 ldr         r0, [pc, #0x39C]
  01a64	eb000000	 bl          NKDbgPrintfW
  01a68	e3a03001	 mov         r3, #1
  01a6c	e58d30d4	 str         r3, [sp, #0xD4]
  01a70	ea000001	 b           |$LN71@HWInit|
  01a74		 |$LN70@HWInit|
  01a74	e3a03000	 mov         r3, #0
  01a78	e58d30d4	 str         r3, [sp, #0xD4]
  01a7c		 |$LN71@HWInit|

; 1859 :         //Rx Event to get End of Block/Frame
; 1860 :         pPdd->hEventRxIstDma = CreateEvent(NULL, FALSE, FALSE, NULL);

  01a7c	e3a03000	 mov         r3, #0
  01a80	e3a02000	 mov         r2, #0
  01a84	e3a01000	 mov         r1, #0
  01a88	e3a00000	 mov         r0, #0
  01a8c	eb000000	 bl          CreateEventW
  01a90	e58d00d8	 str         r0, [sp, #0xD8]
  01a94	e59d3018	 ldr         r3, [sp, #0x18]
  01a98	e2832f4a	 add         r2, r3, #0x4A, 30
  01a9c	e59d30d8	 ldr         r3, [sp, #0xD8]
  01aa0	e5823000	 str         r3, [r2]

; 1861 : 
; 1862 :         // registering for system interrupt is deferred to the IST thread
; 1863 :         // spawn thread
; 1864 :         pPdd->hRxThread = CreateThread(NULL, 0, IST_RxDMA, pPdd, 0, NULL);

  01aa4	e3a03000	 mov         r3, #0
  01aa8	e58d3004	 str         r3, [sp, #4]
  01aac	e3a03000	 mov         r3, #0
  01ab0	e58d3000	 str         r3, [sp]
  01ab4	e59d3018	 ldr         r3, [sp, #0x18]
  01ab8	e59f2340	 ldr         r2, [pc, #0x340]
  01abc	e3a01000	 mov         r1, #0
  01ac0	e3a00000	 mov         r0, #0
  01ac4	eb000000	 bl          CreateThread
  01ac8	e58d00dc	 str         r0, [sp, #0xDC]
  01acc	e59d3018	 ldr         r3, [sp, #0x18]
  01ad0	e2832f4f	 add         r2, r3, #0x4F, 30
  01ad4	e59d30dc	 ldr         r3, [sp, #0xDC]
  01ad8	e5823000	 str         r3, [r2]

; 1865 :         if (pPdd->hRxThread == NULL)

  01adc	e59d3018	 ldr         r3, [sp, #0x18]
  01ae0	e2833f4f	 add         r3, r3, #0x4F, 30
  01ae4	e5933000	 ldr         r3, [r3]
  01ae8	e3530000	 cmp         r3, #0
  01aec	1a00000b	 bne         |$LN4@HWInit|

; 1866 :         {
; 1867 :             DEBUGMSG(ZONE_ERROR, (L"ERROR: HWInit: "
; 1868 :                 L"Failed to create DMA RX thread\r\n"
; 1869 :                 ));

  01af0	e59f32ec	 ldr         r3, [pc, #0x2EC]
  01af4	e5933440	 ldr         r3, [r3, #0x440]
  01af8	e3130902	 tst         r3, #2, 18
  01afc	0a000004	 beq         |$LN72@HWInit|
  01b00	e59f02f4	 ldr         r0, [pc, #0x2F4]
  01b04	eb000000	 bl          NKDbgPrintfW
  01b08	e3a03001	 mov         r3, #1
  01b0c	e58d30e0	 str         r3, [sp, #0xE0]
  01b10	ea000001	 b           |$LN73@HWInit|
  01b14		 |$LN72@HWInit|
  01b14	e3a03000	 mov         r3, #0
  01b18	e58d30e0	 str         r3, [sp, #0xE0]
  01b1c		 |$LN73@HWInit|

; 1870 :             goto cleanUp;

  01b1c	ea00008d	 b           |$cleanUp$45342|
  01b20		 |$LN4@HWInit|

; 1871 :         }
; 1872 :         // Rx DMA configuration settings
; 1873 :         InitializeRxDMA(pPdd);

  01b20	e59d0018	 ldr         r0, [sp, #0x18]
  01b24	eb000000	 bl          InitializeRxDMA
  01b28		 |$LN9@HWInit|
  01b28		 |$skipRXDMA$45416|

; 1874 :     }
; 1875 : skipRXDMA:
; 1876 :     // Map interrupt
; 1877 :     if (!KernelIoControl(
; 1878 :         IOCTL_HAL_REQUEST_SYSINTR, &(pPdd->irq), sizeof(pPdd->irq), &pPdd->sysIntr,
; 1879 :         sizeof(pPdd->sysIntr), NULL
; 1880 :         )) {

  01b28	e3a03000	 mov         r3, #0
  01b2c	e58d3004	 str         r3, [sp, #4]
  01b30	e3a03004	 mov         r3, #4
  01b34	e58d3000	 str         r3, [sp]
  01b38	e59d3018	 ldr         r3, [sp, #0x18]
  01b3c	e2833028	 add         r3, r3, #0x28
  01b40	e3a02004	 mov         r2, #4
  01b44	e59d1018	 ldr         r1, [sp, #0x18]
  01b48	e2811008	 add         r1, r1, #8
  01b4c	e59f02a4	 ldr         r0, [pc, #0x2A4]
  01b50	eb000000	 bl          KernelIoControl
  01b54	e58d00e4	 str         r0, [sp, #0xE4]
  01b58	e59d30e4	 ldr         r3, [sp, #0xE4]
  01b5c	e3530000	 cmp         r3, #0
  01b60	1a00000e	 bne         |$LN3@HWInit|

; 1881 :             DEBUGMSG(ZONE_ERROR, (L"ERROR: HWInit: "
; 1882 :                 L"Failed obtain SYSINTR for IRQ %d\r\n", pPdd->irq
; 1883 :                 ));

  01b64	e59f3278	 ldr         r3, [pc, #0x278]
  01b68	e5933440	 ldr         r3, [r3, #0x440]
  01b6c	e3130902	 tst         r3, #2, 18
  01b70	0a000007	 beq         |$LN74@HWInit|
  01b74	e59d3018	 ldr         r3, [sp, #0x18]
  01b78	e2833008	 add         r3, r3, #8
  01b7c	e5931000	 ldr         r1, [r3]
  01b80	e59f026c	 ldr         r0, [pc, #0x26C]
  01b84	eb000000	 bl          NKDbgPrintfW
  01b88	e3a03001	 mov         r3, #1
  01b8c	e58d30e8	 str         r3, [sp, #0xE8]
  01b90	ea000001	 b           |$LN75@HWInit|
  01b94		 |$LN74@HWInit|
  01b94	e3a03000	 mov         r3, #0
  01b98	e58d30e8	 str         r3, [sp, #0xE8]
  01b9c		 |$LN75@HWInit|

; 1884 :             goto cleanUp;

  01b9c	ea00006d	 b           |$cleanUp$45342|
  01ba0		 |$LN3@HWInit|

; 1885 :     }
; 1886 : 
; 1887 :     // Save it to HW object
; 1888 :     pHWObj->dwIntID = pPdd->sysIntr;

  01ba0	e59d3018	 ldr         r3, [sp, #0x18]
  01ba4	e2831028	 add         r1, r3, #0x28
  01ba8	e59d310c	 ldr         r3, [sp, #0x10C]
  01bac	e2832004	 add         r2, r3, #4
  01bb0	e5913000	 ldr         r3, [r1]
  01bb4	e5823000	 str         r3, [r2]

; 1889 : 
; 1890 :     // Create sync objects
; 1891 :     InitializeCriticalSection(&pPdd->hwCS);

  01bb8	e59d3018	 ldr         r3, [sp, #0x18]
  01bbc	e2830098	 add         r0, r3, #0x98
  01bc0	eb000000	 bl          InitializeCriticalSection

; 1892 :     InitializeCriticalSection(&pPdd->txCS);

  01bc4	e59d3018	 ldr         r3, [sp, #0x18]
  01bc8	e28300ac	 add         r0, r3, #0xAC
  01bcc	eb000000	 bl          InitializeCriticalSection

; 1893 :     InitializeCriticalSection(&pPdd->RxUpdatePtrCS);

  01bd0	e59d3018	 ldr         r3, [sp, #0x18]
  01bd4	e28300c0	 add         r0, r3, #0xC0
  01bd8	eb000000	 bl          InitializeCriticalSection

; 1894 :     InitializeCriticalSection(&pPdd->powerCS);

  01bdc	e59d3018	 ldr         r3, [sp, #0x18]
  01be0	e2830038	 add         r0, r3, #0x38
  01be4	eb000000	 bl          InitializeCriticalSection

; 1895 :     
; 1896 :     pPdd->txEvent = CreateEvent(0, FALSE, FALSE, NULL);

  01be8	e3a03000	 mov         r3, #0
  01bec	e3a02000	 mov         r2, #0
  01bf0	e3a01000	 mov         r1, #0
  01bf4	e3a00000	 mov         r0, #0
  01bf8	eb000000	 bl          CreateEventW
  01bfc	e58d00ec	 str         r0, [sp, #0xEC]
  01c00	e59d3018	 ldr         r3, [sp, #0x18]
  01c04	e28320d4	 add         r2, r3, #0xD4
  01c08	e59d30ec	 ldr         r3, [sp, #0xEC]
  01c0c	e5823000	 str         r3, [r2]

; 1897 :     if (pPdd->txEvent == NULL)

  01c10	e59d3018	 ldr         r3, [sp, #0x18]
  01c14	e28330d4	 add         r3, r3, #0xD4
  01c18	e5933000	 ldr         r3, [r3]
  01c1c	e3530000	 cmp         r3, #0
  01c20	1a00000b	 bne         |$LN2@HWInit|

; 1898 :     {
; 1899 :         DEBUGMSG(ZONE_ERROR, (L"ERROR: HWInit: "
; 1900 :             L"Failed create event\r\n"
; 1901 :             ));

  01c24	e59f31b8	 ldr         r3, [pc, #0x1B8]
  01c28	e5933440	 ldr         r3, [r3, #0x440]
  01c2c	e3130902	 tst         r3, #2, 18
  01c30	0a000004	 beq         |$LN76@HWInit|
  01c34	e59f01b4	 ldr         r0, [pc, #0x1B4]
  01c38	eb000000	 bl          NKDbgPrintfW
  01c3c	e3a03001	 mov         r3, #1
  01c40	e58d30f0	 str         r3, [sp, #0xF0]
  01c44	ea000001	 b           |$LN77@HWInit|
  01c48		 |$LN76@HWInit|
  01c48	e3a03000	 mov         r3, #0
  01c4c	e58d30f0	 str         r3, [sp, #0xF0]
  01c50		 |$LN77@HWInit|

; 1902 :         goto cleanUp;

  01c50	ea000040	 b           |$cleanUp$45342|
  01c54		 |$LN2@HWInit|

; 1903 :     }
; 1904 : 
; 1905 :     // Device is initially closed
; 1906 :     pPdd->open = FALSE;

  01c54	e59d3018	 ldr         r3, [sp, #0x18]
  01c58	e2832054	 add         r2, r3, #0x54
  01c5c	e3a03000	 mov         r3, #0
  01c60	e5823000	 str         r3, [r2]

; 1907 :     SetDefaultDCB(pPdd);

  01c64	e59d0018	 ldr         r0, [sp, #0x18]
  01c68	eb000000	 bl          SetDefaultDCB

; 1908 : 
; 1909 :     // Initialize device power state
; 1910 :     pPdd->externalDX = D0;

  01c6c	e59d3018	 ldr         r3, [sp, #0x18]
  01c70	e2832034	 add         r2, r3, #0x34
  01c74	e3a03000	 mov         r3, #0
  01c78	e5823000	 str         r3, [r2]

; 1911 :     pPdd->currentDX = D4;

  01c7c	e59d3018	 ldr         r3, [sp, #0x18]
  01c80	e2832030	 add         r2, r3, #0x30
  01c84	e3a03004	 mov         r3, #4
  01c88	e5823000	 str         r3, [r2]

; 1912 :     SetPower(pPdd, D0);

  01c8c	e3a01000	 mov         r1, #0
  01c90	e59d0018	 ldr         r0, [sp, #0x18]
  01c94	eb000000	 bl          SetPower

; 1913 : 
; 1914 :     EnterCriticalSection(&pPdd->hwCS);

  01c98	e59d3018	 ldr         r3, [sp, #0x18]
  01c9c	e2830098	 add         r0, r3, #0x98
  01ca0	eb000000	 bl          EnterCriticalSection

; 1915 : 
; 1916 :     pPdd->bRxDMASignaled = 0;

  01ca4	e59d3018	 ldr         r3, [sp, #0x18]
  01ca8	e2832f51	 add         r2, r3, #0x51, 30
  01cac	e3a03000	 mov         r3, #0
  01cb0	e5823000	 str         r3, [r2]

; 1917 :     pPdd->bRxWrapped     = FALSE;

  01cb4	e59d3018	 ldr         r3, [sp, #0x18]
  01cb8	e2832f52	 add         r2, r3, #0x52, 30
  01cbc	e3a03000	 mov         r3, #0
  01cc0	e5823000	 str         r3, [r2]

; 1918 :     pPdd->pRxDMALastWrite = 0;

  01cc4	e59d3018	 ldr         r3, [sp, #0x18]
  01cc8	e2832f53	 add         r2, r3, #0x53, 30
  01ccc	e3a03000	 mov         r3, #0
  01cd0	e5823000	 str         r3, [r2]

; 1919 :     pPdd->bDmaInitialize = FALSE;

  01cd4	e59d3018	 ldr         r3, [sp, #0x18]
  01cd8	e2832e15	 add         r2, r3, #0x15, 28
  01cdc	e3a03000	 mov         r3, #0
  01ce0	e5823000	 str         r3, [r2]

; 1920 : 
; 1921 :     InitializeUART(pPdd);

  01ce4	e59d0018	 ldr         r0, [sp, #0x18]
  01ce8	eb000000	 bl          InitializeUART

; 1922 : 
; 1923 :     LeaveCriticalSection(&pPdd->hwCS);

  01cec	e59d3018	 ldr         r3, [sp, #0x18]
  01cf0	e2830098	 add         r0, r3, #0x98
  01cf4	eb000000	 bl          LeaveCriticalSection

; 1924 : 
; 1925 :     // Set device to D3
; 1926 :     pPdd->externalDX = D3;

  01cf8	e59d3018	 ldr         r3, [sp, #0x18]
  01cfc	e2832034	 add         r2, r3, #0x34
  01d00	e3a03003	 mov         r3, #3
  01d04	e5823000	 str         r3, [r2]

; 1927 :     SetPower(pPdd, D3);

  01d08	e3a01003	 mov         r1, #3
  01d0c	e59d0018	 ldr         r0, [sp, #0x18]
  01d10	eb000000	 bl          SetPower

; 1928 : 
; 1929 :     // Save MDD context for callback
; 1930 :     pPdd->pMdd = pMdd;

  01d14	e59d3018	 ldr         r3, [sp, #0x18]
  01d18	e2832050	 add         r2, r3, #0x50
  01d1c	e59d3108	 ldr         r3, [sp, #0x108]
  01d20	e5823000	 str         r3, [r2]

; 1931 : 
; 1932 :     // Initialization succeeded
; 1933 :     rc = TRUE;

  01d24	e3a03001	 mov         r3, #1
  01d28	e58d3008	 str         r3, [sp, #8]

; 1934 :     DEBUGMSG(ZONE_INIT, (L"HWInit: Initialization succeeded\r\n"));

  01d2c	e59f30b0	 ldr         r3, [pc, #0xB0]
  01d30	e5933440	 ldr         r3, [r3, #0x440]
  01d34	e3130001	 tst         r3, #1
  01d38	0a000004	 beq         |$LN78@HWInit|
  01d3c	e59f00a8	 ldr         r0, [pc, #0xA8]
  01d40	eb000000	 bl          NKDbgPrintfW
  01d44	e3a03001	 mov         r3, #1
  01d48	e58d30f4	 str         r3, [sp, #0xF4]
  01d4c	ea000001	 b           |$LN79@HWInit|
  01d50		 |$LN78@HWInit|
  01d50	e3a03000	 mov         r3, #0
  01d54	e58d30f4	 str         r3, [sp, #0xF4]
  01d58		 |$LN79@HWInit|
  01d58		 |$cleanUp$45342|

; 1935 : 
; 1936 : cleanUp:
; 1937 :     if (!rc && (pPdd != NULL))

  01d58	e59d3008	 ldr         r3, [sp, #8]
  01d5c	e3530000	 cmp         r3, #0
  01d60	1a000008	 bne         |$LN1@HWInit|
  01d64	e59d3018	 ldr         r3, [sp, #0x18]
  01d68	e3530000	 cmp         r3, #0
  01d6c	0a000005	 beq         |$LN1@HWInit|

; 1938 :     {
; 1939 :         RETAILMSG(1,(TEXT("HWInit Failed!! Calling HWDeinit\r\n")));

  01d70	e59f0070	 ldr         r0, [pc, #0x70]
  01d74	eb000000	 bl          NKDbgPrintfW

; 1940 :         HWDeinit(pPdd);

  01d78	e59d0018	 ldr         r0, [sp, #0x18]
  01d7c	eb000000	 bl          HWDeinit

; 1941 :         pPdd = NULL;

  01d80	e3a03000	 mov         r3, #0
  01d84	e58d3018	 str         r3, [sp, #0x18]
  01d88		 |$LN1@HWInit|

; 1942 :     }
; 1943 :     DEBUGMSG(ZONE_OPEN||ZONE_FUNCTION, (L"-HWInit(pPdd = 0x%08x)\r\n", pPdd));

  01d88	e59f3054	 ldr         r3, [pc, #0x54]
  01d8c	e5933440	 ldr         r3, [r3, #0x440]
  01d90	e3130002	 tst         r3, #2
  01d94	1a000006	 bne         |$LN80@HWInit|
  01d98	e59f3044	 ldr         r3, [pc, #0x44]
  01d9c	e5933440	 ldr         r3, [r3, #0x440]
  01da0	e3130a02	 tst         r3, #2, 20
  01da4	1a000002	 bne         |$LN80@HWInit|
  01da8	e3a03000	 mov         r3, #0
  01dac	e58d30f8	 str         r3, [sp, #0xF8]
  01db0	ea000004	 b           |$LN81@HWInit|
  01db4		 |$LN80@HWInit|
  01db4	e59d1018	 ldr         r1, [sp, #0x18]
  01db8	e59f0020	 ldr         r0, [pc, #0x20]
  01dbc	eb000000	 bl          NKDbgPrintfW
  01dc0	e3a03001	 mov         r3, #1
  01dc4	e58d30f8	 str         r3, [sp, #0xF8]
  01dc8		 |$LN81@HWInit|

; 1944 : 
; 1945 :     return pPdd;

  01dc8	e59d3018	 ldr         r3, [sp, #0x18]
  01dcc	e58d3034	 str         r3, [sp, #0x34]

; 1946 : }

  01dd0	e59d0034	 ldr         r0, [sp, #0x34]
  01dd4	e28dd0fc	 add         sp, sp, #0xFC
  01dd8	e89d6000	 ldmia       sp, {sp, lr}
  01ddc	e12fff1e	 bx          lr
  01de0		 |$LN85@HWInit|
  01de0		 |$LN86@HWInit|
  01de0	00000000	 DCD         |??_C@_1DC@JGFCNLHE@?$AA?9?$AAH?$AAW?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AAp?$AAP?$AAd?$AAd?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  01de4		 |$LN87@HWInit|
  01de4	00000000	 DCD         |dpCurSettings|
  01de8		 |$LN88@HWInit|
  01de8	00000000	 DCD         |??_C@_1EG@OEGIILDN@?$AAH?$AAW?$AAI?$AAn?$AAi?$AAt?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$CB?$AA?$CB?$AA?5?$AAC?$AAa?$AAl?$AAl?$AAi?$AAn?$AAg?$AA?5?$AAH?$AAW?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt@|
  01dec		 |$LN89@HWInit|
  01dec	00000000	 DCD         |??_C@_1EG@ICLGMIEH@?$AAH?$AAW?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAs?$AAu?$AAc?$AAc?$AAe?$AAe?$AAd?$AAe?$AAd@|
  01df0		 |$LN90@HWInit|
  01df0	00000000	 DCD         |??_C@_1EK@FHJCOLEM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAH?$AAW?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAe?$AAv?$AAe@|
  01df4		 |$LN91@HWInit|
  01df4	00000000	 DCD         |??_C@_1GE@PPGCIJJA@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAH?$AAW?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAo?$AAb?$AAt?$AAa?$AAi?$AAn?$AA?5?$AAS?$AAY?$AAS@|
  01df8		 |$LN92@HWInit|
  01df8	01010098	 DCD         0x1010098
  01dfc		 |$LN93@HWInit|
  01dfc	00000000	 DCD         |??_C@_1GA@FAAEJOHA@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAH?$AAW?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5@|
  01e00		 |$LN94@HWInit|
  01e00	00000000	 DCD         |IST_RxDMA|
  01e04		 |$LN95@HWInit|
  01e04	00000000	 DCD         |??_C@_1EE@FMEIFNEG@?$AAO?$AAM?$AAA?$AAP?$AA3?$AA5?$AAX?$AAX?$AA?5?$AAR?$AAX?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAd@|
  01e08		 |$LN96@HWInit|
  01e08	00000000	 DCD         |??_C@_1HK@BBLDLPBP@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAH?$AAW?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAi?$AAn?$AAg@|
  01e0c		 |$LN97@HWInit|
  01e0c	00000000	 DCD         |??_C@_1MA@JDGKAMEC@?$AAH?$AAW?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAR?$AAx?$AAF?$AAi?$AAf?$AAo?$AAT?$AAr?$AAi?$AAg?$AAg?$AAe?$AAr?$AAL?$AAe?$AAv?$AAe?$AAl?$AA?5?$AAm?$AAu?$AAs?$AAt?$AA?5@|
  01e10		 |$LN98@HWInit|
  01e10	00000000	 DCD         |??_C@_1HG@BHIHOLB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAH?$AAW?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAR?$AAx?$AAD?$AAm?$AAa?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AAS?$AAi?$AAz?$AAe?$AA?5?$AAm@|
  01e14		 |$LN99@HWInit|
  01e14	00000000	 DCD         |??_C@_1FG@KHBPHCHG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAH?$AAW?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAC?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAD@|
  01e18		 |$LN100@HWInit|
  01e18	00000000	 DCD         |??_C@_1DE@CGCFDINI@?$AAH?$AAW?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAR?$AAx?$AAD?$AAm?$AAa?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?6?$AA?$AA@|
  01e1c		 |$LN101@HWInit|
  01e1c	00000000	 DCD         |??_C@_1EC@EEIOMCNH@?$AAO?$AAM?$AAA?$AAP?$AA3?$AA5?$AAX?$AAX?$AA?5?$AAT?$AAX?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAi?$AAn?$AAi?$AAt?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAe?$AAd?$AA?$AN?$AA?6@|
  01e20		 |$LN102@HWInit|
  01e20	00000000	 DCD         |??_C@_1FE@MELLBIFK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAe?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAT?$AAX?$AA?5?$AAi?$AAn@|
  01e24		 |$LN103@HWInit|
  01e24	00000000	 DCD         |??_C@_1EG@GOJKEHDB@?$AAO?$AAM?$AAA?$AAP?$AA3?$AA5?$AAX?$AAX?$AA?5?$AAT?$AAX?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAd@|
  01e28		 |$LN104@HWInit|
  01e28	00000000	 DCD         |??_C@_1GO@JHKBGJGP@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAH?$AAW?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAi?$AAn?$AAg@|
  01e2c		 |$LN105@HWInit|
  01e2c	00000000	 DCD         |??_C@_1HG@CKJGMIKG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAH?$AAW?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAT?$AAx?$AAD?$AAm?$AAa?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AAS?$AAi?$AAz?$AAe?$AA?5?$AAm@|
  01e30		 |$LN106@HWInit|
  01e30	00000000	 DCD         |??_C@_1FG@KKABACDB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAH?$AAW?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAC?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAD@|
  01e34		 |$LN107@HWInit|
  01e34	00000000	 DCD         |??_C@_1DE@PLCFDKBA@?$AAO?$AAM?$AAA?$AAP?$AA3?$AA5?$AAX?$AAX?$AA?5?$AAT?$AAX?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAe?$AAn?$AAa?$AAb?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  01e38		 |$LN108@HWInit|
  01e38	00000000	 DCD         |??_C@_1DE@OPOFMPCE@?$AAH?$AAW?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAT?$AAx?$AAD?$AAm?$AAa?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?6?$AA?$AA@|
  01e3c		 |$LN109@HWInit|
  01e3c	00000000	 DCD         |??_C@_1FK@EBCJFPMH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAH?$AAW?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5?$AAg?$AAp@|
  01e40		 |$LN110@HWInit|
  01e40	00000000	 DCD         |??_C@_1GM@KEAJOIJP@?$AAH?$AAW?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAE?$AAx?$AAt?$AAe?$AAr?$AAn?$AAa?$AAl?$AA?5?$AAt?$AAr?$AAa?$AAn?$AAs?$AAc?$AAe?$AAi?$AAv?$AAe?$AAr?$AA?5?$AAc?$AAo?$AAn@|
  01e44		 |$LN111@HWInit|
  01e44	00000000	 DCD         |??_C@_1GG@EBBCDMFK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAH?$AAW?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAm?$AAa?$AAp?$AA?5?$AAp?$AAh?$AAy?$AAs?$AAi?$AAc@|
  01e48		 |$LN112@HWInit|
  01e48	00000000	 DCD         |??_C@_1DM@CGNHFLML@?$AAH?$AAW?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAM?$AAm?$AAM?$AAa?$AAp?$AAI?$AAo?$AAS?$AAp?$AAa?$AAc?$AAe?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?6?$AA?$AA@|
  01e4c		 |$LN113@HWInit|
  01e4c	00000000	 DCD         |??_C@_1FA@IMOKAIMA@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAH?$AAW?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAr?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt@|
  01e50		 |$LN114@HWInit|
  01e50	00000000	 DCD         |??_C@_1IE@GEGDCGKO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAH?$AAW?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAr?$AAe?$AAt?$AAr?$AAi?$AAe?$AAv@|
  01e54		 |$LN115@HWInit|
  01e54	00000000	 DCD         |??_C@_1FO@HLLDLLCK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAH?$AAW?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5?$AAp?$AAa?$AAr?$AAe?$AAn@|
  01e58		 |$LN116@HWInit|
  01e58	00000000	 DCD         |??_C@_1HA@GDAKBEMI@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAH?$AAW?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAd?$AAr?$AAi?$AAv?$AAe@|
  01e5c		 |$LN117@HWInit|
  01e5c	00000000	 DCD         |s_deviceRegParams|
  01e60		 |$LN118@HWInit|
  01e60	00000000	 DCD         |??_C@_1DK@GEEEGFBF@?$AA?$CL?$AAH?$AAW?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CF?$AAs?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  01e64		 |$M46833|

			 ENDP  ; |HWInit|


  00040			 AREA	 |.pdata|, PDATA
|$T46874| DCD	|$LN5@SetDefault|
	DCD	0x40005203
; Function compile flags: /Odtp

  01e64			 AREA	 |.text|, CODE, ARM

  01e64		 |SetDefaultDCB| PROC

; 502  : {

  01e64		 |$LN5@SetDefault|
  01e64	e1a0c00d	 mov         r12, sp
  01e68	e92d0001	 stmdb       sp!, {r0}
  01e6c	e92d5000	 stmdb       sp!, {r12, lr}
  01e70		 |$M46871|

; 503  : 
; 504  :     // Initialize Default DCB
; 505  :     pPdd->dcb.DCBlength = sizeof(pPdd->dcb);

  01e70	e59d3008	 ldr         r3, [sp, #8]
  01e74	e2832058	 add         r2, r3, #0x58
  01e78	e3a0301c	 mov         r3, #0x1C
  01e7c	e5823000	 str         r3, [r2]

; 506  :     pPdd->dcb.BaudRate = 9600;

  01e80	e59d3008	 ldr         r3, [sp, #8]
  01e84	e283205c	 add         r2, r3, #0x5C
  01e88	e3a03d96	 mov         r3, #0x96, 26
  01e8c	e5823000	 str         r3, [r2]

; 507  :     pPdd->dcb.fBinary = TRUE;

  01e90	e59d3008	 ldr         r3, [sp, #8]
  01e94	e2833060	 add         r3, r3, #0x60
  01e98	e5933000	 ldr         r3, [r3]
  01e9c	e3832001	 orr         r2, r3, #1
  01ea0	e59d3008	 ldr         r3, [sp, #8]
  01ea4	e2833060	 add         r3, r3, #0x60
  01ea8	e5832000	 str         r2, [r3]

; 508  :     pPdd->dcb.fParity = FALSE;

  01eac	e59d3008	 ldr         r3, [sp, #8]
  01eb0	e2833060	 add         r3, r3, #0x60
  01eb4	e5932000	 ldr         r2, [r3]
  01eb8	e3e03002	 mvn         r3, #2
  01ebc	e0022003	 and         r2, r2, r3
  01ec0	e59d3008	 ldr         r3, [sp, #8]
  01ec4	e2833060	 add         r3, r3, #0x60
  01ec8	e5832000	 str         r2, [r3]

; 509  :     pPdd->dcb.fOutxCtsFlow = FALSE;

  01ecc	e59d3008	 ldr         r3, [sp, #8]
  01ed0	e2833060	 add         r3, r3, #0x60
  01ed4	e5932000	 ldr         r2, [r3]
  01ed8	e3e03004	 mvn         r3, #4
  01edc	e0022003	 and         r2, r2, r3
  01ee0	e59d3008	 ldr         r3, [sp, #8]
  01ee4	e2833060	 add         r3, r3, #0x60
  01ee8	e5832000	 str         r2, [r3]

; 510  :     pPdd->dcb.fOutxDsrFlow = FALSE;

  01eec	e59d3008	 ldr         r3, [sp, #8]
  01ef0	e2833060	 add         r3, r3, #0x60
  01ef4	e5932000	 ldr         r2, [r3]
  01ef8	e3e03008	 mvn         r3, #8
  01efc	e0022003	 and         r2, r2, r3
  01f00	e59d3008	 ldr         r3, [sp, #8]
  01f04	e2833060	 add         r3, r3, #0x60
  01f08	e5832000	 str         r2, [r3]

; 511  :     pPdd->dcb.fDtrControl = DTR_CONTROL_ENABLE;

  01f0c	e59d3008	 ldr         r3, [sp, #8]
  01f10	e2833060	 add         r3, r3, #0x60
  01f14	e5932000	 ldr         r2, [r3]
  01f18	e3e03030	 mvn         r3, #0x30
  01f1c	e0023003	 and         r3, r2, r3
  01f20	e3832010	 orr         r2, r3, #0x10
  01f24	e59d3008	 ldr         r3, [sp, #8]
  01f28	e2833060	 add         r3, r3, #0x60
  01f2c	e5832000	 str         r2, [r3]

; 512  :     pPdd->dcb.fDsrSensitivity = FALSE;

  01f30	e59d3008	 ldr         r3, [sp, #8]
  01f34	e2833060	 add         r3, r3, #0x60
  01f38	e5932000	 ldr         r2, [r3]
  01f3c	e3e03040	 mvn         r3, #0x40
  01f40	e0022003	 and         r2, r2, r3
  01f44	e59d3008	 ldr         r3, [sp, #8]
  01f48	e2833060	 add         r3, r3, #0x60
  01f4c	e5832000	 str         r2, [r3]

; 513  :     pPdd->dcb.fRtsControl = RTS_CONTROL_ENABLE;

  01f50	e59d3008	 ldr         r3, [sp, #8]
  01f54	e2833060	 add         r3, r3, #0x60
  01f58	e5932000	 ldr         r2, [r3]
  01f5c	e3e03a03	 mvn         r3, #3, 20
  01f60	e0023003	 and         r3, r2, r3
  01f64	e3832a01	 orr         r2, r3, #1, 20
  01f68	e59d3008	 ldr         r3, [sp, #8]
  01f6c	e2833060	 add         r3, r3, #0x60
  01f70	e5832000	 str         r2, [r3]

; 514  :     pPdd->dcb.ByteSize = 8;

  01f74	e59d3008	 ldr         r3, [sp, #8]
  01f78	e283206a	 add         r2, r3, #0x6A
  01f7c	e3a03008	 mov         r3, #8
  01f80	e5c23000	 strb        r3, [r2]

; 515  :     pPdd->dcb.Parity = 0;

  01f84	e59d3008	 ldr         r3, [sp, #8]
  01f88	e283206b	 add         r2, r3, #0x6B
  01f8c	e3a03000	 mov         r3, #0
  01f90	e5c23000	 strb        r3, [r2]

; 516  :     pPdd->dcb.StopBits = 1;

  01f94	e59d3008	 ldr         r3, [sp, #8]
  01f98	e283206c	 add         r2, r3, #0x6C
  01f9c	e3a03001	 mov         r3, #1
  01fa0	e5c23000	 strb        r3, [r2]

; 517  : 
; 518  : }

  01fa4	e89d6000	 ldmia       sp, {sp, lr}
  01fa8	e12fff1e	 bx          lr
  01fac		 |$M46872|

			 ENDP  ; |SetDefaultDCB|


  00048			 AREA	 |.pdata|, PDATA
|$T46879| DCD	|$LN13@Initialize|
	DCD	0x4000d404
; Function compile flags: /Odtp

  01fac			 AREA	 |.text|, CODE, ARM

  01fac		 |InitializeUART| PROC

; 1275 : {

  01fac		 |$LN13@Initialize|
  01fac	e1a0c00d	 mov         r12, sp
  01fb0	e92d0001	 stmdb       sp!, {r0}
  01fb4	e92d5000	 stmdb       sp!, {r12, lr}
  01fb8	e24dd008	 sub         sp, sp, #8
  01fbc		 |$M46876|

; 1276 :     OMAP_UART_REGS *pUartRegs = pPdd->pUartRegs;

  01fbc	e59d3010	 ldr         r3, [sp, #0x10]
  01fc0	e2833024	 add         r3, r3, #0x24
  01fc4	e5933000	 ldr         r3, [r3]
  01fc8	e58d3000	 str         r3, [sp]

; 1277 : 
; 1278 :     // Reset UART & wait until it completes
; 1279 :     OUTREG8(&pUartRegs->SYSC, UART_SYSC_RST);

  01fcc	e59d3000	 ldr         r3, [sp]
  01fd0	e2832054	 add         r2, r3, #0x54
  01fd4	e3a03002	 mov         r3, #2
  01fd8	e5c23000	 strb        r3, [r2]
  01fdc		 |$LN8@Initialize|

; 1280 :     while ((INREG8(&pUartRegs->SYSS) & UART_SYSS_RST_DONE) == 0);

  01fdc	e59d3000	 ldr         r3, [sp]
  01fe0	e2833058	 add         r3, r3, #0x58
  01fe4	e5d33000	 ldrb        r3, [r3]
  01fe8	e3130001	 tst         r3, #1
  01fec	1a000000	 bne         |$LN7@Initialize|
  01ff0	eafffff9	 b           |$LN8@Initialize|
  01ff4		 |$LN7@Initialize|

; 1281 : 
; 1282 :     // Enable wakeup
; 1283 :     // REG: turning off Auto Idle and turning on Smart Idle
; 1284 :     OUTREG8(
; 1285 :     &pUartRegs->SYSC,
; 1286 :     // Try turn on force idle, smart idle or turn on no idle
; 1287 :     // Lets configure force idle here we will change this in HWopen.
; 1288 :     UART_SYSC_IDLE_FORCE|UART_SYSC_WAKEUP_ENABLE|UART_SYSC_AUTOIDLE
; 1289 :     );

  01ff4	e59d3000	 ldr         r3, [sp]
  01ff8	e2832054	 add         r2, r3, #0x54
  01ffc	e3a03005	 mov         r3, #5
  02000	e5c23000	 strb        r3, [r2]

; 1290 : 
; 1291 :     // Ensure baud rate generator is off
; 1292 :     OUTREG8(&pUartRegs->LCR, UART_LCR_DLAB);

  02004	e59d3000	 ldr         r3, [sp]
  02008	e283200c	 add         r2, r3, #0xC
  0200c	e3a03080	 mov         r3, #0x80
  02010	e5c23000	 strb        r3, [r2]

; 1293 :     OUTREG8(&pUartRegs->DLL, 0);

  02014	e59d2000	 ldr         r2, [sp]
  02018	e3a03000	 mov         r3, #0
  0201c	e5c23000	 strb        r3, [r2]

; 1294 :     OUTREG8(&pUartRegs->DLH, 0);

  02020	e59d3000	 ldr         r3, [sp]
  02024	e2832004	 add         r2, r3, #4
  02028	e3a03000	 mov         r3, #0
  0202c	e5c23000	 strb        r3, [r2]

; 1295 : 
; 1296 :     // Select UART mode
; 1297 :     OUTREG8(&pUartRegs->MDR1, UART_MDR1_UART16);

  02030	e59d3000	 ldr         r3, [sp]
  02034	e2832020	 add         r2, r3, #0x20
  02038	e3a03000	 mov         r3, #0
  0203c	e5c23000	 strb        r3, [r2]

; 1298 : 
; 1299 : 
; 1300 :     // Line control: configuration mode B
; 1301 :     OUTREG8(&pUartRegs->LCR, UART_LCR_MODE_CONFIG_B);

  02040	e59d3000	 ldr         r3, [sp]
  02044	e283200c	 add         r2, r3, #0xC
  02048	e3a030bf	 mov         r3, #0xBF
  0204c	e5c23000	 strb        r3, [r2]

; 1302 :     // Enable access to IER bits 4-7, FCR bits 4-5 and MCR bits 5-7
; 1303 :     SETREG8(&pUartRegs->EFR, UART_EFR_ENHANCED_EN);

  02050	e59d3000	 ldr         r3, [sp]
  02054	e2833008	 add         r3, r3, #8
  02058	e5d33000	 ldrb        r3, [r3]
  0205c	e3833010	 orr         r3, r3, #0x10
  02060	e20320ff	 and         r2, r3, #0xFF
  02064	e59d3000	 ldr         r3, [sp]
  02068	e2833008	 add         r3, r3, #8
  0206c	e5c32000	 strb        r2, [r3]

; 1304 : 
; 1305 :     // Line control: operational mode
; 1306 :     OUTREG8(&pUartRegs->LCR, UART_LCR_MODE_OPERATIONAL);

  02070	e59d3000	 ldr         r3, [sp]
  02074	e283200c	 add         r2, r3, #0xC
  02078	e3a03000	 mov         r3, #0
  0207c	e5c23000	 strb        r3, [r2]

; 1307 : 
; 1308 :     // Enable sleep mode
; 1309 :     // Do not enable sleep mode hardware flow control will have problem
; 1310 :    // OUTREG8(&pUartRegs->IER, UART_IER_SLEEP_MODE);
; 1311 : 
; 1312 :     // Enable access to TCR and TLR
; 1313 :     SETREG8(&pUartRegs->MCR, UART_MCR_TCR_TLR);

  02080	e59d3000	 ldr         r3, [sp]
  02084	e2833010	 add         r3, r3, #0x10
  02088	e5d33000	 ldrb        r3, [r3]
  0208c	e3833040	 orr         r3, r3, #0x40
  02090	e20320ff	 and         r2, r3, #0xFF
  02094	e59d3000	 ldr         r3, [sp]
  02098	e2833010	 add         r3, r3, #0x10
  0209c	e5c32000	 strb        r2, [r3]

; 1314 :     // Start receive when 32 bytes in FIFO, halt when 60 byte in FIFO
; 1315 :     OUTREG8(
; 1316 :         &pUartRegs->TCR,
; 1317 :         UART_TCR_RX_FIFO_TRIG_START_24|UART_TCR_RX_FIFO_TRIG_HALT_40
; 1318 :         );

  020a0	e59d3000	 ldr         r3, [sp]
  020a4	e2832018	 add         r2, r3, #0x18
  020a8	e3a0306a	 mov         r3, #0x6A
  020ac	e5c23000	 strb        r3, [r2]

; 1319 : 
; 1320 :     // This will create a space of 60 bytes in the FIFO for TX
; 1321 :     // Later we set FCR[4:5] so that the space is 63 bytes
; 1322 :     // we adjusted the TX DMA frame size to be 63 so we don't overrun our fifo
; 1323 :     if(pPdd->RxDmaInfo)

  020b0	e59d3010	 ldr         r3, [sp, #0x10]
  020b4	e2833f49	 add         r3, r3, #0x49, 30
  020b8	e5933000	 ldr         r3, [r3]
  020bc	e3530000	 cmp         r3, #0
  020c0	0a00000b	 beq         |$LN6@Initialize|

; 1324 :     {
; 1325 :         // if RxDMA is enabled, set up the MSBs of RX_FIFO_TRIG according
; 1326 :         // to the value in pPdd->dwRxFifoTriggerLevel
; 1327 :         BYTE    bRxTrigDMA = (BYTE)((pPdd->dwRxFifoTriggerLevel >> 2) << 4);

  020c4	e59d3010	 ldr         r3, [sp, #0x10]
  020c8	e2833f55	 add         r3, r3, #0x55, 30
  020cc	e5933000	 ldr         r3, [r3]
  020d0	e1a03123	 mov         r3, r3, lsr #2
  020d4	e1a03203	 mov         r3, r3, lsl #4
  020d8	e20330ff	 and         r3, r3, #0xFF
  020dc	e5cd3004	 strb        r3, [sp, #4]

; 1328 : 
; 1329 :         OUTREG8(&pUartRegs->TLR, UART_TLR_TX_FIFO_TRIG_DMA_0 | bRxTrigDMA);

  020e0	e59d3000	 ldr         r3, [sp]
  020e4	e283201c	 add         r2, r3, #0x1C
  020e8	e5dd3004	 ldrb        r3, [sp, #4]
  020ec	e5c23000	 strb        r3, [r2]

; 1330 :     }
; 1331 :     else

  020f0	ea000003	 b           |$LN5@Initialize|
  020f4		 |$LN6@Initialize|

; 1332 :     {
; 1333 :         OUTREG8(&pUartRegs->TLR, UART_TLR_TX_FIFO_TRIG_DMA_0);

  020f4	e59d3000	 ldr         r3, [sp]
  020f8	e283201c	 add         r2, r3, #0x1C
  020fc	e3a03000	 mov         r3, #0
  02100	e5c23000	 strb        r3, [r2]
  02104		 |$LN5@Initialize|

; 1334 :     }
; 1335 : 
; 1336 :     // Disable access to TCR and TLR
; 1337 :     CLRREG8(&pUartRegs->MCR, UART_MCR_TCR_TLR);

  02104	e59d3000	 ldr         r3, [sp]
  02108	e2833010	 add         r3, r3, #0x10
  0210c	e5d33000	 ldrb        r3, [r3]
  02110	e1a02003	 mov         r2, r3
  02114	e3e03040	 mvn         r3, #0x40
  02118	e0023003	 and         r3, r2, r3
  0211c	e20320ff	 and         r2, r3, #0xFF
  02120	e59d3000	 ldr         r3, [sp]
  02124	e2833010	 add         r3, r3, #0x10
  02128	e5c32000	 strb        r2, [r3]

; 1338 : 
; 1339 :     pPdd->CurrentSCR = UART_SCR_TX_TRIG_GRANU1 | UART_SCR_RX_TRIG_GRANU1;

  0212c	e59d3010	 ldr         r3, [sp, #0x10]
  02130	e283208a	 add         r2, r3, #0x8A
  02134	e3a030c0	 mov         r3, #0xC0
  02138	e5c23000	 strb        r3, [r2]

; 1340 :     pPdd->CurrentFCR = 0;

  0213c	e59d3010	 ldr         r3, [sp, #0x10]
  02140	e2832089	 add         r2, r3, #0x89
  02144	e3a03000	 mov         r3, #0
  02148	e5c23000	 strb        r3, [r2]

; 1341 : 
; 1342 :     if(pPdd->RxDmaInfo || pPdd->TxDmaInfo)

  0214c	e59d3010	 ldr         r3, [sp, #0x10]
  02150	e2833f49	 add         r3, r3, #0x49, 30
  02154	e5933000	 ldr         r3, [r3]
  02158	e3530000	 cmp         r3, #0
  0215c	1a000004	 bne         |$LN3@Initialize|
  02160	e59d3010	 ldr         r3, [sp, #0x10]
  02164	e2833c01	 add         r3, r3, #1, 24
  02168	e5933000	 ldr         r3, [r3]
  0216c	e3530000	 cmp         r3, #0
  02170	0a00000f	 beq         |$LN4@Initialize|
  02174		 |$LN3@Initialize|

; 1343 :     {
; 1344 :         //pPdd->CurrentSCR |= UART_SCR_DMA_MODE_CTL;
; 1345 :         pPdd->CurrentSCR |=
; 1346 :                             UART_SCR_DMA_MODE_CTL |
; 1347 :                             UART_SCR_DMA_MODE_2_MODE1 |
; 1348 :                             UART_SCR_TX_EMPTY_CTL;

  02174	e59d3010	 ldr         r3, [sp, #0x10]
  02178	e283308a	 add         r3, r3, #0x8A
  0217c	e5d33000	 ldrb        r3, [r3]
  02180	e383100b	 orr         r1, r3, #0xB
  02184	e59d3010	 ldr         r3, [sp, #0x10]
  02188	e283208a	 add         r2, r3, #0x8A
  0218c	e20130ff	 and         r3, r1, #0xFF
  02190	e5c23000	 strb        r3, [r2]

; 1349 :         pPdd->CurrentFCR |= UART_FCR_DMA_MODE;

  02194	e59d3010	 ldr         r3, [sp, #0x10]
  02198	e2833089	 add         r3, r3, #0x89
  0219c	e5d33000	 ldrb        r3, [r3]
  021a0	e3831008	 orr         r1, r3, #8
  021a4	e59d3010	 ldr         r3, [sp, #0x10]
  021a8	e2832089	 add         r2, r3, #0x89
  021ac	e20130ff	 and         r3, r1, #0xFF
  021b0	e5c23000	 strb        r3, [r2]
  021b4		 |$LN4@Initialize|

; 1350 :     }
; 1351 : 
; 1352 :     OUTREG8(&pPdd->pUartRegs->SCR, pPdd->CurrentSCR);

  021b4	e59d3010	 ldr         r3, [sp, #0x10]
  021b8	e283108a	 add         r1, r3, #0x8A
  021bc	e59d3010	 ldr         r3, [sp, #0x10]
  021c0	e2833024	 add         r3, r3, #0x24
  021c4	e5933000	 ldr         r3, [r3]
  021c8	e2832040	 add         r2, r3, #0x40
  021cc	e5d13000	 ldrb        r3, [r1]
  021d0	e5c23000	 strb        r3, [r2]

; 1353 : 
; 1354 :     pPdd->intrMask = UART_IER_RHR;

  021d4	e59d3010	 ldr         r3, [sp, #0x10]
  021d8	e2832088	 add         r2, r3, #0x88
  021dc	e3a03001	 mov         r3, #1
  021e0	e5c23000	 strb        r3, [r2]

; 1355 :     pPdd->CurrentFCR |= 
; 1356 :                         UART_FCR_TX_FIFO_LSB_1 |
; 1357 :                         UART_FCR_FIFO_EN;

  021e4	e59d3010	 ldr         r3, [sp, #0x10]
  021e8	e2833089	 add         r3, r3, #0x89
  021ec	e5d33000	 ldrb        r3, [r3]
  021f0	e3831011	 orr         r1, r3, #0x11
  021f4	e59d3010	 ldr         r3, [sp, #0x10]
  021f8	e2832089	 add         r2, r3, #0x89
  021fc	e20130ff	 and         r3, r1, #0xFF
  02200	e5c23000	 strb        r3, [r2]

; 1358 :     if (pPdd->RxDmaInfo == NULL)

  02204	e59d3010	 ldr         r3, [sp, #0x10]
  02208	e2833f49	 add         r3, r3, #0x49, 30
  0220c	e5933000	 ldr         r3, [r3]
  02210	e3530000	 cmp         r3, #0
  02214	1a000008	 bne         |$LN2@Initialize|

; 1359 :     {
; 1360 :         pPdd->CurrentFCR |= UART_FCR_RX_FIFO_LSB_1;

  02218	e59d3010	 ldr         r3, [sp, #0x10]
  0221c	e2833089	 add         r3, r3, #0x89
  02220	e5d33000	 ldrb        r3, [r3]
  02224	e3831040	 orr         r1, r3, #0x40
  02228	e59d3010	 ldr         r3, [sp, #0x10]
  0222c	e2832089	 add         r2, r3, #0x89
  02230	e20130ff	 and         r3, r1, #0xFF
  02234	e5c23000	 strb        r3, [r2]

; 1361 :     }
; 1362 :     else

  02238	ea00000c	 b           |$LN1@Initialize|
  0223c		 |$LN2@Initialize|

; 1363 :     {
; 1364 :         // if RxDMA is enabled, set up the LSBs of RX_FIFO_TRG according
; 1365 :         // to the value in pPdd->dwRxFifoTriggerLevel
; 1366 :         pPdd->CurrentFCR |= ((pPdd->dwRxFifoTriggerLevel & 0x03) << 6);

  0223c	e59d3010	 ldr         r3, [sp, #0x10]
  02240	e2831089	 add         r1, r3, #0x89
  02244	e59d3010	 ldr         r3, [sp, #0x10]
  02248	e2833f55	 add         r3, r3, #0x55, 30
  0224c	e5933000	 ldr         r3, [r3]
  02250	e2033003	 and         r3, r3, #3
  02254	e1a02303	 mov         r2, r3, lsl #6
  02258	e5d13000	 ldrb        r3, [r1]
  0225c	e1831002	 orr         r1, r3, r2
  02260	e59d3010	 ldr         r3, [sp, #0x10]
  02264	e2832089	 add         r2, r3, #0x89
  02268	e20130ff	 and         r3, r1, #0xFF
  0226c	e5c23000	 strb        r3, [r2]
  02270		 |$LN1@Initialize|

; 1367 :     }
; 1368 : 
; 1369 : 
; 1370 :     OUTREG8(&pUartRegs->FCR, pPdd->CurrentFCR);

  02270	e59d3010	 ldr         r3, [sp, #0x10]
  02274	e2831089	 add         r1, r3, #0x89
  02278	e59d3000	 ldr         r3, [sp]
  0227c	e2832008	 add         r2, r3, #8
  02280	e5d13000	 ldrb        r3, [r1]
  02284	e5c23000	 strb        r3, [r2]

; 1371 : 
; 1372 :     // Line control: configuration mode B
; 1373 :     OUTREG8(&pUartRegs->LCR, UART_LCR_MODE_CONFIG_B);

  02288	e59d3000	 ldr         r3, [sp]
  0228c	e283200c	 add         r2, r3, #0xC
  02290	e3a030bf	 mov         r3, #0xBF
  02294	e5c23000	 strb        r3, [r2]

; 1374 :     // Disable access to IER bits 4-7, FCR bits 4-5 and MCR bits 5-7
; 1375 :     CLRREG8(&pUartRegs->EFR, UART_EFR_ENHANCED_EN);

  02298	e59d3000	 ldr         r3, [sp]
  0229c	e2833008	 add         r3, r3, #8
  022a0	e5d33000	 ldrb        r3, [r3]
  022a4	e1a02003	 mov         r2, r3
  022a8	e3e03010	 mvn         r3, #0x10
  022ac	e0023003	 and         r3, r2, r3
  022b0	e20320ff	 and         r2, r3, #0xFF
  022b4	e59d3000	 ldr         r3, [sp]
  022b8	e2833008	 add         r3, r3, #8
  022bc	e5c32000	 strb        r2, [r3]

; 1376 :     // Line control: operational mode
; 1377 :     OUTREG8(&pUartRegs->LCR, UART_LCR_MODE_OPERATIONAL);

  022c0	e59d3000	 ldr         r3, [sp]
  022c4	e283200c	 add         r2, r3, #0xC
  022c8	e3a03000	 mov         r3, #0
  022cc	e5c23000	 strb        r3, [r2]

; 1378 : 
; 1379 :     // Set default LCR 8 bits, 1 stop, no parity
; 1380 :     SETREG8(&pUartRegs->LCR, UART_LCR_CHAR_LENGTH_8BIT);

  022d0	e59d3000	 ldr         r3, [sp]
  022d4	e283300c	 add         r3, r3, #0xC
  022d8	e5d33000	 ldrb        r3, [r3]
  022dc	e3833003	 orr         r3, r3, #3
  022e0	e20320ff	 and         r2, r3, #0xFF
  022e4	e59d3000	 ldr         r3, [sp]
  022e8	e283300c	 add         r3, r3, #0xC
  022ec	e5c32000	 strb        r2, [r3]

; 1381 : }

  022f0	e28dd008	 add         sp, sp, #8
  022f4	e89d6000	 ldmia       sp, {sp, lr}
  022f8	e12fff1e	 bx          lr
  022fc		 |$M46877|

			 ENDP  ; |InitializeUART|

	EXPORT	|DmaSetSrcBuffer|
	EXPORT	|DmaConfigure|
	IMPORT	|TxDmaSettings|

  00050			 AREA	 |.pdata|, PDATA
|$T46885| DCD	|$LN5@Initialize@2|
	DCD	0x40002b04
; Function compile flags: /Odtp

  022fc			 AREA	 |.text|, CODE, ARM

  022fc		 |InitializeTxDMA| PROC

; 1390 : {

  022fc		 |$LN5@Initialize@2|
  022fc	e1a0c00d	 mov         r12, sp
  02300	e92d0001	 stmdb       sp!, {r0}
  02304	e92d5000	 stmdb       sp!, {r12, lr}
  02308	e24dd008	 sub         sp, sp, #8
  0230c		 |$M46882|

; 1391 :     BOOL rc = TRUE;

  0230c	e3a03001	 mov         r3, #1
  02310	e58d3000	 str         r3, [sp]

; 1392 : 
; 1393 :     // Tx DMA configuration settings
; 1394 :     DmaConfigure (pPdd->hTxDmaChannel,
; 1395 :         &TxDmaSettings, pPdd->TxDmaRequest, pPdd->TxDmaInfo);

  02314	e59d3010	 ldr         r3, [sp, #0x10]
  02318	e2833c01	 add         r3, r3, #1, 24
  0231c	e5933000	 ldr         r3, [r3]
  02320	e59d2010	 ldr         r2, [sp, #0x10]
  02324	e28220f0	 add         r2, r2, #0xF0
  02328	e5922000	 ldr         r2, [r2]
  0232c	e59f1070	 ldr         r1, [pc, #0x70]
  02330	e59d0010	 ldr         r0, [sp, #0x10]
  02334	e2800f41	 add         r0, r0, #0x41, 30
  02338	e5900000	 ldr         r0, [r0]
  0233c	eb000000	 bl          DmaConfigure

; 1396 : 
; 1397 :     DmaSetSrcBuffer (pPdd->TxDmaInfo,
; 1398 :         pPdd->pTxDmaBuffer,
; 1399 :         pPdd->paTxDmaBuffer);

  02340	e59d3010	 ldr         r3, [sp, #0x10]
  02344	e28330fc	 add         r3, r3, #0xFC
  02348	e5932000	 ldr         r2, [r3]
  0234c	e59d3010	 ldr         r3, [sp, #0x10]
  02350	e28330f8	 add         r3, r3, #0xF8
  02354	e5931000	 ldr         r1, [r3]
  02358	e59d3010	 ldr         r3, [sp, #0x10]
  0235c	e2833c01	 add         r3, r3, #1, 24
  02360	e5930000	 ldr         r0, [r3]
  02364	eb000000	 bl          DmaSetSrcBuffer

; 1400 : 
; 1401 :     DmaSetDstBuffer(pPdd->TxDmaInfo,
; 1402 :         (UINT8 *)&(pPdd->pUartRegs->THR),
; 1403 :         pPdd->memBase[0] + offset(OMAP_UART_REGS, THR));

  02368	e59d3010	 ldr         r3, [sp, #0x10]
  0236c	e5932000	 ldr         r2, [r3]
  02370	e59d3010	 ldr         r3, [sp, #0x10]
  02374	e2833024	 add         r3, r3, #0x24
  02378	e5931000	 ldr         r1, [r3]
  0237c	e59d3010	 ldr         r3, [sp, #0x10]
  02380	e2833c01	 add         r3, r3, #1, 24
  02384	e5930000	 ldr         r0, [r3]
  02388	eb000000	 bl          DmaSetDstBuffer

; 1404 : 
; 1405 :     return rc;

  0238c	e59d3000	 ldr         r3, [sp]
  02390	e58d3004	 str         r3, [sp, #4]

; 1406 : }

  02394	e59d0004	 ldr         r0, [sp, #4]
  02398	e28dd008	 add         sp, sp, #8
  0239c	e89d6000	 ldmia       sp, {sp, lr}
  023a0	e12fff1e	 bx          lr
  023a4		 |$LN6@Initialize@2|
  023a4		 |$LN7@Initialize@2|
  023a4	00000000	 DCD         |TxDmaSettings|
  023a8		 |$M46883|

			 ENDP  ; |InitializeTxDMA|

	IMPORT	|DmaGetLogicalChannel|
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\inc\omap_sdma_utility.h

  00000			 AREA	 |.pdata|, PDATA
|$T46893| DCD	|$LN8@DmaConfigu|
	DCD	0x40007d04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DmaConfigure| PROC

; 166  : {

  00000		 |$LN8@DmaConfigu|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d000f	 stmdb       sp!, {r0 - r3}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd010	 sub         sp, sp, #0x10
  00010		 |$M46890|

; 167  :     BOOL rc = FALSE;

  00010	e3a03000	 mov         r3, #0
  00014	e58d3004	 str         r3, [sp, #4]

; 168  :     OMAP_DMA_LC_REGS *pDmaLcReg = (OMAP_DMA_LC_REGS*)DmaGetLogicalChannel(hDmaChannel);

  00018	e59d0018	 ldr         r0, [sp, #0x18]
  0001c	eb000000	 bl          DmaGetLogicalChannel
  00020	e58d000c	 str         r0, [sp, #0xC]
  00024	e59d300c	 ldr         r3, [sp, #0xC]
  00028	e58d3000	 str         r3, [sp]

; 169  :     if (pDmaLcReg == NULL || pConfigInfo == NULL)

  0002c	e59d3000	 ldr         r3, [sp]
  00030	e3530000	 cmp         r3, #0
  00034	0a000002	 beq         |$LN2@DmaConfigu|
  00038	e59d301c	 ldr         r3, [sp, #0x1C]
  0003c	e3530000	 cmp         r3, #0
  00040	1a000000	 bne         |$LN3@DmaConfigu|
  00044		 |$LN2@DmaConfigu|

; 170  :         {
; 171  :         goto cleanUp;

  00044	ea000064	 b           |$cleanUp$43798|
  00048		 |$LN3@DmaConfigu|

; 172  :         }
; 173  : 
; 174  :     // initialize dma DataInfo if necessary
; 175  :     if (pDataInfo != NULL)

  00048	e59d3024	 ldr         r3, [sp, #0x24]
  0004c	e3530000	 cmp         r3, #0
  00050	0a00000b	 beq         |$LN1@DmaConfigu|

; 176  :         {
; 177  :         memset(pDataInfo, 0, sizeof(DmaDataInfo_t));

  00054	e3a02018	 mov         r2, #0x18
  00058	e3a01000	 mov         r1, #0
  0005c	e59d0024	 ldr         r0, [sp, #0x24]
  00060	eb000000	 bl          memset

; 178  :         pDataInfo->hDmaChannel = hDmaChannel;

  00064	e59d3024	 ldr         r3, [sp, #0x24]
  00068	e2832010	 add         r2, r3, #0x10
  0006c	e59d3018	 ldr         r3, [sp, #0x18]
  00070	e5823000	 str         r3, [r2]

; 179  :         pDataInfo->pDmaLcReg = pDmaLcReg;

  00074	e59d3024	 ldr         r3, [sp, #0x24]
  00078	e2832014	 add         r2, r3, #0x14
  0007c	e59d3000	 ldr         r3, [sp]
  00080	e5823000	 str         r3, [r2]
  00084		 |$LN1@DmaConfigu|

; 180  :         }
; 181  : 
; 182  :     // Disable the DMA in case it is running
; 183  :     CLRREG32(&pDmaLcReg->CCR, DMA_CCR_ENABLE);

  00084	e59d3000	 ldr         r3, [sp]
  00088	e5932000	 ldr         r2, [r3]
  0008c	e3e03080	 mvn         r3, #0x80
  00090	e0022003	 and         r2, r2, r3
  00094	e59d3000	 ldr         r3, [sp]
  00098	e5832000	 str         r2, [r3]

; 184  : 
; 185  :     // update syncmap
; 186  :     pConfigInfo->syncMap = syncMap;

  0009c	e59d301c	 ldr         r3, [sp, #0x1C]
  000a0	e283202c	 add         r2, r3, #0x2C
  000a4	e59d3020	 ldr         r3, [sp, #0x20]
  000a8	e5823000	 str         r3, [r2]

; 187  : 
; 188  :     // Initialize logical channel registers
; 189  :     //
; 190  :     OUTREG32(&pDmaLcReg->CCR, 0);

  000ac	e59d2000	 ldr         r2, [sp]
  000b0	e3a03000	 mov         r3, #0
  000b4	e5823000	 str         r3, [r2]

; 191  :     OUTREG32(&pDmaLcReg->CLNK_CTRL, 0);

  000b8	e59d3000	 ldr         r3, [sp]
  000bc	e2832004	 add         r2, r3, #4
  000c0	e3a03000	 mov         r3, #0
  000c4	e5823000	 str         r3, [r2]

; 192  :     OUTREG32(&pDmaLcReg->COLOR, 0);

  000c8	e59d3000	 ldr         r3, [sp]
  000cc	e2832044	 add         r2, r3, #0x44
  000d0	e3a03000	 mov         r3, #0
  000d4	e5823000	 str         r3, [r2]

; 193  : 
; 194  :     // update CSDP
; 195  :     //  DATA_TYPE
; 196  :     //  DST
; 197  :     //  SRC
; 198  :     OUTREG32(&pDmaLcReg->CSDP, pConfigInfo->elemSize);

  000d8	e59d3000	 ldr         r3, [sp]
  000dc	e2832010	 add         r2, r3, #0x10
  000e0	e59d301c	 ldr         r3, [sp, #0x1C]
  000e4	e5933000	 ldr         r3, [r3]
  000e8	e5823000	 str         r3, [r2]

; 199  : 
; 200  :     // update CCR
; 201  :     //  DST_MODE
; 202  :     //  SRC_MODE
; 203  :     //  PRIO
; 204  :     //  SYNC
; 205  :     //
; 206  :     OUTREG32(&pDmaLcReg->CCR, pConfigInfo->srcAddrMode |
; 207  :         pConfigInfo->dstAddrMode | pConfigInfo->dmaPrio |
; 208  :         DMA_CCR_SYNC(syncMap) | pConfigInfo->synchTrigger |
; 209  :         pConfigInfo->synchMode
; 210  :         );

  000ec	e59d301c	 ldr         r3, [sp, #0x1C]
  000f0	e283200c	 add         r2, r3, #0xC
  000f4	e59d301c	 ldr         r3, [sp, #0x1C]
  000f8	e2833018	 add         r3, r3, #0x18
  000fc	e5922000	 ldr         r2, [r2]
  00100	e5933000	 ldr         r3, [r3]
  00104	e1822003	 orr         r2, r2, r3
  00108	e59d301c	 ldr         r3, [sp, #0x1C]
  0010c	e283301c	 add         r3, r3, #0x1C
  00110	e5933000	 ldr         r3, [r3]
  00114	e1821003	 orr         r1, r2, r3
  00118	e59d3020	 ldr         r3, [sp, #0x20]
  0011c	e203201f	 and         r2, r3, #0x1F
  00120	e59d3020	 ldr         r3, [sp, #0x20]
  00124	e2033060	 and         r3, r3, #0x60
  00128	e1a03703	 mov         r3, r3, lsl #14
  0012c	e1823003	 orr         r3, r2, r3
  00130	e1812003	 orr         r2, r1, r3
  00134	e59d301c	 ldr         r3, [sp, #0x1C]
  00138	e2833020	 add         r3, r3, #0x20
  0013c	e5933000	 ldr         r3, [r3]
  00140	e1822003	 orr         r2, r2, r3
  00144	e59d301c	 ldr         r3, [sp, #0x1C]
  00148	e2833024	 add         r3, r3, #0x24
  0014c	e5933000	 ldr         r3, [r3]
  00150	e1822003	 orr         r2, r2, r3
  00154	e59d3000	 ldr         r3, [sp]
  00158	e5832000	 str         r2, [r3]

; 211  : 
; 212  :     // update CSEI
; 213  :     //
; 214  :     OUTREG32(&pDmaLcReg->CSEI, pConfigInfo->srcElemIndex);

  0015c	e59d301c	 ldr         r3, [sp, #0x1C]
  00160	e2831004	 add         r1, r3, #4
  00164	e59d3000	 ldr         r3, [sp]
  00168	e2832024	 add         r2, r3, #0x24
  0016c	e5913000	 ldr         r3, [r1]
  00170	e5823000	 str         r3, [r2]

; 215  : 
; 216  :     // update CDEI
; 217  :     //
; 218  :     OUTREG32(&pDmaLcReg->CDEI, pConfigInfo->dstElemIndex);

  00174	e59d301c	 ldr         r3, [sp, #0x1C]
  00178	e2831010	 add         r1, r3, #0x10
  0017c	e59d3000	 ldr         r3, [sp]
  00180	e283202c	 add         r2, r3, #0x2C
  00184	e5913000	 ldr         r3, [r1]
  00188	e5823000	 str         r3, [r2]

; 219  : 
; 220  :     // update CSFI
; 221  :     //
; 222  :     OUTREG32(&pDmaLcReg->CSFI, pConfigInfo->srcFrameIndex);

  0018c	e59d301c	 ldr         r3, [sp, #0x1C]
  00190	e2831008	 add         r1, r3, #8
  00194	e59d3000	 ldr         r3, [sp]
  00198	e2832028	 add         r2, r3, #0x28
  0019c	e5913000	 ldr         r3, [r1]
  001a0	e5823000	 str         r3, [r2]

; 223  : 
; 224  :     // update CDFI
; 225  :     //
; 226  :     OUTREG32(&pDmaLcReg->CDFI, pConfigInfo->dstFrameIndex);

  001a4	e59d301c	 ldr         r3, [sp, #0x1C]
  001a8	e2831014	 add         r1, r3, #0x14
  001ac	e59d3000	 ldr         r3, [sp]
  001b0	e2832030	 add         r2, r3, #0x30
  001b4	e5913000	 ldr         r3, [r1]
  001b8	e5823000	 str         r3, [r2]

; 227  : 
; 228  :     // update CICR
; 229  :     //
; 230  :     OUTREG32(&pDmaLcReg->CICR , pConfigInfo->interrupts);

  001bc	e59d301c	 ldr         r3, [sp, #0x1C]
  001c0	e2831028	 add         r1, r3, #0x28
  001c4	e59d3000	 ldr         r3, [sp]
  001c8	e2832008	 add         r2, r3, #8
  001cc	e5913000	 ldr         r3, [r1]
  001d0	e5823000	 str         r3, [r2]

; 231  :     
; 232  :     rc = TRUE;

  001d4	e3a03001	 mov         r3, #1
  001d8	e58d3004	 str         r3, [sp, #4]
  001dc		 |$cleanUp$43798|

; 233  : 
; 234  : cleanUp:
; 235  :     return rc;

  001dc	e59d3004	 ldr         r3, [sp, #4]
  001e0	e58d3008	 str         r3, [sp, #8]

; 236  : }

  001e4	e59d0008	 ldr         r0, [sp, #8]
  001e8	e28dd010	 add         sp, sp, #0x10
  001ec	e89d6000	 ldmia       sp, {sp, lr}
  001f0	e12fff1e	 bx          lr
  001f4		 |$M46891|

			 ENDP  ; |DmaConfigure|


  00000			 AREA	 |.pdata|, PDATA
|$T46900| DCD	|$LN6@DmaSetSrcB|
	DCD	0x40001d03
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DmaSetSrcBuffer| PROC

; 358  : {

  00000		 |$LN6@DmaSetSrcB|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0007	 stmdb       sp!, {r0 - r2}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M46897|

; 359  :     // save values
; 360  :     //
; 361  :     pDataInfo->pSrcBuffer = pBuffer;

  0000c	e59d200c	 ldr         r2, [sp, #0xC]
  00010	e59d3008	 ldr         r3, [sp, #8]
  00014	e5832000	 str         r2, [r3]

; 362  :     pDataInfo->PhysAddrSrcBuffer = PhysAddr;

  00018	e59d3008	 ldr         r3, [sp, #8]
  0001c	e2832008	 add         r2, r3, #8
  00020	e59d3010	 ldr         r3, [sp, #0x10]
  00024	e5823000	 str         r3, [r2]

; 363  : 
; 364  :     // set source address
; 365  :     //
; 366  :     if (pDataInfo->pDmaLcReg != NULL)

  00028	e59d3008	 ldr         r3, [sp, #8]
  0002c	e2833014	 add         r3, r3, #0x14
  00030	e5933000	 ldr         r3, [r3]
  00034	e3530000	 cmp         r3, #0
  00038	0a00000b	 beq         |$LN1@DmaSetSrcB|

; 367  :         {
; 368  :         OUTREG32(&pDataInfo->pDmaLcReg->CSSA, PhysAddr);

  0003c	e59d3008	 ldr         r3, [sp, #8]
  00040	e2833014	 add         r3, r3, #0x14
  00044	e5933000	 ldr         r3, [r3]
  00048	e283201c	 add         r2, r3, #0x1C
  0004c	e59d3010	 ldr         r3, [sp, #0x10]
  00050	e5823000	 str         r3, [r2]

; 369  :         OUTREG32(&pDataInfo->pDmaLcReg->CSAC, PhysAddr);

  00054	e59d3008	 ldr         r3, [sp, #8]
  00058	e2833014	 add         r3, r3, #0x14
  0005c	e5933000	 ldr         r3, [r3]
  00060	e2832034	 add         r2, r3, #0x34
  00064	e59d3010	 ldr         r3, [sp, #0x10]
  00068	e5823000	 str         r3, [r2]
  0006c		 |$LN1@DmaSetSrcB|

; 370  :         }
; 371  : }

  0006c	e89d6000	 ldmia       sp, {sp, lr}
  00070	e12fff1e	 bx          lr
  00074		 |$M46898|

			 ENDP  ; |DmaSetSrcBuffer|

	IMPORT	|RxDmaSettings|

  00058			 AREA	 |.pdata|, PDATA
|$T46908| DCD	|$LN5@Initialize@3|
	DCD	0x40004d04
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\serial\uart\pdd.c

  023a8			 AREA	 |.text|, CODE, ARM

  023a8		 |InitializeRxDMA| PROC

; 1415 : {

  023a8		 |$LN5@Initialize@3|
  023a8	e1a0c00d	 mov         r12, sp
  023ac	e92d0001	 stmdb       sp!, {r0}
  023b0	e92d5000	 stmdb       sp!, {r12, lr}
  023b4	e24dd00c	 sub         sp, sp, #0xC
  023b8		 |$M46905|

; 1416 :     OMAP_DMA_LC_REGS *pDmaLcReg;
; 1417 : 
; 1418 :     DmaConfigure (pPdd->hRxDmaChannel,
; 1419 :         &RxDmaSettings, pPdd->RxDmaRequest, pPdd->RxDmaInfo);

  023b8	e59d3014	 ldr         r3, [sp, #0x14]
  023bc	e2833f49	 add         r3, r3, #0x49, 30
  023c0	e5933000	 ldr         r3, [r3]
  023c4	e59d2014	 ldr         r2, [sp, #0x14]
  023c8	e2822f43	 add         r2, r2, #0x43, 30
  023cc	e5922000	 ldr         r2, [r2]
  023d0	e59f1100	 ldr         r1, [pc, #0x100]
  023d4	e59d0014	 ldr         r0, [sp, #0x14]
  023d8	e2800f4b	 add         r0, r0, #0x4B, 30
  023dc	e5900000	 ldr         r0, [r0]
  023e0	eb000000	 bl          DmaConfigure

; 1420 : 
; 1421 :     pDmaLcReg = (OMAP_DMA_LC_REGS*)DmaGetLogicalChannel(pPdd->hRxDmaChannel);

  023e4	e59d3014	 ldr         r3, [sp, #0x14]
  023e8	e2833f4b	 add         r3, r3, #0x4B, 30
  023ec	e5930000	 ldr         r0, [r3]
  023f0	eb000000	 bl          DmaGetLogicalChannel
  023f4	e58d0008	 str         r0, [sp, #8]
  023f8	e59d3008	 ldr         r3, [sp, #8]
  023fc	e58d3000	 str         r3, [sp]

; 1422 :     OUTREG32(&pDmaLcReg->CDAC, pPdd->paRxDmaBuffer);

  02400	e59d3014	 ldr         r3, [sp, #0x14]
  02404	e2831f46	 add         r1, r3, #0x46, 30
  02408	e59d3000	 ldr         r3, [sp]
  0240c	e2832038	 add         r2, r3, #0x38
  02410	e5913000	 ldr         r3, [r1]
  02414	e5823000	 str         r3, [r2]

; 1423 : 
; 1424 :     // set up for Rx buffer as single frame with Max DMA buffer. Must be multiple of
; 1425 :     // frame size
; 1426 :     DmaSetElementAndFrameCount (pPdd->RxDmaInfo,
; 1427 :         (UINT16)pPdd->dwRxFifoTriggerLevel, 
; 1428 :         (UINT16)((pPdd->RxDmaBufferSize + pPdd->dwRxFifoTriggerLevel - 1) / pPdd->dwRxFifoTriggerLevel));

  02418	e59d3014	 ldr         r3, [sp, #0x14]
  0241c	e2832e11	 add         r2, r3, #0x11, 28
  02420	e59d3014	 ldr         r3, [sp, #0x14]
  02424	e2833f55	 add         r3, r3, #0x55, 30
  02428	e5922000	 ldr         r2, [r2]
  0242c	e5933000	 ldr         r3, [r3]
  02430	e0823003	 add         r3, r2, r3
  02434	e2431001	 sub         r1, r3, #1
  02438	e59d3014	 ldr         r3, [sp, #0x14]
  0243c	e2833f55	 add         r3, r3, #0x55, 30
  02440	e5930000	 ldr         r0, [r3]
  02444	eb000000	 bl          __rt_udiv
  02448	e1a02800	 mov         r2, r0, lsl #16
  0244c	e1a02822	 mov         r2, r2, lsr #16
  02450	e59d3014	 ldr         r3, [sp, #0x14]
  02454	e2833f55	 add         r3, r3, #0x55, 30
  02458	e5933000	 ldr         r3, [r3]
  0245c	e1a01803	 mov         r1, r3, lsl #16
  02460	e1a01821	 mov         r1, r1, lsr #16
  02464	e59d3014	 ldr         r3, [sp, #0x14]
  02468	e2833f49	 add         r3, r3, #0x49, 30
  0246c	e5930000	 ldr         r0, [r3]
  02470	eb000000	 bl          DmaSetElementAndFrameCount

; 1429 :     DmaSetDstBuffer (pPdd->RxDmaInfo,
; 1430 :         pPdd->pRxDmaBuffer,
; 1431 :         pPdd->paRxDmaBuffer);

  02474	e59d3014	 ldr         r3, [sp, #0x14]
  02478	e2833f46	 add         r3, r3, #0x46, 30
  0247c	e5932000	 ldr         r2, [r3]
  02480	e59d3014	 ldr         r3, [sp, #0x14]
  02484	e2833f45	 add         r3, r3, #0x45, 30
  02488	e5931000	 ldr         r1, [r3]
  0248c	e59d3014	 ldr         r3, [sp, #0x14]
  02490	e2833f49	 add         r3, r3, #0x49, 30
  02494	e5930000	 ldr         r0, [r3]
  02498	eb000000	 bl          DmaSetDstBuffer

; 1432 :     DmaSetSrcBuffer(pPdd->RxDmaInfo,
; 1433 :         (UINT8 *)&(pPdd->pUartRegs->RHR),
; 1434 :         pPdd->memBase[0] + offset(OMAP_UART_REGS, RHR));

  0249c	e59d3014	 ldr         r3, [sp, #0x14]
  024a0	e5932000	 ldr         r2, [r3]
  024a4	e59d3014	 ldr         r3, [sp, #0x14]
  024a8	e2833024	 add         r3, r3, #0x24
  024ac	e5931000	 ldr         r1, [r3]
  024b0	e59d3014	 ldr         r3, [sp, #0x14]
  024b4	e2833f49	 add         r3, r3, #0x49, 30
  024b8	e5930000	 ldr         r0, [r3]
  024bc	eb000000	 bl          DmaSetSrcBuffer

; 1435 : 
; 1436 :     return TRUE;

  024c0	e3a03001	 mov         r3, #1
  024c4	e58d3004	 str         r3, [sp, #4]

; 1437 : }

  024c8	e59d0004	 ldr         r0, [sp, #4]
  024cc	e28dd00c	 add         sp, sp, #0xC
  024d0	e89d6000	 ldmia       sp, {sp, lr}
  024d4	e12fff1e	 bx          lr
  024d8		 |$LN6@Initialize@3|
  024d8		 |$LN7@Initialize@3|
  024d8	00000000	 DCD         |RxDmaSettings|
  024dc		 |$M46906|

			 ENDP  ; |InitializeRxDMA|

	EXPORT	|??_C@_1BM@CKPHFPOP@?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?5?$AA?$CF?$AAx?$AA?5?$AA?$CF?$AAd?$AA?5?$AA?$AA@| [ DATA ] ; `string'

  00060			 AREA	 |.pdata|, PDATA
|$T46918| DCD	|$LN8@HWPostInit|
	DCD	0x40003e04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@CKPHFPOP@?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?5?$AA?$CF?$AAx?$AA?5?$AA?$CF?$AAd?$AA?5?$AA?$AA@| DCB "b"
	DCB	0x0, "u", 0x0, "f", 0x0, "f", 0x0, "e", 0x0, "r", 0x0, " "
	DCB	0x0, "%", 0x0, "x", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, " "
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  024dc			 AREA	 |.text|, CODE, ARM

  024dc		 |HWPostInit| PROC

; 1960 : {

  024dc		 |$LN8@HWPostInit|
  024dc	e1a0c00d	 mov         r12, sp
  024e0	e92d0001	 stmdb       sp!, {r0}
  024e4	e92d5000	 stmdb       sp!, {r12, lr}
  024e8	e24dd010	 sub         sp, sp, #0x10
  024ec		 |$M46915|

; 1961 :     UARTPDD *pPdd = (UARTPDD *)pvContext;

  024ec	e59d3018	 ldr         r3, [sp, #0x18]
  024f0	e58d3004	 str         r3, [sp, #4]

; 1962 :     PHW_INDEP_INFO  pSerialHead = (PHW_INDEP_INFO)pPdd->pMdd;

  024f4	e59d3004	 ldr         r3, [sp, #4]
  024f8	e2833050	 add         r3, r3, #0x50
  024fc	e5933000	 ldr         r3, [r3]
  02500	e58d3000	 str         r3, [sp]

; 1963 : 
; 1964 :     // if Rx DMA is enabled override the mdd rxbuffer with DMA buffer
; 1965 :     if (pPdd->RxDmaInfo)

  02504	e59d3004	 ldr         r3, [sp, #4]
  02508	e2833f49	 add         r3, r3, #0x49, 30
  0250c	e5933000	 ldr         r3, [r3]
  02510	e3530000	 cmp         r3, #0
  02514	0a000026	 beq         |$LN1@HWPostInit|

; 1966 :     {
; 1967 :         pSerialHead->RxBufferInfo.RxCharBuffer = pPdd->pRxDmaBuffer;

  02518	e59d3004	 ldr         r3, [sp, #4]
  0251c	e2831f45	 add         r1, r3, #0x45, 30
  02520	e59d3000	 ldr         r3, [sp]
  02524	e28320ac	 add         r2, r3, #0xAC
  02528	e5913000	 ldr         r3, [r1]
  0252c	e5823000	 str         r3, [r2]

; 1968 :         pSerialHead->RxBufferInfo.Length = pPdd->RxDmaBufferSize;

  02530	e59d3004	 ldr         r3, [sp, #4]
  02534	e2831e11	 add         r1, r3, #0x11, 28
  02538	e59d3000	 ldr         r3, [sp]
  0253c	e28320a4	 add         r2, r3, #0xA4
  02540	e5913000	 ldr         r3, [r1]
  02544	e5823000	 str         r3, [r2]

; 1969 :         pPdd->rxBufferSize = pPdd->RxDmaBufferSize;

  02548	e59d3004	 ldr         r3, [sp, #4]
  0254c	e2831e11	 add         r1, r3, #0x11, 28
  02550	e59d3004	 ldr         r3, [sp, #4]
  02554	e2832018	 add         r2, r3, #0x18
  02558	e5913000	 ldr         r3, [r1]
  0255c	e5823000	 str         r3, [r2]

; 1970 : 
; 1971 :         DEBUGMSG(ZONE_OPEN||ZONE_FUNCTION,
; 1972 :             (TEXT("buffer %x %d "),pPdd->pRxDmaBuffer,pPdd->RxDmaBufferSize));

  02560	e59f3068	 ldr         r3, [pc, #0x68]
  02564	e5933440	 ldr         r3, [r3, #0x440]
  02568	e3130002	 tst         r3, #2
  0256c	1a000006	 bne         |$LN4@HWPostInit|
  02570	e59f3058	 ldr         r3, [pc, #0x58]
  02574	e5933440	 ldr         r3, [r3, #0x440]
  02578	e3130a02	 tst         r3, #2, 20
  0257c	1a000002	 bne         |$LN4@HWPostInit|
  02580	e3a03000	 mov         r3, #0
  02584	e58d300c	 str         r3, [sp, #0xC]
  02588	ea000009	 b           |$LN5@HWPostInit|
  0258c		 |$LN4@HWPostInit|
  0258c	e59d3004	 ldr         r3, [sp, #4]
  02590	e2833e11	 add         r3, r3, #0x11, 28
  02594	e5932000	 ldr         r2, [r3]
  02598	e59d3004	 ldr         r3, [sp, #4]
  0259c	e2833f45	 add         r3, r3, #0x45, 30
  025a0	e5931000	 ldr         r1, [r3]
  025a4	e59f0020	 ldr         r0, [pc, #0x20]
  025a8	eb000000	 bl          NKDbgPrintfW
  025ac	e3a03001	 mov         r3, #1
  025b0	e58d300c	 str         r3, [sp, #0xC]
  025b4		 |$LN5@HWPostInit|
  025b4		 |$LN1@HWPostInit|

; 1973 : 
; 1974 :     }
; 1975 : 
; 1976 : 
; 1977 : 
; 1978 :     return TRUE;

  025b4	e3a03001	 mov         r3, #1
  025b8	e58d3008	 str         r3, [sp, #8]

; 1979 : }

  025bc	e59d0008	 ldr         r0, [sp, #8]
  025c0	e28dd010	 add         sp, sp, #0x10
  025c4	e89d6000	 ldmia       sp, {sp, lr}
  025c8	e12fff1e	 bx          lr
  025cc		 |$LN9@HWPostInit|
  025cc		 |$LN10@HWPostInit|
  025cc	00000000	 DCD         |??_C@_1BM@CKPHFPOP@?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?5?$AA?$CF?$AAx?$AA?5?$AA?$CF?$AAd?$AA?5?$AA?$AA@|
  025d0		 |$LN11@HWPostInit|
  025d0	00000000	 DCD         |dpCurSettings|
  025d4		 |$M46916|

			 ENDP  ; |HWPostInit|

	EXPORT	|??_C@_1BI@BIKPNPOG@?$AA?9?$AAH?$AAW?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FG@LMAMANNM@?$AAU?$AAA?$AAR?$AAT?$AA?3?$AAH?$AAW?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?3?$AAD?$AAm?$AAa?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@LFFEAADB@?$AA?$CL?$AAH?$AAW?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|ReleaseDevicePads|
	IMPORT	|DeleteCriticalSection|
	IMPORT	|CloseBusAccessHandle|
	IMPORT	|GPIOClose|
	IMPORT	|MmUnmapIoSpace|
	IMPORT	|CloseHandle|

  00068			 AREA	 |.pdata|, PDATA
|$T46933| DCD	|$LN21@HWDeinit|
	DCD	0x4000de04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BI@BIKPNPOG@?$AA?9?$AAH?$AAW?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "H", 0x0, "W", 0x0, "D", 0x0, "e", 0x0, "i", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FG@LMAMANNM@?$AAU?$AAA?$AAR?$AAT?$AA?3?$AAH?$AAW?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?3?$AAD?$AAm?$AAa?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt@| DCB "U"
	DCB	0x0, "A", 0x0, "R", 0x0, "T", 0x0, ":", 0x0, "H", 0x0, "W"
	DCB	0x0, "D", 0x0, "e", 0x0, "i", 0x0, "n", 0x0, "i", 0x0, "t"
	DCB	0x0, ":", 0x0, "D", 0x0, "m", 0x0, "a", 0x0, "E", 0x0, "n"
	DCB	0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, "I", 0x0, "n"
	DCB	0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p"
	DCB	0x0, "t", 0x0, "s", 0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@LFFEAADB@?$AA?$CL?$AAH?$AAW?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "H", 0x0, "W", 0x0, "D", 0x0, "e", 0x0, "i", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "8", 0x0, "x", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  025d4			 AREA	 |.text|, CODE, ARM

  025d4		 |HWDeinit| PROC

; 1993 : {

  025d4		 |$LN21@HWDeinit|
  025d4	e1a0c00d	 mov         r12, sp
  025d8	e92d0001	 stmdb       sp!, {r0}
  025dc	e92d5000	 stmdb       sp!, {r12, lr}
  025e0	e24dd024	 sub         sp, sp, #0x24
  025e4		 |$M46930|

; 1994 :     UARTPDD *pPdd = (UARTPDD*)pvContext;

  025e4	e59d302c	 ldr         r3, [sp, #0x2C]
  025e8	e58d3008	 str         r3, [sp, #8]

; 1995 :     DEBUGMSG(ZONE_CLOSE||ZONE_FUNCTION, (L"+HWDeinit(0x%08x)\r\n", pvContext));

  025ec	e59f3348	 ldr         r3, [pc, #0x348]
  025f0	e5933440	 ldr         r3, [r3, #0x440]
  025f4	e3130010	 tst         r3, #0x10
  025f8	1a000006	 bne         |$LN15@HWDeinit|
  025fc	e59f3338	 ldr         r3, [pc, #0x338]
  02600	e5933440	 ldr         r3, [r3, #0x440]
  02604	e3130a02	 tst         r3, #2, 20
  02608	1a000002	 bne         |$LN15@HWDeinit|
  0260c	e3a03000	 mov         r3, #0
  02610	e58d3018	 str         r3, [sp, #0x18]
  02614	ea000004	 b           |$LN16@HWDeinit|
  02618		 |$LN15@HWDeinit|
  02618	e59d102c	 ldr         r1, [sp, #0x2C]
  0261c	e59f0324	 ldr         r0, [pc, #0x324]
  02620	eb000000	 bl          NKDbgPrintfW
  02624	e3a03001	 mov         r3, #1
  02628	e58d3018	 str         r3, [sp, #0x18]
  0262c		 |$LN16@HWDeinit|

; 1996 : 
; 1997 :     // stop rx thread
; 1998 :     if (pPdd->hRxThread != NULL)

  0262c	e59d3008	 ldr         r3, [sp, #8]
  02630	e2833f4f	 add         r3, r3, #0x4F, 30
  02634	e5933000	 ldr         r3, [r3]
  02638	e3530000	 cmp         r3, #0
  0263c	0a000014	 beq         |$LN12@HWDeinit|

; 1999 :     {
; 2000 :         pPdd->bExitThread = TRUE;

  02640	e59d3008	 ldr         r3, [sp, #8]
  02644	e2832f4e	 add         r2, r3, #0x4E, 30
  02648	e3a03001	 mov         r3, #1
  0264c	e5823000	 str         r3, [r2]

; 2001 :         SetEvent(pPdd->hRxThread);

  02650	e59d3008	 ldr         r3, [sp, #8]
  02654	e2833f4f	 add         r3, r3, #0x4F, 30
  02658	e5930000	 ldr         r0, [r3]
  0265c	eb000000	 bl          SetEvent

; 2002 :         WaitForSingleObject(pPdd->hRxThread, INFINITE);

  02660	e3e01000	 mvn         r1, #0
  02664	e59d3008	 ldr         r3, [sp, #8]
  02668	e2833f4f	 add         r3, r3, #0x4F, 30
  0266c	e5930000	 ldr         r0, [r3]
  02670	eb000000	 bl          WaitForSingleObject

; 2003 :         CloseHandle(pPdd->hRxThread);

  02674	e59d3008	 ldr         r3, [sp, #8]
  02678	e2833f4f	 add         r3, r3, #0x4F, 30
  0267c	e5930000	 ldr         r0, [r3]
  02680	eb000000	 bl          CloseHandle

; 2004 :         pPdd->hRxThread = NULL;

  02684	e59d3008	 ldr         r3, [sp, #8]
  02688	e2832f4f	 add         r2, r3, #0x4F, 30
  0268c	e3a03000	 mov         r3, #0
  02690	e5823000	 str         r3, [r2]
  02694		 |$LN12@HWDeinit|

; 2005 :     }
; 2006 : 
; 2007 :     if (pPdd->hEventRxIstDma != NULL)

  02694	e59d3008	 ldr         r3, [sp, #8]
  02698	e2833f4a	 add         r3, r3, #0x4A, 30
  0269c	e5933000	 ldr         r3, [r3]
  026a0	e3530000	 cmp         r3, #0
  026a4	0a000007	 beq         |$LN11@HWDeinit|

; 2008 :     {
; 2009 :         CloseHandle(pPdd->hEventRxIstDma);

  026a8	e59d3008	 ldr         r3, [sp, #8]
  026ac	e2833f4a	 add         r3, r3, #0x4A, 30
  026b0	e5930000	 ldr         r0, [r3]
  026b4	eb000000	 bl          CloseHandle

; 2010 :         pPdd->hEventRxIstDma = NULL;

  026b8	e59d3008	 ldr         r3, [sp, #8]
  026bc	e2832f4a	 add         r2, r3, #0x4A, 30
  026c0	e3a03000	 mov         r3, #0
  026c4	e5823000	 str         r3, [r2]
  026c8		 |$LN11@HWDeinit|

; 2011 :     }
; 2012 :     // Unmap UART registers
; 2013 :     if (pPdd->pUartRegs != NULL)

  026c8	e59d3008	 ldr         r3, [sp, #8]
  026cc	e2833024	 add         r3, r3, #0x24
  026d0	e5933000	 ldr         r3, [r3]
  026d4	e3530000	 cmp         r3, #0
  026d8	0a000006	 beq         |$LN10@HWDeinit|

; 2014 :     {
; 2015 :         MmUnmapIoSpace((VOID*)pPdd->pUartRegs, pPdd->memLen[0]);

  026dc	e59d3008	 ldr         r3, [sp, #8]
  026e0	e2833004	 add         r3, r3, #4
  026e4	e5931000	 ldr         r1, [r3]
  026e8	e59d3008	 ldr         r3, [sp, #8]
  026ec	e2833024	 add         r3, r3, #0x24
  026f0	e5930000	 ldr         r0, [r3]
  026f4	eb000000	 bl          MmUnmapIoSpace
  026f8		 |$LN10@HWDeinit|

; 2016 :     }
; 2017 : 
; 2018 :     if (pPdd->hGpio)

  026f8	e59d3008	 ldr         r3, [sp, #8]
  026fc	e2833f5b	 add         r3, r3, #0x5B, 30
  02700	e5933000	 ldr         r3, [r3]
  02704	e3530000	 cmp         r3, #0
  02708	0a000007	 beq         |$LN9@HWDeinit|

; 2019 :     {
; 2020 :         GPIOClose(pPdd->hGpio);

  0270c	e59d3008	 ldr         r3, [sp, #8]
  02710	e2833f5b	 add         r3, r3, #0x5B, 30
  02714	e5930000	 ldr         r0, [r3]
  02718	eb000000	 bl          GPIOClose

; 2021 :         pPdd->hGpio = NULL;

  0271c	e59d3008	 ldr         r3, [sp, #8]
  02720	e2832f5b	 add         r2, r3, #0x5B, 30
  02724	e3a03000	 mov         r3, #0
  02728	e5823000	 str         r3, [r2]
  0272c		 |$LN9@HWDeinit|

; 2022 :     }
; 2023 : 
; 2024 :     // Disconnect the interrupt
; 2025 :     if (pPdd->sysIntr != 0)

  0272c	e59d3008	 ldr         r3, [sp, #8]
  02730	e2833028	 add         r3, r3, #0x28
  02734	e5933000	 ldr         r3, [r3]
  02738	e3530000	 cmp         r3, #0
  0273c	0a000009	 beq         |$LN8@HWDeinit|

; 2026 :     {
; 2027 :         KernelIoControl(
; 2028 :             IOCTL_HAL_RELEASE_SYSINTR, &pPdd->sysIntr, sizeof(&pPdd->sysIntr),
; 2029 :             NULL, 0, NULL
; 2030 :             );

  02740	e3a03000	 mov         r3, #0
  02744	e58d3004	 str         r3, [sp, #4]
  02748	e3a03000	 mov         r3, #0
  0274c	e58d3000	 str         r3, [sp]
  02750	e3a03000	 mov         r3, #0
  02754	e3a02004	 mov         r2, #4
  02758	e59d1008	 ldr         r1, [sp, #8]
  0275c	e2811028	 add         r1, r1, #0x28
  02760	e59f01dc	 ldr         r0, [pc, #0x1DC]
  02764	eb000000	 bl          KernelIoControl
  02768		 |$LN8@HWDeinit|

; 2031 :     }
; 2032 : 
; 2033 :     // Disable all clocks
; 2034 :     if (pPdd->hParentBus != NULL)

  02768	e59d3008	 ldr         r3, [sp, #8]
  0276c	e283302c	 add         r3, r3, #0x2C
  02770	e5933000	 ldr         r3, [r3]
  02774	e3530000	 cmp         r3, #0
  02778	0a00000a	 beq         |$LN7@HWDeinit|

; 2035 :     {
; 2036 :         pPdd->externalDX = D3;

  0277c	e59d3008	 ldr         r3, [sp, #8]
  02780	e2832034	 add         r2, r3, #0x34
  02784	e3a03003	 mov         r3, #3
  02788	e5823000	 str         r3, [r2]

; 2037 :         SetPower(pPdd, D3);

  0278c	e3a01003	 mov         r1, #3
  02790	e59d0008	 ldr         r0, [sp, #8]
  02794	eb000000	 bl          SetPower

; 2038 :         CloseBusAccessHandle(pPdd->hParentBus);

  02798	e59d3008	 ldr         r3, [sp, #8]
  0279c	e283302c	 add         r3, r3, #0x2C
  027a0	e5930000	 ldr         r0, [r3]
  027a4	eb000000	 bl          CloseBusAccessHandle
  027a8		 |$LN7@HWDeinit|

; 2039 :     }
; 2040 : 
; 2041 :     // Delete sync objects
; 2042 :     DeleteCriticalSection(&pPdd->hwCS);

  027a8	e59d3008	 ldr         r3, [sp, #8]
  027ac	e2830098	 add         r0, r3, #0x98
  027b0	eb000000	 bl          DeleteCriticalSection

; 2043 :     DeleteCriticalSection(&pPdd->txCS);

  027b4	e59d3008	 ldr         r3, [sp, #8]
  027b8	e28300ac	 add         r0, r3, #0xAC
  027bc	eb000000	 bl          DeleteCriticalSection

; 2044 :     DeleteCriticalSection(&pPdd->RxUpdatePtrCS);

  027c0	e59d3008	 ldr         r3, [sp, #8]
  027c4	e28300c0	 add         r0, r3, #0xC0
  027c8	eb000000	 bl          DeleteCriticalSection

; 2045 : 
; 2046 :     if (pPdd->txEvent != NULL) CloseHandle(pPdd->txEvent);

  027cc	e59d3008	 ldr         r3, [sp, #8]
  027d0	e28330d4	 add         r3, r3, #0xD4
  027d4	e5933000	 ldr         r3, [r3]
  027d8	e3530000	 cmp         r3, #0
  027dc	0a000003	 beq         |$LN6@HWDeinit|
  027e0	e59d3008	 ldr         r3, [sp, #8]
  027e4	e28330d4	 add         r3, r3, #0xD4
  027e8	e5930000	 ldr         r0, [r3]
  027ec	eb000000	 bl          CloseHandle
  027f0		 |$LN6@HWDeinit|

; 2047 : 
; 2048 :     if (pPdd->RxDmaInfo)

  027f0	e59d3008	 ldr         r3, [sp, #8]
  027f4	e2833f49	 add         r3, r3, #0x49, 30
  027f8	e5933000	 ldr         r3, [r3]
  027fc	e3530000	 cmp         r3, #0
  02800	0a000012	 beq         |$LN5@HWDeinit|

; 2049 :     {
; 2050 :         DmaStop(pPdd->RxDmaInfo);

  02804	e59d3008	 ldr         r3, [sp, #8]
  02808	e2833f49	 add         r3, r3, #0x49, 30
  0280c	e5930000	 ldr         r0, [r3]
  02810	eb000000	 bl          DmaStop

; 2051 : 
; 2052 :         if(!DmaEnableInterrupts(pPdd->hRxDmaChannel, NULL))

  02814	e3a01000	 mov         r1, #0
  02818	e59d3008	 ldr         r3, [sp, #8]
  0281c	e2833f4b	 add         r3, r3, #0x4B, 30
  02820	e5930000	 ldr         r0, [r3]
  02824	eb000000	 bl          DmaEnableInterrupts
  02828	e58d001c	 str         r0, [sp, #0x1C]
  0282c	e59d301c	 ldr         r3, [sp, #0x1C]
  02830	e3530000	 cmp         r3, #0
  02834	1a000001	 bne         |$LN4@HWDeinit|

; 2053 :         {
; 2054 :             RETAILMSG(1, (L"UART:HWDeinit:DmaEnableInterrupts failed\r\n"));

  02838	e59f0100	 ldr         r0, [pc, #0x100]
  0283c	eb000000	 bl          NKDbgPrintfW
  02840		 |$LN4@HWDeinit|

; 2055 :         }
; 2056 :         LocalFree(pPdd->RxDmaInfo);

  02840	e59d3008	 ldr         r3, [sp, #8]
  02844	e2833f49	 add         r3, r3, #0x49, 30
  02848	e5930000	 ldr         r0, [r3]
  0284c	eb000000	 bl          LocalFree
  02850		 |$LN5@HWDeinit|

; 2057 :     }
; 2058 :     if (pPdd->TxDmaInfo)

  02850	e59d3008	 ldr         r3, [sp, #8]
  02854	e2833c01	 add         r3, r3, #1, 24
  02858	e5933000	 ldr         r3, [r3]
  0285c	e3530000	 cmp         r3, #0
  02860	0a000007	 beq         |$LN3@HWDeinit|

; 2059 :     {
; 2060 :         DmaStop(pPdd->TxDmaInfo);

  02864	e59d3008	 ldr         r3, [sp, #8]
  02868	e2833c01	 add         r3, r3, #1, 24
  0286c	e5930000	 ldr         r0, [r3]
  02870	eb000000	 bl          DmaStop

; 2061 :         LocalFree(pPdd->TxDmaInfo);

  02874	e59d3008	 ldr         r3, [sp, #8]
  02878	e2833c01	 add         r3, r3, #1, 24
  0287c	e5930000	 ldr         r0, [r3]
  02880	eb000000	 bl          LocalFree
  02884		 |$LN3@HWDeinit|

; 2062 :     }
; 2063 : 
; 2064 :     // Free any allocated physical memory
; 2065 :     if (pPdd->pTxDmaBuffer)

  02884	e59d3008	 ldr         r3, [sp, #8]
  02888	e28330f8	 add         r3, r3, #0xF8
  0288c	e5933000	 ldr         r3, [r3]
  02890	e3530000	 cmp         r3, #0
  02894	0a000003	 beq         |$LN2@HWDeinit|

; 2066 :     {
; 2067 :         FreePhysMem( pPdd->pTxDmaBuffer );

  02898	e59d3008	 ldr         r3, [sp, #8]
  0289c	e28330f8	 add         r3, r3, #0xF8
  028a0	e5930000	 ldr         r0, [r3]
  028a4	eb000000	 bl          FreePhysMem
  028a8		 |$LN2@HWDeinit|

; 2068 :     }
; 2069 :     if (pPdd->pRxDmaBuffer)

  028a8	e59d3008	 ldr         r3, [sp, #8]
  028ac	e2833f45	 add         r3, r3, #0x45, 30
  028b0	e5933000	 ldr         r3, [r3]
  028b4	e3530000	 cmp         r3, #0
  028b8	0a000003	 beq         |$LN1@HWDeinit|

; 2070 :     {
; 2071 :         FreePhysMem( pPdd->pRxDmaBuffer );

  028bc	e59d3008	 ldr         r3, [sp, #8]
  028c0	e2833f45	 add         r3, r3, #0x45, 30
  028c4	e5930000	 ldr         r0, [r3]
  028c8	eb000000	 bl          FreePhysMem
  028cc		 |$LN1@HWDeinit|

; 2072 :     }
; 2073 : 
; 2074 : 	// Release pads
; 2075 : 	ReleaseDevicePads(pPdd->DeviceID);

  028cc	e59d3008	 ldr         r3, [sp, #8]
  028d0	e2833010	 add         r3, r3, #0x10
  028d4	e5930000	 ldr         r0, [r3]
  028d8	eb000000	 bl          ReleaseDevicePads

; 2076 : 
; 2077 :     // Free driver object
; 2078 :     LocalFree(pPdd);

  028dc	e59d0008	 ldr         r0, [sp, #8]
  028e0	eb000000	 bl          LocalFree

; 2079 : 
; 2080 :     DEBUGMSG(ZONE_CLOSE||ZONE_FUNCTION, (L"-HWDeinit\r\n"));

  028e4	e59f3050	 ldr         r3, [pc, #0x50]
  028e8	e5933440	 ldr         r3, [r3, #0x440]
  028ec	e3130010	 tst         r3, #0x10
  028f0	1a000006	 bne         |$LN17@HWDeinit|
  028f4	e59f3040	 ldr         r3, [pc, #0x40]
  028f8	e5933440	 ldr         r3, [r3, #0x440]
  028fc	e3130a02	 tst         r3, #2, 20
  02900	1a000002	 bne         |$LN17@HWDeinit|
  02904	e3a03000	 mov         r3, #0
  02908	e58d3020	 str         r3, [sp, #0x20]
  0290c	ea000003	 b           |$LN18@HWDeinit|
  02910		 |$LN17@HWDeinit|
  02910	e59f0020	 ldr         r0, [pc, #0x20]
  02914	eb000000	 bl          NKDbgPrintfW
  02918	e3a03001	 mov         r3, #1
  0291c	e58d3020	 str         r3, [sp, #0x20]
  02920		 |$LN18@HWDeinit|

; 2081 :     return TRUE;

  02920	e3a03001	 mov         r3, #1
  02924	e58d3014	 str         r3, [sp, #0x14]

; 2082 : }

  02928	e59d0014	 ldr         r0, [sp, #0x14]
  0292c	e28dd024	 add         sp, sp, #0x24
  02930	e89d6000	 ldmia       sp, {sp, lr}
  02934	e12fff1e	 bx          lr
  02938		 |$LN22@HWDeinit|
  02938		 |$LN23@HWDeinit|
  02938	00000000	 DCD         |??_C@_1BI@BIKPNPOG@?$AA?9?$AAH?$AAW?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@|
  0293c		 |$LN24@HWDeinit|
  0293c	00000000	 DCD         |dpCurSettings|
  02940		 |$LN25@HWDeinit|
  02940	00000000	 DCD         |??_C@_1FG@LMAMANNM@?$AAU?$AAA?$AAR?$AAT?$AA?3?$AAH?$AAW?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?3?$AAD?$AAm?$AAa?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt@|
  02944		 |$LN26@HWDeinit|
  02944	010100d8	 DCD         0x10100d8
  02948		 |$LN27@HWDeinit|
  02948	00000000	 DCD         |??_C@_1CI@LFFEAADB@?$AA?$CL?$AAH?$AAW?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  0294c		 |$M46931|

			 ENDP  ; |HWDeinit|

	EXPORT	|ResetEvent|
	EXPORT	|PowerThreadProc|

  00070			 AREA	 |.pdata|, PDATA
|$T46945| DCD	|$LN13@PowerThrea|
	DCD	0x40004704
; Function compile flags: /Odtp

  0294c			 AREA	 |.text|, CODE, ARM

  0294c		 |PowerThreadProc| PROC

; 2094 : {

  0294c		 |$LN13@PowerThrea|
  0294c	e1a0c00d	 mov         r12, sp
  02950	e92d0001	 stmdb       sp!, {r0}
  02954	e92d5000	 stmdb       sp!, {r12, lr}
  02958	e24dd00c	 sub         sp, sp, #0xC
  0295c		 |$M46942|

; 2095 :     DWORD nTimeout = INFINITE;

  0295c	e3e03000	 mvn         r3, #0
  02960	e58d3000	 str         r3, [sp]

; 2096 :     UARTPDD *pPdd = (UARTPDD *)pParam;

  02964	e59d3014	 ldr         r3, [sp, #0x14]
  02968	e58d3004	 str         r3, [sp, #4]
  0296c		 |$LN8@PowerThrea|

; 2097 : 
; 2098 : 
; 2099 :     for(;;)
; 2100 :     {
; 2101 :         WaitForSingleObject(pPdd->hPowerEvent, nTimeout);

  0296c	e59d1000	 ldr         r1, [sp]
  02970	e59d3004	 ldr         r3, [sp, #4]
  02974	e2833f57	 add         r3, r3, #0x57, 30
  02978	e5930000	 ldr         r0, [r3]
  0297c	eb000000	 bl          WaitForSingleObject

; 2102 : 
; 2103 :         if (pPdd->bExitPowerThread == TRUE) break;

  02980	e59d3004	 ldr         r3, [sp, #4]
  02984	e2833f59	 add         r3, r3, #0x59, 30
  02988	e5933000	 ldr         r3, [r3]
  0298c	e3530001	 cmp         r3, #1
  02990	1a000000	 bne         |$LN6@PowerThrea|
  02994	ea00002d	 b           |$LN7@PowerThrea|
  02998		 |$LN6@PowerThrea|

; 2104 :         // serialize access to power state changes
; 2105 :         EnterCriticalSection(&pPdd->hwCS);

  02998	e59d3004	 ldr         r3, [sp, #4]
  0299c	e2830098	 add         r0, r3, #0x98
  029a0	eb000000	 bl          EnterCriticalSection

; 2106 : 
; 2107 :         // by the time this thread got the hwCS hPowerEvent may
; 2108 :         // have gotten resignaled.  Clear the event to  make
; 2109 :         // sure the Power thread isn't awaken prematurely
; 2110 :         //
; 2111 :         ResetEvent(pPdd->hPowerEvent);

  029a4	e59d3004	 ldr         r3, [sp, #4]
  029a8	e2833f57	 add         r3, r3, #0x57, 30
  029ac	e5930000	 ldr         r0, [r3]
  029b0	eb000000	 bl          ResetEvent

; 2112 : 
; 2113 :         // check if we need to reset the timer
; 2114 :         if (pPdd->RxTxRefCount == 0)

  029b4	e59d3004	 ldr         r3, [sp, #4]
  029b8	e2833d05	 add         r3, r3, #5, 26
  029bc	e5933000	 ldr         r3, [r3]
  029c0	e3530000	 cmp         r3, #0
  029c4	1a00001b	 bne         |$LN5@PowerThrea|

; 2115 :         {
; 2116 :             // We disable the AutoIdle and put Uart into power
; 2117 :             // force Idle mode only when this thread wakes-up
; 2118 :             // twice in a row with no RxTxRefCount = 0
; 2119 :             // This is achieved by using the bDisableAutoIdle
; 2120 :             // flag to determine if power state changed since
; 2121 :             // the last time this thread woke-up
; 2122 :             //
; 2123 :             if (pPdd->bDisableAutoIdle == TRUE)

  029c8	e59d3004	 ldr         r3, [sp, #4]
  029cc	e2833f5a	 add         r3, r3, #0x5A, 30
  029d0	e5933000	 ldr         r3, [r3]
  029d4	e3530001	 cmp         r3, #1
  029d8	1a00000d	 bne         |$LN4@PowerThrea|

; 2124 :             {
; 2125 :                 // check to make sure the uart clocks are on
; 2126 :                 if (pPdd->currentDX >= D3) 

  029dc	e59d3004	 ldr         r3, [sp, #4]
  029e0	e2833030	 add         r3, r3, #0x30
  029e4	e5933000	 ldr         r3, [r3]
  029e8	e3530003	 cmp         r3, #3
  029ec	ba000005	 blt         |$LN3@PowerThrea|

; 2127 :                 {
; 2128 :                 //RETAILMSG(1,(TEXT("UART:Switching to Force Idle \r")));
; 2129 :                 OUTREG8(
; 2130 :                         &pPdd->pUartRegs->SYSC,
; 2131 :                         // turn on force idle, to allow full retention
; 2132 :                         UART_SYSC_IDLE_FORCE|UART_SYSC_WAKEUP_ENABLE|UART_SYSC_AUTOIDLE
; 2133 :                         );

  029f0	e59d3004	 ldr         r3, [sp, #4]
  029f4	e2833024	 add         r3, r3, #0x24
  029f8	e5933000	 ldr         r3, [r3]
  029fc	e2832054	 add         r2, r3, #0x54
  02a00	e3a03005	 mov         r3, #5
  02a04	e5c23000	 strb        r3, [r2]
  02a08		 |$LN3@PowerThrea|

; 2134 :                 }
; 2135 :                 nTimeout = INFINITE;

  02a08	e3e03000	 mvn         r3, #0
  02a0c	e58d3000	 str         r3, [sp]

; 2136 :             }
; 2137 :             else

  02a10	ea000007	 b           |$LN2@PowerThrea|
  02a14		 |$LN4@PowerThrea|

; 2138 :             {
; 2139 :                 // wait for activity time-out before shutting off power.
; 2140 :                 pPdd->bDisableAutoIdle = TRUE;

  02a14	e59d3004	 ldr         r3, [sp, #4]
  02a18	e2832f5a	 add         r2, r3, #0x5A, 30
  02a1c	e3a03001	 mov         r3, #1
  02a20	e5823000	 str         r3, [r2]

; 2141 :                 nTimeout = pPdd->hwTimeout;

  02a24	e59d3004	 ldr         r3, [sp, #4]
  02a28	e2833020	 add         r3, r3, #0x20
  02a2c	e5933000	 ldr         r3, [r3]
  02a30	e58d3000	 str         r3, [sp]
  02a34		 |$LN2@PowerThrea|

; 2142 :             }
; 2143 :         }
; 2144 :         else

  02a34	ea000001	 b           |$LN1@PowerThrea|
  02a38		 |$LN5@PowerThrea|

; 2145 :         {
; 2146 :             nTimeout = INFINITE;

  02a38	e3e03000	 mvn         r3, #0
  02a3c	e58d3000	 str         r3, [sp]
  02a40		 |$LN1@PowerThrea|

; 2147 :         }
; 2148 : 
; 2149 :         LeaveCriticalSection(&pPdd->hwCS);

  02a40	e59d3004	 ldr         r3, [sp, #4]
  02a44	e2830098	 add         r0, r3, #0x98
  02a48	eb000000	 bl          LeaveCriticalSection

; 2150 :     }

  02a4c	eaffffc6	 b           |$LN8@PowerThrea|
  02a50		 |$LN7@PowerThrea|

; 2151 :     return 1;

  02a50	e3a03001	 mov         r3, #1
  02a54	e58d3008	 str         r3, [sp, #8]

; 2152 : }

  02a58	e59d0008	 ldr         r0, [sp, #8]
  02a5c	e28dd00c	 add         sp, sp, #0xC
  02a60	e89d6000	 ldmia       sp, {sp, lr}
  02a64	e12fff1e	 bx          lr
  02a68		 |$M46943|

			 ENDP  ; |PowerThreadProc|

; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T46951| DCD	|$LN5@ResetEvent|
	DCD	0x40000e04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |ResetEvent| PROC

; 223  : _inline BOOL ResetEvent(HANDLE h) {

  00000		 |$LN5@ResetEvent|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd008	 sub         sp, sp, #8
  00010		 |$M46948|

; 224  : 	return EventModify(h,EVENT_RESET);

  00010	e3a01002	 mov         r1, #2
  00014	e59d0010	 ldr         r0, [sp, #0x10]
  00018	eb000000	 bl          EventModify
  0001c	e58d0004	 str         r0, [sp, #4]
  00020	e59d3004	 ldr         r3, [sp, #4]
  00024	e58d3000	 str         r3, [sp]

; 225  : }

  00028	e59d0000	 ldr         r0, [sp]
  0002c	e28dd008	 add         sp, sp, #8
  00030	e89d6000	 ldmia       sp, {sp, lr}
  00034	e12fff1e	 bx          lr
  00038		 |$M46949|

			 ENDP  ; |ResetEvent|

	EXPORT	|??_C@_1CG@PFCGPAE@?$AA?9?$AAH?$AAW?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FO@LKNEOPJD@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAH?$AAW?$AAO?$AAp?$AAe?$AAn?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DE@NHGIILBG@?$AAH?$AAW?$AAO?$AAp?$AAe?$AAn?$AA?5?$AA?9?$AA?5?$AAM?$AAe?$AAm?$AAb?$AAa?$AAs?$AAe?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CE@NJJAAKDL@?$AA?$CL?$AAH?$AAW?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00078			 AREA	 |.pdata|, PDATA
|$T46969| DCD	|$LN16@HWOpen|
	DCD	0x40013c04
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\serial\uart\pdd.c

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CG@PFCGPAE@?$AA?9?$AAH?$AAW?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "H", 0x0, "W", 0x0, "O", 0x0, "p", 0x0, "e", 0x0, "n"
	DCB	0x0, "(", 0x0, "r", 0x0, "c", 0x0, " ", 0x0, "=", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FO@LKNEOPJD@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAH?$AAW?$AAO?$AAp?$AAe?$AAn?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "H", 0x0, "W", 0x0, "O", 0x0, "p", 0x0, "e", 0x0, "n"
	DCB	0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a", 0x0, "i", 0x0, "l"
	DCB	0x0, "e", 0x0, "d", 0x0, " ", 0x0, "t", 0x0, "o", 0x0, " "
	DCB	0x0, "c", 0x0, "r", 0x0, "e", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, " ", 0x0, "P", 0x0, "o", 0x0, "w", 0x0, "e", 0x0, "r"
	DCB	0x0, " ", 0x0, "T", 0x0, "h", 0x0, "r", 0x0, "e", 0x0, "a"
	DCB	0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DE@NHGIILBG@?$AAH?$AAW?$AAO?$AAp?$AAe?$AAn?$AA?5?$AA?9?$AA?5?$AAM?$AAe?$AAm?$AAb?$AAa?$AAs?$AAe?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "H"
	DCB	0x0, "W", 0x0, "O", 0x0, "p", 0x0, "e", 0x0, "n", 0x0, " "
	DCB	0x0, "-", 0x0, " ", 0x0, "M", 0x0, "e", 0x0, "m", 0x0, "b"
	DCB	0x0, "a", 0x0, "s", 0x0, "e", 0x0, "=", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@NJJAAKDL@?$AA?$CL?$AAH?$AAW?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "H", 0x0, "W", 0x0, "O", 0x0, "p", 0x0, "e", 0x0, "n"
	DCB	0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "x", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  02a68			 AREA	 |.text|, CODE, ARM

  02a68		 |HWOpen| PROC

; 2161 : {

  02a68		 |$LN16@HWOpen|
  02a68	e1a0c00d	 mov         r12, sp
  02a6c	e92d0001	 stmdb       sp!, {r0}
  02a70	e92d5000	 stmdb       sp!, {r12, lr}
  02a74	e24dd040	 sub         sp, sp, #0x40
  02a78		 |$M46966|

; 2162 :     BOOL rc = FALSE;

  02a78	e3a03000	 mov         r3, #0
  02a7c	e58d3008	 str         r3, [sp, #8]

; 2163 :     UARTPDD *pPdd = (UARTPDD*)pvContext;

  02a80	e59d3048	 ldr         r3, [sp, #0x48]
  02a84	e58d3010	 str         r3, [sp, #0x10]

; 2164 : 
; 2165 :     //Modem line testing
; 2166 :     DWORD dwStatus = 0;

  02a88	e3a03000	 mov         r3, #0
  02a8c	e58d300c	 str         r3, [sp, #0xC]

; 2167 : 
; 2168 :     DEBUGMSG(ZONE_OPEN||ZONE_FUNCTION, (L"+HWOpen(0x%08x)\r\n", pvContext));

  02a90	e59f34ac	 ldr         r3, [pc, #0x4AC]
  02a94	e5933440	 ldr         r3, [r3, #0x440]
  02a98	e3130002	 tst         r3, #2
  02a9c	1a000006	 bne         |$LN6@HWOpen|
  02aa0	e59f349c	 ldr         r3, [pc, #0x49C]
  02aa4	e5933440	 ldr         r3, [r3, #0x440]
  02aa8	e3130a02	 tst         r3, #2, 20
  02aac	1a000002	 bne         |$LN6@HWOpen|
  02ab0	e3a03000	 mov         r3, #0
  02ab4	e58d3020	 str         r3, [sp, #0x20]
  02ab8	ea000004	 b           |$LN7@HWOpen|
  02abc		 |$LN6@HWOpen|
  02abc	e59d1048	 ldr         r1, [sp, #0x48]
  02ac0	e59f048c	 ldr         r0, [pc, #0x48C]
  02ac4	eb000000	 bl          NKDbgPrintfW
  02ac8	e3a03001	 mov         r3, #1
  02acc	e58d3020	 str         r3, [sp, #0x20]
  02ad0		 |$LN7@HWOpen|

; 2169 :     DEBUGMSG(ZONE_FUNCTION, (L"HWOpen - Membase=0x%08x\r\n", pPdd->memBase[0]));

  02ad0	e59f346c	 ldr         r3, [pc, #0x46C]
  02ad4	e5933440	 ldr         r3, [r3, #0x440]
  02ad8	e3130a02	 tst         r3, #2, 20
  02adc	0a000006	 beq         |$LN8@HWOpen|
  02ae0	e59d3010	 ldr         r3, [sp, #0x10]
  02ae4	e5931000	 ldr         r1, [r3]
  02ae8	e59f0460	 ldr         r0, [pc, #0x460]
  02aec	eb000000	 bl          NKDbgPrintfW
  02af0	e3a03001	 mov         r3, #1
  02af4	e58d3024	 str         r3, [sp, #0x24]
  02af8	ea000001	 b           |$LN9@HWOpen|
  02afc		 |$LN8@HWOpen|
  02afc	e3a03000	 mov         r3, #0
  02b00	e58d3024	 str         r3, [sp, #0x24]
  02b04		 |$LN9@HWOpen|

; 2170 : 
; 2171 :     if (pPdd->open) goto cleanUp;

  02b04	e59d3010	 ldr         r3, [sp, #0x10]
  02b08	e2833054	 add         r3, r3, #0x54
  02b0c	e5933000	 ldr         r3, [r3]
  02b10	e3530000	 cmp         r3, #0
  02b14	0a000000	 beq         |$LN3@HWOpen|
  02b18	ea0000f2	 b           |$cleanUp$45536|
  02b1c		 |$LN3@HWOpen|

; 2172 : 
; 2173 :     // We have set hardware to D0
; 2174 :     pPdd->externalDX = D0;

  02b1c	e59d3010	 ldr         r3, [sp, #0x10]
  02b20	e2832034	 add         r2, r3, #0x34
  02b24	e3a03000	 mov         r3, #0
  02b28	e5823000	 str         r3, [r2]

; 2175 :     SetPower(pPdd, D0);

  02b2c	e3a01000	 mov         r1, #0
  02b30	e59d0010	 ldr         r0, [sp, #0x10]
  02b34	eb000000	 bl          SetPower

; 2176 : 
; 2177 :     SetDefaultDCB(pPdd);

  02b38	e59d0010	 ldr         r0, [sp, #0x10]
  02b3c	eb000000	 bl          SetDefaultDCB

; 2178 : 
; 2179 :     pPdd->commErrors    = 0;

  02b40	e59d3010	 ldr         r3, [sp, #0x10]
  02b44	e2832074	 add         r2, r3, #0x74
  02b48	e3a03000	 mov         r3, #0
  02b4c	e5823000	 str         r3, [r2]

; 2180 :     pPdd->overrunCount  = 0;

  02b50	e59d3010	 ldr         r3, [sp, #0x10]
  02b54	e2832078	 add         r2, r3, #0x78
  02b58	e3a03000	 mov         r3, #0
  02b5c	e5823000	 str         r3, [r2]

; 2181 :     pPdd->flowOffCTS    = FALSE;

  02b60	e59d3010	 ldr         r3, [sp, #0x10]
  02b64	e2832090	 add         r2, r3, #0x90
  02b68	e3a03000	 mov         r3, #0
  02b6c	e5823000	 str         r3, [r2]

; 2182 :     pPdd->flowOffDSR    = FALSE;

  02b70	e59d3010	 ldr         r3, [sp, #0x10]
  02b74	e2832094	 add         r2, r3, #0x94
  02b78	e3a03000	 mov         r3, #0
  02b7c	e5823000	 str         r3, [r2]

; 2183 :     pPdd->addTxIntr     = FALSE;

  02b80	e59d3010	 ldr         r3, [sp, #0x10]
  02b84	e283208c	 add         r2, r3, #0x8C
  02b88	e3a03000	 mov         r3, #0
  02b8c	e5823000	 str         r3, [r2]

; 2184 :     pPdd->open          = TRUE;

  02b90	e59d3010	 ldr         r3, [sp, #0x10]
  02b94	e2832054	 add         r2, r3, #0x54
  02b98	e3a03001	 mov         r3, #1
  02b9c	e5823000	 str         r3, [r2]

; 2185 :     pPdd->wakeUpMode    = FALSE;

  02ba0	e59d3010	 ldr         r3, [sp, #0x10]
  02ba4	e2832080	 add         r2, r3, #0x80
  02ba8	e3a03000	 mov         r3, #0
  02bac	e5823000	 str         r3, [r2]

; 2186 :     pPdd->RxTxRefCount  = 0;

  02bb0	e59d3010	 ldr         r3, [sp, #0x10]
  02bb4	e2832d05	 add         r2, r3, #5, 26
  02bb8	e3a03000	 mov         r3, #0
  02bbc	e5823000	 str         r3, [r2]

; 2187 :     pPdd->bExitPowerThread = FALSE;

  02bc0	e59d3010	 ldr         r3, [sp, #0x10]
  02bc4	e2832f59	 add         r2, r3, #0x59, 30
  02bc8	e3a03000	 mov         r3, #0
  02bcc	e5823000	 str         r3, [r2]

; 2188 : 
; 2189 :     // Event for power thread to check Rx -Tx activity
; 2190 :     pPdd->hPowerEvent = CreateEvent(0,TRUE,FALSE,NULL);

  02bd0	e3a03000	 mov         r3, #0
  02bd4	e3a02000	 mov         r2, #0
  02bd8	e3a01001	 mov         r1, #1
  02bdc	e3a00000	 mov         r0, #0
  02be0	eb000000	 bl          CreateEventW
  02be4	e58d0028	 str         r0, [sp, #0x28]
  02be8	e59d3010	 ldr         r3, [sp, #0x10]
  02bec	e2832f57	 add         r2, r3, #0x57, 30
  02bf0	e59d3028	 ldr         r3, [sp, #0x28]
  02bf4	e5823000	 str         r3, [r2]

; 2191 : 
; 2192 :     // spawn power thread
; 2193 :     pPdd->hPowerThread = CreateThread(NULL, 0, PowerThreadProc, pPdd, 0, NULL);

  02bf8	e3a03000	 mov         r3, #0
  02bfc	e58d3004	 str         r3, [sp, #4]
  02c00	e3a03000	 mov         r3, #0
  02c04	e58d3000	 str         r3, [sp]
  02c08	e59d3010	 ldr         r3, [sp, #0x10]
  02c0c	e59f2338	 ldr         r2, [pc, #0x338]
  02c10	e3a01000	 mov         r1, #0
  02c14	e3a00000	 mov         r0, #0
  02c18	eb000000	 bl          CreateThread
  02c1c	e58d002c	 str         r0, [sp, #0x2C]
  02c20	e59d3010	 ldr         r3, [sp, #0x10]
  02c24	e2832e16	 add         r2, r3, #0x16, 28
  02c28	e59d302c	 ldr         r3, [sp, #0x2C]
  02c2c	e5823000	 str         r3, [r2]

; 2194 : 
; 2195 :     if (pPdd->hPowerThread == NULL)

  02c30	e59d3010	 ldr         r3, [sp, #0x10]
  02c34	e2833e16	 add         r3, r3, #0x16, 28
  02c38	e5933000	 ldr         r3, [r3]
  02c3c	e3530000	 cmp         r3, #0
  02c40	1a00000b	 bne         |$LN2@HWOpen|

; 2196 :     {
; 2197 :         DEBUGMSG(ZONE_ERROR, (L"ERROR: HWOpen: "
; 2198 :             L"Failed to create Power Thread\r\n"
; 2199 :             ));

  02c44	e59f32f8	 ldr         r3, [pc, #0x2F8]
  02c48	e5933440	 ldr         r3, [r3, #0x440]
  02c4c	e3130902	 tst         r3, #2, 18
  02c50	0a000004	 beq         |$LN10@HWOpen|
  02c54	e59f02ec	 ldr         r0, [pc, #0x2EC]
  02c58	eb000000	 bl          NKDbgPrintfW
  02c5c	e3a03001	 mov         r3, #1
  02c60	e58d3030	 str         r3, [sp, #0x30]
  02c64	ea000001	 b           |$LN11@HWOpen|
  02c68		 |$LN10@HWOpen|
  02c68	e3a03000	 mov         r3, #0
  02c6c	e58d3030	 str         r3, [sp, #0x30]
  02c70		 |$LN11@HWOpen|

; 2200 :         goto cleanUp;

  02c70	ea00009c	 b           |$cleanUp$45536|
  02c74		 |$LN2@HWOpen|

; 2201 :     }
; 2202 : 
; 2203 :     EnterCriticalSection(&pPdd->hwCS);

  02c74	e59d3010	 ldr         r3, [sp, #0x10]
  02c78	e2830098	 add         r0, r3, #0x98
  02c7c	eb000000	 bl          EnterCriticalSection

; 2204 : 
; 2205 :     // Set line control register
; 2206 :     SetWordLength(pPdd, pPdd->dcb.ByteSize);

  02c80	e59d3010	 ldr         r3, [sp, #0x10]
  02c84	e283306a	 add         r3, r3, #0x6A
  02c88	e5d31000	 ldrb        r1, [r3]
  02c8c	e59d0010	 ldr         r0, [sp, #0x10]
  02c90	eb000000	 bl          SetWordLength

; 2207 :     SetStopBits(pPdd, pPdd->dcb.StopBits);

  02c94	e59d3010	 ldr         r3, [sp, #0x10]
  02c98	e283306c	 add         r3, r3, #0x6C
  02c9c	e5d31000	 ldrb        r1, [r3]
  02ca0	e59d0010	 ldr         r0, [sp, #0x10]
  02ca4	eb000000	 bl          SetStopBits

; 2208 :     SetParity(pPdd, pPdd->dcb.Parity);

  02ca8	e59d3010	 ldr         r3, [sp, #0x10]
  02cac	e283306b	 add         r3, r3, #0x6B
  02cb0	e5d31000	 ldrb        r1, [r3]
  02cb4	e59d0010	 ldr         r0, [sp, #0x10]
  02cb8	eb000000	 bl          SetParity

; 2209 : 
; 2210 :     // Set modem control register
; 2211 :     pPdd->currentMCR = 0;

  02cbc	e59d3010	 ldr         r3, [sp, #0x10]
  02cc0	e2833c01	 add         r3, r3, #1, 24
  02cc4	e283207d	 add         r2, r3, #0x7D
  02cc8	e3a03000	 mov         r3, #0
  02ccc	e5c23000	 strb        r3, [r2]

; 2212 :     OUTREG8(&pPdd->pUartRegs->MCR, 0);

  02cd0	e59d3010	 ldr         r3, [sp, #0x10]
  02cd4	e2833024	 add         r3, r3, #0x24
  02cd8	e5933000	 ldr         r3, [r3]
  02cdc	e2832010	 add         r2, r3, #0x10
  02ce0	e3a03000	 mov         r3, #0
  02ce4	e5c23000	 strb        r3, [r2]

; 2213 :     //Clear Tx and Rx FIFO
; 2214 :     OUTREG8(&pPdd->pUartRegs->FCR, pPdd->CurrentFCR | UART_FCR_TX_FIFO_CLEAR | UART_FCR_RX_FIFO_CLEAR);

  02ce8	e59d3010	 ldr         r3, [sp, #0x10]
  02cec	e2833089	 add         r3, r3, #0x89
  02cf0	e5d33000	 ldrb        r3, [r3]
  02cf4	e3833004	 orr         r3, r3, #4
  02cf8	e3833002	 orr         r3, r3, #2
  02cfc	e20320ff	 and         r2, r3, #0xFF
  02d00	e59d3010	 ldr         r3, [sp, #0x10]
  02d04	e2833024	 add         r3, r3, #0x24
  02d08	e5933000	 ldr         r3, [r3]
  02d0c	e2833008	 add         r3, r3, #8
  02d10	e5c32000	 strb        r2, [r3]

; 2215 : 
; 2216 :     // Do we need to read RESUME register in case there was an overrun error in the FIFO?
; 2217 :     INREG8(&pPdd->pUartRegs->RESUME);

  02d14	e59d3010	 ldr         r3, [sp, #0x10]
  02d18	e2833024	 add         r3, r3, #0x24
  02d1c	e5933000	 ldr         r3, [r3]
  02d20	e283302c	 add         r3, r3, #0x2C
  02d24	e5d33000	 ldrb        r3, [r3]
  02d28	e5cd3034	 strb        r3, [sp, #0x34]

; 2218 : 
; 2219 :     // Reset the RX dma info.
; 2220 :     if(pPdd->RxDmaInfo) {

  02d2c	e59d3010	 ldr         r3, [sp, #0x10]
  02d30	e2833f49	 add         r3, r3, #0x49, 30
  02d34	e5933000	 ldr         r3, [r3]
  02d38	e3530000	 cmp         r3, #0
  02d3c	0a00004d	 beq         |$LN1@HWOpen|

; 2221 : 
; 2222 :         // Just to be safe we will make sure DMA is stopped and the status is clear
; 2223 :         DmaStop(pPdd->RxDmaInfo);

  02d40	e59d3010	 ldr         r3, [sp, #0x10]
  02d44	e2833f49	 add         r3, r3, #0x49, 30
  02d48	e5930000	 ldr         r0, [r3]
  02d4c	eb000000	 bl          DmaStop

; 2224 :         dwStatus = DmaGetStatus(pPdd->RxDmaInfo);

  02d50	e59d3010	 ldr         r3, [sp, #0x10]
  02d54	e2833f49	 add         r3, r3, #0x49, 30
  02d58	e5930000	 ldr         r0, [r3]
  02d5c	eb000000	 bl          DmaGetStatus
  02d60	e58d0038	 str         r0, [sp, #0x38]
  02d64	e59d3038	 ldr         r3, [sp, #0x38]
  02d68	e58d300c	 str         r3, [sp, #0xC]

; 2225 :         DmaClearStatus(pPdd->RxDmaInfo, dwStatus);

  02d6c	e59d100c	 ldr         r1, [sp, #0xC]
  02d70	e59d3010	 ldr         r3, [sp, #0x10]
  02d74	e2833f49	 add         r3, r3, #0x49, 30
  02d78	e5930000	 ldr         r0, [r3]
  02d7c	eb000000	 bl          DmaClearStatus

; 2226 : 
; 2227 :         //We must do this since the MDD calls RXResetFifo
; 2228 :         DmaSetElementAndFrameCount (pPdd->RxDmaInfo,
; 2229 :             (UINT16)pPdd->dwRxFifoTriggerLevel,
; 2230 :             (UINT16)((pPdd->RxDmaBufferSize + pPdd->dwRxFifoTriggerLevel - 1) / pPdd->dwRxFifoTriggerLevel));

  02d80	e59d3010	 ldr         r3, [sp, #0x10]
  02d84	e2832e11	 add         r2, r3, #0x11, 28
  02d88	e59d3010	 ldr         r3, [sp, #0x10]
  02d8c	e2833f55	 add         r3, r3, #0x55, 30
  02d90	e5922000	 ldr         r2, [r2]
  02d94	e5933000	 ldr         r3, [r3]
  02d98	e0823003	 add         r3, r2, r3
  02d9c	e2431001	 sub         r1, r3, #1
  02da0	e59d3010	 ldr         r3, [sp, #0x10]
  02da4	e2833f55	 add         r3, r3, #0x55, 30
  02da8	e5930000	 ldr         r0, [r3]
  02dac	eb000000	 bl          __rt_udiv
  02db0	e1a02800	 mov         r2, r0, lsl #16
  02db4	e1a02822	 mov         r2, r2, lsr #16
  02db8	e59d3010	 ldr         r3, [sp, #0x10]
  02dbc	e2833f55	 add         r3, r3, #0x55, 30
  02dc0	e5933000	 ldr         r3, [r3]
  02dc4	e1a01803	 mov         r1, r3, lsl #16
  02dc8	e1a01821	 mov         r1, r1, lsr #16
  02dcc	e59d3010	 ldr         r3, [sp, #0x10]
  02dd0	e2833f49	 add         r3, r3, #0x49, 30
  02dd4	e5930000	 ldr         r0, [r3]
  02dd8	eb000000	 bl          DmaSetElementAndFrameCount

; 2231 :         DmaSetDstBuffer (pPdd->RxDmaInfo,
; 2232 :             pPdd->pRxDmaBuffer,
; 2233 :             pPdd->paRxDmaBuffer);

  02ddc	e59d3010	 ldr         r3, [sp, #0x10]
  02de0	e2833f46	 add         r3, r3, #0x46, 30
  02de4	e5932000	 ldr         r2, [r3]
  02de8	e59d3010	 ldr         r3, [sp, #0x10]
  02dec	e2833f45	 add         r3, r3, #0x45, 30
  02df0	e5931000	 ldr         r1, [r3]
  02df4	e59d3010	 ldr         r3, [sp, #0x10]
  02df8	e2833f49	 add         r3, r3, #0x49, 30
  02dfc	e5930000	 ldr         r0, [r3]
  02e00	eb000000	 bl          DmaSetDstBuffer

; 2234 : 
; 2235 :         pPdd->bRxDMASignaled = 0;

  02e04	e59d3010	 ldr         r3, [sp, #0x10]
  02e08	e2832f51	 add         r2, r3, #0x51, 30
  02e0c	e3a03000	 mov         r3, #0
  02e10	e5823000	 str         r3, [r2]

; 2236 :         pPdd->bRxWrapped     = FALSE;

  02e14	e59d3010	 ldr         r3, [sp, #0x10]
  02e18	e2832f52	 add         r2, r3, #0x52, 30
  02e1c	e3a03000	 mov         r3, #0
  02e20	e5823000	 str         r3, [r2]

; 2237 :         pPdd->pRxDMALastWrite = pPdd->pRxDmaBuffer;

  02e24	e59d3010	 ldr         r3, [sp, #0x10]
  02e28	e2831f45	 add         r1, r3, #0x45, 30
  02e2c	e59d3010	 ldr         r3, [sp, #0x10]
  02e30	e2832f53	 add         r2, r3, #0x53, 30
  02e34	e5913000	 ldr         r3, [r1]
  02e38	e5823000	 str         r3, [r2]

; 2238 : 
; 2239 :         UpdateDMARxPointer(pPdd, FALSE, 0);

  02e3c	e3a02000	 mov         r2, #0
  02e40	e3a01000	 mov         r1, #0
  02e44	e59d0010	 ldr         r0, [sp, #0x10]
  02e48	eb000000	 bl          UpdateDMARxPointer

; 2240 : 
; 2241 :         SetAutoIdle(pPdd, TRUE);

  02e4c	e3a01001	 mov         r1, #1
  02e50	e59d0010	 ldr         r0, [sp, #0x10]
  02e54	eb000000	 bl          SetAutoIdle

; 2242 :         DmaStart(pPdd->RxDmaInfo);

  02e58	e59d3010	 ldr         r3, [sp, #0x10]
  02e5c	e2833f49	 add         r3, r3, #0x49, 30
  02e60	e5930000	 ldr         r0, [r3]
  02e64	eb000000	 bl          DmaStart

; 2243 :         pPdd->bDmaInitialize = TRUE;

  02e68	e59d3010	 ldr         r3, [sp, #0x10]
  02e6c	e2832e15	 add         r2, r3, #0x15, 28
  02e70	e3a03001	 mov         r3, #1
  02e74	e5823000	 str         r3, [r2]
  02e78		 |$LN1@HWOpen|

; 2244 :     }
; 2245 : 
; 2246 :     // configure uart port with default settings
; 2247 :     SetBaudRate(pPdd, pPdd->dcb.BaudRate);

  02e78	e59d3010	 ldr         r3, [sp, #0x10]
  02e7c	e283305c	 add         r3, r3, #0x5C
  02e80	e5931000	 ldr         r1, [r3]
  02e84	e59d0010	 ldr         r0, [sp, #0x10]
  02e88	eb000000	 bl          SetBaudRate

; 2248 :     // Enable interrupts (no TX interrupt)
; 2249 :     pPdd->intrMask |= UART_IER_LINE|UART_IER_MODEM;

  02e8c	e59d3010	 ldr         r3, [sp, #0x10]
  02e90	e2833088	 add         r3, r3, #0x88
  02e94	e5d33000	 ldrb        r3, [r3]
  02e98	e383100c	 orr         r1, r3, #0xC
  02e9c	e59d3010	 ldr         r3, [sp, #0x10]
  02ea0	e2832088	 add         r2, r3, #0x88
  02ea4	e20130ff	 and         r3, r1, #0xFF
  02ea8	e5c23000	 strb        r3, [r2]

; 2250 :     OUTREG8(&pPdd->pUartRegs->IER, pPdd->intrMask);

  02eac	e59d3010	 ldr         r3, [sp, #0x10]
  02eb0	e2831088	 add         r1, r3, #0x88
  02eb4	e59d3010	 ldr         r3, [sp, #0x10]
  02eb8	e2833024	 add         r3, r3, #0x24
  02ebc	e5933000	 ldr         r3, [r3]
  02ec0	e2832004	 add         r2, r3, #4
  02ec4	e5d13000	 ldrb        r3, [r1]
  02ec8	e5c23000	 strb        r3, [r2]

; 2251 :     // Update line & modem status
; 2252 :     ReadModemStat(pPdd);

  02ecc	e59d0010	 ldr         r0, [sp, #0x10]
  02ed0	eb000000	 bl          ReadModemStat

; 2253 : 
; 2254 :     LeaveCriticalSection(&pPdd->hwCS);

  02ed4	e59d3010	 ldr         r3, [sp, #0x10]
  02ed8	e2830098	 add         r0, r3, #0x98
  02edc	eb000000	 bl          LeaveCriticalSection

; 2255 : 
; 2256 :     rc = TRUE;

  02ee0	e3a03001	 mov         r3, #1
  02ee4	e58d3008	 str         r3, [sp, #8]
  02ee8		 |$cleanUp$45536|

; 2257 : 
; 2258 : cleanUp:
; 2259 :     DEBUGMSG(ZONE_OPEN||ZONE_FUNCTION, (L"-HWOpen(rc = %d)\r\n", rc));

  02ee8	e59f3054	 ldr         r3, [pc, #0x54]
  02eec	e5933440	 ldr         r3, [r3, #0x440]
  02ef0	e3130002	 tst         r3, #2
  02ef4	1a000006	 bne         |$LN12@HWOpen|
  02ef8	e59f3044	 ldr         r3, [pc, #0x44]
  02efc	e5933440	 ldr         r3, [r3, #0x440]
  02f00	e3130a02	 tst         r3, #2, 20
  02f04	1a000002	 bne         |$LN12@HWOpen|
  02f08	e3a03000	 mov         r3, #0
  02f0c	e58d303c	 str         r3, [sp, #0x3C]
  02f10	ea000004	 b           |$LN13@HWOpen|
  02f14		 |$LN12@HWOpen|
  02f14	e59d1008	 ldr         r1, [sp, #8]
  02f18	e59f0020	 ldr         r0, [pc, #0x20]
  02f1c	eb000000	 bl          NKDbgPrintfW
  02f20	e3a03001	 mov         r3, #1
  02f24	e58d303c	 str         r3, [sp, #0x3C]
  02f28		 |$LN13@HWOpen|

; 2260 : 
; 2261 :     return rc;

  02f28	e59d3008	 ldr         r3, [sp, #8]
  02f2c	e58d301c	 str         r3, [sp, #0x1C]

; 2262 : }

  02f30	e59d001c	 ldr         r0, [sp, #0x1C]
  02f34	e28dd040	 add         sp, sp, #0x40
  02f38	e89d6000	 ldmia       sp, {sp, lr}
  02f3c	e12fff1e	 bx          lr
  02f40		 |$LN17@HWOpen|
  02f40		 |$LN18@HWOpen|
  02f40	00000000	 DCD         |??_C@_1CG@PFCGPAE@?$AA?9?$AAH?$AAW?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  02f44		 |$LN19@HWOpen|
  02f44	00000000	 DCD         |dpCurSettings|
  02f48		 |$LN20@HWOpen|
  02f48	00000000	 DCD         |??_C@_1FO@LKNEOPJD@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAH?$AAW?$AAO?$AAp?$AAe?$AAn?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5@|
  02f4c		 |$LN21@HWOpen|
  02f4c	00000000	 DCD         |PowerThreadProc|
  02f50		 |$LN22@HWOpen|
  02f50	00000000	 DCD         |??_C@_1DE@NHGIILBG@?$AAH?$AAW?$AAO?$AAp?$AAe?$AAn?$AA?5?$AA?9?$AA?5?$AAM?$AAe?$AAm?$AAb?$AAa?$AAs?$AAe?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  02f54		 |$LN23@HWOpen|
  02f54	00000000	 DCD         |??_C@_1CE@NJJAAKDL@?$AA?$CL?$AAH?$AAW?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  02f58		 |$M46967|

			 ENDP  ; |HWOpen|

	EXPORT	|??_C@_1CO@MHNAPOAB@?$AA?9?$AAR?$AAe?$AAa?$AAd?$AAM?$AAo?$AAd?$AAe?$AAm?$AAS?$AAt?$AAa?$AAt?$AA?$CI?$AA?$CF?$AA0?$AA2?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CG@HJKCAJOI@?$AA?$CL?$AAR?$AAe?$AAa?$AAd?$AAM?$AAo?$AAd?$AAe?$AAm?$AAS?$AAt?$AAa?$AAt?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|EvaluateEventFlag|

  00080			 AREA	 |.pdata|, PDATA
|$T46986| DCD	|$LN13@ReadModemS|
	DCD	0x40004804

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@MHNAPOAB@?$AA?9?$AAR?$AAe?$AAa?$AAd?$AAM?$AAo?$AAd?$AAe?$AAm?$AAS?$AAt?$AAa?$AAt?$AA?$CI?$AA?$CF?$AA0?$AA2?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "R", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, "M", 0x0, "o"
	DCB	0x0, "d", 0x0, "e", 0x0, "m", 0x0, "S", 0x0, "t", 0x0, "a"
	DCB	0x0, "t", 0x0, "(", 0x0, "%", 0x0, "0", 0x0, "2", 0x0, "x"
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CG@HJKCAJOI@?$AA?$CL?$AAR?$AAe?$AAa?$AAd?$AAM?$AAo?$AAd?$AAe?$AAm?$AAS?$AAt?$AAa?$AAt?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "R", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, "M", 0x0, "o"
	DCB	0x0, "d", 0x0, "e", 0x0, "m", 0x0, "S", 0x0, "t", 0x0, "a"
	DCB	0x0, "t", 0x0, "(", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Odtp

  02f58			 AREA	 |.text|, CODE, ARM

  02f58		 |ReadModemStat| PROC

; 747  : {

  02f58		 |$LN13@ReadModemS|
  02f58	e1a0c00d	 mov         r12, sp
  02f5c	e92d0001	 stmdb       sp!, {r0}
  02f60	e92d5000	 stmdb       sp!, {r12, lr}
  02f64	e24dd018	 sub         sp, sp, #0x18
  02f68		 |$M46983|

; 748  :     OMAP_UART_REGS *pUartRegs = pPdd->pUartRegs;

  02f68	e59d3020	 ldr         r3, [sp, #0x20]
  02f6c	e2833024	 add         r3, r3, #0x24
  02f70	e5933000	 ldr         r3, [r3]
  02f74	e58d3008	 str         r3, [sp, #8]

; 749  :     UCHAR modemStat;
; 750  :     ULONG events;
; 751  : 
; 752  :     DEBUGMSG(ZONE_FUNCTION, (L"+ReadModemStat()\r\n"));

  02f78	e59f30f0	 ldr         r3, [pc, #0xF0]
  02f7c	e5933440	 ldr         r3, [r3, #0x440]
  02f80	e3130a02	 tst         r3, #2, 20
  02f84	0a000004	 beq         |$LN7@ReadModemS|
  02f88	e59f00e4	 ldr         r0, [pc, #0xE4]
  02f8c	eb000000	 bl          NKDbgPrintfW
  02f90	e3a03001	 mov         r3, #1
  02f94	e58d3010	 str         r3, [sp, #0x10]
  02f98	ea000001	 b           |$LN8@ReadModemS|
  02f9c		 |$LN7@ReadModemS|
  02f9c	e3a03000	 mov         r3, #0
  02fa0	e58d3010	 str         r3, [sp, #0x10]
  02fa4		 |$LN8@ReadModemS|

; 753  : 
; 754  :     // Nothing happen yet...
; 755  :     events = 0;

  02fa4	e3a03000	 mov         r3, #0
  02fa8	e58d3000	 str         r3, [sp]

; 756  : 
; 757  :     // Read modem status register (it clear most bits)
; 758  :     modemStat = INREG8(&pUartRegs->MSR);

  02fac	e59d3008	 ldr         r3, [sp, #8]
  02fb0	e2833018	 add         r3, r3, #0x18
  02fb4	e5d33000	 ldrb        r3, [r3]
  02fb8	e5cd3004	 strb        r3, [sp, #4]

; 759  : 
; 760  :     // For changes, we use callback to evaluate the event
; 761  :     if ((modemStat & UART_MSR_CTS) != 0) events |= EV_CTS;

  02fbc	e5dd3004	 ldrb        r3, [sp, #4]
  02fc0	e3130001	 tst         r3, #1
  02fc4	0a000002	 beq         |$LN4@ReadModemS|
  02fc8	e59d3000	 ldr         r3, [sp]
  02fcc	e3833008	 orr         r3, r3, #8
  02fd0	e58d3000	 str         r3, [sp]
  02fd4		 |$LN4@ReadModemS|

; 762  :     if ((modemStat & UART_MSR_DSR) != 0) events |= EV_DSR;

  02fd4	e5dd3004	 ldrb        r3, [sp, #4]
  02fd8	e3130002	 tst         r3, #2
  02fdc	0a000002	 beq         |$LN3@ReadModemS|
  02fe0	e59d3000	 ldr         r3, [sp]
  02fe4	e3833010	 orr         r3, r3, #0x10
  02fe8	e58d3000	 str         r3, [sp]
  02fec		 |$LN3@ReadModemS|

; 763  :     if ((modemStat & UART_MSR_DCD) != 0) events |= EV_RLSD;

  02fec	e5dd3004	 ldrb        r3, [sp, #4]
  02ff0	e3130008	 tst         r3, #8
  02ff4	0a000002	 beq         |$LN2@ReadModemS|
  02ff8	e59d3000	 ldr         r3, [sp]
  02ffc	e3833020	 orr         r3, r3, #0x20
  03000	e58d3000	 str         r3, [sp]
  03004		 |$LN2@ReadModemS|

; 764  : 
; 765  :     // Let MDD know if something happen
; 766  :     if (events != 0) EvaluateEventFlag(pPdd->pMdd, events);

  03004	e59d3000	 ldr         r3, [sp]
  03008	e3530000	 cmp         r3, #0
  0300c	0a000004	 beq         |$LN1@ReadModemS|
  03010	e59d1000	 ldr         r1, [sp]
  03014	e59d3020	 ldr         r3, [sp, #0x20]
  03018	e2833050	 add         r3, r3, #0x50
  0301c	e5930000	 ldr         r0, [r3]
  03020	eb000000	 bl          EvaluateEventFlag
  03024		 |$LN1@ReadModemS|

; 767  : 
; 768  :     DEBUGMSG(ZONE_FUNCTION, (L"-ReadModemStat(%02x)\r\n", modemStat));

  03024	e59f3044	 ldr         r3, [pc, #0x44]
  03028	e5933440	 ldr         r3, [r3, #0x440]
  0302c	e3130a02	 tst         r3, #2, 20
  03030	0a000005	 beq         |$LN9@ReadModemS|
  03034	e5dd1004	 ldrb        r1, [sp, #4]
  03038	e59f002c	 ldr         r0, [pc, #0x2C]
  0303c	eb000000	 bl          NKDbgPrintfW
  03040	e3a03001	 mov         r3, #1
  03044	e58d3014	 str         r3, [sp, #0x14]
  03048	ea000001	 b           |$LN10@ReadModemS|
  0304c		 |$LN9@ReadModemS|
  0304c	e3a03000	 mov         r3, #0
  03050	e58d3014	 str         r3, [sp, #0x14]
  03054		 |$LN10@ReadModemS|

; 769  : 
; 770  :     return modemStat;

  03054	e5dd3004	 ldrb        r3, [sp, #4]
  03058	e5cd300c	 strb        r3, [sp, #0xC]

; 771  : }

  0305c	e5dd000c	 ldrb        r0, [sp, #0xC]
  03060	e28dd018	 add         sp, sp, #0x18
  03064	e89d6000	 ldmia       sp, {sp, lr}
  03068	e12fff1e	 bx          lr
  0306c		 |$LN14@ReadModemS|
  0306c		 |$LN15@ReadModemS|
  0306c	00000000	 DCD         |??_C@_1CO@MHNAPOAB@?$AA?9?$AAR?$AAe?$AAa?$AAd?$AAM?$AAo?$AAd?$AAe?$AAm?$AAS?$AAt?$AAa?$AAt?$AA?$CI?$AA?$CF?$AA0?$AA2?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  03070		 |$LN16@ReadModemS|
  03070	00000000	 DCD         |dpCurSettings|
  03074		 |$LN17@ReadModemS|
  03074	00000000	 DCD         |??_C@_1CG@HJKCAJOI@?$AA?$CL?$AAR?$AAe?$AAa?$AAd?$AAM?$AAo?$AAd?$AAe?$AAm?$AAS?$AAt?$AAa?$AAt?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  03078		 |$M46984|

			 ENDP  ; |ReadModemStat|

	EXPORT	|??_C@_1CI@NFJNIGAK@?$AA?9?$AAS?$AAe?$AAt?$AAB?$AAa?$AAu?$AAd?$AAR?$AAa?$AAt?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EK@OKFAEOFE@?$AA?$CL?$AAS?$AAe?$AAt?$AAB?$AAa?$AAu?$AAd?$AAR?$AAa?$AAt?$AAe?$AA?$CI?$AAr?$AAa?$AAt?$AAe?$AA?3?$AA?$CF?$AAd?$AA?0?$AAm?$AAe?$AAm?$AAb?$AAa?$AAs?$AAe?$AA?3?$AA0?$AAx?$AA?$CF@| [ DATA ] ; `string'

  00088			 AREA	 |.pdata|, PDATA
|$T47000| DCD	|$LN16@SetBaudRat|
	DCD	0x40008404

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@NFJNIGAK@?$AA?9?$AAS?$AAe?$AAt?$AAB?$AAa?$AAu?$AAd?$AAR?$AAa?$AAt?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "S", 0x0, "e", 0x0, "t", 0x0, "B", 0x0, "a", 0x0, "u"
	DCB	0x0, "d", 0x0, "R", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, "("
	DCB	0x0, ")", 0x0, "=", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EK@OKFAEOFE@?$AA?$CL?$AAS?$AAe?$AAt?$AAB?$AAa?$AAu?$AAd?$AAR?$AAa?$AAt?$AAe?$AA?$CI?$AAr?$AAa?$AAt?$AAe?$AA?3?$AA?$CF?$AAd?$AA?0?$AAm?$AAe?$AAm?$AAb?$AAa?$AAs?$AAe?$AA?3?$AA0?$AAx?$AA?$CF@| DCB "+"
	DCB	0x0, "S", 0x0, "e", 0x0, "t", 0x0, "B", 0x0, "a", 0x0, "u"
	DCB	0x0, "d", 0x0, "R", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, "("
	DCB	0x0, "r", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, ":", 0x0, "%"
	DCB	0x0, "d", 0x0, ",", 0x0, "m", 0x0, "e", 0x0, "m", 0x0, "b"
	DCB	0x0, "a", 0x0, "s", 0x0, "e", 0x0, ":", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "x", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Odtp

  03078			 AREA	 |.text|, CODE, ARM

  03078		 |SetBaudRate| PROC

; 785  : {

  03078		 |$LN16@SetBaudRat|
  03078	e1a0c00d	 mov         r12, sp
  0307c	e92d0003	 stmdb       sp!, {r0, r1}
  03080	e92d5000	 stmdb       sp!, {r12, lr}
  03084	e24dd018	 sub         sp, sp, #0x18
  03088		 |$M46997|

; 786  :     BOOL rc = FALSE;

  03088	e3a03000	 mov         r3, #0
  0308c	e58d3000	 str         r3, [sp]

; 787  :     OMAP_UART_REGS *pUartRegs = pPdd->pUartRegs;

  03090	e59d3020	 ldr         r3, [sp, #0x20]
  03094	e2833024	 add         r3, r3, #0x24
  03098	e5933000	 ldr         r3, [r3]
  0309c	e58d3004	 str         r3, [sp, #4]

; 788  :     USHORT divider;
; 789  :     UCHAR mdr1;
; 790  : 
; 791  :     DEBUGMSG(ZONE_FUNCTION, (L"+SetBaudRate(rate:%d,membase:0x%x)\r\n",baudRate, pPdd->memBase[0]));

  030a0	e59f31d8	 ldr         r3, [pc, #0x1D8]
  030a4	e5933440	 ldr         r3, [r3, #0x440]
  030a8	e3130a02	 tst         r3, #2, 20
  030ac	0a000007	 beq         |$LN10@SetBaudRat|
  030b0	e59d3020	 ldr         r3, [sp, #0x20]
  030b4	e5932000	 ldr         r2, [r3]
  030b8	e59d1024	 ldr         r1, [sp, #0x24]
  030bc	e59f01c0	 ldr         r0, [pc, #0x1C0]
  030c0	eb000000	 bl          NKDbgPrintfW
  030c4	e3a03001	 mov         r3, #1
  030c8	e58d3010	 str         r3, [sp, #0x10]
  030cc	ea000001	 b           |$LN11@SetBaudRat|
  030d0		 |$LN10@SetBaudRat|
  030d0	e3a03000	 mov         r3, #0
  030d4	e58d3010	 str         r3, [sp, #0x10]
  030d8		 |$LN11@SetBaudRat|

; 792  : 
; 793  :     // Calculate mode and divider
; 794  :     if (baudRate < 300)

  030d8	e59d3024	 ldr         r3, [sp, #0x24]
  030dc	e3530f4b	 cmp         r3, #0x4B, 30
  030e0	2a000001	 bcs         |$LN7@SetBaudRat|
  030e4	ea000052	 b           |$cleanUp$44951|

; 795  :     {
; 796  :         goto cleanUp;

  030e8	ea000025	 b           |$LN6@SetBaudRat|
  030ec		 |$LN7@SetBaudRat|

; 797  :     }
; 798  :     else if  (baudRate <= 230400 || baudRate == 3000000)

  030ec	e59d3024	 ldr         r3, [sp, #0x24]
  030f0	e3530be1	 cmp         r3, #0xE1, 22
  030f4	9a000004	 bls         |$LN4@SetBaudRat|
  030f8	e59d2024	 ldr         r2, [sp, #0x24]
  030fc	e3a039b7	 mov         r3, #0xB7, 18
  03100	e3833d1b	 orr         r3, r3, #0x1B, 26
  03104	e1520003	 cmp         r2, r3
  03108	1a00000c	 bne         |$LN5@SetBaudRat|
  0310c		 |$LN4@SetBaudRat|

; 799  :     {
; 800  :         mdr1 = UART_MDR1_UART16;

  0310c	e3a03000	 mov         r3, #0
  03110	e5cd300a	 strb        r3, [sp, #0xA]

; 801  :         divider = (USHORT)(pPdd->frequency/(baudRate * 16));

  03114	e59d3020	 ldr         r3, [sp, #0x20]
  03118	e283104c	 add         r1, r3, #0x4C
  0311c	e59d2024	 ldr         r2, [sp, #0x24]
  03120	e3a03010	 mov         r3, #0x10
  03124	e0000392	 mul         r0, r2, r3
  03128	e5911000	 ldr         r1, [r1]
  0312c	eb000000	 bl          __rt_udiv
  03130	e1a03800	 mov         r3, r0, lsl #16
  03134	e1a03823	 mov         r3, r3, lsr #16
  03138	e1cd30b8	 strh        r3, [sp, #8]
  0313c	ea000010	 b           |$LN3@SetBaudRat|
  03140		 |$LN5@SetBaudRat|

; 802  :     }
; 803  :     else if (baudRate <= 3686400)

  03140	e59d3024	 ldr         r3, [sp, #0x24]
  03144	e35309e1	 cmp         r3, #0xE1, 18
  03148	8a00000c	 bhi         |$LN2@SetBaudRat|

; 804  :     {
; 805  :         mdr1 = UART_MDR1_UART13;

  0314c	e3a03003	 mov         r3, #3
  03150	e5cd300a	 strb        r3, [sp, #0xA]

; 806  :         divider = (USHORT)(pPdd->frequency/(baudRate * 13));

  03154	e59d3020	 ldr         r3, [sp, #0x20]
  03158	e283104c	 add         r1, r3, #0x4C
  0315c	e59d2024	 ldr         r2, [sp, #0x24]
  03160	e3a0300d	 mov         r3, #0xD
  03164	e0000392	 mul         r0, r2, r3
  03168	e5911000	 ldr         r1, [r1]
  0316c	eb000000	 bl          __rt_udiv
  03170	e1a03800	 mov         r3, r0, lsl #16
  03174	e1a03823	 mov         r3, r3, lsr #16
  03178	e1cd30b8	 strh        r3, [sp, #8]

; 807  :     }
; 808  :     else

  0317c	ea000000	 b           |$LN1@SetBaudRat|
  03180		 |$LN2@SetBaudRat|

; 809  :     {
; 810  :         goto cleanUp;

  03180	ea00002b	 b           |$cleanUp$44951|
  03184		 |$LN1@SetBaudRat|
  03184		 |$LN3@SetBaudRat|
  03184		 |$LN6@SetBaudRat|

; 811  :     }
; 812  : 
; 813  :     // Get UART lock
; 814  :     EnterCriticalSection(&pPdd->hwCS);

  03184	e59d3020	 ldr         r3, [sp, #0x20]
  03188	e2830098	 add         r0, r3, #0x98
  0318c	eb000000	 bl          EnterCriticalSection

; 815  : 
; 816  : 
; 817  :     // Disable UART
; 818  :     OUTREG8(&pUartRegs->MDR1, UART_MDR1_DISABLE);

  03190	e59d3004	 ldr         r3, [sp, #4]
  03194	e2832020	 add         r2, r3, #0x20
  03198	e3a03007	 mov         r3, #7
  0319c	e5c23000	 strb        r3, [r2]

; 819  : 
; 820  :     // Set new divisor
; 821  :     SETREG8(&pUartRegs->LCR, UART_LCR_DIV_EN);

  031a0	e59d3004	 ldr         r3, [sp, #4]
  031a4	e283300c	 add         r3, r3, #0xC
  031a8	e5d33000	 ldrb        r3, [r3]
  031ac	e3833080	 orr         r3, r3, #0x80
  031b0	e20320ff	 and         r2, r3, #0xFF
  031b4	e59d3004	 ldr         r3, [sp, #4]
  031b8	e283300c	 add         r3, r3, #0xC
  031bc	e5c32000	 strb        r2, [r3]

; 822  :     OUTREG8(&pUartRegs->DLL, (UCHAR)(divider >> 0));

  031c0	e1dd30b8	 ldrh        r3, [sp, #8]
  031c4	e20320ff	 and         r2, r3, #0xFF
  031c8	e59d3004	 ldr         r3, [sp, #4]
  031cc	e5c32000	 strb        r2, [r3]

; 823  :     OUTREG8(&pUartRegs->DLH, (UCHAR)(divider >> 8));

  031d0	e1dd30b8	 ldrh        r3, [sp, #8]
  031d4	e1a03443	 mov         r3, r3, asr #8
  031d8	e20320ff	 and         r2, r3, #0xFF
  031dc	e59d3004	 ldr         r3, [sp, #4]
  031e0	e2833004	 add         r3, r3, #4
  031e4	e5c32000	 strb        r2, [r3]

; 824  :     CLRREG8(&pUartRegs->LCR, UART_LCR_DIV_EN);

  031e8	e59d3004	 ldr         r3, [sp, #4]
  031ec	e283300c	 add         r3, r3, #0xC
  031f0	e5d33000	 ldrb        r3, [r3]
  031f4	e1a02003	 mov         r2, r3
  031f8	e3e03080	 mvn         r3, #0x80
  031fc	e0023003	 and         r3, r2, r3
  03200	e20320ff	 and         r2, r3, #0xFF
  03204	e59d3004	 ldr         r3, [sp, #4]
  03208	e283300c	 add         r3, r3, #0xC
  0320c	e5c32000	 strb        r2, [r3]

; 825  :     // Enable UART
; 826  :     OUTREG8(&pUartRegs->MDR1, mdr1);

  03210	e59d3004	 ldr         r3, [sp, #4]
  03214	e2832020	 add         r2, r3, #0x20
  03218	e5dd300a	 ldrb        r3, [sp, #0xA]
  0321c	e5c23000	 strb        r3, [r2]

; 827  : 
; 828  :     // Free UART lock
; 829  : 
; 830  :     LeaveCriticalSection(&pPdd->hwCS);

  03220	e59d3020	 ldr         r3, [sp, #0x20]
  03224	e2830098	 add         r0, r3, #0x98
  03228	eb000000	 bl          LeaveCriticalSection

; 831  : 
; 832  :     rc = TRUE;

  0322c	e3a03001	 mov         r3, #1
  03230	e58d3000	 str         r3, [sp]
  03234		 |$cleanUp$44951|

; 833  : 
; 834  : cleanUp:
; 835  :     DEBUGMSG(ZONE_FUNCTION, (L"-SetBaudRate()=%d\r\n",rc));

  03234	e59f3044	 ldr         r3, [pc, #0x44]
  03238	e5933440	 ldr         r3, [r3, #0x440]
  0323c	e3130a02	 tst         r3, #2, 20
  03240	0a000005	 beq         |$LN12@SetBaudRat|
  03244	e59d1000	 ldr         r1, [sp]
  03248	e59f002c	 ldr         r0, [pc, #0x2C]
  0324c	eb000000	 bl          NKDbgPrintfW
  03250	e3a03001	 mov         r3, #1
  03254	e58d3014	 str         r3, [sp, #0x14]
  03258	ea000001	 b           |$LN13@SetBaudRat|
  0325c		 |$LN12@SetBaudRat|
  0325c	e3a03000	 mov         r3, #0
  03260	e58d3014	 str         r3, [sp, #0x14]
  03264		 |$LN13@SetBaudRat|

; 836  :     return rc;

  03264	e59d3000	 ldr         r3, [sp]
  03268	e58d300c	 str         r3, [sp, #0xC]

; 837  : }

  0326c	e59d000c	 ldr         r0, [sp, #0xC]
  03270	e28dd018	 add         sp, sp, #0x18
  03274	e89d6000	 ldmia       sp, {sp, lr}
  03278	e12fff1e	 bx          lr
  0327c		 |$LN17@SetBaudRat|
  0327c		 |$LN18@SetBaudRat|
  0327c	00000000	 DCD         |??_C@_1CI@NFJNIGAK@?$AA?9?$AAS?$AAe?$AAt?$AAB?$AAa?$AAu?$AAd?$AAR?$AAa?$AAt?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  03280		 |$LN19@SetBaudRat|
  03280	00000000	 DCD         |dpCurSettings|
  03284		 |$LN20@SetBaudRat|
  03284	00000000	 DCD         |??_C@_1EK@OKFAEOFE@?$AA?$CL?$AAS?$AAe?$AAt?$AAB?$AAa?$AAu?$AAd?$AAR?$AAa?$AAt?$AAe?$AA?$CI?$AAr?$AAa?$AAt?$AAe?$AA?3?$AA?$CF?$AAd?$AA?0?$AAm?$AAe?$AAm?$AAb?$AAa?$AAs?$AAe?$AA?3?$AA0?$AAx?$AA?$CF@|
  03288		 |$M46998|

			 ENDP  ; |SetBaudRate|

	EXPORT	|??_C@_1CM@FFKMHAG@?$AA?9?$AAS?$AAe?$AAt?$AAW?$AAo?$AAr?$AAd?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CK@LKNKLBPF@?$AA?$CL?$AAS?$AAe?$AAt?$AAW?$AAo?$AAr?$AAd?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00090			 AREA	 |.pdata|, PDATA
|$T47014| DCD	|$LN11@SetWordLen|
	DCD	0x40004b04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@FFKMHAG@?$AA?9?$AAS?$AAe?$AAt?$AAW?$AAo?$AAr?$AAd?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "S", 0x0, "e", 0x0, "t", 0x0, "W", 0x0, "o", 0x0, "r"
	DCB	0x0, "d", 0x0, "L", 0x0, "e", 0x0, "n", 0x0, "g", 0x0, "t"
	DCB	0x0, "h", 0x0, "(", 0x0, ")", 0x0, "=", 0x0, "%", 0x0, "d"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CK@LKNKLBPF@?$AA?$CL?$AAS?$AAe?$AAt?$AAW?$AAo?$AAr?$AAd?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "S", 0x0, "e", 0x0, "t", 0x0, "W", 0x0, "o", 0x0, "r"
	DCB	0x0, "d", 0x0, "L", 0x0, "e", 0x0, "n", 0x0, "g", 0x0, "t"
	DCB	0x0, "h", 0x0, "(", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  03288			 AREA	 |.text|, CODE, ARM

  03288		 |SetWordLength| PROC

; 851  : {

  03288		 |$LN11@SetWordLen|
  03288	e1a0c00d	 mov         r12, sp
  0328c	e92d0003	 stmdb       sp!, {r0, r1}
  03290	e92d5000	 stmdb       sp!, {r12, lr}
  03294	e24dd018	 sub         sp, sp, #0x18
  03298		 |$M47011|

; 852  :     BOOL rc = FALSE;

  03298	e3a03000	 mov         r3, #0
  0329c	e58d3000	 str         r3, [sp]

; 853  :     OMAP_UART_REGS *pUartRegs = pPdd->pUartRegs;

  032a0	e59d3020	 ldr         r3, [sp, #0x20]
  032a4	e2833024	 add         r3, r3, #0x24
  032a8	e5933000	 ldr         r3, [r3]
  032ac	e58d3008	 str         r3, [sp, #8]

; 854  :     UCHAR lineCtrl;
; 855  : 
; 856  :     DEBUGMSG(ZONE_FUNCTION, (L"+SetWordLength(%d)\r\n",wordLength));

  032b0	e59f30f4	 ldr         r3, [pc, #0xF4]
  032b4	e5933440	 ldr         r3, [r3, #0x440]
  032b8	e3130a02	 tst         r3, #2, 20
  032bc	0a000005	 beq         |$LN5@SetWordLen|
  032c0	e5dd1024	 ldrb        r1, [sp, #0x24]
  032c4	e59f00e4	 ldr         r0, [pc, #0xE4]
  032c8	eb000000	 bl          NKDbgPrintfW
  032cc	e3a03001	 mov         r3, #1
  032d0	e58d3010	 str         r3, [sp, #0x10]
  032d4	ea000001	 b           |$LN6@SetWordLen|
  032d8		 |$LN5@SetWordLen|
  032d8	e3a03000	 mov         r3, #0
  032dc	e58d3010	 str         r3, [sp, #0x10]
  032e0		 |$LN6@SetWordLen|

; 857  : 
; 858  :     if ((wordLength < 5) || (wordLength > 8)) goto cleanUp;

  032e0	e5dd3024	 ldrb        r3, [sp, #0x24]
  032e4	e3530005	 cmp         r3, #5
  032e8	ba000002	 blt         |$LN1@SetWordLen|
  032ec	e5dd3024	 ldrb        r3, [sp, #0x24]
  032f0	e3530008	 cmp         r3, #8
  032f4	da000000	 ble         |$LN2@SetWordLen|
  032f8		 |$LN1@SetWordLen|
  032f8	ea000018	 b           |$cleanUp$44991|
  032fc		 |$LN2@SetWordLen|

; 859  : 
; 860  :     EnterCriticalSection(&pPdd->hwCS);

  032fc	e59d3020	 ldr         r3, [sp, #0x20]
  03300	e2830098	 add         r0, r3, #0x98
  03304	eb000000	 bl          EnterCriticalSection

; 861  : 
; 862  :     lineCtrl = INREG8(&pUartRegs->LCR);

  03308	e59d3008	 ldr         r3, [sp, #8]
  0330c	e283300c	 add         r3, r3, #0xC
  03310	e5d33000	 ldrb        r3, [r3]
  03314	e5cd3004	 strb        r3, [sp, #4]

; 863  :     lineCtrl = (lineCtrl & ~0x03)|(wordLength - 5);

  03318	e5dd3004	 ldrb        r3, [sp, #4]
  0331c	e1a02003	 mov         r2, r3
  03320	e3e03003	 mvn         r3, #3
  03324	e0022003	 and         r2, r2, r3
  03328	e5dd3024	 ldrb        r3, [sp, #0x24]
  0332c	e2433005	 sub         r3, r3, #5
  03330	e1823003	 orr         r3, r2, r3
  03334	e20330ff	 and         r3, r3, #0xFF
  03338	e5cd3004	 strb        r3, [sp, #4]

; 864  :     OUTREG8(&pUartRegs->LCR, lineCtrl);

  0333c	e59d3008	 ldr         r3, [sp, #8]
  03340	e283200c	 add         r2, r3, #0xC
  03344	e5dd3004	 ldrb        r3, [sp, #4]
  03348	e5c23000	 strb        r3, [r2]

; 865  : 
; 866  :     LeaveCriticalSection(&pPdd->hwCS);

  0334c	e59d3020	 ldr         r3, [sp, #0x20]
  03350	e2830098	 add         r0, r3, #0x98
  03354	eb000000	 bl          LeaveCriticalSection

; 867  : 
; 868  :     rc = TRUE;

  03358	e3a03001	 mov         r3, #1
  0335c	e58d3000	 str         r3, [sp]
  03360		 |$cleanUp$44991|

; 869  : 
; 870  : cleanUp:
; 871  :     DEBUGMSG(ZONE_FUNCTION, (L"-SetWordLength()=%d\r\n",rc));

  03360	e59f3044	 ldr         r3, [pc, #0x44]
  03364	e5933440	 ldr         r3, [r3, #0x440]
  03368	e3130a02	 tst         r3, #2, 20
  0336c	0a000005	 beq         |$LN7@SetWordLen|
  03370	e59d1000	 ldr         r1, [sp]
  03374	e59f002c	 ldr         r0, [pc, #0x2C]
  03378	eb000000	 bl          NKDbgPrintfW
  0337c	e3a03001	 mov         r3, #1
  03380	e58d3014	 str         r3, [sp, #0x14]
  03384	ea000001	 b           |$LN8@SetWordLen|
  03388		 |$LN7@SetWordLen|
  03388	e3a03000	 mov         r3, #0
  0338c	e58d3014	 str         r3, [sp, #0x14]
  03390		 |$LN8@SetWordLen|

; 872  :     return rc;

  03390	e59d3000	 ldr         r3, [sp]
  03394	e58d300c	 str         r3, [sp, #0xC]

; 873  : }

  03398	e59d000c	 ldr         r0, [sp, #0xC]
  0339c	e28dd018	 add         sp, sp, #0x18
  033a0	e89d6000	 ldmia       sp, {sp, lr}
  033a4	e12fff1e	 bx          lr
  033a8		 |$LN12@SetWordLen|
  033a8		 |$LN13@SetWordLen|
  033a8	00000000	 DCD         |??_C@_1CM@FFKMHAG@?$AA?9?$AAS?$AAe?$AAt?$AAW?$AAo?$AAr?$AAd?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  033ac		 |$LN14@SetWordLen|
  033ac	00000000	 DCD         |dpCurSettings|
  033b0		 |$LN15@SetWordLen|
  033b0	00000000	 DCD         |??_C@_1CK@LKNKLBPF@?$AA?$CL?$AAS?$AAe?$AAt?$AAW?$AAo?$AAr?$AAd?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  033b4		 |$M47012|

			 ENDP  ; |SetWordLength|

	EXPORT	|??_C@_1CE@GDNLCHFE@?$AA?9?$AAS?$AAe?$AAt?$AAP?$AAa?$AAr?$AAi?$AAt?$AAy?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CC@MCJLEJDG@?$AA?$CL?$AAS?$AAe?$AAt?$AAP?$AAa?$AAr?$AAi?$AAt?$AAy?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00098			 AREA	 |.pdata|, PDATA
|$T47035| DCD	|$LN24@SetParity|
	DCD	0x40006c04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@GDNLCHFE@?$AA?9?$AAS?$AAe?$AAt?$AAP?$AAa?$AAr?$AAi?$AAt?$AAy?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "S", 0x0, "e", 0x0, "t", 0x0, "P", 0x0, "a", 0x0, "r"
	DCB	0x0, "i", 0x0, "t", 0x0, "y", 0x0, "(", 0x0, ")", 0x0, "="
	DCB	0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CC@MCJLEJDG@?$AA?$CL?$AAS?$AAe?$AAt?$AAP?$AAa?$AAr?$AAi?$AAt?$AAy?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "S", 0x0, "e", 0x0, "t", 0x0, "P", 0x0, "a", 0x0, "r"
	DCB	0x0, "i", 0x0, "t", 0x0, "y", 0x0, "(", 0x0, "%", 0x0, "d"
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  033b4			 AREA	 |.text|, CODE, ARM

  033b4		 |SetParity| PROC

; 887  : {

  033b4		 |$LN24@SetParity|
  033b4	e1a0c00d	 mov         r12, sp
  033b8	e92d0003	 stmdb       sp!, {r0, r1}
  033bc	e92d5000	 stmdb       sp!, {r12, lr}
  033c0	e24dd01c	 sub         sp, sp, #0x1C
  033c4		 |$M47032|

; 888  :     BOOL rc = FALSE;

  033c4	e3a03000	 mov         r3, #0
  033c8	e58d3000	 str         r3, [sp]

; 889  :     OMAP_UART_REGS *pUartRegs = pPdd->pUartRegs;

  033cc	e59d3024	 ldr         r3, [sp, #0x24]
  033d0	e2833024	 add         r3, r3, #0x24
  033d4	e5933000	 ldr         r3, [r3]
  033d8	e58d3008	 str         r3, [sp, #8]

; 890  :     UCHAR lineCtrl;
; 891  :     UCHAR mask;
; 892  : 
; 893  :     DEBUGMSG(ZONE_FUNCTION, (L"+SetParity(%d)\r\n",parity));

  033dc	e59f3178	 ldr         r3, [pc, #0x178]
  033e0	e5933440	 ldr         r3, [r3, #0x440]
  033e4	e3130a02	 tst         r3, #2, 20
  033e8	0a000005	 beq         |$LN11@SetParity|
  033ec	e5dd1028	 ldrb        r1, [sp, #0x28]
  033f0	e59f0168	 ldr         r0, [pc, #0x168]
  033f4	eb000000	 bl          NKDbgPrintfW
  033f8	e3a03001	 mov         r3, #1
  033fc	e58d3010	 str         r3, [sp, #0x10]
  03400	ea000001	 b           |$LN12@SetParity|
  03404		 |$LN11@SetParity|
  03404	e3a03000	 mov         r3, #0
  03408	e58d3010	 str         r3, [sp, #0x10]
  0340c		 |$LN12@SetParity|

; 894  : 
; 895  :     switch (parity)

  0340c	e5dd3028	 ldrb        r3, [sp, #0x28]
  03410	e58d3014	 str         r3, [sp, #0x14]
  03414	e59d3014	 ldr         r3, [sp, #0x14]
  03418	e3530004	 cmp         r3, #4
  0341c	8a000018	 bhi         |$LN1@SetParity|
  03420	e59d2014	 ldr         r2, [sp, #0x14]
  03424	e1a03102	 mov         r3, r2, lsl #2
  03428	e083300f	 add         r3, r3, pc
  0342c	e5933004	 ldr         r3, [r3, #4]
  03430	e08ff003	 add         pc, pc, r3
  03434		 |$LN16@SetParity|
  03434		 |$LN15@SetParity|
  03434		 |$LN17@SetParity|
  03434	00000010	 DCD         0x10
  03438		 |$LN18@SetParity|
  03438	0000001c	 DCD         0x1c
  0343c		 |$LN19@SetParity|
  0343c	00000028	 DCD         0x28
  03440		 |$LN20@SetParity|
  03440	00000034	 DCD         0x34
  03444		 |$LN21@SetParity|
  03444	00000040	 DCD         0x40
  03448		 |$LN6@SetParity|

; 896  :     {
; 897  :     case NOPARITY:
; 898  :         mask = 0;

  03448	e3a03000	 mov         r3, #0
  0344c	e5cd3005	 strb        r3, [sp, #5]

; 899  :         break;

  03450	ea00000c	 b           |$LN7@SetParity|
  03454		 |$LN5@SetParity|

; 900  :     case ODDPARITY:
; 901  :         mask = UART_LCR_PARITY_EN | (0 << 4);

  03454	e3a03008	 mov         r3, #8
  03458	e5cd3005	 strb        r3, [sp, #5]

; 902  :         break;

  0345c	ea000009	 b           |$LN7@SetParity|
  03460		 |$LN4@SetParity|

; 903  :     case EVENPARITY:
; 904  :         mask = UART_LCR_PARITY_EN | (1 << 4);

  03460	e3a03018	 mov         r3, #0x18
  03464	e5cd3005	 strb        r3, [sp, #5]

; 905  :         break;

  03468	ea000006	 b           |$LN7@SetParity|
  0346c		 |$LN3@SetParity|

; 906  :     case MARKPARITY:
; 907  :         mask = UART_LCR_PARITY_EN | (2 << 4);

  0346c	e3a03028	 mov         r3, #0x28
  03470	e5cd3005	 strb        r3, [sp, #5]

; 908  :         break;

  03474	ea000003	 b           |$LN7@SetParity|
  03478		 |$LN2@SetParity|

; 909  :     case SPACEPARITY:
; 910  :         mask = UART_LCR_PARITY_EN | (3 << 4);

  03478	e3a03038	 mov         r3, #0x38
  0347c	e5cd3005	 strb        r3, [sp, #5]

; 911  :         break;

  03480	ea000000	 b           |$LN7@SetParity|
  03484		 |$LN1@SetParity|

; 912  :     default:
; 913  :         goto cleanUp;

  03484	ea000021	 b           |$cleanUp$45019|
  03488		 |$LN7@SetParity|

; 914  :     }
; 915  : 
; 916  :     EnterCriticalSection(&pPdd->hwCS);

  03488	e59d3024	 ldr         r3, [sp, #0x24]
  0348c	e2830098	 add         r0, r3, #0x98
  03490	eb000000	 bl          EnterCriticalSection

; 917  : 
; 918  :     lineCtrl = INREG8(&pUartRegs->LCR);

  03494	e59d3008	 ldr         r3, [sp, #8]
  03498	e283300c	 add         r3, r3, #0xC
  0349c	e5d33000	 ldrb        r3, [r3]
  034a0	e5cd3004	 strb        r3, [sp, #4]

; 919  :     lineCtrl &= ~(UART_LCR_PARITY_EN);

  034a4	e5dd3004	 ldrb        r3, [sp, #4]
  034a8	e1a02003	 mov         r2, r3
  034ac	e3e03008	 mvn         r3, #8
  034b0	e0023003	 and         r3, r2, r3
  034b4	e20330ff	 and         r3, r3, #0xFF
  034b8	e5cd3004	 strb        r3, [sp, #4]

; 920  :     lineCtrl &= ~(UART_LCR_PARITY_TYPE_1|UART_LCR_PARITY_TYPE_2);

  034bc	e5dd3004	 ldrb        r3, [sp, #4]
  034c0	e1a02003	 mov         r2, r3
  034c4	e3e03030	 mvn         r3, #0x30
  034c8	e0023003	 and         r3, r2, r3
  034cc	e20330ff	 and         r3, r3, #0xFF
  034d0	e5cd3004	 strb        r3, [sp, #4]

; 921  :     lineCtrl |= mask;

  034d4	e5dd3005	 ldrb        r3, [sp, #5]
  034d8	e1a02003	 mov         r2, r3
  034dc	e5dd3004	 ldrb        r3, [sp, #4]
  034e0	e1833002	 orr         r3, r3, r2
  034e4	e20330ff	 and         r3, r3, #0xFF
  034e8	e5cd3004	 strb        r3, [sp, #4]

; 922  :     OUTREG8(&pUartRegs->LCR, lineCtrl);

  034ec	e59d3008	 ldr         r3, [sp, #8]
  034f0	e283200c	 add         r2, r3, #0xC
  034f4	e5dd3004	 ldrb        r3, [sp, #4]
  034f8	e5c23000	 strb        r3, [r2]

; 923  : 
; 924  :     LeaveCriticalSection(&pPdd->hwCS);

  034fc	e59d3024	 ldr         r3, [sp, #0x24]
  03500	e2830098	 add         r0, r3, #0x98
  03504	eb000000	 bl          LeaveCriticalSection

; 925  : 
; 926  :     rc = TRUE;

  03508	e3a03001	 mov         r3, #1
  0350c	e58d3000	 str         r3, [sp]
  03510		 |$cleanUp$45019|

; 927  : 
; 928  : cleanUp:
; 929  :     DEBUGMSG(ZONE_FUNCTION, (L"-SetParity()=%d\r\n",rc));

  03510	e59f3044	 ldr         r3, [pc, #0x44]
  03514	e5933440	 ldr         r3, [r3, #0x440]
  03518	e3130a02	 tst         r3, #2, 20
  0351c	0a000005	 beq         |$LN13@SetParity|
  03520	e59d1000	 ldr         r1, [sp]
  03524	e59f002c	 ldr         r0, [pc, #0x2C]
  03528	eb000000	 bl          NKDbgPrintfW
  0352c	e3a03001	 mov         r3, #1
  03530	e58d3018	 str         r3, [sp, #0x18]
  03534	ea000001	 b           |$LN14@SetParity|
  03538		 |$LN13@SetParity|
  03538	e3a03000	 mov         r3, #0
  0353c	e58d3018	 str         r3, [sp, #0x18]
  03540		 |$LN14@SetParity|

; 930  :     return rc;

  03540	e59d3000	 ldr         r3, [sp]
  03544	e58d300c	 str         r3, [sp, #0xC]

; 931  : }

  03548	e59d000c	 ldr         r0, [sp, #0xC]
  0354c	e28dd01c	 add         sp, sp, #0x1C
  03550	e89d6000	 ldmia       sp, {sp, lr}
  03554	e12fff1e	 bx          lr
  03558		 |$LN25@SetParity|
  03558		 |$LN26@SetParity|
  03558	00000000	 DCD         |??_C@_1CE@GDNLCHFE@?$AA?9?$AAS?$AAe?$AAt?$AAP?$AAa?$AAr?$AAi?$AAt?$AAy?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  0355c		 |$LN27@SetParity|
  0355c	00000000	 DCD         |dpCurSettings|
  03560		 |$LN28@SetParity|
  03560	00000000	 DCD         |??_C@_1CC@MCJLEJDG@?$AA?$CL?$AAS?$AAe?$AAt?$AAP?$AAa?$AAr?$AAi?$AAt?$AAy?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  03564		 |$M47033|

			 ENDP  ; |SetParity|

	EXPORT	|??_C@_1CI@PHLLAJGH@?$AA?9?$AAS?$AAe?$AAt?$AAS?$AAt?$AAo?$AAp?$AAB?$AAi?$AAt?$AAs?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CG@EMNHDDMK@?$AA?$CL?$AAS?$AAe?$AAt?$AAS?$AAt?$AAo?$AAp?$AAB?$AAi?$AAt?$AAs?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  000a0			 AREA	 |.pdata|, PDATA
|$T47049| DCD	|$LN14@SetStopBit|
	DCD	0x40005604

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@PHLLAJGH@?$AA?9?$AAS?$AAe?$AAt?$AAS?$AAt?$AAo?$AAp?$AAB?$AAi?$AAt?$AAs?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "S", 0x0, "e", 0x0, "t", 0x0, "S", 0x0, "t", 0x0, "o"
	DCB	0x0, "p", 0x0, "B", 0x0, "i", 0x0, "t", 0x0, "s", 0x0, "("
	DCB	0x0, ")", 0x0, "=", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CG@EMNHDDMK@?$AA?$CL?$AAS?$AAe?$AAt?$AAS?$AAt?$AAo?$AAp?$AAB?$AAi?$AAt?$AAs?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "S", 0x0, "e", 0x0, "t", 0x0, "S", 0x0, "t", 0x0, "o"
	DCB	0x0, "p", 0x0, "B", 0x0, "i", 0x0, "t", 0x0, "s", 0x0, "("
	DCB	0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Odtp

  03564			 AREA	 |.text|, CODE, ARM

  03564		 |SetStopBits| PROC

; 945  : {

  03564		 |$LN14@SetStopBit|
  03564	e1a0c00d	 mov         r12, sp
  03568	e92d0003	 stmdb       sp!, {r0, r1}
  0356c	e92d5000	 stmdb       sp!, {r12, lr}
  03570	e24dd01c	 sub         sp, sp, #0x1C
  03574		 |$M47046|

; 946  :     BOOL rc = FALSE;

  03574	e3a03000	 mov         r3, #0
  03578	e58d3000	 str         r3, [sp]

; 947  :     OMAP_UART_REGS *pUartRegs = pPdd->pUartRegs;

  0357c	e59d3024	 ldr         r3, [sp, #0x24]
  03580	e2833024	 add         r3, r3, #0x24
  03584	e5933000	 ldr         r3, [r3]
  03588	e58d3008	 str         r3, [sp, #8]

; 948  :     UCHAR lineCtrl;
; 949  :     UCHAR mask;
; 950  : 
; 951  :     DEBUGMSG(ZONE_FUNCTION, (L"+SetStopBits(%d)\r\n",stopBits));

  0358c	e59f3120	 ldr         r3, [pc, #0x120]
  03590	e5933440	 ldr         r3, [r3, #0x440]
  03594	e3130a02	 tst         r3, #2, 20
  03598	0a000005	 beq         |$LN8@SetStopBit|
  0359c	e5dd1028	 ldrb        r1, [sp, #0x28]
  035a0	e59f0110	 ldr         r0, [pc, #0x110]
  035a4	eb000000	 bl          NKDbgPrintfW
  035a8	e3a03001	 mov         r3, #1
  035ac	e58d3010	 str         r3, [sp, #0x10]
  035b0	ea000001	 b           |$LN9@SetStopBit|
  035b4		 |$LN8@SetStopBit|
  035b4	e3a03000	 mov         r3, #0
  035b8	e58d3010	 str         r3, [sp, #0x10]
  035bc		 |$LN9@SetStopBit|

; 952  : 
; 953  :     switch (stopBits)

  035bc	e5dd3028	 ldrb        r3, [sp, #0x28]
  035c0	e58d3014	 str         r3, [sp, #0x14]
  035c4	e59d3014	 ldr         r3, [sp, #0x14]
  035c8	e3530000	 cmp         r3, #0
  035cc	0a000006	 beq         |$LN3@SetStopBit|
  035d0	e59d3014	 ldr         r3, [sp, #0x14]
  035d4	e3530000	 cmp         r3, #0
  035d8	da000009	 ble         |$LN1@SetStopBit|
  035dc	e59d3014	 ldr         r3, [sp, #0x14]
  035e0	e3530002	 cmp         r3, #2
  035e4	da000003	 ble         |$LN2@SetStopBit|
  035e8	ea000005	 b           |$LN1@SetStopBit|
  035ec		 |$LN3@SetStopBit|

; 954  :     {
; 955  :     case ONESTOPBIT:
; 956  :         mask = 0;

  035ec	e3a03000	 mov         r3, #0
  035f0	e5cd3005	 strb        r3, [sp, #5]

; 957  :         break;

  035f4	ea000003	 b           |$LN4@SetStopBit|
  035f8		 |$LN2@SetStopBit|

; 958  :     case ONE5STOPBITS:
; 959  :     case TWOSTOPBITS:
; 960  :         mask = UART_LCR_NB_STOP;

  035f8	e3a03004	 mov         r3, #4
  035fc	e5cd3005	 strb        r3, [sp, #5]

; 961  :         break;

  03600	ea000000	 b           |$LN4@SetStopBit|
  03604		 |$LN1@SetStopBit|

; 962  :     default:
; 963  :         goto cleanUp;

  03604	ea000017	 b           |$cleanUp$45044|
  03608		 |$LN4@SetStopBit|

; 964  :     }
; 965  : 
; 966  :     EnterCriticalSection(&pPdd->hwCS);

  03608	e59d3024	 ldr         r3, [sp, #0x24]
  0360c	e2830098	 add         r0, r3, #0x98
  03610	eb000000	 bl          EnterCriticalSection

; 967  : 
; 968  :     lineCtrl = INREG8(&pUartRegs->LCR);

  03614	e59d3008	 ldr         r3, [sp, #8]
  03618	e283300c	 add         r3, r3, #0xC
  0361c	e5d33000	 ldrb        r3, [r3]
  03620	e5cd3004	 strb        r3, [sp, #4]

; 969  :     lineCtrl = (lineCtrl & ~UART_LCR_NB_STOP)|mask;

  03624	e5dd3004	 ldrb        r3, [sp, #4]
  03628	e1a02003	 mov         r2, r3
  0362c	e3e03004	 mvn         r3, #4
  03630	e0022003	 and         r2, r2, r3
  03634	e5dd3005	 ldrb        r3, [sp, #5]
  03638	e1823003	 orr         r3, r2, r3
  0363c	e20330ff	 and         r3, r3, #0xFF
  03640	e5cd3004	 strb        r3, [sp, #4]

; 970  :     OUTREG8(&pUartRegs->LCR, lineCtrl);

  03644	e59d3008	 ldr         r3, [sp, #8]
  03648	e283200c	 add         r2, r3, #0xC
  0364c	e5dd3004	 ldrb        r3, [sp, #4]
  03650	e5c23000	 strb        r3, [r2]

; 971  : 
; 972  :     LeaveCriticalSection(&pPdd->hwCS);

  03654	e59d3024	 ldr         r3, [sp, #0x24]
  03658	e2830098	 add         r0, r3, #0x98
  0365c	eb000000	 bl          LeaveCriticalSection

; 973  : 
; 974  :     rc = TRUE;

  03660	e3a03001	 mov         r3, #1
  03664	e58d3000	 str         r3, [sp]
  03668		 |$cleanUp$45044|

; 975  : 
; 976  : cleanUp:
; 977  :     DEBUGMSG(ZONE_FUNCTION, (L"-SetStopBits()=%d\r\n",rc));

  03668	e59f3044	 ldr         r3, [pc, #0x44]
  0366c	e5933440	 ldr         r3, [r3, #0x440]
  03670	e3130a02	 tst         r3, #2, 20
  03674	0a000005	 beq         |$LN10@SetStopBit|
  03678	e59d1000	 ldr         r1, [sp]
  0367c	e59f002c	 ldr         r0, [pc, #0x2C]
  03680	eb000000	 bl          NKDbgPrintfW
  03684	e3a03001	 mov         r3, #1
  03688	e58d3018	 str         r3, [sp, #0x18]
  0368c	ea000001	 b           |$LN11@SetStopBit|
  03690		 |$LN10@SetStopBit|
  03690	e3a03000	 mov         r3, #0
  03694	e58d3018	 str         r3, [sp, #0x18]
  03698		 |$LN11@SetStopBit|

; 978  :     return rc;

  03698	e59d3000	 ldr         r3, [sp]
  0369c	e58d300c	 str         r3, [sp, #0xC]

; 979  : }

  036a0	e59d000c	 ldr         r0, [sp, #0xC]
  036a4	e28dd01c	 add         sp, sp, #0x1C
  036a8	e89d6000	 ldmia       sp, {sp, lr}
  036ac	e12fff1e	 bx          lr
  036b0		 |$LN15@SetStopBit|
  036b0		 |$LN16@SetStopBit|
  036b0	00000000	 DCD         |??_C@_1CI@PHLLAJGH@?$AA?9?$AAS?$AAe?$AAt?$AAS?$AAt?$AAo?$AAp?$AAB?$AAi?$AAt?$AAs?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  036b4		 |$LN17@SetStopBit|
  036b4	00000000	 DCD         |dpCurSettings|
  036b8		 |$LN18@SetStopBit|
  036b8	00000000	 DCD         |??_C@_1CG@EMNHDDMK@?$AA?$CL?$AAS?$AAe?$AAt?$AAS?$AAt?$AAo?$AAp?$AAB?$AAi?$AAt?$AAs?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  036bc		 |$M47047|

			 ENDP  ; |SetStopBits|

	EXPORT	|??_C@_1BO@EEAIAKGH@?$AA?9?$AAH?$AAW?$AAC?$AAl?$AAo?$AAs?$AAe?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CG@MOCANEPJ@?$AA?$CL?$AAH?$AAW?$AAC?$AAl?$AAo?$AAs?$AAe?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  000a8			 AREA	 |.pdata|, PDATA
|$T47063| DCD	|$LN17@HWClose|
	DCD	0x4000b704

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@EEAIAKGH@?$AA?9?$AAH?$AAW?$AAC?$AAl?$AAo?$AAs?$AAe?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "H", 0x0, "W", 0x0, "C", 0x0, "l", 0x0, "o", 0x0, "s"
	DCB	0x0, "e", 0x0, "(", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CG@MOCANEPJ@?$AA?$CL?$AAH?$AAW?$AAC?$AAl?$AAo?$AAs?$AAe?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "H", 0x0, "W", 0x0, "C", 0x0, "l", 0x0, "o", 0x0, "s"
	DCB	0x0, "e", 0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Odtp

  036bc			 AREA	 |.text|, CODE, ARM

  036bc		 |HWClose| PROC

; 2271 : {

  036bc		 |$LN17@HWClose|
  036bc	e1a0c00d	 mov         r12, sp
  036c0	e92d0001	 stmdb       sp!, {r0}
  036c4	e92d5000	 stmdb       sp!, {r12, lr}
  036c8	e24dd014	 sub         sp, sp, #0x14
  036cc		 |$M47060|

; 2272 :     ULONG rc = (ULONG)-1;

  036cc	e3e03000	 mvn         r3, #0
  036d0	e58d3000	 str         r3, [sp]

; 2273 :     UARTPDD *pPdd = (UARTPDD*)pvContext;

  036d4	e59d301c	 ldr         r3, [sp, #0x1C]
  036d8	e58d3004	 str         r3, [sp, #4]

; 2274 : 
; 2275 :     DEBUGMSG(ZONE_CLOSE||ZONE_FUNCTION, (L"+HWClose(0x%08x)\r\n", pvContext));

  036dc	e59f32ac	 ldr         r3, [pc, #0x2AC]
  036e0	e5933440	 ldr         r3, [r3, #0x440]
  036e4	e3130010	 tst         r3, #0x10
  036e8	1a000006	 bne         |$LN11@HWClose|
  036ec	e59f329c	 ldr         r3, [pc, #0x29C]
  036f0	e5933440	 ldr         r3, [r3, #0x440]
  036f4	e3130a02	 tst         r3, #2, 20
  036f8	1a000002	 bne         |$LN11@HWClose|
  036fc	e3a03000	 mov         r3, #0
  03700	e58d300c	 str         r3, [sp, #0xC]
  03704	ea000004	 b           |$LN12@HWClose|
  03708		 |$LN11@HWClose|
  03708	e59d101c	 ldr         r1, [sp, #0x1C]
  0370c	e59f0280	 ldr         r0, [pc, #0x280]
  03710	eb000000	 bl          NKDbgPrintfW
  03714	e3a03001	 mov         r3, #1
  03718	e58d300c	 str         r3, [sp, #0xC]
  0371c		 |$LN12@HWClose|

; 2276 : 
; 2277 :     if (!pPdd->open) goto cleanUp;

  0371c	e59d3004	 ldr         r3, [sp, #4]
  03720	e2833054	 add         r3, r3, #0x54
  03724	e5933000	 ldr         r3, [r3]
  03728	e3530000	 cmp         r3, #0
  0372c	1a000000	 bne         |$LN8@HWClose|
  03730	ea00007f	 b           |$cleanUp$45566|
  03734		 |$LN8@HWClose|

; 2278 : 
; 2279 :     //CETK test case put Device in D4 state. CETK called some API's which is not supported
; 2280 :     //Added check just to Make sure COM_Close is executed in D0 state.
; 2281 :     if(pPdd->externalDX != D0)

  03734	e59d3004	 ldr         r3, [sp, #4]
  03738	e2833034	 add         r3, r3, #0x34
  0373c	e5933000	 ldr         r3, [r3]
  03740	e3530000	 cmp         r3, #0
  03744	0a000006	 beq         |$LN7@HWClose|

; 2282 :     {
; 2283 :         pPdd->externalDX = D0;

  03748	e59d3004	 ldr         r3, [sp, #4]
  0374c	e2832034	 add         r2, r3, #0x34
  03750	e3a03000	 mov         r3, #0
  03754	e5823000	 str         r3, [r2]

; 2284 :         SetPower(pPdd, D0);

  03758	e3a01000	 mov         r1, #0
  0375c	e59d0004	 ldr         r0, [sp, #4]
  03760	eb000000	 bl          SetPower
  03764		 |$LN7@HWClose|

; 2285 :     }
; 2286 : 
; 2287 :     if (pPdd->hwMode)

  03764	e59d3004	 ldr         r3, [sp, #4]
  03768	e2833014	 add         r3, r3, #0x14
  0376c	e5933000	 ldr         r3, [r3]
  03770	e3530000	 cmp         r3, #0
  03774	0a000011	 beq         |$LN6@HWClose|

; 2288 :     {
; 2289 :         if (pPdd->dcb.fRtsControl == RTS_CONTROL_HANDSHAKE) SetAutoRTS(pPdd, FALSE);

  03778	e59d3004	 ldr         r3, [sp, #4]
  0377c	e2833060	 add         r3, r3, #0x60
  03780	e5933000	 ldr         r3, [r3]
  03784	e1a03903	 mov         r3, r3, lsl #18
  03788	e1a03f23	 mov         r3, r3, lsr #30
  0378c	e3530002	 cmp         r3, #2
  03790	1a000002	 bne         |$LN5@HWClose|
  03794	e3a01000	 mov         r1, #0
  03798	e59d0004	 ldr         r0, [sp, #4]
  0379c	eb000000	 bl          SetAutoRTS
  037a0		 |$LN5@HWClose|

; 2290 :         if (pPdd->dcb.fOutxCtsFlow) SetAutoCTS(pPdd, FALSE);

  037a0	e59d3004	 ldr         r3, [sp, #4]
  037a4	e2833060	 add         r3, r3, #0x60
  037a8	e5933000	 ldr         r3, [r3]
  037ac	e3130004	 tst         r3, #4
  037b0	0a000002	 beq         |$LN4@HWClose|
  037b4	e3a01000	 mov         r1, #0
  037b8	e59d0004	 ldr         r0, [sp, #4]
  037bc	eb000000	 bl          SetAutoCTS
  037c0		 |$LN4@HWClose|
  037c0		 |$LN6@HWClose|

; 2291 :     }
; 2292 : 
; 2293 :     EnterCriticalSection(&pPdd->hwCS);

  037c0	e59d3004	 ldr         r3, [sp, #4]
  037c4	e2830098	 add         r0, r3, #0x98
  037c8	eb000000	 bl          EnterCriticalSection

; 2294 : 
; 2295 :     // Disable interrupts
; 2296 :     pPdd->intrMask &= ~(UART_IER_RHR|UART_IER_LINE|UART_IER_MODEM);

  037cc	e59d3004	 ldr         r3, [sp, #4]
  037d0	e2833088	 add         r3, r3, #0x88
  037d4	e5d33000	 ldrb        r3, [r3]
  037d8	e1a02003	 mov         r2, r3
  037dc	e3e0300d	 mvn         r3, #0xD
  037e0	e0021003	 and         r1, r2, r3
  037e4	e59d3004	 ldr         r3, [sp, #4]
  037e8	e2832088	 add         r2, r3, #0x88
  037ec	e20130ff	 and         r3, r1, #0xFF
  037f0	e5c23000	 strb        r3, [r2]

; 2297 :     OUTREG8(&pPdd->pUartRegs->IER, pPdd->intrMask);

  037f4	e59d3004	 ldr         r3, [sp, #4]
  037f8	e2831088	 add         r1, r3, #0x88
  037fc	e59d3004	 ldr         r3, [sp, #4]
  03800	e2833024	 add         r3, r3, #0x24
  03804	e5933000	 ldr         r3, [r3]
  03808	e2832004	 add         r2, r3, #4
  0380c	e5d13000	 ldrb        r3, [r1]
  03810	e5c23000	 strb        r3, [r2]

; 2298 : 
; 2299 :     // Update line & modem status
; 2300 :     ReadModemStat(pPdd);

  03814	e59d0004	 ldr         r0, [sp, #4]
  03818	eb000000	 bl          ReadModemStat

; 2301 : 
; 2302 :     // Disable all interrupts and clear modem control register
; 2303 :     // The following line generates a data abort.
; 2304 :     // Unclear why (even if the above code is commented out too)
; 2305 :     //    OUTREG8(&pPdd->pUartRegs->IER, 0);
; 2306 :     //    OUTREG8(&pPdd->pUartRegs->MCR, 0);
; 2307 : 
; 2308 :     if (pPdd->RxDmaInfo)

  0381c	e59d3004	 ldr         r3, [sp, #4]
  03820	e2833f49	 add         r3, r3, #0x49, 30
  03824	e5933000	 ldr         r3, [r3]
  03828	e3530000	 cmp         r3, #0
  0382c	0a000007	 beq         |$LN3@HWClose|

; 2309 :     {
; 2310 :         DmaStop(pPdd->RxDmaInfo);

  03830	e59d3004	 ldr         r3, [sp, #4]
  03834	e2833f49	 add         r3, r3, #0x49, 30
  03838	e5930000	 ldr         r0, [r3]
  0383c	eb000000	 bl          DmaStop

; 2311 :         pPdd->bDmaInitialize = FALSE;

  03840	e59d3004	 ldr         r3, [sp, #4]
  03844	e2832e15	 add         r2, r3, #0x15, 28
  03848	e3a03000	 mov         r3, #0
  0384c	e5823000	 str         r3, [r2]
  03850		 |$LN3@HWClose|

; 2312 :     }
; 2313 : 
; 2314 :     LeaveCriticalSection(&pPdd->hwCS);

  03850	e59d3004	 ldr         r3, [sp, #4]
  03854	e2830098	 add         r0, r3, #0x98
  03858	eb000000	 bl          LeaveCriticalSection

; 2315 : 
; 2316 :     // We are closed
; 2317 :     pPdd->open = FALSE;

  0385c	e59d3004	 ldr         r3, [sp, #4]
  03860	e2832054	 add         r2, r3, #0x54
  03864	e3a03000	 mov         r3, #0
  03868	e5823000	 str         r3, [r2]

; 2318 :     // stop power thread
; 2319 :     if (pPdd->hPowerThread != NULL)

  0386c	e59d3004	 ldr         r3, [sp, #4]
  03870	e2833e16	 add         r3, r3, #0x16, 28
  03874	e5933000	 ldr         r3, [r3]
  03878	e3530000	 cmp         r3, #0
  0387c	0a000014	 beq         |$LN2@HWClose|

; 2320 :     {
; 2321 :         pPdd->bExitPowerThread = TRUE;

  03880	e59d3004	 ldr         r3, [sp, #4]
  03884	e2832f59	 add         r2, r3, #0x59, 30
  03888	e3a03001	 mov         r3, #1
  0388c	e5823000	 str         r3, [r2]

; 2322 :         SetEvent(pPdd->hPowerEvent);

  03890	e59d3004	 ldr         r3, [sp, #4]
  03894	e2833f57	 add         r3, r3, #0x57, 30
  03898	e5930000	 ldr         r0, [r3]
  0389c	eb000000	 bl          SetEvent

; 2323 :         WaitForSingleObject(pPdd->hPowerThread, INFINITE);

  038a0	e3e01000	 mvn         r1, #0
  038a4	e59d3004	 ldr         r3, [sp, #4]
  038a8	e2833e16	 add         r3, r3, #0x16, 28
  038ac	e5930000	 ldr         r0, [r3]
  038b0	eb000000	 bl          WaitForSingleObject

; 2324 :         CloseHandle(pPdd->hPowerThread);

  038b4	e59d3004	 ldr         r3, [sp, #4]
  038b8	e2833e16	 add         r3, r3, #0x16, 28
  038bc	e5930000	 ldr         r0, [r3]
  038c0	eb000000	 bl          CloseHandle

; 2325 :         pPdd->hPowerThread = NULL;

  038c4	e59d3004	 ldr         r3, [sp, #4]
  038c8	e2832e16	 add         r2, r3, #0x16, 28
  038cc	e3a03000	 mov         r3, #0
  038d0	e5823000	 str         r3, [r2]
  038d4		 |$LN2@HWClose|

; 2326 :     }
; 2327 : 
; 2328 :     if (pPdd->hPowerEvent != NULL)

  038d4	e59d3004	 ldr         r3, [sp, #4]
  038d8	e2833f57	 add         r3, r3, #0x57, 30
  038dc	e5933000	 ldr         r3, [r3]
  038e0	e3530000	 cmp         r3, #0
  038e4	0a000003	 beq         |$LN1@HWClose|

; 2329 :     {
; 2330 :         CloseHandle(pPdd->hPowerEvent);

  038e8	e59d3004	 ldr         r3, [sp, #4]
  038ec	e2833f57	 add         r3, r3, #0x57, 30
  038f0	e5930000	 ldr         r0, [r3]
  038f4	eb000000	 bl          CloseHandle
  038f8		 |$LN1@HWClose|

; 2331 :     }
; 2332 :     // put uart in force Idle as power thread is exited.
; 2333 :     OUTREG8(
; 2334 :     &pPdd->pUartRegs->SYSC,
; 2335 :     // turn on force idle, to allow full retention
; 2336 :      UART_SYSC_IDLE_FORCE|UART_SYSC_WAKEUP_ENABLE|UART_SYSC_AUTOIDLE
; 2337 :     );

  038f8	e59d3004	 ldr         r3, [sp, #4]
  038fc	e2833024	 add         r3, r3, #0x24
  03900	e5933000	 ldr         r3, [r3]
  03904	e2832054	 add         r2, r3, #0x54
  03908	e3a03005	 mov         r3, #5
  0390c	e5c23000	 strb        r3, [r2]

; 2338 : 
; 2339 :     // Set hardware to D3
; 2340 :     pPdd->externalDX = D3;

  03910	e59d3004	 ldr         r3, [sp, #4]
  03914	e2832034	 add         r2, r3, #0x34
  03918	e3a03003	 mov         r3, #3
  0391c	e5823000	 str         r3, [r2]

; 2341 :     SetPower(pPdd, D3);

  03920	e3a01003	 mov         r1, #3
  03924	e59d0004	 ldr         r0, [sp, #4]
  03928	eb000000	 bl          SetPower

; 2342 : 
; 2343 : 
; 2344 :     rc = 0;

  0392c	e3a03000	 mov         r3, #0
  03930	e58d3000	 str         r3, [sp]
  03934		 |$cleanUp$45566|

; 2345 : 
; 2346 : cleanUp:
; 2347 :     DEBUGMSG(ZONE_CLOSE||ZONE_FUNCTION, (L"-HWClose(%d)\r\n", rc));

  03934	e59f3054	 ldr         r3, [pc, #0x54]
  03938	e5933440	 ldr         r3, [r3, #0x440]
  0393c	e3130010	 tst         r3, #0x10
  03940	1a000006	 bne         |$LN13@HWClose|
  03944	e59f3044	 ldr         r3, [pc, #0x44]
  03948	e5933440	 ldr         r3, [r3, #0x440]
  0394c	e3130a02	 tst         r3, #2, 20
  03950	1a000002	 bne         |$LN13@HWClose|
  03954	e3a03000	 mov         r3, #0
  03958	e58d3010	 str         r3, [sp, #0x10]
  0395c	ea000004	 b           |$LN14@HWClose|
  03960		 |$LN13@HWClose|
  03960	e59d1000	 ldr         r1, [sp]
  03964	e59f0020	 ldr         r0, [pc, #0x20]
  03968	eb000000	 bl          NKDbgPrintfW
  0396c	e3a03001	 mov         r3, #1
  03970	e58d3010	 str         r3, [sp, #0x10]
  03974		 |$LN14@HWClose|

; 2348 :     return rc;

  03974	e59d3000	 ldr         r3, [sp]
  03978	e58d3008	 str         r3, [sp, #8]

; 2349 : 
; 2350 : }

  0397c	e59d0008	 ldr         r0, [sp, #8]
  03980	e28dd014	 add         sp, sp, #0x14
  03984	e89d6000	 ldmia       sp, {sp, lr}
  03988	e12fff1e	 bx          lr
  0398c		 |$LN18@HWClose|
  0398c		 |$LN19@HWClose|
  0398c	00000000	 DCD         |??_C@_1BO@EEAIAKGH@?$AA?9?$AAH?$AAW?$AAC?$AAl?$AAo?$AAs?$AAe?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  03990		 |$LN20@HWClose|
  03990	00000000	 DCD         |dpCurSettings|
  03994		 |$LN21@HWClose|
  03994	00000000	 DCD         |??_C@_1CG@MOCANEPJ@?$AA?$CL?$AAH?$AAW?$AAC?$AAl?$AAo?$AAs?$AAe?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  03998		 |$M47061|

			 ENDP  ; |HWClose|

	EXPORT	|??_C@_1CA@MAACODGK@?$AA?9?$AAS?$AAe?$AAt?$AAA?$AAu?$AAt?$AAo?$AAR?$AAT?$AAS?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CA@IJENPEFF@?$AA?$CL?$AAS?$AAe?$AAt?$AAA?$AAu?$AAt?$AAo?$AAR?$AAT?$AAS?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  000b0			 AREA	 |.pdata|, PDATA
|$T47077| DCD	|$LN11@SetAutoRTS|
	DCD	0x40005704

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CA@MAACODGK@?$AA?9?$AAS?$AAe?$AAt?$AAA?$AAu?$AAt?$AAo?$AAR?$AAT?$AAS?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "S", 0x0, "e", 0x0, "t", 0x0, "A", 0x0, "u", 0x0, "t"
	DCB	0x0, "o", 0x0, "R", 0x0, "T", 0x0, "S", 0x0, "(", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CA@IJENPEFF@?$AA?$CL?$AAS?$AAe?$AAt?$AAA?$AAu?$AAt?$AAo?$AAR?$AAT?$AAS?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "S", 0x0, "e", 0x0, "t", 0x0, "A", 0x0, "u", 0x0, "t"
	DCB	0x0, "o", 0x0, "R", 0x0, "T", 0x0, "S", 0x0, "(", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  03998			 AREA	 |.text|, CODE, ARM

  03998		 |SetAutoRTS| PROC

; 583  : {

  03998		 |$LN11@SetAutoRTS|
  03998	e1a0c00d	 mov         r12, sp
  0399c	e92d0003	 stmdb       sp!, {r0, r1}
  039a0	e92d5000	 stmdb       sp!, {r12, lr}
  039a4	e24dd014	 sub         sp, sp, #0x14
  039a8		 |$M47074|

; 584  :     OMAP_UART_REGS *pUartRegs = pPdd->pUartRegs;

  039a8	e59d301c	 ldr         r3, [sp, #0x1C]
  039ac	e2833024	 add         r3, r3, #0x24
  039b0	e5933000	 ldr         r3, [r3]
  039b4	e58d3000	 str         r3, [sp]

; 585  :     UCHAR lcr;
; 586  : 
; 587  :     DEBUGMSG(ZONE_FUNCTION, (L"+SetAutoRTS()\r\n"));

  039b8	e59f312c	 ldr         r3, [pc, #0x12C]
  039bc	e5933440	 ldr         r3, [r3, #0x440]
  039c0	e3130a02	 tst         r3, #2, 20
  039c4	0a000004	 beq         |$LN5@SetAutoRTS|
  039c8	e59f0120	 ldr         r0, [pc, #0x120]
  039cc	eb000000	 bl          NKDbgPrintfW
  039d0	e3a03001	 mov         r3, #1
  039d4	e58d300c	 str         r3, [sp, #0xC]
  039d8	ea000001	 b           |$LN6@SetAutoRTS|
  039dc		 |$LN5@SetAutoRTS|
  039dc	e3a03000	 mov         r3, #0
  039e0	e58d300c	 str         r3, [sp, #0xC]
  039e4		 |$LN6@SetAutoRTS|

; 588  : 
; 589  :     // Get UART lock
; 590  :     EnterCriticalSection(&pPdd->hwCS);

  039e4	e59d301c	 ldr         r3, [sp, #0x1C]
  039e8	e2830098	 add         r0, r3, #0x98
  039ec	eb000000	 bl          EnterCriticalSection

; 591  : 
; 592  :     // Save LCR value & enable EFR access
; 593  :     lcr = INREG8(&pUartRegs->LCR);

  039f0	e59d3000	 ldr         r3, [sp]
  039f4	e283300c	 add         r3, r3, #0xC
  039f8	e5d33000	 ldrb        r3, [r3]
  039fc	e5cd3004	 strb        r3, [sp, #4]

; 594  :     OUTREG8(&pUartRegs->LCR, UART_LCR_MODE_CONFIG_B);

  03a00	e59d3000	 ldr         r3, [sp]
  03a04	e283200c	 add         r2, r3, #0xC
  03a08	e3a030bf	 mov         r3, #0xBF
  03a0c	e5c23000	 strb        r3, [r2]

; 595  : 
; 596  :     // Enable/disable hardware auto RTS
; 597  :     if (enable)

  03a10	e59d3020	 ldr         r3, [sp, #0x20]
  03a14	e3530000	 cmp         r3, #0
  03a18	0a00000c	 beq         |$LN2@SetAutoRTS|

; 598  :     {
; 599  :         SETREG8(&pUartRegs->EFR, UART_EFR_AUTO_RTS_EN);

  03a1c	e59d3000	 ldr         r3, [sp]
  03a20	e2833008	 add         r3, r3, #8
  03a24	e5d33000	 ldrb        r3, [r3]
  03a28	e3833040	 orr         r3, r3, #0x40
  03a2c	e20320ff	 and         r2, r3, #0xFF
  03a30	e59d3000	 ldr         r3, [sp]
  03a34	e2833008	 add         r3, r3, #8
  03a38	e5c32000	 strb        r2, [r3]

; 600  :         pPdd->autoRTS = TRUE;

  03a3c	e59d301c	 ldr         r3, [sp, #0x1C]
  03a40	e283207c	 add         r2, r3, #0x7C
  03a44	e3a03001	 mov         r3, #1
  03a48	e5823000	 str         r3, [r2]

; 601  :     }
; 602  :     else

  03a4c	ea00000d	 b           |$LN1@SetAutoRTS|
  03a50		 |$LN2@SetAutoRTS|

; 603  :     {
; 604  :         // Disable hardware auto RTS
; 605  :         CLRREG8(&pUartRegs->EFR, UART_EFR_AUTO_RTS_EN);

  03a50	e59d3000	 ldr         r3, [sp]
  03a54	e2833008	 add         r3, r3, #8
  03a58	e5d33000	 ldrb        r3, [r3]
  03a5c	e1a02003	 mov         r2, r3
  03a60	e3e03040	 mvn         r3, #0x40
  03a64	e0023003	 and         r3, r2, r3
  03a68	e20320ff	 and         r2, r3, #0xFF
  03a6c	e59d3000	 ldr         r3, [sp]
  03a70	e2833008	 add         r3, r3, #8
  03a74	e5c32000	 strb        r2, [r3]

; 606  :         pPdd->autoRTS = FALSE;

  03a78	e59d301c	 ldr         r3, [sp, #0x1C]
  03a7c	e283207c	 add         r2, r3, #0x7C
  03a80	e3a03000	 mov         r3, #0
  03a84	e5823000	 str         r3, [r2]
  03a88		 |$LN1@SetAutoRTS|

; 607  :     }
; 608  : 
; 609  :     // Restore LCR value
; 610  :     OUTREG8(&pUartRegs->LCR, lcr);

  03a88	e59d3000	 ldr         r3, [sp]
  03a8c	e283200c	 add         r2, r3, #0xC
  03a90	e5dd3004	 ldrb        r3, [sp, #4]
  03a94	e5c23000	 strb        r3, [r2]

; 611  : 
; 612  :     // Free UART lock.
; 613  : 
; 614  :     LeaveCriticalSection(&pPdd->hwCS);

  03a98	e59d301c	 ldr         r3, [sp, #0x1C]
  03a9c	e2830098	 add         r0, r3, #0x98
  03aa0	eb000000	 bl          LeaveCriticalSection

; 615  : 
; 616  :     DEBUGMSG(ZONE_FUNCTION, (L"-SetAutoRTS()\r\n"));

  03aa4	e59f3040	 ldr         r3, [pc, #0x40]
  03aa8	e5933440	 ldr         r3, [r3, #0x440]
  03aac	e3130a02	 tst         r3, #2, 20
  03ab0	0a000004	 beq         |$LN7@SetAutoRTS|
  03ab4	e59f002c	 ldr         r0, [pc, #0x2C]
  03ab8	eb000000	 bl          NKDbgPrintfW
  03abc	e3a03001	 mov         r3, #1
  03ac0	e58d3010	 str         r3, [sp, #0x10]
  03ac4	ea000001	 b           |$LN8@SetAutoRTS|
  03ac8		 |$LN7@SetAutoRTS|
  03ac8	e3a03000	 mov         r3, #0
  03acc	e58d3010	 str         r3, [sp, #0x10]
  03ad0		 |$LN8@SetAutoRTS|

; 617  :     return TRUE;

  03ad0	e3a03001	 mov         r3, #1
  03ad4	e58d3008	 str         r3, [sp, #8]

; 618  : }

  03ad8	e59d0008	 ldr         r0, [sp, #8]
  03adc	e28dd014	 add         sp, sp, #0x14
  03ae0	e89d6000	 ldmia       sp, {sp, lr}
  03ae4	e12fff1e	 bx          lr
  03ae8		 |$LN12@SetAutoRTS|
  03ae8		 |$LN13@SetAutoRTS|
  03ae8	00000000	 DCD         |??_C@_1CA@MAACODGK@?$AA?9?$AAS?$AAe?$AAt?$AAA?$AAu?$AAt?$AAo?$AAR?$AAT?$AAS?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  03aec		 |$LN14@SetAutoRTS|
  03aec	00000000	 DCD         |dpCurSettings|
  03af0		 |$LN15@SetAutoRTS|
  03af0	00000000	 DCD         |??_C@_1CA@IJENPEFF@?$AA?$CL?$AAS?$AAe?$AAt?$AAA?$AAu?$AAt?$AAo?$AAR?$AAT?$AAS?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  03af4		 |$M47075|

			 ENDP  ; |SetAutoRTS|

	EXPORT	|??_C@_1CA@IIENEMGF@?$AA?9?$AAS?$AAe?$AAt?$AAA?$AAu?$AAt?$AAo?$AAC?$AAT?$AAS?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CA@MBACFLFK@?$AA?$CL?$AAS?$AAe?$AAt?$AAA?$AAu?$AAt?$AAo?$AAC?$AAT?$AAS?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  000b8			 AREA	 |.pdata|, PDATA
|$T47091| DCD	|$LN11@SetAutoCTS|
	DCD	0x40004f04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CA@IIENEMGF@?$AA?9?$AAS?$AAe?$AAt?$AAA?$AAu?$AAt?$AAo?$AAC?$AAT?$AAS?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "S", 0x0, "e", 0x0, "t", 0x0, "A", 0x0, "u", 0x0, "t"
	DCB	0x0, "o", 0x0, "C", 0x0, "T", 0x0, "S", 0x0, "(", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CA@MBACFLFK@?$AA?$CL?$AAS?$AAe?$AAt?$AAA?$AAu?$AAt?$AAo?$AAC?$AAT?$AAS?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "S", 0x0, "e", 0x0, "t", 0x0, "A", 0x0, "u", 0x0, "t"
	DCB	0x0, "o", 0x0, "C", 0x0, "T", 0x0, "S", 0x0, "(", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  03af4			 AREA	 |.text|, CODE, ARM

  03af4		 |SetAutoCTS| PROC

; 632  : {

  03af4		 |$LN11@SetAutoCTS|
  03af4	e1a0c00d	 mov         r12, sp
  03af8	e92d0003	 stmdb       sp!, {r0, r1}
  03afc	e92d5000	 stmdb       sp!, {r12, lr}
  03b00	e24dd014	 sub         sp, sp, #0x14
  03b04		 |$M47088|

; 633  :     OMAP_UART_REGS *pUartRegs = pPdd->pUartRegs;

  03b04	e59d301c	 ldr         r3, [sp, #0x1C]
  03b08	e2833024	 add         r3, r3, #0x24
  03b0c	e5933000	 ldr         r3, [r3]
  03b10	e58d3000	 str         r3, [sp]

; 634  :     UCHAR lcr;
; 635  : 
; 636  :     DEBUGMSG(ZONE_FUNCTION, (L"+SetAutoCTS()\r\n"));

  03b14	e59f310c	 ldr         r3, [pc, #0x10C]
  03b18	e5933440	 ldr         r3, [r3, #0x440]
  03b1c	e3130a02	 tst         r3, #2, 20
  03b20	0a000004	 beq         |$LN5@SetAutoCTS|
  03b24	e59f0100	 ldr         r0, [pc, #0x100]
  03b28	eb000000	 bl          NKDbgPrintfW
  03b2c	e3a03001	 mov         r3, #1
  03b30	e58d300c	 str         r3, [sp, #0xC]
  03b34	ea000001	 b           |$LN6@SetAutoCTS|
  03b38		 |$LN5@SetAutoCTS|
  03b38	e3a03000	 mov         r3, #0
  03b3c	e58d300c	 str         r3, [sp, #0xC]
  03b40		 |$LN6@SetAutoCTS|

; 637  : 
; 638  :     // Get UART lock
; 639  :     EnterCriticalSection(&pPdd->hwCS);

  03b40	e59d301c	 ldr         r3, [sp, #0x1C]
  03b44	e2830098	 add         r0, r3, #0x98
  03b48	eb000000	 bl          EnterCriticalSection

; 640  : 
; 641  :     // Save LCR value & enable EFR access
; 642  :     lcr = INREG8(&pUartRegs->LCR);

  03b4c	e59d3000	 ldr         r3, [sp]
  03b50	e283300c	 add         r3, r3, #0xC
  03b54	e5d33000	 ldrb        r3, [r3]
  03b58	e5cd3004	 strb        r3, [sp, #4]

; 643  :     OUTREG8(&pUartRegs->LCR, UART_LCR_MODE_CONFIG_B);

  03b5c	e59d3000	 ldr         r3, [sp]
  03b60	e283200c	 add         r2, r3, #0xC
  03b64	e3a030bf	 mov         r3, #0xBF
  03b68	e5c23000	 strb        r3, [r2]

; 644  : 
; 645  :     // Enable/disable hardware auto CTS/RTS
; 646  :     if (enable)

  03b6c	e59d3020	 ldr         r3, [sp, #0x20]
  03b70	e3530000	 cmp         r3, #0
  03b74	0a000008	 beq         |$LN2@SetAutoCTS|

; 647  :     {
; 648  :         SETREG8(&pUartRegs->EFR, UART_EFR_AUTO_CTS_EN);

  03b78	e59d3000	 ldr         r3, [sp]
  03b7c	e2833008	 add         r3, r3, #8
  03b80	e5d33000	 ldrb        r3, [r3]
  03b84	e3833080	 orr         r3, r3, #0x80
  03b88	e20320ff	 and         r2, r3, #0xFF
  03b8c	e59d3000	 ldr         r3, [sp]
  03b90	e2833008	 add         r3, r3, #8
  03b94	e5c32000	 strb        r2, [r3]

; 649  :     }
; 650  :     else

  03b98	ea000009	 b           |$LN1@SetAutoCTS|
  03b9c		 |$LN2@SetAutoCTS|

; 651  :     {
; 652  :         // Disable hardware auto CTS/RTS
; 653  :         CLRREG8(&pUartRegs->EFR, UART_EFR_AUTO_CTS_EN);

  03b9c	e59d3000	 ldr         r3, [sp]
  03ba0	e2833008	 add         r3, r3, #8
  03ba4	e5d33000	 ldrb        r3, [r3]
  03ba8	e1a02003	 mov         r2, r3
  03bac	e3e03080	 mvn         r3, #0x80
  03bb0	e0023003	 and         r3, r2, r3
  03bb4	e20320ff	 and         r2, r3, #0xFF
  03bb8	e59d3000	 ldr         r3, [sp]
  03bbc	e2833008	 add         r3, r3, #8
  03bc0	e5c32000	 strb        r2, [r3]
  03bc4		 |$LN1@SetAutoCTS|

; 654  :     }
; 655  : 
; 656  :     // Restore LCR value
; 657  :     OUTREG8(&pUartRegs->LCR, lcr);

  03bc4	e59d3000	 ldr         r3, [sp]
  03bc8	e283200c	 add         r2, r3, #0xC
  03bcc	e5dd3004	 ldrb        r3, [sp, #4]
  03bd0	e5c23000	 strb        r3, [r2]

; 658  : 
; 659  :     // Free UART lock.
; 660  :     LeaveCriticalSection(&pPdd->hwCS);

  03bd4	e59d301c	 ldr         r3, [sp, #0x1C]
  03bd8	e2830098	 add         r0, r3, #0x98
  03bdc	eb000000	 bl          LeaveCriticalSection

; 661  : 
; 662  :     DEBUGMSG(ZONE_FUNCTION, (L"-SetAutoCTS()\r\n"));

  03be0	e59f3040	 ldr         r3, [pc, #0x40]
  03be4	e5933440	 ldr         r3, [r3, #0x440]
  03be8	e3130a02	 tst         r3, #2, 20
  03bec	0a000004	 beq         |$LN7@SetAutoCTS|
  03bf0	e59f002c	 ldr         r0, [pc, #0x2C]
  03bf4	eb000000	 bl          NKDbgPrintfW
  03bf8	e3a03001	 mov         r3, #1
  03bfc	e58d3010	 str         r3, [sp, #0x10]
  03c00	ea000001	 b           |$LN8@SetAutoCTS|
  03c04		 |$LN7@SetAutoCTS|
  03c04	e3a03000	 mov         r3, #0
  03c08	e58d3010	 str         r3, [sp, #0x10]
  03c0c		 |$LN8@SetAutoCTS|

; 663  :     return TRUE;

  03c0c	e3a03001	 mov         r3, #1
  03c10	e58d3008	 str         r3, [sp, #8]

; 664  : }

  03c14	e59d0008	 ldr         r0, [sp, #8]
  03c18	e28dd014	 add         sp, sp, #0x14
  03c1c	e89d6000	 ldmia       sp, {sp, lr}
  03c20	e12fff1e	 bx          lr
  03c24		 |$LN12@SetAutoCTS|
  03c24		 |$LN13@SetAutoCTS|
  03c24	00000000	 DCD         |??_C@_1CA@IIENEMGF@?$AA?9?$AAS?$AAe?$AAt?$AAA?$AAu?$AAt?$AAo?$AAC?$AAT?$AAS?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  03c28		 |$LN14@SetAutoCTS|
  03c28	00000000	 DCD         |dpCurSettings|
  03c2c		 |$LN15@SetAutoCTS|
  03c2c	00000000	 DCD         |??_C@_1CA@MBACFLFK@?$AA?$CL?$AAS?$AAe?$AAt?$AAA?$AAu?$AAt?$AAo?$AAC?$AAT?$AAS?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  03c30		 |$M47089|

			 ENDP  ; |SetAutoCTS|

	EXPORT	|??_C@_1FO@HFMDICAM@?$AA?9?$AAH?$AAW?$AAG?$AAe?$AAt?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAT?$AAy?$AAp?$AAe?$AA?$CI?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AAc@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FM@CAOHIIKO@?$AA?$CL?$AAH?$AAW?$AAG?$AAe?$AAt?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAT?$AAy?$AAp?$AAe?$AA?5?$AAS?$AAt?$AAa?$AAr?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAD?$AAM?$AAA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FI@GFENDDOO@?$AA?$CL?$AAH?$AAW?$AAG?$AAe?$AAt?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAT?$AAy?$AAp?$AAe?$AA?5?$AAS?$AAt?$AAa?$AAr?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAD?$AAM?$AAA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HC@OPJAIOBG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAH?$AAW?$AAG?$AAe?$AAt?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAT?$AAy?$AAp?$AAe?$AA?3?$AA?5?$AAU?$AAp?$AAd?$AAa?$AAt@| [ DATA ] ; `string'

  000c0			 AREA	 |.pdata|, PDATA
|$T47132| DCD	|$LN63@HWGetInter|
	DCD	0x40014504

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FO@HFMDICAM@?$AA?9?$AAH?$AAW?$AAG?$AAe?$AAt?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAT?$AAy?$AAp?$AAe?$AA?$CI?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AAc@| DCB "-"
	DCB	0x0, "H", 0x0, "W", 0x0, "G", 0x0, "e", 0x0, "t", 0x0, "I"
	DCB	0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u"
	DCB	0x0, "p", 0x0, "t", 0x0, "T", 0x0, "y", 0x0, "p", 0x0, "e"
	DCB	0x0, "(", 0x0, "t", 0x0, "y", 0x0, "p", 0x0, "e", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " "
	DCB	0x0, "c", 0x0, "a", 0x0, "u", 0x0, "s", 0x0, "e", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "%", 0x0, "0", 0x0, "2", 0x0, "x"
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FM@CAOHIIKO@?$AA?$CL?$AAH?$AAW?$AAG?$AAe?$AAt?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAT?$AAy?$AAp?$AAe?$AA?5?$AAS?$AAt?$AAa?$AAr?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAD?$AAM?$AAA@| DCB "+"
	DCB	0x0, "H", 0x0, "W", 0x0, "G", 0x0, "e", 0x0, "t", 0x0, "I"
	DCB	0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u"
	DCB	0x0, "p", 0x0, "t", 0x0, "T", 0x0, "y", 0x0, "p", 0x0, "e"
	DCB	0x0, " ", 0x0, "S", 0x0, "t", 0x0, "a", 0x0, "r", 0x0, "t"
	DCB	0x0, "i", 0x0, "n", 0x0, "g", 0x0, " ", 0x0, "D", 0x0, "M"
	DCB	0x0, "A", 0x0, "(", 0x0, "I", 0x0, "N", 0x0, "T", 0x0, "R"
	DCB	0x0, "_", 0x0, "L", 0x0, "I", 0x0, "N", 0x0, "E", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FI@GFENDDOO@?$AA?$CL?$AAH?$AAW?$AAG?$AAe?$AAt?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAT?$AAy?$AAp?$AAe?$AA?5?$AAS?$AAt?$AAa?$AAr?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAD?$AAM?$AAA@| DCB "+"
	DCB	0x0, "H", 0x0, "W", 0x0, "G", 0x0, "e", 0x0, "t", 0x0, "I"
	DCB	0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u"
	DCB	0x0, "p", 0x0, "t", 0x0, "T", 0x0, "y", 0x0, "p", 0x0, "e"
	DCB	0x0, " ", 0x0, "S", 0x0, "t", 0x0, "a", 0x0, "r", 0x0, "t"
	DCB	0x0, "i", 0x0, "n", 0x0, "g", 0x0, " ", 0x0, "D", 0x0, "M"
	DCB	0x0, "A", 0x0, "(", 0x0, "I", 0x0, "N", 0x0, "T", 0x0, "R"
	DCB	0x0, "_", 0x0, "R", 0x0, "X", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HC@OPJAIOBG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAH?$AAW?$AAG?$AAe?$AAt?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAT?$AAy?$AAp?$AAe?$AA?3?$AA?5?$AAU?$AAp?$AAd?$AAa?$AAt@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "H", 0x0, "W", 0x0, "G", 0x0, "e", 0x0, "t", 0x0, "I"
	DCB	0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u"
	DCB	0x0, "p", 0x0, "t", 0x0, "T", 0x0, "y", 0x0, "p", 0x0, "e"
	DCB	0x0, ":", 0x0, " ", 0x0, "U", 0x0, "p", 0x0, "d", 0x0, "a"
	DCB	0x0, "t", 0x0, "e", 0x0, "D", 0x0, "M", 0x0, "A", 0x0, "R"
	DCB	0x0, "x", 0x0, "P", 0x0, "o", 0x0, "i", 0x0, "n", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, "d", 0x0, "!", 0x0, "!", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  03c30			 AREA	 |.text|, CODE, ARM

  03c30		 |HWGetInterruptType| PROC

; 2365 : {

  03c30		 |$LN63@HWGetInter|
  03c30	e1a0c00d	 mov         r12, sp
  03c34	e92d0001	 stmdb       sp!, {r0}
  03c38	e92d5000	 stmdb       sp!, {r12, lr}
  03c3c	e24dd038	 sub         sp, sp, #0x38
  03c40		 |$M47129|

; 2366 :     UARTPDD *pPdd = (UARTPDD *)pvContext;

  03c40	e59d3040	 ldr         r3, [sp, #0x40]
  03c44	e58d3008	 str         r3, [sp, #8]

; 2367 :     INTERRUPT_TYPE type = INTR_NONE;

  03c48	e3a03000	 mov         r3, #0
  03c4c	e58d3000	 str         r3, [sp]

; 2368 :     UCHAR intCause = 0, mask = 0;

  03c50	e3a03000	 mov         r3, #0
  03c54	e5cd300c	 strb        r3, [sp, #0xC]
  03c58	e3a03000	 mov         r3, #0
  03c5c	e5cd3004	 strb        r3, [sp, #4]

; 2369 : 
; 2370 :     RETAILMSG(FALSE, (
; 2371 :         L"+HWGetInterruptType(0x%08x)\r\n",
; 2372 :         pvContext
; 2373 :         ));
; 2374 : 
; 2375 :     // We must solve special wakeup mode
; 2376 :     if (pPdd->wakeUpMode)

  03c60	e59d3008	 ldr         r3, [sp, #8]
  03c64	e2833080	 add         r3, r3, #0x80
  03c68	e5933000	 ldr         r3, [r3]
  03c6c	e3530000	 cmp         r3, #0
  03c70	0a00000b	 beq         |$LN27@HWGetInter|

; 2377 :     {
; 2378 :         if (!pPdd->wakeUpSignaled)

  03c74	e59d3008	 ldr         r3, [sp, #8]
  03c78	e2833084	 add         r3, r3, #0x84
  03c7c	e5933000	 ldr         r3, [r3]
  03c80	e3530000	 cmp         r3, #0
  03c84	1a000005	 bne         |$LN26@HWGetInter|

; 2379 :         {
; 2380 :             type = INTR_RX;

  03c88	e3a03002	 mov         r3, #2
  03c8c	e58d3000	 str         r3, [sp]

; 2381 :             pPdd->wakeUpSignaled = TRUE;

  03c90	e59d3008	 ldr         r3, [sp, #8]
  03c94	e2832084	 add         r2, r3, #0x84
  03c98	e3a03001	 mov         r3, #1
  03c9c	e5823000	 str         r3, [r2]
  03ca0		 |$LN26@HWGetInter|

; 2382 :         }
; 2383 :         goto cleanUp;

  03ca0	ea00010f	 b           |$cleanUp$45593|
  03ca4		 |$LN27@HWGetInter|

; 2384 :     }
; 2385 :     // if there is no open handle then power is in D3 state
; 2386 :     // avoid exceptions
; 2387 :     if (pPdd->open == FALSE){

  03ca4	e59d3008	 ldr         r3, [sp, #8]
  03ca8	e2833054	 add         r3, r3, #0x54
  03cac	e5933000	 ldr         r3, [r3]
  03cb0	e3530000	 cmp         r3, #0
  03cb4	1a000000	 bne         |$LN25@HWGetInter|

; 2388 :         goto cleanUp;

  03cb8	ea000109	 b           |$cleanUp$45593|
  03cbc		 |$LN25@HWGetInter|

; 2389 :     }
; 2390 : 
; 2391 :     EnterCriticalSection(&pPdd->hwCS);

  03cbc	e59d3008	 ldr         r3, [sp, #8]
  03cc0	e2830098	 add         r0, r3, #0x98
  03cc4	eb000000	 bl          EnterCriticalSection

; 2392 : 
; 2393 :     if ((pPdd->currentDX == D3) || (pPdd->currentDX == D4))

  03cc8	e59d3008	 ldr         r3, [sp, #8]
  03ccc	e2833030	 add         r3, r3, #0x30
  03cd0	e5933000	 ldr         r3, [r3]
  03cd4	e3530003	 cmp         r3, #3
  03cd8	0a000004	 beq         |$LN23@HWGetInter|
  03cdc	e59d3008	 ldr         r3, [sp, #8]
  03ce0	e2833030	 add         r3, r3, #0x30
  03ce4	e5933000	 ldr         r3, [r3]
  03ce8	e3530004	 cmp         r3, #4
  03cec	1a000003	 bne         |$LN24@HWGetInter|
  03cf0		 |$LN23@HWGetInter|

; 2394 :     {
; 2395 :        RETAILMSG(FALSE, (
; 2396 :         L"+HWGetInterruptType D3 (0x%08x)\r\n",
; 2397 :         pvContext
; 2398 :         ));
; 2399 : 
; 2400 :        LeaveCriticalSection(&pPdd->hwCS);

  03cf0	e59d3008	 ldr         r3, [sp, #8]
  03cf4	e2830098	 add         r0, r3, #0x98
  03cf8	eb000000	 bl          LeaveCriticalSection

; 2401 :     goto cleanUp;

  03cfc	ea0000f8	 b           |$cleanUp$45593|
  03d00		 |$LN24@HWGetInter|

; 2402 :     }
; 2403 : 
; 2404 :     // Get cause from hardware
; 2405 :     intCause = INREG8(&pPdd->pUartRegs->IIR);

  03d00	e59d3008	 ldr         r3, [sp, #8]
  03d04	e2833024	 add         r3, r3, #0x24
  03d08	e5933000	 ldr         r3, [r3]
  03d0c	e2833008	 add         r3, r3, #8
  03d10	e5d33000	 ldrb        r3, [r3]
  03d14	e5cd300c	 strb        r3, [sp, #0xC]

; 2406 :     mask  = INREG8(&pPdd->pUartRegs->IER);

  03d18	e59d3008	 ldr         r3, [sp, #8]
  03d1c	e2833024	 add         r3, r3, #0x24
  03d20	e5933000	 ldr         r3, [r3]
  03d24	e2833004	 add         r3, r3, #4
  03d28	e5d33000	 ldrb        r3, [r3]
  03d2c	e5cd3004	 strb        r3, [sp, #4]

; 2407 :     
; 2408 :     if ((intCause & UART_IIR_IT_PENDING) == 0) {

  03d30	e5dd300c	 ldrb        r3, [sp, #0xC]
  03d34	e3130001	 tst         r3, #1
  03d38	1a000038	 bne         |$LN22@HWGetInter|

; 2409 :         switch (intCause & 0x3F)

  03d3c	e5dd300c	 ldrb        r3, [sp, #0xC]
  03d40	e203303f	 and         r3, r3, #0x3F
  03d44	e58d3014	 str         r3, [sp, #0x14]
  03d48	e59d3014	 ldr         r3, [sp, #0x14]
  03d4c	e3530014	 cmp         r3, #0x14
  03d50	8a000032	 bhi         |$LN20@HWGetInter|
  03d54	e59d2014	 ldr         r2, [sp, #0x14]
  03d58	e1a03102	 mov         r3, r2, lsl #2
  03d5c	e083300f	 add         r3, r3, pc
  03d60	e5933004	 ldr         r3, [r3, #4]
  03d64	e08ff003	 add         pc, pc, r3
  03d68		 |$LN39@HWGetInter|
  03d68		 |$LN38@HWGetInter|
  03d68		 |$LN40@HWGetInter|
  03d68	00000074	 DCD         0x74
  03d6c		 |$LN41@HWGetInter|
  03d6c	000000b4	 DCD         0xb4
  03d70		 |$LN42@HWGetInter|
  03d70	00000050	 DCD         0x50
  03d74		 |$LN43@HWGetInter|
  03d74	000000b4	 DCD         0xb4
  03d78		 |$LN44@HWGetInter|
  03d78	0000005c	 DCD         0x5c
  03d7c		 |$LN45@HWGetInter|
  03d7c	000000b4	 DCD         0xb4
  03d80		 |$LN46@HWGetInter|
  03d80	00000080	 DCD         0x80
  03d84		 |$LN47@HWGetInter|
  03d84	000000b4	 DCD         0xb4
  03d88		 |$LN48@HWGetInter|
  03d88	000000b4	 DCD         0xb4
  03d8c		 |$LN49@HWGetInter|
  03d8c	000000b4	 DCD         0xb4
  03d90		 |$LN50@HWGetInter|
  03d90	000000b4	 DCD         0xb4
  03d94		 |$LN51@HWGetInter|
  03d94	000000b4	 DCD         0xb4
  03d98		 |$LN52@HWGetInter|
  03d98	00000068	 DCD         0x68
  03d9c		 |$LN53@HWGetInter|
  03d9c	000000b4	 DCD         0xb4
  03da0		 |$LN54@HWGetInter|
  03da0	000000b4	 DCD         0xb4
  03da4		 |$LN55@HWGetInter|
  03da4	000000b4	 DCD         0xb4
  03da8		 |$LN56@HWGetInter|
  03da8	000000b4	 DCD         0xb4
  03dac		 |$LN57@HWGetInter|
  03dac	000000b4	 DCD         0xb4
  03db0		 |$LN58@HWGetInter|
  03db0	000000b4	 DCD         0xb4
  03db4		 |$LN59@HWGetInter|
  03db4	000000b4	 DCD         0xb4
  03db8		 |$LN60@HWGetInter|
  03db8	00000074	 DCD         0x74
  03dbc		 |$LN19@HWGetInter|

; 2410 :         {
; 2411 :         case UART_IIR_THR:
; 2412 :             type = INTR_TX;

  03dbc	e3a03004	 mov         r3, #4
  03dc0	e58d3000	 str         r3, [sp]

; 2413 :             break;

  03dc4	ea000015	 b           |$LN20@HWGetInter|
  03dc8		 |$LN18@HWGetInter|

; 2414 :         case UART_IIR_RHR:
; 2415 :         type = INTR_RX;

  03dc8	e3a03002	 mov         r3, #2
  03dcc	e58d3000	 str         r3, [sp]

; 2416 :         break;

  03dd0	ea000012	 b           |$LN20@HWGetInter|
  03dd4		 |$LN17@HWGetInter|

; 2417 :         case UART_IIR_TO:
; 2418 :             type = INTR_RX;

  03dd4	e3a03002	 mov         r3, #2
  03dd8	e58d3000	 str         r3, [sp]

; 2419 :             break;

  03ddc	ea00000f	 b           |$LN20@HWGetInter|
  03de0		 |$LN16@HWGetInter|

; 2420 :         case UART_IIR_MODEM:
; 2421 :         case UART_IIR_CTSRTS:
; 2422 :             type = INTR_MODEM;

  03de0	e3a03008	 mov         r3, #8
  03de4	e58d3000	 str         r3, [sp]

; 2423 :             break;

  03de8	ea00000c	 b           |$LN20@HWGetInter|
  03dec		 |$LN15@HWGetInter|

; 2424 :         case UART_IIR_LINE:
; 2425 :             type = INTR_LINE;

  03dec	e3a03001	 mov         r3, #1
  03df0	e58d3000	 str         r3, [sp]

; 2426 :         if (IsDmaEnable(pPdd->RxDmaInfo) == FALSE)

  03df4	e59d3008	 ldr         r3, [sp, #8]
  03df8	e2833f49	 add         r3, r3, #0x49, 30
  03dfc	e5930000	 ldr         r0, [r3]
  03e00	eb000000	 bl          IsDmaEnable
  03e04	e58d0018	 str         r0, [sp, #0x18]
  03e08	e59d3018	 ldr         r3, [sp, #0x18]
  03e0c	e3530000	 cmp         r3, #0
  03e10	1a000002	 bne         |$LN14@HWGetInter|

; 2427 :         {
; 2428 :             type |= INTR_RX;

  03e14	e59d3000	 ldr         r3, [sp]
  03e18	e3833002	 orr         r3, r3, #2
  03e1c	e58d3000	 str         r3, [sp]
  03e20		 |$LN14@HWGetInter|
  03e20		 |$LN20@HWGetInter|
  03e20		 |$LN22@HWGetInter|

; 2429 :         }
; 2430 :             break;
; 2431 :         }
; 2432 : 
; 2433 :     }
; 2434 : 
; 2435 :     LeaveCriticalSection(&pPdd->hwCS);

  03e20	e59d3008	 ldr         r3, [sp, #8]
  03e24	e2830098	 add         r0, r3, #0x98
  03e28	eb000000	 bl          LeaveCriticalSection

; 2436 : 
; 2437 :     // Add software TX interrupt to resume send
; 2438 :     if (pPdd->addTxIntr)

  03e2c	e59d3008	 ldr         r3, [sp, #8]
  03e30	e283308c	 add         r3, r3, #0x8C
  03e34	e5933000	 ldr         r3, [r3]
  03e38	e3530000	 cmp         r3, #0
  03e3c	0a000006	 beq         |$LN13@HWGetInter|

; 2439 :     {
; 2440 :         //RETAILMSG(1, (TEXT("Add software TX interrupt to resume send")));
; 2441 :         type |= INTR_TX;

  03e40	e59d3000	 ldr         r3, [sp]
  03e44	e3833004	 orr         r3, r3, #4
  03e48	e58d3000	 str         r3, [sp]

; 2442 :         pPdd->addTxIntr = FALSE;

  03e4c	e59d3008	 ldr         r3, [sp, #8]
  03e50	e283208c	 add         r2, r3, #0x8C
  03e54	e3a03000	 mov         r3, #0
  03e58	e5823000	 str         r3, [r2]
  03e5c		 |$LN13@HWGetInter|

; 2443 :     }
; 2444 : 
; 2445 :     if (pPdd->RxDmaInfo == NULL)

  03e5c	e59d3008	 ldr         r3, [sp, #8]
  03e60	e2833f49	 add         r3, r3, #0x49, 30
  03e64	e5933000	 ldr         r3, [r3]
  03e68	e3530000	 cmp         r3, #0
  03e6c	1a000000	 bne         |$LN12@HWGetInter|

; 2446 :     {
; 2447 :         goto cleanUp;

  03e70	ea00009b	 b           |$cleanUp$45593|
  03e74		 |$LN12@HWGetInter|

; 2448 :     }
; 2449 : 
; 2450 :     //RX DMA processing
; 2451 :     if ((intCause & 0x3F) == UART_IIR_TO)

  03e74	e5dd300c	 ldrb        r3, [sp, #0xC]
  03e78	e203303f	 and         r3, r3, #0x3F
  03e7c	e353000c	 cmp         r3, #0xC
  03e80	1a000027	 bne         |$LN11@HWGetInter|

; 2452 :     {
; 2453 :         // UART_RegDump(pPdd);
; 2454 : 
; 2455 :         EnterCriticalSection(&pPdd->RxUpdatePtrCS);

  03e84	e59d3008	 ldr         r3, [sp, #8]
  03e88	e28300c0	 add         r0, r3, #0xC0
  03e8c	eb000000	 bl          EnterCriticalSection

; 2456 : 
; 2457 :         SetAutoIdle(pPdd, FALSE);

  03e90	e3a01000	 mov         r1, #0
  03e94	e59d0008	 ldr         r0, [sp, #8]
  03e98	eb000000	 bl          SetAutoIdle

; 2458 : 
; 2459 :         pPdd->bRxDMASignaled = FALSE;

  03e9c	e59d3008	 ldr         r3, [sp, #8]
  03ea0	e2832f51	 add         r2, r3, #0x51, 30
  03ea4	e3a03000	 mov         r3, #0
  03ea8	e5823000	 str         r3, [r2]

; 2460 :         if (RxDmaStop(pPdd, FALSE) == TRUE)

  03eac	e3a01000	 mov         r1, #0
  03eb0	e59d0008	 ldr         r0, [sp, #8]
  03eb4	eb000000	 bl          RxDmaStop
  03eb8	e58d001c	 str         r0, [sp, #0x1C]
  03ebc	e59d301c	 ldr         r3, [sp, #0x1C]
  03ec0	e3530001	 cmp         r3, #1
  03ec4	1a000007	 bne         |$LN10@HWGetInter|

; 2461 :         {
; 2462 :             DEBUGMSG(TESTENABLE, (L"+HWGetInterruptType Starting DMA\r\n"));
; 2463 : 
; 2464 :             SetAutoIdle(pPdd, TRUE);

  03ec8	e3a01001	 mov         r1, #1
  03ecc	e59d0008	 ldr         r0, [sp, #8]
  03ed0	eb000000	 bl          SetAutoIdle

; 2465 :             DmaStart(pPdd->RxDmaInfo);

  03ed4	e59d3008	 ldr         r3, [sp, #8]
  03ed8	e2833f49	 add         r3, r3, #0x49, 30
  03edc	e5930000	 ldr         r0, [r3]
  03ee0	eb000000	 bl          DmaStart

; 2466 :         }
; 2467 :         else

  03ee4	ea00000a	 b           |$LN9@HWGetInter|
  03ee8		 |$LN10@HWGetInter|

; 2468 :             {
; 2469 :             DEBUGMSG(ZONE_ERROR, (L"ERROR: HWGetInterruptType: UpdateDMARxPointer failed!!\r\n"));

  03ee8	e59f3244	 ldr         r3, [pc, #0x244]
  03eec	e5933440	 ldr         r3, [r3, #0x440]
  03ef0	e3130902	 tst         r3, #2, 18
  03ef4	0a000004	 beq         |$LN30@HWGetInter|
  03ef8	e59f0240	 ldr         r0, [pc, #0x240]
  03efc	eb000000	 bl          NKDbgPrintfW
  03f00	e3a03001	 mov         r3, #1
  03f04	e58d3020	 str         r3, [sp, #0x20]
  03f08	ea000001	 b           |$LN31@HWGetInter|
  03f0c		 |$LN30@HWGetInter|
  03f0c	e3a03000	 mov         r3, #0
  03f10	e58d3020	 str         r3, [sp, #0x20]
  03f14		 |$LN31@HWGetInter|
  03f14		 |$LN9@HWGetInter|

; 2470 :             }
; 2471 :         LeaveCriticalSection(&pPdd->RxUpdatePtrCS);

  03f14	e59d3008	 ldr         r3, [sp, #8]
  03f18	e28300c0	 add         r0, r3, #0xC0
  03f1c	eb000000	 bl          LeaveCriticalSection

; 2472 :         }
; 2473 :         // check if we need to start dma
; 2474 :     else 

  03f20	ea00006f	 b           |$LN8@HWGetInter|
  03f24		 |$LN11@HWGetInter|

; 2475 :         {
; 2476 :         if (!pPdd->RxDmaInfo)

  03f24	e59d3008	 ldr         r3, [sp, #8]
  03f28	e2833f49	 add         r3, r3, #0x49, 30
  03f2c	e5933000	 ldr         r3, [r3]
  03f30	e3530000	 cmp         r3, #0
  03f34	1a000000	 bne         |$LN7@HWGetInter|

; 2477 :         {
; 2478 :             goto cleanUp;

  03f38	ea000069	 b           |$cleanUp$45593|
  03f3c		 |$LN7@HWGetInter|

; 2479 :         }
; 2480 : 
; 2481 :         if (pPdd->bRxDMASignaled == TRUE)

  03f3c	e59d3008	 ldr         r3, [sp, #8]
  03f40	e2833f51	 add         r3, r3, #0x51, 30
  03f44	e5933000	 ldr         r3, [r3]
  03f48	e3530001	 cmp         r3, #1
  03f4c	1a000006	 bne         |$LN6@HWGetInter|

; 2482 :         {
; 2483 :             pPdd->bRxDMASignaled = FALSE;

  03f50	e59d3008	 ldr         r3, [sp, #8]
  03f54	e2832f51	 add         r2, r3, #0x51, 30
  03f58	e3a03000	 mov         r3, #0
  03f5c	e5823000	 str         r3, [r2]

; 2484 :             type = INTR_RX;

  03f60	e3a03002	 mov         r3, #2
  03f64	e58d3000	 str         r3, [sp]

; 2485 :             goto cleanUp;

  03f68	ea00005d	 b           |$cleanUp$45593|
  03f6c		 |$LN6@HWGetInter|

; 2486 :         }
; 2487 : 
; 2488 :         if (pPdd->bRxWrapped == TRUE)

  03f6c	e59d3008	 ldr         r3, [sp, #8]
  03f70	e2833f52	 add         r3, r3, #0x52, 30
  03f74	e5933000	 ldr         r3, [r3]
  03f78	e3530001	 cmp         r3, #1
  03f7c	1a000006	 bne         |$LN5@HWGetInter|

; 2489 :         {
; 2490 :             pPdd->bRxWrapped = FALSE;

  03f80	e59d3008	 ldr         r3, [sp, #8]
  03f84	e2832f52	 add         r2, r3, #0x52, 30
  03f88	e3a03000	 mov         r3, #0
  03f8c	e5823000	 str         r3, [r2]

; 2491 :             type = INTR_RX;

  03f90	e3a03002	 mov         r3, #2
  03f94	e58d3000	 str         r3, [sp]

; 2492 :             goto cleanUp;

  03f98	ea000051	 b           |$cleanUp$45593|
  03f9c		 |$LN5@HWGetInter|

; 2493 :         }
; 2494 : 
; 2495 :         if ((type & INTR_RX) != 0)

  03f9c	e59d3000	 ldr         r3, [sp]
  03fa0	e3130002	 tst         r3, #2
  03fa4	0a000027	 beq         |$LN4@HWGetInter|

; 2496 :         {
; 2497 :             DEBUGMSG(ZONE_FUNCTION, (L"+HWGetInterruptType Starting DMA(INTR_RX)\r\n"));

  03fa8	e59f3184	 ldr         r3, [pc, #0x184]
  03fac	e5933440	 ldr         r3, [r3, #0x440]
  03fb0	e3130a02	 tst         r3, #2, 20
  03fb4	0a000004	 beq         |$LN32@HWGetInter|
  03fb8	e59f017c	 ldr         r0, [pc, #0x17C]
  03fbc	eb000000	 bl          NKDbgPrintfW
  03fc0	e3a03001	 mov         r3, #1
  03fc4	e58d3024	 str         r3, [sp, #0x24]
  03fc8	ea000001	 b           |$LN33@HWGetInter|
  03fcc		 |$LN32@HWGetInter|
  03fcc	e3a03000	 mov         r3, #0
  03fd0	e58d3024	 str         r3, [sp, #0x24]
  03fd4		 |$LN33@HWGetInter|

; 2498 : 
; 2499 :             EnterCriticalSection(&pPdd->RxUpdatePtrCS);

  03fd4	e59d3008	 ldr         r3, [sp, #8]
  03fd8	e28300c0	 add         r0, r3, #0xC0
  03fdc	eb000000	 bl          EnterCriticalSection

; 2500 :             if(UpdateDMARxPointer(pPdd, FALSE, 0)== TRUE)

  03fe0	e3a02000	 mov         r2, #0
  03fe4	e3a01000	 mov         r1, #0
  03fe8	e59d0008	 ldr         r0, [sp, #8]
  03fec	eb000000	 bl          UpdateDMARxPointer
  03ff0	e58d0028	 str         r0, [sp, #0x28]
  03ff4	e59d3028	 ldr         r3, [sp, #0x28]
  03ff8	e3530001	 cmp         r3, #1
  03ffc	1a00000e	 bne         |$LN3@HWGetInter|

; 2501 :             {
; 2502 :                 DEBUGMSG(TESTENABLE, (L"+HWGetInterruptType Starting DMA\r\n"));
; 2503 :                 SetAutoIdle(pPdd, TRUE);

  04000	e3a01001	 mov         r1, #1
  04004	e59d0008	 ldr         r0, [sp, #8]
  04008	eb000000	 bl          SetAutoIdle

; 2504 :                 pPdd->bRxDMASignaled = FALSE;

  0400c	e59d3008	 ldr         r3, [sp, #8]
  04010	e2832f51	 add         r2, r3, #0x51, 30
  04014	e3a03000	 mov         r3, #0
  04018	e5823000	 str         r3, [r2]

; 2505 :                 DmaStart(pPdd->RxDmaInfo);

  0401c	e59d3008	 ldr         r3, [sp, #8]
  04020	e2833f49	 add         r3, r3, #0x49, 30
  04024	e5930000	 ldr         r0, [r3]
  04028	eb000000	 bl          DmaStart

; 2506 :                 type &= ~INTR_RX;

  0402c	e59d2000	 ldr         r2, [sp]
  04030	e3e03002	 mvn         r3, #2
  04034	e0023003	 and         r3, r2, r3
  04038	e58d3000	 str         r3, [sp]
  0403c		 |$LN3@HWGetInter|

; 2507 :             }
; 2508 :             LeaveCriticalSection(&pPdd->RxUpdatePtrCS);

  0403c	e59d3008	 ldr         r3, [sp, #8]
  04040	e28300c0	 add         r0, r3, #0xC0
  04044	eb000000	 bl          LeaveCriticalSection
  04048		 |$LN4@HWGetInter|

; 2509 :         }
; 2510 : 
; 2511 :         if ((type & INTR_LINE) != 0)

  04048	e59d3000	 ldr         r3, [sp]
  0404c	e3130001	 tst         r3, #1
  04050	0a000023	 beq         |$LN2@HWGetInter|

; 2512 :         {
; 2513 :             DEBUGMSG(ZONE_FUNCTION, (L"+HWGetInterruptType Starting DMA(INTR_LINE)\r\n"));

  04054	e59f30d8	 ldr         r3, [pc, #0xD8]
  04058	e5933440	 ldr         r3, [r3, #0x440]
  0405c	e3130a02	 tst         r3, #2, 20
  04060	0a000004	 beq         |$LN34@HWGetInter|
  04064	e59f00cc	 ldr         r0, [pc, #0xCC]
  04068	eb000000	 bl          NKDbgPrintfW
  0406c	e3a03001	 mov         r3, #1
  04070	e58d302c	 str         r3, [sp, #0x2C]
  04074	ea000001	 b           |$LN35@HWGetInter|
  04078		 |$LN34@HWGetInter|
  04078	e3a03000	 mov         r3, #0
  0407c	e58d302c	 str         r3, [sp, #0x2C]
  04080		 |$LN35@HWGetInter|

; 2514 :             // UNDONE: need to check if DMA has already be started
; 2515 :             // if so then don't start it again
; 2516 :             EnterCriticalSection(&pPdd->RxUpdatePtrCS);

  04080	e59d3008	 ldr         r3, [sp, #8]
  04084	e28300c0	 add         r0, r3, #0xC0
  04088	eb000000	 bl          EnterCriticalSection

; 2517 :             if(UpdateDMARxPointer(pPdd, FALSE, 0)== TRUE)

  0408c	e3a02000	 mov         r2, #0
  04090	e3a01000	 mov         r1, #0
  04094	e59d0008	 ldr         r0, [sp, #8]
  04098	eb000000	 bl          UpdateDMARxPointer
  0409c	e58d0030	 str         r0, [sp, #0x30]
  040a0	e59d3030	 ldr         r3, [sp, #0x30]
  040a4	e3530001	 cmp         r3, #1
  040a8	1a00000a	 bne         |$LN1@HWGetInter|

; 2518 :             {
; 2519 :                 DEBUGMSG(TESTENABLE, (L"+HWGetInterruptType Starting DMA\r\n"));
; 2520 :                 SetAutoIdle(pPdd, TRUE);

  040ac	e3a01001	 mov         r1, #1
  040b0	e59d0008	 ldr         r0, [sp, #8]
  040b4	eb000000	 bl          SetAutoIdle

; 2521 :                 pPdd->bRxDMASignaled = FALSE;

  040b8	e59d3008	 ldr         r3, [sp, #8]
  040bc	e2832f51	 add         r2, r3, #0x51, 30
  040c0	e3a03000	 mov         r3, #0
  040c4	e5823000	 str         r3, [r2]

; 2522 :                 DmaStart(pPdd->RxDmaInfo);

  040c8	e59d3008	 ldr         r3, [sp, #8]
  040cc	e2833f49	 add         r3, r3, #0x49, 30
  040d0	e5930000	 ldr         r0, [r3]
  040d4	eb000000	 bl          DmaStart
  040d8		 |$LN1@HWGetInter|

; 2523 : 
; 2524 :             }
; 2525 :             LeaveCriticalSection(&pPdd->RxUpdatePtrCS);

  040d8	e59d3008	 ldr         r3, [sp, #8]
  040dc	e28300c0	 add         r0, r3, #0xC0
  040e0	eb000000	 bl          LeaveCriticalSection
  040e4		 |$LN2@HWGetInter|
  040e4		 |$LN8@HWGetInter|
  040e4		 |$cleanUp$45593|

; 2526 :         }
; 2527 :     }
; 2528 : 
; 2529 : cleanUp:
; 2530 :     DEBUGMSG(ZONE_THREAD, (
; 2531 :         L"-HWGetInterruptType(type = %d, cause = %02x)\r\n",
; 2532 :         type, intCause
; 2533 :         ));

  040e4	e59f3048	 ldr         r3, [pc, #0x48]
  040e8	e5933440	 ldr         r3, [r3, #0x440]
  040ec	e3130040	 tst         r3, #0x40
  040f0	0a000006	 beq         |$LN36@HWGetInter|
  040f4	e5dd200c	 ldrb        r2, [sp, #0xC]
  040f8	e59d1000	 ldr         r1, [sp]
  040fc	e59f002c	 ldr         r0, [pc, #0x2C]
  04100	eb000000	 bl          NKDbgPrintfW
  04104	e3a03001	 mov         r3, #1
  04108	e58d3034	 str         r3, [sp, #0x34]
  0410c	ea000001	 b           |$LN37@HWGetInter|
  04110		 |$LN36@HWGetInter|
  04110	e3a03000	 mov         r3, #0
  04114	e58d3034	 str         r3, [sp, #0x34]
  04118		 |$LN37@HWGetInter|

; 2534 :     return type;

  04118	e59d3000	 ldr         r3, [sp]
  0411c	e58d3010	 str         r3, [sp, #0x10]

; 2535 : }

  04120	e59d0010	 ldr         r0, [sp, #0x10]
  04124	e28dd038	 add         sp, sp, #0x38
  04128	e89d6000	 ldmia       sp, {sp, lr}
  0412c	e12fff1e	 bx          lr
  04130		 |$LN64@HWGetInter|
  04130		 |$LN65@HWGetInter|
  04130	00000000	 DCD         |??_C@_1FO@HFMDICAM@?$AA?9?$AAH?$AAW?$AAG?$AAe?$AAt?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAT?$AAy?$AAp?$AAe?$AA?$CI?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AAc@|
  04134		 |$LN66@HWGetInter|
  04134	00000000	 DCD         |dpCurSettings|
  04138		 |$LN67@HWGetInter|
  04138	00000000	 DCD         |??_C@_1FM@CAOHIIKO@?$AA?$CL?$AAH?$AAW?$AAG?$AAe?$AAt?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAT?$AAy?$AAp?$AAe?$AA?5?$AAS?$AAt?$AAa?$AAr?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAD?$AAM?$AAA@|
  0413c		 |$LN68@HWGetInter|
  0413c	00000000	 DCD         |??_C@_1FI@GFENDDOO@?$AA?$CL?$AAH?$AAW?$AAG?$AAe?$AAt?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAT?$AAy?$AAp?$AAe?$AA?5?$AAS?$AAt?$AAa?$AAr?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAD?$AAM?$AAA@|
  04140		 |$LN69@HWGetInter|
  04140	00000000	 DCD         |??_C@_1HC@OPJAIOBG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAH?$AAW?$AAG?$AAe?$AAt?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAT?$AAy?$AAp?$AAe?$AA?3?$AA?5?$AAU?$AAp?$AAd?$AAa?$AAt@|
  04144		 |$M47130|

			 ENDP  ; |HWGetInterruptType|

	EXPORT	|HWRxDMAIntr|

  000c8			 AREA	 |.pdata|, PDATA
|$T47146| DCD	|$LN22@HWRxDMAInt|
	DCD	0x4000a204
; Function compile flags: /Odtp

  04144			 AREA	 |.text|, CODE, ARM

  04144		 |HWRxDMAIntr| PROC

; 2549 : {

  04144		 |$LN22@HWRxDMAInt|
  04144	e1a0c00d	 mov         r12, sp
  04148	e92d0007	 stmdb       sp!, {r0 - r2}
  0414c	e92d5000	 stmdb       sp!, {r12, lr}
  04150	e24dd024	 sub         sp, sp, #0x24
  04154		 |$M47143|

; 2550 :     UARTPDD *pPdd = (UARTPDD *)pvContext;

  04154	e59d302c	 ldr         r3, [sp, #0x2C]
  04158	e58d3010	 str         r3, [sp, #0x10]

; 2551 :     //    OMAP_UART_REGS *pUartRegs = pPdd->pUartRegs;
; 2552 :     UCHAR lineStat = 0;

  0415c	e3a03000	 mov         r3, #0
  04160	e5cd3008	 strb        r3, [sp, #8]

; 2553 :     ULONG count = *pLength;

  04164	e59d3034	 ldr         r3, [sp, #0x34]
  04168	e5933000	 ldr         r3, [r3]
  0416c	e58d3000	 str         r3, [sp]

; 2554 :     UCHAR *pCurrentDMAPos;
; 2555 :     ULONG i;
; 2556 :     //  PHW_INDEP_INFO  pSerialHead = (PHW_INDEP_INFO)pPdd->pMdd;
; 2557 : 
; 2558 :     RETAILMSG(FALSE,(TEXT("HWRxDMAIntr pRxBuffer=0x%x pLength=%d\r\n"),
; 2559 :                 pRxBuffer,
; 2560 :                 *pLength));
; 2561 : 
; 2562 :     pCurrentDMAPos = pPdd->pRxDMALastWrite; // DmaGetLastWritePos(pPdd->RxDmaInfo);

  04170	e59d3010	 ldr         r3, [sp, #0x10]
  04174	e2833f53	 add         r3, r3, #0x53, 30
  04178	e5933000	 ldr         r3, [r3]
  0417c	e58d300c	 str         r3, [sp, #0xC]

; 2563 : 
; 2564 :     if(pCurrentDMAPos >= ((UCHAR*)pPdd->pRxDmaBuffer + pPdd->RxDmaBufferSize))

  04180	e59d3010	 ldr         r3, [sp, #0x10]
  04184	e2832f45	 add         r2, r3, #0x45, 30
  04188	e59d3010	 ldr         r3, [sp, #0x10]
  0418c	e2833e11	 add         r3, r3, #0x11, 28
  04190	e5922000	 ldr         r2, [r2]
  04194	e5933000	 ldr         r3, [r3]
  04198	e0822003	 add         r2, r2, r3
  0419c	e59d300c	 ldr         r3, [sp, #0xC]
  041a0	e1530002	 cmp         r3, r2
  041a4	3a000008	 bcc         |$LN15@HWRxDMAInt|

; 2565 :     {
; 2566 :         Sleep(0);

  041a8	e3a00000	 mov         r0, #0
  041ac	eb000000	 bl          Sleep

; 2567 :         pCurrentDMAPos = DmaGetLastWritePos(pPdd->RxDmaInfo);

  041b0	e59d3010	 ldr         r3, [sp, #0x10]
  041b4	e2833f49	 add         r3, r3, #0x49, 30
  041b8	e5930000	 ldr         r0, [r3]
  041bc	eb000000	 bl          DmaGetLastWritePos
  041c0	e58d0018	 str         r0, [sp, #0x18]
  041c4	e59d3018	 ldr         r3, [sp, #0x18]
  041c8	e58d300c	 str         r3, [sp, #0xC]
  041cc		 |$LN15@HWRxDMAInt|

; 2568 :     }
; 2569 :     if (pCurrentDMAPos >= pRxBuffer)

  041cc	e59d200c	 ldr         r2, [sp, #0xC]
  041d0	e59d3030	 ldr         r3, [sp, #0x30]
  041d4	e1520003	 cmp         r2, r3
  041d8	3a000011	 bcc         |$LN14@HWRxDMAInt|

; 2570 :     {
; 2571 :         if (pCurrentDMAPos >= ((UCHAR*)pPdd->pRxDmaBuffer + pPdd->RxDmaBufferSize))

  041dc	e59d3010	 ldr         r3, [sp, #0x10]
  041e0	e2832f45	 add         r2, r3, #0x45, 30
  041e4	e59d3010	 ldr         r3, [sp, #0x10]
  041e8	e2833e11	 add         r3, r3, #0x11, 28
  041ec	e5922000	 ldr         r2, [r2]
  041f0	e5933000	 ldr         r3, [r3]
  041f4	e0822003	 add         r2, r2, r3
  041f8	e59d300c	 ldr         r3, [sp, #0xC]
  041fc	e1530002	 cmp         r3, r2
  04200	3a000002	 bcc         |$LN13@HWRxDMAInt|

; 2572 :         {
; 2573 :             count = 0;

  04204	e3a03000	 mov         r3, #0
  04208	e58d3000	 str         r3, [sp]

; 2574 :         }
; 2575 :         else

  0420c	ea000003	 b           |$LN12@HWRxDMAInt|
  04210		 |$LN13@HWRxDMAInt|

; 2576 :         {
; 2577 :         count = pCurrentDMAPos - pRxBuffer;

  04210	e59d200c	 ldr         r2, [sp, #0xC]
  04214	e59d3030	 ldr         r3, [sp, #0x30]
  04218	e0423003	 sub         r3, r2, r3
  0421c	e58d3000	 str         r3, [sp]
  04220		 |$LN12@HWRxDMAInt|

; 2578 :     }
; 2579 :     }
; 2580 :     else

  04220	ea00000d	 b           |$LN11@HWRxDMAInt|
  04224		 |$LN14@HWRxDMAInt|

; 2581 :     {
; 2582 :         pPdd->bSendSignal = TRUE;

  04224	e59d3010	 ldr         r3, [sp, #0x10]
  04228	e2832f4d	 add         r2, r3, #0x4D, 30
  0422c	e3a03001	 mov         r3, #1
  04230	e5823000	 str         r3, [r2]

; 2583 :         count = pPdd->RxDmaBufferSize - (pRxBuffer - (UCHAR*)pPdd->pRxDmaBuffer);

  04234	e59d3010	 ldr         r3, [sp, #0x10]
  04238	e2831e11	 add         r1, r3, #0x11, 28
  0423c	e59d3010	 ldr         r3, [sp, #0x10]
  04240	e2833f45	 add         r3, r3, #0x45, 30
  04244	e59d2030	 ldr         r2, [sp, #0x30]
  04248	e5933000	 ldr         r3, [r3]
  0424c	e0422003	 sub         r2, r2, r3
  04250	e5913000	 ldr         r3, [r1]
  04254	e0433002	 sub         r3, r3, r2
  04258	e58d3000	 str         r3, [sp]
  0425c		 |$LN11@HWRxDMAInt|

; 2584 :     }
; 2585 : 
; 2586 :     // the mdd will specify maximum space available.  Since we don't account for
; 2587 :     // the last read position at the MDD layer don't go beyond what is in pLength
; 2588 :     *pLength = min(*pLength, count);

  0425c	e59d3034	 ldr         r3, [sp, #0x34]
  04260	e5932000	 ldr         r2, [r3]
  04264	e59d3000	 ldr         r3, [sp]
  04268	e1520003	 cmp         r2, r3
  0426c	2a000003	 bcs         |$LN18@HWRxDMAInt|
  04270	e59d3034	 ldr         r3, [sp, #0x34]
  04274	e5933000	 ldr         r3, [r3]
  04278	e58d301c	 str         r3, [sp, #0x1C]
  0427c	ea000001	 b           |$LN19@HWRxDMAInt|
  04280		 |$LN18@HWRxDMAInt|
  04280	e59d3000	 ldr         r3, [sp]
  04284	e58d301c	 str         r3, [sp, #0x1C]
  04288		 |$LN19@HWRxDMAInt|
  04288	e59d201c	 ldr         r2, [sp, #0x1C]
  0428c	e59d3034	 ldr         r3, [sp, #0x34]
  04290	e5832000	 str         r2, [r3]

; 2589 :     DEBUGMSG(TESTENABLE, (L"+HWRxDMAIntr Count= %d\r\n",count));
; 2590 :     // With DMA we lose synchronization with UART error to an individual byte
; 2591 :     // Could apply disposition to all bytes in buffer?
; 2592 :     if(pPdd->open == TRUE)

  04294	e59d3010	 ldr         r3, [sp, #0x10]
  04298	e2833054	 add         r3, r3, #0x54
  0429c	e5933000	 ldr         r3, [r3]
  042a0	e3530001	 cmp         r3, #1
  042a4	1a000004	 bne         |$LN10@HWRxDMAInt|

; 2593 :     {
; 2594 :         lineStat = ReadLineStat(pPdd);

  042a8	e59d0010	 ldr         r0, [sp, #0x10]
  042ac	eb000000	 bl          ReadLineStat
  042b0	e5cd0020	 strb        r0, [sp, #0x20]
  042b4	e5dd3020	 ldrb        r3, [sp, #0x20]
  042b8	e5cd3008	 strb        r3, [sp, #8]
  042bc		 |$LN10@HWRxDMAInt|

; 2595 :     }
; 2596 :     // Replace char with parity error
; 2597 :     if ((pPdd->dcb.fErrorChar != '\0') &&
; 2598 :         pPdd->dcb.fParity &&
; 2599 :         ((lineStat & UART_LSR_RX_PE) != 0))

  042bc	e59d3010	 ldr         r3, [sp, #0x10]
  042c0	e2833060	 add         r3, r3, #0x60
  042c4	e5933000	 ldr         r3, [r3]
  042c8	e3130b01	 tst         r3, #1, 22
  042cc	0a00001c	 beq         |$LN9@HWRxDMAInt|
  042d0	e59d3010	 ldr         r3, [sp, #0x10]
  042d4	e2833060	 add         r3, r3, #0x60
  042d8	e5933000	 ldr         r3, [r3]
  042dc	e3130002	 tst         r3, #2
  042e0	0a000017	 beq         |$LN9@HWRxDMAInt|
  042e4	e5dd3008	 ldrb        r3, [sp, #8]
  042e8	e3130004	 tst         r3, #4
  042ec	0a000014	 beq         |$LN9@HWRxDMAInt|

; 2600 :     {
; 2601 :         for (i=0; i < *pLength; i++)

  042f0	e3a03000	 mov         r3, #0
  042f4	e58d3004	 str         r3, [sp, #4]
  042f8	ea000002	 b           |$LN8@HWRxDMAInt|
  042fc		 |$LN7@HWRxDMAInt|
  042fc	e59d3004	 ldr         r3, [sp, #4]
  04300	e2833001	 add         r3, r3, #1
  04304	e58d3004	 str         r3, [sp, #4]
  04308		 |$LN8@HWRxDMAInt|
  04308	e59d2004	 ldr         r2, [sp, #4]
  0430c	e59d3034	 ldr         r3, [sp, #0x34]
  04310	e5933000	 ldr         r3, [r3]
  04314	e1520003	 cmp         r2, r3
  04318	2a000008	 bcs         |$LN6@HWRxDMAInt|

; 2602 :             *(pRxBuffer+i) = pPdd->dcb.ErrorChar;

  0431c	e59d3010	 ldr         r3, [sp, #0x10]
  04320	e283106f	 add         r1, r3, #0x6F
  04324	e59d2030	 ldr         r2, [sp, #0x30]
  04328	e59d3004	 ldr         r3, [sp, #4]
  0432c	e0822003	 add         r2, r2, r3
  04330	e1d130d0	 ldrsb       r3, [r1]
  04334	e20330ff	 and         r3, r3, #0xFF
  04338	e5c23000	 strb        r3, [r2]
  0433c	eaffffee	 b           |$LN7@HWRxDMAInt|
  04340		 |$LN6@HWRxDMAInt|

; 2603 :     }
; 2604 :     else

  04340	ea00001b	 b           |$LN5@HWRxDMAInt|
  04344		 |$LN9@HWRxDMAInt|

; 2605 :     {
; 2606 :         for (i=0; i < *pLength; i++)

  04344	e3a03000	 mov         r3, #0
  04348	e58d3004	 str         r3, [sp, #4]
  0434c	ea000002	 b           |$LN4@HWRxDMAInt|
  04350		 |$LN3@HWRxDMAInt|
  04350	e59d3004	 ldr         r3, [sp, #4]
  04354	e2833001	 add         r3, r3, #1
  04358	e58d3004	 str         r3, [sp, #4]
  0435c		 |$LN4@HWRxDMAInt|
  0435c	e59d2004	 ldr         r2, [sp, #4]
  04360	e59d3034	 ldr         r3, [sp, #0x34]
  04364	e5933000	 ldr         r3, [r3]
  04368	e1520003	 cmp         r2, r3
  0436c	2a000010	 bcs         |$LN2@HWRxDMAInt|

; 2607 :         {
; 2608 :             // See if we need to generate an EV_RXFLAG
; 2609 :             if (*(pRxBuffer+i) == pPdd->dcb.EvtChar)

  04370	e59d2030	 ldr         r2, [sp, #0x30]
  04374	e59d3004	 ldr         r3, [sp, #4]
  04378	e0823003	 add         r3, r2, r3
  0437c	e5d33000	 ldrb        r3, [r3]
  04380	e1a02003	 mov         r2, r3
  04384	e59d3010	 ldr         r3, [sp, #0x10]
  04388	e2833071	 add         r3, r3, #0x71
  0438c	e1d330d0	 ldrsb       r3, [r3]
  04390	e1520003	 cmp         r2, r3
  04394	1a000005	 bne         |$LN1@HWRxDMAInt|

; 2610 :             {
; 2611 :                 EvaluateEventFlag(pPdd->pMdd, EV_RXFLAG);

  04398	e3a01002	 mov         r1, #2
  0439c	e59d3010	 ldr         r3, [sp, #0x10]
  043a0	e2833050	 add         r3, r3, #0x50
  043a4	e5930000	 ldr         r0, [r3]
  043a8	eb000000	 bl          EvaluateEventFlag

; 2612 :                 break;

  043ac	ea000000	 b           |$LN2@HWRxDMAInt|
  043b0		 |$LN1@HWRxDMAInt|

; 2613 :             }
; 2614 :         }

  043b0	eaffffe6	 b           |$LN3@HWRxDMAInt|
  043b4		 |$LN2@HWRxDMAInt|
  043b4		 |$LN5@HWRxDMAInt|

; 2615 : 
; 2616 :     }
; 2617 : 
; 2618 :     return count;

  043b4	e59d3000	 ldr         r3, [sp]
  043b8	e58d3014	 str         r3, [sp, #0x14]

; 2619 : 
; 2620 : }

  043bc	e59d0014	 ldr         r0, [sp, #0x14]
  043c0	e28dd024	 add         sp, sp, #0x24
  043c4	e89d6000	 ldmia       sp, {sp, lr}
  043c8	e12fff1e	 bx          lr
  043cc		 |$M47144|

			 ENDP  ; |HWRxDMAIntr|

	EXPORT	|??_C@_1CM@NLCBMAPJ@?$AA?9?$AAR?$AAe?$AAa?$AAd?$AAL?$AAi?$AAn?$AAe?$AAS?$AAt?$AAa?$AAt?$AA?$CI?$AA?$CF?$AA0?$AA2?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GC@GMICEFNP@?$AAU?$AAA?$AAR?$AAT?$AA?$CB?$AAR?$AAe?$AAa?$AAd?$AAL?$AAi?$AAn?$AAe?$AAS?$AAt?$AAa?$AAt?$AA?3?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAd?$AAe?$AAt?$AAe?$AAc?$AAt?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CE@KCCAODEF@?$AA?$CL?$AAR?$AAe?$AAa?$AAd?$AAL?$AAi?$AAn?$AAe?$AAS?$AAt?$AAa?$AAt?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  000d0			 AREA	 |.pdata|, PDATA
|$T47158| DCD	|$LN18@ReadLineSt|
	DCD	0x40009704

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@NLCBMAPJ@?$AA?9?$AAR?$AAe?$AAa?$AAd?$AAL?$AAi?$AAn?$AAe?$AAS?$AAt?$AAa?$AAt?$AA?$CI?$AA?$CF?$AA0?$AA2?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "R", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, "L", 0x0, "i"
	DCB	0x0, "n", 0x0, "e", 0x0, "S", 0x0, "t", 0x0, "a", 0x0, "t"
	DCB	0x0, "(", 0x0, "%", 0x0, "0", 0x0, "2", 0x0, "x", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GC@GMICEFNP@?$AAU?$AAA?$AAR?$AAT?$AA?$CB?$AAR?$AAe?$AAa?$AAd?$AAL?$AAi?$AAn?$AAe?$AAS?$AAt?$AAa?$AAt?$AA?3?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAd?$AAe?$AAt?$AAe?$AAc?$AAt?$AAe@| DCB "U"
	DCB	0x0, "A", 0x0, "R", 0x0, "T", 0x0, "!", 0x0, "R", 0x0, "e"
	DCB	0x0, "a", 0x0, "d", 0x0, "L", 0x0, "i", 0x0, "n", 0x0, "e"
	DCB	0x0, "S", 0x0, "t", 0x0, "a", 0x0, "t", 0x0, ":", 0x0, " "
	DCB	0x0, "E", 0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, " "
	DCB	0x0, "d", 0x0, "e", 0x0, "t", 0x0, "e", 0x0, "c", 0x0, "t"
	DCB	0x0, "e", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "L", 0x0, "S"
	DCB	0x0, "R", 0x0, ":", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "2", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@KCCAODEF@?$AA?$CL?$AAR?$AAe?$AAa?$AAd?$AAL?$AAi?$AAn?$AAe?$AAS?$AAt?$AAa?$AAt?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "R", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, "L", 0x0, "i"
	DCB	0x0, "n", 0x0, "e", 0x0, "S", 0x0, "t", 0x0, "a", 0x0, "t"
	DCB	0x0, "(", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  043cc			 AREA	 |.text|, CODE, ARM

  043cc		 |ReadLineStat| PROC

; 679  : {

  043cc		 |$LN18@ReadLineSt|
  043cc	e1a0c00d	 mov         r12, sp
  043d0	e92d0001	 stmdb       sp!, {r0}
  043d4	e92d5000	 stmdb       sp!, {r12, lr}
  043d8	e24dd020	 sub         sp, sp, #0x20
  043dc		 |$M47155|

; 680  :     OMAP_UART_REGS *pUartRegs = pPdd->pUartRegs;

  043dc	e59d3028	 ldr         r3, [sp, #0x28]
  043e0	e2833024	 add         r3, r3, #0x24
  043e4	e5933000	 ldr         r3, [r3]
  043e8	e58d3008	 str         r3, [sp, #8]

; 681  :     ULONG events = 0;

  043ec	e3a03000	 mov         r3, #0
  043f0	e58d3000	 str         r3, [sp]

; 682  :     UCHAR lineStat = 0;

  043f4	e3a03000	 mov         r3, #0
  043f8	e5cd3004	 strb        r3, [sp, #4]

; 683  : 
; 684  :     DEBUGMSG(ZONE_FUNCTION, (TEXT("+ReadLineStat()\r\n")));

  043fc	e59f3218	 ldr         r3, [pc, #0x218]
  04400	e5933440	 ldr         r3, [r3, #0x440]
  04404	e3130a02	 tst         r3, #2, 20
  04408	0a000004	 beq         |$LN10@ReadLineSt|
  0440c	e59f0210	 ldr         r0, [pc, #0x210]
  04410	eb000000	 bl          NKDbgPrintfW
  04414	e3a03001	 mov         r3, #1
  04418	e58d3010	 str         r3, [sp, #0x10]
  0441c	ea000001	 b           |$LN11@ReadLineSt|
  04420		 |$LN10@ReadLineSt|
  04420	e3a03000	 mov         r3, #0
  04424	e58d3010	 str         r3, [sp, #0x10]
  04428		 |$LN11@ReadLineSt|

; 685  : 
; 686  :     if (pPdd->open == TRUE)

  04428	e59d3028	 ldr         r3, [sp, #0x28]
  0442c	e2833054	 add         r3, r3, #0x54
  04430	e5933000	 ldr         r3, [r3]
  04434	e3530001	 cmp         r3, #1
  04438	1a000064	 bne         |$LN7@ReadLineSt|

; 687  :     {
; 688  :         EnterCriticalSection(&pPdd->hwCS);

  0443c	e59d3028	 ldr         r3, [sp, #0x28]
  04440	e2830098	 add         r0, r3, #0x98
  04444	eb000000	 bl          EnterCriticalSection

; 689  : 
; 690  :         lineStat = INREG8(&pUartRegs->LSR);

  04448	e59d3008	 ldr         r3, [sp, #8]
  0444c	e2833014	 add         r3, r3, #0x14
  04450	e5d33000	 ldrb        r3, [r3]
  04454	e5cd3004	 strb        r3, [sp, #4]

; 691  :         if ((lineStat & UART_LSR_RX_FE) != 0)

  04458	e5dd3004	 ldrb        r3, [sp, #4]
  0445c	e3130008	 tst         r3, #8
  04460	0a000009	 beq         |$LN6@ReadLineSt|

; 692  :         {
; 693  :             pPdd->commErrors |= CE_FRAME;

  04464	e59d3028	 ldr         r3, [sp, #0x28]
  04468	e2833074	 add         r3, r3, #0x74
  0446c	e5933000	 ldr         r3, [r3]
  04470	e3832008	 orr         r2, r3, #8
  04474	e59d3028	 ldr         r3, [sp, #0x28]
  04478	e2833074	 add         r3, r3, #0x74
  0447c	e5832000	 str         r2, [r3]

; 694  :             events |= EV_ERR;

  04480	e59d3000	 ldr         r3, [sp]
  04484	e3833080	 orr         r3, r3, #0x80
  04488	e58d3000	 str         r3, [sp]
  0448c		 |$LN6@ReadLineSt|

; 695  :         }
; 696  :         if ((lineStat & UART_LSR_RX_PE) != 0)

  0448c	e5dd3004	 ldrb        r3, [sp, #4]
  04490	e3130004	 tst         r3, #4
  04494	0a000009	 beq         |$LN5@ReadLineSt|

; 697  :         {
; 698  :             pPdd->commErrors |= CE_RXPARITY;

  04498	e59d3028	 ldr         r3, [sp, #0x28]
  0449c	e2833074	 add         r3, r3, #0x74
  044a0	e5933000	 ldr         r3, [r3]
  044a4	e3832004	 orr         r2, r3, #4
  044a8	e59d3028	 ldr         r3, [sp, #0x28]
  044ac	e2833074	 add         r3, r3, #0x74
  044b0	e5832000	 str         r2, [r3]

; 699  :             events |= EV_ERR;

  044b4	e59d3000	 ldr         r3, [sp]
  044b8	e3833080	 orr         r3, r3, #0x80
  044bc	e58d3000	 str         r3, [sp]
  044c0		 |$LN5@ReadLineSt|

; 700  :         }
; 701  :         if ((lineStat & UART_LSR_RX_OE) != 0)

  044c0	e5dd3004	 ldrb        r3, [sp, #4]
  044c4	e3130002	 tst         r3, #2
  044c8	0a00001c	 beq         |$LN4@ReadLineSt|

; 702  :         {
; 703  :             pPdd->overrunCount++;

  044cc	e59d3028	 ldr         r3, [sp, #0x28]
  044d0	e2833078	 add         r3, r3, #0x78
  044d4	e5933000	 ldr         r3, [r3]
  044d8	e2832001	 add         r2, r3, #1
  044dc	e59d3028	 ldr         r3, [sp, #0x28]
  044e0	e2833078	 add         r3, r3, #0x78
  044e4	e5832000	 str         r2, [r3]

; 704  :             pPdd->commErrors |= CE_OVERRUN;

  044e8	e59d3028	 ldr         r3, [sp, #0x28]
  044ec	e2833074	 add         r3, r3, #0x74
  044f0	e5933000	 ldr         r3, [r3]
  044f4	e3832002	 orr         r2, r3, #2
  044f8	e59d3028	 ldr         r3, [sp, #0x28]
  044fc	e2833074	 add         r3, r3, #0x74
  04500	e5832000	 str         r2, [r3]

; 705  :             events |= EV_ERR;

  04504	e59d3000	 ldr         r3, [sp]
  04508	e3833080	 orr         r3, r3, #0x80
  0450c	e58d3000	 str         r3, [sp]

; 706  : 
; 707  :             // UART RX stops working after RX FIFO overrun, must clear RX FIFO and read RESUME register
; 708  :             OUTREG8(&pUartRegs->FCR, pPdd->CurrentFCR | UART_FCR_RX_FIFO_CLEAR);

  04510	e59d3028	 ldr         r3, [sp, #0x28]
  04514	e2833089	 add         r3, r3, #0x89
  04518	e5d33000	 ldrb        r3, [r3]
  0451c	e3833002	 orr         r3, r3, #2
  04520	e20320ff	 and         r2, r3, #0xFF
  04524	e59d3008	 ldr         r3, [sp, #8]
  04528	e2833008	 add         r3, r3, #8
  0452c	e5c32000	 strb        r2, [r3]

; 709  :             INREG8(&pUartRegs->RESUME);

  04530	e59d3008	 ldr         r3, [sp, #8]
  04534	e283302c	 add         r3, r3, #0x2C
  04538	e5d33000	 ldrb        r3, [r3]
  0453c	e5cd3014	 strb        r3, [sp, #0x14]
  04540		 |$LN4@ReadLineSt|

; 710  :         }
; 711  :         if ((lineStat & UART_LSR_RX_BI) != 0)

  04540	e5dd3004	 ldrb        r3, [sp, #4]
  04544	e3130010	 tst         r3, #0x10
  04548	0a000006	 beq         |$LN3@ReadLineSt|

; 712  :         {
; 713  :             events |= EV_BREAK;

  0454c	e59d3000	 ldr         r3, [sp]
  04550	e3833040	 orr         r3, r3, #0x40
  04554	e58d3000	 str         r3, [sp]

; 714  :             pPdd->bRxBreak = TRUE;

  04558	e59d3028	 ldr         r3, [sp, #0x28]
  0455c	e2832f5e	 add         r2, r3, #0x5E, 30
  04560	e3a03001	 mov         r3, #1
  04564	e5823000	 str         r3, [r2]
  04568		 |$LN3@ReadLineSt|

; 715  :         }
; 716  : 
; 717  :         LeaveCriticalSection(&pPdd->hwCS);

  04568	e59d3028	 ldr         r3, [sp, #0x28]
  0456c	e2830098	 add         r0, r3, #0x98
  04570	eb000000	 bl          LeaveCriticalSection

; 718  : 
; 719  :         if ((events & EV_ERR) != 0)

  04574	e59d3000	 ldr         r3, [sp]
  04578	e3130080	 tst         r3, #0x80
  0457c	0a00000b	 beq         |$LN2@ReadLineSt|

; 720  :         {
; 721  :             DEBUGMSG(ZONE_ERROR, (
; 722  :                 L"UART!ReadLineStat: Error detected, LSR: 0x%02x\r\n", lineStat
; 723  :                 ));

  04580	e59f3094	 ldr         r3, [pc, #0x94]
  04584	e5933440	 ldr         r3, [r3, #0x440]
  04588	e3130902	 tst         r3, #2, 18
  0458c	0a000005	 beq         |$LN12@ReadLineSt|
  04590	e5dd1004	 ldrb        r1, [sp, #4]
  04594	e59f0084	 ldr         r0, [pc, #0x84]
  04598	eb000000	 bl          NKDbgPrintfW
  0459c	e3a03001	 mov         r3, #1
  045a0	e58d3018	 str         r3, [sp, #0x18]
  045a4	ea000001	 b           |$LN13@ReadLineSt|
  045a8		 |$LN12@ReadLineSt|
  045a8	e3a03000	 mov         r3, #0
  045ac	e58d3018	 str         r3, [sp, #0x18]
  045b0		 |$LN13@ReadLineSt|
  045b0		 |$LN2@ReadLineSt|

; 724  :         }
; 725  : 
; 726  :         // Let MDD know if something happen
; 727  :         if (events != 0) EvaluateEventFlag(pPdd->pMdd, events);

  045b0	e59d3000	 ldr         r3, [sp]
  045b4	e3530000	 cmp         r3, #0
  045b8	0a000004	 beq         |$LN1@ReadLineSt|
  045bc	e59d1000	 ldr         r1, [sp]
  045c0	e59d3028	 ldr         r3, [sp, #0x28]
  045c4	e2833050	 add         r3, r3, #0x50
  045c8	e5930000	 ldr         r0, [r3]
  045cc	eb000000	 bl          EvaluateEventFlag
  045d0		 |$LN1@ReadLineSt|
  045d0		 |$LN7@ReadLineSt|

; 728  :     }
; 729  : 
; 730  :     DEBUGMSG(ZONE_FUNCTION, (TEXT("-ReadLineStat(%02x)\r\n"), lineStat));

  045d0	e59f3044	 ldr         r3, [pc, #0x44]
  045d4	e5933440	 ldr         r3, [r3, #0x440]
  045d8	e3130a02	 tst         r3, #2, 20
  045dc	0a000005	 beq         |$LN14@ReadLineSt|
  045e0	e5dd1004	 ldrb        r1, [sp, #4]
  045e4	e59f002c	 ldr         r0, [pc, #0x2C]
  045e8	eb000000	 bl          NKDbgPrintfW
  045ec	e3a03001	 mov         r3, #1
  045f0	e58d301c	 str         r3, [sp, #0x1C]
  045f4	ea000001	 b           |$LN15@ReadLineSt|
  045f8		 |$LN14@ReadLineSt|
  045f8	e3a03000	 mov         r3, #0
  045fc	e58d301c	 str         r3, [sp, #0x1C]
  04600		 |$LN15@ReadLineSt|

; 731  :     return lineStat;

  04600	e5dd3004	 ldrb        r3, [sp, #4]
  04604	e5cd300c	 strb        r3, [sp, #0xC]

; 732  : }

  04608	e5dd000c	 ldrb        r0, [sp, #0xC]
  0460c	e28dd020	 add         sp, sp, #0x20
  04610	e89d6000	 ldmia       sp, {sp, lr}
  04614	e12fff1e	 bx          lr
  04618		 |$LN19@ReadLineSt|
  04618		 |$LN20@ReadLineSt|
  04618	00000000	 DCD         |??_C@_1CM@NLCBMAPJ@?$AA?9?$AAR?$AAe?$AAa?$AAd?$AAL?$AAi?$AAn?$AAe?$AAS?$AAt?$AAa?$AAt?$AA?$CI?$AA?$CF?$AA0?$AA2?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  0461c		 |$LN21@ReadLineSt|
  0461c	00000000	 DCD         |dpCurSettings|
  04620		 |$LN22@ReadLineSt|
  04620	00000000	 DCD         |??_C@_1GC@GMICEFNP@?$AAU?$AAA?$AAR?$AAT?$AA?$CB?$AAR?$AAe?$AAa?$AAd?$AAL?$AAi?$AAn?$AAe?$AAS?$AAt?$AAa?$AAt?$AA?3?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAd?$AAe?$AAt?$AAe?$AAc?$AAt?$AAe@|
  04624		 |$LN23@ReadLineSt|
  04624	00000000	 DCD         |??_C@_1CE@KCCAODEF@?$AA?$CL?$AAR?$AAe?$AAa?$AAd?$AAL?$AAi?$AAn?$AAe?$AAS?$AAt?$AAa?$AAt?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  04628		 |$M47156|

			 ENDP  ; |ReadLineStat|

	EXPORT	|HWRxNoDMAIntr|

  000d8			 AREA	 |.pdata|, PDATA
|$T47173| DCD	|$LN17@HWRxNoDMAI|
	DCD	0x40007e04
; Function compile flags: /Odtp

  04628			 AREA	 |.text|, CODE, ARM

  04628		 |HWRxNoDMAIntr| PROC

; 2625 : {

  04628		 |$LN17@HWRxNoDMAI|
  04628	e1a0c00d	 mov         r12, sp
  0462c	e92d0007	 stmdb       sp!, {r0 - r2}
  04630	e92d5000	 stmdb       sp!, {r12, lr}
  04634	e24dd028	 sub         sp, sp, #0x28
  04638		 |$M47170|

; 2626 :     UARTPDD *pPdd = (UARTPDD *)pvContext;

  04638	e59d3030	 ldr         r3, [sp, #0x30]
  0463c	e58d3018	 str         r3, [sp, #0x18]

; 2627 :     OMAP_UART_REGS *pUartRegs = pPdd->pUartRegs;

  04640	e59d3018	 ldr         r3, [sp, #0x18]
  04644	e2833024	 add         r3, r3, #0x24
  04648	e5933000	 ldr         r3, [r3]
  0464c	e58d300c	 str         r3, [sp, #0xC]

; 2628 :     ULONG count = *pLength;

  04650	e59d3038	 ldr         r3, [sp, #0x38]
  04654	e5933000	 ldr         r3, [r3]
  04658	e58d3000	 str         r3, [sp]

; 2629 :     UCHAR lineStat, rxChar;
; 2630 :     BOOL rxFlag, replaceParityError;
; 2631 : 
; 2632 :     *pLength = 0;

  0465c	e59d2038	 ldr         r2, [sp, #0x38]
  04660	e3a03000	 mov         r3, #0
  04664	e5823000	 str         r3, [r2]

; 2633 :     rxFlag = FALSE;

  04668	e3a03000	 mov         r3, #0
  0466c	e58d3010	 str         r3, [sp, #0x10]

; 2634 :     replaceParityError = (pPdd->dcb.fErrorChar != '\0') && pPdd->dcb.fParity;

  04670	e59d3018	 ldr         r3, [sp, #0x18]
  04674	e2833060	 add         r3, r3, #0x60
  04678	e5933000	 ldr         r3, [r3]
  0467c	e3130b01	 tst         r3, #1, 22
  04680	0a000007	 beq         |$LN11@HWRxNoDMAI|
  04684	e59d3018	 ldr         r3, [sp, #0x18]
  04688	e2833060	 add         r3, r3, #0x60
  0468c	e5933000	 ldr         r3, [r3]
  04690	e3130002	 tst         r3, #2
  04694	0a000002	 beq         |$LN11@HWRxNoDMAI|
  04698	e3a03001	 mov         r3, #1
  0469c	e58d3020	 str         r3, [sp, #0x20]
  046a0	ea000001	 b           |$LN12@HWRxNoDMAI|
  046a4		 |$LN11@HWRxNoDMAI|
  046a4	e3a03000	 mov         r3, #0
  046a8	e58d3020	 str         r3, [sp, #0x20]
  046ac		 |$LN12@HWRxNoDMAI|
  046ac	e59d3020	 ldr         r3, [sp, #0x20]
  046b0	e58d3004	 str         r3, [sp, #4]

; 2635 :     SetAutoIdle(pPdd, TRUE);

  046b4	e3a01001	 mov         r1, #1
  046b8	e59d0018	 ldr         r0, [sp, #0x18]
  046bc	eb000000	 bl          SetAutoIdle
  046c0		 |$LN14@HWRxNoDMAI|
  046c0		 |$LN13@HWRxNoDMAI|
  046c0		 |$LN8@HWRxNoDMAI|

; 2636 :     while (count > 0)

  046c0	e59d3000	 ldr         r3, [sp]
  046c4	e3530000	 cmp         r3, #0
  046c8	9a000043	 bls         |$LN7@HWRxNoDMAI|

; 2637 :     {
; 2638 :         // Get line status register
; 2639 :         lineStat = ReadLineStat(pPdd);

  046cc	e59d0018	 ldr         r0, [sp, #0x18]
  046d0	eb000000	 bl          ReadLineStat
  046d4	e5cd0024	 strb        r0, [sp, #0x24]
  046d8	e5dd3024	 ldrb        r3, [sp, #0x24]
  046dc	e5cd3008	 strb        r3, [sp, #8]

; 2640 :         // If there isn't more chars exit loop
; 2641 :         if ((lineStat & UART_LSR_RX_FIFO_E) == 0) break;

  046e0	e5dd3008	 ldrb        r3, [sp, #8]
  046e4	e3130001	 tst         r3, #1
  046e8	1a000000	 bne         |$LN6@HWRxNoDMAI|
  046ec	ea00003a	 b           |$LN7@HWRxNoDMAI|
  046f0		 |$LN6@HWRxNoDMAI|

; 2642 : 
; 2643 :         // Get received char
; 2644 :         rxChar = INREG8(&pUartRegs->RHR);

  046f0	e59d300c	 ldr         r3, [sp, #0xC]
  046f4	e5d33000	 ldrb        r3, [r3]
  046f8	e5cd3014	 strb        r3, [sp, #0x14]

; 2645 :         // Ignore char in DSR is low and we care about it
; 2646 :         if (pPdd->dcb.fDsrSensitivity &&
; 2647 :             ((ReadModemStat(pPdd) & UART_MSR_NDSR) == 0))

  046fc	e59d3018	 ldr         r3, [sp, #0x18]
  04700	e2833060	 add         r3, r3, #0x60
  04704	e5933000	 ldr         r3, [r3]
  04708	e3130040	 tst         r3, #0x40
  0470c	0a000006	 beq         |$LN5@HWRxNoDMAI|
  04710	e59d0018	 ldr         r0, [sp, #0x18]
  04714	eb000000	 bl          ReadModemStat
  04718	e5cd0025	 strb        r0, [sp, #0x25]
  0471c	e5dd3025	 ldrb        r3, [sp, #0x25]
  04720	e3130020	 tst         r3, #0x20
  04724	1a000000	 bne         |$LN5@HWRxNoDMAI|

; 2648 :         {
; 2649 :             continue;

  04728	eaffffe4	 b           |$LN8@HWRxNoDMAI|
  0472c		 |$LN5@HWRxNoDMAI|

; 2650 :         }
; 2651 : 
; 2652 :         // Ignore NUL char if requested
; 2653 :         if ((rxChar == '\0') && pPdd->dcb.fNull) continue;

  0472c	e5dd3014	 ldrb        r3, [sp, #0x14]
  04730	e3530000	 cmp         r3, #0
  04734	1a000005	 bne         |$LN4@HWRxNoDMAI|
  04738	e59d3018	 ldr         r3, [sp, #0x18]
  0473c	e2833060	 add         r3, r3, #0x60
  04740	e5933000	 ldr         r3, [r3]
  04744	e3130b02	 tst         r3, #2, 22
  04748	0a000000	 beq         |$LN4@HWRxNoDMAI|
  0474c	eaffffdb	 b           |$LN13@HWRxNoDMAI|
  04750		 |$LN4@HWRxNoDMAI|

; 2654 : 
; 2655 :         // Replace char with parity error
; 2656 :         if (replaceParityError && ((lineStat & UART_LSR_RX_PE) != 0))

  04750	e59d3004	 ldr         r3, [sp, #4]
  04754	e3530000	 cmp         r3, #0
  04758	0a000007	 beq         |$LN3@HWRxNoDMAI|
  0475c	e5dd3008	 ldrb        r3, [sp, #8]
  04760	e3130004	 tst         r3, #4
  04764	0a000004	 beq         |$LN3@HWRxNoDMAI|

; 2657 :         {
; 2658 :             rxChar = pPdd->dcb.ErrorChar;

  04768	e59d3018	 ldr         r3, [sp, #0x18]
  0476c	e283306f	 add         r3, r3, #0x6F
  04770	e1d330d0	 ldrsb       r3, [r3]
  04774	e20330ff	 and         r3, r3, #0xFF
  04778	e5cd3014	 strb        r3, [sp, #0x14]
  0477c		 |$LN3@HWRxNoDMAI|

; 2659 :         }
; 2660 :         // See if we need to generate an EV_RXFLAG
; 2661 :         if (rxChar == pPdd->dcb.EvtChar) rxFlag = TRUE;

  0477c	e5dd3014	 ldrb        r3, [sp, #0x14]
  04780	e1a02003	 mov         r2, r3
  04784	e59d3018	 ldr         r3, [sp, #0x18]
  04788	e2833071	 add         r3, r3, #0x71
  0478c	e1d330d0	 ldrsb       r3, [r3]
  04790	e1520003	 cmp         r2, r3
  04794	1a000001	 bne         |$LN2@HWRxNoDMAI|
  04798	e3a03001	 mov         r3, #1
  0479c	e58d3010	 str         r3, [sp, #0x10]
  047a0		 |$LN2@HWRxNoDMAI|

; 2662 : 
; 2663 :         // Store it to buffer
; 2664 :         *pRxBuffer++ = rxChar;

  047a0	e5dd2014	 ldrb        r2, [sp, #0x14]
  047a4	e59d3034	 ldr         r3, [sp, #0x34]
  047a8	e5c32000	 strb        r2, [r3]
  047ac	e59d3034	 ldr         r3, [sp, #0x34]
  047b0	e2833001	 add         r3, r3, #1
  047b4	e58d3034	 str         r3, [sp, #0x34]

; 2665 :         (*pLength)++;

  047b8	e59d3038	 ldr         r3, [sp, #0x38]
  047bc	e5933000	 ldr         r3, [r3]
  047c0	e2832001	 add         r2, r3, #1
  047c4	e59d3038	 ldr         r3, [sp, #0x38]
  047c8	e5832000	 str         r2, [r3]

; 2666 :         count--;

  047cc	e59d3000	 ldr         r3, [sp]
  047d0	e2433001	 sub         r3, r3, #1
  047d4	e58d3000	 str         r3, [sp]

; 2667 :     }

  047d8	eaffffb8	 b           |$LN14@HWRxNoDMAI|
  047dc		 |$LN7@HWRxNoDMAI|

; 2668 :     SetAutoIdle(pPdd, FALSE);

  047dc	e3a01000	 mov         r1, #0
  047e0	e59d0018	 ldr         r0, [sp, #0x18]
  047e4	eb000000	 bl          SetAutoIdle

; 2669 : 
; 2670 :     // Send event to MDD
; 2671 :     if (rxFlag) EvaluateEventFlag(pPdd->pMdd, EV_RXFLAG);

  047e8	e59d3010	 ldr         r3, [sp, #0x10]
  047ec	e3530000	 cmp         r3, #0
  047f0	0a000004	 beq         |$LN1@HWRxNoDMAI|
  047f4	e3a01002	 mov         r1, #2
  047f8	e59d3018	 ldr         r3, [sp, #0x18]
  047fc	e2833050	 add         r3, r3, #0x50
  04800	e5930000	 ldr         r0, [r3]
  04804	eb000000	 bl          EvaluateEventFlag
  04808		 |$LN1@HWRxNoDMAI|

; 2672 : 
; 2673 :     return count;

  04808	e59d3000	 ldr         r3, [sp]
  0480c	e58d301c	 str         r3, [sp, #0x1C]

; 2674 : }

  04810	e59d001c	 ldr         r0, [sp, #0x1C]
  04814	e28dd028	 add         sp, sp, #0x28
  04818	e89d6000	 ldmia       sp, {sp, lr}
  0481c	e12fff1e	 bx          lr
  04820		 |$M47171|

			 ENDP  ; |HWRxNoDMAIntr|

	EXPORT	|??_C@_1EK@HPJJCOID@?$AA?9?$AAH?$AAW?$AAR?$AAx?$AAI?$AAn?$AAt?$AAr?$AA?$CI?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DN?$AA?5?$AA?$CF@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EA@MCMAAOCP@?$AA?$CL?$AAH?$AAW?$AAR?$AAx?$AAI?$AAn?$AAt?$AAr?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  000e0			 AREA	 |.pdata|, PDATA
|$T47183| DCD	|$LN13@HWRxIntr|
	DCD	0x40005e04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EK@HPJJCOID@?$AA?9?$AAH?$AAW?$AAR?$AAx?$AAI?$AAn?$AAt?$AAr?$AA?$CI?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DN?$AA?5?$AA?$CF@| DCB "-"
	DCB	0x0, "H", 0x0, "W", 0x0, "R", 0x0, "x", 0x0, "I", 0x0, "n"
	DCB	0x0, "t", 0x0, "r", 0x0, "(", 0x0, "c", 0x0, "o", 0x0, "u"
	DCB	0x0, "n", 0x0, "t", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, ",", 0x0, " ", 0x0, "l", 0x0, "e", 0x0, "n"
	DCB	0x0, "g", 0x0, "t", 0x0, "h", 0x0, " ", 0x0, "=", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@MCMAAOCP@?$AA?$CL?$AAH?$AAW?$AAR?$AAx?$AAI?$AAn?$AAt?$AAr?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "H", 0x0, "W", 0x0, "R", 0x0, "x", 0x0, "I", 0x0, "n"
	DCB	0x0, "t", 0x0, "r", 0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "8", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ","
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  04820			 AREA	 |.text|, CODE, ARM

  04820		 |HWRxIntr| PROC

; 2688 : {

  04820		 |$LN13@HWRxIntr|
  04820	e1a0c00d	 mov         r12, sp
  04824	e92d0007	 stmdb       sp!, {r0 - r2}
  04828	e92d5000	 stmdb       sp!, {r12, lr}
  0482c	e24dd014	 sub         sp, sp, #0x14
  04830		 |$M47180|

; 2689 :     UARTPDD *pPdd = (UARTPDD *)pvContext;

  04830	e59d301c	 ldr         r3, [sp, #0x1C]
  04834	e58d3004	 str         r3, [sp, #4]

; 2690 :     ULONG count;
; 2691 :     DEBUGMSG(ZONE_THREAD, (
; 2692 :         L"+HWRxIntr(0x%08x, 0x%08x, %d)\r\n", pvContext, pRxBuffer,
; 2693 :         *pLength
; 2694 :         ));

  04838	e59f3150	 ldr         r3, [pc, #0x150]
  0483c	e5933440	 ldr         r3, [r3, #0x440]
  04840	e3130040	 tst         r3, #0x40
  04844	0a000008	 beq         |$LN7@HWRxIntr|
  04848	e59d3024	 ldr         r3, [sp, #0x24]
  0484c	e5933000	 ldr         r3, [r3]
  04850	e59d2020	 ldr         r2, [sp, #0x20]
  04854	e59d101c	 ldr         r1, [sp, #0x1C]
  04858	e59f0134	 ldr         r0, [pc, #0x134]
  0485c	eb000000	 bl          NKDbgPrintfW
  04860	e3a03001	 mov         r3, #1
  04864	e58d300c	 str         r3, [sp, #0xC]
  04868	ea000001	 b           |$LN8@HWRxIntr|
  0486c		 |$LN7@HWRxIntr|
  0486c	e3a03000	 mov         r3, #0
  04870	e58d300c	 str         r3, [sp, #0xC]
  04874		 |$LN8@HWRxIntr|

; 2695 : 
; 2696 : 
; 2697 :     // Somehow BT driver was trying to read data after setting the UART to D3 and causing
; 2698 :     // UART driver to crash in this routine. Check the power state before doing anything.
; 2699 :     if (pPdd->currentDX >= D3)

  04874	e59d3004	 ldr         r3, [sp, #4]
  04878	e2833030	 add         r3, r3, #0x30
  0487c	e5933000	 ldr         r3, [r3]
  04880	e3530003	 cmp         r3, #3
  04884	ba000005	 blt         |$LN4@HWRxIntr|

; 2700 :     {
; 2701 :         *pLength = 0;

  04888	e59d2024	 ldr         r2, [sp, #0x24]
  0488c	e3a03000	 mov         r3, #0
  04890	e5823000	 str         r3, [r2]

; 2702 :         count = 0;

  04894	e3a03000	 mov         r3, #0
  04898	e58d3000	 str         r3, [sp]

; 2703 :         goto cleanUp;

  0489c	ea000026	 b           |$cleanUp$45707|
  048a0		 |$LN4@HWRxIntr|

; 2704 :     }
; 2705 : 
; 2706 :     // Check to see if we are in wake up mode. If so we will
; 2707 :     // just report one character we have received a byte.
; 2708 :     if (pPdd->wakeUpMode)

  048a0	e59d3004	 ldr         r3, [sp, #4]
  048a4	e2833080	 add         r3, r3, #0x80
  048a8	e5933000	 ldr         r3, [r3]
  048ac	e3530000	 cmp         r3, #0
  048b0	0a00000b	 beq         |$LN3@HWRxIntr|

; 2709 :     {
; 2710 :         *pRxBuffer = (UCHAR)pPdd->wakeUpChar;

  048b4	e59d3004	 ldr         r3, [sp, #4]
  048b8	e283301c	 add         r3, r3, #0x1C
  048bc	e5933000	 ldr         r3, [r3]
  048c0	e20320ff	 and         r2, r3, #0xFF
  048c4	e59d3020	 ldr         r3, [sp, #0x20]
  048c8	e5c32000	 strb        r2, [r3]

; 2711 :         *pLength = 1;

  048cc	e59d2024	 ldr         r2, [sp, #0x24]
  048d0	e3a03001	 mov         r3, #1
  048d4	e5823000	 str         r3, [r2]

; 2712 :         count = 0;

  048d8	e3a03000	 mov         r3, #0
  048dc	e58d3000	 str         r3, [sp]

; 2713 :         goto cleanUp;

  048e0	ea000015	 b           |$cleanUp$45707|
  048e4		 |$LN3@HWRxIntr|

; 2714 :     }
; 2715 : 
; 2716 :     if (pPdd->RxDmaInfo)

  048e4	e59d3004	 ldr         r3, [sp, #4]
  048e8	e2833f49	 add         r3, r3, #0x49, 30
  048ec	e5933000	 ldr         r3, [r3]
  048f0	e3530000	 cmp         r3, #0
  048f4	0a000004	 beq         |$LN2@HWRxIntr|

; 2717 :         HWRxDMAIntr(pvContext, pRxBuffer, pLength);

  048f8	e59d2024	 ldr         r2, [sp, #0x24]
  048fc	e59d1020	 ldr         r1, [sp, #0x20]
  04900	e59d001c	 ldr         r0, [sp, #0x1C]
  04904	eb000000	 bl          HWRxDMAIntr

; 2718 :     else

  04908	ea000003	 b           |$LN1@HWRxIntr|
  0490c		 |$LN2@HWRxIntr|

; 2719 :         HWRxNoDMAIntr(pvContext, pRxBuffer, pLength);

  0490c	e59d2024	 ldr         r2, [sp, #0x24]
  04910	e59d1020	 ldr         r1, [sp, #0x20]
  04914	e59d001c	 ldr         r0, [sp, #0x1C]
  04918	eb000000	 bl          HWRxNoDMAIntr
  0491c		 |$LN1@HWRxIntr|

; 2720 : 
; 2721 :     // Clear overrun counter and use this value as return code
; 2722 :     count = pPdd->overrunCount;

  0491c	e59d3004	 ldr         r3, [sp, #4]
  04920	e2833078	 add         r3, r3, #0x78
  04924	e5933000	 ldr         r3, [r3]
  04928	e58d3000	 str         r3, [sp]

; 2723 :     pPdd->overrunCount = 0;

  0492c	e59d3004	 ldr         r3, [sp, #4]
  04930	e2832078	 add         r2, r3, #0x78
  04934	e3a03000	 mov         r3, #0
  04938	e5823000	 str         r3, [r2]
  0493c		 |$cleanUp$45707|

; 2724 : 
; 2725 : cleanUp:
; 2726 :     DEBUGMSG(ZONE_THREAD, (
; 2727 :         L"-HWRxIntr(count = %d, length = %d)\r\n", count, *pLength
; 2728 :         ));

  0493c	e59f304c	 ldr         r3, [pc, #0x4C]
  04940	e5933440	 ldr         r3, [r3, #0x440]
  04944	e3130040	 tst         r3, #0x40
  04948	0a000007	 beq         |$LN9@HWRxIntr|
  0494c	e59d3024	 ldr         r3, [sp, #0x24]
  04950	e5932000	 ldr         r2, [r3]
  04954	e59d1000	 ldr         r1, [sp]
  04958	e59f002c	 ldr         r0, [pc, #0x2C]
  0495c	eb000000	 bl          NKDbgPrintfW
  04960	e3a03001	 mov         r3, #1
  04964	e58d3010	 str         r3, [sp, #0x10]
  04968	ea000001	 b           |$LN10@HWRxIntr|
  0496c		 |$LN9@HWRxIntr|
  0496c	e3a03000	 mov         r3, #0
  04970	e58d3010	 str         r3, [sp, #0x10]
  04974		 |$LN10@HWRxIntr|

; 2729 :     return count;

  04974	e59d3000	 ldr         r3, [sp]
  04978	e58d3008	 str         r3, [sp, #8]

; 2730 : }

  0497c	e59d0008	 ldr         r0, [sp, #8]
  04980	e28dd014	 add         sp, sp, #0x14
  04984	e89d6000	 ldmia       sp, {sp, lr}
  04988	e12fff1e	 bx          lr
  0498c		 |$LN14@HWRxIntr|
  0498c		 |$LN15@HWRxIntr|
  0498c	00000000	 DCD         |??_C@_1EK@HPJJCOID@?$AA?9?$AAH?$AAW?$AAR?$AAx?$AAI?$AAn?$AAt?$AAr?$AA?$CI?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DN?$AA?5?$AA?$CF@|
  04990		 |$LN16@HWRxIntr|
  04990	00000000	 DCD         |dpCurSettings|
  04994		 |$LN17@HWRxIntr|
  04994	00000000	 DCD         |??_C@_1EA@MCMAAOCP@?$AA?$CL?$AAH?$AAW?$AAR?$AAx?$AAI?$AAn?$AAt?$AAr?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  04998		 |$M47181|

			 ENDP  ; |HWRxIntr|

	EXPORT	|??_C@_1DG@FBMJIMJD@?$AA?9?$AAH?$AAW?$AAT?$AAx?$AAI?$AAn?$AAt?$AAr?$AA?$CI?$AA?$CK?$AAp?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DA@OODNCMGJ@?$AAT?$AAX?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?5?$AAi?$AAs?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IC@MEFBLOON@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAI?$AAS?$AAT?$AA_?$AAT?$AAx?$AAD?$AAM?$AAA?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAS?$AAi?$AAg?$AAn@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CC@PKKAGKLP@?$AAT?$AAX?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CA@GNIAGCLB@?$AAT?$AAX?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DE@BIEHKFMC@?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAs?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?5?$AAi?$AAs?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GM@FFDJCNJM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAS?$AAi?$AAg?$AAn?$AAa?$AAl?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAT?$AAX?$AA?5?$AAi@| [ DATA ] ; `string'
	EXPORT	|PulseEvent|
	EXPORT	|??_C@_1EA@KHCDCJAE@?$AA?$CL?$AAH?$AAW?$AAT?$AAx?$AAI?$AAn?$AAt?$AAr?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|CeSafeCopyMemory|

  000e8			 AREA	 |.pdata|, PDATA
|$T47200| DCD	|$LN38@HWTxIntr|
	DCD	0x4001ef04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DG@FBMJIMJD@?$AA?9?$AAH?$AAW?$AAT?$AAx?$AAI?$AAn?$AAt?$AAr?$AA?$CI?$AA?$CK?$AAp?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "H", 0x0, "W", 0x0, "T", 0x0, "x", 0x0, "I", 0x0, "n"
	DCB	0x0, "t", 0x0, "r", 0x0, "(", 0x0, "*", 0x0, "p", 0x0, "L"
	DCB	0x0, "e", 0x0, "n", 0x0, "g", 0x0, "t", 0x0, "h", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@OODNCMGJ@?$AAT?$AAX?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?5?$AAi?$AAs?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "T"
	DCB	0x0, "X", 0x0, " ", 0x0, "D", 0x0, "M", 0x0, "A", 0x0, " "
	DCB	0x0, "S", 0x0, "t", 0x0, "a", 0x0, "t", 0x0, "u", 0x0, "s"
	DCB	0x0, " ", 0x0, "i", 0x0, "s", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IC@MEFBLOON@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAI?$AAS?$AAT?$AA_?$AAT?$AAx?$AAD?$AAM?$AAA?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAS?$AAi?$AAg?$AAn@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "I", 0x0, "S", 0x0, "T", 0x0, "_", 0x0, "T", 0x0, "x"
	DCB	0x0, "D", 0x0, "M", 0x0, "A", 0x0, ":", 0x0, " ", 0x0, "F"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "t", 0x0, "o", 0x0, " ", 0x0, "S", 0x0, "i", 0x0, "g"
	DCB	0x0, "n", 0x0, "a", 0x0, "l", 0x0, " ", 0x0, "D", 0x0, "M"
	DCB	0x0, "A", 0x0, " ", 0x0, "T", 0x0, "X", 0x0, " ", 0x0, "i"
	DCB	0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u"
	DCB	0x0, "p", 0x0, "t", 0x0, " ", 0x0, "c", 0x0, "o", 0x0, "m"
	DCB	0x0, "p", 0x0, "l", 0x0, "e", 0x0, "t", 0x0, "i", 0x0, "o"
	DCB	0x0, "n", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CC@PKKAGKLP@?$AAT?$AAX?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$AN?$AA?6?$AA?$AA@| DCB "T"
	DCB	0x0, "X", 0x0, " ", 0x0, "D", 0x0, "M", 0x0, "A", 0x0, " "
	DCB	0x0, "t", 0x0, "i", 0x0, "m", 0x0, "e", 0x0, "o", 0x0, "u"
	DCB	0x0, "t", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CA@GNIAGCLB@?$AAT?$AAX?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "T"
	DCB	0x0, "X", 0x0, " ", 0x0, "D", 0x0, "M", 0x0, "A", 0x0, " "
	DCB	0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DE@BIEHKFMC@?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAs?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?5?$AAi?$AAs?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "!"
	DCB	0x0, "!", 0x0, "!", 0x0, "!", 0x0, " ", 0x0, "D", 0x0, "M"
	DCB	0x0, "A", 0x0, " ", 0x0, "s", 0x0, "t", 0x0, "a", 0x0, "t"
	DCB	0x0, "u", 0x0, "s", 0x0, " ", 0x0, "i", 0x0, "s", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GM@FFDJCNJM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAS?$AAi?$AAg?$AAn?$AAa?$AAl?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAT?$AAX?$AA?5?$AAi@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "F", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "S", 0x0, "i"
	DCB	0x0, "g", 0x0, "n", 0x0, "a", 0x0, "l", 0x0, " ", 0x0, "D"
	DCB	0x0, "M", 0x0, "A", 0x0, " ", 0x0, "T", 0x0, "X", 0x0, " "
	DCB	0x0, "i", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r"
	DCB	0x0, "u", 0x0, "p", 0x0, "t", 0x0, " ", 0x0, "c", 0x0, "o"
	DCB	0x0, "m", 0x0, "p", 0x0, "l", 0x0, "e", 0x0, "t", 0x0, "i"
	DCB	0x0, "o", 0x0, "n", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@KHCDCJAE@?$AA?$CL?$AAH?$AAW?$AAT?$AAx?$AAI?$AAn?$AAt?$AAr?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "H", 0x0, "W", 0x0, "T", 0x0, "x", 0x0, "I", 0x0, "n"
	DCB	0x0, "t", 0x0, "r", 0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "8", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ","
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  04998			 AREA	 |.text|, CODE, ARM

  04998		 |HWTxIntr| PROC

; 2746 : {

  04998		 |$LN38@HWTxIntr|
  04998	e1a0c00d	 mov         r12, sp
  0499c	e92d0007	 stmdb       sp!, {r0 - r2}
  049a0	e92d5000	 stmdb       sp!, {r12, lr}
  049a4	e24dd058	 sub         sp, sp, #0x58
  049a8		 |$M47197|

; 2747 :     UARTPDD *pPdd = (UARTPDD *)pvContext;

  049a8	e59d3060	 ldr         r3, [sp, #0x60]
  049ac	e58d3024	 str         r3, [sp, #0x24]

; 2748 :     OMAP_UART_REGS *pUartRegs = pPdd->pUartRegs;

  049b0	e59d3024	 ldr         r3, [sp, #0x24]
  049b4	e2833024	 add         r3, r3, #0x24
  049b8	e5933000	 ldr         r3, [r3]
  049bc	e58d3018	 str         r3, [sp, #0x18]

; 2749 :     DWORD dwDmaStatus;          // DMA status
; 2750 :     DWORD dwStatus;             // Status
; 2751 :     ULONG BytesToTransfer;      // Actual byte to DMA'd
; 2752 :     UCHAR modemStat;            // Modem status
; 2753 :     DWORD dwCount = 0;          // Dma transfer count

  049c0	e3a03000	 mov         r3, #0
  049c4	e58d3004	 str         r3, [sp, #4]

; 2754 :     DWORD size = *pLength;      // Actual Buffer Length

  049c8	e59d3068	 ldr         r3, [sp, #0x68]
  049cc	e5933000	 ldr         r3, [r3]
  049d0	e58d3014	 str         r3, [sp, #0x14]

; 2755 :     ULONG TotalTimeout;         // The Total Timeout
; 2756 :     ULONG Timeout;              // The Timeout value actually used
; 2757 : 
; 2758 : 
; 2759 :     DEBUGMSG(ZONE_THREAD, (
; 2760 :         L"+HWTxIntr(0x%08x, 0x%08x, %d)\r\n", pvContext, pTxBuffer,
; 2761 :         *pLength
; 2762 :         ));

  049d4	e59f3758	 ldr         r3, [pc, #0x758]
  049d8	e5933440	 ldr         r3, [r3, #0x440]
  049dc	e3130040	 tst         r3, #0x40
  049e0	0a000008	 beq         |$LN28@HWTxIntr|
  049e4	e59d3068	 ldr         r3, [sp, #0x68]
  049e8	e5933000	 ldr         r3, [r3]
  049ec	e59d2064	 ldr         r2, [sp, #0x64]
  049f0	e59d1060	 ldr         r1, [sp, #0x60]
  049f4	e59f0754	 ldr         r0, [pc, #0x754]
  049f8	eb000000	 bl          NKDbgPrintfW
  049fc	e3a03001	 mov         r3, #1
  04a00	e58d3028	 str         r3, [sp, #0x28]
  04a04	ea000001	 b           |$LN29@HWTxIntr|
  04a08		 |$LN28@HWTxIntr|
  04a08	e3a03000	 mov         r3, #0
  04a0c	e58d3028	 str         r3, [sp, #0x28]
  04a10		 |$LN29@HWTxIntr|

; 2763 : 
; 2764 :     // Somehow BT driver was trying to send data after setting the UART to D3 and causing
; 2765 :     // UART driver to crash in this routine. Check the power state before doing anything.
; 2766 :     if (pPdd->currentDX >= D3)

  04a10	e59d3024	 ldr         r3, [sp, #0x24]
  04a14	e2833030	 add         r3, r3, #0x30
  04a18	e5933000	 ldr         r3, [r3]
  04a1c	e3530003	 cmp         r3, #3
  04a20	ba000003	 blt         |$LN25@HWTxIntr|

; 2767 :     {
; 2768 :         *pLength = 0;

  04a24	e59d2068	 ldr         r2, [sp, #0x68]
  04a28	e3a03000	 mov         r3, #0
  04a2c	e5823000	 str         r3, [r2]

; 2769 :         goto cleanUp;

  04a30	ea0001ae	 b           |$cleanUp$45735|
  04a34		 |$LN25@HWTxIntr|

; 2770 :     }
; 2771 : 
; 2772 :     SetAutoIdle(pPdd, TRUE);

  04a34	e3a01001	 mov         r1, #1
  04a38	e59d0024	 ldr         r0, [sp, #0x24]
  04a3c	eb000000	 bl          SetAutoIdle

; 2773 : 
; 2774 :     EnterCriticalSection(&pPdd->hwCS);

  04a40	e59d3024	 ldr         r3, [sp, #0x24]
  04a44	e2830098	 add         r0, r3, #0x98
  04a48	eb000000	 bl          EnterCriticalSection

; 2775 :     // If there is nothing to send then disable TX interrupt
; 2776 :     if (*pLength == 0)

  04a4c	e59d3068	 ldr         r3, [sp, #0x68]
  04a50	e5933000	 ldr         r3, [r3]
  04a54	e3530000	 cmp         r3, #0
  04a58	1a000016	 bne         |$LN24@HWTxIntr|

; 2777 :     {
; 2778 :         // Disable TX interrupt
; 2779 :         pPdd->intrMask &= ~UART_IER_THR;

  04a5c	e59d3024	 ldr         r3, [sp, #0x24]
  04a60	e2833088	 add         r3, r3, #0x88
  04a64	e5d33000	 ldrb        r3, [r3]
  04a68	e1a02003	 mov         r2, r3
  04a6c	e3e03002	 mvn         r3, #2
  04a70	e0021003	 and         r1, r2, r3
  04a74	e59d3024	 ldr         r3, [sp, #0x24]
  04a78	e2832088	 add         r2, r3, #0x88
  04a7c	e20130ff	 and         r3, r1, #0xFF
  04a80	e5c23000	 strb        r3, [r2]

; 2780 :         OUTREG8(&pUartRegs->IER, pPdd->intrMask);

  04a84	e59d3024	 ldr         r3, [sp, #0x24]
  04a88	e2831088	 add         r1, r3, #0x88
  04a8c	e59d3018	 ldr         r3, [sp, #0x18]
  04a90	e2832004	 add         r2, r3, #4
  04a94	e5d13000	 ldrb        r3, [r1]
  04a98	e5c23000	 strb        r3, [r2]

; 2781 :         LeaveCriticalSection(&pPdd->hwCS);

  04a9c	e59d3024	 ldr         r3, [sp, #0x24]
  04aa0	e2830098	 add         r0, r3, #0x98
  04aa4	eb000000	 bl          LeaveCriticalSection

; 2782 :         SetAutoIdle(pPdd, FALSE);

  04aa8	e3a01000	 mov         r1, #0
  04aac	e59d0024	 ldr         r0, [sp, #0x24]
  04ab0	eb000000	 bl          SetAutoIdle

; 2783 : 
; 2784 :         goto cleanUp;

  04ab4	ea00018d	 b           |$cleanUp$45735|
  04ab8		 |$LN24@HWTxIntr|

; 2785 :     }
; 2786 : 
; 2787 : 
; 2788 :     // Set event to fire HWXmitComChar
; 2789 :     PulseEvent(pPdd->txEvent);

  04ab8	e59d3024	 ldr         r3, [sp, #0x24]
  04abc	e28330d4	 add         r3, r3, #0xD4
  04ac0	e5930000	 ldr         r0, [r3]
  04ac4	eb000000	 bl          PulseEvent

; 2790 : 
; 2791 :     // If CTS flow control is desired, check it. If deasserted, don't send,
; 2792 :     // but loop.  When CTS is asserted again, the OtherInt routine will
; 2793 :     // detect this and re-enable TX interrupts (causing Flushdone).
; 2794 :     // For finest granularity, we would check this in the loop below,
; 2795 :     // but for speed, I check it here (up to 8 xmit characters before
; 2796 :     // we actually flow off.
; 2797 :     if (pPdd->dcb.fOutxCtsFlow)

  04ac8	e59d3024	 ldr         r3, [sp, #0x24]
  04acc	e2833060	 add         r3, r3, #0x60
  04ad0	e5933000	 ldr         r3, [r3]
  04ad4	e3130004	 tst         r3, #4
  04ad8	0a000025	 beq         |$LN23@HWTxIntr|

; 2798 :     {
; 2799 :         modemStat = ReadModemStat(pPdd);

  04adc	e59d0024	 ldr         r0, [sp, #0x24]
  04ae0	eb000000	 bl          ReadModemStat
  04ae4	e5cd002c	 strb        r0, [sp, #0x2C]
  04ae8	e5dd302c	 ldrb        r3, [sp, #0x2C]
  04aec	e5cd300c	 strb        r3, [sp, #0xC]

; 2800 :         if ((modemStat & UART_MSR_NCTS) == 0)

  04af0	e5dd300c	 ldrb        r3, [sp, #0xC]
  04af4	e3130010	 tst         r3, #0x10
  04af8	1a00001d	 bne         |$LN22@HWTxIntr|

; 2801 :         {
; 2802 :             // Set flag
; 2803 :             pPdd->flowOffCTS = TRUE;

  04afc	e59d3024	 ldr         r3, [sp, #0x24]
  04b00	e2832090	 add         r2, r3, #0x90
  04b04	e3a03001	 mov         r3, #1
  04b08	e5823000	 str         r3, [r2]

; 2804 :             // Disable TX interrupt
; 2805 :             pPdd->intrMask &= ~UART_IER_THR;

  04b0c	e59d3024	 ldr         r3, [sp, #0x24]
  04b10	e2833088	 add         r3, r3, #0x88
  04b14	e5d33000	 ldrb        r3, [r3]
  04b18	e1a02003	 mov         r2, r3
  04b1c	e3e03002	 mvn         r3, #2
  04b20	e0021003	 and         r1, r2, r3
  04b24	e59d3024	 ldr         r3, [sp, #0x24]
  04b28	e2832088	 add         r2, r3, #0x88
  04b2c	e20130ff	 and         r3, r1, #0xFF
  04b30	e5c23000	 strb        r3, [r2]

; 2806 :             OUTREG8(&pUartRegs->IER, pPdd->intrMask);

  04b34	e59d3024	 ldr         r3, [sp, #0x24]
  04b38	e2831088	 add         r1, r3, #0x88
  04b3c	e59d3018	 ldr         r3, [sp, #0x18]
  04b40	e2832004	 add         r2, r3, #4
  04b44	e5d13000	 ldrb        r3, [r1]
  04b48	e5c23000	 strb        r3, [r2]

; 2807 :             LeaveCriticalSection(&pPdd->hwCS);

  04b4c	e59d3024	 ldr         r3, [sp, #0x24]
  04b50	e2830098	 add         r0, r3, #0x98
  04b54	eb000000	 bl          LeaveCriticalSection

; 2808 :             SetAutoIdle(pPdd, FALSE);

  04b58	e3a01000	 mov         r1, #0
  04b5c	e59d0024	 ldr         r0, [sp, #0x24]
  04b60	eb000000	 bl          SetAutoIdle

; 2809 :             *pLength = 0;

  04b64	e59d2068	 ldr         r2, [sp, #0x68]
  04b68	e3a03000	 mov         r3, #0
  04b6c	e5823000	 str         r3, [r2]

; 2810 :             goto cleanUp;

  04b70	ea00015e	 b           |$cleanUp$45735|
  04b74		 |$LN22@HWTxIntr|
  04b74		 |$LN23@HWTxIntr|

; 2811 :         }
; 2812 :     }
; 2813 : 
; 2814 :     // Same thing applies for DSR
; 2815 :     if (pPdd->dcb.fOutxDsrFlow)

  04b74	e59d3024	 ldr         r3, [sp, #0x24]
  04b78	e2833060	 add         r3, r3, #0x60
  04b7c	e5933000	 ldr         r3, [r3]
  04b80	e3130008	 tst         r3, #8
  04b84	0a000025	 beq         |$LN21@HWTxIntr|

; 2816 :     {
; 2817 :         modemStat = ReadModemStat(pPdd);

  04b88	e59d0024	 ldr         r0, [sp, #0x24]
  04b8c	eb000000	 bl          ReadModemStat
  04b90	e5cd002d	 strb        r0, [sp, #0x2D]
  04b94	e5dd302d	 ldrb        r3, [sp, #0x2D]
  04b98	e5cd300c	 strb        r3, [sp, #0xC]

; 2818 :         if ((modemStat & UART_MSR_NDSR) == 0)

  04b9c	e5dd300c	 ldrb        r3, [sp, #0xC]
  04ba0	e3130020	 tst         r3, #0x20
  04ba4	1a00001d	 bne         |$LN20@HWTxIntr|

; 2819 :         {
; 2820 :             // Set flag
; 2821 :             pPdd->flowOffDSR = TRUE;

  04ba8	e59d3024	 ldr         r3, [sp, #0x24]
  04bac	e2832094	 add         r2, r3, #0x94
  04bb0	e3a03001	 mov         r3, #1
  04bb4	e5823000	 str         r3, [r2]

; 2822 :             // Disable TX interrupt
; 2823 : 
; 2824 :             pPdd->intrMask &= ~UART_IER_THR;

  04bb8	e59d3024	 ldr         r3, [sp, #0x24]
  04bbc	e2833088	 add         r3, r3, #0x88
  04bc0	e5d33000	 ldrb        r3, [r3]
  04bc4	e1a02003	 mov         r2, r3
  04bc8	e3e03002	 mvn         r3, #2
  04bcc	e0021003	 and         r1, r2, r3
  04bd0	e59d3024	 ldr         r3, [sp, #0x24]
  04bd4	e2832088	 add         r2, r3, #0x88
  04bd8	e20130ff	 and         r3, r1, #0xFF
  04bdc	e5c23000	 strb        r3, [r2]

; 2825 :             OUTREG8(&pUartRegs->IER, pPdd->intrMask);

  04be0	e59d3024	 ldr         r3, [sp, #0x24]
  04be4	e2831088	 add         r1, r3, #0x88
  04be8	e59d3018	 ldr         r3, [sp, #0x18]
  04bec	e2832004	 add         r2, r3, #4
  04bf0	e5d13000	 ldrb        r3, [r1]
  04bf4	e5c23000	 strb        r3, [r2]

; 2826 :             LeaveCriticalSection(&pPdd->hwCS);

  04bf8	e59d3024	 ldr         r3, [sp, #0x24]
  04bfc	e2830098	 add         r0, r3, #0x98
  04c00	eb000000	 bl          LeaveCriticalSection

; 2827 :             SetAutoIdle(pPdd, FALSE);

  04c04	e3a01000	 mov         r1, #0
  04c08	e59d0024	 ldr         r0, [sp, #0x24]
  04c0c	eb000000	 bl          SetAutoIdle

; 2828 :             *pLength = 0;

  04c10	e59d2068	 ldr         r2, [sp, #0x68]
  04c14	e3a03000	 mov         r3, #0
  04c18	e5823000	 str         r3, [r2]

; 2829 :             goto cleanUp;

  04c1c	ea000133	 b           |$cleanUp$45735|
  04c20		 |$LN20@HWTxIntr|
  04c20		 |$LN21@HWTxIntr|

; 2830 :         }
; 2831 :     }
; 2832 : 
; 2833 :     if ( pPdd->bHWXmitComCharWaiting )

  04c20	e59d3024	 ldr         r3, [sp, #0x24]
  04c24	e2833e13	 add         r3, r3, #0x13, 28
  04c28	e5933000	 ldr         r3, [r3]
  04c2c	e3530000	 cmp         r3, #0
  04c30	0a00000d	 beq         |$LN19@HWTxIntr|

; 2834 :     {
; 2835 :         LeaveCriticalSection(&pPdd->hwCS);

  04c34	e59d3024	 ldr         r3, [sp, #0x24]
  04c38	e2830098	 add         r0, r3, #0x98
  04c3c	eb000000	 bl          LeaveCriticalSection

; 2836 : 
; 2837 :         // Give chance to HWXmitComChar there
; 2838 :         Sleep(pPdd->txPauseTimeMs);

  04c40	e59d3024	 ldr         r3, [sp, #0x24]
  04c44	e28330ec	 add         r3, r3, #0xEC
  04c48	e5930000	 ldr         r0, [r3]
  04c4c	eb000000	 bl          Sleep

; 2839 : 
; 2840 :         EnterCriticalSection(&pPdd->hwCS);

  04c50	e59d3024	 ldr         r3, [sp, #0x24]
  04c54	e2830098	 add         r0, r3, #0x98
  04c58	eb000000	 bl          EnterCriticalSection

; 2841 : 
; 2842 :         pPdd->bHWXmitComCharWaiting = FALSE;

  04c5c	e59d3024	 ldr         r3, [sp, #0x24]
  04c60	e2832e13	 add         r2, r3, #0x13, 28
  04c64	e3a03000	 mov         r3, #0
  04c68	e5823000	 str         r3, [r2]
  04c6c		 |$LN19@HWTxIntr|

; 2843 :     }
; 2844 : 
; 2845 :     if( !pPdd->TxDmaInfo)

  04c6c	e59d3024	 ldr         r3, [sp, #0x24]
  04c70	e2833c01	 add         r3, r3, #1, 24
  04c74	e5933000	 ldr         r3, [r3]
  04c78	e3530000	 cmp         r3, #0
  04c7c	1a000033	 bne         |$LN18@HWTxIntr|

; 2846 :     {
; 2847 :         // 'NO DMA' transmit routine
; 2848 :         // While there are data and there is room in TX FIFO
; 2849 :         dwCount = *pLength;

  04c80	e59d3068	 ldr         r3, [sp, #0x68]
  04c84	e5933000	 ldr         r3, [r3]
  04c88	e58d3004	 str         r3, [sp, #4]

; 2850 :         *pLength = 0;

  04c8c	e59d2068	 ldr         r2, [sp, #0x68]
  04c90	e3a03000	 mov         r3, #0
  04c94	e5823000	 str         r3, [r2]
  04c98		 |$LN17@HWTxIntr|

; 2851 :         while (dwCount > 0)

  04c98	e59d3004	 ldr         r3, [sp, #4]
  04c9c	e3530000	 cmp         r3, #0
  04ca0	9a000015	 bls         |$LN16@HWTxIntr|

; 2852 :         {
; 2853 :             if ((INREG8(&pUartRegs->SSR) & UART_SSR_TX_FIFO_FULL) != 0) break;

  04ca4	e59d3018	 ldr         r3, [sp, #0x18]
  04ca8	e2833044	 add         r3, r3, #0x44
  04cac	e5d33000	 ldrb        r3, [r3]
  04cb0	e3130001	 tst         r3, #1
  04cb4	0a000000	 beq         |$LN15@HWTxIntr|
  04cb8	ea00000f	 b           |$LN16@HWTxIntr|
  04cbc		 |$LN15@HWTxIntr|

; 2854 :             OUTREG8(&pUartRegs->THR, *pTxBuffer++);

  04cbc	e59d3064	 ldr         r3, [sp, #0x64]
  04cc0	e5d32000	 ldrb        r2, [r3]
  04cc4	e59d3018	 ldr         r3, [sp, #0x18]
  04cc8	e5c32000	 strb        r2, [r3]
  04ccc	e59d3064	 ldr         r3, [sp, #0x64]
  04cd0	e2833001	 add         r3, r3, #1
  04cd4	e58d3064	 str         r3, [sp, #0x64]

; 2855 :             (*pLength)++;

  04cd8	e59d3068	 ldr         r3, [sp, #0x68]
  04cdc	e5933000	 ldr         r3, [r3]
  04ce0	e2832001	 add         r2, r3, #1
  04ce4	e59d3068	 ldr         r3, [sp, #0x68]
  04ce8	e5832000	 str         r2, [r3]

; 2856 :             dwCount--;

  04cec	e59d3004	 ldr         r3, [sp, #4]
  04cf0	e2433001	 sub         r3, r3, #1
  04cf4	e58d3004	 str         r3, [sp, #4]

; 2857 :         }

  04cf8	eaffffe6	 b           |$LN17@HWTxIntr|
  04cfc		 |$LN16@HWTxIntr|

; 2858 : 
; 2859 :         // enable TX interrupt
; 2860 :         pPdd->intrMask |= UART_IER_THR;

  04cfc	e59d3024	 ldr         r3, [sp, #0x24]
  04d00	e2833088	 add         r3, r3, #0x88
  04d04	e5d33000	 ldrb        r3, [r3]
  04d08	e3831002	 orr         r1, r3, #2
  04d0c	e59d3024	 ldr         r3, [sp, #0x24]
  04d10	e2832088	 add         r2, r3, #0x88
  04d14	e20130ff	 and         r3, r1, #0xFF
  04d18	e5c23000	 strb        r3, [r2]

; 2861 :         OUTREG8(&pUartRegs->IER, pPdd->intrMask);

  04d1c	e59d3024	 ldr         r3, [sp, #0x24]
  04d20	e2831088	 add         r1, r3, #0x88
  04d24	e59d3018	 ldr         r3, [sp, #0x18]
  04d28	e2832004	 add         r2, r3, #4
  04d2c	e5d13000	 ldrb        r3, [r1]
  04d30	e5c23000	 strb        r3, [r2]

; 2862 :         LeaveCriticalSection(&pPdd->hwCS);

  04d34	e59d3024	 ldr         r3, [sp, #0x24]
  04d38	e2830098	 add         r0, r3, #0x98
  04d3c	eb000000	 bl          LeaveCriticalSection

; 2863 :         SetAutoIdle(pPdd, FALSE);

  04d40	e3a01000	 mov         r1, #0
  04d44	e59d0024	 ldr         r0, [sp, #0x24]
  04d48	eb000000	 bl          SetAutoIdle

; 2864 : 
; 2865 :         goto cleanUp;

  04d4c	ea0000e7	 b           |$cleanUp$45735|
  04d50		 |$LN18@HWTxIntr|

; 2866 :     }
; 2867 : 
; 2868 :     // clear any pending tx event
; 2869 :     WaitForSingleObject(pPdd->hEventTxIstDma, 0);

  04d50	e3a01000	 mov         r1, #0
  04d54	e59d3024	 ldr         r3, [sp, #0x24]
  04d58	e2833f42	 add         r3, r3, #0x42, 30
  04d5c	e5930000	 ldr         r0, [r3]
  04d60	eb000000	 bl          WaitForSingleObject

; 2870 : 
; 2871 :     // Make sure an event isn't hanging around from a previous DMA time out.
; 2872 :     // The WaitForSingleObject above handles this...
; 2873 :     //ResetEvent(pPdd->hEventTxIstDma);
; 2874 : 
; 2875 :     //  Get the length of how much can be DMA'd
; 2876 :     BytesToTransfer = (size < pPdd->TxDmaBufferSize) ? size : pPdd->TxDmaBufferSize;

  04d64	e59d3024	 ldr         r3, [sp, #0x24]
  04d68	e28330f4	 add         r3, r3, #0xF4
  04d6c	e59d2014	 ldr         r2, [sp, #0x14]
  04d70	e5933000	 ldr         r3, [r3]
  04d74	e1520003	 cmp         r2, r3
  04d78	2a000002	 bcs         |$LN30@HWTxIntr|
  04d7c	e59d3014	 ldr         r3, [sp, #0x14]
  04d80	e58d3030	 str         r3, [sp, #0x30]
  04d84	ea000003	 b           |$LN31@HWTxIntr|
  04d88		 |$LN30@HWTxIntr|
  04d88	e59d3024	 ldr         r3, [sp, #0x24]
  04d8c	e28330f4	 add         r3, r3, #0xF4
  04d90	e5933000	 ldr         r3, [r3]
  04d94	e58d3030	 str         r3, [sp, #0x30]
  04d98		 |$LN31@HWTxIntr|
  04d98	e59d3030	 ldr         r3, [sp, #0x30]
  04d9c	e58d3008	 str         r3, [sp, #8]

; 2877 : 
; 2878 :     //  Write out all the data; loop if necessary
; 2879 :     for( dwCount = 0; dwCount < size; )

  04da0	e3a03000	 mov         r3, #0
  04da4	e58d3004	 str         r3, [sp, #4]
  04da8		 |$LN14@HWTxIntr|
  04da8	e59d2004	 ldr         r2, [sp, #4]
  04dac	e59d3014	 ldr         r3, [sp, #0x14]
  04db0	e1520003	 cmp         r2, r3
  04db4	2a0000b9	 bcs         |$LN13@HWTxIntr|

; 2880 :     {
; 2881 : 
; 2882 :         TotalTimeout = ((PHW_INDEP_INFO)pPdd->pMdd)->CommTimeouts.WriteTotalTimeoutMultiplier*BytesToTransfer +
; 2883 :                        ((PHW_INDEP_INFO)pPdd->pMdd)->CommTimeouts.WriteTotalTimeoutConstant;

  04db8	e59d3024	 ldr         r3, [sp, #0x24]
  04dbc	e2833050	 add         r3, r3, #0x50
  04dc0	e5933000	 ldr         r3, [r3]
  04dc4	e2833088	 add         r3, r3, #0x88
  04dc8	e5931000	 ldr         r1, [r3]
  04dcc	e59d3008	 ldr         r3, [sp, #8]
  04dd0	e0020391	 mul         r2, r1, r3
  04dd4	e59d3024	 ldr         r3, [sp, #0x24]
  04dd8	e2833050	 add         r3, r3, #0x50
  04ddc	e5933000	 ldr         r3, [r3]
  04de0	e283308c	 add         r3, r3, #0x8C
  04de4	e5933000	 ldr         r3, [r3]
  04de8	e0823003	 add         r3, r2, r3
  04dec	e58d3010	 str         r3, [sp, #0x10]

; 2884 : 
; 2885 :         if ( !TotalTimeout )

  04df0	e59d3010	 ldr         r3, [sp, #0x10]
  04df4	e3530000	 cmp         r3, #0
  04df8	1a000002	 bne         |$LN12@HWTxIntr|

; 2886 :             Timeout = INFINITE;

  04dfc	e3e03000	 mvn         r3, #0
  04e00	e58d3020	 str         r3, [sp, #0x20]

; 2887 :         else

  04e04	ea000001	 b           |$LN11@HWTxIntr|
  04e08		 |$LN12@HWTxIntr|

; 2888 :             Timeout = TotalTimeout;

  04e08	e59d3010	 ldr         r3, [sp, #0x10]
  04e0c	e58d3020	 str         r3, [sp, #0x20]
  04e10		 |$LN11@HWTxIntr|

; 2889 : 
; 2890 :         dwDmaStatus = DmaGetStatus(pPdd->TxDmaInfo);

  04e10	e59d3024	 ldr         r3, [sp, #0x24]
  04e14	e2833c01	 add         r3, r3, #1, 24
  04e18	e5930000	 ldr         r0, [r3]
  04e1c	eb000000	 bl          DmaGetStatus
  04e20	e58d0034	 str         r0, [sp, #0x34]
  04e24	e59d3034	 ldr         r3, [sp, #0x34]
  04e28	e58d3000	 str         r3, [sp]

; 2891 :         // clear status
; 2892 :         DmaClearStatus(pPdd->TxDmaInfo, dwDmaStatus);

  04e2c	e59d1000	 ldr         r1, [sp]
  04e30	e59d3024	 ldr         r3, [sp, #0x24]
  04e34	e2833c01	 add         r3, r3, #1, 24
  04e38	e5930000	 ldr         r0, [r3]
  04e3c	eb000000	 bl          DmaClearStatus

; 2893 : 
; 2894 :         if (DmaInterruptDone(pPdd->hTxDmaChannel) == FALSE)

  04e40	e59d3024	 ldr         r3, [sp, #0x24]
  04e44	e2833f41	 add         r3, r3, #0x41, 30
  04e48	e5930000	 ldr         r0, [r3]
  04e4c	eb000000	 bl          DmaInterruptDone
  04e50	e58d0038	 str         r0, [sp, #0x38]
  04e54	e59d3038	 ldr         r3, [sp, #0x38]
  04e58	e3530000	 cmp         r3, #0
  04e5c	1a000001	 bne         |$LN10@HWTxIntr|

; 2895 :         {
; 2896 :             RETAILMSG(1,(TEXT("ERROR: Failed to Signal DMA TX interrupt completion\r\n")));

  04e60	e59f02e4	 ldr         r0, [pc, #0x2E4]
  04e64	eb000000	 bl          NKDbgPrintfW
  04e68		 |$LN10@HWTxIntr|

; 2897 :         }
; 2898 : 
; 2899 :         DmaSetElementAndFrameCount( pPdd->TxDmaInfo,
; 2900 :             (UINT16)BytesToTransfer,1);

  04e68	e3a02001	 mov         r2, #1
  04e6c	e59d3008	 ldr         r3, [sp, #8]
  04e70	e1a01803	 mov         r1, r3, lsl #16
  04e74	e1a01821	 mov         r1, r1, lsr #16
  04e78	e59d3024	 ldr         r3, [sp, #0x24]
  04e7c	e2833c01	 add         r3, r3, #1, 24
  04e80	e5930000	 ldr         r0, [r3]
  04e84	eb000000	 bl          DmaSetElementAndFrameCount

; 2901 : 
; 2902 :         CeSafeCopyMemory (pPdd->pTxDmaBuffer, pTxBuffer, BytesToTransfer);

  04e88	e59d2008	 ldr         r2, [sp, #8]
  04e8c	e59d1064	 ldr         r1, [sp, #0x64]
  04e90	e59d3024	 ldr         r3, [sp, #0x24]
  04e94	e28330f8	 add         r3, r3, #0xF8
  04e98	e5930000	 ldr         r0, [r3]
  04e9c	eb000000	 bl          CeSafeCopyMemory

; 2903 : 
; 2904 :         dwDmaStatus = DmaGetStatus(pPdd->TxDmaInfo);

  04ea0	e59d3024	 ldr         r3, [sp, #0x24]
  04ea4	e2833c01	 add         r3, r3, #1, 24
  04ea8	e5930000	 ldr         r0, [r3]
  04eac	eb000000	 bl          DmaGetStatus
  04eb0	e58d003c	 str         r0, [sp, #0x3C]
  04eb4	e59d303c	 ldr         r3, [sp, #0x3C]
  04eb8	e58d3000	 str         r3, [sp]

; 2905 : 
; 2906 :         if(dwDmaStatus) {

  04ebc	e59d3000	 ldr         r3, [sp]
  04ec0	e3530000	 cmp         r3, #0
  04ec4	0a000002	 beq         |$LN9@HWTxIntr|

; 2907 :             RETAILMSG(1, (TEXT("!!!! DMA status is 0x%x\r\n"), dwDmaStatus));

  04ec8	e59d1000	 ldr         r1, [sp]
  04ecc	e59f0274	 ldr         r0, [pc, #0x274]
  04ed0	eb000000	 bl          NKDbgPrintfW
  04ed4		 |$LN9@HWTxIntr|

; 2908 :         }
; 2909 :     
; 2910 :         // Workaround, restart RXDMA to get TX working after break is received
; 2911 :         if (pPdd->bRxBreak)

  04ed4	e59d3024	 ldr         r3, [sp, #0x24]
  04ed8	e2833f5e	 add         r3, r3, #0x5E, 30
  04edc	e5933000	 ldr         r3, [r3]
  04ee0	e3530000	 cmp         r3, #0
  04ee4	0a00000c	 beq         |$LN8@HWTxIntr|

; 2912 :         {
; 2913 :             if (pPdd->RxDmaInfo)

  04ee8	e59d3024	 ldr         r3, [sp, #0x24]
  04eec	e2833f49	 add         r3, r3, #0x49, 30
  04ef0	e5933000	 ldr         r3, [r3]
  04ef4	e3530000	 cmp         r3, #0
  04ef8	0a000003	 beq         |$LN7@HWTxIntr|

; 2914 :                 DmaStart(pPdd->RxDmaInfo);

  04efc	e59d3024	 ldr         r3, [sp, #0x24]
  04f00	e2833f49	 add         r3, r3, #0x49, 30
  04f04	e5930000	 ldr         r0, [r3]
  04f08	eb000000	 bl          DmaStart
  04f0c		 |$LN7@HWTxIntr|

; 2915 :             pPdd->bRxBreak = FALSE;

  04f0c	e59d3024	 ldr         r3, [sp, #0x24]
  04f10	e2832f5e	 add         r2, r3, #0x5E, 30
  04f14	e3a03000	 mov         r3, #0
  04f18	e5823000	 str         r3, [r2]
  04f1c		 |$LN8@HWTxIntr|

; 2916 :         }
; 2917 :                 
; 2918 :         DmaStart(pPdd->TxDmaInfo);

  04f1c	e59d3024	 ldr         r3, [sp, #0x24]
  04f20	e2833c01	 add         r3, r3, #1, 24
  04f24	e5930000	 ldr         r0, [r3]
  04f28	eb000000	 bl          DmaStart

; 2919 :         LeaveCriticalSection(&pPdd->hwCS);

  04f2c	e59d3024	 ldr         r3, [sp, #0x24]
  04f30	e2830098	 add         r0, r3, #0x98
  04f34	eb000000	 bl          LeaveCriticalSection

; 2920 : 
; 2921 :         //The end of transfer is now signalled by the DMA TX IST
; 2922 :         //Adjust to be the correct timeout value
; 2923 :         // need to recalculate every iteration
; 2924 :         dwStatus = WaitForSingleObject(pPdd->hEventTxIstDma, Timeout);

  04f38	e59d1020	 ldr         r1, [sp, #0x20]
  04f3c	e59d3024	 ldr         r3, [sp, #0x24]
  04f40	e2833f42	 add         r3, r3, #0x42, 30
  04f44	e5930000	 ldr         r0, [r3]
  04f48	eb000000	 bl          WaitForSingleObject
  04f4c	e58d0040	 str         r0, [sp, #0x40]
  04f50	e59d3040	 ldr         r3, [sp, #0x40]
  04f54	e58d301c	 str         r3, [sp, #0x1C]

; 2925 : 
; 2926 :         if(dwStatus == WAIT_FAILED) {

  04f58	e59d301c	 ldr         r3, [sp, #0x1C]
  04f5c	e3730001	 cmn         r3, #1
  04f60	1a000006	 bne         |$LN6@HWTxIntr|

; 2927 :             RETAILMSG(1, (TEXT("TX DMA failed\r\n")));

  04f64	e59f01d8	 ldr         r0, [pc, #0x1D8]
  04f68	eb000000	 bl          NKDbgPrintfW

; 2928 :             DmaStop(pPdd->TxDmaInfo);

  04f6c	e59d3024	 ldr         r3, [sp, #0x24]
  04f70	e2833c01	 add         r3, r3, #1, 24
  04f74	e5930000	 ldr         r0, [r3]
  04f78	eb000000	 bl          DmaStop
  04f7c	ea00000a	 b           |$LN5@HWTxIntr|
  04f80		 |$LN6@HWTxIntr|

; 2929 :         }
; 2930 :         else if(dwStatus == WAIT_TIMEOUT) {

  04f80	e59d201c	 ldr         r2, [sp, #0x1C]
  04f84	e3a03c01	 mov         r3, #1, 24
  04f88	e3833002	 orr         r3, r3, #2
  04f8c	e1520003	 cmp         r2, r3
  04f90	1a000005	 bne         |$LN4@HWTxIntr|

; 2931 :             //EnterCriticalSection(&pPdd->hwCS);
; 2932 :             //UART_RegDump(pPdd);
; 2933 :             //LeaveCriticalSection(&pPdd->hwCS);
; 2934 :             RETAILMSG(1, (TEXT("TX DMA timeout\r\n")));

  04f94	e59f01a4	 ldr         r0, [pc, #0x1A4]
  04f98	eb000000	 bl          NKDbgPrintfW

; 2935 :             DmaStop(pPdd->TxDmaInfo);

  04f9c	e59d3024	 ldr         r3, [sp, #0x24]
  04fa0	e2833c01	 add         r3, r3, #1, 24
  04fa4	e5930000	 ldr         r0, [r3]
  04fa8	eb000000	 bl          DmaStop
  04fac		 |$LN4@HWTxIntr|
  04fac		 |$LN5@HWTxIntr|

; 2936 :         }
; 2937 : 
; 2938 :         dwDmaStatus = DmaGetStatus(pPdd->TxDmaInfo);

  04fac	e59d3024	 ldr         r3, [sp, #0x24]
  04fb0	e2833c01	 add         r3, r3, #1, 24
  04fb4	e5930000	 ldr         r0, [r3]
  04fb8	eb000000	 bl          DmaGetStatus
  04fbc	e58d0044	 str         r0, [sp, #0x44]
  04fc0	e59d3044	 ldr         r3, [sp, #0x44]
  04fc4	e58d3000	 str         r3, [sp]

; 2939 :         // clear status
; 2940 :         DmaClearStatus(pPdd->TxDmaInfo, dwDmaStatus);

  04fc8	e59d1000	 ldr         r1, [sp]
  04fcc	e59d3024	 ldr         r3, [sp, #0x24]
  04fd0	e2833c01	 add         r3, r3, #1, 24
  04fd4	e5930000	 ldr         r0, [r3]
  04fd8	eb000000	 bl          DmaClearStatus

; 2941 : 
; 2942 :         if (DmaInterruptDone(pPdd->hTxDmaChannel) == FALSE)

  04fdc	e59d3024	 ldr         r3, [sp, #0x24]
  04fe0	e2833f41	 add         r3, r3, #0x41, 30
  04fe4	e5930000	 ldr         r0, [r3]
  04fe8	eb000000	 bl          DmaInterruptDone
  04fec	e58d0048	 str         r0, [sp, #0x48]
  04ff0	e59d3048	 ldr         r3, [sp, #0x48]
  04ff4	e3530000	 cmp         r3, #0
  04ff8	1a000005	 bne         |$LN3@HWTxIntr|

; 2943 :         {
; 2944 :             RETAILMSG(1,(TEXT("ERROR: IST_TxDMA: Failed to Signal DMA TX interrupt completion\r\n")));

  04ffc	e59f0138	 ldr         r0, [pc, #0x138]
  05000	eb000000	 bl          NKDbgPrintfW

; 2945 :             DmaStop(pPdd->TxDmaInfo);

  05004	e59d3024	 ldr         r3, [sp, #0x24]
  05008	e2833c01	 add         r3, r3, #1, 24
  0500c	e5930000	 ldr         r0, [r3]
  05010	eb000000	 bl          DmaStop
  05014		 |$LN3@HWTxIntr|

; 2946 :         }
; 2947 : 
; 2948 :         if(!(dwDmaStatus & DMA_CSR_BLOCK)) {

  05014	e59d3000	 ldr         r3, [sp]
  05018	e3130020	 tst         r3, #0x20
  0501c	1a000006	 bne         |$LN2@HWTxIntr|

; 2949 :             RETAILMSG(1,(TEXT("TX DMA Status is 0x%x\r\n"), dwDmaStatus));

  05020	e59d1000	 ldr         r1, [sp]
  05024	e59f010c	 ldr         r0, [pc, #0x10C]
  05028	eb000000	 bl          NKDbgPrintfW

; 2950 :             DmaStop(pPdd->TxDmaInfo);

  0502c	e59d3024	 ldr         r3, [sp, #0x24]
  05030	e2833c01	 add         r3, r3, #1, 24
  05034	e5930000	 ldr         r0, [r3]
  05038	eb000000	 bl          DmaStop
  0503c		 |$LN2@HWTxIntr|

; 2951 :         }
; 2952 : 
; 2953 :         //  Update amount transferred
; 2954 :         dwCount += BytesToTransfer;

  0503c	e59d2004	 ldr         r2, [sp, #4]
  05040	e59d3008	 ldr         r3, [sp, #8]
  05044	e0823003	 add         r3, r2, r3
  05048	e58d3004	 str         r3, [sp, #4]

; 2955 : 
; 2956 :         //calculate remaining data size
; 2957 :         BytesToTransfer = ((size - dwCount)/pPdd->TxDmaBufferSize) ?
; 2958 :                           pPdd->TxDmaBufferSize : (size - dwCount);

  0504c	e59d2014	 ldr         r2, [sp, #0x14]
  05050	e59d3004	 ldr         r3, [sp, #4]
  05054	e0421003	 sub         r1, r2, r3
  05058	e59d3024	 ldr         r3, [sp, #0x24]
  0505c	e28330f4	 add         r3, r3, #0xF4
  05060	e5930000	 ldr         r0, [r3]
  05064	eb000000	 bl          __rt_udiv
  05068	e3500000	 cmp         r0, #0
  0506c	0a000004	 beq         |$LN32@HWTxIntr|
  05070	e59d3024	 ldr         r3, [sp, #0x24]
  05074	e28330f4	 add         r3, r3, #0xF4
  05078	e5933000	 ldr         r3, [r3]
  0507c	e58d304c	 str         r3, [sp, #0x4C]
  05080	ea000003	 b           |$LN33@HWTxIntr|
  05084		 |$LN32@HWTxIntr|
  05084	e59d2014	 ldr         r2, [sp, #0x14]
  05088	e59d3004	 ldr         r3, [sp, #4]
  0508c	e0423003	 sub         r3, r2, r3
  05090	e58d304c	 str         r3, [sp, #0x4C]
  05094		 |$LN33@HWTxIntr|
  05094	e59d304c	 ldr         r3, [sp, #0x4C]
  05098	e58d3008	 str         r3, [sp, #8]

; 2959 :     }

  0509c	eaffff41	 b           |$LN14@HWTxIntr|
  050a0		 |$LN13@HWTxIntr|

; 2960 : 
; 2961 :     SetEvent(((PHW_INDEP_INFO)pPdd->pMdd)->hTransmitEvent);

  050a0	e59d3024	 ldr         r3, [sp, #0x24]
  050a4	e2833050	 add         r3, r3, #0x50
  050a8	e5933000	 ldr         r3, [r3]
  050ac	e283303c	 add         r3, r3, #0x3C
  050b0	e5930000	 ldr         r0, [r3]
  050b4	eb000000	 bl          SetEvent

; 2962 : 
; 2963 :     // Report to MDD total bytes transferred
; 2964 :     *pLength = dwCount;

  050b8	e59d2004	 ldr         r2, [sp, #4]
  050bc	e59d3068	 ldr         r3, [sp, #0x68]
  050c0	e5832000	 str         r2, [r3]

; 2965 :     if(!IsDmaEnable (pPdd->TxDmaInfo)) SetAutoIdle(pPdd, FALSE);

  050c4	e59d3024	 ldr         r3, [sp, #0x24]
  050c8	e2833c01	 add         r3, r3, #1, 24
  050cc	e5930000	 ldr         r0, [r3]
  050d0	eb000000	 bl          IsDmaEnable
  050d4	e58d0050	 str         r0, [sp, #0x50]
  050d8	e59d3050	 ldr         r3, [sp, #0x50]
  050dc	e3530000	 cmp         r3, #0
  050e0	1a000002	 bne         |$LN1@HWTxIntr|
  050e4	e3a01000	 mov         r1, #0
  050e8	e59d0024	 ldr         r0, [sp, #0x24]
  050ec	eb000000	 bl          SetAutoIdle
  050f0		 |$LN1@HWTxIntr|
  050f0		 |$cleanUp$45735|

; 2966 : 
; 2967 : cleanUp:
; 2968 :     DEBUGMSG(ZONE_THREAD, (
; 2969 :         L"-HWTxIntr(*pLength = %d)\r\n", *pLength
; 2970 :         ));

  050f0	e59f303c	 ldr         r3, [pc, #0x3C]
  050f4	e5933440	 ldr         r3, [r3, #0x440]
  050f8	e3130040	 tst         r3, #0x40
  050fc	0a000006	 beq         |$LN34@HWTxIntr|
  05100	e59d3068	 ldr         r3, [sp, #0x68]
  05104	e5931000	 ldr         r1, [r3]
  05108	e59f0020	 ldr         r0, [pc, #0x20]
  0510c	eb000000	 bl          NKDbgPrintfW
  05110	e3a03001	 mov         r3, #1
  05114	e58d3054	 str         r3, [sp, #0x54]
  05118	ea000001	 b           |$LN35@HWTxIntr|
  0511c		 |$LN34@HWTxIntr|
  0511c	e3a03000	 mov         r3, #0
  05120	e58d3054	 str         r3, [sp, #0x54]
  05124		 |$LN35@HWTxIntr|

; 2971 : }

  05124	e28dd058	 add         sp, sp, #0x58
  05128	e89d6000	 ldmia       sp, {sp, lr}
  0512c	e12fff1e	 bx          lr
  05130		 |$LN39@HWTxIntr|
  05130		 |$LN40@HWTxIntr|
  05130	00000000	 DCD         |??_C@_1DG@FBMJIMJD@?$AA?9?$AAH?$AAW?$AAT?$AAx?$AAI?$AAn?$AAt?$AAr?$AA?$CI?$AA?$CK?$AAp?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  05134		 |$LN41@HWTxIntr|
  05134	00000000	 DCD         |dpCurSettings|
  05138		 |$LN42@HWTxIntr|
  05138	00000000	 DCD         |??_C@_1DA@OODNCMGJ@?$AAT?$AAX?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?5?$AAi?$AAs?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  0513c		 |$LN43@HWTxIntr|
  0513c	00000000	 DCD         |??_C@_1IC@MEFBLOON@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAI?$AAS?$AAT?$AA_?$AAT?$AAx?$AAD?$AAM?$AAA?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAS?$AAi?$AAg?$AAn@|
  05140		 |$LN44@HWTxIntr|
  05140	00000000	 DCD         |??_C@_1CC@PKKAGKLP@?$AAT?$AAX?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$AN?$AA?6?$AA?$AA@|
  05144		 |$LN45@HWTxIntr|
  05144	00000000	 DCD         |??_C@_1CA@GNIAGCLB@?$AAT?$AAX?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  05148		 |$LN46@HWTxIntr|
  05148	00000000	 DCD         |??_C@_1DE@BIEHKFMC@?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAs?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?5?$AAi?$AAs?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  0514c		 |$LN47@HWTxIntr|
  0514c	00000000	 DCD         |??_C@_1GM@FFDJCNJM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAS?$AAi?$AAg?$AAn?$AAa?$AAl?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAT?$AAX?$AA?5?$AAi@|
  05150		 |$LN48@HWTxIntr|
  05150	00000000	 DCD         |??_C@_1EA@KHCDCJAE@?$AA?$CL?$AAH?$AAW?$AAT?$AAx?$AAI?$AAn?$AAt?$AAr?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  05154		 |$M47198|

			 ENDP  ; |HWTxIntr|

; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T47216| DCD	|$LN5@PulseEvent|
	DCD	0x40000e04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PulseEvent| PROC

; 211  : _inline BOOL PulseEvent(HANDLE h) {

  00000		 |$LN5@PulseEvent|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd008	 sub         sp, sp, #8
  00010		 |$M47213|

; 212  : 	return EventModify(h,EVENT_PULSE);

  00010	e3a01001	 mov         r1, #1
  00014	e59d0010	 ldr         r0, [sp, #0x10]
  00018	eb000000	 bl          EventModify
  0001c	e58d0004	 str         r0, [sp, #4]
  00020	e59d3004	 ldr         r3, [sp, #4]
  00024	e58d3000	 str         r3, [sp]

; 213  : }

  00028	e59d0000	 ldr         r0, [sp]
  0002c	e28dd008	 add         sp, sp, #8
  00030	e89d6000	 ldmia       sp, {sp, lr}
  00034	e12fff1e	 bx          lr
  00038		 |$M47214|

			 ENDP  ; |PulseEvent|

	EXPORT	|??_C@_1BO@BDPDOLK@?$AA?9?$AAH?$AAW?$AAM?$AAo?$AAd?$AAe?$AAm?$AAI?$AAn?$AAt?$AAr?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CO@DHIDDEKK@?$AA?$CL?$AAH?$AAW?$AAM?$AAo?$AAd?$AAe?$AAm?$AAI?$AAn?$AAt?$AAr?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  000f0			 AREA	 |.pdata|, PDATA
|$T47227| DCD	|$LN11@HWModemInt|
	DCD	0x40005a04
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\serial\uart\pdd.c

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@BDPDOLK@?$AA?9?$AAH?$AAW?$AAM?$AAo?$AAd?$AAe?$AAm?$AAI?$AAn?$AAt?$AAr?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "H", 0x0, "W", 0x0, "M", 0x0, "o", 0x0, "d", 0x0, "e"
	DCB	0x0, "m", 0x0, "I", 0x0, "n", 0x0, "t", 0x0, "r", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@DHIDDEKK@?$AA?$CL?$AAH?$AAW?$AAM?$AAo?$AAd?$AAe?$AAm?$AAI?$AAn?$AAt?$AAr?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "H", 0x0, "W", 0x0, "M", 0x0, "o", 0x0, "d", 0x0, "e"
	DCB	0x0, "m", 0x0, "I", 0x0, "n", 0x0, "t", 0x0, "r", 0x0, "("
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x"
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  05154			 AREA	 |.text|, CODE, ARM

  05154		 |HWModemIntr| PROC

; 2986 : {

  05154		 |$LN11@HWModemInt|
  05154	e1a0c00d	 mov         r12, sp
  05158	e92d0001	 stmdb       sp!, {r0}
  0515c	e92d5000	 stmdb       sp!, {r12, lr}
  05160	e24dd014	 sub         sp, sp, #0x14
  05164		 |$M47224|

; 2987 :     UARTPDD *pPdd = (UARTPDD*)pvContext;

  05164	e59d301c	 ldr         r3, [sp, #0x1C]
  05168	e58d3004	 str         r3, [sp, #4]

; 2988 :     UCHAR modemStat;
; 2989 : 
; 2990 : 
; 2991 :     DEBUGMSG(ZONE_THREAD, (L"+HWModemIntr(0x%08x)\r\n", pvContext));

  0516c	e59f3140	 ldr         r3, [pc, #0x140]
  05170	e5933440	 ldr         r3, [r3, #0x440]
  05174	e3130040	 tst         r3, #0x40
  05178	0a000005	 beq         |$LN5@HWModemInt|
  0517c	e59d101c	 ldr         r1, [sp, #0x1C]
  05180	e59f0130	 ldr         r0, [pc, #0x130]
  05184	eb000000	 bl          NKDbgPrintfW
  05188	e3a03001	 mov         r3, #1
  0518c	e58d3008	 str         r3, [sp, #8]
  05190	ea000001	 b           |$LN6@HWModemInt|
  05194		 |$LN5@HWModemInt|
  05194	e3a03000	 mov         r3, #0
  05198	e58d3008	 str         r3, [sp, #8]
  0519c		 |$LN6@HWModemInt|

; 2992 : 
; 2993 :     // Get actual modem status
; 2994 :     modemStat = ReadModemStat(pPdd);

  0519c	e59d0004	 ldr         r0, [sp, #4]
  051a0	eb000000	 bl          ReadModemStat
  051a4	e5cd000c	 strb        r0, [sp, #0xC]
  051a8	e5dd300c	 ldrb        r3, [sp, #0xC]
  051ac	e5cd3000	 strb        r3, [sp]

; 2995 : 
; 2996 :     // If we are currently flowed off via CTS or DSR, then
; 2997 :     // we better signal the TX thread when one of them changes
; 2998 :     // so that TX can resume sending.
; 2999 : 
; 3000 :     EnterCriticalSection(&pPdd->hwCS);

  051b0	e59d3004	 ldr         r3, [sp, #4]
  051b4	e2830098	 add         r0, r3, #0x98
  051b8	eb000000	 bl          EnterCriticalSection

; 3001 : 
; 3002 : 
; 3003 :     if (pPdd->flowOffDSR && ((modemStat & UART_MSR_NDSR) != 0))

  051bc	e59d3004	 ldr         r3, [sp, #4]
  051c0	e2833094	 add         r3, r3, #0x94
  051c4	e5933000	 ldr         r3, [r3]
  051c8	e3530000	 cmp         r3, #0
  051cc	0a000010	 beq         |$LN2@HWModemInt|
  051d0	e5dd3000	 ldrb        r3, [sp]
  051d4	e3130020	 tst         r3, #0x20
  051d8	0a00000d	 beq         |$LN2@HWModemInt|

; 3004 :     {
; 3005 :         // Clear flag
; 3006 :         pPdd->flowOffDSR = FALSE;

  051dc	e59d3004	 ldr         r3, [sp, #4]
  051e0	e2832094	 add         r2, r3, #0x94
  051e4	e3a03000	 mov         r3, #0
  051e8	e5823000	 str         r3, [r2]

; 3007 :         // DSR is set, so go ahead and resume sending
; 3008 :         SetEvent( ((PHW_INDEP_INFO)pPdd->pMdd)->hSerialEvent);

  051ec	e59d3004	 ldr         r3, [sp, #4]
  051f0	e2833050	 add         r3, r3, #0x50
  051f4	e5933000	 ldr         r3, [r3]
  051f8	e2833030	 add         r3, r3, #0x30
  051fc	e5930000	 ldr         r0, [r3]
  05200	eb000000	 bl          SetEvent

; 3009 : 
; 3010 :         // Then simulate a TX intr to get things moving
; 3011 :         pPdd->addTxIntr = TRUE;

  05204	e59d3004	 ldr         r3, [sp, #4]
  05208	e283208c	 add         r2, r3, #0x8C
  0520c	e3a03001	 mov         r3, #1
  05210	e5823000	 str         r3, [r2]
  05214		 |$LN2@HWModemInt|

; 3012 :     }
; 3013 : 
; 3014 :     if (pPdd->flowOffCTS && ((modemStat & UART_MSR_NCTS) != 0))

  05214	e59d3004	 ldr         r3, [sp, #4]
  05218	e2833090	 add         r3, r3, #0x90
  0521c	e5933000	 ldr         r3, [r3]
  05220	e3530000	 cmp         r3, #0
  05224	0a000010	 beq         |$LN1@HWModemInt|
  05228	e5dd3000	 ldrb        r3, [sp]
  0522c	e3130010	 tst         r3, #0x10
  05230	0a00000d	 beq         |$LN1@HWModemInt|

; 3015 :     {
; 3016 :         pPdd->flowOffCTS = FALSE;

  05234	e59d3004	 ldr         r3, [sp, #4]
  05238	e2832090	 add         r2, r3, #0x90
  0523c	e3a03000	 mov         r3, #0
  05240	e5823000	 str         r3, [r2]

; 3017 :         //CTS is set, so go ahead and resume sending
; 3018 :         //Need to simulate an interrupt
; 3019 :         SetEvent( ((PHW_INDEP_INFO)pPdd->pMdd)->hSerialEvent);

  05244	e59d3004	 ldr         r3, [sp, #4]
  05248	e2833050	 add         r3, r3, #0x50
  0524c	e5933000	 ldr         r3, [r3]
  05250	e2833030	 add         r3, r3, #0x30
  05254	e5930000	 ldr         r0, [r3]
  05258	eb000000	 bl          SetEvent

; 3020 : 
; 3021 :         // Then simulate a TX intr to get things moving
; 3022 :         pPdd->addTxIntr = TRUE;

  0525c	e59d3004	 ldr         r3, [sp, #4]
  05260	e283208c	 add         r2, r3, #0x8C
  05264	e3a03001	 mov         r3, #1
  05268	e5823000	 str         r3, [r2]
  0526c		 |$LN1@HWModemInt|

; 3023 :     }
; 3024 : 
; 3025 : 
; 3026 :     LeaveCriticalSection(&pPdd->hwCS);

  0526c	e59d3004	 ldr         r3, [sp, #4]
  05270	e2830098	 add         r0, r3, #0x98
  05274	eb000000	 bl          LeaveCriticalSection

; 3027 :     DEBUGMSG(ZONE_THREAD, (L"-HWModemIntr\r\n"));

  05278	e59f3034	 ldr         r3, [pc, #0x34]
  0527c	e5933440	 ldr         r3, [r3, #0x440]
  05280	e3130040	 tst         r3, #0x40
  05284	0a000004	 beq         |$LN7@HWModemInt|
  05288	e59f0020	 ldr         r0, [pc, #0x20]
  0528c	eb000000	 bl          NKDbgPrintfW
  05290	e3a03001	 mov         r3, #1
  05294	e58d3010	 str         r3, [sp, #0x10]
  05298	ea000001	 b           |$LN8@HWModemInt|
  0529c		 |$LN7@HWModemInt|
  0529c	e3a03000	 mov         r3, #0
  052a0	e58d3010	 str         r3, [sp, #0x10]
  052a4		 |$LN8@HWModemInt|

; 3028 : }

  052a4	e28dd014	 add         sp, sp, #0x14
  052a8	e89d6000	 ldmia       sp, {sp, lr}
  052ac	e12fff1e	 bx          lr
  052b0		 |$LN12@HWModemInt|
  052b0		 |$LN13@HWModemInt|
  052b0	00000000	 DCD         |??_C@_1BO@BDPDOLK@?$AA?9?$AAH?$AAW?$AAM?$AAo?$AAd?$AAe?$AAm?$AAI?$AAn?$AAt?$AAr?$AA?$AN?$AA?6?$AA?$AA@|
  052b4		 |$LN14@HWModemInt|
  052b4	00000000	 DCD         |dpCurSettings|
  052b8		 |$LN15@HWModemInt|
  052b8	00000000	 DCD         |??_C@_1CO@DHIDDEKK@?$AA?$CL?$AAH?$AAW?$AAM?$AAo?$AAd?$AAe?$AAm?$AAI?$AAn?$AAt?$AAr?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  052bc		 |$M47225|

			 ENDP  ; |HWModemIntr|

	EXPORT	|??_C@_1BM@BDDDMECD@?$AA?9?$AAH?$AAW?$AAL?$AAi?$AAn?$AAe?$AAI?$AAn?$AAt?$AAr?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CM@KGGMPCME@?$AA?$CL?$AAH?$AAW?$AAL?$AAi?$AAn?$AAe?$AAI?$AAn?$AAt?$AAr?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  000f8			 AREA	 |.pdata|, PDATA
|$T47240| DCD	|$LN12@HWLineIntr|
	DCD	0x40004604

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@BDDDMECD@?$AA?9?$AAH?$AAW?$AAL?$AAi?$AAn?$AAe?$AAI?$AAn?$AAt?$AAr?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "H", 0x0, "W", 0x0, "L", 0x0, "i", 0x0, "n", 0x0, "e"
	DCB	0x0, "I", 0x0, "n", 0x0, "t", 0x0, "r", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@KGGMPCME@?$AA?$CL?$AAH?$AAW?$AAL?$AAi?$AAn?$AAe?$AAI?$AAn?$AAt?$AAr?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "H", 0x0, "W", 0x0, "L", 0x0, "i", 0x0, "n", 0x0, "e"
	DCB	0x0, "I", 0x0, "n", 0x0, "t", 0x0, "r", 0x0, "(", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  052bc			 AREA	 |.text|, CODE, ARM

  052bc		 |HWLineIntr| PROC

; 3042 : {

  052bc		 |$LN12@HWLineIntr|
  052bc	e1a0c00d	 mov         r12, sp
  052c0	e92d0001	 stmdb       sp!, {r0}
  052c4	e92d5000	 stmdb       sp!, {r12, lr}
  052c8	e24dd014	 sub         sp, sp, #0x14
  052cc		 |$M47237|

; 3043 :     UARTPDD *pPdd = (UARTPDD *)pvContext;

  052cc	e59d301c	 ldr         r3, [sp, #0x1C]
  052d0	e58d3004	 str         r3, [sp, #4]

; 3044 :     OMAP_UART_REGS *pUartRegs = pPdd->pUartRegs;

  052d4	e59d3004	 ldr         r3, [sp, #4]
  052d8	e2833024	 add         r3, r3, #0x24
  052dc	e5933000	 ldr         r3, [r3]
  052e0	e58d3000	 str         r3, [sp]

; 3045 : 
; 3046 :     DEBUGMSG(ZONE_THREAD, (L"+HWLineIntr(0x%08x)\r\n", pvContext));

  052e4	e59f30e0	 ldr         r3, [pc, #0xE0]
  052e8	e5933440	 ldr         r3, [r3, #0x440]
  052ec	e3130040	 tst         r3, #0x40
  052f0	0a000005	 beq         |$LN6@HWLineIntr|
  052f4	e59d101c	 ldr         r1, [sp, #0x1C]
  052f8	e59f00d0	 ldr         r0, [pc, #0xD0]
  052fc	eb000000	 bl          NKDbgPrintfW
  05300	e3a03001	 mov         r3, #1
  05304	e58d3008	 str         r3, [sp, #8]
  05308	ea000001	 b           |$LN7@HWLineIntr|
  0530c		 |$LN6@HWLineIntr|
  0530c	e3a03000	 mov         r3, #0
  05310	e58d3008	 str         r3, [sp, #8]
  05314		 |$LN7@HWLineIntr|

; 3047 : 
; 3048 : 
; 3049 :     if (pPdd->open == TRUE)

  05314	e59d3004	 ldr         r3, [sp, #4]
  05318	e2833054	 add         r3, r3, #0x54
  0531c	e5933000	 ldr         r3, [r3]
  05320	e3530001	 cmp         r3, #1
  05324	1a000019	 bne         |$LN3@HWLineIntr|

; 3050 :     {
; 3051 :         ReadLineStat(pPdd);

  05328	e59d0004	 ldr         r0, [sp, #4]
  0532c	eb000000	 bl          ReadLineStat

; 3052 : 
; 3053 :         EnterCriticalSection(&pPdd->hwCS);

  05330	e59d3004	 ldr         r3, [sp, #4]
  05334	e2830098	 add         r0, r3, #0x98
  05338	eb000000	 bl          EnterCriticalSection

; 3054 : 
; 3055 :         // Reset receiver
; 3056 :         OUTREG8(&pUartRegs->FCR, pPdd->CurrentFCR | UART_FCR_RX_FIFO_CLEAR);

  0533c	e59d3004	 ldr         r3, [sp, #4]
  05340	e2833089	 add         r3, r3, #0x89
  05344	e5d33000	 ldrb        r3, [r3]
  05348	e3833002	 orr         r3, r3, #2
  0534c	e20320ff	 and         r2, r3, #0xFF
  05350	e59d3000	 ldr         r3, [sp]
  05354	e2833008	 add         r3, r3, #8
  05358	e5c32000	 strb        r2, [r3]
  0535c		 |$LN2@HWLineIntr|

; 3057 : 
; 3058 :         // Do we need to read RESUME register in case there was an overrun error in the FIFO?
; 3059 :         //INREG8(&pUartRegs->RESUME);
; 3060 : 
; 3061 :         // Did we not just clear the FIFO?       
; 3062 :         // Read all character in fifo
; 3063 :         while ((ReadLineStat(pPdd) & UART_LSR_RX_FIFO_E) != 0)

  0535c	e59d0004	 ldr         r0, [sp, #4]
  05360	eb000000	 bl          ReadLineStat
  05364	e5cd000c	 strb        r0, [sp, #0xC]
  05368	e5dd300c	 ldrb        r3, [sp, #0xC]
  0536c	e3130001	 tst         r3, #1
  05370	0a000003	 beq         |$LN1@HWLineIntr|

; 3064 :         {
; 3065 :             INREG8(&pUartRegs->RHR);

  05374	e59d3000	 ldr         r3, [sp]
  05378	e5d33000	 ldrb        r3, [r3]
  0537c	e5cd300d	 strb        r3, [sp, #0xD]

; 3066 :         }

  05380	eafffff5	 b           |$LN2@HWLineIntr|
  05384		 |$LN1@HWLineIntr|

; 3067 : 
; 3068 :         LeaveCriticalSection(&pPdd->hwCS);

  05384	e59d3004	 ldr         r3, [sp, #4]
  05388	e2830098	 add         r0, r3, #0x98
  0538c	eb000000	 bl          LeaveCriticalSection
  05390		 |$LN3@HWLineIntr|

; 3069 :     }
; 3070 : 
; 3071 :     DEBUGMSG(ZONE_THREAD, (L"-HWLineIntr\r\n"));

  05390	e59f3034	 ldr         r3, [pc, #0x34]
  05394	e5933440	 ldr         r3, [r3, #0x440]
  05398	e3130040	 tst         r3, #0x40
  0539c	0a000004	 beq         |$LN8@HWLineIntr|
  053a0	e59f0020	 ldr         r0, [pc, #0x20]
  053a4	eb000000	 bl          NKDbgPrintfW
  053a8	e3a03001	 mov         r3, #1
  053ac	e58d3010	 str         r3, [sp, #0x10]
  053b0	ea000001	 b           |$LN9@HWLineIntr|
  053b4		 |$LN8@HWLineIntr|
  053b4	e3a03000	 mov         r3, #0
  053b8	e58d3010	 str         r3, [sp, #0x10]
  053bc		 |$LN9@HWLineIntr|

; 3072 : }

  053bc	e28dd014	 add         sp, sp, #0x14
  053c0	e89d6000	 ldmia       sp, {sp, lr}
  053c4	e12fff1e	 bx          lr
  053c8		 |$LN13@HWLineIntr|
  053c8		 |$LN14@HWLineIntr|
  053c8	00000000	 DCD         |??_C@_1BM@BDDDMECD@?$AA?9?$AAH?$AAW?$AAL?$AAi?$AAn?$AAe?$AAI?$AAn?$AAt?$AAr?$AA?$AN?$AA?6?$AA?$AA@|
  053cc		 |$LN15@HWLineIntr|
  053cc	00000000	 DCD         |dpCurSettings|
  053d0		 |$LN16@HWLineIntr|
  053d0	00000000	 DCD         |??_C@_1CM@KGGMPCME@?$AA?$CL?$AAH?$AAW?$AAL?$AAi?$AAn?$AAe?$AAI?$AAn?$AAt?$AAr?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  053d4		 |$M47238|

			 ENDP  ; |HWLineIntr|

	EXPORT	|??_C@_1CO@COGNIPLC@?$AA?9?$AAH?$AAW?$AAG?$AAe?$AAt?$AAR?$AAx?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AAS?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CO@PFKJNAJJ@?$AA?$CL?$AAH?$AAW?$AAG?$AAe?$AAt?$AAR?$AAx?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AAS?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00100			 AREA	 |.pdata|, PDATA
|$T47254| DCD	|$LN9@HWGetRxBuf|
	DCD	0x40002704

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@COGNIPLC@?$AA?9?$AAH?$AAW?$AAG?$AAe?$AAt?$AAR?$AAx?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AAS?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "H", 0x0, "W", 0x0, "G", 0x0, "e", 0x0, "t", 0x0, "R"
	DCB	0x0, "x", 0x0, "B", 0x0, "u", 0x0, "f", 0x0, "f", 0x0, "e"
	DCB	0x0, "r", 0x0, "S", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, "("
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@PFKJNAJJ@?$AA?$CL?$AAH?$AAW?$AAG?$AAe?$AAt?$AAR?$AAx?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AAS?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "H", 0x0, "W", 0x0, "G", 0x0, "e", 0x0, "t", 0x0, "R"
	DCB	0x0, "x", 0x0, "B", 0x0, "u", 0x0, "f", 0x0, "f", 0x0, "e"
	DCB	0x0, "r", 0x0, "S", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, "("
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  053d4			 AREA	 |.text|, CODE, ARM

  053d4		 |HWGetRxBufferSize| PROC

; 3086 : {

  053d4		 |$LN9@HWGetRxBuf|
  053d4	e1a0c00d	 mov         r12, sp
  053d8	e92d0001	 stmdb       sp!, {r0}
  053dc	e92d5000	 stmdb       sp!, {r12, lr}
  053e0	e24dd010	 sub         sp, sp, #0x10
  053e4		 |$M47251|

; 3087 :     UARTPDD *pPdd = (UARTPDD *)pvContext;

  053e4	e59d3018	 ldr         r3, [sp, #0x18]
  053e8	e58d3000	 str         r3, [sp]

; 3088 : 
; 3089 :     DEBUGMSG(ZONE_FUNCTION, (TEXT("+HWGetRxBufferSize()\r\n")));

  053ec	e59f3074	 ldr         r3, [pc, #0x74]
  053f0	e5933440	 ldr         r3, [r3, #0x440]
  053f4	e3130a02	 tst         r3, #2, 20
  053f8	0a000004	 beq         |$LN3@HWGetRxBuf|
  053fc	e59f0068	 ldr         r0, [pc, #0x68]
  05400	eb000000	 bl          NKDbgPrintfW
  05404	e3a03001	 mov         r3, #1
  05408	e58d3008	 str         r3, [sp, #8]
  0540c	ea000001	 b           |$LN4@HWGetRxBuf|
  05410		 |$LN3@HWGetRxBuf|
  05410	e3a03000	 mov         r3, #0
  05414	e58d3008	 str         r3, [sp, #8]
  05418		 |$LN4@HWGetRxBuf|

; 3090 :     DEBUGMSG(ZONE_FUNCTION, (TEXT("-HWGetRxBufferSize()\r\n")));

  05418	e59f3048	 ldr         r3, [pc, #0x48]
  0541c	e5933440	 ldr         r3, [r3, #0x440]
  05420	e3130a02	 tst         r3, #2, 20
  05424	0a000004	 beq         |$LN5@HWGetRxBuf|
  05428	e59f0034	 ldr         r0, [pc, #0x34]
  0542c	eb000000	 bl          NKDbgPrintfW
  05430	e3a03001	 mov         r3, #1
  05434	e58d300c	 str         r3, [sp, #0xC]
  05438	ea000001	 b           |$LN6@HWGetRxBuf|
  0543c		 |$LN5@HWGetRxBuf|
  0543c	e3a03000	 mov         r3, #0
  05440	e58d300c	 str         r3, [sp, #0xC]
  05444		 |$LN6@HWGetRxBuf|

; 3091 :     return pPdd->rxBufferSize;

  05444	e59d3000	 ldr         r3, [sp]
  05448	e2833018	 add         r3, r3, #0x18
  0544c	e5933000	 ldr         r3, [r3]
  05450	e58d3004	 str         r3, [sp, #4]

; 3092 : }

  05454	e59d0004	 ldr         r0, [sp, #4]
  05458	e28dd010	 add         sp, sp, #0x10
  0545c	e89d6000	 ldmia       sp, {sp, lr}
  05460	e12fff1e	 bx          lr
  05464		 |$LN10@HWGetRxBuf|
  05464		 |$LN11@HWGetRxBuf|
  05464	00000000	 DCD         |??_C@_1CO@COGNIPLC@?$AA?9?$AAH?$AAW?$AAG?$AAe?$AAt?$AAR?$AAx?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AAS?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  05468		 |$LN12@HWGetRxBuf|
  05468	00000000	 DCD         |dpCurSettings|
  0546c		 |$LN13@HWGetRxBuf|
  0546c	00000000	 DCD         |??_C@_1CO@PFKJNAJJ@?$AA?$CL?$AAH?$AAW?$AAG?$AAe?$AAt?$AAR?$AAx?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AAS?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  05470		 |$M47252|

			 ENDP  ; |HWGetRxBufferSize|


  00108			 AREA	 |.pdata|, PDATA
|$T47264| DCD	|$LN5@HWPowerOff|
	DCD	0x40000a04
; Function compile flags: /Odtp

  05470			 AREA	 |.text|, CODE, ARM

  05470		 |HWPowerOff| PROC

; 3106 : {

  05470		 |$LN5@HWPowerOff|
  05470	e1a0c00d	 mov         r12, sp
  05474	e92d0001	 stmdb       sp!, {r0}
  05478	e92d5000	 stmdb       sp!, {r12, lr}
  0547c	e24dd004	 sub         sp, sp, #4
  05480		 |$M47261|

; 3107 :     UNREFERENCED_PARAMETER(pvContext);
; 3108 :     return TRUE;

  05480	e3a03001	 mov         r3, #1
  05484	e58d3000	 str         r3, [sp]

; 3109 : }

  05488	e59d0000	 ldr         r0, [sp]
  0548c	e28dd004	 add         sp, sp, #4
  05490	e89d6000	 ldmia       sp, {sp, lr}
  05494	e12fff1e	 bx          lr
  05498		 |$M47262|

			 ENDP  ; |HWPowerOff|


  00110			 AREA	 |.pdata|, PDATA
|$T47270| DCD	|$LN5@HWPowerOn|
	DCD	0x40000a04
; Function compile flags: /Odtp

  05498			 AREA	 |.text|, CODE, ARM

  05498		 |HWPowerOn| PROC

; 3123 : {

  05498		 |$LN5@HWPowerOn|
  05498	e1a0c00d	 mov         r12, sp
  0549c	e92d0001	 stmdb       sp!, {r0}
  054a0	e92d5000	 stmdb       sp!, {r12, lr}
  054a4	e24dd004	 sub         sp, sp, #4
  054a8		 |$M47267|

; 3124 :     UNREFERENCED_PARAMETER(pvContext);
; 3125 :     return TRUE;

  054a8	e3a03001	 mov         r3, #1
  054ac	e58d3000	 str         r3, [sp]

; 3126 : }

  054b0	e59d0000	 ldr         r0, [sp]
  054b4	e28dd004	 add         sp, sp, #4
  054b8	e89d6000	 ldmia       sp, {sp, lr}
  054bc	e12fff1e	 bx          lr
  054c0		 |$M47268|

			 ENDP  ; |HWPowerOn|

	EXPORT	|??_C@_1BM@GNAGBOND@?$AA?9?$AAH?$AAW?$AAC?$AAl?$AAe?$AAa?$AAr?$AAD?$AAT?$AAR?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CM@ONIBJPFL@?$AA?$CL?$AAH?$AAW?$AAC?$AAl?$AAe?$AAa?$AAr?$AAD?$AAT?$AAR?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00118			 AREA	 |.pdata|, PDATA
|$T47279| DCD	|$LN9@HWClearDTR|
	DCD	0x40004304

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@GNAGBOND@?$AA?9?$AAH?$AAW?$AAC?$AAl?$AAe?$AAa?$AAr?$AAD?$AAT?$AAR?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "H", 0x0, "W", 0x0, "C", 0x0, "l", 0x0, "e", 0x0, "a"
	DCB	0x0, "r", 0x0, "D", 0x0, "T", 0x0, "R", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@ONIBJPFL@?$AA?$CL?$AAH?$AAW?$AAC?$AAl?$AAe?$AAa?$AAr?$AAD?$AAT?$AAR?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "H", 0x0, "W", 0x0, "C", 0x0, "l", 0x0, "e", 0x0, "a"
	DCB	0x0, "r", 0x0, "D", 0x0, "T", 0x0, "R", 0x0, "(", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  054c0			 AREA	 |.text|, CODE, ARM

  054c0		 |HWClearDTR| PROC

; 3139 : {

  054c0		 |$LN9@HWClearDTR|
  054c0	e1a0c00d	 mov         r12, sp
  054c4	e92d0001	 stmdb       sp!, {r0}
  054c8	e92d5000	 stmdb       sp!, {r12, lr}
  054cc	e24dd010	 sub         sp, sp, #0x10
  054d0		 |$M47276|

; 3140 :     UARTPDD *pPdd = (UARTPDD*)pvContext;

  054d0	e59d3018	 ldr         r3, [sp, #0x18]
  054d4	e58d3004	 str         r3, [sp, #4]

; 3141 :     OMAP_UART_REGS *pUartRegs = pPdd->pUartRegs;

  054d8	e59d3004	 ldr         r3, [sp, #4]
  054dc	e2833024	 add         r3, r3, #0x24
  054e0	e5933000	 ldr         r3, [r3]
  054e4	e58d3000	 str         r3, [sp]

; 3142 : 
; 3143 : 
; 3144 :     DEBUGMSG(ZONE_FUNCTION, (L"+HWClearDTR(0x%08x)\r\n", pvContext));

  054e8	e59f30d4	 ldr         r3, [pc, #0xD4]
  054ec	e5933440	 ldr         r3, [r3, #0x440]
  054f0	e3130a02	 tst         r3, #2, 20
  054f4	0a000005	 beq         |$LN3@HWClearDTR|
  054f8	e59d1018	 ldr         r1, [sp, #0x18]
  054fc	e59f00c4	 ldr         r0, [pc, #0xC4]
  05500	eb000000	 bl          NKDbgPrintfW
  05504	e3a03001	 mov         r3, #1
  05508	e58d3008	 str         r3, [sp, #8]
  0550c	ea000001	 b           |$LN4@HWClearDTR|
  05510		 |$LN3@HWClearDTR|
  05510	e3a03000	 mov         r3, #0
  05514	e58d3008	 str         r3, [sp, #8]
  05518		 |$LN4@HWClearDTR|

; 3145 : 
; 3146 :     EnterCriticalSection(&pPdd->hwCS);

  05518	e59d3004	 ldr         r3, [sp, #4]
  0551c	e2830098	 add         r0, r3, #0x98
  05520	eb000000	 bl          EnterCriticalSection

; 3147 : 
; 3148 :     pPdd->currentMCR &= ~UART_MCR_DTR;

  05524	e59d3004	 ldr         r3, [sp, #4]
  05528	e2833c01	 add         r3, r3, #1, 24
  0552c	e283307d	 add         r3, r3, #0x7D
  05530	e5d33000	 ldrb        r3, [r3]
  05534	e1a02003	 mov         r2, r3
  05538	e3e03001	 mvn         r3, #1
  0553c	e0021003	 and         r1, r2, r3
  05540	e59d3004	 ldr         r3, [sp, #4]
  05544	e2833c01	 add         r3, r3, #1, 24
  05548	e283207d	 add         r2, r3, #0x7D
  0554c	e20130ff	 and         r3, r1, #0xFF
  05550	e5c23000	 strb        r3, [r2]

; 3149 :     CLRREG8(&pUartRegs->MCR, UART_MCR_DTR);

  05554	e59d3000	 ldr         r3, [sp]
  05558	e2833010	 add         r3, r3, #0x10
  0555c	e5d33000	 ldrb        r3, [r3]
  05560	e1a02003	 mov         r2, r3
  05564	e3e03001	 mvn         r3, #1
  05568	e0023003	 and         r3, r2, r3
  0556c	e20320ff	 and         r2, r3, #0xFF
  05570	e59d3000	 ldr         r3, [sp]
  05574	e2833010	 add         r3, r3, #0x10
  05578	e5c32000	 strb        r2, [r3]

; 3150 : 
; 3151 :     LeaveCriticalSection(&pPdd->hwCS);

  0557c	e59d3004	 ldr         r3, [sp, #4]
  05580	e2830098	 add         r0, r3, #0x98
  05584	eb000000	 bl          LeaveCriticalSection

; 3152 : 
; 3153 :     DEBUGMSG(ZONE_FUNCTION, (L"-HWClearDTR\r\n"));

  05588	e59f3034	 ldr         r3, [pc, #0x34]
  0558c	e5933440	 ldr         r3, [r3, #0x440]
  05590	e3130a02	 tst         r3, #2, 20
  05594	0a000004	 beq         |$LN5@HWClearDTR|
  05598	e59f0020	 ldr         r0, [pc, #0x20]
  0559c	eb000000	 bl          NKDbgPrintfW
  055a0	e3a03001	 mov         r3, #1
  055a4	e58d300c	 str         r3, [sp, #0xC]
  055a8	ea000001	 b           |$LN6@HWClearDTR|
  055ac		 |$LN5@HWClearDTR|
  055ac	e3a03000	 mov         r3, #0
  055b0	e58d300c	 str         r3, [sp, #0xC]
  055b4		 |$LN6@HWClearDTR|

; 3154 : }

  055b4	e28dd010	 add         sp, sp, #0x10
  055b8	e89d6000	 ldmia       sp, {sp, lr}
  055bc	e12fff1e	 bx          lr
  055c0		 |$LN10@HWClearDTR|
  055c0		 |$LN11@HWClearDTR|
  055c0	00000000	 DCD         |??_C@_1BM@GNAGBOND@?$AA?9?$AAH?$AAW?$AAC?$AAl?$AAe?$AAa?$AAr?$AAD?$AAT?$AAR?$AA?$AN?$AA?6?$AA?$AA@|
  055c4		 |$LN12@HWClearDTR|
  055c4	00000000	 DCD         |dpCurSettings|
  055c8		 |$LN13@HWClearDTR|
  055c8	00000000	 DCD         |??_C@_1CM@ONIBJPFL@?$AA?$CL?$AAH?$AAW?$AAC?$AAl?$AAe?$AAa?$AAr?$AAD?$AAT?$AAR?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  055cc		 |$M47277|

			 ENDP  ; |HWClearDTR|

	EXPORT	|??_C@_1BI@FGHIJEGN@?$AA?9?$AAH?$AAW?$AAS?$AAe?$AAt?$AAD?$AAT?$AAR?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@CBKDAIFP@?$AA?$CL?$AAH?$AAW?$AAS?$AAe?$AAt?$AAD?$AAT?$AAR?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00120			 AREA	 |.pdata|, PDATA
|$T47292| DCD	|$LN9@HWSetDTR|
	DCD	0x40003f04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BI@FGHIJEGN@?$AA?9?$AAH?$AAW?$AAS?$AAe?$AAt?$AAD?$AAT?$AAR?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "H", 0x0, "W", 0x0, "S", 0x0, "e", 0x0, "t", 0x0, "D"
	DCB	0x0, "T", 0x0, "R", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@CBKDAIFP@?$AA?$CL?$AAH?$AAW?$AAS?$AAe?$AAt?$AAD?$AAT?$AAR?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "H", 0x0, "W", 0x0, "S", 0x0, "e", 0x0, "t", 0x0, "D"
	DCB	0x0, "T", 0x0, "R", 0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "8", 0x0, "x", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  055cc			 AREA	 |.text|, CODE, ARM

  055cc		 |HWSetDTR| PROC

; 3168 : {

  055cc		 |$LN9@HWSetDTR|
  055cc	e1a0c00d	 mov         r12, sp
  055d0	e92d0001	 stmdb       sp!, {r0}
  055d4	e92d5000	 stmdb       sp!, {r12, lr}
  055d8	e24dd010	 sub         sp, sp, #0x10
  055dc		 |$M47289|

; 3169 :     UARTPDD *pPdd = (UARTPDD*)pvContext;

  055dc	e59d3018	 ldr         r3, [sp, #0x18]
  055e0	e58d3004	 str         r3, [sp, #4]

; 3170 :     OMAP_UART_REGS *pUartRegs = pPdd->pUartRegs;

  055e4	e59d3004	 ldr         r3, [sp, #4]
  055e8	e2833024	 add         r3, r3, #0x24
  055ec	e5933000	 ldr         r3, [r3]
  055f0	e58d3000	 str         r3, [sp]

; 3171 : 
; 3172 : 
; 3173 :     DEBUGMSG(ZONE_FUNCTION, (L"+HWSetDTR(0x%08x)\r\n", pvContext));

  055f4	e59f30c4	 ldr         r3, [pc, #0xC4]
  055f8	e5933440	 ldr         r3, [r3, #0x440]
  055fc	e3130a02	 tst         r3, #2, 20
  05600	0a000005	 beq         |$LN3@HWSetDTR|
  05604	e59d1018	 ldr         r1, [sp, #0x18]
  05608	e59f00b4	 ldr         r0, [pc, #0xB4]
  0560c	eb000000	 bl          NKDbgPrintfW
  05610	e3a03001	 mov         r3, #1
  05614	e58d3008	 str         r3, [sp, #8]
  05618	ea000001	 b           |$LN4@HWSetDTR|
  0561c		 |$LN3@HWSetDTR|
  0561c	e3a03000	 mov         r3, #0
  05620	e58d3008	 str         r3, [sp, #8]
  05624		 |$LN4@HWSetDTR|

; 3174 : 
; 3175 :     EnterCriticalSection(&pPdd->hwCS);

  05624	e59d3004	 ldr         r3, [sp, #4]
  05628	e2830098	 add         r0, r3, #0x98
  0562c	eb000000	 bl          EnterCriticalSection

; 3176 : 
; 3177 :     pPdd->currentMCR |= UART_MCR_DTR;

  05630	e59d3004	 ldr         r3, [sp, #4]
  05634	e2833c01	 add         r3, r3, #1, 24
  05638	e283307d	 add         r3, r3, #0x7D
  0563c	e5d33000	 ldrb        r3, [r3]
  05640	e3831001	 orr         r1, r3, #1
  05644	e59d3004	 ldr         r3, [sp, #4]
  05648	e2833c01	 add         r3, r3, #1, 24
  0564c	e283207d	 add         r2, r3, #0x7D
  05650	e20130ff	 and         r3, r1, #0xFF
  05654	e5c23000	 strb        r3, [r2]

; 3178 :     SETREG8(&pUartRegs->MCR, UART_MCR_DTR);

  05658	e59d3000	 ldr         r3, [sp]
  0565c	e2833010	 add         r3, r3, #0x10
  05660	e5d33000	 ldrb        r3, [r3]
  05664	e3833001	 orr         r3, r3, #1
  05668	e20320ff	 and         r2, r3, #0xFF
  0566c	e59d3000	 ldr         r3, [sp]
  05670	e2833010	 add         r3, r3, #0x10
  05674	e5c32000	 strb        r2, [r3]

; 3179 : 
; 3180 :     LeaveCriticalSection(&pPdd->hwCS);

  05678	e59d3004	 ldr         r3, [sp, #4]
  0567c	e2830098	 add         r0, r3, #0x98
  05680	eb000000	 bl          LeaveCriticalSection

; 3181 : 
; 3182 :     DEBUGMSG(ZONE_FUNCTION, (L"-HWSetDTR\r\n"));

  05684	e59f3034	 ldr         r3, [pc, #0x34]
  05688	e5933440	 ldr         r3, [r3, #0x440]
  0568c	e3130a02	 tst         r3, #2, 20
  05690	0a000004	 beq         |$LN5@HWSetDTR|
  05694	e59f0020	 ldr         r0, [pc, #0x20]
  05698	eb000000	 bl          NKDbgPrintfW
  0569c	e3a03001	 mov         r3, #1
  056a0	e58d300c	 str         r3, [sp, #0xC]
  056a4	ea000001	 b           |$LN6@HWSetDTR|
  056a8		 |$LN5@HWSetDTR|
  056a8	e3a03000	 mov         r3, #0
  056ac	e58d300c	 str         r3, [sp, #0xC]
  056b0		 |$LN6@HWSetDTR|

; 3183 : }

  056b0	e28dd010	 add         sp, sp, #0x10
  056b4	e89d6000	 ldmia       sp, {sp, lr}
  056b8	e12fff1e	 bx          lr
  056bc		 |$LN10@HWSetDTR|
  056bc		 |$LN11@HWSetDTR|
  056bc	00000000	 DCD         |??_C@_1BI@FGHIJEGN@?$AA?9?$AAH?$AAW?$AAS?$AAe?$AAt?$AAD?$AAT?$AAR?$AA?$AN?$AA?6?$AA?$AA@|
  056c0		 |$LN12@HWSetDTR|
  056c0	00000000	 DCD         |dpCurSettings|
  056c4		 |$LN13@HWSetDTR|
  056c4	00000000	 DCD         |??_C@_1CI@CBKDAIFP@?$AA?$CL?$AAH?$AAW?$AAS?$AAe?$AAt?$AAD?$AAT?$AAR?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  056c8		 |$M47290|

			 ENDP  ; |HWSetDTR|

	EXPORT	|??_C@_1BM@ECIJFGFB@?$AA?9?$AAH?$AAW?$AAC?$AAl?$AAe?$AAa?$AAr?$AAR?$AAT?$AAS?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CM@HCEHCFOC@?$AA?$CL?$AAH?$AAW?$AAC?$AAl?$AAe?$AAa?$AAr?$AAR?$AAT?$AAS?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00128			 AREA	 |.pdata|, PDATA
|$T47303| DCD	|$LN9@HWClearRTS|
	DCD	0x40005604

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@ECIJFGFB@?$AA?9?$AAH?$AAW?$AAC?$AAl?$AAe?$AAa?$AAr?$AAR?$AAT?$AAS?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "H", 0x0, "W", 0x0, "C", 0x0, "l", 0x0, "e", 0x0, "a"
	DCB	0x0, "r", 0x0, "R", 0x0, "T", 0x0, "S", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@HCEHCFOC@?$AA?$CL?$AAH?$AAW?$AAC?$AAl?$AAe?$AAa?$AAr?$AAR?$AAT?$AAS?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "H", 0x0, "W", 0x0, "C", 0x0, "l", 0x0, "e", 0x0, "a"
	DCB	0x0, "r", 0x0, "R", 0x0, "T", 0x0, "S", 0x0, "(", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  056c8			 AREA	 |.text|, CODE, ARM

  056c8		 |HWClearRTS| PROC

; 3197 : {

  056c8		 |$LN9@HWClearRTS|
  056c8	e1a0c00d	 mov         r12, sp
  056cc	e92d0001	 stmdb       sp!, {r0}
  056d0	e92d5000	 stmdb       sp!, {r12, lr}
  056d4	e24dd00c	 sub         sp, sp, #0xC
  056d8		 |$M47300|

; 3198 :     UARTPDD *pPdd = (UARTPDD*)pvContext;

  056d8	e59d3014	 ldr         r3, [sp, #0x14]
  056dc	e58d3004	 str         r3, [sp, #4]

; 3199 :     OMAP_UART_REGS *pUartRegs = pPdd->pUartRegs;

  056e0	e59d3004	 ldr         r3, [sp, #4]
  056e4	e2833024	 add         r3, r3, #0x24
  056e8	e5933000	 ldr         r3, [r3]
  056ec	e58d3000	 str         r3, [sp]

; 3200 : 
; 3201 :     DEBUGMSG(TRUE||ZONE_FUNCTION, (L"+HWClearRTS(0x%08x)\r\n", pvContext));

  056f0	e59d1014	 ldr         r1, [sp, #0x14]
  056f4	e59f0120	 ldr         r0, [pc, #0x120]
  056f8	eb000000	 bl          NKDbgPrintfW

; 3202 : 
; 3203 :     if (pPdd->autoRTS)

  056fc	e59d3004	 ldr         r3, [sp, #4]
  05700	e283307c	 add         r3, r3, #0x7C
  05704	e5933000	 ldr         r3, [r3]
  05708	e3530000	 cmp         r3, #0
  0570c	0a000016	 beq         |$LN2@HWClearRTS|

; 3204 :     {
; 3205 :         EnterCriticalSection(&pPdd->hwCS);

  05710	e59d3004	 ldr         r3, [sp, #4]
  05714	e2830098	 add         r0, r3, #0x98
  05718	eb000000	 bl          EnterCriticalSection

; 3206 : 
; 3207 :         // We should disable RX interrupt, this will result in auto RTS
; 3208 :         pPdd->intrMask &= ~UART_IER_RHR;

  0571c	e59d3004	 ldr         r3, [sp, #4]
  05720	e2833088	 add         r3, r3, #0x88
  05724	e5d33000	 ldrb        r3, [r3]
  05728	e1a02003	 mov         r2, r3
  0572c	e3e03001	 mvn         r3, #1
  05730	e0021003	 and         r1, r2, r3
  05734	e59d3004	 ldr         r3, [sp, #4]
  05738	e2832088	 add         r2, r3, #0x88
  0573c	e20130ff	 and         r3, r1, #0xFF
  05740	e5c23000	 strb        r3, [r2]

; 3209 :         OUTREG8(&pUartRegs->IER, pPdd->intrMask);

  05744	e59d3004	 ldr         r3, [sp, #4]
  05748	e2831088	 add         r1, r3, #0x88
  0574c	e59d3000	 ldr         r3, [sp]
  05750	e2832004	 add         r2, r3, #4
  05754	e5d13000	 ldrb        r3, [r1]
  05758	e5c23000	 strb        r3, [r2]

; 3210 : 
; 3211 :         LeaveCriticalSection(&pPdd->hwCS);

  0575c	e59d3004	 ldr         r3, [sp, #4]
  05760	e2830098	 add         r0, r3, #0x98
  05764	eb000000	 bl          LeaveCriticalSection

; 3212 :     }
; 3213 :     else

  05768	ea00001b	 b           |$LN1@HWClearRTS|
  0576c		 |$LN2@HWClearRTS|

; 3214 :     {
; 3215 :         EnterCriticalSection(&pPdd->hwCS);

  0576c	e59d3004	 ldr         r3, [sp, #4]
  05770	e2830098	 add         r0, r3, #0x98
  05774	eb000000	 bl          EnterCriticalSection

; 3216 : 
; 3217 :         pPdd->currentMCR &= ~UART_MCR_RTS;

  05778	e59d3004	 ldr         r3, [sp, #4]
  0577c	e2833c01	 add         r3, r3, #1, 24
  05780	e283307d	 add         r3, r3, #0x7D
  05784	e5d33000	 ldrb        r3, [r3]
  05788	e1a02003	 mov         r2, r3
  0578c	e3e03002	 mvn         r3, #2
  05790	e0021003	 and         r1, r2, r3
  05794	e59d3004	 ldr         r3, [sp, #4]
  05798	e2833c01	 add         r3, r3, #1, 24
  0579c	e283207d	 add         r2, r3, #0x7D
  057a0	e20130ff	 and         r3, r1, #0xFF
  057a4	e5c23000	 strb        r3, [r2]

; 3218 :         CLRREG8(&pUartRegs->MCR, UART_MCR_RTS);

  057a8	e59d3000	 ldr         r3, [sp]
  057ac	e2833010	 add         r3, r3, #0x10
  057b0	e5d33000	 ldrb        r3, [r3]
  057b4	e1a02003	 mov         r2, r3
  057b8	e3e03002	 mvn         r3, #2
  057bc	e0023003	 and         r3, r2, r3
  057c0	e20320ff	 and         r2, r3, #0xFF
  057c4	e59d3000	 ldr         r3, [sp]
  057c8	e2833010	 add         r3, r3, #0x10
  057cc	e5c32000	 strb        r2, [r3]

; 3219 : 
; 3220 :         LeaveCriticalSection(&pPdd->hwCS);

  057d0	e59d3004	 ldr         r3, [sp, #4]
  057d4	e2830098	 add         r0, r3, #0x98
  057d8	eb000000	 bl          LeaveCriticalSection
  057dc		 |$LN1@HWClearRTS|

; 3221 :     }
; 3222 : 
; 3223 :     DEBUGMSG(ZONE_FUNCTION, (L"-HWClearRTS\r\n"));

  057dc	e59f3034	 ldr         r3, [pc, #0x34]
  057e0	e5933440	 ldr         r3, [r3, #0x440]
  057e4	e3130a02	 tst         r3, #2, 20
  057e8	0a000004	 beq         |$LN5@HWClearRTS|
  057ec	e59f0020	 ldr         r0, [pc, #0x20]
  057f0	eb000000	 bl          NKDbgPrintfW
  057f4	e3a03001	 mov         r3, #1
  057f8	e58d3008	 str         r3, [sp, #8]
  057fc	ea000001	 b           |$LN6@HWClearRTS|
  05800		 |$LN5@HWClearRTS|
  05800	e3a03000	 mov         r3, #0
  05804	e58d3008	 str         r3, [sp, #8]
  05808		 |$LN6@HWClearRTS|

; 3224 : }

  05808	e28dd00c	 add         sp, sp, #0xC
  0580c	e89d6000	 ldmia       sp, {sp, lr}
  05810	e12fff1e	 bx          lr
  05814		 |$LN10@HWClearRTS|
  05814		 |$LN11@HWClearRTS|
  05814	00000000	 DCD         |??_C@_1BM@ECIJFGFB@?$AA?9?$AAH?$AAW?$AAC?$AAl?$AAe?$AAa?$AAr?$AAR?$AAT?$AAS?$AA?$AN?$AA?6?$AA?$AA@|
  05818		 |$LN12@HWClearRTS|
  05818	00000000	 DCD         |dpCurSettings|
  0581c		 |$LN13@HWClearRTS|
  0581c	00000000	 DCD         |??_C@_1CM@HCEHCFOC@?$AA?$CL?$AAH?$AAW?$AAC?$AAl?$AAe?$AAa?$AAr?$AAR?$AAT?$AAS?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  05820		 |$M47301|

			 ENDP  ; |HWClearRTS|

	EXPORT	|??_C@_1BG@LHCJELIJ@?$AA?9?$AAH?$AAW?$AAS?$AAe?$AAt?$AAR?$AAT?$AAS?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@LOGFLCOG@?$AA?$CL?$AAH?$AAW?$AAS?$AAe?$AAt?$AAR?$AAT?$AAS?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00130			 AREA	 |.pdata|, PDATA
|$T47314| DCD	|$LN9@HWSetRTS|
	DCD	0x40005004

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BG@LHCJELIJ@?$AA?9?$AAH?$AAW?$AAS?$AAe?$AAt?$AAR?$AAT?$AAS?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "H", 0x0, "W", 0x0, "S", 0x0, "e", 0x0, "t", 0x0, "R"
	DCB	0x0, "T", 0x0, "S", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@LOGFLCOG@?$AA?$CL?$AAH?$AAW?$AAS?$AAe?$AAt?$AAR?$AAT?$AAS?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "H", 0x0, "W", 0x0, "S", 0x0, "e", 0x0, "t", 0x0, "R"
	DCB	0x0, "T", 0x0, "S", 0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "8", 0x0, "x", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  05820			 AREA	 |.text|, CODE, ARM

  05820		 |HWSetRTS| PROC

; 3237 : {

  05820		 |$LN9@HWSetRTS|
  05820	e1a0c00d	 mov         r12, sp
  05824	e92d0001	 stmdb       sp!, {r0}
  05828	e92d5000	 stmdb       sp!, {r12, lr}
  0582c	e24dd00c	 sub         sp, sp, #0xC
  05830		 |$M47311|

; 3238 :     UARTPDD *pPdd = (UARTPDD*)pvContext;

  05830	e59d3014	 ldr         r3, [sp, #0x14]
  05834	e58d3004	 str         r3, [sp, #4]

; 3239 :     OMAP_UART_REGS *pUartRegs = pPdd->pUartRegs;

  05838	e59d3004	 ldr         r3, [sp, #4]
  0583c	e2833024	 add         r3, r3, #0x24
  05840	e5933000	 ldr         r3, [r3]
  05844	e58d3000	 str         r3, [sp]

; 3240 : 
; 3241 :     DEBUGMSG(TRUE||ZONE_FUNCTION, (L"+HWSetRTS(0x%08x)\r\n", pvContext));

  05848	e59d1014	 ldr         r1, [sp, #0x14]
  0584c	e59f0108	 ldr         r0, [pc, #0x108]
  05850	eb000000	 bl          NKDbgPrintfW

; 3242 : 
; 3243 :     if (pPdd->autoRTS)

  05854	e59d3004	 ldr         r3, [sp, #4]
  05858	e283307c	 add         r3, r3, #0x7C
  0585c	e5933000	 ldr         r3, [r3]
  05860	e3530000	 cmp         r3, #0
  05864	0a000014	 beq         |$LN2@HWSetRTS|

; 3244 :     {
; 3245 :         EnterCriticalSection(&pPdd->hwCS);

  05868	e59d3004	 ldr         r3, [sp, #4]
  0586c	e2830098	 add         r0, r3, #0x98
  05870	eb000000	 bl          EnterCriticalSection

; 3246 : 
; 3247 :         // We should enable RX interrupt
; 3248 :         pPdd->intrMask |= UART_IER_RHR;

  05874	e59d3004	 ldr         r3, [sp, #4]
  05878	e2833088	 add         r3, r3, #0x88
  0587c	e5d33000	 ldrb        r3, [r3]
  05880	e3831001	 orr         r1, r3, #1
  05884	e59d3004	 ldr         r3, [sp, #4]
  05888	e2832088	 add         r2, r3, #0x88
  0588c	e20130ff	 and         r3, r1, #0xFF
  05890	e5c23000	 strb        r3, [r2]

; 3249 :         OUTREG8(&pUartRegs->IER, pPdd->intrMask);

  05894	e59d3004	 ldr         r3, [sp, #4]
  05898	e2831088	 add         r1, r3, #0x88
  0589c	e59d3000	 ldr         r3, [sp]
  058a0	e2832004	 add         r2, r3, #4
  058a4	e5d13000	 ldrb        r3, [r1]
  058a8	e5c23000	 strb        r3, [r2]

; 3250 : 
; 3251 :         LeaveCriticalSection(&pPdd->hwCS);

  058ac	e59d3004	 ldr         r3, [sp, #4]
  058b0	e2830098	 add         r0, r3, #0x98
  058b4	eb000000	 bl          LeaveCriticalSection

; 3252 :     }
; 3253 :     else

  058b8	ea000017	 b           |$LN1@HWSetRTS|
  058bc		 |$LN2@HWSetRTS|

; 3254 :     {
; 3255 :         EnterCriticalSection(&pPdd->hwCS);

  058bc	e59d3004	 ldr         r3, [sp, #4]
  058c0	e2830098	 add         r0, r3, #0x98
  058c4	eb000000	 bl          EnterCriticalSection

; 3256 : 
; 3257 :         pPdd->currentMCR |= UART_MCR_RTS;

  058c8	e59d3004	 ldr         r3, [sp, #4]
  058cc	e2833c01	 add         r3, r3, #1, 24
  058d0	e283307d	 add         r3, r3, #0x7D
  058d4	e5d33000	 ldrb        r3, [r3]
  058d8	e3831002	 orr         r1, r3, #2
  058dc	e59d3004	 ldr         r3, [sp, #4]
  058e0	e2833c01	 add         r3, r3, #1, 24
  058e4	e283207d	 add         r2, r3, #0x7D
  058e8	e20130ff	 and         r3, r1, #0xFF
  058ec	e5c23000	 strb        r3, [r2]

; 3258 :         SETREG8(&pUartRegs->MCR, UART_MCR_RTS);

  058f0	e59d3000	 ldr         r3, [sp]
  058f4	e2833010	 add         r3, r3, #0x10
  058f8	e5d33000	 ldrb        r3, [r3]
  058fc	e3833002	 orr         r3, r3, #2
  05900	e20320ff	 and         r2, r3, #0xFF
  05904	e59d3000	 ldr         r3, [sp]
  05908	e2833010	 add         r3, r3, #0x10
  0590c	e5c32000	 strb        r2, [r3]

; 3259 : 
; 3260 :         LeaveCriticalSection(&pPdd->hwCS);

  05910	e59d3004	 ldr         r3, [sp, #4]
  05914	e2830098	 add         r0, r3, #0x98
  05918	eb000000	 bl          LeaveCriticalSection
  0591c		 |$LN1@HWSetRTS|

; 3261 :     }
; 3262 : 
; 3263 :     DEBUGMSG(ZONE_FUNCTION, (L"-HWSetRTS\n"));

  0591c	e59f3034	 ldr         r3, [pc, #0x34]
  05920	e5933440	 ldr         r3, [r3, #0x440]
  05924	e3130a02	 tst         r3, #2, 20
  05928	0a000004	 beq         |$LN5@HWSetRTS|
  0592c	e59f0020	 ldr         r0, [pc, #0x20]
  05930	eb000000	 bl          NKDbgPrintfW
  05934	e3a03001	 mov         r3, #1
  05938	e58d3008	 str         r3, [sp, #8]
  0593c	ea000001	 b           |$LN6@HWSetRTS|
  05940		 |$LN5@HWSetRTS|
  05940	e3a03000	 mov         r3, #0
  05944	e58d3008	 str         r3, [sp, #8]
  05948		 |$LN6@HWSetRTS|

; 3264 : }

  05948	e28dd00c	 add         sp, sp, #0xC
  0594c	e89d6000	 ldmia       sp, {sp, lr}
  05950	e12fff1e	 bx          lr
  05954		 |$LN10@HWSetRTS|
  05954		 |$LN11@HWSetRTS|
  05954	00000000	 DCD         |??_C@_1BG@LHCJELIJ@?$AA?9?$AAH?$AAW?$AAS?$AAe?$AAt?$AAR?$AAT?$AAS?$AA?6?$AA?$AA@|
  05958		 |$LN12@HWSetRTS|
  05958	00000000	 DCD         |dpCurSettings|
  0595c		 |$LN13@HWSetRTS|
  0595c	00000000	 DCD         |??_C@_1CI@LOGFLCOG@?$AA?$CL?$AAH?$AAW?$AAS?$AAe?$AAt?$AAR?$AAT?$AAS?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  05960		 |$M47312|

			 ENDP  ; |HWSetRTS|

	EXPORT	|??_C@_1CA@NCFLML@?$AA?9?$AAH?$AAW?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAR?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CA@EJJNEMPE@?$AA?$CL?$AAH?$AAW?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAR?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00138			 AREA	 |.pdata|, PDATA
|$T47328| DCD	|$LN9@HWEnableIR|
	DCD	0x40002304

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CA@NCFLML@?$AA?9?$AAH?$AAW?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAR?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "H", 0x0, "W", 0x0, "E", 0x0, "n", 0x0, "a", 0x0, "b"
	DCB	0x0, "l", 0x0, "e", 0x0, "I", 0x0, "R", 0x0, "(", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CA@EJJNEMPE@?$AA?$CL?$AAH?$AAW?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAR?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "H", 0x0, "W", 0x0, "E", 0x0, "n", 0x0, "a", 0x0, "b"
	DCB	0x0, "l", 0x0, "e", 0x0, "I", 0x0, "R", 0x0, "(", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  05960			 AREA	 |.text|, CODE, ARM

  05960		 |HWEnableIR| PROC

; 3274 : {

  05960		 |$LN9@HWEnableIR|
  05960	e1a0c00d	 mov         r12, sp
  05964	e92d0003	 stmdb       sp!, {r0, r1}
  05968	e92d5000	 stmdb       sp!, {r12, lr}
  0596c	e24dd00c	 sub         sp, sp, #0xC
  05970		 |$M47325|

; 3275 :     UNREFERENCED_PARAMETER(pvContext);
; 3276 :     UNREFERENCED_PARAMETER(baudRate);
; 3277 :     DEBUGMSG(ZONE_FUNCTION, (TEXT("+HWEnableIR()\r\n")));

  05970	e59f306c	 ldr         r3, [pc, #0x6C]
  05974	e5933440	 ldr         r3, [r3, #0x440]
  05978	e3130a02	 tst         r3, #2, 20
  0597c	0a000004	 beq         |$LN3@HWEnableIR|
  05980	e59f0060	 ldr         r0, [pc, #0x60]
  05984	eb000000	 bl          NKDbgPrintfW
  05988	e3a03001	 mov         r3, #1
  0598c	e58d3004	 str         r3, [sp, #4]
  05990	ea000001	 b           |$LN4@HWEnableIR|
  05994		 |$LN3@HWEnableIR|
  05994	e3a03000	 mov         r3, #0
  05998	e58d3004	 str         r3, [sp, #4]
  0599c		 |$LN4@HWEnableIR|

; 3278 :     DEBUGMSG(ZONE_FUNCTION, (TEXT("-HWEnableIR()\r\n")));

  0599c	e59f3040	 ldr         r3, [pc, #0x40]
  059a0	e5933440	 ldr         r3, [r3, #0x440]
  059a4	e3130a02	 tst         r3, #2, 20
  059a8	0a000004	 beq         |$LN5@HWEnableIR|
  059ac	e59f002c	 ldr         r0, [pc, #0x2C]
  059b0	eb000000	 bl          NKDbgPrintfW
  059b4	e3a03001	 mov         r3, #1
  059b8	e58d3008	 str         r3, [sp, #8]
  059bc	ea000001	 b           |$LN6@HWEnableIR|
  059c0		 |$LN5@HWEnableIR|
  059c0	e3a03000	 mov         r3, #0
  059c4	e58d3008	 str         r3, [sp, #8]
  059c8		 |$LN6@HWEnableIR|

; 3279 :     return TRUE;

  059c8	e3a03001	 mov         r3, #1
  059cc	e58d3000	 str         r3, [sp]

; 3280 : }

  059d0	e59d0000	 ldr         r0, [sp]
  059d4	e28dd00c	 add         sp, sp, #0xC
  059d8	e89d6000	 ldmia       sp, {sp, lr}
  059dc	e12fff1e	 bx          lr
  059e0		 |$LN10@HWEnableIR|
  059e0		 |$LN11@HWEnableIR|
  059e0	00000000	 DCD         |??_C@_1CA@NCFLML@?$AA?9?$AAH?$AAW?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAR?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  059e4		 |$LN12@HWEnableIR|
  059e4	00000000	 DCD         |dpCurSettings|
  059e8		 |$LN13@HWEnableIR|
  059e8	00000000	 DCD         |??_C@_1CA@EJJNEMPE@?$AA?$CL?$AAH?$AAW?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAR?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  059ec		 |$M47326|

			 ENDP  ; |HWEnableIR|

	EXPORT	|??_C@_1CC@MELOFMAH@?$AA?9?$AAH?$AAW?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAI?$AAR?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CC@BPLDLKLD@?$AA?$CL?$AAH?$AAW?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAI?$AAR?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00140			 AREA	 |.pdata|, PDATA
|$T47342| DCD	|$LN9@HWDisableI|
	DCD	0x40002304

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CC@MELOFMAH@?$AA?9?$AAH?$AAW?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAI?$AAR?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "H", 0x0, "W", 0x0, "D", 0x0, "i", 0x0, "s", 0x0, "a"
	DCB	0x0, "b", 0x0, "l", 0x0, "e", 0x0, "I", 0x0, "R", 0x0, "("
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CC@BPLDLKLD@?$AA?$CL?$AAH?$AAW?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAI?$AAR?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "H", 0x0, "W", 0x0, "D", 0x0, "i", 0x0, "s", 0x0, "a"
	DCB	0x0, "b", 0x0, "l", 0x0, "e", 0x0, "I", 0x0, "R", 0x0, "("
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  059ec			 AREA	 |.text|, CODE, ARM

  059ec		 |HWDisableIR| PROC

; 3289 : {

  059ec		 |$LN9@HWDisableI|
  059ec	e1a0c00d	 mov         r12, sp
  059f0	e92d0001	 stmdb       sp!, {r0}
  059f4	e92d5000	 stmdb       sp!, {r12, lr}
  059f8	e24dd00c	 sub         sp, sp, #0xC
  059fc		 |$M47339|

; 3290 : 
; 3291 :     UNREFERENCED_PARAMETER(pvContext);
; 3292 :     DEBUGMSG(ZONE_FUNCTION, (TEXT("+HWDisableIR()\r\n")));

  059fc	e59f306c	 ldr         r3, [pc, #0x6C]
  05a00	e5933440	 ldr         r3, [r3, #0x440]
  05a04	e3130a02	 tst         r3, #2, 20
  05a08	0a000004	 beq         |$LN3@HWDisableI|
  05a0c	e59f0060	 ldr         r0, [pc, #0x60]
  05a10	eb000000	 bl          NKDbgPrintfW
  05a14	e3a03001	 mov         r3, #1
  05a18	e58d3004	 str         r3, [sp, #4]
  05a1c	ea000001	 b           |$LN4@HWDisableI|
  05a20		 |$LN3@HWDisableI|
  05a20	e3a03000	 mov         r3, #0
  05a24	e58d3004	 str         r3, [sp, #4]
  05a28		 |$LN4@HWDisableI|

; 3293 :     DEBUGMSG(ZONE_FUNCTION, (TEXT("-HWDisableIR()\r\n")));

  05a28	e59f3040	 ldr         r3, [pc, #0x40]
  05a2c	e5933440	 ldr         r3, [r3, #0x440]
  05a30	e3130a02	 tst         r3, #2, 20
  05a34	0a000004	 beq         |$LN5@HWDisableI|
  05a38	e59f002c	 ldr         r0, [pc, #0x2C]
  05a3c	eb000000	 bl          NKDbgPrintfW
  05a40	e3a03001	 mov         r3, #1
  05a44	e58d3008	 str         r3, [sp, #8]
  05a48	ea000001	 b           |$LN6@HWDisableI|
  05a4c		 |$LN5@HWDisableI|
  05a4c	e3a03000	 mov         r3, #0
  05a50	e58d3008	 str         r3, [sp, #8]
  05a54		 |$LN6@HWDisableI|

; 3294 :     return TRUE;

  05a54	e3a03001	 mov         r3, #1
  05a58	e58d3000	 str         r3, [sp]

; 3295 : }

  05a5c	e59d0000	 ldr         r0, [sp]
  05a60	e28dd00c	 add         sp, sp, #0xC
  05a64	e89d6000	 ldmia       sp, {sp, lr}
  05a68	e12fff1e	 bx          lr
  05a6c		 |$LN10@HWDisableI|
  05a6c		 |$LN11@HWDisableI|
  05a6c	00000000	 DCD         |??_C@_1CC@MELOFMAH@?$AA?9?$AAH?$AAW?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAI?$AAR?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  05a70		 |$LN12@HWDisableI|
  05a70	00000000	 DCD         |dpCurSettings|
  05a74		 |$LN13@HWDisableI|
  05a74	00000000	 DCD         |??_C@_1CC@BPLDLKLD@?$AA?$CL?$AAH?$AAW?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAI?$AAR?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  05a78		 |$M47340|

			 ENDP  ; |HWDisableIR|

	EXPORT	|??_C@_1CA@EFDPBAAO@?$AA?9?$AAH?$AAW?$AAC?$AAl?$AAe?$AAa?$AAr?$AAB?$AAr?$AAe?$AAa?$AAk?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DA@LFDIAP@?$AA?$CL?$AAH?$AAW?$AAC?$AAl?$AAe?$AAa?$AAr?$AAB?$AAr?$AAe?$AAa?$AAk?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00148			 AREA	 |.pdata|, PDATA
|$T47355| DCD	|$LN9@HWClearBre|
	DCD	0x40003704

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CA@EFDPBAAO@?$AA?9?$AAH?$AAW?$AAC?$AAl?$AAe?$AAa?$AAr?$AAB?$AAr?$AAe?$AAa?$AAk?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "H", 0x0, "W", 0x0, "C", 0x0, "l", 0x0, "e", 0x0, "a"
	DCB	0x0, "r", 0x0, "B", 0x0, "r", 0x0, "e", 0x0, "a", 0x0, "k"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@LFDIAP@?$AA?$CL?$AAH?$AAW?$AAC?$AAl?$AAe?$AAa?$AAr?$AAB?$AAr?$AAe?$AAa?$AAk?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "H", 0x0, "W", 0x0, "C", 0x0, "l", 0x0, "e", 0x0, "a"
	DCB	0x0, "r", 0x0, "B", 0x0, "r", 0x0, "e", 0x0, "a", 0x0, "k"
	DCB	0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "x", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  05a78			 AREA	 |.text|, CODE, ARM

  05a78		 |HWClearBreak| PROC

; 3308 : {

  05a78		 |$LN9@HWClearBre|
  05a78	e1a0c00d	 mov         r12, sp
  05a7c	e92d0001	 stmdb       sp!, {r0}
  05a80	e92d5000	 stmdb       sp!, {r12, lr}
  05a84	e24dd010	 sub         sp, sp, #0x10
  05a88		 |$M47352|

; 3309 :     UARTPDD *pPdd = (UARTPDD*)pvContext;

  05a88	e59d3018	 ldr         r3, [sp, #0x18]
  05a8c	e58d3004	 str         r3, [sp, #4]

; 3310 :     OMAP_UART_REGS *pUartRegs = pPdd->pUartRegs;

  05a90	e59d3004	 ldr         r3, [sp, #4]
  05a94	e2833024	 add         r3, r3, #0x24
  05a98	e5933000	 ldr         r3, [r3]
  05a9c	e58d3000	 str         r3, [sp]

; 3311 : 
; 3312 :     DEBUGMSG(ZONE_FUNCTION, (
; 3313 :         L"+HWClearBreak(0x%08x)\r\n", pvContext
; 3314 :         ));

  05aa0	e59f30a4	 ldr         r3, [pc, #0xA4]
  05aa4	e5933440	 ldr         r3, [r3, #0x440]
  05aa8	e3130a02	 tst         r3, #2, 20
  05aac	0a000005	 beq         |$LN3@HWClearBre|
  05ab0	e59d1018	 ldr         r1, [sp, #0x18]
  05ab4	e59f0094	 ldr         r0, [pc, #0x94]
  05ab8	eb000000	 bl          NKDbgPrintfW
  05abc	e3a03001	 mov         r3, #1
  05ac0	e58d3008	 str         r3, [sp, #8]
  05ac4	ea000001	 b           |$LN4@HWClearBre|
  05ac8		 |$LN3@HWClearBre|
  05ac8	e3a03000	 mov         r3, #0
  05acc	e58d3008	 str         r3, [sp, #8]
  05ad0		 |$LN4@HWClearBre|

; 3315 : 
; 3316 :     EnterCriticalSection(&pPdd->hwCS);

  05ad0	e59d3004	 ldr         r3, [sp, #4]
  05ad4	e2830098	 add         r0, r3, #0x98
  05ad8	eb000000	 bl          EnterCriticalSection

; 3317 : 
; 3318 :     CLRREG8(&pUartRegs->LCR, UART_LCR_BREAK_EN);

  05adc	e59d3000	 ldr         r3, [sp]
  05ae0	e283300c	 add         r3, r3, #0xC
  05ae4	e5d33000	 ldrb        r3, [r3]
  05ae8	e1a02003	 mov         r2, r3
  05aec	e3e03040	 mvn         r3, #0x40
  05af0	e0023003	 and         r3, r2, r3
  05af4	e20320ff	 and         r2, r3, #0xFF
  05af8	e59d3000	 ldr         r3, [sp]
  05afc	e283300c	 add         r3, r3, #0xC
  05b00	e5c32000	 strb        r2, [r3]

; 3319 : 
; 3320 :     LeaveCriticalSection(&pPdd->hwCS);

  05b04	e59d3004	 ldr         r3, [sp, #4]
  05b08	e2830098	 add         r0, r3, #0x98
  05b0c	eb000000	 bl          LeaveCriticalSection

; 3321 : 
; 3322 :     DEBUGMSG(ZONE_FUNCTION, (L"-HWClearBreak\r\n"));

  05b10	e59f3034	 ldr         r3, [pc, #0x34]
  05b14	e5933440	 ldr         r3, [r3, #0x440]
  05b18	e3130a02	 tst         r3, #2, 20
  05b1c	0a000004	 beq         |$LN5@HWClearBre|
  05b20	e59f0020	 ldr         r0, [pc, #0x20]
  05b24	eb000000	 bl          NKDbgPrintfW
  05b28	e3a03001	 mov         r3, #1
  05b2c	e58d300c	 str         r3, [sp, #0xC]
  05b30	ea000001	 b           |$LN6@HWClearBre|
  05b34		 |$LN5@HWClearBre|
  05b34	e3a03000	 mov         r3, #0
  05b38	e58d300c	 str         r3, [sp, #0xC]
  05b3c		 |$LN6@HWClearBre|

; 3323 : }

  05b3c	e28dd010	 add         sp, sp, #0x10
  05b40	e89d6000	 ldmia       sp, {sp, lr}
  05b44	e12fff1e	 bx          lr
  05b48		 |$LN10@HWClearBre|
  05b48		 |$LN11@HWClearBre|
  05b48	00000000	 DCD         |??_C@_1CA@EFDPBAAO@?$AA?9?$AAH?$AAW?$AAC?$AAl?$AAe?$AAa?$AAr?$AAB?$AAr?$AAe?$AAa?$AAk?$AA?$AN?$AA?6?$AA?$AA@|
  05b4c		 |$LN12@HWClearBre|
  05b4c	00000000	 DCD         |dpCurSettings|
  05b50		 |$LN13@HWClearBre|
  05b50	00000000	 DCD         |??_C@_1DA@LFDIAP@?$AA?$CL?$AAH?$AAW?$AAC?$AAl?$AAe?$AAa?$AAr?$AAB?$AAr?$AAe?$AAa?$AAk?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  05b54		 |$M47353|

			 ENDP  ; |HWClearBreak|

	EXPORT	|??_C@_1BM@FEIHAKKN@?$AA?9?$AAH?$AAW?$AAS?$AAe?$AAt?$AAB?$AAr?$AAe?$AAa?$AAk?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CM@ECOLMJJG@?$AA?$CL?$AAH?$AAW?$AAS?$AAe?$AAt?$AAB?$AAr?$AAe?$AAa?$AAk?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00150			 AREA	 |.pdata|, PDATA
|$T47368| DCD	|$LN9@HWSetBreak|
	DCD	0x40003504

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@FEIHAKKN@?$AA?9?$AAH?$AAW?$AAS?$AAe?$AAt?$AAB?$AAr?$AAe?$AAa?$AAk?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "H", 0x0, "W", 0x0, "S", 0x0, "e", 0x0, "t", 0x0, "B"
	DCB	0x0, "r", 0x0, "e", 0x0, "a", 0x0, "k", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@ECOLMJJG@?$AA?$CL?$AAH?$AAW?$AAS?$AAe?$AAt?$AAB?$AAr?$AAe?$AAa?$AAk?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "H", 0x0, "W", 0x0, "S", 0x0, "e", 0x0, "t", 0x0, "B"
	DCB	0x0, "r", 0x0, "e", 0x0, "a", 0x0, "k", 0x0, "(", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  05b54			 AREA	 |.text|, CODE, ARM

  05b54		 |HWSetBreak| PROC

; 3336 : {

  05b54		 |$LN9@HWSetBreak|
  05b54	e1a0c00d	 mov         r12, sp
  05b58	e92d0001	 stmdb       sp!, {r0}
  05b5c	e92d5000	 stmdb       sp!, {r12, lr}
  05b60	e24dd010	 sub         sp, sp, #0x10
  05b64		 |$M47365|

; 3337 :     UARTPDD *pPdd = (UARTPDD*)pvContext;

  05b64	e59d3018	 ldr         r3, [sp, #0x18]
  05b68	e58d3004	 str         r3, [sp, #4]

; 3338 :     OMAP_UART_REGS *pUartRegs = pPdd->pUartRegs;

  05b6c	e59d3004	 ldr         r3, [sp, #4]
  05b70	e2833024	 add         r3, r3, #0x24
  05b74	e5933000	 ldr         r3, [r3]
  05b78	e58d3000	 str         r3, [sp]

; 3339 : 
; 3340 :     DEBUGMSG(ZONE_FUNCTION, (L"+HWSetBreak(0x%08x)\r\n", pvContext));

  05b7c	e59f309c	 ldr         r3, [pc, #0x9C]
  05b80	e5933440	 ldr         r3, [r3, #0x440]
  05b84	e3130a02	 tst         r3, #2, 20
  05b88	0a000005	 beq         |$LN3@HWSetBreak|
  05b8c	e59d1018	 ldr         r1, [sp, #0x18]
  05b90	e59f008c	 ldr         r0, [pc, #0x8C]
  05b94	eb000000	 bl          NKDbgPrintfW
  05b98	e3a03001	 mov         r3, #1
  05b9c	e58d3008	 str         r3, [sp, #8]
  05ba0	ea000001	 b           |$LN4@HWSetBreak|
  05ba4		 |$LN3@HWSetBreak|
  05ba4	e3a03000	 mov         r3, #0
  05ba8	e58d3008	 str         r3, [sp, #8]
  05bac		 |$LN4@HWSetBreak|

; 3341 : 
; 3342 :     EnterCriticalSection(&pPdd->hwCS);

  05bac	e59d3004	 ldr         r3, [sp, #4]
  05bb0	e2830098	 add         r0, r3, #0x98
  05bb4	eb000000	 bl          EnterCriticalSection

; 3343 : 
; 3344 :     SETREG8(&pUartRegs->LCR, UART_LCR_BREAK_EN);

  05bb8	e59d3000	 ldr         r3, [sp]
  05bbc	e283300c	 add         r3, r3, #0xC
  05bc0	e5d33000	 ldrb        r3, [r3]
  05bc4	e3833040	 orr         r3, r3, #0x40
  05bc8	e20320ff	 and         r2, r3, #0xFF
  05bcc	e59d3000	 ldr         r3, [sp]
  05bd0	e283300c	 add         r3, r3, #0xC
  05bd4	e5c32000	 strb        r2, [r3]

; 3345 : 
; 3346 :     LeaveCriticalSection(&pPdd->hwCS);

  05bd8	e59d3004	 ldr         r3, [sp, #4]
  05bdc	e2830098	 add         r0, r3, #0x98
  05be0	eb000000	 bl          LeaveCriticalSection

; 3347 : 
; 3348 :     DEBUGMSG(ZONE_FUNCTION, (L"-HWSetBreak\r\n"));

  05be4	e59f3034	 ldr         r3, [pc, #0x34]
  05be8	e5933440	 ldr         r3, [r3, #0x440]
  05bec	e3130a02	 tst         r3, #2, 20
  05bf0	0a000004	 beq         |$LN5@HWSetBreak|
  05bf4	e59f0020	 ldr         r0, [pc, #0x20]
  05bf8	eb000000	 bl          NKDbgPrintfW
  05bfc	e3a03001	 mov         r3, #1
  05c00	e58d300c	 str         r3, [sp, #0xC]
  05c04	ea000001	 b           |$LN6@HWSetBreak|
  05c08		 |$LN5@HWSetBreak|
  05c08	e3a03000	 mov         r3, #0
  05c0c	e58d300c	 str         r3, [sp, #0xC]
  05c10		 |$LN6@HWSetBreak|

; 3349 : }

  05c10	e28dd010	 add         sp, sp, #0x10
  05c14	e89d6000	 ldmia       sp, {sp, lr}
  05c18	e12fff1e	 bx          lr
  05c1c		 |$LN10@HWSetBreak|
  05c1c		 |$LN11@HWSetBreak|
  05c1c	00000000	 DCD         |??_C@_1BM@FEIHAKKN@?$AA?9?$AAH?$AAW?$AAS?$AAe?$AAt?$AAB?$AAr?$AAe?$AAa?$AAk?$AA?$AN?$AA?6?$AA?$AA@|
  05c20		 |$LN12@HWSetBreak|
  05c20	00000000	 DCD         |dpCurSettings|
  05c24		 |$LN13@HWSetBreak|
  05c24	00000000	 DCD         |??_C@_1CM@ECOLMJJG@?$AA?$CL?$AAH?$AAW?$AAS?$AAe?$AAt?$AAB?$AAr?$AAe?$AAa?$AAk?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  05c28		 |$M47366|

			 ENDP  ; |HWSetBreak|

	EXPORT	|??_C@_1BG@CIAEKBAH@?$AA?9?$AAH?$AAW?$AAR?$AAe?$AAs?$AAe?$AAt?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CG@FNFABDCM@?$AA?$CL?$AAH?$AAW?$AAR?$AAe?$AAs?$AAe?$AAt?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00158			 AREA	 |.pdata|, PDATA
|$T47381| DCD	|$LN9@HWReset|
	DCD	0x40003704

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BG@CIAEKBAH@?$AA?9?$AAH?$AAW?$AAR?$AAe?$AAs?$AAe?$AAt?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "H", 0x0, "W", 0x0, "R", 0x0, "e", 0x0, "s", 0x0, "e"
	DCB	0x0, "t", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CG@FNFABDCM@?$AA?$CL?$AAH?$AAW?$AAR?$AAe?$AAs?$AAe?$AAt?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "H", 0x0, "W", 0x0, "R", 0x0, "e", 0x0, "s", 0x0, "e"
	DCB	0x0, "t", 0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Odtp

  05c28			 AREA	 |.text|, CODE, ARM

  05c28		 |HWReset| PROC

; 3362 : {

  05c28		 |$LN9@HWReset|
  05c28	e1a0c00d	 mov         r12, sp
  05c2c	e92d0001	 stmdb       sp!, {r0}
  05c30	e92d5000	 stmdb       sp!, {r12, lr}
  05c34	e24dd010	 sub         sp, sp, #0x10
  05c38		 |$M47378|

; 3363 :     UARTPDD *pPdd = (UARTPDD*)pvContext;

  05c38	e59d3018	 ldr         r3, [sp, #0x18]
  05c3c	e58d3004	 str         r3, [sp, #4]

; 3364 :     OMAP_UART_REGS *pUartRegs = pPdd->pUartRegs;

  05c40	e59d3004	 ldr         r3, [sp, #4]
  05c44	e2833024	 add         r3, r3, #0x24
  05c48	e5933000	 ldr         r3, [r3]
  05c4c	e58d3000	 str         r3, [sp]

; 3365 : 
; 3366 : 
; 3367 :     DEBUGMSG(ZONE_FUNCTION, (L"+HWReset(0x%08x)\r\n", pvContext));

  05c50	e59f30a4	 ldr         r3, [pc, #0xA4]
  05c54	e5933440	 ldr         r3, [r3, #0x440]
  05c58	e3130a02	 tst         r3, #2, 20
  05c5c	0a000005	 beq         |$LN3@HWReset|
  05c60	e59d1018	 ldr         r1, [sp, #0x18]
  05c64	e59f0094	 ldr         r0, [pc, #0x94]
  05c68	eb000000	 bl          NKDbgPrintfW
  05c6c	e3a03001	 mov         r3, #1
  05c70	e58d3008	 str         r3, [sp, #8]
  05c74	ea000001	 b           |$LN4@HWReset|
  05c78		 |$LN3@HWReset|
  05c78	e3a03000	 mov         r3, #0
  05c7c	e58d3008	 str         r3, [sp, #8]
  05c80		 |$LN4@HWReset|

; 3368 : 
; 3369 :     EnterCriticalSection(&pPdd->hwCS);

  05c80	e59d3004	 ldr         r3, [sp, #4]
  05c84	e2830098	 add         r0, r3, #0x98
  05c88	eb000000	 bl          EnterCriticalSection

; 3370 : 
; 3371 :     // Enable interrupts
; 3372 :     pPdd->intrMask = UART_IER_LINE|UART_IER_MODEM|UART_IER_RHR;

  05c8c	e59d3004	 ldr         r3, [sp, #4]
  05c90	e2832088	 add         r2, r3, #0x88
  05c94	e3a0300d	 mov         r3, #0xD
  05c98	e5c23000	 strb        r3, [r2]

; 3373 :     OUTREG8(&pUartRegs->IER, pPdd->intrMask);

  05c9c	e59d3004	 ldr         r3, [sp, #4]
  05ca0	e2831088	 add         r1, r3, #0x88
  05ca4	e59d3000	 ldr         r3, [sp]
  05ca8	e2832004	 add         r2, r3, #4
  05cac	e5d13000	 ldrb        r3, [r1]
  05cb0	e5c23000	 strb        r3, [r2]

; 3374 : 
; 3375 :     LeaveCriticalSection(&pPdd->hwCS);

  05cb4	e59d3004	 ldr         r3, [sp, #4]
  05cb8	e2830098	 add         r0, r3, #0x98
  05cbc	eb000000	 bl          LeaveCriticalSection

; 3376 : 
; 3377 :     DEBUGMSG(ZONE_FUNCTION, (L"-HWReset\r\n"));

  05cc0	e59f3034	 ldr         r3, [pc, #0x34]
  05cc4	e5933440	 ldr         r3, [r3, #0x440]
  05cc8	e3130a02	 tst         r3, #2, 20
  05ccc	0a000004	 beq         |$LN5@HWReset|
  05cd0	e59f0020	 ldr         r0, [pc, #0x20]
  05cd4	eb000000	 bl          NKDbgPrintfW
  05cd8	e3a03001	 mov         r3, #1
  05cdc	e58d300c	 str         r3, [sp, #0xC]
  05ce0	ea000001	 b           |$LN6@HWReset|
  05ce4		 |$LN5@HWReset|
  05ce4	e3a03000	 mov         r3, #0
  05ce8	e58d300c	 str         r3, [sp, #0xC]
  05cec		 |$LN6@HWReset|

; 3378 : }

  05cec	e28dd010	 add         sp, sp, #0x10
  05cf0	e89d6000	 ldmia       sp, {sp, lr}
  05cf4	e12fff1e	 bx          lr
  05cf8		 |$LN10@HWReset|
  05cf8		 |$LN11@HWReset|
  05cf8	00000000	 DCD         |??_C@_1BG@CIAEKBAH@?$AA?9?$AAH?$AAW?$AAR?$AAe?$AAs?$AAe?$AAt?$AA?$AN?$AA?6?$AA?$AA@|
  05cfc		 |$LN12@HWReset|
  05cfc	00000000	 DCD         |dpCurSettings|
  05d00		 |$LN13@HWReset|
  05d00	00000000	 DCD         |??_C@_1CG@FNFABDCM@?$AA?$CL?$AAH?$AAW?$AAR?$AAe?$AAs?$AAe?$AAt?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  05d04		 |$M47379|

			 ENDP  ; |HWReset|

	EXPORT	|??_C@_1EC@BHOPGLEG@?$AA?9?$AAH?$AAW?$AAG?$AAe?$AAt?$AAM?$AAo?$AAd?$AAe?$AAm?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?1?$AA?$CF?$AA0?$AA2?$AAx?$AA?$CJ?$AA?$AN?$AA?6@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DI@GICOINEO@?$AA?$CL?$AAH?$AAW?$AAG?$AAe?$AAt?$AAM?$AAo?$AAd?$AAe?$AAm?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00160			 AREA	 |.pdata|, PDATA
|$T47392| DCD	|$LN10@HWGetModem|
	DCD	0x40003d04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EC@BHOPGLEG@?$AA?9?$AAH?$AAW?$AAG?$AAe?$AAt?$AAM?$AAo?$AAd?$AAe?$AAm?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?1?$AA?$CF?$AA0?$AA2?$AAx?$AA?$CJ?$AA?$AN?$AA?6@| DCB "-"
	DCB	0x0, "H", 0x0, "W", 0x0, "G", 0x0, "e", 0x0, "t", 0x0, "M"
	DCB	0x0, "o", 0x0, "d", 0x0, "e", 0x0, "m", 0x0, "S", 0x0, "t"
	DCB	0x0, "a", 0x0, "t", 0x0, "u", 0x0, "s", 0x0, "(", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, "/"
	DCB	0x0, "%", 0x0, "0", 0x0, "2", 0x0, "x", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DI@GICOINEO@?$AA?$CL?$AAH?$AAW?$AAG?$AAe?$AAt?$AAM?$AAo?$AAd?$AAe?$AAm?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "H", 0x0, "W", 0x0, "G", 0x0, "e", 0x0, "t", 0x0, "M"
	DCB	0x0, "o", 0x0, "d", 0x0, "e", 0x0, "m", 0x0, "S", 0x0, "t"
	DCB	0x0, "a", 0x0, "t", 0x0, "u", 0x0, "s", 0x0, "(", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  05d04			 AREA	 |.text|, CODE, ARM

  05d04		 |HWGetModemStatus| PROC

; 3392 : {

  05d04		 |$LN10@HWGetModem|
  05d04	e1a0c00d	 mov         r12, sp
  05d08	e92d0003	 stmdb       sp!, {r0, r1}
  05d0c	e92d5000	 stmdb       sp!, {r12, lr}
  05d10	e24dd010	 sub         sp, sp, #0x10
  05d14		 |$M47389|

; 3393 :     UARTPDD *pPdd = (UARTPDD*)pvContext;

  05d14	e59d3018	 ldr         r3, [sp, #0x18]
  05d18	e58d3004	 str         r3, [sp, #4]

; 3394 :     UCHAR modemStat;
; 3395 : 
; 3396 : 
; 3397 :     DEBUGMSG(ZONE_FUNCTION, (
; 3398 :         L"+HWGetModemStatus(0x%08x)\r\n", pvContext
; 3399 :         ));

  05d1c	e59f30d0	 ldr         r3, [pc, #0xD0]
  05d20	e5933440	 ldr         r3, [r3, #0x440]
  05d24	e3130a02	 tst         r3, #2, 20
  05d28	0a000005	 beq         |$LN6@HWGetModem|
  05d2c	e59d1018	 ldr         r1, [sp, #0x18]
  05d30	e59f00b8	 ldr         r0, [pc, #0xB8]
  05d34	eb000000	 bl          NKDbgPrintfW
  05d38	e3a03001	 mov         r3, #1
  05d3c	e58d3008	 str         r3, [sp, #8]
  05d40	ea000001	 b           |$LN7@HWGetModem|
  05d44		 |$LN6@HWGetModem|
  05d44	e3a03000	 mov         r3, #0
  05d48	e58d3008	 str         r3, [sp, #8]
  05d4c		 |$LN7@HWGetModem|

; 3400 : 
; 3401 :     modemStat = ReadModemStat(pPdd);

  05d4c	e59d0004	 ldr         r0, [sp, #4]
  05d50	eb000000	 bl          ReadModemStat
  05d54	e5cd000c	 strb        r0, [sp, #0xC]
  05d58	e5dd300c	 ldrb        r3, [sp, #0xC]
  05d5c	e5cd3000	 strb        r3, [sp]

; 3402 : 
; 3403 :     *pModemStat = 0;

  05d60	e59d201c	 ldr         r2, [sp, #0x1C]
  05d64	e3a03000	 mov         r3, #0
  05d68	e5823000	 str         r3, [r2]

; 3404 :     if ((modemStat & UART_MSR_NCTS) != 0) *pModemStat |= MS_CTS_ON;

  05d6c	e5dd3000	 ldrb        r3, [sp]
  05d70	e3130010	 tst         r3, #0x10
  05d74	0a000004	 beq         |$LN3@HWGetModem|
  05d78	e59d301c	 ldr         r3, [sp, #0x1C]
  05d7c	e5933000	 ldr         r3, [r3]
  05d80	e3832010	 orr         r2, r3, #0x10
  05d84	e59d301c	 ldr         r3, [sp, #0x1C]
  05d88	e5832000	 str         r2, [r3]
  05d8c		 |$LN3@HWGetModem|

; 3405 :     if ((modemStat & UART_MSR_NDSR) != 0) *pModemStat |= MS_DSR_ON;

  05d8c	e5dd3000	 ldrb        r3, [sp]
  05d90	e3130020	 tst         r3, #0x20
  05d94	0a000004	 beq         |$LN2@HWGetModem|
  05d98	e59d301c	 ldr         r3, [sp, #0x1C]
  05d9c	e5933000	 ldr         r3, [r3]
  05da0	e3832020	 orr         r2, r3, #0x20
  05da4	e59d301c	 ldr         r3, [sp, #0x1C]
  05da8	e5832000	 str         r2, [r3]
  05dac		 |$LN2@HWGetModem|

; 3406 :     if ((modemStat & UART_MSR_NCD) != 0) *pModemStat |= MS_RLSD_ON;

  05dac	e5dd3000	 ldrb        r3, [sp]
  05db0	e3130080	 tst         r3, #0x80
  05db4	0a000004	 beq         |$LN1@HWGetModem|
  05db8	e59d301c	 ldr         r3, [sp, #0x1C]
  05dbc	e5933000	 ldr         r3, [r3]
  05dc0	e3832080	 orr         r2, r3, #0x80
  05dc4	e59d301c	 ldr         r3, [sp, #0x1C]
  05dc8	e5832000	 str         r2, [r3]
  05dcc		 |$LN1@HWGetModem|

; 3407 : 
; 3408 :     DEBUGMSG(TRUE||ZONE_FUNCTION, (
; 3409 :         L"-HWGetModemStatus(0x%08x/%02x)\r\n", *pModemStat, modemStat
; 3410 :         ));

  05dcc	e5dd2000	 ldrb        r2, [sp]
  05dd0	e59d301c	 ldr         r3, [sp, #0x1C]
  05dd4	e5931000	 ldr         r1, [r3]
  05dd8	e59f000c	 ldr         r0, [pc, #0xC]
  05ddc	eb000000	 bl          NKDbgPrintfW

; 3411 : 
; 3412 : }

  05de0	e28dd010	 add         sp, sp, #0x10
  05de4	e89d6000	 ldmia       sp, {sp, lr}
  05de8	e12fff1e	 bx          lr
  05dec		 |$LN11@HWGetModem|
  05dec		 |$LN12@HWGetModem|
  05dec	00000000	 DCD         |??_C@_1EC@BHOPGLEG@?$AA?9?$AAH?$AAW?$AAG?$AAe?$AAt?$AAM?$AAo?$AAd?$AAe?$AAm?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?1?$AA?$CF?$AA0?$AA2?$AAx?$AA?$CJ?$AA?$AN?$AA?6@|
  05df0		 |$LN13@HWGetModem|
  05df0	00000000	 DCD         |??_C@_1DI@GICOINEO@?$AA?$CL?$AAH?$AAW?$AAG?$AAe?$AAt?$AAM?$AAo?$AAd?$AAe?$AAm?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  05df4		 |$LN14@HWGetModem|
  05df4	00000000	 DCD         |dpCurSettings|
  05df8		 |$M47390|

			 ENDP  ; |HWGetModemStatus|

	EXPORT	|??_C@_1CC@MIOKNLPM@?$AA?9?$AAH?$AAW?$AAX?$AAm?$AAi?$AAt?$AAC?$AAo?$AAm?$AAC?$AAh?$AAa?$AAr?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DK@BBBMFEPC@?$AA?$CL?$AAH?$AAW?$AAX?$AAm?$AAi?$AAt?$AAC?$AAo?$AAm?$AAC?$AAh?$AAa?$AAr?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00168			 AREA	 |.pdata|, PDATA
|$T47406| DCD	|$LN12@HWXmitComC|
	DCD	0x40006c04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CC@MIOKNLPM@?$AA?9?$AAH?$AAW?$AAX?$AAm?$AAi?$AAt?$AAC?$AAo?$AAm?$AAC?$AAh?$AAa?$AAr?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "H", 0x0, "W", 0x0, "X", 0x0, "m", 0x0, "i", 0x0, "t"
	DCB	0x0, "C", 0x0, "o", 0x0, "m", 0x0, "C", 0x0, "h", 0x0, "a"
	DCB	0x0, "r", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DK@BBBMFEPC@?$AA?$CL?$AAH?$AAW?$AAX?$AAm?$AAi?$AAt?$AAC?$AAo?$AAm?$AAC?$AAh?$AAa?$AAr?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "H", 0x0, "W", 0x0, "X", 0x0, "m", 0x0, "i", 0x0, "t"
	DCB	0x0, "C", 0x0, "o", 0x0, "m", 0x0, "C", 0x0, "h", 0x0, "a"
	DCB	0x0, "r", 0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  05df8			 AREA	 |.text|, CODE, ARM

  05df8		 |HWXmitComChar| PROC

; 3426 : {

  05df8		 |$LN12@HWXmitComC|
  05df8	e1a0c00d	 mov         r12, sp
  05dfc	e92d0003	 stmdb       sp!, {r0, r1}
  05e00	e92d5000	 stmdb       sp!, {r12, lr}
  05e04	e24dd014	 sub         sp, sp, #0x14
  05e08		 |$M47403|

; 3427 :     UARTPDD *pPdd = (UARTPDD*)pvContext;

  05e08	e59d301c	 ldr         r3, [sp, #0x1C]
  05e0c	e58d3000	 str         r3, [sp]

; 3428 : 
; 3429 :     DEBUGMSG(ZONE_FUNCTION, (L"+HWXmitComChar(0x%08x, %d)\r\n", pvContext, ch));

  05e10	e59f3188	 ldr         r3, [pc, #0x188]
  05e14	e5933440	 ldr         r3, [r3, #0x440]
  05e18	e3130a02	 tst         r3, #2, 20
  05e1c	0a000006	 beq         |$LN6@HWXmitComC|
  05e20	e5dd2020	 ldrb        r2, [sp, #0x20]
  05e24	e59d101c	 ldr         r1, [sp, #0x1C]
  05e28	e59f0174	 ldr         r0, [pc, #0x174]
  05e2c	eb000000	 bl          NKDbgPrintfW
  05e30	e3a03001	 mov         r3, #1
  05e34	e58d3008	 str         r3, [sp, #8]
  05e38	ea000001	 b           |$LN7@HWXmitComC|
  05e3c		 |$LN6@HWXmitComC|
  05e3c	e3a03000	 mov         r3, #0
  05e40	e58d3008	 str         r3, [sp, #8]
  05e44		 |$LN7@HWXmitComC|

; 3430 : 
; 3431 :     //RETAILMSG(1,(TEXT("+HWXmitComChar(0x%08x, %d)\r\n"), pvContext, ch));
; 3432 : 
; 3433 :     EnterCriticalSection(&pPdd->txCS);

  05e44	e59d3000	 ldr         r3, [sp]
  05e48	e28300ac	 add         r0, r3, #0xAC
  05e4c	eb000000	 bl          EnterCriticalSection
  05e50		 |$LN3@HWXmitComC|

; 3434 : 
; 3435 :     // We know THR will eventually empty
; 3436 :     for(;;)
; 3437 :     {
; 3438 :         EnterCriticalSection(&pPdd->hwCS);

  05e50	e59d3000	 ldr         r3, [sp]
  05e54	e2830098	 add         r0, r3, #0x98
  05e58	eb000000	 bl          EnterCriticalSection

; 3439 : 
; 3440 : 
; 3441 :         // Write the character if we can
; 3442 :         if ((ReadLineStat(pPdd) & UART_LSR_TX_FIFO_E) != 0)

  05e5c	e59d0000	 ldr         r0, [sp]
  05e60	eb000000	 bl          ReadLineStat
  05e64	e5cd000c	 strb        r0, [sp, #0xC]
  05e68	e5dd300c	 ldrb        r3, [sp, #0xC]
  05e6c	e3130020	 tst         r3, #0x20
  05e70	0a00001c	 beq         |$LN1@HWXmitComC|

; 3443 :         {
; 3444 : 
; 3445 :             // Tell the tx interrupt handler that we are waiting for
; 3446 :             // a TX interrupt
; 3447 :             pPdd->bHWXmitComCharWaiting = TRUE;

  05e74	e59d3000	 ldr         r3, [sp]
  05e78	e2832e13	 add         r2, r3, #0x13, 28
  05e7c	e3a03001	 mov         r3, #1
  05e80	e5823000	 str         r3, [r2]

; 3448 : 
; 3449 :             // FIFO is empty, send this character
; 3450 :             OUTREG8(&pPdd->pUartRegs->THR, ch);

  05e84	e59d3000	 ldr         r3, [sp]
  05e88	e2833024	 add         r3, r3, #0x24
  05e8c	e5932000	 ldr         r2, [r3]
  05e90	e5dd3020	 ldrb        r3, [sp, #0x20]
  05e94	e5c23000	 strb        r3, [r2]

; 3451 :             // Enable TX interrupt
; 3452 : 
; 3453 :             pPdd->intrMask |= UART_IER_THR;

  05e98	e59d3000	 ldr         r3, [sp]
  05e9c	e2833088	 add         r3, r3, #0x88
  05ea0	e5d33000	 ldrb        r3, [r3]
  05ea4	e3831002	 orr         r1, r3, #2
  05ea8	e59d3000	 ldr         r3, [sp]
  05eac	e2832088	 add         r2, r3, #0x88
  05eb0	e20130ff	 and         r3, r1, #0xFF
  05eb4	e5c23000	 strb        r3, [r2]

; 3454 : 
; 3455 :             OUTREG8(&pPdd->pUartRegs->IER, pPdd->intrMask);

  05eb8	e59d3000	 ldr         r3, [sp]
  05ebc	e2831088	 add         r1, r3, #0x88
  05ec0	e59d3000	 ldr         r3, [sp]
  05ec4	e2833024	 add         r3, r3, #0x24
  05ec8	e5933000	 ldr         r3, [r3]
  05ecc	e2832004	 add         r2, r3, #4
  05ed0	e5d13000	 ldrb        r3, [r1]
  05ed4	e5c23000	 strb        r3, [r2]

; 3456 : 
; 3457 :             LeaveCriticalSection(&pPdd->hwCS);

  05ed8	e59d3000	 ldr         r3, [sp]
  05edc	e2830098	 add         r0, r3, #0x98
  05ee0	eb000000	 bl          LeaveCriticalSection

; 3458 :             break;

  05ee4	ea000018	 b           |$LN2@HWXmitComC|
  05ee8		 |$LN1@HWXmitComC|

; 3459 :         }
; 3460 : 
; 3461 :         // If we couldn't write the data yet, then wait for a TX interrupt
; 3462 : 
; 3463 :         pPdd->intrMask |= UART_IER_THR;

  05ee8	e59d3000	 ldr         r3, [sp]
  05eec	e2833088	 add         r3, r3, #0x88
  05ef0	e5d33000	 ldrb        r3, [r3]
  05ef4	e3831002	 orr         r1, r3, #2
  05ef8	e59d3000	 ldr         r3, [sp]
  05efc	e2832088	 add         r2, r3, #0x88
  05f00	e20130ff	 and         r3, r1, #0xFF
  05f04	e5c23000	 strb        r3, [r2]

; 3464 :         OUTREG8(&pPdd->pUartRegs->IER, pPdd->intrMask);

  05f08	e59d3000	 ldr         r3, [sp]
  05f0c	e2831088	 add         r1, r3, #0x88
  05f10	e59d3000	 ldr         r3, [sp]
  05f14	e2833024	 add         r3, r3, #0x24
  05f18	e5933000	 ldr         r3, [r3]
  05f1c	e2832004	 add         r2, r3, #4
  05f20	e5d13000	 ldrb        r3, [r1]
  05f24	e5c23000	 strb        r3, [r2]

; 3465 : 
; 3466 :         LeaveCriticalSection(&pPdd->hwCS);

  05f28	e59d3000	 ldr         r3, [sp]
  05f2c	e2830098	 add         r0, r3, #0x98
  05f30	eb000000	 bl          LeaveCriticalSection

; 3467 : 
; 3468 :         // Wait until the TX interrupt has signalled
; 3469 :         WaitForSingleObject(pPdd->txEvent, 1000);

  05f34	e3a01ffa	 mov         r1, #0xFA, 30
  05f38	e59d3000	 ldr         r3, [sp]
  05f3c	e28330d4	 add         r3, r3, #0xD4
  05f40	e5930000	 ldr         r0, [r3]
  05f44	eb000000	 bl          WaitForSingleObject

; 3470 : 
; 3471 :     }

  05f48	eaffffc0	 b           |$LN3@HWXmitComC|
  05f4c		 |$LN2@HWXmitComC|

; 3472 :     LeaveCriticalSection(&pPdd->txCS);

  05f4c	e59d3000	 ldr         r3, [sp]
  05f50	e28300ac	 add         r0, r3, #0xAC
  05f54	eb000000	 bl          LeaveCriticalSection

; 3473 : 
; 3474 :     DEBUGMSG(ZONE_FUNCTION, (L"-HWXmitComChar\r\n"));

  05f58	e59f3040	 ldr         r3, [pc, #0x40]
  05f5c	e5933440	 ldr         r3, [r3, #0x440]
  05f60	e3130a02	 tst         r3, #2, 20
  05f64	0a000004	 beq         |$LN8@HWXmitComC|
  05f68	e59f002c	 ldr         r0, [pc, #0x2C]
  05f6c	eb000000	 bl          NKDbgPrintfW
  05f70	e3a03001	 mov         r3, #1
  05f74	e58d3010	 str         r3, [sp, #0x10]
  05f78	ea000001	 b           |$LN9@HWXmitComC|
  05f7c		 |$LN8@HWXmitComC|
  05f7c	e3a03000	 mov         r3, #0
  05f80	e58d3010	 str         r3, [sp, #0x10]
  05f84		 |$LN9@HWXmitComC|

; 3475 :     return TRUE;

  05f84	e3a03001	 mov         r3, #1
  05f88	e58d3004	 str         r3, [sp, #4]

; 3476 : }

  05f8c	e59d0004	 ldr         r0, [sp, #4]
  05f90	e28dd014	 add         sp, sp, #0x14
  05f94	e89d6000	 ldmia       sp, {sp, lr}
  05f98	e12fff1e	 bx          lr
  05f9c		 |$LN13@HWXmitComC|
  05f9c		 |$LN14@HWXmitComC|
  05f9c	00000000	 DCD         |??_C@_1CC@MIOKNLPM@?$AA?9?$AAH?$AAW?$AAX?$AAm?$AAi?$AAt?$AAC?$AAo?$AAm?$AAC?$AAh?$AAa?$AAr?$AA?$AN?$AA?6?$AA?$AA@|
  05fa0		 |$LN15@HWXmitComC|
  05fa0	00000000	 DCD         |dpCurSettings|
  05fa4		 |$LN16@HWXmitComC|
  05fa4	00000000	 DCD         |??_C@_1DK@BBBMFEPC@?$AA?$CL?$AAH?$AAW?$AAX?$AAm?$AAi?$AAt?$AAC?$AAo?$AAm?$AAC?$AAh?$AAa?$AAr?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  05fa8		 |$M47404|

			 ENDP  ; |HWXmitComChar|

	EXPORT	|??_C@_1DA@KKMNOALE@?$AA?9?$AAH?$AAW?$AAG?$AAe?$AAt?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DO@HOLGPPDH@?$AA?$CL?$AAH?$AAW?$AAG?$AAe?$AAt?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00170			 AREA	 |.pdata|, PDATA
|$T47424| DCD	|$LN14@HWGetStatu|
	DCD	0x40006504

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@KKMNOALE@?$AA?9?$AAH?$AAW?$AAG?$AAe?$AAt?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "H", 0x0, "W", 0x0, "G", 0x0, "e", 0x0, "t", 0x0, "S"
	DCB	0x0, "t", 0x0, "a", 0x0, "t", 0x0, "u", 0x0, "s", 0x0, "("
	DCB	0x0, "r", 0x0, "c", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@HOLGPPDH@?$AA?$CL?$AAH?$AAW?$AAG?$AAe?$AAt?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "H", 0x0, "W", 0x0, "G", 0x0, "e", 0x0, "t", 0x0, "S"
	DCB	0x0, "t", 0x0, "a", 0x0, "t", 0x0, "u", 0x0, "s", 0x0, "("
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x"
	DCB	0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Odtp

  05fa8			 AREA	 |.text|, CODE, ARM

  05fa8		 |HWGetStatus| PROC

; 3491 : {

  05fa8		 |$LN14@HWGetStatu|
  05fa8	e1a0c00d	 mov         r12, sp
  05fac	e92d0003	 stmdb       sp!, {r0, r1}
  05fb0	e92d5000	 stmdb       sp!, {r12, lr}
  05fb4	e24dd01c	 sub         sp, sp, #0x1C
  05fb8		 |$M47421|

; 3492 :     ULONG rc = (ULONG)-1;

  05fb8	e3e03000	 mvn         r3, #0
  05fbc	e58d3000	 str         r3, [sp]

; 3493 :     UARTPDD *pPdd = (UARTPDD*)pvContext;

  05fc0	e59d3024	 ldr         r3, [sp, #0x24]
  05fc4	e58d3004	 str         r3, [sp, #4]

; 3494 : 
; 3495 :     DEBUGMSG(ZONE_FUNCTION, (
; 3496 :         L"+HWGetStatus(0x%08x, 0x%08x)\r\n", pvContext, pComStat
; 3497 :         ));

  05fc8	e59f3164	 ldr         r3, [pc, #0x164]
  05fcc	e5933440	 ldr         r3, [r3, #0x440]
  05fd0	e3130a02	 tst         r3, #2, 20
  05fd4	0a000006	 beq         |$LN4@HWGetStatu|
  05fd8	e59d2028	 ldr         r2, [sp, #0x28]
  05fdc	e59d1024	 ldr         r1, [sp, #0x24]
  05fe0	e59f0150	 ldr         r0, [pc, #0x150]
  05fe4	eb000000	 bl          NKDbgPrintfW
  05fe8	e3a03001	 mov         r3, #1
  05fec	e58d300c	 str         r3, [sp, #0xC]
  05ff0	ea000001	 b           |$LN5@HWGetStatu|
  05ff4		 |$LN4@HWGetStatu|
  05ff4	e3a03000	 mov         r3, #0
  05ff8	e58d300c	 str         r3, [sp, #0xC]
  05ffc		 |$LN5@HWGetStatu|

; 3498 : 
; 3499 :     if (pComStat == NULL) goto cleanUp;

  05ffc	e59d3028	 ldr         r3, [sp, #0x28]
  06000	e3530000	 cmp         r3, #0
  06004	1a000000	 bne         |$LN1@HWGetStatu|
  06008	ea000036	 b           |$cleanUp$45997|
  0600c		 |$LN1@HWGetStatu|

; 3500 : 
; 3501 :     pComStat->fCtsHold = pPdd->flowOffCTS ? 1 : 0;

  0600c	e59d3004	 ldr         r3, [sp, #4]
  06010	e2833090	 add         r3, r3, #0x90
  06014	e5933000	 ldr         r3, [r3]
  06018	e3530000	 cmp         r3, #0
  0601c	0a000002	 beq         |$LN6@HWGetStatu|
  06020	e3a03001	 mov         r3, #1
  06024	e58d3010	 str         r3, [sp, #0x10]
  06028	ea000001	 b           |$LN7@HWGetStatu|
  0602c		 |$LN6@HWGetStatu|
  0602c	e3a03000	 mov         r3, #0
  06030	e58d3010	 str         r3, [sp, #0x10]
  06034		 |$LN7@HWGetStatu|
  06034	e59d1010	 ldr         r1, [sp, #0x10]
  06038	e59d3028	 ldr         r3, [sp, #0x28]
  0603c	e5932000	 ldr         r2, [r3]
  06040	e3e03001	 mvn         r3, #1
  06044	e0022003	 and         r2, r2, r3
  06048	e2013001	 and         r3, r1, #1
  0604c	e1822003	 orr         r2, r2, r3
  06050	e59d3028	 ldr         r3, [sp, #0x28]
  06054	e5832000	 str         r2, [r3]

; 3502 :     pComStat->fDsrHold = pPdd->flowOffDSR ? 1 : 0;

  06058	e59d3004	 ldr         r3, [sp, #4]
  0605c	e2833094	 add         r3, r3, #0x94
  06060	e5933000	 ldr         r3, [r3]
  06064	e3530000	 cmp         r3, #0
  06068	0a000002	 beq         |$LN8@HWGetStatu|
  0606c	e3a03001	 mov         r3, #1
  06070	e58d3014	 str         r3, [sp, #0x14]
  06074	ea000001	 b           |$LN9@HWGetStatu|
  06078		 |$LN8@HWGetStatu|
  06078	e3a03000	 mov         r3, #0
  0607c	e58d3014	 str         r3, [sp, #0x14]
  06080		 |$LN9@HWGetStatu|
  06080	e59d1014	 ldr         r1, [sp, #0x14]
  06084	e59d3028	 ldr         r3, [sp, #0x28]
  06088	e5932000	 ldr         r2, [r3]
  0608c	e3e03002	 mvn         r3, #2
  06090	e0022003	 and         r2, r2, r3
  06094	e2013001	 and         r3, r1, #1
  06098	e1a03083	 mov         r3, r3, lsl #1
  0609c	e1822003	 orr         r2, r2, r3
  060a0	e59d3028	 ldr         r3, [sp, #0x28]
  060a4	e5832000	 str         r2, [r3]

; 3503 :     pComStat->cbInQue  = 0;

  060a8	e59d3028	 ldr         r3, [sp, #0x28]
  060ac	e2832004	 add         r2, r3, #4
  060b0	e3a03000	 mov         r3, #0
  060b4	e5823000	 str         r3, [r2]

; 3504 :     pComStat->cbOutQue = 0;

  060b8	e59d3028	 ldr         r3, [sp, #0x28]
  060bc	e2832008	 add         r2, r3, #8
  060c0	e3a03000	 mov         r3, #0
  060c4	e5823000	 str         r3, [r2]

; 3505 : 
; 3506 :     rc = pPdd->commErrors;

  060c8	e59d3004	 ldr         r3, [sp, #4]
  060cc	e2833074	 add         r3, r3, #0x74
  060d0	e5933000	 ldr         r3, [r3]
  060d4	e58d3000	 str         r3, [sp]

; 3507 :     pPdd->commErrors = 0;

  060d8	e59d3004	 ldr         r3, [sp, #4]
  060dc	e2832074	 add         r2, r3, #0x74
  060e0	e3a03000	 mov         r3, #0
  060e4	e5823000	 str         r3, [r2]
  060e8		 |$cleanUp$45997|

; 3508 : 
; 3509 : cleanUp:
; 3510 :     DEBUGMSG(ZONE_FUNCTION, (L"-HWGetStatus(rc = %d)\r\n", rc));

  060e8	e59f3044	 ldr         r3, [pc, #0x44]
  060ec	e5933440	 ldr         r3, [r3, #0x440]
  060f0	e3130a02	 tst         r3, #2, 20
  060f4	0a000005	 beq         |$LN10@HWGetStatu|
  060f8	e59d1000	 ldr         r1, [sp]
  060fc	e59f002c	 ldr         r0, [pc, #0x2C]
  06100	eb000000	 bl          NKDbgPrintfW
  06104	e3a03001	 mov         r3, #1
  06108	e58d3018	 str         r3, [sp, #0x18]
  0610c	ea000001	 b           |$LN11@HWGetStatu|
  06110		 |$LN10@HWGetStatu|
  06110	e3a03000	 mov         r3, #0
  06114	e58d3018	 str         r3, [sp, #0x18]
  06118		 |$LN11@HWGetStatu|

; 3511 :     return rc;

  06118	e59d3000	 ldr         r3, [sp]
  0611c	e58d3008	 str         r3, [sp, #8]

; 3512 : }

  06120	e59d0008	 ldr         r0, [sp, #8]
  06124	e28dd01c	 add         sp, sp, #0x1C
  06128	e89d6000	 ldmia       sp, {sp, lr}
  0612c	e12fff1e	 bx          lr
  06130		 |$LN15@HWGetStatu|
  06130		 |$LN16@HWGetStatu|
  06130	00000000	 DCD         |??_C@_1DA@KKMNOALE@?$AA?9?$AAH?$AAW?$AAG?$AAe?$AAt?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  06134		 |$LN17@HWGetStatu|
  06134	00000000	 DCD         |dpCurSettings|
  06138		 |$LN18@HWGetStatu|
  06138	00000000	 DCD         |??_C@_1DO@HOLGPPDH@?$AA?$CL?$AAH?$AAW?$AAG?$AAe?$AAt?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  0613c		 |$M47422|

			 ENDP  ; |HWGetStatus|

	EXPORT	|??_C@_1CO@BFGDFNJ@?$AA?9?$AAH?$AAW?$AAG?$AAe?$AAt?$AAC?$AAo?$AAm?$AAm?$AAP?$AAr?$AAo?$AAp?$AAe?$AAr?$AAt?$AAi?$AAe?$AAs?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EO@OEPAKMDB@?$AA?$CL?$AAH?$AAW?$AAG?$AAe?$AAt?$AAC?$AAo?$AAm?$AAm?$AAP?$AAr?$AAo?$AAp?$AAe?$AAr?$AAt?$AAi?$AAe?$AAs?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF@| [ DATA ] ; `string'

  00178			 AREA	 |.pdata|, PDATA
|$T47437| DCD	|$LN10@HWGetCommP|
	DCD	0x40006704

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@BFGDFNJ@?$AA?9?$AAH?$AAW?$AAG?$AAe?$AAt?$AAC?$AAo?$AAm?$AAm?$AAP?$AAr?$AAo?$AAp?$AAe?$AAr?$AAt?$AAi?$AAe?$AAs?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "H", 0x0, "W", 0x0, "G", 0x0, "e", 0x0, "t", 0x0, "C"
	DCB	0x0, "o", 0x0, "m", 0x0, "m", 0x0, "P", 0x0, "r", 0x0, "o"
	DCB	0x0, "p", 0x0, "e", 0x0, "r", 0x0, "t", 0x0, "i", 0x0, "e"
	DCB	0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EO@OEPAKMDB@?$AA?$CL?$AAH?$AAW?$AAG?$AAe?$AAt?$AAC?$AAo?$AAm?$AAm?$AAP?$AAr?$AAo?$AAp?$AAe?$AAr?$AAt?$AAi?$AAe?$AAs?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF@| DCB "+"
	DCB	0x0, "H", 0x0, "W", 0x0, "G", 0x0, "e", 0x0, "t", 0x0, "C"
	DCB	0x0, "o", 0x0, "m", 0x0, "m", 0x0, "P", 0x0, "r", 0x0, "o"
	DCB	0x0, "p", 0x0, "e", 0x0, "r", 0x0, "t", 0x0, "i", 0x0, "e"
	DCB	0x0, "s", 0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  0613c			 AREA	 |.text|, CODE, ARM

  0613c		 |HWGetCommProperties| PROC

; 3524 : {

  0613c		 |$LN10@HWGetCommP|
  0613c	e1a0c00d	 mov         r12, sp
  06140	e92d0003	 stmdb       sp!, {r0, r1}
  06144	e92d5000	 stmdb       sp!, {r12, lr}
  06148	e24dd00c	 sub         sp, sp, #0xC
  0614c		 |$M47434|

; 3525 :     UARTPDD *pPdd = (UARTPDD*)pvContext;

  0614c	e59d3014	 ldr         r3, [sp, #0x14]
  06150	e58d3000	 str         r3, [sp]

; 3526 : 
; 3527 :     DEBUGMSG(ZONE_FUNCTION, (
; 3528 :         L"+HWGetCommProperties(0x%08x, 0x%08x)\r\n", pvContext,
; 3529 :         pCommProp
; 3530 :         ));

  06154	e59f3170	 ldr         r3, [pc, #0x170]
  06158	e5933440	 ldr         r3, [r3, #0x440]
  0615c	e3130a02	 tst         r3, #2, 20
  06160	0a000006	 beq         |$LN4@HWGetCommP|
  06164	e59d2018	 ldr         r2, [sp, #0x18]
  06168	e59d1014	 ldr         r1, [sp, #0x14]
  0616c	e59f0160	 ldr         r0, [pc, #0x160]
  06170	eb000000	 bl          NKDbgPrintfW
  06174	e3a03001	 mov         r3, #1
  06178	e58d3004	 str         r3, [sp, #4]
  0617c	ea000001	 b           |$LN5@HWGetCommP|
  06180		 |$LN4@HWGetCommP|
  06180	e3a03000	 mov         r3, #0
  06184	e58d3004	 str         r3, [sp, #4]
  06188		 |$LN5@HWGetCommP|

; 3531 : 
; 3532 :     memset(pCommProp, 0, sizeof(COMMPROP));

  06188	e3a02040	 mov         r2, #0x40
  0618c	e3a01000	 mov         r1, #0
  06190	e59d0018	 ldr         r0, [sp, #0x18]
  06194	eb000000	 bl          memset

; 3533 :     pCommProp->wPacketLength = 0xffff;

  06198	e59d2018	 ldr         r2, [sp, #0x18]
  0619c	e3a03cff	 mov         r3, #0xFF, 24
  061a0	e38330ff	 orr         r3, r3, #0xFF
  061a4	e1c230b0	 strh        r3, [r2]

; 3534 :     pCommProp->wPacketVersion = 0xffff;

  061a8	e59d3018	 ldr         r3, [sp, #0x18]
  061ac	e2832002	 add         r2, r3, #2
  061b0	e3a03cff	 mov         r3, #0xFF, 24
  061b4	e38330ff	 orr         r3, r3, #0xFF
  061b8	e1c230b0	 strh        r3, [r2]

; 3535 :     pCommProp->dwServiceMask = SP_SERIALCOMM;

  061bc	e59d3018	 ldr         r3, [sp, #0x18]
  061c0	e2832004	 add         r2, r3, #4
  061c4	e3a03001	 mov         r3, #1
  061c8	e5823000	 str         r3, [r2]

; 3536 :     pCommProp->dwMaxTxQueue = 16;

  061cc	e59d3018	 ldr         r3, [sp, #0x18]
  061d0	e283200c	 add         r2, r3, #0xC
  061d4	e3a03010	 mov         r3, #0x10
  061d8	e5823000	 str         r3, [r2]

; 3537 :     pCommProp->dwMaxRxQueue = 16;

  061dc	e59d3018	 ldr         r3, [sp, #0x18]
  061e0	e2832010	 add         r2, r3, #0x10
  061e4	e3a03010	 mov         r3, #0x10
  061e8	e5823000	 str         r3, [r2]

; 3538 :     pCommProp->dwMaxBaud = BAUD_USER;

  061ec	e59d3018	 ldr         r3, [sp, #0x18]
  061f0	e2832014	 add         r2, r3, #0x14
  061f4	e3a03201	 mov         r3, #1, 4
  061f8	e5823000	 str         r3, [r2]

; 3539 :     pCommProp->dwProvSubType = PST_RS232;

  061fc	e59d3018	 ldr         r3, [sp, #0x18]
  06200	e2832018	 add         r2, r3, #0x18
  06204	e3a03001	 mov         r3, #1
  06208	e5823000	 str         r3, [r2]

; 3540 :     pCommProp->dwProvCapabilities =
; 3541 :         // On EVM DTR/DSR are connected together (but cannot be controlled) and RI/CD are not wired.
; 3542 :         // PCF_DTRDSR | PCF_RLSD |
; 3543 :         PCF_INTTIMEOUTS | PCF_PARITY_CHECK |
; 3544 :         PCF_SETXCHAR | PCF_SPECIALCHARS | PCF_TOTALTIMEOUTS |
; 3545 :         PCF_XONXOFF;

  0620c	e59d3018	 ldr         r3, [sp, #0x18]
  06210	e283201c	 add         r2, r3, #0x1C
  06214	e3a03f7e	 mov         r3, #0x7E, 30
  06218	e5823000	 str         r3, [r2]

; 3546 :     pCommProp->dwSettableParams =
; 3547 :         // On GSample RI/CD are not wired
; 3548 :         // SP_RLSD |
; 3549 :         SP_BAUD | SP_DATABITS | SP_HANDSHAKING | SP_PARITY |
; 3550 :         SP_PARITY_CHECK | SP_STOPBITS;

  0621c	e59d3018	 ldr         r3, [sp, #0x18]
  06220	e2832020	 add         r2, r3, #0x20
  06224	e3a0303f	 mov         r3, #0x3F
  06228	e5823000	 str         r3, [r2]

; 3551 :     pCommProp->dwSettableBaud =
; 3552 :         /* not supported - BAUD_075 | BAUD_110 | BAUD_150 | */ BAUD_300 | BAUD_600 | BAUD_1200 |
; 3553 :         BAUD_1800 | BAUD_2400 | BAUD_4800 | BAUD_7200 | BAUD_9600 | BAUD_14400 |
; 3554 :         BAUD_19200 | BAUD_38400 | BAUD_57600 | BAUD_115200 | BAUD_USER;

  0622c	e59d3018	 ldr         r3, [sp, #0x18]
  06230	e2832024	 add         r2, r3, #0x24
  06234	e59f3094	 ldr         r3, [pc, #0x94]
  06238	e5823000	 str         r3, [r2]

; 3555 :     pCommProp->wSettableData =
; 3556 :         DATABITS_5 | DATABITS_6 | DATABITS_7 | DATABITS_8;

  0623c	e59d3018	 ldr         r3, [sp, #0x18]
  06240	e2832028	 add         r2, r3, #0x28
  06244	e3a0300f	 mov         r3, #0xF
  06248	e1c230b0	 strh        r3, [r2]

; 3557 :     pCommProp->wSettableStopParity =
; 3558 :         STOPBITS_10 | STOPBITS_20 |
; 3559 :         PARITY_NONE | PARITY_ODD | PARITY_EVEN | PARITY_SPACE |
; 3560 :         PARITY_MARK;

  0624c	e59d3018	 ldr         r3, [sp, #0x18]
  06250	e283202a	 add         r2, r3, #0x2A
  06254	e3a03c1f	 mov         r3, #0x1F, 24
  06258	e3833005	 orr         r3, r3, #5
  0625c	e1c230b0	 strh        r3, [r2]

; 3561 : 
; 3562 :     if (pPdd->dwRtsCtsEnable)

  06260	e59d3000	 ldr         r3, [sp]
  06264	e2833f56	 add         r3, r3, #0x56, 30
  06268	e5933000	 ldr         r3, [r3]
  0626c	e3530000	 cmp         r3, #0
  06270	0a000006	 beq         |$LN1@HWGetCommP|

; 3563 :         pCommProp->dwProvCapabilities |= PCF_RTSCTS;

  06274	e59d3018	 ldr         r3, [sp, #0x18]
  06278	e283301c	 add         r3, r3, #0x1C
  0627c	e5933000	 ldr         r3, [r3]
  06280	e3832002	 orr         r2, r3, #2
  06284	e59d3018	 ldr         r3, [sp, #0x18]
  06288	e283301c	 add         r3, r3, #0x1C
  0628c	e5832000	 str         r2, [r3]
  06290		 |$LN1@HWGetCommP|

; 3564 : 
; 3565 :     DEBUGMSG(ZONE_FUNCTION, (L"-HWGetCommProperties\r\n"));

  06290	e59f3034	 ldr         r3, [pc, #0x34]
  06294	e5933440	 ldr         r3, [r3, #0x440]
  06298	e3130a02	 tst         r3, #2, 20
  0629c	0a000004	 beq         |$LN6@HWGetCommP|
  062a0	e59f0020	 ldr         r0, [pc, #0x20]
  062a4	eb000000	 bl          NKDbgPrintfW
  062a8	e3a03001	 mov         r3, #1
  062ac	e58d3008	 str         r3, [sp, #8]
  062b0	ea000001	 b           |$LN7@HWGetCommP|
  062b4		 |$LN6@HWGetCommP|
  062b4	e3a03000	 mov         r3, #0
  062b8	e58d3008	 str         r3, [sp, #8]
  062bc		 |$LN7@HWGetCommP|

; 3566 : }

  062bc	e28dd00c	 add         sp, sp, #0xC
  062c0	e89d6000	 ldmia       sp, {sp, lr}
  062c4	e12fff1e	 bx          lr
  062c8		 |$LN11@HWGetCommP|
  062c8		 |$LN12@HWGetCommP|
  062c8	00000000	 DCD         |??_C@_1CO@BFGDFNJ@?$AA?9?$AAH?$AAW?$AAG?$AAe?$AAt?$AAC?$AAo?$AAm?$AAm?$AAP?$AAr?$AAo?$AAp?$AAe?$AAr?$AAt?$AAi?$AAe?$AAs?$AA?$AN?$AA?6?$AA?$AA@|
  062cc		 |$LN13@HWGetCommP|
  062cc	00000000	 DCD         |dpCurSettings|
  062d0		 |$LN14@HWGetCommP|
  062d0	10067ff0	 DCD         0x10067ff0
  062d4		 |$LN15@HWGetCommP|
  062d4	00000000	 DCD         |??_C@_1EO@OEPAKMDB@?$AA?$CL?$AAH?$AAW?$AAG?$AAe?$AAt?$AAC?$AAo?$AAm?$AAm?$AAP?$AAr?$AAo?$AAp?$AAe?$AAr?$AAt?$AAi?$AAe?$AAs?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF@|
  062d8		 |$M47435|

			 ENDP  ; |HWGetCommProperties|

	EXPORT	|??_C@_1BO@FPAOPOON@?$AA?9?$AAH?$AAW?$AAP?$AAu?$AAr?$AAg?$AAe?$AAC?$AAo?$AAm?$AAm?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EA@FADOAAH@?$AAP?$AAu?$AAr?$AAg?$AAe?$AAC?$AAo?$AAm?$AAm?$AA?3?$AA?5?$AAL?$AAa?$AAs?$AAt?$AA?5?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?5?$AAP?$AAo?$AAs?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DM@IPMAKAPL@?$AA?$CL?$AAH?$AAW?$AAP?$AAu?$AAr?$AAg?$AAe?$AAC?$AAo?$AAm?$AAm?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00180			 AREA	 |.pdata|, PDATA
|$T47453| DCD	|$LN18@HWPurgeCom|
	DCD	0x4000d904

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@FPAOPOON@?$AA?9?$AAH?$AAW?$AAP?$AAu?$AAr?$AAg?$AAe?$AAC?$AAo?$AAm?$AAm?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "H", 0x0, "W", 0x0, "P", 0x0, "u", 0x0, "r", 0x0, "g"
	DCB	0x0, "e", 0x0, "C", 0x0, "o", 0x0, "m", 0x0, "m", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@FADOAAH@?$AAP?$AAu?$AAr?$AAg?$AAe?$AAC?$AAo?$AAm?$AAm?$AA?3?$AA?5?$AAL?$AAa?$AAs?$AAt?$AA?5?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?5?$AAP?$AAo?$AAs?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AA@| DCB "P"
	DCB	0x0, "u", 0x0, "r", 0x0, "g", 0x0, "e", 0x0, "C", 0x0, "o"
	DCB	0x0, "m", 0x0, "m", 0x0, ":", 0x0, " ", 0x0, "L", 0x0, "a"
	DCB	0x0, "s", 0x0, "t", 0x0, " ", 0x0, "W", 0x0, "r", 0x0, "i"
	DCB	0x0, "t", 0x0, "e", 0x0, " ", 0x0, "P", 0x0, "o", 0x0, "s"
	DCB	0x0, ":", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@IPMAKAPL@?$AA?$CL?$AAH?$AAW?$AAP?$AAu?$AAr?$AAg?$AAe?$AAC?$AAo?$AAm?$AAm?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "H", 0x0, "W", 0x0, "P", 0x0, "u", 0x0, "r", 0x0, "g"
	DCB	0x0, "e", 0x0, "C", 0x0, "o", 0x0, "m", 0x0, "m", 0x0, "("
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x"
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "x", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  062d8			 AREA	 |.text|, CODE, ARM

  062d8		 |HWPurgeComm| PROC

; 3580 : {

  062d8		 |$LN18@HWPurgeCom|
  062d8	e1a0c00d	 mov         r12, sp
  062dc	e92d0003	 stmdb       sp!, {r0, r1}
  062e0	e92d5000	 stmdb       sp!, {r12, lr}
  062e4	e24dd01c	 sub         sp, sp, #0x1C
  062e8		 |$M47450|

; 3581 :     UARTPDD *pPdd = (UARTPDD*)pvContext;

  062e8	e59d3024	 ldr         r3, [sp, #0x24]
  062ec	e58d3004	 str         r3, [sp, #4]

; 3582 :     UCHAR mdr1, nDll, nDlh;
; 3583 :     UCHAR fifoCtrl = 0;

  062f0	e3a03000	 mov         r3, #0
  062f4	e5cd3000	 strb        r3, [sp]

; 3584 : 
; 3585 :     DEBUGMSG(ZONE_FUNCTION, (
; 3586 :         L"+HWPurgeComm(0x%08x 0x%08x)\r\n", pvContext, action
; 3587 :         ));

  062f8	e59f3330	 ldr         r3, [pc, #0x330]
  062fc	e5933440	 ldr         r3, [r3, #0x440]
  06300	e3130a02	 tst         r3, #2, 20
  06304	0a000006	 beq         |$LN10@HWPurgeCom|
  06308	e59d2028	 ldr         r2, [sp, #0x28]
  0630c	e59d1024	 ldr         r1, [sp, #0x24]
  06310	e59f0320	 ldr         r0, [pc, #0x320]
  06314	eb000000	 bl          NKDbgPrintfW
  06318	e3a03001	 mov         r3, #1
  0631c	e58d3008	 str         r3, [sp, #8]
  06320	ea000001	 b           |$LN11@HWPurgeCom|
  06324		 |$LN10@HWPurgeCom|
  06324	e3a03000	 mov         r3, #0
  06328	e58d3008	 str         r3, [sp, #8]
  0632c		 |$LN11@HWPurgeCom|

; 3588 :     if ((action & PURGE_TXCLEAR) || (action & PURGE_RXCLEAR))

  0632c	e59d3028	 ldr         r3, [sp, #0x28]
  06330	e3130004	 tst         r3, #4
  06334	1a000002	 bne         |$LN6@HWPurgeCom|
  06338	e59d3028	 ldr         r3, [sp, #0x28]
  0633c	e3130008	 tst         r3, #8
  06340	0a00006c	 beq         |$LN7@HWPurgeCom|
  06344		 |$LN6@HWPurgeCom|

; 3589 :     {
; 3590 :         EnterCriticalSection(&pPdd->hwCS);

  06344	e59d3004	 ldr         r3, [sp, #4]
  06348	e2830098	 add         r0, r3, #0x98
  0634c	eb000000	 bl          EnterCriticalSection

; 3591 : 
; 3592 :         mdr1 = INREG8(&pPdd->pUartRegs->MDR1);

  06350	e59d3004	 ldr         r3, [sp, #4]
  06354	e2833024	 add         r3, r3, #0x24
  06358	e5933000	 ldr         r3, [r3]
  0635c	e2833020	 add         r3, r3, #0x20
  06360	e5d33000	 ldrb        r3, [r3]
  06364	e5cd3003	 strb        r3, [sp, #3]

; 3593 : 
; 3594 :         // Disable UART
; 3595 :         OUTREG8(&pPdd->pUartRegs->MDR1, UART_MDR1_DISABLE);

  06368	e59d3004	 ldr         r3, [sp, #4]
  0636c	e2833024	 add         r3, r3, #0x24
  06370	e5933000	 ldr         r3, [r3]
  06374	e2832020	 add         r2, r3, #0x20
  06378	e3a03007	 mov         r3, #7
  0637c	e5c23000	 strb        r3, [r2]

; 3596 : 
; 3597 :         SETREG8(&pPdd->pUartRegs->LCR, UART_LCR_DIV_EN);

  06380	e59d3004	 ldr         r3, [sp, #4]
  06384	e2833024	 add         r3, r3, #0x24
  06388	e5933000	 ldr         r3, [r3]
  0638c	e283300c	 add         r3, r3, #0xC
  06390	e5d33000	 ldrb        r3, [r3]
  06394	e3833080	 orr         r3, r3, #0x80
  06398	e20320ff	 and         r2, r3, #0xFF
  0639c	e59d3004	 ldr         r3, [sp, #4]
  063a0	e2833024	 add         r3, r3, #0x24
  063a4	e5933000	 ldr         r3, [r3]
  063a8	e283300c	 add         r3, r3, #0xC
  063ac	e5c32000	 strb        r2, [r3]

; 3598 : 
; 3599 :         // store baud clock
; 3600 :         nDll = INREG8(&pPdd->pUartRegs->DLL);

  063b0	e59d3004	 ldr         r3, [sp, #4]
  063b4	e2833024	 add         r3, r3, #0x24
  063b8	e5933000	 ldr         r3, [r3]
  063bc	e5d33000	 ldrb        r3, [r3]
  063c0	e5cd3002	 strb        r3, [sp, #2]

; 3601 :         nDlh = INREG8(&pPdd->pUartRegs->DLH);

  063c4	e59d3004	 ldr         r3, [sp, #4]
  063c8	e2833024	 add         r3, r3, #0x24
  063cc	e5933000	 ldr         r3, [r3]
  063d0	e2833004	 add         r3, r3, #4
  063d4	e5d33000	 ldrb        r3, [r3]
  063d8	e5cd3001	 strb        r3, [sp, #1]

; 3602 : 
; 3603 :         // Clear the baud clock
; 3604 :         OUTREG8(&pPdd->pUartRegs->DLL, 0);

  063dc	e59d3004	 ldr         r3, [sp, #4]
  063e0	e2833024	 add         r3, r3, #0x24
  063e4	e5932000	 ldr         r2, [r3]
  063e8	e3a03000	 mov         r3, #0
  063ec	e5c23000	 strb        r3, [r2]

; 3605 :         OUTREG8(&pPdd->pUartRegs->DLH, 0);

  063f0	e59d3004	 ldr         r3, [sp, #4]
  063f4	e2833024	 add         r3, r3, #0x24
  063f8	e5933000	 ldr         r3, [r3]
  063fc	e2832004	 add         r2, r3, #4
  06400	e3a03000	 mov         r3, #0
  06404	e5c23000	 strb        r3, [r2]

; 3606 : 
; 3607 :         // clear FIFOs as requested
; 3608 :         if ((action & PURGE_TXCLEAR) != 0) fifoCtrl |= UART_FCR_TX_FIFO_CLEAR;

  06408	e59d3028	 ldr         r3, [sp, #0x28]
  0640c	e3130004	 tst         r3, #4
  06410	0a000003	 beq         |$LN5@HWPurgeCom|
  06414	e5dd3000	 ldrb        r3, [sp]
  06418	e3833004	 orr         r3, r3, #4
  0641c	e20330ff	 and         r3, r3, #0xFF
  06420	e5cd3000	 strb        r3, [sp]
  06424		 |$LN5@HWPurgeCom|

; 3609 :         if ((action & PURGE_RXCLEAR) != 0) fifoCtrl |= UART_FCR_RX_FIFO_CLEAR;

  06424	e59d3028	 ldr         r3, [sp, #0x28]
  06428	e3130008	 tst         r3, #8
  0642c	0a000003	 beq         |$LN4@HWPurgeCom|
  06430	e5dd3000	 ldrb        r3, [sp]
  06434	e3833002	 orr         r3, r3, #2
  06438	e20330ff	 and         r3, r3, #0xFF
  0643c	e5cd3000	 strb        r3, [sp]
  06440		 |$LN4@HWPurgeCom|

; 3610 :         OUTREG8(&pPdd->pUartRegs->FCR, pPdd->CurrentFCR | fifoCtrl);

  06440	e59d3004	 ldr         r3, [sp, #4]
  06444	e2833089	 add         r3, r3, #0x89
  06448	e5d33000	 ldrb        r3, [r3]
  0644c	e1a02003	 mov         r2, r3
  06450	e5dd3000	 ldrb        r3, [sp]
  06454	e1823003	 orr         r3, r2, r3
  06458	e20320ff	 and         r2, r3, #0xFF
  0645c	e59d3004	 ldr         r3, [sp, #4]
  06460	e2833024	 add         r3, r3, #0x24
  06464	e5933000	 ldr         r3, [r3]
  06468	e2833008	 add         r3, r3, #8
  0646c	e5c32000	 strb        r2, [r3]

; 3611 : 
; 3612 :         // Do we need to read RESUME register in case there was an overrun error in the FIFO?
; 3613 :         //INREG8(&pPdd->pUartRegs->RESUME);
; 3614 : 
; 3615 :         // set baud clock
; 3616 :         OUTREG8(&pPdd->pUartRegs->DLL, nDll);

  06470	e59d3004	 ldr         r3, [sp, #4]
  06474	e2833024	 add         r3, r3, #0x24
  06478	e5932000	 ldr         r2, [r3]
  0647c	e5dd3002	 ldrb        r3, [sp, #2]
  06480	e5c23000	 strb        r3, [r2]

; 3617 :         OUTREG8(&pPdd->pUartRegs->DLH, nDlh);

  06484	e59d3004	 ldr         r3, [sp, #4]
  06488	e2833024	 add         r3, r3, #0x24
  0648c	e5933000	 ldr         r3, [r3]
  06490	e2832004	 add         r2, r3, #4
  06494	e5dd3001	 ldrb        r3, [sp, #1]
  06498	e5c23000	 strb        r3, [r2]

; 3618 : 
; 3619 :         CLRREG8(&pPdd->pUartRegs->LCR, UART_LCR_DIV_EN);

  0649c	e59d3004	 ldr         r3, [sp, #4]
  064a0	e2833024	 add         r3, r3, #0x24
  064a4	e5933000	 ldr         r3, [r3]
  064a8	e283300c	 add         r3, r3, #0xC
  064ac	e5d33000	 ldrb        r3, [r3]
  064b0	e1a02003	 mov         r2, r3
  064b4	e3e03080	 mvn         r3, #0x80
  064b8	e0023003	 and         r3, r2, r3
  064bc	e20320ff	 and         r2, r3, #0xFF
  064c0	e59d3004	 ldr         r3, [sp, #4]
  064c4	e2833024	 add         r3, r3, #0x24
  064c8	e5933000	 ldr         r3, [r3]
  064cc	e283300c	 add         r3, r3, #0xC
  064d0	e5c32000	 strb        r2, [r3]

; 3620 : 
; 3621 :         // Enable UART
; 3622 :         OUTREG8(&pPdd->pUartRegs->MDR1, mdr1);

  064d4	e59d3004	 ldr         r3, [sp, #4]
  064d8	e2833024	 add         r3, r3, #0x24
  064dc	e5933000	 ldr         r3, [r3]
  064e0	e2832020	 add         r2, r3, #0x20
  064e4	e5dd3003	 ldrb        r3, [sp, #3]
  064e8	e5c23000	 strb        r3, [r2]

; 3623 : 
; 3624 :         LeaveCriticalSection(&pPdd->hwCS);

  064ec	e59d3004	 ldr         r3, [sp, #4]
  064f0	e2830098	 add         r0, r3, #0x98
  064f4	eb000000	 bl          LeaveCriticalSection
  064f8		 |$LN7@HWPurgeCom|

; 3625 :     }
; 3626 : 
; 3627 : 
; 3628 :     // Reset the RX dma pointers if we are using DMA for RX
; 3629 :     // the mdd pointers are reset by the mdd.
; 3630 :     if(pPdd->RxDmaInfo && (action & PURGE_RXCLEAR))

  064f8	e59d3004	 ldr         r3, [sp, #4]
  064fc	e2833f49	 add         r3, r3, #0x49, 30
  06500	e5933000	 ldr         r3, [r3]
  06504	e3530000	 cmp         r3, #0
  06508	0a000025	 beq         |$LN3@HWPurgeCom|
  0650c	e59d3028	 ldr         r3, [sp, #0x28]
  06510	e3130008	 tst         r3, #8
  06514	0a000022	 beq         |$LN3@HWPurgeCom|

; 3631 :     {
; 3632 :         DmaStop(pPdd->RxDmaInfo);

  06518	e59d3004	 ldr         r3, [sp, #4]
  0651c	e2833f49	 add         r3, r3, #0x49, 30
  06520	e5930000	 ldr         r0, [r3]
  06524	eb000000	 bl          DmaStop

; 3633 :         EnterCriticalSection(&pPdd->RxUpdatePtrCS);

  06528	e59d3004	 ldr         r3, [sp, #4]
  0652c	e28300c0	 add         r0, r3, #0xC0
  06530	eb000000	 bl          EnterCriticalSection

; 3634 :         UpdateDMARxPointer(pPdd, TRUE, 0);

  06534	e3a02000	 mov         r2, #0
  06538	e3a01001	 mov         r1, #1
  0653c	e59d0004	 ldr         r0, [sp, #4]
  06540	eb000000	 bl          UpdateDMARxPointer

; 3635 :         DmaStart(pPdd->RxDmaInfo);

  06544	e59d3004	 ldr         r3, [sp, #4]
  06548	e2833f49	 add         r3, r3, #0x49, 30
  0654c	e5930000	 ldr         r0, [r3]
  06550	eb000000	 bl          DmaStart

; 3636 :         LeaveCriticalSection(&pPdd->RxUpdatePtrCS);

  06554	e59d3004	 ldr         r3, [sp, #4]
  06558	e28300c0	 add         r0, r3, #0xC0
  0655c	eb000000	 bl          LeaveCriticalSection

; 3637 :         DEBUGMSG(ZONE_FUNCTION, (TEXT("PurgeComm: Last Write Pos: 0x%x"),
; 3638 :                 DmaGetLastWritePos(pPdd->RxDmaInfo)));

  06560	e59f30c8	 ldr         r3, [pc, #0xC8]
  06564	e5933440	 ldr         r3, [r3, #0x440]
  06568	e3130a02	 tst         r3, #2, 20
  0656c	0a00000a	 beq         |$LN12@HWPurgeCom|
  06570	e59d3004	 ldr         r3, [sp, #4]
  06574	e2833f49	 add         r3, r3, #0x49, 30
  06578	e5930000	 ldr         r0, [r3]
  0657c	eb000000	 bl          DmaGetLastWritePos
  06580	e58d000c	 str         r0, [sp, #0xC]
  06584	e59d100c	 ldr         r1, [sp, #0xC]
  06588	e59f00a4	 ldr         r0, [pc, #0xA4]
  0658c	eb000000	 bl          NKDbgPrintfW
  06590	e3a03001	 mov         r3, #1
  06594	e58d3010	 str         r3, [sp, #0x10]
  06598	ea000001	 b           |$LN13@HWPurgeCom|
  0659c		 |$LN12@HWPurgeCom|
  0659c	e3a03000	 mov         r3, #0
  065a0	e58d3010	 str         r3, [sp, #0x10]
  065a4		 |$LN13@HWPurgeCom|
  065a4		 |$LN3@HWPurgeCom|

; 3639 :     }
; 3640 :     // purge on TX DMA if Application has not set the timeout value.
; 3641 :     if(pPdd->TxDmaInfo && (action & PURGE_TXCLEAR))

  065a4	e59d3004	 ldr         r3, [sp, #4]
  065a8	e2833c01	 add         r3, r3, #1, 24
  065ac	e5933000	 ldr         r3, [r3]
  065b0	e3530000	 cmp         r3, #0
  065b4	0a00000e	 beq         |$LN2@HWPurgeCom|
  065b8	e59d3028	 ldr         r3, [sp, #0x28]
  065bc	e3130004	 tst         r3, #4
  065c0	0a00000b	 beq         |$LN2@HWPurgeCom|

; 3642 :     {
; 3643 :         if(IsDmaEnable(pPdd->TxDmaInfo)) DmaStop(pPdd->TxDmaInfo);

  065c4	e59d3004	 ldr         r3, [sp, #4]
  065c8	e2833c01	 add         r3, r3, #1, 24
  065cc	e5930000	 ldr         r0, [r3]
  065d0	eb000000	 bl          IsDmaEnable
  065d4	e58d0014	 str         r0, [sp, #0x14]
  065d8	e59d3014	 ldr         r3, [sp, #0x14]
  065dc	e3530000	 cmp         r3, #0
  065e0	0a000003	 beq         |$LN1@HWPurgeCom|
  065e4	e59d3004	 ldr         r3, [sp, #4]
  065e8	e2833c01	 add         r3, r3, #1, 24
  065ec	e5930000	 ldr         r0, [r3]
  065f0	eb000000	 bl          DmaStop
  065f4		 |$LN1@HWPurgeCom|
  065f4		 |$LN2@HWPurgeCom|

; 3644 :     }
; 3645 :     DEBUGMSG(ZONE_FUNCTION, (L"-HWPurgeComm\r\n"));

  065f4	e59f3034	 ldr         r3, [pc, #0x34]
  065f8	e5933440	 ldr         r3, [r3, #0x440]
  065fc	e3130a02	 tst         r3, #2, 20
  06600	0a000004	 beq         |$LN14@HWPurgeCom|
  06604	e59f0020	 ldr         r0, [pc, #0x20]
  06608	eb000000	 bl          NKDbgPrintfW
  0660c	e3a03001	 mov         r3, #1
  06610	e58d3018	 str         r3, [sp, #0x18]
  06614	ea000001	 b           |$LN15@HWPurgeCom|
  06618		 |$LN14@HWPurgeCom|
  06618	e3a03000	 mov         r3, #0
  0661c	e58d3018	 str         r3, [sp, #0x18]
  06620		 |$LN15@HWPurgeCom|

; 3646 : }

  06620	e28dd01c	 add         sp, sp, #0x1C
  06624	e89d6000	 ldmia       sp, {sp, lr}
  06628	e12fff1e	 bx          lr
  0662c		 |$LN19@HWPurgeCom|
  0662c		 |$LN20@HWPurgeCom|
  0662c	00000000	 DCD         |??_C@_1BO@FPAOPOON@?$AA?9?$AAH?$AAW?$AAP?$AAu?$AAr?$AAg?$AAe?$AAC?$AAo?$AAm?$AAm?$AA?$AN?$AA?6?$AA?$AA@|
  06630		 |$LN21@HWPurgeCom|
  06630	00000000	 DCD         |dpCurSettings|
  06634		 |$LN22@HWPurgeCom|
  06634	00000000	 DCD         |??_C@_1EA@FADOAAH@?$AAP?$AAu?$AAr?$AAg?$AAe?$AAC?$AAo?$AAm?$AAm?$AA?3?$AA?5?$AAL?$AAa?$AAs?$AAt?$AA?5?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?5?$AAP?$AAo?$AAs?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AA@|
  06638		 |$LN23@HWPurgeCom|
  06638	00000000	 DCD         |??_C@_1DM@IPMAKAPL@?$AA?$CL?$AAH?$AAW?$AAP?$AAu?$AAr?$AAg?$AAe?$AAC?$AAo?$AAm?$AAm?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  0663c		 |$M47451|

			 ENDP  ; |HWPurgeComm|

	EXPORT	|??_C@_1CK@LOGODHGL@?$AA?9?$AAH?$AAW?$AAS?$AAe?$AAt?$AAD?$AAC?$AAB?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DG@HIODKOEI@?$AA?$CL?$AAH?$AAW?$AAS?$AAe?$AAt?$AAD?$AAC?$AAB?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|memcpy|

  00188			 AREA	 |.pdata|, PDATA
|$T47469| DCD	|$LN12@HWSetDCB|
	DCD	0x40004c04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CK@LOGODHGL@?$AA?9?$AAH?$AAW?$AAS?$AAe?$AAt?$AAD?$AAC?$AAB?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "H", 0x0, "W", 0x0, "S", 0x0, "e", 0x0, "t", 0x0, "D"
	DCB	0x0, "C", 0x0, "B", 0x0, "(", 0x0, "r", 0x0, "c", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DG@HIODKOEI@?$AA?$CL?$AAH?$AAW?$AAS?$AAe?$AAt?$AAD?$AAC?$AAB?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "H", 0x0, "W", 0x0, "S", 0x0, "e", 0x0, "t", 0x0, "D"
	DCB	0x0, "C", 0x0, "B", 0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "8", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  0663c			 AREA	 |.text|, CODE, ARM

  0663c		 |HWSetDCB| PROC

; 3662 : {

  0663c		 |$LN12@HWSetDCB|
  0663c	e1a0c00d	 mov         r12, sp
  06640	e92d0003	 stmdb       sp!, {r0, r1}
  06644	e92d5000	 stmdb       sp!, {r12, lr}
  06648	e24dd018	 sub         sp, sp, #0x18
  0664c		 |$M47466|

; 3663 :     UARTPDD *pPdd = (UARTPDD*)pvContext;

  0664c	e59d3020	 ldr         r3, [sp, #0x20]
  06650	e58d3004	 str         r3, [sp, #4]

; 3664 :     BOOL rc = FALSE;

  06654	e3a03000	 mov         r3, #0
  06658	e58d3000	 str         r3, [sp]

; 3665 : 
; 3666 :     DEBUGMSG(ZONE_FUNCTION, (
; 3667 :         L"+HWSetDCB(0x%08x, 0x%08x\r\n", pvContext, pDCB
; 3668 :         ));

  0665c	e59f3100	 ldr         r3, [pc, #0x100]
  06660	e5933440	 ldr         r3, [r3, #0x440]
  06664	e3130a02	 tst         r3, #2, 20
  06668	0a000006	 beq         |$LN6@HWSetDCB|
  0666c	e59d2024	 ldr         r2, [sp, #0x24]
  06670	e59d1020	 ldr         r1, [sp, #0x20]
  06674	e59f00ec	 ldr         r0, [pc, #0xEC]
  06678	eb000000	 bl          NKDbgPrintfW
  0667c	e3a03001	 mov         r3, #1
  06680	e58d300c	 str         r3, [sp, #0xC]
  06684	ea000001	 b           |$LN7@HWSetDCB|
  06688		 |$LN6@HWSetDCB|
  06688	e3a03000	 mov         r3, #0
  0668c	e58d300c	 str         r3, [sp, #0xC]
  06690		 |$LN7@HWSetDCB|

; 3669 :     // Check for same XON/XOFF characters...
; 3670 :     if (((pDCB->fOutX != 0) || (pDCB->fInX != 0)) &&
; 3671 :         (pDCB->XonChar == pDCB->XoffChar))

  06690	e59d3024	 ldr         r3, [sp, #0x24]
  06694	e2833008	 add         r3, r3, #8
  06698	e5933000	 ldr         r3, [r3]
  0669c	e3130c01	 tst         r3, #1, 24
  066a0	1a000004	 bne         |$LN2@HWSetDCB|
  066a4	e59d3024	 ldr         r3, [sp, #0x24]
  066a8	e2833008	 add         r3, r3, #8
  066ac	e5933000	 ldr         r3, [r3]
  066b0	e3130c02	 tst         r3, #2, 24
  066b4	0a000008	 beq         |$LN3@HWSetDCB|
  066b8		 |$LN2@HWSetDCB|
  066b8	e59d3024	 ldr         r3, [sp, #0x24]
  066bc	e2833015	 add         r3, r3, #0x15
  066c0	e1d320d0	 ldrsb       r2, [r3]
  066c4	e59d3024	 ldr         r3, [sp, #0x24]
  066c8	e2833016	 add         r3, r3, #0x16
  066cc	e1d330d0	 ldrsb       r3, [r3]
  066d0	e1520003	 cmp         r2, r3
  066d4	1a000000	 bne         |$LN3@HWSetDCB|

; 3672 :     {
; 3673 :         goto cleanUp;

  066d8	ea00000e	 b           |$cleanUp$46113|
  066dc		 |$LN3@HWSetDCB|

; 3674 :     }
; 3675 : 
; 3676 :     // Update COMM port setting according DCB. SetDCB checks the flags in pPdd->pDCB
; 3677 :     // before updating the register value if the 3rd parameter is FALSE.
; 3678 :     rc = SetDCB(pPdd, pDCB, FALSE);

  066dc	e3a02000	 mov         r2, #0
  066e0	e59d1024	 ldr         r1, [sp, #0x24]
  066e4	e59d0004	 ldr         r0, [sp, #4]
  066e8	eb000000	 bl          SetDCB
  066ec	e58d0010	 str         r0, [sp, #0x10]
  066f0	e59d3010	 ldr         r3, [sp, #0x10]
  066f4	e58d3000	 str         r3, [sp]

; 3679 : 
; 3680 :     // Now that we have done the right thing, store this DCB
; 3681 :     if (rc == TRUE)

  066f8	e59d3000	 ldr         r3, [sp]
  066fc	e3530001	 cmp         r3, #1
  06700	1a000004	 bne         |$LN1@HWSetDCB|

; 3682 :     {
; 3683 :         pPdd->dcb = *pDCB;

  06704	e59d1024	 ldr         r1, [sp, #0x24]
  06708	e59d3004	 ldr         r3, [sp, #4]
  0670c	e2830058	 add         r0, r3, #0x58
  06710	e3a0201c	 mov         r2, #0x1C
  06714	eb000000	 bl          memcpy
  06718		 |$LN1@HWSetDCB|
  06718		 |$cleanUp$46113|

; 3684 :     }
; 3685 : 
; 3686 : 
; 3687 : cleanUp:
; 3688 :     DEBUGMSG(ZONE_FUNCTION, (L"-HWSetDCB(rc = %d)\r\n", rc));

  06718	e59f3044	 ldr         r3, [pc, #0x44]
  0671c	e5933440	 ldr         r3, [r3, #0x440]
  06720	e3130a02	 tst         r3, #2, 20
  06724	0a000005	 beq         |$LN8@HWSetDCB|
  06728	e59d1000	 ldr         r1, [sp]
  0672c	e59f002c	 ldr         r0, [pc, #0x2C]
  06730	eb000000	 bl          NKDbgPrintfW
  06734	e3a03001	 mov         r3, #1
  06738	e58d3014	 str         r3, [sp, #0x14]
  0673c	ea000001	 b           |$LN9@HWSetDCB|
  06740		 |$LN8@HWSetDCB|
  06740	e3a03000	 mov         r3, #0
  06744	e58d3014	 str         r3, [sp, #0x14]
  06748		 |$LN9@HWSetDCB|

; 3689 :     return rc;

  06748	e59d3000	 ldr         r3, [sp]
  0674c	e58d3008	 str         r3, [sp, #8]

; 3690 : }

  06750	e59d0008	 ldr         r0, [sp, #8]
  06754	e28dd018	 add         sp, sp, #0x18
  06758	e89d6000	 ldmia       sp, {sp, lr}
  0675c	e12fff1e	 bx          lr
  06760		 |$LN13@HWSetDCB|
  06760		 |$LN14@HWSetDCB|
  06760	00000000	 DCD         |??_C@_1CK@LOGODHGL@?$AA?9?$AAH?$AAW?$AAS?$AAe?$AAt?$AAD?$AAC?$AAB?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  06764		 |$LN15@HWSetDCB|
  06764	00000000	 DCD         |dpCurSettings|
  06768		 |$LN16@HWSetDCB|
  06768	00000000	 DCD         |??_C@_1DG@HIODKOEI@?$AA?$CL?$AAH?$AAW?$AAS?$AAe?$AAt?$AAD?$AAC?$AAB?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  0676c		 |$M47467|

			 ENDP  ; |HWSetDCB|


  00190			 AREA	 |.pdata|, PDATA
|$T47479| DCD	|$LN27@SetDCB|
	DCD	0x40009d04
; Function compile flags: /Odtp

  0676c			 AREA	 |.text|, CODE, ARM

  0676c		 |SetDCB| PROC

; 1446 : {

  0676c		 |$LN27@SetDCB|
  0676c	e1a0c00d	 mov         r12, sp
  06770	e92d0007	 stmdb       sp!, {r0 - r2}
  06774	e92d5000	 stmdb       sp!, {r12, lr}
  06778	e24dd028	 sub         sp, sp, #0x28
  0677c		 |$M47476|

; 1447 :     BOOL    bRC = FALSE;

  0677c	e3a03000	 mov         r3, #0
  06780	e58d3000	 str         r3, [sp]

; 1448 : 
; 1449 :     // If the device is open, scan for changes and do whatever
; 1450 :     // is needed for the changed fields.  if the device isn't
; 1451 :     // open yet, just save the DCB for later use by the open.
; 1452 : 
; 1453 :     if (pPdd->open)

  06784	e59d3030	 ldr         r3, [sp, #0x30]
  06788	e2833054	 add         r3, r3, #0x54
  0678c	e5933000	 ldr         r3, [r3]
  06790	e3530000	 cmp         r3, #0
  06794	0a00008b	 beq         |$LN22@SetDCB|

; 1454 :     {
; 1455 :         if ((force == TRUE) || (pDCB->BaudRate != pPdd->dcb.BaudRate))

  06798	e59d3038	 ldr         r3, [sp, #0x38]
  0679c	e3530001	 cmp         r3, #1
  067a0	0a000007	 beq         |$LN20@SetDCB|
  067a4	e59d3034	 ldr         r3, [sp, #0x34]
  067a8	e2832004	 add         r2, r3, #4
  067ac	e59d3030	 ldr         r3, [sp, #0x30]
  067b0	e283305c	 add         r3, r3, #0x5C
  067b4	e5922000	 ldr         r2, [r2]
  067b8	e5933000	 ldr         r3, [r3]
  067bc	e1520003	 cmp         r2, r3
  067c0	0a000009	 beq         |$LN21@SetDCB|
  067c4		 |$LN20@SetDCB|

; 1456 :         {
; 1457 :             if (!SetBaudRate(pPdd, pDCB->BaudRate)) goto cleanUp;

  067c4	e59d3034	 ldr         r3, [sp, #0x34]
  067c8	e2833004	 add         r3, r3, #4
  067cc	e5931000	 ldr         r1, [r3]
  067d0	e59d0030	 ldr         r0, [sp, #0x30]
  067d4	eb000000	 bl          SetBaudRate
  067d8	e58d0008	 str         r0, [sp, #8]
  067dc	e59d3008	 ldr         r3, [sp, #8]
  067e0	e3530000	 cmp         r3, #0
  067e4	1a000000	 bne         |$LN19@SetDCB|
  067e8	ea000076	 b           |$cleanUp$45258|
  067ec		 |$LN19@SetDCB|
  067ec		 |$LN21@SetDCB|

; 1458 :         }
; 1459 : 
; 1460 :         if ((force == TRUE) || (pDCB->ByteSize != pPdd->dcb.ByteSize))

  067ec	e59d3038	 ldr         r3, [sp, #0x38]
  067f0	e3530001	 cmp         r3, #1
  067f4	0a000008	 beq         |$LN17@SetDCB|
  067f8	e59d3034	 ldr         r3, [sp, #0x34]
  067fc	e2833012	 add         r3, r3, #0x12
  06800	e5d33000	 ldrb        r3, [r3]
  06804	e1a02003	 mov         r2, r3
  06808	e59d3030	 ldr         r3, [sp, #0x30]
  0680c	e283306a	 add         r3, r3, #0x6A
  06810	e5d33000	 ldrb        r3, [r3]
  06814	e1520003	 cmp         r2, r3
  06818	0a000009	 beq         |$LN18@SetDCB|
  0681c		 |$LN17@SetDCB|

; 1461 :         {
; 1462 :             if (!SetWordLength(pPdd, pDCB->ByteSize)) goto cleanUp;

  0681c	e59d3034	 ldr         r3, [sp, #0x34]
  06820	e2833012	 add         r3, r3, #0x12
  06824	e5d31000	 ldrb        r1, [r3]
  06828	e59d0030	 ldr         r0, [sp, #0x30]
  0682c	eb000000	 bl          SetWordLength
  06830	e58d000c	 str         r0, [sp, #0xC]
  06834	e59d300c	 ldr         r3, [sp, #0xC]
  06838	e3530000	 cmp         r3, #0
  0683c	1a000000	 bne         |$LN16@SetDCB|
  06840	ea000060	 b           |$cleanUp$45258|
  06844		 |$LN16@SetDCB|
  06844		 |$LN18@SetDCB|

; 1463 :         }
; 1464 : 
; 1465 :         if ((force == TRUE) || (pDCB->Parity != pPdd->dcb.Parity))

  06844	e59d3038	 ldr         r3, [sp, #0x38]
  06848	e3530001	 cmp         r3, #1
  0684c	0a000008	 beq         |$LN14@SetDCB|
  06850	e59d3034	 ldr         r3, [sp, #0x34]
  06854	e2833013	 add         r3, r3, #0x13
  06858	e5d33000	 ldrb        r3, [r3]
  0685c	e1a02003	 mov         r2, r3
  06860	e59d3030	 ldr         r3, [sp, #0x30]
  06864	e283306b	 add         r3, r3, #0x6B
  06868	e5d33000	 ldrb        r3, [r3]
  0686c	e1520003	 cmp         r2, r3
  06870	0a000009	 beq         |$LN15@SetDCB|
  06874		 |$LN14@SetDCB|

; 1466 :         {
; 1467 :             if (!SetParity(pPdd, pDCB->Parity)) goto cleanUp;

  06874	e59d3034	 ldr         r3, [sp, #0x34]
  06878	e2833013	 add         r3, r3, #0x13
  0687c	e5d31000	 ldrb        r1, [r3]
  06880	e59d0030	 ldr         r0, [sp, #0x30]
  06884	eb000000	 bl          SetParity
  06888	e58d0010	 str         r0, [sp, #0x10]
  0688c	e59d3010	 ldr         r3, [sp, #0x10]
  06890	e3530000	 cmp         r3, #0
  06894	1a000000	 bne         |$LN13@SetDCB|
  06898	ea00004a	 b           |$cleanUp$45258|
  0689c		 |$LN13@SetDCB|
  0689c		 |$LN15@SetDCB|

; 1468 :         }
; 1469 : 
; 1470 :         if ((force == TRUE) || (pDCB->StopBits != pPdd->dcb.StopBits))

  0689c	e59d3038	 ldr         r3, [sp, #0x38]
  068a0	e3530001	 cmp         r3, #1
  068a4	0a000008	 beq         |$LN11@SetDCB|
  068a8	e59d3034	 ldr         r3, [sp, #0x34]
  068ac	e2833014	 add         r3, r3, #0x14
  068b0	e5d33000	 ldrb        r3, [r3]
  068b4	e1a02003	 mov         r2, r3
  068b8	e59d3030	 ldr         r3, [sp, #0x30]
  068bc	e283306c	 add         r3, r3, #0x6C
  068c0	e5d33000	 ldrb        r3, [r3]
  068c4	e1520003	 cmp         r2, r3
  068c8	0a000009	 beq         |$LN12@SetDCB|
  068cc		 |$LN11@SetDCB|

; 1471 :         {
; 1472 :             if (!SetStopBits(pPdd, pDCB->StopBits)) goto cleanUp;

  068cc	e59d3034	 ldr         r3, [sp, #0x34]
  068d0	e2833014	 add         r3, r3, #0x14
  068d4	e5d31000	 ldrb        r1, [r3]
  068d8	e59d0030	 ldr         r0, [sp, #0x30]
  068dc	eb000000	 bl          SetStopBits
  068e0	e58d0014	 str         r0, [sp, #0x14]
  068e4	e59d3014	 ldr         r3, [sp, #0x14]
  068e8	e3530000	 cmp         r3, #0
  068ec	1a000000	 bne         |$LN10@SetDCB|
  068f0	ea000034	 b           |$cleanUp$45258|
  068f4		 |$LN10@SetDCB|
  068f4		 |$LN12@SetDCB|

; 1473 :         }
; 1474 : 
; 1475 :         // Enable hardware auto RST/CTS modes...
; 1476 :         if (pPdd->hwMode)

  068f4	e59d3030	 ldr         r3, [sp, #0x30]
  068f8	e2833014	 add         r3, r3, #0x14
  068fc	e5933000	 ldr         r3, [r3]
  06900	e3530000	 cmp         r3, #0
  06904	0a00002d	 beq         |$LN9@SetDCB|

; 1477 :         {
; 1478 :             if (pDCB->fRtsControl == RTS_CONTROL_HANDSHAKE)

  06908	e59d3034	 ldr         r3, [sp, #0x34]
  0690c	e2833008	 add         r3, r3, #8
  06910	e5933000	 ldr         r3, [r3]
  06914	e1a03903	 mov         r3, r3, lsl #18
  06918	e1a03f23	 mov         r3, r3, lsr #30
  0691c	e3530002	 cmp         r3, #2
  06920	1a000008	 bne         |$LN8@SetDCB|

; 1479 :             {
; 1480 :                 if (!SetAutoRTS(pPdd, TRUE)) goto cleanUp;

  06924	e3a01001	 mov         r1, #1
  06928	e59d0030	 ldr         r0, [sp, #0x30]
  0692c	eb000000	 bl          SetAutoRTS
  06930	e58d0018	 str         r0, [sp, #0x18]
  06934	e59d3018	 ldr         r3, [sp, #0x18]
  06938	e3530000	 cmp         r3, #0
  0693c	1a000000	 bne         |$LN7@SetDCB|
  06940	ea000020	 b           |$cleanUp$45258|
  06944		 |$LN7@SetDCB|

; 1481 :             }
; 1482 :             else

  06944	ea000007	 b           |$LN6@SetDCB|
  06948		 |$LN8@SetDCB|

; 1483 :             {
; 1484 :                 if (!SetAutoRTS(pPdd, FALSE)) goto cleanUp;

  06948	e3a01000	 mov         r1, #0
  0694c	e59d0030	 ldr         r0, [sp, #0x30]
  06950	eb000000	 bl          SetAutoRTS
  06954	e58d001c	 str         r0, [sp, #0x1C]
  06958	e59d301c	 ldr         r3, [sp, #0x1C]
  0695c	e3530000	 cmp         r3, #0
  06960	1a000000	 bne         |$LN5@SetDCB|
  06964	ea000017	 b           |$cleanUp$45258|
  06968		 |$LN5@SetDCB|
  06968		 |$LN6@SetDCB|

; 1485 :             }
; 1486 :             if (pDCB->fOutxCtsFlow)

  06968	e59d3034	 ldr         r3, [sp, #0x34]
  0696c	e2833008	 add         r3, r3, #8
  06970	e5933000	 ldr         r3, [r3]
  06974	e3130004	 tst         r3, #4
  06978	0a000008	 beq         |$LN4@SetDCB|

; 1487 :             {
; 1488 :                 if (!SetAutoCTS(pPdd, TRUE)) goto cleanUp;

  0697c	e3a01001	 mov         r1, #1
  06980	e59d0030	 ldr         r0, [sp, #0x30]
  06984	eb000000	 bl          SetAutoCTS
  06988	e58d0020	 str         r0, [sp, #0x20]
  0698c	e59d3020	 ldr         r3, [sp, #0x20]
  06990	e3530000	 cmp         r3, #0
  06994	1a000000	 bne         |$LN3@SetDCB|
  06998	ea00000a	 b           |$cleanUp$45258|
  0699c		 |$LN3@SetDCB|

; 1489 :             }
; 1490 :             else

  0699c	ea000007	 b           |$LN2@SetDCB|
  069a0		 |$LN4@SetDCB|

; 1491 :             {
; 1492 :                 if (!SetAutoCTS(pPdd, FALSE)) goto cleanUp;

  069a0	e3a01000	 mov         r1, #0
  069a4	e59d0030	 ldr         r0, [sp, #0x30]
  069a8	eb000000	 bl          SetAutoCTS
  069ac	e58d0024	 str         r0, [sp, #0x24]
  069b0	e59d3024	 ldr         r3, [sp, #0x24]
  069b4	e3530000	 cmp         r3, #0
  069b8	1a000000	 bne         |$LN1@SetDCB|
  069bc	ea000001	 b           |$cleanUp$45258|
  069c0		 |$LN1@SetDCB|
  069c0		 |$LN2@SetDCB|
  069c0		 |$LN9@SetDCB|

; 1493 :             }
; 1494 : 
; 1495 :         }
; 1496 : 
; 1497 :         bRC = TRUE;

  069c0	e3a03001	 mov         r3, #1
  069c4	e58d3000	 str         r3, [sp]
  069c8		 |$LN22@SetDCB|
  069c8		 |$cleanUp$45258|

; 1498 :     }
; 1499 : 
; 1500 : cleanUp:
; 1501 :     return bRC;

  069c8	e59d3000	 ldr         r3, [sp]
  069cc	e58d3004	 str         r3, [sp, #4]

; 1502 : }

  069d0	e59d0004	 ldr         r0, [sp, #4]
  069d4	e28dd028	 add         sp, sp, #0x28
  069d8	e89d6000	 ldmia       sp, {sp, lr}
  069dc	e12fff1e	 bx          lr
  069e0		 |$M47477|

			 ENDP  ; |SetDCB|

	EXPORT	|??_C@_1CO@LJDBOAEO@?$AA?9?$AAH?$AAW?$AAS?$AAe?$AAt?$AAC?$AAo?$AAm?$AAm?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AAs?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CO@GCPFLPGF@?$AA?$CL?$AAH?$AAW?$AAS?$AAe?$AAt?$AAC?$AAo?$AAm?$AAm?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AAs?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00198			 AREA	 |.pdata|, PDATA
|$T47489| DCD	|$LN9@HWSetCommT|
	DCD	0x40002a04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@LJDBOAEO@?$AA?9?$AAH?$AAW?$AAS?$AAe?$AAt?$AAC?$AAo?$AAm?$AAm?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AAs?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "H", 0x0, "W", 0x0, "S", 0x0, "e", 0x0, "t", 0x0, "C"
	DCB	0x0, "o", 0x0, "m", 0x0, "m", 0x0, "T", 0x0, "i", 0x0, "m"
	DCB	0x0, "e", 0x0, "o", 0x0, "u", 0x0, "t", 0x0, "s", 0x0, "("
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@GCPFLPGF@?$AA?$CL?$AAH?$AAW?$AAS?$AAe?$AAt?$AAC?$AAo?$AAm?$AAm?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AAs?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "H", 0x0, "W", 0x0, "S", 0x0, "e", 0x0, "t", 0x0, "C"
	DCB	0x0, "o", 0x0, "m", 0x0, "m", 0x0, "T", 0x0, "i", 0x0, "m"
	DCB	0x0, "e", 0x0, "o", 0x0, "u", 0x0, "t", 0x0, "s", 0x0, "("
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  069e0			 AREA	 |.text|, CODE, ARM

  069e0		 |HWSetCommTimeouts| PROC

; 3704 : {

  069e0		 |$LN9@HWSetCommT|
  069e0	e1a0c00d	 mov         r12, sp
  069e4	e92d0003	 stmdb       sp!, {r0, r1}
  069e8	e92d5000	 stmdb       sp!, {r12, lr}
  069ec	e24dd010	 sub         sp, sp, #0x10
  069f0		 |$M47486|

; 3705 :     UARTPDD *pPdd = (UARTPDD*)pvContext;

  069f0	e59d3018	 ldr         r3, [sp, #0x18]
  069f4	e58d3000	 str         r3, [sp]

; 3706 :     DEBUGMSG(ZONE_FUNCTION, (L"+HWSetCommTimeouts()\r\n"));

  069f8	e59f3080	 ldr         r3, [pc, #0x80]
  069fc	e5933440	 ldr         r3, [r3, #0x440]
  06a00	e3130a02	 tst         r3, #2, 20
  06a04	0a000004	 beq         |$LN3@HWSetCommT|
  06a08	e59f0074	 ldr         r0, [pc, #0x74]
  06a0c	eb000000	 bl          NKDbgPrintfW
  06a10	e3a03001	 mov         r3, #1
  06a14	e58d3008	 str         r3, [sp, #8]
  06a18	ea000001	 b           |$LN4@HWSetCommT|
  06a1c		 |$LN3@HWSetCommT|
  06a1c	e3a03000	 mov         r3, #0
  06a20	e58d3008	 str         r3, [sp, #8]
  06a24		 |$LN4@HWSetCommT|

; 3707 :     pPdd->commTimeouts = *pCommTimeouts;

  06a24	e59d101c	 ldr         r1, [sp, #0x1C]
  06a28	e59d3000	 ldr         r3, [sp]
  06a2c	e28300d8	 add         r0, r3, #0xD8
  06a30	e3a02014	 mov         r2, #0x14
  06a34	eb000000	 bl          memcpy

; 3708 :     DEBUGMSG(ZONE_FUNCTION, (L"-HWSetCommTimeouts()\r\n"));

  06a38	e59f3040	 ldr         r3, [pc, #0x40]
  06a3c	e5933440	 ldr         r3, [r3, #0x440]
  06a40	e3130a02	 tst         r3, #2, 20
  06a44	0a000004	 beq         |$LN5@HWSetCommT|
  06a48	e59f002c	 ldr         r0, [pc, #0x2C]
  06a4c	eb000000	 bl          NKDbgPrintfW
  06a50	e3a03001	 mov         r3, #1
  06a54	e58d300c	 str         r3, [sp, #0xC]
  06a58	ea000001	 b           |$LN6@HWSetCommT|
  06a5c		 |$LN5@HWSetCommT|
  06a5c	e3a03000	 mov         r3, #0
  06a60	e58d300c	 str         r3, [sp, #0xC]
  06a64		 |$LN6@HWSetCommT|

; 3709 :     return TRUE;

  06a64	e3a03001	 mov         r3, #1
  06a68	e58d3004	 str         r3, [sp, #4]

; 3710 : }

  06a6c	e59d0004	 ldr         r0, [sp, #4]
  06a70	e28dd010	 add         sp, sp, #0x10
  06a74	e89d6000	 ldmia       sp, {sp, lr}
  06a78	e12fff1e	 bx          lr
  06a7c		 |$LN10@HWSetCommT|
  06a7c		 |$LN11@HWSetCommT|
  06a7c	00000000	 DCD         |??_C@_1CO@LJDBOAEO@?$AA?9?$AAH?$AAW?$AAS?$AAe?$AAt?$AAC?$AAo?$AAm?$AAm?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AAs?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  06a80		 |$LN12@HWSetCommT|
  06a80	00000000	 DCD         |dpCurSettings|
  06a84		 |$LN13@HWSetCommT|
  06a84	00000000	 DCD         |??_C@_1CO@GCPFLPGF@?$AA?$CL?$AAH?$AAW?$AAS?$AAe?$AAt?$AAC?$AAo?$AAm?$AAm?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AAs?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  06a88		 |$M47487|

			 ENDP  ; |HWSetCommTimeouts|

	EXPORT	|??_C@_1BK@IENMHCJC@?$AA?9?$AAH?$AAW?$AAI?$AAO?$AAC?$AAt?$AAl?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GK@IFHHLCMH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAA?$AAR?$AAT?$AA?3?$AA?3?$AAH?$AAW?$AAI?$AAO?$AAC?$AAt?$AAl?$AA?3?$AA?5?$AAE?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GK@IKGJGEEE@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAA?$AAR?$AAT?$AA?3?$AA?3?$AAH?$AAW?$AAI?$AAO?$AAC?$AAt?$AAl?$AA?3?$AA?5?$AAE?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GO@NEMAHEIA@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAA?$AAR?$AAT?$AA?3?$AA?3?$AAH?$AAW?$AAI?$AAO?$AAC?$AAt?$AAl?$AA?3?$AA?5?$AAE?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HM@LFEOGEFI@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAA?$AAR?$AAT?$AA?3?$AA?3?$AAH?$AAW?$AAI?$AAO?$AAC?$AAt?$AAl?$AA?3?$AA?5?$AAE?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BK@LLACKPCD@?$AA?$CL?$AAH?$AAW?$AAI?$AAO?$AAC?$AAt?$AAl?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|SetLastError|
	IMPORT	|__C_specific_handler|

  001a0			 AREA	 |.pdata|, PDATA
|$T47549| DCD	|$LN79@HWIOCtl|
	DCD	0xc0011305
|$T47551| DCD	|$LN66@HWIOCtl|
	DCD	0x40000301
|$T47553| DCD	|$LN59@HWIOCtl|
	DCD	0x40000301
|$T47555| DCD	|$LN52@HWIOCtl|
	DCD	0x40000301
|$T47557| DCD	|$LN45@HWIOCtl|
	DCD	0x40000e01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BK@IENMHCJC@?$AA?9?$AAH?$AAW?$AAI?$AAO?$AAC?$AAt?$AAl?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "H", 0x0, "W", 0x0, "I", 0x0, "O", 0x0, "C", 0x0, "t"
	DCB	0x0, "l", 0x0, "(", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GK@IFHHLCMH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAA?$AAR?$AAT?$AA?3?$AA?3?$AAH?$AAW?$AAI?$AAO?$AAC?$AAt?$AAl?$AA?3?$AA?5?$AAE?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "U", 0x0, "A", 0x0, "R", 0x0, "T", 0x0, ":", 0x0, ":"
	DCB	0x0, "H", 0x0, "W", 0x0, "I", 0x0, "O", 0x0, "C", 0x0, "t"
	DCB	0x0, "l", 0x0, ":", 0x0, " ", 0x0, "E", 0x0, "x", 0x0, "c"
	DCB	0x0, "e", 0x0, "p", 0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n"
	DCB	0x0, " ", 0x0, "i", 0x0, "n", 0x0, " ", 0x0, "I", 0x0, "O"
	DCB	0x0, "C", 0x0, "T", 0x0, "L", 0x0, "_", 0x0, "P", 0x0, "O"
	DCB	0x0, "W", 0x0, "E", 0x0, "R", 0x0, "_", 0x0, "G", 0x0, "E"
	DCB	0x0, "T", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GK@IKGJGEEE@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAA?$AAR?$AAT?$AA?3?$AA?3?$AAH?$AAW?$AAI?$AAO?$AAC?$AAt?$AAl?$AA?3?$AA?5?$AAE?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "U", 0x0, "A", 0x0, "R", 0x0, "T", 0x0, ":", 0x0, ":"
	DCB	0x0, "H", 0x0, "W", 0x0, "I", 0x0, "O", 0x0, "C", 0x0, "t"
	DCB	0x0, "l", 0x0, ":", 0x0, " ", 0x0, "E", 0x0, "x", 0x0, "c"
	DCB	0x0, "e", 0x0, "p", 0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n"
	DCB	0x0, " ", 0x0, "i", 0x0, "n", 0x0, " ", 0x0, "I", 0x0, "O"
	DCB	0x0, "C", 0x0, "T", 0x0, "L", 0x0, "_", 0x0, "P", 0x0, "O"
	DCB	0x0, "W", 0x0, "E", 0x0, "R", 0x0, "_", 0x0, "S", 0x0, "E"
	DCB	0x0, "T", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GO@NEMAHEIA@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAA?$AAR?$AAT?$AA?3?$AA?3?$AAH?$AAW?$AAI?$AAO?$AAC?$AAt?$AAl?$AA?3?$AA?5?$AAE?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "U", 0x0, "A", 0x0, "R", 0x0, "T", 0x0, ":", 0x0, ":"
	DCB	0x0, "H", 0x0, "W", 0x0, "I", 0x0, "O", 0x0, "C", 0x0, "t"
	DCB	0x0, "l", 0x0, ":", 0x0, " ", 0x0, "E", 0x0, "x", 0x0, "c"
	DCB	0x0, "e", 0x0, "p", 0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n"
	DCB	0x0, " ", 0x0, "i", 0x0, "n", 0x0, " ", 0x0, "I", 0x0, "O"
	DCB	0x0, "C", 0x0, "T", 0x0, "L", 0x0, "_", 0x0, "P", 0x0, "O"
	DCB	0x0, "W", 0x0, "E", 0x0, "R", 0x0, "_", 0x0, "Q", 0x0, "U"
	DCB	0x0, "E", 0x0, "R", 0x0, "Y", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HM@LFEOGEFI@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAA?$AAR?$AAT?$AA?3?$AA?3?$AAH?$AAW?$AAI?$AAO?$AAC?$AAt?$AAl?$AA?3?$AA?5?$AAE?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "U", 0x0, "A", 0x0, "R", 0x0, "T", 0x0, ":", 0x0, ":"
	DCB	0x0, "H", 0x0, "W", 0x0, "I", 0x0, "O", 0x0, "C", 0x0, "t"
	DCB	0x0, "l", 0x0, ":", 0x0, " ", 0x0, "E", 0x0, "x", 0x0, "c"
	DCB	0x0, "e", 0x0, "p", 0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n"
	DCB	0x0, " ", 0x0, "i", 0x0, "n", 0x0, " ", 0x0, "I", 0x0, "O"
	DCB	0x0, "C", 0x0, "T", 0x0, "L", 0x0, "_", 0x0, "P", 0x0, "O"
	DCB	0x0, "W", 0x0, "E", 0x0, "R", 0x0, "_", 0x0, "C", 0x0, "A"
	DCB	0x0, "P", 0x0, "A", 0x0, "B", 0x0, "I", 0x0, "L", 0x0, "I"
	DCB	0x0, "T", 0x0, "I", 0x0, "E", 0x0, "S", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BK@LLACKPCD@?$AA?$CL?$AAH?$AAW?$AAI?$AAO?$AAC?$AAt?$AAl?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "H", 0x0, "W", 0x0, "I", 0x0, "O", 0x0, "C", 0x0, "t"
	DCB	0x0, "l", 0x0, "(", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.xdata|, DATA
|$T47547| DCD	0x4
	DCD	|$LN70@HWIOCtl|
	DCD	|$LN71@HWIOCtl|
	DCD	|$LN66@HWIOCtl|
	DCD	|$LN67@HWIOCtl|
	DCD	|$LN63@HWIOCtl|
	DCD	|$LN64@HWIOCtl|
	DCD	|$LN59@HWIOCtl|
	DCD	|$LN60@HWIOCtl|
	DCD	|$LN56@HWIOCtl|
	DCD	|$LN57@HWIOCtl|
	DCD	|$LN52@HWIOCtl|
	DCD	|$LN53@HWIOCtl|
	DCD	|$LN49@HWIOCtl|
	DCD	|$LN50@HWIOCtl|
	DCD	|$LN45@HWIOCtl|
	DCD	|$LN46@HWIOCtl|
; Function compile flags: /Odtp

  06a88			 AREA	 |.text|, CODE, ARM

  06a88	00000000	 DCD         |__C_specific_handler|
  06a8c	00000000	 DCD         |$T47547|

  06a90		 |HWIOCtl| PROC

; 3727 : {

  06a90		 |$LN79@HWIOCtl|
  06a90	e1a0c00d	 mov         r12, sp
  06a94	e92d000f	 stmdb       sp!, {r0 - r3}
  06a98	e92d5800	 stmdb       sp!, {r11, r12, lr}
  06a9c	e28db00c	 add         r11, sp, #0xC
  06aa0	e24dd040	 sub         sp, sp, #0x40
  06aa4		 |$LN77@HWIOCtl|

; 3728 :     BOOL rc = FALSE;

  06aa4	e3a03000	 mov         r3, #0
  06aa8	e50b304c	 str         r3, [r11, #-0x4C]

; 3729 :     UARTPDD *pPdd = (UARTPDD*)pvContext;

  06aac	e59b3000	 ldr         r3, [r11]
  06ab0	e50b3048	 str         r3, [r11, #-0x48]

; 3730 : 
; 3731 :     DEBUGMSG(ZONE_FUNCTION, (TEXT("+HWIOCtl()\r\n")));

  06ab4	e59f3454	 ldr         r3, [pc, #0x454]
  06ab8	e5933440	 ldr         r3, [r3, #0x440]
  06abc	e3130a02	 tst         r3, #2, 20
  06ac0	0a000004	 beq         |$LN29@HWIOCtl|
  06ac4	e59f0468	 ldr         r0, [pc, #0x468]
  06ac8	eb000000	 bl          NKDbgPrintfW
  06acc	e3a03001	 mov         r3, #1
  06ad0	e50b3034	 str         r3, [r11, #-0x34]
  06ad4	ea000001	 b           |$LN30@HWIOCtl|
  06ad8		 |$LN29@HWIOCtl|
  06ad8	e3a03000	 mov         r3, #0
  06adc	e50b3034	 str         r3, [r11, #-0x34]
  06ae0		 |$LN30@HWIOCtl|

; 3732 : 
; 3733 :     switch (code)

  06ae0	e59b3004	 ldr         r3, [r11, #4]
  06ae4	e50b3030	 str         r3, [r11, #-0x30]
  06ae8	e51b2030	 ldr         r2, [r11, #-0x30]
  06aec	e59f343c	 ldr         r3, [pc, #0x43C]
  06af0	e1520003	 cmp         r2, r3
  06af4	8a000013	 bhi         |$LN41@HWIOCtl|
  06af8	e51b2030	 ldr         r2, [r11, #-0x30]
  06afc	e59f342c	 ldr         r3, [pc, #0x42C]
  06b00	e1520003	 cmp         r2, r3
  06b04	0a0000c3	 beq         |$LN5@HWIOCtl|
  06b08	e51b2030	 ldr         r2, [r11, #-0x30]
  06b0c	e3a0381b	 mov         r3, #0x1B, 16
  06b10	e383303c	 orr         r3, r3, #0x3C
  06b14	e1520003	 cmp         r2, r3
  06b18	0a000017	 beq         |$LN24@HWIOCtl|
  06b1c	e51b2030	 ldr         r2, [r11, #-0x30]
  06b20	e3a0381b	 mov         r3, #0x1B, 16
  06b24	e3833040	 orr         r3, r3, #0x40
  06b28	e1520003	 cmp         r2, r3
  06b2c	0a000027	 beq         |$LN21@HWIOCtl|
  06b30	e51b2030	 ldr         r2, [r11, #-0x30]
  06b34	e3a03832	 mov         r3, #0x32, 16
  06b38	e3833a01	 orr         r3, r3, #1, 20
  06b3c	e1520003	 cmp         r2, r3
  06b40	0a000037	 beq         |$LN18@HWIOCtl|
  06b44	ea0000d3	 b           |$LN25@HWIOCtl|
  06b48		 |$LN41@HWIOCtl|
  06b48	e51b2030	 ldr         r2, [r11, #-0x30]
  06b4c	e59f33d8	 ldr         r3, [pc, #0x3D8]
  06b50	e1520003	 cmp         r2, r3
  06b54	0a000084	 beq         |$LN9@HWIOCtl|
  06b58	e51b2030	 ldr         r2, [r11, #-0x30]
  06b5c	e59f33c4	 ldr         r3, [pc, #0x3C4]
  06b60	e1520003	 cmp         r2, r3
  06b64	0a000059	 beq         |$LN13@HWIOCtl|
  06b68	e51b2030	 ldr         r2, [r11, #-0x30]
  06b6c	e59f33b0	 ldr         r3, [pc, #0x3B0]
  06b70	e1520003	 cmp         r2, r3
  06b74	0a0000c5	 beq         |$LN1@HWIOCtl|
  06b78	ea0000c6	 b           |$LN25@HWIOCtl|
  06b7c		 |$LN24@HWIOCtl|

; 3734 :     {
; 3735 :     case IOCTL_SERIAL_SET_TIMEOUTS:
; 3736 :         // Check input parameters
; 3737 :         if ((pInBuffer == NULL) || (inSize < sizeof(COMMTIMEOUTS)) ||
; 3738 :             !CeSafeCopyMemory(
; 3739 :             &pPdd->commTimeouts, pInBuffer, sizeof(COMMTIMEOUTS)
; 3740 :             ))

  06b7c	e59b3008	 ldr         r3, [r11, #8]
  06b80	e3530000	 cmp         r3, #0
  06b84	0a00000b	 beq         |$LN22@HWIOCtl|
  06b88	e59b300c	 ldr         r3, [r11, #0xC]
  06b8c	e3530014	 cmp         r3, #0x14
  06b90	3a000008	 bcc         |$LN22@HWIOCtl|
  06b94	e3a02014	 mov         r2, #0x14
  06b98	e59b1008	 ldr         r1, [r11, #8]
  06b9c	e51b3048	 ldr         r3, [r11, #-0x48]
  06ba0	e28300d8	 add         r0, r3, #0xD8
  06ba4	eb000000	 bl          CeSafeCopyMemory
  06ba8	e50b002c	 str         r0, [r11, #-0x2C]
  06bac	e51b302c	 ldr         r3, [r11, #-0x2C]
  06bb0	e3530000	 cmp         r3, #0
  06bb4	1a000002	 bne         |$LN23@HWIOCtl|
  06bb8		 |$LN22@HWIOCtl|

; 3741 :         {
; 3742 :             SetLastError(ERROR_INVALID_PARAMETER);

  06bb8	e3a00057	 mov         r0, #0x57
  06bbc	eb000000	 bl          SetLastError

; 3743 :             break;

  06bc0	ea0000b4	 b           |$LN25@HWIOCtl|
  06bc4		 |$LN23@HWIOCtl|

; 3744 :         }
; 3745 :         rc = TRUE;

  06bc4	e3a03001	 mov         r3, #1
  06bc8	e50b304c	 str         r3, [r11, #-0x4C]

; 3746 :         break;

  06bcc	ea0000b1	 b           |$LN25@HWIOCtl|
  06bd0		 |$LN21@HWIOCtl|

; 3747 : 
; 3748 :     case IOCTL_SERIAL_GET_TIMEOUTS:
; 3749 :         if ((pInBuffer == NULL) || (inSize < sizeof(COMMTIMEOUTS)) ||
; 3750 :             !CeSafeCopyMemory(
; 3751 :             pInBuffer, &pPdd->commTimeouts, sizeof(COMMTIMEOUTS)
; 3752 :             ))

  06bd0	e59b3008	 ldr         r3, [r11, #8]
  06bd4	e3530000	 cmp         r3, #0
  06bd8	0a00000b	 beq         |$LN19@HWIOCtl|
  06bdc	e59b300c	 ldr         r3, [r11, #0xC]
  06be0	e3530014	 cmp         r3, #0x14
  06be4	3a000008	 bcc         |$LN19@HWIOCtl|
  06be8	e3a02014	 mov         r2, #0x14
  06bec	e51b3048	 ldr         r3, [r11, #-0x48]
  06bf0	e28310d8	 add         r1, r3, #0xD8
  06bf4	e59b0008	 ldr         r0, [r11, #8]
  06bf8	eb000000	 bl          CeSafeCopyMemory
  06bfc	e50b0028	 str         r0, [r11, #-0x28]
  06c00	e51b3028	 ldr         r3, [r11, #-0x28]
  06c04	e3530000	 cmp         r3, #0
  06c08	1a000002	 bne         |$LN20@HWIOCtl|
  06c0c		 |$LN19@HWIOCtl|

; 3753 :         {
; 3754 :             SetLastError(ERROR_INVALID_PARAMETER);

  06c0c	e3a00057	 mov         r0, #0x57
  06c10	eb000000	 bl          SetLastError

; 3755 :             break;

  06c14	ea00009f	 b           |$LN25@HWIOCtl|
  06c18		 |$LN20@HWIOCtl|

; 3756 :         }
; 3757 :         rc = TRUE;

  06c18	e3a03001	 mov         r3, #1
  06c1c	e50b304c	 str         r3, [r11, #-0x4C]

; 3758 :         break;

  06c20	ea00009c	 b           |$LN25@HWIOCtl|
  06c24		 |$LN18@HWIOCtl|

; 3759 : 
; 3760 :     case IOCTL_POWER_CAPABILITIES:
; 3761 :         if ((pOutBuffer == NULL) || (outSize < sizeof(POWER_CAPABILITIES)))

  06c24	e59b3010	 ldr         r3, [r11, #0x10]
  06c28	e3530000	 cmp         r3, #0
  06c2c	0a000002	 beq         |$LN16@HWIOCtl|
  06c30	e59b3014	 ldr         r3, [r11, #0x14]
  06c34	e3530030	 cmp         r3, #0x30
  06c38	2a000002	 bcs         |$LN17@HWIOCtl|
  06c3c		 |$LN16@HWIOCtl|

; 3762 :         {
; 3763 :             SetLastError(ERROR_INVALID_PARAMETER);

  06c3c	e3a00057	 mov         r0, #0x57
  06c40	eb000000	 bl          SetLastError

; 3764 :             break;

  06c44	ea000093	 b           |$LN25@HWIOCtl|
  06c48		 |$LN17@HWIOCtl|
  06c48		 |$LN49@HWIOCtl|

; 3765 :         }
; 3766 :         __try
; 3767 :         {
; 3768 :             POWER_CAPABILITIES *pCaps = (POWER_CAPABILITIES*)pOutBuffer;

  06c48	e59b3010	 ldr         r3, [r11, #0x10]
  06c4c	e50b3044	 str         r3, [r11, #-0x44]

; 3769 :             memset(pCaps, 0, sizeof(POWER_CAPABILITIES));

  06c50	e3a02030	 mov         r2, #0x30
  06c54	e3a01000	 mov         r1, #0
  06c58	e51b0044	 ldr         r0, [r11, #-0x44]
  06c5c	eb000000	 bl          memset

; 3770 :             pCaps->DeviceDx = DX_MASK(D0)|DX_MASK(D3)|DX_MASK(D4);

  06c60	e51b2044	 ldr         r2, [r11, #-0x44]
  06c64	e3a03019	 mov         r3, #0x19
  06c68	e5c23000	 strb        r3, [r2]

; 3771 :             if ((outSize >= sizeof(DWORD)) && (pOutSize != NULL))

  06c6c	e59b3014	 ldr         r3, [r11, #0x14]
  06c70	e3530004	 cmp         r3, #4
  06c74	3a000005	 bcc         |$LN14@HWIOCtl|
  06c78	e59b3018	 ldr         r3, [r11, #0x18]
  06c7c	e3530000	 cmp         r3, #0
  06c80	0a000002	 beq         |$LN14@HWIOCtl|

; 3772 :             {
; 3773 :                 *pOutSize = sizeof(POWER_CAPABILITIES);

  06c84	e59b2018	 ldr         r2, [r11, #0x18]
  06c88	e3a03030	 mov         r3, #0x30
  06c8c	e5823000	 str         r3, [r2]
  06c90		 |$LN14@HWIOCtl|

; 3774 :             }
; 3775 :             rc = TRUE;

  06c90	e3a03001	 mov         r3, #1
  06c94	e50b304c	 str         r3, [r11, #-0x4C]
  06c98		 |$LN50@HWIOCtl|

; 3776 :         }

  06c98	ea00000b	 b           |$LN51@HWIOCtl|
  06c9c		 |$LN46@HWIOCtl|

; 3778 :         {
; 3779 :             DEBUGMSG(ZONE_ERROR, (L"ERROR: UART::HWIOCtl: "
; 3780 :                 L"Exception in IOCTL_POWER_CAPABILITIES\r\n"
; 3781 :                 ));

  06c9c	e59f326c	 ldr         r3, [pc, #0x26C]
  06ca0	e5933440	 ldr         r3, [r3, #0x440]
  06ca4	e3130902	 tst         r3, #2, 18
  06ca8	0a000004	 beq         |$LN31@HWIOCtl|
  06cac	e59f026c	 ldr         r0, [pc, #0x26C]
  06cb0	eb000000	 bl          NKDbgPrintfW
  06cb4	e3a03001	 mov         r3, #1
  06cb8	e50b3024	 str         r3, [r11, #-0x24]
  06cbc	ea000001	 b           |$LN32@HWIOCtl|
  06cc0		 |$LN31@HWIOCtl|
  06cc0	e3a03000	 mov         r3, #0
  06cc4	e50b3024	 str         r3, [r11, #-0x24]
  06cc8		 |$LN32@HWIOCtl|
  06cc8	eaffffff	 b           |$LN51@HWIOCtl|
  06ccc		 |$LN51@HWIOCtl|

; 3782 :         }
; 3783 :         break;

  06ccc	ea000071	 b           |$LN25@HWIOCtl|
  06cd0		 |$LN13@HWIOCtl|

; 3784 : 
; 3785 :     case IOCTL_POWER_QUERY:
; 3786 :         if ((pOutBuffer == NULL) ||
; 3787 :             (outSize < sizeof(CEDEVICE_POWER_STATE)))

  06cd0	e59b3010	 ldr         r3, [r11, #0x10]
  06cd4	e3530000	 cmp         r3, #0
  06cd8	0a000002	 beq         |$LN11@HWIOCtl|
  06cdc	e59b3014	 ldr         r3, [r11, #0x14]
  06ce0	e3530004	 cmp         r3, #4
  06ce4	2a000002	 bcs         |$LN12@HWIOCtl|
  06ce8		 |$LN11@HWIOCtl|

; 3788 :         {
; 3789 :             SetLastError(ERROR_INVALID_PARAMETER);

  06ce8	e3a00057	 mov         r0, #0x57
  06cec	eb000000	 bl          SetLastError

; 3790 :             break;

  06cf0	ea000068	 b           |$LN25@HWIOCtl|
  06cf4		 |$LN12@HWIOCtl|
  06cf4		 |$LN56@HWIOCtl|

; 3791 :         }
; 3792 :         __try
; 3793 :         {
; 3794 :             CEDEVICE_POWER_STATE dx = *(CEDEVICE_POWER_STATE*)pOutBuffer;

  06cf4	e59b3010	 ldr         r3, [r11, #0x10]
  06cf8	e5933000	 ldr         r3, [r3]
  06cfc	e50b3040	 str         r3, [r11, #-0x40]

; 3795 :             rc = VALID_DX(dx);

  06d00	e51b3040	 ldr         r3, [r11, #-0x40]
  06d04	e3730001	 cmn         r3, #1
  06d08	da000005	 ble         |$LN33@HWIOCtl|
  06d0c	e51b3040	 ldr         r3, [r11, #-0x40]
  06d10	e3530005	 cmp         r3, #5
  06d14	aa000002	 bge         |$LN33@HWIOCtl|
  06d18	e3a03001	 mov         r3, #1
  06d1c	e50b3020	 str         r3, [r11, #-0x20]
  06d20	ea000001	 b           |$LN34@HWIOCtl|
  06d24		 |$LN33@HWIOCtl|
  06d24	e3a03000	 mov         r3, #0
  06d28	e50b3020	 str         r3, [r11, #-0x20]
  06d2c		 |$LN34@HWIOCtl|
  06d2c	e51b3020	 ldr         r3, [r11, #-0x20]
  06d30	e50b304c	 str         r3, [r11, #-0x4C]
  06d34		 |$LN57@HWIOCtl|

; 3796 :         }

  06d34	ea00000b	 b           |$LN58@HWIOCtl|
  06d38		 |$LN53@HWIOCtl|

; 3798 :         {
; 3799 :             DEBUGMSG(ZONE_ERROR, (L"ERROR: UART::HWIOCtl: "
; 3800 :                 L"Exception in IOCTL_POWER_QUERY\r\n"
; 3801 :                 ));

  06d38	e59f31d0	 ldr         r3, [pc, #0x1D0]
  06d3c	e5933440	 ldr         r3, [r3, #0x440]
  06d40	e3130902	 tst         r3, #2, 18
  06d44	0a000004	 beq         |$LN35@HWIOCtl|
  06d48	e59f01cc	 ldr         r0, [pc, #0x1CC]
  06d4c	eb000000	 bl          NKDbgPrintfW
  06d50	e3a03001	 mov         r3, #1
  06d54	e50b301c	 str         r3, [r11, #-0x1C]
  06d58	ea000001	 b           |$LN36@HWIOCtl|
  06d5c		 |$LN35@HWIOCtl|
  06d5c	e3a03000	 mov         r3, #0
  06d60	e50b301c	 str         r3, [r11, #-0x1C]
  06d64		 |$LN36@HWIOCtl|
  06d64	eaffffff	 b           |$LN58@HWIOCtl|
  06d68		 |$LN58@HWIOCtl|

; 3802 :         }
; 3803 :         break;

  06d68	ea00004a	 b           |$LN25@HWIOCtl|
  06d6c		 |$LN9@HWIOCtl|

; 3804 : 
; 3805 :     case IOCTL_POWER_SET:
; 3806 :         if ((pOutBuffer == NULL) ||
; 3807 :             (outSize < sizeof(CEDEVICE_POWER_STATE)))

  06d6c	e59b3010	 ldr         r3, [r11, #0x10]
  06d70	e3530000	 cmp         r3, #0
  06d74	0a000002	 beq         |$LN7@HWIOCtl|
  06d78	e59b3014	 ldr         r3, [r11, #0x14]
  06d7c	e3530004	 cmp         r3, #4
  06d80	2a000002	 bcs         |$LN8@HWIOCtl|
  06d84		 |$LN7@HWIOCtl|

; 3808 :         {
; 3809 :             SetLastError(ERROR_INVALID_PARAMETER);

  06d84	e3a00057	 mov         r0, #0x57
  06d88	eb000000	 bl          SetLastError

; 3810 :             break;

  06d8c	ea000041	 b           |$LN25@HWIOCtl|
  06d90		 |$LN8@HWIOCtl|
  06d90		 |$LN63@HWIOCtl|

; 3811 :         }
; 3812 :         __try
; 3813 :         {
; 3814 :             CEDEVICE_POWER_STATE dx = *(CEDEVICE_POWER_STATE*)pOutBuffer;

  06d90	e59b3010	 ldr         r3, [r11, #0x10]
  06d94	e5933000	 ldr         r3, [r3]
  06d98	e50b303c	 str         r3, [r11, #-0x3C]

; 3815 :             pPdd->externalDX = dx;

  06d9c	e51b3048	 ldr         r3, [r11, #-0x48]
  06da0	e2832034	 add         r2, r3, #0x34
  06da4	e51b303c	 ldr         r3, [r11, #-0x3C]
  06da8	e5823000	 str         r3, [r2]

; 3816 :             SetPower(pPdd, dx);

  06dac	e51b103c	 ldr         r1, [r11, #-0x3C]
  06db0	e51b0048	 ldr         r0, [r11, #-0x48]
  06db4	eb000000	 bl          SetPower

; 3817 :             *(CEDEVICE_POWER_STATE*)pOutBuffer = pPdd->externalDX;

  06db8	e51b3048	 ldr         r3, [r11, #-0x48]
  06dbc	e2833034	 add         r3, r3, #0x34
  06dc0	e5932000	 ldr         r2, [r3]
  06dc4	e59b3010	 ldr         r3, [r11, #0x10]
  06dc8	e5832000	 str         r2, [r3]

; 3818 :             *pOutSize = sizeof(CEDEVICE_POWER_STATE);

  06dcc	e59b2018	 ldr         r2, [r11, #0x18]
  06dd0	e3a03004	 mov         r3, #4
  06dd4	e5823000	 str         r3, [r2]

; 3819 :             
; 3820 :             rc = TRUE;

  06dd8	e3a03001	 mov         r3, #1
  06ddc	e50b304c	 str         r3, [r11, #-0x4C]
  06de0		 |$LN64@HWIOCtl|

; 3821 :         }

  06de0	ea00000b	 b           |$LN65@HWIOCtl|
  06de4		 |$LN60@HWIOCtl|

; 3823 :         {
; 3824 :             DEBUGMSG(ZONE_ERROR, (L"ERROR: UART::HWIOCtl: "
; 3825 :                 L"Exception in IOCTL_POWER_SET\r\n"
; 3826 :                 ));

  06de4	e59f3124	 ldr         r3, [pc, #0x124]
  06de8	e5933440	 ldr         r3, [r3, #0x440]
  06dec	e3130902	 tst         r3, #2, 18
  06df0	0a000004	 beq         |$LN37@HWIOCtl|
  06df4	e59f011c	 ldr         r0, [pc, #0x11C]
  06df8	eb000000	 bl          NKDbgPrintfW
  06dfc	e3a03001	 mov         r3, #1
  06e00	e50b3018	 str         r3, [r11, #-0x18]
  06e04	ea000001	 b           |$LN38@HWIOCtl|
  06e08		 |$LN37@HWIOCtl|
  06e08	e3a03000	 mov         r3, #0
  06e0c	e50b3018	 str         r3, [r11, #-0x18]
  06e10		 |$LN38@HWIOCtl|
  06e10	eaffffff	 b           |$LN65@HWIOCtl|
  06e14		 |$LN65@HWIOCtl|

; 3827 :         }
; 3828 :         break;

  06e14	ea00001f	 b           |$LN25@HWIOCtl|
  06e18		 |$LN5@HWIOCtl|

; 3829 : 
; 3830 :     case IOCTL_POWER_GET:
; 3831 :         if ((pOutBuffer == NULL) ||
; 3832 :             (outSize < sizeof(CEDEVICE_POWER_STATE)))

  06e18	e59b3010	 ldr         r3, [r11, #0x10]
  06e1c	e3530000	 cmp         r3, #0
  06e20	0a000002	 beq         |$LN3@HWIOCtl|
  06e24	e59b3014	 ldr         r3, [r11, #0x14]
  06e28	e3530004	 cmp         r3, #4
  06e2c	2a000002	 bcs         |$LN4@HWIOCtl|
  06e30		 |$LN3@HWIOCtl|

; 3833 :         {
; 3834 :             SetLastError(ERROR_INVALID_PARAMETER);

  06e30	e3a00057	 mov         r0, #0x57
  06e34	eb000000	 bl          SetLastError

; 3835 :             break;

  06e38	ea000016	 b           |$LN25@HWIOCtl|
  06e3c		 |$LN4@HWIOCtl|
  06e3c		 |$LN70@HWIOCtl|

; 3836 :         }
; 3837 :         __try
; 3838 :         {
; 3839 :             *(CEDEVICE_POWER_STATE*)pOutBuffer = pPdd->externalDX;

  06e3c	e51b3048	 ldr         r3, [r11, #-0x48]
  06e40	e2833034	 add         r3, r3, #0x34
  06e44	e5932000	 ldr         r2, [r3]
  06e48	e59b3010	 ldr         r3, [r11, #0x10]
  06e4c	e5832000	 str         r2, [r3]

; 3840 :             rc = TRUE;

  06e50	e3a03001	 mov         r3, #1
  06e54	e50b304c	 str         r3, [r11, #-0x4C]
  06e58		 |$LN71@HWIOCtl|

; 3841 :         }

  06e58	ea00000b	 b           |$LN72@HWIOCtl|
  06e5c		 |$LN67@HWIOCtl|

; 3843 :         {
; 3844 :             DEBUGMSG(ZONE_ERROR, (L"ERROR: UART::HWIOCtl: "
; 3845 :                 L"Exception in IOCTL_POWER_GET\r\n"
; 3846 :                 ));

  06e5c	e59f30ac	 ldr         r3, [pc, #0xAC]
  06e60	e5933440	 ldr         r3, [r3, #0x440]
  06e64	e3130902	 tst         r3, #2, 18
  06e68	0a000004	 beq         |$LN39@HWIOCtl|
  06e6c	e59f00a0	 ldr         r0, [pc, #0xA0]
  06e70	eb000000	 bl          NKDbgPrintfW
  06e74	e3a03001	 mov         r3, #1
  06e78	e50b3014	 str         r3, [r11, #-0x14]
  06e7c	ea000001	 b           |$LN40@HWIOCtl|
  06e80		 |$LN39@HWIOCtl|
  06e80	e3a03000	 mov         r3, #0
  06e84	e50b3014	 str         r3, [r11, #-0x14]
  06e88		 |$LN40@HWIOCtl|
  06e88	eaffffff	 b           |$LN72@HWIOCtl|
  06e8c		 |$LN72@HWIOCtl|

; 3847 :         }
; 3848 :         break;

  06e8c	ea000001	 b           |$LN25@HWIOCtl|
  06e90		 |$LN1@HWIOCtl|

; 3849 : 
; 3850 :     case IOCTL_CONTEXT_RESTORE:
; 3851 :         RestoreUARTContext(pPdd);

  06e90	e51b0048	 ldr         r0, [r11, #-0x48]
  06e94	eb000000	 bl          RestoreUARTContext
  06e98		 |$LN25@HWIOCtl|

; 3852 :         break;
; 3853 :    }
; 3854 : 
; 3855 :     DEBUGMSG(ZONE_FUNCTION, (TEXT("-HWIOCtl()\r\n")));

  06e98	e59f3070	 ldr         r3, [pc, #0x70]
  06e9c	e5933440	 ldr         r3, [r3, #0x440]
  06ea0	e3130a02	 tst         r3, #2, 20
  06ea4	0a000004	 beq         |$LN42@HWIOCtl|
  06ea8	e59f005c	 ldr         r0, [pc, #0x5C]
  06eac	eb000000	 bl          NKDbgPrintfW
  06eb0	e3a03001	 mov         r3, #1
  06eb4	e50b3010	 str         r3, [r11, #-0x10]
  06eb8	ea000001	 b           |$LN43@HWIOCtl|
  06ebc		 |$LN42@HWIOCtl|
  06ebc	e3a03000	 mov         r3, #0
  06ec0	e50b3010	 str         r3, [r11, #-0x10]
  06ec4		 |$LN43@HWIOCtl|

; 3856 :     return rc;

  06ec4	e51b304c	 ldr         r3, [r11, #-0x4C]
  06ec8	e50b3038	 str         r3, [r11, #-0x38]
  06ecc		 |$LN44@HWIOCtl|

; 3857 : }

  06ecc	e51b0038	 ldr         r0, [r11, #-0x38]
  06ed0	e24bd00c	 sub         sp, r11, #0xC
  06ed4	e89d6800	 ldmia       sp, {r11, sp, lr}
  06ed8	e12fff1e	 bx          lr

			 ENDP  ; |HWIOCtl|

  06edc		 |$LN66@HWIOCtl|
  06edc		 |$LN78@HWIOCtl|

; 3842 :         __except(EXCEPTION_EXECUTE_HANDLER)

  06edc	e52de004	 str         lr, [sp, #-4]!
  06ee0		 |$LN69@HWIOCtl|
  06ee0		 |$LN84@HWIOCtl|
  06ee0	e3a00001	 mov         r0, #1
  06ee4		 |$LN68@HWIOCtl|
  06ee4	e49df004	 ldr         pc, [sp], #4
  06ee8		 |$LN85@HWIOCtl|
  06ee8		 |$LN59@HWIOCtl|
  06ee8		 |$LN80@HWIOCtl|

; 3822 :         __except(EXCEPTION_EXECUTE_HANDLER)

  06ee8	e52de004	 str         lr, [sp, #-4]!
  06eec		 |$LN62@HWIOCtl|
  06eec		 |$LN86@HWIOCtl|
  06eec	e3a00001	 mov         r0, #1
  06ef0		 |$LN61@HWIOCtl|
  06ef0	e49df004	 ldr         pc, [sp], #4
  06ef4		 |$LN87@HWIOCtl|
  06ef4		 |$LN52@HWIOCtl|
  06ef4		 |$LN81@HWIOCtl|

; 3797 :         __except(EXCEPTION_EXECUTE_HANDLER)

  06ef4	e52de004	 str         lr, [sp, #-4]!
  06ef8		 |$LN55@HWIOCtl|
  06ef8		 |$LN88@HWIOCtl|
  06ef8	e3a00001	 mov         r0, #1
  06efc		 |$LN54@HWIOCtl|
  06efc	e49df004	 ldr         pc, [sp], #4
  06f00		 |$LN89@HWIOCtl|
  06f00		 |$LN45@HWIOCtl|
  06f00		 |$LN82@HWIOCtl|

; 3777 :         __except(EXCEPTION_EXECUTE_HANDLER)

  06f00	e52de004	 str         lr, [sp, #-4]!
  06f04		 |$LN48@HWIOCtl|
  06f04		 |$LN90@HWIOCtl|
  06f04	e3a00001	 mov         r0, #1
  06f08		 |$LN47@HWIOCtl|
  06f08	e49df004	 ldr         pc, [sp], #4
  06f0c		 |$LN92@HWIOCtl|
  06f0c		 |$LN93@HWIOCtl|
  06f0c	00000000	 DCD         |??_C@_1BK@IENMHCJC@?$AA?9?$AAH?$AAW?$AAI?$AAO?$AAC?$AAt?$AAl?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  06f10		 |$LN94@HWIOCtl|
  06f10	00000000	 DCD         |dpCurSettings|
  06f14		 |$LN95@HWIOCtl|
  06f14	00000000	 DCD         |??_C@_1GK@IFHHLCMH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAA?$AAR?$AAT?$AA?3?$AA?3?$AAH?$AAW?$AAI?$AAO?$AAC?$AAt?$AAl?$AA?3?$AA?5?$AAE?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5@|
  06f18		 |$LN96@HWIOCtl|
  06f18	00000000	 DCD         |??_C@_1GK@IKGJGEEE@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAA?$AAR?$AAT?$AA?3?$AA?3?$AAH?$AAW?$AAI?$AAO?$AAC?$AAt?$AAl?$AA?3?$AA?5?$AAE?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5@|
  06f1c		 |$LN97@HWIOCtl|
  06f1c	00000000	 DCD         |??_C@_1GO@NEMAHEIA@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAA?$AAR?$AAT?$AA?3?$AA?3?$AAH?$AAW?$AAI?$AAO?$AAC?$AAt?$AAl?$AA?3?$AA?5?$AAE?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5@|
  06f20		 |$LN98@HWIOCtl|
  06f20	00000000	 DCD         |??_C@_1HM@LFEOGEFI@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAA?$AAR?$AAT?$AA?3?$AA?3?$AAH?$AAW?$AAI?$AAO?$AAC?$AAt?$AAl?$AA?3?$AA?5?$AAE?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5@|
  06f24		 |$LN99@HWIOCtl|
  06f24	80038140	 DCD         0x80038140
  06f28		 |$LN100@HWIOCtl|
  06f28	0032100c	 DCD         0x32100c
  06f2c		 |$LN101@HWIOCtl|
  06f2c	00321008	 DCD         0x321008
  06f30		 |$LN102@HWIOCtl|
  06f30	00321004	 DCD         0x321004
  06f34		 |$LN103@HWIOCtl|
  06f34	00000000	 DCD         |??_C@_1BK@LLACKPCD@?$AA?$CL?$AAH?$AAW?$AAI?$AAO?$AAC?$AAt?$AAl?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  06f38		 |$LN91@HWIOCtl|
  06f38		 |$LN83@HWIOCtl|
	EXPORT	|??_C@_1CM@HOICDDMF@?$AA?9?$AAR?$AAe?$AAs?$AAt?$AAo?$AAr?$AAe?$AAU?$AAA?$AAR?$AAT?$AAC?$AAo?$AAn?$AAt?$AAe?$AAx?$AAt?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CM@ICHCKCIJ@?$AA?$CL?$AAR?$AAe?$AAs?$AAt?$AAo?$AAr?$AAe?$AAU?$AAA?$AAR?$AAT?$AAC?$AAo?$AAn?$AAt?$AAe?$AAx?$AAt?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  001c8			 AREA	 |.pdata|, PDATA
|$T47586| DCD	|$LN15@RestoreUAR|
	DCD	0x40009b04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@HOICDDMF@?$AA?9?$AAR?$AAe?$AAs?$AAt?$AAo?$AAr?$AAe?$AAU?$AAA?$AAR?$AAT?$AAC?$AAo?$AAn?$AAt?$AAe?$AAx?$AAt?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "R", 0x0, "e", 0x0, "s", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, "e", 0x0, "U", 0x0, "A", 0x0, "R", 0x0, "T", 0x0, "C"
	DCB	0x0, "o", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "x", 0x0, "t"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@ICHCKCIJ@?$AA?$CL?$AAR?$AAe?$AAs?$AAt?$AAo?$AAr?$AAe?$AAU?$AAA?$AAR?$AAT?$AAC?$AAo?$AAn?$AAt?$AAe?$AAx?$AAt?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "R", 0x0, "e", 0x0, "s", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, "e", 0x0, "U", 0x0, "A", 0x0, "R", 0x0, "T", 0x0, "C"
	DCB	0x0, "o", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "x", 0x0, "t"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  06f38			 AREA	 |.text|, CODE, ARM

  06f38		 |RestoreUARTContext| PROC

; 1511 : {

  06f38		 |$LN15@RestoreUAR|
  06f38	e1a0c00d	 mov         r12, sp
  06f3c	e92d0001	 stmdb       sp!, {r0}
  06f40	e92d5000	 stmdb       sp!, {r12, lr}
  06f44	e24dd010	 sub         sp, sp, #0x10
  06f48		 |$M47583|

; 1512 :     DEBUGMSG(ZONE_FUNCTION, (L"+RestoreUARTContext\r\n"));

  06f48	e59f324c	 ldr         r3, [pc, #0x24C]
  06f4c	e5933440	 ldr         r3, [r3, #0x440]
  06f50	e3130a02	 tst         r3, #2, 20
  06f54	0a000004	 beq         |$LN9@RestoreUAR|
  06f58	e59f0240	 ldr         r0, [pc, #0x240]
  06f5c	eb000000	 bl          NKDbgPrintfW
  06f60	e3a03001	 mov         r3, #1
  06f64	e58d3004	 str         r3, [sp, #4]
  06f68	ea000001	 b           |$LN10@RestoreUAR|
  06f6c		 |$LN9@RestoreUAR|
  06f6c	e3a03000	 mov         r3, #0
  06f70	e58d3004	 str         r3, [sp, #4]
  06f74		 |$LN10@RestoreUAR|

; 1513 :     //RETAILMSG(1, (L"+RestoreUARTContext\r\n"));
; 1514 : 
; 1515 :     // Set up Tx DMA Channel
; 1516 :     if (pPdd->hTxDmaChannel != NULL)

  06f74	e59d3018	 ldr         r3, [sp, #0x18]
  06f78	e2833f41	 add         r3, r3, #0x41, 30
  06f7c	e5933000	 ldr         r3, [r3]
  06f80	e3530000	 cmp         r3, #0
  06f84	0a000001	 beq         |$LN6@RestoreUAR|

; 1517 :     {
; 1518 :         InitializeTxDMA(pPdd);

  06f88	e59d0018	 ldr         r0, [sp, #0x18]
  06f8c	eb000000	 bl          InitializeTxDMA
  06f90		 |$LN6@RestoreUAR|

; 1519 :     }
; 1520 : 
; 1521 :     // Set up Rx DMA Channel
; 1522 :     if (pPdd->hRxDmaChannel != NULL)

  06f90	e59d3018	 ldr         r3, [sp, #0x18]
  06f94	e2833f4b	 add         r3, r3, #0x4B, 30
  06f98	e5933000	 ldr         r3, [r3]
  06f9c	e3530000	 cmp         r3, #0
  06fa0	0a000013	 beq         |$LN5@RestoreUAR|

; 1523 :     {
; 1524 :         PHW_INDEP_INFO  pSerialHead = (PHW_INDEP_INFO)pPdd->pMdd;

  06fa4	e59d3018	 ldr         r3, [sp, #0x18]
  06fa8	e2833050	 add         r3, r3, #0x50
  06fac	e5933000	 ldr         r3, [r3]
  06fb0	e58d3000	 str         r3, [sp]

; 1525 : 
; 1526 :         InitializeRxDMA(pPdd);

  06fb4	e59d0018	 ldr         r0, [sp, #0x18]
  06fb8	eb000000	 bl          InitializeRxDMA

; 1527 : 
; 1528 :         // Adjust the DMA Rx buffer pointer to where the MDD currently points to.
; 1529 :         UpdateDMARxPointer(pPdd, TRUE, (UINT32)RxBuffRead(pSerialHead) - (UINT32)(pPdd->pRxDmaBuffer));

  06fbc	e59d3000	 ldr         r3, [sp]
  06fc0	e28320ac	 add         r2, r3, #0xAC
  06fc4	e59d3000	 ldr         r3, [sp]
  06fc8	e283309c	 add         r3, r3, #0x9C
  06fcc	e5922000	 ldr         r2, [r2]
  06fd0	e5933000	 ldr         r3, [r3]
  06fd4	e0822003	 add         r2, r2, r3
  06fd8	e59d3018	 ldr         r3, [sp, #0x18]
  06fdc	e2833f45	 add         r3, r3, #0x45, 30
  06fe0	e5933000	 ldr         r3, [r3]
  06fe4	e0422003	 sub         r2, r2, r3
  06fe8	e3a01001	 mov         r1, #1
  06fec	e59d0018	 ldr         r0, [sp, #0x18]
  06ff0	eb000000	 bl          UpdateDMARxPointer
  06ff4		 |$LN5@RestoreUAR|

; 1530 :     }
; 1531 : 
; 1532 :     if (pPdd->currentDX != D0) 

  06ff4	e59d3018	 ldr         r3, [sp, #0x18]
  06ff8	e2833030	 add         r3, r3, #0x30
  06ffc	e5933000	 ldr         r3, [r3]
  07000	e3530000	 cmp         r3, #0
  07004	0a000005	 beq         |$LN4@RestoreUAR|

; 1533 :     {
; 1534 :         SetDevicePowerState(pPdd->hParentBus, D0, NULL);

  07008	e3a02000	 mov         r2, #0
  0700c	e3a01000	 mov         r1, #0
  07010	e59d3018	 ldr         r3, [sp, #0x18]
  07014	e283302c	 add         r3, r3, #0x2C
  07018	e5930000	 ldr         r0, [r3]
  0701c	eb000000	 bl          SetDevicePowerState
  07020		 |$LN4@RestoreUAR|

; 1535 :     }
; 1536 : 
; 1537 :     // Initialize the UART registers with default value. 
; 1538 :     InitializeUART(pPdd);

  07020	e59d0018	 ldr         r0, [sp, #0x18]
  07024	eb000000	 bl          InitializeUART

; 1539 : 
; 1540 :     // Update COMM port setting according DCB. SetDCB checks the flags in pPdd->pDCB
; 1541 :     // before updating the register value. Passing TRUE in the 3rd parameter to force
; 1542 :     // SetDCB to skip the checking.
; 1543 :     SetDCB(pPdd, &pPdd->dcb, TRUE);

  07028	e3a02001	 mov         r2, #1
  0702c	e59d3018	 ldr         r3, [sp, #0x18]
  07030	e2831058	 add         r1, r3, #0x58
  07034	e59d0018	 ldr         r0, [sp, #0x18]
  07038	eb000000	 bl          SetDCB

; 1544 : 
; 1545 :     // MCR wasn't part of DCB, so we need to restore it here.
; 1546 :     OUTREG8(&pPdd->pUartRegs->MCR, pPdd->currentMCR);

  0703c	e59d3018	 ldr         r3, [sp, #0x18]
  07040	e2833c01	 add         r3, r3, #1, 24
  07044	e283107d	 add         r1, r3, #0x7D
  07048	e59d3018	 ldr         r3, [sp, #0x18]
  0704c	e2833024	 add         r3, r3, #0x24
  07050	e5933000	 ldr         r3, [r3]
  07054	e2832010	 add         r2, r3, #0x10
  07058	e5d13000	 ldrb        r3, [r1]
  0705c	e5c23000	 strb        r3, [r2]

; 1547 : 
; 1548 :     /* Clear Modem and Line stats before enable IER */
; 1549 :     INREG8(&pPdd->pUartRegs->MSR);

  07060	e59d3018	 ldr         r3, [sp, #0x18]
  07064	e2833024	 add         r3, r3, #0x24
  07068	e5933000	 ldr         r3, [r3]
  0706c	e2833018	 add         r3, r3, #0x18
  07070	e5d33000	 ldrb        r3, [r3]
  07074	e5cd3008	 strb        r3, [sp, #8]

; 1550 :     INREG8(&pPdd->pUartRegs->LSR);

  07078	e59d3018	 ldr         r3, [sp, #0x18]
  0707c	e2833024	 add         r3, r3, #0x24
  07080	e5933000	 ldr         r3, [r3]
  07084	e2833014	 add         r3, r3, #0x14
  07088	e5d33000	 ldrb        r3, [r3]
  0708c	e5cd3009	 strb        r3, [sp, #9]

; 1551 : 
; 1552 :     // Restore interrupt mask. Since we are restoring to UART to it initialize condition
; 1553 :     // and add the current COMM setting on top it, we will simply initialize the interrupt
; 1554 :     // mask according to if the COMM port is open or closed.
; 1555 :     if (pPdd->open == TRUE)

  07090	e59d3018	 ldr         r3, [sp, #0x18]
  07094	e2833054	 add         r3, r3, #0x54
  07098	e5933000	 ldr         r3, [r3]
  0709c	e3530001	 cmp         r3, #1
  070a0	1a000007	 bne         |$LN3@RestoreUAR|

; 1556 :     {
; 1557 :         // Enable interrupts (no TX interrupt)
; 1558 :         pPdd->intrMask |= UART_IER_LINE|UART_IER_MODEM;

  070a4	e59d3018	 ldr         r3, [sp, #0x18]
  070a8	e2833088	 add         r3, r3, #0x88
  070ac	e5d33000	 ldrb        r3, [r3]
  070b0	e383100c	 orr         r1, r3, #0xC
  070b4	e59d3018	 ldr         r3, [sp, #0x18]
  070b8	e2832088	 add         r2, r3, #0x88
  070bc	e20130ff	 and         r3, r1, #0xFF
  070c0	e5c23000	 strb        r3, [r2]
  070c4		 |$LN3@RestoreUAR|

; 1559 :     }
; 1560 :     OUTREG8(&pPdd->pUartRegs->IER, pPdd->intrMask);

  070c4	e59d3018	 ldr         r3, [sp, #0x18]
  070c8	e2831088	 add         r1, r3, #0x88
  070cc	e59d3018	 ldr         r3, [sp, #0x18]
  070d0	e2833024	 add         r3, r3, #0x24
  070d4	e5933000	 ldr         r3, [r3]
  070d8	e2832004	 add         r2, r3, #4
  070dc	e5d13000	 ldrb        r3, [r1]
  070e0	e5c23000	 strb        r3, [r2]

; 1561 : 
; 1562 :     if (pPdd->currentDX != D0)

  070e4	e59d3018	 ldr         r3, [sp, #0x18]
  070e8	e2833030	 add         r3, r3, #0x30
  070ec	e5933000	 ldr         r3, [r3]
  070f0	e3530000	 cmp         r3, #0
  070f4	0a000007	 beq         |$LN2@RestoreUAR|

; 1563 :     {
; 1564 : 		SetDevicePowerState(pPdd->hParentBus, pPdd->currentDX, NULL);        

  070f8	e3a02000	 mov         r2, #0
  070fc	e59d3018	 ldr         r3, [sp, #0x18]
  07100	e2833030	 add         r3, r3, #0x30
  07104	e5931000	 ldr         r1, [r3]
  07108	e59d3018	 ldr         r3, [sp, #0x18]
  0710c	e283302c	 add         r3, r3, #0x2C
  07110	e5930000	 ldr         r0, [r3]
  07114	eb000000	 bl          SetDevicePowerState
  07118		 |$LN2@RestoreUAR|

; 1565 :     }
; 1566 : 
; 1567 :     // We need to give the Tx function a kick to restart the Tx operation.
; 1568 :     pPdd->addTxIntr = TRUE;

  07118	e59d3018	 ldr         r3, [sp, #0x18]
  0711c	e283208c	 add         r2, r3, #0x8C
  07120	e3a03001	 mov         r3, #1
  07124	e5823000	 str         r3, [r2]

; 1569 :     if ((pPdd->hTxDmaChannel != NULL) && (pPdd->hEventTxIstDma != INVALID_HANDLE_VALUE))

  07128	e59d3018	 ldr         r3, [sp, #0x18]
  0712c	e2833f41	 add         r3, r3, #0x41, 30
  07130	e5933000	 ldr         r3, [r3]
  07134	e3530000	 cmp         r3, #0
  07138	0a000008	 beq         |$LN1@RestoreUAR|
  0713c	e59d3018	 ldr         r3, [sp, #0x18]
  07140	e2833f42	 add         r3, r3, #0x42, 30
  07144	e5933000	 ldr         r3, [r3]
  07148	e3730001	 cmn         r3, #1
  0714c	0a000003	 beq         |$LN1@RestoreUAR|

; 1570 :     {
; 1571 :         SetEvent(pPdd->hEventTxIstDma);

  07150	e59d3018	 ldr         r3, [sp, #0x18]
  07154	e2833f42	 add         r3, r3, #0x42, 30
  07158	e5930000	 ldr         r0, [r3]
  0715c	eb000000	 bl          SetEvent
  07160		 |$LN1@RestoreUAR|

; 1572 :     }
; 1573 : 
; 1574 :     //RETAILMSG(1, (L"-RestoreUARTContext\r\n"));
; 1575 :     DEBUGMSG(ZONE_FUNCTION, (L"-RestoreUARTContext\r\n"));

  07160	e59f3034	 ldr         r3, [pc, #0x34]
  07164	e5933440	 ldr         r3, [r3, #0x440]
  07168	e3130a02	 tst         r3, #2, 20
  0716c	0a000004	 beq         |$LN11@RestoreUAR|
  07170	e59f0020	 ldr         r0, [pc, #0x20]
  07174	eb000000	 bl          NKDbgPrintfW
  07178	e3a03001	 mov         r3, #1
  0717c	e58d300c	 str         r3, [sp, #0xC]
  07180	ea000001	 b           |$LN12@RestoreUAR|
  07184		 |$LN11@RestoreUAR|
  07184	e3a03000	 mov         r3, #0
  07188	e58d300c	 str         r3, [sp, #0xC]
  0718c		 |$LN12@RestoreUAR|

; 1576 : }

  0718c	e28dd010	 add         sp, sp, #0x10
  07190	e89d6000	 ldmia       sp, {sp, lr}
  07194	e12fff1e	 bx          lr
  07198		 |$LN16@RestoreUAR|
  07198		 |$LN17@RestoreUAR|
  07198	00000000	 DCD         |??_C@_1CM@HOICDDMF@?$AA?9?$AAR?$AAe?$AAs?$AAt?$AAo?$AAr?$AAe?$AAU?$AAA?$AAR?$AAT?$AAC?$AAo?$AAn?$AAt?$AAe?$AAx?$AAt?$AA?$AN?$AA?6?$AA?$AA@|
  0719c		 |$LN18@RestoreUAR|
  0719c	00000000	 DCD         |dpCurSettings|
  071a0		 |$LN19@RestoreUAR|
  071a0	00000000	 DCD         |??_C@_1CM@ICHCKCIJ@?$AA?$CL?$AAR?$AAe?$AAs?$AAt?$AAo?$AAr?$AAe?$AAU?$AAA?$AAR?$AAT?$AAC?$AAo?$AAn?$AAt?$AAe?$AAx?$AAt?$AA?$AN?$AA?6?$AA?$AA@|
  071a4		 |$M47584|

			 ENDP  ; |RestoreUARTContext|

	END
