; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\DSS\DDGPE\omap_ddgpe.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|??_C@_1BO@HCEKBOCE@?$AAR?$AAe?$AAs?$AAi?$AAz?$AAe?$AAU?$AAs?$AAi?$AAn?$AAg?$AAI?$AAS?$AAP?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BO@HIDEFDND@?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAN?$AAe?$AAo?$AAn?$AAB?$AAl?$AAt?$AAs?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DG@EMDCEMCN@?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAW?$AAa?$AAi?$AAt?$AAF?$AAo?$AAr?$AAV?$AAe?$AAr?$AAt?$AAi?$AAc?$AAa?$AAl?$AAB?$AAl?$AAa?$AAn?$AAk?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CA@KKOABDHG@?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAG?$AAa?$AAm?$AAm?$AAa?$AAC?$AAo?$AAr?$AAr?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BI@OHOBMFLJ@?$AAI?$AAS?$AAT?$AAP?$AAr?$AAi?$AAo?$AAr?$AAi?$AAt?$AAy?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_17JOPIDIGL@?$AAI?$AAR?$AAQ?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1O@EHICLELI@?$AAC?$AAu?$AAr?$AAs?$AAo?$AAr?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BO@LANIIAMF@?$AAT?$AAV?$AAO?$AAu?$AAt?$AA_?$AAO?$AAf?$AAf?$AAs?$AAe?$AAt?$AA_?$AAH?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BO@LIKCMHAM@?$AAT?$AAV?$AAO?$AAu?$AAt?$AA_?$AAO?$AAf?$AAf?$AAs?$AAe?$AAt?$AA_?$AAW?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BO@CGJCBLII@?$AAT?$AAV?$AAO?$AAu?$AAt?$AA_?$AAR?$AAe?$AAs?$AAi?$AAz?$AAe?$AA_?$AAH?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BO@COOIFMEB@?$AAT?$AAV?$AAO?$AAu?$AAt?$AA_?$AAR?$AAe?$AAs?$AAi?$AAz?$AAe?$AA_?$AAW?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@DIIAOCFK@?$AAT?$AAV?$AAO?$AAu?$AAt?$AA_?$AAA?$AAs?$AAp?$AAe?$AAc?$AAt?$AAR?$AAa?$AAt?$AAi?$AAo?$AA_?$AAH?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@DAPKKFJD@?$AAT?$AAV?$AAO?$AAu?$AAt?$AA_?$AAA?$AAs?$AAp?$AAe?$AAc?$AAt?$AAR?$AAa?$AAt?$AAi?$AAo?$AA_?$AAW?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CE@JFOFAJOP@?$AAT?$AAV?$AAO?$AAu?$AAt?$AA_?$AAF?$AAi?$AAl?$AAt?$AAe?$AAr?$AAL?$AAe?$AAv?$AAe?$AAl?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1M@EAFCNFBE@?$AAT?$AAV?$AAO?$AAu?$AAt?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1M@EJCCJHHO@?$AAA?$AAn?$AAg?$AAl?$AAe?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CA@JFJPPHPE@?$AAO?$AAf?$AAf?$AAs?$AAc?$AAr?$AAe?$AAe?$AAn?$AAM?$AAe?$AAm?$AAo?$AAr?$AAy?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BG@FALMIFAM@?$AAS?$AAu?$AAr?$AAf?$AAa?$AAc?$AAe?$AAM?$AAg?$AAr?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|?g_Globals@@3VOMAPDDGPEGlobals@@A| [ DATA ] ; g_Globals
	EXPORT	|dpCurSettings| [ DATA ]
	EXPORT	|?g_pGPE@@3PAVDDGPE@@A| [ DATA ]	; g_pGPE

  00000			 AREA	 |.bss|, NOINIT
|?g_Globals@@3VOMAPDDGPEGlobals@@A| % 0x250		; g_Globals
|?g_pGPE@@3PAVDDGPE@@A| % 0x4				; g_pGPE

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@HCEKBOCE@?$AAR?$AAe?$AAs?$AAi?$AAz?$AAe?$AAU?$AAs?$AAi?$AAn?$AAg?$AAI?$AAS?$AAP?$AA?$AA@| DCB "R"
	DCB	0x0, "e", 0x0, "s", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, "U"
	DCB	0x0, "s", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, "I", 0x0, "S"
	DCB	0x0, "P", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@HIDEFDND@?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAN?$AAe?$AAo?$AAn?$AAB?$AAl?$AAt?$AAs?$AA?$AA@| DCB "E"
	DCB	0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, "N"
	DCB	0x0, "e", 0x0, "o", 0x0, "n", 0x0, "B", 0x0, "l", 0x0, "t"
	DCB	0x0, "s", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DG@EMDCEMCN@?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAW?$AAa?$AAi?$AAt?$AAF?$AAo?$AAr?$AAV?$AAe?$AAr?$AAt?$AAi?$AAc?$AAa?$AAl?$AAB?$AAl?$AAa?$AAn?$AAk?$AA?$AA@| DCB "E"
	DCB	0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, "W"
	DCB	0x0, "a", 0x0, "i", 0x0, "t", 0x0, "F", 0x0, "o", 0x0, "r"
	DCB	0x0, "V", 0x0, "e", 0x0, "r", 0x0, "t", 0x0, "i", 0x0, "c"
	DCB	0x0, "a", 0x0, "l", 0x0, "B", 0x0, "l", 0x0, "a", 0x0, "n"
	DCB	0x0, "k", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CA@KKOABDHG@?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAG?$AAa?$AAm?$AAm?$AAa?$AAC?$AAo?$AAr?$AAr?$AA?$AA@| DCB "E"
	DCB	0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, "G"
	DCB	0x0, "a", 0x0, "m", 0x0, "m", 0x0, "a", 0x0, "C", 0x0, "o"
	DCB	0x0, "r", 0x0, "r", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BI@OHOBMFLJ@?$AAI?$AAS?$AAT?$AAP?$AAr?$AAi?$AAo?$AAr?$AAi?$AAt?$AAy?$AA?$AA@| DCB "I"
	DCB	0x0, "S", 0x0, "T", 0x0, "P", 0x0, "r", 0x0, "i", 0x0, "o"
	DCB	0x0, "r", 0x0, "i", 0x0, "t", 0x0, "y", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_17JOPIDIGL@?$AAI?$AAR?$AAQ?$AA?$AA@| DCB "I", 0x0, "R", 0x0, "Q", 0x0
	DCB	0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1O@EHICLELI@?$AAC?$AAu?$AAr?$AAs?$AAo?$AAr?$AA?$AA@| DCB "C", 0x0, "u"
	DCB	0x0, "r", 0x0, "s", 0x0, "o", 0x0, "r", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@LANIIAMF@?$AAT?$AAV?$AAO?$AAu?$AAt?$AA_?$AAO?$AAf?$AAf?$AAs?$AAe?$AAt?$AA_?$AAH?$AA?$AA@| DCB "T"
	DCB	0x0, "V", 0x0, "O", 0x0, "u", 0x0, "t", 0x0, "_", 0x0, "O"
	DCB	0x0, "f", 0x0, "f", 0x0, "s", 0x0, "e", 0x0, "t", 0x0, "_"
	DCB	0x0, "H", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@LIKCMHAM@?$AAT?$AAV?$AAO?$AAu?$AAt?$AA_?$AAO?$AAf?$AAf?$AAs?$AAe?$AAt?$AA_?$AAW?$AA?$AA@| DCB "T"
	DCB	0x0, "V", 0x0, "O", 0x0, "u", 0x0, "t", 0x0, "_", 0x0, "O"
	DCB	0x0, "f", 0x0, "f", 0x0, "s", 0x0, "e", 0x0, "t", 0x0, "_"
	DCB	0x0, "W", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@CGJCBLII@?$AAT?$AAV?$AAO?$AAu?$AAt?$AA_?$AAR?$AAe?$AAs?$AAi?$AAz?$AAe?$AA_?$AAH?$AA?$AA@| DCB "T"
	DCB	0x0, "V", 0x0, "O", 0x0, "u", 0x0, "t", 0x0, "_", 0x0, "R"
	DCB	0x0, "e", 0x0, "s", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, "_"
	DCB	0x0, "H", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@COOIFMEB@?$AAT?$AAV?$AAO?$AAu?$AAt?$AA_?$AAR?$AAe?$AAs?$AAi?$AAz?$AAe?$AA_?$AAW?$AA?$AA@| DCB "T"
	DCB	0x0, "V", 0x0, "O", 0x0, "u", 0x0, "t", 0x0, "_", 0x0, "R"
	DCB	0x0, "e", 0x0, "s", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, "_"
	DCB	0x0, "W", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@DIIAOCFK@?$AAT?$AAV?$AAO?$AAu?$AAt?$AA_?$AAA?$AAs?$AAp?$AAe?$AAc?$AAt?$AAR?$AAa?$AAt?$AAi?$AAo?$AA_?$AAH?$AA?$AA@| DCB "T"
	DCB	0x0, "V", 0x0, "O", 0x0, "u", 0x0, "t", 0x0, "_", 0x0, "A"
	DCB	0x0, "s", 0x0, "p", 0x0, "e", 0x0, "c", 0x0, "t", 0x0, "R"
	DCB	0x0, "a", 0x0, "t", 0x0, "i", 0x0, "o", 0x0, "_", 0x0, "H"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@DAPKKFJD@?$AAT?$AAV?$AAO?$AAu?$AAt?$AA_?$AAA?$AAs?$AAp?$AAe?$AAc?$AAt?$AAR?$AAa?$AAt?$AAi?$AAo?$AA_?$AAW?$AA?$AA@| DCB "T"
	DCB	0x0, "V", 0x0, "O", 0x0, "u", 0x0, "t", 0x0, "_", 0x0, "A"
	DCB	0x0, "s", 0x0, "p", 0x0, "e", 0x0, "c", 0x0, "t", 0x0, "R"
	DCB	0x0, "a", 0x0, "t", 0x0, "i", 0x0, "o", 0x0, "_", 0x0, "W"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@JFOFAJOP@?$AAT?$AAV?$AAO?$AAu?$AAt?$AA_?$AAF?$AAi?$AAl?$AAt?$AAe?$AAr?$AAL?$AAe?$AAv?$AAe?$AAl?$AA?$AA@| DCB "T"
	DCB	0x0, "V", 0x0, "O", 0x0, "u", 0x0, "t", 0x0, "_", 0x0, "F"
	DCB	0x0, "i", 0x0, "l", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "L"
	DCB	0x0, "e", 0x0, "v", 0x0, "e", 0x0, "l", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@EAFCNFBE@?$AAT?$AAV?$AAO?$AAu?$AAt?$AA?$AA@| DCB "T", 0x0, "V", 0x0
	DCB	"O", 0x0, "u", 0x0, "t", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@EJCCJHHO@?$AAA?$AAn?$AAg?$AAl?$AAe?$AA?$AA@| DCB "A", 0x0, "n", 0x0
	DCB	"g", 0x0, "l", 0x0, "e", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CA@JFJPPHPE@?$AAO?$AAf?$AAf?$AAs?$AAc?$AAr?$AAe?$AAe?$AAn?$AAM?$AAe?$AAm?$AAo?$AAr?$AAy?$AA?$AA@| DCB "O"
	DCB	0x0, "f", 0x0, "f", 0x0, "s", 0x0, "c", 0x0, "r", 0x0, "e"
	DCB	0x0, "e", 0x0, "n", 0x0, "M", 0x0, "e", 0x0, "m", 0x0, "o"
	DCB	0x0, "r", 0x0, "y", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BG@FALMIFAM@?$AAS?$AAu?$AAr?$AAf?$AAa?$AAc?$AAe?$AAM?$AAg?$AAr?$AA?$AA@| DCB "S"
	DCB	0x0, "u", 0x0, "r", 0x0, "f", 0x0, "a", 0x0, "c", 0x0, "e"
	DCB	0x0, "M", 0x0, "g", 0x0, "r", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.data|, DATA
|dpCurSettings| DCB "O", 0x0, "M", 0x0, "A", 0x0, "P", 0x0, "D", 0x0, "D", 0x0
	DCB	"G", 0x0, "P", 0x0, "E", 0x0, " ", 0x0, "D", 0x0, "r", 0x0
	DCB	"i", 0x0, "v", 0x0, "e", 0x0, "r", 0x0, 0x0, 0x0
	%	30
	DCB	"E", 0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, "s", 0x0
	DCB	0x0, 0x0
	%	50
	DCB	"W", 0x0, "a", 0x0, "r", 0x0, "n", 0x0, "i", 0x0, "n", 0x0
	DCB	"g", 0x0, "s", 0x0, 0x0, 0x0
	%	46
	DCB	"P", 0x0, "e", 0x0, "r", 0x0, "f", 0x0, "o", 0x0, "r", 0x0
	DCB	"m", 0x0, "a", 0x0, "n", 0x0, "c", 0x0, "e", 0x0, 0x0, 0x0
	%	40
	DCB	"T", 0x0, "e", 0x0, "m", 0x0, "p", 0x0, "o", 0x0, "r", 0x0
	DCB	"a", 0x0, "r", 0x0, "y", 0x0, " ", 0x0, "t", 0x0, "e", 0x0
	DCB	"s", 0x0, "t", 0x0, "s", 0x0, 0x0, 0x0
	%	32
	DCB	"E", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, ",", 0x0
	DCB	"E", 0x0, "x", 0x0, "i", 0x0, "t", 0x0, 0x0, 0x0
	%	42
	DCB	"I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a", 0x0
	DCB	"l", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, 0x0, 0x0
	%	42
	DCB	"B", 0x0, "l", 0x0, "t", 0x0, " ", 0x0, "C", 0x0, "a", 0x0
	DCB	"l", 0x0, "l", 0x0, "s", 0x0, 0x0, 0x0
	%	44
	DCB	"B", 0x0, "l", 0x0, "t", 0x0, " ", 0x0, "V", 0x0, "e", 0x0
	DCB	"r", 0x0, "b", 0x0, "o", 0x0, "s", 0x0, "e", 0x0, 0x0, 0x0
	%	40
	DCB	"S", 0x0, "u", 0x0, "r", 0x0, "f", 0x0, "a", 0x0, "c", 0x0
	DCB	"e", 0x0, " ", 0x0, "C", 0x0, "r", 0x0, "e", 0x0, "a", 0x0
	DCB	"t", 0x0, "e", 0x0, 0x0, 0x0
	%	34
	DCB	"F", 0x0, "l", 0x0, "i", 0x0, "p", 0x0, 0x0, 0x0
	%	54
	DCB	"L", 0x0, "i", 0x0, "n", 0x0, "e", 0x0, 0x0, 0x0
	%	54
	DCB	"H", 0x0, "a", 0x0, "r", 0x0, "d", 0x0, "w", 0x0, "a", 0x0
	DCB	"r", 0x0, "e", 0x0, 0x0, 0x0
	%	46
	DCB	"P", 0x0, "o", 0x0, "l", 0x0, "y", 0x0, "g", 0x0, "o", 0x0
	DCB	"n", 0x0, 0x0, 0x0
	%	48
	DCB	"C", 0x0, "u", 0x0, "r", 0x0, "s", 0x0, "o", 0x0, "r", 0x0
	DCB	0x0, 0x0
	%	50
	DCB	"V", 0x0, "i", 0x0, "d", 0x0, "e", 0x0, "o", 0x0, " ", 0x0
	DCB	"M", 0x0, "e", 0x0, "m", 0x0, "o", 0x0, "r", 0x0, "y", 0x0
	DCB	0x0, 0x0
	%	38
	DCB	"D", 0x0, "D", 0x0, "r", 0x0, "a", 0x0, "w", 0x0, " ", 0x0
	DCB	"H", 0x0, "A", 0x0, "L", 0x0, 0x0, 0x0
	%	44
	DCD	0xc803

  00000			 AREA	 |.rdata|, DATA, READONLY
|FourCCDescriptionTable| DCD 0x32595559
	DCD	0x10
	DCD	0xff00ff
	DCD	0xff00
	DCD	0xff000000
	DCD	0x56595559
	DCD	0x10
	DCD	0xff00ff
	DCD	0xff00
	DCD	0xff000000
	DCD	0x55595659
	DCD	0x10
	DCD	0xff00ff00
	DCD	0xff
	DCD	0xff0000
	DCD	0x59565955
	DCD	0x10
	DCD	0xff00ff00
	DCD	0xff
	DCD	0xff0000
	DCD	0x36315659
	DCD	0x10
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x32315659
	DCD	0xc
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x3231564e
	DCD	0xc
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x30323449
	DCD	0xc
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x56555949
	DCD	0xc
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	%	4
|g_deviceRegParams| DCD |??_C@_1BG@FALMIFAM@?$AAS?$AAu?$AAr?$AAf?$AAa?$AAc?$AAe?$AAM?$AAg?$AAr?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x0
	DCD	0x4
	DCD	0x1
	DCD	|??_C@_1CA@JFJPPHPE@?$AAO?$AAf?$AAf?$AAs?$AAc?$AAr?$AAe?$AAe?$AAn?$AAM?$AAe?$AAm?$AAo?$AAr?$AAy?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x8
	DCD	0x4
	DCD	0x400000
	DCD	|??_C@_1M@EJCCJHHO@?$AAA?$AAn?$AAg?$AAl?$AAe?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x4
	DCD	0x4
	DCD	0x0
	DCD	|??_C@_1M@EAFCNFBE@?$AAT?$AAV?$AAO?$AAu?$AAt?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x214
	DCD	0x4
	DCD	0x0
	DCD	|??_C@_1CE@JFOFAJOP@?$AAT?$AAV?$AAO?$AAu?$AAt?$AA_?$AAF?$AAi?$AAl?$AAt?$AAe?$AAr?$AAL?$AAe?$AAv?$AAe?$AAl?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x218
	DCD	0x4
	DCD	0x0
	DCD	|??_C@_1CI@DAPKKFJD@?$AAT?$AAV?$AAO?$AAu?$AAt?$AA_?$AAA?$AAs?$AAp?$AAe?$AAc?$AAt?$AAR?$AAa?$AAt?$AAi?$AAo?$AA_?$AAW?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x21c
	DCD	0x4
	DCD	0x4
	DCD	|??_C@_1CI@DIIAOCFK@?$AAT?$AAV?$AAO?$AAu?$AAt?$AA_?$AAA?$AAs?$AAp?$AAe?$AAc?$AAt?$AAR?$AAa?$AAt?$AAi?$AAo?$AA_?$AAH?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x220
	DCD	0x4
	DCD	0x3
	DCD	|??_C@_1BO@COOIFMEB@?$AAT?$AAV?$AAO?$AAu?$AAt?$AA_?$AAR?$AAe?$AAs?$AAi?$AAz?$AAe?$AA_?$AAW?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x224
	DCD	0x4
	DCD	0x5a
	DCD	|??_C@_1BO@CGJCBLII@?$AAT?$AAV?$AAO?$AAu?$AAt?$AA_?$AAR?$AAe?$AAs?$AAi?$AAz?$AAe?$AA_?$AAH?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x228
	DCD	0x4
	DCD	0x5a
	DCD	|??_C@_1BO@LIKCMHAM@?$AAT?$AAV?$AAO?$AAu?$AAt?$AA_?$AAO?$AAf?$AAf?$AAs?$AAe?$AAt?$AA_?$AAW?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x22c
	DCD	0x4
	DCD	0x8
	DCD	|??_C@_1BO@LANIIAMF@?$AAT?$AAV?$AAO?$AAu?$AAt?$AA_?$AAO?$AAf?$AAf?$AAs?$AAe?$AAt?$AA_?$AAH?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x230
	DCD	0x4
	DCD	0x0
	DCD	|??_C@_1O@EHICLELI@?$AAC?$AAu?$AAr?$AAs?$AAo?$AAr?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x234
	DCD	0x4
	DCD	0x0
	DCD	|??_C@_17JOPIDIGL@?$AAI?$AAR?$AAQ?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x238
	DCD	0x4
	DCD	0x0
	DCD	|??_C@_1BI@OHOBMFLJ@?$AAI?$AAS?$AAT?$AAP?$AAr?$AAi?$AAo?$AAr?$AAi?$AAt?$AAy?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x23c
	DCD	0x4
	DCD	0x64
	DCD	|??_C@_1CA@KKOABDHG@?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAG?$AAa?$AAm?$AAm?$AAa?$AAC?$AAo?$AAr?$AAr?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x240
	DCD	0x4
	DCD	0x1
	DCD	|??_C@_1DG@EMDCEMCN@?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAW?$AAa?$AAi?$AAt?$AAF?$AAo?$AAr?$AAV?$AAe?$AAr?$AAt?$AAi?$AAc?$AAa?$AAl?$AAB?$AAl?$AAa?$AAn?$AAk?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x244
	DCD	0x4
	DCD	0x0
	DCD	|??_C@_1BO@HIDEFDND@?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAN?$AAe?$AAo?$AAn?$AAB?$AAl?$AAt?$AAs?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x248
	DCD	0x4
	DCD	0x0
	DCD	|??_C@_1BO@HCEKBOCE@?$AAR?$AAe?$AAs?$AAi?$AAz?$AAe?$AAU?$AAs?$AAi?$AAn?$AAg?$AAI?$AAS?$AAP?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x24c
	DCD	0x4
	DCD	0x0
	EXPORT	|??_C@_1FK@HPEDNOJB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AAI?$AAn?$AAi?$AAt?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAr?$AAe?$AAa@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GE@HGLMGOCG@?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AAI?$AAn?$AAi?$AAt?$AA?0?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AAp?$AAs?$AAz?$AAI?$AAn?$AAs@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CG@BEPCNIEH@?$AAS?$AAy?$AAs?$AAt?$AAe?$AAm?$AA?2?$AAG?$AAD?$AAI?$AA?2?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AAs?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CM@BJNJDCBM@?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AAI?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|DisplayInit|
	IMPORT	|wcscpy|
	IMPORT	|GetDeviceRegistryParams|
	IMPORT	|NKDbgPrintfW|

  00000			 AREA	 |.pdata|, PDATA
|$T43162| DCD	|$LN14@DisplayIni|
	DCD	0x40004b04
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\ddgpe\omap_ddgpe.cpp

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FK@HPEDNOJB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AAI?$AAn?$AAi?$AAt?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAr?$AAe?$AAa@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "D", 0x0, "i", 0x0, "s", 0x0, "p", 0x0, "l", 0x0, "a"
	DCB	0x0, "y", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, " "
	DCB	0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "r", 0x0, "e"
	DCB	0x0, "a", 0x0, "d", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "g"
	DCB	0x0, "i", 0x0, "s", 0x0, "t", 0x0, "r", 0x0, "y", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GE@HGLMGOCG@?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AAI?$AAn?$AAi?$AAt?$AA?0?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AAp?$AAs?$AAz?$AAI?$AAn?$AAs@| DCB "D"
	DCB	0x0, "i", 0x0, "s", 0x0, "p", 0x0, "l", 0x0, "a", 0x0, "y"
	DCB	0x0, " ", 0x0, "D", 0x0, "i", 0x0, "s", 0x0, "p", 0x0, "l"
	DCB	0x0, "a", 0x0, "y", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t"
	DCB	0x0, ",", 0x0, " ", 0x0, "N", 0x0, "U", 0x0, "L", 0x0, "L"
	DCB	0x0, " ", 0x0, "p", 0x0, "s", 0x0, "z", 0x0, "I", 0x0, "n"
	DCB	0x0, "s", 0x0, "t", 0x0, "a", 0x0, "n", 0x0, "c", 0x0, "e"
	DCB	0x0, ",", 0x0, " ", 0x0, "u", 0x0, "s", 0x0, "i", 0x0, "n"
	DCB	0x0, "g", 0x0, " ", 0x0, "%", 0x0, "s", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CG@BEPCNIEH@?$AAS?$AAy?$AAs?$AAt?$AAe?$AAm?$AA?2?$AAG?$AAD?$AAI?$AA?2?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AAs?$AA?$AA@| DCB "S"
	DCB	0x0, "y", 0x0, "s", 0x0, "t", 0x0, "e", 0x0, "m", 0x0, "\\"
	DCB	0x0, "G", 0x0, "D", 0x0, "I", 0x0, "\\", 0x0, "D", 0x0, "r"
	DCB	0x0, "i", 0x0, "v", 0x0, "e", 0x0, "r", 0x0, "s", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@BJNJDCBM@?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AAI?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@| DCB "D"
	DCB	0x0, "i", 0x0, "s", 0x0, "p", 0x0, "l", 0x0, "a", 0x0, "y"
	DCB	0x0, " ", 0x0, "D", 0x0, "i", 0x0, "s", 0x0, "p", 0x0, "l"
	DCB	0x0, "a", 0x0, "y", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DisplayInit| PROC

; 133  : {

  00000		 |$LN14@DisplayIni|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd014	 sub         sp, sp, #0x14
  00010		 |$M43159|

; 134  :     UNREFERENCED_PARAMETER(dwNumMonitors);
; 135  :     DEBUGMSG(GPE_ZONE_INIT, (L"Display DisplayInit\r\n"));

  00010	e59f3100	 ldr         r3, [pc, #0x100]
  00014	e5933440	 ldr         r3, [r3, #0x440]
  00018	e3130020	 tst         r3, #0x20
  0001c	0a000004	 beq         |$LN6@DisplayIni|
  00020	e59f0100	 ldr         r0, [pc, #0x100]
  00024	eb000000	 bl          NKDbgPrintfW
  00028	e3a03001	 mov         r3, #1
  0002c	e58d3004	 str         r3, [sp, #4]
  00030	ea000001	 b           |$LN7@DisplayIni|
  00034		 |$LN6@DisplayIni|
  00034	e3a03000	 mov         r3, #0
  00038	e58d3004	 str         r3, [sp, #4]
  0003c		 |$LN7@DisplayIni|

; 136  : 
; 137  :     // called with pszInstance set to NULL for non-PCI display drivers...
; 138  :     if (pszInstance == NULL)

  0003c	e59d301c	 ldr         r3, [sp, #0x1C]
  00040	e3530000	 cmp         r3, #0
  00044	1a00000d	 bne         |$LN3@DisplayIni|

; 139  :     {
; 140  :         pszInstance = L"System\\GDI\\Drivers";

  00048	e59f30d4	 ldr         r3, [pc, #0xD4]
  0004c	e58d301c	 str         r3, [sp, #0x1C]

; 141  :         DEBUGMSG(GPE_ZONE_INIT, (L"Display DisplayInit, NULL pszInstance, using %s\r\n", pszInstance));

  00050	e59f30c0	 ldr         r3, [pc, #0xC0]
  00054	e5933440	 ldr         r3, [r3, #0x440]
  00058	e3130020	 tst         r3, #0x20
  0005c	0a000005	 beq         |$LN8@DisplayIni|
  00060	e59d101c	 ldr         r1, [sp, #0x1C]
  00064	e59f00b4	 ldr         r0, [pc, #0xB4]
  00068	eb000000	 bl          NKDbgPrintfW
  0006c	e3a03001	 mov         r3, #1
  00070	e58d3008	 str         r3, [sp, #8]
  00074	ea000001	 b           |$LN9@DisplayIni|
  00078		 |$LN8@DisplayIni|
  00078	e3a03000	 mov         r3, #0
  0007c	e58d3008	 str         r3, [sp, #8]
  00080		 |$LN9@DisplayIni|
  00080		 |$LN3@DisplayIni|

; 142  :     }
; 143  :     
; 144  :     //  Read display driver initialization parameters
; 145  :     if( GetDeviceRegistryParams(pszInstance, &g_Globals, dimof(g_deviceRegParams),
; 146  :         g_deviceRegParams) != ERROR_SUCCESS)

  00080	e59f3094	 ldr         r3, [pc, #0x94]
  00084	e3a02012	 mov         r2, #0x12
  00088	e59f1080	 ldr         r1, [pc, #0x80]
  0008c	e59d001c	 ldr         r0, [sp, #0x1C]
  00090	eb000000	 bl          GetDeviceRegistryParams
  00094	e58d000c	 str         r0, [sp, #0xC]
  00098	e59d300c	 ldr         r3, [sp, #0xC]
  0009c	e3530000	 cmp         r3, #0
  000a0	0a00000d	 beq         |$LN2@DisplayIni|

; 147  :     {
; 148  :         DEBUGMSG(GPE_ZONE_ERROR, (L"ERROR: DisplayInit failed to read registry\r\n"));

  000a4	e59f306c	 ldr         r3, [pc, #0x6C]
  000a8	e5933440	 ldr         r3, [r3, #0x440]
  000ac	e3130001	 tst         r3, #1
  000b0	0a000004	 beq         |$LN10@DisplayIni|
  000b4	e59f0058	 ldr         r0, [pc, #0x58]
  000b8	eb000000	 bl          NKDbgPrintfW
  000bc	e3a03001	 mov         r3, #1
  000c0	e58d3010	 str         r3, [sp, #0x10]
  000c4	ea000001	 b           |$LN11@DisplayIni|
  000c8		 |$LN10@DisplayIni|
  000c8	e3a03000	 mov         r3, #0
  000cc	e58d3010	 str         r3, [sp, #0x10]
  000d0		 |$LN11@DisplayIni|

; 149  :         return FALSE;

  000d0	e3a03000	 mov         r3, #0
  000d4	e58d3000	 str         r3, [sp]
  000d8	ea000008	 b           |$LN4@DisplayIni|
  000dc		 |$LN2@DisplayIni|

; 150  :     }
; 151  :     if (pszInstance != NULL) _tcscpy(g_Globals.m_szContext, pszInstance);

  000dc	e59d301c	 ldr         r3, [sp, #0x1C]
  000e0	e3530000	 cmp         r3, #0
  000e4	0a000003	 beq         |$LN1@DisplayIni|
  000e8	e59d101c	 ldr         r1, [sp, #0x1C]
  000ec	e59f301c	 ldr         r3, [pc, #0x1C]
  000f0	e283000c	 add         r0, r3, #0xC
  000f4	eb000000	 bl          wcscpy
  000f8		 |$LN1@DisplayIni|

; 152  : 
; 153  :     return TRUE;

  000f8	e3a03001	 mov         r3, #1
  000fc	e58d3000	 str         r3, [sp]
  00100		 |$LN4@DisplayIni|

; 154  : }

  00100	e59d0000	 ldr         r0, [sp]
  00104	e28dd014	 add         sp, sp, #0x14
  00108	e89d6000	 ldmia       sp, {sp, lr}
  0010c	e12fff1e	 bx          lr
  00110		 |$LN15@DisplayIni|
  00110		 |$LN16@DisplayIni|
  00110	00000000	 DCD         |?g_Globals@@3VOMAPDDGPEGlobals@@A|
  00114		 |$LN17@DisplayIni|
  00114	00000000	 DCD         |??_C@_1FK@HPEDNOJB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AAI?$AAn?$AAi?$AAt?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAr?$AAe?$AAa@|
  00118		 |$LN18@DisplayIni|
  00118	00000000	 DCD         |dpCurSettings|
  0011c		 |$LN19@DisplayIni|
  0011c	00000000	 DCD         |g_deviceRegParams|
  00120		 |$LN20@DisplayIni|
  00120	00000000	 DCD         |??_C@_1GE@HGLMGOCG@?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AAI?$AAn?$AAi?$AAt?$AA?0?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AAp?$AAs?$AAz?$AAI?$AAn?$AAs@|
  00124		 |$LN21@DisplayIni|
  00124	00000000	 DCD         |??_C@_1CG@BEPCNIEH@?$AAS?$AAy?$AAs?$AAt?$AAe?$AAm?$AA?2?$AAG?$AAD?$AAI?$AA?2?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AAs?$AA?$AA@|
  00128		 |$LN22@DisplayIni|
  00128	00000000	 DCD         |??_C@_1CM@BJNJDCBM@?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AAI?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@|
  0012c		 |$M43160|

			 ENDP  ; |DisplayInit|

	EXPORT	|DrvEnableDriver|
	IMPORT	|?GPEEnableDriver@@YAHKKPAUtagDrvEnableData@@PAU_ENGCALLBACKS@@@Z| ; GPEEnableDriver

  00008			 AREA	 |.pdata|, PDATA
|$T43176| DCD	|$LN5@DrvEnableD|
	DCD	0x40001004
; Function compile flags: /Odtp

  0012c			 AREA	 |.text|, CODE, ARM

  0012c		 |DrvEnableDriver| PROC

; 164  : {

  0012c		 |$LN5@DrvEnableD|
  0012c	e1a0c00d	 mov         r12, sp
  00130	e92d000f	 stmdb       sp!, {r0 - r3}
  00134	e92d5000	 stmdb       sp!, {r12, lr}
  00138	e24dd008	 sub         sp, sp, #8
  0013c		 |$M43173|

; 165  :     return GPEEnableDriver(engineVersion, cj, data, engineCallbacks);

  0013c	e59d301c	 ldr         r3, [sp, #0x1C]
  00140	e59d2018	 ldr         r2, [sp, #0x18]
  00144	e59d1014	 ldr         r1, [sp, #0x14]
  00148	e59d0010	 ldr         r0, [sp, #0x10]
  0014c	eb000000	 bl          |?GPEEnableDriver@@YAHKKPAUtagDrvEnableData@@PAU_ENGCALLBACKS@@@Z|
  00150	e58d0004	 str         r0, [sp, #4]
  00154	e59d3004	 ldr         r3, [sp, #4]
  00158	e58d3000	 str         r3, [sp]

; 166  : }

  0015c	e59d0000	 ldr         r0, [sp]
  00160	e28dd008	 add         sp, sp, #8
  00164	e89d6000	 ldmia       sp, {sp, lr}
  00168	e12fff1e	 bx          lr
  0016c		 |$M43174|

			 ENDP  ; |DrvEnableDriver|

	EXPORT	|DrvGetMasks|

  00010			 AREA	 |.pdata|, PDATA
|$T43182| DCD	|$LN6@DrvGetMask|
	DCD	0x40001d04
; Function compile flags: /Odtp

  0016c			 AREA	 |.text|, CODE, ARM

  0016c		 |DrvGetMasks| PROC

; 175  : {

  0016c		 |$LN6@DrvGetMask|
  0016c	e1a0c00d	 mov         r12, sp
  00170	e92d0001	 stmdb       sp!, {r0}
  00174	e92d5000	 stmdb       sp!, {r12, lr}
  00178	e24dd00c	 sub         sp, sp, #0xC
  0017c		 |$M43179|

; 176  :     ULONG*  pMasks = NULL;

  0017c	e3a03000	 mov         r3, #0
  00180	e58d3000	 str         r3, [sp]

; 177  : 
; 178  :     UNREFERENCED_PARAMETER(dhpdev);
; 179  :     
; 180  :     //  Return masks for selected mode
; 181  :     if( g_pGPE )

  00184	e59f3050	 ldr         r3, [pc, #0x50]
  00188	e5933000	 ldr         r3, [r3]
  0018c	e3530000	 cmp         r3, #0
  00190	0a00000b	 beq         |$LN1@DrvGetMask|

; 182  :     {
; 183  :         pMasks = ((OMAPDDGPE*)g_pGPE)->GetMasks();

  00194	e59f3040	 ldr         r3, [pc, #0x40]
  00198	e5933000	 ldr         r3, [r3]
  0019c	e5933000	 ldr         r3, [r3]
  001a0	e28320e8	 add         r2, r3, #0xE8
  001a4	e59f3030	 ldr         r3, [pc, #0x30]
  001a8	e5930000	 ldr         r0, [r3]
  001ac	e5923000	 ldr         r3, [r2]
  001b0	e1a0e00f	 mov         lr, pc
  001b4	e12fff13	 bx          r3
  001b8	e58d0008	 str         r0, [sp, #8]
  001bc	e59d3008	 ldr         r3, [sp, #8]
  001c0	e58d3000	 str         r3, [sp]
  001c4		 |$LN1@DrvGetMask|

; 184  :     }
; 185  :     
; 186  :     //  Return
; 187  :     return pMasks;

  001c4	e59d3000	 ldr         r3, [sp]
  001c8	e58d3004	 str         r3, [sp, #4]

; 188  : }

  001cc	e59d0004	 ldr         r0, [sp, #4]
  001d0	e28dd00c	 add         sp, sp, #0xC
  001d4	e89d6000	 ldmia       sp, {sp, lr}
  001d8	e12fff1e	 bx          lr
  001dc		 |$LN7@DrvGetMask|
  001dc		 |$LN8@DrvGetMask|
  001dc	00000000	 DCD         |?g_pGPE@@3PAVDDGPE@@A|
  001e0		 |$M43180|

			 ENDP  ; |DrvGetMasks|

	EXPORT	|?getAngle@@YAKK@Z|			; getAngle

  00018			 AREA	 |.pdata|, PDATA
|$T43197| DCD	|$LN19@getAngle|
	DCD	0x40002a04
; Function compile flags: /Odtp

  001e0			 AREA	 |.text|, CODE, ARM

  001e0		 |?getAngle@@YAKK@Z| PROC		; getAngle

; 192  : {

  001e0		 |$LN19@getAngle|
  001e0	e1a0c00d	 mov         r12, sp
  001e4	e92d0001	 stmdb       sp!, {r0}
  001e8	e92d5000	 stmdb       sp!, {r12, lr}
  001ec	e24dd00c	 sub         sp, sp, #0xC
  001f0		 |$M43194|

; 193  :     DWORD angle = 0;

  001f0	e3a03000	 mov         r3, #0
  001f4	e58d3000	 str         r3, [sp]

; 194  :     switch(orientation)

  001f8	e59d3014	 ldr         r3, [sp, #0x14]
  001fc	e58d3008	 str         r3, [sp, #8]
  00200	e59d3008	 ldr         r3, [sp, #8]
  00204	e3530004	 cmp         r3, #4
  00208	8a000016	 bhi         |$LN1@getAngle|
  0020c	e59d2008	 ldr         r2, [sp, #8]
  00210	e1a03102	 mov         r3, r2, lsl #2
  00214	e083300f	 add         r3, r3, pc
  00218	e5933004	 ldr         r3, [r3, #4]
  0021c	e08ff003	 add         pc, pc, r3
  00220		 |$LN11@getAngle|
  00220		 |$LN10@getAngle|
  00220		 |$LN12@getAngle|
  00220	00000010	 DCD         0x10
  00224		 |$LN13@getAngle|
  00224	0000001c	 DCD         0x1c
  00228		 |$LN14@getAngle|
  00228	00000028	 DCD         0x28
  0022c		 |$LN15@getAngle|
  0022c	00000044	 DCD         0x44
  00230		 |$LN16@getAngle|
  00230	00000034	 DCD         0x34
  00234		 |$LN5@getAngle|

; 195  :     {
; 196  :         case DMDO_0:
; 197  :             angle=0;

  00234	e3a03000	 mov         r3, #0
  00238	e58d3000	 str         r3, [sp]

; 198  :             break;

  0023c	ea00000b	 b           |$LN6@getAngle|
  00240		 |$LN4@getAngle|

; 199  :         case DMDO_90:
; 200  :             angle=90;

  00240	e3a0305a	 mov         r3, #0x5A
  00244	e58d3000	 str         r3, [sp]

; 201  :             break;

  00248	ea000008	 b           |$LN6@getAngle|
  0024c		 |$LN3@getAngle|

; 202  :         case DMDO_180:
; 203  :             angle=180;

  0024c	e3a030b4	 mov         r3, #0xB4
  00250	e58d3000	 str         r3, [sp]

; 204  :             break;

  00254	ea000005	 b           |$LN6@getAngle|
  00258		 |$LN2@getAngle|

; 205  :         case DMDO_270:
; 206  :             angle=270;

  00258	e3a03c01	 mov         r3, #1, 24
  0025c	e383300e	 orr         r3, r3, #0xE
  00260	e58d3000	 str         r3, [sp]

; 207  :             break;

  00264	ea000001	 b           |$LN6@getAngle|
  00268		 |$LN1@getAngle|

; 208  :         default:
; 209  :             angle=0;

  00268	e3a03000	 mov         r3, #0
  0026c	e58d3000	 str         r3, [sp]
  00270		 |$LN6@getAngle|

; 210  :             break;
; 211  :     }
; 212  :     return angle;

  00270	e59d3000	 ldr         r3, [sp]
  00274	e58d3004	 str         r3, [sp, #4]

; 213  : }

  00278	e59d0004	 ldr         r0, [sp, #4]
  0027c	e28dd00c	 add         sp, sp, #0xC
  00280	e89d6000	 ldmia       sp, {sp, lr}
  00284	e12fff1e	 bx          lr
  00288		 |$M43195|

			 ENDP  ; |?getAngle@@YAKK@Z|, getAngle

	EXPORT	|?getOrientation@@YAKK@Z|		; getOrientation

  00020			 AREA	 |.pdata|, PDATA
|$T43204| DCD	|$LN13@getOrienta|
	DCD	0x40002f04
; Function compile flags: /Odtp

  00288			 AREA	 |.text|, CODE, ARM

  00288		 |?getOrientation@@YAKK@Z| PROC		; getOrientation

; 217  : {

  00288		 |$LN13@getOrienta|
  00288	e1a0c00d	 mov         r12, sp
  0028c	e92d0001	 stmdb       sp!, {r0}
  00290	e92d5000	 stmdb       sp!, {r12, lr}
  00294	e24dd00c	 sub         sp, sp, #0xC
  00298		 |$M43201|

; 218  :     DWORD orientation = 0;

  00298	e3a03000	 mov         r3, #0
  0029c	e58d3000	 str         r3, [sp]

; 219  :     switch(angle)

  002a0	e59d3014	 ldr         r3, [sp, #0x14]
  002a4	e58d3008	 str         r3, [sp, #8]
  002a8	e59d3008	 ldr         r3, [sp, #8]
  002ac	e35300b4	 cmp         r3, #0xB4
  002b0	8a000009	 bhi         |$LN10@getOrienta|
  002b4	e59d3008	 ldr         r3, [sp, #8]
  002b8	e35300b4	 cmp         r3, #0xB4
  002bc	0a000012	 beq         |$LN3@getOrienta|
  002c0	e59d3008	 ldr         r3, [sp, #8]
  002c4	e3530000	 cmp         r3, #0
  002c8	0a000009	 beq         |$LN5@getOrienta|
  002cc	e59d3008	 ldr         r3, [sp, #8]
  002d0	e353005a	 cmp         r3, #0x5A
  002d4	0a000009	 beq         |$LN4@getOrienta|
  002d8	ea000011	 b           |$LN1@getOrienta|
  002dc		 |$LN10@getOrienta|
  002dc	e59d2008	 ldr         r2, [sp, #8]
  002e0	e3a03c01	 mov         r3, #1, 24
  002e4	e383300e	 orr         r3, r3, #0xE
  002e8	e1520003	 cmp         r2, r3
  002ec	0a000009	 beq         |$LN2@getOrienta|
  002f0	ea00000b	 b           |$LN1@getOrienta|
  002f4		 |$LN5@getOrienta|

; 220  :     {
; 221  :         case 0:
; 222  :             orientation=DMDO_0;

  002f4	e3a03000	 mov         r3, #0
  002f8	e58d3000	 str         r3, [sp]

; 223  :             break;

  002fc	ea00000a	 b           |$LN6@getOrienta|
  00300		 |$LN4@getOrienta|

; 224  :         case 90:
; 225  :             orientation=DMDO_90;

  00300	e3a03001	 mov         r3, #1
  00304	e58d3000	 str         r3, [sp]

; 226  :             break;

  00308	ea000007	 b           |$LN6@getOrienta|
  0030c		 |$LN3@getOrienta|

; 227  :         case 180:
; 228  :             orientation=DMDO_180;

  0030c	e3a03002	 mov         r3, #2
  00310	e58d3000	 str         r3, [sp]

; 229  :             break;

  00314	ea000004	 b           |$LN6@getOrienta|
  00318		 |$LN2@getOrienta|

; 230  :         case 270:
; 231  :             orientation=DMDO_270;

  00318	e3a03004	 mov         r3, #4
  0031c	e58d3000	 str         r3, [sp]

; 232  :             break;

  00320	ea000001	 b           |$LN6@getOrienta|
  00324		 |$LN1@getOrienta|

; 233  :         default:
; 234  :             orientation=DMDO_0;

  00324	e3a03000	 mov         r3, #0
  00328	e58d3000	 str         r3, [sp]
  0032c		 |$LN6@getOrienta|

; 235  :             break;
; 236  :     }
; 237  :     return orientation;

  0032c	e59d3000	 ldr         r3, [sp]
  00330	e58d3004	 str         r3, [sp, #4]

; 238  : }

  00334	e59d0004	 ldr         r0, [sp, #4]
  00338	e28dd00c	 add         sp, sp, #0xC
  0033c	e89d6000	 ldmia       sp, {sp, lr}
  00340	e12fff1e	 bx          lr
  00344		 |$M43202|

			 ENDP  ; |?getOrientation@@YAKK@Z|, getOrientation

	EXPORT	|?PixelFormatToDDGPEFormat@OMAPDDGPE@@SA?AW4EDDGPEPixelFormat@@W4OMAP_DSS_PIXELFORMAT@@@Z| ; OMAPDDGPE::PixelFormatToDDGPEFormat
	EXPORT	|?PixelFormatToGPEFormat@OMAPDDGPE@@SA?AW4EGPEFormat@@W4OMAP_DSS_PIXELFORMAT@@@Z| ; OMAPDDGPE::PixelFormatToGPEFormat
	EXPORT	|?PixelFormatToBpp@OMAPDDGPE@@SAKW4OMAP_DSS_PIXELFORMAT@@@Z| ; OMAPDDGPE::PixelFormatToBpp
	EXPORT	|?GetLCDPixelFormat@OMAPDisplayController@@QAA?AW4OMAP_DSS_PIXELFORMAT@@XZ| ; OMAPDisplayController::GetLCDPixelFormat
	EXPORT	|?GetLCDHeight@OMAPDisplayController@@QAAKXZ| ; OMAPDisplayController::GetLCDHeight
	EXPORT	|?GetLCDWidth@OMAPDisplayController@@QAAKXZ| ; OMAPDisplayController::GetLCDWidth
	EXPORT	|??_C@_1FM@NGKLCFKD@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAi?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?5?$AAs?$AAu?$AAr?$AAf@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FI@DAAEFBJG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAs?$AAu?$AAr?$AAf?$AAa?$AAc@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FM@MHAHIEFN@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAi?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?5?$AAD?$AAS?$AAS?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EE@LPEPPACB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAi?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?5?$AAL?$AAC?$AAD?$AA?$AN@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GC@IKJCGOEK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAi?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?5?$AAd?$AAi?$AAs?$AAp@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FO@GKBABLBK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAd?$AAi?$AAs?$AAp?$AAl?$AAa@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GG@MOFFINCC@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAa?$AAd?$AAv?$AAe?$AAr?$AAt?$AAi?$AAs?$AAe?$AA?5?$AAd?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FK@NHLAPMED@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAr?$AAe?$AAt?$AAr?$AAi?$AAe?$AAv?$AAe?$AA?5?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HC@GOHHDCGP@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAc?$AAo?$AAn?$AAv?$AAe?$AAr?$AAt?$AA?5?$AAd?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAp?$AAo@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EO@BHDHHEGO@?$AA?$HL?$AAE?$AAB?$AA9?$AA1?$AAC?$AA7?$AAC?$AA9?$AA?9?$AA8?$AAB?$AAF?$AA6?$AA?9?$AA4?$AAa?$AA2?$AAd?$AA?9?$AA9?$AAA?$AAB?$AA8?$AA?9?$AA6?$AA9?$AA7?$AA2?$AA4?$AAE?$AAE@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CO@GLGGGNMB@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_7OMAPDDGPE@@6B@| [ DATA ]		; OMAPDDGPE::`vftable'
	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|??0OMAPDDGPE@@QAA@XZ|			; OMAPDDGPE::OMAPDDGPE
	EXPORT	|?BltPrepare@OMAPDDGPE@@UAAJPAUGPEBltParms@@@Z| ; OMAPDDGPE::BltPrepare
	EXPORT	|?BltComplete@OMAPDDGPE@@UAAJPAUGPEBltParms@@@Z| ; OMAPDDGPE::BltComplete
	EXPORT	|?Line@OMAPDDGPE@@UAAJPAUGPELineParms@@W4EGPEPhase@@@Z| ; OMAPDDGPE::Line
	EXPORT	|?SetPointerShape@OMAPDDGPE@@UAAJPAVGPESurf@@0HHHH@Z| ; OMAPDDGPE::SetPointerShape
	EXPORT	|?MovePointer@OMAPDDGPE@@UAAJHH@Z|	; OMAPDDGPE::MovePointer
	EXPORT	|?SetPalette@OMAPDDGPE@@UAAJPBUtagPALETTEENTRY@@GG@Z| ; OMAPDDGPE::SetPalette
	EXPORT	|?GetModeInfo@OMAPDDGPE@@UAAJPAUGPEMode@@H@Z| ; OMAPDDGPE::GetModeInfo
	EXPORT	|?NumModes@OMAPDDGPE@@UAAHXZ|		; OMAPDDGPE::NumModes
	EXPORT	|?SetMode@OMAPDDGPE@@UAAJHPAPAUHPALETTE__@@@Z| ; OMAPDDGPE::SetMode
	EXPORT	|?DrvEscape@OMAPDDGPE@@UAAKPAU_SURFOBJ@@KKPAXK1@Z| ; OMAPDDGPE::DrvEscape
	EXPORT	|?GetPhysicalModeId@DDGPE@@UAAKXZ|	; DDGPE::GetPhysicalModeId
	EXPORT	|?GetModeInfoEx@OMAPDDGPE@@UAAJPAUGPEModeEx@@H@Z| ; OMAPDDGPE::GetModeInfoEx
	EXPORT	|?GetDriverData@DDGPE@@UAAPAUDDGPEDriverData@@XZ| ; DDGPE::GetDriverData
	EXPORT	|?SetDriverData@DDGPE@@UAAXPAUDDGPEDriverData@@@Z| ; DDGPE::SetDriverData
	EXPORT	|?GetPrimaryPixelFormat@OMAPDDGPE@@UAA?AW4OMAP_DSS_PIXELFORMAT@@XZ| ; OMAPDDGPE::GetPrimaryPixelFormat
	EXPORT	|?GetMasks@OMAPDDGPE@@UAAPAKXZ|		; OMAPDDGPE::GetMasks
	EXPORT	|?Lock@OMAPDDGPE@@UAAXXZ|		; OMAPDDGPE::Lock
	EXPORT	|?Unlock@OMAPDDGPE@@UAAXXZ|		; OMAPDDGPE::Unlock
	EXPORT	|?DDHALInfo@OMAPDDGPE@@UAAXPAU_DDHALINFO@@K@Z| ; OMAPDDGPE::DDHALInfo
	IMPORT	|InitializeCriticalSection|
	IMPORT	|memset|
	IMPORT	|?SetSurfaceMgr@OMAPDisplayController@@QAAHPAVOMAPSurfaceManager@@@Z| ; OMAPDisplayController::SetSurfaceMgr
	IMPORT	|??0OMAPVrfbSurfaceManager@@QAA@XZ|	; OMAPVrfbSurfaceManager::OMAPVrfbSurfaceManager
	IMPORT	|??0OMAPFlatSurfaceManager@@QAA@XZ|	; OMAPFlatSurfaceManager::OMAPFlatSurfaceManager
	IMPORT	|?InitInterrupts@OMAPDisplayController@@QAAHKK@Z| ; OMAPDisplayController::InitInterrupts
	IMPORT	|?InitLCD@OMAPDisplayController@@QAAHXZ| ; OMAPDisplayController::InitLCD
	IMPORT	|?InitController@OMAPDisplayController@@QAAHHHH@Z| ; OMAPDisplayController::InitController
	IMPORT	|?DVISelect@OMAPDisplayController@@QAAHH@Z| ; OMAPDisplayController::DVISelect
	IMPORT	|LcdPdd_DVI_Enabled|
	IMPORT	|??0OMAPDisplayController@@QAA@XZ|	; OMAPDisplayController::OMAPDisplayController
	IMPORT	|??2@YAPAXI@Z|				; operator new
	IMPORT	|AdvertiseInterface|
	IMPORT	|GetModuleFileNameW|
	IMPORT	|g_hmodDisplayDll|
	IMPORT	|??0DDGPE@@QAA@XZ|			; DDGPE::DDGPE
	IMPORT	|__security_cookie|
	IMPORT	|__GSHandlerCheck|
	IMPORT	|__security_check_cookie|
	IMPORT	|??_EOMAPDDGPE@@UAAPAXI@Z|, WEAK |??_GOMAPDDGPE@@UAAPAXI@Z| ; OMAPDDGPE::`vector deleting destructor', OMAPDDGPE::`scalar deleting destructor'
	IMPORT	|?AllocSurface@OMAPDDGPE@@UAAJPAPAVGPESurf@@HHW4EGPEFormat@@H@Z| ; OMAPDDGPE::AllocSurface
	IMPORT	|?GetPalette@GPE@@UAAJPAPAUtagPALETTEENTRY@@PAG@Z| ; GPE::GetPalette
	IMPORT	|?InVBlank@OMAPDDGPE@@UAAHXZ|		; OMAPDDGPE::InVBlank
	IMPORT	|?IsPaletteSettable@GPE@@UAAHXZ|	; GPE::IsPaletteSettable
	IMPORT	|?ContrastControl@GPE@@UAAHKPAK@Z|	; GPE::ContrastControl
	IMPORT	|?PowerHandler@GPE@@UAAXH@Z|		; GPE::PowerHandler
	IMPORT	|?GetGraphicsCaps@GPE@@UAAKXZ|		; GPE::GetGraphicsCaps
	IMPORT	|?GetPhysicalVideoMemory@GPE@@UAAXPAK0@Z| ; GPE::GetPhysicalVideoMemory
	IMPORT	|?SetVisibleSurface@GPE@@UAAXPAVGPESurf@@@Z| ; GPE::SetVisibleSurface
	IMPORT	|?FlipInProgress@OMAPDDGPE@@UAAHXZ|	; OMAPDDGPE::FlipInProgress
	IMPORT	|?WaitForVBlank@OMAPDDGPE@@UAAXXZ|	; OMAPDDGPE::WaitForVBlank
	IMPORT	|?SurfaceBusyFlipping@GPE@@UAAHPAVGPESurf@@@Z| ; GPE::SurfaceBusyFlipping
	IMPORT	|?IsBusy@OMAPDDGPE@@UAAHXZ|		; OMAPDDGPE::IsBusy
	IMPORT	|?WaitForNotBusy@OMAPDDGPE@@UAAXXZ|	; OMAPDDGPE::WaitForNotBusy
	IMPORT	|?AvailableVideoMemory@GPE@@UAAKXZ|	; GPE::AvailableVideoMemory
	IMPORT	|?ScanLine@GPE@@UAAHXZ|			; GPE::ScanLine
	IMPORT	|?ProcessCommandBlock@GPE@@UAAJPAE@Z|	; GPE::ProcessCommandBlock
	IMPORT	|?GetScreenDimensions@GPE@@UAAHPAUGPEScreenProps@@@Z| ; GPE::GetScreenDimensions
	IMPORT	|?GetClearTypeRGBMasks@GPE@@UAAPAKXZ|	; GPE::GetClearTypeRGBMasks
	IMPORT	|?DisablePrimary@GPE@@UAAHXZ|		; GPE::DisablePrimary
	IMPORT	|?AllocSurface@DDGPE@@UAAJPAPAVDDGPESurf@@PAUDDGPEAllocSurfaceData@@@Z| ; DDGPE::AllocSurface
	IMPORT	|?AllocSurface@OMAPDDGPE@@UAAJPAPAVDDGPESurf@@HHW4EGPEFormat@@W4EDDGPEPixelFormat@@H@Z| ; OMAPDDGPE::AllocSurface
	IMPORT	|?AllocVideoSurface@DDGPE@@UAAJPAU_DDRAWI_DDRAWSURFACE_LCL@@PAUDDGPEAllocSurfaceData@@PAK@Z| ; DDGPE::AllocVideoSurface
	IMPORT	|?AllocVideoSurface@DDGPE@@UAAJPAPAVDDGPESurf@@PAUDDGPEAllocSurfaceData@@PAK@Z| ; DDGPE::AllocVideoSurface
	IMPORT	|?AllocVideoSurface@DDGPE@@UAAJPAU_DDRAWI_DDRAWSURFACE_LCL@@HHW4EGPEFormat@@W4EDDGPEPixelFormat@@PAK@Z| ; DDGPE::AllocVideoSurface
	IMPORT	|?AllocVideoSurface@DDGPE@@UAAJPAPAVDDGPESurf@@HHW4EGPEFormat@@W4EDDGPEPixelFormat@@PAK@Z| ; DDGPE::AllocVideoSurface
	IMPORT	|?AllocBackBuffer@DDGPE@@UAAJPAU_DDRAWI_DDRAWSURFACE_LCL@@@Z| ; DDGPE::AllocBackBuffer
	IMPORT	|?WrapSurface@DDGPE@@UAAJPAU_DDRAWI_DDRAWSURFACE_LCL@@PAUDDGPEAllocSurfaceData@@@Z| ; DDGPE::WrapSurface
	IMPORT	|?WrapSurface@DDGPE@@UAAJPAPAVDDGPESurf@@PAUDDGPEAllocSurfaceData@@@Z| ; DDGPE::WrapSurface
	IMPORT	|?WrapSurface@DDGPE@@UAAJPAU_DDRAWI_DDRAWSURFACE_LCL@@HHW4EGPEFormat@@W4EDDGPEPixelFormat@@PAEH@Z| ; DDGPE::WrapSurface
	IMPORT	|?WrapSurface@DDGPE@@UAAJPAPAVDDGPESurf@@HHW4EGPEFormat@@W4EDDGPEPixelFormat@@PAEH@Z| ; DDGPE::WrapSurface
	IMPORT	|?WrapSurface@DDGPE@@UAAJPAU_DDRAWI_DDRAWSURFACE_LCL@@HHW4EGPEFormat@@W4EDDGPEPixelFormat@@HH@Z| ; DDGPE::WrapSurface
	IMPORT	|?BltPrepare@DDGPE@@UAAJPAUDDGPEBltParms@@@Z| ; DDGPE::BltPrepare
	IMPORT	|?PerformBlt@DDGPE@@UAAJPAUDDGPEBltParms@@@Z| ; DDGPE::PerformBlt
	IMPORT	|?BltExpanded@DDGPE@@UAAJPAVDDGPESurf@@00PBUtagRECT@@1KKK@Z| ; DDGPE::BltExpanded
	IMPORT	|?BltExpanded@DDGPE@@UAAJPAVDDGPESurf@@000PAU_CLIPOBJ@@PAU_XLATEOBJ@@PBUtagRECT@@3KKK@Z| ; DDGPE::BltExpanded
	IMPORT	|?SetVisibleSurface@DDGPE@@UAAXPAVGPESurf@@KH@Z| ; DDGPE::SetVisibleSurface
	IMPORT	|?SetVisibleSurface@DDGPE@@UAAXPAVGPESurf@@H@Z| ; DDGPE::SetVisibleSurface
	IMPORT	|?DetectMode@DDGPE@@UAAJPAKKKW4EGPEFormat@@W4EDDGPEPixelFormat@@PAU_DDPIXELFORMAT@@@Z| ; DDGPE::DetectMode
	IMPORT	|?DetectPixelFormat@DDGPE@@UAAJKPAU_DDPIXELFORMAT@@PAW4EGPEFormat@@PAW4EDDGPEPixelFormat@@@Z| ; DDGPE::DetectPixelFormat
	IMPORT	|?InDisplay@DDGPE@@UAAHXZ|		; DDGPE::InDisplay
	IMPORT	|?SetMode@DDGPE@@UAAJHPAPAUHPALETTE__@@H@Z| ; DDGPE::SetMode
	IMPORT	|?AllocSurface@OMAPDDGPE@@UAAJPAPAVOMAPDDGPESurface@@W4OMAP_DSS_PIXELFORMAT@@HH@Z| ; OMAPDDGPE::AllocSurface

  00028			 AREA	 |.pdata|, PDATA
|$T43295| DCD	|$LN91@OMAPDDGPE|
	DCD	0xc0039a04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FM@NGKLCFKD@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAi?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?5?$AAs?$AAu?$AAr?$AAf@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "U", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e"
	DCB	0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "i", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a", 0x0, "l", 0x0, "i"
	DCB	0x0, "z", 0x0, "e", 0x0, " ", 0x0, "s", 0x0, "u", 0x0, "r"
	DCB	0x0, "f", 0x0, "a", 0x0, "c", 0x0, "e", 0x0, " ", 0x0, "m"
	DCB	0x0, "a", 0x0, "n", 0x0, "a", 0x0, "g", 0x0, "e", 0x0, "r"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FI@DAAEFBJG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAs?$AAu?$AAr?$AAf?$AAa?$AAc@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "U", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e"
	DCB	0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "a", 0x0, "l"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, " ", 0x0, "s", 0x0, "u", 0x0, "r", 0x0, "f", 0x0, "a"
	DCB	0x0, "c", 0x0, "e", 0x0, " ", 0x0, "m", 0x0, "a", 0x0, "n"
	DCB	0x0, "a", 0x0, "g", 0x0, "e", 0x0, "r", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FM@MHAHIEFN@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAi?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?5?$AAD?$AAS?$AAS?$AA?5@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "U", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e"
	DCB	0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "i", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a", 0x0, "l", 0x0, "i"
	DCB	0x0, "z", 0x0, "e", 0x0, " ", 0x0, "D", 0x0, "S", 0x0, "S"
	DCB	0x0, " ", 0x0, "i", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r"
	DCB	0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t", 0x0, "s", 0x0, "!"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EE@LPEPPACB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAi?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?5?$AAL?$AAC?$AAD?$AA?$AN@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "U", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e"
	DCB	0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "i", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a", 0x0, "l", 0x0, "i"
	DCB	0x0, "z", 0x0, "e", 0x0, " ", 0x0, "L", 0x0, "C", 0x0, "D"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GC@IKJCGOEK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAi?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?5?$AAd?$AAi?$AAs?$AAp@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "U", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e"
	DCB	0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "i", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a", 0x0, "l", 0x0, "i"
	DCB	0x0, "z", 0x0, "e", 0x0, " ", 0x0, "d", 0x0, "i", 0x0, "s"
	DCB	0x0, "p", 0x0, "l", 0x0, "a", 0x0, "y", 0x0, " ", 0x0, "c"
	DCB	0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o", 0x0, "l"
	DCB	0x0, "l", 0x0, "e", 0x0, "r", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FO@GKBABLBK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAd?$AAi?$AAs?$AAp?$AAl?$AAa@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "U", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e"
	DCB	0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "a", 0x0, "l"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, " ", 0x0, "d", 0x0, "i", 0x0, "s", 0x0, "p", 0x0, "l"
	DCB	0x0, "a", 0x0, "y", 0x0, " ", 0x0, "c", 0x0, "o", 0x0, "n"
	DCB	0x0, "t", 0x0, "r", 0x0, "o", 0x0, "l", 0x0, "l", 0x0, "e"
	DCB	0x0, "r", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GG@MOFFINCC@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAa?$AAd?$AAv?$AAe?$AAr?$AAt?$AAi?$AAs?$AAe?$AA?5?$AAd?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "F", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "a", 0x0, "d", 0x0, "v", 0x0, "e", 0x0, "r"
	DCB	0x0, "t", 0x0, "i", 0x0, "s", 0x0, "e", 0x0, " ", 0x0, "d"
	DCB	0x0, "i", 0x0, "s", 0x0, "p", 0x0, "l", 0x0, "a", 0x0, "y"
	DCB	0x0, " ", 0x0, "p", 0x0, "o", 0x0, "w", 0x0, "e", 0x0, "r"
	DCB	0x0, " ", 0x0, "c", 0x0, "l", 0x0, "a", 0x0, "s", 0x0, "s"
	DCB	0x0, " ", 0x0, "'", 0x0, "%", 0x0, "s", 0x0, "'", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FK@NHLAPMED@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAr?$AAe?$AAt?$AAr?$AAi?$AAe?$AAv?$AAe?$AA?5?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "F", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "r", 0x0, "e"
	DCB	0x0, "t", 0x0, "r", 0x0, "i", 0x0, "e", 0x0, "v", 0x0, "e"
	DCB	0x0, " ", 0x0, "m", 0x0, "o", 0x0, "d", 0x0, "u", 0x0, "l"
	DCB	0x0, "e", 0x0, " ", 0x0, "f", 0x0, "i", 0x0, "l", 0x0, "e"
	DCB	0x0, " ", 0x0, "n", 0x0, "a", 0x0, "m", 0x0, "e", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HC@GOHHDCGP@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAc?$AAo?$AAn?$AAv?$AAe?$AAr?$AAt?$AA?5?$AAd?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAp?$AAo@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "F", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "c", 0x0, "o", 0x0, "n", 0x0, "v", 0x0, "e"
	DCB	0x0, "r", 0x0, "t", 0x0, " ", 0x0, "d", 0x0, "i", 0x0, "s"
	DCB	0x0, "p", 0x0, "l", 0x0, "a", 0x0, "y", 0x0, " ", 0x0, "p"
	DCB	0x0, "o", 0x0, "w", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, "c"
	DCB	0x0, "l", 0x0, "a", 0x0, "s", 0x0, "s", 0x0, " ", 0x0, "'"
	DCB	0x0, "%", 0x0, "s", 0x0, "'", 0x0, " ", 0x0, "t", 0x0, "o"
	DCB	0x0, " ", 0x0, "G", 0x0, "U", 0x0, "I", 0x0, "D", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EO@BHDHHEGO@?$AA?$HL?$AAE?$AAB?$AA9?$AA1?$AAC?$AA7?$AAC?$AA9?$AA?9?$AA8?$AAB?$AAF?$AA6?$AA?9?$AA4?$AAa?$AA2?$AAd?$AA?9?$AA9?$AAA?$AAB?$AA8?$AA?9?$AA6?$AA9?$AA7?$AA2?$AA4?$AAE?$AAE@| DCB "{"
	DCB	0x0, "E", 0x0, "B", 0x0, "9", 0x0, "1", 0x0, "C", 0x0, "7"
	DCB	0x0, "C", 0x0, "9", 0x0, "-", 0x0, "8", 0x0, "B", 0x0, "F"
	DCB	0x0, "6", 0x0, "-", 0x0, "4", 0x0, "a", 0x0, "2", 0x0, "d"
	DCB	0x0, "-", 0x0, "9", 0x0, "A", 0x0, "B", 0x0, "8", 0x0, "-"
	DCB	0x0, "6", 0x0, "9", 0x0, "7", 0x0, "2", 0x0, "4", 0x0, "E"
	DCB	0x0, "E", 0x0, "D", 0x0, "9", 0x0, "7", 0x0, "D", 0x0, "1"
	DCB	0x0, "}", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@GLGGGNMB@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?$AN?$AA?6?$AA?$AA@| DCB "O"
	DCB	0x0, "M", 0x0, "A", 0x0, "P", 0x0, "D", 0x0, "D", 0x0, "G"
	DCB	0x0, "P", 0x0, "E", 0x0, ":", 0x0, ":", 0x0, "O", 0x0, "M"
	DCB	0x0, "A", 0x0, "P", 0x0, "D", 0x0, "D", 0x0, "G", 0x0, "P"
	DCB	0x0, "E", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_7OMAPDDGPE@@6B@| DCD |??_EOMAPDDGPE@@UAAPAXI@Z|	; OMAPDDGPE::`vftable'
	DCD	|?BltPrepare@OMAPDDGPE@@UAAJPAUGPEBltParms@@@Z|
	DCD	|?BltComplete@OMAPDDGPE@@UAAJPAUGPEBltParms@@@Z|
	DCD	|?Line@OMAPDDGPE@@UAAJPAUGPELineParms@@W4EGPEPhase@@@Z|
	DCD	|?AllocSurface@OMAPDDGPE@@UAAJPAPAVGPESurf@@HHW4EGPEFormat@@H@Z|
	DCD	|?SetPointerShape@OMAPDDGPE@@UAAJPAVGPESurf@@0HHHH@Z|
	DCD	|?MovePointer@OMAPDDGPE@@UAAJHH@Z|
	DCD	|?SetPalette@OMAPDDGPE@@UAAJPBUtagPALETTEENTRY@@GG@Z|
	DCD	|?GetPalette@GPE@@UAAJPAPAUtagPALETTEENTRY@@PAG@Z|
	DCD	|?GetModeInfo@OMAPDDGPE@@UAAJPAUGPEMode@@H@Z|
	DCD	|?NumModes@OMAPDDGPE@@UAAHXZ|
	DCD	|?SetMode@OMAPDDGPE@@UAAJHPAPAUHPALETTE__@@@Z|
	DCD	|?InVBlank@OMAPDDGPE@@UAAHXZ|
	DCD	|?IsPaletteSettable@GPE@@UAAHXZ|
	DCD	|?ContrastControl@GPE@@UAAHKPAK@Z|
	DCD	|?PowerHandler@GPE@@UAAXH@Z|
	DCD	|?DrvEscape@OMAPDDGPE@@UAAKPAU_SURFOBJ@@KKPAXK1@Z|
	DCD	|?GetGraphicsCaps@GPE@@UAAKXZ|
	DCD	|?GetPhysicalVideoMemory@GPE@@UAAXPAK0@Z|
	DCD	|?SetVisibleSurface@GPE@@UAAXPAVGPESurf@@@Z|
	DCD	|?FlipInProgress@OMAPDDGPE@@UAAHXZ|
	DCD	|?WaitForVBlank@OMAPDDGPE@@UAAXXZ|
	DCD	|?SurfaceBusyFlipping@GPE@@UAAHPAVGPESurf@@@Z|
	DCD	|?IsBusy@OMAPDDGPE@@UAAHXZ|
	DCD	|?WaitForNotBusy@OMAPDDGPE@@UAAXXZ|
	DCD	|?AvailableVideoMemory@GPE@@UAAKXZ|
	DCD	|?ScanLine@GPE@@UAAHXZ|
	DCD	|?ProcessCommandBlock@GPE@@UAAJPAE@Z|
	DCD	|?GetScreenDimensions@GPE@@UAAHPAUGPEScreenProps@@@Z|
	DCD	|?GetClearTypeRGBMasks@GPE@@UAAPAKXZ|
	DCD	|?DisablePrimary@GPE@@UAAHXZ|
	DCD	|?AllocSurface@DDGPE@@UAAJPAPAVDDGPESurf@@PAUDDGPEAllocSurfaceData@@@Z|
	DCD	|?AllocSurface@OMAPDDGPE@@UAAJPAPAVDDGPESurf@@HHW4EGPEFormat@@W4EDDGPEPixelFormat@@H@Z|
	DCD	|?AllocVideoSurface@DDGPE@@UAAJPAU_DDRAWI_DDRAWSURFACE_LCL@@PAUDDGPEAllocSurfaceData@@PAK@Z|
	DCD	|?AllocVideoSurface@DDGPE@@UAAJPAPAVDDGPESurf@@PAUDDGPEAllocSurfaceData@@PAK@Z|
	DCD	|?AllocVideoSurface@DDGPE@@UAAJPAU_DDRAWI_DDRAWSURFACE_LCL@@HHW4EGPEFormat@@W4EDDGPEPixelFormat@@PAK@Z|
	DCD	|?AllocVideoSurface@DDGPE@@UAAJPAPAVDDGPESurf@@HHW4EGPEFormat@@W4EDDGPEPixelFormat@@PAK@Z|
	DCD	|?AllocBackBuffer@DDGPE@@UAAJPAU_DDRAWI_DDRAWSURFACE_LCL@@@Z|
	DCD	|?WrapSurface@DDGPE@@UAAJPAU_DDRAWI_DDRAWSURFACE_LCL@@PAUDDGPEAllocSurfaceData@@@Z|
	DCD	|?WrapSurface@DDGPE@@UAAJPAPAVDDGPESurf@@PAUDDGPEAllocSurfaceData@@@Z|
	DCD	|?WrapSurface@DDGPE@@UAAJPAU_DDRAWI_DDRAWSURFACE_LCL@@HHW4EGPEFormat@@W4EDDGPEPixelFormat@@PAEH@Z|
	DCD	|?WrapSurface@DDGPE@@UAAJPAPAVDDGPESurf@@HHW4EGPEFormat@@W4EDDGPEPixelFormat@@PAEH@Z|
	DCD	|?WrapSurface@DDGPE@@UAAJPAU_DDRAWI_DDRAWSURFACE_LCL@@HHW4EGPEFormat@@W4EDDGPEPixelFormat@@HH@Z|
	DCD	|?BltPrepare@DDGPE@@UAAJPAUDDGPEBltParms@@@Z|
	DCD	|?PerformBlt@DDGPE@@UAAJPAUDDGPEBltParms@@@Z|
	DCD	|?BltExpanded@DDGPE@@UAAJPAVDDGPESurf@@00PBUtagRECT@@1KKK@Z|
	DCD	|?BltExpanded@DDGPE@@UAAJPAVDDGPESurf@@000PAU_CLIPOBJ@@PAU_XLATEOBJ@@PBUtagRECT@@3KKK@Z|
	DCD	|?SetVisibleSurface@DDGPE@@UAAXPAVGPESurf@@KH@Z|
	DCD	|?SetVisibleSurface@DDGPE@@UAAXPAVGPESurf@@H@Z|
	DCD	|?DetectMode@DDGPE@@UAAJPAKKKW4EGPEFormat@@W4EDDGPEPixelFormat@@PAU_DDPIXELFORMAT@@@Z|
	DCD	|?DetectPixelFormat@DDGPE@@UAAJKPAU_DDPIXELFORMAT@@PAW4EGPEFormat@@PAW4EDDGPEPixelFormat@@@Z|
	DCD	|?GetPhysicalModeId@DDGPE@@UAAKXZ|
	DCD	|?InDisplay@DDGPE@@UAAHXZ|
	DCD	|?GetModeInfoEx@OMAPDDGPE@@UAAJPAUGPEModeEx@@H@Z|
	DCD	|?SetMode@DDGPE@@UAAJHPAPAUHPALETTE__@@H@Z|
	DCD	|?GetDriverData@DDGPE@@UAAPAUDDGPEDriverData@@XZ|
	DCD	|?SetDriverData@DDGPE@@UAAXPAUDDGPEDriverData@@@Z|
	DCD	|?GetPrimaryPixelFormat@OMAPDDGPE@@UAA?AW4OMAP_DSS_PIXELFORMAT@@XZ|
	DCD	|?GetMasks@OMAPDDGPE@@UAAPAKXZ|
	DCD	|?Lock@OMAPDDGPE@@UAAXXZ|
	DCD	|?Unlock@OMAPDDGPE@@UAAXXZ|
	DCD	|?AllocSurface@OMAPDDGPE@@UAAJPAPAVOMAPDDGPESurface@@W4OMAP_DSS_PIXELFORMAT@@HH@Z|
	DCD	|?DDHALInfo@OMAPDDGPE@@UAAXPAU_DDHALINFO@@K@Z|

  00000			 AREA	 |.xdata|, DATA
|$T43291| DCD	0xfffffee0
; Function compile flags: /Odtp

  00344			 AREA	 |.text|, CODE, ARM

  00344	00000000	 DCD         |__GSHandlerCheck|
  00348	00000000	 DCD         |$T43291|

  0034c		 |??0OMAPDDGPE@@QAA@XZ| PROC		; OMAPDDGPE::OMAPDDGPE

; 246  : {

  0034c		 |$LN91@OMAPDDGPE|
  0034c	e1a0c00d	 mov         r12, sp
  00350	e92d0001	 stmdb       sp!, {r0}
  00354	e92d5000	 stmdb       sp!, {r12, lr}
  00358	e24dde37	 sub         sp, sp, #0x37, 28
  0035c		 |$M43292|
  0035c	e59f3e4c	 ldr         r3, [pc, #0xE4C]
  00360	e5933000	 ldr         r3, [r3]
  00364	e58d325c	 str         r3, [sp, #0x25C]
  00368	e59d0378	 ldr         r0, [sp, #0x378]
  0036c	eb000000	 bl          |??0DDGPE@@QAA@XZ|
  00370	e58d0264	 str         r0, [sp, #0x264]
  00374	e59f2e30	 ldr         r2, [pc, #0xE30]
  00378	e59d3378	 ldr         r3, [sp, #0x378]
  0037c	e5832000	 str         r2, [r3]

; 247  :     GUID    guid;
; 248  :     DWORD   dwWidth,
; 249  :             dwHeight;
; 250  :     TCHAR   szTemp[MAX_PATH];
; 251  : 
; 252  :     DEBUGMSG(GPE_ZONE_INIT,(TEXT("OMAPDDGPE::OMAPDDGPE\r\n")));

  00380	e59f3df4	 ldr         r3, [pc, #0xDF4]
  00384	e5933440	 ldr         r3, [r3, #0x440]
  00388	e3130020	 tst         r3, #0x20
  0038c	0a000004	 beq         |$LN24@OMAPDDGPE|
  00390	e59f0e10	 ldr         r0, [pc, #0xE10]
  00394	eb000000	 bl          NKDbgPrintfW
  00398	e3a03001	 mov         r3, #1
  0039c	e58d3268	 str         r3, [sp, #0x268]
  003a0	ea000001	 b           |$LN25@OMAPDDGPE|
  003a4		 |$LN24@OMAPDDGPE|
  003a4	e3a03000	 mov         r3, #0
  003a8	e58d3268	 str         r3, [sp, #0x268]
  003ac		 |$LN25@OMAPDDGPE|

; 253  : 
; 254  : 
; 255  :     //  No overlay surfaces enabled
; 256  :     m_pOverlay1Surf = NULL;

  003ac	e59d3378	 ldr         r3, [sp, #0x378]
  003b0	e28320c0	 add         r2, r3, #0xC0
  003b4	e3a03000	 mov         r3, #0
  003b8	e5823000	 str         r3, [r2]

; 257  :     m_pOverlay2Surf = NULL;

  003bc	e59d3378	 ldr         r3, [sp, #0x378]
  003c0	e28320c4	 add         r2, r3, #0xC4
  003c4	e3a03000	 mov         r3, #0
  003c8	e5823000	 str         r3, [r2]

; 258  : 
; 259  :     //  No TV out surface
; 260  :     m_pTVSurf = NULL;

  003cc	e59d3378	 ldr         r3, [sp, #0x378]
  003d0	e2832f42	 add         r2, r3, #0x42, 30
  003d4	e3a03000	 mov         r3, #0
  003d8	e5823000	 str         r3, [r2]

; 261  : 
; 262  :     //  No GAPI game surface
; 263  :     m_bGameEnable = FALSE;

  003dc	e59d3378	 ldr         r3, [sp, #0x378]
  003e0	e2832f4e	 add         r2, r3, #0x4E, 30
  003e4	e3a03000	 mov         r3, #0
  003e8	e5823000	 str         r3, [r2]

; 264  :     m_bGameScale  = TRUE;

  003ec	e59d3378	 ldr         r3, [sp, #0x378]
  003f0	e2832f4f	 add         r2, r3, #0x4F, 30
  003f4	e3a03001	 mov         r3, #1
  003f8	e5823000	 str         r3, [r2]

; 265  :     m_pGameSurf   = NULL;

  003fc	e59d3378	 ldr         r3, [sp, #0x378]
  00400	e2832d05	 add         r2, r3, #5, 26
  00404	e3a03000	 mov         r3, #0
  00408	e5823000	 str         r3, [r2]

; 266  :     
; 267  :     m_bHdmiEnable = FALSE;

  0040c	e59d3378	 ldr         r3, [sp, #0x378]
  00410	e2832f51	 add         r2, r3, #0x51, 30
  00414	e3a03000	 mov         r3, #0
  00418	e5823000	 str         r3, [r2]

; 268  :     //  Defaults for TV Out settings
; 269  :     m_eTVPipeline           = OMAP_DSS_PIPELINE_VIDEO2;

  0041c	e59d3378	 ldr         r3, [sp, #0x378]
  00420	e2832f43	 add         r2, r3, #0x43, 30
  00424	e3a03002	 mov         r3, #2
  00428	e5823000	 str         r3, [r2]

; 270  : 
; 271  : 
; 272  :     // Convert display power class to GUID
; 273  :     if (!ConvertStringToGuid(PMCLASS_DISPLAY, &guid))

  0042c	e28d1000	 add         r1, sp, #0
  00430	e59f0d6c	 ldr         r0, [pc, #0xD6C]
  00434	eb000000	 bl          |?ConvertStringToGuid@@YAHPBGPAU_GUID@@@Z|
  00438	e58d026c	 str         r0, [sp, #0x26C]
  0043c	e59d326c	 ldr         r3, [sp, #0x26C]
  00440	e3530000	 cmp         r3, #0
  00444	1a00000b	 bne         |$LN21@OMAPDDGPE|

; 274  :     {
; 275  :         DEBUGMSG(GPE_ZONE_ERROR, (L"ERROR: Failed convert display power class '%s' to GUID\r\n"));

  00448	e59f3d2c	 ldr         r3, [pc, #0xD2C]
  0044c	e5933440	 ldr         r3, [r3, #0x440]
  00450	e3130001	 tst         r3, #1
  00454	0a000004	 beq         |$LN26@OMAPDDGPE|
  00458	e59f0d40	 ldr         r0, [pc, #0xD40]
  0045c	eb000000	 bl          NKDbgPrintfW
  00460	e3a03001	 mov         r3, #1
  00464	e58d3270	 str         r3, [sp, #0x270]
  00468	ea000001	 b           |$LN27@OMAPDDGPE|
  0046c		 |$LN26@OMAPDDGPE|
  0046c	e3a03000	 mov         r3, #0
  00470	e58d3270	 str         r3, [sp, #0x270]
  00474		 |$LN27@OMAPDDGPE|

; 276  :         return;

  00474	ea000336	 b           |$LN22@OMAPDDGPE|
  00478		 |$LN21@OMAPDDGPE|

; 277  :     }
; 278  : 
; 279  : 	// Get module's file name
; 280  : 	if (!GetModuleFileName(g_hmodDisplayDll, szTemp, sizeof(szTemp) / sizeof(szTemp[0])))

  00478	e3a02f41	 mov         r2, #0x41, 30
  0047c	e28d1018	 add         r1, sp, #0x18
  00480	e59f3d14	 ldr         r3, [pc, #0xD14]
  00484	e5930000	 ldr         r0, [r3]
  00488	eb000000	 bl          GetModuleFileNameW
  0048c	e58d0274	 str         r0, [sp, #0x274]
  00490	e59d3274	 ldr         r3, [sp, #0x274]
  00494	e3530000	 cmp         r3, #0
  00498	1a00000b	 bne         |$LN20@OMAPDDGPE|

; 281  : 	{
; 282  :         DEBUGMSG(GPE_ZONE_ERROR, (L"ERROR: Failed to retrieve module file name\r\n"));

  0049c	e59f3cd8	 ldr         r3, [pc, #0xCD8]
  004a0	e5933440	 ldr         r3, [r3, #0x440]
  004a4	e3130001	 tst         r3, #1
  004a8	0a000004	 beq         |$LN28@OMAPDDGPE|
  004ac	e59f0ce4	 ldr         r0, [pc, #0xCE4]
  004b0	eb000000	 bl          NKDbgPrintfW
  004b4	e3a03001	 mov         r3, #1
  004b8	e58d3278	 str         r3, [sp, #0x278]
  004bc	ea000001	 b           |$LN29@OMAPDDGPE|
  004c0		 |$LN28@OMAPDDGPE|
  004c0	e3a03000	 mov         r3, #0
  004c4	e58d3278	 str         r3, [sp, #0x278]
  004c8		 |$LN29@OMAPDDGPE|

; 283  :         return;

  004c8	ea000321	 b           |$LN22@OMAPDDGPE|
  004cc		 |$LN20@OMAPDDGPE|

; 284  : 	}
; 285  : 
; 286  :     // Advertise power class interface
; 287  :     if (!AdvertiseInterface(&guid, szTemp, TRUE))

  004cc	e3a02001	 mov         r2, #1
  004d0	e28d1018	 add         r1, sp, #0x18
  004d4	e28d0000	 add         r0, sp, #0
  004d8	eb000000	 bl          AdvertiseInterface
  004dc	e58d027c	 str         r0, [sp, #0x27C]
  004e0	e59d327c	 ldr         r3, [sp, #0x27C]
  004e4	e3530000	 cmp         r3, #0
  004e8	1a00000b	 bne         |$LN19@OMAPDDGPE|

; 288  :     {
; 289  :         DEBUGMSG(GPE_ZONE_ERROR, (L"ERROR: Failed advertise display power class '%s'\r\n"));

  004ec	e59f3c88	 ldr         r3, [pc, #0xC88]
  004f0	e5933440	 ldr         r3, [r3, #0x440]
  004f4	e3130001	 tst         r3, #1
  004f8	0a000004	 beq         |$LN30@OMAPDDGPE|
  004fc	e59f0c90	 ldr         r0, [pc, #0xC90]
  00500	eb000000	 bl          NKDbgPrintfW
  00504	e3a03001	 mov         r3, #1
  00508	e58d3280	 str         r3, [sp, #0x280]
  0050c	ea000001	 b           |$LN31@OMAPDDGPE|
  00510		 |$LN30@OMAPDDGPE|
  00510	e3a03000	 mov         r3, #0
  00514	e58d3280	 str         r3, [sp, #0x280]
  00518		 |$LN31@OMAPDDGPE|

; 290  :         return;

  00518	ea00030d	 b           |$LN22@OMAPDDGPE|
  0051c		 |$LN19@OMAPDDGPE|

; 291  :     }
; 292  : 
; 293  : 
; 294  :     //  Allocate display controller
; 295  :     m_pDisplayContr = new OMAPDisplayController();

  0051c	e3a00c05	 mov         r0, #5, 24
  00520	e380003c	 orr         r0, r0, #0x3C
  00524	eb000000	 bl          |??2@YAPAXI@Z|
  00528	e58d0284	 str         r0, [sp, #0x284]
  0052c	e59d3284	 ldr         r3, [sp, #0x284]
  00530	e58d3220	 str         r3, [sp, #0x220]
  00534	e59d3220	 ldr         r3, [sp, #0x220]
  00538	e3530000	 cmp         r3, #0
  0053c	0a000005	 beq         |$LN32@OMAPDDGPE|
  00540	e59d0220	 ldr         r0, [sp, #0x220]
  00544	eb000000	 bl          |??0OMAPDisplayController@@QAA@XZ|
  00548	e58d0288	 str         r0, [sp, #0x288]
  0054c	e59d3288	 ldr         r3, [sp, #0x288]
  00550	e58d328c	 str         r3, [sp, #0x28C]
  00554	ea000001	 b           |$LN33@OMAPDDGPE|
  00558		 |$LN32@OMAPDDGPE|
  00558	e3a03000	 mov         r3, #0
  0055c	e58d328c	 str         r3, [sp, #0x28C]
  00560		 |$LN33@OMAPDDGPE|
  00560	e59d3378	 ldr         r3, [sp, #0x378]
  00564	e28320b0	 add         r2, r3, #0xB0
  00568	e59d328c	 ldr         r3, [sp, #0x28C]
  0056c	e5823000	 str         r3, [r2]

; 296  :     if (m_pDisplayContr == NULL)

  00570	e59d3378	 ldr         r3, [sp, #0x378]
  00574	e28330b0	 add         r3, r3, #0xB0
  00578	e5933000	 ldr         r3, [r3]
  0057c	e3530000	 cmp         r3, #0
  00580	1a00000b	 bne         |$LN18@OMAPDDGPE|

; 297  :     {
; 298  :         DEBUGMSG (GPE_ZONE_ERROR, (L"ERROR: Unable to allocate display controller\r\n"));

  00584	e59f3bf0	 ldr         r3, [pc, #0xBF0]
  00588	e5933440	 ldr         r3, [r3, #0x440]
  0058c	e3130001	 tst         r3, #1
  00590	0a000004	 beq         |$LN34@OMAPDDGPE|
  00594	e59f0bf4	 ldr         r0, [pc, #0xBF4]
  00598	eb000000	 bl          NKDbgPrintfW
  0059c	e3a03001	 mov         r3, #1
  005a0	e58d3290	 str         r3, [sp, #0x290]
  005a4	ea000001	 b           |$LN35@OMAPDDGPE|
  005a8		 |$LN34@OMAPDDGPE|
  005a8	e3a03000	 mov         r3, #0
  005ac	e58d3290	 str         r3, [sp, #0x290]
  005b0		 |$LN35@OMAPDDGPE|

; 299  :         return;

  005b0	ea0002e7	 b           |$LN22@OMAPDDGPE|
  005b4		 |$LN18@OMAPDDGPE|

; 300  :     }
; 301  : 
; 302  :     // Is resize using ISP resizer enabled?
; 303  :     m_bDssIspRszEnabled = (g_Globals.m_dwDssIspRszEnabled) ? TRUE : FALSE; 

  005b4	e59f3bb8	 ldr         r3, [pc, #0xBB8]
  005b8	e593324c	 ldr         r3, [r3, #0x24C]
  005bc	e3530000	 cmp         r3, #0
  005c0	0a000002	 beq         |$LN36@OMAPDDGPE|
  005c4	e3a03001	 mov         r3, #1
  005c8	e58d3294	 str         r3, [sp, #0x294]
  005cc	ea000001	 b           |$LN37@OMAPDDGPE|
  005d0		 |$LN36@OMAPDDGPE|
  005d0	e3a03000	 mov         r3, #0
  005d4	e58d3294	 str         r3, [sp, #0x294]
  005d8		 |$LN37@OMAPDDGPE|
  005d8	e59d3378	 ldr         r3, [sp, #0x378]
  005dc	e2832f52	 add         r2, r3, #0x52, 30
  005e0	e59d3294	 ldr         r3, [sp, #0x294]
  005e4	e5823000	 str         r3, [r2]

; 304  : 
; 305  :     //  Initial settings for DVI
; 306  :     m_bDVIEnable = LcdPdd_DVI_Enabled();

  005e8	eb000000	 bl          LcdPdd_DVI_Enabled
  005ec	e58d0298	 str         r0, [sp, #0x298]
  005f0	e59d3378	 ldr         r3, [sp, #0x378]
  005f4	e2832e13	 add         r2, r3, #0x13, 28
  005f8	e59d3298	 ldr         r3, [sp, #0x298]
  005fc	e5823000	 str         r3, [r2]

; 307  :     m_pDisplayContr->DVISelect(m_bDVIEnable);

  00600	e59d3378	 ldr         r3, [sp, #0x378]
  00604	e2833e13	 add         r3, r3, #0x13, 28
  00608	e5931000	 ldr         r1, [r3]
  0060c	e59d3378	 ldr         r3, [sp, #0x378]
  00610	e28330b0	 add         r3, r3, #0xB0
  00614	e5930000	 ldr         r0, [r3]
  00618	eb000000	 bl          |?DVISelect@OMAPDisplayController@@QAAHH@Z|

; 308  :     
; 309  :     //  Setting for Gamma Correction
; 310  :     m_bEnableGammaCorr = (g_Globals.m_dwEnableGammaCorr) ? TRUE : FALSE;

  0061c	e59f3b50	 ldr         r3, [pc, #0xB50]
  00620	e5933240	 ldr         r3, [r3, #0x240]
  00624	e3530000	 cmp         r3, #0
  00628	0a000002	 beq         |$LN38@OMAPDDGPE|
  0062c	e3a03001	 mov         r3, #1
  00630	e58d329c	 str         r3, [sp, #0x29C]
  00634	ea000001	 b           |$LN39@OMAPDDGPE|
  00638		 |$LN38@OMAPDDGPE|
  00638	e3a03000	 mov         r3, #0
  0063c	e58d329c	 str         r3, [sp, #0x29C]
  00640		 |$LN39@OMAPDDGPE|
  00640	e59d3378	 ldr         r3, [sp, #0x378]
  00644	e2832f4d	 add         r2, r3, #0x4D, 30
  00648	e59d329c	 ldr         r3, [sp, #0x29C]
  0064c	e5823000	 str         r3, [r2]

; 311  : 
; 312  :     //  Initialize the controller
; 313  :     if( m_pDisplayContr->InitController(m_bEnableGammaCorr, g_Globals.m_dwEnableWaitForVerticalBlank,m_bDssIspRszEnabled) == FALSE )

  00650	e59d3378	 ldr         r3, [sp, #0x378]
  00654	e2833f52	 add         r3, r3, #0x52, 30
  00658	e5933000	 ldr         r3, [r3]
  0065c	e59f2b10	 ldr         r2, [pc, #0xB10]
  00660	e5922244	 ldr         r2, [r2, #0x244]
  00664	e59d1378	 ldr         r1, [sp, #0x378]
  00668	e2811f4d	 add         r1, r1, #0x4D, 30
  0066c	e5911000	 ldr         r1, [r1]
  00670	e59d0378	 ldr         r0, [sp, #0x378]
  00674	e28000b0	 add         r0, r0, #0xB0
  00678	e5900000	 ldr         r0, [r0]
  0067c	eb000000	 bl          |?InitController@OMAPDisplayController@@QAAHHHH@Z|
  00680	e58d02a0	 str         r0, [sp, #0x2A0]
  00684	e59d32a0	 ldr         r3, [sp, #0x2A0]
  00688	e3530000	 cmp         r3, #0
  0068c	1a000025	 bne         |$LN17@OMAPDDGPE|

; 314  :     {
; 315  :         DEBUGMSG (GPE_ZONE_ERROR, (L"ERROR: Unable to initialize display controller\r\n"));

  00690	e59f3ae4	 ldr         r3, [pc, #0xAE4]
  00694	e5933440	 ldr         r3, [r3, #0x440]
  00698	e3130001	 tst         r3, #1
  0069c	0a000004	 beq         |$LN40@OMAPDDGPE|
  006a0	e59f0ae4	 ldr         r0, [pc, #0xAE4]
  006a4	eb000000	 bl          NKDbgPrintfW
  006a8	e3a03001	 mov         r3, #1
  006ac	e58d32a4	 str         r3, [sp, #0x2A4]
  006b0	ea000001	 b           |$LN41@OMAPDDGPE|
  006b4		 |$LN40@OMAPDDGPE|
  006b4	e3a03000	 mov         r3, #0
  006b8	e58d32a4	 str         r3, [sp, #0x2A4]
  006bc		 |$LN41@OMAPDDGPE|

; 316  :         delete m_pDisplayContr;

  006bc	e59d3378	 ldr         r3, [sp, #0x378]
  006c0	e28330b0	 add         r3, r3, #0xB0
  006c4	e5933000	 ldr         r3, [r3]
  006c8	e58d3228	 str         r3, [sp, #0x228]
  006cc	e59d3228	 ldr         r3, [sp, #0x228]
  006d0	e58d3224	 str         r3, [sp, #0x224]
  006d4	e59d3224	 ldr         r3, [sp, #0x224]
  006d8	e3530000	 cmp         r3, #0
  006dc	0a00000a	 beq         |$LN42@OMAPDDGPE|
  006e0	e3a01001	 mov         r1, #1
  006e4	e59d3224	 ldr         r3, [sp, #0x224]
  006e8	e5933000	 ldr         r3, [r3]
  006ec	e59d0224	 ldr         r0, [sp, #0x224]
  006f0	e5933000	 ldr         r3, [r3]
  006f4	e1a0e00f	 mov         lr, pc
  006f8	e12fff13	 bx          r3
  006fc	e58d02a8	 str         r0, [sp, #0x2A8]
  00700	e59d32a8	 ldr         r3, [sp, #0x2A8]
  00704	e58d32ac	 str         r3, [sp, #0x2AC]
  00708	ea000001	 b           |$LN43@OMAPDDGPE|
  0070c		 |$LN42@OMAPDDGPE|
  0070c	e3a03000	 mov         r3, #0
  00710	e58d32ac	 str         r3, [sp, #0x2AC]
  00714		 |$LN43@OMAPDDGPE|

; 317  :         m_pDisplayContr = NULL;

  00714	e59d3378	 ldr         r3, [sp, #0x378]
  00718	e28320b0	 add         r2, r3, #0xB0
  0071c	e3a03000	 mov         r3, #0
  00720	e5823000	 str         r3, [r2]

; 318  :         return;

  00724	ea00028a	 b           |$LN22@OMAPDDGPE|
  00728		 |$LN17@OMAPDDGPE|

; 319  :     }
; 320  : 
; 321  :     //  Initialize the LCD
; 322  :     if( m_pDisplayContr->InitLCD() == FALSE )

  00728	e59d3378	 ldr         r3, [sp, #0x378]
  0072c	e28330b0	 add         r3, r3, #0xB0
  00730	e5930000	 ldr         r0, [r3]
  00734	eb000000	 bl          |?InitLCD@OMAPDisplayController@@QAAHXZ|
  00738	e58d02b0	 str         r0, [sp, #0x2B0]
  0073c	e59d32b0	 ldr         r3, [sp, #0x2B0]
  00740	e3530000	 cmp         r3, #0
  00744	1a000025	 bne         |$LN16@OMAPDDGPE|

; 323  :     {
; 324  :         DEBUGMSG (GPE_ZONE_ERROR, (L"ERROR: Unable to initialize LCD\r\n"));

  00748	e59f3a2c	 ldr         r3, [pc, #0xA2C]
  0074c	e5933440	 ldr         r3, [r3, #0x440]
  00750	e3130001	 tst         r3, #1
  00754	0a000004	 beq         |$LN44@OMAPDDGPE|
  00758	e59f0a28	 ldr         r0, [pc, #0xA28]
  0075c	eb000000	 bl          NKDbgPrintfW
  00760	e3a03001	 mov         r3, #1
  00764	e58d32b4	 str         r3, [sp, #0x2B4]
  00768	ea000001	 b           |$LN45@OMAPDDGPE|
  0076c		 |$LN44@OMAPDDGPE|
  0076c	e3a03000	 mov         r3, #0
  00770	e58d32b4	 str         r3, [sp, #0x2B4]
  00774		 |$LN45@OMAPDDGPE|

; 325  :         delete m_pDisplayContr;

  00774	e59d3378	 ldr         r3, [sp, #0x378]
  00778	e28330b0	 add         r3, r3, #0xB0
  0077c	e5933000	 ldr         r3, [r3]
  00780	e58d3230	 str         r3, [sp, #0x230]
  00784	e59d3230	 ldr         r3, [sp, #0x230]
  00788	e58d322c	 str         r3, [sp, #0x22C]
  0078c	e59d322c	 ldr         r3, [sp, #0x22C]
  00790	e3530000	 cmp         r3, #0
  00794	0a00000a	 beq         |$LN46@OMAPDDGPE|
  00798	e3a01001	 mov         r1, #1
  0079c	e59d322c	 ldr         r3, [sp, #0x22C]
  007a0	e5933000	 ldr         r3, [r3]
  007a4	e59d022c	 ldr         r0, [sp, #0x22C]
  007a8	e5933000	 ldr         r3, [r3]
  007ac	e1a0e00f	 mov         lr, pc
  007b0	e12fff13	 bx          r3
  007b4	e58d02b8	 str         r0, [sp, #0x2B8]
  007b8	e59d32b8	 ldr         r3, [sp, #0x2B8]
  007bc	e58d32bc	 str         r3, [sp, #0x2BC]
  007c0	ea000001	 b           |$LN47@OMAPDDGPE|
  007c4		 |$LN46@OMAPDDGPE|
  007c4	e3a03000	 mov         r3, #0
  007c8	e58d32bc	 str         r3, [sp, #0x2BC]
  007cc		 |$LN47@OMAPDDGPE|

; 326  :         m_pDisplayContr = NULL;

  007cc	e59d3378	 ldr         r3, [sp, #0x378]
  007d0	e28320b0	 add         r2, r3, #0xB0
  007d4	e3a03000	 mov         r3, #0
  007d8	e5823000	 str         r3, [r2]

; 327  :         return;

  007dc	ea00025c	 b           |$LN22@OMAPDDGPE|
  007e0		 |$LN16@OMAPDDGPE|

; 328  :     }
; 329  : 
; 330  :     //  Initialize the DSS interrupt handler
; 331  :     if( m_pDisplayContr->InitInterrupts(g_Globals.m_dwDSSIRQ, g_Globals.m_dwISTPriority) == FALSE )

  007e0	e59f398c	 ldr         r3, [pc, #0x98C]
  007e4	e593223c	 ldr         r2, [r3, #0x23C]
  007e8	e59f3984	 ldr         r3, [pc, #0x984]
  007ec	e5931238	 ldr         r1, [r3, #0x238]
  007f0	e59d3378	 ldr         r3, [sp, #0x378]
  007f4	e28330b0	 add         r3, r3, #0xB0
  007f8	e5930000	 ldr         r0, [r3]
  007fc	eb000000	 bl          |?InitInterrupts@OMAPDisplayController@@QAAHKK@Z|
  00800	e58d02c0	 str         r0, [sp, #0x2C0]
  00804	e59d32c0	 ldr         r3, [sp, #0x2C0]
  00808	e3530000	 cmp         r3, #0
  0080c	1a000025	 bne         |$LN15@OMAPDDGPE|

; 332  :     {
; 333  :         DEBUGMSG (GPE_ZONE_ERROR, (L"ERROR: Unable to initialize DSS interrupts!\r\n"));

  00810	e59f3964	 ldr         r3, [pc, #0x964]
  00814	e5933440	 ldr         r3, [r3, #0x440]
  00818	e3130001	 tst         r3, #1
  0081c	0a000004	 beq         |$LN48@OMAPDDGPE|
  00820	e59f095c	 ldr         r0, [pc, #0x95C]
  00824	eb000000	 bl          NKDbgPrintfW
  00828	e3a03001	 mov         r3, #1
  0082c	e58d32c4	 str         r3, [sp, #0x2C4]
  00830	ea000001	 b           |$LN49@OMAPDDGPE|
  00834		 |$LN48@OMAPDDGPE|
  00834	e3a03000	 mov         r3, #0
  00838	e58d32c4	 str         r3, [sp, #0x2C4]
  0083c		 |$LN49@OMAPDDGPE|

; 334  :         delete m_pDisplayContr;

  0083c	e59d3378	 ldr         r3, [sp, #0x378]
  00840	e28330b0	 add         r3, r3, #0xB0
  00844	e5933000	 ldr         r3, [r3]
  00848	e58d3238	 str         r3, [sp, #0x238]
  0084c	e59d3238	 ldr         r3, [sp, #0x238]
  00850	e58d3234	 str         r3, [sp, #0x234]
  00854	e59d3234	 ldr         r3, [sp, #0x234]
  00858	e3530000	 cmp         r3, #0
  0085c	0a00000a	 beq         |$LN50@OMAPDDGPE|
  00860	e3a01001	 mov         r1, #1
  00864	e59d3234	 ldr         r3, [sp, #0x234]
  00868	e5933000	 ldr         r3, [r3]
  0086c	e59d0234	 ldr         r0, [sp, #0x234]
  00870	e5933000	 ldr         r3, [r3]
  00874	e1a0e00f	 mov         lr, pc
  00878	e12fff13	 bx          r3
  0087c	e58d02c8	 str         r0, [sp, #0x2C8]
  00880	e59d32c8	 ldr         r3, [sp, #0x2C8]
  00884	e58d32cc	 str         r3, [sp, #0x2CC]
  00888	ea000001	 b           |$LN51@OMAPDDGPE|
  0088c		 |$LN50@OMAPDDGPE|
  0088c	e3a03000	 mov         r3, #0
  00890	e58d32cc	 str         r3, [sp, #0x2CC]
  00894		 |$LN51@OMAPDDGPE|

; 335  :         m_pDisplayContr = NULL;

  00894	e59d3378	 ldr         r3, [sp, #0x378]
  00898	e28320b0	 add         r2, r3, #0xB0
  0089c	e3a03000	 mov         r3, #0
  008a0	e5823000	 str         r3, [r2]

; 336  :         return;

  008a4	ea00022a	 b           |$LN22@OMAPDDGPE|
  008a8		 |$LN15@OMAPDDGPE|

; 337  :     }
; 338  : 
; 339  :     //  Allocate and intialize surface memory manager
; 340  :     switch( g_Globals.m_dwSurfaceMgr )

  008a8	e59f38c4	 ldr         r3, [pc, #0x8C4]
  008ac	e5933000	 ldr         r3, [r3]
  008b0	e58d32d0	 str         r3, [sp, #0x2D0]
  008b4	e59d32d0	 ldr         r3, [sp, #0x2D0]
  008b8	e3530000	 cmp         r3, #0
  008bc	0a000003	 beq         |$LN12@OMAPDDGPE|
  008c0	e59d32d0	 ldr         r3, [sp, #0x2D0]
  008c4	e3530001	 cmp         r3, #1
  008c8	0a000015	 beq         |$LN11@OMAPDDGPE|
  008cc	ea000029	 b           |$LN10@OMAPDDGPE|
  008d0		 |$LN12@OMAPDDGPE|

; 341  :     {
; 342  :         case SURFACEMGR_FLAT:
; 343  :     m_pSurfaceMgr = new OMAPFlatSurfaceManager();

  008d0	e3a00020	 mov         r0, #0x20
  008d4	eb000000	 bl          |??2@YAPAXI@Z|
  008d8	e58d02d4	 str         r0, [sp, #0x2D4]
  008dc	e59d32d4	 ldr         r3, [sp, #0x2D4]
  008e0	e58d323c	 str         r3, [sp, #0x23C]
  008e4	e59d323c	 ldr         r3, [sp, #0x23C]
  008e8	e3530000	 cmp         r3, #0
  008ec	0a000005	 beq         |$LN52@OMAPDDGPE|
  008f0	e59d023c	 ldr         r0, [sp, #0x23C]
  008f4	eb000000	 bl          |??0OMAPFlatSurfaceManager@@QAA@XZ|
  008f8	e58d02d8	 str         r0, [sp, #0x2D8]
  008fc	e59d32d8	 ldr         r3, [sp, #0x2D8]
  00900	e58d32dc	 str         r3, [sp, #0x2DC]
  00904	ea000001	 b           |$LN53@OMAPDDGPE|
  00908		 |$LN52@OMAPDDGPE|
  00908	e3a03000	 mov         r3, #0
  0090c	e58d32dc	 str         r3, [sp, #0x2DC]
  00910		 |$LN53@OMAPDDGPE|
  00910	e59d3378	 ldr         r3, [sp, #0x378]
  00914	e28320b4	 add         r2, r3, #0xB4
  00918	e59d32dc	 ldr         r3, [sp, #0x2DC]
  0091c	e5823000	 str         r3, [r2]

; 344  :             break;

  00920	ea000018	 b           |$LN13@OMAPDDGPE|
  00924		 |$LN11@OMAPDDGPE|

; 345  : 
; 346  :         case SURFACEMGR_VRFB:
; 347  :             m_pSurfaceMgr = new OMAPVrfbSurfaceManager();

  00924	e3a00024	 mov         r0, #0x24
  00928	eb000000	 bl          |??2@YAPAXI@Z|
  0092c	e58d02e0	 str         r0, [sp, #0x2E0]
  00930	e59d32e0	 ldr         r3, [sp, #0x2E0]
  00934	e58d3240	 str         r3, [sp, #0x240]
  00938	e59d3240	 ldr         r3, [sp, #0x240]
  0093c	e3530000	 cmp         r3, #0
  00940	0a000005	 beq         |$LN54@OMAPDDGPE|
  00944	e59d0240	 ldr         r0, [sp, #0x240]
  00948	eb000000	 bl          |??0OMAPVrfbSurfaceManager@@QAA@XZ|
  0094c	e58d02e4	 str         r0, [sp, #0x2E4]
  00950	e59d32e4	 ldr         r3, [sp, #0x2E4]
  00954	e58d32e8	 str         r3, [sp, #0x2E8]
  00958	ea000001	 b           |$LN55@OMAPDDGPE|
  0095c		 |$LN54@OMAPDDGPE|
  0095c	e3a03000	 mov         r3, #0
  00960	e58d32e8	 str         r3, [sp, #0x2E8]
  00964		 |$LN55@OMAPDDGPE|
  00964	e59d3378	 ldr         r3, [sp, #0x378]
  00968	e28320b4	 add         r2, r3, #0xB4
  0096c	e59d32e8	 ldr         r3, [sp, #0x2E8]
  00970	e5823000	 str         r3, [r2]

; 348  :             break;

  00974	ea000003	 b           |$LN13@OMAPDDGPE|
  00978		 |$LN10@OMAPDDGPE|

; 349  : 
; 350  :         default:
; 351  :             m_pSurfaceMgr = NULL;

  00978	e59d3378	 ldr         r3, [sp, #0x378]
  0097c	e28320b4	 add         r2, r3, #0xB4
  00980	e3a03000	 mov         r3, #0
  00984	e5823000	 str         r3, [r2]
  00988		 |$LN13@OMAPDDGPE|

; 352  :             break;
; 353  :     }
; 354  : 
; 355  :     if (m_pSurfaceMgr == NULL)

  00988	e59d3378	 ldr         r3, [sp, #0x378]
  0098c	e28330b4	 add         r3, r3, #0xB4
  00990	e5933000	 ldr         r3, [r3]
  00994	e3530000	 cmp         r3, #0
  00998	1a000025	 bne         |$LN9@OMAPDDGPE|

; 356  :     {
; 357  :         DEBUGMSG (GPE_ZONE_ERROR, (L"ERROR: Unable to allocate surface manager\r\n"));

  0099c	e59f37d8	 ldr         r3, [pc, #0x7D8]
  009a0	e5933440	 ldr         r3, [r3, #0x440]
  009a4	e3130001	 tst         r3, #1
  009a8	0a000004	 beq         |$LN56@OMAPDDGPE|
  009ac	e59f07cc	 ldr         r0, [pc, #0x7CC]
  009b0	eb000000	 bl          NKDbgPrintfW
  009b4	e3a03001	 mov         r3, #1
  009b8	e58d32ec	 str         r3, [sp, #0x2EC]
  009bc	ea000001	 b           |$LN57@OMAPDDGPE|
  009c0		 |$LN56@OMAPDDGPE|
  009c0	e3a03000	 mov         r3, #0
  009c4	e58d32ec	 str         r3, [sp, #0x2EC]
  009c8		 |$LN57@OMAPDDGPE|

; 358  :         delete m_pDisplayContr;

  009c8	e59d3378	 ldr         r3, [sp, #0x378]
  009cc	e28330b0	 add         r3, r3, #0xB0
  009d0	e5933000	 ldr         r3, [r3]
  009d4	e58d3248	 str         r3, [sp, #0x248]
  009d8	e59d3248	 ldr         r3, [sp, #0x248]
  009dc	e58d3244	 str         r3, [sp, #0x244]
  009e0	e59d3244	 ldr         r3, [sp, #0x244]
  009e4	e3530000	 cmp         r3, #0
  009e8	0a00000a	 beq         |$LN58@OMAPDDGPE|
  009ec	e3a01001	 mov         r1, #1
  009f0	e59d3244	 ldr         r3, [sp, #0x244]
  009f4	e5933000	 ldr         r3, [r3]
  009f8	e59d0244	 ldr         r0, [sp, #0x244]
  009fc	e5933000	 ldr         r3, [r3]
  00a00	e1a0e00f	 mov         lr, pc
  00a04	e12fff13	 bx          r3
  00a08	e58d02f0	 str         r0, [sp, #0x2F0]
  00a0c	e59d32f0	 ldr         r3, [sp, #0x2F0]
  00a10	e58d32f4	 str         r3, [sp, #0x2F4]
  00a14	ea000001	 b           |$LN59@OMAPDDGPE|
  00a18		 |$LN58@OMAPDDGPE|
  00a18	e3a03000	 mov         r3, #0
  00a1c	e58d32f4	 str         r3, [sp, #0x2F4]
  00a20		 |$LN59@OMAPDDGPE|

; 359  :         m_pDisplayContr = NULL;

  00a20	e59d3378	 ldr         r3, [sp, #0x378]
  00a24	e28320b0	 add         r2, r3, #0xB0
  00a28	e3a03000	 mov         r3, #0
  00a2c	e5823000	 str         r3, [r2]

; 360  :         return;

  00a30	ea0001c7	 b           |$LN22@OMAPDDGPE|
  00a34		 |$LN9@OMAPDDGPE|

; 361  :     }
; 362  : 
; 363  :     if( m_pSurfaceMgr->Initialize(g_Globals.m_dwOffscreenMemory) == FALSE )

  00a34	e59f3738	 ldr         r3, [pc, #0x738]
  00a38	e5931008	 ldr         r1, [r3, #8]
  00a3c	e59d3378	 ldr         r3, [sp, #0x378]
  00a40	e28330b4	 add         r3, r3, #0xB4
  00a44	e5932000	 ldr         r2, [r3]
  00a48	e59d3378	 ldr         r3, [sp, #0x378]
  00a4c	e28330b4	 add         r3, r3, #0xB4
  00a50	e5930000	 ldr         r0, [r3]
  00a54	e5923000	 ldr         r3, [r2]
  00a58	e2833004	 add         r3, r3, #4
  00a5c	e5933000	 ldr         r3, [r3]
  00a60	e1a0e00f	 mov         lr, pc
  00a64	e12fff13	 bx          r3
  00a68	e58d02f8	 str         r0, [sp, #0x2F8]
  00a6c	e59d32f8	 ldr         r3, [sp, #0x2F8]
  00a70	e3530000	 cmp         r3, #0
  00a74	1a00003f	 bne         |$LN8@OMAPDDGPE|

; 364  :     {
; 365  :         DEBUGMSG (GPE_ZONE_ERROR, (L"ERROR: Unable to initialize surface manager\r\n"));

  00a78	e59f36fc	 ldr         r3, [pc, #0x6FC]
  00a7c	e5933440	 ldr         r3, [r3, #0x440]
  00a80	e3130001	 tst         r3, #1
  00a84	0a000004	 beq         |$LN60@OMAPDDGPE|
  00a88	e59f06e8	 ldr         r0, [pc, #0x6E8]
  00a8c	eb000000	 bl          NKDbgPrintfW
  00a90	e3a03001	 mov         r3, #1
  00a94	e58d32fc	 str         r3, [sp, #0x2FC]
  00a98	ea000001	 b           |$LN61@OMAPDDGPE|
  00a9c		 |$LN60@OMAPDDGPE|
  00a9c	e3a03000	 mov         r3, #0
  00aa0	e58d32fc	 str         r3, [sp, #0x2FC]
  00aa4		 |$LN61@OMAPDDGPE|

; 366  :         delete m_pDisplayContr;

  00aa4	e59d3378	 ldr         r3, [sp, #0x378]
  00aa8	e28330b0	 add         r3, r3, #0xB0
  00aac	e5933000	 ldr         r3, [r3]
  00ab0	e58d3250	 str         r3, [sp, #0x250]
  00ab4	e59d3250	 ldr         r3, [sp, #0x250]
  00ab8	e58d324c	 str         r3, [sp, #0x24C]
  00abc	e59d324c	 ldr         r3, [sp, #0x24C]
  00ac0	e3530000	 cmp         r3, #0
  00ac4	0a00000a	 beq         |$LN62@OMAPDDGPE|
  00ac8	e3a01001	 mov         r1, #1
  00acc	e59d324c	 ldr         r3, [sp, #0x24C]
  00ad0	e5933000	 ldr         r3, [r3]
  00ad4	e59d024c	 ldr         r0, [sp, #0x24C]
  00ad8	e5933000	 ldr         r3, [r3]
  00adc	e1a0e00f	 mov         lr, pc
  00ae0	e12fff13	 bx          r3
  00ae4	e58d0300	 str         r0, [sp, #0x300]
  00ae8	e59d3300	 ldr         r3, [sp, #0x300]
  00aec	e58d3304	 str         r3, [sp, #0x304]
  00af0	ea000001	 b           |$LN63@OMAPDDGPE|
  00af4		 |$LN62@OMAPDDGPE|
  00af4	e3a03000	 mov         r3, #0
  00af8	e58d3304	 str         r3, [sp, #0x304]
  00afc		 |$LN63@OMAPDDGPE|

; 367  :         delete m_pSurfaceMgr;

  00afc	e59d3378	 ldr         r3, [sp, #0x378]
  00b00	e28330b4	 add         r3, r3, #0xB4
  00b04	e5933000	 ldr         r3, [r3]
  00b08	e58d3258	 str         r3, [sp, #0x258]
  00b0c	e59d3258	 ldr         r3, [sp, #0x258]
  00b10	e58d3254	 str         r3, [sp, #0x254]
  00b14	e59d3254	 ldr         r3, [sp, #0x254]
  00b18	e3530000	 cmp         r3, #0
  00b1c	0a00000a	 beq         |$LN64@OMAPDDGPE|
  00b20	e3a01001	 mov         r1, #1
  00b24	e59d3254	 ldr         r3, [sp, #0x254]
  00b28	e5933000	 ldr         r3, [r3]
  00b2c	e59d0254	 ldr         r0, [sp, #0x254]
  00b30	e5933000	 ldr         r3, [r3]
  00b34	e1a0e00f	 mov         lr, pc
  00b38	e12fff13	 bx          r3
  00b3c	e58d0308	 str         r0, [sp, #0x308]
  00b40	e59d3308	 ldr         r3, [sp, #0x308]
  00b44	e58d330c	 str         r3, [sp, #0x30C]
  00b48	ea000001	 b           |$LN65@OMAPDDGPE|
  00b4c		 |$LN64@OMAPDDGPE|
  00b4c	e3a03000	 mov         r3, #0
  00b50	e58d330c	 str         r3, [sp, #0x30C]
  00b54		 |$LN65@OMAPDDGPE|

; 368  :         m_pDisplayContr = NULL;

  00b54	e59d3378	 ldr         r3, [sp, #0x378]
  00b58	e28320b0	 add         r2, r3, #0xB0
  00b5c	e3a03000	 mov         r3, #0
  00b60	e5823000	 str         r3, [r2]

; 369  :         m_pSurfaceMgr = NULL;

  00b64	e59d3378	 ldr         r3, [sp, #0x378]
  00b68	e28320b4	 add         r2, r3, #0xB4
  00b6c	e3a03000	 mov         r3, #0
  00b70	e5823000	 str         r3, [r2]

; 370  :         return;

  00b74	ea000176	 b           |$LN22@OMAPDDGPE|
  00b78		 |$LN8@OMAPDDGPE|

; 371  :     }
; 372  : 
; 373  : 
; 374  :     //  Associate the surface manager with the display controller
; 375  :     m_pDisplayContr->SetSurfaceMgr( m_pSurfaceMgr );

  00b78	e59d3378	 ldr         r3, [sp, #0x378]
  00b7c	e28330b4	 add         r3, r3, #0xB4
  00b80	e5931000	 ldr         r1, [r3]
  00b84	e59d3378	 ldr         r3, [sp, #0x378]
  00b88	e28330b0	 add         r3, r3, #0xB0
  00b8c	e5930000	 ldr         r0, [r3]
  00b90	eb000000	 bl          |?SetSurfaceMgr@OMAPDisplayController@@QAAHPAVOMAPSurfaceManager@@@Z|

; 376  : 
; 377  :     //  Initial settings for TV out
; 378  :     m_bTVOutEnable          = (g_Globals.m_dwTVOutEnable) ? TRUE : FALSE;

  00b94	e59f35d8	 ldr         r3, [pc, #0x5D8]
  00b98	e5933214	 ldr         r3, [r3, #0x214]
  00b9c	e3530000	 cmp         r3, #0
  00ba0	0a000002	 beq         |$LN66@OMAPDDGPE|
  00ba4	e3a03001	 mov         r3, #1
  00ba8	e58d3310	 str         r3, [sp, #0x310]
  00bac	ea000001	 b           |$LN67@OMAPDDGPE|
  00bb0		 |$LN66@OMAPDDGPE|
  00bb0	e3a03000	 mov         r3, #0
  00bb4	e58d3310	 str         r3, [sp, #0x310]
  00bb8		 |$LN67@OMAPDDGPE|
  00bb8	e59d3378	 ldr         r3, [sp, #0x378]
  00bbc	e2832e11	 add         r2, r3, #0x11, 28
  00bc0	e59d3310	 ldr         r3, [sp, #0x310]
  00bc4	e5823000	 str         r3, [r2]

; 379  :     m_dwTvOut_FilterLevel   = (g_Globals.m_dwTvOut_FilterLevel <= TVOUT_SETTINGS_MAX_FILTER) ? g_Globals.m_dwTvOut_FilterLevel : TVOUT_SETTINGS_MAX_FILTER;

  00bc8	e59f35a4	 ldr         r3, [pc, #0x5A4]
  00bcc	e5933218	 ldr         r3, [r3, #0x218]
  00bd0	e3530000	 cmp         r3, #0
  00bd4	8a000003	 bhi         |$LN68@OMAPDDGPE|
  00bd8	e59f3594	 ldr         r3, [pc, #0x594]
  00bdc	e5933218	 ldr         r3, [r3, #0x218]
  00be0	e58d3314	 str         r3, [sp, #0x314]
  00be4	ea000001	 b           |$LN69@OMAPDDGPE|
  00be8		 |$LN68@OMAPDDGPE|
  00be8	e3a03000	 mov         r3, #0
  00bec	e58d3314	 str         r3, [sp, #0x314]
  00bf0		 |$LN69@OMAPDDGPE|
  00bf0	e59d3378	 ldr         r3, [sp, #0x378]
  00bf4	e2832f45	 add         r2, r3, #0x45, 30
  00bf8	e59d3314	 ldr         r3, [sp, #0x314]
  00bfc	e5823000	 str         r3, [r2]

; 380  :     m_dwTvOut_AspectRatio_W = (g_Globals.m_dwTvOut_AspectRatio_W > 0) ? g_Globals.m_dwTvOut_AspectRatio_W : 1;

  00c00	e59f356c	 ldr         r3, [pc, #0x56C]
  00c04	e593321c	 ldr         r3, [r3, #0x21C]
  00c08	e3530000	 cmp         r3, #0
  00c0c	9a000003	 bls         |$LN70@OMAPDDGPE|
  00c10	e59f355c	 ldr         r3, [pc, #0x55C]
  00c14	e593321c	 ldr         r3, [r3, #0x21C]
  00c18	e58d3318	 str         r3, [sp, #0x318]
  00c1c	ea000001	 b           |$LN71@OMAPDDGPE|
  00c20		 |$LN70@OMAPDDGPE|
  00c20	e3a03001	 mov         r3, #1
  00c24	e58d3318	 str         r3, [sp, #0x318]
  00c28		 |$LN71@OMAPDDGPE|
  00c28	e59d3378	 ldr         r3, [sp, #0x378]
  00c2c	e2832f46	 add         r2, r3, #0x46, 30
  00c30	e59d3318	 ldr         r3, [sp, #0x318]
  00c34	e5823000	 str         r3, [r2]

; 381  :     m_dwTvOut_AspectRatio_H = (g_Globals.m_dwTvOut_AspectRatio_H > 0) ? g_Globals.m_dwTvOut_AspectRatio_H : 1;

  00c38	e59f3534	 ldr         r3, [pc, #0x534]
  00c3c	e5933220	 ldr         r3, [r3, #0x220]
  00c40	e3530000	 cmp         r3, #0
  00c44	9a000003	 bls         |$LN72@OMAPDDGPE|
  00c48	e59f3524	 ldr         r3, [pc, #0x524]
  00c4c	e5933220	 ldr         r3, [r3, #0x220]
  00c50	e58d331c	 str         r3, [sp, #0x31C]
  00c54	ea000001	 b           |$LN73@OMAPDDGPE|
  00c58		 |$LN72@OMAPDDGPE|
  00c58	e3a03001	 mov         r3, #1
  00c5c	e58d331c	 str         r3, [sp, #0x31C]
  00c60		 |$LN73@OMAPDDGPE|
  00c60	e59d3378	 ldr         r3, [sp, #0x378]
  00c64	e2832f47	 add         r2, r3, #0x47, 30
  00c68	e59d331c	 ldr         r3, [sp, #0x31C]
  00c6c	e5823000	 str         r3, [r2]

; 382  :     m_dwTvOut_Resize_W      = (g_Globals.m_dwTvOut_Resize_W  <= TVOUT_SETTINGS_MAX_RESIZE) ? g_Globals.m_dwTvOut_Resize_W : TVOUT_SETTINGS_MAX_RESIZE;

  00c70	e59f34fc	 ldr         r3, [pc, #0x4FC]
  00c74	e5933224	 ldr         r3, [r3, #0x224]
  00c78	e3530064	 cmp         r3, #0x64
  00c7c	8a000003	 bhi         |$LN74@OMAPDDGPE|
  00c80	e59f34ec	 ldr         r3, [pc, #0x4EC]
  00c84	e5933224	 ldr         r3, [r3, #0x224]
  00c88	e58d3320	 str         r3, [sp, #0x320]
  00c8c	ea000001	 b           |$LN75@OMAPDDGPE|
  00c90		 |$LN74@OMAPDDGPE|
  00c90	e3a03064	 mov         r3, #0x64
  00c94	e58d3320	 str         r3, [sp, #0x320]
  00c98		 |$LN75@OMAPDDGPE|
  00c98	e59d3378	 ldr         r3, [sp, #0x378]
  00c9c	e2832e12	 add         r2, r3, #0x12, 28
  00ca0	e59d3320	 ldr         r3, [sp, #0x320]
  00ca4	e5823000	 str         r3, [r2]

; 383  :     m_dwTvOut_Resize_W      = (g_Globals.m_dwTvOut_Resize_W  >= TVOUT_SETTINGS_MIN_RESIZE) ? g_Globals.m_dwTvOut_Resize_W : TVOUT_SETTINGS_MIN_RESIZE;

  00ca8	e59f34c4	 ldr         r3, [pc, #0x4C4]
  00cac	e5933224	 ldr         r3, [r3, #0x224]
  00cb0	e3530050	 cmp         r3, #0x50
  00cb4	3a000003	 bcc         |$LN76@OMAPDDGPE|
  00cb8	e59f34b4	 ldr         r3, [pc, #0x4B4]
  00cbc	e5933224	 ldr         r3, [r3, #0x224]
  00cc0	e58d3324	 str         r3, [sp, #0x324]
  00cc4	ea000001	 b           |$LN77@OMAPDDGPE|
  00cc8		 |$LN76@OMAPDDGPE|
  00cc8	e3a03050	 mov         r3, #0x50
  00ccc	e58d3324	 str         r3, [sp, #0x324]
  00cd0		 |$LN77@OMAPDDGPE|
  00cd0	e59d3378	 ldr         r3, [sp, #0x378]
  00cd4	e2832e12	 add         r2, r3, #0x12, 28
  00cd8	e59d3324	 ldr         r3, [sp, #0x324]
  00cdc	e5823000	 str         r3, [r2]

; 384  :     m_dwTvOut_Resize_H      = (g_Globals.m_dwTvOut_Resize_H  <= TVOUT_SETTINGS_MAX_RESIZE) ? g_Globals.m_dwTvOut_Resize_H : TVOUT_SETTINGS_MAX_RESIZE;

  00ce0	e59f348c	 ldr         r3, [pc, #0x48C]
  00ce4	e5933228	 ldr         r3, [r3, #0x228]
  00ce8	e3530064	 cmp         r3, #0x64
  00cec	8a000003	 bhi         |$LN78@OMAPDDGPE|
  00cf0	e59f347c	 ldr         r3, [pc, #0x47C]
  00cf4	e5933228	 ldr         r3, [r3, #0x228]
  00cf8	e58d3328	 str         r3, [sp, #0x328]
  00cfc	ea000001	 b           |$LN79@OMAPDDGPE|
  00d00		 |$LN78@OMAPDDGPE|
  00d00	e3a03064	 mov         r3, #0x64
  00d04	e58d3328	 str         r3, [sp, #0x328]
  00d08		 |$LN79@OMAPDDGPE|
  00d08	e59d3378	 ldr         r3, [sp, #0x378]
  00d0c	e2832f49	 add         r2, r3, #0x49, 30
  00d10	e59d3328	 ldr         r3, [sp, #0x328]
  00d14	e5823000	 str         r3, [r2]

; 385  :     m_dwTvOut_Resize_H      = (g_Globals.m_dwTvOut_Resize_H  >= TVOUT_SETTINGS_MIN_RESIZE) ? g_Globals.m_dwTvOut_Resize_H : TVOUT_SETTINGS_MIN_RESIZE;

  00d18	e59f3454	 ldr         r3, [pc, #0x454]
  00d1c	e5933228	 ldr         r3, [r3, #0x228]
  00d20	e3530050	 cmp         r3, #0x50
  00d24	3a000003	 bcc         |$LN80@OMAPDDGPE|
  00d28	e59f3444	 ldr         r3, [pc, #0x444]
  00d2c	e5933228	 ldr         r3, [r3, #0x228]
  00d30	e58d332c	 str         r3, [sp, #0x32C]
  00d34	ea000001	 b           |$LN81@OMAPDDGPE|
  00d38		 |$LN80@OMAPDDGPE|
  00d38	e3a03050	 mov         r3, #0x50
  00d3c	e58d332c	 str         r3, [sp, #0x32C]
  00d40		 |$LN81@OMAPDDGPE|
  00d40	e59d3378	 ldr         r3, [sp, #0x378]
  00d44	e2832f49	 add         r2, r3, #0x49, 30
  00d48	e59d332c	 ldr         r3, [sp, #0x32C]
  00d4c	e5823000	 str         r3, [r2]

; 386  :     m_lTvOut_Offset_W       = g_Globals.m_lTvOut_Offset_W;      

  00d50	e59d3378	 ldr         r3, [sp, #0x378]
  00d54	e2832f4a	 add         r2, r3, #0x4A, 30
  00d58	e59f3414	 ldr         r3, [pc, #0x414]
  00d5c	e593322c	 ldr         r3, [r3, #0x22C]
  00d60	e5823000	 str         r3, [r2]

; 387  :     m_lTvOut_Offset_H       = g_Globals.m_lTvOut_Offset_H;      

  00d64	e59d3378	 ldr         r3, [sp, #0x378]
  00d68	e2832f4b	 add         r2, r3, #0x4B, 30
  00d6c	e59f3400	 ldr         r3, [pc, #0x400]
  00d70	e5933230	 ldr         r3, [r3, #0x230]
  00d74	e5823000	 str         r3, [r2]

; 388  :     
; 389  :     //  Check for initial screen orientation
; 390  :     if( m_pSurfaceMgr->SupportsRotation() == TRUE )

  00d78	e59d3378	 ldr         r3, [sp, #0x378]
  00d7c	e28330b4	 add         r3, r3, #0xB4
  00d80	e5932000	 ldr         r2, [r3]
  00d84	e59d3378	 ldr         r3, [sp, #0x378]
  00d88	e28330b4	 add         r3, r3, #0xB4
  00d8c	e5930000	 ldr         r0, [r3]
  00d90	e5923000	 ldr         r3, [r2]
  00d94	e2833020	 add         r3, r3, #0x20
  00d98	e5933000	 ldr         r3, [r3]
  00d9c	e1a0e00f	 mov         lr, pc
  00da0	e12fff13	 bx          r3
  00da4	e58d0330	 str         r0, [sp, #0x330]
  00da8	e59d3330	 ldr         r3, [sp, #0x330]
  00dac	e3530001	 cmp         r3, #1
  00db0	1a00004d	 bne         |$LN7@OMAPDDGPE|

; 391  :     {
; 392  :         //  Set initial rotation angle
; 393  :         switch( g_Globals.m_dwRotationAngle )

  00db4	e59f33b8	 ldr         r3, [pc, #0x3B8]
  00db8	e5933004	 ldr         r3, [r3, #4]
  00dbc	e58d3334	 str         r3, [sp, #0x334]
  00dc0	e59d3334	 ldr         r3, [sp, #0x334]
  00dc4	e3530004	 cmp         r3, #4
  00dc8	8a000031	 bhi         |$LN2@OMAPDDGPE|
  00dcc	e59d2334	 ldr         r2, [sp, #0x334]
  00dd0	e1a03102	 mov         r3, r2, lsl #2
  00dd4	e083300f	 add         r3, r3, pc
  00dd8	e5933004	 ldr         r3, [r3, #4]
  00ddc	e08ff003	 add         pc, pc, r3
  00de0		 |$LN83@OMAPDDGPE|
  00de0		 |$LN82@OMAPDDGPE|
  00de0		 |$LN84@OMAPDDGPE|
  00de0	00000010	 DCD         0x10
  00de4		 |$LN85@OMAPDDGPE|
  00de4	00000060	 DCD         0x60
  00de8		 |$LN86@OMAPDDGPE|
  00de8	00000010	 DCD         0x10
  00dec		 |$LN87@OMAPDDGPE|
  00dec	000000b0	 DCD         0xb0
  00df0		 |$LN88@OMAPDDGPE|
  00df0	00000060	 DCD         0x60
  00df4		 |$LN4@OMAPDDGPE|

; 394  :         {
; 395  :             case DMDO_0:
; 396  :             case DMDO_180:
; 397  :                 //  Valid rotation values
; 398  :                 m_iGraphicsRotate = g_Globals.m_dwRotationAngle;

  00df4	e59d3378	 ldr         r3, [sp, #0x378]
  00df8	e2832098	 add         r2, r3, #0x98
  00dfc	e59f3370	 ldr         r3, [pc, #0x370]
  00e00	e5933004	 ldr         r3, [r3, #4]
  00e04	e5823000	 str         r3, [r2]

; 399  :                 dwWidth  = m_pDisplayContr->GetLCDWidth();

  00e08	e59d3378	 ldr         r3, [sp, #0x378]
  00e0c	e28330b0	 add         r3, r3, #0xB0
  00e10	e5930000	 ldr         r0, [r3]
  00e14	eb000000	 bl          |?GetLCDWidth@OMAPDisplayController@@QAAKXZ|
  00e18	e58d0338	 str         r0, [sp, #0x338]
  00e1c	e59d3338	 ldr         r3, [sp, #0x338]
  00e20	e58d3014	 str         r3, [sp, #0x14]

; 400  :                 dwHeight = m_pDisplayContr->GetLCDHeight();

  00e24	e59d3378	 ldr         r3, [sp, #0x378]
  00e28	e28330b0	 add         r3, r3, #0xB0
  00e2c	e5930000	 ldr         r0, [r3]
  00e30	eb000000	 bl          |?GetLCDHeight@OMAPDisplayController@@QAAKXZ|
  00e34	e58d033c	 str         r0, [sp, #0x33C]
  00e38	e59d333c	 ldr         r3, [sp, #0x33C]
  00e3c	e58d3010	 str         r3, [sp, #0x10]

; 401  :                 break;

  00e40	ea000028	 b           |$LN5@OMAPDDGPE|
  00e44		 |$LN3@OMAPDDGPE|

; 402  : 
; 403  :             case DMDO_90:
; 404  :             case DMDO_270:
; 405  :                 //  Valid rotation values
; 406  :                 m_iGraphicsRotate = g_Globals.m_dwRotationAngle;

  00e44	e59d3378	 ldr         r3, [sp, #0x378]
  00e48	e2832098	 add         r2, r3, #0x98
  00e4c	e59f3320	 ldr         r3, [pc, #0x320]
  00e50	e5933004	 ldr         r3, [r3, #4]
  00e54	e5823000	 str         r3, [r2]

; 407  :                 dwWidth  = m_pDisplayContr->GetLCDHeight();

  00e58	e59d3378	 ldr         r3, [sp, #0x378]
  00e5c	e28330b0	 add         r3, r3, #0xB0
  00e60	e5930000	 ldr         r0, [r3]
  00e64	eb000000	 bl          |?GetLCDHeight@OMAPDisplayController@@QAAKXZ|
  00e68	e58d0340	 str         r0, [sp, #0x340]
  00e6c	e59d3340	 ldr         r3, [sp, #0x340]
  00e70	e58d3014	 str         r3, [sp, #0x14]

; 408  :                 dwHeight = m_pDisplayContr->GetLCDWidth();

  00e74	e59d3378	 ldr         r3, [sp, #0x378]
  00e78	e28330b0	 add         r3, r3, #0xB0
  00e7c	e5930000	 ldr         r0, [r3]
  00e80	eb000000	 bl          |?GetLCDWidth@OMAPDisplayController@@QAAKXZ|
  00e84	e58d0344	 str         r0, [sp, #0x344]
  00e88	e59d3344	 ldr         r3, [sp, #0x344]
  00e8c	e58d3010	 str         r3, [sp, #0x10]

; 409  :                 break;

  00e90	ea000014	 b           |$LN5@OMAPDDGPE|
  00e94		 |$LN2@OMAPDDGPE|

; 410  :                 
; 411  :             default:
; 412  :                 //  Default to angle 0                
; 413  :                 m_iGraphicsRotate = DMDO_0;

  00e94	e59d3378	 ldr         r3, [sp, #0x378]
  00e98	e2832098	 add         r2, r3, #0x98
  00e9c	e3a03000	 mov         r3, #0
  00ea0	e5823000	 str         r3, [r2]

; 414  :                 g_Globals.m_dwRotationAngle = DMDO_0;

  00ea4	e59f22c8	 ldr         r2, [pc, #0x2C8]
  00ea8	e3a03000	 mov         r3, #0
  00eac	e5823004	 str         r3, [r2, #4]

; 415  :                 dwWidth  = m_pDisplayContr->GetLCDWidth();

  00eb0	e59d3378	 ldr         r3, [sp, #0x378]
  00eb4	e28330b0	 add         r3, r3, #0xB0
  00eb8	e5930000	 ldr         r0, [r3]
  00ebc	eb000000	 bl          |?GetLCDWidth@OMAPDisplayController@@QAAKXZ|
  00ec0	e58d0348	 str         r0, [sp, #0x348]
  00ec4	e59d3348	 ldr         r3, [sp, #0x348]
  00ec8	e58d3014	 str         r3, [sp, #0x14]

; 416  :                 dwHeight = m_pDisplayContr->GetLCDHeight();

  00ecc	e59d3378	 ldr         r3, [sp, #0x378]
  00ed0	e28330b0	 add         r3, r3, #0xB0
  00ed4	e5930000	 ldr         r0, [r3]
  00ed8	eb000000	 bl          |?GetLCDHeight@OMAPDisplayController@@QAAKXZ|
  00edc	e58d034c	 str         r0, [sp, #0x34C]
  00ee0	e59d334c	 ldr         r3, [sp, #0x34C]
  00ee4	e58d3010	 str         r3, [sp, #0x10]
  00ee8		 |$LN5@OMAPDDGPE|

; 417  :                 break;
; 418  :         }
; 419  :     }
; 420  :     else

  00ee8	ea000014	 b           |$LN1@OMAPDDGPE|
  00eec		 |$LN7@OMAPDDGPE|

; 421  :     {
; 422  :         //  Default values for non-rotatable surface managers
; 423  :         m_iGraphicsRotate = DMDO_0;

  00eec	e59d3378	 ldr         r3, [sp, #0x378]
  00ef0	e2832098	 add         r2, r3, #0x98
  00ef4	e3a03000	 mov         r3, #0
  00ef8	e5823000	 str         r3, [r2]

; 424  :         g_Globals.m_dwRotationAngle = DMDO_0;

  00efc	e59f2270	 ldr         r2, [pc, #0x270]
  00f00	e3a03000	 mov         r3, #0
  00f04	e5823004	 str         r3, [r2, #4]

; 425  :         dwWidth  = m_pDisplayContr->GetLCDWidth();

  00f08	e59d3378	 ldr         r3, [sp, #0x378]
  00f0c	e28330b0	 add         r3, r3, #0xB0
  00f10	e5930000	 ldr         r0, [r3]
  00f14	eb000000	 bl          |?GetLCDWidth@OMAPDisplayController@@QAAKXZ|
  00f18	e58d0350	 str         r0, [sp, #0x350]
  00f1c	e59d3350	 ldr         r3, [sp, #0x350]
  00f20	e58d3014	 str         r3, [sp, #0x14]

; 426  :         dwHeight = m_pDisplayContr->GetLCDHeight();

  00f24	e59d3378	 ldr         r3, [sp, #0x378]
  00f28	e28330b0	 add         r3, r3, #0xB0
  00f2c	e5930000	 ldr         r0, [r3]
  00f30	eb000000	 bl          |?GetLCDHeight@OMAPDisplayController@@QAAKXZ|
  00f34	e58d0354	 str         r0, [sp, #0x354]
  00f38	e59d3354	 ldr         r3, [sp, #0x354]
  00f3c	e58d3010	 str         r3, [sp, #0x10]
  00f40		 |$LN1@OMAPDDGPE|

; 427  :     }
; 428  : 
; 429  : 
; 430  :     //  Update GPE attributes to match LCD defaults
; 431  :     m_nScreenWidth  = dwWidth;

  00f40	e59d3378	 ldr         r3, [sp, #0x378]
  00f44	e2832008	 add         r2, r3, #8
  00f48	e59d3014	 ldr         r3, [sp, #0x14]
  00f4c	e5823000	 str         r3, [r2]

; 432  :     m_nScreenHeight = dwHeight;

  00f50	e59d3378	 ldr         r3, [sp, #0x378]
  00f54	e283200c	 add         r2, r3, #0xC
  00f58	e59d3010	 ldr         r3, [sp, #0x10]
  00f5c	e5823000	 str         r3, [r2]

; 433  :     
; 434  :     m_pModeEx = &m_gpeDefaultMode;

  00f60	e59d3378	 ldr         r3, [sp, #0x378]
  00f64	e2832040	 add         r2, r3, #0x40
  00f68	e59d3378	 ldr         r3, [sp, #0x378]
  00f6c	e2833024	 add         r3, r3, #0x24
  00f70	e5832000	 str         r2, [r3]

; 435  :     m_pMode = &m_gpeDefaultMode.modeInfo;

  00f74	e59d3378	 ldr         r3, [sp, #0x378]
  00f78	e2832040	 add         r2, r3, #0x40
  00f7c	e59d3378	 ldr         r3, [sp, #0x378]
  00f80	e2833010	 add         r3, r3, #0x10
  00f84	e5832000	 str         r2, [r3]

; 436  :     memset(m_pModeEx, 0, sizeof(GPEModeEx));

  00f88	e3a02058	 mov         r2, #0x58
  00f8c	e3a01000	 mov         r1, #0
  00f90	e59d3378	 ldr         r3, [sp, #0x378]
  00f94	e2833024	 add         r3, r3, #0x24
  00f98	e5930000	 ldr         r0, [r3]
  00f9c	eb000000	 bl          memset

; 437  :     m_pModeEx->dwSize = sizeof(GPEModeEx);

  00fa0	e59d3378	 ldr         r3, [sp, #0x378]
  00fa4	e2833024	 add         r3, r3, #0x24
  00fa8	e5933000	 ldr         r3, [r3]
  00fac	e2832018	 add         r2, r3, #0x18
  00fb0	e3a03058	 mov         r3, #0x58
  00fb4	e5823000	 str         r3, [r2]

; 438  :     m_pModeEx->dwVersion = GPEMODEEX_CURRENTVERSION;

  00fb8	e59d3378	 ldr         r3, [sp, #0x378]
  00fbc	e2833024	 add         r3, r3, #0x24
  00fc0	e5933000	 ldr         r3, [r3]
  00fc4	e2832020	 add         r2, r3, #0x20
  00fc8	e3a03000	 mov         r3, #0
  00fcc	e5823000	 str         r3, [r2]

; 439  : 
; 440  :     m_pMode->modeId = 0;

  00fd0	e59d3378	 ldr         r3, [sp, #0x378]
  00fd4	e2833010	 add         r3, r3, #0x10
  00fd8	e5932000	 ldr         r2, [r3]
  00fdc	e3a03000	 mov         r3, #0
  00fe0	e5823000	 str         r3, [r2]

; 441  :     m_pMode->width = dwWidth;

  00fe4	e59d3378	 ldr         r3, [sp, #0x378]
  00fe8	e2833010	 add         r3, r3, #0x10
  00fec	e5933000	 ldr         r3, [r3]
  00ff0	e2832004	 add         r2, r3, #4
  00ff4	e59d3014	 ldr         r3, [sp, #0x14]
  00ff8	e5823000	 str         r3, [r2]

; 442  :     m_pMode->height = dwHeight;

  00ffc	e59d3378	 ldr         r3, [sp, #0x378]
  01000	e2833010	 add         r3, r3, #0x10
  01004	e5933000	 ldr         r3, [r3]
  01008	e2832008	 add         r2, r3, #8
  0100c	e59d3010	 ldr         r3, [sp, #0x10]
  01010	e5823000	 str         r3, [r2]

; 443  :     m_pMode->frequency = 60;

  01014	e59d3378	 ldr         r3, [sp, #0x378]
  01018	e2833010	 add         r3, r3, #0x10
  0101c	e5933000	 ldr         r3, [r3]
  01020	e2832010	 add         r2, r3, #0x10
  01024	e3a0303c	 mov         r3, #0x3C
  01028	e5823000	 str         r3, [r2]

; 444  :     m_pMode->Bpp = OMAPDDGPE::PixelFormatToBpp(m_pDisplayContr->GetLCDPixelFormat());

  0102c	e59d3378	 ldr         r3, [sp, #0x378]
  01030	e28330b0	 add         r3, r3, #0xB0
  01034	e5930000	 ldr         r0, [r3]
  01038	eb000000	 bl          |?GetLCDPixelFormat@OMAPDisplayController@@QAA?AW4OMAP_DSS_PIXELFORMAT@@XZ|
  0103c	e58d0358	 str         r0, [sp, #0x358]
  01040	e59d0358	 ldr         r0, [sp, #0x358]
  01044	eb000000	 bl          |?PixelFormatToBpp@OMAPDDGPE@@SAKW4OMAP_DSS_PIXELFORMAT@@@Z|
  01048	e58d035c	 str         r0, [sp, #0x35C]
  0104c	e59d3378	 ldr         r3, [sp, #0x378]
  01050	e2833010	 add         r3, r3, #0x10
  01054	e5933000	 ldr         r3, [r3]
  01058	e283200c	 add         r2, r3, #0xC
  0105c	e59d335c	 ldr         r3, [sp, #0x35C]
  01060	e5823000	 str         r3, [r2]

; 445  :     m_pMode->format = OMAPDDGPE::PixelFormatToGPEFormat(m_pDisplayContr->GetLCDPixelFormat());

  01064	e59d3378	 ldr         r3, [sp, #0x378]
  01068	e28330b0	 add         r3, r3, #0xB0
  0106c	e5930000	 ldr         r0, [r3]
  01070	eb000000	 bl          |?GetLCDPixelFormat@OMAPDisplayController@@QAA?AW4OMAP_DSS_PIXELFORMAT@@XZ|
  01074	e58d0360	 str         r0, [sp, #0x360]
  01078	e59d0360	 ldr         r0, [sp, #0x360]
  0107c	eb000000	 bl          |?PixelFormatToGPEFormat@OMAPDDGPE@@SA?AW4EGPEFormat@@W4OMAP_DSS_PIXELFORMAT@@@Z|
  01080	e58d0364	 str         r0, [sp, #0x364]
  01084	e59d3378	 ldr         r3, [sp, #0x378]
  01088	e2833010	 add         r3, r3, #0x10
  0108c	e5933000	 ldr         r3, [r3]
  01090	e2832014	 add         r2, r3, #0x14
  01094	e59d3364	 ldr         r3, [sp, #0x364]
  01098	e5823000	 str         r3, [r2]

; 446  :     m_pModeEx->ePixelFormat = OMAPDDGPE::PixelFormatToDDGPEFormat(m_pDisplayContr->GetLCDPixelFormat());

  0109c	e59d3378	 ldr         r3, [sp, #0x378]
  010a0	e28330b0	 add         r3, r3, #0xB0
  010a4	e5930000	 ldr         r0, [r3]
  010a8	eb000000	 bl          |?GetLCDPixelFormat@OMAPDisplayController@@QAA?AW4OMAP_DSS_PIXELFORMAT@@XZ|
  010ac	e58d0368	 str         r0, [sp, #0x368]
  010b0	e59d0368	 ldr         r0, [sp, #0x368]
  010b4	eb000000	 bl          |?PixelFormatToDDGPEFormat@OMAPDDGPE@@SA?AW4EDDGPEPixelFormat@@W4OMAP_DSS_PIXELFORMAT@@@Z|
  010b8	e58d036c	 str         r0, [sp, #0x36C]
  010bc	e59d3378	 ldr         r3, [sp, #0x378]
  010c0	e2833024	 add         r3, r3, #0x24
  010c4	e5933000	 ldr         r3, [r3]
  010c8	e2832034	 add         r2, r3, #0x34
  010cc	e59d336c	 ldr         r3, [sp, #0x36C]
  010d0	e5823000	 str         r3, [r2]

; 447  : 
; 448  :     
; 449  :     //  Initialize a critical section for display driver operations that need serialization
; 450  :     InitializeCriticalSection( &m_csOperationLock );

  010d4	e59d3378	 ldr         r3, [sp, #0x378]
  010d8	e283009c	 add         r0, r3, #0x9C
  010dc	eb000000	 bl          InitializeCriticalSection

; 451  : 
; 452  :     m_cursorVisible = FALSE;

  010e0	e59d3378	 ldr         r3, [sp, #0x378]
  010e4	e2832e15	 add         r2, r3, #0x15, 28
  010e8	e3a03000	 mov         r3, #0
  010ec	e5823000	 str         r3, [r2]

; 453  :     m_cursorDisabled = TRUE;

  010f0	e59d3378	 ldr         r3, [sp, #0x378]
  010f4	e2832f53	 add         r2, r3, #0x53, 30
  010f8	e3a03001	 mov         r3, #1
  010fc	e5823000	 str         r3, [r2]

; 454  :     m_cursorForcedOff = FALSE;

  01100	e59d3378	 ldr         r3, [sp, #0x378]
  01104	e2832f55	 add         r2, r3, #0x55, 30
  01108	e3a03000	 mov         r3, #0
  0110c	e5823000	 str         r3, [r2]

; 455  :     memset(&m_cursorRect, 0x0, sizeof(m_cursorRect));

  01110	e3a02010	 mov         r2, #0x10
  01114	e3a01000	 mov         r1, #0
  01118	e59d3378	 ldr         r3, [sp, #0x378]
  0111c	e2830f56	 add         r0, r3, #0x56, 30
  01120	eb000000	 bl          memset

; 456  :     m_cursorStore = NULL;

  01124	e59d3378	 ldr         r3, [sp, #0x378]
  01128	e2832f5e	 add         r2, r3, #0x5E, 30
  0112c	e3a03000	 mov         r3, #0
  01130	e5823000	 str         r3, [r2]

; 457  :     m_cursorXor = NULL;

  01134	e59d3378	 ldr         r3, [sp, #0x378]
  01138	e2832f5f	 add         r2, r3, #0x5F, 30
  0113c	e3a03000	 mov         r3, #0
  01140	e5823000	 str         r3, [r2]

; 458  :     m_cursorAnd = NULL;

  01144	e59d3378	 ldr         r3, [sp, #0x378]
  01148	e2832d06	 add         r2, r3, #6, 26
  0114c	e3a03000	 mov         r3, #0
  01150	e5823000	 str         r3, [r2]
  01154		 |$LN22@OMAPDDGPE|

; 459  : 	
; 460  : #if DEBUG_NEON_MEMORY_LEAK
; 461  :     m_bNeonBlt = FALSE;
; 462  : 	m_dwNeonBltCount = 0;
; 463  :     m_dwNeonBltCountLastMessage = 0;
; 464  : 	m_dwAvailPhysDelta = 0;
; 465  : 	m_dwAvailPageFileDelta = 0;
; 466  : #endif
; 467  : }

  01154	e59d025c	 ldr         r0, [sp, #0x25C]
  01158	eb000000	 bl          __security_check_cookie
  0115c	e59d3378	 ldr         r3, [sp, #0x378]
  01160	e58d3260	 str         r3, [sp, #0x260]
  01164	e59d0260	 ldr         r0, [sp, #0x260]
  01168	e28dde37	 add         sp, sp, #0x37, 28
  0116c	e89d6000	 ldmia       sp, {sp, lr}
  01170	e12fff1e	 bx          lr
  01174		 |$LN92@OMAPDDGPE|
  01174		 |$LN93@OMAPDDGPE|
  01174	00000000	 DCD         |?g_Globals@@3VOMAPDDGPEGlobals@@A|
  01178		 |$LN94@OMAPDDGPE|
  01178	00000000	 DCD         |??_C@_1FM@NGKLCFKD@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAi?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?5?$AAs?$AAu?$AAr?$AAf@|
  0117c		 |$LN95@OMAPDDGPE|
  0117c	00000000	 DCD         |dpCurSettings|
  01180		 |$LN96@OMAPDDGPE|
  01180	00000000	 DCD         |??_C@_1FI@DAAEFBJG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAs?$AAu?$AAr?$AAf?$AAa?$AAc@|
  01184		 |$LN97@OMAPDDGPE|
  01184	00000000	 DCD         |??_C@_1FM@MHAHIEFN@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAi?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?5?$AAD?$AAS?$AAS?$AA?5@|
  01188		 |$LN98@OMAPDDGPE|
  01188	00000000	 DCD         |??_C@_1EE@LPEPPACB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAi?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?5?$AAL?$AAC?$AAD?$AA?$AN@|
  0118c		 |$LN99@OMAPDDGPE|
  0118c	00000000	 DCD         |??_C@_1GC@IKJCGOEK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAi?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?5?$AAd?$AAi?$AAs?$AAp@|
  01190		 |$LN100@OMAPDDGPE|
  01190	00000000	 DCD         |??_C@_1FO@GKBABLBK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAd?$AAi?$AAs?$AAp?$AAl?$AAa@|
  01194		 |$LN101@OMAPDDGPE|
  01194	00000000	 DCD         |??_C@_1GG@MOFFINCC@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAa?$AAd?$AAv?$AAe?$AAr?$AAt?$AAi?$AAs?$AAe?$AA?5?$AAd?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5@|
  01198		 |$LN102@OMAPDDGPE|
  01198	00000000	 DCD         |??_C@_1FK@NHLAPMED@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAr?$AAe?$AAt?$AAr?$AAi?$AAe?$AAv?$AAe?$AA?5?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe@|
  0119c		 |$LN103@OMAPDDGPE|
  0119c	00000000	 DCD         |g_hmodDisplayDll|
  011a0		 |$LN104@OMAPDDGPE|
  011a0	00000000	 DCD         |??_C@_1HC@GOHHDCGP@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAc?$AAo?$AAn?$AAv?$AAe?$AAr?$AAt?$AA?5?$AAd?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAp?$AAo@|
  011a4		 |$LN105@OMAPDDGPE|
  011a4	00000000	 DCD         |??_C@_1EO@BHDHHEGO@?$AA?$HL?$AAE?$AAB?$AA9?$AA1?$AAC?$AA7?$AAC?$AA9?$AA?9?$AA8?$AAB?$AAF?$AA6?$AA?9?$AA4?$AAa?$AA2?$AAd?$AA?9?$AA9?$AAA?$AAB?$AA8?$AA?9?$AA6?$AA9?$AA7?$AA2?$AA4?$AAE?$AAE@|
  011a8		 |$LN106@OMAPDDGPE|
  011a8	00000000	 DCD         |??_C@_1CO@GLGGGNMB@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?$AN?$AA?6?$AA?$AA@|
  011ac		 |$LN107@OMAPDDGPE|
  011ac	00000000	 DCD         |??_7OMAPDDGPE@@6B@|
  011b0		 |$LN108@OMAPDDGPE|
  011b0	00000000	 DCD         |__security_cookie|
  011b4		 |$M43293|

			 ENDP  ; |??0OMAPDDGPE@@QAA@XZ|, OMAPDDGPE::OMAPDDGPE

; File c:\wince600\public\common\oak\inc\ddgpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T43318| DCD	|$LN5@GetPhysica|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetPhysicalModeId@DDGPE@@UAAKXZ| PROC ; DDGPE::GetPhysicalModeId

; 486  : 	virtual DWORD	GetPhysicalModeId	(void) { return m_dwPhysicalModeID; }	// Get current hardware mode (mode of ddraw primary)

  00000		 |$LN5@GetPhysica|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M43315|
  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e2833028	 add         r3, r3, #0x28
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3000	 str         r3, [sp]
  00020	e59d0000	 ldr         r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M43316|

			 ENDP  ; |?GetPhysicalModeId@DDGPE@@UAAKXZ|, DDGPE::GetPhysicalModeId


  00000			 AREA	 |.pdata|, PDATA
|$T43326| DCD	|$LN5@GetDriverD|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetDriverData@DDGPE@@UAAPAUDDGPEDriverData@@XZ| PROC ; DDGPE::GetDriverData

; 502  : 	virtual DDGPEDriverData*		GetDriverData(void) { return m_pDriverData; }

  00000		 |$LN5@GetDriverD|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M43323|
  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e283302c	 add         r3, r3, #0x2C
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3000	 str         r3, [sp]
  00020	e59d0000	 ldr         r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M43324|

			 ENDP  ; |?GetDriverData@DDGPE@@UAAPAUDDGPEDriverData@@XZ|, DDGPE::GetDriverData


  00000			 AREA	 |.pdata|, PDATA
|$T43333| DCD	|$LN5@SetDriverD|
	DCD	0x40000903
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetDriverData@DDGPE@@UAAXPAUDDGPEDriverData@@@Z| PROC ; DDGPE::SetDriverData

; 503  : 	virtual void					SetDriverData(DDGPEDriverData* pDriverData) { m_pDriverData = pDriverData; }

  00000		 |$LN5@SetDriverD|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M43330|
  0000c	e59d3008	 ldr         r3, [sp, #8]
  00010	e283202c	 add         r2, r3, #0x2C
  00014	e59d300c	 ldr         r3, [sp, #0xC]
  00018	e5823000	 str         r3, [r2]
  0001c	e89d6000	 ldmia       sp, {sp, lr}
  00020	e12fff1e	 bx          lr
  00024		 |$M43331|

			 ENDP  ; |?SetDriverData@DDGPE@@UAAXPAUDDGPEDriverData@@@Z|, DDGPE::SetDriverData

; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\inc\dssai.h

  00000			 AREA	 |.pdata|, PDATA
|$T43341| DCD	|$LN5@GetLCDPixe|
	DCD	0x40000d04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetLCDPixelFormat@OMAPDisplayController@@QAA?AW4OMAP_DSS_PIXELFORMAT@@XZ| PROC ; OMAPDisplayController::GetLCDPixelFormat

; 302  :     OMAP_DSS_PIXELFORMAT    GetLCDPixelFormat() { return m_eLcdPixelFormat; }

  00000		 |$LN5@GetLCDPixe|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M43338|
  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e2833b01	 add         r3, r3, #1, 22
  00018	e28330a4	 add         r3, r3, #0xA4
  0001c	e5933000	 ldr         r3, [r3]
  00020	e58d3000	 str         r3, [sp]
  00024	e59d0000	 ldr         r0, [sp]
  00028	e28dd004	 add         sp, sp, #4
  0002c	e89d6000	 ldmia       sp, {sp, lr}
  00030	e12fff1e	 bx          lr
  00034		 |$M43339|

			 ENDP  ; |?GetLCDPixelFormat@OMAPDisplayController@@QAA?AW4OMAP_DSS_PIXELFORMAT@@XZ|, OMAPDisplayController::GetLCDPixelFormat


  00000			 AREA	 |.pdata|, PDATA
|$T43349| DCD	|$LN5@GetLCDWidt|
	DCD	0x40000d04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetLCDWidth@OMAPDisplayController@@QAAKXZ| PROC ; OMAPDisplayController::GetLCDWidth

; 303  :     DWORD                   GetLCDWidth() { return m_dwLcdWidth; }

  00000		 |$LN5@GetLCDWidt|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M43346|
  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e2833b01	 add         r3, r3, #1, 22
  00018	e28330a8	 add         r3, r3, #0xA8
  0001c	e5933000	 ldr         r3, [r3]
  00020	e58d3000	 str         r3, [sp]
  00024	e59d0000	 ldr         r0, [sp]
  00028	e28dd004	 add         sp, sp, #4
  0002c	e89d6000	 ldmia       sp, {sp, lr}
  00030	e12fff1e	 bx          lr
  00034		 |$M43347|

			 ENDP  ; |?GetLCDWidth@OMAPDisplayController@@QAAKXZ|, OMAPDisplayController::GetLCDWidth


  00000			 AREA	 |.pdata|, PDATA
|$T43357| DCD	|$LN5@GetLCDHeig|
	DCD	0x40000d04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetLCDHeight@OMAPDisplayController@@QAAKXZ| PROC ; OMAPDisplayController::GetLCDHeight

; 304  :     DWORD                   GetLCDHeight() { return m_dwLcdHeight; }

  00000		 |$LN5@GetLCDHeig|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M43354|
  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e2833b01	 add         r3, r3, #1, 22
  00018	e28330ac	 add         r3, r3, #0xAC
  0001c	e5933000	 ldr         r3, [r3]
  00020	e58d3000	 str         r3, [sp]
  00024	e59d0000	 ldr         r0, [sp]
  00028	e28dd004	 add         sp, sp, #4
  0002c	e89d6000	 ldmia       sp, {sp, lr}
  00030	e12fff1e	 bx          lr
  00034		 |$M43355|

			 ENDP  ; |?GetLCDHeight@OMAPDisplayController@@QAAKXZ|, OMAPDisplayController::GetLCDHeight

	IMPORT	|EnterCriticalSection|
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\inc\omap_ddgpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T43364| DCD	|$LN5@Lock|
	DCD	0x40000803
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Lock@OMAPDDGPE@@UAAXXZ| PROC		; OMAPDDGPE::Lock

; 531  :     Lock() { EnterCriticalSection( &m_csOperationLock ); }

  00000		 |$LN5@Lock|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M43361|
  0000c	e59d3008	 ldr         r3, [sp, #8]
  00010	e283009c	 add         r0, r3, #0x9C
  00014	eb000000	 bl          EnterCriticalSection
  00018	e89d6000	 ldmia       sp, {sp, lr}
  0001c	e12fff1e	 bx          lr
  00020		 |$M43362|

			 ENDP  ; |?Lock@OMAPDDGPE@@UAAXXZ|, OMAPDDGPE::Lock

	IMPORT	|LeaveCriticalSection|

  00000			 AREA	 |.pdata|, PDATA
|$T43371| DCD	|$LN5@Unlock|
	DCD	0x40000803
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Unlock@OMAPDDGPE@@UAAXXZ| PROC	; OMAPDDGPE::Unlock

; 535  :     Unlock() { LeaveCriticalSection( &m_csOperationLock ); }

  00000		 |$LN5@Unlock|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M43368|
  0000c	e59d3008	 ldr         r3, [sp, #8]
  00010	e283009c	 add         r0, r3, #0x9C
  00014	eb000000	 bl          LeaveCriticalSection
  00018	e89d6000	 ldmia       sp, {sp, lr}
  0001c	e12fff1e	 bx          lr
  00020		 |$M43369|

			 ENDP  ; |?Unlock@OMAPDDGPE@@UAAXXZ|, OMAPDDGPE::Unlock

	EXPORT	|??1OMAPDDGPE@@UAA@XZ|			; OMAPDDGPE::~OMAPDDGPE
	IMPORT	|??3@YAXPAX@Z|				; operator delete

  00000			 AREA	 |.pdata|, PDATA
|$T43379| DCD	|$LN6@scalar|
	DCD	0x40001104
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??_GOMAPDDGPE@@UAAPAXI@Z| PROC	; OMAPDDGPE::`scalar deleting destructor'
  00000		 |$LN6@scalar|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M43376|
  00010	e59d000c	 ldr         r0, [sp, #0xC]
  00014	eb000000	 bl          |??1OMAPDDGPE@@UAA@XZ|
  00018	e59d3010	 ldr         r3, [sp, #0x10]
  0001c	e3130001	 tst         r3, #1
  00020	0a000001	 beq         |$LN1@scalar|
  00024	e59d000c	 ldr         r0, [sp, #0xC]
  00028	eb000000	 bl          |??3@YAXPAX@Z|
  0002c		 |$LN1@scalar|
  0002c	e59d300c	 ldr         r3, [sp, #0xC]
  00030	e58d3000	 str         r3, [sp]
  00034	e59d0000	 ldr         r0, [sp]
  00038	e28dd004	 add         sp, sp, #4
  0003c	e89d6000	 ldmia       sp, {sp, lr}
  00040	e12fff1e	 bx          lr
  00044		 |$M43377|

			 ENDP  ; |??_GOMAPDDGPE@@UAAPAXI@Z|, OMAPDDGPE::`scalar deleting destructor'

	IMPORT	|??1DDGPE@@UAA@XZ|			; DDGPE::~DDGPE

  00030			 AREA	 |.pdata|, PDATA
|$T43386| DCD	|$LN5@OMAPDDGPE@2|
	DCD	0x40000b03
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\ddgpe\omap_ddgpe.cpp

  011b4			 AREA	 |.text|, CODE, ARM

  011b4		 |??1OMAPDDGPE@@UAA@XZ| PROC		; OMAPDDGPE::~OMAPDDGPE

; 471  : {

  011b4		 |$LN5@OMAPDDGPE@2|
  011b4	e1a0c00d	 mov         r12, sp
  011b8	e92d0001	 stmdb       sp!, {r0}
  011bc	e92d5000	 stmdb       sp!, {r12, lr}
  011c0		 |$M43383|
  011c0	e59f2014	 ldr         r2, [pc, #0x14]
  011c4	e59d3008	 ldr         r3, [sp, #8]
  011c8	e5832000	 str         r2, [r3]

; 472  :     //  Display driver never unloads
; 473  : #if 0
; 474  :     delete [] m_cursorStore; 
; 475  :     m_cursorStore = NULL;
; 476  :     delete [] m_cursorXor; 
; 477  :     m_cursorXor = NULL;
; 478  :     delete [] m_cursorAnd; 
; 479  :     m_cursorAnd = NULL;
; 480  : #endif
; 481  : }

  011cc	e59d0008	 ldr         r0, [sp, #8]
  011d0	eb000000	 bl          |??1DDGPE@@UAA@XZ|
  011d4	e89d6000	 ldmia       sp, {sp, lr}
  011d8	e12fff1e	 bx          lr
  011dc		 |$LN6@OMAPDDGPE@2|
  011dc		 |$LN7@OMAPDDGPE@2|
  011dc	00000000	 DCD         |??_7OMAPDDGPE@@6B@|
  011e0		 |$M43384|

			 ENDP  ; |??1OMAPDDGPE@@UAA@XZ|, OMAPDDGPE::~OMAPDDGPE

	EXPORT	|??_C@_1CM@KNELOMIM@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAN?$AAu?$AAm?$AAM?$AAo?$AAd?$AAe?$AAs?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00038			 AREA	 |.pdata|, PDATA
|$T43396| DCD	|$LN7@NumModes|
	DCD	0x40001704

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@KNELOMIM@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAN?$AAu?$AAm?$AAM?$AAo?$AAd?$AAe?$AAs?$AA?$AN?$AA?6?$AA?$AA@| DCB "O"
	DCB	0x0, "M", 0x0, "A", 0x0, "P", 0x0, "D", 0x0, "D", 0x0, "G"
	DCB	0x0, "P", 0x0, "E", 0x0, ":", 0x0, ":", 0x0, "N", 0x0, "u"
	DCB	0x0, "m", 0x0, "M", 0x0, "o", 0x0, "d", 0x0, "e", 0x0, "s"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  011e0			 AREA	 |.text|, CODE, ARM

  011e0		 |?NumModes@OMAPDDGPE@@UAAHXZ| PROC	; OMAPDDGPE::NumModes

; 486  : {

  011e0		 |$LN7@NumModes|
  011e0	e1a0c00d	 mov         r12, sp
  011e4	e92d0001	 stmdb       sp!, {r0}
  011e8	e92d5000	 stmdb       sp!, {r12, lr}
  011ec	e24dd008	 sub         sp, sp, #8
  011f0		 |$M43393|

; 487  :     DEBUGMSG (GPE_ZONE_INIT, (TEXT("OMAPDDGPE::NumModes\r\n")));

  011f0	e59f3040	 ldr         r3, [pc, #0x40]
  011f4	e5933440	 ldr         r3, [r3, #0x440]
  011f8	e3130020	 tst         r3, #0x20
  011fc	0a000004	 beq         |$LN3@NumModes|
  01200	e59f002c	 ldr         r0, [pc, #0x2C]
  01204	eb000000	 bl          NKDbgPrintfW
  01208	e3a03001	 mov         r3, #1
  0120c	e58d3004	 str         r3, [sp, #4]
  01210	ea000001	 b           |$LN4@NumModes|
  01214		 |$LN3@NumModes|
  01214	e3a03000	 mov         r3, #0
  01218	e58d3004	 str         r3, [sp, #4]
  0121c		 |$LN4@NumModes|

; 488  : 
; 489  :     //  Return number of modes (the display driver allows only one active mode at a time)
; 490  :     return 1;

  0121c	e3a03001	 mov         r3, #1
  01220	e58d3000	 str         r3, [sp]

; 491  : }

  01224	e59d0000	 ldr         r0, [sp]
  01228	e28dd008	 add         sp, sp, #8
  0122c	e89d6000	 ldmia       sp, {sp, lr}
  01230	e12fff1e	 bx          lr
  01234		 |$LN8@NumModes|
  01234		 |$LN9@NumModes|
  01234	00000000	 DCD         |??_C@_1CM@KNELOMIM@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAN?$AAu?$AAm?$AAM?$AAo?$AAd?$AAe?$AAs?$AA?$AN?$AA?6?$AA?$AA@|
  01238		 |$LN10@NumModes|
  01238	00000000	 DCD         |dpCurSettings|
  0123c		 |$M43394|

			 ENDP  ; |?NumModes@OMAPDDGPE@@UAAHXZ|, OMAPDDGPE::NumModes

	EXPORT	|??_C@_1DC@KEPGACNP@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAG?$AAe?$AAt?$AAM?$AAo?$AAd?$AAe?$AAI?$AAn?$AAf?$AAo?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|memcpy|

  00040			 AREA	 |.pdata|, PDATA
|$T43408| DCD	|$LN9@GetModeInf|
	DCD	0x40002d04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DC@KEPGACNP@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAG?$AAe?$AAt?$AAM?$AAo?$AAd?$AAe?$AAI?$AAn?$AAf?$AAo?$AA?$AN?$AA?6?$AA?$AA@| DCB "O"
	DCB	0x0, "M", 0x0, "A", 0x0, "P", 0x0, "D", 0x0, "D", 0x0, "G"
	DCB	0x0, "P", 0x0, "E", 0x0, ":", 0x0, ":", 0x0, "G", 0x0, "e"
	DCB	0x0, "t", 0x0, "M", 0x0, "o", 0x0, "d", 0x0, "e", 0x0, "I"
	DCB	0x0, "n", 0x0, "f", 0x0, "o", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Odtp

  0123c			 AREA	 |.text|, CODE, ARM

  0123c		 |?GetModeInfo@OMAPDDGPE@@UAAJPAUGPEMode@@H@Z| PROC ; OMAPDDGPE::GetModeInfo

; 499  : {

  0123c		 |$LN9@GetModeInf|
  0123c	e1a0c00d	 mov         r12, sp
  01240	e92d0007	 stmdb       sp!, {r0 - r2}
  01244	e92d5000	 stmdb       sp!, {r12, lr}
  01248	e24dd008	 sub         sp, sp, #8
  0124c		 |$M43405|

; 500  :     DEBUGMSG (GPE_ZONE_INIT, (TEXT("OMAPDDGPE::GetModeInfo\r\n")));

  0124c	e59f3098	 ldr         r3, [pc, #0x98]
  01250	e5933440	 ldr         r3, [r3, #0x440]
  01254	e3130020	 tst         r3, #0x20
  01258	0a000004	 beq         |$LN5@GetModeInf|
  0125c	e59f0084	 ldr         r0, [pc, #0x84]
  01260	eb000000	 bl          NKDbgPrintfW
  01264	e3a03001	 mov         r3, #1
  01268	e58d3004	 str         r3, [sp, #4]
  0126c	ea000001	 b           |$LN6@GetModeInf|
  01270		 |$LN5@GetModeInf|
  01270	e3a03000	 mov         r3, #0
  01274	e58d3004	 str         r3, [sp, #4]
  01278		 |$LN6@GetModeInf|

; 501  : 
; 502  :     //  Check display controller enabled
; 503  :     if( m_pDisplayContr == NULL )

  01278	e59d3010	 ldr         r3, [sp, #0x10]
  0127c	e28330b0	 add         r3, r3, #0xB0
  01280	e5933000	 ldr         r3, [r3]
  01284	e3530000	 cmp         r3, #0
  01288	1a000003	 bne         |$LN2@GetModeInf|

; 504  :         return E_FAIL;

  0128c	e3a03116	 mov         r3, #0x16, 2
  01290	e3833901	 orr         r3, r3, #1, 18
  01294	e58d3000	 str         r3, [sp]
  01298	ea00000d	 b           |$LN3@GetModeInf|
  0129c		 |$LN2@GetModeInf|

; 505  : 
; 506  :     //  Return info about selected mode
; 507  :     if( modeNumber == 0 )

  0129c	e59d3018	 ldr         r3, [sp, #0x18]
  012a0	e3530000	 cmp         r3, #0
  012a4	1a000008	 bne         |$LN1@GetModeInf|

; 508  :     {
; 509  :         *pMode = *m_pMode;

  012a8	e59d3010	 ldr         r3, [sp, #0x10]
  012ac	e2833010	 add         r3, r3, #0x10
  012b0	e5931000	 ldr         r1, [r3]
  012b4	e59d0014	 ldr         r0, [sp, #0x14]
  012b8	e3a02018	 mov         r2, #0x18
  012bc	eb000000	 bl          memcpy

; 510  :         return S_OK;

  012c0	e3a03000	 mov         r3, #0
  012c4	e58d3000	 str         r3, [sp]
  012c8	ea000001	 b           |$LN3@GetModeInf|
  012cc		 |$LN1@GetModeInf|

; 511  :     }
; 512  : 
; 513  :     return E_INVALIDARG;

  012cc	e59f3010	 ldr         r3, [pc, #0x10]
  012d0	e58d3000	 str         r3, [sp]
  012d4		 |$LN3@GetModeInf|

; 514  : }

  012d4	e59d0000	 ldr         r0, [sp]
  012d8	e28dd008	 add         sp, sp, #8
  012dc	e89d6000	 ldmia       sp, {sp, lr}
  012e0	e12fff1e	 bx          lr
  012e4		 |$LN10@GetModeInf|
  012e4		 |$LN11@GetModeInf|
  012e4	80070057	 DCD         0x80070057
  012e8		 |$LN12@GetModeInf|
  012e8	00000000	 DCD         |??_C@_1DC@KEPGACNP@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAG?$AAe?$AAt?$AAM?$AAo?$AAd?$AAe?$AAI?$AAn?$AAf?$AAo?$AA?$AN?$AA?6?$AA?$AA@|
  012ec		 |$LN13@GetModeInf|
  012ec	00000000	 DCD         |dpCurSettings|
  012f0		 |$M43406|

			 ENDP  ; |?GetModeInfo@OMAPDDGPE@@UAAJPAUGPEMode@@H@Z|, OMAPDDGPE::GetModeInfo

	EXPORT	|??_C@_1DG@FONFHOGI@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAG?$AAe?$AAt?$AAM?$AAo?$AAd?$AAe?$AAI?$AAn?$AAf?$AAo?$AAE?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00048			 AREA	 |.pdata|, PDATA
|$T43420| DCD	|$LN9@GetModeInf@2|
	DCD	0x40002d04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DG@FONFHOGI@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAG?$AAe?$AAt?$AAM?$AAo?$AAd?$AAe?$AAI?$AAn?$AAf?$AAo?$AAE?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "O"
	DCB	0x0, "M", 0x0, "A", 0x0, "P", 0x0, "D", 0x0, "D", 0x0, "G"
	DCB	0x0, "P", 0x0, "E", 0x0, ":", 0x0, ":", 0x0, "G", 0x0, "e"
	DCB	0x0, "t", 0x0, "M", 0x0, "o", 0x0, "d", 0x0, "e", 0x0, "I"
	DCB	0x0, "n", 0x0, "f", 0x0, "o", 0x0, "E", 0x0, "x", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  012f0			 AREA	 |.text|, CODE, ARM

  012f0		 |?GetModeInfoEx@OMAPDDGPE@@UAAJPAUGPEModeEx@@H@Z| PROC ; OMAPDDGPE::GetModeInfoEx

; 522  : {

  012f0		 |$LN9@GetModeInf@2|
  012f0	e1a0c00d	 mov         r12, sp
  012f4	e92d0007	 stmdb       sp!, {r0 - r2}
  012f8	e92d5000	 stmdb       sp!, {r12, lr}
  012fc	e24dd008	 sub         sp, sp, #8
  01300		 |$M43417|

; 523  :     DEBUGMSG (GPE_ZONE_INIT, (TEXT("OMAPDDGPE::GetModeInfoEx\r\n")));

  01300	e59f3098	 ldr         r3, [pc, #0x98]
  01304	e5933440	 ldr         r3, [r3, #0x440]
  01308	e3130020	 tst         r3, #0x20
  0130c	0a000004	 beq         |$LN5@GetModeInf@2|
  01310	e59f0084	 ldr         r0, [pc, #0x84]
  01314	eb000000	 bl          NKDbgPrintfW
  01318	e3a03001	 mov         r3, #1
  0131c	e58d3004	 str         r3, [sp, #4]
  01320	ea000001	 b           |$LN6@GetModeInf@2|
  01324		 |$LN5@GetModeInf@2|
  01324	e3a03000	 mov         r3, #0
  01328	e58d3004	 str         r3, [sp, #4]
  0132c		 |$LN6@GetModeInf@2|

; 524  : 
; 525  :     //  Check display controller enabled
; 526  :     if( m_pDisplayContr == NULL )

  0132c	e59d3010	 ldr         r3, [sp, #0x10]
  01330	e28330b0	 add         r3, r3, #0xB0
  01334	e5933000	 ldr         r3, [r3]
  01338	e3530000	 cmp         r3, #0
  0133c	1a000003	 bne         |$LN2@GetModeInf@2|

; 527  :         return E_FAIL;

  01340	e3a03116	 mov         r3, #0x16, 2
  01344	e3833901	 orr         r3, r3, #1, 18
  01348	e58d3000	 str         r3, [sp]
  0134c	ea00000d	 b           |$LN3@GetModeInf@2|
  01350		 |$LN2@GetModeInf@2|

; 528  : 
; 529  :     //  Return info about selected mode
; 530  :     if( modeNumber == 0 )

  01350	e59d3018	 ldr         r3, [sp, #0x18]
  01354	e3530000	 cmp         r3, #0
  01358	1a000008	 bne         |$LN1@GetModeInf@2|

; 531  :     {
; 532  :         *pModeEx = *m_pModeEx;

  0135c	e59d3010	 ldr         r3, [sp, #0x10]
  01360	e2833024	 add         r3, r3, #0x24
  01364	e5931000	 ldr         r1, [r3]
  01368	e59d0014	 ldr         r0, [sp, #0x14]
  0136c	e3a02058	 mov         r2, #0x58
  01370	eb000000	 bl          memcpy

; 533  :         return S_OK;

  01374	e3a03000	 mov         r3, #0
  01378	e58d3000	 str         r3, [sp]
  0137c	ea000001	 b           |$LN3@GetModeInf@2|
  01380		 |$LN1@GetModeInf@2|

; 534  :     }
; 535  : 
; 536  :     return E_INVALIDARG;

  01380	e59f3010	 ldr         r3, [pc, #0x10]
  01384	e58d3000	 str         r3, [sp]
  01388		 |$LN3@GetModeInf@2|

; 537  : }

  01388	e59d0000	 ldr         r0, [sp]
  0138c	e28dd008	 add         sp, sp, #8
  01390	e89d6000	 ldmia       sp, {sp, lr}
  01394	e12fff1e	 bx          lr
  01398		 |$LN10@GetModeInf@2|
  01398		 |$LN11@GetModeInf@2|
  01398	80070057	 DCD         0x80070057
  0139c		 |$LN12@GetModeInf@2|
  0139c	00000000	 DCD         |??_C@_1DG@FONFHOGI@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAG?$AAe?$AAt?$AAM?$AAo?$AAd?$AAe?$AAI?$AAn?$AAf?$AAo?$AAE?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  013a0		 |$LN13@GetModeInf@2|
  013a0	00000000	 DCD         |dpCurSettings|
  013a4		 |$M43418|

			 ENDP  ; |?GetModeInfoEx@OMAPDDGPE@@UAAJPAUGPEModeEx@@H@Z|, OMAPDDGPE::GetModeInfoEx

	EXPORT	|??_C@_1EG@PJNCKJAB@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAG?$AAe?$AAt?$AAP?$AAr?$AAi?$AAm?$AAa?$AAr?$AAy?$AAP?$AAi?$AAx?$AAe?$AAl?$AAF?$AAo?$AAr?$AAm?$AAa?$AAt@| [ DATA ] ; `string'

  00050			 AREA	 |.pdata|, PDATA
|$T43432| DCD	|$LN7@GetPrimary|
	DCD	0x40001c04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EG@PJNCKJAB@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAG?$AAe?$AAt?$AAP?$AAr?$AAi?$AAm?$AAa?$AAr?$AAy?$AAP?$AAi?$AAx?$AAe?$AAl?$AAF?$AAo?$AAr?$AAm?$AAa?$AAt@| DCB "O"
	DCB	0x0, "M", 0x0, "A", 0x0, "P", 0x0, "D", 0x0, "D", 0x0, "G"
	DCB	0x0, "P", 0x0, "E", 0x0, ":", 0x0, ":", 0x0, "G", 0x0, "e"
	DCB	0x0, "t", 0x0, "P", 0x0, "r", 0x0, "i", 0x0, "m", 0x0, "a"
	DCB	0x0, "r", 0x0, "y", 0x0, "P", 0x0, "i", 0x0, "x", 0x0, "e"
	DCB	0x0, "l", 0x0, "F", 0x0, "o", 0x0, "r", 0x0, "m", 0x0, "a"
	DCB	0x0, "t", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  013a4			 AREA	 |.text|, CODE, ARM

  013a4		 |?GetPrimaryPixelFormat@OMAPDDGPE@@UAA?AW4OMAP_DSS_PIXELFORMAT@@XZ| PROC ; OMAPDDGPE::GetPrimaryPixelFormat

; 542  : {

  013a4		 |$LN7@GetPrimary|
  013a4	e1a0c00d	 mov         r12, sp
  013a8	e92d0001	 stmdb       sp!, {r0}
  013ac	e92d5000	 stmdb       sp!, {r12, lr}
  013b0	e24dd00c	 sub         sp, sp, #0xC
  013b4		 |$M43429|

; 543  :     DEBUGMSG (GPE_ZONE_INIT, (TEXT("OMAPDDGPE::GetPrimaryPixelFormat\r\n")));

  013b4	e59f3054	 ldr         r3, [pc, #0x54]
  013b8	e5933440	 ldr         r3, [r3, #0x440]
  013bc	e3130020	 tst         r3, #0x20
  013c0	0a000004	 beq         |$LN3@GetPrimary|
  013c4	e59f0040	 ldr         r0, [pc, #0x40]
  013c8	eb000000	 bl          NKDbgPrintfW
  013cc	e3a03001	 mov         r3, #1
  013d0	e58d3004	 str         r3, [sp, #4]
  013d4	ea000001	 b           |$LN4@GetPrimary|
  013d8		 |$LN3@GetPrimary|
  013d8	e3a03000	 mov         r3, #0
  013dc	e58d3004	 str         r3, [sp, #4]
  013e0		 |$LN4@GetPrimary|

; 544  : 
; 545  :     //  Return pixel format of primary LCD    
; 546  :     return m_pDisplayContr->GetLCDPixelFormat();

  013e0	e59d3014	 ldr         r3, [sp, #0x14]
  013e4	e28330b0	 add         r3, r3, #0xB0
  013e8	e5930000	 ldr         r0, [r3]
  013ec	eb000000	 bl          |?GetLCDPixelFormat@OMAPDisplayController@@QAA?AW4OMAP_DSS_PIXELFORMAT@@XZ|
  013f0	e58d0008	 str         r0, [sp, #8]
  013f4	e59d3008	 ldr         r3, [sp, #8]
  013f8	e58d3000	 str         r3, [sp]

; 547  : }

  013fc	e59d0000	 ldr         r0, [sp]
  01400	e28dd00c	 add         sp, sp, #0xC
  01404	e89d6000	 ldmia       sp, {sp, lr}
  01408	e12fff1e	 bx          lr
  0140c		 |$LN8@GetPrimary|
  0140c		 |$LN9@GetPrimary|
  0140c	00000000	 DCD         |??_C@_1EG@PJNCKJAB@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAG?$AAe?$AAt?$AAP?$AAr?$AAi?$AAm?$AAa?$AAr?$AAy?$AAP?$AAi?$AAx?$AAe?$AAl?$AAF?$AAo?$AAr?$AAm?$AAa?$AAt@|
  01410		 |$LN10@GetPrimary|
  01410	00000000	 DCD         |dpCurSettings|
  01414		 |$M43430|

			 ENDP  ; |?GetPrimaryPixelFormat@OMAPDDGPE@@UAA?AW4OMAP_DSS_PIXELFORMAT@@XZ|, OMAPDDGPE::GetPrimaryPixelFormat

	EXPORT	|??_C@_1EC@MNPJBNCJ@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAm?$AAo?$AAd?$AAe?$AAI?$AAd?$AA?5?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6@| [ DATA ] ; `string'
	EXPORT	|?PixelFormatToBitMask@OMAPDDGPE@@SAHW4OMAP_DSS_PIXELFORMAT@@PAK111@Z| ; OMAPDDGPE::PixelFormatToBitMask
	EXPORT	|?PixelFormat@OMAPSurface@@QAA?AW4OMAP_DSS_PIXELFORMAT@@XZ| ; OMAPSurface::PixelFormat
	EXPORT	|??_C@_1FI@EOMLOOKK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAe?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAg?$AAr?$AAa?$AAp?$AAh?$AAi?$AAc?$AAs@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GI@LDOCGIDM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAs?$AAe?$AAt?$AA?5?$AAg?$AAr?$AAa?$AAp?$AAh?$AAi?$AAc?$AAs?$AA?5?$AAp?$AAi@| [ DATA ] ; `string'
	EXPORT	|?OmapSurface@OMAPDDGPESurface@@QAAPAVOMAPSurface@@XZ| ; OMAPDDGPESurface::OmapSurface
	EXPORT	|??_C@_1FI@FGBBFJN@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAp?$AAr?$AAi?$AAm?$AAa?$AAr@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CK@KICMJMOM@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAS?$AAe?$AAt?$AAM?$AAo?$AAd?$AAe?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|EngCreatePalette|
	IMPORT	|?DetermineTvOutSurface@OMAPDDGPE@@QAAXH@Z| ; OMAPDDGPE::DetermineTvOutSurface
	IMPORT	|?EnableTvOut@OMAPDisplayController@@QAAHH@Z| ; OMAPDisplayController::EnableTvOut
	IMPORT	|?EnablePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@@Z| ; OMAPDisplayController::EnablePipeline
	IMPORT	|?SetPipelineAttribs@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@W4OMAP_DSS_DESTINATION@@PAVOMAPSurface@@KK@Z| ; OMAPDisplayController::SetPipelineAttribs
	IMPORT	|?RotatePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@W4OMAP_DSS_ROTATION@@@Z| ; OMAPDisplayController::RotatePipeline

  00058			 AREA	 |.pdata|, PDATA
|$T43466| DCD	|$LN41@SetMode|
	DCD	0x4001b904

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EC@MNPJBNCJ@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAm?$AAo?$AAd?$AAe?$AAI?$AAd?$AA?5?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "I", 0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i"
	DCB	0x0, "d", 0x0, " ", 0x0, "m", 0x0, "o", 0x0, "d", 0x0, "e"
	DCB	0x0, "I", 0x0, "d", 0x0, " ", 0x0, "v", 0x0, "a", 0x0, "l"
	DCB	0x0, "u", 0x0, "e", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FI@EOMLOOKK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAe?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAg?$AAr?$AAa?$AAp?$AAh?$AAi?$AAc?$AAs@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "U", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e"
	DCB	0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "e", 0x0, "n"
	DCB	0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, " ", 0x0, "g"
	DCB	0x0, "r", 0x0, "a", 0x0, "p", 0x0, "h", 0x0, "i", 0x0, "c"
	DCB	0x0, "s", 0x0, " ", 0x0, "p", 0x0, "i", 0x0, "p", 0x0, "e"
	DCB	0x0, "l", 0x0, "i", 0x0, "n", 0x0, "e", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GI@LDOCGIDM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAs?$AAe?$AAt?$AA?5?$AAg?$AAr?$AAa?$AAp?$AAh?$AAi?$AAc?$AAs?$AA?5?$AAp?$AAi@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "U", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e"
	DCB	0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "s", 0x0, "e"
	DCB	0x0, "t", 0x0, " ", 0x0, "g", 0x0, "r", 0x0, "a", 0x0, "p"
	DCB	0x0, "h", 0x0, "i", 0x0, "c", 0x0, "s", 0x0, " ", 0x0, "p"
	DCB	0x0, "i", 0x0, "p", 0x0, "e", 0x0, "l", 0x0, "i", 0x0, "n"
	DCB	0x0, "e", 0x0, " ", 0x0, "a", 0x0, "t", 0x0, "t", 0x0, "r"
	DCB	0x0, "i", 0x0, "b", 0x0, "u", 0x0, "t", 0x0, "e", 0x0, "s"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FI@FGBBFJN@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAp?$AAr?$AAi?$AAm?$AAa?$AAr@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "U", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e"
	DCB	0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "a", 0x0, "l"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, " ", 0x0, "p", 0x0, "r", 0x0, "i", 0x0, "m", 0x0, "a"
	DCB	0x0, "r", 0x0, "y", 0x0, " ", 0x0, "s", 0x0, "u", 0x0, "r"
	DCB	0x0, "f", 0x0, "a", 0x0, "c", 0x0, "e", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CK@KICMJMOM@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAS?$AAe?$AAt?$AAM?$AAo?$AAd?$AAe?$AA?$AN?$AA?6?$AA?$AA@| DCB "O"
	DCB	0x0, "M", 0x0, "A", 0x0, "P", 0x0, "D", 0x0, "D", 0x0, "G"
	DCB	0x0, "P", 0x0, "E", 0x0, ":", 0x0, ":", 0x0, "S", 0x0, "e"
	DCB	0x0, "t", 0x0, "M", 0x0, "o", 0x0, "d", 0x0, "e", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  01414			 AREA	 |.text|, CODE, ARM

  01414		 |?SetMode@OMAPDDGPE@@UAAJHPAPAUHPALETTE__@@@Z| PROC ; OMAPDDGPE::SetMode

; 555  : {

  01414		 |$LN41@SetMode|
  01414	e1a0c00d	 mov         r12, sp
  01418	e92d0007	 stmdb       sp!, {r0 - r2}
  0141c	e92d5010	 stmdb       sp!, {r4, r12, lr}
  01420	e24dd0ac	 sub         sp, sp, #0xAC
  01424		 |$M43463|

; 556  :     SCODE   scResult = E_FAIL;

  01424	e3a03116	 mov         r3, #0x16, 2
  01428	e3833901	 orr         r3, r3, #1, 18
  0142c	e58d3008	 str         r3, [sp, #8]

; 557  :     BOOL    bResult;
; 558  : 
; 559  :     DEBUGMSG(GPE_ZONE_INIT,(TEXT("OMAPDDGPE::SetMode\r\n")));

  01430	e59f36a8	 ldr         r3, [pc, #0x6A8]
  01434	e5933440	 ldr         r3, [r3, #0x440]
  01438	e3130020	 tst         r3, #0x20
  0143c	0a000004	 beq         |$LN20@SetMode|
  01440	e59f06ac	 ldr         r0, [pc, #0x6AC]
  01444	eb000000	 bl          NKDbgPrintfW
  01448	e3a03001	 mov         r3, #1
  0144c	e58d3040	 str         r3, [sp, #0x40]
  01450	ea000001	 b           |$LN21@SetMode|
  01454		 |$LN20@SetMode|
  01454	e3a03000	 mov         r3, #0
  01458	e58d3040	 str         r3, [sp, #0x40]
  0145c		 |$LN21@SetMode|

; 560  : 
; 561  : 
; 562  :     //  Check display controller enabled
; 563  :     if( m_pDisplayContr == NULL )

  0145c	e59d30b8	 ldr         r3, [sp, #0xB8]
  01460	e28330b0	 add         r3, r3, #0xB0
  01464	e5933000	 ldr         r3, [r3]
  01468	e3530000	 cmp         r3, #0
  0146c	1a000003	 bne         |$LN17@SetMode|

; 564  :         return E_FAIL;

  01470	e3a03116	 mov         r3, #0x16, 2
  01474	e3833901	 orr         r3, r3, #1, 18
  01478	e58d3024	 str         r3, [sp, #0x24]
  0147c	ea000191	 b           |$LN18@SetMode|
  01480		 |$LN17@SetMode|

; 565  : 
; 566  :     //  Only a single, default mode is supported
; 567  :     if( modeId == 0 )

  01480	e59d30bc	 ldr         r3, [sp, #0xBC]
  01484	e3530000	 cmp         r3, #0
  01488	1a00017e	 bne         |$LN16@SetMode|

; 568  :     {
; 569  :         //  Allocate display primary surface for LCD
; 570  :         scResult = AllocSurface(
; 571  :                         &m_pPrimarySurf,
; 572  :                         m_pDisplayContr->GetLCDPixelFormat(),
; 573  :                         m_pDisplayContr->GetLCDWidth(),
; 574  :                         m_pDisplayContr->GetLCDHeight() );

  0148c	e59d30b8	 ldr         r3, [sp, #0xB8]
  01490	e28330b0	 add         r3, r3, #0xB0
  01494	e5930000	 ldr         r0, [r3]
  01498	eb000000	 bl          |?GetLCDHeight@OMAPDisplayController@@QAAKXZ|
  0149c	e58d0044	 str         r0, [sp, #0x44]
  014a0	e59d30b8	 ldr         r3, [sp, #0xB8]
  014a4	e28330b0	 add         r3, r3, #0xB0
  014a8	e5930000	 ldr         r0, [r3]
  014ac	eb000000	 bl          |?GetLCDWidth@OMAPDisplayController@@QAAKXZ|
  014b0	e58d0048	 str         r0, [sp, #0x48]
  014b4	e59d30b8	 ldr         r3, [sp, #0xB8]
  014b8	e28330b0	 add         r3, r3, #0xB0
  014bc	e5930000	 ldr         r0, [r3]
  014c0	eb000000	 bl          |?GetLCDPixelFormat@OMAPDisplayController@@QAA?AW4OMAP_DSS_PIXELFORMAT@@XZ|
  014c4	e58d004c	 str         r0, [sp, #0x4C]
  014c8	e59d3044	 ldr         r3, [sp, #0x44]
  014cc	e58d3000	 str         r3, [sp]
  014d0	e59d3048	 ldr         r3, [sp, #0x48]
  014d4	e59d204c	 ldr         r2, [sp, #0x4C]
  014d8	e59d10b8	 ldr         r1, [sp, #0xB8]
  014dc	e28110bc	 add         r1, r1, #0xBC
  014e0	e59d00b8	 ldr         r0, [sp, #0xB8]
  014e4	e5900000	 ldr         r0, [r0]
  014e8	e280e0f4	 add         lr, r0, #0xF4
  014ec	e59d00b8	 ldr         r0, [sp, #0xB8]
  014f0	e59e4000	 ldr         r4, [lr]
  014f4	e1a0e00f	 mov         lr, pc
  014f8	e12fff14	 bx          r4
  014fc	e58d0050	 str         r0, [sp, #0x50]
  01500	e59d3050	 ldr         r3, [sp, #0x50]
  01504	e58d3008	 str         r3, [sp, #8]

; 575  :         if (scResult != S_OK)

  01508	e59d3008	 ldr         r3, [sp, #8]
  0150c	e3530000	 cmp         r3, #0
  01510	0a00000c	 beq         |$LN15@SetMode|

; 576  :         {
; 577  :             DEBUGMSG (GPE_ZONE_ERROR, (L"ERROR: Unable to allocate primary surface\r\n"));

  01514	e59f35c4	 ldr         r3, [pc, #0x5C4]
  01518	e5933440	 ldr         r3, [r3, #0x440]
  0151c	e3130001	 tst         r3, #1
  01520	0a000004	 beq         |$LN22@SetMode|
  01524	e59f05c4	 ldr         r0, [pc, #0x5C4]
  01528	eb000000	 bl          NKDbgPrintfW
  0152c	e3a03001	 mov         r3, #1
  01530	e58d3054	 str         r3, [sp, #0x54]
  01534	ea000001	 b           |$LN23@SetMode|
  01538		 |$LN22@SetMode|
  01538	e3a03000	 mov         r3, #0
  0153c	e58d3054	 str         r3, [sp, #0x54]
  01540		 |$LN23@SetMode|

; 578  :             goto cleanUp;

  01540	ea00015e	 b           |$LN14@SetMode|
  01544	ea00015d	 b           |$cleanUp$42313|
  01548		 |$LN15@SetMode|

; 579  :         }
; 580  : 
; 581  :         //  Set GPE primary surface pointer
; 582  :         m_pPrimarySurface = m_pPrimarySurf;

  01548	e59d30b8	 ldr         r3, [sp, #0xB8]
  0154c	e28310bc	 add         r1, r3, #0xBC
  01550	e59d30b8	 ldr         r3, [sp, #0xB8]
  01554	e2832004	 add         r2, r3, #4
  01558	e5913000	 ldr         r3, [r1]
  0155c	e5823000	 str         r3, [r2]

; 583  : 
; 584  : 
; 585  :         //  Set the desired initial rotation angle if rotation is supported by the surface manager
; 586  :         if( m_pSurfaceMgr->SupportsRotation() == TRUE )

  01560	e59d30b8	 ldr         r3, [sp, #0xB8]
  01564	e28330b4	 add         r3, r3, #0xB4
  01568	e5932000	 ldr         r2, [r3]
  0156c	e59d30b8	 ldr         r3, [sp, #0xB8]
  01570	e28330b4	 add         r3, r3, #0xB4
  01574	e5930000	 ldr         r0, [r3]
  01578	e5923000	 ldr         r3, [r2]
  0157c	e2833020	 add         r3, r3, #0x20
  01580	e5933000	 ldr         r3, [r3]
  01584	e1a0e00f	 mov         lr, pc
  01588	e12fff13	 bx          r3
  0158c	e58d0058	 str         r0, [sp, #0x58]
  01590	e59d3058	 ldr         r3, [sp, #0x58]
  01594	e3530001	 cmp         r3, #1
  01598	1a00005c	 bne         |$LN13@SetMode|

; 587  :         {
; 588  :             //  Change width and height of primary surface, but not the surface angle of the GPE surface
; 589  :             //  Have the display controller rotate the output of the primary surface
; 590  :             switch( m_iGraphicsRotate )

  0159c	e59d30b8	 ldr         r3, [sp, #0xB8]
  015a0	e2833098	 add         r3, r3, #0x98
  015a4	e5933000	 ldr         r3, [r3]
  015a8	e58d305c	 str         r3, [sp, #0x5C]
  015ac	e59d305c	 ldr         r3, [sp, #0x5C]
  015b0	e3530004	 cmp         r3, #4
  015b4	8a000055	 bhi         |$LN11@SetMode|
  015b8	e59d205c	 ldr         r2, [sp, #0x5C]
  015bc	e1a03102	 mov         r3, r2, lsl #2
  015c0	e083300f	 add         r3, r3, pc
  015c4	e5933004	 ldr         r3, [r3, #4]
  015c8	e08ff003	 add         pc, pc, r3
  015cc		 |$LN33@SetMode|
  015cc		 |$LN32@SetMode|
  015cc		 |$LN34@SetMode|
  015cc	00000010	 DCD         0x10
  015d0		 |$LN35@SetMode|
  015d0	0000005c	 DCD         0x5c
  015d4		 |$LN36@SetMode|
  015d4	000000a8	 DCD         0xa8
  015d8		 |$LN37@SetMode|
  015d8	00000140	 DCD         0x140
  015dc		 |$LN38@SetMode|
  015dc	000000f4	 DCD         0xf4
  015e0		 |$LN10@SetMode|

; 591  :             {
; 592  :                 case DMDO_0:
; 593  :                     //  Set the rotation and orientation of the primary surface
; 594  :                     m_pPrimarySurf->SetOrientation( OMAP_SURF_ORIENTATION_STANDARD );

  015e0	e3a01000	 mov         r1, #0
  015e4	e59d30b8	 ldr         r3, [sp, #0xB8]
  015e8	e28330bc	 add         r3, r3, #0xBC
  015ec	e5932000	 ldr         r2, [r3]
  015f0	e59d30b8	 ldr         r3, [sp, #0xB8]
  015f4	e28330bc	 add         r3, r3, #0xBC
  015f8	e5930000	 ldr         r0, [r3]
  015fc	e5923000	 ldr         r3, [r2]
  01600	e2833048	 add         r3, r3, #0x48
  01604	e5933000	 ldr         r3, [r3]
  01608	e1a0e00f	 mov         lr, pc
  0160c	e12fff13	 bx          r3

; 595  :                     
; 596  :                     //  Set the output rotation angle for the pipeline
; 597  :                     m_pDisplayContr->RotatePipeline( OMAP_DSS_PIPELINE_GFX, OMAP_DSS_ROTATION_0 );

  01610	e3a02000	 mov         r2, #0
  01614	e3a01000	 mov         r1, #0
  01618	e59d30b8	 ldr         r3, [sp, #0xB8]
  0161c	e28330b0	 add         r3, r3, #0xB0
  01620	e5930000	 ldr         r0, [r3]
  01624	eb000000	 bl          |?RotatePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@W4OMAP_DSS_ROTATION@@@Z|

; 598  :                     break;

  01628	ea000038	 b           |$LN11@SetMode|
  0162c		 |$LN9@SetMode|

; 599  : 
; 600  :                 case DMDO_90:
; 601  :                     //  Set the rotation and orientation of the primary surface
; 602  :                     m_pPrimarySurf->SetOrientation( OMAP_SURF_ORIENTATION_ROTATED );

  0162c	e3a01001	 mov         r1, #1
  01630	e59d30b8	 ldr         r3, [sp, #0xB8]
  01634	e28330bc	 add         r3, r3, #0xBC
  01638	e5932000	 ldr         r2, [r3]
  0163c	e59d30b8	 ldr         r3, [sp, #0xB8]
  01640	e28330bc	 add         r3, r3, #0xBC
  01644	e5930000	 ldr         r0, [r3]
  01648	e5923000	 ldr         r3, [r2]
  0164c	e2833048	 add         r3, r3, #0x48
  01650	e5933000	 ldr         r3, [r3]
  01654	e1a0e00f	 mov         lr, pc
  01658	e12fff13	 bx          r3

; 603  :                     
; 604  :                     //  Set the output rotation angle for the pipeline
; 605  :                     m_pDisplayContr->RotatePipeline( OMAP_DSS_PIPELINE_GFX, OMAP_DSS_ROTATION_90 );

  0165c	e3a0205a	 mov         r2, #0x5A
  01660	e3a01000	 mov         r1, #0
  01664	e59d30b8	 ldr         r3, [sp, #0xB8]
  01668	e28330b0	 add         r3, r3, #0xB0
  0166c	e5930000	 ldr         r0, [r3]
  01670	eb000000	 bl          |?RotatePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@W4OMAP_DSS_ROTATION@@@Z|

; 606  :                     break;

  01674	ea000025	 b           |$LN11@SetMode|
  01678		 |$LN8@SetMode|

; 607  : 
; 608  :                 case DMDO_180:
; 609  :                     //  Set the rotation and orientation of the primary surface
; 610  :                     m_pPrimarySurf->SetOrientation( OMAP_SURF_ORIENTATION_STANDARD );

  01678	e3a01000	 mov         r1, #0
  0167c	e59d30b8	 ldr         r3, [sp, #0xB8]
  01680	e28330bc	 add         r3, r3, #0xBC
  01684	e5932000	 ldr         r2, [r3]
  01688	e59d30b8	 ldr         r3, [sp, #0xB8]
  0168c	e28330bc	 add         r3, r3, #0xBC
  01690	e5930000	 ldr         r0, [r3]
  01694	e5923000	 ldr         r3, [r2]
  01698	e2833048	 add         r3, r3, #0x48
  0169c	e5933000	 ldr         r3, [r3]
  016a0	e1a0e00f	 mov         lr, pc
  016a4	e12fff13	 bx          r3

; 611  :                     
; 612  :                     //  Set the output rotation angle for the pipeline
; 613  :                     m_pDisplayContr->RotatePipeline( OMAP_DSS_PIPELINE_GFX, OMAP_DSS_ROTATION_180 );

  016a8	e3a020b4	 mov         r2, #0xB4
  016ac	e3a01000	 mov         r1, #0
  016b0	e59d30b8	 ldr         r3, [sp, #0xB8]
  016b4	e28330b0	 add         r3, r3, #0xB0
  016b8	e5930000	 ldr         r0, [r3]
  016bc	eb000000	 bl          |?RotatePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@W4OMAP_DSS_ROTATION@@@Z|

; 614  :                     break;

  016c0	ea000012	 b           |$LN11@SetMode|
  016c4		 |$LN7@SetMode|

; 615  : 
; 616  :                 case DMDO_270:
; 617  :                     //  Set the rotation and orientation of the primary surface
; 618  :                     m_pPrimarySurf->SetOrientation( OMAP_SURF_ORIENTATION_ROTATED );

  016c4	e3a01001	 mov         r1, #1
  016c8	e59d30b8	 ldr         r3, [sp, #0xB8]
  016cc	e28330bc	 add         r3, r3, #0xBC
  016d0	e5932000	 ldr         r2, [r3]
  016d4	e59d30b8	 ldr         r3, [sp, #0xB8]
  016d8	e28330bc	 add         r3, r3, #0xBC
  016dc	e5930000	 ldr         r0, [r3]
  016e0	e5923000	 ldr         r3, [r2]
  016e4	e2833048	 add         r3, r3, #0x48
  016e8	e5933000	 ldr         r3, [r3]
  016ec	e1a0e00f	 mov         lr, pc
  016f0	e12fff13	 bx          r3

; 619  :                     
; 620  :                     //  Set the output rotation angle for the pipeline
; 621  :                     m_pDisplayContr->RotatePipeline( OMAP_DSS_PIPELINE_GFX, OMAP_DSS_ROTATION_270 );

  016f4	e3a02c01	 mov         r2, #1, 24
  016f8	e382200e	 orr         r2, r2, #0xE
  016fc	e3a01000	 mov         r1, #0
  01700	e59d30b8	 ldr         r3, [sp, #0xB8]
  01704	e28330b0	 add         r3, r3, #0xB0
  01708	e5930000	 ldr         r0, [r3]
  0170c	eb000000	 bl          |?RotatePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@W4OMAP_DSS_ROTATION@@@Z|
  01710		 |$LN11@SetMode|
  01710		 |$LN13@SetMode|

; 622  :                     break;
; 623  :             }
; 624  :         }
; 625  :         
; 626  : 
; 627  :         //  Setup the attributes of the primary surface pipeline to match LCD attributes
; 628  :         bResult = m_pDisplayContr->SetPipelineAttribs(
; 629  :                                     OMAP_DSS_PIPELINE_GFX,
; 630  :                                     OMAP_DSS_DESTINATION_LCD,
; 631  :                                     m_pPrimarySurf->OmapSurface() );

  01710	e59d30b8	 ldr         r3, [sp, #0xB8]
  01714	e28330bc	 add         r3, r3, #0xBC
  01718	e5930000	 ldr         r0, [r3]
  0171c	eb000000	 bl          |?OmapSurface@OMAPDDGPESurface@@QAAPAVOMAPSurface@@XZ|
  01720	e58d0060	 str         r0, [sp, #0x60]
  01724	e3a03000	 mov         r3, #0
  01728	e58d3004	 str         r3, [sp, #4]
  0172c	e3a03000	 mov         r3, #0
  01730	e58d3000	 str         r3, [sp]
  01734	e59d3060	 ldr         r3, [sp, #0x60]
  01738	e3a02000	 mov         r2, #0
  0173c	e3a01000	 mov         r1, #0
  01740	e59d00b8	 ldr         r0, [sp, #0xB8]
  01744	e28000b0	 add         r0, r0, #0xB0
  01748	e5900000	 ldr         r0, [r0]
  0174c	eb000000	 bl          |?SetPipelineAttribs@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@W4OMAP_DSS_DESTINATION@@PAVOMAPSurface@@KK@Z|
  01750	e58d0064	 str         r0, [sp, #0x64]
  01754	e59d3064	 ldr         r3, [sp, #0x64]
  01758	e58d300c	 str         r3, [sp, #0xC]

; 632  :         if( bResult == FALSE )

  0175c	e59d300c	 ldr         r3, [sp, #0xC]
  01760	e3530000	 cmp         r3, #0
  01764	1a00000c	 bne         |$LN6@SetMode|

; 633  :         {
; 634  :             DEBUGMSG (GPE_ZONE_ERROR, (L"ERROR: Unable to set graphics pipeline attributes\r\n"));

  01768	e59f3370	 ldr         r3, [pc, #0x370]
  0176c	e5933440	 ldr         r3, [r3, #0x440]
  01770	e3130001	 tst         r3, #1
  01774	0a000004	 beq         |$LN24@SetMode|
  01778	e59f036c	 ldr         r0, [pc, #0x36C]
  0177c	eb000000	 bl          NKDbgPrintfW
  01780	e3a03001	 mov         r3, #1
  01784	e58d3068	 str         r3, [sp, #0x68]
  01788	ea000001	 b           |$LN25@SetMode|
  0178c		 |$LN24@SetMode|
  0178c	e3a03000	 mov         r3, #0
  01790	e58d3068	 str         r3, [sp, #0x68]
  01794		 |$LN25@SetMode|

; 635  :             goto cleanUp;

  01794	ea0000c9	 b           |$LN5@SetMode|
  01798	ea0000c8	 b           |$cleanUp$42313|
  0179c		 |$LN6@SetMode|

; 636  :         }
; 637  : 
; 638  :         //  Enable the pipeline
; 639  :         bResult = m_pDisplayContr->EnablePipeline(
; 640  :                                     OMAP_DSS_PIPELINE_GFX );

  0179c	e3a01000	 mov         r1, #0
  017a0	e59d30b8	 ldr         r3, [sp, #0xB8]
  017a4	e28330b0	 add         r3, r3, #0xB0
  017a8	e5930000	 ldr         r0, [r3]
  017ac	eb000000	 bl          |?EnablePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@@Z|
  017b0	e58d006c	 str         r0, [sp, #0x6C]
  017b4	e59d306c	 ldr         r3, [sp, #0x6C]
  017b8	e58d300c	 str         r3, [sp, #0xC]

; 641  :         if( bResult == FALSE )

  017bc	e59d300c	 ldr         r3, [sp, #0xC]
  017c0	e3530000	 cmp         r3, #0
  017c4	1a00000c	 bne         |$LN4@SetMode|

; 642  :         {
; 643  :             DEBUGMSG (GPE_ZONE_ERROR, (L"ERROR: Unable to enable graphics pipeline\r\n"));

  017c8	e59f3310	 ldr         r3, [pc, #0x310]
  017cc	e5933440	 ldr         r3, [r3, #0x440]
  017d0	e3130001	 tst         r3, #1
  017d4	0a000004	 beq         |$LN26@SetMode|
  017d8	e59f0308	 ldr         r0, [pc, #0x308]
  017dc	eb000000	 bl          NKDbgPrintfW
  017e0	e3a03001	 mov         r3, #1
  017e4	e58d3070	 str         r3, [sp, #0x70]
  017e8	ea000001	 b           |$LN27@SetMode|
  017ec		 |$LN26@SetMode|
  017ec	e3a03000	 mov         r3, #0
  017f0	e58d3070	 str         r3, [sp, #0x70]
  017f4		 |$LN27@SetMode|

; 644  :             goto cleanUp;

  017f4	ea0000b1	 b           |$LN3@SetMode|
  017f8	ea0000b0	 b           |$cleanUp$42313|
  017fc		 |$LN4@SetMode|

; 645  :         }
; 646  : 
; 647  : 
; 648  :         //  Enable/disable TV out accordingly
; 649  :         m_pDisplayContr->EnableTvOut( m_bTVOutEnable );

  017fc	e59d30b8	 ldr         r3, [sp, #0xB8]
  01800	e2833e11	 add         r3, r3, #0x11, 28
  01804	e5931000	 ldr         r1, [r3]
  01808	e59d30b8	 ldr         r3, [sp, #0xB8]
  0180c	e28330b0	 add         r3, r3, #0xB0
  01810	e5930000	 ldr         r0, [r3]
  01814	eb000000	 bl          |?EnableTvOut@OMAPDisplayController@@QAAHH@Z|

; 650  : 
; 651  :         //  Get the best surface to display on the TV
; 652  :         DetermineTvOutSurface();

  01818	e3a01000	 mov         r1, #0
  0181c	e59d00b8	 ldr         r0, [sp, #0xB8]
  01820	eb000000	 bl          |?DetermineTvOutSurface@OMAPDDGPE@@QAAXH@Z|

; 653  : 
; 654  : 
; 655  :         //  Update extended mode information
; 656  :         m_pMode->width = m_pPrimarySurf->OmapSurface()->Width();

  01824	e59d30b8	 ldr         r3, [sp, #0xB8]
  01828	e28330bc	 add         r3, r3, #0xBC
  0182c	e5930000	 ldr         r0, [r3]
  01830	eb000000	 bl          |?OmapSurface@OMAPDDGPESurface@@QAAPAVOMAPSurface@@XZ|
  01834	e58d0074	 str         r0, [sp, #0x74]
  01838	e59d3074	 ldr         r3, [sp, #0x74]
  0183c	e58d3078	 str         r3, [sp, #0x78]
  01840	e3a01000	 mov         r1, #0
  01844	e59d0078	 ldr         r0, [sp, #0x78]
  01848	e59d3078	 ldr         r3, [sp, #0x78]
  0184c	e5933000	 ldr         r3, [r3]
  01850	e2833008	 add         r3, r3, #8
  01854	e5933000	 ldr         r3, [r3]
  01858	e1a0e00f	 mov         lr, pc
  0185c	e12fff13	 bx          r3
  01860	e58d007c	 str         r0, [sp, #0x7C]
  01864	e59d30b8	 ldr         r3, [sp, #0xB8]
  01868	e2833010	 add         r3, r3, #0x10
  0186c	e5933000	 ldr         r3, [r3]
  01870	e2832004	 add         r2, r3, #4
  01874	e59d307c	 ldr         r3, [sp, #0x7C]
  01878	e5823000	 str         r3, [r2]

; 657  :         m_pMode->height = m_pPrimarySurf->OmapSurface()->Height();

  0187c	e59d30b8	 ldr         r3, [sp, #0xB8]
  01880	e28330bc	 add         r3, r3, #0xBC
  01884	e5930000	 ldr         r0, [r3]
  01888	eb000000	 bl          |?OmapSurface@OMAPDDGPESurface@@QAAPAVOMAPSurface@@XZ|
  0188c	e58d0080	 str         r0, [sp, #0x80]
  01890	e59d3080	 ldr         r3, [sp, #0x80]
  01894	e58d3084	 str         r3, [sp, #0x84]
  01898	e3a01000	 mov         r1, #0
  0189c	e59d0084	 ldr         r0, [sp, #0x84]
  018a0	e59d3084	 ldr         r3, [sp, #0x84]
  018a4	e5933000	 ldr         r3, [r3]
  018a8	e283300c	 add         r3, r3, #0xC
  018ac	e5933000	 ldr         r3, [r3]
  018b0	e1a0e00f	 mov         lr, pc
  018b4	e12fff13	 bx          r3
  018b8	e58d0088	 str         r0, [sp, #0x88]
  018bc	e59d30b8	 ldr         r3, [sp, #0xB8]
  018c0	e2833010	 add         r3, r3, #0x10
  018c4	e5933000	 ldr         r3, [r3]
  018c8	e2832008	 add         r2, r3, #8
  018cc	e59d3088	 ldr         r3, [sp, #0x88]
  018d0	e5823000	 str         r3, [r2]

; 658  :         m_pModeEx->lPitch = m_pPrimarySurf->OmapSurface()->Stride();

  018d4	e59d30b8	 ldr         r3, [sp, #0xB8]
  018d8	e28330bc	 add         r3, r3, #0xBC
  018dc	e5930000	 ldr         r0, [r3]
  018e0	eb000000	 bl          |?OmapSurface@OMAPDDGPESurface@@QAAPAVOMAPSurface@@XZ|
  018e4	e58d008c	 str         r0, [sp, #0x8C]
  018e8	e59d308c	 ldr         r3, [sp, #0x8C]
  018ec	e58d3090	 str         r3, [sp, #0x90]
  018f0	e3a01000	 mov         r1, #0
  018f4	e59d0090	 ldr         r0, [sp, #0x90]
  018f8	e59d3090	 ldr         r3, [sp, #0x90]
  018fc	e5933000	 ldr         r3, [r3]
  01900	e2833010	 add         r3, r3, #0x10
  01904	e5933000	 ldr         r3, [r3]
  01908	e1a0e00f	 mov         lr, pc
  0190c	e12fff13	 bx          r3
  01910	e58d0094	 str         r0, [sp, #0x94]
  01914	e59d30b8	 ldr         r3, [sp, #0xB8]
  01918	e2833024	 add         r3, r3, #0x24
  0191c	e5933000	 ldr         r3, [r3]
  01920	e2832040	 add         r2, r3, #0x40
  01924	e59d3094	 ldr         r3, [sp, #0x94]
  01928	e5823000	 str         r3, [r2]

; 659  :                 
; 660  :         OMAPDDGPE::PixelFormatToBitMask(m_pPrimarySurf->OmapSurface()->PixelFormat(), 
; 661  :                                         &m_pModeEx->dwAlphaBitMask,
; 662  :                                         &m_pModeEx->dwRBitMask,
; 663  :                                         &m_pModeEx->dwGBitMask,
; 664  :                                         &m_pModeEx->dwBBitMask);

  0192c	e59d30b8	 ldr         r3, [sp, #0xB8]
  01930	e28330bc	 add         r3, r3, #0xBC
  01934	e5930000	 ldr         r0, [r3]
  01938	eb000000	 bl          |?OmapSurface@OMAPDDGPESurface@@QAAPAVOMAPSurface@@XZ|
  0193c	e58d0098	 str         r0, [sp, #0x98]
  01940	e59d0098	 ldr         r0, [sp, #0x98]
  01944	eb000000	 bl          |?PixelFormat@OMAPSurface@@QAA?AW4OMAP_DSS_PIXELFORMAT@@XZ|
  01948	e58d009c	 str         r0, [sp, #0x9C]
  0194c	e59d30b8	 ldr         r3, [sp, #0xB8]
  01950	e2833024	 add         r3, r3, #0x24
  01954	e5933000	 ldr         r3, [r3]
  01958	e2833050	 add         r3, r3, #0x50
  0195c	e58d3000	 str         r3, [sp]
  01960	e59d30b8	 ldr         r3, [sp, #0xB8]
  01964	e2833024	 add         r3, r3, #0x24
  01968	e5933000	 ldr         r3, [r3]
  0196c	e283304c	 add         r3, r3, #0x4C
  01970	e59d20b8	 ldr         r2, [sp, #0xB8]
  01974	e2822024	 add         r2, r2, #0x24
  01978	e5922000	 ldr         r2, [r2]
  0197c	e2822048	 add         r2, r2, #0x48
  01980	e59d10b8	 ldr         r1, [sp, #0xB8]
  01984	e2811024	 add         r1, r1, #0x24
  01988	e5911000	 ldr         r1, [r1]
  0198c	e2811054	 add         r1, r1, #0x54
  01990	e59d009c	 ldr         r0, [sp, #0x9C]
  01994	eb000000	 bl          |?PixelFormatToBitMask@OMAPDDGPE@@SAHW4OMAP_DSS_PIXELFORMAT@@PAK111@Z|

; 665  : 
; 666  : 
; 667  :         //  Allocate palette for selected mode
; 668  :         if (palette)

  01998	e59d30c0	 ldr         r3, [sp, #0xC0]
  0199c	e3530000	 cmp         r3, #0
  019a0	0a000035	 beq         |$LN2@SetMode|

; 669  :         {
; 670  :             ULONG   uNumColors = (m_pModeEx->dwAlphaBitMask == 0) ? 3 : 4;

  019a4	e59d30b8	 ldr         r3, [sp, #0xB8]
  019a8	e2833024	 add         r3, r3, #0x24
  019ac	e5933000	 ldr         r3, [r3]
  019b0	e2833054	 add         r3, r3, #0x54
  019b4	e5933000	 ldr         r3, [r3]
  019b8	e3530000	 cmp         r3, #0
  019bc	1a000002	 bne         |$LN28@SetMode|
  019c0	e3a03003	 mov         r3, #3
  019c4	e58d30a0	 str         r3, [sp, #0xA0]
  019c8	ea000001	 b           |$LN29@SetMode|
  019cc		 |$LN28@SetMode|
  019cc	e3a03004	 mov         r3, #4
  019d0	e58d30a0	 str         r3, [sp, #0xA0]
  019d4		 |$LN29@SetMode|
  019d4	e59d30a0	 ldr         r3, [sp, #0xA0]
  019d8	e58d3020	 str         r3, [sp, #0x20]

; 671  :             ULONG   uColors[4];
; 672  : 
; 673  :             //  Colors are always in RGBA order
; 674  :             uColors[0] = m_pModeEx->dwRBitMask;

  019dc	e59d30b8	 ldr         r3, [sp, #0xB8]
  019e0	e2833024	 add         r3, r3, #0x24
  019e4	e5933000	 ldr         r3, [r3]
  019e8	e2833048	 add         r3, r3, #0x48
  019ec	e5933000	 ldr         r3, [r3]
  019f0	e58d3010	 str         r3, [sp, #0x10]

; 675  :             uColors[1] = m_pModeEx->dwGBitMask;

  019f4	e59d30b8	 ldr         r3, [sp, #0xB8]
  019f8	e2833024	 add         r3, r3, #0x24
  019fc	e5933000	 ldr         r3, [r3]
  01a00	e283304c	 add         r3, r3, #0x4C
  01a04	e5933000	 ldr         r3, [r3]
  01a08	e58d3014	 str         r3, [sp, #0x14]

; 676  :             uColors[2] = m_pModeEx->dwBBitMask;

  01a0c	e59d30b8	 ldr         r3, [sp, #0xB8]
  01a10	e2833024	 add         r3, r3, #0x24
  01a14	e5933000	 ldr         r3, [r3]
  01a18	e2833050	 add         r3, r3, #0x50
  01a1c	e5933000	 ldr         r3, [r3]
  01a20	e58d3018	 str         r3, [sp, #0x18]

; 677  :             uColors[3] = m_pModeEx->dwAlphaBitMask;

  01a24	e59d30b8	 ldr         r3, [sp, #0xB8]
  01a28	e2833024	 add         r3, r3, #0x24
  01a2c	e5933000	 ldr         r3, [r3]
  01a30	e2833054	 add         r3, r3, #0x54
  01a34	e5933000	 ldr         r3, [r3]
  01a38	e58d301c	 str         r3, [sp, #0x1C]

; 678  : 
; 679  :             //  Create palette info for selected mode
; 680  :             *palette = EngCreatePalette (
; 681  :                             PAL_BITFIELDS,
; 682  :                             uNumColors,
; 683  :                             uColors,
; 684  :                             0,
; 685  :                             0,
; 686  :                             0);

  01a3c	e3a03000	 mov         r3, #0
  01a40	e58d3004	 str         r3, [sp, #4]
  01a44	e3a03000	 mov         r3, #0
  01a48	e58d3000	 str         r3, [sp]
  01a4c	e3a03000	 mov         r3, #0
  01a50	e28d2010	 add         r2, sp, #0x10
  01a54	e59d1020	 ldr         r1, [sp, #0x20]
  01a58	e3a00002	 mov         r0, #2
  01a5c	e59fe080	 ldr         lr, [pc, #0x80]
  01a60	e59e4000	 ldr         r4, [lr]
  01a64	e1a0e00f	 mov         lr, pc
  01a68	e12fff14	 bx          r4
  01a6c	e58d00a4	 str         r0, [sp, #0xA4]
  01a70	e59d20a4	 ldr         r2, [sp, #0xA4]
  01a74	e59d30c0	 ldr         r3, [sp, #0xC0]
  01a78	e5832000	 str         r2, [r3]
  01a7c		 |$LN2@SetMode|

; 687  :         }
; 688  : 
; 689  :         //  Success
; 690  :         scResult = S_OK;

  01a7c	e3a03000	 mov         r3, #0
  01a80	e58d3008	 str         r3, [sp, #8]

; 691  :     }
; 692  :     else

  01a84	ea00000d	 b           |$LN1@SetMode|
  01a88		 |$LN16@SetMode|

; 693  :     {
; 694  :         DEBUGMSG (GPE_ZONE_ERROR, (L"ERROR: Invalid modeId value %d\r\n", modeId));

  01a88	e59f3050	 ldr         r3, [pc, #0x50]
  01a8c	e5933440	 ldr         r3, [r3, #0x440]
  01a90	e3130001	 tst         r3, #1
  01a94	0a000005	 beq         |$LN30@SetMode|
  01a98	e59d10bc	 ldr         r1, [sp, #0xBC]
  01a9c	e59f0038	 ldr         r0, [pc, #0x38]
  01aa0	eb000000	 bl          NKDbgPrintfW
  01aa4	e3a03001	 mov         r3, #1
  01aa8	e58d30a8	 str         r3, [sp, #0xA8]
  01aac	ea000001	 b           |$LN31@SetMode|
  01ab0		 |$LN30@SetMode|
  01ab0	e3a03000	 mov         r3, #0
  01ab4	e58d30a8	 str         r3, [sp, #0xA8]
  01ab8		 |$LN31@SetMode|

; 695  :         scResult = E_INVALIDARG;

  01ab8	e59f3018	 ldr         r3, [pc, #0x18]
  01abc	e58d3008	 str         r3, [sp, #8]
  01ac0		 |$LN1@SetMode|
  01ac0		 |$LN3@SetMode|
  01ac0		 |$LN5@SetMode|
  01ac0		 |$LN14@SetMode|
  01ac0		 |$cleanUp$42313|

; 696  :     }
; 697  : 
; 698  : cleanUp:
; 699  :     //  Retrun result
; 700  :     return scResult;

  01ac0	e59d3008	 ldr         r3, [sp, #8]
  01ac4	e58d3024	 str         r3, [sp, #0x24]
  01ac8		 |$LN18@SetMode|

; 701  : }

  01ac8	e59d0024	 ldr         r0, [sp, #0x24]
  01acc	e28dd0ac	 add         sp, sp, #0xAC
  01ad0	e89d6010	 ldmia       sp, {r4, sp, lr}
  01ad4	e12fff1e	 bx          lr
  01ad8		 |$LN42@SetMode|
  01ad8		 |$LN43@SetMode|
  01ad8	80070057	 DCD         0x80070057
  01adc		 |$LN44@SetMode|
  01adc	00000000	 DCD         |??_C@_1EC@MNPJBNCJ@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAm?$AAo?$AAd?$AAe?$AAI?$AAd?$AA?5?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6@|
  01ae0		 |$LN45@SetMode|
  01ae0	00000000	 DCD         |dpCurSettings|
  01ae4		 |$LN46@SetMode|
  01ae4	00000000	 DCD         |EngCreatePalette|
  01ae8		 |$LN47@SetMode|
  01ae8	00000000	 DCD         |??_C@_1FI@EOMLOOKK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAe?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAg?$AAr?$AAa?$AAp?$AAh?$AAi?$AAc?$AAs@|
  01aec		 |$LN48@SetMode|
  01aec	00000000	 DCD         |??_C@_1GI@LDOCGIDM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAs?$AAe?$AAt?$AA?5?$AAg?$AAr?$AAa?$AAp?$AAh?$AAi?$AAc?$AAs?$AA?5?$AAp?$AAi@|
  01af0		 |$LN49@SetMode|
  01af0	00000000	 DCD         |??_C@_1FI@FGBBFJN@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAp?$AAr?$AAi?$AAm?$AAa?$AAr@|
  01af4		 |$LN50@SetMode|
  01af4	00000000	 DCD         |??_C@_1CK@KICMJMOM@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAS?$AAe?$AAt?$AAM?$AAo?$AAd?$AAe?$AA?$AN?$AA?6?$AA?$AA@|
  01af8		 |$M43464|

			 ENDP  ; |?SetMode@OMAPDDGPE@@UAAJHPAPAUHPALETTE__@@@Z|, OMAPDDGPE::SetMode

; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\inc\dssai.h

  00000			 AREA	 |.pdata|, PDATA
|$T43481| DCD	|$LN5@PixelForma|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?PixelFormat@OMAPSurface@@QAA?AW4OMAP_DSS_PIXELFORMAT@@XZ| PROC ; OMAPSurface::PixelFormat

; 760  :     OMAP_DSS_PIXELFORMAT    PixelFormat() { return m_ePixelFormat; }

  00000		 |$LN5@PixelForma|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M43478|
  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e2833004	 add         r3, r3, #4
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3000	 str         r3, [sp]
  00020	e59d0000	 ldr         r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M43479|

			 ENDP  ; |?PixelFormat@OMAPSurface@@QAA?AW4OMAP_DSS_PIXELFORMAT@@XZ|, OMAPSurface::PixelFormat

; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\inc\omap_ddgpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T43489| DCD	|$LN5@OmapSurfac|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?OmapSurface@OMAPDDGPESurface@@QAAPAVOMAPSurface@@XZ| PROC ; OMAPDDGPESurface::OmapSurface

; 102  :     OMAPSurface*        OmapSurface() { return m_pSurface; }

  00000		 |$LN5@OmapSurfac|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M43486|
  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e283307c	 add         r3, r3, #0x7C
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3000	 str         r3, [sp]
  00020	e59d0000	 ldr         r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M43487|

			 ENDP  ; |?OmapSurface@OMAPDDGPESurface@@QAAPAVOMAPSurface@@XZ|, OMAPDDGPESurface::OmapSurface

	EXPORT	|??_C@_1DA@GOBNHOND@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAS?$AAe?$AAt?$AAP?$AAa?$AAl?$AAe?$AAt?$AAt?$AAe?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00060			 AREA	 |.pdata|, PDATA
|$T43499| DCD	|$LN7@SetPalette|
	DCD	0x40001704
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\ddgpe\omap_ddgpe.cpp

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@GOBNHOND@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAS?$AAe?$AAt?$AAP?$AAa?$AAl?$AAe?$AAt?$AAt?$AAe?$AA?$AN?$AA?6?$AA?$AA@| DCB "O"
	DCB	0x0, "M", 0x0, "A", 0x0, "P", 0x0, "D", 0x0, "D", 0x0, "G"
	DCB	0x0, "P", 0x0, "E", 0x0, ":", 0x0, ":", 0x0, "S", 0x0, "e"
	DCB	0x0, "t", 0x0, "P", 0x0, "a", 0x0, "l", 0x0, "e", 0x0, "t"
	DCB	0x0, "t", 0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  01af8			 AREA	 |.text|, CODE, ARM

  01af8		 |?SetPalette@OMAPDDGPE@@UAAJPBUtagPALETTEENTRY@@GG@Z| PROC ; OMAPDDGPE::SetPalette

; 710  : {

  01af8		 |$LN7@SetPalette|
  01af8	e1a0c00d	 mov         r12, sp
  01afc	e92d000f	 stmdb       sp!, {r0 - r3}
  01b00	e92d5000	 stmdb       sp!, {r12, lr}
  01b04	e24dd008	 sub         sp, sp, #8
  01b08		 |$M43496|

; 711  :     UNREFERENCED_PARAMETER(source);
; 712  :     UNREFERENCED_PARAMETER(firstEntry);
; 713  :     UNREFERENCED_PARAMETER(numEntries);
; 714  :     DEBUGMSG (GPE_ZONE_INIT, (TEXT("OMAPDDGPE::SetPalette\r\n")));

  01b08	e59f3040	 ldr         r3, [pc, #0x40]
  01b0c	e5933440	 ldr         r3, [r3, #0x440]
  01b10	e3130020	 tst         r3, #0x20
  01b14	0a000004	 beq         |$LN3@SetPalette|
  01b18	e59f002c	 ldr         r0, [pc, #0x2C]
  01b1c	eb000000	 bl          NKDbgPrintfW
  01b20	e3a03001	 mov         r3, #1
  01b24	e58d3004	 str         r3, [sp, #4]
  01b28	ea000001	 b           |$LN4@SetPalette|
  01b2c		 |$LN3@SetPalette|
  01b2c	e3a03000	 mov         r3, #0
  01b30	e58d3004	 str         r3, [sp, #4]
  01b34		 |$LN4@SetPalette|

; 715  :     return    S_OK;

  01b34	e3a03000	 mov         r3, #0
  01b38	e58d3000	 str         r3, [sp]

; 716  : }

  01b3c	e59d0000	 ldr         r0, [sp]
  01b40	e28dd008	 add         sp, sp, #8
  01b44	e89d6000	 ldmia       sp, {sp, lr}
  01b48	e12fff1e	 bx          lr
  01b4c		 |$LN8@SetPalette|
  01b4c		 |$LN9@SetPalette|
  01b4c	00000000	 DCD         |??_C@_1DA@GOBNHOND@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAS?$AAe?$AAt?$AAP?$AAa?$AAl?$AAe?$AAt?$AAt?$AAe?$AA?$AN?$AA?6?$AA?$AA@|
  01b50		 |$LN10@SetPalette|
  01b50	00000000	 DCD         |dpCurSettings|
  01b54		 |$M43497|

			 ENDP  ; |?SetPalette@OMAPDDGPE@@UAAJPBUtagPALETTEENTRY@@GG@Z|, OMAPDDGPE::SetPalette

	EXPORT	|??_C@_1EC@DBKMPIKC@?$AA?5?$AA?5?$AA?5?$AA?5?$AAv?$AAi?$AAd?$AAe?$AAo?$AAM?$AAe?$AAm?$AAo?$AAr?$AAy?$AAF?$AAr?$AAe?$AAe?$AA?5?$AA?5?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EC@IMEGDLNM@?$AA?5?$AA?5?$AA?5?$AA?5?$AAv?$AAi?$AAd?$AAe?$AAo?$AAM?$AAe?$AAm?$AAo?$AAr?$AAy?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?5?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EC@JFKHFFLJ@?$AA?5?$AA?5?$AA?5?$AA?5?$AAv?$AAi?$AAr?$AAt?$AAu?$AAa?$AAl?$AAM?$AAe?$AAm?$AAo?$AAr?$AAy?$AAB?$AAa?$AAs?$AAe?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EG@FEEBIFDH@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAG?$AAe?$AAt?$AAV?$AAi?$AAr?$AAt?$AAu?$AAa?$AAl?$AAV?$AAi?$AAd?$AAe?$AAo?$AAM?$AAe?$AAm?$AAo?$AAr?$AAy@| [ DATA ] ; `string'
	EXPORT	|?GetVirtualVideoMemory@OMAPDDGPE@@QAAXPAK00@Z| ; OMAPDDGPE::GetVirtualVideoMemory

  00068			 AREA	 |.pdata|, PDATA
|$T43515| DCD	|$LN13@GetVirtual|
	DCD	0x40006b04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EC@DBKMPIKC@?$AA?5?$AA?5?$AA?5?$AA?5?$AAv?$AAi?$AAd?$AAe?$AAo?$AAM?$AAe?$AAm?$AAo?$AAr?$AAy?$AAF?$AAr?$AAe?$AAe?$AA?5?$AA?5?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6@| DCB " "
	DCB	0x0, " ", 0x0, " ", 0x0, " ", 0x0, "v", 0x0, "i", 0x0, "d"
	DCB	0x0, "e", 0x0, "o", 0x0, "M", 0x0, "e", 0x0, "m", 0x0, "o"
	DCB	0x0, "r", 0x0, "y", 0x0, "F", 0x0, "r", 0x0, "e", 0x0, "e"
	DCB	0x0, " ", 0x0, " ", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EC@IMEGDLNM@?$AA?5?$AA?5?$AA?5?$AA?5?$AAv?$AAi?$AAd?$AAe?$AAo?$AAM?$AAe?$AAm?$AAo?$AAr?$AAy?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?5?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6@| DCB " "
	DCB	0x0, " ", 0x0, " ", 0x0, " ", 0x0, "v", 0x0, "i", 0x0, "d"
	DCB	0x0, "e", 0x0, "o", 0x0, "M", 0x0, "e", 0x0, "m", 0x0, "o"
	DCB	0x0, "r", 0x0, "y", 0x0, "S", 0x0, "i", 0x0, "z", 0x0, "e"
	DCB	0x0, " ", 0x0, " ", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EC@JFKHFFLJ@?$AA?5?$AA?5?$AA?5?$AA?5?$AAv?$AAi?$AAr?$AAt?$AAu?$AAa?$AAl?$AAM?$AAe?$AAm?$AAo?$AAr?$AAy?$AAB?$AAa?$AAs?$AAe?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6@| DCB " "
	DCB	0x0, " ", 0x0, " ", 0x0, " ", 0x0, "v", 0x0, "i", 0x0, "r"
	DCB	0x0, "t", 0x0, "u", 0x0, "a", 0x0, "l", 0x0, "M", 0x0, "e"
	DCB	0x0, "m", 0x0, "o", 0x0, "r", 0x0, "y", 0x0, "B", 0x0, "a"
	DCB	0x0, "s", 0x0, "e", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EG@FEEBIFDH@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAG?$AAe?$AAt?$AAV?$AAi?$AAr?$AAt?$AAu?$AAa?$AAl?$AAV?$AAi?$AAd?$AAe?$AAo?$AAM?$AAe?$AAm?$AAo?$AAr?$AAy@| DCB "O"
	DCB	0x0, "M", 0x0, "A", 0x0, "P", 0x0, "D", 0x0, "D", 0x0, "G"
	DCB	0x0, "P", 0x0, "E", 0x0, ":", 0x0, ":", 0x0, "G", 0x0, "e"
	DCB	0x0, "t", 0x0, "V", 0x0, "i", 0x0, "r", 0x0, "t", 0x0, "u"
	DCB	0x0, "a", 0x0, "l", 0x0, "V", 0x0, "i", 0x0, "d", 0x0, "e"
	DCB	0x0, "o", 0x0, "M", 0x0, "e", 0x0, "m", 0x0, "o", 0x0, "r"
	DCB	0x0, "y", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  01b54			 AREA	 |.text|, CODE, ARM

  01b54		 |?GetVirtualVideoMemory@OMAPDDGPE@@QAAXPAK00@Z| PROC ; OMAPDDGPE::GetVirtualVideoMemory

; 725  : {

  01b54		 |$LN13@GetVirtual|
  01b54	e1a0c00d	 mov         r12, sp
  01b58	e92d000f	 stmdb       sp!, {r0 - r3}
  01b5c	e92d5000	 stmdb       sp!, {r12, lr}
  01b60	e24dd01c	 sub         sp, sp, #0x1C
  01b64		 |$M43512|

; 726  :     DEBUGMSG (GPE_ZONE_VIDEOMEMORY, (TEXT("OMAPDDGPE::GetVirtualVideoMemory\r\n")));

  01b64	e59f3184	 ldr         r3, [pc, #0x184]
  01b68	e5933440	 ldr         r3, [r3, #0x440]
  01b6c	e3130901	 tst         r3, #1, 18
  01b70	0a000004	 beq         |$LN3@GetVirtual|
  01b74	e59f0180	 ldr         r0, [pc, #0x180]
  01b78	eb000000	 bl          NKDbgPrintfW
  01b7c	e3a03001	 mov         r3, #1
  01b80	e58d3000	 str         r3, [sp]
  01b84	ea000001	 b           |$LN4@GetVirtual|
  01b88		 |$LN3@GetVirtual|
  01b88	e3a03000	 mov         r3, #0
  01b8c	e58d3000	 str         r3, [sp]
  01b90		 |$LN4@GetVirtual|

; 727  : 
; 728  :     *virtualMemoryBase = (ULONG) m_pSurfaceMgr->VirtualBaseAddr();

  01b90	e59d3024	 ldr         r3, [sp, #0x24]
  01b94	e28330b4	 add         r3, r3, #0xB4
  01b98	e5932000	 ldr         r2, [r3]
  01b9c	e59d3024	 ldr         r3, [sp, #0x24]
  01ba0	e28330b4	 add         r3, r3, #0xB4
  01ba4	e5930000	 ldr         r0, [r3]
  01ba8	e5923000	 ldr         r3, [r2]
  01bac	e2833010	 add         r3, r3, #0x10
  01bb0	e5933000	 ldr         r3, [r3]
  01bb4	e1a0e00f	 mov         lr, pc
  01bb8	e12fff13	 bx          r3
  01bbc	e58d0004	 str         r0, [sp, #4]
  01bc0	e59d2004	 ldr         r2, [sp, #4]
  01bc4	e59d3028	 ldr         r3, [sp, #0x28]
  01bc8	e5832000	 str         r2, [r3]

; 729  :     *videoMemorySize   = m_pSurfaceMgr->TotalMemorySize();

  01bcc	e59d3024	 ldr         r3, [sp, #0x24]
  01bd0	e28330b4	 add         r3, r3, #0xB4
  01bd4	e5932000	 ldr         r2, [r3]
  01bd8	e59d3024	 ldr         r3, [sp, #0x24]
  01bdc	e28330b4	 add         r3, r3, #0xB4
  01be0	e5930000	 ldr         r0, [r3]
  01be4	e5923000	 ldr         r3, [r2]
  01be8	e2833008	 add         r3, r3, #8
  01bec	e5933000	 ldr         r3, [r3]
  01bf0	e1a0e00f	 mov         lr, pc
  01bf4	e12fff13	 bx          r3
  01bf8	e58d0008	 str         r0, [sp, #8]
  01bfc	e59d2008	 ldr         r2, [sp, #8]
  01c00	e59d302c	 ldr         r3, [sp, #0x2C]
  01c04	e5832000	 str         r2, [r3]

; 730  :     *videoMemoryFree   = m_pSurfaceMgr->FreeMemorySize();

  01c08	e59d3024	 ldr         r3, [sp, #0x24]
  01c0c	e28330b4	 add         r3, r3, #0xB4
  01c10	e5932000	 ldr         r2, [r3]
  01c14	e59d3024	 ldr         r3, [sp, #0x24]
  01c18	e28330b4	 add         r3, r3, #0xB4
  01c1c	e5930000	 ldr         r0, [r3]
  01c20	e5923000	 ldr         r3, [r2]
  01c24	e283300c	 add         r3, r3, #0xC
  01c28	e5933000	 ldr         r3, [r3]
  01c2c	e1a0e00f	 mov         lr, pc
  01c30	e12fff13	 bx          r3
  01c34	e58d000c	 str         r0, [sp, #0xC]
  01c38	e59d200c	 ldr         r2, [sp, #0xC]
  01c3c	e59d3030	 ldr         r3, [sp, #0x30]
  01c40	e5832000	 str         r2, [r3]

; 731  : 
; 732  :     DEBUGMSG (GPE_ZONE_VIDEOMEMORY, (TEXT("    virtualMemoryBase = 0x%08x\r\n"), *virtualMemoryBase));

  01c44	e59f30a4	 ldr         r3, [pc, #0xA4]
  01c48	e5933440	 ldr         r3, [r3, #0x440]
  01c4c	e3130901	 tst         r3, #1, 18
  01c50	0a000006	 beq         |$LN5@GetVirtual|
  01c54	e59d3028	 ldr         r3, [sp, #0x28]
  01c58	e5931000	 ldr         r1, [r3]
  01c5c	e59f0094	 ldr         r0, [pc, #0x94]
  01c60	eb000000	 bl          NKDbgPrintfW
  01c64	e3a03001	 mov         r3, #1
  01c68	e58d3010	 str         r3, [sp, #0x10]
  01c6c	ea000001	 b           |$LN6@GetVirtual|
  01c70		 |$LN5@GetVirtual|
  01c70	e3a03000	 mov         r3, #0
  01c74	e58d3010	 str         r3, [sp, #0x10]
  01c78		 |$LN6@GetVirtual|

; 733  :     DEBUGMSG (GPE_ZONE_VIDEOMEMORY, (TEXT("    videoMemorySize   = 0x%08x\r\n"), *videoMemorySize));

  01c78	e59f3070	 ldr         r3, [pc, #0x70]
  01c7c	e5933440	 ldr         r3, [r3, #0x440]
  01c80	e3130901	 tst         r3, #1, 18
  01c84	0a000006	 beq         |$LN7@GetVirtual|
  01c88	e59d302c	 ldr         r3, [sp, #0x2C]
  01c8c	e5931000	 ldr         r1, [r3]
  01c90	e59f005c	 ldr         r0, [pc, #0x5C]
  01c94	eb000000	 bl          NKDbgPrintfW
  01c98	e3a03001	 mov         r3, #1
  01c9c	e58d3014	 str         r3, [sp, #0x14]
  01ca0	ea000001	 b           |$LN8@GetVirtual|
  01ca4		 |$LN7@GetVirtual|
  01ca4	e3a03000	 mov         r3, #0
  01ca8	e58d3014	 str         r3, [sp, #0x14]
  01cac		 |$LN8@GetVirtual|

; 734  :     DEBUGMSG (GPE_ZONE_VIDEOMEMORY, (TEXT("    videoMemoryFree   = 0x%08x\r\n"), *videoMemoryFree));

  01cac	e59f303c	 ldr         r3, [pc, #0x3C]
  01cb0	e5933440	 ldr         r3, [r3, #0x440]
  01cb4	e3130901	 tst         r3, #1, 18
  01cb8	0a000006	 beq         |$LN9@GetVirtual|
  01cbc	e59d3030	 ldr         r3, [sp, #0x30]
  01cc0	e5931000	 ldr         r1, [r3]
  01cc4	e59f0020	 ldr         r0, [pc, #0x20]
  01cc8	eb000000	 bl          NKDbgPrintfW
  01ccc	e3a03001	 mov         r3, #1
  01cd0	e58d3018	 str         r3, [sp, #0x18]
  01cd4	ea000001	 b           |$LN10@GetVirtual|
  01cd8		 |$LN9@GetVirtual|
  01cd8	e3a03000	 mov         r3, #0
  01cdc	e58d3018	 str         r3, [sp, #0x18]
  01ce0		 |$LN10@GetVirtual|

; 735  : }

  01ce0	e28dd01c	 add         sp, sp, #0x1C
  01ce4	e89d6000	 ldmia       sp, {sp, lr}
  01ce8	e12fff1e	 bx          lr
  01cec		 |$LN14@GetVirtual|
  01cec		 |$LN15@GetVirtual|
  01cec	00000000	 DCD         |??_C@_1EC@DBKMPIKC@?$AA?5?$AA?5?$AA?5?$AA?5?$AAv?$AAi?$AAd?$AAe?$AAo?$AAM?$AAe?$AAm?$AAo?$AAr?$AAy?$AAF?$AAr?$AAe?$AAe?$AA?5?$AA?5?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6@|
  01cf0		 |$LN16@GetVirtual|
  01cf0	00000000	 DCD         |dpCurSettings|
  01cf4		 |$LN17@GetVirtual|
  01cf4	00000000	 DCD         |??_C@_1EC@IMEGDLNM@?$AA?5?$AA?5?$AA?5?$AA?5?$AAv?$AAi?$AAd?$AAe?$AAo?$AAM?$AAe?$AAm?$AAo?$AAr?$AAy?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?5?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6@|
  01cf8		 |$LN18@GetVirtual|
  01cf8	00000000	 DCD         |??_C@_1EC@JFKHFFLJ@?$AA?5?$AA?5?$AA?5?$AA?5?$AAv?$AAi?$AAr?$AAt?$AAu?$AAa?$AAl?$AAM?$AAe?$AAm?$AAo?$AAr?$AAy?$AAB?$AAa?$AAs?$AAe?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6@|
  01cfc		 |$LN19@GetVirtual|
  01cfc	00000000	 DCD         |??_C@_1EG@FEEBIFDH@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAG?$AAe?$AAt?$AAV?$AAi?$AAr?$AAt?$AAu?$AAa?$AAl?$AAV?$AAi?$AAd?$AAe?$AAo?$AAM?$AAe?$AAm?$AAo?$AAr?$AAy@|
  01d00		 |$M43513|

			 ENDP  ; |?GetVirtualVideoMemory@OMAPDDGPE@@QAAXPAK00@Z|, OMAPDDGPE::GetVirtualVideoMemory


  00070			 AREA	 |.pdata|, PDATA
|$T43526| DCD	|$LN5@DDHALInfo|
	DCD	0x40000503
; Function compile flags: /Odtp

  01d00			 AREA	 |.text|, CODE, ARM

  01d00		 |?DDHALInfo@OMAPDDGPE@@UAAXPAU_DDHALINFO@@K@Z| PROC ; OMAPDDGPE::DDHALInfo

; 774  : {

  01d00		 |$LN5@DDHALInfo|
  01d00	e1a0c00d	 mov         r12, sp
  01d04	e92d0007	 stmdb       sp!, {r0 - r2}
  01d08	e92d5000	 stmdb       sp!, {r12, lr}
  01d0c		 |$M43523|

; 775  :     UNREFERENCED_PARAMETER(lpddhi);
; 776  :     UNREFERENCED_PARAMETER(modeidx);
; 777  : }

  01d0c	e89d6000	 ldmia       sp, {sp, lr}
  01d10	e12fff1e	 bx          lr
  01d14		 |$M43524|

			 ENDP  ; |?DDHALInfo@OMAPDDGPE@@UAAXPAU_DDHALINFO@@K@Z|, OMAPDDGPE::DDHALInfo

	EXPORT	|??_C@_1CM@JIJECANM@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAG?$AAe?$AAt?$AAM?$AAa?$AAs?$AAk?$AAs?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00078			 AREA	 |.pdata|, PDATA
|$T43534| DCD	|$LN7@GetMasks|
	DCD	0x40001a04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@JIJECANM@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAG?$AAe?$AAt?$AAM?$AAa?$AAs?$AAk?$AAs?$AA?$AN?$AA?6?$AA?$AA@| DCB "O"
	DCB	0x0, "M", 0x0, "A", 0x0, "P", 0x0, "D", 0x0, "D", 0x0, "G"
	DCB	0x0, "P", 0x0, "E", 0x0, ":", 0x0, ":", 0x0, "G", 0x0, "e"
	DCB	0x0, "t", 0x0, "M", 0x0, "a", 0x0, "s", 0x0, "k", 0x0, "s"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  01d14			 AREA	 |.text|, CODE, ARM

  01d14		 |?GetMasks@OMAPDDGPE@@UAAPAKXZ| PROC	; OMAPDDGPE::GetMasks

; 782  : {

  01d14		 |$LN7@GetMasks|
  01d14	e1a0c00d	 mov         r12, sp
  01d18	e92d0001	 stmdb       sp!, {r0}
  01d1c	e92d5000	 stmdb       sp!, {r12, lr}
  01d20	e24dd008	 sub         sp, sp, #8
  01d24		 |$M43531|

; 783  :     DEBUGMSG (GPE_ZONE_HW, (TEXT("OMAPDDGPE::GetMasks\r\n")));

  01d24	e59f304c	 ldr         r3, [pc, #0x4C]
  01d28	e5933440	 ldr         r3, [r3, #0x440]
  01d2c	e3130b02	 tst         r3, #2, 22
  01d30	0a000004	 beq         |$LN3@GetMasks|
  01d34	e59f0038	 ldr         r0, [pc, #0x38]
  01d38	eb000000	 bl          NKDbgPrintfW
  01d3c	e3a03001	 mov         r3, #1
  01d40	e58d3004	 str         r3, [sp, #4]
  01d44	ea000001	 b           |$LN4@GetMasks|
  01d48		 |$LN3@GetMasks|
  01d48	e3a03000	 mov         r3, #0
  01d4c	e58d3004	 str         r3, [sp, #4]
  01d50		 |$LN4@GetMasks|

; 784  : 
; 785  :     //  Return RGB masks for selected mode
; 786  :     return &(m_pModeEx->dwRBitMask);

  01d50	e59d3010	 ldr         r3, [sp, #0x10]
  01d54	e2833024	 add         r3, r3, #0x24
  01d58	e5933000	 ldr         r3, [r3]
  01d5c	e2833048	 add         r3, r3, #0x48
  01d60	e58d3000	 str         r3, [sp]

; 787  : }

  01d64	e59d0000	 ldr         r0, [sp]
  01d68	e28dd008	 add         sp, sp, #8
  01d6c	e89d6000	 ldmia       sp, {sp, lr}
  01d70	e12fff1e	 bx          lr
  01d74		 |$LN8@GetMasks|
  01d74		 |$LN9@GetMasks|
  01d74	00000000	 DCD         |??_C@_1CM@JIJECANM@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAG?$AAe?$AAt?$AAM?$AAa?$AAs?$AAk?$AAs?$AA?$AN?$AA?6?$AA?$AA@|
  01d78		 |$LN10@GetMasks|
  01d78	00000000	 DCD         |dpCurSettings|
  01d7c		 |$M43532|

			 ENDP  ; |?GetMasks@OMAPDDGPE@@UAAPAKXZ|, OMAPDDGPE::GetMasks

	EXPORT	|??_C@_1FG@NOMDPDH@?$AA?9?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAS?$AAe?$AAt?$AAP?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AAS?$AAh?$AAa?$AAp?$AAe?$AA?$CI?$AAs?$AAc?$AA?5?$AA?$DN@| [ DATA ] ; `string'
	EXPORT	|?Stride@GPESurf@@QAAHXZ|		; GPESurf::Stride
	EXPORT	|?Buffer@GPESurf@@QAAPAXXZ|		; GPESurf::Buffer
	EXPORT	|??_C@_1JE@NHFELEGK@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAS?$AAe?$AAt?$AAP?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AAS?$AAh?$AAa?$AAp?$AAe?$AA?3?$AA?5?$AAM?$AAe?$AAm?$AAo@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HC@OEGJCIPI@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAS?$AAe?$AAt?$AAP?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AAS?$AAh?$AAa?$AAp?$AAe?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa@| [ DATA ] ; `string'
	EXPORT	|?CursorOff@OMAPDDGPE@@QAAXXZ|		; OMAPDDGPE::CursorOff
	EXPORT	|??_C@_1HM@BHCEIJNF@?$AA?$CL?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAS?$AAe?$AAt?$AAP?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AAS?$AAh?$AAa?$AAp?$AAe?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0@| [ DATA ] ; `string'

  00080			 AREA	 |.pdata|, PDATA
|$T43564| DCD	|$LN35@SetPointer|
	DCD	0x40017704

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FG@NOMDPDH@?$AA?9?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAS?$AAe?$AAt?$AAP?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AAS?$AAh?$AAa?$AAp?$AAe?$AA?$CI?$AAs?$AAc?$AA?5?$AA?$DN@| DCB "-"
	DCB	0x0, "O", 0x0, "M", 0x0, "A", 0x0, "P", 0x0, "D", 0x0, "D"
	DCB	0x0, "G", 0x0, "P", 0x0, "E", 0x0, ":", 0x0, ":", 0x0, "S"
	DCB	0x0, "e", 0x0, "t", 0x0, "P", 0x0, "o", 0x0, "i", 0x0, "n"
	DCB	0x0, "t", 0x0, "e", 0x0, "r", 0x0, "S", 0x0, "h", 0x0, "a"
	DCB	0x0, "p", 0x0, "e", 0x0, "(", 0x0, "s", 0x0, "c", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JE@NHFELEGK@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAS?$AAe?$AAt?$AAP?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AAS?$AAh?$AAa?$AAp?$AAe?$AA?3?$AA?5?$AAM?$AAe?$AAm?$AAo@| DCB "O"
	DCB	0x0, "M", 0x0, "A", 0x0, "P", 0x0, "D", 0x0, "D", 0x0, "G"
	DCB	0x0, "P", 0x0, "E", 0x0, ":", 0x0, ":", 0x0, "S", 0x0, "e"
	DCB	0x0, "t", 0x0, "P", 0x0, "o", 0x0, "i", 0x0, "n", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "S", 0x0, "h", 0x0, "a", 0x0, "p"
	DCB	0x0, "e", 0x0, ":", 0x0, " ", 0x0, "M", 0x0, "e", 0x0, "m"
	DCB	0x0, "o", 0x0, "r", 0x0, "y", 0x0, " ", 0x0, "a", 0x0, "l"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "i"
	DCB	0x0, "o", 0x0, "n", 0x0, " ", 0x0, "f", 0x0, "o", 0x0, "r"
	DCB	0x0, " ", 0x0, "c", 0x0, "u", 0x0, "r", 0x0, "s", 0x0, "o"
	DCB	0x0, "r", 0x0, " ", 0x0, "b", 0x0, "u", 0x0, "f", 0x0, "f"
	DCB	0x0, "e", 0x0, "r", 0x0, "s", 0x0, " ", 0x0, "f", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HC@OEGJCIPI@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAS?$AAe?$AAt?$AAP?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AAS?$AAh?$AAa?$AAp?$AAe?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa@| DCB "O"
	DCB	0x0, "M", 0x0, "A", 0x0, "P", 0x0, "D", 0x0, "D", 0x0, "G"
	DCB	0x0, "P", 0x0, "E", 0x0, ":", 0x0, ":", 0x0, "S", 0x0, "e"
	DCB	0x0, "t", 0x0, "P", 0x0, "o", 0x0, "i", 0x0, "n", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "S", 0x0, "h", 0x0, "a", 0x0, "p"
	DCB	0x0, "e", 0x0, ":", 0x0, " ", 0x0, "I", 0x0, "n", 0x0, "v"
	DCB	0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d", 0x0, " ", 0x0, "c"
	DCB	0x0, "u", 0x0, "r", 0x0, "s", 0x0, "o", 0x0, "r", 0x0, " "
	DCB	0x0, "s", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, ",", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HM@BHCEIJNF@?$AA?$CL?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAS?$AAe?$AAt?$AAP?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AAS?$AAh?$AAa?$AAp?$AAe?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0@| DCB "+"
	DCB	0x0, "O", 0x0, "M", 0x0, "A", 0x0, "P", 0x0, "D", 0x0, "D"
	DCB	0x0, "G", 0x0, "P", 0x0, "E", 0x0, ":", 0x0, ":", 0x0, "S"
	DCB	0x0, "e", 0x0, "t", 0x0, "P", 0x0, "o", 0x0, "i", 0x0, "n"
	DCB	0x0, "t", 0x0, "e", 0x0, "r", 0x0, "S", 0x0, "h", 0x0, "a"
	DCB	0x0, "p", 0x0, "e", 0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "8", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ","
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, ",", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ","
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  01d7c			 AREA	 |.text|, CODE, ARM

  01d7c		 |?SetPointerShape@OMAPDDGPE@@UAAJPAVGPESurf@@0HHHH@Z| PROC ; OMAPDDGPE::SetPointerShape

; 799  : {

  01d7c		 |$LN35@SetPointer|
  01d7c	e1a0c00d	 mov         r12, sp
  01d80	e92d000f	 stmdb       sp!, {r0 - r3}
  01d84	e92d5000	 stmdb       sp!, {r12, lr}
  01d88	e24dd09c	 sub         sp, sp, #0x9C
  01d8c		 |$M43561|

; 800  :     SCODE sc = S_OK;

  01d8c	e3a03000	 mov         r3, #0
  01d90	e58d3038	 str         r3, [sp, #0x38]

; 801  :     UCHAR *pAndPtr, *pXorPtr, *pAndLine, *pXorLine;
; 802  :     UCHAR andPtr, xorPtr, mask;
; 803  :     ULONG size;
; 804  :     int bytesPerPixel;
; 805  :     int row, col, i;
; 806  : 
; 807  :     UNREFERENCED_PARAMETER(pColorSurf);
; 808  : 
; 809  :     if (!g_Globals.m_dwCursorEnable)

  01d94	e59f35b8	 ldr         r3, [pc, #0x5B8]
  01d98	e5933234	 ldr         r3, [r3, #0x234]
  01d9c	e3530000	 cmp         r3, #0
  01da0	1a000002	 bne         |$LN18@SetPointer|

; 810  :         return S_OK;

  01da4	e3a03000	 mov         r3, #0
  01da8	e58d3054	 str         r3, [sp, #0x54]
  01dac	ea00015f	 b           |$LN19@SetPointer|
  01db0		 |$LN18@SetPointer|

; 811  : 
; 812  :     DEBUGMSG(GPE_ZONE_CURSOR, (
; 813  :         L"+OMAPDDGPE::SetPointerShape(0x%08x, 0x%08x, %d, %d, %d, %d)\r\n",
; 814  :         pMask, pColorSurf, xHotspot, yHotspot, xSize, ySize
; 815  :     ));

  01db0	e59f358c	 ldr         r3, [pc, #0x58C]
  01db4	e5933440	 ldr         r3, [r3, #0x440]
  01db8	e3130a02	 tst         r3, #2, 20
  01dbc	0a00000d	 beq         |$LN21@SetPointer|
  01dc0	e59d30bc	 ldr         r3, [sp, #0xBC]
  01dc4	e58d3008	 str         r3, [sp, #8]
  01dc8	e59d30b8	 ldr         r3, [sp, #0xB8]
  01dcc	e58d3004	 str         r3, [sp, #4]
  01dd0	e59d30b4	 ldr         r3, [sp, #0xB4]
  01dd4	e58d3000	 str         r3, [sp]
  01dd8	e59d30b0	 ldr         r3, [sp, #0xB0]
  01ddc	e59d20ac	 ldr         r2, [sp, #0xAC]
  01de0	e59d10a8	 ldr         r1, [sp, #0xA8]
  01de4	e59f0564	 ldr         r0, [pc, #0x564]
  01de8	eb000000	 bl          NKDbgPrintfW
  01dec	e3a03001	 mov         r3, #1
  01df0	e58d3064	 str         r3, [sp, #0x64]
  01df4	ea000001	 b           |$LN22@SetPointer|
  01df8		 |$LN21@SetPointer|
  01df8	e3a03000	 mov         r3, #0
  01dfc	e58d3064	 str         r3, [sp, #0x64]
  01e00		 |$LN22@SetPointer|

; 816  : 
; 817  :     Lock();

  01e00	e59d30a4	 ldr         r3, [sp, #0xA4]
  01e04	e5933000	 ldr         r3, [r3]
  01e08	e28330ec	 add         r3, r3, #0xEC
  01e0c	e59d00a4	 ldr         r0, [sp, #0xA4]
  01e10	e5933000	 ldr         r3, [r3]
  01e14	e1a0e00f	 mov         lr, pc
  01e18	e12fff13	 bx          r3

; 818  : 
; 819  :     // Turn current cursor off
; 820  :     CursorOff();

  01e1c	e59d00a4	 ldr         r0, [sp, #0xA4]
  01e20	eb000000	 bl          |?CursorOff@OMAPDDGPE@@QAAXXZ|

; 821  : 
; 822  :     // Release memory associated with old cursor
; 823  :     delete [] m_cursorStore; 

  01e24	e59d30a4	 ldr         r3, [sp, #0xA4]
  01e28	e2833f5e	 add         r3, r3, #0x5E, 30
  01e2c	e5933000	 ldr         r3, [r3]
  01e30	e58d303c	 str         r3, [sp, #0x3C]
  01e34	e59d003c	 ldr         r0, [sp, #0x3C]
  01e38	eb000000	 bl          |??3@YAXPAX@Z|

; 824  :     m_cursorStore = NULL;

  01e3c	e59d30a4	 ldr         r3, [sp, #0xA4]
  01e40	e2832f5e	 add         r2, r3, #0x5E, 30
  01e44	e3a03000	 mov         r3, #0
  01e48	e5823000	 str         r3, [r2]

; 825  :     delete [] m_cursorXor; 

  01e4c	e59d30a4	 ldr         r3, [sp, #0xA4]
  01e50	e2833f5f	 add         r3, r3, #0x5F, 30
  01e54	e5933000	 ldr         r3, [r3]
  01e58	e58d3040	 str         r3, [sp, #0x40]
  01e5c	e59d0040	 ldr         r0, [sp, #0x40]
  01e60	eb000000	 bl          |??3@YAXPAX@Z|

; 826  :     m_cursorXor = NULL;

  01e64	e59d30a4	 ldr         r3, [sp, #0xA4]
  01e68	e2832f5f	 add         r2, r3, #0x5F, 30
  01e6c	e3a03000	 mov         r3, #0
  01e70	e5823000	 str         r3, [r2]

; 827  :     delete [] m_cursorAnd; 

  01e74	e59d30a4	 ldr         r3, [sp, #0xA4]
  01e78	e2833d06	 add         r3, r3, #6, 26
  01e7c	e5933000	 ldr         r3, [r3]
  01e80	e58d3044	 str         r3, [sp, #0x44]
  01e84	e59d0044	 ldr         r0, [sp, #0x44]
  01e88	eb000000	 bl          |??3@YAXPAX@Z|

; 828  :     m_cursorAnd = NULL;

  01e8c	e59d30a4	 ldr         r3, [sp, #0xA4]
  01e90	e2832d06	 add         r2, r3, #6, 26
  01e94	e3a03000	 mov         r3, #0
  01e98	e5823000	 str         r3, [r2]

; 829  : 
; 830  :     // Is there a new mask?
; 831  :     if (pMask == NULL) 

  01e9c	e59d30a8	 ldr         r3, [sp, #0xA8]
  01ea0	e3530000	 cmp         r3, #0
  01ea4	1a000004	 bne         |$LN17@SetPointer|

; 832  :     {
; 833  :         // No, so tag as disabled
; 834  :         m_cursorDisabled = TRUE;

  01ea8	e59d30a4	 ldr         r3, [sp, #0xA4]
  01eac	e2832f53	 add         r2, r3, #0x53, 30
  01eb0	e3a03001	 mov         r3, #1
  01eb4	e5823000	 str         r3, [r2]

; 835  :     } 
; 836  :     else 

  01eb8	ea000107	 b           |$LN16@SetPointer|
  01ebc		 |$LN17@SetPointer|

; 837  :     {
; 838  :         // Yes, so tag as not disabled
; 839  :         m_cursorDisabled = FALSE;

  01ebc	e59d30a4	 ldr         r3, [sp, #0xA4]
  01ec0	e2832f53	 add         r2, r3, #0x53, 30
  01ec4	e3a03000	 mov         r3, #0
  01ec8	e5823000	 str         r3, [r2]

; 840  : 
; 841  :         // Check if cursor size is correct
; 842  :         if (xSize > m_nScreenWidth || ySize > m_nScreenHeight) 

  01ecc	e59d30a4	 ldr         r3, [sp, #0xA4]
  01ed0	e2833008	 add         r3, r3, #8
  01ed4	e59d20b8	 ldr         r2, [sp, #0xB8]
  01ed8	e5933000	 ldr         r3, [r3]
  01edc	e1520003	 cmp         r2, r3
  01ee0	ca000005	 bgt         |$LN14@SetPointer|
  01ee4	e59d30a4	 ldr         r3, [sp, #0xA4]
  01ee8	e283300c	 add         r3, r3, #0xC
  01eec	e59d20bc	 ldr         r2, [sp, #0xBC]
  01ef0	e5933000	 ldr         r3, [r3]
  01ef4	e1520003	 cmp         r2, r3
  01ef8	da000011	 ble         |$LN15@SetPointer|
  01efc		 |$LN14@SetPointer|

; 843  :         {
; 844  :             DEBUGMSG(GPE_ZONE_ERROR, (L"OMAPDDGPE::SetPointerShape: "
; 845  :                 L"Invalid cursor size %d, %d\r\n", xSize, ySize
; 846  :             ));

  01efc	e59f3440	 ldr         r3, [pc, #0x440]
  01f00	e5933440	 ldr         r3, [r3, #0x440]
  01f04	e3130001	 tst         r3, #1
  01f08	0a000006	 beq         |$LN23@SetPointer|
  01f0c	e59d20bc	 ldr         r2, [sp, #0xBC]
  01f10	e59d10b8	 ldr         r1, [sp, #0xB8]
  01f14	e59f0430	 ldr         r0, [pc, #0x430]
  01f18	eb000000	 bl          NKDbgPrintfW
  01f1c	e3a03001	 mov         r3, #1
  01f20	e58d3068	 str         r3, [sp, #0x68]
  01f24	ea000001	 b           |$LN24@SetPointer|
  01f28		 |$LN23@SetPointer|
  01f28	e3a03000	 mov         r3, #0
  01f2c	e58d3068	 str         r3, [sp, #0x68]
  01f30		 |$LN24@SetPointer|

; 847  :             sc = E_FAIL;

  01f30	e3a03116	 mov         r3, #0x16, 2
  01f34	e3833901	 orr         r3, r3, #1, 18
  01f38	e58d3038	 str         r3, [sp, #0x38]
  01f3c	ea0000e6	 b           |$LN13@SetPointer|

; 848  :             goto cleanUp;

  01f40	ea0000e5	 b           |$cleanUp$42411|
  01f44		 |$LN15@SetPointer|

; 849  :         }
; 850  :         
; 851  :         // How many bytes we need per pixel on screen
; 852  :         bytesPerPixel = (m_pMode->Bpp + 7) >> 3;

  01f44	e59d30a4	 ldr         r3, [sp, #0xA4]
  01f48	e2833010	 add         r3, r3, #0x10
  01f4c	e5933000	 ldr         r3, [r3]
  01f50	e283300c	 add         r3, r3, #0xC
  01f54	e5933000	 ldr         r3, [r3]
  01f58	e2833007	 add         r3, r3, #7
  01f5c	e1a031c3	 mov         r3, r3, asr #3
  01f60	e58d3024	 str         r3, [sp, #0x24]

; 853  : 
; 854  :         // Cursor mask & store size
; 855  :         size = xSize * ySize * bytesPerPixel;

  01f64	e59d10b8	 ldr         r1, [sp, #0xB8]
  01f68	e59d30bc	 ldr         r3, [sp, #0xBC]
  01f6c	e0020391	 mul         r2, r1, r3
  01f70	e59d3024	 ldr         r3, [sp, #0x24]
  01f74	e0030392	 mul         r3, r2, r3
  01f78	e58d3028	 str         r3, [sp, #0x28]

; 856  :         
; 857  :         // Allocate memory based on new cursor size
; 858  :         m_cursorStore = new UCHAR[size];

  01f7c	e59d0028	 ldr         r0, [sp, #0x28]
  01f80	eb000000	 bl          |??2@YAPAXI@Z|
  01f84	e58d006c	 str         r0, [sp, #0x6C]
  01f88	e59d306c	 ldr         r3, [sp, #0x6C]
  01f8c	e58d3048	 str         r3, [sp, #0x48]
  01f90	e59d30a4	 ldr         r3, [sp, #0xA4]
  01f94	e2832f5e	 add         r2, r3, #0x5E, 30
  01f98	e59d3048	 ldr         r3, [sp, #0x48]
  01f9c	e5823000	 str         r3, [r2]

; 859  :         m_cursorXor   = new UCHAR[size];

  01fa0	e59d0028	 ldr         r0, [sp, #0x28]
  01fa4	eb000000	 bl          |??2@YAPAXI@Z|
  01fa8	e58d0070	 str         r0, [sp, #0x70]
  01fac	e59d3070	 ldr         r3, [sp, #0x70]
  01fb0	e58d304c	 str         r3, [sp, #0x4C]
  01fb4	e59d30a4	 ldr         r3, [sp, #0xA4]
  01fb8	e2832f5f	 add         r2, r3, #0x5F, 30
  01fbc	e59d304c	 ldr         r3, [sp, #0x4C]
  01fc0	e5823000	 str         r3, [r2]

; 860  :         m_cursorAnd   = new UCHAR[size];

  01fc4	e59d0028	 ldr         r0, [sp, #0x28]
  01fc8	eb000000	 bl          |??2@YAPAXI@Z|
  01fcc	e58d0074	 str         r0, [sp, #0x74]
  01fd0	e59d3074	 ldr         r3, [sp, #0x74]
  01fd4	e58d3050	 str         r3, [sp, #0x50]
  01fd8	e59d30a4	 ldr         r3, [sp, #0xA4]
  01fdc	e2832d06	 add         r2, r3, #6, 26
  01fe0	e59d3050	 ldr         r3, [sp, #0x50]
  01fe4	e5823000	 str         r3, [r2]

; 861  : 
; 862  :         if (m_cursorStore == NULL || m_cursorXor == NULL || m_cursorAnd == NULL) 

  01fe8	e59d30a4	 ldr         r3, [sp, #0xA4]
  01fec	e2833f5e	 add         r3, r3, #0x5E, 30
  01ff0	e5933000	 ldr         r3, [r3]
  01ff4	e3530000	 cmp         r3, #0
  01ff8	0a000009	 beq         |$LN11@SetPointer|
  01ffc	e59d30a4	 ldr         r3, [sp, #0xA4]
  02000	e2833f5f	 add         r3, r3, #0x5F, 30
  02004	e5933000	 ldr         r3, [r3]
  02008	e3530000	 cmp         r3, #0
  0200c	0a000004	 beq         |$LN11@SetPointer|
  02010	e59d30a4	 ldr         r3, [sp, #0xA4]
  02014	e2833d06	 add         r3, r3, #6, 26
  02018	e5933000	 ldr         r3, [r3]
  0201c	e3530000	 cmp         r3, #0
  02020	1a00000f	 bne         |$LN12@SetPointer|
  02024		 |$LN11@SetPointer|

; 863  :         {
; 864  :             DEBUGMSG(GPE_ZONE_ERROR, (L"OMAPDDGPE::SetPointerShape: "
; 865  :                 L"Memory allocation for cursor buffers failed\r\n"
; 866  :             ));

  02024	e59f3318	 ldr         r3, [pc, #0x318]
  02028	e5933440	 ldr         r3, [r3, #0x440]
  0202c	e3130001	 tst         r3, #1
  02030	0a000004	 beq         |$LN25@SetPointer|
  02034	e59f030c	 ldr         r0, [pc, #0x30C]
  02038	eb000000	 bl          NKDbgPrintfW
  0203c	e3a03001	 mov         r3, #1
  02040	e58d3078	 str         r3, [sp, #0x78]
  02044	ea000001	 b           |$LN26@SetPointer|
  02048		 |$LN25@SetPointer|
  02048	e3a03000	 mov         r3, #0
  0204c	e58d3078	 str         r3, [sp, #0x78]
  02050		 |$LN26@SetPointer|

; 867  :             sc = E_OUTOFMEMORY;

  02050	e3a0313a	 mov         r3, #0x3A, 2
  02054	e3833807	 orr         r3, r3, #7, 16
  02058	e58d3038	 str         r3, [sp, #0x38]
  0205c	ea00009e	 b           |$LN10@SetPointer|

; 868  :             goto cleanUp;

  02060	ea00009d	 b           |$cleanUp$42411|
  02064		 |$LN12@SetPointer|

; 869  :         }
; 870  : 
; 871  :         // Store size and hotspot for new cursor
; 872  :         m_cursorSize.x = xSize;

  02064	e59d30a4	 ldr         r3, [sp, #0xA4]
  02068	e2832f5a	 add         r2, r3, #0x5A, 30
  0206c	e59d30b8	 ldr         r3, [sp, #0xB8]
  02070	e5823000	 str         r3, [r2]

; 873  :         m_cursorSize.y = ySize;

  02074	e59d30a4	 ldr         r3, [sp, #0xA4]
  02078	e2832f5b	 add         r2, r3, #0x5B, 30
  0207c	e59d30bc	 ldr         r3, [sp, #0xBC]
  02080	e5823000	 str         r3, [r2]

; 874  :         m_cursorHotspot.x = xHotspot;

  02084	e59d30a4	 ldr         r3, [sp, #0xA4]
  02088	e2832e17	 add         r2, r3, #0x17, 28
  0208c	e59d30b0	 ldr         r3, [sp, #0xB0]
  02090	e5823000	 str         r3, [r2]

; 875  :         m_cursorHotspot.y = yHotspot;

  02094	e59d30a4	 ldr         r3, [sp, #0xA4]
  02098	e2832f5d	 add         r2, r3, #0x5D, 30
  0209c	e59d30b4	 ldr         r3, [sp, #0xB4]
  020a0	e5823000	 str         r3, [r2]

; 876  : 
; 877  :         // Pointers to AND and XOR masks
; 878  :         pAndPtr = (UCHAR*)pMask->Buffer();

  020a4	e59d00a8	 ldr         r0, [sp, #0xA8]
  020a8	eb000000	 bl          |?Buffer@GPESurf@@QAAPAXXZ|
  020ac	e58d007c	 str         r0, [sp, #0x7C]
  020b0	e59d307c	 ldr         r3, [sp, #0x7C]
  020b4	e58d302c	 str         r3, [sp, #0x2C]

; 879  :         pXorPtr = (UCHAR*)pMask->Buffer() + (ySize * pMask->Stride());

  020b8	e59d00a8	 ldr         r0, [sp, #0xA8]
  020bc	eb000000	 bl          |?Buffer@GPESurf@@QAAPAXXZ|
  020c0	e58d0080	 str         r0, [sp, #0x80]
  020c4	e59d00a8	 ldr         r0, [sp, #0xA8]
  020c8	eb000000	 bl          |?Stride@GPESurf@@QAAHXZ|
  020cc	e58d0084	 str         r0, [sp, #0x84]
  020d0	e59d10bc	 ldr         r1, [sp, #0xBC]
  020d4	e59d3084	 ldr         r3, [sp, #0x84]
  020d8	e0020391	 mul         r2, r1, r3
  020dc	e59d3080	 ldr         r3, [sp, #0x80]
  020e0	e0833002	 add         r3, r3, r2
  020e4	e58d3034	 str         r3, [sp, #0x34]

; 880  : 
; 881  :         // store OR and AND mask for new cursor
; 882  :         for (row = 0; row < ySize; row++) 

  020e8	e3a03000	 mov         r3, #0
  020ec	e58d3020	 str         r3, [sp, #0x20]
  020f0	ea000002	 b           |$LN9@SetPointer|
  020f4		 |$LN8@SetPointer|
  020f4	e59d3020	 ldr         r3, [sp, #0x20]
  020f8	e2833001	 add         r3, r3, #1
  020fc	e58d3020	 str         r3, [sp, #0x20]
  02100		 |$LN9@SetPointer|
  02100	e59d2020	 ldr         r2, [sp, #0x20]
  02104	e59d30bc	 ldr         r3, [sp, #0xBC]
  02108	e1520003	 cmp         r2, r3
  0210c	aa000072	 bge         |$LN7@SetPointer|

; 883  :         {
; 884  :             pAndLine = &m_cursorAnd[row * xSize * bytesPerPixel];

  02110	e59d30a4	 ldr         r3, [sp, #0xA4]
  02114	e2830d06	 add         r0, r3, #6, 26
  02118	e59d2020	 ldr         r2, [sp, #0x20]
  0211c	e59d30b8	 ldr         r3, [sp, #0xB8]
  02120	e0010392	 mul         r1, r2, r3
  02124	e59d3024	 ldr         r3, [sp, #0x24]
  02128	e0020391	 mul         r2, r1, r3
  0212c	e5903000	 ldr         r3, [r0]
  02130	e0833002	 add         r3, r3, r2
  02134	e58d301c	 str         r3, [sp, #0x1C]

; 885  :             pXorLine = &m_cursorXor[row * xSize * bytesPerPixel];

  02138	e59d30a4	 ldr         r3, [sp, #0xA4]
  0213c	e2830f5f	 add         r0, r3, #0x5F, 30
  02140	e59d2020	 ldr         r2, [sp, #0x20]
  02144	e59d30b8	 ldr         r3, [sp, #0xB8]
  02148	e0010392	 mul         r1, r2, r3
  0214c	e59d3024	 ldr         r3, [sp, #0x24]
  02150	e0020391	 mul         r2, r1, r3
  02154	e5903000	 ldr         r3, [r0]
  02158	e0833002	 add         r3, r3, r2
  0215c	e58d3010	 str         r3, [sp, #0x10]

; 886  :             for (col = 0; col < xSize; col++) 

  02160	e3a03000	 mov         r3, #0
  02164	e58d300c	 str         r3, [sp, #0xC]
  02168	ea000002	 b           |$LN6@SetPointer|
  0216c		 |$LN5@SetPointer|
  0216c	e59d300c	 ldr         r3, [sp, #0xC]
  02170	e2833001	 add         r3, r3, #1
  02174	e58d300c	 str         r3, [sp, #0xC]
  02178		 |$LN6@SetPointer|
  02178	e59d200c	 ldr         r2, [sp, #0xC]
  0217c	e59d30b8	 ldr         r3, [sp, #0xB8]
  02180	e1520003	 cmp         r2, r3
  02184	aa000053	 bge         |$LN4@SetPointer|

; 887  :             {
; 888  :                 andPtr = pAndPtr[row * pMask->Stride() + (col >> 3)];

  02188	e59d00a8	 ldr         r0, [sp, #0xA8]
  0218c	eb000000	 bl          |?Stride@GPESurf@@QAAHXZ|
  02190	e58d0088	 str         r0, [sp, #0x88]
  02194	e59d1020	 ldr         r1, [sp, #0x20]
  02198	e59d3088	 ldr         r3, [sp, #0x88]
  0219c	e0020391	 mul         r2, r1, r3
  021a0	e59d300c	 ldr         r3, [sp, #0xC]
  021a4	e1a031c3	 mov         r3, r3, asr #3
  021a8	e0822003	 add         r2, r2, r3
  021ac	e59d302c	 ldr         r3, [sp, #0x2C]
  021b0	e0833002	 add         r3, r3, r2
  021b4	e5d33000	 ldrb        r3, [r3]
  021b8	e5cd3031	 strb        r3, [sp, #0x31]

; 889  :                 xorPtr = pXorPtr[row * pMask->Stride() + (col >> 3)];

  021bc	e59d00a8	 ldr         r0, [sp, #0xA8]
  021c0	eb000000	 bl          |?Stride@GPESurf@@QAAHXZ|
  021c4	e58d008c	 str         r0, [sp, #0x8C]
  021c8	e59d1020	 ldr         r1, [sp, #0x20]
  021cc	e59d308c	 ldr         r3, [sp, #0x8C]
  021d0	e0020391	 mul         r2, r1, r3
  021d4	e59d300c	 ldr         r3, [sp, #0xC]
  021d8	e1a031c3	 mov         r3, r3, asr #3
  021dc	e0822003	 add         r2, r2, r3
  021e0	e59d3034	 ldr         r3, [sp, #0x34]
  021e4	e0833002	 add         r3, r3, r2
  021e8	e5d33000	 ldrb        r3, [r3]
  021ec	e5cd3030	 strb        r3, [sp, #0x30]

; 890  :                 mask = (UCHAR) (0x80 >> (col & 0x7));

  021f0	e59d300c	 ldr         r3, [sp, #0xC]
  021f4	e2032007	 and         r2, r3, #7
  021f8	e3a03080	 mov         r3, #0x80
  021fc	e1a03253	 mov         r3, r3, asr r2
  02200	e20330ff	 and         r3, r3, #0xFF
  02204	e5cd3018	 strb        r3, [sp, #0x18]

; 891  :                 for (i = 0; i < bytesPerPixel; i++) 

  02208	e3a03000	 mov         r3, #0
  0220c	e58d3014	 str         r3, [sp, #0x14]
  02210	ea000002	 b           |$LN3@SetPointer|
  02214		 |$LN2@SetPointer|
  02214	e59d3014	 ldr         r3, [sp, #0x14]
  02218	e2833001	 add         r3, r3, #1
  0221c	e58d3014	 str         r3, [sp, #0x14]
  02220		 |$LN3@SetPointer|
  02220	e59d2014	 ldr         r2, [sp, #0x14]
  02224	e59d3024	 ldr         r3, [sp, #0x24]
  02228	e1520003	 cmp         r2, r3
  0222c	aa000028	 bge         |$LN1@SetPointer|

; 892  :                 {
; 893  :                     pAndLine[col * bytesPerPixel + i] = andPtr&mask ? 0xFF : 0x00;

  02230	e5dd3031	 ldrb        r3, [sp, #0x31]
  02234	e1a02003	 mov         r2, r3
  02238	e5dd3018	 ldrb        r3, [sp, #0x18]
  0223c	e1120003	 tst         r2, r3
  02240	0a000002	 beq         |$LN27@SetPointer|
  02244	e3a030ff	 mov         r3, #0xFF
  02248	e58d3090	 str         r3, [sp, #0x90]
  0224c	ea000001	 b           |$LN28@SetPointer|
  02250		 |$LN27@SetPointer|
  02250	e3a03000	 mov         r3, #0
  02254	e58d3090	 str         r3, [sp, #0x90]
  02258		 |$LN28@SetPointer|
  02258	e59d3090	 ldr         r3, [sp, #0x90]
  0225c	e20300ff	 and         r0, r3, #0xFF
  02260	e59d100c	 ldr         r1, [sp, #0xC]
  02264	e59d3024	 ldr         r3, [sp, #0x24]
  02268	e0020391	 mul         r2, r1, r3
  0226c	e59d3014	 ldr         r3, [sp, #0x14]
  02270	e0822003	 add         r2, r2, r3
  02274	e59d301c	 ldr         r3, [sp, #0x1C]
  02278	e0833002	 add         r3, r3, r2
  0227c	e5c30000	 strb        r0, [r3]

; 894  :                     pXorLine[col * bytesPerPixel + i] = xorPtr&mask ? 0xFF : 0x00;

  02280	e5dd3030	 ldrb        r3, [sp, #0x30]
  02284	e1a02003	 mov         r2, r3
  02288	e5dd3018	 ldrb        r3, [sp, #0x18]
  0228c	e1120003	 tst         r2, r3
  02290	0a000002	 beq         |$LN29@SetPointer|
  02294	e3a030ff	 mov         r3, #0xFF
  02298	e58d3094	 str         r3, [sp, #0x94]
  0229c	ea000001	 b           |$LN30@SetPointer|
  022a0		 |$LN29@SetPointer|
  022a0	e3a03000	 mov         r3, #0
  022a4	e58d3094	 str         r3, [sp, #0x94]
  022a8		 |$LN30@SetPointer|
  022a8	e59d3094	 ldr         r3, [sp, #0x94]
  022ac	e20300ff	 and         r0, r3, #0xFF
  022b0	e59d100c	 ldr         r1, [sp, #0xC]
  022b4	e59d3024	 ldr         r3, [sp, #0x24]
  022b8	e0020391	 mul         r2, r1, r3
  022bc	e59d3014	 ldr         r3, [sp, #0x14]
  022c0	e0822003	 add         r2, r2, r3
  022c4	e59d3010	 ldr         r3, [sp, #0x10]
  022c8	e0833002	 add         r3, r3, r2
  022cc	e5c30000	 strb        r0, [r3]

; 895  :                 }                    

  022d0	eaffffcf	 b           |$LN2@SetPointer|
  022d4		 |$LN1@SetPointer|

; 896  :             }

  022d4	eaffffa4	 b           |$LN5@SetPointer|
  022d8		 |$LN4@SetPointer|

; 897  :         }

  022d8	eaffff85	 b           |$LN8@SetPointer|
  022dc		 |$LN7@SetPointer|
  022dc		 |$LN16@SetPointer|
  022dc		 |$LN10@SetPointer|
  022dc		 |$LN13@SetPointer|
  022dc		 |$cleanUp$42411|

; 898  :     }
; 899  : 
; 900  : cleanUp:
; 901  :     Unlock();

  022dc	e59d30a4	 ldr         r3, [sp, #0xA4]
  022e0	e5933000	 ldr         r3, [r3]
  022e4	e28330f0	 add         r3, r3, #0xF0
  022e8	e59d00a4	 ldr         r0, [sp, #0xA4]
  022ec	e5933000	 ldr         r3, [r3]
  022f0	e1a0e00f	 mov         lr, pc
  022f4	e12fff13	 bx          r3

; 902  :     DEBUGMSG(GPE_ZONE_CURSOR, (L"-OMAPDDGPE::SetPointerShape(sc = 0x%08x)\r\n", sc));

  022f8	e59f3044	 ldr         r3, [pc, #0x44]
  022fc	e5933440	 ldr         r3, [r3, #0x440]
  02300	e3130a02	 tst         r3, #2, 20
  02304	0a000005	 beq         |$LN31@SetPointer|
  02308	e59d1038	 ldr         r1, [sp, #0x38]
  0230c	e59f002c	 ldr         r0, [pc, #0x2C]
  02310	eb000000	 bl          NKDbgPrintfW
  02314	e3a03001	 mov         r3, #1
  02318	e58d3098	 str         r3, [sp, #0x98]
  0231c	ea000001	 b           |$LN32@SetPointer|
  02320		 |$LN31@SetPointer|
  02320	e3a03000	 mov         r3, #0
  02324	e58d3098	 str         r3, [sp, #0x98]
  02328		 |$LN32@SetPointer|

; 903  :     return sc;

  02328	e59d3038	 ldr         r3, [sp, #0x38]
  0232c	e58d3054	 str         r3, [sp, #0x54]
  02330		 |$LN19@SetPointer|

; 904  : }

  02330	e59d0054	 ldr         r0, [sp, #0x54]
  02334	e28dd09c	 add         sp, sp, #0x9C
  02338	e89d6000	 ldmia       sp, {sp, lr}
  0233c	e12fff1e	 bx          lr
  02340		 |$LN36@SetPointer|
  02340		 |$LN37@SetPointer|
  02340	00000000	 DCD         |??_C@_1FG@NOMDPDH@?$AA?9?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAS?$AAe?$AAt?$AAP?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AAS?$AAh?$AAa?$AAp?$AAe?$AA?$CI?$AAs?$AAc?$AA?5?$AA?$DN@|
  02344		 |$LN38@SetPointer|
  02344	00000000	 DCD         |dpCurSettings|
  02348		 |$LN39@SetPointer|
  02348	00000000	 DCD         |??_C@_1JE@NHFELEGK@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAS?$AAe?$AAt?$AAP?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AAS?$AAh?$AAa?$AAp?$AAe?$AA?3?$AA?5?$AAM?$AAe?$AAm?$AAo@|
  0234c		 |$LN40@SetPointer|
  0234c	00000000	 DCD         |??_C@_1HC@OEGJCIPI@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAS?$AAe?$AAt?$AAP?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AAS?$AAh?$AAa?$AAp?$AAe?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa@|
  02350		 |$LN41@SetPointer|
  02350	00000000	 DCD         |??_C@_1HM@BHCEIJNF@?$AA?$CL?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAS?$AAe?$AAt?$AAP?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AAS?$AAh?$AAa?$AAp?$AAe?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0@|
  02354		 |$LN42@SetPointer|
  02354	00000000	 DCD         |?g_Globals@@3VOMAPDDGPEGlobals@@A|
  02358		 |$M43562|

			 ENDP  ; |?SetPointerShape@OMAPDDGPE@@UAAJPAVGPESurf@@0HHHH@Z|, OMAPDDGPE::SetPointerShape

; File c:\wince600\public\common\oak\inc\gpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T43577| DCD	|$LN5@Stride|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Stride@GPESurf@@QAAHXZ| PROC		; GPESurf::Stride

; 177  :     {

  00000		 |$LN5@Stride|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M43574|

; 178  :         return m_nStrideBytes;

  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e2833008	 add         r3, r3, #8
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3000	 str         r3, [sp]

; 179  :     }

  00020	e59d0000	 ldr         r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M43575|

			 ENDP  ; |?Stride@GPESurf@@QAAHXZ|, GPESurf::Stride


  00000			 AREA	 |.pdata|, PDATA
|$T43585| DCD	|$LN5@Buffer|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Buffer@GPESurf@@QAAPAXXZ| PROC	; GPESurf::Buffer

; 201  :     {

  00000		 |$LN5@Buffer|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M43582|

; 202  :         return (void *)m_pVirtAddr;

  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e2833004	 add         r3, r3, #4
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3000	 str         r3, [sp]

; 203  :     }

  00020	e59d0000	 ldr         r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M43583|

			 ENDP  ; |?Buffer@GPESurf@@QAAPAXXZ|, GPESurf::Buffer

	EXPORT	|??_C@_1EO@PKONCBBL@?$AA?9?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAM?$AAo?$AAv?$AAe?$AAP?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$CI?$AAs?$AAc?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF@| [ DATA ] ; `string'
	EXPORT	|?CursorOn@OMAPDDGPE@@QAAXXZ|		; OMAPDDGPE::CursorOn
	EXPORT	|??_C@_1EE@GKMHIICJ@?$AA?$CL?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAM?$AAo?$AAv?$AAe?$AAP?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN@| [ DATA ] ; `string'

  00088			 AREA	 |.pdata|, PDATA
|$T43597| DCD	|$LN12@MovePointe|
	DCD	0x40006a04
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\ddgpe\omap_ddgpe.cpp

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EO@PKONCBBL@?$AA?9?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAM?$AAo?$AAv?$AAe?$AAP?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$CI?$AAs?$AAc?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF@| DCB "-"
	DCB	0x0, "O", 0x0, "M", 0x0, "A", 0x0, "P", 0x0, "D", 0x0, "D"
	DCB	0x0, "G", 0x0, "P", 0x0, "E", 0x0, ":", 0x0, ":", 0x0, "M"
	DCB	0x0, "o", 0x0, "v", 0x0, "e", 0x0, "P", 0x0, "o", 0x0, "i"
	DCB	0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "(", 0x0, "s"
	DCB	0x0, "c", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EE@GKMHIICJ@?$AA?$CL?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAM?$AAo?$AAv?$AAe?$AAP?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN@| DCB "+"
	DCB	0x0, "O", 0x0, "M", 0x0, "A", 0x0, "P", 0x0, "D", 0x0, "D"
	DCB	0x0, "G", 0x0, "P", 0x0, "E", 0x0, ":", 0x0, ":", 0x0, "M"
	DCB	0x0, "o", 0x0, "v", 0x0, "e", 0x0, "P", 0x0, "o", 0x0, "i"
	DCB	0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "(", 0x0, "%"
	DCB	0x0, "d", 0x0, ",", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  02358			 AREA	 |.text|, CODE, ARM

  02358		 |?MovePointer@OMAPDDGPE@@UAAJHH@Z| PROC ; OMAPDDGPE::MovePointer

; 912  : {

  02358		 |$LN12@MovePointe|
  02358	e1a0c00d	 mov         r12, sp
  0235c	e92d0007	 stmdb       sp!, {r0 - r2}
  02360	e92d5000	 stmdb       sp!, {r12, lr}
  02364	e24dd00c	 sub         sp, sp, #0xC
  02368		 |$M43594|

; 913  :     if (!g_Globals.m_dwCursorEnable)

  02368	e59f318c	 ldr         r3, [pc, #0x18C]
  0236c	e5933234	 ldr         r3, [r3, #0x234]
  02370	e3530000	 cmp         r3, #0
  02374	1a000002	 bne         |$LN3@MovePointe|

; 914  :         return S_OK;

  02378	e3a03000	 mov         r3, #0
  0237c	e58d3000	 str         r3, [sp]
  02380	ea000056	 b           |$LN4@MovePointe|
  02384		 |$LN3@MovePointe|

; 915  : 
; 916  :     DEBUGMSG(GPE_ZONE_CURSOR, (L"+OMAPDDGPE::MovePointer(%d, %d)\r\n", xPosition, yPosition));

  02384	e59f3168	 ldr         r3, [pc, #0x168]
  02388	e5933440	 ldr         r3, [r3, #0x440]
  0238c	e3130a02	 tst         r3, #2, 20
  02390	0a000006	 beq         |$LN6@MovePointe|
  02394	e59d201c	 ldr         r2, [sp, #0x1C]
  02398	e59d1018	 ldr         r1, [sp, #0x18]
  0239c	e59f0154	 ldr         r0, [pc, #0x154]
  023a0	eb000000	 bl          NKDbgPrintfW
  023a4	e3a03001	 mov         r3, #1
  023a8	e58d3004	 str         r3, [sp, #4]
  023ac	ea000001	 b           |$LN7@MovePointe|
  023b0		 |$LN6@MovePointe|
  023b0	e3a03000	 mov         r3, #0
  023b4	e58d3004	 str         r3, [sp, #4]
  023b8		 |$LN7@MovePointe|

; 917  : 
; 918  :     Lock();

  023b8	e59d3014	 ldr         r3, [sp, #0x14]
  023bc	e5933000	 ldr         r3, [r3]
  023c0	e28330ec	 add         r3, r3, #0xEC
  023c4	e59d0014	 ldr         r0, [sp, #0x14]
  023c8	e5933000	 ldr         r3, [r3]
  023cc	e1a0e00f	 mov         lr, pc
  023d0	e12fff13	 bx          r3

; 919  : 
; 920  :     CursorOff();

  023d4	e59d0014	 ldr         r0, [sp, #0x14]
  023d8	eb000000	 bl          |?CursorOff@OMAPDDGPE@@QAAXXZ|

; 921  : 
; 922  :     if (xPosition != -1 || yPosition != -1) 

  023dc	e59d3018	 ldr         r3, [sp, #0x18]
  023e0	e3730001	 cmn         r3, #1
  023e4	1a000002	 bne         |$LN1@MovePointe|
  023e8	e59d301c	 ldr         r3, [sp, #0x1C]
  023ec	e3730001	 cmn         r3, #1
  023f0	0a000025	 beq         |$LN2@MovePointe|
  023f4		 |$LN1@MovePointe|

; 923  :     {
; 924  :         // Compute new cursor rect
; 925  :         m_cursorRect.left = xPosition - m_cursorHotspot.x;

  023f4	e59d3014	 ldr         r3, [sp, #0x14]
  023f8	e2833e17	 add         r3, r3, #0x17, 28
  023fc	e59d2018	 ldr         r2, [sp, #0x18]
  02400	e5933000	 ldr         r3, [r3]
  02404	e0422003	 sub         r2, r2, r3
  02408	e59d3014	 ldr         r3, [sp, #0x14]
  0240c	e2833f56	 add         r3, r3, #0x56, 30
  02410	e5832000	 str         r2, [r3]

; 926  :         m_cursorRect.right = m_cursorRect.left + m_cursorSize.x;

  02414	e59d3014	 ldr         r3, [sp, #0x14]
  02418	e2832f56	 add         r2, r3, #0x56, 30
  0241c	e59d3014	 ldr         r3, [sp, #0x14]
  02420	e2833f5a	 add         r3, r3, #0x5A, 30
  02424	e5922000	 ldr         r2, [r2]
  02428	e5933000	 ldr         r3, [r3]
  0242c	e0822003	 add         r2, r2, r3
  02430	e59d3014	 ldr         r3, [sp, #0x14]
  02434	e2833e16	 add         r3, r3, #0x16, 28
  02438	e5832000	 str         r2, [r3]

; 927  :         m_cursorRect.top = yPosition - m_cursorHotspot.y;

  0243c	e59d3014	 ldr         r3, [sp, #0x14]
  02440	e2833f5d	 add         r3, r3, #0x5D, 30
  02444	e59d201c	 ldr         r2, [sp, #0x1C]
  02448	e5933000	 ldr         r3, [r3]
  0244c	e0422003	 sub         r2, r2, r3
  02450	e59d3014	 ldr         r3, [sp, #0x14]
  02454	e2833f57	 add         r3, r3, #0x57, 30
  02458	e5832000	 str         r2, [r3]

; 928  :         m_cursorRect.bottom = m_cursorRect.top + m_cursorSize.y;

  0245c	e59d3014	 ldr         r3, [sp, #0x14]
  02460	e2832f57	 add         r2, r3, #0x57, 30
  02464	e59d3014	 ldr         r3, [sp, #0x14]
  02468	e2833f5b	 add         r3, r3, #0x5B, 30
  0246c	e5922000	 ldr         r2, [r2]
  02470	e5933000	 ldr         r3, [r3]
  02474	e0822003	 add         r2, r2, r3
  02478	e59d3014	 ldr         r3, [sp, #0x14]
  0247c	e2833f59	 add         r3, r3, #0x59, 30
  02480	e5832000	 str         r2, [r3]

; 929  :         CursorOn();

  02484	e59d0014	 ldr         r0, [sp, #0x14]
  02488	eb000000	 bl          |?CursorOn@OMAPDDGPE@@QAAXXZ|
  0248c		 |$LN2@MovePointe|

; 930  :     }
; 931  : 
; 932  :     Unlock();

  0248c	e59d3014	 ldr         r3, [sp, #0x14]
  02490	e5933000	 ldr         r3, [r3]
  02494	e28330f0	 add         r3, r3, #0xF0
  02498	e59d0014	 ldr         r0, [sp, #0x14]
  0249c	e5933000	 ldr         r3, [r3]
  024a0	e1a0e00f	 mov         lr, pc
  024a4	e12fff13	 bx          r3

; 933  :     
; 934  :     DEBUGMSG(GPE_ZONE_CURSOR, (L"-OMAPDDGPE::MovePointer(sc = 0x%08x)\r\n", S_OK));

  024a8	e59f3044	 ldr         r3, [pc, #0x44]
  024ac	e5933440	 ldr         r3, [r3, #0x440]
  024b0	e3130a02	 tst         r3, #2, 20
  024b4	0a000005	 beq         |$LN8@MovePointe|
  024b8	e3a01000	 mov         r1, #0
  024bc	e59f002c	 ldr         r0, [pc, #0x2C]
  024c0	eb000000	 bl          NKDbgPrintfW
  024c4	e3a03001	 mov         r3, #1
  024c8	e58d3008	 str         r3, [sp, #8]
  024cc	ea000001	 b           |$LN9@MovePointe|
  024d0		 |$LN8@MovePointe|
  024d0	e3a03000	 mov         r3, #0
  024d4	e58d3008	 str         r3, [sp, #8]
  024d8		 |$LN9@MovePointe|

; 935  :     return  S_OK;

  024d8	e3a03000	 mov         r3, #0
  024dc	e58d3000	 str         r3, [sp]
  024e0		 |$LN4@MovePointe|

; 936  : }

  024e0	e59d0000	 ldr         r0, [sp]
  024e4	e28dd00c	 add         sp, sp, #0xC
  024e8	e89d6000	 ldmia       sp, {sp, lr}
  024ec	e12fff1e	 bx          lr
  024f0		 |$LN13@MovePointe|
  024f0		 |$LN14@MovePointe|
  024f0	00000000	 DCD         |??_C@_1EO@PKONCBBL@?$AA?9?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAM?$AAo?$AAv?$AAe?$AAP?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$CI?$AAs?$AAc?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF@|
  024f4		 |$LN15@MovePointe|
  024f4	00000000	 DCD         |dpCurSettings|
  024f8		 |$LN16@MovePointe|
  024f8	00000000	 DCD         |??_C@_1EE@GKMHIICJ@?$AA?$CL?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAM?$AAo?$AAv?$AAe?$AAP?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN@|
  024fc		 |$LN17@MovePointe|
  024fc	00000000	 DCD         |?g_Globals@@3VOMAPDDGPEGlobals@@A|
  02500		 |$M43595|

			 ENDP  ; |?MovePointer@OMAPDDGPE@@UAAJHH@Z|, OMAPDDGPE::MovePointer

	EXPORT	|??_C@_1HA@OCEFLDPL@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAW?$AAr?$AAa?$AAp?$AAp?$AAe?$AAd?$AAE?$AAm?$AAu?$AAl?$AAa?$AAt?$AAe?$AAd?$AAL?$AAi?$AAn?$AAe?$AA?3?$AA?5@| [ DATA ] ; `string'
	EXPORT	|?WrappedEmulatedLine@OMAPDDGPE@@AAAJPAUGPELineParms@@@Z| ; OMAPDDGPE::WrappedEmulatedLine
	IMPORT	|?EmulatedLine@GPE@@QAAJPAUGPELineParms@@@Z| ; GPE::EmulatedLine
	IMPORT	|?RotateRectl@GPE@@QAAXPAU_RECTL@@@Z|	; GPE::RotateRectl
	IMPORT	|__rt_udiv|

  00090			 AREA	 |.pdata|, PDATA
|$T43621| DCD	|$LN34@WrappedEmu|
	DCD	0x40015104

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HA@OCEFLDPL@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAW?$AAr?$AAa?$AAp?$AAp?$AAe?$AAd?$AAE?$AAm?$AAu?$AAl?$AAa?$AAt?$AAe?$AAd?$AAL?$AAi?$AAn?$AAe?$AA?3?$AA?5@| DCB "O"
	DCB	0x0, "M", 0x0, "A", 0x0, "P", 0x0, "D", 0x0, "D", 0x0, "G"
	DCB	0x0, "P", 0x0, "E", 0x0, ":", 0x0, ":", 0x0, "W", 0x0, "r"
	DCB	0x0, "a", 0x0, "p", 0x0, "p", 0x0, "e", 0x0, "d", 0x0, "E"
	DCB	0x0, "m", 0x0, "u", 0x0, "l", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, "d", 0x0, "L", 0x0, "i", 0x0, "n", 0x0, "e", 0x0, ":"
	DCB	0x0, " ", 0x0, "I", 0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l"
	DCB	0x0, "i", 0x0, "d", 0x0, " ", 0x0, "d", 0x0, "i", 0x0, "r"
	DCB	0x0, "e", 0x0, "c", 0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n"
	DCB	0x0, ":", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  02500			 AREA	 |.text|, CODE, ARM

  02500		 |?WrappedEmulatedLine@OMAPDDGPE@@AAAJPAUGPELineParms@@@Z| PROC ; OMAPDDGPE::WrappedEmulatedLine

; 947  : {

  02500		 |$LN34@WrappedEmu|
  02500	e1a0c00d	 mov         r12, sp
  02504	e92d0003	 stmdb       sp!, {r0, r1}
  02508	e92d5000	 stmdb       sp!, {r12, lr}
  0250c	e24dd038	 sub         sp, sp, #0x38
  02510		 |$M43618|

; 948  :     SCODE sc;
; 949  :     RECT bounds;
; 950  :     int N_plus_1;
; 951  : 
; 952  :     Lock();

  02510	e59d3040	 ldr         r3, [sp, #0x40]
  02514	e5933000	 ldr         r3, [r3]
  02518	e28330ec	 add         r3, r3, #0xEC
  0251c	e59d0040	 ldr         r0, [sp, #0x40]
  02520	e5933000	 ldr         r3, [r3]
  02524	e1a0e00f	 mov         lr, pc
  02528	e12fff13	 bx          r3

; 953  :     
; 954  :     // If cursor is on check for line overlap
; 955  :     if (m_cursorVisible && !m_cursorDisabled) 

  0252c	e59d3040	 ldr         r3, [sp, #0x40]
  02530	e2833e15	 add         r3, r3, #0x15, 28
  02534	e5933000	 ldr         r3, [r3]
  02538	e3530000	 cmp         r3, #0
  0253c	0a000111	 beq         |$LN17@WrappedEmu|
  02540	e59d3040	 ldr         r3, [sp, #0x40]
  02544	e2833f53	 add         r3, r3, #0x53, 30
  02548	e5933000	 ldr         r3, [r3]
  0254c	e3530000	 cmp         r3, #0
  02550	1a00010c	 bne         |$LN17@WrappedEmu|

; 956  :     {
; 957  :         // Calculate the bounding-rect to determine overlap with cursor
; 958  :         if (lineParameters->dN) 

  02554	e59d3044	 ldr         r3, [sp, #0x44]
  02558	e2833014	 add         r3, r3, #0x14
  0255c	e5933000	 ldr         r3, [r3]
  02560	e3530000	 cmp         r3, #0
  02564	0a00000d	 beq         |$LN16@WrappedEmu|

; 959  :         {
; 960  :             // The line has a diagonal component
; 961  :             N_plus_1 = 2 + (
; 962  :                 (lineParameters->cPels * lineParameters->dN)/lineParameters->dM
; 963  :             );

  02568	e59d3044	 ldr         r3, [sp, #0x44]
  0256c	e283200c	 add         r2, r3, #0xC
  02570	e59d3044	 ldr         r3, [sp, #0x44]
  02574	e2833014	 add         r3, r3, #0x14
  02578	e5922000	 ldr         r2, [r2]
  0257c	e5933000	 ldr         r3, [r3]
  02580	e0010392	 mul         r1, r2, r3
  02584	e59d3044	 ldr         r3, [sp, #0x44]
  02588	e2833010	 add         r3, r3, #0x10
  0258c	e5930000	 ldr         r0, [r3]
  02590	eb000000	 bl          __rt_udiv
  02594	e2803002	 add         r3, r0, #2
  02598	e58d3000	 str         r3, [sp]

; 964  :         } 
; 965  :         else 

  0259c	ea000001	 b           |$LN15@WrappedEmu|
  025a0		 |$LN16@WrappedEmu|

; 966  :         {
; 967  :             N_plus_1 = 1;

  025a0	e3a03001	 mov         r3, #1
  025a4	e58d3000	 str         r3, [sp]
  025a8		 |$LN15@WrappedEmu|

; 968  :         }
; 969  : 
; 970  :         switch (lineParameters->iDir) 

  025a8	e59d3044	 ldr         r3, [sp, #0x44]
  025ac	e283301c	 add         r3, r3, #0x1C
  025b0	e5933000	 ldr         r3, [r3]
  025b4	e58d302c	 str         r3, [sp, #0x2C]
  025b8	e59d302c	 ldr         r3, [sp, #0x2C]
  025bc	e3530007	 cmp         r3, #7
  025c0	8a0000c0	 bhi         |$LN4@WrappedEmu|
  025c4	e59d202c	 ldr         r2, [sp, #0x2C]
  025c8	e1a03102	 mov         r3, r2, lsl #2
  025cc	e083300f	 add         r3, r3, pc
  025d0	e5933004	 ldr         r3, [r3, #4]
  025d4	e08ff003	 add         pc, pc, r3
  025d8		 |$LN23@WrappedEmu|
  025d8		 |$LN22@WrappedEmu|
  025d8		 |$LN24@WrappedEmu|
  025d8	0000001c	 DCD         0x1c
  025dc		 |$LN25@WrappedEmu|
  025dc	00000074	 DCD         0x74
  025e0		 |$LN26@WrappedEmu|
  025e0	000000cc	 DCD         0xcc
  025e4		 |$LN27@WrappedEmu|
  025e4	00000128	 DCD         0x128
  025e8		 |$LN28@WrappedEmu|
  025e8	00000180	 DCD         0x180
  025ec		 |$LN29@WrappedEmu|
  025ec	000001dc	 DCD         0x1dc
  025f0		 |$LN30@WrappedEmu|
  025f0	00000238	 DCD         0x238
  025f4		 |$LN31@WrappedEmu|
  025f4	00000290	 DCD         0x290
  025f8		 |$LN12@WrappedEmu|

; 971  :         {
; 972  :             case 0:
; 973  :                 bounds.left = lineParameters->xStart;

  025f8	e59d3044	 ldr         r3, [sp, #0x44]
  025fc	e2833004	 add         r3, r3, #4
  02600	e5933000	 ldr         r3, [r3]
  02604	e58d3004	 str         r3, [sp, #4]

; 974  :                 bounds.top = lineParameters->yStart;

  02608	e59d3044	 ldr         r3, [sp, #0x44]
  0260c	e2833008	 add         r3, r3, #8
  02610	e5933000	 ldr         r3, [r3]
  02614	e58d3008	 str         r3, [sp, #8]

; 975  :                 bounds.right = lineParameters->xStart + lineParameters->cPels + 1;

  02618	e59d3044	 ldr         r3, [sp, #0x44]
  0261c	e2832004	 add         r2, r3, #4
  02620	e59d3044	 ldr         r3, [sp, #0x44]
  02624	e283300c	 add         r3, r3, #0xC
  02628	e5922000	 ldr         r2, [r2]
  0262c	e5933000	 ldr         r3, [r3]
  02630	e0823003	 add         r3, r2, r3
  02634	e2833001	 add         r3, r3, #1
  02638	e58d300c	 str         r3, [sp, #0xC]

; 976  :                 bounds.bottom = bounds.top + N_plus_1;

  0263c	e59d2008	 ldr         r2, [sp, #8]
  02640	e59d3000	 ldr         r3, [sp]
  02644	e0823003	 add         r3, r2, r3
  02648	e58d3010	 str         r3, [sp, #0x10]

; 977  :                 break;

  0264c	ea0000af	 b           |$LN13@WrappedEmu|
  02650		 |$LN11@WrappedEmu|

; 978  : 
; 979  :             case 1:
; 980  :                 bounds.left = lineParameters->xStart;

  02650	e59d3044	 ldr         r3, [sp, #0x44]
  02654	e2833004	 add         r3, r3, #4
  02658	e5933000	 ldr         r3, [r3]
  0265c	e58d3004	 str         r3, [sp, #4]

; 981  :                 bounds.top = lineParameters->yStart;

  02660	e59d3044	 ldr         r3, [sp, #0x44]
  02664	e2833008	 add         r3, r3, #8
  02668	e5933000	 ldr         r3, [r3]
  0266c	e58d3008	 str         r3, [sp, #8]

; 982  :                 bounds.bottom = lineParameters->yStart + lineParameters->cPels + 1;

  02670	e59d3044	 ldr         r3, [sp, #0x44]
  02674	e2832008	 add         r2, r3, #8
  02678	e59d3044	 ldr         r3, [sp, #0x44]
  0267c	e283300c	 add         r3, r3, #0xC
  02680	e5922000	 ldr         r2, [r2]
  02684	e5933000	 ldr         r3, [r3]
  02688	e0823003	 add         r3, r2, r3
  0268c	e2833001	 add         r3, r3, #1
  02690	e58d3010	 str         r3, [sp, #0x10]

; 983  :                 bounds.right = bounds.left + N_plus_1;

  02694	e59d2004	 ldr         r2, [sp, #4]
  02698	e59d3000	 ldr         r3, [sp]
  0269c	e0823003	 add         r3, r2, r3
  026a0	e58d300c	 str         r3, [sp, #0xC]

; 984  :                 break;

  026a4	ea000099	 b           |$LN13@WrappedEmu|
  026a8		 |$LN10@WrappedEmu|

; 985  : 
; 986  :             case 2:
; 987  :                 bounds.right = lineParameters->xStart + 1;

  026a8	e59d3044	 ldr         r3, [sp, #0x44]
  026ac	e2833004	 add         r3, r3, #4
  026b0	e5933000	 ldr         r3, [r3]
  026b4	e2833001	 add         r3, r3, #1
  026b8	e58d300c	 str         r3, [sp, #0xC]

; 988  :                 bounds.top = lineParameters->yStart;

  026bc	e59d3044	 ldr         r3, [sp, #0x44]
  026c0	e2833008	 add         r3, r3, #8
  026c4	e5933000	 ldr         r3, [r3]
  026c8	e58d3008	 str         r3, [sp, #8]

; 989  :                 bounds.bottom = lineParameters->yStart + lineParameters->cPels + 1;

  026cc	e59d3044	 ldr         r3, [sp, #0x44]
  026d0	e2832008	 add         r2, r3, #8
  026d4	e59d3044	 ldr         r3, [sp, #0x44]
  026d8	e283300c	 add         r3, r3, #0xC
  026dc	e5922000	 ldr         r2, [r2]
  026e0	e5933000	 ldr         r3, [r3]
  026e4	e0823003	 add         r3, r2, r3
  026e8	e2833001	 add         r3, r3, #1
  026ec	e58d3010	 str         r3, [sp, #0x10]

; 990  :                 bounds.left = bounds.right - N_plus_1;

  026f0	e59d200c	 ldr         r2, [sp, #0xC]
  026f4	e59d3000	 ldr         r3, [sp]
  026f8	e0423003	 sub         r3, r2, r3
  026fc	e58d3004	 str         r3, [sp, #4]

; 991  :                 break;

  02700	ea000082	 b           |$LN13@WrappedEmu|
  02704		 |$LN9@WrappedEmu|

; 992  : 
; 993  :             case 3:
; 994  :                 bounds.right = lineParameters->xStart + 1;

  02704	e59d3044	 ldr         r3, [sp, #0x44]
  02708	e2833004	 add         r3, r3, #4
  0270c	e5933000	 ldr         r3, [r3]
  02710	e2833001	 add         r3, r3, #1
  02714	e58d300c	 str         r3, [sp, #0xC]

; 995  :                 bounds.top = lineParameters->yStart;

  02718	e59d3044	 ldr         r3, [sp, #0x44]
  0271c	e2833008	 add         r3, r3, #8
  02720	e5933000	 ldr         r3, [r3]
  02724	e58d3008	 str         r3, [sp, #8]

; 996  :                 bounds.left = lineParameters->xStart - lineParameters->cPels;

  02728	e59d3044	 ldr         r3, [sp, #0x44]
  0272c	e2832004	 add         r2, r3, #4
  02730	e59d3044	 ldr         r3, [sp, #0x44]
  02734	e283300c	 add         r3, r3, #0xC
  02738	e5922000	 ldr         r2, [r2]
  0273c	e5933000	 ldr         r3, [r3]
  02740	e0423003	 sub         r3, r2, r3
  02744	e58d3004	 str         r3, [sp, #4]

; 997  :                 bounds.bottom = bounds.top + N_plus_1;

  02748	e59d2008	 ldr         r2, [sp, #8]
  0274c	e59d3000	 ldr         r3, [sp]
  02750	e0823003	 add         r3, r2, r3
  02754	e58d3010	 str         r3, [sp, #0x10]

; 998  :                 break;

  02758	ea00006c	 b           |$LN13@WrappedEmu|
  0275c		 |$LN8@WrappedEmu|

; 999  : 
; 1000 :             case 4:
; 1001 :                 bounds.right = lineParameters->xStart + 1;

  0275c	e59d3044	 ldr         r3, [sp, #0x44]
  02760	e2833004	 add         r3, r3, #4
  02764	e5933000	 ldr         r3, [r3]
  02768	e2833001	 add         r3, r3, #1
  0276c	e58d300c	 str         r3, [sp, #0xC]

; 1002 :                 bounds.bottom = lineParameters->yStart + 1;

  02770	e59d3044	 ldr         r3, [sp, #0x44]
  02774	e2833008	 add         r3, r3, #8
  02778	e5933000	 ldr         r3, [r3]
  0277c	e2833001	 add         r3, r3, #1
  02780	e58d3010	 str         r3, [sp, #0x10]

; 1003 :                 bounds.left = lineParameters->xStart - lineParameters->cPels;

  02784	e59d3044	 ldr         r3, [sp, #0x44]
  02788	e2832004	 add         r2, r3, #4
  0278c	e59d3044	 ldr         r3, [sp, #0x44]
  02790	e283300c	 add         r3, r3, #0xC
  02794	e5922000	 ldr         r2, [r2]
  02798	e5933000	 ldr         r3, [r3]
  0279c	e0423003	 sub         r3, r2, r3
  027a0	e58d3004	 str         r3, [sp, #4]

; 1004 :                 bounds.top = bounds.bottom - N_plus_1;

  027a4	e59d2010	 ldr         r2, [sp, #0x10]
  027a8	e59d3000	 ldr         r3, [sp]
  027ac	e0423003	 sub         r3, r2, r3
  027b0	e58d3008	 str         r3, [sp, #8]

; 1005 :                 break;

  027b4	ea000055	 b           |$LN13@WrappedEmu|
  027b8		 |$LN7@WrappedEmu|

; 1006 : 
; 1007 :             case 5:
; 1008 :                 bounds.right = lineParameters->xStart + 1;

  027b8	e59d3044	 ldr         r3, [sp, #0x44]
  027bc	e2833004	 add         r3, r3, #4
  027c0	e5933000	 ldr         r3, [r3]
  027c4	e2833001	 add         r3, r3, #1
  027c8	e58d300c	 str         r3, [sp, #0xC]

; 1009 :                 bounds.bottom = lineParameters->yStart + 1;

  027cc	e59d3044	 ldr         r3, [sp, #0x44]
  027d0	e2833008	 add         r3, r3, #8
  027d4	e5933000	 ldr         r3, [r3]
  027d8	e2833001	 add         r3, r3, #1
  027dc	e58d3010	 str         r3, [sp, #0x10]

; 1010 :                 bounds.top = lineParameters->yStart - lineParameters->cPels;

  027e0	e59d3044	 ldr         r3, [sp, #0x44]
  027e4	e2832008	 add         r2, r3, #8
  027e8	e59d3044	 ldr         r3, [sp, #0x44]
  027ec	e283300c	 add         r3, r3, #0xC
  027f0	e5922000	 ldr         r2, [r2]
  027f4	e5933000	 ldr         r3, [r3]
  027f8	e0423003	 sub         r3, r2, r3
  027fc	e58d3008	 str         r3, [sp, #8]

; 1011 :                 bounds.left = bounds.right - N_plus_1;

  02800	e59d200c	 ldr         r2, [sp, #0xC]
  02804	e59d3000	 ldr         r3, [sp]
  02808	e0423003	 sub         r3, r2, r3
  0280c	e58d3004	 str         r3, [sp, #4]

; 1012 :                 break;

  02810	ea00003e	 b           |$LN13@WrappedEmu|
  02814		 |$LN6@WrappedEmu|

; 1013 : 
; 1014 :             case 6:
; 1015 :                 bounds.left = lineParameters->xStart;

  02814	e59d3044	 ldr         r3, [sp, #0x44]
  02818	e2833004	 add         r3, r3, #4
  0281c	e5933000	 ldr         r3, [r3]
  02820	e58d3004	 str         r3, [sp, #4]

; 1016 :                 bounds.bottom = lineParameters->yStart + 1;

  02824	e59d3044	 ldr         r3, [sp, #0x44]
  02828	e2833008	 add         r3, r3, #8
  0282c	e5933000	 ldr         r3, [r3]
  02830	e2833001	 add         r3, r3, #1
  02834	e58d3010	 str         r3, [sp, #0x10]

; 1017 :                 bounds.top = lineParameters->yStart - lineParameters->cPels;

  02838	e59d3044	 ldr         r3, [sp, #0x44]
  0283c	e2832008	 add         r2, r3, #8
  02840	e59d3044	 ldr         r3, [sp, #0x44]
  02844	e283300c	 add         r3, r3, #0xC
  02848	e5922000	 ldr         r2, [r2]
  0284c	e5933000	 ldr         r3, [r3]
  02850	e0423003	 sub         r3, r2, r3
  02854	e58d3008	 str         r3, [sp, #8]

; 1018 :                 bounds.right = bounds.left + N_plus_1;

  02858	e59d2004	 ldr         r2, [sp, #4]
  0285c	e59d3000	 ldr         r3, [sp]
  02860	e0823003	 add         r3, r2, r3
  02864	e58d300c	 str         r3, [sp, #0xC]

; 1019 :                 break;

  02868	ea000028	 b           |$LN13@WrappedEmu|
  0286c		 |$LN5@WrappedEmu|

; 1020 : 
; 1021 :             case 7:
; 1022 :                 bounds.left = lineParameters->xStart;

  0286c	e59d3044	 ldr         r3, [sp, #0x44]
  02870	e2833004	 add         r3, r3, #4
  02874	e5933000	 ldr         r3, [r3]
  02878	e58d3004	 str         r3, [sp, #4]

; 1023 :                 bounds.bottom = lineParameters->yStart + 1;

  0287c	e59d3044	 ldr         r3, [sp, #0x44]
  02880	e2833008	 add         r3, r3, #8
  02884	e5933000	 ldr         r3, [r3]
  02888	e2833001	 add         r3, r3, #1
  0288c	e58d3010	 str         r3, [sp, #0x10]

; 1024 :                 bounds.right = lineParameters->xStart + lineParameters->cPels + 1;

  02890	e59d3044	 ldr         r3, [sp, #0x44]
  02894	e2832004	 add         r2, r3, #4
  02898	e59d3044	 ldr         r3, [sp, #0x44]
  0289c	e283300c	 add         r3, r3, #0xC
  028a0	e5922000	 ldr         r2, [r2]
  028a4	e5933000	 ldr         r3, [r3]
  028a8	e0823003	 add         r3, r2, r3
  028ac	e2833001	 add         r3, r3, #1
  028b0	e58d300c	 str         r3, [sp, #0xC]

; 1025 :                 bounds.top = bounds.bottom - N_plus_1;

  028b4	e59d2010	 ldr         r2, [sp, #0x10]
  028b8	e59d3000	 ldr         r3, [sp]
  028bc	e0423003	 sub         r3, r2, r3
  028c0	e58d3008	 str         r3, [sp, #8]

; 1026 :                 break;

  028c4	ea000011	 b           |$LN13@WrappedEmu|
  028c8		 |$LN4@WrappedEmu|

; 1027 : 
; 1028 :             default:
; 1029 :                 DEBUGMSG(GPE_ZONE_ERROR,(L"OMAPDDGPE::WrappedEmulatedLine: "
; 1030 :                     L"Invalid direction: %d\r\n", lineParameters->iDir
; 1031 :                 ));

  028c8	e59f3170	 ldr         r3, [pc, #0x170]
  028cc	e5933440	 ldr         r3, [r3, #0x440]
  028d0	e3130001	 tst         r3, #1
  028d4	0a000007	 beq         |$LN20@WrappedEmu|
  028d8	e59d3044	 ldr         r3, [sp, #0x44]
  028dc	e283301c	 add         r3, r3, #0x1C
  028e0	e5931000	 ldr         r1, [r3]
  028e4	e59f0150	 ldr         r0, [pc, #0x150]
  028e8	eb000000	 bl          NKDbgPrintfW
  028ec	e3a03001	 mov         r3, #1
  028f0	e58d3030	 str         r3, [sp, #0x30]
  028f4	ea000001	 b           |$LN21@WrappedEmu|
  028f8		 |$LN20@WrappedEmu|
  028f8	e3a03000	 mov         r3, #0
  028fc	e58d3030	 str         r3, [sp, #0x30]
  02900		 |$LN21@WrappedEmu|

; 1032 :                 sc = E_INVALIDARG;

  02900	e59f3130	 ldr         r3, [pc, #0x130]
  02904	e58d3014	 str         r3, [sp, #0x14]
  02908	ea000044	 b           |$LN3@WrappedEmu|

; 1033 :                 goto cleanUp;

  0290c	ea000043	 b           |$cleanUp$42483|
  02910		 |$LN13@WrappedEmu|

; 1034 :         }
; 1035 : 
; 1036 :         // If line overlap cursor, turn if off
; 1037 :         RECTL cursorRect = m_cursorRect;

  02910	e59d3040	 ldr         r3, [sp, #0x40]
  02914	e2831f56	 add         r1, r3, #0x56, 30
  02918	e28d0018	 add         r0, sp, #0x18
  0291c	e3a02010	 mov         r2, #0x10
  02920	eb000000	 bl          memcpy

; 1038 :         RotateRectl(&cursorRect);

  02924	e28d1018	 add         r1, sp, #0x18
  02928	e59d0040	 ldr         r0, [sp, #0x40]
  0292c	eb000000	 bl          |?RotateRectl@GPE@@QAAXPAU_RECTL@@@Z|

; 1039 : 
; 1040 :         if (cursorRect.top < bounds.bottom && 
; 1041 :             cursorRect.bottom > bounds.top &&
; 1042 :             cursorRect.left < bounds.right && 
; 1043 :             cursorRect.right > bounds.left
; 1044 :         ) 

  02930	e59d201c	 ldr         r2, [sp, #0x1C]
  02934	e59d3010	 ldr         r3, [sp, #0x10]
  02938	e1520003	 cmp         r2, r3
  0293c	aa000011	 bge         |$LN2@WrappedEmu|
  02940	e59d2024	 ldr         r2, [sp, #0x24]
  02944	e59d3008	 ldr         r3, [sp, #8]
  02948	e1520003	 cmp         r2, r3
  0294c	da00000d	 ble         |$LN2@WrappedEmu|
  02950	e59d2018	 ldr         r2, [sp, #0x18]
  02954	e59d300c	 ldr         r3, [sp, #0xC]
  02958	e1520003	 cmp         r2, r3
  0295c	aa000009	 bge         |$LN2@WrappedEmu|
  02960	e59d2020	 ldr         r2, [sp, #0x20]
  02964	e59d3004	 ldr         r3, [sp, #4]
  02968	e1520003	 cmp         r2, r3
  0296c	da000005	 ble         |$LN2@WrappedEmu|

; 1045 :         { 
; 1046 :             CursorOff();

  02970	e59d0040	 ldr         r0, [sp, #0x40]
  02974	eb000000	 bl          |?CursorOff@OMAPDDGPE@@QAAXXZ|

; 1047 :             m_cursorForcedOff = TRUE;

  02978	e59d3040	 ldr         r3, [sp, #0x40]
  0297c	e2832f55	 add         r2, r3, #0x55, 30
  02980	e3a03001	 mov         r3, #1
  02984	e5823000	 str         r3, [r2]
  02988		 |$LN2@WrappedEmu|
  02988		 |$LN17@WrappedEmu|

; 1048 :         }            
; 1049 :     }
; 1050 : 
; 1051 :     Unlock();

  02988	e59d3040	 ldr         r3, [sp, #0x40]
  0298c	e5933000	 ldr         r3, [r3]
  02990	e28330f0	 add         r3, r3, #0xF0
  02994	e59d0040	 ldr         r0, [sp, #0x40]
  02998	e5933000	 ldr         r3, [r3]
  0299c	e1a0e00f	 mov         lr, pc
  029a0	e12fff13	 bx          r3

; 1052 :     
; 1053 :     // Do emulated line
; 1054 :     sc = EmulatedLine(lineParameters);

  029a4	e59d1044	 ldr         r1, [sp, #0x44]
  029a8	e59d0040	 ldr         r0, [sp, #0x40]
  029ac	eb000000	 bl          |?EmulatedLine@GPE@@QAAJPAUGPELineParms@@@Z|
  029b0	e58d0034	 str         r0, [sp, #0x34]
  029b4	e59d3034	 ldr         r3, [sp, #0x34]
  029b8	e58d3014	 str         r3, [sp, #0x14]

; 1055 : 
; 1056 :     // If cursor was forced off turn it back on
; 1057 :     if (m_cursorForcedOff) 

  029bc	e59d3040	 ldr         r3, [sp, #0x40]
  029c0	e2833f55	 add         r3, r3, #0x55, 30
  029c4	e5933000	 ldr         r3, [r3]
  029c8	e3530000	 cmp         r3, #0
  029cc	0a000013	 beq         |$LN1@WrappedEmu|

; 1058 :     {
; 1059 :         m_cursorForcedOff = FALSE;

  029d0	e59d3040	 ldr         r3, [sp, #0x40]
  029d4	e2832f55	 add         r2, r3, #0x55, 30
  029d8	e3a03000	 mov         r3, #0
  029dc	e5823000	 str         r3, [r2]

; 1060 :         Lock();

  029e0	e59d3040	 ldr         r3, [sp, #0x40]
  029e4	e5933000	 ldr         r3, [r3]
  029e8	e28330ec	 add         r3, r3, #0xEC
  029ec	e59d0040	 ldr         r0, [sp, #0x40]
  029f0	e5933000	 ldr         r3, [r3]
  029f4	e1a0e00f	 mov         lr, pc
  029f8	e12fff13	 bx          r3

; 1061 :         CursorOn();

  029fc	e59d0040	 ldr         r0, [sp, #0x40]
  02a00	eb000000	 bl          |?CursorOn@OMAPDDGPE@@QAAXXZ|

; 1062 :         Unlock();

  02a04	e59d3040	 ldr         r3, [sp, #0x40]
  02a08	e5933000	 ldr         r3, [r3]
  02a0c	e28330f0	 add         r3, r3, #0xF0
  02a10	e59d0040	 ldr         r0, [sp, #0x40]
  02a14	e5933000	 ldr         r3, [r3]
  02a18	e1a0e00f	 mov         lr, pc
  02a1c	e12fff13	 bx          r3
  02a20		 |$LN1@WrappedEmu|
  02a20		 |$LN3@WrappedEmu|
  02a20		 |$cleanUp$42483|

; 1063 :     }
; 1064 : 
; 1065 : cleanUp:
; 1066 :     return sc;

  02a20	e59d3014	 ldr         r3, [sp, #0x14]
  02a24	e58d3028	 str         r3, [sp, #0x28]

; 1067 : }

  02a28	e59d0028	 ldr         r0, [sp, #0x28]
  02a2c	e28dd038	 add         sp, sp, #0x38
  02a30	e89d6000	 ldmia       sp, {sp, lr}
  02a34	e12fff1e	 bx          lr
  02a38		 |$LN35@WrappedEmu|
  02a38		 |$LN36@WrappedEmu|
  02a38	80070057	 DCD         0x80070057
  02a3c		 |$LN37@WrappedEmu|
  02a3c	00000000	 DCD         |??_C@_1HA@OCEFLDPL@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAW?$AAr?$AAa?$AAp?$AAp?$AAe?$AAd?$AAE?$AAm?$AAu?$AAl?$AAa?$AAt?$AAe?$AAd?$AAL?$AAi?$AAn?$AAe?$AA?3?$AA?5@|
  02a40		 |$LN38@WrappedEmu|
  02a40	00000000	 DCD         |dpCurSettings|
  02a44		 |$M43619|

			 ENDP  ; |?WrappedEmulatedLine@OMAPDDGPE@@AAAJPAUGPELineParms@@@Z|, OMAPDDGPE::WrappedEmulatedLine

	EXPORT	|??_C@_1CE@GIIPMDEG@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAL?$AAi?$AAn?$AAe?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00098			 AREA	 |.pdata|, PDATA
|$T43633| DCD	|$LN13@Line|
	DCD	0x40002e04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@GIIPMDEG@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAL?$AAi?$AAn?$AAe?$AA?$AN?$AA?6?$AA?$AA@| DCB "O"
	DCB	0x0, "M", 0x0, "A", 0x0, "P", 0x0, "D", 0x0, "D", 0x0, "G"
	DCB	0x0, "P", 0x0, "E", 0x0, ":", 0x0, ":", 0x0, "L", 0x0, "i"
	DCB	0x0, "n", 0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  02a44			 AREA	 |.text|, CODE, ARM

  02a44		 |?Line@OMAPDDGPE@@UAAJPAUGPELineParms@@W4EGPEPhase@@@Z| PROC ; OMAPDDGPE::Line

; 1076 : {

  02a44		 |$LN13@Line|
  02a44	e1a0c00d	 mov         r12, sp
  02a48	e92d0007	 stmdb       sp!, {r0 - r2}
  02a4c	e92d5000	 stmdb       sp!, {r12, lr}
  02a50	e24dd008	 sub         sp, sp, #8
  02a54		 |$M43630|

; 1077 :     DEBUGMSG (GPE_ZONE_LINE, (TEXT("OMAPDDGPE::Line\r\n")));

  02a54	e59f309c	 ldr         r3, [pc, #0x9C]
  02a58	e5933440	 ldr         r3, [r3, #0x440]
  02a5c	e3130b01	 tst         r3, #1, 22
  02a60	0a000004	 beq         |$LN9@Line|
  02a64	e59f0088	 ldr         r0, [pc, #0x88]
  02a68	eb000000	 bl          NKDbgPrintfW
  02a6c	e3a03001	 mov         r3, #1
  02a70	e58d3004	 str         r3, [sp, #4]
  02a74	ea000001	 b           |$LN10@Line|
  02a78		 |$LN9@Line|
  02a78	e3a03000	 mov         r3, #0
  02a7c	e58d3004	 str         r3, [sp, #4]
  02a80		 |$LN10@Line|

; 1078 : 
; 1079 :     if (phase == gpeSingle || phase == gpePrepare)

  02a80	e59d3018	 ldr         r3, [sp, #0x18]
  02a84	e3530000	 cmp         r3, #0
  02a88	0a000002	 beq         |$LN5@Line|
  02a8c	e59d3018	 ldr         r3, [sp, #0x18]
  02a90	e3530001	 cmp         r3, #1
  02a94	1a00000e	 bne         |$LN6@Line|
  02a98		 |$LN5@Line|

; 1080 :     {
; 1081 :         DispPerfStart (ROP_LINE);
; 1082 : 
; 1083 :         if (lineParameters->pDst != m_pPrimarySurface)

  02a98	e59d3014	 ldr         r3, [sp, #0x14]
  02a9c	e2832028	 add         r2, r3, #0x28
  02aa0	e59d3010	 ldr         r3, [sp, #0x10]
  02aa4	e2833004	 add         r3, r3, #4
  02aa8	e5922000	 ldr         r2, [r2]
  02aac	e5933000	 ldr         r3, [r3]
  02ab0	e1520003	 cmp         r2, r3
  02ab4	0a000003	 beq         |$LN4@Line|

; 1084 :         {
; 1085 :             lineParameters->pLine = &GPE::EmulatedLine;

  02ab8	e59f2030	 ldr         r2, [pc, #0x30]
  02abc	e59d3014	 ldr         r3, [sp, #0x14]
  02ac0	e5832000	 str         r2, [r3]

; 1086 :         }
; 1087 :         else

  02ac4	ea000002	 b           |$LN3@Line|
  02ac8		 |$LN4@Line|

; 1088 :         {
; 1089 :             lineParameters->pLine = (SCODE (GPE::*)(struct GPELineParms *))&OMAPDDGPE::WrappedEmulatedLine;

  02ac8	e59f201c	 ldr         r2, [pc, #0x1C]
  02acc	e59d3014	 ldr         r3, [sp, #0x14]
  02ad0	e5832000	 str         r2, [r3]
  02ad4		 |$LN3@Line|
  02ad4		 |$LN6@Line|

; 1090 :         }
; 1091 :     }
; 1092 :     else if (phase == gpeComplete)
; 1093 :     {
; 1094 :         DispPerfEnd (0);
; 1095 :     }
; 1096 :     
; 1097 :     return S_OK;

  02ad4	e3a03000	 mov         r3, #0
  02ad8	e58d3000	 str         r3, [sp]

; 1098 : }

  02adc	e59d0000	 ldr         r0, [sp]
  02ae0	e28dd008	 add         sp, sp, #8
  02ae4	e89d6000	 ldmia       sp, {sp, lr}
  02ae8	e12fff1e	 bx          lr
  02aec		 |$LN14@Line|
  02aec		 |$LN15@Line|
  02aec	00000000	 DCD         |?WrappedEmulatedLine@OMAPDDGPE@@AAAJPAUGPELineParms@@@Z|
  02af0		 |$LN16@Line|
  02af0	00000000	 DCD         |?EmulatedLine@GPE@@QAAJPAUGPELineParms@@@Z|
  02af4		 |$LN17@Line|
  02af4	00000000	 DCD         |??_C@_1CE@GIIPMDEG@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAL?$AAi?$AAn?$AAe?$AA?$AN?$AA?6?$AA?$AA@|
  02af8		 |$LN18@Line|
  02af8	00000000	 DCD         |dpCurSettings|
  02afc		 |$M43631|

			 ENDP  ; |?Line@OMAPDDGPE@@UAAJPAUGPELineParms@@W4EGPEPhase@@@Z|, OMAPDDGPE::Line

	EXPORT	|?Format@GPESurf@@QAA?AW4EGPEFormat@@XZ| ; GPESurf::Format
	EXPORT	|?InVideoMemory@GPESurf@@QAAHXZ|	; GPESurf::InVideoMemory
	EXPORT	|??_C@_1DA@BCJAONKL@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAB?$AAl?$AAt?$AAP?$AAr?$AAe?$AAp?$AAa?$AAr?$AAe?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|?DesignateBlt@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| ; OMAPDDGPE::DesignateBlt
	IMPORT	|?DMASrcCopy@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| ; OMAPDDGPE::DMASrcCopy
	IMPORT	|?DMAFill@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| ; OMAPDDGPE::DMAFill
	IMPORT	|?EmulatedBlt@GPE@@QAAJPAUGPEBltParms@@@Z| ; GPE::EmulatedBlt

  000a0			 AREA	 |.pdata|, PDATA
|$T43647| DCD	|$LN33@BltPrepare|
	DCD	0x40015804

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@BCJAONKL@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAB?$AAl?$AAt?$AAP?$AAr?$AAe?$AAp?$AAa?$AAr?$AAe?$AA?$AN?$AA?6?$AA?$AA@| DCB "O"
	DCB	0x0, "M", 0x0, "A", 0x0, "P", 0x0, "D", 0x0, "D", 0x0, "G"
	DCB	0x0, "P", 0x0, "E", 0x0, ":", 0x0, ":", 0x0, "B", 0x0, "l"
	DCB	0x0, "t", 0x0, "P", 0x0, "r", 0x0, "e", 0x0, "p", 0x0, "a"
	DCB	0x0, "r", 0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  02afc			 AREA	 |.text|, CODE, ARM

  02afc		 |?BltPrepare@OMAPDDGPE@@UAAJPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::BltPrepare

; 1105 : {

  02afc		 |$LN33@BltPrepare|
  02afc	e1a0c00d	 mov         r12, sp
  02b00	e92d0003	 stmdb       sp!, {r0, r1}
  02b04	e92d5000	 stmdb       sp!, {r12, lr}
  02b08	e24dd034	 sub         sp, sp, #0x34
  02b0c		 |$M43644|

; 1106 :     RECTL rect;
; 1107 :     LONG swapTmp;
; 1108 : 
; 1109 :     DEBUGMSG (GPE_ZONE_BLT_LO, (TEXT("OMAPDDGPE::BltPrepare\r\n")));

  02b0c	e59f3544	 ldr         r3, [pc, #0x544]
  02b10	e5933440	 ldr         r3, [r3, #0x440]
  02b14	e3130080	 tst         r3, #0x80
  02b18	0a000004	 beq         |$LN28@BltPrepare|
  02b1c	e59f0530	 ldr         r0, [pc, #0x530]
  02b20	eb000000	 bl          NKDbgPrintfW
  02b24	e3a03001	 mov         r3, #1
  02b28	e58d3018	 str         r3, [sp, #0x18]
  02b2c	ea000001	 b           |$LN29@BltPrepare|
  02b30		 |$LN28@BltPrepare|
  02b30	e3a03000	 mov         r3, #0
  02b34	e58d3018	 str         r3, [sp, #0x18]
  02b38		 |$LN29@BltPrepare|

; 1110 : 
; 1111 :     //  Display perf start
; 1112 :     DispPerfStart( blitParameters->rop4 );
; 1113 :     
; 1114 : 
; 1115 :     if (g_Globals.m_dwCursorEnable)

  02b38	e59f3508	 ldr         r3, [pc, #0x508]
  02b3c	e5933234	 ldr         r3, [r3, #0x234]
  02b40	e3530000	 cmp         r3, #0
  02b44	0a0000a8	 beq         |$LN25@BltPrepare|

; 1116 :     {
; 1117 :         Lock();

  02b48	e59d303c	 ldr         r3, [sp, #0x3C]
  02b4c	e5933000	 ldr         r3, [r3]
  02b50	e28330ec	 add         r3, r3, #0xEC
  02b54	e59d003c	 ldr         r0, [sp, #0x3C]
  02b58	e5933000	 ldr         r3, [r3]
  02b5c	e1a0e00f	 mov         lr, pc
  02b60	e12fff13	 bx          r3

; 1118 : 
; 1119 :         // Check if destination overlap with cursor
; 1120 :         if (blitParameters->pDst == m_pPrimarySurface && m_cursorVisible && !m_cursorDisabled) 

  02b64	e59d3040	 ldr         r3, [sp, #0x40]
  02b68	e2832004	 add         r2, r3, #4
  02b6c	e59d303c	 ldr         r3, [sp, #0x3C]
  02b70	e2833004	 add         r3, r3, #4
  02b74	e5922000	 ldr         r2, [r2]
  02b78	e5933000	 ldr         r3, [r3]
  02b7c	e1520003	 cmp         r2, r3
  02b80	1a00004c	 bne         |$LN24@BltPrepare|
  02b84	e59d303c	 ldr         r3, [sp, #0x3C]
  02b88	e2833e15	 add         r3, r3, #0x15, 28
  02b8c	e5933000	 ldr         r3, [r3]
  02b90	e3530000	 cmp         r3, #0
  02b94	0a000047	 beq         |$LN24@BltPrepare|
  02b98	e59d303c	 ldr         r3, [sp, #0x3C]
  02b9c	e2833f53	 add         r3, r3, #0x53, 30
  02ba0	e5933000	 ldr         r3, [r3]
  02ba4	e3530000	 cmp         r3, #0
  02ba8	1a000042	 bne         |$LN24@BltPrepare|

; 1121 :         { 
; 1122 :             if (blitParameters->prclDst != NULL) 

  02bac	e59d3040	 ldr         r3, [sp, #0x40]
  02bb0	e2833014	 add         r3, r3, #0x14
  02bb4	e5933000	 ldr         r3, [r3]
  02bb8	e3530000	 cmp         r3, #0
  02bbc	0a00001a	 beq         |$LN23@BltPrepare|

; 1123 :             {
; 1124 :                 rect = *blitParameters->prclDst;     // if so, use it

  02bc0	e59d3040	 ldr         r3, [sp, #0x40]
  02bc4	e2833014	 add         r3, r3, #0x14
  02bc8	e5931000	 ldr         r1, [r3]
  02bcc	e28d0004	 add         r0, sp, #4
  02bd0	e3a02010	 mov         r2, #0x10
  02bd4	eb000000	 bl          memcpy

; 1125 : 
; 1126 :                 // There is no guarantee of a well
; 1127 :                 // ordered rect in blitParamters
; 1128 :                 // due to flipping and mirroring.
; 1129 :                 if (rect.top > rect.bottom) 

  02bd8	e59d2008	 ldr         r2, [sp, #8]
  02bdc	e59d3010	 ldr         r3, [sp, #0x10]
  02be0	e1520003	 cmp         r2, r3
  02be4	da000005	 ble         |$LN22@BltPrepare|

; 1130 :                 {
; 1131 :                     swapTmp = rect.top;

  02be8	e59d3008	 ldr         r3, [sp, #8]
  02bec	e58d3000	 str         r3, [sp]

; 1132 :                     rect.top = rect.bottom;

  02bf0	e59d3010	 ldr         r3, [sp, #0x10]
  02bf4	e58d3008	 str         r3, [sp, #8]

; 1133 :                     rect.bottom = swapTmp;

  02bf8	e59d3000	 ldr         r3, [sp]
  02bfc	e58d3010	 str         r3, [sp, #0x10]
  02c00		 |$LN22@BltPrepare|

; 1134 :                 }
; 1135 :                 if (rect.left > rect.right) 

  02c00	e59d2004	 ldr         r2, [sp, #4]
  02c04	e59d300c	 ldr         r3, [sp, #0xC]
  02c08	e1520003	 cmp         r2, r3
  02c0c	da000005	 ble         |$LN21@BltPrepare|

; 1136 :                 {
; 1137 :                     swapTmp    = rect.left;

  02c10	e59d3004	 ldr         r3, [sp, #4]
  02c14	e58d3000	 str         r3, [sp]

; 1138 :                     rect.left  = rect.right;

  02c18	e59d300c	 ldr         r3, [sp, #0xC]
  02c1c	e58d3004	 str         r3, [sp, #4]

; 1139 :                     rect.right = swapTmp;

  02c20	e59d3000	 ldr         r3, [sp]
  02c24	e58d300c	 str         r3, [sp, #0xC]
  02c28		 |$LN21@BltPrepare|

; 1140 :                 }
; 1141 :             } 
; 1142 :             else 

  02c28	ea000004	 b           |$LN20@BltPrepare|
  02c2c		 |$LN23@BltPrepare|

; 1143 :             {
; 1144 :                 rect = m_cursorRect;

  02c2c	e59d303c	 ldr         r3, [sp, #0x3C]
  02c30	e2831f56	 add         r1, r3, #0x56, 30
  02c34	e28d0004	 add         r0, sp, #4
  02c38	e3a02010	 mov         r2, #0x10
  02c3c	eb000000	 bl          memcpy
  02c40		 |$LN20@BltPrepare|

; 1145 :             }
; 1146 : 
; 1147 :             // Turn off cursor if it overlap
; 1148 :             if (
; 1149 :                 m_cursorRect.top <= rect.bottom &&
; 1150 :                 m_cursorRect.bottom >= rect.top &&
; 1151 :                 m_cursorRect.left <= rect.right &&
; 1152 :                 m_cursorRect.right >= rect.left
; 1153 :             ) 

  02c40	e59d303c	 ldr         r3, [sp, #0x3C]
  02c44	e2833f57	 add         r3, r3, #0x57, 30
  02c48	e5932000	 ldr         r2, [r3]
  02c4c	e59d3010	 ldr         r3, [sp, #0x10]
  02c50	e1520003	 cmp         r2, r3
  02c54	ca000017	 bgt         |$LN19@BltPrepare|
  02c58	e59d303c	 ldr         r3, [sp, #0x3C]
  02c5c	e2833f59	 add         r3, r3, #0x59, 30
  02c60	e5932000	 ldr         r2, [r3]
  02c64	e59d3008	 ldr         r3, [sp, #8]
  02c68	e1520003	 cmp         r2, r3
  02c6c	ba000011	 blt         |$LN19@BltPrepare|
  02c70	e59d303c	 ldr         r3, [sp, #0x3C]
  02c74	e2833f56	 add         r3, r3, #0x56, 30
  02c78	e5932000	 ldr         r2, [r3]
  02c7c	e59d300c	 ldr         r3, [sp, #0xC]
  02c80	e1520003	 cmp         r2, r3
  02c84	ca00000b	 bgt         |$LN19@BltPrepare|
  02c88	e59d303c	 ldr         r3, [sp, #0x3C]
  02c8c	e2833e16	 add         r3, r3, #0x16, 28
  02c90	e5932000	 ldr         r2, [r3]
  02c94	e59d3004	 ldr         r3, [sp, #4]
  02c98	e1520003	 cmp         r2, r3
  02c9c	ba000005	 blt         |$LN19@BltPrepare|

; 1154 :             {
; 1155 :                 CursorOff();

  02ca0	e59d003c	 ldr         r0, [sp, #0x3C]
  02ca4	eb000000	 bl          |?CursorOff@OMAPDDGPE@@QAAXXZ|

; 1156 :                 m_cursorForcedOff = TRUE;

  02ca8	e59d303c	 ldr         r3, [sp, #0x3C]
  02cac	e2832f55	 add         r2, r3, #0x55, 30
  02cb0	e3a03001	 mov         r3, #1
  02cb4	e5823000	 str         r3, [r2]
  02cb8		 |$LN19@BltPrepare|
  02cb8		 |$LN24@BltPrepare|

; 1157 :             }
; 1158 :         }
; 1159 : 
; 1160 :         // Check if source overlap with cursor
; 1161 :         if (blitParameters->pSrc == m_pPrimarySurface && m_cursorVisible && !m_cursorDisabled && !m_cursorForcedOff)

  02cb8	e59d3040	 ldr         r3, [sp, #0x40]
  02cbc	e2832008	 add         r2, r3, #8
  02cc0	e59d303c	 ldr         r3, [sp, #0x3C]
  02cc4	e2833004	 add         r3, r3, #4
  02cc8	e5922000	 ldr         r2, [r2]
  02ccc	e5933000	 ldr         r3, [r3]
  02cd0	e1520003	 cmp         r2, r3
  02cd4	1a00003d	 bne         |$LN18@BltPrepare|
  02cd8	e59d303c	 ldr         r3, [sp, #0x3C]
  02cdc	e2833e15	 add         r3, r3, #0x15, 28
  02ce0	e5933000	 ldr         r3, [r3]
  02ce4	e3530000	 cmp         r3, #0
  02ce8	0a000038	 beq         |$LN18@BltPrepare|
  02cec	e59d303c	 ldr         r3, [sp, #0x3C]
  02cf0	e2833f53	 add         r3, r3, #0x53, 30
  02cf4	e5933000	 ldr         r3, [r3]
  02cf8	e3530000	 cmp         r3, #0
  02cfc	1a000033	 bne         |$LN18@BltPrepare|
  02d00	e59d303c	 ldr         r3, [sp, #0x3C]
  02d04	e2833f55	 add         r3, r3, #0x55, 30
  02d08	e5933000	 ldr         r3, [r3]
  02d0c	e3530000	 cmp         r3, #0
  02d10	1a00002e	 bne         |$LN18@BltPrepare|

; 1162 :         {
; 1163 :             if (blitParameters->prclSrc != NULL) {

  02d14	e59d3040	 ldr         r3, [sp, #0x40]
  02d18	e2833018	 add         r3, r3, #0x18
  02d1c	e5933000	 ldr         r3, [r3]
  02d20	e3530000	 cmp         r3, #0
  02d24	0a000006	 beq         |$LN17@BltPrepare|

; 1164 :                 rect = *blitParameters->prclSrc;

  02d28	e59d3040	 ldr         r3, [sp, #0x40]
  02d2c	e2833018	 add         r3, r3, #0x18
  02d30	e5931000	 ldr         r1, [r3]
  02d34	e28d0004	 add         r0, sp, #4
  02d38	e3a02010	 mov         r2, #0x10
  02d3c	eb000000	 bl          memcpy

; 1165 :             } 
; 1166 :             else 

  02d40	ea000004	 b           |$LN16@BltPrepare|
  02d44		 |$LN17@BltPrepare|

; 1167 :             {
; 1168 :                 rect = m_cursorRect;

  02d44	e59d303c	 ldr         r3, [sp, #0x3C]
  02d48	e2831f56	 add         r1, r3, #0x56, 30
  02d4c	e28d0004	 add         r0, sp, #4
  02d50	e3a02010	 mov         r2, #0x10
  02d54	eb000000	 bl          memcpy
  02d58		 |$LN16@BltPrepare|

; 1169 :             }
; 1170 :             if (
; 1171 :                 m_cursorRect.top < rect.bottom && m_cursorRect.bottom > rect.top &&
; 1172 :                 m_cursorRect.left < rect.right && m_cursorRect.right > rect.left
; 1173 :             ) 

  02d58	e59d303c	 ldr         r3, [sp, #0x3C]
  02d5c	e2833f57	 add         r3, r3, #0x57, 30
  02d60	e5932000	 ldr         r2, [r3]
  02d64	e59d3010	 ldr         r3, [sp, #0x10]
  02d68	e1520003	 cmp         r2, r3
  02d6c	aa000017	 bge         |$LN15@BltPrepare|
  02d70	e59d303c	 ldr         r3, [sp, #0x3C]
  02d74	e2833f59	 add         r3, r3, #0x59, 30
  02d78	e5932000	 ldr         r2, [r3]
  02d7c	e59d3008	 ldr         r3, [sp, #8]
  02d80	e1520003	 cmp         r2, r3
  02d84	da000011	 ble         |$LN15@BltPrepare|
  02d88	e59d303c	 ldr         r3, [sp, #0x3C]
  02d8c	e2833f56	 add         r3, r3, #0x56, 30
  02d90	e5932000	 ldr         r2, [r3]
  02d94	e59d300c	 ldr         r3, [sp, #0xC]
  02d98	e1520003	 cmp         r2, r3
  02d9c	aa00000b	 bge         |$LN15@BltPrepare|
  02da0	e59d303c	 ldr         r3, [sp, #0x3C]
  02da4	e2833e16	 add         r3, r3, #0x16, 28
  02da8	e5932000	 ldr         r2, [r3]
  02dac	e59d3004	 ldr         r3, [sp, #4]
  02db0	e1520003	 cmp         r2, r3
  02db4	da000005	 ble         |$LN15@BltPrepare|

; 1174 :             {
; 1175 :                 CursorOff();

  02db8	e59d003c	 ldr         r0, [sp, #0x3C]
  02dbc	eb000000	 bl          |?CursorOff@OMAPDDGPE@@QAAXXZ|

; 1176 :                 m_cursorForcedOff = TRUE;

  02dc0	e59d303c	 ldr         r3, [sp, #0x3C]
  02dc4	e2832f55	 add         r2, r3, #0x55, 30
  02dc8	e3a03001	 mov         r3, #1
  02dcc	e5823000	 str         r3, [r2]
  02dd0		 |$LN15@BltPrepare|
  02dd0		 |$LN18@BltPrepare|

; 1177 :             }
; 1178 :         }
; 1179 : 
; 1180 :         Unlock();

  02dd0	e59d303c	 ldr         r3, [sp, #0x3C]
  02dd4	e5933000	 ldr         r3, [r3]
  02dd8	e28330f0	 add         r3, r3, #0xF0
  02ddc	e59d003c	 ldr         r0, [sp, #0x3C]
  02de0	e5933000	 ldr         r3, [r3]
  02de4	e1a0e00f	 mov         lr, pc
  02de8	e12fff13	 bx          r3
  02dec		 |$LN25@BltPrepare|

; 1181 :     }
; 1182 : 
; 1183 :     // Default to base emulated routine
; 1184 :     blitParameters->pBlt = &GPE::EmulatedBlt;

  02dec	e59f2250	 ldr         r2, [pc, #0x250]
  02df0	e59d3040	 ldr         r3, [sp, #0x40]
  02df4	e5832000	 str         r2, [r3]

; 1185 : 
; 1186 :     //  Check for any ROPs that can be accelerated by HW
; 1187 :     if( blitParameters->pDst->InVideoMemory() )

  02df8	e59d3040	 ldr         r3, [sp, #0x40]
  02dfc	e2833004	 add         r3, r3, #4
  02e00	e5930000	 ldr         r0, [r3]
  02e04	eb000000	 bl          |?InVideoMemory@GPESurf@@QAAHXZ|
  02e08	e58d001c	 str         r0, [sp, #0x1C]
  02e0c	e59d301c	 ldr         r3, [sp, #0x1C]
  02e10	e3530000	 cmp         r3, #0
  02e14	0a00006b	 beq         |$LN14@BltPrepare|

; 1188 :     { 
; 1189 :         switch( blitParameters->rop4 )

  02e18	e59d3040	 ldr         r3, [sp, #0x40]
  02e1c	e2833028	 add         r3, r3, #0x28
  02e20	e5933000	 ldr         r3, [r3]
  02e24	e58d3020	 str         r3, [sp, #0x20]
  02e28	e59d2020	 ldr         r2, [sp, #0x20]
  02e2c	e3a03a0f	 mov         r3, #0xF, 20
  02e30	e38330f0	 orr         r3, r3, #0xF0
  02e34	e1520003	 cmp         r2, r3
  02e38	8a00000d	 bhi         |$LN30@BltPrepare|
  02e3c	e59d2020	 ldr         r2, [sp, #0x20]
  02e40	e3a03a0f	 mov         r3, #0xF, 20
  02e44	e38330f0	 orr         r3, r3, #0xF0
  02e48	e1520003	 cmp         r2, r3
  02e4c	0a00001e	 beq         |$LN9@BltPrepare|
  02e50	e59d3020	 ldr         r3, [sp, #0x20]
  02e54	e3530000	 cmp         r3, #0
  02e58	0a00000b	 beq         |$LN11@BltPrepare|
  02e5c	e59d2020	 ldr         r2, [sp, #0x20]
  02e60	e3a03b33	 mov         r3, #0x33, 22
  02e64	e38330cc	 orr         r3, r3, #0xCC
  02e68	e1520003	 cmp         r2, r3
  02e6c	0a000027	 beq         |$LN7@BltPrepare|
  02e70	ea000054	 b           |$LN12@BltPrepare|
  02e74		 |$LN30@BltPrepare|
  02e74	e59d2020	 ldr         r2, [sp, #0x20]
  02e78	e3a03cff	 mov         r3, #0xFF, 24
  02e7c	e38330ff	 orr         r3, r3, #0xFF
  02e80	e1520003	 cmp         r2, r3
  02e84	0a000008	 beq         |$LN10@BltPrepare|
  02e88	ea00004e	 b           |$LN12@BltPrepare|
  02e8c		 |$LN11@BltPrepare|

; 1190 :         {
; 1191 :             case 0x0000:  // BLACKNESS
; 1192 :                 blitParameters->solidColor = 0;

  02e8c	e59d3040	 ldr         r3, [sp, #0x40]
  02e90	e2832020	 add         r2, r3, #0x20
  02e94	e3a03000	 mov         r3, #0
  02e98	e5823000	 str         r3, [r2]

; 1193 :                 blitParameters->pBlt = (SCODE (GPE::*)(struct GPEBltParms *)) &OMAPDDGPE::DMAFill;

  02e9c	e59f21ac	 ldr         r2, [pc, #0x1AC]
  02ea0	e59d3040	 ldr         r3, [sp, #0x40]
  02ea4	e5832000	 str         r2, [r3]

; 1194 :                 break;

  02ea8	ea000046	 b           |$LN12@BltPrepare|
  02eac		 |$LN10@BltPrepare|

; 1195 :                 
; 1196 :             case 0xFFFF:  // WHITENESS
; 1197 :                 blitParameters->solidColor = 0x00FFFFFF;

  02eac	e59d3040	 ldr         r3, [sp, #0x40]
  02eb0	e2832020	 add         r2, r3, #0x20
  02eb4	e3e034ff	 mvn         r3, #0xFF, 8
  02eb8	e5823000	 str         r3, [r2]

; 1198 :                 blitParameters->pBlt = (SCODE (GPE::*)(struct GPEBltParms *)) &OMAPDDGPE::DMAFill;

  02ebc	e59f218c	 ldr         r2, [pc, #0x18C]
  02ec0	e59d3040	 ldr         r3, [sp, #0x40]
  02ec4	e5832000	 str         r2, [r3]

; 1199 :                 break;

  02ec8	ea00003e	 b           |$LN12@BltPrepare|
  02ecc		 |$LN9@BltPrepare|

; 1200 : 
; 1201 :             case 0xF0F0:  // PATCOPY
; 1202 :                 // Solid color only
; 1203 :                 // Disabled 32 bit sDMA PATCOPY, it causes CETK DirectDraw test failure
; 1204 :                 if( blitParameters->solidColor != -1 && blitParameters->pDst->Format() != gpe32Bpp)

  02ecc	e59d3040	 ldr         r3, [sp, #0x40]
  02ed0	e2833020	 add         r3, r3, #0x20
  02ed4	e5933000	 ldr         r3, [r3]
  02ed8	e3730001	 cmn         r3, #1
  02edc	0a00000a	 beq         |$LN8@BltPrepare|
  02ee0	e59d3040	 ldr         r3, [sp, #0x40]
  02ee4	e2833004	 add         r3, r3, #4
  02ee8	e5930000	 ldr         r0, [r3]
  02eec	eb000000	 bl          |?Format@GPESurf@@QAA?AW4EGPEFormat@@XZ|
  02ef0	e58d0024	 str         r0, [sp, #0x24]
  02ef4	e59d3024	 ldr         r3, [sp, #0x24]
  02ef8	e3530006	 cmp         r3, #6
  02efc	0a000002	 beq         |$LN8@BltPrepare|

; 1205 :                 {
; 1206 :                     blitParameters->pBlt = (SCODE (GPE::*)(struct GPEBltParms *)) &OMAPDDGPE::DMAFill;

  02f00	e59f2148	 ldr         r2, [pc, #0x148]
  02f04	e59d3040	 ldr         r3, [sp, #0x40]
  02f08	e5832000	 str         r2, [r3]
  02f0c		 |$LN8@BltPrepare|

; 1207 :                 }
; 1208 :                 break;

  02f0c	ea00002d	 b           |$LN12@BltPrepare|
  02f10		 |$LN7@BltPrepare|

; 1209 : 
; 1210 :             case 0xCCCC:  // SRCCOPY
; 1211 :                 if( blitParameters->pSrc->InVideoMemory() &&
; 1212 :                     (blitParameters->pSrc->Format() == blitParameters->pDst->Format()) &&
; 1213 :                     blitParameters->pLookup == NULL &&
; 1214 :                     blitParameters->pConvert == NULL &&
; 1215 :                     blitParameters->xPositive > 0 )

  02f10	e59d3040	 ldr         r3, [sp, #0x40]
  02f14	e2833008	 add         r3, r3, #8
  02f18	e5930000	 ldr         r0, [r3]
  02f1c	eb000000	 bl          |?InVideoMemory@GPESurf@@QAAHXZ|
  02f20	e58d0028	 str         r0, [sp, #0x28]
  02f24	e59d3028	 ldr         r3, [sp, #0x28]
  02f28	e3530000	 cmp         r3, #0
  02f2c	0a000025	 beq         |$LN6@BltPrepare|
  02f30	e59d3040	 ldr         r3, [sp, #0x40]
  02f34	e2833008	 add         r3, r3, #8
  02f38	e5930000	 ldr         r0, [r3]
  02f3c	eb000000	 bl          |?Format@GPESurf@@QAA?AW4EGPEFormat@@XZ|
  02f40	e58d002c	 str         r0, [sp, #0x2C]
  02f44	e59d3040	 ldr         r3, [sp, #0x40]
  02f48	e2833004	 add         r3, r3, #4
  02f4c	e5930000	 ldr         r0, [r3]
  02f50	eb000000	 bl          |?Format@GPESurf@@QAA?AW4EGPEFormat@@XZ|
  02f54	e58d0030	 str         r0, [sp, #0x30]
  02f58	e59d202c	 ldr         r2, [sp, #0x2C]
  02f5c	e59d3030	 ldr         r3, [sp, #0x30]
  02f60	e1520003	 cmp         r2, r3
  02f64	1a000017	 bne         |$LN6@BltPrepare|
  02f68	e59d3040	 ldr         r3, [sp, #0x40]
  02f6c	e283303c	 add         r3, r3, #0x3C
  02f70	e5933000	 ldr         r3, [r3]
  02f74	e3530000	 cmp         r3, #0
  02f78	1a000012	 bne         |$LN6@BltPrepare|
  02f7c	e59d3040	 ldr         r3, [sp, #0x40]
  02f80	e2833040	 add         r3, r3, #0x40
  02f84	e5933000	 ldr         r3, [r3]
  02f88	e3530000	 cmp         r3, #0
  02f8c	1a00000d	 bne         |$LN6@BltPrepare|
  02f90	e59d3040	 ldr         r3, [sp, #0x40]
  02f94	e2833034	 add         r3, r3, #0x34
  02f98	e5933000	 ldr         r3, [r3]
  02f9c	e3530000	 cmp         r3, #0
  02fa0	da000008	 ble         |$LN6@BltPrepare|

; 1216 :                 {
; 1217 :                     //  Check the BLT flags
; 1218 :                     if( (blitParameters->bltFlags & ~(BLT_WAITVSYNC|BLT_WAITNOTBUSY)) == 0 )

  02fa4	e59d3040	 ldr         r3, [sp, #0x40]
  02fa8	e2833024	 add         r3, r3, #0x24
  02fac	e5932000	 ldr         r2, [r3]
  02fb0	e3e03b03	 mvn         r3, #3, 22
  02fb4	e1120003	 tst         r2, r3
  02fb8	1a000002	 bne         |$LN5@BltPrepare|

; 1219 :                     //if( blitParameters->bltFlags == 0 )
; 1220 :                     {
; 1221 :                         blitParameters->pBlt = (SCODE (GPE::*)(struct GPEBltParms *)) &OMAPDDGPE::DMASrcCopy;

  02fbc	e59f2088	 ldr         r2, [pc, #0x88]
  02fc0	e59d3040	 ldr         r3, [sp, #0x40]
  02fc4	e5832000	 str         r2, [r3]
  02fc8		 |$LN5@BltPrepare|
  02fc8		 |$LN6@BltPrepare|
  02fc8		 |$LN12@BltPrepare|
  02fc8		 |$LN14@BltPrepare|

; 1222 :                     }
; 1223 :                 }
; 1224 :                 break;                
; 1225 :         }
; 1226 :     }
; 1227 : 
; 1228 :     //  Check for any ROPs that can be accelerated by optimized SW
; 1229 :     if( g_Globals.m_dwEnableNeonBlts && blitParameters->pBlt == &GPE::EmulatedBlt)

  02fc8	e59f3078	 ldr         r3, [pc, #0x78]
  02fcc	e5933248	 ldr         r3, [r3, #0x248]
  02fd0	e3530000	 cmp         r3, #0
  02fd4	0a000007	 beq         |$LN4@BltPrepare|
  02fd8	e59d3040	 ldr         r3, [sp, #0x40]
  02fdc	e5932000	 ldr         r2, [r3]
  02fe0	e59f305c	 ldr         r3, [pc, #0x5C]
  02fe4	e1520003	 cmp         r2, r3
  02fe8	1a000002	 bne         |$LN4@BltPrepare|

; 1230 :     {
; 1231 :         blitParameters->pBlt = (SCODE (GPE::*)(GPEBltParms*))(&OMAPDDGPE::DesignateBlt);

  02fec	e59f204c	 ldr         r2, [pc, #0x4C]
  02ff0	e59d3040	 ldr         r3, [sp, #0x40]
  02ff4	e5832000	 str         r2, [r3]
  02ff8		 |$LN4@BltPrepare|

; 1232 :     }
; 1233 :     
; 1234 :     //  Display perf type
; 1235 :     if( blitParameters->pBlt != &GPE::EmulatedBlt ) 
; 1236 :         DispPerfType(DISPPERF_ACCEL_HARDWARE);
; 1237 :     else
; 1238 :         DispPerfType(DISPPERF_ACCEL_EMUL);
; 1239 : 
; 1240 : 	if( blitParameters->bltFlags & BLT_WAITVSYNC)

  02ff8	e59d3040	 ldr         r3, [sp, #0x40]
  02ffc	e2833024	 add         r3, r3, #0x24
  03000	e5933000	 ldr         r3, [r3]
  03004	e3130b02	 tst         r3, #2, 22
  03008	0a000006	 beq         |$LN1@BltPrepare|

; 1241 :     {            
; 1242 :         WaitForVBlank();            

  0300c	e59d303c	 ldr         r3, [sp, #0x3C]
  03010	e5933000	 ldr         r3, [r3]
  03014	e2833054	 add         r3, r3, #0x54
  03018	e59d003c	 ldr         r0, [sp, #0x3C]
  0301c	e5933000	 ldr         r3, [r3]
  03020	e1a0e00f	 mov         lr, pc
  03024	e12fff13	 bx          r3
  03028		 |$LN1@BltPrepare|

; 1243 :     }
; 1244 : 
; 1245 :     return S_OK;

  03028	e3a03000	 mov         r3, #0
  0302c	e58d3014	 str         r3, [sp, #0x14]

; 1246 : }

  03030	e59d0014	 ldr         r0, [sp, #0x14]
  03034	e28dd034	 add         sp, sp, #0x34
  03038	e89d6000	 ldmia       sp, {sp, lr}
  0303c	e12fff1e	 bx          lr
  03040		 |$LN34@BltPrepare|
  03040		 |$LN35@BltPrepare|
  03040	00000000	 DCD         |?DesignateBlt@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|
  03044		 |$LN36@BltPrepare|
  03044	00000000	 DCD         |?EmulatedBlt@GPE@@QAAJPAUGPEBltParms@@@Z|
  03048		 |$LN37@BltPrepare|
  03048	00000000	 DCD         |?g_Globals@@3VOMAPDDGPEGlobals@@A|
  0304c		 |$LN38@BltPrepare|
  0304c	00000000	 DCD         |?DMASrcCopy@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|
  03050		 |$LN39@BltPrepare|
  03050	00000000	 DCD         |?DMAFill@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|
  03054		 |$LN40@BltPrepare|
  03054	00000000	 DCD         |??_C@_1DA@BCJAONKL@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAB?$AAl?$AAt?$AAP?$AAr?$AAe?$AAp?$AAa?$AAr?$AAe?$AA?$AN?$AA?6?$AA?$AA@|
  03058		 |$LN41@BltPrepare|
  03058	00000000	 DCD         |dpCurSettings|
  0305c		 |$M43645|

			 ENDP  ; |?BltPrepare@OMAPDDGPE@@UAAJPAUGPEBltParms@@@Z|, OMAPDDGPE::BltPrepare

; File c:\wince600\public\common\oak\inc\gpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T43661| DCD	|$LN5@Format|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Format@GPESurf@@QAA?AW4EGPEFormat@@XZ| PROC ; GPESurf::Format

; 189  :     {

  00000		 |$LN5@Format|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M43658|

; 190  :         return m_eFormat;

  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e283301c	 add         r3, r3, #0x1C
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3000	 str         r3, [sp]

; 191  :     }

  00020	e59d0000	 ldr         r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M43659|

			 ENDP  ; |?Format@GPESurf@@QAA?AW4EGPEFormat@@XZ|, GPESurf::Format


  00000			 AREA	 |.pdata|, PDATA
|$T43669| DCD	|$LN5@InVideoMem|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?InVideoMemory@GPESurf@@QAAHXZ| PROC	; GPESurf::InVideoMemory

; 219  :     {

  00000		 |$LN5@InVideoMem|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M43666|

; 220  :         return m_fInVideoMemory;

  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e2833020	 add         r3, r3, #0x20
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3000	 str         r3, [sp]

; 221  :     }

  00020	e59d0000	 ldr         r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M43667|

			 ENDP  ; |?InVideoMemory@GPESurf@@QAAHXZ|, GPESurf::InVideoMemory

	EXPORT	|??_C@_1DC@DEKBPINO@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAB?$AAl?$AAt?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAe?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  000a8			 AREA	 |.pdata|, PDATA
|$T43679| DCD	|$LN9@BltComplet|
	DCD	0x40003c04
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\ddgpe\omap_ddgpe.cpp

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DC@DEKBPINO@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAB?$AAl?$AAt?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAe?$AA?$AN?$AA?6?$AA?$AA@| DCB "O"
	DCB	0x0, "M", 0x0, "A", 0x0, "P", 0x0, "D", 0x0, "D", 0x0, "G"
	DCB	0x0, "P", 0x0, "E", 0x0, ":", 0x0, ":", 0x0, "B", 0x0, "l"
	DCB	0x0, "t", 0x0, "C", 0x0, "o", 0x0, "m", 0x0, "p", 0x0, "l"
	DCB	0x0, "e", 0x0, "t", 0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Odtp

  0305c			 AREA	 |.text|, CODE, ARM

  0305c		 |?BltComplete@OMAPDDGPE@@UAAJPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::BltComplete

; 1253 : {

  0305c		 |$LN9@BltComplet|
  0305c	e1a0c00d	 mov         r12, sp
  03060	e92d0003	 stmdb       sp!, {r0, r1}
  03064	e92d5000	 stmdb       sp!, {r12, lr}
  03068	e24dd008	 sub         sp, sp, #8
  0306c		 |$M43676|

; 1254 :     DEBUGMSG (GPE_ZONE_BLT_LO, (TEXT("OMAPDDGPE::BltComplete\r\n")));

  0306c	e59f30d4	 ldr         r3, [pc, #0xD4]
  03070	e5933440	 ldr         r3, [r3, #0x440]
  03074	e3130080	 tst         r3, #0x80
  03078	0a000004	 beq         |$LN5@BltComplet|
  0307c	e59f00c0	 ldr         r0, [pc, #0xC0]
  03080	eb000000	 bl          NKDbgPrintfW
  03084	e3a03001	 mov         r3, #1
  03088	e58d3004	 str         r3, [sp, #4]
  0308c	ea000001	 b           |$LN6@BltComplet|
  03090		 |$LN5@BltComplet|
  03090	e3a03000	 mov         r3, #0
  03094	e58d3004	 str         r3, [sp, #4]
  03098		 |$LN6@BltComplet|

; 1255 :     
; 1256 :     UNREFERENCED_PARAMETER(blitParameters);
; 1257 :     
; 1258 :     // need to wait for DMA based operations to complete, else CETK and cursor issues
; 1259 :     WaitForNotBusy();

  03098	e59d3010	 ldr         r3, [sp, #0x10]
  0309c	e5933000	 ldr         r3, [r3]
  030a0	e2833060	 add         r3, r3, #0x60
  030a4	e59d0010	 ldr         r0, [sp, #0x10]
  030a8	e5933000	 ldr         r3, [r3]
  030ac	e1a0e00f	 mov         lr, pc
  030b0	e12fff13	 bx          r3

; 1260 : 
; 1261 :     if (g_Globals.m_dwCursorEnable)

  030b4	e59f3084	 ldr         r3, [pc, #0x84]
  030b8	e5933234	 ldr         r3, [r3, #0x234]
  030bc	e3530000	 cmp         r3, #0
  030c0	0a000018	 beq         |$LN2@BltComplet|

; 1262 :     {
; 1263 :         // If cursor was forced off turn it back on
; 1264 :         if (m_cursorForcedOff) 

  030c4	e59d3010	 ldr         r3, [sp, #0x10]
  030c8	e2833f55	 add         r3, r3, #0x55, 30
  030cc	e5933000	 ldr         r3, [r3]
  030d0	e3530000	 cmp         r3, #0
  030d4	0a000013	 beq         |$LN1@BltComplet|

; 1265 :         {
; 1266 :             m_cursorForcedOff = FALSE;

  030d8	e59d3010	 ldr         r3, [sp, #0x10]
  030dc	e2832f55	 add         r2, r3, #0x55, 30
  030e0	e3a03000	 mov         r3, #0
  030e4	e5823000	 str         r3, [r2]

; 1267 :             Lock();

  030e8	e59d3010	 ldr         r3, [sp, #0x10]
  030ec	e5933000	 ldr         r3, [r3]
  030f0	e28330ec	 add         r3, r3, #0xEC
  030f4	e59d0010	 ldr         r0, [sp, #0x10]
  030f8	e5933000	 ldr         r3, [r3]
  030fc	e1a0e00f	 mov         lr, pc
  03100	e12fff13	 bx          r3

; 1268 :             CursorOn();

  03104	e59d0010	 ldr         r0, [sp, #0x10]
  03108	eb000000	 bl          |?CursorOn@OMAPDDGPE@@QAAXXZ|

; 1269 :             Unlock();

  0310c	e59d3010	 ldr         r3, [sp, #0x10]
  03110	e5933000	 ldr         r3, [r3]
  03114	e28330f0	 add         r3, r3, #0xF0
  03118	e59d0010	 ldr         r0, [sp, #0x10]
  0311c	e5933000	 ldr         r3, [r3]
  03120	e1a0e00f	 mov         lr, pc
  03124	e12fff13	 bx          r3
  03128		 |$LN1@BltComplet|
  03128		 |$LN2@BltComplet|

; 1270 :         }
; 1271 :     }
; 1272 : 
; 1273 :     //  Display perf end
; 1274 :     DispPerfEnd(0);
; 1275 :     return S_OK;

  03128	e3a03000	 mov         r3, #0
  0312c	e58d3000	 str         r3, [sp]

; 1276 : }

  03130	e59d0000	 ldr         r0, [sp]
  03134	e28dd008	 add         sp, sp, #8
  03138	e89d6000	 ldmia       sp, {sp, lr}
  0313c	e12fff1e	 bx          lr
  03140		 |$LN10@BltComplet|
  03140		 |$LN11@BltComplet|
  03140	00000000	 DCD         |?g_Globals@@3VOMAPDDGPEGlobals@@A|
  03144		 |$LN12@BltComplet|
  03144	00000000	 DCD         |??_C@_1DC@DEKBPINO@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAB?$AAl?$AAt?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAe?$AA?$AN?$AA?6?$AA?$AA@|
  03148		 |$LN13@BltComplet|
  03148	00000000	 DCD         |dpCurSettings|
  0314c		 |$M43677|

			 ENDP  ; |?BltComplete@OMAPDDGPE@@UAAJPAUGPEBltParms@@@Z|, OMAPDDGPE::BltComplete

	EXPORT	|?GetDssInfo@OMAPDisplayController@@QAAPAUDSS_INFO@@XZ| ; OMAPDisplayController::GetDssInfo
	EXPORT	|??_C@_1FM@LGPECPHL@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAD?$AAr?$AAv?$AAE?$AAs?$AAc?$AAa?$AAp?$AAe?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAC?$AAO?$AAN?$AAT@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GA@DBBHFPMN@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAD?$AAr?$AAv?$AAE?$AAs?$AAc?$AAa?$AAp?$AAe?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAT?$AAI?$AAP?$AAM@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GC@KFHLKHOP@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAD?$AAr?$AAv?$AAE?$AAs?$AAc?$AAa?$AAp?$AAe?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FA@BOPLJMPC@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAD?$AAr?$AAv?$AAE?$AAs?$AAc?$AAa?$AAp?$AAe?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FA@BBOFEKHB@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAD?$AAr?$AAv?$AAE?$AAs?$AAc?$AAa?$AAp?$AAe?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FE@ODBLPIGL@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAD?$AAr?$AAv?$AAE?$AAs?$AAc?$AAa?$AAp?$AAe?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GC@ODHHGMOP@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAD?$AAr?$AAv?$AAE?$AAs?$AAc?$AAa?$AAp?$AAe?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FG@LGGAPCJP@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAD?$AAr?$AAv?$AAE?$AAs?$AAc?$AAa?$AAp?$AAe?$AA?3?$AA?5?$AAS?$AAE?$AAT?$AAP?$AAO?$AAW?$AAE?$AAR?$AAM?$AAA@| [ DATA ] ; `string'
	EXPORT	|?GetPowerLevel@OMAPDisplayController@@QAAKXZ| ; OMAPDisplayController::GetPowerLevel
	EXPORT	|??_C@_1FG@EMCDICIK@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAD?$AAr?$AAv?$AAE?$AAs?$AAc?$AAa?$AAp?$AAe?$AA?3?$AA?5?$AAG?$AAE?$AAT?$AAP?$AAO?$AAW?$AAE?$AAR?$AAM?$AAA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FI@IFGFIANG@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAD?$AAr?$AAv?$AAE?$AAs?$AAc?$AAa?$AAp?$AAe?$AA?3?$AA?5?$AAD?$AAR?$AAV?$AAE?$AAS?$AAC?$AA_?$AAH?$AAD?$AAM@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FG@NHFCEFAP@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAD?$AAr?$AAv?$AAE?$AAs?$AAc?$AAa?$AAp?$AAe?$AA?3?$AA?5?$AAD?$AAR?$AAV?$AAE?$AAS?$AAC?$AA_?$AAH?$AAD?$AAM@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FG@PABCPCIK@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAD?$AAr?$AAv?$AAE?$AAs?$AAc?$AAa?$AAp?$AAe?$AA?3?$AA?5?$AAD?$AAR?$AAV?$AAE?$AAS?$AAC?$AA_?$AAD?$AAV?$AAI@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FE@LBICODBP@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAD?$AAr?$AAv?$AAE?$AAs?$AAc?$AAa?$AAp?$AAe?$AA?3?$AA?5?$AAD?$AAR?$AAV?$AAE?$AAS?$AAC?$AA_?$AAD?$AAV?$AAI@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GC@NHENJONG@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAD?$AAr?$AAv?$AAE?$AAs?$AAc?$AAa?$AAp?$AAe?$AA?3?$AA?5?$AAD?$AAR?$AAV?$AAE?$AAS?$AAC?$AA_?$AAT?$AAV?$AAO@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GC@MKMFLLHC@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAD?$AAr?$AAv?$AAE?$AAs?$AAc?$AAa?$AAp?$AAe?$AA?3?$AA?5?$AAD?$AAR?$AAV?$AAE?$AAS?$AAC?$AA_?$AAT?$AAV?$AAO@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FK@MCBOMAKC@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAD?$AAr?$AAv?$AAE?$AAs?$AAc?$AAa?$AAp?$AAe?$AA?3?$AA?5?$AAD?$AAR?$AAV?$AAE?$AAS?$AAC?$AA_?$AAT?$AAV?$AAO@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FI@FEHJCNHM@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAD?$AAr?$AAv?$AAE?$AAs?$AAc?$AAa?$AAp?$AAe?$AA?3?$AA?5?$AAD?$AAR?$AAV?$AAE?$AAS?$AAC?$AA_?$AAT?$AAV?$AAO@| [ DATA ] ; `string'
	EXPORT	|?GetContrastLevel@OMAPDisplayController@@QAAKXZ| ; OMAPDisplayController::GetContrastLevel
	EXPORT	|??_C@_1EM@JJPONIIG@?$AAD?$AAR?$AAV?$AAE?$AAS?$AAC?$AA_?$AAS?$AAE?$AAT?$AAS?$AAC?$AAR?$AAE?$AAE?$AAN?$AAR?$AAO?$AAT?$AAA?$AAT?$AAI?$AAO?$AAN?$AA?3?$AA?5?$AAc?$AAj?$AAI?$AAn?$AA?5?$AA?$DN@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EM@DCFPKBLA@?$AAD?$AAR?$AAV?$AAE?$AAS?$AAC?$AA_?$AAE?$AAN?$AAD?$AAS?$AAC?$AAR?$AAE?$AAE?$AAN?$AAR?$AAO?$AAT?$AAA?$AAT?$AAI?$AAO?$AAN?$AA?3?$AA?5?$AAc?$AAj?$AAI?$AAn?$AA?5?$AA?$DN@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FA@EAONMHND@?$AAD?$AAR?$AAV?$AAE?$AAS?$AAC?$AA_?$AAB?$AAE?$AAG?$AAI?$AAN?$AAS?$AAC?$AAR?$AAE?$AAE?$AAN?$AAR?$AAO?$AAT?$AAA?$AAT?$AAI?$AAO?$AAN?$AA?3?$AA?5?$AAc?$AAj?$AAI?$AAn@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CO@CIMPCIMH@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAD?$AAr?$AAv?$AAE?$AAs?$AAc?$AAa?$AAp?$AAe?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|?RestoreRegisters@OMAPDisplayController@@QAAHW4OMAP_DSS_DESTINATION@@@Z| ; OMAPDisplayController::RestoreRegisters
	IMPORT	|?SetPowerLevel@OMAPDisplayController@@QAAHK@Z| ; OMAPDisplayController::SetPowerLevel
	IMPORT	|?EnableHdmi@OMAPDisplayController@@QAAHH@Z| ; OMAPDisplayController::EnableHdmi
	IMPORT	|?EnableDVI@OMAPDisplayController@@QAAHH@Z| ; OMAPDisplayController::EnableDVI
	IMPORT	|?SetContrastLevel@OMAPDisplayController@@QAAHK@Z| ; OMAPDisplayController::SetContrastLevel
	IMPORT	|?DisablePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@@Z| ; OMAPDisplayController::DisablePipeline
	IMPORT	|SetLastError|
	IMPORT	|__C_specific_handler|

  000b0			 AREA	 |.pdata|, PDATA
|$T43827| DCD	|$LN253@DrvEscape|
	DCD	0xc006db05
|$T43829| DCD	|$LN237@DrvEscape|
	DCD	0x40000301
|$T43831| DCD	|$LN230@DrvEscape|
	DCD	0x40000301
|$T43833| DCD	|$LN223@DrvEscape|
	DCD	0x40000301
|$T43835| DCD	|$LN216@DrvEscape|
	DCD	0x40000301
|$T43837| DCD	|$LN209@DrvEscape|
	DCD	0x40000301
|$T43839| DCD	|$LN202@DrvEscape|
	DCD	0x40000301
|$T43841| DCD	|$LN195@DrvEscape|
	DCD	0x40001601

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FM@LGPECPHL@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAD?$AAr?$AAv?$AAE?$AAs?$AAc?$AAa?$AAp?$AAe?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAC?$AAO?$AAN?$AAT@| DCB "O"
	DCB	0x0, "M", 0x0, "A", 0x0, "P", 0x0, "D", 0x0, "D", 0x0, "G"
	DCB	0x0, "P", 0x0, "E", 0x0, ":", 0x0, ":", 0x0, "D", 0x0, "r"
	DCB	0x0, "v", 0x0, "E", 0x0, "s", 0x0, "c", 0x0, "a", 0x0, "p"
	DCB	0x0, "e", 0x0, ":", 0x0, " ", 0x0, "I", 0x0, "O", 0x0, "C"
	DCB	0x0, "T", 0x0, "L", 0x0, "_", 0x0, "C", 0x0, "O", 0x0, "N"
	DCB	0x0, "T", 0x0, "E", 0x0, "X", 0x0, "T", 0x0, "_", 0x0, "R"
	DCB	0x0, "E", 0x0, "S", 0x0, "T", 0x0, "O", 0x0, "R", 0x0, "E"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GA@DBBHFPMN@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAD?$AAr?$AAv?$AAE?$AAs?$AAc?$AAa?$AAp?$AAe?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAT?$AAI?$AAP?$AAM@| DCB "O"
	DCB	0x0, "M", 0x0, "A", 0x0, "P", 0x0, "D", 0x0, "D", 0x0, "G"
	DCB	0x0, "P", 0x0, "E", 0x0, ":", 0x0, ":", 0x0, "D", 0x0, "r"
	DCB	0x0, "v", 0x0, "E", 0x0, "s", 0x0, "c", 0x0, "a", 0x0, "p"
	DCB	0x0, "e", 0x0, ":", 0x0, " ", 0x0, "I", 0x0, "O", 0x0, "C"
	DCB	0x0, "T", 0x0, "L", 0x0, "_", 0x0, "T", 0x0, "I", 0x0, "P"
	DCB	0x0, "M", 0x0, "X", 0x0, "_", 0x0, "C", 0x0, "O", 0x0, "N"
	DCB	0x0, "T", 0x0, "E", 0x0, "X", 0x0, "T", 0x0, "P", 0x0, "A"
	DCB	0x0, "T", 0x0, "H", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GC@KFHLKHOP@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAD?$AAr?$AAv?$AAE?$AAs?$AAc?$AAa?$AAp?$AAe?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE@| DCB "O"
	DCB	0x0, "M", 0x0, "A", 0x0, "P", 0x0, "D", 0x0, "D", 0x0, "G"
	DCB	0x0, "P", 0x0, "E", 0x0, ":", 0x0, ":", 0x0, "D", 0x0, "r"
	DCB	0x0, "v", 0x0, "E", 0x0, "s", 0x0, "c", 0x0, "a", 0x0, "p"
	DCB	0x0, "e", 0x0, ":", 0x0, " ", 0x0, "I", 0x0, "O", 0x0, "C"
	DCB	0x0, "T", 0x0, "L", 0x0, "_", 0x0, "P", 0x0, "O", 0x0, "W"
	DCB	0x0, "E", 0x0, "R", 0x0, "_", 0x0, "S", 0x0, "E", 0x0, "T"
	DCB	0x0, " ", 0x0, "=", 0x0, " ", 0x0, "t", 0x0, "o", 0x0, " "
	DCB	0x0, "D", 0x0, "%", 0x0, "u", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FA@BOPLJMPC@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAD?$AAr?$AAv?$AAE?$AAs?$AAc?$AAa?$AAp?$AAe?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE@| DCB "O"
	DCB	0x0, "M", 0x0, "A", 0x0, "P", 0x0, "D", 0x0, "D", 0x0, "G"
	DCB	0x0, "P", 0x0, "E", 0x0, ":", 0x0, ":", 0x0, "D", 0x0, "r"
	DCB	0x0, "v", 0x0, "E", 0x0, "s", 0x0, "c", 0x0, "a", 0x0, "p"
	DCB	0x0, "e", 0x0, ":", 0x0, " ", 0x0, "I", 0x0, "O", 0x0, "C"
	DCB	0x0, "T", 0x0, "L", 0x0, "_", 0x0, "P", 0x0, "O", 0x0, "W"
	DCB	0x0, "E", 0x0, "R", 0x0, "_", 0x0, "S", 0x0, "E", 0x0, "T"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FA@BBOFEKHB@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAD?$AAr?$AAv?$AAE?$AAs?$AAc?$AAa?$AAp?$AAe?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE@| DCB "O"
	DCB	0x0, "M", 0x0, "A", 0x0, "P", 0x0, "D", 0x0, "D", 0x0, "G"
	DCB	0x0, "P", 0x0, "E", 0x0, ":", 0x0, ":", 0x0, "D", 0x0, "r"
	DCB	0x0, "v", 0x0, "E", 0x0, "s", 0x0, "c", 0x0, "a", 0x0, "p"
	DCB	0x0, "e", 0x0, ":", 0x0, " ", 0x0, "I", 0x0, "O", 0x0, "C"
	DCB	0x0, "T", 0x0, "L", 0x0, "_", 0x0, "P", 0x0, "O", 0x0, "W"
	DCB	0x0, "E", 0x0, "R", 0x0, "_", 0x0, "G", 0x0, "E", 0x0, "T"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FE@ODBLPIGL@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAD?$AAr?$AAv?$AAE?$AAs?$AAc?$AAa?$AAp?$AAe?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE@| DCB "O"
	DCB	0x0, "M", 0x0, "A", 0x0, "P", 0x0, "D", 0x0, "D", 0x0, "G"
	DCB	0x0, "P", 0x0, "E", 0x0, ":", 0x0, ":", 0x0, "D", 0x0, "r"
	DCB	0x0, "v", 0x0, "E", 0x0, "s", 0x0, "c", 0x0, "a", 0x0, "p"
	DCB	0x0, "e", 0x0, ":", 0x0, " ", 0x0, "I", 0x0, "O", 0x0, "C"
	DCB	0x0, "T", 0x0, "L", 0x0, "_", 0x0, "P", 0x0, "O", 0x0, "W"
	DCB	0x0, "E", 0x0, "R", 0x0, "_", 0x0, "Q", 0x0, "U", 0x0, "E"
	DCB	0x0, "R", 0x0, "Y", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GC@ODHHGMOP@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAD?$AAr?$AAv?$AAE?$AAs?$AAc?$AAa?$AAp?$AAe?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE@| DCB "O"
	DCB	0x0, "M", 0x0, "A", 0x0, "P", 0x0, "D", 0x0, "D", 0x0, "G"
	DCB	0x0, "P", 0x0, "E", 0x0, ":", 0x0, ":", 0x0, "D", 0x0, "r"
	DCB	0x0, "v", 0x0, "E", 0x0, "s", 0x0, "c", 0x0, "a", 0x0, "p"
	DCB	0x0, "e", 0x0, ":", 0x0, " ", 0x0, "I", 0x0, "O", 0x0, "C"
	DCB	0x0, "T", 0x0, "L", 0x0, "_", 0x0, "P", 0x0, "O", 0x0, "W"
	DCB	0x0, "E", 0x0, "R", 0x0, "_", 0x0, "C", 0x0, "A", 0x0, "P"
	DCB	0x0, "A", 0x0, "B", 0x0, "I", 0x0, "L", 0x0, "I", 0x0, "T"
	DCB	0x0, "I", 0x0, "E", 0x0, "S", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FG@LGGAPCJP@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAD?$AAr?$AAv?$AAE?$AAs?$AAc?$AAa?$AAp?$AAe?$AA?3?$AA?5?$AAS?$AAE?$AAT?$AAP?$AAO?$AAW?$AAE?$AAR?$AAM?$AAA@| DCB "O"
	DCB	0x0, "M", 0x0, "A", 0x0, "P", 0x0, "D", 0x0, "D", 0x0, "G"
	DCB	0x0, "P", 0x0, "E", 0x0, ":", 0x0, ":", 0x0, "D", 0x0, "r"
	DCB	0x0, "v", 0x0, "E", 0x0, "s", 0x0, "c", 0x0, "a", 0x0, "p"
	DCB	0x0, "e", 0x0, ":", 0x0, " ", 0x0, "S", 0x0, "E", 0x0, "T"
	DCB	0x0, "P", 0x0, "O", 0x0, "W", 0x0, "E", 0x0, "R", 0x0, "M"
	DCB	0x0, "A", 0x0, "N", 0x0, "A", 0x0, "G", 0x0, "E", 0x0, "M"
	DCB	0x0, "E", 0x0, "N", 0x0, "T", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FG@EMCDICIK@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAD?$AAr?$AAv?$AAE?$AAs?$AAc?$AAa?$AAp?$AAe?$AA?3?$AA?5?$AAG?$AAE?$AAT?$AAP?$AAO?$AAW?$AAE?$AAR?$AAM?$AAA@| DCB "O"
	DCB	0x0, "M", 0x0, "A", 0x0, "P", 0x0, "D", 0x0, "D", 0x0, "G"
	DCB	0x0, "P", 0x0, "E", 0x0, ":", 0x0, ":", 0x0, "D", 0x0, "r"
	DCB	0x0, "v", 0x0, "E", 0x0, "s", 0x0, "c", 0x0, "a", 0x0, "p"
	DCB	0x0, "e", 0x0, ":", 0x0, " ", 0x0, "G", 0x0, "E", 0x0, "T"
	DCB	0x0, "P", 0x0, "O", 0x0, "W", 0x0, "E", 0x0, "R", 0x0, "M"
	DCB	0x0, "A", 0x0, "N", 0x0, "A", 0x0, "G", 0x0, "E", 0x0, "M"
	DCB	0x0, "E", 0x0, "N", 0x0, "T", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FI@IFGFIANG@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAD?$AAr?$AAv?$AAE?$AAs?$AAc?$AAa?$AAp?$AAe?$AA?3?$AA?5?$AAD?$AAR?$AAV?$AAE?$AAS?$AAC?$AA_?$AAH?$AAD?$AAM@| DCB "O"
	DCB	0x0, "M", 0x0, "A", 0x0, "P", 0x0, "D", 0x0, "D", 0x0, "G"
	DCB	0x0, "P", 0x0, "E", 0x0, ":", 0x0, ":", 0x0, "D", 0x0, "r"
	DCB	0x0, "v", 0x0, "E", 0x0, "s", 0x0, "c", 0x0, "a", 0x0, "p"
	DCB	0x0, "e", 0x0, ":", 0x0, " ", 0x0, "D", 0x0, "R", 0x0, "V"
	DCB	0x0, "E", 0x0, "S", 0x0, "C", 0x0, "_", 0x0, "H", 0x0, "D"
	DCB	0x0, "M", 0x0, "I", 0x0, "_", 0x0, "D", 0x0, "I", 0x0, "S"
	DCB	0x0, "A", 0x0, "B", 0x0, "L", 0x0, "E", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FG@NHFCEFAP@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAD?$AAr?$AAv?$AAE?$AAs?$AAc?$AAa?$AAp?$AAe?$AA?3?$AA?5?$AAD?$AAR?$AAV?$AAE?$AAS?$AAC?$AA_?$AAH?$AAD?$AAM@| DCB "O"
	DCB	0x0, "M", 0x0, "A", 0x0, "P", 0x0, "D", 0x0, "D", 0x0, "G"
	DCB	0x0, "P", 0x0, "E", 0x0, ":", 0x0, ":", 0x0, "D", 0x0, "r"
	DCB	0x0, "v", 0x0, "E", 0x0, "s", 0x0, "c", 0x0, "a", 0x0, "p"
	DCB	0x0, "e", 0x0, ":", 0x0, " ", 0x0, "D", 0x0, "R", 0x0, "V"
	DCB	0x0, "E", 0x0, "S", 0x0, "C", 0x0, "_", 0x0, "H", 0x0, "D"
	DCB	0x0, "M", 0x0, "I", 0x0, "_", 0x0, "E", 0x0, "N", 0x0, "A"
	DCB	0x0, "B", 0x0, "L", 0x0, "E", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FG@PABCPCIK@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAD?$AAr?$AAv?$AAE?$AAs?$AAc?$AAa?$AAp?$AAe?$AA?3?$AA?5?$AAD?$AAR?$AAV?$AAE?$AAS?$AAC?$AA_?$AAD?$AAV?$AAI@| DCB "O"
	DCB	0x0, "M", 0x0, "A", 0x0, "P", 0x0, "D", 0x0, "D", 0x0, "G"
	DCB	0x0, "P", 0x0, "E", 0x0, ":", 0x0, ":", 0x0, "D", 0x0, "r"
	DCB	0x0, "v", 0x0, "E", 0x0, "s", 0x0, "c", 0x0, "a", 0x0, "p"
	DCB	0x0, "e", 0x0, ":", 0x0, " ", 0x0, "D", 0x0, "R", 0x0, "V"
	DCB	0x0, "E", 0x0, "S", 0x0, "C", 0x0, "_", 0x0, "D", 0x0, "V"
	DCB	0x0, "I", 0x0, "_", 0x0, "D", 0x0, "I", 0x0, "S", 0x0, "A"
	DCB	0x0, "B", 0x0, "L", 0x0, "E", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FE@LBICODBP@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAD?$AAr?$AAv?$AAE?$AAs?$AAc?$AAa?$AAp?$AAe?$AA?3?$AA?5?$AAD?$AAR?$AAV?$AAE?$AAS?$AAC?$AA_?$AAD?$AAV?$AAI@| DCB "O"
	DCB	0x0, "M", 0x0, "A", 0x0, "P", 0x0, "D", 0x0, "D", 0x0, "G"
	DCB	0x0, "P", 0x0, "E", 0x0, ":", 0x0, ":", 0x0, "D", 0x0, "r"
	DCB	0x0, "v", 0x0, "E", 0x0, "s", 0x0, "c", 0x0, "a", 0x0, "p"
	DCB	0x0, "e", 0x0, ":", 0x0, " ", 0x0, "D", 0x0, "R", 0x0, "V"
	DCB	0x0, "E", 0x0, "S", 0x0, "C", 0x0, "_", 0x0, "D", 0x0, "V"
	DCB	0x0, "I", 0x0, "_", 0x0, "E", 0x0, "N", 0x0, "A", 0x0, "B"
	DCB	0x0, "L", 0x0, "E", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GC@NHENJONG@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAD?$AAr?$AAv?$AAE?$AAs?$AAc?$AAa?$AAp?$AAe?$AA?3?$AA?5?$AAD?$AAR?$AAV?$AAE?$AAS?$AAC?$AA_?$AAT?$AAV?$AAO@| DCB "O"
	DCB	0x0, "M", 0x0, "A", 0x0, "P", 0x0, "D", 0x0, "D", 0x0, "G"
	DCB	0x0, "P", 0x0, "E", 0x0, ":", 0x0, ":", 0x0, "D", 0x0, "r"
	DCB	0x0, "v", 0x0, "E", 0x0, "s", 0x0, "c", 0x0, "a", 0x0, "p"
	DCB	0x0, "e", 0x0, ":", 0x0, " ", 0x0, "D", 0x0, "R", 0x0, "V"
	DCB	0x0, "E", 0x0, "S", 0x0, "C", 0x0, "_", 0x0, "T", 0x0, "V"
	DCB	0x0, "O", 0x0, "U", 0x0, "T", 0x0, "_", 0x0, "S", 0x0, "E"
	DCB	0x0, "T", 0x0, "S", 0x0, "E", 0x0, "T", 0x0, "T", 0x0, "I"
	DCB	0x0, "N", 0x0, "G", 0x0, "S", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GC@MKMFLLHC@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAD?$AAr?$AAv?$AAE?$AAs?$AAc?$AAa?$AAp?$AAe?$AA?3?$AA?5?$AAD?$AAR?$AAV?$AAE?$AAS?$AAC?$AA_?$AAT?$AAV?$AAO@| DCB "O"
	DCB	0x0, "M", 0x0, "A", 0x0, "P", 0x0, "D", 0x0, "D", 0x0, "G"
	DCB	0x0, "P", 0x0, "E", 0x0, ":", 0x0, ":", 0x0, "D", 0x0, "r"
	DCB	0x0, "v", 0x0, "E", 0x0, "s", 0x0, "c", 0x0, "a", 0x0, "p"
	DCB	0x0, "e", 0x0, ":", 0x0, " ", 0x0, "D", 0x0, "R", 0x0, "V"
	DCB	0x0, "E", 0x0, "S", 0x0, "C", 0x0, "_", 0x0, "T", 0x0, "V"
	DCB	0x0, "O", 0x0, "U", 0x0, "T", 0x0, "_", 0x0, "G", 0x0, "E"
	DCB	0x0, "T", 0x0, "S", 0x0, "E", 0x0, "T", 0x0, "T", 0x0, "I"
	DCB	0x0, "N", 0x0, "G", 0x0, "S", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FK@MCBOMAKC@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAD?$AAr?$AAv?$AAE?$AAs?$AAc?$AAa?$AAp?$AAe?$AA?3?$AA?5?$AAD?$AAR?$AAV?$AAE?$AAS?$AAC?$AA_?$AAT?$AAV?$AAO@| DCB "O"
	DCB	0x0, "M", 0x0, "A", 0x0, "P", 0x0, "D", 0x0, "D", 0x0, "G"
	DCB	0x0, "P", 0x0, "E", 0x0, ":", 0x0, ":", 0x0, "D", 0x0, "r"
	DCB	0x0, "v", 0x0, "E", 0x0, "s", 0x0, "c", 0x0, "a", 0x0, "p"
	DCB	0x0, "e", 0x0, ":", 0x0, " ", 0x0, "D", 0x0, "R", 0x0, "V"
	DCB	0x0, "E", 0x0, "S", 0x0, "C", 0x0, "_", 0x0, "T", 0x0, "V"
	DCB	0x0, "O", 0x0, "U", 0x0, "T", 0x0, "_", 0x0, "D", 0x0, "I"
	DCB	0x0, "S", 0x0, "A", 0x0, "B", 0x0, "L", 0x0, "E", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FI@FEHJCNHM@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAD?$AAr?$AAv?$AAE?$AAs?$AAc?$AAa?$AAp?$AAe?$AA?3?$AA?5?$AAD?$AAR?$AAV?$AAE?$AAS?$AAC?$AA_?$AAT?$AAV?$AAO@| DCB "O"
	DCB	0x0, "M", 0x0, "A", 0x0, "P", 0x0, "D", 0x0, "D", 0x0, "G"
	DCB	0x0, "P", 0x0, "E", 0x0, ":", 0x0, ":", 0x0, "D", 0x0, "r"
	DCB	0x0, "v", 0x0, "E", 0x0, "s", 0x0, "c", 0x0, "a", 0x0, "p"
	DCB	0x0, "e", 0x0, ":", 0x0, " ", 0x0, "D", 0x0, "R", 0x0, "V"
	DCB	0x0, "E", 0x0, "S", 0x0, "C", 0x0, "_", 0x0, "T", 0x0, "V"
	DCB	0x0, "O", 0x0, "U", 0x0, "T", 0x0, "_", 0x0, "E", 0x0, "N"
	DCB	0x0, "A", 0x0, "B", 0x0, "L", 0x0, "E", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EM@JJPONIIG@?$AAD?$AAR?$AAV?$AAE?$AAS?$AAC?$AA_?$AAS?$AAE?$AAT?$AAS?$AAC?$AAR?$AAE?$AAE?$AAN?$AAR?$AAO?$AAT?$AAA?$AAT?$AAI?$AAO?$AAN?$AA?3?$AA?5?$AAc?$AAj?$AAI?$AAn?$AA?5?$AA?$DN@| DCB "D"
	DCB	0x0, "R", 0x0, "V", 0x0, "E", 0x0, "S", 0x0, "C", 0x0, "_"
	DCB	0x0, "S", 0x0, "E", 0x0, "T", 0x0, "S", 0x0, "C", 0x0, "R"
	DCB	0x0, "E", 0x0, "E", 0x0, "N", 0x0, "R", 0x0, "O", 0x0, "T"
	DCB	0x0, "A", 0x0, "T", 0x0, "I", 0x0, "O", 0x0, "N", 0x0, ":"
	DCB	0x0, " ", 0x0, "c", 0x0, "j", 0x0, "I", 0x0, "n", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EM@DCFPKBLA@?$AAD?$AAR?$AAV?$AAE?$AAS?$AAC?$AA_?$AAE?$AAN?$AAD?$AAS?$AAC?$AAR?$AAE?$AAE?$AAN?$AAR?$AAO?$AAT?$AAA?$AAT?$AAI?$AAO?$AAN?$AA?3?$AA?5?$AAc?$AAj?$AAI?$AAn?$AA?5?$AA?$DN@| DCB "D"
	DCB	0x0, "R", 0x0, "V", 0x0, "E", 0x0, "S", 0x0, "C", 0x0, "_"
	DCB	0x0, "E", 0x0, "N", 0x0, "D", 0x0, "S", 0x0, "C", 0x0, "R"
	DCB	0x0, "E", 0x0, "E", 0x0, "N", 0x0, "R", 0x0, "O", 0x0, "T"
	DCB	0x0, "A", 0x0, "T", 0x0, "I", 0x0, "O", 0x0, "N", 0x0, ":"
	DCB	0x0, " ", 0x0, "c", 0x0, "j", 0x0, "I", 0x0, "n", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FA@EAONMHND@?$AAD?$AAR?$AAV?$AAE?$AAS?$AAC?$AA_?$AAB?$AAE?$AAG?$AAI?$AAN?$AAS?$AAC?$AAR?$AAE?$AAE?$AAN?$AAR?$AAO?$AAT?$AAA?$AAT?$AAI?$AAO?$AAN?$AA?3?$AA?5?$AAc?$AAj?$AAI?$AAn@| DCB "D"
	DCB	0x0, "R", 0x0, "V", 0x0, "E", 0x0, "S", 0x0, "C", 0x0, "_"
	DCB	0x0, "B", 0x0, "E", 0x0, "G", 0x0, "I", 0x0, "N", 0x0, "S"
	DCB	0x0, "C", 0x0, "R", 0x0, "E", 0x0, "E", 0x0, "N", 0x0, "R"
	DCB	0x0, "O", 0x0, "T", 0x0, "A", 0x0, "T", 0x0, "I", 0x0, "O"
	DCB	0x0, "N", 0x0, ":", 0x0, " ", 0x0, "c", 0x0, "j", 0x0, "I"
	DCB	0x0, "n", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@CIMPCIMH@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAD?$AAr?$AAv?$AAE?$AAs?$AAc?$AAa?$AAp?$AAe?$AA?$AN?$AA?6?$AA?$AA@| DCB "O"
	DCB	0x0, "M", 0x0, "A", 0x0, "P", 0x0, "D", 0x0, "D", 0x0, "G"
	DCB	0x0, "P", 0x0, "E", 0x0, ":", 0x0, ":", 0x0, "D", 0x0, "r"
	DCB	0x0, "v", 0x0, "E", 0x0, "s", 0x0, "c", 0x0, "a", 0x0, "p"
	DCB	0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00004			 AREA	 |.xdata|, DATA
	%	4
|$T43825| DCD	0x7
	DCD	|$LN241@DrvEscape|
	DCD	|$LN242@DrvEscape|
	DCD	|$LN237@DrvEscape|
	DCD	|$LN238@DrvEscape|
	DCD	|$LN234@DrvEscape|
	DCD	|$LN235@DrvEscape|
	DCD	|$LN230@DrvEscape|
	DCD	|$LN231@DrvEscape|
	DCD	|$LN227@DrvEscape|
	DCD	|$LN228@DrvEscape|
	DCD	|$LN223@DrvEscape|
	DCD	|$LN224@DrvEscape|
	DCD	|$LN220@DrvEscape|
	DCD	|$LN221@DrvEscape|
	DCD	|$LN216@DrvEscape|
	DCD	|$LN217@DrvEscape|
	DCD	|$LN213@DrvEscape|
	DCD	|$LN214@DrvEscape|
	DCD	|$LN209@DrvEscape|
	DCD	|$LN210@DrvEscape|
	DCD	|$LN206@DrvEscape|
	DCD	|$LN207@DrvEscape|
	DCD	|$LN202@DrvEscape|
	DCD	|$LN203@DrvEscape|
	DCD	|$LN199@DrvEscape|
	DCD	|$LN200@DrvEscape|
	DCD	|$LN195@DrvEscape|
	DCD	|$LN196@DrvEscape|
; Function compile flags: /Odtp

  0314c			 AREA	 |.text|, CODE, ARM

  0314c	00000000	 DCD         |__C_specific_handler|
  03150	00000000	 DCD         |$T43825|

  03154		 |?DrvEscape@OMAPDDGPE@@UAAKPAU_SURFOBJ@@KKPAXK1@Z| PROC ; OMAPDDGPE::DrvEscape

; 1288 : {

  03154		 |$LN253@DrvEscape|
  03154	e1a0c00d	 mov         r12, sp
  03158	e92d000f	 stmdb       sp!, {r0 - r3}
  0315c	e92d5800	 stmdb       sp!, {r11, r12, lr}
  03160	e28db00c	 add         r11, sp, #0xC
  03164	e24dde16	 sub         sp, sp, #0x16, 28
  03168		 |$LN251@DrvEscape|

; 1289 :     int    rc = ESC_NOT_SUPPORTED;    // Default not supported

  03168	e3a03000	 mov         r3, #0
  0316c	e50b316c	 str         r3, [r11, #-0x16C]

; 1290 : 
; 1291 :     UNREFERENCED_PARAMETER(pso);
; 1292 : 
; 1293 :     DEBUGMSG (GPE_ZONE_ENTER, (TEXT("OMAPDDGPE::DrvEscape\r\n")));

  03170	e59f380c	 ldr         r3, [pc, #0x80C]
  03174	e5933440	 ldr         r3, [r3, #0x440]
  03178	e3130010	 tst         r3, #0x10
  0317c	0a000004	 beq         |$LN115@DrvEscape|
  03180	e59f082c	 ldr         r0, [pc, #0x82C]
  03184	eb000000	 bl          NKDbgPrintfW
  03188	e3a03001	 mov         r3, #1
  0318c	e50b3130	 str         r3, [r11, #-0x130]
  03190	ea000001	 b           |$LN116@DrvEscape|
  03194		 |$LN115@DrvEscape|
  03194	e3a03000	 mov         r3, #0
  03198	e50b3130	 str         r3, [r11, #-0x130]
  0319c		 |$LN116@DrvEscape|

; 1294 : 
; 1295 :     switch (iEsc)

  0319c	e59b3008	 ldr         r3, [r11, #8]
  031a0	e50b312c	 str         r3, [r11, #-0x12C]
  031a4	e51b212c	 ldr         r2, [r11, #-0x12C]
  031a8	e59f3800	 ldr         r3, [pc, #0x800]
  031ac	e1520003	 cmp         r2, r3
  031b0	8a000049	 bhi         |$LN187@DrvEscape|
  031b4	e51b212c	 ldr         r2, [r11, #-0x12C]
  031b8	e59f37f0	 ldr         r3, [pc, #0x7F0]
  031bc	e1520003	 cmp         r2, r3
  031c0	0a00039d	 beq         |$LN60@DrvEscape|
  031c4	e51b212c	 ldr         r2, [r11, #-0x12C]
  031c8	e3a03b06	 mov         r3, #6, 22
  031cc	e383309e	 orr         r3, r3, #0x9E
  031d0	e1520003	 cmp         r2, r3
  031d4	8a000022	 bhi         |$LN188@DrvEscape|
  031d8	e51b212c	 ldr         r2, [r11, #-0x12C]
  031dc	e3a03b06	 mov         r3, #6, 22
  031e0	e383309e	 orr         r3, r3, #0x9E
  031e4	e1520003	 cmp         r2, r3
  031e8	0a0000ed	 beq         |$LN102@DrvEscape|
  031ec	e51b212c	 ldr         r2, [r11, #-0x12C]
  031f0	e3a03b06	 mov         r3, #6, 22
  031f4	e3833004	 orr         r3, r3, #4
  031f8	e1520003	 cmp         r2, r3
  031fc	8a00000d	 bhi         |$LN189@DrvEscape|
  03200	e51b212c	 ldr         r2, [r11, #-0x12C]
  03204	e3a03b06	 mov         r3, #6, 22
  03208	e3833004	 orr         r3, r3, #4
  0320c	e1520003	 cmp         r2, r3
  03210	0a00051f	 beq         |$LN43@DrvEscape|
  03214	e51b312c	 ldr         r3, [r11, #-0x12C]
  03218	e3530008	 cmp         r3, #8
  0321c	0a00006c	 beq         |$LN110@DrvEscape|
  03220	e51b212c	 ldr         r2, [r11, #-0x12C]
  03224	e3a03b06	 mov         r3, #6, 22
  03228	e3833003	 orr         r3, r3, #3
  0322c	e1520003	 cmp         r2, r3
  03230	0a000560	 beq         |$LN34@DrvEscape|
  03234	ea000698	 b           |$LN2@DrvEscape|
  03238		 |$LN189@DrvEscape|
  03238	e51b212c	 ldr         r2, [r11, #-0x12C]
  0323c	e3a03b06	 mov         r3, #6, 22
  03240	e3833005	 orr         r3, r3, #5
  03244	e1520003	 cmp         r2, r3
  03248	0a000262	 beq         |$LN85@DrvEscape|
  0324c	e51b212c	 ldr         r2, [r11, #-0x12C]
  03250	e3a03b06	 mov         r3, #6, 22
  03254	e383309d	 orr         r3, r3, #0x9D
  03258	e1520003	 cmp         r2, r3
  0325c	0a000146	 beq         |$LN96@DrvEscape|
  03260	ea00068d	 b           |$LN2@DrvEscape|
  03264		 |$LN188@DrvEscape|
  03264	e51b212c	 ldr         r2, [r11, #-0x12C]
  03268	e3a03b61	 mov         r3, #0x61, 22
  0326c	e3833e2a	 orr         r3, r3, #0x2A, 28
  03270	e1520003	 cmp         r2, r3
  03274	8a00000f	 bhi         |$LN190@DrvEscape|
  03278	e51b212c	 ldr         r2, [r11, #-0x12C]
  0327c	e3a03b61	 mov         r3, #0x61, 22
  03280	e3833e2a	 orr         r3, r3, #0x2A, 28
  03284	e1520003	 cmp         r2, r3
  03288	0a0002dc	 beq         |$LN68@DrvEscape|
  0328c	e51b212c	 ldr         r2, [r11, #-0x12C]
  03290	e3a03b06	 mov         r3, #6, 22
  03294	e383309f	 orr         r3, r3, #0x9F
  03298	e1520003	 cmp         r2, r3
  0329c	0a0000eb	 beq         |$LN100@DrvEscape|
  032a0	e51b212c	 ldr         r2, [r11, #-0x12C]
  032a4	e3a03b06	 mov         r3, #6, 22
  032a8	e38330a0	 orr         r3, r3, #0xA0
  032ac	e1520003	 cmp         r2, r3
  032b0	0a0000ff	 beq         |$LN98@DrvEscape|
  032b4	ea000678	 b           |$LN2@DrvEscape|
  032b8		 |$LN190@DrvEscape|
  032b8	e51b212c	 ldr         r2, [r11, #-0x12C]
  032bc	e59f36e8	 ldr         r3, [pc, #0x6E8]
  032c0	e1520003	 cmp         r2, r3
  032c4	0a0002f0	 beq         |$LN65@DrvEscape|
  032c8	e51b212c	 ldr         r2, [r11, #-0x12C]
  032cc	e59f36d4	 ldr         r3, [pc, #0x6D4]
  032d0	e1520003	 cmp         r2, r3
  032d4	0a00030b	 beq         |$LN63@DrvEscape|
  032d8	ea00066f	 b           |$LN2@DrvEscape|
  032dc		 |$LN187@DrvEscape|
  032dc	e51b212c	 ldr         r2, [r11, #-0x12C]
  032e0	e59f36b0	 ldr         r3, [pc, #0x6B0]
  032e4	e1520003	 cmp         r2, r3
  032e8	8a000021	 bhi         |$LN191@DrvEscape|
  032ec	e51b212c	 ldr         r2, [r11, #-0x12C]
  032f0	e59f36a0	 ldr         r3, [pc, #0x6A0]
  032f4	e1520003	 cmp         r2, r3
  032f8	0a0005be	 beq         |$LN18@DrvEscape|
  032fc	e51b212c	 ldr         r2, [r11, #-0x12C]
  03300	e3a03b61	 mov         r3, #0x61, 22
  03304	e3833fad	 orr         r3, r3, #0xAD, 30
  03308	e1520003	 cmp         r2, r3
  0330c	8a00000e	 bhi         |$LN192@DrvEscape|
  03310	e51b212c	 ldr         r2, [r11, #-0x12C]
  03314	e3a03b61	 mov         r3, #0x61, 22
  03318	e3833fad	 orr         r3, r3, #0xAD, 30
  0331c	e1520003	 cmp         r2, r3
  03320	0a00049b	 beq         |$LN49@DrvEscape|
  03324	e51b212c	 ldr         r2, [r11, #-0x12C]
  03328	e3a03b61	 mov         r3, #0x61, 22
  0332c	e3833fa9	 orr         r3, r3, #0xA9, 30
  03330	e1520003	 cmp         r2, r3
  03334	0a000456	 beq         |$LN55@DrvEscape|
  03338	e51b212c	 ldr         r2, [r11, #-0x12C]
  0333c	e59f3660	 ldr         r3, [pc, #0x660]
  03340	e1520003	 cmp         r2, r3
  03344	0a000472	 beq         |$LN52@DrvEscape|
  03348	ea000653	 b           |$LN2@DrvEscape|
  0334c		 |$LN192@DrvEscape|
  0334c	e51b212c	 ldr         r2, [r11, #-0x12C]
  03350	e59f3648	 ldr         r3, [pc, #0x648]
  03354	e1520003	 cmp         r2, r3
  03358	0a0004ad	 beq         |$LN46@DrvEscape|
  0335c	e51b212c	 ldr         r2, [r11, #-0x12C]
  03360	e3a03832	 mov         r3, #0x32, 16
  03364	e3833a01	 orr         r3, r3, #1, 20
  03368	e1520003	 cmp         r2, r3
  0336c	0a00055a	 beq         |$LN24@DrvEscape|
  03370	ea000649	 b           |$LN2@DrvEscape|
  03374		 |$LN191@DrvEscape|
  03374	e51b212c	 ldr         r2, [r11, #-0x12C]
  03378	e3a03112	 mov         r3, #0x12, 2
  0337c	e3833b41	 orr         r3, r3, #0x41, 22
  03380	e1520003	 cmp         r2, r3
  03384	8a00000d	 bhi         |$LN193@DrvEscape|
  03388	e51b212c	 ldr         r2, [r11, #-0x12C]
  0338c	e3a03112	 mov         r3, #0x12, 2
  03390	e3833b41	 orr         r3, r3, #0x41, 22
  03394	e1520003	 cmp         r2, r3
  03398	0a0005e8	 beq         |$LN11@DrvEscape|
  0339c	e51b212c	 ldr         r2, [r11, #-0x12C]
  033a0	e59f35ec	 ldr         r3, [pc, #0x5EC]
  033a4	e1520003	 cmp         r2, r3
  033a8	0a0005b2	 beq         |$LN15@DrvEscape|
  033ac	e51b212c	 ldr         r2, [r11, #-0x12C]
  033b0	e59f35e4	 ldr         r3, [pc, #0x5E4]
  033b4	e1520003	 cmp         r2, r3
  033b8	0a000568	 beq         |$LN21@DrvEscape|
  033bc	ea000636	 b           |$LN2@DrvEscape|
  033c0		 |$LN193@DrvEscape|
  033c0	e51b212c	 ldr         r2, [r11, #-0x12C]
  033c4	e59f35c4	 ldr         r3, [pc, #0x5C4]
  033c8	e1520003	 cmp         r2, r3
  033cc	0a0005f9	 beq         |$LN8@DrvEscape|
  033d0	ea000631	 b           |$LN2@DrvEscape|
  033d4		 |$LN110@DrvEscape|

; 1296 :     {
; 1297 :         case QUERYESCSUPPORT:
; 1298 :             if (cjIn == sizeof(DWORD))

  033d4	e59b300c	 ldr         r3, [r11, #0xC]
  033d8	e3530004	 cmp         r3, #4
  033dc	1a00006a	 bne         |$LN109@DrvEscape|

; 1299 :             {
; 1300 :                 DWORD   val = *(DWORD *)pvIn;

  033e0	e59b3010	 ldr         r3, [r11, #0x10]
  033e4	e5933000	 ldr         r3, [r3]
  033e8	e50b3168	 str         r3, [r11, #-0x168]

; 1301 : 
; 1302 :                 //  Check for display perf IOCTLs
; 1303 : #pragma warning (push)
; 1304 : #pragma warning (disable:4127)
; 1305 :                 if( DispPerfQueryEsc(val) )

  033ec	ea000001	 b           |$LN108@DrvEscape|

; 1306 :                     rc = ESC_SUCCESS;

  033f0	e3a03001	 mov         r3, #1
  033f4	e50b316c	 str         r3, [r11, #-0x16C]
  033f8		 |$LN108@DrvEscape|

; 1307 : #pragma warning (pop)
; 1308 : 
; 1309 :                 switch ( val )

  033f8	e51b3168	 ldr         r3, [r11, #-0x168]
  033fc	e50b3128	 str         r3, [r11, #-0x128]
  03400	e51b2128	 ldr         r2, [r11, #-0x128]
  03404	e3a03832	 mov         r3, #0x32, 16
  03408	e3833a01	 orr         r3, r3, #1, 20
  0340c	e1520003	 cmp         r2, r3
  03410	8a00002d	 bhi         |$LN119@DrvEscape|
  03414	e51b2128	 ldr         r2, [r11, #-0x128]
  03418	e3a03832	 mov         r3, #0x32, 16
  0341c	e3833a01	 orr         r3, r3, #1, 20
  03420	e1520003	 cmp         r2, r3
  03424	0a000055	 beq         |$LN104@DrvEscape|
  03428	e51b2128	 ldr         r2, [r11, #-0x128]
  0342c	e59f3570	 ldr         r3, [pc, #0x570]
  03430	e1520003	 cmp         r2, r3
  03434	8a00001a	 bhi         |$LN120@DrvEscape|
  03438	e51b2128	 ldr         r2, [r11, #-0x128]
  0343c	e3a03b61	 mov         r3, #0x61, 22
  03440	e3833e2a	 orr         r3, r3, #0x2A, 28
  03444	e1520003	 cmp         r2, r3
  03448	2a00004c	 bcs         |$LN104@DrvEscape|
  0344c	e51b2128	 ldr         r2, [r11, #-0x128]
  03450	e3a03b06	 mov         r3, #6, 22
  03454	e383309e	 orr         r3, r3, #0x9E
  03458	e1520003	 cmp         r2, r3
  0345c	8a00000f	 bhi         |$LN121@DrvEscape|
  03460	e51b2128	 ldr         r2, [r11, #-0x128]
  03464	e3a03b06	 mov         r3, #6, 22
  03468	e383309d	 orr         r3, r3, #0x9D
  0346c	e1520003	 cmp         r2, r3
  03470	2a00002b	 bcs         |$LN105@DrvEscape|
  03474	e51b2128	 ldr         r2, [r11, #-0x128]
  03478	e3a03b06	 mov         r3, #6, 22
  0347c	e3833003	 orr         r3, r3, #3
  03480	e1520003	 cmp         r2, r3
  03484	3a00003f	 bcc         |$LN106@DrvEscape|
  03488	e51b2128	 ldr         r2, [r11, #-0x128]
  0348c	e3a03b06	 mov         r3, #6, 22
  03490	e3833005	 orr         r3, r3, #5
  03494	e1520003	 cmp         r2, r3
  03498	9a000038	 bls         |$LN104@DrvEscape|
  0349c	ea000039	 b           |$LN106@DrvEscape|
  034a0		 |$LN121@DrvEscape|
  034a0	ea000038	 b           |$LN106@DrvEscape|
  034a4		 |$LN120@DrvEscape|
  034a4	e51b2128	 ldr         r2, [r11, #-0x128]
  034a8	e3a03b61	 mov         r3, #0x61, 22
  034ac	e3833fad	 orr         r3, r3, #0xAD, 30
  034b0	e1520003	 cmp         r2, r3
  034b4	3a000033	 bcc         |$LN106@DrvEscape|
  034b8	e51b2128	 ldr         r2, [r11, #-0x128]
  034bc	e59f34dc	 ldr         r3, [pc, #0x4DC]
  034c0	e1520003	 cmp         r2, r3
  034c4	9a00002d	 bls         |$LN104@DrvEscape|
  034c8	ea00002e	 b           |$LN106@DrvEscape|
  034cc		 |$LN119@DrvEscape|
  034cc	e51b2128	 ldr         r2, [r11, #-0x128]
  034d0	e59f34c4	 ldr         r3, [pc, #0x4C4]
  034d4	e1520003	 cmp         r2, r3
  034d8	8a00000c	 bhi         |$LN122@DrvEscape|
  034dc	e51b2128	 ldr         r2, [r11, #-0x128]
  034e0	e59f34b4	 ldr         r3, [pc, #0x4B4]
  034e4	e1520003	 cmp         r2, r3
  034e8	0a000024	 beq         |$LN104@DrvEscape|
  034ec	e51b2128	 ldr         r2, [r11, #-0x128]
  034f0	e59f34a0	 ldr         r3, [pc, #0x4A0]
  034f4	e1520003	 cmp         r2, r3
  034f8	0a000020	 beq         |$LN104@DrvEscape|
  034fc	e51b2128	 ldr         r2, [r11, #-0x128]
  03500	e59f348c	 ldr         r3, [pc, #0x48C]
  03504	e1520003	 cmp         r2, r3
  03508	0a00001c	 beq         |$LN104@DrvEscape|
  0350c	ea00001d	 b           |$LN106@DrvEscape|
  03510		 |$LN122@DrvEscape|
  03510	e51b2128	 ldr         r2, [r11, #-0x128]
  03514	e59f3474	 ldr         r3, [pc, #0x474]
  03518	e1520003	 cmp         r2, r3
  0351c	0a000017	 beq         |$LN104@DrvEscape|
  03520	ea000018	 b           |$LN106@DrvEscape|
  03524		 |$LN105@DrvEscape|

; 1310 :                 {
; 1311 :                     case DRVESC_GETSCREENROTATION:
; 1312 :                     case DRVESC_SETSCREENROTATION:
; 1313 :                         //  Return OK only if surface manager supports rotation
; 1314 :                         rc = (m_pSurfaceMgr->SupportsRotation() == TRUE) ? ESC_SUCCESS : ESC_FAILED;

  03524	e59b3000	 ldr         r3, [r11]
  03528	e28330b4	 add         r3, r3, #0xB4
  0352c	e5932000	 ldr         r2, [r3]
  03530	e59b3000	 ldr         r3, [r11]
  03534	e28330b4	 add         r3, r3, #0xB4
  03538	e5930000	 ldr         r0, [r3]
  0353c	e5923000	 ldr         r3, [r2]
  03540	e2833020	 add         r3, r3, #0x20
  03544	e5933000	 ldr         r3, [r3]
  03548	e1a0e00f	 mov         lr, pc
  0354c	e12fff13	 bx          r3
  03550	e50b0124	 str         r0, [r11, #-0x124]
  03554	e51b3124	 ldr         r3, [r11, #-0x124]
  03558	e3530001	 cmp         r3, #1
  0355c	1a000002	 bne         |$LN117@DrvEscape|
  03560	e3a03001	 mov         r3, #1
  03564	e50b3120	 str         r3, [r11, #-0x120]
  03568	ea000001	 b           |$LN118@DrvEscape|
  0356c		 |$LN117@DrvEscape|
  0356c	e3e03000	 mvn         r3, #0
  03570	e50b3120	 str         r3, [r11, #-0x120]
  03574		 |$LN118@DrvEscape|
  03574	e51b3120	 ldr         r3, [r11, #-0x120]
  03578	e50b316c	 str         r3, [r11, #-0x16C]

; 1315 :                         break;

  0357c	ea000001	 b           |$LN106@DrvEscape|
  03580		 |$LN104@DrvEscape|

; 1316 :                   
; 1317 :                     case GETPOWERMANAGEMENT:
; 1318 :                     case SETPOWERMANAGEMENT:
; 1319 :                     case IOCTL_POWER_CAPABILITIES:
; 1320 :                     case IOCTL_POWER_QUERY:
; 1321 :                     case IOCTL_POWER_GET:
; 1322 :                     case IOCTL_POWER_SET:
; 1323 :                     case CONTRASTCOMMAND:
; 1324 :                     case DRVESC_TVOUT_ENABLE:
; 1325 :                     case DRVESC_TVOUT_DISABLE:
; 1326 :                     case DRVESC_TVOUT_GETSETTINGS:
; 1327 :                     case DRVESC_TVOUT_SETSETTINGS:
; 1328 :                     case DRVESC_DVI_ENABLE:
; 1329 :                     case DRVESC_DVI_DISABLE:
; 1330 :                     case DRVESC_HDMI_ENABLE:
; 1331 :                     case DRVESC_HDMI_DISABLE:
; 1332 :                     case IOCTL_CONTEXT_RESTORE:                        
; 1333 :                         rc = ESC_SUCCESS;

  03580	e3a03001	 mov         r3, #1
  03584	e50b316c	 str         r3, [r11, #-0x16C]
  03588		 |$LN106@DrvEscape|

; 1334 :                         break;
; 1335 :                 }
; 1336 :             }
; 1337 :             else

  03588	ea000004	 b           |$LN103@DrvEscape|
  0358c		 |$LN109@DrvEscape|

; 1338 :             {
; 1339 :                 SetLastError (ERROR_INVALID_PARAMETER);

  0358c	e3a00057	 mov         r0, #0x57
  03590	eb000000	 bl          SetLastError

; 1340 :                 rc = ESC_FAILED;

  03594	e3e03000	 mvn         r3, #0
  03598	e50b316c	 str         r3, [r11, #-0x16C]

; 1341 :                 break;

  0359c	ea0005c1	 b           |$LN111@DrvEscape|
  035a0		 |$LN103@DrvEscape|

; 1342 :             }
; 1343 :             break;

  035a0	ea0005c0	 b           |$LN111@DrvEscape|
  035a4		 |$LN102@DrvEscape|

; 1344 : 
; 1345 :         case DRVESC_GETSCREENROTATION:
; 1346 :             //  Only if the surface manager supports rotation
; 1347 :             if( m_pSurfaceMgr->SupportsRotation() == TRUE )

  035a4	e59b3000	 ldr         r3, [r11]
  035a8	e28330b4	 add         r3, r3, #0xB4
  035ac	e5932000	 ldr         r2, [r3]
  035b0	e59b3000	 ldr         r3, [r11]
  035b4	e28330b4	 add         r3, r3, #0xB4
  035b8	e5930000	 ldr         r0, [r3]
  035bc	e5923000	 ldr         r3, [r2]
  035c0	e2833020	 add         r3, r3, #0x20
  035c4	e5933000	 ldr         r3, [r3]
  035c8	e1a0e00f	 mov         lr, pc
  035cc	e12fff13	 bx          r3
  035d0	e50b011c	 str         r0, [r11, #-0x11C]
  035d4	e51b311c	 ldr         r3, [r11, #-0x11C]
  035d8	e3530001	 cmp         r3, #1
  035dc	1a00001a	 bne         |$LN101@DrvEscape|

; 1348 :             {
; 1349 :                 /* Since WinCE always considers the boot-up width and height to be 0 degree orientation,
; 1350 :                    we need to manipulate the m_iGraphicsRotate rotation angle when the device has booted up in 90,180 or 270
; 1351 :                    orientation (specified through registry setting and stored in g_Globals.m_dwRotationAngle) */
; 1352 : 
; 1353 :             //  Get state of graphics plane rotation
; 1354 :                 DWORD graphicsRotate = getOrientation((getAngle(m_iGraphicsRotate)-getAngle(g_Globals.m_dwRotationAngle)+360)%360);

  035e0	e59b3000	 ldr         r3, [r11]
  035e4	e2833098	 add         r3, r3, #0x98
  035e8	e5930000	 ldr         r0, [r3]
  035ec	eb000000	 bl          |?getAngle@@YAKK@Z|
  035f0	e50b0118	 str         r0, [r11, #-0x118]
  035f4	e59f3380	 ldr         r3, [pc, #0x380]
  035f8	e5930004	 ldr         r0, [r3, #4]
  035fc	eb000000	 bl          |?getAngle@@YAKK@Z|
  03600	e50b0114	 str         r0, [r11, #-0x114]
  03604	e51b2118	 ldr         r2, [r11, #-0x118]
  03608	e51b3114	 ldr         r3, [r11, #-0x114]
  0360c	e0423003	 sub         r3, r2, r3
  03610	e2831f5a	 add         r1, r3, #0x5A, 30
  03614	e3a00f5a	 mov         r0, #0x5A, 30
  03618	eb000000	 bl          __rt_udiv
  0361c	e1a00001	 mov         r0, r1
  03620	eb000000	 bl          |?getOrientation@@YAKK@Z|
  03624	e50b0110	 str         r0, [r11, #-0x110]
  03628	e51b3110	 ldr         r3, [r11, #-0x110]
  0362c	e50b3164	 str         r3, [r11, #-0x164]

; 1355 :                 *(int *)pvOut = ((DMDO_0 | DMDO_90 | DMDO_180 | DMDO_270) << 8) | ((BYTE)graphicsRotate);

  03630	e51b3164	 ldr         r3, [r11, #-0x164]
  03634	e20330ff	 and         r3, r3, #0xFF
  03638	e3832c07	 orr         r2, r3, #7, 24
  0363c	e59b3018	 ldr         r3, [r11, #0x18]
  03640	e5832000	 str         r2, [r3]

; 1356 :             rc = DISP_CHANGE_SUCCESSFUL;

  03644	e3a03000	 mov         r3, #0
  03648	e50b316c	 str         r3, [r11, #-0x16C]
  0364c		 |$LN101@DrvEscape|

; 1357 :             }
; 1358 :             break;

  0364c	ea000595	 b           |$LN111@DrvEscape|
  03650		 |$LN100@DrvEscape|

; 1359 :             
; 1360 :         case DRVESC_BEGINSCREENROTATION:
; 1361 :             DEBUGMSG(GPE_ZONE_VIDEOMEMORY, (TEXT("DRVESC_BEGINSCREENROTATION: cjIn = %d\r\n"), cjIn));

  03650	e59f332c	 ldr         r3, [pc, #0x32C]
  03654	e5933440	 ldr         r3, [r3, #0x440]
  03658	e3130901	 tst         r3, #1, 18
  0365c	0a000005	 beq         |$LN123@DrvEscape|
  03660	e59b100c	 ldr         r1, [r11, #0xC]
  03664	e59f0320	 ldr         r0, [pc, #0x320]
  03668	eb000000	 bl          NKDbgPrintfW
  0366c	e3a03001	 mov         r3, #1
  03670	e50b310c	 str         r3, [r11, #-0x10C]
  03674	ea000001	 b           |$LN124@DrvEscape|
  03678		 |$LN123@DrvEscape|
  03678	e3a03000	 mov         r3, #0
  0367c	e50b310c	 str         r3, [r11, #-0x10C]
  03680		 |$LN124@DrvEscape|

; 1362 : 
; 1363 :             //  Start of screen rotation
; 1364 :             if( m_pSurfaceMgr->SupportsRotation() == TRUE )

  03680	e59b3000	 ldr         r3, [r11]
  03684	e28330b4	 add         r3, r3, #0xB4
  03688	e5932000	 ldr         r2, [r3]
  0368c	e59b3000	 ldr         r3, [r11]
  03690	e28330b4	 add         r3, r3, #0xB4
  03694	e5930000	 ldr         r0, [r3]
  03698	e5923000	 ldr         r3, [r2]
  0369c	e2833020	 add         r3, r3, #0x20
  036a0	e5933000	 ldr         r3, [r3]
  036a4	e1a0e00f	 mov         lr, pc
  036a8	e12fff13	 bx          r3
  036ac	e50b0108	 str         r0, [r11, #-0x108]

; 1365 :             {
; 1366 :                 /* Do Nothing */ 
; 1367 :             }
; 1368 :             break;

  036b0	ea00057c	 b           |$LN111@DrvEscape|
  036b4		 |$LN98@DrvEscape|

; 1369 :             
; 1370 :         case DRVESC_ENDSCREENROTATION:
; 1371 :             DEBUGMSG(GPE_ZONE_VIDEOMEMORY, (TEXT("DRVESC_ENDSCREENROTATION: cjIn = %d\r\n"), cjIn));

  036b4	e59f32c8	 ldr         r3, [pc, #0x2C8]
  036b8	e5933440	 ldr         r3, [r3, #0x440]
  036bc	e3130901	 tst         r3, #1, 18
  036c0	0a000005	 beq         |$LN125@DrvEscape|
  036c4	e59b100c	 ldr         r1, [r11, #0xC]
  036c8	e59f02b8	 ldr         r0, [pc, #0x2B8]
  036cc	eb000000	 bl          NKDbgPrintfW
  036d0	e3a03001	 mov         r3, #1
  036d4	e50b3104	 str         r3, [r11, #-0x104]
  036d8	ea000001	 b           |$LN126@DrvEscape|
  036dc		 |$LN125@DrvEscape|
  036dc	e3a03000	 mov         r3, #0
  036e0	e50b3104	 str         r3, [r11, #-0x104]
  036e4		 |$LN126@DrvEscape|

; 1372 : 
; 1373 :             /* Wait for DRVESC_ENDSCREENROTATION to enable the pipelines to reduce the amount of 
; 1374 :                flickr seen during rotation */
; 1375 :             //  End of screen rotation
; 1376 :             if( m_pSurfaceMgr->SupportsRotation() == TRUE )

  036e4	e59b3000	 ldr         r3, [r11]
  036e8	e28330b4	 add         r3, r3, #0xB4
  036ec	e5932000	 ldr         r2, [r3]
  036f0	e59b3000	 ldr         r3, [r11]
  036f4	e28330b4	 add         r3, r3, #0xB4
  036f8	e5930000	 ldr         r0, [r3]
  036fc	e5923000	 ldr         r3, [r2]
  03700	e2833020	 add         r3, r3, #0x20
  03704	e5933000	 ldr         r3, [r3]
  03708	e1a0e00f	 mov         lr, pc
  0370c	e12fff13	 bx          r3
  03710	e50b0100	 str         r0, [r11, #-0x100]
  03714	e51b3100	 ldr         r3, [r11, #-0x100]
  03718	e3530001	 cmp         r3, #1
  0371c	1a000015	 bne         |$LN97@DrvEscape|

; 1377 :             {
; 1378 :                 Lock();

  03720	e59b3000	 ldr         r3, [r11]
  03724	e5933000	 ldr         r3, [r3]
  03728	e28330ec	 add         r3, r3, #0xEC
  0372c	e59b0000	 ldr         r0, [r11]
  03730	e5933000	 ldr         r3, [r3]
  03734	e1a0e00f	 mov         lr, pc
  03738	e12fff13	 bx          r3

; 1379 :                 //  Re-enable the primary pipeline to have the rotation take effect
; 1380 :                 m_pDisplayContr->EnablePipeline( OMAP_DSS_PIPELINE_GFX );

  0373c	e3a01000	 mov         r1, #0
  03740	e59b3000	 ldr         r3, [r11]
  03744	e28330b0	 add         r3, r3, #0xB0
  03748	e5930000	 ldr         r0, [r3]
  0374c	eb000000	 bl          |?EnablePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@@Z|

; 1381 : 
; 1382 :                 //  Get the best surface to display on the TV
; 1383 :                 DetermineTvOutSurface();

  03750	e3a01000	 mov         r1, #0
  03754	e59b0000	 ldr         r0, [r11]
  03758	eb000000	 bl          |?DetermineTvOutSurface@OMAPDDGPE@@QAAXH@Z|

; 1384 :                 Unlock();

  0375c	e59b3000	 ldr         r3, [r11]
  03760	e5933000	 ldr         r3, [r3]
  03764	e28330f0	 add         r3, r3, #0xF0
  03768	e59b0000	 ldr         r0, [r11]
  0376c	e5933000	 ldr         r3, [r3]
  03770	e1a0e00f	 mov         lr, pc
  03774	e12fff13	 bx          r3
  03778		 |$LN97@DrvEscape|

; 1385 :             }
; 1386 :             break;

  03778	ea00054a	 b           |$LN111@DrvEscape|
  0377c		 |$LN96@DrvEscape|

; 1387 :             
; 1388 :         case DRVESC_SETSCREENROTATION:
; 1389 :             //  Only if the surface manager supports rotation
; 1390 :             if( m_pSurfaceMgr->SupportsRotation() == TRUE )

  0377c	e59b3000	 ldr         r3, [r11]
  03780	e28330b4	 add         r3, r3, #0xB4
  03784	e5932000	 ldr         r2, [r3]
  03788	e59b3000	 ldr         r3, [r11]
  0378c	e28330b4	 add         r3, r3, #0xB4
  03790	e5930000	 ldr         r0, [r3]
  03794	e5923000	 ldr         r3, [r2]
  03798	e2833020	 add         r3, r3, #0x20
  0379c	e5933000	 ldr         r3, [r3]
  037a0	e1a0e00f	 mov         lr, pc
  037a4	e12fff13	 bx          r3
  037a8	e50b00fc	 str         r0, [r11, #-0xFC]
  037ac	e51b30fc	 ldr         r3, [r11, #-0xFC]
  037b0	e3530001	 cmp         r3, #1
  037b4	1a000106	 bne         |$LN95@DrvEscape|

; 1391 :             {
; 1392 :             //  Set state of graphics plane rotation
; 1393 :             if( (cjIn == DMDO_0) || (cjIn == DMDO_90) || (cjIn == DMDO_180) || (cjIn == DMDO_270) )

  037b8	e59b300c	 ldr         r3, [r11, #0xC]
  037bc	e3530000	 cmp         r3, #0
  037c0	0a000008	 beq         |$LN93@DrvEscape|
  037c4	e59b300c	 ldr         r3, [r11, #0xC]
  037c8	e3530001	 cmp         r3, #1
  037cc	0a000005	 beq         |$LN93@DrvEscape|
  037d0	e59b300c	 ldr         r3, [r11, #0xC]
  037d4	e3530002	 cmp         r3, #2
  037d8	0a000002	 beq         |$LN93@DrvEscape|
  037dc	e59b300c	 ldr         r3, [r11, #0xC]
  037e0	e3530004	 cmp         r3, #4
  037e4	1a0000f8	 bne         |$LN94@DrvEscape|
  037e8		 |$LN93@DrvEscape|

; 1394 :             {
; 1395 :                     //  Rotation changes surface parameters, so lock out other DDraw operations until done
; 1396 :                     Lock();

  037e8	e59b3000	 ldr         r3, [r11]
  037ec	e5933000	 ldr         r3, [r3]
  037f0	e28330ec	 add         r3, r3, #0xEC
  037f4	e59b0000	 ldr         r0, [r11]
  037f8	e5933000	 ldr         r3, [r3]
  037fc	e1a0e00f	 mov         lr, pc
  03800	e12fff13	 bx          r3

; 1397 :                     
; 1398 :                     DEBUGMSG(GPE_ZONE_VIDEOMEMORY, (TEXT("DRVESC_SETSCREENROTATION: cjIn = %d\r\n"), cjIn));

  03804	e59f3178	 ldr         r3, [pc, #0x178]
  03808	e5933440	 ldr         r3, [r3, #0x440]
  0380c	e3130901	 tst         r3, #1, 18
  03810	0a000005	 beq         |$LN127@DrvEscape|
  03814	e59b100c	 ldr         r1, [r11, #0xC]
  03818	e59f0160	 ldr         r0, [pc, #0x160]
  0381c	eb000000	 bl          NKDbgPrintfW
  03820	e3a03001	 mov         r3, #1
  03824	e50b30f8	 str         r3, [r11, #-0xF8]
  03828	ea000001	 b           |$LN128@DrvEscape|
  0382c		 |$LN127@DrvEscape|
  0382c	e3a03000	 mov         r3, #0
  03830	e50b30f8	 str         r3, [r11, #-0xF8]
  03834		 |$LN128@DrvEscape|

; 1399 : 
; 1400 :                     //  Disable all pipelines prior to rotation
; 1401 :                     m_pDisplayContr->DisablePipeline( OMAP_DSS_PIPELINE_GFX );

  03834	e3a01000	 mov         r1, #0
  03838	e59b3000	 ldr         r3, [r11]
  0383c	e28330b0	 add         r3, r3, #0xB0
  03840	e5930000	 ldr         r0, [r3]
  03844	eb000000	 bl          |?DisablePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@@Z|

; 1402 :                     m_pDisplayContr->DisablePipeline( OMAP_DSS_PIPELINE_VIDEO1 );

  03848	e3a01001	 mov         r1, #1
  0384c	e59b3000	 ldr         r3, [r11]
  03850	e28330b0	 add         r3, r3, #0xB0
  03854	e5930000	 ldr         r0, [r3]
  03858	eb000000	 bl          |?DisablePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@@Z|

; 1403 :                     m_pDisplayContr->DisablePipeline( OMAP_DSS_PIPELINE_VIDEO2 );

  0385c	e3a01002	 mov         r1, #2
  03860	e59b3000	 ldr         r3, [r11]
  03864	e28330b0	 add         r3, r3, #0xB0
  03868	e5930000	 ldr         r0, [r3]
  0386c	eb000000	 bl          |?DisablePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@@Z|

; 1404 :                     
; 1405 :                     //  Remove overlay references
; 1406 :                     m_pOverlay1Surf = NULL;

  03870	e59b3000	 ldr         r3, [r11]
  03874	e28320c0	 add         r2, r3, #0xC0
  03878	e3a03000	 mov         r3, #0
  0387c	e5823000	 str         r3, [r2]

; 1407 :                     m_pOverlay2Surf = NULL;

  03880	e59b3000	 ldr         r3, [r11]
  03884	e28320c4	 add         r2, r3, #0xC4
  03888	e3a03000	 mov         r3, #0
  0388c	e5823000	 str         r3, [r2]

; 1408 :                     m_pTVSurf = NULL;

  03890	e59b3000	 ldr         r3, [r11]
  03894	e2832f42	 add         r2, r3, #0x42, 30
  03898	e3a03000	 mov         r3, #0
  0389c	e5823000	 str         r3, [r2]

; 1409 :                     
; 1410 :                     /* Since WinCE always considers the boot-up width and height to be 0 degree orientation,
; 1411 :                        we need to manipulate the cjIn rotation angle when the device has booted up in 90,180 or 270
; 1412 :                        orientation (specified through registry setting and stored in g_Globals.m_dwRotationAngle) */
; 1413 :                     //  Set graphics rotate angle
; 1414 :                     m_iGraphicsRotate = getOrientation((getAngle(cjIn)+getAngle(g_Globals.m_dwRotationAngle))%360);

  038a0	e59b000c	 ldr         r0, [r11, #0xC]
  038a4	eb000000	 bl          |?getAngle@@YAKK@Z|
  038a8	e50b00f4	 str         r0, [r11, #-0xF4]
  038ac	e59f30c8	 ldr         r3, [pc, #0xC8]
  038b0	e5930004	 ldr         r0, [r3, #4]
  038b4	eb000000	 bl          |?getAngle@@YAKK@Z|
  038b8	e50b00f0	 str         r0, [r11, #-0xF0]
  038bc	e51b20f4	 ldr         r2, [r11, #-0xF4]
  038c0	e51b30f0	 ldr         r3, [r11, #-0xF0]
  038c4	e0821003	 add         r1, r2, r3
  038c8	e3a00f5a	 mov         r0, #0x5A, 30
  038cc	eb000000	 bl          __rt_udiv
  038d0	e1a00001	 mov         r0, r1
  038d4	eb000000	 bl          |?getOrientation@@YAKK@Z|
  038d8	e50b00ec	 str         r0, [r11, #-0xEC]
  038dc	e59b3000	 ldr         r3, [r11]
  038e0	e2832098	 add         r2, r3, #0x98
  038e4	e51b30ec	 ldr         r3, [r11, #-0xEC]
  038e8	e5823000	 str         r3, [r2]

; 1415 : 
; 1416 :                     //  Change width and height of primary surface, but not the surface angle of the GPE surface
; 1417 :                     //  Have the display controller rotate the output of the primary surface
; 1418 :                     switch( m_iGraphicsRotate )

  038ec	e59b3000	 ldr         r3, [r11]
  038f0	e2833098	 add         r3, r3, #0x98
  038f4	e5933000	 ldr         r3, [r3]
  038f8	e50b30e8	 str         r3, [r11, #-0xE8]
  038fc	e51b30e8	 ldr         r3, [r11, #-0xE8]
  03900	e3530004	 cmp         r3, #4
  03904	8a000064	 bhi         |$LN91@DrvEscape|
  03908	e51b20e8	 ldr         r2, [r11, #-0xE8]
  0390c	e1a03102	 mov         r3, r2, lsl #2
  03910	e083300f	 add         r3, r3, pc
  03914	e5933004	 ldr         r3, [r3, #4]
  03918	e08ff003	 add         pc, pc, r3
  0391c		 |$LN262@DrvEscape|
  0391c		 |$LN261@DrvEscape|
  0391c		 |$LN263@DrvEscape|
  0391c	00000010	 DCD         0x10
  03920		 |$LN264@DrvEscape|
  03920	00000098	 DCD         0x98
  03924		 |$LN265@DrvEscape|
  03924	000000e4	 DCD         0xe4
  03928		 |$LN266@DrvEscape|
  03928	0000017c	 DCD         0x17c
  0392c		 |$LN267@DrvEscape|
  0392c	00000130	 DCD         0x130
  03930		 |$LN90@DrvEscape|

; 1419 :                     {
; 1420 :                         case DMDO_0:
; 1421 :                             //  Set the rotation and orientation of the primary surface
; 1422 :                             m_pPrimarySurf->SetOrientation( OMAP_SURF_ORIENTATION_STANDARD );

  03930	e3a01000	 mov         r1, #0
  03934	e59b3000	 ldr         r3, [r11]
  03938	e28330bc	 add         r3, r3, #0xBC
  0393c	e5932000	 ldr         r2, [r3]
  03940	e59b3000	 ldr         r3, [r11]
  03944	e28330bc	 add         r3, r3, #0xBC
  03948	e5930000	 ldr         r0, [r3]
  0394c	e5923000	 ldr         r3, [r2]
  03950	e2833048	 add         r3, r3, #0x48
  03954	e5933000	 ldr         r3, [r3]
  03958	e1a0e00f	 mov         lr, pc
  0395c	e12fff13	 bx          r3

; 1423 :                             
; 1424 :                             //  Set the output rotation angle for the pipeline
; 1425 :                             m_pDisplayContr->RotatePipeline( OMAP_DSS_PIPELINE_GFX, OMAP_DSS_ROTATION_0 );

  03960	e3a02000	 mov         r2, #0
  03964	e3a01000	 mov         r1, #0
  03968	e59b3000	 ldr         r3, [r11]
  0396c	e28330b0	 add         r3, r3, #0xB0
  03970	e5930000	 ldr         r0, [r3]
  03974	eb000000	 bl          |?RotatePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@W4OMAP_DSS_ROTATION@@@Z|

; 1426 :                             break;

  03978	ea000047	 b           |$LN91@DrvEscape|
  0397c		 |$LN323@DrvEscape|
  0397c		 |$LN324@DrvEscape|
  0397c	00000000	 DCD         |?g_Globals@@3VOMAPDDGPEGlobals@@A|
  03980		 |$LN325@DrvEscape|
  03980	00000000	 DCD         |??_C@_1EM@JJPONIIG@?$AAD?$AAR?$AAV?$AAE?$AAS?$AAC?$AA_?$AAS?$AAE?$AAT?$AAS?$AAC?$AAR?$AAE?$AAE?$AAN?$AAR?$AAO?$AAT?$AAA?$AAT?$AAI?$AAO?$AAN?$AA?3?$AA?5?$AAc?$AAj?$AAI?$AAn?$AA?5?$AA?$DN@|
  03984		 |$LN326@DrvEscape|
  03984	00000000	 DCD         |dpCurSettings|
  03988		 |$LN327@DrvEscape|
  03988	00000000	 DCD         |??_C@_1EM@DCFPKBLA@?$AAD?$AAR?$AAV?$AAE?$AAS?$AAC?$AA_?$AAE?$AAN?$AAD?$AAS?$AAC?$AAR?$AAE?$AAE?$AAN?$AAR?$AAO?$AAT?$AAA?$AAT?$AAI?$AAO?$AAN?$AA?3?$AA?5?$AAc?$AAj?$AAI?$AAn?$AA?5?$AA?$DN@|
  0398c		 |$LN328@DrvEscape|
  0398c	00000000	 DCD         |??_C@_1FA@EAONMHND@?$AAD?$AAR?$AAV?$AAE?$AAS?$AAC?$AA_?$AAB?$AAE?$AAG?$AAI?$AAN?$AAS?$AAC?$AAR?$AAE?$AAE?$AAN?$AAR?$AAO?$AAT?$AAA?$AAT?$AAI?$AAO?$AAN?$AA?3?$AA?5?$AAc?$AAj?$AAI?$AAn@|
  03990		 |$LN329@DrvEscape|
  03990	80038140	 DCD         0x80038140
  03994		 |$LN330@DrvEscape|
  03994	00321008	 DCD         0x321008
  03998		 |$LN331@DrvEscape|
  03998	00321004	 DCD         0x321004
  0399c		 |$LN332@DrvEscape|
  0399c	0032100c	 DCD         0x32100c
  039a0		 |$LN333@DrvEscape|
  039a0	000186b5	 DCD         0x186b5
  039a4		 |$LN334@DrvEscape|
  039a4	000186a5	 DCD         0x186a5
  039a8		 |$LN335@DrvEscape|
  039a8	000186a2	 DCD         0x186a2
  039ac		 |$LN336@DrvEscape|
  039ac	000186a1	 DCD         0x186a1
  039b0		 |$LN337@DrvEscape|
  039b0	000186a3	 DCD         0x186a3
  039b4		 |$LN338@DrvEscape|
  039b4	00000000	 DCD         |??_C@_1CO@CIMPCIMH@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAD?$AAr?$AAv?$AAE?$AAs?$AAc?$AAa?$AAp?$AAe?$AA?$AN?$AA?6?$AA?$AA@|
  039b8		 |$LN89@DrvEscape|

; 1427 : 
; 1428 :                         case DMDO_90:
; 1429 :                             //  Set the rotation and orientation of the primary surface
; 1430 :                             m_pPrimarySurf->SetOrientation( OMAP_SURF_ORIENTATION_ROTATED );

  039b8	e3a01001	 mov         r1, #1
  039bc	e59b3000	 ldr         r3, [r11]
  039c0	e28330bc	 add         r3, r3, #0xBC
  039c4	e5932000	 ldr         r2, [r3]
  039c8	e59b3000	 ldr         r3, [r11]
  039cc	e28330bc	 add         r3, r3, #0xBC
  039d0	e5930000	 ldr         r0, [r3]
  039d4	e5923000	 ldr         r3, [r2]
  039d8	e2833048	 add         r3, r3, #0x48
  039dc	e5933000	 ldr         r3, [r3]
  039e0	e1a0e00f	 mov         lr, pc
  039e4	e12fff13	 bx          r3

; 1431 :                             
; 1432 :                             //  Set the output rotation angle for the pipeline
; 1433 :                             m_pDisplayContr->RotatePipeline( OMAP_DSS_PIPELINE_GFX, OMAP_DSS_ROTATION_90 );

  039e8	e3a0205a	 mov         r2, #0x5A
  039ec	e3a01000	 mov         r1, #0
  039f0	e59b3000	 ldr         r3, [r11]
  039f4	e28330b0	 add         r3, r3, #0xB0
  039f8	e5930000	 ldr         r0, [r3]
  039fc	eb000000	 bl          |?RotatePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@W4OMAP_DSS_ROTATION@@@Z|

; 1434 :                             break;

  03a00	ea000025	 b           |$LN91@DrvEscape|
  03a04		 |$LN88@DrvEscape|

; 1435 : 
; 1436 :                         case DMDO_180:
; 1437 :                             //  Set the rotation and orientation of the primary surface
; 1438 :                             m_pPrimarySurf->SetOrientation( OMAP_SURF_ORIENTATION_STANDARD );

  03a04	e3a01000	 mov         r1, #0
  03a08	e59b3000	 ldr         r3, [r11]
  03a0c	e28330bc	 add         r3, r3, #0xBC
  03a10	e5932000	 ldr         r2, [r3]
  03a14	e59b3000	 ldr         r3, [r11]
  03a18	e28330bc	 add         r3, r3, #0xBC
  03a1c	e5930000	 ldr         r0, [r3]
  03a20	e5923000	 ldr         r3, [r2]
  03a24	e2833048	 add         r3, r3, #0x48
  03a28	e5933000	 ldr         r3, [r3]
  03a2c	e1a0e00f	 mov         lr, pc
  03a30	e12fff13	 bx          r3

; 1439 :                             
; 1440 :                             //  Set the output rotation angle for the pipeline
; 1441 :                             m_pDisplayContr->RotatePipeline( OMAP_DSS_PIPELINE_GFX, OMAP_DSS_ROTATION_180 );

  03a34	e3a020b4	 mov         r2, #0xB4
  03a38	e3a01000	 mov         r1, #0
  03a3c	e59b3000	 ldr         r3, [r11]
  03a40	e28330b0	 add         r3, r3, #0xB0
  03a44	e5930000	 ldr         r0, [r3]
  03a48	eb000000	 bl          |?RotatePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@W4OMAP_DSS_ROTATION@@@Z|

; 1442 :                             break;

  03a4c	ea000012	 b           |$LN91@DrvEscape|
  03a50		 |$LN87@DrvEscape|

; 1443 : 
; 1444 :                         case DMDO_270:
; 1445 :                             //  Set the rotation and orientation of the primary surface
; 1446 :                             m_pPrimarySurf->SetOrientation( OMAP_SURF_ORIENTATION_ROTATED );

  03a50	e3a01001	 mov         r1, #1
  03a54	e59b3000	 ldr         r3, [r11]
  03a58	e28330bc	 add         r3, r3, #0xBC
  03a5c	e5932000	 ldr         r2, [r3]
  03a60	e59b3000	 ldr         r3, [r11]
  03a64	e28330bc	 add         r3, r3, #0xBC
  03a68	e5930000	 ldr         r0, [r3]
  03a6c	e5923000	 ldr         r3, [r2]
  03a70	e2833048	 add         r3, r3, #0x48
  03a74	e5933000	 ldr         r3, [r3]
  03a78	e1a0e00f	 mov         lr, pc
  03a7c	e12fff13	 bx          r3

; 1447 :                             
; 1448 :                             //  Set the output rotation angle for the pipeline
; 1449 :                             m_pDisplayContr->RotatePipeline( OMAP_DSS_PIPELINE_GFX, OMAP_DSS_ROTATION_270 );

  03a80	e3a02c01	 mov         r2, #1, 24
  03a84	e382200e	 orr         r2, r2, #0xE
  03a88	e3a01000	 mov         r1, #0
  03a8c	e59b3000	 ldr         r3, [r11]
  03a90	e28330b0	 add         r3, r3, #0xB0
  03a94	e5930000	 ldr         r0, [r3]
  03a98	eb000000	 bl          |?RotatePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@W4OMAP_DSS_ROTATION@@@Z|
  03a9c		 |$LN91@DrvEscape|

; 1450 :                             break;
; 1451 :                     }
; 1452 : 
; 1453 :                     //  Update extended mode information
; 1454 :                     m_pMode->width = m_pPrimarySurf->OmapSurface()->Width();

  03a9c	e59b3000	 ldr         r3, [r11]
  03aa0	e28330bc	 add         r3, r3, #0xBC
  03aa4	e5930000	 ldr         r0, [r3]
  03aa8	eb000000	 bl          |?OmapSurface@OMAPDDGPESurface@@QAAPAVOMAPSurface@@XZ|
  03aac	e50b00e4	 str         r0, [r11, #-0xE4]
  03ab0	e51b30e4	 ldr         r3, [r11, #-0xE4]
  03ab4	e50b30e0	 str         r3, [r11, #-0xE0]
  03ab8	e3a01000	 mov         r1, #0
  03abc	e51b00e0	 ldr         r0, [r11, #-0xE0]
  03ac0	e51b30e0	 ldr         r3, [r11, #-0xE0]
  03ac4	e5933000	 ldr         r3, [r3]
  03ac8	e2833008	 add         r3, r3, #8
  03acc	e5933000	 ldr         r3, [r3]
  03ad0	e1a0e00f	 mov         lr, pc
  03ad4	e12fff13	 bx          r3
  03ad8	e50b00dc	 str         r0, [r11, #-0xDC]
  03adc	e59b3000	 ldr         r3, [r11]
  03ae0	e2833010	 add         r3, r3, #0x10
  03ae4	e5933000	 ldr         r3, [r3]
  03ae8	e2832004	 add         r2, r3, #4
  03aec	e51b30dc	 ldr         r3, [r11, #-0xDC]
  03af0	e5823000	 str         r3, [r2]

; 1455 :                     m_pMode->height = m_pPrimarySurf->OmapSurface()->Height();

  03af4	e59b3000	 ldr         r3, [r11]
  03af8	e28330bc	 add         r3, r3, #0xBC
  03afc	e5930000	 ldr         r0, [r3]
  03b00	eb000000	 bl          |?OmapSurface@OMAPDDGPESurface@@QAAPAVOMAPSurface@@XZ|
  03b04	e50b00d8	 str         r0, [r11, #-0xD8]
  03b08	e51b30d8	 ldr         r3, [r11, #-0xD8]
  03b0c	e50b30d4	 str         r3, [r11, #-0xD4]
  03b10	e3a01000	 mov         r1, #0
  03b14	e51b00d4	 ldr         r0, [r11, #-0xD4]
  03b18	e51b30d4	 ldr         r3, [r11, #-0xD4]
  03b1c	e5933000	 ldr         r3, [r3]
  03b20	e283300c	 add         r3, r3, #0xC
  03b24	e5933000	 ldr         r3, [r3]
  03b28	e1a0e00f	 mov         lr, pc
  03b2c	e12fff13	 bx          r3
  03b30	e50b00d0	 str         r0, [r11, #-0xD0]
  03b34	e59b3000	 ldr         r3, [r11]
  03b38	e2833010	 add         r3, r3, #0x10
  03b3c	e5933000	 ldr         r3, [r3]
  03b40	e2832008	 add         r2, r3, #8
  03b44	e51b30d0	 ldr         r3, [r11, #-0xD0]
  03b48	e5823000	 str         r3, [r2]

; 1456 :                     m_pModeEx->lPitch = m_pPrimarySurf->OmapSurface()->Stride();

  03b4c	e59b3000	 ldr         r3, [r11]
  03b50	e28330bc	 add         r3, r3, #0xBC
  03b54	e5930000	 ldr         r0, [r3]
  03b58	eb000000	 bl          |?OmapSurface@OMAPDDGPESurface@@QAAPAVOMAPSurface@@XZ|
  03b5c	e50b00cc	 str         r0, [r11, #-0xCC]
  03b60	e51b30cc	 ldr         r3, [r11, #-0xCC]
  03b64	e50b30c8	 str         r3, [r11, #-0xC8]
  03b68	e3a01000	 mov         r1, #0
  03b6c	e51b00c8	 ldr         r0, [r11, #-0xC8]
  03b70	e51b30c8	 ldr         r3, [r11, #-0xC8]
  03b74	e5933000	 ldr         r3, [r3]
  03b78	e2833010	 add         r3, r3, #0x10
  03b7c	e5933000	 ldr         r3, [r3]
  03b80	e1a0e00f	 mov         lr, pc
  03b84	e12fff13	 bx          r3
  03b88	e50b00c4	 str         r0, [r11, #-0xC4]
  03b8c	e59b3000	 ldr         r3, [r11]
  03b90	e2833024	 add         r3, r3, #0x24
  03b94	e5933000	 ldr         r3, [r3]
  03b98	e2832040	 add         r2, r3, #0x40
  03b9c	e51b30c4	 ldr         r3, [r11, #-0xC4]
  03ba0	e5823000	 str         r3, [r2]

; 1457 : 
; 1458 :                     /*  Dont enable the pipelines yet -Wait for DRVESC_ENDSCREENROTATION 
; 1459 :                         to enable the pipelines to reduce the amount of flicker seen during rotation */
; 1460 : 
; 1461 :                     //  Rotation done, unlock other operations
; 1462 :                     Unlock();

  03ba4	e59b3000	 ldr         r3, [r11]
  03ba8	e5933000	 ldr         r3, [r3]
  03bac	e28330f0	 add         r3, r3, #0xF0
  03bb0	e59b0000	 ldr         r0, [r11]
  03bb4	e5933000	 ldr         r3, [r3]
  03bb8	e1a0e00f	 mov         lr, pc
  03bbc	e12fff13	 bx          r3

; 1463 : 
; 1464 :                     rc = DISP_CHANGE_SUCCESSFUL;

  03bc0	e3a03000	 mov         r3, #0
  03bc4	e50b316c	 str         r3, [r11, #-0x16C]

; 1465 :                 }
; 1466 :                 else

  03bc8	ea000001	 b           |$LN86@DrvEscape|
  03bcc		 |$LN94@DrvEscape|

; 1467 :                 {
; 1468 :                     rc = DISP_CHANGE_BADMODE;

  03bcc	e3e03001	 mvn         r3, #1
  03bd0	e50b316c	 str         r3, [r11, #-0x16C]
  03bd4		 |$LN86@DrvEscape|
  03bd4		 |$LN95@DrvEscape|

; 1469 :                 }
; 1470 :             }
; 1471 :             break;

  03bd4	ea000433	 b           |$LN111@DrvEscape|
  03bd8		 |$LN85@DrvEscape|

; 1472 :                 
; 1473 :         case CONTRASTCOMMAND:
; 1474 :             //  Handle the contrast command
; 1475 :             if (cjIn == sizeof(ContrastCmdInputParm))

  03bd8	e59b300c	 ldr         r3, [r11, #0xC]
  03bdc	e3530008	 cmp         r3, #8
  03be0	1a000080	 bne         |$LN84@DrvEscape|

; 1476 :             {
; 1477 :                 ContrastCmdInputParm*   pContrastParm = (ContrastCmdInputParm *)pvIn;

  03be4	e59b3010	 ldr         r3, [r11, #0x10]
  03be8	e50b315c	 str         r3, [r11, #-0x15C]

; 1478 :                 DWORD                   dwContrastLevel = DEFAULT_CONTRAST_LEVEL;

  03bec	e3a03003	 mov         r3, #3
  03bf0	e50b3160	 str         r3, [r11, #-0x160]

; 1479 : 
; 1480 :                 //  Default return value
; 1481 :                 rc = ESC_SUCCESS;

  03bf4	e3a03001	 mov         r3, #1
  03bf8	e50b316c	 str         r3, [r11, #-0x16C]

; 1482 :                 switch(pContrastParm->command)

  03bfc	e51b315c	 ldr         r3, [r11, #-0x15C]
  03c00	e5933000	 ldr         r3, [r3]
  03c04	e50b30c0	 str         r3, [r11, #-0xC0]
  03c08	e51b30c0	 ldr         r3, [r11, #-0xC0]
  03c0c	e3530005	 cmp         r3, #5
  03c10	8a000063	 bhi         |$LN71@DrvEscape|
  03c14	e51b20c0	 ldr         r2, [r11, #-0xC0]
  03c18	e1a03102	 mov         r3, r2, lsl #2
  03c1c	e083300f	 add         r3, r3, pc
  03c20	e5933004	 ldr         r3, [r3, #4]
  03c24	e08ff003	 add         pc, pc, r3
  03c28		 |$LN269@DrvEscape|
  03c28		 |$LN268@DrvEscape|
  03c28		 |$LN270@DrvEscape|
  03c28	00000014	 DCD         0x14
  03c2c		 |$LN271@DrvEscape|
  03c2c	00000034	 DCD         0x34
  03c30		 |$LN272@DrvEscape|
  03c30	00000070	 DCD         0x70
  03c34		 |$LN273@DrvEscape|
  03c34	000000d4	 DCD         0xd4
  03c38		 |$LN274@DrvEscape|
  03c38	0000014c	 DCD         0x14c
  03c3c		 |$LN275@DrvEscape|
  03c3c	0000016c	 DCD         0x16c
  03c40		 |$LN81@DrvEscape|

; 1483 :                 {
; 1484 :                     case CONTRAST_CMD_GET:
; 1485 :                         //  Get current contrast level
; 1486 :                         dwContrastLevel = m_pDisplayContr->GetContrastLevel();

  03c40	e59b3000	 ldr         r3, [r11]
  03c44	e28330b0	 add         r3, r3, #0xB0
  03c48	e5930000	 ldr         r0, [r3]
  03c4c	eb000000	 bl          |?GetContrastLevel@OMAPDisplayController@@QAAKXZ|
  03c50	e50b00bc	 str         r0, [r11, #-0xBC]
  03c54	e51b30bc	 ldr         r3, [r11, #-0xBC]
  03c58	e50b3160	 str         r3, [r11, #-0x160]

; 1487 :                         break;

  03c5c	ea000054	 b           |$LN82@DrvEscape|
  03c60		 |$LN80@DrvEscape|

; 1488 : 
; 1489 :                     case CONTRAST_CMD_SET:
; 1490 :                         //  Set current contrast level
; 1491 :                         m_pDisplayContr->SetContrastLevel(pContrastParm->parm);

  03c60	e51b315c	 ldr         r3, [r11, #-0x15C]
  03c64	e2833004	 add         r3, r3, #4
  03c68	e5931000	 ldr         r1, [r3]
  03c6c	e59b3000	 ldr         r3, [r11]
  03c70	e28330b0	 add         r3, r3, #0xB0
  03c74	e5930000	 ldr         r0, [r3]
  03c78	eb000000	 bl          |?SetContrastLevel@OMAPDisplayController@@QAAHK@Z|

; 1492 :                         dwContrastLevel = m_pDisplayContr->GetContrastLevel();

  03c7c	e59b3000	 ldr         r3, [r11]
  03c80	e28330b0	 add         r3, r3, #0xB0
  03c84	e5930000	 ldr         r0, [r3]
  03c88	eb000000	 bl          |?GetContrastLevel@OMAPDisplayController@@QAAKXZ|
  03c8c	e50b00b8	 str         r0, [r11, #-0xB8]
  03c90	e51b30b8	 ldr         r3, [r11, #-0xB8]
  03c94	e50b3160	 str         r3, [r11, #-0x160]

; 1493 :                         break;

  03c98	ea000045	 b           |$LN82@DrvEscape|
  03c9c		 |$LN79@DrvEscape|

; 1494 : 
; 1495 :                     case CONTRAST_CMD_INCREASE:
; 1496 :                         //  Increase contrast by delta
; 1497 :                         dwContrastLevel = m_pDisplayContr->GetContrastLevel() + pContrastParm->parm;

  03c9c	e59b3000	 ldr         r3, [r11]
  03ca0	e28330b0	 add         r3, r3, #0xB0
  03ca4	e5930000	 ldr         r0, [r3]
  03ca8	eb000000	 bl          |?GetContrastLevel@OMAPDisplayController@@QAAKXZ|
  03cac	e50b00b4	 str         r0, [r11, #-0xB4]
  03cb0	e51b315c	 ldr         r3, [r11, #-0x15C]
  03cb4	e2833004	 add         r3, r3, #4
  03cb8	e51b20b4	 ldr         r2, [r11, #-0xB4]
  03cbc	e5933000	 ldr         r3, [r3]
  03cc0	e0823003	 add         r3, r2, r3
  03cc4	e50b3160	 str         r3, [r11, #-0x160]

; 1498 : 
; 1499 :                         // If caller wants to set the contrast above the upper limit, 
; 1500 :                         // we need to return error in order to pass the DDI contrast 
; 1501 :                         // Interface LTK test.
; 1502 :                         if (dwContrastLevel >= NUM_CONTRAST_LEVELS) 

  03cc8	e51b3160	 ldr         r3, [r11, #-0x160]
  03ccc	e3530007	 cmp         r3, #7
  03cd0	3a000004	 bcc         |$LN78@DrvEscape|

; 1503 :                         {
; 1504 :                             rc = ESC_FAILED;

  03cd4	e3e03000	 mvn         r3, #0
  03cd8	e50b316c	 str         r3, [r11, #-0x16C]

; 1505 :                             SetLastError (ERROR_INVALID_PARAMETER);

  03cdc	e3a00057	 mov         r0, #0x57
  03ce0	eb000000	 bl          SetLastError

; 1506 :                         }
; 1507 :                         else

  03ce4	ea000004	 b           |$LN77@DrvEscape|
  03ce8		 |$LN78@DrvEscape|

; 1508 :                         {
; 1509 :                         m_pDisplayContr->SetContrastLevel(dwContrastLevel);

  03ce8	e51b1160	 ldr         r1, [r11, #-0x160]
  03cec	e59b3000	 ldr         r3, [r11]
  03cf0	e28330b0	 add         r3, r3, #0xB0
  03cf4	e5930000	 ldr         r0, [r3]
  03cf8	eb000000	 bl          |?SetContrastLevel@OMAPDisplayController@@QAAHK@Z|
  03cfc		 |$LN77@DrvEscape|

; 1510 :                         }
; 1511 :                         break;

  03cfc	ea00002c	 b           |$LN82@DrvEscape|
  03d00		 |$LN76@DrvEscape|

; 1512 : 
; 1513 :                     case CONTRAST_CMD_DECREASE:
; 1514 :                         //  Decrease contrast by delta
; 1515 :                         dwContrastLevel = m_pDisplayContr->GetContrastLevel();

  03d00	e59b3000	 ldr         r3, [r11]
  03d04	e28330b0	 add         r3, r3, #0xB0
  03d08	e5930000	 ldr         r0, [r3]
  03d0c	eb000000	 bl          |?GetContrastLevel@OMAPDisplayController@@QAAKXZ|
  03d10	e50b00b0	 str         r0, [r11, #-0xB0]
  03d14	e51b30b0	 ldr         r3, [r11, #-0xB0]
  03d18	e50b3160	 str         r3, [r11, #-0x160]

; 1516 : 
; 1517 :                         // If caller wants to set the contrast below the lower limit, 
; 1518 :                         // we need to return error in order to pass the DDI contrast 
; 1519 :                         // Interface LTK test.
; 1520 :                         if (dwContrastLevel < (DWORD)pContrastParm->parm)

  03d1c	e51b315c	 ldr         r3, [r11, #-0x15C]
  03d20	e2833004	 add         r3, r3, #4
  03d24	e51b2160	 ldr         r2, [r11, #-0x160]
  03d28	e5933000	 ldr         r3, [r3]
  03d2c	e1520003	 cmp         r2, r3
  03d30	2a000004	 bcs         |$LN75@DrvEscape|

; 1521 :                         {
; 1522 :                             rc = ESC_FAILED;

  03d34	e3e03000	 mvn         r3, #0
  03d38	e50b316c	 str         r3, [r11, #-0x16C]

; 1523 :                             SetLastError (ERROR_INVALID_PARAMETER);

  03d3c	e3a00057	 mov         r0, #0x57
  03d40	eb000000	 bl          SetLastError

; 1524 :                         }
; 1525 :                         else

  03d44	ea00000a	 b           |$LN74@DrvEscape|
  03d48		 |$LN75@DrvEscape|

; 1526 :                         {
; 1527 :                             dwContrastLevel -= pContrastParm->parm;

  03d48	e51b315c	 ldr         r3, [r11, #-0x15C]
  03d4c	e2833004	 add         r3, r3, #4
  03d50	e51b2160	 ldr         r2, [r11, #-0x160]
  03d54	e5933000	 ldr         r3, [r3]
  03d58	e0423003	 sub         r3, r2, r3
  03d5c	e50b3160	 str         r3, [r11, #-0x160]

; 1528 :                         m_pDisplayContr->SetContrastLevel(dwContrastLevel);

  03d60	e51b1160	 ldr         r1, [r11, #-0x160]
  03d64	e59b3000	 ldr         r3, [r11]
  03d68	e28330b0	 add         r3, r3, #0xB0
  03d6c	e5930000	 ldr         r0, [r3]
  03d70	eb000000	 bl          |?SetContrastLevel@OMAPDisplayController@@QAAHK@Z|
  03d74		 |$LN74@DrvEscape|

; 1529 :                         }
; 1530 :                         break;

  03d74	ea00000e	 b           |$LN82@DrvEscape|
  03d78		 |$LN73@DrvEscape|

; 1531 : 
; 1532 :                     case CONTRAST_CMD_DEFAULT:
; 1533 :                         //  Set default contrast level
; 1534 :                         m_pDisplayContr->SetContrastLevel(DEFAULT_CONTRAST_LEVEL);

  03d78	e3a01003	 mov         r1, #3
  03d7c	e59b3000	 ldr         r3, [r11]
  03d80	e28330b0	 add         r3, r3, #0xB0
  03d84	e5930000	 ldr         r0, [r3]
  03d88	eb000000	 bl          |?SetContrastLevel@OMAPDisplayController@@QAAHK@Z|

; 1535 :                         dwContrastLevel = DEFAULT_CONTRAST_LEVEL;

  03d8c	e3a03003	 mov         r3, #3
  03d90	e50b3160	 str         r3, [r11, #-0x160]

; 1536 :                         break;

  03d94	ea000006	 b           |$LN82@DrvEscape|
  03d98		 |$LN72@DrvEscape|

; 1537 : 
; 1538 :                     case CONTRAST_CMD_MAX:
; 1539 :                         //  Get max contrast level
; 1540 :                         dwContrastLevel = NUM_CONTRAST_LEVELS-1;

  03d98	e3a03006	 mov         r3, #6
  03d9c	e50b3160	 str         r3, [r11, #-0x160]

; 1541 :                         break;

  03da0	ea000003	 b           |$LN82@DrvEscape|
  03da4		 |$LN71@DrvEscape|

; 1542 : 
; 1543 :                     default:
; 1544 :                         rc = ESC_FAILED;

  03da4	e3e03000	 mvn         r3, #0
  03da8	e50b316c	 str         r3, [r11, #-0x16C]

; 1545 :                         SetLastError (ERROR_INVALID_PARAMETER);

  03dac	e3a00057	 mov         r0, #0x57
  03db0	eb000000	 bl          SetLastError
  03db4		 |$LN82@DrvEscape|

; 1546 :                         break;
; 1547 :                 }
; 1548 : 
; 1549 :                 //  Return updated contrast setting
; 1550 :                 if((rc == ESC_SUCCESS) && (cjOut == sizeof(DWORD)) && (pvOut != NULL))

  03db4	e51b316c	 ldr         r3, [r11, #-0x16C]
  03db8	e3530001	 cmp         r3, #1
  03dbc	1a000008	 bne         |$LN70@DrvEscape|
  03dc0	e59b3014	 ldr         r3, [r11, #0x14]
  03dc4	e3530004	 cmp         r3, #4
  03dc8	1a000005	 bne         |$LN70@DrvEscape|
  03dcc	e59b3018	 ldr         r3, [r11, #0x18]
  03dd0	e3530000	 cmp         r3, #0
  03dd4	0a000002	 beq         |$LN70@DrvEscape|

; 1551 :                 {
; 1552 :                     *(DWORD*)pvOut = dwContrastLevel;

  03dd8	e51b2160	 ldr         r2, [r11, #-0x160]
  03ddc	e59b3018	 ldr         r3, [r11, #0x18]
  03de0	e5832000	 str         r2, [r3]
  03de4		 |$LN70@DrvEscape|

; 1553 :                 }
; 1554 :             }
; 1555 :             else

  03de4	ea000004	 b           |$LN69@DrvEscape|
  03de8		 |$LN84@DrvEscape|

; 1556 :             {
; 1557 :                 SetLastError (ERROR_INVALID_PARAMETER);

  03de8	e3a00057	 mov         r0, #0x57
  03dec	eb000000	 bl          SetLastError

; 1558 :                 rc = ESC_FAILED;

  03df0	e3e03000	 mvn         r3, #0
  03df4	e50b316c	 str         r3, [r11, #-0x16C]

; 1559 :                 break;

  03df8	ea0003aa	 b           |$LN111@DrvEscape|
  03dfc		 |$LN69@DrvEscape|

; 1560 :             }
; 1561 :             break;

  03dfc	ea0003a9	 b           |$LN111@DrvEscape|
  03e00		 |$LN68@DrvEscape|

; 1562 : 
; 1563 : 
; 1564 :         case DRVESC_TVOUT_ENABLE:
; 1565 :             //  Enable TV out
; 1566 :             DEBUGMSG(GPE_ZONE_HW, (L"OMAPDDGPE::DrvEscape: DRVESC_TVOUT_ENABLE\r\n"));

  03e00	e59f3f10	 ldr         r3, [pc, #0xF10]
  03e04	e5933440	 ldr         r3, [r3, #0x440]
  03e08	e3130b02	 tst         r3, #2, 22
  03e0c	0a000004	 beq         |$LN129@DrvEscape|
  03e10	e59f0f44	 ldr         r0, [pc, #0xF44]
  03e14	eb000000	 bl          NKDbgPrintfW
  03e18	e3a03001	 mov         r3, #1
  03e1c	e50b30ac	 str         r3, [r11, #-0xAC]
  03e20	ea000001	 b           |$LN130@DrvEscape|
  03e24		 |$LN129@DrvEscape|
  03e24	e3a03000	 mov         r3, #0
  03e28	e50b30ac	 str         r3, [r11, #-0xAC]
  03e2c		 |$LN130@DrvEscape|

; 1567 :             if( !m_bTVOutEnable )

  03e2c	e59b3000	 ldr         r3, [r11]
  03e30	e2833e11	 add         r3, r3, #0x11, 28
  03e34	e5933000	 ldr         r3, [r3]
  03e38	e3530000	 cmp         r3, #0
  03e3c	1a00000f	 bne         |$LN67@DrvEscape|

; 1568 :             {
; 1569 :                 if( m_pDisplayContr->EnableTvOut(TRUE) )

  03e40	e3a01001	 mov         r1, #1
  03e44	e59b3000	 ldr         r3, [r11]
  03e48	e28330b0	 add         r3, r3, #0xB0
  03e4c	e5930000	 ldr         r0, [r3]
  03e50	eb000000	 bl          |?EnableTvOut@OMAPDisplayController@@QAAHH@Z|
  03e54	e50b00a8	 str         r0, [r11, #-0xA8]
  03e58	e51b30a8	 ldr         r3, [r11, #-0xA8]
  03e5c	e3530000	 cmp         r3, #0
  03e60	0a000006	 beq         |$LN66@DrvEscape|

; 1570 :                 {
; 1571 :                     m_bTVOutEnable = TRUE;

  03e64	e59b3000	 ldr         r3, [r11]
  03e68	e2832e11	 add         r2, r3, #0x11, 28
  03e6c	e3a03001	 mov         r3, #1
  03e70	e5823000	 str         r3, [r2]

; 1572 :                     DetermineTvOutSurface();

  03e74	e3a01000	 mov         r1, #0
  03e78	e59b0000	 ldr         r0, [r11]
  03e7c	eb000000	 bl          |?DetermineTvOutSurface@OMAPDDGPE@@QAAXH@Z|
  03e80		 |$LN66@DrvEscape|
  03e80		 |$LN67@DrvEscape|

; 1573 :                 }
; 1574 :             }
; 1575 : 
; 1576 :             //  Always return success
; 1577 :             rc = ESC_SUCCESS;

  03e80	e3a03001	 mov         r3, #1
  03e84	e50b316c	 str         r3, [r11, #-0x16C]

; 1578 :             break;            

  03e88	ea000386	 b           |$LN111@DrvEscape|
  03e8c		 |$LN65@DrvEscape|

; 1579 :             
; 1580 :         case DRVESC_TVOUT_DISABLE:
; 1581 :             //  Disable TV out
; 1582 :             DEBUGMSG(GPE_ZONE_HW, (L"OMAPDDGPE::DrvEscape: DRVESC_TVOUT_DISABLE\r\n"));

  03e8c	e59f3e84	 ldr         r3, [pc, #0xE84]
  03e90	e5933440	 ldr         r3, [r3, #0x440]
  03e94	e3130b02	 tst         r3, #2, 22
  03e98	0a000004	 beq         |$LN131@DrvEscape|
  03e9c	e59f0eb4	 ldr         r0, [pc, #0xEB4]
  03ea0	eb000000	 bl          NKDbgPrintfW
  03ea4	e3a03001	 mov         r3, #1
  03ea8	e50b30a4	 str         r3, [r11, #-0xA4]
  03eac	ea000001	 b           |$LN132@DrvEscape|
  03eb0		 |$LN131@DrvEscape|
  03eb0	e3a03000	 mov         r3, #0
  03eb4	e50b30a4	 str         r3, [r11, #-0xA4]
  03eb8		 |$LN132@DrvEscape|

; 1583 :             if( m_bTVOutEnable )

  03eb8	e59b3000	 ldr         r3, [r11]
  03ebc	e2833e11	 add         r3, r3, #0x11, 28
  03ec0	e5933000	 ldr         r3, [r3]
  03ec4	e3530000	 cmp         r3, #0
  03ec8	0a00000b	 beq         |$LN64@DrvEscape|

; 1584 :             {
; 1585 :                     m_bTVOutEnable = FALSE;

  03ecc	e59b3000	 ldr         r3, [r11]
  03ed0	e2832e11	 add         r2, r3, #0x11, 28
  03ed4	e3a03000	 mov         r3, #0
  03ed8	e5823000	 str         r3, [r2]

; 1586 :                     DetermineTvOutSurface();

  03edc	e3a01000	 mov         r1, #0
  03ee0	e59b0000	 ldr         r0, [r11]
  03ee4	eb000000	 bl          |?DetermineTvOutSurface@OMAPDDGPE@@QAAXH@Z|

; 1587 :                 m_pDisplayContr->EnableTvOut(FALSE);

  03ee8	e3a01000	 mov         r1, #0
  03eec	e59b3000	 ldr         r3, [r11]
  03ef0	e28330b0	 add         r3, r3, #0xB0
  03ef4	e5930000	 ldr         r0, [r3]
  03ef8	eb000000	 bl          |?EnableTvOut@OMAPDisplayController@@QAAHH@Z|
  03efc		 |$LN64@DrvEscape|

; 1588 :                 }
; 1589 : 
; 1590 :             //  Always return success
; 1591 :             rc = ESC_SUCCESS;

  03efc	e3a03001	 mov         r3, #1
  03f00	e50b316c	 str         r3, [r11, #-0x16C]

; 1592 :             break;

  03f04	ea000367	 b           |$LN111@DrvEscape|
  03f08		 |$LN63@DrvEscape|

; 1593 : 
; 1594 :         case DRVESC_TVOUT_GETSETTINGS:
; 1595 :             DEBUGMSG(GPE_ZONE_HW, (L"OMAPDDGPE::DrvEscape: DRVESC_TVOUT_GETSETTINGS\r\n"));

  03f08	e59f3e08	 ldr         r3, [pc, #0xE08]
  03f0c	e5933440	 ldr         r3, [r3, #0x440]
  03f10	e3130b02	 tst         r3, #2, 22
  03f14	0a000004	 beq         |$LN133@DrvEscape|
  03f18	e59f0e34	 ldr         r0, [pc, #0xE34]
  03f1c	eb000000	 bl          NKDbgPrintfW
  03f20	e3a03001	 mov         r3, #1
  03f24	e50b30a0	 str         r3, [r11, #-0xA0]
  03f28	ea000001	 b           |$LN134@DrvEscape|
  03f2c		 |$LN133@DrvEscape|
  03f2c	e3a03000	 mov         r3, #0
  03f30	e50b30a0	 str         r3, [r11, #-0xA0]
  03f34		 |$LN134@DrvEscape|

; 1596 :             if (pvOut != NULL && cjOut == sizeof(DRVESC_TVOUT_SETTINGS))

  03f34	e59b3018	 ldr         r3, [r11, #0x18]
  03f38	e3530000	 cmp         r3, #0
  03f3c	0a00003d	 beq         |$LN62@DrvEscape|
  03f40	e59b3014	 ldr         r3, [r11, #0x14]
  03f44	e3530020	 cmp         r3, #0x20
  03f48	1a00003a	 bne         |$LN62@DrvEscape|
  03f4c		 |$LN199@DrvEscape|

; 1597 :             {
; 1598 :                 __try
; 1599 :                 {
; 1600 :                     DRVESC_TVOUT_SETTINGS* pSettings = (DRVESC_TVOUT_SETTINGS*) pvOut;

  03f4c	e59b3018	 ldr         r3, [r11, #0x18]
  03f50	e50b3158	 str         r3, [r11, #-0x158]

; 1601 :                     memset(pSettings, 0, sizeof(DRVESC_TVOUT_SETTINGS));

  03f54	e3a02020	 mov         r2, #0x20
  03f58	e3a01000	 mov         r1, #0
  03f5c	e51b0158	 ldr         r0, [r11, #-0x158]
  03f60	eb000000	 bl          memset

; 1602 : 
; 1603 :                     //  Get the current settings
; 1604 :                     pSettings->bEnable          = m_bTVOutEnable;

  03f64	e59b3000	 ldr         r3, [r11]
  03f68	e2833e11	 add         r3, r3, #0x11, 28
  03f6c	e5932000	 ldr         r2, [r3]
  03f70	e51b3158	 ldr         r3, [r11, #-0x158]
  03f74	e5832000	 str         r2, [r3]

; 1605 :                     pSettings->dwFilterLevel    = m_dwTvOut_FilterLevel;

  03f78	e59b3000	 ldr         r3, [r11]
  03f7c	e2831f45	 add         r1, r3, #0x45, 30
  03f80	e51b3158	 ldr         r3, [r11, #-0x158]
  03f84	e2832004	 add         r2, r3, #4
  03f88	e5913000	 ldr         r3, [r1]
  03f8c	e5823000	 str         r3, [r2]

; 1606 :                     pSettings->dwAspectRatioW   = m_dwTvOut_AspectRatio_W;

  03f90	e59b3000	 ldr         r3, [r11]
  03f94	e2831f46	 add         r1, r3, #0x46, 30
  03f98	e51b3158	 ldr         r3, [r11, #-0x158]
  03f9c	e2832008	 add         r2, r3, #8
  03fa0	e5913000	 ldr         r3, [r1]
  03fa4	e5823000	 str         r3, [r2]

; 1607 :                     pSettings->dwAspectRatioH   = m_dwTvOut_AspectRatio_H;

  03fa8	e59b3000	 ldr         r3, [r11]
  03fac	e2831f47	 add         r1, r3, #0x47, 30
  03fb0	e51b3158	 ldr         r3, [r11, #-0x158]
  03fb4	e283200c	 add         r2, r3, #0xC
  03fb8	e5913000	 ldr         r3, [r1]
  03fbc	e5823000	 str         r3, [r2]

; 1608 :                     pSettings->dwResizePercentW = m_dwTvOut_Resize_W;

  03fc0	e59b3000	 ldr         r3, [r11]
  03fc4	e2831e12	 add         r1, r3, #0x12, 28
  03fc8	e51b3158	 ldr         r3, [r11, #-0x158]
  03fcc	e2832010	 add         r2, r3, #0x10
  03fd0	e5913000	 ldr         r3, [r1]
  03fd4	e5823000	 str         r3, [r2]

; 1609 :                     pSettings->dwResizePercentH = m_dwTvOut_Resize_H;

  03fd8	e59b3000	 ldr         r3, [r11]
  03fdc	e2831f49	 add         r1, r3, #0x49, 30
  03fe0	e51b3158	 ldr         r3, [r11, #-0x158]
  03fe4	e2832014	 add         r2, r3, #0x14
  03fe8	e5913000	 ldr         r3, [r1]
  03fec	e5823000	 str         r3, [r2]

; 1610 :                     pSettings->lOffsetW         = m_lTvOut_Offset_W;

  03ff0	e59b3000	 ldr         r3, [r11]
  03ff4	e2831f4a	 add         r1, r3, #0x4A, 30
  03ff8	e51b3158	 ldr         r3, [r11, #-0x158]
  03ffc	e2832018	 add         r2, r3, #0x18
  04000	e5913000	 ldr         r3, [r1]
  04004	e5823000	 str         r3, [r2]

; 1611 :                     pSettings->lOffsetH         = m_lTvOut_Offset_H;

  04008	e59b3000	 ldr         r3, [r11]
  0400c	e2831f4b	 add         r1, r3, #0x4B, 30
  04010	e51b3158	 ldr         r3, [r11, #-0x158]
  04014	e283201c	 add         r2, r3, #0x1C
  04018	e5913000	 ldr         r3, [r1]
  0401c	e5823000	 str         r3, [r2]

; 1612 : 
; 1613 :                     rc = ESC_SUCCESS;

  04020	e3a03001	 mov         r3, #1
  04024	e50b316c	 str         r3, [r11, #-0x16C]
  04028		 |$LN200@DrvEscape|

; 1614 :                 }

  04028	ea000002	 b           |$LN201@DrvEscape|
  0402c		 |$LN196@DrvEscape|

; 1616 :                 {
; 1617 :                     rc = ESC_FAILED;

  0402c	e3e03000	 mvn         r3, #0
  04030	e50b316c	 str         r3, [r11, #-0x16C]
  04034	eaffffff	 b           |$LN201@DrvEscape|
  04038		 |$LN201@DrvEscape|
  04038		 |$LN62@DrvEscape|

; 1618 :                 }
; 1619 :             }
; 1620 :             break;

  04038	ea00031a	 b           |$LN111@DrvEscape|
  0403c		 |$LN60@DrvEscape|

; 1621 : 
; 1622 :         case DRVESC_TVOUT_SETSETTINGS:
; 1623 :             DEBUGMSG(GPE_ZONE_HW, (L"OMAPDDGPE::DrvEscape: DRVESC_TVOUT_SETSETTINGS\r\n"));

  0403c	e59f3cd4	 ldr         r3, [pc, #0xCD4]
  04040	e5933440	 ldr         r3, [r3, #0x440]
  04044	e3130b02	 tst         r3, #2, 22
  04048	0a000004	 beq         |$LN135@DrvEscape|
  0404c	e59f0cfc	 ldr         r0, [pc, #0xCFC]
  04050	eb000000	 bl          NKDbgPrintfW
  04054	e3a03001	 mov         r3, #1
  04058	e50b309c	 str         r3, [r11, #-0x9C]
  0405c	ea000001	 b           |$LN136@DrvEscape|
  04060		 |$LN135@DrvEscape|
  04060	e3a03000	 mov         r3, #0
  04064	e50b309c	 str         r3, [r11, #-0x9C]
  04068		 |$LN136@DrvEscape|

; 1624 :             if (pvIn != NULL && cjIn == sizeof(DRVESC_TVOUT_SETTINGS))

  04068	e59b3010	 ldr         r3, [r11, #0x10]
  0406c	e3530000	 cmp         r3, #0
  04070	0a000106	 beq         |$LN59@DrvEscape|
  04074	e59b300c	 ldr         r3, [r11, #0xC]
  04078	e3530020	 cmp         r3, #0x20
  0407c	1a000103	 bne         |$LN59@DrvEscape|
  04080		 |$LN206@DrvEscape|

; 1625 :             {
; 1626 :                 __try
; 1627 :                 {
; 1628 :                     DRVESC_TVOUT_SETTINGS* pSettings = (DRVESC_TVOUT_SETTINGS*) pvIn;

  04080	e59b3010	 ldr         r3, [r11, #0x10]
  04084	e50b3154	 str         r3, [r11, #-0x154]

; 1629 : 
; 1630 :                     //  Validate the settings
; 1631 :                     pSettings->bEnable          = (pSettings->bEnable == 0) ? FALSE : TRUE;

  04088	e51b3154	 ldr         r3, [r11, #-0x154]
  0408c	e5933000	 ldr         r3, [r3]
  04090	e3530000	 cmp         r3, #0
  04094	1a000002	 bne         |$LN137@DrvEscape|
  04098	e3a03000	 mov         r3, #0
  0409c	e50b3098	 str         r3, [r11, #-0x98]
  040a0	ea000001	 b           |$LN138@DrvEscape|
  040a4		 |$LN137@DrvEscape|
  040a4	e3a03001	 mov         r3, #1
  040a8	e50b3098	 str         r3, [r11, #-0x98]
  040ac		 |$LN138@DrvEscape|
  040ac	e51b2098	 ldr         r2, [r11, #-0x98]
  040b0	e51b3154	 ldr         r3, [r11, #-0x154]
  040b4	e5832000	 str         r2, [r3]

; 1632 :                     
; 1633 :                     pSettings->dwFilterLevel = (pSettings->dwFilterLevel <= TVOUT_SETTINGS_MAX_FILTER) ? pSettings->dwFilterLevel : TVOUT_SETTINGS_MAX_FILTER;

  040b8	e51b3154	 ldr         r3, [r11, #-0x154]
  040bc	e2833004	 add         r3, r3, #4
  040c0	e5933000	 ldr         r3, [r3]
  040c4	e3530000	 cmp         r3, #0
  040c8	8a000004	 bhi         |$LN139@DrvEscape|
  040cc	e51b3154	 ldr         r3, [r11, #-0x154]
  040d0	e2833004	 add         r3, r3, #4
  040d4	e5933000	 ldr         r3, [r3]
  040d8	e50b3094	 str         r3, [r11, #-0x94]
  040dc	ea000001	 b           |$LN140@DrvEscape|
  040e0		 |$LN139@DrvEscape|
  040e0	e3a03000	 mov         r3, #0
  040e4	e50b3094	 str         r3, [r11, #-0x94]
  040e8		 |$LN140@DrvEscape|
  040e8	e51b3154	 ldr         r3, [r11, #-0x154]
  040ec	e2832004	 add         r2, r3, #4
  040f0	e51b3094	 ldr         r3, [r11, #-0x94]
  040f4	e5823000	 str         r3, [r2]

; 1634 :                     pSettings->dwFilterLevel = (pSettings->dwFilterLevel >= TVOUT_SETTINGS_MIN_FILTER) ? pSettings->dwFilterLevel : TVOUT_SETTINGS_MIN_FILTER;

  040f8	e51b3154	 ldr         r3, [r11, #-0x154]
  040fc	e2833004	 add         r3, r3, #4
  04100	e5933000	 ldr         r3, [r3]
  04104	e3530000	 cmp         r3, #0
  04108	3a000004	 bcc         |$LN141@DrvEscape|
  0410c	e51b3154	 ldr         r3, [r11, #-0x154]
  04110	e2833004	 add         r3, r3, #4
  04114	e5933000	 ldr         r3, [r3]
  04118	e50b3090	 str         r3, [r11, #-0x90]
  0411c	ea000001	 b           |$LN142@DrvEscape|
  04120		 |$LN141@DrvEscape|
  04120	e3a03000	 mov         r3, #0
  04124	e50b3090	 str         r3, [r11, #-0x90]
  04128		 |$LN142@DrvEscape|
  04128	e51b3154	 ldr         r3, [r11, #-0x154]
  0412c	e2832004	 add         r2, r3, #4
  04130	e51b3090	 ldr         r3, [r11, #-0x90]
  04134	e5823000	 str         r3, [r2]

; 1635 :                     
; 1636 :                     if( (pSettings->dwAspectRatioW >= pSettings->dwAspectRatioH) && (pSettings->dwAspectRatioW - pSettings->dwAspectRatioH < TVOUT_SETTINGS_DIFF_ASPECT) )

  04138	e51b3154	 ldr         r3, [r11, #-0x154]
  0413c	e2832008	 add         r2, r3, #8
  04140	e51b3154	 ldr         r3, [r11, #-0x154]
  04144	e283300c	 add         r3, r3, #0xC
  04148	e5922000	 ldr         r2, [r2]
  0414c	e5933000	 ldr         r3, [r3]
  04150	e1520003	 cmp         r2, r3
  04154	3a000049	 bcc         |$LN57@DrvEscape|
  04158	e51b3154	 ldr         r3, [r11, #-0x154]
  0415c	e2832008	 add         r2, r3, #8
  04160	e51b3154	 ldr         r3, [r11, #-0x154]
  04164	e283300c	 add         r3, r3, #0xC
  04168	e5922000	 ldr         r2, [r2]
  0416c	e5933000	 ldr         r3, [r3]
  04170	e0423003	 sub         r3, r2, r3
  04174	e3530008	 cmp         r3, #8
  04178	2a000040	 bcs         |$LN57@DrvEscape|

; 1637 :                     {
; 1638 :                         pSettings->dwAspectRatioW   = (pSettings->dwAspectRatioW <= TVOUT_SETTINGS_MAX_ASPECT) ? pSettings->dwAspectRatioW : TVOUT_SETTINGS_MAX_ASPECT;

  0417c	e51b3154	 ldr         r3, [r11, #-0x154]
  04180	e2833008	 add         r3, r3, #8
  04184	e5933000	 ldr         r3, [r3]
  04188	e3530014	 cmp         r3, #0x14
  0418c	8a000004	 bhi         |$LN143@DrvEscape|
  04190	e51b3154	 ldr         r3, [r11, #-0x154]
  04194	e2833008	 add         r3, r3, #8
  04198	e5933000	 ldr         r3, [r3]
  0419c	e50b308c	 str         r3, [r11, #-0x8C]
  041a0	ea000001	 b           |$LN144@DrvEscape|
  041a4		 |$LN143@DrvEscape|
  041a4	e3a03014	 mov         r3, #0x14
  041a8	e50b308c	 str         r3, [r11, #-0x8C]
  041ac		 |$LN144@DrvEscape|
  041ac	e51b3154	 ldr         r3, [r11, #-0x154]
  041b0	e2832008	 add         r2, r3, #8
  041b4	e51b308c	 ldr         r3, [r11, #-0x8C]
  041b8	e5823000	 str         r3, [r2]

; 1639 :                         pSettings->dwAspectRatioW   = (pSettings->dwAspectRatioW >= TVOUT_SETTINGS_MIN_ASPECT) ? pSettings->dwAspectRatioW : TVOUT_SETTINGS_MIN_ASPECT;

  041bc	e51b3154	 ldr         r3, [r11, #-0x154]
  041c0	e2833008	 add         r3, r3, #8
  041c4	e5933000	 ldr         r3, [r3]
  041c8	e3530001	 cmp         r3, #1
  041cc	3a000004	 bcc         |$LN145@DrvEscape|
  041d0	e51b3154	 ldr         r3, [r11, #-0x154]
  041d4	e2833008	 add         r3, r3, #8
  041d8	e5933000	 ldr         r3, [r3]
  041dc	e50b3088	 str         r3, [r11, #-0x88]
  041e0	ea000001	 b           |$LN146@DrvEscape|
  041e4		 |$LN145@DrvEscape|
  041e4	e3a03001	 mov         r3, #1
  041e8	e50b3088	 str         r3, [r11, #-0x88]
  041ec		 |$LN146@DrvEscape|
  041ec	e51b3154	 ldr         r3, [r11, #-0x154]
  041f0	e2832008	 add         r2, r3, #8
  041f4	e51b3088	 ldr         r3, [r11, #-0x88]
  041f8	e5823000	 str         r3, [r2]

; 1640 :                         pSettings->dwAspectRatioH   = (pSettings->dwAspectRatioH <= TVOUT_SETTINGS_MAX_ASPECT) ? pSettings->dwAspectRatioH : TVOUT_SETTINGS_MAX_ASPECT;

  041fc	e51b3154	 ldr         r3, [r11, #-0x154]
  04200	e283300c	 add         r3, r3, #0xC
  04204	e5933000	 ldr         r3, [r3]
  04208	e3530014	 cmp         r3, #0x14
  0420c	8a000004	 bhi         |$LN147@DrvEscape|
  04210	e51b3154	 ldr         r3, [r11, #-0x154]
  04214	e283300c	 add         r3, r3, #0xC
  04218	e5933000	 ldr         r3, [r3]
  0421c	e50b3084	 str         r3, [r11, #-0x84]
  04220	ea000001	 b           |$LN148@DrvEscape|
  04224		 |$LN147@DrvEscape|
  04224	e3a03014	 mov         r3, #0x14
  04228	e50b3084	 str         r3, [r11, #-0x84]
  0422c		 |$LN148@DrvEscape|
  0422c	e51b3154	 ldr         r3, [r11, #-0x154]
  04230	e283200c	 add         r2, r3, #0xC
  04234	e51b3084	 ldr         r3, [r11, #-0x84]
  04238	e5823000	 str         r3, [r2]

; 1641 :                         pSettings->dwAspectRatioH   = (pSettings->dwAspectRatioH >= TVOUT_SETTINGS_MIN_ASPECT) ? pSettings->dwAspectRatioH : TVOUT_SETTINGS_MIN_ASPECT;

  0423c	e51b3154	 ldr         r3, [r11, #-0x154]
  04240	e283300c	 add         r3, r3, #0xC
  04244	e5933000	 ldr         r3, [r3]
  04248	e3530001	 cmp         r3, #1
  0424c	3a000004	 bcc         |$LN149@DrvEscape|
  04250	e51b3154	 ldr         r3, [r11, #-0x154]
  04254	e283300c	 add         r3, r3, #0xC
  04258	e5933000	 ldr         r3, [r3]
  0425c	e50b3080	 str         r3, [r11, #-0x80]
  04260	ea000001	 b           |$LN150@DrvEscape|
  04264		 |$LN149@DrvEscape|
  04264	e3a03001	 mov         r3, #1
  04268	e50b3080	 str         r3, [r11, #-0x80]
  0426c		 |$LN150@DrvEscape|
  0426c	e51b3154	 ldr         r3, [r11, #-0x154]
  04270	e283200c	 add         r2, r3, #0xC
  04274	e51b3080	 ldr         r3, [r11, #-0x80]
  04278	e5823000	 str         r3, [r2]

; 1642 :                     }
; 1643 :                     else

  0427c	ea00000b	 b           |$LN56@DrvEscape|
  04280		 |$LN57@DrvEscape|

; 1644 :                     {
; 1645 :                         //  Don't change aspect ratio - out of tolerances
; 1646 :                         pSettings->dwAspectRatioW = m_dwTvOut_AspectRatio_W;

  04280	e59b3000	 ldr         r3, [r11]
  04284	e2831f46	 add         r1, r3, #0x46, 30
  04288	e51b3154	 ldr         r3, [r11, #-0x154]
  0428c	e2832008	 add         r2, r3, #8
  04290	e5913000	 ldr         r3, [r1]
  04294	e5823000	 str         r3, [r2]

; 1647 :                         pSettings->dwAspectRatioH = m_dwTvOut_AspectRatio_H;

  04298	e59b3000	 ldr         r3, [r11]
  0429c	e2831f47	 add         r1, r3, #0x47, 30
  042a0	e51b3154	 ldr         r3, [r11, #-0x154]
  042a4	e283200c	 add         r2, r3, #0xC
  042a8	e5913000	 ldr         r3, [r1]
  042ac	e5823000	 str         r3, [r2]
  042b0		 |$LN56@DrvEscape|

; 1648 :                     }
; 1649 :                     
; 1650 :                     pSettings->dwResizePercentW = (pSettings->dwResizePercentW <= TVOUT_SETTINGS_MAX_RESIZE) ? pSettings->dwResizePercentW : TVOUT_SETTINGS_MAX_RESIZE;

  042b0	e51b3154	 ldr         r3, [r11, #-0x154]
  042b4	e2833010	 add         r3, r3, #0x10
  042b8	e5933000	 ldr         r3, [r3]
  042bc	e3530064	 cmp         r3, #0x64
  042c0	8a000004	 bhi         |$LN151@DrvEscape|
  042c4	e51b3154	 ldr         r3, [r11, #-0x154]
  042c8	e2833010	 add         r3, r3, #0x10
  042cc	e5933000	 ldr         r3, [r3]
  042d0	e50b307c	 str         r3, [r11, #-0x7C]
  042d4	ea000001	 b           |$LN152@DrvEscape|
  042d8		 |$LN151@DrvEscape|
  042d8	e3a03064	 mov         r3, #0x64
  042dc	e50b307c	 str         r3, [r11, #-0x7C]
  042e0		 |$LN152@DrvEscape|
  042e0	e51b3154	 ldr         r3, [r11, #-0x154]
  042e4	e2832010	 add         r2, r3, #0x10
  042e8	e51b307c	 ldr         r3, [r11, #-0x7C]
  042ec	e5823000	 str         r3, [r2]

; 1651 :                     pSettings->dwResizePercentW = (pSettings->dwResizePercentW >= TVOUT_SETTINGS_MIN_RESIZE) ? pSettings->dwResizePercentW : TVOUT_SETTINGS_MIN_RESIZE;

  042f0	e51b3154	 ldr         r3, [r11, #-0x154]
  042f4	e2833010	 add         r3, r3, #0x10
  042f8	e5933000	 ldr         r3, [r3]
  042fc	e3530050	 cmp         r3, #0x50
  04300	3a000004	 bcc         |$LN153@DrvEscape|
  04304	e51b3154	 ldr         r3, [r11, #-0x154]
  04308	e2833010	 add         r3, r3, #0x10
  0430c	e5933000	 ldr         r3, [r3]
  04310	e50b3078	 str         r3, [r11, #-0x78]
  04314	ea000001	 b           |$LN154@DrvEscape|
  04318		 |$LN153@DrvEscape|
  04318	e3a03050	 mov         r3, #0x50
  0431c	e50b3078	 str         r3, [r11, #-0x78]
  04320		 |$LN154@DrvEscape|
  04320	e51b3154	 ldr         r3, [r11, #-0x154]
  04324	e2832010	 add         r2, r3, #0x10
  04328	e51b3078	 ldr         r3, [r11, #-0x78]
  0432c	e5823000	 str         r3, [r2]

; 1652 :                     pSettings->dwResizePercentH = (pSettings->dwResizePercentH <= TVOUT_SETTINGS_MAX_RESIZE) ? pSettings->dwResizePercentH : TVOUT_SETTINGS_MAX_RESIZE;

  04330	e51b3154	 ldr         r3, [r11, #-0x154]
  04334	e2833014	 add         r3, r3, #0x14
  04338	e5933000	 ldr         r3, [r3]
  0433c	e3530064	 cmp         r3, #0x64
  04340	8a000004	 bhi         |$LN155@DrvEscape|
  04344	e51b3154	 ldr         r3, [r11, #-0x154]
  04348	e2833014	 add         r3, r3, #0x14
  0434c	e5933000	 ldr         r3, [r3]
  04350	e50b3074	 str         r3, [r11, #-0x74]
  04354	ea000001	 b           |$LN156@DrvEscape|
  04358		 |$LN155@DrvEscape|
  04358	e3a03064	 mov         r3, #0x64
  0435c	e50b3074	 str         r3, [r11, #-0x74]
  04360		 |$LN156@DrvEscape|
  04360	e51b3154	 ldr         r3, [r11, #-0x154]
  04364	e2832014	 add         r2, r3, #0x14
  04368	e51b3074	 ldr         r3, [r11, #-0x74]
  0436c	e5823000	 str         r3, [r2]

; 1653 :                     pSettings->dwResizePercentH = (pSettings->dwResizePercentH >= TVOUT_SETTINGS_MIN_RESIZE) ? pSettings->dwResizePercentH : TVOUT_SETTINGS_MIN_RESIZE;                

  04370	e51b3154	 ldr         r3, [r11, #-0x154]
  04374	e2833014	 add         r3, r3, #0x14
  04378	e5933000	 ldr         r3, [r3]
  0437c	e3530050	 cmp         r3, #0x50
  04380	3a000004	 bcc         |$LN157@DrvEscape|
  04384	e51b3154	 ldr         r3, [r11, #-0x154]
  04388	e2833014	 add         r3, r3, #0x14
  0438c	e5933000	 ldr         r3, [r3]
  04390	e50b3070	 str         r3, [r11, #-0x70]
  04394	ea000001	 b           |$LN158@DrvEscape|
  04398		 |$LN157@DrvEscape|
  04398	e3a03050	 mov         r3, #0x50
  0439c	e50b3070	 str         r3, [r11, #-0x70]
  043a0		 |$LN158@DrvEscape|
  043a0	e51b3154	 ldr         r3, [r11, #-0x154]
  043a4	e2832014	 add         r2, r3, #0x14
  043a8	e51b3070	 ldr         r3, [r11, #-0x70]
  043ac	e5823000	 str         r3, [r2]

; 1654 : 
; 1655 :                     //  Save the settings
; 1656 :                     m_bTVOutEnable          = pSettings->bEnable;

  043b0	e59b3000	 ldr         r3, [r11]
  043b4	e2832e11	 add         r2, r3, #0x11, 28
  043b8	e51b3154	 ldr         r3, [r11, #-0x154]
  043bc	e5933000	 ldr         r3, [r3]
  043c0	e5823000	 str         r3, [r2]

; 1657 :                     m_dwTvOut_FilterLevel   = pSettings->dwFilterLevel;

  043c4	e51b3154	 ldr         r3, [r11, #-0x154]
  043c8	e2831004	 add         r1, r3, #4
  043cc	e59b3000	 ldr         r3, [r11]
  043d0	e2832f45	 add         r2, r3, #0x45, 30
  043d4	e5913000	 ldr         r3, [r1]
  043d8	e5823000	 str         r3, [r2]

; 1658 :                     m_dwTvOut_AspectRatio_W = pSettings->dwAspectRatioW;

  043dc	e51b3154	 ldr         r3, [r11, #-0x154]
  043e0	e2831008	 add         r1, r3, #8
  043e4	e59b3000	 ldr         r3, [r11]
  043e8	e2832f46	 add         r2, r3, #0x46, 30
  043ec	e5913000	 ldr         r3, [r1]
  043f0	e5823000	 str         r3, [r2]

; 1659 :                     m_dwTvOut_AspectRatio_H = pSettings->dwAspectRatioH;

  043f4	e51b3154	 ldr         r3, [r11, #-0x154]
  043f8	e283100c	 add         r1, r3, #0xC
  043fc	e59b3000	 ldr         r3, [r11]
  04400	e2832f47	 add         r2, r3, #0x47, 30
  04404	e5913000	 ldr         r3, [r1]
  04408	e5823000	 str         r3, [r2]

; 1660 :                     m_dwTvOut_Resize_W      = pSettings->dwResizePercentW;

  0440c	e51b3154	 ldr         r3, [r11, #-0x154]
  04410	e2831010	 add         r1, r3, #0x10
  04414	e59b3000	 ldr         r3, [r11]
  04418	e2832e12	 add         r2, r3, #0x12, 28
  0441c	e5913000	 ldr         r3, [r1]
  04420	e5823000	 str         r3, [r2]

; 1661 :                     m_dwTvOut_Resize_H      = pSettings->dwResizePercentH;

  04424	e51b3154	 ldr         r3, [r11, #-0x154]
  04428	e2831014	 add         r1, r3, #0x14
  0442c	e59b3000	 ldr         r3, [r11]
  04430	e2832f49	 add         r2, r3, #0x49, 30
  04434	e5913000	 ldr         r3, [r1]
  04438	e5823000	 str         r3, [r2]

; 1662 :                     m_lTvOut_Offset_W       = pSettings->lOffsetW;

  0443c	e51b3154	 ldr         r3, [r11, #-0x154]
  04440	e2831018	 add         r1, r3, #0x18
  04444	e59b3000	 ldr         r3, [r11]
  04448	e2832f4a	 add         r2, r3, #0x4A, 30
  0444c	e5913000	 ldr         r3, [r1]
  04450	e5823000	 str         r3, [r2]

; 1663 :                     m_lTvOut_Offset_H       = pSettings->lOffsetH;

  04454	e51b3154	 ldr         r3, [r11, #-0x154]
  04458	e283101c	 add         r1, r3, #0x1C
  0445c	e59b3000	 ldr         r3, [r11]
  04460	e2832f4b	 add         r2, r3, #0x4B, 30
  04464	e5913000	 ldr         r3, [r1]
  04468	e5823000	 str         r3, [r2]

; 1664 : 
; 1665 :                     //  Configure TV out based on the new settings
; 1666 :                     DetermineTvOutSurface(TRUE);

  0446c	e3a01001	 mov         r1, #1
  04470	e59b0000	 ldr         r0, [r11]
  04474	eb000000	 bl          |?DetermineTvOutSurface@OMAPDDGPE@@QAAXH@Z|

; 1667 :                     rc = ESC_SUCCESS;

  04478	e3a03001	 mov         r3, #1
  0447c	e50b316c	 str         r3, [r11, #-0x16C]
  04480		 |$LN207@DrvEscape|

; 1668 :                 }

  04480	ea000002	 b           |$LN208@DrvEscape|
  04484		 |$LN203@DrvEscape|

; 1670 :                 {
; 1671 :                     rc = ESC_FAILED;

  04484	e3e03000	 mvn         r3, #0
  04488	e50b316c	 str         r3, [r11, #-0x16C]
  0448c	eaffffff	 b           |$LN208@DrvEscape|
  04490		 |$LN208@DrvEscape|
  04490		 |$LN59@DrvEscape|

; 1672 :                 }
; 1673 :             }
; 1674 :             break;

  04490	ea000204	 b           |$LN111@DrvEscape|
  04494		 |$LN55@DrvEscape|

; 1675 : 
; 1676 :         case DRVESC_DVI_ENABLE:
; 1677 :             //  Enable DVI
; 1678 :             DEBUGMSG(GPE_ZONE_HW, (L"OMAPDDGPE::DrvEscape: DRVESC_DVI_ENABLE\r\n"));

  04494	e59f387c	 ldr         r3, [pc, #0x87C]
  04498	e5933440	 ldr         r3, [r3, #0x440]
  0449c	e3130b02	 tst         r3, #2, 22
  044a0	0a000004	 beq         |$LN159@DrvEscape|
  044a4	e59f08a0	 ldr         r0, [pc, #0x8A0]
  044a8	eb000000	 bl          NKDbgPrintfW
  044ac	e3a03001	 mov         r3, #1
  044b0	e50b306c	 str         r3, [r11, #-0x6C]
  044b4	ea000001	 b           |$LN160@DrvEscape|
  044b8		 |$LN159@DrvEscape|
  044b8	e3a03000	 mov         r3, #0
  044bc	e50b306c	 str         r3, [r11, #-0x6C]
  044c0		 |$LN160@DrvEscape|

; 1679 :             if( !m_bDVIEnable )

  044c0	e59b3000	 ldr         r3, [r11]
  044c4	e2833e13	 add         r3, r3, #0x13, 28
  044c8	e5933000	 ldr         r3, [r3]
  044cc	e3530000	 cmp         r3, #0
  044d0	1a00000c	 bne         |$LN54@DrvEscape|

; 1680 :             {
; 1681 :                 if( m_pDisplayContr->EnableDVI(TRUE) )

  044d4	e3a01001	 mov         r1, #1
  044d8	e59b3000	 ldr         r3, [r11]
  044dc	e28330b0	 add         r3, r3, #0xB0
  044e0	e5930000	 ldr         r0, [r3]
  044e4	eb000000	 bl          |?EnableDVI@OMAPDisplayController@@QAAHH@Z|
  044e8	e50b0068	 str         r0, [r11, #-0x68]
  044ec	e51b3068	 ldr         r3, [r11, #-0x68]
  044f0	e3530000	 cmp         r3, #0
  044f4	0a000003	 beq         |$LN53@DrvEscape|

; 1682 :                 {
; 1683 :                     m_bDVIEnable = TRUE;

  044f8	e59b3000	 ldr         r3, [r11]
  044fc	e2832e13	 add         r2, r3, #0x13, 28
  04500	e3a03001	 mov         r3, #1
  04504	e5823000	 str         r3, [r2]
  04508		 |$LN53@DrvEscape|
  04508		 |$LN54@DrvEscape|

; 1684 :                 }
; 1685 :             }
; 1686 : 
; 1687 :             //  Always return success
; 1688 :             rc = ESC_SUCCESS;

  04508	e3a03001	 mov         r3, #1
  0450c	e50b316c	 str         r3, [r11, #-0x16C]

; 1689 :             break;            

  04510	ea0001e4	 b           |$LN111@DrvEscape|
  04514		 |$LN52@DrvEscape|

; 1690 :             
; 1691 :         case DRVESC_DVI_DISABLE:
; 1692 :             //  Disable DVI
; 1693 :             DEBUGMSG(GPE_ZONE_HW, (L"OMAPDDGPE::DrvEscape: DRVESC_DVI_DISABLE\r\n"));

  04514	e59f37fc	 ldr         r3, [pc, #0x7FC]
  04518	e5933440	 ldr         r3, [r3, #0x440]
  0451c	e3130b02	 tst         r3, #2, 22
  04520	0a000004	 beq         |$LN161@DrvEscape|
  04524	e59f081c	 ldr         r0, [pc, #0x81C]
  04528	eb000000	 bl          NKDbgPrintfW
  0452c	e3a03001	 mov         r3, #1
  04530	e50b3064	 str         r3, [r11, #-0x64]
  04534	ea000001	 b           |$LN162@DrvEscape|
  04538		 |$LN161@DrvEscape|
  04538	e3a03000	 mov         r3, #0
  0453c	e50b3064	 str         r3, [r11, #-0x64]
  04540		 |$LN162@DrvEscape|

; 1694 :             if( m_bDVIEnable )

  04540	e59b3000	 ldr         r3, [r11]
  04544	e2833e13	 add         r3, r3, #0x13, 28
  04548	e5933000	 ldr         r3, [r3]
  0454c	e3530000	 cmp         r3, #0
  04550	0a00000c	 beq         |$LN51@DrvEscape|

; 1695 :             {
; 1696 :                 if( m_pDisplayContr->EnableDVI(FALSE) )

  04554	e3a01000	 mov         r1, #0
  04558	e59b3000	 ldr         r3, [r11]
  0455c	e28330b0	 add         r3, r3, #0xB0
  04560	e5930000	 ldr         r0, [r3]
  04564	eb000000	 bl          |?EnableDVI@OMAPDisplayController@@QAAHH@Z|
  04568	e50b0060	 str         r0, [r11, #-0x60]
  0456c	e51b3060	 ldr         r3, [r11, #-0x60]
  04570	e3530000	 cmp         r3, #0
  04574	0a000003	 beq         |$LN50@DrvEscape|

; 1697 :                 {
; 1698 :                     m_bDVIEnable = FALSE;

  04578	e59b3000	 ldr         r3, [r11]
  0457c	e2832e13	 add         r2, r3, #0x13, 28
  04580	e3a03000	 mov         r3, #0
  04584	e5823000	 str         r3, [r2]
  04588		 |$LN50@DrvEscape|
  04588		 |$LN51@DrvEscape|

; 1699 :                 }
; 1700 :             }
; 1701 : 
; 1702 :             //  Always return success
; 1703 :             rc = ESC_SUCCESS;

  04588	e3a03001	 mov         r3, #1
  0458c	e50b316c	 str         r3, [r11, #-0x16C]

; 1704 :             break;

  04590	ea0001c4	 b           |$LN111@DrvEscape|
  04594		 |$LN49@DrvEscape|

; 1705 : 
; 1706 :         case DRVESC_HDMI_ENABLE:
; 1707 :             //  Enable HDMI output
; 1708 :             DEBUGMSG(GPE_ZONE_HW, (L"OMAPDDGPE::DrvEscape: DRVESC_HDMI_ENABLE\r\n"));

  04594	e59f377c	 ldr         r3, [pc, #0x77C]
  04598	e5933440	 ldr         r3, [r3, #0x440]
  0459c	e3130b02	 tst         r3, #2, 22
  045a0	0a000004	 beq         |$LN163@DrvEscape|
  045a4	e59f0798	 ldr         r0, [pc, #0x798]
  045a8	eb000000	 bl          NKDbgPrintfW
  045ac	e3a03001	 mov         r3, #1
  045b0	e50b305c	 str         r3, [r11, #-0x5C]
  045b4	ea000001	 b           |$LN164@DrvEscape|
  045b8		 |$LN163@DrvEscape|
  045b8	e3a03000	 mov         r3, #0
  045bc	e50b305c	 str         r3, [r11, #-0x5C]
  045c0		 |$LN164@DrvEscape|

; 1709 :             if( !m_bHdmiEnable )

  045c0	e59b3000	 ldr         r3, [r11]
  045c4	e2833f51	 add         r3, r3, #0x51, 30
  045c8	e5933000	 ldr         r3, [r3]
  045cc	e3530000	 cmp         r3, #0
  045d0	1a00000c	 bne         |$LN48@DrvEscape|

; 1710 :             {
; 1711 :                 if( m_pDisplayContr->EnableHdmi(TRUE) )

  045d4	e3a01001	 mov         r1, #1
  045d8	e59b3000	 ldr         r3, [r11]
  045dc	e28330b0	 add         r3, r3, #0xB0
  045e0	e5930000	 ldr         r0, [r3]
  045e4	eb000000	 bl          |?EnableHdmi@OMAPDisplayController@@QAAHH@Z|
  045e8	e50b0058	 str         r0, [r11, #-0x58]
  045ec	e51b3058	 ldr         r3, [r11, #-0x58]
  045f0	e3530000	 cmp         r3, #0
  045f4	0a000003	 beq         |$LN47@DrvEscape|

; 1712 :                 {
; 1713 :                     m_bHdmiEnable = TRUE;

  045f8	e59b3000	 ldr         r3, [r11]
  045fc	e2832f51	 add         r2, r3, #0x51, 30
  04600	e3a03001	 mov         r3, #1
  04604	e5823000	 str         r3, [r2]
  04608		 |$LN47@DrvEscape|
  04608		 |$LN48@DrvEscape|

; 1714 :                 }
; 1715 :             }
; 1716 : 
; 1717 :             //  Always return success
; 1718 :             rc = ESC_SUCCESS;

  04608	e3a03001	 mov         r3, #1
  0460c	e50b316c	 str         r3, [r11, #-0x16C]

; 1719 :             break;            

  04610	ea0001a4	 b           |$LN111@DrvEscape|
  04614		 |$LN46@DrvEscape|

; 1720 :             
; 1721 :         case DRVESC_HDMI_DISABLE:
; 1722 :             //  Disable HDMI output
; 1723 :             DEBUGMSG(GPE_ZONE_HW, (L"OMAPDDGPE::DrvEscape: DRVESC_HDMI_DISABLE\r\n"));

  04614	e59f36fc	 ldr         r3, [pc, #0x6FC]
  04618	e5933440	 ldr         r3, [r3, #0x440]
  0461c	e3130b02	 tst         r3, #2, 22
  04620	0a000004	 beq         |$LN165@DrvEscape|
  04624	e59f0714	 ldr         r0, [pc, #0x714]
  04628	eb000000	 bl          NKDbgPrintfW
  0462c	e3a03001	 mov         r3, #1
  04630	e50b3054	 str         r3, [r11, #-0x54]
  04634	ea000001	 b           |$LN166@DrvEscape|
  04638		 |$LN165@DrvEscape|
  04638	e3a03000	 mov         r3, #0
  0463c	e50b3054	 str         r3, [r11, #-0x54]
  04640		 |$LN166@DrvEscape|

; 1724 :             if( m_bHdmiEnable )

  04640	e59b3000	 ldr         r3, [r11]
  04644	e2833f51	 add         r3, r3, #0x51, 30
  04648	e5933000	 ldr         r3, [r3]
  0464c	e3530000	 cmp         r3, #0
  04650	0a00000c	 beq         |$LN45@DrvEscape|

; 1725 :             {
; 1726 :                 if( m_pDisplayContr->EnableHdmi(FALSE) )

  04654	e3a01000	 mov         r1, #0
  04658	e59b3000	 ldr         r3, [r11]
  0465c	e28330b0	 add         r3, r3, #0xB0
  04660	e5930000	 ldr         r0, [r3]
  04664	eb000000	 bl          |?EnableHdmi@OMAPDisplayController@@QAAHH@Z|
  04668	e50b0050	 str         r0, [r11, #-0x50]
  0466c	e51b3050	 ldr         r3, [r11, #-0x50]
  04670	e3530000	 cmp         r3, #0
  04674	0a000003	 beq         |$LN44@DrvEscape|

; 1727 :                 {
; 1728 :                     m_bHdmiEnable = FALSE;

  04678	e59b3000	 ldr         r3, [r11]
  0467c	e2832f51	 add         r2, r3, #0x51, 30
  04680	e3a03000	 mov         r3, #0
  04684	e5823000	 str         r3, [r2]
  04688		 |$LN44@DrvEscape|
  04688		 |$LN45@DrvEscape|

; 1729 :                 }
; 1730 :             }
; 1731 : 
; 1732 :             //  Always return success
; 1733 :             rc = ESC_SUCCESS;

  04688	e3a03001	 mov         r3, #1
  0468c	e50b316c	 str         r3, [r11, #-0x16C]

; 1734 :             break;            

  04690	ea000184	 b           |$LN111@DrvEscape|
  04694		 |$LN43@DrvEscape|

; 1735 : 
; 1736 :         case GETPOWERMANAGEMENT:
; 1737 :             DEBUGMSG(GPE_ZONE_HW, (L"OMAPDDGPE::DrvEscape: GETPOWERMANAGEMENT\r\n"));

  04694	e59f367c	 ldr         r3, [pc, #0x67C]
  04698	e5933440	 ldr         r3, [r3, #0x440]
  0469c	e3130b02	 tst         r3, #2, 22
  046a0	0a000004	 beq         |$LN167@DrvEscape|
  046a4	e59f0690	 ldr         r0, [pc, #0x690]
  046a8	eb000000	 bl          NKDbgPrintfW
  046ac	e3a03001	 mov         r3, #1
  046b0	e50b304c	 str         r3, [r11, #-0x4C]
  046b4	ea000001	 b           |$LN168@DrvEscape|
  046b8		 |$LN167@DrvEscape|
  046b8	e3a03000	 mov         r3, #0
  046bc	e50b304c	 str         r3, [r11, #-0x4C]
  046c0		 |$LN168@DrvEscape|

; 1738 :             if( (cjOut >= sizeof(VIDEO_POWER_MANAGEMENT)) && (pvOut != NULL) )

  046c0	e59b3014	 ldr         r3, [r11, #0x14]
  046c4	e353000c	 cmp         r3, #0xC
  046c8	3a000035	 bcc         |$LN42@DrvEscape|
  046cc	e59b3018	 ldr         r3, [r11, #0x18]
  046d0	e3530000	 cmp         r3, #0
  046d4	0a000032	 beq         |$LN42@DrvEscape|

; 1739 :             {
; 1740 :                 PVIDEO_POWER_MANAGEMENT pvpm = (PVIDEO_POWER_MANAGEMENT)pvOut;

  046d8	e59b3018	 ldr         r3, [r11, #0x18]
  046dc	e50b3150	 str         r3, [r11, #-0x150]

; 1741 :                 pvpm->Length = sizeof(VIDEO_POWER_MANAGEMENT);

  046e0	e51b2150	 ldr         r2, [r11, #-0x150]
  046e4	e3a0300c	 mov         r3, #0xC
  046e8	e5823000	 str         r3, [r2]

; 1742 :                 pvpm->DPMSVersion = 0;

  046ec	e51b3150	 ldr         r3, [r11, #-0x150]
  046f0	e2832004	 add         r2, r3, #4
  046f4	e3a03000	 mov         r3, #0
  046f8	e5823000	 str         r3, [r2]

; 1743 :                 
; 1744 :                 //  Convert from Dx state to Video PM state
; 1745 :                 switch( m_pDisplayContr->GetPowerLevel() ) 

  046fc	e59b3000	 ldr         r3, [r11]
  04700	e28330b0	 add         r3, r3, #0xB0
  04704	e5930000	 ldr         r0, [r3]
  04708	eb000000	 bl          |?GetPowerLevel@OMAPDisplayController@@QAAKXZ|
  0470c	e50b0048	 str         r0, [r11, #-0x48]
  04710	e51b3048	 ldr         r3, [r11, #-0x48]
  04714	e50b3044	 str         r3, [r11, #-0x44]
  04718	e51b3044	 ldr         r3, [r11, #-0x44]
  0471c	e3530004	 cmp         r3, #4
  04720	8a00001c	 bhi         |$LN40@DrvEscape|
  04724	e51b2044	 ldr         r2, [r11, #-0x44]
  04728	e1a03102	 mov         r3, r2, lsl #2
  0472c	e083300f	 add         r3, r3, pc
  04730	e5933004	 ldr         r3, [r3, #4]
  04734	e08ff003	 add         pc, pc, r3
  04738		 |$LN277@DrvEscape|
  04738		 |$LN276@DrvEscape|
  04738		 |$LN278@DrvEscape|
  04738	00000010	 DCD         0x10
  0473c		 |$LN279@DrvEscape|
  0473c	00000010	 DCD         0x10
  04740		 |$LN280@DrvEscape|
  04740	00000024	 DCD         0x24
  04744		 |$LN281@DrvEscape|
  04744	00000038	 DCD         0x38
  04748		 |$LN282@DrvEscape|
  04748	0000004c	 DCD         0x4c
  0474c		 |$LN39@DrvEscape|

; 1746 :                 {
; 1747 :                     case D0:
; 1748 :                     case D1:
; 1749 :                         pvpm->PowerState = VideoPowerOn;

  0474c	e51b3150	 ldr         r3, [r11, #-0x150]
  04750	e2832008	 add         r2, r3, #8
  04754	e3a03001	 mov         r3, #1
  04758	e5823000	 str         r3, [r2]

; 1750 :                         break;

  0475c	ea00000d	 b           |$LN40@DrvEscape|
  04760		 |$LN38@DrvEscape|

; 1751 :                     case D2:
; 1752 :                         pvpm->PowerState = VideoPowerStandBy;

  04760	e51b3150	 ldr         r3, [r11, #-0x150]
  04764	e2832008	 add         r2, r3, #8
  04768	e3a03002	 mov         r3, #2
  0476c	e5823000	 str         r3, [r2]

; 1753 :                         break;

  04770	ea000008	 b           |$LN40@DrvEscape|
  04774		 |$LN37@DrvEscape|

; 1754 :                     case D3:
; 1755 :                         pvpm->PowerState = VideoPowerSuspend;

  04774	e51b3150	 ldr         r3, [r11, #-0x150]
  04778	e2832008	 add         r2, r3, #8
  0477c	e3a03003	 mov         r3, #3
  04780	e5823000	 str         r3, [r2]

; 1756 :                         break;

  04784	ea000003	 b           |$LN40@DrvEscape|
  04788		 |$LN36@DrvEscape|

; 1757 :                     case D4:                
; 1758 :                         pvpm->PowerState = VideoPowerOff;

  04788	e51b3150	 ldr         r3, [r11, #-0x150]
  0478c	e2832008	 add         r2, r3, #8
  04790	e3a03004	 mov         r3, #4
  04794	e5823000	 str         r3, [r2]
  04798		 |$LN40@DrvEscape|

; 1759 :                         break;
; 1760 :                 }
; 1761 :                 
; 1762 :                 rc = ESC_SUCCESS;

  04798	e3a03001	 mov         r3, #1
  0479c	e50b316c	 str         r3, [r11, #-0x16C]

; 1763 :             }
; 1764 :             else

  047a0	ea000003	 b           |$LN35@DrvEscape|
  047a4		 |$LN42@DrvEscape|

; 1765 :             {
; 1766 :                 SetLastError (ERROR_INVALID_PARAMETER);

  047a4	e3a00057	 mov         r0, #0x57
  047a8	eb000000	 bl          SetLastError

; 1767 :                 rc = ESC_FAILED;

  047ac	e3e03000	 mvn         r3, #0
  047b0	e50b316c	 str         r3, [r11, #-0x16C]
  047b4		 |$LN35@DrvEscape|

; 1768 :             }
; 1769 :             break;

  047b4	ea00013b	 b           |$LN111@DrvEscape|
  047b8		 |$LN34@DrvEscape|

; 1770 : 
; 1771 :         case SETPOWERMANAGEMENT:
; 1772 :             DEBUGMSG(GPE_ZONE_HW, (L"OMAPDDGPE::DrvEscape: SETPOWERMANAGEMENT\r\n"));

  047b8	e59f3558	 ldr         r3, [pc, #0x558]
  047bc	e5933440	 ldr         r3, [r3, #0x440]
  047c0	e3130b02	 tst         r3, #2, 22
  047c4	0a000004	 beq         |$LN169@DrvEscape|
  047c8	e59f0568	 ldr         r0, [pc, #0x568]
  047cc	eb000000	 bl          NKDbgPrintfW
  047d0	e3a03001	 mov         r3, #1
  047d4	e50b3040	 str         r3, [r11, #-0x40]
  047d8	ea000001	 b           |$LN170@DrvEscape|
  047dc		 |$LN169@DrvEscape|
  047dc	e3a03000	 mov         r3, #0
  047e0	e50b3040	 str         r3, [r11, #-0x40]
  047e4		 |$LN170@DrvEscape|

; 1773 :             if( (cjIn >= sizeof(VIDEO_POWER_MANAGEMENT)) && (pvIn != NULL) )

  047e4	e59b300c	 ldr         r3, [r11, #0xC]
  047e8	e353000c	 cmp         r3, #0xC
  047ec	3a000035	 bcc         |$LN33@DrvEscape|
  047f0	e59b3010	 ldr         r3, [r11, #0x10]
  047f4	e3530000	 cmp         r3, #0
  047f8	0a000032	 beq         |$LN33@DrvEscape|

; 1774 :             {
; 1775 :                 PVIDEO_POWER_MANAGEMENT pvpm = (PVIDEO_POWER_MANAGEMENT)pvIn;

  047fc	e59b3010	 ldr         r3, [r11, #0x10]
  04800	e50b314c	 str         r3, [r11, #-0x14C]

; 1776 :                 if (pvpm->Length >= sizeof(VIDEO_POWER_MANAGEMENT) )

  04804	e51b314c	 ldr         r3, [r11, #-0x14C]
  04808	e5933000	 ldr         r3, [r3]
  0480c	e353000c	 cmp         r3, #0xC
  04810	3a00002b	 bcc         |$LN32@DrvEscape|

; 1777 :                 {
; 1778 :                     //  Convert from Video PM state to Dx state
; 1779 :                     switch (pvpm->PowerState) 

  04814	e51b314c	 ldr         r3, [r11, #-0x14C]
  04818	e2833008	 add         r3, r3, #8
  0481c	e5933000	 ldr         r3, [r3]
  04820	e50b303c	 str         r3, [r11, #-0x3C]
  04824	e51b303c	 ldr         r3, [r11, #-0x3C]
  04828	e2433001	 sub         r3, r3, #1
  0482c	e50b303c	 str         r3, [r11, #-0x3C]
  04830	e51b303c	 ldr         r3, [r11, #-0x3C]
  04834	e3530003	 cmp         r3, #3
  04838	8a00001f	 bhi         |$LN30@DrvEscape|
  0483c	e51b203c	 ldr         r2, [r11, #-0x3C]
  04840	e1a03102	 mov         r3, r2, lsl #2
  04844	e083300f	 add         r3, r3, pc
  04848	e5933004	 ldr         r3, [r3, #4]
  0484c	e08ff003	 add         pc, pc, r3
  04850		 |$LN284@DrvEscape|
  04850		 |$LN283@DrvEscape|
  04850		 |$LN285@DrvEscape|
  04850	0000000c	 DCD         0xc
  04854		 |$LN286@DrvEscape|
  04854	00000024	 DCD         0x24
  04858		 |$LN287@DrvEscape|
  04858	0000003c	 DCD         0x3c
  0485c		 |$LN288@DrvEscape|
  0485c	00000054	 DCD         0x54
  04860		 |$LN29@DrvEscape|

; 1780 :                     {
; 1781 :                         case VideoPowerOn:
; 1782 :                             m_pDisplayContr->SetPowerLevel(D0);

  04860	e3a01000	 mov         r1, #0
  04864	e59b3000	 ldr         r3, [r11]
  04868	e28330b0	 add         r3, r3, #0xB0
  0486c	e5930000	 ldr         r0, [r3]
  04870	eb000000	 bl          |?SetPowerLevel@OMAPDisplayController@@QAAHK@Z|

; 1783 :                             break;

  04874	ea000010	 b           |$LN30@DrvEscape|
  04878		 |$LN28@DrvEscape|

; 1784 :                         case VideoPowerStandBy:
; 1785 :                             m_pDisplayContr->SetPowerLevel(D2);

  04878	e3a01002	 mov         r1, #2
  0487c	e59b3000	 ldr         r3, [r11]
  04880	e28330b0	 add         r3, r3, #0xB0
  04884	e5930000	 ldr         r0, [r3]
  04888	eb000000	 bl          |?SetPowerLevel@OMAPDisplayController@@QAAHK@Z|

; 1786 :                             break;

  0488c	ea00000a	 b           |$LN30@DrvEscape|
  04890		 |$LN27@DrvEscape|

; 1787 :                         case VideoPowerSuspend:
; 1788 :                             m_pDisplayContr->SetPowerLevel(D3);

  04890	e3a01003	 mov         r1, #3
  04894	e59b3000	 ldr         r3, [r11]
  04898	e28330b0	 add         r3, r3, #0xB0
  0489c	e5930000	 ldr         r0, [r3]
  048a0	eb000000	 bl          |?SetPowerLevel@OMAPDisplayController@@QAAHK@Z|

; 1789 :                             break;

  048a4	ea000004	 b           |$LN30@DrvEscape|
  048a8		 |$LN26@DrvEscape|

; 1790 :                         case VideoPowerOff:                
; 1791 :                             m_pDisplayContr->SetPowerLevel(D4);

  048a8	e3a01004	 mov         r1, #4
  048ac	e59b3000	 ldr         r3, [r11]
  048b0	e28330b0	 add         r3, r3, #0xB0
  048b4	e5930000	 ldr         r0, [r3]
  048b8	eb000000	 bl          |?SetPowerLevel@OMAPDisplayController@@QAAHK@Z|
  048bc		 |$LN30@DrvEscape|

; 1792 :                             break;
; 1793 :                     }
; 1794 : 
; 1795 :                     rc = ESC_SUCCESS;

  048bc	e3a03001	 mov         r3, #1
  048c0	e50b316c	 str         r3, [r11, #-0x16C]
  048c4		 |$LN32@DrvEscape|

; 1796 :                 }
; 1797 :             }
; 1798 :             else

  048c4	ea000003	 b           |$LN25@DrvEscape|
  048c8		 |$LN33@DrvEscape|

; 1799 :             {
; 1800 :                 SetLastError (ERROR_INVALID_PARAMETER);

  048c8	e3a00057	 mov         r0, #0x57
  048cc	eb000000	 bl          SetLastError

; 1801 :                 rc = ESC_FAILED;

  048d0	e3e03000	 mvn         r3, #0
  048d4	e50b316c	 str         r3, [r11, #-0x16C]
  048d8		 |$LN25@DrvEscape|

; 1802 :             }
; 1803 :             break;

  048d8	ea0000f2	 b           |$LN111@DrvEscape|
  048dc		 |$LN24@DrvEscape|

; 1804 : 
; 1805 :         case IOCTL_POWER_CAPABILITIES:
; 1806 :             DEBUGMSG(GPE_ZONE_HW, (L"OMAPDDGPE::DrvEscape: IOCTL_POWER_CAPABILITIES\r\n"));

  048dc	e59f3434	 ldr         r3, [pc, #0x434]
  048e0	e5933440	 ldr         r3, [r3, #0x440]
  048e4	e3130b02	 tst         r3, #2, 22
  048e8	0a000004	 beq         |$LN171@DrvEscape|
  048ec	e59f0440	 ldr         r0, [pc, #0x440]
  048f0	eb000000	 bl          NKDbgPrintfW
  048f4	e3a03001	 mov         r3, #1
  048f8	e50b3038	 str         r3, [r11, #-0x38]
  048fc	ea000001	 b           |$LN172@DrvEscape|
  04900		 |$LN171@DrvEscape|
  04900	e3a03000	 mov         r3, #0
  04904	e50b3038	 str         r3, [r11, #-0x38]
  04908		 |$LN172@DrvEscape|

; 1807 :             if (pvOut != NULL && cjOut == sizeof(POWER_CAPABILITIES))

  04908	e59b3018	 ldr         r3, [r11, #0x18]
  0490c	e3530000	 cmp         r3, #0
  04910	0a000011	 beq         |$LN23@DrvEscape|
  04914	e59b3014	 ldr         r3, [r11, #0x14]
  04918	e3530030	 cmp         r3, #0x30
  0491c	1a00000e	 bne         |$LN23@DrvEscape|
  04920		 |$LN213@DrvEscape|

; 1808 :             {
; 1809 :                 __try
; 1810 :                 {
; 1811 :                     PPOWER_CAPABILITIES ppc = (PPOWER_CAPABILITIES) pvOut;

  04920	e59b3018	 ldr         r3, [r11, #0x18]
  04924	e50b3148	 str         r3, [r11, #-0x148]

; 1812 :                     memset(ppc, 0, sizeof(*ppc));

  04928	e3a02030	 mov         r2, #0x30
  0492c	e3a01000	 mov         r1, #0
  04930	e51b0148	 ldr         r0, [r11, #-0x148]
  04934	eb000000	 bl          memset

; 1813 :                     ppc->DeviceDx = DX_MASK(D0) | DX_MASK(D1) | DX_MASK(D2) | DX_MASK(D3) | DX_MASK(D4);

  04938	e51b2148	 ldr         r2, [r11, #-0x148]
  0493c	e3a0301f	 mov         r3, #0x1F
  04940	e5c23000	 strb        r3, [r2]

; 1814 :                     rc = ESC_SUCCESS;

  04944	e3a03001	 mov         r3, #1
  04948	e50b316c	 str         r3, [r11, #-0x16C]
  0494c		 |$LN214@DrvEscape|

; 1815 :                 }

  0494c	ea000002	 b           |$LN215@DrvEscape|
  04950		 |$LN210@DrvEscape|

; 1817 :                 {
; 1818 :                     rc = ESC_FAILED;

  04950	e3e03000	 mvn         r3, #0
  04954	e50b316c	 str         r3, [r11, #-0x16C]
  04958	eaffffff	 b           |$LN215@DrvEscape|
  0495c		 |$LN215@DrvEscape|
  0495c		 |$LN23@DrvEscape|

; 1819 :                 }
; 1820 :             }
; 1821 :             break;

  0495c	ea0000d1	 b           |$LN111@DrvEscape|
  04960		 |$LN21@DrvEscape|

; 1822 : 
; 1823 :         case IOCTL_POWER_QUERY:
; 1824 :            DEBUGMSG(GPE_ZONE_HW, (L"OMAPDDGPE::DrvEscape: IOCTL_POWER_QUERY\r\n"));

  04960	e59f33b0	 ldr         r3, [pc, #0x3B0]
  04964	e5933440	 ldr         r3, [r3, #0x440]
  04968	e3130b02	 tst         r3, #2, 22
  0496c	0a000004	 beq         |$LN173@DrvEscape|
  04970	e59f03b8	 ldr         r0, [pc, #0x3B8]
  04974	eb000000	 bl          NKDbgPrintfW
  04978	e3a03001	 mov         r3, #1
  0497c	e50b3034	 str         r3, [r11, #-0x34]
  04980	ea000001	 b           |$LN174@DrvEscape|
  04984		 |$LN173@DrvEscape|
  04984	e3a03000	 mov         r3, #0
  04988	e50b3034	 str         r3, [r11, #-0x34]
  0498c		 |$LN174@DrvEscape|

; 1825 :            if(pvOut != NULL && cjOut == sizeof(CEDEVICE_POWER_STATE))

  0498c	e59b3018	 ldr         r3, [r11, #0x18]
  04990	e3530000	 cmp         r3, #0
  04994	0a000016	 beq         |$LN20@DrvEscape|
  04998	e59b3014	 ldr         r3, [r11, #0x14]
  0499c	e3530004	 cmp         r3, #4
  049a0	1a000013	 bne         |$LN20@DrvEscape|
  049a4		 |$LN220@DrvEscape|

; 1826 :             {
; 1827 :                 __try
; 1828 :                 {
; 1829 :                     CEDEVICE_POWER_STATE dx = *(CEDEVICE_POWER_STATE*)pvOut;

  049a4	e59b3018	 ldr         r3, [r11, #0x18]
  049a8	e5933000	 ldr         r3, [r3]
  049ac	e50b3144	 str         r3, [r11, #-0x144]

; 1830 :                     rc = VALID_DX(dx) ? ESC_SUCCESS : ESC_FAILED;

  049b0	e51b3144	 ldr         r3, [r11, #-0x144]
  049b4	e3730001	 cmn         r3, #1
  049b8	da000005	 ble         |$LN175@DrvEscape|
  049bc	e51b3144	 ldr         r3, [r11, #-0x144]
  049c0	e3530005	 cmp         r3, #5
  049c4	aa000002	 bge         |$LN175@DrvEscape|
  049c8	e3a03001	 mov         r3, #1
  049cc	e50b3030	 str         r3, [r11, #-0x30]
  049d0	ea000001	 b           |$LN176@DrvEscape|
  049d4		 |$LN175@DrvEscape|
  049d4	e3e03000	 mvn         r3, #0
  049d8	e50b3030	 str         r3, [r11, #-0x30]
  049dc		 |$LN176@DrvEscape|
  049dc	e51b3030	 ldr         r3, [r11, #-0x30]
  049e0	e50b316c	 str         r3, [r11, #-0x16C]
  049e4		 |$LN221@DrvEscape|

; 1831 :                 }

  049e4	ea000002	 b           |$LN222@DrvEscape|
  049e8		 |$LN217@DrvEscape|

; 1833 :                 {
; 1834 :                     rc = ESC_FAILED;

  049e8	e3e03000	 mvn         r3, #0
  049ec	e50b316c	 str         r3, [r11, #-0x16C]
  049f0	eaffffff	 b           |$LN222@DrvEscape|
  049f4		 |$LN222@DrvEscape|
  049f4		 |$LN20@DrvEscape|

; 1835 :                 }
; 1836 :             }
; 1837 :             break;

  049f4	ea0000ab	 b           |$LN111@DrvEscape|
  049f8		 |$LN18@DrvEscape|

; 1838 : 
; 1839 :         case IOCTL_POWER_GET:
; 1840 :             DEBUGMSG(GPE_ZONE_HW, (L"OMAPDDGPE::DrvEscape: IOCTL_POWER_GET\r\n"));

  049f8	e59f3318	 ldr         r3, [pc, #0x318]
  049fc	e5933440	 ldr         r3, [r3, #0x440]
  04a00	e3130b02	 tst         r3, #2, 22
  04a04	0a000004	 beq         |$LN177@DrvEscape|
  04a08	e59f031c	 ldr         r0, [pc, #0x31C]
  04a0c	eb000000	 bl          NKDbgPrintfW
  04a10	e3a03001	 mov         r3, #1
  04a14	e50b302c	 str         r3, [r11, #-0x2C]
  04a18	ea000001	 b           |$LN178@DrvEscape|
  04a1c		 |$LN177@DrvEscape|
  04a1c	e3a03000	 mov         r3, #0
  04a20	e50b302c	 str         r3, [r11, #-0x2C]
  04a24		 |$LN178@DrvEscape|

; 1841 :             if(pvOut != NULL && cjOut == sizeof(CEDEVICE_POWER_STATE))

  04a24	e59b3018	 ldr         r3, [r11, #0x18]
  04a28	e3530000	 cmp         r3, #0
  04a2c	0a000010	 beq         |$LN17@DrvEscape|
  04a30	e59b3014	 ldr         r3, [r11, #0x14]
  04a34	e3530004	 cmp         r3, #4
  04a38	1a00000d	 bne         |$LN17@DrvEscape|
  04a3c		 |$LN227@DrvEscape|

; 1842 :             {
; 1843 :                 __try
; 1844 :                 {
; 1845 :                     *(PCEDEVICE_POWER_STATE) pvOut = (CEDEVICE_POWER_STATE) m_pDisplayContr->GetPowerLevel();

  04a3c	e59b3000	 ldr         r3, [r11]
  04a40	e28330b0	 add         r3, r3, #0xB0
  04a44	e5930000	 ldr         r0, [r3]
  04a48	eb000000	 bl          |?GetPowerLevel@OMAPDisplayController@@QAAKXZ|
  04a4c	e50b0028	 str         r0, [r11, #-0x28]
  04a50	e51b2028	 ldr         r2, [r11, #-0x28]
  04a54	e59b3018	 ldr         r3, [r11, #0x18]
  04a58	e5832000	 str         r2, [r3]

; 1846 :                     rc = ESC_SUCCESS;

  04a5c	e3a03001	 mov         r3, #1
  04a60	e50b316c	 str         r3, [r11, #-0x16C]
  04a64		 |$LN228@DrvEscape|

; 1847 :                 }

  04a64	ea000002	 b           |$LN229@DrvEscape|
  04a68		 |$LN224@DrvEscape|

; 1849 :                 {
; 1850 :                     rc = ESC_FAILED;

  04a68	e3e03000	 mvn         r3, #0
  04a6c	e50b316c	 str         r3, [r11, #-0x16C]
  04a70	eaffffff	 b           |$LN229@DrvEscape|
  04a74		 |$LN229@DrvEscape|
  04a74		 |$LN17@DrvEscape|

; 1851 :                 }
; 1852 :             }
; 1853 :             break;

  04a74	ea00008b	 b           |$LN111@DrvEscape|
  04a78		 |$LN15@DrvEscape|

; 1854 : 
; 1855 :         case IOCTL_POWER_SET:
; 1856 :             DEBUGMSG(GPE_ZONE_HW, (L"OMAPDDGPE::DrvEscape: IOCTL_POWER_SET\r\n"));

  04a78	e59f3298	 ldr         r3, [pc, #0x298]
  04a7c	e5933440	 ldr         r3, [r3, #0x440]
  04a80	e3130b02	 tst         r3, #2, 22
  04a84	0a000004	 beq         |$LN179@DrvEscape|
  04a88	e59f0298	 ldr         r0, [pc, #0x298]
  04a8c	eb000000	 bl          NKDbgPrintfW
  04a90	e3a03001	 mov         r3, #1
  04a94	e50b3024	 str         r3, [r11, #-0x24]
  04a98	ea000001	 b           |$LN180@DrvEscape|
  04a9c		 |$LN179@DrvEscape|
  04a9c	e3a03000	 mov         r3, #0
  04aa0	e50b3024	 str         r3, [r11, #-0x24]
  04aa4		 |$LN180@DrvEscape|

; 1857 :             if(pvOut != NULL && cjOut == sizeof(CEDEVICE_POWER_STATE))

  04aa4	e59b3018	 ldr         r3, [r11, #0x18]
  04aa8	e3530000	 cmp         r3, #0
  04aac	0a000022	 beq         |$LN14@DrvEscape|
  04ab0	e59b3014	 ldr         r3, [r11, #0x14]
  04ab4	e3530004	 cmp         r3, #4
  04ab8	1a00001f	 bne         |$LN14@DrvEscape|
  04abc		 |$LN234@DrvEscape|

; 1858 :             {
; 1859 :                 __try
; 1860 :                 {
; 1861 :                     CEDEVICE_POWER_STATE dx = *(CEDEVICE_POWER_STATE*)pvOut;

  04abc	e59b3018	 ldr         r3, [r11, #0x18]
  04ac0	e5933000	 ldr         r3, [r3]
  04ac4	e50b3140	 str         r3, [r11, #-0x140]

; 1862 :                     if( VALID_DX(dx) )

  04ac8	e51b3140	 ldr         r3, [r11, #-0x140]
  04acc	e3730001	 cmn         r3, #1
  04ad0	da000015	 ble         |$LN12@DrvEscape|
  04ad4	e51b3140	 ldr         r3, [r11, #-0x140]
  04ad8	e3530005	 cmp         r3, #5
  04adc	aa000012	 bge         |$LN12@DrvEscape|

; 1863 :                     {
; 1864 :                         DEBUGMSG(GPE_ZONE_HW, (L"OMAPDDGPE::DrvEscape: IOCTL_POWER_SET = to D%u\r\n", dx));

  04ae0	e59f3230	 ldr         r3, [pc, #0x230]
  04ae4	e5933440	 ldr         r3, [r3, #0x440]
  04ae8	e3130b02	 tst         r3, #2, 22
  04aec	0a000005	 beq         |$LN181@DrvEscape|
  04af0	e51b1140	 ldr         r1, [r11, #-0x140]
  04af4	e59f0228	 ldr         r0, [pc, #0x228]
  04af8	eb000000	 bl          NKDbgPrintfW
  04afc	e3a03001	 mov         r3, #1
  04b00	e50b3020	 str         r3, [r11, #-0x20]
  04b04	ea000001	 b           |$LN182@DrvEscape|
  04b08		 |$LN181@DrvEscape|
  04b08	e3a03000	 mov         r3, #0
  04b0c	e50b3020	 str         r3, [r11, #-0x20]
  04b10		 |$LN182@DrvEscape|

; 1865 :                         m_pDisplayContr->SetPowerLevel(dx);

  04b10	e51b1140	 ldr         r1, [r11, #-0x140]
  04b14	e59b3000	 ldr         r3, [r11]
  04b18	e28330b0	 add         r3, r3, #0xB0
  04b1c	e5930000	 ldr         r0, [r3]
  04b20	eb000000	 bl          |?SetPowerLevel@OMAPDisplayController@@QAAHK@Z|

; 1866 :                         rc = ESC_SUCCESS;

  04b24	e3a03001	 mov         r3, #1
  04b28	e50b316c	 str         r3, [r11, #-0x16C]
  04b2c		 |$LN12@DrvEscape|
  04b2c		 |$LN235@DrvEscape|

; 1867 :                     }
; 1868 :                 }

  04b2c	ea000002	 b           |$LN236@DrvEscape|
  04b30		 |$LN231@DrvEscape|

; 1870 :                 {
; 1871 :                     rc = ESC_FAILED;

  04b30	e3e03000	 mvn         r3, #0
  04b34	e50b316c	 str         r3, [r11, #-0x16C]
  04b38	eaffffff	 b           |$LN236@DrvEscape|
  04b3c		 |$LN236@DrvEscape|
  04b3c		 |$LN14@DrvEscape|

; 1872 :                 }
; 1873 :             }
; 1874 :             break;

  04b3c	ea000059	 b           |$LN111@DrvEscape|
  04b40		 |$LN11@DrvEscape|

; 1875 : 
; 1876 :         case IOCTL_TIPMX_CONTEXTPATH:
; 1877 :             DEBUGMSG(GPE_ZONE_HW, (L"OMAPDDGPE::DrvEscape: IOCTL_TIPMX_CONTEXTPATH\r\n"));

  04b40	e59f31d0	 ldr         r3, [pc, #0x1D0]
  04b44	e5933440	 ldr         r3, [r3, #0x440]
  04b48	e3130b02	 tst         r3, #2, 22
  04b4c	0a000004	 beq         |$LN183@DrvEscape|
  04b50	e59f01c8	 ldr         r0, [pc, #0x1C8]
  04b54	eb000000	 bl          NKDbgPrintfW
  04b58	e3a03001	 mov         r3, #1
  04b5c	e50b301c	 str         r3, [r11, #-0x1C]
  04b60	ea000001	 b           |$LN184@DrvEscape|
  04b64		 |$LN183@DrvEscape|
  04b64	e3a03000	 mov         r3, #0
  04b68	e50b301c	 str         r3, [r11, #-0x1C]
  04b6c		 |$LN184@DrvEscape|

; 1878 :             if(pvOut != NULL && cjOut >= sizeof(IOCTL_TIPMX_CONTEXTPATH_OUT))

  04b6c	e59b3018	 ldr         r3, [r11, #0x18]
  04b70	e3530000	 cmp         r3, #0
  04b74	0a00000e	 beq         |$LN10@DrvEscape|
  04b78	e59b3014	 ldr         r3, [r11, #0x14]
  04b7c	e3530f82	 cmp         r3, #0x82, 30
  04b80	3a00000b	 bcc         |$LN10@DrvEscape|

; 1879 :             {
; 1880 :                 IOCTL_TIPMX_CONTEXTPATH_OUT *pCtx = (IOCTL_TIPMX_CONTEXTPATH_OUT*)pvOut;

  04b84	e59b3018	 ldr         r3, [r11, #0x18]
  04b88	e50b313c	 str         r3, [r11, #-0x13C]
  04b8c		 |$LN241@DrvEscape|

; 1881 :                 __try
; 1882 :                 {
; 1883 :                     _tcscpy(pCtx->szContext, g_Globals.m_szContext);

  04b8c	e59f3188	 ldr         r3, [pc, #0x188]
  04b90	e283100c	 add         r1, r3, #0xC
  04b94	e51b013c	 ldr         r0, [r11, #-0x13C]
  04b98	eb000000	 bl          wcscpy

; 1884 :                     rc = ESC_SUCCESS;

  04b9c	e3a03001	 mov         r3, #1
  04ba0	e50b316c	 str         r3, [r11, #-0x16C]
  04ba4		 |$LN242@DrvEscape|

; 1885 :                 }

  04ba4	ea000002	 b           |$LN243@DrvEscape|
  04ba8		 |$LN238@DrvEscape|

; 1887 :                 {
; 1888 :                     rc = ESC_FAILED;

  04ba8	e3e03000	 mvn         r3, #0
  04bac	e50b316c	 str         r3, [r11, #-0x16C]
  04bb0	eaffffff	 b           |$LN243@DrvEscape|
  04bb4		 |$LN243@DrvEscape|
  04bb4		 |$LN10@DrvEscape|

; 1889 :                 }
; 1890 :             }
; 1891 :             break;

  04bb4	ea00003b	 b           |$LN111@DrvEscape|
  04bb8		 |$LN8@DrvEscape|

; 1892 :             
; 1893 :         case IOCTL_CONTEXT_RESTORE:
; 1894 :             DEBUGMSG(GPE_ZONE_HW, (L"OMAPDDGPE::DrvEscape: IOCTL_CONTEXT_RESTORE\r\n"));

  04bb8	e59f3158	 ldr         r3, [pc, #0x158]
  04bbc	e5933440	 ldr         r3, [r3, #0x440]
  04bc0	e3130b02	 tst         r3, #2, 22
  04bc4	0a000004	 beq         |$LN185@DrvEscape|
  04bc8	e59f0144	 ldr         r0, [pc, #0x144]
  04bcc	eb000000	 bl          NKDbgPrintfW
  04bd0	e3a03001	 mov         r3, #1
  04bd4	e50b3018	 str         r3, [r11, #-0x18]
  04bd8	ea000001	 b           |$LN186@DrvEscape|
  04bdc		 |$LN185@DrvEscape|
  04bdc	e3a03000	 mov         r3, #0
  04be0	e50b3018	 str         r3, [r11, #-0x18]
  04be4		 |$LN186@DrvEscape|

; 1895 :             if (pvIn != NULL)

  04be4	e59b3010	 ldr         r3, [r11, #0x10]
  04be8	e3530000	 cmp         r3, #0
  04bec	0a000029	 beq         |$LN7@DrvEscape|

; 1896 :             {
; 1897 :                 OMAP_DEVICE  deviceId = (OMAP_DEVICE)*((UINT32*)pvIn);

  04bf0	e59b3010	 ldr         r3, [r11, #0x10]
  04bf4	e5933000	 ldr         r3, [r3]
  04bf8	e50b3138	 str         r3, [r11, #-0x138]

; 1898 : 
; 1899 :                 if (deviceId == m_pDisplayContr->GetDssInfo()->DSSDevice)

  04bfc	e59b3000	 ldr         r3, [r11]
  04c00	e28330b0	 add         r3, r3, #0xB0
  04c04	e5930000	 ldr         r0, [r3]
  04c08	eb000000	 bl          |?GetDssInfo@OMAPDisplayController@@QAAPAUDSS_INFO@@XZ|
  04c0c	e50b0014	 str         r0, [r11, #-0x14]
  04c10	e51b2138	 ldr         r2, [r11, #-0x138]
  04c14	e51b3014	 ldr         r3, [r11, #-0x14]
  04c18	e5933000	 ldr         r3, [r3]
  04c1c	e1520003	 cmp         r2, r3
  04c20	1a000007	 bne         |$LN6@DrvEscape|

; 1900 :                 {
; 1901 :                         m_pDisplayContr->RestoreRegisters(OMAP_DSS_DESTINATION_LCD);

  04c24	e3a01000	 mov         r1, #0
  04c28	e59b3000	 ldr         r3, [r11]
  04c2c	e28330b0	 add         r3, r3, #0xB0
  04c30	e5930000	 ldr         r0, [r3]
  04c34	eb000000	 bl          |?RestoreRegisters@OMAPDisplayController@@QAAHW4OMAP_DSS_DESTINATION@@@Z|

; 1902 :                         rc = ESC_SUCCESS;

  04c38	e3a03001	 mov         r3, #1
  04c3c	e50b316c	 str         r3, [r11, #-0x16C]
  04c40	ea000014	 b           |$LN5@DrvEscape|
  04c44		 |$LN6@DrvEscape|

; 1903 :                 }
; 1904 :                 else if (deviceId == m_pDisplayContr->GetDssInfo()->TVEncoderDevice)

  04c44	e59b3000	 ldr         r3, [r11]
  04c48	e28330b0	 add         r3, r3, #0xB0
  04c4c	e5930000	 ldr         r0, [r3]
  04c50	eb000000	 bl          |?GetDssInfo@OMAPDisplayController@@QAAPAUDSS_INFO@@XZ|
  04c54	e50b0010	 str         r0, [r11, #-0x10]
  04c58	e51b3010	 ldr         r3, [r11, #-0x10]
  04c5c	e2833004	 add         r3, r3, #4
  04c60	e51b2138	 ldr         r2, [r11, #-0x138]
  04c64	e5933000	 ldr         r3, [r3]
  04c68	e1520003	 cmp         r2, r3
  04c6c	1a000007	 bne         |$LN4@DrvEscape|

; 1905 :                 { 
; 1906 :                         m_pDisplayContr->RestoreRegisters(OMAP_DSS_DESTINATION_TVOUT);

  04c70	e3a01001	 mov         r1, #1
  04c74	e59b3000	 ldr         r3, [r11]
  04c78	e28330b0	 add         r3, r3, #0xB0
  04c7c	e5930000	 ldr         r0, [r3]
  04c80	eb000000	 bl          |?RestoreRegisters@OMAPDisplayController@@QAAHW4OMAP_DSS_DESTINATION@@@Z|

; 1907 :                         rc = ESC_SUCCESS;

  04c84	e3a03001	 mov         r3, #1
  04c88	e50b316c	 str         r3, [r11, #-0x16C]

; 1908 :                 }
; 1909 :                 else 

  04c8c	ea000001	 b           |$LN3@DrvEscape|
  04c90		 |$LN4@DrvEscape|

; 1910 :                 {
; 1911 :                     rc = ESC_FAILED;

  04c90	e3e03000	 mvn         r3, #0
  04c94	e50b316c	 str         r3, [r11, #-0x16C]
  04c98		 |$LN3@DrvEscape|
  04c98		 |$LN5@DrvEscape|
  04c98		 |$LN7@DrvEscape|

; 1912 :                 }
; 1913 :             }
; 1914 :             break;

  04c98	ea000002	 b           |$LN111@DrvEscape|
  04c9c		 |$LN2@DrvEscape|

; 1915 : 
; 1916 :         default:
; 1917 : #pragma warning (push)
; 1918 : #pragma warning (disable:4127)
; 1919 :             //  Check for display perf IOCTLs
; 1920 :             if( DispPerfQueryEsc(iEsc) )

  04c9c	ea000001	 b           |$LN1@DrvEscape|

; 1921 :             {
; 1922 :                 rc = DispPerfDrvEscape(iEsc, cjIn, pvIn, cjOut, pvOut);

  04ca0	e3a03000	 mov         r3, #0
  04ca4	e50b316c	 str         r3, [r11, #-0x16C]
  04ca8		 |$LN1@DrvEscape|
  04ca8		 |$LN111@DrvEscape|

; 1923 :             }
; 1924 : #pragma warning (pop)
; 1925 :             break;
; 1926 :             
; 1927 : 
; 1928 : #if (_WINCEOSVER<600)
; 1929 :         case GETGXINFO:
; 1930 :             DEBUGMSG(GPE_ZONE_HW, (L"OMAPDDGPE::DrvEscape: GETGXINFO\r\n"));
; 1931 :             if(pvOut != NULL)
; 1932 :             {
; 1933 :                 __try
; 1934 :                 {
; 1935 :                     rc = GetGameXInfo( cjOut, pvOut );
; 1936 :                 }
; 1937 :                 __except(EXCEPTION_EXECUTE_HANDLER)
; 1938 :                 {
; 1939 :                     rc = ESC_FAILED;
; 1940 :                 }
; 1941 :             }
; 1942 :             break;
; 1943 : 
; 1944 :         case GETRAWFRAMEBUFFER:
; 1945 :             DEBUGMSG(GPE_ZONE_HW, (L"OMAPDDGPE::DrvEscape: GETRAWFRAMEBUFFER\r\n"));
; 1946 :             if(pvOut != NULL)
; 1947 :             {
; 1948 :                 __try
; 1949 :                 {
; 1950 :                     rc = GetGameFrameBuffer( cjOut, pvOut );
; 1951 :                 }
; 1952 :                 __except(EXCEPTION_EXECUTE_HANDLER)
; 1953 :                 {
; 1954 :                     rc = ESC_FAILED;
; 1955 :                 }
; 1956 :             }
; 1957 :             break;
; 1958 :         
; 1959 :         case DRVESC_GAPI_ENABLE:
; 1960 :             DEBUGMSG(GPE_ZONE_HW, (L"OMAPDDGPE::DrvEscape: DRVESC_GAPI_ENABLE\r\n"));
; 1961 :             m_bGameEnable = TRUE;
; 1962 :             rc = GameEnable(TRUE);
; 1963 :             break;
; 1964 : 
; 1965 :         case DRVESC_GAPI_DISABLE:
; 1966 :             DEBUGMSG(GPE_ZONE_HW, (L"OMAPDDGPE::DrvEscape: DRVESC_GAPI_DISABLE\r\n"));
; 1967 :             m_bGameEnable = FALSE;
; 1968 :             rc = GameEnable(FALSE);
; 1969 :             break;
; 1970 : 
; 1971 :         case DRVESC_GAPI_DRAMTOVRAM:
; 1972 :             DEBUGMSG(GPE_ZONE_HW, (L"OMAPDDGPE::DrvEscape: DRVESC_GAPI_DRAMTOVRAM\r\n"));
; 1973 :             rc = GameDRAMtoVRAM();
; 1974 :             break;
; 1975 : 
; 1976 :         case DRVESC_GAPI_VRAMTODRAM:
; 1977 :             DEBUGMSG(GPE_ZONE_HW, (L"OMAPDDGPE::DrvEscape: DRVESC_GAPI_VRAMTODRAM\r\n"));
; 1978 :             rc = GameVRAMtoDRAM();
; 1979 :             break;
; 1980 : #endif
; 1981 :     }
; 1982 : 
; 1983 :     return rc;

  04ca8	e51b316c	 ldr         r3, [r11, #-0x16C]
  04cac	e50b3134	 str         r3, [r11, #-0x134]
  04cb0		 |$LN194@DrvEscape|

; 1984 : }

  04cb0	e51b0134	 ldr         r0, [r11, #-0x134]
  04cb4	e24bd00c	 sub         sp, r11, #0xC
  04cb8	e89d6800	 ldmia       sp, {r11, sp, lr}
  04cbc	e12fff1e	 bx          lr

			 ENDP  ; |?DrvEscape@OMAPDDGPE@@UAAKPAU_SURFOBJ@@KKPAXK1@Z|, OMAPDDGPE::DrvEscape

  04cc0		 |$LN237@DrvEscape|
  04cc0		 |$LN252@DrvEscape|

; 1886 :                 __except(EXCEPTION_EXECUTE_HANDLER)

  04cc0	e52de004	 str         lr, [sp, #-4]!
  04cc4		 |$LN240@DrvEscape|
  04cc4		 |$LN289@DrvEscape|
  04cc4	e3a00001	 mov         r0, #1
  04cc8		 |$LN239@DrvEscape|
  04cc8	e49df004	 ldr         pc, [sp], #4
  04ccc		 |$LN290@DrvEscape|
  04ccc		 |$LN230@DrvEscape|
  04ccc		 |$LN254@DrvEscape|

; 1869 :                 __except(EXCEPTION_EXECUTE_HANDLER)

  04ccc	e52de004	 str         lr, [sp, #-4]!
  04cd0		 |$LN233@DrvEscape|
  04cd0		 |$LN291@DrvEscape|
  04cd0	e3a00001	 mov         r0, #1
  04cd4		 |$LN232@DrvEscape|
  04cd4	e49df004	 ldr         pc, [sp], #4
  04cd8		 |$LN292@DrvEscape|
  04cd8		 |$LN223@DrvEscape|
  04cd8		 |$LN255@DrvEscape|

; 1848 :                 __except(EXCEPTION_EXECUTE_HANDLER)

  04cd8	e52de004	 str         lr, [sp, #-4]!
  04cdc		 |$LN226@DrvEscape|
  04cdc		 |$LN293@DrvEscape|
  04cdc	e3a00001	 mov         r0, #1
  04ce0		 |$LN225@DrvEscape|
  04ce0	e49df004	 ldr         pc, [sp], #4
  04ce4		 |$LN294@DrvEscape|
  04ce4		 |$LN216@DrvEscape|
  04ce4		 |$LN256@DrvEscape|

; 1832 :                 __except(EXCEPTION_EXECUTE_HANDLER)

  04ce4	e52de004	 str         lr, [sp, #-4]!
  04ce8		 |$LN219@DrvEscape|
  04ce8		 |$LN295@DrvEscape|
  04ce8	e3a00001	 mov         r0, #1
  04cec		 |$LN218@DrvEscape|
  04cec	e49df004	 ldr         pc, [sp], #4
  04cf0		 |$LN296@DrvEscape|
  04cf0		 |$LN209@DrvEscape|
  04cf0		 |$LN257@DrvEscape|

; 1816 :                 __except(EXCEPTION_EXECUTE_HANDLER)

  04cf0	e52de004	 str         lr, [sp, #-4]!
  04cf4		 |$LN212@DrvEscape|
  04cf4		 |$LN297@DrvEscape|
  04cf4	e3a00001	 mov         r0, #1
  04cf8		 |$LN211@DrvEscape|
  04cf8	e49df004	 ldr         pc, [sp], #4
  04cfc		 |$LN298@DrvEscape|
  04cfc		 |$LN202@DrvEscape|
  04cfc		 |$LN258@DrvEscape|

; 1669 :                 __except(EXCEPTION_EXECUTE_HANDLER)

  04cfc	e52de004	 str         lr, [sp, #-4]!
  04d00		 |$LN205@DrvEscape|
  04d00		 |$LN299@DrvEscape|
  04d00	e3a00001	 mov         r0, #1
  04d04		 |$LN204@DrvEscape|
  04d04	e49df004	 ldr         pc, [sp], #4
  04d08		 |$LN300@DrvEscape|
  04d08		 |$LN195@DrvEscape|
  04d08		 |$LN259@DrvEscape|

; 1615 :                 __except(EXCEPTION_EXECUTE_HANDLER)

  04d08	e52de004	 str         lr, [sp, #-4]!
  04d0c		 |$LN198@DrvEscape|
  04d0c		 |$LN301@DrvEscape|
  04d0c	e3a00001	 mov         r0, #1
  04d10		 |$LN197@DrvEscape|
  04d10	e49df004	 ldr         pc, [sp], #4
  04d14		 |$LN303@DrvEscape|
  04d14		 |$LN304@DrvEscape|
  04d14	00000000	 DCD         |??_C@_1FM@LGPECPHL@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAD?$AAr?$AAv?$AAE?$AAs?$AAc?$AAa?$AAp?$AAe?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAC?$AAO?$AAN?$AAT@|
  04d18		 |$LN305@DrvEscape|
  04d18	00000000	 DCD         |dpCurSettings|
  04d1c		 |$LN306@DrvEscape|
  04d1c	00000000	 DCD         |?g_Globals@@3VOMAPDDGPEGlobals@@A|
  04d20		 |$LN307@DrvEscape|
  04d20	00000000	 DCD         |??_C@_1GA@DBBHFPMN@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAD?$AAr?$AAv?$AAE?$AAs?$AAc?$AAa?$AAp?$AAe?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAT?$AAI?$AAP?$AAM@|
  04d24		 |$LN308@DrvEscape|
  04d24	00000000	 DCD         |??_C@_1GC@KFHLKHOP@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAD?$AAr?$AAv?$AAE?$AAs?$AAc?$AAa?$AAp?$AAe?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE@|
  04d28		 |$LN309@DrvEscape|
  04d28	00000000	 DCD         |??_C@_1FA@BOPLJMPC@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAD?$AAr?$AAv?$AAE?$AAs?$AAc?$AAa?$AAp?$AAe?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE@|
  04d2c		 |$LN310@DrvEscape|
  04d2c	00000000	 DCD         |??_C@_1FA@BBOFEKHB@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAD?$AAr?$AAv?$AAE?$AAs?$AAc?$AAa?$AAp?$AAe?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE@|
  04d30		 |$LN311@DrvEscape|
  04d30	00000000	 DCD         |??_C@_1FE@ODBLPIGL@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAD?$AAr?$AAv?$AAE?$AAs?$AAc?$AAa?$AAp?$AAe?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE@|
  04d34		 |$LN312@DrvEscape|
  04d34	00000000	 DCD         |??_C@_1GC@ODHHGMOP@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAD?$AAr?$AAv?$AAE?$AAs?$AAc?$AAa?$AAp?$AAe?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE@|
  04d38		 |$LN313@DrvEscape|
  04d38	00000000	 DCD         |??_C@_1FG@LGGAPCJP@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAD?$AAr?$AAv?$AAE?$AAs?$AAc?$AAa?$AAp?$AAe?$AA?3?$AA?5?$AAS?$AAE?$AAT?$AAP?$AAO?$AAW?$AAE?$AAR?$AAM?$AAA@|
  04d3c		 |$LN314@DrvEscape|
  04d3c	00000000	 DCD         |??_C@_1FG@EMCDICIK@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAD?$AAr?$AAv?$AAE?$AAs?$AAc?$AAa?$AAp?$AAe?$AA?3?$AA?5?$AAG?$AAE?$AAT?$AAP?$AAO?$AAW?$AAE?$AAR?$AAM?$AAA@|
  04d40		 |$LN315@DrvEscape|
  04d40	00000000	 DCD         |??_C@_1FI@IFGFIANG@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAD?$AAr?$AAv?$AAE?$AAs?$AAc?$AAa?$AAp?$AAe?$AA?3?$AA?5?$AAD?$AAR?$AAV?$AAE?$AAS?$AAC?$AA_?$AAH?$AAD?$AAM@|
  04d44		 |$LN316@DrvEscape|
  04d44	00000000	 DCD         |??_C@_1FG@NHFCEFAP@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAD?$AAr?$AAv?$AAE?$AAs?$AAc?$AAa?$AAp?$AAe?$AA?3?$AA?5?$AAD?$AAR?$AAV?$AAE?$AAS?$AAC?$AA_?$AAH?$AAD?$AAM@|
  04d48		 |$LN317@DrvEscape|
  04d48	00000000	 DCD         |??_C@_1FG@PABCPCIK@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAD?$AAr?$AAv?$AAE?$AAs?$AAc?$AAa?$AAp?$AAe?$AA?3?$AA?5?$AAD?$AAR?$AAV?$AAE?$AAS?$AAC?$AA_?$AAD?$AAV?$AAI@|
  04d4c		 |$LN318@DrvEscape|
  04d4c	00000000	 DCD         |??_C@_1FE@LBICODBP@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAD?$AAr?$AAv?$AAE?$AAs?$AAc?$AAa?$AAp?$AAe?$AA?3?$AA?5?$AAD?$AAR?$AAV?$AAE?$AAS?$AAC?$AA_?$AAD?$AAV?$AAI@|
  04d50		 |$LN319@DrvEscape|
  04d50	00000000	 DCD         |??_C@_1GC@NHENJONG@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAD?$AAr?$AAv?$AAE?$AAs?$AAc?$AAa?$AAp?$AAe?$AA?3?$AA?5?$AAD?$AAR?$AAV?$AAE?$AAS?$AAC?$AA_?$AAT?$AAV?$AAO@|
  04d54		 |$LN320@DrvEscape|
  04d54	00000000	 DCD         |??_C@_1GC@MKMFLLHC@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAD?$AAr?$AAv?$AAE?$AAs?$AAc?$AAa?$AAp?$AAe?$AA?3?$AA?5?$AAD?$AAR?$AAV?$AAE?$AAS?$AAC?$AA_?$AAT?$AAV?$AAO@|
  04d58		 |$LN321@DrvEscape|
  04d58	00000000	 DCD         |??_C@_1FK@MCBOMAKC@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAD?$AAr?$AAv?$AAE?$AAs?$AAc?$AAa?$AAp?$AAe?$AA?3?$AA?5?$AAD?$AAR?$AAV?$AAE?$AAS?$AAC?$AA_?$AAT?$AAV?$AAO@|
  04d5c		 |$LN322@DrvEscape|
  04d5c	00000000	 DCD         |??_C@_1FI@FEHJCNHM@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAD?$AAr?$AAv?$AAE?$AAs?$AAc?$AAa?$AAp?$AAe?$AA?3?$AA?5?$AAD?$AAR?$AAV?$AAE?$AAS?$AAC?$AA_?$AAT?$AAV?$AAO@|
  04d60		 |$LN302@DrvEscape|
  04d60		 |$LN260@DrvEscape|
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\inc\dssai.h

  00000			 AREA	 |.pdata|, PDATA
|$T43925| DCD	|$LN5@GetContras|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetContrastLevel@OMAPDisplayController@@QAAKXZ| PROC ; OMAPDisplayController::GetContrastLevel

; 445  :     DWORD   GetContrastLevel() { return m_dwContrastLevel; }

  00000		 |$LN5@GetContras|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M43922|
  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e2833e4d	 add         r3, r3, #0x4D, 28
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3000	 str         r3, [sp]
  00020	e59d0000	 ldr         r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M43923|

			 ENDP  ; |?GetContrastLevel@OMAPDisplayController@@QAAKXZ|, OMAPDisplayController::GetContrastLevel


  00000			 AREA	 |.pdata|, PDATA
|$T43933| DCD	|$LN5@GetPowerLe|
	DCD	0x40000d04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetPowerLevel@OMAPDisplayController@@QAAKXZ| PROC ; OMAPDisplayController::GetPowerLevel

; 498  :     DWORD   GetPowerLevel() { return m_dwPowerLevel; }

  00000		 |$LN5@GetPowerLe|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M43930|
  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e2833b01	 add         r3, r3, #1, 22
  00018	e2833088	 add         r3, r3, #0x88
  0001c	e5933000	 ldr         r3, [r3]
  00020	e58d3000	 str         r3, [sp]
  00024	e59d0000	 ldr         r0, [sp]
  00028	e28dd004	 add         sp, sp, #4
  0002c	e89d6000	 ldmia       sp, {sp, lr}
  00030	e12fff1e	 bx          lr
  00034		 |$M43931|

			 ENDP  ; |?GetPowerLevel@OMAPDisplayController@@QAAKXZ|, OMAPDisplayController::GetPowerLevel


  00000			 AREA	 |.pdata|, PDATA
|$T43941| DCD	|$LN5@GetDssInfo|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetDssInfo@OMAPDisplayController@@QAAPAUDSS_INFO@@XZ| PROC ; OMAPDisplayController::GetDssInfo

; 590  : 	DSS_INFO* GetDssInfo() { return &m_dssinfo;};

  00000		 |$LN5@GetDssInfo|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M43938|
  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e2833c05	 add         r3, r3, #5, 24
  00018	e283301c	 add         r3, r3, #0x1C
  0001c	e58d3000	 str         r3, [sp]
  00020	e59d0000	 ldr         r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M43939|

			 ENDP  ; |?GetDssInfo@OMAPDisplayController@@QAAPAUDSS_INFO@@XZ|, OMAPDisplayController::GetDssInfo

	EXPORT	|??_C@_1GI@LBPPMOKF@?$AA?$HL?$AA?$CF?$AA0?$AA8?$AAl?$AAX?$AA?9?$AA?$CF?$AA0?$AA4?$AAX?$AA?9?$AA?$CF?$AA0?$AA4?$AAX?$AA?9?$AA?$CF?$AA0?$AA2?$AAX?$AA?$CF?$AA0?$AA2?$AAX?$AA?9?$AA?$CF?$AA0?$AA2?$AAX?$AA?$CF?$AA0@| [ DATA ] ; `string'
	IMPORT	|swscanf|

  000f0			 AREA	 |.pdata|, PDATA
|$T43958| DCD	|$LN10@ConvertStr|
	DCD	0x40004d04
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\ddgpe\omap_ddgpe.cpp

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GI@LBPPMOKF@?$AA?$HL?$AA?$CF?$AA0?$AA8?$AAl?$AAX?$AA?9?$AA?$CF?$AA0?$AA4?$AAX?$AA?9?$AA?$CF?$AA0?$AA4?$AAX?$AA?9?$AA?$CF?$AA0?$AA2?$AAX?$AA?$CF?$AA0?$AA2?$AAX?$AA?9?$AA?$CF?$AA0?$AA2?$AAX?$AA?$CF?$AA0@| DCB "{"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "l", 0x0, "X", 0x0, "-"
	DCB	0x0, "%", 0x0, "0", 0x0, "4", 0x0, "X", 0x0, "-", 0x0, "%"
	DCB	0x0, "0", 0x0, "4", 0x0, "X", 0x0, "-", 0x0, "%", 0x0, "0"
	DCB	0x0, "2", 0x0, "X", 0x0, "%", 0x0, "0", 0x0, "2", 0x0, "X"
	DCB	0x0, "-", 0x0, "%", 0x0, "0", 0x0, "2", 0x0, "X", 0x0, "%"
	DCB	0x0, "0", 0x0, "2", 0x0, "X", 0x0, "%", 0x0, "0", 0x0, "2"
	DCB	0x0, "X", 0x0, "%", 0x0, "0", 0x0, "2", 0x0, "X", 0x0, "%"
	DCB	0x0, "0", 0x0, "2", 0x0, "X", 0x0, "%", 0x0, "0", 0x0, "2"
	DCB	0x0, "X", 0x0, "}", 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  04d60			 AREA	 |.text|, CODE, ARM

  04d60		 |?ConvertStringToGuid@@YAHPBGPAU_GUID@@@Z| PROC ; ConvertStringToGuid

; 1989 : {

  04d60		 |$LN10@ConvertStr|
  04d60	e1a0c00d	 mov         r12, sp
  04d64	e92d0003	 stmdb       sp!, {r0, r1}
  04d68	e92d5000	 stmdb       sp!, {r12, lr}
  04d6c	e24dd07c	 sub         sp, sp, #0x7C
  04d70		 |$M43955|

; 1990 :     // ConvertStringToGuid
; 1991 :     // this routine converts a string into a GUID and returns TRUE if the
; 1992 :     // conversion was successful.
; 1993 : 
; 1994 :     BOOL rc = FALSE;

  04d70	e3a03000	 mov         r3, #0
  04d74	e58d3024	 str         r3, [sp, #0x24]

; 1995 :     int idx, data4[8];
; 1996 :     const LPWSTR fmt = L"{%08lX-%04X-%04X-%02X%02X-%02X%02X%02X%02X%02X%02X}";

  04d78	e59f3110	 ldr         r3, [pc, #0x110]
  04d7c	e58d302c	 str         r3, [sp, #0x2C]

; 1997 : 
; 1998 :     if (swscanf(
; 1999 :         szGuid, fmt, &pGuid->Data1, &pGuid->Data2, &pGuid->Data3,
; 2000 :         &data4[0], &data4[1], &data4[2], &data4[3],
; 2001 :         &data4[4], &data4[5], &data4[6], &data4[7]
; 2002 :     ) != 11) goto cleanUp;

  04d80	e28d3030	 add         r3, sp, #0x30
  04d84	e283301c	 add         r3, r3, #0x1C
  04d88	e58d3020	 str         r3, [sp, #0x20]
  04d8c	e28d3030	 add         r3, sp, #0x30
  04d90	e2833018	 add         r3, r3, #0x18
  04d94	e58d301c	 str         r3, [sp, #0x1C]
  04d98	e28d3030	 add         r3, sp, #0x30
  04d9c	e2833014	 add         r3, r3, #0x14
  04da0	e58d3018	 str         r3, [sp, #0x18]
  04da4	e28d3030	 add         r3, sp, #0x30
  04da8	e2833010	 add         r3, r3, #0x10
  04dac	e58d3014	 str         r3, [sp, #0x14]
  04db0	e28d3030	 add         r3, sp, #0x30
  04db4	e283300c	 add         r3, r3, #0xC
  04db8	e58d3010	 str         r3, [sp, #0x10]
  04dbc	e28d3030	 add         r3, sp, #0x30
  04dc0	e2833008	 add         r3, r3, #8
  04dc4	e58d300c	 str         r3, [sp, #0xC]
  04dc8	e28d3030	 add         r3, sp, #0x30
  04dcc	e2833004	 add         r3, r3, #4
  04dd0	e58d3008	 str         r3, [sp, #8]
  04dd4	e28d3030	 add         r3, sp, #0x30
  04dd8	e58d3004	 str         r3, [sp, #4]
  04ddc	e59d3088	 ldr         r3, [sp, #0x88]
  04de0	e2833006	 add         r3, r3, #6
  04de4	e58d3000	 str         r3, [sp]
  04de8	e59d3088	 ldr         r3, [sp, #0x88]
  04dec	e2833004	 add         r3, r3, #4
  04df0	e59d2088	 ldr         r2, [sp, #0x88]
  04df4	e59d102c	 ldr         r1, [sp, #0x2C]
  04df8	e59d0084	 ldr         r0, [sp, #0x84]
  04dfc	eb000000	 bl          swscanf
  04e00	e58d0078	 str         r0, [sp, #0x78]
  04e04	e59d3078	 ldr         r3, [sp, #0x78]
  04e08	e353000b	 cmp         r3, #0xB
  04e0c	0a000001	 beq         |$LN5@ConvertStr|
  04e10	ea000018	 b           |$LN4@ConvertStr|
  04e14	ea000017	 b           |$cleanUp$42794|
  04e18		 |$LN5@ConvertStr|

; 2003 : 
; 2004 :     for (idx = 0; idx < sizeof(data4)/sizeof (int); idx++)

  04e18	e3a03000	 mov         r3, #0
  04e1c	e58d3028	 str         r3, [sp, #0x28]
  04e20	ea000002	 b           |$LN3@ConvertStr|
  04e24		 |$LN2@ConvertStr|
  04e24	e59d3028	 ldr         r3, [sp, #0x28]
  04e28	e2833001	 add         r3, r3, #1
  04e2c	e58d3028	 str         r3, [sp, #0x28]
  04e30		 |$LN3@ConvertStr|
  04e30	e59d3028	 ldr         r3, [sp, #0x28]
  04e34	e3530008	 cmp         r3, #8
  04e38	2a00000c	 bcs         |$LN1@ConvertStr|

; 2005 :     {
; 2006 :         pGuid->Data4[idx] = (UCHAR)data4[idx];

  04e3c	e59d1028	 ldr         r1, [sp, #0x28]
  04e40	e3a03004	 mov         r3, #4
  04e44	e0020391	 mul         r2, r1, r3
  04e48	e28d3030	 add         r3, sp, #0x30
  04e4c	e0833002	 add         r3, r3, r2
  04e50	e5933000	 ldr         r3, [r3]
  04e54	e20310ff	 and         r1, r3, #0xFF
  04e58	e59d3088	 ldr         r3, [sp, #0x88]
  04e5c	e2832008	 add         r2, r3, #8
  04e60	e59d3028	 ldr         r3, [sp, #0x28]
  04e64	e0823003	 add         r3, r2, r3
  04e68	e5c31000	 strb        r1, [r3]

; 2007 :     }

  04e6c	eaffffec	 b           |$LN2@ConvertStr|
  04e70		 |$LN1@ConvertStr|

; 2008 : 
; 2009 :     rc = TRUE;

  04e70	e3a03001	 mov         r3, #1
  04e74	e58d3024	 str         r3, [sp, #0x24]
  04e78		 |$LN4@ConvertStr|
  04e78		 |$cleanUp$42794|

; 2010 : 
; 2011 : cleanUp:
; 2012 :     return rc;

  04e78	e59d3024	 ldr         r3, [sp, #0x24]
  04e7c	e58d3074	 str         r3, [sp, #0x74]

; 2013 : }

  04e80	e59d0074	 ldr         r0, [sp, #0x74]
  04e84	e28dd07c	 add         sp, sp, #0x7C
  04e88	e89d6000	 ldmia       sp, {sp, lr}
  04e8c	e12fff1e	 bx          lr
  04e90		 |$LN11@ConvertStr|
  04e90		 |$LN12@ConvertStr|
  04e90	00000000	 DCD         |??_C@_1GI@LBPPMOKF@?$AA?$HL?$AA?$CF?$AA0?$AA8?$AAl?$AAX?$AA?9?$AA?$CF?$AA0?$AA4?$AAX?$AA?9?$AA?$CF?$AA0?$AA4?$AAX?$AA?9?$AA?$CF?$AA0?$AA2?$AAX?$AA?$CF?$AA0?$AA2?$AAX?$AA?9?$AA?$CF?$AA0?$AA2?$AAX?$AA?$CF?$AA0@|
  04e94		 |$M43956|

			 ENDP  ; |?ConvertStringToGuid@@YAHPBGPAU_GUID@@@Z|, ConvertStringToGuid


  000f8			 AREA	 |.pdata|, PDATA
|$T43977| DCD	|$LN20@PixelForma@2|
	DCD	0x40002704
; Function compile flags: /Odtp

  04e94			 AREA	 |.text|, CODE, ARM

  04e94		 |?PixelFormatToBpp@OMAPDDGPE@@SAKW4OMAP_DSS_PIXELFORMAT@@@Z| PROC ; OMAPDDGPE::PixelFormatToBpp

; 2020 : {

  04e94		 |$LN20@PixelForma@2|
  04e94	e1a0c00d	 mov         r12, sp
  04e98	e92d0001	 stmdb       sp!, {r0}
  04e9c	e92d5000	 stmdb       sp!, {r12, lr}
  04ea0	e24dd00c	 sub         sp, sp, #0xC
  04ea4		 |$M43974|

; 2021 :     DWORD   dwResult = 0;

  04ea4	e3a03000	 mov         r3, #0
  04ea8	e58d3000	 str         r3, [sp]

; 2022 :     
; 2023 :     //  Convert OMAP pixel format into bits per pixel
; 2024 :     switch( ePixelFormat )

  04eac	e59d3014	 ldr         r3, [sp, #0x14]
  04eb0	e58d3008	 str         r3, [sp, #8]
  04eb4	e59d3008	 ldr         r3, [sp, #8]
  04eb8	e2433005	 sub         r3, r3, #5
  04ebc	e58d3008	 str         r3, [sp, #8]
  04ec0	e59d3008	 ldr         r3, [sp, #8]
  04ec4	e3530008	 cmp         r3, #8
  04ec8	8a000012	 bhi         |$LN3@PixelForma@2|
  04ecc	e59d2008	 ldr         r2, [sp, #8]
  04ed0	e1a03102	 mov         r3, r2, lsl #2
  04ed4	e083300f	 add         r3, r3, pc
  04ed8	e5933004	 ldr         r3, [r3, #4]
  04edc	e08ff003	 add         pc, pc, r3
  04ee0		 |$LN8@PixelForma@2|
  04ee0		 |$LN7@PixelForma@2|
  04ee0		 |$LN9@PixelForma@2|
  04ee0	00000020	 DCD         0x20
  04ee4		 |$LN10@PixelForma@2|
  04ee4	00000020	 DCD         0x20
  04ee8		 |$LN11@PixelForma@2|
  04ee8	00000034	 DCD         0x34
  04eec		 |$LN12@PixelForma@2|
  04eec	0000002c	 DCD         0x2c
  04ef0		 |$LN13@PixelForma@2|
  04ef0	00000034	 DCD         0x34
  04ef4		 |$LN14@PixelForma@2|
  04ef4	00000020	 DCD         0x20
  04ef8		 |$LN15@PixelForma@2|
  04ef8	00000020	 DCD         0x20
  04efc		 |$LN16@PixelForma@2|
  04efc	0000002c	 DCD         0x2c
  04f00		 |$LN17@PixelForma@2|
  04f00	0000002c	 DCD         0x2c
  04f04		 |$LN2@PixelForma@2|

; 2025 :     {
; 2026 :         case OMAP_DSS_PIXELFORMAT_RGB16:
; 2027 :         case OMAP_DSS_PIXELFORMAT_ARGB16:
; 2028 :         case OMAP_DSS_PIXELFORMAT_YUV2:
; 2029 :         case OMAP_DSS_PIXELFORMAT_UYVY:
; 2030 :             //  2 bytes per pixel
; 2031 :             dwResult = 16;

  04f04	e3a03010	 mov         r3, #0x10
  04f08	e58d3000	 str         r3, [sp]

; 2032 :             break;

  04f0c	ea000001	 b           |$LN3@PixelForma@2|
  04f10		 |$LN1@PixelForma@2|

; 2033 : 
; 2034 :         case OMAP_DSS_PIXELFORMAT_RGB32:
; 2035 :         case OMAP_DSS_PIXELFORMAT_ARGB32:
; 2036 :         case OMAP_DSS_PIXELFORMAT_RGBA32:
; 2037 :             //  4 bytes per pixel
; 2038 :             dwResult = 32;

  04f10	e3a03020	 mov         r3, #0x20
  04f14	e58d3000	 str         r3, [sp]
  04f18		 |$LN3@PixelForma@2|

; 2039 :             break;
; 2040 :     }
; 2041 : 
; 2042 :     //  Return result
; 2043 :     return dwResult;

  04f18	e59d3000	 ldr         r3, [sp]
  04f1c	e58d3004	 str         r3, [sp, #4]

; 2044 : }

  04f20	e59d0004	 ldr         r0, [sp, #4]
  04f24	e28dd00c	 add         sp, sp, #0xC
  04f28	e89d6000	 ldmia       sp, {sp, lr}
  04f2c	e12fff1e	 bx          lr
  04f30		 |$M43975|

			 ENDP  ; |?PixelFormatToBpp@OMAPDDGPE@@SAKW4OMAP_DSS_PIXELFORMAT@@@Z|, OMAPDDGPE::PixelFormatToBpp


  00100			 AREA	 |.pdata|, PDATA
|$T43994| DCD	|$LN21@PixelForma@3|
	DCD	0x40002a04
; Function compile flags: /Odtp

  04f30			 AREA	 |.text|, CODE, ARM

  04f30		 |?PixelFormatToGPEFormat@OMAPDDGPE@@SA?AW4EGPEFormat@@W4OMAP_DSS_PIXELFORMAT@@@Z| PROC ; OMAPDDGPE::PixelFormatToGPEFormat

; 2051 : {

  04f30		 |$LN21@PixelForma@3|
  04f30	e1a0c00d	 mov         r12, sp
  04f34	e92d0001	 stmdb       sp!, {r0}
  04f38	e92d5000	 stmdb       sp!, {r12, lr}
  04f3c	e24dd00c	 sub         sp, sp, #0xC
  04f40		 |$M43991|

; 2052 :     EGPEFormat  eResult = gpeUndefined;

  04f40	e3a03009	 mov         r3, #9
  04f44	e58d3000	 str         r3, [sp]

; 2053 :     
; 2054 :     //  Convert OMAP pixel format into GPE pixel format enum
; 2055 :     switch( ePixelFormat )

  04f48	e59d3014	 ldr         r3, [sp, #0x14]
  04f4c	e58d3008	 str         r3, [sp, #8]
  04f50	e59d3008	 ldr         r3, [sp, #8]
  04f54	e2433005	 sub         r3, r3, #5
  04f58	e58d3008	 str         r3, [sp, #8]
  04f5c	e59d3008	 ldr         r3, [sp, #8]
  04f60	e3530008	 cmp         r3, #8
  04f64	8a000015	 bhi         |$LN4@PixelForma@3|
  04f68	e59d2008	 ldr         r2, [sp, #8]
  04f6c	e1a03102	 mov         r3, r2, lsl #2
  04f70	e083300f	 add         r3, r3, pc
  04f74	e5933004	 ldr         r3, [r3, #4]
  04f78	e08ff003	 add         pc, pc, r3
  04f7c		 |$LN9@PixelForma@3|
  04f7c		 |$LN8@PixelForma@3|
  04f7c		 |$LN10@PixelForma@3|
  04f7c	00000020	 DCD         0x20
  04f80		 |$LN11@PixelForma@3|
  04f80	00000020	 DCD         0x20
  04f84		 |$LN12@PixelForma@3|
  04f84	00000040	 DCD         0x40
  04f88		 |$LN13@PixelForma@3|
  04f88	00000038	 DCD         0x38
  04f8c		 |$LN14@PixelForma@3|
  04f8c	00000040	 DCD         0x40
  04f90		 |$LN15@PixelForma@3|
  04f90	0000002c	 DCD         0x2c
  04f94		 |$LN16@PixelForma@3|
  04f94	0000002c	 DCD         0x2c
  04f98		 |$LN17@PixelForma@3|
  04f98	00000038	 DCD         0x38
  04f9c		 |$LN18@PixelForma@3|
  04f9c	00000038	 DCD         0x38
  04fa0		 |$LN3@PixelForma@3|

; 2056 :     {
; 2057 :         case OMAP_DSS_PIXELFORMAT_RGB16:
; 2058 :         case OMAP_DSS_PIXELFORMAT_ARGB16:
; 2059 :             eResult = gpe16Bpp;

  04fa0	e3a03004	 mov         r3, #4
  04fa4	e58d3000	 str         r3, [sp]

; 2060 :             break;

  04fa8	ea000004	 b           |$LN4@PixelForma@3|
  04fac		 |$LN2@PixelForma@3|

; 2061 : 
; 2062 :         case OMAP_DSS_PIXELFORMAT_YUV2:
; 2063 :         case OMAP_DSS_PIXELFORMAT_UYVY:
; 2064 :             eResult = gpe16YCrCb;

  04fac	e3a03007	 mov         r3, #7
  04fb0	e58d3000	 str         r3, [sp]

; 2065 :             break;

  04fb4	ea000001	 b           |$LN4@PixelForma@3|
  04fb8		 |$LN1@PixelForma@3|

; 2066 : 
; 2067 :         case OMAP_DSS_PIXELFORMAT_RGB32:
; 2068 :         case OMAP_DSS_PIXELFORMAT_ARGB32:
; 2069 :         case OMAP_DSS_PIXELFORMAT_RGBA32:
; 2070 :             eResult = gpe32Bpp;

  04fb8	e3a03006	 mov         r3, #6
  04fbc	e58d3000	 str         r3, [sp]
  04fc0		 |$LN4@PixelForma@3|

; 2071 :             break;
; 2072 :     }
; 2073 : 
; 2074 :     //  Return result
; 2075 :     return eResult;

  04fc0	e59d3000	 ldr         r3, [sp]
  04fc4	e58d3004	 str         r3, [sp, #4]

; 2076 : }

  04fc8	e59d0004	 ldr         r0, [sp, #4]
  04fcc	e28dd00c	 add         sp, sp, #0xC
  04fd0	e89d6000	 ldmia       sp, {sp, lr}
  04fd4	e12fff1e	 bx          lr
  04fd8		 |$M43992|

			 ENDP  ; |?PixelFormatToGPEFormat@OMAPDDGPE@@SA?AW4EGPEFormat@@W4OMAP_DSS_PIXELFORMAT@@@Z|, OMAPDDGPE::PixelFormatToGPEFormat


  00108			 AREA	 |.pdata|, PDATA
|$T44011| DCD	|$LN23@PixelForma@4|
	DCD	0x40003004
; Function compile flags: /Odtp

  04fd8			 AREA	 |.text|, CODE, ARM

  04fd8		 |?PixelFormatToDDGPEFormat@OMAPDDGPE@@SA?AW4EDDGPEPixelFormat@@W4OMAP_DSS_PIXELFORMAT@@@Z| PROC ; OMAPDDGPE::PixelFormatToDDGPEFormat

; 2083 : {

  04fd8		 |$LN23@PixelForma@4|
  04fd8	e1a0c00d	 mov         r12, sp
  04fdc	e92d0001	 stmdb       sp!, {r0}
  04fe0	e92d5000	 stmdb       sp!, {r12, lr}
  04fe4	e24dd00c	 sub         sp, sp, #0xC
  04fe8		 |$M44008|

; 2084 :     EDDGPEPixelFormat  eResult = ddgpePixelFormat_UnknownFormat;

  04fe8	e3a03012	 mov         r3, #0x12
  04fec	e58d3000	 str         r3, [sp]

; 2085 :     
; 2086 :     //  Convert OMAP pixel format into DDGPE pixel format enum
; 2087 :     switch( ePixelFormat )

  04ff0	e59d3014	 ldr         r3, [sp, #0x14]
  04ff4	e58d3008	 str         r3, [sp, #8]
  04ff8	e59d3008	 ldr         r3, [sp, #8]
  04ffc	e2433005	 sub         r3, r3, #5
  05000	e58d3008	 str         r3, [sp, #8]
  05004	e59d3008	 ldr         r3, [sp, #8]
  05008	e3530008	 cmp         r3, #8
  0500c	8a00001b	 bhi         |$LN6@PixelForma@4|
  05010	e59d2008	 ldr         r2, [sp, #8]
  05014	e1a03102	 mov         r3, r2, lsl #2
  05018	e083300f	 add         r3, r3, pc
  0501c	e5933004	 ldr         r3, [r3, #4]
  05020	e08ff003	 add         pc, pc, r3
  05024		 |$LN11@PixelForma@4|
  05024		 |$LN10@PixelForma@4|
  05024		 |$LN12@PixelForma@4|
  05024	0000002c	 DCD         0x2c
  05028		 |$LN13@PixelForma@4|
  05028	00000020	 DCD         0x20
  0502c		 |$LN14@PixelForma@4|
  0502c	00000058	 DCD         0x58
  05030		 |$LN15@PixelForma@4|
  05030	00000050	 DCD         0x50
  05034		 |$LN16@PixelForma@4|
  05034	00000058	 DCD         0x58
  05038		 |$LN17@PixelForma@4|
  05038	00000038	 DCD         0x38
  0503c		 |$LN18@PixelForma@4|
  0503c	00000044	 DCD         0x44
  05040		 |$LN19@PixelForma@4|
  05040	00000050	 DCD         0x50
  05044		 |$LN20@PixelForma@4|
  05044	00000050	 DCD         0x50
  05048		 |$LN5@PixelForma@4|

; 2088 :     {
; 2089 :         case OMAP_DSS_PIXELFORMAT_RGB16:
; 2090 :             eResult = ddgpePixelFormat_565;

  05048	e3a03004	 mov         r3, #4
  0504c	e58d3000	 str         r3, [sp]

; 2091 :             break;

  05050	ea00000a	 b           |$LN6@PixelForma@4|
  05054		 |$LN4@PixelForma@4|

; 2092 : 
; 2093 :         case OMAP_DSS_PIXELFORMAT_ARGB16:
; 2094 :             eResult = ddgpePixelFormat_4444;

  05054	e3a03006	 mov         r3, #6
  05058	e58d3000	 str         r3, [sp]

; 2095 :             break;

  0505c	ea000007	 b           |$LN6@PixelForma@4|
  05060		 |$LN3@PixelForma@4|

; 2096 : 
; 2097 :         case OMAP_DSS_PIXELFORMAT_YUV2:
; 2098 :             eResult = ddgpePixelFormat_YUY2;

  05060	e3a0300c	 mov         r3, #0xC
  05064	e58d3000	 str         r3, [sp]

; 2099 :             break;

  05068	ea000004	 b           |$LN6@PixelForma@4|
  0506c		 |$LN2@PixelForma@4|

; 2100 : 
; 2101 :         case OMAP_DSS_PIXELFORMAT_UYVY:
; 2102 :             eResult = ddgpePixelFormat_UYVY;

  0506c	e3a0300b	 mov         r3, #0xB
  05070	e58d3000	 str         r3, [sp]

; 2103 :             break;

  05074	ea000001	 b           |$LN6@PixelForma@4|
  05078		 |$LN1@PixelForma@4|

; 2104 : 
; 2105 :         case OMAP_DSS_PIXELFORMAT_RGB32:
; 2106 :         case OMAP_DSS_PIXELFORMAT_ARGB32:
; 2107 :         case OMAP_DSS_PIXELFORMAT_RGBA32:
; 2108 :             eResult = ddgpePixelFormat_8888;

  05078	e3a03009	 mov         r3, #9
  0507c	e58d3000	 str         r3, [sp]
  05080		 |$LN6@PixelForma@4|

; 2109 :             break;
; 2110 :     }
; 2111 : 
; 2112 :     //  Return result
; 2113 :     return eResult;

  05080	e59d3000	 ldr         r3, [sp]
  05084	e58d3004	 str         r3, [sp, #4]

; 2114 : }

  05088	e59d0004	 ldr         r0, [sp, #4]
  0508c	e28dd00c	 add         sp, sp, #0xC
  05090	e89d6000	 ldmia       sp, {sp, lr}
  05094	e12fff1e	 bx          lr
  05098		 |$M44009|

			 ENDP  ; |?PixelFormatToDDGPEFormat@OMAPDDGPE@@SA?AW4EDDGPEPixelFormat@@W4OMAP_DSS_PIXELFORMAT@@@Z|, OMAPDDGPE::PixelFormatToDDGPEFormat


  00110			 AREA	 |.pdata|, PDATA
|$T44028| DCD	|$LN26@PixelForma@5|
	DCD	0x40007e04
; Function compile flags: /Odtp

  05098			 AREA	 |.text|, CODE, ARM

  05098		 |?PixelFormatToBitMask@OMAPDDGPE@@SAHW4OMAP_DSS_PIXELFORMAT@@PAK111@Z| PROC ; OMAPDDGPE::PixelFormatToBitMask

; 2125 : {

  05098		 |$LN26@PixelForma@5|
  05098	e1a0c00d	 mov         r12, sp
  0509c	e92d000f	 stmdb       sp!, {r0 - r3}
  050a0	e92d5000	 stmdb       sp!, {r12, lr}
  050a4	e24dd00c	 sub         sp, sp, #0xC
  050a8		 |$M44025|

; 2126 :     BOOL    bResult = FALSE;

  050a8	e3a03000	 mov         r3, #0
  050ac	e58d3000	 str         r3, [sp]

; 2127 :     
; 2128 :     //  Check pointers
; 2129 :     if( pAlphaBitMask == NULL ||
; 2130 :         pRBitMask == NULL ||
; 2131 :         pGBitMask == NULL ||
; 2132 :         pBBitMask == NULL )

  050b0	e59d3018	 ldr         r3, [sp, #0x18]
  050b4	e3530000	 cmp         r3, #0
  050b8	0a000008	 beq         |$LN9@PixelForma@5|
  050bc	e59d301c	 ldr         r3, [sp, #0x1C]
  050c0	e3530000	 cmp         r3, #0
  050c4	0a000005	 beq         |$LN9@PixelForma@5|
  050c8	e59d3020	 ldr         r3, [sp, #0x20]
  050cc	e3530000	 cmp         r3, #0
  050d0	0a000002	 beq         |$LN9@PixelForma@5|
  050d4	e59d3024	 ldr         r3, [sp, #0x24]
  050d8	e3530000	 cmp         r3, #0
  050dc	1a000002	 bne         |$LN10@PixelForma@5|
  050e0		 |$LN9@PixelForma@5|

; 2133 :         return bResult;

  050e0	e59d3000	 ldr         r3, [sp]
  050e4	e58d3004	 str         r3, [sp, #4]
  050e8	ea000064	 b           |$LN11@PixelForma@5|
  050ec		 |$LN10@PixelForma@5|

; 2134 : 
; 2135 :         
; 2136 :     //  Convert OMAP pixel format into bitmask fields
; 2137 :     switch( ePixelFormat )

  050ec	e59d3014	 ldr         r3, [sp, #0x14]
  050f0	e58d3008	 str         r3, [sp, #8]
  050f4	e59d3008	 ldr         r3, [sp, #8]
  050f8	e2433005	 sub         r3, r3, #5
  050fc	e58d3008	 str         r3, [sp, #8]
  05100	e59d3008	 ldr         r3, [sp, #8]
  05104	e3530008	 cmp         r3, #8
  05108	8a00005a	 bhi         |$LN7@PixelForma@5|
  0510c	e59d2008	 ldr         r2, [sp, #8]
  05110	e1a03102	 mov         r3, r2, lsl #2
  05114	e083300f	 add         r3, r3, pc
  05118	e5933004	 ldr         r3, [r3, #4]
  0511c	e08ff003	 add         pc, pc, r3
  05120		 |$LN14@PixelForma@5|
  05120		 |$LN13@PixelForma@5|
  05120		 |$LN15@PixelForma@5|
  05120	0000005c	 DCD         0x5c
  05124		 |$LN16@PixelForma@5|
  05124	00000020	 DCD         0x20
  05128		 |$LN17@PixelForma@5|
  05128	00000154	 DCD         0x154
  0512c		 |$LN18@PixelForma@5|
  0512c	00000098	 DCD         0x98
  05130		 |$LN19@PixelForma@5|
  05130	00000154	 DCD         0x154
  05134		 |$LN20@PixelForma@5|
  05134	0000014c	 DCD         0x14c
  05138		 |$LN21@PixelForma@5|
  05138	0000014c	 DCD         0x14c
  0513c		 |$LN22@PixelForma@5|
  0513c	000000d4	 DCD         0xd4
  05140		 |$LN23@PixelForma@5|
  05140	00000110	 DCD         0x110
  05144		 |$LN6@PixelForma@5|

; 2138 :     {
; 2139 :         case OMAP_DSS_PIXELFORMAT_RGB16:
; 2140 :             *pAlphaBitMask = 0x0000;

  05144	e59d2018	 ldr         r2, [sp, #0x18]
  05148	e3a03000	 mov         r3, #0
  0514c	e5823000	 str         r3, [r2]

; 2141 :             *pRBitMask     = 0xf800;

  05150	e59d201c	 ldr         r2, [sp, #0x1C]
  05154	e3a03b3e	 mov         r3, #0x3E, 22
  05158	e5823000	 str         r3, [r2]

; 2142 :             *pGBitMask     = 0x07e0;

  0515c	e59d2020	 ldr         r2, [sp, #0x20]
  05160	e3a03e7e	 mov         r3, #0x7E, 28
  05164	e5823000	 str         r3, [r2]

; 2143 :             *pBBitMask     = 0x001f;

  05168	e59d2024	 ldr         r2, [sp, #0x24]
  0516c	e3a0301f	 mov         r3, #0x1F
  05170	e5823000	 str         r3, [r2]

; 2144 :             bResult        = TRUE;

  05174	e3a03001	 mov         r3, #1
  05178	e58d3000	 str         r3, [sp]

; 2145 :             break;

  0517c	ea00003d	 b           |$LN7@PixelForma@5|
  05180		 |$LN5@PixelForma@5|

; 2146 : 
; 2147 :         case OMAP_DSS_PIXELFORMAT_ARGB16:
; 2148 :             *pAlphaBitMask = 0xf000;

  05180	e59d2018	 ldr         r2, [sp, #0x18]
  05184	e3a03a0f	 mov         r3, #0xF, 20
  05188	e5823000	 str         r3, [r2]

; 2149 :             *pRBitMask     = 0x0f00;

  0518c	e59d201c	 ldr         r2, [sp, #0x1C]
  05190	e3a03c0f	 mov         r3, #0xF, 24
  05194	e5823000	 str         r3, [r2]

; 2150 :             *pGBitMask     = 0x00f0;

  05198	e59d2020	 ldr         r2, [sp, #0x20]
  0519c	e3a030f0	 mov         r3, #0xF0
  051a0	e5823000	 str         r3, [r2]

; 2151 :             *pBBitMask     = 0x000f;

  051a4	e59d2024	 ldr         r2, [sp, #0x24]
  051a8	e3a0300f	 mov         r3, #0xF
  051ac	e5823000	 str         r3, [r2]

; 2152 :             bResult        = TRUE;

  051b0	e3a03001	 mov         r3, #1
  051b4	e58d3000	 str         r3, [sp]

; 2153 :             break;

  051b8	ea00002e	 b           |$LN7@PixelForma@5|
  051bc		 |$LN4@PixelForma@5|

; 2154 : 
; 2155 :         case OMAP_DSS_PIXELFORMAT_RGB32:
; 2156 :             *pAlphaBitMask = 0x00000000;

  051bc	e59d2018	 ldr         r2, [sp, #0x18]
  051c0	e3a03000	 mov         r3, #0
  051c4	e5823000	 str         r3, [r2]

; 2157 :             *pRBitMask     = 0x00ff0000;

  051c8	e59d201c	 ldr         r2, [sp, #0x1C]
  051cc	e3a038ff	 mov         r3, #0xFF, 16
  051d0	e5823000	 str         r3, [r2]

; 2158 :             *pGBitMask     = 0x0000ff00;

  051d4	e59d2020	 ldr         r2, [sp, #0x20]
  051d8	e3a03cff	 mov         r3, #0xFF, 24
  051dc	e5823000	 str         r3, [r2]

; 2159 :             *pBBitMask     = 0x000000ff;

  051e0	e59d2024	 ldr         r2, [sp, #0x24]
  051e4	e3a030ff	 mov         r3, #0xFF
  051e8	e5823000	 str         r3, [r2]

; 2160 :             bResult        = TRUE;

  051ec	e3a03001	 mov         r3, #1
  051f0	e58d3000	 str         r3, [sp]

; 2161 :             break;

  051f4	ea00001f	 b           |$LN7@PixelForma@5|
  051f8		 |$LN3@PixelForma@5|

; 2162 : 
; 2163 :         case OMAP_DSS_PIXELFORMAT_ARGB32:
; 2164 :             *pAlphaBitMask = 0xff000000;

  051f8	e59d2018	 ldr         r2, [sp, #0x18]
  051fc	e3a034ff	 mov         r3, #0xFF, 8
  05200	e5823000	 str         r3, [r2]

; 2165 :             *pRBitMask     = 0x00ff0000;

  05204	e59d201c	 ldr         r2, [sp, #0x1C]
  05208	e3a038ff	 mov         r3, #0xFF, 16
  0520c	e5823000	 str         r3, [r2]

; 2166 :             *pGBitMask     = 0x0000ff00;

  05210	e59d2020	 ldr         r2, [sp, #0x20]
  05214	e3a03cff	 mov         r3, #0xFF, 24
  05218	e5823000	 str         r3, [r2]

; 2167 :             *pBBitMask     = 0x000000ff;

  0521c	e59d2024	 ldr         r2, [sp, #0x24]
  05220	e3a030ff	 mov         r3, #0xFF
  05224	e5823000	 str         r3, [r2]

; 2168 :             bResult        = TRUE;

  05228	e3a03001	 mov         r3, #1
  0522c	e58d3000	 str         r3, [sp]

; 2169 :             break;

  05230	ea000010	 b           |$LN7@PixelForma@5|
  05234		 |$LN2@PixelForma@5|

; 2170 : 
; 2171 :         case OMAP_DSS_PIXELFORMAT_RGBA32:
; 2172 :             *pAlphaBitMask = 0x000000ff;

  05234	e59d2018	 ldr         r2, [sp, #0x18]
  05238	e3a030ff	 mov         r3, #0xFF
  0523c	e5823000	 str         r3, [r2]

; 2173 :             *pRBitMask     = 0xff000000;

  05240	e59d201c	 ldr         r2, [sp, #0x1C]
  05244	e3a034ff	 mov         r3, #0xFF, 8
  05248	e5823000	 str         r3, [r2]

; 2174 :             *pGBitMask     = 0x00ff0000;

  0524c	e59d2020	 ldr         r2, [sp, #0x20]
  05250	e3a038ff	 mov         r3, #0xFF, 16
  05254	e5823000	 str         r3, [r2]

; 2175 :             *pBBitMask     = 0x0000ff00;

  05258	e59d2024	 ldr         r2, [sp, #0x24]
  0525c	e3a03cff	 mov         r3, #0xFF, 24
  05260	e5823000	 str         r3, [r2]

; 2176 :             bResult        = TRUE;

  05264	e3a03001	 mov         r3, #1
  05268	e58d3000	 str         r3, [sp]

; 2177 :             break;

  0526c	ea000001	 b           |$LN7@PixelForma@5|
  05270		 |$LN1@PixelForma@5|

; 2178 : 
; 2179 :         case OMAP_DSS_PIXELFORMAT_YUV2:
; 2180 :         case OMAP_DSS_PIXELFORMAT_UYVY:
; 2181 :             bResult = FALSE;

  05270	e3a03000	 mov         r3, #0
  05274	e58d3000	 str         r3, [sp]
  05278		 |$LN7@PixelForma@5|

; 2182 :             break;
; 2183 :     }
; 2184 : 
; 2185 :     //  Return result
; 2186 :     return bResult;

  05278	e59d3000	 ldr         r3, [sp]
  0527c	e58d3004	 str         r3, [sp, #4]
  05280		 |$LN11@PixelForma@5|

; 2187 : }

  05280	e59d0004	 ldr         r0, [sp, #4]
  05284	e28dd00c	 add         sp, sp, #0xC
  05288	e89d6000	 ldmia       sp, {sp, lr}
  0528c	e12fff1e	 bx          lr
  05290		 |$M44026|

			 ENDP  ; |?PixelFormatToBitMask@OMAPDDGPE@@SAHW4OMAP_DSS_PIXELFORMAT@@PAK111@Z|, OMAPDDGPE::PixelFormatToBitMask

	EXPORT	|??_C@_1CO@GJJACCKM@?$AA?9?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAC?$AAu?$AAr?$AAs?$AAo?$AAn?$AAO?$AAn?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GC@ELAMFGJG@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAC?$AAu?$AAr?$AAs?$AAo?$AAr?$AAO?$AAn?$AA?3?$AA?5?$AAN?$AAo?$AA?5?$AAc?$AAu?$AAr?$AAs?$AAo?$AAr?$AA?5?$AAs@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CO@LCFEHNIH@?$AA?$CL?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAC?$AAu?$AAr?$AAs?$AAo?$AAn?$AAO?$AAn?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00118			 AREA	 |.pdata|, PDATA
|$T44045| DCD	|$LN44@CursorOn|
	DCD	0x4001b604

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@GJJACCKM@?$AA?9?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAC?$AAu?$AAr?$AAs?$AAo?$AAn?$AAO?$AAn?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "M", 0x0, "A", 0x0, "P", 0x0, "D", 0x0, "D"
	DCB	0x0, "G", 0x0, "P", 0x0, "E", 0x0, ":", 0x0, ":", 0x0, "C"
	DCB	0x0, "u", 0x0, "r", 0x0, "s", 0x0, "o", 0x0, "n", 0x0, "O"
	DCB	0x0, "n", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GC@ELAMFGJG@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAC?$AAu?$AAr?$AAs?$AAo?$AAr?$AAO?$AAn?$AA?3?$AA?5?$AAN?$AAo?$AA?5?$AAc?$AAu?$AAr?$AAs?$AAo?$AAr?$AA?5?$AAs@| DCB "O"
	DCB	0x0, "M", 0x0, "A", 0x0, "P", 0x0, "D", 0x0, "D", 0x0, "G"
	DCB	0x0, "P", 0x0, "E", 0x0, ":", 0x0, ":", 0x0, "C", 0x0, "u"
	DCB	0x0, "r", 0x0, "s", 0x0, "o", 0x0, "r", 0x0, "O", 0x0, "n"
	DCB	0x0, ":", 0x0, " ", 0x0, "N", 0x0, "o", 0x0, " ", 0x0, "c"
	DCB	0x0, "u", 0x0, "r", 0x0, "s", 0x0, "o", 0x0, "r", 0x0, " "
	DCB	0x0, "s", 0x0, "t", 0x0, "o", 0x0, "r", 0x0, "e", 0x0, " "
	DCB	0x0, "a", 0x0, "v", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "a"
	DCB	0x0, "b", 0x0, "l", 0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@LCFEHNIH@?$AA?$CL?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAC?$AAu?$AAr?$AAs?$AAo?$AAn?$AAO?$AAn?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "O", 0x0, "M", 0x0, "A", 0x0, "P", 0x0, "D", 0x0, "D"
	DCB	0x0, "G", 0x0, "P", 0x0, "E", 0x0, ":", 0x0, ":", 0x0, "C"
	DCB	0x0, "u", 0x0, "r", 0x0, "s", 0x0, "o", 0x0, "n", 0x0, "O"
	DCB	0x0, "n", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  05290			 AREA	 |.text|, CODE, ARM

  05290		 |?CursorOn@OMAPDDGPE@@QAAXXZ| PROC	; OMAPDDGPE::CursorOn

; 2194 : {

  05290		 |$LN44@CursorOn|
  05290	e1a0c00d	 mov         r12, sp
  05294	e92d0001	 stmdb       sp!, {r0}
  05298	e92d5000	 stmdb       sp!, {r12, lr}
  0529c	e24dd04c	 sub         sp, sp, #0x4C
  052a0		 |$M44042|

; 2195 :     UCHAR *pFrame;
; 2196 :     UCHAR *pFrameLine, *pStoreLine, *pXorLine, *pAndLine, data;
; 2197 :     int bytesPerPixel, bytesPerLine;
; 2198 :     int xf, yf, xc, yc, i;
; 2199 : 
; 2200 :     DEBUGMSG(GPE_ZONE_CURSOR, (L"+OMAPDDGPE::CursonOn\r\n"));

  052a0	e59f36b4	 ldr         r3, [pc, #0x6B4]
  052a4	e5933440	 ldr         r3, [r3, #0x440]
  052a8	e3130a02	 tst         r3, #2, 20
  052ac	0a000004	 beq         |$LN30@CursorOn|
  052b0	e59f06ac	 ldr         r0, [pc, #0x6AC]
  052b4	eb000000	 bl          NKDbgPrintfW
  052b8	e3a03001	 mov         r3, #1
  052bc	e58d3034	 str         r3, [sp, #0x34]
  052c0	ea000001	 b           |$LN31@CursorOn|
  052c4		 |$LN30@CursorOn|
  052c4	e3a03000	 mov         r3, #0
  052c8	e58d3034	 str         r3, [sp, #0x34]
  052cc		 |$LN31@CursorOn|

; 2201 : 
; 2202 :     // If cursor should not be visible or already is then exit
; 2203 :     if (m_cursorForcedOff || m_cursorDisabled || m_cursorVisible) 

  052cc	e59d3054	 ldr         r3, [sp, #0x54]
  052d0	e2833f55	 add         r3, r3, #0x55, 30
  052d4	e5933000	 ldr         r3, [r3]
  052d8	e3530000	 cmp         r3, #0
  052dc	1a000009	 bne         |$LN26@CursorOn|
  052e0	e59d3054	 ldr         r3, [sp, #0x54]
  052e4	e2833f53	 add         r3, r3, #0x53, 30
  052e8	e5933000	 ldr         r3, [r3]
  052ec	e3530000	 cmp         r3, #0
  052f0	1a000004	 bne         |$LN26@CursorOn|
  052f4	e59d3054	 ldr         r3, [sp, #0x54]
  052f8	e2833e15	 add         r3, r3, #0x15, 28
  052fc	e5933000	 ldr         r3, [r3]
  05300	e3530000	 cmp         r3, #0
  05304	0a000001	 beq         |$LN27@CursorOn|
  05308		 |$LN26@CursorOn|

; 2204 :         goto cleanUp;

  05308	ea000184	 b           |$LN25@CursorOn|
  0530c	ea000183	 b           |$cleanUp$42875|
  05310		 |$LN27@CursorOn|

; 2205 : 
; 2206 :     if (m_cursorStore == NULL) 

  05310	e59d3054	 ldr         r3, [sp, #0x54]
  05314	e2833f5e	 add         r3, r3, #0x5E, 30
  05318	e5933000	 ldr         r3, [r3]
  0531c	e3530000	 cmp         r3, #0
  05320	1a00000c	 bne         |$LN24@CursorOn|

; 2207 :     {
; 2208 :         DEBUGMSG(GPE_ZONE_ERROR, (L"OMAPDDGPE::CursorOn: "
; 2209 :             L"No cursor store available\r\n"
; 2210 :         ));

  05324	e59f3630	 ldr         r3, [pc, #0x630]
  05328	e5933440	 ldr         r3, [r3, #0x440]
  0532c	e3130001	 tst         r3, #1
  05330	0a000004	 beq         |$LN32@CursorOn|
  05334	e59f0624	 ldr         r0, [pc, #0x624]
  05338	eb000000	 bl          NKDbgPrintfW
  0533c	e3a03001	 mov         r3, #1
  05340	e58d3038	 str         r3, [sp, #0x38]
  05344	ea000001	 b           |$LN33@CursorOn|
  05348		 |$LN32@CursorOn|
  05348	e3a03000	 mov         r3, #0
  0534c	e58d3038	 str         r3, [sp, #0x38]
  05350		 |$LN33@CursorOn|

; 2211 :         goto cleanUp;

  05350	ea000172	 b           |$LN23@CursorOn|
  05354	ea000171	 b           |$cleanUp$42875|
  05358		 |$LN24@CursorOn|

; 2212 :     }
; 2213 : 
; 2214 :     // We support only 1,2,3 and 4 bytes per pixel
; 2215 :     bytesPerPixel = (m_pMode->Bpp + 7) >> 3;

  05358	e59d3054	 ldr         r3, [sp, #0x54]
  0535c	e2833010	 add         r3, r3, #0x10
  05360	e5933000	 ldr         r3, [r3]
  05364	e283300c	 add         r3, r3, #0xC
  05368	e5933000	 ldr         r3, [r3]
  0536c	e2833007	 add         r3, r3, #7
  05370	e1a031c3	 mov         r3, r3, asr #3
  05374	e58d3018	 str         r3, [sp, #0x18]

; 2216 :     if (bytesPerPixel <= 0 || bytesPerPixel > 4) goto cleanUp;

  05378	e59d3018	 ldr         r3, [sp, #0x18]
  0537c	e3530000	 cmp         r3, #0
  05380	da000002	 ble         |$LN21@CursorOn|
  05384	e59d3018	 ldr         r3, [sp, #0x18]
  05388	e3530004	 cmp         r3, #4
  0538c	da000001	 ble         |$LN22@CursorOn|
  05390		 |$LN21@CursorOn|
  05390	ea000162	 b           |$LN20@CursorOn|
  05394	ea000161	 b           |$cleanUp$42875|
  05398		 |$LN22@CursorOn|

; 2217 :     
; 2218 :     // Get some base metrics
; 2219 :     pFrame = (UCHAR*)m_pPrimarySurface->Buffer();

  05398	e59d3054	 ldr         r3, [sp, #0x54]
  0539c	e2833004	 add         r3, r3, #4
  053a0	e5930000	 ldr         r0, [r3]
  053a4	eb000000	 bl          |?Buffer@GPESurf@@QAAPAXXZ|
  053a8	e58d003c	 str         r0, [sp, #0x3C]
  053ac	e59d303c	 ldr         r3, [sp, #0x3C]
  053b0	e58d3004	 str         r3, [sp, #4]

; 2220 :     bytesPerLine = m_pPrimarySurface->Stride();

  053b4	e59d3054	 ldr         r3, [sp, #0x54]
  053b8	e2833004	 add         r3, r3, #4
  053bc	e5930000	 ldr         r0, [r3]
  053c0	eb000000	 bl          |?Stride@GPESurf@@QAAHXZ|
  053c4	e58d0040	 str         r0, [sp, #0x40]
  053c8	e59d3040	 ldr         r3, [sp, #0x40]
  053cc	e58d3028	 str         r3, [sp, #0x28]

; 2221 : 
; 2222 :     for (yf = m_cursorRect.top, yc = 0; yf < m_cursorRect.bottom; yf++, yc++) 

  053d0	e59d3054	 ldr         r3, [sp, #0x54]
  053d4	e2833f57	 add         r3, r3, #0x57, 30
  053d8	e5933000	 ldr         r3, [r3]
  053dc	e58d3008	 str         r3, [sp, #8]
  053e0	e3a03000	 mov         r3, #0
  053e4	e58d3024	 str         r3, [sp, #0x24]
  053e8	ea000005	 b           |$LN19@CursorOn|
  053ec		 |$LN18@CursorOn|
  053ec	e59d3008	 ldr         r3, [sp, #8]
  053f0	e2833001	 add         r3, r3, #1
  053f4	e58d3008	 str         r3, [sp, #8]
  053f8	e59d3024	 ldr         r3, [sp, #0x24]
  053fc	e2833001	 add         r3, r3, #1
  05400	e58d3024	 str         r3, [sp, #0x24]
  05404		 |$LN19@CursorOn|
  05404	e59d3054	 ldr         r3, [sp, #0x54]
  05408	e2833f59	 add         r3, r3, #0x59, 30
  0540c	e59d2008	 ldr         r2, [sp, #8]
  05410	e5933000	 ldr         r3, [r3]
  05414	e1520003	 cmp         r2, r3
  05418	aa00013c	 bge         |$LN17@CursorOn|

; 2223 :     {
; 2224 :         // Check if we are done
; 2225 :         if (yf < 0) continue;

  0541c	e59d3008	 ldr         r3, [sp, #8]
  05420	e3530000	 cmp         r3, #0
  05424	aa000000	 bge         |$LN16@CursorOn|
  05428	eaffffef	 b           |$LN18@CursorOn|
  0542c		 |$LN16@CursorOn|

; 2226 :         if (yf >= m_pMode->height) break;

  0542c	e59d3054	 ldr         r3, [sp, #0x54]
  05430	e2833010	 add         r3, r3, #0x10
  05434	e5933000	 ldr         r3, [r3]
  05438	e2833008	 add         r3, r3, #8
  0543c	e59d2008	 ldr         r2, [sp, #8]
  05440	e5933000	 ldr         r3, [r3]
  05444	e1520003	 cmp         r2, r3
  05448	ba000000	 blt         |$LN15@CursorOn|
  0544c	ea00012f	 b           |$LN17@CursorOn|
  05450		 |$LN15@CursorOn|

; 2227 :     
; 2228 :         pFrameLine = &pFrame[yf * bytesPerLine];

  05450	e59d1008	 ldr         r1, [sp, #8]
  05454	e59d3028	 ldr         r3, [sp, #0x28]
  05458	e0020391	 mul         r2, r1, r3
  0545c	e59d3004	 ldr         r3, [sp, #4]
  05460	e0833002	 add         r3, r3, r2
  05464	e58d300c	 str         r3, [sp, #0xC]

; 2229 :         pStoreLine = &m_cursorStore[yc * m_cursorSize.x * bytesPerPixel];

  05468	e59d3054	 ldr         r3, [sp, #0x54]
  0546c	e2830f5e	 add         r0, r3, #0x5E, 30
  05470	e59d3054	 ldr         r3, [sp, #0x54]
  05474	e2833f5a	 add         r3, r3, #0x5A, 30
  05478	e59d2024	 ldr         r2, [sp, #0x24]
  0547c	e5933000	 ldr         r3, [r3]
  05480	e0010392	 mul         r1, r2, r3
  05484	e59d3018	 ldr         r3, [sp, #0x18]
  05488	e0020391	 mul         r2, r1, r3
  0548c	e5903000	 ldr         r3, [r0]
  05490	e0833002	 add         r3, r3, r2
  05494	e58d3020	 str         r3, [sp, #0x20]

; 2230 :         pAndLine = &m_cursorAnd[yc * m_cursorSize.x * bytesPerPixel];

  05498	e59d3054	 ldr         r3, [sp, #0x54]
  0549c	e2830d06	 add         r0, r3, #6, 26
  054a0	e59d3054	 ldr         r3, [sp, #0x54]
  054a4	e2833f5a	 add         r3, r3, #0x5A, 30
  054a8	e59d2024	 ldr         r2, [sp, #0x24]
  054ac	e5933000	 ldr         r3, [r3]
  054b0	e0010392	 mul         r1, r2, r3
  054b4	e59d3018	 ldr         r3, [sp, #0x18]
  054b8	e0020391	 mul         r2, r1, r3
  054bc	e5903000	 ldr         r3, [r0]
  054c0	e0833002	 add         r3, r3, r2
  054c4	e58d3014	 str         r3, [sp, #0x14]

; 2231 :         pXorLine = &m_cursorXor[yc * m_cursorSize.x * bytesPerPixel];

  054c8	e59d3054	 ldr         r3, [sp, #0x54]
  054cc	e2830f5f	 add         r0, r3, #0x5F, 30
  054d0	e59d3054	 ldr         r3, [sp, #0x54]
  054d4	e2833f5a	 add         r3, r3, #0x5A, 30
  054d8	e59d2024	 ldr         r2, [sp, #0x24]
  054dc	e5933000	 ldr         r3, [r3]
  054e0	e0010392	 mul         r1, r2, r3
  054e4	e59d3018	 ldr         r3, [sp, #0x18]
  054e8	e0020391	 mul         r2, r1, r3
  054ec	e5903000	 ldr         r3, [r0]
  054f0	e0833002	 add         r3, r3, r2
  054f4	e58d3000	 str         r3, [sp]

; 2232 :     
; 2233 :         for (xf = m_cursorRect.left, xc = 0; xf < m_cursorRect.right; xf++, xc++) 

  054f8	e59d3054	 ldr         r3, [sp, #0x54]
  054fc	e2833f56	 add         r3, r3, #0x56, 30
  05500	e5933000	 ldr         r3, [r3]
  05504	e58d301c	 str         r3, [sp, #0x1C]
  05508	e3a03000	 mov         r3, #0
  0550c	e58d302c	 str         r3, [sp, #0x2C]
  05510	ea000005	 b           |$LN14@CursorOn|
  05514		 |$LN13@CursorOn|
  05514	e59d301c	 ldr         r3, [sp, #0x1C]
  05518	e2833001	 add         r3, r3, #1
  0551c	e58d301c	 str         r3, [sp, #0x1C]
  05520	e59d302c	 ldr         r3, [sp, #0x2C]
  05524	e2833001	 add         r3, r3, #1
  05528	e58d302c	 str         r3, [sp, #0x2C]
  0552c		 |$LN14@CursorOn|
  0552c	e59d3054	 ldr         r3, [sp, #0x54]
  05530	e2833e16	 add         r3, r3, #0x16, 28
  05534	e59d201c	 ldr         r2, [sp, #0x1C]
  05538	e5933000	 ldr         r3, [r3]
  0553c	e1520003	 cmp         r2, r3
  05540	aa0000f1	 bge         |$LN12@CursorOn|

; 2234 :         {
; 2235 :             // Check if we are done
; 2236 :             if (xf < 0) continue;

  05544	e59d301c	 ldr         r3, [sp, #0x1C]
  05548	e3530000	 cmp         r3, #0
  0554c	aa000000	 bge         |$LN11@CursorOn|
  05550	eaffffef	 b           |$LN13@CursorOn|
  05554		 |$LN11@CursorOn|

; 2237 :             if (xf >= m_pMode->width) break;

  05554	e59d3054	 ldr         r3, [sp, #0x54]
  05558	e2833010	 add         r3, r3, #0x10
  0555c	e5933000	 ldr         r3, [r3]
  05560	e2833004	 add         r3, r3, #4
  05564	e59d201c	 ldr         r2, [sp, #0x1C]
  05568	e5933000	 ldr         r3, [r3]
  0556c	e1520003	 cmp         r2, r3
  05570	ba000000	 blt         |$LN10@CursorOn|
  05574	ea0000e4	 b           |$LN12@CursorOn|
  05578		 |$LN10@CursorOn|

; 2238 : 
; 2239 :             // Depending on bytes per pixel
; 2240 :             switch (bytesPerPixel) 

  05578	e59d3018	 ldr         r3, [sp, #0x18]
  0557c	e58d3044	 str         r3, [sp, #0x44]
  05580	e59d3044	 ldr         r3, [sp, #0x44]
  05584	e2433001	 sub         r3, r3, #1
  05588	e58d3044	 str         r3, [sp, #0x44]
  0558c	e59d3044	 ldr         r3, [sp, #0x44]
  05590	e3530003	 cmp         r3, #3
  05594	8a0000db	 bhi         |$LN8@CursorOn|
  05598	e59d2044	 ldr         r2, [sp, #0x44]
  0559c	e1a03102	 mov         r3, r2, lsl #2
  055a0	e083300f	 add         r3, r3, pc
  055a4	e5933004	 ldr         r3, [r3, #4]
  055a8	e08ff003	 add         pc, pc, r3
  055ac		 |$LN37@CursorOn|
  055ac		 |$LN36@CursorOn|
  055ac		 |$LN38@CursorOn|
  055ac	0000000c	 DCD         0xc
  055b0		 |$LN39@CursorOn|
  055b0	000000a8	 DCD         0xa8
  055b4		 |$LN40@CursorOn|
  055b4	0000018c	 DCD         0x18c
  055b8		 |$LN41@CursorOn|
  055b8	00000290	 DCD         0x290
  055bc		 |$LN7@CursorOn|

; 2241 :             {
; 2242 :                 case 1:
; 2243 :                     pStoreLine[xc] = pFrameLine[xf];

  055bc	e59d200c	 ldr         r2, [sp, #0xC]
  055c0	e59d301c	 ldr         r3, [sp, #0x1C]
  055c4	e0821003	 add         r1, r2, r3
  055c8	e59d2020	 ldr         r2, [sp, #0x20]
  055cc	e59d302c	 ldr         r3, [sp, #0x2C]
  055d0	e0822003	 add         r2, r2, r3
  055d4	e5d13000	 ldrb        r3, [r1]
  055d8	e5c23000	 strb        r3, [r2]

; 2244 :                     pFrameLine[xf] &= pAndLine[xc];

  055dc	e59d200c	 ldr         r2, [sp, #0xC]
  055e0	e59d301c	 ldr         r3, [sp, #0x1C]
  055e4	e0821003	 add         r1, r2, r3
  055e8	e59d2014	 ldr         r2, [sp, #0x14]
  055ec	e59d302c	 ldr         r3, [sp, #0x2C]
  055f0	e0823003	 add         r3, r2, r3
  055f4	e5d33000	 ldrb        r3, [r3]
  055f8	e1a02003	 mov         r2, r3
  055fc	e5d13000	 ldrb        r3, [r1]
  05600	e0031002	 and         r1, r3, r2
  05604	e59d200c	 ldr         r2, [sp, #0xC]
  05608	e59d301c	 ldr         r3, [sp, #0x1C]
  0560c	e0822003	 add         r2, r2, r3
  05610	e20130ff	 and         r3, r1, #0xFF
  05614	e5c23000	 strb        r3, [r2]

; 2245 :                     pFrameLine[xf] ^= pXorLine[xc];

  05618	e59d200c	 ldr         r2, [sp, #0xC]
  0561c	e59d301c	 ldr         r3, [sp, #0x1C]
  05620	e0821003	 add         r1, r2, r3
  05624	e59d2000	 ldr         r2, [sp]
  05628	e59d302c	 ldr         r3, [sp, #0x2C]
  0562c	e0823003	 add         r3, r2, r3
  05630	e5d33000	 ldrb        r3, [r3]
  05634	e1a02003	 mov         r2, r3
  05638	e5d13000	 ldrb        r3, [r1]
  0563c	e0231002	 eor         r1, r3, r2
  05640	e59d200c	 ldr         r2, [sp, #0xC]
  05644	e59d301c	 ldr         r3, [sp, #0x1C]
  05648	e0822003	 add         r2, r2, r3
  0564c	e20130ff	 and         r3, r1, #0xFF
  05650	e5c23000	 strb        r3, [r2]

; 2246 :                     break;

  05654	ea0000ab	 b           |$LN8@CursorOn|
  05658		 |$LN6@CursorOn|

; 2247 : 
; 2248 :                 case 2:
; 2249 :                     ((USHORT*)pStoreLine)[xc]  = ((USHORT*)pFrameLine)[xf];

  05658	e59d101c	 ldr         r1, [sp, #0x1C]
  0565c	e3a03002	 mov         r3, #2
  05660	e0020391	 mul         r2, r1, r3
  05664	e59d300c	 ldr         r3, [sp, #0xC]
  05668	e0830002	 add         r0, r3, r2
  0566c	e59d102c	 ldr         r1, [sp, #0x2C]
  05670	e3a03002	 mov         r3, #2
  05674	e0020391	 mul         r2, r1, r3
  05678	e59d3020	 ldr         r3, [sp, #0x20]
  0567c	e0832002	 add         r2, r3, r2
  05680	e1d030b0	 ldrh        r3, [r0]
  05684	e1c230b0	 strh        r3, [r2]

; 2250 :                     ((USHORT*)pFrameLine)[xf] &= ((USHORT*)pAndLine)[xc];

  05688	e59d101c	 ldr         r1, [sp, #0x1C]
  0568c	e3a03002	 mov         r3, #2
  05690	e0020391	 mul         r2, r1, r3
  05694	e59d300c	 ldr         r3, [sp, #0xC]
  05698	e0830002	 add         r0, r3, r2
  0569c	e59d102c	 ldr         r1, [sp, #0x2C]
  056a0	e3a03002	 mov         r3, #2
  056a4	e0020391	 mul         r2, r1, r3
  056a8	e59d3014	 ldr         r3, [sp, #0x14]
  056ac	e0833002	 add         r3, r3, r2
  056b0	e1d330b0	 ldrh        r3, [r3]
  056b4	e1a02003	 mov         r2, r3
  056b8	e1d030b0	 ldrh        r3, [r0]
  056bc	e0030002	 and         r0, r3, r2
  056c0	e59d101c	 ldr         r1, [sp, #0x1C]
  056c4	e3a03002	 mov         r3, #2
  056c8	e0020391	 mul         r2, r1, r3
  056cc	e59d300c	 ldr         r3, [sp, #0xC]
  056d0	e0832002	 add         r2, r3, r2
  056d4	e1a03800	 mov         r3, r0, lsl #16
  056d8	e1a03823	 mov         r3, r3, lsr #16
  056dc	e1c230b0	 strh        r3, [r2]

; 2251 :                     ((USHORT*)pFrameLine)[xf] ^= ((USHORT*)pXorLine)[xc];

  056e0	e59d101c	 ldr         r1, [sp, #0x1C]
  056e4	e3a03002	 mov         r3, #2
  056e8	e0020391	 mul         r2, r1, r3
  056ec	e59d300c	 ldr         r3, [sp, #0xC]
  056f0	e0830002	 add         r0, r3, r2
  056f4	e59d102c	 ldr         r1, [sp, #0x2C]
  056f8	e3a03002	 mov         r3, #2
  056fc	e0020391	 mul         r2, r1, r3
  05700	e59d3000	 ldr         r3, [sp]
  05704	e0833002	 add         r3, r3, r2
  05708	e1d330b0	 ldrh        r3, [r3]
  0570c	e1a02003	 mov         r2, r3
  05710	e1d030b0	 ldrh        r3, [r0]
  05714	e0230002	 eor         r0, r3, r2
  05718	e59d101c	 ldr         r1, [sp, #0x1C]
  0571c	e3a03002	 mov         r3, #2
  05720	e0020391	 mul         r2, r1, r3
  05724	e59d300c	 ldr         r3, [sp, #0xC]
  05728	e0832002	 add         r2, r3, r2
  0572c	e1a03800	 mov         r3, r0, lsl #16
  05730	e1a03823	 mov         r3, r3, lsr #16
  05734	e1c230b0	 strh        r3, [r2]

; 2252 :                     break;

  05738	ea000072	 b           |$LN8@CursorOn|
  0573c		 |$LN5@CursorOn|

; 2253 : 
; 2254 :                 case 3:
; 2255 :                     for (i = 0; i < bytesPerPixel; i++) {

  0573c	e3a03000	 mov         r3, #0
  05740	e58d3010	 str         r3, [sp, #0x10]
  05744	ea000002	 b           |$LN4@CursorOn|
  05748		 |$LN3@CursorOn|
  05748	e59d3010	 ldr         r3, [sp, #0x10]
  0574c	e2833001	 add         r3, r3, #1
  05750	e58d3010	 str         r3, [sp, #0x10]
  05754		 |$LN4@CursorOn|
  05754	e59d2010	 ldr         r2, [sp, #0x10]
  05758	e59d3018	 ldr         r3, [sp, #0x18]
  0575c	e1520003	 cmp         r2, r3
  05760	aa000035	 bge         |$LN2@CursorOn|

; 2256 :                         data = pFrameLine[xf * bytesPerPixel + i];

  05764	e59d101c	 ldr         r1, [sp, #0x1C]
  05768	e59d3018	 ldr         r3, [sp, #0x18]
  0576c	e0020391	 mul         r2, r1, r3
  05770	e59d3010	 ldr         r3, [sp, #0x10]
  05774	e0822003	 add         r2, r2, r3
  05778	e59d300c	 ldr         r3, [sp, #0xC]
  0577c	e0833002	 add         r3, r3, r2
  05780	e5d33000	 ldrb        r3, [r3]
  05784	e5cd3030	 strb        r3, [sp, #0x30]

; 2257 :                         pStoreLine[xc * bytesPerPixel + i] = data;

  05788	e59d102c	 ldr         r1, [sp, #0x2C]
  0578c	e59d3018	 ldr         r3, [sp, #0x18]
  05790	e0020391	 mul         r2, r1, r3
  05794	e59d3010	 ldr         r3, [sp, #0x10]
  05798	e0822003	 add         r2, r2, r3
  0579c	e59d3020	 ldr         r3, [sp, #0x20]
  057a0	e0832002	 add         r2, r3, r2
  057a4	e5dd3030	 ldrb        r3, [sp, #0x30]
  057a8	e5c23000	 strb        r3, [r2]

; 2258 :                         data &= pAndLine[xc * bytesPerPixel + i];

  057ac	e59d102c	 ldr         r1, [sp, #0x2C]
  057b0	e59d3018	 ldr         r3, [sp, #0x18]
  057b4	e0020391	 mul         r2, r1, r3
  057b8	e59d3010	 ldr         r3, [sp, #0x10]
  057bc	e0822003	 add         r2, r2, r3
  057c0	e59d3014	 ldr         r3, [sp, #0x14]
  057c4	e0833002	 add         r3, r3, r2
  057c8	e5d33000	 ldrb        r3, [r3]
  057cc	e1a02003	 mov         r2, r3
  057d0	e5dd3030	 ldrb        r3, [sp, #0x30]
  057d4	e0033002	 and         r3, r3, r2
  057d8	e20330ff	 and         r3, r3, #0xFF
  057dc	e5cd3030	 strb        r3, [sp, #0x30]

; 2259 :                         data ^= pXorLine[xc * bytesPerPixel + i];

  057e0	e59d102c	 ldr         r1, [sp, #0x2C]
  057e4	e59d3018	 ldr         r3, [sp, #0x18]
  057e8	e0020391	 mul         r2, r1, r3
  057ec	e59d3010	 ldr         r3, [sp, #0x10]
  057f0	e0822003	 add         r2, r2, r3
  057f4	e59d3000	 ldr         r3, [sp]
  057f8	e0833002	 add         r3, r3, r2
  057fc	e5d33000	 ldrb        r3, [r3]
  05800	e1a02003	 mov         r2, r3
  05804	e5dd3030	 ldrb        r3, [sp, #0x30]
  05808	e0233002	 eor         r3, r3, r2
  0580c	e20330ff	 and         r3, r3, #0xFF
  05810	e5cd3030	 strb        r3, [sp, #0x30]

; 2260 :                         pFrameLine[xf * bytesPerPixel + i] = data;

  05814	e59d101c	 ldr         r1, [sp, #0x1C]
  05818	e59d3018	 ldr         r3, [sp, #0x18]
  0581c	e0020391	 mul         r2, r1, r3
  05820	e59d3010	 ldr         r3, [sp, #0x10]
  05824	e0822003	 add         r2, r2, r3
  05828	e59d300c	 ldr         r3, [sp, #0xC]
  0582c	e0832002	 add         r2, r3, r2
  05830	e5dd3030	 ldrb        r3, [sp, #0x30]
  05834	e5c23000	 strb        r3, [r2]

; 2261 :                     }                    

  05838	eaffffc2	 b           |$LN3@CursorOn|
  0583c		 |$LN2@CursorOn|

; 2262 :                     break;

  0583c	ea000031	 b           |$LN8@CursorOn|
  05840		 |$LN1@CursorOn|

; 2263 : 
; 2264 :                 case 4:
; 2265 :                     ((ULONG*)pStoreLine)[xc]  = ((ULONG*)pFrameLine)[xf];

  05840	e59d101c	 ldr         r1, [sp, #0x1C]
  05844	e3a03004	 mov         r3, #4
  05848	e0020391	 mul         r2, r1, r3
  0584c	e59d300c	 ldr         r3, [sp, #0xC]
  05850	e0830002	 add         r0, r3, r2
  05854	e59d102c	 ldr         r1, [sp, #0x2C]
  05858	e3a03004	 mov         r3, #4
  0585c	e0020391	 mul         r2, r1, r3
  05860	e59d3020	 ldr         r3, [sp, #0x20]
  05864	e0832002	 add         r2, r3, r2
  05868	e5903000	 ldr         r3, [r0]
  0586c	e5823000	 str         r3, [r2]

; 2266 :                     ((ULONG*)pFrameLine)[xf] &= ((ULONG*)pAndLine)[xc];

  05870	e59d101c	 ldr         r1, [sp, #0x1C]
  05874	e3a03004	 mov         r3, #4
  05878	e0020391	 mul         r2, r1, r3
  0587c	e59d300c	 ldr         r3, [sp, #0xC]
  05880	e0830002	 add         r0, r3, r2
  05884	e59d102c	 ldr         r1, [sp, #0x2C]
  05888	e3a03004	 mov         r3, #4
  0588c	e0020391	 mul         r2, r1, r3
  05890	e59d3014	 ldr         r3, [sp, #0x14]
  05894	e0833002	 add         r3, r3, r2
  05898	e5902000	 ldr         r2, [r0]
  0589c	e5933000	 ldr         r3, [r3]
  058a0	e0020003	 and         r0, r2, r3
  058a4	e59d101c	 ldr         r1, [sp, #0x1C]
  058a8	e3a03004	 mov         r3, #4
  058ac	e0020391	 mul         r2, r1, r3
  058b0	e59d300c	 ldr         r3, [sp, #0xC]
  058b4	e0833002	 add         r3, r3, r2
  058b8	e5830000	 str         r0, [r3]

; 2267 :                     ((ULONG*)pFrameLine)[xf] ^= ((ULONG*)pXorLine)[xc];

  058bc	e59d101c	 ldr         r1, [sp, #0x1C]
  058c0	e3a03004	 mov         r3, #4
  058c4	e0020391	 mul         r2, r1, r3
  058c8	e59d300c	 ldr         r3, [sp, #0xC]
  058cc	e0830002	 add         r0, r3, r2
  058d0	e59d102c	 ldr         r1, [sp, #0x2C]
  058d4	e3a03004	 mov         r3, #4
  058d8	e0020391	 mul         r2, r1, r3
  058dc	e59d3000	 ldr         r3, [sp]
  058e0	e0833002	 add         r3, r3, r2
  058e4	e5902000	 ldr         r2, [r0]
  058e8	e5933000	 ldr         r3, [r3]
  058ec	e0220003	 eor         r0, r2, r3
  058f0	e59d101c	 ldr         r1, [sp, #0x1C]
  058f4	e3a03004	 mov         r3, #4
  058f8	e0020391	 mul         r2, r1, r3
  058fc	e59d300c	 ldr         r3, [sp, #0xC]
  05900	e0833002	 add         r3, r3, r2
  05904	e5830000	 str         r0, [r3]
  05908		 |$LN8@CursorOn|

; 2268 :                     break;
; 2269 :             }                    
; 2270 :         }

  05908	eaffff01	 b           |$LN13@CursorOn|
  0590c		 |$LN12@CursorOn|

; 2271 :     }

  0590c	eafffeb6	 b           |$LN18@CursorOn|
  05910		 |$LN17@CursorOn|

; 2272 :     
; 2273 :     // Cursor is visible now
; 2274 :     m_cursorVisible = TRUE;

  05910	e59d3054	 ldr         r3, [sp, #0x54]
  05914	e2832e15	 add         r2, r3, #0x15, 28
  05918	e3a03001	 mov         r3, #1
  0591c	e5823000	 str         r3, [r2]
  05920		 |$LN20@CursorOn|
  05920		 |$LN23@CursorOn|
  05920		 |$LN25@CursorOn|
  05920		 |$cleanUp$42875|

; 2275 : 
; 2276 : cleanUp: 
; 2277 :     DEBUGMSG(GPE_ZONE_CURSOR, (L"-OMAPDDGPE::CursonOn\r\n"));

  05920	e59f3034	 ldr         r3, [pc, #0x34]
  05924	e5933440	 ldr         r3, [r3, #0x440]
  05928	e3130a02	 tst         r3, #2, 20
  0592c	0a000004	 beq         |$LN34@CursorOn|
  05930	e59f0020	 ldr         r0, [pc, #0x20]
  05934	eb000000	 bl          NKDbgPrintfW
  05938	e3a03001	 mov         r3, #1
  0593c	e58d3048	 str         r3, [sp, #0x48]
  05940	ea000001	 b           |$LN35@CursorOn|
  05944		 |$LN34@CursorOn|
  05944	e3a03000	 mov         r3, #0
  05948	e58d3048	 str         r3, [sp, #0x48]
  0594c		 |$LN35@CursorOn|

; 2278 :     return;
; 2279 : }

  0594c	e28dd04c	 add         sp, sp, #0x4C
  05950	e89d6000	 ldmia       sp, {sp, lr}
  05954	e12fff1e	 bx          lr
  05958		 |$LN45@CursorOn|
  05958		 |$LN46@CursorOn|
  05958	00000000	 DCD         |??_C@_1CO@GJJACCKM@?$AA?9?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAC?$AAu?$AAr?$AAs?$AAo?$AAn?$AAO?$AAn?$AA?$AN?$AA?6?$AA?$AA@|
  0595c		 |$LN47@CursorOn|
  0595c	00000000	 DCD         |dpCurSettings|
  05960		 |$LN48@CursorOn|
  05960	00000000	 DCD         |??_C@_1GC@ELAMFGJG@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAC?$AAu?$AAr?$AAs?$AAo?$AAr?$AAO?$AAn?$AA?3?$AA?5?$AAN?$AAo?$AA?5?$AAc?$AAu?$AAr?$AAs?$AAo?$AAr?$AA?5?$AAs@|
  05964		 |$LN49@CursorOn|
  05964	00000000	 DCD         |??_C@_1CO@LCFEHNIH@?$AA?$CL?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAC?$AAu?$AAr?$AAs?$AAo?$AAn?$AAO?$AAn?$AA?$AN?$AA?6?$AA?$AA@|
  05968		 |$M44043|

			 ENDP  ; |?CursorOn@OMAPDDGPE@@QAAXXZ|, OMAPDDGPE::CursorOn

	EXPORT	|??_C@_1DA@DLDMPHFE@?$AA?9?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAC?$AAu?$AAr?$AAs?$AAo?$AAn?$AAO?$AAf?$AAf?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GE@BEANHEM@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAC?$AAu?$AAr?$AAs?$AAo?$AAr?$AAO?$AAf?$AAf?$AA?3?$AA?5?$AAN?$AAo?$AA?5?$AAc?$AAu?$AAr?$AAs?$AAo?$AAr?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DA@LGJIJNJM@?$AA?$CL?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAC?$AAu?$AAr?$AAs?$AAo?$AAn?$AAO?$AAf?$AAf?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00120			 AREA	 |.pdata|, PDATA
|$T44067| DCD	|$LN44@CursorOff|
	DCD	0x40010b04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@DLDMPHFE@?$AA?9?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAC?$AAu?$AAr?$AAs?$AAo?$AAn?$AAO?$AAf?$AAf?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "M", 0x0, "A", 0x0, "P", 0x0, "D", 0x0, "D"
	DCB	0x0, "G", 0x0, "P", 0x0, "E", 0x0, ":", 0x0, ":", 0x0, "C"
	DCB	0x0, "u", 0x0, "r", 0x0, "s", 0x0, "o", 0x0, "n", 0x0, "O"
	DCB	0x0, "f", 0x0, "f", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GE@BEANHEM@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAC?$AAu?$AAr?$AAs?$AAo?$AAr?$AAO?$AAf?$AAf?$AA?3?$AA?5?$AAN?$AAo?$AA?5?$AAc?$AAu?$AAr?$AAs?$AAo?$AAr?$AA?5@| DCB "O"
	DCB	0x0, "M", 0x0, "A", 0x0, "P", 0x0, "D", 0x0, "D", 0x0, "G"
	DCB	0x0, "P", 0x0, "E", 0x0, ":", 0x0, ":", 0x0, "C", 0x0, "u"
	DCB	0x0, "r", 0x0, "s", 0x0, "o", 0x0, "r", 0x0, "O", 0x0, "f"
	DCB	0x0, "f", 0x0, ":", 0x0, " ", 0x0, "N", 0x0, "o", 0x0, " "
	DCB	0x0, "c", 0x0, "u", 0x0, "r", 0x0, "s", 0x0, "o", 0x0, "r"
	DCB	0x0, " ", 0x0, "s", 0x0, "t", 0x0, "o", 0x0, "r", 0x0, "e"
	DCB	0x0, " ", 0x0, "a", 0x0, "v", 0x0, "a", 0x0, "i", 0x0, "l"
	DCB	0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@LGJIJNJM@?$AA?$CL?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAC?$AAu?$AAr?$AAs?$AAo?$AAn?$AAO?$AAf?$AAf?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "O", 0x0, "M", 0x0, "A", 0x0, "P", 0x0, "D", 0x0, "D"
	DCB	0x0, "G", 0x0, "P", 0x0, "E", 0x0, ":", 0x0, ":", 0x0, "C"
	DCB	0x0, "u", 0x0, "r", 0x0, "s", 0x0, "o", 0x0, "n", 0x0, "O"
	DCB	0x0, "f", 0x0, "f", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  05968			 AREA	 |.text|, CODE, ARM

  05968		 |?CursorOff@OMAPDDGPE@@QAAXXZ| PROC	; OMAPDDGPE::CursorOff

; 2284 : {

  05968		 |$LN44@CursorOff|
  05968	e1a0c00d	 mov         r12, sp
  0596c	e92d0001	 stmdb       sp!, {r0}
  05970	e92d5000	 stmdb       sp!, {r12, lr}
  05974	e24dd044	 sub         sp, sp, #0x44
  05978		 |$M44064|

; 2285 :     UCHAR *pFrame, *pFrameLine, *pStoreLine, data;
; 2286 :     int bytesPerPixel, bytesPerLine;
; 2287 :     int xf, yf, xc, yc, i;
; 2288 : 
; 2289 :     DEBUGMSG(GPE_ZONE_CURSOR, (L"+OMAPDDGPE::CursonOff\r\n"));

  05978	e59f3408	 ldr         r3, [pc, #0x408]
  0597c	e5933440	 ldr         r3, [r3, #0x440]
  05980	e3130a02	 tst         r3, #2, 20
  05984	0a000004	 beq         |$LN30@CursorOff|
  05988	e59f0400	 ldr         r0, [pc, #0x400]
  0598c	eb000000	 bl          NKDbgPrintfW
  05990	e3a03001	 mov         r3, #1
  05994	e58d302c	 str         r3, [sp, #0x2C]
  05998	ea000001	 b           |$LN31@CursorOff|
  0599c		 |$LN30@CursorOff|
  0599c	e3a03000	 mov         r3, #0
  059a0	e58d302c	 str         r3, [sp, #0x2C]
  059a4		 |$LN31@CursorOff|

; 2290 : 
; 2291 :     if (m_cursorForcedOff || m_cursorDisabled || !m_cursorVisible) 

  059a4	e59d304c	 ldr         r3, [sp, #0x4C]
  059a8	e2833f55	 add         r3, r3, #0x55, 30
  059ac	e5933000	 ldr         r3, [r3]
  059b0	e3530000	 cmp         r3, #0
  059b4	1a000009	 bne         |$LN26@CursorOff|
  059b8	e59d304c	 ldr         r3, [sp, #0x4C]
  059bc	e2833f53	 add         r3, r3, #0x53, 30
  059c0	e5933000	 ldr         r3, [r3]
  059c4	e3530000	 cmp         r3, #0
  059c8	1a000004	 bne         |$LN26@CursorOff|
  059cc	e59d304c	 ldr         r3, [sp, #0x4C]
  059d0	e2833e15	 add         r3, r3, #0x15, 28
  059d4	e5933000	 ldr         r3, [r3]
  059d8	e3530000	 cmp         r3, #0
  059dc	1a000001	 bne         |$LN27@CursorOff|
  059e0		 |$LN26@CursorOff|

; 2292 :         goto cleanUp;

  059e0	ea0000d9	 b           |$LN25@CursorOff|
  059e4	ea0000d8	 b           |$cleanUp$42938|
  059e8		 |$LN27@CursorOff|

; 2293 : 
; 2294 :     if (m_cursorStore == NULL) 

  059e8	e59d304c	 ldr         r3, [sp, #0x4C]
  059ec	e2833f5e	 add         r3, r3, #0x5E, 30
  059f0	e5933000	 ldr         r3, [r3]
  059f4	e3530000	 cmp         r3, #0
  059f8	1a00000c	 bne         |$LN24@CursorOff|

; 2295 :     {
; 2296 :         DEBUGMSG(GPE_ZONE_ERROR, (L"OMAPDDGPE::CursorOff: "
; 2297 :             L"No cursor store available\r\n"
; 2298 :         ));

  059fc	e59f3384	 ldr         r3, [pc, #0x384]
  05a00	e5933440	 ldr         r3, [r3, #0x440]
  05a04	e3130001	 tst         r3, #1
  05a08	0a000004	 beq         |$LN32@CursorOff|
  05a0c	e59f0378	 ldr         r0, [pc, #0x378]
  05a10	eb000000	 bl          NKDbgPrintfW
  05a14	e3a03001	 mov         r3, #1
  05a18	e58d3030	 str         r3, [sp, #0x30]
  05a1c	ea000001	 b           |$LN33@CursorOff|
  05a20		 |$LN32@CursorOff|
  05a20	e3a03000	 mov         r3, #0
  05a24	e58d3030	 str         r3, [sp, #0x30]
  05a28		 |$LN33@CursorOff|

; 2299 :         goto cleanUp;

  05a28	ea0000c7	 b           |$LN23@CursorOff|
  05a2c	ea0000c6	 b           |$cleanUp$42938|
  05a30		 |$LN24@CursorOff|

; 2300 :     }
; 2301 : 
; 2302 :     // We support only 1,2,3 and 4 bytes per pixel
; 2303 :     bytesPerPixel = (m_pMode->Bpp + 7) >> 3;

  05a30	e59d304c	 ldr         r3, [sp, #0x4C]
  05a34	e2833010	 add         r3, r3, #0x10
  05a38	e5933000	 ldr         r3, [r3]
  05a3c	e283300c	 add         r3, r3, #0xC
  05a40	e5933000	 ldr         r3, [r3]
  05a44	e2833007	 add         r3, r3, #7
  05a48	e1a031c3	 mov         r3, r3, asr #3
  05a4c	e58d3010	 str         r3, [sp, #0x10]

; 2304 :     if (bytesPerPixel <= 0 || bytesPerPixel > 4) goto cleanUp;

  05a50	e59d3010	 ldr         r3, [sp, #0x10]
  05a54	e3530000	 cmp         r3, #0
  05a58	da000002	 ble         |$LN21@CursorOff|
  05a5c	e59d3010	 ldr         r3, [sp, #0x10]
  05a60	e3530004	 cmp         r3, #4
  05a64	da000001	 ble         |$LN22@CursorOff|
  05a68		 |$LN21@CursorOff|
  05a68	ea0000b7	 b           |$LN20@CursorOff|
  05a6c	ea0000b6	 b           |$cleanUp$42938|
  05a70		 |$LN22@CursorOff|

; 2305 : 
; 2306 :     // Get some base metrics
; 2307 :     pFrame = (UCHAR*)m_pPrimarySurface->Buffer();

  05a70	e59d304c	 ldr         r3, [sp, #0x4C]
  05a74	e2833004	 add         r3, r3, #4
  05a78	e5930000	 ldr         r0, [r3]
  05a7c	eb000000	 bl          |?Buffer@GPESurf@@QAAPAXXZ|
  05a80	e58d0034	 str         r0, [sp, #0x34]
  05a84	e59d3034	 ldr         r3, [sp, #0x34]
  05a88	e58d3000	 str         r3, [sp]

; 2308 :     bytesPerLine = m_pPrimarySurface->Stride();

  05a8c	e59d304c	 ldr         r3, [sp, #0x4C]
  05a90	e2833004	 add         r3, r3, #4
  05a94	e5930000	 ldr         r0, [r3]
  05a98	eb000000	 bl          |?Stride@GPESurf@@QAAHXZ|
  05a9c	e58d0038	 str         r0, [sp, #0x38]
  05aa0	e59d3038	 ldr         r3, [sp, #0x38]
  05aa4	e58d3020	 str         r3, [sp, #0x20]

; 2309 : 
; 2310 :     for (yf = m_cursorRect.top, yc = 0; yf < m_cursorRect.bottom; yf++, yc++) 

  05aa8	e59d304c	 ldr         r3, [sp, #0x4C]
  05aac	e2833f57	 add         r3, r3, #0x57, 30
  05ab0	e5933000	 ldr         r3, [r3]
  05ab4	e58d3004	 str         r3, [sp, #4]
  05ab8	e3a03000	 mov         r3, #0
  05abc	e58d301c	 str         r3, [sp, #0x1C]
  05ac0	ea000005	 b           |$LN19@CursorOff|
  05ac4		 |$LN18@CursorOff|
  05ac4	e59d3004	 ldr         r3, [sp, #4]
  05ac8	e2833001	 add         r3, r3, #1
  05acc	e58d3004	 str         r3, [sp, #4]
  05ad0	e59d301c	 ldr         r3, [sp, #0x1C]
  05ad4	e2833001	 add         r3, r3, #1
  05ad8	e58d301c	 str         r3, [sp, #0x1C]
  05adc		 |$LN19@CursorOff|
  05adc	e59d304c	 ldr         r3, [sp, #0x4C]
  05ae0	e2833f59	 add         r3, r3, #0x59, 30
  05ae4	e59d2004	 ldr         r2, [sp, #4]
  05ae8	e5933000	 ldr         r3, [r3]
  05aec	e1520003	 cmp         r2, r3
  05af0	aa000091	 bge         |$LN17@CursorOff|

; 2311 :     {
; 2312 :         // Check if we are done
; 2313 :         if (yf < 0) continue;

  05af4	e59d3004	 ldr         r3, [sp, #4]
  05af8	e3530000	 cmp         r3, #0
  05afc	aa000000	 bge         |$LN16@CursorOff|
  05b00	eaffffef	 b           |$LN18@CursorOff|
  05b04		 |$LN16@CursorOff|

; 2314 :         if (yf >= m_pMode->height) break;

  05b04	e59d304c	 ldr         r3, [sp, #0x4C]
  05b08	e2833010	 add         r3, r3, #0x10
  05b0c	e5933000	 ldr         r3, [r3]
  05b10	e2833008	 add         r3, r3, #8
  05b14	e59d2004	 ldr         r2, [sp, #4]
  05b18	e5933000	 ldr         r3, [r3]
  05b1c	e1520003	 cmp         r2, r3
  05b20	ba000000	 blt         |$LN15@CursorOff|
  05b24	ea000084	 b           |$LN17@CursorOff|
  05b28		 |$LN15@CursorOff|

; 2315 : 
; 2316 :         pFrameLine = &pFrame[yf * bytesPerLine];

  05b28	e59d1004	 ldr         r1, [sp, #4]
  05b2c	e59d3020	 ldr         r3, [sp, #0x20]
  05b30	e0020391	 mul         r2, r1, r3
  05b34	e59d3000	 ldr         r3, [sp]
  05b38	e0833002	 add         r3, r3, r2
  05b3c	e58d3008	 str         r3, [sp, #8]

; 2317 :         pStoreLine = &m_cursorStore[yc * m_cursorSize.x * bytesPerPixel];

  05b40	e59d304c	 ldr         r3, [sp, #0x4C]
  05b44	e2830f5e	 add         r0, r3, #0x5E, 30
  05b48	e59d304c	 ldr         r3, [sp, #0x4C]
  05b4c	e2833f5a	 add         r3, r3, #0x5A, 30
  05b50	e59d201c	 ldr         r2, [sp, #0x1C]
  05b54	e5933000	 ldr         r3, [r3]
  05b58	e0010392	 mul         r1, r2, r3
  05b5c	e59d3010	 ldr         r3, [sp, #0x10]
  05b60	e0020391	 mul         r2, r1, r3
  05b64	e5903000	 ldr         r3, [r0]
  05b68	e0833002	 add         r3, r3, r2
  05b6c	e58d3018	 str         r3, [sp, #0x18]

; 2318 :     
; 2319 :         for (xf = m_cursorRect.left, xc = 0; xf < m_cursorRect.right; xf++, xc++) 

  05b70	e59d304c	 ldr         r3, [sp, #0x4C]
  05b74	e2833f56	 add         r3, r3, #0x56, 30
  05b78	e5933000	 ldr         r3, [r3]
  05b7c	e58d3014	 str         r3, [sp, #0x14]
  05b80	e3a03000	 mov         r3, #0
  05b84	e58d3024	 str         r3, [sp, #0x24]
  05b88	ea000005	 b           |$LN14@CursorOff|
  05b8c		 |$LN13@CursorOff|
  05b8c	e59d3014	 ldr         r3, [sp, #0x14]
  05b90	e2833001	 add         r3, r3, #1
  05b94	e58d3014	 str         r3, [sp, #0x14]
  05b98	e59d3024	 ldr         r3, [sp, #0x24]
  05b9c	e2833001	 add         r3, r3, #1
  05ba0	e58d3024	 str         r3, [sp, #0x24]
  05ba4		 |$LN14@CursorOff|
  05ba4	e59d304c	 ldr         r3, [sp, #0x4C]
  05ba8	e2833e16	 add         r3, r3, #0x16, 28
  05bac	e59d2014	 ldr         r2, [sp, #0x14]
  05bb0	e5933000	 ldr         r3, [r3]
  05bb4	e1520003	 cmp         r2, r3
  05bb8	aa00005e	 bge         |$LN12@CursorOff|

; 2320 :         {
; 2321 :             // Check if we are done
; 2322 :             if (xf < 0) continue;

  05bbc	e59d3014	 ldr         r3, [sp, #0x14]
  05bc0	e3530000	 cmp         r3, #0
  05bc4	aa000000	 bge         |$LN11@CursorOff|
  05bc8	eaffffef	 b           |$LN13@CursorOff|
  05bcc		 |$LN11@CursorOff|

; 2323 :             if (xf >= m_pMode->width) break;

  05bcc	e59d304c	 ldr         r3, [sp, #0x4C]
  05bd0	e2833010	 add         r3, r3, #0x10
  05bd4	e5933000	 ldr         r3, [r3]
  05bd8	e2833004	 add         r3, r3, #4
  05bdc	e59d2014	 ldr         r2, [sp, #0x14]
  05be0	e5933000	 ldr         r3, [r3]
  05be4	e1520003	 cmp         r2, r3
  05be8	ba000000	 blt         |$LN10@CursorOff|
  05bec	ea000051	 b           |$LN12@CursorOff|
  05bf0		 |$LN10@CursorOff|

; 2324 :     
; 2325 :             // Depending on bytes per pixel
; 2326 :             switch (bytesPerPixel) 

  05bf0	e59d3010	 ldr         r3, [sp, #0x10]
  05bf4	e58d303c	 str         r3, [sp, #0x3C]
  05bf8	e59d303c	 ldr         r3, [sp, #0x3C]
  05bfc	e2433001	 sub         r3, r3, #1
  05c00	e58d303c	 str         r3, [sp, #0x3C]
  05c04	e59d303c	 ldr         r3, [sp, #0x3C]
  05c08	e3530003	 cmp         r3, #3
  05c0c	8a000048	 bhi         |$LN8@CursorOff|
  05c10	e59d203c	 ldr         r2, [sp, #0x3C]
  05c14	e1a03102	 mov         r3, r2, lsl #2
  05c18	e083300f	 add         r3, r3, pc
  05c1c	e5933004	 ldr         r3, [r3, #4]
  05c20	e08ff003	 add         pc, pc, r3
  05c24		 |$LN37@CursorOff|
  05c24		 |$LN36@CursorOff|
  05c24		 |$LN38@CursorOff|
  05c24	0000000c	 DCD         0xc
  05c28		 |$LN39@CursorOff|
  05c28	00000030	 DCD         0x30
  05c2c		 |$LN40@CursorOff|
  05c2c	00000064	 DCD         0x64
  05c30		 |$LN41@CursorOff|
  05c30	000000dc	 DCD         0xdc
  05c34		 |$LN7@CursorOff|

; 2327 :             {
; 2328 :                 case 1:
; 2329 :                     pFrameLine[xf] = pStoreLine[xc];

  05c34	e59d2018	 ldr         r2, [sp, #0x18]
  05c38	e59d3024	 ldr         r3, [sp, #0x24]
  05c3c	e0821003	 add         r1, r2, r3
  05c40	e59d2008	 ldr         r2, [sp, #8]
  05c44	e59d3014	 ldr         r3, [sp, #0x14]
  05c48	e0822003	 add         r2, r2, r3
  05c4c	e5d13000	 ldrb        r3, [r1]
  05c50	e5c23000	 strb        r3, [r2]

; 2330 :                     break;

  05c54	ea000036	 b           |$LN8@CursorOff|
  05c58		 |$LN6@CursorOff|

; 2331 : 
; 2332 :                 case 2:
; 2333 :                     ((USHORT*)pFrameLine)[xf] = ((USHORT*)pStoreLine)[xc];

  05c58	e59d1024	 ldr         r1, [sp, #0x24]
  05c5c	e3a03002	 mov         r3, #2
  05c60	e0020391	 mul         r2, r1, r3
  05c64	e59d3018	 ldr         r3, [sp, #0x18]
  05c68	e0830002	 add         r0, r3, r2
  05c6c	e59d1014	 ldr         r1, [sp, #0x14]
  05c70	e3a03002	 mov         r3, #2
  05c74	e0020391	 mul         r2, r1, r3
  05c78	e59d3008	 ldr         r3, [sp, #8]
  05c7c	e0832002	 add         r2, r3, r2
  05c80	e1d030b0	 ldrh        r3, [r0]
  05c84	e1c230b0	 strh        r3, [r2]

; 2334 :                     break;

  05c88	ea000029	 b           |$LN8@CursorOff|
  05c8c		 |$LN5@CursorOff|

; 2335 : 
; 2336 :                 case 3:
; 2337 :                     for (i = 0; i < bytesPerPixel; i++) {

  05c8c	e3a03000	 mov         r3, #0
  05c90	e58d300c	 str         r3, [sp, #0xC]
  05c94	ea000002	 b           |$LN4@CursorOff|
  05c98		 |$LN3@CursorOff|
  05c98	e59d300c	 ldr         r3, [sp, #0xC]
  05c9c	e2833001	 add         r3, r3, #1
  05ca0	e58d300c	 str         r3, [sp, #0xC]
  05ca4		 |$LN4@CursorOff|
  05ca4	e59d200c	 ldr         r2, [sp, #0xC]
  05ca8	e59d3010	 ldr         r3, [sp, #0x10]
  05cac	e1520003	 cmp         r2, r3
  05cb0	aa000012	 bge         |$LN2@CursorOff|

; 2338 :                         data = pStoreLine[xc * bytesPerPixel + i];

  05cb4	e59d1024	 ldr         r1, [sp, #0x24]
  05cb8	e59d3010	 ldr         r3, [sp, #0x10]
  05cbc	e0020391	 mul         r2, r1, r3
  05cc0	e59d300c	 ldr         r3, [sp, #0xC]
  05cc4	e0822003	 add         r2, r2, r3
  05cc8	e59d3018	 ldr         r3, [sp, #0x18]
  05ccc	e0833002	 add         r3, r3, r2
  05cd0	e5d33000	 ldrb        r3, [r3]
  05cd4	e5cd3028	 strb        r3, [sp, #0x28]

; 2339 :                         pFrameLine[xf * bytesPerPixel + i] = data;

  05cd8	e59d1014	 ldr         r1, [sp, #0x14]
  05cdc	e59d3010	 ldr         r3, [sp, #0x10]
  05ce0	e0020391	 mul         r2, r1, r3
  05ce4	e59d300c	 ldr         r3, [sp, #0xC]
  05ce8	e0822003	 add         r2, r2, r3
  05cec	e59d3008	 ldr         r3, [sp, #8]
  05cf0	e0832002	 add         r2, r3, r2
  05cf4	e5dd3028	 ldrb        r3, [sp, #0x28]
  05cf8	e5c23000	 strb        r3, [r2]

; 2340 :                     }                    

  05cfc	eaffffe5	 b           |$LN3@CursorOff|
  05d00		 |$LN2@CursorOff|

; 2341 :                     break;

  05d00	ea00000b	 b           |$LN8@CursorOff|
  05d04		 |$LN1@CursorOff|

; 2342 : 
; 2343 :                 case 4:
; 2344 :                     ((ULONG*)pFrameLine)[xf] = ((ULONG*)pStoreLine)[xc];

  05d04	e59d1024	 ldr         r1, [sp, #0x24]
  05d08	e3a03004	 mov         r3, #4
  05d0c	e0020391	 mul         r2, r1, r3
  05d10	e59d3018	 ldr         r3, [sp, #0x18]
  05d14	e0830002	 add         r0, r3, r2
  05d18	e59d1014	 ldr         r1, [sp, #0x14]
  05d1c	e3a03004	 mov         r3, #4
  05d20	e0020391	 mul         r2, r1, r3
  05d24	e59d3008	 ldr         r3, [sp, #8]
  05d28	e0832002	 add         r2, r3, r2
  05d2c	e5903000	 ldr         r3, [r0]
  05d30	e5823000	 str         r3, [r2]
  05d34		 |$LN8@CursorOff|

; 2345 :                     break;
; 2346 :             }                    
; 2347 :         }

  05d34	eaffff94	 b           |$LN13@CursorOff|
  05d38		 |$LN12@CursorOff|

; 2348 :     }

  05d38	eaffff61	 b           |$LN18@CursorOff|
  05d3c		 |$LN17@CursorOff|

; 2349 : 
; 2350 :     // Cursor isn't visible now
; 2351 :     m_cursorVisible = FALSE;

  05d3c	e59d304c	 ldr         r3, [sp, #0x4C]
  05d40	e2832e15	 add         r2, r3, #0x15, 28
  05d44	e3a03000	 mov         r3, #0
  05d48	e5823000	 str         r3, [r2]
  05d4c		 |$LN20@CursorOff|
  05d4c		 |$LN23@CursorOff|
  05d4c		 |$LN25@CursorOff|
  05d4c		 |$cleanUp$42938|

; 2352 : 
; 2353 : cleanUp: 
; 2354 :     DEBUGMSG(GPE_ZONE_CURSOR, (L"-OMAPDDGPE::CursonOff\r\n"));

  05d4c	e59f3034	 ldr         r3, [pc, #0x34]
  05d50	e5933440	 ldr         r3, [r3, #0x440]
  05d54	e3130a02	 tst         r3, #2, 20
  05d58	0a000004	 beq         |$LN34@CursorOff|
  05d5c	e59f0020	 ldr         r0, [pc, #0x20]
  05d60	eb000000	 bl          NKDbgPrintfW
  05d64	e3a03001	 mov         r3, #1
  05d68	e58d3040	 str         r3, [sp, #0x40]
  05d6c	ea000001	 b           |$LN35@CursorOff|
  05d70		 |$LN34@CursorOff|
  05d70	e3a03000	 mov         r3, #0
  05d74	e58d3040	 str         r3, [sp, #0x40]
  05d78		 |$LN35@CursorOff|

; 2355 :     return;
; 2356 : }

  05d78	e28dd044	 add         sp, sp, #0x44
  05d7c	e89d6000	 ldmia       sp, {sp, lr}
  05d80	e12fff1e	 bx          lr
  05d84		 |$LN45@CursorOff|
  05d84		 |$LN46@CursorOff|
  05d84	00000000	 DCD         |??_C@_1DA@DLDMPHFE@?$AA?9?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAC?$AAu?$AAr?$AAs?$AAo?$AAn?$AAO?$AAf?$AAf?$AA?$AN?$AA?6?$AA?$AA@|
  05d88		 |$LN47@CursorOff|
  05d88	00000000	 DCD         |dpCurSettings|
  05d8c		 |$LN48@CursorOff|
  05d8c	00000000	 DCD         |??_C@_1GE@BEANHEM@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAC?$AAu?$AAr?$AAs?$AAo?$AAr?$AAO?$AAf?$AAf?$AA?3?$AA?5?$AAN?$AAo?$AA?5?$AAc?$AAu?$AAr?$AAs?$AAo?$AAr?$AA?5@|
  05d90		 |$LN49@CursorOff|
  05d90	00000000	 DCD         |??_C@_1DA@LGJIJNJM@?$AA?$CL?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AA?3?$AA?3?$AAC?$AAu?$AAr?$AAs?$AAo?$AAn?$AAO?$AAf?$AAf?$AA?$AN?$AA?6?$AA?$AA@|
  05d94		 |$M44065|

			 ENDP  ; |?CursorOff@OMAPDDGPE@@QAAXXZ|, OMAPDDGPE::CursorOff

	END
