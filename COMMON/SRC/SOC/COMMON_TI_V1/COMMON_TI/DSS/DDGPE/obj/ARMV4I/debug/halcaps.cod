; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\DSS\DDGPE\halcaps.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|?g_FourCC@@3PAKA| [ DATA ]		; g_FourCC
	EXPORT	|?cbDDCallbacks@@3U_DDHAL_DDCALLBACKS@@A| [ DATA ] ; cbDDCallbacks
	EXPORT	|?cbDDSurfaceCallbacks@@3U_DDHAL_DDSURFACECALLBACKS@@A| [ DATA ] ; cbDDSurfaceCallbacks
	IMPORT	|?HalSetOverlayPosition@@YAKPAU_DDHAL_SETOVERLAYPOSITIONDATA@@@Z| ; HalSetOverlayPosition
	IMPORT	|?HalUpdateOverlay@@YAKPAU_DDHAL_UPDATEOVERLAYDATA@@@Z| ; HalUpdateOverlay
	IMPORT	|?HalGetFlipStatus@@YAKPAU_DDHAL_GETFLIPSTATUSDATA@@@Z| ; HalGetFlipStatus
	IMPORT	|?HalGetBltStatus@@YAKPAU_DDHAL_GETBLTSTATUSDATA@@@Z| ; HalGetBltStatus
	IMPORT	|?HalSetColorKey@@YAKPAU_DDHAL_SETCOLORKEYDATA@@@Z| ; HalSetColorKey
	IMPORT	|?HalUnlock@@YAKPAU_DDHAL_UNLOCKDATA@@@Z| ; HalUnlock
	IMPORT	|?HalLock@@YAKPAU_DDHAL_LOCKDATA@@@Z|	; HalLock
	IMPORT	|?HalFlip@@YAKPAU_DDHAL_FLIPDATA@@@Z|	; HalFlip
	IMPORT	|?HalDestroySurface@@YAKPAU_DDHAL_DESTROYSURFACEDATA@@@Z| ; HalDestroySurface
	IMPORT	|?HalGetScanLine@@YAKPAU_DDHAL_GETSCANLINEDATA@@@Z| ; HalGetScanLine
	IMPORT	|?HalCanCreateSurface@@YAKPAU_DDHAL_CANCREATESURFACEDATA@@@Z| ; HalCanCreateSurface
	IMPORT	|?HalWaitForVerticalBlank@@YAKPAU_DDHAL_WAITFORVERTICALBLANKDATA@@@Z| ; HalWaitForVerticalBlank
	IMPORT	|?HalCreateSurface@@YAKPAU_DDHAL_CREATESURFACEDATA@@@Z| ; HalCreateSurface

  00000			 AREA	 |.data|, DATA
|?g_FourCC@@3PAKA| DCD 0x32595559			; g_FourCC
	DCD	0x56595559
	DCD	0x59565955
|?cbDDCallbacks@@3U_DDHAL_DDCALLBACKS@@A| DCD 0x1c	; cbDDCallbacks
	DCD	0x17
	DCD	|?HalCreateSurface@@YAKPAU_DDHAL_CREATESURFACEDATA@@@Z|
	DCD	|?HalWaitForVerticalBlank@@YAKPAU_DDHAL_WAITFORVERTICALBLANKDATA@@@Z|
	DCD	|?HalCanCreateSurface@@YAKPAU_DDHAL_CANCREATESURFACEDATA@@@Z|
	DCD	0x0
	DCD	|?HalGetScanLine@@YAKPAU_DDHAL_GETSCANLINEDATA@@@Z|
|?cbDDSurfaceCallbacks@@3U_DDHAL_DDSURFACECALLBACKS@@A| DCD 0x30 ; cbDDSurfaceCallbacks
	DCD	0x1ff
	DCD	|?HalDestroySurface@@YAKPAU_DDHAL_DESTROYSURFACEDATA@@@Z|
	DCD	|?HalFlip@@YAKPAU_DDHAL_FLIPDATA@@@Z|
	DCD	|?HalLock@@YAKPAU_DDHAL_LOCKDATA@@@Z|
	DCD	|?HalUnlock@@YAKPAU_DDHAL_UNLOCKDATA@@@Z|
	DCD	|?HalSetColorKey@@YAKPAU_DDHAL_SETCOLORKEYDATA@@@Z|
	DCD	|?HalGetBltStatus@@YAKPAU_DDHAL_GETBLTSTATUSDATA@@@Z|
	DCD	|?HalGetFlipStatus@@YAKPAU_DDHAL_GETFLIPSTATUSDATA@@@Z|
	DCD	|?HalUpdateOverlay@@YAKPAU_DDHAL_UPDATEOVERLAYDATA@@@Z|
	DCD	|?HalSetOverlayPosition@@YAKPAU_DDHAL_SETOVERLAYPOSITIONDATA@@@Z|
	DCD	0x0

  00000			 AREA	 |.rdata|, DATA, READONLY
|FourCCDescriptionTable| DCD 0x32595559
	DCD	0x10
	DCD	0xff00ff
	DCD	0xff00
	DCD	0xff000000
	DCD	0x56595559
	DCD	0x10
	DCD	0xff00ff
	DCD	0xff00
	DCD	0xff000000
	DCD	0x55595659
	DCD	0x10
	DCD	0xff00ff00
	DCD	0xff
	DCD	0xff0000
	DCD	0x59565955
	DCD	0x10
	DCD	0xff00ff00
	DCD	0xff
	DCD	0xff0000
	DCD	0x36315659
	DCD	0x10
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x32315659
	DCD	0xc
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x3231564e
	DCD	0xc
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x30323449
	DCD	0xc
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x56555949
	DCD	0xc
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	EXPORT	|?IsEqualGUID@@YAHABU_GUID@@0@Z|	; IsEqualGUID
	EXPORT	|?HalGetDriverInfo@@YAKPAU_DDHAL_GETDRIVERINFODATA@@@Z| ; HalGetDriverInfo
	IMPORT	|?GetVirtualVideoMemory@OMAPDDGPE@@QAAXPAK00@Z| ; OMAPDDGPE::GetVirtualVideoMemory
	IMPORT	|GUID_GetDriverInfo_VidMemBase|
	IMPORT	|?GetDDGPE@@YAPAVDDGPE@@XZ|		; GetDDGPE

  00000			 AREA	 |.pdata|, PDATA
|$T42120| DCD	|$LN6@HalGetDriv|
	DCD	0x40002e04
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\ddgpe\halcaps.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?HalGetDriverInfo@@YAKPAU_DDHAL_GETDRIVERINFODATA@@@Z| PROC ; HalGetDriverInfo

; 84   : {

  00000		 |$LN6@HalGetDriv|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd01c	 sub         sp, sp, #0x1C
  00010		 |$M42117|

; 85   :     OMAPDDGPE * pDDGPE = static_cast<OMAPDDGPE *>(GetDDGPE());

  00010	eb000000	 bl          |?GetDDGPE@@YAPAVDDGPE@@XZ|
  00014	e58d0014	 str         r0, [sp, #0x14]
  00018	e59d3014	 ldr         r3, [sp, #0x14]
  0001c	e58d3000	 str         r3, [sp]

; 86   : 
; 87   :     //  Default return
; 88   :     lpInput->ddRVal = DDERR_CURRENTLYNOTAVAIL;

  00020	e59d3024	 ldr         r3, [sp, #0x24]
  00024	e2832028	 add         r2, r3, #0x28
  00028	e59f3084	 ldr         r3, [pc, #0x84]
  0002c	e5823000	 str         r3, [r2]

; 89   : 
; 90   : 
; 91   : #if (_WINCEOSVER==700)
; 92   :     //  Check for video memory base request(s)
; 93   :     if (IsEqualIID(lpInput->guidInfo, GUID_GetDriverInfo_VidMemList) )
; 94   :     {
; 95   :         lpInput->dwActualSize = sizeof ( DDHAL_DDVIDMEMLIST );
; 96   :         if (lpInput->dwExpectedSize < lpInput->dwActualSize)
; 97   :         {
; 98   :             lpInput->ddRVal = DDERR_MOREDATA;
; 99   :         }
; 100  :         else
; 101  :         {
; 102  :             LPDDHAL_DDVIDMEMLIST pVidMemList = reinterpret_cast< LPDDHAL_DDVIDMEMLIST >( lpInput->lpvData );
; 103  : 
; 104  :             //  Get video memory attributes
; 105  :             pDDGPE->GetVirtualVideoMemoryList( pVidMemList );
; 106  :             lpInput->ddRVal = DD_OK;
; 107  :         }
; 108  :     }
; 109  : #endif
; 110  :     
; 111  : #if (_WINCEOSVER>=600)
; 112  :     if (IsEqualIID(lpInput->guidInfo, GUID_GetDriverInfo_VidMemBase) )

  00030	e59f1078	 ldr         r1, [pc, #0x78]
  00034	e59d3024	 ldr         r3, [sp, #0x24]
  00038	e283000c	 add         r0, r3, #0xC
  0003c	eb000000	 bl          |?IsEqualGUID@@YAHABU_GUID@@0@Z|
  00040	e58d0018	 str         r0, [sp, #0x18]
  00044	e59d3018	 ldr         r3, [sp, #0x18]
  00048	e3530000	 cmp         r3, #0
  0004c	0a000011	 beq         |$LN1@HalGetDriv|

; 113  :     {
; 114  :         DWORD   dwVideoMemoryStart,
; 115  :                 dwVideoMemoryLength,
; 116  :                 dwVideoMemoryFree;
; 117  :     
; 118  :         //  Get video memory attributes
; 119  :         pDDGPE->GetVirtualVideoMemory( &dwVideoMemoryStart, &dwVideoMemoryLength, &dwVideoMemoryFree );

  00050	e28d300c	 add         r3, sp, #0xC
  00054	e28d2008	 add         r2, sp, #8
  00058	e28d1004	 add         r1, sp, #4
  0005c	e59d0000	 ldr         r0, [sp]
  00060	eb000000	 bl          |?GetVirtualVideoMemory@OMAPDDGPE@@QAAXPAK00@Z|

; 120  :                         
; 121  :         //  Return base address of video memory
; 122  :         *(DWORD*)(lpInput->lpvData) = dwVideoMemoryStart;

  00064	e59d3024	 ldr         r3, [sp, #0x24]
  00068	e2833020	 add         r3, r3, #0x20
  0006c	e5932000	 ldr         r2, [r3]
  00070	e59d3004	 ldr         r3, [sp, #4]
  00074	e5823000	 str         r3, [r2]

; 123  :         lpInput->dwActualSize = sizeof(DWORD);

  00078	e59d3024	 ldr         r3, [sp, #0x24]
  0007c	e2832024	 add         r2, r3, #0x24
  00080	e3a03004	 mov         r3, #4
  00084	e5823000	 str         r3, [r2]

; 124  :         lpInput->ddRVal = DD_OK;

  00088	e59d3024	 ldr         r3, [sp, #0x24]
  0008c	e2832028	 add         r2, r3, #0x28
  00090	e3a03000	 mov         r3, #0
  00094	e5823000	 str         r3, [r2]
  00098		 |$LN1@HalGetDriv|

; 125  :     }
; 126  : #endif
; 127  :     
; 128  :     return DDHAL_DRIVER_HANDLED;

  00098	e3a03001	 mov         r3, #1
  0009c	e58d3010	 str         r3, [sp, #0x10]

; 129  : }

  000a0	e59d0010	 ldr         r0, [sp, #0x10]
  000a4	e28dd01c	 add         sp, sp, #0x1C
  000a8	e89d6000	 ldmia       sp, {sp, lr}
  000ac	e12fff1e	 bx          lr
  000b0		 |$LN7@HalGetDriv|
  000b0		 |$LN8@HalGetDriv|
  000b0	00000000	 DCD         |GUID_GetDriverInfo_VidMemBase|
  000b4		 |$LN9@HalGetDriv|
  000b4	88760028	 DCD         0x88760028
  000b8		 |$M42118|

			 ENDP  ; |?HalGetDriverInfo@@YAKPAU_DDHAL_GETDRIVERINFODATA@@@Z|, HalGetDriverInfo

	IMPORT	|memcmp|
; File c:\wince600\public\common\sdk\inc\objbase.h

  00000			 AREA	 |.pdata|, PDATA
|$T42131| DCD	|$LN7@IsEqualGUI|
	DCD	0x40001704
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?IsEqualGUID@@YAHABU_GUID@@0@Z| PROC	; IsEqualGUID

; 493  : {

  00000		 |$LN7@IsEqualGUI|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd00c	 sub         sp, sp, #0xC
  00010		 |$M42128|

; 494  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  00010	e3a02010	 mov         r2, #0x10
  00014	e59d1018	 ldr         r1, [sp, #0x18]
  00018	e59d0014	 ldr         r0, [sp, #0x14]
  0001c	eb000000	 bl          memcmp
  00020	e58d0004	 str         r0, [sp, #4]
  00024	e59d3004	 ldr         r3, [sp, #4]
  00028	e3530000	 cmp         r3, #0
  0002c	1a000002	 bne         |$LN3@IsEqualGUI|
  00030	e3a03001	 mov         r3, #1
  00034	e58d3008	 str         r3, [sp, #8]
  00038	ea000001	 b           |$LN4@IsEqualGUI|
  0003c		 |$LN3@IsEqualGUI|
  0003c	e3a03000	 mov         r3, #0
  00040	e58d3008	 str         r3, [sp, #8]
  00044		 |$LN4@IsEqualGUI|
  00044	e59d3008	 ldr         r3, [sp, #8]
  00048	e58d3000	 str         r3, [sp]

; 495  : }

  0004c	e59d0000	 ldr         r0, [sp]
  00050	e28dd00c	 add         sp, sp, #0xC
  00054	e89d6000	 ldmia       sp, {sp, lr}
  00058	e12fff1e	 bx          lr
  0005c		 |$M42129|

			 ENDP  ; |?IsEqualGUID@@YAHABU_GUID@@0@Z|, IsEqualGUID

	EXPORT	|buildDDHALInfo|
	IMPORT	|LcdPdd_Get_PixClkDiv|
	IMPORT	|?NumVisibleOverlays@OMAPDDGPE@@QAAKXZ|	; OMAPDDGPE::NumVisibleOverlays
	IMPORT	|memset|

  00008			 AREA	 |.pdata|, PDATA
|$T42138| DCD	|$LN11@buildDDHAL|
	DCD	0x4000c304
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\ddgpe\halcaps.cpp

  000b8			 AREA	 |.text|, CODE, ARM

  000b8		 |buildDDHALInfo| PROC

; 139  : {	

  000b8		 |$LN11@buildDDHAL|
  000b8	e1a0c00d	 mov         r12, sp
  000bc	e92d0003	 stmdb       sp!, {r0, r1}
  000c0	e92d5000	 stmdb       sp!, {r12, lr}
  000c4	e24dd020	 sub         sp, sp, #0x20
  000c8		 |$M42135|

; 140  :     OMAPDDGPE * pDDGPE = static_cast<OMAPDDGPE *>(GetDDGPE());

  000c8	eb000000	 bl          |?GetDDGPE@@YAPAVDDGPE@@XZ|
  000cc	e58d0010	 str         r0, [sp, #0x10]
  000d0	e59d3010	 ldr         r3, [sp, #0x10]
  000d4	e58d3008	 str         r3, [sp, #8]

; 141  :     DWORD       dwVideoMemoryStart,
; 142  :                 dwVideoMemoryLength,
; 143  :                 dwVideoMemoryFree;
; 144  : 
; 145  : 
; 146  :     //  Get video memory attributes
; 147  :     pDDGPE->GetVirtualVideoMemory( &dwVideoMemoryStart, &dwVideoMemoryLength, &dwVideoMemoryFree );

  000d8	e28d300c	 add         r3, sp, #0xC
  000dc	e28d2004	 add         r2, sp, #4
  000e0	e28d1000	 add         r1, sp, #0
  000e4	e59d0008	 ldr         r0, [sp, #8]
  000e8	eb000000	 bl          |?GetVirtualVideoMemory@OMAPDDGPE@@QAAXPAK00@Z|

; 148  : 
; 149  : 
; 150  :     // Clear the DDHALINFO structure
; 151  :     memset( lpddhi, 0, sizeof(DDHALINFO) );

  000ec	e3a02f47	 mov         r2, #0x47, 30
  000f0	e3a01000	 mov         r1, #0
  000f4	e59d0028	 ldr         r0, [sp, #0x28]
  000f8	eb000000	 bl          memset

; 152  : 
; 153  :     lpddhi->dwSize = sizeof(DDHALINFO);

  000fc	e59d2028	 ldr         r2, [sp, #0x28]
  00100	e3a03f47	 mov         r3, #0x47, 30
  00104	e5823000	 str         r3, [r2]

; 154  : 
; 155  :     //  Set callback functions
; 156  :     lpddhi->lpDDCallbacks = &cbDDCallbacks;

  00108	e59d3028	 ldr         r3, [sp, #0x28]
  0010c	e2832008	 add         r2, r3, #8
  00110	e59f32a8	 ldr         r3, [pc, #0x2A8]
  00114	e5823000	 str         r3, [r2]

; 157  : 
; 158  :     lpddhi->lpDDSurfaceCallbacks = &cbDDSurfaceCallbacks;

  00118	e59d3028	 ldr         r3, [sp, #0x28]
  0011c	e283200c	 add         r2, r3, #0xC
  00120	e59f3294	 ldr         r3, [pc, #0x294]
  00124	e5823000	 str         r3, [r2]

; 159  :     lpddhi->GetDriverInfo = HalGetDriverInfo;

  00128	e59d3028	 ldr         r3, [sp, #0x28]
  0012c	e2832014	 add         r2, r3, #0x14
  00130	e59f3280	 ldr         r3, [pc, #0x280]
  00134	e5823000	 str         r3, [r2]

; 160  : 
; 161  : 
; 162  :     // Capability bits.
; 163  :     lpddhi->ddCaps.dwSize = sizeof(DDCAPS);

  00138	e59d3028	 ldr         r3, [sp, #0x28]
  0013c	e2832018	 add         r2, r3, #0x18
  00140	e3a03080	 mov         r3, #0x80
  00144	e5823000	 str         r3, [r2]

; 164  : 
; 165  :     lpddhi->ddCaps.dwVidMemTotal  = dwVideoMemoryLength;

  00148	e59d3028	 ldr         r3, [sp, #0x28]
  0014c	e283201c	 add         r2, r3, #0x1C
  00150	e59d3004	 ldr         r3, [sp, #4]
  00154	e5823000	 str         r3, [r2]

; 166  :     lpddhi->ddCaps.dwVidMemFree   = dwVideoMemoryFree;

  00158	e59d3028	 ldr         r3, [sp, #0x28]
  0015c	e2832020	 add         r2, r3, #0x20
  00160	e59d300c	 ldr         r3, [sp, #0xC]
  00164	e5823000	 str         r3, [r2]

; 167  :     lpddhi->ddCaps.dwVidMemStride = 0;

  00168	e59d3028	 ldr         r3, [sp, #0x28]
  0016c	e2832024	 add         r2, r3, #0x24
  00170	e3a03000	 mov         r3, #0
  00174	e5823000	 str         r3, [r2]

; 168  : 
; 169  :     #ifndef DDSCAPS_OWNDC
; 170  :         #error DDSCAPS_OWNDC not defined, please install all QFEs (DDSCAPS_OWNDC was added in January 2008 QFE).
; 171  :     #endif
; 172  : 
; 173  :     lpddhi->ddCaps.ddsCaps.dwCaps =
; 174  :         DDSCAPS_PRIMARYSURFACE |     // Has a primary surface
; 175  :         DDSCAPS_FRONTBUFFER |        // Can create front buffer surfaces
; 176  :         DDSCAPS_BACKBUFFER |         // Can create backbuffer surface
; 177  :         DDSCAPS_FLIP |               // Can flip between surfaces
; 178  :         DDSCAPS_OVERLAY |            // Can create overlay surfaces
; 179  : //        DDSCAPS_PALETTE |            // Can create paletted surfaces
; 180  :         DDSCAPS_SYSTEMMEMORY |       // Surfaces are in system memory
; 181  :         DDSCAPS_VIDEOMEMORY |        // Surfaces are in video memory
; 182  :         DDSCAPS_OWNDC |
; 183  :         0;

  00178	e59d3028	 ldr         r3, [sp, #0x28]
  0017c	e2832028	 add         r2, r3, #0x28
  00180	e3a03c81	 mov         r3, #0x81, 24
  00184	e38330de	 orr         r3, r3, #0xDE
  00188	e5823000	 str         r3, [r2]

; 184  : 
; 185  :     lpddhi->ddCaps.dwNumFourCCCodes = MAX_FOURCC;

  0018c	e59d3028	 ldr         r3, [sp, #0x28]
  00190	e283202c	 add         r2, r3, #0x2C
  00194	e3a03003	 mov         r3, #3
  00198	e5823000	 str         r3, [r2]

; 186  :     lpddhi->lpdwFourCC = g_FourCC;

  0019c	e59d3028	 ldr         r3, [sp, #0x28]
  001a0	e2832f46	 add         r2, r3, #0x46, 30
  001a4	e59f3208	 ldr         r3, [pc, #0x208]
  001a8	e5823000	 str         r3, [r2]

; 187  : 
; 188  : 
; 189  :     // Palette caps
; 190  :     lpddhi->ddCaps.dwPalCaps = 0;

  001ac	e59d3028	 ldr         r3, [sp, #0x28]
  001b0	e2832030	 add         r2, r3, #0x30
  001b4	e3a03000	 mov         r3, #0
  001b8	e5823000	 str         r3, [r2]

; 191  : 
; 192  :     // Blt caps
; 193  :     lpddhi->ddCaps.dwBltCaps =
; 194  :         DDBLTCAPS_READSYSMEM  |
; 195  :         DDBLTCAPS_WRITESYSMEM |
; 196  : //        DDBLTCAPS_COPYFOURCC  |
; 197  : //        DDBLTCAPS_FILLFOURCC  |
; 198  :         0;

  001bc	e59d3028	 ldr         r3, [sp, #0x28]
  001c0	e2832034	 add         r2, r3, #0x34
  001c4	e3a03003	 mov         r3, #3
  001c8	e5823000	 str         r3, [r2]

; 199  : 
; 200  :     SETROPBIT(lpddhi->ddCaps.dwRops,SRCCOPY); 

  001cc	e59d3028	 ldr         r3, [sp, #0x28]
  001d0	e2833058	 add         r3, r3, #0x58
  001d4	e5933000	 ldr         r3, [r3]
  001d8	e3832a01	 orr         r2, r3, #1, 20
  001dc	e59d3028	 ldr         r3, [sp, #0x28]
  001e0	e2833058	 add         r3, r3, #0x58
  001e4	e5832000	 str         r2, [r3]

; 201  :     SETROPBIT(lpddhi->ddCaps.dwRops,PATCOPY);

  001e8	e59d3028	 ldr         r3, [sp, #0x28]
  001ec	e283305c	 add         r3, r3, #0x5C
  001f0	e5933000	 ldr         r3, [r3]
  001f4	e3832801	 orr         r2, r3, #1, 16
  001f8	e59d3028	 ldr         r3, [sp, #0x28]
  001fc	e283305c	 add         r3, r3, #0x5C
  00200	e5832000	 str         r2, [r3]

; 202  :     SETROPBIT(lpddhi->ddCaps.dwRops,BLACKNESS);

  00204	e59d3028	 ldr         r3, [sp, #0x28]
  00208	e2833040	 add         r3, r3, #0x40
  0020c	e5933000	 ldr         r3, [r3]
  00210	e3832001	 orr         r2, r3, #1
  00214	e59d3028	 ldr         r3, [sp, #0x28]
  00218	e2833040	 add         r3, r3, #0x40
  0021c	e5832000	 str         r2, [r3]

; 203  :     SETROPBIT(lpddhi->ddCaps.dwRops,WHITENESS);

  00220	e59d3028	 ldr         r3, [sp, #0x28]
  00224	e283305c	 add         r3, r3, #0x5C
  00228	e5933000	 ldr         r3, [r3]
  0022c	e3832102	 orr         r2, r3, #2, 2
  00230	e59d3028	 ldr         r3, [sp, #0x28]
  00234	e283305c	 add         r3, r3, #0x5C
  00238	e5832000	 str         r2, [r3]

; 204  : 
; 205  : 
; 206  :     // Color key caps
; 207  :     lpddhi->ddCaps.dwCKeyCaps =
; 208  : //        DDCKEYCAPS_BOTHBLT |
; 209  : //        DDCKEYCAPS_DESTBLT |
; 210  : //        DDCKEYCAPS_DESTBLTCLRSPACE |
; 211  : //        DDCKEYCAPS_DESTBLTCLRSPACEYUV |
; 212  :         DDCKEYCAPS_SRCBLT |
; 213  : //        DDCKEYCAPS_SRCBLTCLRSPACE |
; 214  : //        DDCKEYCAPS_SRCBLTCLRSPACEYUV |
; 215  :         0;        

  0023c	e59d3028	 ldr         r3, [sp, #0x28]
  00240	e2832038	 add         r2, r3, #0x38
  00244	e3a03c02	 mov         r3, #2, 24
  00248	e5823000	 str         r3, [r2]

; 216  :     
; 217  :     // Alpha blending caps
; 218  :     lpddhi->ddCaps.dwAlphaCaps = 
; 219  :         DDALPHACAPS_ALPHAPIXELS |
; 220  : //        DDALPHACAPS_ALPHASURFACE |
; 221  : //        DDALPHACAPS_ALPHAPALETTE |
; 222  :         DDALPHACAPS_ALPHACONSTANT |
; 223  : //        DDALPHACAPS_ARGBSCALE |
; 224  : //        DDALPHACAPS_SATURATE |
; 225  : //        DDALPHACAPS_PREMULT |
; 226  : //        DDALPHACAPS_NONPREMULT |
; 227  : //        DDALPHACAPS_ALPHAFILL |
; 228  : //        DDALPHACAPS_ALPHANEG |
; 229  :         0;

  0024c	e59d3028	 ldr         r3, [sp, #0x28]
  00250	e283203c	 add         r2, r3, #0x3C
  00254	e3a03009	 mov         r3, #9
  00258	e5823000	 str         r3, [r2]

; 230  :  
; 231  : 
; 232  :     // Overlay caps.
; 233  :     lpddhi->ddCaps.dwOverlayCaps=               // overlay capabilities
; 234  :         DDOVERLAYCAPS_OVERLAYSUPPORT |          // Supports overlays
; 235  :         DDOVERLAYCAPS_FLIP |                    // Overlay may be flipped.
; 236  :         DDOVERLAYCAPS_FOURCC |                  // YUV overlays supported.
; 237  :         DDOVERLAYCAPS_CKEYSRC |                 // Supports source color keying for overlays
; 238  :         DDOVERLAYCAPS_CKEYSRCCLRSPACE |
; 239  :         DDOVERLAYCAPS_CKEYDEST |                // Supports destination color keying for overlays
; 240  :         DDOVERLAYCAPS_CKEYDESTCLRSPACE |
; 241  :         DDOVERLAYCAPS_MIRRORLEFTRIGHT |         // Supports mirror horizontal       
; 242  : //        DDOVERLAYCAPS_MIRRORUPDOWN |          // Supports mirror vertical          
; 243  :         DDOVERLAYCAPS_ALPHADEST |             
; 244  : //        DDOVERLAYCAPS_ALPHASRC |             
; 245  :         DDOVERLAYCAPS_ALPHACONSTANT |         
; 246  :         DDOVERLAYCAPS_ALPHAANDKEYDEST |
; 247  :         DDOVERLAYCAPS_ZORDER |       
; 248  :         DDOVERLAYCAPS_ALPHAPREMULT |
; 249  :         0;

  0025c	e59d3028	 ldr         r3, [sp, #0x28]
  00260	e2832060	 add         r2, r3, #0x60
  00264	e59f3144	 ldr         r3, [pc, #0x144]
  00268	e5823000	 str         r3, [r2]

; 250  : 
; 251  :     lpddhi->ddCaps.dwMaxVisibleOverlays = 2;

  0026c	e59d3028	 ldr         r3, [sp, #0x28]
  00270	e2832064	 add         r2, r3, #0x64
  00274	e3a03002	 mov         r3, #2
  00278	e5823000	 str         r3, [r2]

; 252  :     lpddhi->ddCaps.dwCurrVisibleOverlays = pDDGPE->NumVisibleOverlays();

  0027c	e59d0008	 ldr         r0, [sp, #8]
  00280	eb000000	 bl          |?NumVisibleOverlays@OMAPDDGPE@@QAAKXZ|
  00284	e58d0014	 str         r0, [sp, #0x14]
  00288	e59d3028	 ldr         r3, [sp, #0x28]
  0028c	e2832068	 add         r2, r3, #0x68
  00290	e59d3014	 ldr         r3, [sp, #0x14]
  00294	e5823000	 str         r3, [r2]

; 253  : 
; 254  :     lpddhi->ddCaps.dwAlignBoundarySrc = 0;

  00298	e59d3028	 ldr         r3, [sp, #0x28]
  0029c	e283206c	 add         r2, r3, #0x6C
  002a0	e3a03000	 mov         r3, #0
  002a4	e5823000	 str         r3, [r2]

; 255  :     lpddhi->ddCaps.dwAlignSizeSrc = 0;

  002a8	e59d3028	 ldr         r3, [sp, #0x28]
  002ac	e2832070	 add         r2, r3, #0x70
  002b0	e3a03000	 mov         r3, #0
  002b4	e5823000	 str         r3, [r2]

; 256  :     lpddhi->ddCaps.dwAlignBoundaryDest = 0;

  002b8	e59d3028	 ldr         r3, [sp, #0x28]
  002bc	e2832074	 add         r2, r3, #0x74
  002c0	e3a03000	 mov         r3, #0
  002c4	e5823000	 str         r3, [r2]

; 257  :     lpddhi->ddCaps.dwAlignSizeDest = 0;

  002c8	e59d3028	 ldr         r3, [sp, #0x28]
  002cc	e2832078	 add         r2, r3, #0x78
  002d0	e3a03000	 mov         r3, #0
  002d4	e5823000	 str         r3, [r2]

; 258  :     
; 259  :     if (pDDGPE->m_bDssIspRszEnabled)

  002d8	e59d3008	 ldr         r3, [sp, #8]
  002dc	e2833f52	 add         r3, r3, #0x52, 30
  002e0	e5933000	 ldr         r3, [r3]
  002e4	e3530000	 cmp         r3, #0
  002e8	0a000004	 beq         |$LN6@buildDDHAL|

; 260  :     {
; 261  :         lpddhi->ddCaps.dwMinOverlayStretch = 250;   // max shrink 25%

  002ec	e59d3028	 ldr         r3, [sp, #0x28]
  002f0	e283207c	 add         r2, r3, #0x7C
  002f4	e3a030fa	 mov         r3, #0xFA
  002f8	e5823000	 str         r3, [r2]

; 262  :     }
; 263  :     else

  002fc	ea000017	 b           |$LN5@buildDDHAL|
  00300		 |$LN6@buildDDHAL|

; 264  :     {
; 265  :         if (LcdPdd_Get_PixClkDiv() >= 8)

  00300	eb000000	 bl          LcdPdd_Get_PixClkDiv
  00304	e58d0018	 str         r0, [sp, #0x18]
  00308	e59d3018	 ldr         r3, [sp, #0x18]
  0030c	e3530008	 cmp         r3, #8
  00310	3a000004	 bcc         |$LN4@buildDDHAL|

; 266  :             lpddhi->ddCaps.dwMinOverlayStretch = 250;   // max shrink 25%

  00314	e59d3028	 ldr         r3, [sp, #0x28]
  00318	e283207c	 add         r2, r3, #0x7C
  0031c	e3a030fa	 mov         r3, #0xFA
  00320	e5823000	 str         r3, [r2]
  00324	ea00000d	 b           |$LN3@buildDDHAL|
  00328		 |$LN4@buildDDHAL|

; 267  :         else if (LcdPdd_Get_PixClkDiv() >= 4)

  00328	eb000000	 bl          LcdPdd_Get_PixClkDiv
  0032c	e58d001c	 str         r0, [sp, #0x1C]
  00330	e59d301c	 ldr         r3, [sp, #0x1C]
  00334	e3530004	 cmp         r3, #4
  00338	3a000004	 bcc         |$LN2@buildDDHAL|

; 268  :             lpddhi->ddCaps.dwMinOverlayStretch = 500;   // max shrink 50%

  0033c	e59d3028	 ldr         r3, [sp, #0x28]
  00340	e283207c	 add         r2, r3, #0x7C
  00344	e3a03f7d	 mov         r3, #0x7D, 30
  00348	e5823000	 str         r3, [r2]

; 269  :         else

  0034c	ea000003	 b           |$LN1@buildDDHAL|
  00350		 |$LN2@buildDDHAL|

; 270  :             lpddhi->ddCaps.dwMinOverlayStretch = 1000;   // Shrink not supported

  00350	e59d3028	 ldr         r3, [sp, #0x28]
  00354	e283207c	 add         r2, r3, #0x7C
  00358	e3a03ffa	 mov         r3, #0xFA, 30
  0035c	e5823000	 str         r3, [r2]
  00360		 |$LN1@buildDDHAL|
  00360		 |$LN3@buildDDHAL|
  00360		 |$LN5@buildDDHAL|

; 271  :     }    
; 272  :     lpddhi->ddCaps.dwMaxOverlayStretch = 8000;  // Expand to 8x original size

  00360	e59d3028	 ldr         r3, [sp, #0x28]
  00364	e2832080	 add         r2, r3, #0x80
  00368	e3a03d7d	 mov         r3, #0x7D, 26
  0036c	e5823000	 str         r3, [r2]

; 273  : 
; 274  :     // Misc caps
; 275  :     lpddhi->ddCaps.dwMiscCaps=
; 276  :         DDMISCCAPS_FLIPINTERVAL |
; 277  :         DDMISCCAPS_FLIPODDEVEN |
; 278  :         DDMISCCAPS_FLIPVSYNCWITHVBI | 
; 279  :         DDMISCCAPS_READSCANLINE |
; 280  : 		DDMISCCAPS_READVBLANKSTATUS |
; 281  :         0;

  00370	e59d3028	 ldr         r3, [sp, #0x28]
  00374	e2832084	 add         r2, r3, #0x84
  00378	e3a0303d	 mov         r3, #0x3D
  0037c	e5823000	 str         r3, [r2]

; 282  :         
; 283  :     //  Call virtual method for any customization
; 284  :     pDDGPE->DDHALInfo( lpddhi, modeidx );       

  00380	e59d202c	 ldr         r2, [sp, #0x2C]
  00384	e59d1028	 ldr         r1, [sp, #0x28]
  00388	e59d3008	 ldr         r3, [sp, #8]
  0038c	e5933000	 ldr         r3, [r3]
  00390	e28330f8	 add         r3, r3, #0xF8
  00394	e59d0008	 ldr         r0, [sp, #8]
  00398	e5933000	 ldr         r3, [r3]
  0039c	e1a0e00f	 mov         lr, pc
  003a0	e12fff13	 bx          r3

; 285  : }

  003a4	e28dd020	 add         sp, sp, #0x20
  003a8	e89d6000	 ldmia       sp, {sp, lr}
  003ac	e12fff1e	 bx          lr
  003b0		 |$LN12@buildDDHAL|
  003b0		 |$LN13@buildDDHAL|
  003b0	801526dd	 DCD         0x801526dd
  003b4		 |$LN14@buildDDHAL|
  003b4	00000000	 DCD         |?g_FourCC@@3PAKA|
  003b8		 |$LN15@buildDDHAL|
  003b8	00000000	 DCD         |?HalGetDriverInfo@@YAKPAU_DDHAL_GETDRIVERINFODATA@@@Z|
  003bc		 |$LN16@buildDDHAL|
  003bc	00000000	 DCD         |?cbDDSurfaceCallbacks@@3U_DDHAL_DDSURFACECALLBACKS@@A|
  003c0		 |$LN17@buildDDHAL|
  003c0	00000000	 DCD         |?cbDDCallbacks@@3U_DDHAL_DDCALLBACKS@@A|
  003c4		 |$M42136|

			 ENDP  ; |buildDDHALInfo|

	END
