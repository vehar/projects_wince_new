; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\DSS\DDGPE\omap_dmablt.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|?g_csDmaLock@@3UCRITICAL_SECTION@@A| [ DATA ] ; g_csDmaLock
	EXPORT	|?g_tDmaDataInfo2@@3UDmaDataInfo_t@@A| [ DATA ] ; g_tDmaDataInfo2
	EXPORT	|?g_tDmaDataInfo1@@3UDmaDataInfo_t@@A| [ DATA ] ; g_tDmaDataInfo1
	EXPORT	|?g_hDmaChannel1@@3PAXA| [ DATA ]	; g_hDmaChannel1
	EXPORT	|?g_hDmaChannel2@@3PAXA| [ DATA ]	; g_hDmaChannel2

  00000			 AREA	 |.bss|, NOINIT
|?g_csDmaLock@@3UCRITICAL_SECTION@@A| % 0x14		; g_csDmaLock
|?g_tDmaDataInfo2@@3UDmaDataInfo_t@@A| % 0x18		; g_tDmaDataInfo2
|?g_tDmaDataInfo1@@3UDmaDataInfo_t@@A| % 0x18		; g_tDmaDataInfo1
|?g_hDmaChannel1@@3PAXA| % 0x4				; g_hDmaChannel1
|?g_hDmaChannel2@@3PAXA| % 0x4				; g_hDmaChannel2

  00000			 AREA	 |.rdata|, DATA, READONLY
|FourCCDescriptionTable| DCD 0x32595559
	DCD	0x10
	DCD	0xff00ff
	DCD	0xff00
	DCD	0xff000000
	DCD	0x56595559
	DCD	0x10
	DCD	0xff00ff
	DCD	0xff00
	DCD	0xff000000
	DCD	0x55595659
	DCD	0x10
	DCD	0xff00ff00
	DCD	0xff
	DCD	0xff0000
	DCD	0x59565955
	DCD	0x10
	DCD	0xff00ff00
	DCD	0xff
	DCD	0xff0000
	DCD	0x36315659
	DCD	0x10
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x32315659
	DCD	0xc
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x3231564e
	DCD	0xc
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x30323449
	DCD	0xc
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x56555949
	DCD	0xc
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	EXPORT	|IsDmaActive|
	EXPORT	|IsDmaEnable|
	EXPORT	|?IsBusy@OMAPDDGPE@@UAAHXZ|		; OMAPDDGPE::IsBusy

  00000			 AREA	 |.pdata|, PDATA
|$T42594| DCD	|$LN9@IsBusy|
	DCD	0x40003c04
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\ddgpe\omap_dmablt.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?IsBusy@OMAPDDGPE@@UAAHXZ| PROC	; OMAPDDGPE::IsBusy

; 44   : { 

  00000		 |$LN9@IsBusy|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd018	 sub         sp, sp, #0x18
  00010		 |$M42591|

; 45   :     int result = 0;

  00010	e3a03000	 mov         r3, #0
  00014	e58d3000	 str         r3, [sp]

; 46   :     
; 47   :     //  Check for a HW BLT in progress
; 48   :     if( g_hDmaChannel1 && g_tDmaDataInfo1.pDmaLcReg )

  00018	e59f30cc	 ldr         r3, [pc, #0xCC]
  0001c	e5933000	 ldr         r3, [r3]
  00020	e3530000	 cmp         r3, #0
  00024	0a000011	 beq         |$LN4@IsBusy|
  00028	e59f30b8	 ldr         r3, [pc, #0xB8]
  0002c	e5933014	 ldr         r3, [r3, #0x14]
  00030	e3530000	 cmp         r3, #0
  00034	0a00000d	 beq         |$LN4@IsBusy|

; 49   :     {
; 50   :         if( IsDmaEnable(&g_tDmaDataInfo1) && IsDmaActive(&g_tDmaDataInfo1) )

  00038	e59f00a8	 ldr         r0, [pc, #0xA8]
  0003c	eb000000	 bl          IsDmaEnable
  00040	e58d0008	 str         r0, [sp, #8]
  00044	e59d3008	 ldr         r3, [sp, #8]
  00048	e3530000	 cmp         r3, #0
  0004c	0a000007	 beq         |$LN3@IsBusy|
  00050	e59f0090	 ldr         r0, [pc, #0x90]
  00054	eb000000	 bl          IsDmaActive
  00058	e58d000c	 str         r0, [sp, #0xC]
  0005c	e59d300c	 ldr         r3, [sp, #0xC]
  00060	e3530000	 cmp         r3, #0
  00064	0a000001	 beq         |$LN3@IsBusy|

; 51   :             result = 1;

  00068	e3a03001	 mov         r3, #1
  0006c	e58d3000	 str         r3, [sp]
  00070		 |$LN3@IsBusy|
  00070		 |$LN4@IsBusy|

; 52   :     }
; 53   : 
; 54   :     if( g_hDmaChannel2 && g_tDmaDataInfo2.pDmaLcReg )

  00070	e59f306c	 ldr         r3, [pc, #0x6C]
  00074	e5933000	 ldr         r3, [r3]
  00078	e3530000	 cmp         r3, #0
  0007c	0a000011	 beq         |$LN2@IsBusy|
  00080	e59f3058	 ldr         r3, [pc, #0x58]
  00084	e5933014	 ldr         r3, [r3, #0x14]
  00088	e3530000	 cmp         r3, #0
  0008c	0a00000d	 beq         |$LN2@IsBusy|

; 55   :     {
; 56   :         if( IsDmaEnable(&g_tDmaDataInfo2) && IsDmaActive(&g_tDmaDataInfo2) )

  00090	e59f0048	 ldr         r0, [pc, #0x48]
  00094	eb000000	 bl          IsDmaEnable
  00098	e58d0010	 str         r0, [sp, #0x10]
  0009c	e59d3010	 ldr         r3, [sp, #0x10]
  000a0	e3530000	 cmp         r3, #0
  000a4	0a000007	 beq         |$LN1@IsBusy|
  000a8	e59f0030	 ldr         r0, [pc, #0x30]
  000ac	eb000000	 bl          IsDmaActive
  000b0	e58d0014	 str         r0, [sp, #0x14]
  000b4	e59d3014	 ldr         r3, [sp, #0x14]
  000b8	e3530000	 cmp         r3, #0
  000bc	0a000001	 beq         |$LN1@IsBusy|

; 57   :             result = 1;

  000c0	e3a03001	 mov         r3, #1
  000c4	e58d3000	 str         r3, [sp]
  000c8		 |$LN1@IsBusy|
  000c8		 |$LN2@IsBusy|

; 58   :     }
; 59   :     
; 60   :     //  Return result
; 61   :     return result; 

  000c8	e59d3000	 ldr         r3, [sp]
  000cc	e58d3004	 str         r3, [sp, #4]

; 62   : }

  000d0	e59d0004	 ldr         r0, [sp, #4]
  000d4	e28dd018	 add         sp, sp, #0x18
  000d8	e89d6000	 ldmia       sp, {sp, lr}
  000dc	e12fff1e	 bx          lr
  000e0		 |$LN10@IsBusy|
  000e0		 |$LN11@IsBusy|
  000e0	00000000	 DCD         |?g_tDmaDataInfo2@@3UDmaDataInfo_t@@A|
  000e4		 |$LN12@IsBusy|
  000e4	00000000	 DCD         |?g_hDmaChannel2@@3PAXA|
  000e8		 |$LN13@IsBusy|
  000e8	00000000	 DCD         |?g_tDmaDataInfo1@@3UDmaDataInfo_t@@A|
  000ec		 |$LN14@IsBusy|
  000ec	00000000	 DCD         |?g_hDmaChannel1@@3PAXA|
  000f0		 |$M42592|

			 ENDP  ; |?IsBusy@OMAPDDGPE@@UAAHXZ|, OMAPDDGPE::IsBusy

; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\inc\omap_sdma_utility.h

  00000			 AREA	 |.pdata|, PDATA
|$T42605| DCD	|$LN8@IsDmaEnabl|
	DCD	0x40001c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |IsDmaEnable| PROC

; 404  : {

  00000		 |$LN8@IsDmaEnabl|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd008	 sub         sp, sp, #8
  00010		 |$M42602|

; 405  :     volatile ULONG ulCCR;
; 406  : 
; 407  :     if (NULL == pDataInfo)

  00010	e59d3010	 ldr         r3, [sp, #0x10]
  00014	e3530000	 cmp         r3, #0
  00018	1a000002	 bne         |$LN3@IsDmaEnabl|

; 408  :        return FALSE;

  0001c	e3a03000	 mov         r3, #0
  00020	e58d3004	 str         r3, [sp, #4]
  00024	ea00000d	 b           |$LN4@IsDmaEnabl|
  00028		 |$LN3@IsDmaEnabl|

; 409  : 
; 410  :     ulCCR = INREG32(&pDataInfo->pDmaLcReg->CCR);

  00028	e59d3010	 ldr         r3, [sp, #0x10]
  0002c	e2833014	 add         r3, r3, #0x14
  00030	e5933000	 ldr         r3, [r3]
  00034	e5933000	 ldr         r3, [r3]
  00038	e58d3000	 str         r3, [sp]

; 411  : 
; 412  :     if (ulCCR & DMA_CCR_ENABLE)

  0003c	e59d3000	 ldr         r3, [sp]
  00040	e3130080	 tst         r3, #0x80
  00044	0a000003	 beq         |$LN2@IsDmaEnabl|

; 413  :         return TRUE;

  00048	e3a03001	 mov         r3, #1
  0004c	e58d3004	 str         r3, [sp, #4]
  00050	ea000002	 b           |$LN4@IsDmaEnabl|

; 414  :     else

  00054	ea000001	 b           |$LN1@IsDmaEnabl|
  00058		 |$LN2@IsDmaEnabl|

; 415  :         return FALSE;

  00058	e3a03000	 mov         r3, #0
  0005c	e58d3004	 str         r3, [sp, #4]
  00060		 |$LN1@IsDmaEnabl|
  00060		 |$LN4@IsDmaEnabl|

; 416  : }

  00060	e59d0004	 ldr         r0, [sp, #4]
  00064	e28dd008	 add         sp, sp, #8
  00068	e89d6000	 ldmia       sp, {sp, lr}
  0006c	e12fff1e	 bx          lr
  00070		 |$M42603|

			 ENDP  ; |IsDmaEnable|


  00000			 AREA	 |.pdata|, PDATA
|$T42613| DCD	|$LN8@IsDmaActiv|
	DCD	0x40001904
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |IsDmaActive| PROC

; 428  : {

  00000		 |$LN8@IsDmaActiv|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd008	 sub         sp, sp, #8
  00010		 |$M42610|

; 429  :     volatile ULONG ulCCR;
; 430  : 
; 431  :     ulCCR = INREG32(&pDataInfo->pDmaLcReg->CCR);

  00010	e59d3010	 ldr         r3, [sp, #0x10]
  00014	e2833014	 add         r3, r3, #0x14
  00018	e5933000	 ldr         r3, [r3]
  0001c	e5933000	 ldr         r3, [r3]
  00020	e58d3000	 str         r3, [sp]

; 432  : 
; 433  :     if ((ulCCR & DMA_CCR_WR_ACTIVE) || (ulCCR & DMA_CCR_RD_ACTIVE))

  00024	e59d3000	 ldr         r3, [sp]
  00028	e3130b01	 tst         r3, #1, 22
  0002c	1a000002	 bne         |$LN2@IsDmaActiv|
  00030	e59d3000	 ldr         r3, [sp]
  00034	e3130c02	 tst         r3, #2, 24
  00038	0a000003	 beq         |$LN3@IsDmaActiv|
  0003c		 |$LN2@IsDmaActiv|

; 434  :         return TRUE;

  0003c	e3a03001	 mov         r3, #1
  00040	e58d3004	 str         r3, [sp, #4]
  00044	ea000002	 b           |$LN4@IsDmaActiv|

; 435  :     else

  00048	ea000001	 b           |$LN1@IsDmaActiv|
  0004c		 |$LN3@IsDmaActiv|

; 436  :         return FALSE;

  0004c	e3a03000	 mov         r3, #0
  00050	e58d3004	 str         r3, [sp, #4]
  00054		 |$LN1@IsDmaActiv|
  00054		 |$LN4@IsDmaActiv|

; 437  : }

  00054	e59d0004	 ldr         r0, [sp, #4]
  00058	e28dd008	 add         sp, sp, #8
  0005c	e89d6000	 ldmia       sp, {sp, lr}
  00060	e12fff1e	 bx          lr
  00064		 |$M42611|

			 ENDP  ; |IsDmaActive|

	EXPORT	|?WaitForNotBusy@OMAPDDGPE@@UAAXXZ|	; OMAPDDGPE::WaitForNotBusy

  00008			 AREA	 |.pdata|, PDATA
|$T42620| DCD	|$LN7@WaitForNot|
	DCD	0x40001304
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\ddgpe\omap_dmablt.cpp

  000f0			 AREA	 |.text|, CODE, ARM

  000f0		 |?WaitForNotBusy@OMAPDDGPE@@UAAXXZ| PROC ; OMAPDDGPE::WaitForNotBusy

; 67   : {

  000f0		 |$LN7@WaitForNot|
  000f0	e1a0c00d	 mov         r12, sp
  000f4	e92d0001	 stmdb       sp!, {r0}
  000f8	e92d5000	 stmdb       sp!, {r12, lr}
  000fc	e24dd004	 sub         sp, sp, #4
  00100		 |$M42617|
  00100		 |$LN2@WaitForNot|

; 68   :     //  Wait for any active DMA operation to complete
; 69   :     while( IsBusy() );

  00100	e59d300c	 ldr         r3, [sp, #0xC]
  00104	e5933000	 ldr         r3, [r3]
  00108	e283305c	 add         r3, r3, #0x5C
  0010c	e59d000c	 ldr         r0, [sp, #0xC]
  00110	e5933000	 ldr         r3, [r3]
  00114	e1a0e00f	 mov         lr, pc
  00118	e12fff13	 bx          r3
  0011c	e58d0000	 str         r0, [sp]
  00120	e59d3000	 ldr         r3, [sp]
  00124	e3530000	 cmp         r3, #0
  00128	0a000000	 beq         |$LN1@WaitForNot|
  0012c	eafffff3	 b           |$LN2@WaitForNot|
  00130		 |$LN1@WaitForNot|

; 70   :     return; 
; 71   : }

  00130	e28dd004	 add         sp, sp, #4
  00134	e89d6000	 ldmia       sp, {sp, lr}
  00138	e12fff1e	 bx          lr
  0013c		 |$M42618|

			 ENDP  ; |?WaitForNotBusy@OMAPDDGPE@@UAAXXZ|, OMAPDDGPE::WaitForNotBusy

	EXPORT	|DmaStart|
	EXPORT	|DmaSetElementAndFrameCount|
	EXPORT	|DmaSetDstBuffer|
	EXPORT	|DmaSetSrcBuffer|
	EXPORT	|DmaSetColor|
	EXPORT	|DmaConfigure|
	EXPORT	|?OmapSurface@OMAPDDGPESurface@@QAAPAVOMAPSurface@@XZ| ; OMAPDDGPESurface::OmapSurface
	EXPORT	|?BytesPerPixel@GPESurf@@QAAHXZ|	; GPESurf::BytesPerPixel
	EXPORT	|?Stride@GPESurf@@QAAHXZ|		; GPESurf::Stride
	EXPORT	|?DMAFill@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| ; OMAPDDGPE::DMAFill
	IMPORT	|LeaveCriticalSection|
	IMPORT	|EnterCriticalSection|
	IMPORT	|InitializeCriticalSection|
	IMPORT	|DmaAllocateChannel|
	IMPORT	|?EmulatedBlt@GPE@@QAAJPAUGPEBltParms@@@Z| ; GPE::EmulatedBlt
	IMPORT	|?DesignateBlt@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| ; OMAPDDGPE::DesignateBlt
	IMPORT	|?g_Globals@@3VOMAPDDGPEGlobals@@A|	; g_Globals

  00010			 AREA	 |.pdata|, PDATA
|$T42626| DCD	|$LN15@DMAFill|
	DCD	0x40010904
; Function compile flags: /Odtp

  0013c			 AREA	 |.text|, CODE, ARM

  0013c		 |?DMAFill@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::DMAFill

; 79   : {

  0013c		 |$LN15@DMAFill|
  0013c	e1a0c00d	 mov         r12, sp
  00140	e92d0003	 stmdb       sp!, {r0, r1}
  00144	e92d5010	 stmdb       sp!, {r4, r12, lr}
  00148	e24dd07c	 sub         sp, sp, #0x7C
  0014c		 |$M42623|

; 80   :     SCODE   result = S_OK;

  0014c	e3a03000	 mov         r3, #0
  00150	e58d3044	 str         r3, [sp, #0x44]

; 81   :     RECTL*  prclDst = pParms->prclDst;

  00154	e59d308c	 ldr         r3, [sp, #0x8C]
  00158	e2833014	 add         r3, r3, #0x14
  0015c	e5933000	 ldr         r3, [r3]
  00160	e58d3048	 str         r3, [sp, #0x48]

; 82   :     DWORD   dwWidth  = prclDst->right - prclDst->left;

  00164	e59d3048	 ldr         r3, [sp, #0x48]
  00168	e2833008	 add         r3, r3, #8
  0016c	e5932000	 ldr         r2, [r3]
  00170	e59d3048	 ldr         r3, [sp, #0x48]
  00174	e5933000	 ldr         r3, [r3]
  00178	e0423003	 sub         r3, r2, r3
  0017c	e58d303c	 str         r3, [sp, #0x3C]

; 83   :     DWORD   dwHeight = prclDst->bottom - prclDst->top;

  00180	e59d3048	 ldr         r3, [sp, #0x48]
  00184	e283200c	 add         r2, r3, #0xC
  00188	e59d3048	 ldr         r3, [sp, #0x48]
  0018c	e2833004	 add         r3, r3, #4
  00190	e5922000	 ldr         r2, [r2]
  00194	e5933000	 ldr         r3, [r3]
  00198	e0423003	 sub         r3, r2, r3
  0019c	e58d3038	 str         r3, [sp, #0x38]

; 84   :     DWORD   dwStride = pParms->pDst->Stride();

  001a0	e59d308c	 ldr         r3, [sp, #0x8C]
  001a4	e2833004	 add         r3, r3, #4
  001a8	e5930000	 ldr         r0, [r3]
  001ac	eb000000	 bl          |?Stride@GPESurf@@QAAHXZ|
  001b0	e58d0050	 str         r0, [sp, #0x50]
  001b4	e59d3050	 ldr         r3, [sp, #0x50]
  001b8	e58d3034	 str         r3, [sp, #0x34]

; 85   :     DWORD   dwOffset = 0;

  001bc	e3a03000	 mov         r3, #0
  001c0	e58d3040	 str         r3, [sp, #0x40]

; 86   :     
; 87   :     OMAPDDGPESurface*   pOmapSurf = (OMAPDDGPESurface*) pParms->pDst;

  001c4	e59d308c	 ldr         r3, [sp, #0x8C]
  001c8	e2833004	 add         r3, r3, #4
  001cc	e5933000	 ldr         r3, [r3]
  001d0	e58d3000	 str         r3, [sp]

; 88   :      
; 89   :     DmaConfigInfo_t DmaSettings = {
; 90   :         0,                          // elemSize

  001d4	e3a03000	 mov         r3, #0
  001d8	e58d3004	 str         r3, [sp, #4]

; 91   :         1,                          // srcElemIndex

  001dc	e3a03001	 mov         r3, #1
  001e0	e58d3008	 str         r3, [sp, #8]

; 92   :         1,                          // srcFrameIndex

  001e4	e3a03001	 mov         r3, #1
  001e8	e58d300c	 str         r3, [sp, #0xC]

; 93   :         DMA_CCR_SRC_AMODE_CONST,    // srcAddrMode

  001ec	e3a03000	 mov         r3, #0
  001f0	e58d3010	 str         r3, [sp, #0x10]

; 94   :         1,                          // dstElemIndex

  001f4	e3a03001	 mov         r3, #1
  001f8	e58d3014	 str         r3, [sp, #0x14]

; 95   :         1,                          // dstFrameIndex

  001fc	e3a03001	 mov         r3, #1
  00200	e58d3018	 str         r3, [sp, #0x18]

; 96   :         DMA_CCR_DST_AMODE_DOUBLE,   // dstAddrMode

  00204	e3a03903	 mov         r3, #3, 18
  00208	e58d301c	 str         r3, [sp, #0x1C]

; 97   :         FALSE,                      // dmaPrio

  0020c	e3a03000	 mov         r3, #0
  00210	e58d3020	 str         r3, [sp, #0x20]

; 98   :         DMA_SYNCH_TRIGGER_NONE,     // synchTrigger

  00214	e3a03000	 mov         r3, #0
  00218	e58d3024	 str         r3, [sp, #0x24]

; 99   :         DMA_SYNCH_NONE,             // synchMode

  0021c	e3a03000	 mov         r3, #0
  00220	e58d3028	 str         r3, [sp, #0x28]

; 100  :         0,                          // interrupts

  00224	e3a03000	 mov         r3, #0
  00228	e58d302c	 str         r3, [sp, #0x2C]

; 101  :         0                           // syncMap
; 102  :     };

  0022c	e3a03000	 mov         r3, #0
  00230	e58d3030	 str         r3, [sp, #0x30]

; 103  : 
; 104  :     //  Check that a DMA Blt is worth doing
; 105  :     if( dwWidth < MIN_DMA_WIDTH || dwHeight < MIN_DMA_HEIGHT )

  00234	e59d303c	 ldr         r3, [sp, #0x3C]
  00238	e3530020	 cmp         r3, #0x20
  0023c	3a000002	 bcc         |$LN9@DMAFill|
  00240	e59d3038	 ldr         r3, [sp, #0x38]
  00244	e3530020	 cmp         r3, #0x20
  00248	2a000018	 bcs         |$LN10@DMAFill|
  0024c		 |$LN9@DMAFill|

; 106  :     {
; 107  :         if (g_Globals.m_dwEnableNeonBlts)

  0024c	e59f3308	 ldr         r3, [pc, #0x308]
  00250	e5933248	 ldr         r3, [r3, #0x248]
  00254	e3530000	 cmp         r3, #0
  00258	0a00000a	 beq         |$LN8@DMAFill|

; 108  :         {
; 109  :         pParms->pBlt = (SCODE (GPE::*)(struct GPEBltParms *)) &OMAPDDGPE::DesignateBlt;

  0025c	e59f22f4	 ldr         r2, [pc, #0x2F4]
  00260	e59d308c	 ldr         r3, [sp, #0x8C]
  00264	e5832000	 str         r2, [r3]

; 110  :         return OMAPDDGPE::DesignateBlt(pParms);

  00268	e59d108c	 ldr         r1, [sp, #0x8C]
  0026c	e59d0088	 ldr         r0, [sp, #0x88]
  00270	eb000000	 bl          |?DesignateBlt@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|
  00274	e58d0054	 str         r0, [sp, #0x54]
  00278	e59d3054	 ldr         r3, [sp, #0x54]
  0027c	e58d304c	 str         r3, [sp, #0x4C]
  00280	ea0000ac	 b           |$LN11@DMAFill|

; 111  :     }
; 112  : 		else

  00284	ea000009	 b           |$LN7@DMAFill|
  00288		 |$LN8@DMAFill|

; 113  : 		{
; 114  :             pParms->pBlt = &GPE::EmulatedBlt;

  00288	e59f22c4	 ldr         r2, [pc, #0x2C4]
  0028c	e59d308c	 ldr         r3, [sp, #0x8C]
  00290	e5832000	 str         r2, [r3]

; 115  :             return GPE::EmulatedBlt(pParms);

  00294	e59d108c	 ldr         r1, [sp, #0x8C]
  00298	e59d0088	 ldr         r0, [sp, #0x88]
  0029c	eb000000	 bl          |?EmulatedBlt@GPE@@QAAJPAUGPEBltParms@@@Z|
  002a0	e58d0058	 str         r0, [sp, #0x58]
  002a4	e59d3058	 ldr         r3, [sp, #0x58]
  002a8	e58d304c	 str         r3, [sp, #0x4C]
  002ac	ea0000a1	 b           |$LN11@DMAFill|
  002b0		 |$LN7@DMAFill|
  002b0		 |$LN10@DMAFill|

; 116  : 		}
; 117  :     }
; 118  : 
; 119  :     //  Allocate DMA channel
; 120  :     if( g_hDmaChannel1 == NULL )

  002b0	e59f3298	 ldr         r3, [pc, #0x298]
  002b4	e5933000	 ldr         r3, [r3]
  002b8	e3530000	 cmp         r3, #0
  002bc	1a000007	 bne         |$LN6@DMAFill|

; 121  :     {
; 122  :         g_hDmaChannel1 = DmaAllocateChannel(DMA_TYPE_SYSTEM);

  002c0	e3a00000	 mov         r0, #0
  002c4	eb000000	 bl          DmaAllocateChannel
  002c8	e58d005c	 str         r0, [sp, #0x5C]
  002cc	e59d205c	 ldr         r2, [sp, #0x5C]
  002d0	e59f3278	 ldr         r3, [pc, #0x278]
  002d4	e5832000	 str         r2, [r3]

; 123  :         InitializeCriticalSection( &g_csDmaLock );

  002d8	e59f0268	 ldr         r0, [pc, #0x268]
  002dc	eb000000	 bl          InitializeCriticalSection
  002e0		 |$LN6@DMAFill|

; 124  :     }
; 125  : 
; 126  :     //  Lock access to DMA registers
; 127  :     EnterCriticalSection( &g_csDmaLock );

  002e0	e59f0260	 ldr         r0, [pc, #0x260]
  002e4	eb000000	 bl          EnterCriticalSection

; 128  : 
; 129  :     //  Wait for any pending operations to complete
; 130  :     WaitForNotBusy();

  002e8	e59d3088	 ldr         r3, [sp, #0x88]
  002ec	e5933000	 ldr         r3, [r3]
  002f0	e2833060	 add         r3, r3, #0x60
  002f4	e59d0088	 ldr         r0, [sp, #0x88]
  002f8	e5933000	 ldr         r3, [r3]
  002fc	e1a0e00f	 mov         lr, pc
  00300	e12fff13	 bx          r3

; 131  : 
; 132  :     //  Configure DMA channel for FILL operation
; 133  :     switch( pParms->pDst->BytesPerPixel() )

  00304	e59d308c	 ldr         r3, [sp, #0x8C]
  00308	e2833004	 add         r3, r3, #4
  0030c	e5930000	 ldr         r0, [r3]
  00310	eb000000	 bl          |?BytesPerPixel@GPESurf@@QAAHXZ|
  00314	e58d0060	 str         r0, [sp, #0x60]
  00318	e59d3060	 ldr         r3, [sp, #0x60]
  0031c	e58d3064	 str         r3, [sp, #0x64]
  00320	e59d3064	 ldr         r3, [sp, #0x64]
  00324	e3530001	 cmp         r3, #1
  00328	0a000006	 beq         |$LN3@DMAFill|
  0032c	e59d3064	 ldr         r3, [sp, #0x64]
  00330	e3530002	 cmp         r3, #2
  00334	0a000014	 beq         |$LN2@DMAFill|
  00338	e59d3064	 ldr         r3, [sp, #0x64]
  0033c	e3530004	 cmp         r3, #4
  00340	0a000026	 beq         |$LN1@DMAFill|
  00344	ea000039	 b           |$LN4@DMAFill|
  00348		 |$LN3@DMAFill|

; 134  :     {
; 135  :         case 1:
; 136  :             DmaSettings.elemSize = DMA_CSDP_DATATYPE_S8;

  00348	e3a03000	 mov         r3, #0
  0034c	e58d3004	 str         r3, [sp, #4]

; 137  :             DmaSettings.dstFrameIndex = 1 + dwStride - dwWidth;

  00350	e59d3034	 ldr         r3, [sp, #0x34]
  00354	e2832001	 add         r2, r3, #1
  00358	e59d303c	 ldr         r3, [sp, #0x3C]
  0035c	e0423003	 sub         r3, r2, r3
  00360	e58d3018	 str         r3, [sp, #0x18]

; 138  :             dwOffset = prclDst->top * dwStride + prclDst->left;

  00364	e59d3048	 ldr         r3, [sp, #0x48]
  00368	e2833004	 add         r3, r3, #4
  0036c	e5931000	 ldr         r1, [r3]
  00370	e59d3034	 ldr         r3, [sp, #0x34]
  00374	e0020391	 mul         r2, r1, r3
  00378	e59d3048	 ldr         r3, [sp, #0x48]
  0037c	e5933000	 ldr         r3, [r3]
  00380	e0823003	 add         r3, r2, r3
  00384	e58d3040	 str         r3, [sp, #0x40]

; 139  :             break;

  00388	ea000028	 b           |$LN4@DMAFill|
  0038c		 |$LN2@DMAFill|

; 140  : 
; 141  :         case 2:
; 142  :             DmaSettings.elemSize = DMA_CSDP_DATATYPE_S16;

  0038c	e3a03001	 mov         r3, #1
  00390	e58d3004	 str         r3, [sp, #4]

; 143  :             DmaSettings.dstFrameIndex = 1 + dwStride - 2*dwWidth;

  00394	e59d3034	 ldr         r3, [sp, #0x34]
  00398	e2831001	 add         r1, r3, #1
  0039c	e59d203c	 ldr         r2, [sp, #0x3C]
  003a0	e3a03002	 mov         r3, #2
  003a4	e0030392	 mul         r3, r2, r3
  003a8	e0413003	 sub         r3, r1, r3
  003ac	e58d3018	 str         r3, [sp, #0x18]

; 144  :             dwOffset = prclDst->top * dwStride + 2 * prclDst->left;

  003b0	e59d3048	 ldr         r3, [sp, #0x48]
  003b4	e2833004	 add         r3, r3, #4
  003b8	e5932000	 ldr         r2, [r3]
  003bc	e59d3034	 ldr         r3, [sp, #0x34]
  003c0	e0010392	 mul         r1, r2, r3
  003c4	e59d3048	 ldr         r3, [sp, #0x48]
  003c8	e5932000	 ldr         r2, [r3]
  003cc	e3a03002	 mov         r3, #2
  003d0	e0030392	 mul         r3, r2, r3
  003d4	e0813003	 add         r3, r1, r3
  003d8	e58d3040	 str         r3, [sp, #0x40]

; 145  :             break;

  003dc	ea000013	 b           |$LN4@DMAFill|
  003e0		 |$LN1@DMAFill|

; 146  : 
; 147  :         case 4:
; 148  :             DmaSettings.elemSize = DMA_CSDP_DATATYPE_S32;

  003e0	e3a03002	 mov         r3, #2
  003e4	e58d3004	 str         r3, [sp, #4]

; 149  :             DmaSettings.dstFrameIndex = 1 + dwStride - 4*dwWidth;

  003e8	e59d3034	 ldr         r3, [sp, #0x34]
  003ec	e2831001	 add         r1, r3, #1
  003f0	e59d203c	 ldr         r2, [sp, #0x3C]
  003f4	e3a03004	 mov         r3, #4
  003f8	e0030392	 mul         r3, r2, r3
  003fc	e0413003	 sub         r3, r1, r3
  00400	e58d3018	 str         r3, [sp, #0x18]

; 150  :             dwOffset = prclDst->top * dwStride + 4 * prclDst->left;

  00404	e59d3048	 ldr         r3, [sp, #0x48]
  00408	e2833004	 add         r3, r3, #4
  0040c	e5932000	 ldr         r2, [r3]
  00410	e59d3034	 ldr         r3, [sp, #0x34]
  00414	e0010392	 mul         r1, r2, r3
  00418	e59d3048	 ldr         r3, [sp, #0x48]
  0041c	e5932000	 ldr         r2, [r3]
  00420	e3a03004	 mov         r3, #4
  00424	e0030392	 mul         r3, r2, r3
  00428	e0813003	 add         r3, r1, r3
  0042c	e58d3040	 str         r3, [sp, #0x40]
  00430		 |$LN4@DMAFill|

; 151  :             break;
; 152  :     }
; 153  :     
; 154  :     //  Clear any clipping rect for the operation
; 155  :     pOmapSurf->OmapSurface()->SetClipping( NULL );

  00430	e59d0000	 ldr         r0, [sp]
  00434	eb000000	 bl          |?OmapSurface@OMAPDDGPESurface@@QAAPAVOMAPSurface@@XZ|
  00438	e58d0068	 str         r0, [sp, #0x68]
  0043c	e59d3068	 ldr         r3, [sp, #0x68]
  00440	e58d306c	 str         r3, [sp, #0x6C]
  00444	e3a01000	 mov         r1, #0
  00448	e59d006c	 ldr         r0, [sp, #0x6C]
  0044c	e59d306c	 ldr         r3, [sp, #0x6C]
  00450	e5933000	 ldr         r3, [r3]
  00454	e2833020	 add         r3, r3, #0x20
  00458	e5933000	 ldr         r3, [r3]
  0045c	e1a0e00f	 mov         lr, pc
  00460	e12fff13	 bx          r3

; 156  : 
; 157  :     //  Enable bursting for improved memory performance
; 158  :     DmaSettings.elemSize |= DMA_CSDP_DST_BURST_64BYTES_16x32_8x64 | DMA_CSDP_DST_PACKED;

  00464	e59d3004	 ldr         r3, [sp, #4]
  00468	e3833a0e	 orr         r3, r3, #0xE, 20
  0046c	e58d3004	 str         r3, [sp, #4]

; 159  :     
; 160  :     
; 161  :     //  Configure the DMA channel
; 162  :     DmaConfigure( g_hDmaChannel1, &DmaSettings, 0, &g_tDmaDataInfo1 );

  00470	e59f30d4	 ldr         r3, [pc, #0xD4]
  00474	e3a02000	 mov         r2, #0
  00478	e28d1004	 add         r1, sp, #4
  0047c	e59f00cc	 ldr         r0, [pc, #0xCC]
  00480	e5900000	 ldr         r0, [r0]
  00484	eb000000	 bl          DmaConfigure

; 163  : 
; 164  :     DmaSetColor( &g_tDmaDataInfo1, DMA_CCR_CONST_FILL_ENABLE, (DWORD)pParms->solidColor );

  00488	e59d308c	 ldr         r3, [sp, #0x8C]
  0048c	e2833020	 add         r3, r3, #0x20
  00490	e5932000	 ldr         r2, [r3]
  00494	e3a01801	 mov         r1, #1, 16
  00498	e59f00ac	 ldr         r0, [pc, #0xAC]
  0049c	eb000000	 bl          DmaSetColor

; 165  :     DmaSetSrcBuffer( &g_tDmaDataInfo1, NULL, 0 );

  004a0	e3a02000	 mov         r2, #0
  004a4	e3a01000	 mov         r1, #0
  004a8	e59f009c	 ldr         r0, [pc, #0x9C]
  004ac	eb000000	 bl          DmaSetSrcBuffer

; 166  :     DmaSetDstBuffer( &g_tDmaDataInfo1, NULL, pOmapSurf->OmapSurface()->PhysicalAddr() + dwOffset );

  004b0	e59d0000	 ldr         r0, [sp]
  004b4	eb000000	 bl          |?OmapSurface@OMAPDDGPESurface@@QAAPAVOMAPSurface@@XZ|
  004b8	e58d0070	 str         r0, [sp, #0x70]
  004bc	e59d3070	 ldr         r3, [sp, #0x70]
  004c0	e58d3074	 str         r3, [sp, #0x74]
  004c4	e3a03000	 mov         r3, #0
  004c8	e3a02000	 mov         r2, #0
  004cc	e3a01000	 mov         r1, #0
  004d0	e59d0074	 ldr         r0, [sp, #0x74]
  004d4	e59de074	 ldr         lr, [sp, #0x74]
  004d8	e59ee000	 ldr         lr, [lr]
  004dc	e28ee014	 add         lr, lr, #0x14
  004e0	e59e4000	 ldr         r4, [lr]
  004e4	e1a0e00f	 mov         lr, pc
  004e8	e12fff14	 bx          r4
  004ec	e58d0078	 str         r0, [sp, #0x78]
  004f0	e59d2078	 ldr         r2, [sp, #0x78]
  004f4	e59d3040	 ldr         r3, [sp, #0x40]
  004f8	e0822003	 add         r2, r2, r3
  004fc	e3a01000	 mov         r1, #0
  00500	e59f0044	 ldr         r0, [pc, #0x44]
  00504	eb000000	 bl          DmaSetDstBuffer

; 167  :     DmaSetElementAndFrameCount( &g_tDmaDataInfo1, dwWidth, (UINT16) dwHeight );

  00508	e59d3038	 ldr         r3, [sp, #0x38]
  0050c	e1a02803	 mov         r2, r3, lsl #16
  00510	e1a02822	 mov         r2, r2, lsr #16
  00514	e59d103c	 ldr         r1, [sp, #0x3C]
  00518	e59f002c	 ldr         r0, [pc, #0x2C]
  0051c	eb000000	 bl          DmaSetElementAndFrameCount

; 168  : 
; 169  :     //  Start the DMA operation
; 170  :     DmaStart( &g_tDmaDataInfo1 );

  00520	e59f0024	 ldr         r0, [pc, #0x24]
  00524	eb000000	 bl          DmaStart

; 171  : 	
; 172  :     //  Unlock access to DMA registers
; 173  :     LeaveCriticalSection( &g_csDmaLock );

  00528	e59f0018	 ldr         r0, [pc, #0x18]
  0052c	eb000000	 bl          LeaveCriticalSection

; 174  : 
; 175  :     return result;    

  00530	e59d3044	 ldr         r3, [sp, #0x44]
  00534	e58d304c	 str         r3, [sp, #0x4C]
  00538		 |$LN11@DMAFill|

; 176  : }

  00538	e59d004c	 ldr         r0, [sp, #0x4C]
  0053c	e28dd07c	 add         sp, sp, #0x7C
  00540	e89d6010	 ldmia       sp, {r4, sp, lr}
  00544	e12fff1e	 bx          lr
  00548		 |$LN16@DMAFill|
  00548		 |$LN17@DMAFill|
  00548	00000000	 DCD         |?g_csDmaLock@@3UCRITICAL_SECTION@@A|
  0054c		 |$LN18@DMAFill|
  0054c	00000000	 DCD         |?g_tDmaDataInfo1@@3UDmaDataInfo_t@@A|
  00550		 |$LN19@DMAFill|
  00550	00000000	 DCD         |?g_hDmaChannel1@@3PAXA|
  00554		 |$LN20@DMAFill|
  00554	00000000	 DCD         |?EmulatedBlt@GPE@@QAAJPAUGPEBltParms@@@Z|
  00558		 |$LN21@DMAFill|
  00558	00000000	 DCD         |?DesignateBlt@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|
  0055c		 |$LN22@DMAFill|
  0055c	00000000	 DCD         |?g_Globals@@3VOMAPDDGPEGlobals@@A|
  00560		 |$M42624|

			 ENDP  ; |?DMAFill@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|, OMAPDDGPE::DMAFill

; File c:\wince600\public\common\oak\inc\gpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T42639| DCD	|$LN5@Stride|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Stride@GPESurf@@QAAHXZ| PROC		; GPESurf::Stride

; 177  :     {

  00000		 |$LN5@Stride|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M42636|

; 178  :         return m_nStrideBytes;

  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e2833008	 add         r3, r3, #8
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3000	 str         r3, [sp]

; 179  :     }

  00020	e59d0000	 ldr         r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M42637|

			 ENDP  ; |?Stride@GPESurf@@QAAHXZ|, GPESurf::Stride


  00000			 AREA	 |.pdata|, PDATA
|$T42647| DCD	|$LN5@BytesPerPi|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?BytesPerPixel@GPESurf@@QAAHXZ| PROC	; GPESurf::BytesPerPixel

; 183  :     {

  00000		 |$LN5@BytesPerPi|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M42644|

; 184  :         return m_BytesPixel;

  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e2833044	 add         r3, r3, #0x44
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3000	 str         r3, [sp]

; 185  :     }

  00020	e59d0000	 ldr         r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M42645|

			 ENDP  ; |?BytesPerPixel@GPESurf@@QAAHXZ|, GPESurf::BytesPerPixel

; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\inc\omap_ddgpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T42655| DCD	|$LN5@OmapSurfac|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?OmapSurface@OMAPDDGPESurface@@QAAPAVOMAPSurface@@XZ| PROC ; OMAPDDGPESurface::OmapSurface

; 102  :     OMAPSurface*        OmapSurface() { return m_pSurface; }

  00000		 |$LN5@OmapSurfac|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M42652|
  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e283307c	 add         r3, r3, #0x7C
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3000	 str         r3, [sp]
  00020	e59d0000	 ldr         r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M42653|

			 ENDP  ; |?OmapSurface@OMAPDDGPESurface@@QAAPAVOMAPSurface@@XZ|, OMAPDDGPESurface::OmapSurface

	IMPORT	|memset|
	IMPORT	|DmaGetLogicalChannel|
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\inc\omap_sdma_utility.h

  00000			 AREA	 |.pdata|, PDATA
|$T42663| DCD	|$LN9@DmaConfigu|
	DCD	0x40007e04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DmaConfigure| PROC

; 166  : {

  00000		 |$LN9@DmaConfigu|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d000f	 stmdb       sp!, {r0 - r3}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd010	 sub         sp, sp, #0x10
  00010		 |$M42660|

; 167  :     BOOL rc = FALSE;

  00010	e3a03000	 mov         r3, #0
  00014	e58d3004	 str         r3, [sp, #4]

; 168  :     OMAP_DMA_LC_REGS *pDmaLcReg = (OMAP_DMA_LC_REGS*)DmaGetLogicalChannel(hDmaChannel);

  00018	e59d0018	 ldr         r0, [sp, #0x18]
  0001c	eb000000	 bl          DmaGetLogicalChannel
  00020	e58d000c	 str         r0, [sp, #0xC]
  00024	e59d300c	 ldr         r3, [sp, #0xC]
  00028	e58d3000	 str         r3, [sp]

; 169  :     if (pDmaLcReg == NULL || pConfigInfo == NULL)

  0002c	e59d3000	 ldr         r3, [sp]
  00030	e3530000	 cmp         r3, #0
  00034	0a000002	 beq         |$LN3@DmaConfigu|
  00038	e59d301c	 ldr         r3, [sp, #0x1C]
  0003c	e3530000	 cmp         r3, #0
  00040	1a000001	 bne         |$LN4@DmaConfigu|
  00044		 |$LN3@DmaConfigu|

; 170  :         {
; 171  :         goto cleanUp;

  00044	ea000065	 b           |$LN2@DmaConfigu|
  00048	ea000064	 b           |$cleanUp$42140|
  0004c		 |$LN4@DmaConfigu|

; 172  :         }
; 173  : 
; 174  :     // initialize dma DataInfo if necessary
; 175  :     if (pDataInfo != NULL)

  0004c	e59d3024	 ldr         r3, [sp, #0x24]
  00050	e3530000	 cmp         r3, #0
  00054	0a00000b	 beq         |$LN1@DmaConfigu|

; 176  :         {
; 177  :         memset(pDataInfo, 0, sizeof(DmaDataInfo_t));

  00058	e3a02018	 mov         r2, #0x18
  0005c	e3a01000	 mov         r1, #0
  00060	e59d0024	 ldr         r0, [sp, #0x24]
  00064	eb000000	 bl          memset

; 178  :         pDataInfo->hDmaChannel = hDmaChannel;

  00068	e59d3024	 ldr         r3, [sp, #0x24]
  0006c	e2832010	 add         r2, r3, #0x10
  00070	e59d3018	 ldr         r3, [sp, #0x18]
  00074	e5823000	 str         r3, [r2]

; 179  :         pDataInfo->pDmaLcReg = pDmaLcReg;

  00078	e59d3024	 ldr         r3, [sp, #0x24]
  0007c	e2832014	 add         r2, r3, #0x14
  00080	e59d3000	 ldr         r3, [sp]
  00084	e5823000	 str         r3, [r2]
  00088		 |$LN1@DmaConfigu|

; 180  :         }
; 181  : 
; 182  :     // Disable the DMA in case it is running
; 183  :     CLRREG32(&pDmaLcReg->CCR, DMA_CCR_ENABLE);

  00088	e59d3000	 ldr         r3, [sp]
  0008c	e5932000	 ldr         r2, [r3]
  00090	e3e03080	 mvn         r3, #0x80
  00094	e0022003	 and         r2, r2, r3
  00098	e59d3000	 ldr         r3, [sp]
  0009c	e5832000	 str         r2, [r3]

; 184  : 
; 185  :     // update syncmap
; 186  :     pConfigInfo->syncMap = syncMap;

  000a0	e59d301c	 ldr         r3, [sp, #0x1C]
  000a4	e283202c	 add         r2, r3, #0x2C
  000a8	e59d3020	 ldr         r3, [sp, #0x20]
  000ac	e5823000	 str         r3, [r2]

; 187  : 
; 188  :     // Initialize logical channel registers
; 189  :     //
; 190  :     OUTREG32(&pDmaLcReg->CCR, 0);

  000b0	e59d2000	 ldr         r2, [sp]
  000b4	e3a03000	 mov         r3, #0
  000b8	e5823000	 str         r3, [r2]

; 191  :     OUTREG32(&pDmaLcReg->CLNK_CTRL, 0);

  000bc	e59d3000	 ldr         r3, [sp]
  000c0	e2832004	 add         r2, r3, #4
  000c4	e3a03000	 mov         r3, #0
  000c8	e5823000	 str         r3, [r2]

; 192  :     OUTREG32(&pDmaLcReg->COLOR, 0);

  000cc	e59d3000	 ldr         r3, [sp]
  000d0	e2832044	 add         r2, r3, #0x44
  000d4	e3a03000	 mov         r3, #0
  000d8	e5823000	 str         r3, [r2]

; 193  : 
; 194  :     // update CSDP
; 195  :     //  DATA_TYPE
; 196  :     //  DST
; 197  :     //  SRC
; 198  :     OUTREG32(&pDmaLcReg->CSDP, pConfigInfo->elemSize);

  000dc	e59d3000	 ldr         r3, [sp]
  000e0	e2832010	 add         r2, r3, #0x10
  000e4	e59d301c	 ldr         r3, [sp, #0x1C]
  000e8	e5933000	 ldr         r3, [r3]
  000ec	e5823000	 str         r3, [r2]

; 199  : 
; 200  :     // update CCR
; 201  :     //  DST_MODE
; 202  :     //  SRC_MODE
; 203  :     //  PRIO
; 204  :     //  SYNC
; 205  :     //
; 206  :     OUTREG32(&pDmaLcReg->CCR, pConfigInfo->srcAddrMode |
; 207  :         pConfigInfo->dstAddrMode | pConfigInfo->dmaPrio |
; 208  :         DMA_CCR_SYNC(syncMap) | pConfigInfo->synchTrigger |
; 209  :         pConfigInfo->synchMode
; 210  :         );

  000f0	e59d301c	 ldr         r3, [sp, #0x1C]
  000f4	e283200c	 add         r2, r3, #0xC
  000f8	e59d301c	 ldr         r3, [sp, #0x1C]
  000fc	e2833018	 add         r3, r3, #0x18
  00100	e5922000	 ldr         r2, [r2]
  00104	e5933000	 ldr         r3, [r3]
  00108	e1822003	 orr         r2, r2, r3
  0010c	e59d301c	 ldr         r3, [sp, #0x1C]
  00110	e283301c	 add         r3, r3, #0x1C
  00114	e5933000	 ldr         r3, [r3]
  00118	e1821003	 orr         r1, r2, r3
  0011c	e59d3020	 ldr         r3, [sp, #0x20]
  00120	e203201f	 and         r2, r3, #0x1F
  00124	e59d3020	 ldr         r3, [sp, #0x20]
  00128	e2033060	 and         r3, r3, #0x60
  0012c	e1a03703	 mov         r3, r3, lsl #14
  00130	e1823003	 orr         r3, r2, r3
  00134	e1812003	 orr         r2, r1, r3
  00138	e59d301c	 ldr         r3, [sp, #0x1C]
  0013c	e2833020	 add         r3, r3, #0x20
  00140	e5933000	 ldr         r3, [r3]
  00144	e1822003	 orr         r2, r2, r3
  00148	e59d301c	 ldr         r3, [sp, #0x1C]
  0014c	e2833024	 add         r3, r3, #0x24
  00150	e5933000	 ldr         r3, [r3]
  00154	e1822003	 orr         r2, r2, r3
  00158	e59d3000	 ldr         r3, [sp]
  0015c	e5832000	 str         r2, [r3]

; 211  : 
; 212  :     // update CSEI
; 213  :     //
; 214  :     OUTREG32(&pDmaLcReg->CSEI, pConfigInfo->srcElemIndex);

  00160	e59d301c	 ldr         r3, [sp, #0x1C]
  00164	e2831004	 add         r1, r3, #4
  00168	e59d3000	 ldr         r3, [sp]
  0016c	e2832024	 add         r2, r3, #0x24
  00170	e5913000	 ldr         r3, [r1]
  00174	e5823000	 str         r3, [r2]

; 215  : 
; 216  :     // update CDEI
; 217  :     //
; 218  :     OUTREG32(&pDmaLcReg->CDEI, pConfigInfo->dstElemIndex);

  00178	e59d301c	 ldr         r3, [sp, #0x1C]
  0017c	e2831010	 add         r1, r3, #0x10
  00180	e59d3000	 ldr         r3, [sp]
  00184	e283202c	 add         r2, r3, #0x2C
  00188	e5913000	 ldr         r3, [r1]
  0018c	e5823000	 str         r3, [r2]

; 219  : 
; 220  :     // update CSFI
; 221  :     //
; 222  :     OUTREG32(&pDmaLcReg->CSFI, pConfigInfo->srcFrameIndex);

  00190	e59d301c	 ldr         r3, [sp, #0x1C]
  00194	e2831008	 add         r1, r3, #8
  00198	e59d3000	 ldr         r3, [sp]
  0019c	e2832028	 add         r2, r3, #0x28
  001a0	e5913000	 ldr         r3, [r1]
  001a4	e5823000	 str         r3, [r2]

; 223  : 
; 224  :     // update CDFI
; 225  :     //
; 226  :     OUTREG32(&pDmaLcReg->CDFI, pConfigInfo->dstFrameIndex);

  001a8	e59d301c	 ldr         r3, [sp, #0x1C]
  001ac	e2831014	 add         r1, r3, #0x14
  001b0	e59d3000	 ldr         r3, [sp]
  001b4	e2832030	 add         r2, r3, #0x30
  001b8	e5913000	 ldr         r3, [r1]
  001bc	e5823000	 str         r3, [r2]

; 227  : 
; 228  :     // update CICR
; 229  :     //
; 230  :     OUTREG32(&pDmaLcReg->CICR , pConfigInfo->interrupts);

  001c0	e59d301c	 ldr         r3, [sp, #0x1C]
  001c4	e2831028	 add         r1, r3, #0x28
  001c8	e59d3000	 ldr         r3, [sp]
  001cc	e2832008	 add         r2, r3, #8
  001d0	e5913000	 ldr         r3, [r1]
  001d4	e5823000	 str         r3, [r2]

; 231  :     
; 232  :     rc = TRUE;

  001d8	e3a03001	 mov         r3, #1
  001dc	e58d3004	 str         r3, [sp, #4]
  001e0		 |$LN2@DmaConfigu|
  001e0		 |$cleanUp$42140|

; 233  : 
; 234  : cleanUp:
; 235  :     return rc;

  001e0	e59d3004	 ldr         r3, [sp, #4]
  001e4	e58d3008	 str         r3, [sp, #8]

; 236  : }

  001e8	e59d0008	 ldr         r0, [sp, #8]
  001ec	e28dd010	 add         sp, sp, #0x10
  001f0	e89d6000	 ldmia       sp, {sp, lr}
  001f4	e12fff1e	 bx          lr
  001f8		 |$M42661|

			 ENDP  ; |DmaConfigure|


  00000			 AREA	 |.pdata|, PDATA
|$T42670| DCD	|$LN6@DmaSetDstB|
	DCD	0x40001e03
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DmaSetDstBuffer| PROC

; 330  : {

  00000		 |$LN6@DmaSetDstB|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0007	 stmdb       sp!, {r0 - r2}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M42667|

; 331  :     // save values
; 332  :     //
; 333  :     pDataInfo->pDstBuffer = pBuffer;

  0000c	e59d3008	 ldr         r3, [sp, #8]
  00010	e2832004	 add         r2, r3, #4
  00014	e59d300c	 ldr         r3, [sp, #0xC]
  00018	e5823000	 str         r3, [r2]

; 334  :     pDataInfo->PhysAddrDstBuffer = PhysAddr;

  0001c	e59d3008	 ldr         r3, [sp, #8]
  00020	e283200c	 add         r2, r3, #0xC
  00024	e59d3010	 ldr         r3, [sp, #0x10]
  00028	e5823000	 str         r3, [r2]

; 335  : 
; 336  :     // set destination address
; 337  :     //
; 338  :     if (pDataInfo->pDmaLcReg != NULL)

  0002c	e59d3008	 ldr         r3, [sp, #8]
  00030	e2833014	 add         r3, r3, #0x14
  00034	e5933000	 ldr         r3, [r3]
  00038	e3530000	 cmp         r3, #0
  0003c	0a00000b	 beq         |$LN1@DmaSetDstB|

; 339  :         {
; 340  :         OUTREG32(&pDataInfo->pDmaLcReg->CDSA, PhysAddr);

  00040	e59d3008	 ldr         r3, [sp, #8]
  00044	e2833014	 add         r3, r3, #0x14
  00048	e5933000	 ldr         r3, [r3]
  0004c	e2832020	 add         r2, r3, #0x20
  00050	e59d3010	 ldr         r3, [sp, #0x10]
  00054	e5823000	 str         r3, [r2]

; 341  :         OUTREG32(&pDataInfo->pDmaLcReg->CDAC, PhysAddr);

  00058	e59d3008	 ldr         r3, [sp, #8]
  0005c	e2833014	 add         r3, r3, #0x14
  00060	e5933000	 ldr         r3, [r3]
  00064	e2832038	 add         r2, r3, #0x38
  00068	e59d3010	 ldr         r3, [sp, #0x10]
  0006c	e5823000	 str         r3, [r2]
  00070		 |$LN1@DmaSetDstB|

; 342  :         }
; 343  : }

  00070	e89d6000	 ldmia       sp, {sp, lr}
  00074	e12fff1e	 bx          lr
  00078		 |$M42668|

			 ENDP  ; |DmaSetDstBuffer|


  00000			 AREA	 |.pdata|, PDATA
|$T42677| DCD	|$LN6@DmaSetSrcB|
	DCD	0x40001d03
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DmaSetSrcBuffer| PROC

; 358  : {

  00000		 |$LN6@DmaSetSrcB|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0007	 stmdb       sp!, {r0 - r2}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M42674|

; 359  :     // save values
; 360  :     //
; 361  :     pDataInfo->pSrcBuffer = pBuffer;

  0000c	e59d200c	 ldr         r2, [sp, #0xC]
  00010	e59d3008	 ldr         r3, [sp, #8]
  00014	e5832000	 str         r2, [r3]

; 362  :     pDataInfo->PhysAddrSrcBuffer = PhysAddr;

  00018	e59d3008	 ldr         r3, [sp, #8]
  0001c	e2832008	 add         r2, r3, #8
  00020	e59d3010	 ldr         r3, [sp, #0x10]
  00024	e5823000	 str         r3, [r2]

; 363  : 
; 364  :     // set source address
; 365  :     //
; 366  :     if (pDataInfo->pDmaLcReg != NULL)

  00028	e59d3008	 ldr         r3, [sp, #8]
  0002c	e2833014	 add         r3, r3, #0x14
  00030	e5933000	 ldr         r3, [r3]
  00034	e3530000	 cmp         r3, #0
  00038	0a00000b	 beq         |$LN1@DmaSetSrcB|

; 367  :         {
; 368  :         OUTREG32(&pDataInfo->pDmaLcReg->CSSA, PhysAddr);

  0003c	e59d3008	 ldr         r3, [sp, #8]
  00040	e2833014	 add         r3, r3, #0x14
  00044	e5933000	 ldr         r3, [r3]
  00048	e283201c	 add         r2, r3, #0x1C
  0004c	e59d3010	 ldr         r3, [sp, #0x10]
  00050	e5823000	 str         r3, [r2]

; 369  :         OUTREG32(&pDataInfo->pDmaLcReg->CSAC, PhysAddr);

  00054	e59d3008	 ldr         r3, [sp, #8]
  00058	e2833014	 add         r3, r3, #0x14
  0005c	e5933000	 ldr         r3, [r3]
  00060	e2832034	 add         r2, r3, #0x34
  00064	e59d3010	 ldr         r3, [sp, #0x10]
  00068	e5823000	 str         r3, [r2]
  0006c		 |$LN1@DmaSetSrcB|

; 370  :         }
; 371  : }

  0006c	e89d6000	 ldmia       sp, {sp, lr}
  00070	e12fff1e	 bx          lr
  00074		 |$M42675|

			 ENDP  ; |DmaSetSrcBuffer|


  00000			 AREA	 |.pdata|, PDATA
|$T42684| DCD	|$LN5@DmaSetElem|
	DCD	0x40001103
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DmaSetElementAndFrameCount| PROC

; 386  : {

  00000		 |$LN5@DmaSetElem|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0007	 stmdb       sp!, {r0 - r2}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M42681|

; 387  :     // setup frame and element count for destination side
; 388  :     //
; 389  :     OUTREG32(&pDataInfo->pDmaLcReg->CEN , countElements);

  0000c	e59d3008	 ldr         r3, [sp, #8]
  00010	e2833014	 add         r3, r3, #0x14
  00014	e5933000	 ldr         r3, [r3]
  00018	e2832014	 add         r2, r3, #0x14
  0001c	e59d300c	 ldr         r3, [sp, #0xC]
  00020	e5823000	 str         r3, [r2]

; 390  :     OUTREG32(&pDataInfo->pDmaLcReg->CFN , countFrames);

  00024	e1dd21b0	 ldrh        r2, [sp, #0x10]
  00028	e59d3008	 ldr         r3, [sp, #8]
  0002c	e2833014	 add         r3, r3, #0x14
  00030	e5933000	 ldr         r3, [r3]
  00034	e2833018	 add         r3, r3, #0x18
  00038	e5832000	 str         r2, [r3]

; 391  : }

  0003c	e89d6000	 ldmia       sp, {sp, lr}
  00040	e12fff1e	 bx          lr
  00044		 |$M42682|

			 ENDP  ; |DmaSetElementAndFrameCount|


  00000			 AREA	 |.pdata|, PDATA
|$T42691| DCD	|$LN5@DmaStart|
	DCD	0x40000e03
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DmaStart| PROC

; 487  : {

  00000		 |$LN5@DmaStart|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M42688|

; 488  :     // enable the dma channel
; 489  :     //
; 490  :     SETREG32(&pDataInfo->pDmaLcReg->CCR , DMA_CCR_ENABLE);

  0000c	e59d3008	 ldr         r3, [sp, #8]
  00010	e2833014	 add         r3, r3, #0x14
  00014	e5933000	 ldr         r3, [r3]
  00018	e5933000	 ldr         r3, [r3]
  0001c	e3832080	 orr         r2, r3, #0x80
  00020	e59d3008	 ldr         r3, [sp, #8]
  00024	e2833014	 add         r3, r3, #0x14
  00028	e5933000	 ldr         r3, [r3]
  0002c	e5832000	 str         r2, [r3]

; 491  : }

  00030	e89d6000	 ldmia       sp, {sp, lr}
  00034	e12fff1e	 bx          lr
  00038		 |$M42689|

			 ENDP  ; |DmaStart|


  00000			 AREA	 |.pdata|, PDATA
|$T42698| DCD	|$LN5@DmaSetColo|
	DCD	0x40001503
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DmaSetColor| PROC

; 665  : {

  00000		 |$LN5@DmaSetColo|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0007	 stmdb       sp!, {r0 - r2}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M42695|

; 666  :     SETREG32(&pDataInfo->pDmaLcReg->CCR, dwFlag);

  0000c	e59d3008	 ldr         r3, [sp, #8]
  00010	e2833014	 add         r3, r3, #0x14
  00014	e5933000	 ldr         r3, [r3]
  00018	e5932000	 ldr         r2, [r3]
  0001c	e59d300c	 ldr         r3, [sp, #0xC]
  00020	e1822003	 orr         r2, r2, r3
  00024	e59d3008	 ldr         r3, [sp, #8]
  00028	e2833014	 add         r3, r3, #0x14
  0002c	e5933000	 ldr         r3, [r3]
  00030	e5832000	 str         r2, [r3]

; 667  :     OUTREG32(&pDataInfo->pDmaLcReg->COLOR, dwColor);

  00034	e59d3008	 ldr         r3, [sp, #8]
  00038	e2833014	 add         r3, r3, #0x14
  0003c	e5933000	 ldr         r3, [r3]
  00040	e2832044	 add         r2, r3, #0x44
  00044	e59d3010	 ldr         r3, [sp, #0x10]
  00048	e5823000	 str         r3, [r2]

; 668  : }

  0004c	e89d6000	 ldmia       sp, {sp, lr}
  00050	e12fff1e	 bx          lr
  00054		 |$M42696|

			 ENDP  ; |DmaSetColor|

	EXPORT	|?DMASrcCopy@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| ; OMAPDDGPE::DMASrcCopy
	IMPORT	|__rt_udiv|

  00018			 AREA	 |.pdata|, PDATA
|$T42711| DCD	|$LN33@DMASrcCopy|
	DCD	0x40024f04
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\ddgpe\omap_dmablt.cpp

  00560			 AREA	 |.text|, CODE, ARM

  00560		 |?DMASrcCopy@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::DMASrcCopy

; 184  : {

  00560		 |$LN33@DMASrcCopy|
  00560	e1a0c00d	 mov         r12, sp
  00564	e92d0003	 stmdb       sp!, {r0, r1}
  00568	e92d5010	 stmdb       sp!, {r4, r12, lr}
  0056c	e24dd0ec	 sub         sp, sp, #0xEC
  00570		 |$M42708|

; 185  :     SCODE   result = S_OK;

  00570	e3a03000	 mov         r3, #0
  00574	e58d3068	 str         r3, [sp, #0x68]

; 186  :     BOOL    bDualDMA = FALSE;

  00578	e3a03000	 mov         r3, #0
  0057c	e58d3048	 str         r3, [sp, #0x48]

; 187  :     RECTL*  prclSrc = pParms->prclSrc;

  00580	e59d30fc	 ldr         r3, [sp, #0xFC]
  00584	e2833018	 add         r3, r3, #0x18
  00588	e5933000	 ldr         r3, [r3]
  0058c	e58d3074	 str         r3, [sp, #0x74]

; 188  :     RECTL*  prclDst = pParms->prclDst;

  00590	e59d30fc	 ldr         r3, [sp, #0xFC]
  00594	e2833014	 add         r3, r3, #0x14
  00598	e5933000	 ldr         r3, [r3]
  0059c	e58d3070	 str         r3, [sp, #0x70]

; 189  :     DWORD   dwPixelSize = pParms->pDst->BytesPerPixel();

  005a0	e59d30fc	 ldr         r3, [sp, #0xFC]
  005a4	e2833004	 add         r3, r3, #4
  005a8	e5930000	 ldr         r0, [r3]
  005ac	eb000000	 bl          |?BytesPerPixel@GPESurf@@QAAHXZ|
  005b0	e58d0080	 str         r0, [sp, #0x80]
  005b4	e59d3080	 ldr         r3, [sp, #0x80]
  005b8	e58d305c	 str         r3, [sp, #0x5C]

; 190  :     DWORD   dwWidth  = prclDst->right - prclDst->left;

  005bc	e59d3070	 ldr         r3, [sp, #0x70]
  005c0	e2833008	 add         r3, r3, #8
  005c4	e5932000	 ldr         r2, [r3]
  005c8	e59d3070	 ldr         r3, [sp, #0x70]
  005cc	e5933000	 ldr         r3, [r3]
  005d0	e0423003	 sub         r3, r2, r3
  005d4	e58d3044	 str         r3, [sp, #0x44]

; 191  :     DWORD   dwHeight = prclDst->bottom - prclDst->top;

  005d8	e59d3070	 ldr         r3, [sp, #0x70]
  005dc	e283200c	 add         r2, r3, #0xC
  005e0	e59d3070	 ldr         r3, [sp, #0x70]
  005e4	e2833004	 add         r3, r3, #4
  005e8	e5922000	 ldr         r2, [r2]
  005ec	e5933000	 ldr         r3, [r3]
  005f0	e0423003	 sub         r3, r2, r3
  005f4	e58d3040	 str         r3, [sp, #0x40]

; 192  :     DWORD   dwSrcStride = pParms->pSrc->Stride();

  005f8	e59d30fc	 ldr         r3, [sp, #0xFC]
  005fc	e2833008	 add         r3, r3, #8
  00600	e5930000	 ldr         r0, [r3]
  00604	eb000000	 bl          |?Stride@GPESurf@@QAAHXZ|
  00608	e58d0084	 str         r0, [sp, #0x84]
  0060c	e59d3084	 ldr         r3, [sp, #0x84]
  00610	e58d3000	 str         r3, [sp]

; 193  :     DWORD   dwDstStride = pParms->pDst->Stride();

  00614	e59d30fc	 ldr         r3, [sp, #0xFC]
  00618	e2833004	 add         r3, r3, #4
  0061c	e5930000	 ldr         r0, [r3]
  00620	eb000000	 bl          |?Stride@GPESurf@@QAAHXZ|
  00624	e58d0088	 str         r0, [sp, #0x88]
  00628	e59d3088	 ldr         r3, [sp, #0x88]
  0062c	e58d3058	 str         r3, [sp, #0x58]

; 194  :     DWORD   dwSrcOffset = 0;

  00630	e3a03000	 mov         r3, #0
  00634	e58d3008	 str         r3, [sp, #8]

; 195  :     DWORD   dwDstOffset = 0;

  00638	e3a03000	 mov         r3, #0
  0063c	e58d3050	 str         r3, [sp, #0x50]

; 196  :     DWORD   dwSrcMidpoint = 0;

  00640	e3a03000	 mov         r3, #0
  00644	e58d3060	 str         r3, [sp, #0x60]

; 197  :     DWORD   dwDstMidpoint = 0;

  00648	e3a03000	 mov         r3, #0
  0064c	e58d3078	 str         r3, [sp, #0x78]

; 198  :     DWORD   dwWidth1 = dwWidth, 

  00650	e59d3044	 ldr         r3, [sp, #0x44]
  00654	e58d306c	 str         r3, [sp, #0x6C]

; 199  :             dwWidth2 = dwWidth;

  00658	e59d3044	 ldr         r3, [sp, #0x44]
  0065c	e58d3054	 str         r3, [sp, #0x54]

; 200  :     DWORD   dwHeight1 = dwHeight, 

  00660	e59d3040	 ldr         r3, [sp, #0x40]
  00664	e58d300c	 str         r3, [sp, #0xC]

; 201  :             dwHeight2 = dwHeight;

  00668	e59d3040	 ldr         r3, [sp, #0x40]
  0066c	e58d304c	 str         r3, [sp, #0x4C]

; 202  :     
; 203  :     OMAPDDGPESurface*   pOmapSrcSurf = (OMAPDDGPESurface*) pParms->pSrc;

  00670	e59d30fc	 ldr         r3, [sp, #0xFC]
  00674	e2833008	 add         r3, r3, #8
  00678	e5933000	 ldr         r3, [r3]
  0067c	e58d3064	 str         r3, [sp, #0x64]

; 204  :     OMAPDDGPESurface*   pOmapDstSurf = (OMAPDDGPESurface*) pParms->pDst;

  00680	e59d30fc	 ldr         r3, [sp, #0xFC]
  00684	e2833004	 add         r3, r3, #4
  00688	e5933000	 ldr         r3, [r3]
  0068c	e58d3004	 str         r3, [sp, #4]

; 205  :      
; 206  :     DmaConfigInfo_t DmaSettings = {
; 207  :         0,                          // elemSize

  00690	e3a03000	 mov         r3, #0
  00694	e58d3010	 str         r3, [sp, #0x10]

; 208  :         1,                          // srcElemIndex

  00698	e3a03001	 mov         r3, #1
  0069c	e58d3014	 str         r3, [sp, #0x14]

; 209  :         1,                          // srcFrameIndex

  006a0	e3a03001	 mov         r3, #1
  006a4	e58d3018	 str         r3, [sp, #0x18]

; 210  :         DMA_CCR_SRC_AMODE_DOUBLE,   // srcAddrMode

  006a8	e3a03a03	 mov         r3, #3, 20
  006ac	e58d301c	 str         r3, [sp, #0x1C]

; 211  :         1,                          // dstElemIndex

  006b0	e3a03001	 mov         r3, #1
  006b4	e58d3020	 str         r3, [sp, #0x20]

; 212  :         1,                          // dstFrameIndex

  006b8	e3a03001	 mov         r3, #1
  006bc	e58d3024	 str         r3, [sp, #0x24]

; 213  :         DMA_CCR_DST_AMODE_DOUBLE,   // dstAddrMode

  006c0	e3a03903	 mov         r3, #3, 18
  006c4	e58d3028	 str         r3, [sp, #0x28]

; 214  :         FALSE,                      // dmaPrio

  006c8	e3a03000	 mov         r3, #0
  006cc	e58d302c	 str         r3, [sp, #0x2C]

; 215  :         DMA_SYNCH_TRIGGER_NONE,     // synchTrigger

  006d0	e3a03000	 mov         r3, #0
  006d4	e58d3030	 str         r3, [sp, #0x30]

; 216  :         DMA_SYNCH_NONE,             // synchMode

  006d8	e3a03000	 mov         r3, #0
  006dc	e58d3034	 str         r3, [sp, #0x34]

; 217  :         0,                          // interrupts

  006e0	e3a03000	 mov         r3, #0
  006e4	e58d3038	 str         r3, [sp, #0x38]

; 218  :         0                           // syncMap
; 219  :     };

  006e8	e3a03000	 mov         r3, #0
  006ec	e58d303c	 str         r3, [sp, #0x3C]

; 220  : 
; 221  : 
; 222  :     //  Check that a DMA Blt is worth doing
; 223  :     if( dwWidth < MIN_DMA_WIDTH || dwHeight < MIN_DMA_HEIGHT )

  006f0	e59d3044	 ldr         r3, [sp, #0x44]
  006f4	e3530020	 cmp         r3, #0x20
  006f8	3a000002	 bcc         |$LN23@DMASrcCopy|
  006fc	e59d3040	 ldr         r3, [sp, #0x40]
  00700	e3530020	 cmp         r3, #0x20
  00704	2a000018	 bcs         |$LN24@DMASrcCopy|
  00708		 |$LN23@DMASrcCopy|

; 224  :     {
; 225  :         if (g_Globals.m_dwEnableNeonBlts)

  00708	e59f3788	 ldr         r3, [pc, #0x788]
  0070c	e5933248	 ldr         r3, [r3, #0x248]
  00710	e3530000	 cmp         r3, #0
  00714	0a00000a	 beq         |$LN22@DMASrcCopy|

; 226  :         {
; 227  :         pParms->pBlt = (SCODE (GPE::*)(struct GPEBltParms *)) &OMAPDDGPE::DesignateBlt;

  00718	e59f2774	 ldr         r2, [pc, #0x774]
  0071c	e59d30fc	 ldr         r3, [sp, #0xFC]
  00720	e5832000	 str         r2, [r3]

; 228  :         return OMAPDDGPE::DesignateBlt(pParms);

  00724	e59d10fc	 ldr         r1, [sp, #0xFC]
  00728	e59d00f8	 ldr         r0, [sp, #0xF8]
  0072c	eb000000	 bl          |?DesignateBlt@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|
  00730	e58d008c	 str         r0, [sp, #0x8C]
  00734	e59d308c	 ldr         r3, [sp, #0x8C]
  00738	e58d307c	 str         r3, [sp, #0x7C]
  0073c	ea0001ca	 b           |$LN25@DMASrcCopy|

; 229  : 		}
; 230  : 		else

  00740	ea000009	 b           |$LN21@DMASrcCopy|
  00744		 |$LN22@DMASrcCopy|

; 231  : 		{
; 232  :             pParms->pBlt = &GPE::EmulatedBlt;

  00744	e59f2744	 ldr         r2, [pc, #0x744]
  00748	e59d30fc	 ldr         r3, [sp, #0xFC]
  0074c	e5832000	 str         r2, [r3]

; 233  :             return GPE::EmulatedBlt(pParms);

  00750	e59d10fc	 ldr         r1, [sp, #0xFC]
  00754	e59d00f8	 ldr         r0, [sp, #0xF8]
  00758	eb000000	 bl          |?EmulatedBlt@GPE@@QAAJPAUGPEBltParms@@@Z|
  0075c	e58d0090	 str         r0, [sp, #0x90]
  00760	e59d3090	 ldr         r3, [sp, #0x90]
  00764	e58d307c	 str         r3, [sp, #0x7C]
  00768	ea0001bf	 b           |$LN25@DMASrcCopy|
  0076c		 |$LN21@DMASrcCopy|
  0076c		 |$LN24@DMASrcCopy|

; 234  : 		}
; 235  :     }
; 236  : 
; 237  :     //  Allocate DMA channels
; 238  :     if( g_hDmaChannel1 == NULL )

  0076c	e59f3718	 ldr         r3, [pc, #0x718]
  00770	e5933000	 ldr         r3, [r3]
  00774	e3530000	 cmp         r3, #0
  00778	1a000007	 bne         |$LN20@DMASrcCopy|

; 239  :     {
; 240  :         g_hDmaChannel1 = DmaAllocateChannel(DMA_TYPE_SYSTEM);

  0077c	e3a00000	 mov         r0, #0
  00780	eb000000	 bl          DmaAllocateChannel
  00784	e58d0094	 str         r0, [sp, #0x94]
  00788	e59d2094	 ldr         r2, [sp, #0x94]
  0078c	e59f36f8	 ldr         r3, [pc, #0x6F8]
  00790	e5832000	 str         r2, [r3]

; 241  :         InitializeCriticalSection( &g_csDmaLock );

  00794	e59f06e0	 ldr         r0, [pc, #0x6E0]
  00798	eb000000	 bl          InitializeCriticalSection
  0079c		 |$LN20@DMASrcCopy|

; 242  :     }
; 243  : 
; 244  :     if( g_hDmaChannel2 == NULL )

  0079c	e59f36e4	 ldr         r3, [pc, #0x6E4]
  007a0	e5933000	 ldr         r3, [r3]
  007a4	e3530000	 cmp         r3, #0
  007a8	1a000005	 bne         |$LN19@DMASrcCopy|

; 245  :     {
; 246  :         g_hDmaChannel2 = DmaAllocateChannel(DMA_TYPE_SYSTEM);

  007ac	e3a00000	 mov         r0, #0
  007b0	eb000000	 bl          DmaAllocateChannel
  007b4	e58d0098	 str         r0, [sp, #0x98]
  007b8	e59d2098	 ldr         r2, [sp, #0x98]
  007bc	e59f36c4	 ldr         r3, [pc, #0x6C4]
  007c0	e5832000	 str         r2, [r3]
  007c4		 |$LN19@DMASrcCopy|

; 247  :     }
; 248  : 
; 249  : 
; 250  :     //  Lock access to DMA registers
; 251  :     EnterCriticalSection( &g_csDmaLock );

  007c4	e59f06b0	 ldr         r0, [pc, #0x6B0]
  007c8	eb000000	 bl          EnterCriticalSection

; 252  : 
; 253  :     //  Wait for any pending operations to complete
; 254  :     WaitForNotBusy();

  007cc	e59d30f8	 ldr         r3, [sp, #0xF8]
  007d0	e5933000	 ldr         r3, [r3]
  007d4	e2833060	 add         r3, r3, #0x60
  007d8	e59d00f8	 ldr         r0, [sp, #0xF8]
  007dc	e5933000	 ldr         r3, [r3]
  007e0	e1a0e00f	 mov         lr, pc
  007e4	e12fff13	 bx          r3

; 255  :         
; 256  :     //  Configure DMA channel for SRCCPY operation
; 257  :     switch( pParms->pDst->BytesPerPixel() )

  007e8	e59d30fc	 ldr         r3, [sp, #0xFC]
  007ec	e2833004	 add         r3, r3, #4
  007f0	e5930000	 ldr         r0, [r3]
  007f4	eb000000	 bl          |?BytesPerPixel@GPESurf@@QAAHXZ|
  007f8	e58d009c	 str         r0, [sp, #0x9C]
  007fc	e59d309c	 ldr         r3, [sp, #0x9C]
  00800	e58d30a0	 str         r3, [sp, #0xA0]
  00804	e59d30a0	 ldr         r3, [sp, #0xA0]
  00808	e3530001	 cmp         r3, #1
  0080c	0a000006	 beq         |$LN16@DMASrcCopy|
  00810	e59d30a0	 ldr         r3, [sp, #0xA0]
  00814	e3530002	 cmp         r3, #2
  00818	0a000006	 beq         |$LN15@DMASrcCopy|
  0081c	e59d30a0	 ldr         r3, [sp, #0xA0]
  00820	e3530004	 cmp         r3, #4
  00824	0a000006	 beq         |$LN14@DMASrcCopy|
  00828	ea000007	 b           |$LN17@DMASrcCopy|
  0082c		 |$LN16@DMASrcCopy|

; 258  :     {
; 259  :         case 1:
; 260  :             DmaSettings.elemSize = DMA_CSDP_DATATYPE_S8;

  0082c	e3a03000	 mov         r3, #0
  00830	e58d3010	 str         r3, [sp, #0x10]

; 261  :             break;

  00834	ea000004	 b           |$LN17@DMASrcCopy|
  00838		 |$LN15@DMASrcCopy|

; 262  : 
; 263  :         case 2:
; 264  :             DmaSettings.elemSize = DMA_CSDP_DATATYPE_S16;

  00838	e3a03001	 mov         r3, #1
  0083c	e58d3010	 str         r3, [sp, #0x10]

; 265  :             break;

  00840	ea000001	 b           |$LN17@DMASrcCopy|
  00844		 |$LN14@DMASrcCopy|

; 266  : 
; 267  :         case 4:
; 268  :             DmaSettings.elemSize = DMA_CSDP_DATATYPE_S32;

  00844	e3a03002	 mov         r3, #2
  00848	e58d3010	 str         r3, [sp, #0x10]
  0084c		 |$LN17@DMASrcCopy|

; 269  :             break;
; 270  :     }
; 271  : 
; 272  : 
; 273  :     //  Compute element indexing, frame indexing and starting offset for both surfaces
; 274  :     //  Note that both xPos and yPos will never be both < 0
; 275  :     //  Also note that xPos !=1 prevents bursting and actually slows DMA down below memcpy speeds
; 276  :     if( pParms->xPositive )

  0084c	e59d30fc	 ldr         r3, [sp, #0xFC]
  00850	e2833034	 add         r3, r3, #0x34
  00854	e5933000	 ldr         r3, [r3]
  00858	e3530000	 cmp         r3, #0
  0085c	0a00000e	 beq         |$LN13@DMASrcCopy|

; 277  :     {
; 278  :         //  Index x axis in positive direction (left to right)
; 279  :         DmaSettings.srcElemIndex = 1;

  00860	e3a03001	 mov         r3, #1
  00864	e58d3014	 str         r3, [sp, #0x14]

; 280  :         DmaSettings.dstElemIndex = 1;

  00868	e3a03001	 mov         r3, #1
  0086c	e58d3020	 str         r3, [sp, #0x20]

; 281  :         
; 282  :         //  Offset from left side of surface
; 283  :         dwSrcOffset = dwPixelSize * prclSrc->left;

  00870	e59d205c	 ldr         r2, [sp, #0x5C]
  00874	e59d3074	 ldr         r3, [sp, #0x74]
  00878	e5933000	 ldr         r3, [r3]
  0087c	e0030392	 mul         r3, r2, r3
  00880	e58d3008	 str         r3, [sp, #8]

; 284  :         dwDstOffset = dwPixelSize * prclDst->left;

  00884	e59d205c	 ldr         r2, [sp, #0x5C]
  00888	e59d3070	 ldr         r3, [sp, #0x70]
  0088c	e5933000	 ldr         r3, [r3]
  00890	e0030392	 mul         r3, r2, r3
  00894	e58d3050	 str         r3, [sp, #0x50]

; 285  :     }
; 286  :     else

  00898	ea000017	 b           |$LN12@DMASrcCopy|
  0089c		 |$LN13@DMASrcCopy|

; 287  :     {
; 288  :         //  Index x axis in negative direction (right to left)
; 289  :         DmaSettings.srcElemIndex = 1 - 2*dwPixelSize;

  0089c	e59d205c	 ldr         r2, [sp, #0x5C]
  008a0	e3a03002	 mov         r3, #2
  008a4	e0030392	 mul         r3, r2, r3
  008a8	e2633001	 rsb         r3, r3, #1
  008ac	e58d3014	 str         r3, [sp, #0x14]

; 290  :         DmaSettings.dstElemIndex = 1 - 2*dwPixelSize;

  008b0	e59d205c	 ldr         r2, [sp, #0x5C]
  008b4	e3a03002	 mov         r3, #2
  008b8	e0030392	 mul         r3, r2, r3
  008bc	e2633001	 rsb         r3, r3, #1
  008c0	e58d3020	 str         r3, [sp, #0x20]

; 291  : 
; 292  :         //  Offset from right side of surface
; 293  :         dwSrcOffset = dwPixelSize * (prclSrc->right - 1);

  008c4	e59d3074	 ldr         r3, [sp, #0x74]
  008c8	e2833008	 add         r3, r3, #8
  008cc	e5933000	 ldr         r3, [r3]
  008d0	e2433001	 sub         r3, r3, #1
  008d4	e59d205c	 ldr         r2, [sp, #0x5C]
  008d8	e0030392	 mul         r3, r2, r3
  008dc	e58d3008	 str         r3, [sp, #8]

; 294  :         dwDstOffset = dwPixelSize * (prclDst->right - 1);

  008e0	e59d3070	 ldr         r3, [sp, #0x70]
  008e4	e2833008	 add         r3, r3, #8
  008e8	e5933000	 ldr         r3, [r3]
  008ec	e2433001	 sub         r3, r3, #1
  008f0	e59d205c	 ldr         r2, [sp, #0x5C]
  008f4	e0030392	 mul         r3, r2, r3
  008f8	e58d3050	 str         r3, [sp, #0x50]
  008fc		 |$LN12@DMASrcCopy|

; 295  :     }
; 296  : 
; 297  :     if( pParms->yPositive )

  008fc	e59d30fc	 ldr         r3, [sp, #0xFC]
  00900	e2833038	 add         r3, r3, #0x38
  00904	e5933000	 ldr         r3, [r3]
  00908	e3530000	 cmp         r3, #0
  0090c	0a000036	 beq         |$LN11@DMASrcCopy|

; 298  :     {
; 299  :         //  Index y axis in positive direction (top to bottom)
; 300  :         DmaSettings.srcFrameIndex = DmaSettings.srcElemIndex + dwSrcStride;

  00910	e59d2014	 ldr         r2, [sp, #0x14]
  00914	e59d3000	 ldr         r3, [sp]
  00918	e0823003	 add         r3, r2, r3
  0091c	e58d3018	 str         r3, [sp, #0x18]

; 301  :         DmaSettings.dstFrameIndex = DmaSettings.dstElemIndex + dwDstStride;

  00920	e59d2020	 ldr         r2, [sp, #0x20]
  00924	e59d3058	 ldr         r3, [sp, #0x58]
  00928	e0823003	 add         r3, r2, r3
  0092c	e58d3024	 str         r3, [sp, #0x24]

; 302  :         
; 303  :         if( pParms->xPositive )

  00930	e59d30fc	 ldr         r3, [sp, #0xFC]
  00934	e2833034	 add         r3, r3, #0x34
  00938	e5933000	 ldr         r3, [r3]
  0093c	e3530000	 cmp         r3, #0
  00940	0a00000c	 beq         |$LN10@DMASrcCopy|

; 304  :         {
; 305  :             DmaSettings.srcFrameIndex -= dwWidth*dwPixelSize;

  00944	e59d1044	 ldr         r1, [sp, #0x44]
  00948	e59d305c	 ldr         r3, [sp, #0x5C]
  0094c	e0020391	 mul         r2, r1, r3
  00950	e59d3018	 ldr         r3, [sp, #0x18]
  00954	e0433002	 sub         r3, r3, r2
  00958	e58d3018	 str         r3, [sp, #0x18]

; 306  :             DmaSettings.dstFrameIndex -= dwWidth*dwPixelSize;

  0095c	e59d1044	 ldr         r1, [sp, #0x44]
  00960	e59d305c	 ldr         r3, [sp, #0x5C]
  00964	e0020391	 mul         r2, r1, r3
  00968	e59d3024	 ldr         r3, [sp, #0x24]
  0096c	e0433002	 sub         r3, r3, r2
  00970	e58d3024	 str         r3, [sp, #0x24]

; 307  :         }
; 308  :         else

  00974	ea00000b	 b           |$LN9@DMASrcCopy|
  00978		 |$LN10@DMASrcCopy|

; 309  :         {
; 310  :             DmaSettings.srcFrameIndex += dwWidth*dwPixelSize;

  00978	e59d1044	 ldr         r1, [sp, #0x44]
  0097c	e59d305c	 ldr         r3, [sp, #0x5C]
  00980	e0020391	 mul         r2, r1, r3
  00984	e59d3018	 ldr         r3, [sp, #0x18]
  00988	e0833002	 add         r3, r3, r2
  0098c	e58d3018	 str         r3, [sp, #0x18]

; 311  :             DmaSettings.dstFrameIndex += dwWidth*dwPixelSize;

  00990	e59d1044	 ldr         r1, [sp, #0x44]
  00994	e59d305c	 ldr         r3, [sp, #0x5C]
  00998	e0020391	 mul         r2, r1, r3
  0099c	e59d3024	 ldr         r3, [sp, #0x24]
  009a0	e0833002	 add         r3, r3, r2
  009a4	e58d3024	 str         r3, [sp, #0x24]
  009a8		 |$LN9@DMASrcCopy|

; 312  :         }
; 313  : 
; 314  :         //  Offset from top side of surface
; 315  :         dwSrcOffset = dwSrcOffset + prclSrc->top * dwSrcStride;

  009a8	e59d3074	 ldr         r3, [sp, #0x74]
  009ac	e2833004	 add         r3, r3, #4
  009b0	e5931000	 ldr         r1, [r3]
  009b4	e59d3000	 ldr         r3, [sp]
  009b8	e0020391	 mul         r2, r1, r3
  009bc	e59d3008	 ldr         r3, [sp, #8]
  009c0	e0833002	 add         r3, r3, r2
  009c4	e58d3008	 str         r3, [sp, #8]

; 316  :         dwDstOffset = dwDstOffset + prclDst->top * dwDstStride;

  009c8	e59d3070	 ldr         r3, [sp, #0x70]
  009cc	e2833004	 add         r3, r3, #4
  009d0	e5931000	 ldr         r1, [r3]
  009d4	e59d3058	 ldr         r3, [sp, #0x58]
  009d8	e0020391	 mul         r2, r1, r3
  009dc	e59d3050	 ldr         r3, [sp, #0x50]
  009e0	e0833002	 add         r3, r3, r2
  009e4	e58d3050	 str         r3, [sp, #0x50]

; 317  :     }
; 318  :     else

  009e8	ea000037	 b           |$LN8@DMASrcCopy|
  009ec		 |$LN11@DMASrcCopy|

; 319  :     {
; 320  :         //  Index y axis in negative direction (bottom to top)
; 321  :         DmaSettings.srcFrameIndex = DmaSettings.srcElemIndex - dwSrcStride;

  009ec	e59d2014	 ldr         r2, [sp, #0x14]
  009f0	e59d3000	 ldr         r3, [sp]
  009f4	e0423003	 sub         r3, r2, r3
  009f8	e58d3018	 str         r3, [sp, #0x18]

; 322  :         DmaSettings.dstFrameIndex = DmaSettings.dstElemIndex - dwDstStride;

  009fc	e59d2020	 ldr         r2, [sp, #0x20]
  00a00	e59d3058	 ldr         r3, [sp, #0x58]
  00a04	e0423003	 sub         r3, r2, r3
  00a08	e58d3024	 str         r3, [sp, #0x24]

; 323  : 
; 324  :         if( pParms->xPositive )

  00a0c	e59d30fc	 ldr         r3, [sp, #0xFC]
  00a10	e2833034	 add         r3, r3, #0x34
  00a14	e5933000	 ldr         r3, [r3]
  00a18	e3530000	 cmp         r3, #0
  00a1c	0a00000c	 beq         |$LN7@DMASrcCopy|

; 325  :         {
; 326  :             DmaSettings.srcFrameIndex -= dwWidth*dwPixelSize;

  00a20	e59d1044	 ldr         r1, [sp, #0x44]
  00a24	e59d305c	 ldr         r3, [sp, #0x5C]
  00a28	e0020391	 mul         r2, r1, r3
  00a2c	e59d3018	 ldr         r3, [sp, #0x18]
  00a30	e0433002	 sub         r3, r3, r2
  00a34	e58d3018	 str         r3, [sp, #0x18]

; 327  :             DmaSettings.dstFrameIndex -= dwWidth*dwPixelSize;

  00a38	e59d1044	 ldr         r1, [sp, #0x44]
  00a3c	e59d305c	 ldr         r3, [sp, #0x5C]
  00a40	e0020391	 mul         r2, r1, r3
  00a44	e59d3024	 ldr         r3, [sp, #0x24]
  00a48	e0433002	 sub         r3, r3, r2
  00a4c	e58d3024	 str         r3, [sp, #0x24]

; 328  :         }
; 329  :         else

  00a50	ea00000b	 b           |$LN6@DMASrcCopy|
  00a54		 |$LN7@DMASrcCopy|

; 330  :         {
; 331  :             DmaSettings.srcFrameIndex += dwWidth*dwPixelSize;

  00a54	e59d1044	 ldr         r1, [sp, #0x44]
  00a58	e59d305c	 ldr         r3, [sp, #0x5C]
  00a5c	e0020391	 mul         r2, r1, r3
  00a60	e59d3018	 ldr         r3, [sp, #0x18]
  00a64	e0833002	 add         r3, r3, r2
  00a68	e58d3018	 str         r3, [sp, #0x18]

; 332  :             DmaSettings.dstFrameIndex += dwWidth*dwPixelSize;

  00a6c	e59d1044	 ldr         r1, [sp, #0x44]
  00a70	e59d305c	 ldr         r3, [sp, #0x5C]
  00a74	e0020391	 mul         r2, r1, r3
  00a78	e59d3024	 ldr         r3, [sp, #0x24]
  00a7c	e0833002	 add         r3, r3, r2
  00a80	e58d3024	 str         r3, [sp, #0x24]
  00a84		 |$LN6@DMASrcCopy|

; 333  :         }
; 334  : 
; 335  :         //  Offset from bottom side of surface
; 336  :         dwSrcOffset = dwSrcOffset + (prclSrc->bottom - 1) * dwSrcStride;

  00a84	e59d3074	 ldr         r3, [sp, #0x74]
  00a88	e283300c	 add         r3, r3, #0xC
  00a8c	e5933000	 ldr         r3, [r3]
  00a90	e2431001	 sub         r1, r3, #1
  00a94	e59d3000	 ldr         r3, [sp]
  00a98	e0020391	 mul         r2, r1, r3
  00a9c	e59d3008	 ldr         r3, [sp, #8]
  00aa0	e0833002	 add         r3, r3, r2
  00aa4	e58d3008	 str         r3, [sp, #8]

; 337  :         dwDstOffset = dwDstOffset + (prclDst->bottom - 1) * dwDstStride;

  00aa8	e59d3070	 ldr         r3, [sp, #0x70]
  00aac	e283300c	 add         r3, r3, #0xC
  00ab0	e5933000	 ldr         r3, [r3]
  00ab4	e2431001	 sub         r1, r3, #1
  00ab8	e59d3058	 ldr         r3, [sp, #0x58]
  00abc	e0020391	 mul         r2, r1, r3
  00ac0	e59d3050	 ldr         r3, [sp, #0x50]
  00ac4	e0833002	 add         r3, r3, r2
  00ac8	e58d3050	 str         r3, [sp, #0x50]
  00acc		 |$LN8@DMASrcCopy|

; 338  :     }
; 339  :  
; 340  :     //
; 341  :     //  Check for fast dual DMA cases
; 342  :     //
; 343  :     
; 344  :     //  Different src and dst surfaces can use dual DMA
; 345  :     if( pOmapSrcSurf != pOmapDstSurf )

  00acc	e59d2064	 ldr         r2, [sp, #0x64]
  00ad0	e59d3004	 ldr         r3, [sp, #4]
  00ad4	e1520003	 cmp         r2, r3
  00ad8	0a000031	 beq         |$LN5@DMASrcCopy|

; 346  :     {
; 347  :         //  Split work in half vertically
; 348  :         dwHeight1 = dwHeight/2;  

  00adc	e59d1040	 ldr         r1, [sp, #0x40]
  00ae0	e3a00002	 mov         r0, #2
  00ae4	eb000000	 bl          __rt_udiv
  00ae8	e58d000c	 str         r0, [sp, #0xC]

; 349  :         dwHeight2 = dwHeight - dwHeight1;

  00aec	e59d2040	 ldr         r2, [sp, #0x40]
  00af0	e59d300c	 ldr         r3, [sp, #0xC]
  00af4	e0423003	 sub         r3, r2, r3
  00af8	e58d304c	 str         r3, [sp, #0x4C]

; 350  :         
; 351  :         dwSrcMidpoint = (pParms->yPositive) ? dwSrcOffset + dwHeight1*dwSrcStride : dwSrcOffset - dwHeight1*dwSrcStride;  

  00afc	e59d30fc	 ldr         r3, [sp, #0xFC]
  00b00	e2833038	 add         r3, r3, #0x38
  00b04	e5933000	 ldr         r3, [r3]
  00b08	e3530000	 cmp         r3, #0
  00b0c	0a000006	 beq         |$LN27@DMASrcCopy|
  00b10	e59d100c	 ldr         r1, [sp, #0xC]
  00b14	e59d3000	 ldr         r3, [sp]
  00b18	e0020391	 mul         r2, r1, r3
  00b1c	e59d3008	 ldr         r3, [sp, #8]
  00b20	e0833002	 add         r3, r3, r2
  00b24	e58d30a4	 str         r3, [sp, #0xA4]
  00b28	ea000005	 b           |$LN28@DMASrcCopy|
  00b2c		 |$LN27@DMASrcCopy|
  00b2c	e59d100c	 ldr         r1, [sp, #0xC]
  00b30	e59d3000	 ldr         r3, [sp]
  00b34	e0020391	 mul         r2, r1, r3
  00b38	e59d3008	 ldr         r3, [sp, #8]
  00b3c	e0433002	 sub         r3, r3, r2
  00b40	e58d30a4	 str         r3, [sp, #0xA4]
  00b44		 |$LN28@DMASrcCopy|
  00b44	e59d30a4	 ldr         r3, [sp, #0xA4]
  00b48	e58d3060	 str         r3, [sp, #0x60]

; 352  :         dwDstMidpoint = (pParms->yPositive) ? dwDstOffset + dwHeight1*dwDstStride : dwDstOffset - dwHeight1*dwDstStride;  

  00b4c	e59d30fc	 ldr         r3, [sp, #0xFC]
  00b50	e2833038	 add         r3, r3, #0x38
  00b54	e5933000	 ldr         r3, [r3]
  00b58	e3530000	 cmp         r3, #0
  00b5c	0a000006	 beq         |$LN29@DMASrcCopy|
  00b60	e59d100c	 ldr         r1, [sp, #0xC]
  00b64	e59d3058	 ldr         r3, [sp, #0x58]
  00b68	e0020391	 mul         r2, r1, r3
  00b6c	e59d3050	 ldr         r3, [sp, #0x50]
  00b70	e0833002	 add         r3, r3, r2
  00b74	e58d30a8	 str         r3, [sp, #0xA8]
  00b78	ea000005	 b           |$LN30@DMASrcCopy|
  00b7c		 |$LN29@DMASrcCopy|
  00b7c	e59d100c	 ldr         r1, [sp, #0xC]
  00b80	e59d3058	 ldr         r3, [sp, #0x58]
  00b84	e0020391	 mul         r2, r1, r3
  00b88	e59d3050	 ldr         r3, [sp, #0x50]
  00b8c	e0433002	 sub         r3, r3, r2
  00b90	e58d30a8	 str         r3, [sp, #0xA8]
  00b94		 |$LN30@DMASrcCopy|
  00b94	e59d30a8	 ldr         r3, [sp, #0xA8]
  00b98	e58d3078	 str         r3, [sp, #0x78]

; 353  : 
; 354  :         bDualDMA = TRUE;     

  00b9c	e3a03001	 mov         r3, #1
  00ba0	e58d3048	 str         r3, [sp, #0x48]
  00ba4		 |$LN5@DMASrcCopy|

; 355  :     }
; 356  :  
; 357  :     
; 358  :     //  Clear any clipping rect for the operation
; 359  :     pOmapSrcSurf->OmapSurface()->SetClipping( NULL );

  00ba4	e59d0064	 ldr         r0, [sp, #0x64]
  00ba8	eb000000	 bl          |?OmapSurface@OMAPDDGPESurface@@QAAPAVOMAPSurface@@XZ|
  00bac	e58d00ac	 str         r0, [sp, #0xAC]
  00bb0	e59d30ac	 ldr         r3, [sp, #0xAC]
  00bb4	e58d30b0	 str         r3, [sp, #0xB0]
  00bb8	e3a01000	 mov         r1, #0
  00bbc	e59d00b0	 ldr         r0, [sp, #0xB0]
  00bc0	e59d30b0	 ldr         r3, [sp, #0xB0]
  00bc4	e5933000	 ldr         r3, [r3]
  00bc8	e2833020	 add         r3, r3, #0x20
  00bcc	e5933000	 ldr         r3, [r3]
  00bd0	e1a0e00f	 mov         lr, pc
  00bd4	e12fff13	 bx          r3

; 360  :     pOmapDstSurf->OmapSurface()->SetClipping( NULL );

  00bd8	e59d0004	 ldr         r0, [sp, #4]
  00bdc	eb000000	 bl          |?OmapSurface@OMAPDDGPESurface@@QAAPAVOMAPSurface@@XZ|
  00be0	e58d00b4	 str         r0, [sp, #0xB4]
  00be4	e59d30b4	 ldr         r3, [sp, #0xB4]
  00be8	e58d30b8	 str         r3, [sp, #0xB8]
  00bec	e3a01000	 mov         r1, #0
  00bf0	e59d00b8	 ldr         r0, [sp, #0xB8]
  00bf4	e59d30b8	 ldr         r3, [sp, #0xB8]
  00bf8	e5933000	 ldr         r3, [r3]
  00bfc	e2833020	 add         r3, r3, #0x20
  00c00	e5933000	 ldr         r3, [r3]
  00c04	e1a0e00f	 mov         lr, pc
  00c08	e12fff13	 bx          r3

; 361  : 
; 362  : 
; 363  :     //  Enable bursting for improved memory performance
; 364  :     DmaSettings.elemSize |= DMA_CSDP_SRC_BURST_64BYTES_16x32_8x64 | DMA_CSDP_SRC_PACKED;

  00c0c	e59d3010	 ldr         r3, [sp, #0x10]
  00c10	e3833d07	 orr         r3, r3, #7, 26
  00c14	e58d3010	 str         r3, [sp, #0x10]

; 365  :     DmaSettings.elemSize |= DMA_CSDP_DST_BURST_64BYTES_16x32_8x64 | DMA_CSDP_DST_PACKED;

  00c18	e59d3010	 ldr         r3, [sp, #0x10]
  00c1c	e3833a0e	 orr         r3, r3, #0xE, 20
  00c20	e58d3010	 str         r3, [sp, #0x10]

; 366  :     
; 367  :     
; 368  :     //  Configure the DMA channel
; 369  :     DmaConfigure( g_hDmaChannel1, &DmaSettings, 0, &g_tDmaDataInfo1 );

  00c24	e59f3258	 ldr         r3, [pc, #0x258]
  00c28	e3a02000	 mov         r2, #0
  00c2c	e28d1010	 add         r1, sp, #0x10
  00c30	e59f0254	 ldr         r0, [pc, #0x254]
  00c34	e5900000	 ldr         r0, [r0]
  00c38	eb000000	 bl          DmaConfigure

; 370  : 
; 371  :     DmaSetSrcBuffer( &g_tDmaDataInfo1, NULL, pOmapSrcSurf->OmapSurface()->PhysicalAddr() + dwSrcOffset );

  00c3c	e59d0064	 ldr         r0, [sp, #0x64]
  00c40	eb000000	 bl          |?OmapSurface@OMAPDDGPESurface@@QAAPAVOMAPSurface@@XZ|
  00c44	e58d00bc	 str         r0, [sp, #0xBC]
  00c48	e59d30bc	 ldr         r3, [sp, #0xBC]
  00c4c	e58d30c0	 str         r3, [sp, #0xC0]
  00c50	e3a03000	 mov         r3, #0
  00c54	e3a02000	 mov         r2, #0
  00c58	e3a01000	 mov         r1, #0
  00c5c	e59d00c0	 ldr         r0, [sp, #0xC0]
  00c60	e59de0c0	 ldr         lr, [sp, #0xC0]
  00c64	e59ee000	 ldr         lr, [lr]
  00c68	e28ee014	 add         lr, lr, #0x14
  00c6c	e59e4000	 ldr         r4, [lr]
  00c70	e1a0e00f	 mov         lr, pc
  00c74	e12fff14	 bx          r4
  00c78	e58d00c4	 str         r0, [sp, #0xC4]
  00c7c	e59d20c4	 ldr         r2, [sp, #0xC4]
  00c80	e59d3008	 ldr         r3, [sp, #8]
  00c84	e0822003	 add         r2, r2, r3
  00c88	e3a01000	 mov         r1, #0
  00c8c	e59f01f0	 ldr         r0, [pc, #0x1F0]
  00c90	eb000000	 bl          DmaSetSrcBuffer

; 372  :     DmaSetDstBuffer( &g_tDmaDataInfo1, NULL, pOmapDstSurf->OmapSurface()->PhysicalAddr() + dwDstOffset );

  00c94	e59d0004	 ldr         r0, [sp, #4]
  00c98	eb000000	 bl          |?OmapSurface@OMAPDDGPESurface@@QAAPAVOMAPSurface@@XZ|
  00c9c	e58d00c8	 str         r0, [sp, #0xC8]
  00ca0	e59d30c8	 ldr         r3, [sp, #0xC8]
  00ca4	e58d30cc	 str         r3, [sp, #0xCC]
  00ca8	e3a03000	 mov         r3, #0
  00cac	e3a02000	 mov         r2, #0
  00cb0	e3a01000	 mov         r1, #0
  00cb4	e59d00cc	 ldr         r0, [sp, #0xCC]
  00cb8	e59de0cc	 ldr         lr, [sp, #0xCC]
  00cbc	e59ee000	 ldr         lr, [lr]
  00cc0	e28ee014	 add         lr, lr, #0x14
  00cc4	e59e4000	 ldr         r4, [lr]
  00cc8	e1a0e00f	 mov         lr, pc
  00ccc	e12fff14	 bx          r4
  00cd0	e58d00d0	 str         r0, [sp, #0xD0]
  00cd4	e59d20d0	 ldr         r2, [sp, #0xD0]
  00cd8	e59d3050	 ldr         r3, [sp, #0x50]
  00cdc	e0822003	 add         r2, r2, r3
  00ce0	e3a01000	 mov         r1, #0
  00ce4	e59f0198	 ldr         r0, [pc, #0x198]
  00ce8	eb000000	 bl          DmaSetDstBuffer

; 373  :     DmaSetElementAndFrameCount( &g_tDmaDataInfo1, dwWidth1, (UINT16) dwHeight1);

  00cec	e59d300c	 ldr         r3, [sp, #0xC]
  00cf0	e1a02803	 mov         r2, r3, lsl #16
  00cf4	e1a02822	 mov         r2, r2, lsr #16
  00cf8	e59d106c	 ldr         r1, [sp, #0x6C]
  00cfc	e59f0180	 ldr         r0, [pc, #0x180]
  00d00	eb000000	 bl          DmaSetElementAndFrameCount

; 374  : 
; 375  :     if( bDualDMA )

  00d04	e59d3048	 ldr         r3, [sp, #0x48]
  00d08	e3530000	 cmp         r3, #0
  00d0c	0a000037	 beq         |$LN4@DMASrcCopy|

; 376  : 	{
; 377  :         DmaConfigure( g_hDmaChannel2, &DmaSettings, 0, &g_tDmaDataInfo2 );

  00d10	e59f3168	 ldr         r3, [pc, #0x168]
  00d14	e3a02000	 mov         r2, #0
  00d18	e28d1010	 add         r1, sp, #0x10
  00d1c	e59f0164	 ldr         r0, [pc, #0x164]
  00d20	e5900000	 ldr         r0, [r0]
  00d24	eb000000	 bl          DmaConfigure

; 378  : 
; 379  :         DmaSetSrcBuffer( &g_tDmaDataInfo2, NULL, pOmapSrcSurf->OmapSurface()->PhysicalAddr() + dwSrcMidpoint );

  00d28	e59d0064	 ldr         r0, [sp, #0x64]
  00d2c	eb000000	 bl          |?OmapSurface@OMAPDDGPESurface@@QAAPAVOMAPSurface@@XZ|
  00d30	e58d00d4	 str         r0, [sp, #0xD4]
  00d34	e59d30d4	 ldr         r3, [sp, #0xD4]
  00d38	e58d30d8	 str         r3, [sp, #0xD8]
  00d3c	e3a03000	 mov         r3, #0
  00d40	e3a02000	 mov         r2, #0
  00d44	e3a01000	 mov         r1, #0
  00d48	e59d00d8	 ldr         r0, [sp, #0xD8]
  00d4c	e59de0d8	 ldr         lr, [sp, #0xD8]
  00d50	e59ee000	 ldr         lr, [lr]
  00d54	e28ee014	 add         lr, lr, #0x14
  00d58	e59e4000	 ldr         r4, [lr]
  00d5c	e1a0e00f	 mov         lr, pc
  00d60	e12fff14	 bx          r4
  00d64	e58d00dc	 str         r0, [sp, #0xDC]
  00d68	e59d20dc	 ldr         r2, [sp, #0xDC]
  00d6c	e59d3060	 ldr         r3, [sp, #0x60]
  00d70	e0822003	 add         r2, r2, r3
  00d74	e3a01000	 mov         r1, #0
  00d78	e59f0100	 ldr         r0, [pc, #0x100]
  00d7c	eb000000	 bl          DmaSetSrcBuffer

; 380  :         DmaSetDstBuffer( &g_tDmaDataInfo2, NULL, pOmapDstSurf->OmapSurface()->PhysicalAddr() + dwDstMidpoint );

  00d80	e59d0004	 ldr         r0, [sp, #4]
  00d84	eb000000	 bl          |?OmapSurface@OMAPDDGPESurface@@QAAPAVOMAPSurface@@XZ|
  00d88	e58d00e0	 str         r0, [sp, #0xE0]
  00d8c	e59d30e0	 ldr         r3, [sp, #0xE0]
  00d90	e58d30e4	 str         r3, [sp, #0xE4]
  00d94	e3a03000	 mov         r3, #0
  00d98	e3a02000	 mov         r2, #0
  00d9c	e3a01000	 mov         r1, #0
  00da0	e59d00e4	 ldr         r0, [sp, #0xE4]
  00da4	e59de0e4	 ldr         lr, [sp, #0xE4]
  00da8	e59ee000	 ldr         lr, [lr]
  00dac	e28ee014	 add         lr, lr, #0x14
  00db0	e59e4000	 ldr         r4, [lr]
  00db4	e1a0e00f	 mov         lr, pc
  00db8	e12fff14	 bx          r4
  00dbc	e58d00e8	 str         r0, [sp, #0xE8]
  00dc0	e59d20e8	 ldr         r2, [sp, #0xE8]
  00dc4	e59d3078	 ldr         r3, [sp, #0x78]
  00dc8	e0822003	 add         r2, r2, r3
  00dcc	e3a01000	 mov         r1, #0
  00dd0	e59f00a8	 ldr         r0, [pc, #0xA8]
  00dd4	eb000000	 bl          DmaSetDstBuffer

; 381  :         DmaSetElementAndFrameCount( &g_tDmaDataInfo2, dwWidth2, (UINT16) dwHeight2 );

  00dd8	e59d304c	 ldr         r3, [sp, #0x4C]
  00ddc	e1a02803	 mov         r2, r3, lsl #16
  00de0	e1a02822	 mov         r2, r2, lsr #16
  00de4	e59d1054	 ldr         r1, [sp, #0x54]
  00de8	e59f0090	 ldr         r0, [pc, #0x90]
  00dec	eb000000	 bl          DmaSetElementAndFrameCount
  00df0		 |$LN4@DMASrcCopy|

; 382  : 	}
; 383  : 
; 384  :     //  Configure for transparent copy if requested
; 385  :     if( pParms->bltFlags & BLT_TRANSPARENT )

  00df0	e59d30fc	 ldr         r3, [sp, #0xFC]
  00df4	e2833024	 add         r3, r3, #0x24
  00df8	e5933000	 ldr         r3, [r3]
  00dfc	e3130004	 tst         r3, #4
  00e00	0a00000e	 beq         |$LN3@DMASrcCopy|

; 386  :     {
; 387  :         DmaSetColor( &g_tDmaDataInfo1, DMA_CCR_TRANSPARENT_COPY_ENABLE, (DWORD)pParms->solidColor );

  00e04	e59d30fc	 ldr         r3, [sp, #0xFC]
  00e08	e2833020	 add         r3, r3, #0x20
  00e0c	e5932000	 ldr         r2, [r3]
  00e10	e3a01802	 mov         r1, #2, 16
  00e14	e59f0068	 ldr         r0, [pc, #0x68]
  00e18	eb000000	 bl          DmaSetColor

; 388  :         if( bDualDMA )

  00e1c	e59d3048	 ldr         r3, [sp, #0x48]
  00e20	e3530000	 cmp         r3, #0
  00e24	0a000005	 beq         |$LN2@DMASrcCopy|

; 389  :             DmaSetColor( &g_tDmaDataInfo2, DMA_CCR_TRANSPARENT_COPY_ENABLE, (DWORD)pParms->solidColor );

  00e28	e59d30fc	 ldr         r3, [sp, #0xFC]
  00e2c	e2833020	 add         r3, r3, #0x20
  00e30	e5932000	 ldr         r2, [r3]
  00e34	e3a01802	 mov         r1, #2, 16
  00e38	e59f0040	 ldr         r0, [pc, #0x40]
  00e3c	eb000000	 bl          DmaSetColor
  00e40		 |$LN2@DMASrcCopy|
  00e40		 |$LN3@DMASrcCopy|

; 390  :     }
; 391  :        
; 392  :        
; 393  :     //  Start the DMA operation(s)
; 394  :     DmaStart( &g_tDmaDataInfo1 );

  00e40	e59f003c	 ldr         r0, [pc, #0x3C]
  00e44	eb000000	 bl          DmaStart

; 395  :     
; 396  :     if( bDualDMA )

  00e48	e59d3048	 ldr         r3, [sp, #0x48]
  00e4c	e3530000	 cmp         r3, #0
  00e50	0a000001	 beq         |$LN1@DMASrcCopy|

; 397  :         DmaStart( &g_tDmaDataInfo2 );

  00e54	e59f0024	 ldr         r0, [pc, #0x24]
  00e58	eb000000	 bl          DmaStart
  00e5c		 |$LN1@DMASrcCopy|

; 398  : 
; 399  :     //  Unlock access to DMA registers
; 400  :     LeaveCriticalSection( &g_csDmaLock );

  00e5c	e59f0018	 ldr         r0, [pc, #0x18]
  00e60	eb000000	 bl          LeaveCriticalSection

; 401  : 
; 402  :     return result;    

  00e64	e59d3068	 ldr         r3, [sp, #0x68]
  00e68	e58d307c	 str         r3, [sp, #0x7C]
  00e6c		 |$LN25@DMASrcCopy|

; 403  : }

  00e6c	e59d007c	 ldr         r0, [sp, #0x7C]
  00e70	e28dd0ec	 add         sp, sp, #0xEC
  00e74	e89d6010	 ldmia       sp, {r4, sp, lr}
  00e78	e12fff1e	 bx          lr
  00e7c		 |$LN34@DMASrcCopy|
  00e7c		 |$LN35@DMASrcCopy|
  00e7c	00000000	 DCD         |?g_csDmaLock@@3UCRITICAL_SECTION@@A|
  00e80		 |$LN36@DMASrcCopy|
  00e80	00000000	 DCD         |?g_tDmaDataInfo2@@3UDmaDataInfo_t@@A|
  00e84		 |$LN37@DMASrcCopy|
  00e84	00000000	 DCD         |?g_tDmaDataInfo1@@3UDmaDataInfo_t@@A|
  00e88		 |$LN38@DMASrcCopy|
  00e88	00000000	 DCD         |?g_hDmaChannel2@@3PAXA|
  00e8c		 |$LN39@DMASrcCopy|
  00e8c	00000000	 DCD         |?g_hDmaChannel1@@3PAXA|
  00e90		 |$LN40@DMASrcCopy|
  00e90	00000000	 DCD         |?EmulatedBlt@GPE@@QAAJPAUGPEBltParms@@@Z|
  00e94		 |$LN41@DMASrcCopy|
  00e94	00000000	 DCD         |?DesignateBlt@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|
  00e98		 |$LN42@DMASrcCopy|
  00e98	00000000	 DCD         |?g_Globals@@3VOMAPDDGPEGlobals@@A|
  00e9c		 |$M42709|

			 ENDP  ; |?DMASrcCopy@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|, OMAPDDGPE::DMASrcCopy

	END
