; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\DSS\DDGPE\halsurf.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|?g_dwSurfaceCount@@3KA| [ DATA ]	; g_dwSurfaceCount

  00000			 AREA	 |.data|, DATA
|?g_dwSurfaceCount@@3KA| DCD 0x1			; g_dwSurfaceCount

  00000			 AREA	 |.rdata|, DATA, READONLY
|FourCCDescriptionTable| DCD 0x32595559
	DCD	0x10
	DCD	0xff00ff
	DCD	0xff00
	DCD	0xff000000
	DCD	0x56595559
	DCD	0x10
	DCD	0xff00ff
	DCD	0xff00
	DCD	0xff000000
	DCD	0x55595659
	DCD	0x10
	DCD	0xff00ff00
	DCD	0xff
	DCD	0xff0000
	DCD	0x59565955
	DCD	0x10
	DCD	0xff00ff00
	DCD	0xff
	DCD	0xff0000
	DCD	0x36315659
	DCD	0x10
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x32315659
	DCD	0xc
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x3231564e
	DCD	0xc
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x30323449
	DCD	0xc
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x56555949
	DCD	0xc
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	EXPORT	|?HalGetBltStatus@@YAKPAU_DDHAL_GETBLTSTATUSDATA@@@Z| ; HalGetBltStatus

  00000			 AREA	 |.pdata|, PDATA
|$T42517| DCD	|$LN5@HalGetBltS|
	DCD	0x40000e04
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\ddgpe\halsurf.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?HalGetBltStatus@@YAKPAU_DDHAL_GETBLTSTATUSDATA@@@Z| PROC ; HalGetBltStatus

; 73   : {

  00000		 |$LN5@HalGetBltS|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M42514|

; 74   :     pd->ddRVal = DD_OK;

  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e283200c	 add         r2, r3, #0xC
  00018	e3a03000	 mov         r3, #0
  0001c	e5823000	 str         r3, [r2]

; 75   :     return DDHAL_DRIVER_HANDLED;

  00020	e3a03001	 mov         r3, #1
  00024	e58d3000	 str         r3, [sp]

; 76   : }

  00028	e59d0000	 ldr         r0, [sp]
  0002c	e28dd004	 add         sp, sp, #4
  00030	e89d6000	 ldmia       sp, {sp, lr}
  00034	e12fff1e	 bx          lr
  00038		 |$M42515|

			 ENDP  ; |?HalGetBltStatus@@YAKPAU_DDHAL_GETBLTSTATUSDATA@@@Z|, HalGetBltStatus

	EXPORT	|??_C@_1HI@EDDBANIN@?$AA?9?$AAH?$AAa?$AAl?$AAC?$AAa?$AAn?$AAC?$AAr?$AAe?$AAa?$AAt?$AAe?$AAS?$AAu?$AAr?$AAf?$AAa?$AAc?$AAe?$AA?$CI?$AA?$CJ?$AA?5?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?5?$AA?$DN?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HC@DAONICFJ@?$AA?$CL?$AAH?$AAa?$AAl?$AAC?$AAa?$AAn?$AAC?$AAr?$AAe?$AAa?$AAt?$AAe?$AAS?$AAu?$AAr?$AAf?$AAa?$AAc?$AAe?$AA?$CI?$AA?$CJ?$AA?5?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9@| [ DATA ] ; `string'
	EXPORT	|?HalCanCreateSurface@@YAKPAU_DDHAL_CANCREATESURFACEDATA@@@Z| ; HalCanCreateSurface
	IMPORT	|GetGPE|
	IMPORT	|DDGPECanCreateSurface|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|dpCurSettings|

  00008			 AREA	 |.pdata|, PDATA
|$T42549| DCD	|$LN73@HalCanCrea|
	DCD	0x40021a04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HI@EDDBANIN@?$AA?9?$AAH?$AAa?$AAl?$AAC?$AAa?$AAn?$AAC?$AAr?$AAe?$AAa?$AAt?$AAe?$AAS?$AAu?$AAr?$AAf?$AAa?$AAc?$AAe?$AA?$CI?$AA?$CJ?$AA?5?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?5?$AA?$DN?$AA?5@| DCB "-"
	DCB	0x0, "H", 0x0, "a", 0x0, "l", 0x0, "C", 0x0, "a", 0x0, "n"
	DCB	0x0, "C", 0x0, "r", 0x0, "e", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, "S", 0x0, "u", 0x0, "r", 0x0, "f", 0x0, "a", 0x0, "c"
	DCB	0x0, "e", 0x0, "(", 0x0, ")", 0x0, " ", 0x0, "r", 0x0, "e"
	DCB	0x0, "s", 0x0, "u", 0x0, "l", 0x0, "t", 0x0, " ", 0x0, "="
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, " "
	DCB	0x0, " ", 0x0, "p", 0x0, "d", 0x0, "-", 0x0, ">", 0x0, "d"
	DCB	0x0, "d", 0x0, "R", 0x0, "V", 0x0, "a", 0x0, "l", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HC@DAONICFJ@?$AA?$CL?$AAH?$AAa?$AAl?$AAC?$AAa?$AAn?$AAC?$AAr?$AAe?$AAa?$AAt?$AAe?$AAS?$AAu?$AAr?$AAf?$AAa?$AAc?$AAe?$AA?$CI?$AA?$CJ?$AA?5?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9@| DCB "+"
	DCB	0x0, "H", 0x0, "a", 0x0, "l", 0x0, "C", 0x0, "a", 0x0, "n"
	DCB	0x0, "C", 0x0, "r", 0x0, "e", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, "S", 0x0, "u", 0x0, "r", 0x0, "f", 0x0, "a", 0x0, "c"
	DCB	0x0, "e", 0x0, "(", 0x0, ")", 0x0, " ", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  00038			 AREA	 |.text|, CODE, ARM

  00038		 |?HalCanCreateSurface@@YAKPAU_DDHAL_CANCREATESURFACEDATA@@@Z| PROC ; HalCanCreateSurface

; 83   : {

  00038		 |$LN73@HalCanCrea|
  00038	e1a0c00d	 mov         r12, sp
  0003c	e92d0001	 stmdb       sp!, {r0}
  00040	e92d5000	 stmdb       sp!, {r12, lr}
  00044	e24dd048	 sub         sp, sp, #0x48
  00048		 |$M42546|

; 84   :     DWORD   result;
; 85   :     
; 86   :     DEBUGMSG(GPE_ZONE_DDRAW_HAL, (L"+HalCanCreateSurface() -------------------------------\r\n"));

  00048	e59f3834	 ldr         r3, [pc, #0x834]
  0004c	e5933440	 ldr         r3, [r3, #0x440]
  00050	e3130902	 tst         r3, #2, 18
  00054	0a000004	 beq         |$LN45@HalCanCrea|
  00058	e59f083c	 ldr         r0, [pc, #0x83C]
  0005c	eb000000	 bl          NKDbgPrintfW
  00060	e3a03001	 mov         r3, #1
  00064	e58d3014	 str         r3, [sp, #0x14]
  00068	ea000001	 b           |$LN46@HalCanCrea|
  0006c		 |$LN45@HalCanCrea|
  0006c	e3a03000	 mov         r3, #0
  00070	e58d3014	 str         r3, [sp, #0x14]
  00074		 |$LN46@HalCanCrea|

; 87   :     
; 88   :     //  Check for surface to create
; 89   :     if( pd->bIsDifferentPixelFormat )

  00074	e59d3050	 ldr         r3, [sp, #0x50]
  00078	e2833008	 add         r3, r3, #8
  0007c	e5933000	 ldr         r3, [r3]
  00080	e3530000	 cmp         r3, #0
  00084	0a0001e2	 beq         |$LN42@HalCanCrea|

; 90   :     {
; 91   :         LPDDSCAPS           pDDSCaps = &(pd->lpDDSurfaceDesc->ddsCaps);

  00088	e59d3050	 ldr         r3, [sp, #0x50]
  0008c	e2833004	 add         r3, r3, #4
  00090	e5933000	 ldr         r3, [r3]
  00094	e2833064	 add         r3, r3, #0x64
  00098	e58d3004	 str         r3, [sp, #4]

; 92   :         LPDDPIXELFORMAT     pDDPixelFormat = &(pd->lpDDSurfaceDesc->ddpfPixelFormat);

  0009c	e59d3050	 ldr         r3, [sp, #0x50]
  000a0	e2833004	 add         r3, r3, #4
  000a4	e5933000	 ldr         r3, [r3]
  000a8	e2833044	 add         r3, r3, #0x44
  000ac	e58d3008	 str         r3, [sp, #8]

; 93   :         
; 94   :         
; 95   :         //  Set default result
; 96   :         pd->ddRVal = DDERR_UNSUPPORTEDFORMAT;

  000b0	e59d3050	 ldr         r3, [sp, #0x50]
  000b4	e283200c	 add         r2, r3, #0xC
  000b8	e59f37c8	 ldr         r3, [pc, #0x7C8]
  000bc	e5823000	 str         r3, [r2]

; 97   :         result = DDHAL_DRIVER_HANDLED;

  000c0	e3a03001	 mov         r3, #1
  000c4	e58d3000	 str         r3, [sp]

; 98   : 
; 99   : 
; 100  :         //  Surface is different from primary
; 101  :         //  Check where surface needs to be allocated on
; 102  :         if( (pDDSCaps->dwCaps & (DDSCAPS_VIDEOMEMORY|DDSCAPS_SYSTEMMEMORY)) == 0 )

  000c8	e59d3004	 ldr         r3, [sp, #4]
  000cc	e5933000	 ldr         r3, [r3]
  000d0	e3130d06	 tst         r3, #6, 26
  000d4	1a000005	 bne         |$LN41@HalCanCrea|

; 103  :         {
; 104  :             //  No preference indicated; just use DDGPE function
; 105  :             result = DDGPECanCreateSurface(pd);

  000d8	e59d0050	 ldr         r0, [sp, #0x50]
  000dc	eb000000	 bl          DDGPECanCreateSurface
  000e0	e58d0018	 str         r0, [sp, #0x18]
  000e4	e59d3018	 ldr         r3, [sp, #0x18]
  000e8	e58d3000	 str         r3, [sp]
  000ec	ea0001c7	 b           |$LN40@HalCanCrea|
  000f0		 |$LN41@HalCanCrea|

; 106  :         }
; 107  :         else if( pDDSCaps->dwCaps & DDSCAPS_SYSTEMMEMORY )

  000f0	e59d3004	 ldr         r3, [sp, #4]
  000f4	e5933000	 ldr         r3, [r3]
  000f8	e3130080	 tst         r3, #0x80
  000fc	0a000005	 beq         |$LN39@HalCanCrea|

; 108  :         {
; 109  :             //  System memory preference indicated; just use DDGPE function
; 110  :             result = DDGPECanCreateSurface(pd);

  00100	e59d0050	 ldr         r0, [sp, #0x50]
  00104	eb000000	 bl          DDGPECanCreateSurface
  00108	e58d001c	 str         r0, [sp, #0x1C]
  0010c	e59d301c	 ldr         r3, [sp, #0x1C]
  00110	e58d3000	 str         r3, [sp]
  00114	ea0001bd	 b           |$LN38@HalCanCrea|
  00118		 |$LN39@HalCanCrea|

; 111  :         }
; 112  :         else if( pDDSCaps->dwCaps & DDSCAPS_PRIMARYSURFACE )

  00118	e59d3004	 ldr         r3, [sp, #4]
  0011c	e5933000	 ldr         r3, [r3]
  00120	e3130040	 tst         r3, #0x40
  00124	0a0000d0	 beq         |$LN37@HalCanCrea|

; 113  :         {
; 114  :             OMAPDDGPE*  pDDGPE = (OMAPDDGPE*) GetGPE();

  00128	eb000000	 bl          GetGPE
  0012c	e58d0020	 str         r0, [sp, #0x20]
  00130	e59d3020	 ldr         r3, [sp, #0x20]
  00134	e58d300c	 str         r3, [sp, #0xC]

; 115  : 
; 116  :             if(!(pDDPixelFormat->dwFlags & DDPF_ALPHAPREMULT))

  00138	e59d3008	 ldr         r3, [sp, #8]
  0013c	e2833004	 add         r3, r3, #4
  00140	e5933000	 ldr         r3, [r3]
  00144	e3130902	 tst         r3, #2, 18
  00148	1a0000c2	 bne         |$LN36@HalCanCrea|

; 117  :             {
; 118  :                 //  Check for a match of the pixel type with the primary surface pixel type
; 119  :                 if( pDDPixelFormat->dwFlags & DDPF_RGB )

  0014c	e59d3008	 ldr         r3, [sp, #8]
  00150	e2833004	 add         r3, r3, #4
  00154	e5933000	 ldr         r3, [r3]
  00158	e3130040	 tst         r3, #0x40
  0015c	0a0000bc	 beq         |$LN35@HalCanCrea|

; 120  :                 {
; 121  :                     //  Check pixel sizes
; 122  :                         if( (pDDPixelFormat->dwRGBBitCount == 16) || (pDDPixelFormat->dwRGBBitCount == 32) )

  00160	e59d3008	 ldr         r3, [sp, #8]
  00164	e283300c	 add         r3, r3, #0xC
  00168	e5933000	 ldr         r3, [r3]
  0016c	e3530010	 cmp         r3, #0x10
  00170	0a000004	 beq         |$LN33@HalCanCrea|
  00174	e59d3008	 ldr         r3, [sp, #8]
  00178	e283300c	 add         r3, r3, #0xC
  0017c	e5933000	 ldr         r3, [r3]
  00180	e3530020	 cmp         r3, #0x20
  00184	1a0000b2	 bne         |$LN34@HalCanCrea|
  00188		 |$LN33@HalCanCrea|

; 123  :                     {
; 124  :                         switch( pDDGPE->GetPrimaryPixelFormat() )

  00188	e59d300c	 ldr         r3, [sp, #0xC]
  0018c	e5933000	 ldr         r3, [r3]
  00190	e28330e4	 add         r3, r3, #0xE4
  00194	e59d000c	 ldr         r0, [sp, #0xC]
  00198	e5933000	 ldr         r3, [r3]
  0019c	e1a0e00f	 mov         lr, pc
  001a0	e12fff13	 bx          r3
  001a4	e58d0024	 str         r0, [sp, #0x24]
  001a8	e59d3024	 ldr         r3, [sp, #0x24]
  001ac	e58d3028	 str         r3, [sp, #0x28]
  001b0	e59d3028	 ldr         r3, [sp, #0x28]
  001b4	e2433005	 sub         r3, r3, #5
  001b8	e58d3028	 str         r3, [sp, #0x28]
  001bc	e59d3028	 ldr         r3, [sp, #0x28]
  001c0	e3530008	 cmp         r3, #8
  001c4	8a0000a2	 bhi         |$LN31@HalCanCrea|
  001c8	e59d2028	 ldr         r2, [sp, #0x28]
  001cc	e1a03102	 mov         r3, r2, lsl #2
  001d0	e083300f	 add         r3, r3, pc
  001d4	e5933004	 ldr         r3, [r3, #4]
  001d8	e08ff003	 add         pc, pc, r3
  001dc		 |$LN61@HalCanCrea|
  001dc		 |$LN60@HalCanCrea|
  001dc		 |$LN62@HalCanCrea|
  001dc	00000110	 DCD         0x110
  001e0		 |$LN63@HalCanCrea|
  001e0	00000020	 DCD         0x20
  001e4		 |$LN64@HalCanCrea|
  001e4	00000274	 DCD         0x274
  001e8		 |$LN65@HalCanCrea|
  001e8	00000098	 DCD         0x98
  001ec		 |$LN66@HalCanCrea|
  001ec	00000274	 DCD         0x274
  001f0		 |$LN67@HalCanCrea|
  001f0	00000274	 DCD         0x274
  001f4		 |$LN68@HalCanCrea|
  001f4	00000274	 DCD         0x274
  001f8		 |$LN69@HalCanCrea|
  001f8	00000188	 DCD         0x188
  001fc		 |$LN70@HalCanCrea|
  001fc	00000200	 DCD         0x200
  00200		 |$LN30@HalCanCrea|

; 125  :                         {
; 126  :                             case OMAP_DSS_PIXELFORMAT_RGB16:
; 127  :                                 pd->ddRVal = (IsRGB16(pDDPixelFormat)) ? DD_OK : DDERR_UNSUPPORTEDFORMAT;

  00200	e59d3008	 ldr         r3, [sp, #8]
  00204	e283301c	 add         r3, r3, #0x1C
  00208	e5933000	 ldr         r3, [r3]
  0020c	e3530000	 cmp         r3, #0
  00210	1a000011	 bne         |$LN47@HalCanCrea|
  00214	e59d3008	 ldr         r3, [sp, #8]
  00218	e2833010	 add         r3, r3, #0x10
  0021c	e5933000	 ldr         r3, [r3]
  00220	e3530b3e	 cmp         r3, #0x3E, 22
  00224	1a00000c	 bne         |$LN47@HalCanCrea|
  00228	e59d3008	 ldr         r3, [sp, #8]
  0022c	e2833014	 add         r3, r3, #0x14
  00230	e5933000	 ldr         r3, [r3]
  00234	e3530e7e	 cmp         r3, #0x7E, 28
  00238	1a000007	 bne         |$LN47@HalCanCrea|
  0023c	e59d3008	 ldr         r3, [sp, #8]
  00240	e2833018	 add         r3, r3, #0x18
  00244	e5933000	 ldr         r3, [r3]
  00248	e353001f	 cmp         r3, #0x1F
  0024c	1a000002	 bne         |$LN47@HalCanCrea|
  00250	e3a03000	 mov         r3, #0
  00254	e58d302c	 str         r3, [sp, #0x2C]
  00258	ea000001	 b           |$LN48@HalCanCrea|
  0025c		 |$LN47@HalCanCrea|
  0025c	e59f3624	 ldr         r3, [pc, #0x624]
  00260	e58d302c	 str         r3, [sp, #0x2C]
  00264		 |$LN48@HalCanCrea|
  00264	e59d3050	 ldr         r3, [sp, #0x50]
  00268	e283200c	 add         r2, r3, #0xC
  0026c	e59d302c	 ldr         r3, [sp, #0x2C]
  00270	e5823000	 str         r3, [r2]

; 128  :                                 break;

  00274	ea000076	 b           |$LN31@HalCanCrea|
  00278		 |$LN29@HalCanCrea|

; 129  : 
; 130  :                             case OMAP_DSS_PIXELFORMAT_RGB32:
; 131  :                                 pd->ddRVal = (IsRGB32(pDDPixelFormat)) ? DD_OK : DDERR_UNSUPPORTEDFORMAT;

  00278	e59d3008	 ldr         r3, [sp, #8]
  0027c	e283301c	 add         r3, r3, #0x1C
  00280	e5933000	 ldr         r3, [r3]
  00284	e3530000	 cmp         r3, #0
  00288	1a000011	 bne         |$LN49@HalCanCrea|
  0028c	e59d3008	 ldr         r3, [sp, #8]
  00290	e2833010	 add         r3, r3, #0x10
  00294	e5933000	 ldr         r3, [r3]
  00298	e35308ff	 cmp         r3, #0xFF, 16
  0029c	1a00000c	 bne         |$LN49@HalCanCrea|
  002a0	e59d3008	 ldr         r3, [sp, #8]
  002a4	e2833014	 add         r3, r3, #0x14
  002a8	e5933000	 ldr         r3, [r3]
  002ac	e3530cff	 cmp         r3, #0xFF, 24
  002b0	1a000007	 bne         |$LN49@HalCanCrea|
  002b4	e59d3008	 ldr         r3, [sp, #8]
  002b8	e2833018	 add         r3, r3, #0x18
  002bc	e5933000	 ldr         r3, [r3]
  002c0	e35300ff	 cmp         r3, #0xFF
  002c4	1a000002	 bne         |$LN49@HalCanCrea|
  002c8	e3a03000	 mov         r3, #0
  002cc	e58d3030	 str         r3, [sp, #0x30]
  002d0	ea000001	 b           |$LN50@HalCanCrea|
  002d4		 |$LN49@HalCanCrea|
  002d4	e59f35ac	 ldr         r3, [pc, #0x5AC]
  002d8	e58d3030	 str         r3, [sp, #0x30]
  002dc		 |$LN50@HalCanCrea|
  002dc	e59d3050	 ldr         r3, [sp, #0x50]
  002e0	e283200c	 add         r2, r3, #0xC
  002e4	e59d3030	 ldr         r3, [sp, #0x30]
  002e8	e5823000	 str         r3, [r2]

; 132  :                                 break;

  002ec	ea000058	 b           |$LN31@HalCanCrea|
  002f0		 |$LN28@HalCanCrea|

; 133  : 
; 134  :                             case OMAP_DSS_PIXELFORMAT_ARGB16:
; 135  :                                 pd->ddRVal = (IsARGB16(pDDPixelFormat)) ? DD_OK : DDERR_UNSUPPORTEDFORMAT;

  002f0	e59d3008	 ldr         r3, [sp, #8]
  002f4	e283301c	 add         r3, r3, #0x1C
  002f8	e5933000	 ldr         r3, [r3]
  002fc	e3530a0f	 cmp         r3, #0xF, 20
  00300	1a000011	 bne         |$LN51@HalCanCrea|
  00304	e59d3008	 ldr         r3, [sp, #8]
  00308	e2833010	 add         r3, r3, #0x10
  0030c	e5933000	 ldr         r3, [r3]
  00310	e3530c0f	 cmp         r3, #0xF, 24
  00314	1a00000c	 bne         |$LN51@HalCanCrea|
  00318	e59d3008	 ldr         r3, [sp, #8]
  0031c	e2833014	 add         r3, r3, #0x14
  00320	e5933000	 ldr         r3, [r3]
  00324	e35300f0	 cmp         r3, #0xF0
  00328	1a000007	 bne         |$LN51@HalCanCrea|
  0032c	e59d3008	 ldr         r3, [sp, #8]
  00330	e2833018	 add         r3, r3, #0x18
  00334	e5933000	 ldr         r3, [r3]
  00338	e353000f	 cmp         r3, #0xF
  0033c	1a000002	 bne         |$LN51@HalCanCrea|
  00340	e3a03000	 mov         r3, #0
  00344	e58d3034	 str         r3, [sp, #0x34]
  00348	ea000001	 b           |$LN52@HalCanCrea|
  0034c		 |$LN51@HalCanCrea|
  0034c	e59f3534	 ldr         r3, [pc, #0x534]
  00350	e58d3034	 str         r3, [sp, #0x34]
  00354		 |$LN52@HalCanCrea|
  00354	e59d3050	 ldr         r3, [sp, #0x50]
  00358	e283200c	 add         r2, r3, #0xC
  0035c	e59d3034	 ldr         r3, [sp, #0x34]
  00360	e5823000	 str         r3, [r2]

; 136  :                                 break;

  00364	ea00003a	 b           |$LN31@HalCanCrea|
  00368		 |$LN27@HalCanCrea|

; 137  : 
; 138  :                             case OMAP_DSS_PIXELFORMAT_ARGB32:
; 139  :                                 pd->ddRVal = (IsARGB32(pDDPixelFormat)) ? DD_OK : DDERR_UNSUPPORTEDFORMAT;

  00368	e59d3008	 ldr         r3, [sp, #8]
  0036c	e283301c	 add         r3, r3, #0x1C
  00370	e5933000	 ldr         r3, [r3]
  00374	e35304ff	 cmp         r3, #0xFF, 8
  00378	1a000011	 bne         |$LN53@HalCanCrea|
  0037c	e59d3008	 ldr         r3, [sp, #8]
  00380	e2833010	 add         r3, r3, #0x10
  00384	e5933000	 ldr         r3, [r3]
  00388	e35308ff	 cmp         r3, #0xFF, 16
  0038c	1a00000c	 bne         |$LN53@HalCanCrea|
  00390	e59d3008	 ldr         r3, [sp, #8]
  00394	e2833014	 add         r3, r3, #0x14
  00398	e5933000	 ldr         r3, [r3]
  0039c	e3530cff	 cmp         r3, #0xFF, 24
  003a0	1a000007	 bne         |$LN53@HalCanCrea|
  003a4	e59d3008	 ldr         r3, [sp, #8]
  003a8	e2833018	 add         r3, r3, #0x18
  003ac	e5933000	 ldr         r3, [r3]
  003b0	e35300ff	 cmp         r3, #0xFF
  003b4	1a000002	 bne         |$LN53@HalCanCrea|
  003b8	e3a03000	 mov         r3, #0
  003bc	e58d3038	 str         r3, [sp, #0x38]
  003c0	ea000001	 b           |$LN54@HalCanCrea|
  003c4		 |$LN53@HalCanCrea|
  003c4	e59f34bc	 ldr         r3, [pc, #0x4BC]
  003c8	e58d3038	 str         r3, [sp, #0x38]
  003cc		 |$LN54@HalCanCrea|
  003cc	e59d3050	 ldr         r3, [sp, #0x50]
  003d0	e283200c	 add         r2, r3, #0xC
  003d4	e59d3038	 ldr         r3, [sp, #0x38]
  003d8	e5823000	 str         r3, [r2]

; 140  :                                 break;

  003dc	ea00001c	 b           |$LN31@HalCanCrea|
  003e0		 |$LN26@HalCanCrea|

; 141  : 
; 142  :                             case OMAP_DSS_PIXELFORMAT_RGBA32:
; 143  :                                 pd->ddRVal = (IsRGBA32(pDDPixelFormat)) ? DD_OK : DDERR_UNSUPPORTEDFORMAT;

  003e0	e59d3008	 ldr         r3, [sp, #8]
  003e4	e283301c	 add         r3, r3, #0x1C
  003e8	e5933000	 ldr         r3, [r3]
  003ec	e35300ff	 cmp         r3, #0xFF
  003f0	1a000011	 bne         |$LN55@HalCanCrea|
  003f4	e59d3008	 ldr         r3, [sp, #8]
  003f8	e2833010	 add         r3, r3, #0x10
  003fc	e5933000	 ldr         r3, [r3]
  00400	e35304ff	 cmp         r3, #0xFF, 8
  00404	1a00000c	 bne         |$LN55@HalCanCrea|
  00408	e59d3008	 ldr         r3, [sp, #8]
  0040c	e2833014	 add         r3, r3, #0x14
  00410	e5933000	 ldr         r3, [r3]
  00414	e35308ff	 cmp         r3, #0xFF, 16
  00418	1a000007	 bne         |$LN55@HalCanCrea|
  0041c	e59d3008	 ldr         r3, [sp, #8]
  00420	e2833018	 add         r3, r3, #0x18
  00424	e5933000	 ldr         r3, [r3]
  00428	e3530cff	 cmp         r3, #0xFF, 24
  0042c	1a000002	 bne         |$LN55@HalCanCrea|
  00430	e3a03000	 mov         r3, #0
  00434	e58d303c	 str         r3, [sp, #0x3C]
  00438	ea000001	 b           |$LN56@HalCanCrea|
  0043c		 |$LN55@HalCanCrea|
  0043c	e59f3444	 ldr         r3, [pc, #0x444]
  00440	e58d303c	 str         r3, [sp, #0x3C]
  00444		 |$LN56@HalCanCrea|
  00444	e59d3050	 ldr         r3, [sp, #0x50]
  00448	e283200c	 add         r2, r3, #0xC
  0044c	e59d303c	 ldr         r3, [sp, #0x3C]
  00450	e5823000	 str         r3, [r2]
  00454		 |$LN31@HalCanCrea|
  00454		 |$LN34@HalCanCrea|
  00454		 |$LN35@HalCanCrea|

; 144  :                                 break;
; 145  :                         }
; 146  :                     }
; 147  :                 }
; 148  :             }
; 149  :             else

  00454	ea000003	 b           |$LN25@HalCanCrea|
  00458		 |$LN36@HalCanCrea|

; 150  :             {
; 151  :                 // do not support premult pixel formats in video memory.
; 152  :                 pd->ddRVal=DDERR_UNSUPPORTEDFORMAT;

  00458	e59d3050	 ldr         r3, [sp, #0x50]
  0045c	e283200c	 add         r2, r3, #0xC
  00460	e59f3420	 ldr         r3, [pc, #0x420]
  00464	e5823000	 str         r3, [r2]
  00468		 |$LN25@HalCanCrea|

; 153  :             }
; 154  : 
; 155  :         }
; 156  :         else

  00468	ea0000e8	 b           |$LN24@HalCanCrea|
  0046c		 |$LN37@HalCanCrea|

; 157  :         {
; 158  :             //  Video memory preference; check pixel type
; 159  :             if((pDDSCaps->dwCaps & DDSCAPS_OVERLAY) && !(pDDPixelFormat->dwFlags & DDPF_ALPHAPREMULT))

  0046c	e59d3004	 ldr         r3, [sp, #4]
  00470	e5933000	 ldr         r3, [r3]
  00474	e3130010	 tst         r3, #0x10
  00478	0a000063	 beq         |$LN23@HalCanCrea|
  0047c	e59d3008	 ldr         r3, [sp, #8]
  00480	e2833004	 add         r3, r3, #4
  00484	e5933000	 ldr         r3, [r3]
  00488	e3130902	 tst         r3, #2, 18
  0048c	1a00005e	 bne         |$LN23@HalCanCrea|

; 160  :             {
; 161  :                 //  Overlays can support YUV pixel formats
; 162  :                 if( pDDPixelFormat->dwFlags & DDPF_FOURCC )

  00490	e59d3008	 ldr         r3, [sp, #8]
  00494	e2833004	 add         r3, r3, #4
  00498	e5933000	 ldr         r3, [r3]
  0049c	e3130004	 tst         r3, #4
  004a0	0a00001d	 beq         |$LN22@HalCanCrea|

; 163  :                 {
; 164  :                     switch( pDDPixelFormat->dwFourCC )

  004a4	e59d3008	 ldr         r3, [sp, #8]
  004a8	e2833008	 add         r3, r3, #8
  004ac	e5933000	 ldr         r3, [r3]
  004b0	e58d3040	 str         r3, [sp, #0x40]
  004b4	e59d2040	 ldr         r2, [sp, #0x40]
  004b8	e59f33d8	 ldr         r3, [pc, #0x3D8]
  004bc	e1520003	 cmp         r2, r3
  004c0	8a00000c	 bhi         |$LN57@HalCanCrea|
  004c4	e59d2040	 ldr         r2, [sp, #0x40]
  004c8	e59f33c8	 ldr         r3, [pc, #0x3C8]
  004cc	e1520003	 cmp         r2, r3
  004d0	0a00000d	 beq         |$LN19@HalCanCrea|
  004d4	e59d2040	 ldr         r2, [sp, #0x40]
  004d8	e59f33b4	 ldr         r3, [pc, #0x3B4]
  004dc	e1520003	 cmp         r2, r3
  004e0	0a000009	 beq         |$LN19@HalCanCrea|
  004e4	e59d2040	 ldr         r2, [sp, #0x40]
  004e8	e59f33a0	 ldr         r3, [pc, #0x3A0]
  004ec	e1520003	 cmp         r2, r3
  004f0	0a000005	 beq         |$LN19@HalCanCrea|
  004f4	ea000008	 b           |$LN20@HalCanCrea|
  004f8		 |$LN57@HalCanCrea|
  004f8	e59d2040	 ldr         r2, [sp, #0x40]
  004fc	e59f3388	 ldr         r3, [pc, #0x388]
  00500	e1520003	 cmp         r2, r3
  00504	0a000000	 beq         |$LN19@HalCanCrea|
  00508	ea000003	 b           |$LN20@HalCanCrea|
  0050c		 |$LN19@HalCanCrea|

; 165  :                     {
; 166  :                         case FOURCC_YUY2:
; 167  :                         case FOURCC_YUYV:
; 168  :                         case FOURCC_YVYU:
; 169  :                         case FOURCC_UYVY:
; 170  :                             //  Supported formats
; 171  :                             pd->ddRVal = DD_OK;

  0050c	e59d3050	 ldr         r3, [sp, #0x50]
  00510	e283200c	 add         r2, r3, #0xC
  00514	e3a03000	 mov         r3, #0
  00518	e5823000	 str         r3, [r2]
  0051c		 |$LN20@HalCanCrea|
  0051c		 |$LN22@HalCanCrea|

; 172  :                             break;
; 173  :                     }
; 174  :                 }
; 175  : 
; 176  :                 //  Check for RGB formats on overlay
; 177  :                 //  Even though VID2 can support alpha pixels, we are limiting the
; 178  :                 //  set of support pixel types to allow swapping of VID1 and VID2
; 179  :                 //  surfaces to support Z-ordering of overlays
; 180  :                 if( pDDPixelFormat->dwFlags & DDPF_RGB )

  0051c	e59d3008	 ldr         r3, [sp, #8]
  00520	e2833004	 add         r3, r3, #4
  00524	e5933000	 ldr         r3, [r3]
  00528	e3130040	 tst         r3, #0x40
  0052c	0a000035	 beq         |$LN18@HalCanCrea|

; 181  :                 {
; 182  :                     //  Check pixel sizes
; 183  :                     if( (pDDPixelFormat->dwRGBBitCount == 16) || (pDDPixelFormat->dwRGBBitCount == 32) )

  00530	e59d3008	 ldr         r3, [sp, #8]
  00534	e283300c	 add         r3, r3, #0xC
  00538	e5933000	 ldr         r3, [r3]
  0053c	e3530010	 cmp         r3, #0x10
  00540	0a000004	 beq         |$LN16@HalCanCrea|
  00544	e59d3008	 ldr         r3, [sp, #8]
  00548	e283300c	 add         r3, r3, #0xC
  0054c	e5933000	 ldr         r3, [r3]
  00550	e3530020	 cmp         r3, #0x20
  00554	1a00002b	 bne         |$LN17@HalCanCrea|
  00558		 |$LN16@HalCanCrea|

; 184  :                     {
; 185  :                         //  Check pixel formats
; 186  :                         if( (IsRGB16(pDDPixelFormat)) ||
; 187  :                             (IsRGB32(pDDPixelFormat)) )

  00558	e59d3008	 ldr         r3, [sp, #8]
  0055c	e283301c	 add         r3, r3, #0x1C
  00560	e5933000	 ldr         r3, [r3]
  00564	e3530000	 cmp         r3, #0
  00568	1a00000e	 bne         |$LN13@HalCanCrea|
  0056c	e59d3008	 ldr         r3, [sp, #8]
  00570	e2833010	 add         r3, r3, #0x10
  00574	e5933000	 ldr         r3, [r3]
  00578	e3530b3e	 cmp         r3, #0x3E, 22
  0057c	1a000009	 bne         |$LN13@HalCanCrea|
  00580	e59d3008	 ldr         r3, [sp, #8]
  00584	e2833014	 add         r3, r3, #0x14
  00588	e5933000	 ldr         r3, [r3]
  0058c	e3530e7e	 cmp         r3, #0x7E, 28
  00590	1a000004	 bne         |$LN13@HalCanCrea|
  00594	e59d3008	 ldr         r3, [sp, #8]
  00598	e2833018	 add         r3, r3, #0x18
  0059c	e5933000	 ldr         r3, [r3]
  005a0	e353001f	 cmp         r3, #0x1F
  005a4	0a000013	 beq         |$LN14@HalCanCrea|
  005a8		 |$LN13@HalCanCrea|
  005a8	e59d3008	 ldr         r3, [sp, #8]
  005ac	e283301c	 add         r3, r3, #0x1C
  005b0	e5933000	 ldr         r3, [r3]
  005b4	e3530000	 cmp         r3, #0
  005b8	1a000012	 bne         |$LN15@HalCanCrea|
  005bc	e59d3008	 ldr         r3, [sp, #8]
  005c0	e2833010	 add         r3, r3, #0x10
  005c4	e5933000	 ldr         r3, [r3]
  005c8	e35308ff	 cmp         r3, #0xFF, 16
  005cc	1a00000d	 bne         |$LN15@HalCanCrea|
  005d0	e59d3008	 ldr         r3, [sp, #8]
  005d4	e2833014	 add         r3, r3, #0x14
  005d8	e5933000	 ldr         r3, [r3]
  005dc	e3530cff	 cmp         r3, #0xFF, 24
  005e0	1a000008	 bne         |$LN15@HalCanCrea|
  005e4	e59d3008	 ldr         r3, [sp, #8]
  005e8	e2833018	 add         r3, r3, #0x18
  005ec	e5933000	 ldr         r3, [r3]
  005f0	e35300ff	 cmp         r3, #0xFF
  005f4	1a000003	 bne         |$LN15@HalCanCrea|
  005f8		 |$LN14@HalCanCrea|

; 188  :                         {
; 189  :                             //  Supported formats
; 190  :                             pd->ddRVal = DD_OK;

  005f8	e59d3050	 ldr         r3, [sp, #0x50]
  005fc	e283200c	 add         r2, r3, #0xC
  00600	e3a03000	 mov         r3, #0
  00604	e5823000	 str         r3, [r2]
  00608		 |$LN15@HalCanCrea|
  00608		 |$LN17@HalCanCrea|
  00608		 |$LN18@HalCanCrea|

; 191  :                         }
; 192  :                      }
; 193  :                  }
; 194  :             }

  00608	ea000080	 b           |$LN12@HalCanCrea|
  0060c		 |$LN23@HalCanCrea|

; 195  : 
; 196  :             //  Check for RGB formats on primary display
; 197  :             else if((pDDPixelFormat->dwFlags & DDPF_RGB) && !(pDDPixelFormat->dwFlags & DDPF_ALPHAPREMULT))

  0060c	e59d3008	 ldr         r3, [sp, #8]
  00610	e2833004	 add         r3, r3, #4
  00614	e5933000	 ldr         r3, [r3]
  00618	e3130040	 tst         r3, #0x40
  0061c	0a000077	 beq         |$LN11@HalCanCrea|
  00620	e59d3008	 ldr         r3, [sp, #8]
  00624	e2833004	 add         r3, r3, #4
  00628	e5933000	 ldr         r3, [r3]
  0062c	e3130902	 tst         r3, #2, 18
  00630	1a000072	 bne         |$LN11@HalCanCrea|

; 198  :             {
; 199  :                 //  Check pixel sizes
; 200  :                 if( (pDDPixelFormat->dwRGBBitCount == 16) || (pDDPixelFormat->dwRGBBitCount == 32) )

  00634	e59d3008	 ldr         r3, [sp, #8]
  00638	e283300c	 add         r3, r3, #0xC
  0063c	e5933000	 ldr         r3, [r3]
  00640	e3530010	 cmp         r3, #0x10
  00644	0a000004	 beq         |$LN9@HalCanCrea|
  00648	e59d3008	 ldr         r3, [sp, #8]
  0064c	e283300c	 add         r3, r3, #0xC
  00650	e5933000	 ldr         r3, [r3]
  00654	e3530020	 cmp         r3, #0x20
  00658	1a000067	 bne         |$LN10@HalCanCrea|
  0065c		 |$LN9@HalCanCrea|

; 201  :                 {
; 202  :                     //  Check pixel formats
; 203  :                     if( IsRGB16(pDDPixelFormat) ||
; 204  :                         IsARGB16(pDDPixelFormat) ||
; 205  :                         IsRGB32(pDDPixelFormat) ||
; 206  :                         IsARGB32(pDDPixelFormat) ||
; 207  :                         IsRGBA32(pDDPixelFormat) )

  0065c	e59d3008	 ldr         r3, [sp, #8]
  00660	e283301c	 add         r3, r3, #0x1C
  00664	e5933000	 ldr         r3, [r3]
  00668	e3530000	 cmp         r3, #0
  0066c	1a00000e	 bne         |$LN6@HalCanCrea|
  00670	e59d3008	 ldr         r3, [sp, #8]
  00674	e2833010	 add         r3, r3, #0x10
  00678	e5933000	 ldr         r3, [r3]
  0067c	e3530b3e	 cmp         r3, #0x3E, 22
  00680	1a000009	 bne         |$LN6@HalCanCrea|
  00684	e59d3008	 ldr         r3, [sp, #8]
  00688	e2833014	 add         r3, r3, #0x14
  0068c	e5933000	 ldr         r3, [r3]
  00690	e3530e7e	 cmp         r3, #0x7E, 28
  00694	1a000004	 bne         |$LN6@HalCanCrea|
  00698	e59d3008	 ldr         r3, [sp, #8]
  0069c	e2833018	 add         r3, r3, #0x18
  006a0	e5933000	 ldr         r3, [r3]
  006a4	e353001f	 cmp         r3, #0x1F
  006a8	0a00004f	 beq         |$LN7@HalCanCrea|
  006ac		 |$LN6@HalCanCrea|
  006ac	e59d3008	 ldr         r3, [sp, #8]
  006b0	e283301c	 add         r3, r3, #0x1C
  006b4	e5933000	 ldr         r3, [r3]
  006b8	e3530a0f	 cmp         r3, #0xF, 20
  006bc	1a00000e	 bne         |$LN5@HalCanCrea|
  006c0	e59d3008	 ldr         r3, [sp, #8]
  006c4	e2833010	 add         r3, r3, #0x10
  006c8	e5933000	 ldr         r3, [r3]
  006cc	e3530c0f	 cmp         r3, #0xF, 24
  006d0	1a000009	 bne         |$LN5@HalCanCrea|
  006d4	e59d3008	 ldr         r3, [sp, #8]
  006d8	e2833014	 add         r3, r3, #0x14
  006dc	e5933000	 ldr         r3, [r3]
  006e0	e35300f0	 cmp         r3, #0xF0
  006e4	1a000004	 bne         |$LN5@HalCanCrea|
  006e8	e59d3008	 ldr         r3, [sp, #8]
  006ec	e2833018	 add         r3, r3, #0x18
  006f0	e5933000	 ldr         r3, [r3]
  006f4	e353000f	 cmp         r3, #0xF
  006f8	0a00003b	 beq         |$LN7@HalCanCrea|
  006fc		 |$LN5@HalCanCrea|
  006fc	e59d3008	 ldr         r3, [sp, #8]
  00700	e283301c	 add         r3, r3, #0x1C
  00704	e5933000	 ldr         r3, [r3]
  00708	e3530000	 cmp         r3, #0
  0070c	1a00000e	 bne         |$LN4@HalCanCrea|
  00710	e59d3008	 ldr         r3, [sp, #8]
  00714	e2833010	 add         r3, r3, #0x10
  00718	e5933000	 ldr         r3, [r3]
  0071c	e35308ff	 cmp         r3, #0xFF, 16
  00720	1a000009	 bne         |$LN4@HalCanCrea|
  00724	e59d3008	 ldr         r3, [sp, #8]
  00728	e2833014	 add         r3, r3, #0x14
  0072c	e5933000	 ldr         r3, [r3]
  00730	e3530cff	 cmp         r3, #0xFF, 24
  00734	1a000004	 bne         |$LN4@HalCanCrea|
  00738	e59d3008	 ldr         r3, [sp, #8]
  0073c	e2833018	 add         r3, r3, #0x18
  00740	e5933000	 ldr         r3, [r3]
  00744	e35300ff	 cmp         r3, #0xFF
  00748	0a000027	 beq         |$LN7@HalCanCrea|
  0074c		 |$LN4@HalCanCrea|
  0074c	e59d3008	 ldr         r3, [sp, #8]
  00750	e283301c	 add         r3, r3, #0x1C
  00754	e5933000	 ldr         r3, [r3]
  00758	e35304ff	 cmp         r3, #0xFF, 8
  0075c	1a00000e	 bne         |$LN3@HalCanCrea|
  00760	e59d3008	 ldr         r3, [sp, #8]
  00764	e2833010	 add         r3, r3, #0x10
  00768	e5933000	 ldr         r3, [r3]
  0076c	e35308ff	 cmp         r3, #0xFF, 16
  00770	1a000009	 bne         |$LN3@HalCanCrea|
  00774	e59d3008	 ldr         r3, [sp, #8]
  00778	e2833014	 add         r3, r3, #0x14
  0077c	e5933000	 ldr         r3, [r3]
  00780	e3530cff	 cmp         r3, #0xFF, 24
  00784	1a000004	 bne         |$LN3@HalCanCrea|
  00788	e59d3008	 ldr         r3, [sp, #8]
  0078c	e2833018	 add         r3, r3, #0x18
  00790	e5933000	 ldr         r3, [r3]
  00794	e35300ff	 cmp         r3, #0xFF
  00798	0a000013	 beq         |$LN7@HalCanCrea|
  0079c		 |$LN3@HalCanCrea|
  0079c	e59d3008	 ldr         r3, [sp, #8]
  007a0	e283301c	 add         r3, r3, #0x1C
  007a4	e5933000	 ldr         r3, [r3]
  007a8	e35300ff	 cmp         r3, #0xFF
  007ac	1a000012	 bne         |$LN8@HalCanCrea|
  007b0	e59d3008	 ldr         r3, [sp, #8]
  007b4	e2833010	 add         r3, r3, #0x10
  007b8	e5933000	 ldr         r3, [r3]
  007bc	e35304ff	 cmp         r3, #0xFF, 8
  007c0	1a00000d	 bne         |$LN8@HalCanCrea|
  007c4	e59d3008	 ldr         r3, [sp, #8]
  007c8	e2833014	 add         r3, r3, #0x14
  007cc	e5933000	 ldr         r3, [r3]
  007d0	e35308ff	 cmp         r3, #0xFF, 16
  007d4	1a000008	 bne         |$LN8@HalCanCrea|
  007d8	e59d3008	 ldr         r3, [sp, #8]
  007dc	e2833018	 add         r3, r3, #0x18
  007e0	e5933000	 ldr         r3, [r3]
  007e4	e3530cff	 cmp         r3, #0xFF, 24
  007e8	1a000003	 bne         |$LN8@HalCanCrea|
  007ec		 |$LN7@HalCanCrea|

; 208  :                     {
; 209  :                         //  Supported formats
; 210  :                         pd->ddRVal = DD_OK;

  007ec	e59d3050	 ldr         r3, [sp, #0x50]
  007f0	e283200c	 add         r2, r3, #0xC
  007f4	e3a03000	 mov         r3, #0
  007f8	e5823000	 str         r3, [r2]
  007fc		 |$LN8@HalCanCrea|
  007fc		 |$LN10@HalCanCrea|

; 211  :                     }
; 212  :                 }
; 213  :             }
; 214  :             else

  007fc	ea000003	 b           |$LN2@HalCanCrea|
  00800		 |$LN11@HalCanCrea|

; 215  :             {
; 216  :                 // do not support premult pixel formats in video memory.
; 217  :                 pd->ddRVal=DDERR_UNSUPPORTEDFORMAT;

  00800	e59d3050	 ldr         r3, [sp, #0x50]
  00804	e283200c	 add         r2, r3, #0xC
  00808	e59f3078	 ldr         r3, [pc, #0x78]
  0080c	e5823000	 str         r3, [r2]
  00810		 |$LN2@HalCanCrea|
  00810		 |$LN12@HalCanCrea|
  00810		 |$LN24@HalCanCrea|
  00810		 |$LN38@HalCanCrea|
  00810		 |$LN40@HalCanCrea|

; 218  :             }
; 219  : 
; 220  :         }
; 221  :     }
; 222  :     else

  00810	ea000005	 b           |$LN1@HalCanCrea|
  00814		 |$LN42@HalCanCrea|

; 223  :     {
; 224  :         //  Can create surfaces that match primary surface
; 225  :         pd->ddRVal = DD_OK;

  00814	e59d3050	 ldr         r3, [sp, #0x50]
  00818	e283200c	 add         r2, r3, #0xC
  0081c	e3a03000	 mov         r3, #0
  00820	e5823000	 str         r3, [r2]

; 226  :         result = DDHAL_DRIVER_HANDLED;

  00824	e3a03001	 mov         r3, #1
  00828	e58d3000	 str         r3, [sp]
  0082c		 |$LN1@HalCanCrea|

; 227  :     }
; 228  :     
; 229  :  //   DumpDD_CANCREATESURFACE(pd);
; 230  :     
; 231  :     DEBUGMSG(GPE_ZONE_DDRAW_HAL, (L"-HalCanCreateSurface() result = 0x%x  pd->ddRVal = 0x%x\r\n\r\n", result, pd->ddRVal));

  0082c	e59f3050	 ldr         r3, [pc, #0x50]
  00830	e5933440	 ldr         r3, [r3, #0x440]
  00834	e3130902	 tst         r3, #2, 18
  00838	0a000008	 beq         |$LN58@HalCanCrea|
  0083c	e59d3050	 ldr         r3, [sp, #0x50]
  00840	e283300c	 add         r3, r3, #0xC
  00844	e5932000	 ldr         r2, [r3]
  00848	e59d1000	 ldr         r1, [sp]
  0084c	e59f002c	 ldr         r0, [pc, #0x2C]
  00850	eb000000	 bl          NKDbgPrintfW
  00854	e3a03001	 mov         r3, #1
  00858	e58d3044	 str         r3, [sp, #0x44]
  0085c	ea000001	 b           |$LN59@HalCanCrea|
  00860		 |$LN58@HalCanCrea|
  00860	e3a03000	 mov         r3, #0
  00864	e58d3044	 str         r3, [sp, #0x44]
  00868		 |$LN59@HalCanCrea|

; 232  :     
; 233  :     return result;

  00868	e59d3000	 ldr         r3, [sp]
  0086c	e58d3010	 str         r3, [sp, #0x10]

; 234  : }

  00870	e59d0010	 ldr         r0, [sp, #0x10]
  00874	e28dd048	 add         sp, sp, #0x48
  00878	e89d6000	 ldmia       sp, {sp, lr}
  0087c	e12fff1e	 bx          lr
  00880		 |$LN74@HalCanCrea|
  00880		 |$LN75@HalCanCrea|
  00880	00000000	 DCD         |??_C@_1HI@EDDBANIN@?$AA?9?$AAH?$AAa?$AAl?$AAC?$AAa?$AAn?$AAC?$AAr?$AAe?$AAa?$AAt?$AAe?$AAS?$AAu?$AAr?$AAf?$AAa?$AAc?$AAe?$AA?$CI?$AA?$CJ?$AA?5?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?5?$AA?$DN?$AA?5@|
  00884		 |$LN76@HalCanCrea|
  00884	00000000	 DCD         |dpCurSettings|
  00888		 |$LN77@HalCanCrea|
  00888	88760218	 DCD         0x88760218
  0088c		 |$LN78@HalCanCrea|
  0088c	59565955	 DCD         0x59565955
  00890		 |$LN79@HalCanCrea|
  00890	55595659	 DCD         0x55595659
  00894		 |$LN80@HalCanCrea|
  00894	32595559	 DCD         0x32595559
  00898		 |$LN81@HalCanCrea|
  00898	56595559	 DCD         0x56595559
  0089c		 |$LN82@HalCanCrea|
  0089c	00000000	 DCD         |??_C@_1HC@DAONICFJ@?$AA?$CL?$AAH?$AAa?$AAl?$AAC?$AAa?$AAn?$AAC?$AAr?$AAe?$AAa?$AAt?$AAe?$AAS?$AAu?$AAr?$AAf?$AAa?$AAc?$AAe?$AA?$CI?$AA?$CJ?$AA?5?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9@|
  008a0		 |$M42547|

			 ENDP  ; |?HalCanCreateSurface@@YAKPAU_DDHAL_CANCREATESURFACEDATA@@@Z|, HalCanCreateSurface

	EXPORT	|??_C@_1JK@KCLGKKGI@?$AA?9?$AAH?$AAa?$AAl?$AAC?$AAr?$AAe?$AAa?$AAt?$AAe?$AAS?$AAu?$AAr?$AAf?$AAa?$AAc?$AAe?$AA?$CI?$AA?$CJ?$AA?5?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DI@NNHAJDOC@?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAR?$AAS?$AAZ?$AA?5?$AAs?$AAu?$AAr?$AAf?$AAa?$AAc?$AAe?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|?OmapAssocSurface@OMAPDDGPESurface@@QAAPAVOMAPSurface@@XZ| ; OMAPDDGPESurface::OmapAssocSurface
	EXPORT	|??_C@_1FA@EEEPJNGE@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAR?$AAS?$AAZ?$AA?5?$AAs?$AAu@| [ DATA ] ; `string'
	EXPORT	|?SetOverlay@DDGPESurf@@QAAXXZ|		; DDGPESurf::SetOverlay
	EXPORT	|??_C@_1DA@GHPLIKNC@?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAs?$AAu?$AAr?$AAf?$AAa?$AAc?$AAe?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EI@KPAINJGL@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAs?$AAu?$AAr?$AAf?$AAa?$AAc@| [ DATA ] ; `string'
	EXPORT	|?SetParent@OMAPDDGPESurface@@QAAXPAV1@@Z| ; OMAPDDGPESurface::SetParent
	EXPORT	|??_C@_1HA@PGKMOPNF@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAp?$AAr?$AAi?$AAm?$AAa?$AAr@| [ DATA ] ; `string'
	EXPORT	|?PixelFormat@OMAPSurface@@QAA?AW4OMAP_DSS_PIXELFORMAT@@XZ| ; OMAPSurface::PixelFormat
	EXPORT	|?BytesPerPixel@GPESurf@@QAAHXZ|	; GPESurf::BytesPerPixel
	EXPORT	|?OmapSurface@OMAPDDGPESurface@@QAAPAVOMAPSurface@@XZ| ; OMAPDDGPESurface::OmapSurface
	EXPORT	|?DDGPEPrimarySurface@DDGPE@@QAAPAVDDGPESurf@@XZ| ; DDGPE::DDGPEPrimarySurface
	EXPORT	|??_C@_1GO@IDGOHJLN@?$AA?$CL?$AAH?$AAa?$AAl?$AAC?$AAr?$AAe?$AAa?$AAt?$AAe?$AAS?$AAu?$AAr?$AAf?$AAa?$AAc?$AAe?$AA?$CI?$AA?$CJ?$AA?5?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9@| [ DATA ] ; `string'
	EXPORT	|?HalCreateSurface@@YAKPAU_DDHAL_CREATESURFACEDATA@@@Z| ; HalCreateSurface
	IMPORT	|?DumpDD_CREATESURFACE@@YAXPAU_DDHAL_CREATESURFACEDATA@@@Z| ; DumpDD_CREATESURFACE
	IMPORT	|?DeleteSurface@DDGPESurf@@SAXPAU_DDRAWI_DDRAWSURFACE_LCL@@@Z| ; DDGPESurf::DeleteSurface
	IMPORT	|?AllocSurface@OMAPDDGPE@@QAAJPAVOMAPDDGPESurface@@W4OMAP_DSS_PIXELFORMAT@@HH@Z| ; OMAPDDGPE::AllocSurface
	IMPORT	|DDGPECreateSurface|

  00010			 AREA	 |.pdata|, PDATA
|$T42582| DCD	|$LN72@HalCreateS|
	DCD	0x40032a04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JK@KCLGKKGI@?$AA?9?$AAH?$AAa?$AAl?$AAC?$AAr?$AAe?$AAa?$AAt?$AAe?$AAS?$AAu?$AAr?$AAf?$AAa?$AAc?$AAe?$AA?$CI?$AA?$CJ?$AA?5?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF@| DCB "-"
	DCB	0x0, "H", 0x0, "a", 0x0, "l", 0x0, "C", 0x0, "r", 0x0, "e"
	DCB	0x0, "a", 0x0, "t", 0x0, "e", 0x0, "S", 0x0, "u", 0x0, "r"
	DCB	0x0, "f", 0x0, "a", 0x0, "c", 0x0, "e", 0x0, "(", 0x0, ")"
	DCB	0x0, " ", 0x0, "r", 0x0, "e", 0x0, "s", 0x0, "u", 0x0, "l"
	DCB	0x0, "t", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "x", 0x0, " ", 0x0, " ", 0x0, "p", 0x0, "d"
	DCB	0x0, "-", 0x0, ">", 0x0, "d", 0x0, "d", 0x0, "R", 0x0, "V"
	DCB	0x0, "a", 0x0, "l", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "x", 0x0, " ", 0x0, " ", 0x0, "s"
	DCB	0x0, "u", 0x0, "r", 0x0, "f", 0x0, "a", 0x0, "c", 0x0, "e"
	DCB	0x0, " ", 0x0, "c", 0x0, "o", 0x0, "u", 0x0, "n", 0x0, "t"
	DCB	0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DI@NNHAJDOC@?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAR?$AAS?$AAZ?$AA?5?$AAs?$AAu?$AAr?$AAf?$AAa?$AAc?$AAe?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "a"
	DCB	0x0, "l", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t"
	DCB	0x0, "e", 0x0, " ", 0x0, "R", 0x0, "S", 0x0, "Z", 0x0, " "
	DCB	0x0, "s", 0x0, "u", 0x0, "r", 0x0, "f", 0x0, "a", 0x0, "c"
	DCB	0x0, "e", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FA@EEEPJNGE@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAR?$AAS?$AAZ?$AA?5?$AAs?$AAu@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "U", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e"
	DCB	0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "a", 0x0, "l"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, " ", 0x0, "R", 0x0, "S", 0x0, "Z", 0x0, " ", 0x0, "s"
	DCB	0x0, "u", 0x0, "r", 0x0, "f", 0x0, "a", 0x0, "c", 0x0, "e"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@GHPLIKNC@?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAs?$AAu?$AAr?$AAf?$AAa?$AAc?$AAe?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "a"
	DCB	0x0, "l", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t"
	DCB	0x0, "e", 0x0, " ", 0x0, "s", 0x0, "u", 0x0, "r", 0x0, "f"
	DCB	0x0, "a", 0x0, "c", 0x0, "e", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EI@KPAINJGL@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAs?$AAu?$AAr?$AAf?$AAa?$AAc@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "U", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e"
	DCB	0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "a", 0x0, "l"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, " ", 0x0, "s", 0x0, "u", 0x0, "r", 0x0, "f", 0x0, "a"
	DCB	0x0, "c", 0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HA@PGKMOPNF@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAp?$AAr?$AAi?$AAm?$AAa?$AAr@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "U", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e"
	DCB	0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "a", 0x0, "l"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, " ", 0x0, "p", 0x0, "r", 0x0, "i", 0x0, "m", 0x0, "a"
	DCB	0x0, "r", 0x0, "y", 0x0, " ", 0x0, "b", 0x0, "a", 0x0, "c"
	DCB	0x0, "k", 0x0, " ", 0x0, "b", 0x0, "u", 0x0, "f", 0x0, "f"
	DCB	0x0, "e", 0x0, "r", 0x0, " ", 0x0, "s", 0x0, "u", 0x0, "r"
	DCB	0x0, "f", 0x0, "a", 0x0, "c", 0x0, "e", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GO@IDGOHJLN@?$AA?$CL?$AAH?$AAa?$AAl?$AAC?$AAr?$AAe?$AAa?$AAt?$AAe?$AAS?$AAu?$AAr?$AAf?$AAa?$AAc?$AAe?$AA?$CI?$AA?$CJ?$AA?5?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9@| DCB "+"
	DCB	0x0, "H", 0x0, "a", 0x0, "l", 0x0, "C", 0x0, "r", 0x0, "e"
	DCB	0x0, "a", 0x0, "t", 0x0, "e", 0x0, "S", 0x0, "u", 0x0, "r"
	DCB	0x0, "f", 0x0, "a", 0x0, "c", 0x0, "e", 0x0, "(", 0x0, ")"
	DCB	0x0, " ", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Odtp

  008a0			 AREA	 |.text|, CODE, ARM

  008a0		 |?HalCreateSurface@@YAKPAU_DDHAL_CREATESURFACEDATA@@@Z| PROC ; HalCreateSurface

; 241  : {

  008a0		 |$LN72@HalCreateS|
  008a0	e1a0c00d	 mov         r12, sp
  008a4	e92d0001	 stmdb       sp!, {r0}
  008a8	e92d5010	 stmdb       sp!, {r4, r12, lr}
  008ac	e24dd0ec	 sub         sp, sp, #0xEC
  008b0		 |$M42579|

; 242  :     DWORD                       result = DDHAL_DRIVER_HANDLED;

  008b0	e3a03001	 mov         r3, #1
  008b4	e58d3014	 str         r3, [sp, #0x14]

; 243  :     OMAPDDGPE*                  pDDGPE = (OMAPDDGPE*) GetGPE();

  008b8	eb000000	 bl          GetGPE
  008bc	e58d004c	 str         r0, [sp, #0x4C]
  008c0	e59d304c	 ldr         r3, [sp, #0x4C]
  008c4	e58d300c	 str         r3, [sp, #0xC]

; 244  :     LPDDSCAPS                   pDDSCaps = &(pd->lpDDSurfaceDesc->ddsCaps);

  008c8	e59d30f8	 ldr         r3, [sp, #0xF8]
  008cc	e2833004	 add         r3, r3, #4
  008d0	e5933000	 ldr         r3, [r3]
  008d4	e2833064	 add         r3, r3, #0x64
  008d8	e58d3004	 str         r3, [sp, #4]

; 245  :     LPDDPIXELFORMAT             pDDPixelFormat = &(pd->lpDDSurfaceDesc->ddpfPixelFormat);

  008dc	e59d30f8	 ldr         r3, [sp, #0xF8]
  008e0	e2833004	 add         r3, r3, #4
  008e4	e5933000	 ldr         r3, [r3]
  008e8	e2833044	 add         r3, r3, #0x44
  008ec	e58d3018	 str         r3, [sp, #0x18]

; 246  :     unsigned int                iSurf = 0;

  008f0	e3a03000	 mov         r3, #0
  008f4	e58d3008	 str         r3, [sp, #8]

; 247  :     LPDDRAWI_DDRAWSURFACE_LCL   pSurf;
; 248  :     
; 249  :     DEBUGMSG(GPE_ZONE_DDRAW_HAL, (L"+HalCreateSurface() --------------------------------\r\n"));

  008f8	e59f3c14	 ldr         r3, [pc, #0xC14]
  008fc	e5933440	 ldr         r3, [r3, #0x440]
  00900	e3130902	 tst         r3, #2, 18
  00904	0a000004	 beq         |$LN55@HalCreateS|
  00908	e59f0c34	 ldr         r0, [pc, #0xC34]
  0090c	eb000000	 bl          NKDbgPrintfW
  00910	e3a03001	 mov         r3, #1
  00914	e58d3050	 str         r3, [sp, #0x50]
  00918	ea000001	 b           |$LN56@HalCreateS|
  0091c		 |$LN55@HalCreateS|
  0091c	e3a03000	 mov         r3, #0
  00920	e58d3050	 str         r3, [sp, #0x50]
  00924		 |$LN56@HalCreateS|

; 250  : 
; 251  : 
; 252  :     //  Check where surface needs to be allocated on
; 253  :     if( pDDSCaps->dwCaps & DDSCAPS_PRIMARYSURFACE )

  00924	e59d3004	 ldr         r3, [sp, #4]
  00928	e5933000	 ldr         r3, [r3]
  0092c	e3130040	 tst         r3, #0x40
  00930	0a0000d1	 beq         |$LN52@HalCreateS|

; 254  :     {
; 255  :         OMAPDDGPESurface*   pPrimarySurface = (OMAPDDGPESurface*) pDDGPE->DDGPEPrimarySurface();

  00934	e59d000c	 ldr         r0, [sp, #0xC]
  00938	eb000000	 bl          |?DDGPEPrimarySurface@DDGPE@@QAAPAVDDGPESurf@@XZ|
  0093c	e58d0054	 str         r0, [sp, #0x54]
  00940	e59d3054	 ldr         r3, [sp, #0x54]
  00944	e58d301c	 str         r3, [sp, #0x1C]

; 256  : 
; 257  :         //  Primary surface and back buffers
; 258  :         for( iSurf = 0; iSurf < pd->dwSCnt; iSurf++ )

  00948	e3a03000	 mov         r3, #0
  0094c	e58d3008	 str         r3, [sp, #8]
  00950	ea000002	 b           |$LN51@HalCreateS|
  00954		 |$LN50@HalCreateS|
  00954	e59d3008	 ldr         r3, [sp, #8]
  00958	e2833001	 add         r3, r3, #1
  0095c	e58d3008	 str         r3, [sp, #8]
  00960		 |$LN51@HalCreateS|
  00960	e59d30f8	 ldr         r3, [sp, #0xF8]
  00964	e2833008	 add         r3, r3, #8
  00968	e59d2008	 ldr         r2, [sp, #8]
  0096c	e5933000	 ldr         r3, [r3]
  00970	e1520003	 cmp         r2, r3
  00974	2a0000bb	 bcs         |$LN49@HalCreateS|

; 259  :         {
; 260  :             //  Initialize surface object
; 261  :             pSurf = pd->lplpSList[iSurf];

  00978	e59d30f8	 ldr         r3, [sp, #0xF8]
  0097c	e283000c	 add         r0, r3, #0xC
  00980	e59d1008	 ldr         r1, [sp, #8]
  00984	e3a03004	 mov         r3, #4
  00988	e0020391	 mul         r2, r1, r3
  0098c	e5903000	 ldr         r3, [r0]
  00990	e0833002	 add         r3, r3, r2
  00994	e5933000	 ldr         r3, [r3]
  00998	e58d3010	 str         r3, [sp, #0x10]

; 262  :             pSurf->dwReserved1 = 0;

  0099c	e59d3010	 ldr         r3, [sp, #0x10]
  009a0	e2832010	 add         r2, r3, #0x10
  009a4	e3a03000	 mov         r3, #0
  009a8	e5823000	 str         r3, [r2]

; 263  : 
; 264  :             //  For first surface in chain, just point to primary surface
; 265  :             if( iSurf == 0 )

  009ac	e59d3008	 ldr         r3, [sp, #8]
  009b0	e3530000	 cmp         r3, #0
  009b4	1a00004e	 bne         |$LN48@HalCreateS|

; 266  :             {
; 267  :                 pSurf->dwReserved1 = (DWORD) pPrimarySurface; 

  009b8	e59d3010	 ldr         r3, [sp, #0x10]
  009bc	e2832010	 add         r2, r3, #0x10
  009c0	e59d301c	 ldr         r3, [sp, #0x1C]
  009c4	e5823000	 str         r3, [r2]

; 268  :                 pSurf->ddsCaps.dwCaps |= DDSCAPS_PRIMARYSURFACE|DDSCAPS_VIDEOMEMORY;

  009c8	e59d3010	 ldr         r3, [sp, #0x10]
  009cc	e2833008	 add         r3, r3, #8
  009d0	e5933000	 ldr         r3, [r3]
  009d4	e3832d05	 orr         r2, r3, #5, 26
  009d8	e59d3010	 ldr         r3, [sp, #0x10]
  009dc	e2833008	 add         r3, r3, #8
  009e0	e5832000	 str         r2, [r3]

; 269  :                 
; 270  :                 //  Update surface description attributes to reflect the primary surface
; 271  :                 pd->lpDDSurfaceDesc->ddsCaps.dwCaps |= DDSCAPS_PRIMARYSURFACE|DDSCAPS_VIDEOMEMORY;

  009e4	e59d30f8	 ldr         r3, [sp, #0xF8]
  009e8	e2833004	 add         r3, r3, #4
  009ec	e5933000	 ldr         r3, [r3]
  009f0	e2833064	 add         r3, r3, #0x64
  009f4	e5933000	 ldr         r3, [r3]
  009f8	e3832d05	 orr         r2, r3, #5, 26
  009fc	e59d30f8	 ldr         r3, [sp, #0xF8]
  00a00	e2833004	 add         r3, r3, #4
  00a04	e5933000	 ldr         r3, [r3]
  00a08	e2833064	 add         r3, r3, #0x64
  00a0c	e5832000	 str         r2, [r3]

; 272  :                 pd->lpDDSurfaceDesc->dwFlags        |= DDSD_PITCH|DDSD_XPITCH|DDSD_SURFACESIZE;

  00a10	e59d30f8	 ldr         r3, [sp, #0xF8]
  00a14	e2833004	 add         r3, r3, #4
  00a18	e5933000	 ldr         r3, [r3]
  00a1c	e2833004	 add         r3, r3, #4
  00a20	e5932000	 ldr         r2, [r3]
  00a24	e3a03702	 mov         r3, #2, 14
  00a28	e3833018	 orr         r3, r3, #0x18
  00a2c	e1822003	 orr         r2, r2, r3
  00a30	e59d30f8	 ldr         r3, [sp, #0xF8]
  00a34	e2833004	 add         r3, r3, #4
  00a38	e5933000	 ldr         r3, [r3]
  00a3c	e2833004	 add         r3, r3, #4
  00a40	e5832000	 str         r2, [r3]

; 273  :                 pd->lpDDSurfaceDesc->lPitch         = pPrimarySurface->OmapSurface()->Stride();

  00a44	e59d001c	 ldr         r0, [sp, #0x1C]
  00a48	eb000000	 bl          |?OmapSurface@OMAPDDGPESurface@@QAAPAVOMAPSurface@@XZ|
  00a4c	e58d0058	 str         r0, [sp, #0x58]
  00a50	e59d3058	 ldr         r3, [sp, #0x58]
  00a54	e58d305c	 str         r3, [sp, #0x5C]
  00a58	e3a01000	 mov         r1, #0
  00a5c	e59d005c	 ldr         r0, [sp, #0x5C]
  00a60	e59d305c	 ldr         r3, [sp, #0x5C]
  00a64	e5933000	 ldr         r3, [r3]
  00a68	e2833010	 add         r3, r3, #0x10
  00a6c	e5933000	 ldr         r3, [r3]
  00a70	e1a0e00f	 mov         lr, pc
  00a74	e12fff13	 bx          r3
  00a78	e58d0060	 str         r0, [sp, #0x60]
  00a7c	e59d30f8	 ldr         r3, [sp, #0xF8]
  00a80	e2833004	 add         r3, r3, #4
  00a84	e5933000	 ldr         r3, [r3]
  00a88	e2832010	 add         r2, r3, #0x10
  00a8c	e59d3060	 ldr         r3, [sp, #0x60]
  00a90	e5823000	 str         r3, [r2]

; 274  :                 pd->lpDDSurfaceDesc->lXPitch        = pPrimarySurface->BytesPerPixel();

  00a94	e59d001c	 ldr         r0, [sp, #0x1C]
  00a98	eb000000	 bl          |?BytesPerPixel@GPESurf@@QAAHXZ|
  00a9c	e58d0064	 str         r0, [sp, #0x64]
  00aa0	e59d30f8	 ldr         r3, [sp, #0xF8]
  00aa4	e2833004	 add         r3, r3, #4
  00aa8	e5933000	 ldr         r3, [r3]
  00aac	e2832014	 add         r2, r3, #0x14
  00ab0	e59d3064	 ldr         r3, [sp, #0x64]
  00ab4	e5823000	 str         r3, [r2]

; 275  :                 pd->lpDDSurfaceDesc->dwSurfaceSize  = pPrimarySurface->SurfaceSize();            

  00ab8	e59d301c	 ldr         r3, [sp, #0x1C]
  00abc	e5933000	 ldr         r3, [r3]
  00ac0	e2833044	 add         r3, r3, #0x44
  00ac4	e59d001c	 ldr         r0, [sp, #0x1C]
  00ac8	e5933000	 ldr         r3, [r3]
  00acc	e1a0e00f	 mov         lr, pc
  00ad0	e12fff13	 bx          r3
  00ad4	e58d0068	 str         r0, [sp, #0x68]
  00ad8	e59d30f8	 ldr         r3, [sp, #0xF8]
  00adc	e2833004	 add         r3, r3, #4
  00ae0	e5933000	 ldr         r3, [r3]
  00ae4	e2832068	 add         r2, r3, #0x68
  00ae8	e59d3068	 ldr         r3, [sp, #0x68]
  00aec	e5823000	 str         r3, [r2]

; 276  :             }
; 277  :             else

  00af0	ea00005b	 b           |$LN47@HalCreateS|
  00af4		 |$LN48@HalCreateS|

; 278  :             {
; 279  :                 SCODE               scResult;
; 280  :                 OMAPDDGPESurface*   pBackSurface;
; 281  :                 
; 282  :                 //  Allocate a back buffer to the primary surface
; 283  :                 scResult = pDDGPE->AllocSurface(
; 284  :                                         &pBackSurface,
; 285  :                                         pPrimarySurface->OmapSurface()->PixelFormat(),
; 286  :                                         pPrimarySurface->OmapSurface()->Width(),
; 287  :                                         pPrimarySurface->OmapSurface()->Height() );

  00af4	e59d001c	 ldr         r0, [sp, #0x1C]
  00af8	eb000000	 bl          |?OmapSurface@OMAPDDGPESurface@@QAAPAVOMAPSurface@@XZ|
  00afc	e58d006c	 str         r0, [sp, #0x6C]
  00b00	e59d306c	 ldr         r3, [sp, #0x6C]
  00b04	e58d3070	 str         r3, [sp, #0x70]
  00b08	e3a01000	 mov         r1, #0
  00b0c	e59d0070	 ldr         r0, [sp, #0x70]
  00b10	e59d3070	 ldr         r3, [sp, #0x70]
  00b14	e5933000	 ldr         r3, [r3]
  00b18	e283300c	 add         r3, r3, #0xC
  00b1c	e5933000	 ldr         r3, [r3]
  00b20	e1a0e00f	 mov         lr, pc
  00b24	e12fff13	 bx          r3
  00b28	e58d0074	 str         r0, [sp, #0x74]
  00b2c	e59d001c	 ldr         r0, [sp, #0x1C]
  00b30	eb000000	 bl          |?OmapSurface@OMAPDDGPESurface@@QAAPAVOMAPSurface@@XZ|
  00b34	e58d0078	 str         r0, [sp, #0x78]
  00b38	e59d3078	 ldr         r3, [sp, #0x78]
  00b3c	e58d307c	 str         r3, [sp, #0x7C]
  00b40	e3a01000	 mov         r1, #0
  00b44	e59d007c	 ldr         r0, [sp, #0x7C]
  00b48	e59d307c	 ldr         r3, [sp, #0x7C]
  00b4c	e5933000	 ldr         r3, [r3]
  00b50	e2833008	 add         r3, r3, #8
  00b54	e5933000	 ldr         r3, [r3]
  00b58	e1a0e00f	 mov         lr, pc
  00b5c	e12fff13	 bx          r3
  00b60	e58d0080	 str         r0, [sp, #0x80]
  00b64	e59d001c	 ldr         r0, [sp, #0x1C]
  00b68	eb000000	 bl          |?OmapSurface@OMAPDDGPESurface@@QAAPAVOMAPSurface@@XZ|
  00b6c	e58d0084	 str         r0, [sp, #0x84]
  00b70	e59d0084	 ldr         r0, [sp, #0x84]
  00b74	eb000000	 bl          |?PixelFormat@OMAPSurface@@QAA?AW4OMAP_DSS_PIXELFORMAT@@XZ|
  00b78	e58d0088	 str         r0, [sp, #0x88]
  00b7c	e59d3074	 ldr         r3, [sp, #0x74]
  00b80	e58d3000	 str         r3, [sp]
  00b84	e59d3080	 ldr         r3, [sp, #0x80]
  00b88	e59d2088	 ldr         r2, [sp, #0x88]
  00b8c	e28d1024	 add         r1, sp, #0x24
  00b90	e59d000c	 ldr         r0, [sp, #0xC]
  00b94	e5900000	 ldr         r0, [r0]
  00b98	e280e0f4	 add         lr, r0, #0xF4
  00b9c	e59d000c	 ldr         r0, [sp, #0xC]
  00ba0	e59e4000	 ldr         r4, [lr]
  00ba4	e1a0e00f	 mov         lr, pc
  00ba8	e12fff14	 bx          r4
  00bac	e58d008c	 str         r0, [sp, #0x8C]
  00bb0	e59d308c	 ldr         r3, [sp, #0x8C]
  00bb4	e58d3020	 str         r3, [sp, #0x20]

; 288  :                 if (scResult != S_OK)

  00bb8	e59d3020	 ldr         r3, [sp, #0x20]
  00bbc	e3530000	 cmp         r3, #0
  00bc0	0a000010	 beq         |$LN46@HalCreateS|

; 289  :                 {
; 290  :                     DEBUGMSG (GPE_ZONE_ERROR, (L"ERROR: Unable to allocate primary back buffer surface\r\n"));

  00bc4	e59f3948	 ldr         r3, [pc, #0x948]
  00bc8	e5933440	 ldr         r3, [r3, #0x440]
  00bcc	e3130001	 tst         r3, #1
  00bd0	0a000004	 beq         |$LN57@HalCreateS|
  00bd4	e59f0964	 ldr         r0, [pc, #0x964]
  00bd8	eb000000	 bl          NKDbgPrintfW
  00bdc	e3a03001	 mov         r3, #1
  00be0	e58d3090	 str         r3, [sp, #0x90]
  00be4	ea000001	 b           |$LN58@HalCreateS|
  00be8		 |$LN57@HalCreateS|
  00be8	e3a03000	 mov         r3, #0
  00bec	e58d3090	 str         r3, [sp, #0x90]
  00bf0		 |$LN58@HalCreateS|

; 291  :                     pd->ddRVal = DDERR_OUTOFVIDEOMEMORY;

  00bf0	e59d30f8	 ldr         r3, [sp, #0xF8]
  00bf4	e2832010	 add         r2, r3, #0x10
  00bf8	e59f3920	 ldr         r3, [pc, #0x920]
  00bfc	e5823000	 str         r3, [r2]
  00c00	ea0001fb	 b           |$LN45@HalCreateS|

; 292  :                     goto cleanUp;

  00c04	ea0001fa	 b           |$cleanUp$42164|
  00c08		 |$LN46@HalCreateS|

; 293  :                 }
; 294  :                 
; 295  :                 //  Configure created surface
; 296  :                 pSurf->dwReserved1 = (DWORD) pBackSurface;

  00c08	e59d3010	 ldr         r3, [sp, #0x10]
  00c0c	e2832010	 add         r2, r3, #0x10
  00c10	e59d3024	 ldr         r3, [sp, #0x24]
  00c14	e5823000	 str         r3, [r2]

; 297  :                 pSurf->ddsCaps.dwCaps |= DDSCAPS_VIDEOMEMORY;

  00c18	e59d3010	 ldr         r3, [sp, #0x10]
  00c1c	e2833008	 add         r3, r3, #8
  00c20	e5933000	 ldr         r3, [r3]
  00c24	e3832c01	 orr         r2, r3, #1, 24
  00c28	e59d3010	 ldr         r3, [sp, #0x10]
  00c2c	e2833008	 add         r3, r3, #8
  00c30	e5832000	 str         r2, [r3]

; 298  :                 pBackSurface->lpDDSurface = pSurf;

  00c34	e59d3024	 ldr         r3, [sp, #0x24]
  00c38	e2832064	 add         r2, r3, #0x64
  00c3c	e59d3010	 ldr         r3, [sp, #0x10]
  00c40	e5823000	 str         r3, [r2]

; 299  :                 
; 300  :                 //  Parent surface for back buffer chain is the primary surface
; 301  :                 pBackSurface->SetParent( pPrimarySurface );

  00c44	e59d101c	 ldr         r1, [sp, #0x1C]
  00c48	e59d0024	 ldr         r0, [sp, #0x24]
  00c4c	eb000000	 bl          |?SetParent@OMAPDDGPESurface@@QAAXPAV1@@Z|

; 302  :                 
; 303  :                 g_dwSurfaceCount++;

  00c50	e59f38b8	 ldr         r3, [pc, #0x8B8]
  00c54	e5933000	 ldr         r3, [r3]
  00c58	e2832001	 add         r2, r3, #1
  00c5c	e59f38ac	 ldr         r3, [pc, #0x8AC]
  00c60	e5832000	 str         r2, [r3]
  00c64		 |$LN47@HalCreateS|

; 304  :             }
; 305  :         }

  00c64	eaffff3a	 b           |$LN50@HalCreateS|
  00c68		 |$LN49@HalCreateS|

; 306  :         
; 307  :         //  Surface creation complete
; 308  :         pd->ddRVal = DD_OK;

  00c68	e59d30f8	 ldr         r3, [sp, #0xF8]
  00c6c	e2832010	 add         r2, r3, #0x10
  00c70	e3a03000	 mov         r3, #0
  00c74	e5823000	 str         r3, [r2]
  00c78	ea0001dd	 b           |$LN44@HalCreateS|
  00c7c		 |$LN52@HalCreateS|

; 309  :     }
; 310  :     else if( (pDDSCaps->dwCaps & (DDSCAPS_VIDEOMEMORY|DDSCAPS_SYSTEMMEMORY)) == 0 )

  00c7c	e59d3004	 ldr         r3, [sp, #4]
  00c80	e5933000	 ldr         r3, [r3]
  00c84	e3130d06	 tst         r3, #6, 26
  00c88	1a00000a	 bne         |$LN43@HalCreateS|

; 311  :     {
; 312  :         //  No preference indicated; just use DDGPE function
; 313  :         result = DDGPECreateSurface(pd);

  00c8c	e59d00f8	 ldr         r0, [sp, #0xF8]
  00c90	eb000000	 bl          DDGPECreateSurface
  00c94	e58d0094	 str         r0, [sp, #0x94]
  00c98	e59d3094	 ldr         r3, [sp, #0x94]
  00c9c	e58d3014	 str         r3, [sp, #0x14]

; 314  :         g_dwSurfaceCount++;

  00ca0	e59f3868	 ldr         r3, [pc, #0x868]
  00ca4	e5933000	 ldr         r3, [r3]
  00ca8	e2832001	 add         r2, r3, #1
  00cac	e59f385c	 ldr         r3, [pc, #0x85C]
  00cb0	e5832000	 str         r2, [r3]
  00cb4	ea0001ce	 b           |$LN42@HalCreateS|
  00cb8		 |$LN43@HalCreateS|

; 315  :     }
; 316  :     else if( pDDSCaps->dwCaps & DDSCAPS_SYSTEMMEMORY )

  00cb8	e59d3004	 ldr         r3, [sp, #4]
  00cbc	e5933000	 ldr         r3, [r3]
  00cc0	e3130080	 tst         r3, #0x80
  00cc4	0a00000a	 beq         |$LN41@HalCreateS|

; 317  :     {
; 318  :         //  System memory preference indicated; just use DDGPE function
; 319  :         result = DDGPECreateSurface(pd);

  00cc8	e59d00f8	 ldr         r0, [sp, #0xF8]
  00ccc	eb000000	 bl          DDGPECreateSurface
  00cd0	e58d0098	 str         r0, [sp, #0x98]
  00cd4	e59d3098	 ldr         r3, [sp, #0x98]
  00cd8	e58d3014	 str         r3, [sp, #0x14]

; 320  :         g_dwSurfaceCount++;

  00cdc	e59f382c	 ldr         r3, [pc, #0x82C]
  00ce0	e5933000	 ldr         r3, [r3]
  00ce4	e2832001	 add         r2, r3, #1
  00ce8	e59f3820	 ldr         r3, [pc, #0x820]
  00cec	e5832000	 str         r2, [r3]

; 321  :     }
; 322  :     else

  00cf0	ea0001bf	 b           |$LN40@HalCreateS|
  00cf4		 |$LN41@HalCreateS|

; 323  :     {
; 324  :         OMAP_DSS_PIXELFORMAT    dssPixelFormat = OMAP_DSS_PIXELFORMAT_UNKNOWN;

  00cf4	e3e03000	 mvn         r3, #0
  00cf8	e58d3028	 str         r3, [sp, #0x28]

; 325  :         
; 326  :         //  Video memory preference; check pixel type
; 327  :         if( pDDSCaps->dwCaps & DDSCAPS_OVERLAY )

  00cfc	e59d3004	 ldr         r3, [sp, #4]
  00d00	e5933000	 ldr         r3, [r3]
  00d04	e3130010	 tst         r3, #0x10
  00d08	0a000023	 beq         |$LN39@HalCreateS|

; 328  :         {
; 329  :             //  Overlays can support YUV pixel formats
; 330  :             if( pDDPixelFormat->dwFlags & DDPF_FOURCC )

  00d0c	e59d3018	 ldr         r3, [sp, #0x18]
  00d10	e2833004	 add         r3, r3, #4
  00d14	e5933000	 ldr         r3, [r3]
  00d18	e3130004	 tst         r3, #4
  00d1c	0a00001e	 beq         |$LN38@HalCreateS|

; 331  :             {
; 332  :                 switch( pDDPixelFormat->dwFourCC )

  00d20	e59d3018	 ldr         r3, [sp, #0x18]
  00d24	e2833008	 add         r3, r3, #8
  00d28	e5933000	 ldr         r3, [r3]
  00d2c	e58d309c	 str         r3, [sp, #0x9C]
  00d30	e59d209c	 ldr         r2, [sp, #0x9C]
  00d34	e59f3800	 ldr         r3, [pc, #0x800]
  00d38	e1520003	 cmp         r2, r3
  00d3c	8a00000c	 bhi         |$LN59@HalCreateS|
  00d40	e59d209c	 ldr         r2, [sp, #0x9C]
  00d44	e59f37f0	 ldr         r3, [pc, #0x7F0]
  00d48	e1520003	 cmp         r2, r3
  00d4c	0a00000d	 beq         |$LN35@HalCreateS|
  00d50	e59d209c	 ldr         r2, [sp, #0x9C]
  00d54	e59f37dc	 ldr         r3, [pc, #0x7DC]
  00d58	e1520003	 cmp         r2, r3
  00d5c	0a000009	 beq         |$LN35@HalCreateS|
  00d60	e59d209c	 ldr         r2, [sp, #0x9C]
  00d64	e59f37c8	 ldr         r3, [pc, #0x7C8]
  00d68	e1520003	 cmp         r2, r3
  00d6c	0a000008	 beq         |$LN34@HalCreateS|
  00d70	ea000009	 b           |$LN36@HalCreateS|
  00d74		 |$LN59@HalCreateS|
  00d74	e59d209c	 ldr         r2, [sp, #0x9C]
  00d78	e59f37b0	 ldr         r3, [pc, #0x7B0]
  00d7c	e1520003	 cmp         r2, r3
  00d80	0a000003	 beq         |$LN34@HalCreateS|
  00d84	ea000004	 b           |$LN36@HalCreateS|
  00d88		 |$LN35@HalCreateS|

; 333  :                 {
; 334  :                     case FOURCC_YUY2:
; 335  :                     case FOURCC_YUYV:
; 336  :                         //  Supported format
; 337  :                         dssPixelFormat = OMAP_DSS_PIXELFORMAT_YUV2;

  00d88	e3a0300a	 mov         r3, #0xA
  00d8c	e58d3028	 str         r3, [sp, #0x28]

; 338  :                         break;

  00d90	ea000001	 b           |$LN36@HalCreateS|
  00d94		 |$LN34@HalCreateS|

; 339  :                     
; 340  :                     case FOURCC_YVYU:
; 341  :                     case FOURCC_UYVY:
; 342  :                         //  Supported format
; 343  :                         dssPixelFormat = OMAP_DSS_PIXELFORMAT_UYVY;

  00d94	e3a0300b	 mov         r3, #0xB
  00d98	e58d3028	 str         r3, [sp, #0x28]
  00d9c		 |$LN36@HalCreateS|
  00d9c		 |$LN38@HalCreateS|
  00d9c		 |$LN39@HalCreateS|

; 344  :                         break;
; 345  :                 }
; 346  :             }
; 347  :         }
; 348  :         
; 349  :         //  Check for RGB formats (applicable to both primary and overlay surfaces)
; 350  :         if( pDDPixelFormat->dwFlags & DDPF_RGB )

  00d9c	e59d3018	 ldr         r3, [sp, #0x18]
  00da0	e2833004	 add         r3, r3, #4
  00da4	e5933000	 ldr         r3, [r3]
  00da8	e3130040	 tst         r3, #0x40
  00dac	0a00007b	 beq         |$LN33@HalCreateS|

; 351  :         {
; 352  :             //  Check pixel sizes
; 353  :             if( (pDDPixelFormat->dwRGBBitCount == 16) ||
; 354  :                 (pDDPixelFormat->dwRGBBitCount == 32) )

  00db0	e59d3018	 ldr         r3, [sp, #0x18]
  00db4	e283300c	 add         r3, r3, #0xC
  00db8	e5933000	 ldr         r3, [r3]
  00dbc	e3530010	 cmp         r3, #0x10
  00dc0	0a000004	 beq         |$LN31@HalCreateS|
  00dc4	e59d3018	 ldr         r3, [sp, #0x18]
  00dc8	e283300c	 add         r3, r3, #0xC
  00dcc	e5933000	 ldr         r3, [r3]
  00dd0	e3530020	 cmp         r3, #0x20
  00dd4	1a000071	 bne         |$LN32@HalCreateS|
  00dd8		 |$LN31@HalCreateS|

; 355  :             {
; 356  :                 //  Check pixel formats
; 357  :                 if( IsRGB16(pDDPixelFormat) )

  00dd8	e59d3018	 ldr         r3, [sp, #0x18]
  00ddc	e283301c	 add         r3, r3, #0x1C
  00de0	e5933000	 ldr         r3, [r3]
  00de4	e3530000	 cmp         r3, #0
  00de8	1a000011	 bne         |$LN30@HalCreateS|
  00dec	e59d3018	 ldr         r3, [sp, #0x18]
  00df0	e2833010	 add         r3, r3, #0x10
  00df4	e5933000	 ldr         r3, [r3]
  00df8	e3530b3e	 cmp         r3, #0x3E, 22
  00dfc	1a00000c	 bne         |$LN30@HalCreateS|
  00e00	e59d3018	 ldr         r3, [sp, #0x18]
  00e04	e2833014	 add         r3, r3, #0x14
  00e08	e5933000	 ldr         r3, [r3]
  00e0c	e3530e7e	 cmp         r3, #0x7E, 28
  00e10	1a000007	 bne         |$LN30@HalCreateS|
  00e14	e59d3018	 ldr         r3, [sp, #0x18]
  00e18	e2833018	 add         r3, r3, #0x18
  00e1c	e5933000	 ldr         r3, [r3]
  00e20	e353001f	 cmp         r3, #0x1F
  00e24	1a000002	 bne         |$LN30@HalCreateS|

; 358  :                 {
; 359  :                     dssPixelFormat = OMAP_DSS_PIXELFORMAT_RGB16;

  00e28	e3a03006	 mov         r3, #6
  00e2c	e58d3028	 str         r3, [sp, #0x28]
  00e30	ea00005a	 b           |$LN29@HalCreateS|
  00e34		 |$LN30@HalCreateS|

; 360  :                 }
; 361  :                 else if( IsARGB16(pDDPixelFormat) )

  00e34	e59d3018	 ldr         r3, [sp, #0x18]
  00e38	e283301c	 add         r3, r3, #0x1C
  00e3c	e5933000	 ldr         r3, [r3]
  00e40	e3530a0f	 cmp         r3, #0xF, 20
  00e44	1a000011	 bne         |$LN28@HalCreateS|
  00e48	e59d3018	 ldr         r3, [sp, #0x18]
  00e4c	e2833010	 add         r3, r3, #0x10
  00e50	e5933000	 ldr         r3, [r3]
  00e54	e3530c0f	 cmp         r3, #0xF, 24
  00e58	1a00000c	 bne         |$LN28@HalCreateS|
  00e5c	e59d3018	 ldr         r3, [sp, #0x18]
  00e60	e2833014	 add         r3, r3, #0x14
  00e64	e5933000	 ldr         r3, [r3]
  00e68	e35300f0	 cmp         r3, #0xF0
  00e6c	1a000007	 bne         |$LN28@HalCreateS|
  00e70	e59d3018	 ldr         r3, [sp, #0x18]
  00e74	e2833018	 add         r3, r3, #0x18
  00e78	e5933000	 ldr         r3, [r3]
  00e7c	e353000f	 cmp         r3, #0xF
  00e80	1a000002	 bne         |$LN28@HalCreateS|

; 362  :                 {
; 363  :                     dssPixelFormat = OMAP_DSS_PIXELFORMAT_ARGB16;

  00e84	e3a03005	 mov         r3, #5
  00e88	e58d3028	 str         r3, [sp, #0x28]
  00e8c	ea000043	 b           |$LN27@HalCreateS|
  00e90		 |$LN28@HalCreateS|

; 364  :                 }
; 365  :                 else if( IsRGB32(pDDPixelFormat) )

  00e90	e59d3018	 ldr         r3, [sp, #0x18]
  00e94	e283301c	 add         r3, r3, #0x1C
  00e98	e5933000	 ldr         r3, [r3]
  00e9c	e3530000	 cmp         r3, #0
  00ea0	1a000011	 bne         |$LN26@HalCreateS|
  00ea4	e59d3018	 ldr         r3, [sp, #0x18]
  00ea8	e2833010	 add         r3, r3, #0x10
  00eac	e5933000	 ldr         r3, [r3]
  00eb0	e35308ff	 cmp         r3, #0xFF, 16
  00eb4	1a00000c	 bne         |$LN26@HalCreateS|
  00eb8	e59d3018	 ldr         r3, [sp, #0x18]
  00ebc	e2833014	 add         r3, r3, #0x14
  00ec0	e5933000	 ldr         r3, [r3]
  00ec4	e3530cff	 cmp         r3, #0xFF, 24
  00ec8	1a000007	 bne         |$LN26@HalCreateS|
  00ecc	e59d3018	 ldr         r3, [sp, #0x18]
  00ed0	e2833018	 add         r3, r3, #0x18
  00ed4	e5933000	 ldr         r3, [r3]
  00ed8	e35300ff	 cmp         r3, #0xFF
  00edc	1a000002	 bne         |$LN26@HalCreateS|

; 366  :                 {
; 367  :                     dssPixelFormat = OMAP_DSS_PIXELFORMAT_RGB32;

  00ee0	e3a03008	 mov         r3, #8
  00ee4	e58d3028	 str         r3, [sp, #0x28]
  00ee8	ea00002c	 b           |$LN25@HalCreateS|
  00eec		 |$LN26@HalCreateS|

; 368  :                 }
; 369  :                 else if( IsARGB32(pDDPixelFormat) )

  00eec	e59d3018	 ldr         r3, [sp, #0x18]
  00ef0	e283301c	 add         r3, r3, #0x1C
  00ef4	e5933000	 ldr         r3, [r3]
  00ef8	e35304ff	 cmp         r3, #0xFF, 8
  00efc	1a000011	 bne         |$LN24@HalCreateS|
  00f00	e59d3018	 ldr         r3, [sp, #0x18]
  00f04	e2833010	 add         r3, r3, #0x10
  00f08	e5933000	 ldr         r3, [r3]
  00f0c	e35308ff	 cmp         r3, #0xFF, 16
  00f10	1a00000c	 bne         |$LN24@HalCreateS|
  00f14	e59d3018	 ldr         r3, [sp, #0x18]
  00f18	e2833014	 add         r3, r3, #0x14
  00f1c	e5933000	 ldr         r3, [r3]
  00f20	e3530cff	 cmp         r3, #0xFF, 24
  00f24	1a000007	 bne         |$LN24@HalCreateS|
  00f28	e59d3018	 ldr         r3, [sp, #0x18]
  00f2c	e2833018	 add         r3, r3, #0x18
  00f30	e5933000	 ldr         r3, [r3]
  00f34	e35300ff	 cmp         r3, #0xFF
  00f38	1a000002	 bne         |$LN24@HalCreateS|

; 370  :                 {
; 371  :                     dssPixelFormat = OMAP_DSS_PIXELFORMAT_ARGB32;

  00f3c	e3a0300c	 mov         r3, #0xC
  00f40	e58d3028	 str         r3, [sp, #0x28]
  00f44	ea000015	 b           |$LN23@HalCreateS|
  00f48		 |$LN24@HalCreateS|

; 372  :                 }
; 373  :                 else if( IsRGBA32(pDDPixelFormat) )

  00f48	e59d3018	 ldr         r3, [sp, #0x18]
  00f4c	e283301c	 add         r3, r3, #0x1C
  00f50	e5933000	 ldr         r3, [r3]
  00f54	e35300ff	 cmp         r3, #0xFF
  00f58	1a000010	 bne         |$LN22@HalCreateS|
  00f5c	e59d3018	 ldr         r3, [sp, #0x18]
  00f60	e2833010	 add         r3, r3, #0x10
  00f64	e5933000	 ldr         r3, [r3]
  00f68	e35304ff	 cmp         r3, #0xFF, 8
  00f6c	1a00000b	 bne         |$LN22@HalCreateS|
  00f70	e59d3018	 ldr         r3, [sp, #0x18]
  00f74	e2833014	 add         r3, r3, #0x14
  00f78	e5933000	 ldr         r3, [r3]
  00f7c	e35308ff	 cmp         r3, #0xFF, 16
  00f80	1a000006	 bne         |$LN22@HalCreateS|
  00f84	e59d3018	 ldr         r3, [sp, #0x18]
  00f88	e2833018	 add         r3, r3, #0x18
  00f8c	e5933000	 ldr         r3, [r3]
  00f90	e3530cff	 cmp         r3, #0xFF, 24
  00f94	1a000001	 bne         |$LN22@HalCreateS|

; 374  :                 {
; 375  :                     dssPixelFormat = OMAP_DSS_PIXELFORMAT_RGBA32;

  00f98	e3a0300d	 mov         r3, #0xD
  00f9c	e58d3028	 str         r3, [sp, #0x28]
  00fa0		 |$LN22@HalCreateS|
  00fa0		 |$LN23@HalCreateS|
  00fa0		 |$LN25@HalCreateS|
  00fa0		 |$LN27@HalCreateS|
  00fa0		 |$LN29@HalCreateS|
  00fa0		 |$LN32@HalCreateS|
  00fa0		 |$LN33@HalCreateS|

; 376  :                 }
; 377  :             }
; 378  :         }
; 379  : 
; 380  :         //  If the pixel format is supported, create some surfaces
; 381  :         if( dssPixelFormat != OMAP_DSS_PIXELFORMAT_UNKNOWN )

  00fa0	e59d3028	 ldr         r3, [sp, #0x28]
  00fa4	e3730001	 cmn         r3, #1
  00fa8	0a00010d	 beq         |$LN21@HalCreateS|

; 382  :         {
; 383  :             OMAPDDGPESurface*   pParent = NULL;

  00fac	e3a03000	 mov         r3, #0
  00fb0	e58d302c	 str         r3, [sp, #0x2C]

; 384  : 
; 385  :             for( iSurf = 0; iSurf < pd->dwSCnt; iSurf++ )

  00fb4	e3a03000	 mov         r3, #0
  00fb8	e58d3008	 str         r3, [sp, #8]
  00fbc	ea000002	 b           |$LN20@HalCreateS|
  00fc0		 |$LN19@HalCreateS|
  00fc0	e59d3008	 ldr         r3, [sp, #8]
  00fc4	e2833001	 add         r3, r3, #1
  00fc8	e58d3008	 str         r3, [sp, #8]
  00fcc		 |$LN20@HalCreateS|
  00fcc	e59d30f8	 ldr         r3, [sp, #0xF8]
  00fd0	e2833008	 add         r3, r3, #8
  00fd4	e59d2008	 ldr         r2, [sp, #8]
  00fd8	e5933000	 ldr         r3, [r3]
  00fdc	e1520003	 cmp         r2, r3
  00fe0	2a0000fa	 bcs         |$LN18@HalCreateS|

; 386  :             {
; 387  :                 SCODE               scResult;
; 388  :                 OMAPDDGPESurface*   pSurface;
; 389  : 
; 390  :                 //  Initialize surface object
; 391  :                 pSurf = pd->lplpSList[iSurf];

  00fe4	e59d30f8	 ldr         r3, [sp, #0xF8]
  00fe8	e283000c	 add         r0, r3, #0xC
  00fec	e59d1008	 ldr         r1, [sp, #8]
  00ff0	e3a03004	 mov         r3, #4
  00ff4	e0020391	 mul         r2, r1, r3
  00ff8	e5903000	 ldr         r3, [r0]
  00ffc	e0833002	 add         r3, r3, r2
  01000	e5933000	 ldr         r3, [r3]
  01004	e58d3010	 str         r3, [sp, #0x10]

; 392  :                 pSurf->dwReserved1 = 0;

  01008	e59d3010	 ldr         r3, [sp, #0x10]
  0100c	e2832010	 add         r2, r3, #0x10
  01010	e3a03000	 mov         r3, #0
  01014	e5823000	 str         r3, [r2]

; 393  : 
; 394  :                 //  Allocate a back buffer to the primary surface
; 395  :                 scResult = pDDGPE->AllocSurface(
; 396  :                                         &pSurface,
; 397  :                                         dssPixelFormat,
; 398  :                                         pd->lpDDSurfaceDesc->dwWidth,
; 399  :                                         pd->lpDDSurfaceDesc->dwHeight
; 400  :                                         );

  01018	e59d30f8	 ldr         r3, [sp, #0xF8]
  0101c	e2833004	 add         r3, r3, #4
  01020	e5933000	 ldr         r3, [r3]
  01024	e2833008	 add         r3, r3, #8
  01028	e5933000	 ldr         r3, [r3]
  0102c	e58d3000	 str         r3, [sp]
  01030	e59d30f8	 ldr         r3, [sp, #0xF8]
  01034	e2833004	 add         r3, r3, #4
  01038	e5933000	 ldr         r3, [r3]
  0103c	e283300c	 add         r3, r3, #0xC
  01040	e5933000	 ldr         r3, [r3]
  01044	e59d2028	 ldr         r2, [sp, #0x28]
  01048	e28d1034	 add         r1, sp, #0x34
  0104c	e59d000c	 ldr         r0, [sp, #0xC]
  01050	e5900000	 ldr         r0, [r0]
  01054	e280e0f4	 add         lr, r0, #0xF4
  01058	e59d000c	 ldr         r0, [sp, #0xC]
  0105c	e59e4000	 ldr         r4, [lr]
  01060	e1a0e00f	 mov         lr, pc
  01064	e12fff14	 bx          r4
  01068	e58d00a0	 str         r0, [sp, #0xA0]
  0106c	e59d30a0	 ldr         r3, [sp, #0xA0]
  01070	e58d3030	 str         r3, [sp, #0x30]

; 401  :                 if (scResult != S_OK)

  01074	e59d3030	 ldr         r3, [sp, #0x30]
  01078	e3530000	 cmp         r3, #0
  0107c	0a00000d	 beq         |$LN17@HalCreateS|

; 402  :                 {
; 403  :                     RETAILMSG (1, (L"ERROR: Unable to allocate surface\r\n"));

  01080	e59f04a4	 ldr         r0, [pc, #0x4A4]
  01084	eb000000	 bl          NKDbgPrintfW
  01088	e3a03001	 mov         r3, #1
  0108c	e58d30a4	 str         r3, [sp, #0xA4]
  01090	ea000001	 b           |$LN61@HalCreateS|
  01094	e3a03000	 mov         r3, #0
  01098	e58d30a4	 str         r3, [sp, #0xA4]
  0109c		 |$LN61@HalCreateS|

; 404  :                     pd->ddRVal = DDERR_OUTOFVIDEOMEMORY;

  0109c	e59d30f8	 ldr         r3, [sp, #0xF8]
  010a0	e2832010	 add         r2, r3, #0x10
  010a4	e59f3474	 ldr         r3, [pc, #0x474]
  010a8	e5823000	 str         r3, [r2]
  010ac	ea0000d0	 b           |$LN16@HalCreateS|

; 405  :                     goto cleanUp;

  010b0	ea0000cf	 b           |$cleanUp$42164|

; 406  :                 }
; 407  : 				else

  010b4	ea00001b	 b           |$LN15@HalCreateS|
  010b8		 |$LN17@HalCreateS|

; 408  : 				{
; 409  : 					DEBUGMSG(GPE_ZONE_DDRAW_HAL, (L"allocate surface 0x%x\r\n",pSurface->OmapSurface()->PhysicalAddr()));

  010b8	e59f3454	 ldr         r3, [pc, #0x454]
  010bc	e5933440	 ldr         r3, [r3, #0x440]
  010c0	e3130902	 tst         r3, #2, 18
  010c4	0a000015	 beq         |$LN62@HalCreateS|
  010c8	e59d0034	 ldr         r0, [sp, #0x34]
  010cc	eb000000	 bl          |?OmapSurface@OMAPDDGPESurface@@QAAPAVOMAPSurface@@XZ|
  010d0	e58d00a8	 str         r0, [sp, #0xA8]
  010d4	e59d30a8	 ldr         r3, [sp, #0xA8]
  010d8	e58d30ac	 str         r3, [sp, #0xAC]
  010dc	e3a03000	 mov         r3, #0
  010e0	e3a02000	 mov         r2, #0
  010e4	e3a01000	 mov         r1, #0
  010e8	e59d00ac	 ldr         r0, [sp, #0xAC]
  010ec	e59de0ac	 ldr         lr, [sp, #0xAC]
  010f0	e59ee000	 ldr         lr, [lr]
  010f4	e28ee014	 add         lr, lr, #0x14
  010f8	e59e4000	 ldr         r4, [lr]
  010fc	e1a0e00f	 mov         lr, pc
  01100	e12fff14	 bx          r4
  01104	e58d00b0	 str         r0, [sp, #0xB0]
  01108	e59d10b0	 ldr         r1, [sp, #0xB0]
  0110c	e59f0414	 ldr         r0, [pc, #0x414]
  01110	eb000000	 bl          NKDbgPrintfW
  01114	e3a03001	 mov         r3, #1
  01118	e58d30b4	 str         r3, [sp, #0xB4]
  0111c	ea000001	 b           |$LN63@HalCreateS|
  01120		 |$LN62@HalCreateS|
  01120	e3a03000	 mov         r3, #0
  01124	e58d30b4	 str         r3, [sp, #0xB4]
  01128		 |$LN63@HalCreateS|
  01128		 |$LN15@HalCreateS|

; 410  : 				}
; 411  :                 
; 412  :                 //  Configure created surface
; 413  :                 pSurf->dwReserved1 = (DWORD) pSurface;

  01128	e59d3010	 ldr         r3, [sp, #0x10]
  0112c	e2832010	 add         r2, r3, #0x10
  01130	e59d3034	 ldr         r3, [sp, #0x34]
  01134	e5823000	 str         r3, [r2]

; 414  :                 pSurf->ddsCaps.dwCaps |= DDSCAPS_VIDEOMEMORY;

  01138	e59d3010	 ldr         r3, [sp, #0x10]
  0113c	e2833008	 add         r3, r3, #8
  01140	e5933000	 ldr         r3, [r3]
  01144	e3832c01	 orr         r2, r3, #1, 24
  01148	e59d3010	 ldr         r3, [sp, #0x10]
  0114c	e2833008	 add         r3, r3, #8
  01150	e5832000	 str         r2, [r3]

; 415  :                 pSurface->lpDDSurface = pSurf;

  01154	e59d3034	 ldr         r3, [sp, #0x34]
  01158	e2832064	 add         r2, r3, #0x64
  0115c	e59d3010	 ldr         r3, [sp, #0x10]
  01160	e5823000	 str         r3, [r2]

; 416  :                 
; 417  :                 if( pDDSCaps->dwCaps & DDSCAPS_OVERLAY )

  01164	e59d3004	 ldr         r3, [sp, #4]
  01168	e5933000	 ldr         r3, [r3]
  0116c	e3130010	 tst         r3, #0x10
  01170	0a000044	 beq         |$LN14@HalCreateS|

; 418  :                 {                    
; 419  :                     pSurface->SetOverlay();

  01174	e59d0034	 ldr         r0, [sp, #0x34]
  01178	eb000000	 bl          |?SetOverlay@DDGPESurf@@QAAXXZ|

; 420  :                     /* allocate assoc bufs - to be used by backend processes such as ISP resizer */
; 421  :                     scResult = pDDGPE->AllocSurface(
; 422  :                                         pSurface,
; 423  :                                         dssPixelFormat,
; 424  :                                         pd->lpDDSurfaceDesc->dwWidth,
; 425  :                                         pd->lpDDSurfaceDesc->dwHeight
; 426  :                                         );

  0117c	e59d30f8	 ldr         r3, [sp, #0xF8]
  01180	e2833004	 add         r3, r3, #4
  01184	e5933000	 ldr         r3, [r3]
  01188	e2833008	 add         r3, r3, #8
  0118c	e5933000	 ldr         r3, [r3]
  01190	e58d3000	 str         r3, [sp]
  01194	e59d30f8	 ldr         r3, [sp, #0xF8]
  01198	e2833004	 add         r3, r3, #4
  0119c	e5933000	 ldr         r3, [r3]
  011a0	e283300c	 add         r3, r3, #0xC
  011a4	e5933000	 ldr         r3, [r3]
  011a8	e59d2028	 ldr         r2, [sp, #0x28]
  011ac	e59d1034	 ldr         r1, [sp, #0x34]
  011b0	e59d000c	 ldr         r0, [sp, #0xC]
  011b4	eb000000	 bl          |?AllocSurface@OMAPDDGPE@@QAAJPAVOMAPDDGPESurface@@W4OMAP_DSS_PIXELFORMAT@@HH@Z|
  011b8	e58d00b8	 str         r0, [sp, #0xB8]
  011bc	e59d30b8	 ldr         r3, [sp, #0xB8]
  011c0	e58d3030	 str         r3, [sp, #0x30]

; 427  :                     if (scResult == DDERR_OUTOFVIDEOMEMORY)

  011c4	e59d2030	 ldr         r2, [sp, #0x30]
  011c8	e59f3350	 ldr         r3, [pc, #0x350]
  011cc	e1520003	 cmp         r2, r3
  011d0	1a00000d	 bne         |$LN13@HalCreateS|

; 428  :                     {
; 429  :                         RETAILMSG (1, (L"ERROR: Unable to allocate RSZ surface\r\n"));

  011d4	e59f0348	 ldr         r0, [pc, #0x348]
  011d8	eb000000	 bl          NKDbgPrintfW
  011dc	e3a03001	 mov         r3, #1
  011e0	e58d30bc	 str         r3, [sp, #0xBC]
  011e4	ea000001	 b           |$LN65@HalCreateS|
  011e8	e3a03000	 mov         r3, #0
  011ec	e58d30bc	 str         r3, [sp, #0xBC]
  011f0		 |$LN65@HalCreateS|

; 430  :                         pd->ddRVal = DDERR_OUTOFVIDEOMEMORY;

  011f0	e59d30f8	 ldr         r3, [sp, #0xF8]
  011f4	e2832010	 add         r2, r3, #0x10
  011f8	e59f3320	 ldr         r3, [pc, #0x320]
  011fc	e5823000	 str         r3, [r2]
  01200	ea00007b	 b           |$LN12@HalCreateS|

; 431  :                         goto cleanUp;

  01204	ea00007a	 b           |$cleanUp$42164|
  01208	ea00001e	 b           |$LN11@HalCreateS|
  0120c		 |$LN13@HalCreateS|

; 432  :                     }
; 433  : 					else if (scResult == S_OK)

  0120c	e59d3030	 ldr         r3, [sp, #0x30]
  01210	e3530000	 cmp         r3, #0
  01214	1a00001b	 bne         |$LN10@HalCreateS|

; 434  : 					{
; 435  : 						DEBUGMSG(GPE_ZONE_DDRAW_HAL, (L"allocate RSZ surface 0x%x\r\n",pSurface->OmapAssocSurface()->PhysicalAddr(OMAP_DSS_ROTATION_0,0,OMAP_ASSOC_SURF_FORCE_OFF)));

  01218	e59f32f4	 ldr         r3, [pc, #0x2F4]
  0121c	e5933440	 ldr         r3, [r3, #0x440]
  01220	e3130902	 tst         r3, #2, 18
  01224	0a000015	 beq         |$LN66@HalCreateS|
  01228	e59d0034	 ldr         r0, [sp, #0x34]
  0122c	eb000000	 bl          |?OmapAssocSurface@OMAPDDGPESurface@@QAAPAVOMAPSurface@@XZ|
  01230	e58d00c0	 str         r0, [sp, #0xC0]
  01234	e59d30c0	 ldr         r3, [sp, #0xC0]
  01238	e58d30c4	 str         r3, [sp, #0xC4]
  0123c	e3a03001	 mov         r3, #1
  01240	e3a02000	 mov         r2, #0
  01244	e3a01000	 mov         r1, #0
  01248	e59d00c4	 ldr         r0, [sp, #0xC4]
  0124c	e59de0c4	 ldr         lr, [sp, #0xC4]
  01250	e59ee000	 ldr         lr, [lr]
  01254	e28ee014	 add         lr, lr, #0x14
  01258	e59e4000	 ldr         r4, [lr]
  0125c	e1a0e00f	 mov         lr, pc
  01260	e12fff14	 bx          r4
  01264	e58d00c8	 str         r0, [sp, #0xC8]
  01268	e59d10c8	 ldr         r1, [sp, #0xC8]
  0126c	e59f02a8	 ldr         r0, [pc, #0x2A8]
  01270	eb000000	 bl          NKDbgPrintfW
  01274	e3a03001	 mov         r3, #1
  01278	e58d30cc	 str         r3, [sp, #0xCC]
  0127c	ea000001	 b           |$LN67@HalCreateS|
  01280		 |$LN66@HalCreateS|
  01280	e3a03000	 mov         r3, #0
  01284	e58d30cc	 str         r3, [sp, #0xCC]
  01288		 |$LN67@HalCreateS|
  01288		 |$LN10@HalCreateS|
  01288		 |$LN11@HalCreateS|
  01288		 |$LN14@HalCreateS|

; 436  : 					}
; 437  :                     else
; 438  :                     {
; 439  :                         /* other reasons - no need to log */
; 440  :                     }
; 441  :                 }
; 442  :                 
; 443  :                 //  Update surface description attributes to reflect the created surface
; 444  :                 //  All back buffer surfaces will match first surface in chain
; 445  :                 if( iSurf == 0 )

  01288	e59d3008	 ldr         r3, [sp, #8]
  0128c	e3530000	 cmp         r3, #0
  01290	1a000045	 bne         |$LN8@HalCreateS|

; 446  :                 {
; 447  :                     pd->lpDDSurfaceDesc->ddsCaps.dwCaps |= DDSCAPS_VIDEOMEMORY;

  01294	e59d30f8	 ldr         r3, [sp, #0xF8]
  01298	e2833004	 add         r3, r3, #4
  0129c	e5933000	 ldr         r3, [r3]
  012a0	e2833064	 add         r3, r3, #0x64
  012a4	e5933000	 ldr         r3, [r3]
  012a8	e3832c01	 orr         r2, r3, #1, 24
  012ac	e59d30f8	 ldr         r3, [sp, #0xF8]
  012b0	e2833004	 add         r3, r3, #4
  012b4	e5933000	 ldr         r3, [r3]
  012b8	e2833064	 add         r3, r3, #0x64
  012bc	e5832000	 str         r2, [r3]

; 448  :                     pd->lpDDSurfaceDesc->dwFlags        |= DDSD_PITCH|DDSD_XPITCH|DDSD_SURFACESIZE;

  012c0	e59d30f8	 ldr         r3, [sp, #0xF8]
  012c4	e2833004	 add         r3, r3, #4
  012c8	e5933000	 ldr         r3, [r3]
  012cc	e2833004	 add         r3, r3, #4
  012d0	e5932000	 ldr         r2, [r3]
  012d4	e3a03702	 mov         r3, #2, 14
  012d8	e3833018	 orr         r3, r3, #0x18
  012dc	e1822003	 orr         r2, r2, r3
  012e0	e59d30f8	 ldr         r3, [sp, #0xF8]
  012e4	e2833004	 add         r3, r3, #4
  012e8	e5933000	 ldr         r3, [r3]
  012ec	e2833004	 add         r3, r3, #4
  012f0	e5832000	 str         r2, [r3]

; 449  :                     pd->lpDDSurfaceDesc->lPitch         = pSurface->OmapSurface()->Stride();

  012f4	e59d0034	 ldr         r0, [sp, #0x34]
  012f8	eb000000	 bl          |?OmapSurface@OMAPDDGPESurface@@QAAPAVOMAPSurface@@XZ|
  012fc	e58d00d0	 str         r0, [sp, #0xD0]
  01300	e59d30d0	 ldr         r3, [sp, #0xD0]
  01304	e58d30d4	 str         r3, [sp, #0xD4]
  01308	e3a01000	 mov         r1, #0
  0130c	e59d00d4	 ldr         r0, [sp, #0xD4]
  01310	e59d30d4	 ldr         r3, [sp, #0xD4]
  01314	e5933000	 ldr         r3, [r3]
  01318	e2833010	 add         r3, r3, #0x10
  0131c	e5933000	 ldr         r3, [r3]
  01320	e1a0e00f	 mov         lr, pc
  01324	e12fff13	 bx          r3
  01328	e58d00d8	 str         r0, [sp, #0xD8]
  0132c	e59d30f8	 ldr         r3, [sp, #0xF8]
  01330	e2833004	 add         r3, r3, #4
  01334	e5933000	 ldr         r3, [r3]
  01338	e2832010	 add         r2, r3, #0x10
  0133c	e59d30d8	 ldr         r3, [sp, #0xD8]
  01340	e5823000	 str         r3, [r2]

; 450  :                     pd->lpDDSurfaceDesc->lXPitch        = pSurface->BytesPerPixel();

  01344	e59d0034	 ldr         r0, [sp, #0x34]
  01348	eb000000	 bl          |?BytesPerPixel@GPESurf@@QAAHXZ|
  0134c	e58d00dc	 str         r0, [sp, #0xDC]
  01350	e59d30f8	 ldr         r3, [sp, #0xF8]
  01354	e2833004	 add         r3, r3, #4
  01358	e5933000	 ldr         r3, [r3]
  0135c	e2832014	 add         r2, r3, #0x14
  01360	e59d30dc	 ldr         r3, [sp, #0xDC]
  01364	e5823000	 str         r3, [r2]

; 451  :                     pd->lpDDSurfaceDesc->dwSurfaceSize  = pSurface->SurfaceSize();            

  01368	e59d3034	 ldr         r3, [sp, #0x34]
  0136c	e5933000	 ldr         r3, [r3]
  01370	e2833044	 add         r3, r3, #0x44
  01374	e59d0034	 ldr         r0, [sp, #0x34]
  01378	e5933000	 ldr         r3, [r3]
  0137c	e1a0e00f	 mov         lr, pc
  01380	e12fff13	 bx          r3
  01384	e58d00e0	 str         r0, [sp, #0xE0]
  01388	e59d30f8	 ldr         r3, [sp, #0xF8]
  0138c	e2833004	 add         r3, r3, #4
  01390	e5933000	 ldr         r3, [r3]
  01394	e2832068	 add         r2, r3, #0x68
  01398	e59d30e0	 ldr         r3, [sp, #0xE0]
  0139c	e5823000	 str         r3, [r2]

; 452  :                     
; 453  :                     pParent = pSurface;

  013a0	e59d3034	 ldr         r3, [sp, #0x34]
  013a4	e58d302c	 str         r3, [sp, #0x2C]

; 454  :                 }
; 455  :                 else

  013a8	ea000002	 b           |$LN7@HalCreateS|
  013ac		 |$LN8@HalCreateS|

; 456  :                 {
; 457  :                     //  Parent surface for back buffer chain is the first surface created
; 458  :                     pSurface->SetParent( pParent );

  013ac	e59d102c	 ldr         r1, [sp, #0x2C]
  013b0	e59d0034	 ldr         r0, [sp, #0x34]
  013b4	eb000000	 bl          |?SetParent@OMAPDDGPESurface@@QAAXPAV1@@Z|
  013b8		 |$LN7@HalCreateS|

; 459  :                 }
; 460  :                 
; 461  :                 g_dwSurfaceCount++;

  013b8	e59f3150	 ldr         r3, [pc, #0x150]
  013bc	e5933000	 ldr         r3, [r3]
  013c0	e2832001	 add         r2, r3, #1
  013c4	e59f3144	 ldr         r3, [pc, #0x144]
  013c8	e5832000	 str         r2, [r3]

; 462  :             }

  013cc	eafffefb	 b           |$LN19@HalCreateS|
  013d0		 |$LN18@HalCreateS|

; 463  :             
; 464  :             //  Surface creation complete
; 465  :             pd->ddRVal = DD_OK;

  013d0	e59d30f8	 ldr         r3, [sp, #0xF8]
  013d4	e2832010	 add         r2, r3, #0x10
  013d8	e3a03000	 mov         r3, #0
  013dc	e5823000	 str         r3, [r2]

; 466  :         }
; 467  :         else

  013e0	ea000003	 b           |$LN6@HalCreateS|
  013e4		 |$LN21@HalCreateS|

; 468  :         {
; 469  :             pd->ddRVal = DDERR_UNSUPPORTEDFORMAT;

  013e4	e59d30f8	 ldr         r3, [sp, #0xF8]
  013e8	e2832010	 add         r2, r3, #0x10
  013ec	e59f3124	 ldr         r3, [pc, #0x124]
  013f0	e5823000	 str         r3, [r2]
  013f4		 |$LN6@HalCreateS|
  013f4		 |$LN40@HalCreateS|
  013f4		 |$LN42@HalCreateS|
  013f4		 |$LN44@HalCreateS|
  013f4		 |$LN12@HalCreateS|
  013f4		 |$LN16@HalCreateS|
  013f4		 |$LN45@HalCreateS|
  013f4		 |$cleanUp$42164|

; 470  :         }
; 471  :     }
; 472  : 
; 473  :   
; 474  : cleanUp:
; 475  :     //  Clean up any allocations that were successful on a failure condition
; 476  :     if( pd->ddRVal != DD_OK )

  013f4	e59d30f8	 ldr         r3, [sp, #0xF8]
  013f8	e2833010	 add         r3, r3, #0x10
  013fc	e5933000	 ldr         r3, [r3]
  01400	e3530000	 cmp         r3, #0
  01404	0a000027	 beq         |$LN5@HalCreateS|

; 477  :     {
; 478  :         unsigned int    i;
; 479  :         for( i = 0; i < iSurf; i++ )

  01408	e3a03000	 mov         r3, #0
  0140c	e58d3038	 str         r3, [sp, #0x38]
  01410	ea000002	 b           |$LN4@HalCreateS|
  01414		 |$LN3@HalCreateS|
  01414	e59d3038	 ldr         r3, [sp, #0x38]
  01418	e2833001	 add         r3, r3, #1
  0141c	e58d3038	 str         r3, [sp, #0x38]
  01420		 |$LN4@HalCreateS|
  01420	e59d2038	 ldr         r2, [sp, #0x38]
  01424	e59d3008	 ldr         r3, [sp, #8]
  01428	e1520003	 cmp         r2, r3
  0142c	2a00001d	 bcs         |$LN2@HalCreateS|

; 480  :         {
; 481  :             pSurf = pd->lplpSList[i];

  01430	e59d30f8	 ldr         r3, [sp, #0xF8]
  01434	e283000c	 add         r0, r3, #0xC
  01438	e59d1038	 ldr         r1, [sp, #0x38]
  0143c	e3a03004	 mov         r3, #4
  01440	e0020391	 mul         r2, r1, r3
  01444	e5903000	 ldr         r3, [r0]
  01448	e0833002	 add         r3, r3, r2
  0144c	e5933000	 ldr         r3, [r3]
  01450	e58d3010	 str         r3, [sp, #0x10]

; 482  : 
; 483  :             //  Delete allocated surfaces (except for primary)
; 484  :             if( (pSurf->dwReserved1 != 0) && (pSurf->dwReserved1 != (DWORD) pDDGPE->DDGPEPrimarySurface()) )

  01454	e59d3010	 ldr         r3, [sp, #0x10]
  01458	e2833010	 add         r3, r3, #0x10
  0145c	e5933000	 ldr         r3, [r3]
  01460	e3530000	 cmp         r3, #0
  01464	0a00000e	 beq         |$LN1@HalCreateS|
  01468	e59d000c	 ldr         r0, [sp, #0xC]
  0146c	eb000000	 bl          |?DDGPEPrimarySurface@DDGPE@@QAAPAVDDGPESurf@@XZ|
  01470	e58d00e4	 str         r0, [sp, #0xE4]
  01474	e59d3010	 ldr         r3, [sp, #0x10]
  01478	e2833010	 add         r3, r3, #0x10
  0147c	e5932000	 ldr         r2, [r3]
  01480	e59d30e4	 ldr         r3, [sp, #0xE4]
  01484	e1520003	 cmp         r2, r3
  01488	0a000005	 beq         |$LN1@HalCreateS|

; 485  :             {
; 486  :                 DDGPESurf::DeleteSurface(pSurf);

  0148c	e59d0010	 ldr         r0, [sp, #0x10]
  01490	eb000000	 bl          |?DeleteSurface@DDGPESurf@@SAXPAU_DDRAWI_DDRAWSURFACE_LCL@@@Z|

; 487  :                 pSurf->dwReserved1 = 0;

  01494	e59d3010	 ldr         r3, [sp, #0x10]
  01498	e2832010	 add         r2, r3, #0x10
  0149c	e3a03000	 mov         r3, #0
  014a0	e5823000	 str         r3, [r2]
  014a4		 |$LN1@HalCreateS|

; 488  :             }
; 489  :         }

  014a4	eaffffda	 b           |$LN3@HalCreateS|
  014a8		 |$LN2@HalCreateS|
  014a8		 |$LN5@HalCreateS|

; 490  :     }
; 491  :     
; 492  :         
; 493  :     DumpDD_CREATESURFACE(pd);

  014a8	e59d00f8	 ldr         r0, [sp, #0xF8]
  014ac	eb000000	 bl          |?DumpDD_CREATESURFACE@@YAXPAU_DDHAL_CREATESURFACEDATA@@@Z|

; 494  :     
; 495  :     DEBUGMSG(GPE_ZONE_DDRAW_HAL, (L"-HalCreateSurface() result = 0x%x  pd->ddRVal = 0x%x  surface count = %d\r\n\r\n", result, pd->ddRVal, g_dwSurfaceCount));

  014b0	e59f305c	 ldr         r3, [pc, #0x5C]
  014b4	e5933440	 ldr         r3, [r3, #0x440]
  014b8	e3130902	 tst         r3, #2, 18
  014bc	0a00000a	 beq         |$LN68@HalCreateS|
  014c0	e59f3048	 ldr         r3, [pc, #0x48]
  014c4	e5933000	 ldr         r3, [r3]
  014c8	e59d20f8	 ldr         r2, [sp, #0xF8]
  014cc	e2822010	 add         r2, r2, #0x10
  014d0	e5922000	 ldr         r2, [r2]
  014d4	e59d1014	 ldr         r1, [sp, #0x14]
  014d8	e59f002c	 ldr         r0, [pc, #0x2C]
  014dc	eb000000	 bl          NKDbgPrintfW
  014e0	e3a03001	 mov         r3, #1
  014e4	e58d30e8	 str         r3, [sp, #0xE8]
  014e8	ea000001	 b           |$LN69@HalCreateS|
  014ec		 |$LN68@HalCreateS|
  014ec	e3a03000	 mov         r3, #0
  014f0	e58d30e8	 str         r3, [sp, #0xE8]
  014f4		 |$LN69@HalCreateS|

; 496  :     
; 497  :     return result;

  014f4	e59d3014	 ldr         r3, [sp, #0x14]
  014f8	e58d3048	 str         r3, [sp, #0x48]

; 498  : }

  014fc	e59d0048	 ldr         r0, [sp, #0x48]
  01500	e28dd0ec	 add         sp, sp, #0xEC
  01504	e89d6010	 ldmia       sp, {r4, sp, lr}
  01508	e12fff1e	 bx          lr
  0150c		 |$LN73@HalCreateS|
  0150c		 |$LN74@HalCreateS|
  0150c	00000000	 DCD         |??_C@_1JK@KCLGKKGI@?$AA?9?$AAH?$AAa?$AAl?$AAC?$AAr?$AAe?$AAa?$AAt?$AAe?$AAS?$AAu?$AAr?$AAf?$AAa?$AAc?$AAe?$AA?$CI?$AA?$CJ?$AA?5?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF@|
  01510		 |$LN75@HalCreateS|
  01510	00000000	 DCD         |?g_dwSurfaceCount@@3KA|
  01514		 |$LN76@HalCreateS|
  01514	00000000	 DCD         |dpCurSettings|
  01518		 |$LN77@HalCreateS|
  01518	88760218	 DCD         0x88760218
  0151c		 |$LN78@HalCreateS|
  0151c	00000000	 DCD         |??_C@_1DI@NNHAJDOC@?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAR?$AAS?$AAZ?$AA?5?$AAs?$AAu?$AAr?$AAf?$AAa?$AAc?$AAe?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  01520		 |$LN79@HalCreateS|
  01520	8876017c	 DCD         0x8876017c
  01524		 |$LN80@HalCreateS|
  01524	00000000	 DCD         |??_C@_1FA@EEEPJNGE@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAR?$AAS?$AAZ?$AA?5?$AAs?$AAu@|
  01528		 |$LN81@HalCreateS|
  01528	00000000	 DCD         |??_C@_1DA@GHPLIKNC@?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAs?$AAu?$AAr?$AAf?$AAa?$AAc?$AAe?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  0152c		 |$LN82@HalCreateS|
  0152c	00000000	 DCD         |??_C@_1EI@KPAINJGL@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAs?$AAu?$AAr?$AAf?$AAa?$AAc@|
  01530		 |$LN83@HalCreateS|
  01530	59565955	 DCD         0x59565955
  01534		 |$LN84@HalCreateS|
  01534	55595659	 DCD         0x55595659
  01538		 |$LN85@HalCreateS|
  01538	32595559	 DCD         0x32595559
  0153c		 |$LN86@HalCreateS|
  0153c	56595559	 DCD         0x56595559
  01540		 |$LN87@HalCreateS|
  01540	00000000	 DCD         |??_C@_1HA@PGKMOPNF@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAp?$AAr?$AAi?$AAm?$AAa?$AAr@|
  01544		 |$LN88@HalCreateS|
  01544	00000000	 DCD         |??_C@_1GO@IDGOHJLN@?$AA?$CL?$AAH?$AAa?$AAl?$AAC?$AAr?$AAe?$AAa?$AAt?$AAe?$AAS?$AAu?$AAr?$AAf?$AAa?$AAc?$AAe?$AA?$CI?$AA?$CJ?$AA?5?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9@|
  01548		 |$M42580|

			 ENDP  ; |?HalCreateSurface@@YAKPAU_DDHAL_CREATESURFACEDATA@@@Z|, HalCreateSurface

; File c:\wince600\public\common\oak\inc\gpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T42604| DCD	|$LN5@BytesPerPi|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?BytesPerPixel@GPESurf@@QAAHXZ| PROC	; GPESurf::BytesPerPixel

; 183  :     {

  00000		 |$LN5@BytesPerPi|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M42601|

; 184  :         return m_BytesPixel;

  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e2833044	 add         r3, r3, #0x44
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3000	 str         r3, [sp]

; 185  :     }

  00020	e59d0000	 ldr         r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M42602|

			 ENDP  ; |?BytesPerPixel@GPESurf@@QAAHXZ|, GPESurf::BytesPerPixel

; File c:\wince600\public\common\oak\inc\ddgpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T42611| DCD	|$LN5@SetOverlay|
	DCD	0x40000903
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetOverlay@DDGPESurf@@QAAXXZ| PROC	; DDGPESurf::SetOverlay

; 318  : 	{

  00000		 |$LN5@SetOverlay|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M42608|

; 319  : 		m_bOverlay = TRUE; 

  0000c	e59d3008	 ldr         r3, [sp, #8]
  00010	e2832060	 add         r2, r3, #0x60
  00014	e3a03001	 mov         r3, #1
  00018	e5823000	 str         r3, [r2]

; 320  : 	}

  0001c	e89d6000	 ldmia       sp, {sp, lr}
  00020	e12fff1e	 bx          lr
  00024		 |$M42609|

			 ENDP  ; |?SetOverlay@DDGPESurf@@QAAXXZ|, DDGPESurf::SetOverlay

	EXPORT	|?PrimarySurface@GPE@@QAAPAVGPESurf@@XZ| ; GPE::PrimarySurface

  00000			 AREA	 |.pdata|, PDATA
|$T42619| DCD	|$LN5@DDGPEPrima|
	DCD	0x40000d04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DDGPEPrimarySurface@DDGPE@@QAAPAVDDGPESurf@@XZ| PROC ; DDGPE::DDGPEPrimarySurface

; 506  :     DDGPESurf * DDGPEPrimarySurface() {

  00000		 |$LN5@DDGPEPrima|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd008	 sub         sp, sp, #8
  00010		 |$M42616|

; 507  : #ifdef _CPPRTTI
; 508  : 
; 509  :         return (dynamic_cast<DDGPESurf *>(PrimarySurface()));
; 510  : #else
; 511  : 
; 512  :         // Not safe. Please compile with RTTI.
; 513  : 
; 514  :         return ((DDGPESurf *)PrimarySurface());

  00010	e59d0010	 ldr         r0, [sp, #0x10]
  00014	eb000000	 bl          |?PrimarySurface@GPE@@QAAPAVGPESurf@@XZ|
  00018	e58d0004	 str         r0, [sp, #4]
  0001c	e59d3004	 ldr         r3, [sp, #4]
  00020	e58d3000	 str         r3, [sp]

; 515  : #endif
; 516  :     }

  00024	e59d0000	 ldr         r0, [sp]
  00028	e28dd008	 add         sp, sp, #8
  0002c	e89d6000	 ldmia       sp, {sp, lr}
  00030	e12fff1e	 bx          lr
  00034		 |$M42617|

			 ENDP  ; |?DDGPEPrimarySurface@DDGPE@@QAAPAVDDGPESurf@@XZ|, DDGPE::DDGPEPrimarySurface

; File c:\wince600\public\common\oak\inc\gpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T42627| DCD	|$LN5@PrimarySur|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?PrimarySurface@GPE@@QAAPAVGPESurf@@XZ| PROC ; GPE::PrimarySurface

; 471  :     {

  00000		 |$LN5@PrimarySur|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M42624|

; 472  :         return m_pPrimarySurface;

  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e2833004	 add         r3, r3, #4
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3000	 str         r3, [sp]

; 473  :     }

  00020	e59d0000	 ldr         r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M42625|

			 ENDP  ; |?PrimarySurface@GPE@@QAAPAVGPESurf@@XZ|, GPE::PrimarySurface

; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\inc\dssai.h

  00000			 AREA	 |.pdata|, PDATA
|$T42635| DCD	|$LN5@PixelForma|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?PixelFormat@OMAPSurface@@QAA?AW4OMAP_DSS_PIXELFORMAT@@XZ| PROC ; OMAPSurface::PixelFormat

; 760  :     OMAP_DSS_PIXELFORMAT    PixelFormat() { return m_ePixelFormat; }

  00000		 |$LN5@PixelForma|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M42632|
  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e2833004	 add         r3, r3, #4
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3000	 str         r3, [sp]
  00020	e59d0000	 ldr         r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M42633|

			 ENDP  ; |?PixelFormat@OMAPSurface@@QAA?AW4OMAP_DSS_PIXELFORMAT@@XZ|, OMAPSurface::PixelFormat

; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\inc\omap_ddgpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T42643| DCD	|$LN5@OmapSurfac|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?OmapSurface@OMAPDDGPESurface@@QAAPAVOMAPSurface@@XZ| PROC ; OMAPDDGPESurface::OmapSurface

; 102  :     OMAPSurface*        OmapSurface() { return m_pSurface; }

  00000		 |$LN5@OmapSurfac|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M42640|
  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e283307c	 add         r3, r3, #0x7C
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3000	 str         r3, [sp]
  00020	e59d0000	 ldr         r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M42641|

			 ENDP  ; |?OmapSurface@OMAPDDGPESurface@@QAAPAVOMAPSurface@@XZ|, OMAPDDGPESurface::OmapSurface


  00000			 AREA	 |.pdata|, PDATA
|$T42650| DCD	|$LN5@SetParent|
	DCD	0x40000903
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetParent@OMAPDDGPESurface@@QAAXPAV1@@Z| PROC ; OMAPDDGPESurface::SetParent

; 105  :     VOID                SetParent( OMAPDDGPESurface* pParent ) { m_pParentSurface = pParent; }

  00000		 |$LN5@SetParent|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M42647|
  0000c	e59d3008	 ldr         r3, [sp, #8]
  00010	e2832084	 add         r2, r3, #0x84
  00014	e59d300c	 ldr         r3, [sp, #0xC]
  00018	e5823000	 str         r3, [r2]
  0001c	e89d6000	 ldmia       sp, {sp, lr}
  00020	e12fff1e	 bx          lr
  00024		 |$M42648|

			 ENDP  ; |?SetParent@OMAPDDGPESurface@@QAAXPAV1@@Z|, OMAPDDGPESurface::SetParent


  00000			 AREA	 |.pdata|, PDATA
|$T42658| DCD	|$LN5@OmapAssocS|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?OmapAssocSurface@OMAPDDGPESurface@@QAAPAVOMAPSurface@@XZ| PROC ; OMAPDDGPESurface::OmapAssocSurface

; 107  :     OMAPSurface*        OmapAssocSurface() { return m_pAssocSurface; }

  00000		 |$LN5@OmapAssocS|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M42655|
  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e2833080	 add         r3, r3, #0x80
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3000	 str         r3, [sp]
  00020	e59d0000	 ldr         r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M42656|

			 ENDP  ; |?OmapAssocSurface@OMAPDDGPESurface@@QAAPAVOMAPSurface@@XZ|, OMAPDDGPESurface::OmapAssocSurface

	EXPORT	|??_C@_1JK@EONJCLEJ@?$AA?9?$AAH?$AAa?$AAl?$AAD?$AAe?$AAs?$AAt?$AAr?$AAo?$AAy?$AAS?$AAu?$AAr?$AAf?$AAa?$AAc?$AAe?$AA?$CI?$AA?$CJ?$AA?5?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx@| [ DATA ] ; `string'
	EXPORT	|?Parent@OMAPDDGPESurface@@QAAPAV1@XZ|	; OMAPDDGPESurface::Parent
	EXPORT	|?IsOverlay@DDGPESurf@@QAAHXZ|		; DDGPESurf::IsOverlay
	EXPORT	|??_C@_1EO@ODKLNKFG@?$AAp?$AAd?$AA?9?$AA?$DO?$AAl?$AAp?$AAD?$AAD?$AAS?$AAu?$AAr?$AAf?$AAa?$AAc?$AAe?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?5?$AA?5?$AAp?$AAS?$AAu?$AAr?$AAf?$AA?5?$AA?$DN?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GI@DGGLIHGE@?$AA?$CL?$AAH?$AAa?$AAl?$AAD?$AAe?$AAs?$AAt?$AAr?$AAo?$AAy?$AAS?$AAu?$AAr?$AAf?$AAa?$AAc?$AAe?$AA?$CI?$AA?$CJ?$AA?5?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9@| [ DATA ] ; `string'
	EXPORT	|?HalDestroySurface@@YAKPAU_DDHAL_DESTROYSURFACEDATA@@@Z| ; HalDestroySurface
	IMPORT	|DDGPEDestroySurface|
	IMPORT	|?HideOverlay@OMAPDDGPE@@QAAKPAVOMAPDDGPESurface@@@Z| ; OMAPDDGPE::HideOverlay
	IMPORT	|?DisableAlphaConst@OMAPDDGPE@@QAAKXZ|	; OMAPDDGPE::DisableAlphaConst
	IMPORT	|?DisableColorKey@OMAPDDGPE@@QAAKXZ|	; OMAPDDGPE::DisableColorKey
	IMPORT	|?GetDDGPE@@YAPAVDDGPE@@XZ|		; GetDDGPE
	IMPORT	|?GetDDGPESurf@DDGPESurf@@SAPAV1@PAU_DDRAWI_DDRAWSURFACE_LCL@@@Z| ; DDGPESurf::GetDDGPESurf

  00018			 AREA	 |.pdata|, PDATA
|$T42672| DCD	|$LN14@HalDestroy|
	DCD	0x40007004
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\ddgpe\halsurf.cpp

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JK@EONJCLEJ@?$AA?9?$AAH?$AAa?$AAl?$AAD?$AAe?$AAs?$AAt?$AAr?$AAo?$AAy?$AAS?$AAu?$AAr?$AAf?$AAa?$AAc?$AAe?$AA?$CI?$AA?$CJ?$AA?5?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx@| DCB "-"
	DCB	0x0, "H", 0x0, "a", 0x0, "l", 0x0, "D", 0x0, "e", 0x0, "s"
	DCB	0x0, "t", 0x0, "r", 0x0, "o", 0x0, "y", 0x0, "S", 0x0, "u"
	DCB	0x0, "r", 0x0, "f", 0x0, "a", 0x0, "c", 0x0, "e", 0x0, "("
	DCB	0x0, ")", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "s", 0x0, "u"
	DCB	0x0, "l", 0x0, "t", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "x", 0x0, " ", 0x0, " ", 0x0, "p"
	DCB	0x0, "d", 0x0, "-", 0x0, ">", 0x0, "d", 0x0, "d", 0x0, "R"
	DCB	0x0, "V", 0x0, "a", 0x0, "l", 0x0, " ", 0x0, "=", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, " ", 0x0, "s"
	DCB	0x0, "u", 0x0, "r", 0x0, "f", 0x0, "a", 0x0, "c", 0x0, "e"
	DCB	0x0, " ", 0x0, "c", 0x0, "o", 0x0, "u", 0x0, "n", 0x0, "t"
	DCB	0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EO@ODKLNKFG@?$AAp?$AAd?$AA?9?$AA?$DO?$AAl?$AAp?$AAD?$AAD?$AAS?$AAu?$AAr?$AAf?$AAa?$AAc?$AAe?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?5?$AA?5?$AAp?$AAS?$AAu?$AAr?$AAf?$AA?5?$AA?$DN?$AA?5@| DCB "p"
	DCB	0x0, "d", 0x0, "-", 0x0, ">", 0x0, "l", 0x0, "p", 0x0, "D"
	DCB	0x0, "D", 0x0, "S", 0x0, "u", 0x0, "r", 0x0, "f", 0x0, "a"
	DCB	0x0, "c", 0x0, "e", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "x", 0x0, " ", 0x0, " ", 0x0, "p"
	DCB	0x0, "S", 0x0, "u", 0x0, "r", 0x0, "f", 0x0, " ", 0x0, "="
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GI@DGGLIHGE@?$AA?$CL?$AAH?$AAa?$AAl?$AAD?$AAe?$AAs?$AAt?$AAr?$AAo?$AAy?$AAS?$AAu?$AAr?$AAf?$AAa?$AAc?$AAe?$AA?$CI?$AA?$CJ?$AA?5?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9@| DCB "+"
	DCB	0x0, "H", 0x0, "a", 0x0, "l", 0x0, "D", 0x0, "e", 0x0, "s"
	DCB	0x0, "t", 0x0, "r", 0x0, "o", 0x0, "y", 0x0, "S", 0x0, "u"
	DCB	0x0, "r", 0x0, "f", 0x0, "a", 0x0, "c", 0x0, "e", 0x0, "("
	DCB	0x0, ")", 0x0, " ", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  01548			 AREA	 |.text|, CODE, ARM

  01548		 |?HalDestroySurface@@YAKPAU_DDHAL_DESTROYSURFACEDATA@@@Z| PROC ; HalDestroySurface

; 505  : {

  01548		 |$LN14@HalDestroy|
  01548	e1a0c00d	 mov         r12, sp
  0154c	e92d0001	 stmdb       sp!, {r0}
  01550	e92d5000	 stmdb       sp!, {r12, lr}
  01554	e24dd038	 sub         sp, sp, #0x38
  01558		 |$M42669|

; 506  :     DWORD               result;
; 507  :     OMAPDDGPE*          pDDGPE = (OMAPDDGPE*) GetGPE();

  01558	eb000000	 bl          GetGPE
  0155c	e58d0010	 str         r0, [sp, #0x10]
  01560	e59d3010	 ldr         r3, [sp, #0x10]
  01564	e58d3000	 str         r3, [sp]

; 508  :     OMAPDDGPESurface*   pSurf = (OMAPDDGPESurface*) DDGPESurf::GetDDGPESurf(pd->lpDDSurface);

  01568	e59d3040	 ldr         r3, [sp, #0x40]
  0156c	e2833004	 add         r3, r3, #4
  01570	e5930000	 ldr         r0, [r3]
  01574	eb000000	 bl          |?GetDDGPESurf@DDGPESurf@@SAPAV1@PAU_DDRAWI_DDRAWSURFACE_LCL@@@Z|
  01578	e58d0014	 str         r0, [sp, #0x14]
  0157c	e59d3014	 ldr         r3, [sp, #0x14]
  01580	e58d3004	 str         r3, [sp, #4]

; 509  :     
; 510  :     DEBUGMSG(GPE_ZONE_DDRAW_HAL, (L"+HalDestroySurface() ----------------------------\r\n"));

  01584	e59f3170	 ldr         r3, [pc, #0x170]
  01588	e5933440	 ldr         r3, [r3, #0x440]
  0158c	e3130902	 tst         r3, #2, 18
  01590	0a000004	 beq         |$LN6@HalDestroy|
  01594	e59f0168	 ldr         r0, [pc, #0x168]
  01598	eb000000	 bl          NKDbgPrintfW
  0159c	e3a03001	 mov         r3, #1
  015a0	e58d3018	 str         r3, [sp, #0x18]
  015a4	ea000001	 b           |$LN7@HalDestroy|
  015a8		 |$LN6@HalDestroy|
  015a8	e3a03000	 mov         r3, #0
  015ac	e58d3018	 str         r3, [sp, #0x18]
  015b0		 |$LN7@HalDestroy|

; 511  :     DEBUGMSG(GPE_ZONE_DDRAW_HAL, (L"pd->lpDDSurface = 0x%x  pSurf = 0x%x\r\n", pd->lpDDSurface, pSurf));

  015b0	e59f3144	 ldr         r3, [pc, #0x144]
  015b4	e5933440	 ldr         r3, [r3, #0x440]
  015b8	e3130902	 tst         r3, #2, 18
  015bc	0a000008	 beq         |$LN8@HalDestroy|
  015c0	e59d2004	 ldr         r2, [sp, #4]
  015c4	e59d3040	 ldr         r3, [sp, #0x40]
  015c8	e2833004	 add         r3, r3, #4
  015cc	e5931000	 ldr         r1, [r3]
  015d0	e59f0128	 ldr         r0, [pc, #0x128]
  015d4	eb000000	 bl          NKDbgPrintfW
  015d8	e3a03001	 mov         r3, #1
  015dc	e58d301c	 str         r3, [sp, #0x1C]
  015e0	ea000001	 b           |$LN9@HalDestroy|
  015e4		 |$LN8@HalDestroy|
  015e4	e3a03000	 mov         r3, #0
  015e8	e58d301c	 str         r3, [sp, #0x1C]
  015ec		 |$LN9@HalDestroy|

; 512  : 
; 513  :     //  If the primary surface is being destroyed, disable all color keys
; 514  :     if( pSurf == GetDDGPE()->PrimarySurface() )

  015ec	eb000000	 bl          |?GetDDGPE@@YAPAVDDGPE@@XZ|
  015f0	e58d0020	 str         r0, [sp, #0x20]
  015f4	e59d0020	 ldr         r0, [sp, #0x20]
  015f8	eb000000	 bl          |?PrimarySurface@GPE@@QAAPAVGPESurf@@XZ|
  015fc	e58d0024	 str         r0, [sp, #0x24]
  01600	e59d2004	 ldr         r2, [sp, #4]
  01604	e59d3024	 ldr         r3, [sp, #0x24]
  01608	e1520003	 cmp         r2, r3
  0160c	1a000004	 bne         |$LN3@HalDestroy|

; 515  :     {
; 516  :         pDDGPE->DisableColorKey();

  01610	e59d0000	 ldr         r0, [sp]
  01614	eb000000	 bl          |?DisableColorKey@OMAPDDGPE@@QAAKXZ|

; 517  :         pDDGPE->DisableAlphaConst();

  01618	e59d0000	 ldr         r0, [sp]
  0161c	eb000000	 bl          |?DisableAlphaConst@OMAPDDGPE@@QAAKXZ|

; 518  :     }
; 519  :     else

  01620	ea000017	 b           |$LN2@HalDestroy|
  01624		 |$LN3@HalDestroy|

; 520  :     {
; 521  :         //  If the surface is an overlay and the first in a chain of flipping surfaces, hide it
; 522  :         //  For some reason, WM7 doesn't hide overlay surfaces prior to deleting them
; 523  :         if( pSurf && pSurf->IsOverlay() && (pSurf == pSurf->Parent()) )

  01624	e59d3004	 ldr         r3, [sp, #4]
  01628	e3530000	 cmp         r3, #0
  0162c	0a00000f	 beq         |$LN1@HalDestroy|
  01630	e59d0004	 ldr         r0, [sp, #4]
  01634	eb000000	 bl          |?IsOverlay@DDGPESurf@@QAAHXZ|
  01638	e58d0028	 str         r0, [sp, #0x28]
  0163c	e59d3028	 ldr         r3, [sp, #0x28]
  01640	e3530000	 cmp         r3, #0
  01644	0a000009	 beq         |$LN1@HalDestroy|
  01648	e59d0004	 ldr         r0, [sp, #4]
  0164c	eb000000	 bl          |?Parent@OMAPDDGPESurface@@QAAPAV1@XZ|
  01650	e58d002c	 str         r0, [sp, #0x2C]
  01654	e59d2004	 ldr         r2, [sp, #4]
  01658	e59d302c	 ldr         r3, [sp, #0x2C]
  0165c	e1520003	 cmp         r2, r3
  01660	1a000002	 bne         |$LN1@HalDestroy|

; 524  :         {
; 525  :             pDDGPE->HideOverlay( pSurf );

  01664	e59d1004	 ldr         r1, [sp, #4]
  01668	e59d0000	 ldr         r0, [sp]
  0166c	eb000000	 bl          |?HideOverlay@OMAPDDGPE@@QAAKPAVOMAPDDGPESurface@@@Z|
  01670		 |$LN1@HalDestroy|

; 526  :         }
; 527  :         
; 528  :         g_dwSurfaceCount--;

  01670	e59f3080	 ldr         r3, [pc, #0x80]
  01674	e5933000	 ldr         r3, [r3]
  01678	e2432001	 sub         r2, r3, #1
  0167c	e59f3074	 ldr         r3, [pc, #0x74]
  01680	e5832000	 str         r2, [r3]
  01684		 |$LN2@HalDestroy|

; 529  :     }
; 530  : 
; 531  :     //  Call DDGPE function
; 532  :     result = DDGPEDestroySurface(pd);

  01684	e59d0040	 ldr         r0, [sp, #0x40]
  01688	eb000000	 bl          DDGPEDestroySurface
  0168c	e58d0030	 str         r0, [sp, #0x30]
  01690	e59d3030	 ldr         r3, [sp, #0x30]
  01694	e58d3008	 str         r3, [sp, #8]

; 533  : 
; 534  :     DEBUGMSG(GPE_ZONE_DDRAW_HAL, (L"-HalDestroySurface() result = 0x%x  pd->ddRVal = 0x%x surface count = %d\r\n\r\n", result, pd->ddRVal, g_dwSurfaceCount));

  01698	e59f305c	 ldr         r3, [pc, #0x5C]
  0169c	e5933440	 ldr         r3, [r3, #0x440]
  016a0	e3130902	 tst         r3, #2, 18
  016a4	0a00000a	 beq         |$LN10@HalDestroy|
  016a8	e59f3048	 ldr         r3, [pc, #0x48]
  016ac	e5933000	 ldr         r3, [r3]
  016b0	e59d2040	 ldr         r2, [sp, #0x40]
  016b4	e2822008	 add         r2, r2, #8
  016b8	e5922000	 ldr         r2, [r2]
  016bc	e59d1008	 ldr         r1, [sp, #8]
  016c0	e59f002c	 ldr         r0, [pc, #0x2C]
  016c4	eb000000	 bl          NKDbgPrintfW
  016c8	e3a03001	 mov         r3, #1
  016cc	e58d3034	 str         r3, [sp, #0x34]
  016d0	ea000001	 b           |$LN11@HalDestroy|
  016d4		 |$LN10@HalDestroy|
  016d4	e3a03000	 mov         r3, #0
  016d8	e58d3034	 str         r3, [sp, #0x34]
  016dc		 |$LN11@HalDestroy|

; 535  :     
; 536  :     return result;

  016dc	e59d3008	 ldr         r3, [sp, #8]
  016e0	e58d300c	 str         r3, [sp, #0xC]

; 537  : }

  016e4	e59d000c	 ldr         r0, [sp, #0xC]
  016e8	e28dd038	 add         sp, sp, #0x38
  016ec	e89d6000	 ldmia       sp, {sp, lr}
  016f0	e12fff1e	 bx          lr
  016f4		 |$LN15@HalDestroy|
  016f4		 |$LN16@HalDestroy|
  016f4	00000000	 DCD         |??_C@_1JK@EONJCLEJ@?$AA?9?$AAH?$AAa?$AAl?$AAD?$AAe?$AAs?$AAt?$AAr?$AAo?$AAy?$AAS?$AAu?$AAr?$AAf?$AAa?$AAc?$AAe?$AA?$CI?$AA?$CJ?$AA?5?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx@|
  016f8		 |$LN17@HalDestroy|
  016f8	00000000	 DCD         |?g_dwSurfaceCount@@3KA|
  016fc		 |$LN18@HalDestroy|
  016fc	00000000	 DCD         |dpCurSettings|
  01700		 |$LN19@HalDestroy|
  01700	00000000	 DCD         |??_C@_1EO@ODKLNKFG@?$AAp?$AAd?$AA?9?$AA?$DO?$AAl?$AAp?$AAD?$AAD?$AAS?$AAu?$AAr?$AAf?$AAa?$AAc?$AAe?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?5?$AA?5?$AAp?$AAS?$AAu?$AAr?$AAf?$AA?5?$AA?$DN?$AA?5@|
  01704		 |$LN20@HalDestroy|
  01704	00000000	 DCD         |??_C@_1GI@DGGLIHGE@?$AA?$CL?$AAH?$AAa?$AAl?$AAD?$AAe?$AAs?$AAt?$AAr?$AAo?$AAy?$AAS?$AAu?$AAr?$AAf?$AAa?$AAc?$AAe?$AA?$CI?$AA?$CJ?$AA?5?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9@|
  01708		 |$M42670|

			 ENDP  ; |?HalDestroySurface@@YAKPAU_DDHAL_DESTROYSURFACEDATA@@@Z|, HalDestroySurface

; File c:\wince600\public\common\oak\inc\ddgpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T42684| DCD	|$LN5@IsOverlay|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?IsOverlay@DDGPESurf@@QAAHXZ| PROC	; DDGPESurf::IsOverlay

; 313  : 	{

  00000		 |$LN5@IsOverlay|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M42681|

; 314  : 		return m_bOverlay; 

  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e2833060	 add         r3, r3, #0x60
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3000	 str         r3, [sp]

; 315  : 	}

  00020	e59d0000	 ldr         r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M42682|

			 ENDP  ; |?IsOverlay@DDGPESurf@@QAAHXZ|, DDGPESurf::IsOverlay

; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\inc\omap_ddgpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T42692| DCD	|$LN5@Parent|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Parent@OMAPDDGPESurface@@QAAPAV1@XZ| PROC ; OMAPDDGPESurface::Parent

; 104  :     OMAPDDGPESurface*   Parent() { return m_pParentSurface; }

  00000		 |$LN5@Parent|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M42689|
  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e2833084	 add         r3, r3, #0x84
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3000	 str         r3, [sp]
  00020	e59d0000	 ldr         r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M42690|

			 ENDP  ; |?Parent@OMAPDDGPESurface@@QAAPAV1@XZ|, OMAPDDGPESurface::Parent

	EXPORT	|?HalFlip@@YAKPAU_DDHAL_FLIPDATA@@@Z|	; HalFlip
	IMPORT	|?FlipSurface@OMAPDDGPE@@QAAKPAVOMAPDDGPESurface@@@Z| ; OMAPDDGPE::FlipSurface
	IMPORT	|?SurfaceFlipping@OMAPDDGPE@@QAAHPAVOMAPDDGPESurface@@H@Z| ; OMAPDDGPE::SurfaceFlipping

  00020			 AREA	 |.pdata|, PDATA
|$T42700| DCD	|$LN8@HalFlip|
	DCD	0x40005d04
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\ddgpe\halsurf.cpp

  01708			 AREA	 |.text|, CODE, ARM

  01708		 |?HalFlip@@YAKPAU_DDHAL_FLIPDATA@@@Z| PROC ; HalFlip

; 544  : {

  01708		 |$LN8@HalFlip|
  01708	e1a0c00d	 mov         r12, sp
  0170c	e92d0001	 stmdb       sp!, {r0}
  01710	e92d5000	 stmdb       sp!, {r12, lr}
  01714	e24dd028	 sub         sp, sp, #0x28
  01718		 |$M42697|

; 545  :     OMAPDDGPE*          pDDGPE = (OMAPDDGPE*) GetGPE();

  01718	eb000000	 bl          GetGPE
  0171c	e58d0010	 str         r0, [sp, #0x10]
  01720	e59d3010	 ldr         r3, [sp, #0x10]
  01724	e58d3004	 str         r3, [sp, #4]

; 546  :     OMAPDDGPESurface*   pSurfCurr = (OMAPDDGPESurface*) DDGPESurf::GetDDGPESurf(pd->lpSurfCurr);

  01728	e59d3030	 ldr         r3, [sp, #0x30]
  0172c	e2833004	 add         r3, r3, #4
  01730	e5930000	 ldr         r0, [r3]
  01734	eb000000	 bl          |?GetDDGPESurf@DDGPESurf@@SAPAV1@PAU_DDRAWI_DDRAWSURFACE_LCL@@@Z|
  01738	e58d0014	 str         r0, [sp, #0x14]
  0173c	e59d3014	 ldr         r3, [sp, #0x14]
  01740	e58d3008	 str         r3, [sp, #8]

; 547  :     OMAPDDGPESurface*   pSurfTarg = (OMAPDDGPESurface*) DDGPESurf::GetDDGPESurf(pd->lpSurfTarg);

  01744	e59d3030	 ldr         r3, [sp, #0x30]
  01748	e2833008	 add         r3, r3, #8
  0174c	e5930000	 ldr         r0, [r3]
  01750	eb000000	 bl          |?GetDDGPESurf@DDGPESurf@@SAPAV1@PAU_DDRAWI_DDRAWSURFACE_LCL@@@Z|
  01754	e58d0018	 str         r0, [sp, #0x18]
  01758	e59d3018	 ldr         r3, [sp, #0x18]
  0175c	e58d3000	 str         r3, [sp]

; 548  : 
; 549  :     if(pDDGPE->FlipInProgress() && 
; 550  :         (pSurfCurr != NULL && pDDGPE->SurfaceFlipping(pSurfCurr,FALSE)))

  01760	e59d3004	 ldr         r3, [sp, #4]
  01764	e5933000	 ldr         r3, [r3]
  01768	e2833050	 add         r3, r3, #0x50
  0176c	e59d0004	 ldr         r0, [sp, #4]
  01770	e5933000	 ldr         r3, [r3]
  01774	e1a0e00f	 mov         lr, pc
  01778	e12fff13	 bx          r3
  0177c	e58d001c	 str         r0, [sp, #0x1C]
  01780	e59d301c	 ldr         r3, [sp, #0x1C]
  01784	e3530000	 cmp         r3, #0
  01788	0a00001e	 beq         |$LN3@HalFlip|
  0178c	e59d3008	 ldr         r3, [sp, #8]
  01790	e3530000	 cmp         r3, #0
  01794	0a00001b	 beq         |$LN3@HalFlip|
  01798	e3a02000	 mov         r2, #0
  0179c	e59d1008	 ldr         r1, [sp, #8]
  017a0	e59d0004	 ldr         r0, [sp, #4]
  017a4	eb000000	 bl          |?SurfaceFlipping@OMAPDDGPE@@QAAHPAVOMAPDDGPESurface@@H@Z|
  017a8	e58d0020	 str         r0, [sp, #0x20]
  017ac	e59d3020	 ldr         r3, [sp, #0x20]
  017b0	e3530000	 cmp         r3, #0
  017b4	0a000013	 beq         |$LN3@HalFlip|

; 551  :     {   
; 552  :         if (pd->dwFlags & (DDFLIP_WAITNOTBUSY|DDFLIP_WAITVSYNC)) 

  017b8	e59d3030	 ldr         r3, [sp, #0x30]
  017bc	e283300c	 add         r3, r3, #0xC
  017c0	e5933000	 ldr         r3, [r3]
  017c4	e3130009	 tst         r3, #9
  017c8	0a000007	 beq         |$LN2@HalFlip|

; 553  :         {            
; 554  :             pDDGPE->WaitForVBlank();            

  017cc	e59d3004	 ldr         r3, [sp, #4]
  017d0	e5933000	 ldr         r3, [r3]
  017d4	e2833054	 add         r3, r3, #0x54
  017d8	e59d0004	 ldr         r0, [sp, #4]
  017dc	e5933000	 ldr         r3, [r3]
  017e0	e1a0e00f	 mov         lr, pc
  017e4	e12fff13	 bx          r3

; 555  :         }
; 556  :         else

  017e8	ea000006	 b           |$LN1@HalFlip|
  017ec		 |$LN2@HalFlip|

; 557  :         {
; 558  :            //  Display controller still performing a flip
; 559  :             pd->ddRVal = DDERR_WASSTILLDRAWING; 

  017ec	e59d3030	 ldr         r3, [sp, #0x30]
  017f0	e2832010	 add         r2, r3, #0x10
  017f4	e59f307c	 ldr         r3, [pc, #0x7C]
  017f8	e5823000	 str         r3, [r2]

; 560  :             return DDHAL_DRIVER_HANDLED;

  017fc	e3a03001	 mov         r3, #1
  01800	e58d300c	 str         r3, [sp, #0xC]
  01804	ea000017	 b           |$LN4@HalFlip|
  01808		 |$LN1@HalFlip|
  01808		 |$LN3@HalFlip|

; 561  :         }
; 562  :     }  
; 563  : 
; 564  :     //  Lock the display driver
; 565  :     pDDGPE->Lock();

  01808	e59d3004	 ldr         r3, [sp, #4]
  0180c	e5933000	 ldr         r3, [r3]
  01810	e28330ec	 add         r3, r3, #0xEC
  01814	e59d0004	 ldr         r0, [sp, #4]
  01818	e5933000	 ldr         r3, [r3]
  0181c	e1a0e00f	 mov         lr, pc
  01820	e12fff13	 bx          r3

; 566  :     //  Flip to the target surface
; 567  :     pd->ddRVal = pDDGPE->FlipSurface(pSurfTarg);

  01824	e59d1000	 ldr         r1, [sp]
  01828	e59d0004	 ldr         r0, [sp, #4]
  0182c	eb000000	 bl          |?FlipSurface@OMAPDDGPE@@QAAKPAVOMAPDDGPESurface@@@Z|
  01830	e58d0024	 str         r0, [sp, #0x24]
  01834	e59d3030	 ldr         r3, [sp, #0x30]
  01838	e2832010	 add         r2, r3, #0x10
  0183c	e59d3024	 ldr         r3, [sp, #0x24]
  01840	e5823000	 str         r3, [r2]

; 568  :     //  Unlock the display driver
; 569  :     pDDGPE->Unlock();   

  01844	e59d3004	 ldr         r3, [sp, #4]
  01848	e5933000	 ldr         r3, [r3]
  0184c	e28330f0	 add         r3, r3, #0xF0
  01850	e59d0004	 ldr         r0, [sp, #4]
  01854	e5933000	 ldr         r3, [r3]
  01858	e1a0e00f	 mov         lr, pc
  0185c	e12fff13	 bx          r3

; 570  :     
; 571  :     return DDHAL_DRIVER_HANDLED;

  01860	e3a03001	 mov         r3, #1
  01864	e58d300c	 str         r3, [sp, #0xC]
  01868		 |$LN4@HalFlip|

; 572  : }

  01868	e59d000c	 ldr         r0, [sp, #0xC]
  0186c	e28dd028	 add         sp, sp, #0x28
  01870	e89d6000	 ldmia       sp, {sp, lr}
  01874	e12fff1e	 bx          lr
  01878		 |$LN9@HalFlip|
  01878		 |$LN10@HalFlip|
  01878	8876021c	 DCD         0x8876021c
  0187c		 |$M42698|

			 ENDP  ; |?HalFlip@@YAKPAU_DDHAL_FLIPDATA@@@Z|, HalFlip

	EXPORT	|?HalGetFlipStatus@@YAKPAU_DDHAL_GETFLIPSTATUSDATA@@@Z| ; HalGetFlipStatus

  00028			 AREA	 |.pdata|, PDATA
|$T42708| DCD	|$LN11@HalGetFlip|
	DCD	0x40005504
; Function compile flags: /Odtp

  0187c			 AREA	 |.text|, CODE, ARM

  0187c		 |?HalGetFlipStatus@@YAKPAU_DDHAL_GETFLIPSTATUSDATA@@@Z| PROC ; HalGetFlipStatus

; 579  : {

  0187c		 |$LN11@HalGetFlip|
  0187c	e1a0c00d	 mov         r12, sp
  01880	e92d0001	 stmdb       sp!, {r0}
  01884	e92d5000	 stmdb       sp!, {r12, lr}
  01888	e24dd020	 sub         sp, sp, #0x20
  0188c		 |$M42705|

; 580  :     OMAPDDGPE*  pDDGPE = (OMAPDDGPE*) GetGPE();

  0188c	eb000000	 bl          GetGPE
  01890	e58d000c	 str         r0, [sp, #0xC]
  01894	e59d300c	 ldr         r3, [sp, #0xC]
  01898	e58d3000	 str         r3, [sp]

; 581  :     OMAPDDGPESurface * pSurf = (OMAPDDGPESurface*)DDGPESurf::GetDDGPESurf(pd->lpDDSurface);

  0189c	e59d3028	 ldr         r3, [sp, #0x28]
  018a0	e2833004	 add         r3, r3, #4
  018a4	e5930000	 ldr         r0, [r3]
  018a8	eb000000	 bl          |?GetDDGPESurf@DDGPESurf@@SAPAV1@PAU_DDRAWI_DDRAWSURFACE_LCL@@@Z|
  018ac	e58d0010	 str         r0, [sp, #0x10]
  018b0	e59d3010	 ldr         r3, [sp, #0x10]
  018b4	e58d3004	 str         r3, [sp, #4]

; 582  : 
; 583  : 	pd->ddRVal = DD_OK;

  018b8	e59d3028	 ldr         r3, [sp, #0x28]
  018bc	e283200c	 add         r2, r3, #0xC
  018c0	e3a03000	 mov         r3, #0
  018c4	e5823000	 str         r3, [r2]

; 584  : 
; 585  :     if ( (pd->dwFlags & DDGFS_ISFLIPDONE) &&
; 586  :             pDDGPE->FlipInProgress())

  018c8	e59d3028	 ldr         r3, [sp, #0x28]
  018cc	e2833008	 add         r3, r3, #8
  018d0	e5933000	 ldr         r3, [r3]
  018d4	e3130002	 tst         r3, #2
  018d8	0a00001f	 beq         |$LN6@HalGetFlip|
  018dc	e59d3000	 ldr         r3, [sp]
  018e0	e5933000	 ldr         r3, [r3]
  018e4	e2833050	 add         r3, r3, #0x50
  018e8	e59d0000	 ldr         r0, [sp]
  018ec	e5933000	 ldr         r3, [r3]
  018f0	e1a0e00f	 mov         lr, pc
  018f4	e12fff13	 bx          r3
  018f8	e58d0014	 str         r0, [sp, #0x14]
  018fc	e59d3014	 ldr         r3, [sp, #0x14]
  01900	e3530000	 cmp         r3, #0
  01904	0a000014	 beq         |$LN6@HalGetFlip|

; 587  :     {               
; 588  :         if((pSurf != NULL && pDDGPE->SurfaceFlipping(pSurf,FALSE)))

  01908	e59d3004	 ldr         r3, [sp, #4]
  0190c	e3530000	 cmp         r3, #0
  01910	0a00000c	 beq         |$LN5@HalGetFlip|
  01914	e3a02000	 mov         r2, #0
  01918	e59d1004	 ldr         r1, [sp, #4]
  0191c	e59d0000	 ldr         r0, [sp]
  01920	eb000000	 bl          |?SurfaceFlipping@OMAPDDGPE@@QAAHPAVOMAPDDGPESurface@@H@Z|
  01924	e58d0018	 str         r0, [sp, #0x18]
  01928	e59d3018	 ldr         r3, [sp, #0x18]
  0192c	e3530000	 cmp         r3, #0
  01930	0a000004	 beq         |$LN5@HalGetFlip|

; 589  :         {
; 590  :             pd->ddRVal = DDERR_WASSTILLDRAWING;        

  01934	e59d3028	 ldr         r3, [sp, #0x28]
  01938	e283200c	 add         r2, r3, #0xC
  0193c	e59f3088	 ldr         r3, [pc, #0x88]
  01940	e5823000	 str         r3, [r2]

; 591  :         }
; 592  : 		else

  01944	ea000003	 b           |$LN4@HalGetFlip|
  01948		 |$LN5@HalGetFlip|

; 593  : 			pd->ddRVal = DD_OK;

  01948	e59d3028	 ldr         r3, [sp, #0x28]
  0194c	e283200c	 add         r2, r3, #0xC
  01950	e3a03000	 mov         r3, #0
  01954	e5823000	 str         r3, [r2]
  01958		 |$LN4@HalGetFlip|

; 594  :     }   
; 595  :     else if ( (pd->dwFlags & DDGFS_CANFLIP) &&

  01958	ea000015	 b           |$LN3@HalGetFlip|
  0195c		 |$LN6@HalGetFlip|

; 596  :                 pDDGPE->SurfaceFlipping(pSurf,FALSE))

  0195c	e59d3028	 ldr         r3, [sp, #0x28]
  01960	e2833008	 add         r3, r3, #8
  01964	e5933000	 ldr         r3, [r3]
  01968	e3130001	 tst         r3, #1
  0196c	0a00000c	 beq         |$LN2@HalGetFlip|
  01970	e3a02000	 mov         r2, #0
  01974	e59d1004	 ldr         r1, [sp, #4]
  01978	e59d0000	 ldr         r0, [sp]
  0197c	eb000000	 bl          |?SurfaceFlipping@OMAPDDGPE@@QAAHPAVOMAPDDGPESurface@@H@Z|
  01980	e58d001c	 str         r0, [sp, #0x1C]
  01984	e59d301c	 ldr         r3, [sp, #0x1C]
  01988	e3530000	 cmp         r3, #0
  0198c	0a000004	 beq         |$LN2@HalGetFlip|

; 597  :     {        
; 598  :         pd->ddRVal = DDERR_WASSTILLDRAWING;             

  01990	e59d3028	 ldr         r3, [sp, #0x28]
  01994	e283200c	 add         r2, r3, #0xC
  01998	e59f302c	 ldr         r3, [pc, #0x2C]
  0199c	e5823000	 str         r3, [r2]

; 599  :     }
; 600  :     else 

  019a0	ea000003	 b           |$LN1@HalGetFlip|
  019a4		 |$LN2@HalGetFlip|

; 601  :     {
; 602  :         pd->ddRVal = DD_OK;

  019a4	e59d3028	 ldr         r3, [sp, #0x28]
  019a8	e283200c	 add         r2, r3, #0xC
  019ac	e3a03000	 mov         r3, #0
  019b0	e5823000	 str         r3, [r2]
  019b4		 |$LN1@HalGetFlip|
  019b4		 |$LN3@HalGetFlip|

; 603  :     }
; 604  :     return DDHAL_DRIVER_HANDLED;

  019b4	e3a03001	 mov         r3, #1
  019b8	e58d3008	 str         r3, [sp, #8]

; 605  : }

  019bc	e59d0008	 ldr         r0, [sp, #8]
  019c0	e28dd020	 add         sp, sp, #0x20
  019c4	e89d6000	 ldmia       sp, {sp, lr}
  019c8	e12fff1e	 bx          lr
  019cc		 |$LN12@HalGetFlip|
  019cc		 |$LN13@HalGetFlip|
  019cc	8876021c	 DCD         0x8876021c
  019d0		 |$M42706|

			 ENDP  ; |?HalGetFlipStatus@@YAKPAU_DDHAL_GETFLIPSTATUSDATA@@@Z|, HalGetFlipStatus

	EXPORT	|?HalGetScanLine@@YAKPAU_DDHAL_GETSCANLINEDATA@@@Z| ; HalGetScanLine
	IMPORT	|?GetScanLine@OMAPDDGPE@@QAAKXZ|	; OMAPDDGPE::GetScanLine

  00030			 AREA	 |.pdata|, PDATA
|$T42716| DCD	|$LN5@HalGetScan|
	DCD	0x40001904
; Function compile flags: /Odtp

  019d0			 AREA	 |.text|, CODE, ARM

  019d0		 |?HalGetScanLine@@YAKPAU_DDHAL_GETSCANLINEDATA@@@Z| PROC ; HalGetScanLine

; 612  : {

  019d0		 |$LN5@HalGetScan|
  019d0	e1a0c00d	 mov         r12, sp
  019d4	e92d0001	 stmdb       sp!, {r0}
  019d8	e92d5000	 stmdb       sp!, {r12, lr}
  019dc	e24dd010	 sub         sp, sp, #0x10
  019e0		 |$M42713|

; 613  :     OMAPDDGPE*  pDDGPE = (OMAPDDGPE*) GetGPE();

  019e0	eb000000	 bl          GetGPE
  019e4	e58d0008	 str         r0, [sp, #8]
  019e8	e59d3008	 ldr         r3, [sp, #8]
  019ec	e58d3000	 str         r3, [sp]

; 614  : 
; 615  :     lpgsld->dwScanLine = pDDGPE->GetScanLine();

  019f0	e59d0000	 ldr         r0, [sp]
  019f4	eb000000	 bl          |?GetScanLine@OMAPDDGPE@@QAAKXZ|
  019f8	e58d000c	 str         r0, [sp, #0xC]
  019fc	e59d3018	 ldr         r3, [sp, #0x18]
  01a00	e2832004	 add         r2, r3, #4
  01a04	e59d300c	 ldr         r3, [sp, #0xC]
  01a08	e5823000	 str         r3, [r2]

; 616  :     lpgsld->ddRVal = DD_OK;

  01a0c	e59d3018	 ldr         r3, [sp, #0x18]
  01a10	e2832008	 add         r2, r3, #8
  01a14	e3a03000	 mov         r3, #0
  01a18	e5823000	 str         r3, [r2]

; 617  :     return DDHAL_DRIVER_HANDLED;    

  01a1c	e3a03001	 mov         r3, #1
  01a20	e58d3004	 str         r3, [sp, #4]

; 618  : }

  01a24	e59d0004	 ldr         r0, [sp, #4]
  01a28	e28dd010	 add         sp, sp, #0x10
  01a2c	e89d6000	 ldmia       sp, {sp, lr}
  01a30	e12fff1e	 bx          lr
  01a34		 |$M42714|

			 ENDP  ; |?HalGetScanLine@@YAKPAU_DDHAL_GETSCANLINEDATA@@@Z|, HalGetScanLine

	EXPORT	|?HalLock@@YAKPAU_DDHAL_LOCKDATA@@@Z|	; HalLock
	IMPORT	|?GetPtr@GPESurf@@QAAPAEHH@Z|		; GPESurf::GetPtr

  00038			 AREA	 |.pdata|, PDATA
|$T42722| DCD	|$LN9@HalLock|
	DCD	0x40005204
; Function compile flags: /Odtp

  01a34			 AREA	 |.text|, CODE, ARM

  01a34		 |?HalLock@@YAKPAU_DDHAL_LOCKDATA@@@Z| PROC ; HalLock

; 624  : {

  01a34		 |$LN9@HalLock|
  01a34	e1a0c00d	 mov         r12, sp
  01a38	e92d0001	 stmdb       sp!, {r0}
  01a3c	e92d5000	 stmdb       sp!, {r12, lr}
  01a40	e24dd028	 sub         sp, sp, #0x28
  01a44		 |$M42719|

; 625  :     OMAPDDGPE*  pDDGPE = (OMAPDDGPE*) GetGPE();

  01a44	eb000000	 bl          GetGPE
  01a48	e58d0018	 str         r0, [sp, #0x18]
  01a4c	e59d3018	 ldr         r3, [sp, #0x18]
  01a50	e58d300c	 str         r3, [sp, #0xC]

; 626  :     OMAPDDGPESurface * pSurf = (OMAPDDGPESurface*)DDGPESurf::GetDDGPESurf(pd->lpDDSurface);

  01a54	e59d3030	 ldr         r3, [sp, #0x30]
  01a58	e2833004	 add         r3, r3, #4
  01a5c	e5930000	 ldr         r0, [r3]
  01a60	eb000000	 bl          |?GetDDGPESurf@DDGPESurf@@SAPAV1@PAU_DDRAWI_DDRAWSURFACE_LCL@@@Z|
  01a64	e58d001c	 str         r0, [sp, #0x1C]
  01a68	e59d301c	 ldr         r3, [sp, #0x1C]
  01a6c	e58d3010	 str         r3, [sp, #0x10]

; 627  :     
; 628  :     //Check to see if the surface to be locked is still being shown
; 629  :     //check is only done on primary or overlay flip chains, other surfaces will always return false
; 630  :     if (pDDGPE->SurfaceFlipping(pSurf,TRUE))

  01a70	e3a02001	 mov         r2, #1
  01a74	e59d1010	 ldr         r1, [sp, #0x10]
  01a78	e59d000c	 ldr         r0, [sp, #0xC]
  01a7c	eb000000	 bl          |?SurfaceFlipping@OMAPDDGPE@@QAAHPAVOMAPDDGPESurface@@H@Z|
  01a80	e58d0020	 str         r0, [sp, #0x20]
  01a84	e59d3020	 ldr         r3, [sp, #0x20]
  01a88	e3530000	 cmp         r3, #0
  01a8c	0a000013	 beq         |$LN4@HalLock|

; 631  :     {
; 632  :         if (pd->dwFlags & DDLOCK_WAITNOTBUSY)

  01a90	e59d3030	 ldr         r3, [sp, #0x30]
  01a94	e283301c	 add         r3, r3, #0x1C
  01a98	e5933000	 ldr         r3, [r3]
  01a9c	e3130008	 tst         r3, #8
  01aa0	0a000007	 beq         |$LN3@HalLock|

; 633  :         {
; 634  :             pDDGPE->WaitForVBlank();

  01aa4	e59d300c	 ldr         r3, [sp, #0xC]
  01aa8	e5933000	 ldr         r3, [r3]
  01aac	e2833054	 add         r3, r3, #0x54
  01ab0	e59d000c	 ldr         r0, [sp, #0xC]
  01ab4	e5933000	 ldr         r3, [r3]
  01ab8	e1a0e00f	 mov         lr, pc
  01abc	e12fff13	 bx          r3

; 635  :         }
; 636  :         else

  01ac0	ea000006	 b           |$LN2@HalLock|
  01ac4		 |$LN3@HalLock|

; 637  :         {
; 638  :             pd->ddRVal = DDERR_WASSTILLDRAWING;

  01ac4	e59d3030	 ldr         r3, [sp, #0x30]
  01ac8	e2832024	 add         r2, r3, #0x24
  01acc	e59f30a4	 ldr         r3, [pc, #0xA4]
  01ad0	e5823000	 str         r3, [r2]

; 639  :             return DDHAL_DRIVER_HANDLED;

  01ad4	e3a03001	 mov         r3, #1
  01ad8	e58d3014	 str         r3, [sp, #0x14]
  01adc	ea000021	 b           |$LN5@HalLock|
  01ae0		 |$LN2@HalLock|
  01ae0		 |$LN4@HalLock|

; 640  :         }
; 641  :     }
; 642  :     
; 643  :     DWORD ulAddress;
; 644  :     int x = 0;

  01ae0	e3a03000	 mov         r3, #0
  01ae4	e58d3004	 str         r3, [sp, #4]

; 645  :     int y = 0;

  01ae8	e3a03000	 mov         r3, #0
  01aec	e58d3000	 str         r3, [sp]

; 646  :     if (pd->bHasRect) 

  01af0	e59d3030	 ldr         r3, [sp, #0x30]
  01af4	e2833008	 add         r3, r3, #8
  01af8	e5933000	 ldr         r3, [r3]
  01afc	e3530000	 cmp         r3, #0
  01b00	0a000007	 beq         |$LN1@HalLock|

; 647  :     {
; 648  :         x = pd->rArea.left;

  01b04	e59d3030	 ldr         r3, [sp, #0x30]
  01b08	e283300c	 add         r3, r3, #0xC
  01b0c	e5933000	 ldr         r3, [r3]
  01b10	e58d3004	 str         r3, [sp, #4]

; 649  :         y = pd->rArea.top;

  01b14	e59d3030	 ldr         r3, [sp, #0x30]
  01b18	e2833010	 add         r3, r3, #0x10
  01b1c	e5933000	 ldr         r3, [r3]
  01b20	e58d3000	 str         r3, [sp]
  01b24		 |$LN1@HalLock|

; 650  :     }
; 651  : 
; 652  :     ulAddress = (ULONG) pSurf->GetPtr(x,y);

  01b24	e59d2000	 ldr         r2, [sp]
  01b28	e59d1004	 ldr         r1, [sp, #4]
  01b2c	e59d0010	 ldr         r0, [sp, #0x10]
  01b30	eb000000	 bl          |?GetPtr@GPESurf@@QAAPAEHH@Z|
  01b34	e58d0024	 str         r0, [sp, #0x24]
  01b38	e59d3024	 ldr         r3, [sp, #0x24]
  01b3c	e58d3008	 str         r3, [sp, #8]

; 653  :     pd->lpSurfData = reinterpret_cast<LPVOID>(ulAddress);

  01b40	e59d3030	 ldr         r3, [sp, #0x30]
  01b44	e2832020	 add         r2, r3, #0x20
  01b48	e59d3008	 ldr         r3, [sp, #8]
  01b4c	e5823000	 str         r3, [r2]

; 654  :     pd->ddRVal = DD_OK;

  01b50	e59d3030	 ldr         r3, [sp, #0x30]
  01b54	e2832024	 add         r2, r3, #0x24
  01b58	e3a03000	 mov         r3, #0
  01b5c	e5823000	 str         r3, [r2]

; 655  : 
; 656  :     return DDHAL_DRIVER_HANDLED;

  01b60	e3a03001	 mov         r3, #1
  01b64	e58d3014	 str         r3, [sp, #0x14]
  01b68		 |$LN5@HalLock|

; 657  : }

  01b68	e59d0014	 ldr         r0, [sp, #0x14]
  01b6c	e28dd028	 add         sp, sp, #0x28
  01b70	e89d6000	 ldmia       sp, {sp, lr}
  01b74	e12fff1e	 bx          lr
  01b78		 |$LN10@HalLock|
  01b78		 |$LN11@HalLock|
  01b78	8876021c	 DCD         0x8876021c
  01b7c		 |$M42720|

			 ENDP  ; |?HalLock@@YAKPAU_DDHAL_LOCKDATA@@@Z|, HalLock

	EXPORT	|?HalUnlock@@YAKPAU_DDHAL_UNLOCKDATA@@@Z| ; HalUnlock
	IMPORT	|DDGPEUnlock|

  00040			 AREA	 |.pdata|, PDATA
|$T42730| DCD	|$LN5@HalUnlock|
	DCD	0x40000f04
; Function compile flags: /Odtp

  01b7c			 AREA	 |.text|, CODE, ARM

  01b7c		 |?HalUnlock@@YAKPAU_DDHAL_UNLOCKDATA@@@Z| PROC ; HalUnlock

; 664  : {

  01b7c		 |$LN5@HalUnlock|
  01b7c	e1a0c00d	 mov         r12, sp
  01b80	e92d0001	 stmdb       sp!, {r0}
  01b84	e92d5000	 stmdb       sp!, {r12, lr}
  01b88	e24dd00c	 sub         sp, sp, #0xC
  01b8c		 |$M42727|

; 665  :     DWORD       result;    
; 666  : 
; 667  :     //  Call DDGPE function
; 668  :     result = DDGPEUnlock(pd);

  01b8c	e59d0014	 ldr         r0, [sp, #0x14]
  01b90	eb000000	 bl          DDGPEUnlock
  01b94	e58d0008	 str         r0, [sp, #8]
  01b98	e59d3008	 ldr         r3, [sp, #8]
  01b9c	e58d3000	 str         r3, [sp]

; 669  : 
; 670  :     return result;

  01ba0	e59d3000	 ldr         r3, [sp]
  01ba4	e58d3004	 str         r3, [sp, #4]

; 671  : }

  01ba8	e59d0004	 ldr         r0, [sp, #4]
  01bac	e28dd00c	 add         sp, sp, #0xC
  01bb0	e89d6000	 ldmia       sp, {sp, lr}
  01bb4	e12fff1e	 bx          lr
  01bb8		 |$M42728|

			 ENDP  ; |?HalUnlock@@YAKPAU_DDHAL_UNLOCKDATA@@@Z|, HalUnlock

	EXPORT	|??_C@_1FA@FGNLBGMN@?$AA?9?$AAH?$AAa?$AAl?$AAS?$AAe?$AAt?$AAC?$AAo?$AAl?$AAo?$AAr?$AAK?$AAe?$AAy?$AA?$CI?$AA?$CJ?$AA?5?$AAp?$AAd?$AA?9?$AA?$DO?$AAd?$AAd?$AAR?$AAV?$AAa?$AAl?$AA?5?$AA?$DN?$AA?5?$AA0@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GI@IPFGGBEP@?$AA?$CL?$AAH?$AAa?$AAl?$AAS?$AAe?$AAt?$AAC?$AAo?$AAl?$AAo?$AAr?$AAK?$AAe?$AAy?$AA?$CI?$AA?$CJ?$AA?5?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9@| [ DATA ] ; `string'
	EXPORT	|?HalSetColorKey@@YAKPAU_DDHAL_SETCOLORKEYDATA@@@Z| ; HalSetColorKey
	IMPORT	|DDGPESetColorKey|
	IMPORT	|?SetDestColorKey@OMAPDDGPE@@QAAKK@Z|	; OMAPDDGPE::SetDestColorKey
	IMPORT	|?SetSrcColorKey@OMAPDDGPE@@QAAKK@Z|	; OMAPDDGPE::SetSrcColorKey
	IMPORT	|?DumpDD_SETCOLORKEY@@YAXPAU_DDHAL_SETCOLORKEYDATA@@@Z| ; DumpDD_SETCOLORKEY

  00048			 AREA	 |.pdata|, PDATA
|$T42740| DCD	|$LN16@HalSetColo|
	DCD	0x40007504

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FA@FGNLBGMN@?$AA?9?$AAH?$AAa?$AAl?$AAS?$AAe?$AAt?$AAC?$AAo?$AAl?$AAo?$AAr?$AAK?$AAe?$AAy?$AA?$CI?$AA?$CJ?$AA?5?$AAp?$AAd?$AA?9?$AA?$DO?$AAd?$AAd?$AAR?$AAV?$AAa?$AAl?$AA?5?$AA?$DN?$AA?5?$AA0@| DCB "-"
	DCB	0x0, "H", 0x0, "a", 0x0, "l", 0x0, "S", 0x0, "e", 0x0, "t"
	DCB	0x0, "C", 0x0, "o", 0x0, "l", 0x0, "o", 0x0, "r", 0x0, "K"
	DCB	0x0, "e", 0x0, "y", 0x0, "(", 0x0, ")", 0x0, " ", 0x0, "p"
	DCB	0x0, "d", 0x0, "-", 0x0, ">", 0x0, "d", 0x0, "d", 0x0, "R"
	DCB	0x0, "V", 0x0, "a", 0x0, "l", 0x0, " ", 0x0, "=", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GI@IPFGGBEP@?$AA?$CL?$AAH?$AAa?$AAl?$AAS?$AAe?$AAt?$AAC?$AAo?$AAl?$AAo?$AAr?$AAK?$AAe?$AAy?$AA?$CI?$AA?$CJ?$AA?5?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9@| DCB "+"
	DCB	0x0, "H", 0x0, "a", 0x0, "l", 0x0, "S", 0x0, "e", 0x0, "t"
	DCB	0x0, "C", 0x0, "o", 0x0, "l", 0x0, "o", 0x0, "r", 0x0, "K"
	DCB	0x0, "e", 0x0, "y", 0x0, "(", 0x0, ")", 0x0, " ", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  01bb8			 AREA	 |.text|, CODE, ARM

  01bb8		 |?HalSetColorKey@@YAKPAU_DDHAL_SETCOLORKEYDATA@@@Z| PROC ; HalSetColorKey

; 678  : {

  01bb8		 |$LN16@HalSetColo|
  01bb8	e1a0c00d	 mov         r12, sp
  01bbc	e92d0001	 stmdb       sp!, {r0}
  01bc0	e92d5000	 stmdb       sp!, {r12, lr}
  01bc4	e24dd028	 sub         sp, sp, #0x28
  01bc8		 |$M42737|

; 679  :     OMAPDDGPE*          pDDGPE = (OMAPDDGPE*) GetGPE();

  01bc8	eb000000	 bl          GetGPE
  01bcc	e58d0008	 str         r0, [sp, #8]
  01bd0	e59d3008	 ldr         r3, [sp, #8]
  01bd4	e58d3000	 str         r3, [sp]

; 680  :     
; 681  :     DEBUGMSG(GPE_ZONE_DDRAW_HAL, (L"+HalSetColorKey() -------------------------------\r\n"));

  01bd8	e59f31a0	 ldr         r3, [pc, #0x1A0]
  01bdc	e5933440	 ldr         r3, [r3, #0x440]
  01be0	e3130902	 tst         r3, #2, 18
  01be4	0a000004	 beq         |$LN10@HalSetColo|
  01be8	e59f0198	 ldr         r0, [pc, #0x198]
  01bec	eb000000	 bl          NKDbgPrintfW
  01bf0	e3a03001	 mov         r3, #1
  01bf4	e58d300c	 str         r3, [sp, #0xC]
  01bf8	ea000001	 b           |$LN11@HalSetColo|
  01bfc		 |$LN10@HalSetColo|
  01bfc	e3a03000	 mov         r3, #0
  01c00	e58d300c	 str         r3, [sp, #0xC]
  01c04		 |$LN11@HalSetColo|

; 682  : 
; 683  :     DumpDD_SETCOLORKEY(pd);

  01c04	e59d0030	 ldr         r0, [sp, #0x30]
  01c08	eb000000	 bl          |?DumpDD_SETCOLORKEY@@YAXPAU_DDHAL_SETCOLORKEYDATA@@@Z|

; 684  :     
; 685  : 
; 686  :     //  Default result
; 687  :     pd->ddRVal = DDERR_COLORKEYNOTSET;

  01c0c	e59d3030	 ldr         r3, [sp, #0x30]
  01c10	e2832014	 add         r2, r3, #0x14
  01c14	e59f3168	 ldr         r3, [pc, #0x168]
  01c18	e5823000	 str         r3, [r2]

; 688  : 
; 689  :     //  Set the desired color key for overlays
; 690  :     if( pd->dwFlags & DDCKEY_SRCOVERLAY )

  01c1c	e59d3030	 ldr         r3, [sp, #0x30]
  01c20	e2833008	 add         r3, r3, #8
  01c24	e5933000	 ldr         r3, [r3]
  01c28	e3130010	 tst         r3, #0x10
  01c2c	0a000016	 beq         |$LN7@HalSetColo|

; 691  :     {
; 692  :         //  Check for special values for disable
; 693  :         if( pd->ckNew.dwColorSpaceLowValue == -1 )

  01c30	e59d3030	 ldr         r3, [sp, #0x30]
  01c34	e283300c	 add         r3, r3, #0xC
  01c38	e5933000	 ldr         r3, [r3]
  01c3c	e3730001	 cmn         r3, #1
  01c40	1a000007	 bne         |$LN6@HalSetColo|

; 694  :         {
; 695  :             pd->ddRVal = pDDGPE->DisableColorKey();

  01c44	e59d0000	 ldr         r0, [sp]
  01c48	eb000000	 bl          |?DisableColorKey@OMAPDDGPE@@QAAKXZ|
  01c4c	e58d0010	 str         r0, [sp, #0x10]
  01c50	e59d3030	 ldr         r3, [sp, #0x30]
  01c54	e2832014	 add         r2, r3, #0x14
  01c58	e59d3010	 ldr         r3, [sp, #0x10]
  01c5c	e5823000	 str         r3, [r2]

; 696  :         }
; 697  :         else

  01c60	ea000009	 b           |$LN5@HalSetColo|
  01c64		 |$LN6@HalSetColo|

; 698  :         {        
; 699  :             pd->ddRVal = pDDGPE->SetSrcColorKey( pd->ckNew.dwColorSpaceLowValue );

  01c64	e59d3030	 ldr         r3, [sp, #0x30]
  01c68	e283300c	 add         r3, r3, #0xC
  01c6c	e5931000	 ldr         r1, [r3]
  01c70	e59d0000	 ldr         r0, [sp]
  01c74	eb000000	 bl          |?SetSrcColorKey@OMAPDDGPE@@QAAKK@Z|
  01c78	e58d0014	 str         r0, [sp, #0x14]
  01c7c	e59d3030	 ldr         r3, [sp, #0x30]
  01c80	e2832014	 add         r2, r3, #0x14
  01c84	e59d3014	 ldr         r3, [sp, #0x14]
  01c88	e5823000	 str         r3, [r2]
  01c8c		 |$LN5@HalSetColo|
  01c8c		 |$LN7@HalSetColo|

; 700  :         }
; 701  :     }
; 702  : 
; 703  :     if( pd->dwFlags & DDCKEY_DESTOVERLAY )

  01c8c	e59d3030	 ldr         r3, [sp, #0x30]
  01c90	e2833008	 add         r3, r3, #8
  01c94	e5933000	 ldr         r3, [r3]
  01c98	e3130004	 tst         r3, #4
  01c9c	0a000016	 beq         |$LN4@HalSetColo|

; 704  :     {
; 705  :         //  Check for special values for disable
; 706  :         if( pd->ckNew.dwColorSpaceLowValue == -1 )

  01ca0	e59d3030	 ldr         r3, [sp, #0x30]
  01ca4	e283300c	 add         r3, r3, #0xC
  01ca8	e5933000	 ldr         r3, [r3]
  01cac	e3730001	 cmn         r3, #1
  01cb0	1a000007	 bne         |$LN3@HalSetColo|

; 707  :         {
; 708  :             pd->ddRVal = pDDGPE->DisableColorKey();

  01cb4	e59d0000	 ldr         r0, [sp]
  01cb8	eb000000	 bl          |?DisableColorKey@OMAPDDGPE@@QAAKXZ|
  01cbc	e58d0018	 str         r0, [sp, #0x18]
  01cc0	e59d3030	 ldr         r3, [sp, #0x30]
  01cc4	e2832014	 add         r2, r3, #0x14
  01cc8	e59d3018	 ldr         r3, [sp, #0x18]
  01ccc	e5823000	 str         r3, [r2]

; 709  :         }
; 710  :         else

  01cd0	ea000009	 b           |$LN2@HalSetColo|
  01cd4		 |$LN3@HalSetColo|

; 711  :         {        
; 712  :             pd->ddRVal = pDDGPE->SetDestColorKey( pd->ckNew.dwColorSpaceLowValue );

  01cd4	e59d3030	 ldr         r3, [sp, #0x30]
  01cd8	e283300c	 add         r3, r3, #0xC
  01cdc	e5931000	 ldr         r1, [r3]
  01ce0	e59d0000	 ldr         r0, [sp]
  01ce4	eb000000	 bl          |?SetDestColorKey@OMAPDDGPE@@QAAKK@Z|
  01ce8	e58d001c	 str         r0, [sp, #0x1C]
  01cec	e59d3030	 ldr         r3, [sp, #0x30]
  01cf0	e2832014	 add         r2, r3, #0x14
  01cf4	e59d301c	 ldr         r3, [sp, #0x1C]
  01cf8	e5823000	 str         r3, [r2]
  01cfc		 |$LN2@HalSetColo|
  01cfc		 |$LN4@HalSetColo|

; 713  :         }
; 714  :     }
; 715  : 
; 716  :     //  SW BLT supports this color key type
; 717  :     if( pd->dwFlags & DDCKEY_SRCBLT )

  01cfc	e59d3030	 ldr         r3, [sp, #0x30]
  01d00	e2833008	 add         r3, r3, #8
  01d04	e5933000	 ldr         r3, [r3]
  01d08	e3130008	 tst         r3, #8
  01d0c	0a000006	 beq         |$LN1@HalSetColo|

; 718  :     {
; 719  :         pd->ddRVal = DDGPESetColorKey( pd );

  01d10	e59d0030	 ldr         r0, [sp, #0x30]
  01d14	eb000000	 bl          DDGPESetColorKey
  01d18	e58d0020	 str         r0, [sp, #0x20]
  01d1c	e59d3030	 ldr         r3, [sp, #0x30]
  01d20	e2832014	 add         r2, r3, #0x14
  01d24	e59d3020	 ldr         r3, [sp, #0x20]
  01d28	e5823000	 str         r3, [r2]
  01d2c		 |$LN1@HalSetColo|

; 720  :     }
; 721  : 
; 722  :           
; 723  :     DEBUGMSG(GPE_ZONE_DDRAW_HAL, (L"-HalSetColorKey() pd->ddRVal = 0x%x\r\n\r\n", pd->ddRVal));

  01d2c	e59f304c	 ldr         r3, [pc, #0x4C]
  01d30	e5933440	 ldr         r3, [r3, #0x440]
  01d34	e3130902	 tst         r3, #2, 18
  01d38	0a000007	 beq         |$LN12@HalSetColo|
  01d3c	e59d3030	 ldr         r3, [sp, #0x30]
  01d40	e2833014	 add         r3, r3, #0x14
  01d44	e5931000	 ldr         r1, [r3]
  01d48	e59f002c	 ldr         r0, [pc, #0x2C]
  01d4c	eb000000	 bl          NKDbgPrintfW
  01d50	e3a03001	 mov         r3, #1
  01d54	e58d3024	 str         r3, [sp, #0x24]
  01d58	ea000001	 b           |$LN13@HalSetColo|
  01d5c		 |$LN12@HalSetColo|
  01d5c	e3a03000	 mov         r3, #0
  01d60	e58d3024	 str         r3, [sp, #0x24]
  01d64		 |$LN13@HalSetColo|

; 724  :     
; 725  :     return DDHAL_DRIVER_HANDLED;

  01d64	e3a03001	 mov         r3, #1
  01d68	e58d3004	 str         r3, [sp, #4]

; 726  : }

  01d6c	e59d0004	 ldr         r0, [sp, #4]
  01d70	e28dd028	 add         sp, sp, #0x28
  01d74	e89d6000	 ldmia       sp, {sp, lr}
  01d78	e12fff1e	 bx          lr
  01d7c		 |$LN17@HalSetColo|
  01d7c		 |$LN18@HalSetColo|
  01d7c	00000000	 DCD         |??_C@_1FA@FGNLBGMN@?$AA?9?$AAH?$AAa?$AAl?$AAS?$AAe?$AAt?$AAC?$AAo?$AAl?$AAo?$AAr?$AAK?$AAe?$AAy?$AA?$CI?$AA?$CJ?$AA?5?$AAp?$AAd?$AA?9?$AA?$DO?$AAd?$AAd?$AAR?$AAV?$AAa?$AAl?$AA?5?$AA?$DN?$AA?5?$AA0@|
  01d80		 |$LN19@HalSetColo|
  01d80	00000000	 DCD         |dpCurSettings|
  01d84		 |$LN20@HalSetColo|
  01d84	88760190	 DCD         0x88760190
  01d88		 |$LN21@HalSetColo|
  01d88	00000000	 DCD         |??_C@_1GI@IPFGGBEP@?$AA?$CL?$AAH?$AAa?$AAl?$AAS?$AAe?$AAt?$AAC?$AAo?$AAl?$AAo?$AAr?$AAK?$AAe?$AAy?$AA?$CI?$AA?$CJ?$AA?5?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9@|
  01d8c		 |$M42738|

			 ENDP  ; |?HalSetColorKey@@YAKPAU_DDHAL_SETCOLORKEYDATA@@@Z|, HalSetColorKey

	EXPORT	|??_C@_1HC@GKGLFDHC@?$AA?9?$AAH?$AAa?$AAl?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAO?$AAv?$AAe?$AAr?$AAl?$AAa?$AAy?$AA?$CI?$AA?$CJ?$AA?5?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GM@DBJDJGNA@?$AA?$CL?$AAH?$AAa?$AAl?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAO?$AAv?$AAe?$AAr?$AAl?$AAa?$AAy?$AA?$CI?$AA?$CJ?$AA?5?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9@| [ DATA ] ; `string'
	EXPORT	|?HalUpdateOverlay@@YAKPAU_DDHAL_UPDATEOVERLAYDATA@@@Z| ; HalUpdateOverlay
	IMPORT	|?ShowOverlay@OMAPDDGPE@@QAAKPAVOMAPDDGPESurface@@PAUtagRECT@@1H@Z| ; OMAPDDGPE::ShowOverlay
	IMPORT	|?SetAlphaConst@OMAPDDGPE@@QAAKW4OMAP_DSS_COLORKEY@@K@Z| ; OMAPDDGPE::SetAlphaConst
	IMPORT	|?DumpDD_UPDATEOVERLAY@@YAXPAU_DDHAL_UPDATEOVERLAYDATA@@@Z| ; DumpDD_UPDATEOVERLAY

  00050			 AREA	 |.pdata|, PDATA
|$T42758| DCD	|$LN35@HalUpdateO|
	DCD	0x40012104

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HC@GKGLFDHC@?$AA?9?$AAH?$AAa?$AAl?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAO?$AAv?$AAe?$AAr?$AAl?$AAa?$AAy?$AA?$CI?$AA?$CJ?$AA?5?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF@| DCB "-"
	DCB	0x0, "H", 0x0, "a", 0x0, "l", 0x0, "U", 0x0, "p", 0x0, "d"
	DCB	0x0, "a", 0x0, "t", 0x0, "e", 0x0, "O", 0x0, "v", 0x0, "e"
	DCB	0x0, "r", 0x0, "l", 0x0, "a", 0x0, "y", 0x0, "(", 0x0, ")"
	DCB	0x0, " ", 0x0, "r", 0x0, "e", 0x0, "s", 0x0, "u", 0x0, "l"
	DCB	0x0, "t", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "x", 0x0, " ", 0x0, " ", 0x0, "p", 0x0, "d"
	DCB	0x0, "-", 0x0, ">", 0x0, "d", 0x0, "d", 0x0, "R", 0x0, "V"
	DCB	0x0, "a", 0x0, "l", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GM@DBJDJGNA@?$AA?$CL?$AAH?$AAa?$AAl?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAO?$AAv?$AAe?$AAr?$AAl?$AAa?$AAy?$AA?$CI?$AA?$CJ?$AA?5?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9@| DCB "+"
	DCB	0x0, "H", 0x0, "a", 0x0, "l", 0x0, "U", 0x0, "p", 0x0, "d"
	DCB	0x0, "a", 0x0, "t", 0x0, "e", 0x0, "O", 0x0, "v", 0x0, "e"
	DCB	0x0, "r", 0x0, "l", 0x0, "a", 0x0, "y", 0x0, "(", 0x0, ")"
	DCB	0x0, " ", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  01d8c			 AREA	 |.text|, CODE, ARM

  01d8c		 |?HalUpdateOverlay@@YAKPAU_DDHAL_UPDATEOVERLAYDATA@@@Z| PROC ; HalUpdateOverlay

; 733  : {

  01d8c		 |$LN35@HalUpdateO|
  01d8c	e1a0c00d	 mov         r12, sp
  01d90	e92d0001	 stmdb       sp!, {r0}
  01d94	e92d5000	 stmdb       sp!, {r12, lr}
  01d98	e24dd058	 sub         sp, sp, #0x58
  01d9c		 |$M42755|

; 734  :     OMAPDDGPE*          pDDGPE = (OMAPDDGPE*) GetGPE();

  01d9c	eb000000	 bl          GetGPE
  01da0	e58d001c	 str         r0, [sp, #0x1C]
  01da4	e59d301c	 ldr         r3, [sp, #0x1C]
  01da8	e58d3004	 str         r3, [sp, #4]

; 735  :     OMAPDDGPESurface*   pOverlaySurf = (OMAPDDGPESurface*) DDGPESurf::GetDDGPESurf(pd->lpDDSrcSurface);

  01dac	e59d3060	 ldr         r3, [sp, #0x60]
  01db0	e2833018	 add         r3, r3, #0x18
  01db4	e5930000	 ldr         r0, [r3]
  01db8	eb000000	 bl          |?GetDDGPESurf@DDGPESurf@@SAPAV1@PAU_DDRAWI_DDRAWSURFACE_LCL@@@Z|
  01dbc	e58d0020	 str         r0, [sp, #0x20]
  01dc0	e59d3020	 ldr         r3, [sp, #0x20]
  01dc4	e58d300c	 str         r3, [sp, #0xC]

; 736  :     BOOL                bMirror = (pd->dwFlags & DDOVER_MIRRORLEFTRIGHT) ? TRUE : FALSE;    

  01dc8	e59d3060	 ldr         r3, [sp, #0x60]
  01dcc	e283302c	 add         r3, r3, #0x2C
  01dd0	e5933000	 ldr         r3, [r3]
  01dd4	e3130a01	 tst         r3, #1, 20
  01dd8	0a000002	 beq         |$LN27@HalUpdateO|
  01ddc	e3a03001	 mov         r3, #1
  01de0	e58d3024	 str         r3, [sp, #0x24]
  01de4	ea000001	 b           |$LN28@HalUpdateO|
  01de8		 |$LN27@HalUpdateO|
  01de8	e3a03000	 mov         r3, #0
  01dec	e58d3024	 str         r3, [sp, #0x24]
  01df0		 |$LN28@HalUpdateO|
  01df0	e59d3024	 ldr         r3, [sp, #0x24]
  01df4	e58d3008	 str         r3, [sp, #8]

; 737  :     DWORD               result = DDHAL_DRIVER_NOTHANDLED;

  01df8	e3a03000	 mov         r3, #0
  01dfc	e58d3010	 str         r3, [sp, #0x10]

; 738  :    
; 739  :     DEBUGMSG(GPE_ZONE_DDRAW_HAL, (L"+HalUpdateOverlay() -------------------------------\r\n"));

  01e00	e59f3400	 ldr         r3, [pc, #0x400]
  01e04	e5933440	 ldr         r3, [r3, #0x440]
  01e08	e3130902	 tst         r3, #2, 18
  01e0c	0a000004	 beq         |$LN29@HalUpdateO|
  01e10	e59f03f4	 ldr         r0, [pc, #0x3F4]
  01e14	eb000000	 bl          NKDbgPrintfW
  01e18	e3a03001	 mov         r3, #1
  01e1c	e58d3028	 str         r3, [sp, #0x28]
  01e20	ea000001	 b           |$LN30@HalUpdateO|
  01e24		 |$LN29@HalUpdateO|
  01e24	e3a03000	 mov         r3, #0
  01e28	e58d3028	 str         r3, [sp, #0x28]
  01e2c		 |$LN30@HalUpdateO|

; 740  :     
; 741  :     DumpDD_UPDATEOVERLAY(pd);

  01e2c	e59d0060	 ldr         r0, [sp, #0x60]
  01e30	eb000000	 bl          |?DumpDD_UPDATEOVERLAY@@YAXPAU_DDHAL_UPDATEOVERLAYDATA@@@Z|

; 742  :     
; 743  : 
; 744  :     //  Set the desired color key for over-rides
; 745  :     if( pd->dwFlags & DDOVER_KEYSRCOVERRIDE )

  01e34	e59d3060	 ldr         r3, [sp, #0x60]
  01e38	e283302c	 add         r3, r3, #0x2C
  01e3c	e5933000	 ldr         r3, [r3]
  01e40	e3130c02	 tst         r3, #2, 24
  01e44	0a000012	 beq         |$LN24@HalUpdateO|

; 746  :     {
; 747  :         pd->ddRVal = pDDGPE->SetSrcColorKey( pd->overlayFX.dckSrcColorkey.dwColorSpaceLowValue );

  01e48	e59d3060	 ldr         r3, [sp, #0x60]
  01e4c	e2833044	 add         r3, r3, #0x44
  01e50	e5931000	 ldr         r1, [r3]
  01e54	e59d0004	 ldr         r0, [sp, #4]
  01e58	eb000000	 bl          |?SetSrcColorKey@OMAPDDGPE@@QAAKK@Z|
  01e5c	e58d002c	 str         r0, [sp, #0x2C]
  01e60	e59d3060	 ldr         r3, [sp, #0x60]
  01e64	e283204c	 add         r2, r3, #0x4C
  01e68	e59d302c	 ldr         r3, [sp, #0x2C]
  01e6c	e5823000	 str         r3, [r2]

; 748  :         result = DDHAL_DRIVER_HANDLED;

  01e70	e3a03001	 mov         r3, #1
  01e74	e58d3010	 str         r3, [sp, #0x10]

; 749  :         if (DD_OK != pd->ddRVal)

  01e78	e59d3060	 ldr         r3, [sp, #0x60]
  01e7c	e283304c	 add         r3, r3, #0x4C
  01e80	e5933000	 ldr         r3, [r3]
  01e84	e3530000	 cmp         r3, #0
  01e88	0a000001	 beq         |$LN23@HalUpdateO|
  01e8c	ea0000c7	 b           |$LN22@HalUpdateO|

; 750  :         {
; 751  :             goto Cleanup;

  01e90	ea0000c6	 b           |$Cleanup$42394|
  01e94		 |$LN23@HalUpdateO|
  01e94		 |$LN24@HalUpdateO|

; 752  :         }
; 753  :     }
; 754  : 
; 755  :     if( pd->dwFlags & DDOVER_KEYDESTOVERRIDE )

  01e94	e59d3060	 ldr         r3, [sp, #0x60]
  01e98	e283302c	 add         r3, r3, #0x2C
  01e9c	e5933000	 ldr         r3, [r3]
  01ea0	e3130080	 tst         r3, #0x80
  01ea4	0a000012	 beq         |$LN21@HalUpdateO|

; 756  :     {
; 757  :         pd->ddRVal = pDDGPE->SetDestColorKey( pd->overlayFX.dckDestColorkey.dwColorSpaceLowValue );

  01ea8	e59d3060	 ldr         r3, [sp, #0x60]
  01eac	e283303c	 add         r3, r3, #0x3C
  01eb0	e5931000	 ldr         r1, [r3]
  01eb4	e59d0004	 ldr         r0, [sp, #4]
  01eb8	eb000000	 bl          |?SetDestColorKey@OMAPDDGPE@@QAAKK@Z|
  01ebc	e58d0030	 str         r0, [sp, #0x30]
  01ec0	e59d3060	 ldr         r3, [sp, #0x60]
  01ec4	e283204c	 add         r2, r3, #0x4C
  01ec8	e59d3030	 ldr         r3, [sp, #0x30]
  01ecc	e5823000	 str         r3, [r2]

; 758  :         result = DDHAL_DRIVER_HANDLED;

  01ed0	e3a03001	 mov         r3, #1
  01ed4	e58d3010	 str         r3, [sp, #0x10]

; 759  :         if (DD_OK != pd->ddRVal)

  01ed8	e59d3060	 ldr         r3, [sp, #0x60]
  01edc	e283304c	 add         r3, r3, #0x4C
  01ee0	e5933000	 ldr         r3, [r3]
  01ee4	e3530000	 cmp         r3, #0
  01ee8	0a000001	 beq         |$LN20@HalUpdateO|
  01eec	ea0000af	 b           |$LN19@HalUpdateO|

; 760  :         {
; 761  :             goto Cleanup;

  01ef0	ea0000ae	 b           |$Cleanup$42394|
  01ef4		 |$LN20@HalUpdateO|
  01ef4		 |$LN21@HalUpdateO|

; 762  :         }
; 763  :     }
; 764  : 
; 765  :     if( pd->dwFlags & DDOVER_ALPHACONSTOVERRIDE )

  01ef4	e59d3060	 ldr         r3, [sp, #0x60]
  01ef8	e283302c	 add         r3, r3, #0x2C
  01efc	e5933000	 ldr         r3, [r3]
  01f00	e3130010	 tst         r3, #0x10
  01f04	0a000046	 beq         |$LN18@HalUpdateO|

; 766  :     {
; 767  :         //  If alpha const bit depth is set at 1 bits, disable constant alpha
; 768  :         if( pd->overlayFX.dwAlphaConstBitDepth == 1 )

  01f08	e59d3060	 ldr         r3, [sp, #0x60]
  01f0c	e2833034	 add         r3, r3, #0x34
  01f10	e5933000	 ldr         r3, [r3]
  01f14	e3530001	 cmp         r3, #1
  01f18	1a000001	 bne         |$LN17@HalUpdateO|

; 769  :         {
; 770  :             pDDGPE->DisableAlphaConst();

  01f1c	e59d0004	 ldr         r0, [sp, #4]
  01f20	eb000000	 bl          |?DisableAlphaConst@OMAPDDGPE@@QAAKXZ|
  01f24		 |$LN17@HalUpdateO|

; 771  :         }
; 772  :         
; 773  :         //  If alpha const bit depth is set at 8 bits, set GFX alpha to given value and VID2 to 100%
; 774  :         if( pd->overlayFX.dwAlphaConstBitDepth == 8 )

  01f24	e59d3060	 ldr         r3, [sp, #0x60]
  01f28	e2833034	 add         r3, r3, #0x34
  01f2c	e5933000	 ldr         r3, [r3]
  01f30	e3530008	 cmp         r3, #8
  01f34	1a000013	 bne         |$LN16@HalUpdateO|

; 775  :         {
; 776  :             pd->ddRVal = pDDGPE->SetAlphaConst( OMAP_DSS_COLORKEY_GLOBAL_ALPHA_GFX, pd->overlayFX.dwAlphaConst );

  01f38	e59d3060	 ldr         r3, [sp, #0x60]
  01f3c	e2833038	 add         r3, r3, #0x38
  01f40	e5932000	 ldr         r2, [r3]
  01f44	e3a01002	 mov         r1, #2
  01f48	e59d0004	 ldr         r0, [sp, #4]
  01f4c	eb000000	 bl          |?SetAlphaConst@OMAPDDGPE@@QAAKW4OMAP_DSS_COLORKEY@@K@Z|
  01f50	e58d0034	 str         r0, [sp, #0x34]
  01f54	e59d3060	 ldr         r3, [sp, #0x60]
  01f58	e283204c	 add         r2, r3, #0x4C
  01f5c	e59d3034	 ldr         r3, [sp, #0x34]
  01f60	e5823000	 str         r3, [r2]

; 777  :             pd->ddRVal = pDDGPE->SetAlphaConst( OMAP_DSS_COLORKEY_GLOBAL_ALPHA_VIDEO2, 0xff );

  01f64	e3a020ff	 mov         r2, #0xFF
  01f68	e3a01003	 mov         r1, #3
  01f6c	e59d0004	 ldr         r0, [sp, #4]
  01f70	eb000000	 bl          |?SetAlphaConst@OMAPDDGPE@@QAAKW4OMAP_DSS_COLORKEY@@K@Z|
  01f74	e58d0038	 str         r0, [sp, #0x38]
  01f78	e59d3060	 ldr         r3, [sp, #0x60]
  01f7c	e283204c	 add         r2, r3, #0x4C
  01f80	e59d3038	 ldr         r3, [sp, #0x38]
  01f84	e5823000	 str         r3, [r2]
  01f88		 |$LN16@HalUpdateO|

; 778  :         }
; 779  :         
; 780  :         //  If alpha const bit depth is set at 16 bits, set GFX and VID2 alphas to given values
; 781  :         if( pd->overlayFX.dwAlphaConstBitDepth == 16 )

  01f88	e59d3060	 ldr         r3, [sp, #0x60]
  01f8c	e2833034	 add         r3, r3, #0x34
  01f90	e5933000	 ldr         r3, [r3]
  01f94	e3530010	 cmp         r3, #0x10
  01f98	1a000018	 bne         |$LN15@HalUpdateO|

; 782  :         {
; 783  :             pd->ddRVal = pDDGPE->SetAlphaConst( OMAP_DSS_COLORKEY_GLOBAL_ALPHA_GFX, (pd->overlayFX.dwAlphaConst & 0x00ff) );

  01f9c	e59d3060	 ldr         r3, [sp, #0x60]
  01fa0	e2833038	 add         r3, r3, #0x38
  01fa4	e5933000	 ldr         r3, [r3]
  01fa8	e20320ff	 and         r2, r3, #0xFF
  01fac	e3a01002	 mov         r1, #2
  01fb0	e59d0004	 ldr         r0, [sp, #4]
  01fb4	eb000000	 bl          |?SetAlphaConst@OMAPDDGPE@@QAAKW4OMAP_DSS_COLORKEY@@K@Z|
  01fb8	e58d003c	 str         r0, [sp, #0x3C]
  01fbc	e59d3060	 ldr         r3, [sp, #0x60]
  01fc0	e283204c	 add         r2, r3, #0x4C
  01fc4	e59d303c	 ldr         r3, [sp, #0x3C]
  01fc8	e5823000	 str         r3, [r2]

; 784  :             pd->ddRVal = pDDGPE->SetAlphaConst( OMAP_DSS_COLORKEY_GLOBAL_ALPHA_VIDEO2, ((pd->overlayFX.dwAlphaConst >> 8) & 0x00ff) );

  01fcc	e59d3060	 ldr         r3, [sp, #0x60]
  01fd0	e2833038	 add         r3, r3, #0x38
  01fd4	e5933000	 ldr         r3, [r3]
  01fd8	e1a03803	 mov         r3, r3, lsl #16
  01fdc	e1a02c23	 mov         r2, r3, lsr #24
  01fe0	e3a01003	 mov         r1, #3
  01fe4	e59d0004	 ldr         r0, [sp, #4]
  01fe8	eb000000	 bl          |?SetAlphaConst@OMAPDDGPE@@QAAKW4OMAP_DSS_COLORKEY@@K@Z|
  01fec	e58d0040	 str         r0, [sp, #0x40]
  01ff0	e59d3060	 ldr         r3, [sp, #0x60]
  01ff4	e283204c	 add         r2, r3, #0x4C
  01ff8	e59d3040	 ldr         r3, [sp, #0x40]
  01ffc	e5823000	 str         r3, [r2]
  02000		 |$LN15@HalUpdateO|

; 785  :         }
; 786  :         
; 787  :         result = DDHAL_DRIVER_HANDLED;

  02000	e3a03001	 mov         r3, #1
  02004	e58d3010	 str         r3, [sp, #0x10]

; 788  :         if (DD_OK != pd->ddRVal)

  02008	e59d3060	 ldr         r3, [sp, #0x60]
  0200c	e283304c	 add         r3, r3, #0x4C
  02010	e5933000	 ldr         r3, [r3]
  02014	e3530000	 cmp         r3, #0
  02018	0a000001	 beq         |$LN14@HalUpdateO|
  0201c	ea000063	 b           |$LN13@HalUpdateO|

; 789  :         {
; 790  :             goto Cleanup;

  02020	ea000062	 b           |$Cleanup$42394|
  02024		 |$LN14@HalUpdateO|
  02024		 |$LN18@HalUpdateO|

; 791  :         }
; 792  :     }
; 793  : 
; 794  :     if ( pd->dwFlags & DDOVER_ALPHADEST )

  02024	e59d3060	 ldr         r3, [sp, #0x60]
  02028	e283302c	 add         r3, r3, #0x2C
  0202c	e5933000	 ldr         r3, [r3]
  02030	e3130001	 tst         r3, #1
  02034	0a00001a	 beq         |$LN12@HalUpdateO|

; 795  :     {
; 796  :         pd->ddRVal = pDDGPE->SetAlphaConst( OMAP_DSS_COLORKEY_GLOBAL_ALPHA_GFX, 0xff );

  02038	e3a020ff	 mov         r2, #0xFF
  0203c	e3a01002	 mov         r1, #2
  02040	e59d0004	 ldr         r0, [sp, #4]
  02044	eb000000	 bl          |?SetAlphaConst@OMAPDDGPE@@QAAKW4OMAP_DSS_COLORKEY@@K@Z|
  02048	e58d0044	 str         r0, [sp, #0x44]
  0204c	e59d3060	 ldr         r3, [sp, #0x60]
  02050	e283204c	 add         r2, r3, #0x4C
  02054	e59d3044	 ldr         r3, [sp, #0x44]
  02058	e5823000	 str         r3, [r2]

; 797  :         pd->ddRVal = pDDGPE->SetAlphaConst( OMAP_DSS_COLORKEY_GLOBAL_ALPHA_VIDEO2, 0xff );

  0205c	e3a020ff	 mov         r2, #0xFF
  02060	e3a01003	 mov         r1, #3
  02064	e59d0004	 ldr         r0, [sp, #4]
  02068	eb000000	 bl          |?SetAlphaConst@OMAPDDGPE@@QAAKW4OMAP_DSS_COLORKEY@@K@Z|
  0206c	e58d0048	 str         r0, [sp, #0x48]
  02070	e59d3060	 ldr         r3, [sp, #0x60]
  02074	e283204c	 add         r2, r3, #0x4C
  02078	e59d3048	 ldr         r3, [sp, #0x48]
  0207c	e5823000	 str         r3, [r2]

; 798  :         result = DDHAL_DRIVER_HANDLED;

  02080	e3a03001	 mov         r3, #1
  02084	e58d3010	 str         r3, [sp, #0x10]

; 799  :         if (DD_OK != pd->ddRVal)

  02088	e59d3060	 ldr         r3, [sp, #0x60]
  0208c	e283304c	 add         r3, r3, #0x4C
  02090	e5933000	 ldr         r3, [r3]
  02094	e3530000	 cmp         r3, #0
  02098	0a000001	 beq         |$LN11@HalUpdateO|
  0209c	ea000043	 b           |$LN10@HalUpdateO|

; 800  :         {
; 801  :             goto Cleanup;

  020a0	ea000042	 b           |$Cleanup$42394|
  020a4		 |$LN11@HalUpdateO|
  020a4		 |$LN12@HalUpdateO|

; 802  :         }
; 803  :     }
; 804  : 
; 805  :     //  Show overlay pipeline
; 806  :     if( pd->dwFlags & DDOVER_SHOW )

  020a4	e59d3060	 ldr         r3, [sp, #0x60]
  020a8	e283302c	 add         r3, r3, #0x2C
  020ac	e5933000	 ldr         r3, [r3]
  020b0	e3130b01	 tst         r3, #1, 22
  020b4	0a000019	 beq         |$LN9@HalUpdateO|

; 807  :     {
; 808  :         if (pOverlaySurf != NULL)

  020b8	e59d300c	 ldr         r3, [sp, #0xC]
  020bc	e3530000	 cmp         r3, #0
  020c0	0a00000d	 beq         |$LN8@HalUpdateO|

; 809  :         {
; 810  :             pd->ddRVal = pDDGPE->ShowOverlay( pOverlaySurf, &pd->rSrc, &pd->rDest, bMirror);

  020c4	e59d3008	 ldr         r3, [sp, #8]
  020c8	e58d3000	 str         r3, [sp]
  020cc	e59d3060	 ldr         r3, [sp, #0x60]
  020d0	e2833008	 add         r3, r3, #8
  020d4	e59d2060	 ldr         r2, [sp, #0x60]
  020d8	e282201c	 add         r2, r2, #0x1C
  020dc	e59d100c	 ldr         r1, [sp, #0xC]
  020e0	e59d0004	 ldr         r0, [sp, #4]
  020e4	eb000000	 bl          |?ShowOverlay@OMAPDDGPE@@QAAKPAVOMAPDDGPESurface@@PAUtagRECT@@1H@Z|
  020e8	e58d004c	 str         r0, [sp, #0x4C]
  020ec	e59d3060	 ldr         r3, [sp, #0x60]
  020f0	e283204c	 add         r2, r3, #0x4C
  020f4	e59d304c	 ldr         r3, [sp, #0x4C]
  020f8	e5823000	 str         r3, [r2]
  020fc		 |$LN8@HalUpdateO|

; 811  :         }
; 812  :         result = DDHAL_DRIVER_HANDLED;

  020fc	e3a03001	 mov         r3, #1
  02100	e58d3010	 str         r3, [sp, #0x10]

; 813  :         if (DD_OK != pd->ddRVal)

  02104	e59d3060	 ldr         r3, [sp, #0x60]
  02108	e283304c	 add         r3, r3, #0x4C
  0210c	e5933000	 ldr         r3, [r3]
  02110	e3530000	 cmp         r3, #0
  02114	0a000001	 beq         |$LN7@HalUpdateO|
  02118	ea000024	 b           |$LN6@HalUpdateO|

; 814  :         {
; 815  :             goto Cleanup;

  0211c	ea000023	 b           |$Cleanup$42394|
  02120		 |$LN7@HalUpdateO|
  02120		 |$LN9@HalUpdateO|

; 816  :         }
; 817  :     }  
; 818  : 
; 819  :     //  Hide overlay pipeline
; 820  :     if( pd->dwFlags & DDOVER_HIDE )

  02120	e59d3060	 ldr         r3, [sp, #0x60]
  02124	e283302c	 add         r3, r3, #0x2C
  02128	e5933000	 ldr         r3, [r3]
  0212c	e3130020	 tst         r3, #0x20
  02130	0a000013	 beq         |$LN5@HalUpdateO|

; 821  :     {
; 822  :         if (pOverlaySurf != NULL)

  02134	e59d300c	 ldr         r3, [sp, #0xC]
  02138	e3530000	 cmp         r3, #0
  0213c	0a000007	 beq         |$LN4@HalUpdateO|

; 823  :         {
; 824  :             pd->ddRVal = pDDGPE->HideOverlay( pOverlaySurf );

  02140	e59d100c	 ldr         r1, [sp, #0xC]
  02144	e59d0004	 ldr         r0, [sp, #4]
  02148	eb000000	 bl          |?HideOverlay@OMAPDDGPE@@QAAKPAVOMAPDDGPESurface@@@Z|
  0214c	e58d0050	 str         r0, [sp, #0x50]
  02150	e59d3060	 ldr         r3, [sp, #0x60]
  02154	e283204c	 add         r2, r3, #0x4C
  02158	e59d3050	 ldr         r3, [sp, #0x50]
  0215c	e5823000	 str         r3, [r2]
  02160		 |$LN4@HalUpdateO|

; 825  :         }
; 826  :         result = DDHAL_DRIVER_HANDLED;

  02160	e3a03001	 mov         r3, #1
  02164	e58d3010	 str         r3, [sp, #0x10]

; 827  :         if (DD_OK != pd->ddRVal)

  02168	e59d3060	 ldr         r3, [sp, #0x60]
  0216c	e283304c	 add         r3, r3, #0x4C
  02170	e5933000	 ldr         r3, [r3]
  02174	e3530000	 cmp         r3, #0
  02178	0a000001	 beq         |$LN3@HalUpdateO|
  0217c	ea00000b	 b           |$LN2@HalUpdateO|

; 828  :         {
; 829  :             goto Cleanup;

  02180	ea00000a	 b           |$Cleanup$42394|
  02184		 |$LN3@HalUpdateO|
  02184		 |$LN5@HalUpdateO|

; 830  :         }
; 831  :     }
; 832  : 
; 833  :     if( pd->dwFlags == 0 )

  02184	e59d3060	 ldr         r3, [sp, #0x60]
  02188	e283302c	 add         r3, r3, #0x2C
  0218c	e5933000	 ldr         r3, [r3]
  02190	e3530000	 cmp         r3, #0
  02194	1a000005	 bne         |$LN1@HalUpdateO|

; 834  :     {
; 835  :         pd->ddRVal = 0;

  02198	e59d3060	 ldr         r3, [sp, #0x60]
  0219c	e283204c	 add         r2, r3, #0x4C
  021a0	e3a03000	 mov         r3, #0
  021a4	e5823000	 str         r3, [r2]

; 836  :         result = DDHAL_DRIVER_HANDLED;

  021a8	e3a03001	 mov         r3, #1
  021ac	e58d3010	 str         r3, [sp, #0x10]
  021b0		 |$LN1@HalUpdateO|
  021b0		 |$LN2@HalUpdateO|
  021b0		 |$LN6@HalUpdateO|
  021b0		 |$LN10@HalUpdateO|
  021b0		 |$LN13@HalUpdateO|
  021b0		 |$LN19@HalUpdateO|
  021b0		 |$LN22@HalUpdateO|
  021b0		 |$Cleanup$42394|

; 837  :     }
; 838  : 
; 839  : 
; 840  : Cleanup:
; 841  :     DEBUGMSG(GPE_ZONE_DDRAW_HAL, (L"-HalUpdateOverlay() result = 0x%x  pd->ddRVal = 0x%x\r\n\r\n", result, pd->ddRVal));

  021b0	e59f3050	 ldr         r3, [pc, #0x50]
  021b4	e5933440	 ldr         r3, [r3, #0x440]
  021b8	e3130902	 tst         r3, #2, 18
  021bc	0a000008	 beq         |$LN31@HalUpdateO|
  021c0	e59d3060	 ldr         r3, [sp, #0x60]
  021c4	e283304c	 add         r3, r3, #0x4C
  021c8	e5932000	 ldr         r2, [r3]
  021cc	e59d1010	 ldr         r1, [sp, #0x10]
  021d0	e59f002c	 ldr         r0, [pc, #0x2C]
  021d4	eb000000	 bl          NKDbgPrintfW
  021d8	e3a03001	 mov         r3, #1
  021dc	e58d3054	 str         r3, [sp, #0x54]
  021e0	ea000001	 b           |$LN32@HalUpdateO|
  021e4		 |$LN31@HalUpdateO|
  021e4	e3a03000	 mov         r3, #0
  021e8	e58d3054	 str         r3, [sp, #0x54]
  021ec		 |$LN32@HalUpdateO|

; 842  :     
; 843  :     return result;

  021ec	e59d3010	 ldr         r3, [sp, #0x10]
  021f0	e58d3018	 str         r3, [sp, #0x18]

; 844  : }

  021f4	e59d0018	 ldr         r0, [sp, #0x18]
  021f8	e28dd058	 add         sp, sp, #0x58
  021fc	e89d6000	 ldmia       sp, {sp, lr}
  02200	e12fff1e	 bx          lr
  02204		 |$LN36@HalUpdateO|
  02204		 |$LN37@HalUpdateO|
  02204	00000000	 DCD         |??_C@_1HC@GKGLFDHC@?$AA?9?$AAH?$AAa?$AAl?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAO?$AAv?$AAe?$AAr?$AAl?$AAa?$AAy?$AA?$CI?$AA?$CJ?$AA?5?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF@|
  02208		 |$LN38@HalUpdateO|
  02208	00000000	 DCD         |dpCurSettings|
  0220c		 |$LN39@HalUpdateO|
  0220c	00000000	 DCD         |??_C@_1GM@DBJDJGNA@?$AA?$CL?$AAH?$AAa?$AAl?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAO?$AAv?$AAe?$AAr?$AAl?$AAa?$AAy?$AA?$CI?$AA?$CJ?$AA?5?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9@|
  02210		 |$M42756|

			 ENDP  ; |?HalUpdateOverlay@@YAKPAU_DDHAL_UPDATEOVERLAYDATA@@@Z|, HalUpdateOverlay

	EXPORT	|?HalSetOverlayPosition@@YAKPAU_DDHAL_SETOVERLAYPOSITIONDATA@@@Z| ; HalSetOverlayPosition
	IMPORT	|?MoveOverlay@OMAPDDGPE@@QAAKPAVOMAPDDGPESurface@@JJ@Z| ; OMAPDDGPE::MoveOverlay

  00058			 AREA	 |.pdata|, PDATA
|$T42768| DCD	|$LN5@HalSetOver|
	DCD	0x40002304
; Function compile flags: /Odtp

  02210			 AREA	 |.text|, CODE, ARM

  02210		 |?HalSetOverlayPosition@@YAKPAU_DDHAL_SETOVERLAYPOSITIONDATA@@@Z| PROC ; HalSetOverlayPosition

; 851  : {

  02210		 |$LN5@HalSetOver|
  02210	e1a0c00d	 mov         r12, sp
  02214	e92d0001	 stmdb       sp!, {r0}
  02218	e92d5000	 stmdb       sp!, {r12, lr}
  0221c	e24dd018	 sub         sp, sp, #0x18
  02220		 |$M42765|

; 852  :     OMAPDDGPE*          pDDGPE = (OMAPDDGPE*) GetGPE();

  02220	eb000000	 bl          GetGPE
  02224	e58d000c	 str         r0, [sp, #0xC]
  02228	e59d300c	 ldr         r3, [sp, #0xC]
  0222c	e58d3000	 str         r3, [sp]

; 853  :     OMAPDDGPESurface*   pOverlaySurf = (OMAPDDGPESurface*) DDGPESurf::GetDDGPESurf(pd->lpDDSrcSurface);

  02230	e59d3020	 ldr         r3, [sp, #0x20]
  02234	e2833004	 add         r3, r3, #4
  02238	e5930000	 ldr         r0, [r3]
  0223c	eb000000	 bl          |?GetDDGPESurf@DDGPESurf@@SAPAV1@PAU_DDRAWI_DDRAWSURFACE_LCL@@@Z|
  02240	e58d0010	 str         r0, [sp, #0x10]
  02244	e59d3010	 ldr         r3, [sp, #0x10]
  02248	e58d3004	 str         r3, [sp, #4]

; 854  :     
; 855  :     //  Update the overlay position
; 856  :     pd->ddRVal = pDDGPE->MoveOverlay( pOverlaySurf, pd->lXPos, pd->lYPos );

  0224c	e59d3020	 ldr         r3, [sp, #0x20]
  02250	e2833010	 add         r3, r3, #0x10
  02254	e5933000	 ldr         r3, [r3]
  02258	e59d2020	 ldr         r2, [sp, #0x20]
  0225c	e282200c	 add         r2, r2, #0xC
  02260	e5922000	 ldr         r2, [r2]
  02264	e59d1004	 ldr         r1, [sp, #4]
  02268	e59d0000	 ldr         r0, [sp]
  0226c	eb000000	 bl          |?MoveOverlay@OMAPDDGPE@@QAAKPAVOMAPDDGPESurface@@JJ@Z|
  02270	e58d0014	 str         r0, [sp, #0x14]
  02274	e59d3020	 ldr         r3, [sp, #0x20]
  02278	e2832014	 add         r2, r3, #0x14
  0227c	e59d3014	 ldr         r3, [sp, #0x14]
  02280	e5823000	 str         r3, [r2]

; 857  : 
; 858  :     return DDHAL_DRIVER_HANDLED;

  02284	e3a03001	 mov         r3, #1
  02288	e58d3008	 str         r3, [sp, #8]

; 859  : }

  0228c	e59d0008	 ldr         r0, [sp, #8]
  02290	e28dd018	 add         sp, sp, #0x18
  02294	e89d6000	 ldmia       sp, {sp, lr}
  02298	e12fff1e	 bx          lr
  0229c		 |$M42766|

			 ENDP  ; |?HalSetOverlayPosition@@YAKPAU_DDHAL_SETOVERLAYPOSITIONDATA@@@Z|, HalSetOverlayPosition

	EXPORT	|?HalWaitForVerticalBlank@@YAKPAU_DDHAL_WAITFORVERTICALBLANKDATA@@@Z| ; HalWaitForVerticalBlank

  00060			 AREA	 |.pdata|, PDATA
|$T42774| DCD	|$LN8@HalWaitFor|
	DCD	0x40003404
; Function compile flags: /Odtp

  0229c			 AREA	 |.text|, CODE, ARM

  0229c		 |?HalWaitForVerticalBlank@@YAKPAU_DDHAL_WAITFORVERTICALBLANKDATA@@@Z| PROC ; HalWaitForVerticalBlank

; 866  : {

  0229c		 |$LN8@HalWaitFor|
  0229c	e1a0c00d	 mov         r12, sp
  022a0	e92d0001	 stmdb       sp!, {r0}
  022a4	e92d5000	 stmdb       sp!, {r12, lr}
  022a8	e24dd010	 sub         sp, sp, #0x10
  022ac		 |$M42771|

; 867  :     OMAPDDGPE*          pDDGPE = (OMAPDDGPE*) GetGPE();

  022ac	eb000000	 bl          GetGPE
  022b0	e58d0008	 str         r0, [sp, #8]
  022b4	e59d3008	 ldr         r3, [sp, #8]
  022b8	e58d3000	 str         r3, [sp]

; 868  : 
; 869  :     if(lpwfvbd->dwFlags & DDWAITVB_I_TESTVB)

  022bc	e59d3018	 ldr         r3, [sp, #0x18]
  022c0	e2833004	 add         r3, r3, #4
  022c4	e5933000	 ldr         r3, [r3]
  022c8	e313011a	 tst         r3, #0x1A, 2
  022cc	0a00000b	 beq         |$LN3@HalWaitFor|

; 870  :     {
; 871  :         lpwfvbd->bIsInVB = pDDGPE->InVBlank();

  022d0	e59d3000	 ldr         r3, [sp]
  022d4	e5933000	 ldr         r3, [r3]
  022d8	e2833030	 add         r3, r3, #0x30
  022dc	e59d0000	 ldr         r0, [sp]
  022e0	e5933000	 ldr         r3, [r3]
  022e4	e1a0e00f	 mov         lr, pc
  022e8	e12fff13	 bx          r3
  022ec	e58d000c	 str         r0, [sp, #0xC]
  022f0	e59d3018	 ldr         r3, [sp, #0x18]
  022f4	e2832008	 add         r2, r3, #8
  022f8	e59d300c	 ldr         r3, [sp, #0xC]
  022fc	e5823000	 str         r3, [r2]
  02300		 |$LN3@HalWaitFor|

; 872  :     }
; 873  :     
; 874  :     //DSS only interrupts at the beginning of vsync.
; 875  :     //OMAP3xxx does not have a way to query if we are out of vertical blank interval
; 876  :     //the only information is the current scanline. 
; 877  :     if((lpwfvbd->dwFlags & DDWAITVB_BLOCKEND) ||
; 878  :         (lpwfvbd->dwFlags & DDWAITVB_BLOCKBEGIN))

  02300	e59d3018	 ldr         r3, [sp, #0x18]
  02304	e2833004	 add         r3, r3, #4
  02308	e5933000	 ldr         r3, [r3]
  0230c	e3130004	 tst         r3, #4
  02310	1a000004	 bne         |$LN1@HalWaitFor|
  02314	e59d3018	 ldr         r3, [sp, #0x18]
  02318	e2833004	 add         r3, r3, #4
  0231c	e5933000	 ldr         r3, [r3]
  02320	e3130001	 tst         r3, #1
  02324	0a000006	 beq         |$LN2@HalWaitFor|
  02328		 |$LN1@HalWaitFor|

; 879  :     {
; 880  :         pDDGPE->WaitForVBlank();

  02328	e59d3000	 ldr         r3, [sp]
  0232c	e5933000	 ldr         r3, [r3]
  02330	e2833054	 add         r3, r3, #0x54
  02334	e59d0000	 ldr         r0, [sp]
  02338	e5933000	 ldr         r3, [r3]
  0233c	e1a0e00f	 mov         lr, pc
  02340	e12fff13	 bx          r3
  02344		 |$LN2@HalWaitFor|

; 881  :     }
; 882  : 
; 883  :     lpwfvbd->ddRVal = DD_OK;

  02344	e59d3018	 ldr         r3, [sp, #0x18]
  02348	e283200c	 add         r2, r3, #0xC
  0234c	e3a03000	 mov         r3, #0
  02350	e5823000	 str         r3, [r2]

; 884  :     return DDHAL_DRIVER_HANDLED;

  02354	e3a03001	 mov         r3, #1
  02358	e58d3004	 str         r3, [sp, #4]

; 885  : 
; 886  : 
; 887  : }

  0235c	e59d0004	 ldr         r0, [sp, #4]
  02360	e28dd010	 add         sp, sp, #0x10
  02364	e89d6000	 ldmia       sp, {sp, lr}
  02368	e12fff1e	 bx          lr
  0236c		 |$M42772|

			 ENDP  ; |?HalWaitForVerticalBlank@@YAKPAU_DDHAL_WAITFORVERTICALBLANKDATA@@@Z|, HalWaitForVerticalBlank

	END
