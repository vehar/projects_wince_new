; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\DSS\DDGPE\omap_ddsurf.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.rdata|, DATA, READONLY
|FourCCDescriptionTable| DCD 0x32595559
	DCD	0x10
	DCD	0xff00ff
	DCD	0xff00
	DCD	0xff000000
	DCD	0x56595559
	DCD	0x10
	DCD	0xff00ff
	DCD	0xff00
	DCD	0xff000000
	DCD	0x55595659
	DCD	0x10
	DCD	0xff00ff00
	DCD	0xff
	DCD	0xff0000
	DCD	0x59565955
	DCD	0x10
	DCD	0xff00ff00
	DCD	0xff
	DCD	0xff0000
	DCD	0x36315659
	DCD	0x10
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x32315659
	DCD	0xc
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x3231564e
	DCD	0xc
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x30323449
	DCD	0xc
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x56555949
	DCD	0xc
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	EXPORT	|?SetRSZParams@OMAPSurface@@QAAXURSZParams_t@@@Z| ; OMAPSurface::SetRSZParams
	EXPORT	|?ResizeParams@OMAPSurface@@QAAPAURSZParams_t@@XZ| ; OMAPSurface::ResizeParams
	EXPORT	|?OmapSurface@OMAPDDGPESurface@@QAAPAVOMAPSurface@@XZ| ; OMAPDDGPESurface::OmapSurface
	EXPORT	|?CopySurfaceParams@OMAPDDGPE@@QAAHPAVOMAPDDGPESurface@@0@Z| ; OMAPDDGPE::CopySurfaceParams
	IMPORT	|?SetRSZHandle@OMAPSurface@@QAAXPAXH@Z|	; OMAPSurface::SetRSZHandle
	IMPORT	|?GetRSZHandle@OMAPSurface@@QAAPAXH@Z|	; OMAPSurface::GetRSZHandle
	IMPORT	|?UseResizer@OMAPSurface@@QAAHH@Z|	; OMAPSurface::UseResizer
	IMPORT	|?isResizerEnabled@OMAPSurface@@QAAHXZ|	; OMAPSurface::isResizerEnabled
	IMPORT	|memcpy|

  00000			 AREA	 |.pdata|, PDATA
|$T42471| DCD	|$LN5@CopySurfac|
	DCD	0x40003504
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\ddgpe\omap_ddsurf.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?CopySurfaceParams@OMAPDDGPE@@QAAHPAVOMAPDDGPESurface@@0@Z| PROC ; OMAPDDGPE::CopySurfaceParams

; 17   : {

  00000		 |$LN5@CopySurfac|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0007	 stmdb       sp!, {r0 - r2}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd084	 sub         sp, sp, #0x84
  00010		 |$M42468|

; 18   :     OMAPSurface * pOMAPSurfSrc = pSurfSrc->OmapSurface();

  00010	e59d0090	 ldr         r0, [sp, #0x90]
  00014	eb000000	 bl          |?OmapSurface@OMAPDDGPESurface@@QAAPAVOMAPSurface@@XZ|
  00018	e58d0068	 str         r0, [sp, #0x68]
  0001c	e59d3068	 ldr         r3, [sp, #0x68]
  00020	e58d3058	 str         r3, [sp, #0x58]

; 19   :     OMAPSurface * pOMAPSurfDest = pSurfDest->OmapSurface();

  00024	e59d0094	 ldr         r0, [sp, #0x94]
  00028	eb000000	 bl          |?OmapSurface@OMAPDDGPESurface@@QAAPAVOMAPSurface@@XZ|
  0002c	e58d006c	 str         r0, [sp, #0x6C]
  00030	e59d306c	 ldr         r3, [sp, #0x6C]
  00034	e58d3060	 str         r3, [sp, #0x60]

; 20   :     BOOL useReszier;
; 21   : 
; 22   :     useReszier=pOMAPSurfDest->UseResizer(pOMAPSurfSrc->isResizerEnabled());    

  00038	e59d0058	 ldr         r0, [sp, #0x58]
  0003c	eb000000	 bl          |?isResizerEnabled@OMAPSurface@@QAAHXZ|
  00040	e58d0070	 str         r0, [sp, #0x70]
  00044	e59d1070	 ldr         r1, [sp, #0x70]
  00048	e59d0060	 ldr         r0, [sp, #0x60]
  0004c	eb000000	 bl          |?UseResizer@OMAPSurface@@QAAHH@Z|
  00050	e58d0074	 str         r0, [sp, #0x74]
  00054	e59d3074	 ldr         r3, [sp, #0x74]
  00058	e58d305c	 str         r3, [sp, #0x5C]

; 23   :     pOMAPSurfDest->SetRSZParams(*(pOMAPSurfSrc->ResizeParams()));

  0005c	e59d0058	 ldr         r0, [sp, #0x58]
  00060	eb000000	 bl          |?ResizeParams@OMAPSurface@@QAAPAURSZParams_t@@XZ|
  00064	e58d0078	 str         r0, [sp, #0x78]
  00068	e59d3078	 ldr         r3, [sp, #0x78]
  0006c	e58d307c	 str         r3, [sp, #0x7C]
  00070	e28d0000	 add         r0, sp, #0
  00074	e59d307c	 ldr         r3, [sp, #0x7C]
  00078	e283100c	 add         r1, r3, #0xC
  0007c	e3a02058	 mov         r2, #0x58
  00080	eb000000	 bl          memcpy
  00084	e59d307c	 ldr         r3, [sp, #0x7C]
  00088	e5931000	 ldr         r1, [r3]
  0008c	e5932004	 ldr         r2, [r3, #4]
  00090	e5933008	 ldr         r3, [r3, #8]
  00094	e59d0060	 ldr         r0, [sp, #0x60]
  00098	eb000000	 bl          |?SetRSZParams@OMAPSurface@@QAAXURSZParams_t@@@Z|

; 24   :     pOMAPSurfDest->SetRSZHandle(pOMAPSurfSrc->GetRSZHandle(FALSE),FALSE);   

  0009c	e3a01000	 mov         r1, #0
  000a0	e59d0058	 ldr         r0, [sp, #0x58]
  000a4	eb000000	 bl          |?GetRSZHandle@OMAPSurface@@QAAPAXH@Z|
  000a8	e58d0080	 str         r0, [sp, #0x80]
  000ac	e3a02000	 mov         r2, #0
  000b0	e59d1080	 ldr         r1, [sp, #0x80]
  000b4	e59d0060	 ldr         r0, [sp, #0x60]
  000b8	eb000000	 bl          |?SetRSZHandle@OMAPSurface@@QAAXPAXH@Z|

; 25   : 
; 26   :     return TRUE;

  000bc	e3a03001	 mov         r3, #1
  000c0	e58d3064	 str         r3, [sp, #0x64]

; 27   : }

  000c4	e59d0064	 ldr         r0, [sp, #0x64]
  000c8	e28dd084	 add         sp, sp, #0x84
  000cc	e89d6000	 ldmia       sp, {sp, lr}
  000d0	e12fff1e	 bx          lr
  000d4		 |$M42469|

			 ENDP  ; |?CopySurfaceParams@OMAPDDGPE@@QAAHPAVOMAPDDGPESurface@@0@Z|, OMAPDDGPE::CopySurfaceParams

; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\inc\dssai.h

  00000			 AREA	 |.pdata|, PDATA
|$T42477| DCD	|$LN5@ResizePara|
	DCD	0x40000b04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ResizeParams@OMAPSurface@@QAAPAURSZParams_t@@XZ| PROC ; OMAPSurface::ResizeParams

; 772  :     RSZParams_t *           ResizeParams() { return &m_sRSZParams; }

  00000		 |$LN5@ResizePara|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M42474|
  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e2833038	 add         r3, r3, #0x38
  00018	e58d3000	 str         r3, [sp]
  0001c	e59d0000	 ldr         r0, [sp]
  00020	e28dd004	 add         sp, sp, #4
  00024	e89d6000	 ldmia       sp, {sp, lr}
  00028	e12fff1e	 bx          lr
  0002c		 |$M42475|

			 ENDP  ; |?ResizeParams@OMAPSurface@@QAAPAURSZParams_t@@XZ|, OMAPSurface::ResizeParams


  00000			 AREA	 |.pdata|, PDATA
|$T42484| DCD	|$LN5@SetRSZPara|
	DCD	0x40000a03
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetRSZParams@OMAPSurface@@QAAXURSZParams_t@@@Z| PROC ; OMAPSurface::SetRSZParams

; 774  :     VOID                    SetRSZParams(RSZParams_t rszParams) { m_sRSZParams = rszParams; }

  00000		 |$LN5@SetRSZPara|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d000f	 stmdb       sp!, {r0 - r3}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M42481|
  0000c	e59d3008	 ldr         r3, [sp, #8]
  00010	e2830038	 add         r0, r3, #0x38
  00014	e28d100c	 add         r1, sp, #0xC
  00018	e3a02064	 mov         r2, #0x64
  0001c	eb000000	 bl          memcpy
  00020	e89d6000	 ldmia       sp, {sp, lr}
  00024	e12fff1e	 bx          lr
  00028		 |$M42482|

			 ENDP  ; |?SetRSZParams@OMAPSurface@@QAAXURSZParams_t@@@Z|, OMAPSurface::SetRSZParams

; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\inc\omap_ddgpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T42492| DCD	|$LN5@OmapSurfac|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?OmapSurface@OMAPDDGPESurface@@QAAPAVOMAPSurface@@XZ| PROC ; OMAPDDGPESurface::OmapSurface

; 102  :     OMAPSurface*        OmapSurface() { return m_pSurface; }

  00000		 |$LN5@OmapSurfac|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M42489|
  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e283307c	 add         r3, r3, #0x7C
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3000	 str         r3, [sp]
  00020	e59d0000	 ldr         r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M42490|

			 ENDP  ; |?OmapSurface@OMAPDDGPESurface@@QAAPAVOMAPSurface@@XZ|, OMAPDDGPESurface::OmapSurface

	EXPORT	|??_C@_1EG@NBDJAOBL@?$AAG?$AAD?$AAI?$AA?5?$AAA?$AAl?$AAl?$AAo?$AAc?$AAS?$AAu?$AAr?$AAf?$AAa?$AAc?$AAe?$AA?5?$AA?9?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAM?$AAe?$AAm?$AAo?$AAr?$AAy@| [ DATA ] ; `string'
	EXPORT	|?Buffer@GPESurf@@QAAPAXXZ|		; GPESurf::Buffer
	EXPORT	|??_C@_1EO@LKDFDMHH@?$AAO?$AAM?$AAA?$AAP?$AA?5?$AAG?$AAD?$AAI?$AA?5?$AAA?$AAl?$AAl?$AAo?$AAc?$AAS?$AAu?$AAr?$AAf?$AAa?$AAc?$AAe?$AA?5?$AA?9?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAM@| [ DATA ] ; `string'
	EXPORT	|??0OMAPDDGPESurface@@QAA@PAVOMAPSurfaceManager@@PAVOMAPSurface@@@Z| ; OMAPDDGPESurface::OMAPDDGPESurface
	EXPORT	|??_C@_1FK@FECNOPPG@?$AAO?$AAM?$AAA?$AAP?$AA?5?$AAG?$AAD?$AAI?$AA?5?$AAA?$AAl?$AAl?$AAo?$AAc?$AAS?$AAu?$AAr?$AAf?$AAa?$AAc?$AAe?$AA?5?$AA?9?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAV@| [ DATA ] ; `string'
	EXPORT	|?PixelFormat@OMAPSurface@@QAA?AW4OMAP_DSS_PIXELFORMAT@@XZ| ; OMAPSurface::PixelFormat
	EXPORT	|?Format@GPESurf@@QAA?AW4EGPEFormat@@XZ| ; GPESurf::Format
	EXPORT	|?AllocSurface@OMAPDDGPE@@UAAJPAPAVGPESurf@@HHW4EGPEFormat@@H@Z| ; OMAPDDGPE::AllocSurface
	IMPORT	|??0GPESurf@@QAA@HHW4EGPEFormat@@@Z|	; GPESurf::GPESurf
	IMPORT	|??2@YAPAXI@Z|				; operator new
	IMPORT	|NKDbgPrintfW|
	IMPORT	|dpCurSettings|

  00008			 AREA	 |.pdata|, PDATA
|$T42521| DCD	|$LN27@AllocSurfa|
	DCD	0x4000dc04
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\ddgpe\omap_ddsurf.cpp

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EG@NBDJAOBL@?$AAG?$AAD?$AAI?$AA?5?$AAA?$AAl?$AAl?$AAo?$AAc?$AAS?$AAu?$AAr?$AAf?$AAa?$AAc?$AAe?$AA?5?$AA?9?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAM?$AAe?$AAm?$AAo?$AAr?$AAy@| DCB "G"
	DCB	0x0, "D", 0x0, "I", 0x0, " ", 0x0, "A", 0x0, "l", 0x0, "l"
	DCB	0x0, "o", 0x0, "c", 0x0, "S", 0x0, "u", 0x0, "r", 0x0, "f"
	DCB	0x0, "a", 0x0, "c", 0x0, "e", 0x0, " ", 0x0, "-", 0x0, " "
	DCB	0x0, "O", 0x0, "u", 0x0, "t", 0x0, " ", 0x0, "o", 0x0, "f"
	DCB	0x0, " ", 0x0, "M", 0x0, "e", 0x0, "m", 0x0, "o", 0x0, "r"
	DCB	0x0, "y", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EO@LKDFDMHH@?$AAO?$AAM?$AAA?$AAP?$AA?5?$AAG?$AAD?$AAI?$AA?5?$AAA?$AAl?$AAl?$AAo?$AAc?$AAS?$AAu?$AAr?$AAf?$AAa?$AAc?$AAe?$AA?5?$AA?9?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAM@| DCB "O"
	DCB	0x0, "M", 0x0, "A", 0x0, "P", 0x0, " ", 0x0, "G", 0x0, "D"
	DCB	0x0, "I", 0x0, " ", 0x0, "A", 0x0, "l", 0x0, "l", 0x0, "o"
	DCB	0x0, "c", 0x0, "S", 0x0, "u", 0x0, "r", 0x0, "f", 0x0, "a"
	DCB	0x0, "c", 0x0, "e", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "O"
	DCB	0x0, "u", 0x0, "t", 0x0, " ", 0x0, "o", 0x0, "f", 0x0, " "
	DCB	0x0, "M", 0x0, "e", 0x0, "m", 0x0, "o", 0x0, "r", 0x0, "y"
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FK@FECNOPPG@?$AAO?$AAM?$AAA?$AAP?$AA?5?$AAG?$AAD?$AAI?$AA?5?$AAA?$AAl?$AAl?$AAo?$AAc?$AAS?$AAu?$AAr?$AAf?$AAa?$AAc?$AAe?$AA?5?$AA?9?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAV@| DCB "O"
	DCB	0x0, "M", 0x0, "A", 0x0, "P", 0x0, " ", 0x0, "G", 0x0, "D"
	DCB	0x0, "I", 0x0, " ", 0x0, "A", 0x0, "l", 0x0, "l", 0x0, "o"
	DCB	0x0, "c", 0x0, "S", 0x0, "u", 0x0, "r", 0x0, "f", 0x0, "a"
	DCB	0x0, "c", 0x0, "e", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "O"
	DCB	0x0, "u", 0x0, "t", 0x0, " ", 0x0, "o", 0x0, "f", 0x0, " "
	DCB	0x0, "V", 0x0, "i", 0x0, "d", 0x0, "e", 0x0, "o", 0x0, " "
	DCB	0x0, "M", 0x0, "e", 0x0, "m", 0x0, "o", 0x0, "r", 0x0, "y"
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  000d4			 AREA	 |.text|, CODE, ARM

  000d4		 |?AllocSurface@OMAPDDGPE@@UAAJPAPAVGPESurf@@HHW4EGPEFormat@@H@Z| PROC ; OMAPDDGPE::AllocSurface

; 39   : {

  000d4		 |$LN27@AllocSurfa|
  000d4	e1a0c00d	 mov         r12, sp
  000d8	e92d000f	 stmdb       sp!, {r0 - r3}
  000dc	e92d5010	 stmdb       sp!, {r4, r12, lr}
  000e0	e24dd078	 sub         sp, sp, #0x78
  000e4		 |$M42518|

; 40   :     UNREFERENCED_PARAMETER(surfaceFlags);
; 41   :     //  Allocate GDI from video memory if 2D ops can be accelerated 
; 42   :     //  Otherwise, allocate a standard GPESurf
; 43   :     if( m_pSurfaceMgr->SupportsOffscreenSurfaces() &&
; 44   :         (width*height >= 8192) &&
; 45   :         (format == m_pPrimarySurf->Format()) )

  000e4	e59d3084	 ldr         r3, [sp, #0x84]
  000e8	e28330b4	 add         r3, r3, #0xB4
  000ec	e5932000	 ldr         r2, [r3]
  000f0	e59d3084	 ldr         r3, [sp, #0x84]
  000f4	e28330b4	 add         r3, r3, #0xB4
  000f8	e5930000	 ldr         r0, [r3]
  000fc	e5923000	 ldr         r3, [r2]
  00100	e2833024	 add         r3, r3, #0x24
  00104	e5933000	 ldr         r3, [r3]
  00108	e1a0e00f	 mov         lr, pc
  0010c	e12fff13	 bx          r3
  00110	e58d002c	 str         r0, [sp, #0x2C]
  00114	e59d302c	 ldr         r3, [sp, #0x2C]
  00118	e3530000	 cmp         r3, #0
  0011c	0a000078	 beq         |$LN8@AllocSurfa|
  00120	e59d208c	 ldr         r2, [sp, #0x8C]
  00124	e59d3090	 ldr         r3, [sp, #0x90]
  00128	e0030392	 mul         r3, r2, r3
  0012c	e3530a02	 cmp         r3, #2, 20
  00130	ba000073	 blt         |$LN8@AllocSurfa|
  00134	e59d3084	 ldr         r3, [sp, #0x84]
  00138	e28330bc	 add         r3, r3, #0xBC
  0013c	e5930000	 ldr         r0, [r3]
  00140	eb000000	 bl          |?Format@GPESurf@@QAA?AW4EGPEFormat@@XZ|
  00144	e58d0030	 str         r0, [sp, #0x30]
  00148	e59d2094	 ldr         r2, [sp, #0x94]
  0014c	e59d3030	 ldr         r3, [sp, #0x30]
  00150	e1520003	 cmp         r2, r3
  00154	1a00006a	 bne         |$LN8@AllocSurfa|

; 46   :     {
; 47   :         BOOL                    bResult;
; 48   :         OMAPSurface*            pOmapSurface;
; 49   :     
; 50   : 
; 51   :         //  Allocate OMAP surface
; 52   :         bResult = m_pSurfaceMgr->AllocateGDI(
; 53   :                                 m_pPrimarySurf->OmapSurface()->PixelFormat(),
; 54   :                                 width,
; 55   :                                 height,
; 56   :                                 &pOmapSurface );

  00158	e59d3084	 ldr         r3, [sp, #0x84]
  0015c	e28330bc	 add         r3, r3, #0xBC
  00160	e5930000	 ldr         r0, [r3]
  00164	eb000000	 bl          |?OmapSurface@OMAPDDGPESurface@@QAAPAVOMAPSurface@@XZ|
  00168	e58d0034	 str         r0, [sp, #0x34]
  0016c	e59d0034	 ldr         r0, [sp, #0x34]
  00170	eb000000	 bl          |?PixelFormat@OMAPSurface@@QAA?AW4OMAP_DSS_PIXELFORMAT@@XZ|
  00174	e58d0038	 str         r0, [sp, #0x38]
  00178	e28d3004	 add         r3, sp, #4
  0017c	e58d3000	 str         r3, [sp]
  00180	e59d3090	 ldr         r3, [sp, #0x90]
  00184	e59d208c	 ldr         r2, [sp, #0x8C]
  00188	e59d1038	 ldr         r1, [sp, #0x38]
  0018c	e59d0084	 ldr         r0, [sp, #0x84]
  00190	e28000b4	 add         r0, r0, #0xB4
  00194	e590e000	 ldr         lr, [r0]
  00198	e59d0084	 ldr         r0, [sp, #0x84]
  0019c	e28000b4	 add         r0, r0, #0xB4
  001a0	e5904000	 ldr         r4, [r0]
  001a4	e59e0000	 ldr         r0, [lr]
  001a8	e280e030	 add         lr, r0, #0x30
  001ac	e1a00004	 mov         r0, r4
  001b0	e59e4000	 ldr         r4, [lr]
  001b4	e1a0e00f	 mov         lr, pc
  001b8	e12fff14	 bx          r4
  001bc	e58d003c	 str         r0, [sp, #0x3C]
  001c0	e59d303c	 ldr         r3, [sp, #0x3C]
  001c4	e58d3008	 str         r3, [sp, #8]

; 57   :         if (bResult == FALSE)

  001c8	e59d3008	 ldr         r3, [sp, #8]
  001cc	e3530000	 cmp         r3, #0
  001d0	1a00000c	 bne         |$LN7@AllocSurfa|

; 58   :         {
; 59   :             DEBUGMSG(GPE_ZONE_WARNING, (L"OMAP GDI AllocSurface - Out of Video Memory\n"));

  001d4	e59f325c	 ldr         r3, [pc, #0x25C]
  001d8	e5933440	 ldr         r3, [r3, #0x440]
  001dc	e3130002	 tst         r3, #2
  001e0	0a000004	 beq         |$LN11@AllocSurfa|
  001e4	e59f0254	 ldr         r0, [pc, #0x254]
  001e8	eb000000	 bl          NKDbgPrintfW
  001ec	e3a03001	 mov         r3, #1
  001f0	e58d3040	 str         r3, [sp, #0x40]
  001f4	ea000001	 b           |$LN12@AllocSurfa|
  001f8		 |$LN11@AllocSurfa|
  001f8	e3a03000	 mov         r3, #0
  001fc	e58d3040	 str         r3, [sp, #0x40]
  00200		 |$LN12@AllocSurfa|

; 60   :             goto trySystemMem;

  00200	ea00003f	 b           |$LN6@AllocSurfa|
  00204	ea00003e	 b           |$trySystemMem$42029|
  00208		 |$LN7@AllocSurfa|

; 61   :         }
; 62   : 
; 63   :         //  Allocate a OMAPDDGPESurface object to wrap the OMAP surface
; 64   :         *ppSurf = new OMAPDDGPESurface(m_pSurfaceMgr, pOmapSurface);

  00208	e3a00088	 mov         r0, #0x88
  0020c	eb000000	 bl          |??2@YAPAXI@Z|
  00210	e58d0044	 str         r0, [sp, #0x44]
  00214	e59d3044	 ldr         r3, [sp, #0x44]
  00218	e58d300c	 str         r3, [sp, #0xC]
  0021c	e59d300c	 ldr         r3, [sp, #0xC]
  00220	e3530000	 cmp         r3, #0
  00224	0a000009	 beq         |$LN13@AllocSurfa|
  00228	e59d2004	 ldr         r2, [sp, #4]
  0022c	e59d3084	 ldr         r3, [sp, #0x84]
  00230	e28330b4	 add         r3, r3, #0xB4
  00234	e5931000	 ldr         r1, [r3]
  00238	e59d000c	 ldr         r0, [sp, #0xC]
  0023c	eb000000	 bl          |??0OMAPDDGPESurface@@QAA@PAVOMAPSurfaceManager@@PAVOMAPSurface@@@Z|
  00240	e58d0048	 str         r0, [sp, #0x48]
  00244	e59d3048	 ldr         r3, [sp, #0x48]
  00248	e58d304c	 str         r3, [sp, #0x4C]
  0024c	ea000001	 b           |$LN14@AllocSurfa|
  00250		 |$LN13@AllocSurfa|
  00250	e3a03000	 mov         r3, #0
  00254	e58d304c	 str         r3, [sp, #0x4C]
  00258		 |$LN14@AllocSurfa|
  00258	e59d204c	 ldr         r2, [sp, #0x4C]
  0025c	e59d3088	 ldr         r3, [sp, #0x88]
  00260	e5832000	 str         r2, [r3]

; 65   :         if (*ppSurf == NULL)

  00264	e59d3088	 ldr         r3, [sp, #0x88]
  00268	e5933000	 ldr         r3, [r3]
  0026c	e3530000	 cmp         r3, #0
  00270	1a000020	 bne         |$LN5@AllocSurfa|

; 66   :         {
; 67   :             //  Out of system memory
; 68   :             DEBUGMSG(GPE_ZONE_WARNING, (L"OMAP GDI AllocSurface - Out of Memory\n"));

  00274	e59f31bc	 ldr         r3, [pc, #0x1BC]
  00278	e5933440	 ldr         r3, [r3, #0x440]
  0027c	e3130002	 tst         r3, #2
  00280	0a000004	 beq         |$LN15@AllocSurfa|
  00284	e59f01b0	 ldr         r0, [pc, #0x1B0]
  00288	eb000000	 bl          NKDbgPrintfW
  0028c	e3a03001	 mov         r3, #1
  00290	e58d3050	 str         r3, [sp, #0x50]
  00294	ea000001	 b           |$LN16@AllocSurfa|
  00298		 |$LN15@AllocSurfa|
  00298	e3a03000	 mov         r3, #0
  0029c	e58d3050	 str         r3, [sp, #0x50]
  002a0		 |$LN16@AllocSurfa|

; 69   :             delete pOmapSurface;

  002a0	e59d3004	 ldr         r3, [sp, #4]
  002a4	e58d3014	 str         r3, [sp, #0x14]
  002a8	e59d3014	 ldr         r3, [sp, #0x14]
  002ac	e58d3010	 str         r3, [sp, #0x10]
  002b0	e59d3010	 ldr         r3, [sp, #0x10]
  002b4	e3530000	 cmp         r3, #0
  002b8	0a00000a	 beq         |$LN17@AllocSurfa|
  002bc	e3a01001	 mov         r1, #1
  002c0	e59d3010	 ldr         r3, [sp, #0x10]
  002c4	e5933000	 ldr         r3, [r3]
  002c8	e59d0010	 ldr         r0, [sp, #0x10]
  002cc	e5933000	 ldr         r3, [r3]
  002d0	e1a0e00f	 mov         lr, pc
  002d4	e12fff13	 bx          r3
  002d8	e58d0054	 str         r0, [sp, #0x54]
  002dc	e59d3054	 ldr         r3, [sp, #0x54]
  002e0	e58d3058	 str         r3, [sp, #0x58]
  002e4	ea000001	 b           |$LN18@AllocSurfa|
  002e8		 |$LN17@AllocSurfa|
  002e8	e3a03000	 mov         r3, #0
  002ec	e58d3058	 str         r3, [sp, #0x58]
  002f0		 |$LN18@AllocSurfa|

; 70   :             goto trySystemMem;

  002f0	ea000003	 b           |$LN4@AllocSurfa|
  002f4	ea000002	 b           |$trySystemMem$42029|
  002f8		 |$LN5@AllocSurfa|

; 71   :         }
; 72   : 
; 73   :         //  Surface created in video memory
; 74   :         return S_OK;

  002f8	e3a03000	 mov         r3, #0
  002fc	e58d3028	 str         r3, [sp, #0x28]
  00300	ea000047	 b           |$LN9@AllocSurfa|
  00304		 |$LN8@AllocSurfa|
  00304		 |$LN4@AllocSurfa|
  00304		 |$LN6@AllocSurfa|
  00304		 |$trySystemMem$42029|

; 75   :     }
; 76   : 
; 77   : trySystemMem:
; 78   : 
; 79   :     // Allocate GDI surfaces from system memory
; 80   :     *ppSurf = new GPESurf(width, height, format);

  00304	e3a0004c	 mov         r0, #0x4C
  00308	eb000000	 bl          |??2@YAPAXI@Z|
  0030c	e58d005c	 str         r0, [sp, #0x5C]
  00310	e59d305c	 ldr         r3, [sp, #0x5C]
  00314	e58d3018	 str         r3, [sp, #0x18]
  00318	e59d3018	 ldr         r3, [sp, #0x18]
  0031c	e3530000	 cmp         r3, #0
  00320	0a000008	 beq         |$LN19@AllocSurfa|
  00324	e59d3094	 ldr         r3, [sp, #0x94]
  00328	e59d2090	 ldr         r2, [sp, #0x90]
  0032c	e59d108c	 ldr         r1, [sp, #0x8C]
  00330	e59d0018	 ldr         r0, [sp, #0x18]
  00334	eb000000	 bl          |??0GPESurf@@QAA@HHW4EGPEFormat@@@Z|
  00338	e58d0060	 str         r0, [sp, #0x60]
  0033c	e59d3060	 ldr         r3, [sp, #0x60]
  00340	e58d3064	 str         r3, [sp, #0x64]
  00344	ea000001	 b           |$LN20@AllocSurfa|
  00348		 |$LN19@AllocSurfa|
  00348	e3a03000	 mov         r3, #0
  0034c	e58d3064	 str         r3, [sp, #0x64]
  00350		 |$LN20@AllocSurfa|
  00350	e59d2064	 ldr         r2, [sp, #0x64]
  00354	e59d3088	 ldr         r3, [sp, #0x88]
  00358	e5832000	 str         r2, [r3]

; 81   :     if (*ppSurf != NULL)

  0035c	e59d3088	 ldr         r3, [sp, #0x88]
  00360	e5933000	 ldr         r3, [r3]
  00364	e3530000	 cmp         r3, #0
  00368	0a00001f	 beq         |$LN3@AllocSurfa|

; 82   :     {
; 83   :         // check we allocated bits succesfully
; 84   :         if (((*ppSurf)->Buffer()) == NULL)

  0036c	e59d3088	 ldr         r3, [sp, #0x88]
  00370	e5930000	 ldr         r0, [r3]
  00374	eb000000	 bl          |?Buffer@GPESurf@@QAAPAXXZ|
  00378	e58d0068	 str         r0, [sp, #0x68]
  0037c	e59d3068	 ldr         r3, [sp, #0x68]
  00380	e3530000	 cmp         r3, #0
  00384	1a000015	 bne         |$LN2@AllocSurfa|

; 85   :         {
; 86   :             delete *ppSurf;

  00388	e59d3088	 ldr         r3, [sp, #0x88]
  0038c	e5933000	 ldr         r3, [r3]
  00390	e58d3020	 str         r3, [sp, #0x20]
  00394	e59d3020	 ldr         r3, [sp, #0x20]
  00398	e58d301c	 str         r3, [sp, #0x1C]
  0039c	e59d301c	 ldr         r3, [sp, #0x1C]
  003a0	e3530000	 cmp         r3, #0
  003a4	0a00000a	 beq         |$LN21@AllocSurfa|
  003a8	e3a01001	 mov         r1, #1
  003ac	e59d301c	 ldr         r3, [sp, #0x1C]
  003b0	e5933000	 ldr         r3, [r3]
  003b4	e59d001c	 ldr         r0, [sp, #0x1C]
  003b8	e5933000	 ldr         r3, [r3]
  003bc	e1a0e00f	 mov         lr, pc
  003c0	e12fff13	 bx          r3
  003c4	e58d006c	 str         r0, [sp, #0x6C]
  003c8	e59d306c	 ldr         r3, [sp, #0x6C]
  003cc	e58d3070	 str         r3, [sp, #0x70]
  003d0	ea000001	 b           |$LN22@AllocSurfa|
  003d4		 |$LN21@AllocSurfa|
  003d4	e3a03000	 mov         r3, #0
  003d8	e58d3070	 str         r3, [sp, #0x70]
  003dc		 |$LN22@AllocSurfa|

; 87   :         }
; 88   :         else

  003dc	ea000002	 b           |$LN1@AllocSurfa|
  003e0		 |$LN2@AllocSurfa|

; 89   :         {
; 90   :             return S_OK;

  003e0	e3a03000	 mov         r3, #0
  003e4	e58d3028	 str         r3, [sp, #0x28]
  003e8	ea00000d	 b           |$LN9@AllocSurfa|
  003ec		 |$LN1@AllocSurfa|
  003ec		 |$LN3@AllocSurfa|

; 91   :         }
; 92   :     }
; 93   : 
; 94   :     DEBUGMSG(GPE_ZONE_WARNING, (L"GDI AllocSurface - Out of Memory\r\n"));

  003ec	e59f3044	 ldr         r3, [pc, #0x44]
  003f0	e5933440	 ldr         r3, [r3, #0x440]
  003f4	e3130002	 tst         r3, #2
  003f8	0a000004	 beq         |$LN23@AllocSurfa|
  003fc	e59f0030	 ldr         r0, [pc, #0x30]
  00400	eb000000	 bl          NKDbgPrintfW
  00404	e3a03001	 mov         r3, #1
  00408	e58d3074	 str         r3, [sp, #0x74]
  0040c	ea000001	 b           |$LN24@AllocSurfa|
  00410		 |$LN23@AllocSurfa|
  00410	e3a03000	 mov         r3, #0
  00414	e58d3074	 str         r3, [sp, #0x74]
  00418		 |$LN24@AllocSurfa|

; 95   :     return E_OUTOFMEMORY;

  00418	e3a0313a	 mov         r3, #0x3A, 2
  0041c	e3833807	 orr         r3, r3, #7, 16
  00420	e58d3028	 str         r3, [sp, #0x28]
  00424		 |$LN9@AllocSurfa|

; 96   : }

  00424	e59d0028	 ldr         r0, [sp, #0x28]
  00428	e28dd078	 add         sp, sp, #0x78
  0042c	e89d6010	 ldmia       sp, {r4, sp, lr}
  00430	e12fff1e	 bx          lr
  00434		 |$LN28@AllocSurfa|
  00434		 |$LN29@AllocSurfa|
  00434	00000000	 DCD         |??_C@_1EG@NBDJAOBL@?$AAG?$AAD?$AAI?$AA?5?$AAA?$AAl?$AAl?$AAo?$AAc?$AAS?$AAu?$AAr?$AAf?$AAa?$AAc?$AAe?$AA?5?$AA?9?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAM?$AAe?$AAm?$AAo?$AAr?$AAy@|
  00438		 |$LN30@AllocSurfa|
  00438	00000000	 DCD         |dpCurSettings|
  0043c		 |$LN31@AllocSurfa|
  0043c	00000000	 DCD         |??_C@_1EO@LKDFDMHH@?$AAO?$AAM?$AAA?$AAP?$AA?5?$AAG?$AAD?$AAI?$AA?5?$AAA?$AAl?$AAl?$AAo?$AAc?$AAS?$AAu?$AAr?$AAf?$AAa?$AAc?$AAe?$AA?5?$AA?9?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAM@|
  00440		 |$LN32@AllocSurfa|
  00440	00000000	 DCD         |??_C@_1FK@FECNOPPG@?$AAO?$AAM?$AAA?$AAP?$AA?5?$AAG?$AAD?$AAI?$AA?5?$AAA?$AAl?$AAl?$AAo?$AAc?$AAS?$AAu?$AAr?$AAf?$AAa?$AAc?$AAe?$AA?5?$AA?9?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAV@|
  00444		 |$M42519|

			 ENDP  ; |?AllocSurface@OMAPDDGPE@@UAAJPAPAVGPESurf@@HHW4EGPEFormat@@H@Z|, OMAPDDGPE::AllocSurface

; File c:\wince600\public\common\oak\inc\gpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T42532| DCD	|$LN5@Format|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Format@GPESurf@@QAA?AW4EGPEFormat@@XZ| PROC ; GPESurf::Format

; 189  :     {

  00000		 |$LN5@Format|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M42529|

; 190  :         return m_eFormat;

  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e283301c	 add         r3, r3, #0x1C
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3000	 str         r3, [sp]

; 191  :     }

  00020	e59d0000	 ldr         r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M42530|

			 ENDP  ; |?Format@GPESurf@@QAA?AW4EGPEFormat@@XZ|, GPESurf::Format


  00000			 AREA	 |.pdata|, PDATA
|$T42540| DCD	|$LN5@Buffer|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Buffer@GPESurf@@QAAPAXXZ| PROC	; GPESurf::Buffer

; 201  :     {

  00000		 |$LN5@Buffer|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M42537|

; 202  :         return (void *)m_pVirtAddr;

  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e2833004	 add         r3, r3, #4
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3000	 str         r3, [sp]

; 203  :     }

  00020	e59d0000	 ldr         r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M42538|

			 ENDP  ; |?Buffer@GPESurf@@QAAPAXXZ|, GPESurf::Buffer

; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\inc\dssai.h

  00000			 AREA	 |.pdata|, PDATA
|$T42548| DCD	|$LN5@PixelForma|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?PixelFormat@OMAPSurface@@QAA?AW4OMAP_DSS_PIXELFORMAT@@XZ| PROC ; OMAPSurface::PixelFormat

; 760  :     OMAP_DSS_PIXELFORMAT    PixelFormat() { return m_ePixelFormat; }

  00000		 |$LN5@PixelForma|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M42545|
  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e2833004	 add         r3, r3, #4
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3000	 str         r3, [sp]
  00020	e59d0000	 ldr         r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M42546|

			 ENDP  ; |?PixelFormat@OMAPSurface@@QAA?AW4OMAP_DSS_PIXELFORMAT@@XZ|, OMAPSurface::PixelFormat

	EXPORT	|??_C@_1EK@JCKMIGFP@?$AAD?$AAD?$AAr?$AAa?$AAw?$AA?5?$AAA?$AAl?$AAl?$AAo?$AAc?$AAS?$AAu?$AAr?$AAf?$AAa?$AAc?$AAe?$AA?5?$AA?9?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAM?$AAe?$AAm?$AAo@| [ DATA ] ; `string'
	EXPORT	|?AllocSurface@OMAPDDGPE@@UAAJPAPAVDDGPESurf@@HHW4EGPEFormat@@W4EDDGPEPixelFormat@@H@Z| ; OMAPDDGPE::AllocSurface
	IMPORT	|??0DDGPESurf@@QAA@HHHW4EGPEFormat@@W4EDDGPEPixelFormat@@@Z| ; DDGPESurf::DDGPESurf
	IMPORT	|EGPEFormatToBpp|

  00010			 AREA	 |.pdata|, PDATA
|$T42567| DCD	|$LN14@AllocSurfa@2|
	DCD	0x40006504
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\ddgpe\omap_ddsurf.cpp

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EK@JCKMIGFP@?$AAD?$AAD?$AAr?$AAa?$AAw?$AA?5?$AAA?$AAl?$AAl?$AAo?$AAc?$AAS?$AAu?$AAr?$AAf?$AAa?$AAc?$AAe?$AA?5?$AA?9?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAM?$AAe?$AAm?$AAo@| DCB "D"
	DCB	0x0, "D", 0x0, "r", 0x0, "a", 0x0, "w", 0x0, " ", 0x0, "A"
	DCB	0x0, "l", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "S", 0x0, "u"
	DCB	0x0, "r", 0x0, "f", 0x0, "a", 0x0, "c", 0x0, "e", 0x0, " "
	DCB	0x0, "-", 0x0, " ", 0x0, "O", 0x0, "u", 0x0, "t", 0x0, " "
	DCB	0x0, "o", 0x0, "f", 0x0, " ", 0x0, "M", 0x0, "e", 0x0, "m"
	DCB	0x0, "o", 0x0, "r", 0x0, "y", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Odtp

  00444			 AREA	 |.text|, CODE, ARM

  00444		 |?AllocSurface@OMAPDDGPE@@UAAJPAPAVDDGPESurf@@HHW4EGPEFormat@@W4EDDGPEPixelFormat@@H@Z| PROC ; OMAPDDGPE::AllocSurface

; 109  : {

  00444		 |$LN14@AllocSurfa@2|
  00444	e1a0c00d	 mov         r12, sp
  00448	e92d000f	 stmdb       sp!, {r0 - r3}
  0044c	e92d5000	 stmdb       sp!, {r12, lr}
  00450	e24dd044	 sub         sp, sp, #0x44
  00454		 |$M42564|

; 110  :     DWORD bpp  = EGPEFormatToBpp[format];

  00454	e59d105c	 ldr         r1, [sp, #0x5C]
  00458	e3a03004	 mov         r3, #4
  0045c	e0020391	 mul         r2, r1, r3
  00460	e59f316c	 ldr         r3, [pc, #0x16C]
  00464	e0833002	 add         r3, r3, r2
  00468	e5933000	 ldr         r3, [r3]
  0046c	e58d3008	 str         r3, [sp, #8]

; 111  :     DWORD stride = ((bpp * width + 31) >> 5) << 2;

  00470	e59d2008	 ldr         r2, [sp, #8]
  00474	e59d3054	 ldr         r3, [sp, #0x54]
  00478	e0030392	 mul         r3, r2, r3
  0047c	e283301f	 add         r3, r3, #0x1F
  00480	e1a032a3	 mov         r3, r3, lsr #5
  00484	e1a03103	 mov         r3, r3, lsl #2
  00488	e58d300c	 str         r3, [sp, #0xC]

; 112  : 
; 113  :     UNREFERENCED_PARAMETER(surfaceFlags);
; 114  : 
; 115  :     // Allocate DDraw surface from system memory
; 116  :     *ppSurf = new DDGPESurf(width, height, stride, format, pixelFormat);

  0048c	e3a0007c	 mov         r0, #0x7C
  00490	eb000000	 bl          |??2@YAPAXI@Z|
  00494	e58d0028	 str         r0, [sp, #0x28]
  00498	e59d3028	 ldr         r3, [sp, #0x28]
  0049c	e58d3010	 str         r3, [sp, #0x10]
  004a0	e59d3010	 ldr         r3, [sp, #0x10]
  004a4	e3530000	 cmp         r3, #0
  004a8	0a00000c	 beq         |$LN6@AllocSurfa@2|
  004ac	e59d3060	 ldr         r3, [sp, #0x60]
  004b0	e58d3004	 str         r3, [sp, #4]
  004b4	e59d305c	 ldr         r3, [sp, #0x5C]
  004b8	e58d3000	 str         r3, [sp]
  004bc	e59d300c	 ldr         r3, [sp, #0xC]
  004c0	e59d2058	 ldr         r2, [sp, #0x58]
  004c4	e59d1054	 ldr         r1, [sp, #0x54]
  004c8	e59d0010	 ldr         r0, [sp, #0x10]
  004cc	eb000000	 bl          |??0DDGPESurf@@QAA@HHHW4EGPEFormat@@W4EDDGPEPixelFormat@@@Z|
  004d0	e58d002c	 str         r0, [sp, #0x2C]
  004d4	e59d302c	 ldr         r3, [sp, #0x2C]
  004d8	e58d3030	 str         r3, [sp, #0x30]
  004dc	ea000001	 b           |$LN7@AllocSurfa@2|
  004e0		 |$LN6@AllocSurfa@2|
  004e0	e3a03000	 mov         r3, #0
  004e4	e58d3030	 str         r3, [sp, #0x30]
  004e8		 |$LN7@AllocSurfa@2|
  004e8	e59d2030	 ldr         r2, [sp, #0x30]
  004ec	e59d3050	 ldr         r3, [sp, #0x50]
  004f0	e5832000	 str         r2, [r3]

; 117  :     if (*ppSurf != NULL)

  004f4	e59d3050	 ldr         r3, [sp, #0x50]
  004f8	e5933000	 ldr         r3, [r3]
  004fc	e3530000	 cmp         r3, #0
  00500	0a00001f	 beq         |$LN3@AllocSurfa@2|

; 118  :     {
; 119  :         // check we allocated bits succesfully
; 120  :         if (((*ppSurf)->Buffer()) == NULL)

  00504	e59d3050	 ldr         r3, [sp, #0x50]
  00508	e5930000	 ldr         r0, [r3]
  0050c	eb000000	 bl          |?Buffer@GPESurf@@QAAPAXXZ|
  00510	e58d0034	 str         r0, [sp, #0x34]
  00514	e59d3034	 ldr         r3, [sp, #0x34]
  00518	e3530000	 cmp         r3, #0
  0051c	1a000015	 bne         |$LN2@AllocSurfa@2|

; 121  :         {
; 122  :             delete *ppSurf;

  00520	e59d3050	 ldr         r3, [sp, #0x50]
  00524	e5933000	 ldr         r3, [r3]
  00528	e58d3018	 str         r3, [sp, #0x18]
  0052c	e59d3018	 ldr         r3, [sp, #0x18]
  00530	e58d3014	 str         r3, [sp, #0x14]
  00534	e59d3014	 ldr         r3, [sp, #0x14]
  00538	e3530000	 cmp         r3, #0
  0053c	0a00000a	 beq         |$LN8@AllocSurfa@2|
  00540	e3a01001	 mov         r1, #1
  00544	e59d3014	 ldr         r3, [sp, #0x14]
  00548	e5933000	 ldr         r3, [r3]
  0054c	e59d0014	 ldr         r0, [sp, #0x14]
  00550	e5933000	 ldr         r3, [r3]
  00554	e1a0e00f	 mov         lr, pc
  00558	e12fff13	 bx          r3
  0055c	e58d0038	 str         r0, [sp, #0x38]
  00560	e59d3038	 ldr         r3, [sp, #0x38]
  00564	e58d303c	 str         r3, [sp, #0x3C]
  00568	ea000001	 b           |$LN9@AllocSurfa@2|
  0056c		 |$LN8@AllocSurfa@2|
  0056c	e3a03000	 mov         r3, #0
  00570	e58d303c	 str         r3, [sp, #0x3C]
  00574		 |$LN9@AllocSurfa@2|

; 123  :         }
; 124  :         else

  00574	ea000002	 b           |$LN1@AllocSurfa@2|
  00578		 |$LN2@AllocSurfa@2|

; 125  :         {
; 126  :             return S_OK;

  00578	e3a03000	 mov         r3, #0
  0057c	e58d3024	 str         r3, [sp, #0x24]
  00580	ea00000d	 b           |$LN4@AllocSurfa@2|
  00584		 |$LN1@AllocSurfa@2|
  00584		 |$LN3@AllocSurfa@2|

; 127  :         }
; 128  :     }
; 129  : 
; 130  :     DEBUGMSG(GPE_ZONE_WARNING, (L"DDraw AllocSurface - Out of Memory\r\n"));

  00584	e59f3044	 ldr         r3, [pc, #0x44]
  00588	e5933440	 ldr         r3, [r3, #0x440]
  0058c	e3130002	 tst         r3, #2
  00590	0a000004	 beq         |$LN10@AllocSurfa@2|
  00594	e59f0030	 ldr         r0, [pc, #0x30]
  00598	eb000000	 bl          NKDbgPrintfW
  0059c	e3a03001	 mov         r3, #1
  005a0	e58d3040	 str         r3, [sp, #0x40]
  005a4	ea000001	 b           |$LN11@AllocSurfa@2|
  005a8		 |$LN10@AllocSurfa@2|
  005a8	e3a03000	 mov         r3, #0
  005ac	e58d3040	 str         r3, [sp, #0x40]
  005b0		 |$LN11@AllocSurfa@2|

; 131  :     return E_OUTOFMEMORY;

  005b0	e3a0313a	 mov         r3, #0x3A, 2
  005b4	e3833807	 orr         r3, r3, #7, 16
  005b8	e58d3024	 str         r3, [sp, #0x24]
  005bc		 |$LN4@AllocSurfa@2|

; 132  : }

  005bc	e59d0024	 ldr         r0, [sp, #0x24]
  005c0	e28dd044	 add         sp, sp, #0x44
  005c4	e89d6000	 ldmia       sp, {sp, lr}
  005c8	e12fff1e	 bx          lr
  005cc		 |$LN15@AllocSurfa@2|
  005cc		 |$LN16@AllocSurfa@2|
  005cc	00000000	 DCD         |??_C@_1EK@JCKMIGFP@?$AAD?$AAD?$AAr?$AAa?$AAw?$AA?5?$AAA?$AAl?$AAl?$AAo?$AAc?$AAS?$AAu?$AAr?$AAf?$AAa?$AAc?$AAe?$AA?5?$AA?9?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAM?$AAe?$AAm?$AAo@|
  005d0		 |$LN17@AllocSurfa@2|
  005d0	00000000	 DCD         |dpCurSettings|
  005d4		 |$LN18@AllocSurfa@2|
  005d4	00000000	 DCD         |EGPEFormatToBpp|
  005d8		 |$M42565|

			 ENDP  ; |?AllocSurface@OMAPDDGPE@@UAAJPAPAVDDGPESurf@@HHW4EGPEFormat@@W4EDDGPEPixelFormat@@H@Z|, OMAPDDGPE::AllocSurface

	EXPORT	|??_C@_1FC@GJEMKABA@?$AAO?$AAM?$AAA?$AAP?$AA?5?$AAD?$AAD?$AAr?$AAa?$AAw?$AA?5?$AAA?$AAl?$AAl?$AAo?$AAc?$AAS?$AAu?$AAr?$AAf?$AAa?$AAc?$AAe?$AA?5?$AA?9?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FO@PMDMNKEM@?$AAO?$AAM?$AAA?$AAP?$AA?5?$AAD?$AAD?$AAr?$AAa?$AAw?$AA?5?$AAA?$AAl?$AAl?$AAo?$AAc?$AAS?$AAu?$AAr?$AAf?$AAa?$AAc?$AAe?$AA?5?$AA?9?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf@| [ DATA ] ; `string'
	EXPORT	|?AllocSurface@OMAPDDGPE@@UAAJPAPAVOMAPDDGPESurface@@W4OMAP_DSS_PIXELFORMAT@@HH@Z| ; OMAPDDGPE::AllocSurface

  00018			 AREA	 |.pdata|, PDATA
|$T42589| DCD	|$LN15@AllocSurfa@3|
	DCD	0x40007104

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FC@GJEMKABA@?$AAO?$AAM?$AAA?$AAP?$AA?5?$AAD?$AAD?$AAr?$AAa?$AAw?$AA?5?$AAA?$AAl?$AAl?$AAo?$AAc?$AAS?$AAu?$AAr?$AAf?$AAa?$AAc?$AAe?$AA?5?$AA?9?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf@| DCB "O"
	DCB	0x0, "M", 0x0, "A", 0x0, "P", 0x0, " ", 0x0, "D", 0x0, "D"
	DCB	0x0, "r", 0x0, "a", 0x0, "w", 0x0, " ", 0x0, "A", 0x0, "l"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "S", 0x0, "u", 0x0, "r"
	DCB	0x0, "f", 0x0, "a", 0x0, "c", 0x0, "e", 0x0, " ", 0x0, "-"
	DCB	0x0, " ", 0x0, "O", 0x0, "u", 0x0, "t", 0x0, " ", 0x0, "o"
	DCB	0x0, "f", 0x0, " ", 0x0, "M", 0x0, "e", 0x0, "m", 0x0, "o"
	DCB	0x0, "r", 0x0, "y", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FO@PMDMNKEM@?$AAO?$AAM?$AAA?$AAP?$AA?5?$AAD?$AAD?$AAr?$AAa?$AAw?$AA?5?$AAA?$AAl?$AAl?$AAo?$AAc?$AAS?$AAu?$AAr?$AAf?$AAa?$AAc?$AAe?$AA?5?$AA?9?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf@| DCB "O"
	DCB	0x0, "M", 0x0, "A", 0x0, "P", 0x0, " ", 0x0, "D", 0x0, "D"
	DCB	0x0, "r", 0x0, "a", 0x0, "w", 0x0, " ", 0x0, "A", 0x0, "l"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "S", 0x0, "u", 0x0, "r"
	DCB	0x0, "f", 0x0, "a", 0x0, "c", 0x0, "e", 0x0, " ", 0x0, "-"
	DCB	0x0, " ", 0x0, "O", 0x0, "u", 0x0, "t", 0x0, " ", 0x0, "o"
	DCB	0x0, "f", 0x0, " ", 0x0, "V", 0x0, "i", 0x0, "d", 0x0, "e"
	DCB	0x0, "o", 0x0, " ", 0x0, "M", 0x0, "e", 0x0, "m", 0x0, "o"
	DCB	0x0, "r", 0x0, "y", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  005d8			 AREA	 |.text|, CODE, ARM

  005d8		 |?AllocSurface@OMAPDDGPE@@UAAJPAPAVOMAPDDGPESurface@@W4OMAP_DSS_PIXELFORMAT@@HH@Z| PROC ; OMAPDDGPE::AllocSurface

; 142  : {

  005d8		 |$LN15@AllocSurfa@3|
  005d8	e1a0c00d	 mov         r12, sp
  005dc	e92d000f	 stmdb       sp!, {r0 - r3}
  005e0	e92d5010	 stmdb       sp!, {r4, r12, lr}
  005e4	e24dd040	 sub         sp, sp, #0x40
  005e8		 |$M42586|

; 143  :     BOOL            bResult;
; 144  :     OMAPSurface*    pOmapSurface;
; 145  : 
; 146  :     //  Allocate OMAP surface
; 147  :     bResult = m_pSurfaceMgr->Allocate(
; 148  :                             pixelFormat,
; 149  :                             width,
; 150  :                             height,
; 151  :                             &pOmapSurface );

  005e8	e28d3004	 add         r3, sp, #4
  005ec	e58d3000	 str         r3, [sp]
  005f0	e59d305c	 ldr         r3, [sp, #0x5C]
  005f4	e59d2058	 ldr         r2, [sp, #0x58]
  005f8	e59d1054	 ldr         r1, [sp, #0x54]
  005fc	e59d004c	 ldr         r0, [sp, #0x4C]
  00600	e28000b4	 add         r0, r0, #0xB4
  00604	e590e000	 ldr         lr, [r0]
  00608	e59d004c	 ldr         r0, [sp, #0x4C]
  0060c	e28000b4	 add         r0, r0, #0xB4
  00610	e5904000	 ldr         r4, [r0]
  00614	e59e0000	 ldr         r0, [lr]
  00618	e280e02c	 add         lr, r0, #0x2C
  0061c	e1a00004	 mov         r0, r4
  00620	e59e4000	 ldr         r4, [lr]
  00624	e1a0e00f	 mov         lr, pc
  00628	e12fff14	 bx          r4
  0062c	e58d0020	 str         r0, [sp, #0x20]
  00630	e59d3020	 ldr         r3, [sp, #0x20]
  00634	e58d3008	 str         r3, [sp, #8]

; 152  :     if (bResult == FALSE)

  00638	e59d3008	 ldr         r3, [sp, #8]
  0063c	e3530000	 cmp         r3, #0
  00640	1a00000d	 bne         |$LN2@AllocSurfa@3|

; 153  :     {
; 154  :         DEBUGMSG(GPE_ZONE_WARNING, (L"OMAP DDraw AllocSurface - Out of Video Memory\n"));

  00644	e59f3144	 ldr         r3, [pc, #0x144]
  00648	e5933440	 ldr         r3, [r3, #0x440]
  0064c	e3130002	 tst         r3, #2
  00650	0a000004	 beq         |$LN5@AllocSurfa@3|
  00654	e59f013c	 ldr         r0, [pc, #0x13C]
  00658	eb000000	 bl          NKDbgPrintfW
  0065c	e3a03001	 mov         r3, #1
  00660	e58d3024	 str         r3, [sp, #0x24]
  00664	ea000001	 b           |$LN6@AllocSurfa@3|
  00668		 |$LN5@AllocSurfa@3|
  00668	e3a03000	 mov         r3, #0
  0066c	e58d3024	 str         r3, [sp, #0x24]
  00670		 |$LN6@AllocSurfa@3|

; 155  :         return DDERR_OUTOFVIDEOMEMORY;

  00670	e59f311c	 ldr         r3, [pc, #0x11C]
  00674	e58d301c	 str         r3, [sp, #0x1C]
  00678	ea00003f	 b           |$LN3@AllocSurfa@3|
  0067c		 |$LN2@AllocSurfa@3|

; 156  :     }
; 157  : 
; 158  :     //  Allocate a OMAPDDGPESurface object to wrap the OMAP surface
; 159  :     *ppSurf = new OMAPDDGPESurface(m_pSurfaceMgr, pOmapSurface);

  0067c	e3a00088	 mov         r0, #0x88
  00680	eb000000	 bl          |??2@YAPAXI@Z|
  00684	e58d0028	 str         r0, [sp, #0x28]
  00688	e59d3028	 ldr         r3, [sp, #0x28]
  0068c	e58d300c	 str         r3, [sp, #0xC]
  00690	e59d300c	 ldr         r3, [sp, #0xC]
  00694	e3530000	 cmp         r3, #0
  00698	0a000009	 beq         |$LN7@AllocSurfa@3|
  0069c	e59d2004	 ldr         r2, [sp, #4]
  006a0	e59d304c	 ldr         r3, [sp, #0x4C]
  006a4	e28330b4	 add         r3, r3, #0xB4
  006a8	e5931000	 ldr         r1, [r3]
  006ac	e59d000c	 ldr         r0, [sp, #0xC]
  006b0	eb000000	 bl          |??0OMAPDDGPESurface@@QAA@PAVOMAPSurfaceManager@@PAVOMAPSurface@@@Z|
  006b4	e58d002c	 str         r0, [sp, #0x2C]
  006b8	e59d302c	 ldr         r3, [sp, #0x2C]
  006bc	e58d3030	 str         r3, [sp, #0x30]
  006c0	ea000001	 b           |$LN8@AllocSurfa@3|
  006c4		 |$LN7@AllocSurfa@3|
  006c4	e3a03000	 mov         r3, #0
  006c8	e58d3030	 str         r3, [sp, #0x30]
  006cc		 |$LN8@AllocSurfa@3|
  006cc	e59d2030	 ldr         r2, [sp, #0x30]
  006d0	e59d3050	 ldr         r3, [sp, #0x50]
  006d4	e5832000	 str         r2, [r3]

; 160  :     if (*ppSurf == NULL)

  006d8	e59d3050	 ldr         r3, [sp, #0x50]
  006dc	e5933000	 ldr         r3, [r3]
  006e0	e3530000	 cmp         r3, #0
  006e4	1a000022	 bne         |$LN1@AllocSurfa@3|

; 161  :     {
; 162  :         //  Out of system memory
; 163  :         DEBUGMSG(GPE_ZONE_WARNING, (L"OMAP DDraw AllocSurface - Out of Memory\n"));

  006e8	e59f30a0	 ldr         r3, [pc, #0xA0]
  006ec	e5933440	 ldr         r3, [r3, #0x440]
  006f0	e3130002	 tst         r3, #2
  006f4	0a000004	 beq         |$LN9@AllocSurfa@3|
  006f8	e59f008c	 ldr         r0, [pc, #0x8C]
  006fc	eb000000	 bl          NKDbgPrintfW
  00700	e3a03001	 mov         r3, #1
  00704	e58d3034	 str         r3, [sp, #0x34]
  00708	ea000001	 b           |$LN10@AllocSurfa@3|
  0070c		 |$LN9@AllocSurfa@3|
  0070c	e3a03000	 mov         r3, #0
  00710	e58d3034	 str         r3, [sp, #0x34]
  00714		 |$LN10@AllocSurfa@3|

; 164  :         delete pOmapSurface;

  00714	e59d3004	 ldr         r3, [sp, #4]
  00718	e58d3014	 str         r3, [sp, #0x14]
  0071c	e59d3014	 ldr         r3, [sp, #0x14]
  00720	e58d3010	 str         r3, [sp, #0x10]
  00724	e59d3010	 ldr         r3, [sp, #0x10]
  00728	e3530000	 cmp         r3, #0
  0072c	0a00000a	 beq         |$LN11@AllocSurfa@3|
  00730	e3a01001	 mov         r1, #1
  00734	e59d3010	 ldr         r3, [sp, #0x10]
  00738	e5933000	 ldr         r3, [r3]
  0073c	e59d0010	 ldr         r0, [sp, #0x10]
  00740	e5933000	 ldr         r3, [r3]
  00744	e1a0e00f	 mov         lr, pc
  00748	e12fff13	 bx          r3
  0074c	e58d0038	 str         r0, [sp, #0x38]
  00750	e59d3038	 ldr         r3, [sp, #0x38]
  00754	e58d303c	 str         r3, [sp, #0x3C]
  00758	ea000001	 b           |$LN12@AllocSurfa@3|
  0075c		 |$LN11@AllocSurfa@3|
  0075c	e3a03000	 mov         r3, #0
  00760	e58d303c	 str         r3, [sp, #0x3C]
  00764		 |$LN12@AllocSurfa@3|

; 165  :         return E_OUTOFMEMORY;

  00764	e3a0313a	 mov         r3, #0x3A, 2
  00768	e3833807	 orr         r3, r3, #7, 16
  0076c	e58d301c	 str         r3, [sp, #0x1C]
  00770	ea000001	 b           |$LN3@AllocSurfa@3|
  00774		 |$LN1@AllocSurfa@3|

; 166  :     }
; 167  : 
; 168  :     //  Surface created in video memory
; 169  :     return S_OK;

  00774	e3a03000	 mov         r3, #0
  00778	e58d301c	 str         r3, [sp, #0x1C]
  0077c		 |$LN3@AllocSurfa@3|

; 170  : }

  0077c	e59d001c	 ldr         r0, [sp, #0x1C]
  00780	e28dd040	 add         sp, sp, #0x40
  00784	e89d6010	 ldmia       sp, {r4, sp, lr}
  00788	e12fff1e	 bx          lr
  0078c		 |$LN16@AllocSurfa@3|
  0078c		 |$LN17@AllocSurfa@3|
  0078c	00000000	 DCD         |??_C@_1FC@GJEMKABA@?$AAO?$AAM?$AAA?$AAP?$AA?5?$AAD?$AAD?$AAr?$AAa?$AAw?$AA?5?$AAA?$AAl?$AAl?$AAo?$AAc?$AAS?$AAu?$AAr?$AAf?$AAa?$AAc?$AAe?$AA?5?$AA?9?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf@|
  00790		 |$LN18@AllocSurfa@3|
  00790	00000000	 DCD         |dpCurSettings|
  00794		 |$LN19@AllocSurfa@3|
  00794	8876017c	 DCD         0x8876017c
  00798		 |$LN20@AllocSurfa@3|
  00798	00000000	 DCD         |??_C@_1FO@PMDMNKEM@?$AAO?$AAM?$AAA?$AAP?$AA?5?$AAD?$AAD?$AAr?$AAa?$AAw?$AA?5?$AAA?$AAl?$AAl?$AAo?$AAc?$AAS?$AAu?$AAr?$AAf?$AAa?$AAc?$AAe?$AA?5?$AA?9?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf@|
  0079c		 |$M42587|

			 ENDP  ; |?AllocSurface@OMAPDDGPE@@UAAJPAPAVOMAPDDGPESurface@@W4OMAP_DSS_PIXELFORMAT@@HH@Z|, OMAPDDGPE::AllocSurface

	EXPORT	|?SetAssocSurface@OMAPDDGPESurface@@QAAXPAVOMAPSurface@@@Z| ; OMAPDDGPESurface::SetAssocSurface
	EXPORT	|?AllocSurface@OMAPDDGPE@@QAAJPAVOMAPDDGPESurface@@W4OMAP_DSS_PIXELFORMAT@@HH@Z| ; OMAPDDGPE::AllocSurface

  00020			 AREA	 |.pdata|, PDATA
|$T42604| DCD	|$LN9@AllocSurfa@4|
	DCD	0x40004504
; Function compile flags: /Odtp

  0079c			 AREA	 |.text|, CODE, ARM

  0079c		 |?AllocSurface@OMAPDDGPE@@QAAJPAVOMAPDDGPESurface@@W4OMAP_DSS_PIXELFORMAT@@HH@Z| PROC ; OMAPDDGPE::AllocSurface

; 179  : {

  0079c		 |$LN9@AllocSurfa@4|
  0079c	e1a0c00d	 mov         r12, sp
  007a0	e92d000f	 stmdb       sp!, {r0 - r3}
  007a4	e92d5010	 stmdb       sp!, {r4, r12, lr}
  007a8	e24dd02c	 sub         sp, sp, #0x2C
  007ac		 |$M42601|

; 180  :     BOOL            bResult;
; 181  :     OMAPSurface*    pAssocOmapSurface;
; 182  :     OMAPSurface*    pOmapSurface = pSurf->OmapSurface();

  007ac	e59d003c	 ldr         r0, [sp, #0x3C]
  007b0	eb000000	 bl          |?OmapSurface@OMAPDDGPESurface@@QAAPAVOMAPSurface@@XZ|
  007b4	e58d0020	 str         r0, [sp, #0x20]
  007b8	e59d3020	 ldr         r3, [sp, #0x20]
  007bc	e58d300c	 str         r3, [sp, #0xC]

; 183  : 
; 184  :     if (!m_bDssIspRszEnabled)

  007c0	e59d3038	 ldr         r3, [sp, #0x38]
  007c4	e2833f52	 add         r3, r3, #0x52, 30
  007c8	e5933000	 ldr         r3, [r3]
  007cc	e3530000	 cmp         r3, #0
  007d0	1a000003	 bne         |$LN2@AllocSurfa@4|

; 185  :         return DDERR_GENERIC;

  007d4	e3a03116	 mov         r3, #0x16, 2
  007d8	e3833901	 orr         r3, r3, #1, 18
  007dc	e58d3014	 str         r3, [sp, #0x14]
  007e0	ea00002b	 b           |$LN3@AllocSurfa@4|
  007e4		 |$LN2@AllocSurfa@4|

; 186  : 
; 187  :     //  Allocate OMAP surface
; 188  :     bResult = m_pSurfaceMgr->Allocate(
; 189  :                             pixelFormat,
; 190  :                             width,
; 191  :                             height,
; 192  :                             &pAssocOmapSurface,
; 193  :                             pOmapSurface );

  007e4	e59d300c	 ldr         r3, [sp, #0xC]
  007e8	e58d3004	 str         r3, [sp, #4]
  007ec	e28d3008	 add         r3, sp, #8
  007f0	e58d3000	 str         r3, [sp]
  007f4	e59d3048	 ldr         r3, [sp, #0x48]
  007f8	e59d2044	 ldr         r2, [sp, #0x44]
  007fc	e59d1040	 ldr         r1, [sp, #0x40]
  00800	e59d0038	 ldr         r0, [sp, #0x38]
  00804	e28000b4	 add         r0, r0, #0xB4
  00808	e590e000	 ldr         lr, [r0]
  0080c	e59d0038	 ldr         r0, [sp, #0x38]
  00810	e28000b4	 add         r0, r0, #0xB4
  00814	e5904000	 ldr         r4, [r0]
  00818	e59e0000	 ldr         r0, [lr]
  0081c	e280e028	 add         lr, r0, #0x28
  00820	e1a00004	 mov         r0, r4
  00824	e59e4000	 ldr         r4, [lr]
  00828	e1a0e00f	 mov         lr, pc
  0082c	e12fff14	 bx          r4
  00830	e58d0024	 str         r0, [sp, #0x24]
  00834	e59d3024	 ldr         r3, [sp, #0x24]
  00838	e58d3010	 str         r3, [sp, #0x10]

; 194  :     if (bResult == FALSE)

  0083c	e59d3010	 ldr         r3, [sp, #0x10]
  00840	e3530000	 cmp         r3, #0
  00844	1a00000d	 bne         |$LN1@AllocSurfa@4|

; 195  :     {
; 196  :         DEBUGMSG(GPE_ZONE_WARNING, (L"OMAP DDraw AllocSurface - Out of Video Memory\n"));

  00848	e59f305c	 ldr         r3, [pc, #0x5C]
  0084c	e5933440	 ldr         r3, [r3, #0x440]
  00850	e3130002	 tst         r3, #2
  00854	0a000004	 beq         |$LN5@AllocSurfa@4|
  00858	e59f0048	 ldr         r0, [pc, #0x48]
  0085c	eb000000	 bl          NKDbgPrintfW
  00860	e3a03001	 mov         r3, #1
  00864	e58d3028	 str         r3, [sp, #0x28]
  00868	ea000001	 b           |$LN6@AllocSurfa@4|
  0086c		 |$LN5@AllocSurfa@4|
  0086c	e3a03000	 mov         r3, #0
  00870	e58d3028	 str         r3, [sp, #0x28]
  00874		 |$LN6@AllocSurfa@4|

; 197  :         return DDERR_OUTOFVIDEOMEMORY;

  00874	e59f3028	 ldr         r3, [pc, #0x28]
  00878	e58d3014	 str         r3, [sp, #0x14]
  0087c	ea000004	 b           |$LN3@AllocSurfa@4|
  00880		 |$LN1@AllocSurfa@4|

; 198  :     }
; 199  :     
; 200  :     // add rsz surface to pSurf
; 201  :     pSurf->SetAssocSurface(pAssocOmapSurface);    

  00880	e59d1008	 ldr         r1, [sp, #8]
  00884	e59d003c	 ldr         r0, [sp, #0x3C]
  00888	eb000000	 bl          |?SetAssocSurface@OMAPDDGPESurface@@QAAXPAVOMAPSurface@@@Z|

; 202  :     
; 203  :     //  Surface created in video memory
; 204  :     return S_OK;

  0088c	e3a03000	 mov         r3, #0
  00890	e58d3014	 str         r3, [sp, #0x14]
  00894		 |$LN3@AllocSurfa@4|

; 205  : }

  00894	e59d0014	 ldr         r0, [sp, #0x14]
  00898	e28dd02c	 add         sp, sp, #0x2C
  0089c	e89d6010	 ldmia       sp, {r4, sp, lr}
  008a0	e12fff1e	 bx          lr
  008a4		 |$LN10@AllocSurfa@4|
  008a4		 |$LN11@AllocSurfa@4|
  008a4	8876017c	 DCD         0x8876017c
  008a8		 |$LN12@AllocSurfa@4|
  008a8	00000000	 DCD         |??_C@_1FO@PMDMNKEM@?$AAO?$AAM?$AAA?$AAP?$AA?5?$AAD?$AAD?$AAr?$AAa?$AAw?$AA?5?$AAA?$AAl?$AAl?$AAo?$AAc?$AAS?$AAu?$AAr?$AAf?$AAa?$AAc?$AAe?$AA?5?$AA?9?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf@|
  008ac		 |$LN13@AllocSurfa@4|
  008ac	00000000	 DCD         |dpCurSettings|
  008b0		 |$M42602|

			 ENDP  ; |?AllocSurface@OMAPDDGPE@@QAAJPAVOMAPDDGPESurface@@W4OMAP_DSS_PIXELFORMAT@@HH@Z|, OMAPDDGPE::AllocSurface

; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\inc\omap_ddgpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T42613| DCD	|$LN5@SetAssocSu|
	DCD	0x40000903
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetAssocSurface@OMAPDDGPESurface@@QAAXPAVOMAPSurface@@@Z| PROC ; OMAPDDGPESurface::SetAssocSurface

; 108  :     VOID                SetAssocSurface( OMAPSurface* pAssocSurface ) { m_pAssocSurface = pAssocSurface; }

  00000		 |$LN5@SetAssocSu|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M42610|
  0000c	e59d3008	 ldr         r3, [sp, #8]
  00010	e2832080	 add         r2, r3, #0x80
  00014	e59d300c	 ldr         r3, [sp, #0xC]
  00018	e5823000	 str         r3, [r2]
  0001c	e89d6000	 ldmia       sp, {sp, lr}
  00020	e12fff1e	 bx          lr
  00024		 |$M42611|

			 ENDP  ; |?SetAssocSurface@OMAPDDGPESurface@@QAAXPAVOMAPSurface@@@Z|, OMAPDDGPESurface::SetAssocSurface

	EXPORT	|?NumVisibleOverlays@OMAPDDGPE@@QAAKXZ|	; OMAPDDGPE::NumVisibleOverlays

  00028			 AREA	 |.pdata|, PDATA
|$T42621| DCD	|$LN8@NumVisible|
	DCD	0x40002404
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\ddgpe\omap_ddsurf.cpp

  008b0			 AREA	 |.text|, CODE, ARM

  008b0		 |?NumVisibleOverlays@OMAPDDGPE@@QAAKXZ| PROC ; OMAPDDGPE::NumVisibleOverlays

; 211  : {

  008b0		 |$LN8@NumVisible|
  008b0	e1a0c00d	 mov         r12, sp
  008b4	e92d0001	 stmdb       sp!, {r0}
  008b8	e92d5000	 stmdb       sp!, {r12, lr}
  008bc	e24dd004	 sub         sp, sp, #4
  008c0		 |$M42618|

; 212  :     //  Return number of visible overlays
; 213  :     if( m_pOverlay1Surf && m_pOverlay2Surf )

  008c0	e59d300c	 ldr         r3, [sp, #0xC]
  008c4	e28330c0	 add         r3, r3, #0xC0
  008c8	e5933000	 ldr         r3, [r3]
  008cc	e3530000	 cmp         r3, #0
  008d0	0a000007	 beq         |$LN3@NumVisible|
  008d4	e59d300c	 ldr         r3, [sp, #0xC]
  008d8	e28330c4	 add         r3, r3, #0xC4
  008dc	e5933000	 ldr         r3, [r3]
  008e0	e3530000	 cmp         r3, #0
  008e4	0a000002	 beq         |$LN3@NumVisible|

; 214  :         return 2;

  008e8	e3a03002	 mov         r3, #2
  008ec	e58d3000	 str         r3, [sp]
  008f0	ea00000e	 b           |$LN4@NumVisible|
  008f4		 |$LN3@NumVisible|

; 215  :         
; 216  :     if( m_pOverlay1Surf || m_pOverlay2Surf )

  008f4	e59d300c	 ldr         r3, [sp, #0xC]
  008f8	e28330c0	 add         r3, r3, #0xC0
  008fc	e5933000	 ldr         r3, [r3]
  00900	e3530000	 cmp         r3, #0
  00904	1a000004	 bne         |$LN1@NumVisible|
  00908	e59d300c	 ldr         r3, [sp, #0xC]
  0090c	e28330c4	 add         r3, r3, #0xC4
  00910	e5933000	 ldr         r3, [r3]
  00914	e3530000	 cmp         r3, #0
  00918	0a000002	 beq         |$LN2@NumVisible|
  0091c		 |$LN1@NumVisible|

; 217  :         return 1;

  0091c	e3a03001	 mov         r3, #1
  00920	e58d3000	 str         r3, [sp]
  00924	ea000001	 b           |$LN4@NumVisible|
  00928		 |$LN2@NumVisible|

; 218  : 
; 219  :     return 0;            

  00928	e3a03000	 mov         r3, #0
  0092c	e58d3000	 str         r3, [sp]
  00930		 |$LN4@NumVisible|

; 220  : }  

  00930	e59d0000	 ldr         r0, [sp]
  00934	e28dd004	 add         sp, sp, #4
  00938	e89d6000	 ldmia       sp, {sp, lr}
  0093c	e12fff1e	 bx          lr
  00940		 |$M42619|

			 ENDP  ; |?NumVisibleOverlays@OMAPDDGPE@@QAAKXZ|, OMAPDDGPE::NumVisibleOverlays

	EXPORT	|?DetermineTvOutSurface@OMAPDDGPE@@QAAXH@Z| ; OMAPDDGPE::DetermineTvOutSurface
	EXPORT	|??_C@_1GC@NKBFCIHO@?$AAD?$AAD?$AAr?$AAa?$AAw?$AA?5?$AAS?$AAh?$AAo?$AAw?$AAO?$AAv?$AAe?$AAr?$AAl?$AAa?$AAy?$AA?5?$AA?9?$AA?5?$AAa?$AAl?$AAr?$AAe?$AAa?$AAd?$AAy?$AA?5?$AAs?$AAh?$AAo?$AAw@| [ DATA ] ; `string'
	EXPORT	|?Parent@OMAPDDGPESurface@@QAAPAV1@XZ|	; OMAPDDGPESurface::Parent
	EXPORT	|?ShowOverlay@OMAPDDGPE@@QAAKPAVOMAPDDGPESurface@@PAUtagRECT@@1H@Z| ; OMAPDDGPE::ShowOverlay
	IMPORT	|?EnablePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@@Z| ; OMAPDisplayController::EnablePipeline
	IMPORT	|?SetScalingAttribs@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@PAUtagRECT@@1@Z| ; OMAPDisplayController::SetScalingAttribs
	IMPORT	|?RotatePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@W4OMAP_DSS_ROTATION@@@Z| ; OMAPDisplayController::RotatePipeline
	IMPORT	|?SetPipelineAttribs@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@W4OMAP_DSS_DESTINATION@@PAVOMAPSurface@@KK@Z| ; OMAPDisplayController::SetPipelineAttribs
	IMPORT	|?UpdateScalingAttribs@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@PAUtagRECT@@1@Z| ; OMAPDisplayController::UpdateScalingAttribs
	IMPORT	|?MirrorPipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@H@Z| ; OMAPDisplayController::MirrorPipeline
	IMPORT	|?DisableColorKey@OMAPDisplayController@@QAAHW4OMAP_DSS_COLORKEY@@W4OMAP_DSS_DESTINATION@@@Z| ; OMAPDisplayController::DisableColorKey
	IMPORT	|?DisablePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@@Z| ; OMAPDisplayController::DisablePipeline
	IMPORT	|__rt_udiv|
	IMPORT	|__utos|
	IMPORT	|__divs|
	IMPORT	|__gts|
	IMPORT	|__muld|
	IMPORT	|__stod|
	IMPORT	|__divd|
	IMPORT	|__dtou|

  00030			 AREA	 |.pdata|, PDATA
|$T42655| DCD	|$LN49@ShowOverla|
	DCD	0x40020504

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GC@NKBFCIHO@?$AAD?$AAD?$AAr?$AAa?$AAw?$AA?5?$AAS?$AAh?$AAo?$AAw?$AAO?$AAv?$AAe?$AAr?$AAl?$AAa?$AAy?$AA?5?$AA?9?$AA?5?$AAa?$AAl?$AAr?$AAe?$AAa?$AAd?$AAy?$AA?5?$AAs?$AAh?$AAo?$AAw@| DCB "D"
	DCB	0x0, "D", 0x0, "r", 0x0, "a", 0x0, "w", 0x0, " ", 0x0, "S"
	DCB	0x0, "h", 0x0, "o", 0x0, "w", 0x0, "O", 0x0, "v", 0x0, "e"
	DCB	0x0, "r", 0x0, "l", 0x0, "a", 0x0, "y", 0x0, " ", 0x0, "-"
	DCB	0x0, " ", 0x0, "a", 0x0, "l", 0x0, "r", 0x0, "e", 0x0, "a"
	DCB	0x0, "d", 0x0, "y", 0x0, " ", 0x0, "s", 0x0, "h", 0x0, "o"
	DCB	0x0, "w", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, " ", 0x0, "2"
	DCB	0x0, " ", 0x0, "o", 0x0, "v", 0x0, "e", 0x0, "r", 0x0, "l"
	DCB	0x0, "a", 0x0, "y", 0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Odtp

  00940			 AREA	 |.text|, CODE, ARM

  00940		 |?ShowOverlay@OMAPDDGPE@@QAAKPAVOMAPDDGPESurface@@PAUtagRECT@@1H@Z| PROC ; OMAPDDGPE::ShowOverlay

; 230  : {

  00940		 |$LN49@ShowOverla|
  00940	e1a0c00d	 mov         r12, sp
  00944	e92d000f	 stmdb       sp!, {r0 - r3}
  00948	e92d5030	 stmdb       sp!, {r4, r5, r12, lr}
  0094c	e24dd0bc	 sub         sp, sp, #0xBC
  00950		 |$M42652|

; 231  :     DWORD               dwResult = DD_OK;

  00950	e3a03000	 mov         r3, #0
  00954	e58d3020	 str         r3, [sp, #0x20]

; 232  :     BOOL                bResult;
; 233  :     OMAP_DSS_ROTATION   eRotation = OMAP_DSS_ROTATION_0;

  00958	e3a03000	 mov         r3, #0
  0095c	e58d3018	 str         r3, [sp, #0x18]

; 234  :     RECT                hdmiRect;
; 235  :     
; 236  :     
; 237  :     //  HDMI support
; 238  :     if( m_bHdmiEnable )

  00960	e59d30cc	 ldr         r3, [sp, #0xCC]
  00964	e2833f51	 add         r3, r3, #0x51, 30
  00968	e5933000	 ldr         r3, [r3]
  0096c	e3530000	 cmp         r3, #0
  00970	0a000063	 beq         |$LN28@ShowOverla|

; 239  :     {
; 240  :         //  Just show the overlay in full screen
; 241  :         DWORD srcWidth = pSrcRect->right - pSrcRect->left;

  00974	e59d30d4	 ldr         r3, [sp, #0xD4]
  00978	e2833008	 add         r3, r3, #8
  0097c	e5932000	 ldr         r2, [r3]
  00980	e59d30d4	 ldr         r3, [sp, #0xD4]
  00984	e5933000	 ldr         r3, [r3]
  00988	e0423003	 sub         r3, r2, r3
  0098c	e58d3034	 str         r3, [sp, #0x34]

; 242  :         DWORD srcHeight = pSrcRect->bottom - pSrcRect->top;

  00990	e59d30d4	 ldr         r3, [sp, #0xD4]
  00994	e283200c	 add         r2, r3, #0xC
  00998	e59d30d4	 ldr         r3, [sp, #0xD4]
  0099c	e2833004	 add         r3, r3, #4
  009a0	e5922000	 ldr         r2, [r2]
  009a4	e5933000	 ldr         r3, [r3]
  009a8	e0423003	 sub         r3, r2, r3
  009ac	e58d3028	 str         r3, [sp, #0x28]

; 243  :         DWORD dstWidth;
; 244  :         DWORD dstHeight;
; 245  :         float fSrcAspect = (float)srcWidth / (float) srcHeight;

  009b0	e59d0034	 ldr         r0, [sp, #0x34]
  009b4	eb000000	 bl          __utos
  009b8	e1a04000	 mov         r4, r0
  009bc	e59d0028	 ldr         r0, [sp, #0x28]
  009c0	eb000000	 bl          __utos
  009c4	e1a01000	 mov         r1, r0
  009c8	e1a00004	 mov         r0, r4
  009cc	eb000000	 bl          __divs
  009d0	e58d002c	 str         r0, [sp, #0x2C]

; 246  :         float fDstAspect = (float)1280.0 / (float)720.0;

  009d4	e59f3774	 ldr         r3, [pc, #0x774]
  009d8	e58d3038	 str         r3, [sp, #0x38]

; 247  : 
; 248  :         //  Scale overlay to fill screen
; 249  :         if( fDstAspect > fSrcAspect )

  009dc	e59d0038	 ldr         r0, [sp, #0x38]
  009e0	e59d102c	 ldr         r1, [sp, #0x2C]
  009e4	eb000000	 bl          __gts
  009e8	e3500000	 cmp         r0, #0
  009ec	0a000013	 beq         |$LN27@ShowOverla|

; 250  :         {
; 251  :             dstWidth  = (DWORD)(fSrcAspect * 1280.0 / fDstAspect);

  009f0	e59d002c	 ldr         r0, [sp, #0x2C]
  009f4	eb000000	 bl          __stod
  009f8	e3a02000	 mov         r2, #0
  009fc	e3a03101	 mov         r3, #1, 2
  00a00	e3833725	 orr         r3, r3, #0x25, 14
  00a04	eb000000	 bl          __muld
  00a08	e1a05001	 mov         r5, r1
  00a0c	e1a04000	 mov         r4, r0
  00a10	e59d0038	 ldr         r0, [sp, #0x38]
  00a14	eb000000	 bl          __stod
  00a18	e1a03001	 mov         r3, r1
  00a1c	e1a02000	 mov         r2, r0
  00a20	e1a00004	 mov         r0, r4
  00a24	e1a01005	 mov         r1, r5
  00a28	eb000000	 bl          __divd
  00a2c	eb000000	 bl          __dtou
  00a30	e58d0030	 str         r0, [sp, #0x30]

; 252  :             dstHeight = 720;

  00a34	e3a03e2d	 mov         r3, #0x2D, 28
  00a38	e58d3024	 str         r3, [sp, #0x24]

; 253  :         }
; 254  :         else

  00a3c	ea000011	 b           |$LN26@ShowOverla|
  00a40		 |$LN27@ShowOverla|

; 255  :         {
; 256  :             dstWidth  = 1280;

  00a40	e3a03c05	 mov         r3, #5, 24
  00a44	e58d3030	 str         r3, [sp, #0x30]

; 257  :             dstHeight = (DWORD)(fDstAspect * 720.0 / fSrcAspect);

  00a48	e59d0038	 ldr         r0, [sp, #0x38]
  00a4c	eb000000	 bl          __stod
  00a50	e3a02000	 mov         r2, #0
  00a54	e59f36f0	 ldr         r3, [pc, #0x6F0]
  00a58	eb000000	 bl          __muld
  00a5c	e1a05001	 mov         r5, r1
  00a60	e1a04000	 mov         r4, r0
  00a64	e59d002c	 ldr         r0, [sp, #0x2C]
  00a68	eb000000	 bl          __stod
  00a6c	e1a03001	 mov         r3, r1
  00a70	e1a02000	 mov         r2, r0
  00a74	e1a00004	 mov         r0, r4
  00a78	e1a01005	 mov         r1, r5
  00a7c	eb000000	 bl          __divd
  00a80	eb000000	 bl          __dtou
  00a84	e58d0024	 str         r0, [sp, #0x24]
  00a88		 |$LN26@ShowOverla|

; 258  :         }
; 259  : 
; 260  :         //  Scaled to fit HDMI 720p screen
; 261  :         hdmiRect.left   = (1280 - dstWidth)/2;

  00a88	e59d3030	 ldr         r3, [sp, #0x30]
  00a8c	e2631c05	 rsb         r1, r3, #5, 24
  00a90	e3a00002	 mov         r0, #2
  00a94	eb000000	 bl          __rt_udiv
  00a98	e58d0008	 str         r0, [sp, #8]

; 262  :         hdmiRect.right  = hdmiRect.left + dstWidth;

  00a9c	e59d2008	 ldr         r2, [sp, #8]
  00aa0	e59d3030	 ldr         r3, [sp, #0x30]
  00aa4	e0823003	 add         r3, r2, r3
  00aa8	e58d3010	 str         r3, [sp, #0x10]

; 263  :         hdmiRect.top    = (720 - dstHeight)/2;

  00aac	e59d3024	 ldr         r3, [sp, #0x24]
  00ab0	e2631e2d	 rsb         r1, r3, #0x2D, 28
  00ab4	e3a00002	 mov         r0, #2
  00ab8	eb000000	 bl          __rt_udiv
  00abc	e58d000c	 str         r0, [sp, #0xC]

; 264  :         hdmiRect.bottom = hdmiRect.top + dstHeight;

  00ac0	e59d200c	 ldr         r2, [sp, #0xC]
  00ac4	e59d3024	 ldr         r3, [sp, #0x24]
  00ac8	e0823003	 add         r3, r2, r3
  00acc	e58d3014	 str         r3, [sp, #0x14]

; 265  : 
; 266  :         pDestRect = &hdmiRect;        

  00ad0	e28d3008	 add         r3, sp, #8
  00ad4	e58d30d8	 str         r3, [sp, #0xD8]

; 267  :         
; 268  :         //  Disable GFX pipeline as we are in fullscreen to save memory bandwith. 
; 269  :         m_pDisplayContr->DisablePipeline(OMAP_DSS_PIPELINE_GFX);              

  00ad8	e3a01000	 mov         r1, #0
  00adc	e59d30cc	 ldr         r3, [sp, #0xCC]
  00ae0	e28330b0	 add         r3, r3, #0xB0
  00ae4	e5930000	 ldr         r0, [r3]
  00ae8	eb000000	 bl          |?DisablePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@@Z|

; 270  :         m_pDisplayContr->DisableColorKey( OMAP_DSS_COLORKEY_TRANS_SOURCE, OMAP_DSS_DESTINATION_LCD );

  00aec	e3a02000	 mov         r2, #0
  00af0	e3a01000	 mov         r1, #0
  00af4	e59d30cc	 ldr         r3, [sp, #0xCC]
  00af8	e28330b0	 add         r3, r3, #0xB0
  00afc	e5930000	 ldr         r0, [r3]
  00b00	eb000000	 bl          |?DisableColorKey@OMAPDisplayController@@QAAHW4OMAP_DSS_COLORKEY@@W4OMAP_DSS_DESTINATION@@@Z|
  00b04		 |$LN28@ShowOverla|

; 271  :     }
; 272  :     
; 273  :     //  Check if the overlay surface is part of a flipping chain on layer 1 (video 1)
; 274  :     //  and that video1 is not the TV out surface
; 275  :     if( m_pOverlay1Surf && (m_pOverlay1Surf->Parent() == pOverlaySurf->Parent()) )

  00b04	e59d30cc	 ldr         r3, [sp, #0xCC]
  00b08	e28330c0	 add         r3, r3, #0xC0
  00b0c	e5933000	 ldr         r3, [r3]
  00b10	e3530000	 cmp         r3, #0
  00b14	0a00003c	 beq         |$LN25@ShowOverla|
  00b18	e59d30cc	 ldr         r3, [sp, #0xCC]
  00b1c	e28330c0	 add         r3, r3, #0xC0
  00b20	e5930000	 ldr         r0, [r3]
  00b24	eb000000	 bl          |?Parent@OMAPDDGPESurface@@QAAPAV1@XZ|
  00b28	e58d0050	 str         r0, [sp, #0x50]
  00b2c	e59d00d0	 ldr         r0, [sp, #0xD0]
  00b30	eb000000	 bl          |?Parent@OMAPDDGPESurface@@QAAPAV1@XZ|
  00b34	e58d0054	 str         r0, [sp, #0x54]
  00b38	e59d2050	 ldr         r2, [sp, #0x50]
  00b3c	e59d3054	 ldr         r3, [sp, #0x54]
  00b40	e1520003	 cmp         r2, r3
  00b44	1a000030	 bne         |$LN25@ShowOverla|

; 276  :     {
; 277  :         //  Ensure that the VID1 pipeline is setup for TV out (repositioning not allowed to TV)
; 278  :         if( !m_bTVOutEnable || m_eTVPipeline != OMAP_DSS_PIPELINE_VIDEO1 )

  00b48	e59d30cc	 ldr         r3, [sp, #0xCC]
  00b4c	e2833e11	 add         r3, r3, #0x11, 28
  00b50	e5933000	 ldr         r3, [r3]
  00b54	e3530000	 cmp         r3, #0
  00b58	0a000004	 beq         |$LN23@ShowOverla|
  00b5c	e59d30cc	 ldr         r3, [sp, #0xCC]
  00b60	e2833f43	 add         r3, r3, #0x43, 30
  00b64	e5933000	 ldr         r3, [r3]
  00b68	e3530001	 cmp         r3, #1
  00b6c	0a000026	 beq         |$LN24@ShowOverla|
  00b70		 |$LN23@ShowOverla|

; 279  :         {
; 280  :             // if back-to-back show overlay 
; 281  :             CopySurfaceParams(pOverlaySurf->Parent(), pOverlaySurf);

  00b70	e59d00d0	 ldr         r0, [sp, #0xD0]
  00b74	eb000000	 bl          |?Parent@OMAPDDGPESurface@@QAAPAV1@XZ|
  00b78	e58d0058	 str         r0, [sp, #0x58]
  00b7c	e59d20d0	 ldr         r2, [sp, #0xD0]
  00b80	e59d1058	 ldr         r1, [sp, #0x58]
  00b84	e59d00cc	 ldr         r0, [sp, #0xCC]
  00b88	eb000000	 bl          |?CopySurfaceParams@OMAPDDGPE@@QAAHPAVOMAPDDGPESurface@@0@Z|

; 282  :             //  Mirror the pipeline output
; 283  :             m_pDisplayContr->MirrorPipeline(
; 284  :                                 OMAP_DSS_PIPELINE_VIDEO1,
; 285  :                                 bMirror );                                               

  00b8c	e59d20dc	 ldr         r2, [sp, #0xDC]
  00b90	e3a01001	 mov         r1, #1
  00b94	e59d30cc	 ldr         r3, [sp, #0xCC]
  00b98	e28330b0	 add         r3, r3, #0xB0
  00b9c	e5930000	 ldr         r0, [r3]
  00ba0	eb000000	 bl          |?MirrorPipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@H@Z|

; 286  : 
; 287  :             //  Update the scaling info for the pipeline
; 288  :             m_pDisplayContr->UpdateScalingAttribs(
; 289  :                                 OMAP_DSS_PIPELINE_VIDEO1,
; 290  :                                 pSrcRect,
; 291  :                                 pDestRect );   

  00ba4	e59d30d8	 ldr         r3, [sp, #0xD8]
  00ba8	e59d20d4	 ldr         r2, [sp, #0xD4]
  00bac	e3a01001	 mov         r1, #1
  00bb0	e59d00cc	 ldr         r0, [sp, #0xCC]
  00bb4	e28000b0	 add         r0, r0, #0xB0
  00bb8	e5900000	 ldr         r0, [r0]
  00bbc	eb000000	 bl          |?UpdateScalingAttribs@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@PAUtagRECT@@1@Z|

; 292  :             CopySurfaceParams(pOverlaySurf, pOverlaySurf->Parent());

  00bc0	e59d00d0	 ldr         r0, [sp, #0xD0]
  00bc4	eb000000	 bl          |?Parent@OMAPDDGPESurface@@QAAPAV1@XZ|
  00bc8	e58d005c	 str         r0, [sp, #0x5C]
  00bcc	e59d205c	 ldr         r2, [sp, #0x5C]
  00bd0	e59d10d0	 ldr         r1, [sp, #0xD0]
  00bd4	e59d00cc	 ldr         r0, [sp, #0xCC]
  00bd8	eb000000	 bl          |?CopySurfaceParams@OMAPDDGPE@@QAAHPAVOMAPDDGPESurface@@0@Z|

; 293  :                                 
; 294  :             //  Cache the rects    
; 295  :             m_rcOverlay1Src  = *pSrcRect;                                                             

  00bdc	e59d10d4	 ldr         r1, [sp, #0xD4]
  00be0	e59d30cc	 ldr         r3, [sp, #0xCC]
  00be4	e28300c8	 add         r0, r3, #0xC8
  00be8	e3a02010	 mov         r2, #0x10
  00bec	eb000000	 bl          memcpy

; 296  :             m_rcOverlay1Dest = *pDestRect;

  00bf0	e59d10d8	 ldr         r1, [sp, #0xD8]
  00bf4	e59d30cc	 ldr         r3, [sp, #0xCC]
  00bf8	e28300d8	 add         r0, r3, #0xD8
  00bfc	e3a02010	 mov         r2, #0x10
  00c00	eb000000	 bl          memcpy
  00c04	ea000147	 b           |$LN22@ShowOverla|

; 297  :             goto done;

  00c08	ea000146	 b           |$done$42156|
  00c0c		 |$LN24@ShowOverla|
  00c0c		 |$LN25@ShowOverla|

; 298  :         }
; 299  :     }
; 300  : 
; 301  : 
; 302  :     //  Check if the overlay surface is part of a flipping chain on layer 2 (video 2)
; 303  :     //  and that video2 is not the TV out surface
; 304  :     if( m_pOverlay2Surf && (m_pOverlay2Surf->Parent() == pOverlaySurf->Parent()) )

  00c0c	e59d30cc	 ldr         r3, [sp, #0xCC]
  00c10	e28330c4	 add         r3, r3, #0xC4
  00c14	e5933000	 ldr         r3, [r3]
  00c18	e3530000	 cmp         r3, #0
  00c1c	0a00003c	 beq         |$LN21@ShowOverla|
  00c20	e59d30cc	 ldr         r3, [sp, #0xCC]
  00c24	e28330c4	 add         r3, r3, #0xC4
  00c28	e5930000	 ldr         r0, [r3]
  00c2c	eb000000	 bl          |?Parent@OMAPDDGPESurface@@QAAPAV1@XZ|
  00c30	e58d0060	 str         r0, [sp, #0x60]
  00c34	e59d00d0	 ldr         r0, [sp, #0xD0]
  00c38	eb000000	 bl          |?Parent@OMAPDDGPESurface@@QAAPAV1@XZ|
  00c3c	e58d0064	 str         r0, [sp, #0x64]
  00c40	e59d2060	 ldr         r2, [sp, #0x60]
  00c44	e59d3064	 ldr         r3, [sp, #0x64]
  00c48	e1520003	 cmp         r2, r3
  00c4c	1a000030	 bne         |$LN21@ShowOverla|

; 305  :     {
; 306  :         //  Ensure that the VID1 pipeline is setup for TV out (repositioning not allowed to TV)
; 307  :         if( !m_bTVOutEnable || m_eTVPipeline != OMAP_DSS_PIPELINE_VIDEO2 )

  00c50	e59d30cc	 ldr         r3, [sp, #0xCC]
  00c54	e2833e11	 add         r3, r3, #0x11, 28
  00c58	e5933000	 ldr         r3, [r3]
  00c5c	e3530000	 cmp         r3, #0
  00c60	0a000004	 beq         |$LN19@ShowOverla|
  00c64	e59d30cc	 ldr         r3, [sp, #0xCC]
  00c68	e2833f43	 add         r3, r3, #0x43, 30
  00c6c	e5933000	 ldr         r3, [r3]
  00c70	e3530002	 cmp         r3, #2
  00c74	0a000026	 beq         |$LN20@ShowOverla|
  00c78		 |$LN19@ShowOverla|

; 308  :         {
; 309  :             // if back-to-back show overlay 
; 310  :             CopySurfaceParams(pOverlaySurf->Parent(), pOverlaySurf);

  00c78	e59d00d0	 ldr         r0, [sp, #0xD0]
  00c7c	eb000000	 bl          |?Parent@OMAPDDGPESurface@@QAAPAV1@XZ|
  00c80	e58d0068	 str         r0, [sp, #0x68]
  00c84	e59d20d0	 ldr         r2, [sp, #0xD0]
  00c88	e59d1068	 ldr         r1, [sp, #0x68]
  00c8c	e59d00cc	 ldr         r0, [sp, #0xCC]
  00c90	eb000000	 bl          |?CopySurfaceParams@OMAPDDGPE@@QAAHPAVOMAPDDGPESurface@@0@Z|

; 311  : 
; 312  :             //  Mirror the pipeline output
; 313  :             m_pDisplayContr->MirrorPipeline(
; 314  :                                 OMAP_DSS_PIPELINE_VIDEO2,
; 315  :                                 bMirror );                                               

  00c94	e59d20dc	 ldr         r2, [sp, #0xDC]
  00c98	e3a01002	 mov         r1, #2
  00c9c	e59d30cc	 ldr         r3, [sp, #0xCC]
  00ca0	e28330b0	 add         r3, r3, #0xB0
  00ca4	e5930000	 ldr         r0, [r3]
  00ca8	eb000000	 bl          |?MirrorPipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@H@Z|

; 316  : 
; 317  :             //  Update the scaling info for the pipeline
; 318  :             m_pDisplayContr->UpdateScalingAttribs(
; 319  :                                 OMAP_DSS_PIPELINE_VIDEO2,
; 320  :                                 pSrcRect,
; 321  :                                 pDestRect );   

  00cac	e59d30d8	 ldr         r3, [sp, #0xD8]
  00cb0	e59d20d4	 ldr         r2, [sp, #0xD4]
  00cb4	e3a01002	 mov         r1, #2
  00cb8	e59d00cc	 ldr         r0, [sp, #0xCC]
  00cbc	e28000b0	 add         r0, r0, #0xB0
  00cc0	e5900000	 ldr         r0, [r0]
  00cc4	eb000000	 bl          |?UpdateScalingAttribs@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@PAUtagRECT@@1@Z|

; 322  : 
; 323  :             CopySurfaceParams(pOverlaySurf, pOverlaySurf->Parent());

  00cc8	e59d00d0	 ldr         r0, [sp, #0xD0]
  00ccc	eb000000	 bl          |?Parent@OMAPDDGPESurface@@QAAPAV1@XZ|
  00cd0	e58d006c	 str         r0, [sp, #0x6C]
  00cd4	e59d206c	 ldr         r2, [sp, #0x6C]
  00cd8	e59d10d0	 ldr         r1, [sp, #0xD0]
  00cdc	e59d00cc	 ldr         r0, [sp, #0xCC]
  00ce0	eb000000	 bl          |?CopySurfaceParams@OMAPDDGPE@@QAAHPAVOMAPDDGPESurface@@0@Z|

; 324  :                                 
; 325  :             //  Cache the rects    
; 326  :             m_rcOverlay2Src  = *pSrcRect;                                                             

  00ce4	e59d10d4	 ldr         r1, [sp, #0xD4]
  00ce8	e59d30cc	 ldr         r3, [sp, #0xCC]
  00cec	e28300e8	 add         r0, r3, #0xE8
  00cf0	e3a02010	 mov         r2, #0x10
  00cf4	eb000000	 bl          memcpy

; 327  :             m_rcOverlay2Dest = *pDestRect;

  00cf8	e59d10d8	 ldr         r1, [sp, #0xD8]
  00cfc	e59d30cc	 ldr         r3, [sp, #0xCC]
  00d00	e28300f8	 add         r0, r3, #0xF8
  00d04	e3a02010	 mov         r2, #0x10
  00d08	eb000000	 bl          memcpy
  00d0c	ea000105	 b           |$LN18@ShowOverla|

; 328  :             goto done;

  00d10	ea000104	 b           |$done$42156|
  00d14		 |$LN20@ShowOverla|
  00d14		 |$LN21@ShowOverla|

; 329  : 
; 330  :         }
; 331  :     }
; 332  :     
; 333  : 
; 334  :     //  If both overlays are active and this is not a flipping chain update, can't show any more overlays
; 335  :     if( m_pOverlay1Surf != NULL && m_pOverlay2Surf != NULL )

  00d14	e59d30cc	 ldr         r3, [sp, #0xCC]
  00d18	e28330c0	 add         r3, r3, #0xC0
  00d1c	e5933000	 ldr         r3, [r3]
  00d20	e3530000	 cmp         r3, #0
  00d24	0a000013	 beq         |$LN17@ShowOverla|
  00d28	e59d30cc	 ldr         r3, [sp, #0xCC]
  00d2c	e28330c4	 add         r3, r3, #0xC4
  00d30	e5933000	 ldr         r3, [r3]
  00d34	e3530000	 cmp         r3, #0
  00d38	0a00000e	 beq         |$LN17@ShowOverla|

; 336  :     {
; 337  :         DEBUGMSG(GPE_ZONE_ERROR, (L"DDraw ShowOverlay - already showing 2 overlays\r\n"));

  00d3c	e59f3404	 ldr         r3, [pc, #0x404]
  00d40	e5933440	 ldr         r3, [r3, #0x440]
  00d44	e3130001	 tst         r3, #1
  00d48	0a000004	 beq         |$LN31@ShowOverla|
  00d4c	e59f03f0	 ldr         r0, [pc, #0x3F0]
  00d50	eb000000	 bl          NKDbgPrintfW
  00d54	e3a03001	 mov         r3, #1
  00d58	e58d3070	 str         r3, [sp, #0x70]
  00d5c	ea000001	 b           |$LN32@ShowOverla|
  00d60		 |$LN31@ShowOverla|
  00d60	e3a03000	 mov         r3, #0
  00d64	e58d3070	 str         r3, [sp, #0x70]
  00d68		 |$LN32@ShowOverla|

; 338  :             
; 339  :         dwResult = (DWORD) DDERR_OUTOFCAPS;

  00d68	e59f33d0	 ldr         r3, [pc, #0x3D0]
  00d6c	e58d3020	 str         r3, [sp, #0x20]
  00d70	ea0000ec	 b           |$LN16@ShowOverla|

; 340  :         goto done;

  00d74	ea0000eb	 b           |$done$42156|
  00d78		 |$LN17@ShowOverla|

; 341  :     }
; 342  : 
; 343  : 
; 344  :     //  If there is no current overlay surface on VID1, setup VID1 to show this one
; 345  :     if( m_pOverlay1Surf == NULL )

  00d78	e59d30cc	 ldr         r3, [sp, #0xCC]
  00d7c	e28330c0	 add         r3, r3, #0xC0
  00d80	e5933000	 ldr         r3, [r3]
  00d84	e3530000	 cmp         r3, #0
  00d88	1a00006f	 bne         |$LN15@ShowOverla|

; 346  :     {
; 347  :         //  Set the rotation of the pipeline to match the GFX plane
; 348  :         switch( m_iGraphicsRotate )

  00d8c	e59d30cc	 ldr         r3, [sp, #0xCC]
  00d90	e2833098	 add         r3, r3, #0x98
  00d94	e5933000	 ldr         r3, [r3]
  00d98	e58d3074	 str         r3, [sp, #0x74]
  00d9c	e59d3074	 ldr         r3, [sp, #0x74]
  00da0	e3530004	 cmp         r3, #4
  00da4	8a000015	 bhi         |$LN13@ShowOverla|
  00da8	e59d2074	 ldr         r2, [sp, #0x74]
  00dac	e1a03102	 mov         r3, r2, lsl #2
  00db0	e083300f	 add         r3, r3, pc
  00db4	e5933004	 ldr         r3, [r3, #4]
  00db8	e08ff003	 add         pc, pc, r3
  00dbc		 |$LN34@ShowOverla|
  00dbc		 |$LN33@ShowOverla|
  00dbc		 |$LN35@ShowOverla|
  00dbc	00000010	 DCD         0x10
  00dc0		 |$LN36@ShowOverla|
  00dc0	0000001c	 DCD         0x1c
  00dc4		 |$LN37@ShowOverla|
  00dc4	00000028	 DCD         0x28
  00dc8		 |$LN38@ShowOverla|
  00dc8	00000040	 DCD         0x40
  00dcc		 |$LN39@ShowOverla|
  00dcc	00000034	 DCD         0x34
  00dd0		 |$LN12@ShowOverla|

; 349  :         {
; 350  :             case DMDO_0:
; 351  :                 eRotation = OMAP_DSS_ROTATION_0;

  00dd0	e3a03000	 mov         r3, #0
  00dd4	e58d3018	 str         r3, [sp, #0x18]

; 352  :                 break;    

  00dd8	ea000008	 b           |$LN13@ShowOverla|
  00ddc		 |$LN11@ShowOverla|

; 353  : 
; 354  :             case DMDO_90:
; 355  :                 eRotation = OMAP_DSS_ROTATION_90;

  00ddc	e3a0305a	 mov         r3, #0x5A
  00de0	e58d3018	 str         r3, [sp, #0x18]

; 356  :                 break;    

  00de4	ea000005	 b           |$LN13@ShowOverla|
  00de8		 |$LN10@ShowOverla|

; 357  : 
; 358  :             case DMDO_180:
; 359  :                 eRotation = OMAP_DSS_ROTATION_180;

  00de8	e3a030b4	 mov         r3, #0xB4
  00dec	e58d3018	 str         r3, [sp, #0x18]

; 360  :                 break;    

  00df0	ea000002	 b           |$LN13@ShowOverla|
  00df4		 |$LN9@ShowOverla|

; 361  : 
; 362  :             case DMDO_270:
; 363  :                 eRotation = OMAP_DSS_ROTATION_270;

  00df4	e3a03c01	 mov         r3, #1, 24
  00df8	e383300e	 orr         r3, r3, #0xE
  00dfc	e58d3018	 str         r3, [sp, #0x18]
  00e00		 |$LN13@ShowOverla|

; 364  :                 break;    
; 365  :         }
; 366  : 
; 367  : 
; 368  :         //  Disable the pipeline
; 369  :         bResult = m_pDisplayContr->DisablePipeline(
; 370  :                                         OMAP_DSS_PIPELINE_VIDEO1 );                                               

  00e00	e3a01001	 mov         r1, #1
  00e04	e59d30cc	 ldr         r3, [sp, #0xCC]
  00e08	e28330b0	 add         r3, r3, #0xB0
  00e0c	e5930000	 ldr         r0, [r3]
  00e10	eb000000	 bl          |?DisablePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@@Z|
  00e14	e58d0078	 str         r0, [sp, #0x78]
  00e18	e59d3078	 ldr         r3, [sp, #0x78]
  00e1c	e58d301c	 str         r3, [sp, #0x1C]

; 371  : 
; 372  : 
; 373  :         //  Configure the display controller to show this overlay on the LCD scaled to the dest rect size
; 374  :         //  using video 1 layer
; 375  :         bResult = m_pDisplayContr->SetPipelineAttribs(
; 376  :                                         OMAP_DSS_PIPELINE_VIDEO1,
; 377  :                                         OMAP_DSS_DESTINATION_LCD, 
; 378  :                                         pOverlaySurf->OmapSurface() );                                 

  00e20	e59d00d0	 ldr         r0, [sp, #0xD0]
  00e24	eb000000	 bl          |?OmapSurface@OMAPDDGPESurface@@QAAPAVOMAPSurface@@XZ|
  00e28	e58d007c	 str         r0, [sp, #0x7C]
  00e2c	e3a03000	 mov         r3, #0
  00e30	e58d3004	 str         r3, [sp, #4]
  00e34	e3a03000	 mov         r3, #0
  00e38	e58d3000	 str         r3, [sp]
  00e3c	e59d307c	 ldr         r3, [sp, #0x7C]
  00e40	e3a02000	 mov         r2, #0
  00e44	e3a01001	 mov         r1, #1
  00e48	e59d00cc	 ldr         r0, [sp, #0xCC]
  00e4c	e28000b0	 add         r0, r0, #0xB0
  00e50	e5900000	 ldr         r0, [r0]
  00e54	eb000000	 bl          |?SetPipelineAttribs@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@W4OMAP_DSS_DESTINATION@@PAVOMAPSurface@@KK@Z|
  00e58	e58d0080	 str         r0, [sp, #0x80]
  00e5c	e59d3080	 ldr         r3, [sp, #0x80]
  00e60	e58d301c	 str         r3, [sp, #0x1C]

; 379  : 
; 380  :         //  Rotate the pipeline output
; 381  :         bResult = m_pDisplayContr->RotatePipeline(
; 382  :                                         OMAP_DSS_PIPELINE_VIDEO1,
; 383  :                                         eRotation );                                               

  00e64	e59d2018	 ldr         r2, [sp, #0x18]
  00e68	e3a01001	 mov         r1, #1
  00e6c	e59d30cc	 ldr         r3, [sp, #0xCC]
  00e70	e28330b0	 add         r3, r3, #0xB0
  00e74	e5930000	 ldr         r0, [r3]
  00e78	eb000000	 bl          |?RotatePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@W4OMAP_DSS_ROTATION@@@Z|
  00e7c	e58d0084	 str         r0, [sp, #0x84]
  00e80	e59d3084	 ldr         r3, [sp, #0x84]
  00e84	e58d301c	 str         r3, [sp, #0x1C]

; 384  : 
; 385  :         //  Mirror the pipeline output
; 386  :         bResult = m_pDisplayContr->MirrorPipeline(
; 387  :                                         OMAP_DSS_PIPELINE_VIDEO1,
; 388  :                                         bMirror );                                               

  00e88	e59d20dc	 ldr         r2, [sp, #0xDC]
  00e8c	e3a01001	 mov         r1, #1
  00e90	e59d30cc	 ldr         r3, [sp, #0xCC]
  00e94	e28330b0	 add         r3, r3, #0xB0
  00e98	e5930000	 ldr         r0, [r3]
  00e9c	eb000000	 bl          |?MirrorPipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@H@Z|
  00ea0	e58d0088	 str         r0, [sp, #0x88]
  00ea4	e59d3088	 ldr         r3, [sp, #0x88]
  00ea8	e58d301c	 str         r3, [sp, #0x1C]

; 389  : 
; 390  :         //  Set the scaling info for the pipeline
; 391  :         bResult = m_pDisplayContr->SetScalingAttribs(
; 392  :                                         OMAP_DSS_PIPELINE_VIDEO1,
; 393  :                                         pSrcRect,
; 394  :                                         pDestRect );                                 

  00eac	e59d30d8	 ldr         r3, [sp, #0xD8]
  00eb0	e59d20d4	 ldr         r2, [sp, #0xD4]
  00eb4	e3a01001	 mov         r1, #1
  00eb8	e59d00cc	 ldr         r0, [sp, #0xCC]
  00ebc	e28000b0	 add         r0, r0, #0xB0
  00ec0	e5900000	 ldr         r0, [r0]
  00ec4	eb000000	 bl          |?SetScalingAttribs@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@PAUtagRECT@@1@Z|
  00ec8	e58d008c	 str         r0, [sp, #0x8C]
  00ecc	e59d308c	 ldr         r3, [sp, #0x8C]
  00ed0	e58d301c	 str         r3, [sp, #0x1C]

; 395  : 
; 396  :         CopySurfaceParams(pOverlaySurf, pOverlaySurf->Parent());

  00ed4	e59d00d0	 ldr         r0, [sp, #0xD0]
  00ed8	eb000000	 bl          |?Parent@OMAPDDGPESurface@@QAAPAV1@XZ|
  00edc	e58d0090	 str         r0, [sp, #0x90]
  00ee0	e59d2090	 ldr         r2, [sp, #0x90]
  00ee4	e59d10d0	 ldr         r1, [sp, #0xD0]
  00ee8	e59d00cc	 ldr         r0, [sp, #0xCC]
  00eec	eb000000	 bl          |?CopySurfaceParams@OMAPDDGPE@@QAAHPAVOMAPDDGPESurface@@0@Z|

; 397  :         
; 398  :         //  Enable the pipeline
; 399  :         bResult = m_pDisplayContr->EnablePipeline(
; 400  :                                         OMAP_DSS_PIPELINE_VIDEO1 );                                               

  00ef0	e3a01001	 mov         r1, #1
  00ef4	e59d30cc	 ldr         r3, [sp, #0xCC]
  00ef8	e28330b0	 add         r3, r3, #0xB0
  00efc	e5930000	 ldr         r0, [r3]
  00f00	eb000000	 bl          |?EnablePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@@Z|
  00f04	e58d0094	 str         r0, [sp, #0x94]
  00f08	e59d3094	 ldr         r3, [sp, #0x94]
  00f0c	e58d301c	 str         r3, [sp, #0x1C]

; 401  : 
; 402  :         //  Cache current surface as the overlay surface
; 403  :         m_pOverlay1Surf = pOverlaySurf;

  00f10	e59d30cc	 ldr         r3, [sp, #0xCC]
  00f14	e28320c0	 add         r2, r3, #0xC0
  00f18	e59d30d0	 ldr         r3, [sp, #0xD0]
  00f1c	e5823000	 str         r3, [r2]

; 404  : 
; 405  :         //  Cache the rects    
; 406  :         m_rcOverlay1Src  = *pSrcRect;                                                             

  00f20	e59d10d4	 ldr         r1, [sp, #0xD4]
  00f24	e59d30cc	 ldr         r3, [sp, #0xCC]
  00f28	e28300c8	 add         r0, r3, #0xC8
  00f2c	e3a02010	 mov         r2, #0x10
  00f30	eb000000	 bl          memcpy

; 407  :         m_rcOverlay1Dest = *pDestRect;

  00f34	e59d10d8	 ldr         r1, [sp, #0xD8]
  00f38	e59d30cc	 ldr         r3, [sp, #0xCC]
  00f3c	e28300d8	 add         r0, r3, #0xD8
  00f40	e3a02010	 mov         r2, #0x10
  00f44	eb000000	 bl          memcpy
  00f48	ea000073	 b           |$LN8@ShowOverla|
  00f4c		 |$LN15@ShowOverla|

; 408  :     }
; 409  : 
; 410  : 
; 411  :     //  If there is no current overlay surface on VID2, setup VID2 to show this one
; 412  :     else if( m_pOverlay2Surf == NULL )

  00f4c	e59d30cc	 ldr         r3, [sp, #0xCC]
  00f50	e28330c4	 add         r3, r3, #0xC4
  00f54	e5933000	 ldr         r3, [r3]
  00f58	e3530000	 cmp         r3, #0
  00f5c	1a00006e	 bne         |$LN7@ShowOverla|

; 413  :     {
; 414  :         //  Set the rotation of the pipeline to match the GFX plane
; 415  :         switch( m_iGraphicsRotate )

  00f60	e59d30cc	 ldr         r3, [sp, #0xCC]
  00f64	e2833098	 add         r3, r3, #0x98
  00f68	e5933000	 ldr         r3, [r3]
  00f6c	e58d3098	 str         r3, [sp, #0x98]
  00f70	e59d3098	 ldr         r3, [sp, #0x98]
  00f74	e3530004	 cmp         r3, #4
  00f78	8a000015	 bhi         |$LN5@ShowOverla|
  00f7c	e59d2098	 ldr         r2, [sp, #0x98]
  00f80	e1a03102	 mov         r3, r2, lsl #2
  00f84	e083300f	 add         r3, r3, pc
  00f88	e5933004	 ldr         r3, [r3, #4]
  00f8c	e08ff003	 add         pc, pc, r3
  00f90		 |$LN41@ShowOverla|
  00f90		 |$LN40@ShowOverla|
  00f90		 |$LN42@ShowOverla|
  00f90	00000010	 DCD         0x10
  00f94		 |$LN43@ShowOverla|
  00f94	0000001c	 DCD         0x1c
  00f98		 |$LN44@ShowOverla|
  00f98	00000028	 DCD         0x28
  00f9c		 |$LN45@ShowOverla|
  00f9c	00000040	 DCD         0x40
  00fa0		 |$LN46@ShowOverla|
  00fa0	00000034	 DCD         0x34
  00fa4		 |$LN4@ShowOverla|

; 416  :         {
; 417  :             case DMDO_0:
; 418  :                 eRotation = OMAP_DSS_ROTATION_0;

  00fa4	e3a03000	 mov         r3, #0
  00fa8	e58d3018	 str         r3, [sp, #0x18]

; 419  :                 break;    

  00fac	ea000008	 b           |$LN5@ShowOverla|
  00fb0		 |$LN3@ShowOverla|

; 420  : 
; 421  :             case DMDO_90:
; 422  :                 eRotation = OMAP_DSS_ROTATION_90;

  00fb0	e3a0305a	 mov         r3, #0x5A
  00fb4	e58d3018	 str         r3, [sp, #0x18]

; 423  :                 break;    

  00fb8	ea000005	 b           |$LN5@ShowOverla|
  00fbc		 |$LN2@ShowOverla|

; 424  : 
; 425  :             case DMDO_180:
; 426  :                 eRotation = OMAP_DSS_ROTATION_180;

  00fbc	e3a030b4	 mov         r3, #0xB4
  00fc0	e58d3018	 str         r3, [sp, #0x18]

; 427  :                 break;    

  00fc4	ea000002	 b           |$LN5@ShowOverla|
  00fc8		 |$LN1@ShowOverla|

; 428  : 
; 429  :             case DMDO_270:
; 430  :                 eRotation = OMAP_DSS_ROTATION_270;

  00fc8	e3a03c01	 mov         r3, #1, 24
  00fcc	e383300e	 orr         r3, r3, #0xE
  00fd0	e58d3018	 str         r3, [sp, #0x18]
  00fd4		 |$LN5@ShowOverla|

; 431  :                 break;    
; 432  :         }
; 433  : 
; 434  : 
; 435  :         //  Disable the pipeline
; 436  :         bResult = m_pDisplayContr->DisablePipeline(
; 437  :                                         OMAP_DSS_PIPELINE_VIDEO2 );                                               

  00fd4	e3a01002	 mov         r1, #2
  00fd8	e59d30cc	 ldr         r3, [sp, #0xCC]
  00fdc	e28330b0	 add         r3, r3, #0xB0
  00fe0	e5930000	 ldr         r0, [r3]
  00fe4	eb000000	 bl          |?DisablePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@@Z|
  00fe8	e58d009c	 str         r0, [sp, #0x9C]
  00fec	e59d309c	 ldr         r3, [sp, #0x9C]
  00ff0	e58d301c	 str         r3, [sp, #0x1C]

; 438  : 
; 439  : 
; 440  :         //  Configure the display controller to show this overlay on the LCD scaled to the dest rect size
; 441  :         //  using video 1 layer
; 442  :         bResult = m_pDisplayContr->SetPipelineAttribs(
; 443  :                                         OMAP_DSS_PIPELINE_VIDEO2,
; 444  :                                         OMAP_DSS_DESTINATION_LCD, 
; 445  :                                         pOverlaySurf->OmapSurface() );                                 

  00ff4	e59d00d0	 ldr         r0, [sp, #0xD0]
  00ff8	eb000000	 bl          |?OmapSurface@OMAPDDGPESurface@@QAAPAVOMAPSurface@@XZ|
  00ffc	e58d00a0	 str         r0, [sp, #0xA0]
  01000	e3a03000	 mov         r3, #0
  01004	e58d3004	 str         r3, [sp, #4]
  01008	e3a03000	 mov         r3, #0
  0100c	e58d3000	 str         r3, [sp]
  01010	e59d30a0	 ldr         r3, [sp, #0xA0]
  01014	e3a02000	 mov         r2, #0
  01018	e3a01002	 mov         r1, #2
  0101c	e59d00cc	 ldr         r0, [sp, #0xCC]
  01020	e28000b0	 add         r0, r0, #0xB0
  01024	e5900000	 ldr         r0, [r0]
  01028	eb000000	 bl          |?SetPipelineAttribs@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@W4OMAP_DSS_DESTINATION@@PAVOMAPSurface@@KK@Z|
  0102c	e58d00a4	 str         r0, [sp, #0xA4]
  01030	e59d30a4	 ldr         r3, [sp, #0xA4]
  01034	e58d301c	 str         r3, [sp, #0x1C]

; 446  : 
; 447  :         //  Rotate the pipeline output
; 448  :         bResult = m_pDisplayContr->RotatePipeline(
; 449  :                                         OMAP_DSS_PIPELINE_VIDEO2,
; 450  :                                         eRotation );                                               

  01038	e59d2018	 ldr         r2, [sp, #0x18]
  0103c	e3a01002	 mov         r1, #2
  01040	e59d30cc	 ldr         r3, [sp, #0xCC]
  01044	e28330b0	 add         r3, r3, #0xB0
  01048	e5930000	 ldr         r0, [r3]
  0104c	eb000000	 bl          |?RotatePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@W4OMAP_DSS_ROTATION@@@Z|
  01050	e58d00a8	 str         r0, [sp, #0xA8]
  01054	e59d30a8	 ldr         r3, [sp, #0xA8]
  01058	e58d301c	 str         r3, [sp, #0x1C]

; 451  : 
; 452  :         //  Mirror the pipeline output
; 453  :         bResult = m_pDisplayContr->MirrorPipeline(
; 454  :                                         OMAP_DSS_PIPELINE_VIDEO2,
; 455  :                                         bMirror );                                               

  0105c	e59d20dc	 ldr         r2, [sp, #0xDC]
  01060	e3a01002	 mov         r1, #2
  01064	e59d30cc	 ldr         r3, [sp, #0xCC]
  01068	e28330b0	 add         r3, r3, #0xB0
  0106c	e5930000	 ldr         r0, [r3]
  01070	eb000000	 bl          |?MirrorPipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@H@Z|
  01074	e58d00ac	 str         r0, [sp, #0xAC]
  01078	e59d30ac	 ldr         r3, [sp, #0xAC]
  0107c	e58d301c	 str         r3, [sp, #0x1C]

; 456  : 
; 457  :         //  Set the scaling info for the pipeline
; 458  :         bResult = m_pDisplayContr->SetScalingAttribs(
; 459  :                                         OMAP_DSS_PIPELINE_VIDEO2,
; 460  :                                         pSrcRect,
; 461  :                                         pDestRect );                                 

  01080	e59d30d8	 ldr         r3, [sp, #0xD8]
  01084	e59d20d4	 ldr         r2, [sp, #0xD4]
  01088	e3a01002	 mov         r1, #2
  0108c	e59d00cc	 ldr         r0, [sp, #0xCC]
  01090	e28000b0	 add         r0, r0, #0xB0
  01094	e5900000	 ldr         r0, [r0]
  01098	eb000000	 bl          |?SetScalingAttribs@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@PAUtagRECT@@1@Z|
  0109c	e58d00b0	 str         r0, [sp, #0xB0]
  010a0	e59d30b0	 ldr         r3, [sp, #0xB0]
  010a4	e58d301c	 str         r3, [sp, #0x1C]

; 462  : 
; 463  :         CopySurfaceParams(pOverlaySurf, pOverlaySurf->Parent());

  010a8	e59d00d0	 ldr         r0, [sp, #0xD0]
  010ac	eb000000	 bl          |?Parent@OMAPDDGPESurface@@QAAPAV1@XZ|
  010b0	e58d00b4	 str         r0, [sp, #0xB4]
  010b4	e59d20b4	 ldr         r2, [sp, #0xB4]
  010b8	e59d10d0	 ldr         r1, [sp, #0xD0]
  010bc	e59d00cc	 ldr         r0, [sp, #0xCC]
  010c0	eb000000	 bl          |?CopySurfaceParams@OMAPDDGPE@@QAAHPAVOMAPDDGPESurface@@0@Z|

; 464  :         
; 465  :         //  Enable the pipeline
; 466  :         bResult = m_pDisplayContr->EnablePipeline(
; 467  :                                         OMAP_DSS_PIPELINE_VIDEO2 );                                               

  010c4	e3a01002	 mov         r1, #2
  010c8	e59d30cc	 ldr         r3, [sp, #0xCC]
  010cc	e28330b0	 add         r3, r3, #0xB0
  010d0	e5930000	 ldr         r0, [r3]
  010d4	eb000000	 bl          |?EnablePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@@Z|
  010d8	e58d00b8	 str         r0, [sp, #0xB8]
  010dc	e59d30b8	 ldr         r3, [sp, #0xB8]
  010e0	e58d301c	 str         r3, [sp, #0x1C]

; 468  : 
; 469  :         //  Cache current surface as the overlay surface
; 470  :         m_pOverlay2Surf = pOverlaySurf;

  010e4	e59d30cc	 ldr         r3, [sp, #0xCC]
  010e8	e28320c4	 add         r2, r3, #0xC4
  010ec	e59d30d0	 ldr         r3, [sp, #0xD0]
  010f0	e5823000	 str         r3, [r2]

; 471  : 
; 472  :         //  Cache the rects    
; 473  :         m_rcOverlay2Src  = *pSrcRect;                                                             

  010f4	e59d10d4	 ldr         r1, [sp, #0xD4]
  010f8	e59d30cc	 ldr         r3, [sp, #0xCC]
  010fc	e28300e8	 add         r0, r3, #0xE8
  01100	e3a02010	 mov         r2, #0x10
  01104	eb000000	 bl          memcpy

; 474  :         m_rcOverlay2Dest = *pDestRect;

  01108	e59d10d8	 ldr         r1, [sp, #0xD8]
  0110c	e59d30cc	 ldr         r3, [sp, #0xCC]
  01110	e28300f8	 add         r0, r3, #0xF8
  01114	e3a02010	 mov         r2, #0x10
  01118	eb000000	 bl          memcpy
  0111c		 |$LN7@ShowOverla|
  0111c		 |$LN8@ShowOverla|

; 475  :     }
; 476  : 
; 477  : 
; 478  :     //  Get the best surface to display on the TV
; 479  :     DetermineTvOutSurface();

  0111c	e3a01000	 mov         r1, #0
  01120	e59d00cc	 ldr         r0, [sp, #0xCC]
  01124	eb000000	 bl          |?DetermineTvOutSurface@OMAPDDGPE@@QAAXH@Z|
  01128		 |$LN16@ShowOverla|
  01128		 |$LN18@ShowOverla|
  01128		 |$LN22@ShowOverla|
  01128		 |$done$42156|

; 480  : 
; 481  : 
; 482  : done:
; 483  :     //  Return result
; 484  :     return dwResult;

  01128	e59d3020	 ldr         r3, [sp, #0x20]
  0112c	e58d304c	 str         r3, [sp, #0x4C]

; 485  : }  

  01130	e59d004c	 ldr         r0, [sp, #0x4C]
  01134	e28dd0bc	 add         sp, sp, #0xBC
  01138	e89d6030	 ldmia       sp, {r4, r5, sp, lr}
  0113c	e12fff1e	 bx          lr
  01140		 |$LN50@ShowOverla|
  01140		 |$LN51@ShowOverla|
  01140	88760168	 DCD         0x88760168
  01144		 |$LN52@ShowOverla|
  01144	00000000	 DCD         |??_C@_1GC@NKBFCIHO@?$AAD?$AAD?$AAr?$AAa?$AAw?$AA?5?$AAS?$AAh?$AAo?$AAw?$AAO?$AAv?$AAe?$AAr?$AAl?$AAa?$AAy?$AA?5?$AA?9?$AA?5?$AAa?$AAl?$AAr?$AAe?$AAa?$AAd?$AAy?$AA?5?$AAs?$AAh?$AAo?$AAw@|
  01148		 |$LN53@ShowOverla|
  01148	00000000	 DCD         |dpCurSettings|
  0114c		 |$LN54@ShowOverla|
  0114c	40868000	 DCD         0x40868000
  01150		 |$LN55@ShowOverla|
  01150	3fe38e39	 DCD         0x3fe38e39
  01154		 |$M42653|

			 ENDP  ; |?ShowOverlay@OMAPDDGPE@@QAAKPAVOMAPDDGPESurface@@PAUtagRECT@@1H@Z|, OMAPDDGPE::ShowOverlay

; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\inc\omap_ddgpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T42667| DCD	|$LN5@Parent|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Parent@OMAPDDGPESurface@@QAAPAV1@XZ| PROC ; OMAPDDGPESurface::Parent

; 104  :     OMAPDDGPESurface*   Parent() { return m_pParentSurface; }

  00000		 |$LN5@Parent|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M42664|
  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e2833084	 add         r3, r3, #0x84
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3000	 str         r3, [sp]
  00020	e59d0000	 ldr         r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M42665|

			 ENDP  ; |?Parent@OMAPDDGPESurface@@QAAPAV1@XZ|, OMAPDDGPESurface::Parent

	EXPORT	|?MoveOverlay@OMAPDDGPE@@QAAKPAVOMAPDDGPESurface@@JJ@Z| ; OMAPDDGPE::MoveOverlay
	IMPORT	|?MovePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@JJ@Z| ; OMAPDisplayController::MovePipeline

  00038			 AREA	 |.pdata|, PDATA
|$T42675| DCD	|$LN11@MoveOverla|
	DCD	0x40004e04
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\ddgpe\omap_ddsurf.cpp

  01154			 AREA	 |.text|, CODE, ARM

  01154		 |?MoveOverlay@OMAPDDGPE@@QAAKPAVOMAPDDGPESurface@@JJ@Z| PROC ; OMAPDDGPE::MoveOverlay

; 494  : {

  01154		 |$LN11@MoveOverla|
  01154	e1a0c00d	 mov         r12, sp
  01158	e92d000f	 stmdb       sp!, {r0 - r3}
  0115c	e92d5000	 stmdb       sp!, {r12, lr}
  01160	e24dd014	 sub         sp, sp, #0x14
  01164		 |$M42672|

; 495  :     //  Reposition the overlay (TV out is never repositioned b/c it is scaled)
; 496  :     if( m_pOverlay1Surf && (pOverlaySurf->Parent() == m_pOverlay1Surf->Parent()) )

  01164	e59d301c	 ldr         r3, [sp, #0x1C]
  01168	e28330c0	 add         r3, r3, #0xC0
  0116c	e5933000	 ldr         r3, [r3]
  01170	e3530000	 cmp         r3, #0
  01174	0a00001c	 beq         |$LN6@MoveOverla|
  01178	e59d0020	 ldr         r0, [sp, #0x20]
  0117c	eb000000	 bl          |?Parent@OMAPDDGPESurface@@QAAPAV1@XZ|
  01180	e58d0004	 str         r0, [sp, #4]
  01184	e59d301c	 ldr         r3, [sp, #0x1C]
  01188	e28330c0	 add         r3, r3, #0xC0
  0118c	e5930000	 ldr         r0, [r3]
  01190	eb000000	 bl          |?Parent@OMAPDDGPESurface@@QAAPAV1@XZ|
  01194	e58d0008	 str         r0, [sp, #8]
  01198	e59d2004	 ldr         r2, [sp, #4]
  0119c	e59d3008	 ldr         r3, [sp, #8]
  011a0	e1520003	 cmp         r2, r3
  011a4	1a000010	 bne         |$LN6@MoveOverla|

; 497  :     {
; 498  :         //  Ensure that the VID1 pipeline is setup for TV out (repositioning not allowed to TV)
; 499  :         if( !m_bTVOutEnable || m_eTVPipeline != OMAP_DSS_PIPELINE_VIDEO1 )

  011a8	e59d301c	 ldr         r3, [sp, #0x1C]
  011ac	e2833e11	 add         r3, r3, #0x11, 28
  011b0	e5933000	 ldr         r3, [r3]
  011b4	e3530000	 cmp         r3, #0
  011b8	0a000004	 beq         |$LN4@MoveOverla|
  011bc	e59d301c	 ldr         r3, [sp, #0x1C]
  011c0	e2833f43	 add         r3, r3, #0x43, 30
  011c4	e5933000	 ldr         r3, [r3]
  011c8	e3530001	 cmp         r3, #1
  011cc	0a000006	 beq         |$LN5@MoveOverla|
  011d0		 |$LN4@MoveOverla|

; 500  :         {
; 501  :             m_pDisplayContr->MovePipeline( OMAP_DSS_PIPELINE_VIDEO1, lXPos, lYPos );

  011d0	e59d3028	 ldr         r3, [sp, #0x28]
  011d4	e59d2024	 ldr         r2, [sp, #0x24]
  011d8	e3a01001	 mov         r1, #1
  011dc	e59d001c	 ldr         r0, [sp, #0x1C]
  011e0	e28000b0	 add         r0, r0, #0xB0
  011e4	e5900000	 ldr         r0, [r0]
  011e8	eb000000	 bl          |?MovePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@JJ@Z|
  011ec		 |$LN5@MoveOverla|
  011ec		 |$LN6@MoveOverla|

; 502  :         }
; 503  :     }
; 504  :     
; 505  :     if( m_pOverlay2Surf && (pOverlaySurf->Parent() == m_pOverlay2Surf->Parent()) )

  011ec	e59d301c	 ldr         r3, [sp, #0x1C]
  011f0	e28330c4	 add         r3, r3, #0xC4
  011f4	e5933000	 ldr         r3, [r3]
  011f8	e3530000	 cmp         r3, #0
  011fc	0a00001c	 beq         |$LN3@MoveOverla|
  01200	e59d0020	 ldr         r0, [sp, #0x20]
  01204	eb000000	 bl          |?Parent@OMAPDDGPESurface@@QAAPAV1@XZ|
  01208	e58d000c	 str         r0, [sp, #0xC]
  0120c	e59d301c	 ldr         r3, [sp, #0x1C]
  01210	e28330c4	 add         r3, r3, #0xC4
  01214	e5930000	 ldr         r0, [r3]
  01218	eb000000	 bl          |?Parent@OMAPDDGPESurface@@QAAPAV1@XZ|
  0121c	e58d0010	 str         r0, [sp, #0x10]
  01220	e59d200c	 ldr         r2, [sp, #0xC]
  01224	e59d3010	 ldr         r3, [sp, #0x10]
  01228	e1520003	 cmp         r2, r3
  0122c	1a000010	 bne         |$LN3@MoveOverla|

; 506  :     {
; 507  :         //  Ensure that the VID1 pipeline is setup for TV out (repositioning not allowed to TV)
; 508  :         if( !m_bTVOutEnable || m_eTVPipeline != OMAP_DSS_PIPELINE_VIDEO2 )

  01230	e59d301c	 ldr         r3, [sp, #0x1C]
  01234	e2833e11	 add         r3, r3, #0x11, 28
  01238	e5933000	 ldr         r3, [r3]
  0123c	e3530000	 cmp         r3, #0
  01240	0a000004	 beq         |$LN1@MoveOverla|
  01244	e59d301c	 ldr         r3, [sp, #0x1C]
  01248	e2833f43	 add         r3, r3, #0x43, 30
  0124c	e5933000	 ldr         r3, [r3]
  01250	e3530002	 cmp         r3, #2
  01254	0a000006	 beq         |$LN2@MoveOverla|
  01258		 |$LN1@MoveOverla|

; 509  :         {
; 510  :             m_pDisplayContr->MovePipeline( OMAP_DSS_PIPELINE_VIDEO2, lXPos, lYPos );

  01258	e59d3028	 ldr         r3, [sp, #0x28]
  0125c	e59d2024	 ldr         r2, [sp, #0x24]
  01260	e3a01002	 mov         r1, #2
  01264	e59d001c	 ldr         r0, [sp, #0x1C]
  01268	e28000b0	 add         r0, r0, #0xB0
  0126c	e5900000	 ldr         r0, [r0]
  01270	eb000000	 bl          |?MovePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@JJ@Z|
  01274		 |$LN2@MoveOverla|
  01274		 |$LN3@MoveOverla|

; 511  :         }
; 512  :     }
; 513  :     
; 514  :     //  Result
; 515  :     return DD_OK;

  01274	e3a03000	 mov         r3, #0
  01278	e58d3000	 str         r3, [sp]

; 516  : }  

  0127c	e59d0000	 ldr         r0, [sp]
  01280	e28dd014	 add         sp, sp, #0x14
  01284	e89d6000	 ldmia       sp, {sp, lr}
  01288	e12fff1e	 bx          lr
  0128c		 |$M42673|

			 ENDP  ; |?MoveOverlay@OMAPDDGPE@@QAAKPAVOMAPDDGPESurface@@JJ@Z|, OMAPDDGPE::MoveOverlay

	EXPORT	|?OmapAssocSurface@OMAPDDGPESurface@@QAAPAVOMAPSurface@@XZ| ; OMAPDDGPESurface::OmapAssocSurface
	EXPORT	|?HideOverlay@OMAPDDGPE@@QAAKPAVOMAPDDGPESurface@@@Z| ; OMAPDDGPE::HideOverlay

  00040			 AREA	 |.pdata|, PDATA
|$T42681| DCD	|$LN9@HideOverla|
	DCD	0x40008304
; Function compile flags: /Odtp

  0128c			 AREA	 |.text|, CODE, ARM

  0128c		 |?HideOverlay@OMAPDDGPE@@QAAKPAVOMAPDDGPESurface@@@Z| PROC ; OMAPDDGPE::HideOverlay

; 523  : {

  0128c		 |$LN9@HideOverla|
  0128c	e1a0c00d	 mov         r12, sp
  01290	e92d0003	 stmdb       sp!, {r0, r1}
  01294	e92d5000	 stmdb       sp!, {r12, lr}
  01298	e24dd02c	 sub         sp, sp, #0x2C
  0129c		 |$M42678|

; 524  :     //  Reset the clipping region for the surface
; 525  :     pOverlaySurf->OmapSurface()->SetClipping( NULL );

  0129c	e59d0038	 ldr         r0, [sp, #0x38]
  012a0	eb000000	 bl          |?OmapSurface@OMAPDDGPESurface@@QAAPAVOMAPSurface@@XZ|
  012a4	e58d0004	 str         r0, [sp, #4]
  012a8	e59d3004	 ldr         r3, [sp, #4]
  012ac	e58d3008	 str         r3, [sp, #8]
  012b0	e3a01000	 mov         r1, #0
  012b4	e59d0008	 ldr         r0, [sp, #8]
  012b8	e59d3008	 ldr         r3, [sp, #8]
  012bc	e5933000	 ldr         r3, [r3]
  012c0	e2833020	 add         r3, r3, #0x20
  012c4	e5933000	 ldr         r3, [r3]
  012c8	e1a0e00f	 mov         lr, pc
  012cc	e12fff13	 bx          r3

; 526  :     if (pOverlaySurf->OmapAssocSurface())

  012d0	e59d0038	 ldr         r0, [sp, #0x38]
  012d4	eb000000	 bl          |?OmapAssocSurface@OMAPDDGPESurface@@QAAPAVOMAPSurface@@XZ|
  012d8	e58d000c	 str         r0, [sp, #0xC]
  012dc	e59d300c	 ldr         r3, [sp, #0xC]
  012e0	e3530000	 cmp         r3, #0
  012e4	0a00000c	 beq         |$LN4@HideOverla|

; 527  :         pOverlaySurf->OmapAssocSurface()->SetClipping(NULL);

  012e8	e59d0038	 ldr         r0, [sp, #0x38]
  012ec	eb000000	 bl          |?OmapAssocSurface@OMAPDDGPESurface@@QAAPAVOMAPSurface@@XZ|
  012f0	e58d0010	 str         r0, [sp, #0x10]
  012f4	e59d3010	 ldr         r3, [sp, #0x10]
  012f8	e58d3014	 str         r3, [sp, #0x14]
  012fc	e3a01000	 mov         r1, #0
  01300	e59d0014	 ldr         r0, [sp, #0x14]
  01304	e59d3014	 ldr         r3, [sp, #0x14]
  01308	e5933000	 ldr         r3, [r3]
  0130c	e2833020	 add         r3, r3, #0x20
  01310	e5933000	 ldr         r3, [r3]
  01314	e1a0e00f	 mov         lr, pc
  01318	e12fff13	 bx          r3
  0131c		 |$LN4@HideOverla|

; 528  :     // Close RSZHandle
; 529  :     pOverlaySurf->OmapSurface()->SetRSZHandle(NULL, TRUE);

  0131c	e59d0038	 ldr         r0, [sp, #0x38]
  01320	eb000000	 bl          |?OmapSurface@OMAPDDGPESurface@@QAAPAVOMAPSurface@@XZ|
  01324	e58d0018	 str         r0, [sp, #0x18]
  01328	e3a02001	 mov         r2, #1
  0132c	e3a01000	 mov         r1, #0
  01330	e59d0018	 ldr         r0, [sp, #0x18]
  01334	eb000000	 bl          |?SetRSZHandle@OMAPSurface@@QAAXPAXH@Z|

; 530  :     
; 531  :     //  GFX pipeline may have been disabled if we went into fullscreen mode
; 532  :     m_pDisplayContr->EnablePipeline(OMAP_DSS_PIPELINE_GFX);

  01338	e3a01000	 mov         r1, #0
  0133c	e59d3034	 ldr         r3, [sp, #0x34]
  01340	e28330b0	 add         r3, r3, #0xB0
  01344	e5930000	 ldr         r0, [r3]
  01348	eb000000	 bl          |?EnablePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@@Z|

; 533  :     
; 534  :     //  Disable the overlay pipeline
; 535  :     if( m_pOverlay1Surf && (pOverlaySurf->Parent() == m_pOverlay1Surf->Parent()) )

  0134c	e59d3034	 ldr         r3, [sp, #0x34]
  01350	e28330c0	 add         r3, r3, #0xC0
  01354	e5933000	 ldr         r3, [r3]
  01358	e3530000	 cmp         r3, #0
  0135c	0a000014	 beq         |$LN3@HideOverla|
  01360	e59d0038	 ldr         r0, [sp, #0x38]
  01364	eb000000	 bl          |?Parent@OMAPDDGPESurface@@QAAPAV1@XZ|
  01368	e58d001c	 str         r0, [sp, #0x1C]
  0136c	e59d3034	 ldr         r3, [sp, #0x34]
  01370	e28330c0	 add         r3, r3, #0xC0
  01374	e5930000	 ldr         r0, [r3]
  01378	eb000000	 bl          |?Parent@OMAPDDGPESurface@@QAAPAV1@XZ|
  0137c	e58d0020	 str         r0, [sp, #0x20]
  01380	e59d201c	 ldr         r2, [sp, #0x1C]
  01384	e59d3020	 ldr         r3, [sp, #0x20]
  01388	e1520003	 cmp         r2, r3
  0138c	1a000008	 bne         |$LN3@HideOverla|

; 536  :     {
; 537  :         m_pDisplayContr->DisablePipeline( OMAP_DSS_PIPELINE_VIDEO1 );

  01390	e3a01001	 mov         r1, #1
  01394	e59d3034	 ldr         r3, [sp, #0x34]
  01398	e28330b0	 add         r3, r3, #0xB0
  0139c	e5930000	 ldr         r0, [r3]
  013a0	eb000000	 bl          |?DisablePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@@Z|

; 538  :         m_pOverlay1Surf = NULL;

  013a4	e59d3034	 ldr         r3, [sp, #0x34]
  013a8	e28320c0	 add         r2, r3, #0xC0
  013ac	e3a03000	 mov         r3, #0
  013b0	e5823000	 str         r3, [r2]
  013b4		 |$LN3@HideOverla|

; 539  :     }
; 540  :     
; 541  :     if( m_pOverlay2Surf && (pOverlaySurf->Parent() == m_pOverlay2Surf->Parent()) )

  013b4	e59d3034	 ldr         r3, [sp, #0x34]
  013b8	e28330c4	 add         r3, r3, #0xC4
  013bc	e5933000	 ldr         r3, [r3]
  013c0	e3530000	 cmp         r3, #0
  013c4	0a000014	 beq         |$LN2@HideOverla|
  013c8	e59d0038	 ldr         r0, [sp, #0x38]
  013cc	eb000000	 bl          |?Parent@OMAPDDGPESurface@@QAAPAV1@XZ|
  013d0	e58d0024	 str         r0, [sp, #0x24]
  013d4	e59d3034	 ldr         r3, [sp, #0x34]
  013d8	e28330c4	 add         r3, r3, #0xC4
  013dc	e5930000	 ldr         r0, [r3]
  013e0	eb000000	 bl          |?Parent@OMAPDDGPESurface@@QAAPAV1@XZ|
  013e4	e58d0028	 str         r0, [sp, #0x28]
  013e8	e59d2024	 ldr         r2, [sp, #0x24]
  013ec	e59d3028	 ldr         r3, [sp, #0x28]
  013f0	e1520003	 cmp         r2, r3
  013f4	1a000008	 bne         |$LN2@HideOverla|

; 542  :     {
; 543  :         m_pDisplayContr->DisablePipeline( OMAP_DSS_PIPELINE_VIDEO2 );

  013f8	e3a01002	 mov         r1, #2
  013fc	e59d3034	 ldr         r3, [sp, #0x34]
  01400	e28330b0	 add         r3, r3, #0xB0
  01404	e5930000	 ldr         r0, [r3]
  01408	eb000000	 bl          |?DisablePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@@Z|

; 544  :         m_pOverlay2Surf = NULL;

  0140c	e59d3034	 ldr         r3, [sp, #0x34]
  01410	e28320c4	 add         r2, r3, #0xC4
  01414	e3a03000	 mov         r3, #0
  01418	e5823000	 str         r3, [r2]
  0141c		 |$LN2@HideOverla|

; 545  :     }
; 546  : 
; 547  :     //  Disable any global alpha value and color key if both overlays are off
; 548  :     if( m_pOverlay1Surf == NULL && m_pOverlay2Surf == NULL )

  0141c	e59d3034	 ldr         r3, [sp, #0x34]
  01420	e28330c0	 add         r3, r3, #0xC0
  01424	e5933000	 ldr         r3, [r3]
  01428	e3530000	 cmp         r3, #0
  0142c	1a000010	 bne         |$LN1@HideOverla|
  01430	e59d3034	 ldr         r3, [sp, #0x34]
  01434	e28330c4	 add         r3, r3, #0xC4
  01438	e5933000	 ldr         r3, [r3]
  0143c	e3530000	 cmp         r3, #0
  01440	1a00000b	 bne         |$LN1@HideOverla|

; 549  :     {
; 550  :         m_pDisplayContr->DisableColorKey( OMAP_DSS_COLORKEY_TRANS_SOURCE, OMAP_DSS_DESTINATION_LCD );

  01444	e3a02000	 mov         r2, #0
  01448	e3a01000	 mov         r1, #0
  0144c	e59d3034	 ldr         r3, [sp, #0x34]
  01450	e28330b0	 add         r3, r3, #0xB0
  01454	e5930000	 ldr         r0, [r3]
  01458	eb000000	 bl          |?DisableColorKey@OMAPDisplayController@@QAAHW4OMAP_DSS_COLORKEY@@W4OMAP_DSS_DESTINATION@@@Z|

; 551  :         m_pDisplayContr->DisableColorKey( OMAP_DSS_COLORKEY_GLOBAL_ALPHA_GFX, OMAP_DSS_DESTINATION_LCD );

  0145c	e3a02000	 mov         r2, #0
  01460	e3a01002	 mov         r1, #2
  01464	e59d3034	 ldr         r3, [sp, #0x34]
  01468	e28330b0	 add         r3, r3, #0xB0
  0146c	e5930000	 ldr         r0, [r3]
  01470	eb000000	 bl          |?DisableColorKey@OMAPDisplayController@@QAAHW4OMAP_DSS_COLORKEY@@W4OMAP_DSS_DESTINATION@@@Z|
  01474		 |$LN1@HideOverla|

; 552  :     }
; 553  : 
; 554  :     //  Get the best surface to display on the TV
; 555  :     DetermineTvOutSurface();

  01474	e3a01000	 mov         r1, #0
  01478	e59d0034	 ldr         r0, [sp, #0x34]
  0147c	eb000000	 bl          |?DetermineTvOutSurface@OMAPDDGPE@@QAAXH@Z|

; 556  :     
; 557  :     //  Result
; 558  :     return DD_OK;

  01480	e3a03000	 mov         r3, #0
  01484	e58d3000	 str         r3, [sp]

; 559  : }  

  01488	e59d0000	 ldr         r0, [sp]
  0148c	e28dd02c	 add         sp, sp, #0x2C
  01490	e89d6000	 ldmia       sp, {sp, lr}
  01494	e12fff1e	 bx          lr
  01498		 |$M42679|

			 ENDP  ; |?HideOverlay@OMAPDDGPE@@QAAKPAVOMAPDDGPESurface@@@Z|, OMAPDDGPE::HideOverlay

; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\inc\omap_ddgpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T42687| DCD	|$LN5@OmapAssocS|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?OmapAssocSurface@OMAPDDGPESurface@@QAAPAVOMAPSurface@@XZ| PROC ; OMAPDDGPESurface::OmapAssocSurface

; 107  :     OMAPSurface*        OmapAssocSurface() { return m_pAssocSurface; }

  00000		 |$LN5@OmapAssocS|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M42684|
  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e2833080	 add         r3, r3, #0x80
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3000	 str         r3, [sp]
  00020	e59d0000	 ldr         r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M42685|

			 ENDP  ; |?OmapAssocSurface@OMAPDDGPESurface@@QAAPAVOMAPSurface@@XZ|, OMAPDDGPESurface::OmapAssocSurface

	EXPORT	|?SetSrcColorKey@OMAPDDGPE@@QAAKK@Z|	; OMAPDDGPE::SetSrcColorKey
	IMPORT	|?EnableColorKey@OMAPDisplayController@@QAAHW4OMAP_DSS_COLORKEY@@W4OMAP_DSS_DESTINATION@@K@Z| ; OMAPDisplayController::EnableColorKey

  00048			 AREA	 |.pdata|, PDATA
|$T42695| DCD	|$LN5@SetSrcColo|
	DCD	0x40001104
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\ddgpe\omap_ddsurf.cpp

  01498			 AREA	 |.text|, CODE, ARM

  01498		 |?SetSrcColorKey@OMAPDDGPE@@QAAKK@Z| PROC ; OMAPDDGPE::SetSrcColorKey

; 566  : {

  01498		 |$LN5@SetSrcColo|
  01498	e1a0c00d	 mov         r12, sp
  0149c	e92d0003	 stmdb       sp!, {r0, r1}
  014a0	e92d5000	 stmdb       sp!, {r12, lr}
  014a4	e24dd004	 sub         sp, sp, #4
  014a8		 |$M42692|

; 567  :     //  Enable the transparent source color key
; 568  :     m_pDisplayContr->EnableColorKey( OMAP_DSS_COLORKEY_TRANS_SOURCE, OMAP_DSS_DESTINATION_LCD, dwColorKey );

  014a8	e59d3010	 ldr         r3, [sp, #0x10]
  014ac	e3a02000	 mov         r2, #0
  014b0	e3a01000	 mov         r1, #0
  014b4	e59d000c	 ldr         r0, [sp, #0xC]
  014b8	e28000b0	 add         r0, r0, #0xB0
  014bc	e5900000	 ldr         r0, [r0]
  014c0	eb000000	 bl          |?EnableColorKey@OMAPDisplayController@@QAAHW4OMAP_DSS_COLORKEY@@W4OMAP_DSS_DESTINATION@@K@Z|

; 569  :     
; 570  :     //  Result
; 571  :     return DD_OK;

  014c4	e3a03000	 mov         r3, #0
  014c8	e58d3000	 str         r3, [sp]

; 572  : }  

  014cc	e59d0000	 ldr         r0, [sp]
  014d0	e28dd004	 add         sp, sp, #4
  014d4	e89d6000	 ldmia       sp, {sp, lr}
  014d8	e12fff1e	 bx          lr
  014dc		 |$M42693|

			 ENDP  ; |?SetSrcColorKey@OMAPDDGPE@@QAAKK@Z|, OMAPDDGPE::SetSrcColorKey

	EXPORT	|?SetDestColorKey@OMAPDDGPE@@QAAKK@Z|	; OMAPDDGPE::SetDestColorKey

  00050			 AREA	 |.pdata|, PDATA
|$T42701| DCD	|$LN5@SetDestCol|
	DCD	0x40001104
; Function compile flags: /Odtp

  014dc			 AREA	 |.text|, CODE, ARM

  014dc		 |?SetDestColorKey@OMAPDDGPE@@QAAKK@Z| PROC ; OMAPDDGPE::SetDestColorKey

; 579  : {

  014dc		 |$LN5@SetDestCol|
  014dc	e1a0c00d	 mov         r12, sp
  014e0	e92d0003	 stmdb       sp!, {r0, r1}
  014e4	e92d5000	 stmdb       sp!, {r12, lr}
  014e8	e24dd004	 sub         sp, sp, #4
  014ec		 |$M42698|

; 580  :     //  Enable the transparent destination color key
; 581  :     m_pDisplayContr->EnableColorKey( OMAP_DSS_COLORKEY_TRANS_DEST, OMAP_DSS_DESTINATION_LCD, dwColorKey );

  014ec	e59d3010	 ldr         r3, [sp, #0x10]
  014f0	e3a02000	 mov         r2, #0
  014f4	e3a01001	 mov         r1, #1
  014f8	e59d000c	 ldr         r0, [sp, #0xC]
  014fc	e28000b0	 add         r0, r0, #0xB0
  01500	e5900000	 ldr         r0, [r0]
  01504	eb000000	 bl          |?EnableColorKey@OMAPDisplayController@@QAAHW4OMAP_DSS_COLORKEY@@W4OMAP_DSS_DESTINATION@@K@Z|

; 582  :     
; 583  :     //  Result
; 584  :     return DD_OK;

  01508	e3a03000	 mov         r3, #0
  0150c	e58d3000	 str         r3, [sp]

; 585  : }  

  01510	e59d0000	 ldr         r0, [sp]
  01514	e28dd004	 add         sp, sp, #4
  01518	e89d6000	 ldmia       sp, {sp, lr}
  0151c	e12fff1e	 bx          lr
  01520		 |$M42699|

			 ENDP  ; |?SetDestColorKey@OMAPDDGPE@@QAAKK@Z|, OMAPDDGPE::SetDestColorKey

	EXPORT	|?SetAlphaConst@OMAPDDGPE@@QAAKW4OMAP_DSS_COLORKEY@@K@Z| ; OMAPDDGPE::SetAlphaConst

  00058			 AREA	 |.pdata|, PDATA
|$T42707| DCD	|$LN5@SetAlphaCo|
	DCD	0x40001104
; Function compile flags: /Odtp

  01520			 AREA	 |.text|, CODE, ARM

  01520		 |?SetAlphaConst@OMAPDDGPE@@QAAKW4OMAP_DSS_COLORKEY@@K@Z| PROC ; OMAPDDGPE::SetAlphaConst

; 593  : {

  01520		 |$LN5@SetAlphaCo|
  01520	e1a0c00d	 mov         r12, sp
  01524	e92d0007	 stmdb       sp!, {r0 - r2}
  01528	e92d5000	 stmdb       sp!, {r12, lr}
  0152c	e24dd004	 sub         sp, sp, #4
  01530		 |$M42704|

; 594  :     //  Enable the alpha const for GFX or VID2
; 595  :     m_pDisplayContr->EnableColorKey( eColorKey, OMAP_DSS_DESTINATION_LCD, dwColorKey );

  01530	e59d3014	 ldr         r3, [sp, #0x14]
  01534	e3a02000	 mov         r2, #0
  01538	e59d1010	 ldr         r1, [sp, #0x10]
  0153c	e59d000c	 ldr         r0, [sp, #0xC]
  01540	e28000b0	 add         r0, r0, #0xB0
  01544	e5900000	 ldr         r0, [r0]
  01548	eb000000	 bl          |?EnableColorKey@OMAPDisplayController@@QAAHW4OMAP_DSS_COLORKEY@@W4OMAP_DSS_DESTINATION@@K@Z|

; 596  :     
; 597  :     //  Result
; 598  :     return DD_OK;

  0154c	e3a03000	 mov         r3, #0
  01550	e58d3000	 str         r3, [sp]

; 599  : }  

  01554	e59d0000	 ldr         r0, [sp]
  01558	e28dd004	 add         sp, sp, #4
  0155c	e89d6000	 ldmia       sp, {sp, lr}
  01560	e12fff1e	 bx          lr
  01564		 |$M42705|

			 ENDP  ; |?SetAlphaConst@OMAPDDGPE@@QAAKW4OMAP_DSS_COLORKEY@@K@Z|, OMAPDDGPE::SetAlphaConst

	EXPORT	|?DisableColorKey@OMAPDDGPE@@QAAKXZ|	; OMAPDDGPE::DisableColorKey

  00060			 AREA	 |.pdata|, PDATA
|$T42713| DCD	|$LN5@DisableCol|
	DCD	0x40001004
; Function compile flags: /Odtp

  01564			 AREA	 |.text|, CODE, ARM

  01564		 |?DisableColorKey@OMAPDDGPE@@QAAKXZ| PROC ; OMAPDDGPE::DisableColorKey

; 604  : {

  01564		 |$LN5@DisableCol|
  01564	e1a0c00d	 mov         r12, sp
  01568	e92d0001	 stmdb       sp!, {r0}
  0156c	e92d5000	 stmdb       sp!, {r12, lr}
  01570	e24dd004	 sub         sp, sp, #4
  01574		 |$M42710|

; 605  :     //  Disable the transparent destination color key
; 606  :     m_pDisplayContr->DisableColorKey( OMAP_DSS_COLORKEY_TRANS_SOURCE, OMAP_DSS_DESTINATION_LCD );

  01574	e3a02000	 mov         r2, #0
  01578	e3a01000	 mov         r1, #0
  0157c	e59d300c	 ldr         r3, [sp, #0xC]
  01580	e28330b0	 add         r3, r3, #0xB0
  01584	e5930000	 ldr         r0, [r3]
  01588	eb000000	 bl          |?DisableColorKey@OMAPDisplayController@@QAAHW4OMAP_DSS_COLORKEY@@W4OMAP_DSS_DESTINATION@@@Z|

; 607  :     
; 608  :     //  Result
; 609  :     return DD_OK;

  0158c	e3a03000	 mov         r3, #0
  01590	e58d3000	 str         r3, [sp]

; 610  : }  

  01594	e59d0000	 ldr         r0, [sp]
  01598	e28dd004	 add         sp, sp, #4
  0159c	e89d6000	 ldmia       sp, {sp, lr}
  015a0	e12fff1e	 bx          lr
  015a4		 |$M42711|

			 ENDP  ; |?DisableColorKey@OMAPDDGPE@@QAAKXZ|, OMAPDDGPE::DisableColorKey

	EXPORT	|?DisableAlphaConst@OMAPDDGPE@@QAAKXZ|	; OMAPDDGPE::DisableAlphaConst

  00068			 AREA	 |.pdata|, PDATA
|$T42719| DCD	|$LN5@DisableAlp|
	DCD	0x40001604
; Function compile flags: /Odtp

  015a4			 AREA	 |.text|, CODE, ARM

  015a4		 |?DisableAlphaConst@OMAPDDGPE@@QAAKXZ| PROC ; OMAPDDGPE::DisableAlphaConst

; 615  : {

  015a4		 |$LN5@DisableAlp|
  015a4	e1a0c00d	 mov         r12, sp
  015a8	e92d0001	 stmdb       sp!, {r0}
  015ac	e92d5000	 stmdb       sp!, {r12, lr}
  015b0	e24dd004	 sub         sp, sp, #4
  015b4		 |$M42716|

; 616  :     //  Disable the alpha const value
; 617  :     m_pDisplayContr->DisableColorKey( OMAP_DSS_COLORKEY_GLOBAL_ALPHA_GFX, OMAP_DSS_DESTINATION_LCD );

  015b4	e3a02000	 mov         r2, #0
  015b8	e3a01002	 mov         r1, #2
  015bc	e59d300c	 ldr         r3, [sp, #0xC]
  015c0	e28330b0	 add         r3, r3, #0xB0
  015c4	e5930000	 ldr         r0, [r3]
  015c8	eb000000	 bl          |?DisableColorKey@OMAPDisplayController@@QAAHW4OMAP_DSS_COLORKEY@@W4OMAP_DSS_DESTINATION@@@Z|

; 618  :     m_pDisplayContr->DisableColorKey( OMAP_DSS_COLORKEY_GLOBAL_ALPHA_VIDEO2, OMAP_DSS_DESTINATION_LCD );

  015cc	e3a02000	 mov         r2, #0
  015d0	e3a01003	 mov         r1, #3
  015d4	e59d300c	 ldr         r3, [sp, #0xC]
  015d8	e28330b0	 add         r3, r3, #0xB0
  015dc	e5930000	 ldr         r0, [r3]
  015e0	eb000000	 bl          |?DisableColorKey@OMAPDisplayController@@QAAHW4OMAP_DSS_COLORKEY@@W4OMAP_DSS_DESTINATION@@@Z|

; 619  :     
; 620  :     //  Result
; 621  :     return DD_OK;

  015e4	e3a03000	 mov         r3, #0
  015e8	e58d3000	 str         r3, [sp]

; 622  : }  

  015ec	e59d0000	 ldr         r0, [sp]
  015f0	e28dd004	 add         sp, sp, #4
  015f4	e89d6000	 ldmia       sp, {sp, lr}
  015f8	e12fff1e	 bx          lr
  015fc		 |$M42717|

			 ENDP  ; |?DisableAlphaConst@OMAPDDGPE@@QAAKXZ|, OMAPDDGPE::DisableAlphaConst

	EXPORT	|?FlipInProgress@OMAPDDGPE@@UAAHXZ|	; OMAPDDGPE::FlipInProgress

  00070			 AREA	 |.pdata|, PDATA
|$T42727| DCD	|$LN9@FlipInProg|
	DCD	0x40002804
; Function compile flags: /Odtp

  015fc			 AREA	 |.text|, CODE, ARM

  015fc		 |?FlipInProgress@OMAPDDGPE@@UAAHXZ| PROC ; OMAPDDGPE::FlipInProgress

; 627  : {

  015fc		 |$LN9@FlipInProg|
  015fc	e1a0c00d	 mov         r12, sp
  01600	e92d0001	 stmdb       sp!, {r0}
  01604	e92d5000	 stmdb       sp!, {r12, lr}
  01608	e24dd00c	 sub         sp, sp, #0xC
  0160c		 |$M42724|

; 628  :     //  If there has been a FlipSurface called, check for VSYNC status bit   
; 629  :     if( m_bFlipInProgress )

  0160c	e59d3014	 ldr         r3, [sp, #0x14]
  01610	e28330b8	 add         r3, r3, #0xB8
  01614	e5933000	 ldr         r3, [r3]
  01618	e3530000	 cmp         r3, #0
  0161c	0a00000e	 beq         |$LN2@FlipInProg|

; 630  :     {
; 631  :         //  Check for VSYNC and clear it and the flip in progress flag
; 632  :         if( InVBlank() )

  01620	e59d3014	 ldr         r3, [sp, #0x14]
  01624	e5933000	 ldr         r3, [r3]
  01628	e2833030	 add         r3, r3, #0x30
  0162c	e59d0014	 ldr         r0, [sp, #0x14]
  01630	e5933000	 ldr         r3, [r3]
  01634	e1a0e00f	 mov         lr, pc
  01638	e12fff13	 bx          r3
  0163c	e58d0004	 str         r0, [sp, #4]
  01640	e59d3004	 ldr         r3, [sp, #4]
  01644	e3530000	 cmp         r3, #0
  01648	0a000003	 beq         |$LN1@FlipInProg|

; 633  :             m_bFlipInProgress = FALSE;

  0164c	e59d3014	 ldr         r3, [sp, #0x14]
  01650	e28320b8	 add         r2, r3, #0xB8
  01654	e3a03000	 mov         r3, #0
  01658	e5823000	 str         r3, [r2]
  0165c		 |$LN1@FlipInProg|
  0165c		 |$LN2@FlipInProg|

; 634  :     }
; 635  : 
; 636  :     //  Return status flip
; 637  :     return (m_bFlipInProgress) ? 1 : 0;

  0165c	e59d3014	 ldr         r3, [sp, #0x14]
  01660	e28330b8	 add         r3, r3, #0xB8
  01664	e5933000	 ldr         r3, [r3]
  01668	e3530000	 cmp         r3, #0
  0166c	0a000002	 beq         |$LN5@FlipInProg|
  01670	e3a03001	 mov         r3, #1
  01674	e58d3008	 str         r3, [sp, #8]
  01678	ea000001	 b           |$LN6@FlipInProg|
  0167c		 |$LN5@FlipInProg|
  0167c	e3a03000	 mov         r3, #0
  01680	e58d3008	 str         r3, [sp, #8]
  01684		 |$LN6@FlipInProg|
  01684	e59d3008	 ldr         r3, [sp, #8]
  01688	e58d3000	 str         r3, [sp]

; 638  : }

  0168c	e59d0000	 ldr         r0, [sp]
  01690	e28dd00c	 add         sp, sp, #0xC
  01694	e89d6000	 ldmia       sp, {sp, lr}
  01698	e12fff1e	 bx          lr
  0169c		 |$M42725|

			 ENDP  ; |?FlipInProgress@OMAPDDGPE@@UAAHXZ|, OMAPDDGPE::FlipInProgress

	EXPORT	|?WaitForVBlank@OMAPDDGPE@@UAAXXZ|	; OMAPDDGPE::WaitForVBlank
	IMPORT	|?WaitForVsync@OMAPDisplayController@@QAAXXZ| ; OMAPDisplayController::WaitForVsync

  00078			 AREA	 |.pdata|, PDATA
|$T42732| DCD	|$LN5@WaitForVBl|
	DCD	0x40000903
; Function compile flags: /Odtp

  0169c			 AREA	 |.text|, CODE, ARM

  0169c		 |?WaitForVBlank@OMAPDDGPE@@UAAXXZ| PROC ; OMAPDDGPE::WaitForVBlank

; 642  : {  

  0169c		 |$LN5@WaitForVBl|
  0169c	e1a0c00d	 mov         r12, sp
  016a0	e92d0001	 stmdb       sp!, {r0}
  016a4	e92d5000	 stmdb       sp!, {r12, lr}
  016a8		 |$M42729|

; 643  :     m_pDisplayContr->WaitForVsync(); 

  016a8	e59d3008	 ldr         r3, [sp, #8]
  016ac	e28330b0	 add         r3, r3, #0xB0
  016b0	e5930000	 ldr         r0, [r3]
  016b4	eb000000	 bl          |?WaitForVsync@OMAPDisplayController@@QAAXXZ|

; 644  : }

  016b8	e89d6000	 ldmia       sp, {sp, lr}
  016bc	e12fff1e	 bx          lr
  016c0		 |$M42730|

			 ENDP  ; |?WaitForVBlank@OMAPDDGPE@@UAAXXZ|, OMAPDDGPE::WaitForVBlank

	EXPORT	|?InVBlank@OMAPDDGPE@@UAAHXZ|		; OMAPDDGPE::InVBlank
	IMPORT	|?InVSync@OMAPDisplayController@@QAAHH@Z| ; OMAPDisplayController::InVSync

  00080			 AREA	 |.pdata|, PDATA
|$T42738| DCD	|$LN5@InVBlank|
	DCD	0x40001004
; Function compile flags: /Odtp

  016c0			 AREA	 |.text|, CODE, ARM

  016c0		 |?InVBlank@OMAPDDGPE@@UAAHXZ| PROC	; OMAPDDGPE::InVBlank

; 648  : {

  016c0		 |$LN5@InVBlank|
  016c0	e1a0c00d	 mov         r12, sp
  016c4	e92d0001	 stmdb       sp!, {r0}
  016c8	e92d5000	 stmdb       sp!, {r12, lr}
  016cc	e24dd008	 sub         sp, sp, #8
  016d0		 |$M42735|

; 649  :     return m_pDisplayContr->InVSync(TRUE);

  016d0	e3a01001	 mov         r1, #1
  016d4	e59d3010	 ldr         r3, [sp, #0x10]
  016d8	e28330b0	 add         r3, r3, #0xB0
  016dc	e5930000	 ldr         r0, [r3]
  016e0	eb000000	 bl          |?InVSync@OMAPDisplayController@@QAAHH@Z|
  016e4	e58d0004	 str         r0, [sp, #4]
  016e8	e59d3004	 ldr         r3, [sp, #4]
  016ec	e58d3000	 str         r3, [sp]

; 650  : }

  016f0	e59d0000	 ldr         r0, [sp]
  016f4	e28dd008	 add         sp, sp, #8
  016f8	e89d6000	 ldmia       sp, {sp, lr}
  016fc	e12fff1e	 bx          lr
  01700		 |$M42736|

			 ENDP  ; |?InVBlank@OMAPDDGPE@@UAAHXZ|, OMAPDDGPE::InVBlank

	EXPORT	|?GetScanLine@OMAPDDGPE@@QAAKXZ|	; OMAPDDGPE::GetScanLine
	IMPORT	|?GetScanLine@OMAPDisplayController@@QAAKXZ| ; OMAPDisplayController::GetScanLine

  00088			 AREA	 |.pdata|, PDATA
|$T42744| DCD	|$LN5@GetScanLin|
	DCD	0x40000f04
; Function compile flags: /Odtp

  01700			 AREA	 |.text|, CODE, ARM

  01700		 |?GetScanLine@OMAPDDGPE@@QAAKXZ| PROC	; OMAPDDGPE::GetScanLine

; 654  : {

  01700		 |$LN5@GetScanLin|
  01700	e1a0c00d	 mov         r12, sp
  01704	e92d0001	 stmdb       sp!, {r0}
  01708	e92d5000	 stmdb       sp!, {r12, lr}
  0170c	e24dd008	 sub         sp, sp, #8
  01710		 |$M42741|

; 655  :     return m_pDisplayContr->GetScanLine();

  01710	e59d3010	 ldr         r3, [sp, #0x10]
  01714	e28330b0	 add         r3, r3, #0xB0
  01718	e5930000	 ldr         r0, [r3]
  0171c	eb000000	 bl          |?GetScanLine@OMAPDisplayController@@QAAKXZ|
  01720	e58d0004	 str         r0, [sp, #4]
  01724	e59d3004	 ldr         r3, [sp, #4]
  01728	e58d3000	 str         r3, [sp]

; 656  : }

  0172c	e59d0000	 ldr         r0, [sp]
  01730	e28dd008	 add         sp, sp, #8
  01734	e89d6000	 ldmia       sp, {sp, lr}
  01738	e12fff1e	 bx          lr
  0173c		 |$M42742|

			 ENDP  ; |?GetScanLine@OMAPDDGPE@@QAAKXZ|, OMAPDDGPE::GetScanLine

	EXPORT	|?SurfaceFlipping@OMAPDDGPE@@QAAHPAVOMAPDDGPESurface@@H@Z| ; OMAPDDGPE::SurfaceFlipping
	IMPORT	|?IsPipelineFlipping@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@PAVOMAPSurface@@H@Z| ; OMAPDisplayController::IsPipelineFlipping

  00090			 AREA	 |.pdata|, PDATA
|$T42750| DCD	|$LN10@SurfaceFli|
	DCD	0x40009604
; Function compile flags: /Odtp

  0173c			 AREA	 |.text|, CODE, ARM

  0173c		 |?SurfaceFlipping@OMAPDDGPE@@QAAHPAVOMAPDDGPESurface@@H@Z| PROC ; OMAPDDGPE::SurfaceFlipping

; 663  : {

  0173c		 |$LN10@SurfaceFli|
  0173c	e1a0c00d	 mov         r12, sp
  01740	e92d0007	 stmdb       sp!, {r0 - r2}
  01744	e92d5000	 stmdb       sp!, {r12, lr}
  01748	e24dd048	 sub         sp, sp, #0x48
  0174c		 |$M42747|

; 664  :     BOOL    bResult = FALSE;        

  0174c	e3a03000	 mov         r3, #0
  01750	e58d3000	 str         r3, [sp]

; 665  :     if(m_bFlipInProgress == FALSE)

  01754	e59d3050	 ldr         r3, [sp, #0x50]
  01758	e28330b8	 add         r3, r3, #0xB8
  0175c	e5933000	 ldr         r3, [r3]
  01760	e3530000	 cmp         r3, #0
  01764	1a000002	 bne         |$LN5@SurfaceFli|

; 666  :     {        
; 667  :         return bResult;

  01768	e59d3000	 ldr         r3, [sp]
  0176c	e58d3004	 str         r3, [sp, #4]
  01770	ea000083	 b           |$LN6@SurfaceFli|
  01774		 |$LN5@SurfaceFli|

; 668  :     }    
; 669  :     
; 670  :     if( m_pPrimarySurf && (m_pPrimarySurf->Parent() == pSurf->Parent()) )

  01774	e59d3050	 ldr         r3, [sp, #0x50]
  01778	e28330bc	 add         r3, r3, #0xBC
  0177c	e5933000	 ldr         r3, [r3]
  01780	e3530000	 cmp         r3, #0
  01784	0a00001a	 beq         |$LN4@SurfaceFli|
  01788	e59d3050	 ldr         r3, [sp, #0x50]
  0178c	e28330bc	 add         r3, r3, #0xBC
  01790	e5930000	 ldr         r0, [r3]
  01794	eb000000	 bl          |?Parent@OMAPDDGPESurface@@QAAPAV1@XZ|
  01798	e58d0008	 str         r0, [sp, #8]
  0179c	e59d0054	 ldr         r0, [sp, #0x54]
  017a0	eb000000	 bl          |?Parent@OMAPDDGPESurface@@QAAPAV1@XZ|
  017a4	e58d000c	 str         r0, [sp, #0xC]
  017a8	e59d2008	 ldr         r2, [sp, #8]
  017ac	e59d300c	 ldr         r3, [sp, #0xC]
  017b0	e1520003	 cmp         r2, r3
  017b4	1a00000e	 bne         |$LN4@SurfaceFli|

; 671  :     {
; 672  :         bResult |= m_pDisplayContr->IsPipelineFlipping(
; 673  :                                     OMAP_DSS_PIPELINE_GFX,
; 674  :                                     pSurf->OmapSurface(),
; 675  :                                     matchExactSurface );                                               

  017b8	e59d0054	 ldr         r0, [sp, #0x54]
  017bc	eb000000	 bl          |?OmapSurface@OMAPDDGPESurface@@QAAPAVOMAPSurface@@XZ|
  017c0	e58d0010	 str         r0, [sp, #0x10]
  017c4	e59d3058	 ldr         r3, [sp, #0x58]
  017c8	e59d2010	 ldr         r2, [sp, #0x10]
  017cc	e3a01000	 mov         r1, #0
  017d0	e59d0050	 ldr         r0, [sp, #0x50]
  017d4	e28000b0	 add         r0, r0, #0xB0
  017d8	e5900000	 ldr         r0, [r0]
  017dc	eb000000	 bl          |?IsPipelineFlipping@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@PAVOMAPSurface@@H@Z|
  017e0	e58d0014	 str         r0, [sp, #0x14]
  017e4	e59d2000	 ldr         r2, [sp]
  017e8	e59d3014	 ldr         r3, [sp, #0x14]
  017ec	e1823003	 orr         r3, r2, r3
  017f0	e58d3000	 str         r3, [sp]
  017f4		 |$LN4@SurfaceFli|

; 676  :     }    
; 677  :     if( m_pOverlay1Surf && (m_pOverlay1Surf->Parent() == pSurf->Parent()) )

  017f4	e59d3050	 ldr         r3, [sp, #0x50]
  017f8	e28330c0	 add         r3, r3, #0xC0
  017fc	e5933000	 ldr         r3, [r3]
  01800	e3530000	 cmp         r3, #0
  01804	0a00001a	 beq         |$LN3@SurfaceFli|
  01808	e59d3050	 ldr         r3, [sp, #0x50]
  0180c	e28330c0	 add         r3, r3, #0xC0
  01810	e5930000	 ldr         r0, [r3]
  01814	eb000000	 bl          |?Parent@OMAPDDGPESurface@@QAAPAV1@XZ|
  01818	e58d0018	 str         r0, [sp, #0x18]
  0181c	e59d0054	 ldr         r0, [sp, #0x54]
  01820	eb000000	 bl          |?Parent@OMAPDDGPESurface@@QAAPAV1@XZ|
  01824	e58d001c	 str         r0, [sp, #0x1C]
  01828	e59d2018	 ldr         r2, [sp, #0x18]
  0182c	e59d301c	 ldr         r3, [sp, #0x1C]
  01830	e1520003	 cmp         r2, r3
  01834	1a00000e	 bne         |$LN3@SurfaceFli|

; 678  :     {
; 679  :         bResult |= m_pDisplayContr->IsPipelineFlipping(
; 680  :                                     OMAP_DSS_PIPELINE_VIDEO1,
; 681  :                                     pSurf->OmapSurface(),
; 682  :                                     matchExactSurface );                                               

  01838	e59d0054	 ldr         r0, [sp, #0x54]
  0183c	eb000000	 bl          |?OmapSurface@OMAPDDGPESurface@@QAAPAVOMAPSurface@@XZ|
  01840	e58d0020	 str         r0, [sp, #0x20]
  01844	e59d3058	 ldr         r3, [sp, #0x58]
  01848	e59d2020	 ldr         r2, [sp, #0x20]
  0184c	e3a01001	 mov         r1, #1
  01850	e59d0050	 ldr         r0, [sp, #0x50]
  01854	e28000b0	 add         r0, r0, #0xB0
  01858	e5900000	 ldr         r0, [r0]
  0185c	eb000000	 bl          |?IsPipelineFlipping@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@PAVOMAPSurface@@H@Z|
  01860	e58d0024	 str         r0, [sp, #0x24]
  01864	e59d2000	 ldr         r2, [sp]
  01868	e59d3024	 ldr         r3, [sp, #0x24]
  0186c	e1823003	 orr         r3, r2, r3
  01870	e58d3000	 str         r3, [sp]
  01874		 |$LN3@SurfaceFli|

; 683  :     }
; 684  :     if( m_pOverlay2Surf && (m_pOverlay2Surf->Parent() == pSurf->Parent()) )

  01874	e59d3050	 ldr         r3, [sp, #0x50]
  01878	e28330c4	 add         r3, r3, #0xC4
  0187c	e5933000	 ldr         r3, [r3]
  01880	e3530000	 cmp         r3, #0
  01884	0a00001a	 beq         |$LN2@SurfaceFli|
  01888	e59d3050	 ldr         r3, [sp, #0x50]
  0188c	e28330c4	 add         r3, r3, #0xC4
  01890	e5930000	 ldr         r0, [r3]
  01894	eb000000	 bl          |?Parent@OMAPDDGPESurface@@QAAPAV1@XZ|
  01898	e58d0028	 str         r0, [sp, #0x28]
  0189c	e59d0054	 ldr         r0, [sp, #0x54]
  018a0	eb000000	 bl          |?Parent@OMAPDDGPESurface@@QAAPAV1@XZ|
  018a4	e58d002c	 str         r0, [sp, #0x2C]
  018a8	e59d2028	 ldr         r2, [sp, #0x28]
  018ac	e59d302c	 ldr         r3, [sp, #0x2C]
  018b0	e1520003	 cmp         r2, r3
  018b4	1a00000e	 bne         |$LN2@SurfaceFli|

; 685  :     {
; 686  :         bResult |= m_pDisplayContr->IsPipelineFlipping(
; 687  :                                     OMAP_DSS_PIPELINE_VIDEO2,
; 688  :                                     pSurf->OmapSurface(),
; 689  :                                     matchExactSurface );                                               

  018b8	e59d0054	 ldr         r0, [sp, #0x54]
  018bc	eb000000	 bl          |?OmapSurface@OMAPDDGPESurface@@QAAPAVOMAPSurface@@XZ|
  018c0	e58d0030	 str         r0, [sp, #0x30]
  018c4	e59d3058	 ldr         r3, [sp, #0x58]
  018c8	e59d2030	 ldr         r2, [sp, #0x30]
  018cc	e3a01002	 mov         r1, #2
  018d0	e59d0050	 ldr         r0, [sp, #0x50]
  018d4	e28000b0	 add         r0, r0, #0xB0
  018d8	e5900000	 ldr         r0, [r0]
  018dc	eb000000	 bl          |?IsPipelineFlipping@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@PAVOMAPSurface@@H@Z|
  018e0	e58d0034	 str         r0, [sp, #0x34]
  018e4	e59d2000	 ldr         r2, [sp]
  018e8	e59d3034	 ldr         r3, [sp, #0x34]
  018ec	e1823003	 orr         r3, r2, r3
  018f0	e58d3000	 str         r3, [sp]
  018f4		 |$LN2@SurfaceFli|

; 690  :     }    
; 691  :     
; 692  :     if( m_pTVSurf && (m_pTVSurf->Parent() == pSurf->Parent()) )

  018f4	e59d3050	 ldr         r3, [sp, #0x50]
  018f8	e2833f42	 add         r3, r3, #0x42, 30
  018fc	e5933000	 ldr         r3, [r3]
  01900	e3530000	 cmp         r3, #0
  01904	0a00001c	 beq         |$LN1@SurfaceFli|
  01908	e59d3050	 ldr         r3, [sp, #0x50]
  0190c	e2833f42	 add         r3, r3, #0x42, 30
  01910	e5930000	 ldr         r0, [r3]
  01914	eb000000	 bl          |?Parent@OMAPDDGPESurface@@QAAPAV1@XZ|
  01918	e58d0038	 str         r0, [sp, #0x38]
  0191c	e59d0054	 ldr         r0, [sp, #0x54]
  01920	eb000000	 bl          |?Parent@OMAPDDGPESurface@@QAAPAV1@XZ|
  01924	e58d003c	 str         r0, [sp, #0x3C]
  01928	e59d2038	 ldr         r2, [sp, #0x38]
  0192c	e59d303c	 ldr         r3, [sp, #0x3C]
  01930	e1520003	 cmp         r2, r3
  01934	1a000010	 bne         |$LN1@SurfaceFli|

; 693  :     {
; 694  :         bResult |= m_pDisplayContr->IsPipelineFlipping(
; 695  :                                     m_eTVPipeline,
; 696  :                                     pSurf->OmapSurface(),
; 697  :                                     matchExactSurface );                                               

  01938	e59d0054	 ldr         r0, [sp, #0x54]
  0193c	eb000000	 bl          |?OmapSurface@OMAPDDGPESurface@@QAAPAVOMAPSurface@@XZ|
  01940	e58d0040	 str         r0, [sp, #0x40]
  01944	e59d3058	 ldr         r3, [sp, #0x58]
  01948	e59d2040	 ldr         r2, [sp, #0x40]
  0194c	e59d1050	 ldr         r1, [sp, #0x50]
  01950	e2811f43	 add         r1, r1, #0x43, 30
  01954	e5911000	 ldr         r1, [r1]
  01958	e59d0050	 ldr         r0, [sp, #0x50]
  0195c	e28000b0	 add         r0, r0, #0xB0
  01960	e5900000	 ldr         r0, [r0]
  01964	eb000000	 bl          |?IsPipelineFlipping@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@PAVOMAPSurface@@H@Z|
  01968	e58d0044	 str         r0, [sp, #0x44]
  0196c	e59d2000	 ldr         r2, [sp]
  01970	e59d3044	 ldr         r3, [sp, #0x44]
  01974	e1823003	 orr         r3, r2, r3
  01978	e58d3000	 str         r3, [sp]
  0197c		 |$LN1@SurfaceFli|

; 698  :     }    
; 699  :     return bResult;

  0197c	e59d3000	 ldr         r3, [sp]
  01980	e58d3004	 str         r3, [sp, #4]
  01984		 |$LN6@SurfaceFli|

; 700  :     
; 701  :    
; 702  : }

  01984	e59d0004	 ldr         r0, [sp, #4]
  01988	e28dd048	 add         sp, sp, #0x48
  0198c	e89d6000	 ldmia       sp, {sp, lr}
  01990	e12fff1e	 bx          lr
  01994		 |$M42748|

			 ENDP  ; |?SurfaceFlipping@OMAPDDGPE@@QAAHPAVOMAPDDGPESurface@@H@Z|, OMAPDDGPE::SurfaceFlipping

	EXPORT	|?FlipSurface@OMAPDDGPE@@QAAKPAVOMAPDDGPESurface@@@Z| ; OMAPDDGPE::FlipSurface
	IMPORT	|?FlipPipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@PAVOMAPSurface@@@Z| ; OMAPDisplayController::FlipPipeline

  00098			 AREA	 |.pdata|, PDATA
|$T42756| DCD	|$LN9@FlipSurfac|
	DCD	0x40009204
; Function compile flags: /Odtp

  01994			 AREA	 |.text|, CODE, ARM

  01994		 |?FlipSurface@OMAPDDGPE@@QAAKPAVOMAPDDGPESurface@@@Z| PROC ; OMAPDDGPE::FlipSurface

; 709  : {

  01994		 |$LN9@FlipSurfac|
  01994	e1a0c00d	 mov         r12, sp
  01998	e92d0003	 stmdb       sp!, {r0, r1}
  0199c	e92d5000	 stmdb       sp!, {r12, lr}
  019a0	e24dd050	 sub         sp, sp, #0x50
  019a4		 |$M42753|

; 710  :     BOOL    bResult;
; 711  : 
; 712  :     //
; 713  :     //  Determine which pipeline this surface is associated with and flip it
; 714  :     //
; 715  :     if( m_pPrimarySurf && (m_pPrimarySurf->Parent() == pSurf->Parent()) )

  019a4	e59d3058	 ldr         r3, [sp, #0x58]
  019a8	e28330bc	 add         r3, r3, #0xBC
  019ac	e5933000	 ldr         r3, [r3]
  019b0	e3530000	 cmp         r3, #0
  019b4	0a000017	 beq         |$LN4@FlipSurfac|
  019b8	e59d3058	 ldr         r3, [sp, #0x58]
  019bc	e28330bc	 add         r3, r3, #0xBC
  019c0	e5930000	 ldr         r0, [r3]
  019c4	eb000000	 bl          |?Parent@OMAPDDGPESurface@@QAAPAV1@XZ|
  019c8	e58d0008	 str         r0, [sp, #8]
  019cc	e59d005c	 ldr         r0, [sp, #0x5C]
  019d0	eb000000	 bl          |?Parent@OMAPDDGPESurface@@QAAPAV1@XZ|
  019d4	e58d000c	 str         r0, [sp, #0xC]
  019d8	e59d2008	 ldr         r2, [sp, #8]
  019dc	e59d300c	 ldr         r3, [sp, #0xC]
  019e0	e1520003	 cmp         r2, r3
  019e4	1a00000b	 bne         |$LN4@FlipSurfac|

; 716  :     {
; 717  :         bResult = m_pDisplayContr->FlipPipeline(
; 718  :                                     OMAP_DSS_PIPELINE_GFX,
; 719  :                                     pSurf->OmapSurface() );                                               

  019e8	e59d005c	 ldr         r0, [sp, #0x5C]
  019ec	eb000000	 bl          |?OmapSurface@OMAPDDGPESurface@@QAAPAVOMAPSurface@@XZ|
  019f0	e58d0010	 str         r0, [sp, #0x10]
  019f4	e59d2010	 ldr         r2, [sp, #0x10]
  019f8	e3a01000	 mov         r1, #0
  019fc	e59d3058	 ldr         r3, [sp, #0x58]
  01a00	e28330b0	 add         r3, r3, #0xB0
  01a04	e5930000	 ldr         r0, [r3]
  01a08	eb000000	 bl          |?FlipPipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@PAVOMAPSurface@@@Z|
  01a0c	e58d0014	 str         r0, [sp, #0x14]
  01a10	e59d3014	 ldr         r3, [sp, #0x14]
  01a14	e58d3000	 str         r3, [sp]
  01a18		 |$LN4@FlipSurfac|

; 720  :     }    
; 721  :     
; 722  :     if( m_pOverlay1Surf && (m_pOverlay1Surf->Parent() == pSurf->Parent()) )

  01a18	e59d3058	 ldr         r3, [sp, #0x58]
  01a1c	e28330c0	 add         r3, r3, #0xC0
  01a20	e5933000	 ldr         r3, [r3]
  01a24	e3530000	 cmp         r3, #0
  01a28	0a00001e	 beq         |$LN3@FlipSurfac|
  01a2c	e59d3058	 ldr         r3, [sp, #0x58]
  01a30	e28330c0	 add         r3, r3, #0xC0
  01a34	e5930000	 ldr         r0, [r3]
  01a38	eb000000	 bl          |?Parent@OMAPDDGPESurface@@QAAPAV1@XZ|
  01a3c	e58d0018	 str         r0, [sp, #0x18]
  01a40	e59d005c	 ldr         r0, [sp, #0x5C]
  01a44	eb000000	 bl          |?Parent@OMAPDDGPESurface@@QAAPAV1@XZ|
  01a48	e58d001c	 str         r0, [sp, #0x1C]
  01a4c	e59d2018	 ldr         r2, [sp, #0x18]
  01a50	e59d301c	 ldr         r3, [sp, #0x1C]
  01a54	e1520003	 cmp         r2, r3
  01a58	1a000012	 bne         |$LN3@FlipSurfac|

; 723  :     {
; 724  :         CopySurfaceParams(pSurf->Parent(), pSurf);

  01a5c	e59d005c	 ldr         r0, [sp, #0x5C]
  01a60	eb000000	 bl          |?Parent@OMAPDDGPESurface@@QAAPAV1@XZ|
  01a64	e58d0020	 str         r0, [sp, #0x20]
  01a68	e59d205c	 ldr         r2, [sp, #0x5C]
  01a6c	e59d1020	 ldr         r1, [sp, #0x20]
  01a70	e59d0058	 ldr         r0, [sp, #0x58]
  01a74	eb000000	 bl          |?CopySurfaceParams@OMAPDDGPE@@QAAHPAVOMAPDDGPESurface@@0@Z|

; 725  :         bResult = m_pDisplayContr->FlipPipeline(
; 726  :                                     OMAP_DSS_PIPELINE_VIDEO1,
; 727  :                                     pSurf->OmapSurface() );                                               

  01a78	e59d005c	 ldr         r0, [sp, #0x5C]
  01a7c	eb000000	 bl          |?OmapSurface@OMAPDDGPESurface@@QAAPAVOMAPSurface@@XZ|
  01a80	e58d0024	 str         r0, [sp, #0x24]
  01a84	e59d2024	 ldr         r2, [sp, #0x24]
  01a88	e3a01001	 mov         r1, #1
  01a8c	e59d3058	 ldr         r3, [sp, #0x58]
  01a90	e28330b0	 add         r3, r3, #0xB0
  01a94	e5930000	 ldr         r0, [r3]
  01a98	eb000000	 bl          |?FlipPipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@PAVOMAPSurface@@@Z|
  01a9c	e58d0028	 str         r0, [sp, #0x28]
  01aa0	e59d3028	 ldr         r3, [sp, #0x28]
  01aa4	e58d3000	 str         r3, [sp]
  01aa8		 |$LN3@FlipSurfac|

; 728  :     }    
; 729  : 
; 730  :     if( m_pOverlay2Surf && (m_pOverlay2Surf->Parent() == pSurf->Parent()) )

  01aa8	e59d3058	 ldr         r3, [sp, #0x58]
  01aac	e28330c4	 add         r3, r3, #0xC4
  01ab0	e5933000	 ldr         r3, [r3]
  01ab4	e3530000	 cmp         r3, #0
  01ab8	0a00001e	 beq         |$LN2@FlipSurfac|
  01abc	e59d3058	 ldr         r3, [sp, #0x58]
  01ac0	e28330c4	 add         r3, r3, #0xC4
  01ac4	e5930000	 ldr         r0, [r3]
  01ac8	eb000000	 bl          |?Parent@OMAPDDGPESurface@@QAAPAV1@XZ|
  01acc	e58d002c	 str         r0, [sp, #0x2C]
  01ad0	e59d005c	 ldr         r0, [sp, #0x5C]
  01ad4	eb000000	 bl          |?Parent@OMAPDDGPESurface@@QAAPAV1@XZ|
  01ad8	e58d0030	 str         r0, [sp, #0x30]
  01adc	e59d202c	 ldr         r2, [sp, #0x2C]
  01ae0	e59d3030	 ldr         r3, [sp, #0x30]
  01ae4	e1520003	 cmp         r2, r3
  01ae8	1a000012	 bne         |$LN2@FlipSurfac|

; 731  :     {
; 732  :         CopySurfaceParams(pSurf->Parent(), pSurf);

  01aec	e59d005c	 ldr         r0, [sp, #0x5C]
  01af0	eb000000	 bl          |?Parent@OMAPDDGPESurface@@QAAPAV1@XZ|
  01af4	e58d0034	 str         r0, [sp, #0x34]
  01af8	e59d205c	 ldr         r2, [sp, #0x5C]
  01afc	e59d1034	 ldr         r1, [sp, #0x34]
  01b00	e59d0058	 ldr         r0, [sp, #0x58]
  01b04	eb000000	 bl          |?CopySurfaceParams@OMAPDDGPE@@QAAHPAVOMAPDDGPESurface@@0@Z|

; 733  :         bResult = m_pDisplayContr->FlipPipeline(
; 734  :                                     OMAP_DSS_PIPELINE_VIDEO2,
; 735  :                                     pSurf->OmapSurface() );                                               

  01b08	e59d005c	 ldr         r0, [sp, #0x5C]
  01b0c	eb000000	 bl          |?OmapSurface@OMAPDDGPESurface@@QAAPAVOMAPSurface@@XZ|
  01b10	e58d0038	 str         r0, [sp, #0x38]
  01b14	e59d2038	 ldr         r2, [sp, #0x38]
  01b18	e3a01002	 mov         r1, #2
  01b1c	e59d3058	 ldr         r3, [sp, #0x58]
  01b20	e28330b0	 add         r3, r3, #0xB0
  01b24	e5930000	 ldr         r0, [r3]
  01b28	eb000000	 bl          |?FlipPipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@PAVOMAPSurface@@@Z|
  01b2c	e58d003c	 str         r0, [sp, #0x3C]
  01b30	e59d303c	 ldr         r3, [sp, #0x3C]
  01b34	e58d3000	 str         r3, [sp]
  01b38		 |$LN2@FlipSurfac|

; 736  :     }    
; 737  :     
; 738  :     if( m_pTVSurf && (m_pTVSurf->Parent() == pSurf->Parent()) )

  01b38	e59d3058	 ldr         r3, [sp, #0x58]
  01b3c	e2833f42	 add         r3, r3, #0x42, 30
  01b40	e5933000	 ldr         r3, [r3]
  01b44	e3530000	 cmp         r3, #0
  01b48	0a000019	 beq         |$LN1@FlipSurfac|
  01b4c	e59d3058	 ldr         r3, [sp, #0x58]
  01b50	e2833f42	 add         r3, r3, #0x42, 30
  01b54	e5930000	 ldr         r0, [r3]
  01b58	eb000000	 bl          |?Parent@OMAPDDGPESurface@@QAAPAV1@XZ|
  01b5c	e58d0040	 str         r0, [sp, #0x40]
  01b60	e59d005c	 ldr         r0, [sp, #0x5C]
  01b64	eb000000	 bl          |?Parent@OMAPDDGPESurface@@QAAPAV1@XZ|
  01b68	e58d0044	 str         r0, [sp, #0x44]
  01b6c	e59d2040	 ldr         r2, [sp, #0x40]
  01b70	e59d3044	 ldr         r3, [sp, #0x44]
  01b74	e1520003	 cmp         r2, r3
  01b78	1a00000d	 bne         |$LN1@FlipSurfac|

; 739  :     {
; 740  :         bResult = m_pDisplayContr->FlipPipeline(
; 741  :                                     m_eTVPipeline,
; 742  :                                     pSurf->OmapSurface() );                                               

  01b7c	e59d005c	 ldr         r0, [sp, #0x5C]
  01b80	eb000000	 bl          |?OmapSurface@OMAPDDGPESurface@@QAAPAVOMAPSurface@@XZ|
  01b84	e58d0048	 str         r0, [sp, #0x48]
  01b88	e59d2048	 ldr         r2, [sp, #0x48]
  01b8c	e59d3058	 ldr         r3, [sp, #0x58]
  01b90	e2833f43	 add         r3, r3, #0x43, 30
  01b94	e5931000	 ldr         r1, [r3]
  01b98	e59d3058	 ldr         r3, [sp, #0x58]
  01b9c	e28330b0	 add         r3, r3, #0xB0
  01ba0	e5930000	 ldr         r0, [r3]
  01ba4	eb000000	 bl          |?FlipPipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@PAVOMAPSurface@@@Z|
  01ba8	e58d004c	 str         r0, [sp, #0x4C]
  01bac	e59d304c	 ldr         r3, [sp, #0x4C]
  01bb0	e58d3000	 str         r3, [sp]
  01bb4		 |$LN1@FlipSurfac|

; 743  :     }    
; 744  :     
; 745  :     //  Set flag
; 746  :     m_bFlipInProgress = TRUE;

  01bb4	e59d3058	 ldr         r3, [sp, #0x58]
  01bb8	e28320b8	 add         r2, r3, #0xB8
  01bbc	e3a03001	 mov         r3, #1
  01bc0	e5823000	 str         r3, [r2]

; 747  :     
; 748  :     //  Result
; 749  :     return DD_OK;

  01bc4	e3a03000	 mov         r3, #0
  01bc8	e58d3004	 str         r3, [sp, #4]

; 750  : }  

  01bcc	e59d0004	 ldr         r0, [sp, #4]
  01bd0	e28dd050	 add         sp, sp, #0x50
  01bd4	e89d6000	 ldmia       sp, {sp, lr}
  01bd8	e12fff1e	 bx          lr
  01bdc		 |$M42754|

			 ENDP  ; |?FlipSurface@OMAPDDGPE@@QAAKPAVOMAPDDGPESurface@@@Z|, OMAPDDGPE::FlipSurface

	EXPORT	|??_C@_1GM@EAIMMHOP@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?5?$AAa?$AAo?$AAr?$AA?5?$AAh?$AAe?$AAi?$AAg?$AAh?$AAt?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?5?$AAe?$AAx?$AAc?$AAe?$AAe?$AAd?$AAs@| [ DATA ] ; `string'
	EXPORT	|?GetTvOutScaling@OMAPDDGPE@@QAAHPAVOMAPSurface@@PAK111@Z| ; OMAPDDGPE::GetTvOutScaling
	IMPORT	|?SetScalingAttribs@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@KKKK@Z| ; OMAPDisplayController::SetScalingAttribs
	IMPORT	|?SetTvOutFilterLevel@OMAPDisplayController@@QAAHK@Z| ; OMAPDisplayController::SetTvOutFilterLevel

  000a0			 AREA	 |.pdata|, PDATA
|$T42777| DCD	|$LN28@DetermineT|
	DCD	0x4001ae04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GM@EAIMMHOP@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?5?$AAa?$AAo?$AAr?$AA?5?$AAh?$AAe?$AAi?$AAg?$AAh?$AAt?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?5?$AAe?$AAx?$AAc?$AAe?$AAe?$AAd?$AAs@| DCB "w"
	DCB	0x0, "i", 0x0, "d", 0x0, "t", 0x0, "h", 0x0, "(", 0x0, "%"
	DCB	0x0, "d", 0x0, ")", 0x0, " ", 0x0, "a", 0x0, "o", 0x0, "r"
	DCB	0x0, " ", 0x0, "h", 0x0, "e", 0x0, "i", 0x0, "g", 0x0, "h"
	DCB	0x0, "t", 0x0, "(", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, " "
	DCB	0x0, "e", 0x0, "x", 0x0, "c", 0x0, "e", 0x0, "e", 0x0, "d"
	DCB	0x0, "s", 0x0, " ", 0x0, "T", 0x0, "V", 0x0, "O", 0x0, "U"
	DCB	0x0, "T", 0x0, " ", 0x0, "c", 0x0, "a", 0x0, "p", 0x0, "a"
	DCB	0x0, "b", 0x0, "i", 0x0, "l", 0x0, "i", 0x0, "t", 0x0, "i"
	DCB	0x0, "e", 0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  01bdc			 AREA	 |.text|, CODE, ARM

  01bdc		 |?DetermineTvOutSurface@OMAPDDGPE@@QAAXH@Z| PROC ; OMAPDDGPE::DetermineTvOutSurface

; 757  : {

  01bdc		 |$LN28@DetermineT|
  01bdc	e1a0c00d	 mov         r12, sp
  01be0	e92d0003	 stmdb       sp!, {r0, r1}
  01be4	e92d5000	 stmdb       sp!, {r12, lr}
  01be8	e24dd0c4	 sub         sp, sp, #0xC4
  01bec		 |$M42774|

; 758  :     BOOL                bResult;
; 759  :     OMAPDDGPESurface*   pOldTVSurf = m_pTVSurf;    

  01bec	e59d30cc	 ldr         r3, [sp, #0xCC]
  01bf0	e2833f42	 add         r3, r3, #0x42, 30
  01bf4	e5933000	 ldr         r3, [r3]
  01bf8	e58d3008	 str         r3, [sp, #8]

; 760  :     
; 761  :     
; 762  :     //  When GAPI is on, it take precedence when displaying content on the LCD and TV
; 763  :     if( m_bGameEnable && m_pGameSurf )

  01bfc	e59d30cc	 ldr         r3, [sp, #0xCC]
  01c00	e2833f4e	 add         r3, r3, #0x4E, 30
  01c04	e5933000	 ldr         r3, [r3]
  01c08	e3530000	 cmp         r3, #0
  01c0c	0a000042	 beq         |$LN21@DetermineT|
  01c10	e59d30cc	 ldr         r3, [sp, #0xCC]
  01c14	e2833d05	 add         r3, r3, #5, 26
  01c18	e5933000	 ldr         r3, [r3]
  01c1c	e3530000	 cmp         r3, #0
  01c20	0a00003d	 beq         |$LN21@DetermineT|

; 764  :     {
; 765  :         //  Show GAPI surface on TV if TV out enabled
; 766  :         if( m_bTVOutEnable )

  01c24	e59d30cc	 ldr         r3, [sp, #0xCC]
  01c28	e2833e11	 add         r3, r3, #0x11, 28
  01c2c	e5933000	 ldr         r3, [r3]
  01c30	e3530000	 cmp         r3, #0
  01c34	0a000037	 beq         |$LN20@DetermineT|

; 767  :         {
; 768  :             DWORD   dwScaledWidth,
; 769  :                     dwScaledHeight;
; 770  :             DWORD   dwPosX,
; 771  :                     dwPosY;                    
; 772  :                     
; 773  :             //  Set flicker filter level
; 774  :             m_pDisplayContr->SetTvOutFilterLevel( m_dwTvOut_FilterLevel );

  01c38	e59d30cc	 ldr         r3, [sp, #0xCC]
  01c3c	e2833f45	 add         r3, r3, #0x45, 30
  01c40	e5931000	 ldr         r1, [r3]
  01c44	e59d30cc	 ldr         r3, [sp, #0xCC]
  01c48	e28330b0	 add         r3, r3, #0xB0
  01c4c	e5930000	 ldr         r0, [r3]
  01c50	eb000000	 bl          |?SetTvOutFilterLevel@OMAPDisplayController@@QAAHK@Z|

; 775  :         
; 776  :             //  Get the scaling for TV display of game surface
; 777  :             GetTvOutScaling( m_pGameSurf, &dwScaledWidth, &dwScaledHeight, &dwPosX, &dwPosY );

  01c54	e28d301c	 add         r3, sp, #0x1C
  01c58	e58d3004	 str         r3, [sp, #4]
  01c5c	e28d3010	 add         r3, sp, #0x10
  01c60	e58d3000	 str         r3, [sp]
  01c64	e28d3018	 add         r3, sp, #0x18
  01c68	e28d2014	 add         r2, sp, #0x14
  01c6c	e59d10cc	 ldr         r1, [sp, #0xCC]
  01c70	e2811d05	 add         r1, r1, #5, 26
  01c74	e5911000	 ldr         r1, [r1]
  01c78	e59d00cc	 ldr         r0, [sp, #0xCC]
  01c7c	eb000000	 bl          |?GetTvOutScaling@OMAPDDGPE@@QAAHPAVOMAPSurface@@PAK111@Z|

; 778  :                                     
; 779  :             //  Configure the display controller to show the game surface on VID2
; 780  :             bResult = m_pDisplayContr->SetPipelineAttribs(
; 781  :                                             OMAP_DSS_PIPELINE_VIDEO2,
; 782  :                                             OMAP_DSS_DESTINATION_TVOUT, 
; 783  :                                             m_pGameSurf );

  01c80	e3a03000	 mov         r3, #0
  01c84	e58d3004	 str         r3, [sp, #4]
  01c88	e3a03000	 mov         r3, #0
  01c8c	e58d3000	 str         r3, [sp]
  01c90	e59d30cc	 ldr         r3, [sp, #0xCC]
  01c94	e2833d05	 add         r3, r3, #5, 26
  01c98	e5933000	 ldr         r3, [r3]
  01c9c	e3a02001	 mov         r2, #1
  01ca0	e3a01002	 mov         r1, #2
  01ca4	e59d00cc	 ldr         r0, [sp, #0xCC]
  01ca8	e28000b0	 add         r0, r0, #0xB0
  01cac	e5900000	 ldr         r0, [r0]
  01cb0	eb000000	 bl          |?SetPipelineAttribs@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@W4OMAP_DSS_DESTINATION@@PAVOMAPSurface@@KK@Z|
  01cb4	e58d006c	 str         r0, [sp, #0x6C]
  01cb8	e59d306c	 ldr         r3, [sp, #0x6C]
  01cbc	e58d300c	 str         r3, [sp, #0xC]

; 784  : 
; 785  :             //  Set the scaling info for the pipeline to NTSC
; 786  :             bResult = m_pDisplayContr->SetScalingAttribs(
; 787  :                                             OMAP_DSS_PIPELINE_VIDEO2,
; 788  :                                             dwScaledWidth,
; 789  :                                             dwScaledHeight,
; 790  :                                             dwPosX,
; 791  :                                             dwPosY );                                 

  01cc0	e59d301c	 ldr         r3, [sp, #0x1C]
  01cc4	e58d3004	 str         r3, [sp, #4]
  01cc8	e59d3010	 ldr         r3, [sp, #0x10]
  01ccc	e58d3000	 str         r3, [sp]
  01cd0	e59d3018	 ldr         r3, [sp, #0x18]
  01cd4	e59d2014	 ldr         r2, [sp, #0x14]
  01cd8	e3a01002	 mov         r1, #2
  01cdc	e59d00cc	 ldr         r0, [sp, #0xCC]
  01ce0	e28000b0	 add         r0, r0, #0xB0
  01ce4	e5900000	 ldr         r0, [r0]
  01ce8	eb000000	 bl          |?SetScalingAttribs@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@KKKK@Z|
  01cec	e58d0070	 str         r0, [sp, #0x70]
  01cf0	e59d3070	 ldr         r3, [sp, #0x70]
  01cf4	e58d300c	 str         r3, [sp, #0xC]

; 792  : 
; 793  :             //  Enable the pipeline
; 794  :             bResult = m_pDisplayContr->EnablePipeline(
; 795  :                                             OMAP_DSS_PIPELINE_VIDEO2 );                                               

  01cf8	e3a01002	 mov         r1, #2
  01cfc	e59d30cc	 ldr         r3, [sp, #0xCC]
  01d00	e28330b0	 add         r3, r3, #0xB0
  01d04	e5930000	 ldr         r0, [r3]
  01d08	eb000000	 bl          |?EnablePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@@Z|
  01d0c	e58d0074	 str         r0, [sp, #0x74]
  01d10	e59d3074	 ldr         r3, [sp, #0x74]
  01d14	e58d300c	 str         r3, [sp, #0xC]
  01d18		 |$LN20@DetermineT|

; 796  :         }
; 797  :         
; 798  :         //  Return; rest of this logic doesn't apply when GAPI on
; 799  :         return;

  01d18	ea000159	 b           |$LN22@DetermineT|
  01d1c		 |$LN21@DetermineT|

; 800  :     }
; 801  : 
; 802  : 
; 803  :     //  Determine the best surface for displaying on the TV
; 804  :     if( m_bTVOutEnable )

  01d1c	e59d30cc	 ldr         r3, [sp, #0xCC]
  01d20	e2833e11	 add         r3, r3, #0x11, 28
  01d24	e5933000	 ldr         r3, [r3]
  01d28	e3530000	 cmp         r3, #0
  01d2c	0a00004b	 beq         |$LN19@DetermineT|

; 805  :     {
; 806  :         //  Need to show a surface on TV out.  Pick one with emphasis on overlay
; 807  :         if( m_pOverlay1Surf && m_pOverlay2Surf )

  01d30	e59d30cc	 ldr         r3, [sp, #0xCC]
  01d34	e28330c0	 add         r3, r3, #0xC0
  01d38	e5933000	 ldr         r3, [r3]
  01d3c	e3530000	 cmp         r3, #0
  01d40	0a00001b	 beq         |$LN18@DetermineT|
  01d44	e59d30cc	 ldr         r3, [sp, #0xCC]
  01d48	e28330c4	 add         r3, r3, #0xC4
  01d4c	e5933000	 ldr         r3, [r3]
  01d50	e3530000	 cmp         r3, #0
  01d54	0a000016	 beq         |$LN18@DetermineT|

; 808  :         {
; 809  :             //  All 3 layers are active (primary always is).  Display the TV out pipeline
; 810  :             if( m_eTVPipeline == OMAP_DSS_PIPELINE_VIDEO1 )

  01d58	e59d30cc	 ldr         r3, [sp, #0xCC]
  01d5c	e2833f43	 add         r3, r3, #0x43, 30
  01d60	e5933000	 ldr         r3, [r3]
  01d64	e3530001	 cmp         r3, #1
  01d68	1a000005	 bne         |$LN17@DetermineT|

; 811  :             {
; 812  :                 //  Show VID1 overlay
; 813  :                 m_pTVSurf = m_pOverlay1Surf;

  01d6c	e59d30cc	 ldr         r3, [sp, #0xCC]
  01d70	e28310c0	 add         r1, r3, #0xC0
  01d74	e59d30cc	 ldr         r3, [sp, #0xCC]
  01d78	e2832f42	 add         r2, r3, #0x42, 30
  01d7c	e5913000	 ldr         r3, [r1]
  01d80	e5823000	 str         r3, [r2]
  01d84		 |$LN17@DetermineT|

; 814  :             }
; 815  : 
; 816  :             if( m_eTVPipeline == OMAP_DSS_PIPELINE_VIDEO2 )

  01d84	e59d30cc	 ldr         r3, [sp, #0xCC]
  01d88	e2833f43	 add         r3, r3, #0x43, 30
  01d8c	e5933000	 ldr         r3, [r3]
  01d90	e3530002	 cmp         r3, #2
  01d94	1a000005	 bne         |$LN16@DetermineT|

; 817  :             {
; 818  :                 //  Show VID2 overlay
; 819  :                 m_pTVSurf = m_pOverlay2Surf;

  01d98	e59d30cc	 ldr         r3, [sp, #0xCC]
  01d9c	e28310c4	 add         r1, r3, #0xC4
  01da0	e59d30cc	 ldr         r3, [sp, #0xCC]
  01da4	e2832f42	 add         r2, r3, #0x42, 30
  01da8	e5913000	 ldr         r3, [r1]
  01dac	e5823000	 str         r3, [r2]
  01db0		 |$LN16@DetermineT|

; 820  :             }
; 821  :         }

  01db0	ea000029	 b           |$LN15@DetermineT|
  01db4		 |$LN18@DetermineT|

; 822  :         else if( m_pOverlay1Surf )

  01db4	e59d30cc	 ldr         r3, [sp, #0xCC]
  01db8	e28330c0	 add         r3, r3, #0xC0
  01dbc	e5933000	 ldr         r3, [r3]
  01dc0	e3530000	 cmp         r3, #0
  01dc4	0a00000a	 beq         |$LN14@DetermineT|

; 823  :         {
; 824  :             //  Only overlay surface is active. Show it
; 825  :             //  Set the TV out pipeline to be the other VID
; 826  :             m_pTVSurf = m_pOverlay1Surf;

  01dc8	e59d30cc	 ldr         r3, [sp, #0xCC]
  01dcc	e28310c0	 add         r1, r3, #0xC0
  01dd0	e59d30cc	 ldr         r3, [sp, #0xCC]
  01dd4	e2832f42	 add         r2, r3, #0x42, 30
  01dd8	e5913000	 ldr         r3, [r1]
  01ddc	e5823000	 str         r3, [r2]

; 827  :             m_eTVPipeline = OMAP_DSS_PIPELINE_VIDEO2;

  01de0	e59d30cc	 ldr         r3, [sp, #0xCC]
  01de4	e2832f43	 add         r2, r3, #0x43, 30
  01de8	e3a03002	 mov         r3, #2
  01dec	e5823000	 str         r3, [r2]
  01df0	ea000019	 b           |$LN13@DetermineT|
  01df4		 |$LN14@DetermineT|

; 828  :         }
; 829  :         else if( m_pOverlay2Surf )

  01df4	e59d30cc	 ldr         r3, [sp, #0xCC]
  01df8	e28330c4	 add         r3, r3, #0xC4
  01dfc	e5933000	 ldr         r3, [r3]
  01e00	e3530000	 cmp         r3, #0
  01e04	0a00000a	 beq         |$LN12@DetermineT|

; 830  :         {
; 831  :             //  Only overlay surface is active. Show it
; 832  :             //  Set the TV out pipeline to be the other VID
; 833  :             m_pTVSurf = m_pOverlay2Surf;

  01e08	e59d30cc	 ldr         r3, [sp, #0xCC]
  01e0c	e28310c4	 add         r1, r3, #0xC4
  01e10	e59d30cc	 ldr         r3, [sp, #0xCC]
  01e14	e2832f42	 add         r2, r3, #0x42, 30
  01e18	e5913000	 ldr         r3, [r1]
  01e1c	e5823000	 str         r3, [r2]

; 834  :             m_eTVPipeline = OMAP_DSS_PIPELINE_VIDEO1;

  01e20	e59d30cc	 ldr         r3, [sp, #0xCC]
  01e24	e2832f43	 add         r2, r3, #0x43, 30
  01e28	e3a03001	 mov         r3, #1
  01e2c	e5823000	 str         r3, [r2]

; 835  :         }
; 836  :         else

  01e30	ea000009	 b           |$LN11@DetermineT|
  01e34		 |$LN12@DetermineT|

; 837  :         {
; 838  :             //  No overlays on.  Show graphics on VID2
; 839  :             m_pTVSurf = m_pPrimarySurf;

  01e34	e59d30cc	 ldr         r3, [sp, #0xCC]
  01e38	e28310bc	 add         r1, r3, #0xBC
  01e3c	e59d30cc	 ldr         r3, [sp, #0xCC]
  01e40	e2832f42	 add         r2, r3, #0x42, 30
  01e44	e5913000	 ldr         r3, [r1]
  01e48	e5823000	 str         r3, [r2]

; 840  :             m_eTVPipeline = OMAP_DSS_PIPELINE_VIDEO2;

  01e4c	e59d30cc	 ldr         r3, [sp, #0xCC]
  01e50	e2832f43	 add         r2, r3, #0x43, 30
  01e54	e3a03002	 mov         r3, #2
  01e58	e5823000	 str         r3, [r2]
  01e5c		 |$LN11@DetermineT|
  01e5c		 |$LN13@DetermineT|
  01e5c		 |$LN15@DetermineT|

; 841  :         }
; 842  :     }
; 843  :     else

  01e5c	ea000071	 b           |$LN10@DetermineT|
  01e60		 |$LN19@DetermineT|

; 844  :     {
; 845  :         //  TV out disabled.  See if an overlay on the TV needs to migrate
; 846  :         //  back onto the LCD (only happens when both overlays are active)
; 847  :         if( m_pTVSurf && m_pOverlay1Surf && m_pOverlay2Surf )

  01e60	e59d30cc	 ldr         r3, [sp, #0xCC]
  01e64	e2833f42	 add         r3, r3, #0x42, 30
  01e68	e5933000	 ldr         r3, [r3]
  01e6c	e3530000	 cmp         r3, #0
  01e70	0a000059	 beq         |$LN9@DetermineT|
  01e74	e59d30cc	 ldr         r3, [sp, #0xCC]
  01e78	e28330c0	 add         r3, r3, #0xC0
  01e7c	e5933000	 ldr         r3, [r3]
  01e80	e3530000	 cmp         r3, #0
  01e84	0a000054	 beq         |$LN9@DetermineT|
  01e88	e59d30cc	 ldr         r3, [sp, #0xCC]
  01e8c	e28330c4	 add         r3, r3, #0xC4
  01e90	e5933000	 ldr         r3, [r3]
  01e94	e3530000	 cmp         r3, #0
  01e98	0a00004f	 beq         |$LN9@DetermineT|

; 848  :         {
; 849  :             //  Disable the TV pipeline
; 850  :             bResult = m_pDisplayContr->DisablePipeline(
; 851  :                                             m_eTVPipeline );                                               

  01e9c	e59d30cc	 ldr         r3, [sp, #0xCC]
  01ea0	e2833f43	 add         r3, r3, #0x43, 30
  01ea4	e5931000	 ldr         r1, [r3]
  01ea8	e59d30cc	 ldr         r3, [sp, #0xCC]
  01eac	e28330b0	 add         r3, r3, #0xB0
  01eb0	e5930000	 ldr         r0, [r3]
  01eb4	eb000000	 bl          |?DisablePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@@Z|
  01eb8	e58d0078	 str         r0, [sp, #0x78]
  01ebc	e59d3078	 ldr         r3, [sp, #0x78]
  01ec0	e58d300c	 str         r3, [sp, #0xC]

; 852  : 
; 853  :             //  Configure the display controller to show the pipeline on the LCD
; 854  :             bResult = m_pDisplayContr->SetPipelineAttribs(
; 855  :                                             m_eTVPipeline,
; 856  :                                             OMAP_DSS_DESTINATION_LCD, 
; 857  :                                             m_pTVSurf->OmapSurface() );

  01ec4	e59d30cc	 ldr         r3, [sp, #0xCC]
  01ec8	e2833f42	 add         r3, r3, #0x42, 30
  01ecc	e5930000	 ldr         r0, [r3]
  01ed0	eb000000	 bl          |?OmapSurface@OMAPDDGPESurface@@QAAPAVOMAPSurface@@XZ|
  01ed4	e58d007c	 str         r0, [sp, #0x7C]
  01ed8	e3a03000	 mov         r3, #0
  01edc	e58d3004	 str         r3, [sp, #4]
  01ee0	e3a03000	 mov         r3, #0
  01ee4	e58d3000	 str         r3, [sp]
  01ee8	e59d307c	 ldr         r3, [sp, #0x7C]
  01eec	e3a02000	 mov         r2, #0
  01ef0	e59d10cc	 ldr         r1, [sp, #0xCC]
  01ef4	e2811f43	 add         r1, r1, #0x43, 30
  01ef8	e5911000	 ldr         r1, [r1]
  01efc	e59d00cc	 ldr         r0, [sp, #0xCC]
  01f00	e28000b0	 add         r0, r0, #0xB0
  01f04	e5900000	 ldr         r0, [r0]
  01f08	eb000000	 bl          |?SetPipelineAttribs@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@W4OMAP_DSS_DESTINATION@@PAVOMAPSurface@@KK@Z|
  01f0c	e58d0080	 str         r0, [sp, #0x80]
  01f10	e59d3080	 ldr         r3, [sp, #0x80]
  01f14	e58d300c	 str         r3, [sp, #0xC]

; 858  : 
; 859  :             //  Set the scaling info for the pipeline back to be on the LCD
; 860  :             //  using the cached source and destination rects
; 861  :             if( m_eTVPipeline == OMAP_DSS_PIPELINE_VIDEO1 )

  01f18	e59d30cc	 ldr         r3, [sp, #0xCC]
  01f1c	e2833f43	 add         r3, r3, #0x43, 30
  01f20	e5933000	 ldr         r3, [r3]
  01f24	e3530001	 cmp         r3, #1
  01f28	1a00000d	 bne         |$LN8@DetermineT|

; 862  :             {
; 863  :                 bResult = m_pDisplayContr->SetScalingAttribs(
; 864  :                                                 m_eTVPipeline,
; 865  :                                                 &m_rcOverlay1Src,
; 866  :                                                 &m_rcOverlay1Dest );

  01f2c	e59d30cc	 ldr         r3, [sp, #0xCC]
  01f30	e28330d8	 add         r3, r3, #0xD8
  01f34	e59d20cc	 ldr         r2, [sp, #0xCC]
  01f38	e28220c8	 add         r2, r2, #0xC8
  01f3c	e59d10cc	 ldr         r1, [sp, #0xCC]
  01f40	e2811f43	 add         r1, r1, #0x43, 30
  01f44	e5911000	 ldr         r1, [r1]
  01f48	e59d00cc	 ldr         r0, [sp, #0xCC]
  01f4c	e28000b0	 add         r0, r0, #0xB0
  01f50	e5900000	 ldr         r0, [r0]
  01f54	eb000000	 bl          |?SetScalingAttribs@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@PAUtagRECT@@1@Z|
  01f58	e58d0084	 str         r0, [sp, #0x84]
  01f5c	e59d3084	 ldr         r3, [sp, #0x84]
  01f60	e58d300c	 str         r3, [sp, #0xC]
  01f64		 |$LN8@DetermineT|

; 867  :             }
; 868  : 
; 869  :             if( m_eTVPipeline == OMAP_DSS_PIPELINE_VIDEO2 )

  01f64	e59d30cc	 ldr         r3, [sp, #0xCC]
  01f68	e2833f43	 add         r3, r3, #0x43, 30
  01f6c	e5933000	 ldr         r3, [r3]
  01f70	e3530002	 cmp         r3, #2
  01f74	1a00000d	 bne         |$LN7@DetermineT|

; 870  :             {
; 871  :                 bResult = m_pDisplayContr->SetScalingAttribs(
; 872  :                                                 m_eTVPipeline,
; 873  :                                                 &m_rcOverlay2Src,
; 874  :                                                 &m_rcOverlay2Dest );

  01f78	e59d30cc	 ldr         r3, [sp, #0xCC]
  01f7c	e28330f8	 add         r3, r3, #0xF8
  01f80	e59d20cc	 ldr         r2, [sp, #0xCC]
  01f84	e28220e8	 add         r2, r2, #0xE8
  01f88	e59d10cc	 ldr         r1, [sp, #0xCC]
  01f8c	e2811f43	 add         r1, r1, #0x43, 30
  01f90	e5911000	 ldr         r1, [r1]
  01f94	e59d00cc	 ldr         r0, [sp, #0xCC]
  01f98	e28000b0	 add         r0, r0, #0xB0
  01f9c	e5900000	 ldr         r0, [r0]
  01fa0	eb000000	 bl          |?SetScalingAttribs@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@PAUtagRECT@@1@Z|
  01fa4	e58d0088	 str         r0, [sp, #0x88]
  01fa8	e59d3088	 ldr         r3, [sp, #0x88]
  01fac	e58d300c	 str         r3, [sp, #0xC]
  01fb0		 |$LN7@DetermineT|

; 875  :             }
; 876  : 
; 877  :             //  Enable the pipeline back on the LCD
; 878  :             bResult = m_pDisplayContr->EnablePipeline(
; 879  :                                             m_eTVPipeline );                                               

  01fb0	e59d30cc	 ldr         r3, [sp, #0xCC]
  01fb4	e2833f43	 add         r3, r3, #0x43, 30
  01fb8	e5931000	 ldr         r1, [r3]
  01fbc	e59d30cc	 ldr         r3, [sp, #0xCC]
  01fc0	e28330b0	 add         r3, r3, #0xB0
  01fc4	e5930000	 ldr         r0, [r3]
  01fc8	eb000000	 bl          |?EnablePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@@Z|
  01fcc	e58d008c	 str         r0, [sp, #0x8C]
  01fd0	e59d308c	 ldr         r3, [sp, #0x8C]
  01fd4	e58d300c	 str         r3, [sp, #0xC]
  01fd8	ea00000e	 b           |$LN6@DetermineT|
  01fdc		 |$LN9@DetermineT|

; 880  :         }
; 881  :         else if( m_pTVSurf )

  01fdc	e59d30cc	 ldr         r3, [sp, #0xCC]
  01fe0	e2833f42	 add         r3, r3, #0x42, 30
  01fe4	e5933000	 ldr         r3, [r3]
  01fe8	e3530000	 cmp         r3, #0
  01fec	0a000009	 beq         |$LN5@DetermineT|

; 882  :         {
; 883  :             //  Disable TV out
; 884  :             bResult = m_pDisplayContr->DisablePipeline(
; 885  :                                             m_eTVPipeline );                                               

  01ff0	e59d30cc	 ldr         r3, [sp, #0xCC]
  01ff4	e2833f43	 add         r3, r3, #0x43, 30
  01ff8	e5931000	 ldr         r1, [r3]
  01ffc	e59d30cc	 ldr         r3, [sp, #0xCC]
  02000	e28330b0	 add         r3, r3, #0xB0
  02004	e5930000	 ldr         r0, [r3]
  02008	eb000000	 bl          |?DisablePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@@Z|
  0200c	e58d0090	 str         r0, [sp, #0x90]
  02010	e59d3090	 ldr         r3, [sp, #0x90]
  02014	e58d300c	 str         r3, [sp, #0xC]
  02018		 |$LN5@DetermineT|
  02018		 |$LN6@DetermineT|

; 886  :         }
; 887  :         
; 888  :         //  No TV surface
; 889  :         m_pTVSurf = NULL;

  02018	e59d30cc	 ldr         r3, [sp, #0xCC]
  0201c	e2832f42	 add         r2, r3, #0x42, 30
  02020	e3a03000	 mov         r3, #0
  02024	e5823000	 str         r3, [r2]
  02028		 |$LN10@DetermineT|

; 890  :     }
; 891  :     
; 892  : 
; 893  :     //  Enable the TV out display    
; 894  :     if( m_pTVSurf && (bForceUpdate || (m_pTVSurf != pOldTVSurf)) )

  02028	e59d30cc	 ldr         r3, [sp, #0xCC]
  0202c	e2833f42	 add         r3, r3, #0x42, 30
  02030	e5933000	 ldr         r3, [r3]
  02034	e3530000	 cmp         r3, #0
  02038	0a000091	 beq         |$LN4@DetermineT|
  0203c	e59d30d0	 ldr         r3, [sp, #0xD0]
  02040	e3530000	 cmp         r3, #0
  02044	1a000005	 bne         |$LN3@DetermineT|
  02048	e59d30cc	 ldr         r3, [sp, #0xCC]
  0204c	e2833f42	 add         r3, r3, #0x42, 30
  02050	e5932000	 ldr         r2, [r3]
  02054	e59d3008	 ldr         r3, [sp, #8]
  02058	e1520003	 cmp         r2, r3
  0205c	0a000088	 beq         |$LN4@DetermineT|
  02060		 |$LN3@DetermineT|

; 895  :     {
; 896  :         DWORD   dwScaledWidth,
; 897  :                 dwScaledHeight;
; 898  :         DWORD   dwPosX,
; 899  :                 dwPosY;     
; 900  : 
; 901  :         OMAPSurface *pSurface = m_pTVSurf->OmapSurface();

  02060	e59d30cc	 ldr         r3, [sp, #0xCC]
  02064	e2833f42	 add         r3, r3, #0x42, 30
  02068	e5930000	 ldr         r0, [r3]
  0206c	eb000000	 bl          |?OmapSurface@OMAPDDGPESurface@@QAAPAVOMAPSurface@@XZ|
  02070	e58d0094	 str         r0, [sp, #0x94]
  02074	e59d3094	 ldr         r3, [sp, #0x94]
  02078	e58d302c	 str         r3, [sp, #0x2C]

; 902  :                 
; 903  :         //  Disable the TV pipeline
; 904  :         bResult = m_pDisplayContr->DisablePipeline(
; 905  :                                         m_eTVPipeline );                                               

  0207c	e59d30cc	 ldr         r3, [sp, #0xCC]
  02080	e2833f43	 add         r3, r3, #0x43, 30
  02084	e5931000	 ldr         r1, [r3]
  02088	e59d30cc	 ldr         r3, [sp, #0xCC]
  0208c	e28330b0	 add         r3, r3, #0xB0
  02090	e5930000	 ldr         r0, [r3]
  02094	eb000000	 bl          |?DisablePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@@Z|
  02098	e58d0098	 str         r0, [sp, #0x98]
  0209c	e59d3098	 ldr         r3, [sp, #0x98]
  020a0	e58d300c	 str         r3, [sp, #0xC]

; 906  : 
; 907  :         
; 908  :         if ((pSurface->Width() > 800) || (pSurface->Height() > 800))

  020a4	e3a01000	 mov         r1, #0
  020a8	e59d302c	 ldr         r3, [sp, #0x2C]
  020ac	e5933000	 ldr         r3, [r3]
  020b0	e2833008	 add         r3, r3, #8
  020b4	e59d002c	 ldr         r0, [sp, #0x2C]
  020b8	e5933000	 ldr         r3, [r3]
  020bc	e1a0e00f	 mov         lr, pc
  020c0	e12fff13	 bx          r3
  020c4	e58d009c	 str         r0, [sp, #0x9C]
  020c8	e59d309c	 ldr         r3, [sp, #0x9C]
  020cc	e3530e32	 cmp         r3, #0x32, 28
  020d0	8a00000b	 bhi         |$LN1@DetermineT|
  020d4	e3a01000	 mov         r1, #0
  020d8	e59d302c	 ldr         r3, [sp, #0x2C]
  020dc	e5933000	 ldr         r3, [r3]
  020e0	e283300c	 add         r3, r3, #0xC
  020e4	e59d002c	 ldr         r0, [sp, #0x2C]
  020e8	e5933000	 ldr         r3, [r3]
  020ec	e1a0e00f	 mov         lr, pc
  020f0	e12fff13	 bx          r3
  020f4	e58d00a0	 str         r0, [sp, #0xA0]
  020f8	e59d30a0	 ldr         r3, [sp, #0xA0]
  020fc	e3530e32	 cmp         r3, #0x32, 28
  02100	9a00001b	 bls         |$LN2@DetermineT|
  02104		 |$LN1@DetermineT|

; 909  :         {
; 910  :             RETAILMSG(1,(L"width(%d) aor height(%d) exceeds TVOUT capabilities\r\n",pSurface->Width(),pSurface->Height()));

  02104	e3a01000	 mov         r1, #0
  02108	e59d302c	 ldr         r3, [sp, #0x2C]
  0210c	e5933000	 ldr         r3, [r3]
  02110	e283300c	 add         r3, r3, #0xC
  02114	e59d002c	 ldr         r0, [sp, #0x2C]
  02118	e5933000	 ldr         r3, [r3]
  0211c	e1a0e00f	 mov         lr, pc
  02120	e12fff13	 bx          r3
  02124	e58d00a4	 str         r0, [sp, #0xA4]
  02128	e3a01000	 mov         r1, #0
  0212c	e59d302c	 ldr         r3, [sp, #0x2C]
  02130	e5933000	 ldr         r3, [r3]
  02134	e2833008	 add         r3, r3, #8
  02138	e59d002c	 ldr         r0, [sp, #0x2C]
  0213c	e5933000	 ldr         r3, [r3]
  02140	e1a0e00f	 mov         lr, pc
  02144	e12fff13	 bx          r3
  02148	e58d00a8	 str         r0, [sp, #0xA8]
  0214c	e59d20a4	 ldr         r2, [sp, #0xA4]
  02150	e59d10a8	 ldr         r1, [sp, #0xA8]
  02154	e59f0134	 ldr         r0, [pc, #0x134]
  02158	eb000000	 bl          NKDbgPrintfW
  0215c	e3a03001	 mov         r3, #1
  02160	e58d30ac	 str         r3, [sp, #0xAC]
  02164	ea000001	 b           |$LN25@DetermineT|
  02168	e3a03000	 mov         r3, #0
  0216c	e58d30ac	 str         r3, [sp, #0xAC]
  02170		 |$LN25@DetermineT|

; 911  :             return;

  02170	ea000043	 b           |$LN22@DetermineT|
  02174		 |$LN2@DetermineT|

; 912  :         }
; 913  :         
; 914  : 
; 915  :         //  Set flicker filter level
; 916  :         m_pDisplayContr->SetTvOutFilterLevel( m_dwTvOut_FilterLevel );

  02174	e59d30cc	 ldr         r3, [sp, #0xCC]
  02178	e2833f45	 add         r3, r3, #0x45, 30
  0217c	e5931000	 ldr         r1, [r3]
  02180	e59d30cc	 ldr         r3, [sp, #0xCC]
  02184	e28330b0	 add         r3, r3, #0xB0
  02188	e5930000	 ldr         r0, [r3]
  0218c	eb000000	 bl          |?SetTvOutFilterLevel@OMAPDisplayController@@QAAHK@Z|

; 917  :     
; 918  :         //  Get the scaling for TV display
; 919  :         GetTvOutScaling( m_pTVSurf->OmapSurface(), &dwScaledWidth, &dwScaledHeight, &dwPosX, &dwPosY );

  02190	e59d30cc	 ldr         r3, [sp, #0xCC]
  02194	e2833f42	 add         r3, r3, #0x42, 30
  02198	e5930000	 ldr         r0, [r3]
  0219c	eb000000	 bl          |?OmapSurface@OMAPDDGPESurface@@QAAPAVOMAPSurface@@XZ|
  021a0	e58d00b0	 str         r0, [sp, #0xB0]
  021a4	e28d3030	 add         r3, sp, #0x30
  021a8	e58d3004	 str         r3, [sp, #4]
  021ac	e28d3020	 add         r3, sp, #0x20
  021b0	e58d3000	 str         r3, [sp]
  021b4	e28d3028	 add         r3, sp, #0x28
  021b8	e28d2024	 add         r2, sp, #0x24
  021bc	e59d10b0	 ldr         r1, [sp, #0xB0]
  021c0	e59d00cc	 ldr         r0, [sp, #0xCC]
  021c4	eb000000	 bl          |?GetTvOutScaling@OMAPDDGPE@@QAAHPAVOMAPSurface@@PAK111@Z|

; 920  :                                 
; 921  :         //  Configure the display controller to show selected TV surface
; 922  :         bResult = m_pDisplayContr->SetPipelineAttribs(
; 923  :                                         m_eTVPipeline,
; 924  :                                         OMAP_DSS_DESTINATION_TVOUT, 
; 925  :                                         m_pTVSurf->OmapSurface() );

  021c8	e59d30cc	 ldr         r3, [sp, #0xCC]
  021cc	e2833f42	 add         r3, r3, #0x42, 30
  021d0	e5930000	 ldr         r0, [r3]
  021d4	eb000000	 bl          |?OmapSurface@OMAPDDGPESurface@@QAAPAVOMAPSurface@@XZ|
  021d8	e58d00b4	 str         r0, [sp, #0xB4]
  021dc	e3a03000	 mov         r3, #0
  021e0	e58d3004	 str         r3, [sp, #4]
  021e4	e3a03000	 mov         r3, #0
  021e8	e58d3000	 str         r3, [sp]
  021ec	e59d30b4	 ldr         r3, [sp, #0xB4]
  021f0	e3a02001	 mov         r2, #1
  021f4	e59d10cc	 ldr         r1, [sp, #0xCC]
  021f8	e2811f43	 add         r1, r1, #0x43, 30
  021fc	e5911000	 ldr         r1, [r1]
  02200	e59d00cc	 ldr         r0, [sp, #0xCC]
  02204	e28000b0	 add         r0, r0, #0xB0
  02208	e5900000	 ldr         r0, [r0]
  0220c	eb000000	 bl          |?SetPipelineAttribs@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@W4OMAP_DSS_DESTINATION@@PAVOMAPSurface@@KK@Z|
  02210	e58d00b8	 str         r0, [sp, #0xB8]
  02214	e59d30b8	 ldr         r3, [sp, #0xB8]
  02218	e58d300c	 str         r3, [sp, #0xC]

; 926  : 
; 927  :         //  Set the scaling info for the pipeline 
; 928  :         bResult = m_pDisplayContr->SetScalingAttribs(
; 929  :                                         m_eTVPipeline,
; 930  :                                         dwScaledWidth,
; 931  :                                         dwScaledHeight,
; 932  :                                         dwPosX,
; 933  :                                         dwPosY );    

  0221c	e59d3030	 ldr         r3, [sp, #0x30]
  02220	e58d3004	 str         r3, [sp, #4]
  02224	e59d3020	 ldr         r3, [sp, #0x20]
  02228	e58d3000	 str         r3, [sp]
  0222c	e59d3028	 ldr         r3, [sp, #0x28]
  02230	e59d2024	 ldr         r2, [sp, #0x24]
  02234	e59d10cc	 ldr         r1, [sp, #0xCC]
  02238	e2811f43	 add         r1, r1, #0x43, 30
  0223c	e5911000	 ldr         r1, [r1]
  02240	e59d00cc	 ldr         r0, [sp, #0xCC]
  02244	e28000b0	 add         r0, r0, #0xB0
  02248	e5900000	 ldr         r0, [r0]
  0224c	eb000000	 bl          |?SetScalingAttribs@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@KKKK@Z|
  02250	e58d00bc	 str         r0, [sp, #0xBC]
  02254	e59d30bc	 ldr         r3, [sp, #0xBC]
  02258	e58d300c	 str         r3, [sp, #0xC]

; 934  :         
; 935  :         //  Enable the pipeline
; 936  :         bResult = m_pDisplayContr->EnablePipeline(
; 937  :                                         m_eTVPipeline );                                               

  0225c	e59d30cc	 ldr         r3, [sp, #0xCC]
  02260	e2833f43	 add         r3, r3, #0x43, 30
  02264	e5931000	 ldr         r1, [r3]
  02268	e59d30cc	 ldr         r3, [sp, #0xCC]
  0226c	e28330b0	 add         r3, r3, #0xB0
  02270	e5930000	 ldr         r0, [r3]
  02274	eb000000	 bl          |?EnablePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@@Z|
  02278	e58d00c0	 str         r0, [sp, #0xC0]
  0227c	e59d30c0	 ldr         r3, [sp, #0xC0]
  02280	e58d300c	 str         r3, [sp, #0xC]
  02284		 |$LN4@DetermineT|
  02284		 |$LN22@DetermineT|

; 938  :     }
; 939  : }  

  02284	e28dd0c4	 add         sp, sp, #0xC4
  02288	e89d6000	 ldmia       sp, {sp, lr}
  0228c	e12fff1e	 bx          lr
  02290		 |$LN29@DetermineT|
  02290		 |$LN30@DetermineT|
  02290	00000000	 DCD         |??_C@_1GM@EAIMMHOP@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?5?$AAa?$AAo?$AAr?$AA?5?$AAh?$AAe?$AAi?$AAg?$AAh?$AAt?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?5?$AAe?$AAx?$AAc?$AAe?$AAe?$AAd?$AAs@|
  02294		 |$M42775|

			 ENDP  ; |?DetermineTvOutSurface@OMAPDDGPE@@QAAXH@Z|, OMAPDDGPE::DetermineTvOutSurface

	EXPORT	|?GetTVHeight@OMAPDisplayController@@QAAKXZ| ; OMAPDisplayController::GetTVHeight
	EXPORT	|?GetTVWidth@OMAPDisplayController@@QAAKXZ| ; OMAPDisplayController::GetTVWidth
	IMPORT	|__utod|
	IMPORT	|__dtos|
	IMPORT	|__muls|
	IMPORT	|__stou|

  000a8			 AREA	 |.pdata|, PDATA
|$T42789| DCD	|$LN19@GetTvOutSc|
	DCD	0x40011a04
; Function compile flags: /Odtp

  02294			 AREA	 |.text|, CODE, ARM

  02294		 |?GetTvOutScaling@OMAPDDGPE@@QAAHPAVOMAPSurface@@PAK111@Z| PROC ; OMAPDDGPE::GetTvOutScaling

; 950  : {

  02294		 |$LN19@GetTvOutSc|
  02294	e1a0c00d	 mov         r12, sp
  02298	e92d000f	 stmdb       sp!, {r0 - r3}
  0229c	e92d5010	 stmdb       sp!, {r4, r12, lr}
  022a0	e24dd048	 sub         sp, sp, #0x48
  022a4		 |$M42786|

; 951  :     BOOL    bResult = FALSE;

  022a4	e3a03000	 mov         r3, #0
  022a8	e58d300c	 str         r3, [sp, #0xC]

; 952  :     float   fTvAspect,
; 953  :             fSurfaceAspect,
; 954  :             fScalingFactorW,
; 955  :             fScalingFactorH;
; 956  : 
; 957  :     
; 958  :     //  Check pointers
; 959  :     if( pSurface == NULL ||
; 960  :         pScaledWidth == NULL ||
; 961  :         pScaledHeight == NULL )

  022ac	e59d3058	 ldr         r3, [sp, #0x58]
  022b0	e3530000	 cmp         r3, #0
  022b4	0a000005	 beq         |$LN13@GetTvOutSc|
  022b8	e59d305c	 ldr         r3, [sp, #0x5C]
  022bc	e3530000	 cmp         r3, #0
  022c0	0a000002	 beq         |$LN13@GetTvOutSc|
  022c4	e59d3060	 ldr         r3, [sp, #0x60]
  022c8	e3530000	 cmp         r3, #0
  022cc	1a000002	 bne         |$LN14@GetTvOutSc|
  022d0		 |$LN13@GetTvOutSc|

; 962  :         return bResult;

  022d0	e59d300c	 ldr         r3, [sp, #0xC]
  022d4	e58d3014	 str         r3, [sp, #0x14]
  022d8	ea000103	 b           |$LN15@GetTvOutSc|
  022dc		 |$LN14@GetTvOutSc|

; 963  : 
; 964  :     //  Compute aspect ratios of TV and surface
; 965  :     fTvAspect       = (float)(m_dwTvOut_AspectRatio_W) / (float)(m_dwTvOut_AspectRatio_H);

  022dc	e59d3054	 ldr         r3, [sp, #0x54]
  022e0	e2833f46	 add         r3, r3, #0x46, 30
  022e4	e5930000	 ldr         r0, [r3]
  022e8	eb000000	 bl          __utos
  022ec	e1a04000	 mov         r4, r0
  022f0	e59d3054	 ldr         r3, [sp, #0x54]
  022f4	e2833f47	 add         r3, r3, #0x47, 30
  022f8	e5930000	 ldr         r0, [r3]
  022fc	eb000000	 bl          __utos
  02300	e1a01000	 mov         r1, r0
  02304	e1a00004	 mov         r0, r4
  02308	eb000000	 bl          __divs
  0230c	e58d0010	 str         r0, [sp, #0x10]

; 966  :     fSurfaceAspect  = (float)(pSurface->Width()) / (float)(pSurface->Height());

  02310	e3a01000	 mov         r1, #0
  02314	e59d3058	 ldr         r3, [sp, #0x58]
  02318	e5933000	 ldr         r3, [r3]
  0231c	e2833008	 add         r3, r3, #8
  02320	e59d0058	 ldr         r0, [sp, #0x58]
  02324	e5933000	 ldr         r3, [r3]
  02328	e1a0e00f	 mov         lr, pc
  0232c	e12fff13	 bx          r3
  02330	e58d0018	 str         r0, [sp, #0x18]
  02334	e3a01000	 mov         r1, #0
  02338	e59d3058	 ldr         r3, [sp, #0x58]
  0233c	e5933000	 ldr         r3, [r3]
  02340	e283300c	 add         r3, r3, #0xC
  02344	e59d0058	 ldr         r0, [sp, #0x58]
  02348	e5933000	 ldr         r3, [r3]
  0234c	e1a0e00f	 mov         lr, pc
  02350	e12fff13	 bx          r3
  02354	e58d001c	 str         r0, [sp, #0x1C]
  02358	e59d0018	 ldr         r0, [sp, #0x18]
  0235c	eb000000	 bl          __utos
  02360	e1a04000	 mov         r4, r0
  02364	e59d001c	 ldr         r0, [sp, #0x1C]
  02368	eb000000	 bl          __utos
  0236c	e1a01000	 mov         r1, r0
  02370	e1a00004	 mov         r0, r4
  02374	eb000000	 bl          __divs
  02378	e58d0000	 str         r0, [sp]

; 967  :     fScalingFactorW = (float)(m_dwTvOut_Resize_W / 100.0);

  0237c	e59d3054	 ldr         r3, [sp, #0x54]
  02380	e2833e12	 add         r3, r3, #0x12, 28
  02384	e5930000	 ldr         r0, [r3]
  02388	eb000000	 bl          __utod
  0238c	e3a02000	 mov         r2, #0
  02390	e3a03101	 mov         r3, #1, 2
  02394	e3833859	 orr         r3, r3, #0x59, 16
  02398	eb000000	 bl          __divd
  0239c	eb000000	 bl          __dtos
  023a0	e58d0008	 str         r0, [sp, #8]

; 968  :     fScalingFactorH = (float)(m_dwTvOut_Resize_H / 100.0);

  023a4	e59d3054	 ldr         r3, [sp, #0x54]
  023a8	e2833f49	 add         r3, r3, #0x49, 30
  023ac	e5930000	 ldr         r0, [r3]
  023b0	eb000000	 bl          __utod
  023b4	e3a02000	 mov         r2, #0
  023b8	e3a03101	 mov         r3, #1, 2
  023bc	e3833859	 orr         r3, r3, #0x59, 16
  023c0	eb000000	 bl          __divd
  023c4	eb000000	 bl          __dtos
  023c8	e58d0004	 str         r0, [sp, #4]

; 969  :     
; 970  :     
; 971  : #if 0
; 972  :     //  Ignore the scaling factors if there is no flicker filter enabled
; 973  :     //  And can fit the surface on the screen with just interlacing mode
; 974  :     if( m_dwTvOut_FilterLevel == OMAP_TV_FILTER_LEVEL_OFF && 
; 975  :         (pSurface->Width()  <= m_pDisplayContr->GetTVWidth()/2) &&
; 976  :         (pSurface->Height() <= m_pDisplayContr->GetTVHeight()/2) )
; 977  :     {
; 978  :         //  Can display surface on TV without interlacing (2x the scaled size to indicate that)
; 979  :         *pScaledWidth  = 2 * pSurface->Width();
; 980  :         *pScaledHeight = 2 * pSurface->Height();
; 981  :     }
; 982  :     else if( m_dwTvOut_FilterLevel == OMAP_TV_FILTER_LEVEL_OFF &&
; 983  :         (pSurface->Width()  <= m_pDisplayContr->GetTVWidth()) &&
; 984  :         (pSurface->Height() <= m_pDisplayContr->GetTVHeight()) )
; 985  :     {
; 986  :         //  Can display surface on TV with interlacing
; 987  :         *pScaledWidth  = pSurface->Width();
; 988  :         *pScaledHeight = pSurface->Height();
; 989  :     }
; 990  :     else
; 991  : #endif
; 992  :     {
; 993  :         //  Can't use or don't want to use interlace mode; use scaling instead
; 994  :         //  Check aspect ratios of surface and TV out to scale the surface to maximize the TV screen
; 995  :         if( fTvAspect > fSurfaceAspect )

  023cc	e59d0010	 ldr         r0, [sp, #0x10]
  023d0	e59d1000	 ldr         r1, [sp]
  023d4	eb000000	 bl          __gts
  023d8	e3500000	 cmp         r0, #0
  023dc	0a000020	 beq         |$LN12@GetTvOutSc|

; 996  :         {
; 997  :             //  Compute output width and height to maximize height on TV display
; 998  :             *pScaledWidth  = (DWORD)(fScalingFactorW * fSurfaceAspect * m_pDisplayContr->GetTVWidth() / fTvAspect);

  023e0	e59d3054	 ldr         r3, [sp, #0x54]
  023e4	e28330b0	 add         r3, r3, #0xB0
  023e8	e5930000	 ldr         r0, [r3]
  023ec	eb000000	 bl          |?GetTVWidth@OMAPDisplayController@@QAAKXZ|
  023f0	e58d0020	 str         r0, [sp, #0x20]
  023f4	e59d0008	 ldr         r0, [sp, #8]
  023f8	e59d1000	 ldr         r1, [sp]
  023fc	eb000000	 bl          __muls
  02400	e1a04000	 mov         r4, r0
  02404	e59d0020	 ldr         r0, [sp, #0x20]
  02408	eb000000	 bl          __utos
  0240c	e1a01000	 mov         r1, r0
  02410	e1a00004	 mov         r0, r4
  02414	eb000000	 bl          __muls
  02418	e59d1010	 ldr         r1, [sp, #0x10]
  0241c	eb000000	 bl          __divs
  02420	eb000000	 bl          __stou
  02424	e59d305c	 ldr         r3, [sp, #0x5C]
  02428	e5830000	 str         r0, [r3]

; 999  :             *pScaledHeight = (DWORD)(fScalingFactorH * m_pDisplayContr->GetTVHeight());

  0242c	e59d3054	 ldr         r3, [sp, #0x54]
  02430	e28330b0	 add         r3, r3, #0xB0
  02434	e5930000	 ldr         r0, [r3]
  02438	eb000000	 bl          |?GetTVHeight@OMAPDisplayController@@QAAKXZ|
  0243c	e58d0024	 str         r0, [sp, #0x24]
  02440	e59d0024	 ldr         r0, [sp, #0x24]
  02444	eb000000	 bl          __utos
  02448	e1a01000	 mov         r1, r0
  0244c	e59d0004	 ldr         r0, [sp, #4]
  02450	eb000000	 bl          __muls
  02454	eb000000	 bl          __stou
  02458	e59d3060	 ldr         r3, [sp, #0x60]
  0245c	e5830000	 str         r0, [r3]

; 1000 :         }
; 1001 :         else

  02460	ea00001f	 b           |$LN11@GetTvOutSc|
  02464		 |$LN12@GetTvOutSc|

; 1002 :         {
; 1003 :             //  Compute ouptut width and height to maximize width on TV display
; 1004 :             *pScaledWidth  = (DWORD)(fScalingFactorW * m_pDisplayContr->GetTVWidth());

  02464	e59d3054	 ldr         r3, [sp, #0x54]
  02468	e28330b0	 add         r3, r3, #0xB0
  0246c	e5930000	 ldr         r0, [r3]
  02470	eb000000	 bl          |?GetTVWidth@OMAPDisplayController@@QAAKXZ|
  02474	e58d0028	 str         r0, [sp, #0x28]
  02478	e59d0028	 ldr         r0, [sp, #0x28]
  0247c	eb000000	 bl          __utos
  02480	e1a01000	 mov         r1, r0
  02484	e59d0008	 ldr         r0, [sp, #8]
  02488	eb000000	 bl          __muls
  0248c	eb000000	 bl          __stou
  02490	e59d305c	 ldr         r3, [sp, #0x5C]
  02494	e5830000	 str         r0, [r3]

; 1005 :             *pScaledHeight = (DWORD)(fScalingFactorH * fTvAspect * m_pDisplayContr->GetTVHeight() / fSurfaceAspect);

  02498	e59d3054	 ldr         r3, [sp, #0x54]
  0249c	e28330b0	 add         r3, r3, #0xB0
  024a0	e5930000	 ldr         r0, [r3]
  024a4	eb000000	 bl          |?GetTVHeight@OMAPDisplayController@@QAAKXZ|
  024a8	e58d002c	 str         r0, [sp, #0x2C]
  024ac	e59d0004	 ldr         r0, [sp, #4]
  024b0	e59d1010	 ldr         r1, [sp, #0x10]
  024b4	eb000000	 bl          __muls
  024b8	e1a04000	 mov         r4, r0
  024bc	e59d002c	 ldr         r0, [sp, #0x2C]
  024c0	eb000000	 bl          __utos
  024c4	e1a01000	 mov         r1, r0
  024c8	e1a00004	 mov         r0, r4
  024cc	eb000000	 bl          __muls
  024d0	e59d1000	 ldr         r1, [sp]
  024d4	eb000000	 bl          __divs
  024d8	eb000000	 bl          __stou
  024dc	e59d3060	 ldr         r3, [sp, #0x60]
  024e0	e5830000	 str         r0, [r3]
  024e4		 |$LN11@GetTvOutSc|

; 1006 :         }
; 1007 :     }
; 1008 : 
; 1009 :     //  Compute offsets to center TV output
; 1010 :     if( pScaledXPos != NULL )

  024e4	e59d3064	 ldr         r3, [sp, #0x64]
  024e8	e3530000	 cmp         r3, #0
  024ec	0a00003c	 beq         |$LN10@GetTvOutSc|

; 1011 :     {
; 1012 :         //  Compute offset to center display
; 1013 :         *pScaledXPos = (m_pDisplayContr->GetTVWidth() - *pScaledWidth)/2;

  024f0	e59d3054	 ldr         r3, [sp, #0x54]
  024f4	e28330b0	 add         r3, r3, #0xB0
  024f8	e5930000	 ldr         r0, [r3]
  024fc	eb000000	 bl          |?GetTVWidth@OMAPDisplayController@@QAAKXZ|
  02500	e58d0030	 str         r0, [sp, #0x30]
  02504	e59d2030	 ldr         r2, [sp, #0x30]
  02508	e59d305c	 ldr         r3, [sp, #0x5C]
  0250c	e5933000	 ldr         r3, [r3]
  02510	e0421003	 sub         r1, r2, r3
  02514	e3a00002	 mov         r0, #2
  02518	eb000000	 bl          __rt_udiv
  0251c	e59d3064	 ldr         r3, [sp, #0x64]
  02520	e5830000	 str         r0, [r3]

; 1014 :         
; 1015 :         //  Adjust by manual over-ride (bound result to stay within TV display
; 1016 :         if( ((LONG)*pScaledXPos + m_lTvOut_Offset_W) < 0 )

  02524	e59d3054	 ldr         r3, [sp, #0x54]
  02528	e2831f4a	 add         r1, r3, #0x4A, 30
  0252c	e59d3064	 ldr         r3, [sp, #0x64]
  02530	e5932000	 ldr         r2, [r3]
  02534	e5913000	 ldr         r3, [r1]
  02538	e0923003	 adds        r3, r2, r3
  0253c	5a000003	 bpl         |$LN9@GetTvOutSc|

; 1017 :         {
; 1018 :             *pScaledXPos = 0;

  02540	e59d2064	 ldr         r2, [sp, #0x64]
  02544	e3a03000	 mov         r3, #0
  02548	e5823000	 str         r3, [r2]
  0254c	ea000024	 b           |$LN8@GetTvOutSc|
  02550		 |$LN9@GetTvOutSc|

; 1019 :         }
; 1020 :         else if( (*pScaledXPos + m_lTvOut_Offset_W + *pScaledWidth) > m_pDisplayContr->GetTVWidth() )

  02550	e59d3054	 ldr         r3, [sp, #0x54]
  02554	e28330b0	 add         r3, r3, #0xB0
  02558	e5930000	 ldr         r0, [r3]
  0255c	eb000000	 bl          |?GetTVWidth@OMAPDisplayController@@QAAKXZ|
  02560	e58d0034	 str         r0, [sp, #0x34]
  02564	e59d3054	 ldr         r3, [sp, #0x54]
  02568	e2831f4a	 add         r1, r3, #0x4A, 30
  0256c	e59d3064	 ldr         r3, [sp, #0x64]
  02570	e5932000	 ldr         r2, [r3]
  02574	e5913000	 ldr         r3, [r1]
  02578	e0822003	 add         r2, r2, r3
  0257c	e59d305c	 ldr         r3, [sp, #0x5C]
  02580	e5933000	 ldr         r3, [r3]
  02584	e0822003	 add         r2, r2, r3
  02588	e59d3034	 ldr         r3, [sp, #0x34]
  0258c	e1520003	 cmp         r2, r3
  02590	9a00000b	 bls         |$LN7@GetTvOutSc|

; 1021 :         {
; 1022 :             *pScaledXPos = m_pDisplayContr->GetTVWidth() - *pScaledWidth;

  02594	e59d3054	 ldr         r3, [sp, #0x54]
  02598	e28330b0	 add         r3, r3, #0xB0
  0259c	e5930000	 ldr         r0, [r3]
  025a0	eb000000	 bl          |?GetTVWidth@OMAPDisplayController@@QAAKXZ|
  025a4	e58d0038	 str         r0, [sp, #0x38]
  025a8	e59d2038	 ldr         r2, [sp, #0x38]
  025ac	e59d305c	 ldr         r3, [sp, #0x5C]
  025b0	e5933000	 ldr         r3, [r3]
  025b4	e0422003	 sub         r2, r2, r3
  025b8	e59d3064	 ldr         r3, [sp, #0x64]
  025bc	e5832000	 str         r2, [r3]

; 1023 :         }
; 1024 :         else

  025c0	ea000007	 b           |$LN6@GetTvOutSc|
  025c4		 |$LN7@GetTvOutSc|

; 1025 :         {
; 1026 :             *pScaledXPos = *pScaledXPos + m_lTvOut_Offset_W;

  025c4	e59d3054	 ldr         r3, [sp, #0x54]
  025c8	e2831f4a	 add         r1, r3, #0x4A, 30
  025cc	e59d3064	 ldr         r3, [sp, #0x64]
  025d0	e5932000	 ldr         r2, [r3]
  025d4	e5913000	 ldr         r3, [r1]
  025d8	e0822003	 add         r2, r2, r3
  025dc	e59d3064	 ldr         r3, [sp, #0x64]
  025e0	e5832000	 str         r2, [r3]
  025e4		 |$LN6@GetTvOutSc|
  025e4		 |$LN8@GetTvOutSc|
  025e4		 |$LN10@GetTvOutSc|

; 1027 :         }
; 1028 :     }                 
; 1029 : 
; 1030 :     if( pScaledYPos != NULL )

  025e4	e59d3068	 ldr         r3, [sp, #0x68]
  025e8	e3530000	 cmp         r3, #0
  025ec	0a00003c	 beq         |$LN5@GetTvOutSc|

; 1031 :     {
; 1032 :         //  Compute offset to center display
; 1033 :         *pScaledYPos = (m_pDisplayContr->GetTVHeight() - *pScaledHeight)/2;

  025f0	e59d3054	 ldr         r3, [sp, #0x54]
  025f4	e28330b0	 add         r3, r3, #0xB0
  025f8	e5930000	 ldr         r0, [r3]
  025fc	eb000000	 bl          |?GetTVHeight@OMAPDisplayController@@QAAKXZ|
  02600	e58d003c	 str         r0, [sp, #0x3C]
  02604	e59d203c	 ldr         r2, [sp, #0x3C]
  02608	e59d3060	 ldr         r3, [sp, #0x60]
  0260c	e5933000	 ldr         r3, [r3]
  02610	e0421003	 sub         r1, r2, r3
  02614	e3a00002	 mov         r0, #2
  02618	eb000000	 bl          __rt_udiv
  0261c	e59d3068	 ldr         r3, [sp, #0x68]
  02620	e5830000	 str         r0, [r3]

; 1034 :         
; 1035 :         //  Adjust by manual over-ride (bound result to stay within TV display
; 1036 :         if( ((LONG)*pScaledYPos + m_lTvOut_Offset_H) < 0 )

  02624	e59d3054	 ldr         r3, [sp, #0x54]
  02628	e2831f4b	 add         r1, r3, #0x4B, 30
  0262c	e59d3068	 ldr         r3, [sp, #0x68]
  02630	e5932000	 ldr         r2, [r3]
  02634	e5913000	 ldr         r3, [r1]
  02638	e0923003	 adds        r3, r2, r3
  0263c	5a000003	 bpl         |$LN4@GetTvOutSc|

; 1037 :         {
; 1038 :             *pScaledYPos = 0;

  02640	e59d2068	 ldr         r2, [sp, #0x68]
  02644	e3a03000	 mov         r3, #0
  02648	e5823000	 str         r3, [r2]
  0264c	ea000024	 b           |$LN3@GetTvOutSc|
  02650		 |$LN4@GetTvOutSc|

; 1039 :         }
; 1040 :         else if( (*pScaledYPos + m_lTvOut_Offset_H + *pScaledHeight) > m_pDisplayContr->GetTVHeight() )

  02650	e59d3054	 ldr         r3, [sp, #0x54]
  02654	e28330b0	 add         r3, r3, #0xB0
  02658	e5930000	 ldr         r0, [r3]
  0265c	eb000000	 bl          |?GetTVHeight@OMAPDisplayController@@QAAKXZ|
  02660	e58d0040	 str         r0, [sp, #0x40]
  02664	e59d3054	 ldr         r3, [sp, #0x54]
  02668	e2831f4b	 add         r1, r3, #0x4B, 30
  0266c	e59d3068	 ldr         r3, [sp, #0x68]
  02670	e5932000	 ldr         r2, [r3]
  02674	e5913000	 ldr         r3, [r1]
  02678	e0822003	 add         r2, r2, r3
  0267c	e59d3060	 ldr         r3, [sp, #0x60]
  02680	e5933000	 ldr         r3, [r3]
  02684	e0822003	 add         r2, r2, r3
  02688	e59d3040	 ldr         r3, [sp, #0x40]
  0268c	e1520003	 cmp         r2, r3
  02690	9a00000b	 bls         |$LN2@GetTvOutSc|

; 1041 :         {
; 1042 :             *pScaledYPos = m_pDisplayContr->GetTVHeight() - *pScaledHeight;

  02694	e59d3054	 ldr         r3, [sp, #0x54]
  02698	e28330b0	 add         r3, r3, #0xB0
  0269c	e5930000	 ldr         r0, [r3]
  026a0	eb000000	 bl          |?GetTVHeight@OMAPDisplayController@@QAAKXZ|
  026a4	e58d0044	 str         r0, [sp, #0x44]
  026a8	e59d2044	 ldr         r2, [sp, #0x44]
  026ac	e59d3060	 ldr         r3, [sp, #0x60]
  026b0	e5933000	 ldr         r3, [r3]
  026b4	e0422003	 sub         r2, r2, r3
  026b8	e59d3068	 ldr         r3, [sp, #0x68]
  026bc	e5832000	 str         r2, [r3]

; 1043 :         }
; 1044 :         else

  026c0	ea000007	 b           |$LN1@GetTvOutSc|
  026c4		 |$LN2@GetTvOutSc|

; 1045 :         {
; 1046 :             *pScaledYPos = *pScaledYPos + m_lTvOut_Offset_H;

  026c4	e59d3054	 ldr         r3, [sp, #0x54]
  026c8	e2831f4b	 add         r1, r3, #0x4B, 30
  026cc	e59d3068	 ldr         r3, [sp, #0x68]
  026d0	e5932000	 ldr         r2, [r3]
  026d4	e5913000	 ldr         r3, [r1]
  026d8	e0822003	 add         r2, r2, r3
  026dc	e59d3068	 ldr         r3, [sp, #0x68]
  026e0	e5832000	 str         r2, [r3]
  026e4		 |$LN1@GetTvOutSc|
  026e4		 |$LN3@GetTvOutSc|
  026e4		 |$LN5@GetTvOutSc|

; 1047 :         }
; 1048 :     }                 
; 1049 : 
; 1050 : 
; 1051 :     //  Return result
; 1052 :     return bResult;

  026e4	e59d300c	 ldr         r3, [sp, #0xC]
  026e8	e58d3014	 str         r3, [sp, #0x14]
  026ec		 |$LN15@GetTvOutSc|

; 1053 : }

  026ec	e59d0014	 ldr         r0, [sp, #0x14]
  026f0	e28dd048	 add         sp, sp, #0x48
  026f4	e89d6010	 ldmia       sp, {r4, sp, lr}
  026f8	e12fff1e	 bx          lr
  026fc		 |$M42787|

			 ENDP  ; |?GetTvOutScaling@OMAPDDGPE@@QAAHPAVOMAPSurface@@PAK111@Z|, OMAPDDGPE::GetTvOutScaling

; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\inc\dssai.h

  00000			 AREA	 |.pdata|, PDATA
|$T42795| DCD	|$LN5@GetTVWidth|
	DCD	0x40000d04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetTVWidth@OMAPDisplayController@@QAAKXZ| PROC ; OMAPDisplayController::GetTVWidth

; 305  :     DWORD                   GetTVWidth() { return m_dwTVWidth; }

  00000		 |$LN5@GetTVWidth|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M42792|
  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e2833b01	 add         r3, r3, #1, 22
  00018	e28330bc	 add         r3, r3, #0xBC
  0001c	e5933000	 ldr         r3, [r3]
  00020	e58d3000	 str         r3, [sp]
  00024	e59d0000	 ldr         r0, [sp]
  00028	e28dd004	 add         sp, sp, #4
  0002c	e89d6000	 ldmia       sp, {sp, lr}
  00030	e12fff1e	 bx          lr
  00034		 |$M42793|

			 ENDP  ; |?GetTVWidth@OMAPDisplayController@@QAAKXZ|, OMAPDisplayController::GetTVWidth


  00000			 AREA	 |.pdata|, PDATA
|$T42803| DCD	|$LN5@GetTVHeigh|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetTVHeight@OMAPDisplayController@@QAAKXZ| PROC ; OMAPDisplayController::GetTVHeight

; 306  :     DWORD                   GetTVHeight() { return m_dwTVHeight; }

  00000		 |$LN5@GetTVHeigh|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M42800|
  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e2833d13	 add         r3, r3, #0x13, 26
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3000	 str         r3, [sp]
  00020	e59d0000	 ldr         r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M42801|

			 ENDP  ; |?GetTVHeight@OMAPDisplayController@@QAAKXZ|, OMAPDisplayController::GetTVHeight

	EXPORT	|??_7OMAPDDGPESurface@@6B@| [ DATA ]	; OMAPDDGPESurface::`vftable'
	EXPORT	|??0OMAPDDGPESurface@@QAA@XZ|		; OMAPDDGPESurface::OMAPDDGPESurface
	EXPORT	|?GetDriverData@DDGPESurf@@UAAPAUDDGPEDriverData@@XZ| ; DDGPESurf::GetDriverData
	EXPORT	|?SetDriverData@DDGPESurf@@UAAXPAUDDGPEDriverData@@@Z| ; DDGPESurf::SetDriverData
	EXPORT	|?SurfaceSize@DDGPESurf@@UAAHXZ|	; DDGPESurf::SurfaceSize
	EXPORT	|?SetOrientation@OMAPDDGPESurface@@UAAHW4OMAP_SURF_ORIENTATION@@@Z| ; OMAPDDGPESurface::SetOrientation
	IMPORT	|??0DDGPESurf@@QAA@XZ|			; DDGPESurf::DDGPESurf
	IMPORT	|??_EOMAPDDGPESurface@@UAAPAXI@Z|, WEAK |??_GOMAPDDGPESurface@@UAAPAXI@Z| ; OMAPDDGPESurface::`vector deleting destructor', OMAPDDGPESurface::`scalar deleting destructor'
	IMPORT	|?Init@DDGPESurf@@UAAXHHPAXHW4EGPEFormat@@W4EDDGPEPixelFormat@@@Z| ; DDGPESurf::Init
	IMPORT	|?SetDDGPESurf@DDGPESurf@@UAAXPAU_DDRAWI_DDRAWSURFACE_LCL@@@Z| ; DDGPESurf::SetDDGPESurf
	IMPORT	|?Bpp@DDGPESurf@@UAAKXZ|		; DDGPESurf::Bpp
	IMPORT	|?AlignedWidth@DDGPESurf@@UAAKXZ|	; DDGPESurf::AlignedWidth
	IMPORT	|?SetColorKey@DDGPESurf@@UAAXK@Z|	; DDGPESurf::SetColorKey
	IMPORT	|?ColorKey@DDGPESurf@@UAAKXZ|		; DDGPESurf::ColorKey
	IMPORT	|?SetColorKeyMask@DDGPESurf@@UAAXK@Z|	; DDGPESurf::SetColorKeyMask
	IMPORT	|?ColorKeyMask@DDGPESurf@@UAAKXZ|	; DDGPESurf::ColorKeyMask
	IMPORT	|?SetColorKeyLow@DDGPESurf@@UAAXK@Z|	; DDGPESurf::SetColorKeyLow
	IMPORT	|?ColorKeyLow@DDGPESurf@@UAAKXZ|	; DDGPESurf::ColorKeyLow
	IMPORT	|?SetColorKeyHigh@DDGPESurf@@UAAXK@Z|	; DDGPESurf::SetColorKeyHigh
	IMPORT	|?ColorKeyHigh@DDGPESurf@@UAAKXZ|	; DDGPESurf::ColorKeyHigh
	IMPORT	|?PixelFormat@DDGPESurf@@UAA?AW4EDDGPEPixelFormat@@XZ| ; DDGPESurf::PixelFormat
	IMPORT	|?HasAlpha@DDGPESurf@@UAAHXZ|		; DDGPESurf::HasAlpha

  000b0			 AREA	 |.pdata|, PDATA
|$T42811| DCD	|$LN5@OMAPDDGPES|
	DCD	0x40001904
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\ddgpe\omap_ddsurf.cpp

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_7OMAPDDGPESurface@@6B@| DCD |??_EOMAPDDGPESurface@@UAAPAXI@Z| ; OMAPDDGPESurface::`vftable'
	DCD	|?Init@DDGPESurf@@UAAXHHPAXHW4EGPEFormat@@W4EDDGPEPixelFormat@@@Z|
	DCD	|?SetDDGPESurf@DDGPESurf@@UAAXPAU_DDRAWI_DDRAWSURFACE_LCL@@@Z|
	DCD	|?Bpp@DDGPESurf@@UAAKXZ|
	DCD	|?AlignedWidth@DDGPESurf@@UAAKXZ|
	DCD	|?SetColorKey@DDGPESurf@@UAAXK@Z|
	DCD	|?ColorKey@DDGPESurf@@UAAKXZ|
	DCD	|?SetColorKeyMask@DDGPESurf@@UAAXK@Z|
	DCD	|?ColorKeyMask@DDGPESurf@@UAAKXZ|
	DCD	|?SetColorKeyLow@DDGPESurf@@UAAXK@Z|
	DCD	|?ColorKeyLow@DDGPESurf@@UAAKXZ|
	DCD	|?SetColorKeyHigh@DDGPESurf@@UAAXK@Z|
	DCD	|?ColorKeyHigh@DDGPESurf@@UAAKXZ|
	DCD	|?PixelFormat@DDGPESurf@@UAA?AW4EDDGPEPixelFormat@@XZ|
	DCD	|?HasAlpha@DDGPESurf@@UAAHXZ|
	DCD	|?GetDriverData@DDGPESurf@@UAAPAUDDGPEDriverData@@XZ|
	DCD	|?SetDriverData@DDGPESurf@@UAAXPAUDDGPEDriverData@@@Z|
	DCD	|?SurfaceSize@DDGPESurf@@UAAHXZ|
	DCD	|?SetOrientation@OMAPDDGPESurface@@UAAHW4OMAP_SURF_ORIENTATION@@@Z|
; Function compile flags: /Odtp

  026fc			 AREA	 |.text|, CODE, ARM

  026fc		 |??0OMAPDDGPESurface@@QAA@XZ| PROC	; OMAPDDGPESurface::OMAPDDGPESurface

; 1058 : {

  026fc		 |$LN5@OMAPDDGPES|
  026fc	e1a0c00d	 mov         r12, sp
  02700	e92d0001	 stmdb       sp!, {r0}
  02704	e92d5000	 stmdb       sp!, {r12, lr}
  02708	e24dd008	 sub         sp, sp, #8
  0270c		 |$M42808|
  0270c	e59d0010	 ldr         r0, [sp, #0x10]
  02710	eb000000	 bl          |??0DDGPESurf@@QAA@XZ|
  02714	e58d0004	 str         r0, [sp, #4]
  02718	e59f203c	 ldr         r2, [pc, #0x3C]
  0271c	e59d3010	 ldr         r3, [sp, #0x10]
  02720	e5832000	 str         r2, [r3]

; 1059 :     m_pParentSurface = this;

  02724	e59d3010	 ldr         r3, [sp, #0x10]
  02728	e2832084	 add         r2, r3, #0x84
  0272c	e59d3010	 ldr         r3, [sp, #0x10]
  02730	e5823000	 str         r3, [r2]

; 1060 :     m_pAssocSurface = NULL;

  02734	e59d3010	 ldr         r3, [sp, #0x10]
  02738	e2832080	 add         r2, r3, #0x80
  0273c	e3a03000	 mov         r3, #0
  02740	e5823000	 str         r3, [r2]

; 1061 : }

  02744	e59d3010	 ldr         r3, [sp, #0x10]
  02748	e58d3000	 str         r3, [sp]
  0274c	e59d0000	 ldr         r0, [sp]
  02750	e28dd008	 add         sp, sp, #8
  02754	e89d6000	 ldmia       sp, {sp, lr}
  02758	e12fff1e	 bx          lr
  0275c		 |$LN6@OMAPDDGPES|
  0275c		 |$LN7@OMAPDDGPES|
  0275c	00000000	 DCD         |??_7OMAPDDGPESurface@@6B@|
  02760		 |$M42809|

			 ENDP  ; |??0OMAPDDGPESurface@@QAA@XZ|, OMAPDDGPESurface::OMAPDDGPESurface

; File c:\wince600\public\common\oak\inc\ddgpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T42819| DCD	|$LN5@GetDriverD|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetDriverData@DDGPESurf@@UAAPAUDDGPEDriverData@@XZ| PROC ; DDGPESurf::GetDriverData

; 302  : 	virtual DDGPEDriverData*		GetDriverData(void) { return m_pDriverData; }

  00000		 |$LN5@GetDriverD|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M42816|
  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e2833068	 add         r3, r3, #0x68
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3000	 str         r3, [sp]
  00020	e59d0000	 ldr         r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M42817|

			 ENDP  ; |?GetDriverData@DDGPESurf@@UAAPAUDDGPEDriverData@@XZ|, DDGPESurf::GetDriverData


  00000			 AREA	 |.pdata|, PDATA
|$T42826| DCD	|$LN5@SetDriverD|
	DCD	0x40000903
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetDriverData@DDGPESurf@@UAAXPAUDDGPEDriverData@@@Z| PROC ; DDGPESurf::SetDriverData

; 303  : 	virtual void					SetDriverData(DDGPEDriverData* pDriverData) { m_pDriverData = pDriverData; }

  00000		 |$LN5@SetDriverD|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M42823|
  0000c	e59d3008	 ldr         r3, [sp, #8]
  00010	e2832068	 add         r2, r3, #0x68
  00014	e59d300c	 ldr         r3, [sp, #0xC]
  00018	e5823000	 str         r3, [r2]
  0001c	e89d6000	 ldmia       sp, {sp, lr}
  00020	e12fff1e	 bx          lr
  00024		 |$M42824|

			 ENDP  ; |?SetDriverData@DDGPESurf@@UAAXPAUDDGPEDriverData@@@Z|, DDGPESurf::SetDriverData


  00000			 AREA	 |.pdata|, PDATA
|$T42834| DCD	|$LN5@SurfaceSiz|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SurfaceSize@DDGPESurf@@UAAHXZ| PROC	; DDGPESurf::SurfaceSize

; 304  : 	virtual int						SurfaceSize (void) { return m_dwSurfaceSize; }

  00000		 |$LN5@SurfaceSiz|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M42831|
  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e283305c	 add         r3, r3, #0x5C
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3000	 str         r3, [sp]
  00020	e59d0000	 ldr         r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M42832|

			 ENDP  ; |?SurfaceSize@DDGPESurf@@UAAHXZ|, DDGPESurf::SurfaceSize

	EXPORT	|??1OMAPDDGPESurface@@UAA@XZ|		; OMAPDDGPESurface::~OMAPDDGPESurface
	IMPORT	|??3@YAXPAX@Z|				; operator delete

  00000			 AREA	 |.pdata|, PDATA
|$T42842| DCD	|$LN6@scalar|
	DCD	0x40001104
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??_GOMAPDDGPESurface@@UAAPAXI@Z| PROC	; OMAPDDGPESurface::`scalar deleting destructor'
  00000		 |$LN6@scalar|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M42839|
  00010	e59d000c	 ldr         r0, [sp, #0xC]
  00014	eb000000	 bl          |??1OMAPDDGPESurface@@UAA@XZ|
  00018	e59d3010	 ldr         r3, [sp, #0x10]
  0001c	e3130001	 tst         r3, #1
  00020	0a000001	 beq         |$LN1@scalar|
  00024	e59d000c	 ldr         r0, [sp, #0xC]
  00028	eb000000	 bl          |??3@YAXPAX@Z|
  0002c		 |$LN1@scalar|
  0002c	e59d300c	 ldr         r3, [sp, #0xC]
  00030	e58d3000	 str         r3, [sp]
  00034	e59d0000	 ldr         r0, [sp]
  00038	e28dd004	 add         sp, sp, #4
  0003c	e89d6000	 ldmia       sp, {sp, lr}
  00040	e12fff1e	 bx          lr
  00044		 |$M42840|

			 ENDP  ; |??_GOMAPDDGPESurface@@UAAPAXI@Z|, OMAPDDGPESurface::`scalar deleting destructor'

	EXPORT	|??_C@_1HE@CFBNBBGE@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AAS?$AAu?$AAr?$AAf?$AAa?$AAc?$AAe?$AA?5?$AA?$CI?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?$CJ?$AA?3?$AA?5?$AAv?$AAa?$AAd?$AAd?$AAr?$AA?5@| [ DATA ] ; `string'
	IMPORT	|?PixelFormatToGPEFormat@OMAPDDGPE@@SA?AW4EGPEFormat@@W4OMAP_DSS_PIXELFORMAT@@@Z| ; OMAPDDGPE::PixelFormatToGPEFormat
	IMPORT	|?PixelFormatToDDGPEFormat@OMAPDDGPE@@SA?AW4EDDGPEPixelFormat@@W4OMAP_DSS_PIXELFORMAT@@@Z| ; OMAPDDGPE::PixelFormatToDDGPEFormat

  000b8			 AREA	 |.pdata|, PDATA
|$T42855| DCD	|$LN7@OMAPDDGPES@2|
	DCD	0x4000d804
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\ddgpe\omap_ddsurf.cpp

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HE@CFBNBBGE@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AAS?$AAu?$AAr?$AAf?$AAa?$AAc?$AAe?$AA?5?$AA?$CI?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?$CJ?$AA?3?$AA?5?$AAv?$AAa?$AAd?$AAd?$AAr?$AA?5@| DCB "O"
	DCB	0x0, "M", 0x0, "A", 0x0, "P", 0x0, "D", 0x0, "D", 0x0, "G"
	DCB	0x0, "P", 0x0, "E", 0x0, "S", 0x0, "u", 0x0, "r", 0x0, "f"
	DCB	0x0, "a", 0x0, "c", 0x0, "e", 0x0, " ", 0x0, "(", 0x0, "a"
	DCB	0x0, "l", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, ")", 0x0, ":"
	DCB	0x0, " ", 0x0, "v", 0x0, "a", 0x0, "d", 0x0, "d", 0x0, "r"
	DCB	0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "8", 0x0, "x", 0x0, " ", 0x0, "p", 0x0, "a"
	DCB	0x0, "d", 0x0, "d", 0x0, "r", 0x0, " ", 0x0, "=", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  02760			 AREA	 |.text|, CODE, ARM

  02760		 |??0OMAPDDGPESurface@@QAA@PAVOMAPSurfaceManager@@PAVOMAPSurface@@@Z| PROC ; OMAPDDGPESurface::OMAPDDGPESurface

; 1068 : {

  02760		 |$LN7@OMAPDDGPES@2|
  02760	e1a0c00d	 mov         r12, sp
  02764	e92d0007	 stmdb       sp!, {r0 - r2}
  02768	e92d5010	 stmdb       sp!, {r4, r12, lr}
  0276c	e24dd05c	 sub         sp, sp, #0x5C
  02770		 |$M42852|
  02770	e59d0068	 ldr         r0, [sp, #0x68]
  02774	eb000000	 bl          |??0DDGPESurf@@QAA@XZ|
  02778	e58d001c	 str         r0, [sp, #0x1C]
  0277c	e59f2338	 ldr         r2, [pc, #0x338]
  02780	e59d3068	 ldr         r3, [sp, #0x68]
  02784	e5832000	 str         r2, [r3]

; 1069 :     //  Set the surface pointer to the allocated OMAP surface
; 1070 :     m_pSurface = pSurface;

  02788	e59d3068	 ldr         r3, [sp, #0x68]
  0278c	e283207c	 add         r2, r3, #0x7C
  02790	e59d3070	 ldr         r3, [sp, #0x70]
  02794	e5823000	 str         r3, [r2]

; 1071 :     m_pParentSurface = this;

  02798	e59d3068	 ldr         r3, [sp, #0x68]
  0279c	e2832084	 add         r2, r3, #0x84
  027a0	e59d3068	 ldr         r3, [sp, #0x68]
  027a4	e5823000	 str         r3, [r2]

; 1072 :     m_pAssocSurface = NULL;

  027a8	e59d3068	 ldr         r3, [sp, #0x68]
  027ac	e2832080	 add         r2, r3, #0x80
  027b0	e3a03000	 mov         r3, #0
  027b4	e5823000	 str         r3, [r2]

; 1073 :     
; 1074 :     //  Initialize the DDGPESurf parent class
; 1075 :     DDGPESurf::Init( m_pSurface->Width(), 
; 1076 :                      m_pSurface->Height(), 
; 1077 :                      m_pSurface->VirtualAddr(), 
; 1078 :                      m_pSurface->Stride(), 
; 1079 :                      OMAPDDGPE::PixelFormatToGPEFormat(m_pSurface->PixelFormat()), 
; 1080 :                      OMAPDDGPE::PixelFormatToDDGPEFormat(m_pSurface->PixelFormat()) );

  027b8	e59d3068	 ldr         r3, [sp, #0x68]
  027bc	e283307c	 add         r3, r3, #0x7C
  027c0	e5930000	 ldr         r0, [r3]
  027c4	eb000000	 bl          |?PixelFormat@OMAPSurface@@QAA?AW4OMAP_DSS_PIXELFORMAT@@XZ|
  027c8	e58d0020	 str         r0, [sp, #0x20]
  027cc	e59d0020	 ldr         r0, [sp, #0x20]
  027d0	eb000000	 bl          |?PixelFormatToDDGPEFormat@OMAPDDGPE@@SA?AW4EDDGPEPixelFormat@@W4OMAP_DSS_PIXELFORMAT@@@Z|
  027d4	e58d0024	 str         r0, [sp, #0x24]
  027d8	e59d3068	 ldr         r3, [sp, #0x68]
  027dc	e283307c	 add         r3, r3, #0x7C
  027e0	e5930000	 ldr         r0, [r3]
  027e4	eb000000	 bl          |?PixelFormat@OMAPSurface@@QAA?AW4OMAP_DSS_PIXELFORMAT@@XZ|
  027e8	e58d0028	 str         r0, [sp, #0x28]
  027ec	e59d0028	 ldr         r0, [sp, #0x28]
  027f0	eb000000	 bl          |?PixelFormatToGPEFormat@OMAPDDGPE@@SA?AW4EGPEFormat@@W4OMAP_DSS_PIXELFORMAT@@@Z|
  027f4	e58d002c	 str         r0, [sp, #0x2C]
  027f8	e3a01000	 mov         r1, #0
  027fc	e59d3068	 ldr         r3, [sp, #0x68]
  02800	e283307c	 add         r3, r3, #0x7C
  02804	e5932000	 ldr         r2, [r3]
  02808	e59d3068	 ldr         r3, [sp, #0x68]
  0280c	e283307c	 add         r3, r3, #0x7C
  02810	e5930000	 ldr         r0, [r3]
  02814	e5923000	 ldr         r3, [r2]
  02818	e2833010	 add         r3, r3, #0x10
  0281c	e5933000	 ldr         r3, [r3]
  02820	e1a0e00f	 mov         lr, pc
  02824	e12fff13	 bx          r3
  02828	e58d0030	 str         r0, [sp, #0x30]
  0282c	e59d3068	 ldr         r3, [sp, #0x68]
  02830	e283307c	 add         r3, r3, #0x7C
  02834	e5932000	 ldr         r2, [r3]
  02838	e59d3068	 ldr         r3, [sp, #0x68]
  0283c	e283307c	 add         r3, r3, #0x7C
  02840	e5930000	 ldr         r0, [r3]
  02844	e5923000	 ldr         r3, [r2]
  02848	e2833004	 add         r3, r3, #4
  0284c	e5933000	 ldr         r3, [r3]
  02850	e1a0e00f	 mov         lr, pc
  02854	e12fff13	 bx          r3
  02858	e58d0034	 str         r0, [sp, #0x34]
  0285c	e3a01000	 mov         r1, #0
  02860	e59d3068	 ldr         r3, [sp, #0x68]
  02864	e283307c	 add         r3, r3, #0x7C
  02868	e5932000	 ldr         r2, [r3]
  0286c	e59d3068	 ldr         r3, [sp, #0x68]
  02870	e283307c	 add         r3, r3, #0x7C
  02874	e5930000	 ldr         r0, [r3]
  02878	e5923000	 ldr         r3, [r2]
  0287c	e283300c	 add         r3, r3, #0xC
  02880	e5933000	 ldr         r3, [r3]
  02884	e1a0e00f	 mov         lr, pc
  02888	e12fff13	 bx          r3
  0288c	e58d0038	 str         r0, [sp, #0x38]
  02890	e3a01000	 mov         r1, #0
  02894	e59d3068	 ldr         r3, [sp, #0x68]
  02898	e283307c	 add         r3, r3, #0x7C
  0289c	e5932000	 ldr         r2, [r3]
  028a0	e59d3068	 ldr         r3, [sp, #0x68]
  028a4	e283307c	 add         r3, r3, #0x7C
  028a8	e5930000	 ldr         r0, [r3]
  028ac	e5923000	 ldr         r3, [r2]
  028b0	e2833008	 add         r3, r3, #8
  028b4	e5933000	 ldr         r3, [r3]
  028b8	e1a0e00f	 mov         lr, pc
  028bc	e12fff13	 bx          r3
  028c0	e58d003c	 str         r0, [sp, #0x3C]
  028c4	e59d3024	 ldr         r3, [sp, #0x24]
  028c8	e58d3008	 str         r3, [sp, #8]
  028cc	e59d302c	 ldr         r3, [sp, #0x2C]
  028d0	e58d3004	 str         r3, [sp, #4]
  028d4	e59d3030	 ldr         r3, [sp, #0x30]
  028d8	e58d3000	 str         r3, [sp]
  028dc	e59d3034	 ldr         r3, [sp, #0x34]
  028e0	e59d2038	 ldr         r2, [sp, #0x38]
  028e4	e59d103c	 ldr         r1, [sp, #0x3C]
  028e8	e59d0068	 ldr         r0, [sp, #0x68]
  028ec	eb000000	 bl          |?Init@DDGPESurf@@UAAXHHPAXHW4EGPEFormat@@W4EDDGPEPixelFormat@@@Z|

; 1081 :     
; 1082 :     //  Set surface attributes
; 1083 :     m_fInVideoMemory = TRUE;

  028f0	e59d3068	 ldr         r3, [sp, #0x68]
  028f4	e2832020	 add         r2, r3, #0x20
  028f8	e3a03001	 mov         r3, #1
  028fc	e5823000	 str         r3, [r2]

; 1084 :     m_fInUserMemory = FALSE;

  02900	e59d3068	 ldr         r3, [sp, #0x68]
  02904	e2832024	 add         r2, r3, #0x24
  02908	e3a03000	 mov         r3, #0
  0290c	e5823000	 str         r3, [r2]

; 1085 :     m_dwSurfaceSize = m_pSurface->Height() * m_pSurface->Stride();

  02910	e3a01000	 mov         r1, #0
  02914	e59d3068	 ldr         r3, [sp, #0x68]
  02918	e283307c	 add         r3, r3, #0x7C
  0291c	e5932000	 ldr         r2, [r3]
  02920	e59d3068	 ldr         r3, [sp, #0x68]
  02924	e283307c	 add         r3, r3, #0x7C
  02928	e5930000	 ldr         r0, [r3]
  0292c	e5923000	 ldr         r3, [r2]
  02930	e283300c	 add         r3, r3, #0xC
  02934	e5933000	 ldr         r3, [r3]
  02938	e1a0e00f	 mov         lr, pc
  0293c	e12fff13	 bx          r3
  02940	e58d0040	 str         r0, [sp, #0x40]
  02944	e3a01000	 mov         r1, #0
  02948	e59d3068	 ldr         r3, [sp, #0x68]
  0294c	e283307c	 add         r3, r3, #0x7C
  02950	e5932000	 ldr         r2, [r3]
  02954	e59d3068	 ldr         r3, [sp, #0x68]
  02958	e283307c	 add         r3, r3, #0x7C
  0295c	e5930000	 ldr         r0, [r3]
  02960	e5923000	 ldr         r3, [r2]
  02964	e2833010	 add         r3, r3, #0x10
  02968	e5933000	 ldr         r3, [r3]
  0296c	e1a0e00f	 mov         lr, pc
  02970	e12fff13	 bx          r3
  02974	e58d0044	 str         r0, [sp, #0x44]
  02978	e59d1040	 ldr         r1, [sp, #0x40]
  0297c	e59d3044	 ldr         r3, [sp, #0x44]
  02980	e0020391	 mul         r2, r1, r3
  02984	e59d3068	 ldr         r3, [sp, #0x68]
  02988	e283305c	 add         r3, r3, #0x5C
  0298c	e5832000	 str         r2, [r3]

; 1086 :     m_nOffsetInVideoMemory = (DWORD)m_pSurface->VirtualAddr() - (DWORD)pSurfaceMgr->VirtualBaseAddr();

  02990	e59d3068	 ldr         r3, [sp, #0x68]
  02994	e283307c	 add         r3, r3, #0x7C
  02998	e5932000	 ldr         r2, [r3]
  0299c	e59d3068	 ldr         r3, [sp, #0x68]
  029a0	e283307c	 add         r3, r3, #0x7C
  029a4	e5930000	 ldr         r0, [r3]
  029a8	e5923000	 ldr         r3, [r2]
  029ac	e2833004	 add         r3, r3, #4
  029b0	e5933000	 ldr         r3, [r3]
  029b4	e1a0e00f	 mov         lr, pc
  029b8	e12fff13	 bx          r3
  029bc	e58d0048	 str         r0, [sp, #0x48]
  029c0	e59d306c	 ldr         r3, [sp, #0x6C]
  029c4	e5933000	 ldr         r3, [r3]
  029c8	e2833010	 add         r3, r3, #0x10
  029cc	e59d006c	 ldr         r0, [sp, #0x6C]
  029d0	e5933000	 ldr         r3, [r3]
  029d4	e1a0e00f	 mov         lr, pc
  029d8	e12fff13	 bx          r3
  029dc	e58d004c	 str         r0, [sp, #0x4C]
  029e0	e59d2048	 ldr         r2, [sp, #0x48]
  029e4	e59d304c	 ldr         r3, [sp, #0x4C]
  029e8	e0422003	 sub         r2, r2, r3
  029ec	e59d3068	 ldr         r3, [sp, #0x68]
  029f0	e2833034	 add         r3, r3, #0x34
  029f4	e5832000	 str         r2, [r3]

; 1087 : 
; 1088 :     
; 1089 :     DEBUGMSG(GPE_ZONE_VIDEOMEMORY, (TEXT("OMAPDDGPESurface (alloc): vaddr = 0x%08x paddr = 0x%08x\r\n"), m_pSurface->VirtualAddr(), m_pSurface->PhysicalAddr()));

  029f8	e59f30b8	 ldr         r3, [pc, #0xB8]
  029fc	e5933440	 ldr         r3, [r3, #0x440]
  02a00	e3130901	 tst         r3, #1, 18
  02a04	0a000022	 beq         |$LN3@OMAPDDGPES@2|
  02a08	e3a03000	 mov         r3, #0
  02a0c	e3a02000	 mov         r2, #0
  02a10	e3a01000	 mov         r1, #0
  02a14	e59d0068	 ldr         r0, [sp, #0x68]
  02a18	e280007c	 add         r0, r0, #0x7C
  02a1c	e590e000	 ldr         lr, [r0]
  02a20	e59d0068	 ldr         r0, [sp, #0x68]
  02a24	e280007c	 add         r0, r0, #0x7C
  02a28	e5904000	 ldr         r4, [r0]
  02a2c	e59e0000	 ldr         r0, [lr]
  02a30	e280e014	 add         lr, r0, #0x14
  02a34	e1a00004	 mov         r0, r4
  02a38	e59e4000	 ldr         r4, [lr]
  02a3c	e1a0e00f	 mov         lr, pc
  02a40	e12fff14	 bx          r4
  02a44	e58d0050	 str         r0, [sp, #0x50]
  02a48	e59d3068	 ldr         r3, [sp, #0x68]
  02a4c	e283307c	 add         r3, r3, #0x7C
  02a50	e5932000	 ldr         r2, [r3]
  02a54	e59d3068	 ldr         r3, [sp, #0x68]
  02a58	e283307c	 add         r3, r3, #0x7C
  02a5c	e5930000	 ldr         r0, [r3]
  02a60	e5923000	 ldr         r3, [r2]
  02a64	e2833004	 add         r3, r3, #4
  02a68	e5933000	 ldr         r3, [r3]
  02a6c	e1a0e00f	 mov         lr, pc
  02a70	e12fff13	 bx          r3
  02a74	e58d0054	 str         r0, [sp, #0x54]
  02a78	e59d2050	 ldr         r2, [sp, #0x50]
  02a7c	e59d1054	 ldr         r1, [sp, #0x54]
  02a80	e59f002c	 ldr         r0, [pc, #0x2C]
  02a84	eb000000	 bl          NKDbgPrintfW
  02a88	e3a03001	 mov         r3, #1
  02a8c	e58d3058	 str         r3, [sp, #0x58]
  02a90	ea000001	 b           |$LN4@OMAPDDGPES@2|
  02a94		 |$LN3@OMAPDDGPES@2|
  02a94	e3a03000	 mov         r3, #0
  02a98	e58d3058	 str         r3, [sp, #0x58]
  02a9c		 |$LN4@OMAPDDGPES@2|

; 1090 :     
; 1091 : }

  02a9c	e59d3068	 ldr         r3, [sp, #0x68]
  02aa0	e58d3018	 str         r3, [sp, #0x18]
  02aa4	e59d0018	 ldr         r0, [sp, #0x18]
  02aa8	e28dd05c	 add         sp, sp, #0x5C
  02aac	e89d6010	 ldmia       sp, {r4, sp, lr}
  02ab0	e12fff1e	 bx          lr
  02ab4		 |$LN8@OMAPDDGPES@2|
  02ab4		 |$LN9@OMAPDDGPES@2|
  02ab4	00000000	 DCD         |??_C@_1HE@CFBNBBGE@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AAS?$AAu?$AAr?$AAf?$AAa?$AAc?$AAe?$AA?5?$AA?$CI?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?$CJ?$AA?3?$AA?5?$AAv?$AAa?$AAd?$AAd?$AAr?$AA?5@|
  02ab8		 |$LN10@OMAPDDGPES@2|
  02ab8	00000000	 DCD         |dpCurSettings|
  02abc		 |$LN11@OMAPDDGPES@2|
  02abc	00000000	 DCD         |??_7OMAPDDGPESurface@@6B@|
  02ac0		 |$M42853|

			 ENDP  ; |??0OMAPDDGPESurface@@QAA@PAVOMAPSurfaceManager@@PAVOMAPSurface@@@Z|, OMAPDDGPESurface::OMAPDDGPESurface

	EXPORT	|?Orientation@OMAPSurface@@QAA?AW4OMAP_SURF_ORIENTATION@@XZ| ; OMAPSurface::Orientation

  000c0			 AREA	 |.pdata|, PDATA
|$T42865| DCD	|$LN6@SetOrienta|
	DCD	0x40005504
; Function compile flags: /Odtp

  02ac0			 AREA	 |.text|, CODE, ARM

  02ac0		 |?SetOrientation@OMAPDDGPESurface@@UAAHW4OMAP_SURF_ORIENTATION@@@Z| PROC ; OMAPDDGPESurface::SetOrientation

; 1098 : {

  02ac0		 |$LN6@SetOrienta|
  02ac0	e1a0c00d	 mov         r12, sp
  02ac4	e92d0003	 stmdb       sp!, {r0, r1}
  02ac8	e92d5000	 stmdb       sp!, {r12, lr}
  02acc	e24dd014	 sub         sp, sp, #0x14
  02ad0		 |$M42862|

; 1099 :     //  Check current orientation of the OMAP surface; do nothing if the same
; 1100 :     if( eOrientation == m_pSurface->Orientation() )

  02ad0	e59d301c	 ldr         r3, [sp, #0x1C]
  02ad4	e283307c	 add         r3, r3, #0x7C
  02ad8	e5930000	 ldr         r0, [r3]
  02adc	eb000000	 bl          |?Orientation@OMAPSurface@@QAA?AW4OMAP_SURF_ORIENTATION@@XZ|
  02ae0	e58d0004	 str         r0, [sp, #4]
  02ae4	e59d2020	 ldr         r2, [sp, #0x20]
  02ae8	e59d3004	 ldr         r3, [sp, #4]
  02aec	e1520003	 cmp         r2, r3
  02af0	1a000002	 bne         |$LN1@SetOrienta|

; 1101 :         return TRUE;

  02af4	e3a03001	 mov         r3, #1
  02af8	e58d3000	 str         r3, [sp]
  02afc	ea000040	 b           |$LN2@SetOrienta|
  02b00		 |$LN1@SetOrienta|

; 1102 : 
; 1103 :     //  Chage OMAP surface orientation
; 1104 :     m_pSurface->SetOrientation( eOrientation );

  02b00	e59d1020	 ldr         r1, [sp, #0x20]
  02b04	e59d301c	 ldr         r3, [sp, #0x1C]
  02b08	e283307c	 add         r3, r3, #0x7C
  02b0c	e5932000	 ldr         r2, [r3]
  02b10	e59d301c	 ldr         r3, [sp, #0x1C]
  02b14	e283307c	 add         r3, r3, #0x7C
  02b18	e5930000	 ldr         r0, [r3]
  02b1c	e5923000	 ldr         r3, [r2]
  02b20	e2833038	 add         r3, r3, #0x38
  02b24	e5933000	 ldr         r3, [r3]
  02b28	e1a0e00f	 mov         lr, pc
  02b2c	e12fff13	 bx          r3

; 1105 :             
; 1106 :     //  Update DDGPE width, height and stride
; 1107 :     m_nWidth = m_pSurface->Width();

  02b30	e3a01000	 mov         r1, #0
  02b34	e59d301c	 ldr         r3, [sp, #0x1C]
  02b38	e283307c	 add         r3, r3, #0x7C
  02b3c	e5932000	 ldr         r2, [r3]
  02b40	e59d301c	 ldr         r3, [sp, #0x1C]
  02b44	e283307c	 add         r3, r3, #0x7C
  02b48	e5930000	 ldr         r0, [r3]
  02b4c	e5923000	 ldr         r3, [r2]
  02b50	e2833008	 add         r3, r3, #8
  02b54	e5933000	 ldr         r3, [r3]
  02b58	e1a0e00f	 mov         lr, pc
  02b5c	e12fff13	 bx          r3
  02b60	e58d0008	 str         r0, [sp, #8]
  02b64	e59d301c	 ldr         r3, [sp, #0x1C]
  02b68	e283202c	 add         r2, r3, #0x2C
  02b6c	e59d3008	 ldr         r3, [sp, #8]
  02b70	e5823000	 str         r3, [r2]

; 1108 :     m_nHeight = m_pSurface->Height();

  02b74	e3a01000	 mov         r1, #0
  02b78	e59d301c	 ldr         r3, [sp, #0x1C]
  02b7c	e283307c	 add         r3, r3, #0x7C
  02b80	e5932000	 ldr         r2, [r3]
  02b84	e59d301c	 ldr         r3, [sp, #0x1C]
  02b88	e283307c	 add         r3, r3, #0x7C
  02b8c	e5930000	 ldr         r0, [r3]
  02b90	e5923000	 ldr         r3, [r2]
  02b94	e283300c	 add         r3, r3, #0xC
  02b98	e5933000	 ldr         r3, [r3]
  02b9c	e1a0e00f	 mov         lr, pc
  02ba0	e12fff13	 bx          r3
  02ba4	e58d000c	 str         r0, [sp, #0xC]
  02ba8	e59d301c	 ldr         r3, [sp, #0x1C]
  02bac	e2832030	 add         r2, r3, #0x30
  02bb0	e59d300c	 ldr         r3, [sp, #0xC]
  02bb4	e5823000	 str         r3, [r2]

; 1109 :     m_nStrideBytes = m_pSurface->Stride();

  02bb8	e3a01000	 mov         r1, #0
  02bbc	e59d301c	 ldr         r3, [sp, #0x1C]
  02bc0	e283307c	 add         r3, r3, #0x7C
  02bc4	e5932000	 ldr         r2, [r3]
  02bc8	e59d301c	 ldr         r3, [sp, #0x1C]
  02bcc	e283307c	 add         r3, r3, #0x7C
  02bd0	e5930000	 ldr         r0, [r3]
  02bd4	e5923000	 ldr         r3, [r2]
  02bd8	e2833010	 add         r3, r3, #0x10
  02bdc	e5933000	 ldr         r3, [r3]
  02be0	e1a0e00f	 mov         lr, pc
  02be4	e12fff13	 bx          r3
  02be8	e58d0010	 str         r0, [sp, #0x10]
  02bec	e59d301c	 ldr         r3, [sp, #0x1C]
  02bf0	e2832008	 add         r2, r3, #8
  02bf4	e59d3010	 ldr         r3, [sp, #0x10]
  02bf8	e5823000	 str         r3, [r2]

; 1110 : 
; 1111 :     return TRUE;

  02bfc	e3a03001	 mov         r3, #1
  02c00	e58d3000	 str         r3, [sp]
  02c04		 |$LN2@SetOrienta|

; 1112 : }

  02c04	e59d0000	 ldr         r0, [sp]
  02c08	e28dd014	 add         sp, sp, #0x14
  02c0c	e89d6000	 ldmia       sp, {sp, lr}
  02c10	e12fff1e	 bx          lr
  02c14		 |$M42863|

			 ENDP  ; |?SetOrientation@OMAPDDGPESurface@@UAAHW4OMAP_SURF_ORIENTATION@@@Z|, OMAPDDGPESurface::SetOrientation

; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\inc\dssai.h

  00000			 AREA	 |.pdata|, PDATA
|$T42871| DCD	|$LN5@Orientatio|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Orientation@OMAPSurface@@QAA?AW4OMAP_SURF_ORIENTATION@@XZ| PROC ; OMAPSurface::Orientation

; 764  :     OMAP_SURF_ORIENTATION   Orientation() { return m_eOrientation; }

  00000		 |$LN5@Orientatio|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M42868|
  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e283300c	 add         r3, r3, #0xC
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3000	 str         r3, [sp]
  00020	e59d0000	 ldr         r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M42869|

			 ENDP  ; |?Orientation@OMAPSurface@@QAA?AW4OMAP_SURF_ORIENTATION@@XZ|, OMAPSurface::Orientation

	EXPORT	|??_C@_1HC@CDHOADCN@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AAS?$AAu?$AAr?$AAf?$AAa?$AAc?$AAe?$AA?5?$AA?$CI?$AAf?$AAr?$AAe?$AAe?$AA?$CJ?$AA?3?$AA?5?$AAv?$AAa?$AAd?$AAd?$AAr?$AA?5?$AA?$DN@| [ DATA ] ; `string'
	IMPORT	|??1DDGPESurf@@UAA@XZ|			; DDGPESurf::~DDGPESurf

  000c8			 AREA	 |.pdata|, PDATA
|$T42888| DCD	|$LN13@OMAPDDGPES@3|
	DCD	0x40006e04
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\ddgpe\omap_ddsurf.cpp

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HC@CDHOADCN@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AAS?$AAu?$AAr?$AAf?$AAa?$AAc?$AAe?$AA?5?$AA?$CI?$AAf?$AAr?$AAe?$AAe?$AA?$CJ?$AA?3?$AA?5?$AAv?$AAa?$AAd?$AAd?$AAr?$AA?5?$AA?$DN@| DCB "O"
	DCB	0x0, "M", 0x0, "A", 0x0, "P", 0x0, "D", 0x0, "D", 0x0, "G"
	DCB	0x0, "P", 0x0, "E", 0x0, "S", 0x0, "u", 0x0, "r", 0x0, "f"
	DCB	0x0, "a", 0x0, "c", 0x0, "e", 0x0, " ", 0x0, "(", 0x0, "f"
	DCB	0x0, "r", 0x0, "e", 0x0, "e", 0x0, ")", 0x0, ":", 0x0, " "
	DCB	0x0, "v", 0x0, "a", 0x0, "d", 0x0, "d", 0x0, "r", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, " ", 0x0, "p", 0x0, "a", 0x0, "d"
	DCB	0x0, "d", 0x0, "r", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  02c14			 AREA	 |.text|, CODE, ARM

  02c14		 |??1OMAPDDGPESurface@@UAA@XZ| PROC	; OMAPDDGPESurface::~OMAPDDGPESurface

; 1116 : {

  02c14		 |$LN13@OMAPDDGPES@3|
  02c14	e1a0c00d	 mov         r12, sp
  02c18	e92d0001	 stmdb       sp!, {r0}
  02c1c	e92d5010	 stmdb       sp!, {r4, r12, lr}
  02c20	e24dd02c	 sub         sp, sp, #0x2C
  02c24		 |$M42885|
  02c24	e59f219c	 ldr         r2, [pc, #0x19C]
  02c28	e59d3038	 ldr         r3, [sp, #0x38]
  02c2c	e5832000	 str         r2, [r3]

; 1117 :     //  Free the video memory for this surface
; 1118 :     if( m_pSurface )

  02c30	e59d3038	 ldr         r3, [sp, #0x38]
  02c34	e283307c	 add         r3, r3, #0x7C
  02c38	e5933000	 ldr         r3, [r3]
  02c3c	e3530000	 cmp         r3, #0
  02c40	0a000059	 beq         |$LN2@OMAPDDGPES@3|

; 1119 :     {
; 1120 :         DEBUGMSG(GPE_ZONE_VIDEOMEMORY, (TEXT("OMAPDDGPESurface (free): vaddr = 0x%08x paddr = 0x%08x\r\n"), m_pSurface->VirtualAddr(), m_pSurface->PhysicalAddr()));        

  02c44	e59f3178	 ldr         r3, [pc, #0x178]
  02c48	e5933440	 ldr         r3, [r3, #0x440]
  02c4c	e3130901	 tst         r3, #1, 18
  02c50	0a000022	 beq         |$LN5@OMAPDDGPES@3|
  02c54	e3a03000	 mov         r3, #0
  02c58	e3a02000	 mov         r2, #0
  02c5c	e3a01000	 mov         r1, #0
  02c60	e59d0038	 ldr         r0, [sp, #0x38]
  02c64	e280007c	 add         r0, r0, #0x7C
  02c68	e590e000	 ldr         lr, [r0]
  02c6c	e59d0038	 ldr         r0, [sp, #0x38]
  02c70	e280007c	 add         r0, r0, #0x7C
  02c74	e5904000	 ldr         r4, [r0]
  02c78	e59e0000	 ldr         r0, [lr]
  02c7c	e280e014	 add         lr, r0, #0x14
  02c80	e1a00004	 mov         r0, r4
  02c84	e59e4000	 ldr         r4, [lr]
  02c88	e1a0e00f	 mov         lr, pc
  02c8c	e12fff14	 bx          r4
  02c90	e58d0010	 str         r0, [sp, #0x10]
  02c94	e59d3038	 ldr         r3, [sp, #0x38]
  02c98	e283307c	 add         r3, r3, #0x7C
  02c9c	e5932000	 ldr         r2, [r3]
  02ca0	e59d3038	 ldr         r3, [sp, #0x38]
  02ca4	e283307c	 add         r3, r3, #0x7C
  02ca8	e5930000	 ldr         r0, [r3]
  02cac	e5923000	 ldr         r3, [r2]
  02cb0	e2833004	 add         r3, r3, #4
  02cb4	e5933000	 ldr         r3, [r3]
  02cb8	e1a0e00f	 mov         lr, pc
  02cbc	e12fff13	 bx          r3
  02cc0	e58d0014	 str         r0, [sp, #0x14]
  02cc4	e59d2010	 ldr         r2, [sp, #0x10]
  02cc8	e59d1014	 ldr         r1, [sp, #0x14]
  02ccc	e59f00ec	 ldr         r0, [pc, #0xEC]
  02cd0	eb000000	 bl          NKDbgPrintfW
  02cd4	e3a03001	 mov         r3, #1
  02cd8	e58d3018	 str         r3, [sp, #0x18]
  02cdc	ea000001	 b           |$LN6@OMAPDDGPES@3|
  02ce0		 |$LN5@OMAPDDGPES@3|
  02ce0	e3a03000	 mov         r3, #0
  02ce4	e58d3018	 str         r3, [sp, #0x18]
  02ce8		 |$LN6@OMAPDDGPES@3|

; 1121 :         delete m_pSurface;        

  02ce8	e59d3038	 ldr         r3, [sp, #0x38]
  02cec	e283307c	 add         r3, r3, #0x7C
  02cf0	e5933000	 ldr         r3, [r3]
  02cf4	e58d3004	 str         r3, [sp, #4]
  02cf8	e59d3004	 ldr         r3, [sp, #4]
  02cfc	e58d3000	 str         r3, [sp]
  02d00	e59d3000	 ldr         r3, [sp]
  02d04	e3530000	 cmp         r3, #0
  02d08	0a00000a	 beq         |$LN7@OMAPDDGPES@3|
  02d0c	e3a01001	 mov         r1, #1
  02d10	e59d3000	 ldr         r3, [sp]
  02d14	e5933000	 ldr         r3, [r3]
  02d18	e59d0000	 ldr         r0, [sp]
  02d1c	e5933000	 ldr         r3, [r3]
  02d20	e1a0e00f	 mov         lr, pc
  02d24	e12fff13	 bx          r3
  02d28	e58d001c	 str         r0, [sp, #0x1C]
  02d2c	e59d301c	 ldr         r3, [sp, #0x1C]
  02d30	e58d3020	 str         r3, [sp, #0x20]
  02d34	ea000001	 b           |$LN8@OMAPDDGPES@3|
  02d38		 |$LN7@OMAPDDGPES@3|
  02d38	e3a03000	 mov         r3, #0
  02d3c	e58d3020	 str         r3, [sp, #0x20]
  02d40		 |$LN8@OMAPDDGPES@3|

; 1122 :         if (m_pAssocSurface) delete m_pAssocSurface;

  02d40	e59d3038	 ldr         r3, [sp, #0x38]
  02d44	e2833080	 add         r3, r3, #0x80
  02d48	e5933000	 ldr         r3, [r3]
  02d4c	e3530000	 cmp         r3, #0
  02d50	0a000015	 beq         |$LN1@OMAPDDGPES@3|
  02d54	e59d3038	 ldr         r3, [sp, #0x38]
  02d58	e2833080	 add         r3, r3, #0x80
  02d5c	e5933000	 ldr         r3, [r3]
  02d60	e58d300c	 str         r3, [sp, #0xC]
  02d64	e59d300c	 ldr         r3, [sp, #0xC]
  02d68	e58d3008	 str         r3, [sp, #8]
  02d6c	e59d3008	 ldr         r3, [sp, #8]
  02d70	e3530000	 cmp         r3, #0
  02d74	0a00000a	 beq         |$LN9@OMAPDDGPES@3|
  02d78	e3a01001	 mov         r1, #1
  02d7c	e59d3008	 ldr         r3, [sp, #8]
  02d80	e5933000	 ldr         r3, [r3]
  02d84	e59d0008	 ldr         r0, [sp, #8]
  02d88	e5933000	 ldr         r3, [r3]
  02d8c	e1a0e00f	 mov         lr, pc
  02d90	e12fff13	 bx          r3
  02d94	e58d0024	 str         r0, [sp, #0x24]
  02d98	e59d3024	 ldr         r3, [sp, #0x24]
  02d9c	e58d3028	 str         r3, [sp, #0x28]
  02da0	ea000001	 b           |$LN10@OMAPDDGPES@3|
  02da4		 |$LN9@OMAPDDGPES@3|
  02da4	e3a03000	 mov         r3, #0
  02da8	e58d3028	 str         r3, [sp, #0x28]
  02dac		 |$LN10@OMAPDDGPES@3|
  02dac		 |$LN1@OMAPDDGPES@3|
  02dac		 |$LN2@OMAPDDGPES@3|

; 1123 :     }
; 1124 : }

  02dac	e59d0038	 ldr         r0, [sp, #0x38]
  02db0	eb000000	 bl          |??1DDGPESurf@@UAA@XZ|
  02db4	e28dd02c	 add         sp, sp, #0x2C
  02db8	e89d6010	 ldmia       sp, {r4, sp, lr}
  02dbc	e12fff1e	 bx          lr
  02dc0		 |$LN14@OMAPDDGPES@3|
  02dc0		 |$LN15@OMAPDDGPES@3|
  02dc0	00000000	 DCD         |??_C@_1HC@CDHOADCN@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAD?$AAG?$AAP?$AAE?$AAS?$AAu?$AAr?$AAf?$AAa?$AAc?$AAe?$AA?5?$AA?$CI?$AAf?$AAr?$AAe?$AAe?$AA?$CJ?$AA?3?$AA?5?$AAv?$AAa?$AAd?$AAd?$AAr?$AA?5?$AA?$DN@|
  02dc4		 |$LN16@OMAPDDGPES@3|
  02dc4	00000000	 DCD         |dpCurSettings|
  02dc8		 |$LN17@OMAPDDGPES@3|
  02dc8	00000000	 DCD         |??_7OMAPDDGPESurface@@6B@|
  02dcc		 |$M42886|

			 ENDP  ; |??1OMAPDDGPESurface@@UAA@XZ|, OMAPDDGPESurface::~OMAPDDGPESurface

	END
