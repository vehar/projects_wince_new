; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\DSS\DDGPE\omap_optblt.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.rdata|, DATA, READONLY
|FourCCDescriptionTable| DCD 0x32595559
	DCD	0x10
	DCD	0xff00ff
	DCD	0xff00
	DCD	0xff000000
	DCD	0x56595559
	DCD	0x10
	DCD	0xff00ff
	DCD	0xff00
	DCD	0xff000000
	DCD	0x55595659
	DCD	0x10
	DCD	0xff00ff00
	DCD	0xff
	DCD	0xff0000
	DCD	0x59565955
	DCD	0x10
	DCD	0xff00ff00
	DCD	0xff
	DCD	0xff0000
	DCD	0x36315659
	DCD	0x10
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x32315659
	DCD	0xc
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x3231564e
	DCD	0xc
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x30323449
	DCD	0xc
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x56555949
	DCD	0xc
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	EXPORT	|??_C@_1CM@IPLALGAE@?$AAb?$AAl?$AAe?$AAn?$AAd?$AAF?$AAu?$AAn?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BM@MMIHMBGA@?$AAi?$AAM?$AAo?$AAd?$AAe?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CC@OONCLEGI@?$AAp?$AAC?$AAo?$AAn?$AAv?$AAe?$AAr?$AAt?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CA@FFPBLBKH@?$AAp?$AAL?$AAo?$AAo?$AAk?$AAu?$AAp?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DI@OLFLPOGG@?$AAx?$AAP?$AAo?$AAs?$AAi?$AAt?$AAi?$AAv?$AAe?$AA?$DN?$AA?$CF?$AAd?$AA?0?$AA?5?$AAy?$AAP?$AAo?$AAs?$AAi?$AAt?$AAi?$AAv?$AAe?$AA?$DN?$AA?$CF?$AAd?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BK@FJKDKNMJ@?$AAr?$AAo?$AAp?$AA4?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CC@FEHFAAAB@?$AAb?$AAl?$AAt?$AAF?$AAl?$AAa?$AAg?$AAs?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CG@LPACICOE@?$AAs?$AAo?$AAl?$AAi?$AAd?$AAC?$AAo?$AAl?$AAo?$AAr?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DG@DOANIEOA@?$AAC?$AAl?$AAi?$AAp?$AA?$DN?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?5?$AA?9?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?5?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GK@GHEADLCD@?$AAB?$AAr?$AAu?$AAs?$AAh?$AA?$CI?$AA?$CF?$AAd?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?5?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?$CJ?$AA?5?$AAx?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$DN?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HO@JFFNINID@?$AAM?$AAa?$AAs?$AAk?$AA?$CI?$AA?$CF?$AAd?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?5?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?$CJ?$AA?5?$AAx?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$DN?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HM@KMEBNDDL@?$AAS?$AAr?$AAc?$AA?$CI?$AA?$CF?$AAd?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?5?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?$CJ?$AA?5?$AAx?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$DN?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?$CJ@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HM@GELAHLGC@?$AAD?$AAs?$AAt?$AA?$CI?$AA?$CF?$AAd?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?5?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?$CJ?$AA?5?$AAx?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$DN?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?$CJ@| [ DATA ] ; `string'
	EXPORT	|?Width@GPESurf@@QAAHXZ|		; GPESurf::Width
	EXPORT	|?Stride@GPESurf@@QAAHXZ|		; GPESurf::Stride
	EXPORT	|?Height@GPESurf@@QAAHXZ|		; GPESurf::Height
	EXPORT	|?Format@GPESurf@@QAA?AW4EGPEFormat@@XZ| ; GPESurf::Format
	EXPORT	|?BytesPerPixel@GPESurf@@QAAHXZ|	; GPESurf::BytesPerPixel
	EXPORT	|?DumpParms@@YAXPAUGPEBltParms@@@Z|	; DumpParms
	IMPORT	|NKDbgPrintfW|

  00000			 AREA	 |.pdata|, PDATA
|$T43051| DCD	|$LN35@DumpParms|
	DCD	0x4001a404
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\ddgpe\omap_optblt.cpp

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@IPLALGAE@?$AAb?$AAl?$AAe?$AAn?$AAd?$AAF?$AAu?$AAn?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@| DCB "b"
	DCB	0x0, "l", 0x0, "e", 0x0, "n", 0x0, "d", 0x0, "F", 0x0, "u"
	DCB	0x0, "n", 0x0, "c", 0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n"
	DCB	0x0, "=", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "X", 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@MMIHMBGA@?$AAi?$AAM?$AAo?$AAd?$AAe?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@| DCB "i"
	DCB	0x0, "M", 0x0, "o", 0x0, "d", 0x0, "e", 0x0, "=", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CC@OONCLEGI@?$AAp?$AAC?$AAo?$AAn?$AAv?$AAe?$AAr?$AAt?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@| DCB "p"
	DCB	0x0, "C", 0x0, "o", 0x0, "n", 0x0, "v", 0x0, "e", 0x0, "r"
	DCB	0x0, "t", 0x0, "=", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "X", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CA@FFPBLBKH@?$AAp?$AAL?$AAo?$AAo?$AAk?$AAu?$AAp?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@| DCB "p"
	DCB	0x0, "L", 0x0, "o", 0x0, "o", 0x0, "k", 0x0, "u", 0x0, "p"
	DCB	0x0, "=", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "X", 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DI@OLFLPOGG@?$AAx?$AAP?$AAo?$AAs?$AAi?$AAt?$AAi?$AAv?$AAe?$AA?$DN?$AA?$CF?$AAd?$AA?0?$AA?5?$AAy?$AAP?$AAo?$AAs?$AAi?$AAt?$AAi?$AAv?$AAe?$AA?$DN?$AA?$CF?$AAd?$AA?6?$AA?$AA@| DCB "x"
	DCB	0x0, "P", 0x0, "o", 0x0, "s", 0x0, "i", 0x0, "t", 0x0, "i"
	DCB	0x0, "v", 0x0, "e", 0x0, "=", 0x0, "%", 0x0, "d", 0x0, ","
	DCB	0x0, " ", 0x0, "y", 0x0, "P", 0x0, "o", 0x0, "s", 0x0, "i"
	DCB	0x0, "t", 0x0, "i", 0x0, "v", 0x0, "e", 0x0, "=", 0x0, "%"
	DCB	0x0, "d", 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BK@FJKDKNMJ@?$AAr?$AAo?$AAp?$AA4?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@| DCB "r"
	DCB	0x0, "o", 0x0, "p", 0x0, "4", 0x0, "=", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CC@FEHFAAAB@?$AAb?$AAl?$AAt?$AAF?$AAl?$AAa?$AAg?$AAs?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@| DCB "b"
	DCB	0x0, "l", 0x0, "t", 0x0, "F", 0x0, "l", 0x0, "a", 0x0, "g"
	DCB	0x0, "s", 0x0, "=", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "X", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CG@LPACICOE@?$AAs?$AAo?$AAl?$AAi?$AAd?$AAC?$AAo?$AAl?$AAo?$AAr?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@| DCB "s"
	DCB	0x0, "o", 0x0, "l", 0x0, "i", 0x0, "d", 0x0, "C", 0x0, "o"
	DCB	0x0, "l", 0x0, "o", 0x0, "r", 0x0, "=", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DG@DOANIEOA@?$AAC?$AAl?$AAi?$AAp?$AA?$DN?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?5?$AA?9?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?5?$AA?6?$AA?$AA@| DCB "C"
	DCB	0x0, "l", 0x0, "i", 0x0, "p", 0x0, "=", 0x0, "(", 0x0, "%"
	DCB	0x0, "d", 0x0, ",", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")"
	DCB	0x0, " ", 0x0, "-", 0x0, " ", 0x0, "(", 0x0, "%", 0x0, "d"
	DCB	0x0, ",", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, " "
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GK@GHEADLCD@?$AAB?$AAr?$AAu?$AAs?$AAh?$AA?$CI?$AA?$CF?$AAd?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?5?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?$CJ?$AA?5?$AAx?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$DN?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF@| DCB "B"
	DCB	0x0, "r", 0x0, "u", 0x0, "s", 0x0, "h", 0x0, "(", 0x0, "%"
	DCB	0x0, "d", 0x0, " ", 0x0, "(", 0x0, "%", 0x0, "d", 0x0, " "
	DCB	0x0, "b", 0x0, "y", 0x0, "t", 0x0, "e", 0x0, "s", 0x0, ")"
	DCB	0x0, " ", 0x0, "x", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")"
	DCB	0x0, "=", 0x0, "(", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, ")", 0x0, ",", 0x0, " ", 0x0, "f"
	DCB	0x0, "m", 0x0, "t", 0x0, "=", 0x0, "%", 0x0, "d", 0x0, " "
	DCB	0x0, "(", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, "b", 0x0, "p"
	DCB	0x0, "p", 0x0, ")", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HO@JFFNINID@?$AAM?$AAa?$AAs?$AAk?$AA?$CI?$AA?$CF?$AAd?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?5?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?$CJ?$AA?5?$AAx?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$DN?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd@| DCB "M"
	DCB	0x0, "a", 0x0, "s", 0x0, "k", 0x0, "(", 0x0, "%", 0x0, "d"
	DCB	0x0, " ", 0x0, "(", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, "b"
	DCB	0x0, "y", 0x0, "t", 0x0, "e", 0x0, "s", 0x0, ")", 0x0, " "
	DCB	0x0, "x", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, "="
	DCB	0x0, "(", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, ")", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "("
	DCB	0x0, "%", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, ")", 0x0, ",", 0x0, " ", 0x0, "f", 0x0, "m", 0x0, "t"
	DCB	0x0, "=", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, "(", 0x0, "%"
	DCB	0x0, "d", 0x0, " ", 0x0, "b", 0x0, "p", 0x0, "p", 0x0, ")"
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HM@KMEBNDDL@?$AAS?$AAr?$AAc?$AA?$CI?$AA?$CF?$AAd?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?5?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?$CJ?$AA?5?$AAx?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$DN?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?$CJ@| DCB "S"
	DCB	0x0, "r", 0x0, "c", 0x0, "(", 0x0, "%", 0x0, "d", 0x0, " "
	DCB	0x0, "(", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, "b", 0x0, "y"
	DCB	0x0, "t", 0x0, "e", 0x0, "s", 0x0, ")", 0x0, " ", 0x0, "x"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, "=", 0x0, "("
	DCB	0x0, "%", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, ")", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "(", 0x0, "%"
	DCB	0x0, "d", 0x0, ",", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")"
	DCB	0x0, ",", 0x0, " ", 0x0, "f", 0x0, "m", 0x0, "t", 0x0, "="
	DCB	0x0, "%", 0x0, "d", 0x0, " ", 0x0, "(", 0x0, "%", 0x0, "d"
	DCB	0x0, " ", 0x0, "b", 0x0, "p", 0x0, "p", 0x0, ")", 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HM@GELAHLGC@?$AAD?$AAs?$AAt?$AA?$CI?$AA?$CF?$AAd?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?5?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?$CJ?$AA?5?$AAx?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$DN?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?$CJ@| DCB "D"
	DCB	0x0, "s", 0x0, "t", 0x0, "(", 0x0, "%", 0x0, "d", 0x0, " "
	DCB	0x0, "(", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, "b", 0x0, "y"
	DCB	0x0, "t", 0x0, "e", 0x0, "s", 0x0, ")", 0x0, " ", 0x0, "x"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, "=", 0x0, "("
	DCB	0x0, "%", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, ")", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "(", 0x0, "%"
	DCB	0x0, "d", 0x0, ",", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")"
	DCB	0x0, ",", 0x0, " ", 0x0, "f", 0x0, "m", 0x0, "t", 0x0, "="
	DCB	0x0, "%", 0x0, "d", 0x0, " ", 0x0, "(", 0x0, "%", 0x0, "d"
	DCB	0x0, " ", 0x0, "b", 0x0, "p", 0x0, "p", 0x0, ")", 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DumpParms@@YAXPAUGPEBltParms@@@Z| PROC ; DumpParms

; 270  : {

  00000		 |$LN35@DumpParms|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd0fc	 sub         sp, sp, #0xFC
  00010		 |$M43048|

; 271  :   RETAILMSG(1, (TEXT("Dst(%d (%d bytes) x %d)=(%d, %d) - (%d, %d), fmt=%d (%d bpp)\n"),
; 272  :             pParms->pDst->Width(),
; 273  :             pParms->pDst->Stride(),
; 274  :             pParms->pDst->Height(),
; 275  :             pParms->prclDst->left,
; 276  :             pParms->prclDst->top,
; 277  :             pParms->prclDst->right,
; 278  :             pParms->prclDst->bottom,
; 279  :             pParms->pDst->Format(),
; 280  :             pParms->pDst->BytesPerPixel() * 8));

  00010	e59d3104	 ldr         r3, [sp, #0x104]
  00014	e2833004	 add         r3, r3, #4
  00018	e5930000	 ldr         r0, [r3]
  0001c	eb000000	 bl          |?BytesPerPixel@GPESurf@@QAAHXZ|
  00020	e58d0074	 str         r0, [sp, #0x74]
  00024	e59d3104	 ldr         r3, [sp, #0x104]
  00028	e2833004	 add         r3, r3, #4
  0002c	e5930000	 ldr         r0, [r3]
  00030	eb000000	 bl          |?Format@GPESurf@@QAA?AW4EGPEFormat@@XZ|
  00034	e58d0078	 str         r0, [sp, #0x78]
  00038	e59d3104	 ldr         r3, [sp, #0x104]
  0003c	e2833004	 add         r3, r3, #4
  00040	e5930000	 ldr         r0, [r3]
  00044	eb000000	 bl          |?Height@GPESurf@@QAAHXZ|
  00048	e58d007c	 str         r0, [sp, #0x7C]
  0004c	e59d3104	 ldr         r3, [sp, #0x104]
  00050	e2833004	 add         r3, r3, #4
  00054	e5930000	 ldr         r0, [r3]
  00058	eb000000	 bl          |?Stride@GPESurf@@QAAHXZ|
  0005c	e58d0080	 str         r0, [sp, #0x80]
  00060	e59d3104	 ldr         r3, [sp, #0x104]
  00064	e2833004	 add         r3, r3, #4
  00068	e5930000	 ldr         r0, [r3]
  0006c	eb000000	 bl          |?Width@GPESurf@@QAAHXZ|
  00070	e58d0084	 str         r0, [sp, #0x84]
  00074	e59d2074	 ldr         r2, [sp, #0x74]
  00078	e3a03008	 mov         r3, #8
  0007c	e0030392	 mul         r3, r2, r3
  00080	e58d3014	 str         r3, [sp, #0x14]
  00084	e59d3078	 ldr         r3, [sp, #0x78]
  00088	e58d3010	 str         r3, [sp, #0x10]
  0008c	e59d3104	 ldr         r3, [sp, #0x104]
  00090	e2833014	 add         r3, r3, #0x14
  00094	e5933000	 ldr         r3, [r3]
  00098	e283300c	 add         r3, r3, #0xC
  0009c	e5933000	 ldr         r3, [r3]
  000a0	e58d300c	 str         r3, [sp, #0xC]
  000a4	e59d3104	 ldr         r3, [sp, #0x104]
  000a8	e2833014	 add         r3, r3, #0x14
  000ac	e5933000	 ldr         r3, [r3]
  000b0	e2833008	 add         r3, r3, #8
  000b4	e5933000	 ldr         r3, [r3]
  000b8	e58d3008	 str         r3, [sp, #8]
  000bc	e59d3104	 ldr         r3, [sp, #0x104]
  000c0	e2833014	 add         r3, r3, #0x14
  000c4	e5933000	 ldr         r3, [r3]
  000c8	e2833004	 add         r3, r3, #4
  000cc	e5933000	 ldr         r3, [r3]
  000d0	e58d3004	 str         r3, [sp, #4]
  000d4	e59d3104	 ldr         r3, [sp, #0x104]
  000d8	e2833014	 add         r3, r3, #0x14
  000dc	e5933000	 ldr         r3, [r3]
  000e0	e5933000	 ldr         r3, [r3]
  000e4	e58d3000	 str         r3, [sp]
  000e8	e59d307c	 ldr         r3, [sp, #0x7C]
  000ec	e59d2080	 ldr         r2, [sp, #0x80]
  000f0	e59d1084	 ldr         r1, [sp, #0x84]
  000f4	e59f0590	 ldr         r0, [pc, #0x590]
  000f8	eb000000	 bl          NKDbgPrintfW
  000fc	e3a03001	 mov         r3, #1
  00100	e58d3088	 str         r3, [sp, #0x88]
  00104	ea000001	 b           |$LN8@DumpParms|
  00108	e3a03000	 mov         r3, #0
  0010c	e58d3088	 str         r3, [sp, #0x88]
  00110		 |$LN8@DumpParms|

; 281  :   if(pParms->pSrc && pParms->prclSrc)

  00110	e59d3104	 ldr         r3, [sp, #0x104]
  00114	e2833008	 add         r3, r3, #8
  00118	e5933000	 ldr         r3, [r3]
  0011c	e3530000	 cmp         r3, #0
  00120	0a000044	 beq         |$LN4@DumpParms|
  00124	e59d3104	 ldr         r3, [sp, #0x104]
  00128	e2833018	 add         r3, r3, #0x18
  0012c	e5933000	 ldr         r3, [r3]
  00130	e3530000	 cmp         r3, #0
  00134	0a00003f	 beq         |$LN4@DumpParms|

; 282  :     RETAILMSG(1, (TEXT("Src(%d (%d bytes) x %d)=(%d, %d) - (%d, %d), fmt=%d (%d bpp)\n"),
; 283  :               pParms->pSrc->Width(),
; 284  :               pParms->pSrc->Stride(),
; 285  :               pParms->pSrc->Height(),
; 286  :               pParms->prclSrc->left,
; 287  :               pParms->prclSrc->top,
; 288  :               pParms->prclSrc->right,
; 289  :               pParms->prclSrc->bottom,
; 290  :               pParms->pSrc->Format(),
; 291  :               pParms->pSrc->BytesPerPixel() * 8));

  00138	e59d3104	 ldr         r3, [sp, #0x104]
  0013c	e2833008	 add         r3, r3, #8
  00140	e5930000	 ldr         r0, [r3]
  00144	eb000000	 bl          |?BytesPerPixel@GPESurf@@QAAHXZ|
  00148	e58d008c	 str         r0, [sp, #0x8C]
  0014c	e59d3104	 ldr         r3, [sp, #0x104]
  00150	e2833008	 add         r3, r3, #8
  00154	e5930000	 ldr         r0, [r3]
  00158	eb000000	 bl          |?Format@GPESurf@@QAA?AW4EGPEFormat@@XZ|
  0015c	e58d0090	 str         r0, [sp, #0x90]
  00160	e59d3104	 ldr         r3, [sp, #0x104]
  00164	e2833008	 add         r3, r3, #8
  00168	e5930000	 ldr         r0, [r3]
  0016c	eb000000	 bl          |?Height@GPESurf@@QAAHXZ|
  00170	e58d0094	 str         r0, [sp, #0x94]
  00174	e59d3104	 ldr         r3, [sp, #0x104]
  00178	e2833008	 add         r3, r3, #8
  0017c	e5930000	 ldr         r0, [r3]
  00180	eb000000	 bl          |?Stride@GPESurf@@QAAHXZ|
  00184	e58d0098	 str         r0, [sp, #0x98]
  00188	e59d3104	 ldr         r3, [sp, #0x104]
  0018c	e2833008	 add         r3, r3, #8
  00190	e5930000	 ldr         r0, [r3]
  00194	eb000000	 bl          |?Width@GPESurf@@QAAHXZ|
  00198	e58d009c	 str         r0, [sp, #0x9C]
  0019c	e59d208c	 ldr         r2, [sp, #0x8C]
  001a0	e3a03008	 mov         r3, #8
  001a4	e0030392	 mul         r3, r2, r3
  001a8	e58d3014	 str         r3, [sp, #0x14]
  001ac	e59d3090	 ldr         r3, [sp, #0x90]
  001b0	e58d3010	 str         r3, [sp, #0x10]
  001b4	e59d3104	 ldr         r3, [sp, #0x104]
  001b8	e2833018	 add         r3, r3, #0x18
  001bc	e5933000	 ldr         r3, [r3]
  001c0	e283300c	 add         r3, r3, #0xC
  001c4	e5933000	 ldr         r3, [r3]
  001c8	e58d300c	 str         r3, [sp, #0xC]
  001cc	e59d3104	 ldr         r3, [sp, #0x104]
  001d0	e2833018	 add         r3, r3, #0x18
  001d4	e5933000	 ldr         r3, [r3]
  001d8	e2833008	 add         r3, r3, #8
  001dc	e5933000	 ldr         r3, [r3]
  001e0	e58d3008	 str         r3, [sp, #8]
  001e4	e59d3104	 ldr         r3, [sp, #0x104]
  001e8	e2833018	 add         r3, r3, #0x18
  001ec	e5933000	 ldr         r3, [r3]
  001f0	e2833004	 add         r3, r3, #4
  001f4	e5933000	 ldr         r3, [r3]
  001f8	e58d3004	 str         r3, [sp, #4]
  001fc	e59d3104	 ldr         r3, [sp, #0x104]
  00200	e2833018	 add         r3, r3, #0x18
  00204	e5933000	 ldr         r3, [r3]
  00208	e5933000	 ldr         r3, [r3]
  0020c	e58d3000	 str         r3, [sp]
  00210	e59d3094	 ldr         r3, [sp, #0x94]
  00214	e59d2098	 ldr         r2, [sp, #0x98]
  00218	e59d109c	 ldr         r1, [sp, #0x9C]
  0021c	e59f0464	 ldr         r0, [pc, #0x464]
  00220	eb000000	 bl          NKDbgPrintfW
  00224	e3a03001	 mov         r3, #1
  00228	e58d30a0	 str         r3, [sp, #0xA0]
  0022c	ea000001	 b           |$LN10@DumpParms|
  00230	e3a03000	 mov         r3, #0
  00234	e58d30a0	 str         r3, [sp, #0xA0]
  00238		 |$LN10@DumpParms|
  00238		 |$LN4@DumpParms|

; 292  :   if(pParms->pMask && pParms->prclMask)

  00238	e59d3104	 ldr         r3, [sp, #0x104]
  0023c	e283300c	 add         r3, r3, #0xC
  00240	e5933000	 ldr         r3, [r3]
  00244	e3530000	 cmp         r3, #0
  00248	0a000044	 beq         |$LN3@DumpParms|
  0024c	e59d3104	 ldr         r3, [sp, #0x104]
  00250	e283302c	 add         r3, r3, #0x2C
  00254	e5933000	 ldr         r3, [r3]
  00258	e3530000	 cmp         r3, #0
  0025c	0a00003f	 beq         |$LN3@DumpParms|

; 293  :     RETAILMSG(1, (TEXT("Mask(%d (%d bytes) x %d)=(%d, %d) - (%d, %d), fmt=%d (%d bpp)\n"),
; 294  :               pParms->pMask->Width(),
; 295  :               pParms->pMask->Stride(),
; 296  :               pParms->pMask->Height(),
; 297  :               pParms->prclMask->left,
; 298  :               pParms->prclMask->top,
; 299  :               pParms->prclMask->right,
; 300  :               pParms->prclMask->bottom,
; 301  :               pParms->pMask->Format(),
; 302  :               pParms->pMask->BytesPerPixel() * 8));

  00260	e59d3104	 ldr         r3, [sp, #0x104]
  00264	e283300c	 add         r3, r3, #0xC
  00268	e5930000	 ldr         r0, [r3]
  0026c	eb000000	 bl          |?BytesPerPixel@GPESurf@@QAAHXZ|
  00270	e58d00a4	 str         r0, [sp, #0xA4]
  00274	e59d3104	 ldr         r3, [sp, #0x104]
  00278	e283300c	 add         r3, r3, #0xC
  0027c	e5930000	 ldr         r0, [r3]
  00280	eb000000	 bl          |?Format@GPESurf@@QAA?AW4EGPEFormat@@XZ|
  00284	e58d00a8	 str         r0, [sp, #0xA8]
  00288	e59d3104	 ldr         r3, [sp, #0x104]
  0028c	e283300c	 add         r3, r3, #0xC
  00290	e5930000	 ldr         r0, [r3]
  00294	eb000000	 bl          |?Height@GPESurf@@QAAHXZ|
  00298	e58d00ac	 str         r0, [sp, #0xAC]
  0029c	e59d3104	 ldr         r3, [sp, #0x104]
  002a0	e283300c	 add         r3, r3, #0xC
  002a4	e5930000	 ldr         r0, [r3]
  002a8	eb000000	 bl          |?Stride@GPESurf@@QAAHXZ|
  002ac	e58d00b0	 str         r0, [sp, #0xB0]
  002b0	e59d3104	 ldr         r3, [sp, #0x104]
  002b4	e283300c	 add         r3, r3, #0xC
  002b8	e5930000	 ldr         r0, [r3]
  002bc	eb000000	 bl          |?Width@GPESurf@@QAAHXZ|
  002c0	e58d00b4	 str         r0, [sp, #0xB4]
  002c4	e59d20a4	 ldr         r2, [sp, #0xA4]
  002c8	e3a03008	 mov         r3, #8
  002cc	e0030392	 mul         r3, r2, r3
  002d0	e58d3014	 str         r3, [sp, #0x14]
  002d4	e59d30a8	 ldr         r3, [sp, #0xA8]
  002d8	e58d3010	 str         r3, [sp, #0x10]
  002dc	e59d3104	 ldr         r3, [sp, #0x104]
  002e0	e283302c	 add         r3, r3, #0x2C
  002e4	e5933000	 ldr         r3, [r3]
  002e8	e283300c	 add         r3, r3, #0xC
  002ec	e5933000	 ldr         r3, [r3]
  002f0	e58d300c	 str         r3, [sp, #0xC]
  002f4	e59d3104	 ldr         r3, [sp, #0x104]
  002f8	e283302c	 add         r3, r3, #0x2C
  002fc	e5933000	 ldr         r3, [r3]
  00300	e2833008	 add         r3, r3, #8
  00304	e5933000	 ldr         r3, [r3]
  00308	e58d3008	 str         r3, [sp, #8]
  0030c	e59d3104	 ldr         r3, [sp, #0x104]
  00310	e283302c	 add         r3, r3, #0x2C
  00314	e5933000	 ldr         r3, [r3]
  00318	e2833004	 add         r3, r3, #4
  0031c	e5933000	 ldr         r3, [r3]
  00320	e58d3004	 str         r3, [sp, #4]
  00324	e59d3104	 ldr         r3, [sp, #0x104]
  00328	e283302c	 add         r3, r3, #0x2C
  0032c	e5933000	 ldr         r3, [r3]
  00330	e5933000	 ldr         r3, [r3]
  00334	e58d3000	 str         r3, [sp]
  00338	e59d30ac	 ldr         r3, [sp, #0xAC]
  0033c	e59d20b0	 ldr         r2, [sp, #0xB0]
  00340	e59d10b4	 ldr         r1, [sp, #0xB4]
  00344	e59f0338	 ldr         r0, [pc, #0x338]
  00348	eb000000	 bl          NKDbgPrintfW
  0034c	e3a03001	 mov         r3, #1
  00350	e58d30b8	 str         r3, [sp, #0xB8]
  00354	ea000001	 b           |$LN12@DumpParms|
  00358	e3a03000	 mov         r3, #0
  0035c	e58d30b8	 str         r3, [sp, #0xB8]
  00360		 |$LN12@DumpParms|
  00360		 |$LN3@DumpParms|

; 303  :   if(pParms->pBrush && pParms->pptlBrush)

  00360	e59d3104	 ldr         r3, [sp, #0x104]
  00364	e2833010	 add         r3, r3, #0x10
  00368	e5933000	 ldr         r3, [r3]
  0036c	e3530000	 cmp         r3, #0
  00370	0a000038	 beq         |$LN2@DumpParms|
  00374	e59d3104	 ldr         r3, [sp, #0x104]
  00378	e2833030	 add         r3, r3, #0x30
  0037c	e5933000	 ldr         r3, [r3]
  00380	e3530000	 cmp         r3, #0
  00384	0a000033	 beq         |$LN2@DumpParms|

; 304  :     RETAILMSG(1, (TEXT("Brush(%d (%d bytes) x %d)=(%d, %d), fmt=%d (%d bpp)\n"),
; 305  :               pParms->pBrush->Width(),
; 306  :               pParms->pBrush->Stride(),
; 307  :               pParms->pBrush->Height(),
; 308  :               pParms->pptlBrush->x,
; 309  :               pParms->pptlBrush->y,
; 310  :               pParms->pBrush->Format(),
; 311  :               pParms->pBrush->BytesPerPixel() * 8));

  00388	e59d3104	 ldr         r3, [sp, #0x104]
  0038c	e2833010	 add         r3, r3, #0x10
  00390	e5930000	 ldr         r0, [r3]
  00394	eb000000	 bl          |?BytesPerPixel@GPESurf@@QAAHXZ|
  00398	e58d00bc	 str         r0, [sp, #0xBC]
  0039c	e59d3104	 ldr         r3, [sp, #0x104]
  003a0	e2833010	 add         r3, r3, #0x10
  003a4	e5930000	 ldr         r0, [r3]
  003a8	eb000000	 bl          |?Format@GPESurf@@QAA?AW4EGPEFormat@@XZ|
  003ac	e58d00c0	 str         r0, [sp, #0xC0]
  003b0	e59d3104	 ldr         r3, [sp, #0x104]
  003b4	e2833010	 add         r3, r3, #0x10
  003b8	e5930000	 ldr         r0, [r3]
  003bc	eb000000	 bl          |?Height@GPESurf@@QAAHXZ|
  003c0	e58d00c4	 str         r0, [sp, #0xC4]
  003c4	e59d3104	 ldr         r3, [sp, #0x104]
  003c8	e2833010	 add         r3, r3, #0x10
  003cc	e5930000	 ldr         r0, [r3]
  003d0	eb000000	 bl          |?Stride@GPESurf@@QAAHXZ|
  003d4	e58d00c8	 str         r0, [sp, #0xC8]
  003d8	e59d3104	 ldr         r3, [sp, #0x104]
  003dc	e2833010	 add         r3, r3, #0x10
  003e0	e5930000	 ldr         r0, [r3]
  003e4	eb000000	 bl          |?Width@GPESurf@@QAAHXZ|
  003e8	e58d00cc	 str         r0, [sp, #0xCC]
  003ec	e59d20bc	 ldr         r2, [sp, #0xBC]
  003f0	e3a03008	 mov         r3, #8
  003f4	e0030392	 mul         r3, r2, r3
  003f8	e58d300c	 str         r3, [sp, #0xC]
  003fc	e59d30c0	 ldr         r3, [sp, #0xC0]
  00400	e58d3008	 str         r3, [sp, #8]
  00404	e59d3104	 ldr         r3, [sp, #0x104]
  00408	e2833030	 add         r3, r3, #0x30
  0040c	e5933000	 ldr         r3, [r3]
  00410	e2833004	 add         r3, r3, #4
  00414	e5933000	 ldr         r3, [r3]
  00418	e58d3004	 str         r3, [sp, #4]
  0041c	e59d3104	 ldr         r3, [sp, #0x104]
  00420	e2833030	 add         r3, r3, #0x30
  00424	e5933000	 ldr         r3, [r3]
  00428	e5933000	 ldr         r3, [r3]
  0042c	e58d3000	 str         r3, [sp]
  00430	e59d30c4	 ldr         r3, [sp, #0xC4]
  00434	e59d20c8	 ldr         r2, [sp, #0xC8]
  00438	e59d10cc	 ldr         r1, [sp, #0xCC]
  0043c	e59f023c	 ldr         r0, [pc, #0x23C]
  00440	eb000000	 bl          NKDbgPrintfW
  00444	e3a03001	 mov         r3, #1
  00448	e58d30d0	 str         r3, [sp, #0xD0]
  0044c	ea000001	 b           |$LN14@DumpParms|
  00450	e3a03000	 mov         r3, #0
  00454	e58d30d0	 str         r3, [sp, #0xD0]
  00458		 |$LN14@DumpParms|
  00458		 |$LN2@DumpParms|

; 312  :   if(pParms-> prclClip)

  00458	e59d3104	 ldr         r3, [sp, #0x104]
  0045c	e283301c	 add         r3, r3, #0x1C
  00460	e5933000	 ldr         r3, [r3]
  00464	e3530000	 cmp         r3, #0
  00468	0a00001a	 beq         |$LN1@DumpParms|

; 313  :     RETAILMSG(1, (TEXT("Clip=(%d, %d) - (%d, %d) \n"),
; 314  :               pParms->prclClip->left,
; 315  :               pParms->prclClip->top,
; 316  :               pParms->prclClip->right,
; 317  :               pParms->prclClip->bottom));

  0046c	e59d3104	 ldr         r3, [sp, #0x104]
  00470	e283301c	 add         r3, r3, #0x1C
  00474	e5933000	 ldr         r3, [r3]
  00478	e283300c	 add         r3, r3, #0xC
  0047c	e5933000	 ldr         r3, [r3]
  00480	e58d3000	 str         r3, [sp]
  00484	e59d3104	 ldr         r3, [sp, #0x104]
  00488	e283301c	 add         r3, r3, #0x1C
  0048c	e5933000	 ldr         r3, [r3]
  00490	e2833008	 add         r3, r3, #8
  00494	e5933000	 ldr         r3, [r3]
  00498	e59d2104	 ldr         r2, [sp, #0x104]
  0049c	e282201c	 add         r2, r2, #0x1C
  004a0	e5922000	 ldr         r2, [r2]
  004a4	e2822004	 add         r2, r2, #4
  004a8	e5922000	 ldr         r2, [r2]
  004ac	e59d1104	 ldr         r1, [sp, #0x104]
  004b0	e281101c	 add         r1, r1, #0x1C
  004b4	e5911000	 ldr         r1, [r1]
  004b8	e5911000	 ldr         r1, [r1]
  004bc	e59f01b8	 ldr         r0, [pc, #0x1B8]
  004c0	eb000000	 bl          NKDbgPrintfW
  004c4	e3a03001	 mov         r3, #1
  004c8	e58d30d4	 str         r3, [sp, #0xD4]
  004cc	ea000001	 b           |$LN16@DumpParms|
  004d0	e3a03000	 mov         r3, #0
  004d4	e58d30d4	 str         r3, [sp, #0xD4]
  004d8		 |$LN16@DumpParms|
  004d8		 |$LN1@DumpParms|

; 318  :   RETAILMSG(1, (TEXT("solidColor=0x%08X\n"), pParms->solidColor));

  004d8	e59d3104	 ldr         r3, [sp, #0x104]
  004dc	e2833020	 add         r3, r3, #0x20
  004e0	e5931000	 ldr         r1, [r3]
  004e4	e59f018c	 ldr         r0, [pc, #0x18C]
  004e8	eb000000	 bl          NKDbgPrintfW
  004ec	e3a03001	 mov         r3, #1
  004f0	e58d30d8	 str         r3, [sp, #0xD8]
  004f4	ea000001	 b           |$LN18@DumpParms|
  004f8	e3a03000	 mov         r3, #0
  004fc	e58d30d8	 str         r3, [sp, #0xD8]
  00500		 |$LN18@DumpParms|

; 319  :   RETAILMSG(1, (TEXT("bltFlags=0x%08X\n"), pParms->bltFlags));

  00500	e59d3104	 ldr         r3, [sp, #0x104]
  00504	e2833024	 add         r3, r3, #0x24
  00508	e5931000	 ldr         r1, [r3]
  0050c	e59f0160	 ldr         r0, [pc, #0x160]
  00510	eb000000	 bl          NKDbgPrintfW
  00514	e3a03001	 mov         r3, #1
  00518	e58d30dc	 str         r3, [sp, #0xDC]
  0051c	ea000001	 b           |$LN20@DumpParms|
  00520	e3a03000	 mov         r3, #0
  00524	e58d30dc	 str         r3, [sp, #0xDC]
  00528		 |$LN20@DumpParms|

; 320  :   RETAILMSG(1, (TEXT("rop4=0x%08X\n"), pParms->rop4));

  00528	e59d3104	 ldr         r3, [sp, #0x104]
  0052c	e2833028	 add         r3, r3, #0x28
  00530	e5931000	 ldr         r1, [r3]
  00534	e59f0134	 ldr         r0, [pc, #0x134]
  00538	eb000000	 bl          NKDbgPrintfW
  0053c	e3a03001	 mov         r3, #1
  00540	e58d30e0	 str         r3, [sp, #0xE0]
  00544	ea000001	 b           |$LN22@DumpParms|
  00548	e3a03000	 mov         r3, #0
  0054c	e58d30e0	 str         r3, [sp, #0xE0]
  00550		 |$LN22@DumpParms|

; 321  :   RETAILMSG(1, (TEXT("xPositive=%d, yPositive=%d\n"),
; 322  :             pParms->xPositive,
; 323  :             pParms->yPositive));

  00550	e59d3104	 ldr         r3, [sp, #0x104]
  00554	e2833038	 add         r3, r3, #0x38
  00558	e5932000	 ldr         r2, [r3]
  0055c	e59d3104	 ldr         r3, [sp, #0x104]
  00560	e2833034	 add         r3, r3, #0x34
  00564	e5931000	 ldr         r1, [r3]
  00568	e59f00fc	 ldr         r0, [pc, #0xFC]
  0056c	eb000000	 bl          NKDbgPrintfW
  00570	e3a03001	 mov         r3, #1
  00574	e58d30e4	 str         r3, [sp, #0xE4]
  00578	ea000001	 b           |$LN24@DumpParms|
  0057c	e3a03000	 mov         r3, #0
  00580	e58d30e4	 str         r3, [sp, #0xE4]
  00584		 |$LN24@DumpParms|

; 324  :   RETAILMSG(1, (TEXT("pLookup=0x%08X\n"), pParms->pLookup));

  00584	e59d3104	 ldr         r3, [sp, #0x104]
  00588	e283303c	 add         r3, r3, #0x3C
  0058c	e5931000	 ldr         r1, [r3]
  00590	e59f00d0	 ldr         r0, [pc, #0xD0]
  00594	eb000000	 bl          NKDbgPrintfW
  00598	e3a03001	 mov         r3, #1
  0059c	e58d30e8	 str         r3, [sp, #0xE8]
  005a0	ea000001	 b           |$LN26@DumpParms|
  005a4	e3a03000	 mov         r3, #0
  005a8	e58d30e8	 str         r3, [sp, #0xE8]
  005ac		 |$LN26@DumpParms|

; 325  :   RETAILMSG(1, (TEXT("pConvert=0x%08X\n"), pParms->pConvert));

  005ac	e59d3104	 ldr         r3, [sp, #0x104]
  005b0	e2833040	 add         r3, r3, #0x40
  005b4	e5931000	 ldr         r1, [r3]
  005b8	e59f00a4	 ldr         r0, [pc, #0xA4]
  005bc	eb000000	 bl          NKDbgPrintfW
  005c0	e3a03001	 mov         r3, #1
  005c4	e58d30ec	 str         r3, [sp, #0xEC]
  005c8	ea000001	 b           |$LN28@DumpParms|
  005cc	e3a03000	 mov         r3, #0
  005d0	e58d30ec	 str         r3, [sp, #0xEC]
  005d4		 |$LN28@DumpParms|

; 326  :   RETAILMSG(1, (TEXT("iMode=0x%08X\n"), pParms->iMode));

  005d4	e59d3104	 ldr         r3, [sp, #0x104]
  005d8	e2833048	 add         r3, r3, #0x48
  005dc	e5931000	 ldr         r1, [r3]
  005e0	e59f0078	 ldr         r0, [pc, #0x78]
  005e4	eb000000	 bl          NKDbgPrintfW
  005e8	e3a03001	 mov         r3, #1
  005ec	e58d30f0	 str         r3, [sp, #0xF0]
  005f0	ea000001	 b           |$LN30@DumpParms|
  005f4	e3a03000	 mov         r3, #0
  005f8	e58d30f0	 str         r3, [sp, #0xF0]
  005fc		 |$LN30@DumpParms|

; 327  :   RETAILMSG(1, (TEXT("blendFunction=0x%08X\n"), pParms->blendFunction));

  005fc	e59d3104	 ldr         r3, [sp, #0x104]
  00600	e283304c	 add         r3, r3, #0x4C
  00604	e58d30f4	 str         r3, [sp, #0xF4]
  00608	e59d10f4	 ldr         r1, [sp, #0xF4]
  0060c	e5d13003	 ldrb        r3, [r1, #3]
  00610	e1a02403	 mov         r2, r3, lsl #8
  00614	e5d13002	 ldrb        r3, [r1, #2]
  00618	e1833002	 orr         r3, r3, r2
  0061c	e1a02403	 mov         r2, r3, lsl #8
  00620	e5d13001	 ldrb        r3, [r1, #1]
  00624	e1833002	 orr         r3, r3, r2
  00628	e1a02403	 mov         r2, r3, lsl #8
  0062c	e5d13000	 ldrb        r3, [r1]
  00630	e1831002	 orr         r1, r3, r2
  00634	e59f0020	 ldr         r0, [pc, #0x20]
  00638	eb000000	 bl          NKDbgPrintfW
  0063c	e3a03001	 mov         r3, #1
  00640	e58d30f8	 str         r3, [sp, #0xF8]
  00644	ea000001	 b           |$LN32@DumpParms|
  00648	e3a03000	 mov         r3, #0
  0064c	e58d30f8	 str         r3, [sp, #0xF8]
  00650		 |$LN32@DumpParms|

; 328  : }

  00650	e28dd0fc	 add         sp, sp, #0xFC
  00654	e89d6000	 ldmia       sp, {sp, lr}
  00658	e12fff1e	 bx          lr
  0065c		 |$LN36@DumpParms|
  0065c		 |$LN37@DumpParms|
  0065c	00000000	 DCD         |??_C@_1CM@IPLALGAE@?$AAb?$AAl?$AAe?$AAn?$AAd?$AAF?$AAu?$AAn?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@|
  00660		 |$LN38@DumpParms|
  00660	00000000	 DCD         |??_C@_1BM@MMIHMBGA@?$AAi?$AAM?$AAo?$AAd?$AAe?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@|
  00664		 |$LN39@DumpParms|
  00664	00000000	 DCD         |??_C@_1CC@OONCLEGI@?$AAp?$AAC?$AAo?$AAn?$AAv?$AAe?$AAr?$AAt?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@|
  00668		 |$LN40@DumpParms|
  00668	00000000	 DCD         |??_C@_1CA@FFPBLBKH@?$AAp?$AAL?$AAo?$AAo?$AAk?$AAu?$AAp?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@|
  0066c		 |$LN41@DumpParms|
  0066c	00000000	 DCD         |??_C@_1DI@OLFLPOGG@?$AAx?$AAP?$AAo?$AAs?$AAi?$AAt?$AAi?$AAv?$AAe?$AA?$DN?$AA?$CF?$AAd?$AA?0?$AA?5?$AAy?$AAP?$AAo?$AAs?$AAi?$AAt?$AAi?$AAv?$AAe?$AA?$DN?$AA?$CF?$AAd?$AA?6?$AA?$AA@|
  00670		 |$LN42@DumpParms|
  00670	00000000	 DCD         |??_C@_1BK@FJKDKNMJ@?$AAr?$AAo?$AAp?$AA4?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@|
  00674		 |$LN43@DumpParms|
  00674	00000000	 DCD         |??_C@_1CC@FEHFAAAB@?$AAb?$AAl?$AAt?$AAF?$AAl?$AAa?$AAg?$AAs?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@|
  00678		 |$LN44@DumpParms|
  00678	00000000	 DCD         |??_C@_1CG@LPACICOE@?$AAs?$AAo?$AAl?$AAi?$AAd?$AAC?$AAo?$AAl?$AAo?$AAr?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@|
  0067c		 |$LN45@DumpParms|
  0067c	00000000	 DCD         |??_C@_1DG@DOANIEOA@?$AAC?$AAl?$AAi?$AAp?$AA?$DN?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?5?$AA?9?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?5?$AA?6?$AA?$AA@|
  00680		 |$LN46@DumpParms|
  00680	00000000	 DCD         |??_C@_1GK@GHEADLCD@?$AAB?$AAr?$AAu?$AAs?$AAh?$AA?$CI?$AA?$CF?$AAd?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?5?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?$CJ?$AA?5?$AAx?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$DN?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF@|
  00684		 |$LN47@DumpParms|
  00684	00000000	 DCD         |??_C@_1HO@JFFNINID@?$AAM?$AAa?$AAs?$AAk?$AA?$CI?$AA?$CF?$AAd?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?5?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?$CJ?$AA?5?$AAx?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$DN?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd@|
  00688		 |$LN48@DumpParms|
  00688	00000000	 DCD         |??_C@_1HM@KMEBNDDL@?$AAS?$AAr?$AAc?$AA?$CI?$AA?$CF?$AAd?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?5?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?$CJ?$AA?5?$AAx?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$DN?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?$CJ@|
  0068c		 |$LN49@DumpParms|
  0068c	00000000	 DCD         |??_C@_1HM@GELAHLGC@?$AAD?$AAs?$AAt?$AA?$CI?$AA?$CF?$AAd?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?5?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?$CJ?$AA?5?$AAx?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$DN?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?$CJ@|
  00690		 |$M43049|

			 ENDP  ; |?DumpParms@@YAXPAUGPEBltParms@@@Z|, DumpParms

; File c:\wince600\public\common\oak\inc\gpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T43071| DCD	|$LN5@Stride|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Stride@GPESurf@@QAAHXZ| PROC		; GPESurf::Stride

; 177  :     {

  00000		 |$LN5@Stride|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M43068|

; 178  :         return m_nStrideBytes;

  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e2833008	 add         r3, r3, #8
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3000	 str         r3, [sp]

; 179  :     }

  00020	e59d0000	 ldr         r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M43069|

			 ENDP  ; |?Stride@GPESurf@@QAAHXZ|, GPESurf::Stride


  00000			 AREA	 |.pdata|, PDATA
|$T43079| DCD	|$LN5@BytesPerPi|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?BytesPerPixel@GPESurf@@QAAHXZ| PROC	; GPESurf::BytesPerPixel

; 183  :     {

  00000		 |$LN5@BytesPerPi|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M43076|

; 184  :         return m_BytesPixel;

  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e2833044	 add         r3, r3, #0x44
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3000	 str         r3, [sp]

; 185  :     }

  00020	e59d0000	 ldr         r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M43077|

			 ENDP  ; |?BytesPerPixel@GPESurf@@QAAHXZ|, GPESurf::BytesPerPixel


  00000			 AREA	 |.pdata|, PDATA
|$T43087| DCD	|$LN5@Format|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Format@GPESurf@@QAA?AW4EGPEFormat@@XZ| PROC ; GPESurf::Format

; 189  :     {

  00000		 |$LN5@Format|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M43084|

; 190  :         return m_eFormat;

  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e283301c	 add         r3, r3, #0x1C
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3000	 str         r3, [sp]

; 191  :     }

  00020	e59d0000	 ldr         r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M43085|

			 ENDP  ; |?Format@GPESurf@@QAA?AW4EGPEFormat@@XZ|, GPESurf::Format


  00000			 AREA	 |.pdata|, PDATA
|$T43095| DCD	|$LN5@Width|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Width@GPESurf@@QAAHXZ| PROC		; GPESurf::Width

; 207  :     {

  00000		 |$LN5@Width|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M43092|

; 208  :         return m_nWidth;

  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e283302c	 add         r3, r3, #0x2C
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3000	 str         r3, [sp]

; 209  :     }

  00020	e59d0000	 ldr         r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M43093|

			 ENDP  ; |?Width@GPESurf@@QAAHXZ|, GPESurf::Width


  00000			 AREA	 |.pdata|, PDATA
|$T43103| DCD	|$LN5@Height|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Height@GPESurf@@QAAHXZ| PROC		; GPESurf::Height

; 213  :     {

  00000		 |$LN5@Height|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M43100|

; 214  :         return m_nHeight;

  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e2833030	 add         r3, r3, #0x30
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3000	 str         r3, [sp]

; 215  :     }

  00020	e59d0000	 ldr         r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M43101|

			 ENDP  ; |?Height@GPESurf@@QAAHXZ|, GPESurf::Height

	EXPORT	|?ClipNoScale@@YAXPAU_RECTL@@PBU1@@Z|	; ClipNoScale

  00008			 AREA	 |.pdata|, PDATA
|$T43110| DCD	|$LN10@ClipNoScal|
	DCD	0x40003f03
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\ddgpe\omap_optblt.cpp

  00690			 AREA	 |.text|, CODE, ARM

  00690		 |?ClipNoScale@@YAXPAU_RECTL@@PBU1@@Z| PROC ; ClipNoScale

; 489  : {

  00690		 |$LN10@ClipNoScal|
  00690	e1a0c00d	 mov         r12, sp
  00694	e92d0003	 stmdb       sp!, {r0, r1}
  00698	e92d5000	 stmdb       sp!, {r12, lr}
  0069c		 |$M43107|

; 490  :   if(prclDst && prclClip)

  0069c	e59d3008	 ldr         r3, [sp, #8]
  006a0	e3530000	 cmp         r3, #0
  006a4	0a000036	 beq         |$LN5@ClipNoScal|
  006a8	e59d300c	 ldr         r3, [sp, #0xC]
  006ac	e3530000	 cmp         r3, #0
  006b0	0a000033	 beq         |$LN5@ClipNoScal|

; 491  :   {
; 492  :     if(prclClip->left > prclDst->left)

  006b4	e59d300c	 ldr         r3, [sp, #0xC]
  006b8	e5932000	 ldr         r2, [r3]
  006bc	e59d3008	 ldr         r3, [sp, #8]
  006c0	e5933000	 ldr         r3, [r3]
  006c4	e1520003	 cmp         r2, r3
  006c8	da000003	 ble         |$LN4@ClipNoScal|

; 493  :     {
; 494  :       prclDst->left = prclClip->left;

  006cc	e59d300c	 ldr         r3, [sp, #0xC]
  006d0	e5932000	 ldr         r2, [r3]
  006d4	e59d3008	 ldr         r3, [sp, #8]
  006d8	e5832000	 str         r2, [r3]
  006dc		 |$LN4@ClipNoScal|

; 495  :     }
; 496  :     if(prclClip->top > prclDst->top)

  006dc	e59d300c	 ldr         r3, [sp, #0xC]
  006e0	e2832004	 add         r2, r3, #4
  006e4	e59d3008	 ldr         r3, [sp, #8]
  006e8	e2833004	 add         r3, r3, #4
  006ec	e5922000	 ldr         r2, [r2]
  006f0	e5933000	 ldr         r3, [r3]
  006f4	e1520003	 cmp         r2, r3
  006f8	da000005	 ble         |$LN3@ClipNoScal|

; 497  :     {
; 498  :       prclDst->top = prclClip->top;

  006fc	e59d300c	 ldr         r3, [sp, #0xC]
  00700	e2831004	 add         r1, r3, #4
  00704	e59d3008	 ldr         r3, [sp, #8]
  00708	e2832004	 add         r2, r3, #4
  0070c	e5913000	 ldr         r3, [r1]
  00710	e5823000	 str         r3, [r2]
  00714		 |$LN3@ClipNoScal|

; 499  :     }
; 500  :     if(prclClip->right < prclDst->right)

  00714	e59d300c	 ldr         r3, [sp, #0xC]
  00718	e2832008	 add         r2, r3, #8
  0071c	e59d3008	 ldr         r3, [sp, #8]
  00720	e2833008	 add         r3, r3, #8
  00724	e5922000	 ldr         r2, [r2]
  00728	e5933000	 ldr         r3, [r3]
  0072c	e1520003	 cmp         r2, r3
  00730	aa000005	 bge         |$LN2@ClipNoScal|

; 501  :     {
; 502  :       prclDst->right = prclClip->right;

  00734	e59d300c	 ldr         r3, [sp, #0xC]
  00738	e2831008	 add         r1, r3, #8
  0073c	e59d3008	 ldr         r3, [sp, #8]
  00740	e2832008	 add         r2, r3, #8
  00744	e5913000	 ldr         r3, [r1]
  00748	e5823000	 str         r3, [r2]
  0074c		 |$LN2@ClipNoScal|

; 503  :     }
; 504  :     if(prclClip->bottom < prclDst->bottom)

  0074c	e59d300c	 ldr         r3, [sp, #0xC]
  00750	e283200c	 add         r2, r3, #0xC
  00754	e59d3008	 ldr         r3, [sp, #8]
  00758	e283300c	 add         r3, r3, #0xC
  0075c	e5922000	 ldr         r2, [r2]
  00760	e5933000	 ldr         r3, [r3]
  00764	e1520003	 cmp         r2, r3
  00768	aa000005	 bge         |$LN1@ClipNoScal|

; 505  :     {
; 506  :       prclDst->bottom = prclClip->bottom;

  0076c	e59d300c	 ldr         r3, [sp, #0xC]
  00770	e283100c	 add         r1, r3, #0xC
  00774	e59d3008	 ldr         r3, [sp, #8]
  00778	e283200c	 add         r2, r3, #0xC
  0077c	e5913000	 ldr         r3, [r1]
  00780	e5823000	 str         r3, [r2]
  00784		 |$LN1@ClipNoScal|
  00784		 |$LN5@ClipNoScal|

; 507  :     }
; 508  :   }
; 509  : }

  00784	e89d6000	 ldmia       sp, {sp, lr}
  00788	e12fff1e	 bx          lr
  0078c		 |$M43108|

			 ENDP  ; |?ClipNoScale@@YAXPAU_RECTL@@PBU1@@Z|, ClipNoScale

	EXPORT	|?ClipNoScale@@YAXPAU_RECTL@@0PBU1@@Z|	; ClipNoScale

  00010			 AREA	 |.pdata|, PDATA
|$T43115| DCD	|$LN14@ClipNoScal@2|
	DCD	0x40007f03
; Function compile flags: /Odtp

  0078c			 AREA	 |.text|, CODE, ARM

  0078c		 |?ClipNoScale@@YAXPAU_RECTL@@0PBU1@@Z| PROC ; ClipNoScale

; 515  : {

  0078c		 |$LN14@ClipNoScal@2|
  0078c	e1a0c00d	 mov         r12, sp
  00790	e92d0007	 stmdb       sp!, {r0 - r2}
  00794	e92d5000	 stmdb       sp!, {r12, lr}
  00798		 |$M43112|

; 516  :   if(prclDst && prclClip)

  00798	e59d3008	 ldr         r3, [sp, #8]
  0079c	e3530000	 cmp         r3, #0
  007a0	0a000076	 beq         |$LN9@ClipNoScal@2|
  007a4	e59d3010	 ldr         r3, [sp, #0x10]
  007a8	e3530000	 cmp         r3, #0
  007ac	0a000073	 beq         |$LN9@ClipNoScal@2|

; 517  :   {
; 518  :     if(prclClip->left > prclDst->left)

  007b0	e59d3010	 ldr         r3, [sp, #0x10]
  007b4	e5932000	 ldr         r2, [r3]
  007b8	e59d3008	 ldr         r3, [sp, #8]
  007bc	e5933000	 ldr         r3, [r3]
  007c0	e1520003	 cmp         r2, r3
  007c4	da000010	 ble         |$LN8@ClipNoScal@2|

; 519  :     {
; 520  :       if(prclSrc)

  007c8	e59d300c	 ldr         r3, [sp, #0xC]
  007cc	e3530000	 cmp         r3, #0
  007d0	0a000009	 beq         |$LN7@ClipNoScal@2|

; 521  :         prclSrc->left += prclClip->left - prclDst->left;

  007d4	e59d3010	 ldr         r3, [sp, #0x10]
  007d8	e5932000	 ldr         r2, [r3]
  007dc	e59d3008	 ldr         r3, [sp, #8]
  007e0	e5933000	 ldr         r3, [r3]
  007e4	e0422003	 sub         r2, r2, r3
  007e8	e59d300c	 ldr         r3, [sp, #0xC]
  007ec	e5933000	 ldr         r3, [r3]
  007f0	e0832002	 add         r2, r3, r2
  007f4	e59d300c	 ldr         r3, [sp, #0xC]
  007f8	e5832000	 str         r2, [r3]
  007fc		 |$LN7@ClipNoScal@2|

; 522  :       prclDst->left = prclClip->left;

  007fc	e59d3010	 ldr         r3, [sp, #0x10]
  00800	e5932000	 ldr         r2, [r3]
  00804	e59d3008	 ldr         r3, [sp, #8]
  00808	e5832000	 str         r2, [r3]
  0080c		 |$LN8@ClipNoScal@2|

; 523  :     }
; 524  :     if(prclClip->top > prclDst->top)

  0080c	e59d3010	 ldr         r3, [sp, #0x10]
  00810	e2832004	 add         r2, r3, #4
  00814	e59d3008	 ldr         r3, [sp, #8]
  00818	e2833004	 add         r3, r3, #4
  0081c	e5922000	 ldr         r2, [r2]
  00820	e5933000	 ldr         r3, [r3]
  00824	e1520003	 cmp         r2, r3
  00828	da000016	 ble         |$LN6@ClipNoScal@2|

; 525  :     {
; 526  :       if(prclSrc)

  0082c	e59d300c	 ldr         r3, [sp, #0xC]
  00830	e3530000	 cmp         r3, #0
  00834	0a00000d	 beq         |$LN5@ClipNoScal@2|

; 527  :         prclSrc->top += prclClip->top - prclDst->top;

  00838	e59d300c	 ldr         r3, [sp, #0xC]
  0083c	e2831004	 add         r1, r3, #4
  00840	e59d3010	 ldr         r3, [sp, #0x10]
  00844	e2832004	 add         r2, r3, #4
  00848	e59d3008	 ldr         r3, [sp, #8]
  0084c	e2833004	 add         r3, r3, #4
  00850	e5922000	 ldr         r2, [r2]
  00854	e5933000	 ldr         r3, [r3]
  00858	e0422003	 sub         r2, r2, r3
  0085c	e5913000	 ldr         r3, [r1]
  00860	e0832002	 add         r2, r3, r2
  00864	e59d300c	 ldr         r3, [sp, #0xC]
  00868	e2833004	 add         r3, r3, #4
  0086c	e5832000	 str         r2, [r3]
  00870		 |$LN5@ClipNoScal@2|

; 528  :       prclDst->top = prclClip->top;

  00870	e59d3010	 ldr         r3, [sp, #0x10]
  00874	e2831004	 add         r1, r3, #4
  00878	e59d3008	 ldr         r3, [sp, #8]
  0087c	e2832004	 add         r2, r3, #4
  00880	e5913000	 ldr         r3, [r1]
  00884	e5823000	 str         r3, [r2]
  00888		 |$LN6@ClipNoScal@2|

; 529  :     }
; 530  :     if(prclClip->right < prclDst->right)

  00888	e59d3010	 ldr         r3, [sp, #0x10]
  0088c	e2832008	 add         r2, r3, #8
  00890	e59d3008	 ldr         r3, [sp, #8]
  00894	e2833008	 add         r3, r3, #8
  00898	e5922000	 ldr         r2, [r2]
  0089c	e5933000	 ldr         r3, [r3]
  008a0	e1520003	 cmp         r2, r3
  008a4	aa000016	 bge         |$LN4@ClipNoScal@2|

; 531  :     {
; 532  :       if(prclSrc)

  008a8	e59d300c	 ldr         r3, [sp, #0xC]
  008ac	e3530000	 cmp         r3, #0
  008b0	0a00000d	 beq         |$LN3@ClipNoScal@2|

; 533  :       prclSrc->right -= prclDst->right - prclClip->right;

  008b4	e59d300c	 ldr         r3, [sp, #0xC]
  008b8	e2831008	 add         r1, r3, #8
  008bc	e59d3008	 ldr         r3, [sp, #8]
  008c0	e2832008	 add         r2, r3, #8
  008c4	e59d3010	 ldr         r3, [sp, #0x10]
  008c8	e2833008	 add         r3, r3, #8
  008cc	e5922000	 ldr         r2, [r2]
  008d0	e5933000	 ldr         r3, [r3]
  008d4	e0422003	 sub         r2, r2, r3
  008d8	e5913000	 ldr         r3, [r1]
  008dc	e0432002	 sub         r2, r3, r2
  008e0	e59d300c	 ldr         r3, [sp, #0xC]
  008e4	e2833008	 add         r3, r3, #8
  008e8	e5832000	 str         r2, [r3]
  008ec		 |$LN3@ClipNoScal@2|

; 534  :       prclDst->right = prclClip->right;

  008ec	e59d3010	 ldr         r3, [sp, #0x10]
  008f0	e2831008	 add         r1, r3, #8
  008f4	e59d3008	 ldr         r3, [sp, #8]
  008f8	e2832008	 add         r2, r3, #8
  008fc	e5913000	 ldr         r3, [r1]
  00900	e5823000	 str         r3, [r2]
  00904		 |$LN4@ClipNoScal@2|

; 535  :     }
; 536  :     if(prclClip->bottom < prclDst->bottom)

  00904	e59d3010	 ldr         r3, [sp, #0x10]
  00908	e283200c	 add         r2, r3, #0xC
  0090c	e59d3008	 ldr         r3, [sp, #8]
  00910	e283300c	 add         r3, r3, #0xC
  00914	e5922000	 ldr         r2, [r2]
  00918	e5933000	 ldr         r3, [r3]
  0091c	e1520003	 cmp         r2, r3
  00920	aa000016	 bge         |$LN2@ClipNoScal@2|

; 537  :     {
; 538  :       if(prclSrc)

  00924	e59d300c	 ldr         r3, [sp, #0xC]
  00928	e3530000	 cmp         r3, #0
  0092c	0a00000d	 beq         |$LN1@ClipNoScal@2|

; 539  :         prclSrc->bottom -= prclDst->bottom - prclClip->bottom;

  00930	e59d300c	 ldr         r3, [sp, #0xC]
  00934	e283100c	 add         r1, r3, #0xC
  00938	e59d3008	 ldr         r3, [sp, #8]
  0093c	e283200c	 add         r2, r3, #0xC
  00940	e59d3010	 ldr         r3, [sp, #0x10]
  00944	e283300c	 add         r3, r3, #0xC
  00948	e5922000	 ldr         r2, [r2]
  0094c	e5933000	 ldr         r3, [r3]
  00950	e0422003	 sub         r2, r2, r3
  00954	e5913000	 ldr         r3, [r1]
  00958	e0432002	 sub         r2, r3, r2
  0095c	e59d300c	 ldr         r3, [sp, #0xC]
  00960	e283300c	 add         r3, r3, #0xC
  00964	e5832000	 str         r2, [r3]
  00968		 |$LN1@ClipNoScal@2|

; 540  :       prclDst->bottom = prclClip->bottom;

  00968	e59d3010	 ldr         r3, [sp, #0x10]
  0096c	e283100c	 add         r1, r3, #0xC
  00970	e59d3008	 ldr         r3, [sp, #8]
  00974	e283200c	 add         r2, r3, #0xC
  00978	e5913000	 ldr         r3, [r1]
  0097c	e5823000	 str         r3, [r2]
  00980		 |$LN2@ClipNoScal@2|
  00980		 |$LN9@ClipNoScal@2|

; 541  :     }
; 542  :   }
; 543  : }

  00980	e89d6000	 ldmia       sp, {sp, lr}
  00984	e12fff1e	 bx          lr
  00988		 |$M43113|

			 ENDP  ; |?ClipNoScale@@YAXPAU_RECTL@@0PBU1@@Z|, ClipNoScale

	EXPORT	|?ClipNoScale@@YAXPAU_RECTL@@0PAU_POINTL@@PBU1@@Z| ; ClipNoScale

  00018			 AREA	 |.pdata|, PDATA
|$T43120| DCD	|$LN16@ClipNoScal@3|
	DCD	0x40009d04
; Function compile flags: /Odtp

  00988			 AREA	 |.text|, CODE, ARM

  00988		 |?ClipNoScale@@YAXPAU_RECTL@@0PAU_POINTL@@PBU1@@Z| PROC ; ClipNoScale

; 549  : {

  00988		 |$LN16@ClipNoScal@3|
  00988	e1a0c00d	 mov         r12, sp
  0098c	e92d000f	 stmdb       sp!, {r0 - r3}
  00990	e92d5000	 stmdb       sp!, {r12, lr}
  00994	e24dd010	 sub         sp, sp, #0x10
  00998		 |$M43117|

; 550  :   if(prclDst && prclClip)

  00998	e59d3018	 ldr         r3, [sp, #0x18]
  0099c	e3530000	 cmp         r3, #0
  009a0	0a000092	 beq         |$LN11@ClipNoScal@3|
  009a4	e59d3024	 ldr         r3, [sp, #0x24]
  009a8	e3530000	 cmp         r3, #0
  009ac	0a00008f	 beq         |$LN11@ClipNoScal@3|

; 551  :   {
; 552  :     if(prclClip->left > prclDst->left)

  009b0	e59d3024	 ldr         r3, [sp, #0x24]
  009b4	e5932000	 ldr         r2, [r3]
  009b8	e59d3018	 ldr         r3, [sp, #0x18]
  009bc	e5933000	 ldr         r3, [r3]
  009c0	e1520003	 cmp         r2, r3
  009c4	da00001b	 ble         |$LN10@ClipNoScal@3|

; 553  :     {
; 554  :       long leftclip = prclClip->left - prclDst->left;

  009c8	e59d3024	 ldr         r3, [sp, #0x24]
  009cc	e5932000	 ldr         r2, [r3]
  009d0	e59d3018	 ldr         r3, [sp, #0x18]
  009d4	e5933000	 ldr         r3, [r3]
  009d8	e0423003	 sub         r3, r2, r3
  009dc	e58d3000	 str         r3, [sp]

; 555  :       if(prclSrc)

  009e0	e59d301c	 ldr         r3, [sp, #0x1C]
  009e4	e3530000	 cmp         r3, #0
  009e8	0a000005	 beq         |$LN9@ClipNoScal@3|

; 556  :         prclSrc->left += leftclip;

  009ec	e59d301c	 ldr         r3, [sp, #0x1C]
  009f0	e5932000	 ldr         r2, [r3]
  009f4	e59d3000	 ldr         r3, [sp]
  009f8	e0822003	 add         r2, r2, r3
  009fc	e59d301c	 ldr         r3, [sp, #0x1C]
  00a00	e5832000	 str         r2, [r3]
  00a04		 |$LN9@ClipNoScal@3|

; 557  :       if(pptlBrush)

  00a04	e59d3020	 ldr         r3, [sp, #0x20]
  00a08	e3530000	 cmp         r3, #0
  00a0c	0a000005	 beq         |$LN8@ClipNoScal@3|

; 558  :         pptlBrush->x += leftclip;

  00a10	e59d3020	 ldr         r3, [sp, #0x20]
  00a14	e5932000	 ldr         r2, [r3]
  00a18	e59d3000	 ldr         r3, [sp]
  00a1c	e0822003	 add         r2, r2, r3
  00a20	e59d3020	 ldr         r3, [sp, #0x20]
  00a24	e5832000	 str         r2, [r3]
  00a28		 |$LN8@ClipNoScal@3|

; 559  :       prclDst->left = prclClip->left;

  00a28	e59d3024	 ldr         r3, [sp, #0x24]
  00a2c	e5932000	 ldr         r2, [r3]
  00a30	e59d3018	 ldr         r3, [sp, #0x18]
  00a34	e5832000	 str         r2, [r3]
  00a38		 |$LN10@ClipNoScal@3|

; 560  :     }
; 561  :     if(prclClip->top > prclDst->top)

  00a38	e59d3024	 ldr         r3, [sp, #0x24]
  00a3c	e2832004	 add         r2, r3, #4
  00a40	e59d3018	 ldr         r3, [sp, #0x18]
  00a44	e2833004	 add         r3, r3, #4
  00a48	e5922000	 ldr         r2, [r2]
  00a4c	e5933000	 ldr         r3, [r3]
  00a50	e1520003	 cmp         r2, r3
  00a54	da000023	 ble         |$LN7@ClipNoScal@3|

; 562  :     {
; 563  :       long topclip = prclClip->top - prclDst->top;

  00a58	e59d3024	 ldr         r3, [sp, #0x24]
  00a5c	e2832004	 add         r2, r3, #4
  00a60	e59d3018	 ldr         r3, [sp, #0x18]
  00a64	e2833004	 add         r3, r3, #4
  00a68	e5922000	 ldr         r2, [r2]
  00a6c	e5933000	 ldr         r3, [r3]
  00a70	e0423003	 sub         r3, r2, r3
  00a74	e58d3004	 str         r3, [sp, #4]

; 564  :       if(prclSrc)

  00a78	e59d301c	 ldr         r3, [sp, #0x1C]
  00a7c	e3530000	 cmp         r3, #0
  00a80	0a000007	 beq         |$LN6@ClipNoScal@3|

; 565  :         prclSrc->top += topclip;

  00a84	e59d301c	 ldr         r3, [sp, #0x1C]
  00a88	e2833004	 add         r3, r3, #4
  00a8c	e5932000	 ldr         r2, [r3]
  00a90	e59d3004	 ldr         r3, [sp, #4]
  00a94	e0822003	 add         r2, r2, r3
  00a98	e59d301c	 ldr         r3, [sp, #0x1C]
  00a9c	e2833004	 add         r3, r3, #4
  00aa0	e5832000	 str         r2, [r3]
  00aa4		 |$LN6@ClipNoScal@3|

; 566  :       if(pptlBrush)

  00aa4	e59d3020	 ldr         r3, [sp, #0x20]
  00aa8	e3530000	 cmp         r3, #0
  00aac	0a000007	 beq         |$LN5@ClipNoScal@3|

; 567  :         pptlBrush->y += topclip;

  00ab0	e59d3020	 ldr         r3, [sp, #0x20]
  00ab4	e2833004	 add         r3, r3, #4
  00ab8	e5932000	 ldr         r2, [r3]
  00abc	e59d3004	 ldr         r3, [sp, #4]
  00ac0	e0822003	 add         r2, r2, r3
  00ac4	e59d3020	 ldr         r3, [sp, #0x20]
  00ac8	e2833004	 add         r3, r3, #4
  00acc	e5832000	 str         r2, [r3]
  00ad0		 |$LN5@ClipNoScal@3|

; 568  :       prclDst->top = prclClip->top;

  00ad0	e59d3024	 ldr         r3, [sp, #0x24]
  00ad4	e2831004	 add         r1, r3, #4
  00ad8	e59d3018	 ldr         r3, [sp, #0x18]
  00adc	e2832004	 add         r2, r3, #4
  00ae0	e5913000	 ldr         r3, [r1]
  00ae4	e5823000	 str         r3, [r2]
  00ae8		 |$LN7@ClipNoScal@3|

; 569  :     }
; 570  :     if(prclClip->right < prclDst->right)

  00ae8	e59d3024	 ldr         r3, [sp, #0x24]
  00aec	e2832008	 add         r2, r3, #8
  00af0	e59d3018	 ldr         r3, [sp, #0x18]
  00af4	e2833008	 add         r3, r3, #8
  00af8	e5922000	 ldr         r2, [r2]
  00afc	e5933000	 ldr         r3, [r3]
  00b00	e1520003	 cmp         r2, r3
  00b04	aa000018	 bge         |$LN4@ClipNoScal@3|

; 571  :     {
; 572  :       long rightclip = prclDst->right - prclClip->right;

  00b08	e59d3018	 ldr         r3, [sp, #0x18]
  00b0c	e2832008	 add         r2, r3, #8
  00b10	e59d3024	 ldr         r3, [sp, #0x24]
  00b14	e2833008	 add         r3, r3, #8
  00b18	e5922000	 ldr         r2, [r2]
  00b1c	e5933000	 ldr         r3, [r3]
  00b20	e0423003	 sub         r3, r2, r3
  00b24	e58d3008	 str         r3, [sp, #8]

; 573  :       if(prclSrc)

  00b28	e59d301c	 ldr         r3, [sp, #0x1C]
  00b2c	e3530000	 cmp         r3, #0
  00b30	0a000007	 beq         |$LN3@ClipNoScal@3|

; 574  :         prclSrc->right -= rightclip;

  00b34	e59d301c	 ldr         r3, [sp, #0x1C]
  00b38	e2833008	 add         r3, r3, #8
  00b3c	e5932000	 ldr         r2, [r3]
  00b40	e59d3008	 ldr         r3, [sp, #8]
  00b44	e0422003	 sub         r2, r2, r3
  00b48	e59d301c	 ldr         r3, [sp, #0x1C]
  00b4c	e2833008	 add         r3, r3, #8
  00b50	e5832000	 str         r2, [r3]
  00b54		 |$LN3@ClipNoScal@3|

; 575  :       prclDst->right = prclClip->right;

  00b54	e59d3024	 ldr         r3, [sp, #0x24]
  00b58	e2831008	 add         r1, r3, #8
  00b5c	e59d3018	 ldr         r3, [sp, #0x18]
  00b60	e2832008	 add         r2, r3, #8
  00b64	e5913000	 ldr         r3, [r1]
  00b68	e5823000	 str         r3, [r2]
  00b6c		 |$LN4@ClipNoScal@3|

; 576  :     }
; 577  :     if(prclClip->bottom < prclDst->bottom)

  00b6c	e59d3024	 ldr         r3, [sp, #0x24]
  00b70	e283200c	 add         r2, r3, #0xC
  00b74	e59d3018	 ldr         r3, [sp, #0x18]
  00b78	e283300c	 add         r3, r3, #0xC
  00b7c	e5922000	 ldr         r2, [r2]
  00b80	e5933000	 ldr         r3, [r3]
  00b84	e1520003	 cmp         r2, r3
  00b88	aa000018	 bge         |$LN2@ClipNoScal@3|

; 578  :     {
; 579  :       long bottomclip = prclDst->bottom - prclClip->bottom;

  00b8c	e59d3018	 ldr         r3, [sp, #0x18]
  00b90	e283200c	 add         r2, r3, #0xC
  00b94	e59d3024	 ldr         r3, [sp, #0x24]
  00b98	e283300c	 add         r3, r3, #0xC
  00b9c	e5922000	 ldr         r2, [r2]
  00ba0	e5933000	 ldr         r3, [r3]
  00ba4	e0423003	 sub         r3, r2, r3
  00ba8	e58d300c	 str         r3, [sp, #0xC]

; 580  :       if(prclSrc)

  00bac	e59d301c	 ldr         r3, [sp, #0x1C]
  00bb0	e3530000	 cmp         r3, #0
  00bb4	0a000007	 beq         |$LN1@ClipNoScal@3|

; 581  :         prclSrc->bottom -= bottomclip;

  00bb8	e59d301c	 ldr         r3, [sp, #0x1C]
  00bbc	e283300c	 add         r3, r3, #0xC
  00bc0	e5932000	 ldr         r2, [r3]
  00bc4	e59d300c	 ldr         r3, [sp, #0xC]
  00bc8	e0422003	 sub         r2, r2, r3
  00bcc	e59d301c	 ldr         r3, [sp, #0x1C]
  00bd0	e283300c	 add         r3, r3, #0xC
  00bd4	e5832000	 str         r2, [r3]
  00bd8		 |$LN1@ClipNoScal@3|

; 582  :       prclDst->bottom = prclClip->bottom;

  00bd8	e59d3024	 ldr         r3, [sp, #0x24]
  00bdc	e283100c	 add         r1, r3, #0xC
  00be0	e59d3018	 ldr         r3, [sp, #0x18]
  00be4	e283200c	 add         r2, r3, #0xC
  00be8	e5913000	 ldr         r3, [r1]
  00bec	e5823000	 str         r3, [r2]
  00bf0		 |$LN2@ClipNoScal@3|
  00bf0		 |$LN11@ClipNoScal@3|

; 583  :     }
; 584  :   }
; 585  : }

  00bf0	e28dd010	 add         sp, sp, #0x10
  00bf4	e89d6000	 ldmia       sp, {sp, lr}
  00bf8	e12fff1e	 bx          lr
  00bfc		 |$M43118|

			 ENDP  ; |?ClipNoScale@@YAXPAU_RECTL@@0PAU_POINTL@@PBU1@@Z|, ClipNoScale

	EXPORT	|?ClipNoScale@@YAXPAU_RECTL@@0PAU_POINTL@@0PBU1@@Z| ; ClipNoScale

  00020			 AREA	 |.pdata|, PDATA
|$T43125| DCD	|$LN20@ClipNoScal@4|
	DCD	0x4000c704
; Function compile flags: /Odtp

  00bfc			 AREA	 |.text|, CODE, ARM

  00bfc		 |?ClipNoScale@@YAXPAU_RECTL@@0PAU_POINTL@@0PBU1@@Z| PROC ; ClipNoScale

; 592  : {

  00bfc		 |$LN20@ClipNoScal@4|
  00bfc	e1a0c00d	 mov         r12, sp
  00c00	e92d000f	 stmdb       sp!, {r0 - r3}
  00c04	e92d5000	 stmdb       sp!, {r12, lr}
  00c08	e24dd010	 sub         sp, sp, #0x10
  00c0c		 |$M43122|

; 593  :   if(prclDst && prclClip)

  00c0c	e59d3018	 ldr         r3, [sp, #0x18]
  00c10	e3530000	 cmp         r3, #0
  00c14	0a0000bc	 beq         |$LN15@ClipNoScal@4|
  00c18	e59d3028	 ldr         r3, [sp, #0x28]
  00c1c	e3530000	 cmp         r3, #0
  00c20	0a0000b9	 beq         |$LN15@ClipNoScal@4|

; 594  :   {
; 595  :     if(prclClip->left > prclDst->left)

  00c24	e59d3028	 ldr         r3, [sp, #0x28]
  00c28	e5932000	 ldr         r2, [r3]
  00c2c	e59d3018	 ldr         r3, [sp, #0x18]
  00c30	e5933000	 ldr         r3, [r3]
  00c34	e1520003	 cmp         r2, r3
  00c38	da000024	 ble         |$LN14@ClipNoScal@4|

; 596  :     {
; 597  :       long leftclip = prclClip->left - prclDst->left;

  00c3c	e59d3028	 ldr         r3, [sp, #0x28]
  00c40	e5932000	 ldr         r2, [r3]
  00c44	e59d3018	 ldr         r3, [sp, #0x18]
  00c48	e5933000	 ldr         r3, [r3]
  00c4c	e0423003	 sub         r3, r2, r3
  00c50	e58d3000	 str         r3, [sp]

; 598  :       if(prclSrc)

  00c54	e59d301c	 ldr         r3, [sp, #0x1C]
  00c58	e3530000	 cmp         r3, #0
  00c5c	0a000005	 beq         |$LN13@ClipNoScal@4|

; 599  :         prclSrc->left += leftclip;

  00c60	e59d301c	 ldr         r3, [sp, #0x1C]
  00c64	e5932000	 ldr         r2, [r3]
  00c68	e59d3000	 ldr         r3, [sp]
  00c6c	e0822003	 add         r2, r2, r3
  00c70	e59d301c	 ldr         r3, [sp, #0x1C]
  00c74	e5832000	 str         r2, [r3]
  00c78		 |$LN13@ClipNoScal@4|

; 600  :       if(pptlBrush)

  00c78	e59d3020	 ldr         r3, [sp, #0x20]
  00c7c	e3530000	 cmp         r3, #0
  00c80	0a000005	 beq         |$LN12@ClipNoScal@4|

; 601  :         pptlBrush->x += leftclip;

  00c84	e59d3020	 ldr         r3, [sp, #0x20]
  00c88	e5932000	 ldr         r2, [r3]
  00c8c	e59d3000	 ldr         r3, [sp]
  00c90	e0822003	 add         r2, r2, r3
  00c94	e59d3020	 ldr         r3, [sp, #0x20]
  00c98	e5832000	 str         r2, [r3]
  00c9c		 |$LN12@ClipNoScal@4|

; 602  :       if(prclMask)

  00c9c	e59d3024	 ldr         r3, [sp, #0x24]
  00ca0	e3530000	 cmp         r3, #0
  00ca4	0a000005	 beq         |$LN11@ClipNoScal@4|

; 603  :         prclMask->left += leftclip;

  00ca8	e59d3024	 ldr         r3, [sp, #0x24]
  00cac	e5932000	 ldr         r2, [r3]
  00cb0	e59d3000	 ldr         r3, [sp]
  00cb4	e0822003	 add         r2, r2, r3
  00cb8	e59d3024	 ldr         r3, [sp, #0x24]
  00cbc	e5832000	 str         r2, [r3]
  00cc0		 |$LN11@ClipNoScal@4|

; 604  :       prclDst->left = prclClip->left;

  00cc0	e59d3028	 ldr         r3, [sp, #0x28]
  00cc4	e5932000	 ldr         r2, [r3]
  00cc8	e59d3018	 ldr         r3, [sp, #0x18]
  00ccc	e5832000	 str         r2, [r3]
  00cd0		 |$LN14@ClipNoScal@4|

; 605  :     }
; 606  :     if(prclClip->top > prclDst->top)

  00cd0	e59d3028	 ldr         r3, [sp, #0x28]
  00cd4	e2832004	 add         r2, r3, #4
  00cd8	e59d3018	 ldr         r3, [sp, #0x18]
  00cdc	e2833004	 add         r3, r3, #4
  00ce0	e5922000	 ldr         r2, [r2]
  00ce4	e5933000	 ldr         r3, [r3]
  00ce8	e1520003	 cmp         r2, r3
  00cec	da00002e	 ble         |$LN10@ClipNoScal@4|

; 607  :     {
; 608  :       long topclip = prclClip->top - prclDst->top;

  00cf0	e59d3028	 ldr         r3, [sp, #0x28]
  00cf4	e2832004	 add         r2, r3, #4
  00cf8	e59d3018	 ldr         r3, [sp, #0x18]
  00cfc	e2833004	 add         r3, r3, #4
  00d00	e5922000	 ldr         r2, [r2]
  00d04	e5933000	 ldr         r3, [r3]
  00d08	e0423003	 sub         r3, r2, r3
  00d0c	e58d3004	 str         r3, [sp, #4]

; 609  :       if(prclSrc)

  00d10	e59d301c	 ldr         r3, [sp, #0x1C]
  00d14	e3530000	 cmp         r3, #0
  00d18	0a000007	 beq         |$LN9@ClipNoScal@4|

; 610  :         prclSrc->top += topclip;

  00d1c	e59d301c	 ldr         r3, [sp, #0x1C]
  00d20	e2833004	 add         r3, r3, #4
  00d24	e5932000	 ldr         r2, [r3]
  00d28	e59d3004	 ldr         r3, [sp, #4]
  00d2c	e0822003	 add         r2, r2, r3
  00d30	e59d301c	 ldr         r3, [sp, #0x1C]
  00d34	e2833004	 add         r3, r3, #4
  00d38	e5832000	 str         r2, [r3]
  00d3c		 |$LN9@ClipNoScal@4|

; 611  :       if(pptlBrush)

  00d3c	e59d3020	 ldr         r3, [sp, #0x20]
  00d40	e3530000	 cmp         r3, #0
  00d44	0a000007	 beq         |$LN8@ClipNoScal@4|

; 612  :         pptlBrush->y += topclip;

  00d48	e59d3020	 ldr         r3, [sp, #0x20]
  00d4c	e2833004	 add         r3, r3, #4
  00d50	e5932000	 ldr         r2, [r3]
  00d54	e59d3004	 ldr         r3, [sp, #4]
  00d58	e0822003	 add         r2, r2, r3
  00d5c	e59d3020	 ldr         r3, [sp, #0x20]
  00d60	e2833004	 add         r3, r3, #4
  00d64	e5832000	 str         r2, [r3]
  00d68		 |$LN8@ClipNoScal@4|

; 613  :       if(prclMask)

  00d68	e59d3024	 ldr         r3, [sp, #0x24]
  00d6c	e3530000	 cmp         r3, #0
  00d70	0a000007	 beq         |$LN7@ClipNoScal@4|

; 614  :         prclMask->top += topclip;

  00d74	e59d3024	 ldr         r3, [sp, #0x24]
  00d78	e2833004	 add         r3, r3, #4
  00d7c	e5932000	 ldr         r2, [r3]
  00d80	e59d3004	 ldr         r3, [sp, #4]
  00d84	e0822003	 add         r2, r2, r3
  00d88	e59d3024	 ldr         r3, [sp, #0x24]
  00d8c	e2833004	 add         r3, r3, #4
  00d90	e5832000	 str         r2, [r3]
  00d94		 |$LN7@ClipNoScal@4|

; 615  :       prclDst->top = prclClip->top;

  00d94	e59d3028	 ldr         r3, [sp, #0x28]
  00d98	e2831004	 add         r1, r3, #4
  00d9c	e59d3018	 ldr         r3, [sp, #0x18]
  00da0	e2832004	 add         r2, r3, #4
  00da4	e5913000	 ldr         r3, [r1]
  00da8	e5823000	 str         r3, [r2]
  00dac		 |$LN10@ClipNoScal@4|

; 616  :     }
; 617  :     if(prclClip->right < prclDst->right)

  00dac	e59d3028	 ldr         r3, [sp, #0x28]
  00db0	e2832008	 add         r2, r3, #8
  00db4	e59d3018	 ldr         r3, [sp, #0x18]
  00db8	e2833008	 add         r3, r3, #8
  00dbc	e5922000	 ldr         r2, [r2]
  00dc0	e5933000	 ldr         r3, [r3]
  00dc4	e1520003	 cmp         r2, r3
  00dc8	aa000023	 bge         |$LN6@ClipNoScal@4|

; 618  :     {
; 619  :       long rightclip = prclDst->right - prclClip->right;

  00dcc	e59d3018	 ldr         r3, [sp, #0x18]
  00dd0	e2832008	 add         r2, r3, #8
  00dd4	e59d3028	 ldr         r3, [sp, #0x28]
  00dd8	e2833008	 add         r3, r3, #8
  00ddc	e5922000	 ldr         r2, [r2]
  00de0	e5933000	 ldr         r3, [r3]
  00de4	e0423003	 sub         r3, r2, r3
  00de8	e58d3008	 str         r3, [sp, #8]

; 620  :       if(prclSrc)

  00dec	e59d301c	 ldr         r3, [sp, #0x1C]
  00df0	e3530000	 cmp         r3, #0
  00df4	0a000007	 beq         |$LN5@ClipNoScal@4|

; 621  :         prclSrc->right -= rightclip;

  00df8	e59d301c	 ldr         r3, [sp, #0x1C]
  00dfc	e2833008	 add         r3, r3, #8
  00e00	e5932000	 ldr         r2, [r3]
  00e04	e59d3008	 ldr         r3, [sp, #8]
  00e08	e0422003	 sub         r2, r2, r3
  00e0c	e59d301c	 ldr         r3, [sp, #0x1C]
  00e10	e2833008	 add         r3, r3, #8
  00e14	e5832000	 str         r2, [r3]
  00e18		 |$LN5@ClipNoScal@4|

; 622  :       if(prclMask)

  00e18	e59d3024	 ldr         r3, [sp, #0x24]
  00e1c	e3530000	 cmp         r3, #0
  00e20	0a000007	 beq         |$LN4@ClipNoScal@4|

; 623  :         prclMask->right -= rightclip;

  00e24	e59d3024	 ldr         r3, [sp, #0x24]
  00e28	e2833008	 add         r3, r3, #8
  00e2c	e5932000	 ldr         r2, [r3]
  00e30	e59d3008	 ldr         r3, [sp, #8]
  00e34	e0422003	 sub         r2, r2, r3
  00e38	e59d3024	 ldr         r3, [sp, #0x24]
  00e3c	e2833008	 add         r3, r3, #8
  00e40	e5832000	 str         r2, [r3]
  00e44		 |$LN4@ClipNoScal@4|

; 624  :       prclDst->right = prclClip->right;

  00e44	e59d3028	 ldr         r3, [sp, #0x28]
  00e48	e2831008	 add         r1, r3, #8
  00e4c	e59d3018	 ldr         r3, [sp, #0x18]
  00e50	e2832008	 add         r2, r3, #8
  00e54	e5913000	 ldr         r3, [r1]
  00e58	e5823000	 str         r3, [r2]
  00e5c		 |$LN6@ClipNoScal@4|

; 625  :     }
; 626  :     if(prclClip->bottom < prclDst->bottom)

  00e5c	e59d3028	 ldr         r3, [sp, #0x28]
  00e60	e283200c	 add         r2, r3, #0xC
  00e64	e59d3018	 ldr         r3, [sp, #0x18]
  00e68	e283300c	 add         r3, r3, #0xC
  00e6c	e5922000	 ldr         r2, [r2]
  00e70	e5933000	 ldr         r3, [r3]
  00e74	e1520003	 cmp         r2, r3
  00e78	aa000023	 bge         |$LN3@ClipNoScal@4|

; 627  :     {
; 628  :       long bottomclip = prclDst->bottom - prclClip->bottom;

  00e7c	e59d3018	 ldr         r3, [sp, #0x18]
  00e80	e283200c	 add         r2, r3, #0xC
  00e84	e59d3028	 ldr         r3, [sp, #0x28]
  00e88	e283300c	 add         r3, r3, #0xC
  00e8c	e5922000	 ldr         r2, [r2]
  00e90	e5933000	 ldr         r3, [r3]
  00e94	e0423003	 sub         r3, r2, r3
  00e98	e58d300c	 str         r3, [sp, #0xC]

; 629  :       if(prclSrc)

  00e9c	e59d301c	 ldr         r3, [sp, #0x1C]
  00ea0	e3530000	 cmp         r3, #0
  00ea4	0a000007	 beq         |$LN2@ClipNoScal@4|

; 630  :         prclSrc->bottom -= bottomclip;

  00ea8	e59d301c	 ldr         r3, [sp, #0x1C]
  00eac	e283300c	 add         r3, r3, #0xC
  00eb0	e5932000	 ldr         r2, [r3]
  00eb4	e59d300c	 ldr         r3, [sp, #0xC]
  00eb8	e0422003	 sub         r2, r2, r3
  00ebc	e59d301c	 ldr         r3, [sp, #0x1C]
  00ec0	e283300c	 add         r3, r3, #0xC
  00ec4	e5832000	 str         r2, [r3]
  00ec8		 |$LN2@ClipNoScal@4|

; 631  :       if(prclMask)

  00ec8	e59d3024	 ldr         r3, [sp, #0x24]
  00ecc	e3530000	 cmp         r3, #0
  00ed0	0a000007	 beq         |$LN1@ClipNoScal@4|

; 632  :         prclMask->bottom -= bottomclip;

  00ed4	e59d3024	 ldr         r3, [sp, #0x24]
  00ed8	e283300c	 add         r3, r3, #0xC
  00edc	e5932000	 ldr         r2, [r3]
  00ee0	e59d300c	 ldr         r3, [sp, #0xC]
  00ee4	e0422003	 sub         r2, r2, r3
  00ee8	e59d3024	 ldr         r3, [sp, #0x24]
  00eec	e283300c	 add         r3, r3, #0xC
  00ef0	e5832000	 str         r2, [r3]
  00ef4		 |$LN1@ClipNoScal@4|

; 633  :       prclDst->bottom = prclClip->bottom;

  00ef4	e59d3028	 ldr         r3, [sp, #0x28]
  00ef8	e283100c	 add         r1, r3, #0xC
  00efc	e59d3018	 ldr         r3, [sp, #0x18]
  00f00	e283200c	 add         r2, r3, #0xC
  00f04	e5913000	 ldr         r3, [r1]
  00f08	e5823000	 str         r3, [r2]
  00f0c		 |$LN3@ClipNoScal@4|
  00f0c		 |$LN15@ClipNoScal@4|

; 634  :     }
; 635  :   }
; 636  : }

  00f0c	e28dd010	 add         sp, sp, #0x10
  00f10	e89d6000	 ldmia       sp, {sp, lr}
  00f14	e12fff1e	 bx          lr
  00f18		 |$M43123|

			 ENDP  ; |?ClipNoScale@@YAXPAU_RECTL@@0PAU_POINTL@@0PBU1@@Z|, ClipNoScale

	EXPORT	|?AdjustForBottomUp@@YAXAAPAXAAJKAAU_RECTL@@01K2@Z| ; AdjustForBottomUp

  00028			 AREA	 |.pdata|, PDATA
|$T43130| DCD	|$LN5@AdjustForB|
	DCD	0x40004904
; Function compile flags: /Odtp

  00f18			 AREA	 |.text|, CODE, ARM

  00f18		 |?AdjustForBottomUp@@YAXAAPAXAAJKAAU_RECTL@@01K2@Z| PROC ; AdjustForBottomUp

; 647  : {

  00f18		 |$LN5@AdjustForB|
  00f18	e1a0c00d	 mov         r12, sp
  00f1c	e92d000f	 stmdb       sp!, {r0 - r3}
  00f20	e92d5000	 stmdb       sp!, {r12, lr}
  00f24	e24dd004	 sub         sp, sp, #4
  00f28		 |$M43127|

; 648  :   long tmp = rclDst.bottom;

  00f28	e59d3018	 ldr         r3, [sp, #0x18]
  00f2c	e283300c	 add         r3, r3, #0xC
  00f30	e5933000	 ldr         r3, [r3]
  00f34	e58d3000	 str         r3, [sp]

; 649  :   rclDst.bottom = dstheight - rclDst.top;

  00f38	e59d3018	 ldr         r3, [sp, #0x18]
  00f3c	e2833004	 add         r3, r3, #4
  00f40	e59d2014	 ldr         r2, [sp, #0x14]
  00f44	e5933000	 ldr         r3, [r3]
  00f48	e0422003	 sub         r2, r2, r3
  00f4c	e59d3018	 ldr         r3, [sp, #0x18]
  00f50	e283300c	 add         r3, r3, #0xC
  00f54	e5832000	 str         r2, [r3]

; 650  :   rclDst.top = dstheight - tmp;

  00f58	e59d2014	 ldr         r2, [sp, #0x14]
  00f5c	e59d3000	 ldr         r3, [sp]
  00f60	e0422003	 sub         r2, r2, r3
  00f64	e59d3018	 ldr         r3, [sp, #0x18]
  00f68	e2833004	 add         r3, r3, #4
  00f6c	e5832000	 str         r2, [r3]

; 651  :   tmp = rclSrc.bottom;

  00f70	e59d3028	 ldr         r3, [sp, #0x28]
  00f74	e283300c	 add         r3, r3, #0xC
  00f78	e5933000	 ldr         r3, [r3]
  00f7c	e58d3000	 str         r3, [sp]

; 652  :   rclSrc.bottom = srcheight - rclSrc.top;

  00f80	e59d3028	 ldr         r3, [sp, #0x28]
  00f84	e2833004	 add         r3, r3, #4
  00f88	e59d2024	 ldr         r2, [sp, #0x24]
  00f8c	e5933000	 ldr         r3, [r3]
  00f90	e0422003	 sub         r2, r2, r3
  00f94	e59d3028	 ldr         r3, [sp, #0x28]
  00f98	e283300c	 add         r3, r3, #0xC
  00f9c	e5832000	 str         r2, [r3]

; 653  :   rclSrc.top = srcheight - tmp;

  00fa0	e59d2024	 ldr         r2, [sp, #0x24]
  00fa4	e59d3000	 ldr         r3, [sp]
  00fa8	e0422003	 sub         r2, r2, r3
  00fac	e59d3028	 ldr         r3, [sp, #0x28]
  00fb0	e2833004	 add         r3, r3, #4
  00fb4	e5832000	 str         r2, [r3]

; 654  :   dststride = -dststride;

  00fb8	e59d3010	 ldr         r3, [sp, #0x10]
  00fbc	e5933000	 ldr         r3, [r3]
  00fc0	e2632000	 rsb         r2, r3, #0
  00fc4	e59d3010	 ldr         r3, [sp, #0x10]
  00fc8	e5832000	 str         r2, [r3]

; 655  :   srcstride = -srcstride;

  00fcc	e59d3020	 ldr         r3, [sp, #0x20]
  00fd0	e5933000	 ldr         r3, [r3]
  00fd4	e2632000	 rsb         r2, r3, #0
  00fd8	e59d3020	 ldr         r3, [sp, #0x20]
  00fdc	e5832000	 str         r2, [r3]

; 656  :   pDst = (void*)((long)pDst - ((dstheight - 1) * dststride));

  00fe0	e59d3014	 ldr         r3, [sp, #0x14]
  00fe4	e2431001	 sub         r1, r3, #1
  00fe8	e59d3010	 ldr         r3, [sp, #0x10]
  00fec	e5933000	 ldr         r3, [r3]
  00ff0	e0020391	 mul         r2, r1, r3
  00ff4	e59d300c	 ldr         r3, [sp, #0xC]
  00ff8	e5933000	 ldr         r3, [r3]
  00ffc	e0432002	 sub         r2, r3, r2
  01000	e59d300c	 ldr         r3, [sp, #0xC]
  01004	e5832000	 str         r2, [r3]

; 657  :   pSrc = (void*)((long)pSrc - ((srcheight - 1) * srcstride));

  01008	e59d3024	 ldr         r3, [sp, #0x24]
  0100c	e2431001	 sub         r1, r3, #1
  01010	e59d3020	 ldr         r3, [sp, #0x20]
  01014	e5933000	 ldr         r3, [r3]
  01018	e0020391	 mul         r2, r1, r3
  0101c	e59d301c	 ldr         r3, [sp, #0x1C]
  01020	e5933000	 ldr         r3, [r3]
  01024	e0432002	 sub         r2, r3, r2
  01028	e59d301c	 ldr         r3, [sp, #0x1C]
  0102c	e5832000	 str         r2, [r3]

; 658  : }

  01030	e28dd004	 add         sp, sp, #4
  01034	e89d6000	 ldmia       sp, {sp, lr}
  01038	e12fff1e	 bx          lr
  0103c		 |$M43128|

			 ENDP  ; |?AdjustForBottomUp@@YAXAAPAXAAJKAAU_RECTL@@01K2@Z|, AdjustForBottomUp

	EXPORT	|?DesignateBltROP1@OMAPDDGPE@@QAAXPAUGPEBltParms@@K@Z| ; OMAPDDGPE::DesignateBltROP1
	EXPORT	|?DesignateBltROP2@OMAPDDGPE@@QAAXPAUGPEBltParms@@K@Z| ; OMAPDDGPE::DesignateBltROP2
	EXPORT	|?DesignateBltROP3@OMAPDDGPE@@QAAXPAUGPEBltParms@@K@Z| ; OMAPDDGPE::DesignateBltROP3
	EXPORT	|?DesignateBlt@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| ; OMAPDDGPE::DesignateBlt
	IMPORT	|?EmulatedBlt@GPE@@QAAJPAUGPEBltParms@@@Z| ; GPE::EmulatedBlt

  00030			 AREA	 |.pdata|, PDATA
|$T43136| DCD	|$LN11@DesignateB|
	DCD	0x40004804
; Function compile flags: /Odtp

  0103c			 AREA	 |.text|, CODE, ARM

  0103c		 |?DesignateBlt@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::DesignateBlt

; 662  : {

  0103c		 |$LN11@DesignateB|
  0103c	e1a0c00d	 mov         r12, sp
  01040	e92d0003	 stmdb       sp!, {r0, r1}
  01044	e92d5000	 stmdb       sp!, {r12, lr}
  01048	e24dd020	 sub         sp, sp, #0x20
  0104c		 |$M43133|

; 663  : #if 0
; 664  :   RETAILMSG(1, (TEXT("****** BLT ******\n")));
; 665  :   DumpParms(pParms);
; 666  : #endif
; 667  : 
; 668  :   BLTFN pfnSavedBlt = pParms->pBlt;

  0104c	e59d302c	 ldr         r3, [sp, #0x2C]
  01050	e5933000	 ldr         r3, [r3]
  01054	e58d3004	 str         r3, [sp, #4]

; 669  : 
; 670  :   // Default to base emulated routine
; 671  :   pParms->pBlt = &GPE::EmulatedBlt;

  01058	e59f20f8	 ldr         r2, [pc, #0xF8]
  0105c	e59d302c	 ldr         r3, [sp, #0x2C]
  01060	e5832000	 str         r2, [r3]

; 672  : 
; 673  :   ROP4 rop4 = pParms->rop4;

  01064	e59d302c	 ldr         r3, [sp, #0x2C]
  01068	e2833028	 add         r3, r3, #0x28
  0106c	e5933000	 ldr         r3, [r3]
  01070	e58d3008	 str         r3, [sp, #8]

; 674  : 
; 675  :   ROP4 rop3 = rop4 & 0xFF;

  01074	e59d3008	 ldr         r3, [sp, #8]
  01078	e20330ff	 and         r3, r3, #0xFF
  0107c	e58d3000	 str         r3, [sp]

; 676  :   if((rop4 >> 8) != rop3)

  01080	e59d3008	 ldr         r3, [sp, #8]
  01084	e1a02423	 mov         r2, r3, lsr #8
  01088	e59d3000	 ldr         r3, [sp]
  0108c	e1520003	 cmp         r2, r3
  01090	0a000000	 beq         |$LN6@DesignateB|

; 677  :   {
; 678  :     // NEON BLT is broken, fails CETK GDI Interface test MaskBlt (208)
; 679  :     //DesignateBltROP4(pParms, rop4);
; 680  :   }
; 681  :   else

  01094	ea00001d	 b           |$LN5@DesignateB|
  01098		 |$LN6@DesignateB|

; 682  :   {
; 683  :     ROP4 rop2 = rop3 & 0xF;

  01098	e59d3000	 ldr         r3, [sp]
  0109c	e203300f	 and         r3, r3, #0xF
  010a0	e58d3010	 str         r3, [sp, #0x10]

; 684  :     if((rop3 >> 4) != rop2)

  010a4	e59d3000	 ldr         r3, [sp]
  010a8	e1a02223	 mov         r2, r3, lsr #4
  010ac	e59d3010	 ldr         r3, [sp, #0x10]
  010b0	e1520003	 cmp         r2, r3
  010b4	0a000004	 beq         |$LN4@DesignateB|

; 685  :     {
; 686  :       DesignateBltROP3(pParms, rop4);

  010b8	e59d2008	 ldr         r2, [sp, #8]
  010bc	e59d102c	 ldr         r1, [sp, #0x2C]
  010c0	e59d0028	 ldr         r0, [sp, #0x28]
  010c4	eb000000	 bl          |?DesignateBltROP3@OMAPDDGPE@@QAAXPAUGPEBltParms@@K@Z|

; 687  :     }
; 688  :     else

  010c8	ea000010	 b           |$LN3@DesignateB|
  010cc		 |$LN4@DesignateB|

; 689  :     {
; 690  :       ROP4 rop1 = rop2 & 0x3;

  010cc	e59d3010	 ldr         r3, [sp, #0x10]
  010d0	e2033003	 and         r3, r3, #3
  010d4	e58d3014	 str         r3, [sp, #0x14]

; 691  :       if((rop2 >> 2) != rop1)

  010d8	e59d3010	 ldr         r3, [sp, #0x10]
  010dc	e1a02123	 mov         r2, r3, lsr #2
  010e0	e59d3014	 ldr         r3, [sp, #0x14]
  010e4	e1520003	 cmp         r2, r3
  010e8	0a000004	 beq         |$LN2@DesignateB|

; 692  :       {
; 693  :         DesignateBltROP2(pParms, rop4);

  010ec	e59d2008	 ldr         r2, [sp, #8]
  010f0	e59d102c	 ldr         r1, [sp, #0x2C]
  010f4	e59d0028	 ldr         r0, [sp, #0x28]
  010f8	eb000000	 bl          |?DesignateBltROP2@OMAPDDGPE@@QAAXPAUGPEBltParms@@K@Z|

; 694  :       }
; 695  :       else

  010fc	ea000003	 b           |$LN1@DesignateB|
  01100		 |$LN2@DesignateB|

; 696  :       {
; 697  :         DesignateBltROP1(pParms, rop4);

  01100	e59d2008	 ldr         r2, [sp, #8]
  01104	e59d102c	 ldr         r1, [sp, #0x2C]
  01108	e59d0028	 ldr         r0, [sp, #0x28]
  0110c	eb000000	 bl          |?DesignateBltROP1@OMAPDDGPE@@QAAXPAUGPEBltParms@@K@Z|
  01110		 |$LN1@DesignateB|
  01110		 |$LN3@DesignateB|
  01110		 |$LN5@DesignateB|

; 698  :       }
; 699  :     }
; 700  :   }
; 701  : 
; 702  : #if DEBUG_NEON_MEMORY_LEAK
; 703  :   BLTFN pNeonBlt;
; 704  : 
; 705  :   if (pParms->pBlt != &GPE::EmulatedBlt)
; 706  :   {
; 707  :     m_MemoryStatusBefore.dwLength = sizeof(MEMORYSTATUS);
; 708  :     GlobalMemoryStatus(&m_MemoryStatusBefore);
; 709  :     m_bNeonBlt = TRUE;
; 710  :     pNeonBlt = pParms->pBlt;
; 711  :   }
; 712  : #endif
; 713  : 
; 714  :   // Do the BLT here
; 715  :   SCODE scode = (this->*(pParms->pBlt))(pParms);

  01110	e59d102c	 ldr         r1, [sp, #0x2C]
  01114	e59d0028	 ldr         r0, [sp, #0x28]
  01118	e59d302c	 ldr         r3, [sp, #0x2C]
  0111c	e5933000	 ldr         r3, [r3]
  01120	e1a0e00f	 mov         lr, pc
  01124	e12fff13	 bx          r3
  01128	e58d001c	 str         r0, [sp, #0x1C]
  0112c	e59d301c	 ldr         r3, [sp, #0x1C]
  01130	e58d300c	 str         r3, [sp, #0xC]

; 716  : 
; 717  : #if DEBUG_NEON_MEMORY_LEAK
; 718  :   if (m_bNeonBlt)
; 719  :   {
; 720  :     m_bNeonBlt = FALSE;
; 721  : 
; 722  :     m_MemoryStatusAfter.dwLength = sizeof(MEMORYSTATUS);
; 723  :     GlobalMemoryStatus(&m_MemoryStatusAfter);
; 724  : 
; 725  :     m_dwAvailPhysDelta = m_MemoryStatusAfter.dwAvailPhys - m_MemoryStatusBefore.dwAvailPhys;
; 726  : 	m_dwAvailPageFileDelta = m_MemoryStatusAfter.dwAvailPageFile - m_MemoryStatusBefore.dwAvailPageFile;
; 727  : 
; 728  :     if (m_dwAvailPhysDelta || m_dwAvailPageFileDelta)
; 729  : 	{
; 730  :       TCHAR *pszBltName;
; 731  : 
; 732  :       if (pNeonBlt == &OMAPDDGPE::EmulatedBlockFill8)
; 733  :           pszBltName = L"EmulatedBlockFill8";
; 734  :       else if (pNeonBlt == &OMAPDDGPE::EmulatedBlockCopy8to8)
; 735  :           pszBltName = L"EmulatedBlockCopy8to8";
; 736  :       else if (pNeonBlt == &OMAPDDGPE::EmulatedBlockFill16)
; 737  :           pszBltName = L"EmulatedBlockFill16";
; 738  :       else if (pNeonBlt == &OMAPDDGPE::EmulatedBlockCopyLUT8to16)
; 739  :           pszBltName = L"EmulatedBlockCopyLUT8to16";
; 740  :       else if (pNeonBlt == &OMAPDDGPE::EmulatedBlockCopy16to16)
; 741  :           pszBltName = L"EmulatedBlockCopy16to16";
; 742  :       else if (pNeonBlt == &OMAPDDGPE::EmulatedBlockCopyBGR24toRGB16)
; 743  :           pszBltName = L"EmulatedBlockCopyBGR24toRGB16";
; 744  :       else if (pNeonBlt == &OMAPDDGPE::EmulatedBlockCopyBGRx32toRGB16)
; 745  :           pszBltName = L"EmulatedBlockCopyBGRx32toRGB16";
; 746  :       else if (pNeonBlt == &OMAPDDGPE::EmulatedBlockFill24)
; 747  :           pszBltName = L"EmulatedBlockFill24";
; 748  :       else if (pNeonBlt == &OMAPDDGPE::EmulatedBlockCopyLUT8to24)
; 749  :           pszBltName = L"EmulatedBlockCopyLUT8to24";
; 750  :       else if (pNeonBlt == &OMAPDDGPE::EmulatedBlockCopyRGB16toBGR24)
; 751  :           pszBltName = L"EmulatedBlockCopyRGB16toBGR24";
; 752  :       else if (pNeonBlt == &OMAPDDGPE::EmulatedBlockCopy24to24)
; 753  :           pszBltName = L"EmulatedBlockCopy24to24";
; 754  :       else if (pNeonBlt == &OMAPDDGPE::EmulatedBlockCopyXYZx32toXYZ24)
; 755  :           pszBltName = L"EmulatedBlockCopyXYZx32toXYZ24";
; 756  :       else if (pNeonBlt == &OMAPDDGPE::EmulatedBlockFill32)
; 757  :           pszBltName = L"EmulatedBlockFill32";
; 758  :       else if (pNeonBlt == &OMAPDDGPE::EmulatedBlockCopyLUT8to32)
; 759  :           pszBltName = L"EmulatedBlockCopyLUT8to32";
; 760  :       else if (pNeonBlt == &OMAPDDGPE::EmulatedBlockCopyRGB16toBGRx32)
; 761  :           pszBltName = L"EmulatedBlockCopyRGB16toBGRx32";
; 762  :       else if (pNeonBlt == &OMAPDDGPE::EmulatedBlockCopyXYZ24toXYZx32)
; 763  :           pszBltName = L"EmulatedBlockCopyXYZ24toXYZx32";
; 764  :       else if (pNeonBlt == &OMAPDDGPE::EmulatedBlockCopy32to32)
; 765  :           pszBltName = L"EmulatedBlockCopy32to32";
; 766  :       else if (pNeonBlt == &OMAPDDGPE::EmulatedMaskCopy16to16withA1)
; 767  :           pszBltName = L"EmulatedMaskCopy16to16withA1";
; 768  :       else if (pNeonBlt == &OMAPDDGPE::EmulatedMaskCopy32to32withA1)
; 769  :           pszBltName = L"EmulatedMaskCopy32to32withA1";
; 770  :       else if (pNeonBlt == &OMAPDDGPE::EmulatedPerPixelAlphaBlendBGRA32toRGB16)
; 771  :           pszBltName = L"EmulatedPerPixelAlphaBlendBGRA32toRGB16";
; 772  :       else
; 773  :           pszBltName = L"Unknown";
; 774  : 			
; 775  :       RETAILMSG(1, (L"NEON BLT:%s AvailPhysDelta = %d, AvailPageFileDelta = %d\r\n", pszBltName, (long) m_dwAvailPhysDelta, (long) m_dwAvailPageFileDelta));
; 776  : 	}
; 777  :   }
; 778  : #endif
; 779  : 
; 780  :   pParms->pBlt = pfnSavedBlt;

  01134	e59d2004	 ldr         r2, [sp, #4]
  01138	e59d302c	 ldr         r3, [sp, #0x2C]
  0113c	e5832000	 str         r2, [r3]

; 781  : 
; 782  :   return(scode);

  01140	e59d300c	 ldr         r3, [sp, #0xC]
  01144	e58d3018	 str         r3, [sp, #0x18]

; 783  : }

  01148	e59d0018	 ldr         r0, [sp, #0x18]
  0114c	e28dd020	 add         sp, sp, #0x20
  01150	e89d6000	 ldmia       sp, {sp, lr}
  01154	e12fff1e	 bx          lr
  01158		 |$LN12@DesignateB|
  01158		 |$LN13@DesignateB|
  01158	00000000	 DCD         |?EmulatedBlt@GPE@@QAAJPAUGPEBltParms@@@Z|
  0115c		 |$M43134|

			 ENDP  ; |?DesignateBlt@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|, OMAPDDGPE::DesignateBlt


  00038			 AREA	 |.pdata|, PDATA
|$T43143| DCD	|$LN5@DesignateB@2|
	DCD	0x40000503
; Function compile flags: /Odtp

  0115c			 AREA	 |.text|, CODE, ARM

  0115c		 |?DesignateBltROP1@OMAPDDGPE@@QAAXPAUGPEBltParms@@K@Z| PROC ; OMAPDDGPE::DesignateBltROP1

; 788  : {

  0115c		 |$LN5@DesignateB@2|
  0115c	e1a0c00d	 mov         r12, sp
  01160	e92d0007	 stmdb       sp!, {r0 - r2}
  01164	e92d5000	 stmdb       sp!, {r12, lr}
  01168		 |$M43140|

; 789  : //  GPEBltParms parms = *pParms;
; 790  : //  if(!(parms.bltFlags & BLT_STRETCH))
; 791  : //    ClipNoScale(parms.prclDst, parms.prclClip);
; 792  : //  if(((parms.prclDst->right - parms.prclDst->left) > 0) &&
; 793  : //     ((parms.prclDst->bottom - parms.prclDst->top) > 0))
; 794  : //  {
; 795  : //    switch(rop1)
; 796  : //    {
; 797  : //    }
; 798  : //  }
; 799  : //  pParms->pBlt = parms.pBlt;
; 800  :     UNREFERENCED_PARAMETER(rop1);
; 801  :     UNREFERENCED_PARAMETER(pParms);
; 802  : }

  01168	e89d6000	 ldmia       sp, {sp, lr}
  0116c	e12fff1e	 bx          lr
  01170		 |$M43141|

			 ENDP  ; |?DesignateBltROP1@OMAPDDGPE@@QAAXPAUGPEBltParms@@K@Z|, OMAPDDGPE::DesignateBltROP1

	EXPORT	|?DesignateBltSRCCOPY@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| ; OMAPDDGPE::DesignateBltSRCCOPY
	IMPORT	|memcpy|

  00040			 AREA	 |.pdata|, PDATA
|$T43149| DCD	|$LN10@DesignateB@3|
	DCD	0x40002f04
; Function compile flags: /Odtp

  01170			 AREA	 |.text|, CODE, ARM

  01170		 |?DesignateBltROP2@OMAPDDGPE@@QAAXPAUGPEBltParms@@K@Z| PROC ; OMAPDDGPE::DesignateBltROP2

; 807  : {

  01170		 |$LN10@DesignateB@3|
  01170	e1a0c00d	 mov         r12, sp
  01174	e92d0007	 stmdb       sp!, {r0 - r2}
  01178	e92d5000	 stmdb       sp!, {r12, lr}
  0117c	e24dd058	 sub         sp, sp, #0x58
  01180		 |$M43146|

; 808  :   GPEBltParms parms = *pParms;

  01180	e59d1064	 ldr         r1, [sp, #0x64]
  01184	e28d0000	 add         r0, sp, #0
  01188	e3a02058	 mov         r2, #0x58
  0118c	eb000000	 bl          memcpy

; 809  :   if(!(parms.bltFlags & BLT_STRETCH))

  01190	e59d3024	 ldr         r3, [sp, #0x24]
  01194	e3130008	 tst         r3, #8
  01198	1a000003	 bne         |$LN5@DesignateB@3|

; 810  :     ClipNoScale(parms.prclDst, parms.prclSrc, parms.prclClip);

  0119c	e59d201c	 ldr         r2, [sp, #0x1C]
  011a0	e59d1018	 ldr         r1, [sp, #0x18]
  011a4	e59d0014	 ldr         r0, [sp, #0x14]
  011a8	eb000000	 bl          |?ClipNoScale@@YAXPAU_RECTL@@0PBU1@@Z|
  011ac		 |$LN5@DesignateB@3|

; 811  :   
; 812  :   if(((parms.prclDst->right - parms.prclDst->left) > 0) &&
; 813  :      ((parms.prclDst->bottom - parms.prclDst->top) > 0))

  011ac	e59d3014	 ldr         r3, [sp, #0x14]
  011b0	e2833008	 add         r3, r3, #8
  011b4	e5932000	 ldr         r2, [r3]
  011b8	e59d3014	 ldr         r3, [sp, #0x14]
  011bc	e5933000	 ldr         r3, [r3]
  011c0	e0423003	 sub         r3, r2, r3
  011c4	e3530000	 cmp         r3, #0
  011c8	da000011	 ble         |$LN4@DesignateB@3|
  011cc	e59d3014	 ldr         r3, [sp, #0x14]
  011d0	e283200c	 add         r2, r3, #0xC
  011d4	e59d3014	 ldr         r3, [sp, #0x14]
  011d8	e2833004	 add         r3, r3, #4
  011dc	e5922000	 ldr         r2, [r2]
  011e0	e5933000	 ldr         r3, [r3]
  011e4	e0423003	 sub         r3, r2, r3
  011e8	e3530000	 cmp         r3, #0
  011ec	da000008	 ble         |$LN4@DesignateB@3|

; 814  :   {
; 815  :     switch(rop2)

  011f0	e59d2068	 ldr         r2, [sp, #0x68]
  011f4	e3a03b33	 mov         r3, #0x33, 22
  011f8	e38330cc	 orr         r3, r3, #0xCC
  011fc	e1520003	 cmp         r2, r3
  01200	0a000000	 beq         |$LN1@DesignateB@3|
  01204	ea000002	 b           |$LN2@DesignateB@3|
  01208		 |$LN1@DesignateB@3|

; 816  :     {
; 817  :     case 0xCCCC:  // SRCCOPY
; 818  :       DesignateBltSRCCOPY(&parms);

  01208	e28d1000	 add         r1, sp, #0
  0120c	e59d0060	 ldr         r0, [sp, #0x60]
  01210	eb000000	 bl          |?DesignateBltSRCCOPY@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|
  01214		 |$LN2@DesignateB@3|
  01214		 |$LN4@DesignateB@3|

; 819  :       break;
; 820  :     }
; 821  :   }
; 822  :   pParms->pBlt = parms.pBlt;

  01214	e59d2000	 ldr         r2, [sp]
  01218	e59d3064	 ldr         r3, [sp, #0x64]
  0121c	e5832000	 str         r2, [r3]

; 823  : }

  01220	e28dd058	 add         sp, sp, #0x58
  01224	e89d6000	 ldmia       sp, {sp, lr}
  01228	e12fff1e	 bx          lr
  0122c		 |$M43147|

			 ENDP  ; |?DesignateBltROP2@OMAPDDGPE@@QAAXPAUGPEBltParms@@K@Z|, OMAPDDGPE::DesignateBltROP2

	EXPORT	|?DesignateBltSRCCOPY_toBGRA32@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| ; OMAPDDGPE::DesignateBltSRCCOPY_toBGRA32
	EXPORT	|?DesignateBltSRCCOPY_toBGR24@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| ; OMAPDDGPE::DesignateBltSRCCOPY_toBGR24
	EXPORT	|?FormatPtr@GPESurf@@QAAPAVGPEFormat@@XZ| ; GPESurf::FormatPtr
	EXPORT	|?DesignateBltSRCCOPY_toRGB16@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| ; OMAPDDGPE::DesignateBltSRCCOPY_toRGB16
	EXPORT	|?DesignateBltSRCCOPY_toLUT8@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| ; OMAPDDGPE::DesignateBltSRCCOPY_toLUT8

  00048			 AREA	 |.pdata|, PDATA
|$T43160| DCD	|$LN19@DesignateB@4|
	DCD	0x40005204
; Function compile flags: /Odtp

  0122c			 AREA	 |.text|, CODE, ARM

  0122c		 |?DesignateBltSRCCOPY@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::DesignateBltSRCCOPY

; 826  : {

  0122c		 |$LN19@DesignateB@4|
  0122c	e1a0c00d	 mov         r12, sp
  01230	e92d0003	 stmdb       sp!, {r0, r1}
  01234	e92d5000	 stmdb       sp!, {r12, lr}
  01238	e24dd018	 sub         sp, sp, #0x18
  0123c		 |$M43157|

; 827  :   switch(pParms->pDst->Format())

  0123c	e59d3024	 ldr         r3, [sp, #0x24]
  01240	e2833004	 add         r3, r3, #4
  01244	e5930000	 ldr         r0, [r3]
  01248	eb000000	 bl          |?Format@GPESurf@@QAA?AW4EGPEFormat@@XZ|
  0124c	e58d0000	 str         r0, [sp]
  01250	e59d3000	 ldr         r3, [sp]
  01254	e58d3004	 str         r3, [sp, #4]
  01258	e59d3004	 ldr         r3, [sp, #4]
  0125c	e2433003	 sub         r3, r3, #3
  01260	e58d3004	 str         r3, [sp, #4]
  01264	e59d3004	 ldr         r3, [sp, #4]
  01268	e3530003	 cmp         r3, #3
  0126c	8a00003d	 bhi         |$LN7@DesignateB@4|
  01270	e59d2004	 ldr         r2, [sp, #4]
  01274	e1a03102	 mov         r3, r2, lsl #2
  01278	e083300f	 add         r3, r3, pc
  0127c	e5933004	 ldr         r3, [r3, #4]
  01280	e08ff003	 add         pc, pc, r3
  01284		 |$LN12@DesignateB@4|
  01284		 |$LN11@DesignateB@4|
  01284		 |$LN13@DesignateB@4|
  01284	0000000c	 DCD         0xc
  01288		 |$LN14@DesignateB@4|
  01288	0000001c	 DCD         0x1c
  0128c		 |$LN15@DesignateB@4|
  0128c	0000002c	 DCD         0x2c
  01290		 |$LN16@DesignateB@4|
  01290	00000088	 DCD         0x88
  01294		 |$LN6@DesignateB@4|

; 828  :   {
; 829  :   case gpe8Bpp:
; 830  :     DesignateBltSRCCOPY_toLUT8(pParms);

  01294	e59d1024	 ldr         r1, [sp, #0x24]
  01298	e59d0020	 ldr         r0, [sp, #0x20]
  0129c	eb000000	 bl          |?DesignateBltSRCCOPY_toLUT8@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|

; 831  :     break;

  012a0	ea000030	 b           |$LN7@DesignateB@4|
  012a4		 |$LN5@DesignateB@4|

; 832  : 
; 833  :   case gpe16Bpp:
; 834  :     DesignateBltSRCCOPY_toRGB16(pParms);

  012a4	e59d1024	 ldr         r1, [sp, #0x24]
  012a8	e59d0020	 ldr         r0, [sp, #0x20]
  012ac	eb000000	 bl          |?DesignateBltSRCCOPY_toRGB16@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|

; 835  :     break;

  012b0	ea00002c	 b           |$LN7@DesignateB@4|
  012b4		 |$LN4@DesignateB@4|

; 836  : 
; 837  :   case gpe24Bpp:
; 838  :     // Check for RGB24 vs BGR24
; 839  :     if( pParms->pDst->FormatPtr()->m_pPalette != NULL &&
; 840  :         pParms->pDst->FormatPtr()->m_pPalette[0] == 0x00ff0000 )

  012b4	e59d3024	 ldr         r3, [sp, #0x24]
  012b8	e2833004	 add         r3, r3, #4
  012bc	e5930000	 ldr         r0, [r3]
  012c0	eb000000	 bl          |?FormatPtr@GPESurf@@QAAPAVGPEFormat@@XZ|
  012c4	e58d0008	 str         r0, [sp, #8]
  012c8	e59d3008	 ldr         r3, [sp, #8]
  012cc	e5933000	 ldr         r3, [r3]
  012d0	e3530000	 cmp         r3, #0
  012d4	0a00000c	 beq         |$LN3@DesignateB@4|
  012d8	e59d3024	 ldr         r3, [sp, #0x24]
  012dc	e2833004	 add         r3, r3, #4
  012e0	e5930000	 ldr         r0, [r3]
  012e4	eb000000	 bl          |?FormatPtr@GPESurf@@QAAPAVGPEFormat@@XZ|
  012e8	e58d000c	 str         r0, [sp, #0xC]
  012ec	e59d300c	 ldr         r3, [sp, #0xC]
  012f0	e5933000	 ldr         r3, [r3]
  012f4	e5933000	 ldr         r3, [r3]
  012f8	e35308ff	 cmp         r3, #0xFF, 16
  012fc	1a000002	 bne         |$LN3@DesignateB@4|

; 841  :         { 
; 842  :         DesignateBltSRCCOPY_toBGR24(pParms);

  01300	e59d1024	 ldr         r1, [sp, #0x24]
  01304	e59d0020	 ldr         r0, [sp, #0x20]
  01308	eb000000	 bl          |?DesignateBltSRCCOPY_toBGR24@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|
  0130c		 |$LN3@DesignateB@4|

; 843  :         }
; 844  :     break;

  0130c	ea000015	 b           |$LN7@DesignateB@4|
  01310		 |$LN2@DesignateB@4|

; 845  : 
; 846  :   case gpe32Bpp:
; 847  :     if( pParms->pDst->FormatPtr()->m_pPalette != NULL &&
; 848  :         pParms->pDst->FormatPtr()->m_pPalette[0] == 0x00ff0000 )

  01310	e59d3024	 ldr         r3, [sp, #0x24]
  01314	e2833004	 add         r3, r3, #4
  01318	e5930000	 ldr         r0, [r3]
  0131c	eb000000	 bl          |?FormatPtr@GPESurf@@QAAPAVGPEFormat@@XZ|
  01320	e58d0010	 str         r0, [sp, #0x10]
  01324	e59d3010	 ldr         r3, [sp, #0x10]
  01328	e5933000	 ldr         r3, [r3]
  0132c	e3530000	 cmp         r3, #0
  01330	0a00000c	 beq         |$LN1@DesignateB@4|
  01334	e59d3024	 ldr         r3, [sp, #0x24]
  01338	e2833004	 add         r3, r3, #4
  0133c	e5930000	 ldr         r0, [r3]
  01340	eb000000	 bl          |?FormatPtr@GPESurf@@QAAPAVGPEFormat@@XZ|
  01344	e58d0014	 str         r0, [sp, #0x14]
  01348	e59d3014	 ldr         r3, [sp, #0x14]
  0134c	e5933000	 ldr         r3, [r3]
  01350	e5933000	 ldr         r3, [r3]
  01354	e35308ff	 cmp         r3, #0xFF, 16
  01358	1a000002	 bne         |$LN1@DesignateB@4|

; 849  :         { 
; 850  :         DesignateBltSRCCOPY_toBGRA32(pParms);

  0135c	e59d1024	 ldr         r1, [sp, #0x24]
  01360	e59d0020	 ldr         r0, [sp, #0x20]
  01364	eb000000	 bl          |?DesignateBltSRCCOPY_toBGRA32@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|
  01368		 |$LN1@DesignateB@4|
  01368		 |$LN7@DesignateB@4|

; 851  :         }
; 852  :     break;
; 853  :   }
; 854  : }

  01368	e28dd018	 add         sp, sp, #0x18
  0136c	e89d6000	 ldmia       sp, {sp, lr}
  01370	e12fff1e	 bx          lr
  01374		 |$M43158|

			 ENDP  ; |?DesignateBltSRCCOPY@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|, OMAPDDGPE::DesignateBltSRCCOPY

; File c:\wince600\public\common\oak\inc\gpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T43166| DCD	|$LN5@FormatPtr|
	DCD	0x40000b04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?FormatPtr@GPESurf@@QAAPAVGPEFormat@@XZ| PROC ; GPESurf::FormatPtr

; 195  :     {

  00000		 |$LN5@FormatPtr|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M43163|

; 196  :         return &m_Format;

  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e283300c	 add         r3, r3, #0xC
  00018	e58d3000	 str         r3, [sp]

; 197  :     }

  0001c	e59d0000	 ldr         r0, [sp]
  00020	e28dd004	 add         sp, sp, #4
  00024	e89d6000	 ldmia       sp, {sp, lr}
  00028	e12fff1e	 bx          lr
  0002c		 |$M43164|

			 ENDP  ; |?FormatPtr@GPESurf@@QAAPAVGPEFormat@@XZ|, GPESurf::FormatPtr

	EXPORT	|?DesignateBltSRCCOPY_LUT8toLUT8@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| ; OMAPDDGPE::DesignateBltSRCCOPY_LUT8toLUT8

  00050			 AREA	 |.pdata|, PDATA
|$T43173| DCD	|$LN9@DesignateB@5|
	DCD	0x40001804
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\ddgpe\omap_optblt.cpp

  01374			 AREA	 |.text|, CODE, ARM

  01374		 |?DesignateBltSRCCOPY_toLUT8@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::DesignateBltSRCCOPY_toLUT8

; 857  : {

  01374		 |$LN9@DesignateB@5|
  01374	e1a0c00d	 mov         r12, sp
  01378	e92d0003	 stmdb       sp!, {r0, r1}
  0137c	e92d5000	 stmdb       sp!, {r12, lr}
  01380	e24dd004	 sub         sp, sp, #4
  01384		 |$M43170|

; 858  :   if(pParms->pSrc)

  01384	e59d3010	 ldr         r3, [sp, #0x10]
  01388	e2833008	 add         r3, r3, #8
  0138c	e5933000	 ldr         r3, [r3]
  01390	e3530000	 cmp         r3, #0
  01394	0a00000b	 beq         |$LN4@DesignateB@5|

; 859  :   {
; 860  :     switch(pParms->pSrc->Format())

  01398	e59d3010	 ldr         r3, [sp, #0x10]
  0139c	e2833008	 add         r3, r3, #8
  013a0	e5930000	 ldr         r0, [r3]
  013a4	eb000000	 bl          |?Format@GPESurf@@QAA?AW4EGPEFormat@@XZ|
  013a8	e58d0000	 str         r0, [sp]
  013ac	e59d3000	 ldr         r3, [sp]
  013b0	e3530003	 cmp         r3, #3
  013b4	0a000000	 beq         |$LN1@DesignateB@5|
  013b8	ea000002	 b           |$LN2@DesignateB@5|
  013bc		 |$LN1@DesignateB@5|

; 861  :     {
; 862  :     case gpe8Bpp:
; 863  :       DesignateBltSRCCOPY_LUT8toLUT8(pParms);

  013bc	e59d1010	 ldr         r1, [sp, #0x10]
  013c0	e59d000c	 ldr         r0, [sp, #0xC]
  013c4	eb000000	 bl          |?DesignateBltSRCCOPY_LUT8toLUT8@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|
  013c8		 |$LN2@DesignateB@5|
  013c8		 |$LN4@DesignateB@5|

; 864  :       break;
; 865  :     }
; 866  :   }
; 867  : }

  013c8	e28dd004	 add         sp, sp, #4
  013cc	e89d6000	 ldmia       sp, {sp, lr}
  013d0	e12fff1e	 bx          lr
  013d4		 |$M43171|

			 ENDP  ; |?DesignateBltSRCCOPY_toLUT8@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|, OMAPDDGPE::DesignateBltSRCCOPY_toLUT8


  00058			 AREA	 |.pdata|, PDATA
|$T43178| DCD	|$LN6@DesignateB@6|
	DCD	0x40000503
; Function compile flags: /Odtp

  013d4			 AREA	 |.text|, CODE, ARM

  013d4		 |?DesignateBltSRCCOPY_LUT8toLUT8@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::DesignateBltSRCCOPY_LUT8toLUT8

; 870  : {

  013d4		 |$LN6@DesignateB@6|
  013d4	e1a0c00d	 mov         r12, sp
  013d8	e92d0003	 stmdb       sp!, {r0, r1}
  013dc	e92d5000	 stmdb       sp!, {r12, lr}
  013e0		 |$M43175|

; 871  :   // Can't handle transparency, alpha, or stretch (yet)
; 872  :   if(pParms->bltFlags == 0 && pParms->xPositive == 1 && !pParms->pConvert)
; 873  :   {
; 874  :     // unexplained memory leak during CESTRESS if this BLT is enabled
; 875  :     //pParms->pBlt = (BLTFN)&OMAPDDGPE::EmulatedBlockCopy8to8;
; 876  :   }
; 877  : }

  013e0	e89d6000	 ldmia       sp, {sp, lr}
  013e4	e12fff1e	 bx          lr
  013e8		 |$M43176|

			 ENDP  ; |?DesignateBltSRCCOPY_LUT8toLUT8@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|, OMAPDDGPE::DesignateBltSRCCOPY_LUT8toLUT8

	EXPORT	|?DesignateBltSRCCOPY_LUT8toRGB16@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| ; OMAPDDGPE::DesignateBltSRCCOPY_LUT8toRGB16

  00060			 AREA	 |.pdata|, PDATA
|$T43183| DCD	|$LN12@DesignateB@7|
	DCD	0x40001804
; Function compile flags: /Odtp

  013e8			 AREA	 |.text|, CODE, ARM

  013e8		 |?DesignateBltSRCCOPY_toRGB16@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::DesignateBltSRCCOPY_toRGB16

; 880  : {

  013e8		 |$LN12@DesignateB@7|
  013e8	e1a0c00d	 mov         r12, sp
  013ec	e92d0003	 stmdb       sp!, {r0, r1}
  013f0	e92d5000	 stmdb       sp!, {r12, lr}
  013f4	e24dd004	 sub         sp, sp, #4
  013f8		 |$M43180|

; 881  :   if(pParms->pSrc)

  013f8	e59d3010	 ldr         r3, [sp, #0x10]
  013fc	e2833008	 add         r3, r3, #8
  01400	e5933000	 ldr         r3, [r3]
  01404	e3530000	 cmp         r3, #0
  01408	0a00000b	 beq         |$LN7@DesignateB@7|

; 882  :   {
; 883  :     switch(pParms->pSrc->Format())

  0140c	e59d3010	 ldr         r3, [sp, #0x10]
  01410	e2833008	 add         r3, r3, #8
  01414	e5930000	 ldr         r0, [r3]
  01418	eb000000	 bl          |?Format@GPESurf@@QAA?AW4EGPEFormat@@XZ|
  0141c	e58d0000	 str         r0, [sp]
  01420	e59d3000	 ldr         r3, [sp]
  01424	e3530003	 cmp         r3, #3
  01428	0a000000	 beq         |$LN4@DesignateB@7|
  0142c	ea000002	 b           |$LN5@DesignateB@7|
  01430		 |$LN4@DesignateB@7|

; 884  :     {
; 885  :     case gpe8Bpp:
; 886  :       DesignateBltSRCCOPY_LUT8toRGB16(pParms);

  01430	e59d1010	 ldr         r1, [sp, #0x10]
  01434	e59d000c	 ldr         r0, [sp, #0xC]
  01438	eb000000	 bl          |?DesignateBltSRCCOPY_LUT8toRGB16@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|
  0143c		 |$LN5@DesignateB@7|
  0143c		 |$LN7@DesignateB@7|

; 887  :       break;
; 888  : 
; 889  :     case gpe16Bpp:
; 890  :       // NEON BLT is broken, throws exception during CETK GDI test
; 891  :       //DesignateBltSRCCOPY_RGB16toRGB16(pParms);
; 892  :       break;
; 893  : 
; 894  :     case gpe24Bpp:
; 895  :       // NEON BLT is broken, throws exception during CETK GDI test
; 896  :       //DesignateBltSRCCOPY_BGR24toRGB16(pParms);
; 897  :       break;
; 898  : 
; 899  :     case gpe32Bpp:
; 900  :       // NEON BLT is broken, causes CETK failures
; 901  :       //DesignateBltSRCCOPY_BGRA32toRGB16(pParms);
; 902  :       break;
; 903  :     }
; 904  :   }
; 905  : }

  0143c	e28dd004	 add         sp, sp, #4
  01440	e89d6000	 ldmia       sp, {sp, lr}
  01444	e12fff1e	 bx          lr
  01448		 |$M43181|

			 ENDP  ; |?DesignateBltSRCCOPY_toRGB16@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|, OMAPDDGPE::DesignateBltSRCCOPY_toRGB16

	EXPORT	|?EmulatedBlockCopyLUT8to16@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| ; OMAPDDGPE::EmulatedBlockCopyLUT8to16

  00068			 AREA	 |.pdata|, PDATA
|$T43188| DCD	|$LN6@DesignateB@8|
	DCD	0x40000e03
; Function compile flags: /Odtp

  01448			 AREA	 |.text|, CODE, ARM

  01448		 |?DesignateBltSRCCOPY_LUT8toRGB16@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::DesignateBltSRCCOPY_LUT8toRGB16

; 908  : {

  01448		 |$LN6@DesignateB@8|
  01448	e1a0c00d	 mov         r12, sp
  0144c	e92d0003	 stmdb       sp!, {r0, r1}
  01450	e92d5000	 stmdb       sp!, {r12, lr}
  01454		 |$M43185|

; 909  :   // Can't handle transparency, alpha, or stretch (yet)
; 910  :   if(pParms->bltFlags == 0)

  01454	e59d300c	 ldr         r3, [sp, #0xC]
  01458	e2833024	 add         r3, r3, #0x24
  0145c	e5933000	 ldr         r3, [r3]
  01460	e3530000	 cmp         r3, #0
  01464	1a000002	 bne         |$LN1@DesignateB@8|

; 911  :   {
; 912  :     pParms->pBlt = (BLTFN)&OMAPDDGPE::EmulatedBlockCopyLUT8to16;

  01468	e59f200c	 ldr         r2, [pc, #0xC]
  0146c	e59d300c	 ldr         r3, [sp, #0xC]
  01470	e5832000	 str         r2, [r3]
  01474		 |$LN1@DesignateB@8|

; 913  :   }
; 914  : }

  01474	e89d6000	 ldmia       sp, {sp, lr}
  01478	e12fff1e	 bx          lr
  0147c		 |$LN7@DesignateB@8|
  0147c		 |$LN8@DesignateB@8|
  0147c	00000000	 DCD         |?EmulatedBlockCopyLUT8to16@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|
  01480		 |$M43186|

			 ENDP  ; |?DesignateBltSRCCOPY_LUT8toRGB16@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|, OMAPDDGPE::DesignateBltSRCCOPY_LUT8toRGB16

	EXPORT	|?EmulatedBlockCopy16to16@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| ; OMAPDDGPE::EmulatedBlockCopy16to16
	EXPORT	|?DesignateBltSRCCOPY_RGB16toRGB16@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| ; OMAPDDGPE::DesignateBltSRCCOPY_RGB16toRGB16

  00070			 AREA	 |.pdata|, PDATA
|$T43195| DCD	|$LN6@DesignateB@9|
	DCD	0x40000e03
; Function compile flags: /Odtp

  01480			 AREA	 |.text|, CODE, ARM

  01480		 |?DesignateBltSRCCOPY_RGB16toRGB16@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::DesignateBltSRCCOPY_RGB16toRGB16

; 917  : {

  01480		 |$LN6@DesignateB@9|
  01480	e1a0c00d	 mov         r12, sp
  01484	e92d0003	 stmdb       sp!, {r0, r1}
  01488	e92d5000	 stmdb       sp!, {r12, lr}
  0148c		 |$M43192|

; 918  :   // Can't handle transparency, alpha, or stretch (yet)
; 919  :   if(pParms->bltFlags == 0)

  0148c	e59d300c	 ldr         r3, [sp, #0xC]
  01490	e2833024	 add         r3, r3, #0x24
  01494	e5933000	 ldr         r3, [r3]
  01498	e3530000	 cmp         r3, #0
  0149c	1a000002	 bne         |$LN1@DesignateB@9|

; 920  :   {
; 921  :     pParms->pBlt = (BLTFN)&OMAPDDGPE::EmulatedBlockCopy16to16;

  014a0	e59f200c	 ldr         r2, [pc, #0xC]
  014a4	e59d300c	 ldr         r3, [sp, #0xC]
  014a8	e5832000	 str         r2, [r3]
  014ac		 |$LN1@DesignateB@9|

; 922  :   }
; 923  : }

  014ac	e89d6000	 ldmia       sp, {sp, lr}
  014b0	e12fff1e	 bx          lr
  014b4		 |$LN7@DesignateB@9|
  014b4		 |$LN8@DesignateB@9|
  014b4	00000000	 DCD         |?EmulatedBlockCopy16to16@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|
  014b8		 |$M43193|

			 ENDP  ; |?DesignateBltSRCCOPY_RGB16toRGB16@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|, OMAPDDGPE::DesignateBltSRCCOPY_RGB16toRGB16

	EXPORT	|?EmulatedBlockCopyBGR24toRGB16@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| ; OMAPDDGPE::EmulatedBlockCopyBGR24toRGB16
	EXPORT	|?DesignateBltSRCCOPY_BGR24toRGB16@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| ; OMAPDDGPE::DesignateBltSRCCOPY_BGR24toRGB16

  00078			 AREA	 |.pdata|, PDATA
|$T43202| DCD	|$LN6@DesignateB@10|
	DCD	0x40000e03
; Function compile flags: /Odtp

  014b8			 AREA	 |.text|, CODE, ARM

  014b8		 |?DesignateBltSRCCOPY_BGR24toRGB16@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::DesignateBltSRCCOPY_BGR24toRGB16

; 926  : {

  014b8		 |$LN6@DesignateB@10|
  014b8	e1a0c00d	 mov         r12, sp
  014bc	e92d0003	 stmdb       sp!, {r0, r1}
  014c0	e92d5000	 stmdb       sp!, {r12, lr}
  014c4		 |$M43199|

; 927  :   // Can't handle transparency, alpha, or stretch (yet)
; 928  :   if(pParms->bltFlags == 0)

  014c4	e59d300c	 ldr         r3, [sp, #0xC]
  014c8	e2833024	 add         r3, r3, #0x24
  014cc	e5933000	 ldr         r3, [r3]
  014d0	e3530000	 cmp         r3, #0
  014d4	1a000002	 bne         |$LN1@DesignateB@10|

; 929  :   {
; 930  :     pParms->pBlt = (BLTFN)&OMAPDDGPE::EmulatedBlockCopyBGR24toRGB16;

  014d8	e59f200c	 ldr         r2, [pc, #0xC]
  014dc	e59d300c	 ldr         r3, [sp, #0xC]
  014e0	e5832000	 str         r2, [r3]
  014e4		 |$LN1@DesignateB@10|

; 931  :   }
; 932  : }

  014e4	e89d6000	 ldmia       sp, {sp, lr}
  014e8	e12fff1e	 bx          lr
  014ec		 |$LN7@DesignateB@10|
  014ec		 |$LN8@DesignateB@10|
  014ec	00000000	 DCD         |?EmulatedBlockCopyBGR24toRGB16@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|
  014f0		 |$M43200|

			 ENDP  ; |?DesignateBltSRCCOPY_BGR24toRGB16@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|, OMAPDDGPE::DesignateBltSRCCOPY_BGR24toRGB16

	EXPORT	|?EmulatedPerPixelAlphaBlendBGRA32toRGB16@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| ; OMAPDDGPE::EmulatedPerPixelAlphaBlendBGRA32toRGB16
	EXPORT	|?EmulatedBlockCopyBGRx32toRGB16@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| ; OMAPDDGPE::EmulatedBlockCopyBGRx32toRGB16
	EXPORT	|?DesignateBltSRCCOPY_BGRA32toRGB16@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| ; OMAPDDGPE::DesignateBltSRCCOPY_BGRA32toRGB16

  00080			 AREA	 |.pdata|, PDATA
|$T43209| DCD	|$LN8@DesignateB@11|
	DCD	0x40002203
; Function compile flags: /Odtp

  014f0			 AREA	 |.text|, CODE, ARM

  014f0		 |?DesignateBltSRCCOPY_BGRA32toRGB16@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::DesignateBltSRCCOPY_BGRA32toRGB16

; 935  : {

  014f0		 |$LN8@DesignateB@11|
  014f0	e1a0c00d	 mov         r12, sp
  014f4	e92d0003	 stmdb       sp!, {r0, r1}
  014f8	e92d5000	 stmdb       sp!, {r12, lr}
  014fc		 |$M43206|

; 936  :   // Not transparency, alpha, or stretch
; 937  :   if(pParms->bltFlags == 0)

  014fc	e59d300c	 ldr         r3, [sp, #0xC]
  01500	e2833024	 add         r3, r3, #0x24
  01504	e5933000	 ldr         r3, [r3]
  01508	e3530000	 cmp         r3, #0
  0150c	1a000003	 bne         |$LN3@DesignateB@11|

; 938  :   {
; 939  :     pParms->pBlt = (BLTFN)&OMAPDDGPE::EmulatedBlockCopyBGRx32toRGB16;

  01510	e59f205c	 ldr         r2, [pc, #0x5C]
  01514	e59d300c	 ldr         r3, [sp, #0xC]
  01518	e5832000	 str         r2, [r3]

; 940  :   }
; 941  :   else if((pParms->bltFlags == BLT_ALPHABLEND) && // Only handle transparency 

  0151c	ea000011	 b           |$LN2@DesignateB@11|
  01520		 |$LN3@DesignateB@11|

; 942  :   		  (pParms->blendFunction.AlphaFormat == AC_SRC_ALPHA) && 
; 943  :   		  (pParms->blendFunction.SourceConstantAlpha == 0xFF)) // Only handle per-pixel, premultiplied

  01520	e59d300c	 ldr         r3, [sp, #0xC]
  01524	e2833024	 add         r3, r3, #0x24
  01528	e5933000	 ldr         r3, [r3]
  0152c	e3530010	 cmp         r3, #0x10
  01530	1a00000c	 bne         |$LN1@DesignateB@11|
  01534	e59d300c	 ldr         r3, [sp, #0xC]
  01538	e283304f	 add         r3, r3, #0x4F
  0153c	e5d33000	 ldrb        r3, [r3]
  01540	e3530001	 cmp         r3, #1
  01544	1a000007	 bne         |$LN1@DesignateB@11|
  01548	e59d300c	 ldr         r3, [sp, #0xC]
  0154c	e283304e	 add         r3, r3, #0x4E
  01550	e5d33000	 ldrb        r3, [r3]
  01554	e35300ff	 cmp         r3, #0xFF
  01558	1a000002	 bne         |$LN1@DesignateB@11|

; 944  :   {
; 945  :     pParms->pBlt = (BLTFN)&OMAPDDGPE::EmulatedPerPixelAlphaBlendBGRA32toRGB16;

  0155c	e59f200c	 ldr         r2, [pc, #0xC]
  01560	e59d300c	 ldr         r3, [sp, #0xC]
  01564	e5832000	 str         r2, [r3]
  01568		 |$LN1@DesignateB@11|
  01568		 |$LN2@DesignateB@11|

; 946  :   }
; 947  : }

  01568	e89d6000	 ldmia       sp, {sp, lr}
  0156c	e12fff1e	 bx          lr
  01570		 |$LN9@DesignateB@11|
  01570		 |$LN10@DesignateB@11|
  01570	00000000	 DCD         |?EmulatedPerPixelAlphaBlendBGRA32toRGB16@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|
  01574		 |$LN11@DesignateB@11|
  01574	00000000	 DCD         |?EmulatedBlockCopyBGRx32toRGB16@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|
  01578		 |$M43207|

			 ENDP  ; |?DesignateBltSRCCOPY_BGRA32toRGB16@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|, OMAPDDGPE::DesignateBltSRCCOPY_BGRA32toRGB16

	EXPORT	|?DesignateBltSRCCOPY_BGRA32toBGR24@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| ; OMAPDDGPE::DesignateBltSRCCOPY_BGRA32toBGR24
	EXPORT	|?DesignateBltSRCCOPY_BGR24toBGR24@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| ; OMAPDDGPE::DesignateBltSRCCOPY_BGR24toBGR24
	EXPORT	|?DesignateBltSRCCOPY_LUT8toBGR24@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| ; OMAPDDGPE::DesignateBltSRCCOPY_LUT8toBGR24

  00088			 AREA	 |.pdata|, PDATA
|$T43217| DCD	|$LN12@DesignateB@12|
	DCD	0x40002904
; Function compile flags: /Odtp

  01578			 AREA	 |.text|, CODE, ARM

  01578		 |?DesignateBltSRCCOPY_toBGR24@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::DesignateBltSRCCOPY_toBGR24

; 950  : {

  01578		 |$LN12@DesignateB@12|
  01578	e1a0c00d	 mov         r12, sp
  0157c	e92d0003	 stmdb       sp!, {r0, r1}
  01580	e92d5000	 stmdb       sp!, {r12, lr}
  01584	e24dd008	 sub         sp, sp, #8
  01588		 |$M43214|

; 951  :   if(pParms->pSrc)

  01588	e59d3014	 ldr         r3, [sp, #0x14]
  0158c	e2833008	 add         r3, r3, #8
  01590	e5933000	 ldr         r3, [r3]
  01594	e3530000	 cmp         r3, #0
  01598	0a00001c	 beq         |$LN7@DesignateB@12|

; 952  :   {
; 953  :     switch(pParms->pSrc->Format())

  0159c	e59d3014	 ldr         r3, [sp, #0x14]
  015a0	e2833008	 add         r3, r3, #8
  015a4	e5930000	 ldr         r0, [r3]
  015a8	eb000000	 bl          |?Format@GPESurf@@QAA?AW4EGPEFormat@@XZ|
  015ac	e58d0000	 str         r0, [sp]
  015b0	e59d3000	 ldr         r3, [sp]
  015b4	e58d3004	 str         r3, [sp, #4]
  015b8	e59d3004	 ldr         r3, [sp, #4]
  015bc	e3530003	 cmp         r3, #3
  015c0	0a000006	 beq         |$LN4@DesignateB@12|
  015c4	e59d3004	 ldr         r3, [sp, #4]
  015c8	e3530005	 cmp         r3, #5
  015cc	0a000008	 beq         |$LN2@DesignateB@12|
  015d0	e59d3004	 ldr         r3, [sp, #4]
  015d4	e3530006	 cmp         r3, #6
  015d8	0a000009	 beq         |$LN1@DesignateB@12|
  015dc	ea00000b	 b           |$LN5@DesignateB@12|
  015e0		 |$LN4@DesignateB@12|

; 954  :     {
; 955  :     case gpe8Bpp:
; 956  :       DesignateBltSRCCOPY_LUT8toBGR24(pParms);

  015e0	e59d1014	 ldr         r1, [sp, #0x14]
  015e4	e59d0010	 ldr         r0, [sp, #0x10]
  015e8	eb000000	 bl          |?DesignateBltSRCCOPY_LUT8toBGR24@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|

; 957  :       break;

  015ec	ea000007	 b           |$LN5@DesignateB@12|

; 958  : 
; 959  :     case gpe16Bpp:
; 960  :       // NEON BLT is broken, fails CETK SimpleColorConversionTest
; 961  :       //DesignateBltSRCCOPY_RGB16toBGR24(pParms);
; 962  :       break;

  015f0	ea000006	 b           |$LN5@DesignateB@12|
  015f4		 |$LN2@DesignateB@12|

; 963  : 
; 964  :     case gpe24Bpp:
; 965  :       DesignateBltSRCCOPY_BGR24toBGR24(pParms);

  015f4	e59d1014	 ldr         r1, [sp, #0x14]
  015f8	e59d0010	 ldr         r0, [sp, #0x10]
  015fc	eb000000	 bl          |?DesignateBltSRCCOPY_BGR24toBGR24@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|

; 966  :       break;

  01600	ea000002	 b           |$LN5@DesignateB@12|
  01604		 |$LN1@DesignateB@12|

; 967  : 
; 968  :     case gpe32Bpp:
; 969  :       DesignateBltSRCCOPY_BGRA32toBGR24(pParms);

  01604	e59d1014	 ldr         r1, [sp, #0x14]
  01608	e59d0010	 ldr         r0, [sp, #0x10]
  0160c	eb000000	 bl          |?DesignateBltSRCCOPY_BGRA32toBGR24@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|
  01610		 |$LN5@DesignateB@12|
  01610		 |$LN7@DesignateB@12|

; 970  :       break;
; 971  :     }
; 972  :   }
; 973  : }

  01610	e28dd008	 add         sp, sp, #8
  01614	e89d6000	 ldmia       sp, {sp, lr}
  01618	e12fff1e	 bx          lr
  0161c		 |$M43215|

			 ENDP  ; |?DesignateBltSRCCOPY_toBGR24@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|, OMAPDDGPE::DesignateBltSRCCOPY_toBGR24

	EXPORT	|?EmulatedBlockCopyLUT8to24@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| ; OMAPDDGPE::EmulatedBlockCopyLUT8to24

  00090			 AREA	 |.pdata|, PDATA
|$T43222| DCD	|$LN6@DesignateB@13|
	DCD	0x40000e03
; Function compile flags: /Odtp

  0161c			 AREA	 |.text|, CODE, ARM

  0161c		 |?DesignateBltSRCCOPY_LUT8toBGR24@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::DesignateBltSRCCOPY_LUT8toBGR24

; 976  : {

  0161c		 |$LN6@DesignateB@13|
  0161c	e1a0c00d	 mov         r12, sp
  01620	e92d0003	 stmdb       sp!, {r0, r1}
  01624	e92d5000	 stmdb       sp!, {r12, lr}
  01628		 |$M43219|

; 977  :   // Can't handle transparency, alpha, or stretch (yet)
; 978  :   if(pParms->bltFlags == 0)

  01628	e59d300c	 ldr         r3, [sp, #0xC]
  0162c	e2833024	 add         r3, r3, #0x24
  01630	e5933000	 ldr         r3, [r3]
  01634	e3530000	 cmp         r3, #0
  01638	1a000002	 bne         |$LN1@DesignateB@13|

; 979  :   {
; 980  :     pParms->pBlt = (BLTFN)&OMAPDDGPE::EmulatedBlockCopyLUT8to24;

  0163c	e59f200c	 ldr         r2, [pc, #0xC]
  01640	e59d300c	 ldr         r3, [sp, #0xC]
  01644	e5832000	 str         r2, [r3]
  01648		 |$LN1@DesignateB@13|

; 981  :   }
; 982  : }

  01648	e89d6000	 ldmia       sp, {sp, lr}
  0164c	e12fff1e	 bx          lr
  01650		 |$LN7@DesignateB@13|
  01650		 |$LN8@DesignateB@13|
  01650	00000000	 DCD         |?EmulatedBlockCopyLUT8to24@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|
  01654		 |$M43220|

			 ENDP  ; |?DesignateBltSRCCOPY_LUT8toBGR24@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|, OMAPDDGPE::DesignateBltSRCCOPY_LUT8toBGR24

	EXPORT	|?EmulatedBlockCopyRGB16toBGR24@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| ; OMAPDDGPE::EmulatedBlockCopyRGB16toBGR24
	EXPORT	|?DesignateBltSRCCOPY_RGB16toBGR24@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| ; OMAPDDGPE::DesignateBltSRCCOPY_RGB16toBGR24

  00098			 AREA	 |.pdata|, PDATA
|$T43229| DCD	|$LN6@DesignateB@14|
	DCD	0x40000e03
; Function compile flags: /Odtp

  01654			 AREA	 |.text|, CODE, ARM

  01654		 |?DesignateBltSRCCOPY_RGB16toBGR24@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::DesignateBltSRCCOPY_RGB16toBGR24

; 985  : {

  01654		 |$LN6@DesignateB@14|
  01654	e1a0c00d	 mov         r12, sp
  01658	e92d0003	 stmdb       sp!, {r0, r1}
  0165c	e92d5000	 stmdb       sp!, {r12, lr}
  01660		 |$M43226|

; 986  :   // Can't handle transparency, alpha, or stretch (yet)
; 987  :   if(pParms->bltFlags == 0)

  01660	e59d300c	 ldr         r3, [sp, #0xC]
  01664	e2833024	 add         r3, r3, #0x24
  01668	e5933000	 ldr         r3, [r3]
  0166c	e3530000	 cmp         r3, #0
  01670	1a000002	 bne         |$LN1@DesignateB@14|

; 988  :   {
; 989  :     pParms->pBlt = (BLTFN)&OMAPDDGPE::EmulatedBlockCopyRGB16toBGR24;

  01674	e59f200c	 ldr         r2, [pc, #0xC]
  01678	e59d300c	 ldr         r3, [sp, #0xC]
  0167c	e5832000	 str         r2, [r3]
  01680		 |$LN1@DesignateB@14|

; 990  :   }
; 991  : }

  01680	e89d6000	 ldmia       sp, {sp, lr}
  01684	e12fff1e	 bx          lr
  01688		 |$LN7@DesignateB@14|
  01688		 |$LN8@DesignateB@14|
  01688	00000000	 DCD         |?EmulatedBlockCopyRGB16toBGR24@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|
  0168c		 |$M43227|

			 ENDP  ; |?DesignateBltSRCCOPY_RGB16toBGR24@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|, OMAPDDGPE::DesignateBltSRCCOPY_RGB16toBGR24


  000a0			 AREA	 |.pdata|, PDATA
|$T43236| DCD	|$LN6@DesignateB@15|
	DCD	0x40000503
; Function compile flags: /Odtp

  0168c			 AREA	 |.text|, CODE, ARM

  0168c		 |?DesignateBltSRCCOPY_BGR24toBGR24@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::DesignateBltSRCCOPY_BGR24toBGR24

; 994  : {

  0168c		 |$LN6@DesignateB@15|
  0168c	e1a0c00d	 mov         r12, sp
  01690	e92d0003	 stmdb       sp!, {r0, r1}
  01694	e92d5000	 stmdb       sp!, {r12, lr}
  01698		 |$M43233|

; 995  :   // Can't handle transparency, alpha, or stretch (yet)
; 996  :   if(pParms->bltFlags == 0)
; 997  :   {
; 998  :     // unexplained memory leak during CESTRESS if this BLT is enabled
; 999  :     //pParms->pBlt = (BLTFN)&OMAPDDGPE::EmulatedBlockCopy24to24;
; 1000 :   }
; 1001 : }

  01698	e89d6000	 ldmia       sp, {sp, lr}
  0169c	e12fff1e	 bx          lr
  016a0		 |$M43234|

			 ENDP  ; |?DesignateBltSRCCOPY_BGR24toBGR24@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|, OMAPDDGPE::DesignateBltSRCCOPY_BGR24toBGR24

	EXPORT	|?EmulatedBlockCopyXYZx32toXYZ24@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| ; OMAPDDGPE::EmulatedBlockCopyXYZx32toXYZ24

  000a8			 AREA	 |.pdata|, PDATA
|$T43241| DCD	|$LN6@DesignateB@16|
	DCD	0x40000e03
; Function compile flags: /Odtp

  016a0			 AREA	 |.text|, CODE, ARM

  016a0		 |?DesignateBltSRCCOPY_BGRA32toBGR24@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::DesignateBltSRCCOPY_BGRA32toBGR24

; 1004 : {

  016a0		 |$LN6@DesignateB@16|
  016a0	e1a0c00d	 mov         r12, sp
  016a4	e92d0003	 stmdb       sp!, {r0, r1}
  016a8	e92d5000	 stmdb       sp!, {r12, lr}
  016ac		 |$M43238|

; 1005 :   // Can't handle transparency, alpha, or stretch (yet)
; 1006 :   if(pParms->bltFlags == 0)

  016ac	e59d300c	 ldr         r3, [sp, #0xC]
  016b0	e2833024	 add         r3, r3, #0x24
  016b4	e5933000	 ldr         r3, [r3]
  016b8	e3530000	 cmp         r3, #0
  016bc	1a000002	 bne         |$LN1@DesignateB@16|

; 1007 :   {
; 1008 :     pParms->pBlt = (BLTFN)&OMAPDDGPE::EmulatedBlockCopyXYZx32toXYZ24;

  016c0	e59f200c	 ldr         r2, [pc, #0xC]
  016c4	e59d300c	 ldr         r3, [sp, #0xC]
  016c8	e5832000	 str         r2, [r3]
  016cc		 |$LN1@DesignateB@16|

; 1009 :   }
; 1010 : }

  016cc	e89d6000	 ldmia       sp, {sp, lr}
  016d0	e12fff1e	 bx          lr
  016d4		 |$LN7@DesignateB@16|
  016d4		 |$LN8@DesignateB@16|
  016d4	00000000	 DCD         |?EmulatedBlockCopyXYZx32toXYZ24@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|
  016d8		 |$M43239|

			 ENDP  ; |?DesignateBltSRCCOPY_BGRA32toBGR24@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|, OMAPDDGPE::DesignateBltSRCCOPY_BGRA32toBGR24

	EXPORT	|?DesignateBltSRCCOPY_BGRA32toBGRA32@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| ; OMAPDDGPE::DesignateBltSRCCOPY_BGRA32toBGRA32
	EXPORT	|?DesignateBltSRCCOPY_BGR24toBGRA32@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| ; OMAPDDGPE::DesignateBltSRCCOPY_BGR24toBGRA32
	EXPORT	|?DesignateBltSRCCOPY_RGB16toBGRA32@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| ; OMAPDDGPE::DesignateBltSRCCOPY_RGB16toBGRA32
	EXPORT	|?DesignateBltSRCCOPY_LUT8toBGRA32@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| ; OMAPDDGPE::DesignateBltSRCCOPY_LUT8toBGRA32

  000b0			 AREA	 |.pdata|, PDATA
|$T43254| DCD	|$LN18@DesignateB@17|
	DCD	0x40003104
; Function compile flags: /Odtp

  016d8			 AREA	 |.text|, CODE, ARM

  016d8		 |?DesignateBltSRCCOPY_toBGRA32@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::DesignateBltSRCCOPY_toBGRA32

; 1013 : {

  016d8		 |$LN18@DesignateB@17|
  016d8	e1a0c00d	 mov         r12, sp
  016dc	e92d0003	 stmdb       sp!, {r0, r1}
  016e0	e92d5000	 stmdb       sp!, {r12, lr}
  016e4	e24dd008	 sub         sp, sp, #8
  016e8		 |$M43251|

; 1014 :   if(pParms->pSrc)

  016e8	e59d3014	 ldr         r3, [sp, #0x14]
  016ec	e2833008	 add         r3, r3, #8
  016f0	e5933000	 ldr         r3, [r3]
  016f4	e3530000	 cmp         r3, #0
  016f8	0a000024	 beq         |$LN7@DesignateB@17|

; 1015 :   {
; 1016 :     switch(pParms->pSrc->Format())

  016fc	e59d3014	 ldr         r3, [sp, #0x14]
  01700	e2833008	 add         r3, r3, #8
  01704	e5930000	 ldr         r0, [r3]
  01708	eb000000	 bl          |?Format@GPESurf@@QAA?AW4EGPEFormat@@XZ|
  0170c	e58d0000	 str         r0, [sp]
  01710	e59d3000	 ldr         r3, [sp]
  01714	e58d3004	 str         r3, [sp, #4]
  01718	e59d3004	 ldr         r3, [sp, #4]
  0171c	e2433003	 sub         r3, r3, #3
  01720	e58d3004	 str         r3, [sp, #4]
  01724	e59d3004	 ldr         r3, [sp, #4]
  01728	e3530003	 cmp         r3, #3
  0172c	8a000017	 bhi         |$LN5@DesignateB@17|
  01730	e59d2004	 ldr         r2, [sp, #4]
  01734	e1a03102	 mov         r3, r2, lsl #2
  01738	e083300f	 add         r3, r3, pc
  0173c	e5933004	 ldr         r3, [r3, #4]
  01740	e08ff003	 add         pc, pc, r3
  01744		 |$LN11@DesignateB@17|
  01744		 |$LN10@DesignateB@17|
  01744		 |$LN12@DesignateB@17|
  01744	0000000c	 DCD         0xc
  01748		 |$LN13@DesignateB@17|
  01748	0000001c	 DCD         0x1c
  0174c		 |$LN14@DesignateB@17|
  0174c	0000002c	 DCD         0x2c
  01750		 |$LN15@DesignateB@17|
  01750	0000003c	 DCD         0x3c
  01754		 |$LN4@DesignateB@17|

; 1017 :     {
; 1018 :     case gpe8Bpp:
; 1019 :       DesignateBltSRCCOPY_LUT8toBGRA32(pParms);

  01754	e59d1014	 ldr         r1, [sp, #0x14]
  01758	e59d0010	 ldr         r0, [sp, #0x10]
  0175c	eb000000	 bl          |?DesignateBltSRCCOPY_LUT8toBGRA32@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|

; 1020 :       break;

  01760	ea00000a	 b           |$LN5@DesignateB@17|
  01764		 |$LN3@DesignateB@17|

; 1021 : 
; 1022 :     case gpe16Bpp:
; 1023 :       DesignateBltSRCCOPY_RGB16toBGRA32(pParms);

  01764	e59d1014	 ldr         r1, [sp, #0x14]
  01768	e59d0010	 ldr         r0, [sp, #0x10]
  0176c	eb000000	 bl          |?DesignateBltSRCCOPY_RGB16toBGRA32@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|

; 1024 :       break;

  01770	ea000006	 b           |$LN5@DesignateB@17|
  01774		 |$LN2@DesignateB@17|

; 1025 : 
; 1026 :     case gpe24Bpp:
; 1027 :       DesignateBltSRCCOPY_BGR24toBGRA32(pParms);

  01774	e59d1014	 ldr         r1, [sp, #0x14]
  01778	e59d0010	 ldr         r0, [sp, #0x10]
  0177c	eb000000	 bl          |?DesignateBltSRCCOPY_BGR24toBGRA32@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|

; 1028 :       break;

  01780	ea000002	 b           |$LN5@DesignateB@17|
  01784		 |$LN1@DesignateB@17|

; 1029 : 
; 1030 :     case gpe32Bpp:
; 1031 :       DesignateBltSRCCOPY_BGRA32toBGRA32(pParms);

  01784	e59d1014	 ldr         r1, [sp, #0x14]
  01788	e59d0010	 ldr         r0, [sp, #0x10]
  0178c	eb000000	 bl          |?DesignateBltSRCCOPY_BGRA32toBGRA32@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|
  01790		 |$LN5@DesignateB@17|
  01790		 |$LN7@DesignateB@17|

; 1032 :       break;
; 1033 :     }
; 1034 :   }
; 1035 : }

  01790	e28dd008	 add         sp, sp, #8
  01794	e89d6000	 ldmia       sp, {sp, lr}
  01798	e12fff1e	 bx          lr
  0179c		 |$M43252|

			 ENDP  ; |?DesignateBltSRCCOPY_toBGRA32@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|, OMAPDDGPE::DesignateBltSRCCOPY_toBGRA32

	EXPORT	|?EmulatedBlockCopyLUT8to32@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| ; OMAPDDGPE::EmulatedBlockCopyLUT8to32

  000b8			 AREA	 |.pdata|, PDATA
|$T43259| DCD	|$LN6@DesignateB@18|
	DCD	0x40000e03
; Function compile flags: /Odtp

  0179c			 AREA	 |.text|, CODE, ARM

  0179c		 |?DesignateBltSRCCOPY_LUT8toBGRA32@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::DesignateBltSRCCOPY_LUT8toBGRA32

; 1038 : {

  0179c		 |$LN6@DesignateB@18|
  0179c	e1a0c00d	 mov         r12, sp
  017a0	e92d0003	 stmdb       sp!, {r0, r1}
  017a4	e92d5000	 stmdb       sp!, {r12, lr}
  017a8		 |$M43256|

; 1039 :   // Can't handle transparency, alpha, or stretch (yet)
; 1040 :   if(pParms->bltFlags == 0)

  017a8	e59d300c	 ldr         r3, [sp, #0xC]
  017ac	e2833024	 add         r3, r3, #0x24
  017b0	e5933000	 ldr         r3, [r3]
  017b4	e3530000	 cmp         r3, #0
  017b8	1a000002	 bne         |$LN1@DesignateB@18|

; 1041 :   {
; 1042 :     pParms->pBlt = (BLTFN)&OMAPDDGPE::EmulatedBlockCopyLUT8to32;

  017bc	e59f200c	 ldr         r2, [pc, #0xC]
  017c0	e59d300c	 ldr         r3, [sp, #0xC]
  017c4	e5832000	 str         r2, [r3]
  017c8		 |$LN1@DesignateB@18|

; 1043 :   }
; 1044 : }

  017c8	e89d6000	 ldmia       sp, {sp, lr}
  017cc	e12fff1e	 bx          lr
  017d0		 |$LN7@DesignateB@18|
  017d0		 |$LN8@DesignateB@18|
  017d0	00000000	 DCD         |?EmulatedBlockCopyLUT8to32@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|
  017d4		 |$M43257|

			 ENDP  ; |?DesignateBltSRCCOPY_LUT8toBGRA32@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|, OMAPDDGPE::DesignateBltSRCCOPY_LUT8toBGRA32

	EXPORT	|?EmulatedBlockCopyRGB16toBGRx32@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| ; OMAPDDGPE::EmulatedBlockCopyRGB16toBGRx32

  000c0			 AREA	 |.pdata|, PDATA
|$T43266| DCD	|$LN6@DesignateB@19|
	DCD	0x40000e03
; Function compile flags: /Odtp

  017d4			 AREA	 |.text|, CODE, ARM

  017d4		 |?DesignateBltSRCCOPY_RGB16toBGRA32@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::DesignateBltSRCCOPY_RGB16toBGRA32

; 1047 : {

  017d4		 |$LN6@DesignateB@19|
  017d4	e1a0c00d	 mov         r12, sp
  017d8	e92d0003	 stmdb       sp!, {r0, r1}
  017dc	e92d5000	 stmdb       sp!, {r12, lr}
  017e0		 |$M43263|

; 1048 :   // Can't handle transparency, alpha, or stretch (yet)
; 1049 :   if(pParms->bltFlags == 0)

  017e0	e59d300c	 ldr         r3, [sp, #0xC]
  017e4	e2833024	 add         r3, r3, #0x24
  017e8	e5933000	 ldr         r3, [r3]
  017ec	e3530000	 cmp         r3, #0
  017f0	1a000002	 bne         |$LN1@DesignateB@19|

; 1050 :   {
; 1051 :     pParms->pBlt = (BLTFN)&OMAPDDGPE::EmulatedBlockCopyRGB16toBGRx32;

  017f4	e59f200c	 ldr         r2, [pc, #0xC]
  017f8	e59d300c	 ldr         r3, [sp, #0xC]
  017fc	e5832000	 str         r2, [r3]
  01800		 |$LN1@DesignateB@19|

; 1052 :   }
; 1053 : }

  01800	e89d6000	 ldmia       sp, {sp, lr}
  01804	e12fff1e	 bx          lr
  01808		 |$LN7@DesignateB@19|
  01808		 |$LN8@DesignateB@19|
  01808	00000000	 DCD         |?EmulatedBlockCopyRGB16toBGRx32@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|
  0180c		 |$M43264|

			 ENDP  ; |?DesignateBltSRCCOPY_RGB16toBGRA32@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|, OMAPDDGPE::DesignateBltSRCCOPY_RGB16toBGRA32

	EXPORT	|?EmulatedBlockCopyXYZ24toXYZx32@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| ; OMAPDDGPE::EmulatedBlockCopyXYZ24toXYZx32

  000c8			 AREA	 |.pdata|, PDATA
|$T43273| DCD	|$LN6@DesignateB@20|
	DCD	0x40000e03
; Function compile flags: /Odtp

  0180c			 AREA	 |.text|, CODE, ARM

  0180c		 |?DesignateBltSRCCOPY_BGR24toBGRA32@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::DesignateBltSRCCOPY_BGR24toBGRA32

; 1056 : {

  0180c		 |$LN6@DesignateB@20|
  0180c	e1a0c00d	 mov         r12, sp
  01810	e92d0003	 stmdb       sp!, {r0, r1}
  01814	e92d5000	 stmdb       sp!, {r12, lr}
  01818		 |$M43270|

; 1057 :   // Can't handle transparency, alpha, or stretch (yet)
; 1058 :   if(pParms->bltFlags == 0)

  01818	e59d300c	 ldr         r3, [sp, #0xC]
  0181c	e2833024	 add         r3, r3, #0x24
  01820	e5933000	 ldr         r3, [r3]
  01824	e3530000	 cmp         r3, #0
  01828	1a000002	 bne         |$LN1@DesignateB@20|

; 1059 :   {
; 1060 :     pParms->pBlt = (BLTFN)&OMAPDDGPE::EmulatedBlockCopyXYZ24toXYZx32;

  0182c	e59f200c	 ldr         r2, [pc, #0xC]
  01830	e59d300c	 ldr         r3, [sp, #0xC]
  01834	e5832000	 str         r2, [r3]
  01838		 |$LN1@DesignateB@20|

; 1061 :   }
; 1062 : }

  01838	e89d6000	 ldmia       sp, {sp, lr}
  0183c	e12fff1e	 bx          lr
  01840		 |$LN7@DesignateB@20|
  01840		 |$LN8@DesignateB@20|
  01840	00000000	 DCD         |?EmulatedBlockCopyXYZ24toXYZx32@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|
  01844		 |$M43271|

			 ENDP  ; |?DesignateBltSRCCOPY_BGR24toBGRA32@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|, OMAPDDGPE::DesignateBltSRCCOPY_BGR24toBGRA32

	EXPORT	|?EmulatedBlockCopy32to32@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| ; OMAPDDGPE::EmulatedBlockCopy32to32

  000d0			 AREA	 |.pdata|, PDATA
|$T43280| DCD	|$LN6@DesignateB@21|
	DCD	0x40000e03
; Function compile flags: /Odtp

  01844			 AREA	 |.text|, CODE, ARM

  01844		 |?DesignateBltSRCCOPY_BGRA32toBGRA32@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::DesignateBltSRCCOPY_BGRA32toBGRA32

; 1065 : {

  01844		 |$LN6@DesignateB@21|
  01844	e1a0c00d	 mov         r12, sp
  01848	e92d0003	 stmdb       sp!, {r0, r1}
  0184c	e92d5000	 stmdb       sp!, {r12, lr}
  01850		 |$M43277|

; 1066 :   // Can't handle transparency, alpha, or stretch (yet)
; 1067 :   if(pParms->bltFlags == 0)

  01850	e59d300c	 ldr         r3, [sp, #0xC]
  01854	e2833024	 add         r3, r3, #0x24
  01858	e5933000	 ldr         r3, [r3]
  0185c	e3530000	 cmp         r3, #0
  01860	1a000002	 bne         |$LN1@DesignateB@21|

; 1068 :   {
; 1069 :     pParms->pBlt = (BLTFN)&OMAPDDGPE::EmulatedBlockCopy32to32;

  01864	e59f200c	 ldr         r2, [pc, #0xC]
  01868	e59d300c	 ldr         r3, [sp, #0xC]
  0186c	e5832000	 str         r2, [r3]
  01870		 |$LN1@DesignateB@21|

; 1070 :   }
; 1071 : }

  01870	e89d6000	 ldmia       sp, {sp, lr}
  01874	e12fff1e	 bx          lr
  01878		 |$LN7@DesignateB@21|
  01878		 |$LN8@DesignateB@21|
  01878	00000000	 DCD         |?EmulatedBlockCopy32to32@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|
  0187c		 |$M43278|

			 ENDP  ; |?DesignateBltSRCCOPY_BGRA32toBGRA32@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|, OMAPDDGPE::DesignateBltSRCCOPY_BGRA32toBGRA32

	EXPORT	|?DesignateBltPATCOPY@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| ; OMAPDDGPE::DesignateBltPATCOPY

  000d8			 AREA	 |.pdata|, PDATA
|$T43287| DCD	|$LN10@DesignateB@22|
	DCD	0x40003004
; Function compile flags: /Odtp

  0187c			 AREA	 |.text|, CODE, ARM

  0187c		 |?DesignateBltROP3@OMAPDDGPE@@QAAXPAUGPEBltParms@@K@Z| PROC ; OMAPDDGPE::DesignateBltROP3

; 1076 : {

  0187c		 |$LN10@DesignateB@22|
  0187c	e1a0c00d	 mov         r12, sp
  01880	e92d0007	 stmdb       sp!, {r0 - r2}
  01884	e92d5000	 stmdb       sp!, {r12, lr}
  01888	e24dd058	 sub         sp, sp, #0x58
  0188c		 |$M43284|

; 1077 :   GPEBltParms parms = *pParms;

  0188c	e59d1064	 ldr         r1, [sp, #0x64]
  01890	e28d0000	 add         r0, sp, #0
  01894	e3a02058	 mov         r2, #0x58
  01898	eb000000	 bl          memcpy

; 1078 :   if(!(parms.bltFlags & BLT_STRETCH))

  0189c	e59d3024	 ldr         r3, [sp, #0x24]
  018a0	e3130008	 tst         r3, #8
  018a4	1a000004	 bne         |$LN5@DesignateB@22|

; 1079 :     ClipNoScale(parms.prclDst, parms.prclSrc, parms.pptlBrush, parms.prclClip);

  018a8	e59d301c	 ldr         r3, [sp, #0x1C]
  018ac	e59d2030	 ldr         r2, [sp, #0x30]
  018b0	e59d1018	 ldr         r1, [sp, #0x18]
  018b4	e59d0014	 ldr         r0, [sp, #0x14]
  018b8	eb000000	 bl          |?ClipNoScale@@YAXPAU_RECTL@@0PAU_POINTL@@PBU1@@Z|
  018bc		 |$LN5@DesignateB@22|

; 1080 :   
; 1081 :   if(((parms.prclDst->right - parms.prclDst->left) > 0) &&
; 1082 :      ((parms.prclDst->bottom - parms.prclDst->top) > 0))

  018bc	e59d3014	 ldr         r3, [sp, #0x14]
  018c0	e2833008	 add         r3, r3, #8
  018c4	e5932000	 ldr         r2, [r3]
  018c8	e59d3014	 ldr         r3, [sp, #0x14]
  018cc	e5933000	 ldr         r3, [r3]
  018d0	e0423003	 sub         r3, r2, r3
  018d4	e3530000	 cmp         r3, #0
  018d8	da000011	 ble         |$LN4@DesignateB@22|
  018dc	e59d3014	 ldr         r3, [sp, #0x14]
  018e0	e283200c	 add         r2, r3, #0xC
  018e4	e59d3014	 ldr         r3, [sp, #0x14]
  018e8	e2833004	 add         r3, r3, #4
  018ec	e5922000	 ldr         r2, [r2]
  018f0	e5933000	 ldr         r3, [r3]
  018f4	e0423003	 sub         r3, r2, r3
  018f8	e3530000	 cmp         r3, #0
  018fc	da000008	 ble         |$LN4@DesignateB@22|

; 1083 :   {
; 1084 :     switch(rop3)

  01900	e59d2068	 ldr         r2, [sp, #0x68]
  01904	e3a03a0f	 mov         r3, #0xF, 20
  01908	e38330f0	 orr         r3, r3, #0xF0
  0190c	e1520003	 cmp         r2, r3
  01910	0a000000	 beq         |$LN1@DesignateB@22|
  01914	ea000002	 b           |$LN2@DesignateB@22|
  01918		 |$LN1@DesignateB@22|

; 1085 :     {
; 1086 :     case 0xF0F0:  // PATCOPY
; 1087 :       DesignateBltPATCOPY(&parms);

  01918	e28d1000	 add         r1, sp, #0
  0191c	e59d0060	 ldr         r0, [sp, #0x60]
  01920	eb000000	 bl          |?DesignateBltPATCOPY@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|
  01924		 |$LN2@DesignateB@22|
  01924		 |$LN4@DesignateB@22|

; 1088 :       break;
; 1089 :     }
; 1090 :   }
; 1091 :   pParms->pBlt = parms.pBlt;

  01924	e59d2000	 ldr         r2, [sp]
  01928	e59d3064	 ldr         r3, [sp, #0x64]
  0192c	e5832000	 str         r2, [r3]

; 1092 : }

  01930	e28dd058	 add         sp, sp, #0x58
  01934	e89d6000	 ldmia       sp, {sp, lr}
  01938	e12fff1e	 bx          lr
  0193c		 |$M43285|

			 ENDP  ; |?DesignateBltROP3@OMAPDDGPE@@QAAXPAUGPEBltParms@@K@Z|, OMAPDDGPE::DesignateBltROP3

	EXPORT	|?DesignateBltPATCOPY_toBGRA32@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| ; OMAPDDGPE::DesignateBltPATCOPY_toBGRA32
	EXPORT	|?DesignateBltPATCOPY_toBGR24@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| ; OMAPDDGPE::DesignateBltPATCOPY_toBGR24
	EXPORT	|?DesignateBltPATCOPY_toRGB16@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| ; OMAPDDGPE::DesignateBltPATCOPY_toRGB16
	EXPORT	|?DesignateBltPATCOPY_toLUT8@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| ; OMAPDDGPE::DesignateBltPATCOPY_toLUT8

  000e0			 AREA	 |.pdata|, PDATA
|$T43298| DCD	|$LN17@DesignateB@23|
	DCD	0x40002c04
; Function compile flags: /Odtp

  0193c			 AREA	 |.text|, CODE, ARM

  0193c		 |?DesignateBltPATCOPY@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::DesignateBltPATCOPY

; 1095 : {

  0193c		 |$LN17@DesignateB@23|
  0193c	e1a0c00d	 mov         r12, sp
  01940	e92d0003	 stmdb       sp!, {r0, r1}
  01944	e92d5000	 stmdb       sp!, {r12, lr}
  01948	e24dd008	 sub         sp, sp, #8
  0194c		 |$M43295|

; 1096 :   switch(pParms->pDst->Format())

  0194c	e59d3014	 ldr         r3, [sp, #0x14]
  01950	e2833004	 add         r3, r3, #4
  01954	e5930000	 ldr         r0, [r3]
  01958	eb000000	 bl          |?Format@GPESurf@@QAA?AW4EGPEFormat@@XZ|
  0195c	e58d0000	 str         r0, [sp]
  01960	e59d3000	 ldr         r3, [sp]
  01964	e58d3004	 str         r3, [sp, #4]
  01968	e59d3004	 ldr         r3, [sp, #4]
  0196c	e2433003	 sub         r3, r3, #3
  01970	e58d3004	 str         r3, [sp, #4]
  01974	e59d3004	 ldr         r3, [sp, #4]
  01978	e3530003	 cmp         r3, #3
  0197c	8a000017	 bhi         |$LN5@DesignateB@23|
  01980	e59d2004	 ldr         r2, [sp, #4]
  01984	e1a03102	 mov         r3, r2, lsl #2
  01988	e083300f	 add         r3, r3, pc
  0198c	e5933004	 ldr         r3, [r3, #4]
  01990	e08ff003	 add         pc, pc, r3
  01994		 |$LN10@DesignateB@23|
  01994		 |$LN9@DesignateB@23|
  01994		 |$LN11@DesignateB@23|
  01994	0000000c	 DCD         0xc
  01998		 |$LN12@DesignateB@23|
  01998	0000001c	 DCD         0x1c
  0199c		 |$LN13@DesignateB@23|
  0199c	0000002c	 DCD         0x2c
  019a0		 |$LN14@DesignateB@23|
  019a0	0000003c	 DCD         0x3c
  019a4		 |$LN4@DesignateB@23|

; 1097 :   {
; 1098 :   case gpe8Bpp:
; 1099 :     DesignateBltPATCOPY_toLUT8(pParms);

  019a4	e59d1014	 ldr         r1, [sp, #0x14]
  019a8	e59d0010	 ldr         r0, [sp, #0x10]
  019ac	eb000000	 bl          |?DesignateBltPATCOPY_toLUT8@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|

; 1100 :     break;

  019b0	ea00000a	 b           |$LN5@DesignateB@23|
  019b4		 |$LN3@DesignateB@23|

; 1101 : 
; 1102 :   case gpe16Bpp:
; 1103 :     DesignateBltPATCOPY_toRGB16(pParms);

  019b4	e59d1014	 ldr         r1, [sp, #0x14]
  019b8	e59d0010	 ldr         r0, [sp, #0x10]
  019bc	eb000000	 bl          |?DesignateBltPATCOPY_toRGB16@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|

; 1104 :     break;

  019c0	ea000006	 b           |$LN5@DesignateB@23|
  019c4		 |$LN2@DesignateB@23|

; 1105 : 
; 1106 :   case gpe24Bpp:
; 1107 :     DesignateBltPATCOPY_toBGR24(pParms);

  019c4	e59d1014	 ldr         r1, [sp, #0x14]
  019c8	e59d0010	 ldr         r0, [sp, #0x10]
  019cc	eb000000	 bl          |?DesignateBltPATCOPY_toBGR24@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|

; 1108 :     break;

  019d0	ea000002	 b           |$LN5@DesignateB@23|
  019d4		 |$LN1@DesignateB@23|

; 1109 : 
; 1110 :   case gpe32Bpp:
; 1111 :     DesignateBltPATCOPY_toBGRA32(pParms);

  019d4	e59d1014	 ldr         r1, [sp, #0x14]
  019d8	e59d0010	 ldr         r0, [sp, #0x10]
  019dc	eb000000	 bl          |?DesignateBltPATCOPY_toBGRA32@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|
  019e0		 |$LN5@DesignateB@23|

; 1112 :     break;
; 1113 :   }
; 1114 : }

  019e0	e28dd008	 add         sp, sp, #8
  019e4	e89d6000	 ldmia       sp, {sp, lr}
  019e8	e12fff1e	 bx          lr
  019ec		 |$M43296|

			 ENDP  ; |?DesignateBltPATCOPY@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|, OMAPDDGPE::DesignateBltPATCOPY

	EXPORT	|?DesignateBltPATCOPY_solidtoLUT8@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| ; OMAPDDGPE::DesignateBltPATCOPY_solidtoLUT8

  000e8			 AREA	 |.pdata|, PDATA
|$T43303| DCD	|$LN6@DesignateB@24|
	DCD	0x40000d03
; Function compile flags: /Odtp

  019ec			 AREA	 |.text|, CODE, ARM

  019ec		 |?DesignateBltPATCOPY_toLUT8@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::DesignateBltPATCOPY_toLUT8

; 1117 : {

  019ec		 |$LN6@DesignateB@24|
  019ec	e1a0c00d	 mov         r12, sp
  019f0	e92d0003	 stmdb       sp!, {r0, r1}
  019f4	e92d5000	 stmdb       sp!, {r12, lr}
  019f8		 |$M43300|

; 1118 :   if(pParms->solidColor != -1)

  019f8	e59d300c	 ldr         r3, [sp, #0xC]
  019fc	e2833020	 add         r3, r3, #0x20
  01a00	e5933000	 ldr         r3, [r3]
  01a04	e3730001	 cmn         r3, #1
  01a08	0a000002	 beq         |$LN1@DesignateB@24|

; 1119 :     DesignateBltPATCOPY_solidtoLUT8(pParms);

  01a0c	e59d100c	 ldr         r1, [sp, #0xC]
  01a10	e59d0008	 ldr         r0, [sp, #8]
  01a14	eb000000	 bl          |?DesignateBltPATCOPY_solidtoLUT8@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|
  01a18		 |$LN1@DesignateB@24|

; 1120 : }

  01a18	e89d6000	 ldmia       sp, {sp, lr}
  01a1c	e12fff1e	 bx          lr
  01a20		 |$M43301|

			 ENDP  ; |?DesignateBltPATCOPY_toLUT8@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|, OMAPDDGPE::DesignateBltPATCOPY_toLUT8

	EXPORT	|?EmulatedBlockFill8@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| ; OMAPDDGPE::EmulatedBlockFill8

  000f0			 AREA	 |.pdata|, PDATA
|$T43308| DCD	|$LN5@DesignateB@25|
	DCD	0x40000903
; Function compile flags: /Odtp

  01a20			 AREA	 |.text|, CODE, ARM

  01a20		 |?DesignateBltPATCOPY_solidtoLUT8@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::DesignateBltPATCOPY_solidtoLUT8

; 1123 : {

  01a20		 |$LN5@DesignateB@25|
  01a20	e1a0c00d	 mov         r12, sp
  01a24	e92d0003	 stmdb       sp!, {r0, r1}
  01a28	e92d5000	 stmdb       sp!, {r12, lr}
  01a2c		 |$M43305|

; 1124 :   pParms->pBlt = (BLTFN)&OMAPDDGPE::EmulatedBlockFill8;

  01a2c	e59f200c	 ldr         r2, [pc, #0xC]
  01a30	e59d300c	 ldr         r3, [sp, #0xC]
  01a34	e5832000	 str         r2, [r3]

; 1125 : }

  01a38	e89d6000	 ldmia       sp, {sp, lr}
  01a3c	e12fff1e	 bx          lr
  01a40		 |$LN6@DesignateB@25|
  01a40		 |$LN7@DesignateB@25|
  01a40	00000000	 DCD         |?EmulatedBlockFill8@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|
  01a44		 |$M43306|

			 ENDP  ; |?DesignateBltPATCOPY_solidtoLUT8@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|, OMAPDDGPE::DesignateBltPATCOPY_solidtoLUT8

	EXPORT	|?DesignateBltPATCOPY_solidtoRGB16@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| ; OMAPDDGPE::DesignateBltPATCOPY_solidtoRGB16

  000f8			 AREA	 |.pdata|, PDATA
|$T43315| DCD	|$LN6@DesignateB@26|
	DCD	0x40000d03
; Function compile flags: /Odtp

  01a44			 AREA	 |.text|, CODE, ARM

  01a44		 |?DesignateBltPATCOPY_toRGB16@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::DesignateBltPATCOPY_toRGB16

; 1128 : {

  01a44		 |$LN6@DesignateB@26|
  01a44	e1a0c00d	 mov         r12, sp
  01a48	e92d0003	 stmdb       sp!, {r0, r1}
  01a4c	e92d5000	 stmdb       sp!, {r12, lr}
  01a50		 |$M43312|

; 1129 :   if(pParms->solidColor != -1)

  01a50	e59d300c	 ldr         r3, [sp, #0xC]
  01a54	e2833020	 add         r3, r3, #0x20
  01a58	e5933000	 ldr         r3, [r3]
  01a5c	e3730001	 cmn         r3, #1
  01a60	0a000002	 beq         |$LN1@DesignateB@26|

; 1130 :     DesignateBltPATCOPY_solidtoRGB16(pParms);

  01a64	e59d100c	 ldr         r1, [sp, #0xC]
  01a68	e59d0008	 ldr         r0, [sp, #8]
  01a6c	eb000000	 bl          |?DesignateBltPATCOPY_solidtoRGB16@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|
  01a70		 |$LN1@DesignateB@26|

; 1131 : }

  01a70	e89d6000	 ldmia       sp, {sp, lr}
  01a74	e12fff1e	 bx          lr
  01a78		 |$M43313|

			 ENDP  ; |?DesignateBltPATCOPY_toRGB16@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|, OMAPDDGPE::DesignateBltPATCOPY_toRGB16

	EXPORT	|?EmulatedBlockFill16@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| ; OMAPDDGPE::EmulatedBlockFill16

  00100			 AREA	 |.pdata|, PDATA
|$T43320| DCD	|$LN5@DesignateB@27|
	DCD	0x40000903
; Function compile flags: /Odtp

  01a78			 AREA	 |.text|, CODE, ARM

  01a78		 |?DesignateBltPATCOPY_solidtoRGB16@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::DesignateBltPATCOPY_solidtoRGB16

; 1134 : {

  01a78		 |$LN5@DesignateB@27|
  01a78	e1a0c00d	 mov         r12, sp
  01a7c	e92d0003	 stmdb       sp!, {r0, r1}
  01a80	e92d5000	 stmdb       sp!, {r12, lr}
  01a84		 |$M43317|

; 1135 :   pParms->pBlt = (BLTFN)&OMAPDDGPE::EmulatedBlockFill16;

  01a84	e59f200c	 ldr         r2, [pc, #0xC]
  01a88	e59d300c	 ldr         r3, [sp, #0xC]
  01a8c	e5832000	 str         r2, [r3]

; 1136 : }

  01a90	e89d6000	 ldmia       sp, {sp, lr}
  01a94	e12fff1e	 bx          lr
  01a98		 |$LN6@DesignateB@27|
  01a98		 |$LN7@DesignateB@27|
  01a98	00000000	 DCD         |?EmulatedBlockFill16@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|
  01a9c		 |$M43318|

			 ENDP  ; |?DesignateBltPATCOPY_solidtoRGB16@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|, OMAPDDGPE::DesignateBltPATCOPY_solidtoRGB16

	EXPORT	|?DesignateBltPATCOPY_solidtoBGR24@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| ; OMAPDDGPE::DesignateBltPATCOPY_solidtoBGR24

  00108			 AREA	 |.pdata|, PDATA
|$T43327| DCD	|$LN6@DesignateB@28|
	DCD	0x40000d03
; Function compile flags: /Odtp

  01a9c			 AREA	 |.text|, CODE, ARM

  01a9c		 |?DesignateBltPATCOPY_toBGR24@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::DesignateBltPATCOPY_toBGR24

; 1139 : {

  01a9c		 |$LN6@DesignateB@28|
  01a9c	e1a0c00d	 mov         r12, sp
  01aa0	e92d0003	 stmdb       sp!, {r0, r1}
  01aa4	e92d5000	 stmdb       sp!, {r12, lr}
  01aa8		 |$M43324|

; 1140 :   if(pParms->solidColor != -1)

  01aa8	e59d300c	 ldr         r3, [sp, #0xC]
  01aac	e2833020	 add         r3, r3, #0x20
  01ab0	e5933000	 ldr         r3, [r3]
  01ab4	e3730001	 cmn         r3, #1
  01ab8	0a000002	 beq         |$LN1@DesignateB@28|

; 1141 :     DesignateBltPATCOPY_solidtoBGR24(pParms);

  01abc	e59d100c	 ldr         r1, [sp, #0xC]
  01ac0	e59d0008	 ldr         r0, [sp, #8]
  01ac4	eb000000	 bl          |?DesignateBltPATCOPY_solidtoBGR24@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|
  01ac8		 |$LN1@DesignateB@28|

; 1142 : }

  01ac8	e89d6000	 ldmia       sp, {sp, lr}
  01acc	e12fff1e	 bx          lr
  01ad0		 |$M43325|

			 ENDP  ; |?DesignateBltPATCOPY_toBGR24@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|, OMAPDDGPE::DesignateBltPATCOPY_toBGR24

	EXPORT	|?EmulatedBlockFill24@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| ; OMAPDDGPE::EmulatedBlockFill24

  00110			 AREA	 |.pdata|, PDATA
|$T43332| DCD	|$LN5@DesignateB@29|
	DCD	0x40000903
; Function compile flags: /Odtp

  01ad0			 AREA	 |.text|, CODE, ARM

  01ad0		 |?DesignateBltPATCOPY_solidtoBGR24@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::DesignateBltPATCOPY_solidtoBGR24

; 1145 : {

  01ad0		 |$LN5@DesignateB@29|
  01ad0	e1a0c00d	 mov         r12, sp
  01ad4	e92d0003	 stmdb       sp!, {r0, r1}
  01ad8	e92d5000	 stmdb       sp!, {r12, lr}
  01adc		 |$M43329|

; 1146 :   pParms->pBlt = (BLTFN)&OMAPDDGPE::EmulatedBlockFill24;

  01adc	e59f200c	 ldr         r2, [pc, #0xC]
  01ae0	e59d300c	 ldr         r3, [sp, #0xC]
  01ae4	e5832000	 str         r2, [r3]

; 1147 : }

  01ae8	e89d6000	 ldmia       sp, {sp, lr}
  01aec	e12fff1e	 bx          lr
  01af0		 |$LN6@DesignateB@29|
  01af0		 |$LN7@DesignateB@29|
  01af0	00000000	 DCD         |?EmulatedBlockFill24@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|
  01af4		 |$M43330|

			 ENDP  ; |?DesignateBltPATCOPY_solidtoBGR24@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|, OMAPDDGPE::DesignateBltPATCOPY_solidtoBGR24

	EXPORT	|?DesignateBltPATCOPY_solidtoBGRA32@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| ; OMAPDDGPE::DesignateBltPATCOPY_solidtoBGRA32

  00118			 AREA	 |.pdata|, PDATA
|$T43339| DCD	|$LN6@DesignateB@30|
	DCD	0x40000d03
; Function compile flags: /Odtp

  01af4			 AREA	 |.text|, CODE, ARM

  01af4		 |?DesignateBltPATCOPY_toBGRA32@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::DesignateBltPATCOPY_toBGRA32

; 1150 : {

  01af4		 |$LN6@DesignateB@30|
  01af4	e1a0c00d	 mov         r12, sp
  01af8	e92d0003	 stmdb       sp!, {r0, r1}
  01afc	e92d5000	 stmdb       sp!, {r12, lr}
  01b00		 |$M43336|

; 1151 :   if(pParms->solidColor != -1)

  01b00	e59d300c	 ldr         r3, [sp, #0xC]
  01b04	e2833020	 add         r3, r3, #0x20
  01b08	e5933000	 ldr         r3, [r3]
  01b0c	e3730001	 cmn         r3, #1
  01b10	0a000002	 beq         |$LN1@DesignateB@30|

; 1152 :     DesignateBltPATCOPY_solidtoBGRA32(pParms);

  01b14	e59d100c	 ldr         r1, [sp, #0xC]
  01b18	e59d0008	 ldr         r0, [sp, #8]
  01b1c	eb000000	 bl          |?DesignateBltPATCOPY_solidtoBGRA32@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|
  01b20		 |$LN1@DesignateB@30|

; 1153 : }

  01b20	e89d6000	 ldmia       sp, {sp, lr}
  01b24	e12fff1e	 bx          lr
  01b28		 |$M43337|

			 ENDP  ; |?DesignateBltPATCOPY_toBGRA32@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|, OMAPDDGPE::DesignateBltPATCOPY_toBGRA32

	EXPORT	|?EmulatedBlockFill32@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| ; OMAPDDGPE::EmulatedBlockFill32

  00120			 AREA	 |.pdata|, PDATA
|$T43344| DCD	|$LN5@DesignateB@31|
	DCD	0x40000903
; Function compile flags: /Odtp

  01b28			 AREA	 |.text|, CODE, ARM

  01b28		 |?DesignateBltPATCOPY_solidtoBGRA32@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::DesignateBltPATCOPY_solidtoBGRA32

; 1156 : {

  01b28		 |$LN5@DesignateB@31|
  01b28	e1a0c00d	 mov         r12, sp
  01b2c	e92d0003	 stmdb       sp!, {r0, r1}
  01b30	e92d5000	 stmdb       sp!, {r12, lr}
  01b34		 |$M43341|

; 1157 :   pParms->pBlt = (BLTFN)&OMAPDDGPE::EmulatedBlockFill32;

  01b34	e59f200c	 ldr         r2, [pc, #0xC]
  01b38	e59d300c	 ldr         r3, [sp, #0xC]
  01b3c	e5832000	 str         r2, [r3]

; 1158 : }

  01b40	e89d6000	 ldmia       sp, {sp, lr}
  01b44	e12fff1e	 bx          lr
  01b48		 |$LN6@DesignateB@31|
  01b48		 |$LN7@DesignateB@31|
  01b48	00000000	 DCD         |?EmulatedBlockFill32@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|
  01b4c		 |$M43342|

			 ENDP  ; |?DesignateBltPATCOPY_solidtoBGRA32@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|, OMAPDDGPE::DesignateBltPATCOPY_solidtoBGRA32

	EXPORT	|?DesignateBltAACC@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| ; OMAPDDGPE::DesignateBltAACC
	EXPORT	|?DesignateBltROP4@OMAPDDGPE@@QAAXPAUGPEBltParms@@K@Z| ; OMAPDDGPE::DesignateBltROP4

  00128			 AREA	 |.pdata|, PDATA
|$T43352| DCD	|$LN10@DesignateB@32|
	DCD	0x40003204
; Function compile flags: /Odtp

  01b4c			 AREA	 |.text|, CODE, ARM

  01b4c		 |?DesignateBltROP4@OMAPDDGPE@@QAAXPAUGPEBltParms@@K@Z| PROC ; OMAPDDGPE::DesignateBltROP4

; 1163 : {

  01b4c		 |$LN10@DesignateB@32|
  01b4c	e1a0c00d	 mov         r12, sp
  01b50	e92d0007	 stmdb       sp!, {r0 - r2}
  01b54	e92d5000	 stmdb       sp!, {r12, lr}
  01b58	e24dd060	 sub         sp, sp, #0x60
  01b5c		 |$M43349|

; 1164 : #if 0
; 1165 :   RETAILMSG(1, (TEXT("****** BLT ******\n")));
; 1166 :   DumpParms(pParms);
; 1167 : #endif
; 1168 :   GPEBltParms parms = *pParms;

  01b5c	e59d106c	 ldr         r1, [sp, #0x6C]
  01b60	e28d0004	 add         r0, sp, #4
  01b64	e3a02058	 mov         r2, #0x58
  01b68	eb000000	 bl          memcpy

; 1169 :   if(!(parms.bltFlags & BLT_STRETCH))

  01b6c	e59d3028	 ldr         r3, [sp, #0x28]
  01b70	e3130008	 tst         r3, #8
  01b74	1a000006	 bne         |$LN5@DesignateB@32|

; 1170 :     ClipNoScale(parms.prclDst, parms.prclSrc, parms.pptlBrush, parms.prclMask, parms.prclClip);

  01b78	e59d3020	 ldr         r3, [sp, #0x20]
  01b7c	e58d3000	 str         r3, [sp]
  01b80	e59d3030	 ldr         r3, [sp, #0x30]
  01b84	e59d2034	 ldr         r2, [sp, #0x34]
  01b88	e59d101c	 ldr         r1, [sp, #0x1C]
  01b8c	e59d0018	 ldr         r0, [sp, #0x18]
  01b90	eb000000	 bl          |?ClipNoScale@@YAXPAU_RECTL@@0PAU_POINTL@@0PBU1@@Z|
  01b94		 |$LN5@DesignateB@32|

; 1171 :   
; 1172 :   if(((parms.prclDst->right - parms.prclDst->left) > 0) &&
; 1173 :      ((parms.prclDst->bottom - parms.prclDst->top) > 0))

  01b94	e59d3018	 ldr         r3, [sp, #0x18]
  01b98	e2833008	 add         r3, r3, #8
  01b9c	e5932000	 ldr         r2, [r3]
  01ba0	e59d3018	 ldr         r3, [sp, #0x18]
  01ba4	e5933000	 ldr         r3, [r3]
  01ba8	e0423003	 sub         r3, r2, r3
  01bac	e3530000	 cmp         r3, #0
  01bb0	da000011	 ble         |$LN4@DesignateB@32|
  01bb4	e59d3018	 ldr         r3, [sp, #0x18]
  01bb8	e283200c	 add         r2, r3, #0xC
  01bbc	e59d3018	 ldr         r3, [sp, #0x18]
  01bc0	e2833004	 add         r3, r3, #4
  01bc4	e5922000	 ldr         r2, [r2]
  01bc8	e5933000	 ldr         r3, [r3]
  01bcc	e0423003	 sub         r3, r2, r3
  01bd0	e3530000	 cmp         r3, #0
  01bd4	da000008	 ble         |$LN4@DesignateB@32|

; 1174 :   {
; 1175 :     switch(rop4)

  01bd8	e59d2070	 ldr         r2, [sp, #0x70]
  01bdc	e3a03caa	 mov         r3, #0xAA, 24
  01be0	e38330cc	 orr         r3, r3, #0xCC
  01be4	e1520003	 cmp         r2, r3
  01be8	0a000000	 beq         |$LN1@DesignateB@32|
  01bec	ea000002	 b           |$LN2@DesignateB@32|
  01bf0		 |$LN1@DesignateB@32|

; 1176 :     {
; 1177 :     case 0xAACC:  // Masked copy
; 1178 :       DesignateBltAACC(&parms);

  01bf0	e28d1004	 add         r1, sp, #4
  01bf4	e59d0068	 ldr         r0, [sp, #0x68]
  01bf8	eb000000	 bl          |?DesignateBltAACC@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|
  01bfc		 |$LN2@DesignateB@32|
  01bfc		 |$LN4@DesignateB@32|

; 1179 :       break;
; 1180 :     }
; 1181 :   }
; 1182 :   pParms->pBlt = parms.pBlt;

  01bfc	e59d2004	 ldr         r2, [sp, #4]
  01c00	e59d306c	 ldr         r3, [sp, #0x6C]
  01c04	e5832000	 str         r2, [r3]

; 1183 : }

  01c08	e28dd060	 add         sp, sp, #0x60
  01c0c	e89d6000	 ldmia       sp, {sp, lr}
  01c10	e12fff1e	 bx          lr
  01c14		 |$M43350|

			 ENDP  ; |?DesignateBltROP4@OMAPDDGPE@@QAAXPAUGPEBltParms@@K@Z|, OMAPDDGPE::DesignateBltROP4

	EXPORT	|?DesignateBltAACC_toBGRA32@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| ; OMAPDDGPE::DesignateBltAACC_toBGRA32
	EXPORT	|?DesignateBltAACC_toRGB16@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| ; OMAPDDGPE::DesignateBltAACC_toRGB16

  00130			 AREA	 |.pdata|, PDATA
|$T43357| DCD	|$LN9@DesignateB@33|
	DCD	0x40001c04
; Function compile flags: /Odtp

  01c14			 AREA	 |.text|, CODE, ARM

  01c14		 |?DesignateBltAACC@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::DesignateBltAACC

; 1186 : {

  01c14		 |$LN9@DesignateB@33|
  01c14	e1a0c00d	 mov         r12, sp
  01c18	e92d0003	 stmdb       sp!, {r0, r1}
  01c1c	e92d5000	 stmdb       sp!, {r12, lr}
  01c20	e24dd008	 sub         sp, sp, #8
  01c24		 |$M43354|

; 1187 :   switch(pParms->pDst->Format())

  01c24	e59d3014	 ldr         r3, [sp, #0x14]
  01c28	e2833004	 add         r3, r3, #4
  01c2c	e5930000	 ldr         r0, [r3]
  01c30	eb000000	 bl          |?Format@GPESurf@@QAA?AW4EGPEFormat@@XZ|
  01c34	e58d0000	 str         r0, [sp]
  01c38	e59d3000	 ldr         r3, [sp]
  01c3c	e58d3004	 str         r3, [sp, #4]
  01c40	e59d3004	 ldr         r3, [sp, #4]
  01c44	e3530004	 cmp         r3, #4
  01c48	0a000003	 beq         |$LN2@DesignateB@33|
  01c4c	e59d3004	 ldr         r3, [sp, #4]
  01c50	e3530006	 cmp         r3, #6
  01c54	0a000004	 beq         |$LN1@DesignateB@33|
  01c58	ea000006	 b           |$LN3@DesignateB@33|
  01c5c		 |$LN2@DesignateB@33|

; 1188 :   {
; 1189 :   case gpe16Bpp:
; 1190 :      DesignateBltAACC_toRGB16(pParms);

  01c5c	e59d1014	 ldr         r1, [sp, #0x14]
  01c60	e59d0010	 ldr         r0, [sp, #0x10]
  01c64	eb000000	 bl          |?DesignateBltAACC_toRGB16@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|

; 1191 :      break;

  01c68	ea000002	 b           |$LN3@DesignateB@33|
  01c6c		 |$LN1@DesignateB@33|

; 1192 :      
; 1193 :   case gpe32Bpp:
; 1194 :      DesignateBltAACC_toBGRA32(pParms);

  01c6c	e59d1014	 ldr         r1, [sp, #0x14]
  01c70	e59d0010	 ldr         r0, [sp, #0x10]
  01c74	eb000000	 bl          |?DesignateBltAACC_toBGRA32@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|
  01c78		 |$LN3@DesignateB@33|

; 1195 :      break;
; 1196 :   }
; 1197 : }

  01c78	e28dd008	 add         sp, sp, #8
  01c7c	e89d6000	 ldmia       sp, {sp, lr}
  01c80	e12fff1e	 bx          lr
  01c84		 |$M43355|

			 ENDP  ; |?DesignateBltAACC@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|, OMAPDDGPE::DesignateBltAACC

	EXPORT	|?DesignateBltAACC_RGB16toRGB16@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| ; OMAPDDGPE::DesignateBltAACC_RGB16toRGB16

  00138			 AREA	 |.pdata|, PDATA
|$T43362| DCD	|$LN9@DesignateB@34|
	DCD	0x40001804
; Function compile flags: /Odtp

  01c84			 AREA	 |.text|, CODE, ARM

  01c84		 |?DesignateBltAACC_toRGB16@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::DesignateBltAACC_toRGB16

; 1200 : {

  01c84		 |$LN9@DesignateB@34|
  01c84	e1a0c00d	 mov         r12, sp
  01c88	e92d0003	 stmdb       sp!, {r0, r1}
  01c8c	e92d5000	 stmdb       sp!, {r12, lr}
  01c90	e24dd004	 sub         sp, sp, #4
  01c94		 |$M43359|

; 1201 :   if(pParms->pSrc)

  01c94	e59d3010	 ldr         r3, [sp, #0x10]
  01c98	e2833008	 add         r3, r3, #8
  01c9c	e5933000	 ldr         r3, [r3]
  01ca0	e3530000	 cmp         r3, #0
  01ca4	0a00000b	 beq         |$LN4@DesignateB@34|

; 1202 :   {
; 1203 :     switch(pParms->pSrc->Format())

  01ca8	e59d3010	 ldr         r3, [sp, #0x10]
  01cac	e2833008	 add         r3, r3, #8
  01cb0	e5930000	 ldr         r0, [r3]
  01cb4	eb000000	 bl          |?Format@GPESurf@@QAA?AW4EGPEFormat@@XZ|
  01cb8	e58d0000	 str         r0, [sp]
  01cbc	e59d3000	 ldr         r3, [sp]
  01cc0	e3530004	 cmp         r3, #4
  01cc4	0a000000	 beq         |$LN1@DesignateB@34|
  01cc8	ea000002	 b           |$LN2@DesignateB@34|
  01ccc		 |$LN1@DesignateB@34|

; 1204 :     {
; 1205 :     case gpe16Bpp:
; 1206 :        DesignateBltAACC_RGB16toRGB16(pParms);

  01ccc	e59d1010	 ldr         r1, [sp, #0x10]
  01cd0	e59d000c	 ldr         r0, [sp, #0xC]
  01cd4	eb000000	 bl          |?DesignateBltAACC_RGB16toRGB16@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|
  01cd8		 |$LN2@DesignateB@34|
  01cd8		 |$LN4@DesignateB@34|

; 1207 :        break;
; 1208 :     }
; 1209 :   }
; 1210 : }

  01cd8	e28dd004	 add         sp, sp, #4
  01cdc	e89d6000	 ldmia       sp, {sp, lr}
  01ce0	e12fff1e	 bx          lr
  01ce4		 |$M43360|

			 ENDP  ; |?DesignateBltAACC_toRGB16@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|, OMAPDDGPE::DesignateBltAACC_toRGB16

	EXPORT	|?EmulatedMaskCopy16to16withA1@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| ; OMAPDDGPE::EmulatedMaskCopy16to16withA1

  00140			 AREA	 |.pdata|, PDATA
|$T43367| DCD	|$LN6@DesignateB@35|
	DCD	0x40000e03
; Function compile flags: /Odtp

  01ce4			 AREA	 |.text|, CODE, ARM

  01ce4		 |?DesignateBltAACC_RGB16toRGB16@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::DesignateBltAACC_RGB16toRGB16

; 1213 : {

  01ce4		 |$LN6@DesignateB@35|
  01ce4	e1a0c00d	 mov         r12, sp
  01ce8	e92d0003	 stmdb       sp!, {r0, r1}
  01cec	e92d5000	 stmdb       sp!, {r12, lr}
  01cf0		 |$M43364|

; 1214 :   // Can't handle transparency, alpha, or stretch (yet)
; 1215 :   if(pParms->bltFlags == 0)

  01cf0	e59d300c	 ldr         r3, [sp, #0xC]
  01cf4	e2833024	 add         r3, r3, #0x24
  01cf8	e5933000	 ldr         r3, [r3]
  01cfc	e3530000	 cmp         r3, #0
  01d00	1a000002	 bne         |$LN1@DesignateB@35|

; 1216 :   {
; 1217 :     pParms->pBlt = (BLTFN)&OMAPDDGPE::EmulatedMaskCopy16to16withA1;

  01d04	e59f200c	 ldr         r2, [pc, #0xC]
  01d08	e59d300c	 ldr         r3, [sp, #0xC]
  01d0c	e5832000	 str         r2, [r3]
  01d10		 |$LN1@DesignateB@35|

; 1218 :   }
; 1219 : }

  01d10	e89d6000	 ldmia       sp, {sp, lr}
  01d14	e12fff1e	 bx          lr
  01d18		 |$LN7@DesignateB@35|
  01d18		 |$LN8@DesignateB@35|
  01d18	00000000	 DCD         |?EmulatedMaskCopy16to16withA1@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|
  01d1c		 |$M43365|

			 ENDP  ; |?DesignateBltAACC_RGB16toRGB16@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|, OMAPDDGPE::DesignateBltAACC_RGB16toRGB16

	EXPORT	|?DesignateBltAACC_BGRA32toBGRA32@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| ; OMAPDDGPE::DesignateBltAACC_BGRA32toBGRA32

  00148			 AREA	 |.pdata|, PDATA
|$T43374| DCD	|$LN9@DesignateB@36|
	DCD	0x40001804
; Function compile flags: /Odtp

  01d1c			 AREA	 |.text|, CODE, ARM

  01d1c		 |?DesignateBltAACC_toBGRA32@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::DesignateBltAACC_toBGRA32

; 1222 : {

  01d1c		 |$LN9@DesignateB@36|
  01d1c	e1a0c00d	 mov         r12, sp
  01d20	e92d0003	 stmdb       sp!, {r0, r1}
  01d24	e92d5000	 stmdb       sp!, {r12, lr}
  01d28	e24dd004	 sub         sp, sp, #4
  01d2c		 |$M43371|

; 1223 :   if(pParms->pSrc)

  01d2c	e59d3010	 ldr         r3, [sp, #0x10]
  01d30	e2833008	 add         r3, r3, #8
  01d34	e5933000	 ldr         r3, [r3]
  01d38	e3530000	 cmp         r3, #0
  01d3c	0a00000b	 beq         |$LN4@DesignateB@36|

; 1224 :   {
; 1225 :     switch(pParms->pSrc->Format())

  01d40	e59d3010	 ldr         r3, [sp, #0x10]
  01d44	e2833008	 add         r3, r3, #8
  01d48	e5930000	 ldr         r0, [r3]
  01d4c	eb000000	 bl          |?Format@GPESurf@@QAA?AW4EGPEFormat@@XZ|
  01d50	e58d0000	 str         r0, [sp]
  01d54	e59d3000	 ldr         r3, [sp]
  01d58	e3530006	 cmp         r3, #6
  01d5c	0a000000	 beq         |$LN1@DesignateB@36|
  01d60	ea000002	 b           |$LN2@DesignateB@36|
  01d64		 |$LN1@DesignateB@36|

; 1226 :     {
; 1227 :     case gpe32Bpp:
; 1228 :        DesignateBltAACC_BGRA32toBGRA32(pParms);

  01d64	e59d1010	 ldr         r1, [sp, #0x10]
  01d68	e59d000c	 ldr         r0, [sp, #0xC]
  01d6c	eb000000	 bl          |?DesignateBltAACC_BGRA32toBGRA32@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|
  01d70		 |$LN2@DesignateB@36|
  01d70		 |$LN4@DesignateB@36|

; 1229 :        break;
; 1230 :     }
; 1231 :   }
; 1232 : }

  01d70	e28dd004	 add         sp, sp, #4
  01d74	e89d6000	 ldmia       sp, {sp, lr}
  01d78	e12fff1e	 bx          lr
  01d7c		 |$M43372|

			 ENDP  ; |?DesignateBltAACC_toBGRA32@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|, OMAPDDGPE::DesignateBltAACC_toBGRA32

	EXPORT	|?EmulatedMaskCopy32to32withA1@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| ; OMAPDDGPE::EmulatedMaskCopy32to32withA1

  00150			 AREA	 |.pdata|, PDATA
|$T43379| DCD	|$LN6@DesignateB@37|
	DCD	0x40000e03
; Function compile flags: /Odtp

  01d7c			 AREA	 |.text|, CODE, ARM

  01d7c		 |?DesignateBltAACC_BGRA32toBGRA32@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::DesignateBltAACC_BGRA32toBGRA32

; 1235 : {

  01d7c		 |$LN6@DesignateB@37|
  01d7c	e1a0c00d	 mov         r12, sp
  01d80	e92d0003	 stmdb       sp!, {r0, r1}
  01d84	e92d5000	 stmdb       sp!, {r12, lr}
  01d88		 |$M43376|

; 1236 :   // Can't handle transparency, alpha, or stretch (yet)
; 1237 :   if(pParms->bltFlags == 0)

  01d88	e59d300c	 ldr         r3, [sp, #0xC]
  01d8c	e2833024	 add         r3, r3, #0x24
  01d90	e5933000	 ldr         r3, [r3]
  01d94	e3530000	 cmp         r3, #0
  01d98	1a000002	 bne         |$LN1@DesignateB@37|

; 1238 :   {
; 1239 :     pParms->pBlt = (BLTFN)&OMAPDDGPE::EmulatedMaskCopy32to32withA1;

  01d9c	e59f200c	 ldr         r2, [pc, #0xC]
  01da0	e59d300c	 ldr         r3, [sp, #0xC]
  01da4	e5832000	 str         r2, [r3]
  01da8		 |$LN1@DesignateB@37|

; 1240 :   }
; 1241 : }

  01da8	e89d6000	 ldmia       sp, {sp, lr}
  01dac	e12fff1e	 bx          lr
  01db0		 |$LN7@DesignateB@37|
  01db0		 |$LN8@DesignateB@37|
  01db0	00000000	 DCD         |?EmulatedMaskCopy32to32withA1@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|
  01db4		 |$M43377|

			 ENDP  ; |?DesignateBltAACC_BGRA32toBGRA32@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|, OMAPDDGPE::DesignateBltAACC_BGRA32toBGRA32

	EXPORT	|?Buffer@GPESurf@@QAAPAXXZ|		; GPESurf::Buffer
	IMPORT	|BlockFill8|

  00158			 AREA	 |.pdata|, PDATA
|$T43390| DCD	|$LN5@EmulatedBl|
	DCD	0x40003704
; Function compile flags: /Odtp

  01db4			 AREA	 |.text|, CODE, ARM

  01db4		 |?EmulatedBlockFill8@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::EmulatedBlockFill8

; 1247 : {

  01db4		 |$LN5@EmulatedBl|
  01db4	e1a0c00d	 mov         r12, sp
  01db8	e92d0003	 stmdb       sp!, {r0, r1}
  01dbc	e92d5000	 stmdb       sp!, {r12, lr}
  01dc0	e24dd03c	 sub         sp, sp, #0x3C
  01dc4		 |$M43387|

; 1248 : CALLOUT(L"EmulatedBlockFill8()");
; 1249 : 
; 1250 :   void* dstptr = pParms->pDst->Buffer();

  01dc4	e59d3048	 ldr         r3, [sp, #0x48]
  01dc8	e2833004	 add         r3, r3, #4
  01dcc	e5930000	 ldr         r0, [r3]
  01dd0	eb000000	 bl          |?Buffer@GPESurf@@QAAPAXXZ|
  01dd4	e58d0034	 str         r0, [sp, #0x34]
  01dd8	e59d3034	 ldr         r3, [sp, #0x34]
  01ddc	e58d300c	 str         r3, [sp, #0xC]

; 1251 :   long dststride = pParms->pDst->Stride();

  01de0	e59d3048	 ldr         r3, [sp, #0x48]
  01de4	e2833004	 add         r3, r3, #4
  01de8	e5930000	 ldr         r0, [r3]
  01dec	eb000000	 bl          |?Stride@GPESurf@@QAAHXZ|
  01df0	e58d0038	 str         r0, [sp, #0x38]
  01df4	e59d3038	 ldr         r3, [sp, #0x38]
  01df8	e58d3010	 str         r3, [sp, #0x10]

; 1252 :   RECTL rclDst = *(pParms->prclDst);

  01dfc	e59d3048	 ldr         r3, [sp, #0x48]
  01e00	e2833014	 add         r3, r3, #0x14
  01e04	e5931000	 ldr         r1, [r3]
  01e08	e28d0014	 add         r0, sp, #0x14
  01e0c	e3a02010	 mov         r2, #0x10
  01e10	eb000000	 bl          memcpy

; 1253 :   
; 1254 :   WaitForNotBusy();

  01e14	e59d3044	 ldr         r3, [sp, #0x44]
  01e18	e5933000	 ldr         r3, [r3]
  01e1c	e2833060	 add         r3, r3, #0x60
  01e20	e59d0044	 ldr         r0, [sp, #0x44]
  01e24	e5933000	 ldr         r3, [r3]
  01e28	e1a0e00f	 mov         lr, pc
  01e2c	e12fff13	 bx          r3

; 1255 :   
; 1256 :   BlockFill8(dstptr,
; 1257 :              dststride,
; 1258 :              rclDst.left,
; 1259 :              rclDst.top,
; 1260 :              rclDst.right - rclDst.left,
; 1261 :              rclDst.bottom - rclDst.top,
; 1262 :              (unsigned char)pParms->solidColor);

  01e30	e59d3048	 ldr         r3, [sp, #0x48]
  01e34	e2833020	 add         r3, r3, #0x20
  01e38	e5933000	 ldr         r3, [r3]
  01e3c	e20330ff	 and         r3, r3, #0xFF
  01e40	e58d3008	 str         r3, [sp, #8]
  01e44	e59d2020	 ldr         r2, [sp, #0x20]
  01e48	e59d3018	 ldr         r3, [sp, #0x18]
  01e4c	e0423003	 sub         r3, r2, r3
  01e50	e58d3004	 str         r3, [sp, #4]
  01e54	e59d201c	 ldr         r2, [sp, #0x1C]
  01e58	e59d3014	 ldr         r3, [sp, #0x14]
  01e5c	e0423003	 sub         r3, r2, r3
  01e60	e58d3000	 str         r3, [sp]
  01e64	e59d3018	 ldr         r3, [sp, #0x18]
  01e68	e59d2014	 ldr         r2, [sp, #0x14]
  01e6c	e59d1010	 ldr         r1, [sp, #0x10]
  01e70	e59d000c	 ldr         r0, [sp, #0xC]
  01e74	eb000000	 bl          BlockFill8

; 1263 : 
; 1264 : #ifdef CHECKBLT
; 1265 :   if(!CheckBlt(pParms))
; 1266 :   {
; 1267 :     OutputDebugString(TEXT("** BAD BLT **: ") TEXT(__FUNCTION__) TEXT("()"));
; 1268 :     DebugBreak();
; 1269 :   }
; 1270 : #endif
; 1271 : 
; 1272 :   return(S_OK);

  01e78	e3a03000	 mov         r3, #0
  01e7c	e58d3030	 str         r3, [sp, #0x30]

; 1273 : }

  01e80	e59d0030	 ldr         r0, [sp, #0x30]
  01e84	e28dd03c	 add         sp, sp, #0x3C
  01e88	e89d6000	 ldmia       sp, {sp, lr}
  01e8c	e12fff1e	 bx          lr
  01e90		 |$M43388|

			 ENDP  ; |?EmulatedBlockFill8@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|, OMAPDDGPE::EmulatedBlockFill8

; File c:\wince600\public\common\oak\inc\gpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T43396| DCD	|$LN5@Buffer|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Buffer@GPESurf@@QAAPAXXZ| PROC	; GPESurf::Buffer

; 201  :     {

  00000		 |$LN5@Buffer|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M43393|

; 202  :         return (void *)m_pVirtAddr;

  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e2833004	 add         r3, r3, #4
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3000	 str         r3, [sp]

; 203  :     }

  00020	e59d0000	 ldr         r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M43394|

			 ENDP  ; |?Buffer@GPESurf@@QAAPAXXZ|, GPESurf::Buffer

	IMPORT	|BlockFill16|

  00160			 AREA	 |.pdata|, PDATA
|$T43407| DCD	|$LN5@EmulatedBl@2|
	DCD	0x40003804
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\ddgpe\omap_optblt.cpp

  01e90			 AREA	 |.text|, CODE, ARM

  01e90		 |?EmulatedBlockFill16@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::EmulatedBlockFill16

; 1276 : {

  01e90		 |$LN5@EmulatedBl@2|
  01e90	e1a0c00d	 mov         r12, sp
  01e94	e92d0003	 stmdb       sp!, {r0, r1}
  01e98	e92d5000	 stmdb       sp!, {r12, lr}
  01e9c	e24dd03c	 sub         sp, sp, #0x3C
  01ea0		 |$M43404|

; 1277 : CALLOUT(L"EmulatedBlockFill16()");
; 1278 : 
; 1279 :   void* dstptr = pParms->pDst->Buffer();

  01ea0	e59d3048	 ldr         r3, [sp, #0x48]
  01ea4	e2833004	 add         r3, r3, #4
  01ea8	e5930000	 ldr         r0, [r3]
  01eac	eb000000	 bl          |?Buffer@GPESurf@@QAAPAXXZ|
  01eb0	e58d0034	 str         r0, [sp, #0x34]
  01eb4	e59d3034	 ldr         r3, [sp, #0x34]
  01eb8	e58d300c	 str         r3, [sp, #0xC]

; 1280 :   long dststride = pParms->pDst->Stride();

  01ebc	e59d3048	 ldr         r3, [sp, #0x48]
  01ec0	e2833004	 add         r3, r3, #4
  01ec4	e5930000	 ldr         r0, [r3]
  01ec8	eb000000	 bl          |?Stride@GPESurf@@QAAHXZ|
  01ecc	e58d0038	 str         r0, [sp, #0x38]
  01ed0	e59d3038	 ldr         r3, [sp, #0x38]
  01ed4	e58d3010	 str         r3, [sp, #0x10]

; 1281 :   RECTL rclDst = *(pParms->prclDst);

  01ed8	e59d3048	 ldr         r3, [sp, #0x48]
  01edc	e2833014	 add         r3, r3, #0x14
  01ee0	e5931000	 ldr         r1, [r3]
  01ee4	e28d0014	 add         r0, sp, #0x14
  01ee8	e3a02010	 mov         r2, #0x10
  01eec	eb000000	 bl          memcpy

; 1282 :   
; 1283 :   WaitForNotBusy();

  01ef0	e59d3044	 ldr         r3, [sp, #0x44]
  01ef4	e5933000	 ldr         r3, [r3]
  01ef8	e2833060	 add         r3, r3, #0x60
  01efc	e59d0044	 ldr         r0, [sp, #0x44]
  01f00	e5933000	 ldr         r3, [r3]
  01f04	e1a0e00f	 mov         lr, pc
  01f08	e12fff13	 bx          r3

; 1284 :   BlockFill16(dstptr,
; 1285 :               dststride,
; 1286 :               rclDst.left,
; 1287 :               rclDst.top,
; 1288 :               rclDst.right - rclDst.left,
; 1289 :               rclDst.bottom - rclDst.top,
; 1290 :               (unsigned short)pParms->solidColor);

  01f0c	e59d3048	 ldr         r3, [sp, #0x48]
  01f10	e2833020	 add         r3, r3, #0x20
  01f14	e5933000	 ldr         r3, [r3]
  01f18	e1a03803	 mov         r3, r3, lsl #16
  01f1c	e1a03823	 mov         r3, r3, lsr #16
  01f20	e58d3008	 str         r3, [sp, #8]
  01f24	e59d2020	 ldr         r2, [sp, #0x20]
  01f28	e59d3018	 ldr         r3, [sp, #0x18]
  01f2c	e0423003	 sub         r3, r2, r3
  01f30	e58d3004	 str         r3, [sp, #4]
  01f34	e59d201c	 ldr         r2, [sp, #0x1C]
  01f38	e59d3014	 ldr         r3, [sp, #0x14]
  01f3c	e0423003	 sub         r3, r2, r3
  01f40	e58d3000	 str         r3, [sp]
  01f44	e59d3018	 ldr         r3, [sp, #0x18]
  01f48	e59d2014	 ldr         r2, [sp, #0x14]
  01f4c	e59d1010	 ldr         r1, [sp, #0x10]
  01f50	e59d000c	 ldr         r0, [sp, #0xC]
  01f54	eb000000	 bl          BlockFill16

; 1291 : 
; 1292 : #ifdef CHECKBLT
; 1293 :   if(!CheckBlt(pParms))
; 1294 :   {
; 1295 :     OutputDebugString(TEXT("** BAD BLT **: ") TEXT(__FUNCTION__) TEXT("()"));
; 1296 :     DebugBreak();
; 1297 :   }
; 1298 : #endif
; 1299 : 
; 1300 :   return(S_OK);

  01f58	e3a03000	 mov         r3, #0
  01f5c	e58d3030	 str         r3, [sp, #0x30]

; 1301 : }

  01f60	e59d0030	 ldr         r0, [sp, #0x30]
  01f64	e28dd03c	 add         sp, sp, #0x3C
  01f68	e89d6000	 ldmia       sp, {sp, lr}
  01f6c	e12fff1e	 bx          lr
  01f70		 |$M43405|

			 ENDP  ; |?EmulatedBlockFill16@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|, OMAPDDGPE::EmulatedBlockFill16

	IMPORT	|BlockFill24|

  00168			 AREA	 |.pdata|, PDATA
|$T43416| DCD	|$LN5@EmulatedBl@3|
	DCD	0x40003604
; Function compile flags: /Odtp

  01f70			 AREA	 |.text|, CODE, ARM

  01f70		 |?EmulatedBlockFill24@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::EmulatedBlockFill24

; 1304 : {

  01f70		 |$LN5@EmulatedBl@3|
  01f70	e1a0c00d	 mov         r12, sp
  01f74	e92d0003	 stmdb       sp!, {r0, r1}
  01f78	e92d5000	 stmdb       sp!, {r12, lr}
  01f7c	e24dd03c	 sub         sp, sp, #0x3C
  01f80		 |$M43413|

; 1305 : CALLOUT(L"EmulatedBlockFill24()");
; 1306 : 
; 1307 :   void* dstptr = pParms->pDst->Buffer();

  01f80	e59d3048	 ldr         r3, [sp, #0x48]
  01f84	e2833004	 add         r3, r3, #4
  01f88	e5930000	 ldr         r0, [r3]
  01f8c	eb000000	 bl          |?Buffer@GPESurf@@QAAPAXXZ|
  01f90	e58d0034	 str         r0, [sp, #0x34]
  01f94	e59d3034	 ldr         r3, [sp, #0x34]
  01f98	e58d300c	 str         r3, [sp, #0xC]

; 1308 :   long dststride = pParms->pDst->Stride();

  01f9c	e59d3048	 ldr         r3, [sp, #0x48]
  01fa0	e2833004	 add         r3, r3, #4
  01fa4	e5930000	 ldr         r0, [r3]
  01fa8	eb000000	 bl          |?Stride@GPESurf@@QAAHXZ|
  01fac	e58d0038	 str         r0, [sp, #0x38]
  01fb0	e59d3038	 ldr         r3, [sp, #0x38]
  01fb4	e58d3010	 str         r3, [sp, #0x10]

; 1309 :   RECTL rclDst = *(pParms->prclDst);

  01fb8	e59d3048	 ldr         r3, [sp, #0x48]
  01fbc	e2833014	 add         r3, r3, #0x14
  01fc0	e5931000	 ldr         r1, [r3]
  01fc4	e28d0014	 add         r0, sp, #0x14
  01fc8	e3a02010	 mov         r2, #0x10
  01fcc	eb000000	 bl          memcpy

; 1310 :   
; 1311 :   WaitForNotBusy();

  01fd0	e59d3044	 ldr         r3, [sp, #0x44]
  01fd4	e5933000	 ldr         r3, [r3]
  01fd8	e2833060	 add         r3, r3, #0x60
  01fdc	e59d0044	 ldr         r0, [sp, #0x44]
  01fe0	e5933000	 ldr         r3, [r3]
  01fe4	e1a0e00f	 mov         lr, pc
  01fe8	e12fff13	 bx          r3

; 1312 :   BlockFill24(dstptr,
; 1313 :               dststride,
; 1314 :               rclDst.left,
; 1315 :               rclDst.top,
; 1316 :               rclDst.right - rclDst.left,
; 1317 :               rclDst.bottom - rclDst.top,
; 1318 :               (unsigned long)pParms->solidColor);

  01fec	e59d3048	 ldr         r3, [sp, #0x48]
  01ff0	e2833020	 add         r3, r3, #0x20
  01ff4	e5933000	 ldr         r3, [r3]
  01ff8	e58d3008	 str         r3, [sp, #8]
  01ffc	e59d2020	 ldr         r2, [sp, #0x20]
  02000	e59d3018	 ldr         r3, [sp, #0x18]
  02004	e0423003	 sub         r3, r2, r3
  02008	e58d3004	 str         r3, [sp, #4]
  0200c	e59d201c	 ldr         r2, [sp, #0x1C]
  02010	e59d3014	 ldr         r3, [sp, #0x14]
  02014	e0423003	 sub         r3, r2, r3
  02018	e58d3000	 str         r3, [sp]
  0201c	e59d3018	 ldr         r3, [sp, #0x18]
  02020	e59d2014	 ldr         r2, [sp, #0x14]
  02024	e59d1010	 ldr         r1, [sp, #0x10]
  02028	e59d000c	 ldr         r0, [sp, #0xC]
  0202c	eb000000	 bl          BlockFill24

; 1319 : 
; 1320 : #ifdef CHECKBLT
; 1321 :   if(!CheckBlt(pParms))
; 1322 :   {
; 1323 :     OutputDebugString(TEXT("** BAD BLT **: ") TEXT(__FUNCTION__) TEXT("()"));
; 1324 :     DebugBreak();
; 1325 :   }
; 1326 : #endif
; 1327 : 
; 1328 :   return(S_OK);

  02030	e3a03000	 mov         r3, #0
  02034	e58d3030	 str         r3, [sp, #0x30]

; 1329 : }

  02038	e59d0030	 ldr         r0, [sp, #0x30]
  0203c	e28dd03c	 add         sp, sp, #0x3C
  02040	e89d6000	 ldmia       sp, {sp, lr}
  02044	e12fff1e	 bx          lr
  02048		 |$M43414|

			 ENDP  ; |?EmulatedBlockFill24@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|, OMAPDDGPE::EmulatedBlockFill24

	IMPORT	|BlockFill32|

  00170			 AREA	 |.pdata|, PDATA
|$T43425| DCD	|$LN5@EmulatedBl@4|
	DCD	0x40003604
; Function compile flags: /Odtp

  02048			 AREA	 |.text|, CODE, ARM

  02048		 |?EmulatedBlockFill32@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::EmulatedBlockFill32

; 1332 : {

  02048		 |$LN5@EmulatedBl@4|
  02048	e1a0c00d	 mov         r12, sp
  0204c	e92d0003	 stmdb       sp!, {r0, r1}
  02050	e92d5000	 stmdb       sp!, {r12, lr}
  02054	e24dd03c	 sub         sp, sp, #0x3C
  02058		 |$M43422|

; 1333 : CALLOUT(L"EmulatedBlockFill32()");
; 1334 : 
; 1335 :   void* dstptr = pParms->pDst->Buffer();

  02058	e59d3048	 ldr         r3, [sp, #0x48]
  0205c	e2833004	 add         r3, r3, #4
  02060	e5930000	 ldr         r0, [r3]
  02064	eb000000	 bl          |?Buffer@GPESurf@@QAAPAXXZ|
  02068	e58d0034	 str         r0, [sp, #0x34]
  0206c	e59d3034	 ldr         r3, [sp, #0x34]
  02070	e58d300c	 str         r3, [sp, #0xC]

; 1336 :   long dststride = pParms->pDst->Stride();

  02074	e59d3048	 ldr         r3, [sp, #0x48]
  02078	e2833004	 add         r3, r3, #4
  0207c	e5930000	 ldr         r0, [r3]
  02080	eb000000	 bl          |?Stride@GPESurf@@QAAHXZ|
  02084	e58d0038	 str         r0, [sp, #0x38]
  02088	e59d3038	 ldr         r3, [sp, #0x38]
  0208c	e58d3010	 str         r3, [sp, #0x10]

; 1337 :   RECTL rclDst = *(pParms->prclDst);

  02090	e59d3048	 ldr         r3, [sp, #0x48]
  02094	e2833014	 add         r3, r3, #0x14
  02098	e5931000	 ldr         r1, [r3]
  0209c	e28d0014	 add         r0, sp, #0x14
  020a0	e3a02010	 mov         r2, #0x10
  020a4	eb000000	 bl          memcpy

; 1338 :   
; 1339 :   WaitForNotBusy();

  020a8	e59d3044	 ldr         r3, [sp, #0x44]
  020ac	e5933000	 ldr         r3, [r3]
  020b0	e2833060	 add         r3, r3, #0x60
  020b4	e59d0044	 ldr         r0, [sp, #0x44]
  020b8	e5933000	 ldr         r3, [r3]
  020bc	e1a0e00f	 mov         lr, pc
  020c0	e12fff13	 bx          r3

; 1340 :   BlockFill32(dstptr,
; 1341 :               dststride,
; 1342 :               rclDst.left,
; 1343 :               rclDst.top,
; 1344 :               rclDst.right - rclDst.left,
; 1345 :               rclDst.bottom - rclDst.top,
; 1346 :               (unsigned long)pParms->solidColor);

  020c4	e59d3048	 ldr         r3, [sp, #0x48]
  020c8	e2833020	 add         r3, r3, #0x20
  020cc	e5933000	 ldr         r3, [r3]
  020d0	e58d3008	 str         r3, [sp, #8]
  020d4	e59d2020	 ldr         r2, [sp, #0x20]
  020d8	e59d3018	 ldr         r3, [sp, #0x18]
  020dc	e0423003	 sub         r3, r2, r3
  020e0	e58d3004	 str         r3, [sp, #4]
  020e4	e59d201c	 ldr         r2, [sp, #0x1C]
  020e8	e59d3014	 ldr         r3, [sp, #0x14]
  020ec	e0423003	 sub         r3, r2, r3
  020f0	e58d3000	 str         r3, [sp]
  020f4	e59d3018	 ldr         r3, [sp, #0x18]
  020f8	e59d2014	 ldr         r2, [sp, #0x14]
  020fc	e59d1010	 ldr         r1, [sp, #0x10]
  02100	e59d000c	 ldr         r0, [sp, #0xC]
  02104	eb000000	 bl          BlockFill32

; 1347 : 
; 1348 : #ifdef CHECKBLT
; 1349 :   if(!CheckBlt(pParms))
; 1350 :   {
; 1351 :     OutputDebugString(TEXT("** BAD BLT **: ") TEXT(__FUNCTION__) TEXT("()"));
; 1352 :     DebugBreak();
; 1353 :   }
; 1354 : #endif
; 1355 : 
; 1356 :   return(S_OK);

  02108	e3a03000	 mov         r3, #0
  0210c	e58d3030	 str         r3, [sp, #0x30]

; 1357 : }

  02110	e59d0030	 ldr         r0, [sp, #0x30]
  02114	e28dd03c	 add         sp, sp, #0x3C
  02118	e89d6000	 ldmia       sp, {sp, lr}
  0211c	e12fff1e	 bx          lr
  02120		 |$M43423|

			 ENDP  ; |?EmulatedBlockFill32@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|, OMAPDDGPE::EmulatedBlockFill32

	EXPORT	|?EmulatedBlockCopy8to8@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| ; OMAPDDGPE::EmulatedBlockCopy8to8
	IMPORT	|BlockCopy8|

  00178			 AREA	 |.pdata|, PDATA
|$T43441| DCD	|$LN8@EmulatedBl@5|
	DCD	0x40008204
; Function compile flags: /Odtp

  02120			 AREA	 |.text|, CODE, ARM

  02120		 |?EmulatedBlockCopy8to8@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::EmulatedBlockCopy8to8

; 1360 : {

  02120		 |$LN8@EmulatedBl@5|
  02120	e1a0c00d	 mov         r12, sp
  02124	e92d0003	 stmdb       sp!, {r0, r1}
  02128	e92d5000	 stmdb       sp!, {r12, lr}
  0212c	e24dd094	 sub         sp, sp, #0x94
  02130		 |$M43438|

; 1361 :   // Can't handle right to left yet
; 1362 :   if(pParms->xPositive != 1)

  02130	e59d30a0	 ldr         r3, [sp, #0xA0]
  02134	e2833034	 add         r3, r3, #0x34
  02138	e5933000	 ldr         r3, [r3]
  0213c	e3530001	 cmp         r3, #1
  02140	0a000006	 beq         |$LN3@EmulatedBl@5|

; 1363 :     return(GPE::EmulatedBlt(pParms));

  02144	e59d10a0	 ldr         r1, [sp, #0xA0]
  02148	e59d009c	 ldr         r0, [sp, #0x9C]
  0214c	eb000000	 bl          |?EmulatedBlt@GPE@@QAAJPAUGPEBltParms@@@Z|
  02150	e58d0074	 str         r0, [sp, #0x74]
  02154	e59d3074	 ldr         r3, [sp, #0x74]
  02158	e58d3048	 str         r3, [sp, #0x48]
  0215c	ea00006d	 b           |$LN4@EmulatedBl@5|
  02160		 |$LN3@EmulatedBl@5|

; 1364 : 
; 1365 :   // Can't handle conversion routines
; 1366 :   if(pParms->pConvert)

  02160	e59d30a0	 ldr         r3, [sp, #0xA0]
  02164	e2833040	 add         r3, r3, #0x40
  02168	e5933000	 ldr         r3, [r3]
  0216c	e3530000	 cmp         r3, #0
  02170	0a000006	 beq         |$LN2@EmulatedBl@5|

; 1367 :     return(GPE::EmulatedBlt(pParms));

  02174	e59d10a0	 ldr         r1, [sp, #0xA0]
  02178	e59d009c	 ldr         r0, [sp, #0x9C]
  0217c	eb000000	 bl          |?EmulatedBlt@GPE@@QAAJPAUGPEBltParms@@@Z|
  02180	e58d0078	 str         r0, [sp, #0x78]
  02184	e59d3078	 ldr         r3, [sp, #0x78]
  02188	e58d3048	 str         r3, [sp, #0x48]
  0218c	ea000061	 b           |$LN4@EmulatedBl@5|
  02190		 |$LN2@EmulatedBl@5|

; 1368 : 
; 1369 : CALLOUT(L"EmulatedBlockCopy8to8()");
; 1370 : 
; 1371 :   void* dstptr = pParms->pDst->Buffer();

  02190	e59d30a0	 ldr         r3, [sp, #0xA0]
  02194	e2833004	 add         r3, r3, #4
  02198	e5930000	 ldr         r0, [r3]
  0219c	eb000000	 bl          |?Buffer@GPESurf@@QAAPAXXZ|
  021a0	e58d007c	 str         r0, [sp, #0x7C]
  021a4	e59d307c	 ldr         r3, [sp, #0x7C]
  021a8	e58d3018	 str         r3, [sp, #0x18]

; 1372 :   long dststride = pParms->pDst->Stride();

  021ac	e59d30a0	 ldr         r3, [sp, #0xA0]
  021b0	e2833004	 add         r3, r3, #4
  021b4	e5930000	 ldr         r0, [r3]
  021b8	eb000000	 bl          |?Stride@GPESurf@@QAAHXZ|
  021bc	e58d0080	 str         r0, [sp, #0x80]
  021c0	e59d3080	 ldr         r3, [sp, #0x80]
  021c4	e58d302c	 str         r3, [sp, #0x2C]

; 1373 :   void* srcptr = pParms->pSrc->Buffer();

  021c8	e59d30a0	 ldr         r3, [sp, #0xA0]
  021cc	e2833008	 add         r3, r3, #8
  021d0	e5930000	 ldr         r0, [r3]
  021d4	eb000000	 bl          |?Buffer@GPESurf@@QAAPAXXZ|
  021d8	e58d0084	 str         r0, [sp, #0x84]
  021dc	e59d3084	 ldr         r3, [sp, #0x84]
  021e0	e58d3040	 str         r3, [sp, #0x40]

; 1374 :   long srcstride = pParms->pSrc->Stride();

  021e4	e59d30a0	 ldr         r3, [sp, #0xA0]
  021e8	e2833008	 add         r3, r3, #8
  021ec	e5930000	 ldr         r0, [r3]
  021f0	eb000000	 bl          |?Stride@GPESurf@@QAAHXZ|
  021f4	e58d0088	 str         r0, [sp, #0x88]
  021f8	e59d3088	 ldr         r3, [sp, #0x88]
  021fc	e58d3044	 str         r3, [sp, #0x44]

; 1375 :   RECTL rclDst = *(pParms->prclDst);

  02200	e59d30a0	 ldr         r3, [sp, #0xA0]
  02204	e2833014	 add         r3, r3, #0x14
  02208	e5931000	 ldr         r1, [r3]
  0220c	e28d0030	 add         r0, sp, #0x30
  02210	e3a02010	 mov         r2, #0x10
  02214	eb000000	 bl          memcpy

; 1376 :   RECTL rclSrc = *(pParms->prclSrc);

  02218	e59d30a0	 ldr         r3, [sp, #0xA0]
  0221c	e2833018	 add         r3, r3, #0x18
  02220	e5931000	 ldr         r1, [r3]
  02224	e28d001c	 add         r0, sp, #0x1C
  02228	e3a02010	 mov         r2, #0x10
  0222c	eb000000	 bl          memcpy

; 1377 :   
; 1378 :   if(pParms->yPositive != 1)

  02230	e59d30a0	 ldr         r3, [sp, #0xA0]
  02234	e2833038	 add         r3, r3, #0x38
  02238	e5933000	 ldr         r3, [r3]
  0223c	e3530001	 cmp         r3, #1
  02240	0a000016	 beq         |$LN1@EmulatedBl@5|

; 1379 :     AdjustForBottomUp(dstptr, dststride, pParms->pDst->Height(), rclDst,
; 1380 :                       srcptr, srcstride, pParms->pSrc->Height(), rclSrc);

  02244	e59d30a0	 ldr         r3, [sp, #0xA0]
  02248	e2833008	 add         r3, r3, #8
  0224c	e5930000	 ldr         r0, [r3]
  02250	eb000000	 bl          |?Height@GPESurf@@QAAHXZ|
  02254	e58d008c	 str         r0, [sp, #0x8C]
  02258	e59d30a0	 ldr         r3, [sp, #0xA0]
  0225c	e2833004	 add         r3, r3, #4
  02260	e5930000	 ldr         r0, [r3]
  02264	eb000000	 bl          |?Height@GPESurf@@QAAHXZ|
  02268	e58d0090	 str         r0, [sp, #0x90]
  0226c	e28d301c	 add         r3, sp, #0x1C
  02270	e58d300c	 str         r3, [sp, #0xC]
  02274	e59d308c	 ldr         r3, [sp, #0x8C]
  02278	e58d3008	 str         r3, [sp, #8]
  0227c	e28d3044	 add         r3, sp, #0x44
  02280	e58d3004	 str         r3, [sp, #4]
  02284	e28d3040	 add         r3, sp, #0x40
  02288	e58d3000	 str         r3, [sp]
  0228c	e28d3030	 add         r3, sp, #0x30
  02290	e59d2090	 ldr         r2, [sp, #0x90]
  02294	e28d102c	 add         r1, sp, #0x2C
  02298	e28d0018	 add         r0, sp, #0x18
  0229c	eb000000	 bl          |?AdjustForBottomUp@@YAXAAPAXAAJKAAU_RECTL@@01K2@Z|
  022a0		 |$LN1@EmulatedBl@5|

; 1381 : 
; 1382 :   WaitForNotBusy();

  022a0	e59d309c	 ldr         r3, [sp, #0x9C]
  022a4	e5933000	 ldr         r3, [r3]
  022a8	e2833060	 add         r3, r3, #0x60
  022ac	e59d009c	 ldr         r0, [sp, #0x9C]
  022b0	e5933000	 ldr         r3, [r3]
  022b4	e1a0e00f	 mov         lr, pc
  022b8	e12fff13	 bx          r3

; 1383 :   BlockCopy8(dstptr,
; 1384 :              dststride,
; 1385 :              rclDst.left,
; 1386 :              rclDst.top,
; 1387 :              rclDst.right - rclDst.left,
; 1388 :              rclDst.bottom - rclDst.top,
; 1389 :              srcptr,
; 1390 :              srcstride,
; 1391 :              rclSrc.left,
; 1392 :              rclSrc.top);

  022bc	e59d3020	 ldr         r3, [sp, #0x20]
  022c0	e58d3014	 str         r3, [sp, #0x14]
  022c4	e59d301c	 ldr         r3, [sp, #0x1C]
  022c8	e58d3010	 str         r3, [sp, #0x10]
  022cc	e59d3044	 ldr         r3, [sp, #0x44]
  022d0	e58d300c	 str         r3, [sp, #0xC]
  022d4	e59d3040	 ldr         r3, [sp, #0x40]
  022d8	e58d3008	 str         r3, [sp, #8]
  022dc	e59d203c	 ldr         r2, [sp, #0x3C]
  022e0	e59d3034	 ldr         r3, [sp, #0x34]
  022e4	e0423003	 sub         r3, r2, r3
  022e8	e58d3004	 str         r3, [sp, #4]
  022ec	e59d2038	 ldr         r2, [sp, #0x38]
  022f0	e59d3030	 ldr         r3, [sp, #0x30]
  022f4	e0423003	 sub         r3, r2, r3
  022f8	e58d3000	 str         r3, [sp]
  022fc	e59d3034	 ldr         r3, [sp, #0x34]
  02300	e59d2030	 ldr         r2, [sp, #0x30]
  02304	e59d102c	 ldr         r1, [sp, #0x2C]
  02308	e59d0018	 ldr         r0, [sp, #0x18]
  0230c	eb000000	 bl          BlockCopy8

; 1393 : 
; 1394 : #ifdef CHECKBLT
; 1395 :   if(!CheckBlt(pParms))
; 1396 :   {
; 1397 :     OutputDebugString(TEXT("** BAD BLT **: ") TEXT(__FUNCTION__) TEXT("()"));
; 1398 :     DebugBreak();
; 1399 :   }
; 1400 : #endif
; 1401 : 
; 1402 :   return(S_OK);

  02310	e3a03000	 mov         r3, #0
  02314	e58d3048	 str         r3, [sp, #0x48]
  02318		 |$LN4@EmulatedBl@5|

; 1403 : }

  02318	e59d0048	 ldr         r0, [sp, #0x48]
  0231c	e28dd094	 add         sp, sp, #0x94
  02320	e89d6000	 ldmia       sp, {sp, lr}
  02324	e12fff1e	 bx          lr
  02328		 |$M43439|

			 ENDP  ; |?EmulatedBlockCopy8to8@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|, OMAPDDGPE::EmulatedBlockCopy8to8

	IMPORT	|BlockCopyLUT8to16|

  00180			 AREA	 |.pdata|, PDATA
|$T43454| DCD	|$LN5@EmulatedBl@6|
	DCD	0x40005204
; Function compile flags: /Odtp

  02328			 AREA	 |.text|, CODE, ARM

  02328		 |?EmulatedBlockCopyLUT8to16@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::EmulatedBlockCopyLUT8to16

; 1406 : {

  02328		 |$LN5@EmulatedBl@6|
  02328	e1a0c00d	 mov         r12, sp
  0232c	e92d0003	 stmdb       sp!, {r0, r1}
  02330	e92d5000	 stmdb       sp!, {r12, lr}
  02334	e24dd07c	 sub         sp, sp, #0x7C
  02338		 |$M43451|

; 1407 : CALLOUT(L"EmulatedBlockCopyLUT8to16()");
; 1408 : 
; 1409 :   void* dstptr = pParms->pDst->Buffer();

  02338	e59d3088	 ldr         r3, [sp, #0x88]
  0233c	e2833004	 add         r3, r3, #4
  02340	e5930000	 ldr         r0, [r3]
  02344	eb000000	 bl          |?Buffer@GPESurf@@QAAPAXXZ|
  02348	e58d006c	 str         r0, [sp, #0x6C]
  0234c	e59d306c	 ldr         r3, [sp, #0x6C]
  02350	e58d301c	 str         r3, [sp, #0x1C]

; 1410 :   long dststride = pParms->pDst->Stride();

  02354	e59d3088	 ldr         r3, [sp, #0x88]
  02358	e2833004	 add         r3, r3, #4
  0235c	e5930000	 ldr         r0, [r3]
  02360	eb000000	 bl          |?Stride@GPESurf@@QAAHXZ|
  02364	e58d0070	 str         r0, [sp, #0x70]
  02368	e59d3070	 ldr         r3, [sp, #0x70]
  0236c	e58d3030	 str         r3, [sp, #0x30]

; 1411 :   void* srcptr = pParms->pSrc->Buffer();

  02370	e59d3088	 ldr         r3, [sp, #0x88]
  02374	e2833008	 add         r3, r3, #8
  02378	e5930000	 ldr         r0, [r3]
  0237c	eb000000	 bl          |?Buffer@GPESurf@@QAAPAXXZ|
  02380	e58d0074	 str         r0, [sp, #0x74]
  02384	e59d3074	 ldr         r3, [sp, #0x74]
  02388	e58d3044	 str         r3, [sp, #0x44]

; 1412 :   long srcstride = pParms->pSrc->Stride();

  0238c	e59d3088	 ldr         r3, [sp, #0x88]
  02390	e2833008	 add         r3, r3, #8
  02394	e5930000	 ldr         r0, [r3]
  02398	eb000000	 bl          |?Stride@GPESurf@@QAAHXZ|
  0239c	e58d0078	 str         r0, [sp, #0x78]
  023a0	e59d3078	 ldr         r3, [sp, #0x78]
  023a4	e58d3048	 str         r3, [sp, #0x48]

; 1413 :   RECTL rclDst = *(pParms->prclDst);

  023a8	e59d3088	 ldr         r3, [sp, #0x88]
  023ac	e2833014	 add         r3, r3, #0x14
  023b0	e5931000	 ldr         r1, [r3]
  023b4	e28d0034	 add         r0, sp, #0x34
  023b8	e3a02010	 mov         r2, #0x10
  023bc	eb000000	 bl          memcpy

; 1414 :   RECTL rclSrc = *(pParms->prclSrc);

  023c0	e59d3088	 ldr         r3, [sp, #0x88]
  023c4	e2833018	 add         r3, r3, #0x18
  023c8	e5931000	 ldr         r1, [r3]
  023cc	e28d0020	 add         r0, sp, #0x20
  023d0	e3a02010	 mov         r2, #0x10
  023d4	eb000000	 bl          memcpy

; 1415 : 
; 1416 :   WaitForNotBusy();

  023d8	e59d3084	 ldr         r3, [sp, #0x84]
  023dc	e5933000	 ldr         r3, [r3]
  023e0	e2833060	 add         r3, r3, #0x60
  023e4	e59d0084	 ldr         r0, [sp, #0x84]
  023e8	e5933000	 ldr         r3, [r3]
  023ec	e1a0e00f	 mov         lr, pc
  023f0	e12fff13	 bx          r3

; 1417 :   BlockCopyLUT8to16(dstptr,
; 1418 :                     dststride,
; 1419 :                     rclDst.left,
; 1420 :                     rclDst.top,
; 1421 :                     rclDst.right - rclDst.left,
; 1422 :                     rclDst.bottom - rclDst.top,
; 1423 :                     srcptr,
; 1424 :                     srcstride,
; 1425 :                     rclSrc.left,
; 1426 :                     rclSrc.top,
; 1427 :                     pParms->pLookup);

  023f4	e59d3088	 ldr         r3, [sp, #0x88]
  023f8	e283303c	 add         r3, r3, #0x3C
  023fc	e5933000	 ldr         r3, [r3]
  02400	e58d3018	 str         r3, [sp, #0x18]
  02404	e59d3024	 ldr         r3, [sp, #0x24]
  02408	e58d3014	 str         r3, [sp, #0x14]
  0240c	e59d3020	 ldr         r3, [sp, #0x20]
  02410	e58d3010	 str         r3, [sp, #0x10]
  02414	e59d3048	 ldr         r3, [sp, #0x48]
  02418	e58d300c	 str         r3, [sp, #0xC]
  0241c	e59d3044	 ldr         r3, [sp, #0x44]
  02420	e58d3008	 str         r3, [sp, #8]
  02424	e59d2040	 ldr         r2, [sp, #0x40]
  02428	e59d3038	 ldr         r3, [sp, #0x38]
  0242c	e0423003	 sub         r3, r2, r3
  02430	e58d3004	 str         r3, [sp, #4]
  02434	e59d203c	 ldr         r2, [sp, #0x3C]
  02438	e59d3034	 ldr         r3, [sp, #0x34]
  0243c	e0423003	 sub         r3, r2, r3
  02440	e58d3000	 str         r3, [sp]
  02444	e59d3038	 ldr         r3, [sp, #0x38]
  02448	e59d2034	 ldr         r2, [sp, #0x34]
  0244c	e59d1030	 ldr         r1, [sp, #0x30]
  02450	e59d001c	 ldr         r0, [sp, #0x1C]
  02454	eb000000	 bl          BlockCopyLUT8to16

; 1428 : 
; 1429 : #ifdef CHECKBLT
; 1430 :   if(!CheckBlt(pParms))
; 1431 :   {
; 1432 :     OutputDebugString(TEXT("** BAD BLT **: ") TEXT(__FUNCTION__) TEXT("()"));
; 1433 :     DebugBreak();
; 1434 :   }
; 1435 : #endif
; 1436 : 
; 1437 :   return(S_OK);

  02458	e3a03000	 mov         r3, #0
  0245c	e58d3068	 str         r3, [sp, #0x68]

; 1438 : }

  02460	e59d0068	 ldr         r0, [sp, #0x68]
  02464	e28dd07c	 add         sp, sp, #0x7C
  02468	e89d6000	 ldmia       sp, {sp, lr}
  0246c	e12fff1e	 bx          lr
  02470		 |$M43452|

			 ENDP  ; |?EmulatedBlockCopyLUT8to16@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|, OMAPDDGPE::EmulatedBlockCopyLUT8to16

	IMPORT	|BlockCopy16|

  00188			 AREA	 |.pdata|, PDATA
|$T43470| DCD	|$LN9@EmulatedBl@7|
	DCD	0x40008704
; Function compile flags: /Odtp

  02470			 AREA	 |.text|, CODE, ARM

  02470		 |?EmulatedBlockCopy16to16@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::EmulatedBlockCopy16to16

; 1441 : {

  02470		 |$LN9@EmulatedBl@7|
  02470	e1a0c00d	 mov         r12, sp
  02474	e92d0003	 stmdb       sp!, {r0, r1}
  02478	e92d5000	 stmdb       sp!, {r12, lr}
  0247c	e24dd094	 sub         sp, sp, #0x94
  02480		 |$M43467|

; 1442 :   // Can't handle right to left yet
; 1443 :   if(pParms->xPositive != 1)

  02480	e59d30a0	 ldr         r3, [sp, #0xA0]
  02484	e2833034	 add         r3, r3, #0x34
  02488	e5933000	 ldr         r3, [r3]
  0248c	e3530001	 cmp         r3, #1
  02490	0a000006	 beq         |$LN4@EmulatedBl@7|

; 1444 :     return(GPE::EmulatedBlt(pParms));

  02494	e59d10a0	 ldr         r1, [sp, #0xA0]
  02498	e59d009c	 ldr         r0, [sp, #0x9C]
  0249c	eb000000	 bl          |?EmulatedBlt@GPE@@QAAJPAUGPEBltParms@@@Z|
  024a0	e58d0074	 str         r0, [sp, #0x74]
  024a4	e59d3074	 ldr         r3, [sp, #0x74]
  024a8	e58d3048	 str         r3, [sp, #0x48]
  024ac	ea000072	 b           |$LN5@EmulatedBl@7|
  024b0		 |$LN4@EmulatedBl@7|

; 1445 : 
; 1446 :   // Can't handle lookup tables or conversion routines
; 1447 :   if(pParms->pLookup ||
; 1448 :      pParms->pConvert)

  024b0	e59d30a0	 ldr         r3, [sp, #0xA0]
  024b4	e283303c	 add         r3, r3, #0x3C
  024b8	e5933000	 ldr         r3, [r3]
  024bc	e3530000	 cmp         r3, #0
  024c0	1a000004	 bne         |$LN2@EmulatedBl@7|
  024c4	e59d30a0	 ldr         r3, [sp, #0xA0]
  024c8	e2833040	 add         r3, r3, #0x40
  024cc	e5933000	 ldr         r3, [r3]
  024d0	e3530000	 cmp         r3, #0
  024d4	0a000006	 beq         |$LN3@EmulatedBl@7|
  024d8		 |$LN2@EmulatedBl@7|

; 1449 :     return(GPE::EmulatedBlt(pParms));

  024d8	e59d10a0	 ldr         r1, [sp, #0xA0]
  024dc	e59d009c	 ldr         r0, [sp, #0x9C]
  024e0	eb000000	 bl          |?EmulatedBlt@GPE@@QAAJPAUGPEBltParms@@@Z|
  024e4	e58d0078	 str         r0, [sp, #0x78]
  024e8	e59d3078	 ldr         r3, [sp, #0x78]
  024ec	e58d3048	 str         r3, [sp, #0x48]
  024f0	ea000061	 b           |$LN5@EmulatedBl@7|
  024f4		 |$LN3@EmulatedBl@7|

; 1450 : 
; 1451 : CALLOUT(L"EmulatedBlockCopy16to16()");
; 1452 : 
; 1453 :   void* dstptr = pParms->pDst->Buffer();

  024f4	e59d30a0	 ldr         r3, [sp, #0xA0]
  024f8	e2833004	 add         r3, r3, #4
  024fc	e5930000	 ldr         r0, [r3]
  02500	eb000000	 bl          |?Buffer@GPESurf@@QAAPAXXZ|
  02504	e58d007c	 str         r0, [sp, #0x7C]
  02508	e59d307c	 ldr         r3, [sp, #0x7C]
  0250c	e58d3018	 str         r3, [sp, #0x18]

; 1454 :   long dststride = pParms->pDst->Stride();

  02510	e59d30a0	 ldr         r3, [sp, #0xA0]
  02514	e2833004	 add         r3, r3, #4
  02518	e5930000	 ldr         r0, [r3]
  0251c	eb000000	 bl          |?Stride@GPESurf@@QAAHXZ|
  02520	e58d0080	 str         r0, [sp, #0x80]
  02524	e59d3080	 ldr         r3, [sp, #0x80]
  02528	e58d302c	 str         r3, [sp, #0x2C]

; 1455 :   void* srcptr = pParms->pSrc->Buffer();

  0252c	e59d30a0	 ldr         r3, [sp, #0xA0]
  02530	e2833008	 add         r3, r3, #8
  02534	e5930000	 ldr         r0, [r3]
  02538	eb000000	 bl          |?Buffer@GPESurf@@QAAPAXXZ|
  0253c	e58d0084	 str         r0, [sp, #0x84]
  02540	e59d3084	 ldr         r3, [sp, #0x84]
  02544	e58d3040	 str         r3, [sp, #0x40]

; 1456 :   long srcstride = pParms->pSrc->Stride();

  02548	e59d30a0	 ldr         r3, [sp, #0xA0]
  0254c	e2833008	 add         r3, r3, #8
  02550	e5930000	 ldr         r0, [r3]
  02554	eb000000	 bl          |?Stride@GPESurf@@QAAHXZ|
  02558	e58d0088	 str         r0, [sp, #0x88]
  0255c	e59d3088	 ldr         r3, [sp, #0x88]
  02560	e58d3044	 str         r3, [sp, #0x44]

; 1457 :   RECTL rclDst = *(pParms->prclDst);

  02564	e59d30a0	 ldr         r3, [sp, #0xA0]
  02568	e2833014	 add         r3, r3, #0x14
  0256c	e5931000	 ldr         r1, [r3]
  02570	e28d0030	 add         r0, sp, #0x30
  02574	e3a02010	 mov         r2, #0x10
  02578	eb000000	 bl          memcpy

; 1458 :   RECTL rclSrc = *(pParms->prclSrc);

  0257c	e59d30a0	 ldr         r3, [sp, #0xA0]
  02580	e2833018	 add         r3, r3, #0x18
  02584	e5931000	 ldr         r1, [r3]
  02588	e28d001c	 add         r0, sp, #0x1C
  0258c	e3a02010	 mov         r2, #0x10
  02590	eb000000	 bl          memcpy

; 1459 :   
; 1460 :   if(pParms->yPositive != 1)

  02594	e59d30a0	 ldr         r3, [sp, #0xA0]
  02598	e2833038	 add         r3, r3, #0x38
  0259c	e5933000	 ldr         r3, [r3]
  025a0	e3530001	 cmp         r3, #1
  025a4	0a000016	 beq         |$LN1@EmulatedBl@7|

; 1461 :     AdjustForBottomUp(dstptr, dststride, pParms->pDst->Height(), rclDst,
; 1462 :                       srcptr, srcstride, pParms->pSrc->Height(), rclSrc);

  025a8	e59d30a0	 ldr         r3, [sp, #0xA0]
  025ac	e2833008	 add         r3, r3, #8
  025b0	e5930000	 ldr         r0, [r3]
  025b4	eb000000	 bl          |?Height@GPESurf@@QAAHXZ|
  025b8	e58d008c	 str         r0, [sp, #0x8C]
  025bc	e59d30a0	 ldr         r3, [sp, #0xA0]
  025c0	e2833004	 add         r3, r3, #4
  025c4	e5930000	 ldr         r0, [r3]
  025c8	eb000000	 bl          |?Height@GPESurf@@QAAHXZ|
  025cc	e58d0090	 str         r0, [sp, #0x90]
  025d0	e28d301c	 add         r3, sp, #0x1C
  025d4	e58d300c	 str         r3, [sp, #0xC]
  025d8	e59d308c	 ldr         r3, [sp, #0x8C]
  025dc	e58d3008	 str         r3, [sp, #8]
  025e0	e28d3044	 add         r3, sp, #0x44
  025e4	e58d3004	 str         r3, [sp, #4]
  025e8	e28d3040	 add         r3, sp, #0x40
  025ec	e58d3000	 str         r3, [sp]
  025f0	e28d3030	 add         r3, sp, #0x30
  025f4	e59d2090	 ldr         r2, [sp, #0x90]
  025f8	e28d102c	 add         r1, sp, #0x2C
  025fc	e28d0018	 add         r0, sp, #0x18
  02600	eb000000	 bl          |?AdjustForBottomUp@@YAXAAPAXAAJKAAU_RECTL@@01K2@Z|
  02604		 |$LN1@EmulatedBl@7|

; 1463 : 
; 1464 :   WaitForNotBusy();

  02604	e59d309c	 ldr         r3, [sp, #0x9C]
  02608	e5933000	 ldr         r3, [r3]
  0260c	e2833060	 add         r3, r3, #0x60
  02610	e59d009c	 ldr         r0, [sp, #0x9C]
  02614	e5933000	 ldr         r3, [r3]
  02618	e1a0e00f	 mov         lr, pc
  0261c	e12fff13	 bx          r3

; 1465 :   BlockCopy16(dstptr,
; 1466 :               dststride,
; 1467 :               rclDst.left,
; 1468 :               rclDst.top,
; 1469 :               rclDst.right - rclDst.left,
; 1470 :               rclDst.bottom - rclDst.top,
; 1471 :               srcptr,
; 1472 :               srcstride,
; 1473 :               rclSrc.left,
; 1474 :               rclSrc.top);

  02620	e59d3020	 ldr         r3, [sp, #0x20]
  02624	e58d3014	 str         r3, [sp, #0x14]
  02628	e59d301c	 ldr         r3, [sp, #0x1C]
  0262c	e58d3010	 str         r3, [sp, #0x10]
  02630	e59d3044	 ldr         r3, [sp, #0x44]
  02634	e58d300c	 str         r3, [sp, #0xC]
  02638	e59d3040	 ldr         r3, [sp, #0x40]
  0263c	e58d3008	 str         r3, [sp, #8]
  02640	e59d203c	 ldr         r2, [sp, #0x3C]
  02644	e59d3034	 ldr         r3, [sp, #0x34]
  02648	e0423003	 sub         r3, r2, r3
  0264c	e58d3004	 str         r3, [sp, #4]
  02650	e59d2038	 ldr         r2, [sp, #0x38]
  02654	e59d3030	 ldr         r3, [sp, #0x30]
  02658	e0423003	 sub         r3, r2, r3
  0265c	e58d3000	 str         r3, [sp]
  02660	e59d3034	 ldr         r3, [sp, #0x34]
  02664	e59d2030	 ldr         r2, [sp, #0x30]
  02668	e59d102c	 ldr         r1, [sp, #0x2C]
  0266c	e59d0018	 ldr         r0, [sp, #0x18]
  02670	eb000000	 bl          BlockCopy16

; 1475 : 
; 1476 : #ifdef CHECKBLT
; 1477 :   if(!CheckBlt(pParms))
; 1478 :   {
; 1479 :     OutputDebugString(TEXT("** BAD BLT **: ") TEXT(__FUNCTION__) TEXT("()"));
; 1480 :     DebugBreak();
; 1481 :   }
; 1482 : #endif
; 1483 : 
; 1484 :   return(S_OK);

  02674	e3a03000	 mov         r3, #0
  02678	e58d3048	 str         r3, [sp, #0x48]
  0267c		 |$LN5@EmulatedBl@7|

; 1485 : }

  0267c	e59d0048	 ldr         r0, [sp, #0x48]
  02680	e28dd094	 add         sp, sp, #0x94
  02684	e89d6000	 ldmia       sp, {sp, lr}
  02688	e12fff1e	 bx          lr
  0268c		 |$M43468|

			 ENDP  ; |?EmulatedBlockCopy16to16@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|, OMAPDDGPE::EmulatedBlockCopy16to16

	IMPORT	|MaskCopy16to16withA1|

  00190			 AREA	 |.pdata|, PDATA
|$T43486| DCD	|$LN5@EmulatedMa|
	DCD	0x40006a04
; Function compile flags: /Odtp

  0268c			 AREA	 |.text|, CODE, ARM

  0268c		 |?EmulatedMaskCopy16to16withA1@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::EmulatedMaskCopy16to16withA1

; 1488 : {

  0268c		 |$LN5@EmulatedMa|
  0268c	e1a0c00d	 mov         r12, sp
  02690	e92d0003	 stmdb       sp!, {r0, r1}
  02694	e92d5000	 stmdb       sp!, {r12, lr}
  02698	e24dd0b4	 sub         sp, sp, #0xB4
  0269c		 |$M43483|

; 1489 : CALLOUT(L"EmulatedMaskCopy16to16withA1()");
; 1490 : 
; 1491 : #ifdef CHECKBLT
; 1492 : //DebugBreak();
; 1493 : GPEBltParms SavedParms = *pParms;
; 1494 : ULONG size = abs(SavedParms.pDst->Stride()) * SavedParms.pDst->Height();
; 1495 : void* buffolddst = malloc(size);
; 1496 : // Save original destination
; 1497 : if(SavedParms.pDst->Stride() < 0)
; 1498 :   memcpy(buffolddst, (void*)((long)SavedParms.pDst->Buffer() - ((SavedParms.pDst->Height() - 1) * SavedParms.pDst->Stride())), size);
; 1499 : else
; 1500 :   memcpy(buffolddst, SavedParms.pDst->Buffer(), size);
; 1501 : #endif
; 1502 :   void* dstptr = pParms->pDst->Buffer();

  0269c	e59d30c0	 ldr         r3, [sp, #0xC0]
  026a0	e2833004	 add         r3, r3, #4
  026a4	e5930000	 ldr         r0, [r3]
  026a8	eb000000	 bl          |?Buffer@GPESurf@@QAAPAXXZ|
  026ac	e58d009c	 str         r0, [sp, #0x9C]
  026b0	e59d309c	 ldr         r3, [sp, #0x9C]
  026b4	e58d3028	 str         r3, [sp, #0x28]

; 1503 :   long dststride = pParms->pDst->Stride();

  026b8	e59d30c0	 ldr         r3, [sp, #0xC0]
  026bc	e2833004	 add         r3, r3, #4
  026c0	e5930000	 ldr         r0, [r3]
  026c4	eb000000	 bl          |?Stride@GPESurf@@QAAHXZ|
  026c8	e58d00a0	 str         r0, [sp, #0xA0]
  026cc	e59d30a0	 ldr         r3, [sp, #0xA0]
  026d0	e58d3040	 str         r3, [sp, #0x40]

; 1504 :   void const* srcptr = pParms->pSrc->Buffer();

  026d4	e59d30c0	 ldr         r3, [sp, #0xC0]
  026d8	e2833008	 add         r3, r3, #8
  026dc	e5930000	 ldr         r0, [r3]
  026e0	eb000000	 bl          |?Buffer@GPESurf@@QAAPAXXZ|
  026e4	e58d00a4	 str         r0, [sp, #0xA4]
  026e8	e59d30a4	 ldr         r3, [sp, #0xA4]
  026ec	e58d3058	 str         r3, [sp, #0x58]

; 1505 :   long srcstride = pParms->pSrc->Stride();

  026f0	e59d30c0	 ldr         r3, [sp, #0xC0]
  026f4	e2833008	 add         r3, r3, #8
  026f8	e5930000	 ldr         r0, [r3]
  026fc	eb000000	 bl          |?Stride@GPESurf@@QAAHXZ|
  02700	e58d00a8	 str         r0, [sp, #0xA8]
  02704	e59d30a8	 ldr         r3, [sp, #0xA8]
  02708	e58d306c	 str         r3, [sp, #0x6C]

; 1506 :   void const* mskptr = pParms->pMask->Buffer();

  0270c	e59d30c0	 ldr         r3, [sp, #0xC0]
  02710	e283300c	 add         r3, r3, #0xC
  02714	e5930000	 ldr         r0, [r3]
  02718	eb000000	 bl          |?Buffer@GPESurf@@QAAPAXXZ|
  0271c	e58d00ac	 str         r0, [sp, #0xAC]
  02720	e59d30ac	 ldr         r3, [sp, #0xAC]
  02724	e58d3054	 str         r3, [sp, #0x54]

; 1507 :   long mskstride = pParms->pMask->Stride();

  02728	e59d30c0	 ldr         r3, [sp, #0xC0]
  0272c	e283300c	 add         r3, r3, #0xC
  02730	e5930000	 ldr         r0, [r3]
  02734	eb000000	 bl          |?Stride@GPESurf@@QAAHXZ|
  02738	e58d00b0	 str         r0, [sp, #0xB0]
  0273c	e59d30b0	 ldr         r3, [sp, #0xB0]
  02740	e58d303c	 str         r3, [sp, #0x3C]

; 1508 :   RECTL rclDst = *(pParms->prclDst);

  02744	e59d30c0	 ldr         r3, [sp, #0xC0]
  02748	e2833014	 add         r3, r3, #0x14
  0274c	e5931000	 ldr         r1, [r3]
  02750	e28d0044	 add         r0, sp, #0x44
  02754	e3a02010	 mov         r2, #0x10
  02758	eb000000	 bl          memcpy

; 1509 :   RECTL rclSrc = *(pParms->prclSrc);

  0275c	e59d30c0	 ldr         r3, [sp, #0xC0]
  02760	e2833018	 add         r3, r3, #0x18
  02764	e5931000	 ldr         r1, [r3]
  02768	e28d002c	 add         r0, sp, #0x2C
  0276c	e3a02010	 mov         r2, #0x10
  02770	eb000000	 bl          memcpy

; 1510 :   RECTL rclMask = *(pParms->prclMask);

  02774	e59d30c0	 ldr         r3, [sp, #0xC0]
  02778	e283302c	 add         r3, r3, #0x2C
  0277c	e5931000	 ldr         r1, [r3]
  02780	e28d005c	 add         r0, sp, #0x5C
  02784	e3a02010	 mov         r2, #0x10
  02788	eb000000	 bl          memcpy

; 1511 : 
; 1512 :   WaitForNotBusy();

  0278c	e59d30bc	 ldr         r3, [sp, #0xBC]
  02790	e5933000	 ldr         r3, [r3]
  02794	e2833060	 add         r3, r3, #0x60
  02798	e59d00bc	 ldr         r0, [sp, #0xBC]
  0279c	e5933000	 ldr         r3, [r3]
  027a0	e1a0e00f	 mov         lr, pc
  027a4	e12fff13	 bx          r3

; 1513 :   MaskCopy16to16withA1(dstptr,
; 1514 :                        dststride,
; 1515 :                        rclDst.left,
; 1516 :                        rclDst.top,
; 1517 :                        rclDst.right - rclDst.left,
; 1518 :                        rclDst.bottom - rclDst.top,
; 1519 :                        srcptr,
; 1520 :                        srcstride,
; 1521 :                        rclSrc.left,
; 1522 :                        rclSrc.top,
; 1523 :                        mskptr,
; 1524 :                        mskstride,
; 1525 :                        rclMask.left,
; 1526 :                        rclMask.top);

  027a8	e59d3060	 ldr         r3, [sp, #0x60]
  027ac	e58d3024	 str         r3, [sp, #0x24]
  027b0	e59d305c	 ldr         r3, [sp, #0x5C]
  027b4	e58d3020	 str         r3, [sp, #0x20]
  027b8	e59d303c	 ldr         r3, [sp, #0x3C]
  027bc	e58d301c	 str         r3, [sp, #0x1C]
  027c0	e59d3054	 ldr         r3, [sp, #0x54]
  027c4	e58d3018	 str         r3, [sp, #0x18]
  027c8	e59d3030	 ldr         r3, [sp, #0x30]
  027cc	e58d3014	 str         r3, [sp, #0x14]
  027d0	e59d302c	 ldr         r3, [sp, #0x2C]
  027d4	e58d3010	 str         r3, [sp, #0x10]
  027d8	e59d306c	 ldr         r3, [sp, #0x6C]
  027dc	e58d300c	 str         r3, [sp, #0xC]
  027e0	e59d3058	 ldr         r3, [sp, #0x58]
  027e4	e58d3008	 str         r3, [sp, #8]
  027e8	e59d2050	 ldr         r2, [sp, #0x50]
  027ec	e59d3048	 ldr         r3, [sp, #0x48]
  027f0	e0423003	 sub         r3, r2, r3
  027f4	e58d3004	 str         r3, [sp, #4]
  027f8	e59d204c	 ldr         r2, [sp, #0x4C]
  027fc	e59d3044	 ldr         r3, [sp, #0x44]
  02800	e0423003	 sub         r3, r2, r3
  02804	e58d3000	 str         r3, [sp]
  02808	e59d3048	 ldr         r3, [sp, #0x48]
  0280c	e59d2044	 ldr         r2, [sp, #0x44]
  02810	e59d1040	 ldr         r1, [sp, #0x40]
  02814	e59d0028	 ldr         r0, [sp, #0x28]
  02818	eb000000	 bl          MaskCopy16to16withA1

; 1527 : 
; 1528 : #ifdef CHECKBLT
; 1529 : // Save my BLT results
; 1530 : void* buffmydst = malloc(size);
; 1531 : if(SavedParms.pDst->Stride() < 0)
; 1532 :   memcpy(buffmydst, (void*)((long)SavedParms.pDst->Buffer() - ((SavedParms.pDst->Height() - 1) * SavedParms.pDst->Stride())), size);
; 1533 : else
; 1534 :   memcpy(buffmydst, SavedParms.pDst->Buffer(), size);
; 1535 : 
; 1536 : // Check for an error
; 1537 :   unsigned int mybltcrc = wombat2d((unsigned char*)SavedParms.pDst->Buffer(),
; 1538 :                                    SavedParms.pDst->Stride(),
; 1539 :                                    SavedParms.pDst->Width(),
; 1540 :                                    SavedParms.pDst->Height());
; 1541 : // Restore original destination
; 1542 : if(SavedParms.pDst->Stride() < 0)
; 1543 :   memcpy((void*)((long)SavedParms.pDst->Buffer() - ((SavedParms.pDst->Height() - 1) * SavedParms.pDst->Stride())), buffolddst, size);
; 1544 : else
; 1545 :   memcpy(SavedParms.pDst->Buffer(), buffolddst, size);
; 1546 : 
; 1547 :   GPE* pGPE = GetGPE();
; 1548 :   pGPE->EmulatedBlt(pParms);
; 1549 :   if(mybltcrc != wombat2d((unsigned char*)SavedParms.pDst->Buffer(),
; 1550 :                           SavedParms.pDst->Stride(),
; 1551 :                           SavedParms.pDst->Width(),
; 1552 :                           SavedParms.pDst->Height()))
; 1553 :   {
; 1554 :     RETAILMSG(1, (TEXT("****** BAD BLT ******\n")));
; 1555 :     DumpParms(&SavedParms);
; 1556 :     DebugBreak();
; 1557 :   }
; 1558 :   free(buffmydst);
; 1559 :   free(buffolddst);
; 1560 : #endif
; 1561 : 
; 1562 :   return(S_OK);

  0281c	e3a03000	 mov         r3, #0
  02820	e58d3098	 str         r3, [sp, #0x98]

; 1563 : }

  02824	e59d0098	 ldr         r0, [sp, #0x98]
  02828	e28dd0b4	 add         sp, sp, #0xB4
  0282c	e89d6000	 ldmia       sp, {sp, lr}
  02830	e12fff1e	 bx          lr
  02834		 |$M43484|

			 ENDP  ; |?EmulatedMaskCopy16to16withA1@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|, OMAPDDGPE::EmulatedMaskCopy16to16withA1

	IMPORT	|BlockCopyBGR24toRGB16|

  00198			 AREA	 |.pdata|, PDATA
|$T43498| DCD	|$LN5@EmulatedBl@8|
	DCD	0x40004e04
; Function compile flags: /Odtp

  02834			 AREA	 |.text|, CODE, ARM

  02834		 |?EmulatedBlockCopyBGR24toRGB16@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::EmulatedBlockCopyBGR24toRGB16

; 1566 : {

  02834		 |$LN5@EmulatedBl@8|
  02834	e1a0c00d	 mov         r12, sp
  02838	e92d0003	 stmdb       sp!, {r0, r1}
  0283c	e92d5000	 stmdb       sp!, {r12, lr}
  02840	e24dd074	 sub         sp, sp, #0x74
  02844		 |$M43495|

; 1567 : CALLOUT(L"EmulatedBlockCopyBGR24toRGB16()");
; 1568 : 
; 1569 :   void* dstptr = pParms->pDst->Buffer();

  02844	e59d3080	 ldr         r3, [sp, #0x80]
  02848	e2833004	 add         r3, r3, #4
  0284c	e5930000	 ldr         r0, [r3]
  02850	eb000000	 bl          |?Buffer@GPESurf@@QAAPAXXZ|
  02854	e58d0064	 str         r0, [sp, #0x64]
  02858	e59d3064	 ldr         r3, [sp, #0x64]
  0285c	e58d3018	 str         r3, [sp, #0x18]

; 1570 :   long dststride = pParms->pDst->Stride();

  02860	e59d3080	 ldr         r3, [sp, #0x80]
  02864	e2833004	 add         r3, r3, #4
  02868	e5930000	 ldr         r0, [r3]
  0286c	eb000000	 bl          |?Stride@GPESurf@@QAAHXZ|
  02870	e58d0068	 str         r0, [sp, #0x68]
  02874	e59d3068	 ldr         r3, [sp, #0x68]
  02878	e58d302c	 str         r3, [sp, #0x2C]

; 1571 :   void* srcptr = pParms->pSrc->Buffer();

  0287c	e59d3080	 ldr         r3, [sp, #0x80]
  02880	e2833008	 add         r3, r3, #8
  02884	e5930000	 ldr         r0, [r3]
  02888	eb000000	 bl          |?Buffer@GPESurf@@QAAPAXXZ|
  0288c	e58d006c	 str         r0, [sp, #0x6C]
  02890	e59d306c	 ldr         r3, [sp, #0x6C]
  02894	e58d3040	 str         r3, [sp, #0x40]

; 1572 :   long srcstride = pParms->pSrc->Stride();

  02898	e59d3080	 ldr         r3, [sp, #0x80]
  0289c	e2833008	 add         r3, r3, #8
  028a0	e5930000	 ldr         r0, [r3]
  028a4	eb000000	 bl          |?Stride@GPESurf@@QAAHXZ|
  028a8	e58d0070	 str         r0, [sp, #0x70]
  028ac	e59d3070	 ldr         r3, [sp, #0x70]
  028b0	e58d3044	 str         r3, [sp, #0x44]

; 1573 :   RECTL rclDst = *(pParms->prclDst);

  028b4	e59d3080	 ldr         r3, [sp, #0x80]
  028b8	e2833014	 add         r3, r3, #0x14
  028bc	e5931000	 ldr         r1, [r3]
  028c0	e28d0030	 add         r0, sp, #0x30
  028c4	e3a02010	 mov         r2, #0x10
  028c8	eb000000	 bl          memcpy

; 1574 :   RECTL rclSrc = *(pParms->prclSrc);

  028cc	e59d3080	 ldr         r3, [sp, #0x80]
  028d0	e2833018	 add         r3, r3, #0x18
  028d4	e5931000	 ldr         r1, [r3]
  028d8	e28d001c	 add         r0, sp, #0x1C
  028dc	e3a02010	 mov         r2, #0x10
  028e0	eb000000	 bl          memcpy

; 1575 : 
; 1576 :   WaitForNotBusy();

  028e4	e59d307c	 ldr         r3, [sp, #0x7C]
  028e8	e5933000	 ldr         r3, [r3]
  028ec	e2833060	 add         r3, r3, #0x60
  028f0	e59d007c	 ldr         r0, [sp, #0x7C]
  028f4	e5933000	 ldr         r3, [r3]
  028f8	e1a0e00f	 mov         lr, pc
  028fc	e12fff13	 bx          r3

; 1577 : #if 1
; 1578 :   BlockCopyBGR24toRGB16(dstptr,
; 1579 :                         dststride,
; 1580 :                         rclDst.left,
; 1581 :                         rclDst.top,
; 1582 :                         rclDst.right - rclDst.left,
; 1583 :                         rclDst.bottom - rclDst.top,
; 1584 :                         srcptr,
; 1585 :                         srcstride,
; 1586 :                         rclSrc.left,
; 1587 :                         rclSrc.top);

  02900	e59d3020	 ldr         r3, [sp, #0x20]
  02904	e58d3014	 str         r3, [sp, #0x14]
  02908	e59d301c	 ldr         r3, [sp, #0x1C]
  0290c	e58d3010	 str         r3, [sp, #0x10]
  02910	e59d3044	 ldr         r3, [sp, #0x44]
  02914	e58d300c	 str         r3, [sp, #0xC]
  02918	e59d3040	 ldr         r3, [sp, #0x40]
  0291c	e58d3008	 str         r3, [sp, #8]
  02920	e59d203c	 ldr         r2, [sp, #0x3C]
  02924	e59d3034	 ldr         r3, [sp, #0x34]
  02928	e0423003	 sub         r3, r2, r3
  0292c	e58d3004	 str         r3, [sp, #4]
  02930	e59d2038	 ldr         r2, [sp, #0x38]
  02934	e59d3030	 ldr         r3, [sp, #0x30]
  02938	e0423003	 sub         r3, r2, r3
  0293c	e58d3000	 str         r3, [sp]
  02940	e59d3034	 ldr         r3, [sp, #0x34]
  02944	e59d2030	 ldr         r2, [sp, #0x30]
  02948	e59d102c	 ldr         r1, [sp, #0x2C]
  0294c	e59d0018	 ldr         r0, [sp, #0x18]
  02950	eb000000	 bl          BlockCopyBGR24toRGB16

; 1588 : #else
; 1589 :   BlockCopyRGB24toRGB16_v1(dstptr,
; 1590 :                            dststride,
; 1591 :                            rclDst.left,
; 1592 :                            rclDst.top,
; 1593 :                            rclDst.right - rclDst.left,
; 1594 :                            rclDst.bottom - rclDst.top,
; 1595 :                            srcptr,
; 1596 :                            srcstride,
; 1597 :                            rclSrc.left,
; 1598 :                            rclSrc.top);
; 1599 : #endif
; 1600 : 
; 1601 : #ifdef CHECKBLT
; 1602 :   if(!CheckBlt(pParms))
; 1603 :   {
; 1604 :     OutputDebugString(TEXT("** BAD BLT **: ") TEXT(__FUNCTION__) TEXT("()"));
; 1605 :     DebugBreak();
; 1606 :   }
; 1607 : #endif
; 1608 : 
; 1609 :   return(S_OK);

  02954	e3a03000	 mov         r3, #0
  02958	e58d3060	 str         r3, [sp, #0x60]

; 1610 : }

  0295c	e59d0060	 ldr         r0, [sp, #0x60]
  02960	e28dd074	 add         sp, sp, #0x74
  02964	e89d6000	 ldmia       sp, {sp, lr}
  02968	e12fff1e	 bx          lr
  0296c		 |$M43496|

			 ENDP  ; |?EmulatedBlockCopyBGR24toRGB16@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|, OMAPDDGPE::EmulatedBlockCopyBGR24toRGB16

	IMPORT	|BlockCopyBGRx32toRGB16|

  001a0			 AREA	 |.pdata|, PDATA
|$T43510| DCD	|$LN5@EmulatedBl@9|
	DCD	0x40004e04
; Function compile flags: /Odtp

  0296c			 AREA	 |.text|, CODE, ARM

  0296c		 |?EmulatedBlockCopyBGRx32toRGB16@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::EmulatedBlockCopyBGRx32toRGB16

; 1613 : {

  0296c		 |$LN5@EmulatedBl@9|
  0296c	e1a0c00d	 mov         r12, sp
  02970	e92d0003	 stmdb       sp!, {r0, r1}
  02974	e92d5000	 stmdb       sp!, {r12, lr}
  02978	e24dd074	 sub         sp, sp, #0x74
  0297c		 |$M43507|

; 1614 : CALLOUT(L"EmulatedBlockCopyBGRx32toRGB16()");
; 1615 : 
; 1616 :   void* dstptr = pParms->pDst->Buffer();

  0297c	e59d3080	 ldr         r3, [sp, #0x80]
  02980	e2833004	 add         r3, r3, #4
  02984	e5930000	 ldr         r0, [r3]
  02988	eb000000	 bl          |?Buffer@GPESurf@@QAAPAXXZ|
  0298c	e58d0064	 str         r0, [sp, #0x64]
  02990	e59d3064	 ldr         r3, [sp, #0x64]
  02994	e58d3018	 str         r3, [sp, #0x18]

; 1617 :   long dststride = pParms->pDst->Stride();

  02998	e59d3080	 ldr         r3, [sp, #0x80]
  0299c	e2833004	 add         r3, r3, #4
  029a0	e5930000	 ldr         r0, [r3]
  029a4	eb000000	 bl          |?Stride@GPESurf@@QAAHXZ|
  029a8	e58d0068	 str         r0, [sp, #0x68]
  029ac	e59d3068	 ldr         r3, [sp, #0x68]
  029b0	e58d302c	 str         r3, [sp, #0x2C]

; 1618 :   void* srcptr = pParms->pSrc->Buffer();

  029b4	e59d3080	 ldr         r3, [sp, #0x80]
  029b8	e2833008	 add         r3, r3, #8
  029bc	e5930000	 ldr         r0, [r3]
  029c0	eb000000	 bl          |?Buffer@GPESurf@@QAAPAXXZ|
  029c4	e58d006c	 str         r0, [sp, #0x6C]
  029c8	e59d306c	 ldr         r3, [sp, #0x6C]
  029cc	e58d3040	 str         r3, [sp, #0x40]

; 1619 :   long srcstride = pParms->pSrc->Stride();

  029d0	e59d3080	 ldr         r3, [sp, #0x80]
  029d4	e2833008	 add         r3, r3, #8
  029d8	e5930000	 ldr         r0, [r3]
  029dc	eb000000	 bl          |?Stride@GPESurf@@QAAHXZ|
  029e0	e58d0070	 str         r0, [sp, #0x70]
  029e4	e59d3070	 ldr         r3, [sp, #0x70]
  029e8	e58d3044	 str         r3, [sp, #0x44]

; 1620 :   RECTL rclDst = *(pParms->prclDst);

  029ec	e59d3080	 ldr         r3, [sp, #0x80]
  029f0	e2833014	 add         r3, r3, #0x14
  029f4	e5931000	 ldr         r1, [r3]
  029f8	e28d0030	 add         r0, sp, #0x30
  029fc	e3a02010	 mov         r2, #0x10
  02a00	eb000000	 bl          memcpy

; 1621 :   RECTL rclSrc = *(pParms->prclSrc);

  02a04	e59d3080	 ldr         r3, [sp, #0x80]
  02a08	e2833018	 add         r3, r3, #0x18
  02a0c	e5931000	 ldr         r1, [r3]
  02a10	e28d001c	 add         r0, sp, #0x1C
  02a14	e3a02010	 mov         r2, #0x10
  02a18	eb000000	 bl          memcpy

; 1622 : 
; 1623 :   WaitForNotBusy();

  02a1c	e59d307c	 ldr         r3, [sp, #0x7C]
  02a20	e5933000	 ldr         r3, [r3]
  02a24	e2833060	 add         r3, r3, #0x60
  02a28	e59d007c	 ldr         r0, [sp, #0x7C]
  02a2c	e5933000	 ldr         r3, [r3]
  02a30	e1a0e00f	 mov         lr, pc
  02a34	e12fff13	 bx          r3

; 1624 :   BlockCopyBGRx32toRGB16(dstptr,
; 1625 :                          dststride,
; 1626 :                          rclDst.left,
; 1627 :                          rclDst.top,
; 1628 :                          rclDst.right - rclDst.left,
; 1629 :                          rclDst.bottom - rclDst.top,
; 1630 :                          srcptr,
; 1631 :                          srcstride,
; 1632 :                          rclSrc.left,
; 1633 :                          rclSrc.top);

  02a38	e59d3020	 ldr         r3, [sp, #0x20]
  02a3c	e58d3014	 str         r3, [sp, #0x14]
  02a40	e59d301c	 ldr         r3, [sp, #0x1C]
  02a44	e58d3010	 str         r3, [sp, #0x10]
  02a48	e59d3044	 ldr         r3, [sp, #0x44]
  02a4c	e58d300c	 str         r3, [sp, #0xC]
  02a50	e59d3040	 ldr         r3, [sp, #0x40]
  02a54	e58d3008	 str         r3, [sp, #8]
  02a58	e59d203c	 ldr         r2, [sp, #0x3C]
  02a5c	e59d3034	 ldr         r3, [sp, #0x34]
  02a60	e0423003	 sub         r3, r2, r3
  02a64	e58d3004	 str         r3, [sp, #4]
  02a68	e59d2038	 ldr         r2, [sp, #0x38]
  02a6c	e59d3030	 ldr         r3, [sp, #0x30]
  02a70	e0423003	 sub         r3, r2, r3
  02a74	e58d3000	 str         r3, [sp]
  02a78	e59d3034	 ldr         r3, [sp, #0x34]
  02a7c	e59d2030	 ldr         r2, [sp, #0x30]
  02a80	e59d102c	 ldr         r1, [sp, #0x2C]
  02a84	e59d0018	 ldr         r0, [sp, #0x18]
  02a88	eb000000	 bl          BlockCopyBGRx32toRGB16

; 1634 : 
; 1635 : #ifdef CHECKBLT
; 1636 :   if(!CheckBlt(pParms))
; 1637 :   {
; 1638 :     OutputDebugString(TEXT("** BAD BLT **: ") TEXT(__FUNCTION__) TEXT("()"));
; 1639 :     DebugBreak();
; 1640 :   }
; 1641 : #endif
; 1642 : 
; 1643 :   return(S_OK);

  02a8c	e3a03000	 mov         r3, #0
  02a90	e58d3060	 str         r3, [sp, #0x60]

; 1644 : }

  02a94	e59d0060	 ldr         r0, [sp, #0x60]
  02a98	e28dd074	 add         sp, sp, #0x74
  02a9c	e89d6000	 ldmia       sp, {sp, lr}
  02aa0	e12fff1e	 bx          lr
  02aa4		 |$M43508|

			 ENDP  ; |?EmulatedBlockCopyBGRx32toRGB16@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|, OMAPDDGPE::EmulatedBlockCopyBGRx32toRGB16

	IMPORT	|AlphaBlendpBGRA32toRGB16|

  001a8			 AREA	 |.pdata|, PDATA
|$T43522| DCD	|$LN5@EmulatedPe|
	DCD	0x40004e04
; Function compile flags: /Odtp

  02aa4			 AREA	 |.text|, CODE, ARM

  02aa4		 |?EmulatedPerPixelAlphaBlendBGRA32toRGB16@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::EmulatedPerPixelAlphaBlendBGRA32toRGB16

; 1647 : {

  02aa4		 |$LN5@EmulatedPe|
  02aa4	e1a0c00d	 mov         r12, sp
  02aa8	e92d0003	 stmdb       sp!, {r0, r1}
  02aac	e92d5000	 stmdb       sp!, {r12, lr}
  02ab0	e24dd074	 sub         sp, sp, #0x74
  02ab4		 |$M43519|

; 1648 : CALLOUT(L"EmulatedPerPixelAlphaBlendBGRA32toRGB16()");
; 1649 : 
; 1650 : #if defined(CHECKBLT) && !defined(NOCHECKALPHA)
; 1651 : //DebugBreak();
; 1652 : GPEBltParms SavedParms = *pParms;
; 1653 : ULONG size = abs(SavedParms.pDst->Stride()) * SavedParms.pDst->Height();
; 1654 : void* buffolddst = malloc(size);
; 1655 : // Save original destination
; 1656 : if(SavedParms.pDst->Stride() < 0)
; 1657 :   memcpy(buffolddst, (void*)((long)SavedParms.pDst->Buffer() - ((SavedParms.pDst->Height() - 1) * SavedParms.pDst->Stride())), size);
; 1658 : else
; 1659 :   memcpy(buffolddst, SavedParms.pDst->Buffer(), size);
; 1660 : #endif
; 1661 :   void* dstptr = pParms->pDst->Buffer();

  02ab4	e59d3080	 ldr         r3, [sp, #0x80]
  02ab8	e2833004	 add         r3, r3, #4
  02abc	e5930000	 ldr         r0, [r3]
  02ac0	eb000000	 bl          |?Buffer@GPESurf@@QAAPAXXZ|
  02ac4	e58d0064	 str         r0, [sp, #0x64]
  02ac8	e59d3064	 ldr         r3, [sp, #0x64]
  02acc	e58d3018	 str         r3, [sp, #0x18]

; 1662 :   long dststride = pParms->pDst->Stride();

  02ad0	e59d3080	 ldr         r3, [sp, #0x80]
  02ad4	e2833004	 add         r3, r3, #4
  02ad8	e5930000	 ldr         r0, [r3]
  02adc	eb000000	 bl          |?Stride@GPESurf@@QAAHXZ|
  02ae0	e58d0068	 str         r0, [sp, #0x68]
  02ae4	e59d3068	 ldr         r3, [sp, #0x68]
  02ae8	e58d302c	 str         r3, [sp, #0x2C]

; 1663 :   void* srcptr = pParms->pSrc->Buffer();

  02aec	e59d3080	 ldr         r3, [sp, #0x80]
  02af0	e2833008	 add         r3, r3, #8
  02af4	e5930000	 ldr         r0, [r3]
  02af8	eb000000	 bl          |?Buffer@GPESurf@@QAAPAXXZ|
  02afc	e58d006c	 str         r0, [sp, #0x6C]
  02b00	e59d306c	 ldr         r3, [sp, #0x6C]
  02b04	e58d3040	 str         r3, [sp, #0x40]

; 1664 :   long srcstride = pParms->pSrc->Stride();

  02b08	e59d3080	 ldr         r3, [sp, #0x80]
  02b0c	e2833008	 add         r3, r3, #8
  02b10	e5930000	 ldr         r0, [r3]
  02b14	eb000000	 bl          |?Stride@GPESurf@@QAAHXZ|
  02b18	e58d0070	 str         r0, [sp, #0x70]
  02b1c	e59d3070	 ldr         r3, [sp, #0x70]
  02b20	e58d3044	 str         r3, [sp, #0x44]

; 1665 :   RECTL rclDst = *(pParms->prclDst);

  02b24	e59d3080	 ldr         r3, [sp, #0x80]
  02b28	e2833014	 add         r3, r3, #0x14
  02b2c	e5931000	 ldr         r1, [r3]
  02b30	e28d0030	 add         r0, sp, #0x30
  02b34	e3a02010	 mov         r2, #0x10
  02b38	eb000000	 bl          memcpy

; 1666 :   RECTL rclSrc = *(pParms->prclSrc);

  02b3c	e59d3080	 ldr         r3, [sp, #0x80]
  02b40	e2833018	 add         r3, r3, #0x18
  02b44	e5931000	 ldr         r1, [r3]
  02b48	e28d001c	 add         r0, sp, #0x1C
  02b4c	e3a02010	 mov         r2, #0x10
  02b50	eb000000	 bl          memcpy

; 1667 : 
; 1668 :   WaitForNotBusy();

  02b54	e59d307c	 ldr         r3, [sp, #0x7C]
  02b58	e5933000	 ldr         r3, [r3]
  02b5c	e2833060	 add         r3, r3, #0x60
  02b60	e59d007c	 ldr         r0, [sp, #0x7C]
  02b64	e5933000	 ldr         r3, [r3]
  02b68	e1a0e00f	 mov         lr, pc
  02b6c	e12fff13	 bx          r3

; 1669 :   AlphaBlendpBGRA32toRGB16(dstptr,
; 1670 :                            dststride,
; 1671 :                            rclDst.left,
; 1672 :                            rclDst.top,
; 1673 :                            rclDst.right - rclDst.left,
; 1674 :                            rclDst.bottom - rclDst.top,
; 1675 :                            srcptr,
; 1676 :                            srcstride,
; 1677 :                            rclSrc.left,
; 1678 :                            rclSrc.top);

  02b70	e59d3020	 ldr         r3, [sp, #0x20]
  02b74	e58d3014	 str         r3, [sp, #0x14]
  02b78	e59d301c	 ldr         r3, [sp, #0x1C]
  02b7c	e58d3010	 str         r3, [sp, #0x10]
  02b80	e59d3044	 ldr         r3, [sp, #0x44]
  02b84	e58d300c	 str         r3, [sp, #0xC]
  02b88	e59d3040	 ldr         r3, [sp, #0x40]
  02b8c	e58d3008	 str         r3, [sp, #8]
  02b90	e59d203c	 ldr         r2, [sp, #0x3C]
  02b94	e59d3034	 ldr         r3, [sp, #0x34]
  02b98	e0423003	 sub         r3, r2, r3
  02b9c	e58d3004	 str         r3, [sp, #4]
  02ba0	e59d2038	 ldr         r2, [sp, #0x38]
  02ba4	e59d3030	 ldr         r3, [sp, #0x30]
  02ba8	e0423003	 sub         r3, r2, r3
  02bac	e58d3000	 str         r3, [sp]
  02bb0	e59d3034	 ldr         r3, [sp, #0x34]
  02bb4	e59d2030	 ldr         r2, [sp, #0x30]
  02bb8	e59d102c	 ldr         r1, [sp, #0x2C]
  02bbc	e59d0018	 ldr         r0, [sp, #0x18]
  02bc0	eb000000	 bl          AlphaBlendpBGRA32toRGB16

; 1679 : 
; 1680 : #if defined(CHECKBLT) && !defined(NOCHECKALPHA)
; 1681 : // Save my BLT results
; 1682 : void* buffmydst = malloc(size);
; 1683 : if(SavedParms.pDst->Stride() < 0)
; 1684 :   memcpy(buffmydst, (void*)((long)SavedParms.pDst->Buffer() - ((SavedParms.pDst->Height() - 1) * SavedParms.pDst->Stride())), size);
; 1685 : else
; 1686 :   memcpy(buffmydst, SavedParms.pDst->Buffer(), size);
; 1687 : 
; 1688 : // Check for an error
; 1689 :   unsigned int mybltcrc = wombat2d((unsigned char*)SavedParms.pDst->Buffer(),
; 1690 :                                    SavedParms.pDst->Stride(),
; 1691 :                                    SavedParms.pDst->Width(),
; 1692 :                                    SavedParms.pDst->Height());
; 1693 : // Restore original destination
; 1694 : if(SavedParms.pDst->Stride() < 0)
; 1695 :   memcpy((void*)((long)SavedParms.pDst->Buffer() - ((SavedParms.pDst->Height() - 1) * SavedParms.pDst->Stride())), buffolddst, size);
; 1696 : else
; 1697 :   memcpy(SavedParms.pDst->Buffer(), buffolddst, size);
; 1698 : 
; 1699 :   GPE* pGPE = GetGPE();
; 1700 :   pGPE->EmulatedBlt(pParms);
; 1701 :   if(mybltcrc != wombat2d((unsigned char*)SavedParms.pDst->Buffer(),
; 1702 :                           SavedParms.pDst->Stride(),
; 1703 :                           SavedParms.pDst->Width(),
; 1704 :                           SavedParms.pDst->Height()))
; 1705 :   {
; 1706 :     RETAILMSG(1, (TEXT("****** BAD BLT ******\n")));
; 1707 :     DumpParms(&SavedParms);
; 1708 : 
; 1709 :     // Print out specific errors
; 1710 :     long sx, sy, dx, dy;
; 1711 :     for(sy = SavedParms.prclSrc->top, dy = SavedParms.prclDst->top;
; 1712 :         sy < SavedParms.prclSrc->bottom;
; 1713 :         sy++, dy++)
; 1714 :     {
; 1715 :       for(sx = SavedParms.prclSrc->left, dx = SavedParms.prclDst->left;
; 1716 :           sx < SavedParms.prclSrc->right;
; 1717 :           sx++, dx++)
; 1718 :       {
; 1719 :         WORD* mydst  = (WORD*)((long)buffmydst + (dx * sizeof(WORD)) + (dy * abs(SavedParms.pDst->Stride())));
; 1720 :         WORD* refdst = (WORD*)((long)SavedParms.pDst->Buffer()  + (dx * sizeof(WORD)) + (dy * SavedParms.pDst->Stride()));
; 1721 :         if(*mydst != *refdst)
; 1722 :         {
; 1723 :           RETAILMSG(1, (TEXT("Bad pixel: (%d, %d) -> (%d, %d), Src: 0x%08X, Dst Before: 0x%04X, My Dst After: 0x%04X, Ref Dst AFter: 0x%04X\n"),
; 1724 :             sx, sy,
; 1725 :             dx, dy,
; 1726 :             *((ULONG*)((long)SavedParms.pSrc->Buffer() + (sx * sizeof(ULONG)) + (sy * SavedParms.pSrc->Stride()))),
; 1727 :             *((WORD*)((long)buffolddst + (dx * sizeof(WORD)) + (dy * abs(SavedParms.pDst->Stride())))),
; 1728 :             *mydst,
; 1729 :             *refdst));
; 1730 :         }
; 1731 :       }
; 1732 :     }
; 1733 :     DebugBreak();
; 1734 :   }
; 1735 :   free(buffmydst);
; 1736 :   free(buffolddst);
; 1737 : #endif
; 1738 : 
; 1739 :   return(S_OK);

  02bc4	e3a03000	 mov         r3, #0
  02bc8	e58d3060	 str         r3, [sp, #0x60]

; 1740 : }

  02bcc	e59d0060	 ldr         r0, [sp, #0x60]
  02bd0	e28dd074	 add         sp, sp, #0x74
  02bd4	e89d6000	 ldmia       sp, {sp, lr}
  02bd8	e12fff1e	 bx          lr
  02bdc		 |$M43520|

			 ENDP  ; |?EmulatedPerPixelAlphaBlendBGRA32toRGB16@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|, OMAPDDGPE::EmulatedPerPixelAlphaBlendBGRA32toRGB16

	IMPORT	|BlockCopyLUT8to24|

  001b0			 AREA	 |.pdata|, PDATA
|$T43535| DCD	|$LN5@EmulatedBl@10|
	DCD	0x40005204
; Function compile flags: /Odtp

  02bdc			 AREA	 |.text|, CODE, ARM

  02bdc		 |?EmulatedBlockCopyLUT8to24@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::EmulatedBlockCopyLUT8to24

; 1743 : {

  02bdc		 |$LN5@EmulatedBl@10|
  02bdc	e1a0c00d	 mov         r12, sp
  02be0	e92d0003	 stmdb       sp!, {r0, r1}
  02be4	e92d5000	 stmdb       sp!, {r12, lr}
  02be8	e24dd07c	 sub         sp, sp, #0x7C
  02bec		 |$M43532|

; 1744 : CALLOUT(L"EmulatedBlockCopyLUT8to24()");
; 1745 : 
; 1746 :   void* dstptr = pParms->pDst->Buffer();

  02bec	e59d3088	 ldr         r3, [sp, #0x88]
  02bf0	e2833004	 add         r3, r3, #4
  02bf4	e5930000	 ldr         r0, [r3]
  02bf8	eb000000	 bl          |?Buffer@GPESurf@@QAAPAXXZ|
  02bfc	e58d006c	 str         r0, [sp, #0x6C]
  02c00	e59d306c	 ldr         r3, [sp, #0x6C]
  02c04	e58d301c	 str         r3, [sp, #0x1C]

; 1747 :   long dststride = pParms->pDst->Stride();

  02c08	e59d3088	 ldr         r3, [sp, #0x88]
  02c0c	e2833004	 add         r3, r3, #4
  02c10	e5930000	 ldr         r0, [r3]
  02c14	eb000000	 bl          |?Stride@GPESurf@@QAAHXZ|
  02c18	e58d0070	 str         r0, [sp, #0x70]
  02c1c	e59d3070	 ldr         r3, [sp, #0x70]
  02c20	e58d3030	 str         r3, [sp, #0x30]

; 1748 :   void* srcptr = pParms->pSrc->Buffer();

  02c24	e59d3088	 ldr         r3, [sp, #0x88]
  02c28	e2833008	 add         r3, r3, #8
  02c2c	e5930000	 ldr         r0, [r3]
  02c30	eb000000	 bl          |?Buffer@GPESurf@@QAAPAXXZ|
  02c34	e58d0074	 str         r0, [sp, #0x74]
  02c38	e59d3074	 ldr         r3, [sp, #0x74]
  02c3c	e58d3044	 str         r3, [sp, #0x44]

; 1749 :   long srcstride = pParms->pSrc->Stride();

  02c40	e59d3088	 ldr         r3, [sp, #0x88]
  02c44	e2833008	 add         r3, r3, #8
  02c48	e5930000	 ldr         r0, [r3]
  02c4c	eb000000	 bl          |?Stride@GPESurf@@QAAHXZ|
  02c50	e58d0078	 str         r0, [sp, #0x78]
  02c54	e59d3078	 ldr         r3, [sp, #0x78]
  02c58	e58d3048	 str         r3, [sp, #0x48]

; 1750 :   RECTL rclDst = *(pParms->prclDst);

  02c5c	e59d3088	 ldr         r3, [sp, #0x88]
  02c60	e2833014	 add         r3, r3, #0x14
  02c64	e5931000	 ldr         r1, [r3]
  02c68	e28d0034	 add         r0, sp, #0x34
  02c6c	e3a02010	 mov         r2, #0x10
  02c70	eb000000	 bl          memcpy

; 1751 :   RECTL rclSrc = *(pParms->prclSrc);

  02c74	e59d3088	 ldr         r3, [sp, #0x88]
  02c78	e2833018	 add         r3, r3, #0x18
  02c7c	e5931000	 ldr         r1, [r3]
  02c80	e28d0020	 add         r0, sp, #0x20
  02c84	e3a02010	 mov         r2, #0x10
  02c88	eb000000	 bl          memcpy

; 1752 : 
; 1753 :   WaitForNotBusy();

  02c8c	e59d3084	 ldr         r3, [sp, #0x84]
  02c90	e5933000	 ldr         r3, [r3]
  02c94	e2833060	 add         r3, r3, #0x60
  02c98	e59d0084	 ldr         r0, [sp, #0x84]
  02c9c	e5933000	 ldr         r3, [r3]
  02ca0	e1a0e00f	 mov         lr, pc
  02ca4	e12fff13	 bx          r3

; 1754 :   BlockCopyLUT8to24(dstptr,
; 1755 :                     dststride,
; 1756 :                     rclDst.left,
; 1757 :                     rclDst.top,
; 1758 :                     rclDst.right - rclDst.left,
; 1759 :                     rclDst.bottom - rclDst.top,
; 1760 :                     srcptr,
; 1761 :                     srcstride,
; 1762 :                     rclSrc.left,
; 1763 :                     rclSrc.top,
; 1764 :                     pParms->pLookup);

  02ca8	e59d3088	 ldr         r3, [sp, #0x88]
  02cac	e283303c	 add         r3, r3, #0x3C
  02cb0	e5933000	 ldr         r3, [r3]
  02cb4	e58d3018	 str         r3, [sp, #0x18]
  02cb8	e59d3024	 ldr         r3, [sp, #0x24]
  02cbc	e58d3014	 str         r3, [sp, #0x14]
  02cc0	e59d3020	 ldr         r3, [sp, #0x20]
  02cc4	e58d3010	 str         r3, [sp, #0x10]
  02cc8	e59d3048	 ldr         r3, [sp, #0x48]
  02ccc	e58d300c	 str         r3, [sp, #0xC]
  02cd0	e59d3044	 ldr         r3, [sp, #0x44]
  02cd4	e58d3008	 str         r3, [sp, #8]
  02cd8	e59d2040	 ldr         r2, [sp, #0x40]
  02cdc	e59d3038	 ldr         r3, [sp, #0x38]
  02ce0	e0423003	 sub         r3, r2, r3
  02ce4	e58d3004	 str         r3, [sp, #4]
  02ce8	e59d203c	 ldr         r2, [sp, #0x3C]
  02cec	e59d3034	 ldr         r3, [sp, #0x34]
  02cf0	e0423003	 sub         r3, r2, r3
  02cf4	e58d3000	 str         r3, [sp]
  02cf8	e59d3038	 ldr         r3, [sp, #0x38]
  02cfc	e59d2034	 ldr         r2, [sp, #0x34]
  02d00	e59d1030	 ldr         r1, [sp, #0x30]
  02d04	e59d001c	 ldr         r0, [sp, #0x1C]
  02d08	eb000000	 bl          BlockCopyLUT8to24

; 1765 : 
; 1766 : #ifdef CHECKBLT
; 1767 :   if(!CheckBlt(pParms))
; 1768 :   {
; 1769 :     OutputDebugString(TEXT("** BAD BLT **: ") TEXT(__FUNCTION__) TEXT("()"));
; 1770 :     DebugBreak();
; 1771 :   }
; 1772 : #endif
; 1773 : 
; 1774 :   return(S_OK);

  02d0c	e3a03000	 mov         r3, #0
  02d10	e58d3068	 str         r3, [sp, #0x68]

; 1775 : }

  02d14	e59d0068	 ldr         r0, [sp, #0x68]
  02d18	e28dd07c	 add         sp, sp, #0x7C
  02d1c	e89d6000	 ldmia       sp, {sp, lr}
  02d20	e12fff1e	 bx          lr
  02d24		 |$M43533|

			 ENDP  ; |?EmulatedBlockCopyLUT8to24@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|, OMAPDDGPE::EmulatedBlockCopyLUT8to24

	IMPORT	|BlockCopyRGB16toBGR24|

  001b8			 AREA	 |.pdata|, PDATA
|$T43547| DCD	|$LN5@EmulatedBl@11|
	DCD	0x40004e04
; Function compile flags: /Odtp

  02d24			 AREA	 |.text|, CODE, ARM

  02d24		 |?EmulatedBlockCopyRGB16toBGR24@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::EmulatedBlockCopyRGB16toBGR24

; 1778 : {

  02d24		 |$LN5@EmulatedBl@11|
  02d24	e1a0c00d	 mov         r12, sp
  02d28	e92d0003	 stmdb       sp!, {r0, r1}
  02d2c	e92d5000	 stmdb       sp!, {r12, lr}
  02d30	e24dd074	 sub         sp, sp, #0x74
  02d34		 |$M43544|

; 1779 : CALLOUT(L"EmulatedBlockCopyRGB16toBGR24()");
; 1780 : 
; 1781 :   void* dstptr = pParms->pDst->Buffer();

  02d34	e59d3080	 ldr         r3, [sp, #0x80]
  02d38	e2833004	 add         r3, r3, #4
  02d3c	e5930000	 ldr         r0, [r3]
  02d40	eb000000	 bl          |?Buffer@GPESurf@@QAAPAXXZ|
  02d44	e58d0064	 str         r0, [sp, #0x64]
  02d48	e59d3064	 ldr         r3, [sp, #0x64]
  02d4c	e58d3018	 str         r3, [sp, #0x18]

; 1782 :   long dststride = pParms->pDst->Stride();

  02d50	e59d3080	 ldr         r3, [sp, #0x80]
  02d54	e2833004	 add         r3, r3, #4
  02d58	e5930000	 ldr         r0, [r3]
  02d5c	eb000000	 bl          |?Stride@GPESurf@@QAAHXZ|
  02d60	e58d0068	 str         r0, [sp, #0x68]
  02d64	e59d3068	 ldr         r3, [sp, #0x68]
  02d68	e58d302c	 str         r3, [sp, #0x2C]

; 1783 :   void* srcptr = pParms->pSrc->Buffer();

  02d6c	e59d3080	 ldr         r3, [sp, #0x80]
  02d70	e2833008	 add         r3, r3, #8
  02d74	e5930000	 ldr         r0, [r3]
  02d78	eb000000	 bl          |?Buffer@GPESurf@@QAAPAXXZ|
  02d7c	e58d006c	 str         r0, [sp, #0x6C]
  02d80	e59d306c	 ldr         r3, [sp, #0x6C]
  02d84	e58d3040	 str         r3, [sp, #0x40]

; 1784 :   long srcstride = pParms->pSrc->Stride();

  02d88	e59d3080	 ldr         r3, [sp, #0x80]
  02d8c	e2833008	 add         r3, r3, #8
  02d90	e5930000	 ldr         r0, [r3]
  02d94	eb000000	 bl          |?Stride@GPESurf@@QAAHXZ|
  02d98	e58d0070	 str         r0, [sp, #0x70]
  02d9c	e59d3070	 ldr         r3, [sp, #0x70]
  02da0	e58d3044	 str         r3, [sp, #0x44]

; 1785 :   RECTL rclDst = *(pParms->prclDst);

  02da4	e59d3080	 ldr         r3, [sp, #0x80]
  02da8	e2833014	 add         r3, r3, #0x14
  02dac	e5931000	 ldr         r1, [r3]
  02db0	e28d0030	 add         r0, sp, #0x30
  02db4	e3a02010	 mov         r2, #0x10
  02db8	eb000000	 bl          memcpy

; 1786 :   RECTL rclSrc = *(pParms->prclSrc);

  02dbc	e59d3080	 ldr         r3, [sp, #0x80]
  02dc0	e2833018	 add         r3, r3, #0x18
  02dc4	e5931000	 ldr         r1, [r3]
  02dc8	e28d001c	 add         r0, sp, #0x1C
  02dcc	e3a02010	 mov         r2, #0x10
  02dd0	eb000000	 bl          memcpy

; 1787 : 
; 1788 :   WaitForNotBusy();

  02dd4	e59d307c	 ldr         r3, [sp, #0x7C]
  02dd8	e5933000	 ldr         r3, [r3]
  02ddc	e2833060	 add         r3, r3, #0x60
  02de0	e59d007c	 ldr         r0, [sp, #0x7C]
  02de4	e5933000	 ldr         r3, [r3]
  02de8	e1a0e00f	 mov         lr, pc
  02dec	e12fff13	 bx          r3

; 1789 :   BlockCopyRGB16toBGR24(dstptr,
; 1790 :                         dststride,
; 1791 :                         rclDst.left,
; 1792 :                         rclDst.top,
; 1793 :                         rclDst.right - rclDst.left,
; 1794 :                         rclDst.bottom - rclDst.top,
; 1795 :                         srcptr,
; 1796 :                         srcstride,
; 1797 :                         rclSrc.left,
; 1798 :                         rclSrc.top);

  02df0	e59d3020	 ldr         r3, [sp, #0x20]
  02df4	e58d3014	 str         r3, [sp, #0x14]
  02df8	e59d301c	 ldr         r3, [sp, #0x1C]
  02dfc	e58d3010	 str         r3, [sp, #0x10]
  02e00	e59d3044	 ldr         r3, [sp, #0x44]
  02e04	e58d300c	 str         r3, [sp, #0xC]
  02e08	e59d3040	 ldr         r3, [sp, #0x40]
  02e0c	e58d3008	 str         r3, [sp, #8]
  02e10	e59d203c	 ldr         r2, [sp, #0x3C]
  02e14	e59d3034	 ldr         r3, [sp, #0x34]
  02e18	e0423003	 sub         r3, r2, r3
  02e1c	e58d3004	 str         r3, [sp, #4]
  02e20	e59d2038	 ldr         r2, [sp, #0x38]
  02e24	e59d3030	 ldr         r3, [sp, #0x30]
  02e28	e0423003	 sub         r3, r2, r3
  02e2c	e58d3000	 str         r3, [sp]
  02e30	e59d3034	 ldr         r3, [sp, #0x34]
  02e34	e59d2030	 ldr         r2, [sp, #0x30]
  02e38	e59d102c	 ldr         r1, [sp, #0x2C]
  02e3c	e59d0018	 ldr         r0, [sp, #0x18]
  02e40	eb000000	 bl          BlockCopyRGB16toBGR24

; 1799 : 
; 1800 : #ifdef CHECKBLT
; 1801 :   if(!CheckBlt(pParms))
; 1802 :   {
; 1803 :     OutputDebugString(TEXT("** BAD BLT **: ") TEXT(__FUNCTION__) TEXT("()"));
; 1804 :     DebugBreak();
; 1805 :   }
; 1806 : #endif
; 1807 : 
; 1808 :   return(S_OK);

  02e44	e3a03000	 mov         r3, #0
  02e48	e58d3060	 str         r3, [sp, #0x60]

; 1809 : }

  02e4c	e59d0060	 ldr         r0, [sp, #0x60]
  02e50	e28dd074	 add         sp, sp, #0x74
  02e54	e89d6000	 ldmia       sp, {sp, lr}
  02e58	e12fff1e	 bx          lr
  02e5c		 |$M43545|

			 ENDP  ; |?EmulatedBlockCopyRGB16toBGR24@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|, OMAPDDGPE::EmulatedBlockCopyRGB16toBGR24

	EXPORT	|?EmulatedBlockCopy24to24@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| ; OMAPDDGPE::EmulatedBlockCopy24to24
	IMPORT	|BlockCopy24|

  001c0			 AREA	 |.pdata|, PDATA
|$T43563| DCD	|$LN9@EmulatedBl@12|
	DCD	0x40008704
; Function compile flags: /Odtp

  02e5c			 AREA	 |.text|, CODE, ARM

  02e5c		 |?EmulatedBlockCopy24to24@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::EmulatedBlockCopy24to24

; 1812 : {

  02e5c		 |$LN9@EmulatedBl@12|
  02e5c	e1a0c00d	 mov         r12, sp
  02e60	e92d0003	 stmdb       sp!, {r0, r1}
  02e64	e92d5000	 stmdb       sp!, {r12, lr}
  02e68	e24dd094	 sub         sp, sp, #0x94
  02e6c		 |$M43560|

; 1813 :   // Can't handle right to left yet
; 1814 :   if(pParms->xPositive != 1)

  02e6c	e59d30a0	 ldr         r3, [sp, #0xA0]
  02e70	e2833034	 add         r3, r3, #0x34
  02e74	e5933000	 ldr         r3, [r3]
  02e78	e3530001	 cmp         r3, #1
  02e7c	0a000006	 beq         |$LN4@EmulatedBl@12|

; 1815 :     return(GPE::EmulatedBlt(pParms));

  02e80	e59d10a0	 ldr         r1, [sp, #0xA0]
  02e84	e59d009c	 ldr         r0, [sp, #0x9C]
  02e88	eb000000	 bl          |?EmulatedBlt@GPE@@QAAJPAUGPEBltParms@@@Z|
  02e8c	e58d0074	 str         r0, [sp, #0x74]
  02e90	e59d3074	 ldr         r3, [sp, #0x74]
  02e94	e58d3048	 str         r3, [sp, #0x48]
  02e98	ea000072	 b           |$LN5@EmulatedBl@12|
  02e9c		 |$LN4@EmulatedBl@12|

; 1816 : 
; 1817 :   // Can't handle lookup tables or conversion routines
; 1818 :   if(pParms->pLookup ||
; 1819 :      pParms->pConvert)

  02e9c	e59d30a0	 ldr         r3, [sp, #0xA0]
  02ea0	e283303c	 add         r3, r3, #0x3C
  02ea4	e5933000	 ldr         r3, [r3]
  02ea8	e3530000	 cmp         r3, #0
  02eac	1a000004	 bne         |$LN2@EmulatedBl@12|
  02eb0	e59d30a0	 ldr         r3, [sp, #0xA0]
  02eb4	e2833040	 add         r3, r3, #0x40
  02eb8	e5933000	 ldr         r3, [r3]
  02ebc	e3530000	 cmp         r3, #0
  02ec0	0a000006	 beq         |$LN3@EmulatedBl@12|
  02ec4		 |$LN2@EmulatedBl@12|

; 1820 :     return(GPE::EmulatedBlt(pParms));

  02ec4	e59d10a0	 ldr         r1, [sp, #0xA0]
  02ec8	e59d009c	 ldr         r0, [sp, #0x9C]
  02ecc	eb000000	 bl          |?EmulatedBlt@GPE@@QAAJPAUGPEBltParms@@@Z|
  02ed0	e58d0078	 str         r0, [sp, #0x78]
  02ed4	e59d3078	 ldr         r3, [sp, #0x78]
  02ed8	e58d3048	 str         r3, [sp, #0x48]
  02edc	ea000061	 b           |$LN5@EmulatedBl@12|
  02ee0		 |$LN3@EmulatedBl@12|

; 1821 : 
; 1822 : CALLOUT(L"EmulatedBlockCopy24to24()");
; 1823 : 
; 1824 :   void* dstptr = pParms->pDst->Buffer();

  02ee0	e59d30a0	 ldr         r3, [sp, #0xA0]
  02ee4	e2833004	 add         r3, r3, #4
  02ee8	e5930000	 ldr         r0, [r3]
  02eec	eb000000	 bl          |?Buffer@GPESurf@@QAAPAXXZ|
  02ef0	e58d007c	 str         r0, [sp, #0x7C]
  02ef4	e59d307c	 ldr         r3, [sp, #0x7C]
  02ef8	e58d3018	 str         r3, [sp, #0x18]

; 1825 :   long dststride = pParms->pDst->Stride();

  02efc	e59d30a0	 ldr         r3, [sp, #0xA0]
  02f00	e2833004	 add         r3, r3, #4
  02f04	e5930000	 ldr         r0, [r3]
  02f08	eb000000	 bl          |?Stride@GPESurf@@QAAHXZ|
  02f0c	e58d0080	 str         r0, [sp, #0x80]
  02f10	e59d3080	 ldr         r3, [sp, #0x80]
  02f14	e58d302c	 str         r3, [sp, #0x2C]

; 1826 :   void* srcptr = pParms->pSrc->Buffer();

  02f18	e59d30a0	 ldr         r3, [sp, #0xA0]
  02f1c	e2833008	 add         r3, r3, #8
  02f20	e5930000	 ldr         r0, [r3]
  02f24	eb000000	 bl          |?Buffer@GPESurf@@QAAPAXXZ|
  02f28	e58d0084	 str         r0, [sp, #0x84]
  02f2c	e59d3084	 ldr         r3, [sp, #0x84]
  02f30	e58d3040	 str         r3, [sp, #0x40]

; 1827 :   long srcstride = pParms->pSrc->Stride();

  02f34	e59d30a0	 ldr         r3, [sp, #0xA0]
  02f38	e2833008	 add         r3, r3, #8
  02f3c	e5930000	 ldr         r0, [r3]
  02f40	eb000000	 bl          |?Stride@GPESurf@@QAAHXZ|
  02f44	e58d0088	 str         r0, [sp, #0x88]
  02f48	e59d3088	 ldr         r3, [sp, #0x88]
  02f4c	e58d3044	 str         r3, [sp, #0x44]

; 1828 :   RECTL rclDst = *(pParms->prclDst);

  02f50	e59d30a0	 ldr         r3, [sp, #0xA0]
  02f54	e2833014	 add         r3, r3, #0x14
  02f58	e5931000	 ldr         r1, [r3]
  02f5c	e28d0030	 add         r0, sp, #0x30
  02f60	e3a02010	 mov         r2, #0x10
  02f64	eb000000	 bl          memcpy

; 1829 :   RECTL rclSrc = *(pParms->prclSrc);

  02f68	e59d30a0	 ldr         r3, [sp, #0xA0]
  02f6c	e2833018	 add         r3, r3, #0x18
  02f70	e5931000	 ldr         r1, [r3]
  02f74	e28d001c	 add         r0, sp, #0x1C
  02f78	e3a02010	 mov         r2, #0x10
  02f7c	eb000000	 bl          memcpy

; 1830 :   
; 1831 :   if(pParms->yPositive != 1)

  02f80	e59d30a0	 ldr         r3, [sp, #0xA0]
  02f84	e2833038	 add         r3, r3, #0x38
  02f88	e5933000	 ldr         r3, [r3]
  02f8c	e3530001	 cmp         r3, #1
  02f90	0a000016	 beq         |$LN1@EmulatedBl@12|

; 1832 :     AdjustForBottomUp(dstptr, dststride, pParms->pDst->Height(), rclDst,
; 1833 :                       srcptr, srcstride, pParms->pSrc->Height(), rclSrc);

  02f94	e59d30a0	 ldr         r3, [sp, #0xA0]
  02f98	e2833008	 add         r3, r3, #8
  02f9c	e5930000	 ldr         r0, [r3]
  02fa0	eb000000	 bl          |?Height@GPESurf@@QAAHXZ|
  02fa4	e58d008c	 str         r0, [sp, #0x8C]
  02fa8	e59d30a0	 ldr         r3, [sp, #0xA0]
  02fac	e2833004	 add         r3, r3, #4
  02fb0	e5930000	 ldr         r0, [r3]
  02fb4	eb000000	 bl          |?Height@GPESurf@@QAAHXZ|
  02fb8	e58d0090	 str         r0, [sp, #0x90]
  02fbc	e28d301c	 add         r3, sp, #0x1C
  02fc0	e58d300c	 str         r3, [sp, #0xC]
  02fc4	e59d308c	 ldr         r3, [sp, #0x8C]
  02fc8	e58d3008	 str         r3, [sp, #8]
  02fcc	e28d3044	 add         r3, sp, #0x44
  02fd0	e58d3004	 str         r3, [sp, #4]
  02fd4	e28d3040	 add         r3, sp, #0x40
  02fd8	e58d3000	 str         r3, [sp]
  02fdc	e28d3030	 add         r3, sp, #0x30
  02fe0	e59d2090	 ldr         r2, [sp, #0x90]
  02fe4	e28d102c	 add         r1, sp, #0x2C
  02fe8	e28d0018	 add         r0, sp, #0x18
  02fec	eb000000	 bl          |?AdjustForBottomUp@@YAXAAPAXAAJKAAU_RECTL@@01K2@Z|
  02ff0		 |$LN1@EmulatedBl@12|

; 1834 : 
; 1835 :   WaitForNotBusy();

  02ff0	e59d309c	 ldr         r3, [sp, #0x9C]
  02ff4	e5933000	 ldr         r3, [r3]
  02ff8	e2833060	 add         r3, r3, #0x60
  02ffc	e59d009c	 ldr         r0, [sp, #0x9C]
  03000	e5933000	 ldr         r3, [r3]
  03004	e1a0e00f	 mov         lr, pc
  03008	e12fff13	 bx          r3

; 1836 :   BlockCopy24(dstptr,
; 1837 :               dststride,
; 1838 :               rclDst.left,
; 1839 :               rclDst.top,
; 1840 :               rclDst.right - rclDst.left,
; 1841 :               rclDst.bottom - rclDst.top,
; 1842 :               srcptr,
; 1843 :               srcstride,
; 1844 :               rclSrc.left,
; 1845 :               rclSrc.top);

  0300c	e59d3020	 ldr         r3, [sp, #0x20]
  03010	e58d3014	 str         r3, [sp, #0x14]
  03014	e59d301c	 ldr         r3, [sp, #0x1C]
  03018	e58d3010	 str         r3, [sp, #0x10]
  0301c	e59d3044	 ldr         r3, [sp, #0x44]
  03020	e58d300c	 str         r3, [sp, #0xC]
  03024	e59d3040	 ldr         r3, [sp, #0x40]
  03028	e58d3008	 str         r3, [sp, #8]
  0302c	e59d203c	 ldr         r2, [sp, #0x3C]
  03030	e59d3034	 ldr         r3, [sp, #0x34]
  03034	e0423003	 sub         r3, r2, r3
  03038	e58d3004	 str         r3, [sp, #4]
  0303c	e59d2038	 ldr         r2, [sp, #0x38]
  03040	e59d3030	 ldr         r3, [sp, #0x30]
  03044	e0423003	 sub         r3, r2, r3
  03048	e58d3000	 str         r3, [sp]
  0304c	e59d3034	 ldr         r3, [sp, #0x34]
  03050	e59d2030	 ldr         r2, [sp, #0x30]
  03054	e59d102c	 ldr         r1, [sp, #0x2C]
  03058	e59d0018	 ldr         r0, [sp, #0x18]
  0305c	eb000000	 bl          BlockCopy24

; 1846 : 
; 1847 : #ifdef CHECKBLT
; 1848 :   if(!CheckBlt(pParms))
; 1849 :   {
; 1850 :     OutputDebugString(TEXT("** BAD BLT **: ") TEXT(__FUNCTION__) TEXT("()"));
; 1851 :     DebugBreak();
; 1852 :   }
; 1853 : #endif
; 1854 : 
; 1855 :   return(S_OK);

  03060	e3a03000	 mov         r3, #0
  03064	e58d3048	 str         r3, [sp, #0x48]
  03068		 |$LN5@EmulatedBl@12|

; 1856 : }

  03068	e59d0048	 ldr         r0, [sp, #0x48]
  0306c	e28dd094	 add         sp, sp, #0x94
  03070	e89d6000	 ldmia       sp, {sp, lr}
  03074	e12fff1e	 bx          lr
  03078		 |$M43561|

			 ENDP  ; |?EmulatedBlockCopy24to24@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|, OMAPDDGPE::EmulatedBlockCopy24to24

	IMPORT	|BlockCopyXYZx32toXYZ24|

  001c8			 AREA	 |.pdata|, PDATA
|$T43575| DCD	|$LN5@EmulatedBl@13|
	DCD	0x40004e04
; Function compile flags: /Odtp

  03078			 AREA	 |.text|, CODE, ARM

  03078		 |?EmulatedBlockCopyXYZx32toXYZ24@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::EmulatedBlockCopyXYZx32toXYZ24

; 1859 : {

  03078		 |$LN5@EmulatedBl@13|
  03078	e1a0c00d	 mov         r12, sp
  0307c	e92d0003	 stmdb       sp!, {r0, r1}
  03080	e92d5000	 stmdb       sp!, {r12, lr}
  03084	e24dd074	 sub         sp, sp, #0x74
  03088		 |$M43572|

; 1860 : CALLOUT(L"EmulatedBlockCopyXYZx32toXYZ24()");
; 1861 : 
; 1862 :   void* dstptr = pParms->pDst->Buffer();

  03088	e59d3080	 ldr         r3, [sp, #0x80]
  0308c	e2833004	 add         r3, r3, #4
  03090	e5930000	 ldr         r0, [r3]
  03094	eb000000	 bl          |?Buffer@GPESurf@@QAAPAXXZ|
  03098	e58d0064	 str         r0, [sp, #0x64]
  0309c	e59d3064	 ldr         r3, [sp, #0x64]
  030a0	e58d3018	 str         r3, [sp, #0x18]

; 1863 :   long dststride = pParms->pDst->Stride();

  030a4	e59d3080	 ldr         r3, [sp, #0x80]
  030a8	e2833004	 add         r3, r3, #4
  030ac	e5930000	 ldr         r0, [r3]
  030b0	eb000000	 bl          |?Stride@GPESurf@@QAAHXZ|
  030b4	e58d0068	 str         r0, [sp, #0x68]
  030b8	e59d3068	 ldr         r3, [sp, #0x68]
  030bc	e58d302c	 str         r3, [sp, #0x2C]

; 1864 :   void* srcptr = pParms->pSrc->Buffer();

  030c0	e59d3080	 ldr         r3, [sp, #0x80]
  030c4	e2833008	 add         r3, r3, #8
  030c8	e5930000	 ldr         r0, [r3]
  030cc	eb000000	 bl          |?Buffer@GPESurf@@QAAPAXXZ|
  030d0	e58d006c	 str         r0, [sp, #0x6C]
  030d4	e59d306c	 ldr         r3, [sp, #0x6C]
  030d8	e58d3040	 str         r3, [sp, #0x40]

; 1865 :   long srcstride = pParms->pSrc->Stride();

  030dc	e59d3080	 ldr         r3, [sp, #0x80]
  030e0	e2833008	 add         r3, r3, #8
  030e4	e5930000	 ldr         r0, [r3]
  030e8	eb000000	 bl          |?Stride@GPESurf@@QAAHXZ|
  030ec	e58d0070	 str         r0, [sp, #0x70]
  030f0	e59d3070	 ldr         r3, [sp, #0x70]
  030f4	e58d3044	 str         r3, [sp, #0x44]

; 1866 :   RECTL rclDst = *(pParms->prclDst);

  030f8	e59d3080	 ldr         r3, [sp, #0x80]
  030fc	e2833014	 add         r3, r3, #0x14
  03100	e5931000	 ldr         r1, [r3]
  03104	e28d0030	 add         r0, sp, #0x30
  03108	e3a02010	 mov         r2, #0x10
  0310c	eb000000	 bl          memcpy

; 1867 :   RECTL rclSrc = *(pParms->prclSrc);

  03110	e59d3080	 ldr         r3, [sp, #0x80]
  03114	e2833018	 add         r3, r3, #0x18
  03118	e5931000	 ldr         r1, [r3]
  0311c	e28d001c	 add         r0, sp, #0x1C
  03120	e3a02010	 mov         r2, #0x10
  03124	eb000000	 bl          memcpy

; 1868 : 
; 1869 :   WaitForNotBusy();

  03128	e59d307c	 ldr         r3, [sp, #0x7C]
  0312c	e5933000	 ldr         r3, [r3]
  03130	e2833060	 add         r3, r3, #0x60
  03134	e59d007c	 ldr         r0, [sp, #0x7C]
  03138	e5933000	 ldr         r3, [r3]
  0313c	e1a0e00f	 mov         lr, pc
  03140	e12fff13	 bx          r3

; 1870 :   BlockCopyXYZx32toXYZ24(dstptr,
; 1871 :                          dststride,
; 1872 :                          rclDst.left,
; 1873 :                          rclDst.top,
; 1874 :                          rclDst.right - rclDst.left,
; 1875 :                          rclDst.bottom - rclDst.top,
; 1876 :                          srcptr,
; 1877 :                          srcstride,
; 1878 :                          rclSrc.left,
; 1879 :                          rclSrc.top);

  03144	e59d3020	 ldr         r3, [sp, #0x20]
  03148	e58d3014	 str         r3, [sp, #0x14]
  0314c	e59d301c	 ldr         r3, [sp, #0x1C]
  03150	e58d3010	 str         r3, [sp, #0x10]
  03154	e59d3044	 ldr         r3, [sp, #0x44]
  03158	e58d300c	 str         r3, [sp, #0xC]
  0315c	e59d3040	 ldr         r3, [sp, #0x40]
  03160	e58d3008	 str         r3, [sp, #8]
  03164	e59d203c	 ldr         r2, [sp, #0x3C]
  03168	e59d3034	 ldr         r3, [sp, #0x34]
  0316c	e0423003	 sub         r3, r2, r3
  03170	e58d3004	 str         r3, [sp, #4]
  03174	e59d2038	 ldr         r2, [sp, #0x38]
  03178	e59d3030	 ldr         r3, [sp, #0x30]
  0317c	e0423003	 sub         r3, r2, r3
  03180	e58d3000	 str         r3, [sp]
  03184	e59d3034	 ldr         r3, [sp, #0x34]
  03188	e59d2030	 ldr         r2, [sp, #0x30]
  0318c	e59d102c	 ldr         r1, [sp, #0x2C]
  03190	e59d0018	 ldr         r0, [sp, #0x18]
  03194	eb000000	 bl          BlockCopyXYZx32toXYZ24

; 1880 : 
; 1881 : #ifdef CHECKBLT
; 1882 :   if(!CheckBlt(pParms))
; 1883 :   {
; 1884 :     OutputDebugString(TEXT("** BAD BLT **: ") TEXT(__FUNCTION__) TEXT("()"));
; 1885 :     DebugBreak();
; 1886 :   }
; 1887 : #endif
; 1888 : 
; 1889 :   return(S_OK);

  03198	e3a03000	 mov         r3, #0
  0319c	e58d3060	 str         r3, [sp, #0x60]

; 1890 : }

  031a0	e59d0060	 ldr         r0, [sp, #0x60]
  031a4	e28dd074	 add         sp, sp, #0x74
  031a8	e89d6000	 ldmia       sp, {sp, lr}
  031ac	e12fff1e	 bx          lr
  031b0		 |$M43573|

			 ENDP  ; |?EmulatedBlockCopyXYZx32toXYZ24@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|, OMAPDDGPE::EmulatedBlockCopyXYZx32toXYZ24

	IMPORT	|BlockCopyLUT8to32|

  001d0			 AREA	 |.pdata|, PDATA
|$T43588| DCD	|$LN5@EmulatedBl@14|
	DCD	0x40005204
; Function compile flags: /Odtp

  031b0			 AREA	 |.text|, CODE, ARM

  031b0		 |?EmulatedBlockCopyLUT8to32@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::EmulatedBlockCopyLUT8to32

; 1893 : {

  031b0		 |$LN5@EmulatedBl@14|
  031b0	e1a0c00d	 mov         r12, sp
  031b4	e92d0003	 stmdb       sp!, {r0, r1}
  031b8	e92d5000	 stmdb       sp!, {r12, lr}
  031bc	e24dd07c	 sub         sp, sp, #0x7C
  031c0		 |$M43585|

; 1894 : CALLOUT(L"EmulatedBlockCopyLUT8to32()");
; 1895 : 
; 1896 :   void* dstptr = pParms->pDst->Buffer();

  031c0	e59d3088	 ldr         r3, [sp, #0x88]
  031c4	e2833004	 add         r3, r3, #4
  031c8	e5930000	 ldr         r0, [r3]
  031cc	eb000000	 bl          |?Buffer@GPESurf@@QAAPAXXZ|
  031d0	e58d006c	 str         r0, [sp, #0x6C]
  031d4	e59d306c	 ldr         r3, [sp, #0x6C]
  031d8	e58d301c	 str         r3, [sp, #0x1C]

; 1897 :   long dststride = pParms->pDst->Stride();

  031dc	e59d3088	 ldr         r3, [sp, #0x88]
  031e0	e2833004	 add         r3, r3, #4
  031e4	e5930000	 ldr         r0, [r3]
  031e8	eb000000	 bl          |?Stride@GPESurf@@QAAHXZ|
  031ec	e58d0070	 str         r0, [sp, #0x70]
  031f0	e59d3070	 ldr         r3, [sp, #0x70]
  031f4	e58d3030	 str         r3, [sp, #0x30]

; 1898 :   void* srcptr = pParms->pSrc->Buffer();

  031f8	e59d3088	 ldr         r3, [sp, #0x88]
  031fc	e2833008	 add         r3, r3, #8
  03200	e5930000	 ldr         r0, [r3]
  03204	eb000000	 bl          |?Buffer@GPESurf@@QAAPAXXZ|
  03208	e58d0074	 str         r0, [sp, #0x74]
  0320c	e59d3074	 ldr         r3, [sp, #0x74]
  03210	e58d3044	 str         r3, [sp, #0x44]

; 1899 :   long srcstride = pParms->pSrc->Stride();

  03214	e59d3088	 ldr         r3, [sp, #0x88]
  03218	e2833008	 add         r3, r3, #8
  0321c	e5930000	 ldr         r0, [r3]
  03220	eb000000	 bl          |?Stride@GPESurf@@QAAHXZ|
  03224	e58d0078	 str         r0, [sp, #0x78]
  03228	e59d3078	 ldr         r3, [sp, #0x78]
  0322c	e58d3048	 str         r3, [sp, #0x48]

; 1900 :   RECTL rclDst = *(pParms->prclDst);

  03230	e59d3088	 ldr         r3, [sp, #0x88]
  03234	e2833014	 add         r3, r3, #0x14
  03238	e5931000	 ldr         r1, [r3]
  0323c	e28d0034	 add         r0, sp, #0x34
  03240	e3a02010	 mov         r2, #0x10
  03244	eb000000	 bl          memcpy

; 1901 :   RECTL rclSrc = *(pParms->prclSrc);

  03248	e59d3088	 ldr         r3, [sp, #0x88]
  0324c	e2833018	 add         r3, r3, #0x18
  03250	e5931000	 ldr         r1, [r3]
  03254	e28d0020	 add         r0, sp, #0x20
  03258	e3a02010	 mov         r2, #0x10
  0325c	eb000000	 bl          memcpy

; 1902 : 
; 1903 :   WaitForNotBusy();

  03260	e59d3084	 ldr         r3, [sp, #0x84]
  03264	e5933000	 ldr         r3, [r3]
  03268	e2833060	 add         r3, r3, #0x60
  0326c	e59d0084	 ldr         r0, [sp, #0x84]
  03270	e5933000	 ldr         r3, [r3]
  03274	e1a0e00f	 mov         lr, pc
  03278	e12fff13	 bx          r3

; 1904 :   BlockCopyLUT8to32(dstptr,
; 1905 :                     dststride,
; 1906 :                     rclDst.left,
; 1907 :                     rclDst.top,
; 1908 :                     rclDst.right - rclDst.left,
; 1909 :                     rclDst.bottom - rclDst.top,
; 1910 :                     srcptr,
; 1911 :                     srcstride,
; 1912 :                     rclSrc.left,
; 1913 :                     rclSrc.top,
; 1914 :                     pParms->pLookup);

  0327c	e59d3088	 ldr         r3, [sp, #0x88]
  03280	e283303c	 add         r3, r3, #0x3C
  03284	e5933000	 ldr         r3, [r3]
  03288	e58d3018	 str         r3, [sp, #0x18]
  0328c	e59d3024	 ldr         r3, [sp, #0x24]
  03290	e58d3014	 str         r3, [sp, #0x14]
  03294	e59d3020	 ldr         r3, [sp, #0x20]
  03298	e58d3010	 str         r3, [sp, #0x10]
  0329c	e59d3048	 ldr         r3, [sp, #0x48]
  032a0	e58d300c	 str         r3, [sp, #0xC]
  032a4	e59d3044	 ldr         r3, [sp, #0x44]
  032a8	e58d3008	 str         r3, [sp, #8]
  032ac	e59d2040	 ldr         r2, [sp, #0x40]
  032b0	e59d3038	 ldr         r3, [sp, #0x38]
  032b4	e0423003	 sub         r3, r2, r3
  032b8	e58d3004	 str         r3, [sp, #4]
  032bc	e59d203c	 ldr         r2, [sp, #0x3C]
  032c0	e59d3034	 ldr         r3, [sp, #0x34]
  032c4	e0423003	 sub         r3, r2, r3
  032c8	e58d3000	 str         r3, [sp]
  032cc	e59d3038	 ldr         r3, [sp, #0x38]
  032d0	e59d2034	 ldr         r2, [sp, #0x34]
  032d4	e59d1030	 ldr         r1, [sp, #0x30]
  032d8	e59d001c	 ldr         r0, [sp, #0x1C]
  032dc	eb000000	 bl          BlockCopyLUT8to32

; 1915 : 
; 1916 : #ifdef CHECKBLT
; 1917 :   if(!CheckBlt(pParms))
; 1918 :   {
; 1919 :     OutputDebugString(TEXT("** BAD BLT **: ") TEXT(__FUNCTION__) TEXT("()"));
; 1920 :     DebugBreak();
; 1921 :   }
; 1922 : #endif
; 1923 : 
; 1924 :   return(S_OK);

  032e0	e3a03000	 mov         r3, #0
  032e4	e58d3068	 str         r3, [sp, #0x68]

; 1925 : }

  032e8	e59d0068	 ldr         r0, [sp, #0x68]
  032ec	e28dd07c	 add         sp, sp, #0x7C
  032f0	e89d6000	 ldmia       sp, {sp, lr}
  032f4	e12fff1e	 bx          lr
  032f8		 |$M43586|

			 ENDP  ; |?EmulatedBlockCopyLUT8to32@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|, OMAPDDGPE::EmulatedBlockCopyLUT8to32

	IMPORT	|BlockCopyRGB16toBGRx32|

  001d8			 AREA	 |.pdata|, PDATA
|$T43600| DCD	|$LN5@EmulatedBl@15|
	DCD	0x40004e04
; Function compile flags: /Odtp

  032f8			 AREA	 |.text|, CODE, ARM

  032f8		 |?EmulatedBlockCopyRGB16toBGRx32@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::EmulatedBlockCopyRGB16toBGRx32

; 1928 : {

  032f8		 |$LN5@EmulatedBl@15|
  032f8	e1a0c00d	 mov         r12, sp
  032fc	e92d0003	 stmdb       sp!, {r0, r1}
  03300	e92d5000	 stmdb       sp!, {r12, lr}
  03304	e24dd074	 sub         sp, sp, #0x74
  03308		 |$M43597|

; 1929 : CALLOUT(L"EmulatedBlockCopyRGB16toBGRx32()");
; 1930 : 
; 1931 : #if defined(CHECKBLT) && !defined(NOCHECK565)
; 1932 : //DebugBreak();
; 1933 : GPEBltParms SavedParms = *pParms;
; 1934 : ULONG size = abs(SavedParms.pDst->Stride()) * SavedParms.pDst->Height();
; 1935 : #endif
; 1936 :   void* dstptr = pParms->pDst->Buffer();

  03308	e59d3080	 ldr         r3, [sp, #0x80]
  0330c	e2833004	 add         r3, r3, #4
  03310	e5930000	 ldr         r0, [r3]
  03314	eb000000	 bl          |?Buffer@GPESurf@@QAAPAXXZ|
  03318	e58d0064	 str         r0, [sp, #0x64]
  0331c	e59d3064	 ldr         r3, [sp, #0x64]
  03320	e58d3018	 str         r3, [sp, #0x18]

; 1937 :   long dststride = pParms->pDst->Stride();

  03324	e59d3080	 ldr         r3, [sp, #0x80]
  03328	e2833004	 add         r3, r3, #4
  0332c	e5930000	 ldr         r0, [r3]
  03330	eb000000	 bl          |?Stride@GPESurf@@QAAHXZ|
  03334	e58d0068	 str         r0, [sp, #0x68]
  03338	e59d3068	 ldr         r3, [sp, #0x68]
  0333c	e58d302c	 str         r3, [sp, #0x2C]

; 1938 :   void* srcptr = pParms->pSrc->Buffer();

  03340	e59d3080	 ldr         r3, [sp, #0x80]
  03344	e2833008	 add         r3, r3, #8
  03348	e5930000	 ldr         r0, [r3]
  0334c	eb000000	 bl          |?Buffer@GPESurf@@QAAPAXXZ|
  03350	e58d006c	 str         r0, [sp, #0x6C]
  03354	e59d306c	 ldr         r3, [sp, #0x6C]
  03358	e58d3040	 str         r3, [sp, #0x40]

; 1939 :   long srcstride = pParms->pSrc->Stride();

  0335c	e59d3080	 ldr         r3, [sp, #0x80]
  03360	e2833008	 add         r3, r3, #8
  03364	e5930000	 ldr         r0, [r3]
  03368	eb000000	 bl          |?Stride@GPESurf@@QAAHXZ|
  0336c	e58d0070	 str         r0, [sp, #0x70]
  03370	e59d3070	 ldr         r3, [sp, #0x70]
  03374	e58d3044	 str         r3, [sp, #0x44]

; 1940 :   RECTL rclDst = *(pParms->prclDst);

  03378	e59d3080	 ldr         r3, [sp, #0x80]
  0337c	e2833014	 add         r3, r3, #0x14
  03380	e5931000	 ldr         r1, [r3]
  03384	e28d0030	 add         r0, sp, #0x30
  03388	e3a02010	 mov         r2, #0x10
  0338c	eb000000	 bl          memcpy

; 1941 :   RECTL rclSrc = *(pParms->prclSrc);

  03390	e59d3080	 ldr         r3, [sp, #0x80]
  03394	e2833018	 add         r3, r3, #0x18
  03398	e5931000	 ldr         r1, [r3]
  0339c	e28d001c	 add         r0, sp, #0x1C
  033a0	e3a02010	 mov         r2, #0x10
  033a4	eb000000	 bl          memcpy

; 1942 : 
; 1943 :   WaitForNotBusy();

  033a8	e59d307c	 ldr         r3, [sp, #0x7C]
  033ac	e5933000	 ldr         r3, [r3]
  033b0	e2833060	 add         r3, r3, #0x60
  033b4	e59d007c	 ldr         r0, [sp, #0x7C]
  033b8	e5933000	 ldr         r3, [r3]
  033bc	e1a0e00f	 mov         lr, pc
  033c0	e12fff13	 bx          r3

; 1944 :   BlockCopyRGB16toBGRx32(dstptr,
; 1945 :                          dststride,
; 1946 :                          rclDst.left,
; 1947 :                          rclDst.top,
; 1948 :                          rclDst.right - rclDst.left,
; 1949 :                          rclDst.bottom - rclDst.top,
; 1950 :                          srcptr,
; 1951 :                          srcstride,
; 1952 :                          rclSrc.left,
; 1953 :                          rclSrc.top);

  033c4	e59d3020	 ldr         r3, [sp, #0x20]
  033c8	e58d3014	 str         r3, [sp, #0x14]
  033cc	e59d301c	 ldr         r3, [sp, #0x1C]
  033d0	e58d3010	 str         r3, [sp, #0x10]
  033d4	e59d3044	 ldr         r3, [sp, #0x44]
  033d8	e58d300c	 str         r3, [sp, #0xC]
  033dc	e59d3040	 ldr         r3, [sp, #0x40]
  033e0	e58d3008	 str         r3, [sp, #8]
  033e4	e59d203c	 ldr         r2, [sp, #0x3C]
  033e8	e59d3034	 ldr         r3, [sp, #0x34]
  033ec	e0423003	 sub         r3, r2, r3
  033f0	e58d3004	 str         r3, [sp, #4]
  033f4	e59d2038	 ldr         r2, [sp, #0x38]
  033f8	e59d3030	 ldr         r3, [sp, #0x30]
  033fc	e0423003	 sub         r3, r2, r3
  03400	e58d3000	 str         r3, [sp]
  03404	e59d3034	 ldr         r3, [sp, #0x34]
  03408	e59d2030	 ldr         r2, [sp, #0x30]
  0340c	e59d102c	 ldr         r1, [sp, #0x2C]
  03410	e59d0018	 ldr         r0, [sp, #0x18]
  03414	eb000000	 bl          BlockCopyRGB16toBGRx32

; 1954 : 
; 1955 : #if defined(CHECKBLT) && !defined(NOCHECK565)
; 1956 : // Save my BLT results
; 1957 : void* buffmydst = malloc(size);
; 1958 : if(SavedParms.pDst->Stride() < 0)
; 1959 :   memcpy(buffmydst, (void*)((long)SavedParms.pDst->Buffer() - ((SavedParms.pDst->Height() - 1) * SavedParms.pDst->Stride())), size);
; 1960 : else
; 1961 :   memcpy(buffmydst, SavedParms.pDst->Buffer(), size);
; 1962 : 
; 1963 : // Check for an error
; 1964 :   unsigned int mybltcrc = wombat2d((unsigned char*)SavedParms.pDst->Buffer(),
; 1965 :                                    SavedParms.pDst->Stride(),
; 1966 :                                    SavedParms.pDst->Width(),
; 1967 :                                    SavedParms.pDst->Height());
; 1968 :   GPE* pGPE = GetGPE();
; 1969 :   pGPE->EmulatedBlt(pParms);
; 1970 :   if(mybltcrc != wombat2d((unsigned char*)SavedParms.pDst->Buffer(),
; 1971 :                           SavedParms.pDst->Stride(),
; 1972 :                           SavedParms.pDst->Width(),
; 1973 :                           SavedParms.pDst->Height()))
; 1974 :   {
; 1975 :     RETAILMSG(1, (TEXT("****** BAD BLT ******\n")));
; 1976 :     DumpParms(&SavedParms);
; 1977 : 
; 1978 :     // Print out specific errors
; 1979 :     long sx, sy, dx, dy;
; 1980 :     for(sy = SavedParms.prclSrc->top, dy = SavedParms.prclDst->top;
; 1981 :         sy < SavedParms.prclSrc->bottom;
; 1982 :         sy++, dy++)
; 1983 :     {
; 1984 :       for(sx = SavedParms.prclSrc->left, dx = SavedParms.prclDst->left;
; 1985 :           sx < SavedParms.prclSrc->right;
; 1986 :           sx++, dx++)
; 1987 :       {
; 1988 :         ULONG* mydst  = (ULONG*)((long)buffmydst + (dx * sizeof(ULONG)) + (dy * abs(SavedParms.pDst->Stride())));
; 1989 :         ULONG* refdst = (ULONG*)((long)SavedParms.pDst->Buffer()  + (dx * sizeof(ULONG)) + (dy * SavedParms.pDst->Stride()));
; 1990 :         if(*mydst != *refdst)
; 1991 :         {
; 1992 :           RETAILMSG(1, (TEXT("Bad pixel: (%d, %d) -> (%d, %d), Src: 0x%08X, My Dst After: 0x%04X, Ref Dst AFter: 0x%04X\n"),
; 1993 :             sx, sy,
; 1994 :             dx, dy,
; 1995 :             *((WORD*)((long)SavedParms.pSrc->Buffer() + (sx * sizeof(WORD)) + (sy * SavedParms.pSrc->Stride()))),
; 1996 :             *mydst,
; 1997 :             *refdst));
; 1998 :         }
; 1999 :       }
; 2000 :     }
; 2001 :     DebugBreak();
; 2002 :   }
; 2003 :   free(buffmydst);
; 2004 : #endif
; 2005 : 
; 2006 :   return(S_OK);

  03418	e3a03000	 mov         r3, #0
  0341c	e58d3060	 str         r3, [sp, #0x60]

; 2007 : }

  03420	e59d0060	 ldr         r0, [sp, #0x60]
  03424	e28dd074	 add         sp, sp, #0x74
  03428	e89d6000	 ldmia       sp, {sp, lr}
  0342c	e12fff1e	 bx          lr
  03430		 |$M43598|

			 ENDP  ; |?EmulatedBlockCopyRGB16toBGRx32@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|, OMAPDDGPE::EmulatedBlockCopyRGB16toBGRx32

	IMPORT	|BlockCopyXYZ24toXYZx32|

  001e0			 AREA	 |.pdata|, PDATA
|$T43612| DCD	|$LN5@EmulatedBl@16|
	DCD	0x40004e04
; Function compile flags: /Odtp

  03430			 AREA	 |.text|, CODE, ARM

  03430		 |?EmulatedBlockCopyXYZ24toXYZx32@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::EmulatedBlockCopyXYZ24toXYZx32

; 2010 : {

  03430		 |$LN5@EmulatedBl@16|
  03430	e1a0c00d	 mov         r12, sp
  03434	e92d0003	 stmdb       sp!, {r0, r1}
  03438	e92d5000	 stmdb       sp!, {r12, lr}
  0343c	e24dd074	 sub         sp, sp, #0x74
  03440		 |$M43609|

; 2011 : CALLOUT(L"EmulatedBlockCopyXYZ24toXYZx32()");
; 2012 : 
; 2013 :   void* dstptr = pParms->pDst->Buffer();

  03440	e59d3080	 ldr         r3, [sp, #0x80]
  03444	e2833004	 add         r3, r3, #4
  03448	e5930000	 ldr         r0, [r3]
  0344c	eb000000	 bl          |?Buffer@GPESurf@@QAAPAXXZ|
  03450	e58d0064	 str         r0, [sp, #0x64]
  03454	e59d3064	 ldr         r3, [sp, #0x64]
  03458	e58d3018	 str         r3, [sp, #0x18]

; 2014 :   long dststride = pParms->pDst->Stride();

  0345c	e59d3080	 ldr         r3, [sp, #0x80]
  03460	e2833004	 add         r3, r3, #4
  03464	e5930000	 ldr         r0, [r3]
  03468	eb000000	 bl          |?Stride@GPESurf@@QAAHXZ|
  0346c	e58d0068	 str         r0, [sp, #0x68]
  03470	e59d3068	 ldr         r3, [sp, #0x68]
  03474	e58d302c	 str         r3, [sp, #0x2C]

; 2015 :   void* srcptr = pParms->pSrc->Buffer();

  03478	e59d3080	 ldr         r3, [sp, #0x80]
  0347c	e2833008	 add         r3, r3, #8
  03480	e5930000	 ldr         r0, [r3]
  03484	eb000000	 bl          |?Buffer@GPESurf@@QAAPAXXZ|
  03488	e58d006c	 str         r0, [sp, #0x6C]
  0348c	e59d306c	 ldr         r3, [sp, #0x6C]
  03490	e58d3040	 str         r3, [sp, #0x40]

; 2016 :   long srcstride = pParms->pSrc->Stride();

  03494	e59d3080	 ldr         r3, [sp, #0x80]
  03498	e2833008	 add         r3, r3, #8
  0349c	e5930000	 ldr         r0, [r3]
  034a0	eb000000	 bl          |?Stride@GPESurf@@QAAHXZ|
  034a4	e58d0070	 str         r0, [sp, #0x70]
  034a8	e59d3070	 ldr         r3, [sp, #0x70]
  034ac	e58d3044	 str         r3, [sp, #0x44]

; 2017 :   RECTL rclDst = *(pParms->prclDst);

  034b0	e59d3080	 ldr         r3, [sp, #0x80]
  034b4	e2833014	 add         r3, r3, #0x14
  034b8	e5931000	 ldr         r1, [r3]
  034bc	e28d0030	 add         r0, sp, #0x30
  034c0	e3a02010	 mov         r2, #0x10
  034c4	eb000000	 bl          memcpy

; 2018 :   RECTL rclSrc = *(pParms->prclSrc);

  034c8	e59d3080	 ldr         r3, [sp, #0x80]
  034cc	e2833018	 add         r3, r3, #0x18
  034d0	e5931000	 ldr         r1, [r3]
  034d4	e28d001c	 add         r0, sp, #0x1C
  034d8	e3a02010	 mov         r2, #0x10
  034dc	eb000000	 bl          memcpy

; 2019 : 
; 2020 :   WaitForNotBusy();

  034e0	e59d307c	 ldr         r3, [sp, #0x7C]
  034e4	e5933000	 ldr         r3, [r3]
  034e8	e2833060	 add         r3, r3, #0x60
  034ec	e59d007c	 ldr         r0, [sp, #0x7C]
  034f0	e5933000	 ldr         r3, [r3]
  034f4	e1a0e00f	 mov         lr, pc
  034f8	e12fff13	 bx          r3

; 2021 :   BlockCopyXYZ24toXYZx32(dstptr,
; 2022 :                          dststride,
; 2023 :                          rclDst.left,
; 2024 :                          rclDst.top,
; 2025 :                          rclDst.right - rclDst.left,
; 2026 :                          rclDst.bottom - rclDst.top,
; 2027 :                          srcptr,
; 2028 :                          srcstride,
; 2029 :                          rclSrc.left,
; 2030 :                          rclSrc.top);

  034fc	e59d3020	 ldr         r3, [sp, #0x20]
  03500	e58d3014	 str         r3, [sp, #0x14]
  03504	e59d301c	 ldr         r3, [sp, #0x1C]
  03508	e58d3010	 str         r3, [sp, #0x10]
  0350c	e59d3044	 ldr         r3, [sp, #0x44]
  03510	e58d300c	 str         r3, [sp, #0xC]
  03514	e59d3040	 ldr         r3, [sp, #0x40]
  03518	e58d3008	 str         r3, [sp, #8]
  0351c	e59d203c	 ldr         r2, [sp, #0x3C]
  03520	e59d3034	 ldr         r3, [sp, #0x34]
  03524	e0423003	 sub         r3, r2, r3
  03528	e58d3004	 str         r3, [sp, #4]
  0352c	e59d2038	 ldr         r2, [sp, #0x38]
  03530	e59d3030	 ldr         r3, [sp, #0x30]
  03534	e0423003	 sub         r3, r2, r3
  03538	e58d3000	 str         r3, [sp]
  0353c	e59d3034	 ldr         r3, [sp, #0x34]
  03540	e59d2030	 ldr         r2, [sp, #0x30]
  03544	e59d102c	 ldr         r1, [sp, #0x2C]
  03548	e59d0018	 ldr         r0, [sp, #0x18]
  0354c	eb000000	 bl          BlockCopyXYZ24toXYZx32

; 2031 : 
; 2032 : #ifdef CHECKBLT
; 2033 :   if(!CheckBlt(pParms))
; 2034 :   {
; 2035 :     OutputDebugString(TEXT("** BAD BLT **: ") TEXT(__FUNCTION__) TEXT("()"));
; 2036 :     DebugBreak();
; 2037 :   }
; 2038 : #endif
; 2039 : 
; 2040 :   return(S_OK);

  03550	e3a03000	 mov         r3, #0
  03554	e58d3060	 str         r3, [sp, #0x60]

; 2041 : }

  03558	e59d0060	 ldr         r0, [sp, #0x60]
  0355c	e28dd074	 add         sp, sp, #0x74
  03560	e89d6000	 ldmia       sp, {sp, lr}
  03564	e12fff1e	 bx          lr
  03568		 |$M43610|

			 ENDP  ; |?EmulatedBlockCopyXYZ24toXYZx32@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|, OMAPDDGPE::EmulatedBlockCopyXYZ24toXYZx32

	IMPORT	|BlockCopy32|

  001e8			 AREA	 |.pdata|, PDATA
|$T43628| DCD	|$LN9@EmulatedBl@17|
	DCD	0x40008704
; Function compile flags: /Odtp

  03568			 AREA	 |.text|, CODE, ARM

  03568		 |?EmulatedBlockCopy32to32@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::EmulatedBlockCopy32to32

; 2044 : {

  03568		 |$LN9@EmulatedBl@17|
  03568	e1a0c00d	 mov         r12, sp
  0356c	e92d0003	 stmdb       sp!, {r0, r1}
  03570	e92d5000	 stmdb       sp!, {r12, lr}
  03574	e24dd094	 sub         sp, sp, #0x94
  03578		 |$M43625|

; 2045 :   // Can't handle right to left yet
; 2046 :   if(pParms->xPositive != 1)

  03578	e59d30a0	 ldr         r3, [sp, #0xA0]
  0357c	e2833034	 add         r3, r3, #0x34
  03580	e5933000	 ldr         r3, [r3]
  03584	e3530001	 cmp         r3, #1
  03588	0a000006	 beq         |$LN4@EmulatedBl@17|

; 2047 :     return(GPE::EmulatedBlt(pParms));

  0358c	e59d10a0	 ldr         r1, [sp, #0xA0]
  03590	e59d009c	 ldr         r0, [sp, #0x9C]
  03594	eb000000	 bl          |?EmulatedBlt@GPE@@QAAJPAUGPEBltParms@@@Z|
  03598	e58d0074	 str         r0, [sp, #0x74]
  0359c	e59d3074	 ldr         r3, [sp, #0x74]
  035a0	e58d3048	 str         r3, [sp, #0x48]
  035a4	ea000072	 b           |$LN5@EmulatedBl@17|
  035a8		 |$LN4@EmulatedBl@17|

; 2048 : 
; 2049 :   // Can't handle lookup tables or conversion routines
; 2050 :   if(pParms->pLookup ||
; 2051 :      pParms->pConvert)

  035a8	e59d30a0	 ldr         r3, [sp, #0xA0]
  035ac	e283303c	 add         r3, r3, #0x3C
  035b0	e5933000	 ldr         r3, [r3]
  035b4	e3530000	 cmp         r3, #0
  035b8	1a000004	 bne         |$LN2@EmulatedBl@17|
  035bc	e59d30a0	 ldr         r3, [sp, #0xA0]
  035c0	e2833040	 add         r3, r3, #0x40
  035c4	e5933000	 ldr         r3, [r3]
  035c8	e3530000	 cmp         r3, #0
  035cc	0a000006	 beq         |$LN3@EmulatedBl@17|
  035d0		 |$LN2@EmulatedBl@17|

; 2052 :     return(GPE::EmulatedBlt(pParms));

  035d0	e59d10a0	 ldr         r1, [sp, #0xA0]
  035d4	e59d009c	 ldr         r0, [sp, #0x9C]
  035d8	eb000000	 bl          |?EmulatedBlt@GPE@@QAAJPAUGPEBltParms@@@Z|
  035dc	e58d0078	 str         r0, [sp, #0x78]
  035e0	e59d3078	 ldr         r3, [sp, #0x78]
  035e4	e58d3048	 str         r3, [sp, #0x48]
  035e8	ea000061	 b           |$LN5@EmulatedBl@17|
  035ec		 |$LN3@EmulatedBl@17|

; 2053 : 
; 2054 : CALLOUT(L"EmulatedBlockCopy32to32()");
; 2055 : 
; 2056 :   void* dstptr = pParms->pDst->Buffer();

  035ec	e59d30a0	 ldr         r3, [sp, #0xA0]
  035f0	e2833004	 add         r3, r3, #4
  035f4	e5930000	 ldr         r0, [r3]
  035f8	eb000000	 bl          |?Buffer@GPESurf@@QAAPAXXZ|
  035fc	e58d007c	 str         r0, [sp, #0x7C]
  03600	e59d307c	 ldr         r3, [sp, #0x7C]
  03604	e58d3018	 str         r3, [sp, #0x18]

; 2057 :   long dststride = pParms->pDst->Stride();

  03608	e59d30a0	 ldr         r3, [sp, #0xA0]
  0360c	e2833004	 add         r3, r3, #4
  03610	e5930000	 ldr         r0, [r3]
  03614	eb000000	 bl          |?Stride@GPESurf@@QAAHXZ|
  03618	e58d0080	 str         r0, [sp, #0x80]
  0361c	e59d3080	 ldr         r3, [sp, #0x80]
  03620	e58d302c	 str         r3, [sp, #0x2C]

; 2058 :   void* srcptr = pParms->pSrc->Buffer();

  03624	e59d30a0	 ldr         r3, [sp, #0xA0]
  03628	e2833008	 add         r3, r3, #8
  0362c	e5930000	 ldr         r0, [r3]
  03630	eb000000	 bl          |?Buffer@GPESurf@@QAAPAXXZ|
  03634	e58d0084	 str         r0, [sp, #0x84]
  03638	e59d3084	 ldr         r3, [sp, #0x84]
  0363c	e58d3040	 str         r3, [sp, #0x40]

; 2059 :   long srcstride = pParms->pSrc->Stride();

  03640	e59d30a0	 ldr         r3, [sp, #0xA0]
  03644	e2833008	 add         r3, r3, #8
  03648	e5930000	 ldr         r0, [r3]
  0364c	eb000000	 bl          |?Stride@GPESurf@@QAAHXZ|
  03650	e58d0088	 str         r0, [sp, #0x88]
  03654	e59d3088	 ldr         r3, [sp, #0x88]
  03658	e58d3044	 str         r3, [sp, #0x44]

; 2060 :   RECTL rclDst = *(pParms->prclDst);

  0365c	e59d30a0	 ldr         r3, [sp, #0xA0]
  03660	e2833014	 add         r3, r3, #0x14
  03664	e5931000	 ldr         r1, [r3]
  03668	e28d0030	 add         r0, sp, #0x30
  0366c	e3a02010	 mov         r2, #0x10
  03670	eb000000	 bl          memcpy

; 2061 :   RECTL rclSrc = *(pParms->prclSrc);

  03674	e59d30a0	 ldr         r3, [sp, #0xA0]
  03678	e2833018	 add         r3, r3, #0x18
  0367c	e5931000	 ldr         r1, [r3]
  03680	e28d001c	 add         r0, sp, #0x1C
  03684	e3a02010	 mov         r2, #0x10
  03688	eb000000	 bl          memcpy

; 2062 :   
; 2063 :   if(pParms->yPositive != 1)

  0368c	e59d30a0	 ldr         r3, [sp, #0xA0]
  03690	e2833038	 add         r3, r3, #0x38
  03694	e5933000	 ldr         r3, [r3]
  03698	e3530001	 cmp         r3, #1
  0369c	0a000016	 beq         |$LN1@EmulatedBl@17|

; 2064 :     AdjustForBottomUp(dstptr, dststride, pParms->pDst->Height(), rclDst,
; 2065 :                       srcptr, srcstride, pParms->pSrc->Height(), rclSrc);

  036a0	e59d30a0	 ldr         r3, [sp, #0xA0]
  036a4	e2833008	 add         r3, r3, #8
  036a8	e5930000	 ldr         r0, [r3]
  036ac	eb000000	 bl          |?Height@GPESurf@@QAAHXZ|
  036b0	e58d008c	 str         r0, [sp, #0x8C]
  036b4	e59d30a0	 ldr         r3, [sp, #0xA0]
  036b8	e2833004	 add         r3, r3, #4
  036bc	e5930000	 ldr         r0, [r3]
  036c0	eb000000	 bl          |?Height@GPESurf@@QAAHXZ|
  036c4	e58d0090	 str         r0, [sp, #0x90]
  036c8	e28d301c	 add         r3, sp, #0x1C
  036cc	e58d300c	 str         r3, [sp, #0xC]
  036d0	e59d308c	 ldr         r3, [sp, #0x8C]
  036d4	e58d3008	 str         r3, [sp, #8]
  036d8	e28d3044	 add         r3, sp, #0x44
  036dc	e58d3004	 str         r3, [sp, #4]
  036e0	e28d3040	 add         r3, sp, #0x40
  036e4	e58d3000	 str         r3, [sp]
  036e8	e28d3030	 add         r3, sp, #0x30
  036ec	e59d2090	 ldr         r2, [sp, #0x90]
  036f0	e28d102c	 add         r1, sp, #0x2C
  036f4	e28d0018	 add         r0, sp, #0x18
  036f8	eb000000	 bl          |?AdjustForBottomUp@@YAXAAPAXAAJKAAU_RECTL@@01K2@Z|
  036fc		 |$LN1@EmulatedBl@17|

; 2066 : 
; 2067 :   WaitForNotBusy();

  036fc	e59d309c	 ldr         r3, [sp, #0x9C]
  03700	e5933000	 ldr         r3, [r3]
  03704	e2833060	 add         r3, r3, #0x60
  03708	e59d009c	 ldr         r0, [sp, #0x9C]
  0370c	e5933000	 ldr         r3, [r3]
  03710	e1a0e00f	 mov         lr, pc
  03714	e12fff13	 bx          r3

; 2068 :   BlockCopy32(dstptr,
; 2069 :               dststride,
; 2070 :               rclDst.left,
; 2071 :               rclDst.top,
; 2072 :               rclDst.right - rclDst.left,
; 2073 :               rclDst.bottom - rclDst.top,
; 2074 :               srcptr,
; 2075 :               srcstride,
; 2076 :               rclSrc.left,
; 2077 :               rclSrc.top);

  03718	e59d3020	 ldr         r3, [sp, #0x20]
  0371c	e58d3014	 str         r3, [sp, #0x14]
  03720	e59d301c	 ldr         r3, [sp, #0x1C]
  03724	e58d3010	 str         r3, [sp, #0x10]
  03728	e59d3044	 ldr         r3, [sp, #0x44]
  0372c	e58d300c	 str         r3, [sp, #0xC]
  03730	e59d3040	 ldr         r3, [sp, #0x40]
  03734	e58d3008	 str         r3, [sp, #8]
  03738	e59d203c	 ldr         r2, [sp, #0x3C]
  0373c	e59d3034	 ldr         r3, [sp, #0x34]
  03740	e0423003	 sub         r3, r2, r3
  03744	e58d3004	 str         r3, [sp, #4]
  03748	e59d2038	 ldr         r2, [sp, #0x38]
  0374c	e59d3030	 ldr         r3, [sp, #0x30]
  03750	e0423003	 sub         r3, r2, r3
  03754	e58d3000	 str         r3, [sp]
  03758	e59d3034	 ldr         r3, [sp, #0x34]
  0375c	e59d2030	 ldr         r2, [sp, #0x30]
  03760	e59d102c	 ldr         r1, [sp, #0x2C]
  03764	e59d0018	 ldr         r0, [sp, #0x18]
  03768	eb000000	 bl          BlockCopy32

; 2078 : 
; 2079 : #ifdef CHECKBLT
; 2080 :   if(!CheckBlt(pParms))
; 2081 :   {
; 2082 :     OutputDebugString(TEXT("** BAD BLT **: ") TEXT(__FUNCTION__) TEXT("()"));
; 2083 :     DebugBreak();
; 2084 :   }
; 2085 : #endif
; 2086 : 
; 2087 :   return(S_OK);

  0376c	e3a03000	 mov         r3, #0
  03770	e58d3048	 str         r3, [sp, #0x48]
  03774		 |$LN5@EmulatedBl@17|

; 2088 : }

  03774	e59d0048	 ldr         r0, [sp, #0x48]
  03778	e28dd094	 add         sp, sp, #0x94
  0377c	e89d6000	 ldmia       sp, {sp, lr}
  03780	e12fff1e	 bx          lr
  03784		 |$M43626|

			 ENDP  ; |?EmulatedBlockCopy32to32@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|, OMAPDDGPE::EmulatedBlockCopy32to32

	IMPORT	|MaskCopy32to32withA1|

  001f0			 AREA	 |.pdata|, PDATA
|$T43644| DCD	|$LN5@EmulatedMa@2|
	DCD	0x40006a04
; Function compile flags: /Odtp

  03784			 AREA	 |.text|, CODE, ARM

  03784		 |?EmulatedMaskCopy32to32withA1@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::EmulatedMaskCopy32to32withA1

; 2091 : {

  03784		 |$LN5@EmulatedMa@2|
  03784	e1a0c00d	 mov         r12, sp
  03788	e92d0003	 stmdb       sp!, {r0, r1}
  0378c	e92d5000	 stmdb       sp!, {r12, lr}
  03790	e24dd0b4	 sub         sp, sp, #0xB4
  03794		 |$M43641|

; 2092 : CALLOUT(L"EmulatedMaskCopy32to32withA1()");
; 2093 : 
; 2094 : #ifdef CHECKBLT
; 2095 : //DebugBreak();
; 2096 : GPEBltParms SavedParms = *pParms;
; 2097 : ULONG size = abs(SavedParms.pDst->Stride()) * SavedParms.pDst->Height();
; 2098 : void* buffolddst = malloc(size);
; 2099 : // Save original destination
; 2100 : if(SavedParms.pDst->Stride() < 0)
; 2101 :   memcpy(buffolddst, (void*)((long)SavedParms.pDst->Buffer() - ((SavedParms.pDst->Height() - 1) * SavedParms.pDst->Stride())), size);
; 2102 : else
; 2103 :   memcpy(buffolddst, SavedParms.pDst->Buffer(), size);
; 2104 : #endif
; 2105 :   void* dstptr = pParms->pDst->Buffer();

  03794	e59d30c0	 ldr         r3, [sp, #0xC0]
  03798	e2833004	 add         r3, r3, #4
  0379c	e5930000	 ldr         r0, [r3]
  037a0	eb000000	 bl          |?Buffer@GPESurf@@QAAPAXXZ|
  037a4	e58d009c	 str         r0, [sp, #0x9C]
  037a8	e59d309c	 ldr         r3, [sp, #0x9C]
  037ac	e58d3028	 str         r3, [sp, #0x28]

; 2106 :   long dststride = pParms->pDst->Stride();

  037b0	e59d30c0	 ldr         r3, [sp, #0xC0]
  037b4	e2833004	 add         r3, r3, #4
  037b8	e5930000	 ldr         r0, [r3]
  037bc	eb000000	 bl          |?Stride@GPESurf@@QAAHXZ|
  037c0	e58d00a0	 str         r0, [sp, #0xA0]
  037c4	e59d30a0	 ldr         r3, [sp, #0xA0]
  037c8	e58d3040	 str         r3, [sp, #0x40]

; 2107 :   void const* srcptr = pParms->pSrc->Buffer();

  037cc	e59d30c0	 ldr         r3, [sp, #0xC0]
  037d0	e2833008	 add         r3, r3, #8
  037d4	e5930000	 ldr         r0, [r3]
  037d8	eb000000	 bl          |?Buffer@GPESurf@@QAAPAXXZ|
  037dc	e58d00a4	 str         r0, [sp, #0xA4]
  037e0	e59d30a4	 ldr         r3, [sp, #0xA4]
  037e4	e58d3058	 str         r3, [sp, #0x58]

; 2108 :   long srcstride = pParms->pSrc->Stride();

  037e8	e59d30c0	 ldr         r3, [sp, #0xC0]
  037ec	e2833008	 add         r3, r3, #8
  037f0	e5930000	 ldr         r0, [r3]
  037f4	eb000000	 bl          |?Stride@GPESurf@@QAAHXZ|
  037f8	e58d00a8	 str         r0, [sp, #0xA8]
  037fc	e59d30a8	 ldr         r3, [sp, #0xA8]
  03800	e58d306c	 str         r3, [sp, #0x6C]

; 2109 :   void const* mskptr = pParms->pMask->Buffer();

  03804	e59d30c0	 ldr         r3, [sp, #0xC0]
  03808	e283300c	 add         r3, r3, #0xC
  0380c	e5930000	 ldr         r0, [r3]
  03810	eb000000	 bl          |?Buffer@GPESurf@@QAAPAXXZ|
  03814	e58d00ac	 str         r0, [sp, #0xAC]
  03818	e59d30ac	 ldr         r3, [sp, #0xAC]
  0381c	e58d3054	 str         r3, [sp, #0x54]

; 2110 :   long mskstride = pParms->pMask->Stride();

  03820	e59d30c0	 ldr         r3, [sp, #0xC0]
  03824	e283300c	 add         r3, r3, #0xC
  03828	e5930000	 ldr         r0, [r3]
  0382c	eb000000	 bl          |?Stride@GPESurf@@QAAHXZ|
  03830	e58d00b0	 str         r0, [sp, #0xB0]
  03834	e59d30b0	 ldr         r3, [sp, #0xB0]
  03838	e58d303c	 str         r3, [sp, #0x3C]

; 2111 :   RECTL rclDst = *(pParms->prclDst);

  0383c	e59d30c0	 ldr         r3, [sp, #0xC0]
  03840	e2833014	 add         r3, r3, #0x14
  03844	e5931000	 ldr         r1, [r3]
  03848	e28d0044	 add         r0, sp, #0x44
  0384c	e3a02010	 mov         r2, #0x10
  03850	eb000000	 bl          memcpy

; 2112 :   RECTL rclSrc = *(pParms->prclSrc);

  03854	e59d30c0	 ldr         r3, [sp, #0xC0]
  03858	e2833018	 add         r3, r3, #0x18
  0385c	e5931000	 ldr         r1, [r3]
  03860	e28d002c	 add         r0, sp, #0x2C
  03864	e3a02010	 mov         r2, #0x10
  03868	eb000000	 bl          memcpy

; 2113 :   RECTL rclMask = *(pParms->prclMask);

  0386c	e59d30c0	 ldr         r3, [sp, #0xC0]
  03870	e283302c	 add         r3, r3, #0x2C
  03874	e5931000	 ldr         r1, [r3]
  03878	e28d005c	 add         r0, sp, #0x5C
  0387c	e3a02010	 mov         r2, #0x10
  03880	eb000000	 bl          memcpy

; 2114 : 
; 2115 :   WaitForNotBusy();

  03884	e59d30bc	 ldr         r3, [sp, #0xBC]
  03888	e5933000	 ldr         r3, [r3]
  0388c	e2833060	 add         r3, r3, #0x60
  03890	e59d00bc	 ldr         r0, [sp, #0xBC]
  03894	e5933000	 ldr         r3, [r3]
  03898	e1a0e00f	 mov         lr, pc
  0389c	e12fff13	 bx          r3

; 2116 :   MaskCopy32to32withA1(dstptr,
; 2117 :                        dststride,
; 2118 :                        rclDst.left,
; 2119 :                        rclDst.top,
; 2120 :                        rclDst.right - rclDst.left,
; 2121 :                        rclDst.bottom - rclDst.top,
; 2122 :                        srcptr,
; 2123 :                        srcstride,
; 2124 :                        rclSrc.left,
; 2125 :                        rclSrc.top,
; 2126 :                        mskptr,
; 2127 :                        mskstride,
; 2128 :                        rclMask.left,
; 2129 :                        rclMask.top);

  038a0	e59d3060	 ldr         r3, [sp, #0x60]
  038a4	e58d3024	 str         r3, [sp, #0x24]
  038a8	e59d305c	 ldr         r3, [sp, #0x5C]
  038ac	e58d3020	 str         r3, [sp, #0x20]
  038b0	e59d303c	 ldr         r3, [sp, #0x3C]
  038b4	e58d301c	 str         r3, [sp, #0x1C]
  038b8	e59d3054	 ldr         r3, [sp, #0x54]
  038bc	e58d3018	 str         r3, [sp, #0x18]
  038c0	e59d3030	 ldr         r3, [sp, #0x30]
  038c4	e58d3014	 str         r3, [sp, #0x14]
  038c8	e59d302c	 ldr         r3, [sp, #0x2C]
  038cc	e58d3010	 str         r3, [sp, #0x10]
  038d0	e59d306c	 ldr         r3, [sp, #0x6C]
  038d4	e58d300c	 str         r3, [sp, #0xC]
  038d8	e59d3058	 ldr         r3, [sp, #0x58]
  038dc	e58d3008	 str         r3, [sp, #8]
  038e0	e59d2050	 ldr         r2, [sp, #0x50]
  038e4	e59d3048	 ldr         r3, [sp, #0x48]
  038e8	e0423003	 sub         r3, r2, r3
  038ec	e58d3004	 str         r3, [sp, #4]
  038f0	e59d204c	 ldr         r2, [sp, #0x4C]
  038f4	e59d3044	 ldr         r3, [sp, #0x44]
  038f8	e0423003	 sub         r3, r2, r3
  038fc	e58d3000	 str         r3, [sp]
  03900	e59d3048	 ldr         r3, [sp, #0x48]
  03904	e59d2044	 ldr         r2, [sp, #0x44]
  03908	e59d1040	 ldr         r1, [sp, #0x40]
  0390c	e59d0028	 ldr         r0, [sp, #0x28]
  03910	eb000000	 bl          MaskCopy32to32withA1

; 2130 : 
; 2131 : #ifdef CHECKBLT
; 2132 : // Save my BLT results
; 2133 : void* buffmydst = malloc(size);
; 2134 : if(SavedParms.pDst->Stride() < 0)
; 2135 :   memcpy(buffmydst, (void*)((long)SavedParms.pDst->Buffer() - ((SavedParms.pDst->Height() - 1) * SavedParms.pDst->Stride())), size);
; 2136 : else
; 2137 :   memcpy(buffmydst, SavedParms.pDst->Buffer(), size);
; 2138 : 
; 2139 : // Check for an error
; 2140 :   unsigned int mybltcrc = wombat2d((unsigned char*)SavedParms.pDst->Buffer(),
; 2141 :                                    SavedParms.pDst->Stride(),
; 2142 :                                    SavedParms.pDst->Width(),
; 2143 :                                    SavedParms.pDst->Height());
; 2144 : // Restore original destination
; 2145 : if(SavedParms.pDst->Stride() < 0)
; 2146 :   memcpy((void*)((long)SavedParms.pDst->Buffer() - ((SavedParms.pDst->Height() - 1) * SavedParms.pDst->Stride())), buffolddst, size);
; 2147 : else
; 2148 :   memcpy(SavedParms.pDst->Buffer(), buffolddst, size);
; 2149 : 
; 2150 :   GPE* pGPE = GetGPE();
; 2151 :   pGPE->EmulatedBlt(pParms);
; 2152 :   if(mybltcrc != wombat2d((unsigned char*)SavedParms.pDst->Buffer(),
; 2153 :                           SavedParms.pDst->Stride(),
; 2154 :                           SavedParms.pDst->Width(),
; 2155 :                           SavedParms.pDst->Height()))
; 2156 :   {
; 2157 :     RETAILMSG(1, (TEXT("****** BAD BLT ******\n")));
; 2158 :     DumpParms(&SavedParms);
; 2159 :     DebugBreak();
; 2160 :   }
; 2161 :   free(buffmydst);
; 2162 :   free(buffolddst);
; 2163 : #endif
; 2164 : 
; 2165 :   return(S_OK);

  03914	e3a03000	 mov         r3, #0
  03918	e58d3098	 str         r3, [sp, #0x98]

; 2166 : }

  0391c	e59d0098	 ldr         r0, [sp, #0x98]
  03920	e28dd0b4	 add         sp, sp, #0xB4
  03924	e89d6000	 ldmia       sp, {sp, lr}
  03928	e12fff1e	 bx          lr
  0392c		 |$M43642|

			 ENDP  ; |?EmulatedMaskCopy32to32withA1@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|, OMAPDDGPE::EmulatedMaskCopy32to32withA1

	END
