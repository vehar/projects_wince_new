; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\DSS\DSSAI\surfmgr_vrfb.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|DEVICE_IFC_VRFB_GUID| [ DATA ]
	EXPORT	|?g_bVRFBViewReserved@@3PAHA| [ DATA ]	; g_bVRFBViewReserved

  00000			 AREA	 |.bss|, NOINIT
|?g_bVRFBViewReserved@@3PAHA| % 0x30			; g_bVRFBViewReserved

  00000			 AREA	 |.rdata|, DATA, READONLY
|DEVICE_IFC_VRFB_GUID| DCD 0xede6bb10
	DCW	0xd844
	DCW	0x4639
	DCB	0xa7
	DCB	0xb6
	DCB	0xca
	DCB	0x19
	DCB	0x9c
	DCB	0xd9
	DCB	0xeb
	DCB	0x34
	EXPORT	|??_7OMAPVrfbSurface@@6B@| [ DATA ]	; OMAPVrfbSurface::`vftable'
	EXPORT	|??0OMAPSurface@@QAA@XZ|		; OMAPSurface::OMAPSurface
	EXPORT	|??0OMAPVrfbSurface@@QAA@XZ|		; OMAPVrfbSurface::OMAPVrfbSurface
	EXPORT	|?VirtualAddr@OMAPVrfbSurface@@UAAPAXXZ| ; OMAPVrfbSurface::VirtualAddr
	EXPORT	|?Width@OMAPVrfbSurface@@UAAKW4OMAP_DSS_ROTATION@@@Z| ; OMAPVrfbSurface::Width
	EXPORT	|?Height@OMAPVrfbSurface@@UAAKW4OMAP_DSS_ROTATION@@@Z| ; OMAPVrfbSurface::Height
	EXPORT	|?Stride@OMAPVrfbSurface@@UAAKW4OMAP_DSS_ROTATION@@@Z| ; OMAPVrfbSurface::Stride
	EXPORT	|?PhysicalAddr@OMAPVrfbSurface@@UAAKW4OMAP_DSS_ROTATION@@HW4OMAP_ASSOC_SURF_USAGE@@@Z| ; OMAPVrfbSurface::PhysicalAddr
	EXPORT	|?PixelIncr@OMAPVrfbSurface@@UAAKW4OMAP_DSS_ROTATION@@H@Z| ; OMAPVrfbSurface::PixelIncr
	EXPORT	|?RowIncr@OMAPVrfbSurface@@UAAKW4OMAP_DSS_ROTATION@@H@Z| ; OMAPVrfbSurface::RowIncr
	EXPORT	|?SetOrientation@OMAPVrfbSurface@@UAAHW4OMAP_SURF_ORIENTATION@@@Z| ; OMAPVrfbSurface::SetOrientation
	IMPORT	|??_EOMAPVrfbSurface@@UAAPAXI@Z|, WEAK |??_GOMAPVrfbSurface@@UAAPAXI@Z| ; OMAPVrfbSurface::`vector deleting destructor', OMAPVrfbSurface::`scalar deleting destructor'
	IMPORT	|?SetClipping@OMAPSurface@@UAAHPAUtagRECT@@@Z| ; OMAPSurface::SetClipping
	IMPORT	|?UpdateClipping@OMAPSurface@@UAAHPAUtagRECT@@@Z| ; OMAPSurface::UpdateClipping
	IMPORT	|?GetClipping@OMAPSurface@@UAA?AUtagRECT@@XZ| ; OMAPSurface::GetClipping
	IMPORT	|?AdjustClippingRect@OMAPSurface@@UAAHPAUtagRECT@@EE@Z| ; OMAPSurface::AdjustClippingRect
	IMPORT	|?SetHorizontalScaling@OMAPSurface@@UAAHK@Z| ; OMAPSurface::SetHorizontalScaling
	IMPORT	|?SetVerticalScaling@OMAPSurface@@UAAHK@Z| ; OMAPSurface::SetVerticalScaling

  00000			 AREA	 |.pdata|, PDATA
|$T37756| DCD	|$LN5@OMAPVrfbSu|
	DCD	0x40003904
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\dssai\surfmgr_vrfb.cpp

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_7OMAPVrfbSurface@@6B@| DCD |??_EOMAPVrfbSurface@@UAAPAXI@Z| ; OMAPVrfbSurface::`vftable'
	DCD	|?VirtualAddr@OMAPVrfbSurface@@UAAPAXXZ|
	DCD	|?Width@OMAPVrfbSurface@@UAAKW4OMAP_DSS_ROTATION@@@Z|
	DCD	|?Height@OMAPVrfbSurface@@UAAKW4OMAP_DSS_ROTATION@@@Z|
	DCD	|?Stride@OMAPVrfbSurface@@UAAKW4OMAP_DSS_ROTATION@@@Z|
	DCD	|?PhysicalAddr@OMAPVrfbSurface@@UAAKW4OMAP_DSS_ROTATION@@HW4OMAP_ASSOC_SURF_USAGE@@@Z|
	DCD	|?PixelIncr@OMAPVrfbSurface@@UAAKW4OMAP_DSS_ROTATION@@H@Z|
	DCD	|?RowIncr@OMAPVrfbSurface@@UAAKW4OMAP_DSS_ROTATION@@H@Z|
	DCD	|?SetClipping@OMAPSurface@@UAAHPAUtagRECT@@@Z|
	DCD	|?UpdateClipping@OMAPSurface@@UAAHPAUtagRECT@@@Z|
	DCD	|?GetClipping@OMAPSurface@@UAA?AUtagRECT@@XZ|
	DCD	|?AdjustClippingRect@OMAPSurface@@UAAHPAUtagRECT@@EE@Z|
	DCD	|?SetHorizontalScaling@OMAPSurface@@UAAHK@Z|
	DCD	|?SetVerticalScaling@OMAPSurface@@UAAHK@Z|
	DCD	|?SetOrientation@OMAPVrfbSurface@@UAAHW4OMAP_SURF_ORIENTATION@@@Z|
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0OMAPVrfbSurface@@QAA@XZ| PROC	; OMAPVrfbSurface::OMAPVrfbSurface

; 51   : {

  00000		 |$LN5@OMAPVrfbSu|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd008	 sub         sp, sp, #8
  00010		 |$M37753|
  00010	e59d0010	 ldr         r0, [sp, #0x10]
  00014	eb000000	 bl          |??0OMAPSurface@@QAA@XZ|
  00018	e58d0004	 str         r0, [sp, #4]
  0001c	e59f20bc	 ldr         r2, [pc, #0xBC]
  00020	e59d3010	 ldr         r3, [sp, #0x10]
  00024	e5832000	 str         r2, [r3]

; 52   :     m_hHeap = NULL;

  00028	e59d3010	 ldr         r3, [sp, #0x10]
  0002c	e28320a4	 add         r2, r3, #0xA4
  00030	e3a03000	 mov         r3, #0
  00034	e5823000	 str         r3, [r2]

; 53   :     m_hVRFB = NULL;

  00038	e59d3010	 ldr         r3, [sp, #0x10]
  0003c	e28320a8	 add         r2, r3, #0xA8
  00040	e3a03000	 mov         r3, #0
  00044	e5823000	 str         r3, [r2]

; 54   :     m_hVRFBView = NULL;

  00048	e59d3010	 ldr         r3, [sp, #0x10]
  0004c	e28320ac	 add         r2, r3, #0xAC
  00050	e3a03000	 mov         r3, #0
  00054	e5823000	 str         r3, [r2]

; 55   :     m_dwViewIndex = (DWORD) -1;

  00058	e59d3010	 ldr         r3, [sp, #0x10]
  0005c	e28320b0	 add         r2, r3, #0xB0
  00060	e3e03000	 mvn         r3, #0
  00064	e5823000	 str         r3, [r2]

; 56   :     m_dwWidthFactor = 1;

  00068	e59d3010	 ldr         r3, [sp, #0x10]
  0006c	e28320b4	 add         r2, r3, #0xB4
  00070	e3a03001	 mov         r3, #1
  00074	e5823000	 str         r3, [r2]

; 57   :     m_dwHorizScale = 1;

  00078	e59d3010	 ldr         r3, [sp, #0x10]
  0007c	e2832028	 add         r2, r3, #0x28
  00080	e3a03001	 mov         r3, #1
  00084	e5823000	 str         r3, [r2]

; 58   :     m_dwVertScale = 1;

  00088	e59d3010	 ldr         r3, [sp, #0x10]
  0008c	e283202c	 add         r2, r3, #0x2C
  00090	e3a03001	 mov         r3, #1
  00094	e5823000	 str         r3, [r2]

; 59   :     m_bUseResizer = FALSE;

  00098	e59d3010	 ldr         r3, [sp, #0x10]
  0009c	e2832030	 add         r2, r3, #0x30
  000a0	e3a03000	 mov         r3, #0
  000a4	e5823000	 str         r3, [r2]

; 60   :     m_pAssocSurface = NULL;

  000a8	e59d3010	 ldr         r3, [sp, #0x10]
  000ac	e28320a0	 add         r2, r3, #0xA0
  000b0	e3a03000	 mov         r3, #0
  000b4	e5823000	 str         r3, [r2]

; 61   :     m_eSurfaceType = OMAP_SURFACE_NORMAL;

  000b8	e59d3010	 ldr         r3, [sp, #0x10]
  000bc	e283209c	 add         r2, r3, #0x9C
  000c0	e3a03000	 mov         r3, #0
  000c4	e5823000	 str         r3, [r2]

; 62   : }

  000c8	e59d3010	 ldr         r3, [sp, #0x10]
  000cc	e58d3000	 str         r3, [sp]
  000d0	e59d0000	 ldr         r0, [sp]
  000d4	e28dd008	 add         sp, sp, #8
  000d8	e89d6000	 ldmia       sp, {sp, lr}
  000dc	e12fff1e	 bx          lr
  000e0		 |$LN6@OMAPVrfbSu|
  000e0		 |$LN7@OMAPVrfbSu|
  000e0	00000000	 DCD         |??_7OMAPVrfbSurface@@6B@|
  000e4		 |$M37754|

			 ENDP  ; |??0OMAPVrfbSurface@@QAA@XZ|, OMAPVrfbSurface::OMAPVrfbSurface

	EXPORT	|??_7OMAPSurface@@6B@| [ DATA ]		; OMAPSurface::`vftable'
	IMPORT	|??_EOMAPSurface@@UAAPAXI@Z|, WEAK |??_GOMAPSurface@@UAAPAXI@Z| ; OMAPSurface::`vector deleting destructor', OMAPSurface::`scalar deleting destructor'
	IMPORT	|_purecall|
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\inc\dssai.h

  00000			 AREA	 |.pdata|, PDATA
|$T37764| DCD	|$LN5@OMAPSurfac|
	DCD	0x40000e04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_7OMAPSurface@@6B@| DCD |??_EOMAPSurface@@UAAPAXI@Z|	; OMAPSurface::`vftable'
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|?SetClipping@OMAPSurface@@UAAHPAUtagRECT@@@Z|
	DCD	|?UpdateClipping@OMAPSurface@@UAAHPAUtagRECT@@@Z|
	DCD	|?GetClipping@OMAPSurface@@UAA?AUtagRECT@@XZ|
	DCD	|?AdjustClippingRect@OMAPSurface@@UAAHPAUtagRECT@@EE@Z|
	DCD	|?SetHorizontalScaling@OMAPSurface@@UAAHK@Z|
	DCD	|?SetVerticalScaling@OMAPSurface@@UAAHK@Z|
	DCD	|_purecall|
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0OMAPSurface@@QAA@XZ| PROC		; OMAPSurface::OMAPSurface

; 738  :     OMAPSurface() {};

  00000		 |$LN5@OMAPSurfac|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M37761|
  00010	e59f201c	 ldr         r2, [pc, #0x1C]
  00014	e59d300c	 ldr         r3, [sp, #0xC]
  00018	e5832000	 str         r2, [r3]
  0001c	e59d300c	 ldr         r3, [sp, #0xC]
  00020	e58d3000	 str         r3, [sp]
  00024	e59d0000	 ldr         r0, [sp]
  00028	e28dd004	 add         sp, sp, #4
  0002c	e89d6000	 ldmia       sp, {sp, lr}
  00030	e12fff1e	 bx          lr
  00034		 |$LN6@OMAPSurfac|
  00034		 |$LN7@OMAPSurfac|
  00034	00000000	 DCD         |??_7OMAPSurface@@6B@|
  00038		 |$M37762|

			 ENDP  ; |??0OMAPSurface@@QAA@XZ|, OMAPSurface::OMAPSurface

	EXPORT	|??1OMAPSurface@@UAA@XZ|		; OMAPSurface::~OMAPSurface
	IMPORT	|??3@YAXPAX@Z|				; operator delete

  00000			 AREA	 |.pdata|, PDATA
|$T37774| DCD	|$LN6@scalar|
	DCD	0x40001104
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??_GOMAPSurface@@UAAPAXI@Z| PROC	; OMAPSurface::`scalar deleting destructor'
  00000		 |$LN6@scalar|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M37771|
  00010	e59d000c	 ldr         r0, [sp, #0xC]
  00014	eb000000	 bl          |??1OMAPSurface@@UAA@XZ|
  00018	e59d3010	 ldr         r3, [sp, #0x10]
  0001c	e3130001	 tst         r3, #1
  00020	0a000001	 beq         |$LN1@scalar|
  00024	e59d000c	 ldr         r0, [sp, #0xC]
  00028	eb000000	 bl          |??3@YAXPAX@Z|
  0002c		 |$LN1@scalar|
  0002c	e59d300c	 ldr         r3, [sp, #0xC]
  00030	e58d3000	 str         r3, [sp]
  00034	e59d0000	 ldr         r0, [sp]
  00038	e28dd004	 add         sp, sp, #4
  0003c	e89d6000	 ldmia       sp, {sp, lr}
  00040	e12fff1e	 bx          lr
  00044		 |$M37772|

			 ENDP  ; |??_GOMAPSurface@@UAAPAXI@Z|, OMAPSurface::`scalar deleting destructor'


  00000			 AREA	 |.pdata|, PDATA
|$T37781| DCD	|$LN5@OMAPSurfac@2|
	DCD	0x40000903
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??1OMAPSurface@@UAA@XZ| PROC		; OMAPSurface::~OMAPSurface

; 745  :     ~OMAPSurface() {};

  00000		 |$LN5@OMAPSurfac@2|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M37778|
  0000c	e59f200c	 ldr         r2, [pc, #0xC]
  00010	e59d3008	 ldr         r3, [sp, #8]
  00014	e5832000	 str         r2, [r3]
  00018	e89d6000	 ldmia       sp, {sp, lr}
  0001c	e12fff1e	 bx          lr
  00020		 |$LN6@OMAPSurfac@2|
  00020		 |$LN7@OMAPSurfac@2|
  00020	00000000	 DCD         |??_7OMAPSurface@@6B@|
  00024		 |$M37779|

			 ENDP  ; |??1OMAPSurface@@UAA@XZ|, OMAPSurface::~OMAPSurface

	EXPORT	|??1OMAPVrfbSurface@@UAA@XZ|		; OMAPVrfbSurface::~OMAPVrfbSurface

  00000			 AREA	 |.pdata|, PDATA
|$T37791| DCD	|$LN6@scalar@2|
	DCD	0x40001104
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??_GOMAPVrfbSurface@@UAAPAXI@Z| PROC	; OMAPVrfbSurface::`scalar deleting destructor'
  00000		 |$LN6@scalar@2|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M37788|
  00010	e59d000c	 ldr         r0, [sp, #0xC]
  00014	eb000000	 bl          |??1OMAPVrfbSurface@@UAA@XZ|
  00018	e59d3010	 ldr         r3, [sp, #0x10]
  0001c	e3130001	 tst         r3, #1
  00020	0a000001	 beq         |$LN1@scalar@2|
  00024	e59d000c	 ldr         r0, [sp, #0xC]
  00028	eb000000	 bl          |??3@YAXPAX@Z|
  0002c		 |$LN1@scalar@2|
  0002c	e59d300c	 ldr         r3, [sp, #0xC]
  00030	e58d3000	 str         r3, [sp]
  00034	e59d0000	 ldr         r0, [sp]
  00038	e28dd004	 add         sp, sp, #4
  0003c	e89d6000	 ldmia       sp, {sp, lr}
  00040	e12fff1e	 bx          lr
  00044		 |$M37789|

			 ENDP  ; |??_GOMAPVrfbSurface@@UAAPAXI@Z|, OMAPVrfbSurface::`scalar deleting destructor'

	EXPORT	|??_C@_1IK@LDDAIMGK@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAO?$AAM?$AAA?$AAP?$AAV?$AAr?$AAf?$AAb?$AAS?$AAu?$AAr?$AAf?$AAa?$AAc?$AAe?$AA?3?$AA?3?$AA?$HO?$AAO?$AAM?$AAA?$AAP?$AAV?$AAr?$AAf?$AAb@| [ DATA ] ; `string'
	IMPORT	|NKDbgPrintfW|
	IMPORT	|?Free@Heap@@QAAXXZ|			; Heap::Free

  00008			 AREA	 |.pdata|, PDATA
|$T37800| DCD	|$LN9@OMAPVrfbSu@2|
	DCD	0x40003504
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\dssai\surfmgr_vrfb.cpp

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IK@LDDAIMGK@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAO?$AAM?$AAA?$AAP?$AAV?$AAr?$AAf?$AAb?$AAS?$AAu?$AAr?$AAf?$AAa?$AAc?$AAe?$AA?3?$AA?3?$AA?$HO?$AAO?$AAM?$AAA?$AAP?$AAV?$AAr?$AAf?$AAb@| DCB "I"
	DCB	0x0, "N", 0x0, "F", 0x0, "O", 0x0, ":", 0x0, " ", 0x0, "O"
	DCB	0x0, "M", 0x0, "A", 0x0, "P", 0x0, "V", 0x0, "r", 0x0, "f"
	DCB	0x0, "b", 0x0, "S", 0x0, "u", 0x0, "r", 0x0, "f", 0x0, "a"
	DCB	0x0, "c", 0x0, "e", 0x0, ":", 0x0, ":", 0x0, "~", 0x0, "O"
	DCB	0x0, "M", 0x0, "A", 0x0, "P", 0x0, "V", 0x0, "r", 0x0, "f"
	DCB	0x0, "b", 0x0, "S", 0x0, "u", 0x0, "r", 0x0, "f", 0x0, "a"
	DCB	0x0, "c", 0x0, "e", 0x0, "(", 0x0, ")", 0x0, " ", 0x0, "-"
	DCB	0x0, " ", 0x0, "F", 0x0, "r", 0x0, "e", 0x0, "e", 0x0, "i"
	DCB	0x0, "n", 0x0, "g", 0x0, " ", 0x0, "V", 0x0, "R", 0x0, "F"
	DCB	0x0, "B", 0x0, " ", 0x0, "V", 0x0, "i", 0x0, "e", 0x0, "w"
	DCB	0x0, " ", 0x0, "#", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  000e4			 AREA	 |.text|, CODE, ARM

  000e4		 |??1OMAPVrfbSurface@@UAA@XZ| PROC	; OMAPVrfbSurface::~OMAPVrfbSurface

; 66   : {

  000e4		 |$LN9@OMAPVrfbSu@2|
  000e4	e1a0c00d	 mov         r12, sp
  000e8	e92d0001	 stmdb       sp!, {r0}
  000ec	e92d5000	 stmdb       sp!, {r12, lr}
  000f0	e24dd008	 sub         sp, sp, #8
  000f4		 |$M37797|
  000f4	e59f20b8	 ldr         r2, [pc, #0xB8]
  000f8	e59d3010	 ldr         r3, [sp, #0x10]
  000fc	e5832000	 str         r2, [r3]

; 67   :     Heap    *pHeap = (Heap*) m_hHeap;

  00100	e59d3010	 ldr         r3, [sp, #0x10]
  00104	e28330a4	 add         r3, r3, #0xA4
  00108	e5933000	 ldr         r3, [r3]
  0010c	e58d3000	 str         r3, [sp]

; 68   :     
; 69   :     //  Free the underlying surface memory
; 70   :     if( pHeap )

  00110	e59d3000	 ldr         r3, [sp]
  00114	e3530000	 cmp         r3, #0
  00118	0a000001	 beq         |$LN2@OMAPVrfbSu@2|

; 71   :         pHeap->Free();

  0011c	e59d0000	 ldr         r0, [sp]
  00120	eb000000	 bl          |?Free@Heap@@QAAXXZ|
  00124		 |$LN2@OMAPVrfbSu@2|

; 72   :         
; 73   :     //  Free the VRFB view
; 74   :     if( m_dwViewIndex != -1 && m_dwViewIndex < VRFB_ROTATION_CONTEXTS)

  00124	e59d3010	 ldr         r3, [sp, #0x10]
  00128	e28330b0	 add         r3, r3, #0xB0
  0012c	e5933000	 ldr         r3, [r3]
  00130	e3730001	 cmn         r3, #1
  00134	0a000017	 beq         |$LN1@OMAPVrfbSu@2|
  00138	e59d3010	 ldr         r3, [sp, #0x10]
  0013c	e28330b0	 add         r3, r3, #0xB0
  00140	e5933000	 ldr         r3, [r3]
  00144	e353000c	 cmp         r3, #0xC
  00148	2a000012	 bcs         |$LN1@OMAPVrfbSu@2|

; 75   :     {
; 76   :         g_bVRFBViewReserved[m_dwViewIndex] = FALSE;        

  0014c	e59d3010	 ldr         r3, [sp, #0x10]
  00150	e28330b0	 add         r3, r3, #0xB0
  00154	e5931000	 ldr         r1, [r3]
  00158	e3a03004	 mov         r3, #4
  0015c	e0020391	 mul         r2, r1, r3
  00160	e59f3048	 ldr         r3, [pc, #0x48]
  00164	e0832002	 add         r2, r3, r2
  00168	e3a03000	 mov         r3, #0
  0016c	e5823000	 str         r3, [r2]

; 77   : 
; 78   :         DEBUGMSG(ZONE_WARNING, (L"INFO: OMAPVrfbSurface::~OMAPVrfbSurface() - Freeing VRFB View # %d\r\n", m_dwViewIndex));

  00170	e59d3010	 ldr         r3, [sp, #0x10]
  00174	e28330b0	 add         r3, r3, #0xB0
  00178	e5931000	 ldr         r1, [r3]
  0017c	e59f0028	 ldr         r0, [pc, #0x28]
  00180	eb000000	 bl          NKDbgPrintfW
  00184	e3a03001	 mov         r3, #1
  00188	e58d3004	 str         r3, [sp, #4]
  0018c	ea000001	 b           |$LN6@OMAPVrfbSu@2|
  00190	e3a03000	 mov         r3, #0
  00194	e58d3004	 str         r3, [sp, #4]
  00198		 |$LN6@OMAPVrfbSu@2|
  00198		 |$LN1@OMAPVrfbSu@2|

; 79   :     }
; 80   : }

  00198	e59d0010	 ldr         r0, [sp, #0x10]
  0019c	eb000000	 bl          |??1OMAPSurface@@UAA@XZ|
  001a0	e28dd008	 add         sp, sp, #8
  001a4	e89d6000	 ldmia       sp, {sp, lr}
  001a8	e12fff1e	 bx          lr
  001ac		 |$LN10@OMAPVrfbSu@2|
  001ac		 |$LN11@OMAPVrfbSu@2|
  001ac	00000000	 DCD         |??_C@_1IK@LDDAIMGK@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAO?$AAM?$AAA?$AAP?$AAV?$AAr?$AAf?$AAb?$AAS?$AAu?$AAr?$AAf?$AAa?$AAc?$AAe?$AA?3?$AA?3?$AA?$HO?$AAO?$AAM?$AAA?$AAP?$AAV?$AAr?$AAf?$AAb@|
  001b0		 |$LN12@OMAPVrfbSu@2|
  001b0	00000000	 DCD         |?g_bVRFBViewReserved@@3PAHA|
  001b4		 |$LN13@OMAPVrfbSu@2|
  001b4	00000000	 DCD         |??_7OMAPVrfbSurface@@6B@|
  001b8		 |$M37798|

			 ENDP  ; |??1OMAPVrfbSurface@@UAA@XZ|, OMAPVrfbSurface::~OMAPVrfbSurface

	EXPORT	|??_C@_1IA@NHFIFLDN@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAO?$AAM?$AAA?$AAP?$AAV?$AAr?$AAf?$AAb?$AAS?$AAu?$AAr?$AAf?$AAa?$AAc?$AAe?$AA?3?$AA?3?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$CI@| [ DATA ] ; `string'
	EXPORT	|?Address@Heap@@QAAKXZ|			; Heap::Address
	EXPORT	|??_C@_1EO@LAEPFMGF@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAh?$AAe?$AAa?$AAp?$AA?5?$AAm@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EK@JBCPENIJ@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAV?$AAR?$AAF?$AAB?$AA?5?$AAv?$AAi?$AAe?$AAw?$AA?5?$AAi@| [ DATA ] ; `string'
	EXPORT	|VRFBGetViewInfo|
	EXPORT	|??_C@_1FM@GFIIAPLB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAu?$AAp?$AAd?$AAa?$AAt?$AAe?$AA?5?$AAV?$AAR?$AAF?$AAB?$AA?5?$AAv?$AAi?$AAe@| [ DATA ] ; `string'
	EXPORT	|VRFBUpdateView|
	EXPORT	|VRFBGetDisplayView|
	EXPORT	|??_C@_1EK@FAFNALME@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAA?$AAl?$AAl?$AA?5?$AAV?$AAR?$AAF?$AAB?$AA?5?$AAv?$AAi?$AAe?$AAw?$AAs?$AA?5?$AAa?$AAr?$AAe?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa@| [ DATA ] ; `string'
	EXPORT	|VRFBNumDisplayViews|
	EXPORT	|??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1LA@HPLNHDIB@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@| [ DATA ] ; `string'
	EXPORT	|?Allocate@OMAPVrfbSurface@@QAAHW4OMAP_DSS_PIXELFORMAT@@KKPAX1@Z| ; OMAPVrfbSurface::Allocate
	IMPORT	|memset|
	IMPORT	|?Allocate@Heap@@QAAPAV1@K@Z|		; Heap::Allocate
	IMPORT	|__rt_udiv|

  00010			 AREA	 |.pdata|, PDATA
|$T37840| DCD	|$LN51@Allocate|
	DCD	0x40014b04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IA@NHFIFLDN@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAO?$AAM?$AAA?$AAP?$AAV?$AAr?$AAf?$AAb?$AAS?$AAu?$AAr?$AAf?$AAa?$AAc?$AAe?$AA?3?$AA?3?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$CI@| DCB "I"
	DCB	0x0, "N", 0x0, "F", 0x0, "O", 0x0, ":", 0x0, " ", 0x0, "O"
	DCB	0x0, "M", 0x0, "A", 0x0, "P", 0x0, "V", 0x0, "r", 0x0, "f"
	DCB	0x0, "b", 0x0, "S", 0x0, "u", 0x0, "r", 0x0, "f", 0x0, "a"
	DCB	0x0, "c", 0x0, "e", 0x0, ":", 0x0, ":", 0x0, "A", 0x0, "l"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, "(", 0x0, ")", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "A"
	DCB	0x0, "l", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t"
	DCB	0x0, "i", 0x0, "n", 0x0, "g", 0x0, " ", 0x0, "V", 0x0, "R"
	DCB	0x0, "F", 0x0, "B", 0x0, " ", 0x0, "V", 0x0, "i", 0x0, "e"
	DCB	0x0, "w", 0x0, " ", 0x0, "#", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EO@LAEPFMGF@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAh?$AAe?$AAa?$AAp?$AA?5?$AAm@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "U", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e"
	DCB	0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "a", 0x0, "l"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, " ", 0x0, "h", 0x0, "e", 0x0, "a", 0x0, "p", 0x0, " "
	DCB	0x0, "m", 0x0, "e", 0x0, "m", 0x0, "o", 0x0, "r", 0x0, "y"
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EK@JBCPENIJ@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAV?$AAR?$AAF?$AAB?$AA?5?$AAv?$AAi?$AAe?$AAw?$AA?5?$AAi@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "U", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e"
	DCB	0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "g", 0x0, "e"
	DCB	0x0, "t", 0x0, " ", 0x0, "V", 0x0, "R", 0x0, "F", 0x0, "B"
	DCB	0x0, " ", 0x0, "v", 0x0, "i", 0x0, "e", 0x0, "w", 0x0, " "
	DCB	0x0, "i", 0x0, "n", 0x0, "f", 0x0, "o", 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FM@GFIIAPLB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAu?$AAp?$AAd?$AAa?$AAt?$AAe?$AA?5?$AAV?$AAR?$AAF?$AAB?$AA?5?$AAv?$AAi?$AAe@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "U", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e"
	DCB	0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "u", 0x0, "p"
	DCB	0x0, "d", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, " ", 0x0, "V"
	DCB	0x0, "R", 0x0, "F", 0x0, "B", 0x0, " ", 0x0, "v", 0x0, "i"
	DCB	0x0, "e", 0x0, "w", 0x0, " ", 0x0, "p", 0x0, "a", 0x0, "r"
	DCB	0x0, "a", 0x0, "m", 0x0, "e", 0x0, "t", 0x0, "e", 0x0, "r"
	DCB	0x0, "s", 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EK@FAFNALME@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAA?$AAl?$AAl?$AA?5?$AAV?$AAR?$AAF?$AAB?$AA?5?$AAv?$AAi?$AAe?$AAw?$AAs?$AA?5?$AAa?$AAr?$AAe?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "A", 0x0, "l", 0x0, "l", 0x0, " ", 0x0, "V", 0x0, "R"
	DCB	0x0, "F", 0x0, "B", 0x0, " ", 0x0, "v", 0x0, "i", 0x0, "e"
	DCB	0x0, "w", 0x0, "s", 0x0, " ", 0x0, "a", 0x0, "r", 0x0, "e"
	DCB	0x0, " ", 0x0, "a", 0x0, "l", 0x0, "l", 0x0, "o", 0x0, "c"
	DCB	0x0, "a", 0x0, "t", 0x0, "e", 0x0, "d", 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@| DCB "%"
	DCB	0x0, "s", 0x0, ":", 0x0, " ", 0x0, "D", 0x0, "E", 0x0, "B"
	DCB	0x0, "U", 0x0, "G", 0x0, "C", 0x0, "H", 0x0, "K", 0x0, " "
	DCB	0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "i", 0x0, "n", 0x0, " ", 0x0, "f", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, " ", 0x0, "%", 0x0, "s", 0x0, " "
	DCB	0x0, "a", 0x0, "t", 0x0, " ", 0x0, "l", 0x0, "i", 0x0, "n"
	DCB	0x0, "e", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@| DCB "U", 0x0
	DCB	"n", 0x0, "k", 0x0, "n", 0x0, "o", 0x0, "w", 0x0, "n", 0x0
	DCB	0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1LA@HPLNHDIB@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@| DCB "C"
	DCB	0x0, ":", 0x0, "\\", 0x0, "W", 0x0, "I", 0x0, "N", 0x0, "C"
	DCB	0x0, "E", 0x0, "6", 0x0, "0", 0x0, "0", 0x0, "\\", 0x0, "P"
	DCB	0x0, "L", 0x0, "A", 0x0, "T", 0x0, "F", 0x0, "O", 0x0, "R"
	DCB	0x0, "M", 0x0, "\\", 0x0, "C", 0x0, "O", 0x0, "M", 0x0, "M"
	DCB	0x0, "O", 0x0, "N", 0x0, "\\", 0x0, "S", 0x0, "R", 0x0, "C"
	DCB	0x0, "\\", 0x0, "S", 0x0, "O", 0x0, "C", 0x0, "\\", 0x0, "C"
	DCB	0x0, "O", 0x0, "M", 0x0, "M", 0x0, "O", 0x0, "N", 0x0, "_"
	DCB	0x0, "T", 0x0, "I", 0x0, "_", 0x0, "V", 0x0, "1", 0x0, "\\"
	DCB	0x0, "C", 0x0, "O", 0x0, "M", 0x0, "M", 0x0, "O", 0x0, "N"
	DCB	0x0, "_", 0x0, "T", 0x0, "I", 0x0, "\\", 0x0, "D", 0x0, "S"
	DCB	0x0, "S", 0x0, "\\", 0x0, "D", 0x0, "S", 0x0, "S", 0x0, "A"
	DCB	0x0, "I", 0x0, "\\", 0x0, ".", 0x0, "\\", 0x0, "s", 0x0, "u"
	DCB	0x0, "r", 0x0, "f", 0x0, "m", 0x0, "g", 0x0, "r", 0x0, "_"
	DCB	0x0, "v", 0x0, "r", 0x0, "f", 0x0, "b", 0x0, ".", 0x0, "c"
	DCB	0x0, "p", 0x0, "p", 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  001b8			 AREA	 |.text|, CODE, ARM

  001b8		 |?Allocate@OMAPVrfbSurface@@QAAHW4OMAP_DSS_PIXELFORMAT@@KKPAX1@Z| PROC ; OMAPVrfbSurface::Allocate

; 91   : {

  001b8		 |$LN51@Allocate|
  001b8	e1a0c00d	 mov         r12, sp
  001bc	e92d000f	 stmdb       sp!, {r0 - r3}
  001c0	e92d5000	 stmdb       sp!, {r12, lr}
  001c4	e24dd0c4	 sub         sp, sp, #0xC4
  001c8		 |$M37837|

; 92   :     BOOL            bResult;
; 93   :     Heap            *pMainHeap = (Heap*) hHeap,

  001c8	e59d30dc	 ldr         r3, [sp, #0xDC]
  001cc	e58d301c	 str         r3, [sp, #0x1C]

; 94   :                     *pSurfHeap = NULL;

  001d0	e3a03000	 mov         r3, #0
  001d4	e58d3024	 str         r3, [sp, #0x24]

; 95   :     DWORD           dwVrfbPixelSize;
; 96   :     DWORD           dwWidthFactor = 1;

  001d8	e3a03001	 mov         r3, #1
  001dc	e58d3010	 str         r3, [sp, #0x10]

; 97   :     DWORD           i;
; 98   :     HANDLE          hVRFBView;
; 99   :     VRFB_VIEW_INFO  info;
; 100  :     VOID            *ptr;       
; 101  :     DWORD           dwStride;         
; 102  :             
; 103  :             
; 104  :     //  Set surface properties based on pixel format
; 105  :     switch( ePixelFormat )

  001e0	e59d30d0	 ldr         r3, [sp, #0xD0]
  001e4	e58d3080	 str         r3, [sp, #0x80]
  001e8	e59d3080	 ldr         r3, [sp, #0x80]
  001ec	e2433005	 sub         r3, r3, #5
  001f0	e58d3080	 str         r3, [sp, #0x80]
  001f4	e59d3080	 ldr         r3, [sp, #0x80]
  001f8	e3530008	 cmp         r3, #8
  001fc	8a000018	 bhi         |$LN16@Allocate|
  00200	e59d2080	 ldr         r2, [sp, #0x80]
  00204	e1a03102	 mov         r3, r2, lsl #2
  00208	e083300f	 add         r3, r3, pc
  0020c	e5933004	 ldr         r3, [r3, #4]
  00210	e08ff003	 add         pc, pc, r3
  00214		 |$LN39@Allocate|
  00214		 |$LN38@Allocate|
  00214		 |$LN40@Allocate|
  00214	00000020	 DCD         0x20
  00218		 |$LN41@Allocate|
  00218	00000020	 DCD         0x20
  0021c		 |$LN42@Allocate|
  0021c	0000004c	 DCD         0x4c
  00220		 |$LN43@Allocate|
  00220	0000002c	 DCD         0x2c
  00224		 |$LN44@Allocate|
  00224	0000004c	 DCD         0x4c
  00228		 |$LN45@Allocate|
  00228	00000038	 DCD         0x38
  0022c		 |$LN46@Allocate|
  0022c	00000038	 DCD         0x38
  00230		 |$LN47@Allocate|
  00230	0000002c	 DCD         0x2c
  00234		 |$LN48@Allocate|
  00234	0000002c	 DCD         0x2c
  00238		 |$LN19@Allocate|

; 106  :     {
; 107  :         case OMAP_DSS_PIXELFORMAT_RGB16:
; 108  :         case OMAP_DSS_PIXELFORMAT_ARGB16:
; 109  :             //  2 bytes per pixel
; 110  :             dwVrfbPixelSize = VRFB_PIXELSIZE_2B;

  00238	e3a03001	 mov         r3, #1
  0023c	e58d3008	 str         r3, [sp, #8]

; 111  :             break;

  00240	ea000016	 b           |$LN20@Allocate|
  00244		 |$LN18@Allocate|

; 112  : 
; 113  :         case OMAP_DSS_PIXELFORMAT_RGB32:
; 114  :         case OMAP_DSS_PIXELFORMAT_ARGB32:
; 115  :         case OMAP_DSS_PIXELFORMAT_RGBA32:
; 116  :             //  4 bytes per pixel
; 117  :             dwVrfbPixelSize = VRFB_PIXELSIZE_4B;

  00244	e3a03002	 mov         r3, #2
  00248	e58d3008	 str         r3, [sp, #8]

; 118  :             break;

  0024c	ea000013	 b           |$LN20@Allocate|
  00250		 |$LN17@Allocate|

; 119  : 
; 120  :         case OMAP_DSS_PIXELFORMAT_YUV2:
; 121  :         case OMAP_DSS_PIXELFORMAT_UYVY:
; 122  :             //  2 bytes per pixel, but treated as 4 bytes and half the width
; 123  :             //  to support VRFB rotation for YUV formats
; 124  :             dwVrfbPixelSize = VRFB_PIXELSIZE_4B;

  00250	e3a03002	 mov         r3, #2
  00254	e58d3008	 str         r3, [sp, #8]

; 125  :             dwWidthFactor = 2;

  00258	e3a03002	 mov         r3, #2
  0025c	e58d3010	 str         r3, [sp, #0x10]

; 126  :             break;

  00260	ea00000e	 b           |$LN20@Allocate|
  00264		 |$LN16@Allocate|

; 127  : 
; 128  :         default:
; 129  :             ASSERT(0);

  00264	ea000002	 b           |$LN24@Allocate|
  00268	e3a03001	 mov         r3, #1
  0026c	e58d3084	 str         r3, [sp, #0x84]
  00270	ea000007	 b           |$LN25@Allocate|
  00274		 |$LN24@Allocate|
  00274	e3a03081	 mov         r3, #0x81
  00278	e59f2460	 ldr         r2, [pc, #0x460]
  0027c	e59f1458	 ldr         r1, [pc, #0x458]
  00280	e59f0450	 ldr         r0, [pc, #0x450]
  00284	eb000000	 bl          NKDbgPrintfW
  00288	e6000010	 __debugbreak_ce
  0028c	e3a03000	 mov         r3, #0
  00290	e58d3084	 str         r3, [sp, #0x84]
  00294		 |$LN25@Allocate|

; 130  :             return FALSE;

  00294	e3a03000	 mov         r3, #0
  00298	e58d306c	 str         r3, [sp, #0x6C]
  0029c	ea000103	 b           |$LN22@Allocate|
  002a0		 |$LN20@Allocate|

; 131  :     }
; 132  : 
; 133  : 
; 134  :     //  Find a free VRFB view to use
; 135  :     for( i = 0; i < VRFBNumDisplayViews(hVRFB); i++ )

  002a0	e3a03000	 mov         r3, #0
  002a4	e58d300c	 str         r3, [sp, #0xC]
  002a8	ea000002	 b           |$LN15@Allocate|
  002ac		 |$LN14@Allocate|
  002ac	e59d300c	 ldr         r3, [sp, #0xC]
  002b0	e2833001	 add         r3, r3, #1
  002b4	e58d300c	 str         r3, [sp, #0xC]
  002b8		 |$LN15@Allocate|
  002b8	e59d00e0	 ldr         r0, [sp, #0xE0]
  002bc	eb000000	 bl          VRFBNumDisplayViews
  002c0	e58d0088	 str         r0, [sp, #0x88]
  002c4	e59d200c	 ldr         r2, [sp, #0xC]
  002c8	e59d3088	 ldr         r3, [sp, #0x88]
  002cc	e1520003	 cmp         r2, r3
  002d0	2a000009	 bcs         |$LN13@Allocate|

; 136  :     {
; 137  :         if( g_bVRFBViewReserved[i] == FALSE )

  002d4	e59d100c	 ldr         r1, [sp, #0xC]
  002d8	e3a03004	 mov         r3, #4
  002dc	e0020391	 mul         r2, r1, r3
  002e0	e59f33dc	 ldr         r3, [pc, #0x3DC]
  002e4	e0833002	 add         r3, r3, r2
  002e8	e5933000	 ldr         r3, [r3]
  002ec	e3530000	 cmp         r3, #0
  002f0	1a000000	 bne         |$LN12@Allocate|

; 138  :             break;

  002f4	ea000000	 b           |$LN13@Allocate|
  002f8		 |$LN12@Allocate|

; 139  :     }

  002f8	eaffffeb	 b           |$LN14@Allocate|
  002fc		 |$LN13@Allocate|

; 140  : 
; 141  :     //  Check result
; 142  :     if( i == VRFBNumDisplayViews(hVRFB) )

  002fc	e59d00e0	 ldr         r0, [sp, #0xE0]
  00300	eb000000	 bl          VRFBNumDisplayViews
  00304	e58d008c	 str         r0, [sp, #0x8C]
  00308	e59d200c	 ldr         r2, [sp, #0xC]
  0030c	e59d308c	 ldr         r3, [sp, #0x8C]
  00310	e1520003	 cmp         r2, r3
  00314	1a000008	 bne         |$LN11@Allocate|

; 143  :     {
; 144  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: All VRFB views are allocated\n"));

  00318	e59f03b4	 ldr         r0, [pc, #0x3B4]
  0031c	eb000000	 bl          NKDbgPrintfW
  00320	e3a03001	 mov         r3, #1
  00324	e58d3090	 str         r3, [sp, #0x90]
  00328	ea000001	 b           |$LN27@Allocate|
  0032c	e3a03000	 mov         r3, #0
  00330	e58d3090	 str         r3, [sp, #0x90]
  00334		 |$LN27@Allocate|

; 145  :         goto cleanUp;

  00334	ea0000d3	 b           |$LN10@Allocate|
  00338	ea0000d2	 b           |$cleanUp$37271|
  0033c		 |$LN11@Allocate|

; 146  :     }
; 147  : 
; 148  : 
; 149  :     //  Get the free display view
; 150  :     hVRFBView = VRFBGetDisplayView( hVRFB, i );

  0033c	e59d100c	 ldr         r1, [sp, #0xC]
  00340	e59d00e0	 ldr         r0, [sp, #0xE0]
  00344	eb000000	 bl          VRFBGetDisplayView
  00348	e58d0094	 str         r0, [sp, #0x94]
  0034c	e59d3094	 ldr         r3, [sp, #0x94]
  00350	e58d3020	 str         r3, [sp, #0x20]

; 151  :     
; 152  :     //  Update the view with the surface parameters         
; 153  :     bResult = VRFBUpdateView( hVRFB, hVRFBView, dwVrfbPixelSize, dwWidth/dwWidthFactor, dwHeight, 0 );

  00354	e3a03000	 mov         r3, #0
  00358	e58d3004	 str         r3, [sp, #4]
  0035c	e59d30d8	 ldr         r3, [sp, #0xD8]
  00360	e58d3000	 str         r3, [sp]
  00364	e59d10d4	 ldr         r1, [sp, #0xD4]
  00368	e59d0010	 ldr         r0, [sp, #0x10]
  0036c	eb000000	 bl          __rt_udiv
  00370	e1a03000	 mov         r3, r0
  00374	e59d2008	 ldr         r2, [sp, #8]
  00378	e59d1020	 ldr         r1, [sp, #0x20]
  0037c	e59d00e0	 ldr         r0, [sp, #0xE0]
  00380	eb000000	 bl          VRFBUpdateView
  00384	e58d0098	 str         r0, [sp, #0x98]
  00388	e59d3098	 ldr         r3, [sp, #0x98]
  0038c	e58d3028	 str         r3, [sp, #0x28]

; 154  :     if(  bResult == FALSE )

  00390	e59d3028	 ldr         r3, [sp, #0x28]
  00394	e3530000	 cmp         r3, #0
  00398	1a000008	 bne         |$LN9@Allocate|

; 155  :     {
; 156  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: Unable to update VRFB view parameters\n"));

  0039c	e59f032c	 ldr         r0, [pc, #0x32C]
  003a0	eb000000	 bl          NKDbgPrintfW
  003a4	e3a03001	 mov         r3, #1
  003a8	e58d309c	 str         r3, [sp, #0x9C]
  003ac	ea000001	 b           |$LN29@Allocate|
  003b0	e3a03000	 mov         r3, #0
  003b4	e58d309c	 str         r3, [sp, #0x9C]
  003b8		 |$LN29@Allocate|

; 157  :         goto cleanUp;

  003b8	ea0000b2	 b           |$LN8@Allocate|
  003bc	ea0000b1	 b           |$cleanUp$37271|
  003c0		 |$LN9@Allocate|

; 158  :     }
; 159  : 
; 160  :     //  Get the view information to allocate the underlying memory
; 161  :     bResult = VRFBGetViewInfo( hVRFB, hVRFBView, &info );

  003c0	e28d202c	 add         r2, sp, #0x2C
  003c4	e59d1020	 ldr         r1, [sp, #0x20]
  003c8	e59d00e0	 ldr         r0, [sp, #0xE0]
  003cc	eb000000	 bl          VRFBGetViewInfo
  003d0	e58d00a0	 str         r0, [sp, #0xA0]
  003d4	e59d30a0	 ldr         r3, [sp, #0xA0]
  003d8	e58d3028	 str         r3, [sp, #0x28]

; 162  :     if(  bResult == FALSE )

  003dc	e59d3028	 ldr         r3, [sp, #0x28]
  003e0	e3530000	 cmp         r3, #0
  003e4	1a000008	 bne         |$LN7@Allocate|

; 163  :     {
; 164  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: Unable to get VRFB view info\n"));

  003e8	e59f02dc	 ldr         r0, [pc, #0x2DC]
  003ec	eb000000	 bl          NKDbgPrintfW
  003f0	e3a03001	 mov         r3, #1
  003f4	e58d30a4	 str         r3, [sp, #0xA4]
  003f8	ea000001	 b           |$LN31@Allocate|
  003fc	e3a03000	 mov         r3, #0
  00400	e58d30a4	 str         r3, [sp, #0xA4]
  00404		 |$LN31@Allocate|

; 165  :         goto cleanUp;

  00404	ea00009f	 b           |$LN6@Allocate|
  00408	ea00009e	 b           |$cleanUp$37271|
  0040c		 |$LN7@Allocate|

; 166  :     }
; 167  :         
; 168  : 
; 169  : 
; 170  :     //  Allocate the VRFB memory from the given video memory heap using the VRFB adjusted
; 171  :     //  image width and height which are a multiple of the VRFB page size
; 172  :     pSurfHeap = pMainHeap->Allocate( info.dwPixelSizeBytes * info.dwImageWidth * info.dwImageHeight );

  0040c	e59d1034	 ldr         r1, [sp, #0x34]
  00410	e59d3048	 ldr         r3, [sp, #0x48]
  00414	e0020391	 mul         r2, r1, r3
  00418	e59d304c	 ldr         r3, [sp, #0x4C]
  0041c	e0010392	 mul         r1, r2, r3
  00420	e59d001c	 ldr         r0, [sp, #0x1C]
  00424	eb000000	 bl          |?Allocate@Heap@@QAAPAV1@K@Z|
  00428	e58d00a8	 str         r0, [sp, #0xA8]
  0042c	e59d30a8	 ldr         r3, [sp, #0xA8]
  00430	e58d3024	 str         r3, [sp, #0x24]

; 173  :     if( pSurfHeap == NULL )

  00434	e59d3024	 ldr         r3, [sp, #0x24]
  00438	e3530000	 cmp         r3, #0
  0043c	1a000008	 bne         |$LN5@Allocate|

; 174  :     {
; 175  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: Unable to allocate heap memory\n"));

  00440	e59f0280	 ldr         r0, [pc, #0x280]
  00444	eb000000	 bl          NKDbgPrintfW
  00448	e3a03001	 mov         r3, #1
  0044c	e58d30ac	 str         r3, [sp, #0xAC]
  00450	ea000001	 b           |$LN33@Allocate|
  00454	e3a03000	 mov         r3, #0
  00458	e58d30ac	 str         r3, [sp, #0xAC]
  0045c		 |$LN33@Allocate|

; 176  :         goto cleanUp;

  0045c	ea000089	 b           |$LN4@Allocate|
  00460	ea000088	 b           |$cleanUp$37271|
  00464		 |$LN5@Allocate|

; 177  :     }
; 178  : 
; 179  :     //  Update the VRFB view with the surface parameters and allocated display memory         
; 180  :     VRFBUpdateView( hVRFB, hVRFBView, dwVrfbPixelSize, dwWidth/dwWidthFactor, dwHeight, pSurfHeap->Address() );

  00464	e59d0024	 ldr         r0, [sp, #0x24]
  00468	eb000000	 bl          |?Address@Heap@@QAAKXZ|
  0046c	e58d00b0	 str         r0, [sp, #0xB0]
  00470	e59d30b0	 ldr         r3, [sp, #0xB0]
  00474	e58d3004	 str         r3, [sp, #4]
  00478	e59d30d8	 ldr         r3, [sp, #0xD8]
  0047c	e58d3000	 str         r3, [sp]
  00480	e59d10d4	 ldr         r1, [sp, #0xD4]
  00484	e59d0010	 ldr         r0, [sp, #0x10]
  00488	eb000000	 bl          __rt_udiv
  0048c	e1a03000	 mov         r3, r0
  00490	e59d2008	 ldr         r2, [sp, #8]
  00494	e59d1020	 ldr         r1, [sp, #0x20]
  00498	e59d00e0	 ldr         r0, [sp, #0xE0]
  0049c	eb000000	 bl          VRFBUpdateView

; 181  : 
; 182  : 
; 183  :     //  Initialize the surface properties for this surface type
; 184  :     m_ePixelFormat   = ePixelFormat;

  004a0	e59d30cc	 ldr         r3, [sp, #0xCC]
  004a4	e2832004	 add         r2, r3, #4
  004a8	e59d30d0	 ldr         r3, [sp, #0xD0]
  004ac	e5823000	 str         r3, [r2]

; 185  :     m_dwPixelSize    = info.dwPixelSizeBytes;

  004b0	e59d30cc	 ldr         r3, [sp, #0xCC]
  004b4	e2832008	 add         r2, r3, #8
  004b8	e59d3034	 ldr         r3, [sp, #0x34]
  004bc	e5823000	 str         r3, [r2]

; 186  :     m_eOrientation   = OMAP_SURF_ORIENTATION_STANDARD;

  004c0	e59d30cc	 ldr         r3, [sp, #0xCC]
  004c4	e283200c	 add         r2, r3, #0xC
  004c8	e3a03000	 mov         r3, #0
  004cc	e5823000	 str         r3, [r2]

; 187  :     m_dwWidth        = dwWidth;

  004d0	e59d30cc	 ldr         r3, [sp, #0xCC]
  004d4	e2832010	 add         r2, r3, #0x10
  004d8	e59d30d4	 ldr         r3, [sp, #0xD4]
  004dc	e5823000	 str         r3, [r2]

; 188  :     m_dwHeight       = dwHeight;

  004e0	e59d30cc	 ldr         r3, [sp, #0xCC]
  004e4	e2832014	 add         r2, r3, #0x14
  004e8	e59d30d8	 ldr         r3, [sp, #0xD8]
  004ec	e5823000	 str         r3, [r2]

; 189  : 
; 190  :     //  Set clipping region to be entire surface
; 191  :     SetClipping( NULL );

  004f0	e3a01000	 mov         r1, #0
  004f4	e59d30cc	 ldr         r3, [sp, #0xCC]
  004f8	e5933000	 ldr         r3, [r3]
  004fc	e2833020	 add         r3, r3, #0x20
  00500	e59d00cc	 ldr         r0, [sp, #0xCC]
  00504	e5933000	 ldr         r3, [r3]
  00508	e1a0e00f	 mov         lr, pc
  0050c	e12fff13	 bx          r3

; 192  : 
; 193  :     //  Set surface specific properties
; 194  :     m_hHeap     = (HANDLE) pSurfHeap;

  00510	e59d30cc	 ldr         r3, [sp, #0xCC]
  00514	e28320a4	 add         r2, r3, #0xA4
  00518	e59d3024	 ldr         r3, [sp, #0x24]
  0051c	e5823000	 str         r3, [r2]

; 195  :     m_hVRFB     = hVRFB;

  00520	e59d30cc	 ldr         r3, [sp, #0xCC]
  00524	e28320a8	 add         r2, r3, #0xA8
  00528	e59d30e0	 ldr         r3, [sp, #0xE0]
  0052c	e5823000	 str         r3, [r2]

; 196  :     m_hVRFBView = hVRFBView;

  00530	e59d30cc	 ldr         r3, [sp, #0xCC]
  00534	e28320ac	 add         r2, r3, #0xAC
  00538	e59d3020	 ldr         r3, [sp, #0x20]
  0053c	e5823000	 str         r3, [r2]

; 197  :     
; 198  :     g_bVRFBViewReserved[i] = TRUE;

  00540	e59d100c	 ldr         r1, [sp, #0xC]
  00544	e3a03004	 mov         r3, #4
  00548	e0020391	 mul         r2, r1, r3
  0054c	e59f3170	 ldr         r3, [pc, #0x170]
  00550	e0832002	 add         r2, r3, r2
  00554	e3a03001	 mov         r3, #1
  00558	e5823000	 str         r3, [r2]

; 199  :     m_dwViewIndex          = i;

  0055c	e59d30cc	 ldr         r3, [sp, #0xCC]
  00560	e28320b0	 add         r2, r3, #0xB0
  00564	e59d300c	 ldr         r3, [sp, #0xC]
  00568	e5823000	 str         r3, [r2]

; 200  :     m_dwWidthFactor        = dwWidthFactor;

  0056c	e59d30cc	 ldr         r3, [sp, #0xCC]
  00570	e28320b4	 add         r2, r3, #0xB4
  00574	e59d3010	 ldr         r3, [sp, #0x10]
  00578	e5823000	 str         r3, [r2]

; 201  : 
; 202  :     //  Clear out the memory
; 203  :     ptr = VirtualAddr();

  0057c	e59d30cc	 ldr         r3, [sp, #0xCC]
  00580	e5933000	 ldr         r3, [r3]
  00584	e2833004	 add         r3, r3, #4
  00588	e59d00cc	 ldr         r0, [sp, #0xCC]
  0058c	e5933000	 ldr         r3, [r3]
  00590	e1a0e00f	 mov         lr, pc
  00594	e12fff13	 bx          r3
  00598	e58d00b4	 str         r0, [sp, #0xB4]
  0059c	e59d30b4	 ldr         r3, [sp, #0xB4]
  005a0	e58d3014	 str         r3, [sp, #0x14]

; 204  :     dwStride = Stride();

  005a4	e3a01000	 mov         r1, #0
  005a8	e59d30cc	 ldr         r3, [sp, #0xCC]
  005ac	e5933000	 ldr         r3, [r3]
  005b0	e2833010	 add         r3, r3, #0x10
  005b4	e59d00cc	 ldr         r0, [sp, #0xCC]
  005b8	e5933000	 ldr         r3, [r3]
  005bc	e1a0e00f	 mov         lr, pc
  005c0	e12fff13	 bx          r3
  005c4	e58d00b8	 str         r0, [sp, #0xB8]
  005c8	e59d30b8	 ldr         r3, [sp, #0xB8]
  005cc	e58d3018	 str         r3, [sp, #0x18]

; 205  :     
; 206  :     for( i = 0; i < m_dwHeight; i++ )

  005d0	e3a03000	 mov         r3, #0
  005d4	e58d300c	 str         r3, [sp, #0xC]
  005d8	ea000002	 b           |$LN3@Allocate|
  005dc		 |$LN2@Allocate|
  005dc	e59d300c	 ldr         r3, [sp, #0xC]
  005e0	e2833001	 add         r3, r3, #1
  005e4	e58d300c	 str         r3, [sp, #0xC]
  005e8		 |$LN3@Allocate|
  005e8	e59d30cc	 ldr         r3, [sp, #0xCC]
  005ec	e2833014	 add         r3, r3, #0x14
  005f0	e59d200c	 ldr         r2, [sp, #0xC]
  005f4	e5933000	 ldr         r3, [r3]
  005f8	e1520003	 cmp         r2, r3
  005fc	2a00000e	 bcs         |$LN1@Allocate|

; 207  :     {
; 208  :         memset( ptr, 0, m_dwPixelSize*m_dwWidth);

  00600	e59d30cc	 ldr         r3, [sp, #0xCC]
  00604	e2832008	 add         r2, r3, #8
  00608	e59d30cc	 ldr         r3, [sp, #0xCC]
  0060c	e2833010	 add         r3, r3, #0x10
  00610	e5921000	 ldr         r1, [r2]
  00614	e5933000	 ldr         r3, [r3]
  00618	e0020391	 mul         r2, r1, r3
  0061c	e3a01000	 mov         r1, #0
  00620	e59d0014	 ldr         r0, [sp, #0x14]
  00624	eb000000	 bl          memset

; 209  :         ptr = (VOID*)((DWORD)ptr + dwStride);

  00628	e59d2014	 ldr         r2, [sp, #0x14]
  0062c	e59d3018	 ldr         r3, [sp, #0x18]
  00630	e0823003	 add         r3, r2, r3
  00634	e58d3014	 str         r3, [sp, #0x14]

; 210  :     }

  00638	eaffffe7	 b           |$LN2@Allocate|
  0063c		 |$LN1@Allocate|

; 211  : 
; 212  :     // Initialize variables
; 213  :     m_hRSZHandle = NULL;

  0063c	e59d30cc	 ldr         r3, [sp, #0xCC]
  00640	e2832034	 add         r2, r3, #0x34
  00644	e3a03000	 mov         r3, #0
  00648	e5823000	 str         r3, [r2]

; 214  :     memset(&m_sRSZParams,0,sizeof(RSZParams_t));      

  0064c	e3a02064	 mov         r2, #0x64
  00650	e3a01000	 mov         r1, #0
  00654	e59d30cc	 ldr         r3, [sp, #0xCC]
  00658	e2830038	 add         r0, r3, #0x38
  0065c	eb000000	 bl          memset

; 215  : 
; 216  :     DEBUGMSG(ZONE_WARNING, (L"INFO: OMAPVrfbSurface::Allocate() - Allocating VRFB View # %d\r\n", m_dwViewIndex));

  00660	e59d30cc	 ldr         r3, [sp, #0xCC]
  00664	e28330b0	 add         r3, r3, #0xB0
  00668	e5931000	 ldr         r1, [r3]
  0066c	e59f004c	 ldr         r0, [pc, #0x4C]
  00670	eb000000	 bl          NKDbgPrintfW
  00674	e3a03001	 mov         r3, #1
  00678	e58d30bc	 str         r3, [sp, #0xBC]
  0067c	ea000001	 b           |$LN35@Allocate|
  00680	e3a03000	 mov         r3, #0
  00684	e58d30bc	 str         r3, [sp, #0xBC]
  00688		 |$LN35@Allocate|
  00688		 |$LN4@Allocate|
  00688		 |$LN6@Allocate|
  00688		 |$LN8@Allocate|
  00688		 |$LN10@Allocate|
  00688		 |$cleanUp$37271|

; 217  :     
; 218  : cleanUp:        
; 219  :     //  Return
; 220  :     return (pSurfHeap != NULL);

  00688	e59d3024	 ldr         r3, [sp, #0x24]
  0068c	e3530000	 cmp         r3, #0
  00690	0a000002	 beq         |$LN36@Allocate|
  00694	e3a03001	 mov         r3, #1
  00698	e58d30c0	 str         r3, [sp, #0xC0]
  0069c	ea000001	 b           |$LN37@Allocate|
  006a0		 |$LN36@Allocate|
  006a0	e3a03000	 mov         r3, #0
  006a4	e58d30c0	 str         r3, [sp, #0xC0]
  006a8		 |$LN37@Allocate|
  006a8	e59d30c0	 ldr         r3, [sp, #0xC0]
  006ac	e58d306c	 str         r3, [sp, #0x6C]
  006b0		 |$LN22@Allocate|

; 221  : }

  006b0	e59d006c	 ldr         r0, [sp, #0x6C]
  006b4	e28dd0c4	 add         sp, sp, #0xC4
  006b8	e89d6000	 ldmia       sp, {sp, lr}
  006bc	e12fff1e	 bx          lr
  006c0		 |$LN52@Allocate|
  006c0		 |$LN53@Allocate|
  006c0	00000000	 DCD         |??_C@_1IA@NHFIFLDN@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAO?$AAM?$AAA?$AAP?$AAV?$AAr?$AAf?$AAb?$AAS?$AAu?$AAr?$AAf?$AAa?$AAc?$AAe?$AA?3?$AA?3?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$CI@|
  006c4		 |$LN54@Allocate|
  006c4	00000000	 DCD         |?g_bVRFBViewReserved@@3PAHA|
  006c8		 |$LN55@Allocate|
  006c8	00000000	 DCD         |??_C@_1EO@LAEPFMGF@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAh?$AAe?$AAa?$AAp?$AA?5?$AAm@|
  006cc		 |$LN56@Allocate|
  006cc	00000000	 DCD         |??_C@_1EK@JBCPENIJ@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAV?$AAR?$AAF?$AAB?$AA?5?$AAv?$AAi?$AAe?$AAw?$AA?5?$AAi@|
  006d0		 |$LN57@Allocate|
  006d0	00000000	 DCD         |??_C@_1FM@GFIIAPLB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAu?$AAp?$AAd?$AAa?$AAt?$AAe?$AA?5?$AAV?$AAR?$AAF?$AAB?$AA?5?$AAv?$AAi?$AAe@|
  006d4		 |$LN58@Allocate|
  006d4	00000000	 DCD         |??_C@_1EK@FAFNALME@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAA?$AAl?$AAl?$AA?5?$AAV?$AAR?$AAF?$AAB?$AA?5?$AAv?$AAi?$AAe?$AAw?$AAs?$AA?5?$AAa?$AAr?$AAe?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa@|
  006d8		 |$LN59@Allocate|
  006d8	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  006dc		 |$LN60@Allocate|
  006dc	00000000	 DCD         |??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@|
  006e0		 |$LN61@Allocate|
  006e0	00000000	 DCD         |??_C@_1LA@HPLNHDIB@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  006e4		 |$M37838|

			 ENDP  ; |?Allocate@OMAPVrfbSurface@@QAAHW4OMAP_DSS_PIXELFORMAT@@KKPAX1@Z|, OMAPVrfbSurface::Allocate

; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\dssai\heap.h

  00000			 AREA	 |.pdata|, PDATA
|$T37856| DCD	|$LN5@Address|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Address@Heap@@QAAKXZ| PROC		; Heap::Address

; 76   :     DWORD       Address() { return m_pStart; }

  00000		 |$LN5@Address|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M37853|
  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e2833008	 add         r3, r3, #8
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3000	 str         r3, [sp]
  00020	e59d0000	 ldr         r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M37854|

			 ENDP  ; |?Address@Heap@@QAAKXZ|, Heap::Address

	IMPORT	|DeviceIoControl|
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\inc\vrfb.h

  00000			 AREA	 |.pdata|, PDATA
|$T37868| DCD	|$LN7@VRFBGetVie|
	DCD	0x40003204
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |VRFBGetViewInfo| PROC

; 241  : {

  00000		 |$LN7@VRFBGetVie|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d000f	 stmdb       sp!, {r0 - r3}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd034	 sub         sp, sp, #0x34
  00010		 |$M37865|

; 242  :     DEVICE_CONTEXT_VRFB *pContext = (DEVICE_CONTEXT_VRFB *)hContext;

  00010	e59d303c	 ldr         r3, [sp, #0x3C]
  00014	e58d3014	 str         r3, [sp, #0x14]

; 243  :     BOOL                bResult = FALSE;

  00018	e3a03000	 mov         r3, #0
  0001c	e58d3010	 str         r3, [sp, #0x10]

; 244  : 
; 245  :     if( pContext->ifc.context )

  00020	e59d3014	 ldr         r3, [sp, #0x14]
  00024	e5933000	 ldr         r3, [r3]
  00028	e3530000	 cmp         r3, #0
  0002c	0a00000c	 beq         |$LN2@VRFBGetVie|

; 246  :     {
; 247  :         bResult = pContext->ifc.pfnGetViewInfo(pContext->ifc.context, hView, pInfo);

  00030	e59d2044	 ldr         r2, [sp, #0x44]
  00034	e59d1040	 ldr         r1, [sp, #0x40]
  00038	e59d3014	 ldr         r3, [sp, #0x14]
  0003c	e5930000	 ldr         r0, [r3]
  00040	e59d3014	 ldr         r3, [sp, #0x14]
  00044	e283300c	 add         r3, r3, #0xC
  00048	e5933000	 ldr         r3, [r3]
  0004c	e1a0e00f	 mov         lr, pc
  00050	e12fff13	 bx          r3
  00054	e58d002c	 str         r0, [sp, #0x2C]
  00058	e59d302c	 ldr         r3, [sp, #0x2C]
  0005c	e58d3010	 str         r3, [sp, #0x10]

; 248  :     }
; 249  :     else

  00060	ea000011	 b           |$LN1@VRFBGetVie|
  00064		 |$LN2@VRFBGetVie|

; 250  :     {
; 251  :         bResult = DeviceIoControl(pContext->hDevice, 
; 252  :                         IOCTL_VRFB_GETVIEWINFO, 
; 253  :                         &hView,
; 254  :                         sizeof(HANDLE*),
; 255  :                         pInfo,
; 256  :                         sizeof(VRFB_VIEW_INFO),
; 257  :                         NULL,
; 258  :                         NULL );

  00064	e3a03000	 mov         r3, #0
  00068	e58d300c	 str         r3, [sp, #0xC]
  0006c	e3a03000	 mov         r3, #0
  00070	e58d3008	 str         r3, [sp, #8]
  00074	e3a03040	 mov         r3, #0x40
  00078	e58d3004	 str         r3, [sp, #4]
  0007c	e59d3044	 ldr         r3, [sp, #0x44]
  00080	e58d3000	 str         r3, [sp]
  00084	e3a03004	 mov         r3, #4
  00088	e28d2040	 add         r2, sp, #0x40
  0008c	e59f1030	 ldr         r1, [pc, #0x30]
  00090	e59d0014	 ldr         r0, [sp, #0x14]
  00094	e2800024	 add         r0, r0, #0x24
  00098	e5900000	 ldr         r0, [r0]
  0009c	eb000000	 bl          DeviceIoControl
  000a0	e58d0030	 str         r0, [sp, #0x30]
  000a4	e59d3030	 ldr         r3, [sp, #0x30]
  000a8	e58d3010	 str         r3, [sp, #0x10]
  000ac		 |$LN1@VRFBGetVie|

; 259  :     }
; 260  :     
; 261  :     return bResult; 

  000ac	e59d3010	 ldr         r3, [sp, #0x10]
  000b0	e58d3028	 str         r3, [sp, #0x28]

; 262  : }

  000b4	e59d0028	 ldr         r0, [sp, #0x28]
  000b8	e28dd034	 add         sp, sp, #0x34
  000bc	e89d6000	 ldmia       sp, {sp, lr}
  000c0	e12fff1e	 bx          lr
  000c4		 |$LN8@VRFBGetVie|
  000c4		 |$LN9@VRFBGetVie|
  000c4	00221c08	 DCD         0x221c08
  000c8		 |$M37866|

			 ENDP  ; |VRFBGetViewInfo|


  00000			 AREA	 |.pdata|, PDATA
|$T37884| DCD	|$LN7@VRFBUpdate|
	DCD	0x40004104
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |VRFBUpdateView| PROC

; 294  : {

  00000		 |$LN7@VRFBUpdate|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d000f	 stmdb       sp!, {r0 - r3}
  00008	e92d5010	 stmdb       sp!, {r4, r12, lr}
  0000c	e24dd07c	 sub         sp, sp, #0x7C
  00010		 |$M37881|

; 295  :     DEVICE_CONTEXT_VRFB *pContext = (DEVICE_CONTEXT_VRFB *)hContext;

  00010	e59d3088	 ldr         r3, [sp, #0x88]
  00014	e58d3014	 str         r3, [sp, #0x14]

; 296  :     BOOL                bResult = FALSE;

  00018	e3a03000	 mov         r3, #0
  0001c	e58d3010	 str         r3, [sp, #0x10]

; 297  : 
; 298  :     if( pContext->ifc.context )

  00020	e59d3014	 ldr         r3, [sp, #0x14]
  00024	e5933000	 ldr         r3, [r3]
  00028	e3530000	 cmp         r3, #0
  0002c	0a000011	 beq         |$LN2@VRFBUpdate|

; 299  :     {
; 300  :         bResult = pContext->ifc.pfnUpdateView(pContext->ifc.context, hView, dwPixelSize, dwWidth, dwHeight, dwBufferPhysAddr);

  00030	e59d309c	 ldr         r3, [sp, #0x9C]
  00034	e58d3004	 str         r3, [sp, #4]
  00038	e59d3098	 ldr         r3, [sp, #0x98]
  0003c	e58d3000	 str         r3, [sp]
  00040	e59d3094	 ldr         r3, [sp, #0x94]
  00044	e59d2090	 ldr         r2, [sp, #0x90]
  00048	e59d108c	 ldr         r1, [sp, #0x8C]
  0004c	e59d0014	 ldr         r0, [sp, #0x14]
  00050	e5900000	 ldr         r0, [r0]
  00054	e59de014	 ldr         lr, [sp, #0x14]
  00058	e28ee014	 add         lr, lr, #0x14
  0005c	e59e4000	 ldr         r4, [lr]
  00060	e1a0e00f	 mov         lr, pc
  00064	e12fff14	 bx          r4
  00068	e58d0074	 str         r0, [sp, #0x74]
  0006c	e59d3074	 ldr         r3, [sp, #0x74]
  00070	e58d3010	 str         r3, [sp, #0x10]

; 301  :     }
; 302  :     else

  00074	ea00001b	 b           |$LN1@VRFBUpdate|
  00078		 |$LN2@VRFBUpdate|

; 303  :     {
; 304  :         VRFB_VIEW_INFO  viewInfo;
; 305  :         
; 306  :         viewInfo.hView                = hView;

  00078	e59d308c	 ldr         r3, [sp, #0x8C]
  0007c	e58d3018	 str         r3, [sp, #0x18]

; 307  :         viewInfo.dwPixelSize          = dwPixelSize;

  00080	e59d3090	 ldr         r3, [sp, #0x90]
  00084	e58d301c	 str         r3, [sp, #0x1C]

; 308  :         viewInfo.dwWidth              = dwWidth;

  00088	e59d3094	 ldr         r3, [sp, #0x94]
  0008c	e58d3024	 str         r3, [sp, #0x24]

; 309  :         viewInfo.dwHeight             = dwHeight;

  00090	e59d3098	 ldr         r3, [sp, #0x98]
  00094	e58d3028	 str         r3, [sp, #0x28]

; 310  :         viewInfo.dwPhysicalBufferAddr = dwBufferPhysAddr;

  00098	e59d309c	 ldr         r3, [sp, #0x9C]
  0009c	e58d3054	 str         r3, [sp, #0x54]

; 311  : 
; 312  :         bResult = DeviceIoControl(pContext->hDevice, 
; 313  :                         IOCTL_VRFB_UPDATEVIEW, 
; 314  :                         &viewInfo,
; 315  :                         sizeof(VRFB_VIEW_INFO),
; 316  :                         NULL,
; 317  :                         0,
; 318  :                         NULL,
; 319  :                         NULL );

  000a0	e3a03000	 mov         r3, #0
  000a4	e58d300c	 str         r3, [sp, #0xC]
  000a8	e3a03000	 mov         r3, #0
  000ac	e58d3008	 str         r3, [sp, #8]
  000b0	e3a03000	 mov         r3, #0
  000b4	e58d3004	 str         r3, [sp, #4]
  000b8	e3a03000	 mov         r3, #0
  000bc	e58d3000	 str         r3, [sp]
  000c0	e3a03040	 mov         r3, #0x40
  000c4	e28d2018	 add         r2, sp, #0x18
  000c8	e59f1030	 ldr         r1, [pc, #0x30]
  000cc	e59d0014	 ldr         r0, [sp, #0x14]
  000d0	e2800024	 add         r0, r0, #0x24
  000d4	e5900000	 ldr         r0, [r0]
  000d8	eb000000	 bl          DeviceIoControl
  000dc	e58d0078	 str         r0, [sp, #0x78]
  000e0	e59d3078	 ldr         r3, [sp, #0x78]
  000e4	e58d3010	 str         r3, [sp, #0x10]
  000e8		 |$LN1@VRFBUpdate|

; 320  :     }
; 321  :     
; 322  :     return bResult; 

  000e8	e59d3010	 ldr         r3, [sp, #0x10]
  000ec	e58d3070	 str         r3, [sp, #0x70]

; 323  : }

  000f0	e59d0070	 ldr         r0, [sp, #0x70]
  000f4	e28dd07c	 add         sp, sp, #0x7C
  000f8	e89d6010	 ldmia       sp, {r4, sp, lr}
  000fc	e12fff1e	 bx          lr
  00100		 |$LN8@VRFBUpdate|
  00100		 |$LN9@VRFBUpdate|
  00100	00221c10	 DCD         0x221c10
  00104		 |$M37882|

			 ENDP  ; |VRFBUpdateView|


  00000			 AREA	 |.pdata|, PDATA
|$T37898| DCD	|$LN7@VRFBNumDis|
	DCD	0x40002d04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |VRFBNumDisplayViews| PROC

; 326  : {

  00000		 |$LN7@VRFBNumDis|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd030	 sub         sp, sp, #0x30
  00010		 |$M37895|

; 327  :     DEVICE_CONTEXT_VRFB *pContext = (DEVICE_CONTEXT_VRFB *)hContext;

  00010	e59d3038	 ldr         r3, [sp, #0x38]
  00014	e58d3014	 str         r3, [sp, #0x14]

; 328  :     DWORD                dwResult = 0;

  00018	e3a03000	 mov         r3, #0
  0001c	e58d3010	 str         r3, [sp, #0x10]

; 329  : 
; 330  :     if( pContext->ifc.context )

  00020	e59d3014	 ldr         r3, [sp, #0x14]
  00024	e5933000	 ldr         r3, [r3]
  00028	e3530000	 cmp         r3, #0
  0002c	0a00000a	 beq         |$LN2@VRFBNumDis|

; 331  :     {
; 332  :         dwResult = pContext->ifc.pfnNumDisplayViews(pContext->ifc.context);

  00030	e59d3014	 ldr         r3, [sp, #0x14]
  00034	e5930000	 ldr         r0, [r3]
  00038	e59d3014	 ldr         r3, [sp, #0x14]
  0003c	e2833018	 add         r3, r3, #0x18
  00040	e5933000	 ldr         r3, [r3]
  00044	e1a0e00f	 mov         lr, pc
  00048	e12fff13	 bx          r3
  0004c	e58d002c	 str         r0, [sp, #0x2C]
  00050	e59d302c	 ldr         r3, [sp, #0x2C]
  00054	e58d3010	 str         r3, [sp, #0x10]

; 333  :     }
; 334  :     else

  00058	ea00000e	 b           |$LN1@VRFBNumDis|
  0005c		 |$LN2@VRFBNumDis|

; 335  :     {
; 336  :         DeviceIoControl(pContext->hDevice, 
; 337  :                         IOCTL_VRFB_NUMDISPLAYVIEWS, 
; 338  :                         NULL,
; 339  :                         0,
; 340  :                         &dwResult,
; 341  :                         sizeof(dwResult),
; 342  :                         NULL,
; 343  :                         NULL );

  0005c	e3a03000	 mov         r3, #0
  00060	e58d300c	 str         r3, [sp, #0xC]
  00064	e3a03000	 mov         r3, #0
  00068	e58d3008	 str         r3, [sp, #8]
  0006c	e3a03004	 mov         r3, #4
  00070	e58d3004	 str         r3, [sp, #4]
  00074	e28d3010	 add         r3, sp, #0x10
  00078	e58d3000	 str         r3, [sp]
  0007c	e3a03000	 mov         r3, #0
  00080	e3a02000	 mov         r2, #0
  00084	e59f1024	 ldr         r1, [pc, #0x24]
  00088	e59d0014	 ldr         r0, [sp, #0x14]
  0008c	e2800024	 add         r0, r0, #0x24
  00090	e5900000	 ldr         r0, [r0]
  00094	eb000000	 bl          DeviceIoControl
  00098		 |$LN1@VRFBNumDis|

; 344  :     }
; 345  :     
; 346  :     return dwResult; 

  00098	e59d3010	 ldr         r3, [sp, #0x10]
  0009c	e58d3028	 str         r3, [sp, #0x28]

; 347  : }

  000a0	e59d0028	 ldr         r0, [sp, #0x28]
  000a4	e28dd030	 add         sp, sp, #0x30
  000a8	e89d6000	 ldmia       sp, {sp, lr}
  000ac	e12fff1e	 bx          lr
  000b0		 |$LN8@VRFBNumDis|
  000b0		 |$LN9@VRFBNumDis|
  000b0	00221c14	 DCD         0x221c14
  000b4		 |$M37896|

			 ENDP  ; |VRFBNumDisplayViews|


  00000			 AREA	 |.pdata|, PDATA
|$T37912| DCD	|$LN7@VRFBGetDis|
	DCD	0x40002e04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |VRFBGetDisplayView| PROC

; 350  : {

  00000		 |$LN7@VRFBGetDis|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d000f	 stmdb       sp!, {r0 - r3}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd030	 sub         sp, sp, #0x30
  00010		 |$M37909|

; 351  :     DEVICE_CONTEXT_VRFB *pContext = (DEVICE_CONTEXT_VRFB *)hContext;

  00010	e59d3038	 ldr         r3, [sp, #0x38]
  00014	e58d3010	 str         r3, [sp, #0x10]

; 352  :     HANDLE              hHandle = NULL;

  00018	e3a03000	 mov         r3, #0
  0001c	e58d3014	 str         r3, [sp, #0x14]

; 353  : 
; 354  :     if( pContext->ifc.context )

  00020	e59d3010	 ldr         r3, [sp, #0x10]
  00024	e5933000	 ldr         r3, [r3]
  00028	e3530000	 cmp         r3, #0
  0002c	0a00000b	 beq         |$LN2@VRFBGetDis|

; 355  :     {
; 356  :         hHandle = pContext->ifc.pfnGetDisplayView(pContext->ifc.context, dwIndex);

  00030	e59d103c	 ldr         r1, [sp, #0x3C]
  00034	e59d3010	 ldr         r3, [sp, #0x10]
  00038	e5930000	 ldr         r0, [r3]
  0003c	e59d3010	 ldr         r3, [sp, #0x10]
  00040	e283301c	 add         r3, r3, #0x1C
  00044	e5933000	 ldr         r3, [r3]
  00048	e1a0e00f	 mov         lr, pc
  0004c	e12fff13	 bx          r3
  00050	e58d002c	 str         r0, [sp, #0x2C]
  00054	e59d302c	 ldr         r3, [sp, #0x2C]
  00058	e58d3014	 str         r3, [sp, #0x14]

; 357  :     }
; 358  :     else

  0005c	ea00000e	 b           |$LN1@VRFBGetDis|
  00060		 |$LN2@VRFBGetDis|

; 359  :     {
; 360  :         DeviceIoControl(pContext->hDevice, 
; 361  :                         IOCTL_VRFB_GETDISPLAYVIEW, 
; 362  :                         &dwIndex,
; 363  :                         sizeof(DWORD*),
; 364  :                         &hHandle,
; 365  :                         sizeof(hHandle),
; 366  :                         NULL,
; 367  :                         NULL );

  00060	e3a03000	 mov         r3, #0
  00064	e58d300c	 str         r3, [sp, #0xC]
  00068	e3a03000	 mov         r3, #0
  0006c	e58d3008	 str         r3, [sp, #8]
  00070	e3a03004	 mov         r3, #4
  00074	e58d3004	 str         r3, [sp, #4]
  00078	e28d3014	 add         r3, sp, #0x14
  0007c	e58d3000	 str         r3, [sp]
  00080	e3a03004	 mov         r3, #4
  00084	e28d203c	 add         r2, sp, #0x3C
  00088	e59f1024	 ldr         r1, [pc, #0x24]
  0008c	e59d0010	 ldr         r0, [sp, #0x10]
  00090	e2800024	 add         r0, r0, #0x24
  00094	e5900000	 ldr         r0, [r0]
  00098	eb000000	 bl          DeviceIoControl
  0009c		 |$LN1@VRFBGetDis|

; 368  :     }
; 369  :     
; 370  :     return hHandle; 

  0009c	e59d3014	 ldr         r3, [sp, #0x14]
  000a0	e58d3028	 str         r3, [sp, #0x28]

; 371  : }

  000a4	e59d0028	 ldr         r0, [sp, #0x28]
  000a8	e28dd030	 add         sp, sp, #0x30
  000ac	e89d6000	 ldmia       sp, {sp, lr}
  000b0	e12fff1e	 bx          lr
  000b4		 |$LN8@VRFBGetDis|
  000b4		 |$LN9@VRFBGetDis|
  000b4	00221c18	 DCD         0x221c18
  000b8		 |$M37910|

			 ENDP  ; |VRFBGetDisplayView|


  00018			 AREA	 |.pdata|, PDATA
|$T37922| DCD	|$LN7@VirtualAdd|
	DCD	0x40003104
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\dssai\surfmgr_vrfb.cpp

  006e4			 AREA	 |.text|, CODE, ARM

  006e4		 |?VirtualAddr@OMAPVrfbSurface@@UAAPAXXZ| PROC ; OMAPVrfbSurface::VirtualAddr

; 227  : {

  006e4		 |$LN7@VirtualAdd|
  006e4	e1a0c00d	 mov         r12, sp
  006e8	e92d0001	 stmdb       sp!, {r0}
  006ec	e92d5000	 stmdb       sp!, {r12, lr}
  006f0	e24dd048	 sub         sp, sp, #0x48
  006f4		 |$M37919|

; 228  :     VRFB_VIEW_INFO  info;      
; 229  : 
; 230  :     if ((m_bUseResizer) && (m_eSurfaceType == OMAP_SURFACE_NORMAL) && (m_pAssocSurface))

  006f4	e59d3050	 ldr         r3, [sp, #0x50]
  006f8	e2833030	 add         r3, r3, #0x30
  006fc	e5933000	 ldr         r3, [r3]
  00700	e3530000	 cmp         r3, #0
  00704	0a000019	 beq         |$LN2@VirtualAdd|
  00708	e59d3050	 ldr         r3, [sp, #0x50]
  0070c	e283309c	 add         r3, r3, #0x9C
  00710	e5933000	 ldr         r3, [r3]
  00714	e3530000	 cmp         r3, #0
  00718	1a000014	 bne         |$LN2@VirtualAdd|
  0071c	e59d3050	 ldr         r3, [sp, #0x50]
  00720	e28330a0	 add         r3, r3, #0xA0
  00724	e5933000	 ldr         r3, [r3]
  00728	e3530000	 cmp         r3, #0
  0072c	0a00000f	 beq         |$LN2@VirtualAdd|

; 231  :         return m_pAssocSurface->VirtualAddr();

  00730	e59d3050	 ldr         r3, [sp, #0x50]
  00734	e28330a0	 add         r3, r3, #0xA0
  00738	e5932000	 ldr         r2, [r3]
  0073c	e59d3050	 ldr         r3, [sp, #0x50]
  00740	e28330a0	 add         r3, r3, #0xA0
  00744	e5930000	 ldr         r0, [r3]
  00748	e5923000	 ldr         r3, [r2]
  0074c	e2833004	 add         r3, r3, #4
  00750	e5933000	 ldr         r3, [r3]
  00754	e1a0e00f	 mov         lr, pc
  00758	e12fff13	 bx          r3
  0075c	e58d0044	 str         r0, [sp, #0x44]
  00760	e59d3044	 ldr         r3, [sp, #0x44]
  00764	e58d3040	 str         r3, [sp, #0x40]
  00768	ea00000a	 b           |$LN3@VirtualAdd|

; 232  :     else

  0076c	ea000009	 b           |$LN1@VirtualAdd|
  00770		 |$LN2@VirtualAdd|

; 233  :     {
; 234  :         //  Get virtual address of VRFB view
; 235  :         VRFBGetViewInfo( m_hVRFB, m_hVRFBView, &info );

  00770	e28d2000	 add         r2, sp, #0
  00774	e59d3050	 ldr         r3, [sp, #0x50]
  00778	e28330ac	 add         r3, r3, #0xAC
  0077c	e5931000	 ldr         r1, [r3]
  00780	e59d3050	 ldr         r3, [sp, #0x50]
  00784	e28330a8	 add         r3, r3, #0xA8
  00788	e5930000	 ldr         r0, [r3]
  0078c	eb000000	 bl          VRFBGetViewInfo

; 236  :         return (VOID*) info.dwVirtualAddr;

  00790	e59d3030	 ldr         r3, [sp, #0x30]
  00794	e58d3040	 str         r3, [sp, #0x40]
  00798		 |$LN1@VirtualAdd|
  00798		 |$LN3@VirtualAdd|

; 237  :     }
; 238  : }

  00798	e59d0040	 ldr         r0, [sp, #0x40]
  0079c	e28dd048	 add         sp, sp, #0x48
  007a0	e89d6000	 ldmia       sp, {sp, lr}
  007a4	e12fff1e	 bx          lr
  007a8		 |$M37920|

			 ENDP  ; |?VirtualAddr@OMAPVrfbSurface@@UAAPAXXZ|, OMAPVrfbSurface::VirtualAddr


  00020			 AREA	 |.pdata|, PDATA
|$T37931| DCD	|$LN13@Width|
	DCD	0x40004404
; Function compile flags: /Odtp

  007a8			 AREA	 |.text|, CODE, ARM

  007a8		 |?Width@OMAPVrfbSurface@@UAAKW4OMAP_DSS_ROTATION@@@Z| PROC ; OMAPVrfbSurface::Width

; 246  : {

  007a8		 |$LN13@Width|
  007a8	e1a0c00d	 mov         r12, sp
  007ac	e92d0003	 stmdb       sp!, {r0, r1}
  007b0	e92d5000	 stmdb       sp!, {r12, lr}
  007b4	e24dd010	 sub         sp, sp, #0x10
  007b8		 |$M37928|

; 247  :     DWORD   dwWidth;
; 248  :     
; 249  :     //  Return the surface width depending on the rotation angle
; 250  :     switch( eRotation )

  007b8	e59d301c	 ldr         r3, [sp, #0x1C]
  007bc	e58d3008	 str         r3, [sp, #8]
  007c0	e59d3008	 ldr         r3, [sp, #8]
  007c4	e35300b4	 cmp         r3, #0xB4
  007c8	ca000009	 bgt         |$LN10@Width|
  007cc	e59d3008	 ldr         r3, [sp, #8]
  007d0	e35300b4	 cmp         r3, #0xB4
  007d4	0a00000c	 beq         |$LN3@Width|
  007d8	e59d3008	 ldr         r3, [sp, #8]
  007dc	e3530000	 cmp         r3, #0
  007e0	0a000009	 beq         |$LN3@Width|
  007e4	e59d3008	 ldr         r3, [sp, #8]
  007e8	e353005a	 cmp         r3, #0x5A
  007ec	0a00000f	 beq         |$LN2@Width|
  007f0	ea000017	 b           |$LN1@Width|
  007f4		 |$LN10@Width|
  007f4	e59d2008	 ldr         r2, [sp, #8]
  007f8	e3a03c01	 mov         r3, #1, 24
  007fc	e383300e	 orr         r3, r3, #0xE
  00800	e1520003	 cmp         r2, r3
  00804	0a000009	 beq         |$LN2@Width|
  00808	ea000011	 b           |$LN1@Width|
  0080c		 |$LN3@Width|

; 251  :     {
; 252  :         case OMAP_DSS_ROTATION_0:
; 253  :         case OMAP_DSS_ROTATION_180:
; 254  :             //  Normal
; 255  :             dwWidth = m_dwWidth/m_dwHorizScale;

  0080c	e59d3018	 ldr         r3, [sp, #0x18]
  00810	e2832010	 add         r2, r3, #0x10
  00814	e59d3018	 ldr         r3, [sp, #0x18]
  00818	e2833028	 add         r3, r3, #0x28
  0081c	e5921000	 ldr         r1, [r2]
  00820	e5930000	 ldr         r0, [r3]
  00824	eb000000	 bl          __rt_udiv
  00828	e58d0000	 str         r0, [sp]

; 256  :             break;

  0082c	ea000018	 b           |$LN4@Width|
  00830		 |$LN2@Width|

; 257  :             
; 258  :         case OMAP_DSS_ROTATION_90:
; 259  :         case OMAP_DSS_ROTATION_270:
; 260  :             //  Rotated
; 261  :             dwWidth = m_dwHeight/m_dwVertScale;

  00830	e59d3018	 ldr         r3, [sp, #0x18]
  00834	e2832014	 add         r2, r3, #0x14
  00838	e59d3018	 ldr         r3, [sp, #0x18]
  0083c	e283302c	 add         r3, r3, #0x2C
  00840	e5921000	 ldr         r1, [r2]
  00844	e5930000	 ldr         r0, [r3]
  00848	eb000000	 bl          __rt_udiv
  0084c	e58d0000	 str         r0, [sp]

; 262  :             break;

  00850	ea00000f	 b           |$LN4@Width|
  00854		 |$LN1@Width|

; 263  : 
; 264  :         default:
; 265  :             ASSERT(0);

  00854	ea000002	 b           |$LN8@Width|
  00858	e3a03001	 mov         r3, #1
  0085c	e58d300c	 str         r3, [sp, #0xC]
  00860	ea000008	 b           |$LN9@Width|
  00864		 |$LN8@Width|
  00864	e3a03c01	 mov         r3, #1, 24
  00868	e3833009	 orr         r3, r3, #9
  0086c	e59f2040	 ldr         r2, [pc, #0x40]
  00870	e59f1038	 ldr         r1, [pc, #0x38]
  00874	e59f0030	 ldr         r0, [pc, #0x30]
  00878	eb000000	 bl          NKDbgPrintfW
  0087c	e6000010	 __debugbreak_ce
  00880	e3a03000	 mov         r3, #0
  00884	e58d300c	 str         r3, [sp, #0xC]
  00888		 |$LN9@Width|

; 266  :             return 0;

  00888	e3a03000	 mov         r3, #0
  0088c	e58d3004	 str         r3, [sp, #4]
  00890	ea000001	 b           |$LN6@Width|
  00894		 |$LN4@Width|

; 267  :     }
; 268  :     
; 269  :     //  Return value
; 270  :     return dwWidth;

  00894	e59d3000	 ldr         r3, [sp]
  00898	e58d3004	 str         r3, [sp, #4]
  0089c		 |$LN6@Width|

; 271  : }

  0089c	e59d0004	 ldr         r0, [sp, #4]
  008a0	e28dd010	 add         sp, sp, #0x10
  008a4	e89d6000	 ldmia       sp, {sp, lr}
  008a8	e12fff1e	 bx          lr
  008ac		 |$LN14@Width|
  008ac		 |$LN15@Width|
  008ac	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  008b0		 |$LN16@Width|
  008b0	00000000	 DCD         |??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@|
  008b4		 |$LN17@Width|
  008b4	00000000	 DCD         |??_C@_1LA@HPLNHDIB@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  008b8		 |$M37929|

			 ENDP  ; |?Width@OMAPVrfbSurface@@UAAKW4OMAP_DSS_ROTATION@@@Z|, OMAPVrfbSurface::Width


  00028			 AREA	 |.pdata|, PDATA
|$T37944| DCD	|$LN13@Height|
	DCD	0x40004404
; Function compile flags: /Odtp

  008b8			 AREA	 |.text|, CODE, ARM

  008b8		 |?Height@OMAPVrfbSurface@@UAAKW4OMAP_DSS_ROTATION@@@Z| PROC ; OMAPVrfbSurface::Height

; 278  : {

  008b8		 |$LN13@Height|
  008b8	e1a0c00d	 mov         r12, sp
  008bc	e92d0003	 stmdb       sp!, {r0, r1}
  008c0	e92d5000	 stmdb       sp!, {r12, lr}
  008c4	e24dd010	 sub         sp, sp, #0x10
  008c8		 |$M37941|

; 279  :     DWORD   dwHeight;
; 280  :     
; 281  :     //  Return the surface height depending on the rotation angle
; 282  :     switch( eRotation )

  008c8	e59d301c	 ldr         r3, [sp, #0x1C]
  008cc	e58d3008	 str         r3, [sp, #8]
  008d0	e59d3008	 ldr         r3, [sp, #8]
  008d4	e35300b4	 cmp         r3, #0xB4
  008d8	ca000009	 bgt         |$LN10@Height|
  008dc	e59d3008	 ldr         r3, [sp, #8]
  008e0	e35300b4	 cmp         r3, #0xB4
  008e4	0a00000c	 beq         |$LN3@Height|
  008e8	e59d3008	 ldr         r3, [sp, #8]
  008ec	e3530000	 cmp         r3, #0
  008f0	0a000009	 beq         |$LN3@Height|
  008f4	e59d3008	 ldr         r3, [sp, #8]
  008f8	e353005a	 cmp         r3, #0x5A
  008fc	0a00000f	 beq         |$LN2@Height|
  00900	ea000017	 b           |$LN1@Height|
  00904		 |$LN10@Height|
  00904	e59d2008	 ldr         r2, [sp, #8]
  00908	e3a03c01	 mov         r3, #1, 24
  0090c	e383300e	 orr         r3, r3, #0xE
  00910	e1520003	 cmp         r2, r3
  00914	0a000009	 beq         |$LN2@Height|
  00918	ea000011	 b           |$LN1@Height|
  0091c		 |$LN3@Height|

; 283  :     {
; 284  :         case OMAP_DSS_ROTATION_0:
; 285  :         case OMAP_DSS_ROTATION_180:
; 286  :             //  Normal
; 287  :             dwHeight = m_dwHeight/m_dwVertScale;

  0091c	e59d3018	 ldr         r3, [sp, #0x18]
  00920	e2832014	 add         r2, r3, #0x14
  00924	e59d3018	 ldr         r3, [sp, #0x18]
  00928	e283302c	 add         r3, r3, #0x2C
  0092c	e5921000	 ldr         r1, [r2]
  00930	e5930000	 ldr         r0, [r3]
  00934	eb000000	 bl          __rt_udiv
  00938	e58d0000	 str         r0, [sp]

; 288  :             break;

  0093c	ea000018	 b           |$LN4@Height|
  00940		 |$LN2@Height|

; 289  :             
; 290  :         case OMAP_DSS_ROTATION_90:
; 291  :         case OMAP_DSS_ROTATION_270:
; 292  :             //  Rotated
; 293  :             dwHeight = m_dwWidth/m_dwHorizScale;

  00940	e59d3018	 ldr         r3, [sp, #0x18]
  00944	e2832010	 add         r2, r3, #0x10
  00948	e59d3018	 ldr         r3, [sp, #0x18]
  0094c	e2833028	 add         r3, r3, #0x28
  00950	e5921000	 ldr         r1, [r2]
  00954	e5930000	 ldr         r0, [r3]
  00958	eb000000	 bl          __rt_udiv
  0095c	e58d0000	 str         r0, [sp]

; 294  :             break;

  00960	ea00000f	 b           |$LN4@Height|
  00964		 |$LN1@Height|

; 295  : 
; 296  :         default:
; 297  :             ASSERT(0);

  00964	ea000002	 b           |$LN8@Height|
  00968	e3a03001	 mov         r3, #1
  0096c	e58d300c	 str         r3, [sp, #0xC]
  00970	ea000008	 b           |$LN9@Height|
  00974		 |$LN8@Height|
  00974	e3a03c01	 mov         r3, #1, 24
  00978	e3833029	 orr         r3, r3, #0x29
  0097c	e59f2040	 ldr         r2, [pc, #0x40]
  00980	e59f1038	 ldr         r1, [pc, #0x38]
  00984	e59f0030	 ldr         r0, [pc, #0x30]
  00988	eb000000	 bl          NKDbgPrintfW
  0098c	e6000010	 __debugbreak_ce
  00990	e3a03000	 mov         r3, #0
  00994	e58d300c	 str         r3, [sp, #0xC]
  00998		 |$LN9@Height|

; 298  :             return 0;

  00998	e3a03000	 mov         r3, #0
  0099c	e58d3004	 str         r3, [sp, #4]
  009a0	ea000001	 b           |$LN6@Height|
  009a4		 |$LN4@Height|

; 299  :     }
; 300  :     
; 301  :     //  Return value
; 302  :     return dwHeight;

  009a4	e59d3000	 ldr         r3, [sp]
  009a8	e58d3004	 str         r3, [sp, #4]
  009ac		 |$LN6@Height|

; 303  : }

  009ac	e59d0004	 ldr         r0, [sp, #4]
  009b0	e28dd010	 add         sp, sp, #0x10
  009b4	e89d6000	 ldmia       sp, {sp, lr}
  009b8	e12fff1e	 bx          lr
  009bc		 |$LN14@Height|
  009bc		 |$LN15@Height|
  009bc	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  009c0		 |$LN16@Height|
  009c0	00000000	 DCD         |??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@|
  009c4		 |$LN17@Height|
  009c4	00000000	 DCD         |??_C@_1LA@HPLNHDIB@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  009c8		 |$M37942|

			 ENDP  ; |?Height@OMAPVrfbSurface@@UAAKW4OMAP_DSS_ROTATION@@@Z|, OMAPVrfbSurface::Height

	EXPORT	|VRFBGetDisplayViewInfo|

  00030			 AREA	 |.pdata|, PDATA
|$T37958| DCD	|$LN15@Stride|
	DCD	0x40005c04
; Function compile flags: /Odtp

  009c8			 AREA	 |.text|, CODE, ARM

  009c8		 |?Stride@OMAPVrfbSurface@@UAAKW4OMAP_DSS_ROTATION@@@Z| PROC ; OMAPVrfbSurface::Stride

; 310  : {

  009c8		 |$LN15@Stride|
  009c8	e1a0c00d	 mov         r12, sp
  009cc	e92d0003	 stmdb       sp!, {r0, r1}
  009d0	e92d5000	 stmdb       sp!, {r12, lr}
  009d4	e24dd05c	 sub         sp, sp, #0x5C
  009d8		 |$M37955|

; 311  :     DWORD           dwRotation;
; 312  :     VRFB_VIEW_INFO  info;        
; 313  :     DWORD           dwScaleFactor;        
; 314  : 
; 315  :     //  Translate DSS rotation enum to VRFB enum
; 316  :     switch( eRotation )

  009d8	e59d3068	 ldr         r3, [sp, #0x68]
  009dc	e58d3054	 str         r3, [sp, #0x54]
  009e0	e59d3054	 ldr         r3, [sp, #0x54]
  009e4	e35300b4	 cmp         r3, #0xB4
  009e8	ca000009	 bgt         |$LN12@Stride|
  009ec	e59d3054	 ldr         r3, [sp, #0x54]
  009f0	e35300b4	 cmp         r3, #0xB4
  009f4	0a00001a	 beq         |$LN3@Stride|
  009f8	e59d3054	 ldr         r3, [sp, #0x54]
  009fc	e3530000	 cmp         r3, #0
  00a00	0a000009	 beq         |$LN5@Stride|
  00a04	e59d3054	 ldr         r3, [sp, #0x54]
  00a08	e353005a	 cmp         r3, #0x5A
  00a0c	0a00000d	 beq         |$LN4@Stride|
  00a10	ea000022	 b           |$LN1@Stride|
  00a14		 |$LN12@Stride|
  00a14	e59d2054	 ldr         r2, [sp, #0x54]
  00a18	e3a03c01	 mov         r3, #1, 24
  00a1c	e383300e	 orr         r3, r3, #0xE
  00a20	e1520003	 cmp         r2, r3
  00a24	0a000015	 beq         |$LN2@Stride|
  00a28	ea00001c	 b           |$LN1@Stride|
  00a2c		 |$LN5@Stride|

; 317  :     {   
; 318  :         case OMAP_DSS_ROTATION_0:
; 319  :             dwRotation = VRFB_ROTATE_ANGLE_0;

  00a2c	e3a03000	 mov         r3, #0
  00a30	e58d3048	 str         r3, [sp, #0x48]

; 320  :             dwScaleFactor = m_dwHorizScale;

  00a34	e59d3064	 ldr         r3, [sp, #0x64]
  00a38	e2833028	 add         r3, r3, #0x28
  00a3c	e5933000	 ldr         r3, [r3]
  00a40	e58d3004	 str         r3, [sp, #4]

; 321  :             break;

  00a44	ea000025	 b           |$LN6@Stride|
  00a48		 |$LN4@Stride|

; 322  : 
; 323  :         case OMAP_DSS_ROTATION_90:
; 324  :             dwRotation = VRFB_ROTATE_ANGLE_90;

  00a48	e3a0305a	 mov         r3, #0x5A
  00a4c	e58d3048	 str         r3, [sp, #0x48]

; 325  :             dwScaleFactor = m_dwVertScale;

  00a50	e59d3064	 ldr         r3, [sp, #0x64]
  00a54	e283302c	 add         r3, r3, #0x2C
  00a58	e5933000	 ldr         r3, [r3]
  00a5c	e58d3004	 str         r3, [sp, #4]

; 326  :             break;

  00a60	ea00001e	 b           |$LN6@Stride|
  00a64		 |$LN3@Stride|

; 327  : 
; 328  :         case OMAP_DSS_ROTATION_180:
; 329  :             dwRotation = VRFB_ROTATE_ANGLE_180;

  00a64	e3a030b4	 mov         r3, #0xB4
  00a68	e58d3048	 str         r3, [sp, #0x48]

; 330  :             dwScaleFactor = m_dwHorizScale;

  00a6c	e59d3064	 ldr         r3, [sp, #0x64]
  00a70	e2833028	 add         r3, r3, #0x28
  00a74	e5933000	 ldr         r3, [r3]
  00a78	e58d3004	 str         r3, [sp, #4]

; 331  :             break;

  00a7c	ea000017	 b           |$LN6@Stride|
  00a80		 |$LN2@Stride|

; 332  :             
; 333  :         case OMAP_DSS_ROTATION_270:
; 334  :             dwRotation = VRFB_ROTATE_ANGLE_270;

  00a80	e3a03c01	 mov         r3, #1, 24
  00a84	e383300e	 orr         r3, r3, #0xE
  00a88	e58d3048	 str         r3, [sp, #0x48]

; 335  :             dwScaleFactor = m_dwVertScale;

  00a8c	e59d3064	 ldr         r3, [sp, #0x64]
  00a90	e283302c	 add         r3, r3, #0x2C
  00a94	e5933000	 ldr         r3, [r3]
  00a98	e58d3004	 str         r3, [sp, #4]

; 336  :             break;

  00a9c	ea00000f	 b           |$LN6@Stride|
  00aa0		 |$LN1@Stride|

; 337  : 
; 338  :         default:
; 339  :             ASSERT(0);

  00aa0	ea000002	 b           |$LN10@Stride|
  00aa4	e3a03001	 mov         r3, #1
  00aa8	e58d3058	 str         r3, [sp, #0x58]
  00aac	ea000008	 b           |$LN11@Stride|
  00ab0		 |$LN10@Stride|
  00ab0	e3a03c01	 mov         r3, #1, 24
  00ab4	e3833053	 orr         r3, r3, #0x53
  00ab8	e59f2074	 ldr         r2, [pc, #0x74]
  00abc	e59f106c	 ldr         r1, [pc, #0x6C]
  00ac0	e59f0064	 ldr         r0, [pc, #0x64]
  00ac4	eb000000	 bl          NKDbgPrintfW
  00ac8	e6000010	 __debugbreak_ce
  00acc	e3a03000	 mov         r3, #0
  00ad0	e58d3058	 str         r3, [sp, #0x58]
  00ad4		 |$LN11@Stride|

; 340  :             return 0;

  00ad4	e3a03000	 mov         r3, #0
  00ad8	e58d304c	 str         r3, [sp, #0x4C]
  00adc	ea00000e	 b           |$LN8@Stride|
  00ae0		 |$LN6@Stride|

; 341  :     }
; 342  :     
; 343  :     //  Get stride of VRFB display view
; 344  :     VRFBGetDisplayViewInfo( m_hVRFB, m_dwViewIndex, dwRotation, FALSE, &info );

  00ae0	e28d3008	 add         r3, sp, #8
  00ae4	e58d3000	 str         r3, [sp]
  00ae8	e3a03000	 mov         r3, #0
  00aec	e59d2048	 ldr         r2, [sp, #0x48]
  00af0	e59d1064	 ldr         r1, [sp, #0x64]
  00af4	e28110b0	 add         r1, r1, #0xB0
  00af8	e5911000	 ldr         r1, [r1]
  00afc	e59d0064	 ldr         r0, [sp, #0x64]
  00b00	e28000a8	 add         r0, r0, #0xA8
  00b04	e5900000	 ldr         r0, [r0]
  00b08	eb000000	 bl          VRFBGetDisplayViewInfo

; 345  :     return (info.dwImageStride * dwScaleFactor);

  00b0c	e59d202c	 ldr         r2, [sp, #0x2C]
  00b10	e59d3004	 ldr         r3, [sp, #4]
  00b14	e0030392	 mul         r3, r2, r3
  00b18	e58d304c	 str         r3, [sp, #0x4C]
  00b1c		 |$LN8@Stride|

; 346  : }

  00b1c	e59d004c	 ldr         r0, [sp, #0x4C]
  00b20	e28dd05c	 add         sp, sp, #0x5C
  00b24	e89d6000	 ldmia       sp, {sp, lr}
  00b28	e12fff1e	 bx          lr
  00b2c		 |$LN16@Stride|
  00b2c		 |$LN17@Stride|
  00b2c	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  00b30		 |$LN18@Stride|
  00b30	00000000	 DCD         |??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@|
  00b34		 |$LN19@Stride|
  00b34	00000000	 DCD         |??_C@_1LA@HPLNHDIB@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  00b38		 |$M37956|

			 ENDP  ; |?Stride@OMAPVrfbSurface@@UAAKW4OMAP_DSS_ROTATION@@@Z|, OMAPVrfbSurface::Stride

; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\inc\vrfb.h

  00000			 AREA	 |.pdata|, PDATA
|$T37973| DCD	|$LN7@VRFBGetDis@2|
	DCD	0x40003b04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |VRFBGetDisplayViewInfo| PROC

; 374  : {

  00000		 |$LN7@VRFBGetDis@2|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d000f	 stmdb       sp!, {r0 - r3}
  00008	e92d5010	 stmdb       sp!, {r4, r12, lr}
  0000c	e24dd044	 sub         sp, sp, #0x44
  00010		 |$M37970|

; 375  :     DEVICE_CONTEXT_VRFB *pContext = (DEVICE_CONTEXT_VRFB *)hContext;

  00010	e59d3050	 ldr         r3, [sp, #0x50]
  00014	e58d3014	 str         r3, [sp, #0x14]

; 376  :     BOOL                bResult = FALSE;

  00018	e3a03000	 mov         r3, #0
  0001c	e58d3010	 str         r3, [sp, #0x10]

; 377  : 
; 378  :     if( pContext->ifc.context )

  00020	e59d3014	 ldr         r3, [sp, #0x14]
  00024	e5933000	 ldr         r3, [r3]
  00028	e3530000	 cmp         r3, #0
  0002c	0a00000f	 beq         |$LN2@VRFBGetDis@2|

; 379  :     {
; 380  :         bResult = pContext->ifc.pfnGetDisplayViewInfo(pContext->ifc.context, dwIndex, dwRotateAngle, bMirror, pInfo);

  00030	e59d3060	 ldr         r3, [sp, #0x60]
  00034	e58d3000	 str         r3, [sp]
  00038	e59d305c	 ldr         r3, [sp, #0x5C]
  0003c	e59d2058	 ldr         r2, [sp, #0x58]
  00040	e59d1054	 ldr         r1, [sp, #0x54]
  00044	e59d0014	 ldr         r0, [sp, #0x14]
  00048	e5900000	 ldr         r0, [r0]
  0004c	e59de014	 ldr         lr, [sp, #0x14]
  00050	e28ee020	 add         lr, lr, #0x20
  00054	e59e4000	 ldr         r4, [lr]
  00058	e1a0e00f	 mov         lr, pc
  0005c	e12fff14	 bx          r4
  00060	e58d003c	 str         r0, [sp, #0x3C]
  00064	e59d303c	 ldr         r3, [sp, #0x3C]
  00068	e58d3010	 str         r3, [sp, #0x10]

; 381  :     }
; 382  :     else

  0006c	ea000017	 b           |$LN1@VRFBGetDis@2|
  00070		 |$LN2@VRFBGetDis@2|

; 383  :     {
; 384  :         IOCTL_VRFB_GETDISPLAYVIEWINFO_IN    infoIn;
; 385  :         
; 386  :         infoIn.dwIndex          = dwIndex;

  00070	e59d3054	 ldr         r3, [sp, #0x54]
  00074	e58d3018	 str         r3, [sp, #0x18]

; 387  :         infoIn.dwRotateAngle    = dwRotateAngle;

  00078	e59d3058	 ldr         r3, [sp, #0x58]
  0007c	e58d301c	 str         r3, [sp, #0x1C]

; 388  :         infoIn.bMirror          = bMirror;

  00080	e59d305c	 ldr         r3, [sp, #0x5C]
  00084	e58d3020	 str         r3, [sp, #0x20]

; 389  :             
; 390  :         bResult = DeviceIoControl(pContext->hDevice, 
; 391  :                         IOCTL_VRFB_GETDISPLAYVIEWINFO, 
; 392  :                         &infoIn,
; 393  :                         sizeof(infoIn),
; 394  :                         pInfo,
; 395  :                         sizeof(VRFB_VIEW_INFO),
; 396  :                         NULL,
; 397  :                         NULL );

  00088	e3a03000	 mov         r3, #0
  0008c	e58d300c	 str         r3, [sp, #0xC]
  00090	e3a03000	 mov         r3, #0
  00094	e58d3008	 str         r3, [sp, #8]
  00098	e3a03040	 mov         r3, #0x40
  0009c	e58d3004	 str         r3, [sp, #4]
  000a0	e59d3060	 ldr         r3, [sp, #0x60]
  000a4	e58d3000	 str         r3, [sp]
  000a8	e3a0300c	 mov         r3, #0xC
  000ac	e28d2018	 add         r2, sp, #0x18
  000b0	e59f1030	 ldr         r1, [pc, #0x30]
  000b4	e59d0014	 ldr         r0, [sp, #0x14]
  000b8	e2800024	 add         r0, r0, #0x24
  000bc	e5900000	 ldr         r0, [r0]
  000c0	eb000000	 bl          DeviceIoControl
  000c4	e58d0040	 str         r0, [sp, #0x40]
  000c8	e59d3040	 ldr         r3, [sp, #0x40]
  000cc	e58d3010	 str         r3, [sp, #0x10]
  000d0		 |$LN1@VRFBGetDis@2|

; 398  :     }
; 399  :     
; 400  :     return bResult; 

  000d0	e59d3010	 ldr         r3, [sp, #0x10]
  000d4	e58d3038	 str         r3, [sp, #0x38]

; 401  : }

  000d8	e59d0038	 ldr         r0, [sp, #0x38]
  000dc	e28dd044	 add         sp, sp, #0x44
  000e0	e89d6010	 ldmia       sp, {r4, sp, lr}
  000e4	e12fff1e	 bx          lr
  000e8		 |$LN8@VRFBGetDis@2|
  000e8		 |$LN9@VRFBGetDis@2|
  000e8	00221c1c	 DCD         0x221c1c
  000ec		 |$M37971|

			 ENDP  ; |VRFBGetDisplayViewInfo|


  00038			 AREA	 |.pdata|, PDATA
|$T37988| DCD	|$LN33@PhysicalAd|
	DCD	0x40014604
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\dssai\surfmgr_vrfb.cpp

  00b38			 AREA	 |.text|, CODE, ARM

  00b38		 |?PhysicalAddr@OMAPVrfbSurface@@UAAKW4OMAP_DSS_ROTATION@@HW4OMAP_ASSOC_SURF_USAGE@@@Z| PROC ; OMAPVrfbSurface::PhysicalAddr

; 355  : {

  00b38		 |$LN33@PhysicalAd|
  00b38	e1a0c00d	 mov         r12, sp
  00b3c	e92d000f	 stmdb       sp!, {r0 - r3}
  00b40	e92d5010	 stmdb       sp!, {r4, r12, lr}
  00b44	e24dd068	 sub         sp, sp, #0x68
  00b48		 |$M37985|

; 356  :     DWORD           dwRotation;
; 357  :     VRFB_VIEW_INFO  info;                
; 358  :     INT             iClipOffsetX = 0,

  00b48	e3a03000	 mov         r3, #0
  00b4c	e58d3008	 str         r3, [sp, #8]

; 359  :                     iClipOffsetY = 0;

  00b50	e3a03000	 mov         r3, #0
  00b54	e58d3004	 str         r3, [sp, #4]

; 360  : 
; 361  :      if ((((eUseAssocSurface==OMAP_ASSOC_SURF_DEFAULT) && (m_bUseResizer)) ||
; 362  :           ( eUseAssocSurface==OMAP_ASSOC_SURF_FORCE_ON )                     ) &&
; 363  :         (m_pAssocSurface))

  00b58	e59d3080	 ldr         r3, [sp, #0x80]
  00b5c	e3530000	 cmp         r3, #0
  00b60	1a000004	 bne         |$LN22@PhysicalAd|
  00b64	e59d3074	 ldr         r3, [sp, #0x74]
  00b68	e2833030	 add         r3, r3, #0x30
  00b6c	e5933000	 ldr         r3, [r3]
  00b70	e3530000	 cmp         r3, #0
  00b74	1a000002	 bne         |$LN23@PhysicalAd|
  00b78		 |$LN22@PhysicalAd|
  00b78	e59d3080	 ldr         r3, [sp, #0x80]
  00b7c	e3530002	 cmp         r3, #2
  00b80	1a000017	 bne         |$LN24@PhysicalAd|
  00b84		 |$LN23@PhysicalAd|
  00b84	e59d3074	 ldr         r3, [sp, #0x74]
  00b88	e28330a0	 add         r3, r3, #0xA0
  00b8c	e5933000	 ldr         r3, [r3]
  00b90	e3530000	 cmp         r3, #0
  00b94	0a000012	 beq         |$LN24@PhysicalAd|

; 364  :         
; 365  :         return m_pAssocSurface->PhysicalAddr(eRotation,bMirror,OMAP_ASSOC_SURF_FORCE_OFF);        

  00b98	e3a03001	 mov         r3, #1
  00b9c	e59d207c	 ldr         r2, [sp, #0x7C]
  00ba0	e59d1078	 ldr         r1, [sp, #0x78]
  00ba4	e59d0074	 ldr         r0, [sp, #0x74]
  00ba8	e28000a0	 add         r0, r0, #0xA0
  00bac	e590e000	 ldr         lr, [r0]
  00bb0	e59d0074	 ldr         r0, [sp, #0x74]
  00bb4	e28000a0	 add         r0, r0, #0xA0
  00bb8	e5904000	 ldr         r4, [r0]
  00bbc	e59e0000	 ldr         r0, [lr]
  00bc0	e280e014	 add         lr, r0, #0x14
  00bc4	e1a00004	 mov         r0, r4
  00bc8	e59e4000	 ldr         r4, [lr]
  00bcc	e1a0e00f	 mov         lr, pc
  00bd0	e12fff14	 bx          r4
  00bd4	e58d0058	 str         r0, [sp, #0x58]
  00bd8	e59d3058	 ldr         r3, [sp, #0x58]
  00bdc	e58d3050	 str         r3, [sp, #0x50]
  00be0	ea000113	 b           |$LN25@PhysicalAd|
  00be4		 |$LN24@PhysicalAd|

; 366  : 
; 367  : 
; 368  :     //  Translate DSS rotation enum to VRFB enum
; 369  :     switch( eRotation )

  00be4	e59d3078	 ldr         r3, [sp, #0x78]
  00be8	e58d305c	 str         r3, [sp, #0x5C]
  00bec	e59d305c	 ldr         r3, [sp, #0x5C]
  00bf0	e35300b4	 cmp         r3, #0xB4
  00bf4	ca000009	 bgt         |$LN29@PhysicalAd|
  00bf8	e59d305c	 ldr         r3, [sp, #0x5C]
  00bfc	e35300b4	 cmp         r3, #0xB4
  00c00	0a000012	 beq         |$LN17@PhysicalAd|
  00c04	e59d305c	 ldr         r3, [sp, #0x5C]
  00c08	e3530000	 cmp         r3, #0
  00c0c	0a000009	 beq         |$LN19@PhysicalAd|
  00c10	e59d305c	 ldr         r3, [sp, #0x5C]
  00c14	e353005a	 cmp         r3, #0x5A
  00c18	0a000009	 beq         |$LN18@PhysicalAd|
  00c1c	ea000012	 b           |$LN15@PhysicalAd|
  00c20		 |$LN29@PhysicalAd|
  00c20	e59d205c	 ldr         r2, [sp, #0x5C]
  00c24	e3a03c01	 mov         r3, #1, 24
  00c28	e383300e	 orr         r3, r3, #0xE
  00c2c	e1520003	 cmp         r2, r3
  00c30	0a000009	 beq         |$LN16@PhysicalAd|
  00c34	ea00000c	 b           |$LN15@PhysicalAd|
  00c38		 |$LN19@PhysicalAd|

; 370  :     {   
; 371  :         case OMAP_DSS_ROTATION_0:
; 372  :             dwRotation = VRFB_ROTATE_ANGLE_0;

  00c38	e3a03000	 mov         r3, #0
  00c3c	e58d304c	 str         r3, [sp, #0x4C]

; 373  :             break;

  00c40	ea000018	 b           |$LN20@PhysicalAd|
  00c44		 |$LN18@PhysicalAd|

; 374  : 
; 375  :         case OMAP_DSS_ROTATION_90:
; 376  :             dwRotation = VRFB_ROTATE_ANGLE_90;

  00c44	e3a0305a	 mov         r3, #0x5A
  00c48	e58d304c	 str         r3, [sp, #0x4C]

; 377  :             break;

  00c4c	ea000015	 b           |$LN20@PhysicalAd|
  00c50		 |$LN17@PhysicalAd|

; 378  : 
; 379  :         case OMAP_DSS_ROTATION_180:
; 380  :             dwRotation = VRFB_ROTATE_ANGLE_180;

  00c50	e3a030b4	 mov         r3, #0xB4
  00c54	e58d304c	 str         r3, [sp, #0x4C]

; 381  :             break;

  00c58	ea000012	 b           |$LN20@PhysicalAd|
  00c5c		 |$LN16@PhysicalAd|

; 382  :             
; 383  :         case OMAP_DSS_ROTATION_270:
; 384  :             dwRotation = VRFB_ROTATE_ANGLE_270;

  00c5c	e3a03c01	 mov         r3, #1, 24
  00c60	e383300e	 orr         r3, r3, #0xE
  00c64	e58d304c	 str         r3, [sp, #0x4C]

; 385  :             break;

  00c68	ea00000e	 b           |$LN20@PhysicalAd|
  00c6c		 |$LN15@PhysicalAd|

; 386  : 
; 387  :         default:
; 388  :             ASSERT(0);

  00c6c	ea000002	 b           |$LN27@PhysicalAd|
  00c70	e3a03001	 mov         r3, #1
  00c74	e58d3060	 str         r3, [sp, #0x60]
  00c78	ea000007	 b           |$LN28@PhysicalAd|
  00c7c		 |$LN27@PhysicalAd|
  00c7c	e3a03f61	 mov         r3, #0x61, 30
  00c80	e59f23c4	 ldr         r2, [pc, #0x3C4]
  00c84	e59f13bc	 ldr         r1, [pc, #0x3BC]
  00c88	e59f03b4	 ldr         r0, [pc, #0x3B4]
  00c8c	eb000000	 bl          NKDbgPrintfW
  00c90	e6000010	 __debugbreak_ce
  00c94	e3a03000	 mov         r3, #0
  00c98	e58d3060	 str         r3, [sp, #0x60]
  00c9c		 |$LN28@PhysicalAd|

; 389  :             return 0;

  00c9c	e3a03000	 mov         r3, #0
  00ca0	e58d3050	 str         r3, [sp, #0x50]
  00ca4	ea0000e2	 b           |$LN25@PhysicalAd|
  00ca8		 |$LN20@PhysicalAd|

; 390  :     }
; 391  :     
; 392  :     //  Get virtual address of VRFB display view
; 393  :     VRFBGetDisplayViewInfo( m_hVRFB, m_dwViewIndex, dwRotation, bMirror, &info );

  00ca8	e28d300c	 add         r3, sp, #0xC
  00cac	e58d3000	 str         r3, [sp]
  00cb0	e59d307c	 ldr         r3, [sp, #0x7C]
  00cb4	e59d204c	 ldr         r2, [sp, #0x4C]
  00cb8	e59d1074	 ldr         r1, [sp, #0x74]
  00cbc	e28110b0	 add         r1, r1, #0xB0
  00cc0	e5911000	 ldr         r1, [r1]
  00cc4	e59d0074	 ldr         r0, [sp, #0x74]
  00cc8	e28000a8	 add         r0, r0, #0xA8
  00ccc	e5900000	 ldr         r0, [r0]
  00cd0	eb000000	 bl          VRFBGetDisplayViewInfo

; 394  : 
; 395  : 
; 396  :     //  Compute clip offset
; 397  :     switch( eRotation )

  00cd4	e59d3078	 ldr         r3, [sp, #0x78]
  00cd8	e58d3064	 str         r3, [sp, #0x64]
  00cdc	e59d3064	 ldr         r3, [sp, #0x64]
  00ce0	e35300b4	 cmp         r3, #0xB4
  00ce4	ca000009	 bgt         |$LN30@PhysicalAd|
  00ce8	e59d3064	 ldr         r3, [sp, #0x64]
  00cec	e35300b4	 cmp         r3, #0xB4
  00cf0	0a000062	 beq         |$LN6@PhysicalAd|
  00cf4	e59d3064	 ldr         r3, [sp, #0x64]
  00cf8	e3530000	 cmp         r3, #0
  00cfc	0a000009	 beq         |$LN12@PhysicalAd|
  00d00	e59d3064	 ldr         r3, [sp, #0x64]
  00d04	e353005a	 cmp         r3, #0x5A
  00d08	0a000031	 beq         |$LN9@PhysicalAd|
  00d0c	ea0000c0	 b           |$LN13@PhysicalAd|
  00d10		 |$LN30@PhysicalAd|
  00d10	e59d2064	 ldr         r2, [sp, #0x64]
  00d14	e3a03c01	 mov         r3, #1, 24
  00d18	e383300e	 orr         r3, r3, #0xE
  00d1c	e1520003	 cmp         r2, r3
  00d20	0a000089	 beq         |$LN3@PhysicalAd|
  00d24	ea0000ba	 b           |$LN13@PhysicalAd|
  00d28		 |$LN12@PhysicalAd|

; 398  :     {   
; 399  :         case OMAP_DSS_ROTATION_0:
; 400  :             if( bMirror )

  00d28	e59d307c	 ldr         r3, [sp, #0x7C]
  00d2c	e3530000	 cmp         r3, #0
  00d30	0a000016	 beq         |$LN11@PhysicalAd|

; 401  :             {
; 402  :                 iClipOffsetX = ((m_dwWidth - m_rcClip.right) / m_dwWidthFactor) * info.dwPixelSizeBytes;

  00d34	e59d3074	 ldr         r3, [sp, #0x74]
  00d38	e2832010	 add         r2, r3, #0x10
  00d3c	e59d3074	 ldr         r3, [sp, #0x74]
  00d40	e2833020	 add         r3, r3, #0x20
  00d44	e5922000	 ldr         r2, [r2]
  00d48	e5933000	 ldr         r3, [r3]
  00d4c	e0421003	 sub         r1, r2, r3
  00d50	e59d3074	 ldr         r3, [sp, #0x74]
  00d54	e28330b4	 add         r3, r3, #0xB4
  00d58	e5930000	 ldr         r0, [r3]
  00d5c	eb000000	 bl          __rt_udiv
  00d60	e59d3014	 ldr         r3, [sp, #0x14]
  00d64	e0030390	 mul         r3, r0, r3
  00d68	e58d3008	 str         r3, [sp, #8]

; 403  :                 iClipOffsetY = -1 * (m_rcClip.top * info.dwImageStride);

  00d6c	e59d3074	 ldr         r3, [sp, #0x74]
  00d70	e283301c	 add         r3, r3, #0x1C
  00d74	e5931000	 ldr         r1, [r3]
  00d78	e59d3030	 ldr         r3, [sp, #0x30]
  00d7c	e0020391	 mul         r2, r1, r3
  00d80	e3e03000	 mvn         r3, #0
  00d84	e0030392	 mul         r3, r2, r3
  00d88	e58d3004	 str         r3, [sp, #4]

; 404  :             }
; 405  :             else

  00d8c	ea00000f	 b           |$LN10@PhysicalAd|
  00d90		 |$LN11@PhysicalAd|

; 406  :             {
; 407  :                 iClipOffsetX = (m_rcClip.left / m_dwWidthFactor) * info.dwPixelSizeBytes;

  00d90	e59d3074	 ldr         r3, [sp, #0x74]
  00d94	e2832018	 add         r2, r3, #0x18
  00d98	e59d3074	 ldr         r3, [sp, #0x74]
  00d9c	e28330b4	 add         r3, r3, #0xB4
  00da0	e5921000	 ldr         r1, [r2]
  00da4	e5930000	 ldr         r0, [r3]
  00da8	eb000000	 bl          __rt_udiv
  00dac	e59d3014	 ldr         r3, [sp, #0x14]
  00db0	e0030390	 mul         r3, r0, r3
  00db4	e58d3008	 str         r3, [sp, #8]

; 408  :                 iClipOffsetY = m_rcClip.top * info.dwImageStride;

  00db8	e59d3074	 ldr         r3, [sp, #0x74]
  00dbc	e283301c	 add         r3, r3, #0x1C
  00dc0	e5932000	 ldr         r2, [r3]
  00dc4	e59d3030	 ldr         r3, [sp, #0x30]
  00dc8	e0030392	 mul         r3, r2, r3
  00dcc	e58d3004	 str         r3, [sp, #4]
  00dd0		 |$LN10@PhysicalAd|

; 409  :             }
; 410  :             break;

  00dd0	ea00008f	 b           |$LN13@PhysicalAd|
  00dd4		 |$LN9@PhysicalAd|

; 411  : 
; 412  :         case OMAP_DSS_ROTATION_90:
; 413  :             if( bMirror )

  00dd4	e59d307c	 ldr         r3, [sp, #0x7C]
  00dd8	e3530000	 cmp         r3, #0
  00ddc	0a000012	 beq         |$LN8@PhysicalAd|

; 414  :             {
; 415  :                 iClipOffsetX = -1 * (m_rcClip.left / m_dwWidthFactor) * info.dwImageStride;

  00de0	e59d3074	 ldr         r3, [sp, #0x74]
  00de4	e2832018	 add         r2, r3, #0x18
  00de8	e59d3074	 ldr         r3, [sp, #0x74]
  00dec	e28330b4	 add         r3, r3, #0xB4
  00df0	e5921000	 ldr         r1, [r2]
  00df4	e5930000	 ldr         r0, [r3]
  00df8	eb000000	 bl          __rt_udiv
  00dfc	e3e03000	 mvn         r3, #0
  00e00	e0020390	 mul         r2, r0, r3
  00e04	e59d3030	 ldr         r3, [sp, #0x30]
  00e08	e0030392	 mul         r3, r2, r3
  00e0c	e58d3008	 str         r3, [sp, #8]

; 416  :                 iClipOffsetY = m_rcClip.top * info.dwPixelSizeBytes;

  00e10	e59d3074	 ldr         r3, [sp, #0x74]
  00e14	e283301c	 add         r3, r3, #0x1C
  00e18	e5932000	 ldr         r2, [r3]
  00e1c	e59d3014	 ldr         r3, [sp, #0x14]
  00e20	e0030392	 mul         r3, r2, r3
  00e24	e58d3004	 str         r3, [sp, #4]

; 417  :             }
; 418  :             else

  00e28	ea000013	 b           |$LN7@PhysicalAd|
  00e2c		 |$LN8@PhysicalAd|

; 419  :             {
; 420  :                 iClipOffsetX = ((m_dwWidth - m_rcClip.right) / m_dwWidthFactor) * info.dwImageStride;

  00e2c	e59d3074	 ldr         r3, [sp, #0x74]
  00e30	e2832010	 add         r2, r3, #0x10
  00e34	e59d3074	 ldr         r3, [sp, #0x74]
  00e38	e2833020	 add         r3, r3, #0x20
  00e3c	e5922000	 ldr         r2, [r2]
  00e40	e5933000	 ldr         r3, [r3]
  00e44	e0421003	 sub         r1, r2, r3
  00e48	e59d3074	 ldr         r3, [sp, #0x74]
  00e4c	e28330b4	 add         r3, r3, #0xB4
  00e50	e5930000	 ldr         r0, [r3]
  00e54	eb000000	 bl          __rt_udiv
  00e58	e59d3030	 ldr         r3, [sp, #0x30]
  00e5c	e0030390	 mul         r3, r0, r3
  00e60	e58d3008	 str         r3, [sp, #8]

; 421  :                 iClipOffsetY = m_rcClip.top * info.dwPixelSizeBytes;

  00e64	e59d3074	 ldr         r3, [sp, #0x74]
  00e68	e283301c	 add         r3, r3, #0x1C
  00e6c	e5932000	 ldr         r2, [r3]
  00e70	e59d3014	 ldr         r3, [sp, #0x14]
  00e74	e0030392	 mul         r3, r2, r3
  00e78	e58d3004	 str         r3, [sp, #4]
  00e7c		 |$LN7@PhysicalAd|

; 422  :             }
; 423  :             break;

  00e7c	ea000064	 b           |$LN13@PhysicalAd|
  00e80		 |$LN6@PhysicalAd|

; 424  : 
; 425  :         case OMAP_DSS_ROTATION_180:
; 426  :             if( bMirror )

  00e80	e59d307c	 ldr         r3, [sp, #0x7C]
  00e84	e3530000	 cmp         r3, #0
  00e88	0a000016	 beq         |$LN5@PhysicalAd|

; 427  :             {
; 428  :                 iClipOffsetX = (m_rcClip.left / m_dwWidthFactor) * info.dwPixelSizeBytes;

  00e8c	e59d3074	 ldr         r3, [sp, #0x74]
  00e90	e2832018	 add         r2, r3, #0x18
  00e94	e59d3074	 ldr         r3, [sp, #0x74]
  00e98	e28330b4	 add         r3, r3, #0xB4
  00e9c	e5921000	 ldr         r1, [r2]
  00ea0	e5930000	 ldr         r0, [r3]
  00ea4	eb000000	 bl          __rt_udiv
  00ea8	e59d3014	 ldr         r3, [sp, #0x14]
  00eac	e0030390	 mul         r3, r0, r3
  00eb0	e58d3008	 str         r3, [sp, #8]

; 429  :                 iClipOffsetY = -1 * ((m_dwHeight - m_rcClip.bottom) * info.dwImageStride);

  00eb4	e59d3074	 ldr         r3, [sp, #0x74]
  00eb8	e2832014	 add         r2, r3, #0x14
  00ebc	e59d3074	 ldr         r3, [sp, #0x74]
  00ec0	e2833024	 add         r3, r3, #0x24
  00ec4	e5922000	 ldr         r2, [r2]
  00ec8	e5933000	 ldr         r3, [r3]
  00ecc	e0421003	 sub         r1, r2, r3
  00ed0	e59d3030	 ldr         r3, [sp, #0x30]
  00ed4	e0020391	 mul         r2, r1, r3
  00ed8	e3e03000	 mvn         r3, #0
  00edc	e0030392	 mul         r3, r2, r3
  00ee0	e58d3004	 str         r3, [sp, #4]

; 430  :             }
; 431  :             else

  00ee4	ea000017	 b           |$LN4@PhysicalAd|
  00ee8		 |$LN5@PhysicalAd|

; 432  :             {
; 433  :                 iClipOffsetX = ((m_dwWidth - m_rcClip.right) / m_dwWidthFactor) * info.dwPixelSizeBytes;

  00ee8	e59d3074	 ldr         r3, [sp, #0x74]
  00eec	e2832010	 add         r2, r3, #0x10
  00ef0	e59d3074	 ldr         r3, [sp, #0x74]
  00ef4	e2833020	 add         r3, r3, #0x20
  00ef8	e5922000	 ldr         r2, [r2]
  00efc	e5933000	 ldr         r3, [r3]
  00f00	e0421003	 sub         r1, r2, r3
  00f04	e59d3074	 ldr         r3, [sp, #0x74]
  00f08	e28330b4	 add         r3, r3, #0xB4
  00f0c	e5930000	 ldr         r0, [r3]
  00f10	eb000000	 bl          __rt_udiv
  00f14	e59d3014	 ldr         r3, [sp, #0x14]
  00f18	e0030390	 mul         r3, r0, r3
  00f1c	e58d3008	 str         r3, [sp, #8]

; 434  :                 iClipOffsetY = (m_dwHeight - m_rcClip.bottom) * info.dwImageStride;

  00f20	e59d3074	 ldr         r3, [sp, #0x74]
  00f24	e2832014	 add         r2, r3, #0x14
  00f28	e59d3074	 ldr         r3, [sp, #0x74]
  00f2c	e2833024	 add         r3, r3, #0x24
  00f30	e5922000	 ldr         r2, [r2]
  00f34	e5933000	 ldr         r3, [r3]
  00f38	e0422003	 sub         r2, r2, r3
  00f3c	e59d3030	 ldr         r3, [sp, #0x30]
  00f40	e0030392	 mul         r3, r2, r3
  00f44	e58d3004	 str         r3, [sp, #4]
  00f48		 |$LN4@PhysicalAd|

; 435  :             }
; 436  :             break;

  00f48	ea000031	 b           |$LN13@PhysicalAd|
  00f4c		 |$LN3@PhysicalAd|

; 437  :             
; 438  :         case OMAP_DSS_ROTATION_270:
; 439  :             if( bMirror )

  00f4c	e59d307c	 ldr         r3, [sp, #0x7C]
  00f50	e3530000	 cmp         r3, #0
  00f54	0a00001a	 beq         |$LN2@PhysicalAd|

; 440  :             {
; 441  :                 iClipOffsetX = -1 * ((m_dwWidth - m_rcClip.right) / m_dwWidthFactor) * info.dwImageStride;

  00f58	e59d3074	 ldr         r3, [sp, #0x74]
  00f5c	e2832010	 add         r2, r3, #0x10
  00f60	e59d3074	 ldr         r3, [sp, #0x74]
  00f64	e2833020	 add         r3, r3, #0x20
  00f68	e5922000	 ldr         r2, [r2]
  00f6c	e5933000	 ldr         r3, [r3]
  00f70	e0421003	 sub         r1, r2, r3
  00f74	e59d3074	 ldr         r3, [sp, #0x74]
  00f78	e28330b4	 add         r3, r3, #0xB4
  00f7c	e5930000	 ldr         r0, [r3]
  00f80	eb000000	 bl          __rt_udiv
  00f84	e3e03000	 mvn         r3, #0
  00f88	e0020390	 mul         r2, r0, r3
  00f8c	e59d3030	 ldr         r3, [sp, #0x30]
  00f90	e0030392	 mul         r3, r2, r3
  00f94	e58d3008	 str         r3, [sp, #8]

; 442  :                 iClipOffsetY = (m_dwHeight - m_rcClip.bottom) * info.dwPixelSizeBytes;

  00f98	e59d3074	 ldr         r3, [sp, #0x74]
  00f9c	e2832014	 add         r2, r3, #0x14
  00fa0	e59d3074	 ldr         r3, [sp, #0x74]
  00fa4	e2833024	 add         r3, r3, #0x24
  00fa8	e5922000	 ldr         r2, [r2]
  00fac	e5933000	 ldr         r3, [r3]
  00fb0	e0422003	 sub         r2, r2, r3
  00fb4	e59d3014	 ldr         r3, [sp, #0x14]
  00fb8	e0030392	 mul         r3, r2, r3
  00fbc	e58d3004	 str         r3, [sp, #4]

; 443  :             }
; 444  :             else

  00fc0	ea000013	 b           |$LN1@PhysicalAd|
  00fc4		 |$LN2@PhysicalAd|

; 445  :             {
; 446  :                 iClipOffsetX = (m_rcClip.left / m_dwWidthFactor) * info.dwImageStride;

  00fc4	e59d3074	 ldr         r3, [sp, #0x74]
  00fc8	e2832018	 add         r2, r3, #0x18
  00fcc	e59d3074	 ldr         r3, [sp, #0x74]
  00fd0	e28330b4	 add         r3, r3, #0xB4
  00fd4	e5921000	 ldr         r1, [r2]
  00fd8	e5930000	 ldr         r0, [r3]
  00fdc	eb000000	 bl          __rt_udiv
  00fe0	e59d3030	 ldr         r3, [sp, #0x30]
  00fe4	e0030390	 mul         r3, r0, r3
  00fe8	e58d3008	 str         r3, [sp, #8]

; 447  :                 iClipOffsetY = (m_dwHeight - m_rcClip.bottom) * info.dwPixelSizeBytes;

  00fec	e59d3074	 ldr         r3, [sp, #0x74]
  00ff0	e2832014	 add         r2, r3, #0x14
  00ff4	e59d3074	 ldr         r3, [sp, #0x74]
  00ff8	e2833024	 add         r3, r3, #0x24
  00ffc	e5922000	 ldr         r2, [r2]
  01000	e5933000	 ldr         r3, [r3]
  01004	e0422003	 sub         r2, r2, r3
  01008	e59d3014	 ldr         r3, [sp, #0x14]
  0100c	e0030392	 mul         r3, r2, r3
  01010	e58d3004	 str         r3, [sp, #4]
  01014		 |$LN1@PhysicalAd|
  01014		 |$LN13@PhysicalAd|

; 448  :             }
; 449  :             break;
; 450  :     }
; 451  : 
; 452  :     return info.dwPhysicalAddrOutput + info.dwOriginOffset + iClipOffsetX + iClipOffsetY;

  01014	e59d2044	 ldr         r2, [sp, #0x44]
  01018	e59d3034	 ldr         r3, [sp, #0x34]
  0101c	e0822003	 add         r2, r2, r3
  01020	e59d3008	 ldr         r3, [sp, #8]
  01024	e0822003	 add         r2, r2, r3
  01028	e59d3004	 ldr         r3, [sp, #4]
  0102c	e0823003	 add         r3, r2, r3
  01030	e58d3050	 str         r3, [sp, #0x50]
  01034		 |$LN25@PhysicalAd|

; 453  : }

  01034	e59d0050	 ldr         r0, [sp, #0x50]
  01038	e28dd068	 add         sp, sp, #0x68
  0103c	e89d6010	 ldmia       sp, {r4, sp, lr}
  01040	e12fff1e	 bx          lr
  01044		 |$LN34@PhysicalAd|
  01044		 |$LN35@PhysicalAd|
  01044	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  01048		 |$LN36@PhysicalAd|
  01048	00000000	 DCD         |??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@|
  0104c		 |$LN37@PhysicalAd|
  0104c	00000000	 DCD         |??_C@_1LA@HPLNHDIB@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  01050		 |$M37986|

			 ENDP  ; |?PhysicalAddr@OMAPVrfbSurface@@UAAKW4OMAP_DSS_ROTATION@@HW4OMAP_ASSOC_SURF_USAGE@@@Z|, OMAPVrfbSurface::PhysicalAddr


  00040			 AREA	 |.pdata|, PDATA
|$T38001| DCD	|$LN13@PixelIncr|
	DCD	0x40004b04
; Function compile flags: /Odtp

  01050			 AREA	 |.text|, CODE, ARM

  01050		 |?PixelIncr@OMAPVrfbSurface@@UAAKW4OMAP_DSS_ROTATION@@H@Z| PROC ; OMAPVrfbSurface::PixelIncr

; 462  : {

  01050		 |$LN13@PixelIncr|
  01050	e1a0c00d	 mov         r12, sp
  01054	e92d0007	 stmdb       sp!, {r0 - r2}
  01058	e92d5000	 stmdb       sp!, {r12, lr}
  0105c	e24dd010	 sub         sp, sp, #0x10
  01060		 |$M37998|

; 463  :     DWORD   dwIncr = 1;

  01060	e3a03001	 mov         r3, #1
  01064	e58d3000	 str         r3, [sp]

; 464  :     
; 465  :     UNREFERENCED_PARAMETER(bMirror);
; 466  :     //  Pixel increment is always 1 for VRFB surfaces (mirror setting has no impact)
; 467  :     
; 468  :     //  Scale factor is dependent on rotation angle
; 469  :     switch( eRotation )

  01068	e59d301c	 ldr         r3, [sp, #0x1C]
  0106c	e58d3008	 str         r3, [sp, #8]
  01070	e59d3008	 ldr         r3, [sp, #8]
  01074	e35300b4	 cmp         r3, #0xB4
  01078	ca000009	 bgt         |$LN10@PixelIncr|
  0107c	e59d3008	 ldr         r3, [sp, #8]
  01080	e35300b4	 cmp         r3, #0xB4
  01084	0a00000c	 beq         |$LN3@PixelIncr|
  01088	e59d3008	 ldr         r3, [sp, #8]
  0108c	e3530000	 cmp         r3, #0
  01090	0a000009	 beq         |$LN3@PixelIncr|
  01094	e59d3008	 ldr         r3, [sp, #8]
  01098	e353005a	 cmp         r3, #0x5A
  0109c	0a000012	 beq         |$LN2@PixelIncr|
  010a0	ea00001d	 b           |$LN1@PixelIncr|
  010a4		 |$LN10@PixelIncr|
  010a4	e59d2008	 ldr         r2, [sp, #8]
  010a8	e3a03c01	 mov         r3, #1, 24
  010ac	e383300e	 orr         r3, r3, #0xE
  010b0	e1520003	 cmp         r2, r3
  010b4	0a00000c	 beq         |$LN2@PixelIncr|
  010b8	ea000017	 b           |$LN1@PixelIncr|
  010bc		 |$LN3@PixelIncr|

; 470  :     {
; 471  :         case OMAP_DSS_ROTATION_0:
; 472  :         case OMAP_DSS_ROTATION_180:
; 473  :             //  (+ horizontal_scale_factor*pixel_size)
; 474  :             dwIncr += ((m_dwHorizScale - 1) * m_dwPixelSize);

  010bc	e59d3018	 ldr         r3, [sp, #0x18]
  010c0	e2833028	 add         r3, r3, #0x28
  010c4	e5933000	 ldr         r3, [r3]
  010c8	e2431001	 sub         r1, r3, #1
  010cc	e59d3018	 ldr         r3, [sp, #0x18]
  010d0	e2833008	 add         r3, r3, #8
  010d4	e5933000	 ldr         r3, [r3]
  010d8	e0020391	 mul         r2, r1, r3
  010dc	e59d3000	 ldr         r3, [sp]
  010e0	e0833002	 add         r3, r3, r2
  010e4	e58d3000	 str         r3, [sp]

; 475  :             break;

  010e8	ea00001a	 b           |$LN4@PixelIncr|
  010ec		 |$LN2@PixelIncr|

; 476  : 
; 477  :         case OMAP_DSS_ROTATION_90:
; 478  :         case OMAP_DSS_ROTATION_270:
; 479  :             //  (+ horizontal_scale_factor*pixel_size)
; 480  :             dwIncr += ((m_dwVertScale - 1) * m_dwPixelSize);

  010ec	e59d3018	 ldr         r3, [sp, #0x18]
  010f0	e283302c	 add         r3, r3, #0x2C
  010f4	e5933000	 ldr         r3, [r3]
  010f8	e2431001	 sub         r1, r3, #1
  010fc	e59d3018	 ldr         r3, [sp, #0x18]
  01100	e2833008	 add         r3, r3, #8
  01104	e5933000	 ldr         r3, [r3]
  01108	e0020391	 mul         r2, r1, r3
  0110c	e59d3000	 ldr         r3, [sp]
  01110	e0833002	 add         r3, r3, r2
  01114	e58d3000	 str         r3, [sp]

; 481  :             break;

  01118	ea00000e	 b           |$LN4@PixelIncr|
  0111c		 |$LN1@PixelIncr|

; 482  : 
; 483  :         default:
; 484  :             ASSERT(0);

  0111c	ea000002	 b           |$LN8@PixelIncr|
  01120	e3a03001	 mov         r3, #1
  01124	e58d300c	 str         r3, [sp, #0xC]
  01128	ea000007	 b           |$LN9@PixelIncr|
  0112c		 |$LN8@PixelIncr|
  0112c	e3a03f79	 mov         r3, #0x79, 30
  01130	e59f2040	 ldr         r2, [pc, #0x40]
  01134	e59f1038	 ldr         r1, [pc, #0x38]
  01138	e59f0030	 ldr         r0, [pc, #0x30]
  0113c	eb000000	 bl          NKDbgPrintfW
  01140	e6000010	 __debugbreak_ce
  01144	e3a03000	 mov         r3, #0
  01148	e58d300c	 str         r3, [sp, #0xC]
  0114c		 |$LN9@PixelIncr|

; 485  :             return 0;

  0114c	e3a03000	 mov         r3, #0
  01150	e58d3004	 str         r3, [sp, #4]
  01154	ea000001	 b           |$LN6@PixelIncr|
  01158		 |$LN4@PixelIncr|

; 486  :     }            
; 487  :     
; 488  :     //  Return pixel increment
; 489  :     return dwIncr;

  01158	e59d3000	 ldr         r3, [sp]
  0115c	e58d3004	 str         r3, [sp, #4]
  01160		 |$LN6@PixelIncr|

; 490  : }

  01160	e59d0004	 ldr         r0, [sp, #4]
  01164	e28dd010	 add         sp, sp, #0x10
  01168	e89d6000	 ldmia       sp, {sp, lr}
  0116c	e12fff1e	 bx          lr
  01170		 |$LN14@PixelIncr|
  01170		 |$LN15@PixelIncr|
  01170	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  01174		 |$LN16@PixelIncr|
  01174	00000000	 DCD         |??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@|
  01178		 |$LN17@PixelIncr|
  01178	00000000	 DCD         |??_C@_1LA@HPLNHDIB@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  0117c		 |$M37999|

			 ENDP  ; |?PixelIncr@OMAPVrfbSurface@@UAAKW4OMAP_DSS_ROTATION@@H@Z|, OMAPVrfbSurface::PixelIncr


  00048			 AREA	 |.pdata|, PDATA
|$T38014| DCD	|$LN18@RowIncr|
	DCD	0x40010004
; Function compile flags: /Odtp

  0117c			 AREA	 |.text|, CODE, ARM

  0117c		 |?RowIncr@OMAPVrfbSurface@@UAAKW4OMAP_DSS_ROTATION@@H@Z| PROC ; OMAPVrfbSurface::RowIncr

; 498  : {

  0117c		 |$LN18@RowIncr|
  0117c	e1a0c00d	 mov         r12, sp
  01180	e92d0007	 stmdb       sp!, {r0 - r2}
  01184	e92d5000	 stmdb       sp!, {r12, lr}
  01188	e24dd05c	 sub         sp, sp, #0x5C
  0118c		 |$M38011|

; 499  :     VRFB_VIEW_INFO  info;
; 500  :     DWORD           dwRowIncr;     
; 501  :     DWORD           dwClipOffsetX,
; 502  :                     dwClipOffsetY;
; 503  : 
; 504  :     if ((m_bUseResizer) && (m_eSurfaceType == OMAP_SURFACE_NORMAL) && (m_pAssocSurface))

  0118c	e59d3064	 ldr         r3, [sp, #0x64]
  01190	e2833030	 add         r3, r3, #0x30
  01194	e5933000	 ldr         r3, [r3]
  01198	e3530000	 cmp         r3, #0
  0119c	0a00001a	 beq         |$LN10@RowIncr|
  011a0	e59d3064	 ldr         r3, [sp, #0x64]
  011a4	e283309c	 add         r3, r3, #0x9C
  011a8	e5933000	 ldr         r3, [r3]
  011ac	e3530000	 cmp         r3, #0
  011b0	1a000015	 bne         |$LN10@RowIncr|
  011b4	e59d3064	 ldr         r3, [sp, #0x64]
  011b8	e28330a0	 add         r3, r3, #0xA0
  011bc	e5933000	 ldr         r3, [r3]
  011c0	e3530000	 cmp         r3, #0
  011c4	0a000010	 beq         |$LN10@RowIncr|

; 505  :         return m_pAssocSurface->RowIncr(eRotation,bMirror);

  011c8	e59d206c	 ldr         r2, [sp, #0x6C]
  011cc	e59d1068	 ldr         r1, [sp, #0x68]
  011d0	e59d3064	 ldr         r3, [sp, #0x64]
  011d4	e28330a0	 add         r3, r3, #0xA0
  011d8	e593e000	 ldr         lr, [r3]
  011dc	e59d3064	 ldr         r3, [sp, #0x64]
  011e0	e28330a0	 add         r3, r3, #0xA0
  011e4	e5930000	 ldr         r0, [r3]
  011e8	e59e3000	 ldr         r3, [lr]
  011ec	e283301c	 add         r3, r3, #0x1C
  011f0	e5933000	 ldr         r3, [r3]
  011f4	e1a0e00f	 mov         lr, pc
  011f8	e12fff13	 bx          r3
  011fc	e58d0050	 str         r0, [sp, #0x50]
  01200	e59d3050	 ldr         r3, [sp, #0x50]
  01204	e58d304c	 str         r3, [sp, #0x4C]
  01208	ea0000d4	 b           |$LN11@RowIncr|
  0120c		 |$LN10@RowIncr|

; 506  : 
; 507  :     //  Compute the VRFB row increment
; 508  :     VRFBGetViewInfo( m_hVRFB, m_hVRFBView, &info );

  0120c	e28d200c	 add         r2, sp, #0xC
  01210	e59d3064	 ldr         r3, [sp, #0x64]
  01214	e28330ac	 add         r3, r3, #0xAC
  01218	e5931000	 ldr         r1, [r3]
  0121c	e59d3064	 ldr         r3, [sp, #0x64]
  01220	e28330a8	 add         r3, r3, #0xA8
  01224	e5930000	 ldr         r0, [r3]
  01228	eb000000	 bl          VRFBGetViewInfo

; 509  : 
; 510  :     //  Compute clipping offsets
; 511  :     dwClipOffsetX = m_dwWidth - (m_rcClip.right - m_rcClip.left);

  0122c	e59d3064	 ldr         r3, [sp, #0x64]
  01230	e2831010	 add         r1, r3, #0x10
  01234	e59d3064	 ldr         r3, [sp, #0x64]
  01238	e2832020	 add         r2, r3, #0x20
  0123c	e59d3064	 ldr         r3, [sp, #0x64]
  01240	e2833018	 add         r3, r3, #0x18
  01244	e5922000	 ldr         r2, [r2]
  01248	e5933000	 ldr         r3, [r3]
  0124c	e0422003	 sub         r2, r2, r3
  01250	e5913000	 ldr         r3, [r1]
  01254	e0433002	 sub         r3, r3, r2
  01258	e58d3000	 str         r3, [sp]

; 512  :     dwClipOffsetY = m_dwHeight - (m_rcClip.bottom - m_rcClip.top);

  0125c	e59d3064	 ldr         r3, [sp, #0x64]
  01260	e2831014	 add         r1, r3, #0x14
  01264	e59d3064	 ldr         r3, [sp, #0x64]
  01268	e2832024	 add         r2, r3, #0x24
  0126c	e59d3064	 ldr         r3, [sp, #0x64]
  01270	e283301c	 add         r3, r3, #0x1C
  01274	e5922000	 ldr         r2, [r2]
  01278	e5933000	 ldr         r3, [r3]
  0127c	e0422003	 sub         r2, r2, r3
  01280	e5913000	 ldr         r3, [r1]
  01284	e0433002	 sub         r3, r3, r2
  01288	e58d3004	 str         r3, [sp, #4]

; 513  :     
; 514  :     //  Row increment depends on angle, mirror and clipping region
; 515  :     switch( eRotation )

  0128c	e59d3068	 ldr         r3, [sp, #0x68]
  01290	e58d3054	 str         r3, [sp, #0x54]
  01294	e59d3054	 ldr         r3, [sp, #0x54]
  01298	e35300b4	 cmp         r3, #0xB4
  0129c	ca000009	 bgt         |$LN15@RowIncr|
  012a0	e59d3054	 ldr         r3, [sp, #0x54]
  012a4	e35300b4	 cmp         r3, #0xB4
  012a8	0a00000c	 beq         |$LN7@RowIncr|
  012ac	e59d3054	 ldr         r3, [sp, #0x54]
  012b0	e3530000	 cmp         r3, #0
  012b4	0a000009	 beq         |$LN7@RowIncr|
  012b8	e59d3054	 ldr         r3, [sp, #0x54]
  012bc	e353005a	 cmp         r3, #0x5A
  012c0	0a000051	 beq         |$LN4@RowIncr|
  012c4	ea000093	 b           |$LN1@RowIncr|
  012c8		 |$LN15@RowIncr|
  012c8	e59d2054	 ldr         r2, [sp, #0x54]
  012cc	e3a03c01	 mov         r3, #1, 24
  012d0	e383300e	 orr         r3, r3, #0xE
  012d4	e1520003	 cmp         r2, r3
  012d8	0a00004b	 beq         |$LN4@RowIncr|
  012dc	ea00008d	 b           |$LN1@RowIncr|
  012e0		 |$LN7@RowIncr|

; 516  :     {
; 517  :         case OMAP_DSS_ROTATION_0:
; 518  :         case OMAP_DSS_ROTATION_180:
; 519  :             //  Computation changes depending on mirror setting
; 520  :             if( !bMirror )

  012e0	e59d306c	 ldr         r3, [sp, #0x6C]
  012e4	e3530000	 cmp         r3, #0
  012e8	1a000022	 bne         |$LN6@RowIncr|

; 521  :             {
; 522  :                 dwRowIncr = (VRFB_IMAGE_WIDTH_MAX - (m_dwWidth - dwClipOffsetX)/m_dwWidthFactor) * info.dwPixelSizeBytes + 1;

  012ec	e59d3064	 ldr         r3, [sp, #0x64]
  012f0	e2833010	 add         r3, r3, #0x10
  012f4	e5932000	 ldr         r2, [r3]
  012f8	e59d3000	 ldr         r3, [sp]
  012fc	e0421003	 sub         r1, r2, r3
  01300	e59d3064	 ldr         r3, [sp, #0x64]
  01304	e28330b4	 add         r3, r3, #0xB4
  01308	e5930000	 ldr         r0, [r3]
  0130c	eb000000	 bl          __rt_udiv
  01310	e2602b02	 rsb         r2, r0, #2, 22
  01314	e59d3014	 ldr         r3, [sp, #0x14]
  01318	e0030392	 mul         r3, r2, r3
  0131c	e2833001	 add         r3, r3, #1
  01320	e58d3008	 str         r3, [sp, #8]

; 523  : 
; 524  :                 //  (+ vertical_scale_factor*stride + horizontal_scale_factor*pixel_size) 
; 525  :                 dwRowIncr += ((m_dwVertScale - 1) * VRFB_IMAGE_WIDTH_MAX * info.dwPixelSizeBytes);

  01324	e59d3064	 ldr         r3, [sp, #0x64]
  01328	e283302c	 add         r3, r3, #0x2C
  0132c	e5933000	 ldr         r3, [r3]
  01330	e2432001	 sub         r2, r3, #1
  01334	e3a03b02	 mov         r3, #2, 22
  01338	e0010392	 mul         r1, r2, r3
  0133c	e59d3014	 ldr         r3, [sp, #0x14]
  01340	e0020391	 mul         r2, r1, r3
  01344	e59d3008	 ldr         r3, [sp, #8]
  01348	e0833002	 add         r3, r3, r2
  0134c	e58d3008	 str         r3, [sp, #8]

; 526  :                 dwRowIncr += ((m_dwHorizScale - 1) * info.dwPixelSizeBytes);

  01350	e59d3064	 ldr         r3, [sp, #0x64]
  01354	e2833028	 add         r3, r3, #0x28
  01358	e5933000	 ldr         r3, [r3]
  0135c	e2431001	 sub         r1, r3, #1
  01360	e59d3014	 ldr         r3, [sp, #0x14]
  01364	e0020391	 mul         r2, r1, r3
  01368	e59d3008	 ldr         r3, [sp, #8]
  0136c	e0833002	 add         r3, r3, r2
  01370	e58d3008	 str         r3, [sp, #8]

; 527  :             }
; 528  :             else

  01374	ea000023	 b           |$LN5@RowIncr|
  01378		 |$LN6@RowIncr|

; 529  :             {
; 530  :                 dwRowIncr = (VRFB_IMAGE_WIDTH_MAX + (m_dwWidth - dwClipOffsetX)/m_dwWidthFactor) * info.dwPixelSizeBytes;

  01378	e59d3064	 ldr         r3, [sp, #0x64]
  0137c	e2833010	 add         r3, r3, #0x10
  01380	e5932000	 ldr         r2, [r3]
  01384	e59d3000	 ldr         r3, [sp]
  01388	e0421003	 sub         r1, r2, r3
  0138c	e59d3064	 ldr         r3, [sp, #0x64]
  01390	e28330b4	 add         r3, r3, #0xB4
  01394	e5930000	 ldr         r0, [r3]
  01398	eb000000	 bl          __rt_udiv
  0139c	e2802b02	 add         r2, r0, #2, 22
  013a0	e59d3014	 ldr         r3, [sp, #0x14]
  013a4	e0030392	 mul         r3, r2, r3
  013a8	e58d3008	 str         r3, [sp, #8]

; 531  :                 dwRowIncr = 1 - dwRowIncr;

  013ac	e59d3008	 ldr         r3, [sp, #8]
  013b0	e2633001	 rsb         r3, r3, #1
  013b4	e58d3008	 str         r3, [sp, #8]

; 532  : 
; 533  :                 //  (- vertical_scale_factor*stride + horizontal_scale_factor*pixel_size) 
; 534  :                 dwRowIncr -= ((m_dwVertScale - 1) * VRFB_IMAGE_WIDTH_MAX * info.dwPixelSizeBytes);

  013b8	e59d3064	 ldr         r3, [sp, #0x64]
  013bc	e283302c	 add         r3, r3, #0x2C
  013c0	e5933000	 ldr         r3, [r3]
  013c4	e2432001	 sub         r2, r3, #1
  013c8	e3a03b02	 mov         r3, #2, 22
  013cc	e0010392	 mul         r1, r2, r3
  013d0	e59d3014	 ldr         r3, [sp, #0x14]
  013d4	e0020391	 mul         r2, r1, r3
  013d8	e59d3008	 ldr         r3, [sp, #8]
  013dc	e0433002	 sub         r3, r3, r2
  013e0	e58d3008	 str         r3, [sp, #8]

; 535  :                 dwRowIncr += ((m_dwHorizScale - 1) * info.dwPixelSizeBytes);

  013e4	e59d3064	 ldr         r3, [sp, #0x64]
  013e8	e2833028	 add         r3, r3, #0x28
  013ec	e5933000	 ldr         r3, [r3]
  013f0	e2431001	 sub         r1, r3, #1
  013f4	e59d3014	 ldr         r3, [sp, #0x14]
  013f8	e0020391	 mul         r2, r1, r3
  013fc	e59d3008	 ldr         r3, [sp, #8]
  01400	e0833002	 add         r3, r3, r2
  01404	e58d3008	 str         r3, [sp, #8]
  01408		 |$LN5@RowIncr|

; 536  :             }
; 537  :             break;

  01408	ea000052	 b           |$LN8@RowIncr|
  0140c		 |$LN4@RowIncr|

; 538  : 
; 539  :         case OMAP_DSS_ROTATION_90:
; 540  :         case OMAP_DSS_ROTATION_270:
; 541  :             //  Computation changes depending on mirror setting
; 542  :             if( !bMirror )

  0140c	e59d306c	 ldr         r3, [sp, #0x6C]
  01410	e3530000	 cmp         r3, #0
  01414	1a00001e	 bne         |$LN3@RowIncr|

; 543  :             {
; 544  :                 dwRowIncr = (VRFB_IMAGE_HEIGHT_MAX - (m_dwHeight - dwClipOffsetY)) * info.dwPixelSizeBytes + 1;

  01418	e59d3064	 ldr         r3, [sp, #0x64]
  0141c	e2833014	 add         r3, r3, #0x14
  01420	e5932000	 ldr         r2, [r3]
  01424	e59d3004	 ldr         r3, [sp, #4]
  01428	e0423003	 sub         r3, r2, r3
  0142c	e2632b02	 rsb         r2, r3, #2, 22
  01430	e59d3014	 ldr         r3, [sp, #0x14]
  01434	e0030392	 mul         r3, r2, r3
  01438	e2833001	 add         r3, r3, #1
  0143c	e58d3008	 str         r3, [sp, #8]

; 545  : 
; 546  :                 //  (+ horizontal_scale_factor*stride + vertical_scale_factor*pixel_size) 
; 547  :                 dwRowIncr += ((m_dwHorizScale - 1) * VRFB_IMAGE_HEIGHT_MAX * info.dwPixelSizeBytes);

  01440	e59d3064	 ldr         r3, [sp, #0x64]
  01444	e2833028	 add         r3, r3, #0x28
  01448	e5933000	 ldr         r3, [r3]
  0144c	e2432001	 sub         r2, r3, #1
  01450	e3a03b02	 mov         r3, #2, 22
  01454	e0010392	 mul         r1, r2, r3
  01458	e59d3014	 ldr         r3, [sp, #0x14]
  0145c	e0020391	 mul         r2, r1, r3
  01460	e59d3008	 ldr         r3, [sp, #8]
  01464	e0833002	 add         r3, r3, r2
  01468	e58d3008	 str         r3, [sp, #8]

; 548  :                 dwRowIncr += ((m_dwVertScale - 1) * info.dwPixelSizeBytes);

  0146c	e59d3064	 ldr         r3, [sp, #0x64]
  01470	e283302c	 add         r3, r3, #0x2C
  01474	e5933000	 ldr         r3, [r3]
  01478	e2431001	 sub         r1, r3, #1
  0147c	e59d3014	 ldr         r3, [sp, #0x14]
  01480	e0020391	 mul         r2, r1, r3
  01484	e59d3008	 ldr         r3, [sp, #8]
  01488	e0833002	 add         r3, r3, r2
  0148c	e58d3008	 str         r3, [sp, #8]

; 549  :             }
; 550  :             else

  01490	ea00001f	 b           |$LN2@RowIncr|
  01494		 |$LN3@RowIncr|

; 551  :             {
; 552  :                 dwRowIncr = (VRFB_IMAGE_HEIGHT_MAX + (m_dwHeight - dwClipOffsetY)) * info.dwPixelSizeBytes;

  01494	e59d3064	 ldr         r3, [sp, #0x64]
  01498	e2833014	 add         r3, r3, #0x14
  0149c	e5932000	 ldr         r2, [r3]
  014a0	e59d3004	 ldr         r3, [sp, #4]
  014a4	e0423003	 sub         r3, r2, r3
  014a8	e2832b02	 add         r2, r3, #2, 22
  014ac	e59d3014	 ldr         r3, [sp, #0x14]
  014b0	e0030392	 mul         r3, r2, r3
  014b4	e58d3008	 str         r3, [sp, #8]

; 553  :                 dwRowIncr = 1 - dwRowIncr;

  014b8	e59d3008	 ldr         r3, [sp, #8]
  014bc	e2633001	 rsb         r3, r3, #1
  014c0	e58d3008	 str         r3, [sp, #8]

; 554  : 
; 555  :                 //  (- horizontal_scale_factor*stride + vertical_scale_factor*pixel_size) 
; 556  :                 dwRowIncr -= ((m_dwHorizScale - 1) * VRFB_IMAGE_HEIGHT_MAX * info.dwPixelSizeBytes);

  014c4	e59d3064	 ldr         r3, [sp, #0x64]
  014c8	e2833028	 add         r3, r3, #0x28
  014cc	e5933000	 ldr         r3, [r3]
  014d0	e2432001	 sub         r2, r3, #1
  014d4	e3a03b02	 mov         r3, #2, 22
  014d8	e0010392	 mul         r1, r2, r3
  014dc	e59d3014	 ldr         r3, [sp, #0x14]
  014e0	e0020391	 mul         r2, r1, r3
  014e4	e59d3008	 ldr         r3, [sp, #8]
  014e8	e0433002	 sub         r3, r3, r2
  014ec	e58d3008	 str         r3, [sp, #8]

; 557  :                 dwRowIncr += ((m_dwVertScale - 1) * info.dwPixelSizeBytes);

  014f0	e59d3064	 ldr         r3, [sp, #0x64]
  014f4	e283302c	 add         r3, r3, #0x2C
  014f8	e5933000	 ldr         r3, [r3]
  014fc	e2431001	 sub         r1, r3, #1
  01500	e59d3014	 ldr         r3, [sp, #0x14]
  01504	e0020391	 mul         r2, r1, r3
  01508	e59d3008	 ldr         r3, [sp, #8]
  0150c	e0833002	 add         r3, r3, r2
  01510	e58d3008	 str         r3, [sp, #8]
  01514		 |$LN2@RowIncr|

; 558  :             }
; 559  :             break;

  01514	ea00000f	 b           |$LN8@RowIncr|
  01518		 |$LN1@RowIncr|

; 560  : 
; 561  :         default:
; 562  :             ASSERT(0);

  01518	ea000002	 b           |$LN13@RowIncr|
  0151c	e3a03001	 mov         r3, #1
  01520	e58d3058	 str         r3, [sp, #0x58]
  01524	ea000008	 b           |$LN14@RowIncr|
  01528		 |$LN13@RowIncr|
  01528	e3a03c02	 mov         r3, #2, 24
  0152c	e3833032	 orr         r3, r3, #0x32
  01530	e59f2040	 ldr         r2, [pc, #0x40]
  01534	e59f1038	 ldr         r1, [pc, #0x38]
  01538	e59f0030	 ldr         r0, [pc, #0x30]
  0153c	eb000000	 bl          NKDbgPrintfW
  01540	e6000010	 __debugbreak_ce
  01544	e3a03000	 mov         r3, #0
  01548	e58d3058	 str         r3, [sp, #0x58]
  0154c		 |$LN14@RowIncr|

; 563  :             return 0;

  0154c	e3a03000	 mov         r3, #0
  01550	e58d304c	 str         r3, [sp, #0x4C]
  01554	ea000001	 b           |$LN11@RowIncr|
  01558		 |$LN8@RowIncr|

; 564  :     }
; 565  :     
; 566  :     return dwRowIncr;

  01558	e59d3008	 ldr         r3, [sp, #8]
  0155c	e58d304c	 str         r3, [sp, #0x4C]
  01560		 |$LN11@RowIncr|

; 567  : }

  01560	e59d004c	 ldr         r0, [sp, #0x4C]
  01564	e28dd05c	 add         sp, sp, #0x5C
  01568	e89d6000	 ldmia       sp, {sp, lr}
  0156c	e12fff1e	 bx          lr
  01570		 |$LN19@RowIncr|
  01570		 |$LN20@RowIncr|
  01570	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  01574		 |$LN21@RowIncr|
  01574	00000000	 DCD         |??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@|
  01578		 |$LN22@RowIncr|
  01578	00000000	 DCD         |??_C@_1LA@HPLNHDIB@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  0157c		 |$M38012|

			 ENDP  ; |?RowIncr@OMAPVrfbSurface@@UAAKW4OMAP_DSS_ROTATION@@H@Z|, OMAPVrfbSurface::RowIncr


  00050			 AREA	 |.pdata|, PDATA
|$T38026| DCD	|$LN7@SetOrienta|
	DCD	0x40005a04
; Function compile flags: /Odtp

  0157c			 AREA	 |.text|, CODE, ARM

  0157c		 |?SetOrientation@OMAPVrfbSurface@@UAAHW4OMAP_SURF_ORIENTATION@@@Z| PROC ; OMAPVrfbSurface::SetOrientation

; 575  : {

  0157c		 |$LN7@SetOrienta|
  0157c	e1a0c00d	 mov         r12, sp
  01580	e92d0003	 stmdb       sp!, {r0, r1}
  01584	e92d5000	 stmdb       sp!, {r12, lr}
  01588	e24dd054	 sub         sp, sp, #0x54
  0158c		 |$M38023|

; 576  :     VRFB_VIEW_INFO  info;                
; 577  : 
; 578  :     //  Do nothing if orientation is the same
; 579  :     if( eOrientation == m_eOrientation )

  0158c	e59d305c	 ldr         r3, [sp, #0x5C]
  01590	e283300c	 add         r3, r3, #0xC
  01594	e59d2060	 ldr         r2, [sp, #0x60]
  01598	e5933000	 ldr         r3, [r3]
  0159c	e1520003	 cmp         r2, r3
  015a0	1a000002	 bne         |$LN2@SetOrienta|

; 580  :         return TRUE;

  015a4	e3a03001	 mov         r3, #1
  015a8	e58d3048	 str         r3, [sp, #0x48]
  015ac	ea000048	 b           |$LN3@SetOrienta|
  015b0		 |$LN2@SetOrienta|

; 581  : 
; 582  : 
; 583  :     //  Get the current configuration
; 584  :     VRFBGetViewInfo( m_hVRFB, m_hVRFBView, &info );

  015b0	e28d2008	 add         r2, sp, #8
  015b4	e59d305c	 ldr         r3, [sp, #0x5C]
  015b8	e28330ac	 add         r3, r3, #0xAC
  015bc	e5931000	 ldr         r1, [r3]
  015c0	e59d305c	 ldr         r3, [sp, #0x5C]
  015c4	e28330a8	 add         r3, r3, #0xA8
  015c8	e5930000	 ldr         r0, [r3]
  015cc	eb000000	 bl          VRFBGetViewInfo

; 585  :     
; 586  :     //  Reconfigure the VRFB view for the new orientation
; 587  :     //  by swapping width and height values
; 588  :     VRFBUpdateView( m_hVRFB, m_hVRFBView, info.dwPixelSize, info.dwHeight, info.dwWidth, 0 );

  015d0	e3a03000	 mov         r3, #0
  015d4	e58d3004	 str         r3, [sp, #4]
  015d8	e59d3014	 ldr         r3, [sp, #0x14]
  015dc	e58d3000	 str         r3, [sp]
  015e0	e59d3018	 ldr         r3, [sp, #0x18]
  015e4	e59d200c	 ldr         r2, [sp, #0xC]
  015e8	e59d105c	 ldr         r1, [sp, #0x5C]
  015ec	e28110ac	 add         r1, r1, #0xAC
  015f0	e5911000	 ldr         r1, [r1]
  015f4	e59d005c	 ldr         r0, [sp, #0x5C]
  015f8	e28000a8	 add         r0, r0, #0xA8
  015fc	e5900000	 ldr         r0, [r0]
  01600	eb000000	 bl          VRFBUpdateView

; 589  : 
; 590  :     //  Get the new VRFB configuration
; 591  :     VRFBGetViewInfo( m_hVRFB, m_hVRFBView, &info );

  01604	e28d2008	 add         r2, sp, #8
  01608	e59d305c	 ldr         r3, [sp, #0x5C]
  0160c	e28330ac	 add         r3, r3, #0xAC
  01610	e5931000	 ldr         r1, [r3]
  01614	e59d305c	 ldr         r3, [sp, #0x5C]
  01618	e28330a8	 add         r3, r3, #0xA8
  0161c	e5930000	 ldr         r0, [r3]
  01620	eb000000	 bl          VRFBGetViewInfo

; 592  :     
; 593  :         
; 594  :     //  Update surface parameters
; 595  :     m_eOrientation   = eOrientation;

  01624	e59d305c	 ldr         r3, [sp, #0x5C]
  01628	e283200c	 add         r2, r3, #0xC
  0162c	e59d3060	 ldr         r3, [sp, #0x60]
  01630	e5823000	 str         r3, [r2]

; 596  :     m_dwWidth        = info.dwWidth;

  01634	e59d305c	 ldr         r3, [sp, #0x5C]
  01638	e2832010	 add         r2, r3, #0x10
  0163c	e59d3014	 ldr         r3, [sp, #0x14]
  01640	e5823000	 str         r3, [r2]

; 597  :     m_dwHeight       = info.dwHeight;

  01644	e59d305c	 ldr         r3, [sp, #0x5C]
  01648	e2832014	 add         r2, r3, #0x14
  0164c	e59d3018	 ldr         r3, [sp, #0x18]
  01650	e5823000	 str         r3, [r2]

; 598  : 
; 599  :     //  Reset clipping rect
; 600  :     SetClipping( NULL );

  01654	e3a01000	 mov         r1, #0
  01658	e59d305c	 ldr         r3, [sp, #0x5C]
  0165c	e5933000	 ldr         r3, [r3]
  01660	e2833020	 add         r3, r3, #0x20
  01664	e59d005c	 ldr         r0, [sp, #0x5C]
  01668	e5933000	 ldr         r3, [r3]
  0166c	e1a0e00f	 mov         lr, pc
  01670	e12fff13	 bx          r3

; 601  : 
; 602  :     if ((m_pAssocSurface) && (m_eSurfaceType==OMAP_SURFACE_NORMAL))

  01674	e59d305c	 ldr         r3, [sp, #0x5C]
  01678	e28330a0	 add         r3, r3, #0xA0
  0167c	e5933000	 ldr         r3, [r3]
  01680	e3530000	 cmp         r3, #0
  01684	0a000010	 beq         |$LN1@SetOrienta|
  01688	e59d305c	 ldr         r3, [sp, #0x5C]
  0168c	e283309c	 add         r3, r3, #0x9C
  01690	e5933000	 ldr         r3, [r3]
  01694	e3530000	 cmp         r3, #0
  01698	1a00000b	 bne         |$LN1@SetOrienta|

; 603  :         m_pAssocSurface->SetOrientation(eOrientation);

  0169c	e59d1060	 ldr         r1, [sp, #0x60]
  016a0	e59d305c	 ldr         r3, [sp, #0x5C]
  016a4	e28330a0	 add         r3, r3, #0xA0
  016a8	e5932000	 ldr         r2, [r3]
  016ac	e59d305c	 ldr         r3, [sp, #0x5C]
  016b0	e28330a0	 add         r3, r3, #0xA0
  016b4	e5930000	 ldr         r0, [r3]
  016b8	e5923000	 ldr         r3, [r2]
  016bc	e2833038	 add         r3, r3, #0x38
  016c0	e5933000	 ldr         r3, [r3]
  016c4	e1a0e00f	 mov         lr, pc
  016c8	e12fff13	 bx          r3
  016cc		 |$LN1@SetOrienta|

; 604  :     
; 605  :     return TRUE;

  016cc	e3a03001	 mov         r3, #1
  016d0	e58d3048	 str         r3, [sp, #0x48]
  016d4		 |$LN3@SetOrienta|

; 606  : }

  016d4	e59d0048	 ldr         r0, [sp, #0x48]
  016d8	e28dd054	 add         sp, sp, #0x54
  016dc	e89d6000	 ldmia       sp, {sp, lr}
  016e0	e12fff1e	 bx          lr
  016e4		 |$M38024|

			 ENDP  ; |?SetOrientation@OMAPVrfbSurface@@UAAHW4OMAP_SURF_ORIENTATION@@@Z|, OMAPVrfbSurface::SetOrientation

	EXPORT	|??_7OMAPVrfbSurfaceManager@@6B@| [ DATA ] ; OMAPVrfbSurfaceManager::`vftable'
	EXPORT	|??0OMAPSurfaceManager@@QAA@XZ|		; OMAPSurfaceManager::OMAPSurfaceManager
	EXPORT	|??0OMAPVrfbSurfaceManager@@QAA@XZ|	; OMAPVrfbSurfaceManager::OMAPVrfbSurfaceManager
	EXPORT	|?Initialize@OMAPVrfbSurfaceManager@@UAAHK@Z| ; OMAPVrfbSurfaceManager::Initialize
	EXPORT	|?TotalMemorySize@OMAPVrfbSurfaceManager@@UAAKXZ| ; OMAPVrfbSurfaceManager::TotalMemorySize
	EXPORT	|?FreeMemorySize@OMAPVrfbSurfaceManager@@UAAKXZ| ; OMAPVrfbSurfaceManager::FreeMemorySize
	EXPORT	|?VirtualBaseAddr@OMAPVrfbSurfaceManager@@UAAPAXXZ| ; OMAPVrfbSurfaceManager::VirtualBaseAddr
	EXPORT	|?NumPhysicalAddr@OMAPVrfbSurfaceManager@@UAAKXZ| ; OMAPVrfbSurfaceManager::NumPhysicalAddr
	EXPORT	|?PhysicalLen@OMAPVrfbSurfaceManager@@UAAKK@Z| ; OMAPVrfbSurfaceManager::PhysicalLen
	EXPORT	|?PhysicalAddr@OMAPVrfbSurfaceManager@@UAAKK@Z| ; OMAPVrfbSurfaceManager::PhysicalAddr
	EXPORT	|?SupportsRotation@OMAPVrfbSurfaceManager@@UAAHXZ| ; OMAPVrfbSurfaceManager::SupportsRotation
	EXPORT	|?SupportsOffscreenSurfaces@OMAPVrfbSurfaceManager@@UAAHXZ| ; OMAPVrfbSurfaceManager::SupportsOffscreenSurfaces
	EXPORT	|?Allocate@OMAPVrfbSurfaceManager@@UAAHW4OMAP_DSS_PIXELFORMAT@@KKPAPAVOMAPSurface@@PAV3@@Z| ; OMAPVrfbSurfaceManager::Allocate
	EXPORT	|?Allocate@OMAPVrfbSurfaceManager@@UAAHW4OMAP_DSS_PIXELFORMAT@@KKPAPAVOMAPSurface@@@Z| ; OMAPVrfbSurfaceManager::Allocate
	EXPORT	|?AllocateGDI@OMAPVrfbSurfaceManager@@UAAHW4OMAP_DSS_PIXELFORMAT@@KKPAPAVOMAPSurface@@@Z| ; OMAPVrfbSurfaceManager::AllocateGDI
	IMPORT	|??_EOMAPVrfbSurfaceManager@@UAAPAXI@Z|, WEAK |??_GOMAPVrfbSurfaceManager@@UAAPAXI@Z| ; OMAPVrfbSurfaceManager::`vector deleting destructor', OMAPVrfbSurfaceManager::`scalar deleting destructor'

  00058			 AREA	 |.pdata|, PDATA
|$T38032| DCD	|$LN5@OMAPVrfbSu@3|
	DCD	0x40003104

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_7OMAPVrfbSurfaceManager@@6B@| DCD |??_EOMAPVrfbSurfaceManager@@UAAPAXI@Z| ; OMAPVrfbSurfaceManager::`vftable'
	DCD	|?Initialize@OMAPVrfbSurfaceManager@@UAAHK@Z|
	DCD	|?TotalMemorySize@OMAPVrfbSurfaceManager@@UAAKXZ|
	DCD	|?FreeMemorySize@OMAPVrfbSurfaceManager@@UAAKXZ|
	DCD	|?VirtualBaseAddr@OMAPVrfbSurfaceManager@@UAAPAXXZ|
	DCD	|?NumPhysicalAddr@OMAPVrfbSurfaceManager@@UAAKXZ|
	DCD	|?PhysicalLen@OMAPVrfbSurfaceManager@@UAAKK@Z|
	DCD	|?PhysicalAddr@OMAPVrfbSurfaceManager@@UAAKK@Z|
	DCD	|?SupportsRotation@OMAPVrfbSurfaceManager@@UAAHXZ|
	DCD	|?SupportsOffscreenSurfaces@OMAPVrfbSurfaceManager@@UAAHXZ|
	DCD	|?Allocate@OMAPVrfbSurfaceManager@@UAAHW4OMAP_DSS_PIXELFORMAT@@KKPAPAVOMAPSurface@@PAV3@@Z|
	DCD	|?Allocate@OMAPVrfbSurfaceManager@@UAAHW4OMAP_DSS_PIXELFORMAT@@KKPAPAVOMAPSurface@@@Z|
	DCD	|?AllocateGDI@OMAPVrfbSurfaceManager@@UAAHW4OMAP_DSS_PIXELFORMAT@@KKPAPAVOMAPSurface@@@Z|
; Function compile flags: /Odtp

  016e4			 AREA	 |.text|, CODE, ARM

  016e4		 |??0OMAPVrfbSurfaceManager@@QAA@XZ| PROC ; OMAPVrfbSurfaceManager::OMAPVrfbSurfaceManager

; 610  : {

  016e4		 |$LN5@OMAPVrfbSu@3|
  016e4	e1a0c00d	 mov         r12, sp
  016e8	e92d0001	 stmdb       sp!, {r0}
  016ec	e92d5000	 stmdb       sp!, {r12, lr}
  016f0	e24dd008	 sub         sp, sp, #8
  016f4		 |$M38029|
  016f4	e59d0010	 ldr         r0, [sp, #0x10]
  016f8	eb000000	 bl          |??0OMAPSurfaceManager@@QAA@XZ|
  016fc	e58d0004	 str         r0, [sp, #4]
  01700	e59f209c	 ldr         r2, [pc, #0x9C]
  01704	e59d3010	 ldr         r3, [sp, #0x10]
  01708	e5832000	 str         r2, [r3]

; 611  :     //  Initialize properties
; 612  :     m_hHeap = NULL;

  0170c	e59d3010	 ldr         r3, [sp, #0x10]
  01710	e2832004	 add         r2, r3, #4
  01714	e3a03000	 mov         r3, #0
  01718	e5823000	 str         r3, [r2]

; 613  :     m_dwDisplayBufferSize = 0;

  0171c	e59d3010	 ldr         r3, [sp, #0x10]
  01720	e2832008	 add         r2, r3, #8
  01724	e3a03000	 mov         r3, #0
  01728	e5823000	 str         r3, [r2]

; 614  :     m_dwPhysicalDisplayAddr = 0;

  0172c	e59d3010	 ldr         r3, [sp, #0x10]
  01730	e283200c	 add         r2, r3, #0xC
  01734	e3a03000	 mov         r3, #0
  01738	e5823000	 str         r3, [r2]

; 615  :     
; 616  :     m_hVRFB = NULL;

  0173c	e59d3010	 ldr         r3, [sp, #0x10]
  01740	e2832010	 add         r2, r3, #0x10
  01744	e3a03000	 mov         r3, #0
  01748	e5823000	 str         r3, [r2]

; 617  : 
; 618  :     m_hOffscreenHeapPA = NULL;

  0174c	e59d3010	 ldr         r3, [sp, #0x10]
  01750	e2832014	 add         r2, r3, #0x14
  01754	e3a03000	 mov         r3, #0
  01758	e5823000	 str         r3, [r2]

; 619  :     m_hOffscreenHeapVA = NULL;

  0175c	e59d3010	 ldr         r3, [sp, #0x10]
  01760	e2832018	 add         r2, r3, #0x18
  01764	e3a03000	 mov         r3, #0
  01768	e5823000	 str         r3, [r2]

; 620  :     m_pOffscreenBuffer = NULL;

  0176c	e59d3010	 ldr         r3, [sp, #0x10]
  01770	e283201c	 add         r2, r3, #0x1C
  01774	e3a03000	 mov         r3, #0
  01778	e5823000	 str         r3, [r2]

; 621  :     m_dwOffscreenPhysical = 0;

  0177c	e59d3010	 ldr         r3, [sp, #0x10]
  01780	e2832020	 add         r2, r3, #0x20
  01784	e3a03000	 mov         r3, #0
  01788	e5823000	 str         r3, [r2]

; 622  : }

  0178c	e59d3010	 ldr         r3, [sp, #0x10]
  01790	e58d3000	 str         r3, [sp]
  01794	e59d0000	 ldr         r0, [sp]
  01798	e28dd008	 add         sp, sp, #8
  0179c	e89d6000	 ldmia       sp, {sp, lr}
  017a0	e12fff1e	 bx          lr
  017a4		 |$LN6@OMAPVrfbSu@3|
  017a4		 |$LN7@OMAPVrfbSu@3|
  017a4	00000000	 DCD         |??_7OMAPVrfbSurfaceManager@@6B@|
  017a8		 |$M38030|

			 ENDP  ; |??0OMAPVrfbSurfaceManager@@QAA@XZ|, OMAPVrfbSurfaceManager::OMAPVrfbSurfaceManager

	EXPORT	|??_7OMAPSurfaceManager@@6B@| [ DATA ]	; OMAPSurfaceManager::`vftable'
	IMPORT	|??_EOMAPSurfaceManager@@UAAPAXI@Z|, WEAK |??_GOMAPSurfaceManager@@UAAPAXI@Z| ; OMAPSurfaceManager::`vector deleting destructor', OMAPSurfaceManager::`scalar deleting destructor'
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\inc\dssai.h

  00000			 AREA	 |.pdata|, PDATA
|$T38040| DCD	|$LN5@OMAPSurfac@3|
	DCD	0x40000e04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_7OMAPSurfaceManager@@6B@| DCD |??_EOMAPSurfaceManager@@UAAPAXI@Z| ; OMAPSurfaceManager::`vftable'
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|_purecall|
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0OMAPSurfaceManager@@QAA@XZ| PROC	; OMAPSurfaceManager::OMAPSurfaceManager

; 955  :     OMAPSurfaceManager() {};

  00000		 |$LN5@OMAPSurfac@3|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M38037|
  00010	e59f201c	 ldr         r2, [pc, #0x1C]
  00014	e59d300c	 ldr         r3, [sp, #0xC]
  00018	e5832000	 str         r2, [r3]
  0001c	e59d300c	 ldr         r3, [sp, #0xC]
  00020	e58d3000	 str         r3, [sp]
  00024	e59d0000	 ldr         r0, [sp]
  00028	e28dd004	 add         sp, sp, #4
  0002c	e89d6000	 ldmia       sp, {sp, lr}
  00030	e12fff1e	 bx          lr
  00034		 |$LN6@OMAPSurfac@3|
  00034		 |$LN7@OMAPSurfac@3|
  00034	00000000	 DCD         |??_7OMAPSurfaceManager@@6B@|
  00038		 |$M38038|

			 ENDP  ; |??0OMAPSurfaceManager@@QAA@XZ|, OMAPSurfaceManager::OMAPSurfaceManager

	EXPORT	|??1OMAPSurfaceManager@@UAA@XZ|		; OMAPSurfaceManager::~OMAPSurfaceManager

  00000			 AREA	 |.pdata|, PDATA
|$T38050| DCD	|$LN6@scalar@3|
	DCD	0x40001104
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??_GOMAPSurfaceManager@@UAAPAXI@Z| PROC ; OMAPSurfaceManager::`scalar deleting destructor'
  00000		 |$LN6@scalar@3|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M38047|
  00010	e59d000c	 ldr         r0, [sp, #0xC]
  00014	eb000000	 bl          |??1OMAPSurfaceManager@@UAA@XZ|
  00018	e59d3010	 ldr         r3, [sp, #0x10]
  0001c	e3130001	 tst         r3, #1
  00020	0a000001	 beq         |$LN1@scalar@3|
  00024	e59d000c	 ldr         r0, [sp, #0xC]
  00028	eb000000	 bl          |??3@YAXPAX@Z|
  0002c		 |$LN1@scalar@3|
  0002c	e59d300c	 ldr         r3, [sp, #0xC]
  00030	e58d3000	 str         r3, [sp]
  00034	e59d0000	 ldr         r0, [sp]
  00038	e28dd004	 add         sp, sp, #4
  0003c	e89d6000	 ldmia       sp, {sp, lr}
  00040	e12fff1e	 bx          lr
  00044		 |$M38048|

			 ENDP  ; |??_GOMAPSurfaceManager@@UAAPAXI@Z|, OMAPSurfaceManager::`scalar deleting destructor'


  00000			 AREA	 |.pdata|, PDATA
|$T38057| DCD	|$LN5@OMAPSurfac@4|
	DCD	0x40000903
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??1OMAPSurfaceManager@@UAA@XZ| PROC	; OMAPSurfaceManager::~OMAPSurfaceManager

; 962  :     ~OMAPSurfaceManager() {};

  00000		 |$LN5@OMAPSurfac@4|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M38054|
  0000c	e59f200c	 ldr         r2, [pc, #0xC]
  00010	e59d3008	 ldr         r3, [sp, #8]
  00014	e5832000	 str         r2, [r3]
  00018	e89d6000	 ldmia       sp, {sp, lr}
  0001c	e12fff1e	 bx          lr
  00020		 |$LN6@OMAPSurfac@4|
  00020		 |$LN7@OMAPSurfac@4|
  00020	00000000	 DCD         |??_7OMAPSurfaceManager@@6B@|
  00024		 |$M38055|

			 ENDP  ; |??1OMAPSurfaceManager@@UAA@XZ|, OMAPSurfaceManager::~OMAPSurfaceManager


  00000			 AREA	 |.pdata|, PDATA
|$T38067| DCD	|$LN5@SupportsRo|
	DCD	0x40000a04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SupportsRotation@OMAPVrfbSurfaceManager@@UAAHXZ| PROC ; OMAPVrfbSurfaceManager::SupportsRotation

; 1449 :     BOOL        SupportsRotation() { return TRUE; }

  00000		 |$LN5@SupportsRo|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M38064|
  00010	e3a03001	 mov         r3, #1
  00014	e58d3000	 str         r3, [sp]
  00018	e59d0000	 ldr         r0, [sp]
  0001c	e28dd004	 add         sp, sp, #4
  00020	e89d6000	 ldmia       sp, {sp, lr}
  00024	e12fff1e	 bx          lr
  00028		 |$M38065|

			 ENDP  ; |?SupportsRotation@OMAPVrfbSurfaceManager@@UAAHXZ|, OMAPVrfbSurfaceManager::SupportsRotation

	EXPORT	|??1OMAPVrfbSurfaceManager@@UAA@XZ|	; OMAPVrfbSurfaceManager::~OMAPVrfbSurfaceManager

  00000			 AREA	 |.pdata|, PDATA
|$T38075| DCD	|$LN6@scalar@4|
	DCD	0x40001104
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??_GOMAPVrfbSurfaceManager@@UAAPAXI@Z| PROC ; OMAPVrfbSurfaceManager::`scalar deleting destructor'
  00000		 |$LN6@scalar@4|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M38072|
  00010	e59d000c	 ldr         r0, [sp, #0xC]
  00014	eb000000	 bl          |??1OMAPVrfbSurfaceManager@@UAA@XZ|
  00018	e59d3010	 ldr         r3, [sp, #0x10]
  0001c	e3130001	 tst         r3, #1
  00020	0a000001	 beq         |$LN1@scalar@4|
  00024	e59d000c	 ldr         r0, [sp, #0xC]
  00028	eb000000	 bl          |??3@YAXPAX@Z|
  0002c		 |$LN1@scalar@4|
  0002c	e59d300c	 ldr         r3, [sp, #0xC]
  00030	e58d3000	 str         r3, [sp]
  00034	e59d0000	 ldr         r0, [sp]
  00038	e28dd004	 add         sp, sp, #4
  0003c	e89d6000	 ldmia       sp, {sp, lr}
  00040	e12fff1e	 bx          lr
  00044		 |$M38073|

			 ENDP  ; |??_GOMAPVrfbSurfaceManager@@UAAPAXI@Z|, OMAPVrfbSurfaceManager::`scalar deleting destructor'

	EXPORT	|VRFBClose|
	IMPORT	|VirtualFree|

  00060			 AREA	 |.pdata|, PDATA
|$T38082| DCD	|$LN10@OMAPVrfbSu@4|
	DCD	0x40003c04
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\dssai\surfmgr_vrfb.cpp

  017a8			 AREA	 |.text|, CODE, ARM

  017a8		 |??1OMAPVrfbSurfaceManager@@UAA@XZ| PROC ; OMAPVrfbSurfaceManager::~OMAPVrfbSurfaceManager

; 626  : {

  017a8		 |$LN10@OMAPVrfbSu@4|
  017a8	e1a0c00d	 mov         r12, sp
  017ac	e92d0001	 stmdb       sp!, {r0}
  017b0	e92d5000	 stmdb       sp!, {r12, lr}
  017b4	e24dd00c	 sub         sp, sp, #0xC
  017b8		 |$M38079|
  017b8	e59f20d4	 ldr         r2, [pc, #0xD4]
  017bc	e59d3014	 ldr         r3, [sp, #0x14]
  017c0	e5832000	 str         r2, [r3]

; 627  :     Heap*   pHeap = (Heap*) m_hHeap;

  017c4	e59d3014	 ldr         r3, [sp, #0x14]
  017c8	e2833004	 add         r3, r3, #4
  017cc	e5933000	 ldr         r3, [r3]
  017d0	e58d3008	 str         r3, [sp, #8]

; 628  :     Heap*   pOffscreenHeapVA = (Heap*) m_hOffscreenHeapVA;

  017d4	e59d3014	 ldr         r3, [sp, #0x14]
  017d8	e2833018	 add         r3, r3, #0x18
  017dc	e5933000	 ldr         r3, [r3]
  017e0	e58d3004	 str         r3, [sp, #4]

; 629  :     Heap*   pOffscreenHeapPA = (Heap*) m_hOffscreenHeapPA;

  017e4	e59d3014	 ldr         r3, [sp, #0x14]
  017e8	e2833014	 add         r3, r3, #0x14
  017ec	e5933000	 ldr         r3, [r3]
  017f0	e58d3000	 str         r3, [sp]

; 630  :     
; 631  :     //  Free the VRFB manager
; 632  :     if( m_hVRFB )

  017f4	e59d3014	 ldr         r3, [sp, #0x14]
  017f8	e2833010	 add         r3, r3, #0x10
  017fc	e5933000	 ldr         r3, [r3]
  01800	e3530000	 cmp         r3, #0
  01804	0a000003	 beq         |$LN5@OMAPVrfbSu@4|

; 633  :         VRFBClose( m_hVRFB );

  01808	e59d3014	 ldr         r3, [sp, #0x14]
  0180c	e2833010	 add         r3, r3, #0x10
  01810	e5930000	 ldr         r0, [r3]
  01814	eb000000	 bl          VRFBClose
  01818		 |$LN5@OMAPVrfbSu@4|

; 634  :         
; 635  :     //  Free the heap manager
; 636  :     if( pHeap )

  01818	e59d3008	 ldr         r3, [sp, #8]
  0181c	e3530000	 cmp         r3, #0
  01820	0a000001	 beq         |$LN4@OMAPVrfbSu@4|

; 637  :         pHeap->Free();

  01824	e59d0008	 ldr         r0, [sp, #8]
  01828	eb000000	 bl          |?Free@Heap@@QAAXXZ|
  0182c		 |$LN4@OMAPVrfbSu@4|

; 638  : 
; 639  :     //  Free the offscreen virtual address heap manager
; 640  :     if( pOffscreenHeapVA )

  0182c	e59d3004	 ldr         r3, [sp, #4]
  01830	e3530000	 cmp         r3, #0
  01834	0a000001	 beq         |$LN3@OMAPVrfbSu@4|

; 641  :         pOffscreenHeapVA->Free();

  01838	e59d0004	 ldr         r0, [sp, #4]
  0183c	eb000000	 bl          |?Free@Heap@@QAAXXZ|
  01840		 |$LN3@OMAPVrfbSu@4|

; 642  :         
; 643  :     //  Free offscreen memory
; 644  :     if( m_pOffscreenBuffer ) 

  01840	e59d3014	 ldr         r3, [sp, #0x14]
  01844	e283301c	 add         r3, r3, #0x1C
  01848	e5933000	 ldr         r3, [r3]
  0184c	e3530000	 cmp         r3, #0
  01850	0a000005	 beq         |$LN2@OMAPVrfbSu@4|

; 645  :         VirtualFree( m_pOffscreenBuffer, 0, MEM_RELEASE );

  01854	e3a02902	 mov         r2, #2, 18
  01858	e3a01000	 mov         r1, #0
  0185c	e59d3014	 ldr         r3, [sp, #0x14]
  01860	e283301c	 add         r3, r3, #0x1C
  01864	e5930000	 ldr         r0, [r3]
  01868	eb000000	 bl          VirtualFree
  0186c		 |$LN2@OMAPVrfbSu@4|

; 646  : 
; 647  :     //  Free the offscreen physical address heap manager
; 648  :     if( pOffscreenHeapPA )

  0186c	e59d3000	 ldr         r3, [sp]
  01870	e3530000	 cmp         r3, #0
  01874	0a000001	 beq         |$LN1@OMAPVrfbSu@4|

; 649  :         pOffscreenHeapPA->Free();

  01878	e59d0000	 ldr         r0, [sp]
  0187c	eb000000	 bl          |?Free@Heap@@QAAXXZ|
  01880		 |$LN1@OMAPVrfbSu@4|

; 650  :        
; 651  : }

  01880	e59d0014	 ldr         r0, [sp, #0x14]
  01884	eb000000	 bl          |??1OMAPSurfaceManager@@UAA@XZ|
  01888	e28dd00c	 add         sp, sp, #0xC
  0188c	e89d6000	 ldmia       sp, {sp, lr}
  01890	e12fff1e	 bx          lr
  01894		 |$LN11@OMAPVrfbSu@4|
  01894		 |$LN12@OMAPVrfbSu@4|
  01894	00000000	 DCD         |??_7OMAPVrfbSurfaceManager@@6B@|
  01898		 |$M38080|

			 ENDP  ; |??1OMAPVrfbSurfaceManager@@UAA@XZ|, OMAPVrfbSurfaceManager::~OMAPVrfbSurfaceManager

	IMPORT	|LocalFree|
	IMPORT	|CloseHandle|
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\inc\vrfb.h

  00000			 AREA	 |.pdata|, PDATA
|$T38089| DCD	|$LN5@VRFBClose|
	DCD	0x40000f04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |VRFBClose| PROC

; 179  : {

  00000		 |$LN5@VRFBClose|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M38086|

; 180  :     DEVICE_CONTEXT_VRFB *pContext = (DEVICE_CONTEXT_VRFB *)hContext;

  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e58d3000	 str         r3, [sp]

; 181  :     CloseHandle(pContext->hDevice);

  00018	e59d3000	 ldr         r3, [sp]
  0001c	e2833024	 add         r3, r3, #0x24
  00020	e5930000	 ldr         r0, [r3]
  00024	eb000000	 bl          CloseHandle

; 182  :     LocalFree(pContext);

  00028	e59d0000	 ldr         r0, [sp]
  0002c	eb000000	 bl          LocalFree

; 183  : }

  00030	e28dd004	 add         sp, sp, #4
  00034	e89d6000	 ldmia       sp, {sp, lr}
  00038	e12fff1e	 bx          lr
  0003c		 |$M38087|

			 ENDP  ; |VRFBClose|

	EXPORT	|??_C@_1GA@DIFJGIBH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAc?$AAr?$AAe?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HG@FNPHLDFB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAC?$AAe?$AAS?$AAe?$AAt?$AAM?$AAe?$AAm?$AAo?$AAr?$AAy?$AAA?$AAt?$AAt?$AAr?$AAi?$AAb?$AAu@| [ DATA ] ; `string'
	EXPORT	|CeSetMemoryAttributes|
	EXPORT	|??_C@_1GO@MCBJAPFN@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAm?$AAa?$AAp?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAc?$AAr?$AAe?$AAe?$AAn?$AA?5?$AAb@| [ DATA ] ; `string'
	EXPORT	|??_GHeap@@QAAPAXI@Z|			; Heap::`scalar deleting destructor'
	EXPORT	|??_C@_1FI@BBGIFPAP@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAc?$AAr@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GC@HHHEIDGH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAc?$AAr@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GM@OJEHHBPD@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAo?$AAo?$AA?5?$AAf?$AAe?$AAw?$AA?5?$AAV?$AAR?$AAF?$AAB?$AA?5?$AAd?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAv?$AAi?$AAe?$AAw@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DG@ELIGPJJE@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAV?$AAR?$AAF?$AAB?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|VRFBOpen|
	EXPORT	|??_C@_1EM@ENHBMIGK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAh?$AAe?$AAa?$AAp?$AA?5?$AAm?$AAa?$AAn@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FM@NNAPAAMJ@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAv?$AAi?$AAd?$AAe?$AAo?$AA?5?$AAm?$AAe?$AAm?$AAo?$AAr@| [ DATA ] ; `string'
	IMPORT	|VirtualCopy|
	IMPORT	|VirtualAlloc|
	IMPORT	|??0Heap@@QAA@KKPAV0@0@Z|		; Heap::Heap
	IMPORT	|??2@YAPAXI@Z|				; operator new
	IMPORT	|LcdPdd_GetMemory|

  00068			 AREA	 |.pdata|, PDATA
|$T38139| DCD	|$LN55@Initialize|
	DCD	0x40017904
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\dssai\surfmgr_vrfb.cpp

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GA@DIFJGIBH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAc?$AAr?$AAe?$AAe@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "U", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e"
	DCB	0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "c", 0x0, "r"
	DCB	0x0, "e", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, " ", 0x0, "o"
	DCB	0x0, "f", 0x0, "f", 0x0, "s", 0x0, "c", 0x0, "r", 0x0, "e"
	DCB	0x0, "e", 0x0, "n", 0x0, " ", 0x0, "h", 0x0, "e", 0x0, "a"
	DCB	0x0, "p", 0x0, " ", 0x0, "m", 0x0, "a", 0x0, "n", 0x0, "a"
	DCB	0x0, "g", 0x0, "e", 0x0, "r", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HG@FNPHLDFB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAC?$AAe?$AAS?$AAe?$AAt?$AAM?$AAe?$AAm?$AAo?$AAr?$AAy?$AAA?$AAt?$AAt?$AAr?$AAi?$AAb?$AAu@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "F", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "C", 0x0, "e", 0x0, "S", 0x0, "e", 0x0, "t"
	DCB	0x0, "M", 0x0, "e", 0x0, "m", 0x0, "o", 0x0, "r", 0x0, "y"
	DCB	0x0, "A", 0x0, "t", 0x0, "t", 0x0, "r", 0x0, "i", 0x0, "b"
	DCB	0x0, "u", 0x0, "t", 0x0, "e", 0x0, "s", 0x0, " ", 0x0, "f"
	DCB	0x0, "o", 0x0, "r", 0x0, " ", 0x0, "o", 0x0, "f", 0x0, "f"
	DCB	0x0, "s", 0x0, "c", 0x0, "r", 0x0, "e", 0x0, "e", 0x0, "n"
	DCB	0x0, " ", 0x0, "b", 0x0, "u", 0x0, "f", 0x0, "f", 0x0, "e"
	DCB	0x0, "r", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GO@MCBJAPFN@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAm?$AAa?$AAp?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAc?$AAr?$AAe?$AAe?$AAn?$AA?5?$AAb@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "U", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e"
	DCB	0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "m", 0x0, "a"
	DCB	0x0, "p", 0x0, " ", 0x0, "o", 0x0, "f", 0x0, "f", 0x0, "s"
	DCB	0x0, "c", 0x0, "r", 0x0, "e", 0x0, "e", 0x0, "n", 0x0, " "
	DCB	0x0, "b", 0x0, "u", 0x0, "f", 0x0, "f", 0x0, "e", 0x0, "r"
	DCB	0x0, " ", 0x0, "p", 0x0, "h", 0x0, "y", 0x0, "s", 0x0, "i"
	DCB	0x0, "c", 0x0, "a", 0x0, "l", 0x0, " ", 0x0, "m", 0x0, "e"
	DCB	0x0, "m", 0x0, "o", 0x0, "r", 0x0, "y", 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FI@BBGIFPAP@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAc?$AAr@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "U", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e"
	DCB	0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "a", 0x0, "l"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, " ", 0x0, "o", 0x0, "f", 0x0, "f", 0x0, "s", 0x0, "c"
	DCB	0x0, "r", 0x0, "e", 0x0, "e", 0x0, "n", 0x0, " ", 0x0, "b"
	DCB	0x0, "u", 0x0, "f", 0x0, "f", 0x0, "e", 0x0, "r", 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GC@HHHEIDGH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAc?$AAr@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "U", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e"
	DCB	0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "a", 0x0, "l"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, " ", 0x0, "o", 0x0, "f", 0x0, "f", 0x0, "s", 0x0, "c"
	DCB	0x0, "r", 0x0, "e", 0x0, "e", 0x0, "n", 0x0, " ", 0x0, "h"
	DCB	0x0, "e", 0x0, "a", 0x0, "p", 0x0, " ", 0x0, "m", 0x0, "e"
	DCB	0x0, "m", 0x0, "o", 0x0, "r", 0x0, "y", 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GM@OJEHHBPD@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAo?$AAo?$AA?5?$AAf?$AAe?$AAw?$AA?5?$AAV?$AAR?$AAF?$AAB?$AA?5?$AAd?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAv?$AAi?$AAe?$AAw@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "T", 0x0, "o", 0x0, "o", 0x0, " ", 0x0, "f", 0x0, "e"
	DCB	0x0, "w", 0x0, " ", 0x0, "V", 0x0, "R", 0x0, "F", 0x0, "B"
	DCB	0x0, " ", 0x0, "d", 0x0, "i", 0x0, "s", 0x0, "p", 0x0, "l"
	DCB	0x0, "a", 0x0, "y", 0x0, " ", 0x0, "v", 0x0, "i", 0x0, "e"
	DCB	0x0, "w", 0x0, "s", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, " "
	DCB	0x0, "-", 0x0, " ", 0x0, "s", 0x0, "h", 0x0, "o", 0x0, "u"
	DCB	0x0, "l", 0x0, "d", 0x0, " ", 0x0, "b", 0x0, "e", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DG@ELIGPJJE@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAV?$AAR?$AAF?$AAB?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "V", 0x0, "R", 0x0, "F", 0x0, "B", 0x0, "O", 0x0, "p"
	DCB	0x0, "e", 0x0, "n", 0x0, "(", 0x0, ")", 0x0, " ", 0x0, "f"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EM@ENHBMIGK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAh?$AAe?$AAa?$AAp?$AA?5?$AAm?$AAa?$AAn@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "U", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e"
	DCB	0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "c", 0x0, "r"
	DCB	0x0, "e", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, " ", 0x0, "h"
	DCB	0x0, "e", 0x0, "a", 0x0, "p", 0x0, " ", 0x0, "m", 0x0, "a"
	DCB	0x0, "n", 0x0, "a", 0x0, "g", 0x0, "e", 0x0, "r", 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FM@NNAPAAMJ@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAv?$AAi?$AAd?$AAe?$AAo?$AA?5?$AAm?$AAe?$AAm?$AAo?$AAr@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "U", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e"
	DCB	0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "g", 0x0, "e"
	DCB	0x0, "t", 0x0, " ", 0x0, "v", 0x0, "i", 0x0, "d", 0x0, "e"
	DCB	0x0, "o", 0x0, " ", 0x0, "m", 0x0, "e", 0x0, "m", 0x0, "o"
	DCB	0x0, "r", 0x0, "y", 0x0, " ", 0x0, "a", 0x0, "t", 0x0, "t"
	DCB	0x0, "r", 0x0, "i", 0x0, "b", 0x0, "u", 0x0, "t", 0x0, "e"
	DCB	0x0, "s", 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  01898			 AREA	 |.text|, CODE, ARM

  01898		 |?Initialize@OMAPVrfbSurfaceManager@@UAAHK@Z| PROC ; OMAPVrfbSurfaceManager::Initialize

; 658  : {

  01898		 |$LN55@Initialize|
  01898	e1a0c00d	 mov         r12, sp
  0189c	e92d0003	 stmdb       sp!, {r0, r1}
  018a0	e92d5000	 stmdb       sp!, {r12, lr}
  018a4	e24dd0cc	 sub         sp, sp, #0xCC
  018a8		 |$M38136|

; 659  :     BOOL    bResult = FALSE;

  018a8	e3a03000	 mov         r3, #0
  018ac	e58d3008	 str         r3, [sp, #8]

; 660  :     Heap*   pHeap;
; 661  :     DWORD   dwNumDisplayViews;
; 662  :     
; 663  :     
; 664  :     //  Get video memory attributes from LCD PDD
; 665  :     bResult = LcdPdd_GetMemory( &m_dwDisplayBufferSize, &m_dwPhysicalDisplayAddr );

  018b0	e59d30d4	 ldr         r3, [sp, #0xD4]
  018b4	e283100c	 add         r1, r3, #0xC
  018b8	e59d30d4	 ldr         r3, [sp, #0xD4]
  018bc	e2830008	 add         r0, r3, #8
  018c0	eb000000	 bl          LcdPdd_GetMemory
  018c4	e58d0048	 str         r0, [sp, #0x48]
  018c8	e59d3048	 ldr         r3, [sp, #0x48]
  018cc	e58d3008	 str         r3, [sp, #8]

; 666  :     if( !bResult )

  018d0	e59d3008	 ldr         r3, [sp, #8]
  018d4	e3530000	 cmp         r3, #0
  018d8	1a000008	 bne         |$LN20@Initialize|

; 667  :     {
; 668  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: Unable to get video memory attributes\n"));

  018dc	e59f0594	 ldr         r0, [pc, #0x594]
  018e0	eb000000	 bl          NKDbgPrintfW
  018e4	e3a03001	 mov         r3, #1
  018e8	e58d304c	 str         r3, [sp, #0x4C]
  018ec	ea000001	 b           |$LN24@Initialize|
  018f0	e3a03000	 mov         r3, #0
  018f4	e58d304c	 str         r3, [sp, #0x4C]
  018f8		 |$LN24@Initialize|

; 669  :         goto cleanUp;

  018f8	ea000150	 b           |$LN19@Initialize|
  018fc	ea00014f	 b           |$cleanUp$37463|
  01900		 |$LN20@Initialize|

; 670  :     }
; 671  : 
; 672  : 
; 673  :     //  Check that offscreen reserve is not greater that all of display memory
; 674  :     if( dwOffscreenMemory >= m_dwDisplayBufferSize )

  01900	e59d30d4	 ldr         r3, [sp, #0xD4]
  01904	e2833008	 add         r3, r3, #8
  01908	e59d20d8	 ldr         r2, [sp, #0xD8]
  0190c	e5933000	 ldr         r3, [r3]
  01910	e1520003	 cmp         r2, r3
  01914	3a000001	 bcc         |$LN18@Initialize|

; 675  :         dwOffscreenMemory = 0;

  01918	e3a03000	 mov         r3, #0
  0191c	e58d30d8	 str         r3, [sp, #0xD8]
  01920		 |$LN18@Initialize|

; 676  : 
; 677  : 
; 678  :     //  Initialize the heap manager for the display physical memory
; 679  :     pHeap = new Heap(m_dwDisplayBufferSize, (DWORD) m_dwPhysicalDisplayAddr);

  01920	e3a00014	 mov         r0, #0x14
  01924	eb000000	 bl          |??2@YAPAXI@Z|
  01928	e58d0050	 str         r0, [sp, #0x50]
  0192c	e59d3050	 ldr         r3, [sp, #0x50]
  01930	e58d3014	 str         r3, [sp, #0x14]
  01934	e59d3014	 ldr         r3, [sp, #0x14]
  01938	e3530000	 cmp         r3, #0
  0193c	0a00000e	 beq         |$LN25@Initialize|
  01940	e3a03000	 mov         r3, #0
  01944	e58d3000	 str         r3, [sp]
  01948	e3a03000	 mov         r3, #0
  0194c	e59d20d4	 ldr         r2, [sp, #0xD4]
  01950	e282200c	 add         r2, r2, #0xC
  01954	e5922000	 ldr         r2, [r2]
  01958	e59d10d4	 ldr         r1, [sp, #0xD4]
  0195c	e2811008	 add         r1, r1, #8
  01960	e5911000	 ldr         r1, [r1]
  01964	e59d0014	 ldr         r0, [sp, #0x14]
  01968	eb000000	 bl          |??0Heap@@QAA@KKPAV0@0@Z|
  0196c	e58d0054	 str         r0, [sp, #0x54]
  01970	e59d3054	 ldr         r3, [sp, #0x54]
  01974	e58d3058	 str         r3, [sp, #0x58]
  01978	ea000001	 b           |$LN26@Initialize|
  0197c		 |$LN25@Initialize|
  0197c	e3a03000	 mov         r3, #0
  01980	e58d3058	 str         r3, [sp, #0x58]
  01984		 |$LN26@Initialize|
  01984	e59d3058	 ldr         r3, [sp, #0x58]
  01988	e58d3004	 str         r3, [sp, #4]

; 680  :     if( pHeap == NULL )

  0198c	e59d3004	 ldr         r3, [sp, #4]
  01990	e3530000	 cmp         r3, #0
  01994	1a000008	 bne         |$LN17@Initialize|

; 681  :     {
; 682  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: Unable to create heap manager\n"));

  01998	e59f04d4	 ldr         r0, [pc, #0x4D4]
  0199c	eb000000	 bl          NKDbgPrintfW
  019a0	e3a03001	 mov         r3, #1
  019a4	e58d305c	 str         r3, [sp, #0x5C]
  019a8	ea000001	 b           |$LN28@Initialize|
  019ac	e3a03000	 mov         r3, #0
  019b0	e58d305c	 str         r3, [sp, #0x5C]
  019b4		 |$LN28@Initialize|

; 683  :         goto cleanUp;

  019b4	ea000121	 b           |$LN16@Initialize|
  019b8	ea000120	 b           |$cleanUp$37463|
  019bc		 |$LN17@Initialize|

; 684  :     }
; 685  :     
; 686  :     m_hHeap = (HANDLE) pHeap;

  019bc	e59d30d4	 ldr         r3, [sp, #0xD4]
  019c0	e2832004	 add         r2, r3, #4
  019c4	e59d3004	 ldr         r3, [sp, #4]
  019c8	e5823000	 str         r3, [r2]

; 687  : 
; 688  : 
; 689  :     //  Open handle to VRFB manager
; 690  :     m_hVRFB = VRFBOpen();

  019cc	eb000000	 bl          VRFBOpen
  019d0	e58d0060	 str         r0, [sp, #0x60]
  019d4	e59d30d4	 ldr         r3, [sp, #0xD4]
  019d8	e2832010	 add         r2, r3, #0x10
  019dc	e59d3060	 ldr         r3, [sp, #0x60]
  019e0	e5823000	 str         r3, [r2]

; 691  :     if( m_hVRFB == NULL )

  019e4	e59d30d4	 ldr         r3, [sp, #0xD4]
  019e8	e2833010	 add         r3, r3, #0x10
  019ec	e5933000	 ldr         r3, [r3]
  019f0	e3530000	 cmp         r3, #0
  019f4	1a000008	 bne         |$LN15@Initialize|

; 692  :     {
; 693  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: VRFBOpen() failed\r\n"));

  019f8	e59f0470	 ldr         r0, [pc, #0x470]
  019fc	eb000000	 bl          NKDbgPrintfW
  01a00	e3a03001	 mov         r3, #1
  01a04	e58d3064	 str         r3, [sp, #0x64]
  01a08	ea000001	 b           |$LN30@Initialize|
  01a0c	e3a03000	 mov         r3, #0
  01a10	e58d3064	 str         r3, [sp, #0x64]
  01a14		 |$LN30@Initialize|

; 694  :         goto cleanUp;

  01a14	ea000109	 b           |$LN14@Initialize|
  01a18	ea000108	 b           |$cleanUp$37463|
  01a1c		 |$LN15@Initialize|

; 695  :     }
; 696  : 
; 697  :     
; 698  :     //  Get number of display views
; 699  :     dwNumDisplayViews = VRFBNumDisplayViews( m_hVRFB );

  01a1c	e59d30d4	 ldr         r3, [sp, #0xD4]
  01a20	e2833010	 add         r3, r3, #0x10
  01a24	e5930000	 ldr         r0, [r3]
  01a28	eb000000	 bl          VRFBNumDisplayViews
  01a2c	e58d0068	 str         r0, [sp, #0x68]
  01a30	e59d3068	 ldr         r3, [sp, #0x68]
  01a34	e58d300c	 str         r3, [sp, #0xC]

; 700  :     if( dwNumDisplayViews < MIN_NUM_VIEWS )

  01a38	e59d300c	 ldr         r3, [sp, #0xC]
  01a3c	e3530004	 cmp         r3, #4
  01a40	2a00000a	 bcs         |$LN13@Initialize|

; 701  :     {
; 702  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: Too few VRFB display views %d - should be %d\r\n", dwNumDisplayViews, MIN_NUM_VIEWS));

  01a44	e3a02004	 mov         r2, #4
  01a48	e59d100c	 ldr         r1, [sp, #0xC]
  01a4c	e59f0418	 ldr         r0, [pc, #0x418]
  01a50	eb000000	 bl          NKDbgPrintfW
  01a54	e3a03001	 mov         r3, #1
  01a58	e58d306c	 str         r3, [sp, #0x6C]
  01a5c	ea000001	 b           |$LN32@Initialize|
  01a60	e3a03000	 mov         r3, #0
  01a64	e58d306c	 str         r3, [sp, #0x6C]
  01a68		 |$LN32@Initialize|

; 703  :         goto cleanUp;

  01a68	ea0000f4	 b           |$LN12@Initialize|
  01a6c	ea0000f3	 b           |$cleanUp$37463|
  01a70		 |$LN13@Initialize|

; 704  :     }
; 705  : 
; 706  :     //  Success for main memory.  If the following offscreen surface allocation fails, the driver can still continue to operate
; 707  :     //  without those surfaces
; 708  :     bResult = TRUE;

  01a70	e3a03001	 mov         r3, #1
  01a74	e58d3008	 str         r3, [sp, #8]

; 709  : 
; 710  :     
; 711  :     //  Allocate physical memory for offscreen surfaces
; 712  :     if( dwOffscreenMemory > 0 )

  01a78	e59d30d8	 ldr         r3, [sp, #0xD8]
  01a7c	e3530000	 cmp         r3, #0
  01a80	9a0000ee	 bls         |$LN11@Initialize|

; 713  :     {
; 714  :         Heap*   pHeapPA = (Heap *) m_hHeap;

  01a84	e59d30d4	 ldr         r3, [sp, #0xD4]
  01a88	e2833004	 add         r3, r3, #4
  01a8c	e5933000	 ldr         r3, [r3]
  01a90	e58d3010	 str         r3, [sp, #0x10]

; 715  :         
; 716  :         //  Carve out from the VRFB physical memory heap a block for offscreen surfaces 
; 717  :         pHeap = pHeapPA->Allocate( dwOffscreenMemory );

  01a94	e59d10d8	 ldr         r1, [sp, #0xD8]
  01a98	e59d0010	 ldr         r0, [sp, #0x10]
  01a9c	eb000000	 bl          |?Allocate@Heap@@QAAPAV1@K@Z|
  01aa0	e58d0070	 str         r0, [sp, #0x70]
  01aa4	e59d3070	 ldr         r3, [sp, #0x70]
  01aa8	e58d3004	 str         r3, [sp, #4]

; 718  :         if( pHeap == NULL )

  01aac	e59d3004	 ldr         r3, [sp, #4]
  01ab0	e3530000	 cmp         r3, #0
  01ab4	1a000008	 bne         |$LN10@Initialize|

; 719  :         {
; 720  :             DEBUGMSG (ZONE_ERROR, (L"ERROR: Unable to allocate offscreen heap memory\n"));

  01ab8	e59f03a8	 ldr         r0, [pc, #0x3A8]
  01abc	eb000000	 bl          NKDbgPrintfW
  01ac0	e3a03001	 mov         r3, #1
  01ac4	e58d3074	 str         r3, [sp, #0x74]
  01ac8	ea000001	 b           |$LN34@Initialize|
  01acc	e3a03000	 mov         r3, #0
  01ad0	e58d3074	 str         r3, [sp, #0x74]
  01ad4		 |$LN34@Initialize|

; 721  :             goto cleanUp;

  01ad4	ea0000d9	 b           |$LN9@Initialize|
  01ad8	ea0000d8	 b           |$cleanUp$37463|
  01adc		 |$LN10@Initialize|

; 722  :         }
; 723  : 
; 724  :         //  Map physical memory to VM for offscreen buffers
; 725  :         m_pOffscreenBuffer = VirtualAlloc(0, dwOffscreenMemory, MEM_RESERVE, PAGE_NOACCESS);

  01adc	e3a03001	 mov         r3, #1
  01ae0	e3a02a02	 mov         r2, #2, 20
  01ae4	e59d10d8	 ldr         r1, [sp, #0xD8]
  01ae8	e3a00000	 mov         r0, #0
  01aec	eb000000	 bl          VirtualAlloc
  01af0	e58d0078	 str         r0, [sp, #0x78]
  01af4	e59d30d4	 ldr         r3, [sp, #0xD4]
  01af8	e283201c	 add         r2, r3, #0x1C
  01afc	e59d3078	 ldr         r3, [sp, #0x78]
  01b00	e5823000	 str         r3, [r2]

; 726  :         if( !m_pOffscreenBuffer )

  01b04	e59d30d4	 ldr         r3, [sp, #0xD4]
  01b08	e283301c	 add         r3, r3, #0x1C
  01b0c	e5933000	 ldr         r3, [r3]
  01b10	e3530000	 cmp         r3, #0
  01b14	1a00001c	 bne         |$LN8@Initialize|

; 727  :         {
; 728  :             DEBUGMSG (ZONE_ERROR, (L"ERROR: Unable to allocate offscreen buffer\n"));

  01b18	e59f0344	 ldr         r0, [pc, #0x344]
  01b1c	eb000000	 bl          NKDbgPrintfW
  01b20	e3a03001	 mov         r3, #1
  01b24	e58d307c	 str         r3, [sp, #0x7C]
  01b28	ea000001	 b           |$LN36@Initialize|
  01b2c	e3a03000	 mov         r3, #0
  01b30	e58d307c	 str         r3, [sp, #0x7C]
  01b34		 |$LN36@Initialize|

; 729  :             delete pHeap;

  01b34	e59d3004	 ldr         r3, [sp, #4]
  01b38	e58d301c	 str         r3, [sp, #0x1C]
  01b3c	e59d301c	 ldr         r3, [sp, #0x1C]
  01b40	e58d3018	 str         r3, [sp, #0x18]
  01b44	e59d3018	 ldr         r3, [sp, #0x18]
  01b48	e3530000	 cmp         r3, #0
  01b4c	0a000006	 beq         |$LN37@Initialize|
  01b50	e3a01001	 mov         r1, #1
  01b54	e59d0018	 ldr         r0, [sp, #0x18]
  01b58	eb000000	 bl          |??_GHeap@@QAAPAXI@Z|
  01b5c	e58d0080	 str         r0, [sp, #0x80]
  01b60	e59d3080	 ldr         r3, [sp, #0x80]
  01b64	e58d3084	 str         r3, [sp, #0x84]
  01b68	ea000001	 b           |$LN38@Initialize|
  01b6c		 |$LN37@Initialize|
  01b6c	e3a03000	 mov         r3, #0
  01b70	e58d3084	 str         r3, [sp, #0x84]
  01b74		 |$LN38@Initialize|

; 730  :             m_pOffscreenBuffer = NULL;

  01b74	e59d30d4	 ldr         r3, [sp, #0xD4]
  01b78	e283201c	 add         r2, r3, #0x1C
  01b7c	e3a03000	 mov         r3, #0
  01b80	e5823000	 str         r3, [r2]
  01b84	ea0000ad	 b           |$LN7@Initialize|

; 731  :             goto cleanUp;

  01b88	ea0000ac	 b           |$cleanUp$37463|
  01b8c		 |$LN8@Initialize|

; 732  :         }
; 733  : 
; 734  :         //  VirtualCopy offscreen memory region
; 735  :         if( !VirtualCopy(m_pOffscreenBuffer, (void *)(pHeap->Address() >> 8), dwOffscreenMemory, PAGE_READWRITE | PAGE_NOCACHE | PAGE_PHYSICAL))

  01b8c	e59d0004	 ldr         r0, [sp, #4]
  01b90	eb000000	 bl          |?Address@Heap@@QAAKXZ|
  01b94	e58d0088	 str         r0, [sp, #0x88]
  01b98	e3a03c06	 mov         r3, #6, 24
  01b9c	e3833004	 orr         r3, r3, #4
  01ba0	e59d20d8	 ldr         r2, [sp, #0xD8]
  01ba4	e59d1088	 ldr         r1, [sp, #0x88]
  01ba8	e1a01421	 mov         r1, r1, lsr #8
  01bac	e59d00d4	 ldr         r0, [sp, #0xD4]
  01bb0	e280001c	 add         r0, r0, #0x1C
  01bb4	e5900000	 ldr         r0, [r0]
  01bb8	eb000000	 bl          VirtualCopy
  01bbc	e58d008c	 str         r0, [sp, #0x8C]
  01bc0	e59d308c	 ldr         r3, [sp, #0x8C]
  01bc4	e3530000	 cmp         r3, #0
  01bc8	1a00001c	 bne         |$LN6@Initialize|

; 736  :         {
; 737  :             DEBUGMSG (ZONE_ERROR, (L"ERROR: Unable to map offscreen buffer physical memory\n"));

  01bcc	e59f028c	 ldr         r0, [pc, #0x28C]
  01bd0	eb000000	 bl          NKDbgPrintfW
  01bd4	e3a03001	 mov         r3, #1
  01bd8	e58d3090	 str         r3, [sp, #0x90]
  01bdc	ea000001	 b           |$LN40@Initialize|
  01be0	e3a03000	 mov         r3, #0
  01be4	e58d3090	 str         r3, [sp, #0x90]
  01be8		 |$LN40@Initialize|

; 738  :             delete pHeap;

  01be8	e59d3004	 ldr         r3, [sp, #4]
  01bec	e58d3024	 str         r3, [sp, #0x24]
  01bf0	e59d3024	 ldr         r3, [sp, #0x24]
  01bf4	e58d3020	 str         r3, [sp, #0x20]
  01bf8	e59d3020	 ldr         r3, [sp, #0x20]
  01bfc	e3530000	 cmp         r3, #0
  01c00	0a000006	 beq         |$LN41@Initialize|
  01c04	e3a01001	 mov         r1, #1
  01c08	e59d0020	 ldr         r0, [sp, #0x20]
  01c0c	eb000000	 bl          |??_GHeap@@QAAPAXI@Z|
  01c10	e58d0094	 str         r0, [sp, #0x94]
  01c14	e59d3094	 ldr         r3, [sp, #0x94]
  01c18	e58d3098	 str         r3, [sp, #0x98]
  01c1c	ea000001	 b           |$LN42@Initialize|
  01c20		 |$LN41@Initialize|
  01c20	e3a03000	 mov         r3, #0
  01c24	e58d3098	 str         r3, [sp, #0x98]
  01c28		 |$LN42@Initialize|

; 739  :             m_pOffscreenBuffer = NULL;

  01c28	e59d30d4	 ldr         r3, [sp, #0xD4]
  01c2c	e283201c	 add         r2, r3, #0x1C
  01c30	e3a03000	 mov         r3, #0
  01c34	e5823000	 str         r3, [r2]
  01c38	ea000080	 b           |$LN5@Initialize|

; 740  :             goto cleanUp;

  01c3c	ea00007f	 b           |$cleanUp$37463|
  01c40		 |$LN6@Initialize|

; 741  :         }
; 742  : 
; 743  :         //  Change the attributes of the buffer for cache write combine
; 744  :         if( !CeSetMemoryAttributes(m_pOffscreenBuffer, (void *)(pHeap->Address() >> 8), dwOffscreenMemory, PAGE_WRITECOMBINE))

  01c40	e59d0004	 ldr         r0, [sp, #4]
  01c44	eb000000	 bl          |?Address@Heap@@QAAKXZ|
  01c48	e58d009c	 str         r0, [sp, #0x9C]
  01c4c	e3a03b01	 mov         r3, #1, 22
  01c50	e59d20d8	 ldr         r2, [sp, #0xD8]
  01c54	e59d109c	 ldr         r1, [sp, #0x9C]
  01c58	e1a01421	 mov         r1, r1, lsr #8
  01c5c	e59d00d4	 ldr         r0, [sp, #0xD4]
  01c60	e280001c	 add         r0, r0, #0x1C
  01c64	e5900000	 ldr         r0, [r0]
  01c68	eb000000	 bl          CeSetMemoryAttributes
  01c6c	e58d00a0	 str         r0, [sp, #0xA0]
  01c70	e59d30a0	 ldr         r3, [sp, #0xA0]
  01c74	e3530000	 cmp         r3, #0
  01c78	1a000022	 bne         |$LN4@Initialize|

; 745  :         {
; 746  :             DEBUGMSG(ZONE_ERROR, (L"ERROR: Failed CeSetMemoryAttributes for offscreen buffer\r\n"));

  01c7c	e59f01d8	 ldr         r0, [pc, #0x1D8]
  01c80	eb000000	 bl          NKDbgPrintfW
  01c84	e3a03001	 mov         r3, #1
  01c88	e58d30a4	 str         r3, [sp, #0xA4]
  01c8c	ea000001	 b           |$LN44@Initialize|
  01c90	e3a03000	 mov         r3, #0
  01c94	e58d30a4	 str         r3, [sp, #0xA4]
  01c98		 |$LN44@Initialize|

; 747  :             VirtualFree( m_pOffscreenBuffer, 0, MEM_RELEASE );

  01c98	e3a02902	 mov         r2, #2, 18
  01c9c	e3a01000	 mov         r1, #0
  01ca0	e59d30d4	 ldr         r3, [sp, #0xD4]
  01ca4	e283301c	 add         r3, r3, #0x1C
  01ca8	e5930000	 ldr         r0, [r3]
  01cac	eb000000	 bl          VirtualFree

; 748  :             delete pHeap;

  01cb0	e59d3004	 ldr         r3, [sp, #4]
  01cb4	e58d302c	 str         r3, [sp, #0x2C]
  01cb8	e59d302c	 ldr         r3, [sp, #0x2C]
  01cbc	e58d3028	 str         r3, [sp, #0x28]
  01cc0	e59d3028	 ldr         r3, [sp, #0x28]
  01cc4	e3530000	 cmp         r3, #0
  01cc8	0a000006	 beq         |$LN45@Initialize|
  01ccc	e3a01001	 mov         r1, #1
  01cd0	e59d0028	 ldr         r0, [sp, #0x28]
  01cd4	eb000000	 bl          |??_GHeap@@QAAPAXI@Z|
  01cd8	e58d00a8	 str         r0, [sp, #0xA8]
  01cdc	e59d30a8	 ldr         r3, [sp, #0xA8]
  01ce0	e58d30ac	 str         r3, [sp, #0xAC]
  01ce4	ea000001	 b           |$LN46@Initialize|
  01ce8		 |$LN45@Initialize|
  01ce8	e3a03000	 mov         r3, #0
  01cec	e58d30ac	 str         r3, [sp, #0xAC]
  01cf0		 |$LN46@Initialize|

; 749  :             m_pOffscreenBuffer = NULL;

  01cf0	e59d30d4	 ldr         r3, [sp, #0xD4]
  01cf4	e283201c	 add         r2, r3, #0x1C
  01cf8	e3a03000	 mov         r3, #0
  01cfc	e5823000	 str         r3, [r2]
  01d00	ea00004e	 b           |$LN3@Initialize|

; 750  :             goto cleanUp;

  01d04	ea00004d	 b           |$cleanUp$37463|
  01d08		 |$LN4@Initialize|

; 751  :         }
; 752  : 
; 753  :         m_hOffscreenHeapPA = (HANDLE) pHeap;

  01d08	e59d30d4	 ldr         r3, [sp, #0xD4]
  01d0c	e2832014	 add         r2, r3, #0x14
  01d10	e59d3004	 ldr         r3, [sp, #4]
  01d14	e5823000	 str         r3, [r2]

; 754  :         m_dwOffscreenPhysical = pHeap->Address();

  01d18	e59d0004	 ldr         r0, [sp, #4]
  01d1c	eb000000	 bl          |?Address@Heap@@QAAKXZ|
  01d20	e58d00b0	 str         r0, [sp, #0xB0]
  01d24	e59d30d4	 ldr         r3, [sp, #0xD4]
  01d28	e2832020	 add         r2, r3, #0x20
  01d2c	e59d30b0	 ldr         r3, [sp, #0xB0]
  01d30	e5823000	 str         r3, [r2]

; 755  : 
; 756  :         //  Allocate new heap for the virtual memory for the offscreen surfaces
; 757  :         pHeap = new Heap(dwOffscreenMemory, (DWORD) m_pOffscreenBuffer);

  01d34	e3a00014	 mov         r0, #0x14
  01d38	eb000000	 bl          |??2@YAPAXI@Z|
  01d3c	e58d00b4	 str         r0, [sp, #0xB4]
  01d40	e59d30b4	 ldr         r3, [sp, #0xB4]
  01d44	e58d3030	 str         r3, [sp, #0x30]
  01d48	e59d3030	 ldr         r3, [sp, #0x30]
  01d4c	e3530000	 cmp         r3, #0
  01d50	0a00000c	 beq         |$LN47@Initialize|
  01d54	e3a03000	 mov         r3, #0
  01d58	e58d3000	 str         r3, [sp]
  01d5c	e3a03000	 mov         r3, #0
  01d60	e59d20d4	 ldr         r2, [sp, #0xD4]
  01d64	e282201c	 add         r2, r2, #0x1C
  01d68	e5922000	 ldr         r2, [r2]
  01d6c	e59d10d8	 ldr         r1, [sp, #0xD8]
  01d70	e59d0030	 ldr         r0, [sp, #0x30]
  01d74	eb000000	 bl          |??0Heap@@QAA@KKPAV0@0@Z|
  01d78	e58d00b8	 str         r0, [sp, #0xB8]
  01d7c	e59d30b8	 ldr         r3, [sp, #0xB8]
  01d80	e58d30bc	 str         r3, [sp, #0xBC]
  01d84	ea000001	 b           |$LN48@Initialize|
  01d88		 |$LN47@Initialize|
  01d88	e3a03000	 mov         r3, #0
  01d8c	e58d30bc	 str         r3, [sp, #0xBC]
  01d90		 |$LN48@Initialize|
  01d90	e59d30bc	 ldr         r3, [sp, #0xBC]
  01d94	e58d3004	 str         r3, [sp, #4]

; 758  :         if( pHeap == NULL )

  01d98	e59d3004	 ldr         r3, [sp, #4]
  01d9c	e3530000	 cmp         r3, #0
  01da0	1a000022	 bne         |$LN2@Initialize|

; 759  :         {
; 760  :             DEBUGMSG (ZONE_ERROR, (L"ERROR: Unable to create offscreen heap manager\n"));

  01da4	e59f00ac	 ldr         r0, [pc, #0xAC]
  01da8	eb000000	 bl          NKDbgPrintfW
  01dac	e3a03001	 mov         r3, #1
  01db0	e58d30c0	 str         r3, [sp, #0xC0]
  01db4	ea000001	 b           |$LN50@Initialize|
  01db8	e3a03000	 mov         r3, #0
  01dbc	e58d30c0	 str         r3, [sp, #0xC0]
  01dc0		 |$LN50@Initialize|

; 761  :             VirtualFree( m_pOffscreenBuffer, 0, MEM_RELEASE );

  01dc0	e3a02902	 mov         r2, #2, 18
  01dc4	e3a01000	 mov         r1, #0
  01dc8	e59d30d4	 ldr         r3, [sp, #0xD4]
  01dcc	e283301c	 add         r3, r3, #0x1C
  01dd0	e5930000	 ldr         r0, [r3]
  01dd4	eb000000	 bl          VirtualFree

; 762  :             delete pHeap;

  01dd8	e59d3004	 ldr         r3, [sp, #4]
  01ddc	e58d3038	 str         r3, [sp, #0x38]
  01de0	e59d3038	 ldr         r3, [sp, #0x38]
  01de4	e58d3034	 str         r3, [sp, #0x34]
  01de8	e59d3034	 ldr         r3, [sp, #0x34]
  01dec	e3530000	 cmp         r3, #0
  01df0	0a000006	 beq         |$LN51@Initialize|
  01df4	e3a01001	 mov         r1, #1
  01df8	e59d0034	 ldr         r0, [sp, #0x34]
  01dfc	eb000000	 bl          |??_GHeap@@QAAPAXI@Z|
  01e00	e58d00c4	 str         r0, [sp, #0xC4]
  01e04	e59d30c4	 ldr         r3, [sp, #0xC4]
  01e08	e58d30c8	 str         r3, [sp, #0xC8]
  01e0c	ea000001	 b           |$LN52@Initialize|
  01e10		 |$LN51@Initialize|
  01e10	e3a03000	 mov         r3, #0
  01e14	e58d30c8	 str         r3, [sp, #0xC8]
  01e18		 |$LN52@Initialize|

; 763  :             m_pOffscreenBuffer = NULL;

  01e18	e59d30d4	 ldr         r3, [sp, #0xD4]
  01e1c	e283201c	 add         r2, r3, #0x1C
  01e20	e3a03000	 mov         r3, #0
  01e24	e5823000	 str         r3, [r2]
  01e28	ea000004	 b           |$LN1@Initialize|

; 764  :             goto cleanUp;

  01e2c	ea000003	 b           |$cleanUp$37463|
  01e30		 |$LN2@Initialize|

; 765  :         }
; 766  : 
; 767  :         m_hOffscreenHeapVA = (HANDLE) pHeap;

  01e30	e59d30d4	 ldr         r3, [sp, #0xD4]
  01e34	e2832018	 add         r2, r3, #0x18
  01e38	e59d3004	 ldr         r3, [sp, #4]
  01e3c	e5823000	 str         r3, [r2]
  01e40		 |$LN11@Initialize|
  01e40		 |$LN1@Initialize|
  01e40		 |$LN3@Initialize|
  01e40		 |$LN5@Initialize|
  01e40		 |$LN7@Initialize|
  01e40		 |$LN9@Initialize|
  01e40		 |$LN12@Initialize|
  01e40		 |$LN14@Initialize|
  01e40		 |$LN16@Initialize|
  01e40		 |$LN19@Initialize|
  01e40		 |$cleanUp$37463|

; 768  :     }
; 769  : 
; 770  :     
; 771  : cleanUp:
; 772  :     //  Retrun result
; 773  :     return bResult;

  01e40	e59d3008	 ldr         r3, [sp, #8]
  01e44	e58d3044	 str         r3, [sp, #0x44]

; 774  : }

  01e48	e59d0044	 ldr         r0, [sp, #0x44]
  01e4c	e28dd0cc	 add         sp, sp, #0xCC
  01e50	e89d6000	 ldmia       sp, {sp, lr}
  01e54	e12fff1e	 bx          lr
  01e58		 |$LN56@Initialize|
  01e58		 |$LN57@Initialize|
  01e58	00000000	 DCD         |??_C@_1GA@DIFJGIBH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAc?$AAr?$AAe?$AAe@|
  01e5c		 |$LN58@Initialize|
  01e5c	00000000	 DCD         |??_C@_1HG@FNPHLDFB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAC?$AAe?$AAS?$AAe?$AAt?$AAM?$AAe?$AAm?$AAo?$AAr?$AAy?$AAA?$AAt?$AAt?$AAr?$AAi?$AAb?$AAu@|
  01e60		 |$LN59@Initialize|
  01e60	00000000	 DCD         |??_C@_1GO@MCBJAPFN@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAm?$AAa?$AAp?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAc?$AAr?$AAe?$AAe?$AAn?$AA?5?$AAb@|
  01e64		 |$LN60@Initialize|
  01e64	00000000	 DCD         |??_C@_1FI@BBGIFPAP@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAc?$AAr@|
  01e68		 |$LN61@Initialize|
  01e68	00000000	 DCD         |??_C@_1GC@HHHEIDGH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAc?$AAr@|
  01e6c		 |$LN62@Initialize|
  01e6c	00000000	 DCD         |??_C@_1GM@OJEHHBPD@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAo?$AAo?$AA?5?$AAf?$AAe?$AAw?$AA?5?$AAV?$AAR?$AAF?$AAB?$AA?5?$AAd?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAv?$AAi?$AAe?$AAw@|
  01e70		 |$LN63@Initialize|
  01e70	00000000	 DCD         |??_C@_1DG@ELIGPJJE@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAV?$AAR?$AAF?$AAB?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  01e74		 |$LN64@Initialize|
  01e74	00000000	 DCD         |??_C@_1EM@ENHBMIGK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAh?$AAe?$AAa?$AAp?$AA?5?$AAm?$AAa?$AAn@|
  01e78		 |$LN65@Initialize|
  01e78	00000000	 DCD         |??_C@_1FM@NNAPAAMJ@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAv?$AAi?$AAd?$AAe?$AAo?$AA?5?$AAm?$AAe?$AAm?$AAo?$AAr@|
  01e7c		 |$M38137|

			 ENDP  ; |?Initialize@OMAPVrfbSurfaceManager@@UAAHK@Z|, OMAPVrfbSurfaceManager::Initialize

	IMPORT	|KernelLibIoControl|
; File c:\wince600\public\common\oak\inc\pkfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T38158| DCD	|$LN5@CeSetMemor|
	DCD	0x40001604
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |CeSetMemoryAttributes| PROC

; 1422 : {

  00000		 |$LN5@CeSetMemor|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d000f	 stmdb       sp!, {r0 - r3}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd020	 sub         sp, sp, #0x20
  00010		 |$M38155|

; 1423 :     return KernelLibIoControl ((HANDLE) KMOD_CORE, IOCTL_KLIB_SETMEMORYATTR,
; 1424 :         pVirtualAddr, cbSize, pShiftedPhysAddr, dwAttributes, NULL);

  00010	e3a03000	 mov         r3, #0
  00014	e58d3008	 str         r3, [sp, #8]
  00018	e59d3034	 ldr         r3, [sp, #0x34]
  0001c	e58d3004	 str         r3, [sp, #4]
  00020	e59d302c	 ldr         r3, [sp, #0x2C]
  00024	e58d3000	 str         r3, [sp]
  00028	e59d3030	 ldr         r3, [sp, #0x30]
  0002c	e59d2028	 ldr         r2, [sp, #0x28]
  00030	e3a0100c	 mov         r1, #0xC
  00034	e3a00001	 mov         r0, #1
  00038	eb000000	 bl          KernelLibIoControl
  0003c	e58d001c	 str         r0, [sp, #0x1C]
  00040	e59d301c	 ldr         r3, [sp, #0x1C]
  00044	e58d3018	 str         r3, [sp, #0x18]

; 1425 : }

  00048	e59d0018	 ldr         r0, [sp, #0x18]
  0004c	e28dd020	 add         sp, sp, #0x20
  00050	e89d6000	 ldmia       sp, {sp, lr}
  00054	e12fff1e	 bx          lr
  00058		 |$M38156|

			 ENDP  ; |CeSetMemoryAttributes|

	EXPORT	|??_C@_1M@FFMPJHKO@?$AAV?$AAR?$AAF?$AA1?$AA?3?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|LocalAlloc|
	IMPORT	|CreateFileW|
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\inc\vrfb.h

  00000			 AREA	 |.pdata|, PDATA
|$T38173| DCD	|$LN10@VRFBOpen|
	DCD	0x40004502

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@FFMPJHKO@?$AAV?$AAR?$AAF?$AA1?$AA?3?$AA?$AA@| DCB "V", 0x0, "R", 0x0
	DCB	"F", 0x0, "1", 0x0, ":", 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |VRFBOpen| PROC

; 146  : {

  00000		 |$LN10@VRFBOpen|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004	e24dd044	 sub         sp, sp, #0x44
  00008		 |$M38170|

; 147  :     HANDLE hDevice;
; 148  :     DEVICE_CONTEXT_VRFB *pContext = NULL;

  00008	e3a03000	 mov         r3, #0
  0000c	e58d3014	 str         r3, [sp, #0x14]

; 149  : 
; 150  :     hDevice = CreateFile(VRFB_DEVICE_NAME, 0, 0, NULL, 0, 0, NULL);

  00010	e3a03000	 mov         r3, #0
  00014	e58d3008	 str         r3, [sp, #8]
  00018	e3a03000	 mov         r3, #0
  0001c	e58d3004	 str         r3, [sp, #4]
  00020	e3a03000	 mov         r3, #0
  00024	e58d3000	 str         r3, [sp]
  00028	e3a03000	 mov         r3, #0
  0002c	e3a02000	 mov         r2, #0
  00030	e3a01000	 mov         r1, #0
  00034	e59f00d4	 ldr         r0, [pc, #0xD4]
  00038	eb000000	 bl          CreateFileW
  0003c	e58d0038	 str         r0, [sp, #0x38]
  00040	e59d3038	 ldr         r3, [sp, #0x38]
  00044	e58d3010	 str         r3, [sp, #0x10]

; 151  :     if (hDevice == INVALID_HANDLE_VALUE) goto clean;

  00048	e59d3010	 ldr         r3, [sp, #0x10]
  0004c	e3730001	 cmn         r3, #1
  00050	1a000001	 bne         |$LN5@VRFBOpen|
  00054	ea000026	 b           |$LN4@VRFBOpen|
  00058	ea000025	 b           |$clean$37105|
  0005c		 |$LN5@VRFBOpen|

; 152  : 
; 153  :     // Allocate memory for our handler...
; 154  :     if ((pContext = (DEVICE_CONTEXT_VRFB *)LocalAlloc(
; 155  :         LPTR, sizeof(DEVICE_CONTEXT_VRFB)
; 156  :     )) == NULL) {

  0005c	e3a01028	 mov         r1, #0x28
  00060	e3a00040	 mov         r0, #0x40
  00064	eb000000	 bl          LocalAlloc
  00068	e58d003c	 str         r0, [sp, #0x3C]
  0006c	e59d303c	 ldr         r3, [sp, #0x3C]
  00070	e58d3014	 str         r3, [sp, #0x14]
  00074	e59d3014	 ldr         r3, [sp, #0x14]
  00078	e3530000	 cmp         r3, #0
  0007c	1a000003	 bne         |$LN3@VRFBOpen|

; 157  :         CloseHandle(hDevice);

  00080	e59d0010	 ldr         r0, [sp, #0x10]
  00084	eb000000	 bl          CloseHandle
  00088	ea000019	 b           |$LN2@VRFBOpen|

; 158  :         goto clean;

  0008c	ea000018	 b           |$clean$37105|
  00090		 |$LN3@VRFBOpen|

; 159  :     }
; 160  : 
; 161  :     // Get function pointers.  If not possible (b/c of cross process calls), use IOCTLs instead
; 162  :     if (!DeviceIoControl(
; 163  :         hDevice, IOCTL_DDK_GET_DRIVER_IFC, (VOID*)&DEVICE_IFC_VRFB_GUID,
; 164  :         sizeof(DEVICE_IFC_VRFB_GUID), &pContext->ifc, sizeof(DEVICE_IFC_VRFB),
; 165  :         NULL, NULL
; 166  :     )) {

  00090	e3a03000	 mov         r3, #0
  00094	e58d300c	 str         r3, [sp, #0xC]
  00098	e3a03000	 mov         r3, #0
  0009c	e58d3008	 str         r3, [sp, #8]
  000a0	e3a03024	 mov         r3, #0x24
  000a4	e58d3004	 str         r3, [sp, #4]
  000a8	e59d3014	 ldr         r3, [sp, #0x14]
  000ac	e58d3000	 str         r3, [sp]
  000b0	e3a03010	 mov         r3, #0x10
  000b4	e59f2050	 ldr         r2, [pc, #0x50]
  000b8	e3a01822	 mov         r1, #0x22, 16
  000bc	e3811b01	 orr         r1, r1, #1, 22
  000c0	e59d0010	 ldr         r0, [sp, #0x10]
  000c4	eb000000	 bl          DeviceIoControl
  000c8	e58d0040	 str         r0, [sp, #0x40]
  000cc	e59d3040	 ldr         r3, [sp, #0x40]
  000d0	e3530000	 cmp         r3, #0
  000d4	1a000002	 bne         |$LN1@VRFBOpen|

; 167  :         //  Need to use IOCTLs instead of direct function ptrs
; 168  :         pContext->ifc.context = 0;

  000d8	e59d2014	 ldr         r2, [sp, #0x14]
  000dc	e3a03000	 mov         r3, #0
  000e0	e5823000	 str         r3, [r2]
  000e4		 |$LN1@VRFBOpen|

; 169  :     }
; 170  : 
; 171  :     // Save device handle
; 172  :     pContext->hDevice = hDevice;

  000e4	e59d3014	 ldr         r3, [sp, #0x14]
  000e8	e2832024	 add         r2, r3, #0x24
  000ec	e59d3010	 ldr         r3, [sp, #0x10]
  000f0	e5823000	 str         r3, [r2]
  000f4		 |$LN2@VRFBOpen|
  000f4		 |$LN4@VRFBOpen|
  000f4		 |$clean$37105|

; 173  : 
; 174  : clean:
; 175  :     return pContext;

  000f4	e59d3014	 ldr         r3, [sp, #0x14]
  000f8	e58d3034	 str         r3, [sp, #0x34]

; 176  : }

  000fc	e59d0034	 ldr         r0, [sp, #0x34]
  00100	e28dd044	 add         sp, sp, #0x44
  00104	e49de004	 ldr         lr, [sp], #4
  00108	e12fff1e	 bx          lr
  0010c		 |$LN11@VRFBOpen|
  0010c		 |$LN12@VRFBOpen|
  0010c	00000000	 DCD         |DEVICE_IFC_VRFB_GUID|
  00110		 |$LN13@VRFBOpen|
  00110	00000000	 DCD         |??_C@_1M@FFMPJHKO@?$AAV?$AAR?$AAF?$AA1?$AA?3?$AA?$AA@|
  00114		 |$M38171|

			 ENDP  ; |VRFBOpen|

	IMPORT	|??1Heap@@QAA@XZ|			; Heap::~Heap

  00000			 AREA	 |.pdata|, PDATA
|$T38184| DCD	|$LN6@scalar@5|
	DCD	0x40001104
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??_GHeap@@QAAPAXI@Z| PROC		; Heap::`scalar deleting destructor'
  00000		 |$LN6@scalar@5|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M38181|
  00010	e59d000c	 ldr         r0, [sp, #0xC]
  00014	eb000000	 bl          |??1Heap@@QAA@XZ|
  00018	e59d3010	 ldr         r3, [sp, #0x10]
  0001c	e3130001	 tst         r3, #1
  00020	0a000001	 beq         |$LN1@scalar@5|
  00024	e59d000c	 ldr         r0, [sp, #0xC]
  00028	eb000000	 bl          |??3@YAXPAX@Z|
  0002c		 |$LN1@scalar@5|
  0002c	e59d300c	 ldr         r3, [sp, #0xC]
  00030	e58d3000	 str         r3, [sp]
  00034	e59d0000	 ldr         r0, [sp]
  00038	e28dd004	 add         sp, sp, #4
  0003c	e89d6000	 ldmia       sp, {sp, lr}
  00040	e12fff1e	 bx          lr
  00044		 |$M38182|

			 ENDP  ; |??_GHeap@@QAAPAXI@Z|, Heap::`scalar deleting destructor'


  00070			 AREA	 |.pdata|, PDATA
|$T38192| DCD	|$LN5@TotalMemor|
	DCD	0x40001304
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\dssai\surfmgr_vrfb.cpp

  01e7c			 AREA	 |.text|, CODE, ARM

  01e7c		 |?TotalMemorySize@OMAPVrfbSurfaceManager@@UAAKXZ| PROC ; OMAPVrfbSurfaceManager::TotalMemorySize

; 779  : {

  01e7c		 |$LN5@TotalMemor|
  01e7c	e1a0c00d	 mov         r12, sp
  01e80	e92d0001	 stmdb       sp!, {r0}
  01e84	e92d5000	 stmdb       sp!, {r12, lr}
  01e88	e24dd00c	 sub         sp, sp, #0xC
  01e8c		 |$M38189|

; 780  :     DWORD   dwSize;
; 781  :     
; 782  :     //  Return total display virtual memory size
; 783  :     //  This will be the number of VRFB views times the size of each view
; 784  : 
; 785  :     dwSize = VRFBNumDisplayViews(m_hVRFB) * VRFB_VIEW_SIZE; 

  01e8c	e59d3014	 ldr         r3, [sp, #0x14]
  01e90	e2833010	 add         r3, r3, #0x10
  01e94	e5930000	 ldr         r0, [r3]
  01e98	eb000000	 bl          VRFBNumDisplayViews
  01e9c	e58d0008	 str         r0, [sp, #8]
  01ea0	e59d2008	 ldr         r2, [sp, #8]
  01ea4	e3a03401	 mov         r3, #1, 8
  01ea8	e0030392	 mul         r3, r2, r3
  01eac	e58d3000	 str         r3, [sp]

; 786  :     
; 787  :     return dwSize;

  01eb0	e59d3000	 ldr         r3, [sp]
  01eb4	e58d3004	 str         r3, [sp, #4]

; 788  : }

  01eb8	e59d0004	 ldr         r0, [sp, #4]
  01ebc	e28dd00c	 add         sp, sp, #0xC
  01ec0	e89d6000	 ldmia       sp, {sp, lr}
  01ec4	e12fff1e	 bx          lr
  01ec8		 |$M38190|

			 ENDP  ; |?TotalMemorySize@OMAPVrfbSurfaceManager@@UAAKXZ|, OMAPVrfbSurfaceManager::TotalMemorySize

	IMPORT	|?TotalFree@Heap@@QAAKXZ|		; Heap::TotalFree

  00078			 AREA	 |.pdata|, PDATA
|$T38198| DCD	|$LN5@FreeMemory|
	DCD	0x40001104
; Function compile flags: /Odtp

  01ec8			 AREA	 |.text|, CODE, ARM

  01ec8		 |?FreeMemorySize@OMAPVrfbSurfaceManager@@UAAKXZ| PROC ; OMAPVrfbSurfaceManager::FreeMemorySize

; 793  : {

  01ec8		 |$LN5@FreeMemory|
  01ec8	e1a0c00d	 mov         r12, sp
  01ecc	e92d0001	 stmdb       sp!, {r0}
  01ed0	e92d5000	 stmdb       sp!, {r12, lr}
  01ed4	e24dd00c	 sub         sp, sp, #0xC
  01ed8		 |$M38195|

; 794  :     Heap*   pHeap = (Heap*) m_hHeap;

  01ed8	e59d3014	 ldr         r3, [sp, #0x14]
  01edc	e2833004	 add         r3, r3, #4
  01ee0	e5933000	 ldr         r3, [r3]
  01ee4	e58d3000	 str         r3, [sp]

; 795  : 
; 796  :     //  Return free memory of heap
; 797  :     return pHeap->TotalFree();

  01ee8	e59d0000	 ldr         r0, [sp]
  01eec	eb000000	 bl          |?TotalFree@Heap@@QAAKXZ|
  01ef0	e58d0008	 str         r0, [sp, #8]
  01ef4	e59d3008	 ldr         r3, [sp, #8]
  01ef8	e58d3004	 str         r3, [sp, #4]

; 798  : }

  01efc	e59d0004	 ldr         r0, [sp, #4]
  01f00	e28dd00c	 add         sp, sp, #0xC
  01f04	e89d6000	 ldmia       sp, {sp, lr}
  01f08	e12fff1e	 bx          lr
  01f0c		 |$M38196|

			 ENDP  ; |?FreeMemorySize@OMAPVrfbSurfaceManager@@UAAKXZ|, OMAPVrfbSurfaceManager::FreeMemorySize


  00080			 AREA	 |.pdata|, PDATA
|$T38204| DCD	|$LN9@VirtualBas|
	DCD	0x40002904
; Function compile flags: /Odtp

  01f0c			 AREA	 |.text|, CODE, ARM

  01f0c		 |?VirtualBaseAddr@OMAPVrfbSurfaceManager@@UAAPAXXZ| PROC ; OMAPVrfbSurfaceManager::VirtualBaseAddr

; 803  : {

  01f0c		 |$LN9@VirtualBas|
  01f0c	e1a0c00d	 mov         r12, sp
  01f10	e92d0001	 stmdb       sp!, {r0}
  01f14	e92d5000	 stmdb       sp!, {r12, lr}
  01f18	e24dd058	 sub         sp, sp, #0x58
  01f1c		 |$M38201|

; 804  :     VOID*           pAddr = NULL;

  01f1c	e3a03000	 mov         r3, #0
  01f20	e58d3000	 str         r3, [sp]

; 805  :     HANDLE          hView;
; 806  :     BOOL            bResult;    
; 807  :     VRFB_VIEW_INFO  info;
; 808  : 
; 809  : 
; 810  :     //  Get the base address of the primary display view
; 811  :     hView = VRFBGetDisplayView( m_hVRFB, 0 );

  01f24	e3a01000	 mov         r1, #0
  01f28	e59d3060	 ldr         r3, [sp, #0x60]
  01f2c	e2833010	 add         r3, r3, #0x10
  01f30	e5930000	 ldr         r0, [r3]
  01f34	eb000000	 bl          VRFBGetDisplayView
  01f38	e58d0050	 str         r0, [sp, #0x50]
  01f3c	e59d3050	 ldr         r3, [sp, #0x50]
  01f40	e58d3004	 str         r3, [sp, #4]

; 812  :     if( hView == NULL )

  01f44	e59d3004	 ldr         r3, [sp, #4]
  01f48	e3530000	 cmp         r3, #0
  01f4c	1a000001	 bne         |$LN4@VirtualBas|
  01f50	ea000010	 b           |$LN3@VirtualBas|

; 813  :     {
; 814  :         goto cleanUp;

  01f54	ea00000f	 b           |$cleanUp$37544|
  01f58		 |$LN4@VirtualBas|

; 815  :     }
; 816  :     
; 817  :     //  Get the view info
; 818  :     bResult = VRFBGetViewInfo( m_hVRFB, hView, &info);

  01f58	e28d200c	 add         r2, sp, #0xC
  01f5c	e59d1004	 ldr         r1, [sp, #4]
  01f60	e59d3060	 ldr         r3, [sp, #0x60]
  01f64	e2833010	 add         r3, r3, #0x10
  01f68	e5930000	 ldr         r0, [r3]
  01f6c	eb000000	 bl          VRFBGetViewInfo
  01f70	e58d0054	 str         r0, [sp, #0x54]
  01f74	e59d3054	 ldr         r3, [sp, #0x54]
  01f78	e58d3008	 str         r3, [sp, #8]

; 819  :     if( bResult == FALSE )

  01f7c	e59d3008	 ldr         r3, [sp, #8]
  01f80	e3530000	 cmp         r3, #0
  01f84	1a000001	 bne         |$LN2@VirtualBas|
  01f88	ea000002	 b           |$LN1@VirtualBas|

; 820  :     {
; 821  :         goto cleanUp;

  01f8c	ea000001	 b           |$cleanUp$37544|
  01f90		 |$LN2@VirtualBas|

; 822  :     }
; 823  :     
; 824  :     //  Get the virtual address of the primary view
; 825  :     pAddr = (VOID*) info.dwVirtualAddr;

  01f90	e59d303c	 ldr         r3, [sp, #0x3C]
  01f94	e58d3000	 str         r3, [sp]
  01f98		 |$LN1@VirtualBas|
  01f98		 |$LN3@VirtualBas|
  01f98		 |$cleanUp$37544|

; 826  :     
; 827  :     
; 828  : cleanUp:    
; 829  :     //  Return base address of display memory
; 830  :     return pAddr;

  01f98	e59d3000	 ldr         r3, [sp]
  01f9c	e58d304c	 str         r3, [sp, #0x4C]

; 831  : }

  01fa0	e59d004c	 ldr         r0, [sp, #0x4C]
  01fa4	e28dd058	 add         sp, sp, #0x58
  01fa8	e89d6000	 ldmia       sp, {sp, lr}
  01fac	e12fff1e	 bx          lr
  01fb0		 |$M38202|

			 ENDP  ; |?VirtualBaseAddr@OMAPVrfbSurfaceManager@@UAAPAXXZ|, OMAPVrfbSurfaceManager::VirtualBaseAddr


  00088			 AREA	 |.pdata|, PDATA
|$T38210| DCD	|$LN5@NumPhysica|
	DCD	0x40000f04
; Function compile flags: /Odtp

  01fb0			 AREA	 |.text|, CODE, ARM

  01fb0		 |?NumPhysicalAddr@OMAPVrfbSurfaceManager@@UAAKXZ| PROC ; OMAPVrfbSurfaceManager::NumPhysicalAddr

; 836  : {

  01fb0		 |$LN5@NumPhysica|
  01fb0	e1a0c00d	 mov         r12, sp
  01fb4	e92d0001	 stmdb       sp!, {r0}
  01fb8	e92d5000	 stmdb       sp!, {r12, lr}
  01fbc	e24dd008	 sub         sp, sp, #8
  01fc0		 |$M38207|

; 837  :     //  Each view maps to a VRFB physical address
; 838  :     return VRFBNumDisplayViews( m_hVRFB );

  01fc0	e59d3010	 ldr         r3, [sp, #0x10]
  01fc4	e2833010	 add         r3, r3, #0x10
  01fc8	e5930000	 ldr         r0, [r3]
  01fcc	eb000000	 bl          VRFBNumDisplayViews
  01fd0	e58d0004	 str         r0, [sp, #4]
  01fd4	e59d3004	 ldr         r3, [sp, #4]
  01fd8	e58d3000	 str         r3, [sp]

; 839  : }

  01fdc	e59d0000	 ldr         r0, [sp]
  01fe0	e28dd008	 add         sp, sp, #8
  01fe4	e89d6000	 ldmia       sp, {sp, lr}
  01fe8	e12fff1e	 bx          lr
  01fec		 |$M38208|

			 ENDP  ; |?NumPhysicalAddr@OMAPVrfbSurfaceManager@@UAAKXZ|, OMAPVrfbSurfaceManager::NumPhysicalAddr


  00090			 AREA	 |.pdata|, PDATA
|$T38216| DCD	|$LN6@PhysicalLe|
	DCD	0x40001604
; Function compile flags: /Odtp

  01fec			 AREA	 |.text|, CODE, ARM

  01fec		 |?PhysicalLen@OMAPVrfbSurfaceManager@@UAAKK@Z| PROC ; OMAPVrfbSurfaceManager::PhysicalLen

; 844  : {

  01fec		 |$LN6@PhysicalLe|
  01fec	e1a0c00d	 mov         r12, sp
  01ff0	e92d0003	 stmdb       sp!, {r0, r1}
  01ff4	e92d5000	 stmdb       sp!, {r12, lr}
  01ff8	e24dd008	 sub         sp, sp, #8
  01ffc		 |$M38213|

; 845  :     //  Check index
; 846  :     if( dwIndex < VRFBNumDisplayViews(m_hVRFB))

  01ffc	e59d3010	 ldr         r3, [sp, #0x10]
  02000	e2833010	 add         r3, r3, #0x10
  02004	e5930000	 ldr         r0, [r3]
  02008	eb000000	 bl          VRFBNumDisplayViews
  0200c	e58d0004	 str         r0, [sp, #4]
  02010	e59d2014	 ldr         r2, [sp, #0x14]
  02014	e59d3004	 ldr         r3, [sp, #4]
  02018	e1520003	 cmp         r2, r3
  0201c	2a000002	 bcs         |$LN1@PhysicalLe|

; 847  :     {
; 848  :         //  All VRFB views are the same length in physical memory
; 849  :         return VRFB_VIEW_SIZE;

  02020	e3a03401	 mov         r3, #1, 8
  02024	e58d3000	 str         r3, [sp]
  02028	ea000001	 b           |$LN2@PhysicalLe|
  0202c		 |$LN1@PhysicalLe|

; 850  :     }
; 851  :     
; 852  :     //  Invalid index
; 853  :     return 0;

  0202c	e3a03000	 mov         r3, #0
  02030	e58d3000	 str         r3, [sp]
  02034		 |$LN2@PhysicalLe|

; 854  : }

  02034	e59d0000	 ldr         r0, [sp]
  02038	e28dd008	 add         sp, sp, #8
  0203c	e89d6000	 ldmia       sp, {sp, lr}
  02040	e12fff1e	 bx          lr
  02044		 |$M38214|

			 ENDP  ; |?PhysicalLen@OMAPVrfbSurfaceManager@@UAAKK@Z|, OMAPVrfbSurfaceManager::PhysicalLen


  00098			 AREA	 |.pdata|, PDATA
|$T38222| DCD	|$LN9@PhysicalAd@2|
	DCD	0x40002904
; Function compile flags: /Odtp

  02044			 AREA	 |.text|, CODE, ARM

  02044		 |?PhysicalAddr@OMAPVrfbSurfaceManager@@UAAKK@Z| PROC ; OMAPVrfbSurfaceManager::PhysicalAddr

; 859  : {

  02044		 |$LN9@PhysicalAd@2|
  02044	e1a0c00d	 mov         r12, sp
  02048	e92d0003	 stmdb       sp!, {r0, r1}
  0204c	e92d5000	 stmdb       sp!, {r12, lr}
  02050	e24dd058	 sub         sp, sp, #0x58
  02054		 |$M38219|

; 860  :     DWORD           dwAddr = 0;

  02054	e3a03000	 mov         r3, #0
  02058	e58d3000	 str         r3, [sp]

; 861  :     HANDLE          hView;
; 862  :     BOOL            bResult;    
; 863  :     VRFB_VIEW_INFO  info;
; 864  : 
; 865  : 
; 866  :     //  Get the selected display view
; 867  :     hView = VRFBGetDisplayView( m_hVRFB, dwIndex );

  0205c	e59d1064	 ldr         r1, [sp, #0x64]
  02060	e59d3060	 ldr         r3, [sp, #0x60]
  02064	e2833010	 add         r3, r3, #0x10
  02068	e5930000	 ldr         r0, [r3]
  0206c	eb000000	 bl          VRFBGetDisplayView
  02070	e58d0050	 str         r0, [sp, #0x50]
  02074	e59d3050	 ldr         r3, [sp, #0x50]
  02078	e58d3004	 str         r3, [sp, #4]

; 868  :     if( hView == NULL )

  0207c	e59d3004	 ldr         r3, [sp, #4]
  02080	e3530000	 cmp         r3, #0
  02084	1a000001	 bne         |$LN4@PhysicalAd@2|
  02088	ea000010	 b           |$LN3@PhysicalAd@2|

; 869  :     {
; 870  :         goto cleanUp;

  0208c	ea00000f	 b           |$cleanUp$37567|
  02090		 |$LN4@PhysicalAd@2|

; 871  :     }
; 872  :     
; 873  :     //  Get the view info
; 874  :     bResult = VRFBGetViewInfo( m_hVRFB, hView, &info);

  02090	e28d200c	 add         r2, sp, #0xC
  02094	e59d1004	 ldr         r1, [sp, #4]
  02098	e59d3060	 ldr         r3, [sp, #0x60]
  0209c	e2833010	 add         r3, r3, #0x10
  020a0	e5930000	 ldr         r0, [r3]
  020a4	eb000000	 bl          VRFBGetViewInfo
  020a8	e58d0054	 str         r0, [sp, #0x54]
  020ac	e59d3054	 ldr         r3, [sp, #0x54]
  020b0	e58d3008	 str         r3, [sp, #8]

; 875  :     if( bResult == FALSE )

  020b4	e59d3008	 ldr         r3, [sp, #8]
  020b8	e3530000	 cmp         r3, #0
  020bc	1a000001	 bne         |$LN2@PhysicalAd@2|
  020c0	ea000002	 b           |$LN1@PhysicalAd@2|

; 876  :     {
; 877  :         goto cleanUp;

  020c4	ea000001	 b           |$cleanUp$37567|
  020c8		 |$LN2@PhysicalAd@2|

; 878  :     }
; 879  :     
; 880  :     //  Get the physical address of the view
; 881  :     dwAddr = info.dwPhysicalAddrInput;

  020c8	e59d3040	 ldr         r3, [sp, #0x40]
  020cc	e58d3000	 str         r3, [sp]
  020d0		 |$LN1@PhysicalAd@2|
  020d0		 |$LN3@PhysicalAd@2|
  020d0		 |$cleanUp$37567|

; 882  :     
; 883  :     
; 884  : cleanUp:    
; 885  :     //  Return physical address of VRFB view
; 886  :     return dwAddr;

  020d0	e59d3000	 ldr         r3, [sp]
  020d4	e58d304c	 str         r3, [sp, #0x4C]

; 887  : }

  020d8	e59d004c	 ldr         r0, [sp, #0x4C]
  020dc	e28dd058	 add         sp, sp, #0x58
  020e0	e89d6000	 ldmia       sp, {sp, lr}
  020e4	e12fff1e	 bx          lr
  020e8		 |$M38220|

			 ENDP  ; |?PhysicalAddr@OMAPVrfbSurfaceManager@@UAAKK@Z|, OMAPVrfbSurfaceManager::PhysicalAddr


  000a0			 AREA	 |.pdata|, PDATA
|$T38230| DCD	|$LN7@SupportsOf|
	DCD	0x40001404
; Function compile flags: /Odtp

  020e8			 AREA	 |.text|, CODE, ARM

  020e8		 |?SupportsOffscreenSurfaces@OMAPVrfbSurfaceManager@@UAAHXZ| PROC ; OMAPVrfbSurfaceManager::SupportsOffscreenSurfaces

; 892  : {

  020e8		 |$LN7@SupportsOf|
  020e8	e1a0c00d	 mov         r12, sp
  020ec	e92d0001	 stmdb       sp!, {r0}
  020f0	e92d5000	 stmdb       sp!, {r12, lr}
  020f4	e24dd008	 sub         sp, sp, #8
  020f8		 |$M38227|

; 893  :     //  If offscreen heap allocated, return TRUE
; 894  :     return( m_hOffscreenHeapVA != NULL );

  020f8	e59d3010	 ldr         r3, [sp, #0x10]
  020fc	e2833018	 add         r3, r3, #0x18
  02100	e5933000	 ldr         r3, [r3]
  02104	e3530000	 cmp         r3, #0
  02108	0a000002	 beq         |$LN3@SupportsOf|
  0210c	e3a03001	 mov         r3, #1
  02110	e58d3004	 str         r3, [sp, #4]
  02114	ea000001	 b           |$LN4@SupportsOf|
  02118		 |$LN3@SupportsOf|
  02118	e3a03000	 mov         r3, #0
  0211c	e58d3004	 str         r3, [sp, #4]
  02120		 |$LN4@SupportsOf|
  02120	e59d3004	 ldr         r3, [sp, #4]
  02124	e58d3000	 str         r3, [sp]

; 895  : }

  02128	e59d0000	 ldr         r0, [sp]
  0212c	e28dd008	 add         sp, sp, #8
  02130	e89d6000	 ldmia       sp, {sp, lr}
  02134	e12fff1e	 bx          lr
  02138		 |$M38228|

			 ENDP  ; |?SupportsOffscreenSurfaces@OMAPVrfbSurfaceManager@@UAAHXZ|, OMAPVrfbSurfaceManager::SupportsOffscreenSurfaces

	EXPORT	|??_C@_1GE@BLNBLNDL@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAO?$AAM?$AAA?$AAP?$AAV?$AAr@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FC@MOMLDEIF@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAO?$AAM?$AAA?$AAP?$AAV?$AAr?$AAf?$AAb@| [ DATA ] ; `string'

  000a8			 AREA	 |.pdata|, PDATA
|$T38253| DCD	|$LN23@Allocate@2|
	DCD	0x40007804

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GE@BLNBLNDL@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAO?$AAM?$AAA?$AAP?$AAV?$AAr@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "U", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e"
	DCB	0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "a", 0x0, "l"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, " ", 0x0, "O", 0x0, "M", 0x0, "A", 0x0, "P", 0x0, "V"
	DCB	0x0, "r", 0x0, "f", 0x0, "b", 0x0, "S", 0x0, "u", 0x0, "r"
	DCB	0x0, "f", 0x0, "a", 0x0, "c", 0x0, "e", 0x0, " ", 0x0, "m"
	DCB	0x0, "e", 0x0, "m", 0x0, "o", 0x0, "r", 0x0, "y", 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FC@MOMLDEIF@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAO?$AAM?$AAA?$AAP?$AAV?$AAr?$AAf?$AAb@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "U", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e"
	DCB	0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "c", 0x0, "r"
	DCB	0x0, "e", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, " ", 0x0, "O"
	DCB	0x0, "M", 0x0, "A", 0x0, "P", 0x0, "V", 0x0, "r", 0x0, "f"
	DCB	0x0, "b", 0x0, "S", 0x0, "u", 0x0, "r", 0x0, "f", 0x0, "a"
	DCB	0x0, "c", 0x0, "e", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  02138			 AREA	 |.text|, CODE, ARM

  02138		 |?Allocate@OMAPVrfbSurfaceManager@@UAAHW4OMAP_DSS_PIXELFORMAT@@KKPAPAVOMAPSurface@@@Z| PROC ; OMAPVrfbSurfaceManager::Allocate

; 905  : {

  02138		 |$LN23@Allocate@2|
  02138	e1a0c00d	 mov         r12, sp
  0213c	e92d000f	 stmdb       sp!, {r0 - r3}
  02140	e92d5000	 stmdb       sp!, {r12, lr}
  02144	e24dd054	 sub         sp, sp, #0x54
  02148		 |$M38250|

; 906  :     BOOL            bResult;
; 907  :     OMAPVrfbSurface *pVrfbSurface;
; 908  :     Heap*           pHeap = (Heap*) m_hHeap;

  02148	e59d305c	 ldr         r3, [sp, #0x5C]
  0214c	e2833004	 add         r3, r3, #4
  02150	e5933000	 ldr         r3, [r3]
  02154	e58d300c	 str         r3, [sp, #0xC]

; 909  :     
; 910  :     //  Check return pointer
; 911  :     if( ppSurface == NULL )

  02158	e59d306c	 ldr         r3, [sp, #0x6C]
  0215c	e3530000	 cmp         r3, #0
  02160	1a000001	 bne         |$LN6@Allocate@2|
  02164	ea000052	 b           |$LN5@Allocate@2|

; 912  :         goto cleanUp;    

  02168	ea000051	 b           |$cleanUp$37586|
  0216c		 |$LN6@Allocate@2|

; 913  :     
; 914  :     //  Initialize return pointer
; 915  :     *ppSurface = NULL;

  0216c	e59d206c	 ldr         r2, [sp, #0x6C]
  02170	e3a03000	 mov         r3, #0
  02174	e5823000	 str         r3, [r2]

; 916  : 
; 917  :     //  Allocate a new flat surface object
; 918  :     pVrfbSurface = new OMAPVrfbSurface;

  02178	e3a000b8	 mov         r0, #0xB8
  0217c	eb000000	 bl          |??2@YAPAXI@Z|
  02180	e58d002c	 str         r0, [sp, #0x2C]
  02184	e59d302c	 ldr         r3, [sp, #0x2C]
  02188	e58d3014	 str         r3, [sp, #0x14]
  0218c	e59d3014	 ldr         r3, [sp, #0x14]
  02190	e3530000	 cmp         r3, #0
  02194	0a000005	 beq         |$LN9@Allocate@2|
  02198	e59d0014	 ldr         r0, [sp, #0x14]
  0219c	eb000000	 bl          |??0OMAPVrfbSurface@@QAA@XZ|
  021a0	e58d0030	 str         r0, [sp, #0x30]
  021a4	e59d3030	 ldr         r3, [sp, #0x30]
  021a8	e58d3034	 str         r3, [sp, #0x34]
  021ac	ea000001	 b           |$LN10@Allocate@2|
  021b0		 |$LN9@Allocate@2|
  021b0	e3a03000	 mov         r3, #0
  021b4	e58d3034	 str         r3, [sp, #0x34]
  021b8		 |$LN10@Allocate@2|
  021b8	e59d3034	 ldr         r3, [sp, #0x34]
  021bc	e58d3008	 str         r3, [sp, #8]

; 919  :     if( pVrfbSurface == NULL )

  021c0	e59d3008	 ldr         r3, [sp, #8]
  021c4	e3530000	 cmp         r3, #0
  021c8	1a000008	 bne         |$LN4@Allocate@2|

; 920  :     {
; 921  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: Unable to create OMAPVrfbSurface\n"));

  021cc	e59f0140	 ldr         r0, [pc, #0x140]
  021d0	eb000000	 bl          NKDbgPrintfW
  021d4	e3a03001	 mov         r3, #1
  021d8	e58d3038	 str         r3, [sp, #0x38]
  021dc	ea000001	 b           |$LN12@Allocate@2|
  021e0	e3a03000	 mov         r3, #0
  021e4	e58d3038	 str         r3, [sp, #0x38]
  021e8		 |$LN12@Allocate@2|

; 922  :         goto cleanUp;

  021e8	ea000031	 b           |$LN3@Allocate@2|
  021ec	ea000030	 b           |$cleanUp$37586|
  021f0		 |$LN4@Allocate@2|

; 923  :     }
; 924  : 
; 925  :     //  Allocate the memory for the surface
; 926  :     bResult = pVrfbSurface->Allocate(
; 927  :                                 ePixelFormat,
; 928  :                                 dwWidth,
; 929  :                                 dwHeight,
; 930  :                                 pHeap,
; 931  :                                 m_hVRFB );

  021f0	e59d305c	 ldr         r3, [sp, #0x5C]
  021f4	e2833010	 add         r3, r3, #0x10
  021f8	e5933000	 ldr         r3, [r3]
  021fc	e58d3004	 str         r3, [sp, #4]
  02200	e59d300c	 ldr         r3, [sp, #0xC]
  02204	e58d3000	 str         r3, [sp]
  02208	e59d3068	 ldr         r3, [sp, #0x68]
  0220c	e59d2064	 ldr         r2, [sp, #0x64]
  02210	e59d1060	 ldr         r1, [sp, #0x60]
  02214	e59d0008	 ldr         r0, [sp, #8]
  02218	eb000000	 bl          |?Allocate@OMAPVrfbSurface@@QAAHW4OMAP_DSS_PIXELFORMAT@@KKPAX1@Z|
  0221c	e58d003c	 str         r0, [sp, #0x3C]
  02220	e59d303c	 ldr         r3, [sp, #0x3C]
  02224	e58d3010	 str         r3, [sp, #0x10]

; 932  :     if( bResult == FALSE )

  02228	e59d3010	 ldr         r3, [sp, #0x10]
  0222c	e3530000	 cmp         r3, #0
  02230	1a00001c	 bne         |$LN2@Allocate@2|

; 933  :     {
; 934  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: Unable to allocate OMAPVrfbSurface memory\n"));

  02234	e59f00d4	 ldr         r0, [pc, #0xD4]
  02238	eb000000	 bl          NKDbgPrintfW
  0223c	e3a03001	 mov         r3, #1
  02240	e58d3040	 str         r3, [sp, #0x40]
  02244	ea000001	 b           |$LN14@Allocate@2|
  02248	e3a03000	 mov         r3, #0
  0224c	e58d3040	 str         r3, [sp, #0x40]
  02250		 |$LN14@Allocate@2|

; 935  :         delete pVrfbSurface;

  02250	e59d3008	 ldr         r3, [sp, #8]
  02254	e58d301c	 str         r3, [sp, #0x1C]
  02258	e59d301c	 ldr         r3, [sp, #0x1C]
  0225c	e58d3018	 str         r3, [sp, #0x18]
  02260	e59d3018	 ldr         r3, [sp, #0x18]
  02264	e3530000	 cmp         r3, #0
  02268	0a00000a	 beq         |$LN15@Allocate@2|
  0226c	e3a01001	 mov         r1, #1
  02270	e59d3018	 ldr         r3, [sp, #0x18]
  02274	e5933000	 ldr         r3, [r3]
  02278	e59d0018	 ldr         r0, [sp, #0x18]
  0227c	e5933000	 ldr         r3, [r3]
  02280	e1a0e00f	 mov         lr, pc
  02284	e12fff13	 bx          r3
  02288	e58d0044	 str         r0, [sp, #0x44]
  0228c	e59d3044	 ldr         r3, [sp, #0x44]
  02290	e58d3048	 str         r3, [sp, #0x48]
  02294	ea000001	 b           |$LN16@Allocate@2|
  02298		 |$LN15@Allocate@2|
  02298	e3a03000	 mov         r3, #0
  0229c	e58d3048	 str         r3, [sp, #0x48]
  022a0		 |$LN16@Allocate@2|

; 936  :         goto cleanUp;

  022a0	ea000003	 b           |$LN1@Allocate@2|
  022a4	ea000002	 b           |$cleanUp$37586|
  022a8		 |$LN2@Allocate@2|

; 937  :     }
; 938  : 
; 939  :     //  Return the new surface
; 940  :     *ppSurface = pVrfbSurface;            

  022a8	e59d2008	 ldr         r2, [sp, #8]
  022ac	e59d306c	 ldr         r3, [sp, #0x6C]
  022b0	e5832000	 str         r2, [r3]
  022b4		 |$LN1@Allocate@2|
  022b4		 |$LN3@Allocate@2|
  022b4		 |$LN5@Allocate@2|
  022b4		 |$cleanUp$37586|

; 941  :     
; 942  : cleanUp:    
; 943  :     //  Return result
; 944  :     return (ppSurface == NULL) ? FALSE : (*ppSurface != NULL);

  022b4	e59d306c	 ldr         r3, [sp, #0x6C]
  022b8	e3530000	 cmp         r3, #0
  022bc	1a000002	 bne         |$LN19@Allocate@2|
  022c0	e3a03000	 mov         r3, #0
  022c4	e58d304c	 str         r3, [sp, #0x4C]
  022c8	ea00000a	 b           |$LN20@Allocate@2|
  022cc		 |$LN19@Allocate@2|
  022cc	e59d306c	 ldr         r3, [sp, #0x6C]
  022d0	e5933000	 ldr         r3, [r3]
  022d4	e3530000	 cmp         r3, #0
  022d8	0a000002	 beq         |$LN17@Allocate@2|
  022dc	e3a03001	 mov         r3, #1
  022e0	e58d3050	 str         r3, [sp, #0x50]
  022e4	ea000001	 b           |$LN18@Allocate@2|
  022e8		 |$LN17@Allocate@2|
  022e8	e3a03000	 mov         r3, #0
  022ec	e58d3050	 str         r3, [sp, #0x50]
  022f0		 |$LN18@Allocate@2|
  022f0	e59d3050	 ldr         r3, [sp, #0x50]
  022f4	e58d304c	 str         r3, [sp, #0x4C]
  022f8		 |$LN20@Allocate@2|
  022f8	e59d304c	 ldr         r3, [sp, #0x4C]
  022fc	e58d3028	 str         r3, [sp, #0x28]

; 945  : }

  02300	e59d0028	 ldr         r0, [sp, #0x28]
  02304	e28dd054	 add         sp, sp, #0x54
  02308	e89d6000	 ldmia       sp, {sp, lr}
  0230c	e12fff1e	 bx          lr
  02310		 |$LN24@Allocate@2|
  02310		 |$LN25@Allocate@2|
  02310	00000000	 DCD         |??_C@_1GE@BLNBLNDL@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAO?$AAM?$AAA?$AAP?$AAV?$AAr@|
  02314		 |$LN26@Allocate@2|
  02314	00000000	 DCD         |??_C@_1FC@MOMLDEIF@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAO?$AAM?$AAA?$AAP?$AAV?$AAr?$AAf?$AAb@|
  02318		 |$M38251|

			 ENDP  ; |?Allocate@OMAPVrfbSurfaceManager@@UAAHW4OMAP_DSS_PIXELFORMAT@@KKPAPAVOMAPSurface@@@Z|, OMAPVrfbSurfaceManager::Allocate

	IMPORT	|?SetAssocSurface@OMAPSurface@@QAAHPAV1@@Z| ; OMAPSurface::SetAssocSurface
	IMPORT	|?SetSurfaceType@OMAPSurface@@QAAHW4OMAP_SURFACE_TYPE@@@Z| ; OMAPSurface::SetSurfaceType

  000b0			 AREA	 |.pdata|, PDATA
|$T38279| DCD	|$LN23@Allocate@3|
	DCD	0x40008104
; Function compile flags: /Odtp

  02318			 AREA	 |.text|, CODE, ARM

  02318		 |?Allocate@OMAPVrfbSurfaceManager@@UAAHW4OMAP_DSS_PIXELFORMAT@@KKPAPAVOMAPSurface@@PAV3@@Z| PROC ; OMAPVrfbSurfaceManager::Allocate

; 955  : {

  02318		 |$LN23@Allocate@3|
  02318	e1a0c00d	 mov         r12, sp
  0231c	e92d000f	 stmdb       sp!, {r0 - r3}
  02320	e92d5000	 stmdb       sp!, {r12, lr}
  02324	e24dd054	 sub         sp, sp, #0x54
  02328		 |$M38276|

; 956  : 	BOOL            bResult;
; 957  :     OMAPVrfbSurface *pVrfbSurface;
; 958  :     Heap*           pHeap = (Heap*) m_hHeap;

  02328	e59d305c	 ldr         r3, [sp, #0x5C]
  0232c	e2833004	 add         r3, r3, #4
  02330	e5933000	 ldr         r3, [r3]
  02334	e58d300c	 str         r3, [sp, #0xC]

; 959  :     
; 960  :     //  Check return pointer
; 961  :     if( ppAssocSurface == NULL )

  02338	e59d306c	 ldr         r3, [sp, #0x6C]
  0233c	e3530000	 cmp         r3, #0
  02340	1a000001	 bne         |$LN6@Allocate@3|
  02344	ea00005b	 b           |$LN5@Allocate@3|

; 962  :         goto cleanUp;    

  02348	ea00005a	 b           |$cleanUp$37614|
  0234c		 |$LN6@Allocate@3|

; 963  :     
; 964  :     //  Initialize return pointer
; 965  :     *ppAssocSurface = NULL;

  0234c	e59d206c	 ldr         r2, [sp, #0x6C]
  02350	e3a03000	 mov         r3, #0
  02354	e5823000	 str         r3, [r2]

; 966  : 
; 967  :     //  Allocate a new flat surface object
; 968  :     pVrfbSurface = new OMAPVrfbSurface;

  02358	e3a000b8	 mov         r0, #0xB8
  0235c	eb000000	 bl          |??2@YAPAXI@Z|
  02360	e58d002c	 str         r0, [sp, #0x2C]
  02364	e59d302c	 ldr         r3, [sp, #0x2C]
  02368	e58d3014	 str         r3, [sp, #0x14]
  0236c	e59d3014	 ldr         r3, [sp, #0x14]
  02370	e3530000	 cmp         r3, #0
  02374	0a000005	 beq         |$LN9@Allocate@3|
  02378	e59d0014	 ldr         r0, [sp, #0x14]
  0237c	eb000000	 bl          |??0OMAPVrfbSurface@@QAA@XZ|
  02380	e58d0030	 str         r0, [sp, #0x30]
  02384	e59d3030	 ldr         r3, [sp, #0x30]
  02388	e58d3034	 str         r3, [sp, #0x34]
  0238c	ea000001	 b           |$LN10@Allocate@3|
  02390		 |$LN9@Allocate@3|
  02390	e3a03000	 mov         r3, #0
  02394	e58d3034	 str         r3, [sp, #0x34]
  02398		 |$LN10@Allocate@3|
  02398	e59d3034	 ldr         r3, [sp, #0x34]
  0239c	e58d3008	 str         r3, [sp, #8]

; 969  :     if( pVrfbSurface == NULL )

  023a0	e59d3008	 ldr         r3, [sp, #8]
  023a4	e3530000	 cmp         r3, #0
  023a8	1a000008	 bne         |$LN4@Allocate@3|

; 970  :     {
; 971  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: Unable to create OMAPVrfbSurface\n"));

  023ac	e59f0164	 ldr         r0, [pc, #0x164]
  023b0	eb000000	 bl          NKDbgPrintfW
  023b4	e3a03001	 mov         r3, #1
  023b8	e58d3038	 str         r3, [sp, #0x38]
  023bc	ea000001	 b           |$LN12@Allocate@3|
  023c0	e3a03000	 mov         r3, #0
  023c4	e58d3038	 str         r3, [sp, #0x38]
  023c8		 |$LN12@Allocate@3|

; 972  :         goto cleanUp;

  023c8	ea00003a	 b           |$LN3@Allocate@3|
  023cc	ea000039	 b           |$cleanUp$37614|
  023d0		 |$LN4@Allocate@3|

; 973  :     }
; 974  : 
; 975  :     //  Allocate the memory for the surface
; 976  :     bResult = pVrfbSurface->Allocate(
; 977  :                                 ePixelFormat,
; 978  :                                 dwWidth,
; 979  :                                 dwHeight,
; 980  :                                 pHeap,
; 981  :                                 m_hVRFB );

  023d0	e59d305c	 ldr         r3, [sp, #0x5C]
  023d4	e2833010	 add         r3, r3, #0x10
  023d8	e5933000	 ldr         r3, [r3]
  023dc	e58d3004	 str         r3, [sp, #4]
  023e0	e59d300c	 ldr         r3, [sp, #0xC]
  023e4	e58d3000	 str         r3, [sp]
  023e8	e59d3068	 ldr         r3, [sp, #0x68]
  023ec	e59d2064	 ldr         r2, [sp, #0x64]
  023f0	e59d1060	 ldr         r1, [sp, #0x60]
  023f4	e59d0008	 ldr         r0, [sp, #8]
  023f8	eb000000	 bl          |?Allocate@OMAPVrfbSurface@@QAAHW4OMAP_DSS_PIXELFORMAT@@KKPAX1@Z|
  023fc	e58d003c	 str         r0, [sp, #0x3C]
  02400	e59d303c	 ldr         r3, [sp, #0x3C]
  02404	e58d3010	 str         r3, [sp, #0x10]

; 982  :     if( bResult == FALSE )

  02408	e59d3010	 ldr         r3, [sp, #0x10]
  0240c	e3530000	 cmp         r3, #0
  02410	1a00001c	 bne         |$LN2@Allocate@3|

; 983  :     {
; 984  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: Unable to allocate OMAPVrfbSurface memory\n"));

  02414	e59f00f8	 ldr         r0, [pc, #0xF8]
  02418	eb000000	 bl          NKDbgPrintfW
  0241c	e3a03001	 mov         r3, #1
  02420	e58d3040	 str         r3, [sp, #0x40]
  02424	ea000001	 b           |$LN14@Allocate@3|
  02428	e3a03000	 mov         r3, #0
  0242c	e58d3040	 str         r3, [sp, #0x40]
  02430		 |$LN14@Allocate@3|

; 985  :         delete pVrfbSurface;

  02430	e59d3008	 ldr         r3, [sp, #8]
  02434	e58d301c	 str         r3, [sp, #0x1C]
  02438	e59d301c	 ldr         r3, [sp, #0x1C]
  0243c	e58d3018	 str         r3, [sp, #0x18]
  02440	e59d3018	 ldr         r3, [sp, #0x18]
  02444	e3530000	 cmp         r3, #0
  02448	0a00000a	 beq         |$LN15@Allocate@3|
  0244c	e3a01001	 mov         r1, #1
  02450	e59d3018	 ldr         r3, [sp, #0x18]
  02454	e5933000	 ldr         r3, [r3]
  02458	e59d0018	 ldr         r0, [sp, #0x18]
  0245c	e5933000	 ldr         r3, [r3]
  02460	e1a0e00f	 mov         lr, pc
  02464	e12fff13	 bx          r3
  02468	e58d0044	 str         r0, [sp, #0x44]
  0246c	e59d3044	 ldr         r3, [sp, #0x44]
  02470	e58d3048	 str         r3, [sp, #0x48]
  02474	ea000001	 b           |$LN16@Allocate@3|
  02478		 |$LN15@Allocate@3|
  02478	e3a03000	 mov         r3, #0
  0247c	e58d3048	 str         r3, [sp, #0x48]
  02480		 |$LN16@Allocate@3|

; 986  :         goto cleanUp;

  02480	ea00000c	 b           |$LN1@Allocate@3|
  02484	ea00000b	 b           |$cleanUp$37614|
  02488		 |$LN2@Allocate@3|

; 987  :     }
; 988  : 
; 989  :     pVrfbSurface->SetSurfaceType(OMAP_SURFACE_RESIZER);

  02488	e3a01001	 mov         r1, #1
  0248c	e59d0008	 ldr         r0, [sp, #8]
  02490	eb000000	 bl          |?SetSurfaceType@OMAPSurface@@QAAHW4OMAP_SURFACE_TYPE@@@Z|

; 990  :     pVrfbSurface->SetAssocSurface(pSurface);

  02494	e59d1070	 ldr         r1, [sp, #0x70]
  02498	e59d0008	 ldr         r0, [sp, #8]
  0249c	eb000000	 bl          |?SetAssocSurface@OMAPSurface@@QAAHPAV1@@Z|

; 991  :     pSurface->SetAssocSurface(pVrfbSurface);    

  024a0	e59d1008	 ldr         r1, [sp, #8]
  024a4	e59d0070	 ldr         r0, [sp, #0x70]
  024a8	eb000000	 bl          |?SetAssocSurface@OMAPSurface@@QAAHPAV1@@Z|

; 992  : 
; 993  :     //  Return the new surface
; 994  :     *ppAssocSurface = pVrfbSurface;            

  024ac	e59d2008	 ldr         r2, [sp, #8]
  024b0	e59d306c	 ldr         r3, [sp, #0x6C]
  024b4	e5832000	 str         r2, [r3]
  024b8		 |$LN1@Allocate@3|
  024b8		 |$LN3@Allocate@3|
  024b8		 |$LN5@Allocate@3|
  024b8		 |$cleanUp$37614|

; 995  :     
; 996  : cleanUp:    
; 997  :     //  Return result
; 998  :     return (ppAssocSurface == NULL) ? FALSE : (*ppAssocSurface != NULL);

  024b8	e59d306c	 ldr         r3, [sp, #0x6C]
  024bc	e3530000	 cmp         r3, #0
  024c0	1a000002	 bne         |$LN19@Allocate@3|
  024c4	e3a03000	 mov         r3, #0
  024c8	e58d304c	 str         r3, [sp, #0x4C]
  024cc	ea00000a	 b           |$LN20@Allocate@3|
  024d0		 |$LN19@Allocate@3|
  024d0	e59d306c	 ldr         r3, [sp, #0x6C]
  024d4	e5933000	 ldr         r3, [r3]
  024d8	e3530000	 cmp         r3, #0
  024dc	0a000002	 beq         |$LN17@Allocate@3|
  024e0	e3a03001	 mov         r3, #1
  024e4	e58d3050	 str         r3, [sp, #0x50]
  024e8	ea000001	 b           |$LN18@Allocate@3|
  024ec		 |$LN17@Allocate@3|
  024ec	e3a03000	 mov         r3, #0
  024f0	e58d3050	 str         r3, [sp, #0x50]
  024f4		 |$LN18@Allocate@3|
  024f4	e59d3050	 ldr         r3, [sp, #0x50]
  024f8	e58d304c	 str         r3, [sp, #0x4C]
  024fc		 |$LN20@Allocate@3|
  024fc	e59d304c	 ldr         r3, [sp, #0x4C]
  02500	e58d3028	 str         r3, [sp, #0x28]

; 999  : }

  02504	e59d0028	 ldr         r0, [sp, #0x28]
  02508	e28dd054	 add         sp, sp, #0x54
  0250c	e89d6000	 ldmia       sp, {sp, lr}
  02510	e12fff1e	 bx          lr
  02514		 |$LN24@Allocate@3|
  02514		 |$LN25@Allocate@3|
  02514	00000000	 DCD         |??_C@_1GE@BLNBLNDL@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAO?$AAM?$AAA?$AAP?$AAV?$AAr@|
  02518		 |$LN26@Allocate@3|
  02518	00000000	 DCD         |??_C@_1FC@MOMLDEIF@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAO?$AAM?$AAA?$AAP?$AAV?$AAr?$AAf?$AAb@|
  0251c		 |$M38277|

			 ENDP  ; |?Allocate@OMAPVrfbSurfaceManager@@UAAHW4OMAP_DSS_PIXELFORMAT@@KKPAPAVOMAPSurface@@PAV3@@Z|, OMAPVrfbSurfaceManager::Allocate

	EXPORT	|??_C@_1HI@GOKCDAPL@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAc?$AAr@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GG@IINJNKHN@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAc?$AAr?$AAe?$AAe@| [ DATA ] ; `string'
	IMPORT	|?Allocate@OMAPFlatSurface@@QAAHW4OMAP_DSS_PIXELFORMAT@@KKPAXK@Z| ; OMAPFlatSurface::Allocate
	IMPORT	|??0OMAPFlatSurface@@QAA@XZ|		; OMAPFlatSurface::OMAPFlatSurface

  000b8			 AREA	 |.pdata|, PDATA
|$T38305| DCD	|$LN25@AllocateGD|
	DCD	0x40007d04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HI@GOKCDAPL@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAc?$AAr@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "U", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e"
	DCB	0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "a", 0x0, "l"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, " ", 0x0, "o", 0x0, "f", 0x0, "f", 0x0, "s", 0x0, "c"
	DCB	0x0, "r", 0x0, "e", 0x0, "e", 0x0, "n", 0x0, " ", 0x0, "O"
	DCB	0x0, "M", 0x0, "A", 0x0, "P", 0x0, "F", 0x0, "l", 0x0, "a"
	DCB	0x0, "t", 0x0, "S", 0x0, "u", 0x0, "r", 0x0, "f", 0x0, "a"
	DCB	0x0, "c", 0x0, "e", 0x0, " ", 0x0, "m", 0x0, "e", 0x0, "m"
	DCB	0x0, "o", 0x0, "r", 0x0, "y", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GG@IINJNKHN@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAc?$AAr?$AAe?$AAe@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "U", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e"
	DCB	0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "c", 0x0, "r"
	DCB	0x0, "e", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, " ", 0x0, "o"
	DCB	0x0, "f", 0x0, "f", 0x0, "s", 0x0, "c", 0x0, "r", 0x0, "e"
	DCB	0x0, "e", 0x0, "n", 0x0, " ", 0x0, "O", 0x0, "M", 0x0, "A"
	DCB	0x0, "P", 0x0, "F", 0x0, "l", 0x0, "a", 0x0, "t", 0x0, "S"
	DCB	0x0, "u", 0x0, "r", 0x0, "f", 0x0, "a", 0x0, "c", 0x0, "e"
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  0251c			 AREA	 |.text|, CODE, ARM

  0251c		 |?AllocateGDI@OMAPVrfbSurfaceManager@@UAAHW4OMAP_DSS_PIXELFORMAT@@KKPAPAVOMAPSurface@@@Z| PROC ; OMAPVrfbSurfaceManager::AllocateGDI

; 1009 : {

  0251c		 |$LN25@AllocateGD|
  0251c	e1a0c00d	 mov         r12, sp
  02520	e92d000f	 stmdb       sp!, {r0 - r3}
  02524	e92d5000	 stmdb       sp!, {r12, lr}
  02528	e24dd054	 sub         sp, sp, #0x54
  0252c		 |$M38302|

; 1010 :     BOOL            bResult;
; 1011 :     OMAPFlatSurface *pFlatSurface;
; 1012 :     Heap*           pHeap = (Heap*) m_hOffscreenHeapVA;

  0252c	e59d305c	 ldr         r3, [sp, #0x5C]
  02530	e2833018	 add         r3, r3, #0x18
  02534	e5933000	 ldr         r3, [r3]
  02538	e58d3008	 str         r3, [sp, #8]

; 1013 :     
; 1014 :     //  Check return pointer
; 1015 :     if( ppSurface == NULL )

  0253c	e59d306c	 ldr         r3, [sp, #0x6C]
  02540	e3530000	 cmp         r3, #0
  02544	1a000001	 bne         |$LN8@AllocateGD|
  02548	ea000057	 b           |$LN7@AllocateGD|

; 1016 :         goto cleanUp;    

  0254c	ea000056	 b           |$cleanUp$37639|
  02550		 |$LN8@AllocateGD|

; 1017 :     
; 1018 :     //  Initialize return pointer
; 1019 :     *ppSurface = NULL;

  02550	e59d206c	 ldr         r2, [sp, #0x6C]
  02554	e3a03000	 mov         r3, #0
  02558	e5823000	 str         r3, [r2]

; 1020 : 
; 1021 :     //  Check for offscreen heap
; 1022 :     if( pHeap == NULL )

  0255c	e59d3008	 ldr         r3, [sp, #8]
  02560	e3530000	 cmp         r3, #0
  02564	1a000001	 bne         |$LN6@AllocateGD|
  02568	ea00004f	 b           |$LN5@AllocateGD|

; 1023 :         goto cleanUp;

  0256c	ea00004e	 b           |$cleanUp$37639|
  02570		 |$LN6@AllocateGD|

; 1024 :         
; 1025 :         
; 1026 :     //  Allocate a new flat surface object
; 1027 :     pFlatSurface = new OMAPFlatSurface;

  02570	e3a000b8	 mov         r0, #0xB8
  02574	eb000000	 bl          |??2@YAPAXI@Z|
  02578	e58d002c	 str         r0, [sp, #0x2C]
  0257c	e59d302c	 ldr         r3, [sp, #0x2C]
  02580	e58d3014	 str         r3, [sp, #0x14]
  02584	e59d3014	 ldr         r3, [sp, #0x14]
  02588	e3530000	 cmp         r3, #0
  0258c	0a000005	 beq         |$LN11@AllocateGD|
  02590	e59d0014	 ldr         r0, [sp, #0x14]
  02594	eb000000	 bl          |??0OMAPFlatSurface@@QAA@XZ|
  02598	e58d0030	 str         r0, [sp, #0x30]
  0259c	e59d3030	 ldr         r3, [sp, #0x30]
  025a0	e58d3034	 str         r3, [sp, #0x34]
  025a4	ea000001	 b           |$LN12@AllocateGD|
  025a8		 |$LN11@AllocateGD|
  025a8	e3a03000	 mov         r3, #0
  025ac	e58d3034	 str         r3, [sp, #0x34]
  025b0		 |$LN12@AllocateGD|
  025b0	e59d3034	 ldr         r3, [sp, #0x34]
  025b4	e58d3010	 str         r3, [sp, #0x10]

; 1028 :     if( pFlatSurface == NULL )

  025b8	e59d3010	 ldr         r3, [sp, #0x10]
  025bc	e3530000	 cmp         r3, #0
  025c0	1a000008	 bne         |$LN4@AllocateGD|

; 1029 :     {
; 1030 :         DEBUGMSG (ZONE_ERROR, (L"ERROR: Unable to create offscreen OMAPFlatSurface\n"));

  025c4	e59f0140	 ldr         r0, [pc, #0x140]
  025c8	eb000000	 bl          NKDbgPrintfW
  025cc	e3a03001	 mov         r3, #1
  025d0	e58d3038	 str         r3, [sp, #0x38]
  025d4	ea000001	 b           |$LN14@AllocateGD|
  025d8	e3a03000	 mov         r3, #0
  025dc	e58d3038	 str         r3, [sp, #0x38]
  025e0		 |$LN14@AllocateGD|

; 1031 :         goto cleanUp;

  025e0	ea000031	 b           |$LN3@AllocateGD|
  025e4	ea000030	 b           |$cleanUp$37639|
  025e8		 |$LN4@AllocateGD|

; 1032 :     }
; 1033 : 
; 1034 :     //  Allocate the memory for the offscreen surface
; 1035 :     bResult = pFlatSurface->Allocate(
; 1036 :                                 ePixelFormat,
; 1037 :                                 dwWidth,
; 1038 :                                 dwHeight,
; 1039 :                                 pHeap,
; 1040 :                                 m_dwOffscreenPhysical );

  025e8	e59d305c	 ldr         r3, [sp, #0x5C]
  025ec	e2833020	 add         r3, r3, #0x20
  025f0	e5933000	 ldr         r3, [r3]
  025f4	e58d3004	 str         r3, [sp, #4]
  025f8	e59d3008	 ldr         r3, [sp, #8]
  025fc	e58d3000	 str         r3, [sp]
  02600	e59d3068	 ldr         r3, [sp, #0x68]
  02604	e59d2064	 ldr         r2, [sp, #0x64]
  02608	e59d1060	 ldr         r1, [sp, #0x60]
  0260c	e59d0010	 ldr         r0, [sp, #0x10]
  02610	eb000000	 bl          |?Allocate@OMAPFlatSurface@@QAAHW4OMAP_DSS_PIXELFORMAT@@KKPAXK@Z|
  02614	e58d003c	 str         r0, [sp, #0x3C]
  02618	e59d303c	 ldr         r3, [sp, #0x3C]
  0261c	e58d300c	 str         r3, [sp, #0xC]

; 1041 :     if( bResult == FALSE )

  02620	e59d300c	 ldr         r3, [sp, #0xC]
  02624	e3530000	 cmp         r3, #0
  02628	1a00001c	 bne         |$LN2@AllocateGD|

; 1042 :     {
; 1043 :         DEBUGMSG (ZONE_ERROR, (L"ERROR: Unable to allocate offscreen OMAPFlatSurface memory\n"));

  0262c	e59f00d4	 ldr         r0, [pc, #0xD4]
  02630	eb000000	 bl          NKDbgPrintfW
  02634	e3a03001	 mov         r3, #1
  02638	e58d3040	 str         r3, [sp, #0x40]
  0263c	ea000001	 b           |$LN16@AllocateGD|
  02640	e3a03000	 mov         r3, #0
  02644	e58d3040	 str         r3, [sp, #0x40]
  02648		 |$LN16@AllocateGD|

; 1044 :         delete pFlatSurface;

  02648	e59d3010	 ldr         r3, [sp, #0x10]
  0264c	e58d301c	 str         r3, [sp, #0x1C]
  02650	e59d301c	 ldr         r3, [sp, #0x1C]
  02654	e58d3018	 str         r3, [sp, #0x18]
  02658	e59d3018	 ldr         r3, [sp, #0x18]
  0265c	e3530000	 cmp         r3, #0
  02660	0a00000a	 beq         |$LN17@AllocateGD|
  02664	e3a01001	 mov         r1, #1
  02668	e59d3018	 ldr         r3, [sp, #0x18]
  0266c	e5933000	 ldr         r3, [r3]
  02670	e59d0018	 ldr         r0, [sp, #0x18]
  02674	e5933000	 ldr         r3, [r3]
  02678	e1a0e00f	 mov         lr, pc
  0267c	e12fff13	 bx          r3
  02680	e58d0044	 str         r0, [sp, #0x44]
  02684	e59d3044	 ldr         r3, [sp, #0x44]
  02688	e58d3048	 str         r3, [sp, #0x48]
  0268c	ea000001	 b           |$LN18@AllocateGD|
  02690		 |$LN17@AllocateGD|
  02690	e3a03000	 mov         r3, #0
  02694	e58d3048	 str         r3, [sp, #0x48]
  02698		 |$LN18@AllocateGD|

; 1045 :         goto cleanUp;

  02698	ea000003	 b           |$LN1@AllocateGD|
  0269c	ea000002	 b           |$cleanUp$37639|
  026a0		 |$LN2@AllocateGD|

; 1046 :     }
; 1047 : 
; 1048 :     
; 1049 :     //  Return the new surface
; 1050 :     *ppSurface = pFlatSurface;            

  026a0	e59d2010	 ldr         r2, [sp, #0x10]
  026a4	e59d306c	 ldr         r3, [sp, #0x6C]
  026a8	e5832000	 str         r2, [r3]
  026ac		 |$LN1@AllocateGD|
  026ac		 |$LN3@AllocateGD|
  026ac		 |$LN5@AllocateGD|
  026ac		 |$LN7@AllocateGD|
  026ac		 |$cleanUp$37639|

; 1051 :     
; 1052 : cleanUp:    
; 1053 :     //  Return result
; 1054 :     return (ppSurface == NULL) ? FALSE : (*ppSurface != NULL);

  026ac	e59d306c	 ldr         r3, [sp, #0x6C]
  026b0	e3530000	 cmp         r3, #0
  026b4	1a000002	 bne         |$LN21@AllocateGD|
  026b8	e3a03000	 mov         r3, #0
  026bc	e58d304c	 str         r3, [sp, #0x4C]
  026c0	ea00000a	 b           |$LN22@AllocateGD|
  026c4		 |$LN21@AllocateGD|
  026c4	e59d306c	 ldr         r3, [sp, #0x6C]
  026c8	e5933000	 ldr         r3, [r3]
  026cc	e3530000	 cmp         r3, #0
  026d0	0a000002	 beq         |$LN19@AllocateGD|
  026d4	e3a03001	 mov         r3, #1
  026d8	e58d3050	 str         r3, [sp, #0x50]
  026dc	ea000001	 b           |$LN20@AllocateGD|
  026e0		 |$LN19@AllocateGD|
  026e0	e3a03000	 mov         r3, #0
  026e4	e58d3050	 str         r3, [sp, #0x50]
  026e8		 |$LN20@AllocateGD|
  026e8	e59d3050	 ldr         r3, [sp, #0x50]
  026ec	e58d304c	 str         r3, [sp, #0x4C]
  026f0		 |$LN22@AllocateGD|
  026f0	e59d304c	 ldr         r3, [sp, #0x4C]
  026f4	e58d3028	 str         r3, [sp, #0x28]

; 1055 : }

  026f8	e59d0028	 ldr         r0, [sp, #0x28]
  026fc	e28dd054	 add         sp, sp, #0x54
  02700	e89d6000	 ldmia       sp, {sp, lr}
  02704	e12fff1e	 bx          lr
  02708		 |$LN26@AllocateGD|
  02708		 |$LN27@AllocateGD|
  02708	00000000	 DCD         |??_C@_1HI@GOKCDAPL@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAc?$AAr@|
  0270c		 |$LN28@AllocateGD|
  0270c	00000000	 DCD         |??_C@_1GG@IINJNKHN@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAc?$AAr?$AAe?$AAe@|
  02710		 |$M38303|

			 ENDP  ; |?AllocateGDI@OMAPVrfbSurfaceManager@@UAAHW4OMAP_DSS_PIXELFORMAT@@KKPAPAVOMAPSurface@@@Z|, OMAPVrfbSurfaceManager::AllocateGDI

	END
