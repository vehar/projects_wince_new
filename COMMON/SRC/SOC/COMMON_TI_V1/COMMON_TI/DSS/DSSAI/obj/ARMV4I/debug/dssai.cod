; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\DSS\DSSAI\dssai.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|?g_rgPipelineMapping@@3PAUOMAPPipelineConfig@@A| [ DATA ] ; g_rgPipelineMapping
	EXPORT	|?g_rgPipelineScaling@@3PAUOMAPPipelineScaling@@A| [ DATA ] ; g_rgPipelineScaling
	EXPORT	|?g_dwDestinationRefCnt@@3PAKA| [ DATA ] ; g_dwDestinationRefCnt

  00000			 AREA	 |.bss|, NOINIT
|?g_rgPipelineMapping@@3PAUOMAPPipelineConfig@@A| % 0x60 ; g_rgPipelineMapping
|?g_dwDestinationRefCnt@@3PAKA| % 0x8			; g_dwDestinationRefCnt

  00000			 AREA	 |.data|, DATA
|?g_rgPipelineScaling@@3PAUOMAPPipelineScaling@@A| DCD 0x1 ; g_rgPipelineScaling
	DCD	0x1
	DCD	0x0
	DCD	0x1
	DCD	0x1
	DCD	0x0
	DCD	0x1
	DCD	0x1
	DCD	0x0
	EXPORT	|??_7OMAPDisplayController@@6B@| [ DATA ] ; OMAPDisplayController::`vftable'
	EXPORT	|??0OMAPDisplayController@@QAA@XZ|	; OMAPDisplayController::OMAPDisplayController
	IMPORT	|SOCGetDSSInfo|
	IMPORT	|?g_dwColorSpaceCoeff_BT601_Limited@@3PAKA| ; g_dwColorSpaceCoeff_BT601_Limited
	IMPORT	|LcdPdd_DVI_Enabled|
	IMPORT	|??_EOMAPDisplayController@@UAAPAXI@Z|, WEAK |??_GOMAPDisplayController@@UAAPAXI@Z| ; OMAPDisplayController::`vector deleting destructor', OMAPDisplayController::`scalar deleting destructor'

  00000			 AREA	 |.pdata|, PDATA
|$T40230| DCD	|$LN7@OMAPDispla|
	DCD	0x40008e04
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\dssai\dssai.cpp

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_7OMAPDisplayController@@6B@| DCD |??_EOMAPDisplayController@@UAAPAXI@Z| ; OMAPDisplayController::`vftable'
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0OMAPDisplayController@@QAA@XZ| PROC ; OMAPDisplayController::OMAPDisplayController

; 112  : {

  00000		 |$LN7@OMAPDispla|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd008	 sub         sp, sp, #8
  00010		 |$M40227|
  00010	e59f221c	 ldr         r2, [pc, #0x21C]
  00014	e59d3010	 ldr         r3, [sp, #0x10]
  00018	e5832000	 str         r2, [r3]

; 113  :     m_pDSSRegs = NULL;

  0001c	e59d3010	 ldr         r3, [sp, #0x10]
  00020	e2832004	 add         r2, r3, #4
  00024	e3a03000	 mov         r3, #0
  00028	e5823000	 str         r3, [r2]

; 114  :     m_pDispRegs = NULL;

  0002c	e59d3010	 ldr         r3, [sp, #0x10]
  00030	e2832008	 add         r2, r3, #8
  00034	e3a03000	 mov         r3, #0
  00038	e5823000	 str         r3, [r2]

; 115  :     m_pVencRegs = NULL;

  0003c	e59d3010	 ldr         r3, [sp, #0x10]
  00040	e283200c	 add         r2, r3, #0xC
  00044	e3a03000	 mov         r3, #0
  00048	e5823000	 str         r3, [r2]

; 116  :     
; 117  :     m_dwPowerLevel = D4;

  0004c	e59d3010	 ldr         r3, [sp, #0x10]
  00050	e2833b01	 add         r3, r3, #1, 22
  00054	e2832088	 add         r2, r3, #0x88
  00058	e3a03004	 mov         r3, #4
  0005c	e5823000	 str         r3, [r2]

; 118  :     
; 119  :     m_bTVEnable = FALSE;

  00060	e59d3010	 ldr         r3, [sp, #0x10]
  00064	e2833b01	 add         r3, r3, #1, 22
  00068	e28320b4	 add         r2, r3, #0xB4
  0006c	e3a03000	 mov         r3, #0
  00070	e5823000	 str         r3, [r2]

; 120  :     m_bHDMIEnable = FALSE;

  00074	e59d3010	 ldr         r3, [sp, #0x10]
  00078	e2833b01	 add         r3, r3, #1, 22
  0007c	e28320c8	 add         r2, r3, #0xC8
  00080	e3a03000	 mov         r3, #0
  00084	e5823000	 str         r3, [r2]

; 121  : 
; 122  :     if (LcdPdd_DVI_Enabled())

  00088	eb000000	 bl          LcdPdd_DVI_Enabled
  0008c	e58d0004	 str         r0, [sp, #4]
  00090	e59d3004	 ldr         r3, [sp, #4]
  00094	e3530000	 cmp         r3, #0
  00098	0a000005	 beq         |$LN2@OMAPDispla|

; 123  :         m_bDVIEnable = TRUE;

  0009c	e59d3010	 ldr         r3, [sp, #0x10]
  000a0	e2833b01	 add         r3, r3, #1, 22
  000a4	e28320cc	 add         r2, r3, #0xCC
  000a8	e3a03001	 mov         r3, #1
  000ac	e5823000	 str         r3, [r2]

; 124  :     else

  000b0	ea000004	 b           |$LN1@OMAPDispla|
  000b4		 |$LN2@OMAPDispla|

; 125  :         m_bDVIEnable = FALSE;

  000b4	e59d3010	 ldr         r3, [sp, #0x10]
  000b8	e2833b01	 add         r3, r3, #1, 22
  000bc	e28320cc	 add         r2, r3, #0xCC
  000c0	e3a03000	 mov         r3, #0
  000c4	e5823000	 str         r3, [r2]
  000c8		 |$LN1@OMAPDispla|

; 126  : 
; 127  :     m_bGammaEnable = TRUE;

  000c8	e59d3010	 ldr         r3, [sp, #0x10]
  000cc	e2833b01	 add         r3, r3, #1, 22
  000d0	e28320dc	 add         r2, r3, #0xDC
  000d4	e3a03001	 mov         r3, #1
  000d8	e5823000	 str         r3, [r2]

; 128  :    	m_dwEnableWaitForVerticalBlank = FALSE;

  000dc	e59d3010	 ldr         r3, [sp, #0x10]
  000e0	e2832c05	 add         r2, r3, #5, 24
  000e4	e3a03000	 mov         r3, #0
  000e8	e5823000	 str         r3, [r2]

; 129  :     m_bDssIspRszEnabled = FALSE;

  000ec	e59d3010	 ldr         r3, [sp, #0x10]
  000f0	e2833c05	 add         r3, r3, #5, 24
  000f4	e2832014	 add         r2, r3, #0x14
  000f8	e3a03000	 mov         r3, #0
  000fc	e5823000	 str         r3, [r2]

; 130  :     m_lastVsyncIRQStatus = 0;

  00100	e59d3010	 ldr         r3, [sp, #0x10]
  00104	e2833c05	 add         r3, r3, #5, 24
  00108	e2832038	 add         r2, r3, #0x38
  0010c	e3a03000	 mov         r3, #0
  00110	e5823000	 str         r3, [r2]

; 131  :     
; 132  :     m_dwContrastLevel = DEFAULT_CONTRAST_LEVEL;

  00114	e59d3010	 ldr         r3, [sp, #0x10]
  00118	e2832e4d	 add         r2, r3, #0x4D, 28
  0011c	e3a03003	 mov         r3, #3
  00120	e5823000	 str         r3, [r2]

; 133  :     m_pGammaBufVirt = NULL;

  00124	e59d3010	 ldr         r3, [sp, #0x10]
  00128	e2833b01	 add         r3, r3, #1, 22
  0012c	e28320d4	 add         r2, r3, #0xD4
  00130	e3a03000	 mov         r3, #0
  00134	e5823000	 str         r3, [r2]

; 134  :     
; 135  :     m_bDssIntThreadExit = FALSE;

  00138	e59d3010	 ldr         r3, [sp, #0x10]
  0013c	e2832e4f	 add         r2, r3, #0x4F, 28
  00140	e3a03000	 mov         r3, #0
  00144	e5823000	 str         r3, [r2]

; 136  :     m_hDssIntEvent = NULL;

  00148	e59d3010	 ldr         r3, [sp, #0x10]
  0014c	e2833b01	 add         r3, r3, #1, 22
  00150	e28320e4	 add         r2, r3, #0xE4
  00154	e3a03000	 mov         r3, #0
  00158	e5823000	 str         r3, [r2]

; 137  :     m_hDssIntThread = NULL;

  0015c	e59d3010	 ldr         r3, [sp, #0x10]
  00160	e2833b01	 add         r3, r3, #1, 22
  00164	e28320e8	 add         r2, r3, #0xE8
  00168	e3a03000	 mov         r3, #0
  0016c	e5823000	 str         r3, [r2]

; 138  :     m_dwDssSysIntr = 0;

  00170	e59d3010	 ldr         r3, [sp, #0x10]
  00174	e2833b01	 add         r3, r3, #1, 22
  00178	e28320ec	 add         r2, r3, #0xEC
  0017c	e3a03000	 mov         r3, #0
  00180	e5823000	 str         r3, [r2]

; 139  : 
; 140  :     m_dwVsyncPeriod = 0;

  00184	e59d3010	 ldr         r3, [sp, #0x10]
  00188	e2833b01	 add         r3, r3, #1, 22
  0018c	e28320fc	 add         r2, r3, #0xFC
  00190	e3a03000	 mov         r3, #0
  00194	e5823000	 str         r3, [r2]

; 141  :     m_hVsyncEvent = NULL;

  00198	e59d3010	 ldr         r3, [sp, #0x10]
  0019c	e2833b01	 add         r3, r3, #1, 22
  001a0	e28320f4	 add         r2, r3, #0xF4
  001a4	e3a03000	 mov         r3, #0
  001a8	e5823000	 str         r3, [r2]

; 142  :     m_hVsyncEventSGX = NULL;

  001ac	e59d3010	 ldr         r3, [sp, #0x10]
  001b0	e2833b01	 add         r3, r3, #1, 22
  001b4	e28320f8	 add         r2, r3, #0xF8
  001b8	e3a03000	 mov         r3, #0
  001bc	e5823000	 str         r3, [r2]

; 143  : 
; 144  :     m_hScanLineEvent = NULL;

  001c0	e59d3010	 ldr         r3, [sp, #0x10]
  001c4	e2833c05	 add         r3, r3, #5, 24
  001c8	e2832004	 add         r2, r3, #4
  001cc	e3a03000	 mov         r3, #0
  001d0	e5823000	 str         r3, [r2]

; 145  :     
; 146  :     m_pColorSpaceCoeffs = g_dwColorSpaceCoeff_BT601_Limited;

  001d4	e59d3010	 ldr         r3, [sp, #0x10]
  001d8	e2832e4a	 add         r2, r3, #0x4A, 28
  001dc	e59f304c	 ldr         r3, [pc, #0x4C]
  001e0	e5823000	 str         r3, [r2]

; 147  :     
; 148  :     m_bLPREnable = FALSE;

  001e4	e59d3010	 ldr         r3, [sp, #0x10]
  001e8	e2832e51	 add         r2, r3, #0x51, 28
  001ec	e3a03000	 mov         r3, #0
  001f0	e5823000	 str         r3, [r2]

; 149  : 
; 150  :     m_hSmartReflexPolicyAdapter = NULL;

  001f4	e59d3010	 ldr         r3, [sp, #0x10]
  001f8	e2833c05	 add         r3, r3, #5, 24
  001fc	e2832018	 add         r2, r3, #0x18
  00200	e3a03000	 mov         r3, #0
  00204	e5823000	 str         r3, [r2]

; 151  : 
; 152  :     SOCGetDSSInfo(&m_dssinfo);

  00208	e59d3010	 ldr         r3, [sp, #0x10]
  0020c	e2833c05	 add         r3, r3, #5, 24
  00210	e283001c	 add         r0, r3, #0x1C
  00214	eb000000	 bl          SOCGetDSSInfo

; 153  : }

  00218	e59d3010	 ldr         r3, [sp, #0x10]
  0021c	e58d3000	 str         r3, [sp]
  00220	e59d0000	 ldr         r0, [sp]
  00224	e28dd008	 add         sp, sp, #8
  00228	e89d6000	 ldmia       sp, {sp, lr}
  0022c	e12fff1e	 bx          lr
  00230		 |$LN8@OMAPDispla|
  00230		 |$LN9@OMAPDispla|
  00230	00000000	 DCD         |?g_dwColorSpaceCoeff_BT601_Limited@@3PAKA|
  00234		 |$LN10@OMAPDispla|
  00234	00000000	 DCD         |??_7OMAPDisplayController@@6B@|
  00238		 |$M40228|

			 ENDP  ; |??0OMAPDisplayController@@QAA@XZ|, OMAPDisplayController::OMAPDisplayController

	EXPORT	|??1OMAPDisplayController@@UAA@XZ|	; OMAPDisplayController::~OMAPDisplayController
	IMPORT	|??3@YAXPAX@Z|				; operator delete

  00000			 AREA	 |.pdata|, PDATA
|$T40239| DCD	|$LN6@scalar|
	DCD	0x40001104
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??_GOMAPDisplayController@@UAAPAXI@Z| PROC ; OMAPDisplayController::`scalar deleting destructor'
  00000		 |$LN6@scalar|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M40236|
  00010	e59d000c	 ldr         r0, [sp, #0xC]
  00014	eb000000	 bl          |??1OMAPDisplayController@@UAA@XZ|
  00018	e59d3010	 ldr         r3, [sp, #0x10]
  0001c	e3130001	 tst         r3, #1
  00020	0a000001	 beq         |$LN1@scalar|
  00024	e59d000c	 ldr         r0, [sp, #0xC]
  00028	eb000000	 bl          |??3@YAXPAX@Z|
  0002c		 |$LN1@scalar|
  0002c	e59d300c	 ldr         r3, [sp, #0xC]
  00030	e58d3000	 str         r3, [sp]
  00034	e59d0000	 ldr         r0, [sp]
  00038	e28dd004	 add         sp, sp, #4
  0003c	e89d6000	 ldmia       sp, {sp, lr}
  00040	e12fff1e	 bx          lr
  00044		 |$M40237|

			 ENDP  ; |??_GOMAPDisplayController@@UAAPAXI@Z|, OMAPDisplayController::`scalar deleting destructor'

	EXPORT	|?UninitInterrupts@OMAPDisplayController@@QAAXXZ| ; OMAPDisplayController::UninitInterrupts
	IMPORT	|MmUnmapIoSpace|
	IMPORT	|FreePhysMem|
	IMPORT	|PmxClosePolicy|
	IMPORT	|DeleteCriticalSection|
	IMPORT	|EnableDeviceClocks|

  00008			 AREA	 |.pdata|, PDATA
|$T40246| DCD	|$LN12@OMAPDispla@2|
	DCD	0x40006203
; Function compile flags: /Odtp

  00238			 AREA	 |.text|, CODE, ARM

  00238		 |??1OMAPDisplayController@@UAA@XZ| PROC ; OMAPDisplayController::~OMAPDisplayController

; 157  : {

  00238		 |$LN12@OMAPDispla@2|
  00238	e1a0c00d	 mov         r12, sp
  0023c	e92d0001	 stmdb       sp!, {r0}
  00240	e92d5000	 stmdb       sp!, {r12, lr}
  00244		 |$M40243|
  00244	e59f2170	 ldr         r2, [pc, #0x170]
  00248	e59d3008	 ldr         r3, [sp, #8]
  0024c	e5832000	 str         r2, [r3]

; 158  :     UninitInterrupts();

  00250	e59d0008	 ldr         r0, [sp, #8]
  00254	eb000000	 bl          |?UninitInterrupts@OMAPDisplayController@@QAAXXZ|

; 159  : 
; 160  :     //  Release all clocks
; 161  :     EnableDeviceClocks( m_dssinfo.DSSDevice, FALSE );

  00258	e3a01000	 mov         r1, #0
  0025c	e59d3008	 ldr         r3, [sp, #8]
  00260	e2833c05	 add         r3, r3, #5, 24
  00264	e283301c	 add         r3, r3, #0x1C
  00268	e5930000	 ldr         r0, [r3]
  0026c	eb000000	 bl          EnableDeviceClocks

; 162  :     EnableDeviceClocks( m_dssinfo.TVEncoderDevice, FALSE );         

  00270	e3a01000	 mov         r1, #0
  00274	e59d3008	 ldr         r3, [sp, #8]
  00278	e2833e52	 add         r3, r3, #0x52, 28
  0027c	e5930000	 ldr         r0, [r3]
  00280	eb000000	 bl          EnableDeviceClocks

; 163  : 
; 164  :     //  Delete power lock critical section
; 165  :     DeleteCriticalSection( &m_csPowerLock );

  00284	e59d3008	 ldr         r3, [sp, #8]
  00288	e2833b01	 add         r3, r3, #1, 22
  0028c	e283008c	 add         r0, r3, #0x8C
  00290	eb000000	 bl          DeleteCriticalSection

; 166  : 
; 167  :     // Close SmartReflex policy adapter
; 168  :     if (m_hSmartReflexPolicyAdapter != NULL)

  00294	e59d3008	 ldr         r3, [sp, #8]
  00298	e2833c05	 add         r3, r3, #5, 24
  0029c	e2833018	 add         r3, r3, #0x18
  002a0	e5933000	 ldr         r3, [r3]
  002a4	e3530000	 cmp         r3, #0
  002a8	0a000004	 beq         |$LN7@OMAPDispla@2|

; 169  :         PmxClosePolicy(m_hSmartReflexPolicyAdapter);

  002ac	e59d3008	 ldr         r3, [sp, #8]
  002b0	e2833c05	 add         r3, r3, #5, 24
  002b4	e2833018	 add         r3, r3, #0x18
  002b8	e5930000	 ldr         r0, [r3]
  002bc	eb000000	 bl          PmxClosePolicy
  002c0		 |$LN7@OMAPDispla@2|

; 170  :     
; 171  :     //  Free allocated memory
; 172  :     if( m_pGammaBufVirt != NULL )

  002c0	e59d3008	 ldr         r3, [sp, #8]
  002c4	e2833b01	 add         r3, r3, #1, 22
  002c8	e28330d4	 add         r3, r3, #0xD4
  002cc	e5933000	 ldr         r3, [r3]
  002d0	e3530000	 cmp         r3, #0
  002d4	0a000004	 beq         |$LN6@OMAPDispla@2|

; 173  :         FreePhysMem( m_pGammaBufVirt );

  002d8	e59d3008	 ldr         r3, [sp, #8]
  002dc	e2833b01	 add         r3, r3, #1, 22
  002e0	e28330d4	 add         r3, r3, #0xD4
  002e4	e5930000	 ldr         r0, [r3]
  002e8	eb000000	 bl          FreePhysMem
  002ec		 |$LN6@OMAPDispla@2|

; 174  :         
; 175  :     //  Unmap registers
; 176  :     if (m_pDSSRegs != NULL) 

  002ec	e59d3008	 ldr         r3, [sp, #8]
  002f0	e2833004	 add         r3, r3, #4
  002f4	e5933000	 ldr         r3, [r3]
  002f8	e3530000	 cmp         r3, #0
  002fc	0a000004	 beq         |$LN5@OMAPDispla@2|

; 177  :         MmUnmapIoSpace((VOID*)m_pDSSRegs, DSS_REGS_SIZE);

  00300	e3a01b01	 mov         r1, #1, 22
  00304	e59d3008	 ldr         r3, [sp, #8]
  00308	e2833004	 add         r3, r3, #4
  0030c	e5930000	 ldr         r0, [r3]
  00310	eb000000	 bl          MmUnmapIoSpace
  00314		 |$LN5@OMAPDispla@2|

; 178  : 
; 179  :     if (m_pDispRegs != NULL) 

  00314	e59d3008	 ldr         r3, [sp, #8]
  00318	e2833008	 add         r3, r3, #8
  0031c	e5933000	 ldr         r3, [r3]
  00320	e3530000	 cmp         r3, #0
  00324	0a000004	 beq         |$LN4@OMAPDispla@2|

; 180  :         MmUnmapIoSpace((VOID*)m_pDispRegs, DSS_REGS_SIZE);

  00328	e3a01b01	 mov         r1, #1, 22
  0032c	e59d3008	 ldr         r3, [sp, #8]
  00330	e2833008	 add         r3, r3, #8
  00334	e5930000	 ldr         r0, [r3]
  00338	eb000000	 bl          MmUnmapIoSpace
  0033c		 |$LN4@OMAPDispla@2|

; 181  : 
; 182  :     if (m_pVencRegs != NULL) 

  0033c	e59d3008	 ldr         r3, [sp, #8]
  00340	e283300c	 add         r3, r3, #0xC
  00344	e5933000	 ldr         r3, [r3]
  00348	e3530000	 cmp         r3, #0
  0034c	0a000004	 beq         |$LN3@OMAPDispla@2|

; 183  :         MmUnmapIoSpace((VOID*)m_pVencRegs, DSS_REGS_SIZE);

  00350	e3a01b01	 mov         r1, #1, 22
  00354	e59d3008	 ldr         r3, [sp, #8]
  00358	e283300c	 add         r3, r3, #0xC
  0035c	e5930000	 ldr         r0, [r3]
  00360	eb000000	 bl          MmUnmapIoSpace
  00364		 |$LN3@OMAPDispla@2|

; 184  :         
; 185  :     if (m_pDSIRegs != NULL)

  00364	e59d3008	 ldr         r3, [sp, #8]
  00368	e2833010	 add         r3, r3, #0x10
  0036c	e5933000	 ldr         r3, [r3]
  00370	e3530000	 cmp         r3, #0
  00374	0a000004	 beq         |$LN2@OMAPDispla@2|

; 186  :         MmUnmapIoSpace((VOID*)m_pDSIRegs,  sizeof(OMAP_DSI_REGS));

  00378	e3a010c0	 mov         r1, #0xC0
  0037c	e59d3008	 ldr         r3, [sp, #8]
  00380	e2833010	 add         r3, r3, #0x10
  00384	e5930000	 ldr         r0, [r3]
  00388	eb000000	 bl          MmUnmapIoSpace
  0038c		 |$LN2@OMAPDispla@2|

; 187  : 
; 188  :     if (m_pDSIPLLRegs != NULL)

  0038c	e59d3008	 ldr         r3, [sp, #8]
  00390	e2833014	 add         r3, r3, #0x14
  00394	e5933000	 ldr         r3, [r3]
  00398	e3530000	 cmp         r3, #0
  0039c	0a000004	 beq         |$LN1@OMAPDispla@2|

; 189  :         MmUnmapIoSpace((VOID*)m_pDSIPLLRegs, sizeof(OMAP_DSI_PLL_REGS));

  003a0	e3a01014	 mov         r1, #0x14
  003a4	e59d3008	 ldr         r3, [sp, #8]
  003a8	e2833014	 add         r3, r3, #0x14
  003ac	e5930000	 ldr         r0, [r3]
  003b0	eb000000	 bl          MmUnmapIoSpace
  003b4		 |$LN1@OMAPDispla@2|

; 190  : 
; 191  : }

  003b4	e89d6000	 ldmia       sp, {sp, lr}
  003b8	e12fff1e	 bx          lr
  003bc		 |$LN13@OMAPDispla@2|
  003bc		 |$LN14@OMAPDispla@2|
  003bc	00000000	 DCD         |??_7OMAPDisplayController@@6B@|
  003c0		 |$M40244|

			 ENDP  ; |??1OMAPDisplayController@@UAA@XZ|, OMAPDisplayController::~OMAPDisplayController

	EXPORT	|??_C@_1BI@GKABGADH@?$AAS?$AAM?$AAA?$AAR?$AAT?$AAR?$AAE?$AAF?$AAL?$AAE?$AAX?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|?SetPowerLevel@OMAPDisplayController@@QAAHK@Z| ; OMAPDisplayController::SetPowerLevel
	EXPORT	|?ResetDSS@OMAPDisplayController@@IAAHXZ| ; OMAPDisplayController::ResetDSS
	EXPORT	|??_C@_1IO@PPJICGNB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAM?$AAA?$AAP?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAI?$AAn@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1KC@HIABDGPO@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@| [ DATA ] ; `string'
	EXPORT	|??_C@_1KI@JELIIFJI@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAM?$AAA?$AAP?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAI?$AAn@| [ DATA ] ; `string'
	EXPORT	|??_C@_1KC@ILFJHOND@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAM?$AAA?$AAP?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAI?$AAn@| [ DATA ] ; `string'
	EXPORT	|??_C@_1KG@JEDAHDGO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAC?$AAO?$AAM?$AAA?$AAP?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAI@| [ DATA ] ; `string'
	EXPORT	|??_C@_1KE@MFEOEMFC@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAM?$AAA?$AAP?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAI?$AAn@| [ DATA ] ; `string'
	EXPORT	|??_C@_1KG@GJACHAEL@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAM?$AAA?$AAP?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAI?$AAn@| [ DATA ] ; `string'
	EXPORT	|??_C@_1KC@JKCJEHKF@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAM?$AAA?$AAP?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAI?$AAn@| [ DATA ] ; `string'
	EXPORT	|?InitController@OMAPDisplayController@@QAAHHHH@Z| ; OMAPDisplayController::InitController
	IMPORT	|PmxOpenPolicy|
	IMPORT	|LeaveCriticalSection|
	IMPORT	|RequestDevicePads|
	IMPORT	|EnterCriticalSection|
	IMPORT	|InitializeCriticalSection|
	IMPORT	|AllocPhysMem|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|MmMapIoSpace|

  00010			 AREA	 |.pdata|, PDATA
|$T40269| DCD	|$LN36@InitContro|
	DCD	0x40014b04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BI@GKABGADH@?$AAS?$AAM?$AAA?$AAR?$AAT?$AAR?$AAE?$AAF?$AAL?$AAE?$AAX?$AA?$AA@| DCB "S"
	DCB	0x0, "M", 0x0, "A", 0x0, "R", 0x0, "T", 0x0, "R", 0x0, "E"
	DCB	0x0, "F", 0x0, "L", 0x0, "E", 0x0, "X", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IO@PPJICGNB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAM?$AAA?$AAP?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAI?$AAn@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "M", 0x0, "A", 0x0, "P", 0x0, "D", 0x0, "i"
	DCB	0x0, "s", 0x0, "p", 0x0, "l", 0x0, "a", 0x0, "y", 0x0, "C"
	DCB	0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o", 0x0, "l"
	DCB	0x0, "l", 0x0, "e", 0x0, "r", 0x0, ":", 0x0, ":", 0x0, "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "C", 0x0, "o", 0x0, "n"
	DCB	0x0, "t", 0x0, "r", 0x0, "o", 0x0, "l", 0x0, "l", 0x0, "e"
	DCB	0x0, "r", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "t", 0x0, "o"
	DCB	0x0, " ", 0x0, "r", 0x0, "e", 0x0, "q", 0x0, "u", 0x0, "e"
	DCB	0x0, "s", 0x0, "t", 0x0, " ", 0x0, "p", 0x0, "a", 0x0, "d"
	DCB	0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "%", 0x0, "s", 0x0, " ", 0x0, "l", 0x0, "i", 0x0, "n"
	DCB	0x0, "e", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ":", 0x0, " "
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KC@HIABDGPO@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@| DCB "C"
	DCB	0x0, ":", 0x0, "\\", 0x0, "W", 0x0, "I", 0x0, "N", 0x0, "C"
	DCB	0x0, "E", 0x0, "6", 0x0, "0", 0x0, "0", 0x0, "\\", 0x0, "P"
	DCB	0x0, "L", 0x0, "A", 0x0, "T", 0x0, "F", 0x0, "O", 0x0, "R"
	DCB	0x0, "M", 0x0, "\\", 0x0, "C", 0x0, "O", 0x0, "M", 0x0, "M"
	DCB	0x0, "O", 0x0, "N", 0x0, "\\", 0x0, "S", 0x0, "R", 0x0, "C"
	DCB	0x0, "\\", 0x0, "S", 0x0, "O", 0x0, "C", 0x0, "\\", 0x0, "C"
	DCB	0x0, "O", 0x0, "M", 0x0, "M", 0x0, "O", 0x0, "N", 0x0, "_"
	DCB	0x0, "T", 0x0, "I", 0x0, "_", 0x0, "V", 0x0, "1", 0x0, "\\"
	DCB	0x0, "C", 0x0, "O", 0x0, "M", 0x0, "M", 0x0, "O", 0x0, "N"
	DCB	0x0, "_", 0x0, "T", 0x0, "I", 0x0, "\\", 0x0, "D", 0x0, "S"
	DCB	0x0, "S", 0x0, "\\", 0x0, "D", 0x0, "S", 0x0, "S", 0x0, "A"
	DCB	0x0, "I", 0x0, "\\", 0x0, ".", 0x0, "\\", 0x0, "d", 0x0, "s"
	DCB	0x0, "s", 0x0, "a", 0x0, "i", 0x0, ".", 0x0, "c", 0x0, "p"
	DCB	0x0, "p", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KI@JELIIFJI@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAM?$AAA?$AAP?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAI?$AAn@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "M", 0x0, "A", 0x0, "P", 0x0, "D", 0x0, "i"
	DCB	0x0, "s", 0x0, "p", 0x0, "l", 0x0, "a", 0x0, "y", 0x0, "C"
	DCB	0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o", 0x0, "l"
	DCB	0x0, "l", 0x0, "e", 0x0, "r", 0x0, ":", 0x0, ":", 0x0, "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "C", 0x0, "o", 0x0, "n"
	DCB	0x0, "t", 0x0, "r", 0x0, "o", 0x0, "l", 0x0, "l", 0x0, "e"
	DCB	0x0, "r", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "m", 0x0, "a"
	DCB	0x0, "p", 0x0, " ", 0x0, "D", 0x0, "S", 0x0, "I", 0x0, "P"
	DCB	0x0, "L", 0x0, "L", 0x0, " ", 0x0, "c", 0x0, "o", 0x0, "n"
	DCB	0x0, "t", 0x0, "r", 0x0, "o", 0x0, "l", 0x0, " ", 0x0, "r"
	DCB	0x0, "e", 0x0, "g", 0x0, "i", 0x0, "s", 0x0, "t", 0x0, "e"
	DCB	0x0, "r", 0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KC@ILFJHOND@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAM?$AAA?$AAP?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAI?$AAn@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "M", 0x0, "A", 0x0, "P", 0x0, "D", 0x0, "i"
	DCB	0x0, "s", 0x0, "p", 0x0, "l", 0x0, "a", 0x0, "y", 0x0, "C"
	DCB	0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o", 0x0, "l"
	DCB	0x0, "l", 0x0, "e", 0x0, "r", 0x0, ":", 0x0, ":", 0x0, "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "C", 0x0, "o", 0x0, "n"
	DCB	0x0, "t", 0x0, "r", 0x0, "o", 0x0, "l", 0x0, "l", 0x0, "e"
	DCB	0x0, "r", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "m", 0x0, "a"
	DCB	0x0, "p", 0x0, " ", 0x0, "D", 0x0, "S", 0x0, "I", 0x0, " "
	DCB	0x0, "c", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o"
	DCB	0x0, "l", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "g", 0x0, "i"
	DCB	0x0, "s", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "s", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KG@JEDAHDGO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAC?$AAO?$AAM?$AAA?$AAP?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAI@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "C", 0x0, "O", 0x0, "M", 0x0, "A", 0x0, "P", 0x0, "D"
	DCB	0x0, "i", 0x0, "s", 0x0, "p", 0x0, "l", 0x0, "a", 0x0, "y"
	DCB	0x0, "C", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o"
	DCB	0x0, "l", 0x0, "l", 0x0, "e", 0x0, "r", 0x0, ":", 0x0, ":"
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "C", 0x0, "o"
	DCB	0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o", 0x0, "l", 0x0, "l"
	DCB	0x0, "e", 0x0, "r", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "a"
	DCB	0x0, "l", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t"
	DCB	0x0, "e", 0x0, " ", 0x0, "G", 0x0, "a", 0x0, "m", 0x0, "m"
	DCB	0x0, "a", 0x0, " ", 0x0, "p", 0x0, "h", 0x0, "y", 0x0, "s"
	DCB	0x0, " ", 0x0, "b", 0x0, "u", 0x0, "f", 0x0, "f", 0x0, "e"
	DCB	0x0, "r", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KE@MFEOEMFC@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAM?$AAA?$AAP?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAI?$AAn@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "M", 0x0, "A", 0x0, "P", 0x0, "D", 0x0, "i"
	DCB	0x0, "s", 0x0, "p", 0x0, "l", 0x0, "a", 0x0, "y", 0x0, "C"
	DCB	0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o", 0x0, "l"
	DCB	0x0, "l", 0x0, "e", 0x0, "r", 0x0, ":", 0x0, ":", 0x0, "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "C", 0x0, "o", 0x0, "n"
	DCB	0x0, "t", 0x0, "r", 0x0, "o", 0x0, "l", 0x0, "l", 0x0, "e"
	DCB	0x0, "r", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "m", 0x0, "a"
	DCB	0x0, "p", 0x0, " ", 0x0, "V", 0x0, "E", 0x0, "N", 0x0, "C"
	DCB	0x0, " ", 0x0, "c", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r"
	DCB	0x0, "o", 0x0, "l", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "g"
	DCB	0x0, "i", 0x0, "s", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "s"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KG@GJACHAEL@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAM?$AAA?$AAP?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAI?$AAn@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "M", 0x0, "A", 0x0, "P", 0x0, "D", 0x0, "i"
	DCB	0x0, "s", 0x0, "p", 0x0, "l", 0x0, "a", 0x0, "y", 0x0, "C"
	DCB	0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o", 0x0, "l"
	DCB	0x0, "l", 0x0, "e", 0x0, "r", 0x0, ":", 0x0, ":", 0x0, "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "C", 0x0, "o", 0x0, "n"
	DCB	0x0, "t", 0x0, "r", 0x0, "o", 0x0, "l", 0x0, "l", 0x0, "e"
	DCB	0x0, "r", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "m", 0x0, "a"
	DCB	0x0, "p", 0x0, " ", 0x0, "D", 0x0, "I", 0x0, "S", 0x0, "P"
	DCB	0x0, "C", 0x0, " ", 0x0, "c", 0x0, "o", 0x0, "n", 0x0, "t"
	DCB	0x0, "r", 0x0, "o", 0x0, "l", 0x0, " ", 0x0, "r", 0x0, "e"
	DCB	0x0, "g", 0x0, "i", 0x0, "s", 0x0, "t", 0x0, "e", 0x0, "r"
	DCB	0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KC@JKCJEHKF@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAM?$AAA?$AAP?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAI?$AAn@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "M", 0x0, "A", 0x0, "P", 0x0, "D", 0x0, "i"
	DCB	0x0, "s", 0x0, "p", 0x0, "l", 0x0, "a", 0x0, "y", 0x0, "C"
	DCB	0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o", 0x0, "l"
	DCB	0x0, "l", 0x0, "e", 0x0, "r", 0x0, ":", 0x0, ":", 0x0, "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "C", 0x0, "o", 0x0, "n"
	DCB	0x0, "t", 0x0, "r", 0x0, "o", 0x0, "l", 0x0, "l", 0x0, "e"
	DCB	0x0, "r", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "m", 0x0, "a"
	DCB	0x0, "p", 0x0, " ", 0x0, "D", 0x0, "S", 0x0, "S", 0x0, " "
	DCB	0x0, "c", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o"
	DCB	0x0, "l", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "g", 0x0, "i"
	DCB	0x0, "s", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "s", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  003c0			 AREA	 |.text|, CODE, ARM

  003c0		 |?InitController@OMAPDisplayController@@QAAHHHH@Z| PROC ; OMAPDisplayController::InitController

; 196  : {

  003c0		 |$LN36@InitContro|
  003c0	e1a0c00d	 mov         r12, sp
  003c4	e92d000f	 stmdb       sp!, {r0 - r3}
  003c8	e92d5000	 stmdb       sp!, {r12, lr}
  003cc	e24dd058	 sub         sp, sp, #0x58
  003d0		 |$M40266|

; 197  :     BOOL    bResult = FALSE;

  003d0	e3a03000	 mov         r3, #0
  003d4	e58d3010	 str         r3, [sp, #0x10]

; 198  :     PHYSICAL_ADDRESS pa;
; 199  :     DWORD size;
; 200  : 
; 201  :     //
; 202  :     //  Map display controller registers
; 203  :     //
; 204  :     pa.QuadPart = m_dssinfo.DSS1_REGS_PA;

  003d8	e59d3060	 ldr         r3, [sp, #0x60]
  003dc	e2833c05	 add         r3, r3, #5, 24
  003e0	e2833024	 add         r3, r3, #0x24
  003e4	e5933000	 ldr         r3, [r3]
  003e8	e58d3008	 str         r3, [sp, #8]
  003ec	e3a03000	 mov         r3, #0
  003f0	e58d300c	 str         r3, [sp, #0xC]

; 205  :     size = DSS_REGS_SIZE;

  003f4	e3a03b01	 mov         r3, #1, 22
  003f8	e58d3004	 str         r3, [sp, #4]

; 206  :     m_pDSSRegs = (OMAP_DSS_REGS*)MmMapIoSpace(pa, size, FALSE);

  003fc	e3a03000	 mov         r3, #0
  00400	e59d2004	 ldr         r2, [sp, #4]
  00404	e59d0008	 ldr         r0, [sp, #8]
  00408	e59d100c	 ldr         r1, [sp, #0xC]
  0040c	eb000000	 bl          MmMapIoSpace
  00410	e58d001c	 str         r0, [sp, #0x1C]
  00414	e59d3060	 ldr         r3, [sp, #0x60]
  00418	e2832004	 add         r2, r3, #4
  0041c	e59d301c	 ldr         r3, [sp, #0x1C]
  00420	e5823000	 str         r3, [r2]

; 207  :     if (m_pDSSRegs == NULL)

  00424	e59d3060	 ldr         r3, [sp, #0x60]
  00428	e2833004	 add         r3, r3, #4
  0042c	e5933000	 ldr         r3, [r3]
  00430	e3530000	 cmp         r3, #0
  00434	1a000008	 bne         |$LN17@InitContro|

; 208  :         {
; 209  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: OMAPDisplayController::InitController: "
; 210  :              L"Failed map DSS control registers\r\n"
; 211  :             ));

  00438	e59f04a8	 ldr         r0, [pc, #0x4A8]
  0043c	eb000000	 bl          NKDbgPrintfW
  00440	e3a03001	 mov         r3, #1
  00444	e58d3020	 str         r3, [sp, #0x20]
  00448	ea000001	 b           |$LN21@InitContro|
  0044c	e3a03000	 mov         r3, #0
  00450	e58d3020	 str         r3, [sp, #0x20]
  00454		 |$LN21@InitContro|

; 212  :         goto cleanUp;

  00454	ea000114	 b           |$LN16@InitContro|
  00458	ea000113	 b           |$cleanUp$37855|
  0045c		 |$LN17@InitContro|

; 213  :         }
; 214  : 
; 215  :     pa.QuadPart = m_dssinfo.DISC1_REGS_PA;

  0045c	e59d3060	 ldr         r3, [sp, #0x60]
  00460	e2833c05	 add         r3, r3, #5, 24
  00464	e2833028	 add         r3, r3, #0x28
  00468	e5933000	 ldr         r3, [r3]
  0046c	e58d3008	 str         r3, [sp, #8]
  00470	e3a03000	 mov         r3, #0
  00474	e58d300c	 str         r3, [sp, #0xC]

; 216  :     size = DSS_REGS_SIZE;

  00478	e3a03b01	 mov         r3, #1, 22
  0047c	e58d3004	 str         r3, [sp, #4]

; 217  :     m_pDispRegs = (OMAP_DISPC_REGS*)MmMapIoSpace(pa, size, FALSE);

  00480	e3a03000	 mov         r3, #0
  00484	e59d2004	 ldr         r2, [sp, #4]
  00488	e59d0008	 ldr         r0, [sp, #8]
  0048c	e59d100c	 ldr         r1, [sp, #0xC]
  00490	eb000000	 bl          MmMapIoSpace
  00494	e58d0024	 str         r0, [sp, #0x24]
  00498	e59d3060	 ldr         r3, [sp, #0x60]
  0049c	e2832008	 add         r2, r3, #8
  004a0	e59d3024	 ldr         r3, [sp, #0x24]
  004a4	e5823000	 str         r3, [r2]

; 218  :     if (m_pDispRegs == NULL)

  004a8	e59d3060	 ldr         r3, [sp, #0x60]
  004ac	e2833008	 add         r3, r3, #8
  004b0	e5933000	 ldr         r3, [r3]
  004b4	e3530000	 cmp         r3, #0
  004b8	1a000008	 bne         |$LN15@InitContro|

; 219  :         {
; 220  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: OMAPDisplayController::InitController: "
; 221  :              L"Failed map DISPC control registers\r\n"
; 222  :             ));

  004bc	e59f0420	 ldr         r0, [pc, #0x420]
  004c0	eb000000	 bl          NKDbgPrintfW
  004c4	e3a03001	 mov         r3, #1
  004c8	e58d3028	 str         r3, [sp, #0x28]
  004cc	ea000001	 b           |$LN23@InitContro|
  004d0	e3a03000	 mov         r3, #0
  004d4	e58d3028	 str         r3, [sp, #0x28]
  004d8		 |$LN23@InitContro|

; 223  :         goto cleanUp;

  004d8	ea0000f3	 b           |$LN14@InitContro|
  004dc	ea0000f2	 b           |$cleanUp$37855|
  004e0		 |$LN15@InitContro|

; 224  :         }
; 225  : 
; 226  :     pa.QuadPart = m_dssinfo.VENC1_REGS_PA;

  004e0	e59d3060	 ldr         r3, [sp, #0x60]
  004e4	e2833c05	 add         r3, r3, #5, 24
  004e8	e283302c	 add         r3, r3, #0x2C
  004ec	e5933000	 ldr         r3, [r3]
  004f0	e58d3008	 str         r3, [sp, #8]
  004f4	e3a03000	 mov         r3, #0
  004f8	e58d300c	 str         r3, [sp, #0xC]

; 227  :     size = DSS_REGS_SIZE;

  004fc	e3a03b01	 mov         r3, #1, 22
  00500	e58d3004	 str         r3, [sp, #4]

; 228  :     m_pVencRegs = (OMAP_VENC_REGS*)MmMapIoSpace(pa, size, FALSE);

  00504	e3a03000	 mov         r3, #0
  00508	e59d2004	 ldr         r2, [sp, #4]
  0050c	e59d0008	 ldr         r0, [sp, #8]
  00510	e59d100c	 ldr         r1, [sp, #0xC]
  00514	eb000000	 bl          MmMapIoSpace
  00518	e58d002c	 str         r0, [sp, #0x2C]
  0051c	e59d3060	 ldr         r3, [sp, #0x60]
  00520	e283200c	 add         r2, r3, #0xC
  00524	e59d302c	 ldr         r3, [sp, #0x2C]
  00528	e5823000	 str         r3, [r2]

; 229  :     if (m_pVencRegs == NULL)

  0052c	e59d3060	 ldr         r3, [sp, #0x60]
  00530	e283300c	 add         r3, r3, #0xC
  00534	e5933000	 ldr         r3, [r3]
  00538	e3530000	 cmp         r3, #0
  0053c	1a000008	 bne         |$LN13@InitContro|

; 230  :         {
; 231  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: OMAPDisplayController::InitController: "
; 232  :              L"Failed map VENC control registers\r\n"
; 233  :             ));

  00540	e59f0398	 ldr         r0, [pc, #0x398]
  00544	eb000000	 bl          NKDbgPrintfW
  00548	e3a03001	 mov         r3, #1
  0054c	e58d3030	 str         r3, [sp, #0x30]
  00550	ea000001	 b           |$LN25@InitContro|
  00554	e3a03000	 mov         r3, #0
  00558	e58d3030	 str         r3, [sp, #0x30]
  0055c		 |$LN25@InitContro|

; 234  :         goto cleanUp;

  0055c	ea0000d2	 b           |$LN12@InitContro|
  00560	ea0000d1	 b           |$cleanUp$37855|
  00564		 |$LN13@InitContro|

; 235  :         }
; 236  : 
; 237  :     // Disable gamma correction based on registry
; 238  :     if(!bEnableGammaCorr)

  00564	e59d3064	 ldr         r3, [sp, #0x64]
  00568	e3530000	 cmp         r3, #0
  0056c	1a000004	 bne         |$LN11@InitContro|

; 239  :         m_bGammaEnable = FALSE;

  00570	e59d3060	 ldr         r3, [sp, #0x60]
  00574	e2833b01	 add         r3, r3, #1, 22
  00578	e28320dc	 add         r2, r3, #0xDC
  0057c	e3a03000	 mov         r3, #0
  00580	e5823000	 str         r3, [r2]
  00584		 |$LN11@InitContro|

; 240  : 
; 241  :     // Enable VSYNC code based on registry
; 242  :     if (bEnableWaitForVerticalBlank)

  00584	e59d3068	 ldr         r3, [sp, #0x68]
  00588	e3530000	 cmp         r3, #0
  0058c	0a000003	 beq         |$LN10@InitContro|

; 243  :     	m_dwEnableWaitForVerticalBlank = TRUE;

  00590	e59d3060	 ldr         r3, [sp, #0x60]
  00594	e2832c05	 add         r2, r3, #5, 24
  00598	e3a03001	 mov         r3, #1
  0059c	e5823000	 str         r3, [r2]
  005a0		 |$LN10@InitContro|

; 244  : 
; 245  :     //enable ISP resizer based on registry
; 246  :     if (bEnableISPResizer)

  005a0	e59d306c	 ldr         r3, [sp, #0x6C]
  005a4	e3530000	 cmp         r3, #0
  005a8	0a000004	 beq         |$LN9@InitContro|

; 247  :         m_bDssIspRszEnabled = TRUE;

  005ac	e59d3060	 ldr         r3, [sp, #0x60]
  005b0	e2833c05	 add         r3, r3, #5, 24
  005b4	e2832014	 add         r2, r3, #0x14
  005b8	e3a03001	 mov         r3, #1
  005bc	e5823000	 str         r3, [r2]
  005c0		 |$LN9@InitContro|

; 248  :     
; 249  : 
; 250  :     //  Allocate physical memory for gamma table buffer
; 251  :     m_pGammaBufVirt = (DWORD*)AllocPhysMem(NUM_GAMMA_VALS*sizeof(DWORD), PAGE_READWRITE | PAGE_NOCACHE, 0, 0,&m_dwGammaBufPhys);

  005c0	e59d3060	 ldr         r3, [sp, #0x60]
  005c4	e2833b01	 add         r3, r3, #1, 22
  005c8	e28330d8	 add         r3, r3, #0xD8
  005cc	e58d3000	 str         r3, [sp]
  005d0	e3a03000	 mov         r3, #0
  005d4	e3a02000	 mov         r2, #0
  005d8	e3a01f81	 mov         r1, #0x81, 30
  005dc	e3a00b01	 mov         r0, #1, 22
  005e0	eb000000	 bl          AllocPhysMem
  005e4	e58d0034	 str         r0, [sp, #0x34]
  005e8	e59d3060	 ldr         r3, [sp, #0x60]
  005ec	e2833b01	 add         r3, r3, #1, 22
  005f0	e28320d4	 add         r2, r3, #0xD4
  005f4	e59d3034	 ldr         r3, [sp, #0x34]
  005f8	e5823000	 str         r3, [r2]

; 252  :     if( m_pGammaBufVirt == NULL)

  005fc	e59d3060	 ldr         r3, [sp, #0x60]
  00600	e2833b01	 add         r3, r3, #1, 22
  00604	e28330d4	 add         r3, r3, #0xD4
  00608	e5933000	 ldr         r3, [r3]
  0060c	e3530000	 cmp         r3, #0
  00610	1a000008	 bne         |$LN8@InitContro|

; 253  :         {
; 254  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: COMAPDisplayController::InitController: "
; 255  :             L"Failed allocate Gamma phys buffer\r\n"
; 256  :             ));

  00614	e59f02c0	 ldr         r0, [pc, #0x2C0]
  00618	eb000000	 bl          NKDbgPrintfW
  0061c	e3a03001	 mov         r3, #1
  00620	e58d3038	 str         r3, [sp, #0x38]
  00624	ea000001	 b           |$LN27@InitContro|
  00628	e3a03000	 mov         r3, #0
  0062c	e58d3038	 str         r3, [sp, #0x38]
  00630		 |$LN27@InitContro|

; 257  :         goto cleanUp;

  00630	ea00009d	 b           |$LN7@InitContro|
  00634	ea00009c	 b           |$cleanUp$37855|
  00638		 |$LN8@InitContro|

; 258  :         }
; 259  : 
; 260  :     // map DSI regs
; 261  :     pa.QuadPart = m_dssinfo.DSI_REGS_PA;

  00638	e59d3060	 ldr         r3, [sp, #0x60]
  0063c	e2833e53	 add         r3, r3, #0x53, 28
  00640	e5933000	 ldr         r3, [r3]
  00644	e58d3008	 str         r3, [sp, #8]
  00648	e3a03000	 mov         r3, #0
  0064c	e58d300c	 str         r3, [sp, #0xC]

; 262  :     size = sizeof(OMAP_DSI_REGS);

  00650	e3a030c0	 mov         r3, #0xC0
  00654	e58d3004	 str         r3, [sp, #4]

; 263  :     m_pDSIRegs = (OMAP_DSI_REGS*)MmMapIoSpace(pa, size, FALSE);

  00658	e3a03000	 mov         r3, #0
  0065c	e59d2004	 ldr         r2, [sp, #4]
  00660	e59d0008	 ldr         r0, [sp, #8]
  00664	e59d100c	 ldr         r1, [sp, #0xC]
  00668	eb000000	 bl          MmMapIoSpace
  0066c	e58d003c	 str         r0, [sp, #0x3C]
  00670	e59d3060	 ldr         r3, [sp, #0x60]
  00674	e2832010	 add         r2, r3, #0x10
  00678	e59d303c	 ldr         r3, [sp, #0x3C]
  0067c	e5823000	 str         r3, [r2]

; 264  :     if (m_pDSIRegs == NULL)

  00680	e59d3060	 ldr         r3, [sp, #0x60]
  00684	e2833010	 add         r3, r3, #0x10
  00688	e5933000	 ldr         r3, [r3]
  0068c	e3530000	 cmp         r3, #0
  00690	1a000008	 bne         |$LN6@InitContro|

; 265  :         {
; 266  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: OMAPDisplayController::InitController: "
; 267  :                  L"Failed map DSI control registers\r\n"
; 268  :                 ));

  00694	e59f023c	 ldr         r0, [pc, #0x23C]
  00698	eb000000	 bl          NKDbgPrintfW
  0069c	e3a03001	 mov         r3, #1
  006a0	e58d3040	 str         r3, [sp, #0x40]
  006a4	ea000001	 b           |$LN29@InitContro|
  006a8	e3a03000	 mov         r3, #0
  006ac	e58d3040	 str         r3, [sp, #0x40]
  006b0		 |$LN29@InitContro|

; 269  :         goto cleanUp;

  006b0	ea00007d	 b           |$LN5@InitContro|
  006b4	ea00007c	 b           |$cleanUp$37855|
  006b8		 |$LN6@InitContro|

; 270  :         }
; 271  : 
; 272  :     // map DSI Pll regs
; 273  :     pa.QuadPart = m_dssinfo.DSI_PLL_REGS_PA;

  006b8	e59d3060	 ldr         r3, [sp, #0x60]
  006bc	e2833c05	 add         r3, r3, #5, 24
  006c0	e2833034	 add         r3, r3, #0x34
  006c4	e5933000	 ldr         r3, [r3]
  006c8	e58d3008	 str         r3, [sp, #8]
  006cc	e3a03000	 mov         r3, #0
  006d0	e58d300c	 str         r3, [sp, #0xC]

; 274  :     size = sizeof(OMAP_DSI_PLL_REGS);

  006d4	e3a03014	 mov         r3, #0x14
  006d8	e58d3004	 str         r3, [sp, #4]

; 275  :     m_pDSIPLLRegs = (OMAP_DSI_PLL_REGS*)MmMapIoSpace(pa, size, FALSE);

  006dc	e3a03000	 mov         r3, #0
  006e0	e59d2004	 ldr         r2, [sp, #4]
  006e4	e59d0008	 ldr         r0, [sp, #8]
  006e8	e59d100c	 ldr         r1, [sp, #0xC]
  006ec	eb000000	 bl          MmMapIoSpace
  006f0	e58d0044	 str         r0, [sp, #0x44]
  006f4	e59d3060	 ldr         r3, [sp, #0x60]
  006f8	e2832014	 add         r2, r3, #0x14
  006fc	e59d3044	 ldr         r3, [sp, #0x44]
  00700	e5823000	 str         r3, [r2]

; 276  :     if (m_pDSIPLLRegs == NULL)

  00704	e59d3060	 ldr         r3, [sp, #0x60]
  00708	e2833014	 add         r3, r3, #0x14
  0070c	e5933000	 ldr         r3, [r3]
  00710	e3530000	 cmp         r3, #0
  00714	1a000008	 bne         |$LN4@InitContro|

; 277  :         {
; 278  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: OMAPDisplayController::InitController: "
; 279  :                      L"Failed map DSIPLL control registers\r\n"
; 280  :                     ));

  00718	e59f01b4	 ldr         r0, [pc, #0x1B4]
  0071c	eb000000	 bl          NKDbgPrintfW
  00720	e3a03001	 mov         r3, #1
  00724	e58d3048	 str         r3, [sp, #0x48]
  00728	ea000001	 b           |$LN31@InitContro|
  0072c	e3a03000	 mov         r3, #0
  00730	e58d3048	 str         r3, [sp, #0x48]
  00734		 |$LN31@InitContro|

; 281  :         goto cleanUp;

  00734	ea00005c	 b           |$LN3@InitContro|
  00738	ea00005b	 b           |$cleanUp$37855|
  0073c		 |$LN4@InitContro|

; 282  :         }
; 283  : 
; 284  :     //  Initialize power lock critical section
; 285  :     InitializeCriticalSection( &m_csPowerLock );

  0073c	e59d3060	 ldr         r3, [sp, #0x60]
  00740	e2833b01	 add         r3, r3, #1, 22
  00744	e283008c	 add         r0, r3, #0x8C
  00748	eb000000	 bl          InitializeCriticalSection

; 286  : 
; 287  :     //  Lock access to power level
; 288  :     EnterCriticalSection( &m_csPowerLock );

  0074c	e59d3060	 ldr         r3, [sp, #0x60]
  00750	e2833b01	 add         r3, r3, #1, 22
  00754	e283008c	 add         r0, r3, #0x8C
  00758	eb000000	 bl          EnterCriticalSection

; 289  : 
; 290  :     // Configure the DssFclk source and value
; 291  :     m_eDssFclkSource = OMAP_DSS_FCLK_DSS2ALWON;

  0075c	e59d3060	 ldr         r3, [sp, #0x60]
  00760	e2833c05	 add         r3, r3, #5, 24
  00764	e2832008	 add         r2, r3, #8
  00768	e3a03001	 mov         r3, #1
  0076c	e5823000	 str         r3, [r2]

; 292  :     m_eDssFclkValue  = OMAP_DSS_FCLKVALUE_NORMAL;

  00770	e59d3060	 ldr         r3, [sp, #0x60]
  00774	e2833c05	 add         r3, r3, #5, 24
  00778	e283200c	 add         r2, r3, #0xC
  0077c	e3a03529	 mov         r3, #0x29, 10
  00780	e3833c83	 orr         r3, r3, #0x83, 24
  00784	e5823000	 str         r3, [r2]

; 293  : 
; 294  : 	// Request Pads for LCD
; 295  : 	if (!RequestDevicePads(m_dssinfo.DSSDevice))

  00788	e59d3060	 ldr         r3, [sp, #0x60]
  0078c	e2833c05	 add         r3, r3, #5, 24
  00790	e283301c	 add         r3, r3, #0x1C
  00794	e5930000	 ldr         r0, [r3]
  00798	eb000000	 bl          RequestDevicePads
  0079c	e58d004c	 str         r0, [sp, #0x4C]
  007a0	e59d304c	 ldr         r3, [sp, #0x4C]
  007a4	e3530000	 cmp         r3, #0
  007a8	1a00000d	 bne         |$LN2@InitContro|

; 296  : 	{
; 297  :         ERRORMSG(TRUE, (L"ERROR: OMAPDisplayController::InitController: "
; 298  :                      L"Failed to request pads\r\n"
; 299  :                     ));

  007ac	e3a02c01	 mov         r2, #1, 24
  007b0	e382202b	 orr         r2, r2, #0x2B
  007b4	e59f1114	 ldr         r1, [pc, #0x114]
  007b8	e59f010c	 ldr         r0, [pc, #0x10C]
  007bc	eb000000	 bl          NKDbgPrintfW
  007c0	e59f0100	 ldr         r0, [pc, #0x100]
  007c4	eb000000	 bl          NKDbgPrintfW
  007c8	e3a03001	 mov         r3, #1
  007cc	e58d3050	 str         r3, [sp, #0x50]
  007d0	ea000001	 b           |$LN33@InitContro|
  007d4	e3a03000	 mov         r3, #0
  007d8	e58d3050	 str         r3, [sp, #0x50]
  007dc		 |$LN33@InitContro|

; 300  :         goto cleanUp;

  007dc	ea000032	 b           |$LN1@InitContro|
  007e0	ea000031	 b           |$cleanUp$37855|
  007e4		 |$LN2@InitContro|

; 301  : 	}
; 302  : 
; 303  :     //  Reset the DSS controller
; 304  :     ResetDSS();

  007e4	e59d0060	 ldr         r0, [sp, #0x60]
  007e8	eb000000	 bl          |?ResetDSS@OMAPDisplayController@@IAAHXZ|

; 305  : 
; 306  :     //  Enable controller power
; 307  :     SetPowerLevel( D0 );

  007ec	e3a01000	 mov         r1, #0
  007f0	e59d0060	 ldr         r0, [sp, #0x60]
  007f4	eb000000	 bl          |?SetPowerLevel@OMAPDisplayController@@QAAHK@Z|

; 308  : 
; 309  :     //  Configure the clock source
; 310  :     //
; 311  :     //  DSS1_ALWON = 172MHz
; 312  :     //  DSI1_PLL   = 148.5MHz
; 313  :     //
; 314  :     OUTREG32( &m_pDSSRegs->DSS_CONTROL, 
; 315  :                 DSS_CONTROL_DISPC_CLK_SWITCH_DSS1_ALWON |
; 316  :                 DSS_CONTROL_DSI_CLK_SWITCH_DSS1_ALWON
; 317  :                 );

  007f8	e59d3060	 ldr         r3, [sp, #0x60]
  007fc	e2833004	 add         r3, r3, #4
  00800	e5933000	 ldr         r3, [r3]
  00804	e2832040	 add         r2, r3, #0x40
  00808	e3a03000	 mov         r3, #0
  0080c	e5823000	 str         r3, [r2]

; 318  : 
; 319  :                 
; 320  :     //  Configure interconnect parameters
; 321  :     OUTREG32( &m_pDSSRegs->DSS_SYSCONFIG, DISPC_SYSCONFIG_AUTOIDLE );

  00810	e59d3060	 ldr         r3, [sp, #0x60]
  00814	e2833004	 add         r3, r3, #4
  00818	e5933000	 ldr         r3, [r3]
  0081c	e2832010	 add         r2, r3, #0x10
  00820	e3a03001	 mov         r3, #1
  00824	e5823000	 str         r3, [r2]

; 322  :     OUTREG32( &m_pDispRegs->DISPC_SYSCONFIG, DISPC_SYSCONFIG_AUTOIDLE|SYSCONFIG_NOIDLE|SYSCONFIG_NOSTANDBY );

  00828	e59d3060	 ldr         r3, [sp, #0x60]
  0082c	e2833008	 add         r3, r3, #8
  00830	e5933000	 ldr         r3, [r3]
  00834	e2832010	 add         r2, r3, #0x10
  00838	e3a03a01	 mov         r3, #1, 20
  0083c	e3833009	 orr         r3, r3, #9
  00840	e5823000	 str         r3, [r2]

; 323  : 
; 324  : 
; 325  :     //  Enable DSS fault notification interrupts
; 326  :     g_rgDisplaySaveRestore.DISPC_IRQENABLE = DISPC_IRQENABLE_OCPERROR|
; 327  :                                              DISPC_IRQENABLE_SYNCLOST;

  00844	e59d3060	 ldr         r3, [sp, #0x60]
  00848	e2832034	 add         r2, r3, #0x34
  0084c	e3a03c42	 mov         r3, #0x42, 24
  00850	e5823000	 str         r3, [r2]

; 328  :     OUTREG32( &m_pDispRegs->DISPC_IRQENABLE , g_rgDisplaySaveRestore.DISPC_IRQENABLE);

  00854	e59d3060	 ldr         r3, [sp, #0x60]
  00858	e2833034	 add         r3, r3, #0x34
  0085c	e5932000	 ldr         r2, [r3]
  00860	e59d3060	 ldr         r3, [sp, #0x60]
  00864	e2833008	 add         r3, r3, #8
  00868	e5933000	 ldr         r3, [r3]
  0086c	e283301c	 add         r3, r3, #0x1C
  00870	e5832000	 str         r2, [r3]

; 329  : 
; 330  :     //  Unlock access to power level
; 331  :     LeaveCriticalSection( &m_csPowerLock );

  00874	e59d3060	 ldr         r3, [sp, #0x60]
  00878	e2833b01	 add         r3, r3, #1, 22
  0087c	e283008c	 add         r0, r3, #0x8C
  00880	eb000000	 bl          LeaveCriticalSection

; 332  :         
; 333  :     // Open a handle to SmartReflex policy adapter
; 334  :     m_hSmartReflexPolicyAdapter = PmxOpenPolicy(SMARTREFLEX_POLICY_NAME);

  00884	e59f0038	 ldr         r0, [pc, #0x38]
  00888	eb000000	 bl          PmxOpenPolicy
  0088c	e58d0054	 str         r0, [sp, #0x54]
  00890	e59d3060	 ldr         r3, [sp, #0x60]
  00894	e2833c05	 add         r3, r3, #5, 24
  00898	e2832018	 add         r2, r3, #0x18
  0089c	e59d3054	 ldr         r3, [sp, #0x54]
  008a0	e5823000	 str         r3, [r2]

; 335  :         
; 336  :     //  Success
; 337  :     bResult = TRUE;

  008a4	e3a03001	 mov         r3, #1
  008a8	e58d3010	 str         r3, [sp, #0x10]
  008ac		 |$LN1@InitContro|
  008ac		 |$LN3@InitContro|
  008ac		 |$LN5@InitContro|
  008ac		 |$LN7@InitContro|
  008ac		 |$LN12@InitContro|
  008ac		 |$LN14@InitContro|
  008ac		 |$LN16@InitContro|
  008ac		 |$cleanUp$37855|

; 338  : 
; 339  : cleanUp:    
; 340  :     //  Return result
; 341  :     return bResult;

  008ac	e59d3010	 ldr         r3, [sp, #0x10]
  008b0	e58d3018	 str         r3, [sp, #0x18]

; 342  : }

  008b4	e59d0018	 ldr         r0, [sp, #0x18]
  008b8	e28dd058	 add         sp, sp, #0x58
  008bc	e89d6000	 ldmia       sp, {sp, lr}
  008c0	e12fff1e	 bx          lr
  008c4		 |$LN37@InitContro|
  008c4		 |$LN38@InitContro|
  008c4	00000000	 DCD         |??_C@_1BI@GKABGADH@?$AAS?$AAM?$AAA?$AAR?$AAT?$AAR?$AAE?$AAF?$AAL?$AAE?$AAX?$AA?$AA@|
  008c8		 |$LN39@InitContro|
  008c8	00000000	 DCD         |??_C@_1IO@PPJICGNB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAM?$AAA?$AAP?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAI?$AAn@|
  008cc		 |$LN40@InitContro|
  008cc	00000000	 DCD         |??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@|
  008d0		 |$LN41@InitContro|
  008d0	00000000	 DCD         |??_C@_1KC@HIABDGPO@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  008d4		 |$LN42@InitContro|
  008d4	00000000	 DCD         |??_C@_1KI@JELIIFJI@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAM?$AAA?$AAP?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAI?$AAn@|
  008d8		 |$LN43@InitContro|
  008d8	00000000	 DCD         |??_C@_1KC@ILFJHOND@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAM?$AAA?$AAP?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAI?$AAn@|
  008dc		 |$LN44@InitContro|
  008dc	00000000	 DCD         |??_C@_1KG@JEDAHDGO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAC?$AAO?$AAM?$AAA?$AAP?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAI@|
  008e0		 |$LN45@InitContro|
  008e0	00000000	 DCD         |??_C@_1KE@MFEOEMFC@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAM?$AAA?$AAP?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAI?$AAn@|
  008e4		 |$LN46@InitContro|
  008e4	00000000	 DCD         |??_C@_1KG@GJACHAEL@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAM?$AAA?$AAP?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAI?$AAn@|
  008e8		 |$LN47@InitContro|
  008e8	00000000	 DCD         |??_C@_1KC@JKCJEHKF@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAM?$AAA?$AAP?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAI?$AAn@|
  008ec		 |$M40267|

			 ENDP  ; |?InitController@OMAPDisplayController@@QAAHHHH@Z|, OMAPDisplayController::InitController

	EXPORT	|?ConfigureDsiPll@OMAPDisplayController@@QAAHK@Z| ; OMAPDisplayController::ConfigureDsiPll
	EXPORT	|?InitDsiPll@OMAPDisplayController@@IAAHXZ| ; OMAPDisplayController::InitDsiPll
	EXPORT	|?SetContrastLevel@OMAPDisplayController@@QAAHK@Z| ; OMAPDisplayController::SetContrastLevel
	EXPORT	|?InitLCD@OMAPDisplayController@@QAAHXZ| ; OMAPDisplayController::InitLCD
	IMPORT	|LcdPdd_LCD_GetMode|
	IMPORT	|LcdPdd_LCD_Initialize|

  00018			 AREA	 |.pdata|, PDATA
|$T40286| DCD	|$LN7@InitLCD|
	DCD	0x40008204
; Function compile flags: /Odtp

  008ec			 AREA	 |.text|, CODE, ARM

  008ec		 |?InitLCD@OMAPDisplayController@@QAAHXZ| PROC ; OMAPDisplayController::InitLCD

; 347  : {

  008ec		 |$LN7@InitLCD|
  008ec	e1a0c00d	 mov         r12, sp
  008f0	e92d0001	 stmdb       sp!, {r0}
  008f4	e92d5000	 stmdb       sp!, {r12, lr}
  008f8	e24dd00c	 sub         sp, sp, #0xC
  008fc		 |$M40283|

; 348  :     BOOL    bResult;
; 349  : 
; 350  :     //  Lock access to power level
; 351  :     EnterCriticalSection( &m_csPowerLock );

  008fc	e59d3014	 ldr         r3, [sp, #0x14]
  00900	e2833b01	 add         r3, r3, #1, 22
  00904	e283008c	 add         r0, r3, #0x8C
  00908	eb000000	 bl          EnterCriticalSection

; 352  : 
; 353  :     //  Enable controller power
; 354  :     SetPowerLevel( D0 );

  0090c	e3a01000	 mov         r1, #0
  00910	e59d0014	 ldr         r0, [sp, #0x14]
  00914	eb000000	 bl          |?SetPowerLevel@OMAPDisplayController@@QAAHK@Z|

; 355  : 
; 356  :     //  Initialize the LCD by calling PDD
; 357  :     bResult = LcdPdd_LCD_Initialize(
; 358  :                     m_pDSSRegs,
; 359  :                     m_pDispRegs,
; 360  :                     NULL,
; 361  :                     m_pVencRegs);

  00918	e59d3014	 ldr         r3, [sp, #0x14]
  0091c	e283300c	 add         r3, r3, #0xC
  00920	e5933000	 ldr         r3, [r3]
  00924	e3a02000	 mov         r2, #0
  00928	e59d1014	 ldr         r1, [sp, #0x14]
  0092c	e2811008	 add         r1, r1, #8
  00930	e5911000	 ldr         r1, [r1]
  00934	e59d0014	 ldr         r0, [sp, #0x14]
  00938	e2800004	 add         r0, r0, #4
  0093c	e5900000	 ldr         r0, [r0]
  00940	eb000000	 bl          LcdPdd_LCD_Initialize
  00944	e58d0008	 str         r0, [sp, #8]
  00948	e59d3008	 ldr         r3, [sp, #8]
  0094c	e58d3000	 str         r3, [sp]

; 362  :     
; 363  :     //  Get LCD parameters
; 364  :     LcdPdd_LCD_GetMode(
; 365  :                     (DWORD*) &m_eLcdPixelFormat,
; 366  :                     &m_dwLcdWidth,
; 367  :                     &m_dwLcdHeight,
; 368  :                     &m_dwPixelClock
; 369  :                     );

  00950	e59d3014	 ldr         r3, [sp, #0x14]
  00954	e2833e4b	 add         r3, r3, #0x4B, 28
  00958	e59d2014	 ldr         r2, [sp, #0x14]
  0095c	e2822b01	 add         r2, r2, #1, 22
  00960	e28220ac	 add         r2, r2, #0xAC
  00964	e59d1014	 ldr         r1, [sp, #0x14]
  00968	e2811b01	 add         r1, r1, #1, 22
  0096c	e28110a8	 add         r1, r1, #0xA8
  00970	e59d0014	 ldr         r0, [sp, #0x14]
  00974	e2800b01	 add         r0, r0, #1, 22
  00978	e28000a4	 add         r0, r0, #0xA4
  0097c	eb000000	 bl          LcdPdd_LCD_GetMode

; 370  : 
; 371  :     //  Set up gamma correction to support contrast control
; 372  :     SetContrastLevel( m_dwContrastLevel );

  00980	e59d3014	 ldr         r3, [sp, #0x14]
  00984	e2833e4d	 add         r3, r3, #0x4D, 28
  00988	e5931000	 ldr         r1, [r3]
  0098c	e59d0014	 ldr         r0, [sp, #0x14]
  00990	eb000000	 bl          |?SetContrastLevel@OMAPDisplayController@@QAAHK@Z|

; 373  :     
; 374  :     // Enable/Disable Gamma correction
; 375  :     if(m_bGammaEnable)

  00994	e59d3014	 ldr         r3, [sp, #0x14]
  00998	e2833b01	 add         r3, r3, #1, 22
  0099c	e28330dc	 add         r3, r3, #0xDC
  009a0	e5933000	 ldr         r3, [r3]
  009a4	e3530000	 cmp         r3, #0
  009a8	0a000015	 beq         |$LN2@InitLCD|

; 376  :     {
; 377  :         SETREG32( &m_pDispRegs->DISPC_CONFIG, DISPC_CONFIG_PALETTEGAMMATABLE );

  009ac	e59d3014	 ldr         r3, [sp, #0x14]
  009b0	e2833008	 add         r3, r3, #8
  009b4	e5933000	 ldr         r3, [r3]
  009b8	e2833044	 add         r3, r3, #0x44
  009bc	e5933000	 ldr         r3, [r3]
  009c0	e3832008	 orr         r2, r3, #8
  009c4	e59d3014	 ldr         r3, [sp, #0x14]
  009c8	e2833008	 add         r3, r3, #8
  009cc	e5933000	 ldr         r3, [r3]
  009d0	e2833044	 add         r3, r3, #0x44
  009d4	e5832000	 str         r2, [r3]

; 378  :         SETREG32( &m_pDispRegs->DISPC_CONFIG, DISPC_CONFIG_LOADMODE(0) );

  009d8	e59d3014	 ldr         r3, [sp, #0x14]
  009dc	e2833008	 add         r3, r3, #8
  009e0	e5933000	 ldr         r3, [r3]
  009e4	e2833044	 add         r3, r3, #0x44
  009e8	e5932000	 ldr         r2, [r3]
  009ec	e59d3014	 ldr         r3, [sp, #0x14]
  009f0	e2833008	 add         r3, r3, #8
  009f4	e5933000	 ldr         r3, [r3]
  009f8	e2833044	 add         r3, r3, #0x44
  009fc	e5832000	 str         r2, [r3]

; 379  :     }
; 380  :     else

  00a00	ea000016	 b           |$LN1@InitLCD|
  00a04		 |$LN2@InitLCD|

; 381  :     {
; 382  :         CLRREG32( &m_pDispRegs->DISPC_CONFIG, DISPC_CONFIG_PALETTEGAMMATABLE );

  00a04	e59d3014	 ldr         r3, [sp, #0x14]
  00a08	e2833008	 add         r3, r3, #8
  00a0c	e5933000	 ldr         r3, [r3]
  00a10	e2833044	 add         r3, r3, #0x44
  00a14	e5932000	 ldr         r2, [r3]
  00a18	e3e03008	 mvn         r3, #8
  00a1c	e0022003	 and         r2, r2, r3
  00a20	e59d3014	 ldr         r3, [sp, #0x14]
  00a24	e2833008	 add         r3, r3, #8
  00a28	e5933000	 ldr         r3, [r3]
  00a2c	e2833044	 add         r3, r3, #0x44
  00a30	e5832000	 str         r2, [r3]

; 383  :         SETREG32( &m_pDispRegs->DISPC_CONFIG, DISPC_CONFIG_LOADMODE(2) );

  00a34	e59d3014	 ldr         r3, [sp, #0x14]
  00a38	e2833008	 add         r3, r3, #8
  00a3c	e5933000	 ldr         r3, [r3]
  00a40	e2833044	 add         r3, r3, #0x44
  00a44	e5933000	 ldr         r3, [r3]
  00a48	e3832004	 orr         r2, r3, #4
  00a4c	e59d3014	 ldr         r3, [sp, #0x14]
  00a50	e2833008	 add         r3, r3, #8
  00a54	e5933000	 ldr         r3, [r3]
  00a58	e2833044	 add         r3, r3, #0x44
  00a5c	e5832000	 str         r2, [r3]
  00a60		 |$LN1@InitLCD|

; 384  :     }
; 385  : 
; 386  :     // Load Gamma Table
; 387  :     OUTREG32( &m_pDispRegs->DISPC_GFX_TABLE_BA, m_dwGammaBufPhys);

  00a60	e59d3014	 ldr         r3, [sp, #0x14]
  00a64	e2833b01	 add         r3, r3, #1, 22
  00a68	e28310d8	 add         r1, r3, #0xD8
  00a6c	e59d3014	 ldr         r3, [sp, #0x14]
  00a70	e2833008	 add         r3, r3, #8
  00a74	e5933000	 ldr         r3, [r3]
  00a78	e28320b8	 add         r2, r3, #0xB8
  00a7c	e5913000	 ldr         r3, [r1]
  00a80	e5823000	 str         r3, [r2]

; 388  :     
; 389  : 
; 390  :     //  Set default global alpha values to be opaque
; 391  :     OUTREG32( &m_pDispRegs->DISPC_GLOBAL_ALPHA, DISPC_GLOBAL_ALPHA_GFX(0xFF)|DISPC_GLOBAL_ALPHA_VID2(0xFF) );

  00a84	e59d3014	 ldr         r3, [sp, #0x14]
  00a88	e2833008	 add         r3, r3, #8
  00a8c	e5933000	 ldr         r3, [r3]
  00a90	e2832074	 add         r2, r3, #0x74
  00a94	e3a038ff	 mov         r3, #0xFF, 16
  00a98	e38330ff	 orr         r3, r3, #0xFF
  00a9c	e5823000	 str         r3, [r2]

; 392  :     
; 393  :     // Could calculate actual period...
; 394  :     m_dwVsyncPeriod = 1000/60 + 2;//Add delta 2 ms since frameRate is not exactly 60fps

  00aa0	e59d3014	 ldr         r3, [sp, #0x14]
  00aa4	e2833b01	 add         r3, r3, #1, 22
  00aa8	e28320fc	 add         r2, r3, #0xFC
  00aac	e3a03012	 mov         r3, #0x12
  00ab0	e5823000	 str         r3, [r2]

; 395  : 
; 396  :     // Initialize the DSI PLL
; 397  :     InitDsiPll();

  00ab4	e59d0014	 ldr         r0, [sp, #0x14]
  00ab8	eb000000	 bl          |?InitDsiPll@OMAPDisplayController@@IAAHXZ|

; 398  : 
; 399  :     // Configure the DSI PLL with the FCLK value reqd
; 400  :     ConfigureDsiPll( OMAP_DSS_FCLKVALUE_NORMAL );

  00abc	e3a01529	 mov         r1, #0x29, 10
  00ac0	e3811c83	 orr         r1, r1, #0x83, 24
  00ac4	e59d0014	 ldr         r0, [sp, #0x14]
  00ac8	eb000000	 bl          |?ConfigureDsiPll@OMAPDisplayController@@QAAHK@Z|

; 401  :     
; 402  :     //  Unlock access to power level
; 403  :     LeaveCriticalSection( &m_csPowerLock );

  00acc	e59d3014	 ldr         r3, [sp, #0x14]
  00ad0	e2833b01	 add         r3, r3, #1, 22
  00ad4	e283008c	 add         r0, r3, #0x8C
  00ad8	eb000000	 bl          LeaveCriticalSection

; 404  : 
; 405  :     //  Return result
; 406  :     return bResult;

  00adc	e59d3000	 ldr         r3, [sp]
  00ae0	e58d3004	 str         r3, [sp, #4]

; 407  : }

  00ae4	e59d0004	 ldr         r0, [sp, #4]
  00ae8	e28dd00c	 add         sp, sp, #0xC
  00aec	e89d6000	 ldmia       sp, {sp, lr}
  00af0	e12fff1e	 bx          lr
  00af4		 |$M40284|

			 ENDP  ; |?InitLCD@OMAPDisplayController@@QAAHXZ|, OMAPDisplayController::InitLCD

	EXPORT	|??_C@_1FA@LCCKCCDM@?$AA?$CF?$AAS?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAi?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AAt@| [ DATA ] ; `string'
	EXPORT	|?DssInterruptHandler@OMAPDisplayController@@SAKPAX@Z| ; OMAPDisplayController::DssInterruptHandler
	EXPORT	|??_C@_1HO@EJNFLNCL@?$AA?$CF?$AAS?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAS?$AAc?$AAa?$AAn@| [ DATA ] ; `string'
	EXPORT	|??_C@_1II@CELNKHNA@?$AA?$CF?$AAS?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAV?$AAs?$AAy?$AAn@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CE@FJEPCB@?$AAD?$AAS?$AAS?$AAA?$AAI?$AA_?$AAV?$AAS?$AAY?$AAN?$AAC?$AA_?$AAE?$AAV?$AAE?$AAN?$AAT?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HI@INOGDA@?$AA?$CF?$AAS?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAV?$AAs?$AAy?$AAn@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GI@JGPMIOHG@?$AA?$CF?$AAS?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAi?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GM@GGFAEFFK@?$AA?$CF?$AAS?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAI?$AAn?$AAt?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FM@JEFFKAKF@?$AA?$CF?$AAS?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAm?$AAa?$AAp?$AA?5?$AAD?$AAS?$AAS?$AA?5?$AAi?$AAn?$AAt?$AAe?$AAr?$AAr@| [ DATA ] ; `string'
	EXPORT	|??_C@_0CG@BJPFDBAD@OMAPDisplayController?3?3InitInter@| [ DATA ] ; `string'
	EXPORT	|?InitInterrupts@OMAPDisplayController@@QAAHKK@Z| ; OMAPDisplayController::InitInterrupts
	IMPORT	|CeSetThreadPriority|
	IMPORT	|CreateThread|
	IMPORT	|InterruptInitialize|
	IMPORT	|CreateEventW|
	IMPORT	|KernelIoControl|

  00020			 AREA	 |.pdata|, PDATA
|$T40310| DCD	|$LN34@InitInterr|
	DCD	0x4000e204

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FA@LCCKCCDM@?$AA?$CF?$AAS?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAi?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AAt@| DCB "%"
	DCB	0x0, "S", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "t", 0x0, "o"
	DCB	0x0, " ", 0x0, "c", 0x0, "r", 0x0, "e", 0x0, "a", 0x0, "t"
	DCB	0x0, "e", 0x0, " ", 0x0, "i", 0x0, "n", 0x0, "t", 0x0, "e"
	DCB	0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t", 0x0, " "
	DCB	0x0, "t", 0x0, "h", 0x0, "r", 0x0, "e", 0x0, "a", 0x0, "d"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HO@EJNFLNCL@?$AA?$CF?$AAS?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAS?$AAc?$AAa?$AAn@| DCB "%"
	DCB	0x0, "S", 0x0, ":", 0x0, " ", 0x0, "E", 0x0, "R", 0x0, "R"
	DCB	0x0, "O", 0x0, "R", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "t"
	DCB	0x0, "o", 0x0, " ", 0x0, "c", 0x0, "r", 0x0, "e", 0x0, "a"
	DCB	0x0, "t", 0x0, "e", 0x0, " ", 0x0, "S", 0x0, "c", 0x0, "a"
	DCB	0x0, "n", 0x0, "L", 0x0, "i", 0x0, "n", 0x0, "e", 0x0, " "
	DCB	0x0, "i", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r"
	DCB	0x0, "u", 0x0, "p", 0x0, "t", 0x0, " ", 0x0, "e", 0x0, "v"
	DCB	0x0, "e", 0x0, "n", 0x0, "t", 0x0, " ", 0x0, "o", 0x0, "b"
	DCB	0x0, "j", 0x0, "e", 0x0, "c", 0x0, "t", 0x0, "!", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1II@CELNKHNA@?$AA?$CF?$AAS?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAV?$AAs?$AAy?$AAn@| DCB "%"
	DCB	0x0, "S", 0x0, ":", 0x0, " ", 0x0, "E", 0x0, "R", 0x0, "R"
	DCB	0x0, "O", 0x0, "R", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "t"
	DCB	0x0, "o", 0x0, " ", 0x0, "c", 0x0, "r", 0x0, "e", 0x0, "a"
	DCB	0x0, "t", 0x0, "e", 0x0, " ", 0x0, "V", 0x0, "s", 0x0, "y"
	DCB	0x0, "n", 0x0, "c", 0x0, " ", 0x0, "i", 0x0, "n", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t"
	DCB	0x0, " ", 0x0, "e", 0x0, "v", 0x0, "e", 0x0, "n", 0x0, "t"
	DCB	0x0, " ", 0x0, "o", 0x0, "b", 0x0, "j", 0x0, "e", 0x0, "c"
	DCB	0x0, "t", 0x0, " ", 0x0, "f", 0x0, "o", 0x0, "r", 0x0, " "
	DCB	0x0, "S", 0x0, "G", 0x0, "X", 0x0, "!", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@FJEPCB@?$AAD?$AAS?$AAS?$AAA?$AAI?$AA_?$AAV?$AAS?$AAY?$AAN?$AAC?$AA_?$AAE?$AAV?$AAE?$AAN?$AAT?$AA?$AA@| DCB "D"
	DCB	0x0, "S", 0x0, "S", 0x0, "A", 0x0, "I", 0x0, "_", 0x0, "V"
	DCB	0x0, "S", 0x0, "Y", 0x0, "N", 0x0, "C", 0x0, "_", 0x0, "E"
	DCB	0x0, "V", 0x0, "E", 0x0, "N", 0x0, "T", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HI@INOGDA@?$AA?$CF?$AAS?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAV?$AAs?$AAy?$AAn@| DCB "%"
	DCB	0x0, "S", 0x0, ":", 0x0, " ", 0x0, "E", 0x0, "R", 0x0, "R"
	DCB	0x0, "O", 0x0, "R", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "t"
	DCB	0x0, "o", 0x0, " ", 0x0, "c", 0x0, "r", 0x0, "e", 0x0, "a"
	DCB	0x0, "t", 0x0, "e", 0x0, " ", 0x0, "V", 0x0, "s", 0x0, "y"
	DCB	0x0, "n", 0x0, "c", 0x0, " ", 0x0, "i", 0x0, "n", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t"
	DCB	0x0, " ", 0x0, "e", 0x0, "v", 0x0, "e", 0x0, "n", 0x0, "t"
	DCB	0x0, " ", 0x0, "o", 0x0, "b", 0x0, "j", 0x0, "e", 0x0, "c"
	DCB	0x0, "t", 0x0, "!", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GI@JGPMIOHG@?$AA?$CF?$AAS?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAi?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?5@| DCB "%"
	DCB	0x0, "S", 0x0, ":", 0x0, " ", 0x0, "E", 0x0, "R", 0x0, "R"
	DCB	0x0, "O", 0x0, "R", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "t"
	DCB	0x0, "o", 0x0, " ", 0x0, "i", 0x0, "n", 0x0, "i", 0x0, "t"
	DCB	0x0, "i", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "z", 0x0, "e"
	DCB	0x0, " ", 0x0, "s", 0x0, "y", 0x0, "s", 0x0, "t", 0x0, "e"
	DCB	0x0, "m", 0x0, " ", 0x0, "i", 0x0, "n", 0x0, "t", 0x0, "e"
	DCB	0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t", 0x0, "!"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GM@GGFAEFFK@?$AA?$CF?$AAS?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAI?$AAn?$AAt?$AAe@| DCB "%"
	DCB	0x0, "S", 0x0, ":", 0x0, " ", 0x0, "E", 0x0, "R", 0x0, "R"
	DCB	0x0, "O", 0x0, "R", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "t"
	DCB	0x0, "o", 0x0, " ", 0x0, "c", 0x0, "r", 0x0, "e", 0x0, "a"
	DCB	0x0, "t", 0x0, "e", 0x0, " ", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t"
	DCB	0x0, " ", 0x0, "e", 0x0, "v", 0x0, "e", 0x0, "n", 0x0, "t"
	DCB	0x0, " ", 0x0, "o", 0x0, "b", 0x0, "j", 0x0, "e", 0x0, "c"
	DCB	0x0, "t", 0x0, "!", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FM@JEFFKAKF@?$AA?$CF?$AAS?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAm?$AAa?$AAp?$AA?5?$AAD?$AAS?$AAS?$AA?5?$AAi?$AAn?$AAt?$AAe?$AAr?$AAr@| DCB "%"
	DCB	0x0, "S", 0x0, ":", 0x0, " ", 0x0, "E", 0x0, "R", 0x0, "R"
	DCB	0x0, "O", 0x0, "R", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "m"
	DCB	0x0, "a", 0x0, "p", 0x0, " ", 0x0, "D", 0x0, "S", 0x0, "S"
	DCB	0x0, " ", 0x0, "i", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r"
	DCB	0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t", 0x0, "(", 0x0, "i"
	DCB	0x0, "r", 0x0, "q", 0x0, "=", 0x0, "%", 0x0, "d", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CG@BJPFDBAD@OMAPDisplayController?3?3InitInter@| DCB "OMAPDisplay"
	DCB	"Controller::InitInterrupts", 0x0	; `string'
; Function compile flags: /Odtp

  00af4			 AREA	 |.text|, CODE, ARM

  00af4		 |?InitInterrupts@OMAPDisplayController@@QAAHKK@Z| PROC ; OMAPDisplayController::InitInterrupts

; 411  : {

  00af4		 |$LN34@InitInterr|
  00af4	e1a0c00d	 mov         r12, sp
  00af8	e92d000f	 stmdb       sp!, {r0 - r3}
  00afc	e92d5000	 stmdb       sp!, {r12, lr}
  00b00	e24dd058	 sub         sp, sp, #0x58
  00b04		 |$M40307|

; 412  :     BOOL rc = FALSE;

  00b04	e3a03000	 mov         r3, #0
  00b08	e58d3008	 str         r3, [sp, #8]

; 413  : 
; 414  :     // get system interrupt for irq
; 415  :     if (!KernelIoControl(IOCTL_HAL_REQUEST_SYSINTR, &irq,
; 416  :         sizeof(irq), &m_dwDssSysIntr, sizeof(m_dwDssSysIntr),
; 417  :         NULL))

  00b0c	e3a03000	 mov         r3, #0
  00b10	e58d3004	 str         r3, [sp, #4]
  00b14	e3a03004	 mov         r3, #4
  00b18	e58d3000	 str         r3, [sp]
  00b1c	e59d3060	 ldr         r3, [sp, #0x60]
  00b20	e2833b01	 add         r3, r3, #1, 22
  00b24	e28330ec	 add         r3, r3, #0xEC
  00b28	e3a02004	 mov         r2, #4
  00b2c	e28d1064	 add         r1, sp, #0x64
  00b30	e59f0340	 ldr         r0, [pc, #0x340]
  00b34	eb000000	 bl          KernelIoControl
  00b38	e58d0020	 str         r0, [sp, #0x20]
  00b3c	e59d3020	 ldr         r3, [sp, #0x20]
  00b40	e3530000	 cmp         r3, #0
  00b44	1a00000a	 bne         |$LN15@InitInterr|

; 418  :     {
; 419  :         DEBUGMSG(ZONE_ERROR,
; 420  :             (TEXT("%S: ERROR: Failed map DSS interrupt(irq=%d)\r\n"), __FUNCTION__,irq));

  00b48	e59d2064	 ldr         r2, [sp, #0x64]
  00b4c	e59f1300	 ldr         r1, [pc, #0x300]
  00b50	e59f031c	 ldr         r0, [pc, #0x31C]
  00b54	eb000000	 bl          NKDbgPrintfW
  00b58	e3a03001	 mov         r3, #1
  00b5c	e58d3024	 str         r3, [sp, #0x24]
  00b60	ea000001	 b           |$LN19@InitInterr|
  00b64	e3a03000	 mov         r3, #0
  00b68	e58d3024	 str         r3, [sp, #0x24]
  00b6c		 |$LN19@InitInterr|

; 421  :         goto cleanUp;

  00b6c	ea0000ac	 b           |$LN14@InitInterr|
  00b70	ea0000ab	 b           |$cleanUp$37935|
  00b74		 |$LN15@InitInterr|

; 422  :     }
; 423  : 
; 424  :     // create thread event handle
; 425  :     m_hDssIntEvent = CreateEvent(NULL, FALSE, FALSE, NULL);

  00b74	e3a03000	 mov         r3, #0
  00b78	e3a02000	 mov         r2, #0
  00b7c	e3a01000	 mov         r1, #0
  00b80	e3a00000	 mov         r0, #0
  00b84	eb000000	 bl          CreateEventW
  00b88	e58d0028	 str         r0, [sp, #0x28]
  00b8c	e59d3060	 ldr         r3, [sp, #0x60]
  00b90	e2833b01	 add         r3, r3, #1, 22
  00b94	e28320e4	 add         r2, r3, #0xE4
  00b98	e59d3028	 ldr         r3, [sp, #0x28]
  00b9c	e5823000	 str         r3, [r2]

; 426  :     if (m_hDssIntEvent == NULL)

  00ba0	e59d3060	 ldr         r3, [sp, #0x60]
  00ba4	e2833b01	 add         r3, r3, #1, 22
  00ba8	e28330e4	 add         r3, r3, #0xE4
  00bac	e5933000	 ldr         r3, [r3]
  00bb0	e3530000	 cmp         r3, #0
  00bb4	1a000009	 bne         |$LN13@InitInterr|

; 427  :     {
; 428  :         DEBUGMSG(ZONE_ERROR,
; 429  :             (TEXT("%S: ERROR: Failed to create Interrupt event object!\r\n"), __FUNCTION__));

  00bb8	e59f1294	 ldr         r1, [pc, #0x294]
  00bbc	e59f02ac	 ldr         r0, [pc, #0x2AC]
  00bc0	eb000000	 bl          NKDbgPrintfW
  00bc4	e3a03001	 mov         r3, #1
  00bc8	e58d302c	 str         r3, [sp, #0x2C]
  00bcc	ea000001	 b           |$LN21@InitInterr|
  00bd0	e3a03000	 mov         r3, #0
  00bd4	e58d302c	 str         r3, [sp, #0x2C]
  00bd8		 |$LN21@InitInterr|

; 430  :         goto cleanUp;

  00bd8	ea000091	 b           |$LN12@InitInterr|
  00bdc	ea000090	 b           |$cleanUp$37935|
  00be0		 |$LN13@InitInterr|

; 431  :     }
; 432  : 
; 433  :     // register event handle with system interrupt
; 434  :     if (!InterruptInitialize(m_dwDssSysIntr, m_hDssIntEvent, NULL, 0))

  00be0	e3a03000	 mov         r3, #0
  00be4	e3a02000	 mov         r2, #0
  00be8	e59d1060	 ldr         r1, [sp, #0x60]
  00bec	e2811b01	 add         r1, r1, #1, 22
  00bf0	e28110e4	 add         r1, r1, #0xE4
  00bf4	e5911000	 ldr         r1, [r1]
  00bf8	e59d0060	 ldr         r0, [sp, #0x60]
  00bfc	e2800b01	 add         r0, r0, #1, 22
  00c00	e28000ec	 add         r0, r0, #0xEC
  00c04	e5900000	 ldr         r0, [r0]
  00c08	eb000000	 bl          InterruptInitialize
  00c0c	e58d0030	 str         r0, [sp, #0x30]
  00c10	e59d3030	 ldr         r3, [sp, #0x30]
  00c14	e3530000	 cmp         r3, #0
  00c18	1a000009	 bne         |$LN11@InitInterr|

; 435  :     {
; 436  :         DEBUGMSG(ZONE_ERROR,
; 437  :             (TEXT("%S: ERROR: Failed to initialize system interrupt!\r\n"), __FUNCTION__));

  00c1c	e59f1230	 ldr         r1, [pc, #0x230]
  00c20	e59f0244	 ldr         r0, [pc, #0x244]
  00c24	eb000000	 bl          NKDbgPrintfW
  00c28	e3a03001	 mov         r3, #1
  00c2c	e58d3034	 str         r3, [sp, #0x34]
  00c30	ea000001	 b           |$LN23@InitInterr|
  00c34	e3a03000	 mov         r3, #0
  00c38	e58d3034	 str         r3, [sp, #0x34]
  00c3c		 |$LN23@InitInterr|

; 438  :         goto cleanUp;

  00c3c	ea000078	 b           |$LN10@InitInterr|
  00c40	ea000077	 b           |$cleanUp$37935|
  00c44		 |$LN11@InitInterr|

; 439  :     }
; 440  : 
; 441  :     //Create specific interrupt events
; 442  :     m_hVsyncEvent = CreateEvent(NULL, FALSE, FALSE, NULL);

  00c44	e3a03000	 mov         r3, #0
  00c48	e3a02000	 mov         r2, #0
  00c4c	e3a01000	 mov         r1, #0
  00c50	e3a00000	 mov         r0, #0
  00c54	eb000000	 bl          CreateEventW
  00c58	e58d0038	 str         r0, [sp, #0x38]
  00c5c	e59d3060	 ldr         r3, [sp, #0x60]
  00c60	e2833b01	 add         r3, r3, #1, 22
  00c64	e28320f4	 add         r2, r3, #0xF4
  00c68	e59d3038	 ldr         r3, [sp, #0x38]
  00c6c	e5823000	 str         r3, [r2]

; 443  :     if (m_hVsyncEvent == NULL)

  00c70	e59d3060	 ldr         r3, [sp, #0x60]
  00c74	e2833b01	 add         r3, r3, #1, 22
  00c78	e28330f4	 add         r3, r3, #0xF4
  00c7c	e5933000	 ldr         r3, [r3]
  00c80	e3530000	 cmp         r3, #0
  00c84	1a000009	 bne         |$LN9@InitInterr|

; 444  :     {
; 445  :         DEBUGMSG(ZONE_ERROR,
; 446  :             (TEXT("%S: ERROR: Failed to create Vsync interrupt event object!\r\n"), __FUNCTION__));

  00c88	e59f11c4	 ldr         r1, [pc, #0x1C4]
  00c8c	e59f01d4	 ldr         r0, [pc, #0x1D4]
  00c90	eb000000	 bl          NKDbgPrintfW
  00c94	e3a03001	 mov         r3, #1
  00c98	e58d303c	 str         r3, [sp, #0x3C]
  00c9c	ea000001	 b           |$LN25@InitInterr|
  00ca0	e3a03000	 mov         r3, #0
  00ca4	e58d303c	 str         r3, [sp, #0x3C]
  00ca8		 |$LN25@InitInterr|

; 447  :         goto cleanUp;

  00ca8	ea00005d	 b           |$LN8@InitInterr|
  00cac	ea00005c	 b           |$cleanUp$37935|
  00cb0		 |$LN9@InitInterr|

; 448  :     }
; 449  : 
; 450  :     //Create specific interrupt events
; 451  :     m_hVsyncEventSGX = CreateEvent(NULL, FALSE, FALSE, VSYNC_EVENT_NAME);

  00cb0	e59f31ac	 ldr         r3, [pc, #0x1AC]
  00cb4	e3a02000	 mov         r2, #0
  00cb8	e3a01000	 mov         r1, #0
  00cbc	e3a00000	 mov         r0, #0
  00cc0	eb000000	 bl          CreateEventW
  00cc4	e58d0040	 str         r0, [sp, #0x40]
  00cc8	e59d3060	 ldr         r3, [sp, #0x60]
  00ccc	e2833b01	 add         r3, r3, #1, 22
  00cd0	e28320f8	 add         r2, r3, #0xF8
  00cd4	e59d3040	 ldr         r3, [sp, #0x40]
  00cd8	e5823000	 str         r3, [r2]

; 452  :     if (m_hVsyncEventSGX == NULL)

  00cdc	e59d3060	 ldr         r3, [sp, #0x60]
  00ce0	e2833b01	 add         r3, r3, #1, 22
  00ce4	e28330f8	 add         r3, r3, #0xF8
  00ce8	e5933000	 ldr         r3, [r3]
  00cec	e3530000	 cmp         r3, #0
  00cf0	1a000009	 bne         |$LN7@InitInterr|

; 453  :     {
; 454  :         DEBUGMSG(ZONE_ERROR,
; 455  :             (TEXT("%S: ERROR: Failed to create Vsync interrupt event object for SGX!\r\n"), __FUNCTION__));

  00cf4	e59f1158	 ldr         r1, [pc, #0x158]
  00cf8	e59f0160	 ldr         r0, [pc, #0x160]
  00cfc	eb000000	 bl          NKDbgPrintfW
  00d00	e3a03001	 mov         r3, #1
  00d04	e58d3044	 str         r3, [sp, #0x44]
  00d08	ea000001	 b           |$LN27@InitInterr|
  00d0c	e3a03000	 mov         r3, #0
  00d10	e58d3044	 str         r3, [sp, #0x44]
  00d14		 |$LN27@InitInterr|

; 456  :         goto cleanUp;

  00d14	ea000042	 b           |$LN6@InitInterr|
  00d18	ea000041	 b           |$cleanUp$37935|
  00d1c		 |$LN7@InitInterr|

; 457  :     }
; 458  : 
; 459  :     //Create specific interrupt events
; 460  :     m_hScanLineEvent = CreateEvent(NULL, FALSE, FALSE, NULL);

  00d1c	e3a03000	 mov         r3, #0
  00d20	e3a02000	 mov         r2, #0
  00d24	e3a01000	 mov         r1, #0
  00d28	e3a00000	 mov         r0, #0
  00d2c	eb000000	 bl          CreateEventW
  00d30	e58d0048	 str         r0, [sp, #0x48]
  00d34	e59d3060	 ldr         r3, [sp, #0x60]
  00d38	e2833c05	 add         r3, r3, #5, 24
  00d3c	e2832004	 add         r2, r3, #4
  00d40	e59d3048	 ldr         r3, [sp, #0x48]
  00d44	e5823000	 str         r3, [r2]

; 461  :     if (m_hScanLineEvent == NULL)

  00d48	e59d3060	 ldr         r3, [sp, #0x60]
  00d4c	e2833c05	 add         r3, r3, #5, 24
  00d50	e2833004	 add         r3, r3, #4
  00d54	e5933000	 ldr         r3, [r3]
  00d58	e3530000	 cmp         r3, #0
  00d5c	1a000009	 bne         |$LN5@InitInterr|

; 462  :     {
; 463  :         DEBUGMSG(ZONE_ERROR,
; 464  :             (TEXT("%S: ERROR: Failed to create ScanLine interrupt event object!\r\n"), __FUNCTION__));

  00d60	e59f10ec	 ldr         r1, [pc, #0xEC]
  00d64	e59f00f0	 ldr         r0, [pc, #0xF0]
  00d68	eb000000	 bl          NKDbgPrintfW
  00d6c	e3a03001	 mov         r3, #1
  00d70	e58d304c	 str         r3, [sp, #0x4C]
  00d74	ea000001	 b           |$LN29@InitInterr|
  00d78	e3a03000	 mov         r3, #0
  00d7c	e58d304c	 str         r3, [sp, #0x4C]
  00d80		 |$LN29@InitInterr|

; 465  :         goto cleanUp;

  00d80	ea000027	 b           |$LN4@InitInterr|
  00d84	ea000026	 b           |$cleanUp$37935|
  00d88		 |$LN5@InitInterr|

; 466  :     }
; 467  : 
; 468  :     // spawn thread
; 469  :     m_hDssIntThread = CreateThread(NULL, 0, DssInterruptHandler, this, 0, NULL);

  00d88	e3a03000	 mov         r3, #0
  00d8c	e58d3004	 str         r3, [sp, #4]
  00d90	e3a03000	 mov         r3, #0
  00d94	e58d3000	 str         r3, [sp]
  00d98	e59d3060	 ldr         r3, [sp, #0x60]
  00d9c	e59f20b4	 ldr         r2, [pc, #0xB4]
  00da0	e3a01000	 mov         r1, #0
  00da4	e3a00000	 mov         r0, #0
  00da8	eb000000	 bl          CreateThread
  00dac	e58d0050	 str         r0, [sp, #0x50]
  00db0	e59d3060	 ldr         r3, [sp, #0x60]
  00db4	e2833b01	 add         r3, r3, #1, 22
  00db8	e28320e8	 add         r2, r3, #0xE8
  00dbc	e59d3050	 ldr         r3, [sp, #0x50]
  00dc0	e5823000	 str         r3, [r2]

; 470  :     if (!m_hDssIntThread)

  00dc4	e59d3060	 ldr         r3, [sp, #0x60]
  00dc8	e2833b01	 add         r3, r3, #1, 22
  00dcc	e28330e8	 add         r3, r3, #0xE8
  00dd0	e5933000	 ldr         r3, [r3]
  00dd4	e3530000	 cmp         r3, #0
  00dd8	1a000009	 bne         |$LN3@InitInterr|

; 471  :     {
; 472  :         DEBUGMSG(ZONE_ERROR,
; 473  :             (TEXT("%S: Failed to create interrupt thread\r\n"), __FUNCTION__));

  00ddc	e59f1070	 ldr         r1, [pc, #0x70]
  00de0	e59f0068	 ldr         r0, [pc, #0x68]
  00de4	eb000000	 bl          NKDbgPrintfW
  00de8	e3a03001	 mov         r3, #1
  00dec	e58d3054	 str         r3, [sp, #0x54]
  00df0	ea000001	 b           |$LN31@InitInterr|
  00df4	e3a03000	 mov         r3, #0
  00df8	e58d3054	 str         r3, [sp, #0x54]
  00dfc		 |$LN31@InitInterr|

; 474  :         goto cleanUp;

  00dfc	ea000008	 b           |$LN2@InitInterr|
  00e00	ea000007	 b           |$cleanUp$37935|
  00e04		 |$LN3@InitInterr|

; 475  :     }
; 476  : 
; 477  :     // set thread priority
; 478  :     CeSetThreadPriority(m_hDssIntThread, istPriority);

  00e04	e59d1068	 ldr         r1, [sp, #0x68]
  00e08	e59d3060	 ldr         r3, [sp, #0x60]
  00e0c	e2833b01	 add         r3, r3, #1, 22
  00e10	e28330e8	 add         r3, r3, #0xE8
  00e14	e5930000	 ldr         r0, [r3]
  00e18	eb000000	 bl          CeSetThreadPriority

; 479  : 
; 480  :     rc = TRUE;

  00e1c	e3a03001	 mov         r3, #1
  00e20	e58d3008	 str         r3, [sp, #8]
  00e24		 |$LN2@InitInterr|
  00e24		 |$LN4@InitInterr|
  00e24		 |$LN6@InitInterr|
  00e24		 |$LN8@InitInterr|
  00e24		 |$LN10@InitInterr|
  00e24		 |$LN12@InitInterr|
  00e24		 |$LN14@InitInterr|
  00e24		 |$cleanUp$37935|

; 481  : 
; 482  : cleanUp:
; 483  :     if (rc == FALSE) UninitInterrupts();

  00e24	e59d3008	 ldr         r3, [sp, #8]
  00e28	e3530000	 cmp         r3, #0
  00e2c	1a000001	 bne         |$LN1@InitInterr|
  00e30	e59d0060	 ldr         r0, [sp, #0x60]
  00e34	eb000000	 bl          |?UninitInterrupts@OMAPDisplayController@@QAAXXZ|
  00e38		 |$LN1@InitInterr|

; 484  :     return rc;

  00e38	e59d3008	 ldr         r3, [sp, #8]
  00e3c	e58d301c	 str         r3, [sp, #0x1C]

; 485  : }

  00e40	e59d001c	 ldr         r0, [sp, #0x1C]
  00e44	e28dd058	 add         sp, sp, #0x58
  00e48	e89d6000	 ldmia       sp, {sp, lr}
  00e4c	e12fff1e	 bx          lr
  00e50		 |$LN35@InitInterr|
  00e50		 |$LN36@InitInterr|
  00e50	00000000	 DCD         |??_C@_1FA@LCCKCCDM@?$AA?$CF?$AAS?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAi?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AAt@|
  00e54		 |$LN37@InitInterr|
  00e54	00000000	 DCD         |??_C@_0CG@BJPFDBAD@OMAPDisplayController?3?3InitInter@|
  00e58		 |$LN38@InitInterr|
  00e58	00000000	 DCD         |?DssInterruptHandler@OMAPDisplayController@@SAKPAX@Z|
  00e5c		 |$LN39@InitInterr|
  00e5c	00000000	 DCD         |??_C@_1HO@EJNFLNCL@?$AA?$CF?$AAS?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAS?$AAc?$AAa?$AAn@|
  00e60		 |$LN40@InitInterr|
  00e60	00000000	 DCD         |??_C@_1II@CELNKHNA@?$AA?$CF?$AAS?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAV?$AAs?$AAy?$AAn@|
  00e64		 |$LN41@InitInterr|
  00e64	00000000	 DCD         |??_C@_1CE@FJEPCB@?$AAD?$AAS?$AAS?$AAA?$AAI?$AA_?$AAV?$AAS?$AAY?$AAN?$AAC?$AA_?$AAE?$AAV?$AAE?$AAN?$AAT?$AA?$AA@|
  00e68		 |$LN42@InitInterr|
  00e68	00000000	 DCD         |??_C@_1HI@INOGDA@?$AA?$CF?$AAS?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAV?$AAs?$AAy?$AAn@|
  00e6c		 |$LN43@InitInterr|
  00e6c	00000000	 DCD         |??_C@_1GI@JGPMIOHG@?$AA?$CF?$AAS?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAi?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?5@|
  00e70		 |$LN44@InitInterr|
  00e70	00000000	 DCD         |??_C@_1GM@GGFAEFFK@?$AA?$CF?$AAS?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAI?$AAn?$AAt?$AAe@|
  00e74		 |$LN45@InitInterr|
  00e74	00000000	 DCD         |??_C@_1FM@JEFFKAKF@?$AA?$CF?$AAS?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAm?$AAa?$AAp?$AA?5?$AAD?$AAS?$AAS?$AA?5?$AAi?$AAn?$AAt?$AAe?$AAr?$AAr@|
  00e78		 |$LN46@InitInterr|
  00e78	01010098	 DCD         0x1010098
  00e7c		 |$M40308|

			 ENDP  ; |?InitInterrupts@OMAPDisplayController@@QAAHKK@Z|, OMAPDisplayController::InitInterrupts

	EXPORT	|SetEvent|
	IMPORT	|CloseHandle|
	IMPORT	|WaitForSingleObject|
	IMPORT	|InterruptDisable|

  00028			 AREA	 |.pdata|, PDATA
|$T40329| DCD	|$LN10@UninitInte|
	DCD	0x40007204
; Function compile flags: /Odtp

  00e7c			 AREA	 |.text|, CODE, ARM

  00e7c		 |?UninitInterrupts@OMAPDisplayController@@QAAXXZ| PROC ; OMAPDisplayController::UninitInterrupts

; 490  : {

  00e7c		 |$LN10@UninitInte|
  00e7c	e1a0c00d	 mov         r12, sp
  00e80	e92d0001	 stmdb       sp!, {r0}
  00e84	e92d5000	 stmdb       sp!, {r12, lr}
  00e88	e24dd010	 sub         sp, sp, #0x10
  00e8c		 |$M40326|

; 491  :     // unregister system interrupt
; 492  :     if (m_dwDssSysIntr != 0)

  00e8c	e59d3018	 ldr         r3, [sp, #0x18]
  00e90	e2833b01	 add         r3, r3, #1, 22
  00e94	e28330ec	 add         r3, r3, #0xEC
  00e98	e5933000	 ldr         r3, [r3]
  00e9c	e3530000	 cmp         r3, #0
  00ea0	0a000014	 beq         |$LN5@UninitInte|

; 493  :     {
; 494  :         InterruptDisable(m_dwDssSysIntr);

  00ea4	e59d3018	 ldr         r3, [sp, #0x18]
  00ea8	e2833b01	 add         r3, r3, #1, 22
  00eac	e28330ec	 add         r3, r3, #0xEC
  00eb0	e5930000	 ldr         r0, [r3]
  00eb4	eb000000	 bl          InterruptDisable

; 495  :         KernelIoControl(
; 496  :             IOCTL_HAL_RELEASE_SYSINTR, &m_dwDssSysIntr,
; 497  :             sizeof(m_dwDssSysIntr), NULL, 0, NULL
; 498  :             );

  00eb8	e3a03000	 mov         r3, #0
  00ebc	e58d3004	 str         r3, [sp, #4]
  00ec0	e3a03000	 mov         r3, #0
  00ec4	e58d3000	 str         r3, [sp]
  00ec8	e3a03000	 mov         r3, #0
  00ecc	e3a02004	 mov         r2, #4
  00ed0	e59d1018	 ldr         r1, [sp, #0x18]
  00ed4	e2811b01	 add         r1, r1, #1, 22
  00ed8	e28110ec	 add         r1, r1, #0xEC
  00edc	e59f015c	 ldr         r0, [pc, #0x15C]
  00ee0	eb000000	 bl          KernelIoControl

; 499  : 
; 500  :         // reinit
; 501  :         m_dwDssSysIntr = 0;

  00ee4	e59d3018	 ldr         r3, [sp, #0x18]
  00ee8	e2833b01	 add         r3, r3, #1, 22
  00eec	e28320ec	 add         r2, r3, #0xEC
  00ef0	e3a03000	 mov         r3, #0
  00ef4	e5823000	 str         r3, [r2]
  00ef8		 |$LN5@UninitInte|

; 502  :     }
; 503  : 
; 504  :     // stop thread
; 505  :     if (m_hDssIntEvent != NULL)

  00ef8	e59d3018	 ldr         r3, [sp, #0x18]
  00efc	e2833b01	 add         r3, r3, #1, 22
  00f00	e28330e4	 add         r3, r3, #0xE4
  00f04	e5933000	 ldr         r3, [r3]
  00f08	e3530000	 cmp         r3, #0
  00f0c	0a000028	 beq         |$LN4@UninitInte|

; 506  :     {
; 507  :         if (m_hDssIntThread != NULL)

  00f10	e59d3018	 ldr         r3, [sp, #0x18]
  00f14	e2833b01	 add         r3, r3, #1, 22
  00f18	e28330e8	 add         r3, r3, #0xE8
  00f1c	e5933000	 ldr         r3, [r3]
  00f20	e3530000	 cmp         r3, #0
  00f24	0a000018	 beq         |$LN3@UninitInte|

; 508  :         {
; 509  :             // Signal stop to thread
; 510  :             m_bDssIntThreadExit = TRUE;

  00f28	e59d3018	 ldr         r3, [sp, #0x18]
  00f2c	e2832e4f	 add         r2, r3, #0x4F, 28
  00f30	e3a03001	 mov         r3, #1
  00f34	e5823000	 str         r3, [r2]

; 511  : 
; 512  :             // Set event to wake it
; 513  :             SetEvent(m_hDssIntEvent);

  00f38	e59d3018	 ldr         r3, [sp, #0x18]
  00f3c	e2833b01	 add         r3, r3, #1, 22
  00f40	e28330e4	 add         r3, r3, #0xE4
  00f44	e5930000	 ldr         r0, [r3]
  00f48	eb000000	 bl          SetEvent

; 514  : 
; 515  :             // Wait until thread exits
; 516  :             WaitForSingleObject(m_hDssIntThread, INFINITE);

  00f4c	e3e01000	 mvn         r1, #0
  00f50	e59d3018	 ldr         r3, [sp, #0x18]
  00f54	e2833b01	 add         r3, r3, #1, 22
  00f58	e28330e8	 add         r3, r3, #0xE8
  00f5c	e5930000	 ldr         r0, [r3]
  00f60	eb000000	 bl          WaitForSingleObject

; 517  : 
; 518  :             // Close handle
; 519  :             CloseHandle(m_hDssIntThread);

  00f64	e59d3018	 ldr         r3, [sp, #0x18]
  00f68	e2833b01	 add         r3, r3, #1, 22
  00f6c	e28330e8	 add         r3, r3, #0xE8
  00f70	e5930000	 ldr         r0, [r3]
  00f74	eb000000	 bl          CloseHandle

; 520  : 
; 521  :             // reinit
; 522  :             m_hDssIntThread = NULL;

  00f78	e59d3018	 ldr         r3, [sp, #0x18]
  00f7c	e2833b01	 add         r3, r3, #1, 22
  00f80	e28320e8	 add         r2, r3, #0xE8
  00f84	e3a03000	 mov         r3, #0
  00f88	e5823000	 str         r3, [r2]
  00f8c		 |$LN3@UninitInte|

; 523  :         }
; 524  : 
; 525  :         // close event handle
; 526  :         CloseHandle(m_hDssIntEvent);

  00f8c	e59d3018	 ldr         r3, [sp, #0x18]
  00f90	e2833b01	 add         r3, r3, #1, 22
  00f94	e28330e4	 add         r3, r3, #0xE4
  00f98	e5930000	 ldr         r0, [r3]
  00f9c	eb000000	 bl          CloseHandle

; 527  :         m_hDssIntEvent = NULL;

  00fa0	e59d3018	 ldr         r3, [sp, #0x18]
  00fa4	e2833b01	 add         r3, r3, #1, 22
  00fa8	e28320e4	 add         r2, r3, #0xE4
  00fac	e3a03000	 mov         r3, #0
  00fb0	e5823000	 str         r3, [r2]
  00fb4		 |$LN4@UninitInte|

; 528  :     }
; 529  : 
; 530  :     if(m_hVsyncEvent != NULL)

  00fb4	e59d3018	 ldr         r3, [sp, #0x18]
  00fb8	e2833b01	 add         r3, r3, #1, 22
  00fbc	e28330f4	 add         r3, r3, #0xF4
  00fc0	e5933000	 ldr         r3, [r3]
  00fc4	e3530000	 cmp         r3, #0
  00fc8	0a000009	 beq         |$LN2@UninitInte|

; 531  :     {
; 532  :         CloseHandle(m_hVsyncEvent);

  00fcc	e59d3018	 ldr         r3, [sp, #0x18]
  00fd0	e2833b01	 add         r3, r3, #1, 22
  00fd4	e28330f4	 add         r3, r3, #0xF4
  00fd8	e5930000	 ldr         r0, [r3]
  00fdc	eb000000	 bl          CloseHandle

; 533  :         m_hVsyncEvent = NULL;

  00fe0	e59d3018	 ldr         r3, [sp, #0x18]
  00fe4	e2833b01	 add         r3, r3, #1, 22
  00fe8	e28320f4	 add         r2, r3, #0xF4
  00fec	e3a03000	 mov         r3, #0
  00ff0	e5823000	 str         r3, [r2]
  00ff4		 |$LN2@UninitInte|

; 534  :     }
; 535  : 
; 536  :     if(m_hScanLineEvent != NULL)

  00ff4	e59d3018	 ldr         r3, [sp, #0x18]
  00ff8	e2833c05	 add         r3, r3, #5, 24
  00ffc	e2833004	 add         r3, r3, #4
  01000	e5933000	 ldr         r3, [r3]
  01004	e3530000	 cmp         r3, #0
  01008	0a000009	 beq         |$LN1@UninitInte|

; 537  :     {
; 538  :         CloseHandle(m_hScanLineEvent);

  0100c	e59d3018	 ldr         r3, [sp, #0x18]
  01010	e2833c05	 add         r3, r3, #5, 24
  01014	e2833004	 add         r3, r3, #4
  01018	e5930000	 ldr         r0, [r3]
  0101c	eb000000	 bl          CloseHandle

; 539  :         m_hScanLineEvent = NULL;

  01020	e59d3018	 ldr         r3, [sp, #0x18]
  01024	e2833c05	 add         r3, r3, #5, 24
  01028	e2832004	 add         r2, r3, #4
  0102c	e3a03000	 mov         r3, #0
  01030	e5823000	 str         r3, [r2]
  01034		 |$LN1@UninitInte|

; 540  :     }
; 541  : 
; 542  : }

  01034	e28dd010	 add         sp, sp, #0x10
  01038	e89d6000	 ldmia       sp, {sp, lr}
  0103c	e12fff1e	 bx          lr
  01040		 |$LN11@UninitInte|
  01040		 |$LN12@UninitInte|
  01040	010100d8	 DCD         0x10100d8
  01044		 |$M40327|

			 ENDP  ; |?UninitInterrupts@OMAPDisplayController@@QAAXXZ|, OMAPDisplayController::UninitInterrupts

	IMPORT	|EventModify|
; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T40337| DCD	|$LN5@SetEvent|
	DCD	0x40000e04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SetEvent| PROC

; 235  : _inline BOOL SetEvent(HANDLE h) {

  00000		 |$LN5@SetEvent|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd008	 sub         sp, sp, #8
  00010		 |$M40334|

; 236  : 	return EventModify(h,EVENT_SET);

  00010	e3a01003	 mov         r1, #3
  00014	e59d0010	 ldr         r0, [sp, #0x10]
  00018	eb000000	 bl          EventModify
  0001c	e58d0004	 str         r0, [sp, #4]
  00020	e59d3004	 ldr         r3, [sp, #4]
  00024	e58d3000	 str         r3, [sp]

; 237  : }

  00028	e59d0000	 ldr         r0, [sp]
  0002c	e28dd008	 add         sp, sp, #8
  00030	e89d6000	 ldmia       sp, {sp, lr}
  00034	e12fff1e	 bx          lr
  00038		 |$M40335|

			 ENDP  ; |SetEvent|

	EXPORT	|??_C@_1EM@IKFPPIHG@?$AA?$CF?$AAS?$AA?3?$AA?5?$AAe?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAi?$AAn?$AA?5?$AAi?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AAh?$AAa?$AAn?$AAd?$AAl@| [ DATA ] ; `string'
	EXPORT	|??_C@_0CL@JFHMHMNJ@OMAPDisplayController?3?3DssInterr@| [ DATA ] ; `string'
	EXPORT	|?DssProcessInterrupt@OMAPDisplayController@@QAAXXZ| ; OMAPDisplayController::DssProcessInterrupt
	IMPORT	|InterruptDone|
	IMPORT	|__C_specific_handler|

  00030			 AREA	 |.pdata|, PDATA
|$T40358| DCD	|$LN20@DssInterru|
	DCD	0xc0002d05
|$T40360| DCD	|$LN10@DssInterru|
	DCD	0x40000501
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\dssai\dssai.cpp

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EM@IKFPPIHG@?$AA?$CF?$AAS?$AA?3?$AA?5?$AAe?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAi?$AAn?$AA?5?$AAi?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AAh?$AAa?$AAn?$AAd?$AAl@| DCB "%"
	DCB	0x0, "S", 0x0, ":", 0x0, " ", 0x0, "e", 0x0, "x", 0x0, "c"
	DCB	0x0, "e", 0x0, "p", 0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n"
	DCB	0x0, " ", 0x0, "i", 0x0, "n", 0x0, " ", 0x0, "i", 0x0, "n"
	DCB	0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p"
	DCB	0x0, "t", 0x0, " ", 0x0, "h", 0x0, "a", 0x0, "n", 0x0, "d"
	DCB	0x0, "l", 0x0, "e", 0x0, "r", 0x0, "!", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CL@JFHMHMNJ@OMAPDisplayController?3?3DssInterr@| DCB "OMAPDisplay"
	DCB	"Controller::DssInterruptHandler", 0x0	; `string'

  00000			 AREA	 |.xdata|, DATA
|$T40356| DCD	0x1
	DCD	|$LN14@DssInterru|
	DCD	|$LN15@DssInterru|
	DCD	|$LN10@DssInterru|
	DCD	|$LN11@DssInterru|
; Function compile flags: /Odtp

  01044			 AREA	 |.text|, CODE, ARM

  01044	00000000	 DCD         |__C_specific_handler|
  01048	00000000	 DCD         |$T40356|

  0104c		 |?DssInterruptHandler@OMAPDisplayController@@SAKPAX@Z| PROC ; OMAPDisplayController::DssInterruptHandler

; 547  : {

  0104c		 |$LN20@DssInterru|
  0104c	e1a0c00d	 mov         r12, sp
  01050	e92d0001	 stmdb       sp!, {r0}
  01054	e92d5800	 stmdb       sp!, {r11, r12, lr}
  01058	e28db00c	 add         r11, sp, #0xC
  0105c	e24dd010	 sub         sp, sp, #0x10
  01060		 |$LN18@DssInterru|

; 548  :     OMAPDisplayController *pController = (OMAPDisplayController *)pData;

  01060	e59b3000	 ldr         r3, [r11]
  01064	e50b3018	 str         r3, [r11, #-0x18]

; 549  :     DWORD sysIntr = pController->m_dwDssSysIntr;

  01068	e51b3018	 ldr         r3, [r11, #-0x18]
  0106c	e2833b01	 add         r3, r3, #1, 22
  01070	e28330ec	 add         r3, r3, #0xEC
  01074	e5933000	 ldr         r3, [r3]
  01078	e50b301c	 str         r3, [r11, #-0x1C]
  0107c		 |$LN4@DssInterru|
  0107c		 |$LN14@DssInterru|

; 550  :     for(;;)
; 551  :     {
; 552  :         __try
; 553  :         {
; 554  :             // wait for interrupt
; 555  :             WaitForSingleObject(pController->m_hDssIntEvent, INFINITE);

  0107c	e3e01000	 mvn         r1, #0
  01080	e51b3018	 ldr         r3, [r11, #-0x18]
  01084	e2833b01	 add         r3, r3, #1, 22
  01088	e28330e4	 add         r3, r3, #0xE4
  0108c	e5930000	 ldr         r0, [r3]
  01090	eb000000	 bl          WaitForSingleObject

; 556  :             if (pController->m_bDssIntThreadExit == TRUE) break;

  01094	e51b3018	 ldr         r3, [r11, #-0x18]
  01098	e2833e4f	 add         r3, r3, #0x4F, 28
  0109c	e5933000	 ldr         r3, [r3]
  010a0	e3530001	 cmp         r3, #1
  010a4	1a000000	 bne         |$LN1@DssInterru|
  010a8	ea00000e	 b           |$LN3@DssInterru|
  010ac		 |$LN1@DssInterru|

; 557  : 
; 558  :             // process interrupt
; 559  :             pController->DssProcessInterrupt();

  010ac	e51b0018	 ldr         r0, [r11, #-0x18]
  010b0	eb000000	 bl          |?DssProcessInterrupt@OMAPDisplayController@@QAAXXZ|
  010b4		 |$LN15@DssInterru|

; 560  :         }

  010b4	ea000008	 b           |$LN16@DssInterru|
  010b8		 |$LN11@DssInterru|

; 562  :         {
; 563  :             DEBUGMSG(ZONE_ERROR,
; 564  :                 (TEXT("%S: exception in interrupt handler!\r\n"), __FUNCTION__));

  010b8	e59f1050	 ldr         r1, [pc, #0x50]
  010bc	e59f0048	 ldr         r0, [pc, #0x48]
  010c0	eb000000	 bl          NKDbgPrintfW
  010c4	e3a03001	 mov         r3, #1
  010c8	e50b3010	 str         r3, [r11, #-0x10]
  010cc	ea000001	 b           |$LN8@DssInterru|
  010d0	e3a03000	 mov         r3, #0
  010d4	e50b3010	 str         r3, [r11, #-0x10]
  010d8		 |$LN8@DssInterru|
  010d8	eaffffff	 b           |$LN16@DssInterru|
  010dc		 |$LN16@DssInterru|

; 565  :         }
; 566  :         // reset for next interrupt
; 567  :         ::InterruptDone(sysIntr);

  010dc	e51b001c	 ldr         r0, [r11, #-0x1C]
  010e0	eb000000	 bl          InterruptDone

; 568  :     }

  010e4	eaffffe4	 b           |$LN4@DssInterru|
  010e8		 |$LN3@DssInterru|

; 569  :     return 1;

  010e8	e3a03001	 mov         r3, #1
  010ec	e50b3014	 str         r3, [r11, #-0x14]
  010f0		 |$LN9@DssInterru|

; 570  : }

  010f0	e51b0014	 ldr         r0, [r11, #-0x14]
  010f4	e24bd00c	 sub         sp, r11, #0xC
  010f8	e89d6800	 ldmia       sp, {r11, sp, lr}
  010fc	e12fff1e	 bx          lr

			 ENDP  ; |?DssInterruptHandler@OMAPDisplayController@@SAKPAX@Z|, OMAPDisplayController::DssInterruptHandler

  01100		 |$LN10@DssInterru|
  01100		 |$LN19@DssInterru|

; 561  :         __except (EXCEPTION_EXECUTE_HANDLER)

  01100	e52de004	 str         lr, [sp, #-4]!
  01104		 |$LN13@DssInterru|
  01104		 |$LN22@DssInterru|
  01104	e3a00001	 mov         r0, #1
  01108		 |$LN12@DssInterru|
  01108	e49df004	 ldr         pc, [sp], #4
  0110c		 |$LN24@DssInterru|
  0110c		 |$LN25@DssInterru|
  0110c	00000000	 DCD         |??_C@_1EM@IKFPPIHG@?$AA?$CF?$AAS?$AA?3?$AA?5?$AAe?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAi?$AAn?$AA?5?$AAi?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AAh?$AAa?$AAn?$AAd?$AAl@|
  01110		 |$LN26@DssInterru|
  01110	00000000	 DCD         |??_C@_0CL@JFHMHMNJ@OMAPDisplayController?3?3DssInterr@|
  01114		 |$LN23@DssInterru|
  01114		 |$LN21@DssInterru|
	EXPORT	|?ReleaseRegs@OMAPDisplayController@@IAAHXZ| ; OMAPDisplayController::ReleaseRegs
	EXPORT	|??_C@_1CI@OCNFJAJN@?$AAO?$AAC?$AAP?$AA_?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AAF?$AAA?$AAT?$AAA?$AAL?$AA?$CB?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FK@CAFLKNBH@?$AAD?$AAS?$AAS?$AA?5?$AAp?$AAi?$AAp?$AAe?$AAl?$AAi?$AAn?$AAe?$AA?5?$AAu?$AAn?$AAd?$AAe?$AAr?$AAf?$AAl?$AAo?$AAw?$AA?5?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?4?$AAI?$AAn?$AAt@| [ DATA ] ; `string'
	EXPORT	|?EnablePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@@Z| ; OMAPDisplayController::EnablePipeline
	EXPORT	|?RestoreRegisters@OMAPDisplayController@@QAAHW4OMAP_DSS_DESTINATION@@@Z| ; OMAPDisplayController::RestoreRegisters
	EXPORT	|??_C@_1CK@NNPPGLKC@?$AAS?$AAY?$AAN?$AAC?$AAL?$AAO?$AAS?$AAT?$AA?5?$AAD?$AAS?$AAS?$AAI?$AAR?$AAQ?$AA?3?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FG@PEEGKNJM@?$AAA?$AAc?$AAc?$AAe?$AAs?$AAs?$AAR?$AAe?$AAg?$AAs?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAD?$AAs?$AAs?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAI@| [ DATA ] ; `string'
	EXPORT	|?AccessRegs@OMAPDisplayController@@IAAHXZ| ; OMAPDisplayController::AccessRegs
	IMPORT	|Sleep|

  00040			 AREA	 |.pdata|, PDATA
|$T40384| DCD	|$LN40@DssProcess|
	DCD	0x40016604

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@OCNFJAJN@?$AAO?$AAC?$AAP?$AA_?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AAF?$AAA?$AAT?$AAA?$AAL?$AA?$CB?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@| DCB "O"
	DCB	0x0, "C", 0x0, "P", 0x0, "_", 0x0, "E", 0x0, "R", 0x0, "R"
	DCB	0x0, "O", 0x0, "R", 0x0, " ", 0x0, "F", 0x0, "A", 0x0, "T"
	DCB	0x0, "A", 0x0, "L", 0x0, "!", 0x0, "!", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FK@CAFLKNBH@?$AAD?$AAS?$AAS?$AA?5?$AAp?$AAi?$AAp?$AAe?$AAl?$AAi?$AAn?$AAe?$AA?5?$AAu?$AAn?$AAd?$AAe?$AAr?$AAf?$AAl?$AAo?$AAw?$AA?5?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?4?$AAI?$AAn?$AAt@| DCB "D"
	DCB	0x0, "S", 0x0, "S", 0x0, " ", 0x0, "p", 0x0, "i", 0x0, "p"
	DCB	0x0, "e", 0x0, "l", 0x0, "i", 0x0, "n", 0x0, "e", 0x0, " "
	DCB	0x0, "u", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "r", 0x0, "f"
	DCB	0x0, "l", 0x0, "o", 0x0, "w", 0x0, " ", 0x0, "e", 0x0, "r"
	DCB	0x0, "r", 0x0, "o", 0x0, "r", 0x0, ".", 0x0, "I", 0x0, "n"
	DCB	0x0, "t", 0x0, "r", 0x0, "s", 0x0, "t", 0x0, "a", 0x0, "t"
	DCB	0x0, "u", 0x0, "s", 0x0, ":", 0x0, "%", 0x0, "x", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CK@NNPPGLKC@?$AAS?$AAY?$AAN?$AAC?$AAL?$AAO?$AAS?$AAT?$AA?5?$AAD?$AAS?$AAS?$AAI?$AAR?$AAQ?$AA?3?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "Y", 0x0, "N", 0x0, "C", 0x0, "L", 0x0, "O", 0x0, "S"
	DCB	0x0, "T", 0x0, " ", 0x0, "D", 0x0, "S", 0x0, "S", 0x0, "I"
	DCB	0x0, "R", 0x0, "Q", 0x0, ":", 0x0, "%", 0x0, "x", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@| DCB "%"
	DCB	0x0, "s", 0x0, ":", 0x0, " ", 0x0, "D", 0x0, "E", 0x0, "B"
	DCB	0x0, "U", 0x0, "G", 0x0, "C", 0x0, "H", 0x0, "K", 0x0, " "
	DCB	0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "i", 0x0, "n", 0x0, " ", 0x0, "f", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, " ", 0x0, "%", 0x0, "s", 0x0, " "
	DCB	0x0, "a", 0x0, "t", 0x0, " ", 0x0, "l", 0x0, "i", 0x0, "n"
	DCB	0x0, "e", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@| DCB "U", 0x0
	DCB	"n", 0x0, "k", 0x0, "n", 0x0, "o", 0x0, "w", 0x0, "n", 0x0
	DCB	0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FG@PEEGKNJM@?$AAA?$AAc?$AAc?$AAe?$AAs?$AAs?$AAR?$AAe?$AAg?$AAs?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAD?$AAs?$AAs?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAI@| DCB "A"
	DCB	0x0, "c", 0x0, "c", 0x0, "e", 0x0, "s", 0x0, "s", 0x0, "R"
	DCB	0x0, "e", 0x0, "g", 0x0, "s", 0x0, " ", 0x0, "f", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "i"
	DCB	0x0, "n", 0x0, " ", 0x0, "D", 0x0, "s", 0x0, "s", 0x0, "P"
	DCB	0x0, "r", 0x0, "o", 0x0, "c", 0x0, "e", 0x0, "s", 0x0, "s"
	DCB	0x0, "I", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r"
	DCB	0x0, "u", 0x0, "p", 0x0, "t", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Odtp

  01114			 AREA	 |.text|, CODE, ARM

  01114		 |?DssProcessInterrupt@OMAPDisplayController@@QAAXXZ| PROC ; OMAPDisplayController::DssProcessInterrupt

; 574  : {

  01114		 |$LN40@DssProcess|
  01114	e1a0c00d	 mov         r12, sp
  01118	e92d0001	 stmdb       sp!, {r0}
  0111c	e92d5000	 stmdb       sp!, {r12, lr}
  01120	e24dd03c	 sub         sp, sp, #0x3C
  01124		 |$M40381|

; 575  :     DWORD irqStatus = 0;

  01124	e3a03000	 mov         r3, #0
  01128	e58d3000	 str         r3, [sp]

; 576  :     DWORD dwTimeout = DISPLAY_TIMEOUT;

  0112c	e3a0301e	 mov         r3, #0x1E
  01130	e58d3014	 str         r3, [sp, #0x14]

; 577  :     OMAP_DSS_PIPELINE pipelineID = OMAP_DSS_PIPELINE_GFX;

  01134	e3a03000	 mov         r3, #0
  01138	e58d300c	 str         r3, [sp, #0xC]

; 578  :     BOOL  lcdVsync = FALSE;

  0113c	e3a03000	 mov         r3, #0
  01140	e58d3010	 str         r3, [sp, #0x10]

; 579  :     //Alwasy set to true, in case tv-out is disabled.
; 580  :     BOOL  tvVsync = TRUE;

  01144	e3a03001	 mov         r3, #1
  01148	e58d3008	 str         r3, [sp, #8]

; 581  :     DWORD irqEnableMask = 0;

  0114c	e3a03000	 mov         r3, #0
  01150	e58d3004	 str         r3, [sp, #4]

; 582  : 
; 583  :     // Access the regs
; 584  :     if( AccessRegs() == FALSE )

  01154	e59d0044	 ldr         r0, [sp, #0x44]
  01158	eb000000	 bl          |?AccessRegs@OMAPDisplayController@@IAAHXZ|
  0115c	e58d001c	 str         r0, [sp, #0x1C]
  01160	e59d301c	 ldr         r3, [sp, #0x1C]
  01164	e3530000	 cmp         r3, #0
  01168	1a000014	 bne         |$LN21@DssProcess|

; 585  :     {
; 586  :         // failure will cause lockup because the interrupt will still be pending...
; 587  :         DEBUGMSG(ZONE_ERROR,(L"AccessRegs failed in DssProcessInterrupt\r\n"));

  0116c	e59f0534	 ldr         r0, [pc, #0x534]
  01170	eb000000	 bl          NKDbgPrintfW
  01174	e3a03001	 mov         r3, #1
  01178	e58d3020	 str         r3, [sp, #0x20]
  0117c	ea000001	 b           |$LN25@DssProcess|
  01180	e3a03000	 mov         r3, #0
  01184	e58d3020	 str         r3, [sp, #0x20]
  01188		 |$LN25@DssProcess|

; 588  :         ASSERT(0);

  01188	ea000002	 b           |$LN26@DssProcess|
  0118c	e3a03001	 mov         r3, #1
  01190	e58d3024	 str         r3, [sp, #0x24]
  01194	ea000007	 b           |$LN27@DssProcess|
  01198		 |$LN26@DssProcess|
  01198	e3a03f93	 mov         r3, #0x93, 30
  0119c	e59f2500	 ldr         r2, [pc, #0x500]
  011a0	e59f14f8	 ldr         r1, [pc, #0x4F8]
  011a4	e59f04f0	 ldr         r0, [pc, #0x4F0]
  011a8	eb000000	 bl          NKDbgPrintfW
  011ac	e6000010	 __debugbreak_ce
  011b0	e3a03000	 mov         r3, #0
  011b4	e58d3024	 str         r3, [sp, #0x24]
  011b8		 |$LN27@DssProcess|

; 589  :         goto cleanUp;

  011b8	ea00012d	 b           |$LN20@DssProcess|
  011bc	ea00012c	 b           |$cleanUp$38001|
  011c0		 |$LN21@DssProcess|

; 590  :     }
; 591  :     irqEnableMask = INREG32(&m_pDispRegs->DISPC_IRQENABLE);

  011c0	e59d3044	 ldr         r3, [sp, #0x44]
  011c4	e2833008	 add         r3, r3, #8
  011c8	e5933000	 ldr         r3, [r3]
  011cc	e283301c	 add         r3, r3, #0x1C
  011d0	e5933000	 ldr         r3, [r3]
  011d4	e58d3004	 str         r3, [sp, #4]

; 592  :     irqStatus = (INREG32(&m_pDispRegs->DISPC_IRQSTATUS) & irqEnableMask);

  011d8	e59d3044	 ldr         r3, [sp, #0x44]
  011dc	e2833008	 add         r3, r3, #8
  011e0	e5933000	 ldr         r3, [r3]
  011e4	e2833018	 add         r3, r3, #0x18
  011e8	e5932000	 ldr         r2, [r3]
  011ec	e59d3004	 ldr         r3, [sp, #4]
  011f0	e0023003	 and         r3, r2, r3
  011f4	e58d3000	 str         r3, [sp]

; 593  :     /* Check if we should worry about Vsync or not */
; 594  :     m_lastVsyncIRQStatus &= irqEnableMask;

  011f8	e59d3044	 ldr         r3, [sp, #0x44]
  011fc	e2833c05	 add         r3, r3, #5, 24
  01200	e2833038	 add         r3, r3, #0x38
  01204	e5932000	 ldr         r2, [r3]
  01208	e59d3004	 ldr         r3, [sp, #4]
  0120c	e0022003	 and         r2, r2, r3
  01210	e59d3044	 ldr         r3, [sp, #0x44]
  01214	e2833c05	 add         r3, r3, #5, 24
  01218	e2833038	 add         r3, r3, #0x38
  0121c	e5832000	 str         r2, [r3]

; 595  :     
; 596  :     //  Enabling Interrupt for SYNCLOSTDIGITAL causes tvout to not recover 
; 597  :     //  from a suspend/resume cycle. Hence disabled. SYNCLOSTDIGITAL is not
; 598  :     //  causing any issue with functionality of tvout.
; 599  :     
; 600  : /*    if (irqStatus & (DISPC_IRQSTATUS_SYNCLOST|
; 601  :                      DISPC_IRQSTATUS_SYNCLOSTDIGITAL))*/
; 602  :     if (irqStatus & (DISPC_IRQSTATUS_SYNCLOST))                         

  01220	e59d3000	 ldr         r3, [sp]
  01224	e3130901	 tst         r3, #1, 18
  01228	0a00009d	 beq         |$LN19@DssProcess|

; 603  :     {
; 604  :         DEBUGMSG(ZONE_ERROR,(L"SYNCLOST DSSIRQ:%x\r\n",irqStatus));

  0122c	e59d1000	 ldr         r1, [sp]
  01230	e59f0460	 ldr         r0, [pc, #0x460]
  01234	eb000000	 bl          NKDbgPrintfW
  01238	e3a03001	 mov         r3, #1
  0123c	e58d3028	 str         r3, [sp, #0x28]
  01240	ea000001	 b           |$LN29@DssProcess|
  01244	e3a03000	 mov         r3, #0
  01248	e58d3028	 str         r3, [sp, #0x28]
  0124c		 |$LN29@DssProcess|

; 605  : 
; 606  :         // SYNCLOST recovery process
; 607  : 
; 608  :         // clear existing Frame done interrupt
; 609  :         OUTREG32( &m_pDispRegs->DISPC_IRQSTATUS,DISPC_IRQSTATUS_FRAMEDONE );

  0124c	e59d3044	 ldr         r3, [sp, #0x44]
  01250	e2833008	 add         r3, r3, #8
  01254	e5933000	 ldr         r3, [r3]
  01258	e2832018	 add         r2, r3, #0x18
  0125c	e3a03001	 mov         r3, #1
  01260	e5823000	 str         r3, [r2]

; 610  : 
; 611  :         // disable scanning
; 612  :         CLRREG32( &m_pDispRegs->DISPC_CONTROL,
; 613  :                   DISPC_CONTROL_DIGITALENABLE |
; 614  :                   DISPC_CONTROL_LCDENABLE
; 615  :                   );

  01264	e59d3044	 ldr         r3, [sp, #0x44]
  01268	e2833008	 add         r3, r3, #8
  0126c	e5933000	 ldr         r3, [r3]
  01270	e2833040	 add         r3, r3, #0x40
  01274	e5932000	 ldr         r2, [r3]
  01278	e3e03003	 mvn         r3, #3
  0127c	e0022003	 and         r2, r2, r3
  01280	e59d3044	 ldr         r3, [sp, #0x44]
  01284	e2833008	 add         r3, r3, #8
  01288	e5933000	 ldr         r3, [r3]
  0128c	e2833040	 add         r3, r3, #0x40
  01290	e5832000	 str         r2, [r3]
  01294		 |$LN18@DssProcess|

; 616  : 
; 617  :         // Wait for the frame done
; 618  :         while (((INREG32(&m_pDispRegs->DISPC_IRQSTATUS) &
; 619  :                  DISPC_IRQSTATUS_FRAMEDONE) == 0) &&
; 620  :                  (dwTimeout-- > 0)
; 621  :                  )

  01294	e59d3044	 ldr         r3, [sp, #0x44]
  01298	e2833008	 add         r3, r3, #8
  0129c	e5933000	 ldr         r3, [r3]
  012a0	e2833018	 add         r3, r3, #0x18
  012a4	e5933000	 ldr         r3, [r3]
  012a8	e3130001	 tst         r3, #1
  012ac	1a000008	 bne         |$LN17@DssProcess|
  012b0	e59d3014	 ldr         r3, [sp, #0x14]
  012b4	e3530000	 cmp         r3, #0
  012b8	e59d3014	 ldr         r3, [sp, #0x14]
  012bc	e2433001	 sub         r3, r3, #1
  012c0	e58d3014	 str         r3, [sp, #0x14]
  012c4	9a000002	 bls         |$LN17@DssProcess|

; 622  :         {
; 623  :             Sleep(1);

  012c8	e3a00001	 mov         r0, #1
  012cc	eb000000	 bl          Sleep

; 624  :         }

  012d0	eaffffef	 b           |$LN18@DssProcess|
  012d4		 |$LN17@DssProcess|

; 625  : 
; 626  :         //  Clear all DSS interrupts
; 627  :         OUTREG32( &m_pDispRegs->DISPC_IRQSTATUS, 0xFFFFFFFF );

  012d4	e59d3044	 ldr         r3, [sp, #0x44]
  012d8	e2833008	 add         r3, r3, #8
  012dc	e5933000	 ldr         r3, [r3]
  012e0	e2832018	 add         r2, r3, #0x18
  012e4	e3e03000	 mvn         r3, #0
  012e8	e5823000	 str         r3, [r2]

; 628  : 
; 629  :         // Set the power level to D4(OFF)
; 630  :         SetPowerLevel(D4);

  012ec	e3a01004	 mov         r1, #4
  012f0	e59d0044	 ldr         r0, [sp, #0x44]
  012f4	eb000000	 bl          |?SetPowerLevel@OMAPDisplayController@@QAAHK@Z|

; 631  : 
; 632  :         // Issue a reset cmd to DSS to recover from failure
; 633  :         ResetDSS();

  012f8	e59d0044	 ldr         r0, [sp, #0x44]
  012fc	eb000000	 bl          |?ResetDSS@OMAPDisplayController@@IAAHXZ|

; 634  : 
; 635  :         //  Enable controller power
; 636  :         SetPowerLevel( D0 );

  01300	e3a01000	 mov         r1, #0
  01304	e59d0044	 ldr         r0, [sp, #0x44]
  01308	eb000000	 bl          |?SetPowerLevel@OMAPDisplayController@@QAAHK@Z|

; 637  : 
; 638  :         // Initialize the LCD panel related parameters
; 639  :         InitLCD();

  0130c	e59d0044	 ldr         r0, [sp, #0x44]
  01310	eb000000	 bl          |?InitLCD@OMAPDisplayController@@QAAHXZ|

; 640  : 
; 641  :         // Clear all the interrupts status
; 642  :         OUTREG32( &m_pDispRegs->DISPC_IRQSTATUS, 0xFFFFFFFF );

  01314	e59d3044	 ldr         r3, [sp, #0x44]
  01318	e2833008	 add         r3, r3, #8
  0131c	e5933000	 ldr         r3, [r3]
  01320	e2832018	 add         r2, r3, #0x18
  01324	e3e03000	 mvn         r3, #0
  01328	e5823000	 str         r3, [r2]

; 643  : 
; 644  :         // Could change to reset the pipeline status to inactive state...
; 645  :         if (g_dwDestinationRefCnt[OMAP_DSS_DESTINATION_LCD] > 0)

  0132c	e59f3360	 ldr         r3, [pc, #0x360]
  01330	e5933000	 ldr         r3, [r3]
  01334	e3530000	 cmp         r3, #0
  01338	9a000002	 bls         |$LN16@DssProcess|

; 646  :         {
; 647  :             RestoreRegisters(OMAP_DSS_DESTINATION_LCD);

  0133c	e3a01000	 mov         r1, #0
  01340	e59d0044	 ldr         r0, [sp, #0x44]
  01344	eb000000	 bl          |?RestoreRegisters@OMAPDisplayController@@QAAHW4OMAP_DSS_DESTINATION@@@Z|
  01348		 |$LN16@DssProcess|

; 648  :         }
; 649  : 
; 650  :         if (m_bTVEnable)

  01348	e59d3044	 ldr         r3, [sp, #0x44]
  0134c	e2833b01	 add         r3, r3, #1, 22
  01350	e28330b4	 add         r3, r3, #0xB4
  01354	e5933000	 ldr         r3, [r3]
  01358	e3530000	 cmp         r3, #0
  0135c	0a000002	 beq         |$LN15@DssProcess|

; 651  :         {
; 652  :             RestoreRegisters(OMAP_DSS_DESTINATION_TVOUT);

  01360	e3a01001	 mov         r1, #1
  01364	e59d0044	 ldr         r0, [sp, #0x44]
  01368	eb000000	 bl          |?RestoreRegisters@OMAPDisplayController@@QAAHW4OMAP_DSS_DESTINATION@@@Z|
  0136c		 |$LN15@DssProcess|

; 653  :         }
; 654  : 
; 655  :         //  Clear refcounts on pipelines
; 656  :         g_dwDestinationRefCnt[OMAP_DSS_DESTINATION_LCD] = 0;

  0136c	e59f2320	 ldr         r2, [pc, #0x320]
  01370	e3a03000	 mov         r3, #0
  01374	e5823000	 str         r3, [r2]

; 657  :         g_dwDestinationRefCnt[OMAP_DSS_DESTINATION_TVOUT] = 0;

  01378	e59f2314	 ldr         r2, [pc, #0x314]
  0137c	e3a03000	 mov         r3, #0
  01380	e5823004	 str         r3, [r2, #4]

; 658  :         
; 659  :         //EnablePipeline function to turn the active pipelines
; 660  :         if ((g_rgPipelineMapping[OMAP_DSS_PIPELINE_GFX].bEnabled)||
; 661  :             (g_rgPipelineMapping[OMAP_DSS_PIPELINE_VIDEO1].bEnabled) ||
; 662  :             (g_rgPipelineMapping[OMAP_DSS_PIPELINE_VIDEO2].bEnabled)
; 663  :             )

  01384	e59f3304	 ldr         r3, [pc, #0x304]
  01388	e5933000	 ldr         r3, [r3]
  0138c	e3530000	 cmp         r3, #0
  01390	1a000007	 bne         |$LN13@DssProcess|
  01394	e59f32f4	 ldr         r3, [pc, #0x2F4]
  01398	e5933020	 ldr         r3, [r3, #0x20]
  0139c	e3530000	 cmp         r3, #0
  013a0	1a000003	 bne         |$LN13@DssProcess|
  013a4	e59f32e4	 ldr         r3, [pc, #0x2E4]
  013a8	e5933040	 ldr         r3, [r3, #0x40]
  013ac	e3530000	 cmp         r3, #0
  013b0	0a000039	 beq         |$LN14@DssProcess|
  013b4		 |$LN13@DssProcess|

; 664  :         {
; 665  : 
; 666  :             for ( DWORD i = 0;

  013b4	e3a03000	 mov         r3, #0
  013b8	e58d3018	 str         r3, [sp, #0x18]

; 667  :                   i < OMAP_DSS_PIPELINE_MAX;

  013bc	ea000002	 b           |$LN12@DssProcess|
  013c0		 |$LN11@DssProcess|

; 668  :                   i++)

  013c0	e59d3018	 ldr         r3, [sp, #0x18]
  013c4	e2833001	 add         r3, r3, #1
  013c8	e58d3018	 str         r3, [sp, #0x18]
  013cc		 |$LN12@DssProcess|
  013cc	e59d3018	 ldr         r3, [sp, #0x18]
  013d0	e3530003	 cmp         r3, #3
  013d4	2a000014	 bcs         |$LN10@DssProcess|

; 669  :             {
; 670  :                 pipelineID = (OMAP_DSS_PIPELINE)i;

  013d8	e59d3018	 ldr         r3, [sp, #0x18]
  013dc	e58d300c	 str         r3, [sp, #0xC]

; 671  :                 if (g_rgPipelineMapping[pipelineID].bEnabled == TRUE)

  013e0	e59d100c	 ldr         r1, [sp, #0xC]
  013e4	e3a03020	 mov         r3, #0x20
  013e8	e0020391	 mul         r2, r1, r3
  013ec	e59f329c	 ldr         r3, [pc, #0x29C]
  013f0	e0833002	 add         r3, r3, r2
  013f4	e5933000	 ldr         r3, [r3]
  013f8	e3530001	 cmp         r3, #1
  013fc	1a000009	 bne         |$LN9@DssProcess|

; 672  :                     {
; 673  :                     g_rgPipelineMapping[pipelineID].bEnabled = FALSE;

  01400	e59d100c	 ldr         r1, [sp, #0xC]
  01404	e3a03020	 mov         r3, #0x20
  01408	e0020391	 mul         r2, r1, r3
  0140c	e59f327c	 ldr         r3, [pc, #0x27C]
  01410	e0832002	 add         r2, r3, r2
  01414	e3a03000	 mov         r3, #0
  01418	e5823000	 str         r3, [r2]

; 674  :                     EnablePipeline(pipelineID);

  0141c	e59d100c	 ldr         r1, [sp, #0xC]
  01420	e59d0044	 ldr         r0, [sp, #0x44]
  01424	eb000000	 bl          |?EnablePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@@Z|
  01428		 |$LN9@DssProcess|

; 675  :                     }
; 676  :             }

  01428	eaffffe4	 b           |$LN11@DssProcess|
  0142c		 |$LN10@DssProcess|

; 677  : 
; 678  :             // Enable the LCD control bit
; 679  :             SETREG32( &m_pDispRegs->DISPC_CONTROL,
; 680  :                        DISPC_CONTROL_LCDENABLE );

  0142c	e59d3044	 ldr         r3, [sp, #0x44]
  01430	e2833008	 add         r3, r3, #8
  01434	e5933000	 ldr         r3, [r3]
  01438	e2833040	 add         r3, r3, #0x40
  0143c	e5933000	 ldr         r3, [r3]
  01440	e3832001	 orr         r2, r3, #1
  01444	e59d3044	 ldr         r3, [sp, #0x44]
  01448	e2833008	 add         r3, r3, #8
  0144c	e5933000	 ldr         r3, [r3]
  01450	e2833040	 add         r3, r3, #0x40
  01454	e5832000	 str         r2, [r3]

; 681  : 
; 682  :             // Enable the TVOut control bit
; 683  :             if (m_bTVEnable)

  01458	e59d3044	 ldr         r3, [sp, #0x44]
  0145c	e2833b01	 add         r3, r3, #1, 22
  01460	e28330b4	 add         r3, r3, #0xB4
  01464	e5933000	 ldr         r3, [r3]
  01468	e3530000	 cmp         r3, #0
  0146c	0a00000a	 beq         |$LN8@DssProcess|

; 684  :             {
; 685  :                 SETREG32( &m_pDispRegs->DISPC_CONTROL,
; 686  :                            DISPC_CONTROL_DIGITALENABLE);

  01470	e59d3044	 ldr         r3, [sp, #0x44]
  01474	e2833008	 add         r3, r3, #8
  01478	e5933000	 ldr         r3, [r3]
  0147c	e2833040	 add         r3, r3, #0x40
  01480	e5933000	 ldr         r3, [r3]
  01484	e3832002	 orr         r2, r3, #2
  01488	e59d3044	 ldr         r3, [sp, #0x44]
  0148c	e2833008	 add         r3, r3, #8
  01490	e5933000	 ldr         r3, [r3]
  01494	e2833040	 add         r3, r3, #0x40
  01498	e5832000	 str         r2, [r3]
  0149c		 |$LN8@DssProcess|
  0149c		 |$LN14@DssProcess|

; 687  :             }
; 688  : 
; 689  :         }

  0149c	ea000074	 b           |$LN7@DssProcess|

; 690  : 
; 691  :         goto cleanUp;

  014a0	ea000073	 b           |$cleanUp$38001|
  014a4		 |$LN19@DssProcess|

; 692  :     }
; 693  : 
; 694  :     if (irqStatus & (DISPC_IRQSTATUS_GFXFIFOUNDERFLOW  |
; 695  :                      DISPC_IRQSTATUS_VID1FIFOUNDERFLOW |
; 696  :                      DISPC_IRQSTATUS_VID2FIFOUNDERFLOW
; 697  :                      ))

  014a4	e59d3000	 ldr         r3, [sp]
  014a8	e3130d51	 tst         r3, #0x51, 26
  014ac	0a000007	 beq         |$LN6@DssProcess|

; 698  :     {
; 699  :          DEBUGMSG(ZONE_ERROR,(L"DSS pipeline underflow error.Intrstatus:%x\r\n",irqStatus));

  014b0	e59d1000	 ldr         r1, [sp]
  014b4	e59f01d0	 ldr         r0, [pc, #0x1D0]
  014b8	eb000000	 bl          NKDbgPrintfW
  014bc	e3a03001	 mov         r3, #1
  014c0	e58d302c	 str         r3, [sp, #0x2C]
  014c4	ea000001	 b           |$LN31@DssProcess|
  014c8	e3a03000	 mov         r3, #0
  014cc	e58d302c	 str         r3, [sp, #0x2C]
  014d0		 |$LN31@DssProcess|
  014d0		 |$LN6@DssProcess|

; 700  :     }
; 701  : 
; 702  :     //Vsync event has to be asserted when both LCD and TV have actually vsync'ed (if tv-out is enabled).
; 703  :     //There's 3 scenarios:
; 704  :     //1. LCD v-sync occurs before TV v-sync.
; 705  :     //2. TV-out v-sync occurs before LCD v-sync. 
; 706  :     //3. Both occurred
; 707  :     //For case 3 then the check below will signal the v-sync event
; 708  :     //For case 1, the status bit's are saved. The next interrupt 
; 709  :     //occuring due to tv-out (or lcd for case 2) will happen and the check below will signal the vsync event.
; 710  :     //
; 711  :     //If tv-out is disabled, since tvVysnc is always true, then only the state of lcdVsync matters.
; 712  : 
; 713  :     
; 714  :     lcdVsync = ((irqStatus & DISPC_IRQSTATUS_VSYNC) == DISPC_IRQSTATUS_VSYNC) ||
; 715  :                    ((m_lastVsyncIRQStatus & DISPC_IRQSTATUS_VSYNC) == DISPC_IRQSTATUS_VSYNC);

  014d0	e59d3000	 ldr         r3, [sp]
  014d4	e2033002	 and         r3, r3, #2
  014d8	e3530002	 cmp         r3, #2
  014dc	0a000009	 beq         |$LN32@DssProcess|
  014e0	e59d3044	 ldr         r3, [sp, #0x44]
  014e4	e2833c05	 add         r3, r3, #5, 24
  014e8	e2833038	 add         r3, r3, #0x38
  014ec	e5933000	 ldr         r3, [r3]
  014f0	e2033002	 and         r3, r3, #2
  014f4	e3530002	 cmp         r3, #2
  014f8	0a000002	 beq         |$LN32@DssProcess|
  014fc	e3a03000	 mov         r3, #0
  01500	e58d3030	 str         r3, [sp, #0x30]
  01504	ea000001	 b           |$LN33@DssProcess|
  01508		 |$LN32@DssProcess|
  01508	e3a03001	 mov         r3, #1
  0150c	e58d3030	 str         r3, [sp, #0x30]
  01510		 |$LN33@DssProcess|
  01510	e59d3030	 ldr         r3, [sp, #0x30]
  01514	e58d3010	 str         r3, [sp, #0x10]

; 716  :        
; 717  :     if(m_bTVEnable == TRUE)

  01518	e59d3044	 ldr         r3, [sp, #0x44]
  0151c	e2833b01	 add         r3, r3, #1, 22
  01520	e28330b4	 add         r3, r3, #0xB4
  01524	e5933000	 ldr         r3, [r3]
  01528	e3530001	 cmp         r3, #1
  0152c	1a00001c	 bne         |$LN5@DssProcess|

; 718  :     {
; 719  :        tvVsync = ((irqStatus & DISPC_IRQSTATUS_EVSYNC_EVEN) == DISPC_IRQSTATUS_EVSYNC_EVEN) ||
; 720  :                  ((irqStatus & DISPC_IRQSTATUS_EVSYNC_ODD) == DISPC_IRQSTATUS_EVSYNC_ODD) ||
; 721  :                  ((m_lastVsyncIRQStatus & DISPC_IRQSTATUS_EVSYNC_EVEN) == DISPC_IRQSTATUS_EVSYNC_EVEN) ||
; 722  :                  ((m_lastVsyncIRQStatus & DISPC_IRQSTATUS_EVSYNC_ODD) == DISPC_IRQSTATUS_EVSYNC_ODD);

  01530	e59d3000	 ldr         r3, [sp]
  01534	e2033004	 and         r3, r3, #4
  01538	e3530004	 cmp         r3, #4
  0153c	0a000014	 beq         |$LN34@DssProcess|
  01540	e59d3000	 ldr         r3, [sp]
  01544	e2033008	 and         r3, r3, #8
  01548	e3530008	 cmp         r3, #8
  0154c	0a000010	 beq         |$LN34@DssProcess|
  01550	e59d3044	 ldr         r3, [sp, #0x44]
  01554	e2833c05	 add         r3, r3, #5, 24
  01558	e2833038	 add         r3, r3, #0x38
  0155c	e5933000	 ldr         r3, [r3]
  01560	e2033004	 and         r3, r3, #4
  01564	e3530004	 cmp         r3, #4
  01568	0a000009	 beq         |$LN34@DssProcess|
  0156c	e59d3044	 ldr         r3, [sp, #0x44]
  01570	e2833c05	 add         r3, r3, #5, 24
  01574	e2833038	 add         r3, r3, #0x38
  01578	e5933000	 ldr         r3, [r3]
  0157c	e2033008	 and         r3, r3, #8
  01580	e3530008	 cmp         r3, #8
  01584	0a000002	 beq         |$LN34@DssProcess|
  01588	e3a03000	 mov         r3, #0
  0158c	e58d3034	 str         r3, [sp, #0x34]
  01590	ea000001	 b           |$LN35@DssProcess|
  01594		 |$LN34@DssProcess|
  01594	e3a03001	 mov         r3, #1
  01598	e58d3034	 str         r3, [sp, #0x34]
  0159c		 |$LN35@DssProcess|
  0159c	e59d3034	 ldr         r3, [sp, #0x34]
  015a0	e58d3008	 str         r3, [sp, #8]
  015a4		 |$LN5@DssProcess|

; 723  :          
; 724  :     }
; 725  : 
; 726  :     if(lcdVsync && tvVsync) 

  015a4	e59d3010	 ldr         r3, [sp, #0x10]
  015a8	e3530000	 cmp         r3, #0
  015ac	0a000012	 beq         |$LN4@DssProcess|
  015b0	e59d3008	 ldr         r3, [sp, #8]
  015b4	e3530000	 cmp         r3, #0
  015b8	0a00000f	 beq         |$LN4@DssProcess|

; 727  :     {        
; 728  :         SetEvent(m_hVsyncEvent);

  015bc	e59d3044	 ldr         r3, [sp, #0x44]
  015c0	e2833b01	 add         r3, r3, #1, 22
  015c4	e28330f4	 add         r3, r3, #0xF4
  015c8	e5930000	 ldr         r0, [r3]
  015cc	eb000000	 bl          SetEvent

; 729  :         SetEvent(m_hVsyncEventSGX);    

  015d0	e59d3044	 ldr         r3, [sp, #0x44]
  015d4	e2833b01	 add         r3, r3, #1, 22
  015d8	e28330f8	 add         r3, r3, #0xF8
  015dc	e5930000	 ldr         r0, [r3]
  015e0	eb000000	 bl          SetEvent

; 730  :         m_lastVsyncIRQStatus = 0;

  015e4	e59d3044	 ldr         r3, [sp, #0x44]
  015e8	e2833c05	 add         r3, r3, #5, 24
  015ec	e2832038	 add         r2, r3, #0x38
  015f0	e3a03000	 mov         r3, #0
  015f4	e5823000	 str         r3, [r2]

; 731  :     }
; 732  :     else

  015f8	ea000005	 b           |$LN3@DssProcess|
  015fc		 |$LN4@DssProcess|

; 733  :     {
; 734  :        //Save the status of the Vsync IRQ's if we didn't signal the Vsync event.         
; 735  :        // Note that if the interrupt status is not cleared we will be right back...        
; 736  :        m_lastVsyncIRQStatus = irqStatus & (DISPC_IRQENABLE_EVSYNC_EVEN|DISPC_IRQSTATUS_EVSYNC_ODD|DISPC_IRQSTATUS_VSYNC);

  015fc	e59d3000	 ldr         r3, [sp]
  01600	e203200e	 and         r2, r3, #0xE
  01604	e59d3044	 ldr         r3, [sp, #0x44]
  01608	e2833c05	 add         r3, r3, #5, 24
  0160c	e2833038	 add         r3, r3, #0x38
  01610	e5832000	 str         r2, [r3]
  01614		 |$LN3@DssProcess|

; 737  :     }
; 738  :     
; 739  : 
; 740  :     if(irqStatus & DISPC_IRQSTATUS_PROGRAMMEDLINENUMBER)

  01614	e59d3000	 ldr         r3, [sp]
  01618	e3130020	 tst         r3, #0x20
  0161c	0a000004	 beq         |$LN2@DssProcess|

; 741  :     {
; 742  :         SetEvent(m_hScanLineEvent);

  01620	e59d3044	 ldr         r3, [sp, #0x44]
  01624	e2833c05	 add         r3, r3, #5, 24
  01628	e2833004	 add         r3, r3, #4
  0162c	e5930000	 ldr         r0, [r3]
  01630	eb000000	 bl          SetEvent
  01634		 |$LN2@DssProcess|

; 743  :     }
; 744  : 
; 745  :     if (irqStatus & DISPC_IRQSTATUS_OCPERROR)

  01634	e59d3000	 ldr         r3, [sp]
  01638	e3130c02	 tst         r3, #2, 24
  0163c	0a000006	 beq         |$LN1@DssProcess|

; 746  :     {
; 747  :         DEBUGMSG(ZONE_ERROR,(L"OCP_ERROR FATAL!!\r\n"));

  01640	e59f0040	 ldr         r0, [pc, #0x40]
  01644	eb000000	 bl          NKDbgPrintfW
  01648	e3a03001	 mov         r3, #1
  0164c	e58d3038	 str         r3, [sp, #0x38]
  01650	ea000001	 b           |$LN37@DssProcess|
  01654	e3a03000	 mov         r3, #0
  01658	e58d3038	 str         r3, [sp, #0x38]
  0165c		 |$LN37@DssProcess|
  0165c		 |$LN1@DssProcess|

; 748  :     }
; 749  : 
; 750  :     // Clear all interrupts
; 751  :     // Note that SETREG32 does read, OR of argument and write, the IRQSTATUS is write '1' to clear,
; 752  :     // this will clear all interrupt bits, not just the ones in the argument.
; 753  :     OUTREG32( &m_pDispRegs->DISPC_IRQSTATUS, irqStatus);

  0165c	e59d3044	 ldr         r3, [sp, #0x44]
  01660	e2833008	 add         r3, r3, #8
  01664	e5933000	 ldr         r3, [r3]
  01668	e2832018	 add         r2, r3, #0x18
  0166c	e59d3000	 ldr         r3, [sp]
  01670	e5823000	 str         r3, [r2]
  01674		 |$LN7@DssProcess|
  01674		 |$LN20@DssProcess|
  01674		 |$cleanUp$38001|

; 754  : 
; 755  : cleanUp:
; 756  : 
; 757  :     ReleaseRegs();

  01674	e59d0044	 ldr         r0, [sp, #0x44]
  01678	eb000000	 bl          |?ReleaseRegs@OMAPDisplayController@@IAAHXZ|

; 758  : }

  0167c	e28dd03c	 add         sp, sp, #0x3C
  01680	e89d6000	 ldmia       sp, {sp, lr}
  01684	e12fff1e	 bx          lr
  01688		 |$LN41@DssProcess|
  01688		 |$LN42@DssProcess|
  01688	00000000	 DCD         |??_C@_1CI@OCNFJAJN@?$AAO?$AAC?$AAP?$AA_?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AAF?$AAA?$AAT?$AAA?$AAL?$AA?$CB?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@|
  0168c		 |$LN43@DssProcess|
  0168c	00000000	 DCD         |??_C@_1FK@CAFLKNBH@?$AAD?$AAS?$AAS?$AA?5?$AAp?$AAi?$AAp?$AAe?$AAl?$AAi?$AAn?$AAe?$AA?5?$AAu?$AAn?$AAd?$AAe?$AAr?$AAf?$AAl?$AAo?$AAw?$AA?5?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?4?$AAI?$AAn?$AAt@|
  01690		 |$LN44@DssProcess|
  01690	00000000	 DCD         |?g_rgPipelineMapping@@3PAUOMAPPipelineConfig@@A|
  01694		 |$LN45@DssProcess|
  01694	00000000	 DCD         |?g_dwDestinationRefCnt@@3PAKA|
  01698		 |$LN46@DssProcess|
  01698	00000000	 DCD         |??_C@_1CK@NNPPGLKC@?$AAS?$AAY?$AAN?$AAC?$AAL?$AAO?$AAS?$AAT?$AA?5?$AAD?$AAS?$AAS?$AAI?$AAR?$AAQ?$AA?3?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  0169c		 |$LN47@DssProcess|
  0169c	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  016a0		 |$LN48@DssProcess|
  016a0	00000000	 DCD         |??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@|
  016a4		 |$LN49@DssProcess|
  016a4	00000000	 DCD         |??_C@_1KC@HIABDGPO@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  016a8		 |$LN50@DssProcess|
  016a8	00000000	 DCD         |??_C@_1FG@PEEGKNJM@?$AAA?$AAc?$AAc?$AAe?$AAs?$AAs?$AAR?$AAe?$AAg?$AAs?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAD?$AAs?$AAs?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAI@|
  016ac		 |$M40382|

			 ENDP  ; |?DssProcessInterrupt@OMAPDisplayController@@QAAXXZ|, OMAPDisplayController::DssProcessInterrupt

	EXPORT	|?SetSurfaceMgr@OMAPDisplayController@@QAAHPAVOMAPSurfaceManager@@@Z| ; OMAPDisplayController::SetSurfaceMgr

  00048			 AREA	 |.pdata|, PDATA
|$T40400| DCD	|$LN5@SetSurface|
	DCD	0x40000e04
; Function compile flags: /Odtp

  016ac			 AREA	 |.text|, CODE, ARM

  016ac		 |?SetSurfaceMgr@OMAPDisplayController@@QAAHPAVOMAPSurfaceManager@@@Z| PROC ; OMAPDisplayController::SetSurfaceMgr

; 765  : {

  016ac		 |$LN5@SetSurface|
  016ac	e1a0c00d	 mov         r12, sp
  016b0	e92d0003	 stmdb       sp!, {r0, r1}
  016b4	e92d5000	 stmdb       sp!, {r12, lr}
  016b8	e24dd004	 sub         sp, sp, #4
  016bc		 |$M40397|

; 766  :     //  Reference the given surface mamager
; 767  :     m_pSurfaceMgr = pSurfMgr;

  016bc	e59d300c	 ldr         r3, [sp, #0xC]
  016c0	e2832e4e	 add         r2, r3, #0x4E, 28
  016c4	e59d3010	 ldr         r3, [sp, #0x10]
  016c8	e5823000	 str         r3, [r2]

; 768  :     
; 769  :     //  Return result
; 770  :     return TRUE;

  016cc	e3a03001	 mov         r3, #1
  016d0	e58d3000	 str         r3, [sp]

; 771  : }

  016d4	e59d0000	 ldr         r0, [sp]
  016d8	e28dd004	 add         sp, sp, #4
  016dc	e89d6000	 ldmia       sp, {sp, lr}
  016e0	e12fff1e	 bx          lr
  016e4		 |$M40398|

			 ENDP  ; |?SetSurfaceMgr@OMAPDisplayController@@QAAHPAVOMAPSurfaceManager@@@Z|, OMAPDisplayController::SetSurfaceMgr

	EXPORT	|?GetLCDWidth@OMAPDisplayController@@QAAKXZ| ; OMAPDisplayController::GetLCDWidth
	EXPORT	|?GetLCDHeight@OMAPDisplayController@@QAAKXZ| ; OMAPDisplayController::GetLCDHeight
	EXPORT	|?PixelFormat@OMAPSurface@@QAA?AW4OMAP_DSS_PIXELFORMAT@@XZ| ; OMAPSurface::PixelFormat
	EXPORT	|?SetPipelineAttribs@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@W4OMAP_DSS_DESTINATION@@PAVOMAPSurface@@KK@Z| ; OMAPDisplayController::SetPipelineAttribs

  00050			 AREA	 |.pdata|, PDATA
|$T40420| DCD	|$LN40@SetPipelin|
	DCD	0x40037204
; Function compile flags: /Odtp

  016e4			 AREA	 |.text|, CODE, ARM

  016e4		 |?SetPipelineAttribs@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@W4OMAP_DSS_DESTINATION@@PAVOMAPSurface@@KK@Z| PROC ; OMAPDisplayController::SetPipelineAttribs

; 782  : {

  016e4		 |$LN40@SetPipelin|
  016e4	e1a0c00d	 mov         r12, sp
  016e8	e92d000f	 stmdb       sp!, {r0 - r3}
  016ec	e92d5010	 stmdb       sp!, {r4, r12, lr}
  016f0	e24dd0d4	 sub         sp, sp, #0xD4
  016f4		 |$M40417|

; 783  :     BOOL    bResult = FALSE;

  016f4	e3a03000	 mov         r3, #0
  016f8	e58d300c	 str         r3, [sp, #0xC]

; 784  :     OMAP_DSS_ROTATION   eRotation;
; 785  :     BOOL                bMirror;
; 786  :     DWORD               dwVidRotation = 0;

  016fc	e3a03000	 mov         r3, #0
  01700	e58d3014	 str         r3, [sp, #0x14]

; 787  :     DWORD               dwX, dwY;
; 788  : 
; 789  : 
; 790  :     //  Access the regs
; 791  :     if( AccessRegs() == FALSE )

  01704	e59d00e0	 ldr         r0, [sp, #0xE0]
  01708	eb000000	 bl          |?AccessRegs@OMAPDisplayController@@IAAHXZ|
  0170c	e58d001c	 str         r0, [sp, #0x1C]
  01710	e59d301c	 ldr         r3, [sp, #0x1C]
  01714	e3530000	 cmp         r3, #0
  01718	1a000001	 bne         |$LN21@SetPipelin|
  0171c	ea000355	 b           |$LN20@SetPipelin|

; 792  :         goto cleanUp;

  01720	ea000354	 b           |$cleanUp$38070|
  01724		 |$LN21@SetPipelin|

; 793  : 
; 794  : 
; 795  :     //  Get rotation and mirror settings for pipeline output
; 796  :     eRotation = g_rgPipelineMapping[ePipeline].eRotation;

  01724	e59d10e4	 ldr         r1, [sp, #0xE4]
  01728	e3a03020	 mov         r3, #0x20
  0172c	e0020391	 mul         r2, r1, r3
  01730	e59f3d64	 ldr         r3, [pc, #0xD64]
  01734	e0833002	 add         r3, r3, r2
  01738	e283300c	 add         r3, r3, #0xC
  0173c	e5933000	 ldr         r3, [r3]
  01740	e58d3000	 str         r3, [sp]

; 797  :     bMirror   = g_rgPipelineMapping[ePipeline].bMirror;

  01744	e59d10e4	 ldr         r1, [sp, #0xE4]
  01748	e3a03020	 mov         r3, #0x20
  0174c	e0020391	 mul         r2, r1, r3
  01750	e59f3d44	 ldr         r3, [pc, #0xD44]
  01754	e0833002	 add         r3, r3, r2
  01758	e2833010	 add         r3, r3, #0x10
  0175c	e5933000	 ldr         r3, [r3]
  01760	e58d3008	 str         r3, [sp, #8]

; 798  : 
; 799  : 
; 800  :     //  Set rotation attributes for video pipelines if pixel format is YUV
; 801  :     if( pSurface->PixelFormat() == OMAP_DSS_PIXELFORMAT_YUV2 ||    
; 802  :         pSurface->PixelFormat() == OMAP_DSS_PIXELFORMAT_UYVY )  

  01764	e59d00ec	 ldr         r0, [sp, #0xEC]
  01768	eb000000	 bl          |?PixelFormat@OMAPSurface@@QAA?AW4OMAP_DSS_PIXELFORMAT@@XZ|
  0176c	e58d0020	 str         r0, [sp, #0x20]
  01770	e59d3020	 ldr         r3, [sp, #0x20]
  01774	e353000a	 cmp         r3, #0xA
  01778	0a000005	 beq         |$LN18@SetPipelin|
  0177c	e59d00ec	 ldr         r0, [sp, #0xEC]
  01780	eb000000	 bl          |?PixelFormat@OMAPSurface@@QAA?AW4OMAP_DSS_PIXELFORMAT@@XZ|
  01784	e58d0024	 str         r0, [sp, #0x24]
  01788	e59d3024	 ldr         r3, [sp, #0x24]
  0178c	e353000b	 cmp         r3, #0xB
  01790	1a00002f	 bne         |$LN19@SetPipelin|
  01794		 |$LN18@SetPipelin|

; 803  :     {
; 804  :         //  Depending on rotation and mirror settings, change the VID rotation attributes
; 805  :         switch( eRotation )

  01794	e59d3000	 ldr         r3, [sp]
  01798	e58d3028	 str         r3, [sp, #0x28]
  0179c	e59d3028	 ldr         r3, [sp, #0x28]
  017a0	e35300b4	 cmp         r3, #0xB4
  017a4	ca000009	 bgt         |$LN28@SetPipelin|
  017a8	e59d3028	 ldr         r3, [sp, #0x28]
  017ac	e35300b4	 cmp         r3, #0xB4
  017b0	0a00001a	 beq         |$LN13@SetPipelin|
  017b4	e59d3028	 ldr         r3, [sp, #0x28]
  017b8	e3530000	 cmp         r3, #0
  017bc	0a000009	 beq         |$LN15@SetPipelin|
  017c0	e59d3028	 ldr         r3, [sp, #0x28]
  017c4	e353005a	 cmp         r3, #0x5A
  017c8	0a000011	 beq         |$LN14@SetPipelin|
  017cc	ea000020	 b           |$LN16@SetPipelin|
  017d0		 |$LN28@SetPipelin|
  017d0	e59d2028	 ldr         r2, [sp, #0x28]
  017d4	e3a03c01	 mov         r3, #1, 24
  017d8	e383300e	 orr         r3, r3, #0xE
  017dc	e1520003	 cmp         r2, r3
  017e0	0a000019	 beq         |$LN12@SetPipelin|
  017e4	ea00001a	 b           |$LN16@SetPipelin|
  017e8		 |$LN15@SetPipelin|

; 806  :         {
; 807  :             case OMAP_DSS_ROTATION_0:
; 808  :                 //  Settings for rotation angle 0
; 809  :                 dwVidRotation = (bMirror) ? DISPC_VID_ATTR_VIDROTATION_180 : DISPC_VID_ATTR_VIDROTATION_0;

  017e8	e59d3008	 ldr         r3, [sp, #8]
  017ec	e3530000	 cmp         r3, #0
  017f0	0a000002	 beq         |$LN24@SetPipelin|
  017f4	e3a03a02	 mov         r3, #2, 20
  017f8	e58d302c	 str         r3, [sp, #0x2C]
  017fc	ea000001	 b           |$LN25@SetPipelin|
  01800		 |$LN24@SetPipelin|
  01800	e3a03000	 mov         r3, #0
  01804	e58d302c	 str         r3, [sp, #0x2C]
  01808		 |$LN25@SetPipelin|
  01808	e59d302c	 ldr         r3, [sp, #0x2C]
  0180c	e58d3014	 str         r3, [sp, #0x14]

; 810  :                 break;

  01810	ea00000f	 b           |$LN16@SetPipelin|
  01814		 |$LN14@SetPipelin|

; 811  : 
; 812  :             case OMAP_DSS_ROTATION_90:
; 813  :                 //  Settings for rotation angle 90 (270 for DSS setting)
; 814  :                 dwVidRotation = DISPC_VID_ATTR_VIDROTATION_270 | DISPC_VID_ATTR_VIDROWREPEATENABLE;

  01814	e3a03a43	 mov         r3, #0x43, 20
  01818	e58d3014	 str         r3, [sp, #0x14]

; 815  :                 //dwVidRotation |= DISPC_VID_ATTR_VIDDMAOPTIMIZATION;
; 816  :                 break;

  0181c	ea00000c	 b           |$LN16@SetPipelin|
  01820		 |$LN13@SetPipelin|

; 817  : 
; 818  :             case OMAP_DSS_ROTATION_180:
; 819  :                 //  Settings for rotation angle 180
; 820  :                 dwVidRotation = (bMirror) ? DISPC_VID_ATTR_VIDROTATION_0 : DISPC_VID_ATTR_VIDROTATION_180;

  01820	e59d3008	 ldr         r3, [sp, #8]
  01824	e3530000	 cmp         r3, #0
  01828	0a000002	 beq         |$LN26@SetPipelin|
  0182c	e3a03000	 mov         r3, #0
  01830	e58d3030	 str         r3, [sp, #0x30]
  01834	ea000001	 b           |$LN27@SetPipelin|
  01838		 |$LN26@SetPipelin|
  01838	e3a03a02	 mov         r3, #2, 20
  0183c	e58d3030	 str         r3, [sp, #0x30]
  01840		 |$LN27@SetPipelin|
  01840	e59d3030	 ldr         r3, [sp, #0x30]
  01844	e58d3014	 str         r3, [sp, #0x14]

; 821  :                 break;

  01848	ea000001	 b           |$LN16@SetPipelin|
  0184c		 |$LN12@SetPipelin|

; 822  : 
; 823  :             case OMAP_DSS_ROTATION_270:
; 824  :                 //  Settings for rotation angle 270 (90 for DSS setting)
; 825  :                 dwVidRotation = DISPC_VID_ATTR_VIDROTATION_90 | DISPC_VID_ATTR_VIDROWREPEATENABLE;

  0184c	e3a03a41	 mov         r3, #0x41, 20
  01850	e58d3014	 str         r3, [sp, #0x14]
  01854		 |$LN16@SetPipelin|
  01854		 |$LN19@SetPipelin|

; 826  :                 //dwVidRotation |= DISPC_VID_ATTR_VIDDMAOPTIMIZATION;
; 827  :                 break;
; 828  :         }
; 829  :     }
; 830  : 
; 831  : 
; 832  :     //  Compute new origin and swap width/height based on GFX pipeline rotation angle
; 833  :     switch( g_rgPipelineMapping[OMAP_DSS_PIPELINE_GFX].eRotation )

  01854	e59f3c40	 ldr         r3, [pc, #0xC40]
  01858	e593300c	 ldr         r3, [r3, #0xC]
  0185c	e58d3034	 str         r3, [sp, #0x34]
  01860	e59d3034	 ldr         r3, [sp, #0x34]
  01864	e35300b4	 cmp         r3, #0xB4
  01868	ca000009	 bgt         |$LN31@SetPipelin|
  0186c	e59d3034	 ldr         r3, [sp, #0x34]
  01870	e35300b4	 cmp         r3, #0xB4
  01874	0a000026	 beq         |$LN7@SetPipelin|
  01878	e59d3034	 ldr         r3, [sp, #0x34]
  0187c	e3530000	 cmp         r3, #0
  01880	0a000009	 beq         |$LN9@SetPipelin|
  01884	e59d3034	 ldr         r3, [sp, #0x34]
  01888	e353005a	 cmp         r3, #0x5A
  0188c	0a00000b	 beq         |$LN8@SetPipelin|
  01890	ea000059	 b           |$LN5@SetPipelin|
  01894		 |$LN31@SetPipelin|
  01894	e59d2034	 ldr         r2, [sp, #0x34]
  01898	e3a03c01	 mov         r3, #1, 24
  0189c	e383300e	 orr         r3, r3, #0xE
  018a0	e1520003	 cmp         r2, r3
  018a4	0a00003f	 beq         |$LN6@SetPipelin|
  018a8	ea000053	 b           |$LN5@SetPipelin|
  018ac		 |$LN9@SetPipelin|

; 834  :     {
; 835  :         case OMAP_DSS_ROTATION_0:
; 836  :             dwX = dwPosX;

  018ac	e59d30f0	 ldr         r3, [sp, #0xF0]
  018b0	e58d3004	 str         r3, [sp, #4]

; 837  :             dwY = dwPosY;

  018b4	e59d30f4	 ldr         r3, [sp, #0xF4]
  018b8	e58d3010	 str         r3, [sp, #0x10]

; 838  :             break;

  018bc	ea00005c	 b           |$LN10@SetPipelin|
  018c0		 |$LN8@SetPipelin|

; 839  :             
; 840  :         case OMAP_DSS_ROTATION_90:
; 841  :             dwX = dwPosY;

  018c0	e59d30f4	 ldr         r3, [sp, #0xF4]
  018c4	e58d3004	 str         r3, [sp, #4]

; 842  :             dwY = GetLCDHeight() - pSurface->Width() - dwPosX;

  018c8	e59d00e0	 ldr         r0, [sp, #0xE0]
  018cc	eb000000	 bl          |?GetLCDHeight@OMAPDisplayController@@QAAKXZ|
  018d0	e58d0038	 str         r0, [sp, #0x38]
  018d4	e3a01000	 mov         r1, #0
  018d8	e59d30ec	 ldr         r3, [sp, #0xEC]
  018dc	e5933000	 ldr         r3, [r3]
  018e0	e2833008	 add         r3, r3, #8
  018e4	e59d00ec	 ldr         r0, [sp, #0xEC]
  018e8	e5933000	 ldr         r3, [r3]
  018ec	e1a0e00f	 mov         lr, pc
  018f0	e12fff13	 bx          r3
  018f4	e58d003c	 str         r0, [sp, #0x3C]
  018f8	e59d2038	 ldr         r2, [sp, #0x38]
  018fc	e59d303c	 ldr         r3, [sp, #0x3C]
  01900	e0422003	 sub         r2, r2, r3
  01904	e59d30f0	 ldr         r3, [sp, #0xF0]
  01908	e0423003	 sub         r3, r2, r3
  0190c	e58d3010	 str         r3, [sp, #0x10]

; 843  :             break;

  01910	ea000047	 b           |$LN10@SetPipelin|
  01914		 |$LN7@SetPipelin|

; 844  :             
; 845  :         case OMAP_DSS_ROTATION_180:
; 846  :             dwX = GetLCDWidth() - pSurface->Width() - dwPosX;

  01914	e59d00e0	 ldr         r0, [sp, #0xE0]
  01918	eb000000	 bl          |?GetLCDWidth@OMAPDisplayController@@QAAKXZ|
  0191c	e58d0040	 str         r0, [sp, #0x40]
  01920	e3a01000	 mov         r1, #0
  01924	e59d30ec	 ldr         r3, [sp, #0xEC]
  01928	e5933000	 ldr         r3, [r3]
  0192c	e2833008	 add         r3, r3, #8
  01930	e59d00ec	 ldr         r0, [sp, #0xEC]
  01934	e5933000	 ldr         r3, [r3]
  01938	e1a0e00f	 mov         lr, pc
  0193c	e12fff13	 bx          r3
  01940	e58d0044	 str         r0, [sp, #0x44]
  01944	e59d2040	 ldr         r2, [sp, #0x40]
  01948	e59d3044	 ldr         r3, [sp, #0x44]
  0194c	e0422003	 sub         r2, r2, r3
  01950	e59d30f0	 ldr         r3, [sp, #0xF0]
  01954	e0423003	 sub         r3, r2, r3
  01958	e58d3004	 str         r3, [sp, #4]

; 847  :             dwY = GetLCDHeight() - pSurface->Height() - dwPosY;

  0195c	e59d00e0	 ldr         r0, [sp, #0xE0]
  01960	eb000000	 bl          |?GetLCDHeight@OMAPDisplayController@@QAAKXZ|
  01964	e58d0048	 str         r0, [sp, #0x48]
  01968	e3a01000	 mov         r1, #0
  0196c	e59d30ec	 ldr         r3, [sp, #0xEC]
  01970	e5933000	 ldr         r3, [r3]
  01974	e283300c	 add         r3, r3, #0xC
  01978	e59d00ec	 ldr         r0, [sp, #0xEC]
  0197c	e5933000	 ldr         r3, [r3]
  01980	e1a0e00f	 mov         lr, pc
  01984	e12fff13	 bx          r3
  01988	e58d004c	 str         r0, [sp, #0x4C]
  0198c	e59d2048	 ldr         r2, [sp, #0x48]
  01990	e59d304c	 ldr         r3, [sp, #0x4C]
  01994	e0422003	 sub         r2, r2, r3
  01998	e59d30f4	 ldr         r3, [sp, #0xF4]
  0199c	e0423003	 sub         r3, r2, r3
  019a0	e58d3010	 str         r3, [sp, #0x10]

; 848  :             break;

  019a4	ea000022	 b           |$LN10@SetPipelin|
  019a8		 |$LN6@SetPipelin|

; 849  :             
; 850  :         case OMAP_DSS_ROTATION_270:
; 851  :             dwX = GetLCDWidth() - pSurface->Height() - dwPosY;

  019a8	e59d00e0	 ldr         r0, [sp, #0xE0]
  019ac	eb000000	 bl          |?GetLCDWidth@OMAPDisplayController@@QAAKXZ|
  019b0	e58d0050	 str         r0, [sp, #0x50]
  019b4	e3a01000	 mov         r1, #0
  019b8	e59d30ec	 ldr         r3, [sp, #0xEC]
  019bc	e5933000	 ldr         r3, [r3]
  019c0	e283300c	 add         r3, r3, #0xC
  019c4	e59d00ec	 ldr         r0, [sp, #0xEC]
  019c8	e5933000	 ldr         r3, [r3]
  019cc	e1a0e00f	 mov         lr, pc
  019d0	e12fff13	 bx          r3
  019d4	e58d0054	 str         r0, [sp, #0x54]
  019d8	e59d2050	 ldr         r2, [sp, #0x50]
  019dc	e59d3054	 ldr         r3, [sp, #0x54]
  019e0	e0422003	 sub         r2, r2, r3
  019e4	e59d30f4	 ldr         r3, [sp, #0xF4]
  019e8	e0423003	 sub         r3, r2, r3
  019ec	e58d3004	 str         r3, [sp, #4]

; 852  :             dwY = dwPosX;

  019f0	e59d30f0	 ldr         r3, [sp, #0xF0]
  019f4	e58d3010	 str         r3, [sp, #0x10]

; 853  :             break;

  019f8	ea00000d	 b           |$LN10@SetPipelin|
  019fc		 |$LN5@SetPipelin|

; 854  :             
; 855  :         default:
; 856  :             ASSERT(0);

  019fc	ea000002	 b           |$LN29@SetPipelin|
  01a00	e3a03001	 mov         r3, #1
  01a04	e58d3058	 str         r3, [sp, #0x58]
  01a08	ea000007	 b           |$LN30@SetPipelin|
  01a0c		 |$LN29@SetPipelin|
  01a0c	e3a03fd6	 mov         r3, #0xD6, 30
  01a10	e59f2a90	 ldr         r2, [pc, #0xA90]
  01a14	e59f1a88	 ldr         r1, [pc, #0xA88]
  01a18	e59f0a80	 ldr         r0, [pc, #0xA80]
  01a1c	eb000000	 bl          NKDbgPrintfW
  01a20	e6000010	 __debugbreak_ce
  01a24	e3a03000	 mov         r3, #0
  01a28	e58d3058	 str         r3, [sp, #0x58]
  01a2c		 |$LN30@SetPipelin|

; 857  :             goto cleanUp;

  01a2c	ea000291	 b           |$LN4@SetPipelin|
  01a30	ea000290	 b           |$cleanUp$38070|
  01a34		 |$LN10@SetPipelin|

; 858  :     }
; 859  : 
; 860  : 
; 861  :     //  Configure the attributes of the selected pipeline
; 862  : 
; 863  :     
; 864  :     //  GFX pipeline
; 865  :     if( ePipeline == OMAP_DSS_PIPELINE_GFX )

  01a34	e59d30e4	 ldr         r3, [sp, #0xE4]
  01a38	e3530000	 cmp         r3, #0
  01a3c	1a00008a	 bne         |$LN3@SetPipelin|

; 866  :     {
; 867  :         //  Set attributes of pipeline
; 868  :         OUTREG32( &m_pDispRegs->DISPC_GFX_ATTRIBUTES,
; 869  :                     ((eDestination == OMAP_DSS_DESTINATION_TVOUT) ? DISPC_GFX_ATTR_GFXCHANNELOUT : 0) |
; 870  :                     DISPC_GFX_ATTR_GFXBURSTSIZE_16x32 |
; 871  :                     DISPC_GFX_ATTR_GFXREPLICATIONENABLE |
; 872  :                     DISPC_GFX_ATTR_GFXFORMAT(pSurface->PixelFormat())
; 873  :                     );

  01a40	e59d30e8	 ldr         r3, [sp, #0xE8]
  01a44	e3530001	 cmp         r3, #1
  01a48	1a000002	 bne         |$LN32@SetPipelin|
  01a4c	e3a03c01	 mov         r3, #1, 24
  01a50	e58d305c	 str         r3, [sp, #0x5C]
  01a54	ea000001	 b           |$LN33@SetPipelin|
  01a58		 |$LN32@SetPipelin|
  01a58	e3a03000	 mov         r3, #0
  01a5c	e58d305c	 str         r3, [sp, #0x5C]
  01a60		 |$LN33@SetPipelin|
  01a60	e59d00ec	 ldr         r0, [sp, #0xEC]
  01a64	eb000000	 bl          |?PixelFormat@OMAPSurface@@QAA?AW4OMAP_DSS_PIXELFORMAT@@XZ|
  01a68	e58d0060	 str         r0, [sp, #0x60]
  01a6c	e59d305c	 ldr         r3, [sp, #0x5C]
  01a70	e3833080	 orr         r3, r3, #0x80
  01a74	e3832020	 orr         r2, r3, #0x20
  01a78	e59d3060	 ldr         r3, [sp, #0x60]
  01a7c	e1a03083	 mov         r3, r3, lsl #1
  01a80	e1822003	 orr         r2, r2, r3
  01a84	e59d30e0	 ldr         r3, [sp, #0xE0]
  01a88	e2833008	 add         r3, r3, #8
  01a8c	e5933000	 ldr         r3, [r3]
  01a90	e28330a0	 add         r3, r3, #0xA0
  01a94	e5832000	 str         r2, [r3]

; 874  : 
; 875  :         //  Size of window
; 876  :         OUTREG32( &m_pDispRegs->DISPC_GFX_SIZE,
; 877  :                     DISPC_GFX_SIZE_GFXSIZEX(pSurface->Width(eRotation)) |
; 878  :                     DISPC_GFX_SIZE_GFXSIZEY(pSurface->Height(eRotation))
; 879  :                     );

  01a98	e59d1000	 ldr         r1, [sp]
  01a9c	e59d30ec	 ldr         r3, [sp, #0xEC]
  01aa0	e5933000	 ldr         r3, [r3]
  01aa4	e2833008	 add         r3, r3, #8
  01aa8	e59d00ec	 ldr         r0, [sp, #0xEC]
  01aac	e5933000	 ldr         r3, [r3]
  01ab0	e1a0e00f	 mov         lr, pc
  01ab4	e12fff13	 bx          r3
  01ab8	e58d0064	 str         r0, [sp, #0x64]
  01abc	e59d1000	 ldr         r1, [sp]
  01ac0	e59d30ec	 ldr         r3, [sp, #0xEC]
  01ac4	e5933000	 ldr         r3, [r3]
  01ac8	e283300c	 add         r3, r3, #0xC
  01acc	e59d00ec	 ldr         r0, [sp, #0xEC]
  01ad0	e5933000	 ldr         r3, [r3]
  01ad4	e1a0e00f	 mov         lr, pc
  01ad8	e12fff13	 bx          r3
  01adc	e58d0068	 str         r0, [sp, #0x68]
  01ae0	e59d3064	 ldr         r3, [sp, #0x64]
  01ae4	e2432001	 sub         r2, r3, #1
  01ae8	e59d3068	 ldr         r3, [sp, #0x68]
  01aec	e2433001	 sub         r3, r3, #1
  01af0	e1a03803	 mov         r3, r3, lsl #16
  01af4	e1822003	 orr         r2, r2, r3
  01af8	e59d30e0	 ldr         r3, [sp, #0xE0]
  01afc	e2833008	 add         r3, r3, #8
  01b00	e5933000	 ldr         r3, [r3]
  01b04	e283308c	 add         r3, r3, #0x8C
  01b08	e5832000	 str         r2, [r3]

; 880  : 
; 881  :         //  Position of window
; 882  :         OUTREG32( &m_pDispRegs->DISPC_GFX_POSITION,
; 883  :                     DISPC_GFX_POS_GFXPOSX(dwX) |
; 884  :                     DISPC_GFX_POS_GFXPOSY(dwY)
; 885  :                     );

  01b0c	e59d3010	 ldr         r3, [sp, #0x10]
  01b10	e1a02803	 mov         r2, r3, lsl #16
  01b14	e59d3004	 ldr         r3, [sp, #4]
  01b18	e1832002	 orr         r2, r3, r2
  01b1c	e59d30e0	 ldr         r3, [sp, #0xE0]
  01b20	e2833008	 add         r3, r3, #8
  01b24	e5933000	 ldr         r3, [r3]
  01b28	e2833088	 add         r3, r3, #0x88
  01b2c	e5832000	 str         r2, [r3]

; 886  :                     
; 887  :         //  Pipeline FIFO and DMA settings
; 888  :         OUTREG32( &m_pDispRegs->DISPC_GFX_FIFO_THRESHOLD,
; 889  :                     DISPC_GFX_FIFO_THRESHOLD_LOW(FIFO_LOWTHRESHOLD_NORMAL(FIFO_BURSTSIZE_16x32)) |
; 890  :                     DISPC_GFX_FIFO_THRESHOLD_HIGH(FIFO_HIGHTHRESHOLD_NORMAL)
; 891  :                     );

  01b30	e59d30e0	 ldr         r3, [sp, #0xE0]
  01b34	e2833008	 add         r3, r3, #8
  01b38	e5933000	 ldr         r3, [r3]
  01b3c	e28320a4	 add         r2, r3, #0xA4
  01b40	e3e0333f	 mvn         r3, #0x3F, 6
  01b44	e2233cfe	 eor         r3, r3, #0xFE, 24
  01b48	e5823000	 str         r3, [r2]

; 892  : 
; 893  :         OUTREG32( &m_pDispRegs->DISPC_GFX_PIXEL_INC, pSurface->PixelIncr(eRotation, bMirror) );

  01b4c	e59d2008	 ldr         r2, [sp, #8]
  01b50	e59d1000	 ldr         r1, [sp]
  01b54	e59d30ec	 ldr         r3, [sp, #0xEC]
  01b58	e5933000	 ldr         r3, [r3]
  01b5c	e2833018	 add         r3, r3, #0x18
  01b60	e59d00ec	 ldr         r0, [sp, #0xEC]
  01b64	e5933000	 ldr         r3, [r3]
  01b68	e1a0e00f	 mov         lr, pc
  01b6c	e12fff13	 bx          r3
  01b70	e58d006c	 str         r0, [sp, #0x6C]
  01b74	e59d30e0	 ldr         r3, [sp, #0xE0]
  01b78	e2833008	 add         r3, r3, #8
  01b7c	e5933000	 ldr         r3, [r3]
  01b80	e28320b0	 add         r2, r3, #0xB0
  01b84	e59d306c	 ldr         r3, [sp, #0x6C]
  01b88	e5823000	 str         r3, [r2]

; 894  :         OUTREG32( &m_pDispRegs->DISPC_GFX_ROW_INC, pSurface->RowIncr(eRotation, bMirror) );

  01b8c	e59d2008	 ldr         r2, [sp, #8]
  01b90	e59d1000	 ldr         r1, [sp]
  01b94	e59d30ec	 ldr         r3, [sp, #0xEC]
  01b98	e5933000	 ldr         r3, [r3]
  01b9c	e283301c	 add         r3, r3, #0x1C
  01ba0	e59d00ec	 ldr         r0, [sp, #0xEC]
  01ba4	e5933000	 ldr         r3, [r3]
  01ba8	e1a0e00f	 mov         lr, pc
  01bac	e12fff13	 bx          r3
  01bb0	e58d0070	 str         r0, [sp, #0x70]
  01bb4	e59d30e0	 ldr         r3, [sp, #0xE0]
  01bb8	e2833008	 add         r3, r3, #8
  01bbc	e5933000	 ldr         r3, [r3]
  01bc0	e28320ac	 add         r2, r3, #0xAC
  01bc4	e59d3070	 ldr         r3, [sp, #0x70]
  01bc8	e5823000	 str         r3, [r2]

; 895  :         OUTREG32( &m_pDispRegs->DISPC_GFX_WINDOW_SKIP, 0 );

  01bcc	e59d30e0	 ldr         r3, [sp, #0xE0]
  01bd0	e2833008	 add         r3, r3, #8
  01bd4	e5933000	 ldr         r3, [r3]
  01bd8	e28320b4	 add         r2, r3, #0xB4
  01bdc	e3a03000	 mov         r3, #0
  01be0	e5823000	 str         r3, [r2]

; 896  : 
; 897  :         OUTREG32( &m_pDispRegs->DISPC_GFX_BA0, pSurface->PhysicalAddr(eRotation, bMirror) );

  01be4	e3a03000	 mov         r3, #0
  01be8	e59d2008	 ldr         r2, [sp, #8]
  01bec	e59d1000	 ldr         r1, [sp]
  01bf0	e59d00ec	 ldr         r0, [sp, #0xEC]
  01bf4	e5900000	 ldr         r0, [r0]
  01bf8	e280e014	 add         lr, r0, #0x14
  01bfc	e59d00ec	 ldr         r0, [sp, #0xEC]
  01c00	e59e4000	 ldr         r4, [lr]
  01c04	e1a0e00f	 mov         lr, pc
  01c08	e12fff14	 bx          r4
  01c0c	e58d0074	 str         r0, [sp, #0x74]
  01c10	e59d30e0	 ldr         r3, [sp, #0xE0]
  01c14	e2833008	 add         r3, r3, #8
  01c18	e5933000	 ldr         r3, [r3]
  01c1c	e2832080	 add         r2, r3, #0x80
  01c20	e59d3074	 ldr         r3, [sp, #0x74]
  01c24	e5823000	 str         r3, [r2]

; 898  :         OUTREG32( &m_pDispRegs->DISPC_GFX_BA1, pSurface->PhysicalAddr(eRotation, bMirror) );

  01c28	e3a03000	 mov         r3, #0
  01c2c	e59d2008	 ldr         r2, [sp, #8]
  01c30	e59d1000	 ldr         r1, [sp]
  01c34	e59d00ec	 ldr         r0, [sp, #0xEC]
  01c38	e5900000	 ldr         r0, [r0]
  01c3c	e280e014	 add         lr, r0, #0x14
  01c40	e59d00ec	 ldr         r0, [sp, #0xEC]
  01c44	e59e4000	 ldr         r4, [lr]
  01c48	e1a0e00f	 mov         lr, pc
  01c4c	e12fff14	 bx          r4
  01c50	e58d0078	 str         r0, [sp, #0x78]
  01c54	e59d30e0	 ldr         r3, [sp, #0xE0]
  01c58	e2833008	 add         r3, r3, #8
  01c5c	e5933000	 ldr         r3, [r3]
  01c60	e2832084	 add         r2, r3, #0x84
  01c64	e59d3078	 ldr         r3, [sp, #0x78]
  01c68	e5823000	 str         r3, [r2]
  01c6c		 |$LN3@SetPipelin|

; 899  : 
; 900  :     }    
; 901  : 
; 902  : 
; 903  :     //  VIDEO1 pipeline
; 904  :     if( ePipeline == OMAP_DSS_PIPELINE_VIDEO1 )

  01c6c	e59d30e4	 ldr         r3, [sp, #0xE4]
  01c70	e3530001	 cmp         r3, #1
  01c74	1a0000d4	 bne         |$LN2@SetPipelin|

; 905  :     {
; 906  :         //  Set attributes of pipeline
; 907  :         OUTREG32( &m_pDispRegs->tDISPC_VID1.ATTRIBUTES,
; 908  :                     ((eDestination == OMAP_DSS_DESTINATION_TVOUT) ? DISPC_VID_ATTR_VIDCHANNELOUT : 0) |
; 909  :                     dwVidRotation |
; 910  :                     DISPC_VID_ATTR_VIDBURSTSIZE_16x32 |
; 911  :                     DISPC_VID_ATTR_VIDCOLORCONVENABLE |
; 912  :                     DISPC_VID_ATTR_VIDRESIZE_NONE |
; 913  :                     DISPC_VID_ATTR_VIDFORMAT(pSurface->PixelFormat())
; 914  :                     );

  01c78	e59d30e8	 ldr         r3, [sp, #0xE8]
  01c7c	e3530001	 cmp         r3, #1
  01c80	1a000002	 bne         |$LN34@SetPipelin|
  01c84	e3a03801	 mov         r3, #1, 16
  01c88	e58d307c	 str         r3, [sp, #0x7C]
  01c8c	ea000001	 b           |$LN35@SetPipelin|
  01c90		 |$LN34@SetPipelin|
  01c90	e3a03000	 mov         r3, #0
  01c94	e58d307c	 str         r3, [sp, #0x7C]
  01c98		 |$LN35@SetPipelin|
  01c98	e59d00ec	 ldr         r0, [sp, #0xEC]
  01c9c	eb000000	 bl          |?PixelFormat@OMAPSurface@@QAA?AW4OMAP_DSS_PIXELFORMAT@@XZ|
  01ca0	e58d0080	 str         r0, [sp, #0x80]
  01ca4	e59d207c	 ldr         r2, [sp, #0x7C]
  01ca8	e59d3014	 ldr         r3, [sp, #0x14]
  01cac	e1823003	 orr         r3, r2, r3
  01cb0	e3833902	 orr         r3, r3, #2, 18
  01cb4	e3832c02	 orr         r2, r3, #2, 24
  01cb8	e59d3080	 ldr         r3, [sp, #0x80]
  01cbc	e1a03083	 mov         r3, r3, lsl #1
  01cc0	e1822003	 orr         r2, r2, r3
  01cc4	e59d30e0	 ldr         r3, [sp, #0xE0]
  01cc8	e2833008	 add         r3, r3, #8
  01ccc	e5933000	 ldr         r3, [r3]
  01cd0	e28330cc	 add         r3, r3, #0xCC
  01cd4	e5832000	 str         r2, [r3]

; 915  : 
; 916  :         //  Size of window; picture size is the same for no scaling
; 917  :         OUTREG32( &m_pDispRegs->tDISPC_VID1.SIZE,
; 918  :                     DISPC_VID_SIZE_VIDSIZEX(pSurface->Width(eRotation)) |
; 919  :                     DISPC_VID_SIZE_VIDSIZEY(pSurface->Height(eRotation))
; 920  :                     );

  01cd8	e59d1000	 ldr         r1, [sp]
  01cdc	e59d30ec	 ldr         r3, [sp, #0xEC]
  01ce0	e5933000	 ldr         r3, [r3]
  01ce4	e2833008	 add         r3, r3, #8
  01ce8	e59d00ec	 ldr         r0, [sp, #0xEC]
  01cec	e5933000	 ldr         r3, [r3]
  01cf0	e1a0e00f	 mov         lr, pc
  01cf4	e12fff13	 bx          r3
  01cf8	e58d0084	 str         r0, [sp, #0x84]
  01cfc	e59d1000	 ldr         r1, [sp]
  01d00	e59d30ec	 ldr         r3, [sp, #0xEC]
  01d04	e5933000	 ldr         r3, [r3]
  01d08	e283300c	 add         r3, r3, #0xC
  01d0c	e59d00ec	 ldr         r0, [sp, #0xEC]
  01d10	e5933000	 ldr         r3, [r3]
  01d14	e1a0e00f	 mov         lr, pc
  01d18	e12fff13	 bx          r3
  01d1c	e58d0088	 str         r0, [sp, #0x88]
  01d20	e59d3084	 ldr         r3, [sp, #0x84]
  01d24	e2432001	 sub         r2, r3, #1
  01d28	e59d3088	 ldr         r3, [sp, #0x88]
  01d2c	e2433001	 sub         r3, r3, #1
  01d30	e1a03803	 mov         r3, r3, lsl #16
  01d34	e1822003	 orr         r2, r2, r3
  01d38	e59d30e0	 ldr         r3, [sp, #0xE0]
  01d3c	e2833008	 add         r3, r3, #8
  01d40	e5933000	 ldr         r3, [r3]
  01d44	e28330c8	 add         r3, r3, #0xC8
  01d48	e5832000	 str         r2, [r3]

; 921  : 
; 922  :         OUTREG32( &m_pDispRegs->tDISPC_VID1.PICTURE_SIZE,
; 923  :                     DISPC_VID_PICTURE_SIZE_VIDORGSIZEX(pSurface->Width(eRotation)) |
; 924  :                     DISPC_VID_PICTURE_SIZE_VIDORGSIZEY(pSurface->Height(eRotation))
; 925  :                     );

  01d4c	e59d1000	 ldr         r1, [sp]
  01d50	e59d30ec	 ldr         r3, [sp, #0xEC]
  01d54	e5933000	 ldr         r3, [r3]
  01d58	e2833008	 add         r3, r3, #8
  01d5c	e59d00ec	 ldr         r0, [sp, #0xEC]
  01d60	e5933000	 ldr         r3, [r3]
  01d64	e1a0e00f	 mov         lr, pc
  01d68	e12fff13	 bx          r3
  01d6c	e58d008c	 str         r0, [sp, #0x8C]
  01d70	e59d1000	 ldr         r1, [sp]
  01d74	e59d30ec	 ldr         r3, [sp, #0xEC]
  01d78	e5933000	 ldr         r3, [r3]
  01d7c	e283300c	 add         r3, r3, #0xC
  01d80	e59d00ec	 ldr         r0, [sp, #0xEC]
  01d84	e5933000	 ldr         r3, [r3]
  01d88	e1a0e00f	 mov         lr, pc
  01d8c	e12fff13	 bx          r3
  01d90	e58d0090	 str         r0, [sp, #0x90]
  01d94	e59d308c	 ldr         r3, [sp, #0x8C]
  01d98	e2432001	 sub         r2, r3, #1
  01d9c	e59d3090	 ldr         r3, [sp, #0x90]
  01da0	e2433001	 sub         r3, r3, #1
  01da4	e1a03803	 mov         r3, r3, lsl #16
  01da8	e1822003	 orr         r2, r2, r3
  01dac	e59d30e0	 ldr         r3, [sp, #0xE0]
  01db0	e2833008	 add         r3, r3, #8
  01db4	e5933000	 ldr         r3, [r3]
  01db8	e28330e4	 add         r3, r3, #0xE4
  01dbc	e5832000	 str         r2, [r3]

; 926  : 
; 927  :         //  Position of window
; 928  :         OUTREG32( &m_pDispRegs->tDISPC_VID1.POSITION,
; 929  :                     DISPC_VID_POS_VIDPOSX(dwX) |
; 930  :                     DISPC_VID_POS_VIDPOSY(dwY)
; 931  :                     );

  01dc0	e59d3010	 ldr         r3, [sp, #0x10]
  01dc4	e1a02803	 mov         r2, r3, lsl #16
  01dc8	e59d3004	 ldr         r3, [sp, #4]
  01dcc	e1832002	 orr         r2, r3, r2
  01dd0	e59d30e0	 ldr         r3, [sp, #0xE0]
  01dd4	e2833008	 add         r3, r3, #8
  01dd8	e5933000	 ldr         r3, [r3]
  01ddc	e28330c4	 add         r3, r3, #0xC4
  01de0	e5832000	 str         r2, [r3]

; 932  :                     
; 933  :         //  Pipeline FIFO and DMA settings
; 934  :         OUTREG32( &m_pDispRegs->tDISPC_VID1.FIFO_THRESHOLD,
; 935  :                     DISPC_VID_FIFO_THRESHOLD_LOW(FIFO_LOWTHRESHOLD_NORMAL(FIFO_BURSTSIZE_16x32)) |
; 936  :                     DISPC_VID_FIFO_THRESHOLD_HIGH(FIFO_HIGHTHRESHOLD_NORMAL)
; 937  :                     );

  01de4	e59d30e0	 ldr         r3, [sp, #0xE0]
  01de8	e2833008	 add         r3, r3, #8
  01dec	e5933000	 ldr         r3, [r3]
  01df0	e28320d0	 add         r2, r3, #0xD0
  01df4	e3e0333f	 mvn         r3, #0x3F, 6
  01df8	e2233cfe	 eor         r3, r3, #0xFE, 24
  01dfc	e5823000	 str         r3, [r2]

; 938  : 
; 939  :         OUTREG32( &m_pDispRegs->tDISPC_VID1.PIXEL_INC, pSurface->PixelIncr(eRotation, bMirror) );

  01e00	e59d2008	 ldr         r2, [sp, #8]
  01e04	e59d1000	 ldr         r1, [sp]
  01e08	e59d30ec	 ldr         r3, [sp, #0xEC]
  01e0c	e5933000	 ldr         r3, [r3]
  01e10	e2833018	 add         r3, r3, #0x18
  01e14	e59d00ec	 ldr         r0, [sp, #0xEC]
  01e18	e5933000	 ldr         r3, [r3]
  01e1c	e1a0e00f	 mov         lr, pc
  01e20	e12fff13	 bx          r3
  01e24	e58d0094	 str         r0, [sp, #0x94]
  01e28	e59d30e0	 ldr         r3, [sp, #0xE0]
  01e2c	e2833008	 add         r3, r3, #8
  01e30	e5933000	 ldr         r3, [r3]
  01e34	e28320dc	 add         r2, r3, #0xDC
  01e38	e59d3094	 ldr         r3, [sp, #0x94]
  01e3c	e5823000	 str         r3, [r2]

; 940  :         OUTREG32( &m_pDispRegs->tDISPC_VID1.ROW_INC, pSurface->RowIncr(eRotation, bMirror) );

  01e40	e59d2008	 ldr         r2, [sp, #8]
  01e44	e59d1000	 ldr         r1, [sp]
  01e48	e59d30ec	 ldr         r3, [sp, #0xEC]
  01e4c	e5933000	 ldr         r3, [r3]
  01e50	e283301c	 add         r3, r3, #0x1C
  01e54	e59d00ec	 ldr         r0, [sp, #0xEC]
  01e58	e5933000	 ldr         r3, [r3]
  01e5c	e1a0e00f	 mov         lr, pc
  01e60	e12fff13	 bx          r3
  01e64	e58d0098	 str         r0, [sp, #0x98]
  01e68	e59d30e0	 ldr         r3, [sp, #0xE0]
  01e6c	e2833008	 add         r3, r3, #8
  01e70	e5933000	 ldr         r3, [r3]
  01e74	e28320d8	 add         r2, r3, #0xD8
  01e78	e59d3098	 ldr         r3, [sp, #0x98]
  01e7c	e5823000	 str         r3, [r2]

; 941  :         
; 942  :         OUTREG32( &m_pDispRegs->tDISPC_VID1.BA0, pSurface->PhysicalAddr(eRotation, bMirror) );

  01e80	e3a03000	 mov         r3, #0
  01e84	e59d2008	 ldr         r2, [sp, #8]
  01e88	e59d1000	 ldr         r1, [sp]
  01e8c	e59d00ec	 ldr         r0, [sp, #0xEC]
  01e90	e5900000	 ldr         r0, [r0]
  01e94	e280e014	 add         lr, r0, #0x14
  01e98	e59d00ec	 ldr         r0, [sp, #0xEC]
  01e9c	e59e4000	 ldr         r4, [lr]
  01ea0	e1a0e00f	 mov         lr, pc
  01ea4	e12fff14	 bx          r4
  01ea8	e58d009c	 str         r0, [sp, #0x9C]
  01eac	e59d30e0	 ldr         r3, [sp, #0xE0]
  01eb0	e2833008	 add         r3, r3, #8
  01eb4	e5933000	 ldr         r3, [r3]
  01eb8	e28320bc	 add         r2, r3, #0xBC
  01ebc	e59d309c	 ldr         r3, [sp, #0x9C]
  01ec0	e5823000	 str         r3, [r2]

; 943  :         OUTREG32( &m_pDispRegs->tDISPC_VID1.BA1, pSurface->PhysicalAddr(eRotation, bMirror) );

  01ec4	e3a03000	 mov         r3, #0
  01ec8	e59d2008	 ldr         r2, [sp, #8]
  01ecc	e59d1000	 ldr         r1, [sp]
  01ed0	e59d00ec	 ldr         r0, [sp, #0xEC]
  01ed4	e5900000	 ldr         r0, [r0]
  01ed8	e280e014	 add         lr, r0, #0x14
  01edc	e59d00ec	 ldr         r0, [sp, #0xEC]
  01ee0	e59e4000	 ldr         r4, [lr]
  01ee4	e1a0e00f	 mov         lr, pc
  01ee8	e12fff14	 bx          r4
  01eec	e58d00a0	 str         r0, [sp, #0xA0]
  01ef0	e59d30e0	 ldr         r3, [sp, #0xE0]
  01ef4	e2833008	 add         r3, r3, #8
  01ef8	e5933000	 ldr         r3, [r3]
  01efc	e28320c0	 add         r2, r3, #0xC0
  01f00	e59d30a0	 ldr         r3, [sp, #0xA0]
  01f04	e5823000	 str         r3, [r2]

; 944  : 
; 945  :         
; 946  :         //  Color conversion coefficients
; 947  :         OUTREG32( &m_pDispRegs->tDISPC_VID1.CONV_COEF0, m_pColorSpaceCoeffs[0] );

  01f08	e59d30e0	 ldr         r3, [sp, #0xE0]
  01f0c	e2833e4a	 add         r3, r3, #0x4A, 28
  01f10	e5931000	 ldr         r1, [r3]
  01f14	e59d30e0	 ldr         r3, [sp, #0xE0]
  01f18	e2833008	 add         r3, r3, #8
  01f1c	e5933000	 ldr         r3, [r3]
  01f20	e2832e13	 add         r2, r3, #0x13, 28
  01f24	e5913000	 ldr         r3, [r1]
  01f28	e5823000	 str         r3, [r2]

; 948  :         OUTREG32( &m_pDispRegs->tDISPC_VID1.CONV_COEF1, m_pColorSpaceCoeffs[1] );

  01f2c	e59d30e0	 ldr         r3, [sp, #0xE0]
  01f30	e2833e4a	 add         r3, r3, #0x4A, 28
  01f34	e5933000	 ldr         r3, [r3]
  01f38	e2831004	 add         r1, r3, #4
  01f3c	e59d30e0	 ldr         r3, [sp, #0xE0]
  01f40	e2833008	 add         r3, r3, #8
  01f44	e5933000	 ldr         r3, [r3]
  01f48	e2832f4d	 add         r2, r3, #0x4D, 30
  01f4c	e5913000	 ldr         r3, [r1]
  01f50	e5823000	 str         r3, [r2]

; 949  :         OUTREG32( &m_pDispRegs->tDISPC_VID1.CONV_COEF2, m_pColorSpaceCoeffs[2] );

  01f54	e59d30e0	 ldr         r3, [sp, #0xE0]
  01f58	e2833e4a	 add         r3, r3, #0x4A, 28
  01f5c	e5933000	 ldr         r3, [r3]
  01f60	e2831008	 add         r1, r3, #8
  01f64	e59d30e0	 ldr         r3, [sp, #0xE0]
  01f68	e2833008	 add         r3, r3, #8
  01f6c	e5933000	 ldr         r3, [r3]
  01f70	e2832f4e	 add         r2, r3, #0x4E, 30
  01f74	e5913000	 ldr         r3, [r1]
  01f78	e5823000	 str         r3, [r2]

; 950  :         OUTREG32( &m_pDispRegs->tDISPC_VID1.CONV_COEF3, m_pColorSpaceCoeffs[3] );

  01f7c	e59d30e0	 ldr         r3, [sp, #0xE0]
  01f80	e2833e4a	 add         r3, r3, #0x4A, 28
  01f84	e5933000	 ldr         r3, [r3]
  01f88	e283100c	 add         r1, r3, #0xC
  01f8c	e59d30e0	 ldr         r3, [sp, #0xE0]
  01f90	e2833008	 add         r3, r3, #8
  01f94	e5933000	 ldr         r3, [r3]
  01f98	e2832f4f	 add         r2, r3, #0x4F, 30
  01f9c	e5913000	 ldr         r3, [r1]
  01fa0	e5823000	 str         r3, [r2]

; 951  :         OUTREG32( &m_pDispRegs->tDISPC_VID1.CONV_COEF4, m_pColorSpaceCoeffs[4] );

  01fa4	e59d30e0	 ldr         r3, [sp, #0xE0]
  01fa8	e2833e4a	 add         r3, r3, #0x4A, 28
  01fac	e5933000	 ldr         r3, [r3]
  01fb0	e2831010	 add         r1, r3, #0x10
  01fb4	e59d30e0	 ldr         r3, [sp, #0xE0]
  01fb8	e2833008	 add         r3, r3, #8
  01fbc	e5933000	 ldr         r3, [r3]
  01fc0	e2832d05	 add         r2, r3, #5, 26
  01fc4	e5913000	 ldr         r3, [r1]
  01fc8	e5823000	 str         r3, [r2]
  01fcc		 |$LN2@SetPipelin|

; 952  :     }    
; 953  : 
; 954  : 
; 955  :     //  VIDEO2 pipeline
; 956  :     if( ePipeline == OMAP_DSS_PIPELINE_VIDEO2 )

  01fcc	e59d30e4	 ldr         r3, [sp, #0xE4]
  01fd0	e3530002	 cmp         r3, #2
  01fd4	1a0000d4	 bne         |$LN1@SetPipelin|

; 957  :     {
; 958  :         //  Set attributes of pipeline
; 959  :         OUTREG32( &m_pDispRegs->tDISPC_VID2.ATTRIBUTES,
; 960  :                     ((eDestination == OMAP_DSS_DESTINATION_TVOUT) ? DISPC_VID_ATTR_VIDCHANNELOUT : 0) |
; 961  :                     dwVidRotation |
; 962  :                     DISPC_VID_ATTR_VIDBURSTSIZE_16x32 |
; 963  :                     DISPC_VID_ATTR_VIDCOLORCONVENABLE |
; 964  :                     DISPC_VID_ATTR_VIDRESIZE_NONE |
; 965  :                     DISPC_VID_ATTR_VIDFORMAT(pSurface->PixelFormat())
; 966  :                     );

  01fd8	e59d30e8	 ldr         r3, [sp, #0xE8]
  01fdc	e3530001	 cmp         r3, #1
  01fe0	1a000002	 bne         |$LN36@SetPipelin|
  01fe4	e3a03801	 mov         r3, #1, 16
  01fe8	e58d30a4	 str         r3, [sp, #0xA4]
  01fec	ea000001	 b           |$LN37@SetPipelin|
  01ff0		 |$LN36@SetPipelin|
  01ff0	e3a03000	 mov         r3, #0
  01ff4	e58d30a4	 str         r3, [sp, #0xA4]
  01ff8		 |$LN37@SetPipelin|
  01ff8	e59d00ec	 ldr         r0, [sp, #0xEC]
  01ffc	eb000000	 bl          |?PixelFormat@OMAPSurface@@QAA?AW4OMAP_DSS_PIXELFORMAT@@XZ|
  02000	e58d00a8	 str         r0, [sp, #0xA8]
  02004	e59d20a4	 ldr         r2, [sp, #0xA4]
  02008	e59d3014	 ldr         r3, [sp, #0x14]
  0200c	e1823003	 orr         r3, r2, r3
  02010	e3833902	 orr         r3, r3, #2, 18
  02014	e3832c02	 orr         r2, r3, #2, 24
  02018	e59d30a8	 ldr         r3, [sp, #0xA8]
  0201c	e1a03083	 mov         r3, r3, lsl #1
  02020	e1822003	 orr         r2, r2, r3
  02024	e59d30e0	 ldr         r3, [sp, #0xE0]
  02028	e2833008	 add         r3, r3, #8
  0202c	e5933000	 ldr         r3, [r3]
  02030	e2833f57	 add         r3, r3, #0x57, 30
  02034	e5832000	 str         r2, [r3]

; 967  : 
; 968  :         //  Size of window; picture size is the same for no scaling
; 969  :         OUTREG32( &m_pDispRegs->tDISPC_VID2.SIZE,
; 970  :                     DISPC_VID_SIZE_VIDSIZEX(pSurface->Width(eRotation)) |
; 971  :                     DISPC_VID_SIZE_VIDSIZEY(pSurface->Height(eRotation))
; 972  :                     );

  02038	e59d1000	 ldr         r1, [sp]
  0203c	e59d30ec	 ldr         r3, [sp, #0xEC]
  02040	e5933000	 ldr         r3, [r3]
  02044	e2833008	 add         r3, r3, #8
  02048	e59d00ec	 ldr         r0, [sp, #0xEC]
  0204c	e5933000	 ldr         r3, [r3]
  02050	e1a0e00f	 mov         lr, pc
  02054	e12fff13	 bx          r3
  02058	e58d00ac	 str         r0, [sp, #0xAC]
  0205c	e59d1000	 ldr         r1, [sp]
  02060	e59d30ec	 ldr         r3, [sp, #0xEC]
  02064	e5933000	 ldr         r3, [r3]
  02068	e283300c	 add         r3, r3, #0xC
  0206c	e59d00ec	 ldr         r0, [sp, #0xEC]
  02070	e5933000	 ldr         r3, [r3]
  02074	e1a0e00f	 mov         lr, pc
  02078	e12fff13	 bx          r3
  0207c	e58d00b0	 str         r0, [sp, #0xB0]
  02080	e59d30ac	 ldr         r3, [sp, #0xAC]
  02084	e2432001	 sub         r2, r3, #1
  02088	e59d30b0	 ldr         r3, [sp, #0xB0]
  0208c	e2433001	 sub         r3, r3, #1
  02090	e1a03803	 mov         r3, r3, lsl #16
  02094	e1822003	 orr         r2, r2, r3
  02098	e59d30e0	 ldr         r3, [sp, #0xE0]
  0209c	e2833008	 add         r3, r3, #8
  020a0	e5933000	 ldr         r3, [r3]
  020a4	e2833f56	 add         r3, r3, #0x56, 30
  020a8	e5832000	 str         r2, [r3]

; 973  : 
; 974  :         OUTREG32( &m_pDispRegs->tDISPC_VID2.PICTURE_SIZE,
; 975  :                     DISPC_VID_PICTURE_SIZE_VIDORGSIZEX(pSurface->Width(eRotation)) |
; 976  :                     DISPC_VID_PICTURE_SIZE_VIDORGSIZEY(pSurface->Height(eRotation))
; 977  :                     );

  020ac	e59d1000	 ldr         r1, [sp]
  020b0	e59d30ec	 ldr         r3, [sp, #0xEC]
  020b4	e5933000	 ldr         r3, [r3]
  020b8	e2833008	 add         r3, r3, #8
  020bc	e59d00ec	 ldr         r0, [sp, #0xEC]
  020c0	e5933000	 ldr         r3, [r3]
  020c4	e1a0e00f	 mov         lr, pc
  020c8	e12fff13	 bx          r3
  020cc	e58d00b4	 str         r0, [sp, #0xB4]
  020d0	e59d1000	 ldr         r1, [sp]
  020d4	e59d30ec	 ldr         r3, [sp, #0xEC]
  020d8	e5933000	 ldr         r3, [r3]
  020dc	e283300c	 add         r3, r3, #0xC
  020e0	e59d00ec	 ldr         r0, [sp, #0xEC]
  020e4	e5933000	 ldr         r3, [r3]
  020e8	e1a0e00f	 mov         lr, pc
  020ec	e12fff13	 bx          r3
  020f0	e58d00b8	 str         r0, [sp, #0xB8]
  020f4	e59d30b4	 ldr         r3, [sp, #0xB4]
  020f8	e2432001	 sub         r2, r3, #1
  020fc	e59d30b8	 ldr         r3, [sp, #0xB8]
  02100	e2433001	 sub         r3, r3, #1
  02104	e1a03803	 mov         r3, r3, lsl #16
  02108	e1822003	 orr         r2, r2, r3
  0210c	e59d30e0	 ldr         r3, [sp, #0xE0]
  02110	e2833008	 add         r3, r3, #8
  02114	e5933000	 ldr         r3, [r3]
  02118	e2833f5d	 add         r3, r3, #0x5D, 30
  0211c	e5832000	 str         r2, [r3]

; 978  : 
; 979  :         //  Position of window
; 980  :         OUTREG32( &m_pDispRegs->tDISPC_VID2.POSITION,
; 981  :                     DISPC_VID_POS_VIDPOSX(dwX) |
; 982  :                     DISPC_VID_POS_VIDPOSY(dwY)
; 983  :                     );

  02120	e59d3010	 ldr         r3, [sp, #0x10]
  02124	e1a02803	 mov         r2, r3, lsl #16
  02128	e59d3004	 ldr         r3, [sp, #4]
  0212c	e1832002	 orr         r2, r3, r2
  02130	e59d30e0	 ldr         r3, [sp, #0xE0]
  02134	e2833008	 add         r3, r3, #8
  02138	e5933000	 ldr         r3, [r3]
  0213c	e2833f55	 add         r3, r3, #0x55, 30
  02140	e5832000	 str         r2, [r3]

; 984  :                     
; 985  :         //  Pipeline FIFO and DMA settings
; 986  :         OUTREG32( &m_pDispRegs->tDISPC_VID2.FIFO_THRESHOLD,
; 987  :                     DISPC_VID_FIFO_THRESHOLD_LOW(FIFO_LOWTHRESHOLD_NORMAL(FIFO_BURSTSIZE_16x32)) |
; 988  :                     DISPC_VID_FIFO_THRESHOLD_HIGH(FIFO_HIGHTHRESHOLD_NORMAL)
; 989  :                     );

  02144	e59d30e0	 ldr         r3, [sp, #0xE0]
  02148	e2833008	 add         r3, r3, #8
  0214c	e5933000	 ldr         r3, [r3]
  02150	e2832e16	 add         r2, r3, #0x16, 28
  02154	e3e0333f	 mvn         r3, #0x3F, 6
  02158	e2233cfe	 eor         r3, r3, #0xFE, 24
  0215c	e5823000	 str         r3, [r2]

; 990  : 
; 991  :         OUTREG32( &m_pDispRegs->tDISPC_VID2.PIXEL_INC, pSurface->PixelIncr(eRotation, bMirror) );

  02160	e59d2008	 ldr         r2, [sp, #8]
  02164	e59d1000	 ldr         r1, [sp]
  02168	e59d30ec	 ldr         r3, [sp, #0xEC]
  0216c	e5933000	 ldr         r3, [r3]
  02170	e2833018	 add         r3, r3, #0x18
  02174	e59d00ec	 ldr         r0, [sp, #0xEC]
  02178	e5933000	 ldr         r3, [r3]
  0217c	e1a0e00f	 mov         lr, pc
  02180	e12fff13	 bx          r3
  02184	e58d00bc	 str         r0, [sp, #0xBC]
  02188	e59d30e0	 ldr         r3, [sp, #0xE0]
  0218c	e2833008	 add         r3, r3, #8
  02190	e5933000	 ldr         r3, [r3]
  02194	e2832f5b	 add         r2, r3, #0x5B, 30
  02198	e59d30bc	 ldr         r3, [sp, #0xBC]
  0219c	e5823000	 str         r3, [r2]

; 992  :         OUTREG32( &m_pDispRegs->tDISPC_VID2.ROW_INC, pSurface->RowIncr(eRotation, bMirror) );

  021a0	e59d2008	 ldr         r2, [sp, #8]
  021a4	e59d1000	 ldr         r1, [sp]
  021a8	e59d30ec	 ldr         r3, [sp, #0xEC]
  021ac	e5933000	 ldr         r3, [r3]
  021b0	e283301c	 add         r3, r3, #0x1C
  021b4	e59d00ec	 ldr         r0, [sp, #0xEC]
  021b8	e5933000	 ldr         r3, [r3]
  021bc	e1a0e00f	 mov         lr, pc
  021c0	e12fff13	 bx          r3
  021c4	e58d00c0	 str         r0, [sp, #0xC0]
  021c8	e59d30e0	 ldr         r3, [sp, #0xE0]
  021cc	e2833008	 add         r3, r3, #8
  021d0	e5933000	 ldr         r3, [r3]
  021d4	e2832f5a	 add         r2, r3, #0x5A, 30
  021d8	e59d30c0	 ldr         r3, [sp, #0xC0]
  021dc	e5823000	 str         r3, [r2]

; 993  : 
; 994  :         OUTREG32( &m_pDispRegs->tDISPC_VID2.BA0, pSurface->PhysicalAddr(eRotation, bMirror) );

  021e0	e3a03000	 mov         r3, #0
  021e4	e59d2008	 ldr         r2, [sp, #8]
  021e8	e59d1000	 ldr         r1, [sp]
  021ec	e59d00ec	 ldr         r0, [sp, #0xEC]
  021f0	e5900000	 ldr         r0, [r0]
  021f4	e280e014	 add         lr, r0, #0x14
  021f8	e59d00ec	 ldr         r0, [sp, #0xEC]
  021fc	e59e4000	 ldr         r4, [lr]
  02200	e1a0e00f	 mov         lr, pc
  02204	e12fff14	 bx          r4
  02208	e58d00c4	 str         r0, [sp, #0xC4]
  0220c	e59d30e0	 ldr         r3, [sp, #0xE0]
  02210	e2833008	 add         r3, r3, #8
  02214	e5933000	 ldr         r3, [r3]
  02218	e2832f53	 add         r2, r3, #0x53, 30
  0221c	e59d30c4	 ldr         r3, [sp, #0xC4]
  02220	e5823000	 str         r3, [r2]

; 995  :         OUTREG32( &m_pDispRegs->tDISPC_VID2.BA1, pSurface->PhysicalAddr(eRotation, bMirror) );

  02224	e3a03000	 mov         r3, #0
  02228	e59d2008	 ldr         r2, [sp, #8]
  0222c	e59d1000	 ldr         r1, [sp]
  02230	e59d00ec	 ldr         r0, [sp, #0xEC]
  02234	e5900000	 ldr         r0, [r0]
  02238	e280e014	 add         lr, r0, #0x14
  0223c	e59d00ec	 ldr         r0, [sp, #0xEC]
  02240	e59e4000	 ldr         r4, [lr]
  02244	e1a0e00f	 mov         lr, pc
  02248	e12fff14	 bx          r4
  0224c	e58d00c8	 str         r0, [sp, #0xC8]
  02250	e59d30e0	 ldr         r3, [sp, #0xE0]
  02254	e2833008	 add         r3, r3, #8
  02258	e5933000	 ldr         r3, [r3]
  0225c	e2832e15	 add         r2, r3, #0x15, 28
  02260	e59d30c8	 ldr         r3, [sp, #0xC8]
  02264	e5823000	 str         r3, [r2]

; 996  : 
; 997  : 
; 998  : 
; 999  :         //  Color conversion coefficients
; 1000 :         OUTREG32( &m_pDispRegs->tDISPC_VID2.CONV_COEF0, m_pColorSpaceCoeffs[0] );

  02268	e59d30e0	 ldr         r3, [sp, #0xE0]
  0226c	e2833e4a	 add         r3, r3, #0x4A, 28
  02270	e5931000	 ldr         r1, [r3]
  02274	e59d30e0	 ldr         r3, [sp, #0xE0]
  02278	e2833008	 add         r3, r3, #8
  0227c	e5933000	 ldr         r3, [r3]
  02280	e2832d07	 add         r2, r3, #7, 26
  02284	e5913000	 ldr         r3, [r1]
  02288	e5823000	 str         r3, [r2]

; 1001 :         OUTREG32( &m_pDispRegs->tDISPC_VID2.CONV_COEF1, m_pColorSpaceCoeffs[1] );

  0228c	e59d30e0	 ldr         r3, [sp, #0xE0]
  02290	e2833e4a	 add         r3, r3, #0x4A, 28
  02294	e5933000	 ldr         r3, [r3]
  02298	e2831004	 add         r1, r3, #4
  0229c	e59d30e0	 ldr         r3, [sp, #0xE0]
  022a0	e2833008	 add         r3, r3, #8
  022a4	e5933000	 ldr         r3, [r3]
  022a8	e2832f71	 add         r2, r3, #0x71, 30
  022ac	e5913000	 ldr         r3, [r1]
  022b0	e5823000	 str         r3, [r2]

; 1002 :         OUTREG32( &m_pDispRegs->tDISPC_VID2.CONV_COEF2, m_pColorSpaceCoeffs[2] );

  022b4	e59d30e0	 ldr         r3, [sp, #0xE0]
  022b8	e2833e4a	 add         r3, r3, #0x4A, 28
  022bc	e5933000	 ldr         r3, [r3]
  022c0	e2831008	 add         r1, r3, #8
  022c4	e59d30e0	 ldr         r3, [sp, #0xE0]
  022c8	e2833008	 add         r3, r3, #8
  022cc	e5933000	 ldr         r3, [r3]
  022d0	e2832f72	 add         r2, r3, #0x72, 30
  022d4	e5913000	 ldr         r3, [r1]
  022d8	e5823000	 str         r3, [r2]

; 1003 :         OUTREG32( &m_pDispRegs->tDISPC_VID2.CONV_COEF3, m_pColorSpaceCoeffs[3] );

  022dc	e59d30e0	 ldr         r3, [sp, #0xE0]
  022e0	e2833e4a	 add         r3, r3, #0x4A, 28
  022e4	e5933000	 ldr         r3, [r3]
  022e8	e283100c	 add         r1, r3, #0xC
  022ec	e59d30e0	 ldr         r3, [sp, #0xE0]
  022f0	e2833008	 add         r3, r3, #8
  022f4	e5933000	 ldr         r3, [r3]
  022f8	e2832f73	 add         r2, r3, #0x73, 30
  022fc	e5913000	 ldr         r3, [r1]
  02300	e5823000	 str         r3, [r2]

; 1004 :         OUTREG32( &m_pDispRegs->tDISPC_VID2.CONV_COEF4, m_pColorSpaceCoeffs[4] );

  02304	e59d30e0	 ldr         r3, [sp, #0xE0]
  02308	e2833e4a	 add         r3, r3, #0x4A, 28
  0230c	e5933000	 ldr         r3, [r3]
  02310	e2831010	 add         r1, r3, #0x10
  02314	e59d30e0	 ldr         r3, [sp, #0xE0]
  02318	e2833008	 add         r3, r3, #8
  0231c	e5933000	 ldr         r3, [r3]
  02320	e2832e1d	 add         r2, r3, #0x1D, 28
  02324	e5913000	 ldr         r3, [r1]
  02328	e5823000	 str         r3, [r2]
  0232c		 |$LN1@SetPipelin|

; 1005 :     }    
; 1006 : 
; 1007 : 
; 1008 : 
; 1009 :     //  Set mapping of pipeline to destination and surface
; 1010 :     g_rgPipelineMapping[ePipeline].eDestination = eDestination;

  0232c	e59d10e4	 ldr         r1, [sp, #0xE4]
  02330	e3a03020	 mov         r3, #0x20
  02334	e0020391	 mul         r2, r1, r3
  02338	e59f315c	 ldr         r3, [pc, #0x15C]
  0233c	e0833002	 add         r3, r3, r2
  02340	e2832004	 add         r2, r3, #4
  02344	e59d30e8	 ldr         r3, [sp, #0xE8]
  02348	e5823000	 str         r3, [r2]

; 1011 :     g_rgPipelineMapping[ePipeline].pSurface     = pSurface;

  0234c	e59d10e4	 ldr         r1, [sp, #0xE4]
  02350	e3a03020	 mov         r3, #0x20
  02354	e0020391	 mul         r2, r1, r3
  02358	e59f313c	 ldr         r3, [pc, #0x13C]
  0235c	e0833002	 add         r3, r3, r2
  02360	e2832008	 add         r2, r3, #8
  02364	e59d30ec	 ldr         r3, [sp, #0xEC]
  02368	e5823000	 str         r3, [r2]

; 1012 :     g_rgPipelineMapping[ePipeline].dwDestWidth  = pSurface->Width(eRotation);

  0236c	e59d1000	 ldr         r1, [sp]
  02370	e59d30ec	 ldr         r3, [sp, #0xEC]
  02374	e5933000	 ldr         r3, [r3]
  02378	e2833008	 add         r3, r3, #8
  0237c	e59d00ec	 ldr         r0, [sp, #0xEC]
  02380	e5933000	 ldr         r3, [r3]
  02384	e1a0e00f	 mov         lr, pc
  02388	e12fff13	 bx          r3
  0238c	e58d00cc	 str         r0, [sp, #0xCC]
  02390	e59d10e4	 ldr         r1, [sp, #0xE4]
  02394	e3a03020	 mov         r3, #0x20
  02398	e0020391	 mul         r2, r1, r3
  0239c	e59f30f8	 ldr         r3, [pc, #0xF8]
  023a0	e0833002	 add         r3, r3, r2
  023a4	e2832014	 add         r2, r3, #0x14
  023a8	e59d30cc	 ldr         r3, [sp, #0xCC]
  023ac	e5823000	 str         r3, [r2]

; 1013 :     g_rgPipelineMapping[ePipeline].dwDestHeight = pSurface->Height(eRotation);

  023b0	e59d1000	 ldr         r1, [sp]
  023b4	e59d30ec	 ldr         r3, [sp, #0xEC]
  023b8	e5933000	 ldr         r3, [r3]
  023bc	e283300c	 add         r3, r3, #0xC
  023c0	e59d00ec	 ldr         r0, [sp, #0xEC]
  023c4	e5933000	 ldr         r3, [r3]
  023c8	e1a0e00f	 mov         lr, pc
  023cc	e12fff13	 bx          r3
  023d0	e58d00d0	 str         r0, [sp, #0xD0]
  023d4	e59d10e4	 ldr         r1, [sp, #0xE4]
  023d8	e3a03020	 mov         r3, #0x20
  023dc	e0020391	 mul         r2, r1, r3
  023e0	e59f30b4	 ldr         r3, [pc, #0xB4]
  023e4	e0833002	 add         r3, r3, r2
  023e8	e2832018	 add         r2, r3, #0x18
  023ec	e59d30d0	 ldr         r3, [sp, #0xD0]
  023f0	e5823000	 str         r3, [r2]

; 1014 :     g_rgPipelineMapping[ePipeline].pOldSurface  = pSurface;

  023f4	e59d10e4	 ldr         r1, [sp, #0xE4]
  023f8	e3a03020	 mov         r3, #0x20
  023fc	e0020391	 mul         r2, r1, r3
  02400	e59f3094	 ldr         r3, [pc, #0x94]
  02404	e0833002	 add         r3, r3, r2
  02408	e283201c	 add         r2, r3, #0x1C
  0240c	e59d30ec	 ldr         r3, [sp, #0xEC]
  02410	e5823000	 str         r3, [r2]

; 1015 : 
; 1016 :     //  Reset the scaling factors to 100% and no interlacing
; 1017 :     g_rgPipelineScaling[ePipeline].dwHorzScaling = 1;

  02414	e59d10e4	 ldr         r1, [sp, #0xE4]
  02418	e3a0300c	 mov         r3, #0xC
  0241c	e0020391	 mul         r2, r1, r3
  02420	e59f3070	 ldr         r3, [pc, #0x70]
  02424	e0832002	 add         r2, r3, r2
  02428	e3a03001	 mov         r3, #1
  0242c	e5823000	 str         r3, [r2]

; 1018 :     g_rgPipelineScaling[ePipeline].dwVertScaling = 1;

  02430	e59d10e4	 ldr         r1, [sp, #0xE4]
  02434	e3a0300c	 mov         r3, #0xC
  02438	e0020391	 mul         r2, r1, r3
  0243c	e59f3054	 ldr         r3, [pc, #0x54]
  02440	e0833002	 add         r3, r3, r2
  02444	e2832004	 add         r2, r3, #4
  02448	e3a03001	 mov         r3, #1
  0244c	e5823000	 str         r3, [r2]

; 1019 :     g_rgPipelineScaling[ePipeline].dwInterlace   = 0;

  02450	e59d10e4	 ldr         r1, [sp, #0xE4]
  02454	e3a0300c	 mov         r3, #0xC
  02458	e0020391	 mul         r2, r1, r3
  0245c	e59f3034	 ldr         r3, [pc, #0x34]
  02460	e0833002	 add         r3, r3, r2
  02464	e2832008	 add         r2, r3, #8
  02468	e3a03000	 mov         r3, #0
  0246c	e5823000	 str         r3, [r2]

; 1020 :     
; 1021 :     //  Result
; 1022 :     bResult = TRUE;         

  02470	e3a03001	 mov         r3, #1
  02474	e58d300c	 str         r3, [sp, #0xC]
  02478		 |$LN4@SetPipelin|
  02478		 |$LN20@SetPipelin|
  02478		 |$cleanUp$38070|

; 1023 : 
; 1024 : cleanUp:    
; 1025 :     //  Release regs
; 1026 :     ReleaseRegs();

  02478	e59d00e0	 ldr         r0, [sp, #0xE0]
  0247c	eb000000	 bl          |?ReleaseRegs@OMAPDisplayController@@IAAHXZ|

; 1027 :     
; 1028 :     //  Return result
; 1029 :     return bResult;

  02480	e59d300c	 ldr         r3, [sp, #0xC]
  02484	e58d3018	 str         r3, [sp, #0x18]

; 1030 : }

  02488	e59d0018	 ldr         r0, [sp, #0x18]
  0248c	e28dd0d4	 add         sp, sp, #0xD4
  02490	e89d6010	 ldmia       sp, {r4, sp, lr}
  02494	e12fff1e	 bx          lr
  02498		 |$LN41@SetPipelin|
  02498		 |$LN42@SetPipelin|
  02498	00000000	 DCD         |?g_rgPipelineScaling@@3PAUOMAPPipelineScaling@@A|
  0249c		 |$LN43@SetPipelin|
  0249c	00000000	 DCD         |?g_rgPipelineMapping@@3PAUOMAPPipelineConfig@@A|
  024a0		 |$LN44@SetPipelin|
  024a0	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  024a4		 |$LN45@SetPipelin|
  024a4	00000000	 DCD         |??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@|
  024a8		 |$LN46@SetPipelin|
  024a8	00000000	 DCD         |??_C@_1KC@HIABDGPO@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  024ac		 |$M40418|

			 ENDP  ; |?SetPipelineAttribs@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@W4OMAP_DSS_DESTINATION@@PAVOMAPSurface@@KK@Z|, OMAPDisplayController::SetPipelineAttribs

; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\inc\dssai.h

  00000			 AREA	 |.pdata|, PDATA
|$T40432| DCD	|$LN5@GetLCDWidt|
	DCD	0x40000d04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetLCDWidth@OMAPDisplayController@@QAAKXZ| PROC ; OMAPDisplayController::GetLCDWidth

; 303  :     DWORD                   GetLCDWidth() { return m_dwLcdWidth; }

  00000		 |$LN5@GetLCDWidt|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M40429|
  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e2833b01	 add         r3, r3, #1, 22
  00018	e28330a8	 add         r3, r3, #0xA8
  0001c	e5933000	 ldr         r3, [r3]
  00020	e58d3000	 str         r3, [sp]
  00024	e59d0000	 ldr         r0, [sp]
  00028	e28dd004	 add         sp, sp, #4
  0002c	e89d6000	 ldmia       sp, {sp, lr}
  00030	e12fff1e	 bx          lr
  00034		 |$M40430|

			 ENDP  ; |?GetLCDWidth@OMAPDisplayController@@QAAKXZ|, OMAPDisplayController::GetLCDWidth


  00000			 AREA	 |.pdata|, PDATA
|$T40440| DCD	|$LN5@GetLCDHeig|
	DCD	0x40000d04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetLCDHeight@OMAPDisplayController@@QAAKXZ| PROC ; OMAPDisplayController::GetLCDHeight

; 304  :     DWORD                   GetLCDHeight() { return m_dwLcdHeight; }

  00000		 |$LN5@GetLCDHeig|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M40437|
  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e2833b01	 add         r3, r3, #1, 22
  00018	e28330ac	 add         r3, r3, #0xAC
  0001c	e5933000	 ldr         r3, [r3]
  00020	e58d3000	 str         r3, [sp]
  00024	e59d0000	 ldr         r0, [sp]
  00028	e28dd004	 add         sp, sp, #4
  0002c	e89d6000	 ldmia       sp, {sp, lr}
  00030	e12fff1e	 bx          lr
  00034		 |$M40438|

			 ENDP  ; |?GetLCDHeight@OMAPDisplayController@@QAAKXZ|, OMAPDisplayController::GetLCDHeight


  00000			 AREA	 |.pdata|, PDATA
|$T40448| DCD	|$LN5@PixelForma|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?PixelFormat@OMAPSurface@@QAA?AW4OMAP_DSS_PIXELFORMAT@@XZ| PROC ; OMAPSurface::PixelFormat

; 760  :     OMAP_DSS_PIXELFORMAT    PixelFormat() { return m_ePixelFormat; }

  00000		 |$LN5@PixelForma|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M40445|
  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e2833004	 add         r3, r3, #4
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3000	 str         r3, [sp]
  00020	e59d0000	 ldr         r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M40446|

			 ENDP  ; |?PixelFormat@OMAPSurface@@QAA?AW4OMAP_DSS_PIXELFORMAT@@XZ|, OMAPSurface::PixelFormat

	EXPORT	|?GetFIRCoef@@YAXPAXKKK@Z|		; GetFIRCoef
	IMPORT	|?g_coef_M8@@3PAY07EA|			; g_coef_M8
	IMPORT	|?g_coef_M9@@3PAY07EA|			; g_coef_M9
	IMPORT	|?g_coef_M10@@3PAY07EA|			; g_coef_M10
	IMPORT	|?g_coef_M11@@3PAY07EA|			; g_coef_M11
	IMPORT	|?g_coef_M12@@3PAY07EA|			; g_coef_M12
	IMPORT	|?g_coef_M13@@3PAY07EA|			; g_coef_M13
	IMPORT	|?g_coef_M14@@3PAY07EA|			; g_coef_M14
	IMPORT	|?g_coef_M16@@3PAY07EA|			; g_coef_M16
	IMPORT	|?g_coef_M19@@3PAY07EA|			; g_coef_M19
	IMPORT	|?g_coef_M22@@3PAY07EA|			; g_coef_M22
	IMPORT	|?g_coef_M26@@3PAY07EA|			; g_coef_M26
	IMPORT	|?g_coef_M32@@3PAY07EA|			; g_coef_M32
	IMPORT	|?g_coef3_M8@@3PAY07EA|			; g_coef3_M8
	IMPORT	|memcpy|
	IMPORT	|?g_coef3_M16@@3PAY07EA|		; g_coef3_M16

  00058			 AREA	 |.pdata|, PDATA
|$T40455| DCD	|$LN35@GetFIRCoef|
	DCD	0x4000a103
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\dssai\dssai.cpp

  024ac			 AREA	 |.text|, CODE, ARM

  024ac		 |?GetFIRCoef@@YAXPAXKKK@Z| PROC	; GetFIRCoef

; 1034 : {

  024ac		 |$LN35@GetFIRCoef|
  024ac	e1a0c00d	 mov         r12, sp
  024b0	e92d000f	 stmdb       sp!, {r0 - r3}
  024b4	e92d5000	 stmdb       sp!, {r12, lr}
  024b8		 |$M40452|

; 1035 :     if (dwTaps == 3)

  024b8	e59d300c	 ldr         r3, [sp, #0xC]
  024bc	e3530003	 cmp         r3, #3
  024c0	1a000014	 bne         |$LN30@GetFIRCoef|

; 1036 :     {
; 1037 :         if (dwPhaseInc > (128*14))  {memcpy(pCoeffs, g_coef3_M16, sizeof(g_coef3_M16));}

  024c4	e59d3010	 ldr         r3, [sp, #0x10]
  024c8	e3530c07	 cmp         r3, #7, 24
  024cc	9a000004	 bls         |$LN29@GetFIRCoef|
  024d0	e3a02028	 mov         r2, #0x28
  024d4	e59f1250	 ldr         r1, [pc, #0x250]
  024d8	e59d0008	 ldr         r0, [sp, #8]
  024dc	eb000000	 bl          memcpy
  024e0	ea00000b	 b           |$LN28@GetFIRCoef|
  024e4		 |$LN29@GetFIRCoef|

; 1038 :         else if (dwFlickerFilter)   {memcpy(pCoeffs, g_coef3_M16, sizeof(g_coef3_M16));}

  024e4	e59d3014	 ldr         r3, [sp, #0x14]
  024e8	e3530000	 cmp         r3, #0
  024ec	0a000004	 beq         |$LN27@GetFIRCoef|
  024f0	e3a02028	 mov         r2, #0x28
  024f4	e59f1230	 ldr         r1, [pc, #0x230]
  024f8	e59d0008	 ldr         r0, [sp, #8]
  024fc	eb000000	 bl          memcpy
  02500	ea000003	 b           |$LN26@GetFIRCoef|
  02504		 |$LN27@GetFIRCoef|

; 1039 :         else                        {memcpy(pCoeffs, g_coef3_M8, sizeof(g_coef3_M8));  }

  02504	e3a02028	 mov         r2, #0x28
  02508	e59f1218	 ldr         r1, [pc, #0x218]
  0250c	e59d0008	 ldr         r0, [sp, #8]
  02510	eb000000	 bl          memcpy
  02514		 |$LN26@GetFIRCoef|
  02514		 |$LN28@GetFIRCoef|

; 1040 :     }
; 1041 :     else //dwTaps == 5

  02514	ea000075	 b           |$LN25@GetFIRCoef|
  02518		 |$LN30@GetFIRCoef|

; 1042 :     {
; 1043 :         if(dwPhaseInc > (128*26))                               {memcpy(pCoeffs, g_coef_M32, sizeof(g_coef_M32));}

  02518	e59d3010	 ldr         r3, [sp, #0x10]
  0251c	e3530c0d	 cmp         r3, #0xD, 24
  02520	9a000004	 bls         |$LN24@GetFIRCoef|
  02524	e3a02028	 mov         r2, #0x28
  02528	e59f11f4	 ldr         r1, [pc, #0x1F4]
  0252c	e59d0008	 ldr         r0, [sp, #8]
  02530	eb000000	 bl          memcpy
  02534	ea00006d	 b           |$LN23@GetFIRCoef|
  02538		 |$LN24@GetFIRCoef|

; 1044 :         else if (dwPhaseInc > (128*22))                         {memcpy(pCoeffs, g_coef_M26, sizeof(g_coef_M26));}

  02538	e59d3010	 ldr         r3, [sp, #0x10]
  0253c	e3530c0b	 cmp         r3, #0xB, 24
  02540	9a000004	 bls         |$LN22@GetFIRCoef|
  02544	e3a02028	 mov         r2, #0x28
  02548	e59f11d0	 ldr         r1, [pc, #0x1D0]
  0254c	e59d0008	 ldr         r0, [sp, #8]
  02550	eb000000	 bl          memcpy
  02554	ea000065	 b           |$LN21@GetFIRCoef|
  02558		 |$LN22@GetFIRCoef|

; 1045 :         else if (dwPhaseInc > (128*19))                         {memcpy(pCoeffs, g_coef_M22, sizeof(g_coef_M22));}

  02558	e59d3010	 ldr         r3, [sp, #0x10]
  0255c	e3530d26	 cmp         r3, #0x26, 26
  02560	9a000004	 bls         |$LN20@GetFIRCoef|
  02564	e3a02028	 mov         r2, #0x28
  02568	e59f11ac	 ldr         r1, [pc, #0x1AC]
  0256c	e59d0008	 ldr         r0, [sp, #8]
  02570	eb000000	 bl          memcpy
  02574	ea00005d	 b           |$LN19@GetFIRCoef|
  02578		 |$LN20@GetFIRCoef|

; 1046 :         else if (dwPhaseInc > (128*16))                         {memcpy(pCoeffs, g_coef_M19, sizeof(g_coef_M19));}

  02578	e59d3010	 ldr         r3, [sp, #0x10]
  0257c	e3530b02	 cmp         r3, #2, 22
  02580	9a000004	 bls         |$LN18@GetFIRCoef|
  02584	e3a02028	 mov         r2, #0x28
  02588	e59f1188	 ldr         r1, [pc, #0x188]
  0258c	e59d0008	 ldr         r0, [sp, #8]
  02590	eb000000	 bl          memcpy
  02594	ea000055	 b           |$LN17@GetFIRCoef|
  02598		 |$LN18@GetFIRCoef|

; 1047 :         else if (dwPhaseInc > (128*14))                         {memcpy(pCoeffs, g_coef_M16, sizeof(g_coef_M16));}

  02598	e59d3010	 ldr         r3, [sp, #0x10]
  0259c	e3530c07	 cmp         r3, #7, 24
  025a0	9a000004	 bls         |$LN16@GetFIRCoef|
  025a4	e3a02028	 mov         r2, #0x28
  025a8	e59f114c	 ldr         r1, [pc, #0x14C]
  025ac	e59d0008	 ldr         r0, [sp, #8]
  025b0	eb000000	 bl          memcpy
  025b4	ea00004d	 b           |$LN15@GetFIRCoef|
  025b8		 |$LN16@GetFIRCoef|

; 1048 :         else if ((dwPhaseInc > (128*13)) && (!dwFlickerFilter)) {memcpy(pCoeffs, g_coef_M14, sizeof(g_coef_M14));}

  025b8	e59d3010	 ldr         r3, [sp, #0x10]
  025bc	e3530d1a	 cmp         r3, #0x1A, 26
  025c0	9a000007	 bls         |$LN14@GetFIRCoef|
  025c4	e59d3014	 ldr         r3, [sp, #0x14]
  025c8	e3530000	 cmp         r3, #0
  025cc	1a000004	 bne         |$LN14@GetFIRCoef|
  025d0	e3a02028	 mov         r2, #0x28
  025d4	e59f1138	 ldr         r1, [pc, #0x138]
  025d8	e59d0008	 ldr         r0, [sp, #8]
  025dc	eb000000	 bl          memcpy
  025e0	ea000042	 b           |$LN13@GetFIRCoef|
  025e4		 |$LN14@GetFIRCoef|

; 1049 :         else if ((dwPhaseInc > (128*12)) && (!dwFlickerFilter)) {memcpy(pCoeffs, g_coef_M13, sizeof(g_coef_M13));}

  025e4	e59d3010	 ldr         r3, [sp, #0x10]
  025e8	e3530c06	 cmp         r3, #6, 24
  025ec	9a000007	 bls         |$LN12@GetFIRCoef|
  025f0	e59d3014	 ldr         r3, [sp, #0x14]
  025f4	e3530000	 cmp         r3, #0
  025f8	1a000004	 bne         |$LN12@GetFIRCoef|
  025fc	e3a02028	 mov         r2, #0x28
  02600	e59f1108	 ldr         r1, [pc, #0x108]
  02604	e59d0008	 ldr         r0, [sp, #8]
  02608	eb000000	 bl          memcpy
  0260c	ea000037	 b           |$LN11@GetFIRCoef|
  02610		 |$LN12@GetFIRCoef|

; 1050 :         else if ((dwPhaseInc > (128*11)) && (!dwFlickerFilter)) {memcpy(pCoeffs, g_coef_M12, sizeof(g_coef_M12));}

  02610	e59d3010	 ldr         r3, [sp, #0x10]
  02614	e3530d16	 cmp         r3, #0x16, 26
  02618	9a000007	 bls         |$LN10@GetFIRCoef|
  0261c	e59d3014	 ldr         r3, [sp, #0x14]
  02620	e3530000	 cmp         r3, #0
  02624	1a000004	 bne         |$LN10@GetFIRCoef|
  02628	e3a02028	 mov         r2, #0x28
  0262c	e59f10d8	 ldr         r1, [pc, #0xD8]
  02630	e59d0008	 ldr         r0, [sp, #8]
  02634	eb000000	 bl          memcpy
  02638	ea00002c	 b           |$LN9@GetFIRCoef|
  0263c		 |$LN10@GetFIRCoef|

; 1051 :         else if ((dwPhaseInc > (128*10)) && (!dwFlickerFilter)) {memcpy(pCoeffs, g_coef_M11, sizeof(g_coef_M11));}

  0263c	e59d3010	 ldr         r3, [sp, #0x10]
  02640	e3530c05	 cmp         r3, #5, 24
  02644	9a000007	 bls         |$LN8@GetFIRCoef|
  02648	e59d3014	 ldr         r3, [sp, #0x14]
  0264c	e3530000	 cmp         r3, #0
  02650	1a000004	 bne         |$LN8@GetFIRCoef|
  02654	e3a02028	 mov         r2, #0x28
  02658	e59f10a8	 ldr         r1, [pc, #0xA8]
  0265c	e59d0008	 ldr         r0, [sp, #8]
  02660	eb000000	 bl          memcpy
  02664	ea000021	 b           |$LN7@GetFIRCoef|
  02668		 |$LN8@GetFIRCoef|

; 1052 :         else if ((dwPhaseInc > (128*9))  && (!dwFlickerFilter)) {memcpy(pCoeffs, g_coef_M10, sizeof(g_coef_M10));}

  02668	e59d3010	 ldr         r3, [sp, #0x10]
  0266c	e3530d12	 cmp         r3, #0x12, 26
  02670	9a000007	 bls         |$LN6@GetFIRCoef|
  02674	e59d3014	 ldr         r3, [sp, #0x14]
  02678	e3530000	 cmp         r3, #0
  0267c	1a000004	 bne         |$LN6@GetFIRCoef|
  02680	e3a02028	 mov         r2, #0x28
  02684	e59f1078	 ldr         r1, [pc, #0x78]
  02688	e59d0008	 ldr         r0, [sp, #8]
  0268c	eb000000	 bl          memcpy
  02690	ea000016	 b           |$LN5@GetFIRCoef|
  02694		 |$LN6@GetFIRCoef|

; 1053 :         else if ((dwPhaseInc > (128*8))  && (!dwFlickerFilter)) {memcpy(pCoeffs, g_coef_M9,  sizeof(g_coef_M9)); }

  02694	e59d3010	 ldr         r3, [sp, #0x10]
  02698	e3530b01	 cmp         r3, #1, 22
  0269c	9a000007	 bls         |$LN4@GetFIRCoef|
  026a0	e59d3014	 ldr         r3, [sp, #0x14]
  026a4	e3530000	 cmp         r3, #0
  026a8	1a000004	 bne         |$LN4@GetFIRCoef|
  026ac	e3a02028	 mov         r2, #0x28
  026b0	e59f1048	 ldr         r1, [pc, #0x48]
  026b4	e59d0008	 ldr         r0, [sp, #8]
  026b8	eb000000	 bl          memcpy
  026bc	ea00000b	 b           |$LN3@GetFIRCoef|
  026c0		 |$LN4@GetFIRCoef|

; 1054 :         else if (dwFlickerFilter)                               {memcpy(pCoeffs, g_coef_M16, sizeof(g_coef_M16));}

  026c0	e59d3014	 ldr         r3, [sp, #0x14]
  026c4	e3530000	 cmp         r3, #0
  026c8	0a000004	 beq         |$LN2@GetFIRCoef|
  026cc	e3a02028	 mov         r2, #0x28
  026d0	e59f1024	 ldr         r1, [pc, #0x24]
  026d4	e59d0008	 ldr         r0, [sp, #8]
  026d8	eb000000	 bl          memcpy
  026dc	ea000003	 b           |$LN1@GetFIRCoef|
  026e0		 |$LN2@GetFIRCoef|

; 1055 :         else                                                    {memcpy(pCoeffs, g_coef_M8,  sizeof(g_coef_M8)); }

  026e0	e3a02028	 mov         r2, #0x28
  026e4	e59f100c	 ldr         r1, [pc, #0xC]
  026e8	e59d0008	 ldr         r0, [sp, #8]
  026ec	eb000000	 bl          memcpy
  026f0		 |$LN1@GetFIRCoef|
  026f0		 |$LN3@GetFIRCoef|
  026f0		 |$LN5@GetFIRCoef|
  026f0		 |$LN7@GetFIRCoef|
  026f0		 |$LN9@GetFIRCoef|
  026f0		 |$LN11@GetFIRCoef|
  026f0		 |$LN13@GetFIRCoef|
  026f0		 |$LN15@GetFIRCoef|
  026f0		 |$LN17@GetFIRCoef|
  026f0		 |$LN19@GetFIRCoef|
  026f0		 |$LN21@GetFIRCoef|
  026f0		 |$LN23@GetFIRCoef|
  026f0		 |$LN25@GetFIRCoef|

; 1056 :   }
; 1057 : }

  026f0	e89d6000	 ldmia       sp, {sp, lr}
  026f4	e12fff1e	 bx          lr
  026f8		 |$LN36@GetFIRCoef|
  026f8		 |$LN37@GetFIRCoef|
  026f8	00000000	 DCD         |?g_coef_M8@@3PAY07EA|
  026fc		 |$LN38@GetFIRCoef|
  026fc	00000000	 DCD         |?g_coef_M16@@3PAY07EA|
  02700		 |$LN39@GetFIRCoef|
  02700	00000000	 DCD         |?g_coef_M9@@3PAY07EA|
  02704		 |$LN40@GetFIRCoef|
  02704	00000000	 DCD         |?g_coef_M10@@3PAY07EA|
  02708		 |$LN41@GetFIRCoef|
  02708	00000000	 DCD         |?g_coef_M11@@3PAY07EA|
  0270c		 |$LN42@GetFIRCoef|
  0270c	00000000	 DCD         |?g_coef_M12@@3PAY07EA|
  02710		 |$LN43@GetFIRCoef|
  02710	00000000	 DCD         |?g_coef_M13@@3PAY07EA|
  02714		 |$LN44@GetFIRCoef|
  02714	00000000	 DCD         |?g_coef_M14@@3PAY07EA|
  02718		 |$LN45@GetFIRCoef|
  02718	00000000	 DCD         |?g_coef_M19@@3PAY07EA|
  0271c		 |$LN46@GetFIRCoef|
  0271c	00000000	 DCD         |?g_coef_M22@@3PAY07EA|
  02720		 |$LN47@GetFIRCoef|
  02720	00000000	 DCD         |?g_coef_M26@@3PAY07EA|
  02724		 |$LN48@GetFIRCoef|
  02724	00000000	 DCD         |?g_coef_M32@@3PAY07EA|
  02728		 |$LN49@GetFIRCoef|
  02728	00000000	 DCD         |?g_coef3_M8@@3PAY07EA|
  0272c		 |$LN50@GetFIRCoef|
  0272c	00000000	 DCD         |?g_coef3_M16@@3PAY07EA|
  02730		 |$M40453|

			 ENDP  ; |?GetFIRCoef@@YAXPAXKKK@Z|, GetFIRCoef

	EXPORT	|?NeedISPResizer@@YAHKKK@Z|		; NeedISPResizer
	IMPORT	|ceil|
	IMPORT	|__utod|
	IMPORT	|__divd|
	IMPORT	|__dtou|

  00060			 AREA	 |.pdata|, PDATA
|$T40483| DCD	|$LN14@NeedISPRes|
	DCD	0x40005804
; Function compile flags: /Odtp

  02730			 AREA	 |.text|, CODE, ARM

  02730		 |?NeedISPResizer@@YAHKKK@Z| PROC	; NeedISPResizer

; 1061 : {

  02730		 |$LN14@NeedISPRes|
  02730	e1a0c00d	 mov         r12, sp
  02734	e92d0007	 stmdb       sp!, {r0 - r2}
  02738	e92d5000	 stmdb       sp!, {r12, lr}
  0273c	e24dd020	 sub         sp, sp, #0x20
  02740		 |$M40480|

; 1062 :     DWORD totalScaleRequired;
; 1063 : 
; 1064 :     /* Not using ISP resizer for upsampling */    
; 1065 :     if ((dwHorzScale<1024) || (dwVertScale<1024))

  02740	e59d3028	 ldr         r3, [sp, #0x28]
  02744	e3530b01	 cmp         r3, #1, 22
  02748	3a000002	 bcc         |$LN4@NeedISPRes|
  0274c	e59d302c	 ldr         r3, [sp, #0x2C]
  02750	e3530b01	 cmp         r3, #1, 22
  02754	2a000002	 bcs         |$LN5@NeedISPRes|
  02758		 |$LN4@NeedISPRes|

; 1066 :         return FALSE;

  02758	e3a03000	 mov         r3, #0
  0275c	e58d3004	 str         r3, [sp, #4]
  02760	ea000046	 b           |$LN6@NeedISPRes|
  02764		 |$LN5@NeedISPRes|

; 1067 :     /* no scalar needed */
; 1068 :     if ((dwHorzScale==1024) && (dwVertScale==1024))

  02764	e59d3028	 ldr         r3, [sp, #0x28]
  02768	e3530b01	 cmp         r3, #1, 22
  0276c	1a000005	 bne         |$LN3@NeedISPRes|
  02770	e59d302c	 ldr         r3, [sp, #0x2C]
  02774	e3530b01	 cmp         r3, #1, 22
  02778	1a000002	 bne         |$LN3@NeedISPRes|

; 1069 :         return FALSE;

  0277c	e3a03000	 mov         r3, #0
  02780	e58d3004	 str         r3, [sp, #4]
  02784	ea00003d	 b           |$LN6@NeedISPRes|
  02788		 |$LN3@NeedISPRes|

; 1070 : 
; 1071 :     /* all other cases involve downsampling */
; 1072 :     dwHorzScale=(DWORD)ceil((double)dwHorzScale/1024);

  02788	e59d0028	 ldr         r0, [sp, #0x28]
  0278c	eb000000	 bl          __utod
  02790	e3a02000	 mov         r2, #0
  02794	e3a03101	 mov         r3, #1, 2
  02798	e3833609	 orr         r3, r3, #9, 12
  0279c	eb000000	 bl          __divd
  027a0	eb000000	 bl          ceil
  027a4	e58d100c	 str         r1, [sp, #0xC]
  027a8	e58d0008	 str         r0, [sp, #8]
  027ac	e59d0008	 ldr         r0, [sp, #8]
  027b0	e59d100c	 ldr         r1, [sp, #0xC]
  027b4	eb000000	 bl          __dtou
  027b8	e58d0028	 str         r0, [sp, #0x28]

; 1073 :     dwVertScale=(DWORD)ceil((double)dwVertScale/1024);

  027bc	e59d002c	 ldr         r0, [sp, #0x2C]
  027c0	eb000000	 bl          __utod
  027c4	e3a02000	 mov         r2, #0
  027c8	e3a03101	 mov         r3, #1, 2
  027cc	e3833609	 orr         r3, r3, #9, 12
  027d0	eb000000	 bl          __divd
  027d4	eb000000	 bl          ceil
  027d8	e58d1014	 str         r1, [sp, #0x14]
  027dc	e58d0010	 str         r0, [sp, #0x10]
  027e0	e59d0010	 ldr         r0, [sp, #0x10]
  027e4	e59d1014	 ldr         r1, [sp, #0x14]
  027e8	eb000000	 bl          __dtou
  027ec	e58d002c	 str         r0, [sp, #0x2C]

; 1074 : 
; 1075 :     totalScaleRequired=((dwHorzScale==1)?0:dwHorzScale)+
; 1076 :                         ((dwVertScale==1)?0:dwVertScale);

  027f0	e59d3028	 ldr         r3, [sp, #0x28]
  027f4	e3530001	 cmp         r3, #1
  027f8	1a000002	 bne         |$LN8@NeedISPRes|
  027fc	e3a03000	 mov         r3, #0
  02800	e58d3018	 str         r3, [sp, #0x18]
  02804	ea000001	 b           |$LN9@NeedISPRes|
  02808		 |$LN8@NeedISPRes|
  02808	e59d3028	 ldr         r3, [sp, #0x28]
  0280c	e58d3018	 str         r3, [sp, #0x18]
  02810		 |$LN9@NeedISPRes|
  02810	e59d302c	 ldr         r3, [sp, #0x2C]
  02814	e3530001	 cmp         r3, #1
  02818	1a000002	 bne         |$LN10@NeedISPRes|
  0281c	e3a03000	 mov         r3, #0
  02820	e58d301c	 str         r3, [sp, #0x1C]
  02824	ea000001	 b           |$LN11@NeedISPRes|
  02828		 |$LN10@NeedISPRes|
  02828	e59d302c	 ldr         r3, [sp, #0x2C]
  0282c	e58d301c	 str         r3, [sp, #0x1C]
  02830		 |$LN11@NeedISPRes|
  02830	e59d2018	 ldr         r2, [sp, #0x18]
  02834	e59d301c	 ldr         r3, [sp, #0x1C]
  02838	e0823003	 add         r3, r2, r3
  0283c	e58d3000	 str         r3, [sp]

; 1077 :                         
; 1078 :     if ((totalScaleRequired>PCD) && (dwHorzScale<=4) && (dwVertScale<=4))

  02840	e59d2000	 ldr         r2, [sp]
  02844	e59d3030	 ldr         r3, [sp, #0x30]
  02848	e1520003	 cmp         r2, r3
  0284c	9a000009	 bls         |$LN2@NeedISPRes|
  02850	e59d3028	 ldr         r3, [sp, #0x28]
  02854	e3530004	 cmp         r3, #4
  02858	8a000006	 bhi         |$LN2@NeedISPRes|
  0285c	e59d302c	 ldr         r3, [sp, #0x2C]
  02860	e3530004	 cmp         r3, #4
  02864	8a000003	 bhi         |$LN2@NeedISPRes|

; 1079 :     {
; 1080 :         return TRUE;

  02868	e3a03001	 mov         r3, #1
  0286c	e58d3004	 str         r3, [sp, #4]
  02870	ea000002	 b           |$LN6@NeedISPRes|

; 1081 :     }
; 1082 :     else

  02874	ea000001	 b           |$LN1@NeedISPRes|
  02878		 |$LN2@NeedISPRes|

; 1083 :     {
; 1084 :         return FALSE;

  02878	e3a03000	 mov         r3, #0
  0287c	e58d3004	 str         r3, [sp, #4]
  02880		 |$LN1@NeedISPRes|
  02880		 |$LN6@NeedISPRes|

; 1085 :     }
; 1086 :         
; 1087 : }

  02880	e59d0004	 ldr         r0, [sp, #4]
  02884	e28dd020	 add         sp, sp, #0x20
  02888	e89d6000	 ldmia       sp, {sp, lr}
  0288c	e12fff1e	 bx          lr
  02890		 |$M40481|

			 ENDP  ; |?NeedISPResizer@@YAHKKK@Z|, NeedISPResizer

	EXPORT	|?SetScalingAttribs@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@PAUtagRECT@@1@Z| ; OMAPDisplayController::SetScalingAttribs
	EXPORT	|?SetScalingAttribs@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@KKKK@Z| ; OMAPDisplayController::SetScalingAttribs

  00068			 AREA	 |.pdata|, PDATA
|$T40489| DCD	|$LN6@SetScaling|
	DCD	0x40005b04
; Function compile flags: /Odtp

  02890			 AREA	 |.text|, CODE, ARM

  02890		 |?SetScalingAttribs@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@KKKK@Z| PROC ; OMAPDisplayController::SetScalingAttribs

; 1098 : {

  02890		 |$LN6@SetScaling|
  02890	e1a0c00d	 mov         r12, sp
  02894	e92d000f	 stmdb       sp!, {r0 - r3}
  02898	e92d5000	 stmdb       sp!, {r12, lr}
  0289c	e24dd030	 sub         sp, sp, #0x30
  028a0		 |$M40486|

; 1099 :     RECT    srcRect,
; 1100 :             destRect;
; 1101 : 
; 1102 :     //  Check for surface
; 1103 :     if( g_rgPipelineMapping[ePipeline].pSurface == NULL )

  028a0	e59d103c	 ldr         r1, [sp, #0x3C]
  028a4	e3a03020	 mov         r3, #0x20
  028a8	e0020391	 mul         r2, r1, r3
  028ac	e59f3144	 ldr         r3, [pc, #0x144]
  028b0	e0833002	 add         r3, r3, r2
  028b4	e2833008	 add         r3, r3, #8
  028b8	e5933000	 ldr         r3, [r3]
  028bc	e3530000	 cmp         r3, #0
  028c0	1a000002	 bne         |$LN1@SetScaling|

; 1104 :         return FALSE;

  028c4	e3a03000	 mov         r3, #0
  028c8	e58d3020	 str         r3, [sp, #0x20]
  028cc	ea000045	 b           |$LN2@SetScaling|
  028d0		 |$LN1@SetScaling|

; 1105 :         
; 1106 :     //  Create src and dest RECTs for this scaling setup
; 1107 :     srcRect.left = 0;

  028d0	e3a03000	 mov         r3, #0
  028d4	e58d3010	 str         r3, [sp, #0x10]

; 1108 :     srcRect.top = 0;

  028d8	e3a03000	 mov         r3, #0
  028dc	e58d3014	 str         r3, [sp, #0x14]

; 1109 :     srcRect.right = g_rgPipelineMapping[ePipeline].pSurface->Width();

  028e0	e3a01000	 mov         r1, #0
  028e4	e59d003c	 ldr         r0, [sp, #0x3C]
  028e8	e3a03020	 mov         r3, #0x20
  028ec	e0020390	 mul         r2, r0, r3
  028f0	e59f3100	 ldr         r3, [pc, #0x100]
  028f4	e0833002	 add         r3, r3, r2
  028f8	e2833008	 add         r3, r3, #8
  028fc	e593e000	 ldr         lr, [r3]
  02900	e59d003c	 ldr         r0, [sp, #0x3C]
  02904	e3a03020	 mov         r3, #0x20
  02908	e0020390	 mul         r2, r0, r3
  0290c	e59f30e4	 ldr         r3, [pc, #0xE4]
  02910	e0833002	 add         r3, r3, r2
  02914	e2833008	 add         r3, r3, #8
  02918	e5930000	 ldr         r0, [r3]
  0291c	e59e3000	 ldr         r3, [lr]
  02920	e2833008	 add         r3, r3, #8
  02924	e5933000	 ldr         r3, [r3]
  02928	e1a0e00f	 mov         lr, pc
  0292c	e12fff13	 bx          r3
  02930	e58d0024	 str         r0, [sp, #0x24]
  02934	e59d3024	 ldr         r3, [sp, #0x24]
  02938	e58d3018	 str         r3, [sp, #0x18]

; 1110 :     srcRect.bottom = g_rgPipelineMapping[ePipeline].pSurface->Height();

  0293c	e3a01000	 mov         r1, #0
  02940	e59d003c	 ldr         r0, [sp, #0x3C]
  02944	e3a03020	 mov         r3, #0x20
  02948	e0020390	 mul         r2, r0, r3
  0294c	e59f30a4	 ldr         r3, [pc, #0xA4]
  02950	e0833002	 add         r3, r3, r2
  02954	e2833008	 add         r3, r3, #8
  02958	e593e000	 ldr         lr, [r3]
  0295c	e59d003c	 ldr         r0, [sp, #0x3C]
  02960	e3a03020	 mov         r3, #0x20
  02964	e0020390	 mul         r2, r0, r3
  02968	e59f3088	 ldr         r3, [pc, #0x88]
  0296c	e0833002	 add         r3, r3, r2
  02970	e2833008	 add         r3, r3, #8
  02974	e5930000	 ldr         r0, [r3]
  02978	e59e3000	 ldr         r3, [lr]
  0297c	e283300c	 add         r3, r3, #0xC
  02980	e5933000	 ldr         r3, [r3]
  02984	e1a0e00f	 mov         lr, pc
  02988	e12fff13	 bx          r3
  0298c	e58d0028	 str         r0, [sp, #0x28]
  02990	e59d3028	 ldr         r3, [sp, #0x28]
  02994	e58d301c	 str         r3, [sp, #0x1C]

; 1111 : 
; 1112 :     destRect.left = dwPosX;

  02998	e59d3048	 ldr         r3, [sp, #0x48]
  0299c	e58d3000	 str         r3, [sp]

; 1113 :     destRect.top = dwPosY;

  029a0	e59d304c	 ldr         r3, [sp, #0x4C]
  029a4	e58d3004	 str         r3, [sp, #4]

; 1114 :     destRect.right = dwPosX + dwWidth;

  029a8	e59d2048	 ldr         r2, [sp, #0x48]
  029ac	e59d3040	 ldr         r3, [sp, #0x40]
  029b0	e0823003	 add         r3, r2, r3
  029b4	e58d3008	 str         r3, [sp, #8]

; 1115 :     destRect.bottom = dwPosY + dwHeight;

  029b8	e59d204c	 ldr         r2, [sp, #0x4C]
  029bc	e59d3044	 ldr         r3, [sp, #0x44]
  029c0	e0823003	 add         r3, r2, r3
  029c4	e58d300c	 str         r3, [sp, #0xC]

; 1116 : 
; 1117 :     //  Call the RECT based scaling method
; 1118 :     return SetScalingAttribs( ePipeline, &srcRect, &destRect );

  029c8	e28d3000	 add         r3, sp, #0
  029cc	e28d2010	 add         r2, sp, #0x10
  029d0	e59d103c	 ldr         r1, [sp, #0x3C]
  029d4	e59d0038	 ldr         r0, [sp, #0x38]
  029d8	eb000000	 bl          |?SetScalingAttribs@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@PAUtagRECT@@1@Z|
  029dc	e58d002c	 str         r0, [sp, #0x2C]
  029e0	e59d302c	 ldr         r3, [sp, #0x2C]
  029e4	e58d3020	 str         r3, [sp, #0x20]
  029e8		 |$LN2@SetScaling|

; 1119 : }

  029e8	e59d0020	 ldr         r0, [sp, #0x20]
  029ec	e28dd030	 add         sp, sp, #0x30
  029f0	e89d6000	 ldmia       sp, {sp, lr}
  029f4	e12fff1e	 bx          lr
  029f8		 |$LN7@SetScaling|
  029f8		 |$LN8@SetScaling|
  029f8	00000000	 DCD         |?g_rgPipelineMapping@@3PAUOMAPPipelineConfig@@A|
  029fc		 |$M40487|

			 ENDP  ; |?SetScalingAttribs@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@KKKK@Z|, OMAPDisplayController::SetScalingAttribs

	EXPORT	|??_C@_1JI@NGBENMPF@?$AAS?$AAe?$AAt?$AAS?$AAc?$AAa?$AAl?$AAi?$AAn?$AAg?$AAA?$AAt?$AAt?$AAr?$AAi?$AAb?$AAs?$AA?3?$AA?5?$AAC?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg@| [ DATA ] ; `string'
	EXPORT	|?StartResizer@OMAPSurface@@QAAHKK@Z|	; OMAPSurface::StartResizer
	EXPORT	|?ConfigResizerParams@OMAPSurface@@QAAHPAUtagRECT@@0W4OMAP_DSS_ROTATION@@@Z| ; OMAPSurface::ConfigResizerParams
	EXPORT	|?isResizerEnabled@OMAPSurface@@QAAHXZ|	; OMAPSurface::isResizerEnabled
	EXPORT	|??_C@_1DA@NIKAMDK@?$AA?7?$AA?5?$AAR?$AAe?$AAs?$AAi?$AAz?$AAe?$AAr?$AA?5?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAd?$AA?5?$AA?$CF?$AAd?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FK@COFGINGN@?$AA?5?$AA?5?$AAp?$AAS?$AAu?$AAr?$AAf?$AAa?$AAc?$AAe?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?5?$AAS?$AAt?$AAr?$AAi?$AAd?$AAe?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?5?$AAR?$AAo@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CG@HBFGDEMK@?$AA?5?$AA?5?$AAe?$AAP?$AAi?$AAp?$AAe?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GC@FDNJDJGD@?$AA?5?$AA?5?$AAd?$AAw?$AAH?$AAo?$AAr?$AAz?$AAD?$AAe?$AAc?$AAi?$AAm?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?5?$AA?5?$AAd?$AAw?$AAV?$AAe?$AAr?$AAt?$AAD@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FA@LJGLKAMF@?$AA?5?$AA?5?$AAd?$AAw?$AAD?$AAe?$AAs?$AAt?$AAW?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?5?$AA?5?$AAd?$AAw?$AAD?$AAe?$AAs?$AAt?$AAH?$AAe?$AAi?$AAg?$AAh?$AAt@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FA@BOFPJMEK@?$AA?5?$AA?5?$AAd?$AAw?$AAS?$AAr?$AAc?$AAW?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?5?$AA?5?$AAd?$AAw?$AAS?$AAr?$AAc?$AAH?$AAe?$AAi?$AAg?$AAh?$AAt?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HO@DDOBIAFA@?$AA?5?$AA?5?$AAd?$AAw?$AAS?$AAc?$AAa?$AAl?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?5?$AA?5?$AAd?$AAw?$AAH?$AAo?$AAr?$AAz@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GE@JGNKCEIM@?$AA?5?$AA?5?$AAC?$AAo?$AAm?$AAp?$AAu?$AAt?$AAe?$AAd?$AA?5?$AAO?$AAr?$AAi?$AAg?$AAi?$AAn?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?$CF?$AAd?$AA?$CJ?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAr?$AAo@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DM@GDJHIMEE@?$AA?5?$AA?5?$AAD?$AAe?$AAs?$AAt?$AA?5?$AAR?$AAE?$AAC?$AAT?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?$CF?$AAd?$AA?$CJ?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DM@OOMNMCIJ@?$AA?5?$AA?5?$AAS?$AAr?$AAc?$AA?5?$AA?5?$AAR?$AAE?$AAC?$AAT?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?$CF?$AAd?$AA?$CJ?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GC@FJEDJLBE@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAO?$AAM?$AAA?$AAP?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAS?$AAe?$AAt@| [ DATA ] ; `string'
	EXPORT	|?OmapAssocSurface@OMAPSurface@@QAAPAV1@XZ| ; OMAPSurface::OmapAssocSurface
	EXPORT	|?ResizeParams@OMAPSurface@@QAAPAURSZParams_t@@XZ| ; OMAPSurface::ResizeParams
	EXPORT	|?SetRSZHandle@OMAPSurface@@QAAXPAXH@Z|	; OMAPSurface::SetRSZHandle
	EXPORT	|?UseResizer@OMAPSurface@@QAAHH@Z|	; OMAPSurface::UseResizer
	EXPORT	|?GetRSZHandle@OMAPSurface@@QAAPAXH@Z|	; OMAPSurface::GetRSZHandle
	EXPORT	|__$ArrayPad$| [ DATA ]
	IMPORT	|?Dump_DISPC_VID@@YAXPAUOMAP_VID_REGS@@PAIK@Z| ; Dump_DISPC_VID
	IMPORT	|?g_dwScalingCoeff_Vert_Down_3_Taps@@3PAKA| ; g_dwScalingCoeff_Vert_Down_3_Taps
	IMPORT	|?g_dwScalingCoeff_Vert_Up_3_Taps@@3PAKA| ; g_dwScalingCoeff_Vert_Up_3_Taps
	IMPORT	|?g_dwScalingCoeff_Vert_Down_5_Taps@@3PAKA| ; g_dwScalingCoeff_Vert_Down_5_Taps
	IMPORT	|?g_dwScalingCoeff_Horiz_Up@@3PAKA|	; g_dwScalingCoeff_Horiz_Up
	IMPORT	|?g_dwScalingCoeff_Horiz_Down@@3PAKA|	; g_dwScalingCoeff_Horiz_Down
	IMPORT	|memset|
	IMPORT	|LcdPdd_Get_PixClkDiv|
	IMPORT	|__security_cookie|
	IMPORT	|__GSHandlerCheck|
	IMPORT	|__rt_udiv|
	IMPORT	|memcpy|
	IMPORT	|__security_check_cookie|

  00070			 AREA	 |.pdata|, PDATA
|$T40548| DCD	|$LN150@SetScaling@2|
	DCD	0xc008a304

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JI@NGBENMPF@?$AAS?$AAe?$AAt?$AAS?$AAc?$AAa?$AAl?$AAi?$AAn?$AAg?$AAA?$AAt?$AAt?$AAr?$AAi?$AAb?$AAs?$AA?3?$AA?5?$AAC?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg@| DCB "S"
	DCB	0x0, "e", 0x0, "t", 0x0, "S", 0x0, "c", 0x0, "a", 0x0, "l"
	DCB	0x0, "i", 0x0, "n", 0x0, "g", 0x0, "A", 0x0, "t", 0x0, "t"
	DCB	0x0, "r", 0x0, "i", 0x0, "b", 0x0, "s", 0x0, ":", 0x0, " "
	DCB	0x0, "C", 0x0, "a", 0x0, "n", 0x0, "n", 0x0, "o", 0x0, "t"
	DCB	0x0, " ", 0x0, "c", 0x0, "o", 0x0, "n", 0x0, "f", 0x0, "i"
	DCB	0x0, "g", 0x0, "u", 0x0, "r", 0x0, "e", 0x0, "/", 0x0, "s"
	DCB	0x0, "t", 0x0, "a", 0x0, "r", 0x0, "t", 0x0, " ", 0x0, "I"
	DCB	0x0, "S", 0x0, "P", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "s"
	DCB	0x0, "i", 0x0, "z", 0x0, "e", 0x0, "r", 0x0, ";", 0x0, " "
	DCB	0x0, "C", 0x0, "r", 0x0, "o", 0x0, "p", 0x0, "p", 0x0, "i"
	DCB	0x0, "n", 0x0, "g", 0x0, " ", 0x0, "t", 0x0, "h", 0x0, "e"
	DCB	0x0, " ", 0x0, "i", 0x0, "m", 0x0, "a", 0x0, "g", 0x0, "e"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@NIKAMDK@?$AA?7?$AA?5?$AAR?$AAe?$AAs?$AAi?$AAz?$AAe?$AAr?$AA?5?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAd?$AA?5?$AA?$CF?$AAd?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| DCB 0x9
	DCB	0x0, " ", 0x0, "R", 0x0, "e", 0x0, "s", 0x0, "i", 0x0, "z"
	DCB	0x0, "e", 0x0, "r", 0x0, " ", 0x0, "E", 0x0, "n", 0x0, "a"
	DCB	0x0, "b", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, " ", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FK@COFGINGN@?$AA?5?$AA?5?$AAp?$AAS?$AAu?$AAr?$AAf?$AAa?$AAc?$AAe?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?5?$AAS?$AAt?$AAr?$AAi?$AAd?$AAe?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?5?$AAR?$AAo@| DCB " "
	DCB	0x0, " ", 0x0, "p", 0x0, "S", 0x0, "u", 0x0, "r", 0x0, "f"
	DCB	0x0, "a", 0x0, "c", 0x0, "e", 0x0, " ", 0x0, "=", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, " ", 0x0, "S"
	DCB	0x0, "t", 0x0, "r", 0x0, "i", 0x0, "d", 0x0, "e", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, "R"
	DCB	0x0, "o", 0x0, "w", 0x0, "_", 0x0, "I", 0x0, "n", 0x0, "c"
	DCB	0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CG@HBFGDEMK@?$AA?5?$AA?5?$AAe?$AAP?$AAi?$AAp?$AAe?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB " "
	DCB	0x0, " ", 0x0, "e", 0x0, "P", 0x0, "i", 0x0, "p", 0x0, "e"
	DCB	0x0, "l", 0x0, "i", 0x0, "n", 0x0, "e", 0x0, " ", 0x0, "="
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GC@FDNJDJGD@?$AA?5?$AA?5?$AAd?$AAw?$AAH?$AAo?$AAr?$AAz?$AAD?$AAe?$AAc?$AAi?$AAm?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?5?$AA?5?$AAd?$AAw?$AAV?$AAe?$AAr?$AAt?$AAD@| DCB " "
	DCB	0x0, " ", 0x0, "d", 0x0, "w", 0x0, "H", 0x0, "o", 0x0, "r"
	DCB	0x0, "z", 0x0, "D", 0x0, "e", 0x0, "c", 0x0, "i", 0x0, "m"
	DCB	0x0, "a", 0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, " "
	DCB	0x0, "d", 0x0, "w", 0x0, "V", 0x0, "e", 0x0, "r", 0x0, "t"
	DCB	0x0, "D", 0x0, "e", 0x0, "c", 0x0, "i", 0x0, "m", 0x0, "a"
	DCB	0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, " ", 0x0, "="
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FA@LJGLKAMF@?$AA?5?$AA?5?$AAd?$AAw?$AAD?$AAe?$AAs?$AAt?$AAW?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?5?$AA?5?$AAd?$AAw?$AAD?$AAe?$AAs?$AAt?$AAH?$AAe?$AAi?$AAg?$AAh?$AAt@| DCB " "
	DCB	0x0, " ", 0x0, "d", 0x0, "w", 0x0, "D", 0x0, "e", 0x0, "s"
	DCB	0x0, "t", 0x0, "W", 0x0, "i", 0x0, "d", 0x0, "t", 0x0, "h"
	DCB	0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, " "
	DCB	0x0, " ", 0x0, "d", 0x0, "w", 0x0, "D", 0x0, "e", 0x0, "s"
	DCB	0x0, "t", 0x0, "H", 0x0, "e", 0x0, "i", 0x0, "g", 0x0, "h"
	DCB	0x0, "t", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FA@BOFPJMEK@?$AA?5?$AA?5?$AAd?$AAw?$AAS?$AAr?$AAc?$AAW?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?5?$AA?5?$AAd?$AAw?$AAS?$AAr?$AAc?$AAH?$AAe?$AAi?$AAg?$AAh?$AAt?$AA?5@| DCB " "
	DCB	0x0, " ", 0x0, "d", 0x0, "w", 0x0, "S", 0x0, "r", 0x0, "c"
	DCB	0x0, "W", 0x0, "i", 0x0, "d", 0x0, "t", 0x0, "h", 0x0, " "
	DCB	0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, " "
	DCB	0x0, " ", 0x0, "d", 0x0, "w", 0x0, "S", 0x0, "r", 0x0, "c"
	DCB	0x0, "H", 0x0, "e", 0x0, "i", 0x0, "g", 0x0, "h", 0x0, "t"
	DCB	0x0, " ", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HO@DDOBIAFA@?$AA?5?$AA?5?$AAd?$AAw?$AAS?$AAc?$AAa?$AAl?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?5?$AA?5?$AAd?$AAw?$AAH?$AAo?$AAr?$AAz@| DCB " "
	DCB	0x0, " ", 0x0, "d", 0x0, "w", 0x0, "S", 0x0, "c", 0x0, "a"
	DCB	0x0, "l", 0x0, "e", 0x0, "E", 0x0, "n", 0x0, "a", 0x0, "b"
	DCB	0x0, "l", 0x0, "e", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, " "
	DCB	0x0, " ", 0x0, "d", 0x0, "w", 0x0, "H", 0x0, "o", 0x0, "r"
	DCB	0x0, "z", 0x0, "S", 0x0, "c", 0x0, "a", 0x0, "l", 0x0, "e"
	DCB	0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, " "
	DCB	0x0, " ", 0x0, "d", 0x0, "w", 0x0, "V", 0x0, "e", 0x0, "r"
	DCB	0x0, "t", 0x0, "S", 0x0, "c", 0x0, "a", 0x0, "l", 0x0, "e"
	DCB	0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GE@JGNKCEIM@?$AA?5?$AA?5?$AAC?$AAo?$AAm?$AAp?$AAu?$AAt?$AAe?$AAd?$AA?5?$AAO?$AAr?$AAi?$AAg?$AAi?$AAn?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?$CF?$AAd?$AA?$CJ?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAr?$AAo@| DCB " "
	DCB	0x0, " ", 0x0, "C", 0x0, "o", 0x0, "m", 0x0, "p", 0x0, "u"
	DCB	0x0, "t", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "O", 0x0, "r"
	DCB	0x0, "i", 0x0, "g", 0x0, "i", 0x0, "n", 0x0, " ", 0x0, "("
	DCB	0x0, "%", 0x0, "d", 0x0, ",", 0x0, "%", 0x0, "d", 0x0, ")"
	DCB	0x0, " ", 0x0, "f", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "r"
	DCB	0x0, "o", 0x0, "t", 0x0, "a", 0x0, "t", 0x0, "i", 0x0, "o"
	DCB	0x0, "n", 0x0, " ", 0x0, "a", 0x0, "n", 0x0, "g", 0x0, "l"
	DCB	0x0, "e", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@GDJHIMEE@?$AA?5?$AA?5?$AAD?$AAe?$AAs?$AAt?$AA?5?$AAR?$AAE?$AAC?$AAT?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?$CF?$AAd?$AA?$CJ?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB " "
	DCB	0x0, " ", 0x0, "D", 0x0, "e", 0x0, "s", 0x0, "t", 0x0, " "
	DCB	0x0, "R", 0x0, "E", 0x0, "C", 0x0, "T", 0x0, " ", 0x0, "("
	DCB	0x0, "%", 0x0, "d", 0x0, ",", 0x0, "%", 0x0, "d", 0x0, ")"
	DCB	0x0, " ", 0x0, "(", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, "%"
	DCB	0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@OOMNMCIJ@?$AA?5?$AA?5?$AAS?$AAr?$AAc?$AA?5?$AA?5?$AAR?$AAE?$AAC?$AAT?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?$CF?$AAd?$AA?$CJ?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB " "
	DCB	0x0, " ", 0x0, "S", 0x0, "r", 0x0, "c", 0x0, " ", 0x0, " "
	DCB	0x0, "R", 0x0, "E", 0x0, "C", 0x0, "T", 0x0, " ", 0x0, "("
	DCB	0x0, "%", 0x0, "d", 0x0, ",", 0x0, "%", 0x0, "d", 0x0, ")"
	DCB	0x0, " ", 0x0, "(", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, "%"
	DCB	0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GC@FJEDJLBE@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAO?$AAM?$AAA?$AAP?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAS?$AAe?$AAt@| DCB "I"
	DCB	0x0, "N", 0x0, "F", 0x0, "O", 0x0, ":", 0x0, " ", 0x0, "O"
	DCB	0x0, "M", 0x0, "A", 0x0, "P", 0x0, "D", 0x0, "i", 0x0, "s"
	DCB	0x0, "p", 0x0, "l", 0x0, "a", 0x0, "y", 0x0, "C", 0x0, "o"
	DCB	0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o", 0x0, "l", 0x0, "l"
	DCB	0x0, "e", 0x0, "r", 0x0, ":", 0x0, ":", 0x0, "S", 0x0, "e"
	DCB	0x0, "t", 0x0, "S", 0x0, "c", 0x0, "a", 0x0, "l", 0x0, "i"
	DCB	0x0, "n", 0x0, "g", 0x0, "A", 0x0, "t", 0x0, "t", 0x0, "r"
	DCB	0x0, "i", 0x0, "b", 0x0, "s", 0x0, ":", 0x0, " ", 0x0, 0x0
	DCB	0x0					; `string'

  00014			 AREA	 |.xdata|, DATA
|$T40544| DCD	0xfffffeac
; Function compile flags: /Odtp

  029fc			 AREA	 |.text|, CODE, ARM

  029fc	00000000	 DCD         |__GSHandlerCheck|
  02a00	00000000	 DCD         |$T40544|

  02a04		 |?SetScalingAttribs@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@PAUtagRECT@@1@Z| PROC ; OMAPDisplayController::SetScalingAttribs

; 1128 : {

  02a04		 |$LN150@SetScaling@2|
  02a04	e1a0c00d	 mov         r12, sp
  02a08	e92d000f	 stmdb       sp!, {r0 - r3}
  02a0c	e92d5010	 stmdb       sp!, {r4, r12, lr}
  02a10	e24ddfb9	 sub         sp, sp, #0xB9, 30
  02a14		 |$M40545|
  02a14	e59f30ec	 ldr         r3, [pc, #0xEC]
  02a18	e5933000	 ldr         r3, [r3]
  02a1c	e58d31ac	 str         r3, [sp, #0x1AC]

; 1129 :     BOOL                bResult = FALSE;

  02a20	e3a03000	 mov         r3, #0
  02a24	e58d3100	 str         r3, [sp, #0x100]

; 1130 :     OMAPSurface*        pSurface;
; 1131 :     OMAP_DSS_ROTATION   eRotation;
; 1132 :     BOOL                bMirror;
; 1133 :     DWORD   dwSrcWidth,
; 1134 :             dwSrcHeight,
; 1135 :             dwDestWidth,
; 1136 :             dwDestHeight;
; 1137 :     DWORD   dwHorzScale,
; 1138 :             dwVertScale;
; 1139 :     DWORD   dwX, dwY;
; 1140 :     DWORD   dwCurrAttribs;
; 1141 :     DWORD   dwScaleEnable = 0;

  02a28	e3a03000	 mov         r3, #0
  02a2c	e58d3004	 str         r3, [sp, #4]

; 1142 :     DWORD               dwAccum0 = 0;

  02a30	e3a03000	 mov         r3, #0
  02a34	e58d3114	 str         r3, [sp, #0x114]

; 1143 :     DWORD               dwAccum1 = 0;

  02a38	e3a03000	 mov         r3, #0
  02a3c	e58d3170	 str         r3, [sp, #0x170]

; 1144 :     DWORD               dwHorzDecimation = 1;

  02a40	e3a03001	 mov         r3, #1
  02a44	e58d316c	 str         r3, [sp, #0x16C]

; 1145 :     DWORD               dwVertDecimation = 1;

  02a48	e3a03001	 mov         r3, #1
  02a4c	e58d3168	 str         r3, [sp, #0x168]

; 1146 :     DWORD               dwInterlace = 0;

  02a50	e3a03000	 mov         r3, #0
  02a54	e58d307c	 str         r3, [sp, #0x7C]

; 1147 :     DWORD*  pHorizCoeffs = NULL;

  02a58	e3a03000	 mov         r3, #0
  02a5c	e58d3154	 str         r3, [sp, #0x154]

; 1148 :     DWORD*  pVertCoeffs = NULL;

  02a60	e3a03000	 mov         r3, #0
  02a64	e58d315c	 str         r3, [sp, #0x15C]

; 1149 :     DWORD               dwPixelsPerLine;
; 1150 :     DWORD   i;
; 1151 :     BOOL                bYUVRotated = FALSE;

  02a68	e3a03000	 mov         r3, #0
  02a6c	e58d3150	 str         r3, [sp, #0x150]

; 1152 :     DWORD               dwInterlaceCorrection;
; 1153 :     DWORD               dwData1, dwData2;
; 1154 :     DWORD               dwVTaps;
; 1155 :     DWORD               dwFlickerFilter = 0;

  02a70	e3a03000	 mov         r3, #0
  02a74	e58d3144	 str         r3, [sp, #0x144]

; 1156 :     BYTE                Coefficients[5][8];
; 1157 : 
; 1158 :     // Temp array to hold calculated Scaling Coeffs
; 1159 :     DWORD               dwHorizCoeffs[NUM_SCALING_COEFFS];
; 1160 :     DWORD               dwVertCoeffs[NUM_SCALING_COEFFS];
; 1161 :     RECT                privSrcRect = *pSrcRect;

  02a78	e59d12f8	 ldr         r1, [sp, #0x2F8]
  02a7c	e28d0f41	 add         r0, sp, #0x41, 30
  02a80	e3a02010	 mov         r2, #0x10
  02a84	eb000000	 bl          memcpy

; 1162 :     BOOL                bUseResizer = FALSE;

  02a88	e3a03000	 mov         r3, #0
  02a8c	e58d30f4	 str         r3, [sp, #0xF4]

; 1163 :     
; 1164 :     
; 1165 :     //  Access the regs
; 1166 :     if( AccessRegs() == FALSE )

  02a90	e59d02f0	 ldr         r0, [sp, #0x2F0]
  02a94	eb000000	 bl          |?AccessRegs@OMAPDisplayController@@IAAHXZ|
  02a98	e58d01bc	 str         r0, [sp, #0x1BC]
  02a9c	e59d31bc	 ldr         r3, [sp, #0x1BC]
  02aa0	e3530000	 cmp         r3, #0
  02aa4	1a000001	 bne         |$LN103@SetScaling@2|
  02aa8	ea00085d	 b           |$LN102@SetScaling@2|

; 1167 :         goto cleanUp;

  02aac	ea00085c	 b           |$cleanUp$38274|
  02ab0		 |$LN103@SetScaling@2|

; 1168 : 
; 1169 : 
; 1170 :     //  Get rotation and mirror settings for pipeline output
; 1171 :     pSurface  = g_rgPipelineMapping[ePipeline].pSurface;

  02ab0	e59d12f4	 ldr         r1, [sp, #0x2F4]
  02ab4	e3a03020	 mov         r3, #0x20
  02ab8	e0020391	 mul         r2, r1, r3
  02abc	e59f3040	 ldr         r3, [pc, #0x40]
  02ac0	e0833002	 add         r3, r3, r2
  02ac4	e2833008	 add         r3, r3, #8
  02ac8	e5933000	 ldr         r3, [r3]
  02acc	e58d30f8	 str         r3, [sp, #0xF8]

; 1172 :     eRotation = g_rgPipelineMapping[ePipeline].eRotation;

  02ad0	e59d12f4	 ldr         r1, [sp, #0x2F4]
  02ad4	e3a03020	 mov         r3, #0x20
  02ad8	e0020391	 mul         r2, r1, r3
  02adc	e59f3020	 ldr         r3, [pc, #0x20]
  02ae0	e0833002	 add         r3, r3, r2
  02ae4	e283300c	 add         r3, r3, #0xC
  02ae8	e5933000	 ldr         r3, [r3]
  02aec	e58d306c	 str         r3, [sp, #0x6C]

; 1173 :     bMirror   = g_rgPipelineMapping[ePipeline].bMirror;

  02af0	e59d12f4	 ldr         r1, [sp, #0x2F4]
  02af4	e3a03020	 mov         r3, #0x20
  02af8	e0020391	 mul         r2, r1, r3
  02afc	e59f3000	 ldr         r3, [pc]
  02b00	ea000001	 b           |$LN176@SetScaling@2|
  02b04		 |$LN177@SetScaling@2|
  02b04		 |$LN178@SetScaling@2|
  02b04	00000000	 DCD         |?g_rgPipelineMapping@@3PAUOMAPPipelineConfig@@A|
  02b08		 |$LN179@SetScaling@2|
  02b08	00000000	 DCD         |__security_cookie|
  02b0c		 |$LN176@SetScaling@2|
  02b0c	e0833002	 add         r3, r3, r2
  02b10	e2833010	 add         r3, r3, #0x10
  02b14	e5933000	 ldr         r3, [r3]
  02b18	e58d30fc	 str         r3, [sp, #0xFC]

; 1174 : 
; 1175 : 
; 1176 :     //  Compute horizontal and vertical scaling factors
; 1177 :     dwSrcWidth  = pSrcRect->right - pSrcRect->left;

  02b1c	e59d32f8	 ldr         r3, [sp, #0x2F8]
  02b20	e2833008	 add         r3, r3, #8
  02b24	e5932000	 ldr         r2, [r3]
  02b28	e59d32f8	 ldr         r3, [sp, #0x2F8]
  02b2c	e5933000	 ldr         r3, [r3]
  02b30	e0423003	 sub         r3, r2, r3
  02b34	e58d3008	 str         r3, [sp, #8]

; 1178 :     dwSrcHeight = pSrcRect->bottom - pSrcRect->top;

  02b38	e59d32f8	 ldr         r3, [sp, #0x2F8]
  02b3c	e283200c	 add         r2, r3, #0xC
  02b40	e59d32f8	 ldr         r3, [sp, #0x2F8]
  02b44	e2833004	 add         r3, r3, #4
  02b48	e5922000	 ldr         r2, [r2]
  02b4c	e5933000	 ldr         r3, [r3]
  02b50	e0423003	 sub         r3, r2, r3
  02b54	e58d30f0	 str         r3, [sp, #0xF0]

; 1179 : 
; 1180 :     dwDestWidth  = pDestRect->right - pDestRect->left;

  02b58	e59d32fc	 ldr         r3, [sp, #0x2FC]
  02b5c	e2833008	 add         r3, r3, #8
  02b60	e5932000	 ldr         r2, [r3]
  02b64	e59d32fc	 ldr         r3, [sp, #0x2FC]
  02b68	e5933000	 ldr         r3, [r3]
  02b6c	e0423003	 sub         r3, r2, r3
  02b70	e58d3084	 str         r3, [sp, #0x84]

; 1181 :     dwDestHeight = pDestRect->bottom - pDestRect->top;

  02b74	e59d32fc	 ldr         r3, [sp, #0x2FC]
  02b78	e283200c	 add         r2, r3, #0xC
  02b7c	e59d32fc	 ldr         r3, [sp, #0x2FC]
  02b80	e2833004	 add         r3, r3, #4
  02b84	e5922000	 ldr         r2, [r2]
  02b88	e5933000	 ldr         r3, [r3]
  02b8c	e0423003	 sub         r3, r2, r3
  02b90	e58d308c	 str         r3, [sp, #0x8C]

; 1182 : 
; 1183 :     
; 1184 :     //  Check for odd destination RECT values only for YUV pixel formats
; 1185 :     if( (pSurface->PixelFormat() == OMAP_DSS_PIXELFORMAT_YUV2) ||
; 1186 :         (pSurface->PixelFormat() == OMAP_DSS_PIXELFORMAT_UYVY) )

  02b94	e59d00f8	 ldr         r0, [sp, #0xF8]
  02b98	eb000000	 bl          |?PixelFormat@OMAPSurface@@QAA?AW4OMAP_DSS_PIXELFORMAT@@XZ|
  02b9c	e58d01c0	 str         r0, [sp, #0x1C0]
  02ba0	e59d31c0	 ldr         r3, [sp, #0x1C0]
  02ba4	e353000a	 cmp         r3, #0xA
  02ba8	0a000005	 beq         |$LN100@SetScaling@2|
  02bac	e59d00f8	 ldr         r0, [sp, #0xF8]
  02bb0	eb000000	 bl          |?PixelFormat@OMAPSurface@@QAA?AW4OMAP_DSS_PIXELFORMAT@@XZ|
  02bb4	e58d01c4	 str         r0, [sp, #0x1C4]
  02bb8	e59d31c4	 ldr         r3, [sp, #0x1C4]
  02bbc	e353000b	 cmp         r3, #0xB
  02bc0	1a00003b	 bne         |$LN101@SetScaling@2|
  02bc4		 |$LN100@SetScaling@2|

; 1187 :     {
; 1188 :         //  Check for odd destination RECT values
; 1189 :         if( (dwDestWidth % 2) == 1 )

  02bc4	e59d1084	 ldr         r1, [sp, #0x84]
  02bc8	e3a00002	 mov         r0, #2
  02bcc	eb000000	 bl          __rt_udiv
  02bd0	e3510001	 cmp         r1, #1
  02bd4	1a000009	 bne         |$LN99@SetScaling@2|

; 1190 :         {
; 1191 :             pDestRect->right -= 1;

  02bd8	e59d32fc	 ldr         r3, [sp, #0x2FC]
  02bdc	e2833008	 add         r3, r3, #8
  02be0	e5933000	 ldr         r3, [r3]
  02be4	e2432001	 sub         r2, r3, #1
  02be8	e59d32fc	 ldr         r3, [sp, #0x2FC]
  02bec	e2833008	 add         r3, r3, #8
  02bf0	e5832000	 str         r2, [r3]

; 1192 :             dwDestWidth -= 1;

  02bf4	e59d3084	 ldr         r3, [sp, #0x84]
  02bf8	e2433001	 sub         r3, r3, #1
  02bfc	e58d3084	 str         r3, [sp, #0x84]
  02c00		 |$LN99@SetScaling@2|

; 1193 :         }
; 1194 : 
; 1195 :         if( (dwDestHeight % 2) == 1 )

  02c00	e59d108c	 ldr         r1, [sp, #0x8C]
  02c04	e3a00002	 mov         r0, #2
  02c08	eb000000	 bl          __rt_udiv
  02c0c	e3510001	 cmp         r1, #1
  02c10	1a000009	 bne         |$LN98@SetScaling@2|

; 1196 :         {
; 1197 :             pDestRect->bottom -= 1;

  02c14	e59d32fc	 ldr         r3, [sp, #0x2FC]
  02c18	e283300c	 add         r3, r3, #0xC
  02c1c	e5933000	 ldr         r3, [r3]
  02c20	e2432001	 sub         r2, r3, #1
  02c24	e59d32fc	 ldr         r3, [sp, #0x2FC]
  02c28	e283300c	 add         r3, r3, #0xC
  02c2c	e5832000	 str         r2, [r3]

; 1198 :             dwDestHeight -= 1;

  02c30	e59d308c	 ldr         r3, [sp, #0x8C]
  02c34	e2433001	 sub         r3, r3, #1
  02c38	e58d308c	 str         r3, [sp, #0x8C]
  02c3c		 |$LN98@SetScaling@2|

; 1199 :         }
; 1200 :         if( (dwSrcWidth % 2) == 1 )

  02c3c	e59d1008	 ldr         r1, [sp, #8]
  02c40	e3a00002	 mov         r0, #2
  02c44	eb000000	 bl          __rt_udiv
  02c48	e3510001	 cmp         r1, #1
  02c4c	1a000009	 bne         |$LN97@SetScaling@2|

; 1201 :         {
; 1202 :             pSrcRect->right -= 1;

  02c50	e59d32f8	 ldr         r3, [sp, #0x2F8]
  02c54	e2833008	 add         r3, r3, #8
  02c58	e5933000	 ldr         r3, [r3]
  02c5c	e2432001	 sub         r2, r3, #1
  02c60	e59d32f8	 ldr         r3, [sp, #0x2F8]
  02c64	e2833008	 add         r3, r3, #8
  02c68	e5832000	 str         r2, [r3]

; 1203 :             dwSrcWidth -= 1;

  02c6c	e59d3008	 ldr         r3, [sp, #8]
  02c70	e2433001	 sub         r3, r3, #1
  02c74	e58d3008	 str         r3, [sp, #8]
  02c78		 |$LN97@SetScaling@2|

; 1204 :         }
; 1205 : 
; 1206 :         if( (dwSrcHeight % 2) == 1 )

  02c78	e59d10f0	 ldr         r1, [sp, #0xF0]
  02c7c	e3a00002	 mov         r0, #2
  02c80	eb000000	 bl          __rt_udiv
  02c84	e3510001	 cmp         r1, #1
  02c88	1a000009	 bne         |$LN96@SetScaling@2|

; 1207 :         {
; 1208 :             pSrcRect->bottom -= 1;

  02c8c	e59d32f8	 ldr         r3, [sp, #0x2F8]
  02c90	e283300c	 add         r3, r3, #0xC
  02c94	e5933000	 ldr         r3, [r3]
  02c98	e2432001	 sub         r2, r3, #1
  02c9c	e59d32f8	 ldr         r3, [sp, #0x2F8]
  02ca0	e283300c	 add         r3, r3, #0xC
  02ca4	e5832000	 str         r2, [r3]

; 1209 :             dwSrcHeight -= 1;

  02ca8	e59d30f0	 ldr         r3, [sp, #0xF0]
  02cac	e2433001	 sub         r3, r3, #1
  02cb0	e58d30f0	 str         r3, [sp, #0xF0]
  02cb4		 |$LN96@SetScaling@2|
  02cb4		 |$LN101@SetScaling@2|

; 1210 :         }
; 1211 :     }
; 1212 : 
; 1213 :     //  Compute scaling factors
; 1214 :     dwHorzScale = 1024 * dwSrcWidth / dwDestWidth;

  02cb4	e59d2008	 ldr         r2, [sp, #8]
  02cb8	e3a03b01	 mov         r3, #1, 22
  02cbc	e0010392	 mul         r1, r2, r3
  02cc0	e59d0084	 ldr         r0, [sp, #0x84]
  02cc4	eb000000	 bl          __rt_udiv
  02cc8	e58d014c	 str         r0, [sp, #0x14C]

; 1215 :     dwVertScale = 1024 * dwSrcHeight / dwDestHeight;

  02ccc	e59d20f0	 ldr         r2, [sp, #0xF0]
  02cd0	e3a03b01	 mov         r3, #1, 22
  02cd4	e0010392	 mul         r1, r2, r3
  02cd8	e59d008c	 ldr         r0, [sp, #0x8C]
  02cdc	eb000000	 bl          __rt_udiv
  02ce0	e58d0088	 str         r0, [sp, #0x88]

; 1216 : 
; 1217 :     privSrcRect = *pSrcRect;

  02ce4	e59d12f8	 ldr         r1, [sp, #0x2F8]
  02ce8	e28d0f41	 add         r0, sp, #0x41, 30
  02cec	e3a02010	 mov         r2, #0x10
  02cf0	eb000000	 bl          memcpy

; 1218 : 
; 1219 : 	if (( g_rgPipelineMapping[ePipeline].eDestination == OMAP_DSS_DESTINATION_LCD ) &&
; 1220 :         (ePipeline != OMAP_DSS_PIPELINE_GFX ))

  02cf4	e59d12f4	 ldr         r1, [sp, #0x2F4]
  02cf8	e3a03020	 mov         r3, #0x20
  02cfc	e0020391	 mul         r2, r1, r3
  02d00	e59f3e34	 ldr         r3, [pc, #0xE34]
  02d04	e0833002	 add         r3, r3, r2
  02d08	e2833004	 add         r3, r3, #4
  02d0c	e5933000	 ldr         r3, [r3]
  02d10	e3530000	 cmp         r3, #0
  02d14	1a00004e	 bne         |$LN95@SetScaling@2|
  02d18	e59d32f4	 ldr         r3, [sp, #0x2F4]
  02d1c	e3530000	 cmp         r3, #0
  02d20	0a00004b	 beq         |$LN95@SetScaling@2|

; 1221 :     {
; 1222 : 		if ( m_bDssIspRszEnabled && // is globally enabled
; 1223 :              ((NeedISPResizer(dwHorzScale,dwVertScale,LcdPdd_Get_PixClkDiv()))==TRUE) && // do we need it
; 1224 :              (pSurface->GetRSZHandle(TRUE) != NULL) &&  // can we use it
; 1225 :              (pSurface->UseResizer(TRUE) == TRUE)) // do we have the buffers

  02d24	e59d32f0	 ldr         r3, [sp, #0x2F0]
  02d28	e2833c05	 add         r3, r3, #5, 24
  02d2c	e2833014	 add         r3, r3, #0x14
  02d30	e5933000	 ldr         r3, [r3]
  02d34	e3530000	 cmp         r3, #0
  02d38	0a000036	 beq         |$LN94@SetScaling@2|
  02d3c	eb000000	 bl          LcdPdd_Get_PixClkDiv
  02d40	e58d01c8	 str         r0, [sp, #0x1C8]
  02d44	e59d21c8	 ldr         r2, [sp, #0x1C8]
  02d48	e59d1088	 ldr         r1, [sp, #0x88]
  02d4c	e59d014c	 ldr         r0, [sp, #0x14C]
  02d50	eb000000	 bl          |?NeedISPResizer@@YAHKKK@Z|
  02d54	e58d01cc	 str         r0, [sp, #0x1CC]
  02d58	e59d31cc	 ldr         r3, [sp, #0x1CC]
  02d5c	e3530001	 cmp         r3, #1
  02d60	1a00002c	 bne         |$LN94@SetScaling@2|
  02d64	e3a01001	 mov         r1, #1
  02d68	e59d00f8	 ldr         r0, [sp, #0xF8]
  02d6c	eb000000	 bl          |?GetRSZHandle@OMAPSurface@@QAAPAXH@Z|
  02d70	e58d01d0	 str         r0, [sp, #0x1D0]
  02d74	e59d31d0	 ldr         r3, [sp, #0x1D0]
  02d78	e3530000	 cmp         r3, #0
  02d7c	0a000025	 beq         |$LN94@SetScaling@2|
  02d80	e3a01001	 mov         r1, #1
  02d84	e59d00f8	 ldr         r0, [sp, #0xF8]
  02d88	eb000000	 bl          |?UseResizer@OMAPSurface@@QAAHH@Z|
  02d8c	e58d01d4	 str         r0, [sp, #0x1D4]
  02d90	e59d31d4	 ldr         r3, [sp, #0x1D4]
  02d94	e3530001	 cmp         r3, #1
  02d98	1a00001e	 bne         |$LN94@SetScaling@2|

; 1226 : 		{		    
; 1227 : 		    //all check passed
; 1228 :             bUseResizer = TRUE;

  02d9c	e3a03001	 mov         r3, #1
  02da0	e58d30f4	 str         r3, [sp, #0xF4]

; 1229 :             /* Since ISP Resizer would be providing the src image to 
; 1230 :             DSS, make the SRC RECT for DSS same as DEST RECT */
; 1231 :             privSrcRect.left=0;

  02da4	e3a03000	 mov         r3, #0
  02da8	e58d3104	 str         r3, [sp, #0x104]

; 1232 :             privSrcRect.right = dwDestWidth;

  02dac	e59d3084	 ldr         r3, [sp, #0x84]
  02db0	e58d310c	 str         r3, [sp, #0x10C]

; 1233 :             privSrcRect.top=0;

  02db4	e3a03000	 mov         r3, #0
  02db8	e58d3108	 str         r3, [sp, #0x108]

; 1234 : 			privSrcRect.bottom = dwDestHeight;			

  02dbc	e59d308c	 ldr         r3, [sp, #0x8C]
  02dc0	e58d3110	 str         r3, [sp, #0x110]

; 1235 : 			
; 1236 : 			dwSrcWidth  = privSrcRect.right - privSrcRect.left;

  02dc4	e59d210c	 ldr         r2, [sp, #0x10C]
  02dc8	e59d3104	 ldr         r3, [sp, #0x104]
  02dcc	e0423003	 sub         r3, r2, r3
  02dd0	e58d3008	 str         r3, [sp, #8]

; 1237 :             dwSrcHeight = privSrcRect.bottom - privSrcRect.top;

  02dd4	e59d2110	 ldr         r2, [sp, #0x110]
  02dd8	e59d3108	 ldr         r3, [sp, #0x108]
  02ddc	e0423003	 sub         r3, r2, r3
  02de0	e58d30f0	 str         r3, [sp, #0xF0]

; 1238 :             dwHorzScale = 1024 * dwSrcWidth / dwDestWidth;

  02de4	e59d2008	 ldr         r2, [sp, #8]
  02de8	e3a03b01	 mov         r3, #1, 22
  02dec	e0010392	 mul         r1, r2, r3
  02df0	e59d0084	 ldr         r0, [sp, #0x84]
  02df4	eb000000	 bl          __rt_udiv
  02df8	e58d014c	 str         r0, [sp, #0x14C]

; 1239 : 			dwVertScale = 1024 * dwSrcHeight / dwDestHeight;            

  02dfc	e59d20f0	 ldr         r2, [sp, #0xF0]
  02e00	e3a03b01	 mov         r3, #1, 22
  02e04	e0010392	 mul         r1, r2, r3
  02e08	e59d008c	 ldr         r0, [sp, #0x8C]
  02e0c	eb000000	 bl          __rt_udiv
  02e10	e58d0088	 str         r0, [sp, #0x88]

; 1240 :         } 
; 1241 :         else

  02e14	ea00000d	 b           |$LN93@SetScaling@2|
  02e18		 |$LN94@SetScaling@2|

; 1242 :         {
; 1243 :             /* some check did not pass - disable ISP resizer */
; 1244 :             pSurface->SetRSZHandle(NULL,TRUE);

  02e18	e3a02001	 mov         r2, #1
  02e1c	e3a01000	 mov         r1, #0
  02e20	e59d00f8	 ldr         r0, [sp, #0xF8]
  02e24	eb000000	 bl          |?SetRSZHandle@OMAPSurface@@QAAXPAXH@Z|

; 1245 :             pSurface->UseResizer(FALSE);

  02e28	e3a01000	 mov         r1, #0
  02e2c	e59d00f8	 ldr         r0, [sp, #0xF8]
  02e30	eb000000	 bl          |?UseResizer@OMAPSurface@@QAAHH@Z|

; 1246 :             memset(pSurface->ResizeParams(),0,sizeof(RSZParams_t));

  02e34	e59d00f8	 ldr         r0, [sp, #0xF8]
  02e38	eb000000	 bl          |?ResizeParams@OMAPSurface@@QAAPAURSZParams_t@@XZ|
  02e3c	e58d01d8	 str         r0, [sp, #0x1D8]
  02e40	e3a02064	 mov         r2, #0x64
  02e44	e3a01000	 mov         r1, #0
  02e48	e59d01d8	 ldr         r0, [sp, #0x1D8]
  02e4c	eb000000	 bl          memset
  02e50		 |$LN93@SetScaling@2|

; 1247 :         }        
; 1248 :     }
; 1249 :     else /* for cases where surfaces are re-assigned to different pipelines */

  02e50	ea00000d	 b           |$LN92@SetScaling@2|
  02e54		 |$LN95@SetScaling@2|

; 1250 :     {
; 1251 :         /* some check did not pass - disable ISP resizer */
; 1252 :         pSurface->SetRSZHandle(NULL,TRUE);

  02e54	e3a02001	 mov         r2, #1
  02e58	e3a01000	 mov         r1, #0
  02e5c	e59d00f8	 ldr         r0, [sp, #0xF8]
  02e60	eb000000	 bl          |?SetRSZHandle@OMAPSurface@@QAAXPAXH@Z|

; 1253 :         pSurface->UseResizer(FALSE);

  02e64	e3a01000	 mov         r1, #0
  02e68	e59d00f8	 ldr         r0, [sp, #0xF8]
  02e6c	eb000000	 bl          |?UseResizer@OMAPSurface@@QAAHH@Z|

; 1254 :         memset(pSurface->ResizeParams(),0,sizeof(RSZParams_t));

  02e70	e59d00f8	 ldr         r0, [sp, #0xF8]
  02e74	eb000000	 bl          |?ResizeParams@OMAPSurface@@QAAPAURSZParams_t@@XZ|
  02e78	e58d01dc	 str         r0, [sp, #0x1DC]
  02e7c	e3a02064	 mov         r2, #0x64
  02e80	e3a01000	 mov         r1, #0
  02e84	e59d01dc	 ldr         r0, [sp, #0x1DC]
  02e88	eb000000	 bl          memset
  02e8c		 |$LN92@SetScaling@2|

; 1255 :     }    
; 1256 :     
; 1257 :     
; 1258 :     if ((eRotation == OMAP_DSS_ROTATION_0)||(eRotation == OMAP_DSS_ROTATION_180))

  02e8c	e59d306c	 ldr         r3, [sp, #0x6C]
  02e90	e3530000	 cmp         r3, #0
  02e94	0a000002	 beq         |$LN90@SetScaling@2|
  02e98	e59d306c	 ldr         r3, [sp, #0x6C]
  02e9c	e35300b4	 cmp         r3, #0xB4
  02ea0	1a000005	 bne         |$LN91@SetScaling@2|
  02ea4		 |$LN90@SetScaling@2|

; 1259 :         dwPixelsPerLine = GetLCDWidth();

  02ea4	e59d02f0	 ldr         r0, [sp, #0x2F0]
  02ea8	eb000000	 bl          |?GetLCDWidth@OMAPDisplayController@@QAAKXZ|
  02eac	e58d01e0	 str         r0, [sp, #0x1E0]
  02eb0	e59d31e0	 ldr         r3, [sp, #0x1E0]
  02eb4	e58d3164	 str         r3, [sp, #0x164]

; 1260 :     else

  02eb8	ea000004	 b           |$LN89@SetScaling@2|
  02ebc		 |$LN91@SetScaling@2|

; 1261 :         dwPixelsPerLine = GetLCDHeight();

  02ebc	e59d02f0	 ldr         r0, [sp, #0x2F0]
  02ec0	eb000000	 bl          |?GetLCDHeight@OMAPDisplayController@@QAAKXZ|
  02ec4	e58d01e4	 str         r0, [sp, #0x1E4]
  02ec8	e59d31e4	 ldr         r3, [sp, #0x1E4]
  02ecc	e58d3164	 str         r3, [sp, #0x164]
  02ed0		 |$LN89@SetScaling@2|

; 1262 : 
; 1263 :     // Limit the scaling to 1/3rd of the original size
; 1264 :     if ((dwHorzScale > 3072) && (dwSrcWidth > dwPixelsPerLine))

  02ed0	e59d314c	 ldr         r3, [sp, #0x14C]
  02ed4	e3530b03	 cmp         r3, #3, 22
  02ed8	9a00003e	 bls         |$LN88@SetScaling@2|
  02edc	e59d2008	 ldr         r2, [sp, #8]
  02ee0	e59d3164	 ldr         r3, [sp, #0x164]
  02ee4	e1520003	 cmp         r2, r3
  02ee8	9a00003a	 bls         |$LN88@SetScaling@2|

; 1265 :     {
; 1266 :         // Max scale factor feasible is 1/3rd
; 1267 :         // Based on 1/3rd scale factor, increase the dest rect size
; 1268 :         DWORD dstWidthOffset = 0;

  02eec	e3a03000	 mov         r3, #0
  02ef0	e58d3174	 str         r3, [sp, #0x174]

; 1269 :         DWORD newDstWidth    = 0;

  02ef4	e3a03000	 mov         r3, #0
  02ef8	e58d3178	 str         r3, [sp, #0x178]

; 1270 :         newDstWidth    = dwSrcWidth/3;

  02efc	e59d1008	 ldr         r1, [sp, #8]
  02f00	e3a00003	 mov         r0, #3
  02f04	eb000000	 bl          __rt_udiv
  02f08	e58d0178	 str         r0, [sp, #0x178]

; 1271 : 
; 1272 :         // Make sure to set the dst width >= 1/3 x srcwidth
; 1273 :         if (dwSrcWidth%3 != 0)

  02f0c	e59d1008	 ldr         r1, [sp, #8]
  02f10	e3a00003	 mov         r0, #3
  02f14	eb000000	 bl          __rt_udiv
  02f18	e3510000	 cmp         r1, #0
  02f1c	0a000002	 beq         |$LN87@SetScaling@2|

; 1274 :             newDstWidth += 1;

  02f20	e59d3178	 ldr         r3, [sp, #0x178]
  02f24	e2833001	 add         r3, r3, #1
  02f28	e58d3178	 str         r3, [sp, #0x178]
  02f2c		 |$LN87@SetScaling@2|

; 1275 :             
; 1276 :         // Check the size of the new dst width calculated.
; 1277 :         newDstWidth    = (newDstWidth > GetLCDWidth())? GetLCDWidth() : newDstWidth ;

  02f2c	e59d02f0	 ldr         r0, [sp, #0x2F0]
  02f30	eb000000	 bl          |?GetLCDWidth@OMAPDisplayController@@QAAKXZ|
  02f34	e58d01e8	 str         r0, [sp, #0x1E8]
  02f38	e59d2178	 ldr         r2, [sp, #0x178]
  02f3c	e59d31e8	 ldr         r3, [sp, #0x1E8]
  02f40	e1520003	 cmp         r2, r3
  02f44	9a000005	 bls         |$LN106@SetScaling@2|
  02f48	e59d02f0	 ldr         r0, [sp, #0x2F0]
  02f4c	eb000000	 bl          |?GetLCDWidth@OMAPDisplayController@@QAAKXZ|
  02f50	e58d01ec	 str         r0, [sp, #0x1EC]
  02f54	e59d31ec	 ldr         r3, [sp, #0x1EC]
  02f58	e58d31f0	 str         r3, [sp, #0x1F0]
  02f5c	ea000001	 b           |$LN107@SetScaling@2|
  02f60		 |$LN106@SetScaling@2|
  02f60	e59d3178	 ldr         r3, [sp, #0x178]
  02f64	e58d31f0	 str         r3, [sp, #0x1F0]
  02f68		 |$LN107@SetScaling@2|
  02f68	e59d31f0	 ldr         r3, [sp, #0x1F0]
  02f6c	e58d3178	 str         r3, [sp, #0x178]

; 1278 : 
; 1279 :         // Divide it equally to the left and right side of the dst window
; 1280 :         dstWidthOffset = (newDstWidth-dwDestWidth)/2;

  02f70	e59d2178	 ldr         r2, [sp, #0x178]
  02f74	e59d3084	 ldr         r3, [sp, #0x84]
  02f78	e0421003	 sub         r1, r2, r3
  02f7c	e3a00002	 mov         r0, #2
  02f80	eb000000	 bl          __rt_udiv
  02f84	e58d0174	 str         r0, [sp, #0x174]

; 1281 :           
; 1282 :         // adjust the Dest rect based on the new scale factor
; 1283 :         if ((DWORD)pDestRect->left > dstWidthOffset)

  02f88	e59d32fc	 ldr         r3, [sp, #0x2FC]
  02f8c	e5932000	 ldr         r2, [r3]
  02f90	e59d3174	 ldr         r3, [sp, #0x174]
  02f94	e1520003	 cmp         r2, r3
  02f98	9a000005	 bls         |$LN86@SetScaling@2|

; 1284 :             pDestRect->left  -= dstWidthOffset;

  02f9c	e59d32fc	 ldr         r3, [sp, #0x2FC]
  02fa0	e5932000	 ldr         r2, [r3]
  02fa4	e59d3174	 ldr         r3, [sp, #0x174]
  02fa8	e0422003	 sub         r2, r2, r3
  02fac	e59d32fc	 ldr         r3, [sp, #0x2FC]
  02fb0	e5832000	 str         r2, [r3]
  02fb4		 |$LN86@SetScaling@2|

; 1285 : 
; 1286 :         pDestRect->right += dstWidthOffset;

  02fb4	e59d32fc	 ldr         r3, [sp, #0x2FC]
  02fb8	e2833008	 add         r3, r3, #8
  02fbc	e5932000	 ldr         r2, [r3]
  02fc0	e59d3174	 ldr         r3, [sp, #0x174]
  02fc4	e0822003	 add         r2, r2, r3
  02fc8	e59d32fc	 ldr         r3, [sp, #0x2FC]
  02fcc	e2833008	 add         r3, r3, #8
  02fd0	e5832000	 str         r2, [r3]

; 1287 :     }
; 1288 :     else

  02fd4	ea000063	 b           |$LN85@SetScaling@2|
  02fd8		 |$LN88@SetScaling@2|

; 1289 :     {
; 1290 :         //  If playback is rotated and scaled and color converted, adjust clipping to avoid sync lost
; 1291 :         if( (eRotation == OMAP_DSS_ROTATION_90)||(eRotation == OMAP_DSS_ROTATION_270) )

  02fd8	e59d306c	 ldr         r3, [sp, #0x6C]
  02fdc	e353005a	 cmp         r3, #0x5A
  02fe0	0a000004	 beq         |$LN83@SetScaling@2|
  02fe4	e59d206c	 ldr         r2, [sp, #0x6C]
  02fe8	e3a03c01	 mov         r3, #1, 24
  02fec	e383300e	 orr         r3, r3, #0xE
  02ff0	e1520003	 cmp         r2, r3
  02ff4	1a00005b	 bne         |$LN84@SetScaling@2|
  02ff8		 |$LN83@SetScaling@2|

; 1292 :         {
; 1293 :             if( (pSurface->PixelFormat() == OMAP_DSS_PIXELFORMAT_YUV2) ||
; 1294 :                 (pSurface->PixelFormat() == OMAP_DSS_PIXELFORMAT_UYVY) )

  02ff8	e59d00f8	 ldr         r0, [sp, #0xF8]
  02ffc	eb000000	 bl          |?PixelFormat@OMAPSurface@@QAA?AW4OMAP_DSS_PIXELFORMAT@@XZ|
  03000	e58d01f4	 str         r0, [sp, #0x1F4]
  03004	e59d31f4	 ldr         r3, [sp, #0x1F4]
  03008	e353000a	 cmp         r3, #0xA
  0300c	0a000005	 beq         |$LN81@SetScaling@2|
  03010	e59d00f8	 ldr         r0, [sp, #0xF8]
  03014	eb000000	 bl          |?PixelFormat@OMAPSurface@@QAA?AW4OMAP_DSS_PIXELFORMAT@@XZ|
  03018	e58d01f8	 str         r0, [sp, #0x1F8]
  0301c	e59d31f8	 ldr         r3, [sp, #0x1F8]
  03020	e353000b	 cmp         r3, #0xB
  03024	1a00004f	 bne         |$LN82@SetScaling@2|
  03028		 |$LN81@SetScaling@2|

; 1295 :             {
; 1296 :                 //  Flag special case of YUV rotated
; 1297 :                 bYUVRotated = TRUE;

  03028	e3a03001	 mov         r3, #1
  0302c	e58d3150	 str         r3, [sp, #0x150]

; 1298 :                 
; 1299 :                 //  Rotated scaling with color conversion in these bounds has issues
; 1300 :                 if( dwHorzScale > 1536 && dwHorzScale < 2048 )            

  03030	e59d314c	 ldr         r3, [sp, #0x14C]
  03034	e3530c06	 cmp         r3, #6, 24
  03038	9a000023	 bls         |$LN80@SetScaling@2|
  0303c	e59d314c	 ldr         r3, [sp, #0x14C]
  03040	e3530b02	 cmp         r3, #2, 22
  03044	2a000020	 bcs         |$LN80@SetScaling@2|

; 1301 :                 {
; 1302 :                     DWORD   dwOldSrcWidth = dwSrcWidth;

  03048	e59d3008	 ldr         r3, [sp, #8]
  0304c	e58d317c	 str         r3, [sp, #0x17C]

; 1303 :                     
; 1304 :                     //  Clip src width  
; 1305 :                     dwSrcWidth = dwSrcWidth * 1536 / dwHorzScale;

  03050	e59d2008	 ldr         r2, [sp, #8]
  03054	e3a03c06	 mov         r3, #6, 24
  03058	e0010392	 mul         r1, r2, r3
  0305c	e59d014c	 ldr         r0, [sp, #0x14C]
  03060	eb000000	 bl          __rt_udiv
  03064	e58d0008	 str         r0, [sp, #8]

; 1306 :                     dwSrcWidth = ((dwSrcWidth % 2) == 0) ? dwSrcWidth : dwSrcWidth - 1;

  03068	e59d1008	 ldr         r1, [sp, #8]
  0306c	e3a00002	 mov         r0, #2
  03070	eb000000	 bl          __rt_udiv
  03074	e3510000	 cmp         r1, #0
  03078	1a000002	 bne         |$LN108@SetScaling@2|
  0307c	e59d3008	 ldr         r3, [sp, #8]
  03080	e58d31fc	 str         r3, [sp, #0x1FC]
  03084	ea000002	 b           |$LN109@SetScaling@2|
  03088		 |$LN108@SetScaling@2|
  03088	e59d3008	 ldr         r3, [sp, #8]
  0308c	e2433001	 sub         r3, r3, #1
  03090	e58d31fc	 str         r3, [sp, #0x1FC]
  03094		 |$LN109@SetScaling@2|
  03094	e59d31fc	 ldr         r3, [sp, #0x1FC]
  03098	e58d3008	 str         r3, [sp, #8]

; 1307 :                     privSrcRect.left  = privSrcRect.left + (dwOldSrcWidth - dwSrcWidth)/2;

  0309c	e59d217c	 ldr         r2, [sp, #0x17C]
  030a0	e59d3008	 ldr         r3, [sp, #8]
  030a4	e0421003	 sub         r1, r2, r3
  030a8	e3a00002	 mov         r0, #2
  030ac	eb000000	 bl          __rt_udiv
  030b0	e59d3104	 ldr         r3, [sp, #0x104]
  030b4	e0833000	 add         r3, r3, r0
  030b8	e58d3104	 str         r3, [sp, #0x104]

; 1308 :                     privSrcRect.right = privSrcRect.left + dwSrcWidth;

  030bc	e59d2104	 ldr         r2, [sp, #0x104]
  030c0	e59d3008	 ldr         r3, [sp, #8]
  030c4	e0823003	 add         r3, r2, r3
  030c8	e58d310c	 str         r3, [sp, #0x10C]
  030cc		 |$LN80@SetScaling@2|

; 1309 :                 }
; 1310 :             
; 1311 :                 //  Rotated scaling with color conversion in these bounds has issues
; 1312 :                 if( dwVertScale > 1536 && dwVertScale < 2048 )            

  030cc	e59d3088	 ldr         r3, [sp, #0x88]
  030d0	e3530c06	 cmp         r3, #6, 24
  030d4	9a000023	 bls         |$LN79@SetScaling@2|
  030d8	e59d3088	 ldr         r3, [sp, #0x88]
  030dc	e3530b02	 cmp         r3, #2, 22
  030e0	2a000020	 bcs         |$LN79@SetScaling@2|

; 1313 :                 {
; 1314 :                     DWORD   dwOldSrcHeight = dwSrcHeight;

  030e4	e59d30f0	 ldr         r3, [sp, #0xF0]
  030e8	e58d3180	 str         r3, [sp, #0x180]

; 1315 :                     
; 1316 :                     //  Clip src height  
; 1317 :                     dwSrcHeight = dwSrcHeight * 1536 / dwVertScale;

  030ec	e59d20f0	 ldr         r2, [sp, #0xF0]
  030f0	e3a03c06	 mov         r3, #6, 24
  030f4	e0010392	 mul         r1, r2, r3
  030f8	e59d0088	 ldr         r0, [sp, #0x88]
  030fc	eb000000	 bl          __rt_udiv
  03100	e58d00f0	 str         r0, [sp, #0xF0]

; 1318 :                     dwSrcHeight = ((dwSrcHeight % 2) == 0) ? dwSrcHeight : dwSrcHeight - 1;

  03104	e59d10f0	 ldr         r1, [sp, #0xF0]
  03108	e3a00002	 mov         r0, #2
  0310c	eb000000	 bl          __rt_udiv
  03110	e3510000	 cmp         r1, #0
  03114	1a000002	 bne         |$LN110@SetScaling@2|
  03118	e59d30f0	 ldr         r3, [sp, #0xF0]
  0311c	e58d3200	 str         r3, [sp, #0x200]
  03120	ea000002	 b           |$LN111@SetScaling@2|
  03124		 |$LN110@SetScaling@2|
  03124	e59d30f0	 ldr         r3, [sp, #0xF0]
  03128	e2433001	 sub         r3, r3, #1
  0312c	e58d3200	 str         r3, [sp, #0x200]
  03130		 |$LN111@SetScaling@2|
  03130	e59d3200	 ldr         r3, [sp, #0x200]
  03134	e58d30f0	 str         r3, [sp, #0xF0]

; 1319 :                     privSrcRect.top    = privSrcRect.top + (dwOldSrcHeight - dwSrcHeight)/2;

  03138	e59d2180	 ldr         r2, [sp, #0x180]
  0313c	e59d30f0	 ldr         r3, [sp, #0xF0]
  03140	e0421003	 sub         r1, r2, r3
  03144	e3a00002	 mov         r0, #2
  03148	eb000000	 bl          __rt_udiv
  0314c	e59d3108	 ldr         r3, [sp, #0x108]
  03150	e0833000	 add         r3, r3, r0
  03154	e58d3108	 str         r3, [sp, #0x108]

; 1320 :                     privSrcRect.bottom = privSrcRect.top + dwSrcHeight;

  03158	e59d2108	 ldr         r2, [sp, #0x108]
  0315c	e59d30f0	 ldr         r3, [sp, #0xF0]
  03160	e0823003	 add         r3, r2, r3
  03164	e58d3110	 str         r3, [sp, #0x110]
  03168		 |$LN79@SetScaling@2|
  03168		 |$LN82@SetScaling@2|
  03168		 |$LN84@SetScaling@2|
  03168		 |$LN85@SetScaling@2|

; 1321 :                 }
; 1322 :             }
; 1323 :         }
; 1324 :     }
; 1325 : 
; 1326 :     if (!bUseResizer)

  03168	e59d30f4	 ldr         r3, [sp, #0xF4]
  0316c	e3530000	 cmp         r3, #0
  03170	1a000014	 bne         |$LN78@SetScaling@2|

; 1327 :         //  Set the clipping region for the surface
; 1328 :         g_rgPipelineMapping[ePipeline].pSurface->SetClipping( &privSrcRect);

  03174	e28d1f41	 add         r1, sp, #0x41, 30
  03178	e59d02f4	 ldr         r0, [sp, #0x2F4]
  0317c	e3a03020	 mov         r3, #0x20
  03180	e0020390	 mul         r2, r0, r3
  03184	e59f39b0	 ldr         r3, [pc, #0x9B0]
  03188	e0833002	 add         r3, r3, r2
  0318c	e2833008	 add         r3, r3, #8
  03190	e593e000	 ldr         lr, [r3]
  03194	e59d02f4	 ldr         r0, [sp, #0x2F4]
  03198	e3a03020	 mov         r3, #0x20
  0319c	e0020390	 mul         r2, r0, r3
  031a0	e59f3994	 ldr         r3, [pc, #0x994]
  031a4	e0833002	 add         r3, r3, r2
  031a8	e2833008	 add         r3, r3, #8
  031ac	e5930000	 ldr         r0, [r3]
  031b0	e59e3000	 ldr         r3, [lr]
  031b4	e2833020	 add         r3, r3, #0x20
  031b8	e5933000	 ldr         r3, [r3]
  031bc	e1a0e00f	 mov         lr, pc
  031c0	e12fff13	 bx          r3

; 1329 :     else

  031c4	ea000032	 b           |$LN77@SetScaling@2|
  031c8		 |$LN78@SetScaling@2|

; 1330 :     {
; 1331 :         RECT rszRect;
; 1332 :         rszRect.top = 0;

  031c8	e3a03000	 mov         r3, #0
  031cc	e58d3188	 str         r3, [sp, #0x188]

; 1333 :         rszRect.left = 0;

  031d0	e3a03000	 mov         r3, #0
  031d4	e58d3184	 str         r3, [sp, #0x184]

; 1334 :         rszRect.bottom = rszRect.top + dwDestHeight;

  031d8	e59d2188	 ldr         r2, [sp, #0x188]
  031dc	e59d308c	 ldr         r3, [sp, #0x8C]
  031e0	e0823003	 add         r3, r2, r3
  031e4	e58d3190	 str         r3, [sp, #0x190]

; 1335 :         rszRect.right = rszRect.left + dwDestWidth;        

  031e8	e59d2184	 ldr         r2, [sp, #0x184]
  031ec	e59d3084	 ldr         r3, [sp, #0x84]
  031f0	e0823003	 add         r3, r2, r3
  031f4	e58d318c	 str         r3, [sp, #0x18C]

; 1336 :         g_rgPipelineMapping[ePipeline].pSurface->SetClipping( pSrcRect);

  031f8	e59d12f8	 ldr         r1, [sp, #0x2F8]
  031fc	e59d02f4	 ldr         r0, [sp, #0x2F4]
  03200	e3a03020	 mov         r3, #0x20
  03204	e0020390	 mul         r2, r0, r3
  03208	e59f392c	 ldr         r3, [pc, #0x92C]
  0320c	e0833002	 add         r3, r3, r2
  03210	e2833008	 add         r3, r3, #8
  03214	e593e000	 ldr         lr, [r3]
  03218	e59d02f4	 ldr         r0, [sp, #0x2F4]
  0321c	e3a03020	 mov         r3, #0x20
  03220	e0020390	 mul         r2, r0, r3
  03224	e59f3910	 ldr         r3, [pc, #0x910]
  03228	e0833002	 add         r3, r3, r2
  0322c	e2833008	 add         r3, r3, #8
  03230	e5930000	 ldr         r0, [r3]
  03234	e59e3000	 ldr         r3, [lr]
  03238	e2833020	 add         r3, r3, #0x20
  0323c	e5933000	 ldr         r3, [r3]
  03240	e1a0e00f	 mov         lr, pc
  03244	e12fff13	 bx          r3

; 1337 :         g_rgPipelineMapping[ePipeline].pSurface->OmapAssocSurface()->SetClipping( &rszRect );

  03248	e59d12f4	 ldr         r1, [sp, #0x2F4]
  0324c	e3a03020	 mov         r3, #0x20
  03250	e0020391	 mul         r2, r1, r3
  03254	e59f38e0	 ldr         r3, [pc, #0x8E0]
  03258	e0833002	 add         r3, r3, r2
  0325c	e2833008	 add         r3, r3, #8
  03260	e5930000	 ldr         r0, [r3]
  03264	eb000000	 bl          |?OmapAssocSurface@OMAPSurface@@QAAPAV1@XZ|
  03268	e58d0204	 str         r0, [sp, #0x204]
  0326c	e59d3204	 ldr         r3, [sp, #0x204]
  03270	e58d3208	 str         r3, [sp, #0x208]
  03274	e28d1f61	 add         r1, sp, #0x61, 30
  03278	e59d0208	 ldr         r0, [sp, #0x208]
  0327c	e59d3208	 ldr         r3, [sp, #0x208]
  03280	e5933000	 ldr         r3, [r3]
  03284	e2833020	 add         r3, r3, #0x20
  03288	e5933000	 ldr         r3, [r3]
  0328c	e1a0e00f	 mov         lr, pc
  03290	e12fff13	 bx          r3
  03294		 |$LN77@SetScaling@2|

; 1338 :     }
; 1339 : 
; 1340 :     //  Compute src and dest width/height
; 1341 :     dwSrcWidth  = privSrcRect.right - privSrcRect.left;

  03294	e59d210c	 ldr         r2, [sp, #0x10C]
  03298	e59d3104	 ldr         r3, [sp, #0x104]
  0329c	e0423003	 sub         r3, r2, r3
  032a0	e58d3008	 str         r3, [sp, #8]

; 1342 :     dwSrcHeight = privSrcRect.bottom - privSrcRect.top;

  032a4	e59d2110	 ldr         r2, [sp, #0x110]
  032a8	e59d3108	 ldr         r3, [sp, #0x108]
  032ac	e0423003	 sub         r3, r2, r3
  032b0	e58d30f0	 str         r3, [sp, #0xF0]

; 1343 : 
; 1344 :     dwDestWidth  = pDestRect->right - pDestRect->left;

  032b4	e59d32fc	 ldr         r3, [sp, #0x2FC]
  032b8	e2833008	 add         r3, r3, #8
  032bc	e5932000	 ldr         r2, [r3]
  032c0	e59d32fc	 ldr         r3, [sp, #0x2FC]
  032c4	e5933000	 ldr         r3, [r3]
  032c8	e0423003	 sub         r3, r2, r3
  032cc	e58d3084	 str         r3, [sp, #0x84]

; 1345 :     dwDestHeight = pDestRect->bottom - pDestRect->top;

  032d0	e59d32fc	 ldr         r3, [sp, #0x2FC]
  032d4	e283200c	 add         r2, r3, #0xC
  032d8	e59d32fc	 ldr         r3, [sp, #0x2FC]
  032dc	e2833004	 add         r3, r3, #4
  032e0	e5922000	 ldr         r2, [r2]
  032e4	e5933000	 ldr         r3, [r3]
  032e8	e0423003	 sub         r3, r2, r3
  032ec	e58d308c	 str         r3, [sp, #0x8C]

; 1346 : 
; 1347 :     //  Swap src width/height based on pipeline rotation angle
; 1348 :     switch( g_rgPipelineMapping[ePipeline].eRotation )

  032f0	e59d12f4	 ldr         r1, [sp, #0x2F4]
  032f4	e3a03020	 mov         r3, #0x20
  032f8	e0020391	 mul         r2, r1, r3
  032fc	e59f3838	 ldr         r3, [pc, #0x838]
  03300	e0833002	 add         r3, r3, r2
  03304	e283300c	 add         r3, r3, #0xC
  03308	e5933000	 ldr         r3, [r3]
  0330c	e58d320c	 str         r3, [sp, #0x20C]
  03310	e59d320c	 ldr         r3, [sp, #0x20C]
  03314	e353005a	 cmp         r3, #0x5A
  03318	0a000005	 beq         |$LN74@SetScaling@2|
  0331c	e59d220c	 ldr         r2, [sp, #0x20C]
  03320	e3a03c01	 mov         r3, #1, 24
  03324	e383300e	 orr         r3, r3, #0xE
  03328	e1520003	 cmp         r2, r3
  0332c	0a000007	 beq         |$LN73@SetScaling@2|
  03330	ea00000c	 b           |$LN75@SetScaling@2|
  03334		 |$LN74@SetScaling@2|

; 1349 :     {
; 1350 :         case OMAP_DSS_ROTATION_90:
; 1351 :             //  Settings for rotation angle 90
; 1352 :             i = dwSrcWidth;

  03334	e59d3008	 ldr         r3, [sp, #8]
  03338	e58d3078	 str         r3, [sp, #0x78]

; 1353 :             dwSrcWidth = dwSrcHeight;

  0333c	e59d30f0	 ldr         r3, [sp, #0xF0]
  03340	e58d3008	 str         r3, [sp, #8]

; 1354 :             dwSrcHeight = i;

  03344	e59d3078	 ldr         r3, [sp, #0x78]
  03348	e58d30f0	 str         r3, [sp, #0xF0]

; 1355 :             break;

  0334c	ea000005	 b           |$LN75@SetScaling@2|
  03350		 |$LN73@SetScaling@2|

; 1356 : 
; 1357 :         case OMAP_DSS_ROTATION_270:
; 1358 :             //  Settings for rotation angle 270
; 1359 :             i = dwSrcWidth;

  03350	e59d3008	 ldr         r3, [sp, #8]
  03354	e58d3078	 str         r3, [sp, #0x78]

; 1360 :             dwSrcWidth = dwSrcHeight;

  03358	e59d30f0	 ldr         r3, [sp, #0xF0]
  0335c	e58d3008	 str         r3, [sp, #8]

; 1361 :             dwSrcHeight = i;

  03360	e59d3078	 ldr         r3, [sp, #0x78]
  03364	e58d30f0	 str         r3, [sp, #0xF0]
  03368		 |$LN75@SetScaling@2|

; 1362 :             break;
; 1363 :     }
; 1364 : 
; 1365 :     //  Default origin
; 1366 :     dwX = pDestRect->left;

  03368	e59d32fc	 ldr         r3, [sp, #0x2FC]
  0336c	e5933000	 ldr         r3, [r3]
  03370	e58d3080	 str         r3, [sp, #0x80]

; 1367 :     dwY = pDestRect->top;

  03374	e59d32fc	 ldr         r3, [sp, #0x2FC]
  03378	e2833004	 add         r3, r3, #4
  0337c	e5933000	 ldr         r3, [r3]
  03380	e58d3118	 str         r3, [sp, #0x118]

; 1368 : 
; 1369 : 
; 1370 :     //------------------------------------------------------------------------------
; 1371 :     //  Configure the scaling of the pipeline for LCD display
; 1372 :     //
; 1373 :     if( g_rgPipelineMapping[ePipeline].eDestination == OMAP_DSS_DESTINATION_LCD )

  03384	e59d12f4	 ldr         r1, [sp, #0x2F4]
  03388	e3a03020	 mov         r3, #0x20
  0338c	e0020391	 mul         r2, r1, r3
  03390	e59f37a4	 ldr         r3, [pc, #0x7A4]
  03394	e0833002	 add         r3, r3, r2
  03398	e2833004	 add         r3, r3, #4
  0339c	e5933000	 ldr         r3, [r3]
  033a0	e3530000	 cmp         r3, #0
  033a4	1a0001b3	 bne         |$LN72@SetScaling@2|

; 1374 :     {
; 1375 :         //  Compute new origin and swap destination width/height based on GFX pipeline rotation angle
; 1376 :         switch( g_rgPipelineMapping[OMAP_DSS_PIPELINE_GFX].eRotation )

  033a8	e59f378c	 ldr         r3, [pc, #0x78C]
  033ac	e593300c	 ldr         r3, [r3, #0xC]
  033b0	e58d3210	 str         r3, [sp, #0x210]
  033b4	e59d3210	 ldr         r3, [sp, #0x210]
  033b8	e35300b4	 cmp         r3, #0xB4
  033bc	ca000009	 bgt         |$LN112@SetScaling@2|
  033c0	e59d3210	 ldr         r3, [sp, #0x210]
  033c4	e35300b4	 cmp         r3, #0xB4
  033c8	0a000029	 beq         |$LN67@SetScaling@2|
  033cc	e59d3210	 ldr         r3, [sp, #0x210]
  033d0	e3530000	 cmp         r3, #0
  033d4	0a000009	 beq         |$LN69@SetScaling@2|
  033d8	e59d3210	 ldr         r3, [sp, #0x210]
  033dc	e353005a	 cmp         r3, #0x5A
  033e0	0a00000e	 beq         |$LN68@SetScaling@2|
  033e4	ea00004c	 b           |$LN70@SetScaling@2|
  033e8		 |$LN112@SetScaling@2|
  033e8	e59d2210	 ldr         r2, [sp, #0x210]
  033ec	e3a03c01	 mov         r3, #1, 24
  033f0	e383300e	 orr         r3, r3, #0xE
  033f4	e1520003	 cmp         r2, r3
  033f8	0a000033	 beq         |$LN66@SetScaling@2|
  033fc	ea000046	 b           |$LN70@SetScaling@2|
  03400		 |$LN69@SetScaling@2|

; 1377 :         {
; 1378 :             case OMAP_DSS_ROTATION_0:
; 1379 :                 //  Settings for rotation angle 0
; 1380 :                 dwX = pDestRect->left;

  03400	e59d32fc	 ldr         r3, [sp, #0x2FC]
  03404	e5933000	 ldr         r3, [r3]
  03408	e58d3080	 str         r3, [sp, #0x80]

; 1381 :                 dwY = pDestRect->top;

  0340c	e59d32fc	 ldr         r3, [sp, #0x2FC]
  03410	e2833004	 add         r3, r3, #4
  03414	e5933000	 ldr         r3, [r3]
  03418	e58d3118	 str         r3, [sp, #0x118]

; 1382 :                 break;

  0341c	ea00003e	 b           |$LN70@SetScaling@2|
  03420		 |$LN68@SetScaling@2|

; 1383 : 
; 1384 :             case OMAP_DSS_ROTATION_90:
; 1385 :                 //  Settings for rotation angle 90
; 1386 :                 dwX = pDestRect->top;

  03420	e59d32fc	 ldr         r3, [sp, #0x2FC]
  03424	e2833004	 add         r3, r3, #4
  03428	e5933000	 ldr         r3, [r3]
  0342c	e58d3080	 str         r3, [sp, #0x80]

; 1387 :                 dwY = GetLCDHeight() - dwDestWidth - pDestRect->left;

  03430	e59d02f0	 ldr         r0, [sp, #0x2F0]
  03434	eb000000	 bl          |?GetLCDHeight@OMAPDisplayController@@QAAKXZ|
  03438	e58d0214	 str         r0, [sp, #0x214]
  0343c	e59d2214	 ldr         r2, [sp, #0x214]
  03440	e59d3084	 ldr         r3, [sp, #0x84]
  03444	e0422003	 sub         r2, r2, r3
  03448	e59d32fc	 ldr         r3, [sp, #0x2FC]
  0344c	e5933000	 ldr         r3, [r3]
  03450	e0423003	 sub         r3, r2, r3
  03454	e58d3118	 str         r3, [sp, #0x118]

; 1388 : 
; 1389 :                 i = dwDestWidth;

  03458	e59d3084	 ldr         r3, [sp, #0x84]
  0345c	e58d3078	 str         r3, [sp, #0x78]

; 1390 :                 dwDestWidth = dwDestHeight;

  03460	e59d308c	 ldr         r3, [sp, #0x8C]
  03464	e58d3084	 str         r3, [sp, #0x84]

; 1391 :                 dwDestHeight = i;

  03468	e59d3078	 ldr         r3, [sp, #0x78]
  0346c	e58d308c	 str         r3, [sp, #0x8C]

; 1392 :                 break;

  03470	ea000029	 b           |$LN70@SetScaling@2|
  03474		 |$LN67@SetScaling@2|

; 1393 : 
; 1394 :             case OMAP_DSS_ROTATION_180:
; 1395 :                 //  Settings for rotation angle 180
; 1396 :                 dwX = GetLCDWidth() - dwDestWidth - pDestRect->left;

  03474	e59d02f0	 ldr         r0, [sp, #0x2F0]
  03478	eb000000	 bl          |?GetLCDWidth@OMAPDisplayController@@QAAKXZ|
  0347c	e58d0218	 str         r0, [sp, #0x218]
  03480	e59d2218	 ldr         r2, [sp, #0x218]
  03484	e59d3084	 ldr         r3, [sp, #0x84]
  03488	e0422003	 sub         r2, r2, r3
  0348c	e59d32fc	 ldr         r3, [sp, #0x2FC]
  03490	e5933000	 ldr         r3, [r3]
  03494	e0423003	 sub         r3, r2, r3
  03498	e58d3080	 str         r3, [sp, #0x80]

; 1397 :                 dwY = GetLCDHeight() - dwDestHeight - pDestRect->top;

  0349c	e59d02f0	 ldr         r0, [sp, #0x2F0]
  034a0	eb000000	 bl          |?GetLCDHeight@OMAPDisplayController@@QAAKXZ|
  034a4	e58d021c	 str         r0, [sp, #0x21C]
  034a8	e59d221c	 ldr         r2, [sp, #0x21C]
  034ac	e59d308c	 ldr         r3, [sp, #0x8C]
  034b0	e0422003	 sub         r2, r2, r3
  034b4	e59d32fc	 ldr         r3, [sp, #0x2FC]
  034b8	e2833004	 add         r3, r3, #4
  034bc	e5933000	 ldr         r3, [r3]
  034c0	e0423003	 sub         r3, r2, r3
  034c4	e58d3118	 str         r3, [sp, #0x118]

; 1398 :                 break;

  034c8	ea000013	 b           |$LN70@SetScaling@2|
  034cc		 |$LN66@SetScaling@2|

; 1399 : 
; 1400 :             case OMAP_DSS_ROTATION_270:
; 1401 :                 //  Settings for rotation angle 270
; 1402 :                 dwX = GetLCDWidth() - dwDestHeight - pDestRect->top;

  034cc	e59d02f0	 ldr         r0, [sp, #0x2F0]
  034d0	eb000000	 bl          |?GetLCDWidth@OMAPDisplayController@@QAAKXZ|
  034d4	e58d0220	 str         r0, [sp, #0x220]
  034d8	e59d2220	 ldr         r2, [sp, #0x220]
  034dc	e59d308c	 ldr         r3, [sp, #0x8C]
  034e0	e0422003	 sub         r2, r2, r3
  034e4	e59d32fc	 ldr         r3, [sp, #0x2FC]
  034e8	e2833004	 add         r3, r3, #4
  034ec	e5933000	 ldr         r3, [r3]
  034f0	e0423003	 sub         r3, r2, r3
  034f4	e58d3080	 str         r3, [sp, #0x80]

; 1403 :                 dwY = pDestRect->left;

  034f8	e59d32fc	 ldr         r3, [sp, #0x2FC]
  034fc	e5933000	 ldr         r3, [r3]
  03500	e58d3118	 str         r3, [sp, #0x118]

; 1404 : 
; 1405 :                 i = dwDestWidth;

  03504	e59d3084	 ldr         r3, [sp, #0x84]
  03508	e58d3078	 str         r3, [sp, #0x78]

; 1406 :                 dwDestWidth = dwDestHeight;

  0350c	e59d308c	 ldr         r3, [sp, #0x8C]
  03510	e58d3084	 str         r3, [sp, #0x84]

; 1407 :                 dwDestHeight = i;

  03514	e59d3078	 ldr         r3, [sp, #0x78]
  03518	e58d308c	 str         r3, [sp, #0x8C]
  0351c		 |$LN70@SetScaling@2|

; 1408 :                 break;
; 1409 :         }
; 1410 :     
; 1411 : 
; 1412 :         //  Compute horizontal and vertical scaling factors
; 1413 :         dwHorzScale = 1024 * dwSrcWidth / dwDestWidth;

  0351c	e59d2008	 ldr         r2, [sp, #8]
  03520	e3a03b01	 mov         r3, #1, 22
  03524	e0010392	 mul         r1, r2, r3
  03528	e59d0084	 ldr         r0, [sp, #0x84]
  0352c	eb000000	 bl          __rt_udiv
  03530	e58d014c	 str         r0, [sp, #0x14C]

; 1414 :         dwVertScale = 1024 * dwSrcHeight / dwDestHeight;

  03534	e59d20f0	 ldr         r2, [sp, #0xF0]
  03538	e3a03b01	 mov         r3, #1, 22
  0353c	e0010392	 mul         r1, r2, r3
  03540	e59d008c	 ldr         r0, [sp, #0x8C]
  03544	eb000000	 bl          __rt_udiv
  03548	e58d0088	 str         r0, [sp, #0x88]

; 1415 : 
; 1416 :         //  Determine if scaling is within HW scaling capabilities
; 1417 :         //  If not, use surface scaling factor to decimate the source surface
; 1418 :         //  by 2, 4 or 8
; 1419 :         if( bYUVRotated )

  0354c	e59d3150	 ldr         r3, [sp, #0x150]
  03550	e3530000	 cmp         r3, #0
  03554	0a00001e	 beq         |$LN65@SetScaling@2|

; 1420 :         {
; 1421 :             if( dwHorzScale >= 2048 )

  03558	e59d314c	 ldr         r3, [sp, #0x14C]
  0355c	e3530b02	 cmp         r3, #2, 22
  03560	3a000001	 bcc         |$LN64@SetScaling@2|

; 1422 :                 dwHorzDecimation = 2;

  03564	e3a03002	 mov         r3, #2
  03568	e58d316c	 str         r3, [sp, #0x16C]
  0356c		 |$LN64@SetScaling@2|

; 1423 : 
; 1424 :             if( dwHorzScale >= 4096 )

  0356c	e59d314c	 ldr         r3, [sp, #0x14C]
  03570	e3530a01	 cmp         r3, #1, 20
  03574	3a000001	 bcc         |$LN63@SetScaling@2|

; 1425 :                 dwHorzDecimation = 4;

  03578	e3a03004	 mov         r3, #4
  0357c	e58d316c	 str         r3, [sp, #0x16C]
  03580		 |$LN63@SetScaling@2|

; 1426 : 
; 1427 :             if( dwHorzScale >= 8192 )

  03580	e59d314c	 ldr         r3, [sp, #0x14C]
  03584	e3530a02	 cmp         r3, #2, 20
  03588	3a000001	 bcc         |$LN62@SetScaling@2|

; 1428 :                 dwHorzDecimation = 8;

  0358c	e3a03008	 mov         r3, #8
  03590	e58d316c	 str         r3, [sp, #0x16C]
  03594		 |$LN62@SetScaling@2|

; 1429 : 
; 1430 : 
; 1431 :             if( dwVertScale >= 2048 )

  03594	e59d3088	 ldr         r3, [sp, #0x88]
  03598	e3530b02	 cmp         r3, #2, 22
  0359c	3a000001	 bcc         |$LN61@SetScaling@2|

; 1432 :                 dwVertDecimation = 2;

  035a0	e3a03002	 mov         r3, #2
  035a4	e58d3168	 str         r3, [sp, #0x168]
  035a8		 |$LN61@SetScaling@2|

; 1433 : 
; 1434 :             if( dwVertScale >= 4096 )

  035a8	e59d3088	 ldr         r3, [sp, #0x88]
  035ac	e3530a01	 cmp         r3, #1, 20
  035b0	3a000001	 bcc         |$LN60@SetScaling@2|

; 1435 :                 dwVertDecimation = 4;

  035b4	e3a03004	 mov         r3, #4
  035b8	e58d3168	 str         r3, [sp, #0x168]
  035bc		 |$LN60@SetScaling@2|

; 1436 : 
; 1437 :             if( dwVertScale >= 8192 )

  035bc	e59d3088	 ldr         r3, [sp, #0x88]
  035c0	e3530a02	 cmp         r3, #2, 20
  035c4	3a000001	 bcc         |$LN59@SetScaling@2|

; 1438 :                 dwVertDecimation = 8;

  035c8	e3a03008	 mov         r3, #8
  035cc	e58d3168	 str         r3, [sp, #0x168]
  035d0		 |$LN59@SetScaling@2|

; 1439 :         }
; 1440 :         else

  035d0	ea000018	 b           |$LN58@SetScaling@2|
  035d4		 |$LN65@SetScaling@2|

; 1441 :         {
; 1442 :             if( dwHorzScale > 4096 )

  035d4	e59d314c	 ldr         r3, [sp, #0x14C]
  035d8	e3530a01	 cmp         r3, #1, 20
  035dc	9a000001	 bls         |$LN57@SetScaling@2|

; 1443 :                 dwHorzDecimation = 2;

  035e0	e3a03002	 mov         r3, #2
  035e4	e58d316c	 str         r3, [sp, #0x16C]
  035e8		 |$LN57@SetScaling@2|

; 1444 : 
; 1445 :             if( dwHorzScale > 8192 )

  035e8	e59d314c	 ldr         r3, [sp, #0x14C]
  035ec	e3530a02	 cmp         r3, #2, 20
  035f0	9a000001	 bls         |$LN56@SetScaling@2|

; 1446 :                 dwHorzDecimation = 4;

  035f4	e3a03004	 mov         r3, #4
  035f8	e58d316c	 str         r3, [sp, #0x16C]
  035fc		 |$LN56@SetScaling@2|

; 1447 : 
; 1448 : 
; 1449 :             if( dwVertScale > 2048 )

  035fc	e59d3088	 ldr         r3, [sp, #0x88]
  03600	e3530b02	 cmp         r3, #2, 22
  03604	9a000001	 bls         |$LN55@SetScaling@2|

; 1450 :                 dwVertDecimation = 2;

  03608	e3a03002	 mov         r3, #2
  0360c	e58d3168	 str         r3, [sp, #0x168]
  03610		 |$LN55@SetScaling@2|

; 1451 : 
; 1452 :             if( dwVertScale > 4096 )

  03610	e59d3088	 ldr         r3, [sp, #0x88]
  03614	e3530a01	 cmp         r3, #1, 20
  03618	9a000001	 bls         |$LN54@SetScaling@2|

; 1453 :                 dwVertDecimation = 4;

  0361c	e3a03004	 mov         r3, #4
  03620	e58d3168	 str         r3, [sp, #0x168]
  03624		 |$LN54@SetScaling@2|

; 1454 : 
; 1455 :             if( dwVertScale > 8192 )

  03624	e59d3088	 ldr         r3, [sp, #0x88]
  03628	e3530a02	 cmp         r3, #2, 20
  0362c	9a000001	 bls         |$LN53@SetScaling@2|

; 1456 :                 dwVertDecimation = 8;

  03630	e3a03008	 mov         r3, #8
  03634	e58d3168	 str         r3, [sp, #0x168]
  03638		 |$LN53@SetScaling@2|
  03638		 |$LN58@SetScaling@2|

; 1457 :         }
; 1458 : 
; 1459 :             
; 1460 :         //  Adjust the HW scaling factors by the decimation factor      
; 1461 :         dwHorzScale = 1024 * (dwSrcWidth/dwHorzDecimation) / dwDestWidth;    

  03638	e59d1008	 ldr         r1, [sp, #8]
  0363c	e59d016c	 ldr         r0, [sp, #0x16C]
  03640	eb000000	 bl          __rt_udiv
  03644	e3a03b01	 mov         r3, #1, 22
  03648	e0010390	 mul         r1, r0, r3
  0364c	e59d0084	 ldr         r0, [sp, #0x84]
  03650	eb000000	 bl          __rt_udiv
  03654	e58d014c	 str         r0, [sp, #0x14C]

; 1462 :         dwVertScale = 1024 * (dwSrcHeight/dwVertDecimation) / dwDestHeight;    

  03658	e59d10f0	 ldr         r1, [sp, #0xF0]
  0365c	e59d0168	 ldr         r0, [sp, #0x168]
  03660	eb000000	 bl          __rt_udiv
  03664	e3a03b01	 mov         r3, #1, 22
  03668	e0010390	 mul         r1, r0, r3
  0366c	e59d008c	 ldr         r0, [sp, #0x8C]
  03670	eb000000	 bl          __rt_udiv
  03674	e58d0088	 str         r0, [sp, #0x88]

; 1463 :         
; 1464 :         
; 1465 :         //  Set the decimation factors for the surface 
; 1466 :         switch( eRotation )

  03678	e59d306c	 ldr         r3, [sp, #0x6C]
  0367c	e58d3224	 str         r3, [sp, #0x224]
  03680	e59d3224	 ldr         r3, [sp, #0x224]
  03684	e35300b4	 cmp         r3, #0xB4
  03688	ca000009	 bgt         |$LN113@SetScaling@2|
  0368c	e59d3224	 ldr         r3, [sp, #0x224]
  03690	e35300b4	 cmp         r3, #0xB4
  03694	0a00000c	 beq         |$LN50@SetScaling@2|
  03698	e59d3224	 ldr         r3, [sp, #0x224]
  0369c	e3530000	 cmp         r3, #0
  036a0	0a000009	 beq         |$LN50@SetScaling@2|
  036a4	e59d3224	 ldr         r3, [sp, #0x224]
  036a8	e353005a	 cmp         r3, #0x5A
  036ac	0a000017	 beq         |$LN49@SetScaling@2|
  036b0	ea000026	 b           |$LN51@SetScaling@2|
  036b4		 |$LN113@SetScaling@2|
  036b4	e59d2224	 ldr         r2, [sp, #0x224]
  036b8	e3a03c01	 mov         r3, #1, 24
  036bc	e383300e	 orr         r3, r3, #0xE
  036c0	e1520003	 cmp         r2, r3
  036c4	0a000011	 beq         |$LN49@SetScaling@2|
  036c8	ea000020	 b           |$LN51@SetScaling@2|
  036cc		 |$LN50@SetScaling@2|

; 1467 :         {
; 1468 :             case OMAP_DSS_ROTATION_0:
; 1469 :             case OMAP_DSS_ROTATION_180:            
; 1470 :                 //  Standard orientation
; 1471 :                 pSurface->SetHorizontalScaling( dwHorzDecimation );

  036cc	e59d116c	 ldr         r1, [sp, #0x16C]
  036d0	e59d30f8	 ldr         r3, [sp, #0xF8]
  036d4	e5933000	 ldr         r3, [r3]
  036d8	e2833030	 add         r3, r3, #0x30
  036dc	e59d00f8	 ldr         r0, [sp, #0xF8]
  036e0	e5933000	 ldr         r3, [r3]
  036e4	e1a0e00f	 mov         lr, pc
  036e8	e12fff13	 bx          r3

; 1472 :                 pSurface->SetVerticalScaling( dwVertDecimation );

  036ec	e59d1168	 ldr         r1, [sp, #0x168]
  036f0	e59d30f8	 ldr         r3, [sp, #0xF8]
  036f4	e5933000	 ldr         r3, [r3]
  036f8	e2833034	 add         r3, r3, #0x34
  036fc	e59d00f8	 ldr         r0, [sp, #0xF8]
  03700	e5933000	 ldr         r3, [r3]
  03704	e1a0e00f	 mov         lr, pc
  03708	e12fff13	 bx          r3

; 1473 :                 break;

  0370c	ea00000f	 b           |$LN51@SetScaling@2|
  03710		 |$LN49@SetScaling@2|

; 1474 : 
; 1475 :             case OMAP_DSS_ROTATION_90:
; 1476 :             case OMAP_DSS_ROTATION_270:            
; 1477 :                 //  Rotated orientation
; 1478 :                 pSurface->SetHorizontalScaling( dwVertDecimation );

  03710	e59d1168	 ldr         r1, [sp, #0x168]
  03714	e59d30f8	 ldr         r3, [sp, #0xF8]
  03718	e5933000	 ldr         r3, [r3]
  0371c	e2833030	 add         r3, r3, #0x30
  03720	e59d00f8	 ldr         r0, [sp, #0xF8]
  03724	e5933000	 ldr         r3, [r3]
  03728	e1a0e00f	 mov         lr, pc
  0372c	e12fff13	 bx          r3

; 1479 :                 pSurface->SetVerticalScaling( dwHorzDecimation );

  03730	e59d116c	 ldr         r1, [sp, #0x16C]
  03734	e59d30f8	 ldr         r3, [sp, #0xF8]
  03738	e5933000	 ldr         r3, [r3]
  0373c	e2833034	 add         r3, r3, #0x34
  03740	e59d00f8	 ldr         r0, [sp, #0xF8]
  03744	e5933000	 ldr         r3, [r3]
  03748	e1a0e00f	 mov         lr, pc
  0374c	e12fff13	 bx          r3
  03750		 |$LN51@SetScaling@2|

; 1480 :                 break;
; 1481 :         }
; 1482 :         
; 1483 :         //  Adjust the source width and height by the decimation factor
; 1484 :         dwSrcWidth  = dwSrcWidth / dwHorzDecimation;

  03750	e59d1008	 ldr         r1, [sp, #8]
  03754	e59d016c	 ldr         r0, [sp, #0x16C]
  03758	eb000000	 bl          __rt_udiv
  0375c	e58d0008	 str         r0, [sp, #8]

; 1485 :         dwSrcHeight = dwSrcHeight / dwVertDecimation;

  03760	e59d10f0	 ldr         r1, [sp, #0xF0]
  03764	e59d0168	 ldr         r0, [sp, #0x168]
  03768	eb000000	 bl          __rt_udiv
  0376c	e58d00f0	 str         r0, [sp, #0xF0]

; 1486 : 
; 1487 : 
; 1488 :         //  If YUV rotated, check for any odd width or height values due to decimation
; 1489 :         if( bYUVRotated )

  03770	e59d3150	 ldr         r3, [sp, #0x150]
  03774	e3530000	 cmp         r3, #0
  03778	0a00006d	 beq         |$LN48@SetScaling@2|

; 1490 :         {
; 1491 :             if( (dwSrcWidth % 2) == 1 )

  0377c	e59d1008	 ldr         r1, [sp, #8]
  03780	e3a00002	 mov         r0, #2
  03784	eb000000	 bl          __rt_udiv
  03788	e3510001	 cmp         r1, #1
  0378c	1a000006	 bne         |$LN47@SetScaling@2|

; 1492 :             {
; 1493 :                 dwSrcWidth -= 1;

  03790	e59d3008	 ldr         r3, [sp, #8]
  03794	e2433001	 sub         r3, r3, #1
  03798	e58d3008	 str         r3, [sp, #8]

; 1494 :                 
; 1495 :                 //  Adjust clipping; note rotation means adjust clipping height here
; 1496 :                 privSrcRect.bottom -= dwHorzDecimation;

  0379c	e59d2110	 ldr         r2, [sp, #0x110]
  037a0	e59d316c	 ldr         r3, [sp, #0x16C]
  037a4	e0423003	 sub         r3, r2, r3
  037a8	e58d3110	 str         r3, [sp, #0x110]
  037ac		 |$LN47@SetScaling@2|

; 1497 :             }
; 1498 : 
; 1499 :             if( (dwSrcHeight % 2) == 1 )

  037ac	e59d10f0	 ldr         r1, [sp, #0xF0]
  037b0	e3a00002	 mov         r0, #2
  037b4	eb000000	 bl          __rt_udiv
  037b8	e3510001	 cmp         r1, #1
  037bc	1a000006	 bne         |$LN46@SetScaling@2|

; 1500 :             {
; 1501 :                 dwSrcHeight -= 1;

  037c0	e59d30f0	 ldr         r3, [sp, #0xF0]
  037c4	e2433001	 sub         r3, r3, #1
  037c8	e58d30f0	 str         r3, [sp, #0xF0]

; 1502 : 
; 1503 :                 //  Adjust clipping; note rotation means adjust clipping width here
; 1504 :                 privSrcRect.right -= dwVertDecimation;

  037cc	e59d210c	 ldr         r2, [sp, #0x10C]
  037d0	e59d3168	 ldr         r3, [sp, #0x168]
  037d4	e0423003	 sub         r3, r2, r3
  037d8	e58d310c	 str         r3, [sp, #0x10C]
  037dc		 |$LN46@SetScaling@2|

; 1505 :             }
; 1506 : 
; 1507 :             //  Set the clipping region for the surface
; 1508 :             g_rgPipelineMapping[ePipeline].pSurface->SetClipping( &privSrcRect );

  037dc	e28d1f41	 add         r1, sp, #0x41, 30
  037e0	e59d02f4	 ldr         r0, [sp, #0x2F4]
  037e4	e3a03020	 mov         r3, #0x20
  037e8	e0020390	 mul         r2, r0, r3
  037ec	e59f3348	 ldr         r3, [pc, #0x348]
  037f0	e0833002	 add         r3, r3, r2
  037f4	e2833008	 add         r3, r3, #8
  037f8	e593e000	 ldr         lr, [r3]
  037fc	e59d02f4	 ldr         r0, [sp, #0x2F4]
  03800	e3a03020	 mov         r3, #0x20
  03804	e0020390	 mul         r2, r0, r3
  03808	e59f332c	 ldr         r3, [pc, #0x32C]
  0380c	e0833002	 add         r3, r3, r2
  03810	e2833008	 add         r3, r3, #8
  03814	e5930000	 ldr         r0, [r3]
  03818	e59e3000	 ldr         r3, [lr]
  0381c	e2833020	 add         r3, r3, #0x20
  03820	e5933000	 ldr         r3, [r3]
  03824	e1a0e00f	 mov         lr, pc
  03828	e12fff13	 bx          r3

; 1509 :             if (g_rgPipelineMapping[ePipeline].pSurface->OmapAssocSurface())

  0382c	e59d12f4	 ldr         r1, [sp, #0x2F4]
  03830	e3a03020	 mov         r3, #0x20
  03834	e0020391	 mul         r2, r1, r3
  03838	e59f32fc	 ldr         r3, [pc, #0x2FC]
  0383c	e0833002	 add         r3, r3, r2
  03840	e2833008	 add         r3, r3, #8
  03844	e5930000	 ldr         r0, [r3]
  03848	eb000000	 bl          |?OmapAssocSurface@OMAPSurface@@QAAPAV1@XZ|
  0384c	e58d0228	 str         r0, [sp, #0x228]
  03850	e59d3228	 ldr         r3, [sp, #0x228]
  03854	e3530000	 cmp         r3, #0
  03858	0a000029	 beq         |$LN45@SetScaling@2|

; 1510 :             {
; 1511 :                 RECT rszRect;
; 1512 :                 rszRect.top = 0;

  0385c	e3a03000	 mov         r3, #0
  03860	e58d3198	 str         r3, [sp, #0x198]

; 1513 :                 rszRect.left = 0;

  03864	e3a03000	 mov         r3, #0
  03868	e58d3194	 str         r3, [sp, #0x194]

; 1514 :                 rszRect.bottom = rszRect.top + (pDestRect->bottom - pDestRect->top);

  0386c	e59d32fc	 ldr         r3, [sp, #0x2FC]
  03870	e283200c	 add         r2, r3, #0xC
  03874	e59d32fc	 ldr         r3, [sp, #0x2FC]
  03878	e2833004	 add         r3, r3, #4
  0387c	e5922000	 ldr         r2, [r2]
  03880	e5933000	 ldr         r3, [r3]
  03884	e0422003	 sub         r2, r2, r3
  03888	e59d3198	 ldr         r3, [sp, #0x198]
  0388c	e0833002	 add         r3, r3, r2
  03890	e58d31a0	 str         r3, [sp, #0x1A0]

; 1515 :                 rszRect.right = rszRect.left + (pDestRect->right - pDestRect->left);                            

  03894	e59d32fc	 ldr         r3, [sp, #0x2FC]
  03898	e2833008	 add         r3, r3, #8
  0389c	e5932000	 ldr         r2, [r3]
  038a0	e59d32fc	 ldr         r3, [sp, #0x2FC]
  038a4	e5933000	 ldr         r3, [r3]
  038a8	e0422003	 sub         r2, r2, r3
  038ac	e59d3194	 ldr         r3, [sp, #0x194]
  038b0	e0833002	 add         r3, r3, r2
  038b4	e58d319c	 str         r3, [sp, #0x19C]

; 1516 :                 g_rgPipelineMapping[ePipeline].pSurface->OmapAssocSurface()->SetClipping( &rszRect );

  038b8	e59d12f4	 ldr         r1, [sp, #0x2F4]
  038bc	e3a03020	 mov         r3, #0x20
  038c0	e0020391	 mul         r2, r1, r3
  038c4	e59f3270	 ldr         r3, [pc, #0x270]
  038c8	e0833002	 add         r3, r3, r2
  038cc	e2833008	 add         r3, r3, #8
  038d0	e5930000	 ldr         r0, [r3]
  038d4	eb000000	 bl          |?OmapAssocSurface@OMAPSurface@@QAAPAV1@XZ|
  038d8	e58d022c	 str         r0, [sp, #0x22C]
  038dc	e59d322c	 ldr         r3, [sp, #0x22C]
  038e0	e58d3230	 str         r3, [sp, #0x230]
  038e4	e28d1f65	 add         r1, sp, #0x65, 30
  038e8	e59d0230	 ldr         r0, [sp, #0x230]
  038ec	e59d3230	 ldr         r3, [sp, #0x230]
  038f0	e5933000	 ldr         r3, [r3]
  038f4	e2833020	 add         r3, r3, #0x20
  038f8	e5933000	 ldr         r3, [r3]
  038fc	e1a0e00f	 mov         lr, pc
  03900	e12fff13	 bx          r3
  03904		 |$LN45@SetScaling@2|

; 1517 :             }                
; 1518 : 
; 1519 :             //  Recalculate the scale factors to account for adjustments made
; 1520 :             dwHorzScale = 1024 * dwSrcWidth / dwDestWidth;

  03904	e59d2008	 ldr         r2, [sp, #8]
  03908	e3a03b01	 mov         r3, #1, 22
  0390c	e0010392	 mul         r1, r2, r3
  03910	e59d0084	 ldr         r0, [sp, #0x84]
  03914	eb000000	 bl          __rt_udiv
  03918	e58d014c	 str         r0, [sp, #0x14C]

; 1521 :             dwVertScale = 1024 * dwSrcHeight / dwDestHeight;

  0391c	e59d20f0	 ldr         r2, [sp, #0xF0]
  03920	e3a03b01	 mov         r3, #1, 22
  03924	e0010392	 mul         r1, r2, r3
  03928	e59d008c	 ldr         r0, [sp, #0x8C]
  0392c	eb000000	 bl          __rt_udiv
  03930	e58d0088	 str         r0, [sp, #0x88]
  03934		 |$LN48@SetScaling@2|

; 1522 :         } 
; 1523 : 
; 1524 : 
; 1525 :         //  Based on scaling factor, determine which coeffs to use and if to enable scaling
; 1526 :         dwScaleEnable |= (dwHorzScale == 1024) ? 0 : DISPC_VID_ATTR_VIDRESIZE_HORIZONTAL;

  03934	e59d314c	 ldr         r3, [sp, #0x14C]
  03938	e3530b01	 cmp         r3, #1, 22
  0393c	1a000002	 bne         |$LN114@SetScaling@2|
  03940	e3a03000	 mov         r3, #0
  03944	e58d3234	 str         r3, [sp, #0x234]
  03948	ea000001	 b           |$LN115@SetScaling@2|
  0394c		 |$LN114@SetScaling@2|
  0394c	e3a03020	 mov         r3, #0x20
  03950	e58d3234	 str         r3, [sp, #0x234]
  03954		 |$LN115@SetScaling@2|
  03954	e59d2004	 ldr         r2, [sp, #4]
  03958	e59d3234	 ldr         r3, [sp, #0x234]
  0395c	e1823003	 orr         r3, r2, r3
  03960	e58d3004	 str         r3, [sp, #4]

; 1527 :         dwScaleEnable |= (dwVertScale == 1024) ? 0 : DISPC_VID_ATTR_VIDRESIZE_VERTICAL;

  03964	e59d3088	 ldr         r3, [sp, #0x88]
  03968	e3530b01	 cmp         r3, #1, 22
  0396c	1a000002	 bne         |$LN116@SetScaling@2|
  03970	e3a03000	 mov         r3, #0
  03974	e58d3238	 str         r3, [sp, #0x238]
  03978	ea000001	 b           |$LN117@SetScaling@2|
  0397c		 |$LN116@SetScaling@2|
  0397c	e3a03040	 mov         r3, #0x40
  03980	e58d3238	 str         r3, [sp, #0x238]
  03984		 |$LN117@SetScaling@2|
  03984	e59d2004	 ldr         r2, [sp, #4]
  03988	e59d3238	 ldr         r3, [sp, #0x238]
  0398c	e1823003	 orr         r3, r2, r3
  03990	e58d3004	 str         r3, [sp, #4]

; 1528 : 
; 1529 : 
; 1530 :         //  Horizontal scaling
; 1531 :         if( dwHorzScale > 1024 )

  03994	e59d314c	 ldr         r3, [sp, #0x14C]
  03998	e3530b01	 cmp         r3, #1, 22
  0399c	9a000005	 bls         |$LN44@SetScaling@2|

; 1532 :         {
; 1533 :             //  Use down-sampling horizontal coeffs
; 1534 :             dwScaleEnable |= DISPC_VID_ATTR_VIDHRESIZE_CONF_DOWN;

  039a0	e59d3004	 ldr         r3, [sp, #4]
  039a4	e3833080	 orr         r3, r3, #0x80
  039a8	e58d3004	 str         r3, [sp, #4]

; 1535 :             pHorizCoeffs = g_dwScalingCoeff_Horiz_Down;

  039ac	e59f319c	 ldr         r3, [pc, #0x19C]
  039b0	e58d3154	 str         r3, [sp, #0x154]

; 1536 :         }
; 1537 :         else

  039b4	ea000003	 b           |$LN43@SetScaling@2|
  039b8		 |$LN44@SetScaling@2|

; 1538 :         {
; 1539 :             //  Use up-sampling horizontal coeffs
; 1540 :             dwScaleEnable |= DISPC_VID_ATTR_VIDHRESIZE_CONF_UP;

  039b8	e59d3004	 ldr         r3, [sp, #4]
  039bc	e58d3004	 str         r3, [sp, #4]

; 1541 :             pHorizCoeffs = g_dwScalingCoeff_Horiz_Up;

  039c0	e59f3184	 ldr         r3, [pc, #0x184]
  039c4	e58d3154	 str         r3, [sp, #0x154]
  039c8		 |$LN43@SetScaling@2|

; 1542 :         }
; 1543 : 
; 1544 : 
; 1545 :         //  Vertical scaling
; 1546 :         if( dwVertScale > 1024 )

  039c8	e59d3088	 ldr         r3, [sp, #0x88]
  039cc	e3530b01	 cmp         r3, #1, 22
  039d0	9a00000b	 bls         |$LN42@SetScaling@2|

; 1547 :         {
; 1548 :             //  Use 5 tap down-sampling vertical coeffs for scaling between 50% and 25%
; 1549 :             dwScaleEnable |= DISPC_VID_ATTR_VIDVRESIZE_CONF_DOWN;

  039d4	e59d3004	 ldr         r3, [sp, #4]
  039d8	e3833c01	 orr         r3, r3, #1, 24
  039dc	e58d3004	 str         r3, [sp, #4]

; 1550 :             dwScaleEnable |= DISPC_VID_ATTR_VIDVERTICALTAPS_5;

  039e0	e59d3004	 ldr         r3, [sp, #4]
  039e4	e3833602	 orr         r3, r3, #2, 12
  039e8	e58d3004	 str         r3, [sp, #4]

; 1551 :             dwScaleEnable |= DISPC_VID_ATTR_VIDLINEBUFFERSPLIT;

  039ec	e59d3004	 ldr         r3, [sp, #4]
  039f0	e3833501	 orr         r3, r3, #1, 10
  039f4	e58d3004	 str         r3, [sp, #4]

; 1552 :             pVertCoeffs = g_dwScalingCoeff_Vert_Down_5_Taps;

  039f8	e59f3140	 ldr         r3, [pc, #0x140]
  039fc	e58d315c	 str         r3, [sp, #0x15C]

; 1553 :         } 
; 1554 :         //else if( dwVertScale > 1024 )
; 1555 :         //{
; 1556 :         //    //  Use 3 tap down-sampling vertical coeffs for scaling between 100% and 50%
; 1557 :         //    dwScaleEnable |= DISPC_VID_ATTR_VIDVRESIZE_CONF_DOWN;
; 1558 :         //    dwScaleEnable |= DISPC_VID_ATTR_VIDVERTICALTAPS_3;
; 1559 :         //    pVertCoeffs = g_dwScalingCoeff_Vert_Down_3_Taps;
; 1560 :         //}
; 1561 :         else

  03a00	ea000005	 b           |$LN41@SetScaling@2|
  03a04		 |$LN42@SetScaling@2|

; 1562 :         {
; 1563 :             //  Use up-sampling vertical coeffs
; 1564 :             dwScaleEnable |= DISPC_VID_ATTR_VIDVRESIZE_CONF_UP;

  03a04	e59d3004	 ldr         r3, [sp, #4]
  03a08	e58d3004	 str         r3, [sp, #4]

; 1565 :             dwScaleEnable |= DISPC_VID_ATTR_VIDVERTICALTAPS_3;

  03a0c	e59d3004	 ldr         r3, [sp, #4]
  03a10	e58d3004	 str         r3, [sp, #4]

; 1566 :             pVertCoeffs = g_dwScalingCoeff_Vert_Up_3_Taps;

  03a14	e59f312c	 ldr         r3, [pc, #0x12C]
  03a18	e58d315c	 str         r3, [sp, #0x15C]
  03a1c		 |$LN41@SetScaling@2|

; 1567 :         }
; 1568 : 
; 1569 :         // For Portrait mode, the Vertical down scale coeff has to be 5 tap to
; 1570 :         // prevent SYNCLOST. so ignore the scale factor and force the 5-tap.
; 1571 :         if ((( eRotation == OMAP_DSS_ROTATION_90 )|| 
; 1572 :             ( eRotation == OMAP_DSS_ROTATION_270 )) && 
; 1573 :             ( pVertCoeffs == g_dwScalingCoeff_Vert_Down_3_Taps ))

  03a1c	e59d306c	 ldr         r3, [sp, #0x6C]
  03a20	e353005a	 cmp         r3, #0x5A
  03a24	0a000004	 beq         |$LN39@SetScaling@2|
  03a28	e59d206c	 ldr         r2, [sp, #0x6C]
  03a2c	e3a03c01	 mov         r3, #1, 24
  03a30	e383300e	 orr         r3, r3, #0xE
  03a34	e1520003	 cmp         r2, r3
  03a38	1a00000d	 bne         |$LN40@SetScaling@2|
  03a3c		 |$LN39@SetScaling@2|
  03a3c	e59d215c	 ldr         r2, [sp, #0x15C]
  03a40	e59f30fc	 ldr         r3, [pc, #0xFC]
  03a44	e1520003	 cmp         r2, r3
  03a48	1a000009	 bne         |$LN40@SetScaling@2|

; 1574 :         {
; 1575 :             //clear existing scale option
; 1576 :             dwScaleEnable &= ~DISPC_VID_ATTR_VIDVERTICALTAPS_3;

  03a4c	e59d3004	 ldr         r3, [sp, #4]
  03a50	e58d3004	 str         r3, [sp, #4]

; 1577 :             dwScaleEnable |= DISPC_VID_ATTR_VIDVERTICALTAPS_5;

  03a54	e59d3004	 ldr         r3, [sp, #4]
  03a58	e3833602	 orr         r3, r3, #2, 12
  03a5c	e58d3004	 str         r3, [sp, #4]

; 1578 :             dwScaleEnable |= DISPC_VID_ATTR_VIDLINEBUFFERSPLIT;

  03a60	e59d3004	 ldr         r3, [sp, #4]
  03a64	e3833501	 orr         r3, r3, #1, 10
  03a68	e58d3004	 str         r3, [sp, #4]

; 1579 :             pVertCoeffs = g_dwScalingCoeff_Vert_Down_5_Taps;

  03a6c	e59f30cc	 ldr         r3, [pc, #0xCC]
  03a70	e58d315c	 str         r3, [sp, #0x15C]
  03a74		 |$LN40@SetScaling@2|

; 1580 :         }
; 1581 :     }

  03a74	ea00013d	 b           |$LN38@SetScaling@2|
  03a78		 |$LN72@SetScaling@2|

; 1582 : 
; 1583 : 
; 1584 :     //------------------------------------------------------------------------------
; 1585 :     //  Configure the scaling of the pipeline for TV display
; 1586 :     //
; 1587 :     else if( g_rgPipelineMapping[ePipeline].eDestination == OMAP_DSS_DESTINATION_TVOUT )

  03a78	e59d12f4	 ldr         r1, [sp, #0x2F4]
  03a7c	e3a03020	 mov         r3, #0x20
  03a80	e0020391	 mul         r2, r1, r3
  03a84	e59f30b0	 ldr         r3, [pc, #0xB0]
  03a88	e0833002	 add         r3, r3, r2
  03a8c	e2833004	 add         r3, r3, #4
  03a90	e5933000	 ldr         r3, [r3]
  03a94	e3530001	 cmp         r3, #1
  03a98	1a000125	 bne         |$LN37@SetScaling@2|

; 1588 :     {
; 1589 :         dwInterlaceCorrection = 2;

  03a9c	e3a03002	 mov         r3, #2
  03aa0	e58d3160	 str         r3, [sp, #0x160]

; 1590 : 
; 1591 :         //  Half the dest height to enable filtering for TV interlace
; 1592 :         dwDestHeight /= dwInterlaceCorrection;

  03aa4	e59d108c	 ldr         r1, [sp, #0x8C]
  03aa8	e59d0160	 ldr         r0, [sp, #0x160]
  03aac	eb000000	 bl          __rt_udiv
  03ab0	e58d008c	 str         r0, [sp, #0x8C]

; 1593 : 
; 1594 : #if 0
; 1595 :         //  Compute horizontal and vertical scaling factors
; 1596 :         dwHorzScale = 1024 * dwSrcWidth / dwDestWidth;
; 1597 :         dwVertScale = 1024 * dwSrcHeight / dwDestHeight;
; 1598 :         
; 1599 :         //  Determine if scaling is within HW scaling capabilities
; 1600 :         //  If not, use surface scaling factor to decimate the source surface
; 1601 :         //  by 2, 4 or 8
; 1602 :         if( dwHorzScale > 4096 )
; 1603 :             dwHorzDecimation = 2;
; 1604 : 
; 1605 :         if( dwHorzScale > 8192 )
; 1606 :             dwHorzDecimation = 4;
; 1607 : 
; 1608 : 
; 1609 :         if( dwVertScale > 2048 )
; 1610 :             dwVertDecimation = 2;
; 1611 : 
; 1612 :         if( dwVertScale > 4096 )
; 1613 :             dwVertDecimation = 4;
; 1614 : 
; 1615 :         if( dwVertScale > 8192 )
; 1616 :             dwVertDecimation = 8;
; 1617 : 
; 1618 :             
; 1619 :         //  Adjust the HW scaling factors by the decimation factor      
; 1620 :         dwHorzScale = 1024 * (dwSrcWidth/dwHorzDecimation) / dwDestWidth;    
; 1621 :         dwVertScale = 1024 * (dwSrcHeight/dwVertDecimation) / dwDestHeight;    
; 1622 :         
; 1623 :         
; 1624 :         //  Set the decimation factors for the surface (always standard orientation for TV out)
; 1625 :         pSurface->SetHorizontalScaling( dwHorzDecimation );
; 1626 :         pSurface->SetVerticalScaling( dwVertDecimation );
; 1627 :         
; 1628 :         //  Adjust the source width and height by the decimation factor
; 1629 :         dwSrcWidth  = dwSrcWidth / dwHorzDecimation;
; 1630 :         dwSrcHeight = dwSrcHeight / dwVertDecimation;
; 1631 : 
; 1632 : 
; 1633 :         //  Based on scaling factor, determine which coeffs to use and if to enable scaling
; 1634 :         dwScaleEnable |= (dwHorzScale == 1024) ? 0 : DISPC_VID_ATTR_VIDRESIZE_HORIZONTAL;
; 1635 :         dwScaleEnable |= (dwVertScale == 1024) ? 0 : DISPC_VID_ATTR_VIDRESIZE_VERTICAL;
; 1636 : 
; 1637 : 
; 1638 :         //  Accum0/1 controls the scaler phase for the even/odd fields
; 1639 :         //  This is affected by the field polarity - bit 17 of VENC_GEN_CTRL_VAL register -
; 1640 :         //  If active low, the ratio is VIDFIRVINC/2, otherwise it's 1024 * dwDestHeight / dwSrcHeight
; 1641 :         dwAccum1 = (1024 * dwDestHeight / dwSrcHeight) << 16; 
; 1642 :     
; 1643 : 
; 1644 :         //  Horizontal scaling
; 1645 :         if( dwHorzScale > 1024 )
; 1646 :         {
; 1647 :             //  Use down-sampling horizontal coeffs
; 1648 :             dwScaleEnable |= DISPC_VID_ATTR_VIDHRESIZE_CONF_DOWN;
; 1649 :             pHorizCoeffs = g_dwScalingCoeff_Horiz_Down;
; 1650 :         }
; 1651 :         else
; 1652 :         {
; 1653 :             //  Use up-sampling horizontal coeffs
; 1654 :             dwScaleEnable |= DISPC_VID_ATTR_VIDHRESIZE_CONF_UP;
; 1655 :             pHorizCoeffs = g_dwScalingCoeff_Horiz_Up;
; 1656 :         }
; 1657 : 
; 1658 : 
; 1659 :         //  Vertical scaling (based on flicker filter setting instead of scaling value)
; 1660 :         if( m_dwTVFilterLevel >= OMAP_TV_FILTER_LEVEL_HIGH )
; 1661 :         {
; 1662 :             //  Use 5 tap down-sampling vertical coeffs for HIGH flicker filtering
; 1663 :             dwScaleEnable |= DISPC_VID_ATTR_VIDVRESIZE_CONF_DOWN;
; 1664 :             dwScaleEnable |= DISPC_VID_ATTR_VIDVERTICALTAPS_5;
; 1665 :             dwScaleEnable |= DISPC_VID_ATTR_VIDLINEBUFFERSPLIT;
; 1666 :             pVertCoeffs = g_dwScalingCoeff_Vert_Down_5_Taps;
; 1667 :         }
; 1668 :         else if( m_dwTVFilterLevel == OMAP_TV_FILTER_LEVEL_MEDIUM )
; 1669 :         {
; 1670 :             //  Use 3 tap down-sampling vertical coeffs for MEDIUM flicker filtering
; 1671 :             dwScaleEnable |= DISPC_VID_ATTR_VIDVRESIZE_CONF_DOWN;
; 1672 :             dwScaleEnable |= DISPC_VID_ATTR_VIDVERTICALTAPS_3;
; 1673 :             pVertCoeffs = g_dwScalingCoeff_Vert_Down_3_Taps;
; 1674 :         }
; 1675 :         else if( m_dwTVFilterLevel == OMAP_TV_FILTER_LEVEL_LOW )
; 1676 :         {
; 1677 :             //  Use 3 tap up-sampling vertical coeffs for LOW flicker filtering
; 1678 :             dwScaleEnable |= DISPC_VID_ATTR_VIDVRESIZE_CONF_UP;
; 1679 :             dwScaleEnable |= DISPC_VID_ATTR_VIDVERTICALTAPS_3;
; 1680 :             pVertCoeffs = g_dwScalingCoeff_Vert_Up_3_Taps;
; 1681 :         }
; 1682 :         else if( m_dwTVFilterLevel == OMAP_TV_FILTER_LEVEL_OFF )
; 1683 :         {
; 1684 :             //  No flicker filtering but only if the destination height can be decimated to fit the TV height
; 1685 :             //  (account for the /2 of destHeight above)
; 1686 :             if( (dwSrcHeight == dwDestHeight) && (dwDestHeight <= GetTVHeight()/2) )
; 1687 :             {
; 1688 :                 DEBUGMSG(ZONE_WARNING, (L"----- Using No interlace mode for TV out --------\r\n"));
; 1689 : 
; 1690 :                 //  Can fit the surface on TV without interlacing
; 1691 :                 dwInterlace = 0;
; 1692 :                 
; 1693 :                 //  No scaling
; 1694 :                 dwScaleEnable &= ~DISPC_VID_ATTR_VIDRESIZE_VERTICAL;
; 1695 :                 dwVertScale = 1024;
; 1696 :                 
; 1697 :                 //  No FIR accumulator values
; 1698 :                 dwAccum0 = dwAccum1 = 0;
; 1699 :             }
; 1700 :             else if( (dwSrcHeight == 2*dwDestHeight) && (dwDestHeight <= GetTVHeight()) )
; 1701 :             {
; 1702 :                 DEBUGMSG(ZONE_WARNING, (L"----- Using Interlace mode for TV out --------\r\n"));
; 1703 :             
; 1704 :                 //  Need to decimate the height by 2 to fit on the TV via interlacing
; 1705 :                 dwVertDecimation = 2;
; 1706 :                 pSurface->SetVerticalScaling( dwVertDecimation );
; 1707 :         
; 1708 :                 dwSrcHeight = dwSrcHeight / dwVertDecimation;
; 1709 :             
; 1710 :                 //  No scaling
; 1711 :                 dwScaleEnable &= ~DISPC_VID_ATTR_VIDRESIZE_VERTICAL;
; 1712 :                 dwVertScale = 1024;
; 1713 : 
; 1714 :                 //  Need to use the surface stride to output via interlacing
; 1715 :                 dwInterlace = pSurface->Stride();
; 1716 : 
; 1717 :                 //  No FIR accumulator values
; 1718 :                 dwAccum0 = dwAccum1 = 0;
; 1719 :             }
; 1720 :             else
; 1721 :             {
; 1722 :                 DEBUGMSG(ZONE_WARNING, (L"----- Using Scaling mode for TV out --------\r\n"));
; 1723 : 
; 1724 :                 //  Have to scale the output to TV because it just won't fit otherwise
; 1725 :                 //  Use 3 tap up-sampling vertical coeffs for LOW flicker filtering
; 1726 :                 dwScaleEnable |= DISPC_VID_ATTR_VIDVRESIZE_CONF_UP;
; 1727 :                 dwScaleEnable |= DISPC_VID_ATTR_VIDVERTICALTAPS_3;
; 1728 :             }
; 1729 :                         
; 1730 :             //  Always need to point to some set of vertical coeffs
; 1731 :             pVertCoeffs = g_dwScalingCoeff_Vert_Down_3_Taps;
; 1732 :         }
; 1733 :         else
; 1734 :         {
; 1735 :             //  Use 3 tap down-sampling vertical coeffs for MEDIUM flicker filtering as the default setting
; 1736 :             dwScaleEnable |= DISPC_VID_ATTR_VIDVRESIZE_CONF_DOWN;
; 1737 :             dwScaleEnable |= DISPC_VID_ATTR_VIDVERTICALTAPS_3;
; 1738 :             pVertCoeffs = g_dwScalingCoeff_Vert_Down_3_Taps;
; 1739 :         }
; 1740 : #else
; 1741 :         //  Compute horizontal and vertical scaling factors
; 1742 :         dwHorzScale = 1024 * dwSrcWidth / dwDestWidth;

  03ab4	e59d2008	 ldr         r2, [sp, #8]
  03ab8	e3a03b01	 mov         r3, #1, 22
  03abc	e0010392	 mul         r1, r2, r3
  03ac0	e59d0084	 ldr         r0, [sp, #0x84]
  03ac4	eb000000	 bl          __rt_udiv
  03ac8	e58d014c	 str         r0, [sp, #0x14C]

; 1743 :         dwVertScale = 1024 * dwSrcHeight / dwDestHeight;

  03acc	e59d20f0	 ldr         r2, [sp, #0xF0]
  03ad0	e3a03b01	 mov         r3, #1, 22
  03ad4	e0010392	 mul         r1, r2, r3
  03ad8	e59d008c	 ldr         r0, [sp, #0x8C]
  03adc	eb000000	 bl          __rt_udiv
  03ae0	e58d0088	 str         r0, [sp, #0x88]

; 1744 : 
; 1745 :         //  Determine if scaling is within HW scaling capabilities
; 1746 :         //  If not, use surface scaling factor to decimate the source surface
; 1747 :         //  by 2, 4 or 8
; 1748 : //        if( dwHorzScale > 4096 )
; 1749 : //            dwHorzDecimation = 2;
; 1750 : 
; 1751 : //        if( dwHorzScale > 8192 )
; 1752 : //            dwHorzDecimation = 4;
; 1753 : 
; 1754 : 
; 1755 : //        if( dwVertScale > 2048 )
; 1756 : //            dwVertDecimation = 2;
; 1757 : 
; 1758 : //        if( dwVertScale > 4096 )
; 1759 : //            dwVertDecimation = 4;
; 1760 : 
; 1761 : //        if( dwVertScale > 8192 )
; 1762 : //            dwVertDecimation = 8;
; 1763 : 
; 1764 :         //  Adjust the source width and height by the decimation factor
; 1765 : //        dwSrcWidth  = dwSrcWidth / dwHorzDecimation;
; 1766 : //        dwSrcHeight = dwSrcHeight / dwVertDecimation;
; 1767 : 
; 1768 :         //  Adjust the HW scaling factors by the decimation factor      
; 1769 : //        dwHorzScale = 1024 * dwSrcWidth / dwDestWidth;
; 1770 : //        dwVertScale = 1024 * dwSrcHeight / dwDestHeight;
; 1771 : 
; 1772 :         if (m_dwTVFilterLevel)
; 1773 :         {
; 1774 :             // Flicker filter not supported currently (If flickerFilter is used, scaling cannot be done)
; 1775 :             // dwFlickerFilter = 1;
; 1776 :         }
; 1777 : 
; 1778 :         //  Set the decimation factors for the surface (always standard orientation for TV out)
; 1779 :         pSurface->SetHorizontalScaling( dwHorzDecimation );

  03ae4	e59d116c	 ldr         r1, [sp, #0x16C]
  03ae8	e59d30f8	 ldr         r3, [sp, #0xF8]
  03aec	e5933000	 ldr         r3, [r3]
  03af0	e2833030	 add         r3, r3, #0x30
  03af4	e59d00f8	 ldr         r0, [sp, #0xF8]
  03af8	e5933000	 ldr         r3, [r3]
  03afc	e1a0e00f	 mov         lr, pc
  03b00	e12fff13	 bx          r3

; 1780 :         pSurface->SetVerticalScaling( dwVertDecimation );

  03b04	e59d1168	 ldr         r1, [sp, #0x168]
  03b08	e59d30f8	 ldr         r3, [sp, #0xF8]
  03b0c	e5933000	 ldr         r3, [r3]
  03b10	e2833034	 add         r3, r3, #0x34
  03b14	e59d00f8	 ldr         r0, [sp, #0xF8]
  03b18	e5933000	 ldr         r3, [r3]
  03b1c	e1a0e00f	 mov         lr, pc
  03b20	e12fff13	 bx          r3

; 1781 : 
; 1782 :          //Get vertical scaler coefficients
; 1783 :         if (dwSrcWidth > 1280)

  03b24	e59d3008	 ldr         r3, [sp, #8]
  03b28	e3530c05	 cmp         r3, #5, 24
  03b2c	9a000008	 bls         |$LN35@SetScaling@2|

; 1784 :         {
; 1785 :             dwVTaps = 3;

  03b30	e3a03003	 mov         r3, #3
  03b34	e58d3074	 str         r3, [sp, #0x74]

; 1786 :         }
; 1787 :         else

  03b38	ea00000d	 b           |$LN34@SetScaling@2|
  03b3c		 |$LN169@SetScaling@2|
  03b3c		 |$LN170@SetScaling@2|
  03b3c	00000000	 DCD         |?g_rgPipelineMapping@@3PAUOMAPPipelineConfig@@A|
  03b40		 |$LN171@SetScaling@2|
  03b40	00000000	 DCD         |?g_dwScalingCoeff_Vert_Down_5_Taps@@3PAKA|
  03b44		 |$LN172@SetScaling@2|
  03b44	00000000	 DCD         |?g_dwScalingCoeff_Vert_Down_3_Taps@@3PAKA|
  03b48		 |$LN173@SetScaling@2|
  03b48	00000000	 DCD         |?g_dwScalingCoeff_Vert_Up_3_Taps@@3PAKA|
  03b4c		 |$LN174@SetScaling@2|
  03b4c	00000000	 DCD         |?g_dwScalingCoeff_Horiz_Up@@3PAKA|
  03b50		 |$LN175@SetScaling@2|
  03b50	00000000	 DCD         |?g_dwScalingCoeff_Horiz_Down@@3PAKA|
  03b54		 |$LN35@SetScaling@2|

; 1788 :         {
; 1789 :             dwVTaps = 5;

  03b54	e3a03005	 mov         r3, #5
  03b58	e58d3074	 str         r3, [sp, #0x74]

; 1790 :             dwScaleEnable |= DISPC_VID_ATTR_VIDLINEBUFFERSPLIT;

  03b5c	e59d3004	 ldr         r3, [sp, #4]
  03b60	e3833501	 orr         r3, r3, #1, 10
  03b64	e58d3004	 str         r3, [sp, #4]

; 1791 :             dwScaleEnable |= DISPC_VID_ATTR_VIDVERTICALTAPS_5;

  03b68	e59d3004	 ldr         r3, [sp, #4]
  03b6c	e3833602	 orr         r3, r3, #2, 12
  03b70	e58d3004	 str         r3, [sp, #4]
  03b74		 |$LN34@SetScaling@2|

; 1792 :         }
; 1793 : 
; 1794 :         GetFIRCoef((void*)Coefficients, dwVTaps, dwVertScale, dwFlickerFilter);

  03b74	e59d3144	 ldr         r3, [sp, #0x144]
  03b78	e59d2088	 ldr         r2, [sp, #0x88]
  03b7c	e59d1074	 ldr         r1, [sp, #0x74]
  03b80	e28d0f47	 add         r0, sp, #0x47, 30
  03b84	eb000000	 bl          |?GetFIRCoef@@YAXPAXKKK@Z|

; 1795 :         for (i = 0; i < 8; i++)

  03b88	e3a03000	 mov         r3, #0
  03b8c	e58d3078	 str         r3, [sp, #0x78]
  03b90	ea000002	 b           |$LN33@SetScaling@2|
  03b94		 |$LN32@SetScaling@2|
  03b94	e59d3078	 ldr         r3, [sp, #0x78]
  03b98	e2833001	 add         r3, r3, #1
  03b9c	e58d3078	 str         r3, [sp, #0x78]
  03ba0		 |$LN33@SetScaling@2|
  03ba0	e59d3078	 ldr         r3, [sp, #0x78]
  03ba4	e3530008	 cmp         r3, #8
  03ba8	2a00003f	 bcs         |$LN31@SetScaling@2|

; 1796 :         {
; 1797 :             dwData1 = (Coefficients[0][i]) | ((Coefficients[4][i]) << 8);

  03bac	e28d2f47	 add         r2, sp, #0x47, 30
  03bb0	e59d3078	 ldr         r3, [sp, #0x78]
  03bb4	e0823003	 add         r3, r2, r3
  03bb8	e5d33000	 ldrb        r3, [r3]
  03bbc	e1a01003	 mov         r1, r3
  03bc0	e28d3f47	 add         r3, sp, #0x47, 30
  03bc4	e2832020	 add         r2, r3, #0x20
  03bc8	e59d3078	 ldr         r3, [sp, #0x78]
  03bcc	e0823003	 add         r3, r2, r3
  03bd0	e5d33000	 ldrb        r3, [r3]
  03bd4	e1a03403	 mov         r3, r3, lsl #8
  03bd8	e1813003	 orr         r3, r1, r3
  03bdc	e58d3148	 str         r3, [sp, #0x148]

; 1798 :             dwData2 = ((Coefficients[1][i]) << 8) |((Coefficients[2][i]) << 16) | ((Coefficients[3][i]) << 24);

  03be0	e28d3f47	 add         r3, sp, #0x47, 30
  03be4	e2832008	 add         r2, r3, #8
  03be8	e59d3078	 ldr         r3, [sp, #0x78]
  03bec	e0823003	 add         r3, r2, r3
  03bf0	e5d33000	 ldrb        r3, [r3]
  03bf4	e1a01403	 mov         r1, r3, lsl #8
  03bf8	e28d3f47	 add         r3, sp, #0x47, 30
  03bfc	e2832010	 add         r2, r3, #0x10
  03c00	e59d3078	 ldr         r3, [sp, #0x78]
  03c04	e0823003	 add         r3, r2, r3
  03c08	e5d33000	 ldrb        r3, [r3]
  03c0c	e1a03803	 mov         r3, r3, lsl #16
  03c10	e1811003	 orr         r1, r1, r3
  03c14	e28d3f47	 add         r3, sp, #0x47, 30
  03c18	e2832018	 add         r2, r3, #0x18
  03c1c	e59d3078	 ldr         r3, [sp, #0x78]
  03c20	e0823003	 add         r3, r2, r3
  03c24	e5d33000	 ldrb        r3, [r3]
  03c28	e1a03c03	 mov         r3, r3, lsl #24
  03c2c	e1813003	 orr         r3, r1, r3
  03c30	e58d3070	 str         r3, [sp, #0x70]

; 1799 : 
; 1800 :             /* Make up coefficients in the format needed further down */
; 1801 :             dwVertCoeffs[i*3]   = 0;

  03c34	e59d2078	 ldr         r2, [sp, #0x78]
  03c38	e3a03003	 mov         r3, #3
  03c3c	e0010392	 mul         r1, r2, r3
  03c40	e3a03004	 mov         r3, #4
  03c44	e0020391	 mul         r2, r1, r3
  03c48	e28d3090	 add         r3, sp, #0x90
  03c4c	e0832002	 add         r2, r3, r2
  03c50	e3a03000	 mov         r3, #0
  03c54	e5823000	 str         r3, [r2]

; 1802 :             dwVertCoeffs[i*3+1] = dwData2;

  03c58	e59d2078	 ldr         r2, [sp, #0x78]
  03c5c	e3a03003	 mov         r3, #3
  03c60	e0030392	 mul         r3, r2, r3
  03c64	e2831001	 add         r1, r3, #1
  03c68	e3a03004	 mov         r3, #4
  03c6c	e0020391	 mul         r2, r1, r3
  03c70	e28d3090	 add         r3, sp, #0x90
  03c74	e0832002	 add         r2, r3, r2
  03c78	e59d3070	 ldr         r3, [sp, #0x70]
  03c7c	e5823000	 str         r3, [r2]

; 1803 :             dwVertCoeffs[i*3+2] = dwData1;

  03c80	e59d2078	 ldr         r2, [sp, #0x78]
  03c84	e3a03003	 mov         r3, #3
  03c88	e0030392	 mul         r3, r2, r3
  03c8c	e2831002	 add         r1, r3, #2
  03c90	e3a03004	 mov         r3, #4
  03c94	e0020391	 mul         r2, r1, r3
  03c98	e28d3090	 add         r3, sp, #0x90
  03c9c	e0832002	 add         r2, r3, r2
  03ca0	e59d3148	 ldr         r3, [sp, #0x148]
  03ca4	e5823000	 str         r3, [r2]

; 1804 :         }

  03ca8	eaffffb9	 b           |$LN32@SetScaling@2|
  03cac		 |$LN31@SetScaling@2|

; 1805 :         pVertCoeffs = dwVertCoeffs;

  03cac	e28d3090	 add         r3, sp, #0x90
  03cb0	e58d315c	 str         r3, [sp, #0x15C]

; 1806 : 
; 1807 :         //Now get horizontal scaler coefficients
; 1808 :         GetFIRCoef((void*)Coefficients, 5, dwHorzScale, 0);

  03cb4	e3a03000	 mov         r3, #0
  03cb8	e59d214c	 ldr         r2, [sp, #0x14C]
  03cbc	e3a01005	 mov         r1, #5
  03cc0	e28d0f47	 add         r0, sp, #0x47, 30
  03cc4	eb000000	 bl          |?GetFIRCoef@@YAXPAXKKK@Z|

; 1809 :         for (i = 0; i < 8; i++)

  03cc8	e3a03000	 mov         r3, #0
  03ccc	e58d3078	 str         r3, [sp, #0x78]
  03cd0	ea000002	 b           |$LN30@SetScaling@2|
  03cd4		 |$LN29@SetScaling@2|
  03cd4	e59d3078	 ldr         r3, [sp, #0x78]
  03cd8	e2833001	 add         r3, r3, #1
  03cdc	e58d3078	 str         r3, [sp, #0x78]
  03ce0		 |$LN30@SetScaling@2|
  03ce0	e59d3078	 ldr         r3, [sp, #0x78]
  03ce4	e3530008	 cmp         r3, #8
  03ce8	2a00003e	 bcs         |$LN28@SetScaling@2|

; 1810 :         {
; 1811 :             dwData1 = (Coefficients[0][i] | (Coefficients[1][i]) << 8) |((Coefficients[2][i]) << 16) | ((Coefficients[3][i]) << 24);

  03cec	e28d2f47	 add         r2, sp, #0x47, 30
  03cf0	e59d3078	 ldr         r3, [sp, #0x78]
  03cf4	e0823003	 add         r3, r2, r3
  03cf8	e5d33000	 ldrb        r3, [r3]
  03cfc	e1a01003	 mov         r1, r3
  03d00	e28d3f47	 add         r3, sp, #0x47, 30
  03d04	e2832008	 add         r2, r3, #8
  03d08	e59d3078	 ldr         r3, [sp, #0x78]
  03d0c	e0823003	 add         r3, r2, r3
  03d10	e5d33000	 ldrb        r3, [r3]
  03d14	e1a03403	 mov         r3, r3, lsl #8
  03d18	e1811003	 orr         r1, r1, r3
  03d1c	e28d3f47	 add         r3, sp, #0x47, 30
  03d20	e2832010	 add         r2, r3, #0x10
  03d24	e59d3078	 ldr         r3, [sp, #0x78]
  03d28	e0823003	 add         r3, r2, r3
  03d2c	e5d33000	 ldrb        r3, [r3]
  03d30	e1a03803	 mov         r3, r3, lsl #16
  03d34	e1811003	 orr         r1, r1, r3
  03d38	e28d3f47	 add         r3, sp, #0x47, 30
  03d3c	e2832018	 add         r2, r3, #0x18
  03d40	e59d3078	 ldr         r3, [sp, #0x78]
  03d44	e0823003	 add         r3, r2, r3
  03d48	e5d33000	 ldrb        r3, [r3]
  03d4c	e1a03c03	 mov         r3, r3, lsl #24
  03d50	e1813003	 orr         r3, r1, r3
  03d54	e58d3148	 str         r3, [sp, #0x148]

; 1812 :             dwData2 = (Coefficients[4][i]);

  03d58	e28d3f47	 add         r3, sp, #0x47, 30
  03d5c	e2832020	 add         r2, r3, #0x20
  03d60	e59d3078	 ldr         r3, [sp, #0x78]
  03d64	e0823003	 add         r3, r2, r3
  03d68	e5d33000	 ldrb        r3, [r3]
  03d6c	e58d3070	 str         r3, [sp, #0x70]

; 1813 : 
; 1814 :             /* Make up coefficients in the format needed further down */
; 1815 :             dwHorizCoeffs[i*3]   = dwData1;

  03d70	e59d2078	 ldr         r2, [sp, #0x78]
  03d74	e3a03003	 mov         r3, #3
  03d78	e0010392	 mul         r1, r2, r3
  03d7c	e3a03004	 mov         r3, #4
  03d80	e0020391	 mul         r2, r1, r3
  03d84	e28d300c	 add         r3, sp, #0xC
  03d88	e0832002	 add         r2, r3, r2
  03d8c	e59d3148	 ldr         r3, [sp, #0x148]
  03d90	e5823000	 str         r3, [r2]

; 1816 :             dwHorizCoeffs[i*3+1] = dwData2;

  03d94	e59d2078	 ldr         r2, [sp, #0x78]
  03d98	e3a03003	 mov         r3, #3
  03d9c	e0030392	 mul         r3, r2, r3
  03da0	e2831001	 add         r1, r3, #1
  03da4	e3a03004	 mov         r3, #4
  03da8	e0020391	 mul         r2, r1, r3
  03dac	e28d300c	 add         r3, sp, #0xC
  03db0	e0832002	 add         r2, r3, r2
  03db4	e59d3070	 ldr         r3, [sp, #0x70]
  03db8	e5823000	 str         r3, [r2]

; 1817 :             dwHorizCoeffs[i*3+2] = 0;

  03dbc	e59d2078	 ldr         r2, [sp, #0x78]
  03dc0	e3a03003	 mov         r3, #3
  03dc4	e0030392	 mul         r3, r2, r3
  03dc8	e2831002	 add         r1, r3, #2
  03dcc	e3a03004	 mov         r3, #4
  03dd0	e0020391	 mul         r2, r1, r3
  03dd4	e28d300c	 add         r3, sp, #0xC
  03dd8	e0832002	 add         r2, r3, r2
  03ddc	e3a03000	 mov         r3, #0
  03de0	e5823000	 str         r3, [r2]

; 1818 :         }

  03de4	eaffffba	 b           |$LN29@SetScaling@2|
  03de8		 |$LN28@SetScaling@2|

; 1819 :         pHorizCoeffs = dwHorizCoeffs;

  03de8	e28d300c	 add         r3, sp, #0xC
  03dec	e58d3154	 str         r3, [sp, #0x154]

; 1820 : 
; 1821 :         if (dwSrcHeight > (dwDestHeight * dwInterlaceCorrection))

  03df0	e59d108c	 ldr         r1, [sp, #0x8C]
  03df4	e59d3160	 ldr         r3, [sp, #0x160]
  03df8	e0020391	 mul         r2, r1, r3
  03dfc	e59d30f0	 ldr         r3, [sp, #0xF0]
  03e00	e1530002	 cmp         r3, r2
  03e04	9a000006	 bls         |$LN27@SetScaling@2|

; 1822 :         {
; 1823 :             //Down scale
; 1824 :             dwScaleEnable |= DISPC_VID_ATTR_VIDRESIZE_VERTICAL;

  03e08	e59d3004	 ldr         r3, [sp, #4]
  03e0c	e3833040	 orr         r3, r3, #0x40
  03e10	e58d3004	 str         r3, [sp, #4]

; 1825 :             dwScaleEnable |= DISPC_VID_ATTR_VIDVRESIZE_CONF_DOWN;

  03e14	e59d3004	 ldr         r3, [sp, #4]
  03e18	e3833c01	 orr         r3, r3, #1, 24
  03e1c	e58d3004	 str         r3, [sp, #4]
  03e20	ea000008	 b           |$LN26@SetScaling@2|
  03e24		 |$LN27@SetScaling@2|

; 1826 :         }
; 1827 :         else if (dwSrcHeight < (dwDestHeight * dwInterlaceCorrection))

  03e24	e59d108c	 ldr         r1, [sp, #0x8C]
  03e28	e59d3160	 ldr         r3, [sp, #0x160]
  03e2c	e0020391	 mul         r2, r1, r3
  03e30	e59d30f0	 ldr         r3, [sp, #0xF0]
  03e34	e1530002	 cmp         r3, r2
  03e38	2a000002	 bcs         |$LN25@SetScaling@2|

; 1828 :         {
; 1829 :             //Up scale
; 1830 :             dwScaleEnable |= DISPC_VID_ATTR_VIDRESIZE_VERTICAL;

  03e3c	e59d3004	 ldr         r3, [sp, #4]
  03e40	e3833040	 orr         r3, r3, #0x40
  03e44	e58d3004	 str         r3, [sp, #4]
  03e48		 |$LN25@SetScaling@2|
  03e48		 |$LN26@SetScaling@2|

; 1831 :         }
; 1832 :         else
; 1833 :         {
; 1834 :             //No scale
; 1835 :         }
; 1836 : 
; 1837 :         if (dwSrcWidth > dwDestWidth)

  03e48	e59d2008	 ldr         r2, [sp, #8]
  03e4c	e59d3084	 ldr         r3, [sp, #0x84]
  03e50	e1520003	 cmp         r2, r3
  03e54	9a000006	 bls         |$LN23@SetScaling@2|

; 1838 :         {
; 1839 :             //Down scale
; 1840 :             dwScaleEnable |= DISPC_VID_ATTR_VIDRESIZE_HORIZONTAL;

  03e58	e59d3004	 ldr         r3, [sp, #4]
  03e5c	e3833020	 orr         r3, r3, #0x20
  03e60	e58d3004	 str         r3, [sp, #4]

; 1841 :             dwScaleEnable |= DISPC_VID_ATTR_VIDHRESIZE_CONF_DOWN;

  03e64	e59d3004	 ldr         r3, [sp, #4]
  03e68	e3833080	 orr         r3, r3, #0x80
  03e6c	e58d3004	 str         r3, [sp, #4]
  03e70	ea000006	 b           |$LN22@SetScaling@2|
  03e74		 |$LN23@SetScaling@2|

; 1842 :         }
; 1843 :         else if (dwSrcWidth < dwDestWidth)

  03e74	e59d2008	 ldr         r2, [sp, #8]
  03e78	e59d3084	 ldr         r3, [sp, #0x84]
  03e7c	e1520003	 cmp         r2, r3
  03e80	2a000002	 bcs         |$LN21@SetScaling@2|

; 1844 :         {
; 1845 :             //Up scale
; 1846 :             dwScaleEnable |= DISPC_VID_ATTR_VIDRESIZE_HORIZONTAL;

  03e84	e59d3004	 ldr         r3, [sp, #4]
  03e88	e3833020	 orr         r3, r3, #0x20
  03e8c	e58d3004	 str         r3, [sp, #4]
  03e90		 |$LN21@SetScaling@2|
  03e90		 |$LN22@SetScaling@2|

; 1847 :         }
; 1848 :         else
; 1849 :         {
; 1850 :             //No scale
; 1851 :         }
; 1852 : 
; 1853 :         //  Accum0/1 controls the scaler phase for the even/odd fields
; 1854 :         if (m_dwTVFilterLevel == OMAP_TV_FILTER_LEVEL_OFF)

  03e90	e59d32f0	 ldr         r3, [sp, #0x2F0]
  03e94	e2833b01	 add         r3, r3, #1, 22
  03e98	e28330b8	 add         r3, r3, #0xB8
  03e9c	e5933000	 ldr         r3, [r3]
  03ea0	e3530000	 cmp         r3, #0
  03ea4	1a00000a	 bne         |$LN19@SetScaling@2|

; 1855 :         {
; 1856 :             dwAccum0 = (((dwVertScale/dwInterlaceCorrection) % 1024) << 16);

  03ea8	e59d1088	 ldr         r1, [sp, #0x88]
  03eac	e59d0160	 ldr         r0, [sp, #0x160]
  03eb0	eb000000	 bl          __rt_udiv
  03eb4	e1a01000	 mov         r1, r0
  03eb8	e3a00b01	 mov         r0, #1, 22
  03ebc	eb000000	 bl          __rt_udiv
  03ec0	e1a03801	 mov         r3, r1, lsl #16
  03ec4	e58d3114	 str         r3, [sp, #0x114]

; 1857 :             dwAccum1 = 0;

  03ec8	e3a03000	 mov         r3, #0
  03ecc	e58d3170	 str         r3, [sp, #0x170]

; 1858 :         }
; 1859 :         else

  03ed0	ea000007	 b           |$LN18@SetScaling@2|
  03ed4		 |$LN19@SetScaling@2|

; 1860 :         {
; 1861 :             /* This case is not supported/tested */
; 1862 :             dwHorzScale = 1024;

  03ed4	e3a03b01	 mov         r3, #1, 22
  03ed8	e58d314c	 str         r3, [sp, #0x14C]

; 1863 :             dwVertScale = 1024;

  03edc	e3a03b01	 mov         r3, #1, 22
  03ee0	e58d3088	 str         r3, [sp, #0x88]

; 1864 :             dwAccum0 = 0;

  03ee4	e3a03000	 mov         r3, #0
  03ee8	e58d3114	 str         r3, [sp, #0x114]

; 1865 :             dwAccum1 = 0;

  03eec	e3a03000	 mov         r3, #0
  03ef0	e58d3170	 str         r3, [sp, #0x170]
  03ef4		 |$LN18@SetScaling@2|

; 1866 :         }
; 1867 : 
; 1868 :         //  Need to use the surface stride to output via interlacing
; 1869 :         dwInterlace = pSurface->Stride();

  03ef4	e3a01000	 mov         r1, #0
  03ef8	e59d30f8	 ldr         r3, [sp, #0xF8]
  03efc	e5933000	 ldr         r3, [r3]
  03f00	e2833010	 add         r3, r3, #0x10
  03f04	e59d00f8	 ldr         r0, [sp, #0xF8]
  03f08	e5933000	 ldr         r3, [r3]
  03f0c	e1a0e00f	 mov         lr, pc
  03f10	e12fff13	 bx          r3
  03f14	e58d023c	 str         r0, [sp, #0x23C]
  03f18	e59d323c	 ldr         r3, [sp, #0x23C]
  03f1c	e58d307c	 str         r3, [sp, #0x7C]

; 1870 : 
; 1871 :         // Account for interlacing for Y offset (this is the line offset in each field).
; 1872 :         dwY /= dwInterlaceCorrection; 

  03f20	e59d1118	 ldr         r1, [sp, #0x118]
  03f24	e59d0160	 ldr         r0, [sp, #0x160]
  03f28	eb000000	 bl          __rt_udiv
  03f2c	e58d0118	 str         r0, [sp, #0x118]

; 1873 : #endif
; 1874 :     }
; 1875 :     else

  03f30	ea00000e	 b           |$LN17@SetScaling@2|
  03f34		 |$LN37@SetScaling@2|

; 1876 :     {
; 1877 :         ASSERT(0);

  03f34	ea000002	 b           |$LN118@SetScaling@2|
  03f38	e3a03001	 mov         r3, #1
  03f3c	e58d3240	 str         r3, [sp, #0x240]
  03f40	ea000008	 b           |$LN119@SetScaling@2|
  03f44		 |$LN118@SetScaling@2|
  03f44	e3a03c07	 mov         r3, #7, 24
  03f48	e3833055	 orr         r3, r3, #0x55
  03f4c	e59f2d38	 ldr         r2, [pc, #0xD38]
  03f50	e59f1d30	 ldr         r1, [pc, #0xD30]
  03f54	e59f0d28	 ldr         r0, [pc, #0xD28]
  03f58	eb000000	 bl          NKDbgPrintfW
  03f5c	e6000010	 __debugbreak_ce
  03f60	e3a03000	 mov         r3, #0
  03f64	e58d3240	 str         r3, [sp, #0x240]
  03f68		 |$LN119@SetScaling@2|

; 1878 :         goto cleanUp;

  03f68	ea00032d	 b           |$LN16@SetScaling@2|
  03f6c	ea00032c	 b           |$cleanUp$38274|
  03f70		 |$LN17@SetScaling@2|
  03f70		 |$LN38@SetScaling@2|

; 1879 :     }
; 1880 : 
; 1881 :     DEBUGMSG(ZONE_WARNING, (L"INFO: OMAPDisplayController::SetScalingAttribs: "));

  03f70	e59f0d08	 ldr         r0, [pc, #0xD08]
  03f74	eb000000	 bl          NKDbgPrintfW
  03f78	e3a03001	 mov         r3, #1
  03f7c	e58d3244	 str         r3, [sp, #0x244]
  03f80	ea000001	 b           |$LN121@SetScaling@2|
  03f84	e3a03000	 mov         r3, #0
  03f88	e58d3244	 str         r3, [sp, #0x244]
  03f8c		 |$LN121@SetScaling@2|

; 1882 :     DEBUGMSG(ZONE_WARNING, (L"  Src  RECT (%d,%d) (%d,%d)\r\n", privSrcRect.left, privSrcRect.top, privSrcRect.right, privSrcRect.bottom));

  03f8c	e59d3110	 ldr         r3, [sp, #0x110]
  03f90	e58d3000	 str         r3, [sp]
  03f94	e59d310c	 ldr         r3, [sp, #0x10C]
  03f98	e59d2108	 ldr         r2, [sp, #0x108]
  03f9c	e59d1104	 ldr         r1, [sp, #0x104]
  03fa0	e59f0cd4	 ldr         r0, [pc, #0xCD4]
  03fa4	eb000000	 bl          NKDbgPrintfW
  03fa8	e3a03001	 mov         r3, #1
  03fac	e58d3248	 str         r3, [sp, #0x248]
  03fb0	ea000001	 b           |$LN123@SetScaling@2|
  03fb4	e3a03000	 mov         r3, #0
  03fb8	e58d3248	 str         r3, [sp, #0x248]
  03fbc		 |$LN123@SetScaling@2|

; 1883 :     DEBUGMSG(ZONE_WARNING, (L"  Dest RECT (%d,%d) (%d,%d)\r\n", pDestRect->left, pDestRect->top, pDestRect->right, pDestRect->bottom));

  03fbc	e59d32fc	 ldr         r3, [sp, #0x2FC]
  03fc0	e283300c	 add         r3, r3, #0xC
  03fc4	e5933000	 ldr         r3, [r3]
  03fc8	e58d3000	 str         r3, [sp]
  03fcc	e59d32fc	 ldr         r3, [sp, #0x2FC]
  03fd0	e2833008	 add         r3, r3, #8
  03fd4	e5933000	 ldr         r3, [r3]
  03fd8	e59d22fc	 ldr         r2, [sp, #0x2FC]
  03fdc	e2822004	 add         r2, r2, #4
  03fe0	e5922000	 ldr         r2, [r2]
  03fe4	e59d12fc	 ldr         r1, [sp, #0x2FC]
  03fe8	e5911000	 ldr         r1, [r1]
  03fec	e59f0c84	 ldr         r0, [pc, #0xC84]
  03ff0	eb000000	 bl          NKDbgPrintfW
  03ff4	e3a03001	 mov         r3, #1
  03ff8	e58d324c	 str         r3, [sp, #0x24C]
  03ffc	ea000001	 b           |$LN125@SetScaling@2|
  04000	e3a03000	 mov         r3, #0
  04004	e58d324c	 str         r3, [sp, #0x24C]
  04008		 |$LN125@SetScaling@2|

; 1884 :     DEBUGMSG(ZONE_WARNING, (L"  Computed Origin (%d,%d) for rotation angle %d\r\n", dwX, dwY, g_rgPipelineMapping[ePipeline].eRotation));

  04008	e59d12f4	 ldr         r1, [sp, #0x2F4]
  0400c	e3a03020	 mov         r3, #0x20
  04010	e0020391	 mul         r2, r1, r3
  04014	e59f3c34	 ldr         r3, [pc, #0xC34]
  04018	e0833002	 add         r3, r3, r2
  0401c	e283300c	 add         r3, r3, #0xC
  04020	e5933000	 ldr         r3, [r3]
  04024	e59d2118	 ldr         r2, [sp, #0x118]
  04028	e59d1080	 ldr         r1, [sp, #0x80]
  0402c	e59f0c40	 ldr         r0, [pc, #0xC40]
  04030	eb000000	 bl          NKDbgPrintfW
  04034	e3a03001	 mov         r3, #1
  04038	e58d3250	 str         r3, [sp, #0x250]
  0403c	ea000001	 b           |$LN127@SetScaling@2|
  04040	e3a03000	 mov         r3, #0
  04044	e58d3250	 str         r3, [sp, #0x250]
  04048		 |$LN127@SetScaling@2|

; 1885 :     DEBUGMSG(ZONE_WARNING, (L"  dwScaleEnable = 0x%08X  dwHorzScale = %d  dwVertScale = %d\r\n", dwScaleEnable, dwHorzScale, dwVertScale));

  04048	e59d3088	 ldr         r3, [sp, #0x88]
  0404c	e59d214c	 ldr         r2, [sp, #0x14C]
  04050	e59d1004	 ldr         r1, [sp, #4]
  04054	e59f0c14	 ldr         r0, [pc, #0xC14]
  04058	eb000000	 bl          NKDbgPrintfW
  0405c	e3a03001	 mov         r3, #1
  04060	e58d3254	 str         r3, [sp, #0x254]
  04064	ea000001	 b           |$LN129@SetScaling@2|
  04068	e3a03000	 mov         r3, #0
  0406c	e58d3254	 str         r3, [sp, #0x254]
  04070		 |$LN129@SetScaling@2|

; 1886 :     DEBUGMSG(ZONE_WARNING, (L"  dwSrcWidth  = %d  dwSrcHeight  = %d\r\n", dwSrcWidth, dwSrcHeight));

  04070	e59d20f0	 ldr         r2, [sp, #0xF0]
  04074	e59d1008	 ldr         r1, [sp, #8]
  04078	e59f0bec	 ldr         r0, [pc, #0xBEC]
  0407c	eb000000	 bl          NKDbgPrintfW
  04080	e3a03001	 mov         r3, #1
  04084	e58d3258	 str         r3, [sp, #0x258]
  04088	ea000001	 b           |$LN131@SetScaling@2|
  0408c	e3a03000	 mov         r3, #0
  04090	e58d3258	 str         r3, [sp, #0x258]
  04094		 |$LN131@SetScaling@2|

; 1887 :     DEBUGMSG(ZONE_WARNING, (L"  dwDestWidth = %d  dwDestHeight = %d\r\n", dwDestWidth, dwDestHeight));

  04094	e59d208c	 ldr         r2, [sp, #0x8C]
  04098	e59d1084	 ldr         r1, [sp, #0x84]
  0409c	e59f0bc4	 ldr         r0, [pc, #0xBC4]
  040a0	eb000000	 bl          NKDbgPrintfW
  040a4	e3a03001	 mov         r3, #1
  040a8	e58d325c	 str         r3, [sp, #0x25C]
  040ac	ea000001	 b           |$LN133@SetScaling@2|
  040b0	e3a03000	 mov         r3, #0
  040b4	e58d325c	 str         r3, [sp, #0x25C]
  040b8		 |$LN133@SetScaling@2|

; 1888 :     DEBUGMSG(ZONE_WARNING, (L"  dwHorzDecimation = %d  dwVertDecimation = %d\r\n", dwHorzDecimation, dwVertDecimation));

  040b8	e59d2168	 ldr         r2, [sp, #0x168]
  040bc	e59d116c	 ldr         r1, [sp, #0x16C]
  040c0	e59f0b9c	 ldr         r0, [pc, #0xB9C]
  040c4	eb000000	 bl          NKDbgPrintfW
  040c8	e3a03001	 mov         r3, #1
  040cc	e58d3260	 str         r3, [sp, #0x260]
  040d0	ea000001	 b           |$LN135@SetScaling@2|
  040d4	e3a03000	 mov         r3, #0
  040d8	e58d3260	 str         r3, [sp, #0x260]
  040dc		 |$LN135@SetScaling@2|

; 1889 :     DEBUGMSG(ZONE_WARNING, (L"  ePipeline = %d\r\n", ePipeline));

  040dc	e59d12f4	 ldr         r1, [sp, #0x2F4]
  040e0	e59f0b78	 ldr         r0, [pc, #0xB78]
  040e4	eb000000	 bl          NKDbgPrintfW
  040e8	e3a03001	 mov         r3, #1
  040ec	e58d3264	 str         r3, [sp, #0x264]
  040f0	ea000001	 b           |$LN137@SetScaling@2|
  040f4	e3a03000	 mov         r3, #0
  040f8	e58d3264	 str         r3, [sp, #0x264]
  040fc		 |$LN137@SetScaling@2|

; 1890 :     DEBUGMSG(ZONE_WARNING, (L"  pSurface = 0x%x Stride = %d Row_Inc = %d\r\n", pSurface,pSurface->Stride(eRotation),pSurface->RowIncr(eRotation, bMirror)));

  040fc	e59d20fc	 ldr         r2, [sp, #0xFC]
  04100	e59d106c	 ldr         r1, [sp, #0x6C]
  04104	e59d30f8	 ldr         r3, [sp, #0xF8]
  04108	e5933000	 ldr         r3, [r3]
  0410c	e283301c	 add         r3, r3, #0x1C
  04110	e59d00f8	 ldr         r0, [sp, #0xF8]
  04114	e5933000	 ldr         r3, [r3]
  04118	e1a0e00f	 mov         lr, pc
  0411c	e12fff13	 bx          r3
  04120	e58d0268	 str         r0, [sp, #0x268]
  04124	e59d106c	 ldr         r1, [sp, #0x6C]
  04128	e59d30f8	 ldr         r3, [sp, #0xF8]
  0412c	e5933000	 ldr         r3, [r3]
  04130	e2833010	 add         r3, r3, #0x10
  04134	e59d00f8	 ldr         r0, [sp, #0xF8]
  04138	e5933000	 ldr         r3, [r3]
  0413c	e1a0e00f	 mov         lr, pc
  04140	e12fff13	 bx          r3
  04144	e58d026c	 str         r0, [sp, #0x26C]
  04148	e59d3268	 ldr         r3, [sp, #0x268]
  0414c	e59d226c	 ldr         r2, [sp, #0x26C]
  04150	e59d10f8	 ldr         r1, [sp, #0xF8]
  04154	e59f0b00	 ldr         r0, [pc, #0xB00]
  04158	eb000000	 bl          NKDbgPrintfW
  0415c	e3a03001	 mov         r3, #1
  04160	e58d3270	 str         r3, [sp, #0x270]
  04164	ea000001	 b           |$LN139@SetScaling@2|
  04168	e3a03000	 mov         r3, #0
  0416c	e58d3270	 str         r3, [sp, #0x270]
  04170		 |$LN139@SetScaling@2|

; 1891 :    
; 1892 : 
; 1893 :     //  GFX pipeline
; 1894 :     if( ePipeline == OMAP_DSS_PIPELINE_GFX )
; 1895 :     {
; 1896 :         //  Scaling is not supported on the GFX plane
; 1897 :     }
; 1898 : 
; 1899 : 
; 1900 :     //  VIDEO1 pipeline
; 1901 :     if( ePipeline == OMAP_DSS_PIPELINE_VIDEO1 )

  04170	e59d32f4	 ldr         r3, [sp, #0x2F4]
  04174	e3530001	 cmp         r3, #1
  04178	1a00013a	 bne         |$LN14@SetScaling@2|

; 1902 :     {   
; 1903 :         DEBUGMSG(ZONE_WARNING, (L"\t Resizer Enabled %d \r\n",bUseResizer));

  0417c	e59d10f4	 ldr         r1, [sp, #0xF4]
  04180	e59f0ad0	 ldr         r0, [pc, #0xAD0]
  04184	eb000000	 bl          NKDbgPrintfW
  04188	e3a03001	 mov         r3, #1
  0418c	e58d3274	 str         r3, [sp, #0x274]
  04190	ea000001	 b           |$LN141@SetScaling@2|
  04194	e3a03000	 mov         r3, #0
  04198	e58d3274	 str         r3, [sp, #0x274]
  0419c		 |$LN141@SetScaling@2|

; 1904 : 
; 1905 :         if (pSurface->isResizerEnabled())

  0419c	e59d00f8	 ldr         r0, [sp, #0xF8]
  041a0	eb000000	 bl          |?isResizerEnabled@OMAPSurface@@QAAHXZ|
  041a4	e58d0278	 str         r0, [sp, #0x278]
  041a8	e59d3278	 ldr         r3, [sp, #0x278]
  041ac	e3530000	 cmp         r3, #0
  041b0	0a000050	 beq         |$LN13@SetScaling@2|

; 1906 :         {   
; 1907 :             DWORD rszStatus = FALSE;

  041b4	e3a03000	 mov         r3, #0
  041b8	e58d31a4	 str         r3, [sp, #0x1A4]

; 1908 :             /* set Resizer */
; 1909 :             rszStatus = pSurface->ConfigResizerParams(pSrcRect, pDestRect,eRotation);

  041bc	e59d306c	 ldr         r3, [sp, #0x6C]
  041c0	e59d22fc	 ldr         r2, [sp, #0x2FC]
  041c4	e59d12f8	 ldr         r1, [sp, #0x2F8]
  041c8	e59d00f8	 ldr         r0, [sp, #0xF8]
  041cc	eb000000	 bl          |?ConfigResizerParams@OMAPSurface@@QAAHPAUtagRECT@@0W4OMAP_DSS_ROTATION@@@Z|
  041d0	e58d027c	 str         r0, [sp, #0x27C]
  041d4	e59d327c	 ldr         r3, [sp, #0x27C]
  041d8	e58d31a4	 str         r3, [sp, #0x1A4]

; 1910 :             /* Start resizer */
; 1911 :             if (rszStatus)

  041dc	e59d31a4	 ldr         r3, [sp, #0x1A4]
  041e0	e3530000	 cmp         r3, #0
  041e4	0a000021	 beq         |$LN12@SetScaling@2|

; 1912 :                 rszStatus = pSurface->StartResizer(pSurface->PhysicalAddr(OMAP_DSS_ROTATION_0, bMirror,OMAP_ASSOC_SURF_FORCE_OFF), //input
; 1913 :                                                    pSurface->OmapAssocSurface()->PhysicalAddr(OMAP_DSS_ROTATION_0, bMirror,OMAP_ASSOC_SURF_FORCE_OFF));               

  041e8	e59d00f8	 ldr         r0, [sp, #0xF8]
  041ec	eb000000	 bl          |?OmapAssocSurface@OMAPSurface@@QAAPAV1@XZ|
  041f0	e58d0280	 str         r0, [sp, #0x280]
  041f4	e59d3280	 ldr         r3, [sp, #0x280]
  041f8	e58d3284	 str         r3, [sp, #0x284]
  041fc	e3a03001	 mov         r3, #1
  04200	e59d20fc	 ldr         r2, [sp, #0xFC]
  04204	e3a01000	 mov         r1, #0
  04208	e59d0284	 ldr         r0, [sp, #0x284]
  0420c	e59de284	 ldr         lr, [sp, #0x284]
  04210	e59ee000	 ldr         lr, [lr]
  04214	e28ee014	 add         lr, lr, #0x14
  04218	e59e4000	 ldr         r4, [lr]
  0421c	e1a0e00f	 mov         lr, pc
  04220	e12fff14	 bx          r4
  04224	e58d0288	 str         r0, [sp, #0x288]
  04228	e3a03001	 mov         r3, #1
  0422c	e59d20fc	 ldr         r2, [sp, #0xFC]
  04230	e3a01000	 mov         r1, #0
  04234	e59d00f8	 ldr         r0, [sp, #0xF8]
  04238	e5900000	 ldr         r0, [r0]
  0423c	e280e014	 add         lr, r0, #0x14
  04240	e59d00f8	 ldr         r0, [sp, #0xF8]
  04244	e59e4000	 ldr         r4, [lr]
  04248	e1a0e00f	 mov         lr, pc
  0424c	e12fff14	 bx          r4
  04250	e58d028c	 str         r0, [sp, #0x28C]
  04254	e59d2288	 ldr         r2, [sp, #0x288]
  04258	e59d128c	 ldr         r1, [sp, #0x28C]
  0425c	e59d00f8	 ldr         r0, [sp, #0xF8]
  04260	eb000000	 bl          |?StartResizer@OMAPSurface@@QAAHKK@Z|
  04264	e58d0290	 str         r0, [sp, #0x290]
  04268	e59d3290	 ldr         r3, [sp, #0x290]
  0426c	e58d31a4	 str         r3, [sp, #0x1A4]
  04270		 |$LN12@SetScaling@2|

; 1914 :             if (!(rszStatus))

  04270	e59d31a4	 ldr         r3, [sp, #0x1A4]
  04274	e3530000	 cmp         r3, #0
  04278	1a00001e	 bne         |$LN11@SetScaling@2|

; 1915 :             {
; 1916 :                 RETAILMSG(TRUE,(L"SetScalingAttribs: Cannot configure/start ISP resizer; Cropping the image\r\n"));

  0427c	e59f09d0	 ldr         r0, [pc, #0x9D0]
  04280	eb000000	 bl          NKDbgPrintfW
  04284	e3a03001	 mov         r3, #1
  04288	e58d3294	 str         r3, [sp, #0x294]
  0428c	ea000001	 b           |$LN143@SetScaling@2|
  04290	e3a03000	 mov         r3, #0
  04294	e58d3294	 str         r3, [sp, #0x294]
  04298		 |$LN143@SetScaling@2|

; 1917 :                 bUseResizer = FALSE;

  04298	e3a03000	 mov         r3, #0
  0429c	e58d30f4	 str         r3, [sp, #0xF4]

; 1918 :                 pSurface->UseResizer(FALSE);

  042a0	e3a01000	 mov         r1, #0
  042a4	e59d00f8	 ldr         r0, [sp, #0xF8]
  042a8	eb000000	 bl          |?UseResizer@OMAPSurface@@QAAHH@Z|

; 1919 :                 pSurface->SetRSZHandle(NULL, TRUE);

  042ac	e3a02001	 mov         r2, #1
  042b0	e3a01000	 mov         r1, #0
  042b4	e59d00f8	 ldr         r0, [sp, #0xF8]
  042b8	eb000000	 bl          |?SetRSZHandle@OMAPSurface@@QAAXPAXH@Z|

; 1920 :                 memset(pSurface->ResizeParams(),0,sizeof(RSZParams_t));  

  042bc	e59d00f8	 ldr         r0, [sp, #0xF8]
  042c0	eb000000	 bl          |?ResizeParams@OMAPSurface@@QAAPAURSZParams_t@@XZ|
  042c4	e58d0298	 str         r0, [sp, #0x298]
  042c8	e3a02064	 mov         r2, #0x64
  042cc	e3a01000	 mov         r1, #0
  042d0	e59d0298	 ldr         r0, [sp, #0x298]
  042d4	eb000000	 bl          memset

; 1921 :                 pSurface->SetClipping( &privSrcRect);

  042d8	e28d1f41	 add         r1, sp, #0x41, 30
  042dc	e59d30f8	 ldr         r3, [sp, #0xF8]
  042e0	e5933000	 ldr         r3, [r3]
  042e4	e2833020	 add         r3, r3, #0x20
  042e8	e59d00f8	 ldr         r0, [sp, #0xF8]
  042ec	e5933000	 ldr         r3, [r3]
  042f0	e1a0e00f	 mov         lr, pc
  042f4	e12fff13	 bx          r3
  042f8		 |$LN11@SetScaling@2|
  042f8		 |$LN13@SetScaling@2|

; 1922 :             }            
; 1923 :         }
; 1924 :         
; 1925 :         //  Get the current attribute settings
; 1926 :         dwCurrAttribs = INREG32( &m_pDispRegs->tDISPC_VID1.ATTRIBUTES );

  042f8	e59d32f0	 ldr         r3, [sp, #0x2F0]
  042fc	e2833008	 add         r3, r3, #8
  04300	e5933000	 ldr         r3, [r3]
  04304	e28330cc	 add         r3, r3, #0xCC
  04308	e5933000	 ldr         r3, [r3]
  0430c	e58d3158	 str         r3, [sp, #0x158]

; 1927 : 
; 1928 :         //  Mask off the scaling bits
; 1929 :         dwCurrAttribs &= ~(DISPC_VID_ATTR_VIDRESIZE_MASK|DISPC_VID_ATTR_VIDLINEBUFFERSPLIT|DISPC_VID_ATTR_VIDVERTICALTAPS_5);

  04310	e59d2158	 ldr         r2, [sp, #0x158]
  04314	e3e03606	 mvn         r3, #6, 12
  04318	e2233e1e	 eor         r3, r3, #0x1E, 28
  0431c	e0023003	 and         r3, r2, r3
  04320	e58d3158	 str         r3, [sp, #0x158]

; 1930 :         
; 1931 :         //  Enable video resizing by or'ing with scale enable attribs
; 1932 :         OUTREG32( &m_pDispRegs->tDISPC_VID1.ATTRIBUTES,
; 1933 :                     dwCurrAttribs | dwScaleEnable
; 1934 :                     );

  04324	e59d2158	 ldr         r2, [sp, #0x158]
  04328	e59d3004	 ldr         r3, [sp, #4]
  0432c	e1822003	 orr         r2, r2, r3
  04330	e59d32f0	 ldr         r3, [sp, #0x2F0]
  04334	e2833008	 add         r3, r3, #8
  04338	e5933000	 ldr         r3, [r3]
  0433c	e28330cc	 add         r3, r3, #0xCC
  04340	e5832000	 str         r2, [r3]

; 1935 : 
; 1936 :         
; 1937 :         //  Size of resized output window and original picture size
; 1938 :         OUTREG32( &m_pDispRegs->tDISPC_VID1.SIZE,
; 1939 :                     DISPC_VID_SIZE_VIDSIZEX(dwDestWidth) |
; 1940 :                     DISPC_VID_SIZE_VIDSIZEY(dwDestHeight)
; 1941 :                     );

  04344	e59d3084	 ldr         r3, [sp, #0x84]
  04348	e2432001	 sub         r2, r3, #1
  0434c	e59d308c	 ldr         r3, [sp, #0x8C]
  04350	e2433001	 sub         r3, r3, #1
  04354	e1a03803	 mov         r3, r3, lsl #16
  04358	e1822003	 orr         r2, r2, r3
  0435c	e59d32f0	 ldr         r3, [sp, #0x2F0]
  04360	e2833008	 add         r3, r3, #8
  04364	e5933000	 ldr         r3, [r3]
  04368	e28330c8	 add         r3, r3, #0xC8
  0436c	e5832000	 str         r2, [r3]

; 1942 : 
; 1943 :         OUTREG32( &m_pDispRegs->tDISPC_VID1.PICTURE_SIZE,
; 1944 :                     DISPC_VID_PICTURE_SIZE_VIDORGSIZEX(dwSrcWidth) |
; 1945 :                     DISPC_VID_PICTURE_SIZE_VIDORGSIZEY(dwSrcHeight)
; 1946 :                     );

  04370	e59d3008	 ldr         r3, [sp, #8]
  04374	e2432001	 sub         r2, r3, #1
  04378	e59d30f0	 ldr         r3, [sp, #0xF0]
  0437c	e2433001	 sub         r3, r3, #1
  04380	e1a03803	 mov         r3, r3, lsl #16
  04384	e1822003	 orr         r2, r2, r3
  04388	e59d32f0	 ldr         r3, [sp, #0x2F0]
  0438c	e2833008	 add         r3, r3, #8
  04390	e5933000	 ldr         r3, [r3]
  04394	e28330e4	 add         r3, r3, #0xE4
  04398	e5832000	 str         r2, [r3]

; 1947 :         
; 1948 :         //  Position of window
; 1949 :         OUTREG32( &m_pDispRegs->tDISPC_VID1.POSITION,
; 1950 :                     DISPC_VID_POS_VIDPOSX(dwX) |
; 1951 :                     DISPC_VID_POS_VIDPOSY(dwY)
; 1952 :                     );

  0439c	e59d3118	 ldr         r3, [sp, #0x118]
  043a0	e1a02803	 mov         r2, r3, lsl #16
  043a4	e59d3080	 ldr         r3, [sp, #0x80]
  043a8	e1832002	 orr         r2, r3, r2
  043ac	e59d32f0	 ldr         r3, [sp, #0x2F0]
  043b0	e2833008	 add         r3, r3, #8
  043b4	e5933000	 ldr         r3, [r3]
  043b8	e28330c4	 add         r3, r3, #0xC4
  043bc	e5832000	 str         r2, [r3]

; 1953 : 
; 1954 :         //  DMA properties
; 1955 :         OUTREG32( &m_pDispRegs->tDISPC_VID1.PIXEL_INC, pSurface->PixelIncr(eRotation, bMirror) );

  043c0	e59d20fc	 ldr         r2, [sp, #0xFC]
  043c4	e59d106c	 ldr         r1, [sp, #0x6C]
  043c8	e59d30f8	 ldr         r3, [sp, #0xF8]
  043cc	e5933000	 ldr         r3, [r3]
  043d0	e2833018	 add         r3, r3, #0x18
  043d4	e59d00f8	 ldr         r0, [sp, #0xF8]
  043d8	e5933000	 ldr         r3, [r3]
  043dc	e1a0e00f	 mov         lr, pc
  043e0	e12fff13	 bx          r3
  043e4	e58d029c	 str         r0, [sp, #0x29C]
  043e8	e59d32f0	 ldr         r3, [sp, #0x2F0]
  043ec	e2833008	 add         r3, r3, #8
  043f0	e5933000	 ldr         r3, [r3]
  043f4	e28320dc	 add         r2, r3, #0xDC
  043f8	e59d329c	 ldr         r3, [sp, #0x29C]
  043fc	e5823000	 str         r3, [r2]

; 1956 :         OUTREG32( &m_pDispRegs->tDISPC_VID1.ROW_INC, (pSurface->RowIncr(eRotation, bMirror)) );

  04400	e59d20fc	 ldr         r2, [sp, #0xFC]
  04404	e59d106c	 ldr         r1, [sp, #0x6C]
  04408	e59d30f8	 ldr         r3, [sp, #0xF8]
  0440c	e5933000	 ldr         r3, [r3]
  04410	e283301c	 add         r3, r3, #0x1C
  04414	e59d00f8	 ldr         r0, [sp, #0xF8]
  04418	e5933000	 ldr         r3, [r3]
  0441c	e1a0e00f	 mov         lr, pc
  04420	e12fff13	 bx          r3
  04424	e58d02a0	 str         r0, [sp, #0x2A0]
  04428	e59d32f0	 ldr         r3, [sp, #0x2F0]
  0442c	e2833008	 add         r3, r3, #8
  04430	e5933000	 ldr         r3, [r3]
  04434	e28320d8	 add         r2, r3, #0xD8
  04438	e59d32a0	 ldr         r3, [sp, #0x2A0]
  0443c	e5823000	 str         r3, [r2]

; 1957 : 
; 1958 :         OUTREG32( &m_pDispRegs->tDISPC_VID1.BA0, pSurface->PhysicalAddr(eRotation, bMirror) + dwInterlace );

  04440	e3a03000	 mov         r3, #0
  04444	e59d20fc	 ldr         r2, [sp, #0xFC]
  04448	e59d106c	 ldr         r1, [sp, #0x6C]
  0444c	e59d00f8	 ldr         r0, [sp, #0xF8]
  04450	e5900000	 ldr         r0, [r0]
  04454	e280e014	 add         lr, r0, #0x14
  04458	e59d00f8	 ldr         r0, [sp, #0xF8]
  0445c	e59e4000	 ldr         r4, [lr]
  04460	e1a0e00f	 mov         lr, pc
  04464	e12fff14	 bx          r4
  04468	e58d02a4	 str         r0, [sp, #0x2A4]
  0446c	e59d22a4	 ldr         r2, [sp, #0x2A4]
  04470	e59d307c	 ldr         r3, [sp, #0x7C]
  04474	e0822003	 add         r2, r2, r3
  04478	e59d32f0	 ldr         r3, [sp, #0x2F0]
  0447c	e2833008	 add         r3, r3, #8
  04480	e5933000	 ldr         r3, [r3]
  04484	e28330bc	 add         r3, r3, #0xBC
  04488	e5832000	 str         r2, [r3]

; 1959 :         OUTREG32( &m_pDispRegs->tDISPC_VID1.BA1, pSurface->PhysicalAddr(eRotation, bMirror) );

  0448c	e3a03000	 mov         r3, #0
  04490	e59d20fc	 ldr         r2, [sp, #0xFC]
  04494	e59d106c	 ldr         r1, [sp, #0x6C]
  04498	e59d00f8	 ldr         r0, [sp, #0xF8]
  0449c	e5900000	 ldr         r0, [r0]
  044a0	e280e014	 add         lr, r0, #0x14
  044a4	e59d00f8	 ldr         r0, [sp, #0xF8]
  044a8	e59e4000	 ldr         r4, [lr]
  044ac	e1a0e00f	 mov         lr, pc
  044b0	e12fff14	 bx          r4
  044b4	e58d02a8	 str         r0, [sp, #0x2A8]
  044b8	e59d32f0	 ldr         r3, [sp, #0x2F0]
  044bc	e2833008	 add         r3, r3, #8
  044c0	e5933000	 ldr         r3, [r3]
  044c4	e28320c0	 add         r2, r3, #0xC0
  044c8	e59d32a8	 ldr         r3, [sp, #0x2A8]
  044cc	e5823000	 str         r3, [r2]

; 1960 : 
; 1961 :         //  Initialize FIR accumulators
; 1962 :         OUTREG32( &m_pDispRegs->tDISPC_VID1.ACCU0,
; 1963 :                     dwAccum0
; 1964 :                     );

  044d0	e59d32f0	 ldr         r3, [sp, #0x2F0]
  044d4	e2833008	 add         r3, r3, #8
  044d8	e5933000	 ldr         r3, [r3]
  044dc	e28320e8	 add         r2, r3, #0xE8
  044e0	e59d3114	 ldr         r3, [sp, #0x114]
  044e4	e5823000	 str         r3, [r2]

; 1965 : 
; 1966 :         OUTREG32( &m_pDispRegs->tDISPC_VID1.ACCU1,
; 1967 :                     dwAccum1
; 1968 :                     );

  044e8	e59d32f0	 ldr         r3, [sp, #0x2F0]
  044ec	e2833008	 add         r3, r3, #8
  044f0	e5933000	 ldr         r3, [r3]
  044f4	e28320ec	 add         r2, r3, #0xEC
  044f8	e59d3170	 ldr         r3, [sp, #0x170]
  044fc	e5823000	 str         r3, [r2]

; 1969 : 
; 1970 :         //  Set FIR increment value and coeffs
; 1971 :         OUTREG32( &m_pDispRegs->tDISPC_VID1.FIR,
; 1972 :                     DISPC_VID_FIR_VIDFIRHINC(dwHorzScale) |
; 1973 :                     DISPC_VID_FIR_VIDFIRVINC(dwVertScale)
; 1974 :                     );

  04500	e59d3088	 ldr         r3, [sp, #0x88]
  04504	e1a02803	 mov         r2, r3, lsl #16
  04508	e59d314c	 ldr         r3, [sp, #0x14C]
  0450c	e1832002	 orr         r2, r3, r2
  04510	e59d32f0	 ldr         r3, [sp, #0x2F0]
  04514	e2833008	 add         r3, r3, #8
  04518	e5933000	 ldr         r3, [r3]
  0451c	e28330e0	 add         r3, r3, #0xE0
  04520	e5832000	 str         r2, [r3]

; 1975 : 
; 1976 :         for( i = 0; i < NUM_SCALING_PHASES; i++ )

  04524	e3a03000	 mov         r3, #0
  04528	e58d3078	 str         r3, [sp, #0x78]
  0452c	ea000002	 b           |$LN10@SetScaling@2|
  04530		 |$LN9@SetScaling@2|
  04530	e59d3078	 ldr         r3, [sp, #0x78]
  04534	e2833001	 add         r3, r3, #1
  04538	e58d3078	 str         r3, [sp, #0x78]
  0453c		 |$LN10@SetScaling@2|
  0453c	e59d3078	 ldr         r3, [sp, #0x78]
  04540	e3530008	 cmp         r3, #8
  04544	2a00003d	 bcs         |$LN8@SetScaling@2|

; 1977 :         {
; 1978 :             //  OR the horiz and vert coeff values b/c some registers span both H and V coeffs
; 1979 :             OUTREG32( &m_pDispRegs->tDISPC_VID1.aFIR_COEF[i].ulH,
; 1980 :                         *pHorizCoeffs++ | *pVertCoeffs++
; 1981 :                         );

  04548	e59d3154	 ldr         r3, [sp, #0x154]
  0454c	e5932000	 ldr         r2, [r3]
  04550	e59d315c	 ldr         r3, [sp, #0x15C]
  04554	e5933000	 ldr         r3, [r3]
  04558	e1820003	 orr         r0, r2, r3
  0455c	e59d32f0	 ldr         r3, [sp, #0x2F0]
  04560	e2833008	 add         r3, r3, #8
  04564	e5933000	 ldr         r3, [r3]
  04568	e28310f0	 add         r1, r3, #0xF0
  0456c	e59d2078	 ldr         r2, [sp, #0x78]
  04570	e3a03008	 mov         r3, #8
  04574	e0030392	 mul         r3, r2, r3
  04578	e0813003	 add         r3, r1, r3
  0457c	e5830000	 str         r0, [r3]
  04580	e59d315c	 ldr         r3, [sp, #0x15C]
  04584	e2833004	 add         r3, r3, #4
  04588	e58d315c	 str         r3, [sp, #0x15C]
  0458c	e59d3154	 ldr         r3, [sp, #0x154]
  04590	e2833004	 add         r3, r3, #4
  04594	e58d3154	 str         r3, [sp, #0x154]

; 1982 : 
; 1983 :             OUTREG32( &m_pDispRegs->tDISPC_VID1.aFIR_COEF[i].ulHV,
; 1984 :                         *pHorizCoeffs++ | *pVertCoeffs++
; 1985 :                         );

  04598	e59d3154	 ldr         r3, [sp, #0x154]
  0459c	e5932000	 ldr         r2, [r3]
  045a0	e59d315c	 ldr         r3, [sp, #0x15C]
  045a4	e5933000	 ldr         r3, [r3]
  045a8	e1820003	 orr         r0, r2, r3
  045ac	e59d32f0	 ldr         r3, [sp, #0x2F0]
  045b0	e2833008	 add         r3, r3, #8
  045b4	e5933000	 ldr         r3, [r3]
  045b8	e28310f0	 add         r1, r3, #0xF0
  045bc	e59d2078	 ldr         r2, [sp, #0x78]
  045c0	e3a03008	 mov         r3, #8
  045c4	e0030392	 mul         r3, r2, r3
  045c8	e0813003	 add         r3, r1, r3
  045cc	e2833004	 add         r3, r3, #4
  045d0	e5830000	 str         r0, [r3]
  045d4	e59d315c	 ldr         r3, [sp, #0x15C]
  045d8	e2833004	 add         r3, r3, #4
  045dc	e58d315c	 str         r3, [sp, #0x15C]
  045e0	e59d3154	 ldr         r3, [sp, #0x154]
  045e4	e2833004	 add         r3, r3, #4
  045e8	e58d3154	 str         r3, [sp, #0x154]

; 1986 : 
; 1987 :             OUTREG32( &m_pDispRegs->DISPC_VID1_FIR_COEF_V[i],
; 1988 :                         *pHorizCoeffs++ | *pVertCoeffs++
; 1989 :                         );

  045ec	e59d3154	 ldr         r3, [sp, #0x154]
  045f0	e5932000	 ldr         r2, [r3]
  045f4	e59d315c	 ldr         r3, [sp, #0x15C]
  045f8	e5933000	 ldr         r3, [r3]
  045fc	e1820003	 orr         r0, r2, r3
  04600	e59d32f0	 ldr         r3, [sp, #0x2F0]
  04604	e2833008	 add         r3, r3, #8
  04608	e5933000	 ldr         r3, [r3]
  0460c	e2831e1e	 add         r1, r3, #0x1E, 28
  04610	e59d2078	 ldr         r2, [sp, #0x78]
  04614	e3a03004	 mov         r3, #4
  04618	e0030392	 mul         r3, r2, r3
  0461c	e0813003	 add         r3, r1, r3
  04620	e5830000	 str         r0, [r3]
  04624	e59d315c	 ldr         r3, [sp, #0x15C]
  04628	e2833004	 add         r3, r3, #4
  0462c	e58d315c	 str         r3, [sp, #0x15C]
  04630	e59d3154	 ldr         r3, [sp, #0x154]
  04634	e2833004	 add         r3, r3, #4
  04638	e58d3154	 str         r3, [sp, #0x154]

; 1990 :         }

  0463c	eaffffbb	 b           |$LN9@SetScaling@2|
  04640		 |$LN8@SetScaling@2|

; 1991 : 
; 1992 :         Dump_DISPC_VID( &m_pDispRegs->tDISPC_VID1, (UINT32*) &m_pDispRegs->DISPC_VID1_FIR_COEF_V[0], 1 );

  04640	e3a02001	 mov         r2, #1
  04644	e59d32f0	 ldr         r3, [sp, #0x2F0]
  04648	e2833008	 add         r3, r3, #8
  0464c	e5933000	 ldr         r3, [r3]
  04650	e2831e1e	 add         r1, r3, #0x1E, 28
  04654	e59d32f0	 ldr         r3, [sp, #0x2F0]
  04658	e2833008	 add         r3, r3, #8
  0465c	e5933000	 ldr         r3, [r3]
  04660	e28300bc	 add         r0, r3, #0xBC
  04664	eb000000	 bl          |?Dump_DISPC_VID@@YAXPAUOMAP_VID_REGS@@PAIK@Z|
  04668		 |$LN14@SetScaling@2|

; 1993 :     }
; 1994 : 
; 1995 : 
; 1996 :     //  VIDEO2 pipeline
; 1997 :     if( ePipeline == OMAP_DSS_PIPELINE_VIDEO2 )

  04668	e59d32f4	 ldr         r3, [sp, #0x2F4]
  0466c	e3530002	 cmp         r3, #2
  04670	1a000132	 bne         |$LN7@SetScaling@2|

; 1998 :     {
; 1999 :         DEBUGMSG(ZONE_WARNING, (L"\t Resizer Enabled %d \r\n",bUseResizer));

  04674	e59d10f4	 ldr         r1, [sp, #0xF4]
  04678	e59f05d8	 ldr         r0, [pc, #0x5D8]
  0467c	eb000000	 bl          NKDbgPrintfW
  04680	e3a03001	 mov         r3, #1
  04684	e58d32ac	 str         r3, [sp, #0x2AC]
  04688	ea000001	 b           |$LN145@SetScaling@2|
  0468c	e3a03000	 mov         r3, #0
  04690	e58d32ac	 str         r3, [sp, #0x2AC]
  04694		 |$LN145@SetScaling@2|

; 2000 :         /* If using resizer */        
; 2001 :         if (pSurface->isResizerEnabled())

  04694	e59d00f8	 ldr         r0, [sp, #0xF8]
  04698	eb000000	 bl          |?isResizerEnabled@OMAPSurface@@QAAHXZ|
  0469c	e58d02b0	 str         r0, [sp, #0x2B0]
  046a0	e59d32b0	 ldr         r3, [sp, #0x2B0]
  046a4	e3530000	 cmp         r3, #0
  046a8	0a000048	 beq         |$LN6@SetScaling@2|

; 2002 :         {   
; 2003 :             DWORD rszStatus = FALSE;

  046ac	e3a03000	 mov         r3, #0
  046b0	e58d31a8	 str         r3, [sp, #0x1A8]

; 2004 :             /* set Resizer */
; 2005 :             rszStatus = pSurface->ConfigResizerParams(pSrcRect, pDestRect,eRotation);

  046b4	e59d306c	 ldr         r3, [sp, #0x6C]
  046b8	e59d22fc	 ldr         r2, [sp, #0x2FC]
  046bc	e59d12f8	 ldr         r1, [sp, #0x2F8]
  046c0	e59d00f8	 ldr         r0, [sp, #0xF8]
  046c4	eb000000	 bl          |?ConfigResizerParams@OMAPSurface@@QAAHPAUtagRECT@@0W4OMAP_DSS_ROTATION@@@Z|
  046c8	e58d02b4	 str         r0, [sp, #0x2B4]
  046cc	e59d32b4	 ldr         r3, [sp, #0x2B4]
  046d0	e58d31a8	 str         r3, [sp, #0x1A8]

; 2006 :             /* Start resizer */
; 2007 :             if (rszStatus)

  046d4	e59d31a8	 ldr         r3, [sp, #0x1A8]
  046d8	e3530000	 cmp         r3, #0
  046dc	0a000021	 beq         |$LN5@SetScaling@2|

; 2008 :                 rszStatus = pSurface->StartResizer(pSurface->PhysicalAddr(OMAP_DSS_ROTATION_0, bMirror,OMAP_ASSOC_SURF_FORCE_OFF), //input
; 2009 :                                                    pSurface->OmapAssocSurface()->PhysicalAddr(OMAP_DSS_ROTATION_0, bMirror, OMAP_ASSOC_SURF_FORCE_OFF));               

  046e0	e59d00f8	 ldr         r0, [sp, #0xF8]
  046e4	eb000000	 bl          |?OmapAssocSurface@OMAPSurface@@QAAPAV1@XZ|
  046e8	e58d02b8	 str         r0, [sp, #0x2B8]
  046ec	e59d32b8	 ldr         r3, [sp, #0x2B8]
  046f0	e58d32bc	 str         r3, [sp, #0x2BC]
  046f4	e3a03001	 mov         r3, #1
  046f8	e59d20fc	 ldr         r2, [sp, #0xFC]
  046fc	e3a01000	 mov         r1, #0
  04700	e59d02bc	 ldr         r0, [sp, #0x2BC]
  04704	e59de2bc	 ldr         lr, [sp, #0x2BC]
  04708	e59ee000	 ldr         lr, [lr]
  0470c	e28ee014	 add         lr, lr, #0x14
  04710	e59e4000	 ldr         r4, [lr]
  04714	e1a0e00f	 mov         lr, pc
  04718	e12fff14	 bx          r4
  0471c	e58d02c0	 str         r0, [sp, #0x2C0]
  04720	e3a03001	 mov         r3, #1
  04724	e59d20fc	 ldr         r2, [sp, #0xFC]
  04728	e3a01000	 mov         r1, #0
  0472c	e59d00f8	 ldr         r0, [sp, #0xF8]
  04730	e5900000	 ldr         r0, [r0]
  04734	e280e014	 add         lr, r0, #0x14
  04738	e59d00f8	 ldr         r0, [sp, #0xF8]
  0473c	e59e4000	 ldr         r4, [lr]
  04740	e1a0e00f	 mov         lr, pc
  04744	e12fff14	 bx          r4
  04748	e58d02c4	 str         r0, [sp, #0x2C4]
  0474c	e59d22c0	 ldr         r2, [sp, #0x2C0]
  04750	e59d12c4	 ldr         r1, [sp, #0x2C4]
  04754	e59d00f8	 ldr         r0, [sp, #0xF8]
  04758	eb000000	 bl          |?StartResizer@OMAPSurface@@QAAHKK@Z|
  0475c	e58d02c8	 str         r0, [sp, #0x2C8]
  04760	e59d32c8	 ldr         r3, [sp, #0x2C8]
  04764	e58d31a8	 str         r3, [sp, #0x1A8]
  04768		 |$LN5@SetScaling@2|

; 2010 :             if (!(rszStatus))

  04768	e59d31a8	 ldr         r3, [sp, #0x1A8]
  0476c	e3530000	 cmp         r3, #0
  04770	1a000016	 bne         |$LN4@SetScaling@2|

; 2011 :             {
; 2012 :                 RETAILMSG(TRUE,(L"SetScalingAttribs: Cannot configure/start ISP resizer; Cropping the image\r\n"));

  04774	e59f04d8	 ldr         r0, [pc, #0x4D8]
  04778	eb000000	 bl          NKDbgPrintfW
  0477c	e3a03001	 mov         r3, #1
  04780	e58d32cc	 str         r3, [sp, #0x2CC]
  04784	ea000001	 b           |$LN147@SetScaling@2|
  04788	e3a03000	 mov         r3, #0
  0478c	e58d32cc	 str         r3, [sp, #0x2CC]
  04790		 |$LN147@SetScaling@2|

; 2013 :                 bUseResizer = FALSE;

  04790	e3a03000	 mov         r3, #0
  04794	e58d30f4	 str         r3, [sp, #0xF4]

; 2014 :                 pSurface->UseResizer(FALSE);

  04798	e3a01000	 mov         r1, #0
  0479c	e59d00f8	 ldr         r0, [sp, #0xF8]
  047a0	eb000000	 bl          |?UseResizer@OMAPSurface@@QAAHH@Z|

; 2015 :                 pSurface->SetRSZHandle(NULL, TRUE);

  047a4	e3a02001	 mov         r2, #1
  047a8	e3a01000	 mov         r1, #0
  047ac	e59d00f8	 ldr         r0, [sp, #0xF8]
  047b0	eb000000	 bl          |?SetRSZHandle@OMAPSurface@@QAAXPAXH@Z|

; 2016 :                 memset(pSurface->ResizeParams(),0,sizeof(RSZParams_t));                

  047b4	e59d00f8	 ldr         r0, [sp, #0xF8]
  047b8	eb000000	 bl          |?ResizeParams@OMAPSurface@@QAAPAURSZParams_t@@XZ|
  047bc	e58d02d0	 str         r0, [sp, #0x2D0]
  047c0	e3a02064	 mov         r2, #0x64
  047c4	e3a01000	 mov         r1, #0
  047c8	e59d02d0	 ldr         r0, [sp, #0x2D0]
  047cc	eb000000	 bl          memset
  047d0		 |$LN4@SetScaling@2|
  047d0		 |$LN6@SetScaling@2|

; 2017 :             }            
; 2018 :         }
; 2019 :         
; 2020 :         
; 2021 :         //  Get the current attribute settings
; 2022 :         dwCurrAttribs = INREG32( &m_pDispRegs->tDISPC_VID2.ATTRIBUTES );

  047d0	e59d32f0	 ldr         r3, [sp, #0x2F0]
  047d4	e2833008	 add         r3, r3, #8
  047d8	e5933000	 ldr         r3, [r3]
  047dc	e2833f57	 add         r3, r3, #0x57, 30
  047e0	e5933000	 ldr         r3, [r3]
  047e4	e58d3158	 str         r3, [sp, #0x158]

; 2023 : 
; 2024 :         //  Mask off the scaling bits
; 2025 :         dwCurrAttribs &= ~(DISPC_VID_ATTR_VIDRESIZE_MASK|DISPC_VID_ATTR_VIDLINEBUFFERSPLIT|DISPC_VID_ATTR_VIDVERTICALTAPS_5);

  047e8	e59d2158	 ldr         r2, [sp, #0x158]
  047ec	e3e03606	 mvn         r3, #6, 12
  047f0	e2233e1e	 eor         r3, r3, #0x1E, 28
  047f4	e0023003	 and         r3, r2, r3
  047f8	e58d3158	 str         r3, [sp, #0x158]

; 2026 :         
; 2027 :         //  Enable video resizing by or'ing with scale enable attribs
; 2028 :         OUTREG32( &m_pDispRegs->tDISPC_VID2.ATTRIBUTES,
; 2029 :                     dwCurrAttribs | dwScaleEnable
; 2030 :                     );

  047fc	e59d2158	 ldr         r2, [sp, #0x158]
  04800	e59d3004	 ldr         r3, [sp, #4]
  04804	e1822003	 orr         r2, r2, r3
  04808	e59d32f0	 ldr         r3, [sp, #0x2F0]
  0480c	e2833008	 add         r3, r3, #8
  04810	e5933000	 ldr         r3, [r3]
  04814	e2833f57	 add         r3, r3, #0x57, 30
  04818	e5832000	 str         r2, [r3]

; 2031 : 
; 2032 :         //  Size of resized output window; picture size was set by in SetPipelineAttribs()
; 2033 :         OUTREG32( &m_pDispRegs->tDISPC_VID2.SIZE,
; 2034 :                     DISPC_VID_SIZE_VIDSIZEX(dwDestWidth) |
; 2035 :                     DISPC_VID_SIZE_VIDSIZEY(dwDestHeight)
; 2036 :                     );

  0481c	e59d3084	 ldr         r3, [sp, #0x84]
  04820	e2432001	 sub         r2, r3, #1
  04824	e59d308c	 ldr         r3, [sp, #0x8C]
  04828	e2433001	 sub         r3, r3, #1
  0482c	e1a03803	 mov         r3, r3, lsl #16
  04830	e1822003	 orr         r2, r2, r3
  04834	e59d32f0	 ldr         r3, [sp, #0x2F0]
  04838	e2833008	 add         r3, r3, #8
  0483c	e5933000	 ldr         r3, [r3]
  04840	e2833f56	 add         r3, r3, #0x56, 30
  04844	e5832000	 str         r2, [r3]

; 2037 : 
; 2038 :         OUTREG32( &m_pDispRegs->tDISPC_VID2.PICTURE_SIZE,
; 2039 :                     DISPC_VID_PICTURE_SIZE_VIDORGSIZEX(dwSrcWidth) |
; 2040 :                     DISPC_VID_PICTURE_SIZE_VIDORGSIZEY(dwSrcHeight)
; 2041 :                     );

  04848	e59d3008	 ldr         r3, [sp, #8]
  0484c	e2432001	 sub         r2, r3, #1
  04850	e59d30f0	 ldr         r3, [sp, #0xF0]
  04854	e2433001	 sub         r3, r3, #1
  04858	e1a03803	 mov         r3, r3, lsl #16
  0485c	e1822003	 orr         r2, r2, r3
  04860	e59d32f0	 ldr         r3, [sp, #0x2F0]
  04864	e2833008	 add         r3, r3, #8
  04868	e5933000	 ldr         r3, [r3]
  0486c	e2833f5d	 add         r3, r3, #0x5D, 30
  04870	e5832000	 str         r2, [r3]

; 2042 : 
; 2043 :         //  Position of window
; 2044 :         OUTREG32( &m_pDispRegs->tDISPC_VID2.POSITION,
; 2045 :                     DISPC_VID_POS_VIDPOSX(dwX) |
; 2046 :                     DISPC_VID_POS_VIDPOSY(dwY)
; 2047 :                     );

  04874	e59d3118	 ldr         r3, [sp, #0x118]
  04878	e1a02803	 mov         r2, r3, lsl #16
  0487c	e59d3080	 ldr         r3, [sp, #0x80]
  04880	e1832002	 orr         r2, r3, r2
  04884	e59d32f0	 ldr         r3, [sp, #0x2F0]
  04888	e2833008	 add         r3, r3, #8
  0488c	e5933000	 ldr         r3, [r3]
  04890	e2833f55	 add         r3, r3, #0x55, 30
  04894	e5832000	 str         r2, [r3]

; 2048 : 
; 2049 :         //  DMA properties
; 2050 :         OUTREG32( &m_pDispRegs->tDISPC_VID2.PIXEL_INC, pSurface->PixelIncr(eRotation, bMirror) );

  04898	e59d20fc	 ldr         r2, [sp, #0xFC]
  0489c	e59d106c	 ldr         r1, [sp, #0x6C]
  048a0	e59d30f8	 ldr         r3, [sp, #0xF8]
  048a4	e5933000	 ldr         r3, [r3]
  048a8	e2833018	 add         r3, r3, #0x18
  048ac	e59d00f8	 ldr         r0, [sp, #0xF8]
  048b0	e5933000	 ldr         r3, [r3]
  048b4	e1a0e00f	 mov         lr, pc
  048b8	e12fff13	 bx          r3
  048bc	e58d02d4	 str         r0, [sp, #0x2D4]
  048c0	e59d32f0	 ldr         r3, [sp, #0x2F0]
  048c4	e2833008	 add         r3, r3, #8
  048c8	e5933000	 ldr         r3, [r3]
  048cc	e2832f5b	 add         r2, r3, #0x5B, 30
  048d0	e59d32d4	 ldr         r3, [sp, #0x2D4]
  048d4	e5823000	 str         r3, [r2]

; 2051 :         OUTREG32( &m_pDispRegs->tDISPC_VID2.ROW_INC, pSurface->RowIncr(eRotation, bMirror) );

  048d8	e59d20fc	 ldr         r2, [sp, #0xFC]
  048dc	e59d106c	 ldr         r1, [sp, #0x6C]
  048e0	e59d30f8	 ldr         r3, [sp, #0xF8]
  048e4	e5933000	 ldr         r3, [r3]
  048e8	e283301c	 add         r3, r3, #0x1C
  048ec	e59d00f8	 ldr         r0, [sp, #0xF8]
  048f0	e5933000	 ldr         r3, [r3]
  048f4	e1a0e00f	 mov         lr, pc
  048f8	e12fff13	 bx          r3
  048fc	e58d02d8	 str         r0, [sp, #0x2D8]
  04900	e59d32f0	 ldr         r3, [sp, #0x2F0]
  04904	e2833008	 add         r3, r3, #8
  04908	e5933000	 ldr         r3, [r3]
  0490c	e2832f5a	 add         r2, r3, #0x5A, 30
  04910	e59d32d8	 ldr         r3, [sp, #0x2D8]
  04914	e5823000	 str         r3, [r2]

; 2052 : 
; 2053 :         OUTREG32( &m_pDispRegs->tDISPC_VID2.BA0, pSurface->PhysicalAddr(eRotation, bMirror) + dwInterlace );

  04918	e3a03000	 mov         r3, #0
  0491c	e59d20fc	 ldr         r2, [sp, #0xFC]
  04920	e59d106c	 ldr         r1, [sp, #0x6C]
  04924	e59d00f8	 ldr         r0, [sp, #0xF8]
  04928	e5900000	 ldr         r0, [r0]
  0492c	e280e014	 add         lr, r0, #0x14
  04930	e59d00f8	 ldr         r0, [sp, #0xF8]
  04934	e59e4000	 ldr         r4, [lr]
  04938	e1a0e00f	 mov         lr, pc
  0493c	e12fff14	 bx          r4
  04940	e58d02dc	 str         r0, [sp, #0x2DC]
  04944	e59d22dc	 ldr         r2, [sp, #0x2DC]
  04948	e59d307c	 ldr         r3, [sp, #0x7C]
  0494c	e0822003	 add         r2, r2, r3
  04950	e59d32f0	 ldr         r3, [sp, #0x2F0]
  04954	e2833008	 add         r3, r3, #8
  04958	e5933000	 ldr         r3, [r3]
  0495c	e2833f53	 add         r3, r3, #0x53, 30
  04960	e5832000	 str         r2, [r3]

; 2054 :         OUTREG32( &m_pDispRegs->tDISPC_VID2.BA1, pSurface->PhysicalAddr(eRotation, bMirror) );

  04964	e3a03000	 mov         r3, #0
  04968	e59d20fc	 ldr         r2, [sp, #0xFC]
  0496c	e59d106c	 ldr         r1, [sp, #0x6C]
  04970	e59d00f8	 ldr         r0, [sp, #0xF8]
  04974	e5900000	 ldr         r0, [r0]
  04978	e280e014	 add         lr, r0, #0x14
  0497c	e59d00f8	 ldr         r0, [sp, #0xF8]
  04980	e59e4000	 ldr         r4, [lr]
  04984	e1a0e00f	 mov         lr, pc
  04988	e12fff14	 bx          r4
  0498c	e58d02e0	 str         r0, [sp, #0x2E0]
  04990	e59d32f0	 ldr         r3, [sp, #0x2F0]
  04994	e2833008	 add         r3, r3, #8
  04998	e5933000	 ldr         r3, [r3]
  0499c	e2832e15	 add         r2, r3, #0x15, 28
  049a0	e59d32e0	 ldr         r3, [sp, #0x2E0]
  049a4	e5823000	 str         r3, [r2]

; 2055 : 
; 2056 :         //  Initialize FIR accumulators
; 2057 :         OUTREG32( &m_pDispRegs->tDISPC_VID2.ACCU0,
; 2058 :                     dwAccum0
; 2059 :                     );

  049a8	e59d32f0	 ldr         r3, [sp, #0x2F0]
  049ac	e2833008	 add         r3, r3, #8
  049b0	e5933000	 ldr         r3, [r3]
  049b4	e2832f5e	 add         r2, r3, #0x5E, 30
  049b8	e59d3114	 ldr         r3, [sp, #0x114]
  049bc	e5823000	 str         r3, [r2]

; 2060 : 
; 2061 :         OUTREG32( &m_pDispRegs->tDISPC_VID2.ACCU1,
; 2062 :                     dwAccum1
; 2063 :                     );

  049c0	e59d32f0	 ldr         r3, [sp, #0x2F0]
  049c4	e2833008	 add         r3, r3, #8
  049c8	e5933000	 ldr         r3, [r3]
  049cc	e2832f5f	 add         r2, r3, #0x5F, 30
  049d0	e59d3170	 ldr         r3, [sp, #0x170]
  049d4	e5823000	 str         r3, [r2]

; 2064 : 
; 2065 :         //  Set FIR increment value and coeffs
; 2066 :         OUTREG32( &m_pDispRegs->tDISPC_VID2.FIR,
; 2067 :                     DISPC_VID_FIR_VIDFIRHINC(dwHorzScale) |
; 2068 :                     DISPC_VID_FIR_VIDFIRVINC(dwVertScale)
; 2069 :                     );

  049d8	e59d3088	 ldr         r3, [sp, #0x88]
  049dc	e1a02803	 mov         r2, r3, lsl #16
  049e0	e59d314c	 ldr         r3, [sp, #0x14C]
  049e4	e1832002	 orr         r2, r3, r2
  049e8	e59d32f0	 ldr         r3, [sp, #0x2F0]
  049ec	e2833008	 add         r3, r3, #8
  049f0	e5933000	 ldr         r3, [r3]
  049f4	e2833e17	 add         r3, r3, #0x17, 28
  049f8	e5832000	 str         r2, [r3]

; 2070 : 
; 2071 :         for( i = 0; i < NUM_SCALING_PHASES; i++ )

  049fc	e3a03000	 mov         r3, #0
  04a00	e58d3078	 str         r3, [sp, #0x78]
  04a04	ea000002	 b           |$LN3@SetScaling@2|
  04a08		 |$LN2@SetScaling@2|
  04a08	e59d3078	 ldr         r3, [sp, #0x78]
  04a0c	e2833001	 add         r3, r3, #1
  04a10	e58d3078	 str         r3, [sp, #0x78]
  04a14		 |$LN3@SetScaling@2|
  04a14	e59d3078	 ldr         r3, [sp, #0x78]
  04a18	e3530008	 cmp         r3, #8
  04a1c	2a00003d	 bcs         |$LN1@SetScaling@2|

; 2072 :         {
; 2073 :             //  OR the horiz and vert coeff values b/c some registers span both H and V coeffs
; 2074 :             OUTREG32( &m_pDispRegs->tDISPC_VID2.aFIR_COEF[i].ulH,
; 2075 :                         *pHorizCoeffs++ | *pVertCoeffs++
; 2076 :                         );

  04a20	e59d3154	 ldr         r3, [sp, #0x154]
  04a24	e5932000	 ldr         r2, [r3]
  04a28	e59d315c	 ldr         r3, [sp, #0x15C]
  04a2c	e5933000	 ldr         r3, [r3]
  04a30	e1820003	 orr         r0, r2, r3
  04a34	e59d32f0	 ldr         r3, [sp, #0x2F0]
  04a38	e2833008	 add         r3, r3, #8
  04a3c	e5933000	 ldr         r3, [r3]
  04a40	e2831d06	 add         r1, r3, #6, 26
  04a44	e59d2078	 ldr         r2, [sp, #0x78]
  04a48	e3a03008	 mov         r3, #8
  04a4c	e0030392	 mul         r3, r2, r3
  04a50	e0813003	 add         r3, r1, r3
  04a54	e5830000	 str         r0, [r3]
  04a58	e59d315c	 ldr         r3, [sp, #0x15C]
  04a5c	e2833004	 add         r3, r3, #4
  04a60	e58d315c	 str         r3, [sp, #0x15C]
  04a64	e59d3154	 ldr         r3, [sp, #0x154]
  04a68	e2833004	 add         r3, r3, #4
  04a6c	e58d3154	 str         r3, [sp, #0x154]

; 2077 : 
; 2078 :             OUTREG32( &m_pDispRegs->tDISPC_VID2.aFIR_COEF[i].ulHV,
; 2079 :                         *pHorizCoeffs++ | *pVertCoeffs++
; 2080 :                         );

  04a70	e59d3154	 ldr         r3, [sp, #0x154]
  04a74	e5932000	 ldr         r2, [r3]
  04a78	e59d315c	 ldr         r3, [sp, #0x15C]
  04a7c	e5933000	 ldr         r3, [r3]
  04a80	e1820003	 orr         r0, r2, r3
  04a84	e59d32f0	 ldr         r3, [sp, #0x2F0]
  04a88	e2833008	 add         r3, r3, #8
  04a8c	e5933000	 ldr         r3, [r3]
  04a90	e2831d06	 add         r1, r3, #6, 26
  04a94	e59d2078	 ldr         r2, [sp, #0x78]
  04a98	e3a03008	 mov         r3, #8
  04a9c	e0030392	 mul         r3, r2, r3
  04aa0	e0813003	 add         r3, r1, r3
  04aa4	e2833004	 add         r3, r3, #4
  04aa8	e5830000	 str         r0, [r3]
  04aac	e59d315c	 ldr         r3, [sp, #0x15C]
  04ab0	e2833004	 add         r3, r3, #4
  04ab4	e58d315c	 str         r3, [sp, #0x15C]
  04ab8	e59d3154	 ldr         r3, [sp, #0x154]
  04abc	e2833004	 add         r3, r3, #4
  04ac0	e58d3154	 str         r3, [sp, #0x154]

; 2081 : 
; 2082 :             OUTREG32( &m_pDispRegs->DISPC_VID2_FIR_COEF_V[i],
; 2083 :                         *pHorizCoeffs++ | *pVertCoeffs++
; 2084 :                         );

  04ac4	e59d3154	 ldr         r3, [sp, #0x154]
  04ac8	e5932000	 ldr         r2, [r3]
  04acc	e59d315c	 ldr         r3, [sp, #0x15C]
  04ad0	e5933000	 ldr         r3, [r3]
  04ad4	e1820003	 orr         r0, r2, r3
  04ad8	e59d32f0	 ldr         r3, [sp, #0x2F0]
  04adc	e2833008	 add         r3, r3, #8
  04ae0	e5933000	 ldr         r3, [r3]
  04ae4	e2831c02	 add         r1, r3, #2, 24
  04ae8	e59d2078	 ldr         r2, [sp, #0x78]
  04aec	e3a03004	 mov         r3, #4
  04af0	e0030392	 mul         r3, r2, r3
  04af4	e0813003	 add         r3, r1, r3
  04af8	e5830000	 str         r0, [r3]
  04afc	e59d315c	 ldr         r3, [sp, #0x15C]
  04b00	e2833004	 add         r3, r3, #4
  04b04	e58d315c	 str         r3, [sp, #0x15C]
  04b08	e59d3154	 ldr         r3, [sp, #0x154]
  04b0c	e2833004	 add         r3, r3, #4
  04b10	e58d3154	 str         r3, [sp, #0x154]

; 2085 :         }

  04b14	eaffffbb	 b           |$LN2@SetScaling@2|
  04b18		 |$LN1@SetScaling@2|

; 2086 : 
; 2087 :         Dump_DISPC_VID( &m_pDispRegs->tDISPC_VID2, (UINT32*) &m_pDispRegs->DISPC_VID2_FIR_COEF_V[0], 2 );

  04b18	e3a02002	 mov         r2, #2
  04b1c	e59d32f0	 ldr         r3, [sp, #0x2F0]
  04b20	e2833008	 add         r3, r3, #8
  04b24	e5933000	 ldr         r3, [r3]
  04b28	e2831c02	 add         r1, r3, #2, 24
  04b2c	e59d32f0	 ldr         r3, [sp, #0x2F0]
  04b30	e2833008	 add         r3, r3, #8
  04b34	e5933000	 ldr         r3, [r3]
  04b38	e2830f53	 add         r0, r3, #0x53, 30
  04b3c	eb000000	 bl          |?Dump_DISPC_VID@@YAXPAUOMAP_VID_REGS@@PAIK@Z|
  04b40		 |$LN7@SetScaling@2|

; 2088 :     }
; 2089 : 
; 2090 : 
; 2091 :     //  Update output width and height
; 2092 :     g_rgPipelineMapping[ePipeline].dwDestWidth  = dwDestWidth;

  04b40	e59d12f4	 ldr         r1, [sp, #0x2F4]
  04b44	e3a03020	 mov         r3, #0x20
  04b48	e0020391	 mul         r2, r1, r3
  04b4c	e59f30fc	 ldr         r3, [pc, #0xFC]
  04b50	e0833002	 add         r3, r3, r2
  04b54	e2832014	 add         r2, r3, #0x14
  04b58	e59d3084	 ldr         r3, [sp, #0x84]
  04b5c	e5823000	 str         r3, [r2]

; 2093 :     g_rgPipelineMapping[ePipeline].dwDestHeight = dwDestHeight;

  04b60	e59d12f4	 ldr         r1, [sp, #0x2F4]
  04b64	e3a03020	 mov         r3, #0x20
  04b68	e0020391	 mul         r2, r1, r3
  04b6c	e59f30dc	 ldr         r3, [pc, #0xDC]
  04b70	e0833002	 add         r3, r3, r2
  04b74	e2832018	 add         r2, r3, #0x18
  04b78	e59d308c	 ldr         r3, [sp, #0x8C]
  04b7c	e5823000	 str         r3, [r2]

; 2094 : 
; 2095 :     //  Cache the decimation factors applied to the source surface
; 2096 :     g_rgPipelineScaling[ePipeline].dwHorzScaling = dwHorzDecimation;

  04b80	e59d12f4	 ldr         r1, [sp, #0x2F4]
  04b84	e3a0300c	 mov         r3, #0xC
  04b88	e0020391	 mul         r2, r1, r3
  04b8c	e59f30b8	 ldr         r3, [pc, #0xB8]
  04b90	e0832002	 add         r2, r3, r2
  04b94	e59d316c	 ldr         r3, [sp, #0x16C]
  04b98	e5823000	 str         r3, [r2]

; 2097 :     g_rgPipelineScaling[ePipeline].dwVertScaling = dwVertDecimation;

  04b9c	e59d12f4	 ldr         r1, [sp, #0x2F4]
  04ba0	e3a0300c	 mov         r3, #0xC
  04ba4	e0020391	 mul         r2, r1, r3
  04ba8	e59f309c	 ldr         r3, [pc, #0x9C]
  04bac	e0833002	 add         r3, r3, r2
  04bb0	e2832004	 add         r2, r3, #4
  04bb4	e59d3168	 ldr         r3, [sp, #0x168]
  04bb8	e5823000	 str         r3, [r2]

; 2098 :     g_rgPipelineScaling[ePipeline].dwInterlace   = dwInterlace;

  04bbc	e59d12f4	 ldr         r1, [sp, #0x2F4]
  04bc0	e3a0300c	 mov         r3, #0xC
  04bc4	e0020391	 mul         r2, r1, r3
  04bc8	e59f307c	 ldr         r3, [pc, #0x7C]
  04bcc	e0833002	 add         r3, r3, r2
  04bd0	e2832008	 add         r2, r3, #8
  04bd4	e59d307c	 ldr         r3, [sp, #0x7C]
  04bd8	e5823000	 str         r3, [r2]

; 2099 : 
; 2100 :     //  Set the decimation factors for the surface back to normal
; 2101 :     pSurface->SetHorizontalScaling( 1 );

  04bdc	e3a01001	 mov         r1, #1
  04be0	e59d30f8	 ldr         r3, [sp, #0xF8]
  04be4	e5933000	 ldr         r3, [r3]
  04be8	e2833030	 add         r3, r3, #0x30
  04bec	e59d00f8	 ldr         r0, [sp, #0xF8]
  04bf0	e5933000	 ldr         r3, [r3]
  04bf4	e1a0e00f	 mov         lr, pc
  04bf8	e12fff13	 bx          r3

; 2102 :     pSurface->SetVerticalScaling( 1 );

  04bfc	e3a01001	 mov         r1, #1
  04c00	e59d30f8	 ldr         r3, [sp, #0xF8]
  04c04	e5933000	 ldr         r3, [r3]
  04c08	e2833034	 add         r3, r3, #0x34
  04c0c	e59d00f8	 ldr         r0, [sp, #0xF8]
  04c10	e5933000	 ldr         r3, [r3]
  04c14	e1a0e00f	 mov         lr, pc
  04c18	e12fff13	 bx          r3

; 2103 : 
; 2104 : 
; 2105 :     //  Result
; 2106 :     bResult = TRUE;

  04c1c	e3a03001	 mov         r3, #1
  04c20	e58d3100	 str         r3, [sp, #0x100]
  04c24		 |$LN16@SetScaling@2|
  04c24		 |$LN102@SetScaling@2|
  04c24		 |$cleanUp$38274|

; 2107 : 
; 2108 : cleanUp:
; 2109 :     //  Release regs
; 2110 :     ReleaseRegs();

  04c24	e59d02f0	 ldr         r0, [sp, #0x2F0]
  04c28	eb000000	 bl          |?ReleaseRegs@OMAPDisplayController@@IAAHXZ|

; 2111 : 
; 2112 :     //  Return result
; 2113 :     return bResult;

  04c2c	e59d01ac	 ldr         r0, [sp, #0x1AC]
  04c30	eb000000	 bl          __security_check_cookie
  04c34	e59d3100	 ldr         r3, [sp, #0x100]
  04c38	e58d31b8	 str         r3, [sp, #0x1B8]

; 2114 : }

  04c3c	e59d01b8	 ldr         r0, [sp, #0x1B8]
  04c40	e28ddfb9	 add         sp, sp, #0xB9, 30
  04c44	e89d6010	 ldmia       sp, {r4, sp, lr}
  04c48	e12fff1e	 bx          lr
  04c4c		 |$LN151@SetScaling@2|
  04c4c		 |$LN152@SetScaling@2|
  04c4c	00000000	 DCD         |?g_rgPipelineScaling@@3PAUOMAPPipelineScaling@@A|
  04c50		 |$LN153@SetScaling@2|
  04c50	00000000	 DCD         |?g_rgPipelineMapping@@3PAUOMAPPipelineConfig@@A|
  04c54		 |$LN154@SetScaling@2|
  04c54	00000000	 DCD         |??_C@_1JI@NGBENMPF@?$AAS?$AAe?$AAt?$AAS?$AAc?$AAa?$AAl?$AAi?$AAn?$AAg?$AAA?$AAt?$AAt?$AAr?$AAi?$AAb?$AAs?$AA?3?$AA?5?$AAC?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg@|
  04c58		 |$LN155@SetScaling@2|
  04c58	00000000	 DCD         |??_C@_1DA@NIKAMDK@?$AA?7?$AA?5?$AAR?$AAe?$AAs?$AAi?$AAz?$AAe?$AAr?$AA?5?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAd?$AA?5?$AA?$CF?$AAd?$AA?5?$AA?$AN?$AA?6?$AA?$AA@|
  04c5c		 |$LN156@SetScaling@2|
  04c5c	00000000	 DCD         |??_C@_1FK@COFGINGN@?$AA?5?$AA?5?$AAp?$AAS?$AAu?$AAr?$AAf?$AAa?$AAc?$AAe?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?5?$AAS?$AAt?$AAr?$AAi?$AAd?$AAe?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?5?$AAR?$AAo@|
  04c60		 |$LN157@SetScaling@2|
  04c60	00000000	 DCD         |??_C@_1CG@HBFGDEMK@?$AA?5?$AA?5?$AAe?$AAP?$AAi?$AAp?$AAe?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  04c64		 |$LN158@SetScaling@2|
  04c64	00000000	 DCD         |??_C@_1GC@FDNJDJGD@?$AA?5?$AA?5?$AAd?$AAw?$AAH?$AAo?$AAr?$AAz?$AAD?$AAe?$AAc?$AAi?$AAm?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?5?$AA?5?$AAd?$AAw?$AAV?$AAe?$AAr?$AAt?$AAD@|
  04c68		 |$LN159@SetScaling@2|
  04c68	00000000	 DCD         |??_C@_1FA@LJGLKAMF@?$AA?5?$AA?5?$AAd?$AAw?$AAD?$AAe?$AAs?$AAt?$AAW?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?5?$AA?5?$AAd?$AAw?$AAD?$AAe?$AAs?$AAt?$AAH?$AAe?$AAi?$AAg?$AAh?$AAt@|
  04c6c		 |$LN160@SetScaling@2|
  04c6c	00000000	 DCD         |??_C@_1FA@BOFPJMEK@?$AA?5?$AA?5?$AAd?$AAw?$AAS?$AAr?$AAc?$AAW?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?5?$AA?5?$AAd?$AAw?$AAS?$AAr?$AAc?$AAH?$AAe?$AAi?$AAg?$AAh?$AAt?$AA?5@|
  04c70		 |$LN161@SetScaling@2|
  04c70	00000000	 DCD         |??_C@_1HO@DDOBIAFA@?$AA?5?$AA?5?$AAd?$AAw?$AAS?$AAc?$AAa?$AAl?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?5?$AA?5?$AAd?$AAw?$AAH?$AAo?$AAr?$AAz@|
  04c74		 |$LN162@SetScaling@2|
  04c74	00000000	 DCD         |??_C@_1GE@JGNKCEIM@?$AA?5?$AA?5?$AAC?$AAo?$AAm?$AAp?$AAu?$AAt?$AAe?$AAd?$AA?5?$AAO?$AAr?$AAi?$AAg?$AAi?$AAn?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?$CF?$AAd?$AA?$CJ?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAr?$AAo@|
  04c78		 |$LN163@SetScaling@2|
  04c78	00000000	 DCD         |??_C@_1DM@GDJHIMEE@?$AA?5?$AA?5?$AAD?$AAe?$AAs?$AAt?$AA?5?$AAR?$AAE?$AAC?$AAT?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?$CF?$AAd?$AA?$CJ?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  04c7c		 |$LN164@SetScaling@2|
  04c7c	00000000	 DCD         |??_C@_1DM@OOMNMCIJ@?$AA?5?$AA?5?$AAS?$AAr?$AAc?$AA?5?$AA?5?$AAR?$AAE?$AAC?$AAT?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?$CF?$AAd?$AA?$CJ?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  04c80		 |$LN165@SetScaling@2|
  04c80	00000000	 DCD         |??_C@_1GC@FJEDJLBE@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAO?$AAM?$AAA?$AAP?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAS?$AAe?$AAt@|
  04c84		 |$LN166@SetScaling@2|
  04c84	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  04c88		 |$LN167@SetScaling@2|
  04c88	00000000	 DCD         |??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@|
  04c8c		 |$LN168@SetScaling@2|
  04c8c	00000000	 DCD         |??_C@_1KC@HIABDGPO@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  04c90		 |$M40546|

			 ENDP  ; |?SetScalingAttribs@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@PAUtagRECT@@1@Z|, OMAPDisplayController::SetScalingAttribs

; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\inc\dssai.h

  00000			 AREA	 |.pdata|, PDATA
|$T40583| DCD	|$LN5@ResizePara|
	DCD	0x40000b04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ResizeParams@OMAPSurface@@QAAPAURSZParams_t@@XZ| PROC ; OMAPSurface::ResizeParams

; 772  :     RSZParams_t *           ResizeParams() { return &m_sRSZParams; }

  00000		 |$LN5@ResizePara|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M40580|
  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e2833038	 add         r3, r3, #0x38
  00018	e58d3000	 str         r3, [sp]
  0001c	e59d0000	 ldr         r0, [sp]
  00020	e28dd004	 add         sp, sp, #4
  00024	e89d6000	 ldmia       sp, {sp, lr}
  00028	e12fff1e	 bx          lr
  0002c		 |$M40581|

			 ENDP  ; |?ResizeParams@OMAPSurface@@QAAPAURSZParams_t@@XZ|, OMAPSurface::ResizeParams


  00000			 AREA	 |.pdata|, PDATA
|$T40591| DCD	|$LN5@OmapAssocS|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?OmapAssocSurface@OMAPSurface@@QAAPAV1@XZ| PROC ; OMAPSurface::OmapAssocSurface

; 776  :     OMAPSurface *           OmapAssocSurface(){return m_pAssocSurface;}    

  00000		 |$LN5@OmapAssocS|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M40588|
  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e28330a0	 add         r3, r3, #0xA0
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3000	 str         r3, [sp]
  00020	e59d0000	 ldr         r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M40589|

			 ENDP  ; |?OmapAssocSurface@OMAPSurface@@QAAPAV1@XZ|, OMAPSurface::OmapAssocSurface

	EXPORT	|?EnableLPR@OMAPDisplayController@@QAAXHH@Z| ; OMAPDisplayController::EnableLPR
	EXPORT	|?WaitForIRQ@OMAPDisplayController@@IAAHKK@Z| ; OMAPDisplayController::WaitForIRQ
	EXPORT	|?FlushRegs@OMAPDisplayController@@IAAHK@Z| ; OMAPDisplayController::FlushRegs
	EXPORT	|?EnableOverlayOptimization@OMAPDisplayController@@QAAXH@Z| ; OMAPDisplayController::EnableOverlayOptimization

  00078			 AREA	 |.pdata|, PDATA
|$T40611| DCD	|$LN40@EnablePipe|
	DCD	0x4001b304
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\dssai\dssai.cpp

  04c90			 AREA	 |.text|, CODE, ARM

  04c90		 |?EnablePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@@Z| PROC ; OMAPDisplayController::EnablePipeline

; 2121 : {

  04c90		 |$LN40@EnablePipe|
  04c90	e1a0c00d	 mov         r12, sp
  04c94	e92d0003	 stmdb       sp!, {r0, r1}
  04c98	e92d5000	 stmdb       sp!, {r12, lr}
  04c9c	e24dd044	 sub         sp, sp, #0x44
  04ca0		 |$M40608|

; 2122 :     BOOL                    bResult = FALSE;

  04ca0	e3a03000	 mov         r3, #0
  04ca4	e58d300c	 str         r3, [sp, #0xC]

; 2123 :     OMAP_DSS_DESTINATION    eDest;
; 2124 :     DWORD                   dwNumPipelinesOn = 0;

  04ca8	e3a03000	 mov         r3, #0
  04cac	e58d3004	 str         r3, [sp, #4]

; 2125 :     DWORD                   dwDestEnable,
; 2126 :                             dwDestGo;
; 2127 : 
; 2128 :     //  Check if pipeline is already enabled
; 2129 :     if( g_rgPipelineMapping[ePipeline].bEnabled == TRUE )

  04cb0	e59d1050	 ldr         r1, [sp, #0x50]
  04cb4	e3a03020	 mov         r3, #0x20
  04cb8	e0020391	 mul         r2, r1, r3
  04cbc	e59f3684	 ldr         r3, [pc, #0x684]
  04cc0	e0833002	 add         r3, r3, r2
  04cc4	e5933000	 ldr         r3, [r3]
  04cc8	e3530001	 cmp         r3, #1
  04ccc	1a000002	 bne         |$LN23@EnablePipe|

; 2130 :         return TRUE;

  04cd0	e3a03001	 mov         r3, #1
  04cd4	e58d3020	 str         r3, [sp, #0x20]
  04cd8	ea000196	 b           |$LN24@EnablePipe|
  04cdc		 |$LN23@EnablePipe|

; 2131 :         
; 2132 :     //  Access the regs
; 2133 :     if( AccessRegs() == FALSE )

  04cdc	e59d004c	 ldr         r0, [sp, #0x4C]
  04ce0	eb000000	 bl          |?AccessRegs@OMAPDisplayController@@IAAHXZ|
  04ce4	e58d0024	 str         r0, [sp, #0x24]
  04ce8	e59d3024	 ldr         r3, [sp, #0x24]
  04cec	e3530000	 cmp         r3, #0
  04cf0	1a000001	 bne         |$LN22@EnablePipe|
  04cf4	ea00018b	 b           |$LN21@EnablePipe|

; 2134 :         goto cleanUp;

  04cf8	ea00018a	 b           |$cleanUp$38495|
  04cfc		 |$LN22@EnablePipe|

; 2135 : 
; 2136 : 
; 2137 :     //  Enable GFX pipeline
; 2138 :     if( ePipeline == OMAP_DSS_PIPELINE_GFX )

  04cfc	e59d3050	 ldr         r3, [sp, #0x50]
  04d00	e3530000	 cmp         r3, #0
  04d04	1a00001c	 bne         |$LN20@EnablePipe|

; 2139 :     {
; 2140 :         //  Enable the interrupt for reporting the GFX under flow error
; 2141 :         SETREG32( &m_pDispRegs->DISPC_IRQENABLE, DISPC_IRQENABLE_GFXFIFOUNDERFLOW);

  04d08	e59d304c	 ldr         r3, [sp, #0x4C]
  04d0c	e2833008	 add         r3, r3, #8
  04d10	e5933000	 ldr         r3, [r3]
  04d14	e283301c	 add         r3, r3, #0x1C
  04d18	e5933000	 ldr         r3, [r3]
  04d1c	e3832040	 orr         r2, r3, #0x40
  04d20	e59d304c	 ldr         r3, [sp, #0x4C]
  04d24	e2833008	 add         r3, r3, #8
  04d28	e5933000	 ldr         r3, [r3]
  04d2c	e283301c	 add         r3, r3, #0x1C
  04d30	e5832000	 str         r2, [r3]

; 2142 : 
; 2143 :         //  Enable the pipeline
; 2144 :         SETREG32( &m_pDispRegs->DISPC_GFX_ATTRIBUTES, DISPC_GFX_ATTR_GFXENABLE );        

  04d34	e59d304c	 ldr         r3, [sp, #0x4C]
  04d38	e2833008	 add         r3, r3, #8
  04d3c	e5933000	 ldr         r3, [r3]
  04d40	e28330a0	 add         r3, r3, #0xA0
  04d44	e5933000	 ldr         r3, [r3]
  04d48	e3832001	 orr         r2, r3, #1
  04d4c	e59d304c	 ldr         r3, [sp, #0x4C]
  04d50	e2833008	 add         r3, r3, #8
  04d54	e5933000	 ldr         r3, [r3]
  04d58	e28330a0	 add         r3, r3, #0xA0
  04d5c	e5832000	 str         r2, [r3]

; 2145 :         g_rgPipelineMapping[ePipeline].bEnabled = TRUE;

  04d60	e59d1050	 ldr         r1, [sp, #0x50]
  04d64	e3a03020	 mov         r3, #0x20
  04d68	e0020391	 mul         r2, r1, r3
  04d6c	e59f35d4	 ldr         r3, [pc, #0x5D4]
  04d70	e0832002	 add         r2, r3, r2
  04d74	e3a03001	 mov         r3, #1
  04d78	e5823000	 str         r3, [r2]
  04d7c		 |$LN20@EnablePipe|

; 2146 :     }    
; 2147 : 
; 2148 :     //  Enable VID1 pipeline
; 2149 :     if( ePipeline == OMAP_DSS_PIPELINE_VIDEO1 )

  04d7c	e59d3050	 ldr         r3, [sp, #0x50]
  04d80	e3530001	 cmp         r3, #1
  04d84	1a00001c	 bne         |$LN19@EnablePipe|

; 2150 :     {
; 2151 :         // Enable the interrupt for reporting the VID1 under flow error
; 2152 :         SETREG32( &m_pDispRegs->DISPC_IRQENABLE, DISPC_IRQENABLE_VID1FIFOUNDERFLOW);

  04d88	e59d304c	 ldr         r3, [sp, #0x4C]
  04d8c	e2833008	 add         r3, r3, #8
  04d90	e5933000	 ldr         r3, [r3]
  04d94	e283301c	 add         r3, r3, #0x1C
  04d98	e5933000	 ldr         r3, [r3]
  04d9c	e3832b01	 orr         r2, r3, #1, 22
  04da0	e59d304c	 ldr         r3, [sp, #0x4C]
  04da4	e2833008	 add         r3, r3, #8
  04da8	e5933000	 ldr         r3, [r3]
  04dac	e283301c	 add         r3, r3, #0x1C
  04db0	e5832000	 str         r2, [r3]

; 2153 : 
; 2154 :         //  Enable the pipeline
; 2155 :         SETREG32( &m_pDispRegs->tDISPC_VID1.ATTRIBUTES, DISPC_VID_ATTR_VIDENABLE );

  04db4	e59d304c	 ldr         r3, [sp, #0x4C]
  04db8	e2833008	 add         r3, r3, #8
  04dbc	e5933000	 ldr         r3, [r3]
  04dc0	e28330cc	 add         r3, r3, #0xCC
  04dc4	e5933000	 ldr         r3, [r3]
  04dc8	e3832001	 orr         r2, r3, #1
  04dcc	e59d304c	 ldr         r3, [sp, #0x4C]
  04dd0	e2833008	 add         r3, r3, #8
  04dd4	e5933000	 ldr         r3, [r3]
  04dd8	e28330cc	 add         r3, r3, #0xCC
  04ddc	e5832000	 str         r2, [r3]

; 2156 :         g_rgPipelineMapping[ePipeline].bEnabled = TRUE;

  04de0	e59d1050	 ldr         r1, [sp, #0x50]
  04de4	e3a03020	 mov         r3, #0x20
  04de8	e0020391	 mul         r2, r1, r3
  04dec	e59f3554	 ldr         r3, [pc, #0x554]
  04df0	e0832002	 add         r2, r3, r2
  04df4	e3a03001	 mov         r3, #1
  04df8	e5823000	 str         r3, [r2]
  04dfc		 |$LN19@EnablePipe|

; 2157 :     }    
; 2158 : 
; 2159 :     //  Enable VID2 pipeline
; 2160 :     if( ePipeline == OMAP_DSS_PIPELINE_VIDEO2 )

  04dfc	e59d3050	 ldr         r3, [sp, #0x50]
  04e00	e3530002	 cmp         r3, #2
  04e04	1a00001c	 bne         |$LN18@EnablePipe|

; 2161 :     {
; 2162 :         // Enable the interrupt for reporting the VID2 under flow error
; 2163 :         SETREG32( &m_pDispRegs->DISPC_IRQENABLE, DISPC_IRQENABLE_VID2FIFOUNDERFLOW);

  04e08	e59d304c	 ldr         r3, [sp, #0x4C]
  04e0c	e2833008	 add         r3, r3, #8
  04e10	e5933000	 ldr         r3, [r3]
  04e14	e283301c	 add         r3, r3, #0x1C
  04e18	e5933000	 ldr         r3, [r3]
  04e1c	e3832a01	 orr         r2, r3, #1, 20
  04e20	e59d304c	 ldr         r3, [sp, #0x4C]
  04e24	e2833008	 add         r3, r3, #8
  04e28	e5933000	 ldr         r3, [r3]
  04e2c	e283301c	 add         r3, r3, #0x1C
  04e30	e5832000	 str         r2, [r3]

; 2164 : 
; 2165 :         //  Enable the pipeline
; 2166 :         SETREG32( &m_pDispRegs->tDISPC_VID2.ATTRIBUTES, DISPC_VID_ATTR_VIDENABLE );

  04e34	e59d304c	 ldr         r3, [sp, #0x4C]
  04e38	e2833008	 add         r3, r3, #8
  04e3c	e5933000	 ldr         r3, [r3]
  04e40	e2833f57	 add         r3, r3, #0x57, 30
  04e44	e5933000	 ldr         r3, [r3]
  04e48	e3832001	 orr         r2, r3, #1
  04e4c	e59d304c	 ldr         r3, [sp, #0x4C]
  04e50	e2833008	 add         r3, r3, #8
  04e54	e5933000	 ldr         r3, [r3]
  04e58	e2833f57	 add         r3, r3, #0x57, 30
  04e5c	e5832000	 str         r2, [r3]

; 2167 :         g_rgPipelineMapping[ePipeline].bEnabled = TRUE;

  04e60	e59d1050	 ldr         r1, [sp, #0x50]
  04e64	e3a03020	 mov         r3, #0x20
  04e68	e0020391	 mul         r2, r1, r3
  04e6c	e59f34d4	 ldr         r3, [pc, #0x4D4]
  04e70	e0832002	 add         r2, r3, r2
  04e74	e3a03001	 mov         r3, #1
  04e78	e5823000	 str         r3, [r2]
  04e7c		 |$LN18@EnablePipe|

; 2168 :     }    
; 2169 : 
; 2170 : 
; 2171 :     //  Count the number of pipelines that will be on
; 2172 :     dwNumPipelinesOn += (g_rgPipelineMapping[OMAP_DSS_PIPELINE_GFX].bEnabled) ? 1 : 0;

  04e7c	e59f34c4	 ldr         r3, [pc, #0x4C4]
  04e80	e5933000	 ldr         r3, [r3]
  04e84	e3530000	 cmp         r3, #0
  04e88	0a000002	 beq         |$LN26@EnablePipe|
  04e8c	e3a03001	 mov         r3, #1
  04e90	e58d3028	 str         r3, [sp, #0x28]
  04e94	ea000001	 b           |$LN27@EnablePipe|
  04e98		 |$LN26@EnablePipe|
  04e98	e3a03000	 mov         r3, #0
  04e9c	e58d3028	 str         r3, [sp, #0x28]
  04ea0		 |$LN27@EnablePipe|
  04ea0	e59d2004	 ldr         r2, [sp, #4]
  04ea4	e59d3028	 ldr         r3, [sp, #0x28]
  04ea8	e0823003	 add         r3, r2, r3
  04eac	e58d3004	 str         r3, [sp, #4]

; 2173 :     dwNumPipelinesOn += (g_rgPipelineMapping[OMAP_DSS_PIPELINE_VIDEO1].bEnabled) ? 1 : 0;

  04eb0	e59f3490	 ldr         r3, [pc, #0x490]
  04eb4	e5933020	 ldr         r3, [r3, #0x20]
  04eb8	e3530000	 cmp         r3, #0
  04ebc	0a000002	 beq         |$LN28@EnablePipe|
  04ec0	e3a03001	 mov         r3, #1
  04ec4	e58d302c	 str         r3, [sp, #0x2C]
  04ec8	ea000001	 b           |$LN29@EnablePipe|
  04ecc		 |$LN28@EnablePipe|
  04ecc	e3a03000	 mov         r3, #0
  04ed0	e58d302c	 str         r3, [sp, #0x2C]
  04ed4		 |$LN29@EnablePipe|
  04ed4	e59d2004	 ldr         r2, [sp, #4]
  04ed8	e59d302c	 ldr         r3, [sp, #0x2C]
  04edc	e0823003	 add         r3, r2, r3
  04ee0	e58d3004	 str         r3, [sp, #4]

; 2174 :     dwNumPipelinesOn += (g_rgPipelineMapping[OMAP_DSS_PIPELINE_VIDEO2].bEnabled) ? 1 : 0;

  04ee4	e59f345c	 ldr         r3, [pc, #0x45C]
  04ee8	e5933040	 ldr         r3, [r3, #0x40]
  04eec	e3530000	 cmp         r3, #0
  04ef0	0a000002	 beq         |$LN30@EnablePipe|
  04ef4	e3a03001	 mov         r3, #1
  04ef8	e58d3030	 str         r3, [sp, #0x30]
  04efc	ea000001	 b           |$LN31@EnablePipe|
  04f00		 |$LN30@EnablePipe|
  04f00	e3a03000	 mov         r3, #0
  04f04	e58d3030	 str         r3, [sp, #0x30]
  04f08		 |$LN31@EnablePipe|
  04f08	e59d2004	 ldr         r2, [sp, #4]
  04f0c	e59d3030	 ldr         r3, [sp, #0x30]
  04f10	e0823003	 add         r3, r2, r3
  04f14	e58d3004	 str         r3, [sp, #4]

; 2175 : 
; 2176 : 
; 2177 :     //  If there is only one pipeline enabled, use FIFO merge to make 1 large FIFO
; 2178 :     //  for better power management
; 2179 :     if( dwNumPipelinesOn == 1 )

  04f18	e59d3004	 ldr         r3, [sp, #4]
  04f1c	e3530001	 cmp         r3, #1
  04f20	1a00002c	 bne         |$LN17@EnablePipe|

; 2180 :     {
; 2181 :         //  Enable FIFO merge
; 2182 :         SETREG32( &m_pDispRegs->DISPC_CONFIG, DISPC_CONFIG_FIFOMERGE );

  04f24	e59d304c	 ldr         r3, [sp, #0x4C]
  04f28	e2833008	 add         r3, r3, #8
  04f2c	e5933000	 ldr         r3, [r3]
  04f30	e2833044	 add         r3, r3, #0x44
  04f34	e5933000	 ldr         r3, [r3]
  04f38	e3832901	 orr         r2, r3, #1, 18
  04f3c	e59d304c	 ldr         r3, [sp, #0x4C]
  04f40	e2833008	 add         r3, r3, #8
  04f44	e5933000	 ldr         r3, [r3]
  04f48	e2833044	 add         r3, r3, #0x44
  04f4c	e5832000	 str         r2, [r3]

; 2183 : 
; 2184 :         //  Adjust the FIFO high and low thresholds for all the enabled pipelines
; 2185 :         if( g_rgPipelineMapping[OMAP_DSS_PIPELINE_GFX].bEnabled )

  04f50	e59f33f0	 ldr         r3, [pc, #0x3F0]
  04f54	e5933000	 ldr         r3, [r3]
  04f58	e3530000	 cmp         r3, #0
  04f5c	0a000006	 beq         |$LN16@EnablePipe|

; 2186 :         {
; 2187 :             OUTREG32( &m_pDispRegs->DISPC_GFX_FIFO_THRESHOLD,
; 2188 :                         DISPC_GFX_FIFO_THRESHOLD_LOW(FIFO_LOWTHRESHOLD_MERGED(FIFO_BURSTSIZE_16x32)) |
; 2189 :                         DISPC_GFX_FIFO_THRESHOLD_HIGH(FIFO_HIGHTHRESHOLD_MERGED)
; 2190 :                         );

  04f60	e59d304c	 ldr         r3, [sp, #0x4C]
  04f64	e2833008	 add         r3, r3, #8
  04f68	e5933000	 ldr         r3, [r3]
  04f6c	e28320a4	 add         r2, r3, #0xA4
  04f70	e3e0333d	 mvn         r3, #0x3D, 6
  04f74	e2233cfa	 eor         r3, r3, #0xFA, 24
  04f78	e5823000	 str         r3, [r2]
  04f7c		 |$LN16@EnablePipe|

; 2191 :         }
; 2192 : 
; 2193 :         if( g_rgPipelineMapping[OMAP_DSS_PIPELINE_VIDEO1].bEnabled )

  04f7c	e59f33c4	 ldr         r3, [pc, #0x3C4]
  04f80	e5933020	 ldr         r3, [r3, #0x20]
  04f84	e3530000	 cmp         r3, #0
  04f88	0a000006	 beq         |$LN15@EnablePipe|

; 2194 :         {
; 2195 :             OUTREG32( &m_pDispRegs->tDISPC_VID1.FIFO_THRESHOLD,
; 2196 :                         DISPC_VID_FIFO_THRESHOLD_LOW(FIFO_LOWTHRESHOLD_MERGED(FIFO_BURSTSIZE_16x32)) |
; 2197 :                         DISPC_VID_FIFO_THRESHOLD_HIGH(FIFO_HIGHTHRESHOLD_MERGED)
; 2198 :                         );

  04f8c	e59d304c	 ldr         r3, [sp, #0x4C]
  04f90	e2833008	 add         r3, r3, #8
  04f94	e5933000	 ldr         r3, [r3]
  04f98	e28320d0	 add         r2, r3, #0xD0
  04f9c	e3e0333d	 mvn         r3, #0x3D, 6
  04fa0	e2233cfa	 eor         r3, r3, #0xFA, 24
  04fa4	e5823000	 str         r3, [r2]
  04fa8		 |$LN15@EnablePipe|

; 2199 :         }
; 2200 : 
; 2201 :         if( g_rgPipelineMapping[OMAP_DSS_PIPELINE_VIDEO2].bEnabled )

  04fa8	e59f3398	 ldr         r3, [pc, #0x398]
  04fac	e5933040	 ldr         r3, [r3, #0x40]
  04fb0	e3530000	 cmp         r3, #0
  04fb4	0a000006	 beq         |$LN14@EnablePipe|

; 2202 :         {
; 2203 :             OUTREG32( &m_pDispRegs->tDISPC_VID2.FIFO_THRESHOLD,
; 2204 :                         DISPC_VID_FIFO_THRESHOLD_LOW(FIFO_LOWTHRESHOLD_MERGED(FIFO_BURSTSIZE_16x32)) |
; 2205 :                         DISPC_VID_FIFO_THRESHOLD_HIGH(FIFO_HIGHTHRESHOLD_MERGED)
; 2206 :                         );

  04fb8	e59d304c	 ldr         r3, [sp, #0x4C]
  04fbc	e2833008	 add         r3, r3, #8
  04fc0	e5933000	 ldr         r3, [r3]
  04fc4	e2832e16	 add         r2, r3, #0x16, 28
  04fc8	e3e0333d	 mvn         r3, #0x3D, 6
  04fcc	e2233cfa	 eor         r3, r3, #0xFA, 24
  04fd0	e5823000	 str         r3, [r2]
  04fd4		 |$LN14@EnablePipe|

; 2207 :         }
; 2208 :     }
; 2209 :     else

  04fd4	ea00002c	 b           |$LN13@EnablePipe|
  04fd8		 |$LN17@EnablePipe|

; 2210 :     {
; 2211 :         //  Disable FIFO merge
; 2212 :         CLRREG32( &m_pDispRegs->DISPC_CONFIG, DISPC_CONFIG_FIFOMERGE );

  04fd8	e59d304c	 ldr         r3, [sp, #0x4C]
  04fdc	e2833008	 add         r3, r3, #8
  04fe0	e5933000	 ldr         r3, [r3]
  04fe4	e2833044	 add         r3, r3, #0x44
  04fe8	e5932000	 ldr         r2, [r3]
  04fec	e3e03901	 mvn         r3, #1, 18
  04ff0	e0022003	 and         r2, r2, r3
  04ff4	e59d304c	 ldr         r3, [sp, #0x4C]
  04ff8	e2833008	 add         r3, r3, #8
  04ffc	e5933000	 ldr         r3, [r3]
  05000	e2833044	 add         r3, r3, #0x44
  05004	e5832000	 str         r2, [r3]

; 2213 : 
; 2214 :         //  Adjust the FIFO high and low thresholds for all the enabled pipelines
; 2215 :         if( g_rgPipelineMapping[OMAP_DSS_PIPELINE_GFX].bEnabled )

  05008	e59f3338	 ldr         r3, [pc, #0x338]
  0500c	e5933000	 ldr         r3, [r3]
  05010	e3530000	 cmp         r3, #0
  05014	0a000006	 beq         |$LN12@EnablePipe|

; 2216 :         {
; 2217 :             OUTREG32( &m_pDispRegs->DISPC_GFX_FIFO_THRESHOLD,
; 2218 :                         DISPC_GFX_FIFO_THRESHOLD_LOW(FIFO_LOWTHRESHOLD_NORMAL(FIFO_BURSTSIZE_16x32)) |
; 2219 :                         DISPC_GFX_FIFO_THRESHOLD_HIGH(FIFO_HIGHTHRESHOLD_NORMAL)
; 2220 :                         );

  05018	e59d304c	 ldr         r3, [sp, #0x4C]
  0501c	e2833008	 add         r3, r3, #8
  05020	e5933000	 ldr         r3, [r3]
  05024	e28320a4	 add         r2, r3, #0xA4
  05028	e3e0333f	 mvn         r3, #0x3F, 6
  0502c	e2233cfe	 eor         r3, r3, #0xFE, 24
  05030	e5823000	 str         r3, [r2]
  05034		 |$LN12@EnablePipe|

; 2221 :         }
; 2222 : 
; 2223 :         if( g_rgPipelineMapping[OMAP_DSS_PIPELINE_VIDEO1].bEnabled )

  05034	e59f330c	 ldr         r3, [pc, #0x30C]
  05038	e5933020	 ldr         r3, [r3, #0x20]
  0503c	e3530000	 cmp         r3, #0
  05040	0a000006	 beq         |$LN11@EnablePipe|

; 2224 :         {
; 2225 :             OUTREG32( &m_pDispRegs->tDISPC_VID1.FIFO_THRESHOLD,
; 2226 :                         DISPC_VID_FIFO_THRESHOLD_LOW(FIFO_LOWTHRESHOLD_NORMAL(FIFO_BURSTSIZE_16x32)) |
; 2227 :                         DISPC_VID_FIFO_THRESHOLD_HIGH(FIFO_HIGHTHRESHOLD_NORMAL)
; 2228 :                         );

  05044	e59d304c	 ldr         r3, [sp, #0x4C]
  05048	e2833008	 add         r3, r3, #8
  0504c	e5933000	 ldr         r3, [r3]
  05050	e28320d0	 add         r2, r3, #0xD0
  05054	e3e0333f	 mvn         r3, #0x3F, 6
  05058	e2233cfe	 eor         r3, r3, #0xFE, 24
  0505c	e5823000	 str         r3, [r2]
  05060		 |$LN11@EnablePipe|

; 2229 :         }
; 2230 : 
; 2231 :         if( g_rgPipelineMapping[OMAP_DSS_PIPELINE_VIDEO2].bEnabled )

  05060	e59f32e0	 ldr         r3, [pc, #0x2E0]
  05064	e5933040	 ldr         r3, [r3, #0x40]
  05068	e3530000	 cmp         r3, #0
  0506c	0a000006	 beq         |$LN10@EnablePipe|

; 2232 :         {
; 2233 :             OUTREG32( &m_pDispRegs->tDISPC_VID2.FIFO_THRESHOLD,
; 2234 :                         DISPC_VID_FIFO_THRESHOLD_LOW(FIFO_LOWTHRESHOLD_NORMAL(FIFO_BURSTSIZE_16x32)) |
; 2235 :                         DISPC_VID_FIFO_THRESHOLD_HIGH(FIFO_HIGHTHRESHOLD_NORMAL)
; 2236 :                         );

  05070	e59d304c	 ldr         r3, [sp, #0x4C]
  05074	e2833008	 add         r3, r3, #8
  05078	e5933000	 ldr         r3, [r3]
  0507c	e2832e16	 add         r2, r3, #0x16, 28
  05080	e3e0333f	 mvn         r3, #0x3F, 6
  05084	e2233cfe	 eor         r3, r3, #0xFE, 24
  05088	e5823000	 str         r3, [r2]
  0508c		 |$LN10@EnablePipe|
  0508c		 |$LN13@EnablePipe|

; 2237 :         }
; 2238 :     }
; 2239 : 
; 2240 : 
; 2241 :     //  Get the destination for the pipeline
; 2242 :     eDest = g_rgPipelineMapping[ePipeline].eDestination;

  0508c	e59d1050	 ldr         r1, [sp, #0x50]
  05090	e3a03020	 mov         r3, #0x20
  05094	e0020391	 mul         r2, r1, r3
  05098	e59f32a8	 ldr         r3, [pc, #0x2A8]
  0509c	e0833002	 add         r3, r3, r2
  050a0	e2833004	 add         r3, r3, #4
  050a4	e5933000	 ldr         r3, [r3]
  050a8	e58d3008	 str         r3, [sp, #8]

; 2243 :     switch( eDest )

  050ac	e59d3008	 ldr         r3, [sp, #8]
  050b0	e58d3034	 str         r3, [sp, #0x34]
  050b4	e59d3034	 ldr         r3, [sp, #0x34]
  050b8	e3530000	 cmp         r3, #0
  050bc	0a000003	 beq         |$LN7@EnablePipe|
  050c0	e59d3034	 ldr         r3, [sp, #0x34]
  050c4	e3530001	 cmp         r3, #1
  050c8	0a000005	 beq         |$LN6@EnablePipe|
  050cc	ea000014	 b           |$LN5@EnablePipe|
  050d0		 |$LN7@EnablePipe|

; 2244 :     {
; 2245 :         case OMAP_DSS_DESTINATION_LCD:
; 2246 :             //  Set enable and go bits for LCD
; 2247 :             dwDestEnable = DISPC_CONTROL_LCDENABLE;

  050d0	e3a03001	 mov         r3, #1
  050d4	e58d3014	 str         r3, [sp, #0x14]

; 2248 :             dwDestGo     = DISPC_CONTROL_GOLCD;

  050d8	e3a03020	 mov         r3, #0x20
  050dc	e58d3000	 str         r3, [sp]

; 2249 :             break;

  050e0	ea00001e	 b           |$LN8@EnablePipe|
  050e4		 |$LN6@EnablePipe|

; 2250 : 
; 2251 :         case OMAP_DSS_DESTINATION_TVOUT:
; 2252 :             //  Set enable and go bits for TV Out
; 2253 :             dwDestEnable = (m_bTVEnable) ? DISPC_CONTROL_DIGITALENABLE : 0;

  050e4	e59d304c	 ldr         r3, [sp, #0x4C]
  050e8	e2833b01	 add         r3, r3, #1, 22
  050ec	e28330b4	 add         r3, r3, #0xB4
  050f0	e5933000	 ldr         r3, [r3]
  050f4	e3530000	 cmp         r3, #0
  050f8	0a000002	 beq         |$LN32@EnablePipe|
  050fc	e3a03002	 mov         r3, #2
  05100	e58d3038	 str         r3, [sp, #0x38]
  05104	ea000001	 b           |$LN33@EnablePipe|
  05108		 |$LN32@EnablePipe|
  05108	e3a03000	 mov         r3, #0
  0510c	e58d3038	 str         r3, [sp, #0x38]
  05110		 |$LN33@EnablePipe|
  05110	e59d3038	 ldr         r3, [sp, #0x38]
  05114	e58d3014	 str         r3, [sp, #0x14]

; 2254 :             dwDestGo     = DISPC_CONTROL_GODIGITAL;

  05118	e3a03040	 mov         r3, #0x40
  0511c	e58d3000	 str         r3, [sp]

; 2255 :             break;

  05120	ea00000e	 b           |$LN8@EnablePipe|
  05124		 |$LN5@EnablePipe|

; 2256 : 
; 2257 :         default:
; 2258 :             ASSERT(0);

  05124	ea000002	 b           |$LN34@EnablePipe|
  05128	e3a03001	 mov         r3, #1
  0512c	e58d303c	 str         r3, [sp, #0x3C]
  05130	ea000008	 b           |$LN35@EnablePipe|
  05134		 |$LN34@EnablePipe|
  05134	e3a03b02	 mov         r3, #2, 22
  05138	e38330d2	 orr         r3, r3, #0xD2
  0513c	e59f2214	 ldr         r2, [pc, #0x214]
  05140	e59f120c	 ldr         r1, [pc, #0x20C]
  05144	e59f0204	 ldr         r0, [pc, #0x204]
  05148	eb000000	 bl          NKDbgPrintfW
  0514c	e6000010	 __debugbreak_ce
  05150	e3a03000	 mov         r3, #0
  05154	e58d303c	 str         r3, [sp, #0x3C]
  05158		 |$LN35@EnablePipe|

; 2259 :             goto cleanUp;

  05158	ea000072	 b           |$LN4@EnablePipe|
  0515c	ea000071	 b           |$cleanUp$38495|
  05160		 |$LN8@EnablePipe|

; 2260 :     }
; 2261 :         
; 2262 :     //  Try enabling overlay optimization
; 2263 :     EnableOverlayOptimization( TRUE );

  05160	e3a01001	 mov         r1, #1
  05164	e59d004c	 ldr         r0, [sp, #0x4C]
  05168	eb000000	 bl          |?EnableOverlayOptimization@OMAPDisplayController@@QAAXH@Z|

; 2264 : 
; 2265 :     //  Flush the shadow registers
; 2266 :     FlushRegs( dwDestGo );

  0516c	e59d1000	 ldr         r1, [sp]
  05170	e59d004c	 ldr         r0, [sp, #0x4C]
  05174	eb000000	 bl          |?FlushRegs@OMAPDisplayController@@IAAHK@Z|

; 2267 : 
; 2268 : 
; 2269 :     //  If the destination for pipeline is not enabled, enable it
; 2270 :     if( g_dwDestinationRefCnt[eDest]++ == 0 )

  05178	e59d1008	 ldr         r1, [sp, #8]
  0517c	e3a03004	 mov         r3, #4
  05180	e0020391	 mul         r2, r1, r3
  05184	e59f31c0	 ldr         r3, [pc, #0x1C0]
  05188	e0833002	 add         r3, r3, r2
  0518c	e5933000	 ldr         r3, [r3]
  05190	e3530000	 cmp         r3, #0
  05194	e59d1008	 ldr         r1, [sp, #8]
  05198	e3a03004	 mov         r3, #4
  0519c	e0020391	 mul         r2, r1, r3
  051a0	e59f31a4	 ldr         r3, [pc, #0x1A4]
  051a4	e0833002	 add         r3, r3, r2
  051a8	e5933000	 ldr         r3, [r3]
  051ac	e2830001	 add         r0, r3, #1
  051b0	e59d1008	 ldr         r1, [sp, #8]
  051b4	e3a03004	 mov         r3, #4
  051b8	e0020391	 mul         r2, r1, r3
  051bc	e59f3188	 ldr         r3, [pc, #0x188]
  051c0	e0833002	 add         r3, r3, r2
  051c4	e5830000	 str         r0, [r3]
  051c8	1a000042	 bne         |$LN3@EnablePipe|

; 2271 :     {
; 2272 :         if (eDest == OMAP_DSS_DESTINATION_LCD)

  051cc	e59d3008	 ldr         r3, [sp, #8]
  051d0	e3530000	 cmp         r3, #0
  051d4	1a00000c	 bne         |$LN2@EnablePipe|

; 2273 :         {
; 2274 :             SETREG32( &m_pDispRegs->DISPC_CONTROL, dwDestEnable );

  051d8	e59d304c	 ldr         r3, [sp, #0x4C]
  051dc	e2833008	 add         r3, r3, #8
  051e0	e5933000	 ldr         r3, [r3]
  051e4	e2833040	 add         r3, r3, #0x40
  051e8	e5932000	 ldr         r2, [r3]
  051ec	e59d3014	 ldr         r3, [sp, #0x14]
  051f0	e1822003	 orr         r2, r2, r3
  051f4	e59d304c	 ldr         r3, [sp, #0x4C]
  051f8	e2833008	 add         r3, r3, #8
  051fc	e5933000	 ldr         r3, [r3]
  05200	e2833040	 add         r3, r3, #0x40
  05204	e5832000	 str         r2, [r3]

; 2275 :         }
; 2276 :         else

  05208	ea000032	 b           |$LN1@EnablePipe|
  0520c		 |$LN2@EnablePipe|

; 2277 :         {
; 2278 :             // For TVOUT enable, the SYNCLOST_DIGITAL interrupt
; 2279 :             // has to be cleared at the 1st EVSYNC after DIGITALENABLE
; 2280 : 
; 2281 :             DWORD irqStatus, irqEnable;
; 2282 : 
; 2283 :             irqEnable = INREG32( &m_pDispRegs->DISPC_IRQENABLE );

  0520c	e59d304c	 ldr         r3, [sp, #0x4C]
  05210	e2833008	 add         r3, r3, #8
  05214	e5933000	 ldr         r3, [r3]
  05218	e283301c	 add         r3, r3, #0x1C
  0521c	e5933000	 ldr         r3, [r3]
  05220	e58d3018	 str         r3, [sp, #0x18]

; 2284 :             // Disable all the DSS interrupts
; 2285 :             OUTREG32( &m_pDispRegs->DISPC_IRQENABLE , 0 );

  05224	e59d304c	 ldr         r3, [sp, #0x4C]
  05228	e2833008	 add         r3, r3, #8
  0522c	e5933000	 ldr         r3, [r3]
  05230	e283201c	 add         r2, r3, #0x1C
  05234	e3a03000	 mov         r3, #0
  05238	e5823000	 str         r3, [r2]

; 2286 :             // Clear the Existing IRQ status
; 2287 :             OUTREG32( &m_pDispRegs->DISPC_IRQSTATUS, 0xFFFFFFFF );

  0523c	e59d304c	 ldr         r3, [sp, #0x4C]
  05240	e2833008	 add         r3, r3, #8
  05244	e5933000	 ldr         r3, [r3]
  05248	e2832018	 add         r2, r3, #0x18
  0524c	e3e03000	 mvn         r3, #0
  05250	e5823000	 str         r3, [r2]

; 2288 : 
; 2289 :             // Enable the DIGITAL Path
; 2290 :             SETREG32( &m_pDispRegs->DISPC_CONTROL, DISPC_CONTROL_DIGITALENABLE );

  05254	e59d304c	 ldr         r3, [sp, #0x4C]
  05258	e2833008	 add         r3, r3, #8
  0525c	e5933000	 ldr         r3, [r3]
  05260	e2833040	 add         r3, r3, #0x40
  05264	e5933000	 ldr         r3, [r3]
  05268	e3832002	 orr         r2, r3, #2
  0526c	e59d304c	 ldr         r3, [sp, #0x4C]
  05270	e2833008	 add         r3, r3, #8
  05274	e5933000	 ldr         r3, [r3]
  05278	e2833040	 add         r3, r3, #0x40
  0527c	e5832000	 str         r2, [r3]

; 2291 : 
; 2292 :             // Wait for E-VSYNC
; 2293 :             WaitForIRQ( DISPC_IRQSTATUS_EVSYNC_EVEN|DISPC_IRQSTATUS_EVSYNC_ODD );

  05280	e3a0201e	 mov         r2, #0x1E
  05284	e3a0100c	 mov         r1, #0xC
  05288	e59d004c	 ldr         r0, [sp, #0x4C]
  0528c	eb000000	 bl          |?WaitForIRQ@OMAPDisplayController@@IAAHKK@Z|

; 2294 :             
; 2295 :             // Clear the pending interrupt status
; 2296 :             irqStatus = INREG32( &m_pDispRegs->DISPC_IRQSTATUS );

  05290	e59d304c	 ldr         r3, [sp, #0x4C]
  05294	e2833008	 add         r3, r3, #8
  05298	e5933000	 ldr         r3, [r3]
  0529c	e2833018	 add         r3, r3, #0x18
  052a0	e5933000	 ldr         r3, [r3]
  052a4	e58d301c	 str         r3, [sp, #0x1C]

; 2297 :             OUTREG32( &m_pDispRegs->DISPC_IRQSTATUS,  irqStatus );

  052a8	e59d304c	 ldr         r3, [sp, #0x4C]
  052ac	e2833008	 add         r3, r3, #8
  052b0	e5933000	 ldr         r3, [r3]
  052b4	e2832018	 add         r2, r3, #0x18
  052b8	e59d301c	 ldr         r3, [sp, #0x1C]
  052bc	e5823000	 str         r3, [r2]

; 2298 : 
; 2299 :             // Re-enable the DSS interrupts
; 2300 :             OUTREG32( &m_pDispRegs->DISPC_IRQENABLE , irqEnable );

  052c0	e59d304c	 ldr         r3, [sp, #0x4C]
  052c4	e2833008	 add         r3, r3, #8
  052c8	e5933000	 ldr         r3, [r3]
  052cc	e283201c	 add         r2, r3, #0x1C
  052d0	e59d3018	 ldr         r3, [sp, #0x18]
  052d4	e5823000	 str         r3, [r2]
  052d8		 |$LN1@EnablePipe|
  052d8		 |$LN3@EnablePipe|

; 2301 :         }
; 2302 :     }
; 2303 : 
; 2304 :     // Configure the LPR mode based on active Pipeline(s)
; 2305 :     BOOL bEnable = ((dwNumPipelinesOn == 1) && 
; 2306 :                    (g_rgPipelineMapping[OMAP_DSS_PIPELINE_GFX].bEnabled)) ?
; 2307 :                    TRUE : FALSE; 

  052d8	e59d3004	 ldr         r3, [sp, #4]
  052dc	e3530001	 cmp         r3, #1
  052e0	1a000006	 bne         |$LN36@EnablePipe|
  052e4	e59f305c	 ldr         r3, [pc, #0x5C]
  052e8	e5933000	 ldr         r3, [r3]
  052ec	e3530000	 cmp         r3, #0
  052f0	0a000002	 beq         |$LN36@EnablePipe|
  052f4	e3a03001	 mov         r3, #1
  052f8	e58d3040	 str         r3, [sp, #0x40]
  052fc	ea000001	 b           |$LN37@EnablePipe|
  05300		 |$LN36@EnablePipe|
  05300	e3a03000	 mov         r3, #0
  05304	e58d3040	 str         r3, [sp, #0x40]
  05308		 |$LN37@EnablePipe|
  05308	e59d3040	 ldr         r3, [sp, #0x40]
  0530c	e58d3010	 str         r3, [sp, #0x10]

; 2308 :     EnableLPR( bEnable );

  05310	e3a02000	 mov         r2, #0
  05314	e59d1010	 ldr         r1, [sp, #0x10]
  05318	e59d004c	 ldr         r0, [sp, #0x4C]
  0531c	eb000000	 bl          |?EnableLPR@OMAPDisplayController@@QAAXHH@Z|

; 2309 : 
; 2310 :     //  Result
; 2311 :     bResult = TRUE;         

  05320	e3a03001	 mov         r3, #1
  05324	e58d300c	 str         r3, [sp, #0xC]
  05328		 |$LN4@EnablePipe|
  05328		 |$LN21@EnablePipe|
  05328		 |$cleanUp$38495|

; 2312 : 
; 2313 : cleanUp:    
; 2314 :     //  Release regs
; 2315 :     ReleaseRegs();

  05328	e59d004c	 ldr         r0, [sp, #0x4C]
  0532c	eb000000	 bl          |?ReleaseRegs@OMAPDisplayController@@IAAHXZ|

; 2316 :     
; 2317 :     //  Return result
; 2318 :     return bResult;

  05330	e59d300c	 ldr         r3, [sp, #0xC]
  05334	e58d3020	 str         r3, [sp, #0x20]
  05338		 |$LN24@EnablePipe|

; 2319 : }

  05338	e59d0020	 ldr         r0, [sp, #0x20]
  0533c	e28dd044	 add         sp, sp, #0x44
  05340	e89d6000	 ldmia       sp, {sp, lr}
  05344	e12fff1e	 bx          lr
  05348		 |$LN41@EnablePipe|
  05348		 |$LN42@EnablePipe|
  05348	00000000	 DCD         |?g_rgPipelineMapping@@3PAUOMAPPipelineConfig@@A|
  0534c		 |$LN43@EnablePipe|
  0534c	00000000	 DCD         |?g_dwDestinationRefCnt@@3PAKA|
  05350		 |$LN44@EnablePipe|
  05350	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  05354		 |$LN45@EnablePipe|
  05354	00000000	 DCD         |??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@|
  05358		 |$LN46@EnablePipe|
  05358	00000000	 DCD         |??_C@_1KC@HIABDGPO@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  0535c		 |$M40609|

			 ENDP  ; |?EnablePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@@Z|, OMAPDisplayController::EnablePipeline

	EXPORT	|?WaitForFlushDone@OMAPDisplayController@@IAAHK@Z| ; OMAPDisplayController::WaitForFlushDone
	EXPORT	|?DisablePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@@Z| ; OMAPDisplayController::DisablePipeline

  00080			 AREA	 |.pdata|, PDATA
|$T40633| DCD	|$LN39@DisablePip|
	DCD	0x4001d404
; Function compile flags: /Odtp

  0535c			 AREA	 |.text|, CODE, ARM

  0535c		 |?DisablePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@@Z| PROC ; OMAPDisplayController::DisablePipeline

; 2326 : {

  0535c		 |$LN39@DisablePip|
  0535c	e1a0c00d	 mov         r12, sp
  05360	e92d0003	 stmdb       sp!, {r0, r1}
  05364	e92d5000	 stmdb       sp!, {r12, lr}
  05368	e24dd03c	 sub         sp, sp, #0x3C
  0536c		 |$M40630|

; 2327 :     BOOL                    bResult = FALSE;    

  0536c	e3a03000	 mov         r3, #0
  05370	e58d3014	 str         r3, [sp, #0x14]

; 2328 :     OMAP_DSS_DESTINATION    eDest;
; 2329 :     DWORD                   dwNumPipelinesOn = 0;

  05374	e3a03000	 mov         r3, #0
  05378	e58d3004	 str         r3, [sp, #4]

; 2330 :     DWORD                   dwIntrStatus;
; 2331 :     DWORD                   dwDestEnable,
; 2332 :                             dwDestGo;
; 2333 :     BOOL                    bLPRState = FALSE;    

  0537c	e3a03000	 mov         r3, #0
  05380	e58d3010	 str         r3, [sp, #0x10]

; 2334 : 
; 2335 :     //  Check if pipeline is already disabled
; 2336 :     if( g_rgPipelineMapping[ePipeline].bEnabled == FALSE )

  05384	e59d1048	 ldr         r1, [sp, #0x48]
  05388	e3a03020	 mov         r3, #0x20
  0538c	e0020391	 mul         r2, r1, r3
  05390	e59f3710	 ldr         r3, [pc, #0x710]
  05394	e0833002	 add         r3, r3, r2
  05398	e5933000	 ldr         r3, [r3]
  0539c	e3530000	 cmp         r3, #0
  053a0	1a000002	 bne         |$LN24@DisablePip|

; 2337 :         return TRUE;

  053a4	e3a03001	 mov         r3, #1
  053a8	e58d301c	 str         r3, [sp, #0x1C]
  053ac	ea0001b5	 b           |$LN25@DisablePip|
  053b0		 |$LN24@DisablePip|

; 2338 :         
; 2339 :     //  Access the regs
; 2340 :     if( AccessRegs() == FALSE )

  053b0	e59d0044	 ldr         r0, [sp, #0x44]
  053b4	eb000000	 bl          |?AccessRegs@OMAPDisplayController@@IAAHXZ|
  053b8	e58d0020	 str         r0, [sp, #0x20]
  053bc	e59d3020	 ldr         r3, [sp, #0x20]
  053c0	e3530000	 cmp         r3, #0
  053c4	1a000001	 bne         |$LN23@DisablePip|
  053c8	ea0001aa	 b           |$LN22@DisablePip|

; 2341 :         goto cleanUp;

  053cc	ea0001a9	 b           |$cleanUp$38589|
  053d0		 |$LN23@DisablePip|

; 2342 : 
; 2343 :      // Clear GO_XXX bit if it current enabled. The attributes register for 
; 2344 :     // the pipeline is currently modified and so it is required to turn off
; 2345 :     // the GOLCD/GODIGITAL bit during the configuration.
; 2346 :     if ((INREG32( &m_pDispRegs->DISPC_CONTROL) & DISPC_CONTROL_GOLCD ) != 0)

  053d0	e59d3044	 ldr         r3, [sp, #0x44]
  053d4	e2833008	 add         r3, r3, #8
  053d8	e5933000	 ldr         r3, [r3]
  053dc	e2833040	 add         r3, r3, #0x40
  053e0	e5933000	 ldr         r3, [r3]
  053e4	e3130020	 tst         r3, #0x20
  053e8	0a00000b	 beq         |$LN21@DisablePip|

; 2347 :         CLRREG32( &m_pDispRegs->DISPC_CONTROL, DISPC_CONTROL_GOLCD );

  053ec	e59d3044	 ldr         r3, [sp, #0x44]
  053f0	e2833008	 add         r3, r3, #8
  053f4	e5933000	 ldr         r3, [r3]
  053f8	e2833040	 add         r3, r3, #0x40
  053fc	e5932000	 ldr         r2, [r3]
  05400	e3e03020	 mvn         r3, #0x20
  05404	e0022003	 and         r2, r2, r3
  05408	e59d3044	 ldr         r3, [sp, #0x44]
  0540c	e2833008	 add         r3, r3, #8
  05410	e5933000	 ldr         r3, [r3]
  05414	e2833040	 add         r3, r3, #0x40
  05418	e5832000	 str         r2, [r3]
  0541c		 |$LN21@DisablePip|

; 2348 : 
; 2349 :     if ((INREG32( &m_pDispRegs->DISPC_CONTROL) & DISPC_CONTROL_GODIGITAL ) != 0)

  0541c	e59d3044	 ldr         r3, [sp, #0x44]
  05420	e2833008	 add         r3, r3, #8
  05424	e5933000	 ldr         r3, [r3]
  05428	e2833040	 add         r3, r3, #0x40
  0542c	e5933000	 ldr         r3, [r3]
  05430	e3130040	 tst         r3, #0x40
  05434	0a00000b	 beq         |$LN20@DisablePip|

; 2350 :         CLRREG32( &m_pDispRegs->DISPC_CONTROL, DISPC_CONTROL_GODIGITAL );

  05438	e59d3044	 ldr         r3, [sp, #0x44]
  0543c	e2833008	 add         r3, r3, #8
  05440	e5933000	 ldr         r3, [r3]
  05444	e2833040	 add         r3, r3, #0x40
  05448	e5932000	 ldr         r2, [r3]
  0544c	e3e03040	 mvn         r3, #0x40
  05450	e0022003	 and         r2, r2, r3
  05454	e59d3044	 ldr         r3, [sp, #0x44]
  05458	e2833008	 add         r3, r3, #8
  0545c	e5933000	 ldr         r3, [r3]
  05460	e2833040	 add         r3, r3, #0x40
  05464	e5832000	 str         r2, [r3]
  05468		 |$LN20@DisablePip|

; 2351 : 
; 2352 :     //  Disable GFX pipeline
; 2353 :     if( ePipeline == OMAP_DSS_PIPELINE_GFX )

  05468	e59d3048	 ldr         r3, [sp, #0x48]
  0546c	e3530000	 cmp         r3, #0
  05470	1a000026	 bne         |$LN19@DisablePip|

; 2354 :     {
; 2355 :         //  Disable the pipeline
; 2356 :         CLRREG32( &m_pDispRegs->DISPC_IRQENABLE, DISPC_IRQENABLE_GFXFIFOUNDERFLOW);

  05474	e59d3044	 ldr         r3, [sp, #0x44]
  05478	e2833008	 add         r3, r3, #8
  0547c	e5933000	 ldr         r3, [r3]
  05480	e283301c	 add         r3, r3, #0x1C
  05484	e5932000	 ldr         r2, [r3]
  05488	e3e03040	 mvn         r3, #0x40
  0548c	e0022003	 and         r2, r2, r3
  05490	e59d3044	 ldr         r3, [sp, #0x44]
  05494	e2833008	 add         r3, r3, #8
  05498	e5933000	 ldr         r3, [r3]
  0549c	e283301c	 add         r3, r3, #0x1C
  054a0	e5832000	 str         r2, [r3]

; 2357 :         CLRREG32( &m_pDispRegs->DISPC_GFX_ATTRIBUTES, DISPC_GFX_ATTR_GFXENABLE );        

  054a4	e59d3044	 ldr         r3, [sp, #0x44]
  054a8	e2833008	 add         r3, r3, #8
  054ac	e5933000	 ldr         r3, [r3]
  054b0	e28330a0	 add         r3, r3, #0xA0
  054b4	e5932000	 ldr         r2, [r3]
  054b8	e3e03001	 mvn         r3, #1
  054bc	e0022003	 and         r2, r2, r3
  054c0	e59d3044	 ldr         r3, [sp, #0x44]
  054c4	e2833008	 add         r3, r3, #8
  054c8	e5933000	 ldr         r3, [r3]
  054cc	e28330a0	 add         r3, r3, #0xA0
  054d0	e5832000	 str         r2, [r3]

; 2358 :         g_rgPipelineMapping[ePipeline].bEnabled = FALSE;

  054d4	e59d1048	 ldr         r1, [sp, #0x48]
  054d8	e3a03020	 mov         r3, #0x20
  054dc	e0020391	 mul         r2, r1, r3
  054e0	e59f35c0	 ldr         r3, [pc, #0x5C0]
  054e4	e0832002	 add         r2, r3, r2
  054e8	e3a03000	 mov         r3, #0
  054ec	e5823000	 str         r3, [r2]

; 2359 :         g_rgPipelineMapping[ePipeline].bMirror = FALSE;

  054f0	e59d1048	 ldr         r1, [sp, #0x48]
  054f4	e3a03020	 mov         r3, #0x20
  054f8	e0020391	 mul         r2, r1, r3
  054fc	e59f35a4	 ldr         r3, [pc, #0x5A4]
  05500	e0833002	 add         r3, r3, r2
  05504	e2832010	 add         r2, r3, #0x10
  05508	e3a03000	 mov         r3, #0
  0550c	e5823000	 str         r3, [r2]
  05510		 |$LN19@DisablePip|

; 2360 :     }    
; 2361 : 
; 2362 :     //  Disable VID1 pipeline
; 2363 :     if( ePipeline == OMAP_DSS_PIPELINE_VIDEO1 )

  05510	e59d3048	 ldr         r3, [sp, #0x48]
  05514	e3530001	 cmp         r3, #1
  05518	1a000026	 bne         |$LN18@DisablePip|

; 2364 :     {
; 2365 :         //  Disable the pipeline
; 2366 :         CLRREG32( &m_pDispRegs->DISPC_IRQENABLE, DISPC_IRQENABLE_VID1FIFOUNDERFLOW);

  0551c	e59d3044	 ldr         r3, [sp, #0x44]
  05520	e2833008	 add         r3, r3, #8
  05524	e5933000	 ldr         r3, [r3]
  05528	e283301c	 add         r3, r3, #0x1C
  0552c	e5932000	 ldr         r2, [r3]
  05530	e3e03b01	 mvn         r3, #1, 22
  05534	e0022003	 and         r2, r2, r3
  05538	e59d3044	 ldr         r3, [sp, #0x44]
  0553c	e2833008	 add         r3, r3, #8
  05540	e5933000	 ldr         r3, [r3]
  05544	e283301c	 add         r3, r3, #0x1C
  05548	e5832000	 str         r2, [r3]

; 2367 :         CLRREG32( &m_pDispRegs->tDISPC_VID1.ATTRIBUTES, DISPC_VID_ATTR_VIDENABLE );

  0554c	e59d3044	 ldr         r3, [sp, #0x44]
  05550	e2833008	 add         r3, r3, #8
  05554	e5933000	 ldr         r3, [r3]
  05558	e28330cc	 add         r3, r3, #0xCC
  0555c	e5932000	 ldr         r2, [r3]
  05560	e3e03001	 mvn         r3, #1
  05564	e0022003	 and         r2, r2, r3
  05568	e59d3044	 ldr         r3, [sp, #0x44]
  0556c	e2833008	 add         r3, r3, #8
  05570	e5933000	 ldr         r3, [r3]
  05574	e28330cc	 add         r3, r3, #0xCC
  05578	e5832000	 str         r2, [r3]

; 2368 :         g_rgPipelineMapping[ePipeline].bEnabled = FALSE;

  0557c	e59d1048	 ldr         r1, [sp, #0x48]
  05580	e3a03020	 mov         r3, #0x20
  05584	e0020391	 mul         r2, r1, r3
  05588	e59f3518	 ldr         r3, [pc, #0x518]
  0558c	e0832002	 add         r2, r3, r2
  05590	e3a03000	 mov         r3, #0
  05594	e5823000	 str         r3, [r2]

; 2369 :         g_rgPipelineMapping[ePipeline].bMirror = FALSE;

  05598	e59d1048	 ldr         r1, [sp, #0x48]
  0559c	e3a03020	 mov         r3, #0x20
  055a0	e0020391	 mul         r2, r1, r3
  055a4	e59f34fc	 ldr         r3, [pc, #0x4FC]
  055a8	e0833002	 add         r3, r3, r2
  055ac	e2832010	 add         r2, r3, #0x10
  055b0	e3a03000	 mov         r3, #0
  055b4	e5823000	 str         r3, [r2]
  055b8		 |$LN18@DisablePip|

; 2370 :     }    
; 2371 : 
; 2372 :     //  Disable VID2 pipeline
; 2373 :     if( ePipeline == OMAP_DSS_PIPELINE_VIDEO2 )

  055b8	e59d3048	 ldr         r3, [sp, #0x48]
  055bc	e3530002	 cmp         r3, #2
  055c0	1a000026	 bne         |$LN17@DisablePip|

; 2374 :     {
; 2375 :         //  Disable the pipeline
; 2376 :         CLRREG32( &m_pDispRegs->DISPC_IRQENABLE, DISPC_IRQENABLE_VID2FIFOUNDERFLOW);

  055c4	e59d3044	 ldr         r3, [sp, #0x44]
  055c8	e2833008	 add         r3, r3, #8
  055cc	e5933000	 ldr         r3, [r3]
  055d0	e283301c	 add         r3, r3, #0x1C
  055d4	e5932000	 ldr         r2, [r3]
  055d8	e3e03a01	 mvn         r3, #1, 20
  055dc	e0022003	 and         r2, r2, r3
  055e0	e59d3044	 ldr         r3, [sp, #0x44]
  055e4	e2833008	 add         r3, r3, #8
  055e8	e5933000	 ldr         r3, [r3]
  055ec	e283301c	 add         r3, r3, #0x1C
  055f0	e5832000	 str         r2, [r3]

; 2377 :         CLRREG32( &m_pDispRegs->tDISPC_VID2.ATTRIBUTES, DISPC_VID_ATTR_VIDENABLE );

  055f4	e59d3044	 ldr         r3, [sp, #0x44]
  055f8	e2833008	 add         r3, r3, #8
  055fc	e5933000	 ldr         r3, [r3]
  05600	e2833f57	 add         r3, r3, #0x57, 30
  05604	e5932000	 ldr         r2, [r3]
  05608	e3e03001	 mvn         r3, #1
  0560c	e0022003	 and         r2, r2, r3
  05610	e59d3044	 ldr         r3, [sp, #0x44]
  05614	e2833008	 add         r3, r3, #8
  05618	e5933000	 ldr         r3, [r3]
  0561c	e2833f57	 add         r3, r3, #0x57, 30
  05620	e5832000	 str         r2, [r3]

; 2378 :         g_rgPipelineMapping[ePipeline].bEnabled = FALSE;

  05624	e59d1048	 ldr         r1, [sp, #0x48]
  05628	e3a03020	 mov         r3, #0x20
  0562c	e0020391	 mul         r2, r1, r3
  05630	e59f3470	 ldr         r3, [pc, #0x470]
  05634	e0832002	 add         r2, r3, r2
  05638	e3a03000	 mov         r3, #0
  0563c	e5823000	 str         r3, [r2]

; 2379 :         g_rgPipelineMapping[ePipeline].bMirror = FALSE;

  05640	e59d1048	 ldr         r1, [sp, #0x48]
  05644	e3a03020	 mov         r3, #0x20
  05648	e0020391	 mul         r2, r1, r3
  0564c	e59f3454	 ldr         r3, [pc, #0x454]
  05650	e0833002	 add         r3, r3, r2
  05654	e2832010	 add         r2, r3, #0x10
  05658	e3a03000	 mov         r3, #0
  0565c	e5823000	 str         r3, [r2]
  05660		 |$LN17@DisablePip|

; 2380 :     }    
; 2381 : 
; 2382 :     //  Count the number of pipelines that will be on
; 2383 :     dwNumPipelinesOn += (g_rgPipelineMapping[OMAP_DSS_PIPELINE_GFX].bEnabled) ? 1 : 0;

  05660	e59f3440	 ldr         r3, [pc, #0x440]
  05664	e5933000	 ldr         r3, [r3]
  05668	e3530000	 cmp         r3, #0
  0566c	0a000002	 beq         |$LN27@DisablePip|
  05670	e3a03001	 mov         r3, #1
  05674	e58d3024	 str         r3, [sp, #0x24]
  05678	ea000001	 b           |$LN28@DisablePip|
  0567c		 |$LN27@DisablePip|
  0567c	e3a03000	 mov         r3, #0
  05680	e58d3024	 str         r3, [sp, #0x24]
  05684		 |$LN28@DisablePip|
  05684	e59d2004	 ldr         r2, [sp, #4]
  05688	e59d3024	 ldr         r3, [sp, #0x24]
  0568c	e0823003	 add         r3, r2, r3
  05690	e58d3004	 str         r3, [sp, #4]

; 2384 :     dwNumPipelinesOn += (g_rgPipelineMapping[OMAP_DSS_PIPELINE_VIDEO1].bEnabled) ? 1 : 0;

  05694	e59f340c	 ldr         r3, [pc, #0x40C]
  05698	e5933020	 ldr         r3, [r3, #0x20]
  0569c	e3530000	 cmp         r3, #0
  056a0	0a000002	 beq         |$LN29@DisablePip|
  056a4	e3a03001	 mov         r3, #1
  056a8	e58d3028	 str         r3, [sp, #0x28]
  056ac	ea000001	 b           |$LN30@DisablePip|
  056b0		 |$LN29@DisablePip|
  056b0	e3a03000	 mov         r3, #0
  056b4	e58d3028	 str         r3, [sp, #0x28]
  056b8		 |$LN30@DisablePip|
  056b8	e59d2004	 ldr         r2, [sp, #4]
  056bc	e59d3028	 ldr         r3, [sp, #0x28]
  056c0	e0823003	 add         r3, r2, r3
  056c4	e58d3004	 str         r3, [sp, #4]

; 2385 :     dwNumPipelinesOn += (g_rgPipelineMapping[OMAP_DSS_PIPELINE_VIDEO2].bEnabled) ? 1 : 0;

  056c8	e59f33d8	 ldr         r3, [pc, #0x3D8]
  056cc	e5933040	 ldr         r3, [r3, #0x40]
  056d0	e3530000	 cmp         r3, #0
  056d4	0a000002	 beq         |$LN31@DisablePip|
  056d8	e3a03001	 mov         r3, #1
  056dc	e58d302c	 str         r3, [sp, #0x2C]
  056e0	ea000001	 b           |$LN32@DisablePip|
  056e4		 |$LN31@DisablePip|
  056e4	e3a03000	 mov         r3, #0
  056e8	e58d302c	 str         r3, [sp, #0x2C]
  056ec		 |$LN32@DisablePip|
  056ec	e59d2004	 ldr         r2, [sp, #4]
  056f0	e59d302c	 ldr         r3, [sp, #0x2C]
  056f4	e0823003	 add         r3, r2, r3
  056f8	e58d3004	 str         r3, [sp, #4]

; 2386 : 
; 2387 : 
; 2388 :     //  If there is only one pipeline enabled, use FIFO merge to make 1 large FIFO
; 2389 :     //  for better power management
; 2390 :     if( dwNumPipelinesOn == 1 )

  056fc	e59d3004	 ldr         r3, [sp, #4]
  05700	e3530001	 cmp         r3, #1
  05704	1a00002e	 bne         |$LN16@DisablePip|

; 2391 :     {
; 2392 :         //  Enable FIFO merge
; 2393 :         SETREG32( &m_pDispRegs->DISPC_CONFIG, DISPC_CONFIG_FIFOMERGE );

  05708	e59d3044	 ldr         r3, [sp, #0x44]
  0570c	e2833008	 add         r3, r3, #8
  05710	e5933000	 ldr         r3, [r3]
  05714	e2833044	 add         r3, r3, #0x44
  05718	e5933000	 ldr         r3, [r3]
  0571c	e3832901	 orr         r2, r3, #1, 18
  05720	e59d3044	 ldr         r3, [sp, #0x44]
  05724	e2833008	 add         r3, r3, #8
  05728	e5933000	 ldr         r3, [r3]
  0572c	e2833044	 add         r3, r3, #0x44
  05730	e5832000	 str         r2, [r3]

; 2394 : 
; 2395 :         //  Adjust the FIFO high and low thresholds for all the enabled pipelines
; 2396 :         if( g_rgPipelineMapping[OMAP_DSS_PIPELINE_GFX].bEnabled )

  05734	e59f336c	 ldr         r3, [pc, #0x36C]
  05738	e5933000	 ldr         r3, [r3]
  0573c	e3530000	 cmp         r3, #0
  05740	0a000008	 beq         |$LN15@DisablePip|

; 2397 :         {
; 2398 :             OUTREG32( &m_pDispRegs->DISPC_GFX_FIFO_THRESHOLD,
; 2399 :                         DISPC_GFX_FIFO_THRESHOLD_LOW(FIFO_LOWTHRESHOLD_MERGED(FIFO_BURSTSIZE_16x32)) |
; 2400 :                         DISPC_GFX_FIFO_THRESHOLD_HIGH(FIFO_HIGHTHRESHOLD_MERGED)
; 2401 :                         );

  05744	e59d3044	 ldr         r3, [sp, #0x44]
  05748	e2833008	 add         r3, r3, #8
  0574c	e5933000	 ldr         r3, [r3]
  05750	e28320a4	 add         r2, r3, #0xA4
  05754	e3e0333d	 mvn         r3, #0x3D, 6
  05758	e2233cfa	 eor         r3, r3, #0xFA, 24
  0575c	e5823000	 str         r3, [r2]

; 2402 :             bLPRState = TRUE;

  05760	e3a03001	 mov         r3, #1
  05764	e58d3010	 str         r3, [sp, #0x10]
  05768		 |$LN15@DisablePip|

; 2403 :         }
; 2404 : 
; 2405 :         if( g_rgPipelineMapping[OMAP_DSS_PIPELINE_VIDEO1].bEnabled )

  05768	e59f3338	 ldr         r3, [pc, #0x338]
  0576c	e5933020	 ldr         r3, [r3, #0x20]
  05770	e3530000	 cmp         r3, #0
  05774	0a000006	 beq         |$LN14@DisablePip|

; 2406 :         {
; 2407 :             OUTREG32( &m_pDispRegs->tDISPC_VID1.FIFO_THRESHOLD,
; 2408 :                         DISPC_VID_FIFO_THRESHOLD_LOW(FIFO_LOWTHRESHOLD_MERGED(FIFO_BURSTSIZE_16x32)) |
; 2409 :                         DISPC_VID_FIFO_THRESHOLD_HIGH(FIFO_HIGHTHRESHOLD_MERGED)
; 2410 :                         );

  05778	e59d3044	 ldr         r3, [sp, #0x44]
  0577c	e2833008	 add         r3, r3, #8
  05780	e5933000	 ldr         r3, [r3]
  05784	e28320d0	 add         r2, r3, #0xD0
  05788	e3e0333d	 mvn         r3, #0x3D, 6
  0578c	e2233cfa	 eor         r3, r3, #0xFA, 24
  05790	e5823000	 str         r3, [r2]
  05794		 |$LN14@DisablePip|

; 2411 :         }
; 2412 : 
; 2413 :         if( g_rgPipelineMapping[OMAP_DSS_PIPELINE_VIDEO2].bEnabled )

  05794	e59f330c	 ldr         r3, [pc, #0x30C]
  05798	e5933040	 ldr         r3, [r3, #0x40]
  0579c	e3530000	 cmp         r3, #0
  057a0	0a000006	 beq         |$LN13@DisablePip|

; 2414 :         {
; 2415 :             OUTREG32( &m_pDispRegs->tDISPC_VID2.FIFO_THRESHOLD,
; 2416 :                         DISPC_VID_FIFO_THRESHOLD_LOW(FIFO_LOWTHRESHOLD_MERGED(FIFO_BURSTSIZE_16x32)) |
; 2417 :                         DISPC_VID_FIFO_THRESHOLD_HIGH(FIFO_HIGHTHRESHOLD_MERGED)
; 2418 :                         );

  057a4	e59d3044	 ldr         r3, [sp, #0x44]
  057a8	e2833008	 add         r3, r3, #8
  057ac	e5933000	 ldr         r3, [r3]
  057b0	e2832e16	 add         r2, r3, #0x16, 28
  057b4	e3e0333d	 mvn         r3, #0x3D, 6
  057b8	e2233cfa	 eor         r3, r3, #0xFA, 24
  057bc	e5823000	 str         r3, [r2]
  057c0		 |$LN13@DisablePip|

; 2419 :         }
; 2420 : 
; 2421 : 
; 2422 :     }
; 2423 :     else

  057c0	ea00002c	 b           |$LN12@DisablePip|
  057c4		 |$LN16@DisablePip|

; 2424 :     {
; 2425 : 
; 2426 :         //  Disable FIFO merge
; 2427 :         CLRREG32( &m_pDispRegs->DISPC_CONFIG, DISPC_CONFIG_FIFOMERGE );

  057c4	e59d3044	 ldr         r3, [sp, #0x44]
  057c8	e2833008	 add         r3, r3, #8
  057cc	e5933000	 ldr         r3, [r3]
  057d0	e2833044	 add         r3, r3, #0x44
  057d4	e5932000	 ldr         r2, [r3]
  057d8	e3e03901	 mvn         r3, #1, 18
  057dc	e0022003	 and         r2, r2, r3
  057e0	e59d3044	 ldr         r3, [sp, #0x44]
  057e4	e2833008	 add         r3, r3, #8
  057e8	e5933000	 ldr         r3, [r3]
  057ec	e2833044	 add         r3, r3, #0x44
  057f0	e5832000	 str         r2, [r3]

; 2428 : 
; 2429 :         //  Adjust the FIFO high and low thresholds for all the enabled pipelines
; 2430 :         if( g_rgPipelineMapping[OMAP_DSS_PIPELINE_GFX].bEnabled )

  057f4	e59f32ac	 ldr         r3, [pc, #0x2AC]
  057f8	e5933000	 ldr         r3, [r3]
  057fc	e3530000	 cmp         r3, #0
  05800	0a000006	 beq         |$LN11@DisablePip|

; 2431 :         {
; 2432 :             OUTREG32( &m_pDispRegs->DISPC_GFX_FIFO_THRESHOLD,
; 2433 :                         DISPC_GFX_FIFO_THRESHOLD_LOW(FIFO_LOWTHRESHOLD_NORMAL(FIFO_BURSTSIZE_16x32)) |
; 2434 :                         DISPC_GFX_FIFO_THRESHOLD_HIGH(FIFO_HIGHTHRESHOLD_NORMAL)
; 2435 :                         );

  05804	e59d3044	 ldr         r3, [sp, #0x44]
  05808	e2833008	 add         r3, r3, #8
  0580c	e5933000	 ldr         r3, [r3]
  05810	e28320a4	 add         r2, r3, #0xA4
  05814	e3e0333f	 mvn         r3, #0x3F, 6
  05818	e2233cfe	 eor         r3, r3, #0xFE, 24
  0581c	e5823000	 str         r3, [r2]
  05820		 |$LN11@DisablePip|

; 2436 :         }
; 2437 : 
; 2438 :         if( g_rgPipelineMapping[OMAP_DSS_PIPELINE_VIDEO1].bEnabled )

  05820	e59f3280	 ldr         r3, [pc, #0x280]
  05824	e5933020	 ldr         r3, [r3, #0x20]
  05828	e3530000	 cmp         r3, #0
  0582c	0a000006	 beq         |$LN10@DisablePip|

; 2439 :         {
; 2440 :             OUTREG32( &m_pDispRegs->tDISPC_VID1.FIFO_THRESHOLD,
; 2441 :                         DISPC_VID_FIFO_THRESHOLD_LOW(FIFO_LOWTHRESHOLD_NORMAL(FIFO_BURSTSIZE_16x32)) |
; 2442 :                         DISPC_VID_FIFO_THRESHOLD_HIGH(FIFO_HIGHTHRESHOLD_NORMAL)
; 2443 :                         );

  05830	e59d3044	 ldr         r3, [sp, #0x44]
  05834	e2833008	 add         r3, r3, #8
  05838	e5933000	 ldr         r3, [r3]
  0583c	e28320d0	 add         r2, r3, #0xD0
  05840	e3e0333f	 mvn         r3, #0x3F, 6
  05844	e2233cfe	 eor         r3, r3, #0xFE, 24
  05848	e5823000	 str         r3, [r2]
  0584c		 |$LN10@DisablePip|

; 2444 :         }
; 2445 : 
; 2446 :         if( g_rgPipelineMapping[OMAP_DSS_PIPELINE_VIDEO2].bEnabled )

  0584c	e59f3254	 ldr         r3, [pc, #0x254]
  05850	e5933040	 ldr         r3, [r3, #0x40]
  05854	e3530000	 cmp         r3, #0
  05858	0a000006	 beq         |$LN9@DisablePip|

; 2447 :         {
; 2448 :             OUTREG32( &m_pDispRegs->tDISPC_VID2.FIFO_THRESHOLD,
; 2449 :                         DISPC_VID_FIFO_THRESHOLD_LOW(FIFO_LOWTHRESHOLD_NORMAL(FIFO_BURSTSIZE_16x32)) |
; 2450 :                         DISPC_VID_FIFO_THRESHOLD_HIGH(FIFO_HIGHTHRESHOLD_NORMAL)
; 2451 :                         );

  0585c	e59d3044	 ldr         r3, [sp, #0x44]
  05860	e2833008	 add         r3, r3, #8
  05864	e5933000	 ldr         r3, [r3]
  05868	e2832e16	 add         r2, r3, #0x16, 28
  0586c	e3e0333f	 mvn         r3, #0x3F, 6
  05870	e2233cfe	 eor         r3, r3, #0xFE, 24
  05874	e5823000	 str         r3, [r2]
  05878		 |$LN9@DisablePip|
  05878		 |$LN12@DisablePip|

; 2452 :         }
; 2453 : 
; 2454 :     }
; 2455 : 
; 2456 :     //  Get the destination for the pipeline
; 2457 :     eDest = g_rgPipelineMapping[ePipeline].eDestination;

  05878	e59d1048	 ldr         r1, [sp, #0x48]
  0587c	e3a03020	 mov         r3, #0x20
  05880	e0020391	 mul         r2, r1, r3
  05884	e59f321c	 ldr         r3, [pc, #0x21C]
  05888	e0833002	 add         r3, r3, r2
  0588c	e2833004	 add         r3, r3, #4
  05890	e5933000	 ldr         r3, [r3]
  05894	e58d300c	 str         r3, [sp, #0xC]

; 2458 :     switch( eDest )

  05898	e59d300c	 ldr         r3, [sp, #0xC]
  0589c	e58d3030	 str         r3, [sp, #0x30]
  058a0	e59d3030	 ldr         r3, [sp, #0x30]
  058a4	e3530000	 cmp         r3, #0
  058a8	0a000003	 beq         |$LN6@DisablePip|
  058ac	e59d3030	 ldr         r3, [sp, #0x30]
  058b0	e3530001	 cmp         r3, #1
  058b4	0a000005	 beq         |$LN5@DisablePip|
  058b8	ea000009	 b           |$LN4@DisablePip|
  058bc		 |$LN6@DisablePip|

; 2459 :     {
; 2460 :         case OMAP_DSS_DESTINATION_LCD:
; 2461 :             //  Set enable and go bits for LCD
; 2462 :             dwDestEnable = DISPC_CONTROL_LCDENABLE;

  058bc	e3a03001	 mov         r3, #1
  058c0	e58d3018	 str         r3, [sp, #0x18]

; 2463 :             dwDestGo     = DISPC_CONTROL_GOLCD;

  058c4	e3a03020	 mov         r3, #0x20
  058c8	e58d3000	 str         r3, [sp]

; 2464 :             break;

  058cc	ea000013	 b           |$LN7@DisablePip|
  058d0		 |$LN5@DisablePip|

; 2465 : 
; 2466 :         case OMAP_DSS_DESTINATION_TVOUT:
; 2467 :             //  Set enable and go bits for TV Out
; 2468 :             dwDestEnable = DISPC_CONTROL_DIGITALENABLE;

  058d0	e3a03002	 mov         r3, #2
  058d4	e58d3018	 str         r3, [sp, #0x18]

; 2469 :             dwDestGo     = DISPC_CONTROL_GODIGITAL;

  058d8	e3a03040	 mov         r3, #0x40
  058dc	e58d3000	 str         r3, [sp]

; 2470 :             break;

  058e0	ea00000e	 b           |$LN7@DisablePip|
  058e4		 |$LN4@DisablePip|

; 2471 : 
; 2472 :         default:
; 2473 :             ASSERT(0);

  058e4	ea000002	 b           |$LN33@DisablePip|
  058e8	e3a03001	 mov         r3, #1
  058ec	e58d3034	 str         r3, [sp, #0x34]
  058f0	ea000008	 b           |$LN34@DisablePip|
  058f4		 |$LN33@DisablePip|
  058f4	e3a03c09	 mov         r3, #9, 24
  058f8	e38330a9	 orr         r3, r3, #0xA9
  058fc	e59f21a0	 ldr         r2, [pc, #0x1A0]
  05900	e59f1198	 ldr         r1, [pc, #0x198]
  05904	e59f0190	 ldr         r0, [pc, #0x190]
  05908	eb000000	 bl          NKDbgPrintfW
  0590c	e6000010	 __debugbreak_ce
  05910	e3a03000	 mov         r3, #0
  05914	e58d3034	 str         r3, [sp, #0x34]
  05918		 |$LN34@DisablePip|

; 2474 :             goto cleanUp;

  05918	ea000056	 b           |$LN3@DisablePip|
  0591c	ea000055	 b           |$cleanUp$38589|
  05920		 |$LN7@DisablePip|

; 2475 :     }
; 2476 :     
; 2477 :     //  Try enabling overlay optimization
; 2478 :     EnableOverlayOptimization( TRUE );

  05920	e3a01001	 mov         r1, #1
  05924	e59d0044	 ldr         r0, [sp, #0x44]
  05928	eb000000	 bl          |?EnableOverlayOptimization@OMAPDisplayController@@QAAXH@Z|

; 2479 : 
; 2480 :     // First turn on the GO bit corresponding to the pipeline
; 2481 :     // that has to be disabled and wait for GO bit to clear.
; 2482 :     FlushRegs( dwDestGo );     

  0592c	e59d1000	 ldr         r1, [sp]
  05930	e59d0044	 ldr         r0, [sp, #0x44]
  05934	eb000000	 bl          |?FlushRegs@OMAPDisplayController@@IAAHK@Z|

; 2483 :     WaitForFlushDone( dwDestGo );

  05938	e59d1000	 ldr         r1, [sp]
  0593c	e59d0044	 ldr         r0, [sp, #0x44]
  05940	eb000000	 bl          |?WaitForFlushDone@OMAPDisplayController@@IAAHK@Z|

; 2484 : 
; 2485 :     // Additional flush required, when pipeline that is disabled in this
; 2486 :     // function was connected to DIGITALPATH. There could be another pipeline 
; 2487 :     // driving the LCD path and so the LCD path has to be flushed as well
; 2488 :     if ( (dwDestGo != DISPC_CONTROL_GOLCD) && (dwNumPipelinesOn > 0) )

  05944	e59d3000	 ldr         r3, [sp]
  05948	e3530020	 cmp         r3, #0x20
  0594c	0a000005	 beq         |$LN2@DisablePip|
  05950	e59d3004	 ldr         r3, [sp, #4]
  05954	e3530000	 cmp         r3, #0
  05958	9a000002	 bls         |$LN2@DisablePip|

; 2489 :         FlushRegs( DISPC_CONTROL_GOLCD );

  0595c	e3a01020	 mov         r1, #0x20
  05960	e59d0044	 ldr         r0, [sp, #0x44]
  05964	eb000000	 bl          |?FlushRegs@OMAPDisplayController@@IAAHK@Z|
  05968		 |$LN2@DisablePip|

; 2490 :     
; 2491 :     //  Update ref count on destination
; 2492 :     //  If ref count on destination is 0, disable output
; 2493 :     if( --g_dwDestinationRefCnt[eDest] == 0 )

  05968	e59d100c	 ldr         r1, [sp, #0xC]
  0596c	e3a03004	 mov         r3, #4
  05970	e0020391	 mul         r2, r1, r3
  05974	e59f311c	 ldr         r3, [pc, #0x11C]
  05978	e0833002	 add         r3, r3, r2
  0597c	e5933000	 ldr         r3, [r3]
  05980	e2430001	 sub         r0, r3, #1
  05984	e59d100c	 ldr         r1, [sp, #0xC]
  05988	e3a03004	 mov         r3, #4
  0598c	e0020391	 mul         r2, r1, r3
  05990	e59f3100	 ldr         r3, [pc, #0x100]
  05994	e0833002	 add         r3, r3, r2
  05998	e5830000	 str         r0, [r3]
  0599c	e59d100c	 ldr         r1, [sp, #0xC]
  059a0	e3a03004	 mov         r3, #4
  059a4	e0020391	 mul         r2, r1, r3
  059a8	e59f30e8	 ldr         r3, [pc, #0xE8]
  059ac	e0833002	 add         r3, r3, r2
  059b0	e5933000	 ldr         r3, [r3]
  059b4	e3530000	 cmp         r3, #0
  059b8	1a00000c	 bne         |$LN1@DisablePip|

; 2494 :         CLRREG32( &m_pDispRegs->DISPC_CONTROL, dwDestEnable );

  059bc	e59d3044	 ldr         r3, [sp, #0x44]
  059c0	e2833008	 add         r3, r3, #8
  059c4	e5933000	 ldr         r3, [r3]
  059c8	e2831040	 add         r1, r3, #0x40
  059cc	e59d3018	 ldr         r3, [sp, #0x18]
  059d0	e1e02003	 mvn         r2, r3
  059d4	e5913000	 ldr         r3, [r1]
  059d8	e0032002	 and         r2, r3, r2
  059dc	e59d3044	 ldr         r3, [sp, #0x44]
  059e0	e2833008	 add         r3, r3, #8
  059e4	e5933000	 ldr         r3, [r3]
  059e8	e2833040	 add         r3, r3, #0x40
  059ec	e5832000	 str         r2, [r3]
  059f0		 |$LN1@DisablePip|

; 2495 : 
; 2496 :     // clear any pending interrupts
; 2497 :     dwIntrStatus = INREG32 ( &m_pDispRegs->DISPC_IRQSTATUS );

  059f0	e59d3044	 ldr         r3, [sp, #0x44]
  059f4	e2833008	 add         r3, r3, #8
  059f8	e5933000	 ldr         r3, [r3]
  059fc	e2833018	 add         r3, r3, #0x18
  05a00	e5933000	 ldr         r3, [r3]
  05a04	e58d3008	 str         r3, [sp, #8]

; 2498 :     SETREG32( &m_pDispRegs->DISPC_IRQSTATUS, dwIntrStatus );

  05a08	e59d3044	 ldr         r3, [sp, #0x44]
  05a0c	e2833008	 add         r3, r3, #8
  05a10	e5933000	 ldr         r3, [r3]
  05a14	e2833018	 add         r3, r3, #0x18
  05a18	e5932000	 ldr         r2, [r3]
  05a1c	e59d3008	 ldr         r3, [sp, #8]
  05a20	e1822003	 orr         r2, r2, r3
  05a24	e59d3044	 ldr         r3, [sp, #0x44]
  05a28	e2833008	 add         r3, r3, #8
  05a2c	e5933000	 ldr         r3, [r3]
  05a30	e2833018	 add         r3, r3, #0x18
  05a34	e5832000	 str         r2, [r3]

; 2499 : 
; 2500 :     // Configure the LPR mode based on active Pipeline(s)
; 2501 :     // If the pipeline count is 0, then LPR should be ON
; 2502 :     bLPRState = (dwNumPipelinesOn == 0) ? TRUE : bLPRState;

  05a38	e59d3004	 ldr         r3, [sp, #4]
  05a3c	e3530000	 cmp         r3, #0
  05a40	1a000002	 bne         |$LN35@DisablePip|
  05a44	e3a03001	 mov         r3, #1
  05a48	e58d3038	 str         r3, [sp, #0x38]
  05a4c	ea000001	 b           |$LN36@DisablePip|
  05a50		 |$LN35@DisablePip|
  05a50	e59d3010	 ldr         r3, [sp, #0x10]
  05a54	e58d3038	 str         r3, [sp, #0x38]
  05a58		 |$LN36@DisablePip|
  05a58	e59d3038	 ldr         r3, [sp, #0x38]
  05a5c	e58d3010	 str         r3, [sp, #0x10]

; 2503 :     EnableLPR( bLPRState );

  05a60	e3a02000	 mov         r2, #0
  05a64	e59d1010	 ldr         r1, [sp, #0x10]
  05a68	e59d0044	 ldr         r0, [sp, #0x44]
  05a6c	eb000000	 bl          |?EnableLPR@OMAPDisplayController@@QAAXHH@Z|

; 2504 :     
; 2505 :     //  Result
; 2506 :     bResult = TRUE;         

  05a70	e3a03001	 mov         r3, #1
  05a74	e58d3014	 str         r3, [sp, #0x14]
  05a78		 |$LN3@DisablePip|
  05a78		 |$LN22@DisablePip|
  05a78		 |$cleanUp$38589|

; 2507 : 
; 2508 : cleanUp:    
; 2509 :     //  Release regs
; 2510 :     ReleaseRegs();

  05a78	e59d0044	 ldr         r0, [sp, #0x44]
  05a7c	eb000000	 bl          |?ReleaseRegs@OMAPDisplayController@@IAAHXZ|

; 2511 :     
; 2512 :     //  Return result
; 2513 :     return bResult;

  05a80	e59d3014	 ldr         r3, [sp, #0x14]
  05a84	e58d301c	 str         r3, [sp, #0x1C]
  05a88		 |$LN25@DisablePip|

; 2514 : }

  05a88	e59d001c	 ldr         r0, [sp, #0x1C]
  05a8c	e28dd03c	 add         sp, sp, #0x3C
  05a90	e89d6000	 ldmia       sp, {sp, lr}
  05a94	e12fff1e	 bx          lr
  05a98		 |$LN40@DisablePip|
  05a98		 |$LN41@DisablePip|
  05a98	00000000	 DCD         |?g_dwDestinationRefCnt@@3PAKA|
  05a9c		 |$LN42@DisablePip|
  05a9c	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  05aa0		 |$LN43@DisablePip|
  05aa0	00000000	 DCD         |??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@|
  05aa4		 |$LN44@DisablePip|
  05aa4	00000000	 DCD         |??_C@_1KC@HIABDGPO@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  05aa8		 |$LN45@DisablePip|
  05aa8	00000000	 DCD         |?g_rgPipelineMapping@@3PAUOMAPPipelineConfig@@A|
  05aac		 |$M40631|

			 ENDP  ; |?DisablePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@@Z|, OMAPDisplayController::DisablePipeline

	EXPORT	|?FlipPipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@PAVOMAPSurface@@@Z| ; OMAPDisplayController::FlipPipeline

  00088			 AREA	 |.pdata|, PDATA
|$T40649| DCD	|$LN21@FlipPipeli|
	DCD	0x40018c04
; Function compile flags: /Odtp

  05aac			 AREA	 |.text|, CODE, ARM

  05aac		 |?FlipPipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@PAVOMAPSurface@@@Z| PROC ; OMAPDisplayController::FlipPipeline

; 2522 : {

  05aac		 |$LN21@FlipPipeli|
  05aac	e1a0c00d	 mov         r12, sp
  05ab0	e92d0007	 stmdb       sp!, {r0 - r2}
  05ab4	e92d5010	 stmdb       sp!, {r4, r12, lr}
  05ab8	e24dd088	 sub         sp, sp, #0x88
  05abc		 |$M40646|

; 2523 :     BOOL    bResult = FALSE;

  05abc	e3a03000	 mov         r3, #0
  05ac0	e58d3010	 str         r3, [sp, #0x10]

; 2524 :     DWORD   dwDestGo;
; 2525 :     OMAP_DSS_ROTATION   eRotation;
; 2526 :     BOOL                bMirror;
; 2527 :     DWORD               dwInterlace;
; 2528 : 
; 2529 : 
; 2530 :     //  Check if pipeline is already enabled; if not, no reason to flip
; 2531 :     if( g_rgPipelineMapping[ePipeline].bEnabled == FALSE )

  05ac4	e59d1098	 ldr         r1, [sp, #0x98]
  05ac8	e3a03020	 mov         r3, #0x20
  05acc	e0020391	 mul         r2, r1, r3
  05ad0	e59f35f0	 ldr         r3, [pc, #0x5F0]
  05ad4	e0833002	 add         r3, r3, r2
  05ad8	e5933000	 ldr         r3, [r3]
  05adc	e3530000	 cmp         r3, #0
  05ae0	1a000002	 bne         |$LN14@FlipPipeli|

; 2532 :         return FALSE;

  05ae4	e3a03000	 mov         r3, #0
  05ae8	e58d3034	 str         r3, [sp, #0x34]
  05aec	ea000171	 b           |$LN15@FlipPipeli|
  05af0		 |$LN14@FlipPipeli|

; 2533 : 
; 2534 :     //  Access the regs
; 2535 :     if( AccessRegs() == FALSE )

  05af0	e59d0094	 ldr         r0, [sp, #0x94]
  05af4	eb000000	 bl          |?AccessRegs@OMAPDisplayController@@IAAHXZ|
  05af8	e58d0038	 str         r0, [sp, #0x38]
  05afc	e59d3038	 ldr         r3, [sp, #0x38]
  05b00	e3530000	 cmp         r3, #0
  05b04	1a000001	 bne         |$LN13@FlipPipeli|
  05b08	ea000166	 b           |$LN12@FlipPipeli|

; 2536 :         goto cleanUp;

  05b0c	ea000165	 b           |$cleanUp$38679|
  05b10		 |$LN13@FlipPipeli|

; 2537 : 
; 2538 :         
; 2539 :     //  Get rotation and mirror settings for pipeline output
; 2540 :     eRotation = g_rgPipelineMapping[ePipeline].eRotation;

  05b10	e59d1098	 ldr         r1, [sp, #0x98]
  05b14	e3a03020	 mov         r3, #0x20
  05b18	e0020391	 mul         r2, r1, r3
  05b1c	e59f35a4	 ldr         r3, [pc, #0x5A4]
  05b20	e0833002	 add         r3, r3, r2
  05b24	e283300c	 add         r3, r3, #0xC
  05b28	e5933000	 ldr         r3, [r3]
  05b2c	e58d3000	 str         r3, [sp]

; 2541 :     bMirror   = g_rgPipelineMapping[ePipeline].bMirror;

  05b30	e59d1098	 ldr         r1, [sp, #0x98]
  05b34	e3a03020	 mov         r3, #0x20
  05b38	e0020391	 mul         r2, r1, r3
  05b3c	e59f3584	 ldr         r3, [pc, #0x584]
  05b40	e0833002	 add         r3, r3, r2
  05b44	e2833010	 add         r3, r3, #0x10
  05b48	e5933000	 ldr         r3, [r3]
  05b4c	e58d300c	 str         r3, [sp, #0xC]

; 2542 :     dwInterlace = g_rgPipelineScaling[ePipeline].dwInterlace;

  05b50	e59d1098	 ldr         r1, [sp, #0x98]
  05b54	e3a0300c	 mov         r3, #0xC
  05b58	e0020391	 mul         r2, r1, r3
  05b5c	e59f3574	 ldr         r3, [pc, #0x574]
  05b60	e0833002	 add         r3, r3, r2
  05b64	e2833008	 add         r3, r3, #8
  05b68	e5933000	 ldr         r3, [r3]
  05b6c	e58d3004	 str         r3, [sp, #4]

; 2543 : 
; 2544 :     //Update clipping rectangle
; 2545 : #pragma warning(push)
; 2546 : #pragma warning(disable:4238)
; 2547 :     pSurface->SetClipping(&(g_rgPipelineMapping[ePipeline].pSurface->GetClipping()));    

  05b70	e28d1014	 add         r1, sp, #0x14
  05b74	e59d0098	 ldr         r0, [sp, #0x98]
  05b78	e3a03020	 mov         r3, #0x20
  05b7c	e0020390	 mul         r2, r0, r3
  05b80	e59f3540	 ldr         r3, [pc, #0x540]
  05b84	e0833002	 add         r3, r3, r2
  05b88	e2833008	 add         r3, r3, #8
  05b8c	e593e000	 ldr         lr, [r3]
  05b90	e59d0098	 ldr         r0, [sp, #0x98]
  05b94	e3a03020	 mov         r3, #0x20
  05b98	e0020390	 mul         r2, r0, r3
  05b9c	e59f3524	 ldr         r3, [pc, #0x524]
  05ba0	e0833002	 add         r3, r3, r2
  05ba4	e2833008	 add         r3, r3, #8
  05ba8	e5930000	 ldr         r0, [r3]
  05bac	e59e3000	 ldr         r3, [lr]
  05bb0	e2833028	 add         r3, r3, #0x28
  05bb4	e5933000	 ldr         r3, [r3]
  05bb8	e1a0e00f	 mov         lr, pc
  05bbc	e12fff13	 bx          r3
  05bc0	e58d003c	 str         r0, [sp, #0x3C]
  05bc4	e59d103c	 ldr         r1, [sp, #0x3C]
  05bc8	e59d309c	 ldr         r3, [sp, #0x9C]
  05bcc	e5933000	 ldr         r3, [r3]
  05bd0	e2833020	 add         r3, r3, #0x20
  05bd4	e59d009c	 ldr         r0, [sp, #0x9C]
  05bd8	e5933000	 ldr         r3, [r3]
  05bdc	e1a0e00f	 mov         lr, pc
  05be0	e12fff13	 bx          r3

; 2548 : 
; 2549 :     /* check for resizer */
; 2550 :     if (pSurface->isResizerEnabled())

  05be4	e59d009c	 ldr         r0, [sp, #0x9C]
  05be8	eb000000	 bl          |?isResizerEnabled@OMAPSurface@@QAAHXZ|
  05bec	e58d0040	 str         r0, [sp, #0x40]
  05bf0	e59d3040	 ldr         r3, [sp, #0x40]
  05bf4	e3530000	 cmp         r3, #0
  05bf8	0a00003f	 beq         |$LN11@FlipPipeli|

; 2551 :     {
; 2552 :         pSurface->OmapAssocSurface()->SetClipping(
; 2553 :             &(g_rgPipelineMapping[ePipeline].pSurface->OmapAssocSurface()->GetClipping()));

  05bfc	e59d1098	 ldr         r1, [sp, #0x98]
  05c00	e3a03020	 mov         r3, #0x20
  05c04	e0020391	 mul         r2, r1, r3
  05c08	e59f34b8	 ldr         r3, [pc, #0x4B8]
  05c0c	e0833002	 add         r3, r3, r2
  05c10	e2833008	 add         r3, r3, #8
  05c14	e5930000	 ldr         r0, [r3]
  05c18	eb000000	 bl          |?OmapAssocSurface@OMAPSurface@@QAAPAV1@XZ|
  05c1c	e58d0044	 str         r0, [sp, #0x44]
  05c20	e59d3044	 ldr         r3, [sp, #0x44]
  05c24	e58d3048	 str         r3, [sp, #0x48]
  05c28	e28d1024	 add         r1, sp, #0x24
  05c2c	e59d0048	 ldr         r0, [sp, #0x48]
  05c30	e59d3048	 ldr         r3, [sp, #0x48]
  05c34	e5933000	 ldr         r3, [r3]
  05c38	e2833028	 add         r3, r3, #0x28
  05c3c	e5933000	 ldr         r3, [r3]
  05c40	e1a0e00f	 mov         lr, pc
  05c44	e12fff13	 bx          r3
  05c48	e58d004c	 str         r0, [sp, #0x4C]
  05c4c	e59d009c	 ldr         r0, [sp, #0x9C]
  05c50	eb000000	 bl          |?OmapAssocSurface@OMAPSurface@@QAAPAV1@XZ|
  05c54	e58d0050	 str         r0, [sp, #0x50]
  05c58	e59d3050	 ldr         r3, [sp, #0x50]
  05c5c	e58d3054	 str         r3, [sp, #0x54]
  05c60	e59d104c	 ldr         r1, [sp, #0x4C]
  05c64	e59d0054	 ldr         r0, [sp, #0x54]
  05c68	e59d3054	 ldr         r3, [sp, #0x54]
  05c6c	e5933000	 ldr         r3, [r3]
  05c70	e2833020	 add         r3, r3, #0x20
  05c74	e5933000	 ldr         r3, [r3]
  05c78	e1a0e00f	 mov         lr, pc
  05c7c	e12fff13	 bx          r3

; 2554 :         pSurface->StartResizer(pSurface->PhysicalAddr(OMAP_DSS_ROTATION_0, bMirror,OMAP_ASSOC_SURF_FORCE_OFF), //input
; 2555 :                                pSurface->OmapAssocSurface()->PhysicalAddr(OMAP_DSS_ROTATION_0, bMirror,OMAP_ASSOC_SURF_FORCE_OFF));            

  05c80	e59d009c	 ldr         r0, [sp, #0x9C]
  05c84	eb000000	 bl          |?OmapAssocSurface@OMAPSurface@@QAAPAV1@XZ|
  05c88	e58d0058	 str         r0, [sp, #0x58]
  05c8c	e59d3058	 ldr         r3, [sp, #0x58]
  05c90	e58d305c	 str         r3, [sp, #0x5C]
  05c94	e3a03001	 mov         r3, #1
  05c98	e59d200c	 ldr         r2, [sp, #0xC]
  05c9c	e3a01000	 mov         r1, #0
  05ca0	e59d005c	 ldr         r0, [sp, #0x5C]
  05ca4	e59de05c	 ldr         lr, [sp, #0x5C]
  05ca8	e59ee000	 ldr         lr, [lr]
  05cac	e28ee014	 add         lr, lr, #0x14
  05cb0	e59e4000	 ldr         r4, [lr]
  05cb4	e1a0e00f	 mov         lr, pc
  05cb8	e12fff14	 bx          r4
  05cbc	e58d0060	 str         r0, [sp, #0x60]
  05cc0	e3a03001	 mov         r3, #1
  05cc4	e59d200c	 ldr         r2, [sp, #0xC]
  05cc8	e3a01000	 mov         r1, #0
  05ccc	e59d009c	 ldr         r0, [sp, #0x9C]
  05cd0	e5900000	 ldr         r0, [r0]
  05cd4	e280e014	 add         lr, r0, #0x14
  05cd8	e59d009c	 ldr         r0, [sp, #0x9C]
  05cdc	e59e4000	 ldr         r4, [lr]
  05ce0	e1a0e00f	 mov         lr, pc
  05ce4	e12fff14	 bx          r4
  05ce8	e58d0064	 str         r0, [sp, #0x64]
  05cec	e59d2060	 ldr         r2, [sp, #0x60]
  05cf0	e59d1064	 ldr         r1, [sp, #0x64]
  05cf4	e59d009c	 ldr         r0, [sp, #0x9C]
  05cf8	eb000000	 bl          |?StartResizer@OMAPSurface@@QAAHKK@Z|
  05cfc		 |$LN11@FlipPipeli|

; 2556 :     }
; 2557 : #pragma warning(pop)    
; 2558 : 
; 2559 :     //  Update GFX pipeline display base address
; 2560 :     if( ePipeline == OMAP_DSS_PIPELINE_GFX )

  05cfc	e59d3098	 ldr         r3, [sp, #0x98]
  05d00	e3530000	 cmp         r3, #0
  05d04	1a000023	 bne         |$LN10@FlipPipeli|

; 2561 :     {
; 2562 :         OUTREG32( &m_pDispRegs->DISPC_GFX_BA0, pSurface->PhysicalAddr(eRotation, bMirror) );

  05d08	e3a03000	 mov         r3, #0
  05d0c	e59d200c	 ldr         r2, [sp, #0xC]
  05d10	e59d1000	 ldr         r1, [sp]
  05d14	e59d009c	 ldr         r0, [sp, #0x9C]
  05d18	e5900000	 ldr         r0, [r0]
  05d1c	e280e014	 add         lr, r0, #0x14
  05d20	e59d009c	 ldr         r0, [sp, #0x9C]
  05d24	e59e4000	 ldr         r4, [lr]
  05d28	e1a0e00f	 mov         lr, pc
  05d2c	e12fff14	 bx          r4
  05d30	e58d0068	 str         r0, [sp, #0x68]
  05d34	e59d3094	 ldr         r3, [sp, #0x94]
  05d38	e2833008	 add         r3, r3, #8
  05d3c	e5933000	 ldr         r3, [r3]
  05d40	e2832080	 add         r2, r3, #0x80
  05d44	e59d3068	 ldr         r3, [sp, #0x68]
  05d48	e5823000	 str         r3, [r2]

; 2563 :         OUTREG32( &m_pDispRegs->DISPC_GFX_BA1, pSurface->PhysicalAddr(eRotation, bMirror) + dwInterlace );

  05d4c	e3a03000	 mov         r3, #0
  05d50	e59d200c	 ldr         r2, [sp, #0xC]
  05d54	e59d1000	 ldr         r1, [sp]
  05d58	e59d009c	 ldr         r0, [sp, #0x9C]
  05d5c	e5900000	 ldr         r0, [r0]
  05d60	e280e014	 add         lr, r0, #0x14
  05d64	e59d009c	 ldr         r0, [sp, #0x9C]
  05d68	e59e4000	 ldr         r4, [lr]
  05d6c	e1a0e00f	 mov         lr, pc
  05d70	e12fff14	 bx          r4
  05d74	e58d006c	 str         r0, [sp, #0x6C]
  05d78	e59d206c	 ldr         r2, [sp, #0x6C]
  05d7c	e59d3004	 ldr         r3, [sp, #4]
  05d80	e0822003	 add         r2, r2, r3
  05d84	e59d3094	 ldr         r3, [sp, #0x94]
  05d88	e2833008	 add         r3, r3, #8
  05d8c	e5933000	 ldr         r3, [r3]
  05d90	e2833084	 add         r3, r3, #0x84
  05d94	e5832000	 str         r2, [r3]
  05d98		 |$LN10@FlipPipeli|

; 2564 :     }    
; 2565 : 
; 2566 :     //  Update VID1 pipeline display base address
; 2567 :     if( ePipeline == OMAP_DSS_PIPELINE_VIDEO1 )

  05d98	e59d3098	 ldr         r3, [sp, #0x98]
  05d9c	e3530001	 cmp         r3, #1
  05da0	1a000023	 bne         |$LN9@FlipPipeli|

; 2568 :     {
; 2569 :         OUTREG32( &m_pDispRegs->tDISPC_VID1.BA0, pSurface->PhysicalAddr(eRotation, bMirror)+ dwInterlace );

  05da4	e3a03000	 mov         r3, #0
  05da8	e59d200c	 ldr         r2, [sp, #0xC]
  05dac	e59d1000	 ldr         r1, [sp]
  05db0	e59d009c	 ldr         r0, [sp, #0x9C]
  05db4	e5900000	 ldr         r0, [r0]
  05db8	e280e014	 add         lr, r0, #0x14
  05dbc	e59d009c	 ldr         r0, [sp, #0x9C]
  05dc0	e59e4000	 ldr         r4, [lr]
  05dc4	e1a0e00f	 mov         lr, pc
  05dc8	e12fff14	 bx          r4
  05dcc	e58d0070	 str         r0, [sp, #0x70]
  05dd0	e59d2070	 ldr         r2, [sp, #0x70]
  05dd4	e59d3004	 ldr         r3, [sp, #4]
  05dd8	e0822003	 add         r2, r2, r3
  05ddc	e59d3094	 ldr         r3, [sp, #0x94]
  05de0	e2833008	 add         r3, r3, #8
  05de4	e5933000	 ldr         r3, [r3]
  05de8	e28330bc	 add         r3, r3, #0xBC
  05dec	e5832000	 str         r2, [r3]

; 2570 :         OUTREG32( &m_pDispRegs->tDISPC_VID1.BA1, pSurface->PhysicalAddr(eRotation, bMirror) );        

  05df0	e3a03000	 mov         r3, #0
  05df4	e59d200c	 ldr         r2, [sp, #0xC]
  05df8	e59d1000	 ldr         r1, [sp]
  05dfc	e59d009c	 ldr         r0, [sp, #0x9C]
  05e00	e5900000	 ldr         r0, [r0]
  05e04	e280e014	 add         lr, r0, #0x14
  05e08	e59d009c	 ldr         r0, [sp, #0x9C]
  05e0c	e59e4000	 ldr         r4, [lr]
  05e10	e1a0e00f	 mov         lr, pc
  05e14	e12fff14	 bx          r4
  05e18	e58d0074	 str         r0, [sp, #0x74]
  05e1c	e59d3094	 ldr         r3, [sp, #0x94]
  05e20	e2833008	 add         r3, r3, #8
  05e24	e5933000	 ldr         r3, [r3]
  05e28	e28320c0	 add         r2, r3, #0xC0
  05e2c	e59d3074	 ldr         r3, [sp, #0x74]
  05e30	e5823000	 str         r3, [r2]
  05e34		 |$LN9@FlipPipeli|

; 2571 :     }    
; 2572 : 
; 2573 :     //  Update VID2 pipeline display base address
; 2574 :     if( ePipeline == OMAP_DSS_PIPELINE_VIDEO2 )

  05e34	e59d3098	 ldr         r3, [sp, #0x98]
  05e38	e3530002	 cmp         r3, #2
  05e3c	1a000023	 bne         |$LN8@FlipPipeli|

; 2575 :     {
; 2576 :         OUTREG32( &m_pDispRegs->tDISPC_VID2.BA0, pSurface->PhysicalAddr(eRotation, bMirror) + dwInterlace );

  05e40	e3a03000	 mov         r3, #0
  05e44	e59d200c	 ldr         r2, [sp, #0xC]
  05e48	e59d1000	 ldr         r1, [sp]
  05e4c	e59d009c	 ldr         r0, [sp, #0x9C]
  05e50	e5900000	 ldr         r0, [r0]
  05e54	e280e014	 add         lr, r0, #0x14
  05e58	e59d009c	 ldr         r0, [sp, #0x9C]
  05e5c	e59e4000	 ldr         r4, [lr]
  05e60	e1a0e00f	 mov         lr, pc
  05e64	e12fff14	 bx          r4
  05e68	e58d0078	 str         r0, [sp, #0x78]
  05e6c	e59d2078	 ldr         r2, [sp, #0x78]
  05e70	e59d3004	 ldr         r3, [sp, #4]
  05e74	e0822003	 add         r2, r2, r3
  05e78	e59d3094	 ldr         r3, [sp, #0x94]
  05e7c	e2833008	 add         r3, r3, #8
  05e80	e5933000	 ldr         r3, [r3]
  05e84	e2833f53	 add         r3, r3, #0x53, 30
  05e88	e5832000	 str         r2, [r3]

; 2577 :         OUTREG32( &m_pDispRegs->tDISPC_VID2.BA1, pSurface->PhysicalAddr(eRotation, bMirror) );

  05e8c	e3a03000	 mov         r3, #0
  05e90	e59d200c	 ldr         r2, [sp, #0xC]
  05e94	e59d1000	 ldr         r1, [sp]
  05e98	e59d009c	 ldr         r0, [sp, #0x9C]
  05e9c	e5900000	 ldr         r0, [r0]
  05ea0	e280e014	 add         lr, r0, #0x14
  05ea4	e59d009c	 ldr         r0, [sp, #0x9C]
  05ea8	e59e4000	 ldr         r4, [lr]
  05eac	e1a0e00f	 mov         lr, pc
  05eb0	e12fff14	 bx          r4
  05eb4	e58d007c	 str         r0, [sp, #0x7C]
  05eb8	e59d3094	 ldr         r3, [sp, #0x94]
  05ebc	e2833008	 add         r3, r3, #8
  05ec0	e5933000	 ldr         r3, [r3]
  05ec4	e2832e15	 add         r2, r3, #0x15, 28
  05ec8	e59d307c	 ldr         r3, [sp, #0x7C]
  05ecc	e5823000	 str         r3, [r2]
  05ed0		 |$LN8@FlipPipeli|

; 2578 :     }    
; 2579 : 
; 2580 :         
; 2581 :     //  Get the destination for the pipeline
; 2582 :     switch( g_rgPipelineMapping[ePipeline].eDestination )

  05ed0	e59d1098	 ldr         r1, [sp, #0x98]
  05ed4	e3a03020	 mov         r3, #0x20
  05ed8	e0020391	 mul         r2, r1, r3
  05edc	e59f31e4	 ldr         r3, [pc, #0x1E4]
  05ee0	e0833002	 add         r3, r3, r2
  05ee4	e2833004	 add         r3, r3, #4
  05ee8	e5933000	 ldr         r3, [r3]
  05eec	e58d3080	 str         r3, [sp, #0x80]
  05ef0	e59d3080	 ldr         r3, [sp, #0x80]
  05ef4	e3530000	 cmp         r3, #0
  05ef8	0a000003	 beq         |$LN5@FlipPipeli|
  05efc	e59d3080	 ldr         r3, [sp, #0x80]
  05f00	e3530001	 cmp         r3, #1
  05f04	0a000003	 beq         |$LN4@FlipPipeli|
  05f08	ea000005	 b           |$LN3@FlipPipeli|
  05f0c		 |$LN5@FlipPipeli|

; 2583 :     {
; 2584 :         case OMAP_DSS_DESTINATION_LCD:
; 2585 :             //  Set go bit for LCD
; 2586 :             dwDestGo  = DISPC_CONTROL_GOLCD;

  05f0c	e3a03020	 mov         r3, #0x20
  05f10	e58d3008	 str         r3, [sp, #8]

; 2587 :             break;

  05f14	ea000011	 b           |$LN6@FlipPipeli|
  05f18		 |$LN4@FlipPipeli|

; 2588 : 
; 2589 :         case OMAP_DSS_DESTINATION_TVOUT:
; 2590 :             //  Set go bit for TV Out
; 2591 :             dwDestGo  = DISPC_CONTROL_GODIGITAL;

  05f18	e3a03040	 mov         r3, #0x40
  05f1c	e58d3008	 str         r3, [sp, #8]

; 2592 :             break;

  05f20	ea00000e	 b           |$LN6@FlipPipeli|
  05f24		 |$LN3@FlipPipeli|

; 2593 : 
; 2594 :         default:
; 2595 :             ASSERT(0);

  05f24	ea000002	 b           |$LN17@FlipPipeli|
  05f28	e3a03001	 mov         r3, #1
  05f2c	e58d3084	 str         r3, [sp, #0x84]
  05f30	ea000008	 b           |$LN18@FlipPipeli|
  05f34		 |$LN17@FlipPipeli|
  05f34	e3a03c0a	 mov         r3, #0xA, 24
  05f38	e3833023	 orr         r3, r3, #0x23
  05f3c	e59f2190	 ldr         r2, [pc, #0x190]
  05f40	e59f1188	 ldr         r1, [pc, #0x188]
  05f44	e59f0180	 ldr         r0, [pc, #0x180]
  05f48	eb000000	 bl          NKDbgPrintfW
  05f4c	e6000010	 __debugbreak_ce
  05f50	e3a03000	 mov         r3, #0
  05f54	e58d3084	 str         r3, [sp, #0x84]
  05f58		 |$LN18@FlipPipeli|

; 2596 :             goto cleanUp;

  05f58	ea000052	 b           |$LN2@FlipPipeli|
  05f5c	ea000051	 b           |$cleanUp$38679|
  05f60		 |$LN6@FlipPipeli|

; 2597 :     }
; 2598 : 
; 2599 :     //Clear Vysnc since we are about to flip (to avoid false signaling Vsync event)
; 2600 :     SETREG32(&m_pDispRegs->DISPC_IRQSTATUS, DISPC_IRQSTATUS_VSYNC);

  05f60	e59d3094	 ldr         r3, [sp, #0x94]
  05f64	e2833008	 add         r3, r3, #8
  05f68	e5933000	 ldr         r3, [r3]
  05f6c	e2833018	 add         r3, r3, #0x18
  05f70	e5933000	 ldr         r3, [r3]
  05f74	e3832002	 orr         r2, r3, #2
  05f78	e59d3094	 ldr         r3, [sp, #0x94]
  05f7c	e2833008	 add         r3, r3, #8
  05f80	e5933000	 ldr         r3, [r3]
  05f84	e2833018	 add         r3, r3, #0x18
  05f88	e5832000	 str         r2, [r3]

; 2601 :     if(m_bTVEnable == TRUE)

  05f8c	e59d3094	 ldr         r3, [sp, #0x94]
  05f90	e2833b01	 add         r3, r3, #1, 22
  05f94	e28330b4	 add         r3, r3, #0xB4
  05f98	e5933000	 ldr         r3, [r3]
  05f9c	e3530001	 cmp         r3, #1
  05fa0	1a000015	 bne         |$LN1@FlipPipeli|

; 2602 :     {
; 2603 :         SETREG32(&m_pDispRegs->DISPC_IRQSTATUS, DISPC_IRQSTATUS_EVSYNC_EVEN);

  05fa4	e59d3094	 ldr         r3, [sp, #0x94]
  05fa8	e2833008	 add         r3, r3, #8
  05fac	e5933000	 ldr         r3, [r3]
  05fb0	e2833018	 add         r3, r3, #0x18
  05fb4	e5933000	 ldr         r3, [r3]
  05fb8	e3832004	 orr         r2, r3, #4
  05fbc	e59d3094	 ldr         r3, [sp, #0x94]
  05fc0	e2833008	 add         r3, r3, #8
  05fc4	e5933000	 ldr         r3, [r3]
  05fc8	e2833018	 add         r3, r3, #0x18
  05fcc	e5832000	 str         r2, [r3]

; 2604 :         SETREG32(&m_pDispRegs->DISPC_IRQSTATUS, DISPC_IRQSTATUS_EVSYNC_ODD);        

  05fd0	e59d3094	 ldr         r3, [sp, #0x94]
  05fd4	e2833008	 add         r3, r3, #8
  05fd8	e5933000	 ldr         r3, [r3]
  05fdc	e2833018	 add         r3, r3, #0x18
  05fe0	e5933000	 ldr         r3, [r3]
  05fe4	e3832008	 orr         r2, r3, #8
  05fe8	e59d3094	 ldr         r3, [sp, #0x94]
  05fec	e2833008	 add         r3, r3, #8
  05ff0	e5933000	 ldr         r3, [r3]
  05ff4	e2833018	 add         r3, r3, #0x18
  05ff8	e5832000	 str         r2, [r3]
  05ffc		 |$LN1@FlipPipeli|

; 2605 :     }
; 2606 :     //  Flush the shadow registers
; 2607 :     FlushRegs( dwDestGo );

  05ffc	e59d1008	 ldr         r1, [sp, #8]
  06000	e59d0094	 ldr         r0, [sp, #0x94]
  06004	eb000000	 bl          |?FlushRegs@OMAPDisplayController@@IAAHK@Z|

; 2608 :     
; 2609 :     //  Update mapping of pipeline surface    
; 2610 :     g_rgPipelineMapping[ePipeline].pOldSurface = g_rgPipelineMapping[ePipeline].pSurface;

  06008	e59d1098	 ldr         r1, [sp, #0x98]
  0600c	e3a03020	 mov         r3, #0x20
  06010	e0020391	 mul         r2, r1, r3
  06014	e59f30ac	 ldr         r3, [pc, #0xAC]
  06018	e0833002	 add         r3, r3, r2
  0601c	e2830008	 add         r0, r3, #8
  06020	e59d1098	 ldr         r1, [sp, #0x98]
  06024	e3a03020	 mov         r3, #0x20
  06028	e0020391	 mul         r2, r1, r3
  0602c	e59f3094	 ldr         r3, [pc, #0x94]
  06030	e0833002	 add         r3, r3, r2
  06034	e283201c	 add         r2, r3, #0x1C
  06038	e5903000	 ldr         r3, [r0]
  0603c	e5823000	 str         r3, [r2]

; 2611 :     g_rgPipelineMapping[ePipeline].pSurface  = pSurface;

  06040	e59d1098	 ldr         r1, [sp, #0x98]
  06044	e3a03020	 mov         r3, #0x20
  06048	e0020391	 mul         r2, r1, r3
  0604c	e59f3074	 ldr         r3, [pc, #0x74]
  06050	e0833002	 add         r3, r3, r2
  06054	e2832008	 add         r2, r3, #8
  06058	e59d309c	 ldr         r3, [sp, #0x9C]
  0605c	e5823000	 str         r3, [r2]

; 2612 :     
; 2613 :     //  Set the decimation factors for the surface back to normal
; 2614 :     //  Leave the clipping setting as is
; 2615 :     pSurface->SetHorizontalScaling( 1 );

  06060	e3a01001	 mov         r1, #1
  06064	e59d309c	 ldr         r3, [sp, #0x9C]
  06068	e5933000	 ldr         r3, [r3]
  0606c	e2833030	 add         r3, r3, #0x30
  06070	e59d009c	 ldr         r0, [sp, #0x9C]
  06074	e5933000	 ldr         r3, [r3]
  06078	e1a0e00f	 mov         lr, pc
  0607c	e12fff13	 bx          r3

; 2616 :     pSurface->SetVerticalScaling( 1 );

  06080	e3a01001	 mov         r1, #1
  06084	e59d309c	 ldr         r3, [sp, #0x9C]
  06088	e5933000	 ldr         r3, [r3]
  0608c	e2833034	 add         r3, r3, #0x34
  06090	e59d009c	 ldr         r0, [sp, #0x9C]
  06094	e5933000	 ldr         r3, [r3]
  06098	e1a0e00f	 mov         lr, pc
  0609c	e12fff13	 bx          r3

; 2617 : 
; 2618 : 
; 2619 :     //  Result
; 2620 :     bResult = TRUE;         

  060a0	e3a03001	 mov         r3, #1
  060a4	e58d3010	 str         r3, [sp, #0x10]
  060a8		 |$LN2@FlipPipeli|
  060a8		 |$LN12@FlipPipeli|
  060a8		 |$cleanUp$38679|

; 2621 : 
; 2622 : cleanUp:    
; 2623 :     //  Release regs
; 2624 :     ReleaseRegs();

  060a8	e59d0094	 ldr         r0, [sp, #0x94]
  060ac	eb000000	 bl          |?ReleaseRegs@OMAPDisplayController@@IAAHXZ|

; 2625 :     
; 2626 :     //  Return result
; 2627 :     return bResult;

  060b0	e59d3010	 ldr         r3, [sp, #0x10]
  060b4	e58d3034	 str         r3, [sp, #0x34]
  060b8		 |$LN15@FlipPipeli|

; 2628 : }

  060b8	e59d0034	 ldr         r0, [sp, #0x34]
  060bc	e28dd088	 add         sp, sp, #0x88
  060c0	e89d6010	 ldmia       sp, {r4, sp, lr}
  060c4	e12fff1e	 bx          lr
  060c8		 |$LN22@FlipPipeli|
  060c8		 |$LN23@FlipPipeli|
  060c8	00000000	 DCD         |?g_rgPipelineMapping@@3PAUOMAPPipelineConfig@@A|
  060cc		 |$LN24@FlipPipeli|
  060cc	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  060d0		 |$LN25@FlipPipeli|
  060d0	00000000	 DCD         |??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@|
  060d4		 |$LN26@FlipPipeli|
  060d4	00000000	 DCD         |??_C@_1KC@HIABDGPO@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  060d8		 |$LN27@FlipPipeli|
  060d8	00000000	 DCD         |?g_rgPipelineScaling@@3PAUOMAPPipelineScaling@@A|
  060dc		 |$M40647|

			 ENDP  ; |?FlipPipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@PAVOMAPSurface@@@Z|, OMAPDisplayController::FlipPipeline

	EXPORT	|?IsPipelineFlipping@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@PAVOMAPSurface@@H@Z| ; OMAPDisplayController::IsPipelineFlipping

  00090			 AREA	 |.pdata|, PDATA
|$T40671| DCD	|$LN28@IsPipeline|
	DCD	0x4000d104
; Function compile flags: /Odtp

  060dc			 AREA	 |.text|, CODE, ARM

  060dc		 |?IsPipelineFlipping@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@PAVOMAPSurface@@H@Z| PROC ; OMAPDisplayController::IsPipelineFlipping

; 2637 : {

  060dc		 |$LN28@IsPipeline|
  060dc	e1a0c00d	 mov         r12, sp
  060e0	e92d000f	 stmdb       sp!, {r0 - r3}
  060e4	e92d5010	 stmdb       sp!, {r4, r12, lr}
  060e8	e24dd040	 sub         sp, sp, #0x40
  060ec		 |$M40668|

; 2638 :     BOOL                bResult = FALSE;

  060ec	e3a03000	 mov         r3, #0
  060f0	e58d3010	 str         r3, [sp, #0x10]

; 2639 :     OMAP_DSS_ROTATION   eRotation;
; 2640 :     BOOL                bMirror;
; 2641 :     DWORD               dwDestGo = DISPC_CONTROL_GOLCD;

  060f4	e3a03020	 mov         r3, #0x20
  060f8	e58d3008	 str         r3, [sp, #8]

; 2642 :     
; 2643 :     BOOL                bDestGoStatus = FALSE;

  060fc	e3a03000	 mov         r3, #0
  06100	e58d3000	 str         r3, [sp]

; 2644 : 
; 2645 :      //  Check if pipeline is already enabled; if not, no reason to query flip status
; 2646 :     if( g_rgPipelineMapping[ePipeline].bEnabled == FALSE )

  06104	e59d1050	 ldr         r1, [sp, #0x50]
  06108	e3a03020	 mov         r3, #0x20
  0610c	e0020391	 mul         r2, r1, r3
  06110	e59f3304	 ldr         r3, [pc, #0x304]
  06114	e0833002	 add         r3, r3, r2
  06118	e5933000	 ldr         r3, [r3]
  0611c	e3530000	 cmp         r3, #0
  06120	1a000002	 bne         |$LN13@IsPipeline|

; 2647 :         return FALSE;

  06124	e3a03000	 mov         r3, #0
  06128	e58d3014	 str         r3, [sp, #0x14]
  0612c	ea0000b6	 b           |$LN14@IsPipeline|
  06130		 |$LN13@IsPipeline|

; 2648 : 
; 2649 :     //  Access the regs
; 2650 :     if( AccessRegs() == FALSE )

  06130	e59d004c	 ldr         r0, [sp, #0x4C]
  06134	eb000000	 bl          |?AccessRegs@OMAPDisplayController@@IAAHXZ|
  06138	e58d0018	 str         r0, [sp, #0x18]
  0613c	e59d3018	 ldr         r3, [sp, #0x18]
  06140	e3530000	 cmp         r3, #0
  06144	1a000001	 bne         |$LN12@IsPipeline|
  06148	ea0000ab	 b           |$LN11@IsPipeline|

; 2651 :         goto cleanUp;

  0614c	ea0000aa	 b           |$cleanUp$38732|
  06150		 |$LN12@IsPipeline|

; 2652 : 
; 2653 :     //  Get rotation and mirror settings for pipeline output
; 2654 :     eRotation   = g_rgPipelineMapping[ePipeline].eRotation;

  06150	e59d1050	 ldr         r1, [sp, #0x50]
  06154	e3a03020	 mov         r3, #0x20
  06158	e0020391	 mul         r2, r1, r3
  0615c	e59f32b8	 ldr         r3, [pc, #0x2B8]
  06160	e0833002	 add         r3, r3, r2
  06164	e283300c	 add         r3, r3, #0xC
  06168	e5933000	 ldr         r3, [r3]
  0616c	e58d3004	 str         r3, [sp, #4]

; 2655 :     bMirror     = g_rgPipelineMapping[ePipeline].bMirror;

  06170	e59d1050	 ldr         r1, [sp, #0x50]
  06174	e3a03020	 mov         r3, #0x20
  06178	e0020391	 mul         r2, r1, r3
  0617c	e59f3298	 ldr         r3, [pc, #0x298]
  06180	e0833002	 add         r3, r3, r2
  06184	e2833010	 add         r3, r3, #0x10
  06188	e5933000	 ldr         r3, [r3]
  0618c	e58d300c	 str         r3, [sp, #0xC]

; 2656 : 
; 2657 :     //  Get the destination for the pipeline
; 2658 :     switch( g_rgPipelineMapping[ePipeline].eDestination )

  06190	e59d1050	 ldr         r1, [sp, #0x50]
  06194	e3a03020	 mov         r3, #0x20
  06198	e0020391	 mul         r2, r1, r3
  0619c	e59f3278	 ldr         r3, [pc, #0x278]
  061a0	e0833002	 add         r3, r3, r2
  061a4	e2833004	 add         r3, r3, #4
  061a8	e5933000	 ldr         r3, [r3]
  061ac	e58d301c	 str         r3, [sp, #0x1C]
  061b0	e59d301c	 ldr         r3, [sp, #0x1C]
  061b4	e3530000	 cmp         r3, #0
  061b8	0a000003	 beq         |$LN8@IsPipeline|
  061bc	e59d301c	 ldr         r3, [sp, #0x1C]
  061c0	e3530001	 cmp         r3, #1
  061c4	0a000003	 beq         |$LN7@IsPipeline|
  061c8	ea000004	 b           |$LN9@IsPipeline|
  061cc		 |$LN8@IsPipeline|

; 2659 :     {
; 2660 :         case OMAP_DSS_DESTINATION_LCD:
; 2661 :             //  Set go bit for LCD
; 2662 :             dwDestGo  = DISPC_CONTROL_GOLCD;

  061cc	e3a03020	 mov         r3, #0x20
  061d0	e58d3008	 str         r3, [sp, #8]

; 2663 :             break;

  061d4	ea000001	 b           |$LN9@IsPipeline|
  061d8		 |$LN7@IsPipeline|

; 2664 : 
; 2665 :         case OMAP_DSS_DESTINATION_TVOUT:
; 2666 :             //  Set go bit for TV Out
; 2667 :             dwDestGo  = DISPC_CONTROL_GODIGITAL;

  061d8	e3a03040	 mov         r3, #0x40
  061dc	e58d3008	 str         r3, [sp, #8]
  061e0		 |$LN9@IsPipeline|

; 2668 :             break;
; 2669 :     }
; 2670 : 
; 2671 :     //Test if we have already flipped (destGo has been cleared)
; 2672 :     bDestGoStatus = ((INREG32(&m_pDispRegs->DISPC_CONTROL) & dwDestGo) == dwDestGo);

  061e0	e59d304c	 ldr         r3, [sp, #0x4C]
  061e4	e2833008	 add         r3, r3, #8
  061e8	e5933000	 ldr         r3, [r3]
  061ec	e2833040	 add         r3, r3, #0x40
  061f0	e5932000	 ldr         r2, [r3]
  061f4	e59d3008	 ldr         r3, [sp, #8]
  061f8	e0022003	 and         r2, r2, r3
  061fc	e59d3008	 ldr         r3, [sp, #8]
  06200	e1520003	 cmp         r2, r3
  06204	1a000002	 bne         |$LN16@IsPipeline|
  06208	e3a03001	 mov         r3, #1
  0620c	e58d3020	 str         r3, [sp, #0x20]
  06210	ea000001	 b           |$LN17@IsPipeline|
  06214		 |$LN16@IsPipeline|
  06214	e3a03000	 mov         r3, #0
  06218	e58d3020	 str         r3, [sp, #0x20]
  0621c		 |$LN17@IsPipeline|
  0621c	e59d3020	 ldr         r3, [sp, #0x20]
  06220	e58d3000	 str         r3, [sp]

; 2673 :     
; 2674 :     if (!matchExactSurface)

  06224	e59d3058	 ldr         r3, [sp, #0x58]
  06228	e3530000	 cmp         r3, #0
  0622c	1a000003	 bne         |$LN6@IsPipeline|

; 2675 :     {
; 2676 :         /* return value based on Go bit only */
; 2677 :         bResult=bDestGoStatus;

  06230	e59d3000	 ldr         r3, [sp]
  06234	e58d3010	 str         r3, [sp, #0x10]
  06238	ea00006f	 b           |$LN5@IsPipeline|

; 2678 :         goto cleanUp;

  0623c	ea00006e	 b           |$cleanUp$38732|
  06240		 |$LN6@IsPipeline|

; 2679 :     }
; 2680 : 
; 2681 :     /* else check for BA0 and pOldSurface */
; 2682 :     if( ePipeline == OMAP_DSS_PIPELINE_GFX )

  06240	e59d3050	 ldr         r3, [sp, #0x50]
  06244	e3530000	 cmp         r3, #0
  06248	1a000019	 bne         |$LN4@IsPipeline|

; 2683 :     {
; 2684 :         bResult = (INREG32(&m_pDispRegs->DISPC_GFX_BA0) == pSurface->PhysicalAddr(eRotation, bMirror));            

  0624c	e3a03000	 mov         r3, #0
  06250	e59d200c	 ldr         r2, [sp, #0xC]
  06254	e59d1004	 ldr         r1, [sp, #4]
  06258	e59d0054	 ldr         r0, [sp, #0x54]
  0625c	e5900000	 ldr         r0, [r0]
  06260	e280e014	 add         lr, r0, #0x14
  06264	e59d0054	 ldr         r0, [sp, #0x54]
  06268	e59e4000	 ldr         r4, [lr]
  0626c	e1a0e00f	 mov         lr, pc
  06270	e12fff14	 bx          r4
  06274	e58d0024	 str         r0, [sp, #0x24]
  06278	e59d304c	 ldr         r3, [sp, #0x4C]
  0627c	e2833008	 add         r3, r3, #8
  06280	e5933000	 ldr         r3, [r3]
  06284	e2833080	 add         r3, r3, #0x80
  06288	e5932000	 ldr         r2, [r3]
  0628c	e59d3024	 ldr         r3, [sp, #0x24]
  06290	e1520003	 cmp         r2, r3
  06294	1a000002	 bne         |$LN18@IsPipeline|
  06298	e3a03001	 mov         r3, #1
  0629c	e58d3028	 str         r3, [sp, #0x28]
  062a0	ea000001	 b           |$LN19@IsPipeline|
  062a4		 |$LN18@IsPipeline|
  062a4	e3a03000	 mov         r3, #0
  062a8	e58d3028	 str         r3, [sp, #0x28]
  062ac		 |$LN19@IsPipeline|
  062ac	e59d3028	 ldr         r3, [sp, #0x28]
  062b0	e58d3010	 str         r3, [sp, #0x10]
  062b4		 |$LN4@IsPipeline|

; 2685 :     }
; 2686 : 
; 2687 :     //  check VID1 pipeline display base address
; 2688 :     if( ePipeline == OMAP_DSS_PIPELINE_VIDEO1 )

  062b4	e59d3050	 ldr         r3, [sp, #0x50]
  062b8	e3530001	 cmp         r3, #1
  062bc	1a000019	 bne         |$LN3@IsPipeline|

; 2689 :     {
; 2690 :         bResult = INREG32(&m_pDispRegs->tDISPC_VID1.BA1) == pSurface->PhysicalAddr(eRotation, bMirror);

  062c0	e3a03000	 mov         r3, #0
  062c4	e59d200c	 ldr         r2, [sp, #0xC]
  062c8	e59d1004	 ldr         r1, [sp, #4]
  062cc	e59d0054	 ldr         r0, [sp, #0x54]
  062d0	e5900000	 ldr         r0, [r0]
  062d4	e280e014	 add         lr, r0, #0x14
  062d8	e59d0054	 ldr         r0, [sp, #0x54]
  062dc	e59e4000	 ldr         r4, [lr]
  062e0	e1a0e00f	 mov         lr, pc
  062e4	e12fff14	 bx          r4
  062e8	e58d002c	 str         r0, [sp, #0x2C]
  062ec	e59d304c	 ldr         r3, [sp, #0x4C]
  062f0	e2833008	 add         r3, r3, #8
  062f4	e5933000	 ldr         r3, [r3]
  062f8	e28330c0	 add         r3, r3, #0xC0
  062fc	e5932000	 ldr         r2, [r3]
  06300	e59d302c	 ldr         r3, [sp, #0x2C]
  06304	e1520003	 cmp         r2, r3
  06308	1a000002	 bne         |$LN20@IsPipeline|
  0630c	e3a03001	 mov         r3, #1
  06310	e58d3030	 str         r3, [sp, #0x30]
  06314	ea000001	 b           |$LN21@IsPipeline|
  06318		 |$LN20@IsPipeline|
  06318	e3a03000	 mov         r3, #0
  0631c	e58d3030	 str         r3, [sp, #0x30]
  06320		 |$LN21@IsPipeline|
  06320	e59d3030	 ldr         r3, [sp, #0x30]
  06324	e58d3010	 str         r3, [sp, #0x10]
  06328		 |$LN3@IsPipeline|

; 2691 :     }
; 2692 : 
; 2693 :     //  check VID2 pipeline display base address
; 2694 :     if( ePipeline == OMAP_DSS_PIPELINE_VIDEO2 )

  06328	e59d3050	 ldr         r3, [sp, #0x50]
  0632c	e3530002	 cmp         r3, #2
  06330	1a000019	 bne         |$LN2@IsPipeline|

; 2695 :     {
; 2696 :         bResult = INREG32(&m_pDispRegs->tDISPC_VID2.BA1) == pSurface->PhysicalAddr(eRotation, bMirror);

  06334	e3a03000	 mov         r3, #0
  06338	e59d200c	 ldr         r2, [sp, #0xC]
  0633c	e59d1004	 ldr         r1, [sp, #4]
  06340	e59d0054	 ldr         r0, [sp, #0x54]
  06344	e5900000	 ldr         r0, [r0]
  06348	e280e014	 add         lr, r0, #0x14
  0634c	e59d0054	 ldr         r0, [sp, #0x54]
  06350	e59e4000	 ldr         r4, [lr]
  06354	e1a0e00f	 mov         lr, pc
  06358	e12fff14	 bx          r4
  0635c	e58d0034	 str         r0, [sp, #0x34]
  06360	e59d304c	 ldr         r3, [sp, #0x4C]
  06364	e2833008	 add         r3, r3, #8
  06368	e5933000	 ldr         r3, [r3]
  0636c	e2833e15	 add         r3, r3, #0x15, 28
  06370	e5932000	 ldr         r2, [r3]
  06374	e59d3034	 ldr         r3, [sp, #0x34]
  06378	e1520003	 cmp         r2, r3
  0637c	1a000002	 bne         |$LN22@IsPipeline|
  06380	e3a03001	 mov         r3, #1
  06384	e58d3038	 str         r3, [sp, #0x38]
  06388	ea000001	 b           |$LN23@IsPipeline|
  0638c		 |$LN22@IsPipeline|
  0638c	e3a03000	 mov         r3, #0
  06390	e58d3038	 str         r3, [sp, #0x38]
  06394		 |$LN23@IsPipeline|
  06394	e59d3038	 ldr         r3, [sp, #0x38]
  06398	e58d3010	 str         r3, [sp, #0x10]
  0639c		 |$LN2@IsPipeline|

; 2697 :     }
; 2698 :     
; 2699 :     //Test if we have are flipping (destGo has not been cleared)
; 2700 :     if(bDestGoStatus)

  0639c	e59d3000	 ldr         r3, [sp]
  063a0	e3530000	 cmp         r3, #0
  063a4	0a000012	 beq         |$LN1@IsPipeline|

; 2701 :     {       
; 2702 :         /* Since destGo is pending the shadow register is different than actual BA0 being DMA'ed out.
; 2703 :            So compare the surfaces. The g_rgPipelineMapping.pOldSurface stores the actual surface being DMA'ed out if the GO Bit is not cleared*/        
; 2704 :         bResult |= (g_rgPipelineMapping[ePipeline].pOldSurface == pSurface);

  063a8	e59d1050	 ldr         r1, [sp, #0x50]
  063ac	e3a03020	 mov         r3, #0x20
  063b0	e0020391	 mul         r2, r1, r3
  063b4	e59f3060	 ldr         r3, [pc, #0x60]
  063b8	e0833002	 add         r3, r3, r2
  063bc	e283301c	 add         r3, r3, #0x1C
  063c0	e5932000	 ldr         r2, [r3]
  063c4	e59d3054	 ldr         r3, [sp, #0x54]
  063c8	e1520003	 cmp         r2, r3
  063cc	1a000002	 bne         |$LN24@IsPipeline|
  063d0	e3a03001	 mov         r3, #1
  063d4	e58d303c	 str         r3, [sp, #0x3C]
  063d8	ea000001	 b           |$LN25@IsPipeline|
  063dc		 |$LN24@IsPipeline|
  063dc	e3a03000	 mov         r3, #0
  063e0	e58d303c	 str         r3, [sp, #0x3C]
  063e4		 |$LN25@IsPipeline|
  063e4	e59d2010	 ldr         r2, [sp, #0x10]
  063e8	e59d303c	 ldr         r3, [sp, #0x3C]
  063ec	e1823003	 orr         r3, r2, r3
  063f0	e58d3010	 str         r3, [sp, #0x10]
  063f4		 |$LN1@IsPipeline|

; 2705 :     }       
; 2706 :     
; 2707 : 
; 2708 :     //  Result
; 2709 :     bResult = TRUE;

  063f4	e3a03001	 mov         r3, #1
  063f8	e58d3010	 str         r3, [sp, #0x10]
  063fc		 |$LN5@IsPipeline|
  063fc		 |$LN11@IsPipeline|
  063fc		 |$cleanUp$38732|

; 2710 : 
; 2711 : cleanUp:
; 2712 :     //  Release regs
; 2713 :     ReleaseRegs();

  063fc	e59d004c	 ldr         r0, [sp, #0x4C]
  06400	eb000000	 bl          |?ReleaseRegs@OMAPDisplayController@@IAAHXZ|

; 2714 : 
; 2715 :     //  Return result
; 2716 :     return bResult;

  06404	e59d3010	 ldr         r3, [sp, #0x10]
  06408	e58d3014	 str         r3, [sp, #0x14]
  0640c		 |$LN14@IsPipeline|

; 2717 : 
; 2718 : }

  0640c	e59d0014	 ldr         r0, [sp, #0x14]
  06410	e28dd040	 add         sp, sp, #0x40
  06414	e89d6010	 ldmia       sp, {r4, sp, lr}
  06418	e12fff1e	 bx          lr
  0641c		 |$LN29@IsPipeline|
  0641c		 |$LN30@IsPipeline|
  0641c	00000000	 DCD         |?g_rgPipelineMapping@@3PAUOMAPPipelineConfig@@A|
  06420		 |$M40669|

			 ENDP  ; |?IsPipelineFlipping@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@PAVOMAPSurface@@H@Z|, OMAPDisplayController::IsPipelineFlipping

	EXPORT	|?MovePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@JJ@Z| ; OMAPDisplayController::MovePipeline

  00098			 AREA	 |.pdata|, PDATA
|$T40682| DCD	|$LN26@MovePipeli|
	DCD	0x4000d904
; Function compile flags: /Odtp

  06420			 AREA	 |.text|, CODE, ARM

  06420		 |?MovePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@JJ@Z| PROC ; OMAPDisplayController::MovePipeline

; 2726 : {

  06420		 |$LN26@MovePipeli|
  06420	e1a0c00d	 mov         r12, sp
  06424	e92d000f	 stmdb       sp!, {r0 - r3}
  06428	e92d5000	 stmdb       sp!, {r12, lr}
  0642c	e24dd034	 sub         sp, sp, #0x34
  06430		 |$M40679|

; 2727 :     BOOL    bResult = FALSE;

  06430	e3a03000	 mov         r3, #0
  06434	e58d3008	 str         r3, [sp, #8]

; 2728 :     DWORD   dwDestGo = DISPC_CONTROL_GOLCD;

  06438	e3a03020	 mov         r3, #0x20
  0643c	e58d3004	 str         r3, [sp, #4]

; 2729 :     DWORD   dwX, dwY;
; 2730 :     
; 2731 : 
; 2732 :     //  Check if pipeline is enabled; ignore operation if not
; 2733 :     if( g_rgPipelineMapping[ePipeline].bEnabled == FALSE )

  06440	e59d1040	 ldr         r1, [sp, #0x40]
  06444	e3a03020	 mov         r3, #0x20
  06448	e0020391	 mul         r2, r1, r3
  0644c	e59f3320	 ldr         r3, [pc, #0x320]
  06450	e0833002	 add         r3, r3, r2
  06454	e5933000	 ldr         r3, [r3]
  06458	e3530000	 cmp         r3, #0
  0645c	1a000002	 bne         |$LN18@MovePipeli|

; 2734 :         return FALSE;

  06460	e3a03000	 mov         r3, #0
  06464	e58d3010	 str         r3, [sp, #0x10]
  06468	ea0000bd	 b           |$LN19@MovePipeli|
  0646c		 |$LN18@MovePipeli|

; 2735 : 
; 2736 :     //  Access the regs
; 2737 :     if( AccessRegs() == FALSE )

  0646c	e59d003c	 ldr         r0, [sp, #0x3C]
  06470	eb000000	 bl          |?AccessRegs@OMAPDisplayController@@IAAHXZ|
  06474	e58d0014	 str         r0, [sp, #0x14]
  06478	e59d3014	 ldr         r3, [sp, #0x14]
  0647c	e3530000	 cmp         r3, #0
  06480	1a000001	 bne         |$LN17@MovePipeli|
  06484	ea0000b2	 b           |$LN16@MovePipeli|

; 2738 :         goto cleanUp;

  06488	ea0000b1	 b           |$cleanUp$38762|
  0648c		 |$LN17@MovePipeli|

; 2739 : 
; 2740 :     //  Compute new origin based on pipeline rotation angle
; 2741 :     switch( g_rgPipelineMapping[ePipeline].eRotation )

  0648c	e59d1040	 ldr         r1, [sp, #0x40]
  06490	e3a03020	 mov         r3, #0x20
  06494	e0020391	 mul         r2, r1, r3
  06498	e59f32d4	 ldr         r3, [pc, #0x2D4]
  0649c	e0833002	 add         r3, r3, r2
  064a0	e283300c	 add         r3, r3, #0xC
  064a4	e5933000	 ldr         r3, [r3]
  064a8	e58d3018	 str         r3, [sp, #0x18]
  064ac	e59d3018	 ldr         r3, [sp, #0x18]
  064b0	e35300b4	 cmp         r3, #0xB4
  064b4	ca000009	 bgt         |$LN23@MovePipeli|
  064b8	e59d3018	 ldr         r3, [sp, #0x18]
  064bc	e35300b4	 cmp         r3, #0xB4
  064c0	0a000023	 beq         |$LN11@MovePipeli|
  064c4	e59d3018	 ldr         r3, [sp, #0x18]
  064c8	e3530000	 cmp         r3, #0
  064cc	0a000009	 beq         |$LN13@MovePipeli|
  064d0	e59d3018	 ldr         r3, [sp, #0x18]
  064d4	e353005a	 cmp         r3, #0x5A
  064d8	0a00000b	 beq         |$LN12@MovePipeli|
  064dc	ea00004d	 b           |$LN9@MovePipeli|
  064e0		 |$LN23@MovePipeli|
  064e0	e59d2018	 ldr         r2, [sp, #0x18]
  064e4	e3a03c01	 mov         r3, #1, 24
  064e8	e383300e	 orr         r3, r3, #0xE
  064ec	e1520003	 cmp         r2, r3
  064f0	0a000036	 beq         |$LN10@MovePipeli|
  064f4	ea000047	 b           |$LN9@MovePipeli|
  064f8		 |$LN13@MovePipeli|

; 2742 :     {
; 2743 :         case OMAP_DSS_ROTATION_0:
; 2744 :             dwX = lXPos;

  064f8	e59d3044	 ldr         r3, [sp, #0x44]
  064fc	e58d3000	 str         r3, [sp]

; 2745 :             dwY = lYPos;

  06500	e59d3048	 ldr         r3, [sp, #0x48]
  06504	e58d300c	 str         r3, [sp, #0xC]

; 2746 :             break;

  06508	ea000051	 b           |$LN14@MovePipeli|
  0650c		 |$LN12@MovePipeli|

; 2747 :             
; 2748 :         case OMAP_DSS_ROTATION_90:
; 2749 :             dwX = lYPos;

  0650c	e59d3048	 ldr         r3, [sp, #0x48]
  06510	e58d3000	 str         r3, [sp]

; 2750 :             dwY = GetLCDHeight() - g_rgPipelineMapping[ePipeline].dwDestHeight - lXPos;

  06514	e59d003c	 ldr         r0, [sp, #0x3C]
  06518	eb000000	 bl          |?GetLCDHeight@OMAPDisplayController@@QAAKXZ|
  0651c	e58d001c	 str         r0, [sp, #0x1C]
  06520	e59d1040	 ldr         r1, [sp, #0x40]
  06524	e3a03020	 mov         r3, #0x20
  06528	e0020391	 mul         r2, r1, r3
  0652c	e59f3240	 ldr         r3, [pc, #0x240]
  06530	e0833002	 add         r3, r3, r2
  06534	e2833018	 add         r3, r3, #0x18
  06538	e59d201c	 ldr         r2, [sp, #0x1C]
  0653c	e5933000	 ldr         r3, [r3]
  06540	e0422003	 sub         r2, r2, r3
  06544	e59d3044	 ldr         r3, [sp, #0x44]
  06548	e0423003	 sub         r3, r2, r3
  0654c	e58d300c	 str         r3, [sp, #0xC]

; 2751 :             break;

  06550	ea00003f	 b           |$LN14@MovePipeli|
  06554		 |$LN11@MovePipeli|

; 2752 :             
; 2753 :         case OMAP_DSS_ROTATION_180:
; 2754 :             dwX = GetLCDWidth() - g_rgPipelineMapping[ePipeline].dwDestWidth - lXPos;

  06554	e59d003c	 ldr         r0, [sp, #0x3C]
  06558	eb000000	 bl          |?GetLCDWidth@OMAPDisplayController@@QAAKXZ|
  0655c	e58d0020	 str         r0, [sp, #0x20]
  06560	e59d1040	 ldr         r1, [sp, #0x40]
  06564	e3a03020	 mov         r3, #0x20
  06568	e0020391	 mul         r2, r1, r3
  0656c	e59f3200	 ldr         r3, [pc, #0x200]
  06570	e0833002	 add         r3, r3, r2
  06574	e2833014	 add         r3, r3, #0x14
  06578	e59d2020	 ldr         r2, [sp, #0x20]
  0657c	e5933000	 ldr         r3, [r3]
  06580	e0422003	 sub         r2, r2, r3
  06584	e59d3044	 ldr         r3, [sp, #0x44]
  06588	e0423003	 sub         r3, r2, r3
  0658c	e58d3000	 str         r3, [sp]

; 2755 :             dwY = GetLCDHeight() - g_rgPipelineMapping[ePipeline].dwDestHeight - lYPos;

  06590	e59d003c	 ldr         r0, [sp, #0x3C]
  06594	eb000000	 bl          |?GetLCDHeight@OMAPDisplayController@@QAAKXZ|
  06598	e58d0024	 str         r0, [sp, #0x24]
  0659c	e59d1040	 ldr         r1, [sp, #0x40]
  065a0	e3a03020	 mov         r3, #0x20
  065a4	e0020391	 mul         r2, r1, r3
  065a8	e59f31c4	 ldr         r3, [pc, #0x1C4]
  065ac	e0833002	 add         r3, r3, r2
  065b0	e2833018	 add         r3, r3, #0x18
  065b4	e59d2024	 ldr         r2, [sp, #0x24]
  065b8	e5933000	 ldr         r3, [r3]
  065bc	e0422003	 sub         r2, r2, r3
  065c0	e59d3048	 ldr         r3, [sp, #0x48]
  065c4	e0423003	 sub         r3, r2, r3
  065c8	e58d300c	 str         r3, [sp, #0xC]

; 2756 :             break;

  065cc	ea000020	 b           |$LN14@MovePipeli|
  065d0		 |$LN10@MovePipeli|

; 2757 :             
; 2758 :         case OMAP_DSS_ROTATION_270:
; 2759 :             dwX = GetLCDWidth() - g_rgPipelineMapping[ePipeline].dwDestWidth - lYPos;

  065d0	e59d003c	 ldr         r0, [sp, #0x3C]
  065d4	eb000000	 bl          |?GetLCDWidth@OMAPDisplayController@@QAAKXZ|
  065d8	e58d0028	 str         r0, [sp, #0x28]
  065dc	e59d1040	 ldr         r1, [sp, #0x40]
  065e0	e3a03020	 mov         r3, #0x20
  065e4	e0020391	 mul         r2, r1, r3
  065e8	e59f3184	 ldr         r3, [pc, #0x184]
  065ec	e0833002	 add         r3, r3, r2
  065f0	e2833014	 add         r3, r3, #0x14
  065f4	e59d2028	 ldr         r2, [sp, #0x28]
  065f8	e5933000	 ldr         r3, [r3]
  065fc	e0422003	 sub         r2, r2, r3
  06600	e59d3048	 ldr         r3, [sp, #0x48]
  06604	e0423003	 sub         r3, r2, r3
  06608	e58d3000	 str         r3, [sp]

; 2760 :             dwY = lXPos;

  0660c	e59d3044	 ldr         r3, [sp, #0x44]
  06610	e58d300c	 str         r3, [sp, #0xC]

; 2761 :             break;

  06614	ea00000e	 b           |$LN14@MovePipeli|
  06618		 |$LN9@MovePipeli|

; 2762 : 
; 2763 :         default:
; 2764 :             ASSERT(0);

  06618	ea000002	 b           |$LN21@MovePipeli|
  0661c	e3a03001	 mov         r3, #1
  06620	e58d302c	 str         r3, [sp, #0x2C]
  06624	ea000008	 b           |$LN22@MovePipeli|
  06628		 |$LN21@MovePipeli|
  06628	e3a03c0a	 mov         r3, #0xA, 24
  0662c	e38330cc	 orr         r3, r3, #0xCC
  06630	e59f2148	 ldr         r2, [pc, #0x148]
  06634	e59f1140	 ldr         r1, [pc, #0x140]
  06638	e59f0138	 ldr         r0, [pc, #0x138]
  0663c	eb000000	 bl          NKDbgPrintfW
  06640	e6000010	 __debugbreak_ce
  06644	e3a03000	 mov         r3, #0
  06648	e58d302c	 str         r3, [sp, #0x2C]
  0664c		 |$LN22@MovePipeli|

; 2765 :             goto cleanUp;

  0664c	ea000040	 b           |$LN8@MovePipeli|
  06650	ea00003f	 b           |$cleanUp$38762|
  06654		 |$LN14@MovePipeli|

; 2766 :     }
; 2767 : 
; 2768 : 
; 2769 :     //  Update GFX pipeline display position
; 2770 :     if( ePipeline == OMAP_DSS_PIPELINE_GFX )

  06654	e59d3040	 ldr         r3, [sp, #0x40]
  06658	e3530000	 cmp         r3, #0
  0665c	1a000008	 bne         |$LN7@MovePipeli|

; 2771 :     {
; 2772 :         OUTREG32( &m_pDispRegs->DISPC_GFX_POSITION,
; 2773 :                     DISPC_GFX_POS_GFXPOSX(dwX) |
; 2774 :                     DISPC_GFX_POS_GFXPOSY(dwY)
; 2775 :                     );

  06660	e59d300c	 ldr         r3, [sp, #0xC]
  06664	e1a02803	 mov         r2, r3, lsl #16
  06668	e59d3000	 ldr         r3, [sp]
  0666c	e1832002	 orr         r2, r3, r2
  06670	e59d303c	 ldr         r3, [sp, #0x3C]
  06674	e2833008	 add         r3, r3, #8
  06678	e5933000	 ldr         r3, [r3]
  0667c	e2833088	 add         r3, r3, #0x88
  06680	e5832000	 str         r2, [r3]
  06684		 |$LN7@MovePipeli|

; 2776 :     }
; 2777 : 
; 2778 :     //  Update VID1 pipeline display position
; 2779 :     if( ePipeline == OMAP_DSS_PIPELINE_VIDEO1 )

  06684	e59d3040	 ldr         r3, [sp, #0x40]
  06688	e3530001	 cmp         r3, #1
  0668c	1a000008	 bne         |$LN6@MovePipeli|

; 2780 :     {
; 2781 :         OUTREG32( &m_pDispRegs->tDISPC_VID1.POSITION,
; 2782 :                     DISPC_VID_POS_VIDPOSX(dwX) |
; 2783 :                     DISPC_VID_POS_VIDPOSY(dwY)
; 2784 :                     );

  06690	e59d300c	 ldr         r3, [sp, #0xC]
  06694	e1a02803	 mov         r2, r3, lsl #16
  06698	e59d3000	 ldr         r3, [sp]
  0669c	e1832002	 orr         r2, r3, r2
  066a0	e59d303c	 ldr         r3, [sp, #0x3C]
  066a4	e2833008	 add         r3, r3, #8
  066a8	e5933000	 ldr         r3, [r3]
  066ac	e28330c4	 add         r3, r3, #0xC4
  066b0	e5832000	 str         r2, [r3]
  066b4		 |$LN6@MovePipeli|

; 2785 :     }
; 2786 : 
; 2787 :     //  Update VID2 pipeline display position
; 2788 :     if( ePipeline == OMAP_DSS_PIPELINE_VIDEO2 )

  066b4	e59d3040	 ldr         r3, [sp, #0x40]
  066b8	e3530002	 cmp         r3, #2
  066bc	1a000008	 bne         |$LN5@MovePipeli|

; 2789 :     {
; 2790 :         OUTREG32( &m_pDispRegs->tDISPC_VID2.POSITION,
; 2791 :                     DISPC_VID_POS_VIDPOSX(dwX) |
; 2792 :                     DISPC_VID_POS_VIDPOSY(dwY)
; 2793 :                     );

  066c0	e59d300c	 ldr         r3, [sp, #0xC]
  066c4	e1a02803	 mov         r2, r3, lsl #16
  066c8	e59d3000	 ldr         r3, [sp]
  066cc	e1832002	 orr         r2, r3, r2
  066d0	e59d303c	 ldr         r3, [sp, #0x3C]
  066d4	e2833008	 add         r3, r3, #8
  066d8	e5933000	 ldr         r3, [r3]
  066dc	e2833f55	 add         r3, r3, #0x55, 30
  066e0	e5832000	 str         r2, [r3]
  066e4		 |$LN5@MovePipeli|

; 2794 :     }
; 2795 : 
; 2796 : 
; 2797 :     //  Get the destination for the pipeline
; 2798 :     switch( g_rgPipelineMapping[ePipeline].eDestination )

  066e4	e59d1040	 ldr         r1, [sp, #0x40]
  066e8	e3a03020	 mov         r3, #0x20
  066ec	e0020391	 mul         r2, r1, r3
  066f0	e59f307c	 ldr         r3, [pc, #0x7C]
  066f4	e0833002	 add         r3, r3, r2
  066f8	e2833004	 add         r3, r3, #4
  066fc	e5933000	 ldr         r3, [r3]
  06700	e58d3030	 str         r3, [sp, #0x30]
  06704	e59d3030	 ldr         r3, [sp, #0x30]
  06708	e3530000	 cmp         r3, #0
  0670c	0a000003	 beq         |$LN2@MovePipeli|
  06710	e59d3030	 ldr         r3, [sp, #0x30]
  06714	e3530001	 cmp         r3, #1
  06718	0a000003	 beq         |$LN1@MovePipeli|
  0671c	ea000004	 b           |$LN3@MovePipeli|
  06720		 |$LN2@MovePipeli|

; 2799 :     {
; 2800 :         case OMAP_DSS_DESTINATION_LCD:
; 2801 :             //  Set go bit for LCD
; 2802 :             dwDestGo  = DISPC_CONTROL_GOLCD;

  06720	e3a03020	 mov         r3, #0x20
  06724	e58d3004	 str         r3, [sp, #4]

; 2803 :             break;

  06728	ea000001	 b           |$LN3@MovePipeli|
  0672c		 |$LN1@MovePipeli|

; 2804 : 
; 2805 :         case OMAP_DSS_DESTINATION_TVOUT:
; 2806 :             //  Set go bit for TV Out
; 2807 :             dwDestGo  = DISPC_CONTROL_GODIGITAL;

  0672c	e3a03040	 mov         r3, #0x40
  06730	e58d3004	 str         r3, [sp, #4]
  06734		 |$LN3@MovePipeli|

; 2808 :             break;
; 2809 :     }
; 2810 : 
; 2811 : 
; 2812 :     //  Enable/update overlay optimization
; 2813 :     EnableOverlayOptimization( TRUE );

  06734	e3a01001	 mov         r1, #1
  06738	e59d003c	 ldr         r0, [sp, #0x3C]
  0673c	eb000000	 bl          |?EnableOverlayOptimization@OMAPDisplayController@@QAAXH@Z|

; 2814 : 
; 2815 :     //  Flush the shadow registers
; 2816 :     FlushRegs( dwDestGo );

  06740	e59d1004	 ldr         r1, [sp, #4]
  06744	e59d003c	 ldr         r0, [sp, #0x3C]
  06748	eb000000	 bl          |?FlushRegs@OMAPDisplayController@@IAAHK@Z|

; 2817 : 
; 2818 : 
; 2819 :     //  Result
; 2820 :     bResult = TRUE;

  0674c	e3a03001	 mov         r3, #1
  06750	e58d3008	 str         r3, [sp, #8]
  06754		 |$LN8@MovePipeli|
  06754		 |$LN16@MovePipeli|
  06754		 |$cleanUp$38762|

; 2821 : 
; 2822 : cleanUp:
; 2823 :     //  Release regs
; 2824 :     ReleaseRegs();

  06754	e59d003c	 ldr         r0, [sp, #0x3C]
  06758	eb000000	 bl          |?ReleaseRegs@OMAPDisplayController@@IAAHXZ|

; 2825 : 
; 2826 :     //  Return result
; 2827 :     return bResult;

  0675c	e59d3008	 ldr         r3, [sp, #8]
  06760	e58d3010	 str         r3, [sp, #0x10]
  06764		 |$LN19@MovePipeli|

; 2828 : }

  06764	e59d0010	 ldr         r0, [sp, #0x10]
  06768	e28dd034	 add         sp, sp, #0x34
  0676c	e89d6000	 ldmia       sp, {sp, lr}
  06770	e12fff1e	 bx          lr
  06774		 |$LN27@MovePipeli|
  06774		 |$LN28@MovePipeli|
  06774	00000000	 DCD         |?g_rgPipelineMapping@@3PAUOMAPPipelineConfig@@A|
  06778		 |$LN29@MovePipeli|
  06778	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  0677c		 |$LN30@MovePipeli|
  0677c	00000000	 DCD         |??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@|
  06780		 |$LN31@MovePipeli|
  06780	00000000	 DCD         |??_C@_1KC@HIABDGPO@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  06784		 |$M40680|

			 ENDP  ; |?MovePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@JJ@Z|, OMAPDisplayController::MovePipeline

	EXPORT	|?RotatePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@W4OMAP_DSS_ROTATION@@@Z| ; OMAPDisplayController::RotatePipeline

  000a0			 AREA	 |.pdata|, PDATA
|$T40700| DCD	|$LN28@RotatePipe|
	DCD	0x40021804
; Function compile flags: /Odtp

  06784			 AREA	 |.text|, CODE, ARM

  06784		 |?RotatePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@W4OMAP_DSS_ROTATION@@@Z| PROC ; OMAPDisplayController::RotatePipeline

; 2836 : {

  06784		 |$LN28@RotatePipe|
  06784	e1a0c00d	 mov         r12, sp
  06788	e92d0007	 stmdb       sp!, {r0 - r2}
  0678c	e92d5010	 stmdb       sp!, {r4, r12, lr}
  06790	e24dd06c	 sub         sp, sp, #0x6C
  06794		 |$M40697|

; 2837 :     BOOL    bResult = FALSE;

  06794	e3a03000	 mov         r3, #0
  06798	e58d300c	 str         r3, [sp, #0xC]

; 2838 :     OMAPSurface*        pSurface;
; 2839 :     BOOL                bMirror = FALSE;

  0679c	e3a03000	 mov         r3, #0
  067a0	e58d3008	 str         r3, [sp, #8]

; 2840 :     DWORD               dwVidRotation = 0;

  067a4	e3a03000	 mov         r3, #0
  067a8	e58d3010	 str         r3, [sp, #0x10]

; 2841 :     DWORD               dwHorzDecimation = 1;

  067ac	e3a03001	 mov         r3, #1
  067b0	e58d3018	 str         r3, [sp, #0x18]

; 2842 :     DWORD               dwVertDecimation = 1;

  067b4	e3a03001	 mov         r3, #1
  067b8	e58d3014	 str         r3, [sp, #0x14]

; 2843 :     DWORD               dwInterlace = 0;

  067bc	e3a03000	 mov         r3, #0
  067c0	e58d3000	 str         r3, [sp]

; 2844 :     
; 2845 :     
; 2846 :     //  If no change in the rotation, do nothing
; 2847 :     if( g_rgPipelineMapping[ePipeline].eRotation == eRotation )

  067c4	e59d107c	 ldr         r1, [sp, #0x7C]
  067c8	e3a03020	 mov         r3, #0x20
  067cc	e0020391	 mul         r2, r1, r3
  067d0	e59f37f8	 ldr         r3, [pc, #0x7F8]
  067d4	e0833002	 add         r3, r3, r2
  067d8	e283300c	 add         r3, r3, #0xC
  067dc	e5932000	 ldr         r2, [r3]
  067e0	e59d3080	 ldr         r3, [sp, #0x80]
  067e4	e1520003	 cmp         r2, r3
  067e8	1a000002	 bne         |$LN16@RotatePipe|

; 2848 :         return TRUE;

  067ec	e3a03001	 mov         r3, #1
  067f0	e58d301c	 str         r3, [sp, #0x1C]
  067f4	ea0001f1	 b           |$LN17@RotatePipe|
  067f8		 |$LN16@RotatePipe|

; 2849 : 
; 2850 :     //  If no associated pipeline, just set the default rotation of the pipeline
; 2851 :     if( g_rgPipelineMapping[ePipeline].pSurface == NULL )

  067f8	e59d107c	 ldr         r1, [sp, #0x7C]
  067fc	e3a03020	 mov         r3, #0x20
  06800	e0020391	 mul         r2, r1, r3
  06804	e59f37c4	 ldr         r3, [pc, #0x7C4]
  06808	e0833002	 add         r3, r3, r2
  0680c	e2833008	 add         r3, r3, #8
  06810	e5933000	 ldr         r3, [r3]
  06814	e3530000	 cmp         r3, #0
  06818	1a00000a	 bne         |$LN15@RotatePipe|

; 2852 :     {
; 2853 :         g_rgPipelineMapping[ePipeline].eRotation = eRotation;

  0681c	e59d107c	 ldr         r1, [sp, #0x7C]
  06820	e3a03020	 mov         r3, #0x20
  06824	e0020391	 mul         r2, r1, r3
  06828	e59f37a0	 ldr         r3, [pc, #0x7A0]
  0682c	e0833002	 add         r3, r3, r2
  06830	e283200c	 add         r2, r3, #0xC
  06834	e59d3080	 ldr         r3, [sp, #0x80]
  06838	e5823000	 str         r3, [r2]

; 2854 :         return TRUE;

  0683c	e3a03001	 mov         r3, #1
  06840	e58d301c	 str         r3, [sp, #0x1C]
  06844	ea0001dd	 b           |$LN17@RotatePipe|
  06848		 |$LN15@RotatePipe|

; 2855 :     }
; 2856 : 
; 2857 : 
; 2858 :     //  Get the surface being output
; 2859 :     pSurface = g_rgPipelineMapping[ePipeline].pSurface;

  06848	e59d107c	 ldr         r1, [sp, #0x7C]
  0684c	e3a03020	 mov         r3, #0x20
  06850	e0020391	 mul         r2, r1, r3
  06854	e59f3774	 ldr         r3, [pc, #0x774]
  06858	e0833002	 add         r3, r3, r2
  0685c	e2833008	 add         r3, r3, #8
  06860	e5933000	 ldr         r3, [r3]
  06864	e58d3004	 str         r3, [sp, #4]

; 2860 :     bMirror = g_rgPipelineMapping[ePipeline].bMirror;

  06868	e59d107c	 ldr         r1, [sp, #0x7C]
  0686c	e3a03020	 mov         r3, #0x20
  06870	e0020391	 mul         r2, r1, r3
  06874	e59f3754	 ldr         r3, [pc, #0x754]
  06878	e0833002	 add         r3, r3, r2
  0687c	e2833010	 add         r3, r3, #0x10
  06880	e5933000	 ldr         r3, [r3]
  06884	e58d3008	 str         r3, [sp, #8]

; 2861 : 
; 2862 :     //  Get the decimation settings for the surface
; 2863 :     dwHorzDecimation = g_rgPipelineScaling[ePipeline].dwHorzScaling;

  06888	e59d107c	 ldr         r1, [sp, #0x7C]
  0688c	e3a0300c	 mov         r3, #0xC
  06890	e0020391	 mul         r2, r1, r3
  06894	e59f3744	 ldr         r3, [pc, #0x744]
  06898	e0833002	 add         r3, r3, r2
  0689c	e5933000	 ldr         r3, [r3]
  068a0	e58d3018	 str         r3, [sp, #0x18]

; 2864 :     dwVertDecimation = g_rgPipelineScaling[ePipeline].dwVertScaling;

  068a4	e59d107c	 ldr         r1, [sp, #0x7C]
  068a8	e3a0300c	 mov         r3, #0xC
  068ac	e0020391	 mul         r2, r1, r3
  068b0	e59f3728	 ldr         r3, [pc, #0x728]
  068b4	e0833002	 add         r3, r3, r2
  068b8	e2833004	 add         r3, r3, #4
  068bc	e5933000	 ldr         r3, [r3]
  068c0	e58d3014	 str         r3, [sp, #0x14]

; 2865 :     dwInterlace      = g_rgPipelineScaling[ePipeline].dwInterlace;

  068c4	e59d107c	 ldr         r1, [sp, #0x7C]
  068c8	e3a0300c	 mov         r3, #0xC
  068cc	e0020391	 mul         r2, r1, r3
  068d0	e59f3708	 ldr         r3, [pc, #0x708]
  068d4	e0833002	 add         r3, r3, r2
  068d8	e2833008	 add         r3, r3, #8
  068dc	e5933000	 ldr         r3, [r3]
  068e0	e58d3000	 str         r3, [sp]

; 2866 : 
; 2867 : 
; 2868 :     //  Set rotation attributes for video pipelines if pixel format is YUV
; 2869 :     if( pSurface->PixelFormat() == OMAP_DSS_PIXELFORMAT_YUV2 ||    
; 2870 :         pSurface->PixelFormat() == OMAP_DSS_PIXELFORMAT_UYVY )  

  068e4	e59d0004	 ldr         r0, [sp, #4]
  068e8	eb000000	 bl          |?PixelFormat@OMAPSurface@@QAA?AW4OMAP_DSS_PIXELFORMAT@@XZ|
  068ec	e58d0020	 str         r0, [sp, #0x20]
  068f0	e59d3020	 ldr         r3, [sp, #0x20]
  068f4	e353000a	 cmp         r3, #0xA
  068f8	0a000005	 beq         |$LN13@RotatePipe|
  068fc	e59d0004	 ldr         r0, [sp, #4]
  06900	eb000000	 bl          |?PixelFormat@OMAPSurface@@QAA?AW4OMAP_DSS_PIXELFORMAT@@XZ|
  06904	e58d0024	 str         r0, [sp, #0x24]
  06908	e59d3024	 ldr         r3, [sp, #0x24]
  0690c	e353000b	 cmp         r3, #0xB
  06910	1a00007f	 bne         |$LN14@RotatePipe|
  06914		 |$LN13@RotatePipe|

; 2871 :     {
; 2872 :         //  Depending on rotation and mirror settings, change the VID rotation attributes
; 2873 :         switch( eRotation )

  06914	e59d3080	 ldr         r3, [sp, #0x80]
  06918	e58d3028	 str         r3, [sp, #0x28]
  0691c	e59d3028	 ldr         r3, [sp, #0x28]
  06920	e35300b4	 cmp         r3, #0xB4
  06924	ca000009	 bgt         |$LN25@RotatePipe|
  06928	e59d3028	 ldr         r3, [sp, #0x28]
  0692c	e35300b4	 cmp         r3, #0xB4
  06930	0a00003a	 beq         |$LN8@RotatePipe|
  06934	e59d3028	 ldr         r3, [sp, #0x28]
  06938	e3530000	 cmp         r3, #0
  0693c	0a000009	 beq         |$LN10@RotatePipe|
  06940	e59d3028	 ldr         r3, [sp, #0x28]
  06944	e353005a	 cmp         r3, #0x5A
  06948	0a000021	 beq         |$LN9@RotatePipe|
  0694c	ea000061	 b           |$LN6@RotatePipe|
  06950		 |$LN25@RotatePipe|
  06950	e59d2028	 ldr         r2, [sp, #0x28]
  06954	e3a03c01	 mov         r3, #1, 24
  06958	e383300e	 orr         r3, r3, #0xE
  0695c	e1520003	 cmp         r2, r3
  06960	0a000049	 beq         |$LN7@RotatePipe|
  06964	ea00005b	 b           |$LN6@RotatePipe|
  06968		 |$LN10@RotatePipe|

; 2874 :         {
; 2875 :             case OMAP_DSS_ROTATION_0:
; 2876 :                 //  Settings for rotation angle 0
; 2877 :                 dwVidRotation = (bMirror) ? DISPC_VID_ATTR_VIDROTATION_180 : DISPC_VID_ATTR_VIDROTATION_0;

  06968	e59d3008	 ldr         r3, [sp, #8]
  0696c	e3530000	 cmp         r3, #0
  06970	0a000002	 beq         |$LN19@RotatePipe|
  06974	e3a03a02	 mov         r3, #2, 20
  06978	e58d302c	 str         r3, [sp, #0x2C]
  0697c	ea000001	 b           |$LN20@RotatePipe|
  06980		 |$LN19@RotatePipe|
  06980	e3a03000	 mov         r3, #0
  06984	e58d302c	 str         r3, [sp, #0x2C]
  06988		 |$LN20@RotatePipe|
  06988	e59d302c	 ldr         r3, [sp, #0x2C]
  0698c	e58d3010	 str         r3, [sp, #0x10]

; 2878 : 
; 2879 :                 //  Set the decimation for the surface
; 2880 :                 pSurface->SetHorizontalScaling( dwHorzDecimation );

  06990	e59d1018	 ldr         r1, [sp, #0x18]
  06994	e59d3004	 ldr         r3, [sp, #4]
  06998	e5933000	 ldr         r3, [r3]
  0699c	e2833030	 add         r3, r3, #0x30
  069a0	e59d0004	 ldr         r0, [sp, #4]
  069a4	e5933000	 ldr         r3, [r3]
  069a8	e1a0e00f	 mov         lr, pc
  069ac	e12fff13	 bx          r3

; 2881 :                 pSurface->SetVerticalScaling( dwVertDecimation );

  069b0	e59d1014	 ldr         r1, [sp, #0x14]
  069b4	e59d3004	 ldr         r3, [sp, #4]
  069b8	e5933000	 ldr         r3, [r3]
  069bc	e2833034	 add         r3, r3, #0x34
  069c0	e59d0004	 ldr         r0, [sp, #4]
  069c4	e5933000	 ldr         r3, [r3]
  069c8	e1a0e00f	 mov         lr, pc
  069cc	e12fff13	 bx          r3

; 2882 :                 break;

  069d0	ea00004f	 b           |$LN11@RotatePipe|
  069d4		 |$LN9@RotatePipe|

; 2883 : 
; 2884 :             case OMAP_DSS_ROTATION_90:
; 2885 :                 //  Settings for rotation angle 90 (270 for DSS setting)
; 2886 :                 dwVidRotation = DISPC_VID_ATTR_VIDROTATION_270 | DISPC_VID_ATTR_VIDROWREPEATENABLE;

  069d4	e3a03a43	 mov         r3, #0x43, 20
  069d8	e58d3010	 str         r3, [sp, #0x10]

; 2887 : 
; 2888 :                 //  Set the decimation for the surface
; 2889 :                 pSurface->SetHorizontalScaling( dwVertDecimation );

  069dc	e59d1014	 ldr         r1, [sp, #0x14]
  069e0	e59d3004	 ldr         r3, [sp, #4]
  069e4	e5933000	 ldr         r3, [r3]
  069e8	e2833030	 add         r3, r3, #0x30
  069ec	e59d0004	 ldr         r0, [sp, #4]
  069f0	e5933000	 ldr         r3, [r3]
  069f4	e1a0e00f	 mov         lr, pc
  069f8	e12fff13	 bx          r3

; 2890 :                 pSurface->SetVerticalScaling( dwHorzDecimation );

  069fc	e59d1018	 ldr         r1, [sp, #0x18]
  06a00	e59d3004	 ldr         r3, [sp, #4]
  06a04	e5933000	 ldr         r3, [r3]
  06a08	e2833034	 add         r3, r3, #0x34
  06a0c	e59d0004	 ldr         r0, [sp, #4]
  06a10	e5933000	 ldr         r3, [r3]
  06a14	e1a0e00f	 mov         lr, pc
  06a18	e12fff13	 bx          r3

; 2891 :                 break;

  06a1c	ea00003c	 b           |$LN11@RotatePipe|
  06a20		 |$LN8@RotatePipe|

; 2892 : 
; 2893 :             case OMAP_DSS_ROTATION_180:
; 2894 :                 //  Settings for rotation angle 180
; 2895 :                 dwVidRotation = (bMirror) ? DISPC_VID_ATTR_VIDROTATION_0 : DISPC_VID_ATTR_VIDROTATION_180;

  06a20	e59d3008	 ldr         r3, [sp, #8]
  06a24	e3530000	 cmp         r3, #0
  06a28	0a000002	 beq         |$LN21@RotatePipe|
  06a2c	e3a03000	 mov         r3, #0
  06a30	e58d3030	 str         r3, [sp, #0x30]
  06a34	ea000001	 b           |$LN22@RotatePipe|
  06a38		 |$LN21@RotatePipe|
  06a38	e3a03a02	 mov         r3, #2, 20
  06a3c	e58d3030	 str         r3, [sp, #0x30]
  06a40		 |$LN22@RotatePipe|
  06a40	e59d3030	 ldr         r3, [sp, #0x30]
  06a44	e58d3010	 str         r3, [sp, #0x10]

; 2896 : 
; 2897 :                 //  Set the decimation for the surface
; 2898 :                 pSurface->SetHorizontalScaling( dwHorzDecimation );

  06a48	e59d1018	 ldr         r1, [sp, #0x18]
  06a4c	e59d3004	 ldr         r3, [sp, #4]
  06a50	e5933000	 ldr         r3, [r3]
  06a54	e2833030	 add         r3, r3, #0x30
  06a58	e59d0004	 ldr         r0, [sp, #4]
  06a5c	e5933000	 ldr         r3, [r3]
  06a60	e1a0e00f	 mov         lr, pc
  06a64	e12fff13	 bx          r3

; 2899 :                 pSurface->SetVerticalScaling( dwVertDecimation );

  06a68	e59d1014	 ldr         r1, [sp, #0x14]
  06a6c	e59d3004	 ldr         r3, [sp, #4]
  06a70	e5933000	 ldr         r3, [r3]
  06a74	e2833034	 add         r3, r3, #0x34
  06a78	e59d0004	 ldr         r0, [sp, #4]
  06a7c	e5933000	 ldr         r3, [r3]
  06a80	e1a0e00f	 mov         lr, pc
  06a84	e12fff13	 bx          r3

; 2900 :                 break;

  06a88	ea000021	 b           |$LN11@RotatePipe|
  06a8c		 |$LN7@RotatePipe|

; 2901 : 
; 2902 :             case OMAP_DSS_ROTATION_270:
; 2903 :                 //  Settings for rotation angle 270 (90 for DSS setting)
; 2904 :                 dwVidRotation = DISPC_VID_ATTR_VIDROTATION_90 | DISPC_VID_ATTR_VIDROWREPEATENABLE;

  06a8c	e3a03a41	 mov         r3, #0x41, 20
  06a90	e58d3010	 str         r3, [sp, #0x10]

; 2905 : 
; 2906 :                 //  Set the decimation for the surface
; 2907 :                 pSurface->SetHorizontalScaling( dwVertDecimation );

  06a94	e59d1014	 ldr         r1, [sp, #0x14]
  06a98	e59d3004	 ldr         r3, [sp, #4]
  06a9c	e5933000	 ldr         r3, [r3]
  06aa0	e2833030	 add         r3, r3, #0x30
  06aa4	e59d0004	 ldr         r0, [sp, #4]
  06aa8	e5933000	 ldr         r3, [r3]
  06aac	e1a0e00f	 mov         lr, pc
  06ab0	e12fff13	 bx          r3

; 2908 :                 pSurface->SetVerticalScaling( dwHorzDecimation );

  06ab4	e59d1018	 ldr         r1, [sp, #0x18]
  06ab8	e59d3004	 ldr         r3, [sp, #4]
  06abc	e5933000	 ldr         r3, [r3]
  06ac0	e2833034	 add         r3, r3, #0x34
  06ac4	e59d0004	 ldr         r0, [sp, #4]
  06ac8	e5933000	 ldr         r3, [r3]
  06acc	e1a0e00f	 mov         lr, pc
  06ad0	e12fff13	 bx          r3

; 2909 :                 break;

  06ad4	ea00000e	 b           |$LN11@RotatePipe|
  06ad8		 |$LN6@RotatePipe|

; 2910 : 
; 2911 :             default:
; 2912 :                 ASSERT(0);

  06ad8	ea000002	 b           |$LN23@RotatePipe|
  06adc	e3a03001	 mov         r3, #1
  06ae0	e58d3034	 str         r3, [sp, #0x34]
  06ae4	ea000007	 b           |$LN24@RotatePipe|
  06ae8		 |$LN23@RotatePipe|
  06ae8	e3a03eb6	 mov         r3, #0xB6, 28
  06aec	e59f24e8	 ldr         r2, [pc, #0x4E8]
  06af0	e59f14e0	 ldr         r1, [pc, #0x4E0]
  06af4	e59f04d8	 ldr         r0, [pc, #0x4D8]
  06af8	eb000000	 bl          NKDbgPrintfW
  06afc	e6000010	 __debugbreak_ce
  06b00	e3a03000	 mov         r3, #0
  06b04	e58d3034	 str         r3, [sp, #0x34]
  06b08		 |$LN24@RotatePipe|

; 2913 :                 return FALSE;

  06b08	e3a03000	 mov         r3, #0
  06b0c	e58d301c	 str         r3, [sp, #0x1C]
  06b10	ea00012a	 b           |$LN17@RotatePipe|
  06b14		 |$LN11@RotatePipe|
  06b14		 |$LN14@RotatePipe|

; 2914 :         }
; 2915 :     }
; 2916 : 
; 2917 : 
; 2918 :     //  Access the regs
; 2919 :     if( AccessRegs() == FALSE )

  06b14	e59d0078	 ldr         r0, [sp, #0x78]
  06b18	eb000000	 bl          |?AccessRegs@OMAPDisplayController@@IAAHXZ|
  06b1c	e58d0038	 str         r0, [sp, #0x38]
  06b20	e59d3038	 ldr         r3, [sp, #0x38]
  06b24	e3530000	 cmp         r3, #0
  06b28	1a000001	 bne         |$LN5@RotatePipe|
  06b2c	ea00011f	 b           |$LN4@RotatePipe|

; 2920 :         goto cleanUp;

  06b30	ea00011e	 b           |$cleanUp$38819|
  06b34		 |$LN5@RotatePipe|

; 2921 : 
; 2922 : 
; 2923 :     //  Update GFX pipeline display base address
; 2924 :     if( ePipeline == OMAP_DSS_PIPELINE_GFX )

  06b34	e59d307c	 ldr         r3, [sp, #0x7C]
  06b38	e3530000	 cmp         r3, #0
  06b3c	1a000043	 bne         |$LN3@RotatePipe|

; 2925 :     {
; 2926 :         OUTREG32( &m_pDispRegs->DISPC_GFX_PIXEL_INC, pSurface->PixelIncr(eRotation, bMirror) );

  06b40	e59d2008	 ldr         r2, [sp, #8]
  06b44	e59d1080	 ldr         r1, [sp, #0x80]
  06b48	e59d3004	 ldr         r3, [sp, #4]
  06b4c	e5933000	 ldr         r3, [r3]
  06b50	e2833018	 add         r3, r3, #0x18
  06b54	e59d0004	 ldr         r0, [sp, #4]
  06b58	e5933000	 ldr         r3, [r3]
  06b5c	e1a0e00f	 mov         lr, pc
  06b60	e12fff13	 bx          r3
  06b64	e58d003c	 str         r0, [sp, #0x3C]
  06b68	e59d3078	 ldr         r3, [sp, #0x78]
  06b6c	e2833008	 add         r3, r3, #8
  06b70	e5933000	 ldr         r3, [r3]
  06b74	e28320b0	 add         r2, r3, #0xB0
  06b78	e59d303c	 ldr         r3, [sp, #0x3C]
  06b7c	e5823000	 str         r3, [r2]

; 2927 :         OUTREG32( &m_pDispRegs->DISPC_GFX_ROW_INC, pSurface->RowIncr(eRotation, bMirror) );

  06b80	e59d2008	 ldr         r2, [sp, #8]
  06b84	e59d1080	 ldr         r1, [sp, #0x80]
  06b88	e59d3004	 ldr         r3, [sp, #4]
  06b8c	e5933000	 ldr         r3, [r3]
  06b90	e283301c	 add         r3, r3, #0x1C
  06b94	e59d0004	 ldr         r0, [sp, #4]
  06b98	e5933000	 ldr         r3, [r3]
  06b9c	e1a0e00f	 mov         lr, pc
  06ba0	e12fff13	 bx          r3
  06ba4	e58d0040	 str         r0, [sp, #0x40]
  06ba8	e59d3078	 ldr         r3, [sp, #0x78]
  06bac	e2833008	 add         r3, r3, #8
  06bb0	e5933000	 ldr         r3, [r3]
  06bb4	e28320ac	 add         r2, r3, #0xAC
  06bb8	e59d3040	 ldr         r3, [sp, #0x40]
  06bbc	e5823000	 str         r3, [r2]

; 2928 : 
; 2929 :         OUTREG32( &m_pDispRegs->DISPC_GFX_BA0, pSurface->PhysicalAddr(eRotation, bMirror) );

  06bc0	e3a03000	 mov         r3, #0
  06bc4	e59d2008	 ldr         r2, [sp, #8]
  06bc8	e59d1080	 ldr         r1, [sp, #0x80]
  06bcc	e59d0004	 ldr         r0, [sp, #4]
  06bd0	e5900000	 ldr         r0, [r0]
  06bd4	e280e014	 add         lr, r0, #0x14
  06bd8	e59d0004	 ldr         r0, [sp, #4]
  06bdc	e59e4000	 ldr         r4, [lr]
  06be0	e1a0e00f	 mov         lr, pc
  06be4	e12fff14	 bx          r4
  06be8	e58d0044	 str         r0, [sp, #0x44]
  06bec	e59d3078	 ldr         r3, [sp, #0x78]
  06bf0	e2833008	 add         r3, r3, #8
  06bf4	e5933000	 ldr         r3, [r3]
  06bf8	e2832080	 add         r2, r3, #0x80
  06bfc	e59d3044	 ldr         r3, [sp, #0x44]
  06c00	e5823000	 str         r3, [r2]

; 2930 :         OUTREG32( &m_pDispRegs->DISPC_GFX_BA1, pSurface->PhysicalAddr(eRotation, bMirror) + dwInterlace );

  06c04	e3a03000	 mov         r3, #0
  06c08	e59d2008	 ldr         r2, [sp, #8]
  06c0c	e59d1080	 ldr         r1, [sp, #0x80]
  06c10	e59d0004	 ldr         r0, [sp, #4]
  06c14	e5900000	 ldr         r0, [r0]
  06c18	e280e014	 add         lr, r0, #0x14
  06c1c	e59d0004	 ldr         r0, [sp, #4]
  06c20	e59e4000	 ldr         r4, [lr]
  06c24	e1a0e00f	 mov         lr, pc
  06c28	e12fff14	 bx          r4
  06c2c	e58d0048	 str         r0, [sp, #0x48]
  06c30	e59d2048	 ldr         r2, [sp, #0x48]
  06c34	e59d3000	 ldr         r3, [sp]
  06c38	e0822003	 add         r2, r2, r3
  06c3c	e59d3078	 ldr         r3, [sp, #0x78]
  06c40	e2833008	 add         r3, r3, #8
  06c44	e5933000	 ldr         r3, [r3]
  06c48	e2833084	 add         r3, r3, #0x84
  06c4c	e5832000	 str         r2, [r3]
  06c50		 |$LN3@RotatePipe|

; 2931 :     }
; 2932 : 
; 2933 :     //  Update VID1 pipeline display base address and attributes for rotation
; 2934 :     if( ePipeline == OMAP_DSS_PIPELINE_VIDEO1 )

  06c50	e59d307c	 ldr         r3, [sp, #0x7C]
  06c54	e3530001	 cmp         r3, #1
  06c58	1a00005b	 bne         |$LN2@RotatePipe|

; 2935 :     {
; 2936 :         CLRREG32( &m_pDispRegs->tDISPC_VID1.ATTRIBUTES, DISPC_VID_ATTR_VIDROTATION_MASK|DISPC_VID_ATTR_VIDROWREPEATENABLE );

  06c5c	e59d3078	 ldr         r3, [sp, #0x78]
  06c60	e2833008	 add         r3, r3, #8
  06c64	e5933000	 ldr         r3, [r3]
  06c68	e28330cc	 add         r3, r3, #0xCC
  06c6c	e5932000	 ldr         r2, [r3]
  06c70	e3e03a43	 mvn         r3, #0x43, 20
  06c74	e0022003	 and         r2, r2, r3
  06c78	e59d3078	 ldr         r3, [sp, #0x78]
  06c7c	e2833008	 add         r3, r3, #8
  06c80	e5933000	 ldr         r3, [r3]
  06c84	e28330cc	 add         r3, r3, #0xCC
  06c88	e5832000	 str         r2, [r3]

; 2937 :         SETREG32( &m_pDispRegs->tDISPC_VID1.ATTRIBUTES, dwVidRotation );

  06c8c	e59d3078	 ldr         r3, [sp, #0x78]
  06c90	e2833008	 add         r3, r3, #8
  06c94	e5933000	 ldr         r3, [r3]
  06c98	e28330cc	 add         r3, r3, #0xCC
  06c9c	e5932000	 ldr         r2, [r3]
  06ca0	e59d3010	 ldr         r3, [sp, #0x10]
  06ca4	e1822003	 orr         r2, r2, r3
  06ca8	e59d3078	 ldr         r3, [sp, #0x78]
  06cac	e2833008	 add         r3, r3, #8
  06cb0	e5933000	 ldr         r3, [r3]
  06cb4	e28330cc	 add         r3, r3, #0xCC
  06cb8	e5832000	 str         r2, [r3]

; 2938 :         
; 2939 :         OUTREG32( &m_pDispRegs->tDISPC_VID1.PIXEL_INC, pSurface->PixelIncr(eRotation, bMirror) );

  06cbc	e59d2008	 ldr         r2, [sp, #8]
  06cc0	e59d1080	 ldr         r1, [sp, #0x80]
  06cc4	e59d3004	 ldr         r3, [sp, #4]
  06cc8	e5933000	 ldr         r3, [r3]
  06ccc	e2833018	 add         r3, r3, #0x18
  06cd0	e59d0004	 ldr         r0, [sp, #4]
  06cd4	e5933000	 ldr         r3, [r3]
  06cd8	e1a0e00f	 mov         lr, pc
  06cdc	e12fff13	 bx          r3
  06ce0	e58d004c	 str         r0, [sp, #0x4C]
  06ce4	e59d3078	 ldr         r3, [sp, #0x78]
  06ce8	e2833008	 add         r3, r3, #8
  06cec	e5933000	 ldr         r3, [r3]
  06cf0	e28320dc	 add         r2, r3, #0xDC
  06cf4	e59d304c	 ldr         r3, [sp, #0x4C]
  06cf8	e5823000	 str         r3, [r2]

; 2940 :         OUTREG32( &m_pDispRegs->tDISPC_VID1.ROW_INC, pSurface->RowIncr(eRotation, bMirror) );

  06cfc	e59d2008	 ldr         r2, [sp, #8]
  06d00	e59d1080	 ldr         r1, [sp, #0x80]
  06d04	e59d3004	 ldr         r3, [sp, #4]
  06d08	e5933000	 ldr         r3, [r3]
  06d0c	e283301c	 add         r3, r3, #0x1C
  06d10	e59d0004	 ldr         r0, [sp, #4]
  06d14	e5933000	 ldr         r3, [r3]
  06d18	e1a0e00f	 mov         lr, pc
  06d1c	e12fff13	 bx          r3
  06d20	e58d0050	 str         r0, [sp, #0x50]
  06d24	e59d3078	 ldr         r3, [sp, #0x78]
  06d28	e2833008	 add         r3, r3, #8
  06d2c	e5933000	 ldr         r3, [r3]
  06d30	e28320d8	 add         r2, r3, #0xD8
  06d34	e59d3050	 ldr         r3, [sp, #0x50]
  06d38	e5823000	 str         r3, [r2]

; 2941 : 
; 2942 :         OUTREG32( &m_pDispRegs->tDISPC_VID1.BA0, pSurface->PhysicalAddr(eRotation, bMirror) + dwInterlace );

  06d3c	e3a03000	 mov         r3, #0
  06d40	e59d2008	 ldr         r2, [sp, #8]
  06d44	e59d1080	 ldr         r1, [sp, #0x80]
  06d48	e59d0004	 ldr         r0, [sp, #4]
  06d4c	e5900000	 ldr         r0, [r0]
  06d50	e280e014	 add         lr, r0, #0x14
  06d54	e59d0004	 ldr         r0, [sp, #4]
  06d58	e59e4000	 ldr         r4, [lr]
  06d5c	e1a0e00f	 mov         lr, pc
  06d60	e12fff14	 bx          r4
  06d64	e58d0054	 str         r0, [sp, #0x54]
  06d68	e59d2054	 ldr         r2, [sp, #0x54]
  06d6c	e59d3000	 ldr         r3, [sp]
  06d70	e0822003	 add         r2, r2, r3
  06d74	e59d3078	 ldr         r3, [sp, #0x78]
  06d78	e2833008	 add         r3, r3, #8
  06d7c	e5933000	 ldr         r3, [r3]
  06d80	e28330bc	 add         r3, r3, #0xBC
  06d84	e5832000	 str         r2, [r3]

; 2943 :         OUTREG32( &m_pDispRegs->tDISPC_VID1.BA1, pSurface->PhysicalAddr(eRotation, bMirror) );

  06d88	e3a03000	 mov         r3, #0
  06d8c	e59d2008	 ldr         r2, [sp, #8]
  06d90	e59d1080	 ldr         r1, [sp, #0x80]
  06d94	e59d0004	 ldr         r0, [sp, #4]
  06d98	e5900000	 ldr         r0, [r0]
  06d9c	e280e014	 add         lr, r0, #0x14
  06da0	e59d0004	 ldr         r0, [sp, #4]
  06da4	e59e4000	 ldr         r4, [lr]
  06da8	e1a0e00f	 mov         lr, pc
  06dac	e12fff14	 bx          r4
  06db0	e58d0058	 str         r0, [sp, #0x58]
  06db4	e59d3078	 ldr         r3, [sp, #0x78]
  06db8	e2833008	 add         r3, r3, #8
  06dbc	e5933000	 ldr         r3, [r3]
  06dc0	e28320c0	 add         r2, r3, #0xC0
  06dc4	e59d3058	 ldr         r3, [sp, #0x58]
  06dc8	e5823000	 str         r3, [r2]
  06dcc		 |$LN2@RotatePipe|

; 2944 :        
; 2945 :     }
; 2946 : 
; 2947 :     //  Update VID2 pipeline display base address and attributes for rotation
; 2948 :     if( ePipeline == OMAP_DSS_PIPELINE_VIDEO2 )

  06dcc	e59d307c	 ldr         r3, [sp, #0x7C]
  06dd0	e3530002	 cmp         r3, #2
  06dd4	1a00005b	 bne         |$LN1@RotatePipe|

; 2949 :     {
; 2950 :         CLRREG32( &m_pDispRegs->tDISPC_VID2.ATTRIBUTES, DISPC_VID_ATTR_VIDROTATION_MASK|DISPC_VID_ATTR_VIDROWREPEATENABLE );

  06dd8	e59d3078	 ldr         r3, [sp, #0x78]
  06ddc	e2833008	 add         r3, r3, #8
  06de0	e5933000	 ldr         r3, [r3]
  06de4	e2833f57	 add         r3, r3, #0x57, 30
  06de8	e5932000	 ldr         r2, [r3]
  06dec	e3e03a43	 mvn         r3, #0x43, 20
  06df0	e0022003	 and         r2, r2, r3
  06df4	e59d3078	 ldr         r3, [sp, #0x78]
  06df8	e2833008	 add         r3, r3, #8
  06dfc	e5933000	 ldr         r3, [r3]
  06e00	e2833f57	 add         r3, r3, #0x57, 30
  06e04	e5832000	 str         r2, [r3]

; 2951 :         SETREG32( &m_pDispRegs->tDISPC_VID2.ATTRIBUTES, dwVidRotation );

  06e08	e59d3078	 ldr         r3, [sp, #0x78]
  06e0c	e2833008	 add         r3, r3, #8
  06e10	e5933000	 ldr         r3, [r3]
  06e14	e2833f57	 add         r3, r3, #0x57, 30
  06e18	e5932000	 ldr         r2, [r3]
  06e1c	e59d3010	 ldr         r3, [sp, #0x10]
  06e20	e1822003	 orr         r2, r2, r3
  06e24	e59d3078	 ldr         r3, [sp, #0x78]
  06e28	e2833008	 add         r3, r3, #8
  06e2c	e5933000	 ldr         r3, [r3]
  06e30	e2833f57	 add         r3, r3, #0x57, 30
  06e34	e5832000	 str         r2, [r3]

; 2952 :         
; 2953 :         OUTREG32( &m_pDispRegs->tDISPC_VID2.PIXEL_INC, pSurface->PixelIncr(eRotation, bMirror) );

  06e38	e59d2008	 ldr         r2, [sp, #8]
  06e3c	e59d1080	 ldr         r1, [sp, #0x80]
  06e40	e59d3004	 ldr         r3, [sp, #4]
  06e44	e5933000	 ldr         r3, [r3]
  06e48	e2833018	 add         r3, r3, #0x18
  06e4c	e59d0004	 ldr         r0, [sp, #4]
  06e50	e5933000	 ldr         r3, [r3]
  06e54	e1a0e00f	 mov         lr, pc
  06e58	e12fff13	 bx          r3
  06e5c	e58d005c	 str         r0, [sp, #0x5C]
  06e60	e59d3078	 ldr         r3, [sp, #0x78]
  06e64	e2833008	 add         r3, r3, #8
  06e68	e5933000	 ldr         r3, [r3]
  06e6c	e2832f5b	 add         r2, r3, #0x5B, 30
  06e70	e59d305c	 ldr         r3, [sp, #0x5C]
  06e74	e5823000	 str         r3, [r2]

; 2954 :         OUTREG32( &m_pDispRegs->tDISPC_VID2.ROW_INC, pSurface->RowIncr(eRotation, bMirror) );

  06e78	e59d2008	 ldr         r2, [sp, #8]
  06e7c	e59d1080	 ldr         r1, [sp, #0x80]
  06e80	e59d3004	 ldr         r3, [sp, #4]
  06e84	e5933000	 ldr         r3, [r3]
  06e88	e283301c	 add         r3, r3, #0x1C
  06e8c	e59d0004	 ldr         r0, [sp, #4]
  06e90	e5933000	 ldr         r3, [r3]
  06e94	e1a0e00f	 mov         lr, pc
  06e98	e12fff13	 bx          r3
  06e9c	e58d0060	 str         r0, [sp, #0x60]
  06ea0	e59d3078	 ldr         r3, [sp, #0x78]
  06ea4	e2833008	 add         r3, r3, #8
  06ea8	e5933000	 ldr         r3, [r3]
  06eac	e2832f5a	 add         r2, r3, #0x5A, 30
  06eb0	e59d3060	 ldr         r3, [sp, #0x60]
  06eb4	e5823000	 str         r3, [r2]

; 2955 : 
; 2956 :         OUTREG32( &m_pDispRegs->tDISPC_VID2.BA0, pSurface->PhysicalAddr(eRotation, bMirror) + dwInterlace );

  06eb8	e3a03000	 mov         r3, #0
  06ebc	e59d2008	 ldr         r2, [sp, #8]
  06ec0	e59d1080	 ldr         r1, [sp, #0x80]
  06ec4	e59d0004	 ldr         r0, [sp, #4]
  06ec8	e5900000	 ldr         r0, [r0]
  06ecc	e280e014	 add         lr, r0, #0x14
  06ed0	e59d0004	 ldr         r0, [sp, #4]
  06ed4	e59e4000	 ldr         r4, [lr]
  06ed8	e1a0e00f	 mov         lr, pc
  06edc	e12fff14	 bx          r4
  06ee0	e58d0064	 str         r0, [sp, #0x64]
  06ee4	e59d2064	 ldr         r2, [sp, #0x64]
  06ee8	e59d3000	 ldr         r3, [sp]
  06eec	e0822003	 add         r2, r2, r3
  06ef0	e59d3078	 ldr         r3, [sp, #0x78]
  06ef4	e2833008	 add         r3, r3, #8
  06ef8	e5933000	 ldr         r3, [r3]
  06efc	e2833f53	 add         r3, r3, #0x53, 30
  06f00	e5832000	 str         r2, [r3]

; 2957 :         OUTREG32( &m_pDispRegs->tDISPC_VID2.BA1, pSurface->PhysicalAddr(eRotation, bMirror) );

  06f04	e3a03000	 mov         r3, #0
  06f08	e59d2008	 ldr         r2, [sp, #8]
  06f0c	e59d1080	 ldr         r1, [sp, #0x80]
  06f10	e59d0004	 ldr         r0, [sp, #4]
  06f14	e5900000	 ldr         r0, [r0]
  06f18	e280e014	 add         lr, r0, #0x14
  06f1c	e59d0004	 ldr         r0, [sp, #4]
  06f20	e59e4000	 ldr         r4, [lr]
  06f24	e1a0e00f	 mov         lr, pc
  06f28	e12fff14	 bx          r4
  06f2c	e58d0068	 str         r0, [sp, #0x68]
  06f30	e59d3078	 ldr         r3, [sp, #0x78]
  06f34	e2833008	 add         r3, r3, #8
  06f38	e5933000	 ldr         r3, [r3]
  06f3c	e2832e15	 add         r2, r3, #0x15, 28
  06f40	e59d3068	 ldr         r3, [sp, #0x68]
  06f44	e5823000	 str         r3, [r2]
  06f48		 |$LN1@RotatePipe|

; 2958 :     }
; 2959 : 
; 2960 : 
; 2961 :     //  Update pipeline output rotation
; 2962 :     g_rgPipelineMapping[ePipeline].eRotation = eRotation;

  06f48	e59d107c	 ldr         r1, [sp, #0x7C]
  06f4c	e3a03020	 mov         r3, #0x20
  06f50	e0020391	 mul         r2, r1, r3
  06f54	e59f3074	 ldr         r3, [pc, #0x74]
  06f58	e0833002	 add         r3, r3, r2
  06f5c	e283200c	 add         r2, r3, #0xC
  06f60	e59d3080	 ldr         r3, [sp, #0x80]
  06f64	e5823000	 str         r3, [r2]

; 2963 : 
; 2964 :     //  Set the decimation factors for the surface back to normal
; 2965 :     pSurface->SetHorizontalScaling( 1 );

  06f68	e3a01001	 mov         r1, #1
  06f6c	e59d3004	 ldr         r3, [sp, #4]
  06f70	e5933000	 ldr         r3, [r3]
  06f74	e2833030	 add         r3, r3, #0x30
  06f78	e59d0004	 ldr         r0, [sp, #4]
  06f7c	e5933000	 ldr         r3, [r3]
  06f80	e1a0e00f	 mov         lr, pc
  06f84	e12fff13	 bx          r3

; 2966 :     pSurface->SetVerticalScaling( 1 );

  06f88	e3a01001	 mov         r1, #1
  06f8c	e59d3004	 ldr         r3, [sp, #4]
  06f90	e5933000	 ldr         r3, [r3]
  06f94	e2833034	 add         r3, r3, #0x34
  06f98	e59d0004	 ldr         r0, [sp, #4]
  06f9c	e5933000	 ldr         r3, [r3]
  06fa0	e1a0e00f	 mov         lr, pc
  06fa4	e12fff13	 bx          r3

; 2967 : 
; 2968 : 
; 2969 :     //  Result
; 2970 :     bResult = TRUE;

  06fa8	e3a03001	 mov         r3, #1
  06fac	e58d300c	 str         r3, [sp, #0xC]
  06fb0		 |$LN4@RotatePipe|
  06fb0		 |$cleanUp$38819|

; 2971 : 
; 2972 : cleanUp:
; 2973 :     //  Release regs
; 2974 :     ReleaseRegs();

  06fb0	e59d0078	 ldr         r0, [sp, #0x78]
  06fb4	eb000000	 bl          |?ReleaseRegs@OMAPDisplayController@@IAAHXZ|

; 2975 : 
; 2976 :     //  Return result
; 2977 :     return bResult;

  06fb8	e59d300c	 ldr         r3, [sp, #0xC]
  06fbc	e58d301c	 str         r3, [sp, #0x1C]
  06fc0		 |$LN17@RotatePipe|

; 2978 : }

  06fc0	e59d001c	 ldr         r0, [sp, #0x1C]
  06fc4	e28dd06c	 add         sp, sp, #0x6C
  06fc8	e89d6010	 ldmia       sp, {r4, sp, lr}
  06fcc	e12fff1e	 bx          lr
  06fd0		 |$LN29@RotatePipe|
  06fd0		 |$LN30@RotatePipe|
  06fd0	00000000	 DCD         |?g_rgPipelineMapping@@3PAUOMAPPipelineConfig@@A|
  06fd4		 |$LN31@RotatePipe|
  06fd4	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  06fd8		 |$LN32@RotatePipe|
  06fd8	00000000	 DCD         |??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@|
  06fdc		 |$LN33@RotatePipe|
  06fdc	00000000	 DCD         |??_C@_1KC@HIABDGPO@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  06fe0		 |$LN34@RotatePipe|
  06fe0	00000000	 DCD         |?g_rgPipelineScaling@@3PAUOMAPPipelineScaling@@A|
  06fe4		 |$M40698|

			 ENDP  ; |?RotatePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@W4OMAP_DSS_ROTATION@@@Z|, OMAPDisplayController::RotatePipeline

	EXPORT	|?MirrorPipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@H@Z| ; OMAPDisplayController::MirrorPipeline

  000a8			 AREA	 |.pdata|, PDATA
|$T40715| DCD	|$LN20@MirrorPipe|
	DCD	0x40019f04
; Function compile flags: /Odtp

  06fe4			 AREA	 |.text|, CODE, ARM

  06fe4		 |?MirrorPipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@H@Z| PROC ; OMAPDisplayController::MirrorPipeline

; 2986 : {

  06fe4		 |$LN20@MirrorPipe|
  06fe4	e1a0c00d	 mov         r12, sp
  06fe8	e92d0007	 stmdb       sp!, {r0 - r2}
  06fec	e92d5010	 stmdb       sp!, {r4, r12, lr}
  06ff0	e24dd058	 sub         sp, sp, #0x58
  06ff4		 |$M40712|

; 2987 :     BOOL    bResult = FALSE;

  06ff4	e3a03000	 mov         r3, #0
  06ff8	e58d300c	 str         r3, [sp, #0xC]

; 2988 :     OMAPSurface*        pSurface;
; 2989 :     OMAP_DSS_ROTATION   eRotation;
; 2990 :     DWORD               dwHorzDecimation = 1;

  06ffc	e3a03001	 mov         r3, #1
  07000	e58d3014	 str         r3, [sp, #0x14]

; 2991 :     DWORD               dwVertDecimation = 1;

  07004	e3a03001	 mov         r3, #1
  07008	e58d3010	 str         r3, [sp, #0x10]

; 2992 :     DWORD               dwInterlace = 0;

  0700c	e3a03000	 mov         r3, #0
  07010	e58d3004	 str         r3, [sp, #4]

; 2993 :     
; 2994 :     
; 2995 :     //  If no change in the mirror setting, do nothing
; 2996 :     if( g_rgPipelineMapping[ePipeline].bMirror == bMirror )

  07014	e59d1068	 ldr         r1, [sp, #0x68]
  07018	e3a03020	 mov         r3, #0x20
  0701c	e0020391	 mul         r2, r1, r3
  07020	e59f3624	 ldr         r3, [pc, #0x624]
  07024	e0833002	 add         r3, r3, r2
  07028	e2833010	 add         r3, r3, #0x10
  0702c	e5932000	 ldr         r2, [r3]
  07030	e59d306c	 ldr         r3, [sp, #0x6C]
  07034	e1520003	 cmp         r2, r3
  07038	1a000002	 bne         |$LN12@MirrorPipe|

; 2997 :         return TRUE;

  0703c	e3a03001	 mov         r3, #1
  07040	e58d3018	 str         r3, [sp, #0x18]
  07044	ea00017c	 b           |$LN13@MirrorPipe|
  07048		 |$LN12@MirrorPipe|

; 2998 : 
; 2999 :     //  If no associated pipeline, just set the default mirror setting of the pipeline
; 3000 :     if( g_rgPipelineMapping[ePipeline].pSurface == NULL )

  07048	e59d1068	 ldr         r1, [sp, #0x68]
  0704c	e3a03020	 mov         r3, #0x20
  07050	e0020391	 mul         r2, r1, r3
  07054	e59f35f0	 ldr         r3, [pc, #0x5F0]
  07058	e0833002	 add         r3, r3, r2
  0705c	e2833008	 add         r3, r3, #8
  07060	e5933000	 ldr         r3, [r3]
  07064	e3530000	 cmp         r3, #0
  07068	1a00000a	 bne         |$LN11@MirrorPipe|

; 3001 :     {
; 3002 :         g_rgPipelineMapping[ePipeline].bMirror = bMirror;

  0706c	e59d1068	 ldr         r1, [sp, #0x68]
  07070	e3a03020	 mov         r3, #0x20
  07074	e0020391	 mul         r2, r1, r3
  07078	e59f35cc	 ldr         r3, [pc, #0x5CC]
  0707c	e0833002	 add         r3, r3, r2
  07080	e2832010	 add         r2, r3, #0x10
  07084	e59d306c	 ldr         r3, [sp, #0x6C]
  07088	e5823000	 str         r3, [r2]

; 3003 :         return TRUE;

  0708c	e3a03001	 mov         r3, #1
  07090	e58d3018	 str         r3, [sp, #0x18]
  07094	ea000168	 b           |$LN13@MirrorPipe|
  07098		 |$LN11@MirrorPipe|

; 3004 :     }
; 3005 : 
; 3006 :     //  Get the surface being output
; 3007 :     pSurface = g_rgPipelineMapping[ePipeline].pSurface;

  07098	e59d1068	 ldr         r1, [sp, #0x68]
  0709c	e3a03020	 mov         r3, #0x20
  070a0	e0020391	 mul         r2, r1, r3
  070a4	e59f35a0	 ldr         r3, [pc, #0x5A0]
  070a8	e0833002	 add         r3, r3, r2
  070ac	e2833008	 add         r3, r3, #8
  070b0	e5933000	 ldr         r3, [r3]
  070b4	e58d3008	 str         r3, [sp, #8]

; 3008 :     eRotation = g_rgPipelineMapping[ePipeline].eRotation;

  070b8	e59d1068	 ldr         r1, [sp, #0x68]
  070bc	e3a03020	 mov         r3, #0x20
  070c0	e0020391	 mul         r2, r1, r3
  070c4	e59f3580	 ldr         r3, [pc, #0x580]
  070c8	e0833002	 add         r3, r3, r2
  070cc	e283300c	 add         r3, r3, #0xC
  070d0	e5933000	 ldr         r3, [r3]
  070d4	e58d3000	 str         r3, [sp]

; 3009 : 
; 3010 :     //  Get the decimation settings for the surface
; 3011 :     dwHorzDecimation = g_rgPipelineScaling[ePipeline].dwHorzScaling;

  070d8	e59d1068	 ldr         r1, [sp, #0x68]
  070dc	e3a0300c	 mov         r3, #0xC
  070e0	e0020391	 mul         r2, r1, r3
  070e4	e59f3570	 ldr         r3, [pc, #0x570]
  070e8	e0833002	 add         r3, r3, r2
  070ec	e5933000	 ldr         r3, [r3]
  070f0	e58d3014	 str         r3, [sp, #0x14]

; 3012 :     dwVertDecimation = g_rgPipelineScaling[ePipeline].dwVertScaling;

  070f4	e59d1068	 ldr         r1, [sp, #0x68]
  070f8	e3a0300c	 mov         r3, #0xC
  070fc	e0020391	 mul         r2, r1, r3
  07100	e59f3554	 ldr         r3, [pc, #0x554]
  07104	e0833002	 add         r3, r3, r2
  07108	e2833004	 add         r3, r3, #4
  0710c	e5933000	 ldr         r3, [r3]
  07110	e58d3010	 str         r3, [sp, #0x10]

; 3013 :     dwInterlace      = g_rgPipelineScaling[ePipeline].dwInterlace;

  07114	e59d1068	 ldr         r1, [sp, #0x68]
  07118	e3a0300c	 mov         r3, #0xC
  0711c	e0020391	 mul         r2, r1, r3
  07120	e59f3534	 ldr         r3, [pc, #0x534]
  07124	e0833002	 add         r3, r3, r2
  07128	e2833008	 add         r3, r3, #8
  0712c	e5933000	 ldr         r3, [r3]
  07130	e58d3004	 str         r3, [sp, #4]

; 3014 : 
; 3015 : 
; 3016 :     //  Depending on rotation settings, change the surface scaling attributes
; 3017 :     switch( eRotation )

  07134	e59d3000	 ldr         r3, [sp]
  07138	e58d301c	 str         r3, [sp, #0x1C]
  0713c	e59d301c	 ldr         r3, [sp, #0x1C]
  07140	e35300b4	 cmp         r3, #0xB4
  07144	ca000009	 bgt         |$LN17@MirrorPipe|
  07148	e59d301c	 ldr         r3, [sp, #0x1C]
  0714c	e35300b4	 cmp         r3, #0xB4
  07150	0a00000c	 beq         |$LN8@MirrorPipe|
  07154	e59d301c	 ldr         r3, [sp, #0x1C]
  07158	e3530000	 cmp         r3, #0
  0715c	0a000009	 beq         |$LN8@MirrorPipe|
  07160	e59d301c	 ldr         r3, [sp, #0x1C]
  07164	e353005a	 cmp         r3, #0x5A
  07168	0a000017	 beq         |$LN7@MirrorPipe|
  0716c	ea000027	 b           |$LN6@MirrorPipe|
  07170		 |$LN17@MirrorPipe|
  07170	e59d201c	 ldr         r2, [sp, #0x1C]
  07174	e3a03c01	 mov         r3, #1, 24
  07178	e383300e	 orr         r3, r3, #0xE
  0717c	e1520003	 cmp         r2, r3
  07180	0a000011	 beq         |$LN7@MirrorPipe|
  07184	ea000021	 b           |$LN6@MirrorPipe|
  07188		 |$LN8@MirrorPipe|

; 3018 :     {
; 3019 :         case OMAP_DSS_ROTATION_0:
; 3020 :         case OMAP_DSS_ROTATION_180:
; 3021 :             //  Set the decimation for the surface
; 3022 :             pSurface->SetHorizontalScaling( dwHorzDecimation );

  07188	e59d1014	 ldr         r1, [sp, #0x14]
  0718c	e59d3008	 ldr         r3, [sp, #8]
  07190	e5933000	 ldr         r3, [r3]
  07194	e2833030	 add         r3, r3, #0x30
  07198	e59d0008	 ldr         r0, [sp, #8]
  0719c	e5933000	 ldr         r3, [r3]
  071a0	e1a0e00f	 mov         lr, pc
  071a4	e12fff13	 bx          r3

; 3023 :             pSurface->SetVerticalScaling( dwVertDecimation );

  071a8	e59d1010	 ldr         r1, [sp, #0x10]
  071ac	e59d3008	 ldr         r3, [sp, #8]
  071b0	e5933000	 ldr         r3, [r3]
  071b4	e2833034	 add         r3, r3, #0x34
  071b8	e59d0008	 ldr         r0, [sp, #8]
  071bc	e5933000	 ldr         r3, [r3]
  071c0	e1a0e00f	 mov         lr, pc
  071c4	e12fff13	 bx          r3

; 3024 :             break;

  071c8	ea000020	 b           |$LN9@MirrorPipe|
  071cc		 |$LN7@MirrorPipe|

; 3025 : 
; 3026 :         case OMAP_DSS_ROTATION_90:
; 3027 :         case OMAP_DSS_ROTATION_270:
; 3028 :             //  Set the decimation for the surface
; 3029 :             pSurface->SetHorizontalScaling( dwVertDecimation );

  071cc	e59d1010	 ldr         r1, [sp, #0x10]
  071d0	e59d3008	 ldr         r3, [sp, #8]
  071d4	e5933000	 ldr         r3, [r3]
  071d8	e2833030	 add         r3, r3, #0x30
  071dc	e59d0008	 ldr         r0, [sp, #8]
  071e0	e5933000	 ldr         r3, [r3]
  071e4	e1a0e00f	 mov         lr, pc
  071e8	e12fff13	 bx          r3

; 3030 :             pSurface->SetVerticalScaling( dwHorzDecimation );

  071ec	e59d1014	 ldr         r1, [sp, #0x14]
  071f0	e59d3008	 ldr         r3, [sp, #8]
  071f4	e5933000	 ldr         r3, [r3]
  071f8	e2833034	 add         r3, r3, #0x34
  071fc	e59d0008	 ldr         r0, [sp, #8]
  07200	e5933000	 ldr         r3, [r3]
  07204	e1a0e00f	 mov         lr, pc
  07208	e12fff13	 bx          r3

; 3031 :             break;

  0720c	ea00000f	 b           |$LN9@MirrorPipe|
  07210		 |$LN6@MirrorPipe|

; 3032 : 
; 3033 :         default:
; 3034 :             ASSERT(0);

  07210	ea000002	 b           |$LN15@MirrorPipe|
  07214	e3a03001	 mov         r3, #1
  07218	e58d3020	 str         r3, [sp, #0x20]
  0721c	ea000008	 b           |$LN16@MirrorPipe|
  07220		 |$LN15@MirrorPipe|
  07220	e3a03c0b	 mov         r3, #0xB, 24
  07224	e38330da	 orr         r3, r3, #0xDA
  07228	e59f2428	 ldr         r2, [pc, #0x428]
  0722c	e59f1420	 ldr         r1, [pc, #0x420]
  07230	e59f0418	 ldr         r0, [pc, #0x418]
  07234	eb000000	 bl          NKDbgPrintfW
  07238	e6000010	 __debugbreak_ce
  0723c	e3a03000	 mov         r3, #0
  07240	e58d3020	 str         r3, [sp, #0x20]
  07244		 |$LN16@MirrorPipe|

; 3035 :             return FALSE;

  07244	e3a03000	 mov         r3, #0
  07248	e58d3018	 str         r3, [sp, #0x18]
  0724c	ea0000fa	 b           |$LN13@MirrorPipe|
  07250		 |$LN9@MirrorPipe|

; 3036 :     }
; 3037 : 
; 3038 :     //  Access the regs
; 3039 :     if( AccessRegs() == FALSE )

  07250	e59d0064	 ldr         r0, [sp, #0x64]
  07254	eb000000	 bl          |?AccessRegs@OMAPDisplayController@@IAAHXZ|
  07258	e58d0024	 str         r0, [sp, #0x24]
  0725c	e59d3024	 ldr         r3, [sp, #0x24]
  07260	e3530000	 cmp         r3, #0
  07264	1a000001	 bne         |$LN5@MirrorPipe|
  07268	ea0000ef	 b           |$LN4@MirrorPipe|

; 3040 :         goto cleanUp;

  0726c	ea0000ee	 b           |$cleanUp$38883|
  07270		 |$LN5@MirrorPipe|

; 3041 : 
; 3042 : 
; 3043 :     //  Update GFX pipeline for mirror setting
; 3044 :     if( ePipeline == OMAP_DSS_PIPELINE_GFX )

  07270	e59d3068	 ldr         r3, [sp, #0x68]
  07274	e3530000	 cmp         r3, #0
  07278	1a000043	 bne         |$LN3@MirrorPipe|

; 3045 :     {
; 3046 :         OUTREG32( &m_pDispRegs->DISPC_GFX_PIXEL_INC, pSurface->PixelIncr(eRotation, bMirror) );

  0727c	e59d206c	 ldr         r2, [sp, #0x6C]
  07280	e59d1000	 ldr         r1, [sp]
  07284	e59d3008	 ldr         r3, [sp, #8]
  07288	e5933000	 ldr         r3, [r3]
  0728c	e2833018	 add         r3, r3, #0x18
  07290	e59d0008	 ldr         r0, [sp, #8]
  07294	e5933000	 ldr         r3, [r3]
  07298	e1a0e00f	 mov         lr, pc
  0729c	e12fff13	 bx          r3
  072a0	e58d0028	 str         r0, [sp, #0x28]
  072a4	e59d3064	 ldr         r3, [sp, #0x64]
  072a8	e2833008	 add         r3, r3, #8
  072ac	e5933000	 ldr         r3, [r3]
  072b0	e28320b0	 add         r2, r3, #0xB0
  072b4	e59d3028	 ldr         r3, [sp, #0x28]
  072b8	e5823000	 str         r3, [r2]

; 3047 :         OUTREG32( &m_pDispRegs->DISPC_GFX_ROW_INC, pSurface->RowIncr(eRotation, bMirror) );

  072bc	e59d206c	 ldr         r2, [sp, #0x6C]
  072c0	e59d1000	 ldr         r1, [sp]
  072c4	e59d3008	 ldr         r3, [sp, #8]
  072c8	e5933000	 ldr         r3, [r3]
  072cc	e283301c	 add         r3, r3, #0x1C
  072d0	e59d0008	 ldr         r0, [sp, #8]
  072d4	e5933000	 ldr         r3, [r3]
  072d8	e1a0e00f	 mov         lr, pc
  072dc	e12fff13	 bx          r3
  072e0	e58d002c	 str         r0, [sp, #0x2C]
  072e4	e59d3064	 ldr         r3, [sp, #0x64]
  072e8	e2833008	 add         r3, r3, #8
  072ec	e5933000	 ldr         r3, [r3]
  072f0	e28320ac	 add         r2, r3, #0xAC
  072f4	e59d302c	 ldr         r3, [sp, #0x2C]
  072f8	e5823000	 str         r3, [r2]

; 3048 : 
; 3049 :         OUTREG32( &m_pDispRegs->DISPC_GFX_BA0, pSurface->PhysicalAddr(eRotation, bMirror) );

  072fc	e3a03000	 mov         r3, #0
  07300	e59d206c	 ldr         r2, [sp, #0x6C]
  07304	e59d1000	 ldr         r1, [sp]
  07308	e59d0008	 ldr         r0, [sp, #8]
  0730c	e5900000	 ldr         r0, [r0]
  07310	e280e014	 add         lr, r0, #0x14
  07314	e59d0008	 ldr         r0, [sp, #8]
  07318	e59e4000	 ldr         r4, [lr]
  0731c	e1a0e00f	 mov         lr, pc
  07320	e12fff14	 bx          r4
  07324	e58d0030	 str         r0, [sp, #0x30]
  07328	e59d3064	 ldr         r3, [sp, #0x64]
  0732c	e2833008	 add         r3, r3, #8
  07330	e5933000	 ldr         r3, [r3]
  07334	e2832080	 add         r2, r3, #0x80
  07338	e59d3030	 ldr         r3, [sp, #0x30]
  0733c	e5823000	 str         r3, [r2]

; 3050 :         OUTREG32( &m_pDispRegs->DISPC_GFX_BA1, pSurface->PhysicalAddr(eRotation, bMirror) + dwInterlace );

  07340	e3a03000	 mov         r3, #0
  07344	e59d206c	 ldr         r2, [sp, #0x6C]
  07348	e59d1000	 ldr         r1, [sp]
  0734c	e59d0008	 ldr         r0, [sp, #8]
  07350	e5900000	 ldr         r0, [r0]
  07354	e280e014	 add         lr, r0, #0x14
  07358	e59d0008	 ldr         r0, [sp, #8]
  0735c	e59e4000	 ldr         r4, [lr]
  07360	e1a0e00f	 mov         lr, pc
  07364	e12fff14	 bx          r4
  07368	e58d0034	 str         r0, [sp, #0x34]
  0736c	e59d2034	 ldr         r2, [sp, #0x34]
  07370	e59d3004	 ldr         r3, [sp, #4]
  07374	e0822003	 add         r2, r2, r3
  07378	e59d3064	 ldr         r3, [sp, #0x64]
  0737c	e2833008	 add         r3, r3, #8
  07380	e5933000	 ldr         r3, [r3]
  07384	e2833084	 add         r3, r3, #0x84
  07388	e5832000	 str         r2, [r3]
  0738c		 |$LN3@MirrorPipe|

; 3051 :     }
; 3052 : 
; 3053 :     //  Update VID1 pipeline for mirror setting
; 3054 :     if( ePipeline == OMAP_DSS_PIPELINE_VIDEO1 )

  0738c	e59d3068	 ldr         r3, [sp, #0x68]
  07390	e3530001	 cmp         r3, #1
  07394	1a000043	 bne         |$LN2@MirrorPipe|

; 3055 :     {
; 3056 :         OUTREG32( &m_pDispRegs->tDISPC_VID1.PIXEL_INC, pSurface->PixelIncr(eRotation, bMirror) );

  07398	e59d206c	 ldr         r2, [sp, #0x6C]
  0739c	e59d1000	 ldr         r1, [sp]
  073a0	e59d3008	 ldr         r3, [sp, #8]
  073a4	e5933000	 ldr         r3, [r3]
  073a8	e2833018	 add         r3, r3, #0x18
  073ac	e59d0008	 ldr         r0, [sp, #8]
  073b0	e5933000	 ldr         r3, [r3]
  073b4	e1a0e00f	 mov         lr, pc
  073b8	e12fff13	 bx          r3
  073bc	e58d0038	 str         r0, [sp, #0x38]
  073c0	e59d3064	 ldr         r3, [sp, #0x64]
  073c4	e2833008	 add         r3, r3, #8
  073c8	e5933000	 ldr         r3, [r3]
  073cc	e28320dc	 add         r2, r3, #0xDC
  073d0	e59d3038	 ldr         r3, [sp, #0x38]
  073d4	e5823000	 str         r3, [r2]

; 3057 :         OUTREG32( &m_pDispRegs->tDISPC_VID1.ROW_INC, pSurface->RowIncr(eRotation, bMirror) );

  073d8	e59d206c	 ldr         r2, [sp, #0x6C]
  073dc	e59d1000	 ldr         r1, [sp]
  073e0	e59d3008	 ldr         r3, [sp, #8]
  073e4	e5933000	 ldr         r3, [r3]
  073e8	e283301c	 add         r3, r3, #0x1C
  073ec	e59d0008	 ldr         r0, [sp, #8]
  073f0	e5933000	 ldr         r3, [r3]
  073f4	e1a0e00f	 mov         lr, pc
  073f8	e12fff13	 bx          r3
  073fc	e58d003c	 str         r0, [sp, #0x3C]
  07400	e59d3064	 ldr         r3, [sp, #0x64]
  07404	e2833008	 add         r3, r3, #8
  07408	e5933000	 ldr         r3, [r3]
  0740c	e28320d8	 add         r2, r3, #0xD8
  07410	e59d303c	 ldr         r3, [sp, #0x3C]
  07414	e5823000	 str         r3, [r2]

; 3058 : 
; 3059 :         OUTREG32( &m_pDispRegs->tDISPC_VID1.BA0, pSurface->PhysicalAddr(eRotation, bMirror) + dwInterlace );

  07418	e3a03000	 mov         r3, #0
  0741c	e59d206c	 ldr         r2, [sp, #0x6C]
  07420	e59d1000	 ldr         r1, [sp]
  07424	e59d0008	 ldr         r0, [sp, #8]
  07428	e5900000	 ldr         r0, [r0]
  0742c	e280e014	 add         lr, r0, #0x14
  07430	e59d0008	 ldr         r0, [sp, #8]
  07434	e59e4000	 ldr         r4, [lr]
  07438	e1a0e00f	 mov         lr, pc
  0743c	e12fff14	 bx          r4
  07440	e58d0040	 str         r0, [sp, #0x40]
  07444	e59d2040	 ldr         r2, [sp, #0x40]
  07448	e59d3004	 ldr         r3, [sp, #4]
  0744c	e0822003	 add         r2, r2, r3
  07450	e59d3064	 ldr         r3, [sp, #0x64]
  07454	e2833008	 add         r3, r3, #8
  07458	e5933000	 ldr         r3, [r3]
  0745c	e28330bc	 add         r3, r3, #0xBC
  07460	e5832000	 str         r2, [r3]

; 3060 :         OUTREG32( &m_pDispRegs->tDISPC_VID1.BA1, pSurface->PhysicalAddr(eRotation, bMirror) );

  07464	e3a03000	 mov         r3, #0
  07468	e59d206c	 ldr         r2, [sp, #0x6C]
  0746c	e59d1000	 ldr         r1, [sp]
  07470	e59d0008	 ldr         r0, [sp, #8]
  07474	e5900000	 ldr         r0, [r0]
  07478	e280e014	 add         lr, r0, #0x14
  0747c	e59d0008	 ldr         r0, [sp, #8]
  07480	e59e4000	 ldr         r4, [lr]
  07484	e1a0e00f	 mov         lr, pc
  07488	e12fff14	 bx          r4
  0748c	e58d0044	 str         r0, [sp, #0x44]
  07490	e59d3064	 ldr         r3, [sp, #0x64]
  07494	e2833008	 add         r3, r3, #8
  07498	e5933000	 ldr         r3, [r3]
  0749c	e28320c0	 add         r2, r3, #0xC0
  074a0	e59d3044	 ldr         r3, [sp, #0x44]
  074a4	e5823000	 str         r3, [r2]
  074a8		 |$LN2@MirrorPipe|

; 3061 : 
; 3062 :     }
; 3063 : 
; 3064 :     //  Update VID2 pipeline for mirror setting
; 3065 :     if( ePipeline == OMAP_DSS_PIPELINE_VIDEO2 )

  074a8	e59d3068	 ldr         r3, [sp, #0x68]
  074ac	e3530002	 cmp         r3, #2
  074b0	1a000043	 bne         |$LN1@MirrorPipe|

; 3066 :     {
; 3067 :         OUTREG32( &m_pDispRegs->tDISPC_VID2.PIXEL_INC, pSurface->PixelIncr(eRotation, bMirror) );

  074b4	e59d206c	 ldr         r2, [sp, #0x6C]
  074b8	e59d1000	 ldr         r1, [sp]
  074bc	e59d3008	 ldr         r3, [sp, #8]
  074c0	e5933000	 ldr         r3, [r3]
  074c4	e2833018	 add         r3, r3, #0x18
  074c8	e59d0008	 ldr         r0, [sp, #8]
  074cc	e5933000	 ldr         r3, [r3]
  074d0	e1a0e00f	 mov         lr, pc
  074d4	e12fff13	 bx          r3
  074d8	e58d0048	 str         r0, [sp, #0x48]
  074dc	e59d3064	 ldr         r3, [sp, #0x64]
  074e0	e2833008	 add         r3, r3, #8
  074e4	e5933000	 ldr         r3, [r3]
  074e8	e2832f5b	 add         r2, r3, #0x5B, 30
  074ec	e59d3048	 ldr         r3, [sp, #0x48]
  074f0	e5823000	 str         r3, [r2]

; 3068 :         OUTREG32( &m_pDispRegs->tDISPC_VID2.ROW_INC, pSurface->RowIncr(eRotation, bMirror) );

  074f4	e59d206c	 ldr         r2, [sp, #0x6C]
  074f8	e59d1000	 ldr         r1, [sp]
  074fc	e59d3008	 ldr         r3, [sp, #8]
  07500	e5933000	 ldr         r3, [r3]
  07504	e283301c	 add         r3, r3, #0x1C
  07508	e59d0008	 ldr         r0, [sp, #8]
  0750c	e5933000	 ldr         r3, [r3]
  07510	e1a0e00f	 mov         lr, pc
  07514	e12fff13	 bx          r3
  07518	e58d004c	 str         r0, [sp, #0x4C]
  0751c	e59d3064	 ldr         r3, [sp, #0x64]
  07520	e2833008	 add         r3, r3, #8
  07524	e5933000	 ldr         r3, [r3]
  07528	e2832f5a	 add         r2, r3, #0x5A, 30
  0752c	e59d304c	 ldr         r3, [sp, #0x4C]
  07530	e5823000	 str         r3, [r2]

; 3069 : 
; 3070 :         OUTREG32( &m_pDispRegs->tDISPC_VID2.BA0, pSurface->PhysicalAddr(eRotation, bMirror) + dwInterlace );

  07534	e3a03000	 mov         r3, #0
  07538	e59d206c	 ldr         r2, [sp, #0x6C]
  0753c	e59d1000	 ldr         r1, [sp]
  07540	e59d0008	 ldr         r0, [sp, #8]
  07544	e5900000	 ldr         r0, [r0]
  07548	e280e014	 add         lr, r0, #0x14
  0754c	e59d0008	 ldr         r0, [sp, #8]
  07550	e59e4000	 ldr         r4, [lr]
  07554	e1a0e00f	 mov         lr, pc
  07558	e12fff14	 bx          r4
  0755c	e58d0050	 str         r0, [sp, #0x50]
  07560	e59d2050	 ldr         r2, [sp, #0x50]
  07564	e59d3004	 ldr         r3, [sp, #4]
  07568	e0822003	 add         r2, r2, r3
  0756c	e59d3064	 ldr         r3, [sp, #0x64]
  07570	e2833008	 add         r3, r3, #8
  07574	e5933000	 ldr         r3, [r3]
  07578	e2833f53	 add         r3, r3, #0x53, 30
  0757c	e5832000	 str         r2, [r3]

; 3071 :         OUTREG32( &m_pDispRegs->tDISPC_VID2.BA1, pSurface->PhysicalAddr(eRotation, bMirror) );

  07580	e3a03000	 mov         r3, #0
  07584	e59d206c	 ldr         r2, [sp, #0x6C]
  07588	e59d1000	 ldr         r1, [sp]
  0758c	e59d0008	 ldr         r0, [sp, #8]
  07590	e5900000	 ldr         r0, [r0]
  07594	e280e014	 add         lr, r0, #0x14
  07598	e59d0008	 ldr         r0, [sp, #8]
  0759c	e59e4000	 ldr         r4, [lr]
  075a0	e1a0e00f	 mov         lr, pc
  075a4	e12fff14	 bx          r4
  075a8	e58d0054	 str         r0, [sp, #0x54]
  075ac	e59d3064	 ldr         r3, [sp, #0x64]
  075b0	e2833008	 add         r3, r3, #8
  075b4	e5933000	 ldr         r3, [r3]
  075b8	e2832e15	 add         r2, r3, #0x15, 28
  075bc	e59d3054	 ldr         r3, [sp, #0x54]
  075c0	e5823000	 str         r3, [r2]
  075c4		 |$LN1@MirrorPipe|

; 3072 :     }
; 3073 : 
; 3074 : 
; 3075 :     //  Update pipeline output mirror setting
; 3076 :     g_rgPipelineMapping[ePipeline].bMirror = bMirror;

  075c4	e59d1068	 ldr         r1, [sp, #0x68]
  075c8	e3a03020	 mov         r3, #0x20
  075cc	e0020391	 mul         r2, r1, r3
  075d0	e59f3074	 ldr         r3, [pc, #0x74]
  075d4	e0833002	 add         r3, r3, r2
  075d8	e2832010	 add         r2, r3, #0x10
  075dc	e59d306c	 ldr         r3, [sp, #0x6C]
  075e0	e5823000	 str         r3, [r2]

; 3077 : 
; 3078 :     //  Set the decimation factors for the surface back to normal
; 3079 :     pSurface->SetHorizontalScaling( 1 );

  075e4	e3a01001	 mov         r1, #1
  075e8	e59d3008	 ldr         r3, [sp, #8]
  075ec	e5933000	 ldr         r3, [r3]
  075f0	e2833030	 add         r3, r3, #0x30
  075f4	e59d0008	 ldr         r0, [sp, #8]
  075f8	e5933000	 ldr         r3, [r3]
  075fc	e1a0e00f	 mov         lr, pc
  07600	e12fff13	 bx          r3

; 3080 :     pSurface->SetVerticalScaling( 1 );

  07604	e3a01001	 mov         r1, #1
  07608	e59d3008	 ldr         r3, [sp, #8]
  0760c	e5933000	 ldr         r3, [r3]
  07610	e2833034	 add         r3, r3, #0x34
  07614	e59d0008	 ldr         r0, [sp, #8]
  07618	e5933000	 ldr         r3, [r3]
  0761c	e1a0e00f	 mov         lr, pc
  07620	e12fff13	 bx          r3

; 3081 : 
; 3082 : 
; 3083 :     //  Result
; 3084 :     bResult = TRUE;

  07624	e3a03001	 mov         r3, #1
  07628	e58d300c	 str         r3, [sp, #0xC]
  0762c		 |$LN4@MirrorPipe|
  0762c		 |$cleanUp$38883|

; 3085 : 
; 3086 : cleanUp:
; 3087 :     //  Release regs
; 3088 :     ReleaseRegs();

  0762c	e59d0064	 ldr         r0, [sp, #0x64]
  07630	eb000000	 bl          |?ReleaseRegs@OMAPDisplayController@@IAAHXZ|

; 3089 : 
; 3090 :     //  Return result
; 3091 :     return bResult;

  07634	e59d300c	 ldr         r3, [sp, #0xC]
  07638	e58d3018	 str         r3, [sp, #0x18]
  0763c		 |$LN13@MirrorPipe|

; 3092 : }

  0763c	e59d0018	 ldr         r0, [sp, #0x18]
  07640	e28dd058	 add         sp, sp, #0x58
  07644	e89d6010	 ldmia       sp, {r4, sp, lr}
  07648	e12fff1e	 bx          lr
  0764c		 |$LN21@MirrorPipe|
  0764c		 |$LN22@MirrorPipe|
  0764c	00000000	 DCD         |?g_rgPipelineMapping@@3PAUOMAPPipelineConfig@@A|
  07650		 |$LN23@MirrorPipe|
  07650	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  07654		 |$LN24@MirrorPipe|
  07654	00000000	 DCD         |??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@|
  07658		 |$LN25@MirrorPipe|
  07658	00000000	 DCD         |??_C@_1KC@HIABDGPO@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  0765c		 |$LN26@MirrorPipe|
  0765c	00000000	 DCD         |?g_rgPipelineScaling@@3PAUOMAPPipelineScaling@@A|
  07660		 |$M40713|

			 ENDP  ; |?MirrorPipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@H@Z|, OMAPDisplayController::MirrorPipeline

	EXPORT	|?UpdateScalingAttribs@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@PAUtagRECT@@1@Z| ; OMAPDisplayController::UpdateScalingAttribs

  000b0			 AREA	 |.pdata|, PDATA
|$T40729| DCD	|$LN17@UpdateScal|
	DCD	0x40005c04
; Function compile flags: /Odtp

  07660			 AREA	 |.text|, CODE, ARM

  07660		 |?UpdateScalingAttribs@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@PAUtagRECT@@1@Z| PROC ; OMAPDisplayController::UpdateScalingAttribs

; 3101 : {

  07660		 |$LN17@UpdateScal|
  07660	e1a0c00d	 mov         r12, sp
  07664	e92d000f	 stmdb       sp!, {r0 - r3}
  07668	e92d5000	 stmdb       sp!, {r12, lr}
  0766c	e24dd01c	 sub         sp, sp, #0x1C
  07670		 |$M40726|

; 3102 :     BOOL    bResult = FALSE;

  07670	e3a03000	 mov         r3, #0
  07674	e58d3000	 str         r3, [sp]

; 3103 : 
; 3104 : 
; 3105 :     //  Check if pipeline is enabled; ignore operation if not
; 3106 :     if( g_rgPipelineMapping[ePipeline].bEnabled == FALSE )

  07678	e59d1028	 ldr         r1, [sp, #0x28]
  0767c	e3a03020	 mov         r3, #0x20
  07680	e0020391	 mul         r2, r1, r3
  07684	e59f3140	 ldr         r3, [pc, #0x140]
  07688	e0833002	 add         r3, r3, r2
  0768c	e5933000	 ldr         r3, [r3]
  07690	e3530000	 cmp         r3, #0
  07694	1a000002	 bne         |$LN10@UpdateScal|

; 3107 :         return FALSE;

  07698	e3a03000	 mov         r3, #0
  0769c	e58d3008	 str         r3, [sp, #8]
  076a0	ea000042	 b           |$LN11@UpdateScal|
  076a4		 |$LN10@UpdateScal|

; 3108 : 
; 3109 :     //  Access the regs
; 3110 :     if( AccessRegs() == FALSE )

  076a4	e59d0024	 ldr         r0, [sp, #0x24]
  076a8	eb000000	 bl          |?AccessRegs@OMAPDisplayController@@IAAHXZ|
  076ac	e58d000c	 str         r0, [sp, #0xC]
  076b0	e59d300c	 ldr         r3, [sp, #0xC]
  076b4	e3530000	 cmp         r3, #0
  076b8	1a000001	 bne         |$LN9@UpdateScal|
  076bc	ea000037	 b           |$LN8@UpdateScal|

; 3111 :         goto cleanUp;

  076c0	ea000036	 b           |$cleanUp$38921|
  076c4		 |$LN9@UpdateScal|

; 3112 : 
; 3113 :     
; 3114 :     //  Update the scaling attributes
; 3115 :     bResult = SetScalingAttribs( ePipeline, pSrcRect, pDestRect );

  076c4	e59d3030	 ldr         r3, [sp, #0x30]
  076c8	e59d202c	 ldr         r2, [sp, #0x2C]
  076cc	e59d1028	 ldr         r1, [sp, #0x28]
  076d0	e59d0024	 ldr         r0, [sp, #0x24]
  076d4	eb000000	 bl          |?SetScalingAttribs@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@PAUtagRECT@@1@Z|
  076d8	e58d0010	 str         r0, [sp, #0x10]
  076dc	e59d3010	 ldr         r3, [sp, #0x10]
  076e0	e58d3000	 str         r3, [sp]

; 3116 :     if( bResult )

  076e4	e59d3000	 ldr         r3, [sp]
  076e8	e3530000	 cmp         r3, #0
  076ec	0a00002b	 beq         |$LN7@UpdateScal|

; 3117 :     {
; 3118 :         DWORD dwDestGo = 0;

  076f0	e3a03000	 mov         r3, #0
  076f4	e58d3004	 str         r3, [sp, #4]

; 3119 :     
; 3120 :         //  Get the destination for the pipeline
; 3121 :         switch( g_rgPipelineMapping[ePipeline].eDestination )

  076f8	e59d1028	 ldr         r1, [sp, #0x28]
  076fc	e3a03020	 mov         r3, #0x20
  07700	e0020391	 mul         r2, r1, r3
  07704	e59f30c0	 ldr         r3, [pc, #0xC0]
  07708	e0833002	 add         r3, r3, r2
  0770c	e2833004	 add         r3, r3, #4
  07710	e5933000	 ldr         r3, [r3]
  07714	e58d3014	 str         r3, [sp, #0x14]
  07718	e59d3014	 ldr         r3, [sp, #0x14]
  0771c	e3530000	 cmp         r3, #0
  07720	0a000003	 beq         |$LN4@UpdateScal|
  07724	e59d3014	 ldr         r3, [sp, #0x14]
  07728	e3530001	 cmp         r3, #1
  0772c	0a000003	 beq         |$LN3@UpdateScal|
  07730	ea000005	 b           |$LN2@UpdateScal|
  07734		 |$LN4@UpdateScal|

; 3122 :         {
; 3123 :             case OMAP_DSS_DESTINATION_LCD:
; 3124 :                 //  Set go bit for LCD
; 3125 :                 dwDestGo  = DISPC_CONTROL_GOLCD;

  07734	e3a03020	 mov         r3, #0x20
  07738	e58d3004	 str         r3, [sp, #4]

; 3126 :                 break;

  0773c	ea000011	 b           |$LN5@UpdateScal|
  07740		 |$LN3@UpdateScal|

; 3127 : 
; 3128 :             case OMAP_DSS_DESTINATION_TVOUT:
; 3129 :                 //  Set go bit for TV Out
; 3130 :                 dwDestGo  = DISPC_CONTROL_GODIGITAL;

  07740	e3a03040	 mov         r3, #0x40
  07744	e58d3004	 str         r3, [sp, #4]

; 3131 :                 break;

  07748	ea00000e	 b           |$LN5@UpdateScal|
  0774c		 |$LN2@UpdateScal|

; 3132 : 
; 3133 :             default:
; 3134 :                 ASSERT(0);

  0774c	ea000002	 b           |$LN13@UpdateScal|
  07750	e3a03001	 mov         r3, #1
  07754	e58d3018	 str         r3, [sp, #0x18]
  07758	ea000008	 b           |$LN14@UpdateScal|
  0775c		 |$LN13@UpdateScal|
  0775c	e3a03b03	 mov         r3, #3, 22
  07760	e383303e	 orr         r3, r3, #0x3E
  07764	e59f205c	 ldr         r2, [pc, #0x5C]
  07768	e59f1054	 ldr         r1, [pc, #0x54]
  0776c	e59f004c	 ldr         r0, [pc, #0x4C]
  07770	eb000000	 bl          NKDbgPrintfW
  07774	e6000010	 __debugbreak_ce
  07778	e3a03000	 mov         r3, #0
  0777c	e58d3018	 str         r3, [sp, #0x18]
  07780		 |$LN14@UpdateScal|

; 3135 :                 goto cleanUp;

  07780	ea000006	 b           |$LN1@UpdateScal|
  07784	ea000005	 b           |$cleanUp$38921|
  07788		 |$LN5@UpdateScal|

; 3136 :         }
; 3137 : 
; 3138 :         //  Enable/update overlay optimization
; 3139 :         EnableOverlayOptimization( TRUE );

  07788	e3a01001	 mov         r1, #1
  0778c	e59d0024	 ldr         r0, [sp, #0x24]
  07790	eb000000	 bl          |?EnableOverlayOptimization@OMAPDisplayController@@QAAXH@Z|

; 3140 : 
; 3141 :         //  Flush the shadow registers
; 3142 :         FlushRegs( dwDestGo );

  07794	e59d1004	 ldr         r1, [sp, #4]
  07798	e59d0024	 ldr         r0, [sp, #0x24]
  0779c	eb000000	 bl          |?FlushRegs@OMAPDisplayController@@IAAHK@Z|
  077a0		 |$LN7@UpdateScal|
  077a0		 |$LN1@UpdateScal|
  077a0		 |$LN8@UpdateScal|
  077a0		 |$cleanUp$38921|

; 3143 :     }    
; 3144 : 
; 3145 : 
; 3146 : cleanUp:
; 3147 :     //  Release regs
; 3148 :     ReleaseRegs();

  077a0	e59d0024	 ldr         r0, [sp, #0x24]
  077a4	eb000000	 bl          |?ReleaseRegs@OMAPDisplayController@@IAAHXZ|

; 3149 : 
; 3150 :     //  Return result
; 3151 :     return bResult;

  077a8	e59d3000	 ldr         r3, [sp]
  077ac	e58d3008	 str         r3, [sp, #8]
  077b0		 |$LN11@UpdateScal|

; 3152 : }

  077b0	e59d0008	 ldr         r0, [sp, #8]
  077b4	e28dd01c	 add         sp, sp, #0x1C
  077b8	e89d6000	 ldmia       sp, {sp, lr}
  077bc	e12fff1e	 bx          lr
  077c0		 |$LN18@UpdateScal|
  077c0		 |$LN19@UpdateScal|
  077c0	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  077c4		 |$LN20@UpdateScal|
  077c4	00000000	 DCD         |??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@|
  077c8		 |$LN21@UpdateScal|
  077c8	00000000	 DCD         |??_C@_1KC@HIABDGPO@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  077cc		 |$LN22@UpdateScal|
  077cc	00000000	 DCD         |?g_rgPipelineMapping@@3PAUOMAPPipelineConfig@@A|
  077d0		 |$M40727|

			 ENDP  ; |?UpdateScalingAttribs@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@PAUtagRECT@@1@Z|, OMAPDisplayController::UpdateScalingAttribs

	EXPORT	|?EnableColorKey@OMAPDisplayController@@QAAHW4OMAP_DSS_COLORKEY@@W4OMAP_DSS_DESTINATION@@K@Z| ; OMAPDisplayController::EnableColorKey

  000b8			 AREA	 |.pdata|, PDATA
|$T40756| DCD	|$LN45@EnableColo|
	DCD	0x40011d04
; Function compile flags: /Odtp

  077d0			 AREA	 |.text|, CODE, ARM

  077d0		 |?EnableColorKey@OMAPDisplayController@@QAAHW4OMAP_DSS_COLORKEY@@W4OMAP_DSS_DESTINATION@@K@Z| PROC ; OMAPDisplayController::EnableColorKey

; 3161 : {

  077d0		 |$LN45@EnableColo|
  077d0	e1a0c00d	 mov         r12, sp
  077d4	e92d000f	 stmdb       sp!, {r0 - r3}
  077d8	e92d5000	 stmdb       sp!, {r12, lr}
  077dc	e24dd024	 sub         sp, sp, #0x24
  077e0		 |$M40753|

; 3162 :     BOOL    bResult = FALSE;

  077e0	e3a03000	 mov         r3, #0
  077e4	e58d3004	 str         r3, [sp, #4]

; 3163 :     DWORD   dwCurrentColor = 0;

  077e8	e3a03000	 mov         r3, #0
  077ec	e58d3008	 str         r3, [sp, #8]

; 3164 :     DWORD   dwDestGo = 0;

  077f0	e3a03000	 mov         r3, #0
  077f4	e58d3000	 str         r3, [sp]

; 3165 : 
; 3166 : 
; 3167 :     //  Access the regs
; 3168 :     if( AccessRegs() == FALSE )

  077f8	e59d002c	 ldr         r0, [sp, #0x2C]
  077fc	eb000000	 bl          |?AccessRegs@OMAPDisplayController@@IAAHXZ|
  07800	e58d0010	 str         r0, [sp, #0x10]
  07804	e59d3010	 ldr         r3, [sp, #0x10]
  07808	e3530000	 cmp         r3, #0
  0780c	1a000001	 bne         |$LN24@EnableColo|
  07810	ea000100	 b           |$LN23@EnableColo|

; 3169 :         goto cleanUp;

  07814	ea0000ff	 b           |$cleanUp$38945|
  07818		 |$LN24@EnableColo|

; 3170 : 
; 3171 :     
; 3172 :     //  Enable color key for the LCD
; 3173 :     if( eDestination == OMAP_DSS_DESTINATION_LCD )

  07818	e59d3034	 ldr         r3, [sp, #0x34]
  0781c	e3530000	 cmp         r3, #0
  07820	1a00007b	 bne         |$LN22@EnableColo|

; 3174 :     {
; 3175 :         //  Set color key for LCD
; 3176 :         switch( eColorKey )

  07824	e59d3030	 ldr         r3, [sp, #0x30]
  07828	e58d3014	 str         r3, [sp, #0x14]
  0782c	e59d3014	 ldr         r3, [sp, #0x14]
  07830	e3530003	 cmp         r3, #3
  07834	8a000062	 bhi         |$LN13@EnableColo|
  07838	e59d2014	 ldr         r2, [sp, #0x14]
  0783c	e1a03102	 mov         r3, r2, lsl #2
  07840	e083300f	 add         r3, r3, pc
  07844	e5933004	 ldr         r3, [r3, #4]
  07848	e08ff003	 add         pc, pc, r3
  0784c		 |$LN32@EnableColo|
  0784c		 |$LN31@EnableColo|
  0784c		 |$LN33@EnableColo|
  0784c	0000000c	 DCD         0xc
  07850		 |$LN34@EnableColo|
  07850	0000000c	 DCD         0xc
  07854		 |$LN35@EnableColo|
  07854	000000c0	 DCD         0xc0
  07858		 |$LN36@EnableColo|
  07858	000000c0	 DCD         0xc0
  0785c		 |$LN19@EnableColo|

; 3177 :         {
; 3178 :             case OMAP_DSS_COLORKEY_TRANS_SOURCE:
; 3179 :             case OMAP_DSS_COLORKEY_TRANS_DEST:
; 3180 :                 //  Set transparent color for LCD
; 3181 :                 OUTREG32( &m_pDispRegs->DISPC_TRANS_COLOR0, dwColor );

  0785c	e59d302c	 ldr         r3, [sp, #0x2C]
  07860	e2833008	 add         r3, r3, #8
  07864	e5933000	 ldr         r3, [r3]
  07868	e2832054	 add         r2, r3, #0x54
  0786c	e59d3038	 ldr         r3, [sp, #0x38]
  07870	e5823000	 str         r3, [r2]

; 3182 :                 
; 3183 :                 //  Enable LCD transparent color blender
; 3184 :                 SETREG32( &m_pDispRegs->DISPC_CONFIG, DISPC_CONFIG_TCKLCDENABLE );

  07874	e59d302c	 ldr         r3, [sp, #0x2C]
  07878	e2833008	 add         r3, r3, #8
  0787c	e5933000	 ldr         r3, [r3]
  07880	e2833044	 add         r3, r3, #0x44
  07884	e5933000	 ldr         r3, [r3]
  07888	e3832b01	 orr         r2, r3, #1, 22
  0788c	e59d302c	 ldr         r3, [sp, #0x2C]
  07890	e2833008	 add         r3, r3, #8
  07894	e5933000	 ldr         r3, [r3]
  07898	e2833044	 add         r3, r3, #0x44
  0789c	e5832000	 str         r2, [r3]

; 3185 : 
; 3186 :                 //  Select source or destination transparency
; 3187 :                 if( eColorKey == OMAP_DSS_COLORKEY_TRANS_SOURCE )

  078a0	e59d3030	 ldr         r3, [sp, #0x30]
  078a4	e3530000	 cmp         r3, #0
  078a8	1a00000b	 bne         |$LN18@EnableColo|

; 3188 :                     SETREG32( &m_pDispRegs->DISPC_CONFIG, DISPC_CONFIG_TCKLCDSELECTION );

  078ac	e59d302c	 ldr         r3, [sp, #0x2C]
  078b0	e2833008	 add         r3, r3, #8
  078b4	e5933000	 ldr         r3, [r3]
  078b8	e2833044	 add         r3, r3, #0x44
  078bc	e5933000	 ldr         r3, [r3]
  078c0	e3832b02	 orr         r2, r3, #2, 22
  078c4	e59d302c	 ldr         r3, [sp, #0x2C]
  078c8	e2833008	 add         r3, r3, #8
  078cc	e5933000	 ldr         r3, [r3]
  078d0	e2833044	 add         r3, r3, #0x44
  078d4	e5832000	 str         r2, [r3]

; 3189 :                 else

  078d8	ea00000b	 b           |$LN17@EnableColo|
  078dc		 |$LN18@EnableColo|

; 3190 :                     CLRREG32( &m_pDispRegs->DISPC_CONFIG, DISPC_CONFIG_TCKLCDSELECTION );

  078dc	e59d302c	 ldr         r3, [sp, #0x2C]
  078e0	e2833008	 add         r3, r3, #8
  078e4	e5933000	 ldr         r3, [r3]
  078e8	e2833044	 add         r3, r3, #0x44
  078ec	e5932000	 ldr         r2, [r3]
  078f0	e3e03b02	 mvn         r3, #2, 22
  078f4	e0022003	 and         r2, r2, r3
  078f8	e59d302c	 ldr         r3, [sp, #0x2C]
  078fc	e2833008	 add         r3, r3, #8
  07900	e5933000	 ldr         r3, [r3]
  07904	e2833044	 add         r3, r3, #0x44
  07908	e5832000	 str         r2, [r3]
  0790c		 |$LN17@EnableColo|

; 3191 :                 
; 3192 :                 break;

  0790c	ea00003b	 b           |$LN20@EnableColo|
  07910		 |$LN16@EnableColo|

; 3193 : 
; 3194 :                 
; 3195 :             case OMAP_DSS_COLORKEY_GLOBAL_ALPHA_GFX:
; 3196 :             case OMAP_DSS_COLORKEY_GLOBAL_ALPHA_VIDEO2:
; 3197 :                 //  Get current color (both LCD and VID2 are in this single register)
; 3198 :                 dwCurrentColor = INREG32( &m_pDispRegs->DISPC_GLOBAL_ALPHA );

  07910	e59d302c	 ldr         r3, [sp, #0x2C]
  07914	e2833008	 add         r3, r3, #8
  07918	e5933000	 ldr         r3, [r3]
  0791c	e2833074	 add         r3, r3, #0x74
  07920	e5933000	 ldr         r3, [r3]
  07924	e58d3008	 str         r3, [sp, #8]

; 3199 :                 
; 3200 :                 //  Set global alpha color for LCD
; 3201 :                 if( eColorKey == OMAP_DSS_COLORKEY_GLOBAL_ALPHA_GFX )

  07928	e59d3030	 ldr         r3, [sp, #0x30]
  0792c	e3530002	 cmp         r3, #2
  07930	1a000008	 bne         |$LN15@EnableColo|

; 3202 :                     dwColor = (dwCurrentColor & 0xFFFF0000) | DISPC_GLOBAL_ALPHA_GFX(dwColor);

  07934	e59d2008	 ldr         r2, [sp, #8]
  07938	e3e03cff	 mvn         r3, #0xFF, 24
  0793c	e22330ff	 eor         r3, r3, #0xFF
  07940	e0022003	 and         r2, r2, r3
  07944	e59d3038	 ldr         r3, [sp, #0x38]
  07948	e20330ff	 and         r3, r3, #0xFF
  0794c	e1823003	 orr         r3, r2, r3
  07950	e58d3038	 str         r3, [sp, #0x38]

; 3203 :                 else

  07954	ea000008	 b           |$LN14@EnableColo|
  07958		 |$LN15@EnableColo|

; 3204 :                     dwColor = (dwCurrentColor & 0x0000FFFF) | DISPC_GLOBAL_ALPHA_VID2(dwColor);

  07958	e59d2008	 ldr         r2, [sp, #8]
  0795c	e3a03cff	 mov         r3, #0xFF, 24
  07960	e38330ff	 orr         r3, r3, #0xFF
  07964	e0022003	 and         r2, r2, r3
  07968	e59d3038	 ldr         r3, [sp, #0x38]
  0796c	e20330ff	 and         r3, r3, #0xFF
  07970	e1a03803	 mov         r3, r3, lsl #16
  07974	e1823003	 orr         r3, r2, r3
  07978	e58d3038	 str         r3, [sp, #0x38]
  0797c		 |$LN14@EnableColo|

; 3205 : 
; 3206 :                 OUTREG32( &m_pDispRegs->DISPC_GLOBAL_ALPHA, dwColor );

  0797c	e59d302c	 ldr         r3, [sp, #0x2C]
  07980	e2833008	 add         r3, r3, #8
  07984	e5933000	 ldr         r3, [r3]
  07988	e2832074	 add         r2, r3, #0x74
  0798c	e59d3038	 ldr         r3, [sp, #0x38]
  07990	e5823000	 str         r3, [r2]

; 3207 :                 
; 3208 :                 //  Enable LCD alpha blender
; 3209 :                 SETREG32( &m_pDispRegs->DISPC_CONFIG, DISPC_CONFIG_LCDALPHABLENDERENABLE );

  07994	e59d302c	 ldr         r3, [sp, #0x2C]
  07998	e2833008	 add         r3, r3, #8
  0799c	e5933000	 ldr         r3, [r3]
  079a0	e2833044	 add         r3, r3, #0x44
  079a4	e5933000	 ldr         r3, [r3]
  079a8	e3832701	 orr         r2, r3, #1, 14
  079ac	e59d302c	 ldr         r3, [sp, #0x2C]
  079b0	e2833008	 add         r3, r3, #8
  079b4	e5933000	 ldr         r3, [r3]
  079b8	e2833044	 add         r3, r3, #0x44
  079bc	e5832000	 str         r2, [r3]

; 3210 :                 break;

  079c0	ea00000e	 b           |$LN20@EnableColo|
  079c4		 |$LN13@EnableColo|

; 3211 : 
; 3212 :             default:
; 3213 :                 ASSERT(0);

  079c4	ea000002	 b           |$LN27@EnableColo|
  079c8	e3a03001	 mov         r3, #1
  079cc	e58d3018	 str         r3, [sp, #0x18]
  079d0	ea000008	 b           |$LN28@EnableColo|
  079d4		 |$LN27@EnableColo|
  079d4	e3a03b03	 mov         r3, #3, 22
  079d8	e383308d	 orr         r3, r3, #0x8D
  079dc	e59f225c	 ldr         r2, [pc, #0x25C]
  079e0	e59f1254	 ldr         r1, [pc, #0x254]
  079e4	e59f024c	 ldr         r0, [pc, #0x24C]
  079e8	eb000000	 bl          NKDbgPrintfW
  079ec	e6000010	 __debugbreak_ce
  079f0	e3a03000	 mov         r3, #0
  079f4	e58d3018	 str         r3, [sp, #0x18]
  079f8		 |$LN28@EnableColo|

; 3214 :                 goto cleanUp;

  079f8	ea000086	 b           |$LN12@EnableColo|
  079fc	ea000085	 b           |$cleanUp$38945|
  07a00		 |$LN20@EnableColo|

; 3215 :         }
; 3216 : 
; 3217 :         //  Display overlay optimization
; 3218 :         EnableOverlayOptimization( FALSE );

  07a00	e3a01000	 mov         r1, #0
  07a04	e59d002c	 ldr         r0, [sp, #0x2C]
  07a08	eb000000	 bl          |?EnableOverlayOptimization@OMAPDisplayController@@QAAXH@Z|

; 3219 : 
; 3220 :         //  Set dest GO
; 3221 :         dwDestGo = DISPC_CONTROL_GOLCD;

  07a0c	e3a03020	 mov         r3, #0x20
  07a10	e58d3000	 str         r3, [sp]
  07a14		 |$LN22@EnableColo|

; 3222 :     }
; 3223 : 
; 3224 : 
; 3225 :     //  Enable color key for TV out
; 3226 :     if( eDestination == OMAP_DSS_DESTINATION_TVOUT )

  07a14	e59d3034	 ldr         r3, [sp, #0x34]
  07a18	e3530001	 cmp         r3, #1
  07a1c	1a000078	 bne         |$LN11@EnableColo|

; 3227 :     {
; 3228 :         //  Set color key for TV out
; 3229 :         switch( eColorKey )

  07a20	e59d3030	 ldr         r3, [sp, #0x30]
  07a24	e58d301c	 str         r3, [sp, #0x1C]
  07a28	e59d301c	 ldr         r3, [sp, #0x1C]
  07a2c	e3530003	 cmp         r3, #3
  07a30	8a000062	 bhi         |$LN2@EnableColo|
  07a34	e59d201c	 ldr         r2, [sp, #0x1C]
  07a38	e1a03102	 mov         r3, r2, lsl #2
  07a3c	e083300f	 add         r3, r3, pc
  07a40	e5933004	 ldr         r3, [r3, #4]
  07a44	e08ff003	 add         pc, pc, r3
  07a48		 |$LN38@EnableColo|
  07a48		 |$LN37@EnableColo|
  07a48		 |$LN39@EnableColo|
  07a48	0000000c	 DCD         0xc
  07a4c		 |$LN40@EnableColo|
  07a4c	0000000c	 DCD         0xc
  07a50		 |$LN41@EnableColo|
  07a50	000000c0	 DCD         0xc0
  07a54		 |$LN42@EnableColo|
  07a54	000000c0	 DCD         0xc0
  07a58		 |$LN8@EnableColo|

; 3230 :         {
; 3231 :             case OMAP_DSS_COLORKEY_TRANS_SOURCE:
; 3232 :             case OMAP_DSS_COLORKEY_TRANS_DEST:
; 3233 :                 //  Set transparent color for DIG
; 3234 :                 OUTREG32( &m_pDispRegs->DISPC_TRANS_COLOR1, dwColor );

  07a58	e59d302c	 ldr         r3, [sp, #0x2C]
  07a5c	e2833008	 add         r3, r3, #8
  07a60	e5933000	 ldr         r3, [r3]
  07a64	e2832058	 add         r2, r3, #0x58
  07a68	e59d3038	 ldr         r3, [sp, #0x38]
  07a6c	e5823000	 str         r3, [r2]

; 3235 :                 
; 3236 :                 //  Enable DIG transparent color blender
; 3237 :                 SETREG32( &m_pDispRegs->DISPC_CONFIG, DISPC_CONFIG_TCKDIGENABLE );

  07a70	e59d302c	 ldr         r3, [sp, #0x2C]
  07a74	e2833008	 add         r3, r3, #8
  07a78	e5933000	 ldr         r3, [r3]
  07a7c	e2833044	 add         r3, r3, #0x44
  07a80	e5933000	 ldr         r3, [r3]
  07a84	e3832a01	 orr         r2, r3, #1, 20
  07a88	e59d302c	 ldr         r3, [sp, #0x2C]
  07a8c	e2833008	 add         r3, r3, #8
  07a90	e5933000	 ldr         r3, [r3]
  07a94	e2833044	 add         r3, r3, #0x44
  07a98	e5832000	 str         r2, [r3]

; 3238 : 
; 3239 :                 //  Select source or destination transparency
; 3240 :                 if( eColorKey == OMAP_DSS_COLORKEY_TRANS_SOURCE )

  07a9c	e59d3030	 ldr         r3, [sp, #0x30]
  07aa0	e3530000	 cmp         r3, #0
  07aa4	1a00000b	 bne         |$LN7@EnableColo|

; 3241 :                     SETREG32( &m_pDispRegs->DISPC_CONFIG, DISPC_CONFIG_TCKDIGSELECTION );

  07aa8	e59d302c	 ldr         r3, [sp, #0x2C]
  07aac	e2833008	 add         r3, r3, #8
  07ab0	e5933000	 ldr         r3, [r3]
  07ab4	e2833044	 add         r3, r3, #0x44
  07ab8	e5933000	 ldr         r3, [r3]
  07abc	e3832a02	 orr         r2, r3, #2, 20
  07ac0	e59d302c	 ldr         r3, [sp, #0x2C]
  07ac4	e2833008	 add         r3, r3, #8
  07ac8	e5933000	 ldr         r3, [r3]
  07acc	e2833044	 add         r3, r3, #0x44
  07ad0	e5832000	 str         r2, [r3]

; 3242 :                 else

  07ad4	ea00000b	 b           |$LN6@EnableColo|
  07ad8		 |$LN7@EnableColo|

; 3243 :                     CLRREG32( &m_pDispRegs->DISPC_CONFIG, DISPC_CONFIG_TCKDIGSELECTION );

  07ad8	e59d302c	 ldr         r3, [sp, #0x2C]
  07adc	e2833008	 add         r3, r3, #8
  07ae0	e5933000	 ldr         r3, [r3]
  07ae4	e2833044	 add         r3, r3, #0x44
  07ae8	e5932000	 ldr         r2, [r3]
  07aec	e3e03a02	 mvn         r3, #2, 20
  07af0	e0022003	 and         r2, r2, r3
  07af4	e59d302c	 ldr         r3, [sp, #0x2C]
  07af8	e2833008	 add         r3, r3, #8
  07afc	e5933000	 ldr         r3, [r3]
  07b00	e2833044	 add         r3, r3, #0x44
  07b04	e5832000	 str         r2, [r3]
  07b08		 |$LN6@EnableColo|

; 3244 :                 
; 3245 :                 break;

  07b08	ea00003b	 b           |$LN9@EnableColo|
  07b0c		 |$LN5@EnableColo|

; 3246 : 
; 3247 :                 
; 3248 :             case OMAP_DSS_COLORKEY_GLOBAL_ALPHA_GFX:
; 3249 :             case OMAP_DSS_COLORKEY_GLOBAL_ALPHA_VIDEO2:
; 3250 :                 //  Get current color (both LCD and VID2 are in this single register)
; 3251 :                 dwCurrentColor = INREG32( &m_pDispRegs->DISPC_GLOBAL_ALPHA );

  07b0c	e59d302c	 ldr         r3, [sp, #0x2C]
  07b10	e2833008	 add         r3, r3, #8
  07b14	e5933000	 ldr         r3, [r3]
  07b18	e2833074	 add         r3, r3, #0x74
  07b1c	e5933000	 ldr         r3, [r3]
  07b20	e58d3008	 str         r3, [sp, #8]

; 3252 :                 
; 3253 :                 //  Set global alpha color
; 3254 :                 if( eColorKey == OMAP_DSS_COLORKEY_GLOBAL_ALPHA_GFX )

  07b24	e59d3030	 ldr         r3, [sp, #0x30]
  07b28	e3530002	 cmp         r3, #2
  07b2c	1a000008	 bne         |$LN4@EnableColo|

; 3255 :                     dwColor = (dwCurrentColor & 0xFFFF0000) | DISPC_GLOBAL_ALPHA_GFX(dwColor);

  07b30	e59d2008	 ldr         r2, [sp, #8]
  07b34	e3e03cff	 mvn         r3, #0xFF, 24
  07b38	e22330ff	 eor         r3, r3, #0xFF
  07b3c	e0022003	 and         r2, r2, r3
  07b40	e59d3038	 ldr         r3, [sp, #0x38]
  07b44	e20330ff	 and         r3, r3, #0xFF
  07b48	e1823003	 orr         r3, r2, r3
  07b4c	e58d3038	 str         r3, [sp, #0x38]

; 3256 :                 else

  07b50	ea000008	 b           |$LN3@EnableColo|
  07b54		 |$LN4@EnableColo|

; 3257 :                     dwColor = (dwCurrentColor & 0x0000FFFF) | DISPC_GLOBAL_ALPHA_VID2(dwColor);

  07b54	e59d2008	 ldr         r2, [sp, #8]
  07b58	e3a03cff	 mov         r3, #0xFF, 24
  07b5c	e38330ff	 orr         r3, r3, #0xFF
  07b60	e0022003	 and         r2, r2, r3
  07b64	e59d3038	 ldr         r3, [sp, #0x38]
  07b68	e20330ff	 and         r3, r3, #0xFF
  07b6c	e1a03803	 mov         r3, r3, lsl #16
  07b70	e1823003	 orr         r3, r2, r3
  07b74	e58d3038	 str         r3, [sp, #0x38]
  07b78		 |$LN3@EnableColo|

; 3258 : 
; 3259 :                 OUTREG32( &m_pDispRegs->DISPC_GLOBAL_ALPHA, dwColor );

  07b78	e59d302c	 ldr         r3, [sp, #0x2C]
  07b7c	e2833008	 add         r3, r3, #8
  07b80	e5933000	 ldr         r3, [r3]
  07b84	e2832074	 add         r2, r3, #0x74
  07b88	e59d3038	 ldr         r3, [sp, #0x38]
  07b8c	e5823000	 str         r3, [r2]

; 3260 :                 
; 3261 :                 //  Enable DIG alpha blender
; 3262 :                 SETREG32( &m_pDispRegs->DISPC_CONFIG, DISPC_CONFIG_DIGALPHABLENDERENABLE );

  07b90	e59d302c	 ldr         r3, [sp, #0x2C]
  07b94	e2833008	 add         r3, r3, #8
  07b98	e5933000	 ldr         r3, [r3]
  07b9c	e2833044	 add         r3, r3, #0x44
  07ba0	e5933000	 ldr         r3, [r3]
  07ba4	e3832702	 orr         r2, r3, #2, 14
  07ba8	e59d302c	 ldr         r3, [sp, #0x2C]
  07bac	e2833008	 add         r3, r3, #8
  07bb0	e5933000	 ldr         r3, [r3]
  07bb4	e2833044	 add         r3, r3, #0x44
  07bb8	e5832000	 str         r2, [r3]

; 3263 :                 break;

  07bbc	ea00000e	 b           |$LN9@EnableColo|
  07bc0		 |$LN2@EnableColo|

; 3264 : 
; 3265 :             default:
; 3266 :                 ASSERT(0);

  07bc0	ea000002	 b           |$LN29@EnableColo|
  07bc4	e3a03001	 mov         r3, #1
  07bc8	e58d3020	 str         r3, [sp, #0x20]
  07bcc	ea000008	 b           |$LN30@EnableColo|
  07bd0		 |$LN29@EnableColo|
  07bd0	e3a03b03	 mov         r3, #3, 22
  07bd4	e38330c2	 orr         r3, r3, #0xC2
  07bd8	e59f2060	 ldr         r2, [pc, #0x60]
  07bdc	e59f1058	 ldr         r1, [pc, #0x58]
  07be0	e59f0050	 ldr         r0, [pc, #0x50]
  07be4	eb000000	 bl          NKDbgPrintfW
  07be8	e6000010	 __debugbreak_ce
  07bec	e3a03000	 mov         r3, #0
  07bf0	e58d3020	 str         r3, [sp, #0x20]
  07bf4		 |$LN30@EnableColo|

; 3267 :                 goto cleanUp;

  07bf4	ea000007	 b           |$LN1@EnableColo|
  07bf8	ea000006	 b           |$cleanUp$38945|
  07bfc		 |$LN9@EnableColo|

; 3268 :         }
; 3269 : 
; 3270 :         //  Set dest GO
; 3271 :         dwDestGo = DISPC_CONTROL_GODIGITAL;

  07bfc	e3a03040	 mov         r3, #0x40
  07c00	e58d3000	 str         r3, [sp]
  07c04		 |$LN11@EnableColo|

; 3272 :     }
; 3273 : 
; 3274 :     
; 3275 :     //  Flush the shadow registers
; 3276 :     FlushRegs( dwDestGo );

  07c04	e59d1000	 ldr         r1, [sp]
  07c08	e59d002c	 ldr         r0, [sp, #0x2C]
  07c0c	eb000000	 bl          |?FlushRegs@OMAPDisplayController@@IAAHK@Z|

; 3277 : 
; 3278 :     
; 3279 :     //  Result
; 3280 :     bResult = TRUE;         

  07c10	e3a03001	 mov         r3, #1
  07c14	e58d3004	 str         r3, [sp, #4]
  07c18		 |$LN1@EnableColo|
  07c18		 |$LN12@EnableColo|
  07c18		 |$LN23@EnableColo|
  07c18		 |$cleanUp$38945|

; 3281 : 
; 3282 : cleanUp:    
; 3283 :     //  Release regs
; 3284 :     ReleaseRegs();

  07c18	e59d002c	 ldr         r0, [sp, #0x2C]
  07c1c	eb000000	 bl          |?ReleaseRegs@OMAPDisplayController@@IAAHXZ|

; 3285 :     
; 3286 :     //  Return result
; 3287 :     return bResult;

  07c20	e59d3004	 ldr         r3, [sp, #4]
  07c24	e58d300c	 str         r3, [sp, #0xC]

; 3288 : }

  07c28	e59d000c	 ldr         r0, [sp, #0xC]
  07c2c	e28dd024	 add         sp, sp, #0x24
  07c30	e89d6000	 ldmia       sp, {sp, lr}
  07c34	e12fff1e	 bx          lr
  07c38		 |$LN46@EnableColo|
  07c38		 |$LN47@EnableColo|
  07c38	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  07c3c		 |$LN48@EnableColo|
  07c3c	00000000	 DCD         |??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@|
  07c40		 |$LN49@EnableColo|
  07c40	00000000	 DCD         |??_C@_1KC@HIABDGPO@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  07c44		 |$M40754|

			 ENDP  ; |?EnableColorKey@OMAPDisplayController@@QAAHW4OMAP_DSS_COLORKEY@@W4OMAP_DSS_DESTINATION@@K@Z|, OMAPDisplayController::EnableColorKey

	EXPORT	|?DisableColorKey@OMAPDisplayController@@QAAHW4OMAP_DSS_COLORKEY@@W4OMAP_DSS_DESTINATION@@@Z| ; OMAPDisplayController::DisableColorKey

  000c0			 AREA	 |.pdata|, PDATA
|$T40782| DCD	|$LN37@DisableCol|
	DCD	0x40009804
; Function compile flags: /Odtp

  07c44			 AREA	 |.text|, CODE, ARM

  07c44		 |?DisableColorKey@OMAPDisplayController@@QAAHW4OMAP_DSS_COLORKEY@@W4OMAP_DSS_DESTINATION@@@Z| PROC ; OMAPDisplayController::DisableColorKey

; 3296 : {

  07c44		 |$LN37@DisableCol|
  07c44	e1a0c00d	 mov         r12, sp
  07c48	e92d0007	 stmdb       sp!, {r0 - r2}
  07c4c	e92d5000	 stmdb       sp!, {r12, lr}
  07c50	e24dd020	 sub         sp, sp, #0x20
  07c54		 |$M40779|

; 3297 :     BOOL    bResult = FALSE;

  07c54	e3a03000	 mov         r3, #0
  07c58	e58d3004	 str         r3, [sp, #4]

; 3298 :     DWORD   dwDestGo = 0;

  07c5c	e3a03000	 mov         r3, #0
  07c60	e58d3000	 str         r3, [sp]

; 3299 : 
; 3300 : 
; 3301 :     //  Access the regs
; 3302 :     if( AccessRegs() == FALSE )

  07c64	e59d0028	 ldr         r0, [sp, #0x28]
  07c68	eb000000	 bl          |?AccessRegs@OMAPDisplayController@@IAAHXZ|
  07c6c	e58d000c	 str         r0, [sp, #0xC]
  07c70	e59d300c	 ldr         r3, [sp, #0xC]
  07c74	e3530000	 cmp         r3, #0
  07c78	1a000001	 bne         |$LN16@DisableCol|
  07c7c	ea00007d	 b           |$LN15@DisableCol|

; 3303 :         goto cleanUp;

  07c80	ea00007c	 b           |$cleanUp$39019|
  07c84		 |$LN16@DisableCol|

; 3304 : 
; 3305 :     
; 3306 :     //  Enable color key for the LCD
; 3307 :     if( eDestination == OMAP_DSS_DESTINATION_LCD )

  07c84	e59d3030	 ldr         r3, [sp, #0x30]
  07c88	e3530000	 cmp         r3, #0
  07c8c	1a000038	 bne         |$LN14@DisableCol|

; 3308 :     {
; 3309 :         //  Set color key for LCD
; 3310 :         switch( eColorKey )

  07c90	e59d302c	 ldr         r3, [sp, #0x2C]
  07c94	e58d3010	 str         r3, [sp, #0x10]
  07c98	e59d3010	 ldr         r3, [sp, #0x10]
  07c9c	e3530003	 cmp         r3, #3
  07ca0	8a000022	 bhi         |$LN9@DisableCol|
  07ca4	e59d2010	 ldr         r2, [sp, #0x10]
  07ca8	e1a03102	 mov         r3, r2, lsl #2
  07cac	e083300f	 add         r3, r3, pc
  07cb0	e5933004	 ldr         r3, [r3, #4]
  07cb4	e08ff003	 add         pc, pc, r3
  07cb8		 |$LN24@DisableCol|
  07cb8		 |$LN23@DisableCol|
  07cb8		 |$LN25@DisableCol|
  07cb8	0000000c	 DCD         0xc
  07cbc		 |$LN26@DisableCol|
  07cbc	0000000c	 DCD         0xc
  07cc0		 |$LN27@DisableCol|
  07cc0	00000040	 DCD         0x40
  07cc4		 |$LN28@DisableCol|
  07cc4	00000040	 DCD         0x40
  07cc8		 |$LN11@DisableCol|

; 3311 :         {
; 3312 :             case OMAP_DSS_COLORKEY_TRANS_SOURCE:
; 3313 :             case OMAP_DSS_COLORKEY_TRANS_DEST:
; 3314 :                 //  Disable LCD transparent color blender
; 3315 :                 CLRREG32( &m_pDispRegs->DISPC_CONFIG, DISPC_CONFIG_TCKLCDENABLE );

  07cc8	e59d3028	 ldr         r3, [sp, #0x28]
  07ccc	e2833008	 add         r3, r3, #8
  07cd0	e5933000	 ldr         r3, [r3]
  07cd4	e2833044	 add         r3, r3, #0x44
  07cd8	e5932000	 ldr         r2, [r3]
  07cdc	e3e03b01	 mvn         r3, #1, 22
  07ce0	e0022003	 and         r2, r2, r3
  07ce4	e59d3028	 ldr         r3, [sp, #0x28]
  07ce8	e2833008	 add         r3, r3, #8
  07cec	e5933000	 ldr         r3, [r3]
  07cf0	e2833044	 add         r3, r3, #0x44
  07cf4	e5832000	 str         r2, [r3]

; 3316 :                 break;

  07cf8	ea00001b	 b           |$LN12@DisableCol|
  07cfc		 |$LN10@DisableCol|

; 3317 : 
; 3318 :                 
; 3319 :             case OMAP_DSS_COLORKEY_GLOBAL_ALPHA_GFX:
; 3320 :             case OMAP_DSS_COLORKEY_GLOBAL_ALPHA_VIDEO2:
; 3321 :                 //  Disable LCD alpha blender
; 3322 :                 CLRREG32( &m_pDispRegs->DISPC_CONFIG, DISPC_CONFIG_LCDALPHABLENDERENABLE );

  07cfc	e59d3028	 ldr         r3, [sp, #0x28]
  07d00	e2833008	 add         r3, r3, #8
  07d04	e5933000	 ldr         r3, [r3]
  07d08	e2833044	 add         r3, r3, #0x44
  07d0c	e5932000	 ldr         r2, [r3]
  07d10	e3e03701	 mvn         r3, #1, 14
  07d14	e0022003	 and         r2, r2, r3
  07d18	e59d3028	 ldr         r3, [sp, #0x28]
  07d1c	e2833008	 add         r3, r3, #8
  07d20	e5933000	 ldr         r3, [r3]
  07d24	e2833044	 add         r3, r3, #0x44
  07d28	e5832000	 str         r2, [r3]

; 3323 :                 break;

  07d2c	ea00000e	 b           |$LN12@DisableCol|
  07d30		 |$LN9@DisableCol|

; 3324 : 
; 3325 :             default:
; 3326 :                 ASSERT(0);

  07d30	ea000002	 b           |$LN19@DisableCol|
  07d34	e3a03001	 mov         r3, #1
  07d38	e58d3014	 str         r3, [sp, #0x14]
  07d3c	ea000008	 b           |$LN20@DisableCol|
  07d40		 |$LN19@DisableCol|
  07d40	e3a03b03	 mov         r3, #3, 22
  07d44	e38330fe	 orr         r3, r3, #0xFE
  07d48	e59f2150	 ldr         r2, [pc, #0x150]
  07d4c	e59f1148	 ldr         r1, [pc, #0x148]
  07d50	e59f0140	 ldr         r0, [pc, #0x140]
  07d54	eb000000	 bl          NKDbgPrintfW
  07d58	e6000010	 __debugbreak_ce
  07d5c	e3a03000	 mov         r3, #0
  07d60	e58d3014	 str         r3, [sp, #0x14]
  07d64		 |$LN20@DisableCol|

; 3327 :                 goto cleanUp;

  07d64	ea000043	 b           |$LN8@DisableCol|
  07d68	ea000042	 b           |$cleanUp$39019|
  07d6c		 |$LN12@DisableCol|

; 3328 :         }
; 3329 :         
; 3330 :         //  Set dest GO
; 3331 :         dwDestGo = DISPC_CONTROL_GOLCD;

  07d6c	e3a03020	 mov         r3, #0x20
  07d70	e58d3000	 str         r3, [sp]
  07d74		 |$LN14@DisableCol|

; 3332 :     }
; 3333 : 
; 3334 : 
; 3335 :     //  Enable color key for TV out
; 3336 :     if( eDestination == OMAP_DSS_DESTINATION_TVOUT )

  07d74	e59d3030	 ldr         r3, [sp, #0x30]
  07d78	e3530001	 cmp         r3, #1
  07d7c	1a000038	 bne         |$LN7@DisableCol|

; 3337 :     {
; 3338 :         //  Set color key for TV out
; 3339 :         switch( eColorKey )

  07d80	e59d302c	 ldr         r3, [sp, #0x2C]
  07d84	e58d3018	 str         r3, [sp, #0x18]
  07d88	e59d3018	 ldr         r3, [sp, #0x18]
  07d8c	e3530003	 cmp         r3, #3
  07d90	8a000022	 bhi         |$LN2@DisableCol|
  07d94	e59d2018	 ldr         r2, [sp, #0x18]
  07d98	e1a03102	 mov         r3, r2, lsl #2
  07d9c	e083300f	 add         r3, r3, pc
  07da0	e5933004	 ldr         r3, [r3, #4]
  07da4	e08ff003	 add         pc, pc, r3
  07da8		 |$LN30@DisableCol|
  07da8		 |$LN29@DisableCol|
  07da8		 |$LN31@DisableCol|
  07da8	0000000c	 DCD         0xc
  07dac		 |$LN32@DisableCol|
  07dac	0000000c	 DCD         0xc
  07db0		 |$LN33@DisableCol|
  07db0	00000040	 DCD         0x40
  07db4		 |$LN34@DisableCol|
  07db4	00000040	 DCD         0x40
  07db8		 |$LN4@DisableCol|

; 3340 :         {
; 3341 :             case OMAP_DSS_COLORKEY_TRANS_SOURCE:
; 3342 :             case OMAP_DSS_COLORKEY_TRANS_DEST:
; 3343 :                 //  Disable DIG transparent color blender
; 3344 :                 CLRREG32( &m_pDispRegs->DISPC_CONFIG, DISPC_CONFIG_TCKDIGENABLE );

  07db8	e59d3028	 ldr         r3, [sp, #0x28]
  07dbc	e2833008	 add         r3, r3, #8
  07dc0	e5933000	 ldr         r3, [r3]
  07dc4	e2833044	 add         r3, r3, #0x44
  07dc8	e5932000	 ldr         r2, [r3]
  07dcc	e3e03a01	 mvn         r3, #1, 20
  07dd0	e0022003	 and         r2, r2, r3
  07dd4	e59d3028	 ldr         r3, [sp, #0x28]
  07dd8	e2833008	 add         r3, r3, #8
  07ddc	e5933000	 ldr         r3, [r3]
  07de0	e2833044	 add         r3, r3, #0x44
  07de4	e5832000	 str         r2, [r3]

; 3345 :                 break;

  07de8	ea00001b	 b           |$LN5@DisableCol|
  07dec		 |$LN3@DisableCol|

; 3346 : 
; 3347 :                 
; 3348 :             case OMAP_DSS_COLORKEY_GLOBAL_ALPHA_GFX:
; 3349 :             case OMAP_DSS_COLORKEY_GLOBAL_ALPHA_VIDEO2:
; 3350 :                 //  Disable DIG alpha blender
; 3351 :                 CLRREG32( &m_pDispRegs->DISPC_CONFIG, DISPC_CONFIG_DIGALPHABLENDERENABLE );

  07dec	e59d3028	 ldr         r3, [sp, #0x28]
  07df0	e2833008	 add         r3, r3, #8
  07df4	e5933000	 ldr         r3, [r3]
  07df8	e2833044	 add         r3, r3, #0x44
  07dfc	e5932000	 ldr         r2, [r3]
  07e00	e3e03702	 mvn         r3, #2, 14
  07e04	e0022003	 and         r2, r2, r3
  07e08	e59d3028	 ldr         r3, [sp, #0x28]
  07e0c	e2833008	 add         r3, r3, #8
  07e10	e5933000	 ldr         r3, [r3]
  07e14	e2833044	 add         r3, r3, #0x44
  07e18	e5832000	 str         r2, [r3]

; 3352 :                 break;

  07e1c	ea00000e	 b           |$LN5@DisableCol|
  07e20		 |$LN2@DisableCol|

; 3353 : 
; 3354 :             default:
; 3355 :                 ASSERT(0);

  07e20	ea000002	 b           |$LN21@DisableCol|
  07e24	e3a03001	 mov         r3, #1
  07e28	e58d301c	 str         r3, [sp, #0x1C]
  07e2c	ea000008	 b           |$LN22@DisableCol|
  07e30		 |$LN21@DisableCol|
  07e30	e3a03c0d	 mov         r3, #0xD, 24
  07e34	e383301b	 orr         r3, r3, #0x1B
  07e38	e59f2060	 ldr         r2, [pc, #0x60]
  07e3c	e59f1058	 ldr         r1, [pc, #0x58]
  07e40	e59f0050	 ldr         r0, [pc, #0x50]
  07e44	eb000000	 bl          NKDbgPrintfW
  07e48	e6000010	 __debugbreak_ce
  07e4c	e3a03000	 mov         r3, #0
  07e50	e58d301c	 str         r3, [sp, #0x1C]
  07e54		 |$LN22@DisableCol|

; 3356 :                 goto cleanUp;

  07e54	ea000007	 b           |$LN1@DisableCol|
  07e58	ea000006	 b           |$cleanUp$39019|
  07e5c		 |$LN5@DisableCol|

; 3357 :         }
; 3358 : 
; 3359 :         //  Set dest GO
; 3360 :         dwDestGo = DISPC_CONTROL_GODIGITAL;

  07e5c	e3a03040	 mov         r3, #0x40
  07e60	e58d3000	 str         r3, [sp]
  07e64		 |$LN7@DisableCol|

; 3361 :     }
; 3362 : 
; 3363 :     
; 3364 :     //  Flush the shadow registers
; 3365 :     FlushRegs( dwDestGo );

  07e64	e59d1000	 ldr         r1, [sp]
  07e68	e59d0028	 ldr         r0, [sp, #0x28]
  07e6c	eb000000	 bl          |?FlushRegs@OMAPDisplayController@@IAAHK@Z|

; 3366 : 
; 3367 :     
; 3368 :     //  Result
; 3369 :     bResult = TRUE;         

  07e70	e3a03001	 mov         r3, #1
  07e74	e58d3004	 str         r3, [sp, #4]
  07e78		 |$LN1@DisableCol|
  07e78		 |$LN8@DisableCol|
  07e78		 |$LN15@DisableCol|
  07e78		 |$cleanUp$39019|

; 3370 : 
; 3371 : cleanUp:    
; 3372 :     //  Release regs
; 3373 :     ReleaseRegs();

  07e78	e59d0028	 ldr         r0, [sp, #0x28]
  07e7c	eb000000	 bl          |?ReleaseRegs@OMAPDisplayController@@IAAHXZ|

; 3374 :     
; 3375 :     //  Return result
; 3376 :     return bResult;

  07e80	e59d3004	 ldr         r3, [sp, #4]
  07e84	e58d3008	 str         r3, [sp, #8]

; 3377 : }

  07e88	e59d0008	 ldr         r0, [sp, #8]
  07e8c	e28dd020	 add         sp, sp, #0x20
  07e90	e89d6000	 ldmia       sp, {sp, lr}
  07e94	e12fff1e	 bx          lr
  07e98		 |$LN38@DisableCol|
  07e98		 |$LN39@DisableCol|
  07e98	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  07e9c		 |$LN40@DisableCol|
  07e9c	00000000	 DCD         |??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@|
  07ea0		 |$LN41@DisableCol|
  07ea0	00000000	 DCD         |??_C@_1KC@HIABDGPO@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  07ea4		 |$M40780|

			 ENDP  ; |?DisableColorKey@OMAPDisplayController@@QAAHW4OMAP_DSS_COLORKEY@@W4OMAP_DSS_DESTINATION@@@Z|, OMAPDisplayController::DisableColorKey

	IMPORT	|?g_dwGammaTable@@3PAY0BAA@KA|		; g_dwGammaTable

  000c8			 AREA	 |.pdata|, PDATA
|$T40794| DCD	|$LN7@SetContras|
	DCD	0x40002504
; Function compile flags: /Odtp

  07ea4			 AREA	 |.text|, CODE, ARM

  07ea4		 |?SetContrastLevel@OMAPDisplayController@@QAAHK@Z| PROC ; OMAPDisplayController::SetContrastLevel

; 3384 : {

  07ea4		 |$LN7@SetContras|
  07ea4	e1a0c00d	 mov         r12, sp
  07ea8	e92d0003	 stmdb       sp!, {r0, r1}
  07eac	e92d5000	 stmdb       sp!, {r12, lr}
  07eb0	e24dd008	 sub         sp, sp, #8
  07eb4		 |$M40791|

; 3385 :     //  Set contrast level by copying in new gamma correction curve
; 3386 :     m_dwContrastLevel = (dwContrastLevel < NUM_CONTRAST_LEVELS) ? dwContrastLevel : NUM_CONTRAST_LEVELS - 1;

  07eb4	e59d3014	 ldr         r3, [sp, #0x14]
  07eb8	e3530007	 cmp         r3, #7
  07ebc	2a000002	 bcs         |$LN3@SetContras|
  07ec0	e59d3014	 ldr         r3, [sp, #0x14]
  07ec4	e58d3004	 str         r3, [sp, #4]
  07ec8	ea000001	 b           |$LN4@SetContras|
  07ecc		 |$LN3@SetContras|
  07ecc	e3a03006	 mov         r3, #6
  07ed0	e58d3004	 str         r3, [sp, #4]
  07ed4		 |$LN4@SetContras|
  07ed4	e59d3010	 ldr         r3, [sp, #0x10]
  07ed8	e2832e4d	 add         r2, r3, #0x4D, 28
  07edc	e59d3004	 ldr         r3, [sp, #4]
  07ee0	e5823000	 str         r3, [r2]

; 3387 : 
; 3388 :     //  Copy the selected table to the gamma physical memory location
; 3389 :     memcpy(m_pGammaBufVirt, &(g_dwGammaTable[(NUM_CONTRAST_LEVELS - 1) - m_dwContrastLevel][0]), NUM_GAMMA_VALS*sizeof(DWORD));

  07ee4	e3a02b01	 mov         r2, #1, 22
  07ee8	e59d3010	 ldr         r3, [sp, #0x10]
  07eec	e2833e4d	 add         r3, r3, #0x4D, 28
  07ef0	e5933000	 ldr         r3, [r3]
  07ef4	e2630006	 rsb         r0, r3, #6
  07ef8	e3a03b01	 mov         r3, #1, 22
  07efc	e0010390	 mul         r1, r0, r3
  07f00	e59f302c	 ldr         r3, [pc, #0x2C]
  07f04	e0831001	 add         r1, r3, r1
  07f08	e59d3010	 ldr         r3, [sp, #0x10]
  07f0c	e2833b01	 add         r3, r3, #1, 22
  07f10	e28330d4	 add         r3, r3, #0xD4
  07f14	e5930000	 ldr         r0, [r3]
  07f18	eb000000	 bl          memcpy

; 3390 :     return TRUE;

  07f1c	e3a03001	 mov         r3, #1
  07f20	e58d3000	 str         r3, [sp]

; 3391 : }

  07f24	e59d0000	 ldr         r0, [sp]
  07f28	e28dd008	 add         sp, sp, #8
  07f2c	e89d6000	 ldmia       sp, {sp, lr}
  07f30	e12fff1e	 bx          lr
  07f34		 |$LN8@SetContras|
  07f34		 |$LN9@SetContras|
  07f34	00000000	 DCD         |?g_dwGammaTable@@3PAY0BAA@KA|
  07f38		 |$M40792|

			 ENDP  ; |?SetContrastLevel@OMAPDisplayController@@QAAHK@Z|, OMAPDisplayController::SetContrastLevel

	EXPORT	|?SaveRegisters@OMAPDisplayController@@QAAHW4OMAP_DSS_DESTINATION@@@Z| ; OMAPDisplayController::SaveRegisters

  000d0			 AREA	 |.pdata|, PDATA
|$T40802| DCD	|$LN21@SaveRegist|
	DCD	0x4001e404
; Function compile flags: /Odtp

  07f38			 AREA	 |.text|, CODE, ARM

  07f38		 |?SaveRegisters@OMAPDisplayController@@QAAHW4OMAP_DSS_DESTINATION@@@Z| PROC ; OMAPDisplayController::SaveRegisters

; 3399 : {

  07f38		 |$LN21@SaveRegist|
  07f38	e1a0c00d	 mov         r12, sp
  07f3c	e92d0003	 stmdb       sp!, {r0, r1}
  07f40	e92d5000	 stmdb       sp!, {r12, lr}
  07f44	e24dd014	 sub         sp, sp, #0x14
  07f48		 |$M40799|

; 3400 :     BOOL    bResult = FALSE;

  07f48	e3a03000	 mov         r3, #0
  07f4c	e58d3008	 str         r3, [sp, #8]

; 3401 :     DWORD   i;
; 3402 :     OMAP_DISPC_REGS   *pDisplaySaveRestore = 0;

  07f50	e3a03000	 mov         r3, #0
  07f54	e58d3000	 str         r3, [sp]

; 3403 :     
; 3404 :     //  Access the regs
; 3405 :     if( AccessRegs() == FALSE )

  07f58	e59d001c	 ldr         r0, [sp, #0x1C]
  07f5c	eb000000	 bl          |?AccessRegs@OMAPDisplayController@@IAAHXZ|
  07f60	e58d0010	 str         r0, [sp, #0x10]
  07f64	e59d3010	 ldr         r3, [sp, #0x10]
  07f68	e3530000	 cmp         r3, #0
  07f6c	1a000001	 bne         |$LN16@SaveRegist|
  07f70	ea0001cb	 b           |$LN15@SaveRegist|

; 3406 :         goto cleanUp;

  07f74	ea0001ca	 b           |$cleanUp$39068|
  07f78		 |$LN16@SaveRegist|

; 3407 : 
; 3408 :     // Choose the last active LCD context ( internal LCD/external LCD)
; 3409 :     if (!m_bHDMIEnable)

  07f78	e59d301c	 ldr         r3, [sp, #0x1C]
  07f7c	e2833b01	 add         r3, r3, #1, 22
  07f80	e28330c8	 add         r3, r3, #0xC8
  07f84	e5933000	 ldr         r3, [r3]
  07f88	e3530000	 cmp         r3, #0
  07f8c	1a000003	 bne         |$LN14@SaveRegist|

; 3410 :         pDisplaySaveRestore = &g_rgDisplaySaveRestore;

  07f90	e59d301c	 ldr         r3, [sp, #0x1C]
  07f94	e2833018	 add         r3, r3, #0x18
  07f98	e58d3000	 str         r3, [sp]

; 3411 :     else

  07f9c	ea000002	 b           |$LN13@SaveRegist|
  07fa0		 |$LN14@SaveRegist|

; 3412 :         pDisplaySaveRestore = &g_rgDisplaySaveRestore_eLcd;

  07fa0	e59d301c	 ldr         r3, [sp, #0x1C]
  07fa4	e2833e25	 add         r3, r3, #0x25, 28
  07fa8	e58d3000	 str         r3, [sp]
  07fac		 |$LN13@SaveRegist|

; 3413 : 
; 3414 :     if (pDisplaySaveRestore == NULL)

  07fac	e59d3000	 ldr         r3, [sp]
  07fb0	e3530000	 cmp         r3, #0
  07fb4	1a000001	 bne         |$LN12@SaveRegist|
  07fb8	ea0001b9	 b           |$LN11@SaveRegist|

; 3415 :         goto cleanUp;

  07fbc	ea0001b8	 b           |$cleanUp$39068|
  07fc0		 |$LN12@SaveRegist|

; 3416 : 
; 3417 :     // Save the DISPC common register contents 
; 3418 :     pDisplaySaveRestore->DISPC_CONFIG = INREG32 ( &m_pDispRegs->DISPC_CONFIG );

  07fc0	e59d301c	 ldr         r3, [sp, #0x1C]
  07fc4	e2833008	 add         r3, r3, #8
  07fc8	e5933000	 ldr         r3, [r3]
  07fcc	e2833044	 add         r3, r3, #0x44
  07fd0	e5932000	 ldr         r2, [r3]
  07fd4	e59d3000	 ldr         r3, [sp]
  07fd8	e2833044	 add         r3, r3, #0x44
  07fdc	e5832000	 str         r2, [r3]

; 3419 :     pDisplaySaveRestore->DISPC_GLOBAL_ALPHA = INREG32 (&m_pDispRegs->DISPC_GLOBAL_ALPHA );

  07fe0	e59d301c	 ldr         r3, [sp, #0x1C]
  07fe4	e2833008	 add         r3, r3, #8
  07fe8	e5933000	 ldr         r3, [r3]
  07fec	e2833074	 add         r3, r3, #0x74
  07ff0	e5932000	 ldr         r2, [r3]
  07ff4	e59d3000	 ldr         r3, [sp]
  07ff8	e2833074	 add         r3, r3, #0x74
  07ffc	e5832000	 str         r2, [r3]

; 3420 :     pDisplaySaveRestore->DISPC_IRQENABLE = INREG32( &m_pDispRegs->DISPC_IRQENABLE );

  08000	e59d301c	 ldr         r3, [sp, #0x1C]
  08004	e2833008	 add         r3, r3, #8
  08008	e5933000	 ldr         r3, [r3]
  0800c	e283301c	 add         r3, r3, #0x1C
  08010	e5932000	 ldr         r2, [r3]
  08014	e59d3000	 ldr         r3, [sp]
  08018	e283301c	 add         r3, r3, #0x1C
  0801c	e5832000	 str         r2, [r3]

; 3421 :     pDisplaySaveRestore->DISPC_TRANS_COLOR0 = INREG32( &m_pDispRegs->DISPC_TRANS_COLOR0 );

  08020	e59d301c	 ldr         r3, [sp, #0x1C]
  08024	e2833008	 add         r3, r3, #8
  08028	e5933000	 ldr         r3, [r3]
  0802c	e2833054	 add         r3, r3, #0x54
  08030	e5932000	 ldr         r2, [r3]
  08034	e59d3000	 ldr         r3, [sp]
  08038	e2833054	 add         r3, r3, #0x54
  0803c	e5832000	 str         r2, [r3]

; 3422 :     pDisplaySaveRestore->DISPC_TRANS_COLOR1 = INREG32( &m_pDispRegs->DISPC_TRANS_COLOR1 );

  08040	e59d301c	 ldr         r3, [sp, #0x1C]
  08044	e2833008	 add         r3, r3, #8
  08048	e5933000	 ldr         r3, [r3]
  0804c	e2833058	 add         r3, r3, #0x58
  08050	e5932000	 ldr         r2, [r3]
  08054	e59d3000	 ldr         r3, [sp]
  08058	e2833058	 add         r3, r3, #0x58
  0805c	e5832000	 str         r2, [r3]

; 3423 : 
; 3424 :     //  Save the DSS and LCD registers
; 3425 :     if( eDestination == OMAP_DSS_DESTINATION_LCD )

  08060	e59d3020	 ldr         r3, [sp, #0x20]
  08064	e3530000	 cmp         r3, #0
  08068	1a00018b	 bne         |$LN10@SaveRegist|

; 3426 :     {
; 3427 :         //  Save off GFX plane registers if enabled
; 3428 :         if( g_rgPipelineMapping[OMAP_DSS_PIPELINE_GFX].bEnabled )

  0806c	e59f3650	 ldr         r3, [pc, #0x650]
  08070	e5933000	 ldr         r3, [r3]
  08074	e3530000	 cmp         r3, #0
  08078	0a000047	 beq         |$LN9@SaveRegist|

; 3429 :         {
; 3430 :             pDisplaySaveRestore->DISPC_GFX_BA0 = INREG32( &m_pDispRegs->DISPC_GFX_BA0 );

  0807c	e59d301c	 ldr         r3, [sp, #0x1C]
  08080	e2833008	 add         r3, r3, #8
  08084	e5933000	 ldr         r3, [r3]
  08088	e2833080	 add         r3, r3, #0x80
  0808c	e5932000	 ldr         r2, [r3]
  08090	e59d3000	 ldr         r3, [sp]
  08094	e2833080	 add         r3, r3, #0x80
  08098	e5832000	 str         r2, [r3]

; 3431 :             pDisplaySaveRestore->DISPC_GFX_BA1 = INREG32( &m_pDispRegs->DISPC_GFX_BA1 );

  0809c	e59d301c	 ldr         r3, [sp, #0x1C]
  080a0	e2833008	 add         r3, r3, #8
  080a4	e5933000	 ldr         r3, [r3]
  080a8	e2833084	 add         r3, r3, #0x84
  080ac	e5932000	 ldr         r2, [r3]
  080b0	e59d3000	 ldr         r3, [sp]
  080b4	e2833084	 add         r3, r3, #0x84
  080b8	e5832000	 str         r2, [r3]

; 3432 :             pDisplaySaveRestore->DISPC_GFX_POSITION = INREG32( &m_pDispRegs->DISPC_GFX_POSITION );

  080bc	e59d301c	 ldr         r3, [sp, #0x1C]
  080c0	e2833008	 add         r3, r3, #8
  080c4	e5933000	 ldr         r3, [r3]
  080c8	e2833088	 add         r3, r3, #0x88
  080cc	e5932000	 ldr         r2, [r3]
  080d0	e59d3000	 ldr         r3, [sp]
  080d4	e2833088	 add         r3, r3, #0x88
  080d8	e5832000	 str         r2, [r3]

; 3433 :             pDisplaySaveRestore->DISPC_GFX_SIZE = INREG32( &m_pDispRegs->DISPC_GFX_SIZE );

  080dc	e59d301c	 ldr         r3, [sp, #0x1C]
  080e0	e2833008	 add         r3, r3, #8
  080e4	e5933000	 ldr         r3, [r3]
  080e8	e283308c	 add         r3, r3, #0x8C
  080ec	e5932000	 ldr         r2, [r3]
  080f0	e59d3000	 ldr         r3, [sp]
  080f4	e283308c	 add         r3, r3, #0x8C
  080f8	e5832000	 str         r2, [r3]

; 3434 :             pDisplaySaveRestore->DISPC_GFX_ATTRIBUTES = INREG32( &m_pDispRegs->DISPC_GFX_ATTRIBUTES );

  080fc	e59d301c	 ldr         r3, [sp, #0x1C]
  08100	e2833008	 add         r3, r3, #8
  08104	e5933000	 ldr         r3, [r3]
  08108	e28330a0	 add         r3, r3, #0xA0
  0810c	e5932000	 ldr         r2, [r3]
  08110	e59d3000	 ldr         r3, [sp]
  08114	e28330a0	 add         r3, r3, #0xA0
  08118	e5832000	 str         r2, [r3]

; 3435 :             pDisplaySaveRestore->DISPC_GFX_FIFO_THRESHOLD = INREG32( &m_pDispRegs->DISPC_GFX_FIFO_THRESHOLD );

  0811c	e59d301c	 ldr         r3, [sp, #0x1C]
  08120	e2833008	 add         r3, r3, #8
  08124	e5933000	 ldr         r3, [r3]
  08128	e28330a4	 add         r3, r3, #0xA4
  0812c	e5932000	 ldr         r2, [r3]
  08130	e59d3000	 ldr         r3, [sp]
  08134	e28330a4	 add         r3, r3, #0xA4
  08138	e5832000	 str         r2, [r3]

; 3436 :             pDisplaySaveRestore->DISPC_GFX_ROW_INC = INREG32( &m_pDispRegs->DISPC_GFX_ROW_INC );

  0813c	e59d301c	 ldr         r3, [sp, #0x1C]
  08140	e2833008	 add         r3, r3, #8
  08144	e5933000	 ldr         r3, [r3]
  08148	e28330ac	 add         r3, r3, #0xAC
  0814c	e5932000	 ldr         r2, [r3]
  08150	e59d3000	 ldr         r3, [sp]
  08154	e28330ac	 add         r3, r3, #0xAC
  08158	e5832000	 str         r2, [r3]

; 3437 :             pDisplaySaveRestore->DISPC_GFX_PIXEL_INC = INREG32( &m_pDispRegs->DISPC_GFX_PIXEL_INC );

  0815c	e59d301c	 ldr         r3, [sp, #0x1C]
  08160	e2833008	 add         r3, r3, #8
  08164	e5933000	 ldr         r3, [r3]
  08168	e28330b0	 add         r3, r3, #0xB0
  0816c	e5932000	 ldr         r2, [r3]
  08170	e59d3000	 ldr         r3, [sp]
  08174	e28330b0	 add         r3, r3, #0xB0
  08178	e5832000	 str         r2, [r3]

; 3438 :             pDisplaySaveRestore->DISPC_GFX_WINDOW_SKIP = INREG32( &m_pDispRegs->DISPC_GFX_WINDOW_SKIP );

  0817c	e59d301c	 ldr         r3, [sp, #0x1C]
  08180	e2833008	 add         r3, r3, #8
  08184	e5933000	 ldr         r3, [r3]
  08188	e28330b4	 add         r3, r3, #0xB4
  0818c	e5932000	 ldr         r2, [r3]
  08190	e59d3000	 ldr         r3, [sp]
  08194	e28330b4	 add         r3, r3, #0xB4
  08198	e5832000	 str         r2, [r3]
  0819c		 |$LN9@SaveRegist|

; 3439 :         }
; 3440 : 
; 3441 :         //  Save off VID1 plane registers if enabled
; 3442 :         if( g_rgPipelineMapping[OMAP_DSS_PIPELINE_VIDEO1].bEnabled )

  0819c	e59f3520	 ldr         r3, [pc, #0x520]
  081a0	e5933020	 ldr         r3, [r3, #0x20]
  081a4	e3530000	 cmp         r3, #0
  081a8	0a00009b	 beq         |$LN8@SaveRegist|

; 3443 :         {
; 3444 :             pDisplaySaveRestore->tDISPC_VID1.BA0 = INREG32( &m_pDispRegs->tDISPC_VID1.BA0 );

  081ac	e59d301c	 ldr         r3, [sp, #0x1C]
  081b0	e2833008	 add         r3, r3, #8
  081b4	e5933000	 ldr         r3, [r3]
  081b8	e28330bc	 add         r3, r3, #0xBC
  081bc	e5932000	 ldr         r2, [r3]
  081c0	e59d3000	 ldr         r3, [sp]
  081c4	e28330bc	 add         r3, r3, #0xBC
  081c8	e5832000	 str         r2, [r3]

; 3445 :             pDisplaySaveRestore->tDISPC_VID1.BA1 = INREG32( &m_pDispRegs->tDISPC_VID1.BA1 );

  081cc	e59d301c	 ldr         r3, [sp, #0x1C]
  081d0	e2833008	 add         r3, r3, #8
  081d4	e5933000	 ldr         r3, [r3]
  081d8	e28330c0	 add         r3, r3, #0xC0
  081dc	e5932000	 ldr         r2, [r3]
  081e0	e59d3000	 ldr         r3, [sp]
  081e4	e28330c0	 add         r3, r3, #0xC0
  081e8	e5832000	 str         r2, [r3]

; 3446 :             pDisplaySaveRestore->tDISPC_VID1.POSITION = INREG32( &m_pDispRegs->tDISPC_VID1.POSITION );

  081ec	e59d301c	 ldr         r3, [sp, #0x1C]
  081f0	e2833008	 add         r3, r3, #8
  081f4	e5933000	 ldr         r3, [r3]
  081f8	e28330c4	 add         r3, r3, #0xC4
  081fc	e5932000	 ldr         r2, [r3]
  08200	e59d3000	 ldr         r3, [sp]
  08204	e28330c4	 add         r3, r3, #0xC4
  08208	e5832000	 str         r2, [r3]

; 3447 :             pDisplaySaveRestore->tDISPC_VID1.SIZE = INREG32( &m_pDispRegs->tDISPC_VID1.SIZE );

  0820c	e59d301c	 ldr         r3, [sp, #0x1C]
  08210	e2833008	 add         r3, r3, #8
  08214	e5933000	 ldr         r3, [r3]
  08218	e28330c8	 add         r3, r3, #0xC8
  0821c	e5932000	 ldr         r2, [r3]
  08220	e59d3000	 ldr         r3, [sp]
  08224	e28330c8	 add         r3, r3, #0xC8
  08228	e5832000	 str         r2, [r3]

; 3448 :             pDisplaySaveRestore->tDISPC_VID1.ATTRIBUTES = INREG32( &m_pDispRegs->tDISPC_VID1.ATTRIBUTES );

  0822c	e59d301c	 ldr         r3, [sp, #0x1C]
  08230	e2833008	 add         r3, r3, #8
  08234	e5933000	 ldr         r3, [r3]
  08238	e28330cc	 add         r3, r3, #0xCC
  0823c	e5932000	 ldr         r2, [r3]
  08240	e59d3000	 ldr         r3, [sp]
  08244	e28330cc	 add         r3, r3, #0xCC
  08248	e5832000	 str         r2, [r3]

; 3449 :             pDisplaySaveRestore->tDISPC_VID1.FIFO_THRESHOLD = INREG32( &m_pDispRegs->tDISPC_VID1.FIFO_THRESHOLD );

  0824c	e59d301c	 ldr         r3, [sp, #0x1C]
  08250	e2833008	 add         r3, r3, #8
  08254	e5933000	 ldr         r3, [r3]
  08258	e28330d0	 add         r3, r3, #0xD0
  0825c	e5932000	 ldr         r2, [r3]
  08260	e59d3000	 ldr         r3, [sp]
  08264	e28330d0	 add         r3, r3, #0xD0
  08268	e5832000	 str         r2, [r3]

; 3450 :             pDisplaySaveRestore->tDISPC_VID1.ROW_INC = INREG32( &m_pDispRegs->tDISPC_VID1.ROW_INC );

  0826c	e59d301c	 ldr         r3, [sp, #0x1C]
  08270	e2833008	 add         r3, r3, #8
  08274	e5933000	 ldr         r3, [r3]
  08278	e28330d8	 add         r3, r3, #0xD8
  0827c	e5932000	 ldr         r2, [r3]
  08280	e59d3000	 ldr         r3, [sp]
  08284	e28330d8	 add         r3, r3, #0xD8
  08288	e5832000	 str         r2, [r3]

; 3451 :             pDisplaySaveRestore->tDISPC_VID1.PIXEL_INC = INREG32( &m_pDispRegs->tDISPC_VID1.PIXEL_INC );

  0828c	e59d301c	 ldr         r3, [sp, #0x1C]
  08290	e2833008	 add         r3, r3, #8
  08294	e5933000	 ldr         r3, [r3]
  08298	e28330dc	 add         r3, r3, #0xDC
  0829c	e5932000	 ldr         r2, [r3]
  082a0	e59d3000	 ldr         r3, [sp]
  082a4	e28330dc	 add         r3, r3, #0xDC
  082a8	e5832000	 str         r2, [r3]

; 3452 :             pDisplaySaveRestore->tDISPC_VID1.FIR = INREG32( &m_pDispRegs->tDISPC_VID1.FIR );

  082ac	e59d301c	 ldr         r3, [sp, #0x1C]
  082b0	e2833008	 add         r3, r3, #8
  082b4	e5933000	 ldr         r3, [r3]
  082b8	e28330e0	 add         r3, r3, #0xE0
  082bc	e5932000	 ldr         r2, [r3]
  082c0	e59d3000	 ldr         r3, [sp]
  082c4	e28330e0	 add         r3, r3, #0xE0
  082c8	e5832000	 str         r2, [r3]

; 3453 :             pDisplaySaveRestore->tDISPC_VID1.PICTURE_SIZE = INREG32( &m_pDispRegs->tDISPC_VID1.PICTURE_SIZE );

  082cc	e59d301c	 ldr         r3, [sp, #0x1C]
  082d0	e2833008	 add         r3, r3, #8
  082d4	e5933000	 ldr         r3, [r3]
  082d8	e28330e4	 add         r3, r3, #0xE4
  082dc	e5932000	 ldr         r2, [r3]
  082e0	e59d3000	 ldr         r3, [sp]
  082e4	e28330e4	 add         r3, r3, #0xE4
  082e8	e5832000	 str         r2, [r3]

; 3454 :             pDisplaySaveRestore->tDISPC_VID1.ACCU0 = INREG32( &m_pDispRegs->tDISPC_VID1.ACCU0 );

  082ec	e59d301c	 ldr         r3, [sp, #0x1C]
  082f0	e2833008	 add         r3, r3, #8
  082f4	e5933000	 ldr         r3, [r3]
  082f8	e28330e8	 add         r3, r3, #0xE8
  082fc	e5932000	 ldr         r2, [r3]
  08300	e59d3000	 ldr         r3, [sp]
  08304	e28330e8	 add         r3, r3, #0xE8
  08308	e5832000	 str         r2, [r3]

; 3455 :             pDisplaySaveRestore->tDISPC_VID1.ACCU1 = INREG32( &m_pDispRegs->tDISPC_VID1.ACCU1 );

  0830c	e59d301c	 ldr         r3, [sp, #0x1C]
  08310	e2833008	 add         r3, r3, #8
  08314	e5933000	 ldr         r3, [r3]
  08318	e28330ec	 add         r3, r3, #0xEC
  0831c	e5932000	 ldr         r2, [r3]
  08320	e59d3000	 ldr         r3, [sp]
  08324	e28330ec	 add         r3, r3, #0xEC
  08328	e5832000	 str         r2, [r3]

; 3456 : 
; 3457 :             //  Scaling coefficients
; 3458 :             for( i = 0; i < NUM_SCALING_PHASES; i++ )

  0832c	e3a03000	 mov         r3, #0
  08330	e58d3004	 str         r3, [sp, #4]
  08334	ea000002	 b           |$LN7@SaveRegist|
  08338		 |$LN6@SaveRegist|
  08338	e59d3004	 ldr         r3, [sp, #4]
  0833c	e2833001	 add         r3, r3, #1
  08340	e58d3004	 str         r3, [sp, #4]
  08344		 |$LN7@SaveRegist|
  08344	e59d3004	 ldr         r3, [sp, #4]
  08348	e3530008	 cmp         r3, #8
  0834c	2a000032	 bcs         |$LN5@SaveRegist|

; 3459 :             {
; 3460 :                 pDisplaySaveRestore->tDISPC_VID1.aFIR_COEF[i].ulH = INREG32( &m_pDispRegs->tDISPC_VID1.aFIR_COEF[i].ulH );

  08350	e59d301c	 ldr         r3, [sp, #0x1C]
  08354	e2833008	 add         r3, r3, #8
  08358	e5933000	 ldr         r3, [r3]
  0835c	e28310f0	 add         r1, r3, #0xF0
  08360	e59d2004	 ldr         r2, [sp, #4]
  08364	e3a03008	 mov         r3, #8
  08368	e0030392	 mul         r3, r2, r3
  0836c	e0813003	 add         r3, r1, r3
  08370	e5930000	 ldr         r0, [r3]
  08374	e59d3000	 ldr         r3, [sp]
  08378	e28310f0	 add         r1, r3, #0xF0
  0837c	e59d2004	 ldr         r2, [sp, #4]
  08380	e3a03008	 mov         r3, #8
  08384	e0030392	 mul         r3, r2, r3
  08388	e0813003	 add         r3, r1, r3
  0838c	e5830000	 str         r0, [r3]

; 3461 :                 pDisplaySaveRestore->tDISPC_VID1.aFIR_COEF[i].ulHV = INREG32( &m_pDispRegs->tDISPC_VID1.aFIR_COEF[i].ulHV );

  08390	e59d301c	 ldr         r3, [sp, #0x1C]
  08394	e2833008	 add         r3, r3, #8
  08398	e5933000	 ldr         r3, [r3]
  0839c	e28310f0	 add         r1, r3, #0xF0
  083a0	e59d2004	 ldr         r2, [sp, #4]
  083a4	e3a03008	 mov         r3, #8
  083a8	e0030392	 mul         r3, r2, r3
  083ac	e0813003	 add         r3, r1, r3
  083b0	e2833004	 add         r3, r3, #4
  083b4	e5930000	 ldr         r0, [r3]
  083b8	e59d3000	 ldr         r3, [sp]
  083bc	e28310f0	 add         r1, r3, #0xF0
  083c0	e59d2004	 ldr         r2, [sp, #4]
  083c4	e3a03008	 mov         r3, #8
  083c8	e0030392	 mul         r3, r2, r3
  083cc	e0813003	 add         r3, r1, r3
  083d0	e2833004	 add         r3, r3, #4
  083d4	e5830000	 str         r0, [r3]

; 3462 :                 pDisplaySaveRestore->DISPC_VID1_FIR_COEF_V[i] = INREG32( &m_pDispRegs->DISPC_VID1_FIR_COEF_V[i] );

  083d8	e59d301c	 ldr         r3, [sp, #0x1C]
  083dc	e2833008	 add         r3, r3, #8
  083e0	e5933000	 ldr         r3, [r3]
  083e4	e2831e1e	 add         r1, r3, #0x1E, 28
  083e8	e59d2004	 ldr         r2, [sp, #4]
  083ec	e3a03004	 mov         r3, #4
  083f0	e0030392	 mul         r3, r2, r3
  083f4	e0813003	 add         r3, r1, r3
  083f8	e5930000	 ldr         r0, [r3]
  083fc	e59d3000	 ldr         r3, [sp]
  08400	e2831e1e	 add         r1, r3, #0x1E, 28
  08404	e59d2004	 ldr         r2, [sp, #4]
  08408	e3a03004	 mov         r3, #4
  0840c	e0030392	 mul         r3, r2, r3
  08410	e0813003	 add         r3, r1, r3
  08414	e5830000	 str         r0, [r3]

; 3463 :             }

  08418	eaffffc6	 b           |$LN6@SaveRegist|
  0841c		 |$LN5@SaveRegist|
  0841c		 |$LN8@SaveRegist|

; 3464 :         }
; 3465 :         
; 3466 :         //  Save off VID2 plane registers if enabled
; 3467 :         if( g_rgPipelineMapping[OMAP_DSS_PIPELINE_VIDEO2].bEnabled )

  0841c	e59f32a0	 ldr         r3, [pc, #0x2A0]
  08420	e5933040	 ldr         r3, [r3, #0x40]
  08424	e3530000	 cmp         r3, #0
  08428	0a00009b	 beq         |$LN4@SaveRegist|

; 3468 :         {
; 3469 :             pDisplaySaveRestore->tDISPC_VID2.BA0 = INREG32( &m_pDispRegs->tDISPC_VID2.BA0 );

  0842c	e59d301c	 ldr         r3, [sp, #0x1C]
  08430	e2833008	 add         r3, r3, #8
  08434	e5933000	 ldr         r3, [r3]
  08438	e2833f53	 add         r3, r3, #0x53, 30
  0843c	e5932000	 ldr         r2, [r3]
  08440	e59d3000	 ldr         r3, [sp]
  08444	e2833f53	 add         r3, r3, #0x53, 30
  08448	e5832000	 str         r2, [r3]

; 3470 :             pDisplaySaveRestore->tDISPC_VID2.BA1 = INREG32( &m_pDispRegs->tDISPC_VID2.BA1 );

  0844c	e59d301c	 ldr         r3, [sp, #0x1C]
  08450	e2833008	 add         r3, r3, #8
  08454	e5933000	 ldr         r3, [r3]
  08458	e2833e15	 add         r3, r3, #0x15, 28
  0845c	e5932000	 ldr         r2, [r3]
  08460	e59d3000	 ldr         r3, [sp]
  08464	e2833e15	 add         r3, r3, #0x15, 28
  08468	e5832000	 str         r2, [r3]

; 3471 :             pDisplaySaveRestore->tDISPC_VID2.POSITION = INREG32( &m_pDispRegs->tDISPC_VID2.POSITION );

  0846c	e59d301c	 ldr         r3, [sp, #0x1C]
  08470	e2833008	 add         r3, r3, #8
  08474	e5933000	 ldr         r3, [r3]
  08478	e2833f55	 add         r3, r3, #0x55, 30
  0847c	e5932000	 ldr         r2, [r3]
  08480	e59d3000	 ldr         r3, [sp]
  08484	e2833f55	 add         r3, r3, #0x55, 30
  08488	e5832000	 str         r2, [r3]

; 3472 :             pDisplaySaveRestore->tDISPC_VID2.SIZE = INREG32( &m_pDispRegs->tDISPC_VID2.SIZE );

  0848c	e59d301c	 ldr         r3, [sp, #0x1C]
  08490	e2833008	 add         r3, r3, #8
  08494	e5933000	 ldr         r3, [r3]
  08498	e2833f56	 add         r3, r3, #0x56, 30
  0849c	e5932000	 ldr         r2, [r3]
  084a0	e59d3000	 ldr         r3, [sp]
  084a4	e2833f56	 add         r3, r3, #0x56, 30
  084a8	e5832000	 str         r2, [r3]

; 3473 :             pDisplaySaveRestore->tDISPC_VID2.ATTRIBUTES = INREG32( &m_pDispRegs->tDISPC_VID2.ATTRIBUTES );

  084ac	e59d301c	 ldr         r3, [sp, #0x1C]
  084b0	e2833008	 add         r3, r3, #8
  084b4	e5933000	 ldr         r3, [r3]
  084b8	e2833f57	 add         r3, r3, #0x57, 30
  084bc	e5932000	 ldr         r2, [r3]
  084c0	e59d3000	 ldr         r3, [sp]
  084c4	e2833f57	 add         r3, r3, #0x57, 30
  084c8	e5832000	 str         r2, [r3]

; 3474 :             pDisplaySaveRestore->tDISPC_VID2.FIFO_THRESHOLD = INREG32( &m_pDispRegs->tDISPC_VID2.FIFO_THRESHOLD );

  084cc	e59d301c	 ldr         r3, [sp, #0x1C]
  084d0	e2833008	 add         r3, r3, #8
  084d4	e5933000	 ldr         r3, [r3]
  084d8	e2833e16	 add         r3, r3, #0x16, 28
  084dc	e5932000	 ldr         r2, [r3]
  084e0	e59d3000	 ldr         r3, [sp]
  084e4	e2833e16	 add         r3, r3, #0x16, 28
  084e8	e5832000	 str         r2, [r3]

; 3475 :             pDisplaySaveRestore->tDISPC_VID2.ROW_INC = INREG32( &m_pDispRegs->tDISPC_VID2.ROW_INC );

  084ec	e59d301c	 ldr         r3, [sp, #0x1C]
  084f0	e2833008	 add         r3, r3, #8
  084f4	e5933000	 ldr         r3, [r3]
  084f8	e2833f5a	 add         r3, r3, #0x5A, 30
  084fc	e5932000	 ldr         r2, [r3]
  08500	e59d3000	 ldr         r3, [sp]
  08504	e2833f5a	 add         r3, r3, #0x5A, 30
  08508	e5832000	 str         r2, [r3]

; 3476 :             pDisplaySaveRestore->tDISPC_VID2.PIXEL_INC = INREG32( &m_pDispRegs->tDISPC_VID2.PIXEL_INC );

  0850c	e59d301c	 ldr         r3, [sp, #0x1C]
  08510	e2833008	 add         r3, r3, #8
  08514	e5933000	 ldr         r3, [r3]
  08518	e2833f5b	 add         r3, r3, #0x5B, 30
  0851c	e5932000	 ldr         r2, [r3]
  08520	e59d3000	 ldr         r3, [sp]
  08524	e2833f5b	 add         r3, r3, #0x5B, 30
  08528	e5832000	 str         r2, [r3]

; 3477 :             pDisplaySaveRestore->tDISPC_VID2.FIR = INREG32( &m_pDispRegs->tDISPC_VID2.FIR );

  0852c	e59d301c	 ldr         r3, [sp, #0x1C]
  08530	e2833008	 add         r3, r3, #8
  08534	e5933000	 ldr         r3, [r3]
  08538	e2833e17	 add         r3, r3, #0x17, 28
  0853c	e5932000	 ldr         r2, [r3]
  08540	e59d3000	 ldr         r3, [sp]
  08544	e2833e17	 add         r3, r3, #0x17, 28
  08548	e5832000	 str         r2, [r3]

; 3478 :             pDisplaySaveRestore->tDISPC_VID2.PICTURE_SIZE = INREG32( &m_pDispRegs->tDISPC_VID2.PICTURE_SIZE );

  0854c	e59d301c	 ldr         r3, [sp, #0x1C]
  08550	e2833008	 add         r3, r3, #8
  08554	e5933000	 ldr         r3, [r3]
  08558	e2833f5d	 add         r3, r3, #0x5D, 30
  0855c	e5932000	 ldr         r2, [r3]
  08560	e59d3000	 ldr         r3, [sp]
  08564	e2833f5d	 add         r3, r3, #0x5D, 30
  08568	e5832000	 str         r2, [r3]

; 3479 :             pDisplaySaveRestore->tDISPC_VID2.ACCU0 = INREG32( &m_pDispRegs->tDISPC_VID2.ACCU0 );

  0856c	e59d301c	 ldr         r3, [sp, #0x1C]
  08570	e2833008	 add         r3, r3, #8
  08574	e5933000	 ldr         r3, [r3]
  08578	e2833f5e	 add         r3, r3, #0x5E, 30
  0857c	e5932000	 ldr         r2, [r3]
  08580	e59d3000	 ldr         r3, [sp]
  08584	e2833f5e	 add         r3, r3, #0x5E, 30
  08588	e5832000	 str         r2, [r3]

; 3480 :             pDisplaySaveRestore->tDISPC_VID2.ACCU1 = INREG32( &m_pDispRegs->tDISPC_VID2.ACCU1 );

  0858c	e59d301c	 ldr         r3, [sp, #0x1C]
  08590	e2833008	 add         r3, r3, #8
  08594	e5933000	 ldr         r3, [r3]
  08598	e2833f5f	 add         r3, r3, #0x5F, 30
  0859c	e5932000	 ldr         r2, [r3]
  085a0	e59d3000	 ldr         r3, [sp]
  085a4	e2833f5f	 add         r3, r3, #0x5F, 30
  085a8	e5832000	 str         r2, [r3]

; 3481 : 
; 3482 :             //  Scaling coefficients
; 3483 :             for( i = 0; i < NUM_SCALING_PHASES; i++ )

  085ac	e3a03000	 mov         r3, #0
  085b0	e58d3004	 str         r3, [sp, #4]
  085b4	ea000002	 b           |$LN3@SaveRegist|
  085b8		 |$LN2@SaveRegist|
  085b8	e59d3004	 ldr         r3, [sp, #4]
  085bc	e2833001	 add         r3, r3, #1
  085c0	e58d3004	 str         r3, [sp, #4]
  085c4		 |$LN3@SaveRegist|
  085c4	e59d3004	 ldr         r3, [sp, #4]
  085c8	e3530008	 cmp         r3, #8
  085cc	2a000032	 bcs         |$LN1@SaveRegist|

; 3484 :             {
; 3485 :                 pDisplaySaveRestore->tDISPC_VID2.aFIR_COEF[i].ulH = INREG32( &m_pDispRegs->tDISPC_VID2.aFIR_COEF[i].ulH );

  085d0	e59d301c	 ldr         r3, [sp, #0x1C]
  085d4	e2833008	 add         r3, r3, #8
  085d8	e5933000	 ldr         r3, [r3]
  085dc	e2831d06	 add         r1, r3, #6, 26
  085e0	e59d2004	 ldr         r2, [sp, #4]
  085e4	e3a03008	 mov         r3, #8
  085e8	e0030392	 mul         r3, r2, r3
  085ec	e0813003	 add         r3, r1, r3
  085f0	e5930000	 ldr         r0, [r3]
  085f4	e59d3000	 ldr         r3, [sp]
  085f8	e2831d06	 add         r1, r3, #6, 26
  085fc	e59d2004	 ldr         r2, [sp, #4]
  08600	e3a03008	 mov         r3, #8
  08604	e0030392	 mul         r3, r2, r3
  08608	e0813003	 add         r3, r1, r3
  0860c	e5830000	 str         r0, [r3]

; 3486 :                 pDisplaySaveRestore->tDISPC_VID2.aFIR_COEF[i].ulHV = INREG32( &m_pDispRegs->tDISPC_VID2.aFIR_COEF[i].ulHV );

  08610	e59d301c	 ldr         r3, [sp, #0x1C]
  08614	e2833008	 add         r3, r3, #8
  08618	e5933000	 ldr         r3, [r3]
  0861c	e2831d06	 add         r1, r3, #6, 26
  08620	e59d2004	 ldr         r2, [sp, #4]
  08624	e3a03008	 mov         r3, #8
  08628	e0030392	 mul         r3, r2, r3
  0862c	e0813003	 add         r3, r1, r3
  08630	e2833004	 add         r3, r3, #4
  08634	e5930000	 ldr         r0, [r3]
  08638	e59d3000	 ldr         r3, [sp]
  0863c	e2831d06	 add         r1, r3, #6, 26
  08640	e59d2004	 ldr         r2, [sp, #4]
  08644	e3a03008	 mov         r3, #8
  08648	e0030392	 mul         r3, r2, r3
  0864c	e0813003	 add         r3, r1, r3
  08650	e2833004	 add         r3, r3, #4
  08654	e5830000	 str         r0, [r3]

; 3487 :                 pDisplaySaveRestore->DISPC_VID2_FIR_COEF_V[i] = INREG32( &m_pDispRegs->DISPC_VID2_FIR_COEF_V[i] );

  08658	e59d301c	 ldr         r3, [sp, #0x1C]
  0865c	e2833008	 add         r3, r3, #8
  08660	e5933000	 ldr         r3, [r3]
  08664	e2831c02	 add         r1, r3, #2, 24
  08668	e59d2004	 ldr         r2, [sp, #4]
  0866c	e3a03004	 mov         r3, #4
  08670	e0030392	 mul         r3, r2, r3
  08674	e0813003	 add         r3, r1, r3
  08678	e5930000	 ldr         r0, [r3]
  0867c	e59d3000	 ldr         r3, [sp]
  08680	e2831c02	 add         r1, r3, #2, 24
  08684	e59d2004	 ldr         r2, [sp, #4]
  08688	e3a03004	 mov         r3, #4
  0868c	e0030392	 mul         r3, r2, r3
  08690	e0813003	 add         r3, r1, r3
  08694	e5830000	 str         r0, [r3]

; 3488 :             }

  08698	eaffffc6	 b           |$LN2@SaveRegist|
  0869c		 |$LN1@SaveRegist|
  0869c		 |$LN4@SaveRegist|
  0869c		 |$LN10@SaveRegist|

; 3489 :         }
; 3490 :     }
; 3491 :     
; 3492 :     
; 3493 :     //  Success
; 3494 :     bResult = TRUE;

  0869c	e3a03001	 mov         r3, #1
  086a0	e58d3008	 str         r3, [sp, #8]
  086a4		 |$LN11@SaveRegist|
  086a4		 |$LN15@SaveRegist|
  086a4		 |$cleanUp$39068|

; 3495 : 
; 3496 : cleanUp:
; 3497 :     //  Release regs
; 3498 :     ReleaseRegs();

  086a4	e59d001c	 ldr         r0, [sp, #0x1C]
  086a8	eb000000	 bl          |?ReleaseRegs@OMAPDisplayController@@IAAHXZ|

; 3499 : 
; 3500 :     //  Return result
; 3501 :     return bResult;

  086ac	e59d3008	 ldr         r3, [sp, #8]
  086b0	e58d300c	 str         r3, [sp, #0xC]

; 3502 : }

  086b4	e59d000c	 ldr         r0, [sp, #0xC]
  086b8	e28dd014	 add         sp, sp, #0x14
  086bc	e89d6000	 ldmia       sp, {sp, lr}
  086c0	e12fff1e	 bx          lr
  086c4		 |$LN22@SaveRegist|
  086c4		 |$LN23@SaveRegist|
  086c4	00000000	 DCD         |?g_rgPipelineMapping@@3PAUOMAPPipelineConfig@@A|
  086c8		 |$M40800|

			 ENDP  ; |?SaveRegisters@OMAPDisplayController@@QAAHW4OMAP_DSS_DESTINATION@@@Z|, OMAPDisplayController::SaveRegisters

	IMPORT	|?g_dwVencValues_NTSC@@3PAKA|		; g_dwVencValues_NTSC
	IMPORT	|?g_dwVencValues_PAL@@3PAKA|		; g_dwVencValues_PAL
	IMPORT	|LcdPdd_TV_GetMode|
	IMPORT	|LcdPdd_TV_Initialize|

  000d8			 AREA	 |.pdata|, PDATA
|$T40814| DCD	|$LN30@RestoreReg|
	DCD	0x40043604
; Function compile flags: /Odtp

  086c8			 AREA	 |.text|, CODE, ARM

  086c8		 |?RestoreRegisters@OMAPDisplayController@@QAAHW4OMAP_DSS_DESTINATION@@@Z| PROC ; OMAPDisplayController::RestoreRegisters

; 3509 : {

  086c8		 |$LN30@RestoreReg|
  086c8	e1a0c00d	 mov         r12, sp
  086cc	e92d0003	 stmdb       sp!, {r0, r1}
  086d0	e92d5000	 stmdb       sp!, {r12, lr}
  086d4	e24dd024	 sub         sp, sp, #0x24
  086d8		 |$M40811|

; 3510 :     BOOL    bResult = FALSE;

  086d8	e3a03000	 mov         r3, #0
  086dc	e58d3008	 str         r3, [sp, #8]

; 3511 :     DWORD   i;
; 3512 :     OMAP_DISPC_REGS   *pDisplaySaveRestore = 0;

  086e0	e3a03000	 mov         r3, #0
  086e4	e58d3000	 str         r3, [sp]

; 3513 :     
; 3514 :     //  Access the regs
; 3515 :     if( AccessRegs() == FALSE )

  086e8	e59d002c	 ldr         r0, [sp, #0x2C]
  086ec	eb000000	 bl          |?AccessRegs@OMAPDisplayController@@IAAHXZ|
  086f0	e58d0014	 str         r0, [sp, #0x14]
  086f4	e59d3014	 ldr         r3, [sp, #0x14]
  086f8	e3530000	 cmp         r3, #0
  086fc	1a000001	 bne         |$LN21@RestoreReg|
  08700	ea00041b	 b           |$LN20@RestoreReg|

; 3516 :         goto cleanUp;

  08704	ea00041a	 b           |$cleanUp$39136|
  08708		 |$LN21@RestoreReg|

; 3517 : 
; 3518 :     // Choose the last active LCD context ( internal LCD/external LCD)
; 3519 :     if (!m_bHDMIEnable)

  08708	e59d302c	 ldr         r3, [sp, #0x2C]
  0870c	e2833b01	 add         r3, r3, #1, 22
  08710	e28330c8	 add         r3, r3, #0xC8
  08714	e5933000	 ldr         r3, [r3]
  08718	e3530000	 cmp         r3, #0
  0871c	1a000003	 bne         |$LN19@RestoreReg|

; 3520 :         pDisplaySaveRestore = &g_rgDisplaySaveRestore;

  08720	e59d302c	 ldr         r3, [sp, #0x2C]
  08724	e2833018	 add         r3, r3, #0x18
  08728	e58d3000	 str         r3, [sp]

; 3521 :     else

  0872c	ea000002	 b           |$LN18@RestoreReg|
  08730		 |$LN19@RestoreReg|

; 3522 :         pDisplaySaveRestore = &g_rgDisplaySaveRestore_eLcd;

  08730	e59d302c	 ldr         r3, [sp, #0x2C]
  08734	e2833e25	 add         r3, r3, #0x25, 28
  08738	e58d3000	 str         r3, [sp]
  0873c		 |$LN18@RestoreReg|

; 3523 : 
; 3524 :     if (pDisplaySaveRestore == NULL)

  0873c	e59d3000	 ldr         r3, [sp]
  08740	e3530000	 cmp         r3, #0
  08744	1a000001	 bne         |$LN17@RestoreReg|
  08748	ea000409	 b           |$LN16@RestoreReg|

; 3525 :         goto cleanUp;

  0874c	ea000408	 b           |$cleanUp$39136|
  08750		 |$LN17@RestoreReg|

; 3526 : 
; 3527 :         
; 3528 :     //  Restore the DSS and LCD registers
; 3529 :     if( eDestination == OMAP_DSS_DESTINATION_LCD )

  08750	e59d3030	 ldr         r3, [sp, #0x30]
  08754	e3530000	 cmp         r3, #0
  08758	1a000254	 bne         |$LN15@RestoreReg|

; 3530 :     {
; 3531 :         //  Configure interconnect parameters
; 3532 :         OUTREG32( &m_pDSSRegs->DSS_SYSCONFIG, DISPC_SYSCONFIG_AUTOIDLE );

  0875c	e59d302c	 ldr         r3, [sp, #0x2C]
  08760	e2833004	 add         r3, r3, #4
  08764	e5933000	 ldr         r3, [r3]
  08768	e2832010	 add         r2, r3, #0x10
  0876c	e3a03001	 mov         r3, #1
  08770	e5823000	 str         r3, [r2]

; 3533 :         OUTREG32( &m_pDispRegs->DISPC_SYSCONFIG, DISPC_SYSCONFIG_AUTOIDLE|SYSCONFIG_NOIDLE|SYSCONFIG_NOSTANDBY );

  08774	e59d302c	 ldr         r3, [sp, #0x2C]
  08778	e2833008	 add         r3, r3, #8
  0877c	e5933000	 ldr         r3, [r3]
  08780	e2832010	 add         r2, r3, #0x10
  08784	e3a03a01	 mov         r3, #1, 20
  08788	e3833009	 orr         r3, r3, #9
  0878c	e5823000	 str         r3, [r2]

; 3534 : 
; 3535 :         //  Not enabling any interrupts
; 3536 :         OUTREG32( &m_pDispRegs->DISPC_IRQENABLE , pDisplaySaveRestore->DISPC_IRQENABLE);

  08790	e59d3000	 ldr         r3, [sp]
  08794	e283301c	 add         r3, r3, #0x1C
  08798	e5932000	 ldr         r2, [r3]
  0879c	e59d302c	 ldr         r3, [sp, #0x2C]
  087a0	e2833008	 add         r3, r3, #8
  087a4	e5933000	 ldr         r3, [r3]
  087a8	e283301c	 add         r3, r3, #0x1C
  087ac	e5832000	 str         r2, [r3]

; 3537 : 
; 3538 :         //  Initialize the LCD by calling PDD
; 3539 :         LcdPdd_LCD_Initialize(
; 3540 :             m_pDSSRegs,
; 3541 :             m_pDispRegs,
; 3542 :             NULL,
; 3543 :             m_pVencRegs);

  087b0	e59d302c	 ldr         r3, [sp, #0x2C]
  087b4	e283300c	 add         r3, r3, #0xC
  087b8	e5933000	 ldr         r3, [r3]
  087bc	e3a02000	 mov         r2, #0
  087c0	e59d102c	 ldr         r1, [sp, #0x2C]
  087c4	e2811008	 add         r1, r1, #8
  087c8	e5911000	 ldr         r1, [r1]
  087cc	e59d002c	 ldr         r0, [sp, #0x2C]
  087d0	e2800004	 add         r0, r0, #4
  087d4	e5900000	 ldr         r0, [r0]
  087d8	eb000000	 bl          LcdPdd_LCD_Initialize

; 3544 : 
; 3545 :         OUTREG32( &m_pDispRegs->DISPC_CONFIG, pDisplaySaveRestore->DISPC_CONFIG );

  087dc	e59d3000	 ldr         r3, [sp]
  087e0	e2833044	 add         r3, r3, #0x44
  087e4	e5932000	 ldr         r2, [r3]
  087e8	e59d302c	 ldr         r3, [sp, #0x2C]
  087ec	e2833008	 add         r3, r3, #8
  087f0	e5933000	 ldr         r3, [r3]
  087f4	e2833044	 add         r3, r3, #0x44
  087f8	e5832000	 str         r2, [r3]

; 3546 : 
; 3547 :         //Enable/Disable Gamma correction
; 3548 :         if(m_bGammaEnable)

  087fc	e59d302c	 ldr         r3, [sp, #0x2C]
  08800	e2833b01	 add         r3, r3, #1, 22
  08804	e28330dc	 add         r3, r3, #0xDC
  08808	e5933000	 ldr         r3, [r3]
  0880c	e3530000	 cmp         r3, #0
  08810	0a00000b	 beq         |$LN14@RestoreReg|

; 3549 :             SETREG32( &m_pDispRegs->DISPC_CONFIG, DISPC_CONFIG_PALETTEGAMMATABLE );

  08814	e59d302c	 ldr         r3, [sp, #0x2C]
  08818	e2833008	 add         r3, r3, #8
  0881c	e5933000	 ldr         r3, [r3]
  08820	e2833044	 add         r3, r3, #0x44
  08824	e5933000	 ldr         r3, [r3]
  08828	e3832008	 orr         r2, r3, #8
  0882c	e59d302c	 ldr         r3, [sp, #0x2C]
  08830	e2833008	 add         r3, r3, #8
  08834	e5933000	 ldr         r3, [r3]
  08838	e2833044	 add         r3, r3, #0x44
  0883c	e5832000	 str         r2, [r3]

; 3550 :         else

  08840	ea00000b	 b           |$LN13@RestoreReg|
  08844		 |$LN14@RestoreReg|

; 3551 :             CLRREG32( &m_pDispRegs->DISPC_CONFIG, DISPC_CONFIG_PALETTEGAMMATABLE );

  08844	e59d302c	 ldr         r3, [sp, #0x2C]
  08848	e2833008	 add         r3, r3, #8
  0884c	e5933000	 ldr         r3, [r3]
  08850	e2833044	 add         r3, r3, #0x44
  08854	e5932000	 ldr         r2, [r3]
  08858	e3e03008	 mvn         r3, #8
  0885c	e0022003	 and         r2, r2, r3
  08860	e59d302c	 ldr         r3, [sp, #0x2C]
  08864	e2833008	 add         r3, r3, #8
  08868	e5933000	 ldr         r3, [r3]
  0886c	e2833044	 add         r3, r3, #0x44
  08870	e5832000	 str         r2, [r3]
  08874		 |$LN13@RestoreReg|

; 3552 : 
; 3553 :         // Load Gamma Table
; 3554 :         OUTREG32( &m_pDispRegs->DISPC_GFX_TABLE_BA, m_dwGammaBufPhys);

  08874	e59d302c	 ldr         r3, [sp, #0x2C]
  08878	e2833b01	 add         r3, r3, #1, 22
  0887c	e28310d8	 add         r1, r3, #0xD8
  08880	e59d302c	 ldr         r3, [sp, #0x2C]
  08884	e2833008	 add         r3, r3, #8
  08888	e5933000	 ldr         r3, [r3]
  0888c	e28320b8	 add         r2, r3, #0xB8
  08890	e5913000	 ldr         r3, [r1]
  08894	e5823000	 str         r3, [r2]

; 3555 : 
; 3556 :         //  Restore global alpha value
; 3557 :         OUTREG32( &m_pDispRegs->DISPC_GLOBAL_ALPHA, pDisplaySaveRestore->DISPC_GLOBAL_ALPHA );

  08898	e59d3000	 ldr         r3, [sp]
  0889c	e2833074	 add         r3, r3, #0x74
  088a0	e5932000	 ldr         r2, [r3]
  088a4	e59d302c	 ldr         r3, [sp, #0x2C]
  088a8	e2833008	 add         r3, r3, #8
  088ac	e5933000	 ldr         r3, [r3]
  088b0	e2833074	 add         r3, r3, #0x74
  088b4	e5832000	 str         r2, [r3]

; 3558 : 
; 3559 :         // Restore transparency value
; 3560 :         OUTREG32( &m_pDispRegs->DISPC_TRANS_COLOR0, pDisplaySaveRestore->DISPC_TRANS_COLOR0 );

  088b8	e59d3000	 ldr         r3, [sp]
  088bc	e2833054	 add         r3, r3, #0x54
  088c0	e5932000	 ldr         r2, [r3]
  088c4	e59d302c	 ldr         r3, [sp, #0x2C]
  088c8	e2833008	 add         r3, r3, #8
  088cc	e5933000	 ldr         r3, [r3]
  088d0	e2833054	 add         r3, r3, #0x54
  088d4	e5832000	 str         r2, [r3]

; 3561 :         OUTREG32( &m_pDispRegs->DISPC_TRANS_COLOR1, pDisplaySaveRestore->DISPC_TRANS_COLOR1 );

  088d8	e59d3000	 ldr         r3, [sp]
  088dc	e2833058	 add         r3, r3, #0x58
  088e0	e5932000	 ldr         r2, [r3]
  088e4	e59d302c	 ldr         r3, [sp, #0x2C]
  088e8	e2833008	 add         r3, r3, #8
  088ec	e5933000	 ldr         r3, [r3]
  088f0	e2833058	 add         r3, r3, #0x58
  088f4	e5832000	 str         r2, [r3]

; 3562 : 
; 3563 :         //  Restore GFX plane registers if enabled
; 3564 :         if( g_rgPipelineMapping[OMAP_DSS_PIPELINE_GFX].bEnabled )

  088f8	e59f3e9c	 ldr         r3, [pc, #0xE9C]
  088fc	e5933000	 ldr         r3, [r3]
  08900	e3530000	 cmp         r3, #0
  08904	0a000047	 beq         |$LN12@RestoreReg|

; 3565 :         {
; 3566 :             OUTREG32( &m_pDispRegs->DISPC_GFX_BA0, pDisplaySaveRestore->DISPC_GFX_BA0 );

  08908	e59d3000	 ldr         r3, [sp]
  0890c	e2833080	 add         r3, r3, #0x80
  08910	e5932000	 ldr         r2, [r3]
  08914	e59d302c	 ldr         r3, [sp, #0x2C]
  08918	e2833008	 add         r3, r3, #8
  0891c	e5933000	 ldr         r3, [r3]
  08920	e2833080	 add         r3, r3, #0x80
  08924	e5832000	 str         r2, [r3]

; 3567 :             OUTREG32( &m_pDispRegs->DISPC_GFX_BA1, pDisplaySaveRestore->DISPC_GFX_BA1 );

  08928	e59d3000	 ldr         r3, [sp]
  0892c	e2833084	 add         r3, r3, #0x84
  08930	e5932000	 ldr         r2, [r3]
  08934	e59d302c	 ldr         r3, [sp, #0x2C]
  08938	e2833008	 add         r3, r3, #8
  0893c	e5933000	 ldr         r3, [r3]
  08940	e2833084	 add         r3, r3, #0x84
  08944	e5832000	 str         r2, [r3]

; 3568 :             OUTREG32( &m_pDispRegs->DISPC_GFX_POSITION, pDisplaySaveRestore->DISPC_GFX_POSITION );

  08948	e59d3000	 ldr         r3, [sp]
  0894c	e2833088	 add         r3, r3, #0x88
  08950	e5932000	 ldr         r2, [r3]
  08954	e59d302c	 ldr         r3, [sp, #0x2C]
  08958	e2833008	 add         r3, r3, #8
  0895c	e5933000	 ldr         r3, [r3]
  08960	e2833088	 add         r3, r3, #0x88
  08964	e5832000	 str         r2, [r3]

; 3569 :             OUTREG32( &m_pDispRegs->DISPC_GFX_SIZE, pDisplaySaveRestore->DISPC_GFX_SIZE );

  08968	e59d3000	 ldr         r3, [sp]
  0896c	e283308c	 add         r3, r3, #0x8C
  08970	e5932000	 ldr         r2, [r3]
  08974	e59d302c	 ldr         r3, [sp, #0x2C]
  08978	e2833008	 add         r3, r3, #8
  0897c	e5933000	 ldr         r3, [r3]
  08980	e283308c	 add         r3, r3, #0x8C
  08984	e5832000	 str         r2, [r3]

; 3570 :             OUTREG32( &m_pDispRegs->DISPC_GFX_ATTRIBUTES, pDisplaySaveRestore->DISPC_GFX_ATTRIBUTES );

  08988	e59d3000	 ldr         r3, [sp]
  0898c	e28330a0	 add         r3, r3, #0xA0
  08990	e5932000	 ldr         r2, [r3]
  08994	e59d302c	 ldr         r3, [sp, #0x2C]
  08998	e2833008	 add         r3, r3, #8
  0899c	e5933000	 ldr         r3, [r3]
  089a0	e28330a0	 add         r3, r3, #0xA0
  089a4	e5832000	 str         r2, [r3]

; 3571 :             OUTREG32( &m_pDispRegs->DISPC_GFX_FIFO_THRESHOLD, pDisplaySaveRestore->DISPC_GFX_FIFO_THRESHOLD );

  089a8	e59d3000	 ldr         r3, [sp]
  089ac	e28330a4	 add         r3, r3, #0xA4
  089b0	e5932000	 ldr         r2, [r3]
  089b4	e59d302c	 ldr         r3, [sp, #0x2C]
  089b8	e2833008	 add         r3, r3, #8
  089bc	e5933000	 ldr         r3, [r3]
  089c0	e28330a4	 add         r3, r3, #0xA4
  089c4	e5832000	 str         r2, [r3]

; 3572 :             OUTREG32( &m_pDispRegs->DISPC_GFX_ROW_INC, pDisplaySaveRestore->DISPC_GFX_ROW_INC );

  089c8	e59d3000	 ldr         r3, [sp]
  089cc	e28330ac	 add         r3, r3, #0xAC
  089d0	e5932000	 ldr         r2, [r3]
  089d4	e59d302c	 ldr         r3, [sp, #0x2C]
  089d8	e2833008	 add         r3, r3, #8
  089dc	e5933000	 ldr         r3, [r3]
  089e0	e28330ac	 add         r3, r3, #0xAC
  089e4	e5832000	 str         r2, [r3]

; 3573 :             OUTREG32( &m_pDispRegs->DISPC_GFX_PIXEL_INC, pDisplaySaveRestore->DISPC_GFX_PIXEL_INC );

  089e8	e59d3000	 ldr         r3, [sp]
  089ec	e28330b0	 add         r3, r3, #0xB0
  089f0	e5932000	 ldr         r2, [r3]
  089f4	e59d302c	 ldr         r3, [sp, #0x2C]
  089f8	e2833008	 add         r3, r3, #8
  089fc	e5933000	 ldr         r3, [r3]
  08a00	e28330b0	 add         r3, r3, #0xB0
  08a04	e5832000	 str         r2, [r3]

; 3574 :             OUTREG32( &m_pDispRegs->DISPC_GFX_WINDOW_SKIP, pDisplaySaveRestore->DISPC_GFX_WINDOW_SKIP );

  08a08	e59d3000	 ldr         r3, [sp]
  08a0c	e28330b4	 add         r3, r3, #0xB4
  08a10	e5932000	 ldr         r2, [r3]
  08a14	e59d302c	 ldr         r3, [sp, #0x2C]
  08a18	e2833008	 add         r3, r3, #8
  08a1c	e5933000	 ldr         r3, [r3]
  08a20	e28330b4	 add         r3, r3, #0xB4
  08a24	e5832000	 str         r2, [r3]
  08a28		 |$LN12@RestoreReg|

; 3575 :         }
; 3576 : 
; 3577 : 
; 3578 :         //  Restore VID1 plane registers if enabled
; 3579 :         if( g_rgPipelineMapping[OMAP_DSS_PIPELINE_VIDEO1].bEnabled )

  08a28	e59f3d6c	 ldr         r3, [pc, #0xD6C]
  08a2c	e5933020	 ldr         r3, [r3, #0x20]
  08a30	e3530000	 cmp         r3, #0
  08a34	0a0000cc	 beq         |$LN11@RestoreReg|

; 3580 :         {
; 3581 :             OUTREG32( &m_pDispRegs->tDISPC_VID1.BA0, pDisplaySaveRestore->tDISPC_VID1.BA0 );

  08a38	e59d3000	 ldr         r3, [sp]
  08a3c	e28330bc	 add         r3, r3, #0xBC
  08a40	e5932000	 ldr         r2, [r3]
  08a44	e59d302c	 ldr         r3, [sp, #0x2C]
  08a48	e2833008	 add         r3, r3, #8
  08a4c	e5933000	 ldr         r3, [r3]
  08a50	e28330bc	 add         r3, r3, #0xBC
  08a54	e5832000	 str         r2, [r3]

; 3582 :             OUTREG32( &m_pDispRegs->tDISPC_VID1.BA1, pDisplaySaveRestore->tDISPC_VID1.BA1 );

  08a58	e59d3000	 ldr         r3, [sp]
  08a5c	e28330c0	 add         r3, r3, #0xC0
  08a60	e5932000	 ldr         r2, [r3]
  08a64	e59d302c	 ldr         r3, [sp, #0x2C]
  08a68	e2833008	 add         r3, r3, #8
  08a6c	e5933000	 ldr         r3, [r3]
  08a70	e28330c0	 add         r3, r3, #0xC0
  08a74	e5832000	 str         r2, [r3]

; 3583 :             OUTREG32( &m_pDispRegs->tDISPC_VID1.POSITION, pDisplaySaveRestore->tDISPC_VID1.POSITION );

  08a78	e59d3000	 ldr         r3, [sp]
  08a7c	e28330c4	 add         r3, r3, #0xC4
  08a80	e5932000	 ldr         r2, [r3]
  08a84	e59d302c	 ldr         r3, [sp, #0x2C]
  08a88	e2833008	 add         r3, r3, #8
  08a8c	e5933000	 ldr         r3, [r3]
  08a90	e28330c4	 add         r3, r3, #0xC4
  08a94	e5832000	 str         r2, [r3]

; 3584 :             OUTREG32( &m_pDispRegs->tDISPC_VID1.SIZE, pDisplaySaveRestore->tDISPC_VID1.SIZE );

  08a98	e59d3000	 ldr         r3, [sp]
  08a9c	e28330c8	 add         r3, r3, #0xC8
  08aa0	e5932000	 ldr         r2, [r3]
  08aa4	e59d302c	 ldr         r3, [sp, #0x2C]
  08aa8	e2833008	 add         r3, r3, #8
  08aac	e5933000	 ldr         r3, [r3]
  08ab0	e28330c8	 add         r3, r3, #0xC8
  08ab4	e5832000	 str         r2, [r3]

; 3585 :             OUTREG32( &m_pDispRegs->tDISPC_VID1.ATTRIBUTES, pDisplaySaveRestore->tDISPC_VID1.ATTRIBUTES );

  08ab8	e59d3000	 ldr         r3, [sp]
  08abc	e28330cc	 add         r3, r3, #0xCC
  08ac0	e5932000	 ldr         r2, [r3]
  08ac4	e59d302c	 ldr         r3, [sp, #0x2C]
  08ac8	e2833008	 add         r3, r3, #8
  08acc	e5933000	 ldr         r3, [r3]
  08ad0	e28330cc	 add         r3, r3, #0xCC
  08ad4	e5832000	 str         r2, [r3]

; 3586 :             OUTREG32( &m_pDispRegs->tDISPC_VID1.FIFO_THRESHOLD, pDisplaySaveRestore->tDISPC_VID1.FIFO_THRESHOLD );

  08ad8	e59d3000	 ldr         r3, [sp]
  08adc	e28330d0	 add         r3, r3, #0xD0
  08ae0	e5932000	 ldr         r2, [r3]
  08ae4	e59d302c	 ldr         r3, [sp, #0x2C]
  08ae8	e2833008	 add         r3, r3, #8
  08aec	e5933000	 ldr         r3, [r3]
  08af0	e28330d0	 add         r3, r3, #0xD0
  08af4	e5832000	 str         r2, [r3]

; 3587 :             OUTREG32( &m_pDispRegs->tDISPC_VID1.ROW_INC, pDisplaySaveRestore->tDISPC_VID1.ROW_INC );

  08af8	e59d3000	 ldr         r3, [sp]
  08afc	e28330d8	 add         r3, r3, #0xD8
  08b00	e5932000	 ldr         r2, [r3]
  08b04	e59d302c	 ldr         r3, [sp, #0x2C]
  08b08	e2833008	 add         r3, r3, #8
  08b0c	e5933000	 ldr         r3, [r3]
  08b10	e28330d8	 add         r3, r3, #0xD8
  08b14	e5832000	 str         r2, [r3]

; 3588 :             OUTREG32( &m_pDispRegs->tDISPC_VID1.PIXEL_INC, pDisplaySaveRestore->tDISPC_VID1.PIXEL_INC );

  08b18	e59d3000	 ldr         r3, [sp]
  08b1c	e28330dc	 add         r3, r3, #0xDC
  08b20	e5932000	 ldr         r2, [r3]
  08b24	e59d302c	 ldr         r3, [sp, #0x2C]
  08b28	e2833008	 add         r3, r3, #8
  08b2c	e5933000	 ldr         r3, [r3]
  08b30	e28330dc	 add         r3, r3, #0xDC
  08b34	e5832000	 str         r2, [r3]

; 3589 :             OUTREG32( &m_pDispRegs->tDISPC_VID1.FIR, pDisplaySaveRestore->tDISPC_VID1.FIR );

  08b38	e59d3000	 ldr         r3, [sp]
  08b3c	e28330e0	 add         r3, r3, #0xE0
  08b40	e5932000	 ldr         r2, [r3]
  08b44	e59d302c	 ldr         r3, [sp, #0x2C]
  08b48	e2833008	 add         r3, r3, #8
  08b4c	e5933000	 ldr         r3, [r3]
  08b50	e28330e0	 add         r3, r3, #0xE0
  08b54	e5832000	 str         r2, [r3]

; 3590 :             OUTREG32( &m_pDispRegs->tDISPC_VID1.PICTURE_SIZE, pDisplaySaveRestore->tDISPC_VID1.PICTURE_SIZE );

  08b58	e59d3000	 ldr         r3, [sp]
  08b5c	e28330e4	 add         r3, r3, #0xE4
  08b60	e5932000	 ldr         r2, [r3]
  08b64	e59d302c	 ldr         r3, [sp, #0x2C]
  08b68	e2833008	 add         r3, r3, #8
  08b6c	e5933000	 ldr         r3, [r3]
  08b70	e28330e4	 add         r3, r3, #0xE4
  08b74	e5832000	 str         r2, [r3]

; 3591 :             OUTREG32( &m_pDispRegs->tDISPC_VID1.ACCU0, pDisplaySaveRestore->tDISPC_VID1.ACCU0 );

  08b78	e59d3000	 ldr         r3, [sp]
  08b7c	e28330e8	 add         r3, r3, #0xE8
  08b80	e5932000	 ldr         r2, [r3]
  08b84	e59d302c	 ldr         r3, [sp, #0x2C]
  08b88	e2833008	 add         r3, r3, #8
  08b8c	e5933000	 ldr         r3, [r3]
  08b90	e28330e8	 add         r3, r3, #0xE8
  08b94	e5832000	 str         r2, [r3]

; 3592 :             OUTREG32( &m_pDispRegs->tDISPC_VID1.ACCU1, pDisplaySaveRestore->tDISPC_VID1.ACCU1 );

  08b98	e59d3000	 ldr         r3, [sp]
  08b9c	e28330ec	 add         r3, r3, #0xEC
  08ba0	e5932000	 ldr         r2, [r3]
  08ba4	e59d302c	 ldr         r3, [sp, #0x2C]
  08ba8	e2833008	 add         r3, r3, #8
  08bac	e5933000	 ldr         r3, [r3]
  08bb0	e28330ec	 add         r3, r3, #0xEC
  08bb4	e5832000	 str         r2, [r3]

; 3593 : 
; 3594 :             //  Scaling coefficients
; 3595 :             for( i = 0; i < NUM_SCALING_PHASES; i++ )

  08bb8	e3a03000	 mov         r3, #0
  08bbc	e58d3004	 str         r3, [sp, #4]
  08bc0	ea000002	 b           |$LN10@RestoreReg|
  08bc4		 |$LN9@RestoreReg|
  08bc4	e59d3004	 ldr         r3, [sp, #4]
  08bc8	e2833001	 add         r3, r3, #1
  08bcc	e58d3004	 str         r3, [sp, #4]
  08bd0		 |$LN10@RestoreReg|
  08bd0	e59d3004	 ldr         r3, [sp, #4]
  08bd4	e3530008	 cmp         r3, #8
  08bd8	2a000032	 bcs         |$LN8@RestoreReg|

; 3596 :             {
; 3597 :                 OUTREG32( &m_pDispRegs->tDISPC_VID1.aFIR_COEF[i].ulH, pDisplaySaveRestore->tDISPC_VID1.aFIR_COEF[i].ulH );

  08bdc	e59d3000	 ldr         r3, [sp]
  08be0	e28310f0	 add         r1, r3, #0xF0
  08be4	e59d2004	 ldr         r2, [sp, #4]
  08be8	e3a03008	 mov         r3, #8
  08bec	e0030392	 mul         r3, r2, r3
  08bf0	e0813003	 add         r3, r1, r3
  08bf4	e5930000	 ldr         r0, [r3]
  08bf8	e59d302c	 ldr         r3, [sp, #0x2C]
  08bfc	e2833008	 add         r3, r3, #8
  08c00	e5933000	 ldr         r3, [r3]
  08c04	e28310f0	 add         r1, r3, #0xF0
  08c08	e59d2004	 ldr         r2, [sp, #4]
  08c0c	e3a03008	 mov         r3, #8
  08c10	e0030392	 mul         r3, r2, r3
  08c14	e0813003	 add         r3, r1, r3
  08c18	e5830000	 str         r0, [r3]

; 3598 :                 OUTREG32( &m_pDispRegs->tDISPC_VID1.aFIR_COEF[i].ulHV, pDisplaySaveRestore->tDISPC_VID1.aFIR_COEF[i].ulHV );

  08c1c	e59d3000	 ldr         r3, [sp]
  08c20	e28310f0	 add         r1, r3, #0xF0
  08c24	e59d2004	 ldr         r2, [sp, #4]
  08c28	e3a03008	 mov         r3, #8
  08c2c	e0030392	 mul         r3, r2, r3
  08c30	e0813003	 add         r3, r1, r3
  08c34	e2833004	 add         r3, r3, #4
  08c38	e5930000	 ldr         r0, [r3]
  08c3c	e59d302c	 ldr         r3, [sp, #0x2C]
  08c40	e2833008	 add         r3, r3, #8
  08c44	e5933000	 ldr         r3, [r3]
  08c48	e28310f0	 add         r1, r3, #0xF0
  08c4c	e59d2004	 ldr         r2, [sp, #4]
  08c50	e3a03008	 mov         r3, #8
  08c54	e0030392	 mul         r3, r2, r3
  08c58	e0813003	 add         r3, r1, r3
  08c5c	e2833004	 add         r3, r3, #4
  08c60	e5830000	 str         r0, [r3]

; 3599 :                 OUTREG32( &m_pDispRegs->DISPC_VID1_FIR_COEF_V[i], pDisplaySaveRestore->DISPC_VID1_FIR_COEF_V[i] );

  08c64	e59d3000	 ldr         r3, [sp]
  08c68	e2831e1e	 add         r1, r3, #0x1E, 28
  08c6c	e59d2004	 ldr         r2, [sp, #4]
  08c70	e3a03004	 mov         r3, #4
  08c74	e0030392	 mul         r3, r2, r3
  08c78	e0813003	 add         r3, r1, r3
  08c7c	e5930000	 ldr         r0, [r3]
  08c80	e59d302c	 ldr         r3, [sp, #0x2C]
  08c84	e2833008	 add         r3, r3, #8
  08c88	e5933000	 ldr         r3, [r3]
  08c8c	e2831e1e	 add         r1, r3, #0x1E, 28
  08c90	e59d2004	 ldr         r2, [sp, #4]
  08c94	e3a03004	 mov         r3, #4
  08c98	e0030392	 mul         r3, r2, r3
  08c9c	e0813003	 add         r3, r1, r3
  08ca0	e5830000	 str         r0, [r3]

; 3600 :             }

  08ca4	eaffffc6	 b           |$LN9@RestoreReg|
  08ca8		 |$LN8@RestoreReg|

; 3601 : 
; 3602 :             //  Color conversion coefficients
; 3603 :             OUTREG32( &m_pDispRegs->tDISPC_VID1.CONV_COEF0, m_pColorSpaceCoeffs[0] );

  08ca8	e59d302c	 ldr         r3, [sp, #0x2C]
  08cac	e2833e4a	 add         r3, r3, #0x4A, 28
  08cb0	e5931000	 ldr         r1, [r3]
  08cb4	e59d302c	 ldr         r3, [sp, #0x2C]
  08cb8	e2833008	 add         r3, r3, #8
  08cbc	e5933000	 ldr         r3, [r3]
  08cc0	e2832e13	 add         r2, r3, #0x13, 28
  08cc4	e5913000	 ldr         r3, [r1]
  08cc8	e5823000	 str         r3, [r2]

; 3604 :             OUTREG32( &m_pDispRegs->tDISPC_VID1.CONV_COEF1, m_pColorSpaceCoeffs[1] );

  08ccc	e59d302c	 ldr         r3, [sp, #0x2C]
  08cd0	e2833e4a	 add         r3, r3, #0x4A, 28
  08cd4	e5933000	 ldr         r3, [r3]
  08cd8	e2831004	 add         r1, r3, #4
  08cdc	e59d302c	 ldr         r3, [sp, #0x2C]
  08ce0	e2833008	 add         r3, r3, #8
  08ce4	e5933000	 ldr         r3, [r3]
  08ce8	e2832f4d	 add         r2, r3, #0x4D, 30
  08cec	e5913000	 ldr         r3, [r1]
  08cf0	e5823000	 str         r3, [r2]

; 3605 :             OUTREG32( &m_pDispRegs->tDISPC_VID1.CONV_COEF2, m_pColorSpaceCoeffs[2] );

  08cf4	e59d302c	 ldr         r3, [sp, #0x2C]
  08cf8	e2833e4a	 add         r3, r3, #0x4A, 28
  08cfc	e5933000	 ldr         r3, [r3]
  08d00	e2831008	 add         r1, r3, #8
  08d04	e59d302c	 ldr         r3, [sp, #0x2C]
  08d08	e2833008	 add         r3, r3, #8
  08d0c	e5933000	 ldr         r3, [r3]
  08d10	e2832f4e	 add         r2, r3, #0x4E, 30
  08d14	e5913000	 ldr         r3, [r1]
  08d18	e5823000	 str         r3, [r2]

; 3606 :             OUTREG32( &m_pDispRegs->tDISPC_VID1.CONV_COEF3, m_pColorSpaceCoeffs[3] );

  08d1c	e59d302c	 ldr         r3, [sp, #0x2C]
  08d20	e2833e4a	 add         r3, r3, #0x4A, 28
  08d24	e5933000	 ldr         r3, [r3]
  08d28	e283100c	 add         r1, r3, #0xC
  08d2c	e59d302c	 ldr         r3, [sp, #0x2C]
  08d30	e2833008	 add         r3, r3, #8
  08d34	e5933000	 ldr         r3, [r3]
  08d38	e2832f4f	 add         r2, r3, #0x4F, 30
  08d3c	e5913000	 ldr         r3, [r1]
  08d40	e5823000	 str         r3, [r2]

; 3607 :             OUTREG32( &m_pDispRegs->tDISPC_VID1.CONV_COEF4, m_pColorSpaceCoeffs[4] );

  08d44	e59d302c	 ldr         r3, [sp, #0x2C]
  08d48	e2833e4a	 add         r3, r3, #0x4A, 28
  08d4c	e5933000	 ldr         r3, [r3]
  08d50	e2831010	 add         r1, r3, #0x10
  08d54	e59d302c	 ldr         r3, [sp, #0x2C]
  08d58	e2833008	 add         r3, r3, #8
  08d5c	e5933000	 ldr         r3, [r3]
  08d60	e2832d05	 add         r2, r3, #5, 26
  08d64	e5913000	 ldr         r3, [r1]
  08d68	e5823000	 str         r3, [r2]
  08d6c		 |$LN11@RestoreReg|

; 3608 :         }
; 3609 : 
; 3610 :         //  Restore VID2 plane registers if enabled
; 3611 :         if( g_rgPipelineMapping[OMAP_DSS_PIPELINE_VIDEO2].bEnabled )

  08d6c	e59f3a28	 ldr         r3, [pc, #0xA28]
  08d70	e5933040	 ldr         r3, [r3, #0x40]
  08d74	e3530000	 cmp         r3, #0
  08d78	0a0000cc	 beq         |$LN7@RestoreReg|

; 3612 :         {
; 3613 :             OUTREG32( &m_pDispRegs->tDISPC_VID2.BA0, pDisplaySaveRestore->tDISPC_VID2.BA0 );

  08d7c	e59d3000	 ldr         r3, [sp]
  08d80	e2833f53	 add         r3, r3, #0x53, 30
  08d84	e5932000	 ldr         r2, [r3]
  08d88	e59d302c	 ldr         r3, [sp, #0x2C]
  08d8c	e2833008	 add         r3, r3, #8
  08d90	e5933000	 ldr         r3, [r3]
  08d94	e2833f53	 add         r3, r3, #0x53, 30
  08d98	e5832000	 str         r2, [r3]

; 3614 :             OUTREG32( &m_pDispRegs->tDISPC_VID2.BA1, pDisplaySaveRestore->tDISPC_VID2.BA1 );

  08d9c	e59d3000	 ldr         r3, [sp]
  08da0	e2833e15	 add         r3, r3, #0x15, 28
  08da4	e5932000	 ldr         r2, [r3]
  08da8	e59d302c	 ldr         r3, [sp, #0x2C]
  08dac	e2833008	 add         r3, r3, #8
  08db0	e5933000	 ldr         r3, [r3]
  08db4	e2833e15	 add         r3, r3, #0x15, 28
  08db8	e5832000	 str         r2, [r3]

; 3615 :             OUTREG32( &m_pDispRegs->tDISPC_VID2.POSITION, pDisplaySaveRestore->tDISPC_VID2.POSITION );

  08dbc	e59d3000	 ldr         r3, [sp]
  08dc0	e2833f55	 add         r3, r3, #0x55, 30
  08dc4	e5932000	 ldr         r2, [r3]
  08dc8	e59d302c	 ldr         r3, [sp, #0x2C]
  08dcc	e2833008	 add         r3, r3, #8
  08dd0	e5933000	 ldr         r3, [r3]
  08dd4	e2833f55	 add         r3, r3, #0x55, 30
  08dd8	e5832000	 str         r2, [r3]

; 3616 :             OUTREG32( &m_pDispRegs->tDISPC_VID2.SIZE, pDisplaySaveRestore->tDISPC_VID2.SIZE );

  08ddc	e59d3000	 ldr         r3, [sp]
  08de0	e2833f56	 add         r3, r3, #0x56, 30
  08de4	e5932000	 ldr         r2, [r3]
  08de8	e59d302c	 ldr         r3, [sp, #0x2C]
  08dec	e2833008	 add         r3, r3, #8
  08df0	e5933000	 ldr         r3, [r3]
  08df4	e2833f56	 add         r3, r3, #0x56, 30
  08df8	e5832000	 str         r2, [r3]

; 3617 :             OUTREG32( &m_pDispRegs->tDISPC_VID2.ATTRIBUTES, pDisplaySaveRestore->tDISPC_VID2.ATTRIBUTES );

  08dfc	e59d3000	 ldr         r3, [sp]
  08e00	e2833f57	 add         r3, r3, #0x57, 30
  08e04	e5932000	 ldr         r2, [r3]
  08e08	e59d302c	 ldr         r3, [sp, #0x2C]
  08e0c	e2833008	 add         r3, r3, #8
  08e10	e5933000	 ldr         r3, [r3]
  08e14	e2833f57	 add         r3, r3, #0x57, 30
  08e18	e5832000	 str         r2, [r3]

; 3618 :             OUTREG32( &m_pDispRegs->tDISPC_VID2.FIFO_THRESHOLD, pDisplaySaveRestore->tDISPC_VID2.FIFO_THRESHOLD );

  08e1c	e59d3000	 ldr         r3, [sp]
  08e20	e2833e16	 add         r3, r3, #0x16, 28
  08e24	e5932000	 ldr         r2, [r3]
  08e28	e59d302c	 ldr         r3, [sp, #0x2C]
  08e2c	e2833008	 add         r3, r3, #8
  08e30	e5933000	 ldr         r3, [r3]
  08e34	e2833e16	 add         r3, r3, #0x16, 28
  08e38	e5832000	 str         r2, [r3]

; 3619 :             OUTREG32( &m_pDispRegs->tDISPC_VID2.ROW_INC, pDisplaySaveRestore->tDISPC_VID2.ROW_INC );

  08e3c	e59d3000	 ldr         r3, [sp]
  08e40	e2833f5a	 add         r3, r3, #0x5A, 30
  08e44	e5932000	 ldr         r2, [r3]
  08e48	e59d302c	 ldr         r3, [sp, #0x2C]
  08e4c	e2833008	 add         r3, r3, #8
  08e50	e5933000	 ldr         r3, [r3]
  08e54	e2833f5a	 add         r3, r3, #0x5A, 30
  08e58	e5832000	 str         r2, [r3]

; 3620 :             OUTREG32( &m_pDispRegs->tDISPC_VID2.PIXEL_INC, pDisplaySaveRestore->tDISPC_VID2.PIXEL_INC );

  08e5c	e59d3000	 ldr         r3, [sp]
  08e60	e2833f5b	 add         r3, r3, #0x5B, 30
  08e64	e5932000	 ldr         r2, [r3]
  08e68	e59d302c	 ldr         r3, [sp, #0x2C]
  08e6c	e2833008	 add         r3, r3, #8
  08e70	e5933000	 ldr         r3, [r3]
  08e74	e2833f5b	 add         r3, r3, #0x5B, 30
  08e78	e5832000	 str         r2, [r3]

; 3621 :             OUTREG32( &m_pDispRegs->tDISPC_VID2.FIR, pDisplaySaveRestore->tDISPC_VID2.FIR );

  08e7c	e59d3000	 ldr         r3, [sp]
  08e80	e2833e17	 add         r3, r3, #0x17, 28
  08e84	e5932000	 ldr         r2, [r3]
  08e88	e59d302c	 ldr         r3, [sp, #0x2C]
  08e8c	e2833008	 add         r3, r3, #8
  08e90	e5933000	 ldr         r3, [r3]
  08e94	e2833e17	 add         r3, r3, #0x17, 28
  08e98	e5832000	 str         r2, [r3]

; 3622 :             OUTREG32( &m_pDispRegs->tDISPC_VID2.PICTURE_SIZE, pDisplaySaveRestore->tDISPC_VID2.PICTURE_SIZE );

  08e9c	e59d3000	 ldr         r3, [sp]
  08ea0	e2833f5d	 add         r3, r3, #0x5D, 30
  08ea4	e5932000	 ldr         r2, [r3]
  08ea8	e59d302c	 ldr         r3, [sp, #0x2C]
  08eac	e2833008	 add         r3, r3, #8
  08eb0	e5933000	 ldr         r3, [r3]
  08eb4	e2833f5d	 add         r3, r3, #0x5D, 30
  08eb8	e5832000	 str         r2, [r3]

; 3623 :             OUTREG32( &m_pDispRegs->tDISPC_VID2.ACCU0, pDisplaySaveRestore->tDISPC_VID2.ACCU0 );

  08ebc	e59d3000	 ldr         r3, [sp]
  08ec0	e2833f5e	 add         r3, r3, #0x5E, 30
  08ec4	e5932000	 ldr         r2, [r3]
  08ec8	e59d302c	 ldr         r3, [sp, #0x2C]
  08ecc	e2833008	 add         r3, r3, #8
  08ed0	e5933000	 ldr         r3, [r3]
  08ed4	e2833f5e	 add         r3, r3, #0x5E, 30
  08ed8	e5832000	 str         r2, [r3]

; 3624 :             OUTREG32( &m_pDispRegs->tDISPC_VID2.ACCU1, pDisplaySaveRestore->tDISPC_VID2.ACCU1 );

  08edc	e59d3000	 ldr         r3, [sp]
  08ee0	e2833f5f	 add         r3, r3, #0x5F, 30
  08ee4	e5932000	 ldr         r2, [r3]
  08ee8	e59d302c	 ldr         r3, [sp, #0x2C]
  08eec	e2833008	 add         r3, r3, #8
  08ef0	e5933000	 ldr         r3, [r3]
  08ef4	e2833f5f	 add         r3, r3, #0x5F, 30
  08ef8	e5832000	 str         r2, [r3]

; 3625 : 
; 3626 :             //  Scaling coefficients
; 3627 :             for( i = 0; i < NUM_SCALING_PHASES; i++ )

  08efc	e3a03000	 mov         r3, #0
  08f00	e58d3004	 str         r3, [sp, #4]
  08f04	ea000002	 b           |$LN6@RestoreReg|
  08f08		 |$LN5@RestoreReg|
  08f08	e59d3004	 ldr         r3, [sp, #4]
  08f0c	e2833001	 add         r3, r3, #1
  08f10	e58d3004	 str         r3, [sp, #4]
  08f14		 |$LN6@RestoreReg|
  08f14	e59d3004	 ldr         r3, [sp, #4]
  08f18	e3530008	 cmp         r3, #8
  08f1c	2a000032	 bcs         |$LN4@RestoreReg|

; 3628 :             {
; 3629 :                 OUTREG32( &m_pDispRegs->tDISPC_VID2.aFIR_COEF[i].ulH, pDisplaySaveRestore->tDISPC_VID2.aFIR_COEF[i].ulH );

  08f20	e59d3000	 ldr         r3, [sp]
  08f24	e2831d06	 add         r1, r3, #6, 26
  08f28	e59d2004	 ldr         r2, [sp, #4]
  08f2c	e3a03008	 mov         r3, #8
  08f30	e0030392	 mul         r3, r2, r3
  08f34	e0813003	 add         r3, r1, r3
  08f38	e5930000	 ldr         r0, [r3]
  08f3c	e59d302c	 ldr         r3, [sp, #0x2C]
  08f40	e2833008	 add         r3, r3, #8
  08f44	e5933000	 ldr         r3, [r3]
  08f48	e2831d06	 add         r1, r3, #6, 26
  08f4c	e59d2004	 ldr         r2, [sp, #4]
  08f50	e3a03008	 mov         r3, #8
  08f54	e0030392	 mul         r3, r2, r3
  08f58	e0813003	 add         r3, r1, r3
  08f5c	e5830000	 str         r0, [r3]

; 3630 :                 OUTREG32( &m_pDispRegs->tDISPC_VID2.aFIR_COEF[i].ulHV, pDisplaySaveRestore->tDISPC_VID2.aFIR_COEF[i].ulHV );

  08f60	e59d3000	 ldr         r3, [sp]
  08f64	e2831d06	 add         r1, r3, #6, 26
  08f68	e59d2004	 ldr         r2, [sp, #4]
  08f6c	e3a03008	 mov         r3, #8
  08f70	e0030392	 mul         r3, r2, r3
  08f74	e0813003	 add         r3, r1, r3
  08f78	e2833004	 add         r3, r3, #4
  08f7c	e5930000	 ldr         r0, [r3]
  08f80	e59d302c	 ldr         r3, [sp, #0x2C]
  08f84	e2833008	 add         r3, r3, #8
  08f88	e5933000	 ldr         r3, [r3]
  08f8c	e2831d06	 add         r1, r3, #6, 26
  08f90	e59d2004	 ldr         r2, [sp, #4]
  08f94	e3a03008	 mov         r3, #8
  08f98	e0030392	 mul         r3, r2, r3
  08f9c	e0813003	 add         r3, r1, r3
  08fa0	e2833004	 add         r3, r3, #4
  08fa4	e5830000	 str         r0, [r3]

; 3631 :                 OUTREG32( &m_pDispRegs->DISPC_VID2_FIR_COEF_V[i], pDisplaySaveRestore->DISPC_VID2_FIR_COEF_V[i] );

  08fa8	e59d3000	 ldr         r3, [sp]
  08fac	e2831c02	 add         r1, r3, #2, 24
  08fb0	e59d2004	 ldr         r2, [sp, #4]
  08fb4	e3a03004	 mov         r3, #4
  08fb8	e0030392	 mul         r3, r2, r3
  08fbc	e0813003	 add         r3, r1, r3
  08fc0	e5930000	 ldr         r0, [r3]
  08fc4	e59d302c	 ldr         r3, [sp, #0x2C]
  08fc8	e2833008	 add         r3, r3, #8
  08fcc	e5933000	 ldr         r3, [r3]
  08fd0	e2831c02	 add         r1, r3, #2, 24
  08fd4	e59d2004	 ldr         r2, [sp, #4]
  08fd8	e3a03004	 mov         r3, #4
  08fdc	e0030392	 mul         r3, r2, r3
  08fe0	e0813003	 add         r3, r1, r3
  08fe4	e5830000	 str         r0, [r3]

; 3632 :             }

  08fe8	eaffffc6	 b           |$LN5@RestoreReg|
  08fec		 |$LN4@RestoreReg|

; 3633 : 
; 3634 :             //  Color conversion coefficients
; 3635 :             OUTREG32( &m_pDispRegs->tDISPC_VID2.CONV_COEF0, m_pColorSpaceCoeffs[0] );

  08fec	e59d302c	 ldr         r3, [sp, #0x2C]
  08ff0	e2833e4a	 add         r3, r3, #0x4A, 28
  08ff4	e5931000	 ldr         r1, [r3]
  08ff8	e59d302c	 ldr         r3, [sp, #0x2C]
  08ffc	e2833008	 add         r3, r3, #8
  09000	e5933000	 ldr         r3, [r3]
  09004	e2832d07	 add         r2, r3, #7, 26
  09008	e5913000	 ldr         r3, [r1]
  0900c	e5823000	 str         r3, [r2]

; 3636 :             OUTREG32( &m_pDispRegs->tDISPC_VID2.CONV_COEF1, m_pColorSpaceCoeffs[1] );

  09010	e59d302c	 ldr         r3, [sp, #0x2C]
  09014	e2833e4a	 add         r3, r3, #0x4A, 28
  09018	e5933000	 ldr         r3, [r3]
  0901c	e2831004	 add         r1, r3, #4
  09020	e59d302c	 ldr         r3, [sp, #0x2C]
  09024	e2833008	 add         r3, r3, #8
  09028	e5933000	 ldr         r3, [r3]
  0902c	e2832f71	 add         r2, r3, #0x71, 30
  09030	e5913000	 ldr         r3, [r1]
  09034	e5823000	 str         r3, [r2]

; 3637 :             OUTREG32( &m_pDispRegs->tDISPC_VID2.CONV_COEF2, m_pColorSpaceCoeffs[2] );

  09038	e59d302c	 ldr         r3, [sp, #0x2C]
  0903c	e2833e4a	 add         r3, r3, #0x4A, 28
  09040	e5933000	 ldr         r3, [r3]
  09044	e2831008	 add         r1, r3, #8
  09048	e59d302c	 ldr         r3, [sp, #0x2C]
  0904c	e2833008	 add         r3, r3, #8
  09050	e5933000	 ldr         r3, [r3]
  09054	e2832f72	 add         r2, r3, #0x72, 30
  09058	e5913000	 ldr         r3, [r1]
  0905c	e5823000	 str         r3, [r2]

; 3638 :             OUTREG32( &m_pDispRegs->tDISPC_VID2.CONV_COEF3, m_pColorSpaceCoeffs[3] );

  09060	e59d302c	 ldr         r3, [sp, #0x2C]
  09064	e2833e4a	 add         r3, r3, #0x4A, 28
  09068	e5933000	 ldr         r3, [r3]
  0906c	e283100c	 add         r1, r3, #0xC
  09070	e59d302c	 ldr         r3, [sp, #0x2C]
  09074	e2833008	 add         r3, r3, #8
  09078	e5933000	 ldr         r3, [r3]
  0907c	e2832f73	 add         r2, r3, #0x73, 30
  09080	e5913000	 ldr         r3, [r1]
  09084	e5823000	 str         r3, [r2]

; 3639 :             OUTREG32( &m_pDispRegs->tDISPC_VID2.CONV_COEF4, m_pColorSpaceCoeffs[4] );

  09088	e59d302c	 ldr         r3, [sp, #0x2C]
  0908c	e2833e4a	 add         r3, r3, #0x4A, 28
  09090	e5933000	 ldr         r3, [r3]
  09094	e2831010	 add         r1, r3, #0x10
  09098	e59d302c	 ldr         r3, [sp, #0x2C]
  0909c	e2833008	 add         r3, r3, #8
  090a0	e5933000	 ldr         r3, [r3]
  090a4	e2832e1d	 add         r2, r3, #0x1D, 28
  090a8	e5913000	 ldr         r3, [r1]
  090ac	e5823000	 str         r3, [r2]
  090b0		 |$LN7@RestoreReg|
  090b0		 |$LN15@RestoreReg|

; 3640 :         }
; 3641 : 
; 3642 :     }
; 3643 : 
; 3644 :     //  Restore the TV out registers
; 3645 :     //  TV regs are not saved off b/c most are set to defaults
; 3646 :     if( eDestination == OMAP_DSS_DESTINATION_TVOUT )

  090b0	e59d3030	 ldr         r3, [sp, #0x30]
  090b4	e3530001	 cmp         r3, #1
  090b8	1a0001ab	 bne         |$LN3@RestoreReg|

; 3647 :     {
; 3648 :         DWORD*  pVencPtr = NULL;

  090bc	e3a03000	 mov         r3, #0
  090c0	e58d300c	 str         r3, [sp, #0xC]

; 3649 : 
; 3650 :         //  Initialize the TV by calling PDD
; 3651 :         bResult = LcdPdd_TV_Initialize(
; 3652 :                         m_pDSSRegs,
; 3653 :                         m_pDispRegs,
; 3654 :                         NULL,
; 3655 :                         m_pVencRegs );

  090c4	e59d302c	 ldr         r3, [sp, #0x2C]
  090c8	e283300c	 add         r3, r3, #0xC
  090cc	e5933000	 ldr         r3, [r3]
  090d0	e3a02000	 mov         r2, #0
  090d4	e59d102c	 ldr         r1, [sp, #0x2C]
  090d8	e2811008	 add         r1, r1, #8
  090dc	e5911000	 ldr         r1, [r1]
  090e0	e59d002c	 ldr         r0, [sp, #0x2C]
  090e4	e2800004	 add         r0, r0, #4
  090e8	e5900000	 ldr         r0, [r0]
  090ec	eb000000	 bl          LcdPdd_TV_Initialize
  090f0	e58d0018	 str         r0, [sp, #0x18]
  090f4	e59d3018	 ldr         r3, [sp, #0x18]
  090f8	e58d3008	 str         r3, [sp, #8]

; 3656 : 
; 3657 :         //  Get TV parameters
; 3658 :         LcdPdd_TV_GetMode(
; 3659 :                         &m_dwTVWidth,
; 3660 :                         &m_dwTVHeight,
; 3661 :                         &m_dwTVMode );

  090fc	e59d302c	 ldr         r3, [sp, #0x2C]
  09100	e2833b01	 add         r3, r3, #1, 22
  09104	e28320c4	 add         r2, r3, #0xC4
  09108	e59d302c	 ldr         r3, [sp, #0x2C]
  0910c	e2831d13	 add         r1, r3, #0x13, 26
  09110	e59d302c	 ldr         r3, [sp, #0x2C]
  09114	e2833b01	 add         r3, r3, #1, 22
  09118	e28300bc	 add         r0, r3, #0xBC
  0911c	eb000000	 bl          LcdPdd_TV_GetMode

; 3662 : 
; 3663 : 
; 3664 :         //  Initialize Video Encoder registers for NTSC or PAL based on size of mode
; 3665 :         //  Default to NTSC
; 3666 :         if( m_dwTVWidth == PAL_WIDTH && m_dwTVHeight == PAL_HEIGHT )

  09120	e59d302c	 ldr         r3, [sp, #0x2C]
  09124	e2833b01	 add         r3, r3, #1, 22
  09128	e28330bc	 add         r3, r3, #0xBC
  0912c	e5933000	 ldr         r3, [r3]
  09130	e3530e2d	 cmp         r3, #0x2D, 28
  09134	1a00001b	 bne         |$LN2@RestoreReg|
  09138	e59d302c	 ldr         r3, [sp, #0x2C]
  0913c	e2833d13	 add         r3, r3, #0x13, 26
  09140	e5933000	 ldr         r3, [r3]
  09144	e3530d09	 cmp         r3, #9, 26
  09148	1a000016	 bne         |$LN2@RestoreReg|

; 3667 :         {
; 3668 :             //  Set for PAL
; 3669 :             pVencPtr = g_dwVencValues_PAL;

  0914c	e59f3644	 ldr         r3, [pc, #0x644]
  09150	e58d300c	 str         r3, [sp, #0xC]

; 3670 :             m_dwTVMode = (m_dwTVMode == 0) ?  g_dwVencValues_PAL[VENC_OUTPUT_CONTROL] : m_dwTVMode;

  09154	e59d302c	 ldr         r3, [sp, #0x2C]
  09158	e2833b01	 add         r3, r3, #1, 22
  0915c	e28330c4	 add         r3, r3, #0xC4
  09160	e5933000	 ldr         r3, [r3]
  09164	e3530000	 cmp         r3, #0
  09168	1a000003	 bne         |$LN24@RestoreReg|
  0916c	e59f3624	 ldr         r3, [pc, #0x624]
  09170	e593309c	 ldr         r3, [r3, #0x9C]
  09174	e58d301c	 str         r3, [sp, #0x1C]
  09178	ea000004	 b           |$LN25@RestoreReg|
  0917c		 |$LN24@RestoreReg|
  0917c	e59d302c	 ldr         r3, [sp, #0x2C]
  09180	e2833b01	 add         r3, r3, #1, 22
  09184	e28330c4	 add         r3, r3, #0xC4
  09188	e5933000	 ldr         r3, [r3]
  0918c	e58d301c	 str         r3, [sp, #0x1C]
  09190		 |$LN25@RestoreReg|
  09190	e59d302c	 ldr         r3, [sp, #0x2C]
  09194	e2833b01	 add         r3, r3, #1, 22
  09198	e28320c4	 add         r2, r3, #0xC4
  0919c	e59d301c	 ldr         r3, [sp, #0x1C]
  091a0	e5823000	 str         r3, [r2]

; 3671 :         }
; 3672 :         else

  091a4	ea000015	 b           |$LN1@RestoreReg|
  091a8		 |$LN2@RestoreReg|

; 3673 :         {
; 3674 :             //  Set for NTSC
; 3675 :             pVencPtr = g_dwVencValues_NTSC;

  091a8	e59f35e4	 ldr         r3, [pc, #0x5E4]
  091ac	e58d300c	 str         r3, [sp, #0xC]

; 3676 :             m_dwTVMode = (m_dwTVMode == 0) ?  g_dwVencValues_NTSC[VENC_OUTPUT_CONTROL] : m_dwTVMode;

  091b0	e59d302c	 ldr         r3, [sp, #0x2C]
  091b4	e2833b01	 add         r3, r3, #1, 22
  091b8	e28330c4	 add         r3, r3, #0xC4
  091bc	e5933000	 ldr         r3, [r3]
  091c0	e3530000	 cmp         r3, #0
  091c4	1a000003	 bne         |$LN26@RestoreReg|
  091c8	e59f35c4	 ldr         r3, [pc, #0x5C4]
  091cc	e593309c	 ldr         r3, [r3, #0x9C]
  091d0	e58d3020	 str         r3, [sp, #0x20]
  091d4	ea000004	 b           |$LN27@RestoreReg|
  091d8		 |$LN26@RestoreReg|
  091d8	e59d302c	 ldr         r3, [sp, #0x2C]
  091dc	e2833b01	 add         r3, r3, #1, 22
  091e0	e28330c4	 add         r3, r3, #0xC4
  091e4	e5933000	 ldr         r3, [r3]
  091e8	e58d3020	 str         r3, [sp, #0x20]
  091ec		 |$LN27@RestoreReg|
  091ec	e59d302c	 ldr         r3, [sp, #0x2C]
  091f0	e2833b01	 add         r3, r3, #1, 22
  091f4	e28320c4	 add         r2, r3, #0xC4
  091f8	e59d3020	 ldr         r3, [sp, #0x20]
  091fc	e5823000	 str         r3, [r2]
  09200		 |$LN1@RestoreReg|

; 3677 :         }
; 3678 : 
; 3679 :         OUTREG32( &m_pVencRegs->VENC_F_CONTROL, pVencPtr[VENC_F_CONTROL] );

  09200	e59d302c	 ldr         r3, [sp, #0x2C]
  09204	e283300c	 add         r3, r3, #0xC
  09208	e5933000	 ldr         r3, [r3]
  0920c	e2832008	 add         r2, r3, #8
  09210	e59d300c	 ldr         r3, [sp, #0xC]
  09214	e5933000	 ldr         r3, [r3]
  09218	e5823000	 str         r3, [r2]

; 3680 :         OUTREG32( &m_pVencRegs->VENC_SYNC_CTRL, (pVencPtr[VENC_SYNC_CTRL] | 0x00000040) );     

  0921c	e59d300c	 ldr         r3, [sp, #0xC]
  09220	e2833008	 add         r3, r3, #8
  09224	e5933000	 ldr         r3, [r3]
  09228	e3832040	 orr         r2, r3, #0x40
  0922c	e59d302c	 ldr         r3, [sp, #0x2C]
  09230	e283300c	 add         r3, r3, #0xC
  09234	e5933000	 ldr         r3, [r3]
  09238	e2833014	 add         r3, r3, #0x14
  0923c	e5832000	 str         r2, [r3]

; 3681 :         //  Initialize encoder
; 3682 :         OUTREG32( &m_pVencRegs->VENC_VIDOUT_CTRL, pVencPtr[VENC_VIDOUT_CTRL] );

  09240	e59d300c	 ldr         r3, [sp, #0xC]
  09244	e2831004	 add         r1, r3, #4
  09248	e59d302c	 ldr         r3, [sp, #0x2C]
  0924c	e283300c	 add         r3, r3, #0xC
  09250	e5933000	 ldr         r3, [r3]
  09254	e2832010	 add         r2, r3, #0x10
  09258	e5913000	 ldr         r3, [r1]
  0925c	e5823000	 str         r3, [r2]

; 3683 :         OUTREG32( &m_pVencRegs->VENC_LLEN, pVencPtr[VENC_LLEN] );

  09260	e59d300c	 ldr         r3, [sp, #0xC]
  09264	e283100c	 add         r1, r3, #0xC
  09268	e59d302c	 ldr         r3, [sp, #0x2C]
  0926c	e283300c	 add         r3, r3, #0xC
  09270	e5933000	 ldr         r3, [r3]
  09274	e283201c	 add         r2, r3, #0x1C
  09278	e5913000	 ldr         r3, [r1]
  0927c	e5823000	 str         r3, [r2]

; 3684 :         OUTREG32( &m_pVencRegs->VENC_FLENS, pVencPtr[VENC_FLENS] );

  09280	e59d300c	 ldr         r3, [sp, #0xC]
  09284	e2831010	 add         r1, r3, #0x10
  09288	e59d302c	 ldr         r3, [sp, #0x2C]
  0928c	e283300c	 add         r3, r3, #0xC
  09290	e5933000	 ldr         r3, [r3]
  09294	e2832020	 add         r2, r3, #0x20
  09298	e5913000	 ldr         r3, [r1]
  0929c	e5823000	 str         r3, [r2]

; 3685 :         OUTREG32( &m_pVencRegs->VENC_HFLTR_CTRL, pVencPtr[VENC_HFLTR_CTRL] );

  092a0	e59d300c	 ldr         r3, [sp, #0xC]
  092a4	e2831014	 add         r1, r3, #0x14
  092a8	e59d302c	 ldr         r3, [sp, #0x2C]
  092ac	e283300c	 add         r3, r3, #0xC
  092b0	e5933000	 ldr         r3, [r3]
  092b4	e2832024	 add         r2, r3, #0x24
  092b8	e5913000	 ldr         r3, [r1]
  092bc	e5823000	 str         r3, [r2]

; 3686 :         OUTREG32( &m_pVencRegs->VENC_CC_CARR_WSS_CARR, pVencPtr[VENC_CC_CARR_WSS_CARR] );

  092c0	e59d300c	 ldr         r3, [sp, #0xC]
  092c4	e2831018	 add         r1, r3, #0x18
  092c8	e59d302c	 ldr         r3, [sp, #0x2C]
  092cc	e283300c	 add         r3, r3, #0xC
  092d0	e5933000	 ldr         r3, [r3]
  092d4	e2832028	 add         r2, r3, #0x28
  092d8	e5913000	 ldr         r3, [r1]
  092dc	e5823000	 str         r3, [r2]

; 3687 :         OUTREG32( &m_pVencRegs->VENC_C_PHASE, pVencPtr[VENC_C_PHASE] );

  092e0	e59d300c	 ldr         r3, [sp, #0xC]
  092e4	e283101c	 add         r1, r3, #0x1C
  092e8	e59d302c	 ldr         r3, [sp, #0x2C]
  092ec	e283300c	 add         r3, r3, #0xC
  092f0	e5933000	 ldr         r3, [r3]
  092f4	e283202c	 add         r2, r3, #0x2C
  092f8	e5913000	 ldr         r3, [r1]
  092fc	e5823000	 str         r3, [r2]

; 3688 :         OUTREG32( &m_pVencRegs->VENC_GAIN_U, pVencPtr[VENC_GAIN_U] );

  09300	e59d300c	 ldr         r3, [sp, #0xC]
  09304	e2831020	 add         r1, r3, #0x20
  09308	e59d302c	 ldr         r3, [sp, #0x2C]
  0930c	e283300c	 add         r3, r3, #0xC
  09310	e5933000	 ldr         r3, [r3]
  09314	e2832030	 add         r2, r3, #0x30
  09318	e5913000	 ldr         r3, [r1]
  0931c	e5823000	 str         r3, [r2]

; 3689 :         OUTREG32( &m_pVencRegs->VENC_GAIN_V, pVencPtr[VENC_GAIN_V] );

  09320	e59d300c	 ldr         r3, [sp, #0xC]
  09324	e2831024	 add         r1, r3, #0x24
  09328	e59d302c	 ldr         r3, [sp, #0x2C]
  0932c	e283300c	 add         r3, r3, #0xC
  09330	e5933000	 ldr         r3, [r3]
  09334	e2832034	 add         r2, r3, #0x34
  09338	e5913000	 ldr         r3, [r1]
  0933c	e5823000	 str         r3, [r2]

; 3690 :         OUTREG32( &m_pVencRegs->VENC_GAIN_Y, pVencPtr[VENC_GAIN_Y] );

  09340	e59d300c	 ldr         r3, [sp, #0xC]
  09344	e2831028	 add         r1, r3, #0x28
  09348	e59d302c	 ldr         r3, [sp, #0x2C]
  0934c	e283300c	 add         r3, r3, #0xC
  09350	e5933000	 ldr         r3, [r3]
  09354	e2832038	 add         r2, r3, #0x38
  09358	e5913000	 ldr         r3, [r1]
  0935c	e5823000	 str         r3, [r2]

; 3691 :         OUTREG32( &m_pVencRegs->VENC_BLACK_LEVEL, pVencPtr[VENC_BLACK_LEVEL] );

  09360	e59d300c	 ldr         r3, [sp, #0xC]
  09364	e283102c	 add         r1, r3, #0x2C
  09368	e59d302c	 ldr         r3, [sp, #0x2C]
  0936c	e283300c	 add         r3, r3, #0xC
  09370	e5933000	 ldr         r3, [r3]
  09374	e283203c	 add         r2, r3, #0x3C
  09378	e5913000	 ldr         r3, [r1]
  0937c	e5823000	 str         r3, [r2]

; 3692 :         OUTREG32( &m_pVencRegs->VENC_BLANK_LEVEL, pVencPtr[VENC_BLANK_LEVEL] );

  09380	e59d300c	 ldr         r3, [sp, #0xC]
  09384	e2831030	 add         r1, r3, #0x30
  09388	e59d302c	 ldr         r3, [sp, #0x2C]
  0938c	e283300c	 add         r3, r3, #0xC
  09390	e5933000	 ldr         r3, [r3]
  09394	e2832040	 add         r2, r3, #0x40
  09398	e5913000	 ldr         r3, [r1]
  0939c	e5823000	 str         r3, [r2]

; 3693 :         OUTREG32( &m_pVencRegs->VENC_X_COLOR, pVencPtr[VENC_X_COLOR] );

  093a0	e59d300c	 ldr         r3, [sp, #0xC]
  093a4	e2831034	 add         r1, r3, #0x34
  093a8	e59d302c	 ldr         r3, [sp, #0x2C]
  093ac	e283300c	 add         r3, r3, #0xC
  093b0	e5933000	 ldr         r3, [r3]
  093b4	e2832044	 add         r2, r3, #0x44
  093b8	e5913000	 ldr         r3, [r1]
  093bc	e5823000	 str         r3, [r2]

; 3694 :         OUTREG32( &m_pVencRegs->VENC_M_CONTROL, pVencPtr[VENC_M_CONTROL] );

  093c0	e59d300c	 ldr         r3, [sp, #0xC]
  093c4	e2831038	 add         r1, r3, #0x38
  093c8	e59d302c	 ldr         r3, [sp, #0x2C]
  093cc	e283300c	 add         r3, r3, #0xC
  093d0	e5933000	 ldr         r3, [r3]
  093d4	e2832048	 add         r2, r3, #0x48
  093d8	e5913000	 ldr         r3, [r1]
  093dc	e5823000	 str         r3, [r2]

; 3695 :         OUTREG32( &m_pVencRegs->VENC_BSTAMP_WSS_DATA, pVencPtr[VENC_BSTAMP_WSS_DATA] );

  093e0	e59d300c	 ldr         r3, [sp, #0xC]
  093e4	e283103c	 add         r1, r3, #0x3C
  093e8	e59d302c	 ldr         r3, [sp, #0x2C]
  093ec	e283300c	 add         r3, r3, #0xC
  093f0	e5933000	 ldr         r3, [r3]
  093f4	e283204c	 add         r2, r3, #0x4C
  093f8	e5913000	 ldr         r3, [r1]
  093fc	e5823000	 str         r3, [r2]

; 3696 :         OUTREG32( &m_pVencRegs->VENC_S_CARR, pVencPtr[VENC_S_CARR] );

  09400	e59d300c	 ldr         r3, [sp, #0xC]
  09404	e2831040	 add         r1, r3, #0x40
  09408	e59d302c	 ldr         r3, [sp, #0x2C]
  0940c	e283300c	 add         r3, r3, #0xC
  09410	e5933000	 ldr         r3, [r3]
  09414	e2832050	 add         r2, r3, #0x50
  09418	e5913000	 ldr         r3, [r1]
  0941c	e5823000	 str         r3, [r2]

; 3697 :         OUTREG32( &m_pVencRegs->VENC_LINE21, pVencPtr[VENC_LINE21] );

  09420	e59d300c	 ldr         r3, [sp, #0xC]
  09424	e2831044	 add         r1, r3, #0x44
  09428	e59d302c	 ldr         r3, [sp, #0x2C]
  0942c	e283300c	 add         r3, r3, #0xC
  09430	e5933000	 ldr         r3, [r3]
  09434	e2832054	 add         r2, r3, #0x54
  09438	e5913000	 ldr         r3, [r1]
  0943c	e5823000	 str         r3, [r2]

; 3698 :         OUTREG32( &m_pVencRegs->VENC_LN_SEL, pVencPtr[VENC_LN_SEL] );

  09440	e59d300c	 ldr         r3, [sp, #0xC]
  09444	e2831048	 add         r1, r3, #0x48
  09448	e59d302c	 ldr         r3, [sp, #0x2C]
  0944c	e283300c	 add         r3, r3, #0xC
  09450	e5933000	 ldr         r3, [r3]
  09454	e2832058	 add         r2, r3, #0x58
  09458	e5913000	 ldr         r3, [r1]
  0945c	e5823000	 str         r3, [r2]

; 3699 :         OUTREG32( &m_pVencRegs->VENC_L21__WC_CTL, pVencPtr[VENC_L21__WC_CTL] );

  09460	e59d300c	 ldr         r3, [sp, #0xC]
  09464	e283104c	 add         r1, r3, #0x4C
  09468	e59d302c	 ldr         r3, [sp, #0x2C]
  0946c	e283300c	 add         r3, r3, #0xC
  09470	e5933000	 ldr         r3, [r3]
  09474	e283205c	 add         r2, r3, #0x5C
  09478	e5913000	 ldr         r3, [r1]
  0947c	e5823000	 str         r3, [r2]

; 3700 :         OUTREG32( &m_pVencRegs->VENC_HTRIGGER_VTRIGGER, pVencPtr[VENC_HTRIGGER_VTRIGGER] );

  09480	e59d300c	 ldr         r3, [sp, #0xC]
  09484	e2831050	 add         r1, r3, #0x50
  09488	e59d302c	 ldr         r3, [sp, #0x2C]
  0948c	e283300c	 add         r3, r3, #0xC
  09490	e5933000	 ldr         r3, [r3]
  09494	e2832060	 add         r2, r3, #0x60
  09498	e5913000	 ldr         r3, [r1]
  0949c	e5823000	 str         r3, [r2]

; 3701 :         OUTREG32( &m_pVencRegs->VENC_SAVID_EAVID, pVencPtr[VENC_SAVID_EAVID] );

  094a0	e59d300c	 ldr         r3, [sp, #0xC]
  094a4	e2831054	 add         r1, r3, #0x54
  094a8	e59d302c	 ldr         r3, [sp, #0x2C]
  094ac	e283300c	 add         r3, r3, #0xC
  094b0	e5933000	 ldr         r3, [r3]
  094b4	e2832064	 add         r2, r3, #0x64
  094b8	e5913000	 ldr         r3, [r1]
  094bc	e5823000	 str         r3, [r2]

; 3702 :         OUTREG32( &m_pVencRegs->VENC_FLEN_FAL, pVencPtr[VENC_FLEN_FAL] );

  094c0	e59d300c	 ldr         r3, [sp, #0xC]
  094c4	e2831058	 add         r1, r3, #0x58
  094c8	e59d302c	 ldr         r3, [sp, #0x2C]
  094cc	e283300c	 add         r3, r3, #0xC
  094d0	e5933000	 ldr         r3, [r3]
  094d4	e2832068	 add         r2, r3, #0x68
  094d8	e5913000	 ldr         r3, [r1]
  094dc	e5823000	 str         r3, [r2]

; 3703 :         OUTREG32( &m_pVencRegs->VENC_LAL_PHASE_RESET, pVencPtr[VENC_LAL_PHASE_RESET] );

  094e0	e59d300c	 ldr         r3, [sp, #0xC]
  094e4	e283105c	 add         r1, r3, #0x5C
  094e8	e59d302c	 ldr         r3, [sp, #0x2C]
  094ec	e283300c	 add         r3, r3, #0xC
  094f0	e5933000	 ldr         r3, [r3]
  094f4	e283206c	 add         r2, r3, #0x6C
  094f8	e5913000	 ldr         r3, [r1]
  094fc	e5823000	 str         r3, [r2]

; 3704 :         OUTREG32( &m_pVencRegs->VENC_HS_INT_START_STOP_X, pVencPtr[VENC_HS_INT_START_STOP_X] );

  09500	e59d300c	 ldr         r3, [sp, #0xC]
  09504	e2831060	 add         r1, r3, #0x60
  09508	e59d302c	 ldr         r3, [sp, #0x2C]
  0950c	e283300c	 add         r3, r3, #0xC
  09510	e5933000	 ldr         r3, [r3]
  09514	e2832070	 add         r2, r3, #0x70
  09518	e5913000	 ldr         r3, [r1]
  0951c	e5823000	 str         r3, [r2]

; 3705 :         OUTREG32( &m_pVencRegs->VENC_HS_EXT_START_STOP_X, pVencPtr[VENC_HS_EXT_START_STOP_X] );

  09520	e59d300c	 ldr         r3, [sp, #0xC]
  09524	e2831064	 add         r1, r3, #0x64
  09528	e59d302c	 ldr         r3, [sp, #0x2C]
  0952c	e283300c	 add         r3, r3, #0xC
  09530	e5933000	 ldr         r3, [r3]
  09534	e2832074	 add         r2, r3, #0x74
  09538	e5913000	 ldr         r3, [r1]
  0953c	e5823000	 str         r3, [r2]

; 3706 :         OUTREG32( &m_pVencRegs->VENC_VS_INT_START_X, pVencPtr[VENC_VS_INT_START_X] );

  09540	e59d300c	 ldr         r3, [sp, #0xC]
  09544	e2831068	 add         r1, r3, #0x68
  09548	e59d302c	 ldr         r3, [sp, #0x2C]
  0954c	e283300c	 add         r3, r3, #0xC
  09550	e5933000	 ldr         r3, [r3]
  09554	e2832078	 add         r2, r3, #0x78
  09558	e5913000	 ldr         r3, [r1]
  0955c	e5823000	 str         r3, [r2]

; 3707 :         OUTREG32( &m_pVencRegs->VENC_VS_INT_STOP_X__VS_INT_START_Y, pVencPtr[VENC_VS_INT_STOP_X__VS_INT_START_Y] );

  09560	e59d300c	 ldr         r3, [sp, #0xC]
  09564	e283106c	 add         r1, r3, #0x6C
  09568	e59d302c	 ldr         r3, [sp, #0x2C]
  0956c	e283300c	 add         r3, r3, #0xC
  09570	e5933000	 ldr         r3, [r3]
  09574	e283207c	 add         r2, r3, #0x7C
  09578	e5913000	 ldr         r3, [r1]
  0957c	e5823000	 str         r3, [r2]

; 3708 :         OUTREG32( &m_pVencRegs->VENC_VS_INT_STOP_Y__VS_EXT_START_X, pVencPtr[VENC_VS_INT_STOP_Y__VS_EXT_START_X] );

  09580	e59d300c	 ldr         r3, [sp, #0xC]
  09584	e2831070	 add         r1, r3, #0x70
  09588	e59d302c	 ldr         r3, [sp, #0x2C]
  0958c	e283300c	 add         r3, r3, #0xC
  09590	e5933000	 ldr         r3, [r3]
  09594	e2832080	 add         r2, r3, #0x80
  09598	e5913000	 ldr         r3, [r1]
  0959c	e5823000	 str         r3, [r2]

; 3709 :         OUTREG32( &m_pVencRegs->VENC_VS_EXT_STOP_X__VS_EXT_START_Y, pVencPtr[VENC_VS_EXT_STOP_X__VS_EXT_START_Y] );

  095a0	e59d300c	 ldr         r3, [sp, #0xC]
  095a4	e2831074	 add         r1, r3, #0x74
  095a8	e59d302c	 ldr         r3, [sp, #0x2C]
  095ac	e283300c	 add         r3, r3, #0xC
  095b0	e5933000	 ldr         r3, [r3]
  095b4	e2832084	 add         r2, r3, #0x84
  095b8	e5913000	 ldr         r3, [r1]
  095bc	e5823000	 str         r3, [r2]

; 3710 :         OUTREG32( &m_pVencRegs->VENC_VS_EXT_STOP_Y, pVencPtr[VENC_VS_EXT_STOP_Y] );

  095c0	e59d300c	 ldr         r3, [sp, #0xC]
  095c4	e2831078	 add         r1, r3, #0x78
  095c8	e59d302c	 ldr         r3, [sp, #0x2C]
  095cc	e283300c	 add         r3, r3, #0xC
  095d0	e5933000	 ldr         r3, [r3]
  095d4	e2832088	 add         r2, r3, #0x88
  095d8	e5913000	 ldr         r3, [r1]
  095dc	e5823000	 str         r3, [r2]

; 3711 :         OUTREG32( &m_pVencRegs->VENC_AVID_START_STOP_X, pVencPtr[VENC_AVID_START_STOP_X] );

  095e0	e59d300c	 ldr         r3, [sp, #0xC]
  095e4	e283107c	 add         r1, r3, #0x7C
  095e8	e59d302c	 ldr         r3, [sp, #0x2C]
  095ec	e283300c	 add         r3, r3, #0xC
  095f0	e5933000	 ldr         r3, [r3]
  095f4	e2832090	 add         r2, r3, #0x90
  095f8	e5913000	 ldr         r3, [r1]
  095fc	e5823000	 str         r3, [r2]

; 3712 :         OUTREG32( &m_pVencRegs->VENC_AVID_START_STOP_Y, pVencPtr[VENC_AVID_START_STOP_Y] );

  09600	e59d300c	 ldr         r3, [sp, #0xC]
  09604	e2831080	 add         r1, r3, #0x80
  09608	e59d302c	 ldr         r3, [sp, #0x2C]
  0960c	e283300c	 add         r3, r3, #0xC
  09610	e5933000	 ldr         r3, [r3]
  09614	e2832094	 add         r2, r3, #0x94
  09618	e5913000	 ldr         r3, [r1]
  0961c	e5823000	 str         r3, [r2]

; 3713 :         OUTREG32( &m_pVencRegs->VENC_FID_INT_START_X__FID_INT_START_Y, pVencPtr[VENC_FID_INT_START_X__FID_INT_START_Y] );

  09620	e59d300c	 ldr         r3, [sp, #0xC]
  09624	e2831084	 add         r1, r3, #0x84
  09628	e59d302c	 ldr         r3, [sp, #0x2C]
  0962c	e283300c	 add         r3, r3, #0xC
  09630	e5933000	 ldr         r3, [r3]
  09634	e28320a0	 add         r2, r3, #0xA0
  09638	e5913000	 ldr         r3, [r1]
  0963c	e5823000	 str         r3, [r2]

; 3714 :         OUTREG32( &m_pVencRegs->VENC_FID_INT_OFFSET_Y__FID_EXT_START_X, pVencPtr[VENC_FID_INT_OFFSET_Y__FID_EXT_START_X] );

  09640	e59d300c	 ldr         r3, [sp, #0xC]
  09644	e2831088	 add         r1, r3, #0x88
  09648	e59d302c	 ldr         r3, [sp, #0x2C]
  0964c	e283300c	 add         r3, r3, #0xC
  09650	e5933000	 ldr         r3, [r3]
  09654	e28320a4	 add         r2, r3, #0xA4
  09658	e5913000	 ldr         r3, [r1]
  0965c	e5823000	 str         r3, [r2]

; 3715 :         OUTREG32( &m_pVencRegs->VENC_FID_EXT_START_Y__FID_EXT_OFFSET_Y, pVencPtr[VENC_FID_EXT_START_Y__FID_EXT_OFFSET_Y] );

  09660	e59d300c	 ldr         r3, [sp, #0xC]
  09664	e283108c	 add         r1, r3, #0x8C
  09668	e59d302c	 ldr         r3, [sp, #0x2C]
  0966c	e283300c	 add         r3, r3, #0xC
  09670	e5933000	 ldr         r3, [r3]
  09674	e28320a8	 add         r2, r3, #0xA8
  09678	e5913000	 ldr         r3, [r1]
  0967c	e5823000	 str         r3, [r2]

; 3716 :         OUTREG32( &m_pVencRegs->VENC_TVDETGP_INT_START_STOP_X, pVencPtr[VENC_TVDETGP_INT_START_STOP_X] );

  09680	e59d300c	 ldr         r3, [sp, #0xC]
  09684	e2831090	 add         r1, r3, #0x90
  09688	e59d302c	 ldr         r3, [sp, #0x2C]
  0968c	e283300c	 add         r3, r3, #0xC
  09690	e5933000	 ldr         r3, [r3]
  09694	e28320b0	 add         r2, r3, #0xB0
  09698	e5913000	 ldr         r3, [r1]
  0969c	e5823000	 str         r3, [r2]

; 3717 :         OUTREG32( &m_pVencRegs->VENC_TVDETGP_INT_START_STOP_Y, pVencPtr[VENC_TVDETGP_INT_START_STOP_Y] );

  096a0	e59d300c	 ldr         r3, [sp, #0xC]
  096a4	e2831094	 add         r1, r3, #0x94
  096a8	e59d302c	 ldr         r3, [sp, #0x2C]
  096ac	e283300c	 add         r3, r3, #0xC
  096b0	e5933000	 ldr         r3, [r3]
  096b4	e28320b4	 add         r2, r3, #0xB4
  096b8	e5913000	 ldr         r3, [r1]
  096bc	e5823000	 str         r3, [r2]

; 3718 :         OUTREG32( &m_pVencRegs->VENC_GEN_CTRL, pVencPtr[VENC_GEN_CTRL] );

  096c0	e59d300c	 ldr         r3, [sp, #0xC]
  096c4	e2831098	 add         r1, r3, #0x98
  096c8	e59d302c	 ldr         r3, [sp, #0x2C]
  096cc	e283300c	 add         r3, r3, #0xC
  096d0	e5933000	 ldr         r3, [r3]
  096d4	e28320b8	 add         r2, r3, #0xB8
  096d8	e5913000	 ldr         r3, [r1]
  096dc	e5823000	 str         r3, [r2]

; 3719 :         OUTREG32( &m_pVencRegs->VENC_OUTPUT_CONTROL, m_dwTVMode );

  096e0	e59d302c	 ldr         r3, [sp, #0x2C]
  096e4	e2833b01	 add         r3, r3, #1, 22
  096e8	e28310c4	 add         r1, r3, #0xC4
  096ec	e59d302c	 ldr         r3, [sp, #0x2C]
  096f0	e283300c	 add         r3, r3, #0xC
  096f4	e5933000	 ldr         r3, [r3]
  096f8	e28320c4	 add         r2, r3, #0xC4
  096fc	e5913000	 ldr         r3, [r1]
  09700	e5823000	 str         r3, [r2]

; 3720 :         OUTREG32( &m_pVencRegs->VENC_OUTPUT_TEST, pVencPtr[VENC_OUTPUT_TEST] );

  09704	e59d300c	 ldr         r3, [sp, #0xC]
  09708	e28310a0	 add         r1, r3, #0xA0
  0970c	e59d302c	 ldr         r3, [sp, #0x2C]
  09710	e283300c	 add         r3, r3, #0xC
  09714	e5933000	 ldr         r3, [r3]
  09718	e28320c8	 add         r2, r3, #0xC8
  0971c	e5913000	 ldr         r3, [r1]
  09720	e5823000	 str         r3, [r2]

; 3721 : 
; 3722 :         OUTREG32( &m_pVencRegs->VENC_F_CONTROL, pVencPtr[VENC_F_CONTROL] );     // TRM mentions that these regs need to be

  09724	e59d302c	 ldr         r3, [sp, #0x2C]
  09728	e283300c	 add         r3, r3, #0xC
  0972c	e5933000	 ldr         r3, [r3]
  09730	e2832008	 add         r2, r3, #8
  09734	e59d300c	 ldr         r3, [sp, #0xC]
  09738	e5933000	 ldr         r3, [r3]
  0973c	e5823000	 str         r3, [r2]

; 3723 :         OUTREG32( &m_pVencRegs->VENC_SYNC_CTRL, pVencPtr[VENC_SYNC_CTRL] );     // programmed last

  09740	e59d300c	 ldr         r3, [sp, #0xC]
  09744	e2831008	 add         r1, r3, #8
  09748	e59d302c	 ldr         r3, [sp, #0x2C]
  0974c	e283300c	 add         r3, r3, #0xC
  09750	e5933000	 ldr         r3, [r3]
  09754	e2832014	 add         r2, r3, #0x14
  09758	e5913000	 ldr         r3, [r1]
  0975c	e5823000	 str         r3, [r2]

; 3724 : 
; 3725 :         //  Flush shadow registers
; 3726 :         FlushRegs( DISPC_CONTROL_GODIGITAL );

  09760	e3a01040	 mov         r1, #0x40
  09764	e59d002c	 ldr         r0, [sp, #0x2C]
  09768	eb000000	 bl          |?FlushRegs@OMAPDisplayController@@IAAHK@Z|
  0976c		 |$LN3@RestoreReg|

; 3727 :     }
; 3728 : 
; 3729 :     //  Success
; 3730 :     bResult = TRUE;

  0976c	e3a03001	 mov         r3, #1
  09770	e58d3008	 str         r3, [sp, #8]
  09774		 |$LN16@RestoreReg|
  09774		 |$LN20@RestoreReg|
  09774		 |$cleanUp$39136|

; 3731 : 
; 3732 : cleanUp:
; 3733 :     //  Release regs
; 3734 :     ReleaseRegs();

  09774	e59d002c	 ldr         r0, [sp, #0x2C]
  09778	eb000000	 bl          |?ReleaseRegs@OMAPDisplayController@@IAAHXZ|

; 3735 : 
; 3736 :     //  Return result
; 3737 :     return bResult;

  0977c	e59d3008	 ldr         r3, [sp, #8]
  09780	e58d3010	 str         r3, [sp, #0x10]

; 3738 : }

  09784	e59d0010	 ldr         r0, [sp, #0x10]
  09788	e28dd024	 add         sp, sp, #0x24
  0978c	e89d6000	 ldmia       sp, {sp, lr}
  09790	e12fff1e	 bx          lr
  09794		 |$LN31@RestoreReg|
  09794		 |$LN32@RestoreReg|
  09794	00000000	 DCD         |?g_dwVencValues_NTSC@@3PAKA|
  09798		 |$LN33@RestoreReg|
  09798	00000000	 DCD         |?g_dwVencValues_PAL@@3PAKA|
  0979c		 |$LN34@RestoreReg|
  0979c	00000000	 DCD         |?g_rgPipelineMapping@@3PAUOMAPPipelineConfig@@A|
  097a0		 |$M40812|

			 ENDP  ; |?RestoreRegisters@OMAPDisplayController@@QAAHW4OMAP_DSS_DESTINATION@@@Z|, OMAPDisplayController::RestoreRegisters

	EXPORT	|?WaitForFrameDone@OMAPDisplayController@@IAAHK@Z| ; OMAPDisplayController::WaitForFrameDone
	EXPORT	|?ReleaseClock@OMAPDisplayController@@IAAHK@Z| ; OMAPDisplayController::ReleaseClock
	EXPORT	|?ResetVENC@OMAPDisplayController@@IAAHXZ| ; OMAPDisplayController::ResetVENC
	EXPORT	|?EnableHdmi@OMAPDisplayController@@QAAHH@Z| ; OMAPDisplayController::EnableHdmi
	EXPORT	|?RequestClock@OMAPDisplayController@@IAAHK@Z| ; OMAPDisplayController::RequestClock
	IMPORT	|LcdPdd_SetPowerLevel|

  000e0			 AREA	 |.pdata|, PDATA
|$T40833| DCD	|$LN37@SetPowerLe|
	DCD	0x40016604
; Function compile flags: /Odtp

  097a0			 AREA	 |.text|, CODE, ARM

  097a0		 |?SetPowerLevel@OMAPDisplayController@@QAAHK@Z| PROC ; OMAPDisplayController::SetPowerLevel

; 3745 : {

  097a0		 |$LN37@SetPowerLe|
  097a0	e1a0c00d	 mov         r12, sp
  097a4	e92d0003	 stmdb       sp!, {r0, r1}
  097a8	e92d5000	 stmdb       sp!, {r12, lr}
  097ac	e24dd020	 sub         sp, sp, #0x20
  097b0		 |$M40830|

; 3746 :     BOOL            bResult = TRUE;

  097b0	e3a03001	 mov         r3, #1
  097b4	e58d3000	 str         r3, [sp]

; 3747 :     DWORD   dwTimeout;
; 3748 :     
; 3749 :     //  Lock access to power level
; 3750 :     EnterCriticalSection( &m_csPowerLock );

  097b8	e59d3028	 ldr         r3, [sp, #0x28]
  097bc	e2833b01	 add         r3, r3, #1, 22
  097c0	e283008c	 add         r0, r3, #0x8C
  097c4	eb000000	 bl          EnterCriticalSection

; 3751 :     
; 3752 :     //  Check if there is a change in the power level
; 3753 :     if( m_dwPowerLevel == dwPowerLevel )

  097c8	e59d3028	 ldr         r3, [sp, #0x28]
  097cc	e2833b01	 add         r3, r3, #1, 22
  097d0	e2833088	 add         r3, r3, #0x88
  097d4	e5932000	 ldr         r2, [r3]
  097d8	e59d302c	 ldr         r3, [sp, #0x2C]
  097dc	e1520003	 cmp         r2, r3
  097e0	1a000001	 bne         |$LN23@SetPowerLe|
  097e4	ea000148	 b           |$LN22@SetPowerLe|

; 3754 :         goto cleanUp;

  097e8	ea000147	 b           |$cleanUp$39371|
  097ec		 |$LN23@SetPowerLe|

; 3755 : 
; 3756 :     //  Enable/disable devices based on power level
; 3757 :     switch( dwPowerLevel )

  097ec	e59d302c	 ldr         r3, [sp, #0x2C]
  097f0	e58d3018	 str         r3, [sp, #0x18]
  097f4	e59d3018	 ldr         r3, [sp, #0x18]
  097f8	e3530004	 cmp         r3, #4
  097fc	8a000142	 bhi         |$LN20@SetPowerLe|
  09800	e59d2018	 ldr         r2, [sp, #0x18]
  09804	e1a03102	 mov         r3, r2, lsl #2
  09808	e083300f	 add         r3, r3, pc
  0980c	e5933004	 ldr         r3, [r3, #4]
  09810	e08ff003	 add         pc, pc, r3
  09814		 |$LN29@SetPowerLe|
  09814		 |$LN28@SetPowerLe|
  09814		 |$LN30@SetPowerLe|
  09814	00000010	 DCD         0x10
  09818		 |$LN31@SetPowerLe|
  09818	00000010	 DCD         0x10
  0981c		 |$LN32@SetPowerLe|
  0981c	00000010	 DCD         0x10
  09820		 |$LN33@SetPowerLe|
  09820	00000374	 DCD         0x374
  09824		 |$LN34@SetPowerLe|
  09824	00000374	 DCD         0x374
  09828		 |$LN19@SetPowerLe|

; 3758 :     {
; 3759 :         case D0:
; 3760 :         case D1: 
; 3761 :         case D2:
; 3762 :             //  Check against current level
; 3763 :             if( m_dwPowerLevel == D3 || m_dwPowerLevel == D4)

  09828	e59d3028	 ldr         r3, [sp, #0x28]
  0982c	e2833b01	 add         r3, r3, #1, 22
  09830	e2833088	 add         r3, r3, #0x88
  09834	e5933000	 ldr         r3, [r3]
  09838	e3530003	 cmp         r3, #3
  0983c	0a000005	 beq         |$LN17@SetPowerLe|
  09840	e59d3028	 ldr         r3, [sp, #0x28]
  09844	e2833b01	 add         r3, r3, #1, 22
  09848	e2833088	 add         r3, r3, #0x88
  0984c	e5933000	 ldr         r3, [r3]
  09850	e3530004	 cmp         r3, #4
  09854	1a0000a9	 bne         |$LN18@SetPowerLe|
  09858		 |$LN17@SetPowerLe|

; 3764 :             {
; 3765 :                 //  Set the new power level
; 3766 :                 m_dwPowerLevel = dwPowerLevel;

  09858	e59d3028	 ldr         r3, [sp, #0x28]
  0985c	e2833b01	 add         r3, r3, #1, 22
  09860	e2832088	 add         r2, r3, #0x88
  09864	e59d302c	 ldr         r3, [sp, #0x2C]
  09868	e5823000	 str         r3, [r2]

; 3767 :             
; 3768 :                 //  Enable device clocks
; 3769 :                 RequestClock( m_dssinfo.DSSDevice );         

  0986c	e59d3028	 ldr         r3, [sp, #0x28]
  09870	e2833c05	 add         r3, r3, #5, 24
  09874	e283301c	 add         r3, r3, #0x1C
  09878	e5931000	 ldr         r1, [r3]
  0987c	e59d0028	 ldr         r0, [sp, #0x28]
  09880	eb000000	 bl          |?RequestClock@OMAPDisplayController@@IAAHK@Z|

; 3770 : 
; 3771 :                 //  Call PDD layer
; 3772 :                 LcdPdd_SetPowerLevel( dwPowerLevel );

  09884	e59d002c	 ldr         r0, [sp, #0x2C]
  09888	eb000000	 bl          LcdPdd_SetPowerLevel

; 3773 : 
; 3774 :                 //  Re-enable LCD outputs
; 3775 :                 if( g_dwDestinationRefCnt[OMAP_DSS_DESTINATION_LCD] > 0 )

  0988c	e59f34a0	 ldr         r3, [pc, #0x4A0]
  09890	e5933000	 ldr         r3, [r3]
  09894	e3530000	 cmp         r3, #0
  09898	9a00005c	 bls         |$LN16@SetPowerLe|

; 3776 :                 {
; 3777 :                     // The HDMI uses DSI clock. At init time, DSS is turned
; 3778 :                     // ON and so HDMI cannot be configured at init time.
; 3779 :                     // The HDMI config seq is given below
; 3780 :                     // init -> InternalLCD(DSS) -> HDMI(DSI)
; 3781 :                     
; 3782 :                     // Store the current HDMI state
; 3783 :                     BOOL bHdmiEnable = m_bHDMIEnable;

  0989c	e59d3028	 ldr         r3, [sp, #0x28]
  098a0	e2833b01	 add         r3, r3, #1, 22
  098a4	e28330c8	 add         r3, r3, #0xC8
  098a8	e5933000	 ldr         r3, [r3]
  098ac	e58d3010	 str         r3, [sp, #0x10]

; 3784 :                     // Force HDMI to inactive state during init
; 3785 :                     m_bHDMIEnable = FALSE;

  098b0	e59d3028	 ldr         r3, [sp, #0x28]
  098b4	e2833b01	 add         r3, r3, #1, 22
  098b8	e28320c8	 add         r2, r3, #0xC8
  098bc	e3a03000	 mov         r3, #0
  098c0	e5823000	 str         r3, [r2]

; 3786 : 
; 3787 : #if 0
; 3788 : 					// Turn on the DSS2_ALWON_FCLK if the FCLK source is DSI clock
; 3789 :                     if ( m_eDssFclkSource == OMAP_DSS_FCLK_DSS2ALWON )
; 3790 :                     {
; 3791 :                         ULONG count = 2;
; 3792 :                         ULONG clockSrc[2] = {kDSS1_ALWON_FCLK, kDSS2_ALWON_FCLK};
; 3793 :                         SelectDSSSourceClocks( count, clockSrc);
; 3794 :                         InitDsiPll();
; 3795 :                     }
; 3796 : #endif
; 3797 :                     
; 3798 :                     //  Restore LCD settings
; 3799 :                     RestoreRegisters(OMAP_DSS_DESTINATION_LCD);

  098c4	e3a01000	 mov         r1, #0
  098c8	e59d0028	 ldr         r0, [sp, #0x28]
  098cc	eb000000	 bl          |?RestoreRegisters@OMAPDisplayController@@QAAHW4OMAP_DSS_DESTINATION@@@Z|

; 3800 : 
; 3801 :                     // enable interrupt for reporting SYNCLOST errors
; 3802 :                     SETREG32( &m_pDispRegs->DISPC_IRQENABLE, DISPC_IRQENABLE_SYNCLOST);

  098d0	e59d3028	 ldr         r3, [sp, #0x28]
  098d4	e2833008	 add         r3, r3, #8
  098d8	e5933000	 ldr         r3, [r3]
  098dc	e283301c	 add         r3, r3, #0x1C
  098e0	e5933000	 ldr         r3, [r3]
  098e4	e3832901	 orr         r2, r3, #1, 18
  098e8	e59d3028	 ldr         r3, [sp, #0x28]
  098ec	e2833008	 add         r3, r3, #8
  098f0	e5933000	 ldr         r3, [r3]
  098f4	e283301c	 add         r3, r3, #0x1C
  098f8	e5832000	 str         r2, [r3]

; 3803 : 
; 3804 :                     LcdPdd_SetPowerLevel( dwPowerLevel );

  098fc	e59d002c	 ldr         r0, [sp, #0x2C]
  09900	eb000000	 bl          LcdPdd_SetPowerLevel

; 3805 : 
; 3806 :                     // Check the FIFO threshold level and decide if LPR is required
; 3807 :                     DWORD dwFIFOThreshold = 
; 3808 :                         (DISPC_GFX_FIFO_THRESHOLD_LOW(FIFO_LOWTHRESHOLD_MERGED(FIFO_BURSTSIZE_16x32))|
; 3809 :                          DISPC_GFX_FIFO_THRESHOLD_HIGH(FIFO_HIGHTHRESHOLD_MERGED));

  09904	e3e0333d	 mvn         r3, #0x3D, 6
  09908	e2233cfa	 eor         r3, r3, #0xFA, 24
  0990c	e58d300c	 str         r3, [sp, #0xC]

; 3810 :                     
; 3811 :                     BOOL bLPREnable = FALSE;

  09910	e3a03000	 mov         r3, #0
  09914	e58d3008	 str         r3, [sp, #8]

; 3812 :                         
; 3813 :                     // Enable the LPR if the FIFO's are merged.
; 3814 :                     if ( INREG32( &m_pDispRegs->DISPC_GFX_FIFO_THRESHOLD) == dwFIFOThreshold )

  09918	e59d3028	 ldr         r3, [sp, #0x28]
  0991c	e2833008	 add         r3, r3, #8
  09920	e5933000	 ldr         r3, [r3]
  09924	e28330a4	 add         r3, r3, #0xA4
  09928	e5932000	 ldr         r2, [r3]
  0992c	e59d300c	 ldr         r3, [sp, #0xC]
  09930	e1520003	 cmp         r2, r3
  09934	1a00000f	 bne         |$LN15@SetPowerLe|

; 3815 :                     {
; 3816 :                         SETREG32( &m_pDispRegs->DISPC_CONFIG, DISPC_CONFIG_FIFOMERGE);

  09938	e59d3028	 ldr         r3, [sp, #0x28]
  0993c	e2833008	 add         r3, r3, #8
  09940	e5933000	 ldr         r3, [r3]
  09944	e2833044	 add         r3, r3, #0x44
  09948	e5933000	 ldr         r3, [r3]
  0994c	e3832901	 orr         r2, r3, #1, 18
  09950	e59d3028	 ldr         r3, [sp, #0x28]
  09954	e2833008	 add         r3, r3, #8
  09958	e5933000	 ldr         r3, [r3]
  0995c	e2833044	 add         r3, r3, #0x44
  09960	e5832000	 str         r2, [r3]

; 3817 :                         
; 3818 :                         // Make sure the LPR is disabled when HDMI is enabled
; 3819 :                         if (bHdmiEnable == FALSE)

  09964	e59d3010	 ldr         r3, [sp, #0x10]
  09968	e3530000	 cmp         r3, #0
  0996c	1a000001	 bne         |$LN14@SetPowerLe|

; 3820 :                         {
; 3821 :                             // LPR should be turned ON
; 3822 :                             bLPREnable = TRUE;

  09970	e3a03001	 mov         r3, #1
  09974	e58d3008	 str         r3, [sp, #8]
  09978		 |$LN14@SetPowerLe|
  09978		 |$LN15@SetPowerLe|

; 3823 :                         }
; 3824 :                     }
; 3825 : 
; 3826 :                     // Toggle the LPR state
; 3827 :                     m_bLPREnable = ( m_bLPREnable == TRUE ) ? FALSE : TRUE;

  09978	e59d3028	 ldr         r3, [sp, #0x28]
  0997c	e2833e51	 add         r3, r3, #0x51, 28
  09980	e5933000	 ldr         r3, [r3]
  09984	e3530001	 cmp         r3, #1
  09988	1a000002	 bne         |$LN26@SetPowerLe|
  0998c	e3a03000	 mov         r3, #0
  09990	e58d301c	 str         r3, [sp, #0x1C]
  09994	ea000001	 b           |$LN27@SetPowerLe|
  09998		 |$LN26@SetPowerLe|
  09998	e3a03001	 mov         r3, #1
  0999c	e58d301c	 str         r3, [sp, #0x1C]
  099a0		 |$LN27@SetPowerLe|
  099a0	e59d3028	 ldr         r3, [sp, #0x28]
  099a4	e2832e51	 add         r2, r3, #0x51, 28
  099a8	e59d301c	 ldr         r3, [sp, #0x1C]
  099ac	e5823000	 str         r3, [r2]

; 3828 :                     // Turn on LPR and also switch to DSI clock (if clksource == DSI)
; 3829 :                     EnableLPR( bLPREnable );

  099b0	e3a02000	 mov         r2, #0
  099b4	e59d1008	 ldr         r1, [sp, #8]
  099b8	e59d0028	 ldr         r0, [sp, #0x28]
  099bc	eb000000	 bl          |?EnableLPR@OMAPDisplayController@@QAAXHH@Z|

; 3830 :                     
; 3831 :                     //  Flush shadow registers
; 3832 :                     FlushRegs( DISPC_CONTROL_GOLCD );

  099c0	e3a01020	 mov         r1, #0x20
  099c4	e59d0028	 ldr         r0, [sp, #0x28]
  099c8	eb000000	 bl          |?FlushRegs@OMAPDisplayController@@IAAHK@Z|

; 3833 :                     
; 3834 :                     if (bHdmiEnable)

  099cc	e59d3010	 ldr         r3, [sp, #0x10]
  099d0	e3530000	 cmp         r3, #0
  099d4	0a00000d	 beq         |$LN13@SetPowerLe|

; 3835 :                     {
; 3836 :                         WaitForFlushDone( DISPC_CONTROL_GOLCD );

  099d8	e3a01020	 mov         r1, #0x20
  099dc	e59d0028	 ldr         r0, [sp, #0x28]
  099e0	eb000000	 bl          |?WaitForFlushDone@OMAPDisplayController@@IAAHK@Z|

; 3837 :                         // Restore the HDMI specific context
; 3838 :                         m_bHDMIEnable = TRUE;

  099e4	e59d3028	 ldr         r3, [sp, #0x28]
  099e8	e2833b01	 add         r3, r3, #1, 22
  099ec	e28320c8	 add         r2, r3, #0xC8
  099f0	e3a03001	 mov         r3, #1
  099f4	e5823000	 str         r3, [r2]

; 3839 :                         RestoreRegisters( OMAP_DSS_DESTINATION_LCD );

  099f8	e3a01000	 mov         r1, #0
  099fc	e59d0028	 ldr         r0, [sp, #0x28]
  09a00	eb000000	 bl          |?RestoreRegisters@OMAPDisplayController@@QAAHW4OMAP_DSS_DESTINATION@@@Z|

; 3840 :                         // Configure and enable the Hdmi Panel 
; 3841 :                         EnableHdmi( TRUE );

  09a04	e3a01001	 mov         r1, #1
  09a08	e59d0028	 ldr         r0, [sp, #0x28]
  09a0c	eb000000	 bl          |?EnableHdmi@OMAPDisplayController@@QAAHH@Z|
  09a10		 |$LN13@SetPowerLe|
  09a10		 |$LN16@SetPowerLe|

; 3842 :                     }
; 3843 :                 }
; 3844 :                 
; 3845 :                 //  Re-enable TV out if it was enabled prior to display power change
; 3846 :                 if( m_bTVEnable )

  09a10	e59d3028	 ldr         r3, [sp, #0x28]
  09a14	e2833b01	 add         r3, r3, #1, 22
  09a18	e28330b4	 add         r3, r3, #0xB4
  09a1c	e5933000	 ldr         r3, [r3]
  09a20	e3530000	 cmp         r3, #0
  09a24	0a000016	 beq         |$LN12@SetPowerLe|

; 3847 :                 {
; 3848 :                     //  Enable the video encoder clock
; 3849 :                     RequestClock( m_dssinfo.TVEncoderDevice );

  09a28	e59d3028	 ldr         r3, [sp, #0x28]
  09a2c	e2833e52	 add         r3, r3, #0x52, 28
  09a30	e5931000	 ldr         r1, [r3]
  09a34	e59d0028	 ldr         r0, [sp, #0x28]
  09a38	eb000000	 bl          |?RequestClock@OMAPDisplayController@@IAAHK@Z|

; 3850 : 
; 3851 :                     //  Restore the TV out registers
; 3852 :                     RestoreRegisters( OMAP_DSS_DESTINATION_TVOUT );

  09a3c	e3a01001	 mov         r1, #1
  09a40	e59d0028	 ldr         r0, [sp, #0x28]
  09a44	eb000000	 bl          |?RestoreRegisters@OMAPDisplayController@@QAAHW4OMAP_DSS_DESTINATION@@@Z|

; 3853 : 
; 3854 :                     //  Enable TV out if there is something to show
; 3855 :                 if( g_dwDestinationRefCnt[OMAP_DSS_DESTINATION_TVOUT] > 0 )

  09a48	e59f32e4	 ldr         r3, [pc, #0x2E4]
  09a4c	e5933004	 ldr         r3, [r3, #4]
  09a50	e3530000	 cmp         r3, #0
  09a54	9a00000a	 bls         |$LN11@SetPowerLe|

; 3856 :                         {
; 3857 :                       // enable interrupt for reporting SYNCLOST errors
; 3858 :                         //SETREG32( &m_pDispRegs->DISPC_IRQENABLE, DISPC_IRQENABLE_SYNCLOSTDIGITAL);
; 3859 :                         // enable the tvout path
; 3860 :                         SETREG32( &m_pDispRegs->DISPC_CONTROL, DISPC_CONTROL_DIGITALENABLE );

  09a58	e59d3028	 ldr         r3, [sp, #0x28]
  09a5c	e2833008	 add         r3, r3, #8
  09a60	e5933000	 ldr         r3, [r3]
  09a64	e2833040	 add         r3, r3, #0x40
  09a68	e5933000	 ldr         r3, [r3]
  09a6c	e3832002	 orr         r2, r3, #2
  09a70	e59d3028	 ldr         r3, [sp, #0x28]
  09a74	e2833008	 add         r3, r3, #8
  09a78	e5933000	 ldr         r3, [r3]
  09a7c	e2833040	 add         r3, r3, #0x40
  09a80	e5832000	 str         r2, [r3]
  09a84		 |$LN11@SetPowerLe|
  09a84		 |$LN12@SetPowerLe|

; 3861 :                 }
; 3862 :                     }
; 3863 :                 
; 3864 :                 //  Wait for VSYNC
; 3865 :                 dwTimeout = DISPLAY_TIMEOUT;

  09a84	e3a0301e	 mov         r3, #0x1E
  09a88	e58d3004	 str         r3, [sp, #4]

; 3866 :                 OUTREG32(&m_pDispRegs->DISPC_IRQSTATUS, DISPC_IRQSTATUS_VSYNC);

  09a8c	e59d3028	 ldr         r3, [sp, #0x28]
  09a90	e2833008	 add         r3, r3, #8
  09a94	e5933000	 ldr         r3, [r3]
  09a98	e2832018	 add         r2, r3, #0x18
  09a9c	e3a03002	 mov         r3, #2
  09aa0	e5823000	 str         r3, [r2]
  09aa4		 |$LN10@SetPowerLe|

; 3867 :                 while (((INREG32(&m_pDispRegs->DISPC_IRQSTATUS) & DISPC_IRQSTATUS_VSYNC) == 0) && (dwTimeout-- > 0))

  09aa4	e59d3028	 ldr         r3, [sp, #0x28]
  09aa8	e2833008	 add         r3, r3, #8
  09aac	e5933000	 ldr         r3, [r3]
  09ab0	e2833018	 add         r3, r3, #0x18
  09ab4	e5933000	 ldr         r3, [r3]
  09ab8	e3130002	 tst         r3, #2
  09abc	1a000008	 bne         |$LN9@SetPowerLe|
  09ac0	e59d3004	 ldr         r3, [sp, #4]
  09ac4	e3530000	 cmp         r3, #0
  09ac8	e59d3004	 ldr         r3, [sp, #4]
  09acc	e2433001	 sub         r3, r3, #1
  09ad0	e58d3004	 str         r3, [sp, #4]
  09ad4	9a000002	 bls         |$LN9@SetPowerLe|

; 3868 :                 {
; 3869 :                     Sleep(1);

  09ad8	e3a00001	 mov         r0, #1
  09adc	eb000000	 bl          Sleep

; 3870 :                 }

  09ae0	eaffffef	 b           |$LN10@SetPowerLe|
  09ae4		 |$LN9@SetPowerLe|

; 3871 : 
; 3872 :                 //  Clear all DSS interrupts
; 3873 :                 OUTREG32( &m_pDispRegs->DISPC_IRQSTATUS, 0xFFFFFFFF );

  09ae4	e59d3028	 ldr         r3, [sp, #0x28]
  09ae8	e2833008	 add         r3, r3, #8
  09aec	e5933000	 ldr         r3, [r3]
  09af0	e2832018	 add         r2, r3, #0x18
  09af4	e3e03000	 mvn         r3, #0
  09af8	e5823000	 str         r3, [r2]

; 3874 :             }
; 3875 : 			else    

  09afc	ea000021	 b           |$LN8@SetPowerLe|
  09b00		 |$LN18@SetPowerLe|

; 3876 :             {         
; 3877 :                 LcdPdd_SetPowerLevel(dwPowerLevel);

  09b00	e59d002c	 ldr         r0, [sp, #0x2C]
  09b04	eb000000	 bl          LcdPdd_SetPowerLevel

; 3878 :                 if (dwPowerLevel == D2)

  09b08	e59d302c	 ldr         r3, [sp, #0x2C]
  09b0c	e3530002	 cmp         r3, #2
  09b10	1a00000c	 bne         |$LN7@SetPowerLe|

; 3879 :                     CLRREG32( &m_pDispRegs->DISPC_CONTROL, DISPC_CONTROL_DIGITALENABLE );

  09b14	e59d3028	 ldr         r3, [sp, #0x28]
  09b18	e2833008	 add         r3, r3, #8
  09b1c	e5933000	 ldr         r3, [r3]
  09b20	e2833040	 add         r3, r3, #0x40
  09b24	e5932000	 ldr         r2, [r3]
  09b28	e3e03002	 mvn         r3, #2
  09b2c	e0022003	 and         r2, r2, r3
  09b30	e59d3028	 ldr         r3, [sp, #0x28]
  09b34	e2833008	 add         r3, r3, #8
  09b38	e5933000	 ldr         r3, [r3]
  09b3c	e2833040	 add         r3, r3, #0x40
  09b40	e5832000	 str         r2, [r3]

; 3880 :                 else

  09b44	ea00000a	 b           |$LN6@SetPowerLe|
  09b48		 |$LN7@SetPowerLe|

; 3881 :                     SETREG32( &m_pDispRegs->DISPC_CONTROL, DISPC_CONTROL_DIGITALENABLE );

  09b48	e59d3028	 ldr         r3, [sp, #0x28]
  09b4c	e2833008	 add         r3, r3, #8
  09b50	e5933000	 ldr         r3, [r3]
  09b54	e2833040	 add         r3, r3, #0x40
  09b58	e5933000	 ldr         r3, [r3]
  09b5c	e3832002	 orr         r2, r3, #2
  09b60	e59d3028	 ldr         r3, [sp, #0x28]
  09b64	e2833008	 add         r3, r3, #8
  09b68	e5933000	 ldr         r3, [r3]
  09b6c	e2833040	 add         r3, r3, #0x40
  09b70	e5832000	 str         r2, [r3]
  09b74		 |$LN6@SetPowerLe|

; 3882 : 			    m_dwPowerLevel = dwPowerLevel;

  09b74	e59d3028	 ldr         r3, [sp, #0x28]
  09b78	e2833b01	 add         r3, r3, #1, 22
  09b7c	e2832088	 add         r2, r3, #0x88
  09b80	e59d302c	 ldr         r3, [sp, #0x2C]
  09b84	e5823000	 str         r3, [r2]
  09b88		 |$LN8@SetPowerLe|

; 3883 :             }
; 3884 : 
; 3885 :         break;

  09b88	ea00005f	 b           |$LN20@SetPowerLe|
  09b8c		 |$LN5@SetPowerLe|

; 3886 :         
; 3887 :         case D3:
; 3888 :         case D4:
; 3889 :             //  Check against current level
; 3890 :             if( m_dwPowerLevel == D0 || m_dwPowerLevel == D1 || m_dwPowerLevel == D2)

  09b8c	e59d3028	 ldr         r3, [sp, #0x28]
  09b90	e2833b01	 add         r3, r3, #1, 22
  09b94	e2833088	 add         r3, r3, #0x88
  09b98	e5933000	 ldr         r3, [r3]
  09b9c	e3530000	 cmp         r3, #0
  09ba0	0a00000b	 beq         |$LN3@SetPowerLe|
  09ba4	e59d3028	 ldr         r3, [sp, #0x28]
  09ba8	e2833b01	 add         r3, r3, #1, 22
  09bac	e2833088	 add         r3, r3, #0x88
  09bb0	e5933000	 ldr         r3, [r3]
  09bb4	e3530001	 cmp         r3, #1
  09bb8	0a000005	 beq         |$LN3@SetPowerLe|
  09bbc	e59d3028	 ldr         r3, [sp, #0x28]
  09bc0	e2833b01	 add         r3, r3, #1, 22
  09bc4	e2833088	 add         r3, r3, #0x88
  09bc8	e5933000	 ldr         r3, [r3]
  09bcc	e3530002	 cmp         r3, #2
  09bd0	1a000048	 bne         |$LN4@SetPowerLe|
  09bd4		 |$LN3@SetPowerLe|

; 3891 :             {
; 3892 : 
; 3893 :                 //  Disable TV out
; 3894 :                 if( g_dwDestinationRefCnt[OMAP_DSS_DESTINATION_TVOUT] > 0 )

  09bd4	e59f3158	 ldr         r3, [pc, #0x158]
  09bd8	e5933004	 ldr         r3, [r3, #4]
  09bdc	e3530000	 cmp         r3, #0
  09be0	9a000024	 bls         |$LN2@SetPowerLe|

; 3895 :                 {
; 3896 :                     //  Disable TV out control
; 3897 :                     CLRREG32( &m_pDispRegs->DISPC_CONTROL, DISPC_CONTROL_DIGITALENABLE );        

  09be4	e59d3028	 ldr         r3, [sp, #0x28]
  09be8	e2833008	 add         r3, r3, #8
  09bec	e5933000	 ldr         r3, [r3]
  09bf0	e2833040	 add         r3, r3, #0x40
  09bf4	e5932000	 ldr         r2, [r3]
  09bf8	e3e03002	 mvn         r3, #2
  09bfc	e0022003	 and         r2, r2, r3
  09c00	e59d3028	 ldr         r3, [sp, #0x28]
  09c04	e2833008	 add         r3, r3, #8
  09c08	e5933000	 ldr         r3, [r3]
  09c0c	e2833040	 add         r3, r3, #0x40
  09c10	e5832000	 str         r2, [r3]

; 3898 : 
; 3899 :                     //  Wait for EVSYNC
; 3900 :                     WaitForIRQ(DISPC_IRQSTATUS_EVSYNC_EVEN|DISPC_IRQSTATUS_EVSYNC_ODD);

  09c14	e3a0201e	 mov         r2, #0x1E
  09c18	e3a0100c	 mov         r1, #0xC
  09c1c	e59d0028	 ldr         r0, [sp, #0x28]
  09c20	eb000000	 bl          |?WaitForIRQ@OMAPDisplayController@@IAAHKK@Z|

; 3901 : 
; 3902 :                     // clear all the pending interrupts
; 3903 :                     SETREG32( &m_pDispRegs->DISPC_IRQSTATUS, DISPC_IRQSTATUS_EVSYNC_EVEN|DISPC_IRQSTATUS_EVSYNC_ODD);

  09c24	e59d3028	 ldr         r3, [sp, #0x28]
  09c28	e2833008	 add         r3, r3, #8
  09c2c	e5933000	 ldr         r3, [r3]
  09c30	e2833018	 add         r3, r3, #0x18
  09c34	e5933000	 ldr         r3, [r3]
  09c38	e383200c	 orr         r2, r3, #0xC
  09c3c	e59d3028	 ldr         r3, [sp, #0x28]
  09c40	e2833008	 add         r3, r3, #8
  09c44	e5933000	 ldr         r3, [r3]
  09c48	e2833018	 add         r3, r3, #0x18
  09c4c	e5832000	 str         r2, [r3]

; 3904 : 
; 3905 :                     //  Save TV out settings
; 3906 :                     SaveRegisters(OMAP_DSS_DESTINATION_TVOUT);

  09c50	e3a01001	 mov         r1, #1
  09c54	e59d0028	 ldr         r0, [sp, #0x28]
  09c58	eb000000	 bl          |?SaveRegisters@OMAPDisplayController@@QAAHW4OMAP_DSS_DESTINATION@@@Z|

; 3907 : 
; 3908 :                     //  Reset the video encoder
; 3909 :                     ResetVENC();                           

  09c5c	e59d0028	 ldr         r0, [sp, #0x28]
  09c60	eb000000	 bl          |?ResetVENC@OMAPDisplayController@@IAAHXZ|

; 3910 : 
; 3911 :                     //  Release the clock
; 3912 :                     ReleaseClock( m_dssinfo.TVEncoderDevice );

  09c64	e59d3028	 ldr         r3, [sp, #0x28]
  09c68	e2833e52	 add         r3, r3, #0x52, 28
  09c6c	e5931000	 ldr         r1, [r3]
  09c70	e59d0028	 ldr         r0, [sp, #0x28]
  09c74	eb000000	 bl          |?ReleaseClock@OMAPDisplayController@@IAAHK@Z|
  09c78		 |$LN2@SetPowerLe|

; 3913 :                 }
; 3914 : 
; 3915 :                 //  Disable LCD
; 3916 :                 if( g_dwDestinationRefCnt[OMAP_DSS_DESTINATION_LCD] > 0 )

  09c78	e59f30b4	 ldr         r3, [pc, #0xB4]
  09c7c	e5933000	 ldr         r3, [r3]
  09c80	e3530000	 cmp         r3, #0
  09c84	9a000007	 bls         |$LN1@SetPowerLe|

; 3917 :                 {
; 3918 :                     //  Save LCD settings
; 3919 :                     SaveRegisters(OMAP_DSS_DESTINATION_LCD);

  09c88	e3a01000	 mov         r1, #0
  09c8c	e59d0028	 ldr         r0, [sp, #0x28]
  09c90	eb000000	 bl          |?SaveRegisters@OMAPDisplayController@@QAAHW4OMAP_DSS_DESTINATION@@@Z|

; 3920 : 
; 3921 :                     //  Disable LCD
; 3922 :                     LcdPdd_SetPowerLevel( dwPowerLevel );

  09c94	e59d002c	 ldr         r0, [sp, #0x2C]
  09c98	eb000000	 bl          LcdPdd_SetPowerLevel

; 3923 :                     
; 3924 :                     //  Wait for the frame to complete
; 3925 :                     WaitForFrameDone();

  09c9c	e3a0101e	 mov         r1, #0x1E
  09ca0	e59d0028	 ldr         r0, [sp, #0x28]
  09ca4	eb000000	 bl          |?WaitForFrameDone@OMAPDisplayController@@IAAHK@Z|
  09ca8		 |$LN1@SetPowerLe|

; 3926 :                 }
; 3927 : 
; 3928 :                 //  Call PDD layer (again in case LCD was not enabled)
; 3929 :                 LcdPdd_SetPowerLevel( dwPowerLevel );

  09ca8	e59d002c	 ldr         r0, [sp, #0x2C]
  09cac	eb000000	 bl          LcdPdd_SetPowerLevel

; 3930 : 
; 3931 :                 //  Clear all DSS interrupts
; 3932 :                 OUTREG32( &m_pDispRegs->DISPC_IRQSTATUS, 0xFFFFFFFF );

  09cb0	e59d3028	 ldr         r3, [sp, #0x28]
  09cb4	e2833008	 add         r3, r3, #8
  09cb8	e5933000	 ldr         r3, [r3]
  09cbc	e2832018	 add         r2, r3, #0x18
  09cc0	e3e03000	 mvn         r3, #0
  09cc4	e5823000	 str         r3, [r2]

; 3933 :                 
; 3934 :                 //  Change interconnect parameters to disable controller
; 3935 :                 OUTREG32( &m_pDispRegs->DISPC_SYSCONFIG, DISPC_SYSCONFIG_AUTOIDLE|SYSCONFIG_FORCEIDLE|SYSCONFIG_FORCESTANDBY );

  09cc8	e59d3028	 ldr         r3, [sp, #0x28]
  09ccc	e2833008	 add         r3, r3, #8
  09cd0	e5933000	 ldr         r3, [r3]
  09cd4	e2832010	 add         r2, r3, #0x10
  09cd8	e3a03001	 mov         r3, #1
  09cdc	e5823000	 str         r3, [r2]

; 3936 : 
; 3937 : #if 0
; 3938 : 				if ( m_eDssFclkSource == OMAP_DSS_FCLK_DSS2ALWON )
; 3939 :                 {
; 3940 :                     // De-init the DSI Pll and Power Down the DSI PLL
; 3941 :                     DeInitDsiPll();
; 3942 :                     // Set clock to DSS1
; 3943 :                     ULONG count = 1;
; 3944 :                     ULONG clockSrc = kDSS1_ALWON_FCLK;
; 3945 :                     SelectDSSSourceClocks( count, &clockSrc);
; 3946 :                 }
; 3947 : #endif
; 3948 : 
; 3949 : 				//  Disable device clocks 
; 3950 :                 ReleaseClock( m_dssinfo.DSSDevice );         

  09ce0	e59d3028	 ldr         r3, [sp, #0x28]
  09ce4	e2833c05	 add         r3, r3, #5, 24
  09ce8	e283301c	 add         r3, r3, #0x1C
  09cec	e5931000	 ldr         r1, [r3]
  09cf0	e59d0028	 ldr         r0, [sp, #0x28]
  09cf4	eb000000	 bl          |?ReleaseClock@OMAPDisplayController@@IAAHK@Z|
  09cf8		 |$LN4@SetPowerLe|

; 3951 : 			}	
; 3952 :             
; 3953 :             //  Set the new power level
; 3954 :             m_dwPowerLevel = dwPowerLevel;

  09cf8	e59d3028	 ldr         r3, [sp, #0x28]
  09cfc	e2833b01	 add         r3, r3, #1, 22
  09d00	e2832088	 add         r2, r3, #0x88
  09d04	e59d302c	 ldr         r3, [sp, #0x2C]
  09d08	e5823000	 str         r3, [r2]
  09d0c		 |$LN20@SetPowerLe|
  09d0c		 |$LN22@SetPowerLe|
  09d0c		 |$cleanUp$39371|

; 3955 : 
; 3956 :             break;            
; 3957 :     }
; 3958 : 
; 3959 : cleanUp:    
; 3960 :     //  Unlock access to power level
; 3961 :     LeaveCriticalSection( &m_csPowerLock );

  09d0c	e59d3028	 ldr         r3, [sp, #0x28]
  09d10	e2833b01	 add         r3, r3, #1, 22
  09d14	e283008c	 add         r0, r3, #0x8C
  09d18	eb000000	 bl          LeaveCriticalSection

; 3962 :                 
; 3963 :     //  Return result
; 3964 :     return bResult;

  09d1c	e59d3000	 ldr         r3, [sp]
  09d20	e58d3014	 str         r3, [sp, #0x14]

; 3965 : }

  09d24	e59d0014	 ldr         r0, [sp, #0x14]
  09d28	e28dd020	 add         sp, sp, #0x20
  09d2c	e89d6000	 ldmia       sp, {sp, lr}
  09d30	e12fff1e	 bx          lr
  09d34		 |$LN38@SetPowerLe|
  09d34		 |$LN39@SetPowerLe|
  09d34	00000000	 DCD         |?g_dwDestinationRefCnt@@3PAKA|
  09d38		 |$M40831|

			 ENDP  ; |?SetPowerLevel@OMAPDisplayController@@QAAHK@Z|, OMAPDisplayController::SetPowerLevel

	EXPORT	|?EnableTvOut@OMAPDisplayController@@QAAHH@Z| ; OMAPDisplayController::EnableTvOut

  000e8			 AREA	 |.pdata|, PDATA
|$T40841| DCD	|$LN11@EnableTvOu|
	DCD	0x40005904
; Function compile flags: /Odtp

  09d38			 AREA	 |.text|, CODE, ARM

  09d38		 |?EnableTvOut@OMAPDisplayController@@QAAHH@Z| PROC ; OMAPDisplayController::EnableTvOut

; 3972 : {

  09d38		 |$LN11@EnableTvOu|
  09d38	e1a0c00d	 mov         r12, sp
  09d3c	e92d0003	 stmdb       sp!, {r0, r1}
  09d40	e92d5000	 stmdb       sp!, {r12, lr}
  09d44	e24dd00c	 sub         sp, sp, #0xC
  09d48		 |$M40838|

; 3973 :     BOOL    bResult = FALSE;

  09d48	e3a03000	 mov         r3, #0
  09d4c	e58d3000	 str         r3, [sp]

; 3974 : 
; 3975 :     //  Access the regs
; 3976 :     if( AccessRegs() == FALSE )

  09d50	e59d0014	 ldr         r0, [sp, #0x14]
  09d54	eb000000	 bl          |?AccessRegs@OMAPDisplayController@@IAAHXZ|
  09d58	e58d0008	 str         r0, [sp, #8]
  09d5c	e59d3008	 ldr         r3, [sp, #8]
  09d60	e3530000	 cmp         r3, #0
  09d64	1a000001	 bne         |$LN6@EnableTvOu|
  09d68	ea000043	 b           |$LN5@EnableTvOu|

; 3977 :         goto cleanUp;

  09d6c	ea000042	 b           |$cleanUp$39437|
  09d70		 |$LN6@EnableTvOu|

; 3978 : 
; 3979 :     if (bEnable == m_bTVEnable)

  09d70	e59d3014	 ldr         r3, [sp, #0x14]
  09d74	e2833b01	 add         r3, r3, #1, 22
  09d78	e28330b4	 add         r3, r3, #0xB4
  09d7c	e59d2018	 ldr         r2, [sp, #0x18]
  09d80	e5933000	 ldr         r3, [r3]
  09d84	e1520003	 cmp         r2, r3
  09d88	1a000001	 bne         |$LN4@EnableTvOu|
  09d8c	ea00003a	 b           |$LN3@EnableTvOu|

; 3980 :         goto cleanUp;

  09d90	ea000039	 b           |$cleanUp$39437|
  09d94		 |$LN4@EnableTvOu|

; 3981 : 
; 3982 :     //  Enable/disable TV out
; 3983 :     if( bEnable )

  09d94	e59d3018	 ldr         r3, [sp, #0x18]
  09d98	e3530000	 cmp         r3, #0
  09d9c	0a00000d	 beq         |$LN2@EnableTvOu|

; 3984 :     {
; 3985 :         //  Enable TV out clock
; 3986 :         RequestClock( m_dssinfo.TVEncoderDevice );

  09da0	e59d3014	 ldr         r3, [sp, #0x14]
  09da4	e2833e52	 add         r3, r3, #0x52, 28
  09da8	e5931000	 ldr         r1, [r3]
  09dac	e59d0014	 ldr         r0, [sp, #0x14]
  09db0	eb000000	 bl          |?RequestClock@OMAPDisplayController@@IAAHK@Z|

; 3987 : 
; 3988 :         //  Restore the TV out registers
; 3989 :         RestoreRegisters( OMAP_DSS_DESTINATION_TVOUT );

  09db4	e3a01001	 mov         r1, #1
  09db8	e59d0014	 ldr         r0, [sp, #0x14]
  09dbc	eb000000	 bl          |?RestoreRegisters@OMAPDisplayController@@QAAHW4OMAP_DSS_DESTINATION@@@Z|

; 3990 :             
; 3991 :         m_bTVEnable = TRUE;         

  09dc0	e59d3014	 ldr         r3, [sp, #0x14]
  09dc4	e2833b01	 add         r3, r3, #1, 22
  09dc8	e28320b4	 add         r2, r3, #0xB4
  09dcc	e3a03001	 mov         r3, #1
  09dd0	e5823000	 str         r3, [r2]

; 3992 :     }
; 3993 :     else

  09dd4	ea000026	 b           |$LN1@EnableTvOu|
  09dd8		 |$LN2@EnableTvOu|

; 3994 :     {
; 3995 :         //  Disable TV out
; 3996 :         CLRREG32( &m_pDispRegs->DISPC_CONTROL, DISPC_CONTROL_DIGITALENABLE );

  09dd8	e59d3014	 ldr         r3, [sp, #0x14]
  09ddc	e2833008	 add         r3, r3, #8
  09de0	e5933000	 ldr         r3, [r3]
  09de4	e2833040	 add         r3, r3, #0x40
  09de8	e5932000	 ldr         r2, [r3]
  09dec	e3e03002	 mvn         r3, #2
  09df0	e0022003	 and         r2, r2, r3
  09df4	e59d3014	 ldr         r3, [sp, #0x14]
  09df8	e2833008	 add         r3, r3, #8
  09dfc	e5933000	 ldr         r3, [r3]
  09e00	e2833040	 add         r3, r3, #0x40
  09e04	e5832000	 str         r2, [r3]

; 3997 :         
; 3998 :         // Stop the VENC
; 3999 :         ResetVENC();

  09e08	e59d0014	 ldr         r0, [sp, #0x14]
  09e0c	eb000000	 bl          |?ResetVENC@OMAPDisplayController@@IAAHXZ|

; 4000 :  
; 4001 :         // Wait for the EVSYNC
; 4002 :         WaitForIRQ(DISPC_IRQSTATUS_EVSYNC_EVEN|DISPC_IRQSTATUS_EVSYNC_ODD);

  09e10	e3a0201e	 mov         r2, #0x1E
  09e14	e3a0100c	 mov         r1, #0xC
  09e18	e59d0014	 ldr         r0, [sp, #0x14]
  09e1c	eb000000	 bl          |?WaitForIRQ@OMAPDisplayController@@IAAHKK@Z|

; 4003 : 
; 4004 :         // clear all the pending interrupts
; 4005 :         SETREG32( &m_pDispRegs->DISPC_IRQSTATUS, DISPC_IRQSTATUS_EVSYNC_EVEN|DISPC_IRQSTATUS_EVSYNC_ODD);

  09e20	e59d3014	 ldr         r3, [sp, #0x14]
  09e24	e2833008	 add         r3, r3, #8
  09e28	e5933000	 ldr         r3, [r3]
  09e2c	e2833018	 add         r3, r3, #0x18
  09e30	e5933000	 ldr         r3, [r3]
  09e34	e383200c	 orr         r2, r3, #0xC
  09e38	e59d3014	 ldr         r3, [sp, #0x14]
  09e3c	e2833008	 add         r3, r3, #8
  09e40	e5933000	 ldr         r3, [r3]
  09e44	e2833018	 add         r3, r3, #0x18
  09e48	e5832000	 str         r2, [r3]

; 4006 :         
; 4007 :         //  Disable TV out clock
; 4008 :         ReleaseClock( m_dssinfo.TVEncoderDevice );

  09e4c	e59d3014	 ldr         r3, [sp, #0x14]
  09e50	e2833e52	 add         r3, r3, #0x52, 28
  09e54	e5931000	 ldr         r1, [r3]
  09e58	e59d0014	 ldr         r0, [sp, #0x14]
  09e5c	eb000000	 bl          |?ReleaseClock@OMAPDisplayController@@IAAHK@Z|

; 4009 : 
; 4010 :         m_bTVEnable = FALSE;       

  09e60	e59d3014	 ldr         r3, [sp, #0x14]
  09e64	e2833b01	 add         r3, r3, #1, 22
  09e68	e28320b4	 add         r2, r3, #0xB4
  09e6c	e3a03000	 mov         r3, #0
  09e70	e5823000	 str         r3, [r2]
  09e74		 |$LN1@EnableTvOu|

; 4011 :     }
; 4012 : 
; 4013 :     //  Success
; 4014 :     bResult = TRUE;

  09e74	e3a03001	 mov         r3, #1
  09e78	e58d3000	 str         r3, [sp]
  09e7c		 |$LN3@EnableTvOu|
  09e7c		 |$LN5@EnableTvOu|
  09e7c		 |$cleanUp$39437|

; 4015 : 
; 4016 : cleanUp:
; 4017 :     //  Release regs
; 4018 :     ReleaseRegs();

  09e7c	e59d0014	 ldr         r0, [sp, #0x14]
  09e80	eb000000	 bl          |?ReleaseRegs@OMAPDisplayController@@IAAHXZ|

; 4019 : 
; 4020 :     //  Return result
; 4021 :     return bResult;

  09e84	e59d3000	 ldr         r3, [sp]
  09e88	e58d3004	 str         r3, [sp, #4]

; 4022 : }

  09e8c	e59d0004	 ldr         r0, [sp, #4]
  09e90	e28dd00c	 add         sp, sp, #0xC
  09e94	e89d6000	 ldmia       sp, {sp, lr}
  09e98	e12fff1e	 bx          lr
  09e9c		 |$M40839|

			 ENDP  ; |?EnableTvOut@OMAPDisplayController@@QAAHH@Z|, OMAPDisplayController::EnableTvOut

	EXPORT	|?SetTvOutFilterLevel@OMAPDisplayController@@QAAHK@Z| ; OMAPDisplayController::SetTvOutFilterLevel

  000f0			 AREA	 |.pdata|, PDATA
|$T40847| DCD	|$LN5@SetTvOutFi|
	DCD	0x40000f04
; Function compile flags: /Odtp

  09e9c			 AREA	 |.text|, CODE, ARM

  09e9c		 |?SetTvOutFilterLevel@OMAPDisplayController@@QAAHK@Z| PROC ; OMAPDisplayController::SetTvOutFilterLevel

; 4029 : {

  09e9c		 |$LN5@SetTvOutFi|
  09e9c	e1a0c00d	 mov         r12, sp
  09ea0	e92d0003	 stmdb       sp!, {r0, r1}
  09ea4	e92d5000	 stmdb       sp!, {r12, lr}
  09ea8	e24dd004	 sub         sp, sp, #4
  09eac		 |$M40844|

; 4030 :     //  Set flicker filter level
; 4031 :     m_dwTVFilterLevel = dwTVFilterLevel;

  09eac	e59d300c	 ldr         r3, [sp, #0xC]
  09eb0	e2833b01	 add         r3, r3, #1, 22
  09eb4	e28320b8	 add         r2, r3, #0xB8
  09eb8	e59d3010	 ldr         r3, [sp, #0x10]
  09ebc	e5823000	 str         r3, [r2]

; 4032 :     return TRUE;

  09ec0	e3a03001	 mov         r3, #1
  09ec4	e58d3000	 str         r3, [sp]

; 4033 : }

  09ec8	e59d0000	 ldr         r0, [sp]
  09ecc	e28dd004	 add         sp, sp, #4
  09ed0	e89d6000	 ldmia       sp, {sp, lr}
  09ed4	e12fff1e	 bx          lr
  09ed8		 |$M40845|

			 ENDP  ; |?SetTvOutFilterLevel@OMAPDisplayController@@QAAHK@Z|, OMAPDisplayController::SetTvOutFilterLevel


  000f8			 AREA	 |.pdata|, PDATA
|$T40853| DCD	|$LN11@EnableHdmi|
	DCD	0x4000a204
; Function compile flags: /Odtp

  09ed8			 AREA	 |.text|, CODE, ARM

  09ed8		 |?EnableHdmi@OMAPDisplayController@@QAAHH@Z| PROC ; OMAPDisplayController::EnableHdmi

; 4040 : {

  09ed8		 |$LN11@EnableHdmi|
  09ed8	e1a0c00d	 mov         r12, sp
  09edc	e92d0003	 stmdb       sp!, {r0, r1}
  09ee0	e92d5000	 stmdb       sp!, {r12, lr}
  09ee4	e24dd018	 sub         sp, sp, #0x18
  09ee8		 |$M40850|

; 4041 :     BOOL    bResult = FALSE;

  09ee8	e3a03000	 mov         r3, #0
  09eec	e58d3004	 str         r3, [sp, #4]

; 4042 : 
; 4043 :     BOOL    bLPRState   = TRUE;

  09ef0	e3a03001	 mov         r3, #1
  09ef4	e58d3000	 str         r3, [sp]

; 4044 :     
; 4045 :     //  Access the regs
; 4046 :     if( AccessRegs() == FALSE )

  09ef8	e59d0020	 ldr         r0, [sp, #0x20]
  09efc	eb000000	 bl          |?AccessRegs@OMAPDisplayController@@IAAHXZ|
  09f00	e58d0014	 str         r0, [sp, #0x14]
  09f04	e59d3014	 ldr         r3, [sp, #0x14]
  09f08	e3530000	 cmp         r3, #0
  09f0c	1a000001	 bne         |$LN6@EnableHdmi|
  09f10	ea000086	 b           |$LN5@EnableHdmi|

; 4047 :         goto cleanUp;

  09f14	ea000085	 b           |$cleanUp$39460|
  09f18		 |$LN6@EnableHdmi|

; 4048 : 
; 4049 :     //  Enable or disable HDMI output
; 4050 :     if( bEnable )

  09f18	e59d3024	 ldr         r3, [sp, #0x24]
  09f1c	e3530000	 cmp         r3, #0
  09f20	0a00004c	 beq         |$LN4@EnableHdmi|

; 4051 :     {
; 4052 :         DWORD   dwX = (1280 - m_dwLcdWidth)/2,

  09f24	e59d3020	 ldr         r3, [sp, #0x20]
  09f28	e2833b01	 add         r3, r3, #1, 22
  09f2c	e28330a8	 add         r3, r3, #0xA8
  09f30	e5933000	 ldr         r3, [r3]
  09f34	e2631c05	 rsb         r1, r3, #5, 24
  09f38	e3a00002	 mov         r0, #2
  09f3c	eb000000	 bl          __rt_udiv
  09f40	e58d0008	 str         r0, [sp, #8]

; 4053 :                 dwY = (720 - m_dwLcdHeight)/2;

  09f44	e59d3020	 ldr         r3, [sp, #0x20]
  09f48	e2833b01	 add         r3, r3, #1, 22
  09f4c	e28330ac	 add         r3, r3, #0xAC
  09f50	e5933000	 ldr         r3, [r3]
  09f54	e2631e2d	 rsb         r1, r3, #0x2D, 28
  09f58	e3a00002	 mov         r0, #2
  09f5c	eb000000	 bl          __rt_udiv
  09f60	e58d000c	 str         r0, [sp, #0xC]

; 4054 : 
; 4055 :         m_dwPixelClock = OMAP_DSS_FCLKVALUE_HDMI/2;

  09f64	e59d3020	 ldr         r3, [sp, #0x20]
  09f68	e2832e4b	 add         r2, r3, #0x4B, 28
  09f6c	e59f31e8	 ldr         r3, [pc, #0x1E8]
  09f70	e5823000	 str         r3, [r2]

; 4056 :         
; 4057 :         //Save the configuration of internal LCD
; 4058 :         SaveRegisters( OMAP_DSS_DESTINATION_LCD );

  09f74	e3a01000	 mov         r1, #0
  09f78	e59d0020	 ldr         r0, [sp, #0x20]
  09f7c	eb000000	 bl          |?SaveRegisters@OMAPDisplayController@@QAAHW4OMAP_DSS_DESTINATION@@@Z|

; 4059 : 
; 4060 :         // Issue Power Down command to Internal LCD Panel
; 4061 :         LcdPdd_SetPowerLevel(D4);

  09f80	e3a00004	 mov         r0, #4
  09f84	eb000000	 bl          LcdPdd_SetPowerLevel

; 4062 :         
; 4063 :         // Disable LPR and configure DSI for HDMI clk
; 4064 :         bLPRState = FALSE;

  09f88	e3a03000	 mov         r3, #0
  09f8c	e58d3000	 str         r3, [sp]

; 4065 :         EnableLPR( bLPRState, TRUE );

  09f90	e3a02001	 mov         r2, #1
  09f94	e59d1000	 ldr         r1, [sp]
  09f98	e59d0020	 ldr         r0, [sp, #0x20]
  09f9c	eb000000	 bl          |?EnableLPR@OMAPDisplayController@@QAAXHH@Z|

; 4066 : 
; 4067 : 		//
; 4068 :         //  Configure the HDMI timing parameters
; 4069 :         //
; 4070 : 
; 4071 :         // Timing logic for HSYNC signal
; 4072 :         OUTREG32( &m_pDispRegs->DISPC_TIMING_H,
; 4073 :                     DISPC_TIMING_H_HSW(40) |
; 4074 :                     DISPC_TIMING_H_HFP(110) |
; 4075 :                     DISPC_TIMING_H_HBP(220)
; 4076 :                     );

  09fa0	e59d3020	 ldr         r3, [sp, #0x20]
  09fa4	e2833008	 add         r3, r3, #8
  09fa8	e5933000	 ldr         r3, [r3]
  09fac	e2832064	 add         r2, r3, #0x64
  09fb0	e59f31a0	 ldr         r3, [pc, #0x1A0]
  09fb4	e5823000	 str         r3, [r2]

; 4077 : 
; 4078 :         // Timing logic for VSYNC signal
; 4079 :         OUTREG32( &m_pDispRegs->DISPC_TIMING_V,
; 4080 :                     DISPC_TIMING_V_VSW(5) |
; 4081 :                     DISPC_TIMING_V_VFP(5) |
; 4082 :                     DISPC_TIMING_V_VBP(20)
; 4083 :                     );

  09fb8	e59d3020	 ldr         r3, [sp, #0x20]
  09fbc	e2833008	 add         r3, r3, #8
  09fc0	e5933000	 ldr         r3, [r3]
  09fc4	e2832068	 add         r2, r3, #0x68
  09fc8	e59f3184	 ldr         r3, [pc, #0x184]
  09fcc	e5823000	 str         r3, [r2]

; 4084 : 
; 4085 :         // Signal configuration
; 4086 :         OUTREG32( &m_pDispRegs->DISPC_POL_FREQ,
; 4087 :                     0
; 4088 :                     );

  09fd0	e59d3020	 ldr         r3, [sp, #0x20]
  09fd4	e2833008	 add         r3, r3, #8
  09fd8	e5933000	 ldr         r3, [r3]
  09fdc	e283206c	 add         r2, r3, #0x6C
  09fe0	e3a03000	 mov         r3, #0
  09fe4	e5823000	 str         r3, [r2]

; 4089 : 
; 4090 :         // Configures the divisor
; 4091 :         OUTREG32( &m_pDispRegs->DISPC_DIVISOR,
; 4092 :                     DISPC_DIVISOR_PCD(2) |
; 4093 :                     DISPC_DIVISOR_LCD(1)
; 4094 :                     );

  09fe8	e59d3020	 ldr         r3, [sp, #0x20]
  09fec	e2833008	 add         r3, r3, #8
  09ff0	e5933000	 ldr         r3, [r3]
  09ff4	e2832070	 add         r2, r3, #0x70
  09ff8	e3a03801	 mov         r3, #1, 16
  09ffc	e3833002	 orr         r3, r3, #2
  0a000	e5823000	 str         r3, [r2]

; 4095 : 
; 4096 : 
; 4097 :         // Configures the panel size
; 4098 :         OUTREG32( &m_pDispRegs->DISPC_SIZE_LCD,
; 4099 :                     DISPC_SIZE_LCD_LPP(720) |
; 4100 :                     DISPC_SIZE_LCD_PPL(1280)
; 4101 :                     );

  0a004	e59d3020	 ldr         r3, [sp, #0x20]
  0a008	e2833008	 add         r3, r3, #8
  0a00c	e5933000	 ldr         r3, [r3]
  0a010	e283207c	 add         r2, r3, #0x7C
  0a014	e59f3134	 ldr         r3, [pc, #0x134]
  0a018	e5823000	 str         r3, [r2]

; 4102 : 
; 4103 : 
; 4104 :         //  Center the output
; 4105 :         OUTREG32( &m_pDispRegs->DISPC_GFX_POSITION,
; 4106 :                     DISPC_GFX_POS_GFXPOSX(dwX) |
; 4107 :                     DISPC_GFX_POS_GFXPOSY(dwY)
; 4108 :                     );

  0a01c	e59d300c	 ldr         r3, [sp, #0xC]
  0a020	e1a02803	 mov         r2, r3, lsl #16
  0a024	e59d3008	 ldr         r3, [sp, #8]
  0a028	e1832002	 orr         r2, r3, r2
  0a02c	e59d3020	 ldr         r3, [sp, #0x20]
  0a030	e2833008	 add         r3, r3, #8
  0a034	e5933000	 ldr         r3, [r3]
  0a038	e2833088	 add         r3, r3, #0x88
  0a03c	e5832000	 str         r2, [r3]

; 4109 : 
; 4110 :         m_bHDMIEnable = TRUE;

  0a040	e59d3020	 ldr         r3, [sp, #0x20]
  0a044	e2833b01	 add         r3, r3, #1, 22
  0a048	e28320c8	 add         r2, r3, #0xC8
  0a04c	e3a03001	 mov         r3, #1
  0a050	e5823000	 str         r3, [r2]

; 4111 :     }
; 4112 :     else

  0a054	ea000025	 b           |$LN3@EnableHdmi|
  0a058		 |$LN4@EnableHdmi|

; 4113 :     {
; 4114 :         // Get the int LCD params
; 4115 :         LcdPdd_LCD_GetMode( (DWORD*) &m_eLcdPixelFormat,
; 4116 :                               &m_dwLcdWidth,
; 4117 :                               &m_dwLcdHeight,
; 4118 :                               &m_dwPixelClock
; 4119 :                               );

  0a058	e59d3020	 ldr         r3, [sp, #0x20]
  0a05c	e2833e4b	 add         r3, r3, #0x4B, 28
  0a060	e59d2020	 ldr         r2, [sp, #0x20]
  0a064	e2822b01	 add         r2, r2, #1, 22
  0a068	e28220ac	 add         r2, r2, #0xAC
  0a06c	e59d1020	 ldr         r1, [sp, #0x20]
  0a070	e2811b01	 add         r1, r1, #1, 22
  0a074	e28110a8	 add         r1, r1, #0xA8
  0a078	e59d0020	 ldr         r0, [sp, #0x20]
  0a07c	e2800b01	 add         r0, r0, #1, 22
  0a080	e28000a4	 add         r0, r0, #0xA4
  0a084	eb000000	 bl          LcdPdd_LCD_GetMode

; 4120 :         
; 4121 :         // Clear the HDMI at the beginning.
; 4122 :         // Required for restoring IntLCD context
; 4123 :         m_bHDMIEnable = FALSE;

  0a088	e59d3020	 ldr         r3, [sp, #0x20]
  0a08c	e2833b01	 add         r3, r3, #1, 22
  0a090	e28320c8	 add         r2, r3, #0xC8
  0a094	e3a03000	 mov         r3, #0
  0a098	e5823000	 str         r3, [r2]

; 4124 : 
; 4125 :         // Change the power state to LCD panel
; 4126 :         LcdPdd_SetPowerLevel(D0);

  0a09c	e3a00000	 mov         r0, #0
  0a0a0	eb000000	 bl          LcdPdd_SetPowerLevel

; 4127 : 
; 4128 :         // Restore internal LCD configurations
; 4129 :         RestoreRegisters(OMAP_DSS_DESTINATION_LCD);

  0a0a4	e3a01000	 mov         r1, #0
  0a0a8	e59d0020	 ldr         r0, [sp, #0x20]
  0a0ac	eb000000	 bl          |?RestoreRegisters@OMAPDisplayController@@QAAHW4OMAP_DSS_DESTINATION@@@Z|

; 4130 : 
; 4131 :         // Enable the LPR if the FIFO's are merged.
; 4132 :         if ( (INREG32( &m_pDispRegs->DISPC_CONFIG) & DISPC_CONFIG_FIFOMERGE ) )

  0a0b0	e59d3020	 ldr         r3, [sp, #0x20]
  0a0b4	e2833008	 add         r3, r3, #8
  0a0b8	e5933000	 ldr         r3, [r3]
  0a0bc	e2833044	 add         r3, r3, #0x44
  0a0c0	e5933000	 ldr         r3, [r3]
  0a0c4	e3130901	 tst         r3, #1, 18
  0a0c8	0a000002	 beq         |$LN2@EnableHdmi|

; 4133 :             bLPRState = TRUE;

  0a0cc	e3a03001	 mov         r3, #1
  0a0d0	e58d3000	 str         r3, [sp]

; 4134 :         else

  0a0d4	ea000001	 b           |$LN1@EnableHdmi|
  0a0d8		 |$LN2@EnableHdmi|

; 4135 :             bLPRState = FALSE;

  0a0d8	e3a03000	 mov         r3, #0
  0a0dc	e58d3000	 str         r3, [sp]
  0a0e0		 |$LN1@EnableHdmi|

; 4136 : 
; 4137 :         // Restore LPR if enabled and configure DSI to IntLCD FCLK
; 4138 :         EnableLPR( bLPRState, FALSE );

  0a0e0	e3a02000	 mov         r2, #0
  0a0e4	e59d1000	 ldr         r1, [sp]
  0a0e8	e59d0020	 ldr         r0, [sp, #0x20]
  0a0ec	eb000000	 bl          |?EnableLPR@OMAPDisplayController@@QAAXHH@Z|
  0a0f0		 |$LN3@EnableHdmi|

; 4139 :     }
; 4140 :     
; 4141 :     //  Flush shadow registers
; 4142 :     FlushRegs( DISPC_CONTROL_GOLCD );

  0a0f0	e3a01020	 mov         r1, #0x20
  0a0f4	e59d0020	 ldr         r0, [sp, #0x20]
  0a0f8	eb000000	 bl          |?FlushRegs@OMAPDisplayController@@IAAHK@Z|

; 4143 : 
; 4144 :     //  Enable the LCD
; 4145 :     SETREG32( &m_pDispRegs->DISPC_CONTROL, DISPC_CONTROL_LCDENABLE );

  0a0fc	e59d3020	 ldr         r3, [sp, #0x20]
  0a100	e2833008	 add         r3, r3, #8
  0a104	e5933000	 ldr         r3, [r3]
  0a108	e2833040	 add         r3, r3, #0x40
  0a10c	e5933000	 ldr         r3, [r3]
  0a110	e3832001	 orr         r2, r3, #1
  0a114	e59d3020	 ldr         r3, [sp, #0x20]
  0a118	e2833008	 add         r3, r3, #8
  0a11c	e5933000	 ldr         r3, [r3]
  0a120	e2833040	 add         r3, r3, #0x40
  0a124	e5832000	 str         r2, [r3]

; 4146 : 
; 4147 :     //  Success
; 4148 :     bResult = TRUE;

  0a128	e3a03001	 mov         r3, #1
  0a12c	e58d3004	 str         r3, [sp, #4]
  0a130		 |$LN5@EnableHdmi|
  0a130		 |$cleanUp$39460|

; 4149 : 
; 4150 : cleanUp:
; 4151 :     //  Release regs
; 4152 :     ReleaseRegs();

  0a130	e59d0020	 ldr         r0, [sp, #0x20]
  0a134	eb000000	 bl          |?ReleaseRegs@OMAPDisplayController@@IAAHXZ|

; 4153 : 
; 4154 :     //  Return result
; 4155 :     return bResult;

  0a138	e59d3004	 ldr         r3, [sp, #4]
  0a13c	e58d3010	 str         r3, [sp, #0x10]

; 4156 : }

  0a140	e59d0010	 ldr         r0, [sp, #0x10]
  0a144	e28dd018	 add         sp, sp, #0x18
  0a148	e89d6000	 ldmia       sp, {sp, lr}
  0a14c	e12fff1e	 bx          lr
  0a150		 |$LN12@EnableHdmi|
  0a150		 |$LN13@EnableHdmi|
  0a150	02cf04ff	 DCD         0x2cf04ff
  0a154		 |$LN14@EnableHdmi|
  0a154	01400505	 DCD         0x1400505
  0a158		 |$LN15@EnableHdmi|
  0a158	0dc06e28	 DCD         0xdc06e28
  0a15c		 |$LN16@EnableHdmi|
  0a15c	046cf710	 DCD         0x46cf710
  0a160		 |$M40851|

			 ENDP  ; |?EnableHdmi@OMAPDisplayController@@QAAHH@Z|, OMAPDisplayController::EnableHdmi

	EXPORT	|?DVISelect@OMAPDisplayController@@QAAHH@Z| ; OMAPDisplayController::DVISelect
	IMPORT	|LcdPdd_DVI_Select|

  00100			 AREA	 |.pdata|, PDATA
|$T40864| DCD	|$LN5@DVISelect|
	DCD	0x40000c04
; Function compile flags: /Odtp

  0a160			 AREA	 |.text|, CODE, ARM

  0a160		 |?DVISelect@OMAPDisplayController@@QAAHH@Z| PROC ; OMAPDisplayController::DVISelect

; 4162 : {

  0a160		 |$LN5@DVISelect|
  0a160	e1a0c00d	 mov         r12, sp
  0a164	e92d0003	 stmdb       sp!, {r0, r1}
  0a168	e92d5000	 stmdb       sp!, {r12, lr}
  0a16c	e24dd004	 sub         sp, sp, #4
  0a170		 |$M40861|

; 4163 :     LcdPdd_DVI_Select(bSelectDVI);

  0a170	e59d0010	 ldr         r0, [sp, #0x10]
  0a174	eb000000	 bl          LcdPdd_DVI_Select

; 4164 :     return TRUE;

  0a178	e3a03001	 mov         r3, #1
  0a17c	e58d3000	 str         r3, [sp]

; 4165 : }

  0a180	e59d0000	 ldr         r0, [sp]
  0a184	e28dd004	 add         sp, sp, #4
  0a188	e89d6000	 ldmia       sp, {sp, lr}
  0a18c	e12fff1e	 bx          lr
  0a190		 |$M40862|

			 ENDP  ; |?DVISelect@OMAPDisplayController@@QAAHH@Z|, OMAPDisplayController::DVISelect

	EXPORT	|?EnableDVI@OMAPDisplayController@@QAAHH@Z| ; OMAPDisplayController::EnableDVI

  00108			 AREA	 |.pdata|, PDATA
|$T40870| DCD	|$LN7@EnableDVI|
	DCD	0x40002804
; Function compile flags: /Odtp

  0a190			 AREA	 |.text|, CODE, ARM

  0a190		 |?EnableDVI@OMAPDisplayController@@QAAHH@Z| PROC ; OMAPDisplayController::EnableDVI

; 4172 : {

  0a190		 |$LN7@EnableDVI|
  0a190	e1a0c00d	 mov         r12, sp
  0a194	e92d0003	 stmdb       sp!, {r0, r1}
  0a198	e92d5000	 stmdb       sp!, {r12, lr}
  0a19c	e24dd008	 sub         sp, sp, #8
  0a1a0		 |$M40867|

; 4173 :     BOOL    bResult = FALSE;

  0a1a0	e3a03000	 mov         r3, #0
  0a1a4	e58d3000	 str         r3, [sp]

; 4174 : 
; 4175 :     //  Enable/disable DVI
; 4176 :     if ( bEnable )

  0a1a8	e59d3014	 ldr         r3, [sp, #0x14]
  0a1ac	e3530000	 cmp         r3, #0
  0a1b0	0a00000b	 beq         |$LN2@EnableDVI|

; 4177 :     {
; 4178 :         //  Enable DVI        
; 4179 :         LcdPdd_SetPowerLevel(D4);

  0a1b4	e3a00004	 mov         r0, #4
  0a1b8	eb000000	 bl          LcdPdd_SetPowerLevel

; 4180 :         LcdPdd_DVI_Select(TRUE);

  0a1bc	e3a00001	 mov         r0, #1
  0a1c0	eb000000	 bl          LcdPdd_DVI_Select

; 4181 :         LcdPdd_SetPowerLevel(D0);

  0a1c4	e3a00000	 mov         r0, #0
  0a1c8	eb000000	 bl          LcdPdd_SetPowerLevel

; 4182 :         m_bDVIEnable = TRUE;

  0a1cc	e59d3010	 ldr         r3, [sp, #0x10]
  0a1d0	e2833b01	 add         r3, r3, #1, 22
  0a1d4	e28320cc	 add         r2, r3, #0xCC
  0a1d8	e3a03001	 mov         r3, #1
  0a1dc	e5823000	 str         r3, [r2]

; 4183 :     }
; 4184 :     else

  0a1e0	ea00000a	 b           |$LN1@EnableDVI|
  0a1e4		 |$LN2@EnableDVI|

; 4185 :     {
; 4186 :         //  Disable DVI        
; 4187 :         LcdPdd_SetPowerLevel(D4);

  0a1e4	e3a00004	 mov         r0, #4
  0a1e8	eb000000	 bl          LcdPdd_SetPowerLevel

; 4188 :         LcdPdd_DVI_Select(FALSE);

  0a1ec	e3a00000	 mov         r0, #0
  0a1f0	eb000000	 bl          LcdPdd_DVI_Select

; 4189 :         LcdPdd_SetPowerLevel(D0);

  0a1f4	e3a00000	 mov         r0, #0
  0a1f8	eb000000	 bl          LcdPdd_SetPowerLevel

; 4190 :         m_bDVIEnable = FALSE;

  0a1fc	e59d3010	 ldr         r3, [sp, #0x10]
  0a200	e2833b01	 add         r3, r3, #1, 22
  0a204	e28320cc	 add         r2, r3, #0xCC
  0a208	e3a03000	 mov         r3, #0
  0a20c	e5823000	 str         r3, [r2]
  0a210		 |$LN1@EnableDVI|

; 4191 :     }
; 4192 : 
; 4193 :     //  Success
; 4194 :     bResult = TRUE;

  0a210	e3a03001	 mov         r3, #1
  0a214	e58d3000	 str         r3, [sp]

; 4195 : 
; 4196 :     //  Return result
; 4197 :     return bResult;

  0a218	e59d3000	 ldr         r3, [sp]
  0a21c	e58d3004	 str         r3, [sp, #4]

; 4198 : }

  0a220	e59d0004	 ldr         r0, [sp, #4]
  0a224	e28dd008	 add         sp, sp, #8
  0a228	e89d6000	 ldmia       sp, {sp, lr}
  0a22c	e12fff1e	 bx          lr
  0a230		 |$M40868|

			 ENDP  ; |?EnableDVI@OMAPDisplayController@@QAAHH@Z|, OMAPDisplayController::EnableDVI

	EXPORT	|??_C@_1HG@BPOMCJEE@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAM?$AAA?$AAP?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAR?$AAe@| [ DATA ] ; `string'

  00110			 AREA	 |.pdata|, PDATA
|$T40880| DCD	|$LN13@ResetDSS|
	DCD	0x40006604

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HG@BPOMCJEE@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAM?$AAA?$AAP?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAR?$AAe@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "M", 0x0, "A", 0x0, "P", 0x0, "D", 0x0, "i"
	DCB	0x0, "s", 0x0, "p", 0x0, "l", 0x0, "a", 0x0, "y", 0x0, "C"
	DCB	0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o", 0x0, "l"
	DCB	0x0, "l", 0x0, "e", 0x0, "r", 0x0, ":", 0x0, ":", 0x0, "R"
	DCB	0x0, "e", 0x0, "s", 0x0, "e", 0x0, "t", 0x0, "D", 0x0, "S"
	DCB	0x0, "S", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "r", 0x0, "e"
	DCB	0x0, "s", 0x0, "e", 0x0, "t", 0x0, " ", 0x0, "D", 0x0, "S"
	DCB	0x0, "S", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  0a230			 AREA	 |.text|, CODE, ARM

  0a230		 |?ResetDSS@OMAPDisplayController@@IAAHXZ| PROC ; OMAPDisplayController::ResetDSS

; 4204 : {

  0a230		 |$LN13@ResetDSS|
  0a230	e1a0c00d	 mov         r12, sp
  0a234	e92d0001	 stmdb       sp!, {r0}
  0a238	e92d5000	 stmdb       sp!, {r12, lr}
  0a23c	e24dd014	 sub         sp, sp, #0x14
  0a240		 |$M40877|

; 4205 :     DWORD   dwTimeout;
; 4206 :     DWORD   dwVal;
; 4207 : 
; 4208 :     //  Need to enable DSS1, DSS2 and TVOUT to reset controller
; 4209 :     RequestClock( m_dssinfo.DSSDevice );         

  0a240	e59d301c	 ldr         r3, [sp, #0x1C]
  0a244	e2833c05	 add         r3, r3, #5, 24
  0a248	e283301c	 add         r3, r3, #0x1C
  0a24c	e5931000	 ldr         r1, [r3]
  0a250	e59d001c	 ldr         r0, [sp, #0x1C]
  0a254	eb000000	 bl          |?RequestClock@OMAPDisplayController@@IAAHK@Z|

; 4210 :     RequestClock( m_dssinfo.TVEncoderDevice );

  0a258	e59d301c	 ldr         r3, [sp, #0x1C]
  0a25c	e2833e52	 add         r3, r3, #0x52, 28
  0a260	e5931000	 ldr         r1, [r3]
  0a264	e59d001c	 ldr         r0, [sp, #0x1C]
  0a268	eb000000	 bl          |?RequestClock@OMAPDisplayController@@IAAHK@Z|

; 4211 : 
; 4212 :     // check if digital output or the lcd output are enabled
; 4213 :     dwVal = INREG32(&m_pDispRegs->DISPC_CONTROL);

  0a26c	e59d301c	 ldr         r3, [sp, #0x1C]
  0a270	e2833008	 add         r3, r3, #8
  0a274	e5933000	 ldr         r3, [r3]
  0a278	e2833040	 add         r3, r3, #0x40
  0a27c	e5933000	 ldr         r3, [r3]
  0a280	e58d3000	 str         r3, [sp]

; 4214 : 
; 4215 :     if(dwVal & (DISPC_CONTROL_DIGITALENABLE | DISPC_CONTROL_LCDENABLE))

  0a284	e59d3000	 ldr         r3, [sp]
  0a288	e3130003	 tst         r3, #3
  0a28c	0a00000c	 beq         |$LN4@ResetDSS|

; 4216 :     {
; 4217 :         // disable the lcd output and digital output
; 4218 :         dwVal &= ~(DISPC_CONTROL_DIGITALENABLE | DISPC_CONTROL_LCDENABLE);

  0a290	e59d2000	 ldr         r2, [sp]
  0a294	e3e03003	 mvn         r3, #3
  0a298	e0023003	 and         r3, r2, r3
  0a29c	e58d3000	 str         r3, [sp]

; 4219 :         OUTREG32(&m_pDispRegs->DISPC_CONTROL, dwVal);

  0a2a0	e59d301c	 ldr         r3, [sp, #0x1C]
  0a2a4	e2833008	 add         r3, r3, #8
  0a2a8	e5933000	 ldr         r3, [r3]
  0a2ac	e2832040	 add         r2, r3, #0x40
  0a2b0	e59d3000	 ldr         r3, [sp]
  0a2b4	e5823000	 str         r3, [r2]

; 4220 : 
; 4221 :         // wait until frame is done
; 4222 :         WaitForFrameDone(DISPLAY_TIMEOUT);

  0a2b8	e3a0101e	 mov         r1, #0x1E
  0a2bc	e59d001c	 ldr         r0, [sp, #0x1C]
  0a2c0	eb000000	 bl          |?WaitForFrameDone@OMAPDisplayController@@IAAHK@Z|
  0a2c4		 |$LN4@ResetDSS|

; 4223 :     }
; 4224 : 
; 4225 : 
; 4226 :     //  Reset the whole display subsystem    
; 4227 :     SETREG32( &m_pDSSRegs->DSS_SYSCONFIG, DSS_SYSCONFIG_SOFTRESET );

  0a2c4	e59d301c	 ldr         r3, [sp, #0x1C]
  0a2c8	e2833004	 add         r3, r3, #4
  0a2cc	e5933000	 ldr         r3, [r3]
  0a2d0	e2833010	 add         r3, r3, #0x10
  0a2d4	e5933000	 ldr         r3, [r3]
  0a2d8	e3832002	 orr         r2, r3, #2
  0a2dc	e59d301c	 ldr         r3, [sp, #0x1C]
  0a2e0	e2833004	 add         r3, r3, #4
  0a2e4	e5933000	 ldr         r3, [r3]
  0a2e8	e2833010	 add         r3, r3, #0x10
  0a2ec	e5832000	 str         r2, [r3]

; 4228 :     
; 4229 :     //  Wait until reset completes OR timeout occurs
; 4230 :     dwTimeout=DISPLAY_TIMEOUT;

  0a2f0	e3a0301e	 mov         r3, #0x1E
  0a2f4	e58d3004	 str         r3, [sp, #4]
  0a2f8		 |$LN3@ResetDSS|

; 4231 :     while(((INREG32(&m_pDSSRegs->DSS_SYSSTATUS) & DSS_SYSSTATUS_RESETDONE) == 0) && (dwTimeout-- > 0))

  0a2f8	e59d301c	 ldr         r3, [sp, #0x1C]
  0a2fc	e2833004	 add         r3, r3, #4
  0a300	e5933000	 ldr         r3, [r3]
  0a304	e2833014	 add         r3, r3, #0x14
  0a308	e5933000	 ldr         r3, [r3]
  0a30c	e3130001	 tst         r3, #1
  0a310	1a000008	 bne         |$LN2@ResetDSS|
  0a314	e59d3004	 ldr         r3, [sp, #4]
  0a318	e3530000	 cmp         r3, #0
  0a31c	e59d3004	 ldr         r3, [sp, #4]
  0a320	e2433001	 sub         r3, r3, #1
  0a324	e58d3004	 str         r3, [sp, #4]
  0a328	9a000002	 bls         |$LN2@ResetDSS|

; 4232 :     {
; 4233 :         // delay
; 4234 :         Sleep(1);

  0a32c	e3a00001	 mov         r0, #1
  0a330	eb000000	 bl          Sleep

; 4235 :     }

  0a334	eaffffef	 b           |$LN3@ResetDSS|
  0a338		 |$LN2@ResetDSS|

; 4236 : 
; 4237 :     if( dwTimeout == 0 )

  0a338	e59d3004	 ldr         r3, [sp, #4]
  0a33c	e3530000	 cmp         r3, #0
  0a340	1a000006	 bne         |$LN1@ResetDSS|

; 4238 :     {
; 4239 :         DEBUGMSG(ZONE_ERROR, (L"ERROR: OMAPDisplayController::ResetDSS: "
; 4240 :              L"Failed reset DSS\r\n"
; 4241 :             ));

  0a344	e59f0078	 ldr         r0, [pc, #0x78]
  0a348	eb000000	 bl          NKDbgPrintfW
  0a34c	e3a03001	 mov         r3, #1
  0a350	e58d300c	 str         r3, [sp, #0xC]
  0a354	ea000001	 b           |$LN8@ResetDSS|
  0a358	e3a03000	 mov         r3, #0
  0a35c	e58d300c	 str         r3, [sp, #0xC]
  0a360		 |$LN8@ResetDSS|
  0a360		 |$LN1@ResetDSS|

; 4242 :     }
; 4243 : 
; 4244 :     //  Release clocks
; 4245 :     ReleaseClock( m_dssinfo.TVEncoderDevice );

  0a360	e59d301c	 ldr         r3, [sp, #0x1C]
  0a364	e2833e52	 add         r3, r3, #0x52, 28
  0a368	e5931000	 ldr         r1, [r3]
  0a36c	e59d001c	 ldr         r0, [sp, #0x1C]
  0a370	eb000000	 bl          |?ReleaseClock@OMAPDisplayController@@IAAHK@Z|

; 4246 :     ReleaseClock( m_dssinfo.DSSDevice );         

  0a374	e59d301c	 ldr         r3, [sp, #0x1C]
  0a378	e2833c05	 add         r3, r3, #5, 24
  0a37c	e283301c	 add         r3, r3, #0x1C
  0a380	e5931000	 ldr         r1, [r3]
  0a384	e59d001c	 ldr         r0, [sp, #0x1C]
  0a388	eb000000	 bl          |?ReleaseClock@OMAPDisplayController@@IAAHK@Z|

; 4247 :         
; 4248 :     //  Return result
; 4249 :     return (dwTimeout > 0);

  0a38c	e59d3004	 ldr         r3, [sp, #4]
  0a390	e3530000	 cmp         r3, #0
  0a394	9a000002	 bls         |$LN9@ResetDSS|
  0a398	e3a03001	 mov         r3, #1
  0a39c	e58d3010	 str         r3, [sp, #0x10]
  0a3a0	ea000001	 b           |$LN10@ResetDSS|
  0a3a4		 |$LN9@ResetDSS|
  0a3a4	e3a03000	 mov         r3, #0
  0a3a8	e58d3010	 str         r3, [sp, #0x10]
  0a3ac		 |$LN10@ResetDSS|
  0a3ac	e59d3010	 ldr         r3, [sp, #0x10]
  0a3b0	e58d3008	 str         r3, [sp, #8]

; 4250 : }

  0a3b4	e59d0008	 ldr         r0, [sp, #8]
  0a3b8	e28dd014	 add         sp, sp, #0x14
  0a3bc	e89d6000	 ldmia       sp, {sp, lr}
  0a3c0	e12fff1e	 bx          lr
  0a3c4		 |$LN14@ResetDSS|
  0a3c4		 |$LN15@ResetDSS|
  0a3c4	00000000	 DCD         |??_C@_1HG@BPOMCJEE@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAM?$AAA?$AAP?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAR?$AAe@|
  0a3c8		 |$M40878|

			 ENDP  ; |?ResetDSS@OMAPDisplayController@@IAAHXZ|, OMAPDisplayController::ResetDSS

	EXPORT	|??_C@_1HO@FBJPAINK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAM?$AAA?$AAP?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAR?$AAe@| [ DATA ] ; `string'
	EXPORT	|?ResetDISPC@OMAPDisplayController@@IAAHXZ| ; OMAPDisplayController::ResetDISPC

  00118			 AREA	 |.pdata|, PDATA
|$T40892| DCD	|$LN13@ResetDISPC|
	DCD	0x40005c04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HO@FBJPAINK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAM?$AAA?$AAP?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAR?$AAe@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "M", 0x0, "A", 0x0, "P", 0x0, "D", 0x0, "i"
	DCB	0x0, "s", 0x0, "p", 0x0, "l", 0x0, "a", 0x0, "y", 0x0, "C"
	DCB	0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o", 0x0, "l"
	DCB	0x0, "l", 0x0, "e", 0x0, "r", 0x0, ":", 0x0, ":", 0x0, "R"
	DCB	0x0, "e", 0x0, "s", 0x0, "e", 0x0, "t", 0x0, "D", 0x0, "I"
	DCB	0x0, "S", 0x0, "P", 0x0, "C", 0x0, ":", 0x0, " ", 0x0, "F"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "r", 0x0, "e", 0x0, "s", 0x0, "e", 0x0, "t", 0x0, " "
	DCB	0x0, "D", 0x0, "I", 0x0, "S", 0x0, "P", 0x0, "C", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  0a3c8			 AREA	 |.text|, CODE, ARM

  0a3c8		 |?ResetDISPC@OMAPDisplayController@@IAAHXZ| PROC ; OMAPDisplayController::ResetDISPC

; 4255 : {

  0a3c8		 |$LN13@ResetDISPC|
  0a3c8	e1a0c00d	 mov         r12, sp
  0a3cc	e92d0001	 stmdb       sp!, {r0}
  0a3d0	e92d5000	 stmdb       sp!, {r12, lr}
  0a3d4	e24dd014	 sub         sp, sp, #0x14
  0a3d8		 |$M40889|

; 4256 :     DWORD   dwVal;
; 4257 :     DWORD   dwTimeout;
; 4258 : 
; 4259 : 
; 4260 :     //  Need to enable DSS1, DSS2 and TVOUT to reset controller
; 4261 :     RequestClock( m_dssinfo.DSSDevice );         

  0a3d8	e59d301c	 ldr         r3, [sp, #0x1C]
  0a3dc	e2833c05	 add         r3, r3, #5, 24
  0a3e0	e283301c	 add         r3, r3, #0x1C
  0a3e4	e5931000	 ldr         r1, [r3]
  0a3e8	e59d001c	 ldr         r0, [sp, #0x1C]
  0a3ec	eb000000	 bl          |?RequestClock@OMAPDisplayController@@IAAHK@Z|

; 4262 : 
; 4263 :     // check if digital output or the lcd output are enabled
; 4264 :     dwVal = INREG32(&m_pDispRegs->DISPC_CONTROL);

  0a3f0	e59d301c	 ldr         r3, [sp, #0x1C]
  0a3f4	e2833008	 add         r3, r3, #8
  0a3f8	e5933000	 ldr         r3, [r3]
  0a3fc	e2833040	 add         r3, r3, #0x40
  0a400	e5933000	 ldr         r3, [r3]
  0a404	e58d3000	 str         r3, [sp]

; 4265 : 
; 4266 :     if(dwVal & (DISPC_CONTROL_DIGITALENABLE | DISPC_CONTROL_LCDENABLE))

  0a408	e59d3000	 ldr         r3, [sp]
  0a40c	e3130003	 tst         r3, #3
  0a410	0a00000c	 beq         |$LN4@ResetDISPC|

; 4267 :     {
; 4268 :         // disable the lcd output and digital output
; 4269 :         dwVal &= ~(DISPC_CONTROL_DIGITALENABLE | DISPC_CONTROL_LCDENABLE);

  0a414	e59d2000	 ldr         r2, [sp]
  0a418	e3e03003	 mvn         r3, #3
  0a41c	e0023003	 and         r3, r2, r3
  0a420	e58d3000	 str         r3, [sp]

; 4270 :         OUTREG32(&m_pDispRegs->DISPC_CONTROL, dwVal);

  0a424	e59d301c	 ldr         r3, [sp, #0x1C]
  0a428	e2833008	 add         r3, r3, #8
  0a42c	e5933000	 ldr         r3, [r3]
  0a430	e2832040	 add         r2, r3, #0x40
  0a434	e59d3000	 ldr         r3, [sp]
  0a438	e5823000	 str         r3, [r2]

; 4271 : 
; 4272 :         // wait until frame is done
; 4273 :         WaitForFrameDone(DISPLAY_TIMEOUT);

  0a43c	e3a0101e	 mov         r1, #0x1E
  0a440	e59d001c	 ldr         r0, [sp, #0x1C]
  0a444	eb000000	 bl          |?WaitForFrameDone@OMAPDisplayController@@IAAHK@Z|
  0a448		 |$LN4@ResetDISPC|

; 4274 :     }
; 4275 : 
; 4276 : 
; 4277 :     //  Reset the controller    
; 4278 :     SETREG32( &m_pDispRegs->DISPC_SYSCONFIG, DISPC_SYSCONFIG_SOFTRESET );

  0a448	e59d301c	 ldr         r3, [sp, #0x1C]
  0a44c	e2833008	 add         r3, r3, #8
  0a450	e5933000	 ldr         r3, [r3]
  0a454	e2833010	 add         r3, r3, #0x10
  0a458	e5933000	 ldr         r3, [r3]
  0a45c	e3832002	 orr         r2, r3, #2
  0a460	e59d301c	 ldr         r3, [sp, #0x1C]
  0a464	e2833008	 add         r3, r3, #8
  0a468	e5933000	 ldr         r3, [r3]
  0a46c	e2833010	 add         r3, r3, #0x10
  0a470	e5832000	 str         r2, [r3]

; 4279 :     
; 4280 :     //  Wait until reset completes OR timeout occurs
; 4281 :     dwTimeout=DISPLAY_TIMEOUT;

  0a474	e3a0301e	 mov         r3, #0x1E
  0a478	e58d3004	 str         r3, [sp, #4]
  0a47c		 |$LN3@ResetDISPC|

; 4282 :     while(((INREG32(&m_pDispRegs->DISPC_SYSSTATUS) & DISPC_SYSSTATUS_RESETDONE) == 0) && (dwTimeout-- > 0))

  0a47c	e59d301c	 ldr         r3, [sp, #0x1C]
  0a480	e2833008	 add         r3, r3, #8
  0a484	e5933000	 ldr         r3, [r3]
  0a488	e2833014	 add         r3, r3, #0x14
  0a48c	e5933000	 ldr         r3, [r3]
  0a490	e3130001	 tst         r3, #1
  0a494	1a000008	 bne         |$LN2@ResetDISPC|
  0a498	e59d3004	 ldr         r3, [sp, #4]
  0a49c	e3530000	 cmp         r3, #0
  0a4a0	e59d3004	 ldr         r3, [sp, #4]
  0a4a4	e2433001	 sub         r3, r3, #1
  0a4a8	e58d3004	 str         r3, [sp, #4]
  0a4ac	9a000002	 bls         |$LN2@ResetDISPC|

; 4283 :     {
; 4284 :         // delay
; 4285 :         Sleep(1);

  0a4b0	e3a00001	 mov         r0, #1
  0a4b4	eb000000	 bl          Sleep

; 4286 :     }

  0a4b8	eaffffef	 b           |$LN3@ResetDISPC|
  0a4bc		 |$LN2@ResetDISPC|

; 4287 : 
; 4288 :     if( dwTimeout == 0 )

  0a4bc	e59d3004	 ldr         r3, [sp, #4]
  0a4c0	e3530000	 cmp         r3, #0
  0a4c4	1a000006	 bne         |$LN1@ResetDISPC|

; 4289 :     {
; 4290 :         DEBUGMSG(ZONE_ERROR, (L"ERROR: OMAPDisplayController::ResetDISPC: "
; 4291 :              L"Failed reset DISPC\r\n"
; 4292 :             ));

  0a4c8	e59f0064	 ldr         r0, [pc, #0x64]
  0a4cc	eb000000	 bl          NKDbgPrintfW
  0a4d0	e3a03001	 mov         r3, #1
  0a4d4	e58d300c	 str         r3, [sp, #0xC]
  0a4d8	ea000001	 b           |$LN8@ResetDISPC|
  0a4dc	e3a03000	 mov         r3, #0
  0a4e0	e58d300c	 str         r3, [sp, #0xC]
  0a4e4		 |$LN8@ResetDISPC|
  0a4e4		 |$LN1@ResetDISPC|

; 4293 :     }
; 4294 : 
; 4295 :     //  Release clocks
; 4296 :     ReleaseClock( m_dssinfo.DSSDevice );         

  0a4e4	e59d301c	 ldr         r3, [sp, #0x1C]
  0a4e8	e2833c05	 add         r3, r3, #5, 24
  0a4ec	e283301c	 add         r3, r3, #0x1C
  0a4f0	e5931000	 ldr         r1, [r3]
  0a4f4	e59d001c	 ldr         r0, [sp, #0x1C]
  0a4f8	eb000000	 bl          |?ReleaseClock@OMAPDisplayController@@IAAHK@Z|

; 4297 :         
; 4298 :     //  Return result
; 4299 :     return (dwTimeout > 0);

  0a4fc	e59d3004	 ldr         r3, [sp, #4]
  0a500	e3530000	 cmp         r3, #0
  0a504	9a000002	 bls         |$LN9@ResetDISPC|
  0a508	e3a03001	 mov         r3, #1
  0a50c	e58d3010	 str         r3, [sp, #0x10]
  0a510	ea000001	 b           |$LN10@ResetDISPC|
  0a514		 |$LN9@ResetDISPC|
  0a514	e3a03000	 mov         r3, #0
  0a518	e58d3010	 str         r3, [sp, #0x10]
  0a51c		 |$LN10@ResetDISPC|
  0a51c	e59d3010	 ldr         r3, [sp, #0x10]
  0a520	e58d3008	 str         r3, [sp, #8]

; 4300 : }

  0a524	e59d0008	 ldr         r0, [sp, #8]
  0a528	e28dd014	 add         sp, sp, #0x14
  0a52c	e89d6000	 ldmia       sp, {sp, lr}
  0a530	e12fff1e	 bx          lr
  0a534		 |$LN14@ResetDISPC|
  0a534		 |$LN15@ResetDISPC|
  0a534	00000000	 DCD         |??_C@_1HO@FBJPAINK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAM?$AAA?$AAP?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAR?$AAe@|
  0a538		 |$M40890|

			 ENDP  ; |?ResetDISPC@OMAPDisplayController@@IAAHXZ|, OMAPDisplayController::ResetDISPC

	EXPORT	|??_C@_1HI@MFANFIAG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAM?$AAA?$AAP?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAR?$AAe@| [ DATA ] ; `string'

  00120			 AREA	 |.pdata|, PDATA
|$T40904| DCD	|$LN12@ResetVENC|
	DCD	0x40005004

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HI@MFANFIAG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAM?$AAA?$AAP?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAR?$AAe@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "M", 0x0, "A", 0x0, "P", 0x0, "D", 0x0, "i"
	DCB	0x0, "s", 0x0, "p", 0x0, "l", 0x0, "a", 0x0, "y", 0x0, "C"
	DCB	0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o", 0x0, "l"
	DCB	0x0, "l", 0x0, "e", 0x0, "r", 0x0, ":", 0x0, ":", 0x0, "R"
	DCB	0x0, "e", 0x0, "s", 0x0, "e", 0x0, "t", 0x0, "V", 0x0, "E"
	DCB	0x0, "N", 0x0, "C", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "r"
	DCB	0x0, "e", 0x0, "s", 0x0, "e", 0x0, "t", 0x0, " ", 0x0, "D"
	DCB	0x0, "S", 0x0, "S", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  0a538			 AREA	 |.text|, CODE, ARM

  0a538		 |?ResetVENC@OMAPDisplayController@@IAAHXZ| PROC ; OMAPDisplayController::ResetVENC

; 4305 : {

  0a538		 |$LN12@ResetVENC|
  0a538	e1a0c00d	 mov         r12, sp
  0a53c	e92d0001	 stmdb       sp!, {r0}
  0a540	e92d5000	 stmdb       sp!, {r12, lr}
  0a544	e24dd010	 sub         sp, sp, #0x10
  0a548		 |$M40901|

; 4306 :     DWORD   dwTimeout;
; 4307 : 
; 4308 : 
; 4309 :     //  Need to enable DSS1, DSS2 and TVOUT to reset video encoder
; 4310 :     RequestClock( m_dssinfo.TVEncoderDevice );         

  0a548	e59d3018	 ldr         r3, [sp, #0x18]
  0a54c	e2833e52	 add         r3, r3, #0x52, 28
  0a550	e5931000	 ldr         r1, [r3]
  0a554	e59d0018	 ldr         r0, [sp, #0x18]
  0a558	eb000000	 bl          |?RequestClock@OMAPDisplayController@@IAAHK@Z|

; 4311 : 
; 4312 :     
; 4313 :     //  Reset the video encoder   
; 4314 :     SETREG32( &m_pVencRegs->VENC_F_CONTROL, VENC_F_CONTROL_RESET );

  0a55c	e59d3018	 ldr         r3, [sp, #0x18]
  0a560	e283300c	 add         r3, r3, #0xC
  0a564	e5933000	 ldr         r3, [r3]
  0a568	e2833008	 add         r3, r3, #8
  0a56c	e5933000	 ldr         r3, [r3]
  0a570	e3832c01	 orr         r2, r3, #1, 24
  0a574	e59d3018	 ldr         r3, [sp, #0x18]
  0a578	e283300c	 add         r3, r3, #0xC
  0a57c	e5933000	 ldr         r3, [r3]
  0a580	e2833008	 add         r3, r3, #8
  0a584	e5832000	 str         r2, [r3]

; 4315 :     
; 4316 :     //  Wait until reset completes OR timeout occurs
; 4317 :     dwTimeout=DISPLAY_TIMEOUT;

  0a588	e3a0301e	 mov         r3, #0x1E
  0a58c	e58d3000	 str         r3, [sp]
  0a590		 |$LN3@ResetVENC|

; 4318 :     while(((INREG32(&m_pVencRegs->VENC_F_CONTROL) & VENC_F_CONTROL_RESET) == 0) && (dwTimeout-- > 0))

  0a590	e59d3018	 ldr         r3, [sp, #0x18]
  0a594	e283300c	 add         r3, r3, #0xC
  0a598	e5933000	 ldr         r3, [r3]
  0a59c	e2833008	 add         r3, r3, #8
  0a5a0	e5933000	 ldr         r3, [r3]
  0a5a4	e3130c01	 tst         r3, #1, 24
  0a5a8	1a000008	 bne         |$LN2@ResetVENC|
  0a5ac	e59d3000	 ldr         r3, [sp]
  0a5b0	e3530000	 cmp         r3, #0
  0a5b4	e59d3000	 ldr         r3, [sp]
  0a5b8	e2433001	 sub         r3, r3, #1
  0a5bc	e58d3000	 str         r3, [sp]
  0a5c0	9a000002	 bls         |$LN2@ResetVENC|

; 4319 :     {
; 4320 :         // delay
; 4321 :         Sleep(1);

  0a5c4	e3a00001	 mov         r0, #1
  0a5c8	eb000000	 bl          Sleep

; 4322 :     }

  0a5cc	eaffffef	 b           |$LN3@ResetVENC|
  0a5d0		 |$LN2@ResetVENC|

; 4323 : 
; 4324 :     if( dwTimeout == 0 )

  0a5d0	e59d3000	 ldr         r3, [sp]
  0a5d4	e3530000	 cmp         r3, #0
  0a5d8	1a000006	 bne         |$LN1@ResetVENC|

; 4325 :     {
; 4326 :         DEBUGMSG(ZONE_ERROR, (L"ERROR: OMAPDisplayController::ResetVENC: "
; 4327 :              L"Failed reset DSS\r\n"
; 4328 :             ));

  0a5dc	e59f0090	 ldr         r0, [pc, #0x90]
  0a5e0	eb000000	 bl          NKDbgPrintfW
  0a5e4	e3a03001	 mov         r3, #1
  0a5e8	e58d3008	 str         r3, [sp, #8]
  0a5ec	ea000001	 b           |$LN7@ResetVENC|
  0a5f0	e3a03000	 mov         r3, #0
  0a5f4	e58d3008	 str         r3, [sp, #8]
  0a5f8		 |$LN7@ResetVENC|
  0a5f8		 |$LN1@ResetVENC|

; 4329 :     }
; 4330 : 
; 4331 : 
; 4332 :     //  Clear video encoder F-control and SYNC Control regsiters
; 4333 :     OUTREG32( &m_pVencRegs->VENC_F_CONTROL, 0 );

  0a5f8	e59d3018	 ldr         r3, [sp, #0x18]
  0a5fc	e283300c	 add         r3, r3, #0xC
  0a600	e5933000	 ldr         r3, [r3]
  0a604	e2832008	 add         r2, r3, #8
  0a608	e3a03000	 mov         r3, #0
  0a60c	e5823000	 str         r3, [r2]

; 4334 :     OUTREG32( &m_pVencRegs->VENC_SYNC_CTRL, 0 );

  0a610	e59d3018	 ldr         r3, [sp, #0x18]
  0a614	e283300c	 add         r3, r3, #0xC
  0a618	e5933000	 ldr         r3, [r3]
  0a61c	e2832014	 add         r2, r3, #0x14
  0a620	e3a03000	 mov         r3, #0
  0a624	e5823000	 str         r3, [r2]

; 4335 : 
; 4336 : 
; 4337 :     //  Release clocks
; 4338 :     ReleaseClock( m_dssinfo.TVEncoderDevice );         

  0a628	e59d3018	 ldr         r3, [sp, #0x18]
  0a62c	e2833e52	 add         r3, r3, #0x52, 28
  0a630	e5931000	 ldr         r1, [r3]
  0a634	e59d0018	 ldr         r0, [sp, #0x18]
  0a638	eb000000	 bl          |?ReleaseClock@OMAPDisplayController@@IAAHK@Z|

; 4339 :         
; 4340 :     //  Return result
; 4341 :     return (dwTimeout > 0);

  0a63c	e59d3000	 ldr         r3, [sp]
  0a640	e3530000	 cmp         r3, #0
  0a644	9a000002	 bls         |$LN8@ResetVENC|
  0a648	e3a03001	 mov         r3, #1
  0a64c	e58d300c	 str         r3, [sp, #0xC]
  0a650	ea000001	 b           |$LN9@ResetVENC|
  0a654		 |$LN8@ResetVENC|
  0a654	e3a03000	 mov         r3, #0
  0a658	e58d300c	 str         r3, [sp, #0xC]
  0a65c		 |$LN9@ResetVENC|
  0a65c	e59d300c	 ldr         r3, [sp, #0xC]
  0a660	e58d3004	 str         r3, [sp, #4]

; 4342 : }

  0a664	e59d0004	 ldr         r0, [sp, #4]
  0a668	e28dd010	 add         sp, sp, #0x10
  0a66c	e89d6000	 ldmia       sp, {sp, lr}
  0a670	e12fff1e	 bx          lr
  0a674		 |$LN13@ResetVENC|
  0a674		 |$LN14@ResetVENC|
  0a674	00000000	 DCD         |??_C@_1HI@MFANFIAG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAM?$AAA?$AAP?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAR?$AAe@|
  0a678		 |$M40902|

			 ENDP  ; |?ResetVENC@OMAPDisplayController@@IAAHXZ|, OMAPDisplayController::ResetVENC


  00128			 AREA	 |.pdata|, PDATA
|$T40919| DCD	|$LN16@AccessRegs|
	DCD	0x40002704
; Function compile flags: /Odtp

  0a678			 AREA	 |.text|, CODE, ARM

  0a678		 |?AccessRegs@OMAPDisplayController@@IAAHXZ| PROC ; OMAPDisplayController::AccessRegs

; 4347 : {

  0a678		 |$LN16@AccessRegs|
  0a678	e1a0c00d	 mov         r12, sp
  0a67c	e92d0001	 stmdb       sp!, {r0}
  0a680	e92d5000	 stmdb       sp!, {r12, lr}
  0a684	e24dd00c	 sub         sp, sp, #0xC
  0a688		 |$M40916|

; 4348 :     BOOL    bResult = FALSE;

  0a688	e3a03000	 mov         r3, #0
  0a68c	e58d3000	 str         r3, [sp]

; 4349 : 
; 4350 :     //  Ensures that DSS regs can be accessed at current power level
; 4351 :     //  Locks power level at current level until ReleaseRegs called
; 4352 :     //  Returns FALSE if power level is too low to access regs
; 4353 : 
; 4354 :     //  Lock access to power level
; 4355 :     EnterCriticalSection( &m_csPowerLock );

  0a690	e59d3014	 ldr         r3, [sp, #0x14]
  0a694	e2833b01	 add         r3, r3, #1, 22
  0a698	e283008c	 add         r0, r3, #0x8C
  0a69c	eb000000	 bl          EnterCriticalSection

; 4356 :     
; 4357 :     //  Check power level
; 4358 :     switch( m_dwPowerLevel )

  0a6a0	e59d3014	 ldr         r3, [sp, #0x14]
  0a6a4	e2833b01	 add         r3, r3, #1, 22
  0a6a8	e2833088	 add         r3, r3, #0x88
  0a6ac	e5933000	 ldr         r3, [r3]
  0a6b0	e58d3008	 str         r3, [sp, #8]
  0a6b4	e59d3008	 ldr         r3, [sp, #8]
  0a6b8	e3530004	 cmp         r3, #4
  0a6bc	8a00000e	 bhi         |$LN3@AccessRegs|
  0a6c0	e59d2008	 ldr         r2, [sp, #8]
  0a6c4	e1a03102	 mov         r3, r2, lsl #2
  0a6c8	e083300f	 add         r3, r3, pc
  0a6cc	e5933004	 ldr         r3, [r3, #4]
  0a6d0	e08ff003	 add         pc, pc, r3
  0a6d4		 |$LN8@AccessRegs|
  0a6d4		 |$LN7@AccessRegs|
  0a6d4		 |$LN9@AccessRegs|
  0a6d4	00000010	 DCD         0x10
  0a6d8		 |$LN10@AccessRegs|
  0a6d8	00000010	 DCD         0x10
  0a6dc		 |$LN11@AccessRegs|
  0a6dc	00000010	 DCD         0x10
  0a6e0		 |$LN12@AccessRegs|
  0a6e0	0000001c	 DCD         0x1c
  0a6e4		 |$LN13@AccessRegs|
  0a6e4	0000001c	 DCD         0x1c
  0a6e8		 |$LN2@AccessRegs|

; 4359 :     {
; 4360 :         case D0:
; 4361 :         case D1:
; 4362 :         case D2:
; 4363 :             //  Clocks are on at this level
; 4364 :             bResult = TRUE;

  0a6e8	e3a03001	 mov         r3, #1
  0a6ec	e58d3000	 str         r3, [sp]

; 4365 :             break;

  0a6f0	ea000001	 b           |$LN3@AccessRegs|
  0a6f4		 |$LN1@AccessRegs|

; 4366 : 
; 4367 :         case D3:
; 4368 :         case D4:
; 4369 :             //  Clocks are off at this level
; 4370 :             bResult = FALSE;

  0a6f4	e3a03000	 mov         r3, #0
  0a6f8	e58d3000	 str         r3, [sp]
  0a6fc		 |$LN3@AccessRegs|

; 4371 :             break;
; 4372 :     }
; 4373 :     
; 4374 :     //  Return result
; 4375 :     return bResult;

  0a6fc	e59d3000	 ldr         r3, [sp]
  0a700	e58d3004	 str         r3, [sp, #4]

; 4376 : }

  0a704	e59d0004	 ldr         r0, [sp, #4]
  0a708	e28dd00c	 add         sp, sp, #0xC
  0a70c	e89d6000	 ldmia       sp, {sp, lr}
  0a710	e12fff1e	 bx          lr
  0a714		 |$M40917|

			 ENDP  ; |?AccessRegs@OMAPDisplayController@@IAAHXZ|, OMAPDisplayController::AccessRegs


  00130			 AREA	 |.pdata|, PDATA
|$T40925| DCD	|$LN5@ReleaseReg|
	DCD	0x40000e04
; Function compile flags: /Odtp

  0a714			 AREA	 |.text|, CODE, ARM

  0a714		 |?ReleaseRegs@OMAPDisplayController@@IAAHXZ| PROC ; OMAPDisplayController::ReleaseRegs

; 4381 : {

  0a714		 |$LN5@ReleaseReg|
  0a714	e1a0c00d	 mov         r12, sp
  0a718	e92d0001	 stmdb       sp!, {r0}
  0a71c	e92d5000	 stmdb       sp!, {r12, lr}
  0a720	e24dd004	 sub         sp, sp, #4
  0a724		 |$M40922|

; 4382 :     //  Releases power lock
; 4383 :     LeaveCriticalSection( &m_csPowerLock );

  0a724	e59d300c	 ldr         r3, [sp, #0xC]
  0a728	e2833b01	 add         r3, r3, #1, 22
  0a72c	e283008c	 add         r0, r3, #0x8C
  0a730	eb000000	 bl          LeaveCriticalSection

; 4384 :     return TRUE;

  0a734	e3a03001	 mov         r3, #1
  0a738	e58d3000	 str         r3, [sp]

; 4385 : }

  0a73c	e59d0000	 ldr         r0, [sp]
  0a740	e28dd004	 add         sp, sp, #4
  0a744	e89d6000	 ldmia       sp, {sp, lr}
  0a748	e12fff1e	 bx          lr
  0a74c		 |$M40923|

			 ENDP  ; |?ReleaseRegs@OMAPDisplayController@@IAAHXZ|, OMAPDisplayController::ReleaseRegs

	EXPORT	|??_C@_1IA@DPEDDICL@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAM?$AAA?$AAP?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAF?$AAl@| [ DATA ] ; `string'
	IMPORT	|StallExecution|

  00138			 AREA	 |.pdata|, PDATA
|$T40935| DCD	|$LN12@FlushRegs|
	DCD	0x40003e04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IA@DPEDDICL@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAM?$AAA?$AAP?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAF?$AAl@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "M", 0x0, "A", 0x0, "P", 0x0, "D", 0x0, "i"
	DCB	0x0, "s", 0x0, "p", 0x0, "l", 0x0, "a", 0x0, "y", 0x0, "C"
	DCB	0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o", 0x0, "l"
	DCB	0x0, "l", 0x0, "e", 0x0, "r", 0x0, ":", 0x0, ":", 0x0, "F"
	DCB	0x0, "l", 0x0, "u", 0x0, "s", 0x0, "h", 0x0, "R", 0x0, "e"
	DCB	0x0, "g", 0x0, "s", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "t"
	DCB	0x0, "o", 0x0, " ", 0x0, "f", 0x0, "l", 0x0, "u", 0x0, "s"
	DCB	0x0, "h", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "g", 0x0, "s"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  0a74c			 AREA	 |.text|, CODE, ARM

  0a74c		 |?FlushRegs@OMAPDisplayController@@IAAHK@Z| PROC ; OMAPDisplayController::FlushRegs

; 4392 : {

  0a74c		 |$LN12@FlushRegs|
  0a74c	e1a0c00d	 mov         r12, sp
  0a750	e92d0003	 stmdb       sp!, {r0, r1}
  0a754	e92d5000	 stmdb       sp!, {r12, lr}
  0a758	e24dd010	 sub         sp, sp, #0x10
  0a75c		 |$M40932|

; 4393 :     DWORD   dwTimeout = DISPLAY_TIMEOUT;

  0a75c	e3a0301e	 mov         r3, #0x1E
  0a760	e58d3000	 str         r3, [sp]
  0a764		 |$LN3@FlushRegs|

; 4394 : 
; 4395 :     //  Ensure that registers can be flushed
; 4396 :     while(((INREG32(&m_pDispRegs->DISPC_CONTROL) & dwDestGo) == dwDestGo) &&  (dwTimeout-- > 0))

  0a764	e59d3018	 ldr         r3, [sp, #0x18]
  0a768	e2833008	 add         r3, r3, #8
  0a76c	e5933000	 ldr         r3, [r3]
  0a770	e2833040	 add         r3, r3, #0x40
  0a774	e5932000	 ldr         r2, [r3]
  0a778	e59d301c	 ldr         r3, [sp, #0x1C]
  0a77c	e0022003	 and         r2, r2, r3
  0a780	e59d301c	 ldr         r3, [sp, #0x1C]
  0a784	e1520003	 cmp         r2, r3
  0a788	1a000008	 bne         |$LN2@FlushRegs|
  0a78c	e59d3000	 ldr         r3, [sp]
  0a790	e3530000	 cmp         r3, #0
  0a794	e59d3000	 ldr         r3, [sp]
  0a798	e2433001	 sub         r3, r3, #1
  0a79c	e58d3000	 str         r3, [sp]
  0a7a0	9a000002	 bls         |$LN2@FlushRegs|

; 4397 :     {
; 4398 :         // delay
; 4399 :         StallExecution(10);

  0a7a4	e3a0000a	 mov         r0, #0xA
  0a7a8	eb000000	 bl          StallExecution

; 4400 :     }

  0a7ac	eaffffec	 b           |$LN3@FlushRegs|
  0a7b0		 |$LN2@FlushRegs|

; 4401 : 
; 4402 :     if( dwTimeout == 0 )

  0a7b0	e59d3000	 ldr         r3, [sp]
  0a7b4	e3530000	 cmp         r3, #0
  0a7b8	1a000006	 bne         |$LN1@FlushRegs|

; 4403 :     {
; 4404 :         DEBUGMSG(ZONE_ERROR, (L"ERROR: OMAPDisplayController::FlushRegs: "
; 4405 :              L"Failed to flush regs\r\n"
; 4406 :             ));

  0a7bc	e59f007c	 ldr         r0, [pc, #0x7C]
  0a7c0	eb000000	 bl          NKDbgPrintfW
  0a7c4	e3a03001	 mov         r3, #1
  0a7c8	e58d3008	 str         r3, [sp, #8]
  0a7cc	ea000001	 b           |$LN7@FlushRegs|
  0a7d0	e3a03000	 mov         r3, #0
  0a7d4	e58d3008	 str         r3, [sp, #8]
  0a7d8		 |$LN7@FlushRegs|
  0a7d8		 |$LN1@FlushRegs|

; 4407 :     }
; 4408 : 
; 4409 :     //  Flush the shadow registers
; 4410 :     SETREG32( &m_pDispRegs->DISPC_CONTROL, dwDestGo );

  0a7d8	e59d3018	 ldr         r3, [sp, #0x18]
  0a7dc	e2833008	 add         r3, r3, #8
  0a7e0	e5933000	 ldr         r3, [r3]
  0a7e4	e2833040	 add         r3, r3, #0x40
  0a7e8	e5932000	 ldr         r2, [r3]
  0a7ec	e59d301c	 ldr         r3, [sp, #0x1C]
  0a7f0	e1822003	 orr         r2, r2, r3
  0a7f4	e59d3018	 ldr         r3, [sp, #0x18]
  0a7f8	e2833008	 add         r3, r3, #8
  0a7fc	e5933000	 ldr         r3, [r3]
  0a800	e2833040	 add         r3, r3, #0x40
  0a804	e5832000	 str         r2, [r3]

; 4411 : 
; 4412 : 
; 4413 :     //  Return result
; 4414 :     return (dwTimeout > 0);

  0a808	e59d3000	 ldr         r3, [sp]
  0a80c	e3530000	 cmp         r3, #0
  0a810	9a000002	 bls         |$LN8@FlushRegs|
  0a814	e3a03001	 mov         r3, #1
  0a818	e58d300c	 str         r3, [sp, #0xC]
  0a81c	ea000001	 b           |$LN9@FlushRegs|
  0a820		 |$LN8@FlushRegs|
  0a820	e3a03000	 mov         r3, #0
  0a824	e58d300c	 str         r3, [sp, #0xC]
  0a828		 |$LN9@FlushRegs|
  0a828	e59d300c	 ldr         r3, [sp, #0xC]
  0a82c	e58d3004	 str         r3, [sp, #4]

; 4415 : }

  0a830	e59d0004	 ldr         r0, [sp, #4]
  0a834	e28dd010	 add         sp, sp, #0x10
  0a838	e89d6000	 ldmia       sp, {sp, lr}
  0a83c	e12fff1e	 bx          lr
  0a840		 |$LN13@FlushRegs|
  0a840		 |$LN14@FlushRegs|
  0a840	00000000	 DCD         |??_C@_1IA@DPEDDICL@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAM?$AAA?$AAP?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAF?$AAl@|
  0a844		 |$M40933|

			 ENDP  ; |?FlushRegs@OMAPDisplayController@@IAAHK@Z|, OMAPDisplayController::FlushRegs


  00140			 AREA	 |.pdata|, PDATA
|$T40947| DCD	|$LN12@WaitForFlu|
	DCD	0x40003204
; Function compile flags: /Odtp

  0a844			 AREA	 |.text|, CODE, ARM

  0a844		 |?WaitForFlushDone@OMAPDisplayController@@IAAHK@Z| PROC ; OMAPDisplayController::WaitForFlushDone

; 4422 : {

  0a844		 |$LN12@WaitForFlu|
  0a844	e1a0c00d	 mov         r12, sp
  0a848	e92d0003	 stmdb       sp!, {r0, r1}
  0a84c	e92d5000	 stmdb       sp!, {r12, lr}
  0a850	e24dd010	 sub         sp, sp, #0x10
  0a854		 |$M40944|

; 4423 :     DWORD dwTimeout = DISPLAY_TIMEOUT;

  0a854	e3a0301e	 mov         r3, #0x1E
  0a858	e58d3000	 str         r3, [sp]
  0a85c		 |$LN3@WaitForFlu|

; 4424 :     
; 4425 :     //  Ensure that registers can be flushed
; 4426 :     while(((INREG32(&m_pDispRegs->DISPC_CONTROL) & dwDestGo) == dwDestGo) &&  (dwTimeout-- > 0))

  0a85c	e59d3018	 ldr         r3, [sp, #0x18]
  0a860	e2833008	 add         r3, r3, #8
  0a864	e5933000	 ldr         r3, [r3]
  0a868	e2833040	 add         r3, r3, #0x40
  0a86c	e5932000	 ldr         r2, [r3]
  0a870	e59d301c	 ldr         r3, [sp, #0x1C]
  0a874	e0022003	 and         r2, r2, r3
  0a878	e59d301c	 ldr         r3, [sp, #0x1C]
  0a87c	e1520003	 cmp         r2, r3
  0a880	1a000008	 bne         |$LN2@WaitForFlu|
  0a884	e59d3000	 ldr         r3, [sp]
  0a888	e3530000	 cmp         r3, #0
  0a88c	e59d3000	 ldr         r3, [sp]
  0a890	e2433001	 sub         r3, r3, #1
  0a894	e58d3000	 str         r3, [sp]
  0a898	9a000002	 bls         |$LN2@WaitForFlu|

; 4427 :     {
; 4428 :         // delay = 1ms
; 4429 :         Sleep(1);

  0a89c	e3a00001	 mov         r0, #1
  0a8a0	eb000000	 bl          Sleep

; 4430 :     }

  0a8a4	eaffffec	 b           |$LN3@WaitForFlu|
  0a8a8		 |$LN2@WaitForFlu|

; 4431 :     
; 4432 :     if( dwTimeout == 0 )

  0a8a8	e59d3000	 ldr         r3, [sp]
  0a8ac	e3530000	 cmp         r3, #0
  0a8b0	1a000006	 bne         |$LN1@WaitForFlu|

; 4433 :     {
; 4434 :         DEBUGMSG(ZONE_ERROR, (L"ERROR: OMAPDisplayController::FlushRegs: "
; 4435 :              L"Failed to flush regs\r\n"
; 4436 :             ));

  0a8b4	e59f004c	 ldr         r0, [pc, #0x4C]
  0a8b8	eb000000	 bl          NKDbgPrintfW
  0a8bc	e3a03001	 mov         r3, #1
  0a8c0	e58d3008	 str         r3, [sp, #8]
  0a8c4	ea000001	 b           |$LN7@WaitForFlu|
  0a8c8	e3a03000	 mov         r3, #0
  0a8cc	e58d3008	 str         r3, [sp, #8]
  0a8d0		 |$LN7@WaitForFlu|
  0a8d0		 |$LN1@WaitForFlu|

; 4437 :     }
; 4438 :     
; 4439 :     return (dwTimeout > 0);

  0a8d0	e59d3000	 ldr         r3, [sp]
  0a8d4	e3530000	 cmp         r3, #0
  0a8d8	9a000002	 bls         |$LN8@WaitForFlu|
  0a8dc	e3a03001	 mov         r3, #1
  0a8e0	e58d300c	 str         r3, [sp, #0xC]
  0a8e4	ea000001	 b           |$LN9@WaitForFlu|
  0a8e8		 |$LN8@WaitForFlu|
  0a8e8	e3a03000	 mov         r3, #0
  0a8ec	e58d300c	 str         r3, [sp, #0xC]
  0a8f0		 |$LN9@WaitForFlu|
  0a8f0	e59d300c	 ldr         r3, [sp, #0xC]
  0a8f4	e58d3004	 str         r3, [sp, #4]

; 4440 :     
; 4441 : }    

  0a8f8	e59d0004	 ldr         r0, [sp, #4]
  0a8fc	e28dd010	 add         sp, sp, #0x10
  0a900	e89d6000	 ldmia       sp, {sp, lr}
  0a904	e12fff1e	 bx          lr
  0a908		 |$LN13@WaitForFlu|
  0a908		 |$LN14@WaitForFlu|
  0a908	00000000	 DCD         |??_C@_1IA@DPEDDICL@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAM?$AAA?$AAP?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAF?$AAl@|
  0a90c		 |$M40945|

			 ENDP  ; |?WaitForFlushDone@OMAPDisplayController@@IAAHK@Z|, OMAPDisplayController::WaitForFlushDone


  00148			 AREA	 |.pdata|, PDATA
|$T40955| DCD	|$LN5@RequestClo|
	DCD	0x40000e04
; Function compile flags: /Odtp

  0a90c			 AREA	 |.text|, CODE, ARM

  0a90c		 |?RequestClock@OMAPDisplayController@@IAAHK@Z| PROC ; OMAPDisplayController::RequestClock

; 4447 : {

  0a90c		 |$LN5@RequestClo|
  0a90c	e1a0c00d	 mov         r12, sp
  0a910	e92d0003	 stmdb       sp!, {r0, r1}
  0a914	e92d5000	 stmdb       sp!, {r12, lr}
  0a918	e24dd008	 sub         sp, sp, #8
  0a91c		 |$M40952|

; 4448 :     return EnableDeviceClocks(dwClock, TRUE);

  0a91c	e3a01001	 mov         r1, #1
  0a920	e59d0014	 ldr         r0, [sp, #0x14]
  0a924	eb000000	 bl          EnableDeviceClocks
  0a928	e58d0004	 str         r0, [sp, #4]
  0a92c	e59d3004	 ldr         r3, [sp, #4]
  0a930	e58d3000	 str         r3, [sp]

; 4449 : }

  0a934	e59d0000	 ldr         r0, [sp]
  0a938	e28dd008	 add         sp, sp, #8
  0a93c	e89d6000	 ldmia       sp, {sp, lr}
  0a940	e12fff1e	 bx          lr
  0a944		 |$M40953|

			 ENDP  ; |?RequestClock@OMAPDisplayController@@IAAHK@Z|, OMAPDisplayController::RequestClock


  00150			 AREA	 |.pdata|, PDATA
|$T40961| DCD	|$LN5@ReleaseClo|
	DCD	0x40000e04
; Function compile flags: /Odtp

  0a944			 AREA	 |.text|, CODE, ARM

  0a944		 |?ReleaseClock@OMAPDisplayController@@IAAHK@Z| PROC ; OMAPDisplayController::ReleaseClock

; 4456 : {

  0a944		 |$LN5@ReleaseClo|
  0a944	e1a0c00d	 mov         r12, sp
  0a948	e92d0003	 stmdb       sp!, {r0, r1}
  0a94c	e92d5000	 stmdb       sp!, {r12, lr}
  0a950	e24dd008	 sub         sp, sp, #8
  0a954		 |$M40958|

; 4457 :     return EnableDeviceClocks(dwClock, FALSE);

  0a954	e3a01000	 mov         r1, #0
  0a958	e59d0014	 ldr         r0, [sp, #0x14]
  0a95c	eb000000	 bl          EnableDeviceClocks
  0a960	e58d0004	 str         r0, [sp, #4]
  0a964	e59d3004	 ldr         r3, [sp, #4]
  0a968	e58d3000	 str         r3, [sp]

; 4458 : }

  0a96c	e59d0000	 ldr         r0, [sp]
  0a970	e28dd008	 add         sp, sp, #8
  0a974	e89d6000	 ldmia       sp, {sp, lr}
  0a978	e12fff1e	 bx          lr
  0a97c		 |$M40959|

			 ENDP  ; |?ReleaseClock@OMAPDisplayController@@IAAHK@Z|, OMAPDisplayController::ReleaseClock

	EXPORT	|??_C@_1HE@ILBONFCG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAM?$AAA?$AAP?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAW?$AAa@| [ DATA ] ; `string'

  00158			 AREA	 |.pdata|, PDATA
|$T40969| DCD	|$LN10@WaitForFra|
	DCD	0x40003404

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HE@ILBONFCG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAM?$AAA?$AAP?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAW?$AAa@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "M", 0x0, "A", 0x0, "P", 0x0, "D", 0x0, "i"
	DCB	0x0, "s", 0x0, "p", 0x0, "l", 0x0, "a", 0x0, "y", 0x0, "C"
	DCB	0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o", 0x0, "l"
	DCB	0x0, "l", 0x0, "e", 0x0, "r", 0x0, ":", 0x0, ":", 0x0, "W"
	DCB	0x0, "a", 0x0, "i", 0x0, "t", 0x0, "F", 0x0, "o", 0x0, "r"
	DCB	0x0, "F", 0x0, "r", 0x0, "a", 0x0, "m", 0x0, "e", 0x0, "D"
	DCB	0x0, "o", 0x0, "n", 0x0, "e", 0x0, ":", 0x0, " ", 0x0, "t"
	DCB	0x0, "i", 0x0, "m", 0x0, "e", 0x0, "o", 0x0, "u", 0x0, "t"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  0a97c			 AREA	 |.text|, CODE, ARM

  0a97c		 |?WaitForFrameDone@OMAPDisplayController@@IAAHK@Z| PROC ; OMAPDisplayController::WaitForFrameDone

; 4465 : {

  0a97c		 |$LN10@WaitForFra|
  0a97c	e1a0c00d	 mov         r12, sp
  0a980	e92d0003	 stmdb       sp!, {r0, r1}
  0a984	e92d5000	 stmdb       sp!, {r12, lr}
  0a988	e24dd008	 sub         sp, sp, #8
  0a98c		 |$M40966|

; 4466 :     //  Wait for VYSNC status
; 4467 :     OUTREG32( &m_pDispRegs->DISPC_IRQSTATUS, DISPC_IRQSTATUS_FRAMEDONE );

  0a98c	e59d3010	 ldr         r3, [sp, #0x10]
  0a990	e2833008	 add         r3, r3, #8
  0a994	e5933000	 ldr         r3, [r3]
  0a998	e2832018	 add         r2, r3, #0x18
  0a99c	e3a03001	 mov         r3, #1
  0a9a0	e5823000	 str         r3, [r2]
  0a9a4		 |$LN3@WaitForFra|

; 4468 :     while (((INREG32(&m_pDispRegs->DISPC_IRQSTATUS) & DISPC_IRQSTATUS_FRAMEDONE) == 0) && (dwTimeout-- > 0))

  0a9a4	e59d3010	 ldr         r3, [sp, #0x10]
  0a9a8	e2833008	 add         r3, r3, #8
  0a9ac	e5933000	 ldr         r3, [r3]
  0a9b0	e2833018	 add         r3, r3, #0x18
  0a9b4	e5933000	 ldr         r3, [r3]
  0a9b8	e3130001	 tst         r3, #1
  0a9bc	1a000008	 bne         |$LN2@WaitForFra|
  0a9c0	e59d3014	 ldr         r3, [sp, #0x14]
  0a9c4	e3530000	 cmp         r3, #0
  0a9c8	e59d3014	 ldr         r3, [sp, #0x14]
  0a9cc	e2433001	 sub         r3, r3, #1
  0a9d0	e58d3014	 str         r3, [sp, #0x14]
  0a9d4	9a000002	 bls         |$LN2@WaitForFra|

; 4469 :     {
; 4470 :         // delay
; 4471 :         Sleep(1);

  0a9d8	e3a00001	 mov         r0, #1
  0a9dc	eb000000	 bl          Sleep

; 4472 :     }

  0a9e0	eaffffef	 b           |$LN3@WaitForFra|
  0a9e4		 |$LN2@WaitForFra|

; 4473 : 
; 4474 :     if ( dwTimeout == 0 )

  0a9e4	e59d3014	 ldr         r3, [sp, #0x14]
  0a9e8	e3530000	 cmp         r3, #0
  0a9ec	1a000009	 bne         |$LN1@WaitForFra|

; 4475 :     {
; 4476 :         DEBUGMSG(ZONE_ERROR, (L"ERROR: OMAPDisplayController::WaitForFrameDone: timeout\r\n"));

  0a9f0	e59f0050	 ldr         r0, [pc, #0x50]
  0a9f4	eb000000	 bl          NKDbgPrintfW
  0a9f8	e3a03001	 mov         r3, #1
  0a9fc	e58d3004	 str         r3, [sp, #4]
  0aa00	ea000001	 b           |$LN7@WaitForFra|
  0aa04	e3a03000	 mov         r3, #0
  0aa08	e58d3004	 str         r3, [sp, #4]
  0aa0c		 |$LN7@WaitForFra|

; 4477 :         return FALSE;

  0aa0c	e3a03000	 mov         r3, #0
  0aa10	e58d3000	 str         r3, [sp]
  0aa14	ea000007	 b           |$LN4@WaitForFra|
  0aa18		 |$LN1@WaitForFra|

; 4478 :     }
; 4479 : 
; 4480 :     //  Clear the status
; 4481 :     OUTREG32( &m_pDispRegs->DISPC_IRQSTATUS, DISPC_IRQSTATUS_FRAMEDONE );

  0aa18	e59d3010	 ldr         r3, [sp, #0x10]
  0aa1c	e2833008	 add         r3, r3, #8
  0aa20	e5933000	 ldr         r3, [r3]
  0aa24	e2832018	 add         r2, r3, #0x18
  0aa28	e3a03001	 mov         r3, #1
  0aa2c	e5823000	 str         r3, [r2]

; 4482 : 
; 4483 :     return TRUE;

  0aa30	e3a03001	 mov         r3, #1
  0aa34	e58d3000	 str         r3, [sp]
  0aa38		 |$LN4@WaitForFra|

; 4484 : }

  0aa38	e59d0000	 ldr         r0, [sp]
  0aa3c	e28dd008	 add         sp, sp, #8
  0aa40	e89d6000	 ldmia       sp, {sp, lr}
  0aa44	e12fff1e	 bx          lr
  0aa48		 |$LN11@WaitForFra|
  0aa48		 |$LN12@WaitForFra|
  0aa48	00000000	 DCD         |??_C@_1HE@ILBONFCG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAM?$AAA?$AAP?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAW?$AAa@|
  0aa4c		 |$M40967|

			 ENDP  ; |?WaitForFrameDone@OMAPDisplayController@@IAAHK@Z|, OMAPDisplayController::WaitForFrameDone

	EXPORT	|??_C@_1KO@DPMCANME@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAM?$AAA?$AAP?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAW?$AAa@| [ DATA ] ; `string'

  00160			 AREA	 |.pdata|, PDATA
|$T40979| DCD	|$LN12@WaitForIRQ|
	DCD	0x40004904

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KO@DPMCANME@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAM?$AAA?$AAP?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAW?$AAa@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "M", 0x0, "A", 0x0, "P", 0x0, "D", 0x0, "i"
	DCB	0x0, "s", 0x0, "p", 0x0, "l", 0x0, "a", 0x0, "y", 0x0, "C"
	DCB	0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o", 0x0, "l"
	DCB	0x0, "l", 0x0, "e", 0x0, "r", 0x0, ":", 0x0, ":", 0x0, "W"
	DCB	0x0, "a", 0x0, "i", 0x0, "t", 0x0, "F", 0x0, "o", 0x0, "r"
	DCB	0x0, "I", 0x0, "R", 0x0, "Q", 0x0, ":", 0x0, " ", 0x0, "I"
	DCB	0x0, "R", 0x0, "Q", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "X", 0x0, " ", 0x0, "f", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "t"
	DCB	0x0, "o", 0x0, " ", 0x0, "h", 0x0, "a", 0x0, "p", 0x0, "p"
	DCB	0x0, "e", 0x0, "n", 0x0, " ", 0x0, "b", 0x0, "e", 0x0, "f"
	DCB	0x0, "o", 0x0, "r", 0x0, "e", 0x0, " ", 0x0, "t", 0x0, "i"
	DCB	0x0, "m", 0x0, "e", 0x0, "o", 0x0, "u", 0x0, "t", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  0aa4c			 AREA	 |.text|, CODE, ARM

  0aa4c		 |?WaitForIRQ@OMAPDisplayController@@IAAHKK@Z| PROC ; OMAPDisplayController::WaitForIRQ

; 4492 : {

  0aa4c		 |$LN12@WaitForIRQ|
  0aa4c	e1a0c00d	 mov         r12, sp
  0aa50	e92d0007	 stmdb       sp!, {r0 - r2}
  0aa54	e92d5000	 stmdb       sp!, {r12, lr}
  0aa58	e24dd00c	 sub         sp, sp, #0xC
  0aa5c		 |$M40976|

; 4493 :     if(AccessRegs() == FALSE)

  0aa5c	e59d0014	 ldr         r0, [sp, #0x14]
  0aa60	eb000000	 bl          |?AccessRegs@OMAPDisplayController@@IAAHXZ|
  0aa64	e58d0004	 str         r0, [sp, #4]
  0aa68	e59d3004	 ldr         r3, [sp, #4]
  0aa6c	e3530000	 cmp         r3, #0
  0aa70	1a000001	 bne         |$LN5@WaitForIRQ|
  0aa74	ea000034	 b           |$LN4@WaitForIRQ|

; 4494 :     {
; 4495 :         goto cleanup;

  0aa78	ea000033	 b           |$cleanup$39620|
  0aa7c		 |$LN5@WaitForIRQ|

; 4496 :     }
; 4497 : 
; 4498 : 
; 4499 :     //  Wait for VYSNC status
; 4500 :     SETREG32( &m_pDispRegs->DISPC_IRQSTATUS, dwIRQ );

  0aa7c	e59d3014	 ldr         r3, [sp, #0x14]
  0aa80	e2833008	 add         r3, r3, #8
  0aa84	e5933000	 ldr         r3, [r3]
  0aa88	e2833018	 add         r3, r3, #0x18
  0aa8c	e5932000	 ldr         r2, [r3]
  0aa90	e59d3018	 ldr         r3, [sp, #0x18]
  0aa94	e1822003	 orr         r2, r2, r3
  0aa98	e59d3014	 ldr         r3, [sp, #0x14]
  0aa9c	e2833008	 add         r3, r3, #8
  0aaa0	e5933000	 ldr         r3, [r3]
  0aaa4	e2833018	 add         r3, r3, #0x18
  0aaa8	e5832000	 str         r2, [r3]
  0aaac		 |$LN3@WaitForIRQ|

; 4501 :     while(((INREG32(&m_pDispRegs->DISPC_IRQSTATUS) & dwIRQ) == 0) && (dwTimeout-- > 0))

  0aaac	e59d3014	 ldr         r3, [sp, #0x14]
  0aab0	e2833008	 add         r3, r3, #8
  0aab4	e5933000	 ldr         r3, [r3]
  0aab8	e2833018	 add         r3, r3, #0x18
  0aabc	e5932000	 ldr         r2, [r3]
  0aac0	e59d3018	 ldr         r3, [sp, #0x18]
  0aac4	e1120003	 tst         r2, r3
  0aac8	1a000008	 bne         |$LN2@WaitForIRQ|
  0aacc	e59d301c	 ldr         r3, [sp, #0x1C]
  0aad0	e3530000	 cmp         r3, #0
  0aad4	e59d301c	 ldr         r3, [sp, #0x1C]
  0aad8	e2433001	 sub         r3, r3, #1
  0aadc	e58d301c	 str         r3, [sp, #0x1C]
  0aae0	9a000002	 bls         |$LN2@WaitForIRQ|

; 4502 :     {
; 4503 :         // delay
; 4504 :         Sleep(1);

  0aae4	e3a00001	 mov         r0, #1
  0aae8	eb000000	 bl          Sleep

; 4505 :     }

  0aaec	eaffffee	 b           |$LN3@WaitForIRQ|
  0aaf0		 |$LN2@WaitForIRQ|

; 4506 : 
; 4507 :     if( dwTimeout == 0 )

  0aaf0	e59d301c	 ldr         r3, [sp, #0x1C]
  0aaf4	e3530000	 cmp         r3, #0
  0aaf8	1a000007	 bne         |$LN1@WaitForIRQ|

; 4508 :     {
; 4509 :         DEBUGMSG(ZONE_ERROR, (L"ERROR: OMAPDisplayController::WaitForIRQ: "
; 4510 :              L"IRQ = 0x%X failed to happen before timeout\r\n", dwIRQ
; 4511 :             ));

  0aafc	e59d1018	 ldr         r1, [sp, #0x18]
  0ab00	e59f0064	 ldr         r0, [pc, #0x64]
  0ab04	eb000000	 bl          NKDbgPrintfW
  0ab08	e3a03001	 mov         r3, #1
  0ab0c	e58d3008	 str         r3, [sp, #8]
  0ab10	ea000001	 b           |$LN9@WaitForIRQ|
  0ab14	e3a03000	 mov         r3, #0
  0ab18	e58d3008	 str         r3, [sp, #8]
  0ab1c		 |$LN9@WaitForIRQ|
  0ab1c		 |$LN1@WaitForIRQ|

; 4512 :     }
; 4513 : 
; 4514 :     //  Clear the status
; 4515 :     SETREG32( &m_pDispRegs->DISPC_IRQSTATUS, dwIRQ );

  0ab1c	e59d3014	 ldr         r3, [sp, #0x14]
  0ab20	e2833008	 add         r3, r3, #8
  0ab24	e5933000	 ldr         r3, [r3]
  0ab28	e2833018	 add         r3, r3, #0x18
  0ab2c	e5932000	 ldr         r2, [r3]
  0ab30	e59d3018	 ldr         r3, [sp, #0x18]
  0ab34	e1822003	 orr         r2, r2, r3
  0ab38	e59d3014	 ldr         r3, [sp, #0x14]
  0ab3c	e2833008	 add         r3, r3, #8
  0ab40	e5933000	 ldr         r3, [r3]
  0ab44	e2833018	 add         r3, r3, #0x18
  0ab48	e5832000	 str         r2, [r3]
  0ab4c		 |$LN4@WaitForIRQ|
  0ab4c		 |$cleanup$39620|

; 4516 :     
; 4517 : cleanup:
; 4518 : 
; 4519 :     ReleaseRegs();

  0ab4c	e59d0014	 ldr         r0, [sp, #0x14]
  0ab50	eb000000	 bl          |?ReleaseRegs@OMAPDisplayController@@IAAHXZ|

; 4520 : 
; 4521 :     //  Status
; 4522 :     return TRUE;

  0ab54	e3a03001	 mov         r3, #1
  0ab58	e58d3000	 str         r3, [sp]

; 4523 : }

  0ab5c	e59d0000	 ldr         r0, [sp]
  0ab60	e28dd00c	 add         sp, sp, #0xC
  0ab64	e89d6000	 ldmia       sp, {sp, lr}
  0ab68	e12fff1e	 bx          lr
  0ab6c		 |$LN13@WaitForIRQ|
  0ab6c		 |$LN14@WaitForIRQ|
  0ab6c	00000000	 DCD         |??_C@_1KO@DPMCANME@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAM?$AAA?$AAP?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAW?$AAa@|
  0ab70		 |$M40977|

			 ENDP  ; |?WaitForIRQ@OMAPDisplayController@@IAAHKK@Z|, OMAPDisplayController::WaitForIRQ

	EXPORT	|?PixelFormatToPixelSize@OMAPDisplayController@@SAKW4OMAP_DSS_PIXELFORMAT@@@Z| ; OMAPDisplayController::PixelFormatToPixelSize

  00168			 AREA	 |.pdata|, PDATA
|$T40998| DCD	|$LN20@PixelForma@2|
	DCD	0x40002704
; Function compile flags: /Odtp

  0ab70			 AREA	 |.text|, CODE, ARM

  0ab70		 |?PixelFormatToPixelSize@OMAPDisplayController@@SAKW4OMAP_DSS_PIXELFORMAT@@@Z| PROC ; OMAPDisplayController::PixelFormatToPixelSize

; 4530 : {

  0ab70		 |$LN20@PixelForma@2|
  0ab70	e1a0c00d	 mov         r12, sp
  0ab74	e92d0001	 stmdb       sp!, {r0}
  0ab78	e92d5000	 stmdb       sp!, {r12, lr}
  0ab7c	e24dd00c	 sub         sp, sp, #0xC
  0ab80		 |$M40995|

; 4531 :     DWORD   dwResult = 1;

  0ab80	e3a03001	 mov         r3, #1
  0ab84	e58d3000	 str         r3, [sp]

; 4532 :     
; 4533 :     //  Convert pixel format into bytes per pixel
; 4534 :     switch( ePixelFormat )

  0ab88	e59d3014	 ldr         r3, [sp, #0x14]
  0ab8c	e58d3008	 str         r3, [sp, #8]
  0ab90	e59d3008	 ldr         r3, [sp, #8]
  0ab94	e2433005	 sub         r3, r3, #5
  0ab98	e58d3008	 str         r3, [sp, #8]
  0ab9c	e59d3008	 ldr         r3, [sp, #8]
  0aba0	e3530008	 cmp         r3, #8
  0aba4	8a000012	 bhi         |$LN3@PixelForma@2|
  0aba8	e59d2008	 ldr         r2, [sp, #8]
  0abac	e1a03102	 mov         r3, r2, lsl #2
  0abb0	e083300f	 add         r3, r3, pc
  0abb4	e5933004	 ldr         r3, [r3, #4]
  0abb8	e08ff003	 add         pc, pc, r3
  0abbc		 |$LN8@PixelForma@2|
  0abbc		 |$LN7@PixelForma@2|
  0abbc		 |$LN9@PixelForma@2|
  0abbc	00000020	 DCD         0x20
  0abc0		 |$LN10@PixelForma@2|
  0abc0	00000020	 DCD         0x20
  0abc4		 |$LN11@PixelForma@2|
  0abc4	00000034	 DCD         0x34
  0abc8		 |$LN12@PixelForma@2|
  0abc8	0000002c	 DCD         0x2c
  0abcc		 |$LN13@PixelForma@2|
  0abcc	00000034	 DCD         0x34
  0abd0		 |$LN14@PixelForma@2|
  0abd0	00000020	 DCD         0x20
  0abd4		 |$LN15@PixelForma@2|
  0abd4	00000020	 DCD         0x20
  0abd8		 |$LN16@PixelForma@2|
  0abd8	0000002c	 DCD         0x2c
  0abdc		 |$LN17@PixelForma@2|
  0abdc	0000002c	 DCD         0x2c
  0abe0		 |$LN2@PixelForma@2|

; 4535 :     {
; 4536 :         case OMAP_DSS_PIXELFORMAT_RGB16:
; 4537 :         case OMAP_DSS_PIXELFORMAT_ARGB16:
; 4538 :         case OMAP_DSS_PIXELFORMAT_YUV2:
; 4539 :         case OMAP_DSS_PIXELFORMAT_UYVY:
; 4540 :             //  2 bytes per pixel
; 4541 :             dwResult = 2;

  0abe0	e3a03002	 mov         r3, #2
  0abe4	e58d3000	 str         r3, [sp]

; 4542 :             break;

  0abe8	ea000001	 b           |$LN3@PixelForma@2|
  0abec		 |$LN1@PixelForma@2|

; 4543 : 
; 4544 :         case OMAP_DSS_PIXELFORMAT_RGB32:
; 4545 :         case OMAP_DSS_PIXELFORMAT_ARGB32:
; 4546 :         case OMAP_DSS_PIXELFORMAT_RGBA32:
; 4547 :             //  4 bytes per pixel
; 4548 :             dwResult = 4;

  0abec	e3a03004	 mov         r3, #4
  0abf0	e58d3000	 str         r3, [sp]
  0abf4		 |$LN3@PixelForma@2|

; 4549 :             break;
; 4550 :     }
; 4551 : 
; 4552 :     //  Return result
; 4553 :     return dwResult;

  0abf4	e59d3000	 ldr         r3, [sp]
  0abf8	e58d3004	 str         r3, [sp, #4]

; 4554 : }

  0abfc	e59d0004	 ldr         r0, [sp, #4]
  0ac00	e28dd00c	 add         sp, sp, #0xC
  0ac04	e89d6000	 ldmia       sp, {sp, lr}
  0ac08	e12fff1e	 bx          lr
  0ac0c		 |$M40996|

			 ENDP  ; |?PixelFormatToPixelSize@OMAPDisplayController@@SAKW4OMAP_DSS_PIXELFORMAT@@@Z|, OMAPDisplayController::PixelFormatToPixelSize

	EXPORT	|?EnableVSyncInterruptEx@OMAPDisplayController@@QAAHXZ| ; OMAPDisplayController::EnableVSyncInterruptEx

  00170			 AREA	 |.pdata|, PDATA
|$T41006| DCD	|$LN11@EnableVSyn|
	DCD	0x40005304
; Function compile flags: /Odtp

  0ac0c			 AREA	 |.text|, CODE, ARM

  0ac0c		 |?EnableVSyncInterruptEx@OMAPDisplayController@@QAAHXZ| PROC ; OMAPDisplayController::EnableVSyncInterruptEx

; 4558 : {

  0ac0c		 |$LN11@EnableVSyn|
  0ac0c	e1a0c00d	 mov         r12, sp
  0ac10	e92d0001	 stmdb       sp!, {r0}
  0ac14	e92d5000	 stmdb       sp!, {r12, lr}
  0ac18	e24dd014	 sub         sp, sp, #0x14
  0ac1c		 |$M41003|

; 4559 :     BOOL bInterruptAlreadyEnabled = FALSE;

  0ac1c	e3a03000	 mov         r3, #0
  0ac20	e58d3000	 str         r3, [sp]

; 4560 :     DWORD irqEnableStatus;
; 4561 :     
; 4562 :     if (!m_dwEnableWaitForVerticalBlank)

  0ac24	e59d301c	 ldr         r3, [sp, #0x1C]
  0ac28	e2833c05	 add         r3, r3, #5, 24
  0ac2c	e5933000	 ldr         r3, [r3]
  0ac30	e3530000	 cmp         r3, #0
  0ac34	1a000002	 bne         |$LN4@EnableVSyn|

; 4563 :         return FALSE;

  0ac38	e3a03000	 mov         r3, #0
  0ac3c	e58d3008	 str         r3, [sp, #8]
  0ac40	ea000040	 b           |$LN5@EnableVSyn|
  0ac44		 |$LN4@EnableVSyn|

; 4564 : 
; 4565 :     if(AccessRegs() == FALSE)

  0ac44	e59d001c	 ldr         r0, [sp, #0x1C]
  0ac48	eb000000	 bl          |?AccessRegs@OMAPDisplayController@@IAAHXZ|
  0ac4c	e58d000c	 str         r0, [sp, #0xC]
  0ac50	e59d300c	 ldr         r3, [sp, #0xC]
  0ac54	e3530000	 cmp         r3, #0
  0ac58	1a000001	 bne         |$LN3@EnableVSyn|
  0ac5c	ea000035	 b           |$LN2@EnableVSyn|

; 4566 :     {
; 4567 :         goto cleanup;

  0ac60	ea000034	 b           |$cleanup$39652|
  0ac64		 |$LN3@EnableVSyn|

; 4568 :     }
; 4569 : 
; 4570 :     irqEnableStatus = INREG32(&m_pDispRegs->DISPC_IRQENABLE);

  0ac64	e59d301c	 ldr         r3, [sp, #0x1C]
  0ac68	e2833008	 add         r3, r3, #8
  0ac6c	e5933000	 ldr         r3, [r3]
  0ac70	e283301c	 add         r3, r3, #0x1C
  0ac74	e5933000	 ldr         r3, [r3]
  0ac78	e58d3004	 str         r3, [sp, #4]

; 4571 :     bInterruptAlreadyEnabled = ((irqEnableStatus & DISPC_IRQENABLE_VSYNC) == DISPC_IRQENABLE_VSYNC) ||
; 4572 :                                 ((irqEnableStatus & DISPC_IRQSTATUS_EVSYNC_EVEN) == DISPC_IRQSTATUS_EVSYNC_EVEN) ||
; 4573 :                                 ((irqEnableStatus & DISPC_IRQSTATUS_EVSYNC_ODD) == DISPC_IRQSTATUS_EVSYNC_ODD);

  0ac7c	e59d3004	 ldr         r3, [sp, #4]
  0ac80	e2033002	 and         r3, r3, #2
  0ac84	e3530002	 cmp         r3, #2
  0ac88	0a00000a	 beq         |$LN7@EnableVSyn|
  0ac8c	e59d3004	 ldr         r3, [sp, #4]
  0ac90	e2033004	 and         r3, r3, #4
  0ac94	e3530004	 cmp         r3, #4
  0ac98	0a000006	 beq         |$LN7@EnableVSyn|
  0ac9c	e59d3004	 ldr         r3, [sp, #4]
  0aca0	e2033008	 and         r3, r3, #8
  0aca4	e3530008	 cmp         r3, #8
  0aca8	0a000002	 beq         |$LN7@EnableVSyn|
  0acac	e3a03000	 mov         r3, #0
  0acb0	e58d3010	 str         r3, [sp, #0x10]
  0acb4	ea000001	 b           |$LN8@EnableVSyn|
  0acb8		 |$LN7@EnableVSyn|
  0acb8	e3a03001	 mov         r3, #1
  0acbc	e58d3010	 str         r3, [sp, #0x10]
  0acc0		 |$LN8@EnableVSyn|
  0acc0	e59d3010	 ldr         r3, [sp, #0x10]
  0acc4	e58d3000	 str         r3, [sp]

; 4574 :                         
; 4575 :                                 
; 4576 :     
; 4577 :     SETREG32(&m_pDispRegs->DISPC_IRQENABLE, DISPC_IRQENABLE_VSYNC);

  0acc8	e59d301c	 ldr         r3, [sp, #0x1C]
  0accc	e2833008	 add         r3, r3, #8
  0acd0	e5933000	 ldr         r3, [r3]
  0acd4	e283301c	 add         r3, r3, #0x1C
  0acd8	e5933000	 ldr         r3, [r3]
  0acdc	e3832002	 orr         r2, r3, #2
  0ace0	e59d301c	 ldr         r3, [sp, #0x1C]
  0ace4	e2833008	 add         r3, r3, #8
  0ace8	e5933000	 ldr         r3, [r3]
  0acec	e283301c	 add         r3, r3, #0x1C
  0acf0	e5832000	 str         r2, [r3]

; 4578 :     if(m_bTVEnable == TRUE)

  0acf4	e59d301c	 ldr         r3, [sp, #0x1C]
  0acf8	e2833b01	 add         r3, r3, #1, 22
  0acfc	e28330b4	 add         r3, r3, #0xB4
  0ad00	e5933000	 ldr         r3, [r3]
  0ad04	e3530001	 cmp         r3, #1
  0ad08	1a00000a	 bne         |$LN1@EnableVSyn|

; 4579 :     {
; 4580 :         SETREG32(&m_pDispRegs->DISPC_IRQENABLE, DISPC_IRQENABLE_EVSYNC_EVEN | DISPC_IRQENABLE_EVSYNC_ODD);

  0ad0c	e59d301c	 ldr         r3, [sp, #0x1C]
  0ad10	e2833008	 add         r3, r3, #8
  0ad14	e5933000	 ldr         r3, [r3]
  0ad18	e283301c	 add         r3, r3, #0x1C
  0ad1c	e5933000	 ldr         r3, [r3]
  0ad20	e383200c	 orr         r2, r3, #0xC
  0ad24	e59d301c	 ldr         r3, [sp, #0x1C]
  0ad28	e2833008	 add         r3, r3, #8
  0ad2c	e5933000	 ldr         r3, [r3]
  0ad30	e283301c	 add         r3, r3, #0x1C
  0ad34	e5832000	 str         r2, [r3]
  0ad38		 |$LN1@EnableVSyn|
  0ad38		 |$LN2@EnableVSyn|
  0ad38		 |$cleanup$39652|

; 4581 :     }
; 4582 : 
; 4583 : 
; 4584 : cleanup:
; 4585 : 
; 4586 :     ReleaseRegs();

  0ad38	e59d001c	 ldr         r0, [sp, #0x1C]
  0ad3c	eb000000	 bl          |?ReleaseRegs@OMAPDisplayController@@IAAHXZ|

; 4587 :     return bInterruptAlreadyEnabled;

  0ad40	e59d3000	 ldr         r3, [sp]
  0ad44	e58d3008	 str         r3, [sp, #8]
  0ad48		 |$LN5@EnableVSyn|

; 4588 : }

  0ad48	e59d0008	 ldr         r0, [sp, #8]
  0ad4c	e28dd014	 add         sp, sp, #0x14
  0ad50	e89d6000	 ldmia       sp, {sp, lr}
  0ad54	e12fff1e	 bx          lr
  0ad58		 |$M41004|

			 ENDP  ; |?EnableVSyncInterruptEx@OMAPDisplayController@@QAAHXZ|, OMAPDisplayController::EnableVSyncInterruptEx

	EXPORT	|?EnableVSyncInterrupt@OMAPDisplayController@@QAAXXZ| ; OMAPDisplayController::EnableVSyncInterrupt

  00178			 AREA	 |.pdata|, PDATA
|$T41011| DCD	|$LN8@EnableVSyn@2|
	DCD	0x40002d04
; Function compile flags: /Odtp

  0ad58			 AREA	 |.text|, CODE, ARM

  0ad58		 |?EnableVSyncInterrupt@OMAPDisplayController@@QAAXXZ| PROC ; OMAPDisplayController::EnableVSyncInterrupt

; 4592 : {

  0ad58		 |$LN8@EnableVSyn@2|
  0ad58	e1a0c00d	 mov         r12, sp
  0ad5c	e92d0001	 stmdb       sp!, {r0}
  0ad60	e92d5000	 stmdb       sp!, {r12, lr}
  0ad64	e24dd004	 sub         sp, sp, #4
  0ad68		 |$M41008|

; 4593 :     if(AccessRegs() == FALSE)

  0ad68	e59d000c	 ldr         r0, [sp, #0xC]
  0ad6c	eb000000	 bl          |?AccessRegs@OMAPDisplayController@@IAAHXZ|
  0ad70	e58d0000	 str         r0, [sp]
  0ad74	e59d3000	 ldr         r3, [sp]
  0ad78	e3530000	 cmp         r3, #0
  0ad7c	1a000001	 bne         |$LN3@EnableVSyn@2|
  0ad80	ea00001c	 b           |$LN2@EnableVSyn@2|

; 4594 :     {
; 4595 :         goto cleanup;

  0ad84	ea00001b	 b           |$cleanup$39666|
  0ad88		 |$LN3@EnableVSyn@2|

; 4596 :     }
; 4597 : 
; 4598 :     SETREG32(&m_pDispRegs->DISPC_IRQENABLE, DISPC_IRQENABLE_VSYNC);

  0ad88	e59d300c	 ldr         r3, [sp, #0xC]
  0ad8c	e2833008	 add         r3, r3, #8
  0ad90	e5933000	 ldr         r3, [r3]
  0ad94	e283301c	 add         r3, r3, #0x1C
  0ad98	e5933000	 ldr         r3, [r3]
  0ad9c	e3832002	 orr         r2, r3, #2
  0ada0	e59d300c	 ldr         r3, [sp, #0xC]
  0ada4	e2833008	 add         r3, r3, #8
  0ada8	e5933000	 ldr         r3, [r3]
  0adac	e283301c	 add         r3, r3, #0x1C
  0adb0	e5832000	 str         r2, [r3]

; 4599 :     if(m_bTVEnable == TRUE)

  0adb4	e59d300c	 ldr         r3, [sp, #0xC]
  0adb8	e2833b01	 add         r3, r3, #1, 22
  0adbc	e28330b4	 add         r3, r3, #0xB4
  0adc0	e5933000	 ldr         r3, [r3]
  0adc4	e3530001	 cmp         r3, #1
  0adc8	1a00000a	 bne         |$LN1@EnableVSyn@2|

; 4600 :     {
; 4601 :         SETREG32(&m_pDispRegs->DISPC_IRQENABLE, DISPC_IRQENABLE_EVSYNC_EVEN | DISPC_IRQENABLE_EVSYNC_ODD);

  0adcc	e59d300c	 ldr         r3, [sp, #0xC]
  0add0	e2833008	 add         r3, r3, #8
  0add4	e5933000	 ldr         r3, [r3]
  0add8	e283301c	 add         r3, r3, #0x1C
  0addc	e5933000	 ldr         r3, [r3]
  0ade0	e383200c	 orr         r2, r3, #0xC
  0ade4	e59d300c	 ldr         r3, [sp, #0xC]
  0ade8	e2833008	 add         r3, r3, #8
  0adec	e5933000	 ldr         r3, [r3]
  0adf0	e283301c	 add         r3, r3, #0x1C
  0adf4	e5832000	 str         r2, [r3]
  0adf8		 |$LN1@EnableVSyn@2|
  0adf8		 |$LN2@EnableVSyn@2|
  0adf8		 |$cleanup$39666|

; 4602 :     }
; 4603 : 
; 4604 : cleanup:
; 4605 : 
; 4606 :     ReleaseRegs();

  0adf8	e59d000c	 ldr         r0, [sp, #0xC]
  0adfc	eb000000	 bl          |?ReleaseRegs@OMAPDisplayController@@IAAHXZ|

; 4607 : }

  0ae00	e28dd004	 add         sp, sp, #4
  0ae04	e89d6000	 ldmia       sp, {sp, lr}
  0ae08	e12fff1e	 bx          lr
  0ae0c		 |$M41009|

			 ENDP  ; |?EnableVSyncInterrupt@OMAPDisplayController@@QAAXXZ|, OMAPDisplayController::EnableVSyncInterrupt

	EXPORT	|?DisableVSyncInterrupt@OMAPDisplayController@@QAAXXZ| ; OMAPDisplayController::DisableVSyncInterrupt

  00180			 AREA	 |.pdata|, PDATA
|$T41016| DCD	|$LN8@DisableVSy|
	DCD	0x40003404
; Function compile flags: /Odtp

  0ae0c			 AREA	 |.text|, CODE, ARM

  0ae0c		 |?DisableVSyncInterrupt@OMAPDisplayController@@QAAXXZ| PROC ; OMAPDisplayController::DisableVSyncInterrupt

; 4611 : {

  0ae0c		 |$LN8@DisableVSy|
  0ae0c	e1a0c00d	 mov         r12, sp
  0ae10	e92d0001	 stmdb       sp!, {r0}
  0ae14	e92d5000	 stmdb       sp!, {r12, lr}
  0ae18	e24dd004	 sub         sp, sp, #4
  0ae1c		 |$M41013|

; 4612 :     
; 4613 :     m_lastVsyncIRQStatus = 0;

  0ae1c	e59d300c	 ldr         r3, [sp, #0xC]
  0ae20	e2833c05	 add         r3, r3, #5, 24
  0ae24	e2832038	 add         r2, r3, #0x38
  0ae28	e3a03000	 mov         r3, #0
  0ae2c	e5823000	 str         r3, [r2]

; 4614 :     if(AccessRegs() == FALSE)

  0ae30	e59d000c	 ldr         r0, [sp, #0xC]
  0ae34	eb000000	 bl          |?AccessRegs@OMAPDisplayController@@IAAHXZ|
  0ae38	e58d0000	 str         r0, [sp]
  0ae3c	e59d3000	 ldr         r3, [sp]
  0ae40	e3530000	 cmp         r3, #0
  0ae44	1a000001	 bne         |$LN3@DisableVSy|
  0ae48	ea00001e	 b           |$LN2@DisableVSy|

; 4615 :     {
; 4616 :         goto cleanup;

  0ae4c	ea00001d	 b           |$cleanup$39679|
  0ae50		 |$LN3@DisableVSy|

; 4617 :     }
; 4618 :         
; 4619 :     CLRREG32(&m_pDispRegs->DISPC_IRQENABLE, DISPC_IRQENABLE_VSYNC);

  0ae50	e59d300c	 ldr         r3, [sp, #0xC]
  0ae54	e2833008	 add         r3, r3, #8
  0ae58	e5933000	 ldr         r3, [r3]
  0ae5c	e283301c	 add         r3, r3, #0x1C
  0ae60	e5932000	 ldr         r2, [r3]
  0ae64	e3e03002	 mvn         r3, #2
  0ae68	e0022003	 and         r2, r2, r3
  0ae6c	e59d300c	 ldr         r3, [sp, #0xC]
  0ae70	e2833008	 add         r3, r3, #8
  0ae74	e5933000	 ldr         r3, [r3]
  0ae78	e283301c	 add         r3, r3, #0x1C
  0ae7c	e5832000	 str         r2, [r3]

; 4620 :     if(m_bTVEnable == TRUE)

  0ae80	e59d300c	 ldr         r3, [sp, #0xC]
  0ae84	e2833b01	 add         r3, r3, #1, 22
  0ae88	e28330b4	 add         r3, r3, #0xB4
  0ae8c	e5933000	 ldr         r3, [r3]
  0ae90	e3530001	 cmp         r3, #1
  0ae94	1a00000b	 bne         |$LN1@DisableVSy|

; 4621 :     {
; 4622 :         CLRREG32(&m_pDispRegs->DISPC_IRQENABLE, DISPC_IRQENABLE_EVSYNC_EVEN | DISPC_IRQENABLE_EVSYNC_ODD);

  0ae98	e59d300c	 ldr         r3, [sp, #0xC]
  0ae9c	e2833008	 add         r3, r3, #8
  0aea0	e5933000	 ldr         r3, [r3]
  0aea4	e283301c	 add         r3, r3, #0x1C
  0aea8	e5932000	 ldr         r2, [r3]
  0aeac	e3e0300c	 mvn         r3, #0xC
  0aeb0	e0022003	 and         r2, r2, r3
  0aeb4	e59d300c	 ldr         r3, [sp, #0xC]
  0aeb8	e2833008	 add         r3, r3, #8
  0aebc	e5933000	 ldr         r3, [r3]
  0aec0	e283301c	 add         r3, r3, #0x1C
  0aec4	e5832000	 str         r2, [r3]
  0aec8		 |$LN1@DisableVSy|
  0aec8		 |$LN2@DisableVSy|
  0aec8		 |$cleanup$39679|

; 4623 :     }
; 4624 : 
; 4625 : cleanup:
; 4626 : 
; 4627 :     ReleaseRegs();

  0aec8	e59d000c	 ldr         r0, [sp, #0xC]
  0aecc	eb000000	 bl          |?ReleaseRegs@OMAPDisplayController@@IAAHXZ|

; 4628 : }

  0aed0	e28dd004	 add         sp, sp, #4
  0aed4	e89d6000	 ldmia       sp, {sp, lr}
  0aed8	e12fff1e	 bx          lr
  0aedc		 |$M41014|

			 ENDP  ; |?DisableVSyncInterrupt@OMAPDisplayController@@QAAXXZ|, OMAPDisplayController::DisableVSyncInterrupt

	EXPORT	|?InVSync@OMAPDisplayController@@QAAHH@Z| ; OMAPDisplayController::InVSync

  00188			 AREA	 |.pdata|, PDATA
|$T41026| DCD	|$LN16@InVSync|
	DCD	0x40007e04
; Function compile flags: /Odtp

  0aedc			 AREA	 |.text|, CODE, ARM

  0aedc		 |?InVSync@OMAPDisplayController@@QAAHH@Z| PROC ; OMAPDisplayController::InVSync

; 4632 : {

  0aedc		 |$LN16@InVSync|
  0aedc	e1a0c00d	 mov         r12, sp
  0aee0	e92d0003	 stmdb       sp!, {r0, r1}
  0aee4	e92d5000	 stmdb       sp!, {r12, lr}
  0aee8	e24dd020	 sub         sp, sp, #0x20
  0aeec		 |$M41023|

; 4633 :     BOOL bInVSync = FALSE;

  0aeec	e3a03000	 mov         r3, #0
  0aef0	e58d3008	 str         r3, [sp, #8]

; 4634 :     DWORD irqStatus = 0;

  0aef4	e3a03000	 mov         r3, #0
  0aef8	e58d3000	 str         r3, [sp]

; 4635 :     BOOL  lcdVsync = FALSE;

  0aefc	e3a03000	 mov         r3, #0
  0af00	e58d300c	 str         r3, [sp, #0xC]

; 4636 :     //Alwasy set to true, in case tv-out is disabled.
; 4637 :     BOOL  tvVsync = TRUE;

  0af04	e3a03001	 mov         r3, #1
  0af08	e58d3004	 str         r3, [sp, #4]

; 4638 : 
; 4639 :     if (!m_dwEnableWaitForVerticalBlank)

  0af0c	e59d3028	 ldr         r3, [sp, #0x28]
  0af10	e2833c05	 add         r3, r3, #5, 24
  0af14	e5933000	 ldr         r3, [r3]
  0af18	e3530000	 cmp         r3, #0
  0af1c	1a000002	 bne         |$LN7@InVSync|

; 4640 :         return TRUE;

  0af20	e3a03001	 mov         r3, #1
  0af24	e58d3010	 str         r3, [sp, #0x10]
  0af28	ea000065	 b           |$LN8@InVSync|
  0af2c		 |$LN7@InVSync|

; 4641 : 
; 4642 :     if(AccessRegs() == FALSE)

  0af2c	e59d0028	 ldr         r0, [sp, #0x28]
  0af30	eb000000	 bl          |?AccessRegs@OMAPDisplayController@@IAAHXZ|
  0af34	e58d0014	 str         r0, [sp, #0x14]
  0af38	e59d3014	 ldr         r3, [sp, #0x14]
  0af3c	e3530000	 cmp         r3, #0
  0af40	1a000003	 bne         |$LN6@InVSync|

; 4643 :     {
; 4644 :         bInVSync = TRUE;

  0af44	e3a03001	 mov         r3, #1
  0af48	e58d3008	 str         r3, [sp, #8]
  0af4c	ea000058	 b           |$LN5@InVSync|

; 4645 :         goto cleanup;

  0af50	ea000057	 b           |$cleanup$39698|
  0af54		 |$LN6@InVSync|

; 4646 :     }
; 4647 : 
; 4648 :     irqStatus = INREG32(&m_pDispRegs->DISPC_IRQSTATUS);

  0af54	e59d3028	 ldr         r3, [sp, #0x28]
  0af58	e2833008	 add         r3, r3, #8
  0af5c	e5933000	 ldr         r3, [r3]
  0af60	e2833018	 add         r3, r3, #0x18
  0af64	e5933000	 ldr         r3, [r3]
  0af68	e58d3000	 str         r3, [sp]

; 4649 :     lcdVsync = (irqStatus & DISPC_IRQSTATUS_VSYNC) == DISPC_IRQSTATUS_VSYNC;

  0af6c	e59d3000	 ldr         r3, [sp]
  0af70	e2033002	 and         r3, r3, #2
  0af74	e3530002	 cmp         r3, #2
  0af78	1a000002	 bne         |$LN10@InVSync|
  0af7c	e3a03001	 mov         r3, #1
  0af80	e58d3018	 str         r3, [sp, #0x18]
  0af84	ea000001	 b           |$LN11@InVSync|
  0af88		 |$LN10@InVSync|
  0af88	e3a03000	 mov         r3, #0
  0af8c	e58d3018	 str         r3, [sp, #0x18]
  0af90		 |$LN11@InVSync|
  0af90	e59d3018	 ldr         r3, [sp, #0x18]
  0af94	e58d300c	 str         r3, [sp, #0xC]

; 4650 :     if(m_bTVEnable == TRUE)

  0af98	e59d3028	 ldr         r3, [sp, #0x28]
  0af9c	e2833b01	 add         r3, r3, #1, 22
  0afa0	e28330b4	 add         r3, r3, #0xB4
  0afa4	e5933000	 ldr         r3, [r3]
  0afa8	e3530001	 cmp         r3, #1
  0afac	1a00000e	 bne         |$LN4@InVSync|

; 4651 :     {
; 4652 :         tvVsync = ((irqStatus & DISPC_IRQSTATUS_EVSYNC_EVEN) == DISPC_IRQSTATUS_EVSYNC_EVEN) ||
; 4653 :                   ((irqStatus & DISPC_IRQSTATUS_EVSYNC_ODD) == DISPC_IRQSTATUS_EVSYNC_ODD);

  0afb0	e59d3000	 ldr         r3, [sp]
  0afb4	e2033004	 and         r3, r3, #4
  0afb8	e3530004	 cmp         r3, #4
  0afbc	0a000006	 beq         |$LN12@InVSync|
  0afc0	e59d3000	 ldr         r3, [sp]
  0afc4	e2033008	 and         r3, r3, #8
  0afc8	e3530008	 cmp         r3, #8
  0afcc	0a000002	 beq         |$LN12@InVSync|
  0afd0	e3a03000	 mov         r3, #0
  0afd4	e58d301c	 str         r3, [sp, #0x1C]
  0afd8	ea000001	 b           |$LN13@InVSync|
  0afdc		 |$LN12@InVSync|
  0afdc	e3a03001	 mov         r3, #1
  0afe0	e58d301c	 str         r3, [sp, #0x1C]
  0afe4		 |$LN13@InVSync|
  0afe4	e59d301c	 ldr         r3, [sp, #0x1C]
  0afe8	e58d3004	 str         r3, [sp, #4]
  0afec		 |$LN4@InVSync|

; 4654 :           
; 4655 :     }
; 4656 :     //If tv-out is enabled we also need to check of it's VSYNC signal. Once both have been asserted then 
; 4657 :     //we can say that Vsync has occurred. 
; 4658 :     if( lcdVsync && tvVsync)

  0afec	e59d300c	 ldr         r3, [sp, #0xC]
  0aff0	e3530000	 cmp         r3, #0
  0aff4	0a00002e	 beq         |$LN3@InVSync|
  0aff8	e59d3004	 ldr         r3, [sp, #4]
  0affc	e3530000	 cmp         r3, #0
  0b000	0a00002b	 beq         |$LN3@InVSync|

; 4659 :     {
; 4660 :         bInVSync = TRUE;

  0b004	e3a03001	 mov         r3, #1
  0b008	e58d3008	 str         r3, [sp, #8]

; 4661 : 
; 4662 :         if(bClearStatus)

  0b00c	e59d302c	 ldr         r3, [sp, #0x2C]
  0b010	e3530000	 cmp         r3, #0
  0b014	0a000026	 beq         |$LN2@InVSync|

; 4663 :         {
; 4664 :             SETREG32(&m_pDispRegs->DISPC_IRQSTATUS, DISPC_IRQSTATUS_VSYNC);

  0b018	e59d3028	 ldr         r3, [sp, #0x28]
  0b01c	e2833008	 add         r3, r3, #8
  0b020	e5933000	 ldr         r3, [r3]
  0b024	e2833018	 add         r3, r3, #0x18
  0b028	e5933000	 ldr         r3, [r3]
  0b02c	e3832002	 orr         r2, r3, #2
  0b030	e59d3028	 ldr         r3, [sp, #0x28]
  0b034	e2833008	 add         r3, r3, #8
  0b038	e5933000	 ldr         r3, [r3]
  0b03c	e2833018	 add         r3, r3, #0x18
  0b040	e5832000	 str         r2, [r3]

; 4665 :             if(m_bTVEnable == TRUE)

  0b044	e59d3028	 ldr         r3, [sp, #0x28]
  0b048	e2833b01	 add         r3, r3, #1, 22
  0b04c	e28330b4	 add         r3, r3, #0xB4
  0b050	e5933000	 ldr         r3, [r3]
  0b054	e3530001	 cmp         r3, #1
  0b058	1a000015	 bne         |$LN1@InVSync|

; 4666 :             {
; 4667 :                 SETREG32(&m_pDispRegs->DISPC_IRQSTATUS, DISPC_IRQSTATUS_EVSYNC_EVEN); 

  0b05c	e59d3028	 ldr         r3, [sp, #0x28]
  0b060	e2833008	 add         r3, r3, #8
  0b064	e5933000	 ldr         r3, [r3]
  0b068	e2833018	 add         r3, r3, #0x18
  0b06c	e5933000	 ldr         r3, [r3]
  0b070	e3832004	 orr         r2, r3, #4
  0b074	e59d3028	 ldr         r3, [sp, #0x28]
  0b078	e2833008	 add         r3, r3, #8
  0b07c	e5933000	 ldr         r3, [r3]
  0b080	e2833018	 add         r3, r3, #0x18
  0b084	e5832000	 str         r2, [r3]

; 4668 :                 SETREG32(&m_pDispRegs->DISPC_IRQSTATUS, DISPC_IRQSTATUS_EVSYNC_ODD); 

  0b088	e59d3028	 ldr         r3, [sp, #0x28]
  0b08c	e2833008	 add         r3, r3, #8
  0b090	e5933000	 ldr         r3, [r3]
  0b094	e2833018	 add         r3, r3, #0x18
  0b098	e5933000	 ldr         r3, [r3]
  0b09c	e3832008	 orr         r2, r3, #8
  0b0a0	e59d3028	 ldr         r3, [sp, #0x28]
  0b0a4	e2833008	 add         r3, r3, #8
  0b0a8	e5933000	 ldr         r3, [r3]
  0b0ac	e2833018	 add         r3, r3, #0x18
  0b0b0	e5832000	 str         r2, [r3]
  0b0b4		 |$LN1@InVSync|
  0b0b4		 |$LN2@InVSync|
  0b0b4		 |$LN3@InVSync|
  0b0b4		 |$LN5@InVSync|
  0b0b4		 |$cleanup$39698|

; 4669 :             }
; 4670 :         }
; 4671 :     }
; 4672 : 
; 4673 : cleanup:
; 4674 : 
; 4675 :     ReleaseRegs();

  0b0b4	e59d0028	 ldr         r0, [sp, #0x28]
  0b0b8	eb000000	 bl          |?ReleaseRegs@OMAPDisplayController@@IAAHXZ|

; 4676 : 
; 4677 :     return bInVSync;

  0b0bc	e59d3008	 ldr         r3, [sp, #8]
  0b0c0	e58d3010	 str         r3, [sp, #0x10]
  0b0c4		 |$LN8@InVSync|

; 4678 : }

  0b0c4	e59d0010	 ldr         r0, [sp, #0x10]
  0b0c8	e28dd020	 add         sp, sp, #0x20
  0b0cc	e89d6000	 ldmia       sp, {sp, lr}
  0b0d0	e12fff1e	 bx          lr
  0b0d4		 |$M41024|

			 ENDP  ; |?InVSync@OMAPDisplayController@@QAAHH@Z|, OMAPDisplayController::InVSync

	EXPORT	|?WaitForVsync@OMAPDisplayController@@QAAXXZ| ; OMAPDisplayController::WaitForVsync

  00190			 AREA	 |.pdata|, PDATA
|$T41031| DCD	|$LN8@WaitForVsy|
	DCD	0x40002904
; Function compile flags: /Odtp

  0b0d4			 AREA	 |.text|, CODE, ARM

  0b0d4		 |?WaitForVsync@OMAPDisplayController@@QAAXXZ| PROC ; OMAPDisplayController::WaitForVsync

; 4682 : {

  0b0d4		 |$LN8@WaitForVsy|
  0b0d4	e1a0c00d	 mov         r12, sp
  0b0d8	e92d0001	 stmdb       sp!, {r0}
  0b0dc	e92d5000	 stmdb       sp!, {r12, lr}
  0b0e0	e24dd00c	 sub         sp, sp, #0xC
  0b0e4		 |$M41028|

; 4683 :     BOOL bVsyncPreviouslyEnabled = FALSE;

  0b0e4	e3a03000	 mov         r3, #0
  0b0e8	e58d3000	 str         r3, [sp]

; 4684 : 
; 4685 :     if (!m_dwEnableWaitForVerticalBlank)

  0b0ec	e59d3014	 ldr         r3, [sp, #0x14]
  0b0f0	e2833c05	 add         r3, r3, #5, 24
  0b0f4	e5933000	 ldr         r3, [r3]
  0b0f8	e3530000	 cmp         r3, #0
  0b0fc	1a000000	 bne         |$LN3@WaitForVsy|

; 4686 :         return;

  0b100	ea000019	 b           |$LN4@WaitForVsy|
  0b104		 |$LN3@WaitForVsy|

; 4687 : 
; 4688 :     if(!InVSync(TRUE))

  0b104	e3a01001	 mov         r1, #1
  0b108	e59d0014	 ldr         r0, [sp, #0x14]
  0b10c	eb000000	 bl          |?InVSync@OMAPDisplayController@@QAAHH@Z|
  0b110	e58d0004	 str         r0, [sp, #4]
  0b114	e59d3004	 ldr         r3, [sp, #4]
  0b118	e3530000	 cmp         r3, #0
  0b11c	1a000012	 bne         |$LN2@WaitForVsy|

; 4689 :     {             
; 4690 :         bVsyncPreviouslyEnabled = EnableVSyncInterruptEx();

  0b120	e59d0014	 ldr         r0, [sp, #0x14]
  0b124	eb000000	 bl          |?EnableVSyncInterruptEx@OMAPDisplayController@@QAAHXZ|
  0b128	e58d0008	 str         r0, [sp, #8]
  0b12c	e59d3008	 ldr         r3, [sp, #8]
  0b130	e58d3000	 str         r3, [sp]

; 4691 :         WaitForSingleObject(m_hVsyncEvent, m_dwVsyncPeriod);

  0b134	e59d3014	 ldr         r3, [sp, #0x14]
  0b138	e2833b01	 add         r3, r3, #1, 22
  0b13c	e28330fc	 add         r3, r3, #0xFC
  0b140	e5931000	 ldr         r1, [r3]
  0b144	e59d3014	 ldr         r3, [sp, #0x14]
  0b148	e2833b01	 add         r3, r3, #1, 22
  0b14c	e28330f4	 add         r3, r3, #0xF4
  0b150	e5930000	 ldr         r0, [r3]
  0b154	eb000000	 bl          WaitForSingleObject

; 4692 :         //SGX may have turned on the vsync interrupt, keep it on if that's the case.
; 4693 :         if(!bVsyncPreviouslyEnabled)

  0b158	e59d3000	 ldr         r3, [sp]
  0b15c	e3530000	 cmp         r3, #0
  0b160	1a000001	 bne         |$LN1@WaitForVsy|

; 4694 :         {
; 4695 :             DisableVSyncInterrupt();

  0b164	e59d0014	 ldr         r0, [sp, #0x14]
  0b168	eb000000	 bl          |?DisableVSyncInterrupt@OMAPDisplayController@@QAAXXZ|
  0b16c		 |$LN1@WaitForVsy|
  0b16c		 |$LN2@WaitForVsy|
  0b16c		 |$LN4@WaitForVsy|

; 4696 :         }
; 4697 :     }
; 4698 : }

  0b16c	e28dd00c	 add         sp, sp, #0xC
  0b170	e89d6000	 ldmia       sp, {sp, lr}
  0b174	e12fff1e	 bx          lr
  0b178		 |$M41029|

			 ENDP  ; |?WaitForVsync@OMAPDisplayController@@QAAXXZ|, OMAPDisplayController::WaitForVsync

	EXPORT	|?EnableScanLineInterrupt@OMAPDisplayController@@QAAXK@Z| ; OMAPDisplayController::EnableScanLineInterrupt

  00198			 AREA	 |.pdata|, PDATA
|$T41036| DCD	|$LN9@EnableScan|
	DCD	0x40003e04
; Function compile flags: /Odtp

  0b178			 AREA	 |.text|, CODE, ARM

  0b178		 |?EnableScanLineInterrupt@OMAPDisplayController@@QAAXK@Z| PROC ; OMAPDisplayController::EnableScanLineInterrupt

; 4702 : {

  0b178		 |$LN9@EnableScan|
  0b178	e1a0c00d	 mov         r12, sp
  0b17c	e92d0003	 stmdb       sp!, {r0, r1}
  0b180	e92d5000	 stmdb       sp!, {r12, lr}
  0b184	e24dd004	 sub         sp, sp, #4
  0b188		 |$M41033|

; 4703 :     if (!m_dwEnableWaitForVerticalBlank)

  0b188	e59d300c	 ldr         r3, [sp, #0xC]
  0b18c	e2833c05	 add         r3, r3, #5, 24
  0b190	e5933000	 ldr         r3, [r3]
  0b194	e3530000	 cmp         r3, #0
  0b198	1a000000	 bne         |$LN4@EnableScan|

; 4704 :         return;

  0b19c	ea000030	 b           |$LN5@EnableScan|
  0b1a0		 |$LN4@EnableScan|

; 4705 : 
; 4706 :     if(AccessRegs() == FALSE)

  0b1a0	e59d000c	 ldr         r0, [sp, #0xC]
  0b1a4	eb000000	 bl          |?AccessRegs@OMAPDisplayController@@IAAHXZ|
  0b1a8	e58d0000	 str         r0, [sp]
  0b1ac	e59d3000	 ldr         r3, [sp]
  0b1b0	e3530000	 cmp         r3, #0
  0b1b4	1a000001	 bne         |$LN3@EnableScan|
  0b1b8	ea000027	 b           |$LN2@EnableScan|

; 4707 :     {
; 4708 :         goto cleanup;

  0b1bc	ea000026	 b           |$cleanup$39727|
  0b1c0		 |$LN3@EnableScan|

; 4709 :     }
; 4710 : 
; 4711 :     //  Program line number to interrupt on
; 4712 :     if(INREG32(&m_pDispRegs->DISPC_LINE_NUMBER) != dwLineNumber)

  0b1c0	e59d300c	 ldr         r3, [sp, #0xC]
  0b1c4	e2833008	 add         r3, r3, #8
  0b1c8	e5933000	 ldr         r3, [r3]
  0b1cc	e2833060	 add         r3, r3, #0x60
  0b1d0	e5932000	 ldr         r2, [r3]
  0b1d4	e59d3010	 ldr         r3, [sp, #0x10]
  0b1d8	e1520003	 cmp         r2, r3
  0b1dc	0a000008	 beq         |$LN1@EnableScan|

; 4713 :     {
; 4714 :         OUTREG32(&m_pDispRegs->DISPC_LINE_NUMBER, dwLineNumber);

  0b1e0	e59d300c	 ldr         r3, [sp, #0xC]
  0b1e4	e2833008	 add         r3, r3, #8
  0b1e8	e5933000	 ldr         r3, [r3]
  0b1ec	e2832060	 add         r2, r3, #0x60
  0b1f0	e59d3010	 ldr         r3, [sp, #0x10]
  0b1f4	e5823000	 str         r3, [r2]

; 4715 :         FlushRegs(DISPC_CONTROL_GOLCD);

  0b1f8	e3a01020	 mov         r1, #0x20
  0b1fc	e59d000c	 ldr         r0, [sp, #0xC]
  0b200	eb000000	 bl          |?FlushRegs@OMAPDisplayController@@IAAHK@Z|
  0b204		 |$LN1@EnableScan|

; 4716 :     }
; 4717 : 
; 4718 :     //  Enable                                
; 4719 :     SETREG32(&m_pDispRegs->DISPC_IRQSTATUS, DISPC_IRQSTATUS_PROGRAMMEDLINENUMBER);

  0b204	e59d300c	 ldr         r3, [sp, #0xC]
  0b208	e2833008	 add         r3, r3, #8
  0b20c	e5933000	 ldr         r3, [r3]
  0b210	e2833018	 add         r3, r3, #0x18
  0b214	e5933000	 ldr         r3, [r3]
  0b218	e3832020	 orr         r2, r3, #0x20
  0b21c	e59d300c	 ldr         r3, [sp, #0xC]
  0b220	e2833008	 add         r3, r3, #8
  0b224	e5933000	 ldr         r3, [r3]
  0b228	e2833018	 add         r3, r3, #0x18
  0b22c	e5832000	 str         r2, [r3]

; 4720 :     SETREG32(&m_pDispRegs->DISPC_IRQENABLE, DISPC_IRQENABLE_PROGRAMMEDLINENUMBER);

  0b230	e59d300c	 ldr         r3, [sp, #0xC]
  0b234	e2833008	 add         r3, r3, #8
  0b238	e5933000	 ldr         r3, [r3]
  0b23c	e283301c	 add         r3, r3, #0x1C
  0b240	e5933000	 ldr         r3, [r3]
  0b244	e3832020	 orr         r2, r3, #0x20
  0b248	e59d300c	 ldr         r3, [sp, #0xC]
  0b24c	e2833008	 add         r3, r3, #8
  0b250	e5933000	 ldr         r3, [r3]
  0b254	e283301c	 add         r3, r3, #0x1C
  0b258	e5832000	 str         r2, [r3]
  0b25c		 |$LN2@EnableScan|
  0b25c		 |$cleanup$39727|

; 4721 : 
; 4722 : cleanup:
; 4723 :     ReleaseRegs();

  0b25c	e59d000c	 ldr         r0, [sp, #0xC]
  0b260	eb000000	 bl          |?ReleaseRegs@OMAPDisplayController@@IAAHXZ|
  0b264		 |$LN5@EnableScan|

; 4724 : }

  0b264	e28dd004	 add         sp, sp, #4
  0b268	e89d6000	 ldmia       sp, {sp, lr}
  0b26c	e12fff1e	 bx          lr
  0b270		 |$M41034|

			 ENDP  ; |?EnableScanLineInterrupt@OMAPDisplayController@@QAAXK@Z|, OMAPDisplayController::EnableScanLineInterrupt

	EXPORT	|?DisableScanLineInterrupt@OMAPDisplayController@@QAAXXZ| ; OMAPDisplayController::DisableScanLineInterrupt

  001a0			 AREA	 |.pdata|, PDATA
|$T41041| DCD	|$LN8@DisableSca|
	DCD	0x40002e04
; Function compile flags: /Odtp

  0b270			 AREA	 |.text|, CODE, ARM

  0b270		 |?DisableScanLineInterrupt@OMAPDisplayController@@QAAXXZ| PROC ; OMAPDisplayController::DisableScanLineInterrupt

; 4728 : {

  0b270		 |$LN8@DisableSca|
  0b270	e1a0c00d	 mov         r12, sp
  0b274	e92d0001	 stmdb       sp!, {r0}
  0b278	e92d5000	 stmdb       sp!, {r12, lr}
  0b27c	e24dd004	 sub         sp, sp, #4
  0b280		 |$M41038|

; 4729 :     if (!m_dwEnableWaitForVerticalBlank)

  0b280	e59d300c	 ldr         r3, [sp, #0xC]
  0b284	e2833c05	 add         r3, r3, #5, 24
  0b288	e5933000	 ldr         r3, [r3]
  0b28c	e3530000	 cmp         r3, #0
  0b290	1a000000	 bne         |$LN3@DisableSca|

; 4730 :         return;

  0b294	ea000020	 b           |$LN4@DisableSca|
  0b298		 |$LN3@DisableSca|

; 4731 : 
; 4732 :     if(AccessRegs() == FALSE)

  0b298	e59d000c	 ldr         r0, [sp, #0xC]
  0b29c	eb000000	 bl          |?AccessRegs@OMAPDisplayController@@IAAHXZ|
  0b2a0	e58d0000	 str         r0, [sp]
  0b2a4	e59d3000	 ldr         r3, [sp]
  0b2a8	e3530000	 cmp         r3, #0
  0b2ac	1a000001	 bne         |$LN2@DisableSca|
  0b2b0	ea000017	 b           |$LN1@DisableSca|

; 4733 :     {
; 4734 :         goto cleanup;

  0b2b4	ea000016	 b           |$cleanup$39744|
  0b2b8		 |$LN2@DisableSca|

; 4735 :     }
; 4736 : 
; 4737 :     //  Disable interrupt
; 4738 :     SETREG32(&m_pDispRegs->DISPC_IRQSTATUS, DISPC_IRQSTATUS_PROGRAMMEDLINENUMBER);

  0b2b8	e59d300c	 ldr         r3, [sp, #0xC]
  0b2bc	e2833008	 add         r3, r3, #8
  0b2c0	e5933000	 ldr         r3, [r3]
  0b2c4	e2833018	 add         r3, r3, #0x18
  0b2c8	e5933000	 ldr         r3, [r3]
  0b2cc	e3832020	 orr         r2, r3, #0x20
  0b2d0	e59d300c	 ldr         r3, [sp, #0xC]
  0b2d4	e2833008	 add         r3, r3, #8
  0b2d8	e5933000	 ldr         r3, [r3]
  0b2dc	e2833018	 add         r3, r3, #0x18
  0b2e0	e5832000	 str         r2, [r3]

; 4739 :     CLRREG32(&m_pDispRegs->DISPC_IRQENABLE, DISPC_IRQENABLE_PROGRAMMEDLINENUMBER);

  0b2e4	e59d300c	 ldr         r3, [sp, #0xC]
  0b2e8	e2833008	 add         r3, r3, #8
  0b2ec	e5933000	 ldr         r3, [r3]
  0b2f0	e283301c	 add         r3, r3, #0x1C
  0b2f4	e5932000	 ldr         r2, [r3]
  0b2f8	e3e03020	 mvn         r3, #0x20
  0b2fc	e0022003	 and         r2, r2, r3
  0b300	e59d300c	 ldr         r3, [sp, #0xC]
  0b304	e2833008	 add         r3, r3, #8
  0b308	e5933000	 ldr         r3, [r3]
  0b30c	e283301c	 add         r3, r3, #0x1C
  0b310	e5832000	 str         r2, [r3]
  0b314		 |$LN1@DisableSca|
  0b314		 |$cleanup$39744|

; 4740 : 
; 4741 : cleanup:
; 4742 :     ReleaseRegs();

  0b314	e59d000c	 ldr         r0, [sp, #0xC]
  0b318	eb000000	 bl          |?ReleaseRegs@OMAPDisplayController@@IAAHXZ|
  0b31c		 |$LN4@DisableSca|

; 4743 : }

  0b31c	e28dd004	 add         sp, sp, #4
  0b320	e89d6000	 ldmia       sp, {sp, lr}
  0b324	e12fff1e	 bx          lr
  0b328		 |$M41039|

			 ENDP  ; |?DisableScanLineInterrupt@OMAPDisplayController@@QAAXXZ|, OMAPDisplayController::DisableScanLineInterrupt

	EXPORT	|?GetScanLine@OMAPDisplayController@@QAAKXZ| ; OMAPDisplayController::GetScanLine

  001a8			 AREA	 |.pdata|, PDATA
|$T41047| DCD	|$LN7@GetScanLin|
	DCD	0x40001c04
; Function compile flags: /Odtp

  0b328			 AREA	 |.text|, CODE, ARM

  0b328		 |?GetScanLine@OMAPDisplayController@@QAAKXZ| PROC ; OMAPDisplayController::GetScanLine

; 4747 : {

  0b328		 |$LN7@GetScanLin|
  0b328	e1a0c00d	 mov         r12, sp
  0b32c	e92d0001	 stmdb       sp!, {r0}
  0b330	e92d5000	 stmdb       sp!, {r12, lr}
  0b334	e24dd00c	 sub         sp, sp, #0xC
  0b338		 |$M41044|

; 4748 :     DWORD scanLine = 0;

  0b338	e3a03000	 mov         r3, #0
  0b33c	e58d3000	 str         r3, [sp]

; 4749 :     if(AccessRegs() == FALSE)

  0b340	e59d0014	 ldr         r0, [sp, #0x14]
  0b344	eb000000	 bl          |?AccessRegs@OMAPDisplayController@@IAAHXZ|
  0b348	e58d0008	 str         r0, [sp, #8]
  0b34c	e59d3008	 ldr         r3, [sp, #8]
  0b350	e3530000	 cmp         r3, #0
  0b354	1a000001	 bne         |$LN2@GetScanLin|
  0b358	ea000006	 b           |$LN1@GetScanLin|

; 4750 :     {
; 4751 :         goto cleanup;

  0b35c	ea000005	 b           |$cleanup$39757|
  0b360		 |$LN2@GetScanLin|

; 4752 :     }
; 4753 : 
; 4754 :     //  Get current scanline value
; 4755 :     scanLine = INREG32(&m_pDispRegs->DISPC_LINE_STATUS);

  0b360	e59d3014	 ldr         r3, [sp, #0x14]
  0b364	e2833008	 add         r3, r3, #8
  0b368	e5933000	 ldr         r3, [r3]
  0b36c	e283305c	 add         r3, r3, #0x5C
  0b370	e5933000	 ldr         r3, [r3]
  0b374	e58d3000	 str         r3, [sp]
  0b378		 |$LN1@GetScanLin|
  0b378		 |$cleanup$39757|

; 4756 : 
; 4757 : cleanup:
; 4758 :     ReleaseRegs();

  0b378	e59d0014	 ldr         r0, [sp, #0x14]
  0b37c	eb000000	 bl          |?ReleaseRegs@OMAPDisplayController@@IAAHXZ|

; 4759 :     return scanLine;

  0b380	e59d3000	 ldr         r3, [sp]
  0b384	e58d3004	 str         r3, [sp, #4]

; 4760 : }

  0b388	e59d0004	 ldr         r0, [sp, #4]
  0b38c	e28dd00c	 add         sp, sp, #0xC
  0b390	e89d6000	 ldmia       sp, {sp, lr}
  0b394	e12fff1e	 bx          lr
  0b398		 |$M41045|

			 ENDP  ; |?GetScanLine@OMAPDisplayController@@QAAKXZ|, OMAPDisplayController::GetScanLine

	EXPORT	|?WaitForScanLine@OMAPDisplayController@@QAAXK@Z| ; OMAPDisplayController::WaitForScanLine

  001b0			 AREA	 |.pdata|, PDATA
|$T41052| DCD	|$LN6@WaitForSca|
	DCD	0x40001903
; Function compile flags: /Odtp

  0b398			 AREA	 |.text|, CODE, ARM

  0b398		 |?WaitForScanLine@OMAPDisplayController@@QAAXK@Z| PROC ; OMAPDisplayController::WaitForScanLine

; 4764 : {

  0b398		 |$LN6@WaitForSca|
  0b398	e1a0c00d	 mov         r12, sp
  0b39c	e92d0003	 stmdb       sp!, {r0, r1}
  0b3a0	e92d5000	 stmdb       sp!, {r12, lr}
  0b3a4		 |$M41049|

; 4765 :     if (!m_dwEnableWaitForVerticalBlank)

  0b3a4	e59d3008	 ldr         r3, [sp, #8]
  0b3a8	e2833c05	 add         r3, r3, #5, 24
  0b3ac	e5933000	 ldr         r3, [r3]
  0b3b0	e3530000	 cmp         r3, #0
  0b3b4	1a000000	 bne         |$LN1@WaitForSca|

; 4766 :         return;

  0b3b8	ea00000d	 b           |$LN2@WaitForSca|
  0b3bc		 |$LN1@WaitForSca|

; 4767 : 
; 4768 :     //  Enable the scanline interrupt for the given line number and wait
; 4769 :     EnableScanLineInterrupt(dwLineNumber);

  0b3bc	e59d100c	 ldr         r1, [sp, #0xC]
  0b3c0	e59d0008	 ldr         r0, [sp, #8]
  0b3c4	eb000000	 bl          |?EnableScanLineInterrupt@OMAPDisplayController@@QAAXK@Z|

; 4770 :     WaitForSingleObject(m_hScanLineEvent, m_dwVsyncPeriod);

  0b3c8	e59d3008	 ldr         r3, [sp, #8]
  0b3cc	e2833b01	 add         r3, r3, #1, 22
  0b3d0	e28330fc	 add         r3, r3, #0xFC
  0b3d4	e5931000	 ldr         r1, [r3]
  0b3d8	e59d3008	 ldr         r3, [sp, #8]
  0b3dc	e2833c05	 add         r3, r3, #5, 24
  0b3e0	e2833004	 add         r3, r3, #4
  0b3e4	e5930000	 ldr         r0, [r3]
  0b3e8	eb000000	 bl          WaitForSingleObject

; 4771 :     DisableScanLineInterrupt();

  0b3ec	e59d0008	 ldr         r0, [sp, #8]
  0b3f0	eb000000	 bl          |?DisableScanLineInterrupt@OMAPDisplayController@@QAAXXZ|
  0b3f4		 |$LN2@WaitForSca|

; 4772 : }

  0b3f4	e89d6000	 ldmia       sp, {sp, lr}
  0b3f8	e12fff1e	 bx          lr
  0b3fc		 |$M41050|

			 ENDP  ; |?WaitForScanLine@OMAPDisplayController@@QAAXK@Z|, OMAPDisplayController::WaitForScanLine

	EXPORT	|?SetClipping@OMAPSurface@@UAAHPAUtagRECT@@@Z| ; OMAPSurface::SetClipping
	IMPORT	|IntersectRect|

  001b8			 AREA	 |.pdata|, PDATA
|$T41058| DCD	|$LN8@SetClippin@2|
	DCD	0x40003904
; Function compile flags: /Odtp

  0b3fc			 AREA	 |.text|, CODE, ARM

  0b3fc		 |?SetClipping@OMAPSurface@@UAAHPAUtagRECT@@@Z| PROC ; OMAPSurface::SetClipping

; 4776 : {

  0b3fc		 |$LN8@SetClippin@2|
  0b3fc	e1a0c00d	 mov         r12, sp
  0b400	e92d0003	 stmdb       sp!, {r0, r1}
  0b404	e92d5000	 stmdb       sp!, {r12, lr}
  0b408	e24dd01c	 sub         sp, sp, #0x1C
  0b40c		 |$M41055|

; 4777 :     BOOL    bResult;
; 4778 :     RECT    rcSurf;
; 4779 :     
; 4780 :     //  Set the rect of the entire surface
; 4781 :     rcSurf.left = 0;

  0b40c	e3a03000	 mov         r3, #0
  0b410	e58d3004	 str         r3, [sp, #4]

; 4782 :     rcSurf.top = 0;

  0b414	e3a03000	 mov         r3, #0
  0b418	e58d3008	 str         r3, [sp, #8]

; 4783 :     rcSurf.right = m_dwWidth;

  0b41c	e59d3024	 ldr         r3, [sp, #0x24]
  0b420	e2833010	 add         r3, r3, #0x10
  0b424	e5933000	 ldr         r3, [r3]
  0b428	e58d300c	 str         r3, [sp, #0xC]

; 4784 :     rcSurf.bottom = m_dwHeight;

  0b42c	e59d3024	 ldr         r3, [sp, #0x24]
  0b430	e2833014	 add         r3, r3, #0x14
  0b434	e5933000	 ldr         r3, [r3]
  0b438	e58d3010	 str         r3, [sp, #0x10]

; 4785 :     
; 4786 :     //  Set the clipping region of the surface
; 4787 :     if( pClipRect == NULL )

  0b43c	e59d3028	 ldr         r3, [sp, #0x28]
  0b440	e3530000	 cmp         r3, #0
  0b444	1a000007	 bne         |$LN3@SetClippin@2|

; 4788 :     {
; 4789 :         //  No clipping; use entire surface size
; 4790 :         m_rcClip = rcSurf;

  0b448	e59d3024	 ldr         r3, [sp, #0x24]
  0b44c	e2830018	 add         r0, r3, #0x18
  0b450	e28d1004	 add         r1, sp, #4
  0b454	e3a02010	 mov         r2, #0x10
  0b458	eb000000	 bl          memcpy

; 4791 :         bResult = TRUE;

  0b45c	e3a03001	 mov         r3, #1
  0b460	e58d3000	 str         r3, [sp]

; 4792 :     }
; 4793 :     else

  0b464	ea000007	 b           |$LN2@SetClippin@2|
  0b468		 |$LN3@SetClippin@2|

; 4794 :     {
; 4795 :         //  Find intersection of surface rect and clipping rect
; 4796 :         bResult = IntersectRect( &m_rcClip, &rcSurf, pClipRect );

  0b468	e59d2028	 ldr         r2, [sp, #0x28]
  0b46c	e28d1004	 add         r1, sp, #4
  0b470	e59d3024	 ldr         r3, [sp, #0x24]
  0b474	e2830018	 add         r0, r3, #0x18
  0b478	eb000000	 bl          IntersectRect
  0b47c	e58d0018	 str         r0, [sp, #0x18]
  0b480	e59d3018	 ldr         r3, [sp, #0x18]
  0b484	e58d3000	 str         r3, [sp]
  0b488		 |$LN2@SetClippin@2|

; 4797 :     }
; 4798 :     
; 4799 :     UpdateClipping(pClipRect);

  0b488	e59d1028	 ldr         r1, [sp, #0x28]
  0b48c	e59d3024	 ldr         r3, [sp, #0x24]
  0b490	e5933000	 ldr         r3, [r3]
  0b494	e2833024	 add         r3, r3, #0x24
  0b498	e59d0024	 ldr         r0, [sp, #0x24]
  0b49c	e5933000	 ldr         r3, [r3]
  0b4a0	e1a0e00f	 mov         lr, pc
  0b4a4	e12fff13	 bx          r3

; 4800 : 
; 4801 :     //  Update the given clipping rect
; 4802 :     if( pClipRect )

  0b4a8	e59d3028	 ldr         r3, [sp, #0x28]
  0b4ac	e3530000	 cmp         r3, #0
  0b4b0	0a000004	 beq         |$LN1@SetClippin@2|

; 4803 :         *pClipRect = m_rcClip;

  0b4b4	e59d3024	 ldr         r3, [sp, #0x24]
  0b4b8	e2831018	 add         r1, r3, #0x18
  0b4bc	e59d0028	 ldr         r0, [sp, #0x28]
  0b4c0	e3a02010	 mov         r2, #0x10
  0b4c4	eb000000	 bl          memcpy
  0b4c8		 |$LN1@SetClippin@2|

; 4804 : 
; 4805 :     //  Return result
; 4806 :     return bResult;

  0b4c8	e59d3000	 ldr         r3, [sp]
  0b4cc	e58d3014	 str         r3, [sp, #0x14]

; 4807 : }

  0b4d0	e59d0014	 ldr         r0, [sp, #0x14]
  0b4d4	e28dd01c	 add         sp, sp, #0x1C
  0b4d8	e89d6000	 ldmia       sp, {sp, lr}
  0b4dc	e12fff1e	 bx          lr
  0b4e0		 |$M41056|

			 ENDP  ; |?SetClipping@OMAPSurface@@UAAHPAUtagRECT@@@Z|, OMAPSurface::SetClipping

	EXPORT	|?UpdateClipping@OMAPSurface@@UAAHPAUtagRECT@@@Z| ; OMAPSurface::UpdateClipping

  001c0			 AREA	 |.pdata|, PDATA
|$T41064| DCD	|$LN6@UpdateClip|
	DCD	0x40001c04
; Function compile flags: /Odtp

  0b4e0			 AREA	 |.text|, CODE, ARM

  0b4e0		 |?UpdateClipping@OMAPSurface@@UAAHPAUtagRECT@@@Z| PROC ; OMAPSurface::UpdateClipping

; 4811 : {

  0b4e0		 |$LN6@UpdateClip|
  0b4e0	e1a0c00d	 mov         r12, sp
  0b4e4	e92d0003	 stmdb       sp!, {r0, r1}
  0b4e8	e92d5010	 stmdb       sp!, {r4, r12, lr}
  0b4ec	e24dd008	 sub         sp, sp, #8
  0b4f0		 |$M41061|

; 4812 :     BOOL bResult = FALSE;

  0b4f0	e3a03000	 mov         r3, #0
  0b4f4	e58d3000	 str         r3, [sp]

; 4813 : 
; 4814 :     // Could change to to ensure rectangle alignment with different
; 4815 :     // scale and decimation factors...
; 4816 :     
; 4817 :     //Force the clipping rectangle to fall in a pack pixel boundary
; 4818 :     if (pClipRect != NULL)

  0b4f8	e59d3018	 ldr         r3, [sp, #0x18]
  0b4fc	e3530000	 cmp         r3, #0
  0b500	0a00000a	 beq         |$LN1@UpdateClip|

; 4819 :     {
; 4820 :         AdjustClippingRect(&m_rcClip, 2, 2);

  0b504	e3a03002	 mov         r3, #2
  0b508	e3a02002	 mov         r2, #2
  0b50c	e59d1014	 ldr         r1, [sp, #0x14]
  0b510	e2811018	 add         r1, r1, #0x18
  0b514	e59d0014	 ldr         r0, [sp, #0x14]
  0b518	e5900000	 ldr         r0, [r0]
  0b51c	e280e02c	 add         lr, r0, #0x2C
  0b520	e59d0014	 ldr         r0, [sp, #0x14]
  0b524	e59e4000	 ldr         r4, [lr]
  0b528	e1a0e00f	 mov         lr, pc
  0b52c	e12fff14	 bx          r4
  0b530		 |$LN1@UpdateClip|

; 4821 :     }
; 4822 :     
; 4823 :     bResult = TRUE;

  0b530	e3a03001	 mov         r3, #1
  0b534	e58d3000	 str         r3, [sp]

; 4824 :     return bResult;

  0b538	e59d3000	 ldr         r3, [sp]
  0b53c	e58d3004	 str         r3, [sp, #4]

; 4825 : }

  0b540	e59d0004	 ldr         r0, [sp, #4]
  0b544	e28dd008	 add         sp, sp, #8
  0b548	e89d6010	 ldmia       sp, {r4, sp, lr}
  0b54c	e12fff1e	 bx          lr
  0b550		 |$M41062|

			 ENDP  ; |?UpdateClipping@OMAPSurface@@UAAHPAUtagRECT@@@Z|, OMAPSurface::UpdateClipping

	EXPORT	|?GetClipping@OMAPSurface@@UAA?AUtagRECT@@XZ| ; OMAPSurface::GetClipping

  001c8			 AREA	 |.pdata|, PDATA
|$T41070| DCD	|$LN5@GetClippin|
	DCD	0x40000f04
; Function compile flags: /Odtp

  0b550			 AREA	 |.text|, CODE, ARM

  0b550		 |?GetClipping@OMAPSurface@@UAA?AUtagRECT@@XZ| PROC ; OMAPSurface::GetClipping

; 4829 : {

  0b550		 |$LN5@GetClippin|
  0b550	e1a0c00d	 mov         r12, sp
  0b554	e92d0003	 stmdb       sp!, {r0, r1}
  0b558	e92d5000	 stmdb       sp!, {r12, lr}
  0b55c	e24dd004	 sub         sp, sp, #4
  0b560		 |$M41067|

; 4830 :     return m_rcClip;

  0b560	e59d300c	 ldr         r3, [sp, #0xC]
  0b564	e2831018	 add         r1, r3, #0x18
  0b568	e59d0010	 ldr         r0, [sp, #0x10]
  0b56c	e3a02010	 mov         r2, #0x10
  0b570	eb000000	 bl          memcpy
  0b574	e59d3010	 ldr         r3, [sp, #0x10]
  0b578	e58d3000	 str         r3, [sp]

; 4831 : }

  0b57c	e59d0000	 ldr         r0, [sp]
  0b580	e28dd004	 add         sp, sp, #4
  0b584	e89d6000	 ldmia       sp, {sp, lr}
  0b588	e12fff1e	 bx          lr
  0b58c		 |$M41068|

			 ENDP  ; |?GetClipping@OMAPSurface@@UAA?AUtagRECT@@XZ|, OMAPSurface::GetClipping

	EXPORT	|??_C@_1EI@IHKNGKAN@?$AA?$CF?$AAS?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAN?$AAu?$AAl?$AAl?$AA?5?$AAr?$AAe?$AAc?$AAt?$AAa?$AAn?$AAg?$AAl?$AAe?$AA?5?$AAp?$AAa?$AAs?$AAs?$AAe?$AAd@| [ DATA ] ; `string'
	EXPORT	|??_C@_0CA@FHBIMIIA@OMAPSurface?3?3AdjustClippingRect?$AA@| [ DATA ] ; `string'
	EXPORT	|?AdjustClippingRect@OMAPSurface@@UAAHPAUtagRECT@@EE@Z| ; OMAPSurface::AdjustClippingRect
	IMPORT	|__rt_sdiv|

  001d0			 AREA	 |.pdata|, PDATA
|$T41079| DCD	|$LN14@AdjustClip|
	DCD	0x40006f04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EI@IHKNGKAN@?$AA?$CF?$AAS?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAN?$AAu?$AAl?$AAl?$AA?5?$AAr?$AAe?$AAc?$AAt?$AAa?$AAn?$AAg?$AAl?$AAe?$AA?5?$AAp?$AAa?$AAs?$AAs?$AAe?$AAd@| DCB "%"
	DCB	0x0, "S", 0x0, ":", 0x0, " ", 0x0, "E", 0x0, "R", 0x0, "R"
	DCB	0x0, "O", 0x0, "R", 0x0, ":", 0x0, " ", 0x0, "N", 0x0, "u"
	DCB	0x0, "l", 0x0, "l", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "c"
	DCB	0x0, "t", 0x0, "a", 0x0, "n", 0x0, "g", 0x0, "l", 0x0, "e"
	DCB	0x0, " ", 0x0, "p", 0x0, "a", 0x0, "s", 0x0, "s", 0x0, "e"
	DCB	0x0, "d", 0x0, "!", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CA@FHBIMIIA@OMAPSurface?3?3AdjustClippingRect?$AA@| DCB "OMAPSurf"
	DCB	"ace::AdjustClippingRect", 0x0		; `string'
; Function compile flags: /Odtp

  0b58c			 AREA	 |.text|, CODE, ARM

  0b58c		 |?AdjustClippingRect@OMAPSurface@@UAAHPAUtagRECT@@EE@Z| PROC ; OMAPSurface::AdjustClippingRect

; 4835 : {

  0b58c		 |$LN14@AdjustClip|
  0b58c	e1a0c00d	 mov         r12, sp
  0b590	e92d000f	 stmdb       sp!, {r0 - r3}
  0b594	e92d5000	 stmdb       sp!, {r12, lr}
  0b598	e24dd00c	 sub         sp, sp, #0xC
  0b59c		 |$M41076|

; 4836 :     BOOL bResult = FALSE;

  0b59c	e3a03000	 mov         r3, #0
  0b5a0	e58d3000	 str         r3, [sp]

; 4837 : 
; 4838 :     if(srcRect == NULL)

  0b5a4	e59d3018	 ldr         r3, [sp, #0x18]
  0b5a8	e3530000	 cmp         r3, #0
  0b5ac	1a00000a	 bne         |$LN7@AdjustClip|

; 4839 :     {
; 4840 :         DEBUGMSG(ZONE_ERROR,
; 4841 :             (TEXT("%S: ERROR: Null rectangle passed!\r\n"), __FUNCTION__));

  0b5b0	e59f118c	 ldr         r1, [pc, #0x18C]
  0b5b4	e59f0184	 ldr         r0, [pc, #0x184]
  0b5b8	eb000000	 bl          NKDbgPrintfW
  0b5bc	e3a03001	 mov         r3, #1
  0b5c0	e58d3008	 str         r3, [sp, #8]
  0b5c4	ea000001	 b           |$LN11@AdjustClip|
  0b5c8	e3a03000	 mov         r3, #0
  0b5cc	e58d3008	 str         r3, [sp, #8]
  0b5d0		 |$LN11@AdjustClip|

; 4842 :         return bResult;

  0b5d0	e59d3000	 ldr         r3, [sp]
  0b5d4	e58d3004	 str         r3, [sp, #4]
  0b5d8	ea000054	 b           |$LN8@AdjustClip|
  0b5dc		 |$LN7@AdjustClip|

; 4843 :     }
; 4844 :     if(vertValue > 1)

  0b5dc	e5dd3020	 ldrb        r3, [sp, #0x20]
  0b5e0	e3530001	 cmp         r3, #1
  0b5e4	da000026	 ble         |$LN6@AdjustClip|

; 4845 :     {
; 4846 :         if( ((srcRect->top)%vertValue)!= 0)

  0b5e8	e59d3018	 ldr         r3, [sp, #0x18]
  0b5ec	e2832004	 add         r2, r3, #4
  0b5f0	e5dd3020	 ldrb        r3, [sp, #0x20]
  0b5f4	e1a00003	 mov         r0, r3
  0b5f8	e5921000	 ldr         r1, [r2]
  0b5fc	eb000000	 bl          __rt_sdiv
  0b600	e3510000	 cmp         r1, #0
  0b604	0a00000b	 beq         |$LN5@AdjustClip|

; 4847 :             CEIL_MULT(srcRect->top, vertValue);

  0b608	e59d3018	 ldr         r3, [sp, #0x18]
  0b60c	e2832004	 add         r2, r3, #4
  0b610	e5dd3020	 ldrb        r3, [sp, #0x20]
  0b614	e1a00003	 mov         r0, r3
  0b618	e5921000	 ldr         r1, [r2]
  0b61c	eb000000	 bl          __rt_sdiv
  0b620	e2801001	 add         r1, r0, #1
  0b624	e5dd3020	 ldrb        r3, [sp, #0x20]
  0b628	e0020391	 mul         r2, r1, r3
  0b62c	e59d3018	 ldr         r3, [sp, #0x18]
  0b630	e2833004	 add         r3, r3, #4
  0b634	e5832000	 str         r2, [r3]
  0b638		 |$LN5@AdjustClip|

; 4848 :         if( ((srcRect->bottom)%vertValue)!= 0)

  0b638	e59d3018	 ldr         r3, [sp, #0x18]
  0b63c	e283200c	 add         r2, r3, #0xC
  0b640	e5dd3020	 ldrb        r3, [sp, #0x20]
  0b644	e1a00003	 mov         r0, r3
  0b648	e5921000	 ldr         r1, [r2]
  0b64c	eb000000	 bl          __rt_sdiv
  0b650	e3510000	 cmp         r1, #0
  0b654	0a00000a	 beq         |$LN4@AdjustClip|

; 4849 :             FLOOR_MULT(srcRect->bottom, vertValue);

  0b658	e59d3018	 ldr         r3, [sp, #0x18]
  0b65c	e283200c	 add         r2, r3, #0xC
  0b660	e5dd3020	 ldrb        r3, [sp, #0x20]
  0b664	e1a00003	 mov         r0, r3
  0b668	e5921000	 ldr         r1, [r2]
  0b66c	eb000000	 bl          __rt_sdiv
  0b670	e5dd3020	 ldrb        r3, [sp, #0x20]
  0b674	e0020390	 mul         r2, r0, r3
  0b678	e59d3018	 ldr         r3, [sp, #0x18]
  0b67c	e283300c	 add         r3, r3, #0xC
  0b680	e5832000	 str         r2, [r3]
  0b684		 |$LN4@AdjustClip|
  0b684		 |$LN6@AdjustClip|

; 4850 :     }
; 4851 :     if(horzValue > 1)

  0b684	e5dd301c	 ldrb        r3, [sp, #0x1C]
  0b688	e3530001	 cmp         r3, #1
  0b68c	da000023	 ble         |$LN3@AdjustClip|

; 4852 :     {
; 4853 :         if( ((srcRect->left)%horzValue)!= 0)

  0b690	e5dd301c	 ldrb        r3, [sp, #0x1C]
  0b694	e1a00003	 mov         r0, r3
  0b698	e59d3018	 ldr         r3, [sp, #0x18]
  0b69c	e5931000	 ldr         r1, [r3]
  0b6a0	eb000000	 bl          __rt_sdiv
  0b6a4	e3510000	 cmp         r1, #0
  0b6a8	0a000009	 beq         |$LN2@AdjustClip|

; 4854 :             CEIL_MULT(srcRect->left, horzValue);

  0b6ac	e5dd301c	 ldrb        r3, [sp, #0x1C]
  0b6b0	e1a00003	 mov         r0, r3
  0b6b4	e59d3018	 ldr         r3, [sp, #0x18]
  0b6b8	e5931000	 ldr         r1, [r3]
  0b6bc	eb000000	 bl          __rt_sdiv
  0b6c0	e2801001	 add         r1, r0, #1
  0b6c4	e5dd301c	 ldrb        r3, [sp, #0x1C]
  0b6c8	e0020391	 mul         r2, r1, r3
  0b6cc	e59d3018	 ldr         r3, [sp, #0x18]
  0b6d0	e5832000	 str         r2, [r3]
  0b6d4		 |$LN2@AdjustClip|

; 4855 :         if( ((srcRect->right)%horzValue)!= 0)

  0b6d4	e59d3018	 ldr         r3, [sp, #0x18]
  0b6d8	e2832008	 add         r2, r3, #8
  0b6dc	e5dd301c	 ldrb        r3, [sp, #0x1C]
  0b6e0	e1a00003	 mov         r0, r3
  0b6e4	e5921000	 ldr         r1, [r2]
  0b6e8	eb000000	 bl          __rt_sdiv
  0b6ec	e3510000	 cmp         r1, #0
  0b6f0	0a00000a	 beq         |$LN1@AdjustClip|

; 4856 :             FLOOR_MULT(srcRect->right, horzValue);

  0b6f4	e59d3018	 ldr         r3, [sp, #0x18]
  0b6f8	e2832008	 add         r2, r3, #8
  0b6fc	e5dd301c	 ldrb        r3, [sp, #0x1C]
  0b700	e1a00003	 mov         r0, r3
  0b704	e5921000	 ldr         r1, [r2]
  0b708	eb000000	 bl          __rt_sdiv
  0b70c	e5dd301c	 ldrb        r3, [sp, #0x1C]
  0b710	e0020390	 mul         r2, r0, r3
  0b714	e59d3018	 ldr         r3, [sp, #0x18]
  0b718	e2833008	 add         r3, r3, #8
  0b71c	e5832000	 str         r2, [r3]
  0b720		 |$LN1@AdjustClip|
  0b720		 |$LN3@AdjustClip|

; 4857 :     }
; 4858 : 
; 4859 :     bResult = TRUE;

  0b720	e3a03001	 mov         r3, #1
  0b724	e58d3000	 str         r3, [sp]

; 4860 :     return bResult;

  0b728	e59d3000	 ldr         r3, [sp]
  0b72c	e58d3004	 str         r3, [sp, #4]
  0b730		 |$LN8@AdjustClip|

; 4861 : 
; 4862 : }

  0b730	e59d0004	 ldr         r0, [sp, #4]
  0b734	e28dd00c	 add         sp, sp, #0xC
  0b738	e89d6000	 ldmia       sp, {sp, lr}
  0b73c	e12fff1e	 bx          lr
  0b740		 |$LN15@AdjustClip|
  0b740		 |$LN16@AdjustClip|
  0b740	00000000	 DCD         |??_C@_1EI@IHKNGKAN@?$AA?$CF?$AAS?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAN?$AAu?$AAl?$AAl?$AA?5?$AAr?$AAe?$AAc?$AAt?$AAa?$AAn?$AAg?$AAl?$AAe?$AA?5?$AAp?$AAa?$AAs?$AAs?$AAe?$AAd@|
  0b744		 |$LN17@AdjustClip|
  0b744	00000000	 DCD         |??_C@_0CA@FHBIMIIA@OMAPSurface?3?3AdjustClippingRect?$AA@|
  0b748		 |$M41077|

			 ENDP  ; |?AdjustClippingRect@OMAPSurface@@UAAHPAUtagRECT@@EE@Z|, OMAPSurface::AdjustClippingRect

	EXPORT	|?SetHorizontalScaling@OMAPSurface@@UAAHK@Z| ; OMAPSurface::SetHorizontalScaling

  001d8			 AREA	 |.pdata|, PDATA
|$T41098| DCD	|$LN20@SetHorizon|
	DCD	0x40003e04
; Function compile flags: /Odtp

  0b748			 AREA	 |.text|, CODE, ARM

  0b748		 |?SetHorizontalScaling@OMAPSurface@@UAAHK@Z| PROC ; OMAPSurface::SetHorizontalScaling

; 4866 : {

  0b748		 |$LN20@SetHorizon|
  0b748	e1a0c00d	 mov         r12, sp
  0b74c	e92d0003	 stmdb       sp!, {r0, r1}
  0b750	e92d5000	 stmdb       sp!, {r12, lr}
  0b754	e24dd00c	 sub         sp, sp, #0xC
  0b758		 |$M41095|

; 4867 :     BOOL    bResult;
; 4868 : 
; 4869 :     //  Validate scaling factor
; 4870 :     switch( dwScaleFactor )

  0b758	e59d3018	 ldr         r3, [sp, #0x18]
  0b75c	e58d3008	 str         r3, [sp, #8]
  0b760	e59d3008	 ldr         r3, [sp, #8]
  0b764	e2433001	 sub         r3, r3, #1
  0b768	e58d3008	 str         r3, [sp, #8]
  0b76c	e59d3008	 ldr         r3, [sp, #8]
  0b770	e3530007	 cmp         r3, #7
  0b774	8a000013	 bhi         |$LN2@SetHorizon|
  0b778	e59d2008	 ldr         r2, [sp, #8]
  0b77c	e1a03102	 mov         r3, r2, lsl #2
  0b780	e083300f	 add         r3, r3, pc
  0b784	e5933004	 ldr         r3, [r3, #4]
  0b788	e08ff003	 add         pc, pc, r3
  0b78c		 |$LN9@SetHorizon|
  0b78c		 |$LN8@SetHorizon|
  0b78c		 |$LN10@SetHorizon|
  0b78c	0000001c	 DCD         0x1c
  0b790		 |$LN11@SetHorizon|
  0b790	0000001c	 DCD         0x1c
  0b794		 |$LN12@SetHorizon|
  0b794	00000038	 DCD         0x38
  0b798		 |$LN13@SetHorizon|
  0b798	0000001c	 DCD         0x1c
  0b79c		 |$LN14@SetHorizon|
  0b79c	00000038	 DCD         0x38
  0b7a0		 |$LN15@SetHorizon|
  0b7a0	00000038	 DCD         0x38
  0b7a4		 |$LN16@SetHorizon|
  0b7a4	00000038	 DCD         0x38
  0b7a8		 |$LN17@SetHorizon|
  0b7a8	0000001c	 DCD         0x1c
  0b7ac		 |$LN3@SetHorizon|

; 4871 :     {
; 4872 :         case 1:
; 4873 :         case 2:
; 4874 :         case 4:
; 4875 :         case 8:
; 4876 :             //  Valid scaling factors
; 4877 :             m_dwHorizScale = dwScaleFactor;

  0b7ac	e59d3014	 ldr         r3, [sp, #0x14]
  0b7b0	e2832028	 add         r2, r3, #0x28
  0b7b4	e59d3018	 ldr         r3, [sp, #0x18]
  0b7b8	e5823000	 str         r3, [r2]

; 4878 :             bResult = TRUE;

  0b7bc	e3a03001	 mov         r3, #1
  0b7c0	e58d3000	 str         r3, [sp]

; 4879 :             break;

  0b7c4	ea000001	 b           |$LN4@SetHorizon|
  0b7c8		 |$LN2@SetHorizon|

; 4880 :                     
; 4881 :         default:
; 4882 :             //  Invalid
; 4883 :             bResult = FALSE;

  0b7c8	e3a03000	 mov         r3, #0
  0b7cc	e58d3000	 str         r3, [sp]
  0b7d0		 |$LN4@SetHorizon|

; 4884 :             break;
; 4885 :     }
; 4886 : 
; 4887 :     if ((m_pAssocSurface) && (m_eSurfaceType==OMAP_SURFACE_NORMAL))

  0b7d0	e59d3014	 ldr         r3, [sp, #0x14]
  0b7d4	e28330a0	 add         r3, r3, #0xA0
  0b7d8	e5933000	 ldr         r3, [r3]
  0b7dc	e3530000	 cmp         r3, #0
  0b7e0	0a000010	 beq         |$LN1@SetHorizon|
  0b7e4	e59d3014	 ldr         r3, [sp, #0x14]
  0b7e8	e283309c	 add         r3, r3, #0x9C
  0b7ec	e5933000	 ldr         r3, [r3]
  0b7f0	e3530000	 cmp         r3, #0
  0b7f4	1a00000b	 bne         |$LN1@SetHorizon|

; 4888 :         m_pAssocSurface->SetHorizontalScaling(dwScaleFactor);

  0b7f8	e59d1018	 ldr         r1, [sp, #0x18]
  0b7fc	e59d3014	 ldr         r3, [sp, #0x14]
  0b800	e28330a0	 add         r3, r3, #0xA0
  0b804	e5932000	 ldr         r2, [r3]
  0b808	e59d3014	 ldr         r3, [sp, #0x14]
  0b80c	e28330a0	 add         r3, r3, #0xA0
  0b810	e5930000	 ldr         r0, [r3]
  0b814	e5923000	 ldr         r3, [r2]
  0b818	e2833030	 add         r3, r3, #0x30
  0b81c	e5933000	 ldr         r3, [r3]
  0b820	e1a0e00f	 mov         lr, pc
  0b824	e12fff13	 bx          r3
  0b828		 |$LN1@SetHorizon|

; 4889 :     
; 4890 :     //  Return result
; 4891 :     return bResult;

  0b828	e59d3000	 ldr         r3, [sp]
  0b82c	e58d3004	 str         r3, [sp, #4]

; 4892 : }

  0b830	e59d0004	 ldr         r0, [sp, #4]
  0b834	e28dd00c	 add         sp, sp, #0xC
  0b838	e89d6000	 ldmia       sp, {sp, lr}
  0b83c	e12fff1e	 bx          lr
  0b840		 |$M41096|

			 ENDP  ; |?SetHorizontalScaling@OMAPSurface@@UAAHK@Z|, OMAPSurface::SetHorizontalScaling

	EXPORT	|?SetVerticalScaling@OMAPSurface@@UAAHK@Z| ; OMAPSurface::SetVerticalScaling

  001e0			 AREA	 |.pdata|, PDATA
|$T41114| DCD	|$LN20@SetVertica|
	DCD	0x40003e04
; Function compile flags: /Odtp

  0b840			 AREA	 |.text|, CODE, ARM

  0b840		 |?SetVerticalScaling@OMAPSurface@@UAAHK@Z| PROC ; OMAPSurface::SetVerticalScaling

; 4896 : {

  0b840		 |$LN20@SetVertica|
  0b840	e1a0c00d	 mov         r12, sp
  0b844	e92d0003	 stmdb       sp!, {r0, r1}
  0b848	e92d5000	 stmdb       sp!, {r12, lr}
  0b84c	e24dd00c	 sub         sp, sp, #0xC
  0b850		 |$M41111|

; 4897 :     BOOL    bResult;
; 4898 : 
; 4899 :     //  Validate scaling factor
; 4900 :     switch( dwScaleFactor )

  0b850	e59d3018	 ldr         r3, [sp, #0x18]
  0b854	e58d3008	 str         r3, [sp, #8]
  0b858	e59d3008	 ldr         r3, [sp, #8]
  0b85c	e2433001	 sub         r3, r3, #1
  0b860	e58d3008	 str         r3, [sp, #8]
  0b864	e59d3008	 ldr         r3, [sp, #8]
  0b868	e3530007	 cmp         r3, #7
  0b86c	8a000013	 bhi         |$LN2@SetVertica|
  0b870	e59d2008	 ldr         r2, [sp, #8]
  0b874	e1a03102	 mov         r3, r2, lsl #2
  0b878	e083300f	 add         r3, r3, pc
  0b87c	e5933004	 ldr         r3, [r3, #4]
  0b880	e08ff003	 add         pc, pc, r3
  0b884		 |$LN9@SetVertica|
  0b884		 |$LN8@SetVertica|
  0b884		 |$LN10@SetVertica|
  0b884	0000001c	 DCD         0x1c
  0b888		 |$LN11@SetVertica|
  0b888	0000001c	 DCD         0x1c
  0b88c		 |$LN12@SetVertica|
  0b88c	00000038	 DCD         0x38
  0b890		 |$LN13@SetVertica|
  0b890	0000001c	 DCD         0x1c
  0b894		 |$LN14@SetVertica|
  0b894	00000038	 DCD         0x38
  0b898		 |$LN15@SetVertica|
  0b898	00000038	 DCD         0x38
  0b89c		 |$LN16@SetVertica|
  0b89c	00000038	 DCD         0x38
  0b8a0		 |$LN17@SetVertica|
  0b8a0	0000001c	 DCD         0x1c
  0b8a4		 |$LN3@SetVertica|

; 4901 :     {
; 4902 :         case 1:
; 4903 :         case 2:
; 4904 :         case 4:
; 4905 :         case 8:
; 4906 :             //  Valid scaling factors
; 4907 :             m_dwVertScale = dwScaleFactor;

  0b8a4	e59d3014	 ldr         r3, [sp, #0x14]
  0b8a8	e283202c	 add         r2, r3, #0x2C
  0b8ac	e59d3018	 ldr         r3, [sp, #0x18]
  0b8b0	e5823000	 str         r3, [r2]

; 4908 :             bResult = TRUE;

  0b8b4	e3a03001	 mov         r3, #1
  0b8b8	e58d3000	 str         r3, [sp]

; 4909 :             break;

  0b8bc	ea000001	 b           |$LN4@SetVertica|
  0b8c0		 |$LN2@SetVertica|

; 4910 :                     
; 4911 :         default:
; 4912 :             //  Invalid
; 4913 :             bResult = FALSE;

  0b8c0	e3a03000	 mov         r3, #0
  0b8c4	e58d3000	 str         r3, [sp]
  0b8c8		 |$LN4@SetVertica|

; 4914 :             break;
; 4915 :     }
; 4916 : 
; 4917 :     if ((m_pAssocSurface) && (m_eSurfaceType==OMAP_SURFACE_NORMAL))

  0b8c8	e59d3014	 ldr         r3, [sp, #0x14]
  0b8cc	e28330a0	 add         r3, r3, #0xA0
  0b8d0	e5933000	 ldr         r3, [r3]
  0b8d4	e3530000	 cmp         r3, #0
  0b8d8	0a000010	 beq         |$LN1@SetVertica|
  0b8dc	e59d3014	 ldr         r3, [sp, #0x14]
  0b8e0	e283309c	 add         r3, r3, #0x9C
  0b8e4	e5933000	 ldr         r3, [r3]
  0b8e8	e3530000	 cmp         r3, #0
  0b8ec	1a00000b	 bne         |$LN1@SetVertica|

; 4918 :         m_pAssocSurface->SetVerticalScaling(dwScaleFactor);

  0b8f0	e59d1018	 ldr         r1, [sp, #0x18]
  0b8f4	e59d3014	 ldr         r3, [sp, #0x14]
  0b8f8	e28330a0	 add         r3, r3, #0xA0
  0b8fc	e5932000	 ldr         r2, [r3]
  0b900	e59d3014	 ldr         r3, [sp, #0x14]
  0b904	e28330a0	 add         r3, r3, #0xA0
  0b908	e5930000	 ldr         r0, [r3]
  0b90c	e5923000	 ldr         r3, [r2]
  0b910	e2833034	 add         r3, r3, #0x34
  0b914	e5933000	 ldr         r3, [r3]
  0b918	e1a0e00f	 mov         lr, pc
  0b91c	e12fff13	 bx          r3
  0b920		 |$LN1@SetVertica|

; 4919 :     
; 4920 :     //  Return result
; 4921 :     return bResult;

  0b920	e59d3000	 ldr         r3, [sp]
  0b924	e58d3004	 str         r3, [sp, #4]

; 4922 : }

  0b928	e59d0004	 ldr         r0, [sp, #4]
  0b92c	e28dd00c	 add         sp, sp, #0xC
  0b930	e89d6000	 ldmia       sp, {sp, lr}
  0b934	e12fff1e	 bx          lr
  0b938		 |$M41112|

			 ENDP  ; |?SetVerticalScaling@OMAPSurface@@UAAHK@Z|, OMAPSurface::SetVerticalScaling

	EXPORT	|?SetSurfaceType@OMAPSurface@@QAAHW4OMAP_SURFACE_TYPE@@@Z| ; OMAPSurface::SetSurfaceType

  001e8			 AREA	 |.pdata|, PDATA
|$T41120| DCD	|$LN5@SetSurface@2|
	DCD	0x40000e04
; Function compile flags: /Odtp

  0b938			 AREA	 |.text|, CODE, ARM

  0b938		 |?SetSurfaceType@OMAPSurface@@QAAHW4OMAP_SURFACE_TYPE@@@Z| PROC ; OMAPSurface::SetSurfaceType

; 4930 : {

  0b938		 |$LN5@SetSurface@2|
  0b938	e1a0c00d	 mov         r12, sp
  0b93c	e92d0003	 stmdb       sp!, {r0, r1}
  0b940	e92d5000	 stmdb       sp!, {r12, lr}
  0b944	e24dd004	 sub         sp, sp, #4
  0b948		 |$M41117|

; 4931 :     m_eSurfaceType = eSurfaceType;

  0b948	e59d300c	 ldr         r3, [sp, #0xC]
  0b94c	e283209c	 add         r2, r3, #0x9C
  0b950	e59d3010	 ldr         r3, [sp, #0x10]
  0b954	e5823000	 str         r3, [r2]

; 4932 :     return TRUE;

  0b958	e3a03001	 mov         r3, #1
  0b95c	e58d3000	 str         r3, [sp]

; 4933 : }

  0b960	e59d0000	 ldr         r0, [sp]
  0b964	e28dd004	 add         sp, sp, #4
  0b968	e89d6000	 ldmia       sp, {sp, lr}
  0b96c	e12fff1e	 bx          lr
  0b970		 |$M41118|

			 ENDP  ; |?SetSurfaceType@OMAPSurface@@QAAHW4OMAP_SURFACE_TYPE@@@Z|, OMAPSurface::SetSurfaceType

	EXPORT	|?SetAssocSurface@OMAPSurface@@QAAHPAV1@@Z| ; OMAPSurface::SetAssocSurface

  001f0			 AREA	 |.pdata|, PDATA
|$T41126| DCD	|$LN5@SetAssocSu|
	DCD	0x40000e04
; Function compile flags: /Odtp

  0b970			 AREA	 |.text|, CODE, ARM

  0b970		 |?SetAssocSurface@OMAPSurface@@QAAHPAV1@@Z| PROC ; OMAPSurface::SetAssocSurface

; 4940 : {

  0b970		 |$LN5@SetAssocSu|
  0b970	e1a0c00d	 mov         r12, sp
  0b974	e92d0003	 stmdb       sp!, {r0, r1}
  0b978	e92d5000	 stmdb       sp!, {r12, lr}
  0b97c	e24dd004	 sub         sp, sp, #4
  0b980		 |$M41123|

; 4941 :     m_pAssocSurface = pAssocSurface;

  0b980	e59d300c	 ldr         r3, [sp, #0xC]
  0b984	e28320a0	 add         r2, r3, #0xA0
  0b988	e59d3010	 ldr         r3, [sp, #0x10]
  0b98c	e5823000	 str         r3, [r2]

; 4942 :     return TRUE;

  0b990	e3a03001	 mov         r3, #1
  0b994	e58d3000	 str         r3, [sp]

; 4943 : }

  0b998	e59d0000	 ldr         r0, [sp]
  0b99c	e28dd004	 add         sp, sp, #4
  0b9a0	e89d6000	 ldmia       sp, {sp, lr}
  0b9a4	e12fff1e	 bx          lr
  0b9a8		 |$M41124|

			 ENDP  ; |?SetAssocSurface@OMAPSurface@@QAAHPAV1@@Z|, OMAPSurface::SetAssocSurface


  001f8			 AREA	 |.pdata|, PDATA
|$T41132| DCD	|$LN7@UseResizer|
	DCD	0x40001a04
; Function compile flags: /Odtp

  0b9a8			 AREA	 |.text|, CODE, ARM

  0b9a8		 |?UseResizer@OMAPSurface@@QAAHH@Z| PROC ; OMAPSurface::UseResizer

; 4950 : {

  0b9a8		 |$LN7@UseResizer|
  0b9a8	e1a0c00d	 mov         r12, sp
  0b9ac	e92d0003	 stmdb       sp!, {r0, r1}
  0b9b0	e92d5000	 stmdb       sp!, {r12, lr}
  0b9b4	e24dd004	 sub         sp, sp, #4
  0b9b8		 |$M41129|

; 4951 :     if (m_pAssocSurface)

  0b9b8	e59d300c	 ldr         r3, [sp, #0xC]
  0b9bc	e28330a0	 add         r3, r3, #0xA0
  0b9c0	e5933000	 ldr         r3, [r3]
  0b9c4	e3530000	 cmp         r3, #0
  0b9c8	0a000004	 beq         |$LN2@UseResizer|

; 4952 :         m_bUseResizer = bUseResizer;

  0b9cc	e59d300c	 ldr         r3, [sp, #0xC]
  0b9d0	e2832030	 add         r2, r3, #0x30
  0b9d4	e59d3010	 ldr         r3, [sp, #0x10]
  0b9d8	e5823000	 str         r3, [r2]

; 4953 :     else /* force to false if Assoc Surface is not allocated */

  0b9dc	ea000003	 b           |$LN1@UseResizer|
  0b9e0		 |$LN2@UseResizer|

; 4954 :         m_bUseResizer = FALSE;

  0b9e0	e59d300c	 ldr         r3, [sp, #0xC]
  0b9e4	e2832030	 add         r2, r3, #0x30
  0b9e8	e3a03000	 mov         r3, #0
  0b9ec	e5823000	 str         r3, [r2]
  0b9f0		 |$LN1@UseResizer|

; 4955 :     return m_bUseResizer;

  0b9f0	e59d300c	 ldr         r3, [sp, #0xC]
  0b9f4	e2833030	 add         r3, r3, #0x30
  0b9f8	e5933000	 ldr         r3, [r3]
  0b9fc	e58d3000	 str         r3, [sp]

; 4956 : }

  0ba00	e59d0000	 ldr         r0, [sp]
  0ba04	e28dd004	 add         sp, sp, #4
  0ba08	e89d6000	 ldmia       sp, {sp, lr}
  0ba0c	e12fff1e	 bx          lr
  0ba10		 |$M41130|

			 ENDP  ; |?UseResizer@OMAPSurface@@QAAHH@Z|, OMAPSurface::UseResizer


  00200			 AREA	 |.pdata|, PDATA
|$T41138| DCD	|$LN5@isResizerE|
	DCD	0x40000c04
; Function compile flags: /Odtp

  0ba10			 AREA	 |.text|, CODE, ARM

  0ba10		 |?isResizerEnabled@OMAPSurface@@QAAHXZ| PROC ; OMAPSurface::isResizerEnabled

; 4961 : {

  0ba10		 |$LN5@isResizerE|
  0ba10	e1a0c00d	 mov         r12, sp
  0ba14	e92d0001	 stmdb       sp!, {r0}
  0ba18	e92d5000	 stmdb       sp!, {r12, lr}
  0ba1c	e24dd004	 sub         sp, sp, #4
  0ba20		 |$M41135|

; 4962 :     return m_bUseResizer;

  0ba20	e59d300c	 ldr         r3, [sp, #0xC]
  0ba24	e2833030	 add         r3, r3, #0x30
  0ba28	e5933000	 ldr         r3, [r3]
  0ba2c	e58d3000	 str         r3, [sp]

; 4963 : }

  0ba30	e59d0000	 ldr         r0, [sp]
  0ba34	e28dd004	 add         sp, sp, #4
  0ba38	e89d6000	 ldmia       sp, {sp, lr}
  0ba3c	e12fff1e	 bx          lr
  0ba40		 |$M41136|

			 ENDP  ; |?isResizerEnabled@OMAPSurface@@QAAHXZ|, OMAPSurface::isResizerEnabled

	EXPORT	|??_C@_1EE@MPPHFCGE@?$AAG?$AAe?$AAt?$AAR?$AAS?$AAZ?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AA?3?$AA?5?$AAO?$AAp?$AAe?$AAn?$AA?5?$AAh?$AAa?$AAn?$AAd?$AAl?$AAe?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?5?$AA?$AN@| [ DATA ] ; `string'
	EXPORT	|??_C@_1M@JCBPODIL@?$AAR?$AAS?$AAZ?$AA1?$AA?3?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|CreateFileW|

  00208			 AREA	 |.pdata|, PDATA
|$T41149| DCD	|$LN9@GetRSZHand|
	DCD	0x40003904

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EE@MPPHFCGE@?$AAG?$AAe?$AAt?$AAR?$AAS?$AAZ?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AA?3?$AA?5?$AAO?$AAp?$AAe?$AAn?$AA?5?$AAh?$AAa?$AAn?$AAd?$AAl?$AAe?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?5?$AA?$AN@| DCB "G"
	DCB	0x0, "e", 0x0, "t", 0x0, "R", 0x0, "S", 0x0, "Z", 0x0, "H"
	DCB	0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e", 0x0, ":"
	DCB	0x0, " ", 0x0, "O", 0x0, "p", 0x0, "e", 0x0, "n", 0x0, " "
	DCB	0x0, "h", 0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e"
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, " "
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@JCBPODIL@?$AAR?$AAS?$AAZ?$AA1?$AA?3?$AA?$AA@| DCB "R", 0x0, "S", 0x0
	DCB	"Z", 0x0, "1", 0x0, ":", 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  0ba40			 AREA	 |.text|, CODE, ARM

  0ba40		 |?GetRSZHandle@OMAPSurface@@QAAPAXH@Z| PROC ; OMAPSurface::GetRSZHandle

; 4967 : {

  0ba40		 |$LN9@GetRSZHand|
  0ba40	e1a0c00d	 mov         r12, sp
  0ba44	e92d0003	 stmdb       sp!, {r0, r1}
  0ba48	e92d5000	 stmdb       sp!, {r12, lr}
  0ba4c	e24dd024	 sub         sp, sp, #0x24
  0ba50		 |$M41146|

; 4968 :     if ((m_hRSZHandle == NULL) && alloc)

  0ba50	e59d302c	 ldr         r3, [sp, #0x2C]
  0ba54	e2833034	 add         r3, r3, #0x34
  0ba58	e5933000	 ldr         r3, [r3]
  0ba5c	e3530000	 cmp         r3, #0
  0ba60	1a000025	 bne         |$LN2@GetRSZHand|
  0ba64	e59d3030	 ldr         r3, [sp, #0x30]
  0ba68	e3530000	 cmp         r3, #0
  0ba6c	0a000022	 beq         |$LN2@GetRSZHand|

; 4969 :     {
; 4970 :         m_hRSZHandle = CreateFile( _T("RSZ1:"), 
; 4971 :                                         GENERIC_READ | GENERIC_WRITE, 0, NULL,
; 4972 :                                         OPEN_EXISTING, 0, 0 );

  0ba70	e3a03000	 mov         r3, #0
  0ba74	e58d3008	 str         r3, [sp, #8]
  0ba78	e3a03000	 mov         r3, #0
  0ba7c	e58d3004	 str         r3, [sp, #4]
  0ba80	e3a03003	 mov         r3, #3
  0ba84	e58d3000	 str         r3, [sp]
  0ba88	e3a03000	 mov         r3, #0
  0ba8c	e3a02000	 mov         r2, #0
  0ba90	e3a01103	 mov         r1, #3, 2
  0ba94	e59f0084	 ldr         r0, [pc, #0x84]
  0ba98	eb000000	 bl          CreateFileW
  0ba9c	e58d001c	 str         r0, [sp, #0x1C]
  0baa0	e59d302c	 ldr         r3, [sp, #0x2C]
  0baa4	e2832034	 add         r2, r3, #0x34
  0baa8	e59d301c	 ldr         r3, [sp, #0x1C]
  0baac	e5823000	 str         r3, [r2]

; 4973 :         if (m_hRSZHandle == INVALID_HANDLE_VALUE)

  0bab0	e59d302c	 ldr         r3, [sp, #0x2C]
  0bab4	e2833034	 add         r3, r3, #0x34
  0bab8	e5933000	 ldr         r3, [r3]
  0babc	e3730001	 cmn         r3, #1
  0bac0	1a000003	 bne         |$LN1@GetRSZHand|

; 4974 :             m_hRSZHandle = NULL;

  0bac4	e59d302c	 ldr         r3, [sp, #0x2C]
  0bac8	e2832034	 add         r2, r3, #0x34
  0bacc	e3a03000	 mov         r3, #0
  0bad0	e5823000	 str         r3, [r2]
  0bad4		 |$LN1@GetRSZHand|

; 4975 : 
; 4976 :         DEBUGMSG(ZONE_WARNING, (L"GetRSZHandle: Open handle 0x%x \r\n",m_hRSZHandle));

  0bad4	e59d302c	 ldr         r3, [sp, #0x2C]
  0bad8	e2833034	 add         r3, r3, #0x34
  0badc	e5931000	 ldr         r1, [r3]
  0bae0	e59f0034	 ldr         r0, [pc, #0x34]
  0bae4	eb000000	 bl          NKDbgPrintfW
  0bae8	e3a03001	 mov         r3, #1
  0baec	e58d3020	 str         r3, [sp, #0x20]
  0baf0	ea000001	 b           |$LN6@GetRSZHand|
  0baf4	e3a03000	 mov         r3, #0
  0baf8	e58d3020	 str         r3, [sp, #0x20]
  0bafc		 |$LN6@GetRSZHand|
  0bafc		 |$LN2@GetRSZHand|

; 4977 :         
; 4978 :     }
; 4979 :     return m_hRSZHandle;

  0bafc	e59d302c	 ldr         r3, [sp, #0x2C]
  0bb00	e2833034	 add         r3, r3, #0x34
  0bb04	e5933000	 ldr         r3, [r3]
  0bb08	e58d3018	 str         r3, [sp, #0x18]

; 4980 : }

  0bb0c	e59d0018	 ldr         r0, [sp, #0x18]
  0bb10	e28dd024	 add         sp, sp, #0x24
  0bb14	e89d6000	 ldmia       sp, {sp, lr}
  0bb18	e12fff1e	 bx          lr
  0bb1c		 |$LN10@GetRSZHand|
  0bb1c		 |$LN11@GetRSZHand|
  0bb1c	00000000	 DCD         |??_C@_1EE@MPPHFCGE@?$AAG?$AAe?$AAt?$AAR?$AAS?$AAZ?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AA?3?$AA?5?$AAO?$AAp?$AAe?$AAn?$AA?5?$AAh?$AAa?$AAn?$AAd?$AAl?$AAe?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?5?$AA?$AN@|
  0bb20		 |$LN12@GetRSZHand|
  0bb20	00000000	 DCD         |??_C@_1M@JCBPODIL@?$AAR?$AAS?$AAZ?$AA1?$AA?3?$AA?$AA@|
  0bb24		 |$M41147|

			 ENDP  ; |?GetRSZHandle@OMAPSurface@@QAAPAXH@Z|, OMAPSurface::GetRSZHandle


  00210			 AREA	 |.pdata|, PDATA
|$T41157| DCD	|$LN6@SetRSZHand|
	DCD	0x40001903
; Function compile flags: /Odtp

  0bb24			 AREA	 |.text|, CODE, ARM

  0bb24		 |?SetRSZHandle@OMAPSurface@@QAAXPAXH@Z| PROC ; OMAPSurface::SetRSZHandle

; 4983 : {

  0bb24		 |$LN6@SetRSZHand|
  0bb24	e1a0c00d	 mov         r12, sp
  0bb28	e92d0007	 stmdb       sp!, {r0 - r2}
  0bb2c	e92d5000	 stmdb       sp!, {r12, lr}
  0bb30		 |$M41154|

; 4984 :     if ((m_hRSZHandle != NULL) && freeHandle)

  0bb30	e59d3008	 ldr         r3, [sp, #8]
  0bb34	e2833034	 add         r3, r3, #0x34
  0bb38	e5933000	 ldr         r3, [r3]
  0bb3c	e3530000	 cmp         r3, #0
  0bb40	0a00000a	 beq         |$LN1@SetRSZHand|
  0bb44	e59d3010	 ldr         r3, [sp, #0x10]
  0bb48	e3530000	 cmp         r3, #0
  0bb4c	0a000007	 beq         |$LN1@SetRSZHand|

; 4985 :     {        
; 4986 :         CloseHandle(m_hRSZHandle);

  0bb50	e59d3008	 ldr         r3, [sp, #8]
  0bb54	e2833034	 add         r3, r3, #0x34
  0bb58	e5930000	 ldr         r0, [r3]
  0bb5c	eb000000	 bl          CloseHandle

; 4987 :         
; 4988 :         m_hRSZHandle = NULL;

  0bb60	e59d3008	 ldr         r3, [sp, #8]
  0bb64	e2832034	 add         r2, r3, #0x34
  0bb68	e3a03000	 mov         r3, #0
  0bb6c	e5823000	 str         r3, [r2]
  0bb70		 |$LN1@SetRSZHand|

; 4989 :     }
; 4990 : 
; 4991 :     m_hRSZHandle = rszHandle;

  0bb70	e59d3008	 ldr         r3, [sp, #8]
  0bb74	e2832034	 add         r2, r3, #0x34
  0bb78	e59d300c	 ldr         r3, [sp, #0xC]
  0bb7c	e5823000	 str         r3, [r2]

; 4992 : }

  0bb80	e89d6000	 ldmia       sp, {sp, lr}
  0bb84	e12fff1e	 bx          lr
  0bb88		 |$M41155|

			 ENDP  ; |?SetRSZHandle@OMAPSurface@@QAAXPAXH@Z|, OMAPSurface::SetRSZHandle

	EXPORT	|??_C@_1HA@GHANLCIH@?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAR?$AAe?$AAs?$AAi?$AAz?$AAe?$AAr?$AAP?$AAa?$AAr?$AAa?$AAm?$AAs?$AA?3?$AA?5?$AAh?$AAa?$AAn?$AAd?$AAl?$AAe?$AA?5?$AA0?$AAx?$AA?$CF?$AAx@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GE@BDIJKBGM@?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAR?$AAe?$AAs?$AAi?$AAz?$AAe?$AAr?$AAP?$AAa?$AAr?$AAa?$AAm?$AAs?$AA?3?$AA?5?$AAU?$AAn?$AAs?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAe?$AAd@| [ DATA ] ; `string'
	IMPORT	|DeviceIoControl|

  00218			 AREA	 |.pdata|, PDATA
|$T41171| DCD	|$LN14@ConfigResi|
	DCD	0x4000d104

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HA@GHANLCIH@?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAR?$AAe?$AAs?$AAi?$AAz?$AAe?$AAr?$AAP?$AAa?$AAr?$AAa?$AAm?$AAs?$AA?3?$AA?5?$AAh?$AAa?$AAn?$AAd?$AAl?$AAe?$AA?5?$AA0?$AAx?$AA?$CF?$AAx@| DCB "C"
	DCB	0x0, "o", 0x0, "n", 0x0, "f", 0x0, "i", 0x0, "g", 0x0, "R"
	DCB	0x0, "e", 0x0, "s", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, "r"
	DCB	0x0, "P", 0x0, "a", 0x0, "r", 0x0, "a", 0x0, "m", 0x0, "s"
	DCB	0x0, ":", 0x0, " ", 0x0, "h", 0x0, "a", 0x0, "n", 0x0, "d"
	DCB	0x0, "l", 0x0, "e", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "x", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "t", 0x0, "u"
	DCB	0x0, "r", 0x0, "n", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "r"
	DCB	0x0, "e", 0x0, "t", 0x0, "C", 0x0, "o", 0x0, "d", 0x0, "e"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GE@BDIJKBGM@?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAR?$AAe?$AAs?$AAi?$AAz?$AAe?$AAr?$AAP?$AAa?$AAr?$AAa?$AAm?$AAs?$AA?3?$AA?5?$AAU?$AAn?$AAs?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAe?$AAd@| DCB "C"
	DCB	0x0, "o", 0x0, "n", 0x0, "f", 0x0, "i", 0x0, "g", 0x0, "R"
	DCB	0x0, "e", 0x0, "s", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, "r"
	DCB	0x0, "P", 0x0, "a", 0x0, "r", 0x0, "a", 0x0, "m", 0x0, "s"
	DCB	0x0, ":", 0x0, " ", 0x0, "U", 0x0, "n", 0x0, "s", 0x0, "u"
	DCB	0x0, "p", 0x0, "p", 0x0, "o", 0x0, "r", 0x0, "t", 0x0, "e"
	DCB	0x0, "d", 0x0, " ", 0x0, "p", 0x0, "i", 0x0, "x", 0x0, "e"
	DCB	0x0, "l", 0x0, " ", 0x0, "t", 0x0, "y", 0x0, "p", 0x0, "e"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  0bb88			 AREA	 |.text|, CODE, ARM

  0bb88		 |?ConfigResizerParams@OMAPSurface@@QAAHPAUtagRECT@@0W4OMAP_DSS_ROTATION@@@Z| PROC ; OMAPSurface::ConfigResizerParams

; 4996 : {	

  0bb88		 |$LN14@ConfigResi|
  0bb88	e1a0c00d	 mov         r12, sp
  0bb8c	e92d000f	 stmdb       sp!, {r0 - r3}
  0bb90	e92d5000	 stmdb       sp!, {r12, lr}
  0bb94	e24dd03c	 sub         sp, sp, #0x3C
  0bb98		 |$M41168|

; 4997 :     BOOL retCode = FALSE;

  0bb98	e3a03000	 mov         r3, #0
  0bb9c	e58d3010	 str         r3, [sp, #0x10]

; 4998 :      
; 4999 :     //m_sRSZParams.ulReadAddr;
; 5000 :     m_sRSZParams.ulReadOffset = Stride(eRotation); /* input width * 2 */

  0bba0	e59d1050	 ldr         r1, [sp, #0x50]
  0bba4	e59d3044	 ldr         r3, [sp, #0x44]
  0bba8	e5933000	 ldr         r3, [r3]
  0bbac	e2833010	 add         r3, r3, #0x10
  0bbb0	e59d0044	 ldr         r0, [sp, #0x44]
  0bbb4	e5933000	 ldr         r3, [r3]
  0bbb8	e1a0e00f	 mov         lr, pc
  0bbbc	e12fff13	 bx          r3
  0bbc0	e58d0028	 str         r0, [sp, #0x28]
  0bbc4	e59d3044	 ldr         r3, [sp, #0x44]
  0bbc8	e283203c	 add         r2, r3, #0x3C
  0bbcc	e59d3028	 ldr         r3, [sp, #0x28]
  0bbd0	e5823000	 str         r3, [r2]

; 5001 :     m_sRSZParams.ulReadAddrOffset = 0;

  0bbd4	e59d3044	 ldr         r3, [sp, #0x44]
  0bbd8	e2832040	 add         r2, r3, #0x40
  0bbdc	e3a03000	 mov         r3, #0
  0bbe0	e5823000	 str         r3, [r2]

; 5002 :     m_sRSZParams.ulOutOffset = Stride(eRotation);     

  0bbe4	e59d1050	 ldr         r1, [sp, #0x50]
  0bbe8	e59d3044	 ldr         r3, [sp, #0x44]
  0bbec	e5933000	 ldr         r3, [r3]
  0bbf0	e2833010	 add         r3, r3, #0x10
  0bbf4	e59d0044	 ldr         r0, [sp, #0x44]
  0bbf8	e5933000	 ldr         r3, [r3]
  0bbfc	e1a0e00f	 mov         lr, pc
  0bc00	e12fff13	 bx          r3
  0bc04	e58d002c	 str         r0, [sp, #0x2C]
  0bc08	e59d3044	 ldr         r3, [sp, #0x44]
  0bc0c	e2832090	 add         r2, r3, #0x90
  0bc10	e59d302c	 ldr         r3, [sp, #0x2C]
  0bc14	e5823000	 str         r3, [r2]

; 5003 :     //m_sRSZParams.ulWriteAddr;
; 5004 : 
; 5005 :     m_sRSZParams.ulInputImageWidth = pSrcRect->right - pSrcRect->left;

  0bc18	e59d3048	 ldr         r3, [sp, #0x48]
  0bc1c	e2833008	 add         r3, r3, #8
  0bc20	e5932000	 ldr         r2, [r3]
  0bc24	e59d3048	 ldr         r3, [sp, #0x48]
  0bc28	e5933000	 ldr         r3, [r3]
  0bc2c	e0422003	 sub         r2, r2, r3
  0bc30	e59d3044	 ldr         r3, [sp, #0x44]
  0bc34	e2833048	 add         r3, r3, #0x48
  0bc38	e5832000	 str         r2, [r3]

; 5006 :     m_sRSZParams.ulInputImageHeight = pSrcRect->bottom - pSrcRect->top;

  0bc3c	e59d3048	 ldr         r3, [sp, #0x48]
  0bc40	e283200c	 add         r2, r3, #0xC
  0bc44	e59d3048	 ldr         r3, [sp, #0x48]
  0bc48	e2833004	 add         r3, r3, #4
  0bc4c	e5922000	 ldr         r2, [r2]
  0bc50	e5933000	 ldr         r3, [r3]
  0bc54	e0422003	 sub         r2, r2, r3
  0bc58	e59d3044	 ldr         r3, [sp, #0x44]
  0bc5c	e283304c	 add         r3, r3, #0x4C
  0bc60	e5832000	 str         r2, [r3]

; 5007 : 
; 5008 :     m_sRSZParams.ulOutputImageWidth = pDestRect->right - pDestRect->left;

  0bc64	e59d304c	 ldr         r3, [sp, #0x4C]
  0bc68	e2833008	 add         r3, r3, #8
  0bc6c	e5932000	 ldr         r2, [r3]
  0bc70	e59d304c	 ldr         r3, [sp, #0x4C]
  0bc74	e5933000	 ldr         r3, [r3]
  0bc78	e0422003	 sub         r2, r2, r3
  0bc7c	e59d3044	 ldr         r3, [sp, #0x44]
  0bc80	e2833050	 add         r3, r3, #0x50
  0bc84	e5832000	 str         r2, [r3]

; 5009 :     m_sRSZParams.ulOutputImageHeight = pDestRect->bottom - pDestRect->top;

  0bc88	e59d304c	 ldr         r3, [sp, #0x4C]
  0bc8c	e283200c	 add         r2, r3, #0xC
  0bc90	e59d304c	 ldr         r3, [sp, #0x4C]
  0bc94	e2833004	 add         r3, r3, #4
  0bc98	e5922000	 ldr         r2, [r2]
  0bc9c	e5933000	 ldr         r3, [r3]
  0bca0	e0422003	 sub         r2, r2, r3
  0bca4	e59d3044	 ldr         r3, [sp, #0x44]
  0bca8	e2833054	 add         r3, r3, #0x54
  0bcac	e5832000	 str         r2, [r3]

; 5010 :     m_sRSZParams.h_startphase = RSZ_DEFAULTSTPHASE;

  0bcb0	e59d3044	 ldr         r3, [sp, #0x44]
  0bcb4	e2832058	 add         r2, r3, #0x58
  0bcb8	e3a03001	 mov         r3, #1
  0bcbc	e5823000	 str         r3, [r2]

; 5011 :     m_sRSZParams.v_startphase = RSZ_DEFAULTSTPHASE;

  0bcc0	e59d3044	 ldr         r3, [sp, #0x44]
  0bcc4	e283205c	 add         r2, r3, #0x5C
  0bcc8	e3a03001	 mov         r3, #1
  0bccc	e5823000	 str         r3, [r2]

; 5012 :     //m_sRSZParams.h_resz;
; 5013 :     //m_sRSZParams.v_resz;
; 5014 :     //m_sRSZParams.algo;
; 5015 :     m_sRSZParams.width = m_sRSZParams.ulInputImageWidth;

  0bcd0	e59d3044	 ldr         r3, [sp, #0x44]
  0bcd4	e2831048	 add         r1, r3, #0x48
  0bcd8	e59d3044	 ldr         r3, [sp, #0x44]
  0bcdc	e283206c	 add         r2, r3, #0x6C
  0bce0	e5913000	 ldr         r3, [r1]
  0bce4	e5823000	 str         r3, [r2]

; 5016 :     m_sRSZParams.height = m_sRSZParams.ulInputImageHeight;

  0bce8	e59d3044	 ldr         r3, [sp, #0x44]
  0bcec	e283104c	 add         r1, r3, #0x4C
  0bcf0	e59d3044	 ldr         r3, [sp, #0x44]
  0bcf4	e2832070	 add         r2, r3, #0x70
  0bcf8	e5913000	 ldr         r3, [r1]
  0bcfc	e5823000	 str         r3, [r2]

; 5017 :     m_sRSZParams.cropTop = 0;

  0bd00	e59d3044	 ldr         r3, [sp, #0x44]
  0bd04	e2832074	 add         r2, r3, #0x74
  0bd08	e3a03000	 mov         r3, #0
  0bd0c	e5823000	 str         r3, [r2]

; 5018 :     m_sRSZParams.cropLeft = 0;     

  0bd10	e59d3044	 ldr         r3, [sp, #0x44]
  0bd14	e2832078	 add         r2, r3, #0x78
  0bd18	e3a03000	 mov         r3, #0
  0bd1c	e5823000	 str         r3, [r2]

; 5019 :     m_sRSZParams.cropWidth = m_sRSZParams.ulOutputImageWidth;

  0bd20	e59d3044	 ldr         r3, [sp, #0x44]
  0bd24	e2831050	 add         r1, r3, #0x50
  0bd28	e59d3044	 ldr         r3, [sp, #0x44]
  0bd2c	e2832080	 add         r2, r3, #0x80
  0bd30	e5913000	 ldr         r3, [r1]
  0bd34	e5823000	 str         r3, [r2]

; 5020 :     m_sRSZParams.cropHeight = m_sRSZParams.ulOutputImageHeight;

  0bd38	e59d3044	 ldr         r3, [sp, #0x44]
  0bd3c	e2831054	 add         r1, r3, #0x54
  0bd40	e59d3044	 ldr         r3, [sp, #0x44]
  0bd44	e283207c	 add         r2, r3, #0x7C
  0bd48	e5913000	 ldr         r3, [r1]
  0bd4c	e5823000	 str         r3, [r2]

; 5021 :     m_sRSZParams.bReadFromMemory = TRUE;

  0bd50	e59d3044	 ldr         r3, [sp, #0x44]
  0bd54	e2832084	 add         r2, r3, #0x84
  0bd58	e3a03001	 mov         r3, #1
  0bd5c	e5823000	 str         r3, [r2]

; 5022 :     m_sRSZParams.enableZoom = FALSE;

  0bd60	e59d3044	 ldr         r3, [sp, #0x44]
  0bd64	e2832088	 add         r2, r3, #0x88
  0bd68	e3a03000	 mov         r3, #0
  0bd6c	e5823000	 str         r3, [r2]

; 5023 :     m_sRSZParams.ulZoomFactor = 0;

  0bd70	e59d3044	 ldr         r3, [sp, #0x44]
  0bd74	e283208c	 add         r2, r3, #0x8C
  0bd78	e3a03000	 mov         r3, #0
  0bd7c	e5823000	 str         r3, [r2]

; 5024 :     if (m_ePixelFormat == OMAP_DSS_PIXELFORMAT_UYVY)

  0bd80	e59d3044	 ldr         r3, [sp, #0x44]
  0bd84	e2833004	 add         r3, r3, #4
  0bd88	e5933000	 ldr         r3, [r3]
  0bd8c	e353000b	 cmp         r3, #0xB
  0bd90	1a000008	 bne         |$LN5@ConfigResi|

; 5025 :     {
; 5026 :         m_sRSZParams.ulInpType = RSZ_INTYPE_YCBCR422_16BIT; 

  0bd94	e59d3044	 ldr         r3, [sp, #0x44]
  0bd98	e2832098	 add         r2, r3, #0x98
  0bd9c	e3a03000	 mov         r3, #0
  0bda0	e5823000	 str         r3, [r2]

; 5027 :         m_sRSZParams.ulPixFmt = RSZ_PIX_FMT_UYVY; 

  0bda4	e59d3044	 ldr         r3, [sp, #0x44]
  0bda8	e2832094	 add         r2, r3, #0x94
  0bdac	e3a03000	 mov         r3, #0
  0bdb0	e5823000	 str         r3, [r2]
  0bdb4	ea00001a	 b           |$LN4@ConfigResi|
  0bdb8		 |$LN5@ConfigResi|

; 5028 :     }
; 5029 :     else if (m_ePixelFormat == OMAP_DSS_PIXELFORMAT_YUV2)        

  0bdb8	e59d3044	 ldr         r3, [sp, #0x44]
  0bdbc	e2833004	 add         r3, r3, #4
  0bdc0	e5933000	 ldr         r3, [r3]
  0bdc4	e353000a	 cmp         r3, #0xA
  0bdc8	1a000008	 bne         |$LN3@ConfigResi|

; 5030 :     {
; 5031 :         m_sRSZParams.ulInpType = RSZ_INTYPE_YCBCR422_16BIT; 

  0bdcc	e59d3044	 ldr         r3, [sp, #0x44]
  0bdd0	e2832098	 add         r2, r3, #0x98
  0bdd4	e3a03000	 mov         r3, #0
  0bdd8	e5823000	 str         r3, [r2]

; 5032 :         m_sRSZParams.ulPixFmt = RSZ_PIX_FMT_YUYV; 

  0bddc	e59d3044	 ldr         r3, [sp, #0x44]
  0bde0	e2832094	 add         r2, r3, #0x94
  0bde4	e3a03001	 mov         r3, #1
  0bde8	e5823000	 str         r3, [r2]

; 5033 :     }
; 5034 :     else

  0bdec	ea00000c	 b           |$LN2@ConfigResi|
  0bdf0		 |$LN3@ConfigResi|

; 5035 :     {
; 5036 :         DEBUGMSG(ZONE_WARNING, (L"ConfigResizerParams: Unsupported pixel type %d \r\n",m_ePixelFormat));

  0bdf0	e59d3044	 ldr         r3, [sp, #0x44]
  0bdf4	e2833004	 add         r3, r3, #4
  0bdf8	e5931000	 ldr         r1, [r3]
  0bdfc	e59f00c4	 ldr         r0, [pc, #0xC4]
  0be00	eb000000	 bl          NKDbgPrintfW
  0be04	e3a03001	 mov         r3, #1
  0be08	e58d3030	 str         r3, [sp, #0x30]
  0be0c	ea000001	 b           |$LN9@ConfigResi|
  0be10	e3a03000	 mov         r3, #0
  0be14	e58d3030	 str         r3, [sp, #0x30]
  0be18		 |$LN9@ConfigResi|

; 5037 :         return FALSE;

  0be18	e3a03000	 mov         r3, #0
  0be1c	e58d3014	 str         r3, [sp, #0x14]
  0be20	ea000023	 b           |$LN6@ConfigResi|
  0be24		 |$LN2@ConfigResi|
  0be24		 |$LN4@ConfigResi|

; 5038 :     }
; 5039 :     
; 5040 :     retCode = DeviceIoControl (  m_hRSZHandle,
; 5041 :                                  RSZ_IOCTL_SET_PARAMS,
; 5042 :                                  (LPVOID)&m_sRSZParams, 
; 5043 :                                  sizeof (RSZParams_t), 
; 5044 :                                  (LPVOID)&m_sRSZParams, 
; 5045 :                                  sizeof (RSZParams_t), NULL, NULL);

  0be24	e3a03000	 mov         r3, #0
  0be28	e58d300c	 str         r3, [sp, #0xC]
  0be2c	e3a03000	 mov         r3, #0
  0be30	e58d3008	 str         r3, [sp, #8]
  0be34	e3a03064	 mov         r3, #0x64
  0be38	e58d3004	 str         r3, [sp, #4]
  0be3c	e59d3044	 ldr         r3, [sp, #0x44]
  0be40	e2833038	 add         r3, r3, #0x38
  0be44	e58d3000	 str         r3, [sp]
  0be48	e3a03064	 mov         r3, #0x64
  0be4c	e59d2044	 ldr         r2, [sp, #0x44]
  0be50	e2822038	 add         r2, r2, #0x38
  0be54	e3a01002	 mov         r1, #2
  0be58	e59d0044	 ldr         r0, [sp, #0x44]
  0be5c	e2800034	 add         r0, r0, #0x34
  0be60	e5900000	 ldr         r0, [r0]
  0be64	eb000000	 bl          DeviceIoControl
  0be68	e58d0034	 str         r0, [sp, #0x34]
  0be6c	e59d3034	 ldr         r3, [sp, #0x34]
  0be70	e58d3010	 str         r3, [sp, #0x10]

; 5046 : 
; 5047 :     if (!retCode)     

  0be74	e59d3010	 ldr         r3, [sp, #0x10]
  0be78	e3530000	 cmp         r3, #0
  0be7c	1a00000a	 bne         |$LN1@ConfigResi|

; 5048 :         DEBUGMSG(ZONE_WARNING, (L"ConfigResizerParams: handle 0x%x returned retCode %d \r\n",m_hRSZHandle,retCode));

  0be80	e59d2010	 ldr         r2, [sp, #0x10]
  0be84	e59d3044	 ldr         r3, [sp, #0x44]
  0be88	e2833034	 add         r3, r3, #0x34
  0be8c	e5931000	 ldr         r1, [r3]
  0be90	e59f002c	 ldr         r0, [pc, #0x2C]
  0be94	eb000000	 bl          NKDbgPrintfW
  0be98	e3a03001	 mov         r3, #1
  0be9c	e58d3038	 str         r3, [sp, #0x38]
  0bea0	ea000001	 b           |$LN11@ConfigResi|
  0bea4	e3a03000	 mov         r3, #0
  0bea8	e58d3038	 str         r3, [sp, #0x38]
  0beac		 |$LN11@ConfigResi|
  0beac		 |$LN1@ConfigResi|

; 5049 : 
; 5050 : 
; 5051 :      return retCode;

  0beac	e59d3010	 ldr         r3, [sp, #0x10]
  0beb0	e58d3014	 str         r3, [sp, #0x14]
  0beb4		 |$LN6@ConfigResi|

; 5052 :      
; 5053 : }

  0beb4	e59d0014	 ldr         r0, [sp, #0x14]
  0beb8	e28dd03c	 add         sp, sp, #0x3C
  0bebc	e89d6000	 ldmia       sp, {sp, lr}
  0bec0	e12fff1e	 bx          lr
  0bec4		 |$LN15@ConfigResi|
  0bec4		 |$LN16@ConfigResi|
  0bec4	00000000	 DCD         |??_C@_1HA@GHANLCIH@?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAR?$AAe?$AAs?$AAi?$AAz?$AAe?$AAr?$AAP?$AAa?$AAr?$AAa?$AAm?$AAs?$AA?3?$AA?5?$AAh?$AAa?$AAn?$AAd?$AAl?$AAe?$AA?5?$AA0?$AAx?$AA?$CF?$AAx@|
  0bec8		 |$LN17@ConfigResi|
  0bec8	00000000	 DCD         |??_C@_1GE@BDIJKBGM@?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAR?$AAe?$AAs?$AAi?$AAz?$AAe?$AAr?$AAP?$AAa?$AAr?$AAa?$AAm?$AAs?$AA?3?$AA?5?$AAU?$AAn?$AAs?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAe?$AAd@|
  0becc		 |$M41169|

			 ENDP  ; |?ConfigResizerParams@OMAPSurface@@QAAHPAUtagRECT@@0W4OMAP_DSS_ROTATION@@@Z|, OMAPSurface::ConfigResizerParams

	EXPORT	|??_C@_1KG@MAPDGCGJ@?$AAS?$AAt?$AAa?$AAr?$AAt?$AAR?$AAe?$AAs?$AAi?$AAz?$AAe?$AAr?$AA?3?$AA?5?$AAh?$AAa?$AAn?$AAd?$AAl?$AAe?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?5?$AAi?$AAn?$AAA?$AAd?$AAd?$AAr@| [ DATA ] ; `string'

  00220			 AREA	 |.pdata|, PDATA
|$T41188| DCD	|$LN10@StartResiz|
	DCD	0x40005604

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KG@MAPDGCGJ@?$AAS?$AAt?$AAa?$AAr?$AAt?$AAR?$AAe?$AAs?$AAi?$AAz?$AAe?$AAr?$AA?3?$AA?5?$AAh?$AAa?$AAn?$AAd?$AAl?$AAe?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?5?$AAi?$AAn?$AAA?$AAd?$AAd?$AAr@| DCB "S"
	DCB	0x0, "t", 0x0, "a", 0x0, "r", 0x0, "t", 0x0, "R", 0x0, "e"
	DCB	0x0, "s", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, "r", 0x0, ":"
	DCB	0x0, " ", 0x0, "h", 0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l"
	DCB	0x0, "e", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x"
	DCB	0x0, " ", 0x0, "i", 0x0, "n", 0x0, "A", 0x0, "d", 0x0, "d"
	DCB	0x0, "r", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x"
	DCB	0x0, " ", 0x0, "o", 0x0, "u", 0x0, "t", 0x0, "A", 0x0, "d"
	DCB	0x0, "d", 0x0, "r", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "x", 0x0, " ", 0x0, "c", 0x0, "r", 0x0, "o", 0x0, "p"
	DCB	0x0, "L", 0x0, "e", 0x0, "f", 0x0, "t", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "t", 0x0, "u"
	DCB	0x0, "r", 0x0, "n", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "r"
	DCB	0x0, "e", 0x0, "t", 0x0, "C", 0x0, "o", 0x0, "d", 0x0, "e"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  0becc			 AREA	 |.text|, CODE, ARM

  0becc		 |?StartResizer@OMAPSurface@@QAAHKK@Z| PROC ; OMAPSurface::StartResizer

; 5056 : {

  0becc		 |$LN10@StartResiz|
  0becc	e1a0c00d	 mov         r12, sp
  0bed0	e92d0007	 stmdb       sp!, {r0 - r2}
  0bed4	e92d5000	 stmdb       sp!, {r12, lr}
  0bed8	e24dd03c	 sub         sp, sp, #0x3C
  0bedc		 |$M41185|

; 5057 :     BOOL retCode = FALSE;   

  0bedc	e3a03000	 mov         r3, #0
  0bee0	e58d3010	 str         r3, [sp, #0x10]

; 5058 :     DWORD dwInAddrOffset = 0;

  0bee4	e3a03000	 mov         r3, #0
  0bee8	e58d3014	 str         r3, [sp, #0x14]

; 5059 :     if (dwInAddr%32!=0)

  0beec	e59d1048	 ldr         r1, [sp, #0x48]
  0bef0	e3a00020	 mov         r0, #0x20
  0bef4	eb000000	 bl          __rt_udiv
  0bef8	e3510000	 cmp         r1, #0
  0befc	0a00000f	 beq         |$LN3@StartResiz|

; 5060 :     {
; 5061 :         dwInAddrOffset=dwInAddr&0x1F;

  0bf00	e59d3048	 ldr         r3, [sp, #0x48]
  0bf04	e203301f	 and         r3, r3, #0x1F
  0bf08	e58d3014	 str         r3, [sp, #0x14]

; 5062 :         dwInAddr=(dwInAddr>>5)<<5;

  0bf0c	e59d3048	 ldr         r3, [sp, #0x48]
  0bf10	e1a032a3	 mov         r3, r3, lsr #5
  0bf14	e1a03283	 mov         r3, r3, lsl #5
  0bf18	e58d3048	 str         r3, [sp, #0x48]

; 5063 :         if (m_sRSZParams.ulInpType == RSZ_INTYPE_YCBCR422_16BIT)

  0bf1c	e59d3044	 ldr         r3, [sp, #0x44]
  0bf20	e2833098	 add         r3, r3, #0x98
  0bf24	e5933000	 ldr         r3, [r3]
  0bf28	e3530000	 cmp         r3, #0
  0bf2c	1a000003	 bne         |$LN2@StartResiz|

; 5064 :             dwInAddrOffset/=2;

  0bf30	e59d1014	 ldr         r1, [sp, #0x14]
  0bf34	e3a00002	 mov         r0, #2
  0bf38	eb000000	 bl          __rt_udiv
  0bf3c	e58d0014	 str         r0, [sp, #0x14]
  0bf40		 |$LN2@StartResiz|
  0bf40		 |$LN3@StartResiz|

; 5065 :     }
; 5066 :     m_sRSZParams.ulReadAddr = dwInAddr;

  0bf40	e59d3044	 ldr         r3, [sp, #0x44]
  0bf44	e2832038	 add         r2, r3, #0x38
  0bf48	e59d3048	 ldr         r3, [sp, #0x48]
  0bf4c	e5823000	 str         r3, [r2]

; 5067 :     m_sRSZParams.ulWriteAddr = dwOutAddr;

  0bf50	e59d3044	 ldr         r3, [sp, #0x44]
  0bf54	e2832044	 add         r2, r3, #0x44
  0bf58	e59d304c	 ldr         r3, [sp, #0x4C]
  0bf5c	e5823000	 str         r3, [r2]

; 5068 :     m_sRSZParams.cropLeft = dwInAddrOffset;

  0bf60	e59d3044	 ldr         r3, [sp, #0x44]
  0bf64	e2832078	 add         r2, r3, #0x78
  0bf68	e59d3014	 ldr         r3, [sp, #0x14]
  0bf6c	e5823000	 str         r3, [r2]

; 5069 :     retCode = DeviceIoControl ( m_hRSZHandle,
; 5070 :                                  RSZ_IOCTL_START_RESIZER,
; 5071 :                                  (LPVOID)&m_sRSZParams, 
; 5072 :                                  sizeof (RSZParams_t), 
; 5073 :                                  NULL, 0, NULL, NULL);

  0bf70	e3a03000	 mov         r3, #0
  0bf74	e58d300c	 str         r3, [sp, #0xC]
  0bf78	e3a03000	 mov         r3, #0
  0bf7c	e58d3008	 str         r3, [sp, #8]
  0bf80	e3a03000	 mov         r3, #0
  0bf84	e58d3004	 str         r3, [sp, #4]
  0bf88	e3a03000	 mov         r3, #0
  0bf8c	e58d3000	 str         r3, [sp]
  0bf90	e3a03064	 mov         r3, #0x64
  0bf94	e59d2044	 ldr         r2, [sp, #0x44]
  0bf98	e2822038	 add         r2, r2, #0x38
  0bf9c	e3a01004	 mov         r1, #4
  0bfa0	e59d0044	 ldr         r0, [sp, #0x44]
  0bfa4	e2800034	 add         r0, r0, #0x34
  0bfa8	e5900000	 ldr         r0, [r0]
  0bfac	eb000000	 bl          DeviceIoControl
  0bfb0	e58d0034	 str         r0, [sp, #0x34]
  0bfb4	e59d3034	 ldr         r3, [sp, #0x34]
  0bfb8	e58d3010	 str         r3, [sp, #0x10]

; 5074 :     if (!retCode)     

  0bfbc	e59d3010	 ldr         r3, [sp, #0x10]
  0bfc0	e3530000	 cmp         r3, #0
  0bfc4	1a00000f	 bne         |$LN1@StartResiz|

; 5075 :         DEBUGMSG(ZONE_WARNING, (L"StartResizer: handle 0x%x inAddr 0x%x outAddr 0x%x cropLeft %d returned retCode %d",
; 5076 :                         m_hRSZHandle,dwInAddr,dwOutAddr,dwInAddrOffset,retCode));

  0bfc8	e59d3010	 ldr         r3, [sp, #0x10]
  0bfcc	e58d3004	 str         r3, [sp, #4]
  0bfd0	e59d3014	 ldr         r3, [sp, #0x14]
  0bfd4	e58d3000	 str         r3, [sp]
  0bfd8	e59d304c	 ldr         r3, [sp, #0x4C]
  0bfdc	e59d2048	 ldr         r2, [sp, #0x48]
  0bfe0	e59d1044	 ldr         r1, [sp, #0x44]
  0bfe4	e2811034	 add         r1, r1, #0x34
  0bfe8	e5911000	 ldr         r1, [r1]
  0bfec	e59f002c	 ldr         r0, [pc, #0x2C]
  0bff0	eb000000	 bl          NKDbgPrintfW
  0bff4	e3a03001	 mov         r3, #1
  0bff8	e58d3038	 str         r3, [sp, #0x38]
  0bffc	ea000001	 b           |$LN7@StartResiz|
  0c000	e3a03000	 mov         r3, #0
  0c004	e58d3038	 str         r3, [sp, #0x38]
  0c008		 |$LN7@StartResiz|
  0c008		 |$LN1@StartResiz|

; 5077 : 
; 5078 :     return retCode;

  0c008	e59d3010	 ldr         r3, [sp, #0x10]
  0c00c	e58d3030	 str         r3, [sp, #0x30]

; 5079 : }

  0c010	e59d0030	 ldr         r0, [sp, #0x30]
  0c014	e28dd03c	 add         sp, sp, #0x3C
  0c018	e89d6000	 ldmia       sp, {sp, lr}
  0c01c	e12fff1e	 bx          lr
  0c020		 |$LN11@StartResiz|
  0c020		 |$LN12@StartResiz|
  0c020	00000000	 DCD         |??_C@_1KG@MAPDGCGJ@?$AAS?$AAt?$AAa?$AAr?$AAt?$AAR?$AAe?$AAs?$AAi?$AAz?$AAe?$AAr?$AA?3?$AA?5?$AAh?$AAa?$AAn?$AAd?$AAl?$AAe?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?5?$AAi?$AAn?$AAA?$AAd?$AAd?$AAr@|
  0c024		 |$M41186|

			 ENDP  ; |?StartResizer@OMAPSurface@@QAAHKK@Z|, OMAPSurface::StartResizer

	EXPORT	|?SetDssFclk@OMAPDisplayController@@IAAHW4OMAP_DSS_FCLK@@W4OMAP_DSS_FCLKVALUE@@@Z| ; OMAPDisplayController::SetDssFclk
	IMPORT	|PmxNotifyPolicy|

  00228			 AREA	 |.pdata|, PDATA
|$T41199| DCD	|$LN14@EnableLPR|
	DCD	0x40007004
; Function compile flags: /Odtp

  0c024			 AREA	 |.text|, CODE, ARM

  0c024		 |?EnableLPR@OMAPDisplayController@@QAAXHH@Z| PROC ; OMAPDisplayController::EnableLPR

; 5085 : {

  0c024		 |$LN14@EnableLPR|
  0c024	e1a0c00d	 mov         r12, sp
  0c028	e92d000f	 stmdb       sp!, {r0 - r3}
  0c02c	e92d5000	 stmdb       sp!, {r12, lr}
  0c030	e24dd00c	 sub         sp, sp, #0xC
  0c034		 |$M41196|

; 5086 :     OMAP_DSS_FCLKVALUE eFclkValue = m_eDssFclkValue;

  0c034	e59d3014	 ldr         r3, [sp, #0x14]
  0c038	e2833c05	 add         r3, r3, #5, 24
  0c03c	e283300c	 add         r3, r3, #0xC
  0c040	e5933000	 ldr         r3, [r3]
  0c044	e58d3000	 str         r3, [sp]

; 5087 : 
; 5088 :     if (m_hSmartReflexPolicyAdapter == NULL)

  0c048	e59d3014	 ldr         r3, [sp, #0x14]
  0c04c	e2833c05	 add         r3, r3, #5, 24
  0c050	e2833018	 add         r3, r3, #0x18
  0c054	e5933000	 ldr         r3, [r3]
  0c058	e3530000	 cmp         r3, #0
  0c05c	1a000000	 bne         |$LN5@EnableLPR|

; 5089 : 	    return;

  0c060	ea00005a	 b           |$LN6@EnableLPR|
  0c064		 |$LN5@EnableLPR|

; 5090 : 
; 5091 :     if (m_bDVIEnable)

  0c064	e59d3014	 ldr         r3, [sp, #0x14]
  0c068	e2833b01	 add         r3, r3, #1, 22
  0c06c	e28330cc	 add         r3, r3, #0xCC
  0c070	e5933000	 ldr         r3, [r3]
  0c074	e3530000	 cmp         r3, #0
  0c078	0a000000	 beq         |$LN4@EnableLPR|

; 5092 :         return;

  0c07c	ea000053	 b           |$LN6@EnableLPR|
  0c080		 |$LN4@EnableLPR|

; 5093 : 
; 5094 :     if ((bEnable == m_bLPREnable) && (bHdmiEnable == FALSE))

  0c080	e59d3014	 ldr         r3, [sp, #0x14]
  0c084	e2833e51	 add         r3, r3, #0x51, 28
  0c088	e59d2018	 ldr         r2, [sp, #0x18]
  0c08c	e5933000	 ldr         r3, [r3]
  0c090	e1520003	 cmp         r2, r3
  0c094	1a000003	 bne         |$LN3@EnableLPR|
  0c098	e59d301c	 ldr         r3, [sp, #0x1C]
  0c09c	e3530000	 cmp         r3, #0
  0c0a0	1a000000	 bne         |$LN3@EnableLPR|

; 5095 :     {
; 5096 :         return;

  0c0a4	ea000049	 b           |$LN6@EnableLPR|
  0c0a8		 |$LN3@EnableLPR|

; 5097 :     }
; 5098 :     
; 5099 :     // For HDMI Panel, the FCLK specific to HDMI panel should be used
; 5100 :     eFclkValue = ( bHdmiEnable ) ? OMAP_DSS_FCLKVALUE_HDMI : eFclkValue ;

  0c0a8	e59d301c	 ldr         r3, [sp, #0x1C]
  0c0ac	e3530000	 cmp         r3, #0
  0c0b0	0a000002	 beq         |$LN8@EnableLPR|
  0c0b4	e59f3124	 ldr         r3, [pc, #0x124]
  0c0b8	e58d3004	 str         r3, [sp, #4]
  0c0bc	ea000001	 b           |$LN9@EnableLPR|
  0c0c0		 |$LN8@EnableLPR|
  0c0c0	e59d3000	 ldr         r3, [sp]
  0c0c4	e58d3004	 str         r3, [sp, #4]
  0c0c8		 |$LN9@EnableLPR|
  0c0c8	e59d3004	 ldr         r3, [sp, #4]
  0c0cc	e58d3000	 str         r3, [sp]

; 5101 :     // LPR is disabled when HDMI panel is active
; 5102 :     bEnable    = ( bHdmiEnable ) ? FALSE : bEnable;

  0c0d0	e59d301c	 ldr         r3, [sp, #0x1C]
  0c0d4	e3530000	 cmp         r3, #0
  0c0d8	0a000002	 beq         |$LN10@EnableLPR|
  0c0dc	e3a03000	 mov         r3, #0
  0c0e0	e58d3008	 str         r3, [sp, #8]
  0c0e4	ea000001	 b           |$LN11@EnableLPR|
  0c0e8		 |$LN10@EnableLPR|
  0c0e8	e59d3018	 ldr         r3, [sp, #0x18]
  0c0ec	e58d3008	 str         r3, [sp, #8]
  0c0f0		 |$LN11@EnableLPR|
  0c0f0	e59d3008	 ldr         r3, [sp, #8]
  0c0f4	e58d3018	 str         r3, [sp, #0x18]

; 5103 :  
; 5104 :     if (bEnable)

  0c0f8	e59d3018	 ldr         r3, [sp, #0x18]
  0c0fc	e3530000	 cmp         r3, #0
  0c100	0a000017	 beq         |$LN2@EnableLPR|

; 5105 :         {
; 5106 : 
; 5107 :         //Send LPR status to SmartReflex policy adapter
; 5108 :         PmxNotifyPolicy(m_hSmartReflexPolicyAdapter,SMARTREFLEX_LPR_MODE,&bEnable,sizeof(BOOL));

  0c104	e3a03004	 mov         r3, #4
  0c108	e28d2018	 add         r2, sp, #0x18
  0c10c	e3a01106	 mov         r1, #6, 2
  0c110	e3811801	 orr         r1, r1, #1, 16
  0c114	e59d0014	 ldr         r0, [sp, #0x14]
  0c118	e2800c05	 add         r0, r0, #5, 24
  0c11c	e2800018	 add         r0, r0, #0x18
  0c120	e5900000	 ldr         r0, [r0]
  0c124	eb000000	 bl          PmxNotifyPolicy

; 5109 :         
; 5110 :         // Set the FCLK corresponding to LPR mode
; 5111 :         SetDssFclk ( m_eDssFclkSource, OMAP_DSS_FCLKVALUE_LPR );

  0c128	e59f20ac	 ldr         r2, [pc, #0xAC]
  0c12c	e59d3014	 ldr         r3, [sp, #0x14]
  0c130	e2833c05	 add         r3, r3, #5, 24
  0c134	e2833008	 add         r3, r3, #8
  0c138	e5931000	 ldr         r1, [r3]
  0c13c	e59d0014	 ldr         r0, [sp, #0x14]
  0c140	eb000000	 bl          |?SetDssFclk@OMAPDisplayController@@IAAHW4OMAP_DSS_FCLK@@W4OMAP_DSS_FCLKVALUE@@@Z|

; 5112 :      
; 5113 :         // Enable LPR
; 5114 :         OUTREG32( &m_pDispRegs->DISPC_SYSCONFIG,
; 5115 :                     DISPC_SYSCONFIG_AUTOIDLE|
; 5116 :                     SYSCONFIG_SMARTIDLE|
; 5117 :                     SYSCONFIG_ENAWAKEUP|
; 5118 :                     SYSCONFIG_CLOCKACTIVITY_I_ON|
; 5119 :                     SYSCONFIG_SMARTSTANDBY
; 5120 :                     );

  0c144	e59d3014	 ldr         r3, [sp, #0x14]
  0c148	e2833008	 add         r3, r3, #8
  0c14c	e5933000	 ldr         r3, [r3]
  0c150	e2832010	 add         r2, r3, #0x10
  0c154	e3a03c22	 mov         r3, #0x22, 24
  0c158	e3833015	 orr         r3, r3, #0x15
  0c15c	e5823000	 str         r3, [r2]

; 5121 :                   
; 5122 :         }
; 5123 :     else

  0c160	ea000016	 b           |$LN1@EnableLPR|
  0c164		 |$LN2@EnableLPR|

; 5124 :         {
; 5125 :         // Disable LPR
; 5126 :         OUTREG32( &m_pDispRegs->DISPC_SYSCONFIG,
; 5127 :                     DISPC_SYSCONFIG_AUTOIDLE|
; 5128 :                     SYSCONFIG_NOIDLE|
; 5129 :                     SYSCONFIG_NOSTANDBY
; 5130 :                     );

  0c164	e59d3014	 ldr         r3, [sp, #0x14]
  0c168	e2833008	 add         r3, r3, #8
  0c16c	e5933000	 ldr         r3, [r3]
  0c170	e2832010	 add         r2, r3, #0x10
  0c174	e3a03a01	 mov         r3, #1, 20
  0c178	e3833009	 orr         r3, r3, #9
  0c17c	e5823000	 str         r3, [r2]

; 5131 :                   
; 5132 :         // Set the FCLK corresponding to LPR mode
; 5133 :         SetDssFclk ( m_eDssFclkSource, eFclkValue );  

  0c180	e59d2000	 ldr         r2, [sp]
  0c184	e59d3014	 ldr         r3, [sp, #0x14]
  0c188	e2833c05	 add         r3, r3, #5, 24
  0c18c	e2833008	 add         r3, r3, #8
  0c190	e5931000	 ldr         r1, [r3]
  0c194	e59d0014	 ldr         r0, [sp, #0x14]
  0c198	eb000000	 bl          |?SetDssFclk@OMAPDisplayController@@IAAHW4OMAP_DSS_FCLK@@W4OMAP_DSS_FCLKVALUE@@@Z|

; 5134 : 
; 5135 :         //Send LPR status to SmartReflex policy adapter
; 5136 :         PmxNotifyPolicy(m_hSmartReflexPolicyAdapter,SMARTREFLEX_LPR_MODE,&bEnable,sizeof(BOOL));

  0c19c	e3a03004	 mov         r3, #4
  0c1a0	e28d2018	 add         r2, sp, #0x18
  0c1a4	e3a01106	 mov         r1, #6, 2
  0c1a8	e3811801	 orr         r1, r1, #1, 16
  0c1ac	e59d0014	 ldr         r0, [sp, #0x14]
  0c1b0	e2800c05	 add         r0, r0, #5, 24
  0c1b4	e2800018	 add         r0, r0, #0x18
  0c1b8	e5900000	 ldr         r0, [r0]
  0c1bc	eb000000	 bl          PmxNotifyPolicy
  0c1c0		 |$LN1@EnableLPR|

; 5137 :         }
; 5138 :     m_bLPREnable = bEnable; 

  0c1c0	e59d3014	 ldr         r3, [sp, #0x14]
  0c1c4	e2832e51	 add         r2, r3, #0x51, 28
  0c1c8	e59d3018	 ldr         r3, [sp, #0x18]
  0c1cc	e5823000	 str         r3, [r2]
  0c1d0		 |$LN6@EnableLPR|

; 5139 : }

  0c1d0	e28dd00c	 add         sp, sp, #0xC
  0c1d4	e89d6000	 ldmia       sp, {sp, lr}
  0c1d8	e12fff1e	 bx          lr
  0c1dc		 |$LN15@EnableLPR|
  0c1dc		 |$LN16@EnableLPR|
  0c1dc	05b8d800	 DCD         0x5b8d800
  0c1e0		 |$LN17@EnableLPR|
  0c1e0	08d9ee20	 DCD         0x8d9ee20
  0c1e4		 |$M41197|

			 ENDP  ; |?EnableLPR@OMAPDisplayController@@QAAXHH@Z|, OMAPDisplayController::EnableLPR

	EXPORT	|?PixelSize@OMAPSurface@@QAAKXZ|	; OMAPSurface::PixelSize

  00230			 AREA	 |.pdata|, PDATA
|$T41207| DCD	|$LN13@EnableOver|
	DCD	0x4000b004
; Function compile flags: /Odtp

  0c1e4			 AREA	 |.text|, CODE, ARM

  0c1e4		 |?EnableOverlayOptimization@OMAPDisplayController@@QAAXH@Z| PROC ; OMAPDisplayController::EnableOverlayOptimization

; 5144 : {

  0c1e4		 |$LN13@EnableOver|
  0c1e4	e1a0c00d	 mov         r12, sp
  0c1e8	e92d0003	 stmdb       sp!, {r0, r1}
  0c1ec	e92d5000	 stmdb       sp!, {r12, lr}
  0c1f0	e24dd034	 sub         sp, sp, #0x34
  0c1f4		 |$M41204|

; 5145 :     DWORD dwWindowSkip = 0;  

  0c1f4	e3a03000	 mov         r3, #0
  0c1f8	e58d3000	 str         r3, [sp]

; 5146 : 
; 5147 :     //Enable Overlay optimization if no colorkeying, no alpha blending and only VID1 layer is visible
; 5148 :     //going to LCD destination
; 5149 :     if( bEnable &&
; 5150 :         g_rgPipelineMapping[OMAP_DSS_PIPELINE_GFX].pSurface != NULL &&           
; 5151 :         g_rgPipelineMapping[OMAP_DSS_PIPELINE_GFX].bEnabled == TRUE &&
; 5152 :         g_rgPipelineMapping[OMAP_DSS_PIPELINE_VIDEO1].eDestination == OMAP_DSS_DESTINATION_LCD &&
; 5153 :         g_rgPipelineMapping[OMAP_DSS_PIPELINE_VIDEO1].bEnabled == TRUE &&
; 5154 :         g_rgPipelineMapping[OMAP_DSS_PIPELINE_VIDEO2].bEnabled == FALSE && 
; 5155 :         (INREG32(&m_pDispRegs->DISPC_CONFIG) & DISPC_CONFIG_TCKLCDENABLE) == 0 &&
; 5156 :         (INREG32( &m_pDispRegs->DISPC_CONFIG) & DISPC_CONFIG_LCDALPHABLENDERENABLE) == 0)

  0c1fc	e59d3040	 ldr         r3, [sp, #0x40]
  0c200	e3530000	 cmp         r3, #0
  0c204	0a000081	 beq         |$LN8@EnableOver|
  0c208	e59f3290	 ldr         r3, [pc, #0x290]
  0c20c	e5933008	 ldr         r3, [r3, #8]
  0c210	e3530000	 cmp         r3, #0
  0c214	0a00007d	 beq         |$LN8@EnableOver|
  0c218	e59f3280	 ldr         r3, [pc, #0x280]
  0c21c	e5933000	 ldr         r3, [r3]
  0c220	e3530001	 cmp         r3, #1
  0c224	1a000079	 bne         |$LN8@EnableOver|
  0c228	e59f3270	 ldr         r3, [pc, #0x270]
  0c22c	e5933024	 ldr         r3, [r3, #0x24]
  0c230	e3530000	 cmp         r3, #0
  0c234	1a000075	 bne         |$LN8@EnableOver|
  0c238	e59f3260	 ldr         r3, [pc, #0x260]
  0c23c	e5933020	 ldr         r3, [r3, #0x20]
  0c240	e3530001	 cmp         r3, #1
  0c244	1a000071	 bne         |$LN8@EnableOver|
  0c248	e59f3250	 ldr         r3, [pc, #0x250]
  0c24c	e5933040	 ldr         r3, [r3, #0x40]
  0c250	e3530000	 cmp         r3, #0
  0c254	1a00006d	 bne         |$LN8@EnableOver|
  0c258	e59d303c	 ldr         r3, [sp, #0x3C]
  0c25c	e2833008	 add         r3, r3, #8
  0c260	e5933000	 ldr         r3, [r3]
  0c264	e2833044	 add         r3, r3, #0x44
  0c268	e5933000	 ldr         r3, [r3]
  0c26c	e3130b01	 tst         r3, #1, 22
  0c270	1a000066	 bne         |$LN8@EnableOver|
  0c274	e59d303c	 ldr         r3, [sp, #0x3C]
  0c278	e2833008	 add         r3, r3, #8
  0c27c	e5933000	 ldr         r3, [r3]
  0c280	e2833044	 add         r3, r3, #0x44
  0c284	e5933000	 ldr         r3, [r3]
  0c288	e3130701	 tst         r3, #1, 14
  0c28c	1a00005f	 bne         |$LN8@EnableOver|

; 5157 :     {
; 5158 :          //Assume overlay destination is always contained within the GFX window inclusive  
; 5159 :         OMAPSurface *pGFXSurface = g_rgPipelineMapping[OMAP_DSS_PIPELINE_GFX].pSurface;             

  0c290	e59f3208	 ldr         r3, [pc, #0x208]
  0c294	e5933008	 ldr         r3, [r3, #8]
  0c298	e58d301c	 str         r3, [sp, #0x1C]

; 5160 :         DWORD dwGFXWidth = g_rgPipelineMapping[OMAP_DSS_PIPELINE_GFX].dwDestWidth;

  0c29c	e59f31fc	 ldr         r3, [pc, #0x1FC]
  0c2a0	e5933014	 ldr         r3, [r3, #0x14]
  0c2a4	e58d3014	 str         r3, [sp, #0x14]

; 5161 :         DWORD dwGFXHeight = g_rgPipelineMapping[OMAP_DSS_PIPELINE_GFX].dwDestHeight;

  0c2a8	e59f31f0	 ldr         r3, [pc, #0x1F0]
  0c2ac	e5933018	 ldr         r3, [r3, #0x18]
  0c2b0	e58d3010	 str         r3, [sp, #0x10]

; 5162 :         DWORD dwDestWidth = g_rgPipelineMapping[OMAP_DSS_PIPELINE_VIDEO1].dwDestWidth;

  0c2b4	e59f31e4	 ldr         r3, [pc, #0x1E4]
  0c2b8	e5933034	 ldr         r3, [r3, #0x34]
  0c2bc	e58d3008	 str         r3, [sp, #8]

; 5163 :         DWORD dwDestHeight = g_rgPipelineMapping[OMAP_DSS_PIPELINE_VIDEO1].dwDestHeight;

  0c2c0	e59f31d8	 ldr         r3, [pc, #0x1D8]
  0c2c4	e5933038	 ldr         r3, [r3, #0x38]
  0c2c8	e58d300c	 str         r3, [sp, #0xC]

; 5164 :         DWORD dwPosX =  INREG32(&m_pDispRegs->tDISPC_VID1.POSITION) & 0xFFFF;

  0c2cc	e59d303c	 ldr         r3, [sp, #0x3C]
  0c2d0	e2833008	 add         r3, r3, #8
  0c2d4	e5933000	 ldr         r3, [r3]
  0c2d8	e28330c4	 add         r3, r3, #0xC4
  0c2dc	e5932000	 ldr         r2, [r3]
  0c2e0	e3a03cff	 mov         r3, #0xFF, 24
  0c2e4	e38330ff	 orr         r3, r3, #0xFF
  0c2e8	e0023003	 and         r3, r2, r3
  0c2ec	e58d3004	 str         r3, [sp, #4]

; 5165 :         DWORD dwGFXPixInc = INREG32(&m_pDispRegs->DISPC_GFX_PIXEL_INC);

  0c2f0	e59d303c	 ldr         r3, [sp, #0x3C]
  0c2f4	e2833008	 add         r3, r3, #8
  0c2f8	e5933000	 ldr         r3, [r3]
  0c2fc	e28330b0	 add         r3, r3, #0xB0
  0c300	e5933000	 ldr         r3, [r3]
  0c304	e58d3020	 str         r3, [sp, #0x20]

; 5166 :         DWORD dwGFXRowInc = INREG32(&m_pDispRegs->DISPC_GFX_ROW_INC);

  0c308	e59d303c	 ldr         r3, [sp, #0x3C]
  0c30c	e2833008	 add         r3, r3, #8
  0c310	e5933000	 ldr         r3, [r3]
  0c314	e28330ac	 add         r3, r3, #0xAC
  0c318	e5933000	 ldr         r3, [r3]
  0c31c	e58d3018	 str         r3, [sp, #0x18]

; 5167 :                
; 5168 :         //Simulate how the DMA controller would skip bytes
; 5169 :         //1.after every pixel read DMA controller index = index + BPP-1
; 5170 :         //2.After every pixel read, index = index+PIXEL_INC, unless it's the last pixel in the row
; 5171 :         //3.At the end of each row, index = index+ROW_INC       
; 5172 :         if( (dwDestWidth == dwGFXWidth) && (dwDestHeight == dwGFXHeight) )

  0c320	e59d2008	 ldr         r2, [sp, #8]
  0c324	e59d3014	 ldr         r3, [sp, #0x14]
  0c328	e1520003	 cmp         r2, r3
  0c32c	1a000006	 bne         |$LN7@EnableOver|
  0c330	e59d200c	 ldr         r2, [sp, #0xC]
  0c334	e59d3010	 ldr         r3, [sp, #0x10]
  0c338	e1520003	 cmp         r2, r3
  0c33c	1a000002	 bne         |$LN7@EnableOver|

; 5173 :         {
; 5174 :             //  Whole video layer covers GFX
; 5175 :             dwWindowSkip = 0;

  0c340	e3a03000	 mov         r3, #0
  0c344	e58d3000	 str         r3, [sp]
  0c348	ea000030	 b           |$LN6@EnableOver|
  0c34c		 |$LN7@EnableOver|

; 5176 :         }
; 5177 :         else if(dwDestWidth == dwGFXWidth)

  0c34c	e59d2008	 ldr         r2, [sp, #8]
  0c350	e59d3014	 ldr         r3, [sp, #0x14]
  0c354	e1520003	 cmp         r2, r3
  0c358	1a000015	 bne         |$LN5@EnableOver|

; 5178 :         {               
; 5179 :             DWORD dwPixIncPerRow = dwGFXPixInc*(dwDestWidth-1);

  0c35c	e59d3008	 ldr         r3, [sp, #8]
  0c360	e2433001	 sub         r3, r3, #1
  0c364	e59d2020	 ldr         r2, [sp, #0x20]
  0c368	e0030392	 mul         r3, r2, r3
  0c36c	e58d3024	 str         r3, [sp, #0x24]

; 5180 :             DWORD dwByteReadsPerRow = dwDestWidth*(pGFXSurface->PixelSize()-1);

  0c370	e59d001c	 ldr         r0, [sp, #0x1C]
  0c374	eb000000	 bl          |?PixelSize@OMAPSurface@@QAAKXZ|
  0c378	e58d002c	 str         r0, [sp, #0x2C]
  0c37c	e59d302c	 ldr         r3, [sp, #0x2C]
  0c380	e2433001	 sub         r3, r3, #1
  0c384	e59d2008	 ldr         r2, [sp, #8]
  0c388	e0030392	 mul         r3, r2, r3
  0c38c	e58d3028	 str         r3, [sp, #0x28]

; 5181 :             dwWindowSkip = dwDestHeight*(dwPixIncPerRow+dwByteReadsPerRow+dwGFXRowInc);         

  0c390	e59d2024	 ldr         r2, [sp, #0x24]
  0c394	e59d3028	 ldr         r3, [sp, #0x28]
  0c398	e0822003	 add         r2, r2, r3
  0c39c	e59d3018	 ldr         r3, [sp, #0x18]
  0c3a0	e0823003	 add         r3, r2, r3
  0c3a4	e59d200c	 ldr         r2, [sp, #0xC]
  0c3a8	e0030392	 mul         r3, r2, r3
  0c3ac	e58d3000	 str         r3, [sp]

; 5182 :         }        
; 5183 :         else  

  0c3b0	ea000016	 b           |$LN4@EnableOver|
  0c3b4		 |$LN5@EnableOver|

; 5184 :         {              
; 5185 :             dwWindowSkip = dwDestWidth*(dwGFXPixInc+(pGFXSurface->PixelSize()-1));  

  0c3b4	e59d001c	 ldr         r0, [sp, #0x1C]
  0c3b8	eb000000	 bl          |?PixelSize@OMAPSurface@@QAAKXZ|
  0c3bc	e58d0030	 str         r0, [sp, #0x30]
  0c3c0	e59d3030	 ldr         r3, [sp, #0x30]
  0c3c4	e2432001	 sub         r2, r3, #1
  0c3c8	e59d3020	 ldr         r3, [sp, #0x20]
  0c3cc	e0833002	 add         r3, r3, r2
  0c3d0	e59d2008	 ldr         r2, [sp, #8]
  0c3d4	e0030392	 mul         r3, r2, r3
  0c3d8	e58d3000	 str         r3, [sp]

; 5186 :             if(dwPosX != 0 && (dwPosX+dwDestWidth) != dwGFXWidth)

  0c3dc	e59d3004	 ldr         r3, [sp, #4]
  0c3e0	e3530000	 cmp         r3, #0
  0c3e4	0a000009	 beq         |$LN3@EnableOver|
  0c3e8	e59d2004	 ldr         r2, [sp, #4]
  0c3ec	e59d3008	 ldr         r3, [sp, #8]
  0c3f0	e0822003	 add         r2, r2, r3
  0c3f4	e59d3014	 ldr         r3, [sp, #0x14]
  0c3f8	e1520003	 cmp         r2, r3
  0c3fc	0a000003	 beq         |$LN3@EnableOver|

; 5187 :             {
; 5188 :                 //additional pixel increment needed
; 5189 :                 dwWindowSkip +=dwGFXPixInc;  

  0c400	e59d2000	 ldr         r2, [sp]
  0c404	e59d3020	 ldr         r3, [sp, #0x20]
  0c408	e0823003	 add         r3, r2, r3
  0c40c	e58d3000	 str         r3, [sp]
  0c410		 |$LN3@EnableOver|
  0c410		 |$LN4@EnableOver|
  0c410		 |$LN6@EnableOver|
  0c410		 |$LN8@EnableOver|

; 5190 :             }
; 5191 :         }                        
; 5192 :     }
; 5193 : 
; 5194 : 
; 5195 :     //  Set window skip value
; 5196 :     OUTREG32(&m_pDispRegs->DISPC_GFX_WINDOW_SKIP, dwWindowSkip);

  0c410	e59d303c	 ldr         r3, [sp, #0x3C]
  0c414	e2833008	 add         r3, r3, #8
  0c418	e5933000	 ldr         r3, [r3]
  0c41c	e28320b4	 add         r2, r3, #0xB4
  0c420	e59d3000	 ldr         r3, [sp]
  0c424	e5823000	 str         r3, [r2]

; 5197 : 
; 5198 :     //  Enable/disable window skip
; 5199 :     if( dwWindowSkip != 0 )

  0c428	e59d3000	 ldr         r3, [sp]
  0c42c	e3530000	 cmp         r3, #0
  0c430	0a00000b	 beq         |$LN2@EnableOver|

; 5200 :         SETREG32(&m_pDispRegs->DISPC_CONTROL, DISPC_CONTROL_OVERLAY_OPTIMIZATION);        

  0c434	e59d303c	 ldr         r3, [sp, #0x3C]
  0c438	e2833008	 add         r3, r3, #8
  0c43c	e5933000	 ldr         r3, [r3]
  0c440	e2833040	 add         r3, r3, #0x40
  0c444	e5933000	 ldr         r3, [r3]
  0c448	e3832a01	 orr         r2, r3, #1, 20
  0c44c	e59d303c	 ldr         r3, [sp, #0x3C]
  0c450	e2833008	 add         r3, r3, #8
  0c454	e5933000	 ldr         r3, [r3]
  0c458	e2833040	 add         r3, r3, #0x40
  0c45c	e5832000	 str         r2, [r3]

; 5201 :     else

  0c460	ea00000b	 b           |$LN1@EnableOver|
  0c464		 |$LN2@EnableOver|

; 5202 :         CLRREG32(&m_pDispRegs->DISPC_CONTROL, DISPC_CONTROL_OVERLAY_OPTIMIZATION);        

  0c464	e59d303c	 ldr         r3, [sp, #0x3C]
  0c468	e2833008	 add         r3, r3, #8
  0c46c	e5933000	 ldr         r3, [r3]
  0c470	e2833040	 add         r3, r3, #0x40
  0c474	e5932000	 ldr         r2, [r3]
  0c478	e3e03a01	 mvn         r3, #1, 20
  0c47c	e0022003	 and         r2, r2, r3
  0c480	e59d303c	 ldr         r3, [sp, #0x3C]
  0c484	e2833008	 add         r3, r3, #8
  0c488	e5933000	 ldr         r3, [r3]
  0c48c	e2833040	 add         r3, r3, #0x40
  0c490	e5832000	 str         r2, [r3]
  0c494		 |$LN1@EnableOver|

; 5203 : }

  0c494	e28dd034	 add         sp, sp, #0x34
  0c498	e89d6000	 ldmia       sp, {sp, lr}
  0c49c	e12fff1e	 bx          lr
  0c4a0		 |$LN14@EnableOver|
  0c4a0		 |$LN15@EnableOver|
  0c4a0	00000000	 DCD         |?g_rgPipelineMapping@@3PAUOMAPPipelineConfig@@A|
  0c4a4		 |$M41205|

			 ENDP  ; |?EnableOverlayOptimization@OMAPDisplayController@@QAAXH@Z|, OMAPDisplayController::EnableOverlayOptimization

; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\inc\dssai.h

  00000			 AREA	 |.pdata|, PDATA
|$T41215| DCD	|$LN5@PixelSize|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?PixelSize@OMAPSurface@@QAAKXZ| PROC	; OMAPSurface::PixelSize

; 762  :     DWORD                   PixelSize() { return m_dwPixelSize; }

  00000		 |$LN5@PixelSize|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M41212|
  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e2833008	 add         r3, r3, #8
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3000	 str         r3, [sp]
  00020	e59d0000	 ldr         r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M41213|

			 ENDP  ; |?PixelSize@OMAPSurface@@QAAKXZ|, OMAPSurface::PixelSize


  00238			 AREA	 |.pdata|, PDATA
|$T41223| DCD	|$LN5@SetDssFclk|
	DCD	0x40000c04
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\dssai\dssai.cpp

  0c4a4			 AREA	 |.text|, CODE, ARM

  0c4a4		 |?SetDssFclk@OMAPDisplayController@@IAAHW4OMAP_DSS_FCLK@@W4OMAP_DSS_FCLKVALUE@@@Z| PROC ; OMAPDisplayController::SetDssFclk

; 5211 : {

  0c4a4		 |$LN5@SetDssFclk|
  0c4a4	e1a0c00d	 mov         r12, sp
  0c4a8	e92d0007	 stmdb       sp!, {r0 - r2}
  0c4ac	e92d5000	 stmdb       sp!, {r12, lr}
  0c4b0	e24dd008	 sub         sp, sp, #8
  0c4b4		 |$M41220|

; 5212 :     BOOL bRet = TRUE;

  0c4b4	e3a03001	 mov         r3, #1
  0c4b8	e58d3000	 str         r3, [sp]

; 5213 :     
; 5214 :     UNREFERENCED_PARAMETER(eDssFclkValue);
; 5215 :     UNREFERENCED_PARAMETER(eDssFclkSource);
; 5216 : 
; 5217 :     return bRet;

  0c4bc	e59d3000	 ldr         r3, [sp]
  0c4c0	e58d3004	 str         r3, [sp, #4]

; 5218 : }

  0c4c4	e59d0004	 ldr         r0, [sp, #4]
  0c4c8	e28dd008	 add         sp, sp, #8
  0c4cc	e89d6000	 ldmia       sp, {sp, lr}
  0c4d0	e12fff1e	 bx          lr
  0c4d4		 |$M41221|

			 ENDP  ; |?SetDssFclk@OMAPDisplayController@@IAAHW4OMAP_DSS_FCLK@@W4OMAP_DSS_FCLKVALUE@@@Z|, OMAPDisplayController::SetDssFclk

	EXPORT	|??_C@_1CI@BKOMHDDL@?$AAD?$AAS?$AAI?$AA?5?$AAP?$AAL?$AAL?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAr?$AAe?$AAs?$AAe?$AAt?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DO@OPIOMKJF@?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAt?$AAu?$AAr?$AAn?$AA?5?$AAo?$AAn?$AA?5?$AAD?$AAS?$AAI?$AA?5?$AAP?$AAL?$AAL?$AA?5?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GA@HEOPJPGD@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAI?$AAn?$AAi?$AAt?$AAD?$AAS?$AAI?$AAP?$AAL?$AAL?$AA?3?$AA?3?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAr?$AAe?$AAs@| [ DATA ] ; `string'

  00240			 AREA	 |.pdata|, PDATA
|$T41235| DCD	|$LN26@InitDsiPll|
	DCD	0x4000bb04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@BKOMHDDL@?$AAD?$AAS?$AAI?$AA?5?$AAP?$AAL?$AAL?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAr?$AAe?$AAs?$AAe?$AAt?$AA?$AN?$AA?6?$AA?$AA@| DCB "D"
	DCB	0x0, "S", 0x0, "I", 0x0, " ", 0x0, "P", 0x0, "L", 0x0, "L"
	DCB	0x0, " ", 0x0, "n", 0x0, "o", 0x0, "t", 0x0, " ", 0x0, "r"
	DCB	0x0, "e", 0x0, "s", 0x0, "e", 0x0, "t", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@OPIOMKJF@?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAt?$AAu?$AAr?$AAn?$AA?5?$AAo?$AAn?$AA?5?$AAD?$AAS?$AAI?$AA?5?$AAP?$AAL?$AAL?$AA?5?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "U"
	DCB	0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, " "
	DCB	0x0, "t", 0x0, "o", 0x0, " ", 0x0, "t", 0x0, "u", 0x0, "r"
	DCB	0x0, "n", 0x0, " ", 0x0, "o", 0x0, "n", 0x0, " ", 0x0, "D"
	DCB	0x0, "S", 0x0, "I", 0x0, " ", 0x0, "P", 0x0, "L", 0x0, "L"
	DCB	0x0, " ", 0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GA@HEOPJPGD@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAI?$AAn?$AAi?$AAt?$AAD?$AAS?$AAI?$AAP?$AAL?$AAL?$AA?3?$AA?3?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAr?$AAe?$AAs@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "D", 0x0, "S"
	DCB	0x0, "I", 0x0, "P", 0x0, "L", 0x0, "L", 0x0, ":", 0x0, ":"
	DCB	0x0, "F", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "r", 0x0, "e"
	DCB	0x0, "s", 0x0, "e", 0x0, "t", 0x0, " ", 0x0, "D", 0x0, "S"
	DCB	0x0, "I", 0x0, " ", 0x0, "M", 0x0, "o", 0x0, "d", 0x0, "u"
	DCB	0x0, "l", 0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  0c4d4			 AREA	 |.text|, CODE, ARM

  0c4d4		 |?InitDsiPll@OMAPDisplayController@@IAAHXZ| PROC ; OMAPDisplayController::InitDsiPll

; 5223 : {

  0c4d4		 |$LN26@InitDsiPll|
  0c4d4	e1a0c00d	 mov         r12, sp
  0c4d8	e92d0001	 stmdb       sp!, {r0}
  0c4dc	e92d5000	 stmdb       sp!, {r12, lr}
  0c4e0	e24dd01c	 sub         sp, sp, #0x1C
  0c4e4		 |$M41232|

; 5224 :     BOOL  bRet = TRUE;

  0c4e4	e3a03001	 mov         r3, #1
  0c4e8	e58d3008	 str         r3, [sp, #8]

; 5225 :     ULONG count = 100;                  //count for timed status check

  0c4ec	e3a03064	 mov         r3, #0x64
  0c4f0	e58d3004	 str         r3, [sp, #4]

; 5226 :     ULONG value;
; 5227 :     
; 5228 :     // PCLKFREE should be set for DSI
; 5229 :     value  = INREG32( &m_pDispRegs->DISPC_CONTROL);

  0c4f4	e59d3024	 ldr         r3, [sp, #0x24]
  0c4f8	e2833008	 add         r3, r3, #8
  0c4fc	e5933000	 ldr         r3, [r3]
  0c500	e2833040	 add         r3, r3, #0x40
  0c504	e5933000	 ldr         r3, [r3]
  0c508	e58d3000	 str         r3, [sp]

; 5230 :     value |= DISPC_CONTROL_PCKFREEENABLE_ENABLED;

  0c50c	e59d3000	 ldr         r3, [sp]
  0c510	e3833302	 orr         r3, r3, #2, 6
  0c514	e58d3000	 str         r3, [sp]

; 5231 :     OUTREG32( &m_pDispRegs->DISPC_CONTROL, value);

  0c518	e59d3024	 ldr         r3, [sp, #0x24]
  0c51c	e2833008	 add         r3, r3, #8
  0c520	e5933000	 ldr         r3, [r3]
  0c524	e2832040	 add         r2, r3, #0x40
  0c528	e59d3000	 ldr         r3, [sp]
  0c52c	e5823000	 str         r3, [r2]

; 5232 : 
; 5233 :     // Reset the DSI protocol engine
; 5234 :     SETREG32( &m_pDSIRegs->DSI_SYSCONFIG, SYSCONFIG_SOFTRESET);

  0c530	e59d3024	 ldr         r3, [sp, #0x24]
  0c534	e2833010	 add         r3, r3, #0x10
  0c538	e5933000	 ldr         r3, [r3]
  0c53c	e2833010	 add         r3, r3, #0x10
  0c540	e5933000	 ldr         r3, [r3]
  0c544	e3832002	 orr         r2, r3, #2
  0c548	e59d3024	 ldr         r3, [sp, #0x24]
  0c54c	e2833010	 add         r3, r3, #0x10
  0c550	e5933000	 ldr         r3, [r3]
  0c554	e2833010	 add         r3, r3, #0x10
  0c558	e5832000	 str         r2, [r3]
  0c55c		 |$LN15@InitDsiPll|

; 5235 : 
; 5236 :     // Wait for reset to complete
; 5237 :     while (((INREG32(&m_pDSIRegs->DSI_SYSSTATUS)) != SYSSTATUS_RESETDONE) && (--count))

  0c55c	e59d3024	 ldr         r3, [sp, #0x24]
  0c560	e2833010	 add         r3, r3, #0x10
  0c564	e5933000	 ldr         r3, [r3]
  0c568	e2833014	 add         r3, r3, #0x14
  0c56c	e5933000	 ldr         r3, [r3]
  0c570	e3530001	 cmp         r3, #1
  0c574	0a000008	 beq         |$LN14@InitDsiPll|
  0c578	e59d3004	 ldr         r3, [sp, #4]
  0c57c	e2433001	 sub         r3, r3, #1
  0c580	e58d3004	 str         r3, [sp, #4]
  0c584	e59d3004	 ldr         r3, [sp, #4]
  0c588	e3530000	 cmp         r3, #0
  0c58c	0a000002	 beq         |$LN14@InitDsiPll|

; 5238 :     {
; 5239 :         StallExecution(1000);

  0c590	e3a00ffa	 mov         r0, #0xFA, 30
  0c594	eb000000	 bl          StallExecution

; 5240 :     }

  0c598	eaffffef	 b           |$LN15@InitDsiPll|
  0c59c		 |$LN14@InitDsiPll|

; 5241 : 
; 5242 :     if (count == 0)

  0c59c	e59d3004	 ldr         r3, [sp, #4]
  0c5a0	e3530000	 cmp         r3, #0
  0c5a4	1a00000a	 bne         |$LN13@InitDsiPll|

; 5243 :     {
; 5244 :         RETAILMSG(1,(L"ERROR: InitDSIPLL::"
; 5245 :                      L"Failed to reset DSI Module\r\n"));

  0c5a8	e59f020c	 ldr         r0, [pc, #0x20C]
  0c5ac	eb000000	 bl          NKDbgPrintfW
  0c5b0	e3a03001	 mov         r3, #1
  0c5b4	e58d3010	 str         r3, [sp, #0x10]
  0c5b8	ea000001	 b           |$LN19@InitDsiPll|
  0c5bc	e3a03000	 mov         r3, #0
  0c5c0	e58d3010	 str         r3, [sp, #0x10]
  0c5c4		 |$LN19@InitDsiPll|

; 5246 :         bRet = FALSE;

  0c5c4	e3a03000	 mov         r3, #0
  0c5c8	e58d3008	 str         r3, [sp, #8]
  0c5cc	ea000072	 b           |$LN12@InitDsiPll|

; 5247 :         goto Clean;

  0c5d0	ea000071	 b           |$Clean$39969|
  0c5d4		 |$LN13@InitDsiPll|

; 5248 :     }
; 5249 : 
; 5250 :     //  Configure for idle during inactivity
; 5251 :     OUTREG32( &m_pDSIRegs->DSI_SYSCONFIG,  
; 5252 :                 SYSCONFIG_AUTOIDLE  |
; 5253 :                 SYSCONFIG_ENAWAKEUP |
; 5254 :                 SYSCONFIG_SMARTIDLE
; 5255 :                 );

  0c5d4	e59d3024	 ldr         r3, [sp, #0x24]
  0c5d8	e2833010	 add         r3, r3, #0x10
  0c5dc	e5933000	 ldr         r3, [r3]
  0c5e0	e2832010	 add         r2, r3, #0x10
  0c5e4	e3a03015	 mov         r3, #0x15
  0c5e8	e5823000	 str         r3, [r2]

; 5256 : 
; 5257 :     // Clear the DSI IRQ status
; 5258 :     value = INREG32( &m_pDSIRegs->DSI_IRQSTATUS);

  0c5ec	e59d3024	 ldr         r3, [sp, #0x24]
  0c5f0	e2833010	 add         r3, r3, #0x10
  0c5f4	e5933000	 ldr         r3, [r3]
  0c5f8	e2833018	 add         r3, r3, #0x18
  0c5fc	e5933000	 ldr         r3, [r3]
  0c600	e58d3000	 str         r3, [sp]

; 5259 :     OUTREG32( &m_pDSIRegs->DSI_IRQSTATUS, value);

  0c604	e59d3024	 ldr         r3, [sp, #0x24]
  0c608	e2833010	 add         r3, r3, #0x10
  0c60c	e5933000	 ldr         r3, [r3]
  0c610	e2832018	 add         r2, r3, #0x18
  0c614	e59d3000	 ldr         r3, [sp]
  0c618	e5823000	 str         r3, [r2]

; 5260 : 
; 5261 :     // Enable the Pwr to the DSI sub modules
; 5262 :     value  = INREG32( &m_pDSIRegs->DSI_CLK_CTRL);

  0c61c	e59d3024	 ldr         r3, [sp, #0x24]
  0c620	e2833010	 add         r3, r3, #0x10
  0c624	e5933000	 ldr         r3, [r3]
  0c628	e2833054	 add         r3, r3, #0x54
  0c62c	e5933000	 ldr         r3, [r3]
  0c630	e58d3000	 str         r3, [sp]

; 5263 :     // clear the current pwr cmd value
; 5264 :     value  = (value & ~(DSI_CLK_CTRL_PLL_PWR_CMD_MASK));

  0c634	e59d2000	 ldr         r2, [sp]
  0c638	e3e03103	 mvn         r3, #3, 2
  0c63c	e0023003	 and         r3, r2, r3
  0c640	e58d3000	 str         r3, [sp]

; 5265 :     // set the pwr cmd for enabling pwr to PLL and HS DIVIDER
; 5266 :     value |= (DSI_CLK_CTRL_PLL_PWR_CMD_ON_PLLANDHS)|(1 << 13);

  0c644	e59d2000	 ldr         r2, [sp]
  0c648	e3a03102	 mov         r3, #2, 2
  0c64c	e3833a02	 orr         r3, r3, #2, 20
  0c650	e1823003	 orr         r3, r2, r3
  0c654	e58d3000	 str         r3, [sp]

; 5267 :     OUTREG32( &m_pDSIRegs->DSI_CLK_CTRL, value);

  0c658	e59d3024	 ldr         r3, [sp, #0x24]
  0c65c	e2833010	 add         r3, r3, #0x10
  0c660	e5933000	 ldr         r3, [r3]
  0c664	e2832054	 add         r2, r3, #0x54
  0c668	e59d3000	 ldr         r3, [sp]
  0c66c	e5823000	 str         r3, [r2]

; 5268 : 
; 5269 :     // Check whether the power status is changed
; 5270 :     count = 1000;

  0c670	e3a03ffa	 mov         r3, #0xFA, 30
  0c674	e58d3004	 str         r3, [sp, #4]
  0c678		 |$LN11@InitDsiPll|

; 5271 :     do
; 5272 :     {
; 5273 :         value = INREG32( &m_pDSIRegs->DSI_CLK_CTRL);

  0c678	e59d3024	 ldr         r3, [sp, #0x24]
  0c67c	e2833010	 add         r3, r3, #0x10
  0c680	e5933000	 ldr         r3, [r3]
  0c684	e2833054	 add         r3, r3, #0x54
  0c688	e5933000	 ldr         r3, [r3]
  0c68c	e58d3000	 str         r3, [sp]

; 5274 :         value = (value & DSI_CLK_CTRL_PLL_PWR_STATUS_ON_PLLANDHS);

  0c690	e59d3000	 ldr         r3, [sp]
  0c694	e2033202	 and         r3, r3, #2, 4
  0c698	e58d3000	 str         r3, [sp]

; 5275 :         StallExecution(1000);

  0c69c	e3a00ffa	 mov         r0, #0xFA, 30
  0c6a0	eb000000	 bl          StallExecution

; 5276 :     }
; 5277 :     while ((value == 0) && (--count));

  0c6a4	e59d3000	 ldr         r3, [sp]
  0c6a8	e3530000	 cmp         r3, #0
  0c6ac	1a000005	 bne         |$LN8@InitDsiPll|
  0c6b0	e59d3004	 ldr         r3, [sp, #4]
  0c6b4	e2433001	 sub         r3, r3, #1
  0c6b8	e58d3004	 str         r3, [sp, #4]
  0c6bc	e59d3004	 ldr         r3, [sp, #4]
  0c6c0	e3530000	 cmp         r3, #0
  0c6c4	1affffeb	 bne         |$LN11@InitDsiPll|
  0c6c8		 |$LN8@InitDsiPll|

; 5278 : 
; 5279 :     if (count == 0)

  0c6c8	e59d3004	 ldr         r3, [sp, #4]
  0c6cc	e3530000	 cmp         r3, #0
  0c6d0	1a00000f	 bne         |$LN7@InitDsiPll|

; 5280 :     {
; 5281 :         bRet = FALSE;

  0c6d4	e3a03000	 mov         r3, #0
  0c6d8	e58d3008	 str         r3, [sp, #8]

; 5282 :         RETAILMSG(1,(L"Unable to turn on DSI PLL %x\r\n",
; 5283 :             INREG32(&m_pDSIRegs->DSI_CLK_CTRL)\
; 5284 :             ));

  0c6dc	e59d3024	 ldr         r3, [sp, #0x24]
  0c6e0	e2833010	 add         r3, r3, #0x10
  0c6e4	e5933000	 ldr         r3, [r3]
  0c6e8	e2833054	 add         r3, r3, #0x54
  0c6ec	e5931000	 ldr         r1, [r3]
  0c6f0	e59f00c0	 ldr         r0, [pc, #0xC0]
  0c6f4	eb000000	 bl          NKDbgPrintfW
  0c6f8	e3a03001	 mov         r3, #1
  0c6fc	e58d3014	 str         r3, [sp, #0x14]
  0c700	ea000001	 b           |$LN21@InitDsiPll|
  0c704	e3a03000	 mov         r3, #0
  0c708	e58d3014	 str         r3, [sp, #0x14]
  0c70c		 |$LN21@InitDsiPll|

; 5285 :         goto Clean;

  0c70c	ea000022	 b           |$LN6@InitDsiPll|
  0c710	ea000021	 b           |$Clean$39969|
  0c714		 |$LN7@InitDsiPll|

; 5286 :     }
; 5287 : 
; 5288 :     // Check for the PLL reset complete status
; 5289 :     count = 100;

  0c714	e3a03064	 mov         r3, #0x64
  0c718	e58d3004	 str         r3, [sp, #4]
  0c71c		 |$LN5@InitDsiPll|

; 5290 :     do
; 5291 :     {
; 5292 :         value = INREG32( &m_pDSIPLLRegs->DSI_PLL_STATUS);

  0c71c	e59d3024	 ldr         r3, [sp, #0x24]
  0c720	e2833014	 add         r3, r3, #0x14
  0c724	e5933000	 ldr         r3, [r3]
  0c728	e2833004	 add         r3, r3, #4
  0c72c	e5933000	 ldr         r3, [r3]
  0c730	e58d3000	 str         r3, [sp]

; 5293 :         value = (value & DSI_PLLCTRL_RESET_DONE_STATUS);

  0c734	e59d3000	 ldr         r3, [sp]
  0c738	e2033001	 and         r3, r3, #1
  0c73c	e58d3000	 str         r3, [sp]

; 5294 :         StallExecution(1000);

  0c740	e3a00ffa	 mov         r0, #0xFA, 30
  0c744	eb000000	 bl          StallExecution

; 5295 :     }
; 5296 :     while ((value == 0) && (--count));

  0c748	e59d3000	 ldr         r3, [sp]
  0c74c	e3530000	 cmp         r3, #0
  0c750	1a000005	 bne         |$LN2@InitDsiPll|
  0c754	e59d3004	 ldr         r3, [sp, #4]
  0c758	e2433001	 sub         r3, r3, #1
  0c75c	e58d3004	 str         r3, [sp, #4]
  0c760	e59d3004	 ldr         r3, [sp, #4]
  0c764	e3530000	 cmp         r3, #0
  0c768	1affffeb	 bne         |$LN5@InitDsiPll|
  0c76c		 |$LN2@InitDsiPll|

; 5297 : 
; 5298 :     if (count == 0)

  0c76c	e59d3004	 ldr         r3, [sp, #4]
  0c770	e3530000	 cmp         r3, #0
  0c774	1a000008	 bne         |$LN1@InitDsiPll|

; 5299 :     {
; 5300 :         bRet = FALSE;

  0c778	e3a03000	 mov         r3, #0
  0c77c	e58d3008	 str         r3, [sp, #8]

; 5301 :         RETAILMSG(1,(L"DSI PLL not reset\r\n"));

  0c780	e59f002c	 ldr         r0, [pc, #0x2C]
  0c784	eb000000	 bl          NKDbgPrintfW
  0c788	e3a03001	 mov         r3, #1
  0c78c	e58d3018	 str         r3, [sp, #0x18]
  0c790	ea000001	 b           |$LN23@InitDsiPll|
  0c794	e3a03000	 mov         r3, #0
  0c798	e58d3018	 str         r3, [sp, #0x18]
  0c79c		 |$LN23@InitDsiPll|
  0c79c		 |$LN1@InitDsiPll|
  0c79c		 |$LN6@InitDsiPll|
  0c79c		 |$LN12@InitDsiPll|
  0c79c		 |$Clean$39969|

; 5302 :     }
; 5303 : 
; 5304 : Clean:
; 5305 :     return bRet;

  0c79c	e59d3008	 ldr         r3, [sp, #8]
  0c7a0	e58d300c	 str         r3, [sp, #0xC]

; 5306 : }

  0c7a4	e59d000c	 ldr         r0, [sp, #0xC]
  0c7a8	e28dd01c	 add         sp, sp, #0x1C
  0c7ac	e89d6000	 ldmia       sp, {sp, lr}
  0c7b0	e12fff1e	 bx          lr
  0c7b4		 |$LN27@InitDsiPll|
  0c7b4		 |$LN28@InitDsiPll|
  0c7b4	00000000	 DCD         |??_C@_1CI@BKOMHDDL@?$AAD?$AAS?$AAI?$AA?5?$AAP?$AAL?$AAL?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAr?$AAe?$AAs?$AAe?$AAt?$AA?$AN?$AA?6?$AA?$AA@|
  0c7b8		 |$LN29@InitDsiPll|
  0c7b8	00000000	 DCD         |??_C@_1DO@OPIOMKJF@?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAt?$AAu?$AAr?$AAn?$AA?5?$AAo?$AAn?$AA?5?$AAD?$AAS?$AAI?$AA?5?$AAP?$AAL?$AAL?$AA?5?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  0c7bc		 |$LN30@InitDsiPll|
  0c7bc	00000000	 DCD         |??_C@_1GA@HEOPJPGD@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAI?$AAn?$AAi?$AAt?$AAD?$AAS?$AAI?$AAP?$AAL?$AAL?$AA?3?$AA?3?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAr?$AAe?$AAs@|
  0c7c0		 |$M41233|

			 ENDP  ; |?InitDsiPll@OMAPDisplayController@@IAAHXZ|, OMAPDisplayController::InitDsiPll

	EXPORT	|?DeInitDsiPll@OMAPDisplayController@@IAAHXZ| ; OMAPDisplayController::DeInitDsiPll

  00248			 AREA	 |.pdata|, PDATA
|$T41245| DCD	|$LN5@DeInitDsiP|
	DCD	0x40006704
; Function compile flags: /Odtp

  0c7c0			 AREA	 |.text|, CODE, ARM

  0c7c0		 |?DeInitDsiPll@OMAPDisplayController@@IAAHXZ| PROC ; OMAPDisplayController::DeInitDsiPll

; 5311 : {

  0c7c0		 |$LN5@DeInitDsiP|
  0c7c0	e1a0c00d	 mov         r12, sp
  0c7c4	e92d0001	 stmdb       sp!, {r0}
  0c7c8	e92d5000	 stmdb       sp!, {r12, lr}
  0c7cc	e24dd00c	 sub         sp, sp, #0xC
  0c7d0		 |$M41242|

; 5312 :     BOOL bRet = TRUE;

  0c7d0	e3a03001	 mov         r3, #1
  0c7d4	e58d3000	 str         r3, [sp]

; 5313 :     DWORD dwRegValue = 0;

  0c7d8	e3a03000	 mov         r3, #0
  0c7dc	e58d3004	 str         r3, [sp, #4]

; 5314 :     
; 5315 :     // clear the DSI IRQ status
; 5316 :     dwRegValue = INREG32( &m_pDSIRegs->DSI_IRQSTATUS);

  0c7e0	e59d3014	 ldr         r3, [sp, #0x14]
  0c7e4	e2833010	 add         r3, r3, #0x10
  0c7e8	e5933000	 ldr         r3, [r3]
  0c7ec	e2833018	 add         r3, r3, #0x18
  0c7f0	e5933000	 ldr         r3, [r3]
  0c7f4	e58d3004	 str         r3, [sp, #4]

; 5317 :     OUTREG32( &m_pDSIRegs->DSI_IRQSTATUS, dwRegValue);

  0c7f8	e59d3014	 ldr         r3, [sp, #0x14]
  0c7fc	e2833010	 add         r3, r3, #0x10
  0c800	e5933000	 ldr         r3, [r3]
  0c804	e2832018	 add         r2, r3, #0x18
  0c808	e59d3004	 ldr         r3, [sp, #4]
  0c80c	e5823000	 str         r3, [r2]

; 5318 :     
; 5319 :     // configure the DSI PLL for bypass mode before updating PLL
; 5320 :     SETREG32( &m_pDSIPLLRegs->DSI_PLL_CONFIGURATION2, DSI_PLL_IDLE);

  0c810	e59d3014	 ldr         r3, [sp, #0x14]
  0c814	e2833014	 add         r3, r3, #0x14
  0c818	e5933000	 ldr         r3, [r3]
  0c81c	e2833010	 add         r3, r3, #0x10
  0c820	e5933000	 ldr         r3, [r3]
  0c824	e3832001	 orr         r2, r3, #1
  0c828	e59d3014	 ldr         r3, [sp, #0x14]
  0c82c	e2833014	 add         r3, r3, #0x14
  0c830	e5933000	 ldr         r3, [r3]
  0c834	e2833010	 add         r3, r3, #0x10
  0c838	e5832000	 str         r2, [r3]

; 5321 : 
; 5322 :     // select the manual mode of PLL update
; 5323 :     dwRegValue = INREG32( &m_pDSIPLLRegs->DSI_PLL_CONTROL);

  0c83c	e59d3014	 ldr         r3, [sp, #0x14]
  0c840	e2833014	 add         r3, r3, #0x14
  0c844	e5933000	 ldr         r3, [r3]
  0c848	e5933000	 ldr         r3, [r3]
  0c84c	e58d3004	 str         r3, [sp, #4]

; 5324 :     dwRegValue = dwRegValue & ~(DSI_PLL_AUTOMODE);

  0c850	e59d2004	 ldr         r2, [sp, #4]
  0c854	e3e03001	 mvn         r3, #1
  0c858	e0023003	 and         r3, r2, r3
  0c85c	e58d3004	 str         r3, [sp, #4]

; 5325 :     OUTREG32( &m_pDSIPLLRegs->DSI_PLL_CONTROL, dwRegValue);

  0c860	e59d3014	 ldr         r3, [sp, #0x14]
  0c864	e2833014	 add         r3, r3, #0x14
  0c868	e5932000	 ldr         r2, [r3]
  0c86c	e59d3004	 ldr         r3, [sp, #4]
  0c870	e5823000	 str         r3, [r2]

; 5326 : 
; 5327 :     // disable DSIPHY clock and set HSDIV in bypass mode
; 5328 :     dwRegValue = INREG32( &m_pDSIPLLRegs->DSI_PLL_CONFIGURATION2);

  0c874	e59d3014	 ldr         r3, [sp, #0x14]
  0c878	e2833014	 add         r3, r3, #0x14
  0c87c	e5933000	 ldr         r3, [r3]
  0c880	e2833010	 add         r3, r3, #0x10
  0c884	e5933000	 ldr         r3, [r3]
  0c888	e58d3004	 str         r3, [sp, #4]

; 5329 :     dwRegValue = dwRegValue & ~(DSIPHY_CLKINEN);

  0c88c	e59d2004	 ldr         r2, [sp, #4]
  0c890	e3e03901	 mvn         r3, #1, 18
  0c894	e0023003	 and         r3, r2, r3
  0c898	e58d3004	 str         r3, [sp, #4]

; 5330 :     dwRegValue = dwRegValue | DSI_HSDIVBYPASS;

  0c89c	e59d3004	 ldr         r3, [sp, #4]
  0c8a0	e3833601	 orr         r3, r3, #1, 12
  0c8a4	e58d3004	 str         r3, [sp, #4]

; 5331 :     OUTREG32( &m_pDSIPLLRegs->DSI_PLL_CONFIGURATION2, dwRegValue);

  0c8a8	e59d3014	 ldr         r3, [sp, #0x14]
  0c8ac	e2833014	 add         r3, r3, #0x14
  0c8b0	e5933000	 ldr         r3, [r3]
  0c8b4	e2832010	 add         r2, r3, #0x10
  0c8b8	e59d3004	 ldr         r3, [sp, #4]
  0c8bc	e5823000	 str         r3, [r2]

; 5332 :     
; 5333 :     // PCLKFREE should be set for DSI
; 5334 :     dwRegValue = INREG32( &m_pDispRegs->DISPC_CONTROL);

  0c8c0	e59d3014	 ldr         r3, [sp, #0x14]
  0c8c4	e2833008	 add         r3, r3, #8
  0c8c8	e5933000	 ldr         r3, [r3]
  0c8cc	e2833040	 add         r3, r3, #0x40
  0c8d0	e5933000	 ldr         r3, [r3]
  0c8d4	e58d3004	 str         r3, [sp, #4]

; 5335 :     dwRegValue = dwRegValue | DISPC_CONTROL_PCKFREEENABLE_ENABLED;

  0c8d8	e59d3004	 ldr         r3, [sp, #4]
  0c8dc	e3833302	 orr         r3, r3, #2, 6
  0c8e0	e58d3004	 str         r3, [sp, #4]

; 5336 :     OUTREG32( &m_pDispRegs->DISPC_CONTROL, dwRegValue);

  0c8e4	e59d3014	 ldr         r3, [sp, #0x14]
  0c8e8	e2833008	 add         r3, r3, #8
  0c8ec	e5933000	 ldr         r3, [r3]
  0c8f0	e2832040	 add         r2, r3, #0x40
  0c8f4	e59d3004	 ldr         r3, [sp, #4]
  0c8f8	e5823000	 str         r3, [r2]

; 5337 :     
; 5338 :     // issue Power off cmd to DSI
; 5339 :     dwRegValue = INREG32( &m_pDSIRegs->DSI_CLK_CTRL);

  0c8fc	e59d3014	 ldr         r3, [sp, #0x14]
  0c900	e2833010	 add         r3, r3, #0x10
  0c904	e5933000	 ldr         r3, [r3]
  0c908	e2833054	 add         r3, r3, #0x54
  0c90c	e5933000	 ldr         r3, [r3]
  0c910	e58d3004	 str         r3, [sp, #4]

; 5340 :     dwRegValue = (dwRegValue & ~(DSI_CLK_CTRL_PLL_PWR_CMD_MASK));

  0c914	e59d2004	 ldr         r2, [sp, #4]
  0c918	e3e03103	 mvn         r3, #3, 2
  0c91c	e0023003	 and         r3, r2, r3
  0c920	e58d3004	 str         r3, [sp, #4]

; 5341 :     dwRegValue = dwRegValue | DSI_CLK_CTRL_PLL_PWR_CMD_OFF;

  0c924	e59d3004	 ldr         r3, [sp, #4]
  0c928	e58d3004	 str         r3, [sp, #4]

; 5342 :     OUTREG32( &m_pDSIRegs->DSI_CLK_CTRL, dwRegValue);

  0c92c	e59d3014	 ldr         r3, [sp, #0x14]
  0c930	e2833010	 add         r3, r3, #0x10
  0c934	e5933000	 ldr         r3, [r3]
  0c938	e2832054	 add         r2, r3, #0x54
  0c93c	e59d3004	 ldr         r3, [sp, #4]
  0c940	e5823000	 str         r3, [r2]

; 5343 : 
; 5344 :     return bRet;

  0c944	e59d3000	 ldr         r3, [sp]
  0c948	e58d3008	 str         r3, [sp, #8]

; 5345 : }

  0c94c	e59d0008	 ldr         r0, [sp, #8]
  0c950	e28dd00c	 add         sp, sp, #0xC
  0c954	e89d6000	 ldmia       sp, {sp, lr}
  0c958	e12fff1e	 bx          lr
  0c95c		 |$M41243|

			 ENDP  ; |?DeInitDsiPll@OMAPDisplayController@@IAAHXZ|, OMAPDisplayController::DeInitDsiPll

	EXPORT	|??_C@_1DC@EGPANNCF@?$AAD?$AAS?$AAI?$AA?5?$AAP?$AAL?$AAL?$AA?5?$AAL?$AAo?$AAc?$AAk?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAd?$AA?5?$AAo?$AAu?$AAt?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CK@PPIENFCI@?$AAD?$AAS?$AAI?$AA?5?$AAP?$AAL?$AAL?$AA?5?$AAG?$AAo?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAe?$AAt?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DA@HCLFGPIL@?$AAN?$AA?3?$AA?$CF?$AAd?$AA?5?$AAM?$AA?3?$AA?$CF?$AAd?$AA?5?$AAM?$AA3?$AA?3?$AA?$CF?$AAd?$AA?5?$AAM?$AA4?$AA?3?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HE@BACIAFEL@?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAe?$AAD?$AAs?$AAi?$AAP?$AAl?$AAl?$AA?3?$AAC?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAe@| [ DATA ] ; `string'
	IMPORT	|GetSystemClockFrequency|

  00250			 AREA	 |.pdata|, PDATA
|$T41260| DCD	|$LN27@ConfigureD|
	DCD	0x40012204

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DC@EGPANNCF@?$AAD?$AAS?$AAI?$AA?5?$AAP?$AAL?$AAL?$AA?5?$AAL?$AAo?$AAc?$AAk?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAd?$AA?5?$AAo?$AAu?$AAt?$AA?$AN?$AA?6?$AA?$AA@| DCB "D"
	DCB	0x0, "S", 0x0, "I", 0x0, " ", 0x0, "P", 0x0, "L", 0x0, "L"
	DCB	0x0, " ", 0x0, "L", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, " "
	DCB	0x0, "t", 0x0, "i", 0x0, "m", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "o", 0x0, "u", 0x0, "t", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CK@PPIENFCI@?$AAD?$AAS?$AAI?$AA?5?$AAP?$AAL?$AAL?$AA?5?$AAG?$AAo?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAe?$AAt?$AA?$AN?$AA?6?$AA?$AA@| DCB "D"
	DCB	0x0, "S", 0x0, "I", 0x0, " ", 0x0, "P", 0x0, "L", 0x0, "L"
	DCB	0x0, " ", 0x0, "G", 0x0, "o", 0x0, " ", 0x0, "n", 0x0, "o"
	DCB	0x0, "t", 0x0, " ", 0x0, "s", 0x0, "e", 0x0, "t", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@HCLFGPIL@?$AAN?$AA?3?$AA?$CF?$AAd?$AA?5?$AAM?$AA?3?$AA?$CF?$AAd?$AA?5?$AAM?$AA3?$AA?3?$AA?$CF?$AAd?$AA?5?$AAM?$AA4?$AA?3?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "N"
	DCB	0x0, ":", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, "M", 0x0, ":"
	DCB	0x0, "%", 0x0, "d", 0x0, " ", 0x0, "M", 0x0, "3", 0x0, ":"
	DCB	0x0, "%", 0x0, "d", 0x0, " ", 0x0, "M", 0x0, "4", 0x0, ":"
	DCB	0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HE@BACIAFEL@?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAe?$AAD?$AAs?$AAi?$AAP?$AAl?$AAl?$AA?3?$AAC?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAe@| DCB "C"
	DCB	0x0, "o", 0x0, "n", 0x0, "f", 0x0, "i", 0x0, "g", 0x0, "u"
	DCB	0x0, "r", 0x0, "e", 0x0, "D", 0x0, "s", 0x0, "i", 0x0, "P"
	DCB	0x0, "l", 0x0, "l", 0x0, ":", 0x0, "C", 0x0, "a", 0x0, "n"
	DCB	0x0, "n", 0x0, "o", 0x0, "t", 0x0, " ", 0x0, "c", 0x0, "o"
	DCB	0x0, "n", 0x0, "f", 0x0, "i", 0x0, "g", 0x0, "u", 0x0, "r"
	DCB	0x0, "e", 0x0, " ", 0x0, "D", 0x0, "S", 0x0, "I", 0x0, " "
	DCB	0x0, "f", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "g", 0x0, "i"
	DCB	0x0, "v", 0x0, "e", 0x0, "n", 0x0, " ", 0x0, "f", 0x0, "r"
	DCB	0x0, "e", 0x0, "q", 0x0, ":", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  0c95c			 AREA	 |.text|, CODE, ARM

  0c95c		 |?ConfigureDsiPll@OMAPDisplayController@@QAAHK@Z| PROC ; OMAPDisplayController::ConfigureDsiPll

; 5350 : {

  0c95c		 |$LN27@ConfigureD|
  0c95c	e1a0c00d	 mov         r12, sp
  0c960	e92d0003	 stmdb       sp!, {r0, r1}
  0c964	e92d5000	 stmdb       sp!, {r12, lr}
  0c968	e24dd054	 sub         sp, sp, #0x54
  0c96c		 |$M41257|

; 5351 : 
; 5352 :     BOOL  bRet = TRUE;

  0c96c	e3a03001	 mov         r3, #1
  0c970	e58d3020	 str         r3, [sp, #0x20]

; 5353 :     ULONG count = 100;                  //count for timed status check

  0c974	e3a03064	 mov         r3, #0x64
  0c978	e58d3008	 str         r3, [sp, #8]

; 5354 :     ULONG m,n,m3,m4;                    //variables for PLL freq configuration
; 5355 :     ULONG fint    = DSI_PLL_FREQINT;    //internal ref frequency for PLL

  0c97c	e3a0397a	 mov         r3, #0x7A, 18
  0c980	e3833d12	 orr         r3, r3, #0x12, 26
  0c984	e58d3028	 str         r3, [sp, #0x28]

; 5356 :     ULONG sysClk  = GetSystemClockFrequency();

  0c988	eb000000	 bl          GetSystemClockFrequency
  0c98c	e58d0040	 str         r0, [sp, #0x40]
  0c990	e59d3040	 ldr         r3, [sp, #0x40]
  0c994	e58d301c	 str         r3, [sp, #0x1C]

; 5357 :     ULONG value;
; 5358 :     ULONG dsiPhyClock;
; 5359 :     ULONG highFreqDiv = 0;

  0c998	e3a03000	 mov         r3, #0
  0c99c	e58d302c	 str         r3, [sp, #0x2C]

; 5360 :     ULONG pllConfig1,pllConfig2; // variables for PLLConfig1 & 2
; 5361 : 
; 5362 : 
; 5363 :     //  Check clock bounds
; 5364 :     if (clockFreq < fint ) // || clockFreq > DSS_FCLK_MAX)

  0c9a0	e59d2060	 ldr         r2, [sp, #0x60]
  0c9a4	e59d3028	 ldr         r3, [sp, #0x28]
  0c9a8	e1520003	 cmp         r2, r3
  0c9ac	2a00000b	 bcs         |$LN14@ConfigureD|

; 5365 :     {
; 5366 :         bRet = FALSE;

  0c9b0	e3a03000	 mov         r3, #0
  0c9b4	e58d3020	 str         r3, [sp, #0x20]

; 5367 :         RETAILMSG(1,(L"ConfigureDsiPll:"
; 5368 :                      L"Cannot configure DSI for given freq: %d\r\n",
; 5369 :                      clockFreq));

  0c9b8	e59d1060	 ldr         r1, [sp, #0x60]
  0c9bc	e59f041c	 ldr         r0, [pc, #0x41C]
  0c9c0	eb000000	 bl          NKDbgPrintfW
  0c9c4	e3a03001	 mov         r3, #1
  0c9c8	e58d3044	 str         r3, [sp, #0x44]
  0c9cc	ea000001	 b           |$LN18@ConfigureD|
  0c9d0	e3a03000	 mov         r3, #0
  0c9d4	e58d3044	 str         r3, [sp, #0x44]
  0c9d8		 |$LN18@ConfigureD|

; 5370 :         goto Clean;

  0c9d8	ea0000f7	 b           |$LN13@ConfigureD|
  0c9dc	ea0000f6	 b           |$Clean$40037|
  0c9e0		 |$LN14@ConfigureD|

; 5371 :     }
; 5372 : 
; 5373 :     // Calculate the dsiPhyClock
; 5374 :     // Number of Lanes for DSI = 2
; 5375 :     // DSI PHY clock = 2 * data rate * NumberOfLanes
; 5376 :     dsiPhyClock = clockFreq * 2 * 2;

  0c9e0	e59d1060	 ldr         r1, [sp, #0x60]
  0c9e4	e3a03002	 mov         r3, #2
  0c9e8	e0020391	 mul         r2, r1, r3
  0c9ec	e3a03002	 mov         r3, #2
  0c9f0	e0030392	 mul         r3, r2, r3
  0c9f4	e58d3010	 str         r3, [sp, #0x10]

; 5377 : 
; 5378 :     // The steps for m and n calculation are to ensure the DSI PLL generates
; 5379 :     // DSI1_PLL_FCLK.
; 5380 : 
; 5381 :     // Use the formula for deriving m, m3 and m4 values
; 5382 :     //                             2xRegM       SYSCLK
; 5383 :     //             dsiPhyClock =  -------- x -------------
; 5384 :     //                            REGN + 1   HIGHFREQDIV+1
; 5385 : 
; 5386 :     // Set the highfreq divider if the input clock is > 32Mhz
; 5387 :     if (sysClk > DSI_HIGHFREQ_MAX)

  0c9f8	e59d201c	 ldr         r2, [sp, #0x1C]
  0c9fc	e3a0377a	 mov         r3, #0x7A, 14
  0ca00	e3833b12	 orr         r3, r3, #0x12, 22
  0ca04	e1520003	 cmp         r2, r3
  0ca08	9a000001	 bls         |$LN12@ConfigureD|

; 5388 :         highFreqDiv = 1;

  0ca0c	e3a03001	 mov         r3, #1
  0ca10	e58d302c	 str         r3, [sp, #0x2C]
  0ca14		 |$LN12@ConfigureD|

; 5389 : 
; 5390 :     n  = (sysClk/fint/(highFreqDiv+1)) - 1;

  0ca14	e59d101c	 ldr         r1, [sp, #0x1C]
  0ca18	e59d0028	 ldr         r0, [sp, #0x28]
  0ca1c	eb000000	 bl          __rt_udiv
  0ca20	e1a01000	 mov         r1, r0
  0ca24	e59d302c	 ldr         r3, [sp, #0x2C]
  0ca28	e2830001	 add         r0, r3, #1
  0ca2c	eb000000	 bl          __rt_udiv
  0ca30	e2403001	 sub         r3, r0, #1
  0ca34	e58d300c	 str         r3, [sp, #0xC]

; 5391 : 
; 5392 :     m = (dsiPhyClock*(highFreqDiv+1))/(2*fint);

  0ca38	e59d302c	 ldr         r3, [sp, #0x2C]
  0ca3c	e2832001	 add         r2, r3, #1
  0ca40	e59d3010	 ldr         r3, [sp, #0x10]
  0ca44	e0010293	 mul         r1, r3, r2
  0ca48	e59d2028	 ldr         r2, [sp, #0x28]
  0ca4c	e3a03002	 mov         r3, #2
  0ca50	e0000392	 mul         r0, r2, r3
  0ca54	eb000000	 bl          __rt_udiv
  0ca58	e58d0034	 str         r0, [sp, #0x34]

; 5393 : 
; 5394 :     // calculate m3 value DSI1_PLL_FCLK (m3)
; 5395 :     m3 = (dsiPhyClock/clockFreq) - 1;

  0ca5c	e59d1010	 ldr         r1, [sp, #0x10]
  0ca60	e59d0060	 ldr         r0, [sp, #0x60]
  0ca64	eb000000	 bl          __rt_udiv
  0ca68	e2403001	 sub         r3, r0, #1
  0ca6c	e58d3014	 str         r3, [sp, #0x14]

; 5396 : 
; 5397 :     // m4 value is actually used by DSI module and we can set it
; 5398 :     // as the same value of m3.
; 5399 :     m4 = m3;

  0ca70	e59d3014	 ldr         r3, [sp, #0x14]
  0ca74	e58d3024	 str         r3, [sp, #0x24]

; 5400 : 
; 5401 :     DEBUGMSG(1,(L"N:%d M:%d M3:%d M4:%d\r\n",
; 5402 :                    n,m,m3,m4
; 5403 :                    ));

  0ca78	e59d3024	 ldr         r3, [sp, #0x24]
  0ca7c	e58d3000	 str         r3, [sp]
  0ca80	e59d3014	 ldr         r3, [sp, #0x14]
  0ca84	e59d2034	 ldr         r2, [sp, #0x34]
  0ca88	e59d100c	 ldr         r1, [sp, #0xC]
  0ca8c	e59f0348	 ldr         r0, [pc, #0x348]
  0ca90	eb000000	 bl          NKDbgPrintfW
  0ca94	e3a03001	 mov         r3, #1
  0ca98	e58d3048	 str         r3, [sp, #0x48]
  0ca9c	ea000001	 b           |$LN20@ConfigureD|
  0caa0	e3a03000	 mov         r3, #0
  0caa4	e58d3048	 str         r3, [sp, #0x48]
  0caa8		 |$LN20@ConfigureD|

; 5404 : 
; 5405 :     // Enable the Pwr to the DSI sub modules
; 5406 :     value  = INREG32( &m_pDSIRegs->DSI_CLK_CTRL);

  0caa8	e59d305c	 ldr         r3, [sp, #0x5C]
  0caac	e2833010	 add         r3, r3, #0x10
  0cab0	e5933000	 ldr         r3, [r3]
  0cab4	e2833054	 add         r3, r3, #0x54
  0cab8	e5933000	 ldr         r3, [r3]
  0cabc	e58d3004	 str         r3, [sp, #4]

; 5407 :     if ((value & DSI_CLK_CTRL_PLL_PWR_STATUS_ON_PLLANDHS) != 0)

  0cac0	e59d3004	 ldr         r3, [sp, #4]
  0cac4	e3130202	 tst         r3, #2, 4
  0cac8	0a000001	 beq         |$LN11@ConfigureD|

; 5408 :     {
; 5409 :         InitDsiPll();

  0cacc	e59d005c	 ldr         r0, [sp, #0x5C]
  0cad0	eb000000	 bl          |?InitDsiPll@OMAPDisplayController@@IAAHXZ|
  0cad4		 |$LN11@ConfigureD|

; 5410 :     }
; 5411 :     
; 5412 :     // Configure the DSI PLL for bypass mode before updating PLL
; 5413 :     SETREG32( &m_pDSIPLLRegs->DSI_PLL_CONFIGURATION2, DSI_PLL_IDLE);

  0cad4	e59d305c	 ldr         r3, [sp, #0x5C]
  0cad8	e2833014	 add         r3, r3, #0x14
  0cadc	e5933000	 ldr         r3, [r3]
  0cae0	e2833010	 add         r3, r3, #0x10
  0cae4	e5933000	 ldr         r3, [r3]
  0cae8	e3832001	 orr         r2, r3, #1
  0caec	e59d305c	 ldr         r3, [sp, #0x5C]
  0caf0	e2833014	 add         r3, r3, #0x14
  0caf4	e5933000	 ldr         r3, [r3]
  0caf8	e2833010	 add         r3, r3, #0x10
  0cafc	e5832000	 str         r2, [r3]

; 5414 : 
; 5415 :     // Select the manual mode of PLL update
; 5416 :     value = INREG32( &m_pDSIPLLRegs->DSI_PLL_CONTROL);

  0cb00	e59d305c	 ldr         r3, [sp, #0x5C]
  0cb04	e2833014	 add         r3, r3, #0x14
  0cb08	e5933000	 ldr         r3, [r3]
  0cb0c	e5933000	 ldr         r3, [r3]
  0cb10	e58d3004	 str         r3, [sp, #4]

; 5417 :     value = value & ~(DSI_PLL_AUTOMODE);

  0cb14	e59d2004	 ldr         r2, [sp, #4]
  0cb18	e3e03001	 mvn         r3, #1
  0cb1c	e0023003	 and         r3, r2, r3
  0cb20	e58d3004	 str         r3, [sp, #4]

; 5418 :     OUTREG32( &m_pDSIPLLRegs->DSI_PLL_CONTROL, value);

  0cb24	e59d305c	 ldr         r3, [sp, #0x5C]
  0cb28	e2833014	 add         r3, r3, #0x14
  0cb2c	e5932000	 ldr         r2, [r3]
  0cb30	e59d3004	 ldr         r3, [sp, #4]
  0cb34	e5823000	 str         r3, [r2]

; 5419 : 
; 5420 :     // DSIPHY clock is disabled and HSDIV in bypass mode
; 5421 :     pllConfig2  = INREG32( &m_pDSIPLLRegs->DSI_PLL_CONFIGURATION2);

  0cb38	e59d305c	 ldr         r3, [sp, #0x5C]
  0cb3c	e2833014	 add         r3, r3, #0x14
  0cb40	e5933000	 ldr         r3, [r3]
  0cb44	e2833010	 add         r3, r3, #0x10
  0cb48	e5933000	 ldr         r3, [r3]
  0cb4c	e58d3018	 str         r3, [sp, #0x18]

; 5422 :     pllConfig2  = pllConfig2 & ~(DSIPHY_CLKINEN);

  0cb50	e59d2018	 ldr         r2, [sp, #0x18]
  0cb54	e3e03901	 mvn         r3, #1, 18
  0cb58	e0023003	 and         r3, r2, r3
  0cb5c	e58d3018	 str         r3, [sp, #0x18]

; 5423 :     pllConfig2  = pllConfig2 | DSI_HSDIVBYPASS;

  0cb60	e59d3018	 ldr         r3, [sp, #0x18]
  0cb64	e3833601	 orr         r3, r3, #1, 12
  0cb68	e58d3018	 str         r3, [sp, #0x18]

; 5424 :     OUTREG32( &m_pDSIPLLRegs->DSI_PLL_CONFIGURATION2, pllConfig2);

  0cb6c	e59d305c	 ldr         r3, [sp, #0x5C]
  0cb70	e2833014	 add         r3, r3, #0x14
  0cb74	e5933000	 ldr         r3, [r3]
  0cb78	e2832010	 add         r2, r3, #0x10
  0cb7c	e59d3018	 ldr         r3, [sp, #0x18]
  0cb80	e5823000	 str         r3, [r2]

; 5425 : 
; 5426 :     // Input clock to PLL is SYSCLK
; 5427 :     pllConfig2  = pllConfig2 & ~(DSI_PLL_CLKSEL_PCLKFREE);

  0cb84	e59d2018	 ldr         r2, [sp, #0x18]
  0cb88	e3e03b02	 mvn         r3, #2, 22
  0cb8c	e0023003	 and         r3, r2, r3
  0cb90	e58d3018	 str         r3, [sp, #0x18]

; 5428 : 
; 5429 :     // Program high freq divider
; 5430 :     if (highFreqDiv != 0)

  0cb94	e59d302c	 ldr         r3, [sp, #0x2C]
  0cb98	e3530000	 cmp         r3, #0
  0cb9c	0a000003	 beq         |$LN10@ConfigureD|

; 5431 :     {
; 5432 :         pllConfig2 |= DSI_PLL_HIGHFREQ_PIXELCLKBY2;

  0cba0	e59d3018	 ldr         r3, [sp, #0x18]
  0cba4	e3833a01	 orr         r3, r3, #1, 20
  0cba8	e58d3018	 str         r3, [sp, #0x18]

; 5433 :     }
; 5434 :     else

  0cbac	ea000003	 b           |$LN9@ConfigureD|
  0cbb0		 |$LN10@ConfigureD|

; 5435 :     {
; 5436 :         pllConfig2 &= ~(DSI_PLL_HIGHFREQ_PIXELCLKBY2);

  0cbb0	e59d2018	 ldr         r2, [sp, #0x18]
  0cbb4	e3e03a01	 mvn         r3, #1, 20
  0cbb8	e0023003	 and         r3, r2, r3
  0cbbc	e58d3018	 str         r3, [sp, #0x18]
  0cbc0		 |$LN9@ConfigureD|

; 5437 :     }
; 5438 : 
; 5439 :     OUTREG32( &m_pDSIPLLRegs->DSI_PLL_CONFIGURATION2, pllConfig2);

  0cbc0	e59d305c	 ldr         r3, [sp, #0x5C]
  0cbc4	e2833014	 add         r3, r3, #0x14
  0cbc8	e5933000	 ldr         r3, [r3]
  0cbcc	e2832010	 add         r2, r3, #0x10
  0cbd0	e59d3018	 ldr         r3, [sp, #0x18]
  0cbd4	e5823000	 str         r3, [r2]

; 5440 : 
; 5441 :     // Configure the divisor values
; 5442 :     pllConfig1 =  DSI_PLL_REGN(n)
; 5443 :                  |DSI_PLL_REGM(m)
; 5444 :                  |DSS_CLOCK_DIV(m3)
; 5445 :                  |DSIPROTO_CLOCK_DIV(m4)
; 5446 :                  |DSI_PLL_STOPMODE  
; 5447 :                  ;

  0cbd8	e59d300c	 ldr         r3, [sp, #0xC]
  0cbdc	e1a02083	 mov         r2, r3, lsl #1
  0cbe0	e59d3034	 ldr         r3, [sp, #0x34]
  0cbe4	e1a03403	 mov         r3, r3, lsl #8
  0cbe8	e1822003	 orr         r2, r2, r3
  0cbec	e59d3014	 ldr         r3, [sp, #0x14]
  0cbf0	e1a03983	 mov         r3, r3, lsl #19
  0cbf4	e1822003	 orr         r2, r2, r3
  0cbf8	e59d3024	 ldr         r3, [sp, #0x24]
  0cbfc	e1a03b83	 mov         r3, r3, lsl #23
  0cc00	e1823003	 orr         r3, r2, r3
  0cc04	e3833001	 orr         r3, r3, #1
  0cc08	e58d3030	 str         r3, [sp, #0x30]

; 5448 : 
; 5449 :     OUTREG32( &m_pDSIPLLRegs->DSI_PLL_CONFIGURATION1, pllConfig1);

  0cc0c	e59d305c	 ldr         r3, [sp, #0x5C]
  0cc10	e2833014	 add         r3, r3, #0x14
  0cc14	e5933000	 ldr         r3, [r3]
  0cc18	e283200c	 add         r2, r3, #0xC
  0cc1c	e59d3030	 ldr         r3, [sp, #0x30]
  0cc20	e5823000	 str         r3, [r2]

; 5450 : 
; 5451 :     // Enable the DSS clock divider from HSDIV
; 5452 :     pllConfig2 |=  DSS_CLOCK_EN
; 5453 :                   |DSI_PROTO_CLOCK_EN
; 5454 :                   |DSI_PLL_FREQSEL(DSI_PLL_FREQSELVAL)
; 5455 :                   |DSI_PLL_REFEN
; 5456 :                   ;

  0cc24	e59d2018	 ldr         r2, [sp, #0x18]
  0cc28	e3a03a52	 mov         r3, #0x52, 20
  0cc2c	e383300e	 orr         r3, r3, #0xE
  0cc30	e1823003	 orr         r3, r2, r3
  0cc34	e58d3018	 str         r3, [sp, #0x18]

; 5457 :     OUTREG32( &m_pDSIPLLRegs->DSI_PLL_CONFIGURATION2, pllConfig2);

  0cc38	e59d305c	 ldr         r3, [sp, #0x5C]
  0cc3c	e2833014	 add         r3, r3, #0x14
  0cc40	e5933000	 ldr         r3, [r3]
  0cc44	e2832010	 add         r2, r3, #0x10
  0cc48	e59d3018	 ldr         r3, [sp, #0x18]
  0cc4c	e5823000	 str         r3, [r2]

; 5458 : 
; 5459 :     // Set HSDIV and CLK from DSI PLL
; 5460 :     pllConfig2 &= ~(DSI_HSDIVBYPASS);

  0cc50	e59d2018	 ldr         r2, [sp, #0x18]
  0cc54	e3e03601	 mvn         r3, #1, 12
  0cc58	e0023003	 and         r3, r2, r3
  0cc5c	e58d3018	 str         r3, [sp, #0x18]

; 5461 :     OUTREG32( &m_pDSIPLLRegs->DSI_PLL_CONFIGURATION2, pllConfig2);

  0cc60	e59d305c	 ldr         r3, [sp, #0x5C]
  0cc64	e2833014	 add         r3, r3, #0x14
  0cc68	e5933000	 ldr         r3, [r3]
  0cc6c	e2832010	 add         r2, r3, #0x10
  0cc70	e59d3018	 ldr         r3, [sp, #0x18]
  0cc74	e5823000	 str         r3, [r2]

; 5462 : 
; 5463 :     // Let the Pll go out of idle
; 5464 :     CLRREG32( &m_pDSIPLLRegs->DSI_PLL_CONFIGURATION2, DSI_PLL_IDLE);

  0cc78	e59d305c	 ldr         r3, [sp, #0x5C]
  0cc7c	e2833014	 add         r3, r3, #0x14
  0cc80	e5933000	 ldr         r3, [r3]
  0cc84	e2833010	 add         r3, r3, #0x10
  0cc88	e5932000	 ldr         r2, [r3]
  0cc8c	e3e03001	 mvn         r3, #1
  0cc90	e0022003	 and         r2, r2, r3
  0cc94	e59d305c	 ldr         r3, [sp, #0x5C]
  0cc98	e2833014	 add         r3, r3, #0x14
  0cc9c	e5933000	 ldr         r3, [r3]
  0cca0	e2833010	 add         r3, r3, #0x10
  0cca4	e5832000	 str         r2, [r3]

; 5465 :     
; 5466 :     // Start the PLL locking by setting PLL GO
; 5467 :     OUTREG32( &m_pDSIPLLRegs->DSI_PLL_GO, DSI_PLL_GO_CMD);

  0cca8	e59d305c	 ldr         r3, [sp, #0x5C]
  0ccac	e2833014	 add         r3, r3, #0x14
  0ccb0	e5933000	 ldr         r3, [r3]
  0ccb4	e2832008	 add         r2, r3, #8
  0ccb8	e3a03001	 mov         r3, #1
  0ccbc	e5823000	 str         r3, [r2]

; 5468 : 
; 5469 :     count = 100;

  0ccc0	e3a03064	 mov         r3, #0x64
  0ccc4	e58d3008	 str         r3, [sp, #8]
  0ccc8		 |$LN8@ConfigureD|

; 5470 :     // Waiting for the lock request to be issued to PLL
; 5471 :     while ((INREG32( &m_pDSIPLLRegs->DSI_PLL_GO) != 0) && (--count))

  0ccc8	e59d305c	 ldr         r3, [sp, #0x5C]
  0cccc	e2833014	 add         r3, r3, #0x14
  0ccd0	e5933000	 ldr         r3, [r3]
  0ccd4	e2833008	 add         r3, r3, #8
  0ccd8	e5933000	 ldr         r3, [r3]
  0ccdc	e3530000	 cmp         r3, #0
  0cce0	0a000008	 beq         |$LN7@ConfigureD|
  0cce4	e59d3008	 ldr         r3, [sp, #8]
  0cce8	e2433001	 sub         r3, r3, #1
  0ccec	e58d3008	 str         r3, [sp, #8]
  0ccf0	e59d3008	 ldr         r3, [sp, #8]
  0ccf4	e3530000	 cmp         r3, #0
  0ccf8	0a000002	 beq         |$LN7@ConfigureD|

; 5472 :     {
; 5473 :         StallExecution(1000);

  0ccfc	e3a00ffa	 mov         r0, #0xFA, 30
  0cd00	eb000000	 bl          StallExecution

; 5474 :     }

  0cd04	eaffffef	 b           |$LN8@ConfigureD|
  0cd08		 |$LN7@ConfigureD|

; 5475 : 
; 5476 :     if (count == 0)

  0cd08	e59d3008	 ldr         r3, [sp, #8]
  0cd0c	e3530000	 cmp         r3, #0
  0cd10	1a00000a	 bne         |$LN6@ConfigureD|

; 5477 :     {
; 5478 :         /* lock request timed out */
; 5479 :         bRet = FALSE;

  0cd14	e3a03000	 mov         r3, #0
  0cd18	e58d3020	 str         r3, [sp, #0x20]

; 5480 :         RETAILMSG(1,(L"DSI PLL Go not set\r\n"));

  0cd1c	e59f00b4	 ldr         r0, [pc, #0xB4]
  0cd20	eb000000	 bl          NKDbgPrintfW
  0cd24	e3a03001	 mov         r3, #1
  0cd28	e58d304c	 str         r3, [sp, #0x4C]
  0cd2c	ea000001	 b           |$LN22@ConfigureD|
  0cd30	e3a03000	 mov         r3, #0
  0cd34	e58d304c	 str         r3, [sp, #0x4C]
  0cd38		 |$LN22@ConfigureD|

; 5481 :         goto Clean;

  0cd38	ea00001f	 b           |$LN5@ConfigureD|
  0cd3c	ea00001e	 b           |$Clean$40037|
  0cd40		 |$LN6@ConfigureD|

; 5482 :     }
; 5483 : 
; 5484 :     // Wait for the PLL to be locked
; 5485 :     count = 1000;

  0cd40	e3a03ffa	 mov         r3, #0xFA, 30
  0cd44	e58d3008	 str         r3, [sp, #8]
  0cd48		 |$LN4@ConfigureD|

; 5486 :     while (((INREG32( &m_pDSIPLLRegs->DSI_PLL_STATUS) & DSI_PLL_LOCK_STATUS) != 
; 5487 :               DSI_PLL_LOCK_STATUS) && (--count))

  0cd48	e59d305c	 ldr         r3, [sp, #0x5C]
  0cd4c	e2833014	 add         r3, r3, #0x14
  0cd50	e5933000	 ldr         r3, [r3]
  0cd54	e2833004	 add         r3, r3, #4
  0cd58	e5933000	 ldr         r3, [r3]
  0cd5c	e2033002	 and         r3, r3, #2
  0cd60	e3530002	 cmp         r3, #2
  0cd64	0a000008	 beq         |$LN3@ConfigureD|
  0cd68	e59d3008	 ldr         r3, [sp, #8]
  0cd6c	e2433001	 sub         r3, r3, #1
  0cd70	e58d3008	 str         r3, [sp, #8]
  0cd74	e59d3008	 ldr         r3, [sp, #8]
  0cd78	e3530000	 cmp         r3, #0
  0cd7c	0a000002	 beq         |$LN3@ConfigureD|

; 5488 :     {
; 5489 :         StallExecution(1000);

  0cd80	e3a00ffa	 mov         r0, #0xFA, 30
  0cd84	eb000000	 bl          StallExecution

; 5490 :     }

  0cd88	eaffffee	 b           |$LN4@ConfigureD|
  0cd8c		 |$LN3@ConfigureD|

; 5491 : 
; 5492 :     // check the PLL lock status for timeout
; 5493 :     if (count == 0)

  0cd8c	e59d3008	 ldr         r3, [sp, #8]
  0cd90	e3530000	 cmp         r3, #0
  0cd94	1a000008	 bne         |$LN2@ConfigureD|

; 5494 :     {
; 5495 :         bRet = FALSE;

  0cd98	e3a03000	 mov         r3, #0
  0cd9c	e58d3020	 str         r3, [sp, #0x20]

; 5496 :         RETAILMSG(1,(L"DSI PLL Lock timed out\r\n"));

  0cda0	e59f002c	 ldr         r0, [pc, #0x2C]
  0cda4	eb000000	 bl          NKDbgPrintfW
  0cda8	e3a03001	 mov         r3, #1
  0cdac	e58d3050	 str         r3, [sp, #0x50]
  0cdb0	ea000001	 b           |$LN24@ConfigureD|
  0cdb4	e3a03000	 mov         r3, #0
  0cdb8	e58d3050	 str         r3, [sp, #0x50]
  0cdbc		 |$LN24@ConfigureD|
  0cdbc		 |$LN2@ConfigureD|
  0cdbc		 |$LN5@ConfigureD|
  0cdbc		 |$LN13@ConfigureD|
  0cdbc		 |$Clean$40037|

; 5497 :         goto Clean;
; 5498 :     }
; 5499 :     
; 5500 :     
; 5501 :     
; 5502 : Clean:
; 5503 : 
; 5504 :   return bRet;

  0cdbc	e59d3020	 ldr         r3, [sp, #0x20]
  0cdc0	e58d303c	 str         r3, [sp, #0x3C]

; 5505 : }

  0cdc4	e59d003c	 ldr         r0, [sp, #0x3C]
  0cdc8	e28dd054	 add         sp, sp, #0x54
  0cdcc	e89d6000	 ldmia       sp, {sp, lr}
  0cdd0	e12fff1e	 bx          lr
  0cdd4		 |$LN28@ConfigureD|
  0cdd4		 |$LN29@ConfigureD|
  0cdd4	00000000	 DCD         |??_C@_1DC@EGPANNCF@?$AAD?$AAS?$AAI?$AA?5?$AAP?$AAL?$AAL?$AA?5?$AAL?$AAo?$AAc?$AAk?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAd?$AA?5?$AAo?$AAu?$AAt?$AA?$AN?$AA?6?$AA?$AA@|
  0cdd8		 |$LN30@ConfigureD|
  0cdd8	00000000	 DCD         |??_C@_1CK@PPIENFCI@?$AAD?$AAS?$AAI?$AA?5?$AAP?$AAL?$AAL?$AA?5?$AAG?$AAo?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAe?$AAt?$AA?$AN?$AA?6?$AA?$AA@|
  0cddc		 |$LN31@ConfigureD|
  0cddc	00000000	 DCD         |??_C@_1DA@HCLFGPIL@?$AAN?$AA?3?$AA?$CF?$AAd?$AA?5?$AAM?$AA?3?$AA?$CF?$AAd?$AA?5?$AAM?$AA3?$AA?3?$AA?$CF?$AAd?$AA?5?$AAM?$AA4?$AA?3?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  0cde0		 |$LN32@ConfigureD|
  0cde0	00000000	 DCD         |??_C@_1HE@BACIAFEL@?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAe?$AAD?$AAs?$AAi?$AAP?$AAl?$AAl?$AA?3?$AAC?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAe@|
  0cde4		 |$M41258|

			 ENDP  ; |?ConfigureDsiPll@OMAPDisplayController@@QAAHK@Z|, OMAPDisplayController::ConfigureDsiPll

	EXPORT	|?SwitchDssFclk@OMAPDisplayController@@IAAHW4OMAP_DSS_FCLK@@W4OMAP_DSS_FCLKVALUE@@@Z| ; OMAPDisplayController::SwitchDssFclk

  00258			 AREA	 |.pdata|, PDATA
|$T41271| DCD	|$LN10@SwitchDssF|
	DCD	0x40006704
; Function compile flags: /Odtp

  0cde4			 AREA	 |.text|, CODE, ARM

  0cde4		 |?SwitchDssFclk@OMAPDisplayController@@IAAHW4OMAP_DSS_FCLK@@W4OMAP_DSS_FCLKVALUE@@@Z| PROC ; OMAPDisplayController::SwitchDssFclk

; 5514 : {

  0cde4		 |$LN10@SwitchDssF|
  0cde4	e1a0c00d	 mov         r12, sp
  0cde8	e92d0007	 stmdb       sp!, {r0 - r2}
  0cdec	e92d5000	 stmdb       sp!, {r12, lr}
  0cdf0	e24dd020	 sub         sp, sp, #0x20
  0cdf4		 |$M41268|

; 5515 :     DWORD dssStatusBit = 1;

  0cdf4	e3a03001	 mov         r3, #1
  0cdf8	e58d300c	 str         r3, [sp, #0xC]

; 5516 :     DWORD count     = 100;

  0cdfc	e3a03064	 mov         r3, #0x64
  0ce00	e58d3008	 str         r3, [sp, #8]

; 5517 :     DWORD bitMask   = 1;

  0ce04	e3a03001	 mov         r3, #1
  0ce08	e58d3018	 str         r3, [sp, #0x18]

; 5518 :     DWORD sdiStatus = 0;

  0ce0c	e3a03000	 mov         r3, #0
  0ce10	e58d3010	 str         r3, [sp, #0x10]

; 5519 :     DWORD reg,
; 5520 :           lcd = 1,

  0ce14	e3a03001	 mov         r3, #1
  0ce18	e58d3004	 str         r3, [sp, #4]

; 5521 :           pcd = 1;

  0ce1c	e3a03001	 mov         r3, #1
  0ce20	e58d3000	 str         r3, [sp]

; 5522 :           
; 5523 :     if ( eFclkSrc == OMAP_DSS_FCLK_DSS1ALWON )

  0ce24	e59d302c	 ldr         r3, [sp, #0x2C]
  0ce28	e3530000	 cmp         r3, #0
  0ce2c	1a00000e	 bne         |$LN5@SwitchDssF|

; 5524 :     {
; 5525 :         // Change the source clock to DSS
; 5526 :         CLRREG32( &m_pDSSRegs->DSS_CONTROL, 
; 5527 :                     DSS_CONTROL_DISPC_CLK_SWITCH_DSI1_PLL
; 5528 :                     );

  0ce30	e59d3028	 ldr         r3, [sp, #0x28]
  0ce34	e2833004	 add         r3, r3, #4
  0ce38	e5933000	 ldr         r3, [r3]
  0ce3c	e2833040	 add         r3, r3, #0x40
  0ce40	e5932000	 ldr         r2, [r3]
  0ce44	e3e03001	 mvn         r3, #1
  0ce48	e0022003	 and         r2, r2, r3
  0ce4c	e59d3028	 ldr         r3, [sp, #0x28]
  0ce50	e2833004	 add         r3, r3, #4
  0ce54	e5933000	 ldr         r3, [r3]
  0ce58	e2833040	 add         r3, r3, #0x40
  0ce5c	e5832000	 str         r2, [r3]

; 5529 :         dssStatusBit = 1;

  0ce60	e3a03001	 mov         r3, #1
  0ce64	e58d300c	 str         r3, [sp, #0xC]
  0ce68	ea00000f	 b           |$LN4@SwitchDssF|
  0ce6c		 |$LN5@SwitchDssF|

; 5530 :     }
; 5531 :     else if ( eFclkSrc == OMAP_DSS_FCLK_DSS2ALWON )

  0ce6c	e59d302c	 ldr         r3, [sp, #0x2C]
  0ce70	e3530001	 cmp         r3, #1
  0ce74	1a00000c	 bne         |$LN3@SwitchDssF|

; 5532 :     {
; 5533 :         // Change the source clock DSI1_PLL
; 5534 :         SETREG32( &m_pDSSRegs->DSS_CONTROL, 
; 5535 :                     DSS_CONTROL_DISPC_CLK_SWITCH_DSI1_PLL
; 5536 :                     );

  0ce78	e59d3028	 ldr         r3, [sp, #0x28]
  0ce7c	e2833004	 add         r3, r3, #4
  0ce80	e5933000	 ldr         r3, [r3]
  0ce84	e2833040	 add         r3, r3, #0x40
  0ce88	e5933000	 ldr         r3, [r3]
  0ce8c	e3832001	 orr         r2, r3, #1
  0ce90	e59d3028	 ldr         r3, [sp, #0x28]
  0ce94	e2833004	 add         r3, r3, #4
  0ce98	e5933000	 ldr         r3, [r3]
  0ce9c	e2833040	 add         r3, r3, #0x40
  0cea0	e5832000	 str         r2, [r3]

; 5537 :         dssStatusBit = 0;

  0cea4	e3a03000	 mov         r3, #0
  0cea8	e58d300c	 str         r3, [sp, #0xC]
  0ceac		 |$LN3@SwitchDssF|
  0ceac		 |$LN4@SwitchDssF|

; 5538 :     }
; 5539 : 
; 5540 :     pcd = eFclkValue / m_dwPixelClock ;

  0ceac	e59d3028	 ldr         r3, [sp, #0x28]
  0ceb0	e2833e4b	 add         r3, r3, #0x4B, 28
  0ceb4	e59d1030	 ldr         r1, [sp, #0x30]
  0ceb8	e5930000	 ldr         r0, [r3]
  0cebc	eb000000	 bl          __rt_udiv
  0cec0	e58d0000	 str         r0, [sp]

; 5541 :     reg = DISPC_DIVISOR_LCD(lcd) | DISPC_DIVISOR_PCD(pcd);

  0cec4	e59d3004	 ldr         r3, [sp, #4]
  0cec8	e1a02803	 mov         r2, r3, lsl #16
  0cecc	e59d3000	 ldr         r3, [sp]
  0ced0	e1823003	 orr         r3, r2, r3
  0ced4	e58d3014	 str         r3, [sp, #0x14]

; 5542 :     OUTREG32( &m_pDispRegs->DISPC_DIVISOR, reg );    

  0ced8	e59d3028	 ldr         r3, [sp, #0x28]
  0cedc	e2833008	 add         r3, r3, #8
  0cee0	e5933000	 ldr         r3, [r3]
  0cee4	e2832070	 add         r2, r3, #0x70
  0cee8	e59d3014	 ldr         r3, [sp, #0x14]
  0ceec	e5823000	 str         r3, [r2]

; 5543 :     // Update the shadow register contents into main
; 5544 :     FlushRegs( DISPC_CONTROL_GOLCD );

  0cef0	e3a01020	 mov         r1, #0x20
  0cef4	e59d0028	 ldr         r0, [sp, #0x28]
  0cef8	eb000000	 bl          |?FlushRegs@OMAPDisplayController@@IAAHK@Z|

; 5545 : 
; 5546 :     // check for the clock switch by reading SDI_STATUS register
; 5547 :     sdiStatus = INREG32(&m_pDSSRegs->DSS_SDI_STATUS);

  0cefc	e59d3028	 ldr         r3, [sp, #0x28]
  0cf00	e2833004	 add         r3, r3, #4
  0cf04	e5933000	 ldr         r3, [r3]
  0cf08	e283305c	 add         r3, r3, #0x5C
  0cf0c	e5933000	 ldr         r3, [r3]
  0cf10	e58d3010	 str         r3, [sp, #0x10]
  0cf14		 |$LN2@SwitchDssF|

; 5548 :     while (((sdiStatus & bitMask) != dssStatusBit) && (--count))

  0cf14	e59d2010	 ldr         r2, [sp, #0x10]
  0cf18	e59d3018	 ldr         r3, [sp, #0x18]
  0cf1c	e0022003	 and         r2, r2, r3
  0cf20	e59d300c	 ldr         r3, [sp, #0xC]
  0cf24	e1520003	 cmp         r2, r3
  0cf28	0a00000e	 beq         |$LN1@SwitchDssF|
  0cf2c	e59d3008	 ldr         r3, [sp, #8]
  0cf30	e2433001	 sub         r3, r3, #1
  0cf34	e58d3008	 str         r3, [sp, #8]
  0cf38	e59d3008	 ldr         r3, [sp, #8]
  0cf3c	e3530000	 cmp         r3, #0
  0cf40	0a000008	 beq         |$LN1@SwitchDssF|

; 5549 :     {
; 5550 :         StallExecution(1000);

  0cf44	e3a00ffa	 mov         r0, #0xFA, 30
  0cf48	eb000000	 bl          StallExecution

; 5551 :         sdiStatus = INREG32( &m_pDSSRegs->DSS_SDI_STATUS);

  0cf4c	e59d3028	 ldr         r3, [sp, #0x28]
  0cf50	e2833004	 add         r3, r3, #4
  0cf54	e5933000	 ldr         r3, [r3]
  0cf58	e283305c	 add         r3, r3, #0x5C
  0cf5c	e5933000	 ldr         r3, [r3]
  0cf60	e58d3010	 str         r3, [sp, #0x10]

; 5552 :     }

  0cf64	eaffffea	 b           |$LN2@SwitchDssF|
  0cf68		 |$LN1@SwitchDssF|

; 5553 : 
; 5554 :     return TRUE;

  0cf68	e3a03001	 mov         r3, #1
  0cf6c	e58d301c	 str         r3, [sp, #0x1C]

; 5555 : }

  0cf70	e59d001c	 ldr         r0, [sp, #0x1C]
  0cf74	e28dd020	 add         sp, sp, #0x20
  0cf78	e89d6000	 ldmia       sp, {sp, lr}
  0cf7c	e12fff1e	 bx          lr
  0cf80		 |$M41269|

			 ENDP  ; |?SwitchDssFclk@OMAPDisplayController@@IAAHW4OMAP_DSS_FCLK@@W4OMAP_DSS_FCLKVALUE@@@Z|, OMAPDisplayController::SwitchDssFclk

	EXPORT	|LcdStall|

  00260			 AREA	 |.pdata|, PDATA
|$T41276| DCD	|$LN5@LcdStall|
	DCD	0x40000703
; Function compile flags: /Odtp

  0cf80			 AREA	 |.text|, CODE, ARM

  0cf80		 |LcdStall| PROC

; 5559 : {

  0cf80		 |$LN5@LcdStall|
  0cf80	e1a0c00d	 mov         r12, sp
  0cf84	e92d0001	 stmdb       sp!, {r0}
  0cf88	e92d5000	 stmdb       sp!, {r12, lr}
  0cf8c		 |$M41273|

; 5560 :     StallExecution(dwMicroseconds);

  0cf8c	e59d0008	 ldr         r0, [sp, #8]
  0cf90	eb000000	 bl          StallExecution

; 5561 : }

  0cf94	e89d6000	 ldmia       sp, {sp, lr}
  0cf98	e12fff1e	 bx          lr
  0cf9c		 |$M41274|

			 ENDP  ; |LcdStall|

	EXPORT	|LcdSleep|

  00268			 AREA	 |.pdata|, PDATA
|$T41281| DCD	|$LN5@LcdSleep|
	DCD	0x40000703
; Function compile flags: /Odtp

  0cf9c			 AREA	 |.text|, CODE, ARM

  0cf9c		 |LcdSleep| PROC

; 5564 : {

  0cf9c		 |$LN5@LcdSleep|
  0cf9c	e1a0c00d	 mov         r12, sp
  0cfa0	e92d0001	 stmdb       sp!, {r0}
  0cfa4	e92d5000	 stmdb       sp!, {r12, lr}
  0cfa8		 |$M41278|

; 5565 :     Sleep(dwMilliseconds);

  0cfa8	e59d0008	 ldr         r0, [sp, #8]
  0cfac	eb000000	 bl          Sleep

; 5566 : }

  0cfb0	e89d6000	 ldmia       sp, {sp, lr}
  0cfb4	e12fff1e	 bx          lr
  0cfb8		 |$M41279|

			 ENDP  ; |LcdSleep|

	END
