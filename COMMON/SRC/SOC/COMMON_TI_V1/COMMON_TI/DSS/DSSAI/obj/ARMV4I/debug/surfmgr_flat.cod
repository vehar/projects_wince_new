; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\DSS\DSSAI\surfmgr_flat.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|??_7OMAPFlatSurface@@6B@| [ DATA ]	; OMAPFlatSurface::`vftable'
	EXPORT	|??0OMAPSurface@@QAA@XZ|		; OMAPSurface::OMAPSurface
	EXPORT	|??0OMAPFlatSurface@@QAA@XZ|		; OMAPFlatSurface::OMAPFlatSurface
	EXPORT	|?VirtualAddr@OMAPFlatSurface@@UAAPAXXZ| ; OMAPFlatSurface::VirtualAddr
	EXPORT	|?Width@OMAPFlatSurface@@UAAKW4OMAP_DSS_ROTATION@@@Z| ; OMAPFlatSurface::Width
	EXPORT	|?Height@OMAPFlatSurface@@UAAKW4OMAP_DSS_ROTATION@@@Z| ; OMAPFlatSurface::Height
	EXPORT	|?Stride@OMAPFlatSurface@@UAAKW4OMAP_DSS_ROTATION@@@Z| ; OMAPFlatSurface::Stride
	EXPORT	|?PhysicalAddr@OMAPFlatSurface@@UAAKW4OMAP_DSS_ROTATION@@HW4OMAP_ASSOC_SURF_USAGE@@@Z| ; OMAPFlatSurface::PhysicalAddr
	EXPORT	|?PixelIncr@OMAPFlatSurface@@UAAKW4OMAP_DSS_ROTATION@@H@Z| ; OMAPFlatSurface::PixelIncr
	EXPORT	|?RowIncr@OMAPFlatSurface@@UAAKW4OMAP_DSS_ROTATION@@H@Z| ; OMAPFlatSurface::RowIncr
	EXPORT	|?SetOrientation@OMAPFlatSurface@@UAAHW4OMAP_SURF_ORIENTATION@@@Z| ; OMAPFlatSurface::SetOrientation
	IMPORT	|??_EOMAPFlatSurface@@UAAPAXI@Z|, WEAK |??_GOMAPFlatSurface@@UAAPAXI@Z| ; OMAPFlatSurface::`vector deleting destructor', OMAPFlatSurface::`scalar deleting destructor'
	IMPORT	|?SetClipping@OMAPSurface@@UAAHPAUtagRECT@@@Z| ; OMAPSurface::SetClipping
	IMPORT	|?UpdateClipping@OMAPSurface@@UAAHPAUtagRECT@@@Z| ; OMAPSurface::UpdateClipping
	IMPORT	|?GetClipping@OMAPSurface@@UAA?AUtagRECT@@XZ| ; OMAPSurface::GetClipping
	IMPORT	|?AdjustClippingRect@OMAPSurface@@UAAHPAUtagRECT@@EE@Z| ; OMAPSurface::AdjustClippingRect
	IMPORT	|?SetHorizontalScaling@OMAPSurface@@UAAHK@Z| ; OMAPSurface::SetHorizontalScaling
	IMPORT	|?SetVerticalScaling@OMAPSurface@@UAAHK@Z| ; OMAPSurface::SetVerticalScaling

  00000			 AREA	 |.pdata|, PDATA
|$T37214| DCD	|$LN5@OMAPFlatSu|
	DCD	0x40002d04
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\dssai\surfmgr_flat.cpp

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_7OMAPFlatSurface@@6B@| DCD |??_EOMAPFlatSurface@@UAAPAXI@Z| ; OMAPFlatSurface::`vftable'
	DCD	|?VirtualAddr@OMAPFlatSurface@@UAAPAXXZ|
	DCD	|?Width@OMAPFlatSurface@@UAAKW4OMAP_DSS_ROTATION@@@Z|
	DCD	|?Height@OMAPFlatSurface@@UAAKW4OMAP_DSS_ROTATION@@@Z|
	DCD	|?Stride@OMAPFlatSurface@@UAAKW4OMAP_DSS_ROTATION@@@Z|
	DCD	|?PhysicalAddr@OMAPFlatSurface@@UAAKW4OMAP_DSS_ROTATION@@HW4OMAP_ASSOC_SURF_USAGE@@@Z|
	DCD	|?PixelIncr@OMAPFlatSurface@@UAAKW4OMAP_DSS_ROTATION@@H@Z|
	DCD	|?RowIncr@OMAPFlatSurface@@UAAKW4OMAP_DSS_ROTATION@@H@Z|
	DCD	|?SetClipping@OMAPSurface@@UAAHPAUtagRECT@@@Z|
	DCD	|?UpdateClipping@OMAPSurface@@UAAHPAUtagRECT@@@Z|
	DCD	|?GetClipping@OMAPSurface@@UAA?AUtagRECT@@XZ|
	DCD	|?AdjustClippingRect@OMAPSurface@@UAAHPAUtagRECT@@EE@Z|
	DCD	|?SetHorizontalScaling@OMAPSurface@@UAAHK@Z|
	DCD	|?SetVerticalScaling@OMAPSurface@@UAAHK@Z|
	DCD	|?SetOrientation@OMAPFlatSurface@@UAAHW4OMAP_SURF_ORIENTATION@@@Z|
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0OMAPFlatSurface@@QAA@XZ| PROC	; OMAPFlatSurface::OMAPFlatSurface

; 41   : {

  00000		 |$LN5@OMAPFlatSu|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd008	 sub         sp, sp, #8
  00010		 |$M37211|
  00010	e59d0010	 ldr         r0, [sp, #0x10]
  00014	eb000000	 bl          |??0OMAPSurface@@QAA@XZ|
  00018	e58d0004	 str         r0, [sp, #4]
  0001c	e59f208c	 ldr         r2, [pc, #0x8C]
  00020	e59d3010	 ldr         r3, [sp, #0x10]
  00024	e5832000	 str         r2, [r3]

; 42   :     m_hHeap = NULL;    

  00028	e59d3010	 ldr         r3, [sp, #0x10]
  0002c	e28320a4	 add         r2, r3, #0xA4
  00030	e3a03000	 mov         r3, #0
  00034	e5823000	 str         r3, [r2]

; 43   :     m_dwHorizScale = 1;

  00038	e59d3010	 ldr         r3, [sp, #0x10]
  0003c	e2832028	 add         r2, r3, #0x28
  00040	e3a03001	 mov         r3, #1
  00044	e5823000	 str         r3, [r2]

; 44   :     m_dwVertScale = 1;

  00048	e59d3010	 ldr         r3, [sp, #0x10]
  0004c	e283202c	 add         r2, r3, #0x2C
  00050	e3a03001	 mov         r3, #1
  00054	e5823000	 str         r3, [r2]

; 45   :     m_dwWidthFactor = 1;

  00058	e59d3010	 ldr         r3, [sp, #0x10]
  0005c	e28320b4	 add         r2, r3, #0xB4
  00060	e3a03001	 mov         r3, #1
  00064	e5823000	 str         r3, [r2]

; 46   :     m_bUseResizer = FALSE;

  00068	e59d3010	 ldr         r3, [sp, #0x10]
  0006c	e2832030	 add         r2, r3, #0x30
  00070	e3a03000	 mov         r3, #0
  00074	e5823000	 str         r3, [r2]

; 47   :     m_pAssocSurface = NULL;

  00078	e59d3010	 ldr         r3, [sp, #0x10]
  0007c	e28320a0	 add         r2, r3, #0xA0
  00080	e3a03000	 mov         r3, #0
  00084	e5823000	 str         r3, [r2]

; 48   :     m_eSurfaceType = OMAP_SURFACE_NORMAL;

  00088	e59d3010	 ldr         r3, [sp, #0x10]
  0008c	e283209c	 add         r2, r3, #0x9C
  00090	e3a03000	 mov         r3, #0
  00094	e5823000	 str         r3, [r2]

; 49   : }

  00098	e59d3010	 ldr         r3, [sp, #0x10]
  0009c	e58d3000	 str         r3, [sp]
  000a0	e59d0000	 ldr         r0, [sp]
  000a4	e28dd008	 add         sp, sp, #8
  000a8	e89d6000	 ldmia       sp, {sp, lr}
  000ac	e12fff1e	 bx          lr
  000b0		 |$LN6@OMAPFlatSu|
  000b0		 |$LN7@OMAPFlatSu|
  000b0	00000000	 DCD         |??_7OMAPFlatSurface@@6B@|
  000b4		 |$M37212|

			 ENDP  ; |??0OMAPFlatSurface@@QAA@XZ|, OMAPFlatSurface::OMAPFlatSurface

	EXPORT	|??_7OMAPSurface@@6B@| [ DATA ]		; OMAPSurface::`vftable'
	IMPORT	|??_EOMAPSurface@@UAAPAXI@Z|, WEAK |??_GOMAPSurface@@UAAPAXI@Z| ; OMAPSurface::`vector deleting destructor', OMAPSurface::`scalar deleting destructor'
	IMPORT	|_purecall|
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\inc\dssai.h

  00000			 AREA	 |.pdata|, PDATA
|$T37222| DCD	|$LN5@OMAPSurfac|
	DCD	0x40000e04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_7OMAPSurface@@6B@| DCD |??_EOMAPSurface@@UAAPAXI@Z|	; OMAPSurface::`vftable'
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|?SetClipping@OMAPSurface@@UAAHPAUtagRECT@@@Z|
	DCD	|?UpdateClipping@OMAPSurface@@UAAHPAUtagRECT@@@Z|
	DCD	|?GetClipping@OMAPSurface@@UAA?AUtagRECT@@XZ|
	DCD	|?AdjustClippingRect@OMAPSurface@@UAAHPAUtagRECT@@EE@Z|
	DCD	|?SetHorizontalScaling@OMAPSurface@@UAAHK@Z|
	DCD	|?SetVerticalScaling@OMAPSurface@@UAAHK@Z|
	DCD	|_purecall|
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0OMAPSurface@@QAA@XZ| PROC		; OMAPSurface::OMAPSurface

; 738  :     OMAPSurface() {};

  00000		 |$LN5@OMAPSurfac|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M37219|
  00010	e59f201c	 ldr         r2, [pc, #0x1C]
  00014	e59d300c	 ldr         r3, [sp, #0xC]
  00018	e5832000	 str         r2, [r3]
  0001c	e59d300c	 ldr         r3, [sp, #0xC]
  00020	e58d3000	 str         r3, [sp]
  00024	e59d0000	 ldr         r0, [sp]
  00028	e28dd004	 add         sp, sp, #4
  0002c	e89d6000	 ldmia       sp, {sp, lr}
  00030	e12fff1e	 bx          lr
  00034		 |$LN6@OMAPSurfac|
  00034		 |$LN7@OMAPSurfac|
  00034	00000000	 DCD         |??_7OMAPSurface@@6B@|
  00038		 |$M37220|

			 ENDP  ; |??0OMAPSurface@@QAA@XZ|, OMAPSurface::OMAPSurface

	EXPORT	|??1OMAPSurface@@UAA@XZ|		; OMAPSurface::~OMAPSurface
	IMPORT	|??3@YAXPAX@Z|				; operator delete

  00000			 AREA	 |.pdata|, PDATA
|$T37232| DCD	|$LN6@scalar|
	DCD	0x40001104
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??_GOMAPSurface@@UAAPAXI@Z| PROC	; OMAPSurface::`scalar deleting destructor'
  00000		 |$LN6@scalar|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M37229|
  00010	e59d000c	 ldr         r0, [sp, #0xC]
  00014	eb000000	 bl          |??1OMAPSurface@@UAA@XZ|
  00018	e59d3010	 ldr         r3, [sp, #0x10]
  0001c	e3130001	 tst         r3, #1
  00020	0a000001	 beq         |$LN1@scalar|
  00024	e59d000c	 ldr         r0, [sp, #0xC]
  00028	eb000000	 bl          |??3@YAXPAX@Z|
  0002c		 |$LN1@scalar|
  0002c	e59d300c	 ldr         r3, [sp, #0xC]
  00030	e58d3000	 str         r3, [sp]
  00034	e59d0000	 ldr         r0, [sp]
  00038	e28dd004	 add         sp, sp, #4
  0003c	e89d6000	 ldmia       sp, {sp, lr}
  00040	e12fff1e	 bx          lr
  00044		 |$M37230|

			 ENDP  ; |??_GOMAPSurface@@UAAPAXI@Z|, OMAPSurface::`scalar deleting destructor'


  00000			 AREA	 |.pdata|, PDATA
|$T37239| DCD	|$LN5@OMAPSurfac@2|
	DCD	0x40000903
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??1OMAPSurface@@UAA@XZ| PROC		; OMAPSurface::~OMAPSurface

; 745  :     ~OMAPSurface() {};

  00000		 |$LN5@OMAPSurfac@2|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M37236|
  0000c	e59f200c	 ldr         r2, [pc, #0xC]
  00010	e59d3008	 ldr         r3, [sp, #8]
  00014	e5832000	 str         r2, [r3]
  00018	e89d6000	 ldmia       sp, {sp, lr}
  0001c	e12fff1e	 bx          lr
  00020		 |$LN6@OMAPSurfac@2|
  00020		 |$LN7@OMAPSurfac@2|
  00020	00000000	 DCD         |??_7OMAPSurface@@6B@|
  00024		 |$M37237|

			 ENDP  ; |??1OMAPSurface@@UAA@XZ|, OMAPSurface::~OMAPSurface

	EXPORT	|??1OMAPFlatSurface@@UAA@XZ|		; OMAPFlatSurface::~OMAPFlatSurface

  00000			 AREA	 |.pdata|, PDATA
|$T37249| DCD	|$LN6@scalar@2|
	DCD	0x40001104
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??_GOMAPFlatSurface@@UAAPAXI@Z| PROC	; OMAPFlatSurface::`scalar deleting destructor'
  00000		 |$LN6@scalar@2|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M37246|
  00010	e59d000c	 ldr         r0, [sp, #0xC]
  00014	eb000000	 bl          |??1OMAPFlatSurface@@UAA@XZ|
  00018	e59d3010	 ldr         r3, [sp, #0x10]
  0001c	e3130001	 tst         r3, #1
  00020	0a000001	 beq         |$LN1@scalar@2|
  00024	e59d000c	 ldr         r0, [sp, #0xC]
  00028	eb000000	 bl          |??3@YAXPAX@Z|
  0002c		 |$LN1@scalar@2|
  0002c	e59d300c	 ldr         r3, [sp, #0xC]
  00030	e58d3000	 str         r3, [sp]
  00034	e59d0000	 ldr         r0, [sp]
  00038	e28dd004	 add         sp, sp, #4
  0003c	e89d6000	 ldmia       sp, {sp, lr}
  00040	e12fff1e	 bx          lr
  00044		 |$M37247|

			 ENDP  ; |??_GOMAPFlatSurface@@UAAPAXI@Z|, OMAPFlatSurface::`scalar deleting destructor'

	IMPORT	|?Free@Heap@@QAAXXZ|			; Heap::Free

  00008			 AREA	 |.pdata|, PDATA
|$T37256| DCD	|$LN6@OMAPFlatSu@2|
	DCD	0x40001604
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\dssai\surfmgr_flat.cpp

  000b4			 AREA	 |.text|, CODE, ARM

  000b4		 |??1OMAPFlatSurface@@UAA@XZ| PROC	; OMAPFlatSurface::~OMAPFlatSurface

; 53   : {

  000b4		 |$LN6@OMAPFlatSu@2|
  000b4	e1a0c00d	 mov         r12, sp
  000b8	e92d0001	 stmdb       sp!, {r0}
  000bc	e92d5000	 stmdb       sp!, {r12, lr}
  000c0	e24dd004	 sub         sp, sp, #4
  000c4		 |$M37253|
  000c4	e59f203c	 ldr         r2, [pc, #0x3C]
  000c8	e59d300c	 ldr         r3, [sp, #0xC]
  000cc	e5832000	 str         r2, [r3]

; 54   :     Heap    *pHeap = (Heap*) m_hHeap;

  000d0	e59d300c	 ldr         r3, [sp, #0xC]
  000d4	e28330a4	 add         r3, r3, #0xA4
  000d8	e5933000	 ldr         r3, [r3]
  000dc	e58d3000	 str         r3, [sp]

; 55   :     
; 56   :     //  Free the underlying surface memory
; 57   :     if( pHeap )

  000e0	e59d3000	 ldr         r3, [sp]
  000e4	e3530000	 cmp         r3, #0
  000e8	0a000001	 beq         |$LN1@OMAPFlatSu@2|

; 58   :         pHeap->Free();

  000ec	e59d0000	 ldr         r0, [sp]
  000f0	eb000000	 bl          |?Free@Heap@@QAAXXZ|
  000f4		 |$LN1@OMAPFlatSu@2|

; 59   : }

  000f4	e59d000c	 ldr         r0, [sp, #0xC]
  000f8	eb000000	 bl          |??1OMAPSurface@@UAA@XZ|
  000fc	e28dd004	 add         sp, sp, #4
  00100	e89d6000	 ldmia       sp, {sp, lr}
  00104	e12fff1e	 bx          lr
  00108		 |$LN7@OMAPFlatSu@2|
  00108		 |$LN8@OMAPFlatSu@2|
  00108	00000000	 DCD         |??_7OMAPFlatSurface@@6B@|
  0010c		 |$M37254|

			 ENDP  ; |??1OMAPFlatSurface@@UAA@XZ|, OMAPFlatSurface::~OMAPFlatSurface

	EXPORT	|?Address@Heap@@QAAKXZ|			; Heap::Address
	EXPORT	|?NodeSize@Heap@@QAAKXZ|		; Heap::NodeSize
	EXPORT	|??_C@_1EO@LAEPFMGF@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAh?$AAe?$AAa?$AAp?$AA?5?$AAm@| [ DATA ] ; `string'
	EXPORT	|?Allocate@OMAPFlatSurface@@QAAHW4OMAP_DSS_PIXELFORMAT@@KKPAXK@Z| ; OMAPFlatSurface::Allocate
	IMPORT	|memset|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|?Allocate@Heap@@QAAPAV1@K@Z|		; Heap::Allocate
	IMPORT	|?PixelFormatToPixelSize@OMAPDisplayController@@SAKW4OMAP_DSS_PIXELFORMAT@@@Z| ; OMAPDisplayController::PixelFormatToPixelSize
	IMPORT	|__rt_udiv|

  00010			 AREA	 |.pdata|, PDATA
|$T37269| DCD	|$LN14@Allocate|
	DCD	0x4000b304

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EO@LAEPFMGF@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAh?$AAe?$AAa?$AAp?$AA?5?$AAm@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "U", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e"
	DCB	0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "a", 0x0, "l"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, " ", 0x0, "h", 0x0, "e", 0x0, "a", 0x0, "p", 0x0, " "
	DCB	0x0, "m", 0x0, "e", 0x0, "m", 0x0, "o", 0x0, "r", 0x0, "y"
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  0010c			 AREA	 |.text|, CODE, ARM

  0010c		 |?Allocate@OMAPFlatSurface@@QAAHW4OMAP_DSS_PIXELFORMAT@@KKPAXK@Z| PROC ; OMAPFlatSurface::Allocate

; 70   : {

  0010c		 |$LN14@Allocate|
  0010c	e1a0c00d	 mov         r12, sp
  00110	e92d000f	 stmdb       sp!, {r0 - r3}
  00114	e92d5000	 stmdb       sp!, {r12, lr}
  00118	e24dd034	 sub         sp, sp, #0x34
  0011c		 |$M37266|

; 71   :     Heap    *pMainHeap = (Heap*) hHeap,

  0011c	e59d304c	 ldr         r3, [sp, #0x4C]
  00120	e58d3004	 str         r3, [sp, #4]

; 72   :             *pSurfHeap = NULL;

  00124	e3a03000	 mov         r3, #0
  00128	e58d3008	 str         r3, [sp, #8]

; 73   :     DWORD   dwMinStride;
; 74   :     DWORD    allocateSize=0;

  0012c	e3a03000	 mov         r3, #0
  00130	e58d300c	 str         r3, [sp, #0xC]

; 75   :     
; 76   :     //  Determine min stride for surface based on pixel type
; 77   :     if( (ePixelFormat == OMAP_DSS_PIXELFORMAT_YUV2) || (ePixelFormat == OMAP_DSS_PIXELFORMAT_UYVY) )

  00134	e59d3040	 ldr         r3, [sp, #0x40]
  00138	e353000a	 cmp         r3, #0xA
  0013c	0a000002	 beq         |$LN4@Allocate|
  00140	e59d3040	 ldr         r3, [sp, #0x40]
  00144	e353000b	 cmp         r3, #0xB
  00148	1a000006	 bne         |$LN5@Allocate|
  0014c		 |$LN4@Allocate|

; 78   :     {
; 79   :         dwMinStride = MIN_STRIDE_YUV;

  0014c	e3a03020	 mov         r3, #0x20
  00150	e58d3000	 str         r3, [sp]

; 80   :         m_dwWidthFactor = 2;

  00154	e59d303c	 ldr         r3, [sp, #0x3C]
  00158	e28320b4	 add         r2, r3, #0xB4
  0015c	e3a03002	 mov         r3, #2
  00160	e5823000	 str         r3, [r2]

; 81   :     }
; 82   :     else

  00164	ea000005	 b           |$LN3@Allocate|
  00168		 |$LN5@Allocate|

; 83   :     {
; 84   :         dwMinStride = MIN_STRIDE_RGB;

  00168	e3a03020	 mov         r3, #0x20
  0016c	e58d3000	 str         r3, [sp]

; 85   :         m_dwWidthFactor = 1;

  00170	e59d303c	 ldr         r3, [sp, #0x3C]
  00174	e28320b4	 add         r2, r3, #0xB4
  00178	e3a03001	 mov         r3, #1
  0017c	e5823000	 str         r3, [r2]
  00180		 |$LN3@Allocate|

; 86   :     }
; 87   :                 
; 88   :     //  Initialize the surface properties for this surface type
; 89   :     m_ePixelFormat   = ePixelFormat;

  00180	e59d303c	 ldr         r3, [sp, #0x3C]
  00184	e2832004	 add         r2, r3, #4
  00188	e59d3040	 ldr         r3, [sp, #0x40]
  0018c	e5823000	 str         r3, [r2]

; 90   :     m_dwPixelSize    = OMAPDisplayController::PixelFormatToPixelSize(m_ePixelFormat);

  00190	e59d303c	 ldr         r3, [sp, #0x3C]
  00194	e2833004	 add         r3, r3, #4
  00198	e5930000	 ldr         r0, [r3]
  0019c	eb000000	 bl          |?PixelFormatToPixelSize@OMAPDisplayController@@SAKW4OMAP_DSS_PIXELFORMAT@@@Z|
  001a0	e58d0014	 str         r0, [sp, #0x14]
  001a4	e59d303c	 ldr         r3, [sp, #0x3C]
  001a8	e2832008	 add         r2, r3, #8
  001ac	e59d3014	 ldr         r3, [sp, #0x14]
  001b0	e5823000	 str         r3, [r2]

; 91   :     m_eOrientation   = OMAP_SURF_ORIENTATION_STANDARD;

  001b4	e59d303c	 ldr         r3, [sp, #0x3C]
  001b8	e283200c	 add         r2, r3, #0xC
  001bc	e3a03000	 mov         r3, #0
  001c0	e5823000	 str         r3, [r2]

; 92   :     m_dwWidth        = dwWidth;

  001c4	e59d303c	 ldr         r3, [sp, #0x3C]
  001c8	e2832010	 add         r2, r3, #0x10
  001cc	e59d3044	 ldr         r3, [sp, #0x44]
  001d0	e5823000	 str         r3, [r2]

; 93   :     m_dwHeight       = dwHeight;

  001d4	e59d303c	 ldr         r3, [sp, #0x3C]
  001d8	e2832014	 add         r2, r3, #0x14
  001dc	e59d3048	 ldr         r3, [sp, #0x48]
  001e0	e5823000	 str         r3, [r2]

; 94   :     m_dwActualWidth  = ((dwWidth  + dwMinStride -1)/dwMinStride) * dwMinStride;

  001e4	e59d2044	 ldr         r2, [sp, #0x44]
  001e8	e59d3000	 ldr         r3, [sp]
  001ec	e0823003	 add         r3, r2, r3
  001f0	e2431001	 sub         r1, r3, #1
  001f4	e59d0000	 ldr         r0, [sp]
  001f8	eb000000	 bl          __rt_udiv
  001fc	e59d3000	 ldr         r3, [sp]
  00200	e0020390	 mul         r2, r0, r3
  00204	e59d303c	 ldr         r3, [sp, #0x3C]
  00208	e28330ac	 add         r3, r3, #0xAC
  0020c	e5832000	 str         r2, [r3]

; 95   :     m_dwActualHeight = ((dwHeight + dwMinStride -1)/dwMinStride) * dwMinStride;

  00210	e59d2048	 ldr         r2, [sp, #0x48]
  00214	e59d3000	 ldr         r3, [sp]
  00218	e0823003	 add         r3, r2, r3
  0021c	e2431001	 sub         r1, r3, #1
  00220	e59d0000	 ldr         r0, [sp]
  00224	eb000000	 bl          __rt_udiv
  00228	e59d3000	 ldr         r3, [sp]
  0022c	e0020390	 mul         r2, r0, r3
  00230	e59d303c	 ldr         r3, [sp, #0x3C]
  00234	e28330b0	 add         r3, r3, #0xB0
  00238	e5832000	 str         r2, [r3]

; 96   :     
; 97   :     //  Set clipping region to be entire surface
; 98   :     SetClipping( NULL );

  0023c	e3a01000	 mov         r1, #0
  00240	e59d303c	 ldr         r3, [sp, #0x3C]
  00244	e5933000	 ldr         r3, [r3]
  00248	e2833020	 add         r3, r3, #0x20
  0024c	e59d003c	 ldr         r0, [sp, #0x3C]
  00250	e5933000	 ldr         r3, [r3]
  00254	e1a0e00f	 mov         lr, pc
  00258	e12fff13	 bx          r3

; 99   :     
; 100  :     // Aligning the size to PAGE_SIZE since some applications (ex: graphics) require a page aligned buffer    
; 101  :     allocateSize = m_dwPixelSize * m_dwActualWidth * m_dwActualHeight;

  0025c	e59d303c	 ldr         r3, [sp, #0x3C]
  00260	e2832008	 add         r2, r3, #8
  00264	e59d303c	 ldr         r3, [sp, #0x3C]
  00268	e28330ac	 add         r3, r3, #0xAC
  0026c	e5921000	 ldr         r1, [r2]
  00270	e5933000	 ldr         r3, [r3]
  00274	e0020391	 mul         r2, r1, r3
  00278	e59d303c	 ldr         r3, [sp, #0x3C]
  0027c	e28330b0	 add         r3, r3, #0xB0
  00280	e5933000	 ldr         r3, [r3]
  00284	e0030392	 mul         r3, r2, r3
  00288	e58d300c	 str         r3, [sp, #0xC]

; 102  :     allocateSize = (allocateSize + PAGE_SIZE -1) & ~(PAGE_SIZE -1);

  0028c	e3e03b0d	 mvn         r3, #0xD, 22
  00290	e22330fb	 eor         r3, r3, #0xFB
  00294	e59d200c	 ldr         r2, [sp, #0xC]
  00298	e5933000	 ldr         r3, [r3]
  0029c	e0823003	 add         r3, r2, r3
  002a0	e2432001	 sub         r2, r3, #1
  002a4	e3e03b0d	 mvn         r3, #0xD, 22
  002a8	e22330fb	 eor         r3, r3, #0xFB
  002ac	e5933000	 ldr         r3, [r3]
  002b0	e2433001	 sub         r3, r3, #1
  002b4	e1e03003	 mvn         r3, r3
  002b8	e0023003	 and         r3, r2, r3
  002bc	e58d300c	 str         r3, [sp, #0xC]

; 103  :     //  Allocate the surface memory from the given video memory heap
; 104  :     pSurfHeap = pMainHeap->Allocate( allocateSize);    

  002c0	e59d100c	 ldr         r1, [sp, #0xC]
  002c4	e59d0004	 ldr         r0, [sp, #4]
  002c8	eb000000	 bl          |?Allocate@Heap@@QAAPAV1@K@Z|
  002cc	e58d0018	 str         r0, [sp, #0x18]
  002d0	e59d3018	 ldr         r3, [sp, #0x18]
  002d4	e58d3008	 str         r3, [sp, #8]

; 105  :     if( pSurfHeap == NULL )

  002d8	e59d3008	 ldr         r3, [sp, #8]
  002dc	e3530000	 cmp         r3, #0
  002e0	1a000008	 bne         |$LN2@Allocate|

; 106  :     {
; 107  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: Unable to allocate heap memory\n"));

  002e4	e59f00e8	 ldr         r0, [pc, #0xE8]
  002e8	eb000000	 bl          NKDbgPrintfW
  002ec	e3a03001	 mov         r3, #1
  002f0	e58d301c	 str         r3, [sp, #0x1C]
  002f4	ea000001	 b           |$LN9@Allocate|
  002f8	e3a03000	 mov         r3, #0
  002fc	e58d301c	 str         r3, [sp, #0x1C]
  00300		 |$LN9@Allocate|

; 108  :         goto cleanUp;

  00300	ea000025	 b           |$LN1@Allocate|
  00304	ea000024	 b           |$cleanUp$36787|
  00308		 |$LN2@Allocate|

; 109  :     }
; 110  : 
; 111  :     //  Clear out the surface memory
; 112  :     memset( (VOID*) pSurfHeap->Address(), 0, pSurfHeap->NodeSize() );

  00308	e59d0008	 ldr         r0, [sp, #8]
  0030c	eb000000	 bl          |?NodeSize@Heap@@QAAKXZ|
  00310	e58d0020	 str         r0, [sp, #0x20]
  00314	e59d0008	 ldr         r0, [sp, #8]
  00318	eb000000	 bl          |?Address@Heap@@QAAKXZ|
  0031c	e58d0024	 str         r0, [sp, #0x24]
  00320	e59d2020	 ldr         r2, [sp, #0x20]
  00324	e3a01000	 mov         r1, #0
  00328	e59d0024	 ldr         r0, [sp, #0x24]
  0032c	eb000000	 bl          memset

; 113  : 
; 114  :     //  Set surface specific properties
; 115  :     m_hHeap = (HANDLE) pSurfHeap;

  00330	e59d303c	 ldr         r3, [sp, #0x3C]
  00334	e28320a4	 add         r2, r3, #0xA4
  00338	e59d3008	 ldr         r3, [sp, #8]
  0033c	e5823000	 str         r3, [r2]

; 116  :     m_dwPhysicalAddr = dwBasePhysicalAddr +(DWORD)(pSurfHeap->Address() - pMainHeap->Address());

  00340	e59d0008	 ldr         r0, [sp, #8]
  00344	eb000000	 bl          |?Address@Heap@@QAAKXZ|
  00348	e58d0028	 str         r0, [sp, #0x28]
  0034c	e59d0004	 ldr         r0, [sp, #4]
  00350	eb000000	 bl          |?Address@Heap@@QAAKXZ|
  00354	e58d002c	 str         r0, [sp, #0x2C]
  00358	e59d2028	 ldr         r2, [sp, #0x28]
  0035c	e59d302c	 ldr         r3, [sp, #0x2C]
  00360	e0422003	 sub         r2, r2, r3
  00364	e59d3050	 ldr         r3, [sp, #0x50]
  00368	e0832002	 add         r2, r3, r2
  0036c	e59d303c	 ldr         r3, [sp, #0x3C]
  00370	e28330a8	 add         r3, r3, #0xA8
  00374	e5832000	 str         r2, [r3]

; 117  : 
; 118  :     
; 119  :     // Initialize variables
; 120  :     m_hRSZHandle = NULL;

  00378	e59d303c	 ldr         r3, [sp, #0x3C]
  0037c	e2832034	 add         r2, r3, #0x34
  00380	e3a03000	 mov         r3, #0
  00384	e5823000	 str         r3, [r2]

; 121  :     memset(&m_sRSZParams,0,sizeof(RSZParams_t));      

  00388	e3a02064	 mov         r2, #0x64
  0038c	e3a01000	 mov         r1, #0
  00390	e59d303c	 ldr         r3, [sp, #0x3C]
  00394	e2830038	 add         r0, r3, #0x38
  00398	eb000000	 bl          memset
  0039c		 |$LN1@Allocate|
  0039c		 |$cleanUp$36787|

; 122  :     
; 123  : cleanUp:        
; 124  :     //  Return
; 125  :     return (pSurfHeap != NULL);

  0039c	e59d3008	 ldr         r3, [sp, #8]
  003a0	e3530000	 cmp         r3, #0
  003a4	0a000002	 beq         |$LN10@Allocate|
  003a8	e3a03001	 mov         r3, #1
  003ac	e58d3030	 str         r3, [sp, #0x30]
  003b0	ea000001	 b           |$LN11@Allocate|
  003b4		 |$LN10@Allocate|
  003b4	e3a03000	 mov         r3, #0
  003b8	e58d3030	 str         r3, [sp, #0x30]
  003bc		 |$LN11@Allocate|
  003bc	e59d3030	 ldr         r3, [sp, #0x30]
  003c0	e58d3010	 str         r3, [sp, #0x10]

; 126  : }

  003c4	e59d0010	 ldr         r0, [sp, #0x10]
  003c8	e28dd034	 add         sp, sp, #0x34
  003cc	e89d6000	 ldmia       sp, {sp, lr}
  003d0	e12fff1e	 bx          lr
  003d4		 |$LN15@Allocate|
  003d4		 |$LN16@Allocate|
  003d4	00000000	 DCD         |??_C@_1EO@LAEPFMGF@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAh?$AAe?$AAa?$AAp?$AA?5?$AAm@|
  003d8		 |$M37267|

			 ENDP  ; |?Allocate@OMAPFlatSurface@@QAAHW4OMAP_DSS_PIXELFORMAT@@KKPAXK@Z|, OMAPFlatSurface::Allocate

; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\dssai\heap.h

  00000			 AREA	 |.pdata|, PDATA
|$T37277| DCD	|$LN5@NodeSize|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?NodeSize@Heap@@QAAKXZ| PROC		; Heap::NodeSize

; 75   :     DWORD       NodeSize(){ return m_nSize; }

  00000		 |$LN5@NodeSize|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M37274|
  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e283300c	 add         r3, r3, #0xC
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3000	 str         r3, [sp]
  00020	e59d0000	 ldr         r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M37275|

			 ENDP  ; |?NodeSize@Heap@@QAAKXZ|, Heap::NodeSize


  00000			 AREA	 |.pdata|, PDATA
|$T37285| DCD	|$LN5@Address|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Address@Heap@@QAAKXZ| PROC		; Heap::Address

; 76   :     DWORD       Address() { return m_pStart; }

  00000		 |$LN5@Address|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M37282|
  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e2833008	 add         r3, r3, #8
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3000	 str         r3, [sp]
  00020	e59d0000	 ldr         r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M37283|

			 ENDP  ; |?Address@Heap@@QAAKXZ|, Heap::Address


  00018			 AREA	 |.pdata|, PDATA
|$T37293| DCD	|$LN7@VirtualAdd|
	DCD	0x40003004
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\dssai\surfmgr_flat.cpp

  003d8			 AREA	 |.text|, CODE, ARM

  003d8		 |?VirtualAddr@OMAPFlatSurface@@UAAPAXXZ| PROC ; OMAPFlatSurface::VirtualAddr

; 131  : {

  003d8		 |$LN7@VirtualAdd|
  003d8	e1a0c00d	 mov         r12, sp
  003dc	e92d0001	 stmdb       sp!, {r0}
  003e0	e92d5000	 stmdb       sp!, {r12, lr}
  003e4	e24dd010	 sub         sp, sp, #0x10
  003e8		 |$M37290|

; 132  :     Heap*   pHeap;
; 133  :     if ((m_bUseResizer) && (m_eSurfaceType == OMAP_SURFACE_NORMAL) && (m_pAssocSurface))

  003e8	e59d3018	 ldr         r3, [sp, #0x18]
  003ec	e2833030	 add         r3, r3, #0x30
  003f0	e5933000	 ldr         r3, [r3]
  003f4	e3530000	 cmp         r3, #0
  003f8	0a000019	 beq         |$LN2@VirtualAdd|
  003fc	e59d3018	 ldr         r3, [sp, #0x18]
  00400	e283309c	 add         r3, r3, #0x9C
  00404	e5933000	 ldr         r3, [r3]
  00408	e3530000	 cmp         r3, #0
  0040c	1a000014	 bne         |$LN2@VirtualAdd|
  00410	e59d3018	 ldr         r3, [sp, #0x18]
  00414	e28330a0	 add         r3, r3, #0xA0
  00418	e5933000	 ldr         r3, [r3]
  0041c	e3530000	 cmp         r3, #0
  00420	0a00000f	 beq         |$LN2@VirtualAdd|

; 134  :         return m_pAssocSurface->VirtualAddr();

  00424	e59d3018	 ldr         r3, [sp, #0x18]
  00428	e28330a0	 add         r3, r3, #0xA0
  0042c	e5932000	 ldr         r2, [r3]
  00430	e59d3018	 ldr         r3, [sp, #0x18]
  00434	e28330a0	 add         r3, r3, #0xA0
  00438	e5930000	 ldr         r0, [r3]
  0043c	e5923000	 ldr         r3, [r2]
  00440	e2833004	 add         r3, r3, #4
  00444	e5933000	 ldr         r3, [r3]
  00448	e1a0e00f	 mov         lr, pc
  0044c	e12fff13	 bx          r3
  00450	e58d0008	 str         r0, [sp, #8]
  00454	e59d3008	 ldr         r3, [sp, #8]
  00458	e58d3004	 str         r3, [sp, #4]
  0045c	ea000009	 b           |$LN3@VirtualAdd|

; 135  :     else

  00460	ea000008	 b           |$LN1@VirtualAdd|
  00464		 |$LN2@VirtualAdd|

; 136  :     {
; 137  :         pHeap = (Heap*) m_hHeap;    

  00464	e59d3018	 ldr         r3, [sp, #0x18]
  00468	e28330a4	 add         r3, r3, #0xA4
  0046c	e5933000	 ldr         r3, [r3]
  00470	e58d3000	 str         r3, [sp]

; 138  :         //  For flat surfaces, always same virtual memory value        
; 139  :         return (VOID*) pHeap->Address();

  00474	e59d0000	 ldr         r0, [sp]
  00478	eb000000	 bl          |?Address@Heap@@QAAKXZ|
  0047c	e58d000c	 str         r0, [sp, #0xC]
  00480	e59d300c	 ldr         r3, [sp, #0xC]
  00484	e58d3004	 str         r3, [sp, #4]
  00488		 |$LN1@VirtualAdd|
  00488		 |$LN3@VirtualAdd|

; 140  :     }
; 141  : }

  00488	e59d0004	 ldr         r0, [sp, #4]
  0048c	e28dd010	 add         sp, sp, #0x10
  00490	e89d6000	 ldmia       sp, {sp, lr}
  00494	e12fff1e	 bx          lr
  00498		 |$M37291|

			 ENDP  ; |?VirtualAddr@OMAPFlatSurface@@UAAPAXXZ|, OMAPFlatSurface::VirtualAddr

	EXPORT	|??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1LA@BBFDAFHA@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@| [ DATA ] ; `string'

  00020			 AREA	 |.pdata|, PDATA
|$T37302| DCD	|$LN13@Width|
	DCD	0x40004304

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@| DCB "%"
	DCB	0x0, "s", 0x0, ":", 0x0, " ", 0x0, "D", 0x0, "E", 0x0, "B"
	DCB	0x0, "U", 0x0, "G", 0x0, "C", 0x0, "H", 0x0, "K", 0x0, " "
	DCB	0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "i", 0x0, "n", 0x0, " ", 0x0, "f", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, " ", 0x0, "%", 0x0, "s", 0x0, " "
	DCB	0x0, "a", 0x0, "t", 0x0, " ", 0x0, "l", 0x0, "i", 0x0, "n"
	DCB	0x0, "e", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@| DCB "U", 0x0
	DCB	"n", 0x0, "k", 0x0, "n", 0x0, "o", 0x0, "w", 0x0, "n", 0x0
	DCB	0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1LA@BBFDAFHA@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@| DCB "C"
	DCB	0x0, ":", 0x0, "\\", 0x0, "W", 0x0, "I", 0x0, "N", 0x0, "C"
	DCB	0x0, "E", 0x0, "6", 0x0, "0", 0x0, "0", 0x0, "\\", 0x0, "P"
	DCB	0x0, "L", 0x0, "A", 0x0, "T", 0x0, "F", 0x0, "O", 0x0, "R"
	DCB	0x0, "M", 0x0, "\\", 0x0, "C", 0x0, "O", 0x0, "M", 0x0, "M"
	DCB	0x0, "O", 0x0, "N", 0x0, "\\", 0x0, "S", 0x0, "R", 0x0, "C"
	DCB	0x0, "\\", 0x0, "S", 0x0, "O", 0x0, "C", 0x0, "\\", 0x0, "C"
	DCB	0x0, "O", 0x0, "M", 0x0, "M", 0x0, "O", 0x0, "N", 0x0, "_"
	DCB	0x0, "T", 0x0, "I", 0x0, "_", 0x0, "V", 0x0, "1", 0x0, "\\"
	DCB	0x0, "C", 0x0, "O", 0x0, "M", 0x0, "M", 0x0, "O", 0x0, "N"
	DCB	0x0, "_", 0x0, "T", 0x0, "I", 0x0, "\\", 0x0, "D", 0x0, "S"
	DCB	0x0, "S", 0x0, "\\", 0x0, "D", 0x0, "S", 0x0, "S", 0x0, "A"
	DCB	0x0, "I", 0x0, "\\", 0x0, ".", 0x0, "\\", 0x0, "s", 0x0, "u"
	DCB	0x0, "r", 0x0, "f", 0x0, "m", 0x0, "g", 0x0, "r", 0x0, "_"
	DCB	0x0, "f", 0x0, "l", 0x0, "a", 0x0, "t", 0x0, ".", 0x0, "c"
	DCB	0x0, "p", 0x0, "p", 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  00498			 AREA	 |.text|, CODE, ARM

  00498		 |?Width@OMAPFlatSurface@@UAAKW4OMAP_DSS_ROTATION@@@Z| PROC ; OMAPFlatSurface::Width

; 149  : {

  00498		 |$LN13@Width|
  00498	e1a0c00d	 mov         r12, sp
  0049c	e92d0003	 stmdb       sp!, {r0, r1}
  004a0	e92d5000	 stmdb       sp!, {r12, lr}
  004a4	e24dd010	 sub         sp, sp, #0x10
  004a8		 |$M37299|

; 150  :     DWORD   dwWidth;
; 151  :     
; 152  :     //  Return the surface width depending on the rotation angle
; 153  :     switch( eRotation )

  004a8	e59d301c	 ldr         r3, [sp, #0x1C]
  004ac	e58d3008	 str         r3, [sp, #8]
  004b0	e59d3008	 ldr         r3, [sp, #8]
  004b4	e35300b4	 cmp         r3, #0xB4
  004b8	ca000009	 bgt         |$LN10@Width|
  004bc	e59d3008	 ldr         r3, [sp, #8]
  004c0	e35300b4	 cmp         r3, #0xB4
  004c4	0a00000c	 beq         |$LN3@Width|
  004c8	e59d3008	 ldr         r3, [sp, #8]
  004cc	e3530000	 cmp         r3, #0
  004d0	0a000009	 beq         |$LN3@Width|
  004d4	e59d3008	 ldr         r3, [sp, #8]
  004d8	e353005a	 cmp         r3, #0x5A
  004dc	0a00000f	 beq         |$LN2@Width|
  004e0	ea000017	 b           |$LN1@Width|
  004e4		 |$LN10@Width|
  004e4	e59d2008	 ldr         r2, [sp, #8]
  004e8	e3a03c01	 mov         r3, #1, 24
  004ec	e383300e	 orr         r3, r3, #0xE
  004f0	e1520003	 cmp         r2, r3
  004f4	0a000009	 beq         |$LN2@Width|
  004f8	ea000011	 b           |$LN1@Width|
  004fc		 |$LN3@Width|

; 154  :     {
; 155  :         case OMAP_DSS_ROTATION_0:
; 156  :         case OMAP_DSS_ROTATION_180:
; 157  :             //  Normal
; 158  :             dwWidth = m_dwWidth/m_dwHorizScale;

  004fc	e59d3018	 ldr         r3, [sp, #0x18]
  00500	e2832010	 add         r2, r3, #0x10
  00504	e59d3018	 ldr         r3, [sp, #0x18]
  00508	e2833028	 add         r3, r3, #0x28
  0050c	e5921000	 ldr         r1, [r2]
  00510	e5930000	 ldr         r0, [r3]
  00514	eb000000	 bl          __rt_udiv
  00518	e58d0000	 str         r0, [sp]

; 159  :             break;

  0051c	ea000017	 b           |$LN4@Width|
  00520		 |$LN2@Width|

; 160  :             
; 161  :         case OMAP_DSS_ROTATION_90:
; 162  :         case OMAP_DSS_ROTATION_270:
; 163  :             //  Rotated
; 164  :             dwWidth = m_dwHeight/m_dwVertScale;

  00520	e59d3018	 ldr         r3, [sp, #0x18]
  00524	e2832014	 add         r2, r3, #0x14
  00528	e59d3018	 ldr         r3, [sp, #0x18]
  0052c	e283302c	 add         r3, r3, #0x2C
  00530	e5921000	 ldr         r1, [r2]
  00534	e5930000	 ldr         r0, [r3]
  00538	eb000000	 bl          __rt_udiv
  0053c	e58d0000	 str         r0, [sp]

; 165  :             break;

  00540	ea00000e	 b           |$LN4@Width|
  00544		 |$LN1@Width|

; 166  : 
; 167  :         default:
; 168  :             ASSERT(0);

  00544	ea000002	 b           |$LN8@Width|
  00548	e3a03001	 mov         r3, #1
  0054c	e58d300c	 str         r3, [sp, #0xC]
  00550	ea000007	 b           |$LN9@Width|
  00554		 |$LN8@Width|
  00554	e3a030a8	 mov         r3, #0xA8
  00558	e59f2040	 ldr         r2, [pc, #0x40]
  0055c	e59f1038	 ldr         r1, [pc, #0x38]
  00560	e59f0030	 ldr         r0, [pc, #0x30]
  00564	eb000000	 bl          NKDbgPrintfW
  00568	e6000010	 __debugbreak_ce
  0056c	e3a03000	 mov         r3, #0
  00570	e58d300c	 str         r3, [sp, #0xC]
  00574		 |$LN9@Width|

; 169  :             return 0;

  00574	e3a03000	 mov         r3, #0
  00578	e58d3004	 str         r3, [sp, #4]
  0057c	ea000001	 b           |$LN6@Width|
  00580		 |$LN4@Width|

; 170  :     }
; 171  :     
; 172  :     //  Return value
; 173  :     return dwWidth;

  00580	e59d3000	 ldr         r3, [sp]
  00584	e58d3004	 str         r3, [sp, #4]
  00588		 |$LN6@Width|

; 174  : }

  00588	e59d0004	 ldr         r0, [sp, #4]
  0058c	e28dd010	 add         sp, sp, #0x10
  00590	e89d6000	 ldmia       sp, {sp, lr}
  00594	e12fff1e	 bx          lr
  00598		 |$LN14@Width|
  00598		 |$LN15@Width|
  00598	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  0059c		 |$LN16@Width|
  0059c	00000000	 DCD         |??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@|
  005a0		 |$LN17@Width|
  005a0	00000000	 DCD         |??_C@_1LA@BBFDAFHA@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  005a4		 |$M37300|

			 ENDP  ; |?Width@OMAPFlatSurface@@UAAKW4OMAP_DSS_ROTATION@@@Z|, OMAPFlatSurface::Width


  00028			 AREA	 |.pdata|, PDATA
|$T37315| DCD	|$LN13@Height|
	DCD	0x40004304
; Function compile flags: /Odtp

  005a4			 AREA	 |.text|, CODE, ARM

  005a4		 |?Height@OMAPFlatSurface@@UAAKW4OMAP_DSS_ROTATION@@@Z| PROC ; OMAPFlatSurface::Height

; 181  : {

  005a4		 |$LN13@Height|
  005a4	e1a0c00d	 mov         r12, sp
  005a8	e92d0003	 stmdb       sp!, {r0, r1}
  005ac	e92d5000	 stmdb       sp!, {r12, lr}
  005b0	e24dd010	 sub         sp, sp, #0x10
  005b4		 |$M37312|

; 182  :     DWORD   dwHeight;
; 183  :     
; 184  :     //  Return the surface height depending on the rotation angle
; 185  :     switch( eRotation )

  005b4	e59d301c	 ldr         r3, [sp, #0x1C]
  005b8	e58d3008	 str         r3, [sp, #8]
  005bc	e59d3008	 ldr         r3, [sp, #8]
  005c0	e35300b4	 cmp         r3, #0xB4
  005c4	ca000009	 bgt         |$LN10@Height|
  005c8	e59d3008	 ldr         r3, [sp, #8]
  005cc	e35300b4	 cmp         r3, #0xB4
  005d0	0a00000c	 beq         |$LN3@Height|
  005d4	e59d3008	 ldr         r3, [sp, #8]
  005d8	e3530000	 cmp         r3, #0
  005dc	0a000009	 beq         |$LN3@Height|
  005e0	e59d3008	 ldr         r3, [sp, #8]
  005e4	e353005a	 cmp         r3, #0x5A
  005e8	0a00000f	 beq         |$LN2@Height|
  005ec	ea000017	 b           |$LN1@Height|
  005f0		 |$LN10@Height|
  005f0	e59d2008	 ldr         r2, [sp, #8]
  005f4	e3a03c01	 mov         r3, #1, 24
  005f8	e383300e	 orr         r3, r3, #0xE
  005fc	e1520003	 cmp         r2, r3
  00600	0a000009	 beq         |$LN2@Height|
  00604	ea000011	 b           |$LN1@Height|
  00608		 |$LN3@Height|

; 186  :     {
; 187  :         case OMAP_DSS_ROTATION_0:
; 188  :         case OMAP_DSS_ROTATION_180:
; 189  :             //  Normal
; 190  :             dwHeight = m_dwHeight/m_dwVertScale;

  00608	e59d3018	 ldr         r3, [sp, #0x18]
  0060c	e2832014	 add         r2, r3, #0x14
  00610	e59d3018	 ldr         r3, [sp, #0x18]
  00614	e283302c	 add         r3, r3, #0x2C
  00618	e5921000	 ldr         r1, [r2]
  0061c	e5930000	 ldr         r0, [r3]
  00620	eb000000	 bl          __rt_udiv
  00624	e58d0000	 str         r0, [sp]

; 191  :             break;

  00628	ea000017	 b           |$LN4@Height|
  0062c		 |$LN2@Height|

; 192  :             
; 193  :         case OMAP_DSS_ROTATION_90:
; 194  :         case OMAP_DSS_ROTATION_270:
; 195  :             //  Rotated
; 196  :             dwHeight = m_dwWidth/m_dwHorizScale;

  0062c	e59d3018	 ldr         r3, [sp, #0x18]
  00630	e2832010	 add         r2, r3, #0x10
  00634	e59d3018	 ldr         r3, [sp, #0x18]
  00638	e2833028	 add         r3, r3, #0x28
  0063c	e5921000	 ldr         r1, [r2]
  00640	e5930000	 ldr         r0, [r3]
  00644	eb000000	 bl          __rt_udiv
  00648	e58d0000	 str         r0, [sp]

; 197  :             break;

  0064c	ea00000e	 b           |$LN4@Height|
  00650		 |$LN1@Height|

; 198  : 
; 199  :         default:
; 200  :             ASSERT(0);

  00650	ea000002	 b           |$LN8@Height|
  00654	e3a03001	 mov         r3, #1
  00658	e58d300c	 str         r3, [sp, #0xC]
  0065c	ea000007	 b           |$LN9@Height|
  00660		 |$LN8@Height|
  00660	e3a030c8	 mov         r3, #0xC8
  00664	e59f2040	 ldr         r2, [pc, #0x40]
  00668	e59f1038	 ldr         r1, [pc, #0x38]
  0066c	e59f0030	 ldr         r0, [pc, #0x30]
  00670	eb000000	 bl          NKDbgPrintfW
  00674	e6000010	 __debugbreak_ce
  00678	e3a03000	 mov         r3, #0
  0067c	e58d300c	 str         r3, [sp, #0xC]
  00680		 |$LN9@Height|

; 201  :             return 0;

  00680	e3a03000	 mov         r3, #0
  00684	e58d3004	 str         r3, [sp, #4]
  00688	ea000001	 b           |$LN6@Height|
  0068c		 |$LN4@Height|

; 202  :     }
; 203  :     
; 204  :     //  Return value
; 205  :     return dwHeight;

  0068c	e59d3000	 ldr         r3, [sp]
  00690	e58d3004	 str         r3, [sp, #4]
  00694		 |$LN6@Height|

; 206  : }

  00694	e59d0004	 ldr         r0, [sp, #4]
  00698	e28dd010	 add         sp, sp, #0x10
  0069c	e89d6000	 ldmia       sp, {sp, lr}
  006a0	e12fff1e	 bx          lr
  006a4		 |$LN14@Height|
  006a4		 |$LN15@Height|
  006a4	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  006a8		 |$LN16@Height|
  006a8	00000000	 DCD         |??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@|
  006ac		 |$LN17@Height|
  006ac	00000000	 DCD         |??_C@_1LA@BBFDAFHA@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  006b0		 |$M37313|

			 ENDP  ; |?Height@OMAPFlatSurface@@UAAKW4OMAP_DSS_ROTATION@@@Z|, OMAPFlatSurface::Height


  00030			 AREA	 |.pdata|, PDATA
|$T37328| DCD	|$LN13@Stride|
	DCD	0x40004b04
; Function compile flags: /Odtp

  006b0			 AREA	 |.text|, CODE, ARM

  006b0		 |?Stride@OMAPFlatSurface@@UAAKW4OMAP_DSS_ROTATION@@@Z| PROC ; OMAPFlatSurface::Stride

; 213  : {

  006b0		 |$LN13@Stride|
  006b0	e1a0c00d	 mov         r12, sp
  006b4	e92d0003	 stmdb       sp!, {r0, r1}
  006b8	e92d5000	 stmdb       sp!, {r12, lr}
  006bc	e24dd010	 sub         sp, sp, #0x10
  006c0		 |$M37325|

; 214  :     DWORD   dwStride;
; 215  :     
; 216  :     //  Return the surface stride depending on the rotation angle
; 217  :     switch( eRotation )

  006c0	e59d301c	 ldr         r3, [sp, #0x1C]
  006c4	e58d3008	 str         r3, [sp, #8]
  006c8	e59d3008	 ldr         r3, [sp, #8]
  006cc	e35300b4	 cmp         r3, #0xB4
  006d0	ca000009	 bgt         |$LN10@Stride|
  006d4	e59d3008	 ldr         r3, [sp, #8]
  006d8	e35300b4	 cmp         r3, #0xB4
  006dc	0a00000c	 beq         |$LN3@Stride|
  006e0	e59d3008	 ldr         r3, [sp, #8]
  006e4	e3530000	 cmp         r3, #0
  006e8	0a000009	 beq         |$LN3@Stride|
  006ec	e59d3008	 ldr         r3, [sp, #8]
  006f0	e353005a	 cmp         r3, #0x5A
  006f4	0a000013	 beq         |$LN2@Stride|
  006f8	ea00001f	 b           |$LN1@Stride|
  006fc		 |$LN10@Stride|
  006fc	e59d2008	 ldr         r2, [sp, #8]
  00700	e3a03c01	 mov         r3, #1, 24
  00704	e383300e	 orr         r3, r3, #0xE
  00708	e1520003	 cmp         r2, r3
  0070c	0a00000d	 beq         |$LN2@Stride|
  00710	ea000019	 b           |$LN1@Stride|
  00714		 |$LN3@Stride|

; 218  :     {
; 219  :         case OMAP_DSS_ROTATION_0:
; 220  :         case OMAP_DSS_ROTATION_180:
; 221  :             //  Normal
; 222  :             dwStride = m_dwPixelSize * m_dwActualWidth * m_dwHorizScale;

  00714	e59d3018	 ldr         r3, [sp, #0x18]
  00718	e2832008	 add         r2, r3, #8
  0071c	e59d3018	 ldr         r3, [sp, #0x18]
  00720	e28330ac	 add         r3, r3, #0xAC
  00724	e5921000	 ldr         r1, [r2]
  00728	e5933000	 ldr         r3, [r3]
  0072c	e0020391	 mul         r2, r1, r3
  00730	e59d3018	 ldr         r3, [sp, #0x18]
  00734	e2833028	 add         r3, r3, #0x28
  00738	e5933000	 ldr         r3, [r3]
  0073c	e0030392	 mul         r3, r2, r3
  00740	e58d3000	 str         r3, [sp]

; 223  :             break;

  00744	ea00001b	 b           |$LN4@Stride|
  00748		 |$LN2@Stride|

; 224  :             
; 225  :         case OMAP_DSS_ROTATION_90:
; 226  :         case OMAP_DSS_ROTATION_270:
; 227  :             //  Rotated
; 228  :             dwStride = m_dwPixelSize * m_dwActualHeight * m_dwVertScale;

  00748	e59d3018	 ldr         r3, [sp, #0x18]
  0074c	e2832008	 add         r2, r3, #8
  00750	e59d3018	 ldr         r3, [sp, #0x18]
  00754	e28330b0	 add         r3, r3, #0xB0
  00758	e5921000	 ldr         r1, [r2]
  0075c	e5933000	 ldr         r3, [r3]
  00760	e0020391	 mul         r2, r1, r3
  00764	e59d3018	 ldr         r3, [sp, #0x18]
  00768	e283302c	 add         r3, r3, #0x2C
  0076c	e5933000	 ldr         r3, [r3]
  00770	e0030392	 mul         r3, r2, r3
  00774	e58d3000	 str         r3, [sp]

; 229  :             break;

  00778	ea00000e	 b           |$LN4@Stride|
  0077c		 |$LN1@Stride|

; 230  : 
; 231  :         default:
; 232  :             ASSERT(0);

  0077c	ea000002	 b           |$LN8@Stride|
  00780	e3a03001	 mov         r3, #1
  00784	e58d300c	 str         r3, [sp, #0xC]
  00788	ea000007	 b           |$LN9@Stride|
  0078c		 |$LN8@Stride|
  0078c	e3a030e8	 mov         r3, #0xE8
  00790	e59f2040	 ldr         r2, [pc, #0x40]
  00794	e59f1038	 ldr         r1, [pc, #0x38]
  00798	e59f0030	 ldr         r0, [pc, #0x30]
  0079c	eb000000	 bl          NKDbgPrintfW
  007a0	e6000010	 __debugbreak_ce
  007a4	e3a03000	 mov         r3, #0
  007a8	e58d300c	 str         r3, [sp, #0xC]
  007ac		 |$LN9@Stride|

; 233  :             return 0;

  007ac	e3a03000	 mov         r3, #0
  007b0	e58d3004	 str         r3, [sp, #4]
  007b4	ea000001	 b           |$LN6@Stride|
  007b8		 |$LN4@Stride|

; 234  :     }
; 235  : 
; 236  :     //  Return the surface stride
; 237  :     return dwStride;

  007b8	e59d3000	 ldr         r3, [sp]
  007bc	e58d3004	 str         r3, [sp, #4]
  007c0		 |$LN6@Stride|

; 238  : }

  007c0	e59d0004	 ldr         r0, [sp, #4]
  007c4	e28dd010	 add         sp, sp, #0x10
  007c8	e89d6000	 ldmia       sp, {sp, lr}
  007cc	e12fff1e	 bx          lr
  007d0		 |$LN14@Stride|
  007d0		 |$LN15@Stride|
  007d0	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  007d4		 |$LN16@Stride|
  007d4	00000000	 DCD         |??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@|
  007d8		 |$LN17@Stride|
  007d8	00000000	 DCD         |??_C@_1LA@BBFDAFHA@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  007dc		 |$M37326|

			 ENDP  ; |?Stride@OMAPFlatSurface@@UAAKW4OMAP_DSS_ROTATION@@@Z|, OMAPFlatSurface::Stride


  00038			 AREA	 |.pdata|, PDATA
|$T37344| DCD	|$LN30@PhysicalAd|
	DCD	0x4001d004
; Function compile flags: /Odtp

  007dc			 AREA	 |.text|, CODE, ARM

  007dc		 |?PhysicalAddr@OMAPFlatSurface@@UAAKW4OMAP_DSS_ROTATION@@HW4OMAP_ASSOC_SURF_USAGE@@@Z| PROC ; OMAPFlatSurface::PhysicalAddr

; 247  : {

  007dc		 |$LN30@PhysicalAd|
  007dc	e1a0c00d	 mov         r12, sp
  007e0	e92d000f	 stmdb       sp!, {r0 - r3}
  007e4	e92d5010	 stmdb       sp!, {r4, r12, lr}
  007e8	e24dd024	 sub         sp, sp, #0x24
  007ec		 |$M37341|

; 248  :     DWORD   dwAddr;
; 249  :     DWORD   dwClipOffsetX,
; 250  :             dwClipOffsetY;
; 251  : 
; 252  :     if ((((eUseAssocSurface==OMAP_ASSOC_SURF_DEFAULT) && (m_bUseResizer)) ||
; 253  :           ( eUseAssocSurface==OMAP_ASSOC_SURF_FORCE_ON )                     ) &&
; 254  :         (m_pAssocSurface))

  007ec	e59d303c	 ldr         r3, [sp, #0x3C]
  007f0	e3530000	 cmp         r3, #0
  007f4	1a000004	 bne         |$LN17@PhysicalAd|
  007f8	e59d3030	 ldr         r3, [sp, #0x30]
  007fc	e2833030	 add         r3, r3, #0x30
  00800	e5933000	 ldr         r3, [r3]
  00804	e3530000	 cmp         r3, #0
  00808	1a000002	 bne         |$LN18@PhysicalAd|
  0080c		 |$LN17@PhysicalAd|
  0080c	e59d303c	 ldr         r3, [sp, #0x3C]
  00810	e3530002	 cmp         r3, #2
  00814	1a000017	 bne         |$LN19@PhysicalAd|
  00818		 |$LN18@PhysicalAd|
  00818	e59d3030	 ldr         r3, [sp, #0x30]
  0081c	e28330a0	 add         r3, r3, #0xA0
  00820	e5933000	 ldr         r3, [r3]
  00824	e3530000	 cmp         r3, #0
  00828	0a000012	 beq         |$LN19@PhysicalAd|

; 255  :         
; 256  :         return m_pAssocSurface->PhysicalAddr(eRotation,bMirror,OMAP_ASSOC_SURF_FORCE_OFF);                 

  0082c	e3a03001	 mov         r3, #1
  00830	e59d2038	 ldr         r2, [sp, #0x38]
  00834	e59d1034	 ldr         r1, [sp, #0x34]
  00838	e59d0030	 ldr         r0, [sp, #0x30]
  0083c	e28000a0	 add         r0, r0, #0xA0
  00840	e590e000	 ldr         lr, [r0]
  00844	e59d0030	 ldr         r0, [sp, #0x30]
  00848	e28000a0	 add         r0, r0, #0xA0
  0084c	e5904000	 ldr         r4, [r0]
  00850	e59e0000	 ldr         r0, [lr]
  00854	e280e014	 add         lr, r0, #0x14
  00858	e1a00004	 mov         r0, r4
  0085c	e59e4000	 ldr         r4, [lr]
  00860	e1a0e00f	 mov         lr, pc
  00864	e12fff14	 bx          r4
  00868	e58d0010	 str         r0, [sp, #0x10]
  0086c	e59d3010	 ldr         r3, [sp, #0x10]
  00870	e58d300c	 str         r3, [sp, #0xC]
  00874	ea0001a1	 b           |$LN20@PhysicalAd|
  00878		 |$LN19@PhysicalAd|

; 257  :     
; 258  :     
; 259  :     if( bMirror )

  00878	e59d3038	 ldr         r3, [sp, #0x38]
  0087c	e3530000	 cmp         r3, #0
  00880	0a0000ce	 beq         |$LN16@PhysicalAd|

; 260  :     {
; 261  :         //  Compute the base address for DMA based rotation (mirrored)    
; 262  :         switch( eRotation )

  00884	e59d3034	 ldr         r3, [sp, #0x34]
  00888	e58d3014	 str         r3, [sp, #0x14]
  0088c	e59d3014	 ldr         r3, [sp, #0x14]
  00890	e35300b4	 cmp         r3, #0xB4
  00894	ca000009	 bgt         |$LN24@PhysicalAd|
  00898	e59d3014	 ldr         r3, [sp, #0x14]
  0089c	e35300b4	 cmp         r3, #0xB4
  008a0	0a00004f	 beq         |$LN11@PhysicalAd|
  008a4	e59d3014	 ldr         r3, [sp, #0x14]
  008a8	e3530000	 cmp         r3, #0
  008ac	0a000009	 beq         |$LN13@PhysicalAd|
  008b0	e59d3014	 ldr         r3, [sp, #0x14]
  008b4	e353005a	 cmp         r3, #0x5A
  008b8	0a00002c	 beq         |$LN12@PhysicalAd|
  008bc	ea0000ae	 b           |$LN9@PhysicalAd|
  008c0		 |$LN24@PhysicalAd|
  008c0	e59d2014	 ldr         r2, [sp, #0x14]
  008c4	e3a03c01	 mov         r3, #1, 24
  008c8	e383300e	 orr         r3, r3, #0xE
  008cc	e1520003	 cmp         r2, r3
  008d0	0a000069	 beq         |$LN10@PhysicalAd|
  008d4	ea0000a8	 b           |$LN9@PhysicalAd|
  008d8		 |$LN13@PhysicalAd|

; 263  :         {
; 264  :             case OMAP_DSS_ROTATION_0:
; 265  :                 //  Compute clip offset
; 266  :                 dwClipOffsetX = m_dwWidth - m_rcClip.right;

  008d8	e59d3030	 ldr         r3, [sp, #0x30]
  008dc	e2832010	 add         r2, r3, #0x10
  008e0	e59d3030	 ldr         r3, [sp, #0x30]
  008e4	e2833020	 add         r3, r3, #0x20
  008e8	e5922000	 ldr         r2, [r2]
  008ec	e5933000	 ldr         r3, [r3]
  008f0	e0423003	 sub         r3, r2, r3
  008f4	e58d3004	 str         r3, [sp, #4]

; 267  :                 dwClipOffsetY = m_rcClip.top * m_dwActualWidth;

  008f8	e59d3030	 ldr         r3, [sp, #0x30]
  008fc	e283201c	 add         r2, r3, #0x1C
  00900	e59d3030	 ldr         r3, [sp, #0x30]
  00904	e28330ac	 add         r3, r3, #0xAC
  00908	e5922000	 ldr         r2, [r2]
  0090c	e5933000	 ldr         r3, [r3]
  00910	e0030392	 mul         r3, r2, r3
  00914	e58d3008	 str         r3, [sp, #8]

; 268  : 
; 269  :                 //  Offset to the upper right corner
; 270  :                 dwAddr = m_dwPhysicalAddr + (m_dwWidth - dwClipOffsetX - 1)*m_dwPixelSize + dwClipOffsetY*m_dwPixelSize;

  00918	e59d3030	 ldr         r3, [sp, #0x30]
  0091c	e28300a8	 add         r0, r3, #0xA8
  00920	e59d3030	 ldr         r3, [sp, #0x30]
  00924	e2833010	 add         r3, r3, #0x10
  00928	e5932000	 ldr         r2, [r3]
  0092c	e59d3004	 ldr         r3, [sp, #4]
  00930	e0423003	 sub         r3, r2, r3
  00934	e2431001	 sub         r1, r3, #1
  00938	e59d3030	 ldr         r3, [sp, #0x30]
  0093c	e2833008	 add         r3, r3, #8
  00940	e5933000	 ldr         r3, [r3]
  00944	e0020391	 mul         r2, r1, r3
  00948	e5903000	 ldr         r3, [r0]
  0094c	e0831002	 add         r1, r3, r2
  00950	e59d3030	 ldr         r3, [sp, #0x30]
  00954	e2833008	 add         r3, r3, #8
  00958	e59d2008	 ldr         r2, [sp, #8]
  0095c	e5933000	 ldr         r3, [r3]
  00960	e0030392	 mul         r3, r2, r3
  00964	e0813003	 add         r3, r1, r3
  00968	e58d3000	 str         r3, [sp]

; 271  :                 break;

  0096c	ea000092	 b           |$LN14@PhysicalAd|
  00970		 |$LN12@PhysicalAd|

; 272  :                 
; 273  :             case OMAP_DSS_ROTATION_90:
; 274  :                 //  Compute clip offset
; 275  :                 dwClipOffsetX = m_rcClip.left;

  00970	e59d3030	 ldr         r3, [sp, #0x30]
  00974	e2833018	 add         r3, r3, #0x18
  00978	e5933000	 ldr         r3, [r3]
  0097c	e58d3004	 str         r3, [sp, #4]

; 276  :                 dwClipOffsetY = m_rcClip.top * m_dwActualWidth;

  00980	e59d3030	 ldr         r3, [sp, #0x30]
  00984	e283201c	 add         r2, r3, #0x1C
  00988	e59d3030	 ldr         r3, [sp, #0x30]
  0098c	e28330ac	 add         r3, r3, #0xAC
  00990	e5922000	 ldr         r2, [r2]
  00994	e5933000	 ldr         r3, [r3]
  00998	e0030392	 mul         r3, r2, r3
  0099c	e58d3008	 str         r3, [sp, #8]

; 277  : 
; 278  :                 //  Same as set physical address
; 279  :                 dwAddr = m_dwPhysicalAddr + dwClipOffsetX*m_dwPixelSize + dwClipOffsetY*m_dwPixelSize;

  009a0	e59d3030	 ldr         r3, [sp, #0x30]
  009a4	e28300a8	 add         r0, r3, #0xA8
  009a8	e59d3030	 ldr         r3, [sp, #0x30]
  009ac	e2833008	 add         r3, r3, #8
  009b0	e59d1004	 ldr         r1, [sp, #4]
  009b4	e5933000	 ldr         r3, [r3]
  009b8	e0020391	 mul         r2, r1, r3
  009bc	e5903000	 ldr         r3, [r0]
  009c0	e0831002	 add         r1, r3, r2
  009c4	e59d3030	 ldr         r3, [sp, #0x30]
  009c8	e2833008	 add         r3, r3, #8
  009cc	e59d2008	 ldr         r2, [sp, #8]
  009d0	e5933000	 ldr         r3, [r3]
  009d4	e0030392	 mul         r3, r2, r3
  009d8	e0813003	 add         r3, r1, r3
  009dc	e58d3000	 str         r3, [sp]

; 280  :                 break;

  009e0	ea000075	 b           |$LN14@PhysicalAd|
  009e4		 |$LN11@PhysicalAd|

; 281  : 
; 282  :             case OMAP_DSS_ROTATION_180:
; 283  :                 //  Compute clip offset
; 284  :                 dwClipOffsetX = m_rcClip.left;

  009e4	e59d3030	 ldr         r3, [sp, #0x30]
  009e8	e2833018	 add         r3, r3, #0x18
  009ec	e5933000	 ldr         r3, [r3]
  009f0	e58d3004	 str         r3, [sp, #4]

; 285  :                 dwClipOffsetY = m_dwHeight - m_rcClip.bottom;

  009f4	e59d3030	 ldr         r3, [sp, #0x30]
  009f8	e2832014	 add         r2, r3, #0x14
  009fc	e59d3030	 ldr         r3, [sp, #0x30]
  00a00	e2833024	 add         r3, r3, #0x24
  00a04	e5922000	 ldr         r2, [r2]
  00a08	e5933000	 ldr         r3, [r3]
  00a0c	e0423003	 sub         r3, r2, r3
  00a10	e58d3008	 str         r3, [sp, #8]

; 286  : 
; 287  :                 //  Offset to the lower left corner
; 288  :                 dwAddr = m_dwPhysicalAddr + (m_dwActualWidth * (m_dwHeight - dwClipOffsetY - 1))*m_dwPixelSize + dwClipOffsetX*m_dwPixelSize;

  00a14	e59d3030	 ldr         r3, [sp, #0x30]
  00a18	e28300a8	 add         r0, r3, #0xA8
  00a1c	e59d3030	 ldr         r3, [sp, #0x30]
  00a20	e28310ac	 add         r1, r3, #0xAC
  00a24	e59d3030	 ldr         r3, [sp, #0x30]
  00a28	e2833014	 add         r3, r3, #0x14
  00a2c	e5932000	 ldr         r2, [r3]
  00a30	e59d3008	 ldr         r3, [sp, #8]
  00a34	e0423003	 sub         r3, r2, r3
  00a38	e2432001	 sub         r2, r3, #1
  00a3c	e5913000	 ldr         r3, [r1]
  00a40	e0010293	 mul         r1, r3, r2
  00a44	e59d3030	 ldr         r3, [sp, #0x30]
  00a48	e2833008	 add         r3, r3, #8
  00a4c	e5933000	 ldr         r3, [r3]
  00a50	e0020391	 mul         r2, r1, r3
  00a54	e5903000	 ldr         r3, [r0]
  00a58	e0831002	 add         r1, r3, r2
  00a5c	e59d3030	 ldr         r3, [sp, #0x30]
  00a60	e2833008	 add         r3, r3, #8
  00a64	e59d2004	 ldr         r2, [sp, #4]
  00a68	e5933000	 ldr         r3, [r3]
  00a6c	e0030392	 mul         r3, r2, r3
  00a70	e0813003	 add         r3, r1, r3
  00a74	e58d3000	 str         r3, [sp]

; 289  :                 break;

  00a78	ea00004f	 b           |$LN14@PhysicalAd|
  00a7c		 |$LN10@PhysicalAd|

; 290  : 
; 291  :             case OMAP_DSS_ROTATION_270:
; 292  :                 //  Compute clip offset
; 293  :                 dwClipOffsetX = m_dwWidth - m_rcClip.right;

  00a7c	e59d3030	 ldr         r3, [sp, #0x30]
  00a80	e2832010	 add         r2, r3, #0x10
  00a84	e59d3030	 ldr         r3, [sp, #0x30]
  00a88	e2833020	 add         r3, r3, #0x20
  00a8c	e5922000	 ldr         r2, [r2]
  00a90	e5933000	 ldr         r3, [r3]
  00a94	e0423003	 sub         r3, r2, r3
  00a98	e58d3004	 str         r3, [sp, #4]

; 294  :                 dwClipOffsetY = (m_dwHeight - m_rcClip.bottom)*m_dwActualWidth;

  00a9c	e59d3030	 ldr         r3, [sp, #0x30]
  00aa0	e2832014	 add         r2, r3, #0x14
  00aa4	e59d3030	 ldr         r3, [sp, #0x30]
  00aa8	e2833024	 add         r3, r3, #0x24
  00aac	e5922000	 ldr         r2, [r2]
  00ab0	e5933000	 ldr         r3, [r3]
  00ab4	e0422003	 sub         r2, r2, r3
  00ab8	e59d3030	 ldr         r3, [sp, #0x30]
  00abc	e28330ac	 add         r3, r3, #0xAC
  00ac0	e5933000	 ldr         r3, [r3]
  00ac4	e0030392	 mul         r3, r2, r3
  00ac8	e58d3008	 str         r3, [sp, #8]

; 295  : 
; 296  :                 //  Offset to the lower right corner
; 297  :                 dwAddr = m_dwPhysicalAddr + (m_dwActualWidth * m_dwHeight - 1)*m_dwPixelSize - (m_dwActualWidth - m_dwWidth)*m_dwPixelSize;

  00acc	e59d3030	 ldr         r3, [sp, #0x30]
  00ad0	e28300a8	 add         r0, r3, #0xA8
  00ad4	e59d3030	 ldr         r3, [sp, #0x30]
  00ad8	e28320ac	 add         r2, r3, #0xAC
  00adc	e59d3030	 ldr         r3, [sp, #0x30]
  00ae0	e2833014	 add         r3, r3, #0x14
  00ae4	e5922000	 ldr         r2, [r2]
  00ae8	e5933000	 ldr         r3, [r3]
  00aec	e0030392	 mul         r3, r2, r3
  00af0	e2431001	 sub         r1, r3, #1
  00af4	e59d3030	 ldr         r3, [sp, #0x30]
  00af8	e2833008	 add         r3, r3, #8
  00afc	e5933000	 ldr         r3, [r3]
  00b00	e0020391	 mul         r2, r1, r3
  00b04	e5903000	 ldr         r3, [r0]
  00b08	e0831002	 add         r1, r3, r2
  00b0c	e59d3030	 ldr         r3, [sp, #0x30]
  00b10	e28320ac	 add         r2, r3, #0xAC
  00b14	e59d3030	 ldr         r3, [sp, #0x30]
  00b18	e2833010	 add         r3, r3, #0x10
  00b1c	e5922000	 ldr         r2, [r2]
  00b20	e5933000	 ldr         r3, [r3]
  00b24	e0422003	 sub         r2, r2, r3
  00b28	e59d3030	 ldr         r3, [sp, #0x30]
  00b2c	e2833008	 add         r3, r3, #8
  00b30	e5933000	 ldr         r3, [r3]
  00b34	e0030392	 mul         r3, r2, r3
  00b38	e0413003	 sub         r3, r1, r3
  00b3c	e58d3000	 str         r3, [sp]

; 298  :                 dwAddr = dwAddr - dwClipOffsetX*m_dwPixelSize - dwClipOffsetY*m_dwPixelSize;

  00b40	e59d3030	 ldr         r3, [sp, #0x30]
  00b44	e2833008	 add         r3, r3, #8
  00b48	e59d1004	 ldr         r1, [sp, #4]
  00b4c	e5933000	 ldr         r3, [r3]
  00b50	e0020391	 mul         r2, r1, r3
  00b54	e59d3000	 ldr         r3, [sp]
  00b58	e0431002	 sub         r1, r3, r2
  00b5c	e59d3030	 ldr         r3, [sp, #0x30]
  00b60	e2833008	 add         r3, r3, #8
  00b64	e59d2008	 ldr         r2, [sp, #8]
  00b68	e5933000	 ldr         r3, [r3]
  00b6c	e0030392	 mul         r3, r2, r3
  00b70	e0413003	 sub         r3, r1, r3
  00b74	e58d3000	 str         r3, [sp]

; 299  :                 break;

  00b78	ea00000f	 b           |$LN14@PhysicalAd|
  00b7c		 |$LN9@PhysicalAd|

; 300  :     
; 301  :             default:
; 302  :                 ASSERT(0);

  00b7c	ea000002	 b           |$LN22@PhysicalAd|
  00b80	e3a03001	 mov         r3, #1
  00b84	e58d3018	 str         r3, [sp, #0x18]
  00b88	ea000008	 b           |$LN23@PhysicalAd|
  00b8c		 |$LN22@PhysicalAd|
  00b8c	e3a03c01	 mov         r3, #1, 24
  00b90	e383302e	 orr         r3, r3, #0x2E
  00b94	e59f237c	 ldr         r2, [pc, #0x37C]
  00b98	e59f1374	 ldr         r1, [pc, #0x374]
  00b9c	e59f036c	 ldr         r0, [pc, #0x36C]
  00ba0	eb000000	 bl          NKDbgPrintfW
  00ba4	e6000010	 __debugbreak_ce
  00ba8	e3a03000	 mov         r3, #0
  00bac	e58d3018	 str         r3, [sp, #0x18]
  00bb0		 |$LN23@PhysicalAd|

; 303  :                 return 0;

  00bb0	e3a03000	 mov         r3, #0
  00bb4	e58d300c	 str         r3, [sp, #0xC]
  00bb8	ea0000d0	 b           |$LN20@PhysicalAd|
  00bbc		 |$LN14@PhysicalAd|

; 304  :         }
; 305  :     }
; 306  :     else

  00bbc	ea0000cd	 b           |$LN8@PhysicalAd|
  00bc0		 |$LN16@PhysicalAd|

; 307  :     {
; 308  :         //  Compute the base address for DMA based rotation (non-mirrored)    
; 309  :         switch( eRotation )

  00bc0	e59d3034	 ldr         r3, [sp, #0x34]
  00bc4	e58d301c	 str         r3, [sp, #0x1C]
  00bc8	e59d301c	 ldr         r3, [sp, #0x1C]
  00bcc	e35300b4	 cmp         r3, #0xB4
  00bd0	ca000009	 bgt         |$LN27@PhysicalAd|
  00bd4	e59d301c	 ldr         r3, [sp, #0x1C]
  00bd8	e35300b4	 cmp         r3, #0xB4
  00bdc	0a00004f	 beq         |$LN3@PhysicalAd|
  00be0	e59d301c	 ldr         r3, [sp, #0x1C]
  00be4	e3530000	 cmp         r3, #0
  00be8	0a000009	 beq         |$LN5@PhysicalAd|
  00bec	e59d301c	 ldr         r3, [sp, #0x1C]
  00bf0	e353005a	 cmp         r3, #0x5A
  00bf4	0a000023	 beq         |$LN4@PhysicalAd|
  00bf8	ea0000ae	 b           |$LN1@PhysicalAd|
  00bfc		 |$LN27@PhysicalAd|
  00bfc	e59d201c	 ldr         r2, [sp, #0x1C]
  00c00	e3a03c01	 mov         r3, #1, 24
  00c04	e383300e	 orr         r3, r3, #0xE
  00c08	e1520003	 cmp         r2, r3
  00c0c	0a000083	 beq         |$LN2@PhysicalAd|
  00c10	ea0000a8	 b           |$LN1@PhysicalAd|
  00c14		 |$LN5@PhysicalAd|

; 310  :         {
; 311  :             case OMAP_DSS_ROTATION_0:
; 312  :                 //  Compute clip offset
; 313  :                 dwClipOffsetX = m_rcClip.left;

  00c14	e59d3030	 ldr         r3, [sp, #0x30]
  00c18	e2833018	 add         r3, r3, #0x18
  00c1c	e5933000	 ldr         r3, [r3]
  00c20	e58d3004	 str         r3, [sp, #4]

; 314  :                 dwClipOffsetY = m_rcClip.top * m_dwActualWidth;

  00c24	e59d3030	 ldr         r3, [sp, #0x30]
  00c28	e283201c	 add         r2, r3, #0x1C
  00c2c	e59d3030	 ldr         r3, [sp, #0x30]
  00c30	e28330ac	 add         r3, r3, #0xAC
  00c34	e5922000	 ldr         r2, [r2]
  00c38	e5933000	 ldr         r3, [r3]
  00c3c	e0030392	 mul         r3, r2, r3
  00c40	e58d3008	 str         r3, [sp, #8]

; 315  : 
; 316  :                 //  Same as set physical address
; 317  :                 dwAddr = m_dwPhysicalAddr + dwClipOffsetX*m_dwPixelSize + dwClipOffsetY*m_dwPixelSize;

  00c44	e59d3030	 ldr         r3, [sp, #0x30]
  00c48	e28300a8	 add         r0, r3, #0xA8
  00c4c	e59d3030	 ldr         r3, [sp, #0x30]
  00c50	e2833008	 add         r3, r3, #8
  00c54	e59d1004	 ldr         r1, [sp, #4]
  00c58	e5933000	 ldr         r3, [r3]
  00c5c	e0020391	 mul         r2, r1, r3
  00c60	e5903000	 ldr         r3, [r0]
  00c64	e0831002	 add         r1, r3, r2
  00c68	e59d3030	 ldr         r3, [sp, #0x30]
  00c6c	e2833008	 add         r3, r3, #8
  00c70	e59d2008	 ldr         r2, [sp, #8]
  00c74	e5933000	 ldr         r3, [r3]
  00c78	e0030392	 mul         r3, r2, r3
  00c7c	e0813003	 add         r3, r1, r3
  00c80	e58d3000	 str         r3, [sp]

; 318  :                 break;

  00c84	ea00009b	 b           |$LN6@PhysicalAd|
  00c88		 |$LN4@PhysicalAd|

; 319  :                 
; 320  :             case OMAP_DSS_ROTATION_90:
; 321  :                 //  Compute clip offset
; 322  :                 dwClipOffsetX = m_dwWidth - m_rcClip.right;

  00c88	e59d3030	 ldr         r3, [sp, #0x30]
  00c8c	e2832010	 add         r2, r3, #0x10
  00c90	e59d3030	 ldr         r3, [sp, #0x30]
  00c94	e2833020	 add         r3, r3, #0x20
  00c98	e5922000	 ldr         r2, [r2]
  00c9c	e5933000	 ldr         r3, [r3]
  00ca0	e0423003	 sub         r3, r2, r3
  00ca4	e58d3004	 str         r3, [sp, #4]

; 323  :                 dwClipOffsetY = m_rcClip.top * m_dwActualWidth;

  00ca8	e59d3030	 ldr         r3, [sp, #0x30]
  00cac	e283201c	 add         r2, r3, #0x1C
  00cb0	e59d3030	 ldr         r3, [sp, #0x30]
  00cb4	e28330ac	 add         r3, r3, #0xAC
  00cb8	e5922000	 ldr         r2, [r2]
  00cbc	e5933000	 ldr         r3, [r3]
  00cc0	e0030392	 mul         r3, r2, r3
  00cc4	e58d3008	 str         r3, [sp, #8]

; 324  : 
; 325  :                 //  Offset to the upper right corner
; 326  :                 dwAddr = m_dwPhysicalAddr + (m_dwWidth - dwClipOffsetX - 1)*m_dwPixelSize + dwClipOffsetY*m_dwPixelSize;

  00cc8	e59d3030	 ldr         r3, [sp, #0x30]
  00ccc	e28300a8	 add         r0, r3, #0xA8
  00cd0	e59d3030	 ldr         r3, [sp, #0x30]
  00cd4	e2833010	 add         r3, r3, #0x10
  00cd8	e5932000	 ldr         r2, [r3]
  00cdc	e59d3004	 ldr         r3, [sp, #4]
  00ce0	e0423003	 sub         r3, r2, r3
  00ce4	e2431001	 sub         r1, r3, #1
  00ce8	e59d3030	 ldr         r3, [sp, #0x30]
  00cec	e2833008	 add         r3, r3, #8
  00cf0	e5933000	 ldr         r3, [r3]
  00cf4	e0020391	 mul         r2, r1, r3
  00cf8	e5903000	 ldr         r3, [r0]
  00cfc	e0831002	 add         r1, r3, r2
  00d00	e59d3030	 ldr         r3, [sp, #0x30]
  00d04	e2833008	 add         r3, r3, #8
  00d08	e59d2008	 ldr         r2, [sp, #8]
  00d0c	e5933000	 ldr         r3, [r3]
  00d10	e0030392	 mul         r3, r2, r3
  00d14	e0813003	 add         r3, r1, r3
  00d18	e58d3000	 str         r3, [sp]

; 327  :                 break;

  00d1c	ea000075	 b           |$LN6@PhysicalAd|
  00d20		 |$LN3@PhysicalAd|

; 328  : 
; 329  :             case OMAP_DSS_ROTATION_180:
; 330  :                 //  Compute clip offset
; 331  :                 dwClipOffsetX = m_dwWidth - m_rcClip.right;

  00d20	e59d3030	 ldr         r3, [sp, #0x30]
  00d24	e2832010	 add         r2, r3, #0x10
  00d28	e59d3030	 ldr         r3, [sp, #0x30]
  00d2c	e2833020	 add         r3, r3, #0x20
  00d30	e5922000	 ldr         r2, [r2]
  00d34	e5933000	 ldr         r3, [r3]
  00d38	e0423003	 sub         r3, r2, r3
  00d3c	e58d3004	 str         r3, [sp, #4]

; 332  :                 dwClipOffsetY = (m_dwHeight - m_rcClip.bottom)*m_dwActualWidth;

  00d40	e59d3030	 ldr         r3, [sp, #0x30]
  00d44	e2832014	 add         r2, r3, #0x14
  00d48	e59d3030	 ldr         r3, [sp, #0x30]
  00d4c	e2833024	 add         r3, r3, #0x24
  00d50	e5922000	 ldr         r2, [r2]
  00d54	e5933000	 ldr         r3, [r3]
  00d58	e0422003	 sub         r2, r2, r3
  00d5c	e59d3030	 ldr         r3, [sp, #0x30]
  00d60	e28330ac	 add         r3, r3, #0xAC
  00d64	e5933000	 ldr         r3, [r3]
  00d68	e0030392	 mul         r3, r2, r3
  00d6c	e58d3008	 str         r3, [sp, #8]

; 333  : 
; 334  :                 //  Offset to the lower right corner
; 335  :                 dwAddr = m_dwPhysicalAddr + (m_dwActualWidth * m_dwHeight - 1)*m_dwPixelSize - (m_dwActualWidth - m_dwWidth)*m_dwPixelSize;

  00d70	e59d3030	 ldr         r3, [sp, #0x30]
  00d74	e28300a8	 add         r0, r3, #0xA8
  00d78	e59d3030	 ldr         r3, [sp, #0x30]
  00d7c	e28320ac	 add         r2, r3, #0xAC
  00d80	e59d3030	 ldr         r3, [sp, #0x30]
  00d84	e2833014	 add         r3, r3, #0x14
  00d88	e5922000	 ldr         r2, [r2]
  00d8c	e5933000	 ldr         r3, [r3]
  00d90	e0030392	 mul         r3, r2, r3
  00d94	e2431001	 sub         r1, r3, #1
  00d98	e59d3030	 ldr         r3, [sp, #0x30]
  00d9c	e2833008	 add         r3, r3, #8
  00da0	e5933000	 ldr         r3, [r3]
  00da4	e0020391	 mul         r2, r1, r3
  00da8	e5903000	 ldr         r3, [r0]
  00dac	e0831002	 add         r1, r3, r2
  00db0	e59d3030	 ldr         r3, [sp, #0x30]
  00db4	e28320ac	 add         r2, r3, #0xAC
  00db8	e59d3030	 ldr         r3, [sp, #0x30]
  00dbc	e2833010	 add         r3, r3, #0x10
  00dc0	e5922000	 ldr         r2, [r2]
  00dc4	e5933000	 ldr         r3, [r3]
  00dc8	e0422003	 sub         r2, r2, r3
  00dcc	e59d3030	 ldr         r3, [sp, #0x30]
  00dd0	e2833008	 add         r3, r3, #8
  00dd4	e5933000	 ldr         r3, [r3]
  00dd8	e0030392	 mul         r3, r2, r3
  00ddc	e0413003	 sub         r3, r1, r3
  00de0	e58d3000	 str         r3, [sp]

; 336  :                 dwAddr = dwAddr - dwClipOffsetX*m_dwPixelSize - dwClipOffsetY*m_dwPixelSize;

  00de4	e59d3030	 ldr         r3, [sp, #0x30]
  00de8	e2833008	 add         r3, r3, #8
  00dec	e59d1004	 ldr         r1, [sp, #4]
  00df0	e5933000	 ldr         r3, [r3]
  00df4	e0020391	 mul         r2, r1, r3
  00df8	e59d3000	 ldr         r3, [sp]
  00dfc	e0431002	 sub         r1, r3, r2
  00e00	e59d3030	 ldr         r3, [sp, #0x30]
  00e04	e2833008	 add         r3, r3, #8
  00e08	e59d2008	 ldr         r2, [sp, #8]
  00e0c	e5933000	 ldr         r3, [r3]
  00e10	e0030392	 mul         r3, r2, r3
  00e14	e0413003	 sub         r3, r1, r3
  00e18	e58d3000	 str         r3, [sp]

; 337  :                 break;

  00e1c	ea000035	 b           |$LN6@PhysicalAd|
  00e20		 |$LN2@PhysicalAd|

; 338  : 
; 339  :             case OMAP_DSS_ROTATION_270:
; 340  :                 //  Compute clip offset
; 341  :                 dwClipOffsetX = m_rcClip.left;

  00e20	e59d3030	 ldr         r3, [sp, #0x30]
  00e24	e2833018	 add         r3, r3, #0x18
  00e28	e5933000	 ldr         r3, [r3]
  00e2c	e58d3004	 str         r3, [sp, #4]

; 342  :                 dwClipOffsetY = m_dwHeight - m_rcClip.bottom;

  00e30	e59d3030	 ldr         r3, [sp, #0x30]
  00e34	e2832014	 add         r2, r3, #0x14
  00e38	e59d3030	 ldr         r3, [sp, #0x30]
  00e3c	e2833024	 add         r3, r3, #0x24
  00e40	e5922000	 ldr         r2, [r2]
  00e44	e5933000	 ldr         r3, [r3]
  00e48	e0423003	 sub         r3, r2, r3
  00e4c	e58d3008	 str         r3, [sp, #8]

; 343  : 
; 344  :                 //  Offset to the lower left corner
; 345  :                 dwAddr = m_dwPhysicalAddr + (m_dwActualWidth * (m_dwHeight - dwClipOffsetY - 1))*m_dwPixelSize + dwClipOffsetX*m_dwPixelSize;

  00e50	e59d3030	 ldr         r3, [sp, #0x30]
  00e54	e28300a8	 add         r0, r3, #0xA8
  00e58	e59d3030	 ldr         r3, [sp, #0x30]
  00e5c	e28310ac	 add         r1, r3, #0xAC
  00e60	e59d3030	 ldr         r3, [sp, #0x30]
  00e64	e2833014	 add         r3, r3, #0x14
  00e68	e5932000	 ldr         r2, [r3]
  00e6c	e59d3008	 ldr         r3, [sp, #8]
  00e70	e0423003	 sub         r3, r2, r3
  00e74	e2432001	 sub         r2, r3, #1
  00e78	e5913000	 ldr         r3, [r1]
  00e7c	e0010293	 mul         r1, r3, r2
  00e80	e59d3030	 ldr         r3, [sp, #0x30]
  00e84	e2833008	 add         r3, r3, #8
  00e88	e5933000	 ldr         r3, [r3]
  00e8c	e0020391	 mul         r2, r1, r3
  00e90	e5903000	 ldr         r3, [r0]
  00e94	e0831002	 add         r1, r3, r2
  00e98	e59d3030	 ldr         r3, [sp, #0x30]
  00e9c	e2833008	 add         r3, r3, #8
  00ea0	e59d2004	 ldr         r2, [sp, #4]
  00ea4	e5933000	 ldr         r3, [r3]
  00ea8	e0030392	 mul         r3, r2, r3
  00eac	e0813003	 add         r3, r1, r3
  00eb0	e58d3000	 str         r3, [sp]

; 346  :                 break;

  00eb4	ea00000f	 b           |$LN6@PhysicalAd|
  00eb8		 |$LN1@PhysicalAd|

; 347  : 
; 348  :             default:
; 349  :                 ASSERT(0);

  00eb8	ea000002	 b           |$LN25@PhysicalAd|
  00ebc	e3a03001	 mov         r3, #1
  00ec0	e58d3020	 str         r3, [sp, #0x20]
  00ec4	ea000008	 b           |$LN26@PhysicalAd|
  00ec8		 |$LN25@PhysicalAd|
  00ec8	e3a03c01	 mov         r3, #1, 24
  00ecc	e383305d	 orr         r3, r3, #0x5D
  00ed0	e59f2040	 ldr         r2, [pc, #0x40]
  00ed4	e59f1038	 ldr         r1, [pc, #0x38]
  00ed8	e59f0030	 ldr         r0, [pc, #0x30]
  00edc	eb000000	 bl          NKDbgPrintfW
  00ee0	e6000010	 __debugbreak_ce
  00ee4	e3a03000	 mov         r3, #0
  00ee8	e58d3020	 str         r3, [sp, #0x20]
  00eec		 |$LN26@PhysicalAd|

; 350  :                 return 0;

  00eec	e3a03000	 mov         r3, #0
  00ef0	e58d300c	 str         r3, [sp, #0xC]
  00ef4	ea000001	 b           |$LN20@PhysicalAd|
  00ef8		 |$LN6@PhysicalAd|
  00ef8		 |$LN8@PhysicalAd|

; 351  :         }
; 352  :     }
; 353  :         
; 354  :     //  Return address
; 355  :     return dwAddr;

  00ef8	e59d3000	 ldr         r3, [sp]
  00efc	e58d300c	 str         r3, [sp, #0xC]
  00f00		 |$LN20@PhysicalAd|

; 356  : }

  00f00	e59d000c	 ldr         r0, [sp, #0xC]
  00f04	e28dd024	 add         sp, sp, #0x24
  00f08	e89d6010	 ldmia       sp, {r4, sp, lr}
  00f0c	e12fff1e	 bx          lr
  00f10		 |$LN31@PhysicalAd|
  00f10		 |$LN32@PhysicalAd|
  00f10	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  00f14		 |$LN33@PhysicalAd|
  00f14	00000000	 DCD         |??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@|
  00f18		 |$LN34@PhysicalAd|
  00f18	00000000	 DCD         |??_C@_1LA@BBFDAFHA@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  00f1c		 |$M37342|

			 ENDP  ; |?PhysicalAddr@OMAPFlatSurface@@UAAKW4OMAP_DSS_ROTATION@@HW4OMAP_ASSOC_SURF_USAGE@@@Z|, OMAPFlatSurface::PhysicalAddr


  00040			 AREA	 |.pdata|, PDATA
|$T37360| DCD	|$LN27@PixelIncr|
	DCD	0x40012104
; Function compile flags: /Odtp

  00f1c			 AREA	 |.text|, CODE, ARM

  00f1c		 |?PixelIncr@OMAPFlatSurface@@UAAKW4OMAP_DSS_ROTATION@@H@Z| PROC ; OMAPFlatSurface::PixelIncr

; 364  : {

  00f1c		 |$LN27@PixelIncr|
  00f1c	e1a0c00d	 mov         r12, sp
  00f20	e92d0007	 stmdb       sp!, {r0 - r2}
  00f24	e92d5000	 stmdb       sp!, {r12, lr}
  00f28	e24dd018	 sub         sp, sp, #0x18
  00f2c		 |$M37357|

; 365  :     DWORD   dwIncr;
; 366  :    
; 367  :     if( bMirror )

  00f2c	e59d3028	 ldr         r3, [sp, #0x28]
  00f30	e3530000	 cmp         r3, #0
  00f34	0a000088	 beq         |$LN16@PixelIncr|

; 368  :     {
; 369  :         //  Compute the pixel increment for DMA based rotation (mirrored)
; 370  :         switch( eRotation )

  00f38	e59d3024	 ldr         r3, [sp, #0x24]
  00f3c	e58d3008	 str         r3, [sp, #8]
  00f40	e59d3008	 ldr         r3, [sp, #8]
  00f44	e35300b4	 cmp         r3, #0xB4
  00f48	ca000009	 bgt         |$LN21@PixelIncr|
  00f4c	e59d3008	 ldr         r3, [sp, #8]
  00f50	e35300b4	 cmp         r3, #0xB4
  00f54	0a000040	 beq         |$LN11@PixelIncr|
  00f58	e59d3008	 ldr         r3, [sp, #8]
  00f5c	e3530000	 cmp         r3, #0
  00f60	0a000009	 beq         |$LN13@PixelIncr|
  00f64	e59d3008	 ldr         r3, [sp, #8]
  00f68	e353005a	 cmp         r3, #0x5A
  00f6c	0a00001d	 beq         |$LN12@PixelIncr|
  00f70	ea000068	 b           |$LN9@PixelIncr|
  00f74		 |$LN21@PixelIncr|
  00f74	e59d2008	 ldr         r2, [sp, #8]
  00f78	e3a03c01	 mov         r3, #1, 24
  00f7c	e383300e	 orr         r3, r3, #0xE
  00f80	e1520003	 cmp         r2, r3
  00f84	0a000046	 beq         |$LN10@PixelIncr|
  00f88	ea000062	 b           |$LN9@PixelIncr|
  00f8c		 |$LN13@PixelIncr|

; 371  :         {
; 372  :             case OMAP_DSS_ROTATION_0:
; 373  :                 //  Backward 1 pixel (- horizontal_scale_factor*pixel_size)
; 374  :                 dwIncr = 1 - 2 * m_dwPixelSize;

  00f8c	e59d3020	 ldr         r3, [sp, #0x20]
  00f90	e2833008	 add         r3, r3, #8
  00f94	e5932000	 ldr         r2, [r3]
  00f98	e3a03002	 mov         r3, #2
  00f9c	e0030392	 mul         r3, r2, r3
  00fa0	e2633001	 rsb         r3, r3, #1
  00fa4	e58d3000	 str         r3, [sp]

; 375  :                 dwIncr -= ((m_dwHorizScale - 1) * m_dwPixelSize * m_dwWidthFactor);

  00fa8	e59d3020	 ldr         r3, [sp, #0x20]
  00fac	e2833028	 add         r3, r3, #0x28
  00fb0	e5933000	 ldr         r3, [r3]
  00fb4	e2432001	 sub         r2, r3, #1
  00fb8	e59d3020	 ldr         r3, [sp, #0x20]
  00fbc	e2833008	 add         r3, r3, #8
  00fc0	e5933000	 ldr         r3, [r3]
  00fc4	e0010392	 mul         r1, r2, r3
  00fc8	e59d3020	 ldr         r3, [sp, #0x20]
  00fcc	e28330b4	 add         r3, r3, #0xB4
  00fd0	e5933000	 ldr         r3, [r3]
  00fd4	e0020391	 mul         r2, r1, r3
  00fd8	e59d3000	 ldr         r3, [sp]
  00fdc	e0433002	 sub         r3, r3, r2
  00fe0	e58d3000	 str         r3, [sp]

; 376  :                 break;

  00fe4	ea00005b	 b           |$LN14@PixelIncr|
  00fe8		 |$LN12@PixelIncr|

; 377  :                 
; 378  :             case OMAP_DSS_ROTATION_90:
; 379  :                 //  Forward 1 row - 1 pixel (+ vertical_scale_factor*stride)
; 380  :                 dwIncr = 1 + m_dwActualWidth * m_dwPixelSize - m_dwPixelSize;

  00fe8	e59d3020	 ldr         r3, [sp, #0x20]
  00fec	e28320ac	 add         r2, r3, #0xAC
  00ff0	e59d3020	 ldr         r3, [sp, #0x20]
  00ff4	e2833008	 add         r3, r3, #8
  00ff8	e5922000	 ldr         r2, [r2]
  00ffc	e5933000	 ldr         r3, [r3]
  01000	e0030392	 mul         r3, r2, r3
  01004	e2832001	 add         r2, r3, #1
  01008	e59d3020	 ldr         r3, [sp, #0x20]
  0100c	e2833008	 add         r3, r3, #8
  01010	e5933000	 ldr         r3, [r3]
  01014	e0423003	 sub         r3, r2, r3
  01018	e58d3000	 str         r3, [sp]

; 381  :                 dwIncr += ((m_dwVertScale - 1) * m_dwActualWidth * m_dwPixelSize);

  0101c	e59d3020	 ldr         r3, [sp, #0x20]
  01020	e283302c	 add         r3, r3, #0x2C
  01024	e5933000	 ldr         r3, [r3]
  01028	e2432001	 sub         r2, r3, #1
  0102c	e59d3020	 ldr         r3, [sp, #0x20]
  01030	e28330ac	 add         r3, r3, #0xAC
  01034	e5933000	 ldr         r3, [r3]
  01038	e0010392	 mul         r1, r2, r3
  0103c	e59d3020	 ldr         r3, [sp, #0x20]
  01040	e2833008	 add         r3, r3, #8
  01044	e5933000	 ldr         r3, [r3]
  01048	e0020391	 mul         r2, r1, r3
  0104c	e59d3000	 ldr         r3, [sp]
  01050	e0833002	 add         r3, r3, r2
  01054	e58d3000	 str         r3, [sp]

; 382  :                 break;

  01058	ea00003e	 b           |$LN14@PixelIncr|
  0105c		 |$LN11@PixelIncr|

; 383  : 
; 384  :             case OMAP_DSS_ROTATION_180:
; 385  :                 //  Forward 1 pixel (+ horizontal_scale_factor*pixel_size)
; 386  :                 dwIncr = 1;

  0105c	e3a03001	 mov         r3, #1
  01060	e58d3000	 str         r3, [sp]

; 387  :                 dwIncr += ((m_dwHorizScale - 1) * m_dwPixelSize * m_dwWidthFactor);

  01064	e59d3020	 ldr         r3, [sp, #0x20]
  01068	e2833028	 add         r3, r3, #0x28
  0106c	e5933000	 ldr         r3, [r3]
  01070	e2432001	 sub         r2, r3, #1
  01074	e59d3020	 ldr         r3, [sp, #0x20]
  01078	e2833008	 add         r3, r3, #8
  0107c	e5933000	 ldr         r3, [r3]
  01080	e0010392	 mul         r1, r2, r3
  01084	e59d3020	 ldr         r3, [sp, #0x20]
  01088	e28330b4	 add         r3, r3, #0xB4
  0108c	e5933000	 ldr         r3, [r3]
  01090	e0020391	 mul         r2, r1, r3
  01094	e59d3000	 ldr         r3, [sp]
  01098	e0833002	 add         r3, r3, r2
  0109c	e58d3000	 str         r3, [sp]

; 388  :                 break;

  010a0	ea00002c	 b           |$LN14@PixelIncr|
  010a4		 |$LN10@PixelIncr|

; 389  : 
; 390  :             case OMAP_DSS_ROTATION_270:
; 391  :                 //  Backward 1 row and 1 pixel (- vertical_scale_factor*stride)
; 392  :                 dwIncr = 1 - m_dwActualWidth * m_dwPixelSize - m_dwPixelSize;

  010a4	e59d3020	 ldr         r3, [sp, #0x20]
  010a8	e28320ac	 add         r2, r3, #0xAC
  010ac	e59d3020	 ldr         r3, [sp, #0x20]
  010b0	e2833008	 add         r3, r3, #8
  010b4	e5922000	 ldr         r2, [r2]
  010b8	e5933000	 ldr         r3, [r3]
  010bc	e0030392	 mul         r3, r2, r3
  010c0	e2632001	 rsb         r2, r3, #1
  010c4	e59d3020	 ldr         r3, [sp, #0x20]
  010c8	e2833008	 add         r3, r3, #8
  010cc	e5933000	 ldr         r3, [r3]
  010d0	e0423003	 sub         r3, r2, r3
  010d4	e58d3000	 str         r3, [sp]

; 393  :                 dwIncr -= ((m_dwVertScale - 1) * m_dwActualWidth * m_dwPixelSize);

  010d8	e59d3020	 ldr         r3, [sp, #0x20]
  010dc	e283302c	 add         r3, r3, #0x2C
  010e0	e5933000	 ldr         r3, [r3]
  010e4	e2432001	 sub         r2, r3, #1
  010e8	e59d3020	 ldr         r3, [sp, #0x20]
  010ec	e28330ac	 add         r3, r3, #0xAC
  010f0	e5933000	 ldr         r3, [r3]
  010f4	e0010392	 mul         r1, r2, r3
  010f8	e59d3020	 ldr         r3, [sp, #0x20]
  010fc	e2833008	 add         r3, r3, #8
  01100	e5933000	 ldr         r3, [r3]
  01104	e0020391	 mul         r2, r1, r3
  01108	e59d3000	 ldr         r3, [sp]
  0110c	e0433002	 sub         r3, r3, r2
  01110	e58d3000	 str         r3, [sp]

; 394  :                 break;

  01114	ea00000f	 b           |$LN14@PixelIncr|
  01118		 |$LN9@PixelIncr|

; 395  : 
; 396  :             default:
; 397  :                 ASSERT(0);

  01118	ea000002	 b           |$LN19@PixelIncr|
  0111c	e3a03001	 mov         r3, #1
  01120	e58d300c	 str         r3, [sp, #0xC]
  01124	ea000008	 b           |$LN20@PixelIncr|
  01128		 |$LN19@PixelIncr|
  01128	e3a03c01	 mov         r3, #1, 24
  0112c	e383308d	 orr         r3, r3, #0x8D
  01130	e59f2264	 ldr         r2, [pc, #0x264]
  01134	e59f125c	 ldr         r1, [pc, #0x25C]
  01138	e59f0254	 ldr         r0, [pc, #0x254]
  0113c	eb000000	 bl          NKDbgPrintfW
  01140	e6000010	 __debugbreak_ce
  01144	e3a03000	 mov         r3, #0
  01148	e58d300c	 str         r3, [sp, #0xC]
  0114c		 |$LN20@PixelIncr|

; 398  :                 return 0;

  0114c	e3a03000	 mov         r3, #0
  01150	e58d3004	 str         r3, [sp, #4]
  01154	ea00008a	 b           |$LN17@PixelIncr|
  01158		 |$LN14@PixelIncr|

; 399  :         }
; 400  :     }
; 401  :     else

  01158	ea000087	 b           |$LN8@PixelIncr|
  0115c		 |$LN16@PixelIncr|

; 402  :     {
; 403  :         //  Compute the pixel increment for DMA based rotation (non-mirrored)
; 404  :         switch( eRotation )

  0115c	e59d3024	 ldr         r3, [sp, #0x24]
  01160	e58d3010	 str         r3, [sp, #0x10]
  01164	e59d3010	 ldr         r3, [sp, #0x10]
  01168	e35300b4	 cmp         r3, #0xB4
  0116c	ca000009	 bgt         |$LN24@PixelIncr|
  01170	e59d3010	 ldr         r3, [sp, #0x10]
  01174	e35300b4	 cmp         r3, #0xB4
  01178	0a00003b	 beq         |$LN3@PixelIncr|
  0117c	e59d3010	 ldr         r3, [sp, #0x10]
  01180	e3530000	 cmp         r3, #0
  01184	0a000009	 beq         |$LN5@PixelIncr|
  01188	e59d3010	 ldr         r3, [sp, #0x10]
  0118c	e353005a	 cmp         r3, #0x5A
  01190	0a000018	 beq         |$LN4@PixelIncr|
  01194	ea000068	 b           |$LN1@PixelIncr|
  01198		 |$LN24@PixelIncr|
  01198	e59d2010	 ldr         r2, [sp, #0x10]
  0119c	e3a03c01	 mov         r3, #1, 24
  011a0	e383300e	 orr         r3, r3, #0xE
  011a4	e1520003	 cmp         r2, r3
  011a8	0a000046	 beq         |$LN2@PixelIncr|
  011ac	ea000062	 b           |$LN1@PixelIncr|
  011b0		 |$LN5@PixelIncr|

; 405  :         {
; 406  :             case OMAP_DSS_ROTATION_0:
; 407  :                 //  Forward 1 pixel (+ horizontal_scale_factor*pixel_size)
; 408  :                 dwIncr = 1;

  011b0	e3a03001	 mov         r3, #1
  011b4	e58d3000	 str         r3, [sp]

; 409  :                 dwIncr += ((m_dwHorizScale - 1) * m_dwPixelSize * m_dwWidthFactor);

  011b8	e59d3020	 ldr         r3, [sp, #0x20]
  011bc	e2833028	 add         r3, r3, #0x28
  011c0	e5933000	 ldr         r3, [r3]
  011c4	e2432001	 sub         r2, r3, #1
  011c8	e59d3020	 ldr         r3, [sp, #0x20]
  011cc	e2833008	 add         r3, r3, #8
  011d0	e5933000	 ldr         r3, [r3]
  011d4	e0010392	 mul         r1, r2, r3
  011d8	e59d3020	 ldr         r3, [sp, #0x20]
  011dc	e28330b4	 add         r3, r3, #0xB4
  011e0	e5933000	 ldr         r3, [r3]
  011e4	e0020391	 mul         r2, r1, r3
  011e8	e59d3000	 ldr         r3, [sp]
  011ec	e0833002	 add         r3, r3, r2
  011f0	e58d3000	 str         r3, [sp]

; 410  :                 break;

  011f4	ea000060	 b           |$LN6@PixelIncr|
  011f8		 |$LN4@PixelIncr|

; 411  :                 
; 412  :             case OMAP_DSS_ROTATION_90:
; 413  :                 //  Forward 1 row - 1 pixel (+ vertical_scale_factor*stride)
; 414  :                 dwIncr = 1 + m_dwActualWidth * m_dwPixelSize - m_dwPixelSize;

  011f8	e59d3020	 ldr         r3, [sp, #0x20]
  011fc	e28320ac	 add         r2, r3, #0xAC
  01200	e59d3020	 ldr         r3, [sp, #0x20]
  01204	e2833008	 add         r3, r3, #8
  01208	e5922000	 ldr         r2, [r2]
  0120c	e5933000	 ldr         r3, [r3]
  01210	e0030392	 mul         r3, r2, r3
  01214	e2832001	 add         r2, r3, #1
  01218	e59d3020	 ldr         r3, [sp, #0x20]
  0121c	e2833008	 add         r3, r3, #8
  01220	e5933000	 ldr         r3, [r3]
  01224	e0423003	 sub         r3, r2, r3
  01228	e58d3000	 str         r3, [sp]

; 415  :                 dwIncr += ((m_dwVertScale - 1) * m_dwActualWidth * m_dwPixelSize);

  0122c	e59d3020	 ldr         r3, [sp, #0x20]
  01230	e283302c	 add         r3, r3, #0x2C
  01234	e5933000	 ldr         r3, [r3]
  01238	e2432001	 sub         r2, r3, #1
  0123c	e59d3020	 ldr         r3, [sp, #0x20]
  01240	e28330ac	 add         r3, r3, #0xAC
  01244	e5933000	 ldr         r3, [r3]
  01248	e0010392	 mul         r1, r2, r3
  0124c	e59d3020	 ldr         r3, [sp, #0x20]
  01250	e2833008	 add         r3, r3, #8
  01254	e5933000	 ldr         r3, [r3]
  01258	e0020391	 mul         r2, r1, r3
  0125c	e59d3000	 ldr         r3, [sp]
  01260	e0833002	 add         r3, r3, r2
  01264	e58d3000	 str         r3, [sp]

; 416  :                 break;

  01268	ea000043	 b           |$LN6@PixelIncr|
  0126c		 |$LN3@PixelIncr|

; 417  : 
; 418  :             case OMAP_DSS_ROTATION_180:
; 419  :                 //  Backward 1 pixel (- horizontal_scale_factor*pixel_size)
; 420  :                 dwIncr = 1 - 2 * m_dwPixelSize;

  0126c	e59d3020	 ldr         r3, [sp, #0x20]
  01270	e2833008	 add         r3, r3, #8
  01274	e5932000	 ldr         r2, [r3]
  01278	e3a03002	 mov         r3, #2
  0127c	e0030392	 mul         r3, r2, r3
  01280	e2633001	 rsb         r3, r3, #1
  01284	e58d3000	 str         r3, [sp]

; 421  :                 dwIncr -= ((m_dwHorizScale - 1) * m_dwPixelSize * m_dwWidthFactor);

  01288	e59d3020	 ldr         r3, [sp, #0x20]
  0128c	e2833028	 add         r3, r3, #0x28
  01290	e5933000	 ldr         r3, [r3]
  01294	e2432001	 sub         r2, r3, #1
  01298	e59d3020	 ldr         r3, [sp, #0x20]
  0129c	e2833008	 add         r3, r3, #8
  012a0	e5933000	 ldr         r3, [r3]
  012a4	e0010392	 mul         r1, r2, r3
  012a8	e59d3020	 ldr         r3, [sp, #0x20]
  012ac	e28330b4	 add         r3, r3, #0xB4
  012b0	e5933000	 ldr         r3, [r3]
  012b4	e0020391	 mul         r2, r1, r3
  012b8	e59d3000	 ldr         r3, [sp]
  012bc	e0433002	 sub         r3, r3, r2
  012c0	e58d3000	 str         r3, [sp]

; 422  :                 break;

  012c4	ea00002c	 b           |$LN6@PixelIncr|
  012c8		 |$LN2@PixelIncr|

; 423  : 
; 424  :             case OMAP_DSS_ROTATION_270:
; 425  :                 //  Backward 1 row and 1 pixel (- vertical_scale_factor*stride)
; 426  :                 dwIncr = 1 - m_dwActualWidth * m_dwPixelSize - m_dwPixelSize;

  012c8	e59d3020	 ldr         r3, [sp, #0x20]
  012cc	e28320ac	 add         r2, r3, #0xAC
  012d0	e59d3020	 ldr         r3, [sp, #0x20]
  012d4	e2833008	 add         r3, r3, #8
  012d8	e5922000	 ldr         r2, [r2]
  012dc	e5933000	 ldr         r3, [r3]
  012e0	e0030392	 mul         r3, r2, r3
  012e4	e2632001	 rsb         r2, r3, #1
  012e8	e59d3020	 ldr         r3, [sp, #0x20]
  012ec	e2833008	 add         r3, r3, #8
  012f0	e5933000	 ldr         r3, [r3]
  012f4	e0423003	 sub         r3, r2, r3
  012f8	e58d3000	 str         r3, [sp]

; 427  :                 dwIncr -= ((m_dwVertScale - 1) * m_dwActualWidth * m_dwPixelSize);

  012fc	e59d3020	 ldr         r3, [sp, #0x20]
  01300	e283302c	 add         r3, r3, #0x2C
  01304	e5933000	 ldr         r3, [r3]
  01308	e2432001	 sub         r2, r3, #1
  0130c	e59d3020	 ldr         r3, [sp, #0x20]
  01310	e28330ac	 add         r3, r3, #0xAC
  01314	e5933000	 ldr         r3, [r3]
  01318	e0010392	 mul         r1, r2, r3
  0131c	e59d3020	 ldr         r3, [sp, #0x20]
  01320	e2833008	 add         r3, r3, #8
  01324	e5933000	 ldr         r3, [r3]
  01328	e0020391	 mul         r2, r1, r3
  0132c	e59d3000	 ldr         r3, [sp]
  01330	e0433002	 sub         r3, r3, r2
  01334	e58d3000	 str         r3, [sp]

; 428  :                 break;

  01338	ea00000f	 b           |$LN6@PixelIncr|
  0133c		 |$LN1@PixelIncr|

; 429  : 
; 430  :             default:
; 431  :                 ASSERT(0);

  0133c	ea000002	 b           |$LN22@PixelIncr|
  01340	e3a03001	 mov         r3, #1
  01344	e58d3014	 str         r3, [sp, #0x14]
  01348	ea000008	 b           |$LN23@PixelIncr|
  0134c		 |$LN22@PixelIncr|
  0134c	e3a03c01	 mov         r3, #1, 24
  01350	e38330af	 orr         r3, r3, #0xAF
  01354	e59f2040	 ldr         r2, [pc, #0x40]
  01358	e59f1038	 ldr         r1, [pc, #0x38]
  0135c	e59f0030	 ldr         r0, [pc, #0x30]
  01360	eb000000	 bl          NKDbgPrintfW
  01364	e6000010	 __debugbreak_ce
  01368	e3a03000	 mov         r3, #0
  0136c	e58d3014	 str         r3, [sp, #0x14]
  01370		 |$LN23@PixelIncr|

; 432  :                 return 0;

  01370	e3a03000	 mov         r3, #0
  01374	e58d3004	 str         r3, [sp, #4]
  01378	ea000001	 b           |$LN17@PixelIncr|
  0137c		 |$LN6@PixelIncr|
  0137c		 |$LN8@PixelIncr|

; 433  :         }
; 434  :     }
; 435  :         
; 436  :     //  Return increment
; 437  :     return dwIncr;

  0137c	e59d3000	 ldr         r3, [sp]
  01380	e58d3004	 str         r3, [sp, #4]
  01384		 |$LN17@PixelIncr|

; 438  : }

  01384	e59d0004	 ldr         r0, [sp, #4]
  01388	e28dd018	 add         sp, sp, #0x18
  0138c	e89d6000	 ldmia       sp, {sp, lr}
  01390	e12fff1e	 bx          lr
  01394		 |$LN28@PixelIncr|
  01394		 |$LN29@PixelIncr|
  01394	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  01398		 |$LN30@PixelIncr|
  01398	00000000	 DCD         |??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@|
  0139c		 |$LN31@PixelIncr|
  0139c	00000000	 DCD         |??_C@_1LA@BBFDAFHA@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  013a0		 |$M37358|

			 ENDP  ; |?PixelIncr@OMAPFlatSurface@@UAAKW4OMAP_DSS_ROTATION@@H@Z|, OMAPFlatSurface::PixelIncr


  00048			 AREA	 |.pdata|, PDATA
|$T37376| DCD	|$LN28@RowIncr|
	DCD	0x4002b304
; Function compile flags: /Odtp

  013a0			 AREA	 |.text|, CODE, ARM

  013a0		 |?RowIncr@OMAPFlatSurface@@UAAKW4OMAP_DSS_ROTATION@@H@Z| PROC ; OMAPFlatSurface::RowIncr

; 446  : {

  013a0		 |$LN28@RowIncr|
  013a0	e1a0c00d	 mov         r12, sp
  013a4	e92d0007	 stmdb       sp!, {r0 - r2}
  013a8	e92d5000	 stmdb       sp!, {r12, lr}
  013ac	e24dd024	 sub         sp, sp, #0x24
  013b0		 |$M37373|

; 447  :     DWORD   dwIncr;
; 448  :     DWORD   dwClipOffsetX,
; 449  :             dwClipOffsetY;
; 450  : 
; 451  :     if ((m_bUseResizer) && (m_eSurfaceType == OMAP_SURFACE_NORMAL) && (m_pAssocSurface))

  013b0	e59d302c	 ldr         r3, [sp, #0x2C]
  013b4	e2833030	 add         r3, r3, #0x30
  013b8	e5933000	 ldr         r3, [r3]
  013bc	e3530000	 cmp         r3, #0
  013c0	0a00001a	 beq         |$LN17@RowIncr|
  013c4	e59d302c	 ldr         r3, [sp, #0x2C]
  013c8	e283309c	 add         r3, r3, #0x9C
  013cc	e5933000	 ldr         r3, [r3]
  013d0	e3530000	 cmp         r3, #0
  013d4	1a000015	 bne         |$LN17@RowIncr|
  013d8	e59d302c	 ldr         r3, [sp, #0x2C]
  013dc	e28330a0	 add         r3, r3, #0xA0
  013e0	e5933000	 ldr         r3, [r3]
  013e4	e3530000	 cmp         r3, #0
  013e8	0a000010	 beq         |$LN17@RowIncr|

; 452  :         return m_pAssocSurface->RowIncr(eRotation,bMirror);

  013ec	e59d2034	 ldr         r2, [sp, #0x34]
  013f0	e59d1030	 ldr         r1, [sp, #0x30]
  013f4	e59d302c	 ldr         r3, [sp, #0x2C]
  013f8	e28330a0	 add         r3, r3, #0xA0
  013fc	e593e000	 ldr         lr, [r3]
  01400	e59d302c	 ldr         r3, [sp, #0x2C]
  01404	e28330a0	 add         r3, r3, #0xA0
  01408	e5930000	 ldr         r0, [r3]
  0140c	e59e3000	 ldr         r3, [lr]
  01410	e283301c	 add         r3, r3, #0x1C
  01414	e5933000	 ldr         r3, [r3]
  01418	e1a0e00f	 mov         lr, pc
  0141c	e12fff13	 bx          r3
  01420	e58d0010	 str         r0, [sp, #0x10]
  01424	e59d3010	 ldr         r3, [sp, #0x10]
  01428	e58d300c	 str         r3, [sp, #0xC]
  0142c	ea000287	 b           |$LN18@RowIncr|
  01430		 |$LN17@RowIncr|

; 453  :     
; 454  :     if( bMirror )

  01430	e59d3034	 ldr         r3, [sp, #0x34]
  01434	e3530000	 cmp         r3, #0
  01438	0a000145	 beq         |$LN16@RowIncr|

; 455  :     {
; 456  :         //  Compute the row increment for DMA based rotation (mirrored)
; 457  :         switch( eRotation )

  0143c	e59d3030	 ldr         r3, [sp, #0x30]
  01440	e58d3014	 str         r3, [sp, #0x14]
  01444	e59d3014	 ldr         r3, [sp, #0x14]
  01448	e35300b4	 cmp         r3, #0xB4
  0144c	ca000009	 bgt         |$LN22@RowIncr|
  01450	e59d3014	 ldr         r3, [sp, #0x14]
  01454	e35300b4	 cmp         r3, #0xB4
  01458	0a00009c	 beq         |$LN11@RowIncr|
  0145c	e59d3014	 ldr         r3, [sp, #0x14]
  01460	e3530000	 cmp         r3, #0
  01464	0a000009	 beq         |$LN13@RowIncr|
  01468	e59d3014	 ldr         r3, [sp, #0x14]
  0146c	e353005a	 cmp         r3, #0x5A
  01470	0a00004a	 beq         |$LN12@RowIncr|
  01474	ea000125	 b           |$LN9@RowIncr|
  01478		 |$LN22@RowIncr|
  01478	e59d2014	 ldr         r2, [sp, #0x14]
  0147c	e3a03c01	 mov         r3, #1, 24
  01480	e383300e	 orr         r3, r3, #0xE
  01484	e1520003	 cmp         r2, r3
  01488	0a0000ce	 beq         |$LN10@RowIncr|
  0148c	ea00011f	 b           |$LN9@RowIncr|
  01490		 |$LN13@RowIncr|

; 458  :         {
; 459  :             case OMAP_DSS_ROTATION_0:
; 460  :                 //  Compute clip offset
; 461  :                 dwClipOffsetX = m_dwWidth - (m_rcClip.right - m_rcClip.left);

  01490	e59d302c	 ldr         r3, [sp, #0x2C]
  01494	e2831010	 add         r1, r3, #0x10
  01498	e59d302c	 ldr         r3, [sp, #0x2C]
  0149c	e2832020	 add         r2, r3, #0x20
  014a0	e59d302c	 ldr         r3, [sp, #0x2C]
  014a4	e2833018	 add         r3, r3, #0x18
  014a8	e5922000	 ldr         r2, [r2]
  014ac	e5933000	 ldr         r3, [r3]
  014b0	e0422003	 sub         r2, r2, r3
  014b4	e5913000	 ldr         r3, [r1]
  014b8	e0433002	 sub         r3, r3, r2
  014bc	e58d3004	 str         r3, [sp, #4]

; 462  : 
; 463  :                 //  Forward 2 rows - 1 pixel
; 464  :                 dwIncr = 1 + (m_dwActualWidth * m_dwPixelSize) + ((m_dwWidth - dwClipOffsetX) * m_dwPixelSize) - (2 * m_dwPixelSize);

  014c0	e59d302c	 ldr         r3, [sp, #0x2C]
  014c4	e28320ac	 add         r2, r3, #0xAC
  014c8	e59d302c	 ldr         r3, [sp, #0x2C]
  014cc	e2833008	 add         r3, r3, #8
  014d0	e5922000	 ldr         r2, [r2]
  014d4	e5933000	 ldr         r3, [r3]
  014d8	e0030392	 mul         r3, r2, r3
  014dc	e2831001	 add         r1, r3, #1
  014e0	e59d302c	 ldr         r3, [sp, #0x2C]
  014e4	e2833010	 add         r3, r3, #0x10
  014e8	e5932000	 ldr         r2, [r3]
  014ec	e59d3004	 ldr         r3, [sp, #4]
  014f0	e0422003	 sub         r2, r2, r3
  014f4	e59d302c	 ldr         r3, [sp, #0x2C]
  014f8	e2833008	 add         r3, r3, #8
  014fc	e5933000	 ldr         r3, [r3]
  01500	e0030392	 mul         r3, r2, r3
  01504	e0811003	 add         r1, r1, r3
  01508	e59d302c	 ldr         r3, [sp, #0x2C]
  0150c	e2833008	 add         r3, r3, #8
  01510	e5932000	 ldr         r2, [r3]
  01514	e3a03002	 mov         r3, #2
  01518	e0030392	 mul         r3, r2, r3
  0151c	e0413003	 sub         r3, r1, r3
  01520	e58d3000	 str         r3, [sp]

; 465  : 
; 466  :                 //  (+ vertical_scale_factor*stride - horizontal_scale_factor*pixel_size) 
; 467  :                 dwIncr += ((m_dwVertScale - 1) * m_dwActualWidth * m_dwPixelSize);

  01524	e59d302c	 ldr         r3, [sp, #0x2C]
  01528	e283302c	 add         r3, r3, #0x2C
  0152c	e5933000	 ldr         r3, [r3]
  01530	e2432001	 sub         r2, r3, #1
  01534	e59d302c	 ldr         r3, [sp, #0x2C]
  01538	e28330ac	 add         r3, r3, #0xAC
  0153c	e5933000	 ldr         r3, [r3]
  01540	e0010392	 mul         r1, r2, r3
  01544	e59d302c	 ldr         r3, [sp, #0x2C]
  01548	e2833008	 add         r3, r3, #8
  0154c	e5933000	 ldr         r3, [r3]
  01550	e0020391	 mul         r2, r1, r3
  01554	e59d3000	 ldr         r3, [sp]
  01558	e0833002	 add         r3, r3, r2
  0155c	e58d3000	 str         r3, [sp]

; 468  :                 dwIncr -= ((m_dwHorizScale - 1) * m_dwPixelSize * m_dwWidthFactor);

  01560	e59d302c	 ldr         r3, [sp, #0x2C]
  01564	e2833028	 add         r3, r3, #0x28
  01568	e5933000	 ldr         r3, [r3]
  0156c	e2432001	 sub         r2, r3, #1
  01570	e59d302c	 ldr         r3, [sp, #0x2C]
  01574	e2833008	 add         r3, r3, #8
  01578	e5933000	 ldr         r3, [r3]
  0157c	e0010392	 mul         r1, r2, r3
  01580	e59d302c	 ldr         r3, [sp, #0x2C]
  01584	e28330b4	 add         r3, r3, #0xB4
  01588	e5933000	 ldr         r3, [r3]
  0158c	e0020391	 mul         r2, r1, r3
  01590	e59d3000	 ldr         r3, [sp]
  01594	e0433002	 sub         r3, r3, r2
  01598	e58d3000	 str         r3, [sp]

; 469  :                 break;

  0159c	ea0000eb	 b           |$LN14@RowIncr|
  015a0		 |$LN12@RowIncr|

; 470  :                 
; 471  :             case OMAP_DSS_ROTATION_90:
; 472  :                 //  Compute clip offset
; 473  :                 dwClipOffsetY = m_dwHeight - (m_rcClip.bottom - m_rcClip.top);

  015a0	e59d302c	 ldr         r3, [sp, #0x2C]
  015a4	e2831014	 add         r1, r3, #0x14
  015a8	e59d302c	 ldr         r3, [sp, #0x2C]
  015ac	e2832024	 add         r2, r3, #0x24
  015b0	e59d302c	 ldr         r3, [sp, #0x2C]
  015b4	e283301c	 add         r3, r3, #0x1C
  015b8	e5922000	 ldr         r2, [r2]
  015bc	e5933000	 ldr         r3, [r3]
  015c0	e0422003	 sub         r2, r2, r3
  015c4	e5913000	 ldr         r3, [r1]
  015c8	e0433002	 sub         r3, r3, r2
  015cc	e58d3008	 str         r3, [sp, #8]

; 474  : 
; 475  :                 //  Backward 1 frame + 1 row
; 476  :                 dwIncr = 1 - (m_dwActualWidth * m_dwHeight * m_dwPixelSize) + (m_dwActualWidth * m_dwPixelSize);

  015d0	e59d302c	 ldr         r3, [sp, #0x2C]
  015d4	e28320ac	 add         r2, r3, #0xAC
  015d8	e59d302c	 ldr         r3, [sp, #0x2C]
  015dc	e2833014	 add         r3, r3, #0x14
  015e0	e5921000	 ldr         r1, [r2]
  015e4	e5933000	 ldr         r3, [r3]
  015e8	e0020391	 mul         r2, r1, r3
  015ec	e59d302c	 ldr         r3, [sp, #0x2C]
  015f0	e2833008	 add         r3, r3, #8
  015f4	e5933000	 ldr         r3, [r3]
  015f8	e0030392	 mul         r3, r2, r3
  015fc	e2631001	 rsb         r1, r3, #1
  01600	e59d302c	 ldr         r3, [sp, #0x2C]
  01604	e28320ac	 add         r2, r3, #0xAC
  01608	e59d302c	 ldr         r3, [sp, #0x2C]
  0160c	e2833008	 add         r3, r3, #8
  01610	e5922000	 ldr         r2, [r2]
  01614	e5933000	 ldr         r3, [r3]
  01618	e0030392	 mul         r3, r2, r3
  0161c	e0813003	 add         r3, r1, r3
  01620	e58d3000	 str         r3, [sp]

; 477  :                 dwIncr = dwIncr + (dwClipOffsetY * m_dwActualWidth * m_dwPixelSize);

  01624	e59d302c	 ldr         r3, [sp, #0x2C]
  01628	e28330ac	 add         r3, r3, #0xAC
  0162c	e59d2008	 ldr         r2, [sp, #8]
  01630	e5933000	 ldr         r3, [r3]
  01634	e0010392	 mul         r1, r2, r3
  01638	e59d302c	 ldr         r3, [sp, #0x2C]
  0163c	e2833008	 add         r3, r3, #8
  01640	e5933000	 ldr         r3, [r3]
  01644	e0020391	 mul         r2, r1, r3
  01648	e59d3000	 ldr         r3, [sp]
  0164c	e0833002	 add         r3, r3, r2
  01650	e58d3000	 str         r3, [sp]

; 478  : 
; 479  :                 //  (+ vertical_scale_factor*stride + horizontal_scale_factor*pixel_size)
; 480  :                 dwIncr += ((m_dwVertScale - 1) * m_dwActualWidth * m_dwPixelSize);

  01654	e59d302c	 ldr         r3, [sp, #0x2C]
  01658	e283302c	 add         r3, r3, #0x2C
  0165c	e5933000	 ldr         r3, [r3]
  01660	e2432001	 sub         r2, r3, #1
  01664	e59d302c	 ldr         r3, [sp, #0x2C]
  01668	e28330ac	 add         r3, r3, #0xAC
  0166c	e5933000	 ldr         r3, [r3]
  01670	e0010392	 mul         r1, r2, r3
  01674	e59d302c	 ldr         r3, [sp, #0x2C]
  01678	e2833008	 add         r3, r3, #8
  0167c	e5933000	 ldr         r3, [r3]
  01680	e0020391	 mul         r2, r1, r3
  01684	e59d3000	 ldr         r3, [sp]
  01688	e0833002	 add         r3, r3, r2
  0168c	e58d3000	 str         r3, [sp]

; 481  :                 dwIncr += ((m_dwHorizScale - 1) * m_dwPixelSize * m_dwWidthFactor);

  01690	e59d302c	 ldr         r3, [sp, #0x2C]
  01694	e2833028	 add         r3, r3, #0x28
  01698	e5933000	 ldr         r3, [r3]
  0169c	e2432001	 sub         r2, r3, #1
  016a0	e59d302c	 ldr         r3, [sp, #0x2C]
  016a4	e2833008	 add         r3, r3, #8
  016a8	e5933000	 ldr         r3, [r3]
  016ac	e0010392	 mul         r1, r2, r3
  016b0	e59d302c	 ldr         r3, [sp, #0x2C]
  016b4	e28330b4	 add         r3, r3, #0xB4
  016b8	e5933000	 ldr         r3, [r3]
  016bc	e0020391	 mul         r2, r1, r3
  016c0	e59d3000	 ldr         r3, [sp]
  016c4	e0833002	 add         r3, r3, r2
  016c8	e58d3000	 str         r3, [sp]

; 482  :                 break;

  016cc	ea00009f	 b           |$LN14@RowIncr|
  016d0		 |$LN11@RowIncr|

; 483  : 
; 484  :             case OMAP_DSS_ROTATION_180:
; 485  :                 //  Compute clip offset
; 486  :                 dwClipOffsetX = m_dwWidth - (m_rcClip.right - m_rcClip.left);

  016d0	e59d302c	 ldr         r3, [sp, #0x2C]
  016d4	e2831010	 add         r1, r3, #0x10
  016d8	e59d302c	 ldr         r3, [sp, #0x2C]
  016dc	e2832020	 add         r2, r3, #0x20
  016e0	e59d302c	 ldr         r3, [sp, #0x2C]
  016e4	e2833018	 add         r3, r3, #0x18
  016e8	e5922000	 ldr         r2, [r2]
  016ec	e5933000	 ldr         r3, [r3]
  016f0	e0422003	 sub         r2, r2, r3
  016f4	e5913000	 ldr         r3, [r1]
  016f8	e0433002	 sub         r3, r3, r2
  016fc	e58d3004	 str         r3, [sp, #4]

; 487  : 
; 488  :                 //  Backward 2 rows
; 489  :                 dwIncr = 1 - (m_dwActualWidth * m_dwPixelSize) - ((m_dwWidth - dwClipOffsetX) * m_dwPixelSize);

  01700	e59d302c	 ldr         r3, [sp, #0x2C]
  01704	e28320ac	 add         r2, r3, #0xAC
  01708	e59d302c	 ldr         r3, [sp, #0x2C]
  0170c	e2833008	 add         r3, r3, #8
  01710	e5922000	 ldr         r2, [r2]
  01714	e5933000	 ldr         r3, [r3]
  01718	e0030392	 mul         r3, r2, r3
  0171c	e2631001	 rsb         r1, r3, #1
  01720	e59d302c	 ldr         r3, [sp, #0x2C]
  01724	e2833010	 add         r3, r3, #0x10
  01728	e5932000	 ldr         r2, [r3]
  0172c	e59d3004	 ldr         r3, [sp, #4]
  01730	e0422003	 sub         r2, r2, r3
  01734	e59d302c	 ldr         r3, [sp, #0x2C]
  01738	e2833008	 add         r3, r3, #8
  0173c	e5933000	 ldr         r3, [r3]
  01740	e0030392	 mul         r3, r2, r3
  01744	e0413003	 sub         r3, r1, r3
  01748	e58d3000	 str         r3, [sp]

; 490  : 
; 491  :                 //  (- vertical_scale_factor*stride + horizontal_scale_factor*pixel_size)
; 492  :                 dwIncr -= ((m_dwVertScale - 1) * m_dwActualWidth * m_dwPixelSize);

  0174c	e59d302c	 ldr         r3, [sp, #0x2C]
  01750	e283302c	 add         r3, r3, #0x2C
  01754	e5933000	 ldr         r3, [r3]
  01758	e2432001	 sub         r2, r3, #1
  0175c	e59d302c	 ldr         r3, [sp, #0x2C]
  01760	e28330ac	 add         r3, r3, #0xAC
  01764	e5933000	 ldr         r3, [r3]
  01768	e0010392	 mul         r1, r2, r3
  0176c	e59d302c	 ldr         r3, [sp, #0x2C]
  01770	e2833008	 add         r3, r3, #8
  01774	e5933000	 ldr         r3, [r3]
  01778	e0020391	 mul         r2, r1, r3
  0177c	e59d3000	 ldr         r3, [sp]
  01780	e0433002	 sub         r3, r3, r2
  01784	e58d3000	 str         r3, [sp]

; 493  :                 dwIncr += ((m_dwHorizScale - 1) * m_dwPixelSize * m_dwWidthFactor);

  01788	e59d302c	 ldr         r3, [sp, #0x2C]
  0178c	e2833028	 add         r3, r3, #0x28
  01790	e5933000	 ldr         r3, [r3]
  01794	e2432001	 sub         r2, r3, #1
  01798	e59d302c	 ldr         r3, [sp, #0x2C]
  0179c	e2833008	 add         r3, r3, #8
  017a0	e5933000	 ldr         r3, [r3]
  017a4	e0010392	 mul         r1, r2, r3
  017a8	e59d302c	 ldr         r3, [sp, #0x2C]
  017ac	e28330b4	 add         r3, r3, #0xB4
  017b0	e5933000	 ldr         r3, [r3]
  017b4	e0020391	 mul         r2, r1, r3
  017b8	e59d3000	 ldr         r3, [sp]
  017bc	e0833002	 add         r3, r3, r2
  017c0	e58d3000	 str         r3, [sp]

; 494  :                 break;

  017c4	ea000061	 b           |$LN14@RowIncr|
  017c8		 |$LN10@RowIncr|

; 495  : 
; 496  :             case OMAP_DSS_ROTATION_270:
; 497  :                 //  Compute clip offset
; 498  :                 dwClipOffsetY = m_dwHeight - (m_rcClip.bottom - m_rcClip.top);

  017c8	e59d302c	 ldr         r3, [sp, #0x2C]
  017cc	e2831014	 add         r1, r3, #0x14
  017d0	e59d302c	 ldr         r3, [sp, #0x2C]
  017d4	e2832024	 add         r2, r3, #0x24
  017d8	e59d302c	 ldr         r3, [sp, #0x2C]
  017dc	e283301c	 add         r3, r3, #0x1C
  017e0	e5922000	 ldr         r2, [r2]
  017e4	e5933000	 ldr         r3, [r3]
  017e8	e0422003	 sub         r2, r2, r3
  017ec	e5913000	 ldr         r3, [r1]
  017f0	e0433002	 sub         r3, r3, r2
  017f4	e58d3008	 str         r3, [sp, #8]

; 499  : 
; 500  :                 //  Forward 1 frame - 1 row - 1 pixel
; 501  :                 dwIncr = 1 + (m_dwActualWidth * m_dwHeight * m_dwPixelSize) - (m_dwActualWidth * m_dwPixelSize) - (2 * m_dwPixelSize);

  017f8	e59d302c	 ldr         r3, [sp, #0x2C]
  017fc	e28320ac	 add         r2, r3, #0xAC
  01800	e59d302c	 ldr         r3, [sp, #0x2C]
  01804	e2833014	 add         r3, r3, #0x14
  01808	e5921000	 ldr         r1, [r2]
  0180c	e5933000	 ldr         r3, [r3]
  01810	e0020391	 mul         r2, r1, r3
  01814	e59d302c	 ldr         r3, [sp, #0x2C]
  01818	e2833008	 add         r3, r3, #8
  0181c	e5933000	 ldr         r3, [r3]
  01820	e0030392	 mul         r3, r2, r3
  01824	e2831001	 add         r1, r3, #1
  01828	e59d302c	 ldr         r3, [sp, #0x2C]
  0182c	e28320ac	 add         r2, r3, #0xAC
  01830	e59d302c	 ldr         r3, [sp, #0x2C]
  01834	e2833008	 add         r3, r3, #8
  01838	e5922000	 ldr         r2, [r2]
  0183c	e5933000	 ldr         r3, [r3]
  01840	e0030392	 mul         r3, r2, r3
  01844	e0411003	 sub         r1, r1, r3
  01848	e59d302c	 ldr         r3, [sp, #0x2C]
  0184c	e2833008	 add         r3, r3, #8
  01850	e5932000	 ldr         r2, [r3]
  01854	e3a03002	 mov         r3, #2
  01858	e0030392	 mul         r3, r2, r3
  0185c	e0413003	 sub         r3, r1, r3
  01860	e58d3000	 str         r3, [sp]

; 502  :                 dwIncr = dwIncr - (dwClipOffsetY * m_dwActualWidth * m_dwPixelSize);

  01864	e59d302c	 ldr         r3, [sp, #0x2C]
  01868	e28330ac	 add         r3, r3, #0xAC
  0186c	e59d2008	 ldr         r2, [sp, #8]
  01870	e5933000	 ldr         r3, [r3]
  01874	e0010392	 mul         r1, r2, r3
  01878	e59d302c	 ldr         r3, [sp, #0x2C]
  0187c	e2833008	 add         r3, r3, #8
  01880	e5933000	 ldr         r3, [r3]
  01884	e0020391	 mul         r2, r1, r3
  01888	e59d3000	 ldr         r3, [sp]
  0188c	e0433002	 sub         r3, r3, r2
  01890	e58d3000	 str         r3, [sp]

; 503  : 
; 504  :                 //  (- vertical_scale_factor*stride - horizontal_scale_factor*pixel_size)
; 505  :                 dwIncr -= ((m_dwVertScale - 1) * m_dwActualWidth * m_dwPixelSize);

  01894	e59d302c	 ldr         r3, [sp, #0x2C]
  01898	e283302c	 add         r3, r3, #0x2C
  0189c	e5933000	 ldr         r3, [r3]
  018a0	e2432001	 sub         r2, r3, #1
  018a4	e59d302c	 ldr         r3, [sp, #0x2C]
  018a8	e28330ac	 add         r3, r3, #0xAC
  018ac	e5933000	 ldr         r3, [r3]
  018b0	e0010392	 mul         r1, r2, r3
  018b4	e59d302c	 ldr         r3, [sp, #0x2C]
  018b8	e2833008	 add         r3, r3, #8
  018bc	e5933000	 ldr         r3, [r3]
  018c0	e0020391	 mul         r2, r1, r3
  018c4	e59d3000	 ldr         r3, [sp]
  018c8	e0433002	 sub         r3, r3, r2
  018cc	e58d3000	 str         r3, [sp]

; 506  :                 dwIncr -= ((m_dwHorizScale - 1) * m_dwPixelSize * m_dwWidthFactor);                

  018d0	e59d302c	 ldr         r3, [sp, #0x2C]
  018d4	e2833028	 add         r3, r3, #0x28
  018d8	e5933000	 ldr         r3, [r3]
  018dc	e2432001	 sub         r2, r3, #1
  018e0	e59d302c	 ldr         r3, [sp, #0x2C]
  018e4	e2833008	 add         r3, r3, #8
  018e8	e5933000	 ldr         r3, [r3]
  018ec	e0010392	 mul         r1, r2, r3
  018f0	e59d302c	 ldr         r3, [sp, #0x2C]
  018f4	e28330b4	 add         r3, r3, #0xB4
  018f8	e5933000	 ldr         r3, [r3]
  018fc	e0020391	 mul         r2, r1, r3
  01900	e59d3000	 ldr         r3, [sp]
  01904	e0433002	 sub         r3, r3, r2
  01908	e58d3000	 str         r3, [sp]

; 507  :                 break;

  0190c	ea00000f	 b           |$LN14@RowIncr|
  01910		 |$LN9@RowIncr|

; 508  : 
; 509  :             default:
; 510  :                 ASSERT(0);

  01910	ea000002	 b           |$LN20@RowIncr|
  01914	e3a03001	 mov         r3, #1
  01918	e58d3018	 str         r3, [sp, #0x18]
  0191c	ea000008	 b           |$LN21@RowIncr|
  01920		 |$LN20@RowIncr|
  01920	e3a03c01	 mov         r3, #1, 24
  01924	e38330fe	 orr         r3, r3, #0xFE
  01928	e59f2538	 ldr         r2, [pc, #0x538]
  0192c	e59f1530	 ldr         r1, [pc, #0x530]
  01930	e59f0528	 ldr         r0, [pc, #0x528]
  01934	eb000000	 bl          NKDbgPrintfW
  01938	e6000010	 __debugbreak_ce
  0193c	e3a03000	 mov         r3, #0
  01940	e58d3018	 str         r3, [sp, #0x18]
  01944		 |$LN21@RowIncr|

; 511  :                 return 0;

  01944	e3a03000	 mov         r3, #0
  01948	e58d300c	 str         r3, [sp, #0xC]
  0194c	ea00013f	 b           |$LN18@RowIncr|
  01950		 |$LN14@RowIncr|

; 512  :         }
; 513  :     }
; 514  :     else

  01950	ea00013c	 b           |$LN8@RowIncr|
  01954		 |$LN16@RowIncr|

; 515  :     {
; 516  :         //  Compute the row increment for DMA based rotation (non-mirrored)
; 517  :         switch( eRotation )

  01954	e59d3030	 ldr         r3, [sp, #0x30]
  01958	e58d301c	 str         r3, [sp, #0x1C]
  0195c	e59d301c	 ldr         r3, [sp, #0x1C]
  01960	e35300b4	 cmp         r3, #0xB4
  01964	ca000009	 bgt         |$LN25@RowIncr|
  01968	e59d301c	 ldr         r3, [sp, #0x1C]
  0196c	e35300b4	 cmp         r3, #0xB4
  01970	0a000098	 beq         |$LN3@RowIncr|
  01974	e59d301c	 ldr         r3, [sp, #0x1C]
  01978	e3530000	 cmp         r3, #0
  0197c	0a000009	 beq         |$LN5@RowIncr|
  01980	e59d301c	 ldr         r3, [sp, #0x1C]
  01984	e353005a	 cmp         r3, #0x5A
  01988	0a000040	 beq         |$LN4@RowIncr|
  0198c	ea00011d	 b           |$LN1@RowIncr|
  01990		 |$LN25@RowIncr|
  01990	e59d201c	 ldr         r2, [sp, #0x1C]
  01994	e3a03c01	 mov         r3, #1, 24
  01998	e383300e	 orr         r3, r3, #0xE
  0199c	e1520003	 cmp         r2, r3
  019a0	0a0000cc	 beq         |$LN2@RowIncr|
  019a4	ea000117	 b           |$LN1@RowIncr|
  019a8		 |$LN5@RowIncr|

; 518  :         {
; 519  :             case OMAP_DSS_ROTATION_0:
; 520  :                 //  Compute clip offset
; 521  :                 dwClipOffsetX = m_dwWidth - (m_rcClip.right - m_rcClip.left);

  019a8	e59d302c	 ldr         r3, [sp, #0x2C]
  019ac	e2831010	 add         r1, r3, #0x10
  019b0	e59d302c	 ldr         r3, [sp, #0x2C]
  019b4	e2832020	 add         r2, r3, #0x20
  019b8	e59d302c	 ldr         r3, [sp, #0x2C]
  019bc	e2833018	 add         r3, r3, #0x18
  019c0	e5922000	 ldr         r2, [r2]
  019c4	e5933000	 ldr         r3, [r3]
  019c8	e0422003	 sub         r2, r2, r3
  019cc	e5913000	 ldr         r3, [r1]
  019d0	e0433002	 sub         r3, r3, r2
  019d4	e58d3004	 str         r3, [sp, #4]

; 522  : 
; 523  :                 //  Forward 1 pixel on next row
; 524  :                 dwIncr = 1 + (m_dwActualWidth - m_dwWidth + dwClipOffsetX) * m_dwPixelSize;

  019d8	e59d302c	 ldr         r3, [sp, #0x2C]
  019dc	e28320ac	 add         r2, r3, #0xAC
  019e0	e59d302c	 ldr         r3, [sp, #0x2C]
  019e4	e2833010	 add         r3, r3, #0x10
  019e8	e5922000	 ldr         r2, [r2]
  019ec	e5933000	 ldr         r3, [r3]
  019f0	e0422003	 sub         r2, r2, r3
  019f4	e59d3004	 ldr         r3, [sp, #4]
  019f8	e0822003	 add         r2, r2, r3
  019fc	e59d302c	 ldr         r3, [sp, #0x2C]
  01a00	e2833008	 add         r3, r3, #8
  01a04	e5933000	 ldr         r3, [r3]
  01a08	e0030392	 mul         r3, r2, r3
  01a0c	e2833001	 add         r3, r3, #1
  01a10	e58d3000	 str         r3, [sp]

; 525  :                 
; 526  :                 //  (+ vertical_scale_factor*stride + horizontal_scale_factor*pixel_size) 
; 527  :                 dwIncr += ((m_dwVertScale - 1) * m_dwActualWidth * m_dwPixelSize);

  01a14	e59d302c	 ldr         r3, [sp, #0x2C]
  01a18	e283302c	 add         r3, r3, #0x2C
  01a1c	e5933000	 ldr         r3, [r3]
  01a20	e2432001	 sub         r2, r3, #1
  01a24	e59d302c	 ldr         r3, [sp, #0x2C]
  01a28	e28330ac	 add         r3, r3, #0xAC
  01a2c	e5933000	 ldr         r3, [r3]
  01a30	e0010392	 mul         r1, r2, r3
  01a34	e59d302c	 ldr         r3, [sp, #0x2C]
  01a38	e2833008	 add         r3, r3, #8
  01a3c	e5933000	 ldr         r3, [r3]
  01a40	e0020391	 mul         r2, r1, r3
  01a44	e59d3000	 ldr         r3, [sp]
  01a48	e0833002	 add         r3, r3, r2
  01a4c	e58d3000	 str         r3, [sp]

; 528  :                 dwIncr += ((m_dwHorizScale - 1) * m_dwPixelSize * m_dwWidthFactor);

  01a50	e59d302c	 ldr         r3, [sp, #0x2C]
  01a54	e2833028	 add         r3, r3, #0x28
  01a58	e5933000	 ldr         r3, [r3]
  01a5c	e2432001	 sub         r2, r3, #1
  01a60	e59d302c	 ldr         r3, [sp, #0x2C]
  01a64	e2833008	 add         r3, r3, #8
  01a68	e5933000	 ldr         r3, [r3]
  01a6c	e0010392	 mul         r1, r2, r3
  01a70	e59d302c	 ldr         r3, [sp, #0x2C]
  01a74	e28330b4	 add         r3, r3, #0xB4
  01a78	e5933000	 ldr         r3, [r3]
  01a7c	e0020391	 mul         r2, r1, r3
  01a80	e59d3000	 ldr         r3, [sp]
  01a84	e0833002	 add         r3, r3, r2
  01a88	e58d3000	 str         r3, [sp]

; 529  :                 break;

  01a8c	ea0000ed	 b           |$LN6@RowIncr|
  01a90		 |$LN4@RowIncr|

; 530  :                 
; 531  :             case OMAP_DSS_ROTATION_90:
; 532  :                 //  Compute clip offset
; 533  :                 dwClipOffsetY = m_dwHeight - (m_rcClip.bottom - m_rcClip.top);

  01a90	e59d302c	 ldr         r3, [sp, #0x2C]
  01a94	e2831014	 add         r1, r3, #0x14
  01a98	e59d302c	 ldr         r3, [sp, #0x2C]
  01a9c	e2832024	 add         r2, r3, #0x24
  01aa0	e59d302c	 ldr         r3, [sp, #0x2C]
  01aa4	e283301c	 add         r3, r3, #0x1C
  01aa8	e5922000	 ldr         r2, [r2]
  01aac	e5933000	 ldr         r3, [r3]
  01ab0	e0422003	 sub         r2, r2, r3
  01ab4	e5913000	 ldr         r3, [r1]
  01ab8	e0433002	 sub         r3, r3, r2
  01abc	e58d3008	 str         r3, [sp, #8]

; 534  : 
; 535  :                 //  Backward 1 frame + 1 row - 1 pixel
; 536  :                 dwIncr = 1 - (m_dwActualWidth * m_dwHeight * m_dwPixelSize) + (m_dwActualWidth * m_dwPixelSize) - (2 * m_dwPixelSize);

  01ac0	e59d302c	 ldr         r3, [sp, #0x2C]
  01ac4	e28320ac	 add         r2, r3, #0xAC
  01ac8	e59d302c	 ldr         r3, [sp, #0x2C]
  01acc	e2833014	 add         r3, r3, #0x14
  01ad0	e5921000	 ldr         r1, [r2]
  01ad4	e5933000	 ldr         r3, [r3]
  01ad8	e0020391	 mul         r2, r1, r3
  01adc	e59d302c	 ldr         r3, [sp, #0x2C]
  01ae0	e2833008	 add         r3, r3, #8
  01ae4	e5933000	 ldr         r3, [r3]
  01ae8	e0030392	 mul         r3, r2, r3
  01aec	e2631001	 rsb         r1, r3, #1
  01af0	e59d302c	 ldr         r3, [sp, #0x2C]
  01af4	e28320ac	 add         r2, r3, #0xAC
  01af8	e59d302c	 ldr         r3, [sp, #0x2C]
  01afc	e2833008	 add         r3, r3, #8
  01b00	e5922000	 ldr         r2, [r2]
  01b04	e5933000	 ldr         r3, [r3]
  01b08	e0030392	 mul         r3, r2, r3
  01b0c	e0811003	 add         r1, r1, r3
  01b10	e59d302c	 ldr         r3, [sp, #0x2C]
  01b14	e2833008	 add         r3, r3, #8
  01b18	e5932000	 ldr         r2, [r3]
  01b1c	e3a03002	 mov         r3, #2
  01b20	e0030392	 mul         r3, r2, r3
  01b24	e0413003	 sub         r3, r1, r3
  01b28	e58d3000	 str         r3, [sp]

; 537  :                 dwIncr = dwIncr + (dwClipOffsetY * m_dwActualWidth * m_dwPixelSize);

  01b2c	e59d302c	 ldr         r3, [sp, #0x2C]
  01b30	e28330ac	 add         r3, r3, #0xAC
  01b34	e59d2008	 ldr         r2, [sp, #8]
  01b38	e5933000	 ldr         r3, [r3]
  01b3c	e0010392	 mul         r1, r2, r3
  01b40	e59d302c	 ldr         r3, [sp, #0x2C]
  01b44	e2833008	 add         r3, r3, #8
  01b48	e5933000	 ldr         r3, [r3]
  01b4c	e0020391	 mul         r2, r1, r3
  01b50	e59d3000	 ldr         r3, [sp]
  01b54	e0833002	 add         r3, r3, r2
  01b58	e58d3000	 str         r3, [sp]

; 538  :                 
; 539  :                 //  (+ vertical_scale_factor*stride - horizontal_scale_factor*pixel_size)
; 540  :                 dwIncr += ((m_dwVertScale - 1) * m_dwActualWidth * m_dwPixelSize);

  01b5c	e59d302c	 ldr         r3, [sp, #0x2C]
  01b60	e283302c	 add         r3, r3, #0x2C
  01b64	e5933000	 ldr         r3, [r3]
  01b68	e2432001	 sub         r2, r3, #1
  01b6c	e59d302c	 ldr         r3, [sp, #0x2C]
  01b70	e28330ac	 add         r3, r3, #0xAC
  01b74	e5933000	 ldr         r3, [r3]
  01b78	e0010392	 mul         r1, r2, r3
  01b7c	e59d302c	 ldr         r3, [sp, #0x2C]
  01b80	e2833008	 add         r3, r3, #8
  01b84	e5933000	 ldr         r3, [r3]
  01b88	e0020391	 mul         r2, r1, r3
  01b8c	e59d3000	 ldr         r3, [sp]
  01b90	e0833002	 add         r3, r3, r2
  01b94	e58d3000	 str         r3, [sp]

; 541  :                 dwIncr -= ((m_dwHorizScale - 1) * m_dwPixelSize * m_dwWidthFactor);

  01b98	e59d302c	 ldr         r3, [sp, #0x2C]
  01b9c	e2833028	 add         r3, r3, #0x28
  01ba0	e5933000	 ldr         r3, [r3]
  01ba4	e2432001	 sub         r2, r3, #1
  01ba8	e59d302c	 ldr         r3, [sp, #0x2C]
  01bac	e2833008	 add         r3, r3, #8
  01bb0	e5933000	 ldr         r3, [r3]
  01bb4	e0010392	 mul         r1, r2, r3
  01bb8	e59d302c	 ldr         r3, [sp, #0x2C]
  01bbc	e28330b4	 add         r3, r3, #0xB4
  01bc0	e5933000	 ldr         r3, [r3]
  01bc4	e0020391	 mul         r2, r1, r3
  01bc8	e59d3000	 ldr         r3, [sp]
  01bcc	e0433002	 sub         r3, r3, r2
  01bd0	e58d3000	 str         r3, [sp]

; 542  :                 break;

  01bd4	ea00009b	 b           |$LN6@RowIncr|
  01bd8		 |$LN3@RowIncr|

; 543  : 
; 544  :             case OMAP_DSS_ROTATION_180:
; 545  :                 //  Compute clip offset
; 546  :                 dwClipOffsetX = m_dwWidth - (m_rcClip.right - m_rcClip.left);

  01bd8	e59d302c	 ldr         r3, [sp, #0x2C]
  01bdc	e2831010	 add         r1, r3, #0x10
  01be0	e59d302c	 ldr         r3, [sp, #0x2C]
  01be4	e2832020	 add         r2, r3, #0x20
  01be8	e59d302c	 ldr         r3, [sp, #0x2C]
  01bec	e2833018	 add         r3, r3, #0x18
  01bf0	e5922000	 ldr         r2, [r2]
  01bf4	e5933000	 ldr         r3, [r3]
  01bf8	e0422003	 sub         r2, r2, r3
  01bfc	e5913000	 ldr         r3, [r1]
  01c00	e0433002	 sub         r3, r3, r2
  01c04	e58d3004	 str         r3, [sp, #4]

; 547  : 
; 548  :                 //  Backward 1 pixel on previous row
; 549  :                 dwIncr = 1 - 2 * m_dwPixelSize - (m_dwActualWidth - m_dwWidth + dwClipOffsetX) * m_dwPixelSize;

  01c08	e59d302c	 ldr         r3, [sp, #0x2C]
  01c0c	e2833008	 add         r3, r3, #8
  01c10	e5932000	 ldr         r2, [r3]
  01c14	e3a03002	 mov         r3, #2
  01c18	e0030392	 mul         r3, r2, r3
  01c1c	e2631001	 rsb         r1, r3, #1
  01c20	e59d302c	 ldr         r3, [sp, #0x2C]
  01c24	e28320ac	 add         r2, r3, #0xAC
  01c28	e59d302c	 ldr         r3, [sp, #0x2C]
  01c2c	e2833010	 add         r3, r3, #0x10
  01c30	e5922000	 ldr         r2, [r2]
  01c34	e5933000	 ldr         r3, [r3]
  01c38	e0422003	 sub         r2, r2, r3
  01c3c	e59d3004	 ldr         r3, [sp, #4]
  01c40	e0822003	 add         r2, r2, r3
  01c44	e59d302c	 ldr         r3, [sp, #0x2C]
  01c48	e2833008	 add         r3, r3, #8
  01c4c	e5933000	 ldr         r3, [r3]
  01c50	e0030392	 mul         r3, r2, r3
  01c54	e0413003	 sub         r3, r1, r3
  01c58	e58d3000	 str         r3, [sp]

; 550  : 
; 551  :                 //  (- vertical_scale_factor*stride - horizontal_scale_factor*pixel_size)
; 552  :                 dwIncr -= ((m_dwVertScale - 1) * m_dwActualWidth * m_dwPixelSize);

  01c5c	e59d302c	 ldr         r3, [sp, #0x2C]
  01c60	e283302c	 add         r3, r3, #0x2C
  01c64	e5933000	 ldr         r3, [r3]
  01c68	e2432001	 sub         r2, r3, #1
  01c6c	e59d302c	 ldr         r3, [sp, #0x2C]
  01c70	e28330ac	 add         r3, r3, #0xAC
  01c74	e5933000	 ldr         r3, [r3]
  01c78	e0010392	 mul         r1, r2, r3
  01c7c	e59d302c	 ldr         r3, [sp, #0x2C]
  01c80	e2833008	 add         r3, r3, #8
  01c84	e5933000	 ldr         r3, [r3]
  01c88	e0020391	 mul         r2, r1, r3
  01c8c	e59d3000	 ldr         r3, [sp]
  01c90	e0433002	 sub         r3, r3, r2
  01c94	e58d3000	 str         r3, [sp]

; 553  :                 dwIncr -= ((m_dwHorizScale - 1) * m_dwPixelSize * m_dwWidthFactor);

  01c98	e59d302c	 ldr         r3, [sp, #0x2C]
  01c9c	e2833028	 add         r3, r3, #0x28
  01ca0	e5933000	 ldr         r3, [r3]
  01ca4	e2432001	 sub         r2, r3, #1
  01ca8	e59d302c	 ldr         r3, [sp, #0x2C]
  01cac	e2833008	 add         r3, r3, #8
  01cb0	e5933000	 ldr         r3, [r3]
  01cb4	e0010392	 mul         r1, r2, r3
  01cb8	e59d302c	 ldr         r3, [sp, #0x2C]
  01cbc	e28330b4	 add         r3, r3, #0xB4
  01cc0	e5933000	 ldr         r3, [r3]
  01cc4	e0020391	 mul         r2, r1, r3
  01cc8	e59d3000	 ldr         r3, [sp]
  01ccc	e0433002	 sub         r3, r3, r2
  01cd0	e58d3000	 str         r3, [sp]

; 554  :                 break;

  01cd4	ea00005b	 b           |$LN6@RowIncr|
  01cd8		 |$LN2@RowIncr|

; 555  : 
; 556  :             case OMAP_DSS_ROTATION_270:
; 557  :                 //  Compute clip offset
; 558  :                 dwClipOffsetY = m_dwHeight - (m_rcClip.bottom - m_rcClip.top);

  01cd8	e59d302c	 ldr         r3, [sp, #0x2C]
  01cdc	e2831014	 add         r1, r3, #0x14
  01ce0	e59d302c	 ldr         r3, [sp, #0x2C]
  01ce4	e2832024	 add         r2, r3, #0x24
  01ce8	e59d302c	 ldr         r3, [sp, #0x2C]
  01cec	e283301c	 add         r3, r3, #0x1C
  01cf0	e5922000	 ldr         r2, [r2]
  01cf4	e5933000	 ldr         r3, [r3]
  01cf8	e0422003	 sub         r2, r2, r3
  01cfc	e5913000	 ldr         r3, [r1]
  01d00	e0433002	 sub         r3, r3, r2
  01d04	e58d3008	 str         r3, [sp, #8]

; 559  : 
; 560  :                 //  Forward 1 frame - 1 row + 1 pixel
; 561  :                 dwIncr = 1 + (m_dwActualWidth * m_dwHeight * m_dwPixelSize) - (m_dwActualWidth * m_dwPixelSize);

  01d08	e59d302c	 ldr         r3, [sp, #0x2C]
  01d0c	e28320ac	 add         r2, r3, #0xAC
  01d10	e59d302c	 ldr         r3, [sp, #0x2C]
  01d14	e2833014	 add         r3, r3, #0x14
  01d18	e5921000	 ldr         r1, [r2]
  01d1c	e5933000	 ldr         r3, [r3]
  01d20	e0020391	 mul         r2, r1, r3
  01d24	e59d302c	 ldr         r3, [sp, #0x2C]
  01d28	e2833008	 add         r3, r3, #8
  01d2c	e5933000	 ldr         r3, [r3]
  01d30	e0030392	 mul         r3, r2, r3
  01d34	e2831001	 add         r1, r3, #1
  01d38	e59d302c	 ldr         r3, [sp, #0x2C]
  01d3c	e28320ac	 add         r2, r3, #0xAC
  01d40	e59d302c	 ldr         r3, [sp, #0x2C]
  01d44	e2833008	 add         r3, r3, #8
  01d48	e5922000	 ldr         r2, [r2]
  01d4c	e5933000	 ldr         r3, [r3]
  01d50	e0030392	 mul         r3, r2, r3
  01d54	e0413003	 sub         r3, r1, r3
  01d58	e58d3000	 str         r3, [sp]

; 562  :                 dwIncr = dwIncr - (dwClipOffsetY * m_dwActualWidth * m_dwPixelSize);

  01d5c	e59d302c	 ldr         r3, [sp, #0x2C]
  01d60	e28330ac	 add         r3, r3, #0xAC
  01d64	e59d2008	 ldr         r2, [sp, #8]
  01d68	e5933000	 ldr         r3, [r3]
  01d6c	e0010392	 mul         r1, r2, r3
  01d70	e59d302c	 ldr         r3, [sp, #0x2C]
  01d74	e2833008	 add         r3, r3, #8
  01d78	e5933000	 ldr         r3, [r3]
  01d7c	e0020391	 mul         r2, r1, r3
  01d80	e59d3000	 ldr         r3, [sp]
  01d84	e0433002	 sub         r3, r3, r2
  01d88	e58d3000	 str         r3, [sp]

; 563  : 
; 564  :                 //  (- vertical_scale_factor*stride + horizontal_scale_factor*pixel_size)
; 565  :                 dwIncr -= ((m_dwVertScale - 1) * m_dwActualWidth * m_dwPixelSize);

  01d8c	e59d302c	 ldr         r3, [sp, #0x2C]
  01d90	e283302c	 add         r3, r3, #0x2C
  01d94	e5933000	 ldr         r3, [r3]
  01d98	e2432001	 sub         r2, r3, #1
  01d9c	e59d302c	 ldr         r3, [sp, #0x2C]
  01da0	e28330ac	 add         r3, r3, #0xAC
  01da4	e5933000	 ldr         r3, [r3]
  01da8	e0010392	 mul         r1, r2, r3
  01dac	e59d302c	 ldr         r3, [sp, #0x2C]
  01db0	e2833008	 add         r3, r3, #8
  01db4	e5933000	 ldr         r3, [r3]
  01db8	e0020391	 mul         r2, r1, r3
  01dbc	e59d3000	 ldr         r3, [sp]
  01dc0	e0433002	 sub         r3, r3, r2
  01dc4	e58d3000	 str         r3, [sp]

; 566  :                 dwIncr += ((m_dwHorizScale - 1) * m_dwPixelSize * m_dwWidthFactor);                

  01dc8	e59d302c	 ldr         r3, [sp, #0x2C]
  01dcc	e2833028	 add         r3, r3, #0x28
  01dd0	e5933000	 ldr         r3, [r3]
  01dd4	e2432001	 sub         r2, r3, #1
  01dd8	e59d302c	 ldr         r3, [sp, #0x2C]
  01ddc	e2833008	 add         r3, r3, #8
  01de0	e5933000	 ldr         r3, [r3]
  01de4	e0010392	 mul         r1, r2, r3
  01de8	e59d302c	 ldr         r3, [sp, #0x2C]
  01dec	e28330b4	 add         r3, r3, #0xB4
  01df0	e5933000	 ldr         r3, [r3]
  01df4	e0020391	 mul         r2, r1, r3
  01df8	e59d3000	 ldr         r3, [sp]
  01dfc	e0833002	 add         r3, r3, r2
  01e00	e58d3000	 str         r3, [sp]

; 567  :                 break;

  01e04	ea00000f	 b           |$LN6@RowIncr|
  01e08		 |$LN1@RowIncr|

; 568  : 
; 569  :             default:
; 570  :                 ASSERT(0);

  01e08	ea000002	 b           |$LN23@RowIncr|
  01e0c	e3a03001	 mov         r3, #1
  01e10	e58d3020	 str         r3, [sp, #0x20]
  01e14	ea000008	 b           |$LN24@RowIncr|
  01e18		 |$LN23@RowIncr|
  01e18	e3a03c02	 mov         r3, #2, 24
  01e1c	e383303a	 orr         r3, r3, #0x3A
  01e20	e59f2040	 ldr         r2, [pc, #0x40]
  01e24	e59f1038	 ldr         r1, [pc, #0x38]
  01e28	e59f0030	 ldr         r0, [pc, #0x30]
  01e2c	eb000000	 bl          NKDbgPrintfW
  01e30	e6000010	 __debugbreak_ce
  01e34	e3a03000	 mov         r3, #0
  01e38	e58d3020	 str         r3, [sp, #0x20]
  01e3c		 |$LN24@RowIncr|

; 571  :                 return 0;

  01e3c	e3a03000	 mov         r3, #0
  01e40	e58d300c	 str         r3, [sp, #0xC]
  01e44	ea000001	 b           |$LN18@RowIncr|
  01e48		 |$LN6@RowIncr|
  01e48		 |$LN8@RowIncr|

; 572  :         }
; 573  :     }
; 574  :         
; 575  :     //  Return increment
; 576  :     return dwIncr;

  01e48	e59d3000	 ldr         r3, [sp]
  01e4c	e58d300c	 str         r3, [sp, #0xC]
  01e50		 |$LN18@RowIncr|

; 577  : }

  01e50	e59d000c	 ldr         r0, [sp, #0xC]
  01e54	e28dd024	 add         sp, sp, #0x24
  01e58	e89d6000	 ldmia       sp, {sp, lr}
  01e5c	e12fff1e	 bx          lr
  01e60		 |$LN29@RowIncr|
  01e60		 |$LN30@RowIncr|
  01e60	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  01e64		 |$LN31@RowIncr|
  01e64	00000000	 DCD         |??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@|
  01e68		 |$LN32@RowIncr|
  01e68	00000000	 DCD         |??_C@_1LA@BBFDAFHA@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  01e6c		 |$M37374|

			 ENDP  ; |?RowIncr@OMAPFlatSurface@@UAAKW4OMAP_DSS_ROTATION@@H@Z|, OMAPFlatSurface::RowIncr


  00050			 AREA	 |.pdata|, PDATA
|$T37386| DCD	|$LN7@SetOrienta|
	DCD	0x40005504
; Function compile flags: /Odtp

  01e6c			 AREA	 |.text|, CODE, ARM

  01e6c		 |?SetOrientation@OMAPFlatSurface@@UAAHW4OMAP_SURF_ORIENTATION@@@Z| PROC ; OMAPFlatSurface::SetOrientation

; 585  : {

  01e6c		 |$LN7@SetOrienta|
  01e6c	e1a0c00d	 mov         r12, sp
  01e70	e92d0003	 stmdb       sp!, {r0, r1}
  01e74	e92d5000	 stmdb       sp!, {r12, lr}
  01e78	e24dd014	 sub         sp, sp, #0x14
  01e7c		 |$M37383|

; 586  :     DWORD   oldWidth = m_dwWidth,

  01e7c	e59d301c	 ldr         r3, [sp, #0x1C]
  01e80	e2833010	 add         r3, r3, #0x10
  01e84	e5933000	 ldr         r3, [r3]
  01e88	e58d3004	 str         r3, [sp, #4]

; 587  :             oldHeight = m_dwHeight,

  01e8c	e59d301c	 ldr         r3, [sp, #0x1C]
  01e90	e2833014	 add         r3, r3, #0x14
  01e94	e5933000	 ldr         r3, [r3]
  01e98	e58d3008	 str         r3, [sp, #8]

; 588  :             oldActualWidth = m_dwActualWidth,

  01e9c	e59d301c	 ldr         r3, [sp, #0x1C]
  01ea0	e28330ac	 add         r3, r3, #0xAC
  01ea4	e5933000	 ldr         r3, [r3]
  01ea8	e58d3000	 str         r3, [sp]

; 589  :             oldActualHeight = m_dwActualHeight;

  01eac	e59d301c	 ldr         r3, [sp, #0x1C]
  01eb0	e28330b0	 add         r3, r3, #0xB0
  01eb4	e5933000	 ldr         r3, [r3]
  01eb8	e58d300c	 str         r3, [sp, #0xC]

; 590  :     
; 591  :     //  Do nothing if orientation is the same
; 592  :     if( eOrientation == m_eOrientation )

  01ebc	e59d301c	 ldr         r3, [sp, #0x1C]
  01ec0	e283300c	 add         r3, r3, #0xC
  01ec4	e59d2020	 ldr         r2, [sp, #0x20]
  01ec8	e5933000	 ldr         r3, [r3]
  01ecc	e1520003	 cmp         r2, r3
  01ed0	1a000002	 bne         |$LN2@SetOrienta|

; 593  :         return TRUE;

  01ed4	e3a03001	 mov         r3, #1
  01ed8	e58d3010	 str         r3, [sp, #0x10]
  01edc	ea000033	 b           |$LN3@SetOrienta|
  01ee0		 |$LN2@SetOrienta|

; 594  : 
; 595  :     //  Swap width and height parameters
; 596  :     m_eOrientation   = eOrientation;

  01ee0	e59d301c	 ldr         r3, [sp, #0x1C]
  01ee4	e283200c	 add         r2, r3, #0xC
  01ee8	e59d3020	 ldr         r3, [sp, #0x20]
  01eec	e5823000	 str         r3, [r2]

; 597  :     m_dwWidth        = oldHeight;

  01ef0	e59d301c	 ldr         r3, [sp, #0x1C]
  01ef4	e2832010	 add         r2, r3, #0x10
  01ef8	e59d3008	 ldr         r3, [sp, #8]
  01efc	e5823000	 str         r3, [r2]

; 598  :     m_dwHeight       = oldWidth;

  01f00	e59d301c	 ldr         r3, [sp, #0x1C]
  01f04	e2832014	 add         r2, r3, #0x14
  01f08	e59d3004	 ldr         r3, [sp, #4]
  01f0c	e5823000	 str         r3, [r2]

; 599  :     m_dwActualWidth  = oldActualHeight;

  01f10	e59d301c	 ldr         r3, [sp, #0x1C]
  01f14	e28320ac	 add         r2, r3, #0xAC
  01f18	e59d300c	 ldr         r3, [sp, #0xC]
  01f1c	e5823000	 str         r3, [r2]

; 600  :     m_dwActualHeight = oldActualWidth;

  01f20	e59d301c	 ldr         r3, [sp, #0x1C]
  01f24	e28320b0	 add         r2, r3, #0xB0
  01f28	e59d3000	 ldr         r3, [sp]
  01f2c	e5823000	 str         r3, [r2]

; 601  :     
; 602  :     //  Reset clipping rect
; 603  :     SetClipping( NULL );

  01f30	e3a01000	 mov         r1, #0
  01f34	e59d301c	 ldr         r3, [sp, #0x1C]
  01f38	e5933000	 ldr         r3, [r3]
  01f3c	e2833020	 add         r3, r3, #0x20
  01f40	e59d001c	 ldr         r0, [sp, #0x1C]
  01f44	e5933000	 ldr         r3, [r3]
  01f48	e1a0e00f	 mov         lr, pc
  01f4c	e12fff13	 bx          r3

; 604  : 
; 605  :     if ((m_pAssocSurface) && (m_eSurfaceType==OMAP_SURFACE_NORMAL))

  01f50	e59d301c	 ldr         r3, [sp, #0x1C]
  01f54	e28330a0	 add         r3, r3, #0xA0
  01f58	e5933000	 ldr         r3, [r3]
  01f5c	e3530000	 cmp         r3, #0
  01f60	0a000010	 beq         |$LN1@SetOrienta|
  01f64	e59d301c	 ldr         r3, [sp, #0x1C]
  01f68	e283309c	 add         r3, r3, #0x9C
  01f6c	e5933000	 ldr         r3, [r3]
  01f70	e3530000	 cmp         r3, #0
  01f74	1a00000b	 bne         |$LN1@SetOrienta|

; 606  :         m_pAssocSurface->SetOrientation(eOrientation);

  01f78	e59d1020	 ldr         r1, [sp, #0x20]
  01f7c	e59d301c	 ldr         r3, [sp, #0x1C]
  01f80	e28330a0	 add         r3, r3, #0xA0
  01f84	e5932000	 ldr         r2, [r3]
  01f88	e59d301c	 ldr         r3, [sp, #0x1C]
  01f8c	e28330a0	 add         r3, r3, #0xA0
  01f90	e5930000	 ldr         r0, [r3]
  01f94	e5923000	 ldr         r3, [r2]
  01f98	e2833038	 add         r3, r3, #0x38
  01f9c	e5933000	 ldr         r3, [r3]
  01fa0	e1a0e00f	 mov         lr, pc
  01fa4	e12fff13	 bx          r3
  01fa8		 |$LN1@SetOrienta|

; 607  :     
; 608  :     return TRUE;

  01fa8	e3a03001	 mov         r3, #1
  01fac	e58d3010	 str         r3, [sp, #0x10]
  01fb0		 |$LN3@SetOrienta|

; 609  : }

  01fb0	e59d0010	 ldr         r0, [sp, #0x10]
  01fb4	e28dd014	 add         sp, sp, #0x14
  01fb8	e89d6000	 ldmia       sp, {sp, lr}
  01fbc	e12fff1e	 bx          lr
  01fc0		 |$M37384|

			 ENDP  ; |?SetOrientation@OMAPFlatSurface@@UAAHW4OMAP_SURF_ORIENTATION@@@Z|, OMAPFlatSurface::SetOrientation

	EXPORT	|??_7OMAPFlatSurfaceManager@@6B@| [ DATA ] ; OMAPFlatSurfaceManager::`vftable'
	EXPORT	|??0OMAPSurfaceManager@@QAA@XZ|		; OMAPSurfaceManager::OMAPSurfaceManager
	EXPORT	|??0OMAPFlatSurfaceManager@@QAA@XZ|	; OMAPFlatSurfaceManager::OMAPFlatSurfaceManager
	EXPORT	|?Initialize@OMAPFlatSurfaceManager@@UAAHK@Z| ; OMAPFlatSurfaceManager::Initialize
	EXPORT	|?TotalMemorySize@OMAPFlatSurfaceManager@@UAAKXZ| ; OMAPFlatSurfaceManager::TotalMemorySize
	EXPORT	|?FreeMemorySize@OMAPFlatSurfaceManager@@UAAKXZ| ; OMAPFlatSurfaceManager::FreeMemorySize
	EXPORT	|?VirtualBaseAddr@OMAPFlatSurfaceManager@@UAAPAXXZ| ; OMAPFlatSurfaceManager::VirtualBaseAddr
	EXPORT	|?NumPhysicalAddr@OMAPFlatSurfaceManager@@UAAKXZ| ; OMAPFlatSurfaceManager::NumPhysicalAddr
	EXPORT	|?PhysicalLen@OMAPFlatSurfaceManager@@UAAKK@Z| ; OMAPFlatSurfaceManager::PhysicalLen
	EXPORT	|?PhysicalAddr@OMAPFlatSurfaceManager@@UAAKK@Z| ; OMAPFlatSurfaceManager::PhysicalAddr
	EXPORT	|?SupportsRotation@OMAPFlatSurfaceManager@@UAAHXZ| ; OMAPFlatSurfaceManager::SupportsRotation
	EXPORT	|?SupportsOffscreenSurfaces@OMAPFlatSurfaceManager@@UAAHXZ| ; OMAPFlatSurfaceManager::SupportsOffscreenSurfaces
	EXPORT	|?Allocate@OMAPFlatSurfaceManager@@UAAHW4OMAP_DSS_PIXELFORMAT@@KKPAPAVOMAPSurface@@PAV3@@Z| ; OMAPFlatSurfaceManager::Allocate
	EXPORT	|?Allocate@OMAPFlatSurfaceManager@@UAAHW4OMAP_DSS_PIXELFORMAT@@KKPAPAVOMAPSurface@@@Z| ; OMAPFlatSurfaceManager::Allocate
	EXPORT	|?AllocateGDI@OMAPFlatSurfaceManager@@UAAHW4OMAP_DSS_PIXELFORMAT@@KKPAPAVOMAPSurface@@@Z| ; OMAPFlatSurfaceManager::AllocateGDI
	IMPORT	|??_EOMAPFlatSurfaceManager@@UAAPAXI@Z|, WEAK |??_GOMAPFlatSurfaceManager@@UAAPAXI@Z| ; OMAPFlatSurfaceManager::`vector deleting destructor', OMAPFlatSurfaceManager::`scalar deleting destructor'

  00058			 AREA	 |.pdata|, PDATA
|$T37392| DCD	|$LN5@OMAPFlatSu@3|
	DCD	0x40002d04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_7OMAPFlatSurfaceManager@@6B@| DCD |??_EOMAPFlatSurfaceManager@@UAAPAXI@Z| ; OMAPFlatSurfaceManager::`vftable'
	DCD	|?Initialize@OMAPFlatSurfaceManager@@UAAHK@Z|
	DCD	|?TotalMemorySize@OMAPFlatSurfaceManager@@UAAKXZ|
	DCD	|?FreeMemorySize@OMAPFlatSurfaceManager@@UAAKXZ|
	DCD	|?VirtualBaseAddr@OMAPFlatSurfaceManager@@UAAPAXXZ|
	DCD	|?NumPhysicalAddr@OMAPFlatSurfaceManager@@UAAKXZ|
	DCD	|?PhysicalLen@OMAPFlatSurfaceManager@@UAAKK@Z|
	DCD	|?PhysicalAddr@OMAPFlatSurfaceManager@@UAAKK@Z|
	DCD	|?SupportsRotation@OMAPFlatSurfaceManager@@UAAHXZ|
	DCD	|?SupportsOffscreenSurfaces@OMAPFlatSurfaceManager@@UAAHXZ|
	DCD	|?Allocate@OMAPFlatSurfaceManager@@UAAHW4OMAP_DSS_PIXELFORMAT@@KKPAPAVOMAPSurface@@PAV3@@Z|
	DCD	|?Allocate@OMAPFlatSurfaceManager@@UAAHW4OMAP_DSS_PIXELFORMAT@@KKPAPAVOMAPSurface@@@Z|
	DCD	|?AllocateGDI@OMAPFlatSurfaceManager@@UAAHW4OMAP_DSS_PIXELFORMAT@@KKPAPAVOMAPSurface@@@Z|
; Function compile flags: /Odtp

  01fc0			 AREA	 |.text|, CODE, ARM

  01fc0		 |??0OMAPFlatSurfaceManager@@QAA@XZ| PROC ; OMAPFlatSurfaceManager::OMAPFlatSurfaceManager

; 614  : {

  01fc0		 |$LN5@OMAPFlatSu@3|
  01fc0	e1a0c00d	 mov         r12, sp
  01fc4	e92d0001	 stmdb       sp!, {r0}
  01fc8	e92d5000	 stmdb       sp!, {r12, lr}
  01fcc	e24dd008	 sub         sp, sp, #8
  01fd0		 |$M37389|
  01fd0	e59d0010	 ldr         r0, [sp, #0x10]
  01fd4	eb000000	 bl          |??0OMAPSurfaceManager@@QAA@XZ|
  01fd8	e58d0004	 str         r0, [sp, #4]
  01fdc	e59f208c	 ldr         r2, [pc, #0x8C]
  01fe0	e59d3010	 ldr         r3, [sp, #0x10]
  01fe4	e5832000	 str         r2, [r3]

; 615  :     //  Initialize properties
; 616  :     m_pVirtualDisplayBuffer = NULL;

  01fe8	e59d3010	 ldr         r3, [sp, #0x10]
  01fec	e2832010	 add         r2, r3, #0x10
  01ff0	e3a03000	 mov         r3, #0
  01ff4	e5823000	 str         r3, [r2]

; 617  :     m_hHeap = NULL;

  01ff8	e59d3010	 ldr         r3, [sp, #0x10]
  01ffc	e2832004	 add         r2, r3, #4
  02000	e3a03000	 mov         r3, #0
  02004	e5823000	 str         r3, [r2]

; 618  :     m_dwDisplayBufferSize = 0;

  02008	e59d3010	 ldr         r3, [sp, #0x10]
  0200c	e2832008	 add         r2, r3, #8
  02010	e3a03000	 mov         r3, #0
  02014	e5823000	 str         r3, [r2]

; 619  :     m_dwPhysicalDisplayAddr = 0;

  02018	e59d3010	 ldr         r3, [sp, #0x10]
  0201c	e283200c	 add         r2, r3, #0xC
  02020	e3a03000	 mov         r3, #0
  02024	e5823000	 str         r3, [r2]

; 620  : 
; 621  :     m_hOffscreenHeap = NULL;

  02028	e59d3010	 ldr         r3, [sp, #0x10]
  0202c	e2832014	 add         r2, r3, #0x14
  02030	e3a03000	 mov         r3, #0
  02034	e5823000	 str         r3, [r2]

; 622  :     m_pOffscreenBuffer = NULL;

  02038	e59d3010	 ldr         r3, [sp, #0x10]
  0203c	e2832018	 add         r2, r3, #0x18
  02040	e3a03000	 mov         r3, #0
  02044	e5823000	 str         r3, [r2]

; 623  :     m_dwOffscreenPhysical = 0;

  02048	e59d3010	 ldr         r3, [sp, #0x10]
  0204c	e283201c	 add         r2, r3, #0x1C
  02050	e3a03000	 mov         r3, #0
  02054	e5823000	 str         r3, [r2]

; 624  : }

  02058	e59d3010	 ldr         r3, [sp, #0x10]
  0205c	e58d3000	 str         r3, [sp]
  02060	e59d0000	 ldr         r0, [sp]
  02064	e28dd008	 add         sp, sp, #8
  02068	e89d6000	 ldmia       sp, {sp, lr}
  0206c	e12fff1e	 bx          lr
  02070		 |$LN6@OMAPFlatSu@3|
  02070		 |$LN7@OMAPFlatSu@3|
  02070	00000000	 DCD         |??_7OMAPFlatSurfaceManager@@6B@|
  02074		 |$M37390|

			 ENDP  ; |??0OMAPFlatSurfaceManager@@QAA@XZ|, OMAPFlatSurfaceManager::OMAPFlatSurfaceManager

	EXPORT	|??_7OMAPSurfaceManager@@6B@| [ DATA ]	; OMAPSurfaceManager::`vftable'
	IMPORT	|??_EOMAPSurfaceManager@@UAAPAXI@Z|, WEAK |??_GOMAPSurfaceManager@@UAAPAXI@Z| ; OMAPSurfaceManager::`vector deleting destructor', OMAPSurfaceManager::`scalar deleting destructor'
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\inc\dssai.h

  00000			 AREA	 |.pdata|, PDATA
|$T37400| DCD	|$LN5@OMAPSurfac@3|
	DCD	0x40000e04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_7OMAPSurfaceManager@@6B@| DCD |??_EOMAPSurfaceManager@@UAAPAXI@Z| ; OMAPSurfaceManager::`vftable'
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|_purecall|
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0OMAPSurfaceManager@@QAA@XZ| PROC	; OMAPSurfaceManager::OMAPSurfaceManager

; 955  :     OMAPSurfaceManager() {};

  00000		 |$LN5@OMAPSurfac@3|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M37397|
  00010	e59f201c	 ldr         r2, [pc, #0x1C]
  00014	e59d300c	 ldr         r3, [sp, #0xC]
  00018	e5832000	 str         r2, [r3]
  0001c	e59d300c	 ldr         r3, [sp, #0xC]
  00020	e58d3000	 str         r3, [sp]
  00024	e59d0000	 ldr         r0, [sp]
  00028	e28dd004	 add         sp, sp, #4
  0002c	e89d6000	 ldmia       sp, {sp, lr}
  00030	e12fff1e	 bx          lr
  00034		 |$LN6@OMAPSurfac@3|
  00034		 |$LN7@OMAPSurfac@3|
  00034	00000000	 DCD         |??_7OMAPSurfaceManager@@6B@|
  00038		 |$M37398|

			 ENDP  ; |??0OMAPSurfaceManager@@QAA@XZ|, OMAPSurfaceManager::OMAPSurfaceManager

	EXPORT	|??1OMAPSurfaceManager@@UAA@XZ|		; OMAPSurfaceManager::~OMAPSurfaceManager

  00000			 AREA	 |.pdata|, PDATA
|$T37410| DCD	|$LN6@scalar@3|
	DCD	0x40001104
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??_GOMAPSurfaceManager@@UAAPAXI@Z| PROC ; OMAPSurfaceManager::`scalar deleting destructor'
  00000		 |$LN6@scalar@3|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M37407|
  00010	e59d000c	 ldr         r0, [sp, #0xC]
  00014	eb000000	 bl          |??1OMAPSurfaceManager@@UAA@XZ|
  00018	e59d3010	 ldr         r3, [sp, #0x10]
  0001c	e3130001	 tst         r3, #1
  00020	0a000001	 beq         |$LN1@scalar@3|
  00024	e59d000c	 ldr         r0, [sp, #0xC]
  00028	eb000000	 bl          |??3@YAXPAX@Z|
  0002c		 |$LN1@scalar@3|
  0002c	e59d300c	 ldr         r3, [sp, #0xC]
  00030	e58d3000	 str         r3, [sp]
  00034	e59d0000	 ldr         r0, [sp]
  00038	e28dd004	 add         sp, sp, #4
  0003c	e89d6000	 ldmia       sp, {sp, lr}
  00040	e12fff1e	 bx          lr
  00044		 |$M37408|

			 ENDP  ; |??_GOMAPSurfaceManager@@UAAPAXI@Z|, OMAPSurfaceManager::`scalar deleting destructor'


  00000			 AREA	 |.pdata|, PDATA
|$T37417| DCD	|$LN5@OMAPSurfac@4|
	DCD	0x40000903
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??1OMAPSurfaceManager@@UAA@XZ| PROC	; OMAPSurfaceManager::~OMAPSurfaceManager

; 962  :     ~OMAPSurfaceManager() {};

  00000		 |$LN5@OMAPSurfac@4|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M37414|
  0000c	e59f200c	 ldr         r2, [pc, #0xC]
  00010	e59d3008	 ldr         r3, [sp, #8]
  00014	e5832000	 str         r2, [r3]
  00018	e89d6000	 ldmia       sp, {sp, lr}
  0001c	e12fff1e	 bx          lr
  00020		 |$LN6@OMAPSurfac@4|
  00020		 |$LN7@OMAPSurfac@4|
  00020	00000000	 DCD         |??_7OMAPSurfaceManager@@6B@|
  00024		 |$M37415|

			 ENDP  ; |??1OMAPSurfaceManager@@UAA@XZ|, OMAPSurfaceManager::~OMAPSurfaceManager


  00000			 AREA	 |.pdata|, PDATA
|$T37427| DCD	|$LN5@SupportsRo|
	DCD	0x40000a04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SupportsRotation@OMAPFlatSurfaceManager@@UAAHXZ| PROC ; OMAPFlatSurfaceManager::SupportsRotation

; 1226 :     BOOL        SupportsRotation() { return TRUE; }

  00000		 |$LN5@SupportsRo|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M37424|
  00010	e3a03001	 mov         r3, #1
  00014	e58d3000	 str         r3, [sp]
  00018	e59d0000	 ldr         r0, [sp]
  0001c	e28dd004	 add         sp, sp, #4
  00020	e89d6000	 ldmia       sp, {sp, lr}
  00024	e12fff1e	 bx          lr
  00028		 |$M37425|

			 ENDP  ; |?SupportsRotation@OMAPFlatSurfaceManager@@UAAHXZ|, OMAPFlatSurfaceManager::SupportsRotation

	EXPORT	|??1OMAPFlatSurfaceManager@@UAA@XZ|	; OMAPFlatSurfaceManager::~OMAPFlatSurfaceManager

  00000			 AREA	 |.pdata|, PDATA
|$T37435| DCD	|$LN6@scalar@4|
	DCD	0x40001104
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??_GOMAPFlatSurfaceManager@@UAAPAXI@Z| PROC ; OMAPFlatSurfaceManager::`scalar deleting destructor'
  00000		 |$LN6@scalar@4|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M37432|
  00010	e59d000c	 ldr         r0, [sp, #0xC]
  00014	eb000000	 bl          |??1OMAPFlatSurfaceManager@@UAA@XZ|
  00018	e59d3010	 ldr         r3, [sp, #0x10]
  0001c	e3130001	 tst         r3, #1
  00020	0a000001	 beq         |$LN1@scalar@4|
  00024	e59d000c	 ldr         r0, [sp, #0xC]
  00028	eb000000	 bl          |??3@YAXPAX@Z|
  0002c		 |$LN1@scalar@4|
  0002c	e59d300c	 ldr         r3, [sp, #0xC]
  00030	e58d3000	 str         r3, [sp]
  00034	e59d0000	 ldr         r0, [sp]
  00038	e28dd004	 add         sp, sp, #4
  0003c	e89d6000	 ldmia       sp, {sp, lr}
  00040	e12fff1e	 bx          lr
  00044		 |$M37433|

			 ENDP  ; |??_GOMAPFlatSurfaceManager@@UAAPAXI@Z|, OMAPFlatSurfaceManager::`scalar deleting destructor'

	IMPORT	|VirtualFree|

  00060			 AREA	 |.pdata|, PDATA
|$T37442| DCD	|$LN9@OMAPFlatSu@4|
	DCD	0x40003504
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\dssai\surfmgr_flat.cpp

  02074			 AREA	 |.text|, CODE, ARM

  02074		 |??1OMAPFlatSurfaceManager@@UAA@XZ| PROC ; OMAPFlatSurfaceManager::~OMAPFlatSurfaceManager

; 628  : {

  02074		 |$LN9@OMAPFlatSu@4|
  02074	e1a0c00d	 mov         r12, sp
  02078	e92d0001	 stmdb       sp!, {r0}
  0207c	e92d5000	 stmdb       sp!, {r12, lr}
  02080	e24dd008	 sub         sp, sp, #8
  02084		 |$M37439|
  02084	e59f20b8	 ldr         r2, [pc, #0xB8]
  02088	e59d3010	 ldr         r3, [sp, #0x10]
  0208c	e5832000	 str         r2, [r3]

; 629  :     Heap*   pHeap = (Heap*) m_hHeap;

  02090	e59d3010	 ldr         r3, [sp, #0x10]
  02094	e2833004	 add         r3, r3, #4
  02098	e5933000	 ldr         r3, [r3]
  0209c	e58d3004	 str         r3, [sp, #4]

; 630  :     Heap*   pOffscreenHeap = (Heap*) m_hOffscreenHeap;

  020a0	e59d3010	 ldr         r3, [sp, #0x10]
  020a4	e2833014	 add         r3, r3, #0x14
  020a8	e5933000	 ldr         r3, [r3]
  020ac	e58d3000	 str         r3, [sp]

; 631  :     
; 632  :     //  Free the heap manager
; 633  :     if( pHeap )

  020b0	e59d3004	 ldr         r3, [sp, #4]
  020b4	e3530000	 cmp         r3, #0
  020b8	0a000001	 beq         |$LN4@OMAPFlatSu@4|

; 634  :         pHeap->Free();

  020bc	e59d0004	 ldr         r0, [sp, #4]
  020c0	eb000000	 bl          |?Free@Heap@@QAAXXZ|
  020c4		 |$LN4@OMAPFlatSu@4|

; 635  :         
; 636  :     //  Free memory
; 637  :     if( m_pVirtualDisplayBuffer ) 

  020c4	e59d3010	 ldr         r3, [sp, #0x10]
  020c8	e2833010	 add         r3, r3, #0x10
  020cc	e5933000	 ldr         r3, [r3]
  020d0	e3530000	 cmp         r3, #0
  020d4	0a000005	 beq         |$LN3@OMAPFlatSu@4|

; 638  :         VirtualFree( m_pVirtualDisplayBuffer, 0, MEM_RELEASE );

  020d8	e3a02902	 mov         r2, #2, 18
  020dc	e3a01000	 mov         r1, #0
  020e0	e59d3010	 ldr         r3, [sp, #0x10]
  020e4	e2833010	 add         r3, r3, #0x10
  020e8	e5930000	 ldr         r0, [r3]
  020ec	eb000000	 bl          VirtualFree
  020f0		 |$LN3@OMAPFlatSu@4|

; 639  :         
; 640  :     //  Free the offscreen heap manager
; 641  :     if( pOffscreenHeap )

  020f0	e59d3000	 ldr         r3, [sp]
  020f4	e3530000	 cmp         r3, #0
  020f8	0a000001	 beq         |$LN2@OMAPFlatSu@4|

; 642  :         pOffscreenHeap->Free();

  020fc	e59d0000	 ldr         r0, [sp]
  02100	eb000000	 bl          |?Free@Heap@@QAAXXZ|
  02104		 |$LN2@OMAPFlatSu@4|

; 643  :         
; 644  :     //  Free offscreen memory
; 645  :     if( m_pOffscreenBuffer ) 

  02104	e59d3010	 ldr         r3, [sp, #0x10]
  02108	e2833018	 add         r3, r3, #0x18
  0210c	e5933000	 ldr         r3, [r3]
  02110	e3530000	 cmp         r3, #0
  02114	0a000005	 beq         |$LN1@OMAPFlatSu@4|

; 646  :         VirtualFree( m_pOffscreenBuffer, 0, MEM_RELEASE );

  02118	e3a02902	 mov         r2, #2, 18
  0211c	e3a01000	 mov         r1, #0
  02120	e59d3010	 ldr         r3, [sp, #0x10]
  02124	e2833018	 add         r3, r3, #0x18
  02128	e5930000	 ldr         r0, [r3]
  0212c	eb000000	 bl          VirtualFree
  02130		 |$LN1@OMAPFlatSu@4|

; 647  : }

  02130	e59d0010	 ldr         r0, [sp, #0x10]
  02134	eb000000	 bl          |??1OMAPSurfaceManager@@UAA@XZ|
  02138	e28dd008	 add         sp, sp, #8
  0213c	e89d6000	 ldmia       sp, {sp, lr}
  02140	e12fff1e	 bx          lr
  02144		 |$LN10@OMAPFlatSu@4|
  02144		 |$LN11@OMAPFlatSu@4|
  02144	00000000	 DCD         |??_7OMAPFlatSurfaceManager@@6B@|
  02148		 |$M37440|

			 ENDP  ; |??1OMAPFlatSurfaceManager@@UAA@XZ|, OMAPFlatSurfaceManager::~OMAPFlatSurfaceManager

	EXPORT	|??_C@_1GA@DIFJGIBH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAc?$AAr?$AAe?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HG@FNPHLDFB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAC?$AAe?$AAS?$AAe?$AAt?$AAM?$AAe?$AAm?$AAo?$AAr?$AAy?$AAA?$AAt?$AAt?$AAr?$AAi?$AAb?$AAu@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GO@MCBJAPFN@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAm?$AAa?$AAp?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAc?$AAr?$AAe?$AAe?$AAn?$AA?5?$AAb@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EM@ENHBMIGK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAh?$AAe?$AAa?$AAp?$AA?5?$AAm?$AAa?$AAn@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HC@EPNPLMBO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAC?$AAe?$AAS?$AAe?$AAt?$AAM?$AAe?$AAm?$AAo?$AAr?$AAy?$AAA?$AAt?$AAt?$AAr?$AAi?$AAb?$AAu@| [ DATA ] ; `string'
	EXPORT	|CeSetMemoryAttributes|
	EXPORT	|??_C@_1GK@DMDHCCBB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAm?$AAa?$AAp?$AA?5?$AAd?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAb?$AAu?$AAf@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FE@IKMDMFGH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAd?$AAi?$AAs?$AAp?$AAl?$AAa@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FM@NNAPAAMJ@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAv?$AAi?$AAd?$AAe?$AAo?$AA?5?$AAm?$AAe?$AAm?$AAo?$AAr@| [ DATA ] ; `string'
	IMPORT	|??0Heap@@QAA@KKPAV0@0@Z|		; Heap::Heap
	IMPORT	|??2@YAPAXI@Z|				; operator new
	IMPORT	|VirtualCopy|
	IMPORT	|VirtualAlloc|
	IMPORT	|LcdPdd_GetMemory|

  00068			 AREA	 |.pdata|, PDATA
|$T37474| DCD	|$LN43@Initialize|
	DCD	0x40015904

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GA@DIFJGIBH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAc?$AAr?$AAe?$AAe@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "U", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e"
	DCB	0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "c", 0x0, "r"
	DCB	0x0, "e", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, " ", 0x0, "o"
	DCB	0x0, "f", 0x0, "f", 0x0, "s", 0x0, "c", 0x0, "r", 0x0, "e"
	DCB	0x0, "e", 0x0, "n", 0x0, " ", 0x0, "h", 0x0, "e", 0x0, "a"
	DCB	0x0, "p", 0x0, " ", 0x0, "m", 0x0, "a", 0x0, "n", 0x0, "a"
	DCB	0x0, "g", 0x0, "e", 0x0, "r", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HG@FNPHLDFB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAC?$AAe?$AAS?$AAe?$AAt?$AAM?$AAe?$AAm?$AAo?$AAr?$AAy?$AAA?$AAt?$AAt?$AAr?$AAi?$AAb?$AAu@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "F", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "C", 0x0, "e", 0x0, "S", 0x0, "e", 0x0, "t"
	DCB	0x0, "M", 0x0, "e", 0x0, "m", 0x0, "o", 0x0, "r", 0x0, "y"
	DCB	0x0, "A", 0x0, "t", 0x0, "t", 0x0, "r", 0x0, "i", 0x0, "b"
	DCB	0x0, "u", 0x0, "t", 0x0, "e", 0x0, "s", 0x0, " ", 0x0, "f"
	DCB	0x0, "o", 0x0, "r", 0x0, " ", 0x0, "o", 0x0, "f", 0x0, "f"
	DCB	0x0, "s", 0x0, "c", 0x0, "r", 0x0, "e", 0x0, "e", 0x0, "n"
	DCB	0x0, " ", 0x0, "b", 0x0, "u", 0x0, "f", 0x0, "f", 0x0, "e"
	DCB	0x0, "r", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GO@MCBJAPFN@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAm?$AAa?$AAp?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAc?$AAr?$AAe?$AAe?$AAn?$AA?5?$AAb@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "U", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e"
	DCB	0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "m", 0x0, "a"
	DCB	0x0, "p", 0x0, " ", 0x0, "o", 0x0, "f", 0x0, "f", 0x0, "s"
	DCB	0x0, "c", 0x0, "r", 0x0, "e", 0x0, "e", 0x0, "n", 0x0, " "
	DCB	0x0, "b", 0x0, "u", 0x0, "f", 0x0, "f", 0x0, "e", 0x0, "r"
	DCB	0x0, " ", 0x0, "p", 0x0, "h", 0x0, "y", 0x0, "s", 0x0, "i"
	DCB	0x0, "c", 0x0, "a", 0x0, "l", 0x0, " ", 0x0, "m", 0x0, "e"
	DCB	0x0, "m", 0x0, "o", 0x0, "r", 0x0, "y", 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EM@ENHBMIGK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAh?$AAe?$AAa?$AAp?$AA?5?$AAm?$AAa?$AAn@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "U", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e"
	DCB	0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "c", 0x0, "r"
	DCB	0x0, "e", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, " ", 0x0, "h"
	DCB	0x0, "e", 0x0, "a", 0x0, "p", 0x0, " ", 0x0, "m", 0x0, "a"
	DCB	0x0, "n", 0x0, "a", 0x0, "g", 0x0, "e", 0x0, "r", 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HC@EPNPLMBO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAC?$AAe?$AAS?$AAe?$AAt?$AAM?$AAe?$AAm?$AAo?$AAr?$AAy?$AAA?$AAt?$AAt?$AAr?$AAi?$AAb?$AAu@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "F", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "C", 0x0, "e", 0x0, "S", 0x0, "e", 0x0, "t"
	DCB	0x0, "M", 0x0, "e", 0x0, "m", 0x0, "o", 0x0, "r", 0x0, "y"
	DCB	0x0, "A", 0x0, "t", 0x0, "t", 0x0, "r", 0x0, "i", 0x0, "b"
	DCB	0x0, "u", 0x0, "t", 0x0, "e", 0x0, "s", 0x0, " ", 0x0, "f"
	DCB	0x0, "o", 0x0, "r", 0x0, " ", 0x0, "d", 0x0, "i", 0x0, "s"
	DCB	0x0, "p", 0x0, "l", 0x0, "a", 0x0, "y", 0x0, " ", 0x0, "b"
	DCB	0x0, "u", 0x0, "f", 0x0, "f", 0x0, "e", 0x0, "r", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GK@DMDHCCBB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAm?$AAa?$AAp?$AA?5?$AAd?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAb?$AAu?$AAf@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "U", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e"
	DCB	0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "m", 0x0, "a"
	DCB	0x0, "p", 0x0, " ", 0x0, "d", 0x0, "i", 0x0, "s", 0x0, "p"
	DCB	0x0, "l", 0x0, "a", 0x0, "y", 0x0, " ", 0x0, "b", 0x0, "u"
	DCB	0x0, "f", 0x0, "f", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, "p"
	DCB	0x0, "h", 0x0, "y", 0x0, "s", 0x0, "i", 0x0, "c", 0x0, "a"
	DCB	0x0, "l", 0x0, " ", 0x0, "m", 0x0, "e", 0x0, "m", 0x0, "o"
	DCB	0x0, "r", 0x0, "y", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FE@IKMDMFGH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAd?$AAi?$AAs?$AAp?$AAl?$AAa@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "U", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e"
	DCB	0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "a", 0x0, "l"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, " ", 0x0, "d", 0x0, "i", 0x0, "s", 0x0, "p", 0x0, "l"
	DCB	0x0, "a", 0x0, "y", 0x0, " ", 0x0, "b", 0x0, "u", 0x0, "f"
	DCB	0x0, "f", 0x0, "e", 0x0, "r", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FM@NNAPAAMJ@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAv?$AAi?$AAd?$AAe?$AAo?$AA?5?$AAm?$AAe?$AAm?$AAo?$AAr@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "U", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e"
	DCB	0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "g", 0x0, "e"
	DCB	0x0, "t", 0x0, " ", 0x0, "v", 0x0, "i", 0x0, "d", 0x0, "e"
	DCB	0x0, "o", 0x0, " ", 0x0, "m", 0x0, "e", 0x0, "m", 0x0, "o"
	DCB	0x0, "r", 0x0, "y", 0x0, " ", 0x0, "a", 0x0, "t", 0x0, "t"
	DCB	0x0, "r", 0x0, "i", 0x0, "b", 0x0, "u", 0x0, "t", 0x0, "e"
	DCB	0x0, "s", 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  02148			 AREA	 |.text|, CODE, ARM

  02148		 |?Initialize@OMAPFlatSurfaceManager@@UAAHK@Z| PROC ; OMAPFlatSurfaceManager::Initialize

; 654  : {

  02148		 |$LN43@Initialize|
  02148	e1a0c00d	 mov         r12, sp
  0214c	e92d0003	 stmdb       sp!, {r0, r1}
  02150	e92d5000	 stmdb       sp!, {r12, lr}
  02154	e24dd074	 sub         sp, sp, #0x74
  02158		 |$M37471|

; 655  :     BOOL    bResult;
; 656  :     Heap*   pHeap;
; 657  :     
; 658  :     
; 659  :     //  Get video memory attributes from LCD PDD
; 660  :     bResult = LcdPdd_GetMemory( &m_dwDisplayBufferSize, &m_dwPhysicalDisplayAddr );

  02158	e59d307c	 ldr         r3, [sp, #0x7C]
  0215c	e283100c	 add         r1, r3, #0xC
  02160	e59d307c	 ldr         r3, [sp, #0x7C]
  02164	e2830008	 add         r0, r3, #8
  02168	eb000000	 bl          LcdPdd_GetMemory
  0216c	e58d0024	 str         r0, [sp, #0x24]
  02170	e59d3024	 ldr         r3, [sp, #0x24]
  02174	e58d3008	 str         r3, [sp, #8]

; 661  :     if( !bResult )

  02178	e59d3008	 ldr         r3, [sp, #8]
  0217c	e3530000	 cmp         r3, #0
  02180	1a000008	 bne         |$LN18@Initialize|

; 662  :     {
; 663  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: Unable to get video memory attributes\n"));

  02184	e59f051c	 ldr         r0, [pc, #0x51C]
  02188	eb000000	 bl          NKDbgPrintfW
  0218c	e3a03001	 mov         r3, #1
  02190	e58d3028	 str         r3, [sp, #0x28]
  02194	ea000001	 b           |$LN22@Initialize|
  02198	e3a03000	 mov         r3, #0
  0219c	e58d3028	 str         r3, [sp, #0x28]
  021a0		 |$LN22@Initialize|

; 664  :         goto cleanUp;

  021a0	ea000133	 b           |$LN17@Initialize|
  021a4	ea000132	 b           |$cleanUp$36982|
  021a8		 |$LN18@Initialize|

; 665  :     }
; 666  :     
; 667  :     //  Check that offscreen reserve is not greater that all of display memory
; 668  :     if( dwOffscreenMemory >= m_dwDisplayBufferSize )

  021a8	e59d307c	 ldr         r3, [sp, #0x7C]
  021ac	e2833008	 add         r3, r3, #8
  021b0	e59d2080	 ldr         r2, [sp, #0x80]
  021b4	e5933000	 ldr         r3, [r3]
  021b8	e1520003	 cmp         r2, r3
  021bc	3a000001	 bcc         |$LN16@Initialize|

; 669  :         dwOffscreenMemory = 0;

  021c0	e3a03000	 mov         r3, #0
  021c4	e58d3080	 str         r3, [sp, #0x80]
  021c8		 |$LN16@Initialize|

; 670  :         
; 671  :         
; 672  :     //  Map physical memory to VM
; 673  :     m_pVirtualDisplayBuffer = VirtualAlloc(0, m_dwDisplayBufferSize, MEM_RESERVE, PAGE_NOACCESS);

  021c8	e3a03001	 mov         r3, #1
  021cc	e3a02a02	 mov         r2, #2, 20
  021d0	e59d107c	 ldr         r1, [sp, #0x7C]
  021d4	e2811008	 add         r1, r1, #8
  021d8	e5911000	 ldr         r1, [r1]
  021dc	e3a00000	 mov         r0, #0
  021e0	eb000000	 bl          VirtualAlloc
  021e4	e58d002c	 str         r0, [sp, #0x2C]
  021e8	e59d307c	 ldr         r3, [sp, #0x7C]
  021ec	e2832010	 add         r2, r3, #0x10
  021f0	e59d302c	 ldr         r3, [sp, #0x2C]
  021f4	e5823000	 str         r3, [r2]

; 674  :     if( !m_pVirtualDisplayBuffer )

  021f8	e59d307c	 ldr         r3, [sp, #0x7C]
  021fc	e2833010	 add         r3, r3, #0x10
  02200	e5933000	 ldr         r3, [r3]
  02204	e3530000	 cmp         r3, #0
  02208	1a000008	 bne         |$LN15@Initialize|

; 675  :     {
; 676  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: Unable to allocate display buffer\n"));

  0220c	e59f0490	 ldr         r0, [pc, #0x490]
  02210	eb000000	 bl          NKDbgPrintfW
  02214	e3a03001	 mov         r3, #1
  02218	e58d3030	 str         r3, [sp, #0x30]
  0221c	ea000001	 b           |$LN24@Initialize|
  02220	e3a03000	 mov         r3, #0
  02224	e58d3030	 str         r3, [sp, #0x30]
  02228		 |$LN24@Initialize|

; 677  :         goto cleanUp;

  02228	ea000111	 b           |$LN14@Initialize|
  0222c	ea000110	 b           |$cleanUp$36982|
  02230		 |$LN15@Initialize|

; 678  :     }
; 679  : 
; 680  :     if( !VirtualCopy(m_pVirtualDisplayBuffer, (void *)(m_dwPhysicalDisplayAddr >> 8), m_dwDisplayBufferSize-dwOffscreenMemory, PAGE_READWRITE | PAGE_NOCACHE | PAGE_PHYSICAL))

  02230	e3a03c06	 mov         r3, #6, 24
  02234	e3833004	 orr         r3, r3, #4
  02238	e59d207c	 ldr         r2, [sp, #0x7C]
  0223c	e2822008	 add         r2, r2, #8
  02240	e5921000	 ldr         r1, [r2]
  02244	e59d2080	 ldr         r2, [sp, #0x80]
  02248	e0412002	 sub         r2, r1, r2
  0224c	e59d107c	 ldr         r1, [sp, #0x7C]
  02250	e281100c	 add         r1, r1, #0xC
  02254	e5911000	 ldr         r1, [r1]
  02258	e1a01421	 mov         r1, r1, lsr #8
  0225c	e59d007c	 ldr         r0, [sp, #0x7C]
  02260	e2800010	 add         r0, r0, #0x10
  02264	e5900000	 ldr         r0, [r0]
  02268	eb000000	 bl          VirtualCopy
  0226c	e58d0034	 str         r0, [sp, #0x34]
  02270	e59d3034	 ldr         r3, [sp, #0x34]
  02274	e3530000	 cmp         r3, #0
  02278	1a000012	 bne         |$LN13@Initialize|

; 681  :     {
; 682  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: Unable to map display buffer physical memory\n"));

  0227c	e59f041c	 ldr         r0, [pc, #0x41C]
  02280	eb000000	 bl          NKDbgPrintfW
  02284	e3a03001	 mov         r3, #1
  02288	e58d3038	 str         r3, [sp, #0x38]
  0228c	ea000001	 b           |$LN26@Initialize|
  02290	e3a03000	 mov         r3, #0
  02294	e58d3038	 str         r3, [sp, #0x38]
  02298		 |$LN26@Initialize|

; 683  :         VirtualFree( m_pVirtualDisplayBuffer, 0, MEM_RELEASE );

  02298	e3a02902	 mov         r2, #2, 18
  0229c	e3a01000	 mov         r1, #0
  022a0	e59d307c	 ldr         r3, [sp, #0x7C]
  022a4	e2833010	 add         r3, r3, #0x10
  022a8	e5930000	 ldr         r0, [r3]
  022ac	eb000000	 bl          VirtualFree

; 684  :         m_pVirtualDisplayBuffer = NULL;

  022b0	e59d307c	 ldr         r3, [sp, #0x7C]
  022b4	e2832010	 add         r2, r3, #0x10
  022b8	e3a03000	 mov         r3, #0
  022bc	e5823000	 str         r3, [r2]
  022c0	ea0000eb	 b           |$LN12@Initialize|

; 685  :         goto cleanUp;

  022c4	ea0000ea	 b           |$cleanUp$36982|
  022c8		 |$LN13@Initialize|

; 686  :     }
; 687  : 
; 688  :     //  Change the attributes of the buffer for cache write combine
; 689  :     if( !CeSetMemoryAttributes(m_pVirtualDisplayBuffer, (void *)(m_dwPhysicalDisplayAddr >> 8), m_dwDisplayBufferSize-dwOffscreenMemory, PAGE_WRITECOMBINE))

  022c8	e3a03b01	 mov         r3, #1, 22
  022cc	e59d207c	 ldr         r2, [sp, #0x7C]
  022d0	e2822008	 add         r2, r2, #8
  022d4	e5921000	 ldr         r1, [r2]
  022d8	e59d2080	 ldr         r2, [sp, #0x80]
  022dc	e0412002	 sub         r2, r1, r2
  022e0	e59d107c	 ldr         r1, [sp, #0x7C]
  022e4	e281100c	 add         r1, r1, #0xC
  022e8	e5911000	 ldr         r1, [r1]
  022ec	e1a01421	 mov         r1, r1, lsr #8
  022f0	e59d007c	 ldr         r0, [sp, #0x7C]
  022f4	e2800010	 add         r0, r0, #0x10
  022f8	e5900000	 ldr         r0, [r0]
  022fc	eb000000	 bl          CeSetMemoryAttributes
  02300	e58d003c	 str         r0, [sp, #0x3C]
  02304	e59d303c	 ldr         r3, [sp, #0x3C]
  02308	e3530000	 cmp         r3, #0
  0230c	1a000012	 bne         |$LN11@Initialize|

; 690  :     {
; 691  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: Failed CeSetMemoryAttributes for display buffer\r\n"));

  02310	e59f0384	 ldr         r0, [pc, #0x384]
  02314	eb000000	 bl          NKDbgPrintfW
  02318	e3a03001	 mov         r3, #1
  0231c	e58d3040	 str         r3, [sp, #0x40]
  02320	ea000001	 b           |$LN28@Initialize|
  02324	e3a03000	 mov         r3, #0
  02328	e58d3040	 str         r3, [sp, #0x40]
  0232c		 |$LN28@Initialize|

; 692  :         VirtualFree( m_pVirtualDisplayBuffer, 0, MEM_RELEASE );

  0232c	e3a02902	 mov         r2, #2, 18
  02330	e3a01000	 mov         r1, #0
  02334	e59d307c	 ldr         r3, [sp, #0x7C]
  02338	e2833010	 add         r3, r3, #0x10
  0233c	e5930000	 ldr         r0, [r3]
  02340	eb000000	 bl          VirtualFree

; 693  :         m_pVirtualDisplayBuffer = NULL;

  02344	e59d307c	 ldr         r3, [sp, #0x7C]
  02348	e2832010	 add         r2, r3, #0x10
  0234c	e3a03000	 mov         r3, #0
  02350	e5823000	 str         r3, [r2]
  02354	ea0000c6	 b           |$LN10@Initialize|

; 694  :         goto cleanUp;

  02358	ea0000c5	 b           |$cleanUp$36982|
  0235c		 |$LN11@Initialize|

; 695  :     }
; 696  :     
; 697  :     //  Initialize the heap manager for the display memory
; 698  :     pHeap = new Heap(m_dwDisplayBufferSize-dwOffscreenMemory, (DWORD) m_pVirtualDisplayBuffer);

  0235c	e3a00014	 mov         r0, #0x14
  02360	eb000000	 bl          |??2@YAPAXI@Z|
  02364	e58d0044	 str         r0, [sp, #0x44]
  02368	e59d3044	 ldr         r3, [sp, #0x44]
  0236c	e58d3010	 str         r3, [sp, #0x10]
  02370	e59d3010	 ldr         r3, [sp, #0x10]
  02374	e3530000	 cmp         r3, #0
  02378	0a000010	 beq         |$LN29@Initialize|
  0237c	e3a03000	 mov         r3, #0
  02380	e58d3000	 str         r3, [sp]
  02384	e3a03000	 mov         r3, #0
  02388	e59d207c	 ldr         r2, [sp, #0x7C]
  0238c	e2822010	 add         r2, r2, #0x10
  02390	e5922000	 ldr         r2, [r2]
  02394	e59d107c	 ldr         r1, [sp, #0x7C]
  02398	e2811008	 add         r1, r1, #8
  0239c	e5910000	 ldr         r0, [r1]
  023a0	e59d1080	 ldr         r1, [sp, #0x80]
  023a4	e0401001	 sub         r1, r0, r1
  023a8	e59d0010	 ldr         r0, [sp, #0x10]
  023ac	eb000000	 bl          |??0Heap@@QAA@KKPAV0@0@Z|
  023b0	e58d0048	 str         r0, [sp, #0x48]
  023b4	e59d3048	 ldr         r3, [sp, #0x48]
  023b8	e58d304c	 str         r3, [sp, #0x4C]
  023bc	ea000001	 b           |$LN30@Initialize|
  023c0		 |$LN29@Initialize|
  023c0	e3a03000	 mov         r3, #0
  023c4	e58d304c	 str         r3, [sp, #0x4C]
  023c8		 |$LN30@Initialize|
  023c8	e59d304c	 ldr         r3, [sp, #0x4C]
  023cc	e58d3004	 str         r3, [sp, #4]

; 699  :     if( pHeap == NULL )

  023d0	e59d3004	 ldr         r3, [sp, #4]
  023d4	e3530000	 cmp         r3, #0
  023d8	1a000012	 bne         |$LN9@Initialize|

; 700  :     {
; 701  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: Unable to create heap manager\n"));

  023dc	e59f02b4	 ldr         r0, [pc, #0x2B4]
  023e0	eb000000	 bl          NKDbgPrintfW
  023e4	e3a03001	 mov         r3, #1
  023e8	e58d3050	 str         r3, [sp, #0x50]
  023ec	ea000001	 b           |$LN32@Initialize|
  023f0	e3a03000	 mov         r3, #0
  023f4	e58d3050	 str         r3, [sp, #0x50]
  023f8		 |$LN32@Initialize|

; 702  :         VirtualFree( m_pVirtualDisplayBuffer, 0, MEM_RELEASE );

  023f8	e3a02902	 mov         r2, #2, 18
  023fc	e3a01000	 mov         r1, #0
  02400	e59d307c	 ldr         r3, [sp, #0x7C]
  02404	e2833010	 add         r3, r3, #0x10
  02408	e5930000	 ldr         r0, [r3]
  0240c	eb000000	 bl          VirtualFree

; 703  :         m_pVirtualDisplayBuffer = NULL;

  02410	e59d307c	 ldr         r3, [sp, #0x7C]
  02414	e2832010	 add         r2, r3, #0x10
  02418	e3a03000	 mov         r3, #0
  0241c	e5823000	 str         r3, [r2]
  02420	ea000093	 b           |$LN8@Initialize|

; 704  :         goto cleanUp;

  02424	ea000092	 b           |$cleanUp$36982|
  02428		 |$LN9@Initialize|

; 705  :     }
; 706  :     
; 707  :     m_hHeap = (HANDLE) pHeap;

  02428	e59d307c	 ldr         r3, [sp, #0x7C]
  0242c	e2832004	 add         r2, r3, #4
  02430	e59d3004	 ldr         r3, [sp, #4]
  02434	e5823000	 str         r3, [r2]

; 708  : 
; 709  : 
; 710  :     //  Allocate physical memory for offscreen surfaces
; 711  :     if( dwOffscreenMemory > 0 )

  02438	e59d3080	 ldr         r3, [sp, #0x80]
  0243c	e3530000	 cmp         r3, #0
  02440	9a00008b	 bls         |$LN7@Initialize|

; 712  :     {
; 713  :         BYTE*   pOffscreenPtr = (BYTE*) m_pVirtualDisplayBuffer;

  02444	e59d307c	 ldr         r3, [sp, #0x7C]
  02448	e2833010	 add         r3, r3, #0x10
  0244c	e5933000	 ldr         r3, [r3]
  02450	e58d300c	 str         r3, [sp, #0xC]

; 714  : 
; 715  :         
; 716  :         //  Offset to where offscreen buffer is
; 717  :         pOffscreenPtr += m_dwDisplayBufferSize - dwOffscreenMemory;

  02454	e59d307c	 ldr         r3, [sp, #0x7C]
  02458	e2833008	 add         r3, r3, #8
  0245c	e5932000	 ldr         r2, [r3]
  02460	e59d3080	 ldr         r3, [sp, #0x80]
  02464	e0422003	 sub         r2, r2, r3
  02468	e59d300c	 ldr         r3, [sp, #0xC]
  0246c	e0833002	 add         r3, r3, r2
  02470	e58d300c	 str         r3, [sp, #0xC]

; 718  :         m_pOffscreenBuffer = (VOID*) pOffscreenPtr;

  02474	e59d307c	 ldr         r3, [sp, #0x7C]
  02478	e2832018	 add         r2, r3, #0x18
  0247c	e59d300c	 ldr         r3, [sp, #0xC]
  02480	e5823000	 str         r3, [r2]

; 719  :         m_dwOffscreenPhysical = m_dwPhysicalDisplayAddr + m_dwDisplayBufferSize - dwOffscreenMemory;

  02484	e59d307c	 ldr         r3, [sp, #0x7C]
  02488	e283200c	 add         r2, r3, #0xC
  0248c	e59d307c	 ldr         r3, [sp, #0x7C]
  02490	e2833008	 add         r3, r3, #8
  02494	e5922000	 ldr         r2, [r2]
  02498	e5933000	 ldr         r3, [r3]
  0249c	e0822003	 add         r2, r2, r3
  024a0	e59d3080	 ldr         r3, [sp, #0x80]
  024a4	e0422003	 sub         r2, r2, r3
  024a8	e59d307c	 ldr         r3, [sp, #0x7C]
  024ac	e283301c	 add         r3, r3, #0x1C
  024b0	e5832000	 str         r2, [r3]

; 720  :         
; 721  :         //  VirtualCopy offscreen memory region to follow m_pVirtualDisplayBuffer
; 722  :         if( !VirtualCopy(m_pOffscreenBuffer, (void *)(m_dwOffscreenPhysical >> 8), dwOffscreenMemory, PAGE_READWRITE | PAGE_NOCACHE | PAGE_PHYSICAL))

  024b4	e3a03c06	 mov         r3, #6, 24
  024b8	e3833004	 orr         r3, r3, #4
  024bc	e59d2080	 ldr         r2, [sp, #0x80]
  024c0	e59d107c	 ldr         r1, [sp, #0x7C]
  024c4	e281101c	 add         r1, r1, #0x1C
  024c8	e5911000	 ldr         r1, [r1]
  024cc	e1a01421	 mov         r1, r1, lsr #8
  024d0	e59d007c	 ldr         r0, [sp, #0x7C]
  024d4	e2800018	 add         r0, r0, #0x18
  024d8	e5900000	 ldr         r0, [r0]
  024dc	eb000000	 bl          VirtualCopy
  024e0	e58d0054	 str         r0, [sp, #0x54]
  024e4	e59d3054	 ldr         r3, [sp, #0x54]
  024e8	e3530000	 cmp         r3, #0
  024ec	1a00000c	 bne         |$LN6@Initialize|

; 723  :         {
; 724  :             DEBUGMSG (ZONE_ERROR, (L"ERROR: Unable to map offscreen buffer physical memory\n"));

  024f0	e59f019c	 ldr         r0, [pc, #0x19C]
  024f4	eb000000	 bl          NKDbgPrintfW
  024f8	e3a03001	 mov         r3, #1
  024fc	e58d3058	 str         r3, [sp, #0x58]
  02500	ea000001	 b           |$LN34@Initialize|
  02504	e3a03000	 mov         r3, #0
  02508	e58d3058	 str         r3, [sp, #0x58]
  0250c		 |$LN34@Initialize|

; 725  :             m_pOffscreenBuffer = NULL;

  0250c	e59d307c	 ldr         r3, [sp, #0x7C]
  02510	e2832018	 add         r2, r3, #0x18
  02514	e3a03000	 mov         r3, #0
  02518	e5823000	 str         r3, [r2]
  0251c	ea000054	 b           |$LN5@Initialize|

; 726  :             goto cleanUp;

  02520	ea000053	 b           |$cleanUp$36982|
  02524		 |$LN6@Initialize|

; 727  :         }
; 728  : 
; 729  :         //  Change the attributes of the buffer for cache write combine
; 730  :         if( !CeSetMemoryAttributes(m_pOffscreenBuffer, (void *)(m_dwOffscreenPhysical >> 8), dwOffscreenMemory, PAGE_WRITECOMBINE))

  02524	e3a03b01	 mov         r3, #1, 22
  02528	e59d2080	 ldr         r2, [sp, #0x80]
  0252c	e59d107c	 ldr         r1, [sp, #0x7C]
  02530	e281101c	 add         r1, r1, #0x1C
  02534	e5911000	 ldr         r1, [r1]
  02538	e1a01421	 mov         r1, r1, lsr #8
  0253c	e59d007c	 ldr         r0, [sp, #0x7C]
  02540	e2800018	 add         r0, r0, #0x18
  02544	e5900000	 ldr         r0, [r0]
  02548	eb000000	 bl          CeSetMemoryAttributes
  0254c	e58d005c	 str         r0, [sp, #0x5C]
  02550	e59d305c	 ldr         r3, [sp, #0x5C]
  02554	e3530000	 cmp         r3, #0
  02558	1a000012	 bne         |$LN4@Initialize|

; 731  :         {
; 732  :             DEBUGMSG(ZONE_ERROR, (L"ERROR: Failed CeSetMemoryAttributes for offscreen buffer\r\n"));

  0255c	e59f012c	 ldr         r0, [pc, #0x12C]
  02560	eb000000	 bl          NKDbgPrintfW
  02564	e3a03001	 mov         r3, #1
  02568	e58d3060	 str         r3, [sp, #0x60]
  0256c	ea000001	 b           |$LN36@Initialize|
  02570	e3a03000	 mov         r3, #0
  02574	e58d3060	 str         r3, [sp, #0x60]
  02578		 |$LN36@Initialize|

; 733  :             VirtualFree( m_pOffscreenBuffer, 0, MEM_RELEASE );

  02578	e3a02902	 mov         r2, #2, 18
  0257c	e3a01000	 mov         r1, #0
  02580	e59d307c	 ldr         r3, [sp, #0x7C]
  02584	e2833018	 add         r3, r3, #0x18
  02588	e5930000	 ldr         r0, [r3]
  0258c	eb000000	 bl          VirtualFree

; 734  :             m_pOffscreenBuffer = NULL;

  02590	e59d307c	 ldr         r3, [sp, #0x7C]
  02594	e2832018	 add         r2, r3, #0x18
  02598	e3a03000	 mov         r3, #0
  0259c	e5823000	 str         r3, [r2]
  025a0	ea000033	 b           |$LN3@Initialize|

; 735  :             goto cleanUp;

  025a4	ea000032	 b           |$cleanUp$36982|
  025a8		 |$LN4@Initialize|

; 736  :         }
; 737  : 
; 738  :         //  Initialize the heap manager for the offscreen memory
; 739  :         pHeap = new Heap(dwOffscreenMemory, (DWORD) m_pOffscreenBuffer);

  025a8	e3a00014	 mov         r0, #0x14
  025ac	eb000000	 bl          |??2@YAPAXI@Z|
  025b0	e58d0064	 str         r0, [sp, #0x64]
  025b4	e59d3064	 ldr         r3, [sp, #0x64]
  025b8	e58d3014	 str         r3, [sp, #0x14]
  025bc	e59d3014	 ldr         r3, [sp, #0x14]
  025c0	e3530000	 cmp         r3, #0
  025c4	0a00000c	 beq         |$LN37@Initialize|
  025c8	e3a03000	 mov         r3, #0
  025cc	e58d3000	 str         r3, [sp]
  025d0	e3a03000	 mov         r3, #0
  025d4	e59d207c	 ldr         r2, [sp, #0x7C]
  025d8	e2822018	 add         r2, r2, #0x18
  025dc	e5922000	 ldr         r2, [r2]
  025e0	e59d1080	 ldr         r1, [sp, #0x80]
  025e4	e59d0014	 ldr         r0, [sp, #0x14]
  025e8	eb000000	 bl          |??0Heap@@QAA@KKPAV0@0@Z|
  025ec	e58d0068	 str         r0, [sp, #0x68]
  025f0	e59d3068	 ldr         r3, [sp, #0x68]
  025f4	e58d306c	 str         r3, [sp, #0x6C]
  025f8	ea000001	 b           |$LN38@Initialize|
  025fc		 |$LN37@Initialize|
  025fc	e3a03000	 mov         r3, #0
  02600	e58d306c	 str         r3, [sp, #0x6C]
  02604		 |$LN38@Initialize|
  02604	e59d306c	 ldr         r3, [sp, #0x6C]
  02608	e58d3004	 str         r3, [sp, #4]

; 740  :         if( pHeap == NULL )

  0260c	e59d3004	 ldr         r3, [sp, #4]
  02610	e3530000	 cmp         r3, #0
  02614	1a000012	 bne         |$LN2@Initialize|

; 741  :         {
; 742  :             DEBUGMSG (ZONE_ERROR, (L"ERROR: Unable to create offscreen heap manager\n"));

  02618	e59f006c	 ldr         r0, [pc, #0x6C]
  0261c	eb000000	 bl          NKDbgPrintfW
  02620	e3a03001	 mov         r3, #1
  02624	e58d3070	 str         r3, [sp, #0x70]
  02628	ea000001	 b           |$LN40@Initialize|
  0262c	e3a03000	 mov         r3, #0
  02630	e58d3070	 str         r3, [sp, #0x70]
  02634		 |$LN40@Initialize|

; 743  :             VirtualFree( m_pOffscreenBuffer, 0, MEM_RELEASE );

  02634	e3a02902	 mov         r2, #2, 18
  02638	e3a01000	 mov         r1, #0
  0263c	e59d307c	 ldr         r3, [sp, #0x7C]
  02640	e2833018	 add         r3, r3, #0x18
  02644	e5930000	 ldr         r0, [r3]
  02648	eb000000	 bl          VirtualFree

; 744  :             m_pOffscreenBuffer = NULL;

  0264c	e59d307c	 ldr         r3, [sp, #0x7C]
  02650	e2832018	 add         r2, r3, #0x18
  02654	e3a03000	 mov         r3, #0
  02658	e5823000	 str         r3, [r2]
  0265c	ea000004	 b           |$LN1@Initialize|

; 745  :             goto cleanUp;

  02660	ea000003	 b           |$cleanUp$36982|
  02664		 |$LN2@Initialize|

; 746  :         }
; 747  :         
; 748  :         m_hOffscreenHeap = (HANDLE) pHeap;

  02664	e59d307c	 ldr         r3, [sp, #0x7C]
  02668	e2832014	 add         r2, r3, #0x14
  0266c	e59d3004	 ldr         r3, [sp, #4]
  02670	e5823000	 str         r3, [r2]
  02674		 |$LN7@Initialize|
  02674		 |$LN1@Initialize|
  02674		 |$LN3@Initialize|
  02674		 |$LN5@Initialize|
  02674		 |$LN8@Initialize|
  02674		 |$LN10@Initialize|
  02674		 |$LN12@Initialize|
  02674		 |$LN14@Initialize|
  02674		 |$LN17@Initialize|
  02674		 |$cleanUp$36982|

; 749  :     }
; 750  : 
; 751  : cleanUp:
; 752  :     //  Retrun result
; 753  :     return bResult;

  02674	e59d3008	 ldr         r3, [sp, #8]
  02678	e58d3020	 str         r3, [sp, #0x20]

; 754  : }

  0267c	e59d0020	 ldr         r0, [sp, #0x20]
  02680	e28dd074	 add         sp, sp, #0x74
  02684	e89d6000	 ldmia       sp, {sp, lr}
  02688	e12fff1e	 bx          lr
  0268c		 |$LN44@Initialize|
  0268c		 |$LN45@Initialize|
  0268c	00000000	 DCD         |??_C@_1GA@DIFJGIBH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAc?$AAr?$AAe?$AAe@|
  02690		 |$LN46@Initialize|
  02690	00000000	 DCD         |??_C@_1HG@FNPHLDFB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAC?$AAe?$AAS?$AAe?$AAt?$AAM?$AAe?$AAm?$AAo?$AAr?$AAy?$AAA?$AAt?$AAt?$AAr?$AAi?$AAb?$AAu@|
  02694		 |$LN47@Initialize|
  02694	00000000	 DCD         |??_C@_1GO@MCBJAPFN@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAm?$AAa?$AAp?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAc?$AAr?$AAe?$AAe?$AAn?$AA?5?$AAb@|
  02698		 |$LN48@Initialize|
  02698	00000000	 DCD         |??_C@_1EM@ENHBMIGK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAh?$AAe?$AAa?$AAp?$AA?5?$AAm?$AAa?$AAn@|
  0269c		 |$LN49@Initialize|
  0269c	00000000	 DCD         |??_C@_1HC@EPNPLMBO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAC?$AAe?$AAS?$AAe?$AAt?$AAM?$AAe?$AAm?$AAo?$AAr?$AAy?$AAA?$AAt?$AAt?$AAr?$AAi?$AAb?$AAu@|
  026a0		 |$LN50@Initialize|
  026a0	00000000	 DCD         |??_C@_1GK@DMDHCCBB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAm?$AAa?$AAp?$AA?5?$AAd?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAb?$AAu?$AAf@|
  026a4		 |$LN51@Initialize|
  026a4	00000000	 DCD         |??_C@_1FE@IKMDMFGH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAd?$AAi?$AAs?$AAp?$AAl?$AAa@|
  026a8		 |$LN52@Initialize|
  026a8	00000000	 DCD         |??_C@_1FM@NNAPAAMJ@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAv?$AAi?$AAd?$AAe?$AAo?$AA?5?$AAm?$AAe?$AAm?$AAo?$AAr@|
  026ac		 |$M37472|

			 ENDP  ; |?Initialize@OMAPFlatSurfaceManager@@UAAHK@Z|, OMAPFlatSurfaceManager::Initialize

	IMPORT	|KernelLibIoControl|
; File c:\wince600\public\common\oak\inc\pkfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T37492| DCD	|$LN5@CeSetMemor|
	DCD	0x40001604
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |CeSetMemoryAttributes| PROC

; 1422 : {

  00000		 |$LN5@CeSetMemor|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d000f	 stmdb       sp!, {r0 - r3}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd020	 sub         sp, sp, #0x20
  00010		 |$M37489|

; 1423 :     return KernelLibIoControl ((HANDLE) KMOD_CORE, IOCTL_KLIB_SETMEMORYATTR,
; 1424 :         pVirtualAddr, cbSize, pShiftedPhysAddr, dwAttributes, NULL);

  00010	e3a03000	 mov         r3, #0
  00014	e58d3008	 str         r3, [sp, #8]
  00018	e59d3034	 ldr         r3, [sp, #0x34]
  0001c	e58d3004	 str         r3, [sp, #4]
  00020	e59d302c	 ldr         r3, [sp, #0x2C]
  00024	e58d3000	 str         r3, [sp]
  00028	e59d3030	 ldr         r3, [sp, #0x30]
  0002c	e59d2028	 ldr         r2, [sp, #0x28]
  00030	e3a0100c	 mov         r1, #0xC
  00034	e3a00001	 mov         r0, #1
  00038	eb000000	 bl          KernelLibIoControl
  0003c	e58d001c	 str         r0, [sp, #0x1C]
  00040	e59d301c	 ldr         r3, [sp, #0x1C]
  00044	e58d3018	 str         r3, [sp, #0x18]

; 1425 : }

  00048	e59d0018	 ldr         r0, [sp, #0x18]
  0004c	e28dd020	 add         sp, sp, #0x20
  00050	e89d6000	 ldmia       sp, {sp, lr}
  00054	e12fff1e	 bx          lr
  00058		 |$M37490|

			 ENDP  ; |CeSetMemoryAttributes|


  00070			 AREA	 |.pdata|, PDATA
|$T37500| DCD	|$LN5@TotalMemor|
	DCD	0x40000c04
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\dssai\surfmgr_flat.cpp

  026ac			 AREA	 |.text|, CODE, ARM

  026ac		 |?TotalMemorySize@OMAPFlatSurfaceManager@@UAAKXZ| PROC ; OMAPFlatSurfaceManager::TotalMemorySize

; 759  : {

  026ac		 |$LN5@TotalMemor|
  026ac	e1a0c00d	 mov         r12, sp
  026b0	e92d0001	 stmdb       sp!, {r0}
  026b4	e92d5000	 stmdb       sp!, {r12, lr}
  026b8	e24dd004	 sub         sp, sp, #4
  026bc		 |$M37497|

; 760  :     //  Return total display memory size
; 761  :     return m_dwDisplayBufferSize;

  026bc	e59d300c	 ldr         r3, [sp, #0xC]
  026c0	e2833008	 add         r3, r3, #8
  026c4	e5933000	 ldr         r3, [r3]
  026c8	e58d3000	 str         r3, [sp]

; 762  : }

  026cc	e59d0000	 ldr         r0, [sp]
  026d0	e28dd004	 add         sp, sp, #4
  026d4	e89d6000	 ldmia       sp, {sp, lr}
  026d8	e12fff1e	 bx          lr
  026dc		 |$M37498|

			 ENDP  ; |?TotalMemorySize@OMAPFlatSurfaceManager@@UAAKXZ|, OMAPFlatSurfaceManager::TotalMemorySize

	IMPORT	|?TotalFree@Heap@@QAAKXZ|		; Heap::TotalFree

  00078			 AREA	 |.pdata|, PDATA
|$T37506| DCD	|$LN5@FreeMemory|
	DCD	0x40001104
; Function compile flags: /Odtp

  026dc			 AREA	 |.text|, CODE, ARM

  026dc		 |?FreeMemorySize@OMAPFlatSurfaceManager@@UAAKXZ| PROC ; OMAPFlatSurfaceManager::FreeMemorySize

; 767  : {

  026dc		 |$LN5@FreeMemory|
  026dc	e1a0c00d	 mov         r12, sp
  026e0	e92d0001	 stmdb       sp!, {r0}
  026e4	e92d5000	 stmdb       sp!, {r12, lr}
  026e8	e24dd00c	 sub         sp, sp, #0xC
  026ec		 |$M37503|

; 768  :     Heap*   pHeap = (Heap*) m_hHeap;

  026ec	e59d3014	 ldr         r3, [sp, #0x14]
  026f0	e2833004	 add         r3, r3, #4
  026f4	e5933000	 ldr         r3, [r3]
  026f8	e58d3000	 str         r3, [sp]

; 769  : 
; 770  :     //  Return free memory of heap
; 771  :     return pHeap->TotalFree();

  026fc	e59d0000	 ldr         r0, [sp]
  02700	eb000000	 bl          |?TotalFree@Heap@@QAAKXZ|
  02704	e58d0008	 str         r0, [sp, #8]
  02708	e59d3008	 ldr         r3, [sp, #8]
  0270c	e58d3004	 str         r3, [sp, #4]

; 772  : }

  02710	e59d0004	 ldr         r0, [sp, #4]
  02714	e28dd00c	 add         sp, sp, #0xC
  02718	e89d6000	 ldmia       sp, {sp, lr}
  0271c	e12fff1e	 bx          lr
  02720		 |$M37504|

			 ENDP  ; |?FreeMemorySize@OMAPFlatSurfaceManager@@UAAKXZ|, OMAPFlatSurfaceManager::FreeMemorySize


  00080			 AREA	 |.pdata|, PDATA
|$T37512| DCD	|$LN5@VirtualBas|
	DCD	0x40000c04
; Function compile flags: /Odtp

  02720			 AREA	 |.text|, CODE, ARM

  02720		 |?VirtualBaseAddr@OMAPFlatSurfaceManager@@UAAPAXXZ| PROC ; OMAPFlatSurfaceManager::VirtualBaseAddr

; 777  : {

  02720		 |$LN5@VirtualBas|
  02720	e1a0c00d	 mov         r12, sp
  02724	e92d0001	 stmdb       sp!, {r0}
  02728	e92d5000	 stmdb       sp!, {r12, lr}
  0272c	e24dd004	 sub         sp, sp, #4
  02730		 |$M37509|

; 778  :     //  Return base address of display memory
; 779  :     return m_pVirtualDisplayBuffer;

  02730	e59d300c	 ldr         r3, [sp, #0xC]
  02734	e2833010	 add         r3, r3, #0x10
  02738	e5933000	 ldr         r3, [r3]
  0273c	e58d3000	 str         r3, [sp]

; 780  : }

  02740	e59d0000	 ldr         r0, [sp]
  02744	e28dd004	 add         sp, sp, #4
  02748	e89d6000	 ldmia       sp, {sp, lr}
  0274c	e12fff1e	 bx          lr
  02750		 |$M37510|

			 ENDP  ; |?VirtualBaseAddr@OMAPFlatSurfaceManager@@UAAPAXXZ|, OMAPFlatSurfaceManager::VirtualBaseAddr


  00088			 AREA	 |.pdata|, PDATA
|$T37518| DCD	|$LN5@NumPhysica|
	DCD	0x40000a04
; Function compile flags: /Odtp

  02750			 AREA	 |.text|, CODE, ARM

  02750		 |?NumPhysicalAddr@OMAPFlatSurfaceManager@@UAAKXZ| PROC ; OMAPFlatSurfaceManager::NumPhysicalAddr

; 785  : {

  02750		 |$LN5@NumPhysica|
  02750	e1a0c00d	 mov         r12, sp
  02754	e92d0001	 stmdb       sp!, {r0}
  02758	e92d5000	 stmdb       sp!, {r12, lr}
  0275c	e24dd004	 sub         sp, sp, #4
  02760		 |$M37515|

; 786  :     //  Flat memory manager has only a single physical memory segment
; 787  :     return 1;

  02760	e3a03001	 mov         r3, #1
  02764	e58d3000	 str         r3, [sp]

; 788  : }

  02768	e59d0000	 ldr         r0, [sp]
  0276c	e28dd004	 add         sp, sp, #4
  02770	e89d6000	 ldmia       sp, {sp, lr}
  02774	e12fff1e	 bx          lr
  02778		 |$M37516|

			 ENDP  ; |?NumPhysicalAddr@OMAPFlatSurfaceManager@@UAAKXZ|, OMAPFlatSurfaceManager::NumPhysicalAddr


  00090			 AREA	 |.pdata|, PDATA
|$T37524| DCD	|$LN6@PhysicalLe|
	DCD	0x40001304
; Function compile flags: /Odtp

  02778			 AREA	 |.text|, CODE, ARM

  02778		 |?PhysicalLen@OMAPFlatSurfaceManager@@UAAKK@Z| PROC ; OMAPFlatSurfaceManager::PhysicalLen

; 793  : {

  02778		 |$LN6@PhysicalLe|
  02778	e1a0c00d	 mov         r12, sp
  0277c	e92d0003	 stmdb       sp!, {r0, r1}
  02780	e92d5000	 stmdb       sp!, {r12, lr}
  02784	e24dd008	 sub         sp, sp, #8
  02788		 |$M37521|

; 794  :     DWORD   dwLen = 0;        

  02788	e3a03000	 mov         r3, #0
  0278c	e58d3000	 str         r3, [sp]

; 795  : 
; 796  :     //  Flat memory manager has only a single physical memory segment
; 797  :     if( dwIndex == 0 )

  02790	e59d3014	 ldr         r3, [sp, #0x14]
  02794	e3530000	 cmp         r3, #0
  02798	1a000003	 bne         |$LN1@PhysicalLe|

; 798  :         dwLen = m_dwDisplayBufferSize;

  0279c	e59d3010	 ldr         r3, [sp, #0x10]
  027a0	e2833008	 add         r3, r3, #8
  027a4	e5933000	 ldr         r3, [r3]
  027a8	e58d3000	 str         r3, [sp]
  027ac		 |$LN1@PhysicalLe|

; 799  :     
; 800  :     //  Return length of segment
; 801  :     return dwLen;

  027ac	e59d3000	 ldr         r3, [sp]
  027b0	e58d3004	 str         r3, [sp, #4]

; 802  : }

  027b4	e59d0004	 ldr         r0, [sp, #4]
  027b8	e28dd008	 add         sp, sp, #8
  027bc	e89d6000	 ldmia       sp, {sp, lr}
  027c0	e12fff1e	 bx          lr
  027c4		 |$M37522|

			 ENDP  ; |?PhysicalLen@OMAPFlatSurfaceManager@@UAAKK@Z|, OMAPFlatSurfaceManager::PhysicalLen


  00098			 AREA	 |.pdata|, PDATA
|$T37530| DCD	|$LN6@PhysicalAd@2|
	DCD	0x40001304
; Function compile flags: /Odtp

  027c4			 AREA	 |.text|, CODE, ARM

  027c4		 |?PhysicalAddr@OMAPFlatSurfaceManager@@UAAKK@Z| PROC ; OMAPFlatSurfaceManager::PhysicalAddr

; 807  : {

  027c4		 |$LN6@PhysicalAd@2|
  027c4	e1a0c00d	 mov         r12, sp
  027c8	e92d0003	 stmdb       sp!, {r0, r1}
  027cc	e92d5000	 stmdb       sp!, {r12, lr}
  027d0	e24dd008	 sub         sp, sp, #8
  027d4		 |$M37527|

; 808  :     DWORD   dwAddr = 0;        

  027d4	e3a03000	 mov         r3, #0
  027d8	e58d3000	 str         r3, [sp]

; 809  : 
; 810  :     //  Flat memory manager has only a single physical memory segment
; 811  :     if( dwIndex == 0 )

  027dc	e59d3014	 ldr         r3, [sp, #0x14]
  027e0	e3530000	 cmp         r3, #0
  027e4	1a000003	 bne         |$LN1@PhysicalAd@2|

; 812  :         dwAddr = m_dwPhysicalDisplayAddr;

  027e8	e59d3010	 ldr         r3, [sp, #0x10]
  027ec	e283300c	 add         r3, r3, #0xC
  027f0	e5933000	 ldr         r3, [r3]
  027f4	e58d3000	 str         r3, [sp]
  027f8		 |$LN1@PhysicalAd@2|

; 813  :     
; 814  :     //  Return physical address of segment
; 815  :     return dwAddr;

  027f8	e59d3000	 ldr         r3, [sp]
  027fc	e58d3004	 str         r3, [sp, #4]

; 816  : }

  02800	e59d0004	 ldr         r0, [sp, #4]
  02804	e28dd008	 add         sp, sp, #8
  02808	e89d6000	 ldmia       sp, {sp, lr}
  0280c	e12fff1e	 bx          lr
  02810		 |$M37528|

			 ENDP  ; |?PhysicalAddr@OMAPFlatSurfaceManager@@UAAKK@Z|, OMAPFlatSurfaceManager::PhysicalAddr


  000a0			 AREA	 |.pdata|, PDATA
|$T37538| DCD	|$LN7@SupportsOf|
	DCD	0x40001404
; Function compile flags: /Odtp

  02810			 AREA	 |.text|, CODE, ARM

  02810		 |?SupportsOffscreenSurfaces@OMAPFlatSurfaceManager@@UAAHXZ| PROC ; OMAPFlatSurfaceManager::SupportsOffscreenSurfaces

; 821  : {

  02810		 |$LN7@SupportsOf|
  02810	e1a0c00d	 mov         r12, sp
  02814	e92d0001	 stmdb       sp!, {r0}
  02818	e92d5000	 stmdb       sp!, {r12, lr}
  0281c	e24dd008	 sub         sp, sp, #8
  02820		 |$M37535|

; 822  :     //  If offscreen heap allocated, return TRUE
; 823  :     return( m_hOffscreenHeap != NULL );

  02820	e59d3010	 ldr         r3, [sp, #0x10]
  02824	e2833014	 add         r3, r3, #0x14
  02828	e5933000	 ldr         r3, [r3]
  0282c	e3530000	 cmp         r3, #0
  02830	0a000002	 beq         |$LN3@SupportsOf|
  02834	e3a03001	 mov         r3, #1
  02838	e58d3004	 str         r3, [sp, #4]
  0283c	ea000001	 b           |$LN4@SupportsOf|
  02840		 |$LN3@SupportsOf|
  02840	e3a03000	 mov         r3, #0
  02844	e58d3004	 str         r3, [sp, #4]
  02848		 |$LN4@SupportsOf|
  02848	e59d3004	 ldr         r3, [sp, #4]
  0284c	e58d3000	 str         r3, [sp]

; 824  : }

  02850	e59d0000	 ldr         r0, [sp]
  02854	e28dd008	 add         sp, sp, #8
  02858	e89d6000	 ldmia       sp, {sp, lr}
  0285c	e12fff1e	 bx          lr
  02860		 |$M37536|

			 ENDP  ; |?SupportsOffscreenSurfaces@OMAPFlatSurfaceManager@@UAAHXZ|, OMAPFlatSurfaceManager::SupportsOffscreenSurfaces

	EXPORT	|??_C@_1GE@NEDOGLIO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAO?$AAM?$AAA?$AAP?$AAF?$AAl@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FC@HIPOHGJO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAO?$AAM?$AAA?$AAP?$AAF?$AAl?$AAa?$AAt@| [ DATA ] ; `string'

  000a8			 AREA	 |.pdata|, PDATA
|$T37561| DCD	|$LN23@Allocate@2|
	DCD	0x40007804

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GE@NEDOGLIO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAO?$AAM?$AAA?$AAP?$AAF?$AAl@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "U", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e"
	DCB	0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "a", 0x0, "l"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, " ", 0x0, "O", 0x0, "M", 0x0, "A", 0x0, "P", 0x0, "F"
	DCB	0x0, "l", 0x0, "a", 0x0, "t", 0x0, "S", 0x0, "u", 0x0, "r"
	DCB	0x0, "f", 0x0, "a", 0x0, "c", 0x0, "e", 0x0, " ", 0x0, "m"
	DCB	0x0, "e", 0x0, "m", 0x0, "o", 0x0, "r", 0x0, "y", 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FC@HIPOHGJO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAO?$AAM?$AAA?$AAP?$AAF?$AAl?$AAa?$AAt@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "U", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e"
	DCB	0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "c", 0x0, "r"
	DCB	0x0, "e", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, " ", 0x0, "O"
	DCB	0x0, "M", 0x0, "A", 0x0, "P", 0x0, "F", 0x0, "l", 0x0, "a"
	DCB	0x0, "t", 0x0, "S", 0x0, "u", 0x0, "r", 0x0, "f", 0x0, "a"
	DCB	0x0, "c", 0x0, "e", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  02860			 AREA	 |.text|, CODE, ARM

  02860		 |?Allocate@OMAPFlatSurfaceManager@@UAAHW4OMAP_DSS_PIXELFORMAT@@KKPAPAVOMAPSurface@@@Z| PROC ; OMAPFlatSurfaceManager::Allocate

; 834  : {

  02860		 |$LN23@Allocate@2|
  02860	e1a0c00d	 mov         r12, sp
  02864	e92d000f	 stmdb       sp!, {r0 - r3}
  02868	e92d5000	 stmdb       sp!, {r12, lr}
  0286c	e24dd054	 sub         sp, sp, #0x54
  02870		 |$M37558|

; 835  :     BOOL            bResult;
; 836  :     OMAPFlatSurface *pFlatSurface;
; 837  :     Heap*           pHeap = (Heap*) m_hHeap;

  02870	e59d305c	 ldr         r3, [sp, #0x5C]
  02874	e2833004	 add         r3, r3, #4
  02878	e5933000	 ldr         r3, [r3]
  0287c	e58d3008	 str         r3, [sp, #8]

; 838  :     
; 839  :     //  Check return pointer
; 840  :     if( ppSurface == NULL )

  02880	e59d306c	 ldr         r3, [sp, #0x6C]
  02884	e3530000	 cmp         r3, #0
  02888	1a000001	 bne         |$LN6@Allocate@2|
  0288c	ea000052	 b           |$LN5@Allocate@2|

; 841  :         goto cleanUp;    

  02890	ea000051	 b           |$cleanUp$37072|
  02894		 |$LN6@Allocate@2|

; 842  :     
; 843  :     //  Initialize return pointer
; 844  :     *ppSurface = NULL;

  02894	e59d206c	 ldr         r2, [sp, #0x6C]
  02898	e3a03000	 mov         r3, #0
  0289c	e5823000	 str         r3, [r2]

; 845  : 
; 846  :     //  Allocate a new flat surface object
; 847  :     pFlatSurface = new OMAPFlatSurface;

  028a0	e3a000b8	 mov         r0, #0xB8
  028a4	eb000000	 bl          |??2@YAPAXI@Z|
  028a8	e58d002c	 str         r0, [sp, #0x2C]
  028ac	e59d302c	 ldr         r3, [sp, #0x2C]
  028b0	e58d3014	 str         r3, [sp, #0x14]
  028b4	e59d3014	 ldr         r3, [sp, #0x14]
  028b8	e3530000	 cmp         r3, #0
  028bc	0a000005	 beq         |$LN9@Allocate@2|
  028c0	e59d0014	 ldr         r0, [sp, #0x14]
  028c4	eb000000	 bl          |??0OMAPFlatSurface@@QAA@XZ|
  028c8	e58d0030	 str         r0, [sp, #0x30]
  028cc	e59d3030	 ldr         r3, [sp, #0x30]
  028d0	e58d3034	 str         r3, [sp, #0x34]
  028d4	ea000001	 b           |$LN10@Allocate@2|
  028d8		 |$LN9@Allocate@2|
  028d8	e3a03000	 mov         r3, #0
  028dc	e58d3034	 str         r3, [sp, #0x34]
  028e0		 |$LN10@Allocate@2|
  028e0	e59d3034	 ldr         r3, [sp, #0x34]
  028e4	e58d3010	 str         r3, [sp, #0x10]

; 848  :     if( pFlatSurface == NULL )

  028e8	e59d3010	 ldr         r3, [sp, #0x10]
  028ec	e3530000	 cmp         r3, #0
  028f0	1a000008	 bne         |$LN4@Allocate@2|

; 849  :     {
; 850  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: Unable to create OMAPFlatSurface\n"));

  028f4	e59f0140	 ldr         r0, [pc, #0x140]
  028f8	eb000000	 bl          NKDbgPrintfW
  028fc	e3a03001	 mov         r3, #1
  02900	e58d3038	 str         r3, [sp, #0x38]
  02904	ea000001	 b           |$LN12@Allocate@2|
  02908	e3a03000	 mov         r3, #0
  0290c	e58d3038	 str         r3, [sp, #0x38]
  02910		 |$LN12@Allocate@2|

; 851  :         goto cleanUp;

  02910	ea000031	 b           |$LN3@Allocate@2|
  02914	ea000030	 b           |$cleanUp$37072|
  02918		 |$LN4@Allocate@2|

; 852  :     }
; 853  : 
; 854  :     //  Allocate the memory for the surface
; 855  :     bResult = pFlatSurface->Allocate(
; 856  :                                 ePixelFormat,
; 857  :                                 dwWidth,
; 858  :                                 dwHeight,
; 859  :                                 pHeap,
; 860  :                                 m_dwPhysicalDisplayAddr );

  02918	e59d305c	 ldr         r3, [sp, #0x5C]
  0291c	e283300c	 add         r3, r3, #0xC
  02920	e5933000	 ldr         r3, [r3]
  02924	e58d3004	 str         r3, [sp, #4]
  02928	e59d3008	 ldr         r3, [sp, #8]
  0292c	e58d3000	 str         r3, [sp]
  02930	e59d3068	 ldr         r3, [sp, #0x68]
  02934	e59d2064	 ldr         r2, [sp, #0x64]
  02938	e59d1060	 ldr         r1, [sp, #0x60]
  0293c	e59d0010	 ldr         r0, [sp, #0x10]
  02940	eb000000	 bl          |?Allocate@OMAPFlatSurface@@QAAHW4OMAP_DSS_PIXELFORMAT@@KKPAXK@Z|
  02944	e58d003c	 str         r0, [sp, #0x3C]
  02948	e59d303c	 ldr         r3, [sp, #0x3C]
  0294c	e58d300c	 str         r3, [sp, #0xC]

; 861  :     if( bResult == FALSE )

  02950	e59d300c	 ldr         r3, [sp, #0xC]
  02954	e3530000	 cmp         r3, #0
  02958	1a00001c	 bne         |$LN2@Allocate@2|

; 862  :     {
; 863  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: Unable to allocate OMAPFlatSurface memory\n"));

  0295c	e59f00d4	 ldr         r0, [pc, #0xD4]
  02960	eb000000	 bl          NKDbgPrintfW
  02964	e3a03001	 mov         r3, #1
  02968	e58d3040	 str         r3, [sp, #0x40]
  0296c	ea000001	 b           |$LN14@Allocate@2|
  02970	e3a03000	 mov         r3, #0
  02974	e58d3040	 str         r3, [sp, #0x40]
  02978		 |$LN14@Allocate@2|

; 864  :         delete pFlatSurface;

  02978	e59d3010	 ldr         r3, [sp, #0x10]
  0297c	e58d301c	 str         r3, [sp, #0x1C]
  02980	e59d301c	 ldr         r3, [sp, #0x1C]
  02984	e58d3018	 str         r3, [sp, #0x18]
  02988	e59d3018	 ldr         r3, [sp, #0x18]
  0298c	e3530000	 cmp         r3, #0
  02990	0a00000a	 beq         |$LN15@Allocate@2|
  02994	e3a01001	 mov         r1, #1
  02998	e59d3018	 ldr         r3, [sp, #0x18]
  0299c	e5933000	 ldr         r3, [r3]
  029a0	e59d0018	 ldr         r0, [sp, #0x18]
  029a4	e5933000	 ldr         r3, [r3]
  029a8	e1a0e00f	 mov         lr, pc
  029ac	e12fff13	 bx          r3
  029b0	e58d0044	 str         r0, [sp, #0x44]
  029b4	e59d3044	 ldr         r3, [sp, #0x44]
  029b8	e58d3048	 str         r3, [sp, #0x48]
  029bc	ea000001	 b           |$LN16@Allocate@2|
  029c0		 |$LN15@Allocate@2|
  029c0	e3a03000	 mov         r3, #0
  029c4	e58d3048	 str         r3, [sp, #0x48]
  029c8		 |$LN16@Allocate@2|

; 865  :         goto cleanUp;

  029c8	ea000003	 b           |$LN1@Allocate@2|
  029cc	ea000002	 b           |$cleanUp$37072|
  029d0		 |$LN2@Allocate@2|

; 866  :     }    
; 867  : 
; 868  :     //  Return the new surface
; 869  :     *ppSurface = pFlatSurface;            

  029d0	e59d2010	 ldr         r2, [sp, #0x10]
  029d4	e59d306c	 ldr         r3, [sp, #0x6C]
  029d8	e5832000	 str         r2, [r3]
  029dc		 |$LN1@Allocate@2|
  029dc		 |$LN3@Allocate@2|
  029dc		 |$LN5@Allocate@2|
  029dc		 |$cleanUp$37072|

; 870  :     
; 871  : cleanUp:    
; 872  :     //  Return result
; 873  :     return (ppSurface == NULL) ? FALSE : (*ppSurface != NULL);

  029dc	e59d306c	 ldr         r3, [sp, #0x6C]
  029e0	e3530000	 cmp         r3, #0
  029e4	1a000002	 bne         |$LN19@Allocate@2|
  029e8	e3a03000	 mov         r3, #0
  029ec	e58d304c	 str         r3, [sp, #0x4C]
  029f0	ea00000a	 b           |$LN20@Allocate@2|
  029f4		 |$LN19@Allocate@2|
  029f4	e59d306c	 ldr         r3, [sp, #0x6C]
  029f8	e5933000	 ldr         r3, [r3]
  029fc	e3530000	 cmp         r3, #0
  02a00	0a000002	 beq         |$LN17@Allocate@2|
  02a04	e3a03001	 mov         r3, #1
  02a08	e58d3050	 str         r3, [sp, #0x50]
  02a0c	ea000001	 b           |$LN18@Allocate@2|
  02a10		 |$LN17@Allocate@2|
  02a10	e3a03000	 mov         r3, #0
  02a14	e58d3050	 str         r3, [sp, #0x50]
  02a18		 |$LN18@Allocate@2|
  02a18	e59d3050	 ldr         r3, [sp, #0x50]
  02a1c	e58d304c	 str         r3, [sp, #0x4C]
  02a20		 |$LN20@Allocate@2|
  02a20	e59d304c	 ldr         r3, [sp, #0x4C]
  02a24	e58d3028	 str         r3, [sp, #0x28]

; 874  : }

  02a28	e59d0028	 ldr         r0, [sp, #0x28]
  02a2c	e28dd054	 add         sp, sp, #0x54
  02a30	e89d6000	 ldmia       sp, {sp, lr}
  02a34	e12fff1e	 bx          lr
  02a38		 |$LN24@Allocate@2|
  02a38		 |$LN25@Allocate@2|
  02a38	00000000	 DCD         |??_C@_1GE@NEDOGLIO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAO?$AAM?$AAA?$AAP?$AAF?$AAl@|
  02a3c		 |$LN26@Allocate@2|
  02a3c	00000000	 DCD         |??_C@_1FC@HIPOHGJO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAO?$AAM?$AAA?$AAP?$AAF?$AAl?$AAa?$AAt@|
  02a40		 |$M37559|

			 ENDP  ; |?Allocate@OMAPFlatSurfaceManager@@UAAHW4OMAP_DSS_PIXELFORMAT@@KKPAPAVOMAPSurface@@@Z|, OMAPFlatSurfaceManager::Allocate

	IMPORT	|?SetAssocSurface@OMAPSurface@@QAAHPAV1@@Z| ; OMAPSurface::SetAssocSurface
	IMPORT	|?SetSurfaceType@OMAPSurface@@QAAHW4OMAP_SURFACE_TYPE@@@Z| ; OMAPSurface::SetSurfaceType

  000b0			 AREA	 |.pdata|, PDATA
|$T37587| DCD	|$LN23@Allocate@3|
	DCD	0x40008104
; Function compile flags: /Odtp

  02a40			 AREA	 |.text|, CODE, ARM

  02a40		 |?Allocate@OMAPFlatSurfaceManager@@UAAHW4OMAP_DSS_PIXELFORMAT@@KKPAPAVOMAPSurface@@PAV3@@Z| PROC ; OMAPFlatSurfaceManager::Allocate

; 885  : {

  02a40		 |$LN23@Allocate@3|
  02a40	e1a0c00d	 mov         r12, sp
  02a44	e92d000f	 stmdb       sp!, {r0 - r3}
  02a48	e92d5000	 stmdb       sp!, {r12, lr}
  02a4c	e24dd054	 sub         sp, sp, #0x54
  02a50		 |$M37584|

; 886  :     BOOL            bResult;
; 887  :     OMAPFlatSurface *pFlatSurface;
; 888  :     Heap*           pHeap = (Heap*) m_hHeap;

  02a50	e59d305c	 ldr         r3, [sp, #0x5C]
  02a54	e2833004	 add         r3, r3, #4
  02a58	e5933000	 ldr         r3, [r3]
  02a5c	e58d3008	 str         r3, [sp, #8]

; 889  : 
; 890  : 
; 891  :     //  Check return pointer
; 892  :     if( ppAssocSurface == NULL )

  02a60	e59d306c	 ldr         r3, [sp, #0x6C]
  02a64	e3530000	 cmp         r3, #0
  02a68	1a000001	 bne         |$LN6@Allocate@3|
  02a6c	ea00005b	 b           |$LN5@Allocate@3|

; 893  :         goto cleanUp;    

  02a70	ea00005a	 b           |$cleanUp$37100|
  02a74		 |$LN6@Allocate@3|

; 894  :     
; 895  :     //  Initialize return pointer
; 896  :     *ppAssocSurface = NULL;

  02a74	e59d206c	 ldr         r2, [sp, #0x6C]
  02a78	e3a03000	 mov         r3, #0
  02a7c	e5823000	 str         r3, [r2]

; 897  : 
; 898  :     //  Allocate a new flat surface object
; 899  :     pFlatSurface = new OMAPFlatSurface;

  02a80	e3a000b8	 mov         r0, #0xB8
  02a84	eb000000	 bl          |??2@YAPAXI@Z|
  02a88	e58d002c	 str         r0, [sp, #0x2C]
  02a8c	e59d302c	 ldr         r3, [sp, #0x2C]
  02a90	e58d3014	 str         r3, [sp, #0x14]
  02a94	e59d3014	 ldr         r3, [sp, #0x14]
  02a98	e3530000	 cmp         r3, #0
  02a9c	0a000005	 beq         |$LN9@Allocate@3|
  02aa0	e59d0014	 ldr         r0, [sp, #0x14]
  02aa4	eb000000	 bl          |??0OMAPFlatSurface@@QAA@XZ|
  02aa8	e58d0030	 str         r0, [sp, #0x30]
  02aac	e59d3030	 ldr         r3, [sp, #0x30]
  02ab0	e58d3034	 str         r3, [sp, #0x34]
  02ab4	ea000001	 b           |$LN10@Allocate@3|
  02ab8		 |$LN9@Allocate@3|
  02ab8	e3a03000	 mov         r3, #0
  02abc	e58d3034	 str         r3, [sp, #0x34]
  02ac0		 |$LN10@Allocate@3|
  02ac0	e59d3034	 ldr         r3, [sp, #0x34]
  02ac4	e58d3010	 str         r3, [sp, #0x10]

; 900  :     if( pFlatSurface == NULL )

  02ac8	e59d3010	 ldr         r3, [sp, #0x10]
  02acc	e3530000	 cmp         r3, #0
  02ad0	1a000008	 bne         |$LN4@Allocate@3|

; 901  :     {
; 902  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: Unable to create OMAPFlatSurface\n"));

  02ad4	e59f0164	 ldr         r0, [pc, #0x164]
  02ad8	eb000000	 bl          NKDbgPrintfW
  02adc	e3a03001	 mov         r3, #1
  02ae0	e58d3038	 str         r3, [sp, #0x38]
  02ae4	ea000001	 b           |$LN12@Allocate@3|
  02ae8	e3a03000	 mov         r3, #0
  02aec	e58d3038	 str         r3, [sp, #0x38]
  02af0		 |$LN12@Allocate@3|

; 903  :         goto cleanUp;

  02af0	ea00003a	 b           |$LN3@Allocate@3|
  02af4	ea000039	 b           |$cleanUp$37100|
  02af8		 |$LN4@Allocate@3|

; 904  :     }
; 905  : 
; 906  :     //  Allocate the memory for the surface
; 907  :     bResult = pFlatSurface->Allocate(
; 908  :                                 ePixelFormat,
; 909  :                                 dwWidth,
; 910  :                                 dwHeight,
; 911  :                                 pHeap,
; 912  :                                 m_dwPhysicalDisplayAddr );

  02af8	e59d305c	 ldr         r3, [sp, #0x5C]
  02afc	e283300c	 add         r3, r3, #0xC
  02b00	e5933000	 ldr         r3, [r3]
  02b04	e58d3004	 str         r3, [sp, #4]
  02b08	e59d3008	 ldr         r3, [sp, #8]
  02b0c	e58d3000	 str         r3, [sp]
  02b10	e59d3068	 ldr         r3, [sp, #0x68]
  02b14	e59d2064	 ldr         r2, [sp, #0x64]
  02b18	e59d1060	 ldr         r1, [sp, #0x60]
  02b1c	e59d0010	 ldr         r0, [sp, #0x10]
  02b20	eb000000	 bl          |?Allocate@OMAPFlatSurface@@QAAHW4OMAP_DSS_PIXELFORMAT@@KKPAXK@Z|
  02b24	e58d003c	 str         r0, [sp, #0x3C]
  02b28	e59d303c	 ldr         r3, [sp, #0x3C]
  02b2c	e58d300c	 str         r3, [sp, #0xC]

; 913  :     if( bResult == FALSE )

  02b30	e59d300c	 ldr         r3, [sp, #0xC]
  02b34	e3530000	 cmp         r3, #0
  02b38	1a00001c	 bne         |$LN2@Allocate@3|

; 914  :     {
; 915  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: Unable to allocate OMAPFlatSurface memory\n"));

  02b3c	e59f00f8	 ldr         r0, [pc, #0xF8]
  02b40	eb000000	 bl          NKDbgPrintfW
  02b44	e3a03001	 mov         r3, #1
  02b48	e58d3040	 str         r3, [sp, #0x40]
  02b4c	ea000001	 b           |$LN14@Allocate@3|
  02b50	e3a03000	 mov         r3, #0
  02b54	e58d3040	 str         r3, [sp, #0x40]
  02b58		 |$LN14@Allocate@3|

; 916  :         delete pFlatSurface;

  02b58	e59d3010	 ldr         r3, [sp, #0x10]
  02b5c	e58d301c	 str         r3, [sp, #0x1C]
  02b60	e59d301c	 ldr         r3, [sp, #0x1C]
  02b64	e58d3018	 str         r3, [sp, #0x18]
  02b68	e59d3018	 ldr         r3, [sp, #0x18]
  02b6c	e3530000	 cmp         r3, #0
  02b70	0a00000a	 beq         |$LN15@Allocate@3|
  02b74	e3a01001	 mov         r1, #1
  02b78	e59d3018	 ldr         r3, [sp, #0x18]
  02b7c	e5933000	 ldr         r3, [r3]
  02b80	e59d0018	 ldr         r0, [sp, #0x18]
  02b84	e5933000	 ldr         r3, [r3]
  02b88	e1a0e00f	 mov         lr, pc
  02b8c	e12fff13	 bx          r3
  02b90	e58d0044	 str         r0, [sp, #0x44]
  02b94	e59d3044	 ldr         r3, [sp, #0x44]
  02b98	e58d3048	 str         r3, [sp, #0x48]
  02b9c	ea000001	 b           |$LN16@Allocate@3|
  02ba0		 |$LN15@Allocate@3|
  02ba0	e3a03000	 mov         r3, #0
  02ba4	e58d3048	 str         r3, [sp, #0x48]
  02ba8		 |$LN16@Allocate@3|

; 917  :         goto cleanUp;

  02ba8	ea00000c	 b           |$LN1@Allocate@3|
  02bac	ea00000b	 b           |$cleanUp$37100|
  02bb0		 |$LN2@Allocate@3|

; 918  :     }
; 919  : 
; 920  :     pFlatSurface->SetSurfaceType(OMAP_SURFACE_RESIZER);

  02bb0	e3a01001	 mov         r1, #1
  02bb4	e59d0010	 ldr         r0, [sp, #0x10]
  02bb8	eb000000	 bl          |?SetSurfaceType@OMAPSurface@@QAAHW4OMAP_SURFACE_TYPE@@@Z|

; 921  :     pFlatSurface->SetAssocSurface(pSurface);

  02bbc	e59d1070	 ldr         r1, [sp, #0x70]
  02bc0	e59d0010	 ldr         r0, [sp, #0x10]
  02bc4	eb000000	 bl          |?SetAssocSurface@OMAPSurface@@QAAHPAV1@@Z|

; 922  :     pSurface->SetAssocSurface(pFlatSurface);    

  02bc8	e59d1010	 ldr         r1, [sp, #0x10]
  02bcc	e59d0070	 ldr         r0, [sp, #0x70]
  02bd0	eb000000	 bl          |?SetAssocSurface@OMAPSurface@@QAAHPAV1@@Z|

; 923  :     
; 924  : 
; 925  :     //  Return the new surface
; 926  :     *ppAssocSurface = pFlatSurface; 

  02bd4	e59d2010	 ldr         r2, [sp, #0x10]
  02bd8	e59d306c	 ldr         r3, [sp, #0x6C]
  02bdc	e5832000	 str         r2, [r3]
  02be0		 |$LN1@Allocate@3|
  02be0		 |$LN3@Allocate@3|
  02be0		 |$LN5@Allocate@3|
  02be0		 |$cleanUp$37100|

; 927  :     
; 928  : cleanUp:        
; 929  :     //  Return result
; 930  :     return (ppAssocSurface == NULL) ? FALSE : (*ppAssocSurface != NULL);

  02be0	e59d306c	 ldr         r3, [sp, #0x6C]
  02be4	e3530000	 cmp         r3, #0
  02be8	1a000002	 bne         |$LN19@Allocate@3|
  02bec	e3a03000	 mov         r3, #0
  02bf0	e58d304c	 str         r3, [sp, #0x4C]
  02bf4	ea00000a	 b           |$LN20@Allocate@3|
  02bf8		 |$LN19@Allocate@3|
  02bf8	e59d306c	 ldr         r3, [sp, #0x6C]
  02bfc	e5933000	 ldr         r3, [r3]
  02c00	e3530000	 cmp         r3, #0
  02c04	0a000002	 beq         |$LN17@Allocate@3|
  02c08	e3a03001	 mov         r3, #1
  02c0c	e58d3050	 str         r3, [sp, #0x50]
  02c10	ea000001	 b           |$LN18@Allocate@3|
  02c14		 |$LN17@Allocate@3|
  02c14	e3a03000	 mov         r3, #0
  02c18	e58d3050	 str         r3, [sp, #0x50]
  02c1c		 |$LN18@Allocate@3|
  02c1c	e59d3050	 ldr         r3, [sp, #0x50]
  02c20	e58d304c	 str         r3, [sp, #0x4C]
  02c24		 |$LN20@Allocate@3|
  02c24	e59d304c	 ldr         r3, [sp, #0x4C]
  02c28	e58d3028	 str         r3, [sp, #0x28]

; 931  : }

  02c2c	e59d0028	 ldr         r0, [sp, #0x28]
  02c30	e28dd054	 add         sp, sp, #0x54
  02c34	e89d6000	 ldmia       sp, {sp, lr}
  02c38	e12fff1e	 bx          lr
  02c3c		 |$LN24@Allocate@3|
  02c3c		 |$LN25@Allocate@3|
  02c3c	00000000	 DCD         |??_C@_1GE@NEDOGLIO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAO?$AAM?$AAA?$AAP?$AAF?$AAl@|
  02c40		 |$LN26@Allocate@3|
  02c40	00000000	 DCD         |??_C@_1FC@HIPOHGJO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAO?$AAM?$AAA?$AAP?$AAF?$AAl?$AAa?$AAt@|
  02c44		 |$M37585|

			 ENDP  ; |?Allocate@OMAPFlatSurfaceManager@@UAAHW4OMAP_DSS_PIXELFORMAT@@KKPAPAVOMAPSurface@@PAV3@@Z|, OMAPFlatSurfaceManager::Allocate

	EXPORT	|??_C@_1HI@GOKCDAPL@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAc?$AAr@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GG@IINJNKHN@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAc?$AAr?$AAe?$AAe@| [ DATA ] ; `string'

  000b8			 AREA	 |.pdata|, PDATA
|$T37613| DCD	|$LN25@AllocateGD|
	DCD	0x40007d04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HI@GOKCDAPL@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAc?$AAr@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "U", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e"
	DCB	0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "a", 0x0, "l"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, " ", 0x0, "o", 0x0, "f", 0x0, "f", 0x0, "s", 0x0, "c"
	DCB	0x0, "r", 0x0, "e", 0x0, "e", 0x0, "n", 0x0, " ", 0x0, "O"
	DCB	0x0, "M", 0x0, "A", 0x0, "P", 0x0, "F", 0x0, "l", 0x0, "a"
	DCB	0x0, "t", 0x0, "S", 0x0, "u", 0x0, "r", 0x0, "f", 0x0, "a"
	DCB	0x0, "c", 0x0, "e", 0x0, " ", 0x0, "m", 0x0, "e", 0x0, "m"
	DCB	0x0, "o", 0x0, "r", 0x0, "y", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GG@IINJNKHN@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAc?$AAr?$AAe?$AAe@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "U", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e"
	DCB	0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "c", 0x0, "r"
	DCB	0x0, "e", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, " ", 0x0, "o"
	DCB	0x0, "f", 0x0, "f", 0x0, "s", 0x0, "c", 0x0, "r", 0x0, "e"
	DCB	0x0, "e", 0x0, "n", 0x0, " ", 0x0, "O", 0x0, "M", 0x0, "A"
	DCB	0x0, "P", 0x0, "F", 0x0, "l", 0x0, "a", 0x0, "t", 0x0, "S"
	DCB	0x0, "u", 0x0, "r", 0x0, "f", 0x0, "a", 0x0, "c", 0x0, "e"
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  02c44			 AREA	 |.text|, CODE, ARM

  02c44		 |?AllocateGDI@OMAPFlatSurfaceManager@@UAAHW4OMAP_DSS_PIXELFORMAT@@KKPAPAVOMAPSurface@@@Z| PROC ; OMAPFlatSurfaceManager::AllocateGDI

; 941  : {

  02c44		 |$LN25@AllocateGD|
  02c44	e1a0c00d	 mov         r12, sp
  02c48	e92d000f	 stmdb       sp!, {r0 - r3}
  02c4c	e92d5000	 stmdb       sp!, {r12, lr}
  02c50	e24dd054	 sub         sp, sp, #0x54
  02c54		 |$M37610|

; 942  : //    return Allocate(ePixelFormat, dwWidth, dwHeight, ppSurface);
; 943  : 
; 944  :     BOOL            bResult;
; 945  :     OMAPFlatSurface *pFlatSurface;
; 946  :     Heap*           pHeap = (Heap*) m_hOffscreenHeap;

  02c54	e59d305c	 ldr         r3, [sp, #0x5C]
  02c58	e2833014	 add         r3, r3, #0x14
  02c5c	e5933000	 ldr         r3, [r3]
  02c60	e58d3008	 str         r3, [sp, #8]

; 947  :     
; 948  :     //  Check return pointer
; 949  :     if( ppSurface == NULL )

  02c64	e59d306c	 ldr         r3, [sp, #0x6C]
  02c68	e3530000	 cmp         r3, #0
  02c6c	1a000001	 bne         |$LN8@AllocateGD|
  02c70	ea000057	 b           |$LN7@AllocateGD|

; 950  :         goto cleanUp;    

  02c74	ea000056	 b           |$cleanUp$37125|
  02c78		 |$LN8@AllocateGD|

; 951  :     
; 952  :     //  Initialize return pointer
; 953  :     *ppSurface = NULL;

  02c78	e59d206c	 ldr         r2, [sp, #0x6C]
  02c7c	e3a03000	 mov         r3, #0
  02c80	e5823000	 str         r3, [r2]

; 954  : 
; 955  :     //  Check for offscreen heap
; 956  :     if( pHeap == NULL )

  02c84	e59d3008	 ldr         r3, [sp, #8]
  02c88	e3530000	 cmp         r3, #0
  02c8c	1a000001	 bne         |$LN6@AllocateGD|
  02c90	ea00004f	 b           |$LN5@AllocateGD|

; 957  :         goto cleanUp;

  02c94	ea00004e	 b           |$cleanUp$37125|
  02c98		 |$LN6@AllocateGD|

; 958  :         
; 959  :         
; 960  :     //  Allocate a new flat surface object
; 961  :     pFlatSurface = new OMAPFlatSurface;

  02c98	e3a000b8	 mov         r0, #0xB8
  02c9c	eb000000	 bl          |??2@YAPAXI@Z|
  02ca0	e58d002c	 str         r0, [sp, #0x2C]
  02ca4	e59d302c	 ldr         r3, [sp, #0x2C]
  02ca8	e58d3014	 str         r3, [sp, #0x14]
  02cac	e59d3014	 ldr         r3, [sp, #0x14]
  02cb0	e3530000	 cmp         r3, #0
  02cb4	0a000005	 beq         |$LN11@AllocateGD|
  02cb8	e59d0014	 ldr         r0, [sp, #0x14]
  02cbc	eb000000	 bl          |??0OMAPFlatSurface@@QAA@XZ|
  02cc0	e58d0030	 str         r0, [sp, #0x30]
  02cc4	e59d3030	 ldr         r3, [sp, #0x30]
  02cc8	e58d3034	 str         r3, [sp, #0x34]
  02ccc	ea000001	 b           |$LN12@AllocateGD|
  02cd0		 |$LN11@AllocateGD|
  02cd0	e3a03000	 mov         r3, #0
  02cd4	e58d3034	 str         r3, [sp, #0x34]
  02cd8		 |$LN12@AllocateGD|
  02cd8	e59d3034	 ldr         r3, [sp, #0x34]
  02cdc	e58d3010	 str         r3, [sp, #0x10]

; 962  :     if( pFlatSurface == NULL )

  02ce0	e59d3010	 ldr         r3, [sp, #0x10]
  02ce4	e3530000	 cmp         r3, #0
  02ce8	1a000008	 bne         |$LN4@AllocateGD|

; 963  :     {
; 964  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: Unable to create offscreen OMAPFlatSurface\n"));

  02cec	e59f0140	 ldr         r0, [pc, #0x140]
  02cf0	eb000000	 bl          NKDbgPrintfW
  02cf4	e3a03001	 mov         r3, #1
  02cf8	e58d3038	 str         r3, [sp, #0x38]
  02cfc	ea000001	 b           |$LN14@AllocateGD|
  02d00	e3a03000	 mov         r3, #0
  02d04	e58d3038	 str         r3, [sp, #0x38]
  02d08		 |$LN14@AllocateGD|

; 965  :         goto cleanUp;

  02d08	ea000031	 b           |$LN3@AllocateGD|
  02d0c	ea000030	 b           |$cleanUp$37125|
  02d10		 |$LN4@AllocateGD|

; 966  :     }
; 967  : 
; 968  :     //  Allocate the memory for the offscreen surface
; 969  :     bResult = pFlatSurface->Allocate(
; 970  :                                 ePixelFormat,
; 971  :                                 dwWidth,
; 972  :                                 dwHeight,
; 973  :                                 pHeap,
; 974  :                                 m_dwOffscreenPhysical );

  02d10	e59d305c	 ldr         r3, [sp, #0x5C]
  02d14	e283301c	 add         r3, r3, #0x1C
  02d18	e5933000	 ldr         r3, [r3]
  02d1c	e58d3004	 str         r3, [sp, #4]
  02d20	e59d3008	 ldr         r3, [sp, #8]
  02d24	e58d3000	 str         r3, [sp]
  02d28	e59d3068	 ldr         r3, [sp, #0x68]
  02d2c	e59d2064	 ldr         r2, [sp, #0x64]
  02d30	e59d1060	 ldr         r1, [sp, #0x60]
  02d34	e59d0010	 ldr         r0, [sp, #0x10]
  02d38	eb000000	 bl          |?Allocate@OMAPFlatSurface@@QAAHW4OMAP_DSS_PIXELFORMAT@@KKPAXK@Z|
  02d3c	e58d003c	 str         r0, [sp, #0x3C]
  02d40	e59d303c	 ldr         r3, [sp, #0x3C]
  02d44	e58d300c	 str         r3, [sp, #0xC]

; 975  :     if( bResult == FALSE )

  02d48	e59d300c	 ldr         r3, [sp, #0xC]
  02d4c	e3530000	 cmp         r3, #0
  02d50	1a00001c	 bne         |$LN2@AllocateGD|

; 976  :     {
; 977  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: Unable to allocate offscreen OMAPFlatSurface memory\n"));

  02d54	e59f00d4	 ldr         r0, [pc, #0xD4]
  02d58	eb000000	 bl          NKDbgPrintfW
  02d5c	e3a03001	 mov         r3, #1
  02d60	e58d3040	 str         r3, [sp, #0x40]
  02d64	ea000001	 b           |$LN16@AllocateGD|
  02d68	e3a03000	 mov         r3, #0
  02d6c	e58d3040	 str         r3, [sp, #0x40]
  02d70		 |$LN16@AllocateGD|

; 978  :         delete pFlatSurface;

  02d70	e59d3010	 ldr         r3, [sp, #0x10]
  02d74	e58d301c	 str         r3, [sp, #0x1C]
  02d78	e59d301c	 ldr         r3, [sp, #0x1C]
  02d7c	e58d3018	 str         r3, [sp, #0x18]
  02d80	e59d3018	 ldr         r3, [sp, #0x18]
  02d84	e3530000	 cmp         r3, #0
  02d88	0a00000a	 beq         |$LN17@AllocateGD|
  02d8c	e3a01001	 mov         r1, #1
  02d90	e59d3018	 ldr         r3, [sp, #0x18]
  02d94	e5933000	 ldr         r3, [r3]
  02d98	e59d0018	 ldr         r0, [sp, #0x18]
  02d9c	e5933000	 ldr         r3, [r3]
  02da0	e1a0e00f	 mov         lr, pc
  02da4	e12fff13	 bx          r3
  02da8	e58d0044	 str         r0, [sp, #0x44]
  02dac	e59d3044	 ldr         r3, [sp, #0x44]
  02db0	e58d3048	 str         r3, [sp, #0x48]
  02db4	ea000001	 b           |$LN18@AllocateGD|
  02db8		 |$LN17@AllocateGD|
  02db8	e3a03000	 mov         r3, #0
  02dbc	e58d3048	 str         r3, [sp, #0x48]
  02dc0		 |$LN18@AllocateGD|

; 979  :         goto cleanUp;

  02dc0	ea000003	 b           |$LN1@AllocateGD|
  02dc4	ea000002	 b           |$cleanUp$37125|
  02dc8		 |$LN2@AllocateGD|

; 980  :     }
; 981  : 
; 982  :     //  Return the new surface
; 983  :     *ppSurface = pFlatSurface;            

  02dc8	e59d2010	 ldr         r2, [sp, #0x10]
  02dcc	e59d306c	 ldr         r3, [sp, #0x6C]
  02dd0	e5832000	 str         r2, [r3]
  02dd4		 |$LN1@AllocateGD|
  02dd4		 |$LN3@AllocateGD|
  02dd4		 |$LN5@AllocateGD|
  02dd4		 |$LN7@AllocateGD|
  02dd4		 |$cleanUp$37125|

; 984  :     
; 985  : cleanUp:    
; 986  :     //  Return result
; 987  :     return (ppSurface == NULL) ? FALSE : (*ppSurface != NULL);

  02dd4	e59d306c	 ldr         r3, [sp, #0x6C]
  02dd8	e3530000	 cmp         r3, #0
  02ddc	1a000002	 bne         |$LN21@AllocateGD|
  02de0	e3a03000	 mov         r3, #0
  02de4	e58d304c	 str         r3, [sp, #0x4C]
  02de8	ea00000a	 b           |$LN22@AllocateGD|
  02dec		 |$LN21@AllocateGD|
  02dec	e59d306c	 ldr         r3, [sp, #0x6C]
  02df0	e5933000	 ldr         r3, [r3]
  02df4	e3530000	 cmp         r3, #0
  02df8	0a000002	 beq         |$LN19@AllocateGD|
  02dfc	e3a03001	 mov         r3, #1
  02e00	e58d3050	 str         r3, [sp, #0x50]
  02e04	ea000001	 b           |$LN20@AllocateGD|
  02e08		 |$LN19@AllocateGD|
  02e08	e3a03000	 mov         r3, #0
  02e0c	e58d3050	 str         r3, [sp, #0x50]
  02e10		 |$LN20@AllocateGD|
  02e10	e59d3050	 ldr         r3, [sp, #0x50]
  02e14	e58d304c	 str         r3, [sp, #0x4C]
  02e18		 |$LN22@AllocateGD|
  02e18	e59d304c	 ldr         r3, [sp, #0x4C]
  02e1c	e58d3028	 str         r3, [sp, #0x28]

; 988  : }

  02e20	e59d0028	 ldr         r0, [sp, #0x28]
  02e24	e28dd054	 add         sp, sp, #0x54
  02e28	e89d6000	 ldmia       sp, {sp, lr}
  02e2c	e12fff1e	 bx          lr
  02e30		 |$LN26@AllocateGD|
  02e30		 |$LN27@AllocateGD|
  02e30	00000000	 DCD         |??_C@_1HI@GOKCDAPL@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAc?$AAr@|
  02e34		 |$LN28@AllocateGD|
  02e34	00000000	 DCD         |??_C@_1GG@IINJNKHN@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAc?$AAr?$AAe?$AAe@|
  02e38		 |$M37611|

			 ENDP  ; |?AllocateGDI@OMAPFlatSurfaceManager@@UAAHW4OMAP_DSS_PIXELFORMAT@@KKPAPAVOMAPSurface@@@Z|, OMAPFlatSurfaceManager::AllocateGDI

	END
