; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\MCBSP\mcbspconfig.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.rdata|, DATA, READONLY
|f_rgWordLength| DCD 0x8
	DCD	0xc
	DCD	0x10
	DCD	0x14
	DCD	0x18
	DCD	0x20
	EXPORT	|??_C@_1BE@LFFACMJN@?$AAM?$AAC?$AAP?$AA?3?$AA?9?$AA?$CF?$AAS?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|mcbsp_UpdateRegisters|
	EXPORT	|mcbsp_ClearIRQStatus|
	EXPORT	|mcbsp_ConfigureReceiver|
	EXPORT	|mcbsp_ConfigureTransmitter|
	EXPORT	|mcbsp_ConfigureSampleRateGenerator|
	EXPORT	|mcbsp_ResetReceiver|
	EXPORT	|mcbsp_ResetTransmitter|
	EXPORT	|mcbsp_ResetSampleRateGenerator|
	EXPORT	|mcbsp_GetRegistryValues|
	EXPORT	|mcbsp_ResetShadowRegisters|
	EXPORT	|??_C@_1CE@FCDKFBGI@?$AAM?$AAC?$AAP?$AA?3?$AA?$CL?$AA?$CF?$AAS?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0BM@LENCFHPG@mcbsp_ConfigCommonRegisters?$AA@| [ DATA ] ; `string'
	EXPORT	|mcbsp_ConfigCommonRegisters|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|dpCurSettings|

  00000			 AREA	 |.pdata|, PDATA
|$T37115| DCD	|$LN10@mcbsp_Conf|
	DCD	0x40003d04
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\mcbsp\mcbspconfig.cpp

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BE@LFFACMJN@?$AAM?$AAC?$AAP?$AA?3?$AA?9?$AA?$CF?$AAS?$AA?$AN?$AA?6?$AA?$AA@| DCB "M"
	DCB	0x0, "C", 0x0, "P", 0x0, ":", 0x0, "-", 0x0, "%", 0x0, "S"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@FCDKFBGI@?$AAM?$AAC?$AAP?$AA?3?$AA?$CL?$AA?$CF?$AAS?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "M"
	DCB	0x0, "C", 0x0, "P", 0x0, ":", 0x0, "+", 0x0, "%", 0x0, "S"
	DCB	0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "x", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BM@LENCFHPG@mcbsp_ConfigCommonRegisters?$AA@| DCB "mcbsp_ConfigCo"
	DCB	"mmonRegisters", 0x0			; `string'
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |mcbsp_ConfigCommonRegisters| PROC

; 54   : {

  00000		 |$LN10@mcbsp_Conf|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd008	 sub         sp, sp, #8
  00010		 |$M37112|

; 55   :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S(0x%08x)\r\n", __FUNCTION__, pDevice));

  00010	e59f30d4	 ldr         r3, [pc, #0xD4]
  00014	e5933440	 ldr         r3, [r3, #0x440]
  00018	e3130004	 tst         r3, #4
  0001c	0a000006	 beq         |$LN4@mcbsp_Conf|
  00020	e59d2010	 ldr         r2, [sp, #0x10]
  00024	e59f10bc	 ldr         r1, [pc, #0xBC]
  00028	e59f00c0	 ldr         r0, [pc, #0xC0]
  0002c	eb000000	 bl          NKDbgPrintfW
  00030	e3a03001	 mov         r3, #1
  00034	e58d3000	 str         r3, [sp]
  00038	ea000001	 b           |$LN5@mcbsp_Conf|
  0003c		 |$LN4@mcbsp_Conf|
  0003c	e3a03000	 mov         r3, #0
  00040	e58d3000	 str         r3, [sp]
  00044		 |$LN5@mcbsp_Conf|

; 56   : 
; 57   :     // initialize shadow registers
; 58   :     //
; 59   :     mcbsp_ResetShadowRegisters(pDevice);

  00044	e59d0010	 ldr         r0, [sp, #0x10]
  00048	eb000000	 bl          mcbsp_ResetShadowRegisters

; 60   : 
; 61   :     // overwrite default configuration with registry values
; 62   :     //
; 63   :     if (pDevice->useRegistryForMcbsp)

  0004c	e59d3010	 ldr         r3, [sp, #0x10]
  00050	e28330c0	 add         r3, r3, #0xC0
  00054	e5933000	 ldr         r3, [r3]
  00058	e3530000	 cmp         r3, #0
  0005c	0a000001	 beq         |$LN1@mcbsp_Conf|

; 64   :         {
; 65   :         mcbsp_GetRegistryValues(pDevice);

  00060	e59d0010	 ldr         r0, [sp, #0x10]
  00064	eb000000	 bl          mcbsp_GetRegistryValues
  00068		 |$LN1@mcbsp_Conf|

; 66   :         }
; 67   : 
; 68   :     mcbsp_ResetSampleRateGenerator(pDevice);

  00068	e59d0010	 ldr         r0, [sp, #0x10]
  0006c	eb000000	 bl          mcbsp_ResetSampleRateGenerator

; 69   :     mcbsp_ResetTransmitter(pDevice);

  00070	e59d0010	 ldr         r0, [sp, #0x10]
  00074	eb000000	 bl          mcbsp_ResetTransmitter

; 70   :     mcbsp_ResetReceiver(pDevice);

  00078	e59d0010	 ldr         r0, [sp, #0x10]
  0007c	eb000000	 bl          mcbsp_ResetReceiver

; 71   : 
; 72   :     mcbsp_ConfigureSampleRateGenerator(pDevice);

  00080	e59d0010	 ldr         r0, [sp, #0x10]
  00084	eb000000	 bl          mcbsp_ConfigureSampleRateGenerator

; 73   :     mcbsp_ConfigureTransmitter(pDevice);

  00088	e59d0010	 ldr         r0, [sp, #0x10]
  0008c	eb000000	 bl          mcbsp_ConfigureTransmitter

; 74   :     mcbsp_ConfigureReceiver(pDevice);

  00090	e59d0010	 ldr         r0, [sp, #0x10]
  00094	eb000000	 bl          mcbsp_ConfigureReceiver

; 75   :     mcbsp_ClearIRQStatus(pDevice);

  00098	e59d0010	 ldr         r0, [sp, #0x10]
  0009c	eb000000	 bl          mcbsp_ClearIRQStatus

; 76   :     mcbsp_UpdateRegisters(pDevice);

  000a0	e59d0010	 ldr         r0, [sp, #0x10]
  000a4	eb000000	 bl          mcbsp_UpdateRegisters

; 77   : 
; 78   :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S\r\n", __FUNCTION__));

  000a8	e59f303c	 ldr         r3, [pc, #0x3C]
  000ac	e5933440	 ldr         r3, [r3, #0x440]
  000b0	e3130004	 tst         r3, #4
  000b4	0a000005	 beq         |$LN6@mcbsp_Conf|
  000b8	e59f1028	 ldr         r1, [pc, #0x28]
  000bc	e59f0020	 ldr         r0, [pc, #0x20]
  000c0	eb000000	 bl          NKDbgPrintfW
  000c4	e3a03001	 mov         r3, #1
  000c8	e58d3004	 str         r3, [sp, #4]
  000cc	ea000001	 b           |$LN7@mcbsp_Conf|
  000d0		 |$LN6@mcbsp_Conf|
  000d0	e3a03000	 mov         r3, #0
  000d4	e58d3004	 str         r3, [sp, #4]
  000d8		 |$LN7@mcbsp_Conf|

; 79   : }

  000d8	e28dd008	 add         sp, sp, #8
  000dc	e89d6000	 ldmia       sp, {sp, lr}
  000e0	e12fff1e	 bx          lr
  000e4		 |$LN11@mcbsp_Conf|
  000e4		 |$LN12@mcbsp_Conf|
  000e4	00000000	 DCD         |??_C@_1BE@LFFACMJN@?$AAM?$AAC?$AAP?$AA?3?$AA?9?$AA?$CF?$AAS?$AA?$AN?$AA?6?$AA?$AA@|
  000e8		 |$LN13@mcbsp_Conf|
  000e8	00000000	 DCD         |??_C@_0BM@LENCFHPG@mcbsp_ConfigCommonRegisters?$AA@|
  000ec		 |$LN14@mcbsp_Conf|
  000ec	00000000	 DCD         |dpCurSettings|
  000f0		 |$LN15@mcbsp_Conf|
  000f0	00000000	 DCD         |??_C@_1CE@FCDKFBGI@?$AAM?$AAC?$AAP?$AA?3?$AA?$CL?$AA?$CF?$AAS?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  000f4		 |$M37113|

			 ENDP  ; |mcbsp_ConfigCommonRegisters|

	EXPORT	|??_C@_0BI@CBJINJMD@mcbsp_GetRegistryValues?$AA@| [ DATA ] ; `string'

  00008			 AREA	 |.pdata|, PDATA
|$T37217| DCD	|$LN182@mcbsp_GetR|
	DCD	0x40034904

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BI@CBJINJMD@mcbsp_GetRegistryValues?$AA@| DCB "mcbsp_GetRegistryV"
	DCB	"alues", 0x0				; `string'
; Function compile flags: /Odtp

  000f4			 AREA	 |.text|, CODE, ARM

  000f4		 |mcbsp_GetRegistryValues| PROC

; 90   : {

  000f4		 |$LN182@mcbsp_GetR|
  000f4	e1a0c00d	 mov         r12, sp
  000f8	e92d0001	 stmdb       sp!, {r0}
  000fc	e92d5000	 stmdb       sp!, {r12, lr}
  00100	e24dd028	 sub         sp, sp, #0x28
  00104		 |$M37214|

; 91   :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S(0x%08x)\r\n", __FUNCTION__, pDevice));

  00104	e59f3d04	 ldr         r3, [pc, #0xD04]
  00108	e5933440	 ldr         r3, [r3, #0x440]
  0010c	e3130004	 tst         r3, #4
  00110	0a000006	 beq         |$LN88@mcbsp_GetR|
  00114	e59d2030	 ldr         r2, [sp, #0x30]
  00118	e59f1cec	 ldr         r1, [pc, #0xCEC]
  0011c	e59f0cf0	 ldr         r0, [pc, #0xCF0]
  00120	eb000000	 bl          NKDbgPrintfW
  00124	e3a03001	 mov         r3, #1
  00128	e58d3000	 str         r3, [sp]
  0012c	ea000001	 b           |$LN89@mcbsp_GetR|
  00130		 |$LN88@mcbsp_GetR|
  00130	e3a03000	 mov         r3, #0
  00134	e58d3000	 str         r3, [sp]
  00138		 |$LN89@mcbsp_GetR|

; 92   : 
; 93   :     //------------------------
; 94   :     // SRG values
; 95   :     //------------------------
; 96   : 
; 97   :     // use SRG clock source from registry
; 98   :     switch (pDevice->clockSourceSRG)

  00138	e59d3030	 ldr         r3, [sp, #0x30]
  0013c	e2833f45	 add         r3, r3, #0x45, 30
  00140	e5933000	 ldr         r3, [r3]
  00144	e58d3004	 str         r3, [sp, #4]
  00148	e59d3004	 ldr         r3, [sp, #4]
  0014c	e3530004	 cmp         r3, #4
  00150	8a00002c	 bhi         |$LN78@mcbsp_GetR|
  00154	e59d2004	 ldr         r2, [sp, #4]
  00158	e1a03102	 mov         r3, r2, lsl #2
  0015c	e083300f	 add         r3, r3, pc
  00160	e5933004	 ldr         r3, [r3, #4]
  00164	e08ff003	 add         pc, pc, r3
  00168		 |$LN93@mcbsp_GetR|
  00168		 |$LN92@mcbsp_GetR|
  00168		 |$LN94@mcbsp_GetR|
  00168	00000010	 DCD         0x10
  0016c		 |$LN95@mcbsp_GetR|
  0016c	0000002c	 DCD         0x2c
  00170		 |$LN96@mcbsp_GetR|
  00170	00000048	 DCD         0x48
  00174		 |$LN97@mcbsp_GetR|
  00174	00000064	 DCD         0x64
  00178		 |$LN98@mcbsp_GetR|
  00178	00000080	 DCD         0x80
  0017c		 |$LN83@mcbsp_GetR|

; 99   :         {
; 100  :         case kMcBSP_SRG_SRC_CLKS_PIN_RISE:
; 101  :             pDevice->pConfigInfo->SRGClkSrc = kMcBSP_SRG_SRC_CLKS_PIN_RISE;

  0017c	e59d3030	 ldr         r3, [sp, #0x30]
  00180	e2833068	 add         r3, r3, #0x68
  00184	e5933000	 ldr         r3, [r3]
  00188	e283205c	 add         r2, r3, #0x5C
  0018c	e3a03000	 mov         r3, #0
  00190	e5823000	 str         r3, [r2]

; 102  :             break;

  00194	ea000021	 b           |$LN84@mcbsp_GetR|
  00198		 |$LN82@mcbsp_GetR|

; 103  :         case kMcBSP_SRG_SRC_CLKS_PIN_FALL:
; 104  :             pDevice->pConfigInfo->SRGClkSrc = kMcBSP_SRG_SRC_CLKS_PIN_FALL;

  00198	e59d3030	 ldr         r3, [sp, #0x30]
  0019c	e2833068	 add         r3, r3, #0x68
  001a0	e5933000	 ldr         r3, [r3]
  001a4	e283205c	 add         r2, r3, #0x5C
  001a8	e3a03001	 mov         r3, #1
  001ac	e5823000	 str         r3, [r2]

; 105  :             break;

  001b0	ea00001a	 b           |$LN84@mcbsp_GetR|
  001b4		 |$LN81@mcbsp_GetR|

; 106  :         case kMcBSP_SRG_SRC_CPU_CLK:
; 107  :             pDevice->pConfigInfo->SRGClkSrc = kMcBSP_SRG_SRC_CPU_CLK;

  001b4	e59d3030	 ldr         r3, [sp, #0x30]
  001b8	e2833068	 add         r3, r3, #0x68
  001bc	e5933000	 ldr         r3, [r3]
  001c0	e283205c	 add         r2, r3, #0x5C
  001c4	e3a03002	 mov         r3, #2
  001c8	e5823000	 str         r3, [r2]

; 108  :             break;

  001cc	ea000013	 b           |$LN84@mcbsp_GetR|
  001d0		 |$LN80@mcbsp_GetR|

; 109  :         case kMcBSP_SRG_SRC_CLKR_PIN:
; 110  :             pDevice->pConfigInfo->SRGClkSrc = kMcBSP_SRG_SRC_CLKR_PIN;

  001d0	e59d3030	 ldr         r3, [sp, #0x30]
  001d4	e2833068	 add         r3, r3, #0x68
  001d8	e5933000	 ldr         r3, [r3]
  001dc	e283205c	 add         r2, r3, #0x5C
  001e0	e3a03003	 mov         r3, #3
  001e4	e5823000	 str         r3, [r2]

; 111  :             break;

  001e8	ea00000c	 b           |$LN84@mcbsp_GetR|
  001ec		 |$LN79@mcbsp_GetR|

; 112  :         case kMcBSP_SRG_SRC_CLKX_PIN:
; 113  :             pDevice->pConfigInfo->SRGClkSrc = kMcBSP_SRG_SRC_CLKX_PIN;

  001ec	e59d3030	 ldr         r3, [sp, #0x30]
  001f0	e2833068	 add         r3, r3, #0x68
  001f4	e5933000	 ldr         r3, [r3]
  001f8	e283205c	 add         r2, r3, #0x5C
  001fc	e3a03004	 mov         r3, #4
  00200	e5823000	 str         r3, [r2]

; 114  :             break;

  00204	ea000005	 b           |$LN84@mcbsp_GetR|
  00208		 |$LN78@mcbsp_GetR|

; 115  :         default:
; 116  :             pDevice->pConfigInfo->SRGClkSrc = kMcBSP_SRG_SRC_CLKX_PIN;

  00208	e59d3030	 ldr         r3, [sp, #0x30]
  0020c	e2833068	 add         r3, r3, #0x68
  00210	e5933000	 ldr         r3, [r3]
  00214	e283205c	 add         r2, r3, #0x5C
  00218	e3a03004	 mov         r3, #4
  0021c	e5823000	 str         r3, [r2]
  00220		 |$LN84@mcbsp_GetR|

; 117  :         }
; 118  : 
; 119  :     // use frame width from registry
; 120  :     pDevice->pConfigInfo->SRGFrameWidth = (UINT32)pDevice->frameWidthSRG;

  00220	e59d3030	 ldr         r3, [sp, #0x30]
  00224	e2831f46	 add         r1, r3, #0x46, 30
  00228	e59d3030	 ldr         r3, [sp, #0x30]
  0022c	e2833068	 add         r3, r3, #0x68
  00230	e5933000	 ldr         r3, [r3]
  00234	e2832060	 add         r2, r3, #0x60
  00238	e5913000	 ldr         r3, [r1]
  0023c	e5823000	 str         r3, [r2]

; 121  : 
; 122  :     // use clock divider from registry
; 123  :     pDevice->pConfigInfo->SRGClkDivFactor = (UINT32)pDevice->clockDividerSRG;

  00240	e59d3030	 ldr         r3, [sp, #0x30]
  00244	e2831f47	 add         r1, r3, #0x47, 30
  00248	e59d3030	 ldr         r3, [sp, #0x30]
  0024c	e2833068	 add         r3, r3, #0x68
  00250	e5933000	 ldr         r3, [r3]
  00254	e2832064	 add         r2, r3, #0x64
  00258	e5913000	 ldr         r3, [r1]
  0025c	e5823000	 str         r3, [r2]

; 124  : 
; 125  :     // use clock resync from registry
; 126  :     if (pDevice->clockResyncSRG)

  00260	e59d3030	 ldr         r3, [sp, #0x30]
  00264	e2833e12	 add         r3, r3, #0x12, 28
  00268	e5933000	 ldr         r3, [r3]
  0026c	e3530000	 cmp         r3, #0
  00270	0a000006	 beq         |$LN77@mcbsp_GetR|

; 127  :         {
; 128  :         pDevice->pConfigInfo->SRGClkSyncMode = MCBSP_SRGR2_GSYNC;

  00274	e59d3030	 ldr         r3, [sp, #0x30]
  00278	e2833068	 add         r3, r3, #0x68
  0027c	e5933000	 ldr         r3, [r3]
  00280	e2832068	 add         r2, r3, #0x68
  00284	e3a03902	 mov         r3, #2, 18
  00288	e5823000	 str         r3, [r2]

; 129  :         }
; 130  :     else

  0028c	ea000005	 b           |$LN76@mcbsp_GetR|
  00290		 |$LN77@mcbsp_GetR|

; 131  :         {
; 132  :         pDevice->pConfigInfo->SRGClkSyncMode = 0;

  00290	e59d3030	 ldr         r3, [sp, #0x30]
  00294	e2833068	 add         r3, r3, #0x68
  00298	e5933000	 ldr         r3, [r3]
  0029c	e2832068	 add         r2, r3, #0x68
  002a0	e3a03000	 mov         r3, #0
  002a4	e5823000	 str         r3, [r2]
  002a8		 |$LN76@mcbsp_GetR|

; 133  :         }
; 134  : 
; 135  :     //------------------------
; 136  :     // Transmit and receive values
; 137  :     //------------------------
; 138  : 
; 139  :     // use frame length from registry
; 140  :     pDevice->pConfigInfo->TxFrameLength = (UINT32)pDevice->wordsPerFrame;

  002a8	e59d3030	 ldr         r3, [sp, #0x30]
  002ac	e28310c8	 add         r1, r3, #0xC8
  002b0	e59d3030	 ldr         r3, [sp, #0x30]
  002b4	e2833068	 add         r3, r3, #0x68
  002b8	e5933000	 ldr         r3, [r3]
  002bc	e2832030	 add         r2, r3, #0x30
  002c0	e5913000	 ldr         r3, [r1]
  002c4	e5823000	 str         r3, [r2]

; 141  :     pDevice->pConfigInfo->RxFrameLength = (UINT32)pDevice->wordsPerFrame;

  002c8	e59d3030	 ldr         r3, [sp, #0x30]
  002cc	e28310c8	 add         r1, r3, #0xC8
  002d0	e59d3030	 ldr         r3, [sp, #0x30]
  002d4	e2833068	 add         r3, r3, #0x68
  002d8	e5933000	 ldr         r3, [r3]
  002dc	e2832004	 add         r2, r3, #4
  002e0	e5913000	 ldr         r3, [r1]
  002e4	e5823000	 str         r3, [r2]

; 142  : 
; 143  :     // use word length from registry
; 144  :     switch (pDevice->wordLength)

  002e8	e59d3030	 ldr         r3, [sp, #0x30]
  002ec	e28330cc	 add         r3, r3, #0xCC
  002f0	e5933000	 ldr         r3, [r3]
  002f4	e58d3008	 str         r3, [sp, #8]
  002f8	e59d3008	 ldr         r3, [sp, #8]
  002fc	e2433008	 sub         r3, r3, #8
  00300	e58d3008	 str         r3, [sp, #8]
  00304	e59d3008	 ldr         r3, [sp, #8]
  00308	e3530018	 cmp         r3, #0x18
  0030c	8a00006b	 bhi         |$LN67@mcbsp_GetR|
  00310	e59d2008	 ldr         r2, [sp, #8]
  00314	e1a03102	 mov         r3, r2, lsl #2
  00318	e083300f	 add         r3, r3, pc
  0031c	e5933004	 ldr         r3, [r3, #4]
  00320	e08ff003	 add         pc, pc, r3
  00324		 |$LN100@mcbsp_GetR|
  00324		 |$LN99@mcbsp_GetR|
  00324		 |$LN101@mcbsp_GetR|
  00324	00000060	 DCD         0x60
  00328		 |$LN102@mcbsp_GetR|
  00328	00000198	 DCD         0x198
  0032c		 |$LN103@mcbsp_GetR|
  0032c	00000198	 DCD         0x198
  00330		 |$LN104@mcbsp_GetR|
  00330	00000198	 DCD         0x198
  00334		 |$LN105@mcbsp_GetR|
  00334	00000094	 DCD         0x94
  00338		 |$LN106@mcbsp_GetR|
  00338	00000198	 DCD         0x198
  0033c		 |$LN107@mcbsp_GetR|
  0033c	00000198	 DCD         0x198
  00340		 |$LN108@mcbsp_GetR|
  00340	00000198	 DCD         0x198
  00344		 |$LN109@mcbsp_GetR|
  00344	000000c8	 DCD         0xc8
  00348		 |$LN110@mcbsp_GetR|
  00348	00000198	 DCD         0x198
  0034c		 |$LN111@mcbsp_GetR|
  0034c	00000198	 DCD         0x198
  00350		 |$LN112@mcbsp_GetR|
  00350	00000198	 DCD         0x198
  00354		 |$LN113@mcbsp_GetR|
  00354	000000fc	 DCD         0xfc
  00358		 |$LN114@mcbsp_GetR|
  00358	00000198	 DCD         0x198
  0035c		 |$LN115@mcbsp_GetR|
  0035c	00000198	 DCD         0x198
  00360		 |$LN116@mcbsp_GetR|
  00360	00000198	 DCD         0x198
  00364		 |$LN117@mcbsp_GetR|
  00364	00000130	 DCD         0x130
  00368		 |$LN118@mcbsp_GetR|
  00368	00000198	 DCD         0x198
  0036c		 |$LN119@mcbsp_GetR|
  0036c	00000198	 DCD         0x198
  00370		 |$LN120@mcbsp_GetR|
  00370	00000198	 DCD         0x198
  00374		 |$LN121@mcbsp_GetR|
  00374	00000198	 DCD         0x198
  00378		 |$LN122@mcbsp_GetR|
  00378	00000198	 DCD         0x198
  0037c		 |$LN123@mcbsp_GetR|
  0037c	00000198	 DCD         0x198
  00380		 |$LN124@mcbsp_GetR|
  00380	00000198	 DCD         0x198
  00384		 |$LN125@mcbsp_GetR|
  00384	00000164	 DCD         0x164
  00388		 |$LN73@mcbsp_GetR|

; 145  :         {
; 146  :         case 8:
; 147  :             pDevice->pConfigInfo->TxWordLength = kMcBSP_Word_Length_8;

  00388	e59d3030	 ldr         r3, [sp, #0x30]
  0038c	e2833068	 add         r3, r3, #0x68
  00390	e5933000	 ldr         r3, [r3]
  00394	e2832034	 add         r2, r3, #0x34
  00398	e3a03000	 mov         r3, #0
  0039c	e5823000	 str         r3, [r2]

; 148  :             pDevice->pConfigInfo->RxWordLength = kMcBSP_Word_Length_8;

  003a0	e59d3030	 ldr         r3, [sp, #0x30]
  003a4	e2833068	 add         r3, r3, #0x68
  003a8	e5933000	 ldr         r3, [r3]
  003ac	e2832008	 add         r2, r3, #8
  003b0	e3a03000	 mov         r3, #0
  003b4	e5823000	 str         r3, [r2]

; 149  :             break;

  003b8	ea00004c	 b           |$LN74@mcbsp_GetR|
  003bc		 |$LN72@mcbsp_GetR|

; 150  :         case 12:
; 151  :             pDevice->pConfigInfo->TxWordLength = kMcBSP_Word_Length_12;

  003bc	e59d3030	 ldr         r3, [sp, #0x30]
  003c0	e2833068	 add         r3, r3, #0x68
  003c4	e5933000	 ldr         r3, [r3]
  003c8	e2832034	 add         r2, r3, #0x34
  003cc	e3a03001	 mov         r3, #1
  003d0	e5823000	 str         r3, [r2]

; 152  :             pDevice->pConfigInfo->RxWordLength = kMcBSP_Word_Length_12;

  003d4	e59d3030	 ldr         r3, [sp, #0x30]
  003d8	e2833068	 add         r3, r3, #0x68
  003dc	e5933000	 ldr         r3, [r3]
  003e0	e2832008	 add         r2, r3, #8
  003e4	e3a03001	 mov         r3, #1
  003e8	e5823000	 str         r3, [r2]

; 153  :             break;

  003ec	ea00003f	 b           |$LN74@mcbsp_GetR|
  003f0		 |$LN71@mcbsp_GetR|

; 154  :         case 16:
; 155  :             pDevice->pConfigInfo->TxWordLength = kMcBSP_Word_Length_16;

  003f0	e59d3030	 ldr         r3, [sp, #0x30]
  003f4	e2833068	 add         r3, r3, #0x68
  003f8	e5933000	 ldr         r3, [r3]
  003fc	e2832034	 add         r2, r3, #0x34
  00400	e3a03002	 mov         r3, #2
  00404	e5823000	 str         r3, [r2]

; 156  :             pDevice->pConfigInfo->RxWordLength = kMcBSP_Word_Length_16;

  00408	e59d3030	 ldr         r3, [sp, #0x30]
  0040c	e2833068	 add         r3, r3, #0x68
  00410	e5933000	 ldr         r3, [r3]
  00414	e2832008	 add         r2, r3, #8
  00418	e3a03002	 mov         r3, #2
  0041c	e5823000	 str         r3, [r2]

; 157  :             break;

  00420	ea000032	 b           |$LN74@mcbsp_GetR|
  00424		 |$LN70@mcbsp_GetR|

; 158  :         case 20:
; 159  :             pDevice->pConfigInfo->TxWordLength = kMcBSP_Word_Length_20;

  00424	e59d3030	 ldr         r3, [sp, #0x30]
  00428	e2833068	 add         r3, r3, #0x68
  0042c	e5933000	 ldr         r3, [r3]
  00430	e2832034	 add         r2, r3, #0x34
  00434	e3a03003	 mov         r3, #3
  00438	e5823000	 str         r3, [r2]

; 160  :             pDevice->pConfigInfo->RxWordLength = kMcBSP_Word_Length_20;

  0043c	e59d3030	 ldr         r3, [sp, #0x30]
  00440	e2833068	 add         r3, r3, #0x68
  00444	e5933000	 ldr         r3, [r3]
  00448	e2832008	 add         r2, r3, #8
  0044c	e3a03003	 mov         r3, #3
  00450	e5823000	 str         r3, [r2]

; 161  :             break;

  00454	ea000025	 b           |$LN74@mcbsp_GetR|
  00458		 |$LN69@mcbsp_GetR|

; 162  :         case 24:
; 163  :             pDevice->pConfigInfo->TxWordLength = kMcBSP_Word_Length_24;

  00458	e59d3030	 ldr         r3, [sp, #0x30]
  0045c	e2833068	 add         r3, r3, #0x68
  00460	e5933000	 ldr         r3, [r3]
  00464	e2832034	 add         r2, r3, #0x34
  00468	e3a03004	 mov         r3, #4
  0046c	e5823000	 str         r3, [r2]

; 164  :             pDevice->pConfigInfo->RxWordLength = kMcBSP_Word_Length_24;

  00470	e59d3030	 ldr         r3, [sp, #0x30]
  00474	e2833068	 add         r3, r3, #0x68
  00478	e5933000	 ldr         r3, [r3]
  0047c	e2832008	 add         r2, r3, #8
  00480	e3a03004	 mov         r3, #4
  00484	e5823000	 str         r3, [r2]

; 165  :             break;

  00488	ea000018	 b           |$LN74@mcbsp_GetR|
  0048c		 |$LN68@mcbsp_GetR|

; 166  :         case 32:
; 167  :             pDevice->pConfigInfo->TxWordLength = kMcBSP_Word_Length_32;

  0048c	e59d3030	 ldr         r3, [sp, #0x30]
  00490	e2833068	 add         r3, r3, #0x68
  00494	e5933000	 ldr         r3, [r3]
  00498	e2832034	 add         r2, r3, #0x34
  0049c	e3a03005	 mov         r3, #5
  004a0	e5823000	 str         r3, [r2]

; 168  :             pDevice->pConfigInfo->RxWordLength = kMcBSP_Word_Length_32;

  004a4	e59d3030	 ldr         r3, [sp, #0x30]
  004a8	e2833068	 add         r3, r3, #0x68
  004ac	e5933000	 ldr         r3, [r3]
  004b0	e2832008	 add         r2, r3, #8
  004b4	e3a03005	 mov         r3, #5
  004b8	e5823000	 str         r3, [r2]

; 169  :             break;

  004bc	ea00000b	 b           |$LN74@mcbsp_GetR|
  004c0		 |$LN67@mcbsp_GetR|

; 170  :         default:
; 171  :             pDevice->pConfigInfo->TxWordLength = kMcBSP_Word_Length_16;

  004c0	e59d3030	 ldr         r3, [sp, #0x30]
  004c4	e2833068	 add         r3, r3, #0x68
  004c8	e5933000	 ldr         r3, [r3]
  004cc	e2832034	 add         r2, r3, #0x34
  004d0	e3a03002	 mov         r3, #2
  004d4	e5823000	 str         r3, [r2]

; 172  :             pDevice->pConfigInfo->RxWordLength = kMcBSP_Word_Length_16;

  004d8	e59d3030	 ldr         r3, [sp, #0x30]
  004dc	e2833068	 add         r3, r3, #0x68
  004e0	e5933000	 ldr         r3, [r3]
  004e4	e2832008	 add         r2, r3, #8
  004e8	e3a03002	 mov         r3, #2
  004ec	e5823000	 str         r3, [r2]
  004f0		 |$LN74@mcbsp_GetR|

; 173  :         }
; 174  : 
; 175  :     // use transmit dual phase from registry
; 176  :     if (pDevice->phaseTx)

  004f0	e59d3030	 ldr         r3, [sp, #0x30]
  004f4	e28330e4	 add         r3, r3, #0xE4
  004f8	e5933000	 ldr         r3, [r3]
  004fc	e3530000	 cmp         r3, #0
  00500	0a00005e	 beq         |$LN66@mcbsp_GetR|

; 177  :         {
; 178  :         pDevice->pConfigInfo->TxPhase = MCBSP_PHASE_DUAL;

  00504	e59d3030	 ldr         r3, [sp, #0x30]
  00508	e2833068	 add         r3, r3, #0x68
  0050c	e5933000	 ldr         r3, [r3]
  00510	e283204c	 add         r2, r3, #0x4C
  00514	e3a03902	 mov         r3, #2, 18
  00518	e5823000	 str         r3, [r2]

; 179  : 
; 180  :         // use transmit word length from registry
; 181  :         switch (pDevice->wordLength2)

  0051c	e59d3030	 ldr         r3, [sp, #0x30]
  00520	e28330d0	 add         r3, r3, #0xD0
  00524	e5933000	 ldr         r3, [r3]
  00528	e58d300c	 str         r3, [sp, #0xC]
  0052c	e59d300c	 ldr         r3, [sp, #0xC]
  00530	e2433008	 sub         r3, r3, #8
  00534	e58d300c	 str         r3, [sp, #0xC]
  00538	e59d300c	 ldr         r3, [sp, #0xC]
  0053c	e3530018	 cmp         r3, #0x18
  00540	8a000047	 bhi         |$LN57@mcbsp_GetR|
  00544	e59d200c	 ldr         r2, [sp, #0xC]
  00548	e1a03102	 mov         r3, r2, lsl #2
  0054c	e083300f	 add         r3, r3, pc
  00550	e5933004	 ldr         r3, [r3, #4]
  00554	e08ff003	 add         pc, pc, r3
  00558		 |$LN127@mcbsp_GetR|
  00558		 |$LN126@mcbsp_GetR|
  00558		 |$LN128@mcbsp_GetR|
  00558	00000060	 DCD         0x60
  0055c		 |$LN129@mcbsp_GetR|
  0055c	00000108	 DCD         0x108
  00560		 |$LN130@mcbsp_GetR|
  00560	00000108	 DCD         0x108
  00564		 |$LN131@mcbsp_GetR|
  00564	00000108	 DCD         0x108
  00568		 |$LN132@mcbsp_GetR|
  00568	0000007c	 DCD         0x7c
  0056c		 |$LN133@mcbsp_GetR|
  0056c	00000108	 DCD         0x108
  00570		 |$LN134@mcbsp_GetR|
  00570	00000108	 DCD         0x108
  00574		 |$LN135@mcbsp_GetR|
  00574	00000108	 DCD         0x108
  00578		 |$LN136@mcbsp_GetR|
  00578	00000098	 DCD         0x98
  0057c		 |$LN137@mcbsp_GetR|
  0057c	00000108	 DCD         0x108
  00580		 |$LN138@mcbsp_GetR|
  00580	00000108	 DCD         0x108
  00584		 |$LN139@mcbsp_GetR|
  00584	00000108	 DCD         0x108
  00588		 |$LN140@mcbsp_GetR|
  00588	000000b4	 DCD         0xb4
  0058c		 |$LN141@mcbsp_GetR|
  0058c	00000108	 DCD         0x108
  00590		 |$LN142@mcbsp_GetR|
  00590	00000108	 DCD         0x108
  00594		 |$LN143@mcbsp_GetR|
  00594	00000108	 DCD         0x108
  00598		 |$LN144@mcbsp_GetR|
  00598	000000d0	 DCD         0xd0
  0059c		 |$LN145@mcbsp_GetR|
  0059c	00000108	 DCD         0x108
  005a0		 |$LN146@mcbsp_GetR|
  005a0	00000108	 DCD         0x108
  005a4		 |$LN147@mcbsp_GetR|
  005a4	00000108	 DCD         0x108
  005a8		 |$LN148@mcbsp_GetR|
  005a8	00000108	 DCD         0x108
  005ac		 |$LN149@mcbsp_GetR|
  005ac	00000108	 DCD         0x108
  005b0		 |$LN150@mcbsp_GetR|
  005b0	00000108	 DCD         0x108
  005b4		 |$LN151@mcbsp_GetR|
  005b4	00000108	 DCD         0x108
  005b8		 |$LN152@mcbsp_GetR|
  005b8	000000ec	 DCD         0xec
  005bc		 |$LN63@mcbsp_GetR|

; 182  :             {
; 183  :             case 8:
; 184  :                 pDevice->pConfigInfo->TxWordLength2 = kMcBSP_Word_Length_8;

  005bc	e59d3030	 ldr         r3, [sp, #0x30]
  005c0	e2833068	 add         r3, r3, #0x68
  005c4	e5933000	 ldr         r3, [r3]
  005c8	e2832038	 add         r2, r3, #0x38
  005cc	e3a03000	 mov         r3, #0
  005d0	e5823000	 str         r3, [r2]

; 185  :                 break;

  005d4	ea000028	 b           |$LN64@mcbsp_GetR|
  005d8		 |$LN62@mcbsp_GetR|

; 186  :             case 12:
; 187  :                 pDevice->pConfigInfo->TxWordLength2 = kMcBSP_Word_Length_12;

  005d8	e59d3030	 ldr         r3, [sp, #0x30]
  005dc	e2833068	 add         r3, r3, #0x68
  005e0	e5933000	 ldr         r3, [r3]
  005e4	e2832038	 add         r2, r3, #0x38
  005e8	e3a03001	 mov         r3, #1
  005ec	e5823000	 str         r3, [r2]

; 188  :                 break;

  005f0	ea000021	 b           |$LN64@mcbsp_GetR|
  005f4		 |$LN61@mcbsp_GetR|

; 189  :             case 16:
; 190  :                 pDevice->pConfigInfo->TxWordLength2 = kMcBSP_Word_Length_16;

  005f4	e59d3030	 ldr         r3, [sp, #0x30]
  005f8	e2833068	 add         r3, r3, #0x68
  005fc	e5933000	 ldr         r3, [r3]
  00600	e2832038	 add         r2, r3, #0x38
  00604	e3a03002	 mov         r3, #2
  00608	e5823000	 str         r3, [r2]

; 191  :                 break;

  0060c	ea00001a	 b           |$LN64@mcbsp_GetR|
  00610		 |$LN60@mcbsp_GetR|

; 192  :             case 20:
; 193  :                 pDevice->pConfigInfo->TxWordLength2 = kMcBSP_Word_Length_20;

  00610	e59d3030	 ldr         r3, [sp, #0x30]
  00614	e2833068	 add         r3, r3, #0x68
  00618	e5933000	 ldr         r3, [r3]
  0061c	e2832038	 add         r2, r3, #0x38
  00620	e3a03003	 mov         r3, #3
  00624	e5823000	 str         r3, [r2]

; 194  :                 break;

  00628	ea000013	 b           |$LN64@mcbsp_GetR|
  0062c		 |$LN59@mcbsp_GetR|

; 195  :             case 24:
; 196  :                 pDevice->pConfigInfo->TxWordLength2 = kMcBSP_Word_Length_24;

  0062c	e59d3030	 ldr         r3, [sp, #0x30]
  00630	e2833068	 add         r3, r3, #0x68
  00634	e5933000	 ldr         r3, [r3]
  00638	e2832038	 add         r2, r3, #0x38
  0063c	e3a03004	 mov         r3, #4
  00640	e5823000	 str         r3, [r2]

; 197  :                 break;

  00644	ea00000c	 b           |$LN64@mcbsp_GetR|
  00648		 |$LN58@mcbsp_GetR|

; 198  :             case 32:
; 199  :                 pDevice->pConfigInfo->TxWordLength2 = kMcBSP_Word_Length_32;

  00648	e59d3030	 ldr         r3, [sp, #0x30]
  0064c	e2833068	 add         r3, r3, #0x68
  00650	e5933000	 ldr         r3, [r3]
  00654	e2832038	 add         r2, r3, #0x38
  00658	e3a03005	 mov         r3, #5
  0065c	e5823000	 str         r3, [r2]

; 200  :                 break;

  00660	ea000005	 b           |$LN64@mcbsp_GetR|
  00664		 |$LN57@mcbsp_GetR|

; 201  :             default:
; 202  :                 pDevice->pConfigInfo->TxWordLength2 = kMcBSP_Word_Length_16;

  00664	e59d3030	 ldr         r3, [sp, #0x30]
  00668	e2833068	 add         r3, r3, #0x68
  0066c	e5933000	 ldr         r3, [r3]
  00670	e2832038	 add         r2, r3, #0x38
  00674	e3a03002	 mov         r3, #2
  00678	e5823000	 str         r3, [r2]
  0067c		 |$LN64@mcbsp_GetR|

; 203  :             }
; 204  :         }
; 205  :     else

  0067c	ea000005	 b           |$LN56@mcbsp_GetR|
  00680		 |$LN66@mcbsp_GetR|

; 206  :         {
; 207  :         pDevice->pConfigInfo->TxPhase = MCBSP_PHASE_SINGLE;

  00680	e59d3030	 ldr         r3, [sp, #0x30]
  00684	e2833068	 add         r3, r3, #0x68
  00688	e5933000	 ldr         r3, [r3]
  0068c	e283204c	 add         r2, r3, #0x4C
  00690	e3a03000	 mov         r3, #0
  00694	e5823000	 str         r3, [r2]
  00698		 |$LN56@mcbsp_GetR|

; 208  :         }
; 209  : 
; 210  :      // use receive phase from registry
; 211  :     if (pDevice->phaseRx)

  00698	e59d3030	 ldr         r3, [sp, #0x30]
  0069c	e2833f41	 add         r3, r3, #0x41, 30
  006a0	e5933000	 ldr         r3, [r3]
  006a4	e3530000	 cmp         r3, #0
  006a8	0a00005e	 beq         |$LN55@mcbsp_GetR|

; 212  :         {
; 213  :         pDevice->pConfigInfo->RxPhase = MCBSP_PHASE_DUAL;

  006ac	e59d3030	 ldr         r3, [sp, #0x30]
  006b0	e2833068	 add         r3, r3, #0x68
  006b4	e5933000	 ldr         r3, [r3]
  006b8	e2832020	 add         r2, r3, #0x20
  006bc	e3a03902	 mov         r3, #2, 18
  006c0	e5823000	 str         r3, [r2]

; 214  : 
; 215  :         // use transmit word length from registry
; 216  :         switch (pDevice->wordLength2)

  006c4	e59d3030	 ldr         r3, [sp, #0x30]
  006c8	e28330d0	 add         r3, r3, #0xD0
  006cc	e5933000	 ldr         r3, [r3]
  006d0	e58d3010	 str         r3, [sp, #0x10]
  006d4	e59d3010	 ldr         r3, [sp, #0x10]
  006d8	e2433008	 sub         r3, r3, #8
  006dc	e58d3010	 str         r3, [sp, #0x10]
  006e0	e59d3010	 ldr         r3, [sp, #0x10]
  006e4	e3530018	 cmp         r3, #0x18
  006e8	8a000047	 bhi         |$LN46@mcbsp_GetR|
  006ec	e59d2010	 ldr         r2, [sp, #0x10]
  006f0	e1a03102	 mov         r3, r2, lsl #2
  006f4	e083300f	 add         r3, r3, pc
  006f8	e5933004	 ldr         r3, [r3, #4]
  006fc	e08ff003	 add         pc, pc, r3
  00700		 |$LN154@mcbsp_GetR|
  00700		 |$LN153@mcbsp_GetR|
  00700		 |$LN155@mcbsp_GetR|
  00700	00000060	 DCD         0x60
  00704		 |$LN156@mcbsp_GetR|
  00704	00000108	 DCD         0x108
  00708		 |$LN157@mcbsp_GetR|
  00708	00000108	 DCD         0x108
  0070c		 |$LN158@mcbsp_GetR|
  0070c	00000108	 DCD         0x108
  00710		 |$LN159@mcbsp_GetR|
  00710	0000007c	 DCD         0x7c
  00714		 |$LN160@mcbsp_GetR|
  00714	00000108	 DCD         0x108
  00718		 |$LN161@mcbsp_GetR|
  00718	00000108	 DCD         0x108
  0071c		 |$LN162@mcbsp_GetR|
  0071c	00000108	 DCD         0x108
  00720		 |$LN163@mcbsp_GetR|
  00720	00000098	 DCD         0x98
  00724		 |$LN164@mcbsp_GetR|
  00724	00000108	 DCD         0x108
  00728		 |$LN165@mcbsp_GetR|
  00728	00000108	 DCD         0x108
  0072c		 |$LN166@mcbsp_GetR|
  0072c	00000108	 DCD         0x108
  00730		 |$LN167@mcbsp_GetR|
  00730	000000b4	 DCD         0xb4
  00734		 |$LN168@mcbsp_GetR|
  00734	00000108	 DCD         0x108
  00738		 |$LN169@mcbsp_GetR|
  00738	00000108	 DCD         0x108
  0073c		 |$LN170@mcbsp_GetR|
  0073c	00000108	 DCD         0x108
  00740		 |$LN171@mcbsp_GetR|
  00740	000000d0	 DCD         0xd0
  00744		 |$LN172@mcbsp_GetR|
  00744	00000108	 DCD         0x108
  00748		 |$LN173@mcbsp_GetR|
  00748	00000108	 DCD         0x108
  0074c		 |$LN174@mcbsp_GetR|
  0074c	00000108	 DCD         0x108
  00750		 |$LN175@mcbsp_GetR|
  00750	00000108	 DCD         0x108
  00754		 |$LN176@mcbsp_GetR|
  00754	00000108	 DCD         0x108
  00758		 |$LN177@mcbsp_GetR|
  00758	00000108	 DCD         0x108
  0075c		 |$LN178@mcbsp_GetR|
  0075c	00000108	 DCD         0x108
  00760		 |$LN179@mcbsp_GetR|
  00760	000000ec	 DCD         0xec
  00764		 |$LN52@mcbsp_GetR|

; 217  :             {
; 218  :             case 8:
; 219  :                 pDevice->pConfigInfo->RxWordLength2 = kMcBSP_Word_Length_8;

  00764	e59d3030	 ldr         r3, [sp, #0x30]
  00768	e2833068	 add         r3, r3, #0x68
  0076c	e5933000	 ldr         r3, [r3]
  00770	e283200c	 add         r2, r3, #0xC
  00774	e3a03000	 mov         r3, #0
  00778	e5823000	 str         r3, [r2]

; 220  :                 break;

  0077c	ea000028	 b           |$LN53@mcbsp_GetR|
  00780		 |$LN51@mcbsp_GetR|

; 221  :             case 12:
; 222  :                 pDevice->pConfigInfo->RxWordLength2 = kMcBSP_Word_Length_12;

  00780	e59d3030	 ldr         r3, [sp, #0x30]
  00784	e2833068	 add         r3, r3, #0x68
  00788	e5933000	 ldr         r3, [r3]
  0078c	e283200c	 add         r2, r3, #0xC
  00790	e3a03001	 mov         r3, #1
  00794	e5823000	 str         r3, [r2]

; 223  :                 break;

  00798	ea000021	 b           |$LN53@mcbsp_GetR|
  0079c		 |$LN50@mcbsp_GetR|

; 224  :             case 16:
; 225  :                 pDevice->pConfigInfo->RxWordLength2 = kMcBSP_Word_Length_16;

  0079c	e59d3030	 ldr         r3, [sp, #0x30]
  007a0	e2833068	 add         r3, r3, #0x68
  007a4	e5933000	 ldr         r3, [r3]
  007a8	e283200c	 add         r2, r3, #0xC
  007ac	e3a03002	 mov         r3, #2
  007b0	e5823000	 str         r3, [r2]

; 226  :                 break;

  007b4	ea00001a	 b           |$LN53@mcbsp_GetR|
  007b8		 |$LN49@mcbsp_GetR|

; 227  :             case 20:
; 228  :                 pDevice->pConfigInfo->RxWordLength2 = kMcBSP_Word_Length_20;

  007b8	e59d3030	 ldr         r3, [sp, #0x30]
  007bc	e2833068	 add         r3, r3, #0x68
  007c0	e5933000	 ldr         r3, [r3]
  007c4	e283200c	 add         r2, r3, #0xC
  007c8	e3a03003	 mov         r3, #3
  007cc	e5823000	 str         r3, [r2]

; 229  :                 break;

  007d0	ea000013	 b           |$LN53@mcbsp_GetR|
  007d4		 |$LN48@mcbsp_GetR|

; 230  :             case 24:
; 231  :                 pDevice->pConfigInfo->RxWordLength2 = kMcBSP_Word_Length_24;

  007d4	e59d3030	 ldr         r3, [sp, #0x30]
  007d8	e2833068	 add         r3, r3, #0x68
  007dc	e5933000	 ldr         r3, [r3]
  007e0	e283200c	 add         r2, r3, #0xC
  007e4	e3a03004	 mov         r3, #4
  007e8	e5823000	 str         r3, [r2]

; 232  :                 break;

  007ec	ea00000c	 b           |$LN53@mcbsp_GetR|
  007f0		 |$LN47@mcbsp_GetR|

; 233  :             case 32:
; 234  :                 pDevice->pConfigInfo->RxWordLength2 = kMcBSP_Word_Length_32;

  007f0	e59d3030	 ldr         r3, [sp, #0x30]
  007f4	e2833068	 add         r3, r3, #0x68
  007f8	e5933000	 ldr         r3, [r3]
  007fc	e283200c	 add         r2, r3, #0xC
  00800	e3a03005	 mov         r3, #5
  00804	e5823000	 str         r3, [r2]

; 235  :                 break;

  00808	ea000005	 b           |$LN53@mcbsp_GetR|
  0080c		 |$LN46@mcbsp_GetR|

; 236  :             default:
; 237  :                 pDevice->pConfigInfo->RxWordLength2 = kMcBSP_Word_Length_16;

  0080c	e59d3030	 ldr         r3, [sp, #0x30]
  00810	e2833068	 add         r3, r3, #0x68
  00814	e5933000	 ldr         r3, [r3]
  00818	e283200c	 add         r2, r3, #0xC
  0081c	e3a03002	 mov         r3, #2
  00820	e5823000	 str         r3, [r2]
  00824		 |$LN53@mcbsp_GetR|

; 238  :             }
; 239  :         }
; 240  :     else

  00824	ea000005	 b           |$LN45@mcbsp_GetR|
  00828		 |$LN55@mcbsp_GetR|

; 241  :         {
; 242  :         pDevice->pConfigInfo->RxPhase = MCBSP_PHASE_SINGLE;

  00828	e59d3030	 ldr         r3, [sp, #0x30]
  0082c	e2833068	 add         r3, r3, #0x68
  00830	e5933000	 ldr         r3, [r3]
  00834	e2832020	 add         r2, r3, #0x20
  00838	e3a03000	 mov         r3, #0
  0083c	e5823000	 str         r3, [r2]
  00840		 |$LN45@mcbsp_GetR|

; 243  :         }
; 244  : 
; 245  :     // use data delay from registry
; 246  :     switch (pDevice->dataDelayTx)

  00840	e59d3030	 ldr         r3, [sp, #0x30]
  00844	e28330d8	 add         r3, r3, #0xD8
  00848	e5933000	 ldr         r3, [r3]
  0084c	e58d3014	 str         r3, [sp, #0x14]
  00850	e59d3014	 ldr         r3, [sp, #0x14]
  00854	e3530000	 cmp         r3, #0
  00858	0a000006	 beq         |$LN42@mcbsp_GetR|
  0085c	e59d3014	 ldr         r3, [sp, #0x14]
  00860	e3530001	 cmp         r3, #1
  00864	0a00000a	 beq         |$LN41@mcbsp_GetR|
  00868	e59d3014	 ldr         r3, [sp, #0x14]
  0086c	e3530002	 cmp         r3, #2
  00870	0a00000e	 beq         |$LN40@mcbsp_GetR|
  00874	ea000014	 b           |$LN39@mcbsp_GetR|
  00878		 |$LN42@mcbsp_GetR|

; 247  :         {
; 248  :         case MCBSP_DATDLY_0BIT:
; 249  :             pDevice->pConfigInfo->TxDataDelay = MCBSP_DATDLY_0BIT;

  00878	e59d3030	 ldr         r3, [sp, #0x30]
  0087c	e2833068	 add         r3, r3, #0x68
  00880	e5933000	 ldr         r3, [r3]
  00884	e2832040	 add         r2, r3, #0x40
  00888	e3a03000	 mov         r3, #0
  0088c	e5823000	 str         r3, [r2]

; 250  :             break;

  00890	ea000013	 b           |$LN43@mcbsp_GetR|
  00894		 |$LN41@mcbsp_GetR|

; 251  :         case MCBSP_DATDLY_1BIT:
; 252  :             pDevice->pConfigInfo->TxDataDelay = MCBSP_DATDLY_1BIT;

  00894	e59d3030	 ldr         r3, [sp, #0x30]
  00898	e2833068	 add         r3, r3, #0x68
  0089c	e5933000	 ldr         r3, [r3]
  008a0	e2832040	 add         r2, r3, #0x40
  008a4	e3a03001	 mov         r3, #1
  008a8	e5823000	 str         r3, [r2]

; 253  :             break;

  008ac	ea00000c	 b           |$LN43@mcbsp_GetR|
  008b0		 |$LN40@mcbsp_GetR|

; 254  :         case MCBSP_DATDLY_2BIT:
; 255  :             pDevice->pConfigInfo->TxDataDelay = MCBSP_DATDLY_2BIT;

  008b0	e59d3030	 ldr         r3, [sp, #0x30]
  008b4	e2833068	 add         r3, r3, #0x68
  008b8	e5933000	 ldr         r3, [r3]
  008bc	e2832040	 add         r2, r3, #0x40
  008c0	e3a03002	 mov         r3, #2
  008c4	e5823000	 str         r3, [r2]

; 256  :             break;

  008c8	ea000005	 b           |$LN43@mcbsp_GetR|
  008cc		 |$LN39@mcbsp_GetR|

; 257  :         default:
; 258  :             pDevice->pConfigInfo->TxDataDelay = MCBSP_DATDLY_1BIT;

  008cc	e59d3030	 ldr         r3, [sp, #0x30]
  008d0	e2833068	 add         r3, r3, #0x68
  008d4	e5933000	 ldr         r3, [r3]
  008d8	e2832040	 add         r2, r3, #0x40
  008dc	e3a03001	 mov         r3, #1
  008e0	e5823000	 str         r3, [r2]
  008e4		 |$LN43@mcbsp_GetR|

; 259  :         }
; 260  : 
; 261  :     // use data delay from registry
; 262  :     switch (pDevice->dataDelayRx)

  008e4	e59d3030	 ldr         r3, [sp, #0x30]
  008e8	e28330f8	 add         r3, r3, #0xF8
  008ec	e5933000	 ldr         r3, [r3]
  008f0	e58d3018	 str         r3, [sp, #0x18]
  008f4	e59d3018	 ldr         r3, [sp, #0x18]
  008f8	e3530000	 cmp         r3, #0
  008fc	0a000006	 beq         |$LN36@mcbsp_GetR|
  00900	e59d3018	 ldr         r3, [sp, #0x18]
  00904	e3530001	 cmp         r3, #1
  00908	0a00000a	 beq         |$LN35@mcbsp_GetR|
  0090c	e59d3018	 ldr         r3, [sp, #0x18]
  00910	e3530002	 cmp         r3, #2
  00914	0a00000e	 beq         |$LN34@mcbsp_GetR|
  00918	ea000014	 b           |$LN33@mcbsp_GetR|
  0091c		 |$LN36@mcbsp_GetR|

; 263  :         {
; 264  :         case MCBSP_DATDLY_0BIT:
; 265  :             pDevice->pConfigInfo->RxDataDelay = MCBSP_DATDLY_0BIT;

  0091c	e59d3030	 ldr         r3, [sp, #0x30]
  00920	e2833068	 add         r3, r3, #0x68
  00924	e5933000	 ldr         r3, [r3]
  00928	e2832014	 add         r2, r3, #0x14
  0092c	e3a03000	 mov         r3, #0
  00930	e5823000	 str         r3, [r2]

; 266  :             break;

  00934	ea000013	 b           |$LN37@mcbsp_GetR|
  00938		 |$LN35@mcbsp_GetR|

; 267  :         case MCBSP_DATDLY_1BIT:
; 268  :             pDevice->pConfigInfo->RxDataDelay = MCBSP_DATDLY_1BIT;

  00938	e59d3030	 ldr         r3, [sp, #0x30]
  0093c	e2833068	 add         r3, r3, #0x68
  00940	e5933000	 ldr         r3, [r3]
  00944	e2832014	 add         r2, r3, #0x14
  00948	e3a03001	 mov         r3, #1
  0094c	e5823000	 str         r3, [r2]

; 269  :             break;

  00950	ea00000c	 b           |$LN37@mcbsp_GetR|
  00954		 |$LN34@mcbsp_GetR|

; 270  :         case MCBSP_DATDLY_2BIT:
; 271  :             pDevice->pConfigInfo->RxDataDelay = MCBSP_DATDLY_2BIT;

  00954	e59d3030	 ldr         r3, [sp, #0x30]
  00958	e2833068	 add         r3, r3, #0x68
  0095c	e5933000	 ldr         r3, [r3]
  00960	e2832014	 add         r2, r3, #0x14
  00964	e3a03002	 mov         r3, #2
  00968	e5823000	 str         r3, [r2]

; 272  :             break;

  0096c	ea000005	 b           |$LN37@mcbsp_GetR|
  00970		 |$LN33@mcbsp_GetR|

; 273  :         default:
; 274  :             pDevice->pConfigInfo->RxDataDelay = MCBSP_DATDLY_1BIT;

  00970	e59d3030	 ldr         r3, [sp, #0x30]
  00974	e2833068	 add         r3, r3, #0x68
  00978	e5933000	 ldr         r3, [r3]
  0097c	e2832014	 add         r2, r3, #0x14
  00980	e3a03001	 mov         r3, #1
  00984	e5823000	 str         r3, [r2]
  00988		 |$LN37@mcbsp_GetR|

; 275  :         }
; 276  : 
; 277  :     //------------------------
; 278  :     // Transmit values
; 279  :     //------------------------
; 280  : 
; 281  :     // use transmit frame sync source from registry
; 282  :     switch (pDevice->frameSyncSourceTx)

  00988	e59d3030	 ldr         r3, [sp, #0x30]
  0098c	e28330e0	 add         r3, r3, #0xE0
  00990	e5933000	 ldr         r3, [r3]
  00994	e58d301c	 str         r3, [sp, #0x1C]
  00998	e59d301c	 ldr         r3, [sp, #0x1C]
  0099c	e3530000	 cmp         r3, #0
  009a0	0a000006	 beq         |$LN30@mcbsp_GetR|
  009a4	e59d301c	 ldr         r3, [sp, #0x1C]
  009a8	e3530002	 cmp         r3, #2
  009ac	0a00000a	 beq         |$LN29@mcbsp_GetR|
  009b0	e59d301c	 ldr         r3, [sp, #0x1C]
  009b4	e3530003	 cmp         r3, #3
  009b8	0a00000e	 beq         |$LN28@mcbsp_GetR|
  009bc	ea000014	 b           |$LN27@mcbsp_GetR|
  009c0		 |$LN30@mcbsp_GetR|

; 283  :         {
; 284  :         case kMcBSP_Tx_FS_SRC_External:
; 285  :             pDevice->pConfigInfo->TxFrameSyncSource =
; 286  :                 kMcBSP_Tx_FS_SRC_External;

  009c0	e59d3030	 ldr         r3, [sp, #0x30]
  009c4	e2833068	 add         r3, r3, #0x68
  009c8	e5933000	 ldr         r3, [r3]
  009cc	e2832048	 add         r2, r3, #0x48
  009d0	e3a03000	 mov         r3, #0
  009d4	e5823000	 str         r3, [r2]

; 287  :             break;

  009d8	ea000013	 b           |$LN31@mcbsp_GetR|
  009dc		 |$LN29@mcbsp_GetR|

; 288  :         case kMcBSP_Tx_FS_SRC_DSR_XSR_COPY:
; 289  :             pDevice->pConfigInfo->TxFrameSyncSource =
; 290  :                 kMcBSP_Tx_FS_SRC_DSR_XSR_COPY;

  009dc	e59d3030	 ldr         r3, [sp, #0x30]
  009e0	e2833068	 add         r3, r3, #0x68
  009e4	e5933000	 ldr         r3, [r3]
  009e8	e2832048	 add         r2, r3, #0x48
  009ec	e3a03002	 mov         r3, #2
  009f0	e5823000	 str         r3, [r2]

; 291  :             break;

  009f4	ea00000c	 b           |$LN31@mcbsp_GetR|
  009f8		 |$LN28@mcbsp_GetR|

; 292  :         case kMcBSP_Tx_FS_SRC_SRG:
; 293  :             pDevice->pConfigInfo->TxFrameSyncSource =
; 294  :                 kMcBSP_Tx_FS_SRC_SRG;

  009f8	e59d3030	 ldr         r3, [sp, #0x30]
  009fc	e2833068	 add         r3, r3, #0x68
  00a00	e5933000	 ldr         r3, [r3]
  00a04	e2832048	 add         r2, r3, #0x48
  00a08	e3a03003	 mov         r3, #3
  00a0c	e5823000	 str         r3, [r2]

; 295  :             break;

  00a10	ea000005	 b           |$LN31@mcbsp_GetR|
  00a14		 |$LN27@mcbsp_GetR|

; 296  :         default:
; 297  :             pDevice->pConfigInfo->TxFrameSyncSource =
; 298  :                 kMcBSP_Tx_FS_SRC_External;

  00a14	e59d3030	 ldr         r3, [sp, #0x30]
  00a18	e2833068	 add         r3, r3, #0x68
  00a1c	e5933000	 ldr         r3, [r3]
  00a20	e2832048	 add         r2, r3, #0x48
  00a24	e3a03000	 mov         r3, #0
  00a28	e5823000	 str         r3, [r2]
  00a2c		 |$LN31@mcbsp_GetR|

; 299  :         }
; 300  : 
; 301  :     // use CLKXM from registry
; 302  :     if (pDevice->clockModeTx)

  00a2c	e59d3030	 ldr         r3, [sp, #0x30]
  00a30	e28330dc	 add         r3, r3, #0xDC
  00a34	e5933000	 ldr         r3, [r3]
  00a38	e3530000	 cmp         r3, #0
  00a3c	0a000006	 beq         |$LN26@mcbsp_GetR|

; 303  :         {
; 304  :         pDevice->pConfigInfo->TxClockSource = MCBSP_PCR_CLKXM;

  00a40	e59d3030	 ldr         r3, [sp, #0x30]
  00a44	e2833068	 add         r3, r3, #0x68
  00a48	e5933000	 ldr         r3, [r3]
  00a4c	e2832044	 add         r2, r3, #0x44
  00a50	e3a03c02	 mov         r3, #2, 24
  00a54	e5823000	 str         r3, [r2]

; 305  :         }
; 306  :     else

  00a58	ea000005	 b           |$LN25@mcbsp_GetR|
  00a5c		 |$LN26@mcbsp_GetR|

; 307  :         {
; 308  :         pDevice->pConfigInfo->TxClockSource = 0;

  00a5c	e59d3030	 ldr         r3, [sp, #0x30]
  00a60	e2833068	 add         r3, r3, #0x68
  00a64	e5933000	 ldr         r3, [r3]
  00a68	e2832044	 add         r2, r3, #0x44
  00a6c	e3a03000	 mov         r3, #0
  00a70	e5823000	 str         r3, [r2]
  00a74		 |$LN25@mcbsp_GetR|

; 309  :         }
; 310  : 
; 311  :     // use FSXP from registry
; 312  :     if (pDevice->frameSyncPolarityTx)

  00a74	e59d3030	 ldr         r3, [sp, #0x30]
  00a78	e28330ec	 add         r3, r3, #0xEC
  00a7c	e5933000	 ldr         r3, [r3]
  00a80	e3530000	 cmp         r3, #0
  00a84	0a000006	 beq         |$LN24@mcbsp_GetR|

; 313  :         {
; 314  :         pDevice->pConfigInfo->TxFrameSyncPolarity = MCBSP_PCR_FSXP;

  00a88	e59d3030	 ldr         r3, [sp, #0x30]
  00a8c	e2833068	 add         r3, r3, #0x68
  00a90	e5933000	 ldr         r3, [r3]
  00a94	e2832058	 add         r2, r3, #0x58
  00a98	e3a03008	 mov         r3, #8
  00a9c	e5823000	 str         r3, [r2]

; 315  :         }
; 316  :     else

  00aa0	ea000005	 b           |$LN23@mcbsp_GetR|
  00aa4		 |$LN24@mcbsp_GetR|

; 317  :         {
; 318  :         pDevice->pConfigInfo->TxFrameSyncPolarity = 0;

  00aa4	e59d3030	 ldr         r3, [sp, #0x30]
  00aa8	e2833068	 add         r3, r3, #0x68
  00aac	e5933000	 ldr         r3, [r3]
  00ab0	e2832058	 add         r2, r3, #0x58
  00ab4	e3a03000	 mov         r3, #0
  00ab8	e5823000	 str         r3, [r2]
  00abc		 |$LN23@mcbsp_GetR|

; 319  :         }
; 320  : 
; 321  :     // use CLKXP from registry
; 322  :     if (pDevice->clockPolarityTx)

  00abc	e59d3030	 ldr         r3, [sp, #0x30]
  00ac0	e28330e8	 add         r3, r3, #0xE8
  00ac4	e5933000	 ldr         r3, [r3]
  00ac8	e3530000	 cmp         r3, #0
  00acc	0a000006	 beq         |$LN22@mcbsp_GetR|

; 323  :         {
; 324  :         pDevice->pConfigInfo->TxClkPolarity = MCBSP_PCR_CLKXP;

  00ad0	e59d3030	 ldr         r3, [sp, #0x30]
  00ad4	e2833068	 add         r3, r3, #0x68
  00ad8	e5933000	 ldr         r3, [r3]
  00adc	e2832054	 add         r2, r3, #0x54
  00ae0	e3a03002	 mov         r3, #2
  00ae4	e5823000	 str         r3, [r2]

; 325  :         }
; 326  :     else

  00ae8	ea000005	 b           |$LN21@mcbsp_GetR|
  00aec		 |$LN22@mcbsp_GetR|

; 327  :         {
; 328  :         pDevice->pConfigInfo->TxClkPolarity = 0;

  00aec	e59d3030	 ldr         r3, [sp, #0x30]
  00af0	e2833068	 add         r3, r3, #0x68
  00af4	e5933000	 ldr         r3, [r3]
  00af8	e2832054	 add         r2, r3, #0x54
  00afc	e3a03000	 mov         r3, #0
  00b00	e5823000	 str         r3, [r2]
  00b04		 |$LN21@mcbsp_GetR|

; 329  :         }
; 330  : 
; 331  :     // use Reverse Mode from registry
; 332  :     if (pDevice->reverseModeTx)

  00b04	e59d3030	 ldr         r3, [sp, #0x30]
  00b08	e28330d4	 add         r3, r3, #0xD4
  00b0c	e5933000	 ldr         r3, [r3]
  00b10	e3530000	 cmp         r3, #0
  00b14	0a000006	 beq         |$LN20@mcbsp_GetR|

; 333  :         {
; 334  :         pDevice->pConfigInfo->TxReverse = MCBSP_REVERSE_LSB_FIRST;

  00b18	e59d3030	 ldr         r3, [sp, #0x30]
  00b1c	e2833068	 add         r3, r3, #0x68
  00b20	e5933000	 ldr         r3, [r3]
  00b24	e283203c	 add         r2, r3, #0x3C
  00b28	e3a03008	 mov         r3, #8
  00b2c	e5823000	 str         r3, [r2]

; 335  :         }
; 336  :     else

  00b30	ea000005	 b           |$LN19@mcbsp_GetR|
  00b34		 |$LN20@mcbsp_GetR|

; 337  :         {
; 338  :         pDevice->pConfigInfo->TxReverse = MCBSP_REVERSE_MSB_FIRST;

  00b34	e59d3030	 ldr         r3, [sp, #0x30]
  00b38	e2833068	 add         r3, r3, #0x68
  00b3c	e5933000	 ldr         r3, [r3]
  00b40	e283203c	 add         r2, r3, #0x3C
  00b44	e3a03000	 mov         r3, #0
  00b48	e5823000	 str         r3, [r2]
  00b4c		 |$LN19@mcbsp_GetR|

; 339  :         }
; 340  : 
; 341  :     //------------------------
; 342  :     // Receive values
; 343  :     //------------------------
; 344  : 
; 345  :     // use FSRM from registry
; 346  :     if (pDevice->frameSyncSourceRx)

  00b4c	e59d3030	 ldr         r3, [sp, #0x30]
  00b50	e2833c01	 add         r3, r3, #1, 24
  00b54	e5933000	 ldr         r3, [r3]
  00b58	e3530000	 cmp         r3, #0
  00b5c	0a000006	 beq         |$LN18@mcbsp_GetR|

; 347  :         {
; 348  :         pDevice->pConfigInfo->RxFrameSyncSource = MCBSP_PCR_FSRM;

  00b60	e59d3030	 ldr         r3, [sp, #0x30]
  00b64	e2833068	 add         r3, r3, #0x68
  00b68	e5933000	 ldr         r3, [r3]
  00b6c	e283201c	 add         r2, r3, #0x1C
  00b70	e3a03b01	 mov         r3, #1, 22
  00b74	e5823000	 str         r3, [r2]

; 349  :         }
; 350  :     else

  00b78	ea000005	 b           |$LN17@mcbsp_GetR|
  00b7c		 |$LN18@mcbsp_GetR|

; 351  :         {
; 352  :         pDevice->pConfigInfo->RxFrameSyncSource = 0;

  00b7c	e59d3030	 ldr         r3, [sp, #0x30]
  00b80	e2833068	 add         r3, r3, #0x68
  00b84	e5933000	 ldr         r3, [r3]
  00b88	e283201c	 add         r2, r3, #0x1C
  00b8c	e3a03000	 mov         r3, #0
  00b90	e5823000	 str         r3, [r2]
  00b94		 |$LN17@mcbsp_GetR|

; 353  :         }
; 354  : 
; 355  :     // use CLKRM from registry
; 356  :     if (pDevice->clockModeRx)

  00b94	e59d3030	 ldr         r3, [sp, #0x30]
  00b98	e28330fc	 add         r3, r3, #0xFC
  00b9c	e5933000	 ldr         r3, [r3]
  00ba0	e3530000	 cmp         r3, #0
  00ba4	0a000006	 beq         |$LN16@mcbsp_GetR|

; 357  :         {
; 358  :         pDevice->pConfigInfo->RxClockSource = MCBSP_PCR_CLKRM;

  00ba8	e59d3030	 ldr         r3, [sp, #0x30]
  00bac	e2833068	 add         r3, r3, #0x68
  00bb0	e5933000	 ldr         r3, [r3]
  00bb4	e2832018	 add         r2, r3, #0x18
  00bb8	e3a03c01	 mov         r3, #1, 24
  00bbc	e5823000	 str         r3, [r2]

; 359  :         }
; 360  :     else

  00bc0	ea000005	 b           |$LN15@mcbsp_GetR|
  00bc4		 |$LN16@mcbsp_GetR|

; 361  :         {
; 362  :         pDevice->pConfigInfo->RxClockSource = 0;

  00bc4	e59d3030	 ldr         r3, [sp, #0x30]
  00bc8	e2833068	 add         r3, r3, #0x68
  00bcc	e5933000	 ldr         r3, [r3]
  00bd0	e2832018	 add         r2, r3, #0x18
  00bd4	e3a03000	 mov         r3, #0
  00bd8	e5823000	 str         r3, [r2]
  00bdc		 |$LN15@mcbsp_GetR|

; 363  :         }
; 364  : 
; 365  :     // use FSRP from registry
; 366  :     if (pDevice->frameSyncPolarityRx)

  00bdc	e59d3030	 ldr         r3, [sp, #0x30]
  00be0	e2833f43	 add         r3, r3, #0x43, 30
  00be4	e5933000	 ldr         r3, [r3]
  00be8	e3530000	 cmp         r3, #0
  00bec	0a000006	 beq         |$LN14@mcbsp_GetR|

; 367  :         {
; 368  :         pDevice->pConfigInfo->RxFrameSyncPolarity = MCBSP_PCR_FSRP;

  00bf0	e59d3030	 ldr         r3, [sp, #0x30]
  00bf4	e2833068	 add         r3, r3, #0x68
  00bf8	e5933000	 ldr         r3, [r3]
  00bfc	e283202c	 add         r2, r3, #0x2C
  00c00	e3a03004	 mov         r3, #4
  00c04	e5823000	 str         r3, [r2]

; 369  :         }
; 370  :     else

  00c08	ea000005	 b           |$LN13@mcbsp_GetR|
  00c0c		 |$LN14@mcbsp_GetR|

; 371  :         {
; 372  :         pDevice->pConfigInfo->RxFrameSyncPolarity = 0;

  00c0c	e59d3030	 ldr         r3, [sp, #0x30]
  00c10	e2833068	 add         r3, r3, #0x68
  00c14	e5933000	 ldr         r3, [r3]
  00c18	e283202c	 add         r2, r3, #0x2C
  00c1c	e3a03000	 mov         r3, #0
  00c20	e5823000	 str         r3, [r2]
  00c24		 |$LN13@mcbsp_GetR|

; 373  :         }
; 374  : 
; 375  :     // use CLKRP from registry
; 376  :     if (pDevice->clockPolarityRx)

  00c24	e59d3030	 ldr         r3, [sp, #0x30]
  00c28	e2833f42	 add         r3, r3, #0x42, 30
  00c2c	e5933000	 ldr         r3, [r3]
  00c30	e3530000	 cmp         r3, #0
  00c34	0a000006	 beq         |$LN12@mcbsp_GetR|

; 377  :         {
; 378  :         pDevice->pConfigInfo->RxClkPolarity = MCBSP_PCR_CLKRP;

  00c38	e59d3030	 ldr         r3, [sp, #0x30]
  00c3c	e2833068	 add         r3, r3, #0x68
  00c40	e5933000	 ldr         r3, [r3]
  00c44	e2832028	 add         r2, r3, #0x28
  00c48	e3a03001	 mov         r3, #1
  00c4c	e5823000	 str         r3, [r2]

; 379  :         }
; 380  :     else

  00c50	ea000005	 b           |$LN11@mcbsp_GetR|
  00c54		 |$LN12@mcbsp_GetR|

; 381  :         {
; 382  :         pDevice->pConfigInfo->RxClkPolarity = 0;

  00c54	e59d3030	 ldr         r3, [sp, #0x30]
  00c58	e2833068	 add         r3, r3, #0x68
  00c5c	e5933000	 ldr         r3, [r3]
  00c60	e2832028	 add         r2, r3, #0x28
  00c64	e3a03000	 mov         r3, #0
  00c68	e5823000	 str         r3, [r2]
  00c6c		 |$LN11@mcbsp_GetR|

; 383  :         }
; 384  : 
; 385  :     // use loopback mode from registry
; 386  :     if (pDevice->loopbackMode)

  00c6c	e59d3030	 ldr         r3, [sp, #0x30]
  00c70	e28330c4	 add         r3, r3, #0xC4
  00c74	e5933000	 ldr         r3, [r3]
  00c78	e3530000	 cmp         r3, #0
  00c7c	0a000005	 beq         |$LN10@mcbsp_GetR|

; 387  :         {
; 388  :         pDevice->pConfigInfo->AnalogLoopBackMode = MCBSP_SPCR1_ALB_ENABLE;

  00c80	e59d3030	 ldr         r3, [sp, #0x30]
  00c84	e2833068	 add         r3, r3, #0x68
  00c88	e5932000	 ldr         r2, [r3]
  00c8c	e3a03902	 mov         r3, #2, 18
  00c90	e5823000	 str         r3, [r2]

; 389  :         }
; 390  :     else

  00c94	ea000004	 b           |$LN9@mcbsp_GetR|
  00c98		 |$LN10@mcbsp_GetR|

; 391  :         {
; 392  :         pDevice->pConfigInfo->AnalogLoopBackMode = 0;

  00c98	e59d3030	 ldr         r3, [sp, #0x30]
  00c9c	e2833068	 add         r3, r3, #0x68
  00ca0	e5932000	 ldr         r2, [r3]
  00ca4	e3a03000	 mov         r3, #0
  00ca8	e5823000	 str         r3, [r2]
  00cac		 |$LN9@mcbsp_GetR|

; 393  :         }
; 394  : 
; 395  :     // use justification mode from registry
; 396  :     switch (pDevice->justificationMode << 13)

  00cac	e59d3030	 ldr         r3, [sp, #0x30]
  00cb0	e2833f4a	 add         r3, r3, #0x4A, 30
  00cb4	e5933000	 ldr         r3, [r3]
  00cb8	e1a03683	 mov         r3, r3, lsl #13
  00cbc	e58d3020	 str         r3, [sp, #0x20]
  00cc0	e59d3020	 ldr         r3, [sp, #0x20]
  00cc4	e3530000	 cmp         r3, #0
  00cc8	0a000006	 beq         |$LN6@mcbsp_GetR|
  00ccc	e59d3020	 ldr         r3, [sp, #0x20]
  00cd0	e3530a02	 cmp         r3, #2, 20
  00cd4	0a00000a	 beq         |$LN5@mcbsp_GetR|
  00cd8	e59d3020	 ldr         r3, [sp, #0x20]
  00cdc	e3530901	 cmp         r3, #1, 18
  00ce0	0a00000e	 beq         |$LN4@mcbsp_GetR|
  00ce4	ea000014	 b           |$LN3@mcbsp_GetR|
  00ce8		 |$LN6@mcbsp_GetR|

; 397  :         {
; 398  :         case MCBSP_SPCR1_RJUST_RJ_ZEROFILL:
; 399  :             pDevice->pConfigInfo->JustificationMode =
; 400  :                 MCBSP_SPCR1_RJUST_RJ_ZEROFILL;

  00ce8	e59d3030	 ldr         r3, [sp, #0x30]
  00cec	e2833068	 add         r3, r3, #0x68
  00cf0	e5933000	 ldr         r3, [r3]
  00cf4	e283206c	 add         r2, r3, #0x6C
  00cf8	e3a03000	 mov         r3, #0
  00cfc	e5823000	 str         r3, [r2]

; 401  :             break;

  00d00	ea000013	 b           |$LN7@mcbsp_GetR|
  00d04		 |$LN5@mcbsp_GetR|

; 402  :         case MCBSP_SPCR1_RJUST_RJ_SIGNFILL:
; 403  :             pDevice->pConfigInfo->JustificationMode =
; 404  :                 MCBSP_SPCR1_RJUST_RJ_SIGNFILL;

  00d04	e59d3030	 ldr         r3, [sp, #0x30]
  00d08	e2833068	 add         r3, r3, #0x68
  00d0c	e5933000	 ldr         r3, [r3]
  00d10	e283206c	 add         r2, r3, #0x6C
  00d14	e3a03a02	 mov         r3, #2, 20
  00d18	e5823000	 str         r3, [r2]

; 405  :             break;

  00d1c	ea00000c	 b           |$LN7@mcbsp_GetR|
  00d20		 |$LN4@mcbsp_GetR|

; 406  :         case MCBSP_SPCR1_RJUST_LJ_ZEROFILL:
; 407  :             pDevice->pConfigInfo->JustificationMode =
; 408  :                 MCBSP_SPCR1_RJUST_LJ_ZEROFILL;

  00d20	e59d3030	 ldr         r3, [sp, #0x30]
  00d24	e2833068	 add         r3, r3, #0x68
  00d28	e5933000	 ldr         r3, [r3]
  00d2c	e283206c	 add         r2, r3, #0x6C
  00d30	e3a03901	 mov         r3, #1, 18
  00d34	e5823000	 str         r3, [r2]

; 409  :             break;

  00d38	ea000005	 b           |$LN7@mcbsp_GetR|
  00d3c		 |$LN3@mcbsp_GetR|

; 410  :         default:
; 411  :             pDevice->pConfigInfo->JustificationMode =
; 412  :                 MCBSP_SPCR1_RJUST_RJ_ZEROFILL;

  00d3c	e59d3030	 ldr         r3, [sp, #0x30]
  00d40	e2833068	 add         r3, r3, #0x68
  00d44	e5933000	 ldr         r3, [r3]
  00d48	e283206c	 add         r2, r3, #0x6C
  00d4c	e3a03000	 mov         r3, #0
  00d50	e5823000	 str         r3, [r2]
  00d54		 |$LN7@mcbsp_GetR|

; 413  :         }
; 414  : 
; 415  :     // use Reverse Mode from registry
; 416  :     if (pDevice->reverseModeRx)

  00d54	e59d3030	 ldr         r3, [sp, #0x30]
  00d58	e28330f4	 add         r3, r3, #0xF4
  00d5c	e5933000	 ldr         r3, [r3]
  00d60	e3530000	 cmp         r3, #0
  00d64	0a000006	 beq         |$LN2@mcbsp_GetR|

; 417  :         {
; 418  :         pDevice->pConfigInfo->RxReverse = MCBSP_REVERSE_LSB_FIRST;

  00d68	e59d3030	 ldr         r3, [sp, #0x30]
  00d6c	e2833068	 add         r3, r3, #0x68
  00d70	e5933000	 ldr         r3, [r3]
  00d74	e2832010	 add         r2, r3, #0x10
  00d78	e3a03008	 mov         r3, #8
  00d7c	e5823000	 str         r3, [r2]

; 419  :         }
; 420  :     else

  00d80	ea000005	 b           |$LN1@mcbsp_GetR|
  00d84		 |$LN2@mcbsp_GetR|

; 421  :         {
; 422  :         pDevice->pConfigInfo->RxReverse = MCBSP_REVERSE_MSB_FIRST;

  00d84	e59d3030	 ldr         r3, [sp, #0x30]
  00d88	e2833068	 add         r3, r3, #0x68
  00d8c	e5933000	 ldr         r3, [r3]
  00d90	e2832010	 add         r2, r3, #0x10
  00d94	e3a03000	 mov         r3, #0
  00d98	e5823000	 str         r3, [r2]
  00d9c		 |$LN1@mcbsp_GetR|

; 423  :         }
; 424  : 
; 425  :     pDevice->pConfigInfo->RxSyncError = MCBSP_SPCR1_RINTM_RSYNCERR;

  00d9c	e59d3030	 ldr         r3, [sp, #0x30]
  00da0	e2833068	 add         r3, r3, #0x68
  00da4	e5933000	 ldr         r3, [r3]
  00da8	e2832024	 add         r2, r3, #0x24
  00dac	e3a03030	 mov         r3, #0x30
  00db0	e5823000	 str         r3, [r2]

; 426  :     pDevice->pConfigInfo->TxSyncError = MCBSP_SPCR2_XINTM_XSYNCERR;

  00db4	e59d3030	 ldr         r3, [sp, #0x30]
  00db8	e2833068	 add         r3, r3, #0x68
  00dbc	e5933000	 ldr         r3, [r3]
  00dc0	e2832050	 add         r2, r3, #0x50
  00dc4	e3a03030	 mov         r3, #0x30
  00dc8	e5823000	 str         r3, [r2]

; 427  : 
; 428  :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S\r\n", __FUNCTION__));

  00dcc	e59f303c	 ldr         r3, [pc, #0x3C]
  00dd0	e5933440	 ldr         r3, [r3, #0x440]
  00dd4	e3130004	 tst         r3, #4
  00dd8	0a000005	 beq         |$LN90@mcbsp_GetR|
  00ddc	e59f1028	 ldr         r1, [pc, #0x28]
  00de0	e59f0020	 ldr         r0, [pc, #0x20]
  00de4	eb000000	 bl          NKDbgPrintfW
  00de8	e3a03001	 mov         r3, #1
  00dec	e58d3024	 str         r3, [sp, #0x24]
  00df0	ea000001	 b           |$LN91@mcbsp_GetR|
  00df4		 |$LN90@mcbsp_GetR|
  00df4	e3a03000	 mov         r3, #0
  00df8	e58d3024	 str         r3, [sp, #0x24]
  00dfc		 |$LN91@mcbsp_GetR|

; 429  : }

  00dfc	e28dd028	 add         sp, sp, #0x28
  00e00	e89d6000	 ldmia       sp, {sp, lr}
  00e04	e12fff1e	 bx          lr
  00e08		 |$LN183@mcbsp_GetR|
  00e08		 |$LN184@mcbsp_GetR|
  00e08	00000000	 DCD         |??_C@_1BE@LFFACMJN@?$AAM?$AAC?$AAP?$AA?3?$AA?9?$AA?$CF?$AAS?$AA?$AN?$AA?6?$AA?$AA@|
  00e0c		 |$LN185@mcbsp_GetR|
  00e0c	00000000	 DCD         |??_C@_0BI@CBJINJMD@mcbsp_GetRegistryValues?$AA@|
  00e10		 |$LN186@mcbsp_GetR|
  00e10	00000000	 DCD         |dpCurSettings|
  00e14		 |$LN187@mcbsp_GetR|
  00e14	00000000	 DCD         |??_C@_1CE@FCDKFBGI@?$AAM?$AAC?$AAP?$AA?3?$AA?$CL?$AA?$CF?$AAS?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00e18		 |$M37215|

			 ENDP  ; |mcbsp_GetRegistryValues|

	EXPORT	|??_C@_0BJ@HDFKFJJA@mcbsp_ConfigureForMaster?$AA@| [ DATA ] ; `string'
	EXPORT	|mcbsp_ConfigureForMaster|

  00010			 AREA	 |.pdata|, PDATA
|$T37231| DCD	|$LN9@mcbsp_Conf@2|
	DCD	0x4000bf04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BJ@HDFKFJJA@mcbsp_ConfigureForMaster?$AA@| DCB "mcbsp_ConfigureFo"
	DCB	"rMaster", 0x0				; `string'
; Function compile flags: /Odtp

  00e18			 AREA	 |.text|, CODE, ARM

  00e18		 |mcbsp_ConfigureForMaster| PROC

; 440  : {

  00e18		 |$LN9@mcbsp_Conf@2|
  00e18	e1a0c00d	 mov         r12, sp
  00e1c	e92d0001	 stmdb       sp!, {r0}
  00e20	e92d5000	 stmdb       sp!, {r12, lr}
  00e24	e24dd008	 sub         sp, sp, #8
  00e28		 |$M37228|

; 441  :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S(0x%08x)\r\n", __FUNCTION__, pDevice));

  00e28	e59f32dc	 ldr         r3, [pc, #0x2DC]
  00e2c	e5933440	 ldr         r3, [r3, #0x440]
  00e30	e3130004	 tst         r3, #4
  00e34	0a000006	 beq         |$LN3@mcbsp_Conf@2|
  00e38	e59d2010	 ldr         r2, [sp, #0x10]
  00e3c	e59f12c4	 ldr         r1, [pc, #0x2C4]
  00e40	e59f02c8	 ldr         r0, [pc, #0x2C8]
  00e44	eb000000	 bl          NKDbgPrintfW
  00e48	e3a03001	 mov         r3, #1
  00e4c	e58d3000	 str         r3, [sp]
  00e50	ea000001	 b           |$LN4@mcbsp_Conf@2|
  00e54		 |$LN3@mcbsp_Conf@2|
  00e54	e3a03000	 mov         r3, #0
  00e58	e58d3000	 str         r3, [sp]
  00e5c		 |$LN4@mcbsp_Conf@2|

; 442  : 
; 443  :     //------------------------
; 444  :     // SRG values
; 445  :     //------------------------
; 446  : 
; 447  :     // SRG clock source
; 448  :     // value: 0(rising CLKS), 1(falling CLKS), 2(CPU), 3(CLKRI),  4(CLKXI)
; 449  :     pDevice->pConfigInfo->SRGClkSrc = kMcBSP_SRG_SRC_CLKS_PIN_FALL;

  00e5c	e59d3010	 ldr         r3, [sp, #0x10]
  00e60	e2833068	 add         r3, r3, #0x68
  00e64	e5933000	 ldr         r3, [r3]
  00e68	e283205c	 add         r2, r3, #0x5C
  00e6c	e3a03001	 mov         r3, #1
  00e70	e5823000	 str         r3, [r2]

; 450  : 
; 451  :     // frame width
; 452  :     pDevice->pConfigInfo->SRGFrameWidth = 16;

  00e74	e59d3010	 ldr         r3, [sp, #0x10]
  00e78	e2833068	 add         r3, r3, #0x68
  00e7c	e5933000	 ldr         r3, [r3]
  00e80	e2832060	 add         r2, r3, #0x60
  00e84	e3a03010	 mov         r3, #0x10
  00e88	e5823000	 str         r3, [r2]

; 453  : 
; 454  :     // use clock divider based on frequency (input clk is 256 * 48KHz fclock)
; 455  :     // sampling frequency = 48Khz
; 456  :     //clkgdv = (clk rate /(sample rate * (bit_per_sample * 2))) - 1
; 457  :     pDevice->pConfigInfo->SRGClkDivFactor = 7;

  00e8c	e59d3010	 ldr         r3, [sp, #0x10]
  00e90	e2833068	 add         r3, r3, #0x68
  00e94	e5933000	 ldr         r3, [r3]
  00e98	e2832064	 add         r2, r3, #0x64
  00e9c	e3a03007	 mov         r3, #7
  00ea0	e5823000	 str         r3, [r2]

; 458  : 
; 459  :     // clock resync
; 460  :     // Value: MCBSP_SRGR2_GSYNC or 0
; 461  :     pDevice->pConfigInfo->SRGClkSyncMode = 0;

  00ea4	e59d3010	 ldr         r3, [sp, #0x10]
  00ea8	e2833068	 add         r3, r3, #0x68
  00eac	e5933000	 ldr         r3, [r3]
  00eb0	e2832068	 add         r2, r3, #0x68
  00eb4	e3a03000	 mov         r3, #0
  00eb8	e5823000	 str         r3, [r2]

; 462  : 
; 463  :     //------------------------
; 464  :     // Transmit and receive values
; 465  :     //------------------------
; 466  : #if 1
; 467  :     // Single phase
; 468  : 
; 469  :     // frame length
; 470  :     pDevice->pConfigInfo->TxFrameLength = 1;

  00ebc	e59d3010	 ldr         r3, [sp, #0x10]
  00ec0	e2833068	 add         r3, r3, #0x68
  00ec4	e5933000	 ldr         r3, [r3]
  00ec8	e2832030	 add         r2, r3, #0x30
  00ecc	e3a03001	 mov         r3, #1
  00ed0	e5823000	 str         r3, [r2]

; 471  :     pDevice->pConfigInfo->RxFrameLength = 1;

  00ed4	e59d3010	 ldr         r3, [sp, #0x10]
  00ed8	e2833068	 add         r3, r3, #0x68
  00edc	e5933000	 ldr         r3, [r3]
  00ee0	e2832004	 add         r2, r3, #4
  00ee4	e3a03001	 mov         r3, #1
  00ee8	e5823000	 str         r3, [r2]

; 472  : 
; 473  :     // word length
; 474  :     pDevice->pConfigInfo->TxWordLength = kMcBSP_Word_Length_32;

  00eec	e59d3010	 ldr         r3, [sp, #0x10]
  00ef0	e2833068	 add         r3, r3, #0x68
  00ef4	e5933000	 ldr         r3, [r3]
  00ef8	e2832034	 add         r2, r3, #0x34
  00efc	e3a03005	 mov         r3, #5
  00f00	e5823000	 str         r3, [r2]

; 475  :     pDevice->pConfigInfo->RxWordLength = kMcBSP_Word_Length_32;

  00f04	e59d3010	 ldr         r3, [sp, #0x10]
  00f08	e2833068	 add         r3, r3, #0x68
  00f0c	e5933000	 ldr         r3, [r3]
  00f10	e2832008	 add         r2, r3, #8
  00f14	e3a03005	 mov         r3, #5
  00f18	e5823000	 str         r3, [r2]

; 476  : 
; 477  :     // dual phase
; 478  :     // value: MCBSP_PHASE_DUAL or MCBSP_PHASE_SINGLE
; 479  :     pDevice->pConfigInfo->TxPhase = MCBSP_PHASE_SINGLE;

  00f1c	e59d3010	 ldr         r3, [sp, #0x10]
  00f20	e2833068	 add         r3, r3, #0x68
  00f24	e5933000	 ldr         r3, [r3]
  00f28	e283204c	 add         r2, r3, #0x4C
  00f2c	e3a03000	 mov         r3, #0
  00f30	e5823000	 str         r3, [r2]

; 480  :     pDevice->pConfigInfo->RxPhase = MCBSP_PHASE_SINGLE;

  00f34	e59d3010	 ldr         r3, [sp, #0x10]
  00f38	e2833068	 add         r3, r3, #0x68
  00f3c	e5933000	 ldr         r3, [r3]
  00f40	e2832020	 add         r2, r3, #0x20
  00f44	e3a03000	 mov         r3, #0
  00f48	e5823000	 str         r3, [r2]

; 481  : 
; 482  : #else
; 483  :     // Dual phase
; 484  : 
; 485  :     // frame length
; 486  :     pDevice->pConfigInfo->TxFrameLength = 1;
; 487  :     pDevice->pConfigInfo->RxFrameLength = 1;
; 488  : 
; 489  :     // word length
; 490  :     pDevice->pConfigInfo->TxWordLength = kMcBSP_Word_Length_16;
; 491  :     pDevice->pConfigInfo->RxWordLength = kMcBSP_Word_Length_16;
; 492  : 
; 493  :     // dual phase
; 494  :     // value: MCBSP_PHASE_DUAL or MCBSP_PHASE_SINGLE
; 495  :     pDevice->pConfigInfo->TxPhase = MCBSP_PHASE_DUAL;
; 496  :     pDevice->pConfigInfo->RxPhase = MCBSP_PHASE_DUAL;
; 497  : 
; 498  :     // word length 2 ( for dual phase)
; 499  :     pDevice->pConfigInfo->TxWordLength2 = kMcBSP_Word_Length_16;
; 500  :     pDevice->pConfigInfo->RxWordLength2 = kMcBSP_Word_Length_16;
; 501  : #endif
; 502  :     // use data delay from registry
; 503  :     // Value: 0, 1, or 2 bits
; 504  :     pDevice->pConfigInfo->TxDataDelay = 1;

  00f4c	e59d3010	 ldr         r3, [sp, #0x10]
  00f50	e2833068	 add         r3, r3, #0x68
  00f54	e5933000	 ldr         r3, [r3]
  00f58	e2832040	 add         r2, r3, #0x40
  00f5c	e3a03001	 mov         r3, #1
  00f60	e5823000	 str         r3, [r2]

; 505  :     pDevice->pConfigInfo->RxDataDelay = 1;

  00f64	e59d3010	 ldr         r3, [sp, #0x10]
  00f68	e2833068	 add         r3, r3, #0x68
  00f6c	e5933000	 ldr         r3, [r3]
  00f70	e2832014	 add         r2, r3, #0x14
  00f74	e3a03001	 mov         r3, #1
  00f78	e5823000	 str         r3, [r2]

; 506  : 
; 507  :     //------------------------
; 508  :     // Transmit values
; 509  :     //------------------------
; 510  : 
; 511  :     // transmit frame sync source
; 512  :     // Value: 0 (ext), 2 (int xmit), or 3 (int SRG)
; 513  :     pDevice->pConfigInfo->TxFrameSyncSource = kMcBSP_Tx_FS_SRC_SRG;

  00f7c	e59d3010	 ldr         r3, [sp, #0x10]
  00f80	e2833068	 add         r3, r3, #0x68
  00f84	e5933000	 ldr         r3, [r3]
  00f88	e2832048	 add         r2, r3, #0x48
  00f8c	e3a03003	 mov         r3, #3
  00f90	e5823000	 str         r3, [r2]

; 514  : 
; 515  :     // CLKXM
; 516  :     // Value: MCBSP_PCR_CLKXM or 0(external clock drivers CLKX)
; 517  :     pDevice->pConfigInfo->TxClockSource = MCBSP_PCR_CLKXM;

  00f94	e59d3010	 ldr         r3, [sp, #0x10]
  00f98	e2833068	 add         r3, r3, #0x68
  00f9c	e5933000	 ldr         r3, [r3]
  00fa0	e2832044	 add         r2, r3, #0x44
  00fa4	e3a03c02	 mov         r3, #2, 24
  00fa8	e5823000	 str         r3, [r2]

; 518  : 
; 519  :     // FSXP
; 520  :     // Value: MCBSP_PCR_FSXP or 0(active high)
; 521  :     pDevice->pConfigInfo->TxFrameSyncPolarity = 0;

  00fac	e59d3010	 ldr         r3, [sp, #0x10]
  00fb0	e2833068	 add         r3, r3, #0x68
  00fb4	e5933000	 ldr         r3, [r3]
  00fb8	e2832058	 add         r2, r3, #0x58
  00fbc	e3a03000	 mov         r3, #0
  00fc0	e5823000	 str         r3, [r2]

; 522  : 
; 523  :     // CLKXP
; 524  :     // Value: MCBSP_PCR_CLKXP or 0(rising edge)
; 525  :     pDevice->pConfigInfo->TxClkPolarity = 0;

  00fc4	e59d3010	 ldr         r3, [sp, #0x10]
  00fc8	e2833068	 add         r3, r3, #0x68
  00fcc	e5933000	 ldr         r3, [r3]
  00fd0	e2832054	 add         r2, r3, #0x54
  00fd4	e3a03000	 mov         r3, #0
  00fd8	e5823000	 str         r3, [r2]

; 526  : 
; 527  :     // Reverse Mode
; 528  :     // value: MCBSP_REVERSE_MSB_FIRST or MCBSP_REVERSE_LSB_FIRST
; 529  :     pDevice->pConfigInfo->TxReverse = MCBSP_REVERSE_MSB_FIRST;

  00fdc	e59d3010	 ldr         r3, [sp, #0x10]
  00fe0	e2833068	 add         r3, r3, #0x68
  00fe4	e5933000	 ldr         r3, [r3]
  00fe8	e283203c	 add         r2, r3, #0x3C
  00fec	e3a03000	 mov         r3, #0
  00ff0	e5823000	 str         r3, [r2]

; 530  : 
; 531  :     //------------------------
; 532  :     // Receive values
; 533  :     //------------------------
; 534  : 
; 535  :     //  FSRM
; 536  :     // Value: MCBSP_PCR_FSRM or 0(external clock drivers frame sync)
; 537  :     pDevice->pConfigInfo->RxFrameSyncSource = MCBSP_PCR_FSRM;

  00ff4	e59d3010	 ldr         r3, [sp, #0x10]
  00ff8	e2833068	 add         r3, r3, #0x68
  00ffc	e5933000	 ldr         r3, [r3]
  01000	e283201c	 add         r2, r3, #0x1C
  01004	e3a03b01	 mov         r3, #1, 22
  01008	e5823000	 str         r3, [r2]

; 538  : 
; 539  :     // CLKRM from registry
; 540  :     // Value: MCBSP_PCR_CLKRM or 0(external clock drivers CLKR)
; 541  :     pDevice->pConfigInfo->RxClockSource = MCBSP_PCR_CLKRM;

  0100c	e59d3010	 ldr         r3, [sp, #0x10]
  01010	e2833068	 add         r3, r3, #0x68
  01014	e5933000	 ldr         r3, [r3]
  01018	e2832018	 add         r2, r3, #0x18
  0101c	e3a03c01	 mov         r3, #1, 24
  01020	e5823000	 str         r3, [r2]

; 542  : 
; 543  :     // FSRP
; 544  :     // Value: MCBSP_PCR_FSRP or 0(active high)
; 545  :     pDevice->pConfigInfo->RxFrameSyncPolarity = 0;

  01024	e59d3010	 ldr         r3, [sp, #0x10]
  01028	e2833068	 add         r3, r3, #0x68
  0102c	e5933000	 ldr         r3, [r3]
  01030	e283202c	 add         r2, r3, #0x2C
  01034	e3a03000	 mov         r3, #0
  01038	e5823000	 str         r3, [r2]

; 546  : 
; 547  :     // CLKRP
; 548  :     // Value: MCBSP_PCR_CLKRP or 0(falling edge)
; 549  :     pDevice->pConfigInfo->RxClkPolarity = MCBSP_PCR_CLKRP;

  0103c	e59d3010	 ldr         r3, [sp, #0x10]
  01040	e2833068	 add         r3, r3, #0x68
  01044	e5933000	 ldr         r3, [r3]
  01048	e2832028	 add         r2, r3, #0x28
  0104c	e3a03001	 mov         r3, #1
  01050	e5823000	 str         r3, [r2]

; 550  : 
; 551  :     // loopback mode (MCBSP_SPCR1_ALB_ENABLE or 0)
; 552  :     pDevice->pConfigInfo->AnalogLoopBackMode = 0;

  01054	e59d3010	 ldr         r3, [sp, #0x10]
  01058	e2833068	 add         r3, r3, #0x68
  0105c	e5932000	 ldr         r2, [r3]
  01060	e3a03000	 mov         r3, #0
  01064	e5823000	 str         r3, [r2]

; 553  : 
; 554  :     // justification mode
; 555  :     //(right, zero fill), (right, sign fill), or (left)
; 556  :     pDevice->pConfigInfo->JustificationMode = MCBSP_SPCR1_RJUST_RJ_ZEROFILL;

  01068	e59d3010	 ldr         r3, [sp, #0x10]
  0106c	e2833068	 add         r3, r3, #0x68
  01070	e5933000	 ldr         r3, [r3]
  01074	e283206c	 add         r2, r3, #0x6C
  01078	e3a03000	 mov         r3, #0
  0107c	e5823000	 str         r3, [r2]

; 557  : 
; 558  :     // Reverse Mode
; 559  :     // value: MCBSP_REVERSE_MSB_FIRST or MCBSP_REVERSE_LSB_FIRST
; 560  :     pDevice->pConfigInfo->RxReverse = MCBSP_REVERSE_MSB_FIRST;

  01080	e59d3010	 ldr         r3, [sp, #0x10]
  01084	e2833068	 add         r3, r3, #0x68
  01088	e5933000	 ldr         r3, [r3]
  0108c	e2832010	 add         r2, r3, #0x10
  01090	e3a03000	 mov         r3, #0
  01094	e5823000	 str         r3, [r2]

; 561  : 
; 562  :     pDevice->pConfigInfo->RxSyncError = 0;

  01098	e59d3010	 ldr         r3, [sp, #0x10]
  0109c	e2833068	 add         r3, r3, #0x68
  010a0	e5933000	 ldr         r3, [r3]
  010a4	e2832024	 add         r2, r3, #0x24
  010a8	e3a03000	 mov         r3, #0
  010ac	e5823000	 str         r3, [r2]

; 563  :     pDevice->pConfigInfo->TxSyncError = 0;

  010b0	e59d3010	 ldr         r3, [sp, #0x10]
  010b4	e2833068	 add         r3, r3, #0x68
  010b8	e5933000	 ldr         r3, [r3]
  010bc	e2832050	 add         r2, r3, #0x50
  010c0	e3a03000	 mov         r3, #0
  010c4	e5823000	 str         r3, [r2]

; 564  : 
; 565  :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S\r\n", __FUNCTION__));

  010c8	e59f303c	 ldr         r3, [pc, #0x3C]
  010cc	e5933440	 ldr         r3, [r3, #0x440]
  010d0	e3130004	 tst         r3, #4
  010d4	0a000005	 beq         |$LN5@mcbsp_Conf@2|
  010d8	e59f1028	 ldr         r1, [pc, #0x28]
  010dc	e59f0020	 ldr         r0, [pc, #0x20]
  010e0	eb000000	 bl          NKDbgPrintfW
  010e4	e3a03001	 mov         r3, #1
  010e8	e58d3004	 str         r3, [sp, #4]
  010ec	ea000001	 b           |$LN6@mcbsp_Conf@2|
  010f0		 |$LN5@mcbsp_Conf@2|
  010f0	e3a03000	 mov         r3, #0
  010f4	e58d3004	 str         r3, [sp, #4]
  010f8		 |$LN6@mcbsp_Conf@2|

; 566  : }

  010f8	e28dd008	 add         sp, sp, #8
  010fc	e89d6000	 ldmia       sp, {sp, lr}
  01100	e12fff1e	 bx          lr
  01104		 |$LN10@mcbsp_Conf@2|
  01104		 |$LN11@mcbsp_Conf@2|
  01104	00000000	 DCD         |??_C@_1BE@LFFACMJN@?$AAM?$AAC?$AAP?$AA?3?$AA?9?$AA?$CF?$AAS?$AA?$AN?$AA?6?$AA?$AA@|
  01108		 |$LN12@mcbsp_Conf@2|
  01108	00000000	 DCD         |??_C@_0BJ@HDFKFJJA@mcbsp_ConfigureForMaster?$AA@|
  0110c		 |$LN13@mcbsp_Conf@2|
  0110c	00000000	 DCD         |dpCurSettings|
  01110		 |$LN14@mcbsp_Conf@2|
  01110	00000000	 DCD         |??_C@_1CE@FCDKFBGI@?$AAM?$AAC?$AAP?$AA?3?$AA?$CL?$AA?$CF?$AAS?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  01114		 |$M37229|

			 ENDP  ; |mcbsp_ConfigureForMaster|

	EXPORT	|??_C@_1DO@HLAMMGHN@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAM?$AAC?$AAP?$AA?3?$AA?$CF?$AAS?$AA?3?$AA?5?$AAR?$AAe?$AAs?$AAe?$AAt?$AA?5?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0BL@ENOJBDFN@mcbsp_ResetShadowRegisters?$AA@| [ DATA ] ; `string'
	IMPORT	|Sleep|

  00018			 AREA	 |.pdata|, PDATA
|$T37247| DCD	|$LN14@mcbsp_Rese|
	DCD	0x40009404

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@HLAMMGHN@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAM?$AAC?$AAP?$AA?3?$AA?$CF?$AAS?$AA?3?$AA?5?$AAR?$AAe?$AAs?$AAe?$AAt?$AA?5?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$AN?$AA?6?$AA?$AA@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "M", 0x0, "C", 0x0, "P", 0x0, ":", 0x0, "%", 0x0, "S"
	DCB	0x0, ":", 0x0, " ", 0x0, "R", 0x0, "e", 0x0, "s", 0x0, "e"
	DCB	0x0, "t", 0x0, " ", 0x0, "T", 0x0, "i", 0x0, "m", 0x0, "e"
	DCB	0x0, "o", 0x0, "u", 0x0, "t", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BL@ENOJBDFN@mcbsp_ResetShadowRegisters?$AA@| DCB "mcbsp_ResetShad"
	DCB	"owRegisters", 0x0			; `string'
; Function compile flags: /Odtp

  01114			 AREA	 |.text|, CODE, ARM

  01114		 |mcbsp_ResetShadowRegisters| PROC

; 577  : {

  01114		 |$LN14@mcbsp_Rese|
  01114	e1a0c00d	 mov         r12, sp
  01118	e92d0001	 stmdb       sp!, {r0}
  0111c	e92d5000	 stmdb       sp!, {r12, lr}
  01120	e24dd010	 sub         sp, sp, #0x10
  01124		 |$M37244|

; 578  :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S(0x%08x)\r\n", __FUNCTION__, pDevice));

  01124	e59f322c	 ldr         r3, [pc, #0x22C]
  01128	e5933440	 ldr         r3, [r3, #0x440]
  0112c	e3130004	 tst         r3, #4
  01130	0a000006	 beq         |$LN6@mcbsp_Rese|
  01134	e59d2018	 ldr         r2, [sp, #0x18]
  01138	e59f1214	 ldr         r1, [pc, #0x214]
  0113c	e59f021c	 ldr         r0, [pc, #0x21C]
  01140	eb000000	 bl          NKDbgPrintfW
  01144	e3a03001	 mov         r3, #1
  01148	e58d3004	 str         r3, [sp, #4]
  0114c	ea000001	 b           |$LN7@mcbsp_Rese|
  01150		 |$LN6@mcbsp_Rese|
  01150	e3a03000	 mov         r3, #0
  01154	e58d3004	 str         r3, [sp, #4]
  01158		 |$LN7@mcbsp_Rese|

; 579  : 
; 580  :     UINT counter = 0;

  01158	e3a03000	 mov         r3, #0
  0115c	e58d3000	 str         r3, [sp]

; 581  :     // Do a software reset of McBSP
; 582  :     pDevice->shadowRegs.SYSCONFIG = MCBSP_SYSCONFIG_SOFTRESET;

  01160	e59d3018	 ldr         r3, [sp, #0x18]
  01164	e283204c	 add         r2, r3, #0x4C
  01168	e3a03002	 mov         r3, #2
  0116c	e5823000	 str         r3, [r2]

; 583  :     OUTREG32(&pDevice->pMcbspRegs->SYSCONFIG, pDevice->shadowRegs.SYSCONFIG);

  01170	e59d3018	 ldr         r3, [sp, #0x18]
  01174	e283104c	 add         r1, r3, #0x4C
  01178	e59d3018	 ldr         r3, [sp, #0x18]
  0117c	e283301c	 add         r3, r3, #0x1C
  01180	e5933000	 ldr         r3, [r3]
  01184	e283208c	 add         r2, r3, #0x8C
  01188	e5913000	 ldr         r3, [r1]
  0118c	e5823000	 str         r3, [r2]
  01190		 |$LN3@mcbsp_Rese|

; 584  : 
; 585  :     // Read to confirm if the reset is done
; 586  :     while (INREG32(&pDevice->pMcbspRegs->SYSCONFIG) & MCBSP_SYSCONFIG_SOFTRESET)

  01190	e59d3018	 ldr         r3, [sp, #0x18]
  01194	e283301c	 add         r3, r3, #0x1C
  01198	e5933000	 ldr         r3, [r3]
  0119c	e283308c	 add         r3, r3, #0x8C
  011a0	e5933000	 ldr         r3, [r3]
  011a4	e3130002	 tst         r3, #2
  011a8	0a000015	 beq         |$LN2@mcbsp_Rese|

; 587  :         {
; 588  :         Sleep(1);

  011ac	e3a00001	 mov         r0, #1
  011b0	eb000000	 bl          Sleep

; 589  :         if (counter++ > MAX_WAIT_FOR_RESET)

  011b4	e59d3000	 ldr         r3, [sp]
  011b8	e3530064	 cmp         r3, #0x64
  011bc	e59d3000	 ldr         r3, [sp]
  011c0	e2833001	 add         r3, r3, #1
  011c4	e58d3000	 str         r3, [sp]
  011c8	9a00000c	 bls         |$LN1@mcbsp_Rese|

; 590  :             {
; 591  :             DEBUGMSG(ZONE_ERROR, (L"ERROR: MCP:%S: Reset Timeout\r\n",
; 592  :                 __FUNCTION__));

  011cc	e59f3184	 ldr         r3, [pc, #0x184]
  011d0	e5933440	 ldr         r3, [r3, #0x440]
  011d4	e3130001	 tst         r3, #1
  011d8	0a000005	 beq         |$LN8@mcbsp_Rese|
  011dc	e59f1170	 ldr         r1, [pc, #0x170]
  011e0	e59f0174	 ldr         r0, [pc, #0x174]
  011e4	eb000000	 bl          NKDbgPrintfW
  011e8	e3a03001	 mov         r3, #1
  011ec	e58d3008	 str         r3, [sp, #8]
  011f0	ea000001	 b           |$LN9@mcbsp_Rese|
  011f4		 |$LN8@mcbsp_Rese|
  011f4	e3a03000	 mov         r3, #0
  011f8	e58d3008	 str         r3, [sp, #8]
  011fc		 |$LN9@mcbsp_Rese|

; 593  :             break;

  011fc	ea000000	 b           |$LN2@mcbsp_Rese|
  01200		 |$LN1@mcbsp_Rese|

; 594  :             }
; 595  :         }

  01200	eaffffe2	 b           |$LN3@mcbsp_Rese|
  01204		 |$LN2@mcbsp_Rese|

; 596  : 
; 597  :     pDevice->shadowRegs.SPCR2 = 0;

  01204	e59d3018	 ldr         r3, [sp, #0x18]
  01208	e2832020	 add         r2, r3, #0x20
  0120c	e3a03000	 mov         r3, #0
  01210	e5823000	 str         r3, [r2]

; 598  :     pDevice->shadowRegs.SPCR1 = 0;

  01214	e59d3018	 ldr         r3, [sp, #0x18]
  01218	e2832024	 add         r2, r3, #0x24
  0121c	e3a03000	 mov         r3, #0
  01220	e5823000	 str         r3, [r2]

; 599  :     pDevice->shadowRegs.RCR2 = 0;

  01224	e59d3018	 ldr         r3, [sp, #0x18]
  01228	e2832028	 add         r2, r3, #0x28
  0122c	e3a03000	 mov         r3, #0
  01230	e5823000	 str         r3, [r2]

; 600  :     pDevice->shadowRegs.RCR1 = 0;

  01234	e59d3018	 ldr         r3, [sp, #0x18]
  01238	e283202c	 add         r2, r3, #0x2C
  0123c	e3a03000	 mov         r3, #0
  01240	e5823000	 str         r3, [r2]

; 601  :     pDevice->shadowRegs.XCR2 = 0;

  01244	e59d3018	 ldr         r3, [sp, #0x18]
  01248	e2832030	 add         r2, r3, #0x30
  0124c	e3a03000	 mov         r3, #0
  01250	e5823000	 str         r3, [r2]

; 602  :     pDevice->shadowRegs.XCR1 = 0;

  01254	e59d3018	 ldr         r3, [sp, #0x18]
  01258	e2832034	 add         r2, r3, #0x34
  0125c	e3a03000	 mov         r3, #0
  01260	e5823000	 str         r3, [r2]

; 603  :     pDevice->shadowRegs.SRGR2 = MCBSP_SRGR2_CLKSM;

  01264	e59d3018	 ldr         r3, [sp, #0x18]
  01268	e2832038	 add         r2, r3, #0x38
  0126c	e3a03a02	 mov         r3, #2, 20
  01270	e5823000	 str         r3, [r2]

; 604  :     pDevice->shadowRegs.SRGR1 = 1;

  01274	e59d3018	 ldr         r3, [sp, #0x18]
  01278	e283203c	 add         r2, r3, #0x3C
  0127c	e3a03001	 mov         r3, #1
  01280	e5823000	 str         r3, [r2]

; 605  :     pDevice->shadowRegs.PCR = 0;

  01284	e59d3018	 ldr         r3, [sp, #0x18]
  01288	e2832040	 add         r2, r3, #0x40
  0128c	e3a03000	 mov         r3, #0
  01290	e5823000	 str         r3, [r2]

; 606  :     pDevice->shadowRegs.THRSH1 = 0;

  01294	e59d3018	 ldr         r3, [sp, #0x18]
  01298	e2832044	 add         r2, r3, #0x44
  0129c	e3a03000	 mov         r3, #0
  012a0	e5823000	 str         r3, [r2]

; 607  :     pDevice->shadowRegs.THRSH2 = 0;

  012a4	e59d3018	 ldr         r3, [sp, #0x18]
  012a8	e2832048	 add         r2, r3, #0x48
  012ac	e3a03000	 mov         r3, #0
  012b0	e5823000	 str         r3, [r2]

; 608  :     pDevice->shadowRegs.SYSCONFIG = 0;

  012b4	e59d3018	 ldr         r3, [sp, #0x18]
  012b8	e283204c	 add         r2, r3, #0x4C
  012bc	e3a03000	 mov         r3, #0
  012c0	e5823000	 str         r3, [r2]

; 609  :     pDevice->shadowRegs.WAKEUPEN = 0;

  012c4	e59d3018	 ldr         r3, [sp, #0x18]
  012c8	e2832050	 add         r2, r3, #0x50
  012cc	e3a03000	 mov         r3, #0
  012d0	e5823000	 str         r3, [r2]

; 610  :     pDevice->shadowRegs.MCR1 = 0;

  012d4	e59d3018	 ldr         r3, [sp, #0x18]
  012d8	e2832054	 add         r2, r3, #0x54
  012dc	e3a03000	 mov         r3, #0
  012e0	e5823000	 str         r3, [r2]

; 611  :     pDevice->shadowRegs.MCR2 = 0;

  012e4	e59d3018	 ldr         r3, [sp, #0x18]
  012e8	e2832058	 add         r2, r3, #0x58
  012ec	e3a03000	 mov         r3, #0
  012f0	e5823000	 str         r3, [r2]

; 612  :     pDevice->shadowRegs.RCERA = 0;

  012f4	e59d3018	 ldr         r3, [sp, #0x18]
  012f8	e283205c	 add         r2, r3, #0x5C
  012fc	e3a03000	 mov         r3, #0
  01300	e5823000	 str         r3, [r2]

; 613  :     pDevice->shadowRegs.XCERA = 0;

  01304	e59d3018	 ldr         r3, [sp, #0x18]
  01308	e2832060	 add         r2, r3, #0x60
  0130c	e3a03000	 mov         r3, #0
  01310	e5823000	 str         r3, [r2]

; 614  : 
; 615  :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S\r\n", __FUNCTION__));

  01314	e59f303c	 ldr         r3, [pc, #0x3C]
  01318	e5933440	 ldr         r3, [r3, #0x440]
  0131c	e3130004	 tst         r3, #4
  01320	0a000005	 beq         |$LN10@mcbsp_Rese|
  01324	e59f1028	 ldr         r1, [pc, #0x28]
  01328	e59f0020	 ldr         r0, [pc, #0x20]
  0132c	eb000000	 bl          NKDbgPrintfW
  01330	e3a03001	 mov         r3, #1
  01334	e58d300c	 str         r3, [sp, #0xC]
  01338	ea000001	 b           |$LN11@mcbsp_Rese|
  0133c		 |$LN10@mcbsp_Rese|
  0133c	e3a03000	 mov         r3, #0
  01340	e58d300c	 str         r3, [sp, #0xC]
  01344		 |$LN11@mcbsp_Rese|

; 616  : }

  01344	e28dd010	 add         sp, sp, #0x10
  01348	e89d6000	 ldmia       sp, {sp, lr}
  0134c	e12fff1e	 bx          lr
  01350		 |$LN15@mcbsp_Rese|
  01350		 |$LN16@mcbsp_Rese|
  01350	00000000	 DCD         |??_C@_1BE@LFFACMJN@?$AAM?$AAC?$AAP?$AA?3?$AA?9?$AA?$CF?$AAS?$AA?$AN?$AA?6?$AA?$AA@|
  01354		 |$LN17@mcbsp_Rese|
  01354	00000000	 DCD         |??_C@_0BL@ENOJBDFN@mcbsp_ResetShadowRegisters?$AA@|
  01358		 |$LN18@mcbsp_Rese|
  01358	00000000	 DCD         |dpCurSettings|
  0135c		 |$LN19@mcbsp_Rese|
  0135c	00000000	 DCD         |??_C@_1DO@HLAMMGHN@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAM?$AAC?$AAP?$AA?3?$AA?$CF?$AAS?$AA?3?$AA?5?$AAR?$AAe?$AAs?$AAe?$AAt?$AA?5?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$AN?$AA?6?$AA?$AA@|
  01360		 |$LN20@mcbsp_Rese|
  01360	00000000	 DCD         |??_C@_1CE@FCDKFBGI@?$AAM?$AAC?$AAP?$AA?3?$AA?$CL?$AA?$CF?$AAS?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  01364		 |$M37245|

			 ENDP  ; |mcbsp_ResetShadowRegisters|

	EXPORT	|??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1KG@IMKIOOHN@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@| [ DATA ] ; `string'
	EXPORT	|??_C@_0CD@NAPEFDNP@mcbsp_ConfigureSampleRateGenerat@| [ DATA ] ; `string'

  00020			 AREA	 |.pdata|, PDATA
|$T37264| DCD	|$LN19@mcbsp_Conf@3|
	DCD	0x4000ef04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@| DCB "%"
	DCB	0x0, "s", 0x0, ":", 0x0, " ", 0x0, "D", 0x0, "E", 0x0, "B"
	DCB	0x0, "U", 0x0, "G", 0x0, "C", 0x0, "H", 0x0, "K", 0x0, " "
	DCB	0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "i", 0x0, "n", 0x0, " ", 0x0, "f", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, " ", 0x0, "%", 0x0, "s", 0x0, " "
	DCB	0x0, "a", 0x0, "t", 0x0, " ", 0x0, "l", 0x0, "i", 0x0, "n"
	DCB	0x0, "e", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@| DCB "U", 0x0
	DCB	"n", 0x0, "k", 0x0, "n", 0x0, "o", 0x0, "w", 0x0, "n", 0x0
	DCB	0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KG@IMKIOOHN@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@| DCB "C"
	DCB	0x0, ":", 0x0, "\\", 0x0, "W", 0x0, "I", 0x0, "N", 0x0, "C"
	DCB	0x0, "E", 0x0, "6", 0x0, "0", 0x0, "0", 0x0, "\\", 0x0, "P"
	DCB	0x0, "L", 0x0, "A", 0x0, "T", 0x0, "F", 0x0, "O", 0x0, "R"
	DCB	0x0, "M", 0x0, "\\", 0x0, "C", 0x0, "O", 0x0, "M", 0x0, "M"
	DCB	0x0, "O", 0x0, "N", 0x0, "\\", 0x0, "S", 0x0, "R", 0x0, "C"
	DCB	0x0, "\\", 0x0, "S", 0x0, "O", 0x0, "C", 0x0, "\\", 0x0, "C"
	DCB	0x0, "O", 0x0, "M", 0x0, "M", 0x0, "O", 0x0, "N", 0x0, "_"
	DCB	0x0, "T", 0x0, "I", 0x0, "_", 0x0, "V", 0x0, "1", 0x0, "\\"
	DCB	0x0, "C", 0x0, "O", 0x0, "M", 0x0, "M", 0x0, "O", 0x0, "N"
	DCB	0x0, "_", 0x0, "T", 0x0, "I", 0x0, "\\", 0x0, "M", 0x0, "C"
	DCB	0x0, "B", 0x0, "S", 0x0, "P", 0x0, "\\", 0x0, ".", 0x0, "\\"
	DCB	0x0, "m", 0x0, "c", 0x0, "b", 0x0, "s", 0x0, "p", 0x0, "c"
	DCB	0x0, "o", 0x0, "n", 0x0, "f", 0x0, "i", 0x0, "g", 0x0, "."
	DCB	0x0, "c", 0x0, "p", 0x0, "p", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CD@NAPEFDNP@mcbsp_ConfigureSampleRateGenerat@| DCB "mcbsp_Configu"
	DCB	"reSampleRateGenerator", 0x0		; `string'
; Function compile flags: /Odtp

  01364			 AREA	 |.text|, CODE, ARM

  01364		 |mcbsp_ConfigureSampleRateGenerator| PROC

; 627  : {

  01364		 |$LN19@mcbsp_Conf@3|
  01364	e1a0c00d	 mov         r12, sp
  01368	e92d0001	 stmdb       sp!, {r0}
  0136c	e92d5030	 stmdb       sp!, {r4, r5, r12, lr}
  01370	e24dd00c	 sub         sp, sp, #0xC
  01374		 |$M37261|

; 628  :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S(0x%08x)\r\n", __FUNCTION__, pDevice));

  01374	e59f338c	 ldr         r3, [pc, #0x38C]
  01378	e5933440	 ldr         r3, [r3, #0x440]
  0137c	e3130004	 tst         r3, #4
  01380	0a000006	 beq         |$LN11@mcbsp_Conf@3|
  01384	e59d201c	 ldr         r2, [sp, #0x1C]
  01388	e59f1374	 ldr         r1, [pc, #0x374]
  0138c	e59f0388	 ldr         r0, [pc, #0x388]
  01390	eb000000	 bl          NKDbgPrintfW
  01394	e3a03001	 mov         r3, #1
  01398	e58d3000	 str         r3, [sp]
  0139c	ea000001	 b           |$LN12@mcbsp_Conf@3|
  013a0		 |$LN11@mcbsp_Conf@3|
  013a0	e3a03000	 mov         r3, #0
  013a4	e58d3000	 str         r3, [sp]
  013a8		 |$LN12@mcbsp_Conf@3|

; 629  : 
; 630  :     // update register: SRGR1
; 631  :     //------------------------
; 632  :     // set FWID
; 633  :     // set CLKGDIV
; 634  :     //
; 635  :     ASSERT(pDevice->pConfigInfo->SRGFrameWidth > 0 &&
; 636  :            pDevice->pConfigInfo->SRGFrameWidth <= 256 &&
; 637  :            pDevice->pConfigInfo->SRGClkDivFactor < 256);

  013a8	e59d301c	 ldr         r3, [sp, #0x1C]
  013ac	e2833068	 add         r3, r3, #0x68
  013b0	e5933000	 ldr         r3, [r3]
  013b4	e2833060	 add         r3, r3, #0x60
  013b8	e5933000	 ldr         r3, [r3]
  013bc	e3530000	 cmp         r3, #0
  013c0	9a000010	 bls         |$LN13@mcbsp_Conf@3|
  013c4	e59d301c	 ldr         r3, [sp, #0x1C]
  013c8	e2833068	 add         r3, r3, #0x68
  013cc	e5933000	 ldr         r3, [r3]
  013d0	e2833060	 add         r3, r3, #0x60
  013d4	e5933000	 ldr         r3, [r3]
  013d8	e3530c01	 cmp         r3, #1, 24
  013dc	8a000009	 bhi         |$LN13@mcbsp_Conf@3|
  013e0	e59d301c	 ldr         r3, [sp, #0x1C]
  013e4	e2833068	 add         r3, r3, #0x68
  013e8	e5933000	 ldr         r3, [r3]
  013ec	e2833064	 add         r3, r3, #0x64
  013f0	e5933000	 ldr         r3, [r3]
  013f4	e3530c01	 cmp         r3, #1, 24
  013f8	2a000002	 bcs         |$LN13@mcbsp_Conf@3|
  013fc	e3a03001	 mov         r3, #1
  01400	e58d3004	 str         r3, [sp, #4]
  01404	ea000008	 b           |$LN14@mcbsp_Conf@3|
  01408		 |$LN13@mcbsp_Conf@3|
  01408	e3a03c02	 mov         r3, #2, 24
  0140c	e383307d	 orr         r3, r3, #0x7D
  01410	e59f2300	 ldr         r2, [pc, #0x300]
  01414	e59f12f8	 ldr         r1, [pc, #0x2F8]
  01418	e59f02f0	 ldr         r0, [pc, #0x2F0]
  0141c	eb000000	 bl          NKDbgPrintfW
  01420	e6000010	 __debugbreak_ce
  01424	e3a03000	 mov         r3, #0
  01428	e58d3004	 str         r3, [sp, #4]
  0142c		 |$LN14@mcbsp_Conf@3|

; 638  :     pDevice->shadowRegs.SRGR1 |=
; 639  :         MCBSP_SRGR1_FWID(pDevice->pConfigInfo->SRGFrameWidth) |
; 640  :         pDevice->pConfigInfo->SRGClkDivFactor;

  0142c	e59d301c	 ldr         r3, [sp, #0x1C]
  01430	e283103c	 add         r1, r3, #0x3C
  01434	e59d301c	 ldr         r3, [sp, #0x1C]
  01438	e2833068	 add         r3, r3, #0x68
  0143c	e5933000	 ldr         r3, [r3]
  01440	e2833060	 add         r3, r3, #0x60
  01444	e5933000	 ldr         r3, [r3]
  01448	e2433001	 sub         r3, r3, #1
  0144c	e1a03403	 mov         r3, r3, lsl #8
  01450	e2032cff	 and         r2, r3, #0xFF, 24
  01454	e59d301c	 ldr         r3, [sp, #0x1C]
  01458	e2833068	 add         r3, r3, #0x68
  0145c	e5933000	 ldr         r3, [r3]
  01460	e2833064	 add         r3, r3, #0x64
  01464	e5933000	 ldr         r3, [r3]
  01468	e1822003	 orr         r2, r2, r3
  0146c	e5913000	 ldr         r3, [r1]
  01470	e1832002	 orr         r2, r3, r2
  01474	e59d301c	 ldr         r3, [sp, #0x1C]
  01478	e283303c	 add         r3, r3, #0x3C
  0147c	e5832000	 str         r2, [r3]

; 641  : 
; 642  :     // update register: SRGR2
; 643  :     //------------------------
; 644  :     // set GSYNC
; 645  :     // set FPER
; 646  :     //
; 647  :     // for auto calculation of the frame period
; 648  :     // assumes transmit and receive word lengths are the same
; 649  :     // assumes transmit and receive words per frame are the same
; 650  :     // assumes transmit and receive phases are the same (either single or
; 651  :     //  dual phase)
; 652  : 
; 653  :     if (pDevice->pConfigInfo->TxPhase == MCBSP_PHASE_DUAL)

  01480	e59d301c	 ldr         r3, [sp, #0x1C]
  01484	e2833068	 add         r3, r3, #0x68
  01488	e5933000	 ldr         r3, [r3]
  0148c	e283304c	 add         r3, r3, #0x4C
  01490	e5933000	 ldr         r3, [r3]
  01494	e3530902	 cmp         r3, #2, 18
  01498	1a00002f	 bne         |$LN8@mcbsp_Conf@3|

; 654  :         {
; 655  :         // in dual phase transmit1 and transmit2 words per frame are the same
; 656  :         pDevice->shadowRegs.SRGR2 |= pDevice->pConfigInfo->SRGClkSyncMode |
; 657  :             ((((pDevice->pConfigInfo->TxFrameLength) *
; 658  :             (f_rgWordLength[pDevice->pConfigInfo->TxWordLength])) +
; 659  :             ((pDevice->pConfigInfo->TxFrameLength) *
; 660  :             (f_rgWordLength[pDevice->pConfigInfo->TxWordLength2]))) -1);

  0149c	e59d301c	 ldr         r3, [sp, #0x1C]
  014a0	e2835038	 add         r5, r3, #0x38
  014a4	e59d301c	 ldr         r3, [sp, #0x1C]
  014a8	e2833068	 add         r3, r3, #0x68
  014ac	e5933000	 ldr         r3, [r3]
  014b0	e2834068	 add         r4, r3, #0x68
  014b4	e59d301c	 ldr         r3, [sp, #0x1C]
  014b8	e2833068	 add         r3, r3, #0x68
  014bc	e5933000	 ldr         r3, [r3]
  014c0	e2830030	 add         r0, r3, #0x30
  014c4	e59d301c	 ldr         r3, [sp, #0x1C]
  014c8	e2833068	 add         r3, r3, #0x68
  014cc	e5933000	 ldr         r3, [r3]
  014d0	e2833034	 add         r3, r3, #0x34
  014d4	e5931000	 ldr         r1, [r3]
  014d8	e3a03004	 mov         r3, #4
  014dc	e0020391	 mul         r2, r1, r3
  014e0	e59f3224	 ldr         r3, [pc, #0x224]
  014e4	e0833002	 add         r3, r3, r2
  014e8	e5902000	 ldr         r2, [r0]
  014ec	e5933000	 ldr         r3, [r3]
  014f0	e00e0392	 mul         lr, r2, r3
  014f4	e59d301c	 ldr         r3, [sp, #0x1C]
  014f8	e2833068	 add         r3, r3, #0x68
  014fc	e5933000	 ldr         r3, [r3]
  01500	e2830030	 add         r0, r3, #0x30
  01504	e59d301c	 ldr         r3, [sp, #0x1C]
  01508	e2833068	 add         r3, r3, #0x68
  0150c	e5933000	 ldr         r3, [r3]
  01510	e2833038	 add         r3, r3, #0x38
  01514	e5931000	 ldr         r1, [r3]
  01518	e3a03004	 mov         r3, #4
  0151c	e0020391	 mul         r2, r1, r3
  01520	e59f31e4	 ldr         r3, [pc, #0x1E4]
  01524	e0833002	 add         r3, r3, r2
  01528	e5902000	 ldr         r2, [r0]
  0152c	e5933000	 ldr         r3, [r3]
  01530	e0030392	 mul         r3, r2, r3
  01534	e08e3003	 add         r3, lr, r3
  01538	e2432001	 sub         r2, r3, #1
  0153c	e5943000	 ldr         r3, [r4]
  01540	e1832002	 orr         r2, r3, r2
  01544	e5953000	 ldr         r3, [r5]
  01548	e1832002	 orr         r2, r3, r2
  0154c	e59d301c	 ldr         r3, [sp, #0x1C]
  01550	e2833038	 add         r3, r3, #0x38
  01554	e5832000	 str         r2, [r3]

; 661  :         }
; 662  :     else

  01558	ea00001d	 b           |$LN7@mcbsp_Conf@3|
  0155c		 |$LN8@mcbsp_Conf@3|

; 663  :         {
; 664  :         pDevice->shadowRegs.SRGR2 |= pDevice->pConfigInfo->SRGClkSyncMode |
; 665  :             (((pDevice->pConfigInfo->TxFrameLength) *
; 666  :             (f_rgWordLength[pDevice->pConfigInfo->TxWordLength])) -1);

  0155c	e59d301c	 ldr         r3, [sp, #0x1C]
  01560	e2834038	 add         r4, r3, #0x38
  01564	e59d301c	 ldr         r3, [sp, #0x1C]
  01568	e2833068	 add         r3, r3, #0x68
  0156c	e5933000	 ldr         r3, [r3]
  01570	e283e068	 add         lr, r3, #0x68
  01574	e59d301c	 ldr         r3, [sp, #0x1C]
  01578	e2833068	 add         r3, r3, #0x68
  0157c	e5933000	 ldr         r3, [r3]
  01580	e2830030	 add         r0, r3, #0x30
  01584	e59d301c	 ldr         r3, [sp, #0x1C]
  01588	e2833068	 add         r3, r3, #0x68
  0158c	e5933000	 ldr         r3, [r3]
  01590	e2833034	 add         r3, r3, #0x34
  01594	e5931000	 ldr         r1, [r3]
  01598	e3a03004	 mov         r3, #4
  0159c	e0020391	 mul         r2, r1, r3
  015a0	e59f3164	 ldr         r3, [pc, #0x164]
  015a4	e0833002	 add         r3, r3, r2
  015a8	e5902000	 ldr         r2, [r0]
  015ac	e5933000	 ldr         r3, [r3]
  015b0	e0030392	 mul         r3, r2, r3
  015b4	e2432001	 sub         r2, r3, #1
  015b8	e59e3000	 ldr         r3, [lr]
  015bc	e1832002	 orr         r2, r3, r2
  015c0	e5943000	 ldr         r3, [r4]
  015c4	e1832002	 orr         r2, r3, r2
  015c8	e59d301c	 ldr         r3, [sp, #0x1C]
  015cc	e2833038	 add         r3, r3, #0x38
  015d0	e5832000	 str         r2, [r3]
  015d4		 |$LN7@mcbsp_Conf@3|

; 667  :         }
; 668  : 
; 669  :     // set CLKSM
; 670  :     //
; 671  :     if (pDevice->pConfigInfo->SRGClkSrc == kMcBSP_SRG_SRC_CPU_CLK ||
; 672  :         pDevice->pConfigInfo->SRGClkSrc == kMcBSP_SRG_SRC_CLKX_PIN)

  015d4	e59d301c	 ldr         r3, [sp, #0x1C]
  015d8	e2833068	 add         r3, r3, #0x68
  015dc	e5933000	 ldr         r3, [r3]
  015e0	e283305c	 add         r3, r3, #0x5C
  015e4	e5933000	 ldr         r3, [r3]
  015e8	e3530002	 cmp         r3, #2
  015ec	0a000006	 beq         |$LN5@mcbsp_Conf@3|
  015f0	e59d301c	 ldr         r3, [sp, #0x1C]
  015f4	e2833068	 add         r3, r3, #0x68
  015f8	e5933000	 ldr         r3, [r3]
  015fc	e283305c	 add         r3, r3, #0x5C
  01600	e5933000	 ldr         r3, [r3]
  01604	e3530004	 cmp         r3, #4
  01608	1a000007	 bne         |$LN6@mcbsp_Conf@3|
  0160c		 |$LN5@mcbsp_Conf@3|

; 673  :         {
; 674  :         // Sample-rate generator source is either CLKXI(SCLKME=1) or
; 675  :         // FCLK(SCLKME=0)
; 676  :         //
; 677  :         pDevice->shadowRegs.SRGR2 |= MCBSP_SRGR2_CLKSM;

  0160c	e59d301c	 ldr         r3, [sp, #0x1C]
  01610	e2833038	 add         r3, r3, #0x38
  01614	e5933000	 ldr         r3, [r3]
  01618	e3832a02	 orr         r2, r3, #2, 20
  0161c	e59d301c	 ldr         r3, [sp, #0x1C]
  01620	e2833038	 add         r3, r3, #0x38
  01624	e5832000	 str         r2, [r3]

; 678  :         }
; 679  :     else

  01628	ea000025	 b           |$LN4@mcbsp_Conf@3|
  0162c		 |$LN6@mcbsp_Conf@3|

; 680  :         {
; 681  :         // Sample-rate generator source is either CLKRI(SCLKME=1) or
; 682  :         // CLKS(SCLKME=0)
; 683  :         //
; 684  :         pDevice->shadowRegs.SRGR2 &= ~MCBSP_SRGR2_CLKSM;

  0162c	e59d301c	 ldr         r3, [sp, #0x1C]
  01630	e2833038	 add         r3, r3, #0x38
  01634	e5932000	 ldr         r2, [r3]
  01638	e3e03a02	 mvn         r3, #2, 20
  0163c	e0022003	 and         r2, r2, r3
  01640	e59d301c	 ldr         r3, [sp, #0x1C]
  01644	e2833038	 add         r3, r3, #0x38
  01648	e5832000	 str         r2, [r3]

; 685  :         if (pDevice->pConfigInfo->SRGClkSrc == kMcBSP_SRG_SRC_CLKS_PIN_FALL)

  0164c	e59d301c	 ldr         r3, [sp, #0x1C]
  01650	e2833068	 add         r3, r3, #0x68
  01654	e5933000	 ldr         r3, [r3]
  01658	e283305c	 add         r3, r3, #0x5C
  0165c	e5933000	 ldr         r3, [r3]
  01660	e3530001	 cmp         r3, #1
  01664	1a000007	 bne         |$LN3@mcbsp_Conf@3|

; 686  :             {
; 687  :             // Falling CLKS
; 688  :             //
; 689  :             pDevice->shadowRegs.SRGR2 |= MCBSP_SRGR2_CLKSP;

  01668	e59d301c	 ldr         r3, [sp, #0x1C]
  0166c	e2833038	 add         r3, r3, #0x38
  01670	e5933000	 ldr         r3, [r3]
  01674	e3832901	 orr         r2, r3, #1, 18
  01678	e59d301c	 ldr         r3, [sp, #0x1C]
  0167c	e2833038	 add         r3, r3, #0x38
  01680	e5832000	 str         r2, [r3]

; 690  :             }
; 691  :         else if (pDevice->pConfigInfo->SRGClkSrc ==

  01684	ea00000e	 b           |$LN2@mcbsp_Conf@3|
  01688		 |$LN3@mcbsp_Conf@3|

; 692  :             kMcBSP_SRG_SRC_CLKS_PIN_RISE)

  01688	e59d301c	 ldr         r3, [sp, #0x1C]
  0168c	e2833068	 add         r3, r3, #0x68
  01690	e5933000	 ldr         r3, [r3]
  01694	e283305c	 add         r3, r3, #0x5C
  01698	e5933000	 ldr         r3, [r3]
  0169c	e3530000	 cmp         r3, #0
  016a0	1a000007	 bne         |$LN1@mcbsp_Conf@3|

; 693  :             {
; 694  :             // Rising CLKS
; 695  :             //
; 696  :             pDevice->shadowRegs.SRGR2 &= ~MCBSP_SRGR2_CLKSP;

  016a4	e59d301c	 ldr         r3, [sp, #0x1C]
  016a8	e2833038	 add         r3, r3, #0x38
  016ac	e5932000	 ldr         r2, [r3]
  016b0	e3e03901	 mvn         r3, #1, 18
  016b4	e0022003	 and         r2, r2, r3
  016b8	e59d301c	 ldr         r3, [sp, #0x1C]
  016bc	e2833038	 add         r3, r3, #0x38
  016c0	e5832000	 str         r2, [r3]
  016c4		 |$LN1@mcbsp_Conf@3|
  016c4		 |$LN2@mcbsp_Conf@3|
  016c4		 |$LN4@mcbsp_Conf@3|

; 697  :             }
; 698  :         }
; 699  : 
; 700  :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S\r\n", __FUNCTION__));

  016c4	e59f303c	 ldr         r3, [pc, #0x3C]
  016c8	e5933440	 ldr         r3, [r3, #0x440]
  016cc	e3130004	 tst         r3, #4
  016d0	0a000005	 beq         |$LN15@mcbsp_Conf@3|
  016d4	e59f1028	 ldr         r1, [pc, #0x28]
  016d8	e59f0020	 ldr         r0, [pc, #0x20]
  016dc	eb000000	 bl          NKDbgPrintfW
  016e0	e3a03001	 mov         r3, #1
  016e4	e58d3008	 str         r3, [sp, #8]
  016e8	ea000001	 b           |$LN16@mcbsp_Conf@3|
  016ec		 |$LN15@mcbsp_Conf@3|
  016ec	e3a03000	 mov         r3, #0
  016f0	e58d3008	 str         r3, [sp, #8]
  016f4		 |$LN16@mcbsp_Conf@3|

; 701  : }

  016f4	e28dd00c	 add         sp, sp, #0xC
  016f8	e89d6030	 ldmia       sp, {r4, r5, sp, lr}
  016fc	e12fff1e	 bx          lr
  01700		 |$LN20@mcbsp_Conf@3|
  01700		 |$LN21@mcbsp_Conf@3|
  01700	00000000	 DCD         |??_C@_1BE@LFFACMJN@?$AAM?$AAC?$AAP?$AA?3?$AA?9?$AA?$CF?$AAS?$AA?$AN?$AA?6?$AA?$AA@|
  01704		 |$LN22@mcbsp_Conf@3|
  01704	00000000	 DCD         |??_C@_0CD@NAPEFDNP@mcbsp_ConfigureSampleRateGenerat@|
  01708		 |$LN23@mcbsp_Conf@3|
  01708	00000000	 DCD         |dpCurSettings|
  0170c		 |$LN24@mcbsp_Conf@3|
  0170c	00000000	 DCD         |f_rgWordLength|
  01710		 |$LN25@mcbsp_Conf@3|
  01710	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  01714		 |$LN26@mcbsp_Conf@3|
  01714	00000000	 DCD         |??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@|
  01718		 |$LN27@mcbsp_Conf@3|
  01718	00000000	 DCD         |??_C@_1KG@IMKIOOHN@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  0171c		 |$LN28@mcbsp_Conf@3|
  0171c	00000000	 DCD         |??_C@_1CE@FCDKFBGI@?$AAM?$AAC?$AAP?$AA?3?$AA?$CL?$AA?$CF?$AAS?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  01720		 |$M37262|

			 ENDP  ; |mcbsp_ConfigureSampleRateGenerator|

	EXPORT	|??_C@_0BL@MJLFNOD@mcbsp_ConfigureTransmitter?$AA@| [ DATA ] ; `string'

  00028			 AREA	 |.pdata|, PDATA
|$T37284| DCD	|$LN18@mcbsp_Conf@4|
	DCD	0x4000ea04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BL@MJLFNOD@mcbsp_ConfigureTransmitter?$AA@| DCB "mcbsp_ConfigureT"
	DCB	"ransmitter", 0x0			; `string'
; Function compile flags: /Odtp

  01720			 AREA	 |.text|, CODE, ARM

  01720		 |mcbsp_ConfigureTransmitter| PROC

; 712  : {

  01720		 |$LN18@mcbsp_Conf@4|
  01720	e1a0c00d	 mov         r12, sp
  01724	e92d0001	 stmdb       sp!, {r0}
  01728	e92d5000	 stmdb       sp!, {r12, lr}
  0172c	e24dd010	 sub         sp, sp, #0x10
  01730		 |$M37281|

; 713  :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S(0x%08x)\r\n", __FUNCTION__, pDevice));

  01730	e59f337c	 ldr         r3, [pc, #0x37C]
  01734	e5933440	 ldr         r3, [r3, #0x440]
  01738	e3130004	 tst         r3, #4
  0173c	0a000006	 beq         |$LN10@mcbsp_Conf@4|
  01740	e59d2018	 ldr         r2, [sp, #0x18]
  01744	e59f1364	 ldr         r1, [pc, #0x364]
  01748	e59f0374	 ldr         r0, [pc, #0x374]
  0174c	eb000000	 bl          NKDbgPrintfW
  01750	e3a03001	 mov         r3, #1
  01754	e58d3000	 str         r3, [sp]
  01758	ea000001	 b           |$LN11@mcbsp_Conf@4|
  0175c		 |$LN10@mcbsp_Conf@4|
  0175c	e3a03000	 mov         r3, #0
  01760	e58d3000	 str         r3, [sp]
  01764		 |$LN11@mcbsp_Conf@4|

; 714  : 
; 715  :     // update register: SPCR1
; 716  :     //------------------------
; 717  :     // set DLB
; 718  :     // set DXENA
; 719  :     //
; 720  :     pDevice->shadowRegs.SPCR1 |= pDevice->pConfigInfo->AnalogLoopBackMode |
; 721  :         MCBSP_SPCR1_DXENA;

  01764	e59d3018	 ldr         r3, [sp, #0x18]
  01768	e2831024	 add         r1, r3, #0x24
  0176c	e59d3018	 ldr         r3, [sp, #0x18]
  01770	e2833068	 add         r3, r3, #0x68
  01774	e5933000	 ldr         r3, [r3]
  01778	e5933000	 ldr         r3, [r3]
  0177c	e3832080	 orr         r2, r3, #0x80
  01780	e5913000	 ldr         r3, [r1]
  01784	e1832002	 orr         r2, r3, r2
  01788	e59d3018	 ldr         r3, [sp, #0x18]
  0178c	e2833024	 add         r3, r3, #0x24
  01790	e5832000	 str         r2, [r3]

; 722  : 
; 723  :     // update register: XCR1
; 724  :     //------------------------
; 725  :     // set XFRLEN1
; 726  :     // set XWDLEN1
; 727  :     //
; 728  :     ASSERT(pDevice->pConfigInfo->TxFrameLength <= 128 &&
; 729  :            pDevice->pConfigInfo->TxFrameLength > 0);

  01794	e59d3018	 ldr         r3, [sp, #0x18]
  01798	e2833068	 add         r3, r3, #0x68
  0179c	e5933000	 ldr         r3, [r3]
  017a0	e2833030	 add         r3, r3, #0x30
  017a4	e5933000	 ldr         r3, [r3]
  017a8	e3530080	 cmp         r3, #0x80
  017ac	8a000009	 bhi         |$LN12@mcbsp_Conf@4|
  017b0	e59d3018	 ldr         r3, [sp, #0x18]
  017b4	e2833068	 add         r3, r3, #0x68
  017b8	e5933000	 ldr         r3, [r3]
  017bc	e2833030	 add         r3, r3, #0x30
  017c0	e5933000	 ldr         r3, [r3]
  017c4	e3530000	 cmp         r3, #0
  017c8	9a000002	 bls         |$LN12@mcbsp_Conf@4|
  017cc	e3a03001	 mov         r3, #1
  017d0	e58d3004	 str         r3, [sp, #4]
  017d4	ea000008	 b           |$LN13@mcbsp_Conf@4|
  017d8		 |$LN12@mcbsp_Conf@4|
  017d8	e3a03c02	 mov         r3, #2, 24
  017dc	e38330d9	 orr         r3, r3, #0xD9
  017e0	e59f22d8	 ldr         r2, [pc, #0x2D8]
  017e4	e59f12d0	 ldr         r1, [pc, #0x2D0]
  017e8	e59f02c8	 ldr         r0, [pc, #0x2C8]
  017ec	eb000000	 bl          NKDbgPrintfW
  017f0	e6000010	 __debugbreak_ce
  017f4	e3a03000	 mov         r3, #0
  017f8	e58d3004	 str         r3, [sp, #4]
  017fc		 |$LN13@mcbsp_Conf@4|

; 730  :     pDevice->shadowRegs.XCR1 |=
; 731  :         MCBSP_FRAME_LENGTH(pDevice->pConfigInfo->TxFrameLength)|
; 732  :         MCBSP_WORD_LENGTH(pDevice->pConfigInfo->TxWordLength);

  017fc	e59d3018	 ldr         r3, [sp, #0x18]
  01800	e2831034	 add         r1, r3, #0x34
  01804	e59d3018	 ldr         r3, [sp, #0x18]
  01808	e2833068	 add         r3, r3, #0x68
  0180c	e5933000	 ldr         r3, [r3]
  01810	e2833030	 add         r3, r3, #0x30
  01814	e5933000	 ldr         r3, [r3]
  01818	e2433001	 sub         r3, r3, #1
  0181c	e1a03403	 mov         r3, r3, lsl #8
  01820	e2032c7f	 and         r2, r3, #0x7F, 24
  01824	e59d3018	 ldr         r3, [sp, #0x18]
  01828	e2833068	 add         r3, r3, #0x68
  0182c	e5933000	 ldr         r3, [r3]
  01830	e2833034	 add         r3, r3, #0x34
  01834	e5933000	 ldr         r3, [r3]
  01838	e1a03283	 mov         r3, r3, lsl #5
  0183c	e20330e0	 and         r3, r3, #0xE0
  01840	e1822003	 orr         r2, r2, r3
  01844	e5913000	 ldr         r3, [r1]
  01848	e1832002	 orr         r2, r3, r2
  0184c	e59d3018	 ldr         r3, [sp, #0x18]
  01850	e2833034	 add         r3, r3, #0x34
  01854	e5832000	 str         r2, [r3]

; 733  : 
; 734  :     // update register: XCR2
; 735  :     //------------------------
; 736  :     // NOTE:
; 737  :     //      We are always ignoring Tx frame sync errors
; 738  :     //
; 739  :     // set XPHASE
; 740  :     // set XFRLEN2
; 741  :     // set XWDLEN2
; 742  :     // set XREVERSE
; 743  :     // set XDATDLY
; 744  :     // set XREVERSE
; 745  :     //
; 746  :     // in dual phase transmit1 and transmit2 words per frame are the same
; 747  : 
; 748  :     pDevice->shadowRegs.XCR2 |= pDevice->pConfigInfo->TxPhase |
; 749  :         MCBSP_FRAME_LENGTH(pDevice->pConfigInfo->TxFrameLength)|
; 750  :         MCBSP_WORD_LENGTH(pDevice->pConfigInfo->TxWordLength2) |
; 751  :         pDevice->pConfigInfo->TxReverse |
; 752  :         pDevice->pConfigInfo->TxDataDelay;

  01858	e59d3018	 ldr         r3, [sp, #0x18]
  0185c	e2830030	 add         r0, r3, #0x30
  01860	e59d3018	 ldr         r3, [sp, #0x18]
  01864	e2833068	 add         r3, r3, #0x68
  01868	e5933000	 ldr         r3, [r3]
  0186c	e283104c	 add         r1, r3, #0x4C
  01870	e59d3018	 ldr         r3, [sp, #0x18]
  01874	e2833068	 add         r3, r3, #0x68
  01878	e5933000	 ldr         r3, [r3]
  0187c	e2833030	 add         r3, r3, #0x30
  01880	e5933000	 ldr         r3, [r3]
  01884	e2433001	 sub         r3, r3, #1
  01888	e1a03403	 mov         r3, r3, lsl #8
  0188c	e2032c7f	 and         r2, r3, #0x7F, 24
  01890	e5913000	 ldr         r3, [r1]
  01894	e1832002	 orr         r2, r3, r2
  01898	e59d3018	 ldr         r3, [sp, #0x18]
  0189c	e2833068	 add         r3, r3, #0x68
  018a0	e5933000	 ldr         r3, [r3]
  018a4	e2833038	 add         r3, r3, #0x38
  018a8	e5933000	 ldr         r3, [r3]
  018ac	e1a03283	 mov         r3, r3, lsl #5
  018b0	e20330e0	 and         r3, r3, #0xE0
  018b4	e1822003	 orr         r2, r2, r3
  018b8	e59d3018	 ldr         r3, [sp, #0x18]
  018bc	e2833068	 add         r3, r3, #0x68
  018c0	e5933000	 ldr         r3, [r3]
  018c4	e283303c	 add         r3, r3, #0x3C
  018c8	e5933000	 ldr         r3, [r3]
  018cc	e1822003	 orr         r2, r2, r3
  018d0	e59d3018	 ldr         r3, [sp, #0x18]
  018d4	e2833068	 add         r3, r3, #0x68
  018d8	e5933000	 ldr         r3, [r3]
  018dc	e2833040	 add         r3, r3, #0x40
  018e0	e5933000	 ldr         r3, [r3]
  018e4	e1822003	 orr         r2, r2, r3
  018e8	e5903000	 ldr         r3, [r0]
  018ec	e1832002	 orr         r2, r3, r2
  018f0	e59d3018	 ldr         r3, [sp, #0x18]
  018f4	e2833030	 add         r3, r3, #0x30
  018f8	e5832000	 str         r2, [r3]

; 753  : 
; 754  :     // update register: PCR
; 755  :     //------------------------
; 756  :     // set CLKXM
; 757  :     // set FSXP
; 758  :     // set CLKXP
; 759  :     //
; 760  :     pDevice->shadowRegs.PCR |= pDevice->pConfigInfo->TxClockSource |
; 761  :         pDevice->pConfigInfo->TxFrameSyncPolarity |
; 762  :         pDevice->pConfigInfo->TxClkPolarity;

  018fc	e59d3018	 ldr         r3, [sp, #0x18]
  01900	e2831040	 add         r1, r3, #0x40
  01904	e59d3018	 ldr         r3, [sp, #0x18]
  01908	e2833068	 add         r3, r3, #0x68
  0190c	e5933000	 ldr         r3, [r3]
  01910	e2832044	 add         r2, r3, #0x44
  01914	e59d3018	 ldr         r3, [sp, #0x18]
  01918	e2833068	 add         r3, r3, #0x68
  0191c	e5933000	 ldr         r3, [r3]
  01920	e2833058	 add         r3, r3, #0x58
  01924	e5922000	 ldr         r2, [r2]
  01928	e5933000	 ldr         r3, [r3]
  0192c	e1822003	 orr         r2, r2, r3
  01930	e59d3018	 ldr         r3, [sp, #0x18]
  01934	e2833068	 add         r3, r3, #0x68
  01938	e5933000	 ldr         r3, [r3]
  0193c	e2833054	 add         r3, r3, #0x54
  01940	e5933000	 ldr         r3, [r3]
  01944	e1822003	 orr         r2, r2, r3
  01948	e5913000	 ldr         r3, [r1]
  0194c	e1832002	 orr         r2, r3, r2
  01950	e59d3018	 ldr         r3, [sp, #0x18]
  01954	e2833040	 add         r3, r3, #0x40
  01958	e5832000	 str         r2, [r3]

; 763  : 
; 764  : 
; 765  :     // set SCLKME
; 766  :     //
; 767  :     if (pDevice->pConfigInfo->SRGClkSrc == kMcBSP_SRG_SRC_CLKX_PIN ||
; 768  :         pDevice->pConfigInfo->SRGClkSrc == kMcBSP_SRG_SRC_CLKR_PIN)

  0195c	e59d3018	 ldr         r3, [sp, #0x18]
  01960	e2833068	 add         r3, r3, #0x68
  01964	e5933000	 ldr         r3, [r3]
  01968	e283305c	 add         r3, r3, #0x5C
  0196c	e5933000	 ldr         r3, [r3]
  01970	e3530004	 cmp         r3, #4
  01974	0a000006	 beq         |$LN6@mcbsp_Conf@4|
  01978	e59d3018	 ldr         r3, [sp, #0x18]
  0197c	e2833068	 add         r3, r3, #0x68
  01980	e5933000	 ldr         r3, [r3]
  01984	e283305c	 add         r3, r3, #0x5C
  01988	e5933000	 ldr         r3, [r3]
  0198c	e3530003	 cmp         r3, #3
  01990	1a000007	 bne         |$LN7@mcbsp_Conf@4|
  01994		 |$LN6@mcbsp_Conf@4|

; 769  :         {
; 770  :         // Sample-rate generator source is either CLKXI(CLKSM=1) or
; 771  :         // CLKRI(CLKSM=0)
; 772  :         //
; 773  :         pDevice->shadowRegs.PCR |= MCBSP_PCR_SCLKME;

  01994	e59d3018	 ldr         r3, [sp, #0x18]
  01998	e2833040	 add         r3, r3, #0x40
  0199c	e5933000	 ldr         r3, [r3]
  019a0	e3832080	 orr         r2, r3, #0x80
  019a4	e59d3018	 ldr         r3, [sp, #0x18]
  019a8	e2833040	 add         r3, r3, #0x40
  019ac	e5832000	 str         r2, [r3]

; 774  :         }
; 775  :     else

  019b0	ea000007	 b           |$LN5@mcbsp_Conf@4|
  019b4		 |$LN7@mcbsp_Conf@4|

; 776  :         {
; 777  :         pDevice->shadowRegs.PCR &= ~MCBSP_PCR_SCLKME;

  019b4	e59d3018	 ldr         r3, [sp, #0x18]
  019b8	e2833040	 add         r3, r3, #0x40
  019bc	e5932000	 ldr         r2, [r3]
  019c0	e3e03080	 mvn         r3, #0x80
  019c4	e0022003	 and         r2, r2, r3
  019c8	e59d3018	 ldr         r3, [sp, #0x18]
  019cc	e2833040	 add         r3, r3, #0x40
  019d0	e5832000	 str         r2, [r3]
  019d4		 |$LN5@mcbsp_Conf@4|

; 778  :         }
; 779  : 
; 780  :     // update register: PCR
; 781  :     //------------------------
; 782  :     // set FSXM
; 783  :     //
; 784  :     // update register: SRGR2
; 785  :     //------------------------
; 786  :     // set FSGM
; 787  :     //
; 788  :     switch (pDevice->pConfigInfo->TxFrameSyncSource)

  019d4	e59d3018	 ldr         r3, [sp, #0x18]
  019d8	e2833068	 add         r3, r3, #0x68
  019dc	e5933000	 ldr         r3, [r3]
  019e0	e2833048	 add         r3, r3, #0x48
  019e4	e5933000	 ldr         r3, [r3]
  019e8	e58d3008	 str         r3, [sp, #8]
  019ec	e59d3008	 ldr         r3, [sp, #8]
  019f0	e3530002	 cmp         r3, #2
  019f4	0a00000a	 beq         |$LN1@mcbsp_Conf@4|
  019f8	e59d3008	 ldr         r3, [sp, #8]
  019fc	e3530003	 cmp         r3, #3
  01a00	0a000000	 beq         |$LN2@mcbsp_Conf@4|
  01a04	ea00000d	 b           |$LN3@mcbsp_Conf@4|
  01a08		 |$LN2@mcbsp_Conf@4|

; 789  :         {
; 790  :         case kMcBSP_Tx_FS_SRC_SRG:
; 791  :             pDevice->shadowRegs.SRGR2 |= MCBSP_SRGR2_FSGM;

  01a08	e59d3018	 ldr         r3, [sp, #0x18]
  01a0c	e2833038	 add         r3, r3, #0x38
  01a10	e5933000	 ldr         r3, [r3]
  01a14	e3832a01	 orr         r2, r3, #1, 20
  01a18	e59d3018	 ldr         r3, [sp, #0x18]
  01a1c	e2833038	 add         r3, r3, #0x38
  01a20	e5832000	 str         r2, [r3]
  01a24		 |$LN1@mcbsp_Conf@4|

; 792  : 
; 793  :             // fall-through
; 794  : 
; 795  :         case kMcBSP_Tx_FS_SRC_DSR_XSR_COPY:
; 796  :             pDevice->shadowRegs.PCR |= MCBSP_PCR_FSXM;

  01a24	e59d3018	 ldr         r3, [sp, #0x18]
  01a28	e2833040	 add         r3, r3, #0x40
  01a2c	e5933000	 ldr         r3, [r3]
  01a30	e3832b02	 orr         r2, r3, #2, 22
  01a34	e59d3018	 ldr         r3, [sp, #0x18]
  01a38	e2833040	 add         r3, r3, #0x40
  01a3c	e5832000	 str         r2, [r3]
  01a40		 |$LN3@mcbsp_Conf@4|

; 797  :         }
; 798  : 
; 799  : 
; 800  :     // update register: SPCR2
; 801  :     //------------------------
; 802  :     // NOTE:
; 803  :     //      Only set XINTM when in DMA mode
; 804  :     //
; 805  :     // set XINTM
; 806  :     //
; 807  :     pDevice->shadowRegs.SPCR2 |= pDevice->pConfigInfo->TxSyncError;

  01a40	e59d3018	 ldr         r3, [sp, #0x18]
  01a44	e2832020	 add         r2, r3, #0x20
  01a48	e59d3018	 ldr         r3, [sp, #0x18]
  01a4c	e2833068	 add         r3, r3, #0x68
  01a50	e5933000	 ldr         r3, [r3]
  01a54	e2833050	 add         r3, r3, #0x50
  01a58	e5922000	 ldr         r2, [r2]
  01a5c	e5933000	 ldr         r3, [r3]
  01a60	e1822003	 orr         r2, r2, r3
  01a64	e59d3018	 ldr         r3, [sp, #0x18]
  01a68	e2833020	 add         r3, r3, #0x20
  01a6c	e5832000	 str         r2, [r3]

; 808  : 
; 809  :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S\r\n", __FUNCTION__));

  01a70	e59f303c	 ldr         r3, [pc, #0x3C]
  01a74	e5933440	 ldr         r3, [r3, #0x440]
  01a78	e3130004	 tst         r3, #4
  01a7c	0a000005	 beq         |$LN14@mcbsp_Conf@4|
  01a80	e59f1028	 ldr         r1, [pc, #0x28]
  01a84	e59f0020	 ldr         r0, [pc, #0x20]
  01a88	eb000000	 bl          NKDbgPrintfW
  01a8c	e3a03001	 mov         r3, #1
  01a90	e58d300c	 str         r3, [sp, #0xC]
  01a94	ea000001	 b           |$LN15@mcbsp_Conf@4|
  01a98		 |$LN14@mcbsp_Conf@4|
  01a98	e3a03000	 mov         r3, #0
  01a9c	e58d300c	 str         r3, [sp, #0xC]
  01aa0		 |$LN15@mcbsp_Conf@4|

; 810  : }

  01aa0	e28dd010	 add         sp, sp, #0x10
  01aa4	e89d6000	 ldmia       sp, {sp, lr}
  01aa8	e12fff1e	 bx          lr
  01aac		 |$LN19@mcbsp_Conf@4|
  01aac		 |$LN20@mcbsp_Conf@4|
  01aac	00000000	 DCD         |??_C@_1BE@LFFACMJN@?$AAM?$AAC?$AAP?$AA?3?$AA?9?$AA?$CF?$AAS?$AA?$AN?$AA?6?$AA?$AA@|
  01ab0		 |$LN21@mcbsp_Conf@4|
  01ab0	00000000	 DCD         |??_C@_0BL@MJLFNOD@mcbsp_ConfigureTransmitter?$AA@|
  01ab4		 |$LN22@mcbsp_Conf@4|
  01ab4	00000000	 DCD         |dpCurSettings|
  01ab8		 |$LN23@mcbsp_Conf@4|
  01ab8	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  01abc		 |$LN24@mcbsp_Conf@4|
  01abc	00000000	 DCD         |??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@|
  01ac0		 |$LN25@mcbsp_Conf@4|
  01ac0	00000000	 DCD         |??_C@_1KG@IMKIOOHN@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  01ac4		 |$LN26@mcbsp_Conf@4|
  01ac4	00000000	 DCD         |??_C@_1CE@FCDKFBGI@?$AAM?$AAC?$AAP?$AA?3?$AA?$CL?$AA?$CF?$AAS?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  01ac8		 |$M37282|

			 ENDP  ; |mcbsp_ConfigureTransmitter|

	EXPORT	|??_C@_0BI@GNDHOKCB@mcbsp_ConfigureReceiver?$AA@| [ DATA ] ; `string'

  00030			 AREA	 |.pdata|, PDATA
|$T37303| DCD	|$LN11@mcbsp_Conf@5|
	DCD	0x4000b704

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BI@GNDHOKCB@mcbsp_ConfigureReceiver?$AA@| DCB "mcbsp_ConfigureRec"
	DCB	"eiver", 0x0				; `string'
; Function compile flags: /Odtp

  01ac8			 AREA	 |.text|, CODE, ARM

  01ac8		 |mcbsp_ConfigureReceiver| PROC

; 822  : {

  01ac8		 |$LN11@mcbsp_Conf@5|
  01ac8	e1a0c00d	 mov         r12, sp
  01acc	e92d0001	 stmdb       sp!, {r0}
  01ad0	e92d5000	 stmdb       sp!, {r12, lr}
  01ad4	e24dd00c	 sub         sp, sp, #0xC
  01ad8		 |$M37300|

; 823  :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S(0x%08x)\r\n", __FUNCTION__, pDevice));

  01ad8	e59f32b0	 ldr         r3, [pc, #0x2B0]
  01adc	e5933440	 ldr         r3, [r3, #0x440]
  01ae0	e3130004	 tst         r3, #4
  01ae4	0a000006	 beq         |$LN3@mcbsp_Conf@5|
  01ae8	e59d2014	 ldr         r2, [sp, #0x14]
  01aec	e59f1298	 ldr         r1, [pc, #0x298]
  01af0	e59f02a8	 ldr         r0, [pc, #0x2A8]
  01af4	eb000000	 bl          NKDbgPrintfW
  01af8	e3a03001	 mov         r3, #1
  01afc	e58d3000	 str         r3, [sp]
  01b00	ea000001	 b           |$LN4@mcbsp_Conf@5|
  01b04		 |$LN3@mcbsp_Conf@5|
  01b04	e3a03000	 mov         r3, #0
  01b08	e58d3000	 str         r3, [sp]
  01b0c		 |$LN4@mcbsp_Conf@5|

; 824  : 
; 825  :     // update register: SPCR1
; 826  :     //------------------------
; 827  :     // set RJUST
; 828  :     //
; 829  :     pDevice->shadowRegs.SPCR1 |= pDevice->pConfigInfo->JustificationMode;

  01b0c	e59d3014	 ldr         r3, [sp, #0x14]
  01b10	e2832024	 add         r2, r3, #0x24
  01b14	e59d3014	 ldr         r3, [sp, #0x14]
  01b18	e2833068	 add         r3, r3, #0x68
  01b1c	e5933000	 ldr         r3, [r3]
  01b20	e283306c	 add         r3, r3, #0x6C
  01b24	e5922000	 ldr         r2, [r2]
  01b28	e5933000	 ldr         r3, [r3]
  01b2c	e1822003	 orr         r2, r2, r3
  01b30	e59d3014	 ldr         r3, [sp, #0x14]
  01b34	e2833024	 add         r3, r3, #0x24
  01b38	e5832000	 str         r2, [r3]

; 830  : 
; 831  :     // update register: RCR1
; 832  :     //------------------------
; 833  :     // set RFRLEN1
; 834  :     // set RWDLEN1
; 835  :     //
; 836  :     ASSERT(pDevice->pConfigInfo->RxFrameLength <= 128 &&
; 837  :            pDevice->pConfigInfo->RxFrameLength > 0);

  01b3c	e59d3014	 ldr         r3, [sp, #0x14]
  01b40	e2833068	 add         r3, r3, #0x68
  01b44	e5933000	 ldr         r3, [r3]
  01b48	e2833004	 add         r3, r3, #4
  01b4c	e5933000	 ldr         r3, [r3]
  01b50	e3530080	 cmp         r3, #0x80
  01b54	8a000009	 bhi         |$LN5@mcbsp_Conf@5|
  01b58	e59d3014	 ldr         r3, [sp, #0x14]
  01b5c	e2833068	 add         r3, r3, #0x68
  01b60	e5933000	 ldr         r3, [r3]
  01b64	e2833004	 add         r3, r3, #4
  01b68	e5933000	 ldr         r3, [r3]
  01b6c	e3530000	 cmp         r3, #0
  01b70	9a000002	 bls         |$LN5@mcbsp_Conf@5|
  01b74	e3a03001	 mov         r3, #1
  01b78	e58d3004	 str         r3, [sp, #4]
  01b7c	ea000008	 b           |$LN6@mcbsp_Conf@5|
  01b80		 |$LN5@mcbsp_Conf@5|
  01b80	e3a03c03	 mov         r3, #3, 24
  01b84	e3833045	 orr         r3, r3, #0x45
  01b88	e59f220c	 ldr         r2, [pc, #0x20C]
  01b8c	e59f1204	 ldr         r1, [pc, #0x204]
  01b90	e59f01fc	 ldr         r0, [pc, #0x1FC]
  01b94	eb000000	 bl          NKDbgPrintfW
  01b98	e6000010	 __debugbreak_ce
  01b9c	e3a03000	 mov         r3, #0
  01ba0	e58d3004	 str         r3, [sp, #4]
  01ba4		 |$LN6@mcbsp_Conf@5|

; 838  : 
; 839  :     pDevice->shadowRegs.RCR1 |=
; 840  :         MCBSP_FRAME_LENGTH(pDevice->pConfigInfo->RxFrameLength)|
; 841  :         MCBSP_WORD_LENGTH(pDevice->pConfigInfo->RxWordLength);

  01ba4	e59d3014	 ldr         r3, [sp, #0x14]
  01ba8	e283102c	 add         r1, r3, #0x2C
  01bac	e59d3014	 ldr         r3, [sp, #0x14]
  01bb0	e2833068	 add         r3, r3, #0x68
  01bb4	e5933000	 ldr         r3, [r3]
  01bb8	e2833004	 add         r3, r3, #4
  01bbc	e5933000	 ldr         r3, [r3]
  01bc0	e2433001	 sub         r3, r3, #1
  01bc4	e1a03403	 mov         r3, r3, lsl #8
  01bc8	e2032c7f	 and         r2, r3, #0x7F, 24
  01bcc	e59d3014	 ldr         r3, [sp, #0x14]
  01bd0	e2833068	 add         r3, r3, #0x68
  01bd4	e5933000	 ldr         r3, [r3]
  01bd8	e2833008	 add         r3, r3, #8
  01bdc	e5933000	 ldr         r3, [r3]
  01be0	e1a03283	 mov         r3, r3, lsl #5
  01be4	e20330e0	 and         r3, r3, #0xE0
  01be8	e1822003	 orr         r2, r2, r3
  01bec	e5913000	 ldr         r3, [r1]
  01bf0	e1832002	 orr         r2, r3, r2
  01bf4	e59d3014	 ldr         r3, [sp, #0x14]
  01bf8	e283302c	 add         r3, r3, #0x2C
  01bfc	e5832000	 str         r2, [r3]

; 842  : 
; 843  :     // update register: RCR2
; 844  :     //------------------------
; 845  :     // NOTE:
; 846  :     //      We are always ignoring Rx frame sync errors
; 847  :     //
; 848  :     // set RPHASE
; 849  :     // set RFRLEN2
; 850  :     // set RWDLEN2
; 851  :     // set RREVERSE
; 852  :     // set RDATDLY
; 853  :     // set RREVERSE
; 854  :     //
; 855  :     // in dual phase receive1 and receive2 words per frame are the same
; 856  : 
; 857  :     pDevice->shadowRegs.RCR2 |= pDevice->pConfigInfo->RxPhase |
; 858  :         MCBSP_FRAME_LENGTH(pDevice->pConfigInfo->RxFrameLength)|
; 859  :         MCBSP_WORD_LENGTH(pDevice->pConfigInfo->RxWordLength2) |
; 860  :         pDevice->pConfigInfo->RxReverse |
; 861  :         pDevice->pConfigInfo->RxDataDelay;

  01c00	e59d3014	 ldr         r3, [sp, #0x14]
  01c04	e2830028	 add         r0, r3, #0x28
  01c08	e59d3014	 ldr         r3, [sp, #0x14]
  01c0c	e2833068	 add         r3, r3, #0x68
  01c10	e5933000	 ldr         r3, [r3]
  01c14	e2831020	 add         r1, r3, #0x20
  01c18	e59d3014	 ldr         r3, [sp, #0x14]
  01c1c	e2833068	 add         r3, r3, #0x68
  01c20	e5933000	 ldr         r3, [r3]
  01c24	e2833004	 add         r3, r3, #4
  01c28	e5933000	 ldr         r3, [r3]
  01c2c	e2433001	 sub         r3, r3, #1
  01c30	e1a03403	 mov         r3, r3, lsl #8
  01c34	e2032c7f	 and         r2, r3, #0x7F, 24
  01c38	e5913000	 ldr         r3, [r1]
  01c3c	e1832002	 orr         r2, r3, r2
  01c40	e59d3014	 ldr         r3, [sp, #0x14]
  01c44	e2833068	 add         r3, r3, #0x68
  01c48	e5933000	 ldr         r3, [r3]
  01c4c	e283300c	 add         r3, r3, #0xC
  01c50	e5933000	 ldr         r3, [r3]
  01c54	e1a03283	 mov         r3, r3, lsl #5
  01c58	e20330e0	 and         r3, r3, #0xE0
  01c5c	e1822003	 orr         r2, r2, r3
  01c60	e59d3014	 ldr         r3, [sp, #0x14]
  01c64	e2833068	 add         r3, r3, #0x68
  01c68	e5933000	 ldr         r3, [r3]
  01c6c	e2833010	 add         r3, r3, #0x10
  01c70	e5933000	 ldr         r3, [r3]
  01c74	e1822003	 orr         r2, r2, r3
  01c78	e59d3014	 ldr         r3, [sp, #0x14]
  01c7c	e2833068	 add         r3, r3, #0x68
  01c80	e5933000	 ldr         r3, [r3]
  01c84	e2833014	 add         r3, r3, #0x14
  01c88	e5933000	 ldr         r3, [r3]
  01c8c	e1822003	 orr         r2, r2, r3
  01c90	e5903000	 ldr         r3, [r0]
  01c94	e1832002	 orr         r2, r3, r2
  01c98	e59d3014	 ldr         r3, [sp, #0x14]
  01c9c	e2833028	 add         r3, r3, #0x28
  01ca0	e5832000	 str         r2, [r3]

; 862  : 
; 863  :     // update register: PCR
; 864  :     //-----------------------
; 865  :     // set FSRM
; 866  :     // set FSRP
; 867  :     // set CLKRP
; 868  :     // set CLKRM
; 869  :     //
; 870  :     pDevice->shadowRegs.PCR |= pDevice->pConfigInfo->RxFrameSyncSource |
; 871  :         pDevice->pConfigInfo->RxFrameSyncPolarity |
; 872  :         pDevice->pConfigInfo->RxClkPolarity |
; 873  :         pDevice->pConfigInfo->RxClockSource;

  01ca4	e59d3014	 ldr         r3, [sp, #0x14]
  01ca8	e2831040	 add         r1, r3, #0x40
  01cac	e59d3014	 ldr         r3, [sp, #0x14]
  01cb0	e2833068	 add         r3, r3, #0x68
  01cb4	e5933000	 ldr         r3, [r3]
  01cb8	e283201c	 add         r2, r3, #0x1C
  01cbc	e59d3014	 ldr         r3, [sp, #0x14]
  01cc0	e2833068	 add         r3, r3, #0x68
  01cc4	e5933000	 ldr         r3, [r3]
  01cc8	e283302c	 add         r3, r3, #0x2C
  01ccc	e5922000	 ldr         r2, [r2]
  01cd0	e5933000	 ldr         r3, [r3]
  01cd4	e1822003	 orr         r2, r2, r3
  01cd8	e59d3014	 ldr         r3, [sp, #0x14]
  01cdc	e2833068	 add         r3, r3, #0x68
  01ce0	e5933000	 ldr         r3, [r3]
  01ce4	e2833028	 add         r3, r3, #0x28
  01ce8	e5933000	 ldr         r3, [r3]
  01cec	e1822003	 orr         r2, r2, r3
  01cf0	e59d3014	 ldr         r3, [sp, #0x14]
  01cf4	e2833068	 add         r3, r3, #0x68
  01cf8	e5933000	 ldr         r3, [r3]
  01cfc	e2833018	 add         r3, r3, #0x18
  01d00	e5933000	 ldr         r3, [r3]
  01d04	e1822003	 orr         r2, r2, r3
  01d08	e5913000	 ldr         r3, [r1]
  01d0c	e1832002	 orr         r2, r3, r2
  01d10	e59d3014	 ldr         r3, [sp, #0x14]
  01d14	e2833040	 add         r3, r3, #0x40
  01d18	e5832000	 str         r2, [r3]

; 874  : 
; 875  :     // update register: SPCR2
; 876  :     //------------------------
; 877  :     // NOTE:
; 878  :     //      Only set RINTM when in DMA mode
; 879  :     //
; 880  :     // set RINTM
; 881  :     //
; 882  :     pDevice->shadowRegs.SPCR1 |= pDevice->pConfigInfo->RxSyncError;

  01d1c	e59d3014	 ldr         r3, [sp, #0x14]
  01d20	e2832024	 add         r2, r3, #0x24
  01d24	e59d3014	 ldr         r3, [sp, #0x14]
  01d28	e2833068	 add         r3, r3, #0x68
  01d2c	e5933000	 ldr         r3, [r3]
  01d30	e2833024	 add         r3, r3, #0x24
  01d34	e5922000	 ldr         r2, [r2]
  01d38	e5933000	 ldr         r3, [r3]
  01d3c	e1822003	 orr         r2, r2, r3
  01d40	e59d3014	 ldr         r3, [sp, #0x14]
  01d44	e2833024	 add         r3, r3, #0x24
  01d48	e5832000	 str         r2, [r3]

; 883  : 
; 884  :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S\r\n", __FUNCTION__));

  01d4c	e59f303c	 ldr         r3, [pc, #0x3C]
  01d50	e5933440	 ldr         r3, [r3, #0x440]
  01d54	e3130004	 tst         r3, #4
  01d58	0a000005	 beq         |$LN7@mcbsp_Conf@5|
  01d5c	e59f1028	 ldr         r1, [pc, #0x28]
  01d60	e59f0020	 ldr         r0, [pc, #0x20]
  01d64	eb000000	 bl          NKDbgPrintfW
  01d68	e3a03001	 mov         r3, #1
  01d6c	e58d3008	 str         r3, [sp, #8]
  01d70	ea000001	 b           |$LN8@mcbsp_Conf@5|
  01d74		 |$LN7@mcbsp_Conf@5|
  01d74	e3a03000	 mov         r3, #0
  01d78	e58d3008	 str         r3, [sp, #8]
  01d7c		 |$LN8@mcbsp_Conf@5|

; 885  : }

  01d7c	e28dd00c	 add         sp, sp, #0xC
  01d80	e89d6000	 ldmia       sp, {sp, lr}
  01d84	e12fff1e	 bx          lr
  01d88		 |$LN12@mcbsp_Conf@5|
  01d88		 |$LN13@mcbsp_Conf@5|
  01d88	00000000	 DCD         |??_C@_1BE@LFFACMJN@?$AAM?$AAC?$AAP?$AA?3?$AA?9?$AA?$CF?$AAS?$AA?$AN?$AA?6?$AA?$AA@|
  01d8c		 |$LN14@mcbsp_Conf@5|
  01d8c	00000000	 DCD         |??_C@_0BI@GNDHOKCB@mcbsp_ConfigureReceiver?$AA@|
  01d90		 |$LN15@mcbsp_Conf@5|
  01d90	00000000	 DCD         |dpCurSettings|
  01d94		 |$LN16@mcbsp_Conf@5|
  01d94	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  01d98		 |$LN17@mcbsp_Conf@5|
  01d98	00000000	 DCD         |??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@|
  01d9c		 |$LN18@mcbsp_Conf@5|
  01d9c	00000000	 DCD         |??_C@_1KG@IMKIOOHN@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  01da0		 |$LN19@mcbsp_Conf@5|
  01da0	00000000	 DCD         |??_C@_1CE@FCDKFBGI@?$AAM?$AAC?$AAP?$AA?3?$AA?$CL?$AA?$CF?$AAS?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  01da4		 |$M37301|

			 ENDP  ; |mcbsp_ConfigureReceiver|

	EXPORT	|??_C@_0BF@KDJKJLIM@mcbsp_ClearIRQStatus?$AA@| [ DATA ] ; `string'

  00038			 AREA	 |.pdata|, PDATA
|$T37320| DCD	|$LN9@mcbsp_Clea|
	DCD	0x40002b04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BF@KDJKJLIM@mcbsp_ClearIRQStatus?$AA@| DCB "mcbsp_ClearIRQStatus", 0x0 ; `string'
; Function compile flags: /Odtp

  01da4			 AREA	 |.text|, CODE, ARM

  01da4		 |mcbsp_ClearIRQStatus| PROC

; 896  : {

  01da4		 |$LN9@mcbsp_Clea|
  01da4	e1a0c00d	 mov         r12, sp
  01da8	e92d0001	 stmdb       sp!, {r0}
  01dac	e92d5000	 stmdb       sp!, {r12, lr}
  01db0	e24dd008	 sub         sp, sp, #8
  01db4		 |$M37317|

; 897  :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S(0x%08x)\r\n", __FUNCTION__, pDevice));

  01db4	e59f308c	 ldr         r3, [pc, #0x8C]
  01db8	e5933440	 ldr         r3, [r3, #0x440]
  01dbc	e3130004	 tst         r3, #4
  01dc0	0a000006	 beq         |$LN3@mcbsp_Clea|
  01dc4	e59d2010	 ldr         r2, [sp, #0x10]
  01dc8	e59f1074	 ldr         r1, [pc, #0x74]
  01dcc	e59f0078	 ldr         r0, [pc, #0x78]
  01dd0	eb000000	 bl          NKDbgPrintfW
  01dd4	e3a03001	 mov         r3, #1
  01dd8	e58d3000	 str         r3, [sp]
  01ddc	ea000001	 b           |$LN4@mcbsp_Clea|
  01de0		 |$LN3@mcbsp_Clea|
  01de0	e3a03000	 mov         r3, #0
  01de4	e58d3000	 str         r3, [sp]
  01de8		 |$LN4@mcbsp_Clea|

; 898  : 
; 899  :     // Clear the IRQ status
; 900  :     //
; 901  :     OUTREG32(&pDevice->pMcbspRegs->IRQSTATUS, 0xFFFF);

  01de8	e59d3010	 ldr         r3, [sp, #0x10]
  01dec	e283301c	 add         r3, r3, #0x1C
  01df0	e5933000	 ldr         r3, [r3]
  01df4	e28320a0	 add         r2, r3, #0xA0
  01df8	e3a03cff	 mov         r3, #0xFF, 24
  01dfc	e38330ff	 orr         r3, r3, #0xFF
  01e00	e5823000	 str         r3, [r2]

; 902  : 
; 903  :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S\r\n", __FUNCTION__));

  01e04	e59f303c	 ldr         r3, [pc, #0x3C]
  01e08	e5933440	 ldr         r3, [r3, #0x440]
  01e0c	e3130004	 tst         r3, #4
  01e10	0a000005	 beq         |$LN5@mcbsp_Clea|
  01e14	e59f1028	 ldr         r1, [pc, #0x28]
  01e18	e59f0020	 ldr         r0, [pc, #0x20]
  01e1c	eb000000	 bl          NKDbgPrintfW
  01e20	e3a03001	 mov         r3, #1
  01e24	e58d3004	 str         r3, [sp, #4]
  01e28	ea000001	 b           |$LN6@mcbsp_Clea|
  01e2c		 |$LN5@mcbsp_Clea|
  01e2c	e3a03000	 mov         r3, #0
  01e30	e58d3004	 str         r3, [sp, #4]
  01e34		 |$LN6@mcbsp_Clea|

; 904  : }

  01e34	e28dd008	 add         sp, sp, #8
  01e38	e89d6000	 ldmia       sp, {sp, lr}
  01e3c	e12fff1e	 bx          lr
  01e40		 |$LN10@mcbsp_Clea|
  01e40		 |$LN11@mcbsp_Clea|
  01e40	00000000	 DCD         |??_C@_1BE@LFFACMJN@?$AAM?$AAC?$AAP?$AA?3?$AA?9?$AA?$CF?$AAS?$AA?$AN?$AA?6?$AA?$AA@|
  01e44		 |$LN12@mcbsp_Clea|
  01e44	00000000	 DCD         |??_C@_0BF@KDJKJLIM@mcbsp_ClearIRQStatus?$AA@|
  01e48		 |$LN13@mcbsp_Clea|
  01e48	00000000	 DCD         |dpCurSettings|
  01e4c		 |$LN14@mcbsp_Clea|
  01e4c	00000000	 DCD         |??_C@_1CE@FCDKFBGI@?$AAM?$AAC?$AAP?$AA?3?$AA?$CL?$AA?$CF?$AAS?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  01e50		 |$M37318|

			 ENDP  ; |mcbsp_ClearIRQStatus|

	EXPORT	|??_C@_0BG@MBLMOIJN@mcbsp_UpdateRegisters?$AA@| [ DATA ] ; `string'

  00040			 AREA	 |.pdata|, PDATA
|$T37334| DCD	|$LN9@mcbsp_Upda|
	DCD	0x4000b004

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BG@MBLMOIJN@mcbsp_UpdateRegisters?$AA@| DCB "mcbsp_UpdateRegister"
	DCB	"s", 0x0				; `string'
; Function compile flags: /Odtp

  01e50			 AREA	 |.text|, CODE, ARM

  01e50		 |mcbsp_UpdateRegisters| PROC

; 914  : {

  01e50		 |$LN9@mcbsp_Upda|
  01e50	e1a0c00d	 mov         r12, sp
  01e54	e92d0001	 stmdb       sp!, {r0}
  01e58	e92d5000	 stmdb       sp!, {r12, lr}
  01e5c	e24dd008	 sub         sp, sp, #8
  01e60		 |$M37331|

; 915  :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S(0x%08x)\r\n", __FUNCTION__, pDevice));

  01e60	e59f32a0	 ldr         r3, [pc, #0x2A0]
  01e64	e5933440	 ldr         r3, [r3, #0x440]
  01e68	e3130004	 tst         r3, #4
  01e6c	0a000006	 beq         |$LN3@mcbsp_Upda|
  01e70	e59d2010	 ldr         r2, [sp, #0x10]
  01e74	e59f1288	 ldr         r1, [pc, #0x288]
  01e78	e59f028c	 ldr         r0, [pc, #0x28C]
  01e7c	eb000000	 bl          NKDbgPrintfW
  01e80	e3a03001	 mov         r3, #1
  01e84	e58d3000	 str         r3, [sp]
  01e88	ea000001	 b           |$LN4@mcbsp_Upda|
  01e8c		 |$LN3@mcbsp_Upda|
  01e8c	e3a03000	 mov         r3, #0
  01e90	e58d3000	 str         r3, [sp]
  01e94		 |$LN4@mcbsp_Upda|

; 916  : 
; 917  :     OUTREG32(&pDevice->pMcbspRegs->SRGR1, pDevice->shadowRegs.SRGR1);

  01e94	e59d3010	 ldr         r3, [sp, #0x10]
  01e98	e283103c	 add         r1, r3, #0x3C
  01e9c	e59d3010	 ldr         r3, [sp, #0x10]
  01ea0	e283301c	 add         r3, r3, #0x1C
  01ea4	e5933000	 ldr         r3, [r3]
  01ea8	e283202c	 add         r2, r3, #0x2C
  01eac	e5913000	 ldr         r3, [r1]
  01eb0	e5823000	 str         r3, [r2]

; 918  :     OUTREG32(&pDevice->pMcbspRegs->SRGR2, pDevice->shadowRegs.SRGR2);

  01eb4	e59d3010	 ldr         r3, [sp, #0x10]
  01eb8	e2831038	 add         r1, r3, #0x38
  01ebc	e59d3010	 ldr         r3, [sp, #0x10]
  01ec0	e283301c	 add         r3, r3, #0x1C
  01ec4	e5933000	 ldr         r3, [r3]
  01ec8	e2832028	 add         r2, r3, #0x28
  01ecc	e5913000	 ldr         r3, [r1]
  01ed0	e5823000	 str         r3, [r2]

; 919  :     OUTREG32(&pDevice->pMcbspRegs->PCR, pDevice->shadowRegs.PCR);

  01ed4	e59d3010	 ldr         r3, [sp, #0x10]
  01ed8	e2831040	 add         r1, r3, #0x40
  01edc	e59d3010	 ldr         r3, [sp, #0x10]
  01ee0	e283301c	 add         r3, r3, #0x1C
  01ee4	e5933000	 ldr         r3, [r3]
  01ee8	e2832048	 add         r2, r3, #0x48
  01eec	e5913000	 ldr         r3, [r1]
  01ef0	e5823000	 str         r3, [r2]

; 920  :     OUTREG32(&pDevice->pMcbspRegs->XCR1, pDevice->shadowRegs.XCR1);

  01ef4	e59d3010	 ldr         r3, [sp, #0x10]
  01ef8	e2831034	 add         r1, r3, #0x34
  01efc	e59d3010	 ldr         r3, [sp, #0x10]
  01f00	e283301c	 add         r3, r3, #0x1C
  01f04	e5933000	 ldr         r3, [r3]
  01f08	e2832024	 add         r2, r3, #0x24
  01f0c	e5913000	 ldr         r3, [r1]
  01f10	e5823000	 str         r3, [r2]

; 921  :     OUTREG32(&pDevice->pMcbspRegs->XCR2, pDevice->shadowRegs.XCR2);

  01f14	e59d3010	 ldr         r3, [sp, #0x10]
  01f18	e2831030	 add         r1, r3, #0x30
  01f1c	e59d3010	 ldr         r3, [sp, #0x10]
  01f20	e283301c	 add         r3, r3, #0x1C
  01f24	e5933000	 ldr         r3, [r3]
  01f28	e2832020	 add         r2, r3, #0x20
  01f2c	e5913000	 ldr         r3, [r1]
  01f30	e5823000	 str         r3, [r2]

; 922  :     OUTREG32(&pDevice->pMcbspRegs->RCR1, pDevice->shadowRegs.RCR1);

  01f34	e59d3010	 ldr         r3, [sp, #0x10]
  01f38	e283102c	 add         r1, r3, #0x2C
  01f3c	e59d3010	 ldr         r3, [sp, #0x10]
  01f40	e283301c	 add         r3, r3, #0x1C
  01f44	e5933000	 ldr         r3, [r3]
  01f48	e283201c	 add         r2, r3, #0x1C
  01f4c	e5913000	 ldr         r3, [r1]
  01f50	e5823000	 str         r3, [r2]

; 923  :     OUTREG32(&pDevice->pMcbspRegs->RCR2, pDevice->shadowRegs.RCR2);

  01f54	e59d3010	 ldr         r3, [sp, #0x10]
  01f58	e2831028	 add         r1, r3, #0x28
  01f5c	e59d3010	 ldr         r3, [sp, #0x10]
  01f60	e283301c	 add         r3, r3, #0x1C
  01f64	e5933000	 ldr         r3, [r3]
  01f68	e2832018	 add         r2, r3, #0x18
  01f6c	e5913000	 ldr         r3, [r1]
  01f70	e5823000	 str         r3, [r2]

; 924  :     OUTREG32(&pDevice->pMcbspRegs->SPCR2, pDevice->shadowRegs.SPCR2);

  01f74	e59d3010	 ldr         r3, [sp, #0x10]
  01f78	e2831020	 add         r1, r3, #0x20
  01f7c	e59d3010	 ldr         r3, [sp, #0x10]
  01f80	e283301c	 add         r3, r3, #0x1C
  01f84	e5933000	 ldr         r3, [r3]
  01f88	e2832010	 add         r2, r3, #0x10
  01f8c	e5913000	 ldr         r3, [r1]
  01f90	e5823000	 str         r3, [r2]

; 925  :     OUTREG32(&pDevice->pMcbspRegs->SPCR1, pDevice->shadowRegs.SPCR1);

  01f94	e59d3010	 ldr         r3, [sp, #0x10]
  01f98	e2831024	 add         r1, r3, #0x24
  01f9c	e59d3010	 ldr         r3, [sp, #0x10]
  01fa0	e283301c	 add         r3, r3, #0x1C
  01fa4	e5933000	 ldr         r3, [r3]
  01fa8	e2832014	 add         r2, r3, #0x14
  01fac	e5913000	 ldr         r3, [r1]
  01fb0	e5823000	 str         r3, [r2]

; 926  : 
; 927  :     //McBSP RX Threshold settings for FIFO
; 928  :     //
; 929  :     pDevice->shadowRegs.THRSH1 = pDevice->fifoThresholdRx;

  01fb4	e59d3010	 ldr         r3, [sp, #0x10]
  01fb8	e2831e11	 add         r1, r3, #0x11, 28
  01fbc	e59d3010	 ldr         r3, [sp, #0x10]
  01fc0	e2832044	 add         r2, r3, #0x44
  01fc4	e5913000	 ldr         r3, [r1]
  01fc8	e5823000	 str         r3, [r2]

; 930  :     OUTREG32(&pDevice->pMcbspRegs->THRSH1, pDevice->shadowRegs.THRSH1);

  01fcc	e59d3010	 ldr         r3, [sp, #0x10]
  01fd0	e2831044	 add         r1, r3, #0x44
  01fd4	e59d3010	 ldr         r3, [sp, #0x10]
  01fd8	e283301c	 add         r3, r3, #0x1C
  01fdc	e5933000	 ldr         r3, [r3]
  01fe0	e2832094	 add         r2, r3, #0x94
  01fe4	e5913000	 ldr         r3, [r1]
  01fe8	e5823000	 str         r3, [r2]

; 931  : 
; 932  :     //McBSP TX Threshold settings for FIFO
; 933  :     //
; 934  :     pDevice->shadowRegs.THRSH2 = pDevice->fifoThresholdTx;

  01fec	e59d3010	 ldr         r3, [sp, #0x10]
  01ff0	e28310f0	 add         r1, r3, #0xF0
  01ff4	e59d3010	 ldr         r3, [sp, #0x10]
  01ff8	e2832048	 add         r2, r3, #0x48
  01ffc	e5913000	 ldr         r3, [r1]
  02000	e5823000	 str         r3, [r2]

; 935  :     OUTREG32(&pDevice->pMcbspRegs->THRSH2, pDevice->shadowRegs.THRSH2);

  02004	e59d3010	 ldr         r3, [sp, #0x10]
  02008	e2831048	 add         r1, r3, #0x48
  0200c	e59d3010	 ldr         r3, [sp, #0x10]
  02010	e283301c	 add         r3, r3, #0x1C
  02014	e5933000	 ldr         r3, [r3]
  02018	e2832090	 add         r2, r3, #0x90
  0201c	e5913000	 ldr         r3, [r1]
  02020	e5823000	 str         r3, [r2]

; 936  : 
; 937  :     // Set McBSP in smart Idle mode and enable mcbsp wakeup
; 938  :     // Also the clockactivity to be set to 0 ( McBSP2_ICLK clock can be switched
; 939  :     // off and PRCM functional clock can be switched off
; 940  :     //
; 941  :     pDevice->shadowRegs.SYSCONFIG = MCBSP_SYSCONFIG_SMARTIDLE |
; 942  :                                     MCBSP_SYSCONFIG_ENAWAKEUP |
; 943  :                                     MCBSP_SYSCONFIG_CLOCKACTIVITY(0);

  02024	e59d3010	 ldr         r3, [sp, #0x10]
  02028	e283204c	 add         r2, r3, #0x4C
  0202c	e3a03014	 mov         r3, #0x14
  02030	e5823000	 str         r3, [r2]

; 944  :     OUTREG32(&pDevice->pMcbspRegs->SYSCONFIG, pDevice->shadowRegs.SYSCONFIG);

  02034	e59d3010	 ldr         r3, [sp, #0x10]
  02038	e283104c	 add         r1, r3, #0x4C
  0203c	e59d3010	 ldr         r3, [sp, #0x10]
  02040	e283301c	 add         r3, r3, #0x1C
  02044	e5933000	 ldr         r3, [r3]
  02048	e283208c	 add         r2, r3, #0x8C
  0204c	e5913000	 ldr         r3, [r1]
  02050	e5823000	 str         r3, [r2]

; 945  : 
; 946  :     // Clocks in McBSP are shutoff when both IDLE_EN=1 and its power domain is
; 947  :     // in idle mode(Force idle or Smart idle)
; 948  :     pDevice->shadowRegs.PCR |= MCBSP_PCR_IDLE_EN;

  02054	e59d3010	 ldr         r3, [sp, #0x10]
  02058	e2833040	 add         r3, r3, #0x40
  0205c	e5933000	 ldr         r3, [r3]
  02060	e3832901	 orr         r2, r3, #1, 18
  02064	e59d3010	 ldr         r3, [sp, #0x10]
  02068	e2833040	 add         r3, r3, #0x40
  0206c	e5832000	 str         r2, [r3]

; 949  :     OUTREG32(&pDevice->pMcbspRegs->PCR, pDevice->shadowRegs.PCR);

  02070	e59d3010	 ldr         r3, [sp, #0x10]
  02074	e2831040	 add         r1, r3, #0x40
  02078	e59d3010	 ldr         r3, [sp, #0x10]
  0207c	e283301c	 add         r3, r3, #0x1C
  02080	e5933000	 ldr         r3, [r3]
  02084	e2832048	 add         r2, r3, #0x48
  02088	e5913000	 ldr         r3, [r1]
  0208c	e5823000	 str         r3, [r2]

; 950  : 
; 951  :     // Set McBSP wake up enable register
; 952  :     //
; 953  :     pDevice->shadowRegs.WAKEUPEN = MCBSP_WAKEUPEN_XEMPTYEOFEN |
; 954  :                                    MCBSP_WAKEUPEN_XRDYEN |
; 955  :                                    MCBSP_WAKEUPEN_RRDYEN;

  02090	e59d3010	 ldr         r3, [sp, #0x10]
  02094	e2832050	 add         r2, r3, #0x50
  02098	e3a03b11	 mov         r3, #0x11, 22
  0209c	e3833008	 orr         r3, r3, #8
  020a0	e5823000	 str         r3, [r2]

; 956  :     OUTREG32(&pDevice->pMcbspRegs->WAKEUPEN, pDevice->shadowRegs.WAKEUPEN);

  020a4	e59d3010	 ldr         r3, [sp, #0x10]
  020a8	e2831050	 add         r1, r3, #0x50
  020ac	e59d3010	 ldr         r3, [sp, #0x10]
  020b0	e283301c	 add         r3, r3, #0x1C
  020b4	e5933000	 ldr         r3, [r3]
  020b8	e28320a8	 add         r2, r3, #0xA8
  020bc	e5913000	 ldr         r3, [r1]
  020c0	e5823000	 str         r3, [r2]

; 957  : 
; 958  :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S\r\n", __FUNCTION__));

  020c4	e59f303c	 ldr         r3, [pc, #0x3C]
  020c8	e5933440	 ldr         r3, [r3, #0x440]
  020cc	e3130004	 tst         r3, #4
  020d0	0a000005	 beq         |$LN5@mcbsp_Upda|
  020d4	e59f1028	 ldr         r1, [pc, #0x28]
  020d8	e59f0020	 ldr         r0, [pc, #0x20]
  020dc	eb000000	 bl          NKDbgPrintfW
  020e0	e3a03001	 mov         r3, #1
  020e4	e58d3004	 str         r3, [sp, #4]
  020e8	ea000001	 b           |$LN6@mcbsp_Upda|
  020ec		 |$LN5@mcbsp_Upda|
  020ec	e3a03000	 mov         r3, #0
  020f0	e58d3004	 str         r3, [sp, #4]
  020f4		 |$LN6@mcbsp_Upda|

; 959  : }

  020f4	e28dd008	 add         sp, sp, #8
  020f8	e89d6000	 ldmia       sp, {sp, lr}
  020fc	e12fff1e	 bx          lr
  02100		 |$LN10@mcbsp_Upda|
  02100		 |$LN11@mcbsp_Upda|
  02100	00000000	 DCD         |??_C@_1BE@LFFACMJN@?$AAM?$AAC?$AAP?$AA?3?$AA?9?$AA?$CF?$AAS?$AA?$AN?$AA?6?$AA?$AA@|
  02104		 |$LN12@mcbsp_Upda|
  02104	00000000	 DCD         |??_C@_0BG@MBLMOIJN@mcbsp_UpdateRegisters?$AA@|
  02108		 |$LN13@mcbsp_Upda|
  02108	00000000	 DCD         |dpCurSettings|
  0210c		 |$LN14@mcbsp_Upda|
  0210c	00000000	 DCD         |??_C@_1CE@FCDKFBGI@?$AAM?$AAC?$AAP?$AA?3?$AA?$CL?$AA?$CF?$AAS?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  02110		 |$M37332|

			 ENDP  ; |mcbsp_UpdateRegisters|

	EXPORT	|??_C@_0BP@ICFNFPFG@mcbsp_ResetSampleRateGenerator?$AA@| [ DATA ] ; `string'

  00048			 AREA	 |.pdata|, PDATA
|$T37348| DCD	|$LN9@mcbsp_Rese@2|
	DCD	0x40003404

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BP@ICFNFPFG@mcbsp_ResetSampleRateGenerator?$AA@| DCB "mcbsp_Reset"
	DCB	"SampleRateGenerator", 0x0		; `string'
; Function compile flags: /Odtp

  02110			 AREA	 |.text|, CODE, ARM

  02110		 |mcbsp_ResetSampleRateGenerator| PROC

; 969  : {

  02110		 |$LN9@mcbsp_Rese@2|
  02110	e1a0c00d	 mov         r12, sp
  02114	e92d0001	 stmdb       sp!, {r0}
  02118	e92d5000	 stmdb       sp!, {r12, lr}
  0211c	e24dd008	 sub         sp, sp, #8
  02120		 |$M37345|

; 970  :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S(0x%08x)\r\n", __FUNCTION__, pDevice));

  02120	e59f30b0	 ldr         r3, [pc, #0xB0]
  02124	e5933440	 ldr         r3, [r3, #0x440]
  02128	e3130004	 tst         r3, #4
  0212c	0a000006	 beq         |$LN3@mcbsp_Rese@2|
  02130	e59d2010	 ldr         r2, [sp, #0x10]
  02134	e59f1098	 ldr         r1, [pc, #0x98]
  02138	e59f009c	 ldr         r0, [pc, #0x9C]
  0213c	eb000000	 bl          NKDbgPrintfW
  02140	e3a03001	 mov         r3, #1
  02144	e58d3000	 str         r3, [sp]
  02148	ea000001	 b           |$LN4@mcbsp_Rese@2|
  0214c		 |$LN3@mcbsp_Rese@2|
  0214c	e3a03000	 mov         r3, #0
  02150	e58d3000	 str         r3, [sp]
  02154		 |$LN4@mcbsp_Rese@2|

; 971  : 
; 972  :     pDevice->shadowRegs.SPCR2 &=
; 973  :         ~(MCBSP_SPCR2_GRST_RSTCLR | MCBSP_SPCR2_FRST_RSTCLR);

  02154	e59d3010	 ldr         r3, [sp, #0x10]
  02158	e2833020	 add         r3, r3, #0x20
  0215c	e5932000	 ldr         r2, [r3]
  02160	e3e030c0	 mvn         r3, #0xC0
  02164	e0022003	 and         r2, r2, r3
  02168	e59d3010	 ldr         r3, [sp, #0x10]
  0216c	e2833020	 add         r3, r3, #0x20
  02170	e5832000	 str         r2, [r3]

; 974  :     OUTREG32(&pDevice->pMcbspRegs->SPCR2, pDevice->shadowRegs.SPCR2);

  02174	e59d3010	 ldr         r3, [sp, #0x10]
  02178	e2831020	 add         r1, r3, #0x20
  0217c	e59d3010	 ldr         r3, [sp, #0x10]
  02180	e283301c	 add         r3, r3, #0x1C
  02184	e5933000	 ldr         r3, [r3]
  02188	e2832010	 add         r2, r3, #0x10
  0218c	e5913000	 ldr         r3, [r1]
  02190	e5823000	 str         r3, [r2]

; 975  : 
; 976  :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S\r\n", __FUNCTION__));

  02194	e59f303c	 ldr         r3, [pc, #0x3C]
  02198	e5933440	 ldr         r3, [r3, #0x440]
  0219c	e3130004	 tst         r3, #4
  021a0	0a000005	 beq         |$LN5@mcbsp_Rese@2|
  021a4	e59f1028	 ldr         r1, [pc, #0x28]
  021a8	e59f0020	 ldr         r0, [pc, #0x20]
  021ac	eb000000	 bl          NKDbgPrintfW
  021b0	e3a03001	 mov         r3, #1
  021b4	e58d3004	 str         r3, [sp, #4]
  021b8	ea000001	 b           |$LN6@mcbsp_Rese@2|
  021bc		 |$LN5@mcbsp_Rese@2|
  021bc	e3a03000	 mov         r3, #0
  021c0	e58d3004	 str         r3, [sp, #4]
  021c4		 |$LN6@mcbsp_Rese@2|

; 977  : }

  021c4	e28dd008	 add         sp, sp, #8
  021c8	e89d6000	 ldmia       sp, {sp, lr}
  021cc	e12fff1e	 bx          lr
  021d0		 |$LN10@mcbsp_Rese@2|
  021d0		 |$LN11@mcbsp_Rese@2|
  021d0	00000000	 DCD         |??_C@_1BE@LFFACMJN@?$AAM?$AAC?$AAP?$AA?3?$AA?9?$AA?$CF?$AAS?$AA?$AN?$AA?6?$AA?$AA@|
  021d4		 |$LN12@mcbsp_Rese@2|
  021d4	00000000	 DCD         |??_C@_0BP@ICFNFPFG@mcbsp_ResetSampleRateGenerator?$AA@|
  021d8		 |$LN13@mcbsp_Rese@2|
  021d8	00000000	 DCD         |dpCurSettings|
  021dc		 |$LN14@mcbsp_Rese@2|
  021dc	00000000	 DCD         |??_C@_1CE@FCDKFBGI@?$AAM?$AAC?$AAP?$AA?3?$AA?$CL?$AA?$CF?$AAS?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  021e0		 |$M37346|

			 ENDP  ; |mcbsp_ResetSampleRateGenerator|

	EXPORT	|??_C@_0CA@KEIBAFAP@mcbsp_EnableSampleRateGenerator?$AA@| [ DATA ] ; `string'
	EXPORT	|mcbsp_EnableSampleRateGenerator|

  00050			 AREA	 |.pdata|, PDATA
|$T37362| DCD	|$LN9@mcbsp_Enab|
	DCD	0x40003304

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CA@KEIBAFAP@mcbsp_EnableSampleRateGenerator?$AA@| DCB "mcbsp_Enab"
	DCB	"leSampleRateGenerator", 0x0		; `string'
; Function compile flags: /Odtp

  021e0			 AREA	 |.text|, CODE, ARM

  021e0		 |mcbsp_EnableSampleRateGenerator| PROC

; 987  : {

  021e0		 |$LN9@mcbsp_Enab|
  021e0	e1a0c00d	 mov         r12, sp
  021e4	e92d0001	 stmdb       sp!, {r0}
  021e8	e92d5000	 stmdb       sp!, {r12, lr}
  021ec	e24dd008	 sub         sp, sp, #8
  021f0		 |$M37359|

; 988  :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S(0x%08x)\r\n", __FUNCTION__, pDevice));

  021f0	e59f30ac	 ldr         r3, [pc, #0xAC]
  021f4	e5933440	 ldr         r3, [r3, #0x440]
  021f8	e3130004	 tst         r3, #4
  021fc	0a000006	 beq         |$LN3@mcbsp_Enab|
  02200	e59d2010	 ldr         r2, [sp, #0x10]
  02204	e59f1094	 ldr         r1, [pc, #0x94]
  02208	e59f0098	 ldr         r0, [pc, #0x98]
  0220c	eb000000	 bl          NKDbgPrintfW
  02210	e3a03001	 mov         r3, #1
  02214	e58d3000	 str         r3, [sp]
  02218	ea000001	 b           |$LN4@mcbsp_Enab|
  0221c		 |$LN3@mcbsp_Enab|
  0221c	e3a03000	 mov         r3, #0
  02220	e58d3000	 str         r3, [sp]
  02224		 |$LN4@mcbsp_Enab|

; 989  : 
; 990  :     pDevice->shadowRegs.SPCR2 |=
; 991  :         MCBSP_SPCR2_GRST_RSTCLR | MCBSP_SPCR2_FRST_RSTCLR;

  02224	e59d3010	 ldr         r3, [sp, #0x10]
  02228	e2833020	 add         r3, r3, #0x20
  0222c	e5933000	 ldr         r3, [r3]
  02230	e38320c0	 orr         r2, r3, #0xC0
  02234	e59d3010	 ldr         r3, [sp, #0x10]
  02238	e2833020	 add         r3, r3, #0x20
  0223c	e5832000	 str         r2, [r3]

; 992  :     OUTREG32(&pDevice->pMcbspRegs->SPCR2, pDevice->shadowRegs.SPCR2);

  02240	e59d3010	 ldr         r3, [sp, #0x10]
  02244	e2831020	 add         r1, r3, #0x20
  02248	e59d3010	 ldr         r3, [sp, #0x10]
  0224c	e283301c	 add         r3, r3, #0x1C
  02250	e5933000	 ldr         r3, [r3]
  02254	e2832010	 add         r2, r3, #0x10
  02258	e5913000	 ldr         r3, [r1]
  0225c	e5823000	 str         r3, [r2]

; 993  : 
; 994  :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S\r\n", __FUNCTION__));

  02260	e59f303c	 ldr         r3, [pc, #0x3C]
  02264	e5933440	 ldr         r3, [r3, #0x440]
  02268	e3130004	 tst         r3, #4
  0226c	0a000005	 beq         |$LN5@mcbsp_Enab|
  02270	e59f1028	 ldr         r1, [pc, #0x28]
  02274	e59f0020	 ldr         r0, [pc, #0x20]
  02278	eb000000	 bl          NKDbgPrintfW
  0227c	e3a03001	 mov         r3, #1
  02280	e58d3004	 str         r3, [sp, #4]
  02284	ea000001	 b           |$LN6@mcbsp_Enab|
  02288		 |$LN5@mcbsp_Enab|
  02288	e3a03000	 mov         r3, #0
  0228c	e58d3004	 str         r3, [sp, #4]
  02290		 |$LN6@mcbsp_Enab|

; 995  : }

  02290	e28dd008	 add         sp, sp, #8
  02294	e89d6000	 ldmia       sp, {sp, lr}
  02298	e12fff1e	 bx          lr
  0229c		 |$LN10@mcbsp_Enab|
  0229c		 |$LN11@mcbsp_Enab|
  0229c	00000000	 DCD         |??_C@_1BE@LFFACMJN@?$AAM?$AAC?$AAP?$AA?3?$AA?9?$AA?$CF?$AAS?$AA?$AN?$AA?6?$AA?$AA@|
  022a0		 |$LN12@mcbsp_Enab|
  022a0	00000000	 DCD         |??_C@_0CA@KEIBAFAP@mcbsp_EnableSampleRateGenerator?$AA@|
  022a4		 |$LN13@mcbsp_Enab|
  022a4	00000000	 DCD         |dpCurSettings|
  022a8		 |$LN14@mcbsp_Enab|
  022a8	00000000	 DCD         |??_C@_1CE@FCDKFBGI@?$AAM?$AAC?$AAP?$AA?3?$AA?$CL?$AA?$CF?$AAS?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  022ac		 |$M37360|

			 ENDP  ; |mcbsp_EnableSampleRateGenerator|

	EXPORT	|??_C@_0BH@EAJPMOGM@mcbsp_ResetTransmitter?$AA@| [ DATA ] ; `string'

  00058			 AREA	 |.pdata|, PDATA
|$T37376| DCD	|$LN9@mcbsp_Rese@3|
	DCD	0x40003404

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BH@EAJPMOGM@mcbsp_ResetTransmitter?$AA@| DCB "mcbsp_ResetTransmit"
	DCB	"ter", 0x0				; `string'
; Function compile flags: /Odtp

  022ac			 AREA	 |.text|, CODE, ARM

  022ac		 |mcbsp_ResetTransmitter| PROC

; 1006 : {

  022ac		 |$LN9@mcbsp_Rese@3|
  022ac	e1a0c00d	 mov         r12, sp
  022b0	e92d0001	 stmdb       sp!, {r0}
  022b4	e92d5000	 stmdb       sp!, {r12, lr}
  022b8	e24dd008	 sub         sp, sp, #8
  022bc		 |$M37373|

; 1007 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S(0x%08x)\r\n", __FUNCTION__, pDevice));

  022bc	e59f30b0	 ldr         r3, [pc, #0xB0]
  022c0	e5933440	 ldr         r3, [r3, #0x440]
  022c4	e3130004	 tst         r3, #4
  022c8	0a000006	 beq         |$LN3@mcbsp_Rese@3|
  022cc	e59d2010	 ldr         r2, [sp, #0x10]
  022d0	e59f1098	 ldr         r1, [pc, #0x98]
  022d4	e59f009c	 ldr         r0, [pc, #0x9C]
  022d8	eb000000	 bl          NKDbgPrintfW
  022dc	e3a03001	 mov         r3, #1
  022e0	e58d3000	 str         r3, [sp]
  022e4	ea000001	 b           |$LN4@mcbsp_Rese@3|
  022e8		 |$LN3@mcbsp_Rese@3|
  022e8	e3a03000	 mov         r3, #0
  022ec	e58d3000	 str         r3, [sp]
  022f0		 |$LN4@mcbsp_Rese@3|

; 1008 : 
; 1009 :     pDevice->shadowRegs.SPCR2 &= ~MCBSP_SPCR2_XRST_RSTCLR;

  022f0	e59d3010	 ldr         r3, [sp, #0x10]
  022f4	e2833020	 add         r3, r3, #0x20
  022f8	e5932000	 ldr         r2, [r3]
  022fc	e3e03001	 mvn         r3, #1
  02300	e0022003	 and         r2, r2, r3
  02304	e59d3010	 ldr         r3, [sp, #0x10]
  02308	e2833020	 add         r3, r3, #0x20
  0230c	e5832000	 str         r2, [r3]

; 1010 :     OUTREG32(&pDevice->pMcbspRegs->SPCR2, pDevice->shadowRegs.SPCR2);

  02310	e59d3010	 ldr         r3, [sp, #0x10]
  02314	e2831020	 add         r1, r3, #0x20
  02318	e59d3010	 ldr         r3, [sp, #0x10]
  0231c	e283301c	 add         r3, r3, #0x1C
  02320	e5933000	 ldr         r3, [r3]
  02324	e2832010	 add         r2, r3, #0x10
  02328	e5913000	 ldr         r3, [r1]
  0232c	e5823000	 str         r3, [r2]

; 1011 : 
; 1012 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S\r\n", __FUNCTION__));

  02330	e59f303c	 ldr         r3, [pc, #0x3C]
  02334	e5933440	 ldr         r3, [r3, #0x440]
  02338	e3130004	 tst         r3, #4
  0233c	0a000005	 beq         |$LN5@mcbsp_Rese@3|
  02340	e59f1028	 ldr         r1, [pc, #0x28]
  02344	e59f0020	 ldr         r0, [pc, #0x20]
  02348	eb000000	 bl          NKDbgPrintfW
  0234c	e3a03001	 mov         r3, #1
  02350	e58d3004	 str         r3, [sp, #4]
  02354	ea000001	 b           |$LN6@mcbsp_Rese@3|
  02358		 |$LN5@mcbsp_Rese@3|
  02358	e3a03000	 mov         r3, #0
  0235c	e58d3004	 str         r3, [sp, #4]
  02360		 |$LN6@mcbsp_Rese@3|

; 1013 : }

  02360	e28dd008	 add         sp, sp, #8
  02364	e89d6000	 ldmia       sp, {sp, lr}
  02368	e12fff1e	 bx          lr
  0236c		 |$LN10@mcbsp_Rese@3|
  0236c		 |$LN11@mcbsp_Rese@3|
  0236c	00000000	 DCD         |??_C@_1BE@LFFACMJN@?$AAM?$AAC?$AAP?$AA?3?$AA?9?$AA?$CF?$AAS?$AA?$AN?$AA?6?$AA?$AA@|
  02370		 |$LN12@mcbsp_Rese@3|
  02370	00000000	 DCD         |??_C@_0BH@EAJPMOGM@mcbsp_ResetTransmitter?$AA@|
  02374		 |$LN13@mcbsp_Rese@3|
  02374	00000000	 DCD         |dpCurSettings|
  02378		 |$LN14@mcbsp_Rese@3|
  02378	00000000	 DCD         |??_C@_1CE@FCDKFBGI@?$AAM?$AAC?$AAP?$AA?3?$AA?$CL?$AA?$CF?$AAS?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  0237c		 |$M37374|

			 ENDP  ; |mcbsp_ResetTransmitter|

	EXPORT	|??_C@_0BI@OJKOFIIB@mcbsp_EnableTransmitter?$AA@| [ DATA ] ; `string'
	EXPORT	|mcbsp_EnableTransmitter|

  00060			 AREA	 |.pdata|, PDATA
|$T37390| DCD	|$LN9@mcbsp_Enab@2|
	DCD	0x40003304

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BI@OJKOFIIB@mcbsp_EnableTransmitter?$AA@| DCB "mcbsp_EnableTransm"
	DCB	"itter", 0x0				; `string'
; Function compile flags: /Odtp

  0237c			 AREA	 |.text|, CODE, ARM

  0237c		 |mcbsp_EnableTransmitter| PROC

; 1024 : {

  0237c		 |$LN9@mcbsp_Enab@2|
  0237c	e1a0c00d	 mov         r12, sp
  02380	e92d0001	 stmdb       sp!, {r0}
  02384	e92d5000	 stmdb       sp!, {r12, lr}
  02388	e24dd008	 sub         sp, sp, #8
  0238c		 |$M37387|

; 1025 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S(0x%08x)\r\n", __FUNCTION__, pDevice));

  0238c	e59f30ac	 ldr         r3, [pc, #0xAC]
  02390	e5933440	 ldr         r3, [r3, #0x440]
  02394	e3130004	 tst         r3, #4
  02398	0a000006	 beq         |$LN3@mcbsp_Enab@2|
  0239c	e59d2010	 ldr         r2, [sp, #0x10]
  023a0	e59f1094	 ldr         r1, [pc, #0x94]
  023a4	e59f0098	 ldr         r0, [pc, #0x98]
  023a8	eb000000	 bl          NKDbgPrintfW
  023ac	e3a03001	 mov         r3, #1
  023b0	e58d3000	 str         r3, [sp]
  023b4	ea000001	 b           |$LN4@mcbsp_Enab@2|
  023b8		 |$LN3@mcbsp_Enab@2|
  023b8	e3a03000	 mov         r3, #0
  023bc	e58d3000	 str         r3, [sp]
  023c0		 |$LN4@mcbsp_Enab@2|

; 1026 : 
; 1027 :     pDevice->shadowRegs.SPCR2 |= MCBSP_SPCR2_XRST_RSTCLR;

  023c0	e59d3010	 ldr         r3, [sp, #0x10]
  023c4	e2833020	 add         r3, r3, #0x20
  023c8	e5933000	 ldr         r3, [r3]
  023cc	e3832001	 orr         r2, r3, #1
  023d0	e59d3010	 ldr         r3, [sp, #0x10]
  023d4	e2833020	 add         r3, r3, #0x20
  023d8	e5832000	 str         r2, [r3]

; 1028 :     OUTREG32(&pDevice->pMcbspRegs->SPCR2, pDevice->shadowRegs.SPCR2);

  023dc	e59d3010	 ldr         r3, [sp, #0x10]
  023e0	e2831020	 add         r1, r3, #0x20
  023e4	e59d3010	 ldr         r3, [sp, #0x10]
  023e8	e283301c	 add         r3, r3, #0x1C
  023ec	e5933000	 ldr         r3, [r3]
  023f0	e2832010	 add         r2, r3, #0x10
  023f4	e5913000	 ldr         r3, [r1]
  023f8	e5823000	 str         r3, [r2]

; 1029 : 
; 1030 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S\r\n", __FUNCTION__));

  023fc	e59f303c	 ldr         r3, [pc, #0x3C]
  02400	e5933440	 ldr         r3, [r3, #0x440]
  02404	e3130004	 tst         r3, #4
  02408	0a000005	 beq         |$LN5@mcbsp_Enab@2|
  0240c	e59f1028	 ldr         r1, [pc, #0x28]
  02410	e59f0020	 ldr         r0, [pc, #0x20]
  02414	eb000000	 bl          NKDbgPrintfW
  02418	e3a03001	 mov         r3, #1
  0241c	e58d3004	 str         r3, [sp, #4]
  02420	ea000001	 b           |$LN6@mcbsp_Enab@2|
  02424		 |$LN5@mcbsp_Enab@2|
  02424	e3a03000	 mov         r3, #0
  02428	e58d3004	 str         r3, [sp, #4]
  0242c		 |$LN6@mcbsp_Enab@2|

; 1031 : }

  0242c	e28dd008	 add         sp, sp, #8
  02430	e89d6000	 ldmia       sp, {sp, lr}
  02434	e12fff1e	 bx          lr
  02438		 |$LN10@mcbsp_Enab@2|
  02438		 |$LN11@mcbsp_Enab@2|
  02438	00000000	 DCD         |??_C@_1BE@LFFACMJN@?$AAM?$AAC?$AAP?$AA?3?$AA?9?$AA?$CF?$AAS?$AA?$AN?$AA?6?$AA?$AA@|
  0243c		 |$LN12@mcbsp_Enab@2|
  0243c	00000000	 DCD         |??_C@_0BI@OJKOFIIB@mcbsp_EnableTransmitter?$AA@|
  02440		 |$LN13@mcbsp_Enab@2|
  02440	00000000	 DCD         |dpCurSettings|
  02444		 |$LN14@mcbsp_Enab@2|
  02444	00000000	 DCD         |??_C@_1CE@FCDKFBGI@?$AAM?$AAC?$AAP?$AA?3?$AA?$CL?$AA?$CF?$AAS?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  02448		 |$M37388|

			 ENDP  ; |mcbsp_EnableTransmitter|

	EXPORT	|??_C@_0BE@IGAEPBFJ@mcbsp_ResetReceiver?$AA@| [ DATA ] ; `string'

  00068			 AREA	 |.pdata|, PDATA
|$T37404| DCD	|$LN9@mcbsp_Rese@4|
	DCD	0x40003404

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BE@IGAEPBFJ@mcbsp_ResetReceiver?$AA@| DCB "mcbsp_ResetReceiver", 0x0 ; `string'
; Function compile flags: /Odtp

  02448			 AREA	 |.text|, CODE, ARM

  02448		 |mcbsp_ResetReceiver| PROC

; 1042 : {

  02448		 |$LN9@mcbsp_Rese@4|
  02448	e1a0c00d	 mov         r12, sp
  0244c	e92d0001	 stmdb       sp!, {r0}
  02450	e92d5000	 stmdb       sp!, {r12, lr}
  02454	e24dd008	 sub         sp, sp, #8
  02458		 |$M37401|

; 1043 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S(0x%08x)\r\n", __FUNCTION__, pDevice));

  02458	e59f30b0	 ldr         r3, [pc, #0xB0]
  0245c	e5933440	 ldr         r3, [r3, #0x440]
  02460	e3130004	 tst         r3, #4
  02464	0a000006	 beq         |$LN3@mcbsp_Rese@4|
  02468	e59d2010	 ldr         r2, [sp, #0x10]
  0246c	e59f1098	 ldr         r1, [pc, #0x98]
  02470	e59f009c	 ldr         r0, [pc, #0x9C]
  02474	eb000000	 bl          NKDbgPrintfW
  02478	e3a03001	 mov         r3, #1
  0247c	e58d3000	 str         r3, [sp]
  02480	ea000001	 b           |$LN4@mcbsp_Rese@4|
  02484		 |$LN3@mcbsp_Rese@4|
  02484	e3a03000	 mov         r3, #0
  02488	e58d3000	 str         r3, [sp]
  0248c		 |$LN4@mcbsp_Rese@4|

; 1044 : 
; 1045 :     pDevice->shadowRegs.SPCR1 &= ~MCBSP_SPCR1_RRST_RSTCLR;

  0248c	e59d3010	 ldr         r3, [sp, #0x10]
  02490	e2833024	 add         r3, r3, #0x24
  02494	e5932000	 ldr         r2, [r3]
  02498	e3e03001	 mvn         r3, #1
  0249c	e0022003	 and         r2, r2, r3
  024a0	e59d3010	 ldr         r3, [sp, #0x10]
  024a4	e2833024	 add         r3, r3, #0x24
  024a8	e5832000	 str         r2, [r3]

; 1046 :     OUTREG32(&pDevice->pMcbspRegs->SPCR1, pDevice->shadowRegs.SPCR1);

  024ac	e59d3010	 ldr         r3, [sp, #0x10]
  024b0	e2831024	 add         r1, r3, #0x24
  024b4	e59d3010	 ldr         r3, [sp, #0x10]
  024b8	e283301c	 add         r3, r3, #0x1C
  024bc	e5933000	 ldr         r3, [r3]
  024c0	e2832014	 add         r2, r3, #0x14
  024c4	e5913000	 ldr         r3, [r1]
  024c8	e5823000	 str         r3, [r2]

; 1047 : 
; 1048 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S\r\n", __FUNCTION__));

  024cc	e59f303c	 ldr         r3, [pc, #0x3C]
  024d0	e5933440	 ldr         r3, [r3, #0x440]
  024d4	e3130004	 tst         r3, #4
  024d8	0a000005	 beq         |$LN5@mcbsp_Rese@4|
  024dc	e59f1028	 ldr         r1, [pc, #0x28]
  024e0	e59f0020	 ldr         r0, [pc, #0x20]
  024e4	eb000000	 bl          NKDbgPrintfW
  024e8	e3a03001	 mov         r3, #1
  024ec	e58d3004	 str         r3, [sp, #4]
  024f0	ea000001	 b           |$LN6@mcbsp_Rese@4|
  024f4		 |$LN5@mcbsp_Rese@4|
  024f4	e3a03000	 mov         r3, #0
  024f8	e58d3004	 str         r3, [sp, #4]
  024fc		 |$LN6@mcbsp_Rese@4|

; 1049 : }

  024fc	e28dd008	 add         sp, sp, #8
  02500	e89d6000	 ldmia       sp, {sp, lr}
  02504	e12fff1e	 bx          lr
  02508		 |$LN10@mcbsp_Rese@4|
  02508		 |$LN11@mcbsp_Rese@4|
  02508	00000000	 DCD         |??_C@_1BE@LFFACMJN@?$AAM?$AAC?$AAP?$AA?3?$AA?9?$AA?$CF?$AAS?$AA?$AN?$AA?6?$AA?$AA@|
  0250c		 |$LN12@mcbsp_Rese@4|
  0250c	00000000	 DCD         |??_C@_0BE@IGAEPBFJ@mcbsp_ResetReceiver?$AA@|
  02510		 |$LN13@mcbsp_Rese@4|
  02510	00000000	 DCD         |dpCurSettings|
  02514		 |$LN14@mcbsp_Rese@4|
  02514	00000000	 DCD         |??_C@_1CE@FCDKFBGI@?$AAM?$AAC?$AAP?$AA?3?$AA?$CL?$AA?$CF?$AAS?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  02518		 |$M37402|

			 ENDP  ; |mcbsp_ResetReceiver|

	EXPORT	|??_C@_0BF@IAOCAHLG@mcbsp_EnableReceiver?$AA@| [ DATA ] ; `string'
	EXPORT	|mcbsp_EnableReceiver|

  00070			 AREA	 |.pdata|, PDATA
|$T37418| DCD	|$LN9@mcbsp_Enab@3|
	DCD	0x40003304

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BF@IAOCAHLG@mcbsp_EnableReceiver?$AA@| DCB "mcbsp_EnableReceiver", 0x0 ; `string'
; Function compile flags: /Odtp

  02518			 AREA	 |.text|, CODE, ARM

  02518		 |mcbsp_EnableReceiver| PROC

; 1060 : {

  02518		 |$LN9@mcbsp_Enab@3|
  02518	e1a0c00d	 mov         r12, sp
  0251c	e92d0001	 stmdb       sp!, {r0}
  02520	e92d5000	 stmdb       sp!, {r12, lr}
  02524	e24dd008	 sub         sp, sp, #8
  02528		 |$M37415|

; 1061 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S(0x%08x)\r\n", __FUNCTION__, pDevice));

  02528	e59f30ac	 ldr         r3, [pc, #0xAC]
  0252c	e5933440	 ldr         r3, [r3, #0x440]
  02530	e3130004	 tst         r3, #4
  02534	0a000006	 beq         |$LN3@mcbsp_Enab@3|
  02538	e59d2010	 ldr         r2, [sp, #0x10]
  0253c	e59f1094	 ldr         r1, [pc, #0x94]
  02540	e59f0098	 ldr         r0, [pc, #0x98]
  02544	eb000000	 bl          NKDbgPrintfW
  02548	e3a03001	 mov         r3, #1
  0254c	e58d3000	 str         r3, [sp]
  02550	ea000001	 b           |$LN4@mcbsp_Enab@3|
  02554		 |$LN3@mcbsp_Enab@3|
  02554	e3a03000	 mov         r3, #0
  02558	e58d3000	 str         r3, [sp]
  0255c		 |$LN4@mcbsp_Enab@3|

; 1062 : 
; 1063 :     pDevice->shadowRegs.SPCR1 |= MCBSP_SPCR1_RRST_RSTCLR;

  0255c	e59d3010	 ldr         r3, [sp, #0x10]
  02560	e2833024	 add         r3, r3, #0x24
  02564	e5933000	 ldr         r3, [r3]
  02568	e3832001	 orr         r2, r3, #1
  0256c	e59d3010	 ldr         r3, [sp, #0x10]
  02570	e2833024	 add         r3, r3, #0x24
  02574	e5832000	 str         r2, [r3]

; 1064 :     OUTREG32(&pDevice->pMcbspRegs->SPCR1, pDevice->shadowRegs.SPCR1);

  02578	e59d3010	 ldr         r3, [sp, #0x10]
  0257c	e2831024	 add         r1, r3, #0x24
  02580	e59d3010	 ldr         r3, [sp, #0x10]
  02584	e283301c	 add         r3, r3, #0x1C
  02588	e5933000	 ldr         r3, [r3]
  0258c	e2832014	 add         r2, r3, #0x14
  02590	e5913000	 ldr         r3, [r1]
  02594	e5823000	 str         r3, [r2]

; 1065 : 
; 1066 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S\r\n", __FUNCTION__));

  02598	e59f303c	 ldr         r3, [pc, #0x3C]
  0259c	e5933440	 ldr         r3, [r3, #0x440]
  025a0	e3130004	 tst         r3, #4
  025a4	0a000005	 beq         |$LN5@mcbsp_Enab@3|
  025a8	e59f1028	 ldr         r1, [pc, #0x28]
  025ac	e59f0020	 ldr         r0, [pc, #0x20]
  025b0	eb000000	 bl          NKDbgPrintfW
  025b4	e3a03001	 mov         r3, #1
  025b8	e58d3004	 str         r3, [sp, #4]
  025bc	ea000001	 b           |$LN6@mcbsp_Enab@3|
  025c0		 |$LN5@mcbsp_Enab@3|
  025c0	e3a03000	 mov         r3, #0
  025c4	e58d3004	 str         r3, [sp, #4]
  025c8		 |$LN6@mcbsp_Enab@3|

; 1067 : }

  025c8	e28dd008	 add         sp, sp, #8
  025cc	e89d6000	 ldmia       sp, {sp, lr}
  025d0	e12fff1e	 bx          lr
  025d4		 |$LN10@mcbsp_Enab@3|
  025d4		 |$LN11@mcbsp_Enab@3|
  025d4	00000000	 DCD         |??_C@_1BE@LFFACMJN@?$AAM?$AAC?$AAP?$AA?3?$AA?9?$AA?$CF?$AAS?$AA?$AN?$AA?6?$AA?$AA@|
  025d8		 |$LN12@mcbsp_Enab@3|
  025d8	00000000	 DCD         |??_C@_0BF@IAOCAHLG@mcbsp_EnableReceiver?$AA@|
  025dc		 |$LN13@mcbsp_Enab@3|
  025dc	00000000	 DCD         |dpCurSettings|
  025e0		 |$LN14@mcbsp_Enab@3|
  025e0	00000000	 DCD         |??_C@_1CE@FCDKFBGI@?$AAM?$AAC?$AAP?$AA?3?$AA?$CL?$AA?$CF?$AAS?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  025e4		 |$M37416|

			 ENDP  ; |mcbsp_EnableReceiver|

	EXPORT	|??_C@_0BH@HEGLIEBG@mcbsp_ConfigI2SProfile?$AA@| [ DATA ] ; `string'
	EXPORT	|mcbsp_ConfigI2SProfile|

  00078			 AREA	 |.pdata|, PDATA
|$T37432| DCD	|$LN9@mcbsp_Conf@6|
	DCD	0x40009204

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BH@HEGLIEBG@mcbsp_ConfigI2SProfile?$AA@| DCB "mcbsp_ConfigI2SProf"
	DCB	"ile", 0x0				; `string'
; Function compile flags: /Odtp

  025e4			 AREA	 |.text|, CODE, ARM

  025e4		 |mcbsp_ConfigI2SProfile| PROC

; 1077 : {

  025e4		 |$LN9@mcbsp_Conf@6|
  025e4	e1a0c00d	 mov         r12, sp
  025e8	e92d0001	 stmdb       sp!, {r0}
  025ec	e92d5000	 stmdb       sp!, {r12, lr}
  025f0	e24dd008	 sub         sp, sp, #8
  025f4		 |$M37429|

; 1078 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S(0x%08x)\r\n", __FUNCTION__, pDevice));

  025f4	e59f3228	 ldr         r3, [pc, #0x228]
  025f8	e5933440	 ldr         r3, [r3, #0x440]
  025fc	e3130004	 tst         r3, #4
  02600	0a000006	 beq         |$LN3@mcbsp_Conf@6|
  02604	e59d2010	 ldr         r2, [sp, #0x10]
  02608	e59f1210	 ldr         r1, [pc, #0x210]
  0260c	e59f0214	 ldr         r0, [pc, #0x214]
  02610	eb000000	 bl          NKDbgPrintfW
  02614	e3a03001	 mov         r3, #1
  02618	e58d3000	 str         r3, [sp]
  0261c	ea000001	 b           |$LN4@mcbsp_Conf@6|
  02620		 |$LN3@mcbsp_Conf@6|
  02620	e3a03000	 mov         r3, #0
  02624	e58d3000	 str         r3, [sp]
  02628		 |$LN4@mcbsp_Conf@6|

; 1079 : 
; 1080 :     pDevice->shadowRegs.MCR1 = 0;

  02628	e59d3010	 ldr         r3, [sp, #0x10]
  0262c	e2832054	 add         r2, r3, #0x54
  02630	e3a03000	 mov         r3, #0
  02634	e5823000	 str         r3, [r2]

; 1081 :     pDevice->shadowRegs.MCR2 = 0;

  02638	e59d3010	 ldr         r3, [sp, #0x10]
  0263c	e2832058	 add         r2, r3, #0x58
  02640	e3a03000	 mov         r3, #0
  02644	e5823000	 str         r3, [r2]

; 1082 :     pDevice->shadowRegs.RCERA = 0;

  02648	e59d3010	 ldr         r3, [sp, #0x10]
  0264c	e283205c	 add         r2, r3, #0x5C
  02650	e3a03000	 mov         r3, #0
  02654	e5823000	 str         r3, [r2]

; 1083 :     pDevice->shadowRegs.XCERA = 0;

  02658	e59d3010	 ldr         r3, [sp, #0x10]
  0265c	e2832060	 add         r2, r3, #0x60
  02660	e3a03000	 mov         r3, #0
  02664	e5823000	 str         r3, [r2]

; 1084 : 
; 1085 :     OUTREG32(&pDevice->pMcbspRegs->MCR1, pDevice->shadowRegs.MCR1);

  02668	e59d3010	 ldr         r3, [sp, #0x10]
  0266c	e2831054	 add         r1, r3, #0x54
  02670	e59d3010	 ldr         r3, [sp, #0x10]
  02674	e283301c	 add         r3, r3, #0x1C
  02678	e5933000	 ldr         r3, [r3]
  0267c	e2832034	 add         r2, r3, #0x34
  02680	e5913000	 ldr         r3, [r1]
  02684	e5823000	 str         r3, [r2]

; 1086 :     OUTREG32(&pDevice->pMcbspRegs->MCR2, pDevice->shadowRegs.MCR1);

  02688	e59d3010	 ldr         r3, [sp, #0x10]
  0268c	e2831054	 add         r1, r3, #0x54
  02690	e59d3010	 ldr         r3, [sp, #0x10]
  02694	e283301c	 add         r3, r3, #0x1C
  02698	e5933000	 ldr         r3, [r3]
  0269c	e2832030	 add         r2, r3, #0x30
  026a0	e5913000	 ldr         r3, [r1]
  026a4	e5823000	 str         r3, [r2]

; 1087 :     OUTREG32(&pDevice->pMcbspRegs->RCERA, pDevice->shadowRegs.RCERA);

  026a8	e59d3010	 ldr         r3, [sp, #0x10]
  026ac	e283105c	 add         r1, r3, #0x5C
  026b0	e59d3010	 ldr         r3, [sp, #0x10]
  026b4	e283301c	 add         r3, r3, #0x1C
  026b8	e5933000	 ldr         r3, [r3]
  026bc	e2832038	 add         r2, r3, #0x38
  026c0	e5913000	 ldr         r3, [r1]
  026c4	e5823000	 str         r3, [r2]

; 1088 :     OUTREG32(&pDevice->pMcbspRegs->XCERA, pDevice->shadowRegs.XCERA);

  026c8	e59d3010	 ldr         r3, [sp, #0x10]
  026cc	e2831060	 add         r1, r3, #0x60
  026d0	e59d3010	 ldr         r3, [sp, #0x10]
  026d4	e283301c	 add         r3, r3, #0x1C
  026d8	e5933000	 ldr         r3, [r3]
  026dc	e2832040	 add         r2, r3, #0x40
  026e0	e5913000	 ldr         r3, [r1]
  026e4	e5823000	 str         r3, [r2]

; 1089 : 
; 1090 :     pDevice->shadowRegs.XCR1 |= MCBSP_FRAME_LENGTH(pDevice->pConfigInfo->TxFrameLength)|
; 1091 :                                MCBSP_WORD_LENGTH(pDevice->pConfigInfo->TxWordLength);

  026e8	e59d3010	 ldr         r3, [sp, #0x10]
  026ec	e2831034	 add         r1, r3, #0x34
  026f0	e59d3010	 ldr         r3, [sp, #0x10]
  026f4	e2833068	 add         r3, r3, #0x68
  026f8	e5933000	 ldr         r3, [r3]
  026fc	e2833030	 add         r3, r3, #0x30
  02700	e5933000	 ldr         r3, [r3]
  02704	e2433001	 sub         r3, r3, #1
  02708	e1a03403	 mov         r3, r3, lsl #8
  0270c	e2032c7f	 and         r2, r3, #0x7F, 24
  02710	e59d3010	 ldr         r3, [sp, #0x10]
  02714	e2833068	 add         r3, r3, #0x68
  02718	e5933000	 ldr         r3, [r3]
  0271c	e2833034	 add         r3, r3, #0x34
  02720	e5933000	 ldr         r3, [r3]
  02724	e1a03283	 mov         r3, r3, lsl #5
  02728	e20330e0	 and         r3, r3, #0xE0
  0272c	e1822003	 orr         r2, r2, r3
  02730	e5913000	 ldr         r3, [r1]
  02734	e1832002	 orr         r2, r3, r2
  02738	e59d3010	 ldr         r3, [sp, #0x10]
  0273c	e2833034	 add         r3, r3, #0x34
  02740	e5832000	 str         r2, [r3]

; 1092 :     OUTREG32(&pDevice->pMcbspRegs->XCR1, pDevice->shadowRegs.XCR1);

  02744	e59d3010	 ldr         r3, [sp, #0x10]
  02748	e2831034	 add         r1, r3, #0x34
  0274c	e59d3010	 ldr         r3, [sp, #0x10]
  02750	e283301c	 add         r3, r3, #0x1C
  02754	e5933000	 ldr         r3, [r3]
  02758	e2832024	 add         r2, r3, #0x24
  0275c	e5913000	 ldr         r3, [r1]
  02760	e5823000	 str         r3, [r2]

; 1093 : 
; 1094 :     pDevice->shadowRegs.RCR1 |= MCBSP_FRAME_LENGTH(pDevice->pConfigInfo->RxFrameLength)|
; 1095 :                                MCBSP_WORD_LENGTH(pDevice->pConfigInfo->RxWordLength);

  02764	e59d3010	 ldr         r3, [sp, #0x10]
  02768	e283102c	 add         r1, r3, #0x2C
  0276c	e59d3010	 ldr         r3, [sp, #0x10]
  02770	e2833068	 add         r3, r3, #0x68
  02774	e5933000	 ldr         r3, [r3]
  02778	e2833004	 add         r3, r3, #4
  0277c	e5933000	 ldr         r3, [r3]
  02780	e2433001	 sub         r3, r3, #1
  02784	e1a03403	 mov         r3, r3, lsl #8
  02788	e2032c7f	 and         r2, r3, #0x7F, 24
  0278c	e59d3010	 ldr         r3, [sp, #0x10]
  02790	e2833068	 add         r3, r3, #0x68
  02794	e5933000	 ldr         r3, [r3]
  02798	e2833008	 add         r3, r3, #8
  0279c	e5933000	 ldr         r3, [r3]
  027a0	e1a03283	 mov         r3, r3, lsl #5
  027a4	e20330e0	 and         r3, r3, #0xE0
  027a8	e1822003	 orr         r2, r2, r3
  027ac	e5913000	 ldr         r3, [r1]
  027b0	e1832002	 orr         r2, r3, r2
  027b4	e59d3010	 ldr         r3, [sp, #0x10]
  027b8	e283302c	 add         r3, r3, #0x2C
  027bc	e5832000	 str         r2, [r3]

; 1096 :     OUTREG32(&pDevice->pMcbspRegs->RCR1, pDevice->shadowRegs.RCR1);

  027c0	e59d3010	 ldr         r3, [sp, #0x10]
  027c4	e283102c	 add         r1, r3, #0x2C
  027c8	e59d3010	 ldr         r3, [sp, #0x10]
  027cc	e283301c	 add         r3, r3, #0x1C
  027d0	e5933000	 ldr         r3, [r3]
  027d4	e283201c	 add         r2, r3, #0x1C
  027d8	e5913000	 ldr         r3, [r1]
  027dc	e5823000	 str         r3, [r2]

; 1097 : 
; 1098 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S\r\n", __FUNCTION__));

  027e0	e59f303c	 ldr         r3, [pc, #0x3C]
  027e4	e5933440	 ldr         r3, [r3, #0x440]
  027e8	e3130004	 tst         r3, #4
  027ec	0a000005	 beq         |$LN5@mcbsp_Conf@6|
  027f0	e59f1028	 ldr         r1, [pc, #0x28]
  027f4	e59f0020	 ldr         r0, [pc, #0x20]
  027f8	eb000000	 bl          NKDbgPrintfW
  027fc	e3a03001	 mov         r3, #1
  02800	e58d3004	 str         r3, [sp, #4]
  02804	ea000001	 b           |$LN6@mcbsp_Conf@6|
  02808		 |$LN5@mcbsp_Conf@6|
  02808	e3a03000	 mov         r3, #0
  0280c	e58d3004	 str         r3, [sp, #4]
  02810		 |$LN6@mcbsp_Conf@6|

; 1099 : }

  02810	e28dd008	 add         sp, sp, #8
  02814	e89d6000	 ldmia       sp, {sp, lr}
  02818	e12fff1e	 bx          lr
  0281c		 |$LN10@mcbsp_Conf@6|
  0281c		 |$LN11@mcbsp_Conf@6|
  0281c	00000000	 DCD         |??_C@_1BE@LFFACMJN@?$AAM?$AAC?$AAP?$AA?3?$AA?9?$AA?$CF?$AAS?$AA?$AN?$AA?6?$AA?$AA@|
  02820		 |$LN12@mcbsp_Conf@6|
  02820	00000000	 DCD         |??_C@_0BH@HEGLIEBG@mcbsp_ConfigI2SProfile?$AA@|
  02824		 |$LN13@mcbsp_Conf@6|
  02824	00000000	 DCD         |dpCurSettings|
  02828		 |$LN14@mcbsp_Conf@6|
  02828	00000000	 DCD         |??_C@_1CE@FCDKFBGI@?$AAM?$AAC?$AAP?$AA?3?$AA?$CL?$AA?$CF?$AAS?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  0282c		 |$M37430|

			 ENDP  ; |mcbsp_ConfigI2SProfile|

	EXPORT	|mcbsp_ConfigTDMRxChannels|
	EXPORT	|mcbsp_ConfigTDMTxChannels|
	EXPORT	|??_C@_1HK@EKIGCECD@?$AAM?$AAC?$AAP?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAm?$AAc?$AAb?$AAs?$AAp?$AA_?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAT?$AAD?$AAM?$AAP?$AAr?$AAo?$AAf?$AAi@| [ DATA ] ; `string'
	EXPORT	|??_C@_0BH@IOFMGBOG@mcbsp_ConfigTDMProfile?$AA@| [ DATA ] ; `string'
	EXPORT	|mcbsp_ConfigTDMProfile|

  00080			 AREA	 |.pdata|, PDATA
|$T37448| DCD	|$LN15@mcbsp_Conf@7|
	DCD	0x4000c404

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HK@EKIGCECD@?$AAM?$AAC?$AAP?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAm?$AAc?$AAb?$AAs?$AAp?$AA_?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAT?$AAD?$AAM?$AAP?$AAr?$AAo?$AAf?$AAi@| DCB "M"
	DCB	0x0, "C", 0x0, "P", 0x0, ":", 0x0, " ", 0x0, "E", 0x0, "R"
	DCB	0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " ", 0x0, "m"
	DCB	0x0, "c", 0x0, "b", 0x0, "s", 0x0, "p", 0x0, "_", 0x0, "C"
	DCB	0x0, "o", 0x0, "n", 0x0, "f", 0x0, "i", 0x0, "g", 0x0, "T"
	DCB	0x0, "D", 0x0, "M", 0x0, "P", 0x0, "r", 0x0, "o", 0x0, "f"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, ":", 0x0, " ", 0x0, "P"
	DCB	0x0, "a", 0x0, "r", 0x0, "t", 0x0, "i", 0x0, "t", 0x0, "i"
	DCB	0x0, "o", 0x0, "n", 0x0, " ", 0x0, "M", 0x0, "o", 0x0, "d"
	DCB	0x0, "e", 0x0, " ", 0x0, "u", 0x0, "n", 0x0, "k", 0x0, "n"
	DCB	0x0, "o", 0x0, "w", 0x0, "n", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BH@IOFMGBOG@mcbsp_ConfigTDMProfile?$AA@| DCB "mcbsp_ConfigTDMProf"
	DCB	"ile", 0x0				; `string'
; Function compile flags: /Odtp

  0282c			 AREA	 |.text|, CODE, ARM

  0282c		 |mcbsp_ConfigTDMProfile| PROC

; 1109 : {

  0282c		 |$LN15@mcbsp_Conf@7|
  0282c	e1a0c00d	 mov         r12, sp
  02830	e92d0001	 stmdb       sp!, {r0}
  02834	e92d5000	 stmdb       sp!, {r12, lr}
  02838	e24dd010	 sub         sp, sp, #0x10
  0283c		 |$M37445|

; 1110 :     DWORD regVal = 0;

  0283c	e3a03000	 mov         r3, #0
  02840	e58d3000	 str         r3, [sp]

; 1111 : 
; 1112 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S(0x%08x)\r\n", __FUNCTION__, pDevice));

  02844	e59f32e4	 ldr         r3, [pc, #0x2E4]
  02848	e5933440	 ldr         r3, [r3, #0x440]
  0284c	e3130004	 tst         r3, #4
  02850	0a000006	 beq         |$LN7@mcbsp_Conf@7|
  02854	e59d2018	 ldr         r2, [sp, #0x18]
  02858	e59f12cc	 ldr         r1, [pc, #0x2CC]
  0285c	e59f02d4	 ldr         r0, [pc, #0x2D4]
  02860	eb000000	 bl          NKDbgPrintfW
  02864	e3a03001	 mov         r3, #1
  02868	e58d3004	 str         r3, [sp, #4]
  0286c	ea000001	 b           |$LN8@mcbsp_Conf@7|
  02870		 |$LN7@mcbsp_Conf@7|
  02870	e3a03000	 mov         r3, #0
  02874	e58d3004	 str         r3, [sp, #4]
  02878		 |$LN8@mcbsp_Conf@7|

; 1113 : 
; 1114 :     // Configure McBSP phase TDM profile should be configured in single phase
; 1115 :     // only, reason refer TRM McBSP TDM mode section.
; 1116 :     //
; 1117 :     regVal = INREG32(&pDevice->pMcbspRegs->XCR2);

  02878	e59d3018	 ldr         r3, [sp, #0x18]
  0287c	e283301c	 add         r3, r3, #0x1C
  02880	e5933000	 ldr         r3, [r3]
  02884	e2833020	 add         r3, r3, #0x20
  02888	e5933000	 ldr         r3, [r3]
  0288c	e58d3000	 str         r3, [sp]

; 1118 :     regVal |= MCBSP_PHASE_SINGLE;

  02890	e59d3000	 ldr         r3, [sp]
  02894	e58d3000	 str         r3, [sp]

; 1119 :     OUTREG32(&pDevice->pMcbspRegs->XCR2, regVal);

  02898	e59d3018	 ldr         r3, [sp, #0x18]
  0289c	e283301c	 add         r3, r3, #0x1C
  028a0	e5933000	 ldr         r3, [r3]
  028a4	e2832020	 add         r2, r3, #0x20
  028a8	e59d3000	 ldr         r3, [sp]
  028ac	e5823000	 str         r3, [r2]

; 1120 : 
; 1121 :     regVal = INREG32(&pDevice->pMcbspRegs->RCR2);

  028b0	e59d3018	 ldr         r3, [sp, #0x18]
  028b4	e283301c	 add         r3, r3, #0x1C
  028b8	e5933000	 ldr         r3, [r3]
  028bc	e2833018	 add         r3, r3, #0x18
  028c0	e5933000	 ldr         r3, [r3]
  028c4	e58d3000	 str         r3, [sp]

; 1122 :     regVal |= MCBSP_PHASE_SINGLE;

  028c8	e59d3000	 ldr         r3, [sp]
  028cc	e58d3000	 str         r3, [sp]

; 1123 :     OUTREG32(&pDevice->pMcbspRegs->RCR2, regVal);

  028d0	e59d3018	 ldr         r3, [sp, #0x18]
  028d4	e283301c	 add         r3, r3, #0x1C
  028d8	e5933000	 ldr         r3, [r3]
  028dc	e2832018	 add         r2, r3, #0x18
  028e0	e59d3000	 ldr         r3, [sp]
  028e4	e5823000	 str         r3, [r2]

; 1124 : 
; 1125 :     // Configure frame length and word length
; 1126 :     //
; 1127 :     regVal = (MCBSP_FRAME_LENGTH (pDevice->tdmWordsPerFrame) |
; 1128 :         MCBSP_WORD_LENGTH (kMcBSP_Word_Length_16));

  028e8	e59d3018	 ldr         r3, [sp, #0x18]
  028ec	e2833f4b	 add         r3, r3, #0x4B, 30
  028f0	e5933000	 ldr         r3, [r3]
  028f4	e2433001	 sub         r3, r3, #1
  028f8	e1a03403	 mov         r3, r3, lsl #8
  028fc	e2033c7f	 and         r3, r3, #0x7F, 24
  02900	e3833040	 orr         r3, r3, #0x40
  02904	e58d3000	 str         r3, [sp]

; 1129 :     OUTREG32(&pDevice->pMcbspRegs->XCR1, regVal);

  02908	e59d3018	 ldr         r3, [sp, #0x18]
  0290c	e283301c	 add         r3, r3, #0x1C
  02910	e5933000	 ldr         r3, [r3]
  02914	e2832024	 add         r2, r3, #0x24
  02918	e59d3000	 ldr         r3, [sp]
  0291c	e5823000	 str         r3, [r2]

; 1130 : 
; 1131 :     regVal = (MCBSP_FRAME_LENGTH (pDevice->tdmWordsPerFrame) |
; 1132 :         MCBSP_WORD_LENGTH (kMcBSP_Word_Length_16));

  02920	e59d3018	 ldr         r3, [sp, #0x18]
  02924	e2833f4b	 add         r3, r3, #0x4B, 30
  02928	e5933000	 ldr         r3, [r3]
  0292c	e2433001	 sub         r3, r3, #1
  02930	e1a03403	 mov         r3, r3, lsl #8
  02934	e2033c7f	 and         r3, r3, #0x7F, 24
  02938	e3833040	 orr         r3, r3, #0x40
  0293c	e58d3000	 str         r3, [sp]

; 1133 :     OUTREG32(&pDevice->pMcbspRegs->RCR1, regVal);

  02940	e59d3018	 ldr         r3, [sp, #0x18]
  02944	e283301c	 add         r3, r3, #0x1C
  02948	e5933000	 ldr         r3, [r3]
  0294c	e283201c	 add         r2, r3, #0x1C
  02950	e59d3000	 ldr         r3, [sp]
  02954	e5823000	 str         r3, [r2]

; 1134 : 
; 1135 :     // Configure partition mode, multichannel selection
; 1136 :     //
; 1137 :     if ( pDevice->partitionMode == kMcBSP_2PartitionMode)

  02958	e59d3018	 ldr         r3, [sp, #0x18]
  0295c	e2833e13	 add         r3, r3, #0x13, 28
  02960	e5933000	 ldr         r3, [r3]
  02964	e3530000	 cmp         r3, #0
  02968	1a000026	 bne         |$LN4@mcbsp_Conf@7|

; 1138 :         {
; 1139 :         // Rx partition mode and multichannel config
; 1140 :         //
; 1141 :         regVal = INREG32(&pDevice->pMcbspRegs->MCR1);

  0296c	e59d3018	 ldr         r3, [sp, #0x18]
  02970	e283301c	 add         r3, r3, #0x1C
  02974	e5933000	 ldr         r3, [r3]
  02978	e2833034	 add         r3, r3, #0x34
  0297c	e5933000	 ldr         r3, [r3]
  02980	e58d3000	 str         r3, [sp]

; 1142 : 
; 1143 :         regVal &= ~(MCBSP_PARTITION_MODE);

  02984	e59d2000	 ldr         r2, [sp]
  02988	e3e03c02	 mvn         r3, #2, 24
  0298c	e0023003	 and         r3, r2, r3
  02990	e58d3000	 str         r3, [sp]

; 1144 :         regVal |= (MCBSP_PARTITION_A_BLOCK(0) |
; 1145 :             MCBSP_PARTITION_B_BLOCK(0) |
; 1146 :             MCBSP_MCR1_RMCM_RX);

  02994	e59d3000	 ldr         r3, [sp]
  02998	e3833001	 orr         r3, r3, #1
  0299c	e58d3000	 str         r3, [sp]

; 1147 : 
; 1148 :         OUTREG32(&pDevice->pMcbspRegs->MCR1, regVal);

  029a0	e59d3018	 ldr         r3, [sp, #0x18]
  029a4	e283301c	 add         r3, r3, #0x1C
  029a8	e5933000	 ldr         r3, [r3]
  029ac	e2832034	 add         r2, r3, #0x34
  029b0	e59d3000	 ldr         r3, [sp]
  029b4	e5823000	 str         r3, [r2]

; 1149 : 
; 1150 :         // Tx partition mode and multichannel config
; 1151 :         //
; 1152 :         regVal = INREG32(&pDevice->pMcbspRegs->MCR2);

  029b8	e59d3018	 ldr         r3, [sp, #0x18]
  029bc	e283301c	 add         r3, r3, #0x1C
  029c0	e5933000	 ldr         r3, [r3]
  029c4	e2833030	 add         r3, r3, #0x30
  029c8	e5933000	 ldr         r3, [r3]
  029cc	e58d3000	 str         r3, [sp]

; 1153 : 
; 1154 :         regVal &= ~(MCBSP_PARTITION_MODE);

  029d0	e59d2000	 ldr         r2, [sp]
  029d4	e3e03c02	 mvn         r3, #2, 24
  029d8	e0023003	 and         r3, r2, r3
  029dc	e58d3000	 str         r3, [sp]

; 1155 :         regVal |= (MCBSP_PARTITION_A_BLOCK(0) |
; 1156 :             MCBSP_PARTITION_B_BLOCK(0) |
; 1157 :             MCBSP_MCR2_RMCM_TX(1));

  029e0	e59d3000	 ldr         r3, [sp]
  029e4	e3833001	 orr         r3, r3, #1
  029e8	e58d3000	 str         r3, [sp]

; 1158 : 
; 1159 :         OUTREG32(&pDevice->pMcbspRegs->MCR2, regVal);

  029ec	e59d3018	 ldr         r3, [sp, #0x18]
  029f0	e283301c	 add         r3, r3, #0x1C
  029f4	e5933000	 ldr         r3, [r3]
  029f8	e2832030	 add         r2, r3, #0x30
  029fc	e59d3000	 ldr         r3, [sp]
  02a00	e5823000	 str         r3, [r2]
  02a04	ea000034	 b           |$LN3@mcbsp_Conf@7|
  02a08		 |$LN4@mcbsp_Conf@7|

; 1160 :         }
; 1161 :     else if (pDevice->partitionMode == kMcBSP_8PartitionMode)

  02a08	e59d3018	 ldr         r3, [sp, #0x18]
  02a0c	e2833e13	 add         r3, r3, #0x13, 28
  02a10	e5933000	 ldr         r3, [r3]
  02a14	e3530001	 cmp         r3, #1
  02a18	1a000024	 bne         |$LN2@mcbsp_Conf@7|

; 1162 :         {
; 1163 :         // Rx partition mode and multichannel config
; 1164 :         //
; 1165 :         regVal = INREG32(&pDevice->pMcbspRegs->MCR1);

  02a1c	e59d3018	 ldr         r3, [sp, #0x18]
  02a20	e283301c	 add         r3, r3, #0x1C
  02a24	e5933000	 ldr         r3, [r3]
  02a28	e2833034	 add         r3, r3, #0x34
  02a2c	e5933000	 ldr         r3, [r3]
  02a30	e58d3000	 str         r3, [sp]

; 1166 : 
; 1167 :         regVal |= (MCBSP_PARTITION_MODE);

  02a34	e59d3000	 ldr         r3, [sp]
  02a38	e3833c02	 orr         r3, r3, #2, 24
  02a3c	e58d3000	 str         r3, [sp]

; 1168 :         regVal |= (MCBSP_PARTITION_A_BLOCK(0) |
; 1169 :             MCBSP_PARTITION_B_BLOCK(0) |
; 1170 :             MCBSP_MCR1_RMCM_RX);

  02a40	e59d3000	 ldr         r3, [sp]
  02a44	e3833001	 orr         r3, r3, #1
  02a48	e58d3000	 str         r3, [sp]

; 1171 : 
; 1172 :         OUTREG32(&pDevice->pMcbspRegs->MCR1, regVal);

  02a4c	e59d3018	 ldr         r3, [sp, #0x18]
  02a50	e283301c	 add         r3, r3, #0x1C
  02a54	e5933000	 ldr         r3, [r3]
  02a58	e2832034	 add         r2, r3, #0x34
  02a5c	e59d3000	 ldr         r3, [sp]
  02a60	e5823000	 str         r3, [r2]

; 1173 : 
; 1174 :         // Tx partition mode and multichannel config
; 1175 :         //
; 1176 :         regVal = INREG32(&pDevice->pMcbspRegs->MCR2);

  02a64	e59d3018	 ldr         r3, [sp, #0x18]
  02a68	e283301c	 add         r3, r3, #0x1C
  02a6c	e5933000	 ldr         r3, [r3]
  02a70	e2833030	 add         r3, r3, #0x30
  02a74	e5933000	 ldr         r3, [r3]
  02a78	e58d3000	 str         r3, [sp]

; 1177 : 
; 1178 :         regVal |= (MCBSP_PARTITION_MODE);

  02a7c	e59d3000	 ldr         r3, [sp]
  02a80	e3833c02	 orr         r3, r3, #2, 24
  02a84	e58d3000	 str         r3, [sp]

; 1179 :         regVal |= (MCBSP_PARTITION_A_BLOCK(0) |
; 1180 :             MCBSP_PARTITION_B_BLOCK(0) |
; 1181 :             MCBSP_MCR2_RMCM_TX(1));

  02a88	e59d3000	 ldr         r3, [sp]
  02a8c	e3833001	 orr         r3, r3, #1
  02a90	e58d3000	 str         r3, [sp]

; 1182 : 
; 1183 :         OUTREG32(&pDevice->pMcbspRegs->MCR2, regVal);

  02a94	e59d3018	 ldr         r3, [sp, #0x18]
  02a98	e283301c	 add         r3, r3, #0x1C
  02a9c	e5933000	 ldr         r3, [r3]
  02aa0	e2832030	 add         r2, r3, #0x30
  02aa4	e59d3000	 ldr         r3, [sp]
  02aa8	e5823000	 str         r3, [r2]

; 1184 :         }
; 1185 :     else

  02aac	ea00000a	 b           |$LN1@mcbsp_Conf@7|
  02ab0		 |$LN2@mcbsp_Conf@7|

; 1186 :         DEBUGMSG(ZONE_ERROR, (L"MCP: ERROR: mcbsp_ConfigTDMProfile: "
; 1187 :                 L"Partition Mode unknown\r\n"
; 1188 :                 ));

  02ab0	e59f3078	 ldr         r3, [pc, #0x78]
  02ab4	e5933440	 ldr         r3, [r3, #0x440]
  02ab8	e3130001	 tst         r3, #1
  02abc	0a000004	 beq         |$LN9@mcbsp_Conf@7|
  02ac0	e59f006c	 ldr         r0, [pc, #0x6C]
  02ac4	eb000000	 bl          NKDbgPrintfW
  02ac8	e3a03001	 mov         r3, #1
  02acc	e58d3008	 str         r3, [sp, #8]
  02ad0	ea000001	 b           |$LN10@mcbsp_Conf@7|
  02ad4		 |$LN9@mcbsp_Conf@7|
  02ad4	e3a03000	 mov         r3, #0
  02ad8	e58d3008	 str         r3, [sp, #8]
  02adc		 |$LN10@mcbsp_Conf@7|
  02adc		 |$LN1@mcbsp_Conf@7|
  02adc		 |$LN3@mcbsp_Conf@7|

; 1189 : 
; 1190 :     // Enable the requested channels for Tx/Rx
; 1191 :     //
; 1192 :     mcbsp_ConfigTDMTxChannels(pDevice);

  02adc	e59d0018	 ldr         r0, [sp, #0x18]
  02ae0	eb000000	 bl          mcbsp_ConfigTDMTxChannels

; 1193 :     mcbsp_ConfigTDMRxChannels(pDevice);

  02ae4	e59d0018	 ldr         r0, [sp, #0x18]
  02ae8	eb000000	 bl          mcbsp_ConfigTDMRxChannels

; 1194 : 
; 1195 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S\r\n", __FUNCTION__));

  02aec	e59f303c	 ldr         r3, [pc, #0x3C]
  02af0	e5933440	 ldr         r3, [r3, #0x440]
  02af4	e3130004	 tst         r3, #4
  02af8	0a000005	 beq         |$LN11@mcbsp_Conf@7|
  02afc	e59f1028	 ldr         r1, [pc, #0x28]
  02b00	e59f0020	 ldr         r0, [pc, #0x20]
  02b04	eb000000	 bl          NKDbgPrintfW
  02b08	e3a03001	 mov         r3, #1
  02b0c	e58d300c	 str         r3, [sp, #0xC]
  02b10	ea000001	 b           |$LN12@mcbsp_Conf@7|
  02b14		 |$LN11@mcbsp_Conf@7|
  02b14	e3a03000	 mov         r3, #0
  02b18	e58d300c	 str         r3, [sp, #0xC]
  02b1c		 |$LN12@mcbsp_Conf@7|

; 1196 : }

  02b1c	e28dd010	 add         sp, sp, #0x10
  02b20	e89d6000	 ldmia       sp, {sp, lr}
  02b24	e12fff1e	 bx          lr
  02b28		 |$LN16@mcbsp_Conf@7|
  02b28		 |$LN17@mcbsp_Conf@7|
  02b28	00000000	 DCD         |??_C@_1BE@LFFACMJN@?$AAM?$AAC?$AAP?$AA?3?$AA?9?$AA?$CF?$AAS?$AA?$AN?$AA?6?$AA?$AA@|
  02b2c		 |$LN18@mcbsp_Conf@7|
  02b2c	00000000	 DCD         |??_C@_0BH@IOFMGBOG@mcbsp_ConfigTDMProfile?$AA@|
  02b30		 |$LN19@mcbsp_Conf@7|
  02b30	00000000	 DCD         |dpCurSettings|
  02b34		 |$LN20@mcbsp_Conf@7|
  02b34	00000000	 DCD         |??_C@_1HK@EKIGCECD@?$AAM?$AAC?$AAP?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAm?$AAc?$AAb?$AAs?$AAp?$AA_?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAT?$AAD?$AAM?$AAP?$AAr?$AAo?$AAf?$AAi@|
  02b38		 |$LN21@mcbsp_Conf@7|
  02b38	00000000	 DCD         |??_C@_1CE@FCDKFBGI@?$AAM?$AAC?$AAP?$AA?3?$AA?$CL?$AA?$CF?$AAS?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  02b3c		 |$M37446|

			 ENDP  ; |mcbsp_ConfigTDMProfile|

	EXPORT	|??_C@_1IC@CNDLDIPG@?$AAM?$AAC?$AAP?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAm?$AAc?$AAb?$AAs?$AAp?$AA_?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAT?$AAD?$AAM?$AAT?$AAx?$AAC?$AAh?$AAa@| [ DATA ] ; `string'
	EXPORT	|??_C@_0BK@CFDAKKFG@mcbsp_ConfigTDMTxChannels?$AA@| [ DATA ] ; `string'
	IMPORT	|__rt_udiv|

  00088			 AREA	 |.pdata|, PDATA
|$T37468| DCD	|$LN27@mcbsp_Conf@8|
	DCD	0x40015604

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IC@CNDLDIPG@?$AAM?$AAC?$AAP?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAm?$AAc?$AAb?$AAs?$AAp?$AA_?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAT?$AAD?$AAM?$AAT?$AAx?$AAC?$AAh?$AAa@| DCB "M"
	DCB	0x0, "C", 0x0, "P", 0x0, ":", 0x0, " ", 0x0, "E", 0x0, "R"
	DCB	0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " ", 0x0, "m"
	DCB	0x0, "c", 0x0, "b", 0x0, "s", 0x0, "p", 0x0, "_", 0x0, "C"
	DCB	0x0, "o", 0x0, "n", 0x0, "f", 0x0, "i", 0x0, "g", 0x0, "T"
	DCB	0x0, "D", 0x0, "M", 0x0, "T", 0x0, "x", 0x0, "C", 0x0, "h"
	DCB	0x0, "a", 0x0, "n", 0x0, "n", 0x0, "e", 0x0, "l", 0x0, "s"
	DCB	0x0, ":", 0x0, " ", 0x0, "I", 0x0, "n", 0x0, "v", 0x0, "a"
	DCB	0x0, "l", 0x0, "i", 0x0, "d", 0x0, " ", 0x0, "C", 0x0, "h"
	DCB	0x0, "a", 0x0, "n", 0x0, "n", 0x0, "e", 0x0, "l", 0x0, " "
	DCB	0x0, "R", 0x0, "e", 0x0, "q", 0x0, "u", 0x0, "e", 0x0, "s"
	DCB	0x0, "t", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BK@CFDAKKFG@mcbsp_ConfigTDMTxChannels?$AA@| DCB "mcbsp_ConfigTDMT"
	DCB	"xChannels", 0x0			; `string'
; Function compile flags: /Odtp

  02b3c			 AREA	 |.text|, CODE, ARM

  02b3c		 |mcbsp_ConfigTDMTxChannels| PROC

; 1206 : {

  02b3c		 |$LN27@mcbsp_Conf@8|
  02b3c	e1a0c00d	 mov         r12, sp
  02b40	e92d0001	 stmdb       sp!, {r0}
  02b44	e92d5000	 stmdb       sp!, {r12, lr}
  02b48	e24dd01c	 sub         sp, sp, #0x1C
  02b4c		 |$M37465|

; 1207 :     DWORD channelToEnable = 0;

  02b4c	e3a03000	 mov         r3, #0
  02b50	e58d3004	 str         r3, [sp, #4]

; 1208 :     UINT  nCount = 0;

  02b54	e3a03000	 mov         r3, #0
  02b58	e58d3000	 str         r3, [sp]

; 1209 :     DWORD regVal = 0;

  02b5c	e3a03000	 mov         r3, #0
  02b60	e58d3008	 str         r3, [sp, #8]

; 1210 : 
; 1211 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S(0x%08x)\r\n", __FUNCTION__, pDevice));

  02b64	e59f351c	 ldr         r3, [pc, #0x51C]
  02b68	e5933440	 ldr         r3, [r3, #0x440]
  02b6c	e3130004	 tst         r3, #4
  02b70	0a000006	 beq         |$LN17@mcbsp_Conf@8|
  02b74	e59d2024	 ldr         r2, [sp, #0x24]
  02b78	e59f1504	 ldr         r1, [pc, #0x504]
  02b7c	e59f050c	 ldr         r0, [pc, #0x50C]
  02b80	eb000000	 bl          NKDbgPrintfW
  02b84	e3a03001	 mov         r3, #1
  02b88	e58d300c	 str         r3, [sp, #0xC]
  02b8c	ea000001	 b           |$LN18@mcbsp_Conf@8|
  02b90		 |$LN17@mcbsp_Conf@8|
  02b90	e3a03000	 mov         r3, #0
  02b94	e58d300c	 str         r3, [sp, #0xC]
  02b98		 |$LN18@mcbsp_Conf@8|

; 1212 : 
; 1213 :     // Channel selection among the available 128 channels
; 1214 :     // which is distributed equally among 8 blocks.
; 1215 :     //
; 1216 :     for (nCount= 0; nCount < pDevice->numOfTxChannels; nCount++)

  02b98	e3a03000	 mov         r3, #0
  02b9c	e58d3000	 str         r3, [sp]
  02ba0	ea000002	 b           |$LN14@mcbsp_Conf@8|
  02ba4		 |$LN13@mcbsp_Conf@8|
  02ba4	e59d3000	 ldr         r3, [sp]
  02ba8	e2833001	 add         r3, r3, #1
  02bac	e58d3000	 str         r3, [sp]
  02bb0		 |$LN14@mcbsp_Conf@8|
  02bb0	e59d3024	 ldr         r3, [sp, #0x24]
  02bb4	e2833f4d	 add         r3, r3, #0x4D, 30
  02bb8	e59d2000	 ldr         r2, [sp]
  02bbc	e5933000	 ldr         r3, [r3]
  02bc0	e1520003	 cmp         r2, r3
  02bc4	2a00011e	 bcs         |$LN12@mcbsp_Conf@8|

; 1217 :         {
; 1218 :         switch ((pDevice->requestedTxChannels[nCount]) / MAX_CHANNEL_PER_BLOCK)

  02bc8	e59d3024	 ldr         r3, [sp, #0x24]
  02bcc	e2831f4e	 add         r1, r3, #0x4E, 30
  02bd0	e59d2000	 ldr         r2, [sp]
  02bd4	e3a03004	 mov         r3, #4
  02bd8	e0030392	 mul         r3, r2, r3
  02bdc	e0813003	 add         r3, r1, r3
  02be0	e5931000	 ldr         r1, [r3]
  02be4	e3a00010	 mov         r0, #0x10
  02be8	eb000000	 bl          __rt_udiv
  02bec	e58d0010	 str         r0, [sp, #0x10]
  02bf0	e59d3010	 ldr         r3, [sp, #0x10]
  02bf4	e3530040	 cmp         r3, #0x40
  02bf8	8a000013	 bhi         |$LN21@mcbsp_Conf@8|
  02bfc	e59d3010	 ldr         r3, [sp, #0x10]
  02c00	e3530040	 cmp         r3, #0x40
  02c04	0a00008e	 beq         |$LN5@mcbsp_Conf@8|
  02c08	e59d3010	 ldr         r3, [sp, #0x10]
  02c0c	e3530020	 cmp         r3, #0x20
  02c10	8a000009	 bhi         |$LN22@mcbsp_Conf@8|
  02c14	e59d3010	 ldr         r3, [sp, #0x10]
  02c18	e3530020	 cmp         r3, #0x20
  02c1c	0a00004e	 beq         |$LN7@mcbsp_Conf@8|
  02c20	e59d3010	 ldr         r3, [sp, #0x10]
  02c24	e3530000	 cmp         r3, #0
  02c28	0a000011	 beq         |$LN9@mcbsp_Conf@8|
  02c2c	e59d3010	 ldr         r3, [sp, #0x10]
  02c30	e3530010	 cmp         r3, #0x10
  02c34	0a00002b	 beq         |$LN8@mcbsp_Conf@8|
  02c38	ea0000f5	 b           |$LN1@mcbsp_Conf@8|
  02c3c		 |$LN22@mcbsp_Conf@8|
  02c3c	e59d3010	 ldr         r3, [sp, #0x10]
  02c40	e3530030	 cmp         r3, #0x30
  02c44	0a000061	 beq         |$LN6@mcbsp_Conf@8|
  02c48	ea0000f1	 b           |$LN1@mcbsp_Conf@8|
  02c4c		 |$LN21@mcbsp_Conf@8|
  02c4c	e59d3010	 ldr         r3, [sp, #0x10]
  02c50	e3530050	 cmp         r3, #0x50
  02c54	0a000097	 beq         |$LN4@mcbsp_Conf@8|
  02c58	e59d3010	 ldr         r3, [sp, #0x10]
  02c5c	e3530060	 cmp         r3, #0x60
  02c60	0a0000b1	 beq         |$LN3@mcbsp_Conf@8|
  02c64	e59d3010	 ldr         r3, [sp, #0x10]
  02c68	e3530070	 cmp         r3, #0x70
  02c6c	0a0000cb	 beq         |$LN2@mcbsp_Conf@8|
  02c70	ea0000e7	 b           |$LN1@mcbsp_Conf@8|
  02c74		 |$LN9@mcbsp_Conf@8|

; 1219 :             {
; 1220 :             case kMcBSP_Block0:
; 1221 :                 channelToEnable = pDevice->requestedTxChannels[nCount] %
; 1222 :                     (kMcBSP_Block0 + MAX_CHANNEL_PER_BLOCK);

  02c74	e59d3024	 ldr         r3, [sp, #0x24]
  02c78	e2831f4e	 add         r1, r3, #0x4E, 30
  02c7c	e59d2000	 ldr         r2, [sp]
  02c80	e3a03004	 mov         r3, #4
  02c84	e0030392	 mul         r3, r2, r3
  02c88	e0813003	 add         r3, r1, r3
  02c8c	e5931000	 ldr         r1, [r3]
  02c90	e3a00010	 mov         r0, #0x10
  02c94	eb000000	 bl          __rt_udiv
  02c98	e58d1004	 str         r1, [sp, #4]

; 1223 : 
; 1224 :                 regVal = INREG32(&pDevice->pMcbspRegs->XCERA);

  02c9c	e59d3024	 ldr         r3, [sp, #0x24]
  02ca0	e283301c	 add         r3, r3, #0x1C
  02ca4	e5933000	 ldr         r3, [r3]
  02ca8	e2833040	 add         r3, r3, #0x40
  02cac	e5933000	 ldr         r3, [r3]
  02cb0	e58d3008	 str         r3, [sp, #8]

; 1225 :                 regVal |= (1<<channelToEnable);

  02cb4	e59d2004	 ldr         r2, [sp, #4]
  02cb8	e3a03001	 mov         r3, #1
  02cbc	e1a02213	 mov         r2, r3, lsl r2
  02cc0	e59d3008	 ldr         r3, [sp, #8]
  02cc4	e1833002	 orr         r3, r3, r2
  02cc8	e58d3008	 str         r3, [sp, #8]

; 1226 :                 OUTREG32(&pDevice->pMcbspRegs->XCERA, regVal);

  02ccc	e59d3024	 ldr         r3, [sp, #0x24]
  02cd0	e283301c	 add         r3, r3, #0x1C
  02cd4	e5933000	 ldr         r3, [r3]
  02cd8	e2832040	 add         r2, r3, #0x40
  02cdc	e59d3008	 ldr         r3, [sp, #8]
  02ce0	e5823000	 str         r3, [r2]

; 1227 :                 break;

  02ce4	ea0000d5	 b           |$LN10@mcbsp_Conf@8|
  02ce8		 |$LN8@mcbsp_Conf@8|

; 1228 : 
; 1229 :             case kMcBSP_Block1:
; 1230 :                 channelToEnable = pDevice->requestedTxChannels[nCount] %
; 1231 :                     (kMcBSP_Block1 + MAX_CHANNEL_PER_BLOCK);

  02ce8	e59d3024	 ldr         r3, [sp, #0x24]
  02cec	e2831f4e	 add         r1, r3, #0x4E, 30
  02cf0	e59d2000	 ldr         r2, [sp]
  02cf4	e3a03004	 mov         r3, #4
  02cf8	e0030392	 mul         r3, r2, r3
  02cfc	e0813003	 add         r3, r1, r3
  02d00	e5931000	 ldr         r1, [r3]
  02d04	e3a00020	 mov         r0, #0x20
  02d08	eb000000	 bl          __rt_udiv
  02d0c	e58d1004	 str         r1, [sp, #4]

; 1232 : 
; 1233 :                 regVal = INREG32(&pDevice->pMcbspRegs->XCERB);

  02d10	e59d3024	 ldr         r3, [sp, #0x24]
  02d14	e283301c	 add         r3, r3, #0x1C
  02d18	e5933000	 ldr         r3, [r3]
  02d1c	e2833044	 add         r3, r3, #0x44
  02d20	e5933000	 ldr         r3, [r3]
  02d24	e58d3008	 str         r3, [sp, #8]

; 1234 :                 regVal |= (1<<channelToEnable);

  02d28	e59d2004	 ldr         r2, [sp, #4]
  02d2c	e3a03001	 mov         r3, #1
  02d30	e1a02213	 mov         r2, r3, lsl r2
  02d34	e59d3008	 ldr         r3, [sp, #8]
  02d38	e1833002	 orr         r3, r3, r2
  02d3c	e58d3008	 str         r3, [sp, #8]

; 1235 :                 OUTREG32(&pDevice->pMcbspRegs->XCERB, regVal);

  02d40	e59d3024	 ldr         r3, [sp, #0x24]
  02d44	e283301c	 add         r3, r3, #0x1C
  02d48	e5933000	 ldr         r3, [r3]
  02d4c	e2832044	 add         r2, r3, #0x44
  02d50	e59d3008	 ldr         r3, [sp, #8]
  02d54	e5823000	 str         r3, [r2]

; 1236 :                 break;

  02d58	ea0000b8	 b           |$LN10@mcbsp_Conf@8|
  02d5c		 |$LN7@mcbsp_Conf@8|

; 1237 : 
; 1238 :             case kMcBSP_Block2:
; 1239 :                 channelToEnable = pDevice->requestedTxChannels[nCount] %
; 1240 :                     (kMcBSP_Block2 + MAX_CHANNEL_PER_BLOCK);

  02d5c	e59d3024	 ldr         r3, [sp, #0x24]
  02d60	e2831f4e	 add         r1, r3, #0x4E, 30
  02d64	e59d2000	 ldr         r2, [sp]
  02d68	e3a03004	 mov         r3, #4
  02d6c	e0030392	 mul         r3, r2, r3
  02d70	e0813003	 add         r3, r1, r3
  02d74	e5931000	 ldr         r1, [r3]
  02d78	e3a00030	 mov         r0, #0x30
  02d7c	eb000000	 bl          __rt_udiv
  02d80	e58d1004	 str         r1, [sp, #4]

; 1241 : 
; 1242 :                 regVal = INREG32(&pDevice->pMcbspRegs->XCERC);

  02d84	e59d3024	 ldr         r3, [sp, #0x24]
  02d88	e283301c	 add         r3, r3, #0x1C
  02d8c	e5933000	 ldr         r3, [r3]
  02d90	e2833054	 add         r3, r3, #0x54
  02d94	e5933000	 ldr         r3, [r3]
  02d98	e58d3008	 str         r3, [sp, #8]

; 1243 :                 regVal |= (1<<channelToEnable);

  02d9c	e59d2004	 ldr         r2, [sp, #4]
  02da0	e3a03001	 mov         r3, #1
  02da4	e1a02213	 mov         r2, r3, lsl r2
  02da8	e59d3008	 ldr         r3, [sp, #8]
  02dac	e1833002	 orr         r3, r3, r2
  02db0	e58d3008	 str         r3, [sp, #8]

; 1244 :                 OUTREG32(&pDevice->pMcbspRegs->XCERC, regVal);

  02db4	e59d3024	 ldr         r3, [sp, #0x24]
  02db8	e283301c	 add         r3, r3, #0x1C
  02dbc	e5933000	 ldr         r3, [r3]
  02dc0	e2832054	 add         r2, r3, #0x54
  02dc4	e59d3008	 ldr         r3, [sp, #8]
  02dc8	e5823000	 str         r3, [r2]

; 1245 :                 break;

  02dcc	ea00009b	 b           |$LN10@mcbsp_Conf@8|
  02dd0		 |$LN6@mcbsp_Conf@8|

; 1246 : 
; 1247 :             case kMcBSP_Block3:
; 1248 :                 channelToEnable = pDevice->requestedTxChannels[nCount] %
; 1249 :                     (kMcBSP_Block3 + MAX_CHANNEL_PER_BLOCK);

  02dd0	e59d3024	 ldr         r3, [sp, #0x24]
  02dd4	e2831f4e	 add         r1, r3, #0x4E, 30
  02dd8	e59d2000	 ldr         r2, [sp]
  02ddc	e3a03004	 mov         r3, #4
  02de0	e0030392	 mul         r3, r2, r3
  02de4	e0813003	 add         r3, r1, r3
  02de8	e5931000	 ldr         r1, [r3]
  02dec	e3a00040	 mov         r0, #0x40
  02df0	eb000000	 bl          __rt_udiv
  02df4	e58d1004	 str         r1, [sp, #4]

; 1250 : 
; 1251 :                 regVal = INREG32(&pDevice->pMcbspRegs->XCERD);

  02df8	e59d3024	 ldr         r3, [sp, #0x24]
  02dfc	e283301c	 add         r3, r3, #0x1C
  02e00	e5933000	 ldr         r3, [r3]
  02e04	e2833058	 add         r3, r3, #0x58
  02e08	e5933000	 ldr         r3, [r3]
  02e0c	e58d3008	 str         r3, [sp, #8]

; 1252 :                 regVal |= (1<<channelToEnable);

  02e10	e59d2004	 ldr         r2, [sp, #4]
  02e14	e3a03001	 mov         r3, #1
  02e18	e1a02213	 mov         r2, r3, lsl r2
  02e1c	e59d3008	 ldr         r3, [sp, #8]
  02e20	e1833002	 orr         r3, r3, r2
  02e24	e58d3008	 str         r3, [sp, #8]

; 1253 :                 OUTREG32(&pDevice->pMcbspRegs->XCERD, regVal);

  02e28	e59d3024	 ldr         r3, [sp, #0x24]
  02e2c	e283301c	 add         r3, r3, #0x1C
  02e30	e5933000	 ldr         r3, [r3]
  02e34	e2832058	 add         r2, r3, #0x58
  02e38	e59d3008	 ldr         r3, [sp, #8]
  02e3c	e5823000	 str         r3, [r2]

; 1254 :                 break;

  02e40	ea00007e	 b           |$LN10@mcbsp_Conf@8|
  02e44		 |$LN5@mcbsp_Conf@8|

; 1255 : 
; 1256 :             case kMcBSP_Block4:
; 1257 :                 channelToEnable = pDevice->requestedTxChannels[nCount] %
; 1258 :                     (kMcBSP_Block4 + MAX_CHANNEL_PER_BLOCK);

  02e44	e59d3024	 ldr         r3, [sp, #0x24]
  02e48	e2831f4e	 add         r1, r3, #0x4E, 30
  02e4c	e59d2000	 ldr         r2, [sp]
  02e50	e3a03004	 mov         r3, #4
  02e54	e0030392	 mul         r3, r2, r3
  02e58	e0813003	 add         r3, r1, r3
  02e5c	e5931000	 ldr         r1, [r3]
  02e60	e3a00050	 mov         r0, #0x50
  02e64	eb000000	 bl          __rt_udiv
  02e68	e58d1004	 str         r1, [sp, #4]

; 1259 : 
; 1260 :                 regVal = INREG32(&pDevice->pMcbspRegs->XCERE);

  02e6c	e59d3024	 ldr         r3, [sp, #0x24]
  02e70	e283301c	 add         r3, r3, #0x1C
  02e74	e5933000	 ldr         r3, [r3]
  02e78	e2833064	 add         r3, r3, #0x64
  02e7c	e5933000	 ldr         r3, [r3]
  02e80	e58d3008	 str         r3, [sp, #8]

; 1261 :                 regVal |= (1<<channelToEnable);

  02e84	e59d2004	 ldr         r2, [sp, #4]
  02e88	e3a03001	 mov         r3, #1
  02e8c	e1a02213	 mov         r2, r3, lsl r2
  02e90	e59d3008	 ldr         r3, [sp, #8]
  02e94	e1833002	 orr         r3, r3, r2
  02e98	e58d3008	 str         r3, [sp, #8]

; 1262 :                 OUTREG32(&pDevice->pMcbspRegs->XCERE, regVal);

  02e9c	e59d3024	 ldr         r3, [sp, #0x24]
  02ea0	e283301c	 add         r3, r3, #0x1C
  02ea4	e5933000	 ldr         r3, [r3]
  02ea8	e2832064	 add         r2, r3, #0x64
  02eac	e59d3008	 ldr         r3, [sp, #8]
  02eb0	e5823000	 str         r3, [r2]

; 1263 :                 break;

  02eb4	ea000061	 b           |$LN10@mcbsp_Conf@8|
  02eb8		 |$LN4@mcbsp_Conf@8|

; 1264 : 
; 1265 :             case kMcBSP_Block5:
; 1266 :                 channelToEnable = pDevice->requestedTxChannels[nCount] %
; 1267 :                     (kMcBSP_Block5 + MAX_CHANNEL_PER_BLOCK);

  02eb8	e59d3024	 ldr         r3, [sp, #0x24]
  02ebc	e2831f4e	 add         r1, r3, #0x4E, 30
  02ec0	e59d2000	 ldr         r2, [sp]
  02ec4	e3a03004	 mov         r3, #4
  02ec8	e0030392	 mul         r3, r2, r3
  02ecc	e0813003	 add         r3, r1, r3
  02ed0	e5931000	 ldr         r1, [r3]
  02ed4	e3a00060	 mov         r0, #0x60
  02ed8	eb000000	 bl          __rt_udiv
  02edc	e58d1004	 str         r1, [sp, #4]

; 1268 : 
; 1269 :                 regVal = INREG32(&pDevice->pMcbspRegs->XCERF);

  02ee0	e59d3024	 ldr         r3, [sp, #0x24]
  02ee4	e283301c	 add         r3, r3, #0x1C
  02ee8	e5933000	 ldr         r3, [r3]
  02eec	e2833068	 add         r3, r3, #0x68
  02ef0	e5933000	 ldr         r3, [r3]
  02ef4	e58d3008	 str         r3, [sp, #8]

; 1270 :                 regVal |= (1<<channelToEnable);

  02ef8	e59d2004	 ldr         r2, [sp, #4]
  02efc	e3a03001	 mov         r3, #1
  02f00	e1a02213	 mov         r2, r3, lsl r2
  02f04	e59d3008	 ldr         r3, [sp, #8]
  02f08	e1833002	 orr         r3, r3, r2
  02f0c	e58d3008	 str         r3, [sp, #8]

; 1271 :                 OUTREG32(&pDevice->pMcbspRegs->XCERF, regVal);

  02f10	e59d3024	 ldr         r3, [sp, #0x24]
  02f14	e283301c	 add         r3, r3, #0x1C
  02f18	e5933000	 ldr         r3, [r3]
  02f1c	e2832068	 add         r2, r3, #0x68
  02f20	e59d3008	 ldr         r3, [sp, #8]
  02f24	e5823000	 str         r3, [r2]

; 1272 :                 break;

  02f28	ea000044	 b           |$LN10@mcbsp_Conf@8|
  02f2c		 |$LN3@mcbsp_Conf@8|

; 1273 : 
; 1274 :             case kMcBSP_Block6:
; 1275 :                 channelToEnable = pDevice->requestedTxChannels[nCount] %
; 1276 :                     (kMcBSP_Block6 + MAX_CHANNEL_PER_BLOCK);

  02f2c	e59d3024	 ldr         r3, [sp, #0x24]
  02f30	e2831f4e	 add         r1, r3, #0x4E, 30
  02f34	e59d2000	 ldr         r2, [sp]
  02f38	e3a03004	 mov         r3, #4
  02f3c	e0030392	 mul         r3, r2, r3
  02f40	e0813003	 add         r3, r1, r3
  02f44	e5931000	 ldr         r1, [r3]
  02f48	e3a00070	 mov         r0, #0x70
  02f4c	eb000000	 bl          __rt_udiv
  02f50	e58d1004	 str         r1, [sp, #4]

; 1277 : 
; 1278 :                 regVal = INREG32(&pDevice->pMcbspRegs->XCERG);

  02f54	e59d3024	 ldr         r3, [sp, #0x24]
  02f58	e283301c	 add         r3, r3, #0x1C
  02f5c	e5933000	 ldr         r3, [r3]
  02f60	e2833074	 add         r3, r3, #0x74
  02f64	e5933000	 ldr         r3, [r3]
  02f68	e58d3008	 str         r3, [sp, #8]

; 1279 :                 regVal |= (1<<channelToEnable);

  02f6c	e59d2004	 ldr         r2, [sp, #4]
  02f70	e3a03001	 mov         r3, #1
  02f74	e1a02213	 mov         r2, r3, lsl r2
  02f78	e59d3008	 ldr         r3, [sp, #8]
  02f7c	e1833002	 orr         r3, r3, r2
  02f80	e58d3008	 str         r3, [sp, #8]

; 1280 :                 OUTREG32(&pDevice->pMcbspRegs->XCERG, regVal);

  02f84	e59d3024	 ldr         r3, [sp, #0x24]
  02f88	e283301c	 add         r3, r3, #0x1C
  02f8c	e5933000	 ldr         r3, [r3]
  02f90	e2832074	 add         r2, r3, #0x74
  02f94	e59d3008	 ldr         r3, [sp, #8]
  02f98	e5823000	 str         r3, [r2]

; 1281 :                 break;

  02f9c	ea000027	 b           |$LN10@mcbsp_Conf@8|
  02fa0		 |$LN2@mcbsp_Conf@8|

; 1282 : 
; 1283 :             case kMcBSP_Block7:
; 1284 :                 channelToEnable = pDevice->requestedTxChannels[nCount] %
; 1285 :                     (kMcBSP_Block7 + MAX_CHANNEL_PER_BLOCK);

  02fa0	e59d3024	 ldr         r3, [sp, #0x24]
  02fa4	e2831f4e	 add         r1, r3, #0x4E, 30
  02fa8	e59d2000	 ldr         r2, [sp]
  02fac	e3a03004	 mov         r3, #4
  02fb0	e0030392	 mul         r3, r2, r3
  02fb4	e0813003	 add         r3, r1, r3
  02fb8	e5931000	 ldr         r1, [r3]
  02fbc	e3a00080	 mov         r0, #0x80
  02fc0	eb000000	 bl          __rt_udiv
  02fc4	e58d1004	 str         r1, [sp, #4]

; 1286 : 
; 1287 :                 regVal = INREG32(&pDevice->pMcbspRegs->XCERH);

  02fc8	e59d3024	 ldr         r3, [sp, #0x24]
  02fcc	e283301c	 add         r3, r3, #0x1C
  02fd0	e5933000	 ldr         r3, [r3]
  02fd4	e2833078	 add         r3, r3, #0x78
  02fd8	e5933000	 ldr         r3, [r3]
  02fdc	e58d3008	 str         r3, [sp, #8]

; 1288 :                 regVal |= (1<<channelToEnable);

  02fe0	e59d2004	 ldr         r2, [sp, #4]
  02fe4	e3a03001	 mov         r3, #1
  02fe8	e1a02213	 mov         r2, r3, lsl r2
  02fec	e59d3008	 ldr         r3, [sp, #8]
  02ff0	e1833002	 orr         r3, r3, r2
  02ff4	e58d3008	 str         r3, [sp, #8]

; 1289 :                 OUTREG32(&pDevice->pMcbspRegs->XCERH, regVal);

  02ff8	e59d3024	 ldr         r3, [sp, #0x24]
  02ffc	e283301c	 add         r3, r3, #0x1C
  03000	e5933000	 ldr         r3, [r3]
  03004	e2832078	 add         r2, r3, #0x78
  03008	e59d3008	 ldr         r3, [sp, #8]
  0300c	e5823000	 str         r3, [r2]

; 1290 :                 break;

  03010	ea00000a	 b           |$LN10@mcbsp_Conf@8|
  03014		 |$LN1@mcbsp_Conf@8|

; 1291 : 
; 1292 :             default:
; 1293 :                 DEBUGMSG(ZONE_ERROR, (L"MCP: ERROR: mcbsp_ConfigTDMTxChannels: "
; 1294 :                     L"Invalid Channel Request\r\n"
; 1295 :                     ));

  03014	e59f306c	 ldr         r3, [pc, #0x6C]
  03018	e5933440	 ldr         r3, [r3, #0x440]
  0301c	e3130001	 tst         r3, #1
  03020	0a000004	 beq         |$LN19@mcbsp_Conf@8|
  03024	e59f0060	 ldr         r0, [pc, #0x60]
  03028	eb000000	 bl          NKDbgPrintfW
  0302c	e3a03001	 mov         r3, #1
  03030	e58d3014	 str         r3, [sp, #0x14]
  03034	ea000001	 b           |$LN20@mcbsp_Conf@8|
  03038		 |$LN19@mcbsp_Conf@8|
  03038	e3a03000	 mov         r3, #0
  0303c	e58d3014	 str         r3, [sp, #0x14]
  03040		 |$LN20@mcbsp_Conf@8|
  03040		 |$LN10@mcbsp_Conf@8|

; 1296 :                 break;
; 1297 :             }
; 1298 :         }

  03040	eafffed7	 b           |$LN13@mcbsp_Conf@8|
  03044		 |$LN12@mcbsp_Conf@8|

; 1299 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S\r\n", __FUNCTION__));

  03044	e59f303c	 ldr         r3, [pc, #0x3C]
  03048	e5933440	 ldr         r3, [r3, #0x440]
  0304c	e3130004	 tst         r3, #4
  03050	0a000005	 beq         |$LN23@mcbsp_Conf@8|
  03054	e59f1028	 ldr         r1, [pc, #0x28]
  03058	e59f0020	 ldr         r0, [pc, #0x20]
  0305c	eb000000	 bl          NKDbgPrintfW
  03060	e3a03001	 mov         r3, #1
  03064	e58d3018	 str         r3, [sp, #0x18]
  03068	ea000001	 b           |$LN24@mcbsp_Conf@8|
  0306c		 |$LN23@mcbsp_Conf@8|
  0306c	e3a03000	 mov         r3, #0
  03070	e58d3018	 str         r3, [sp, #0x18]
  03074		 |$LN24@mcbsp_Conf@8|

; 1300 : }

  03074	e28dd01c	 add         sp, sp, #0x1C
  03078	e89d6000	 ldmia       sp, {sp, lr}
  0307c	e12fff1e	 bx          lr
  03080		 |$LN28@mcbsp_Conf@8|
  03080		 |$LN29@mcbsp_Conf@8|
  03080	00000000	 DCD         |??_C@_1BE@LFFACMJN@?$AAM?$AAC?$AAP?$AA?3?$AA?9?$AA?$CF?$AAS?$AA?$AN?$AA?6?$AA?$AA@|
  03084		 |$LN30@mcbsp_Conf@8|
  03084	00000000	 DCD         |??_C@_0BK@CFDAKKFG@mcbsp_ConfigTDMTxChannels?$AA@|
  03088		 |$LN31@mcbsp_Conf@8|
  03088	00000000	 DCD         |dpCurSettings|
  0308c		 |$LN32@mcbsp_Conf@8|
  0308c	00000000	 DCD         |??_C@_1IC@CNDLDIPG@?$AAM?$AAC?$AAP?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAm?$AAc?$AAb?$AAs?$AAp?$AA_?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAT?$AAD?$AAM?$AAT?$AAx?$AAC?$AAh?$AAa@|
  03090		 |$LN33@mcbsp_Conf@8|
  03090	00000000	 DCD         |??_C@_1CE@FCDKFBGI@?$AAM?$AAC?$AAP?$AA?3?$AA?$CL?$AA?$CF?$AAS?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  03094		 |$M37466|

			 ENDP  ; |mcbsp_ConfigTDMTxChannels|

	EXPORT	|??_C@_1IA@MIFJHLK@?$AAM?$AAC?$AAP?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AAm?$AAc?$AAb?$AAs?$AAp?$AA_?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAT?$AAD?$AAM?$AAR?$AAx?$AAC?$AAh?$AAa?$AAn@| [ DATA ] ; `string'
	EXPORT	|??_C@_0BK@MNIFGABF@mcbsp_ConfigTDMRxChannels?$AA@| [ DATA ] ; `string'

  00090			 AREA	 |.pdata|, PDATA
|$T37487| DCD	|$LN27@mcbsp_Conf@9|
	DCD	0x40015604

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IA@MIFJHLK@?$AAM?$AAC?$AAP?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AAm?$AAc?$AAb?$AAs?$AAp?$AA_?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAT?$AAD?$AAM?$AAR?$AAx?$AAC?$AAh?$AAa?$AAn@| DCB "M"
	DCB	0x0, "C", 0x0, "P", 0x0, ":", 0x0, " ", 0x0, "E", 0x0, "R"
	DCB	0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, "m", 0x0, "c"
	DCB	0x0, "b", 0x0, "s", 0x0, "p", 0x0, "_", 0x0, "C", 0x0, "o"
	DCB	0x0, "n", 0x0, "f", 0x0, "i", 0x0, "g", 0x0, "T", 0x0, "D"
	DCB	0x0, "M", 0x0, "R", 0x0, "x", 0x0, "C", 0x0, "h", 0x0, "a"
	DCB	0x0, "n", 0x0, "n", 0x0, "e", 0x0, "l", 0x0, "s", 0x0, ":"
	DCB	0x0, " ", 0x0, "I", 0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l"
	DCB	0x0, "i", 0x0, "d", 0x0, " ", 0x0, "C", 0x0, "h", 0x0, "a"
	DCB	0x0, "n", 0x0, "n", 0x0, "e", 0x0, "l", 0x0, " ", 0x0, "R"
	DCB	0x0, "e", 0x0, "q", 0x0, "u", 0x0, "e", 0x0, "s", 0x0, "t"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BK@MNIFGABF@mcbsp_ConfigTDMRxChannels?$AA@| DCB "mcbsp_ConfigTDMR"
	DCB	"xChannels", 0x0			; `string'
; Function compile flags: /Odtp

  03094			 AREA	 |.text|, CODE, ARM

  03094		 |mcbsp_ConfigTDMRxChannels| PROC

; 1310 : {

  03094		 |$LN27@mcbsp_Conf@9|
  03094	e1a0c00d	 mov         r12, sp
  03098	e92d0001	 stmdb       sp!, {r0}
  0309c	e92d5000	 stmdb       sp!, {r12, lr}
  030a0	e24dd01c	 sub         sp, sp, #0x1C
  030a4		 |$M37484|

; 1311 :     DWORD channelToEnable = 0;

  030a4	e3a03000	 mov         r3, #0
  030a8	e58d3004	 str         r3, [sp, #4]

; 1312 :     UINT  nCount = 0;

  030ac	e3a03000	 mov         r3, #0
  030b0	e58d3000	 str         r3, [sp]

; 1313 :     DWORD regVal = 0;

  030b4	e3a03000	 mov         r3, #0
  030b8	e58d3008	 str         r3, [sp, #8]

; 1314 : 
; 1315 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S(0x%08x)\r\n", __FUNCTION__, pDevice));

  030bc	e59f351c	 ldr         r3, [pc, #0x51C]
  030c0	e5933440	 ldr         r3, [r3, #0x440]
  030c4	e3130004	 tst         r3, #4
  030c8	0a000006	 beq         |$LN17@mcbsp_Conf@9|
  030cc	e59d2024	 ldr         r2, [sp, #0x24]
  030d0	e59f1504	 ldr         r1, [pc, #0x504]
  030d4	e59f050c	 ldr         r0, [pc, #0x50C]
  030d8	eb000000	 bl          NKDbgPrintfW
  030dc	e3a03001	 mov         r3, #1
  030e0	e58d300c	 str         r3, [sp, #0xC]
  030e4	ea000001	 b           |$LN18@mcbsp_Conf@9|
  030e8		 |$LN17@mcbsp_Conf@9|
  030e8	e3a03000	 mov         r3, #0
  030ec	e58d300c	 str         r3, [sp, #0xC]
  030f0		 |$LN18@mcbsp_Conf@9|

; 1316 : 
; 1317 :     // Channel selection among the available 128 channels
; 1318 :     // which is distributed equally among 8 blocks.
; 1319 :     //
; 1320 :     for (nCount= 0; nCount < pDevice->numOfRxChannels; nCount++)

  030f0	e3a03000	 mov         r3, #0
  030f4	e58d3000	 str         r3, [sp]
  030f8	ea000002	 b           |$LN14@mcbsp_Conf@9|
  030fc		 |$LN13@mcbsp_Conf@9|
  030fc	e59d3000	 ldr         r3, [sp]
  03100	e2833001	 add         r3, r3, #1
  03104	e58d3000	 str         r3, [sp]
  03108		 |$LN14@mcbsp_Conf@9|
  03108	e59d3024	 ldr         r3, [sp, #0x24]
  0310c	e2833f52	 add         r3, r3, #0x52, 30
  03110	e59d2000	 ldr         r2, [sp]
  03114	e5933000	 ldr         r3, [r3]
  03118	e1520003	 cmp         r2, r3
  0311c	2a00011e	 bcs         |$LN12@mcbsp_Conf@9|

; 1321 :         {
; 1322 :         switch ((pDevice->requestedRxChannels[nCount]) / MAX_CHANNEL_PER_BLOCK)

  03120	e59d3024	 ldr         r3, [sp, #0x24]
  03124	e2831f53	 add         r1, r3, #0x53, 30
  03128	e59d2000	 ldr         r2, [sp]
  0312c	e3a03004	 mov         r3, #4
  03130	e0030392	 mul         r3, r2, r3
  03134	e0813003	 add         r3, r1, r3
  03138	e5931000	 ldr         r1, [r3]
  0313c	e3a00010	 mov         r0, #0x10
  03140	eb000000	 bl          __rt_udiv
  03144	e58d0010	 str         r0, [sp, #0x10]
  03148	e59d3010	 ldr         r3, [sp, #0x10]
  0314c	e3530040	 cmp         r3, #0x40
  03150	8a000013	 bhi         |$LN21@mcbsp_Conf@9|
  03154	e59d3010	 ldr         r3, [sp, #0x10]
  03158	e3530040	 cmp         r3, #0x40
  0315c	0a00008e	 beq         |$LN5@mcbsp_Conf@9|
  03160	e59d3010	 ldr         r3, [sp, #0x10]
  03164	e3530020	 cmp         r3, #0x20
  03168	8a000009	 bhi         |$LN22@mcbsp_Conf@9|
  0316c	e59d3010	 ldr         r3, [sp, #0x10]
  03170	e3530020	 cmp         r3, #0x20
  03174	0a00004e	 beq         |$LN7@mcbsp_Conf@9|
  03178	e59d3010	 ldr         r3, [sp, #0x10]
  0317c	e3530000	 cmp         r3, #0
  03180	0a000011	 beq         |$LN9@mcbsp_Conf@9|
  03184	e59d3010	 ldr         r3, [sp, #0x10]
  03188	e3530010	 cmp         r3, #0x10
  0318c	0a00002b	 beq         |$LN8@mcbsp_Conf@9|
  03190	ea0000f5	 b           |$LN1@mcbsp_Conf@9|
  03194		 |$LN22@mcbsp_Conf@9|
  03194	e59d3010	 ldr         r3, [sp, #0x10]
  03198	e3530030	 cmp         r3, #0x30
  0319c	0a000061	 beq         |$LN6@mcbsp_Conf@9|
  031a0	ea0000f1	 b           |$LN1@mcbsp_Conf@9|
  031a4		 |$LN21@mcbsp_Conf@9|
  031a4	e59d3010	 ldr         r3, [sp, #0x10]
  031a8	e3530050	 cmp         r3, #0x50
  031ac	0a000097	 beq         |$LN4@mcbsp_Conf@9|
  031b0	e59d3010	 ldr         r3, [sp, #0x10]
  031b4	e3530060	 cmp         r3, #0x60
  031b8	0a0000b1	 beq         |$LN3@mcbsp_Conf@9|
  031bc	e59d3010	 ldr         r3, [sp, #0x10]
  031c0	e3530070	 cmp         r3, #0x70
  031c4	0a0000cb	 beq         |$LN2@mcbsp_Conf@9|
  031c8	ea0000e7	 b           |$LN1@mcbsp_Conf@9|
  031cc		 |$LN9@mcbsp_Conf@9|

; 1323 :             {
; 1324 :             case kMcBSP_Block0:
; 1325 :                 channelToEnable = pDevice->requestedRxChannels[nCount] %
; 1326 :                     (kMcBSP_Block0 + MAX_CHANNEL_PER_BLOCK);

  031cc	e59d3024	 ldr         r3, [sp, #0x24]
  031d0	e2831f53	 add         r1, r3, #0x53, 30
  031d4	e59d2000	 ldr         r2, [sp]
  031d8	e3a03004	 mov         r3, #4
  031dc	e0030392	 mul         r3, r2, r3
  031e0	e0813003	 add         r3, r1, r3
  031e4	e5931000	 ldr         r1, [r3]
  031e8	e3a00010	 mov         r0, #0x10
  031ec	eb000000	 bl          __rt_udiv
  031f0	e58d1004	 str         r1, [sp, #4]

; 1327 : 
; 1328 :                 regVal = INREG32(&pDevice->pMcbspRegs->RCERA);

  031f4	e59d3024	 ldr         r3, [sp, #0x24]
  031f8	e283301c	 add         r3, r3, #0x1C
  031fc	e5933000	 ldr         r3, [r3]
  03200	e2833038	 add         r3, r3, #0x38
  03204	e5933000	 ldr         r3, [r3]
  03208	e58d3008	 str         r3, [sp, #8]

; 1329 :                 regVal |= (1<<channelToEnable);

  0320c	e59d2004	 ldr         r2, [sp, #4]
  03210	e3a03001	 mov         r3, #1
  03214	e1a02213	 mov         r2, r3, lsl r2
  03218	e59d3008	 ldr         r3, [sp, #8]
  0321c	e1833002	 orr         r3, r3, r2
  03220	e58d3008	 str         r3, [sp, #8]

; 1330 :                 OUTREG32(&pDevice->pMcbspRegs->RCERA, regVal);

  03224	e59d3024	 ldr         r3, [sp, #0x24]
  03228	e283301c	 add         r3, r3, #0x1C
  0322c	e5933000	 ldr         r3, [r3]
  03230	e2832038	 add         r2, r3, #0x38
  03234	e59d3008	 ldr         r3, [sp, #8]
  03238	e5823000	 str         r3, [r2]

; 1331 :                 break;

  0323c	ea0000d5	 b           |$LN10@mcbsp_Conf@9|
  03240		 |$LN8@mcbsp_Conf@9|

; 1332 : 
; 1333 :             case kMcBSP_Block1:
; 1334 :                 channelToEnable = pDevice->requestedRxChannels[nCount] %
; 1335 :                     (kMcBSP_Block1 + MAX_CHANNEL_PER_BLOCK);

  03240	e59d3024	 ldr         r3, [sp, #0x24]
  03244	e2831f53	 add         r1, r3, #0x53, 30
  03248	e59d2000	 ldr         r2, [sp]
  0324c	e3a03004	 mov         r3, #4
  03250	e0030392	 mul         r3, r2, r3
  03254	e0813003	 add         r3, r1, r3
  03258	e5931000	 ldr         r1, [r3]
  0325c	e3a00020	 mov         r0, #0x20
  03260	eb000000	 bl          __rt_udiv
  03264	e58d1004	 str         r1, [sp, #4]

; 1336 : 
; 1337 :                 regVal = INREG32(&pDevice->pMcbspRegs->RCERB);

  03268	e59d3024	 ldr         r3, [sp, #0x24]
  0326c	e283301c	 add         r3, r3, #0x1C
  03270	e5933000	 ldr         r3, [r3]
  03274	e283303c	 add         r3, r3, #0x3C
  03278	e5933000	 ldr         r3, [r3]
  0327c	e58d3008	 str         r3, [sp, #8]

; 1338 :                 regVal |= (1<<channelToEnable);

  03280	e59d2004	 ldr         r2, [sp, #4]
  03284	e3a03001	 mov         r3, #1
  03288	e1a02213	 mov         r2, r3, lsl r2
  0328c	e59d3008	 ldr         r3, [sp, #8]
  03290	e1833002	 orr         r3, r3, r2
  03294	e58d3008	 str         r3, [sp, #8]

; 1339 :                 OUTREG32(&pDevice->pMcbspRegs->RCERB, regVal);

  03298	e59d3024	 ldr         r3, [sp, #0x24]
  0329c	e283301c	 add         r3, r3, #0x1C
  032a0	e5933000	 ldr         r3, [r3]
  032a4	e283203c	 add         r2, r3, #0x3C
  032a8	e59d3008	 ldr         r3, [sp, #8]
  032ac	e5823000	 str         r3, [r2]

; 1340 :                 break;

  032b0	ea0000b8	 b           |$LN10@mcbsp_Conf@9|
  032b4		 |$LN7@mcbsp_Conf@9|

; 1341 : 
; 1342 :             case kMcBSP_Block2:
; 1343 :                 channelToEnable = pDevice->requestedRxChannels[nCount] %
; 1344 :                     (kMcBSP_Block2 + MAX_CHANNEL_PER_BLOCK);

  032b4	e59d3024	 ldr         r3, [sp, #0x24]
  032b8	e2831f53	 add         r1, r3, #0x53, 30
  032bc	e59d2000	 ldr         r2, [sp]
  032c0	e3a03004	 mov         r3, #4
  032c4	e0030392	 mul         r3, r2, r3
  032c8	e0813003	 add         r3, r1, r3
  032cc	e5931000	 ldr         r1, [r3]
  032d0	e3a00030	 mov         r0, #0x30
  032d4	eb000000	 bl          __rt_udiv
  032d8	e58d1004	 str         r1, [sp, #4]

; 1345 : 
; 1346 :                 regVal = INREG32(&pDevice->pMcbspRegs->RCERC);

  032dc	e59d3024	 ldr         r3, [sp, #0x24]
  032e0	e283301c	 add         r3, r3, #0x1C
  032e4	e5933000	 ldr         r3, [r3]
  032e8	e283304c	 add         r3, r3, #0x4C
  032ec	e5933000	 ldr         r3, [r3]
  032f0	e58d3008	 str         r3, [sp, #8]

; 1347 :                 regVal |= (1<<channelToEnable);

  032f4	e59d2004	 ldr         r2, [sp, #4]
  032f8	e3a03001	 mov         r3, #1
  032fc	e1a02213	 mov         r2, r3, lsl r2
  03300	e59d3008	 ldr         r3, [sp, #8]
  03304	e1833002	 orr         r3, r3, r2
  03308	e58d3008	 str         r3, [sp, #8]

; 1348 :                 OUTREG32(&pDevice->pMcbspRegs->RCERC, regVal);

  0330c	e59d3024	 ldr         r3, [sp, #0x24]
  03310	e283301c	 add         r3, r3, #0x1C
  03314	e5933000	 ldr         r3, [r3]
  03318	e283204c	 add         r2, r3, #0x4C
  0331c	e59d3008	 ldr         r3, [sp, #8]
  03320	e5823000	 str         r3, [r2]

; 1349 :                 break;

  03324	ea00009b	 b           |$LN10@mcbsp_Conf@9|
  03328		 |$LN6@mcbsp_Conf@9|

; 1350 : 
; 1351 :             case kMcBSP_Block3:
; 1352 :                 channelToEnable = pDevice->requestedRxChannels[nCount] %
; 1353 :                     (kMcBSP_Block3 + MAX_CHANNEL_PER_BLOCK);

  03328	e59d3024	 ldr         r3, [sp, #0x24]
  0332c	e2831f53	 add         r1, r3, #0x53, 30
  03330	e59d2000	 ldr         r2, [sp]
  03334	e3a03004	 mov         r3, #4
  03338	e0030392	 mul         r3, r2, r3
  0333c	e0813003	 add         r3, r1, r3
  03340	e5931000	 ldr         r1, [r3]
  03344	e3a00040	 mov         r0, #0x40
  03348	eb000000	 bl          __rt_udiv
  0334c	e58d1004	 str         r1, [sp, #4]

; 1354 : 
; 1355 :                 regVal = INREG32(&pDevice->pMcbspRegs->RCERD);

  03350	e59d3024	 ldr         r3, [sp, #0x24]
  03354	e283301c	 add         r3, r3, #0x1C
  03358	e5933000	 ldr         r3, [r3]
  0335c	e2833050	 add         r3, r3, #0x50
  03360	e5933000	 ldr         r3, [r3]
  03364	e58d3008	 str         r3, [sp, #8]

; 1356 :                 regVal |= (1<<channelToEnable);

  03368	e59d2004	 ldr         r2, [sp, #4]
  0336c	e3a03001	 mov         r3, #1
  03370	e1a02213	 mov         r2, r3, lsl r2
  03374	e59d3008	 ldr         r3, [sp, #8]
  03378	e1833002	 orr         r3, r3, r2
  0337c	e58d3008	 str         r3, [sp, #8]

; 1357 :                 OUTREG32(&pDevice->pMcbspRegs->RCERD, regVal);

  03380	e59d3024	 ldr         r3, [sp, #0x24]
  03384	e283301c	 add         r3, r3, #0x1C
  03388	e5933000	 ldr         r3, [r3]
  0338c	e2832050	 add         r2, r3, #0x50
  03390	e59d3008	 ldr         r3, [sp, #8]
  03394	e5823000	 str         r3, [r2]

; 1358 :                 break;

  03398	ea00007e	 b           |$LN10@mcbsp_Conf@9|
  0339c		 |$LN5@mcbsp_Conf@9|

; 1359 : 
; 1360 :             case kMcBSP_Block4:
; 1361 :                 channelToEnable = pDevice->requestedRxChannels[nCount] %
; 1362 :                     (kMcBSP_Block4 + MAX_CHANNEL_PER_BLOCK);

  0339c	e59d3024	 ldr         r3, [sp, #0x24]
  033a0	e2831f53	 add         r1, r3, #0x53, 30
  033a4	e59d2000	 ldr         r2, [sp]
  033a8	e3a03004	 mov         r3, #4
  033ac	e0030392	 mul         r3, r2, r3
  033b0	e0813003	 add         r3, r1, r3
  033b4	e5931000	 ldr         r1, [r3]
  033b8	e3a00050	 mov         r0, #0x50
  033bc	eb000000	 bl          __rt_udiv
  033c0	e58d1004	 str         r1, [sp, #4]

; 1363 : 
; 1364 :                 regVal = INREG32(&pDevice->pMcbspRegs->RCERE);

  033c4	e59d3024	 ldr         r3, [sp, #0x24]
  033c8	e283301c	 add         r3, r3, #0x1C
  033cc	e5933000	 ldr         r3, [r3]
  033d0	e283305c	 add         r3, r3, #0x5C
  033d4	e5933000	 ldr         r3, [r3]
  033d8	e58d3008	 str         r3, [sp, #8]

; 1365 :                 regVal |= (1<<channelToEnable);

  033dc	e59d2004	 ldr         r2, [sp, #4]
  033e0	e3a03001	 mov         r3, #1
  033e4	e1a02213	 mov         r2, r3, lsl r2
  033e8	e59d3008	 ldr         r3, [sp, #8]
  033ec	e1833002	 orr         r3, r3, r2
  033f0	e58d3008	 str         r3, [sp, #8]

; 1366 :                 OUTREG32(&pDevice->pMcbspRegs->RCERE, regVal);

  033f4	e59d3024	 ldr         r3, [sp, #0x24]
  033f8	e283301c	 add         r3, r3, #0x1C
  033fc	e5933000	 ldr         r3, [r3]
  03400	e283205c	 add         r2, r3, #0x5C
  03404	e59d3008	 ldr         r3, [sp, #8]
  03408	e5823000	 str         r3, [r2]

; 1367 :                 break;

  0340c	ea000061	 b           |$LN10@mcbsp_Conf@9|
  03410		 |$LN4@mcbsp_Conf@9|

; 1368 : 
; 1369 :             case kMcBSP_Block5:
; 1370 :                 channelToEnable = pDevice->requestedRxChannels[nCount] %
; 1371 :                     (kMcBSP_Block5 + MAX_CHANNEL_PER_BLOCK);

  03410	e59d3024	 ldr         r3, [sp, #0x24]
  03414	e2831f53	 add         r1, r3, #0x53, 30
  03418	e59d2000	 ldr         r2, [sp]
  0341c	e3a03004	 mov         r3, #4
  03420	e0030392	 mul         r3, r2, r3
  03424	e0813003	 add         r3, r1, r3
  03428	e5931000	 ldr         r1, [r3]
  0342c	e3a00060	 mov         r0, #0x60
  03430	eb000000	 bl          __rt_udiv
  03434	e58d1004	 str         r1, [sp, #4]

; 1372 : 
; 1373 :                 regVal = INREG32(&pDevice->pMcbspRegs->RCERF);

  03438	e59d3024	 ldr         r3, [sp, #0x24]
  0343c	e283301c	 add         r3, r3, #0x1C
  03440	e5933000	 ldr         r3, [r3]
  03444	e2833060	 add         r3, r3, #0x60
  03448	e5933000	 ldr         r3, [r3]
  0344c	e58d3008	 str         r3, [sp, #8]

; 1374 :                 regVal |= (1<<channelToEnable);

  03450	e59d2004	 ldr         r2, [sp, #4]
  03454	e3a03001	 mov         r3, #1
  03458	e1a02213	 mov         r2, r3, lsl r2
  0345c	e59d3008	 ldr         r3, [sp, #8]
  03460	e1833002	 orr         r3, r3, r2
  03464	e58d3008	 str         r3, [sp, #8]

; 1375 :                 OUTREG32(&pDevice->pMcbspRegs->RCERF, regVal);

  03468	e59d3024	 ldr         r3, [sp, #0x24]
  0346c	e283301c	 add         r3, r3, #0x1C
  03470	e5933000	 ldr         r3, [r3]
  03474	e2832060	 add         r2, r3, #0x60
  03478	e59d3008	 ldr         r3, [sp, #8]
  0347c	e5823000	 str         r3, [r2]

; 1376 :                 break;

  03480	ea000044	 b           |$LN10@mcbsp_Conf@9|
  03484		 |$LN3@mcbsp_Conf@9|

; 1377 : 
; 1378 :             case kMcBSP_Block6:
; 1379 :                 channelToEnable = pDevice->requestedRxChannels[nCount] %
; 1380 :                     (kMcBSP_Block6 + MAX_CHANNEL_PER_BLOCK);

  03484	e59d3024	 ldr         r3, [sp, #0x24]
  03488	e2831f53	 add         r1, r3, #0x53, 30
  0348c	e59d2000	 ldr         r2, [sp]
  03490	e3a03004	 mov         r3, #4
  03494	e0030392	 mul         r3, r2, r3
  03498	e0813003	 add         r3, r1, r3
  0349c	e5931000	 ldr         r1, [r3]
  034a0	e3a00070	 mov         r0, #0x70
  034a4	eb000000	 bl          __rt_udiv
  034a8	e58d1004	 str         r1, [sp, #4]

; 1381 : 
; 1382 :                 regVal = INREG32(&pDevice->pMcbspRegs->RCERG);

  034ac	e59d3024	 ldr         r3, [sp, #0x24]
  034b0	e283301c	 add         r3, r3, #0x1C
  034b4	e5933000	 ldr         r3, [r3]
  034b8	e283306c	 add         r3, r3, #0x6C
  034bc	e5933000	 ldr         r3, [r3]
  034c0	e58d3008	 str         r3, [sp, #8]

; 1383 :                 regVal |= (1<<channelToEnable);

  034c4	e59d2004	 ldr         r2, [sp, #4]
  034c8	e3a03001	 mov         r3, #1
  034cc	e1a02213	 mov         r2, r3, lsl r2
  034d0	e59d3008	 ldr         r3, [sp, #8]
  034d4	e1833002	 orr         r3, r3, r2
  034d8	e58d3008	 str         r3, [sp, #8]

; 1384 :                 OUTREG32(&pDevice->pMcbspRegs->RCERG, regVal);

  034dc	e59d3024	 ldr         r3, [sp, #0x24]
  034e0	e283301c	 add         r3, r3, #0x1C
  034e4	e5933000	 ldr         r3, [r3]
  034e8	e283206c	 add         r2, r3, #0x6C
  034ec	e59d3008	 ldr         r3, [sp, #8]
  034f0	e5823000	 str         r3, [r2]

; 1385 :                 break;

  034f4	ea000027	 b           |$LN10@mcbsp_Conf@9|
  034f8		 |$LN2@mcbsp_Conf@9|

; 1386 : 
; 1387 :             case kMcBSP_Block7:
; 1388 :                 channelToEnable = pDevice->requestedRxChannels[nCount] %
; 1389 :                     (kMcBSP_Block7 + MAX_CHANNEL_PER_BLOCK);

  034f8	e59d3024	 ldr         r3, [sp, #0x24]
  034fc	e2831f53	 add         r1, r3, #0x53, 30
  03500	e59d2000	 ldr         r2, [sp]
  03504	e3a03004	 mov         r3, #4
  03508	e0030392	 mul         r3, r2, r3
  0350c	e0813003	 add         r3, r1, r3
  03510	e5931000	 ldr         r1, [r3]
  03514	e3a00080	 mov         r0, #0x80
  03518	eb000000	 bl          __rt_udiv
  0351c	e58d1004	 str         r1, [sp, #4]

; 1390 : 
; 1391 :                 regVal = INREG32(&pDevice->pMcbspRegs->RCERH);

  03520	e59d3024	 ldr         r3, [sp, #0x24]
  03524	e283301c	 add         r3, r3, #0x1C
  03528	e5933000	 ldr         r3, [r3]
  0352c	e2833070	 add         r3, r3, #0x70
  03530	e5933000	 ldr         r3, [r3]
  03534	e58d3008	 str         r3, [sp, #8]

; 1392 :                 regVal |= (1<<channelToEnable);

  03538	e59d2004	 ldr         r2, [sp, #4]
  0353c	e3a03001	 mov         r3, #1
  03540	e1a02213	 mov         r2, r3, lsl r2
  03544	e59d3008	 ldr         r3, [sp, #8]
  03548	e1833002	 orr         r3, r3, r2
  0354c	e58d3008	 str         r3, [sp, #8]

; 1393 :                 OUTREG32(&pDevice->pMcbspRegs->RCERH, regVal);

  03550	e59d3024	 ldr         r3, [sp, #0x24]
  03554	e283301c	 add         r3, r3, #0x1C
  03558	e5933000	 ldr         r3, [r3]
  0355c	e2832070	 add         r2, r3, #0x70
  03560	e59d3008	 ldr         r3, [sp, #8]
  03564	e5823000	 str         r3, [r2]

; 1394 :                 break;

  03568	ea00000a	 b           |$LN10@mcbsp_Conf@9|
  0356c		 |$LN1@mcbsp_Conf@9|

; 1395 : 
; 1396 :             default:
; 1397 :                 DEBUGMSG(ZONE_ERROR, (L"MCP: ERROR:mcbsp_ConfigTDMRxChannels: "
; 1398 :                     L"Invalid Channel Request\r\n"
; 1399 :                     ));

  0356c	e59f306c	 ldr         r3, [pc, #0x6C]
  03570	e5933440	 ldr         r3, [r3, #0x440]
  03574	e3130001	 tst         r3, #1
  03578	0a000004	 beq         |$LN19@mcbsp_Conf@9|
  0357c	e59f0060	 ldr         r0, [pc, #0x60]
  03580	eb000000	 bl          NKDbgPrintfW
  03584	e3a03001	 mov         r3, #1
  03588	e58d3014	 str         r3, [sp, #0x14]
  0358c	ea000001	 b           |$LN20@mcbsp_Conf@9|
  03590		 |$LN19@mcbsp_Conf@9|
  03590	e3a03000	 mov         r3, #0
  03594	e58d3014	 str         r3, [sp, #0x14]
  03598		 |$LN20@mcbsp_Conf@9|
  03598		 |$LN10@mcbsp_Conf@9|

; 1400 :                 break;
; 1401 :             }
; 1402 :         }

  03598	eafffed7	 b           |$LN13@mcbsp_Conf@9|
  0359c		 |$LN12@mcbsp_Conf@9|

; 1403 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S\r\n", __FUNCTION__));

  0359c	e59f303c	 ldr         r3, [pc, #0x3C]
  035a0	e5933440	 ldr         r3, [r3, #0x440]
  035a4	e3130004	 tst         r3, #4
  035a8	0a000005	 beq         |$LN23@mcbsp_Conf@9|
  035ac	e59f1028	 ldr         r1, [pc, #0x28]
  035b0	e59f0020	 ldr         r0, [pc, #0x20]
  035b4	eb000000	 bl          NKDbgPrintfW
  035b8	e3a03001	 mov         r3, #1
  035bc	e58d3018	 str         r3, [sp, #0x18]
  035c0	ea000001	 b           |$LN24@mcbsp_Conf@9|
  035c4		 |$LN23@mcbsp_Conf@9|
  035c4	e3a03000	 mov         r3, #0
  035c8	e58d3018	 str         r3, [sp, #0x18]
  035cc		 |$LN24@mcbsp_Conf@9|

; 1404 : }

  035cc	e28dd01c	 add         sp, sp, #0x1C
  035d0	e89d6000	 ldmia       sp, {sp, lr}
  035d4	e12fff1e	 bx          lr
  035d8		 |$LN28@mcbsp_Conf@9|
  035d8		 |$LN29@mcbsp_Conf@9|
  035d8	00000000	 DCD         |??_C@_1BE@LFFACMJN@?$AAM?$AAC?$AAP?$AA?3?$AA?9?$AA?$CF?$AAS?$AA?$AN?$AA?6?$AA?$AA@|
  035dc		 |$LN30@mcbsp_Conf@9|
  035dc	00000000	 DCD         |??_C@_0BK@MNIFGABF@mcbsp_ConfigTDMRxChannels?$AA@|
  035e0		 |$LN31@mcbsp_Conf@9|
  035e0	00000000	 DCD         |dpCurSettings|
  035e4		 |$LN32@mcbsp_Conf@9|
  035e4	00000000	 DCD         |??_C@_1IA@MIFJHLK@?$AAM?$AAC?$AAP?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AAm?$AAc?$AAb?$AAs?$AAp?$AA_?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAT?$AAD?$AAM?$AAR?$AAx?$AAC?$AAh?$AAa?$AAn@|
  035e8		 |$LN33@mcbsp_Conf@9|
  035e8	00000000	 DCD         |??_C@_1CE@FCDKFBGI@?$AAM?$AAC?$AAP?$AA?3?$AA?$CL?$AA?$CF?$AAS?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  035ec		 |$M37485|

			 ENDP  ; |mcbsp_ConfigTDMRxChannels|

	EXPORT	|mcbsp_SideToneAutoIdle|
	EXPORT	|mcbsp_SideToneWriteFIRCoeff|
	EXPORT	|mcbsp_SideToneEnable|
	EXPORT	|??_C@_1JO@FFCKCOBL@?$AAM?$AAC?$AAP?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAm?$AAc?$AAb?$AAs?$AAp?$AA_?$AAS?$AAi?$AAd?$AAe?$AAT?$AAo?$AAn?$AAe?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_0BD@KDFLJGIF@mcbsp_SideToneInit?$AA@| [ DATA ] ; `string'
	EXPORT	|mcbsp_SideToneInit|
	IMPORT	|MmMapIoSpace|
	IMPORT	|SOCGetMCBSPSidetoneAddress|

  00098			 AREA	 |.pdata|, PDATA
|$T37504| DCD	|$LN15@mcbsp_Side|
	DCD	0x40007b04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JO@FFCKCOBL@?$AAM?$AAC?$AAP?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAm?$AAc?$AAb?$AAs?$AAp?$AA_?$AAS?$AAi?$AAd?$AAe?$AAT?$AAo?$AAn?$AAe?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5@| DCB "M"
	DCB	0x0, "C", 0x0, "P", 0x0, ":", 0x0, " ", 0x0, "E", 0x0, "R"
	DCB	0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " ", 0x0, "m"
	DCB	0x0, "c", 0x0, "b", 0x0, "s", 0x0, "p", 0x0, "_", 0x0, "S"
	DCB	0x0, "i", 0x0, "d", 0x0, "e", 0x0, "T", 0x0, "o", 0x0, "n"
	DCB	0x0, "e", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, ":"
	DCB	0x0, " ", 0x0, "F", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e"
	DCB	0x0, "d", 0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "m"
	DCB	0x0, "a", 0x0, "p", 0x0, " ", 0x0, "S", 0x0, "i", 0x0, "d"
	DCB	0x0, "e", 0x0, " ", 0x0, "T", 0x0, "o", 0x0, "n", 0x0, "e"
	DCB	0x0, " ", 0x0, "c", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r"
	DCB	0x0, "o", 0x0, "l", 0x0, "l", 0x0, "e", 0x0, "r", 0x0, " "
	DCB	0x0, "r", 0x0, "e", 0x0, "g", 0x0, "i", 0x0, "s", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BD@KDFLJGIF@mcbsp_SideToneInit?$AA@| DCB "mcbsp_SideToneInit", 0x0 ; `string'
; Function compile flags: /Odtp

  035ec			 AREA	 |.text|, CODE, ARM

  035ec		 |mcbsp_SideToneInit| PROC

; 1415 : {

  035ec		 |$LN15@mcbsp_Side|
  035ec	e1a0c00d	 mov         r12, sp
  035f0	e92d0001	 stmdb       sp!, {r0}
  035f4	e92d5000	 stmdb       sp!, {r12, lr}
  035f8	e24dd028	 sub         sp, sp, #0x28
  035fc		 |$M37501|

; 1416 :     DWORD regVal = 0;

  035fc	e3a03000	 mov         r3, #0
  03600	e58d300c	 str         r3, [sp, #0xC]

; 1417 :     PHYSICAL_ADDRESS pa;
; 1418 :     OMAP35XX_MCBSP_REGS_ST_t *pSideToneRegs = NULL;

  03604	e3a03000	 mov         r3, #0
  03608	e58d3000	 str         r3, [sp]

; 1419 : 
; 1420 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S(0x%08x)\r\n", __FUNCTION__, pDevice));

  0360c	e59f31b8	 ldr         r3, [pc, #0x1B8]
  03610	e5933440	 ldr         r3, [r3, #0x440]
  03614	e3130004	 tst         r3, #4
  03618	0a000006	 beq         |$LN7@mcbsp_Side|
  0361c	e59d2030	 ldr         r2, [sp, #0x30]
  03620	e59f11a0	 ldr         r1, [pc, #0x1A0]
  03624	e59f01a8	 ldr         r0, [pc, #0x1A8]
  03628	eb000000	 bl          NKDbgPrintfW
  0362c	e3a03001	 mov         r3, #1
  03630	e58d3010	 str         r3, [sp, #0x10]
  03634	ea000001	 b           |$LN8@mcbsp_Side|
  03638		 |$LN7@mcbsp_Side|
  03638	e3a03000	 mov         r3, #0
  0363c	e58d3010	 str         r3, [sp, #0x10]
  03640		 |$LN8@mcbsp_Side|

; 1421 : 
; 1422 :     // McBSP1,4,5 do not have sidetone support, so the physical address will be NULL
; 1423 : 	pDevice->pPhysAddrSidetone = (OMAP35XX_MCBSP_REGS_t*)SOCGetMCBSPSidetoneAddress(pDevice->deviceID);

  03640	e59d3030	 ldr         r3, [sp, #0x30]
  03644	e283300c	 add         r3, r3, #0xC
  03648	e5930000	 ldr         r0, [r3]
  0364c	eb000000	 bl          SOCGetMCBSPSidetoneAddress
  03650	e58d0014	 str         r0, [sp, #0x14]
  03654	e59d3030	 ldr         r3, [sp, #0x30]
  03658	e2832014	 add         r2, r3, #0x14
  0365c	e59d3014	 ldr         r3, [sp, #0x14]
  03660	e5823000	 str         r3, [r2]

; 1424 :     if (pDevice->pPhysAddrSidetone == NULL)

  03664	e59d3030	 ldr         r3, [sp, #0x30]
  03668	e2833014	 add         r3, r3, #0x14
  0366c	e5933000	 ldr         r3, [r3]
  03670	e3530000	 cmp         r3, #0
  03674	1a000001	 bne         |$LN4@mcbsp_Side|
  03678	ea000042	 b           |$LN3@mcbsp_Side|

; 1425 :     {
; 1426 :         goto cleanUp;

  0367c	ea000041	 b           |$cleanUp$36879|
  03680		 |$LN4@mcbsp_Side|

; 1427 :     }
; 1428 : 
; 1429 :     // Map BSP controller
; 1430 :     //
; 1431 :     pa.QuadPart = (LONGLONG)pDevice->pPhysAddrSidetone;

  03680	e59d3030	 ldr         r3, [sp, #0x30]
  03684	e2833014	 add         r3, r3, #0x14
  03688	e5933000	 ldr         r3, [r3]
  0368c	e58d3018	 str         r3, [sp, #0x18]
  03690	e59d2018	 ldr         r2, [sp, #0x18]
  03694	e59d3018	 ldr         r3, [sp, #0x18]
  03698	e1a03fc3	 mov         r3, r3, asr #31
  0369c	e58d2004	 str         r2, [sp, #4]
  036a0	e58d3008	 str         r3, [sp, #8]

; 1432 :     pSideToneRegs = (OMAP35XX_MCBSP_REGS_ST_t*)
; 1433 :         MmMapIoSpace(pa, sizeof(OMAP35XX_MCBSP_REGS_ST_t), FALSE);

  036a4	e3a03000	 mov         r3, #0
  036a8	e3a02030	 mov         r2, #0x30
  036ac	e59d0004	 ldr         r0, [sp, #4]
  036b0	e59d1008	 ldr         r1, [sp, #8]
  036b4	eb000000	 bl          MmMapIoSpace
  036b8	e58d001c	 str         r0, [sp, #0x1C]
  036bc	e59d301c	 ldr         r3, [sp, #0x1C]
  036c0	e58d3000	 str         r3, [sp]

; 1434 :     if (pSideToneRegs == NULL)

  036c4	e59d3000	 ldr         r3, [sp]
  036c8	e3530000	 cmp         r3, #0
  036cc	1a00000c	 bne         |$LN2@mcbsp_Side|

; 1435 :         {
; 1436 :         DEBUGMSG(ZONE_ERROR, (L"MCP: ERROR: mcbsp_SideToneInit: "
; 1437 :             L"Failed to map Side Tone controller registers\r\n"
; 1438 :             ));

  036d0	e59f30f4	 ldr         r3, [pc, #0xF4]
  036d4	e5933440	 ldr         r3, [r3, #0x440]
  036d8	e3130001	 tst         r3, #1
  036dc	0a000004	 beq         |$LN9@mcbsp_Side|
  036e0	e59f00e8	 ldr         r0, [pc, #0xE8]
  036e4	eb000000	 bl          NKDbgPrintfW
  036e8	e3a03001	 mov         r3, #1
  036ec	e58d3020	 str         r3, [sp, #0x20]
  036f0	ea000001	 b           |$LN10@mcbsp_Side|
  036f4		 |$LN9@mcbsp_Side|
  036f4	e3a03000	 mov         r3, #0
  036f8	e58d3020	 str         r3, [sp, #0x20]
  036fc		 |$LN10@mcbsp_Side|

; 1439 :         goto cleanUp;

  036fc	ea000021	 b           |$LN1@mcbsp_Side|
  03700	ea000020	 b           |$cleanUp$36879|
  03704		 |$LN2@mcbsp_Side|

; 1440 :         }
; 1441 : 
; 1442 :     pDevice->pSideToneRegs = pSideToneRegs;

  03704	e59d3030	 ldr         r3, [sp, #0x30]
  03708	e283206c	 add         r2, r3, #0x6C
  0370c	e59d3000	 ldr         r3, [sp]
  03710	e5823000	 str         r3, [r2]

; 1443 : 
; 1444 :     // Enable Side tone
; 1445 :     //
; 1446 :     mcbsp_SideToneEnable(pDevice);

  03714	e59d0030	 ldr         r0, [sp, #0x30]
  03718	eb000000	 bl          mcbsp_SideToneEnable

; 1447 : 
; 1448 :     // Start writing FIR coeff.
; 1449 :     //
; 1450 :     mcbsp_SideToneWriteFIRCoeff(pDevice);

  0371c	e59d0030	 ldr         r0, [sp, #0x30]
  03720	eb000000	 bl          mcbsp_SideToneWriteFIRCoeff

; 1451 : 
; 1452 :     // Apply desired gain value for chan 0 and chan 1
; 1453 :     //
; 1454 :     regVal = (ST_SGAINCR_CH0GAIN(pDevice->sideToneGain) |
; 1455 :               ST_SGAINCR_CH1GAIN(pDevice->sideToneGain));

  03724	e59d3030	 ldr         r3, [sp, #0x30]
  03728	e2833c05	 add         r3, r3, #5, 24
  0372c	e283306c	 add         r3, r3, #0x6C
  03730	e5932000	 ldr         r2, [r3]
  03734	e3a03cff	 mov         r3, #0xFF, 24
  03738	e38330ff	 orr         r3, r3, #0xFF
  0373c	e0021003	 and         r1, r2, r3
  03740	e59d3030	 ldr         r3, [sp, #0x30]
  03744	e2833c05	 add         r3, r3, #5, 24
  03748	e283306c	 add         r3, r3, #0x6C
  0374c	e5933000	 ldr         r3, [r3]
  03750	e1a02803	 mov         r2, r3, lsl #16
  03754	e3e03cff	 mvn         r3, #0xFF, 24
  03758	e22330ff	 eor         r3, r3, #0xFF
  0375c	e0023003	 and         r3, r2, r3
  03760	e1813003	 orr         r3, r1, r3
  03764	e58d300c	 str         r3, [sp, #0xC]

; 1456 : 
; 1457 :     OUTREG32(&pDevice->pSideToneRegs->SGAINCR, regVal);

  03768	e59d3030	 ldr         r3, [sp, #0x30]
  0376c	e283306c	 add         r3, r3, #0x6C
  03770	e5933000	 ldr         r3, [r3]
  03774	e2832024	 add         r2, r3, #0x24
  03778	e59d300c	 ldr         r3, [sp, #0xC]
  0377c	e5823000	 str         r3, [r2]

; 1458 : 
; 1459 :     // Enable auto idle for sidetone.
; 1460 :     //
; 1461 :     mcbsp_SideToneAutoIdle(pDevice);

  03780	e59d0030	 ldr         r0, [sp, #0x30]
  03784	eb000000	 bl          mcbsp_SideToneAutoIdle
  03788		 |$LN1@mcbsp_Side|
  03788		 |$LN3@mcbsp_Side|
  03788		 |$cleanUp$36879|

; 1462 : 
; 1463 : cleanUp:
; 1464 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S\r\n", __FUNCTION__));

  03788	e59f303c	 ldr         r3, [pc, #0x3C]
  0378c	e5933440	 ldr         r3, [r3, #0x440]
  03790	e3130004	 tst         r3, #4
  03794	0a000005	 beq         |$LN11@mcbsp_Side|
  03798	e59f1028	 ldr         r1, [pc, #0x28]
  0379c	e59f0020	 ldr         r0, [pc, #0x20]
  037a0	eb000000	 bl          NKDbgPrintfW
  037a4	e3a03001	 mov         r3, #1
  037a8	e58d3024	 str         r3, [sp, #0x24]
  037ac	ea000001	 b           |$LN12@mcbsp_Side|
  037b0		 |$LN11@mcbsp_Side|
  037b0	e3a03000	 mov         r3, #0
  037b4	e58d3024	 str         r3, [sp, #0x24]
  037b8		 |$LN12@mcbsp_Side|

; 1465 : }

  037b8	e28dd028	 add         sp, sp, #0x28
  037bc	e89d6000	 ldmia       sp, {sp, lr}
  037c0	e12fff1e	 bx          lr
  037c4		 |$LN16@mcbsp_Side|
  037c4		 |$LN17@mcbsp_Side|
  037c4	00000000	 DCD         |??_C@_1BE@LFFACMJN@?$AAM?$AAC?$AAP?$AA?3?$AA?9?$AA?$CF?$AAS?$AA?$AN?$AA?6?$AA?$AA@|
  037c8		 |$LN18@mcbsp_Side|
  037c8	00000000	 DCD         |??_C@_0BD@KDFLJGIF@mcbsp_SideToneInit?$AA@|
  037cc		 |$LN19@mcbsp_Side|
  037cc	00000000	 DCD         |dpCurSettings|
  037d0		 |$LN20@mcbsp_Side|
  037d0	00000000	 DCD         |??_C@_1JO@FFCKCOBL@?$AAM?$AAC?$AAP?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAm?$AAc?$AAb?$AAs?$AAp?$AA_?$AAS?$AAi?$AAd?$AAe?$AAT?$AAo?$AAn?$AAe?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5@|
  037d4		 |$LN21@mcbsp_Side|
  037d4	00000000	 DCD         |??_C@_1CE@FCDKFBGI@?$AAM?$AAC?$AAP?$AA?3?$AA?$CL?$AA?$CF?$AAS?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  037d8		 |$M37502|

			 ENDP  ; |mcbsp_SideToneInit|

	EXPORT	|??_C@_0BF@IEHNHNHE@mcbsp_SideToneEnable?$AA@| [ DATA ] ; `string'

  000a0			 AREA	 |.pdata|, PDATA
|$T37519| DCD	|$LN9@mcbsp_Side@2|
	DCD	0x40006704

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BF@IEHNHNHE@mcbsp_SideToneEnable?$AA@| DCB "mcbsp_SideToneEnable", 0x0 ; `string'
; Function compile flags: /Odtp

  037d8			 AREA	 |.text|, CODE, ARM

  037d8		 |mcbsp_SideToneEnable| PROC

; 1475 : {

  037d8		 |$LN9@mcbsp_Side@2|
  037d8	e1a0c00d	 mov         r12, sp
  037dc	e92d0001	 stmdb       sp!, {r0}
  037e0	e92d5000	 stmdb       sp!, {r12, lr}
  037e4	e24dd00c	 sub         sp, sp, #0xC
  037e8		 |$M37516|

; 1476 :     DWORD regVal = 0;

  037e8	e3a03000	 mov         r3, #0
  037ec	e58d3000	 str         r3, [sp]

; 1477 : 
; 1478 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S(0x%08x)\r\n", __FUNCTION__, pDevice));

  037f0	e59f3174	 ldr         r3, [pc, #0x174]
  037f4	e5933440	 ldr         r3, [r3, #0x440]
  037f8	e3130004	 tst         r3, #4
  037fc	0a000006	 beq         |$LN3@mcbsp_Side@2|
  03800	e59d2014	 ldr         r2, [sp, #0x14]
  03804	e59f115c	 ldr         r1, [pc, #0x15C]
  03808	e59f0160	 ldr         r0, [pc, #0x160]
  0380c	eb000000	 bl          NKDbgPrintfW
  03810	e3a03001	 mov         r3, #1
  03814	e58d3004	 str         r3, [sp, #4]
  03818	ea000001	 b           |$LN4@mcbsp_Side@2|
  0381c		 |$LN3@mcbsp_Side@2|
  0381c	e3a03000	 mov         r3, #0
  03820	e58d3004	 str         r3, [sp, #4]
  03824		 |$LN4@mcbsp_Side@2|

; 1479 : 
; 1480 :     // Mapping the McBSP channels
; 1481 :     //
; 1482 :     pDevice->sideToneTxMapChannel0 = INREG32(&pDevice->pMcbspRegs->XCERA);

  03824	e59d3014	 ldr         r3, [sp, #0x14]
  03828	e283301c	 add         r3, r3, #0x1C
  0382c	e5933000	 ldr         r3, [r3]
  03830	e2833040	 add         r3, r3, #0x40
  03834	e5932000	 ldr         r2, [r3]
  03838	e59d3014	 ldr         r3, [sp, #0x14]
  0383c	e2833f57	 add         r3, r3, #0x57, 30
  03840	e5832000	 str         r2, [r3]

; 1483 :     pDevice->sideToneRxMapChannel0 = INREG32(&pDevice->pMcbspRegs->RCERA);

  03844	e59d3014	 ldr         r3, [sp, #0x14]
  03848	e283301c	 add         r3, r3, #0x1C
  0384c	e5933000	 ldr         r3, [r3]
  03850	e2833038	 add         r3, r3, #0x38
  03854	e5932000	 ldr         r2, [r3]
  03858	e59d3014	 ldr         r3, [sp, #0x14]
  0385c	e2833e16	 add         r3, r3, #0x16, 28
  03860	e5832000	 str         r2, [r3]

; 1484 : 
; 1485 :     pDevice->sideToneTxMapChannel1 = 0;

  03864	e59d3014	 ldr         r3, [sp, #0x14]
  03868	e2832f59	 add         r2, r3, #0x59, 30
  0386c	e3a03000	 mov         r3, #0
  03870	e5823000	 str         r3, [r2]

; 1486 :     pDevice->sideToneRxMapChannel1 = 0;

  03874	e59d3014	 ldr         r3, [sp, #0x14]
  03878	e2832f5a	 add         r2, r3, #0x5A, 30
  0387c	e3a03000	 mov         r3, #0
  03880	e5823000	 str         r3, [r2]

; 1487 : 
; 1488 :     // Enable side tone from mcbsp register, map mcbsp input and output
; 1489 :     // channels
; 1490 :     //
; 1491 :     regVal = (MCBSP_SSELCR_SIDETONEEN |
; 1492 :         MCBSP_SSELCR_OCH0ASSIGN(pDevice->sideToneTxMapChannel0) |
; 1493 :         MCBSP_SSELCR_OCH1ASSIGN(pDevice->sideToneTxMapChannel1) |
; 1494 :         MCBSP_SSELCR_ICH0ASSIGN(pDevice->sideToneRxMapChannel0) |
; 1495 :         MCBSP_SSELCR_ICH1ASSIGN(pDevice->sideToneRxMapChannel1));

  03884	e59d3014	 ldr         r3, [sp, #0x14]
  03888	e2833f57	 add         r3, r3, #0x57, 30
  0388c	e5933000	 ldr         r3, [r3]
  03890	e1a03203	 mov         r3, r3, lsl #4
  03894	e3832b01	 orr         r2, r3, #1, 22
  03898	e59d3014	 ldr         r3, [sp, #0x14]
  0389c	e2833f59	 add         r3, r3, #0x59, 30
  038a0	e5933000	 ldr         r3, [r3]
  038a4	e1a03383	 mov         r3, r3, lsl #7
  038a8	e1822003	 orr         r2, r2, r3
  038ac	e59d3014	 ldr         r3, [sp, #0x14]
  038b0	e2833e16	 add         r3, r3, #0x16, 28
  038b4	e5933000	 ldr         r3, [r3]
  038b8	e1822003	 orr         r2, r2, r3
  038bc	e59d3014	 ldr         r3, [sp, #0x14]
  038c0	e2833f5a	 add         r3, r3, #0x5A, 30
  038c4	e5933000	 ldr         r3, [r3]
  038c8	e1a03103	 mov         r3, r3, lsl #2
  038cc	e1823003	 orr         r3, r2, r3
  038d0	e58d3000	 str         r3, [sp]

; 1496 : 
; 1497 :     OUTREG32(&pDevice->pMcbspRegs->SSELCR, regVal);

  038d4	e59d3014	 ldr         r3, [sp, #0x14]
  038d8	e283301c	 add         r3, r3, #0x1C
  038dc	e5933000	 ldr         r3, [r3]
  038e0	e28320bc	 add         r2, r3, #0xBC
  038e4	e59d3000	 ldr         r3, [sp]
  038e8	e5823000	 str         r3, [r2]

; 1498 : 
; 1499 :     // Enable side tone in side tone register.
; 1500 :     //
; 1501 :     regVal = INREG32(&pDevice->pSideToneRegs->SSELCR);

  038ec	e59d3014	 ldr         r3, [sp, #0x14]
  038f0	e283306c	 add         r3, r3, #0x6C
  038f4	e5933000	 ldr         r3, [r3]
  038f8	e283302c	 add         r3, r3, #0x2C
  038fc	e5933000	 ldr         r3, [r3]
  03900	e58d3000	 str         r3, [sp]

; 1502 :     regVal |= ST_SSELCR_SIDETONEEN;

  03904	e59d3000	 ldr         r3, [sp]
  03908	e3833001	 orr         r3, r3, #1
  0390c	e58d3000	 str         r3, [sp]

; 1503 :     OUTREG32(&pDevice->pSideToneRegs->SSELCR, regVal);

  03910	e59d3014	 ldr         r3, [sp, #0x14]
  03914	e283306c	 add         r3, r3, #0x6C
  03918	e5933000	 ldr         r3, [r3]
  0391c	e283202c	 add         r2, r3, #0x2C
  03920	e59d3000	 ldr         r3, [sp]
  03924	e5823000	 str         r3, [r2]

; 1504 : 
; 1505 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S\r\n", __FUNCTION__));

  03928	e59f303c	 ldr         r3, [pc, #0x3C]
  0392c	e5933440	 ldr         r3, [r3, #0x440]
  03930	e3130004	 tst         r3, #4
  03934	0a000005	 beq         |$LN5@mcbsp_Side@2|
  03938	e59f1028	 ldr         r1, [pc, #0x28]
  0393c	e59f0020	 ldr         r0, [pc, #0x20]
  03940	eb000000	 bl          NKDbgPrintfW
  03944	e3a03001	 mov         r3, #1
  03948	e58d3008	 str         r3, [sp, #8]
  0394c	ea000001	 b           |$LN6@mcbsp_Side@2|
  03950		 |$LN5@mcbsp_Side@2|
  03950	e3a03000	 mov         r3, #0
  03954	e58d3008	 str         r3, [sp, #8]
  03958		 |$LN6@mcbsp_Side@2|

; 1506 : }

  03958	e28dd00c	 add         sp, sp, #0xC
  0395c	e89d6000	 ldmia       sp, {sp, lr}
  03960	e12fff1e	 bx          lr
  03964		 |$LN10@mcbsp_Side@2|
  03964		 |$LN11@mcbsp_Side@2|
  03964	00000000	 DCD         |??_C@_1BE@LFFACMJN@?$AAM?$AAC?$AAP?$AA?3?$AA?9?$AA?$CF?$AAS?$AA?$AN?$AA?6?$AA?$AA@|
  03968		 |$LN12@mcbsp_Side@2|
  03968	00000000	 DCD         |??_C@_0BF@IEHNHNHE@mcbsp_SideToneEnable?$AA@|
  0396c		 |$LN13@mcbsp_Side@2|
  0396c	00000000	 DCD         |dpCurSettings|
  03970		 |$LN14@mcbsp_Side@2|
  03970	00000000	 DCD         |??_C@_1CE@FCDKFBGI@?$AAM?$AAC?$AAP?$AA?3?$AA?$CL?$AA?$CF?$AAS?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  03974		 |$M37517|

			 ENDP  ; |mcbsp_SideToneEnable|

	EXPORT	|??_C@_0BG@KANLPMFG@mcbsp_SideToneDisable?$AA@| [ DATA ] ; `string'
	EXPORT	|mcbsp_SideToneDisable|

  000a8			 AREA	 |.pdata|, PDATA
|$T37533| DCD	|$LN9@mcbsp_Side@3|
	DCD	0x40003c04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BG@KANLPMFG@mcbsp_SideToneDisable?$AA@| DCB "mcbsp_SideToneDisabl"
	DCB	"e", 0x0				; `string'
; Function compile flags: /Odtp

  03974			 AREA	 |.text|, CODE, ARM

  03974		 |mcbsp_SideToneDisable| PROC

; 1516 : {

  03974		 |$LN9@mcbsp_Side@3|
  03974	e1a0c00d	 mov         r12, sp
  03978	e92d0001	 stmdb       sp!, {r0}
  0397c	e92d5000	 stmdb       sp!, {r12, lr}
  03980	e24dd00c	 sub         sp, sp, #0xC
  03984		 |$M37530|

; 1517 :     DWORD regVal = 0;

  03984	e3a03000	 mov         r3, #0
  03988	e58d3000	 str         r3, [sp]

; 1518 : 
; 1519 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S(0x%08x)\r\n", __FUNCTION__, pDevice));

  0398c	e59f30c8	 ldr         r3, [pc, #0xC8]
  03990	e5933440	 ldr         r3, [r3, #0x440]
  03994	e3130004	 tst         r3, #4
  03998	0a000006	 beq         |$LN3@mcbsp_Side@3|
  0399c	e59d2014	 ldr         r2, [sp, #0x14]
  039a0	e59f10b0	 ldr         r1, [pc, #0xB0]
  039a4	e59f00b4	 ldr         r0, [pc, #0xB4]
  039a8	eb000000	 bl          NKDbgPrintfW
  039ac	e3a03001	 mov         r3, #1
  039b0	e58d3004	 str         r3, [sp, #4]
  039b4	ea000001	 b           |$LN4@mcbsp_Side@3|
  039b8		 |$LN3@mcbsp_Side@3|
  039b8	e3a03000	 mov         r3, #0
  039bc	e58d3004	 str         r3, [sp, #4]
  039c0		 |$LN4@mcbsp_Side@3|

; 1520 : 
; 1521 :     // API to disable side tone
; 1522 :     //
; 1523 :     OUTREG32(&pDevice->pMcbspRegs->SSELCR, regVal);

  039c0	e59d3014	 ldr         r3, [sp, #0x14]
  039c4	e283301c	 add         r3, r3, #0x1C
  039c8	e5933000	 ldr         r3, [r3]
  039cc	e28320bc	 add         r2, r3, #0xBC
  039d0	e59d3000	 ldr         r3, [sp]
  039d4	e5823000	 str         r3, [r2]

; 1524 :     regVal = 0;

  039d8	e3a03000	 mov         r3, #0
  039dc	e58d3000	 str         r3, [sp]

; 1525 :     OUTREG32(&pDevice->pSideToneRegs->SSELCR, regVal);

  039e0	e59d3014	 ldr         r3, [sp, #0x14]
  039e4	e283306c	 add         r3, r3, #0x6C
  039e8	e5933000	 ldr         r3, [r3]
  039ec	e283202c	 add         r2, r3, #0x2C
  039f0	e59d3000	 ldr         r3, [sp]
  039f4	e5823000	 str         r3, [r2]

; 1526 : 
; 1527 :     // Mute
; 1528 :     //
; 1529 :     regVal = 0;

  039f8	e3a03000	 mov         r3, #0
  039fc	e58d3000	 str         r3, [sp]

; 1530 :     OUTREG32(&pDevice->pSideToneRegs->SGAINCR, regVal);

  03a00	e59d3014	 ldr         r3, [sp, #0x14]
  03a04	e283306c	 add         r3, r3, #0x6C
  03a08	e5933000	 ldr         r3, [r3]
  03a0c	e2832024	 add         r2, r3, #0x24
  03a10	e59d3000	 ldr         r3, [sp]
  03a14	e5823000	 str         r3, [r2]

; 1531 : 
; 1532 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S\r\n", __FUNCTION__));

  03a18	e59f303c	 ldr         r3, [pc, #0x3C]
  03a1c	e5933440	 ldr         r3, [r3, #0x440]
  03a20	e3130004	 tst         r3, #4
  03a24	0a000005	 beq         |$LN5@mcbsp_Side@3|
  03a28	e59f1028	 ldr         r1, [pc, #0x28]
  03a2c	e59f0020	 ldr         r0, [pc, #0x20]
  03a30	eb000000	 bl          NKDbgPrintfW
  03a34	e3a03001	 mov         r3, #1
  03a38	e58d3008	 str         r3, [sp, #8]
  03a3c	ea000001	 b           |$LN6@mcbsp_Side@3|
  03a40		 |$LN5@mcbsp_Side@3|
  03a40	e3a03000	 mov         r3, #0
  03a44	e58d3008	 str         r3, [sp, #8]
  03a48		 |$LN6@mcbsp_Side@3|

; 1533 : }

  03a48	e28dd00c	 add         sp, sp, #0xC
  03a4c	e89d6000	 ldmia       sp, {sp, lr}
  03a50	e12fff1e	 bx          lr
  03a54		 |$LN10@mcbsp_Side@3|
  03a54		 |$LN11@mcbsp_Side@3|
  03a54	00000000	 DCD         |??_C@_1BE@LFFACMJN@?$AAM?$AAC?$AAP?$AA?3?$AA?9?$AA?$CF?$AAS?$AA?$AN?$AA?6?$AA?$AA@|
  03a58		 |$LN12@mcbsp_Side@3|
  03a58	00000000	 DCD         |??_C@_0BG@KANLPMFG@mcbsp_SideToneDisable?$AA@|
  03a5c		 |$LN13@mcbsp_Side@3|
  03a5c	00000000	 DCD         |dpCurSettings|
  03a60		 |$LN14@mcbsp_Side@3|
  03a60	00000000	 DCD         |??_C@_1CE@FCDKFBGI@?$AAM?$AAC?$AAP?$AA?3?$AA?$CL?$AA?$CF?$AAS?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  03a64		 |$M37531|

			 ENDP  ; |mcbsp_SideToneDisable|

	EXPORT	|mcbsp_SideToneWriteReset|
	EXPORT	|??_C@_0BM@BJGCAIL@mcbsp_SideToneWriteFIRCoeff?$AA@| [ DATA ] ; `string'

  000b0			 AREA	 |.pdata|, PDATA
|$T37547| DCD	|$LN11@mcbsp_Side@4|
	DCD	0x40004304

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BM@BJGCAIL@mcbsp_SideToneWriteFIRCoeff?$AA@| DCB "mcbsp_SideToneW"
	DCB	"riteFIRCoeff", 0x0			; `string'
; Function compile flags: /Odtp

  03a64			 AREA	 |.text|, CODE, ARM

  03a64		 |mcbsp_SideToneWriteFIRCoeff| PROC

; 1543 : {

  03a64		 |$LN11@mcbsp_Side@4|
  03a64	e1a0c00d	 mov         r12, sp
  03a68	e92d0001	 stmdb       sp!, {r0}
  03a6c	e92d5000	 stmdb       sp!, {r12, lr}
  03a70	e24dd00c	 sub         sp, sp, #0xC
  03a74		 |$M37544|

; 1544 :     DWORD nCount = 0;

  03a74	e3a03000	 mov         r3, #0
  03a78	e58d3000	 str         r3, [sp]

; 1545 : 
; 1546 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S(0x%08x)\r\n", __FUNCTION__, pDevice));

  03a7c	e59f30e4	 ldr         r3, [pc, #0xE4]
  03a80	e5933440	 ldr         r3, [r3, #0x440]
  03a84	e3130004	 tst         r3, #4
  03a88	0a000006	 beq         |$LN5@mcbsp_Side@4|
  03a8c	e59d2014	 ldr         r2, [sp, #0x14]
  03a90	e59f10cc	 ldr         r1, [pc, #0xCC]
  03a94	e59f00d0	 ldr         r0, [pc, #0xD0]
  03a98	eb000000	 bl          NKDbgPrintfW
  03a9c	e3a03001	 mov         r3, #1
  03aa0	e58d3004	 str         r3, [sp, #4]
  03aa4	ea000001	 b           |$LN6@mcbsp_Side@4|
  03aa8		 |$LN5@mcbsp_Side@4|
  03aa8	e3a03000	 mov         r3, #0
  03aac	e58d3004	 str         r3, [sp, #4]
  03ab0		 |$LN6@mcbsp_Side@4|

; 1547 : 
; 1548 :     // Disable side tone before writing FIR coefficients reason refer TRM
; 1549 :     //
; 1550 :     mcbsp_SideToneDisable(pDevice);

  03ab0	e59d0014	 ldr         r0, [sp, #0x14]
  03ab4	eb000000	 bl          mcbsp_SideToneDisable

; 1551 : 
; 1552 :     // write reset before FIR coeff is written
; 1553 :     //
; 1554 :     mcbsp_SideToneWriteReset(pDevice);

  03ab8	e59d0014	 ldr         r0, [sp, #0x14]
  03abc	eb000000	 bl          mcbsp_SideToneWriteReset
  03ac0		 |$LN2@mcbsp_Side@4|

; 1555 : 
; 1556 :     // Write FIR coefficients
; 1557 :     //
; 1558 :     while ((INREG32(&pDevice->pSideToneRegs->SSELCR) &
; 1559 :         ST_SSELCR_COEFFWRDONE) == 0)

  03ac0	e59d3014	 ldr         r3, [sp, #0x14]
  03ac4	e283306c	 add         r3, r3, #0x6C
  03ac8	e5933000	 ldr         r3, [r3]
  03acc	e283302c	 add         r3, r3, #0x2C
  03ad0	e5933000	 ldr         r3, [r3]
  03ad4	e3130004	 tst         r3, #4
  03ad8	1a00000f	 bne         |$LN1@mcbsp_Side@4|

; 1560 :         {
; 1561 :         OUTREG32(&pDevice->pSideToneRegs->SFIRCR,
; 1562 :             ST_SFIRCR_FIRCOEFF(pDevice->sideToneFIRCoeffWrite[++nCount]));

  03adc	e59d3000	 ldr         r3, [sp]
  03ae0	e2833001	 add         r3, r3, #1
  03ae4	e58d3000	 str         r3, [sp]
  03ae8	e59d3014	 ldr         r3, [sp, #0x14]
  03aec	e283306c	 add         r3, r3, #0x6C
  03af0	e5933000	 ldr         r3, [r3]
  03af4	e2830028	 add         r0, r3, #0x28
  03af8	e59d1000	 ldr         r1, [sp]
  03afc	e3a03004	 mov         r3, #4
  03b00	e0020391	 mul         r2, r1, r3
  03b04	e59d3014	 ldr         r3, [sp, #0x14]
  03b08	e2833f5b	 add         r3, r3, #0x5B, 30
  03b0c	e0833002	 add         r3, r3, r2
  03b10	e5933000	 ldr         r3, [r3]
  03b14	e5803000	 str         r3, [r0]

; 1563 :         };

  03b18	eaffffe8	 b           |$LN2@mcbsp_Side@4|
  03b1c		 |$LN1@mcbsp_Side@4|

; 1564 : 
; 1565 :     // After FIR coeff write enable the side tone.
; 1566 :     //
; 1567 :     mcbsp_SideToneEnable(pDevice);

  03b1c	e59d0014	 ldr         r0, [sp, #0x14]
  03b20	eb000000	 bl          mcbsp_SideToneEnable

; 1568 : 
; 1569 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S\r\n", __FUNCTION__));

  03b24	e59f303c	 ldr         r3, [pc, #0x3C]
  03b28	e5933440	 ldr         r3, [r3, #0x440]
  03b2c	e3130004	 tst         r3, #4
  03b30	0a000005	 beq         |$LN7@mcbsp_Side@4|
  03b34	e59f1028	 ldr         r1, [pc, #0x28]
  03b38	e59f0020	 ldr         r0, [pc, #0x20]
  03b3c	eb000000	 bl          NKDbgPrintfW
  03b40	e3a03001	 mov         r3, #1
  03b44	e58d3008	 str         r3, [sp, #8]
  03b48	ea000001	 b           |$LN8@mcbsp_Side@4|
  03b4c		 |$LN7@mcbsp_Side@4|
  03b4c	e3a03000	 mov         r3, #0
  03b50	e58d3008	 str         r3, [sp, #8]
  03b54		 |$LN8@mcbsp_Side@4|

; 1570 : }

  03b54	e28dd00c	 add         sp, sp, #0xC
  03b58	e89d6000	 ldmia       sp, {sp, lr}
  03b5c	e12fff1e	 bx          lr
  03b60		 |$LN12@mcbsp_Side@4|
  03b60		 |$LN13@mcbsp_Side@4|
  03b60	00000000	 DCD         |??_C@_1BE@LFFACMJN@?$AAM?$AAC?$AAP?$AA?3?$AA?9?$AA?$CF?$AAS?$AA?$AN?$AA?6?$AA?$AA@|
  03b64		 |$LN14@mcbsp_Side@4|
  03b64	00000000	 DCD         |??_C@_0BM@BJGCAIL@mcbsp_SideToneWriteFIRCoeff?$AA@|
  03b68		 |$LN15@mcbsp_Side@4|
  03b68	00000000	 DCD         |dpCurSettings|
  03b6c		 |$LN16@mcbsp_Side@4|
  03b6c	00000000	 DCD         |??_C@_1CE@FCDKFBGI@?$AAM?$AAC?$AAP?$AA?3?$AA?$CL?$AA?$CF?$AAS?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  03b70		 |$M37545|

			 ENDP  ; |mcbsp_SideToneWriteFIRCoeff|

	EXPORT	|mcbsp_SideToneReadReset|
	EXPORT	|??_C@_0BL@LHIHLHBJ@mcbsp_SideToneReadFIRCoeff?$AA@| [ DATA ] ; `string'
	EXPORT	|mcbsp_SideToneReadFIRCoeff|

  000b8			 AREA	 |.pdata|, PDATA
|$T37561| DCD	|$LN11@mcbsp_Side@5|
	DCD	0x40004304

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BL@LHIHLHBJ@mcbsp_SideToneReadFIRCoeff?$AA@| DCB "mcbsp_SideToneR"
	DCB	"eadFIRCoeff", 0x0			; `string'
; Function compile flags: /Odtp

  03b70			 AREA	 |.text|, CODE, ARM

  03b70		 |mcbsp_SideToneReadFIRCoeff| PROC

; 1580 : {

  03b70		 |$LN11@mcbsp_Side@5|
  03b70	e1a0c00d	 mov         r12, sp
  03b74	e92d0001	 stmdb       sp!, {r0}
  03b78	e92d5000	 stmdb       sp!, {r12, lr}
  03b7c	e24dd00c	 sub         sp, sp, #0xC
  03b80		 |$M37558|

; 1581 :     DWORD nCount = 0;

  03b80	e3a03000	 mov         r3, #0
  03b84	e58d3000	 str         r3, [sp]

; 1582 : 
; 1583 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S(0x%08x)\r\n", __FUNCTION__, pDevice));

  03b88	e59f30e4	 ldr         r3, [pc, #0xE4]
  03b8c	e5933440	 ldr         r3, [r3, #0x440]
  03b90	e3130004	 tst         r3, #4
  03b94	0a000006	 beq         |$LN5@mcbsp_Side@5|
  03b98	e59d2014	 ldr         r2, [sp, #0x14]
  03b9c	e59f10cc	 ldr         r1, [pc, #0xCC]
  03ba0	e59f00d0	 ldr         r0, [pc, #0xD0]
  03ba4	eb000000	 bl          NKDbgPrintfW
  03ba8	e3a03001	 mov         r3, #1
  03bac	e58d3004	 str         r3, [sp, #4]
  03bb0	ea000001	 b           |$LN6@mcbsp_Side@5|
  03bb4		 |$LN5@mcbsp_Side@5|
  03bb4	e3a03000	 mov         r3, #0
  03bb8	e58d3004	 str         r3, [sp, #4]
  03bbc		 |$LN6@mcbsp_Side@5|

; 1584 : 
; 1585 :     // Disable side tone before reading FIR coefficients reason refer TRM
; 1586 :     //
; 1587 :     mcbsp_SideToneDisable(pDevice);

  03bbc	e59d0014	 ldr         r0, [sp, #0x14]
  03bc0	eb000000	 bl          mcbsp_SideToneDisable

; 1588 : 
; 1589 :     // Read reset
; 1590 :     //
; 1591 :     mcbsp_SideToneReadReset(pDevice);

  03bc4	e59d0014	 ldr         r0, [sp, #0x14]
  03bc8	eb000000	 bl          mcbsp_SideToneReadReset
  03bcc		 |$LN2@mcbsp_Side@5|

; 1592 : 
; 1593 :     // Read FIR coefficients
; 1594 :     //
; 1595 :     while ((INREG32(&pDevice->pSideToneRegs->SSELCR) &
; 1596 :         ST_SSELCR_COEFFWRDONE) == 0)

  03bcc	e59d3014	 ldr         r3, [sp, #0x14]
  03bd0	e283306c	 add         r3, r3, #0x6C
  03bd4	e5933000	 ldr         r3, [r3]
  03bd8	e283302c	 add         r3, r3, #0x2C
  03bdc	e5933000	 ldr         r3, [r3]
  03be0	e3130004	 tst         r3, #4
  03be4	1a00000f	 bne         |$LN1@mcbsp_Side@5|

; 1597 :         {
; 1598 :         pDevice->sideToneFIRCoeffRead[++nCount] =
; 1599 :             INREG32(&pDevice->pSideToneRegs->SFIRCR);

  03be8	e59d3000	 ldr         r3, [sp]
  03bec	e2833001	 add         r3, r3, #1
  03bf0	e58d3000	 str         r3, [sp]
  03bf4	e59d1000	 ldr         r1, [sp]
  03bf8	e3a03004	 mov         r3, #4
  03bfc	e0020391	 mul         r2, r1, r3
  03c00	e59d3014	 ldr         r3, [sp, #0x14]
  03c04	e2833fdb	 add         r3, r3, #0xDB, 30
  03c08	e0832002	 add         r2, r3, r2
  03c0c	e59d3014	 ldr         r3, [sp, #0x14]
  03c10	e283306c	 add         r3, r3, #0x6C
  03c14	e5933000	 ldr         r3, [r3]
  03c18	e2833028	 add         r3, r3, #0x28
  03c1c	e5933000	 ldr         r3, [r3]
  03c20	e5823000	 str         r3, [r2]

; 1600 :         };

  03c24	eaffffe8	 b           |$LN2@mcbsp_Side@5|
  03c28		 |$LN1@mcbsp_Side@5|

; 1601 : 
; 1602 :     // After FIR coeff write enable the side tone.
; 1603 :     //
; 1604 :     mcbsp_SideToneEnable(pDevice);

  03c28	e59d0014	 ldr         r0, [sp, #0x14]
  03c2c	eb000000	 bl          mcbsp_SideToneEnable

; 1605 : 
; 1606 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S\r\n", __FUNCTION__));

  03c30	e59f303c	 ldr         r3, [pc, #0x3C]
  03c34	e5933440	 ldr         r3, [r3, #0x440]
  03c38	e3130004	 tst         r3, #4
  03c3c	0a000005	 beq         |$LN7@mcbsp_Side@5|
  03c40	e59f1028	 ldr         r1, [pc, #0x28]
  03c44	e59f0020	 ldr         r0, [pc, #0x20]
  03c48	eb000000	 bl          NKDbgPrintfW
  03c4c	e3a03001	 mov         r3, #1
  03c50	e58d3008	 str         r3, [sp, #8]
  03c54	ea000001	 b           |$LN8@mcbsp_Side@5|
  03c58		 |$LN7@mcbsp_Side@5|
  03c58	e3a03000	 mov         r3, #0
  03c5c	e58d3008	 str         r3, [sp, #8]
  03c60		 |$LN8@mcbsp_Side@5|

; 1607 : }

  03c60	e28dd00c	 add         sp, sp, #0xC
  03c64	e89d6000	 ldmia       sp, {sp, lr}
  03c68	e12fff1e	 bx          lr
  03c6c		 |$LN12@mcbsp_Side@5|
  03c6c		 |$LN13@mcbsp_Side@5|
  03c6c	00000000	 DCD         |??_C@_1BE@LFFACMJN@?$AAM?$AAC?$AAP?$AA?3?$AA?9?$AA?$CF?$AAS?$AA?$AN?$AA?6?$AA?$AA@|
  03c70		 |$LN14@mcbsp_Side@5|
  03c70	00000000	 DCD         |??_C@_0BL@LHIHLHBJ@mcbsp_SideToneReadFIRCoeff?$AA@|
  03c74		 |$LN15@mcbsp_Side@5|
  03c74	00000000	 DCD         |dpCurSettings|
  03c78		 |$LN16@mcbsp_Side@5|
  03c78	00000000	 DCD         |??_C@_1CE@FCDKFBGI@?$AAM?$AAC?$AAP?$AA?3?$AA?$CL?$AA?$CF?$AAS?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  03c7c		 |$M37559|

			 ENDP  ; |mcbsp_SideToneReadFIRCoeff|

	EXPORT	|??_C@_0BJ@KDMEDKCC@mcbsp_SideToneWriteReset?$AA@| [ DATA ] ; `string'

  000c0			 AREA	 |.pdata|, PDATA
|$T37575| DCD	|$LN9@mcbsp_Side@6|
	DCD	0x40005504

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BJ@KDMEDKCC@mcbsp_SideToneWriteReset?$AA@| DCB "mcbsp_SideToneWri"
	DCB	"teReset", 0x0				; `string'
; Function compile flags: /Odtp

  03c7c			 AREA	 |.text|, CODE, ARM

  03c7c		 |mcbsp_SideToneWriteReset| PROC

; 1617 : {

  03c7c		 |$LN9@mcbsp_Side@6|
  03c7c	e1a0c00d	 mov         r12, sp
  03c80	e92d0001	 stmdb       sp!, {r0}
  03c84	e92d5000	 stmdb       sp!, {r12, lr}
  03c88	e24dd00c	 sub         sp, sp, #0xC
  03c8c		 |$M37572|

; 1618 :     DWORD regVal = 0;

  03c8c	e3a03000	 mov         r3, #0
  03c90	e58d3000	 str         r3, [sp]

; 1619 : 
; 1620 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S(0x%08x)\r\n", __FUNCTION__, pDevice));

  03c94	e59f312c	 ldr         r3, [pc, #0x12C]
  03c98	e5933440	 ldr         r3, [r3, #0x440]
  03c9c	e3130004	 tst         r3, #4
  03ca0	0a000006	 beq         |$LN3@mcbsp_Side@6|
  03ca4	e59d2014	 ldr         r2, [sp, #0x14]
  03ca8	e59f1114	 ldr         r1, [pc, #0x114]
  03cac	e59f0118	 ldr         r0, [pc, #0x118]
  03cb0	eb000000	 bl          NKDbgPrintfW
  03cb4	e3a03001	 mov         r3, #1
  03cb8	e58d3004	 str         r3, [sp, #4]
  03cbc	ea000001	 b           |$LN4@mcbsp_Side@6|
  03cc0		 |$LN3@mcbsp_Side@6|
  03cc0	e3a03000	 mov         r3, #0
  03cc4	e58d3004	 str         r3, [sp, #4]
  03cc8		 |$LN4@mcbsp_Side@6|

; 1621 : 
; 1622 :     // Reset Coeff write done bit which was set for previous write
; 1623 :     //
; 1624 :     regVal = INREG32(&pDevice->pSideToneRegs->SSELCR);

  03cc8	e59d3014	 ldr         r3, [sp, #0x14]
  03ccc	e283306c	 add         r3, r3, #0x6C
  03cd0	e5933000	 ldr         r3, [r3]
  03cd4	e283302c	 add         r3, r3, #0x2C
  03cd8	e5933000	 ldr         r3, [r3]
  03cdc	e58d3000	 str         r3, [sp]

; 1625 :     regVal &= ~(ST_SSELCR_COEFFWRDONE);

  03ce0	e59d2000	 ldr         r2, [sp]
  03ce4	e3e03004	 mvn         r3, #4
  03ce8	e0023003	 and         r3, r2, r3
  03cec	e58d3000	 str         r3, [sp]

; 1626 :     OUTREG32(&pDevice->pSideToneRegs->SSELCR, regVal);

  03cf0	e59d3014	 ldr         r3, [sp, #0x14]
  03cf4	e283306c	 add         r3, r3, #0x6C
  03cf8	e5933000	 ldr         r3, [r3]
  03cfc	e283202c	 add         r2, r3, #0x2C
  03d00	e59d3000	 ldr         r3, [sp]
  03d04	e5823000	 str         r3, [r2]

; 1627 : 
; 1628 :     // API to Reset Coeff register for write process
; 1629 :     //
; 1630 :     regVal = INREG32(&pDevice->pSideToneRegs->SSELCR);

  03d08	e59d3014	 ldr         r3, [sp, #0x14]
  03d0c	e283306c	 add         r3, r3, #0x6C
  03d10	e5933000	 ldr         r3, [r3]
  03d14	e283302c	 add         r3, r3, #0x2C
  03d18	e5933000	 ldr         r3, [r3]
  03d1c	e58d3000	 str         r3, [sp]

; 1631 :     regVal &= ~(ST_SSELCR_COEFFWREN);

  03d20	e59d2000	 ldr         r2, [sp]
  03d24	e3e03002	 mvn         r3, #2
  03d28	e0023003	 and         r3, r2, r3
  03d2c	e58d3000	 str         r3, [sp]

; 1632 :     OUTREG32(&pDevice->pSideToneRegs->SSELCR, regVal);

  03d30	e59d3014	 ldr         r3, [sp, #0x14]
  03d34	e283306c	 add         r3, r3, #0x6C
  03d38	e5933000	 ldr         r3, [r3]
  03d3c	e283202c	 add         r2, r3, #0x2C
  03d40	e59d3000	 ldr         r3, [sp]
  03d44	e5823000	 str         r3, [r2]

; 1633 : 
; 1634 :     regVal = INREG32(&pDevice->pSideToneRegs->SSELCR);

  03d48	e59d3014	 ldr         r3, [sp, #0x14]
  03d4c	e283306c	 add         r3, r3, #0x6C
  03d50	e5933000	 ldr         r3, [r3]
  03d54	e283302c	 add         r3, r3, #0x2C
  03d58	e5933000	 ldr         r3, [r3]
  03d5c	e58d3000	 str         r3, [sp]

; 1635 :     regVal |= ST_SSELCR_COEFFWREN;

  03d60	e59d3000	 ldr         r3, [sp]
  03d64	e3833002	 orr         r3, r3, #2
  03d68	e58d3000	 str         r3, [sp]

; 1636 :     OUTREG32(&pDevice->pSideToneRegs->SSELCR, regVal);

  03d6c	e59d3014	 ldr         r3, [sp, #0x14]
  03d70	e283306c	 add         r3, r3, #0x6C
  03d74	e5933000	 ldr         r3, [r3]
  03d78	e283202c	 add         r2, r3, #0x2C
  03d7c	e59d3000	 ldr         r3, [sp]
  03d80	e5823000	 str         r3, [r2]

; 1637 : 
; 1638 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S\r\n", __FUNCTION__));

  03d84	e59f303c	 ldr         r3, [pc, #0x3C]
  03d88	e5933440	 ldr         r3, [r3, #0x440]
  03d8c	e3130004	 tst         r3, #4
  03d90	0a000005	 beq         |$LN5@mcbsp_Side@6|
  03d94	e59f1028	 ldr         r1, [pc, #0x28]
  03d98	e59f0020	 ldr         r0, [pc, #0x20]
  03d9c	eb000000	 bl          NKDbgPrintfW
  03da0	e3a03001	 mov         r3, #1
  03da4	e58d3008	 str         r3, [sp, #8]
  03da8	ea000001	 b           |$LN6@mcbsp_Side@6|
  03dac		 |$LN5@mcbsp_Side@6|
  03dac	e3a03000	 mov         r3, #0
  03db0	e58d3008	 str         r3, [sp, #8]
  03db4		 |$LN6@mcbsp_Side@6|

; 1639 : }

  03db4	e28dd00c	 add         sp, sp, #0xC
  03db8	e89d6000	 ldmia       sp, {sp, lr}
  03dbc	e12fff1e	 bx          lr
  03dc0		 |$LN10@mcbsp_Side@6|
  03dc0		 |$LN11@mcbsp_Side@6|
  03dc0	00000000	 DCD         |??_C@_1BE@LFFACMJN@?$AAM?$AAC?$AAP?$AA?3?$AA?9?$AA?$CF?$AAS?$AA?$AN?$AA?6?$AA?$AA@|
  03dc4		 |$LN12@mcbsp_Side@6|
  03dc4	00000000	 DCD         |??_C@_0BJ@KDMEDKCC@mcbsp_SideToneWriteReset?$AA@|
  03dc8		 |$LN13@mcbsp_Side@6|
  03dc8	00000000	 DCD         |dpCurSettings|
  03dcc		 |$LN14@mcbsp_Side@6|
  03dcc	00000000	 DCD         |??_C@_1CE@FCDKFBGI@?$AAM?$AAC?$AAP?$AA?3?$AA?$CL?$AA?$CF?$AAS?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  03dd0		 |$M37573|

			 ENDP  ; |mcbsp_SideToneWriteReset|

	EXPORT	|??_C@_0BI@IBJPCHNC@mcbsp_SideToneReadReset?$AA@| [ DATA ] ; `string'

  000c8			 AREA	 |.pdata|, PDATA
|$T37589| DCD	|$LN9@mcbsp_Side@7|
	DCD	0x40005504

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BI@IBJPCHNC@mcbsp_SideToneReadReset?$AA@| DCB "mcbsp_SideToneRead"
	DCB	"Reset", 0x0				; `string'
; Function compile flags: /Odtp

  03dd0			 AREA	 |.text|, CODE, ARM

  03dd0		 |mcbsp_SideToneReadReset| PROC

; 1649 : {

  03dd0		 |$LN9@mcbsp_Side@7|
  03dd0	e1a0c00d	 mov         r12, sp
  03dd4	e92d0001	 stmdb       sp!, {r0}
  03dd8	e92d5000	 stmdb       sp!, {r12, lr}
  03ddc	e24dd00c	 sub         sp, sp, #0xC
  03de0		 |$M37586|

; 1650 :     DWORD regVal = 0;

  03de0	e3a03000	 mov         r3, #0
  03de4	e58d3000	 str         r3, [sp]

; 1651 : 
; 1652 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S(0x%08x)\r\n", __FUNCTION__, pDevice));

  03de8	e59f312c	 ldr         r3, [pc, #0x12C]
  03dec	e5933440	 ldr         r3, [r3, #0x440]
  03df0	e3130004	 tst         r3, #4
  03df4	0a000006	 beq         |$LN3@mcbsp_Side@7|
  03df8	e59d2014	 ldr         r2, [sp, #0x14]
  03dfc	e59f1114	 ldr         r1, [pc, #0x114]
  03e00	e59f0118	 ldr         r0, [pc, #0x118]
  03e04	eb000000	 bl          NKDbgPrintfW
  03e08	e3a03001	 mov         r3, #1
  03e0c	e58d3004	 str         r3, [sp, #4]
  03e10	ea000001	 b           |$LN4@mcbsp_Side@7|
  03e14		 |$LN3@mcbsp_Side@7|
  03e14	e3a03000	 mov         r3, #0
  03e18	e58d3004	 str         r3, [sp, #4]
  03e1c		 |$LN4@mcbsp_Side@7|

; 1653 : 
; 1654 :     // Reset Coeff write done bit which was set for previous read
; 1655 :     //
; 1656 :     regVal = INREG32(&pDevice->pSideToneRegs->SSELCR);

  03e1c	e59d3014	 ldr         r3, [sp, #0x14]
  03e20	e283306c	 add         r3, r3, #0x6C
  03e24	e5933000	 ldr         r3, [r3]
  03e28	e283302c	 add         r3, r3, #0x2C
  03e2c	e5933000	 ldr         r3, [r3]
  03e30	e58d3000	 str         r3, [sp]

; 1657 :     regVal &= ~(ST_SSELCR_COEFFWRDONE);

  03e34	e59d2000	 ldr         r2, [sp]
  03e38	e3e03004	 mvn         r3, #4
  03e3c	e0023003	 and         r3, r2, r3
  03e40	e58d3000	 str         r3, [sp]

; 1658 :     OUTREG32(&pDevice->pSideToneRegs->SSELCR, regVal);

  03e44	e59d3014	 ldr         r3, [sp, #0x14]
  03e48	e283306c	 add         r3, r3, #0x6C
  03e4c	e5933000	 ldr         r3, [r3]
  03e50	e283202c	 add         r2, r3, #0x2C
  03e54	e59d3000	 ldr         r3, [sp]
  03e58	e5823000	 str         r3, [r2]

; 1659 : 
; 1660 :     // API to Reset Coeff register for read process
; 1661 :     //
; 1662 :     regVal = INREG32(&pDevice->pSideToneRegs->SSELCR);

  03e5c	e59d3014	 ldr         r3, [sp, #0x14]
  03e60	e283306c	 add         r3, r3, #0x6C
  03e64	e5933000	 ldr         r3, [r3]
  03e68	e283302c	 add         r3, r3, #0x2C
  03e6c	e5933000	 ldr         r3, [r3]
  03e70	e58d3000	 str         r3, [sp]

; 1663 :     regVal |= ST_SSELCR_COEFFWREN;

  03e74	e59d3000	 ldr         r3, [sp]
  03e78	e3833002	 orr         r3, r3, #2
  03e7c	e58d3000	 str         r3, [sp]

; 1664 :     OUTREG32(&pDevice->pSideToneRegs->SSELCR, regVal);

  03e80	e59d3014	 ldr         r3, [sp, #0x14]
  03e84	e283306c	 add         r3, r3, #0x6C
  03e88	e5933000	 ldr         r3, [r3]
  03e8c	e283202c	 add         r2, r3, #0x2C
  03e90	e59d3000	 ldr         r3, [sp]
  03e94	e5823000	 str         r3, [r2]

; 1665 : 
; 1666 :     regVal = INREG32(&pDevice->pSideToneRegs->SSELCR);

  03e98	e59d3014	 ldr         r3, [sp, #0x14]
  03e9c	e283306c	 add         r3, r3, #0x6C
  03ea0	e5933000	 ldr         r3, [r3]
  03ea4	e283302c	 add         r3, r3, #0x2C
  03ea8	e5933000	 ldr         r3, [r3]
  03eac	e58d3000	 str         r3, [sp]

; 1667 :     regVal &= ~(ST_SSELCR_COEFFWREN);

  03eb0	e59d2000	 ldr         r2, [sp]
  03eb4	e3e03002	 mvn         r3, #2
  03eb8	e0023003	 and         r3, r2, r3
  03ebc	e58d3000	 str         r3, [sp]

; 1668 :     OUTREG32(&pDevice->pSideToneRegs->SSELCR, regVal);

  03ec0	e59d3014	 ldr         r3, [sp, #0x14]
  03ec4	e283306c	 add         r3, r3, #0x6C
  03ec8	e5933000	 ldr         r3, [r3]
  03ecc	e283202c	 add         r2, r3, #0x2C
  03ed0	e59d3000	 ldr         r3, [sp]
  03ed4	e5823000	 str         r3, [r2]

; 1669 : 
; 1670 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S\r\n", __FUNCTION__));

  03ed8	e59f303c	 ldr         r3, [pc, #0x3C]
  03edc	e5933440	 ldr         r3, [r3, #0x440]
  03ee0	e3130004	 tst         r3, #4
  03ee4	0a000005	 beq         |$LN5@mcbsp_Side@7|
  03ee8	e59f1028	 ldr         r1, [pc, #0x28]
  03eec	e59f0020	 ldr         r0, [pc, #0x20]
  03ef0	eb000000	 bl          NKDbgPrintfW
  03ef4	e3a03001	 mov         r3, #1
  03ef8	e58d3008	 str         r3, [sp, #8]
  03efc	ea000001	 b           |$LN6@mcbsp_Side@7|
  03f00		 |$LN5@mcbsp_Side@7|
  03f00	e3a03000	 mov         r3, #0
  03f04	e58d3008	 str         r3, [sp, #8]
  03f08		 |$LN6@mcbsp_Side@7|

; 1671 : }

  03f08	e28dd00c	 add         sp, sp, #0xC
  03f0c	e89d6000	 ldmia       sp, {sp, lr}
  03f10	e12fff1e	 bx          lr
  03f14		 |$LN10@mcbsp_Side@7|
  03f14		 |$LN11@mcbsp_Side@7|
  03f14	00000000	 DCD         |??_C@_1BE@LFFACMJN@?$AAM?$AAC?$AAP?$AA?3?$AA?9?$AA?$CF?$AAS?$AA?$AN?$AA?6?$AA?$AA@|
  03f18		 |$LN12@mcbsp_Side@7|
  03f18	00000000	 DCD         |??_C@_0BI@IBJPCHNC@mcbsp_SideToneReadReset?$AA@|
  03f1c		 |$LN13@mcbsp_Side@7|
  03f1c	00000000	 DCD         |dpCurSettings|
  03f20		 |$LN14@mcbsp_Side@7|
  03f20	00000000	 DCD         |??_C@_1CE@FCDKFBGI@?$AAM?$AAC?$AAP?$AA?3?$AA?$CL?$AA?$CF?$AAS?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  03f24		 |$M37587|

			 ENDP  ; |mcbsp_SideToneReadReset|

	EXPORT	|??_C@_0BH@HIHIIDHP@mcbsp_SideToneAutoIdle?$AA@| [ DATA ] ; `string'

  000d0			 AREA	 |.pdata|, PDATA
|$T37603| DCD	|$LN9@mcbsp_Side@8|
	DCD	0x40002a04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BH@HIHIIDHP@mcbsp_SideToneAutoIdle?$AA@| DCB "mcbsp_SideToneAutoI"
	DCB	"dle", 0x0				; `string'
; Function compile flags: /Odtp

  03f24			 AREA	 |.text|, CODE, ARM

  03f24		 |mcbsp_SideToneAutoIdle| PROC

; 1681 : {

  03f24		 |$LN9@mcbsp_Side@8|
  03f24	e1a0c00d	 mov         r12, sp
  03f28	e92d0001	 stmdb       sp!, {r0}
  03f2c	e92d5000	 stmdb       sp!, {r12, lr}
  03f30	e24dd008	 sub         sp, sp, #8
  03f34		 |$M37600|

; 1682 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S(0x%08x)\r\n", __FUNCTION__, pDevice));

  03f34	e59f3088	 ldr         r3, [pc, #0x88]
  03f38	e5933440	 ldr         r3, [r3, #0x440]
  03f3c	e3130004	 tst         r3, #4
  03f40	0a000006	 beq         |$LN3@mcbsp_Side@8|
  03f44	e59d2010	 ldr         r2, [sp, #0x10]
  03f48	e59f1070	 ldr         r1, [pc, #0x70]
  03f4c	e59f0074	 ldr         r0, [pc, #0x74]
  03f50	eb000000	 bl          NKDbgPrintfW
  03f54	e3a03001	 mov         r3, #1
  03f58	e58d3000	 str         r3, [sp]
  03f5c	ea000001	 b           |$LN4@mcbsp_Side@8|
  03f60		 |$LN3@mcbsp_Side@8|
  03f60	e3a03000	 mov         r3, #0
  03f64	e58d3000	 str         r3, [sp]
  03f68		 |$LN4@mcbsp_Side@8|

; 1683 : 
; 1684 :     // API for sidetone to enable/disable auto idle mode
; 1685 :     //
; 1686 :     OUTREG32(&pDevice->pSideToneRegs->SYSCONFIG, ST_SYSCONFIG_AUTOIDLE);

  03f68	e59d3010	 ldr         r3, [sp, #0x10]
  03f6c	e283306c	 add         r3, r3, #0x6C
  03f70	e5933000	 ldr         r3, [r3]
  03f74	e2832010	 add         r2, r3, #0x10
  03f78	e3a03001	 mov         r3, #1
  03f7c	e5823000	 str         r3, [r2]

; 1687 : 
; 1688 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S\r\n", __FUNCTION__));

  03f80	e59f303c	 ldr         r3, [pc, #0x3C]
  03f84	e5933440	 ldr         r3, [r3, #0x440]
  03f88	e3130004	 tst         r3, #4
  03f8c	0a000005	 beq         |$LN5@mcbsp_Side@8|
  03f90	e59f1028	 ldr         r1, [pc, #0x28]
  03f94	e59f0020	 ldr         r0, [pc, #0x20]
  03f98	eb000000	 bl          NKDbgPrintfW
  03f9c	e3a03001	 mov         r3, #1
  03fa0	e58d3004	 str         r3, [sp, #4]
  03fa4	ea000001	 b           |$LN6@mcbsp_Side@8|
  03fa8		 |$LN5@mcbsp_Side@8|
  03fa8	e3a03000	 mov         r3, #0
  03fac	e58d3004	 str         r3, [sp, #4]
  03fb0		 |$LN6@mcbsp_Side@8|

; 1689 : }

  03fb0	e28dd008	 add         sp, sp, #8
  03fb4	e89d6000	 ldmia       sp, {sp, lr}
  03fb8	e12fff1e	 bx          lr
  03fbc		 |$LN10@mcbsp_Side@8|
  03fbc		 |$LN11@mcbsp_Side@8|
  03fbc	00000000	 DCD         |??_C@_1BE@LFFACMJN@?$AAM?$AAC?$AAP?$AA?3?$AA?9?$AA?$CF?$AAS?$AA?$AN?$AA?6?$AA?$AA@|
  03fc0		 |$LN12@mcbsp_Side@8|
  03fc0	00000000	 DCD         |??_C@_0BH@HIHIIDHP@mcbsp_SideToneAutoIdle?$AA@|
  03fc4		 |$LN13@mcbsp_Side@8|
  03fc4	00000000	 DCD         |dpCurSettings|
  03fc8		 |$LN14@mcbsp_Side@8|
  03fc8	00000000	 DCD         |??_C@_1CE@FCDKFBGI@?$AAM?$AAC?$AAP?$AA?3?$AA?$CL?$AA?$CF?$AAS?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  03fcc		 |$M37601|

			 ENDP  ; |mcbsp_SideToneAutoIdle|

	EXPORT	|??_C@_0BO@EIAOHDMC@mcbsp_SideToneInterruptEnable?$AA@| [ DATA ] ; `string'
	EXPORT	|mcbsp_SideToneInterruptEnable|

  000d8			 AREA	 |.pdata|, PDATA
|$T37617| DCD	|$LN9@mcbsp_Side@9|
	DCD	0x40002a04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BO@EIAOHDMC@mcbsp_SideToneInterruptEnable?$AA@| DCB "mcbsp_SideTo"
	DCB	"neInterruptEnable", 0x0		; `string'
; Function compile flags: /Odtp

  03fcc			 AREA	 |.text|, CODE, ARM

  03fcc		 |mcbsp_SideToneInterruptEnable| PROC

; 1699 : {

  03fcc		 |$LN9@mcbsp_Side@9|
  03fcc	e1a0c00d	 mov         r12, sp
  03fd0	e92d0001	 stmdb       sp!, {r0}
  03fd4	e92d5000	 stmdb       sp!, {r12, lr}
  03fd8	e24dd008	 sub         sp, sp, #8
  03fdc		 |$M37614|

; 1700 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S(0x%08x)\r\n", __FUNCTION__, pDevice));

  03fdc	e59f3088	 ldr         r3, [pc, #0x88]
  03fe0	e5933440	 ldr         r3, [r3, #0x440]
  03fe4	e3130004	 tst         r3, #4
  03fe8	0a000006	 beq         |$LN3@mcbsp_Side@9|
  03fec	e59d2010	 ldr         r2, [sp, #0x10]
  03ff0	e59f1070	 ldr         r1, [pc, #0x70]
  03ff4	e59f0074	 ldr         r0, [pc, #0x74]
  03ff8	eb000000	 bl          NKDbgPrintfW
  03ffc	e3a03001	 mov         r3, #1
  04000	e58d3000	 str         r3, [sp]
  04004	ea000001	 b           |$LN4@mcbsp_Side@9|
  04008		 |$LN3@mcbsp_Side@9|
  04008	e3a03000	 mov         r3, #0
  0400c	e58d3000	 str         r3, [sp]
  04010		 |$LN4@mcbsp_Side@9|

; 1701 : 
; 1702 :     // API to enable sidetone interrupt
; 1703 :     //
; 1704 :     OUTREG32(&pDevice->pSideToneRegs->IRQENABLE, ST_IRQENABLE_OVRRERROREN);

  04010	e59d3010	 ldr         r3, [sp, #0x10]
  04014	e283306c	 add         r3, r3, #0x6C
  04018	e5933000	 ldr         r3, [r3]
  0401c	e283201c	 add         r2, r3, #0x1C
  04020	e3a03001	 mov         r3, #1
  04024	e5823000	 str         r3, [r2]

; 1705 : 
; 1706 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S\r\n", __FUNCTION__));

  04028	e59f303c	 ldr         r3, [pc, #0x3C]
  0402c	e5933440	 ldr         r3, [r3, #0x440]
  04030	e3130004	 tst         r3, #4
  04034	0a000005	 beq         |$LN5@mcbsp_Side@9|
  04038	e59f1028	 ldr         r1, [pc, #0x28]
  0403c	e59f0020	 ldr         r0, [pc, #0x20]
  04040	eb000000	 bl          NKDbgPrintfW
  04044	e3a03001	 mov         r3, #1
  04048	e58d3004	 str         r3, [sp, #4]
  0404c	ea000001	 b           |$LN6@mcbsp_Side@9|
  04050		 |$LN5@mcbsp_Side@9|
  04050	e3a03000	 mov         r3, #0
  04054	e58d3004	 str         r3, [sp, #4]
  04058		 |$LN6@mcbsp_Side@9|

; 1707 : }

  04058	e28dd008	 add         sp, sp, #8
  0405c	e89d6000	 ldmia       sp, {sp, lr}
  04060	e12fff1e	 bx          lr
  04064		 |$LN10@mcbsp_Side@9|
  04064		 |$LN11@mcbsp_Side@9|
  04064	00000000	 DCD         |??_C@_1BE@LFFACMJN@?$AAM?$AAC?$AAP?$AA?3?$AA?9?$AA?$CF?$AAS?$AA?$AN?$AA?6?$AA?$AA@|
  04068		 |$LN12@mcbsp_Side@9|
  04068	00000000	 DCD         |??_C@_0BO@EIAOHDMC@mcbsp_SideToneInterruptEnable?$AA@|
  0406c		 |$LN13@mcbsp_Side@9|
  0406c	00000000	 DCD         |dpCurSettings|
  04070		 |$LN14@mcbsp_Side@9|
  04070	00000000	 DCD         |??_C@_1CE@FCDKFBGI@?$AAM?$AAC?$AAP?$AA?3?$AA?$CL?$AA?$CF?$AAS?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  04074		 |$M37615|

			 ENDP  ; |mcbsp_SideToneInterruptEnable|

	EXPORT	|??_C@_0BO@JEFANOKA@mcbsp_SideToneInterruptStatus?$AA@| [ DATA ] ; `string'
	EXPORT	|mcbsp_SideToneInterruptStatus|

  000e0			 AREA	 |.pdata|, PDATA
|$T37631| DCD	|$LN9@mcbsp_Side@10|
	DCD	0x40002a04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BO@JEFANOKA@mcbsp_SideToneInterruptStatus?$AA@| DCB "mcbsp_SideTo"
	DCB	"neInterruptStatus", 0x0		; `string'
; Function compile flags: /Odtp

  04074			 AREA	 |.text|, CODE, ARM

  04074		 |mcbsp_SideToneInterruptStatus| PROC

; 1717 : {

  04074		 |$LN9@mcbsp_Side@10|
  04074	e1a0c00d	 mov         r12, sp
  04078	e92d0001	 stmdb       sp!, {r0}
  0407c	e92d5000	 stmdb       sp!, {r12, lr}
  04080	e24dd00c	 sub         sp, sp, #0xC
  04084		 |$M37628|

; 1718 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S(0x%08x)\r\n", __FUNCTION__, pDevice));

  04084	e59f3088	 ldr         r3, [pc, #0x88]
  04088	e5933440	 ldr         r3, [r3, #0x440]
  0408c	e3130004	 tst         r3, #4
  04090	0a000006	 beq         |$LN3@mcbsp_Side@10|
  04094	e59d2014	 ldr         r2, [sp, #0x14]
  04098	e59f1070	 ldr         r1, [pc, #0x70]
  0409c	e59f0074	 ldr         r0, [pc, #0x74]
  040a0	eb000000	 bl          NKDbgPrintfW
  040a4	e3a03001	 mov         r3, #1
  040a8	e58d3000	 str         r3, [sp]
  040ac	ea000001	 b           |$LN4@mcbsp_Side@10|
  040b0		 |$LN3@mcbsp_Side@10|
  040b0	e3a03000	 mov         r3, #0
  040b4	e58d3000	 str         r3, [sp]
  040b8		 |$LN4@mcbsp_Side@10|

; 1719 : 
; 1720 :     // API to read interrupt status.
; 1721 :     //
; 1722 :     INREG32(&pDevice->pSideToneRegs->IRQSTATUS);

  040b8	e59d3014	 ldr         r3, [sp, #0x14]
  040bc	e283306c	 add         r3, r3, #0x6C
  040c0	e5933000	 ldr         r3, [r3]
  040c4	e2833018	 add         r3, r3, #0x18
  040c8	e5933000	 ldr         r3, [r3]
  040cc	e58d3004	 str         r3, [sp, #4]

; 1723 : 
; 1724 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S\r\n", __FUNCTION__));

  040d0	e59f303c	 ldr         r3, [pc, #0x3C]
  040d4	e5933440	 ldr         r3, [r3, #0x440]
  040d8	e3130004	 tst         r3, #4
  040dc	0a000005	 beq         |$LN5@mcbsp_Side@10|
  040e0	e59f1028	 ldr         r1, [pc, #0x28]
  040e4	e59f0020	 ldr         r0, [pc, #0x20]
  040e8	eb000000	 bl          NKDbgPrintfW
  040ec	e3a03001	 mov         r3, #1
  040f0	e58d3008	 str         r3, [sp, #8]
  040f4	ea000001	 b           |$LN6@mcbsp_Side@10|
  040f8		 |$LN5@mcbsp_Side@10|
  040f8	e3a03000	 mov         r3, #0
  040fc	e58d3008	 str         r3, [sp, #8]
  04100		 |$LN6@mcbsp_Side@10|

; 1725 : }

  04100	e28dd00c	 add         sp, sp, #0xC
  04104	e89d6000	 ldmia       sp, {sp, lr}
  04108	e12fff1e	 bx          lr
  0410c		 |$LN10@mcbsp_Side@10|
  0410c		 |$LN11@mcbsp_Side@10|
  0410c	00000000	 DCD         |??_C@_1BE@LFFACMJN@?$AAM?$AAC?$AAP?$AA?3?$AA?9?$AA?$CF?$AAS?$AA?$AN?$AA?6?$AA?$AA@|
  04110		 |$LN12@mcbsp_Side@10|
  04110	00000000	 DCD         |??_C@_0BO@JEFANOKA@mcbsp_SideToneInterruptStatus?$AA@|
  04114		 |$LN13@mcbsp_Side@10|
  04114	00000000	 DCD         |dpCurSettings|
  04118		 |$LN14@mcbsp_Side@10|
  04118	00000000	 DCD         |??_C@_1CE@FCDKFBGI@?$AAM?$AAC?$AAP?$AA?3?$AA?$CL?$AA?$CF?$AAS?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  0411c		 |$M37629|

			 ENDP  ; |mcbsp_SideToneInterruptStatus|

	EXPORT	|??_C@_0BN@MEDNIMMN@mcbsp_SideToneResetInterrupt?$AA@| [ DATA ] ; `string'
	EXPORT	|mcbsp_SideToneResetInterrupt|

  000e8			 AREA	 |.pdata|, PDATA
|$T37645| DCD	|$LN9@mcbsp_Side@11|
	DCD	0x40002a04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BN@MEDNIMMN@mcbsp_SideToneResetInterrupt?$AA@| DCB "mcbsp_SideTon"
	DCB	"eResetInterrupt", 0x0			; `string'
; Function compile flags: /Odtp

  0411c			 AREA	 |.text|, CODE, ARM

  0411c		 |mcbsp_SideToneResetInterrupt| PROC

; 1735 : {

  0411c		 |$LN9@mcbsp_Side@11|
  0411c	e1a0c00d	 mov         r12, sp
  04120	e92d0001	 stmdb       sp!, {r0}
  04124	e92d5000	 stmdb       sp!, {r12, lr}
  04128	e24dd008	 sub         sp, sp, #8
  0412c		 |$M37642|

; 1736 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S(0x%08x)\r\n", __FUNCTION__, pDevice));

  0412c	e59f3088	 ldr         r3, [pc, #0x88]
  04130	e5933440	 ldr         r3, [r3, #0x440]
  04134	e3130004	 tst         r3, #4
  04138	0a000006	 beq         |$LN3@mcbsp_Side@11|
  0413c	e59d2010	 ldr         r2, [sp, #0x10]
  04140	e59f1070	 ldr         r1, [pc, #0x70]
  04144	e59f0074	 ldr         r0, [pc, #0x74]
  04148	eb000000	 bl          NKDbgPrintfW
  0414c	e3a03001	 mov         r3, #1
  04150	e58d3000	 str         r3, [sp]
  04154	ea000001	 b           |$LN4@mcbsp_Side@11|
  04158		 |$LN3@mcbsp_Side@11|
  04158	e3a03000	 mov         r3, #0
  0415c	e58d3000	 str         r3, [sp]
  04160		 |$LN4@mcbsp_Side@11|

; 1737 : 
; 1738 :     // API to reset IRQ Status register
; 1739 :     //
; 1740 :     OUTREG32(&pDevice->pSideToneRegs->IRQSTATUS, ST_IRQSTATUS_OVRRERROR);

  04160	e59d3010	 ldr         r3, [sp, #0x10]
  04164	e283306c	 add         r3, r3, #0x6C
  04168	e5933000	 ldr         r3, [r3]
  0416c	e2832018	 add         r2, r3, #0x18
  04170	e3a03001	 mov         r3, #1
  04174	e5823000	 str         r3, [r2]

; 1741 : 
; 1742 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S\r\n", __FUNCTION__));

  04178	e59f303c	 ldr         r3, [pc, #0x3C]
  0417c	e5933440	 ldr         r3, [r3, #0x440]
  04180	e3130004	 tst         r3, #4
  04184	0a000005	 beq         |$LN5@mcbsp_Side@11|
  04188	e59f1028	 ldr         r1, [pc, #0x28]
  0418c	e59f0020	 ldr         r0, [pc, #0x20]
  04190	eb000000	 bl          NKDbgPrintfW
  04194	e3a03001	 mov         r3, #1
  04198	e58d3004	 str         r3, [sp, #4]
  0419c	ea000001	 b           |$LN6@mcbsp_Side@11|
  041a0		 |$LN5@mcbsp_Side@11|
  041a0	e3a03000	 mov         r3, #0
  041a4	e58d3004	 str         r3, [sp, #4]
  041a8		 |$LN6@mcbsp_Side@11|

; 1743 : }

  041a8	e28dd008	 add         sp, sp, #8
  041ac	e89d6000	 ldmia       sp, {sp, lr}
  041b0	e12fff1e	 bx          lr
  041b4		 |$LN10@mcbsp_Side@11|
  041b4		 |$LN11@mcbsp_Side@11|
  041b4	00000000	 DCD         |??_C@_1BE@LFFACMJN@?$AAM?$AAC?$AAP?$AA?3?$AA?9?$AA?$CF?$AAS?$AA?$AN?$AA?6?$AA?$AA@|
  041b8		 |$LN12@mcbsp_Side@11|
  041b8	00000000	 DCD         |??_C@_0BN@MEDNIMMN@mcbsp_SideToneResetInterrupt?$AA@|
  041bc		 |$LN13@mcbsp_Side@11|
  041bc	00000000	 DCD         |dpCurSettings|
  041c0		 |$LN14@mcbsp_Side@11|
  041c0	00000000	 DCD         |??_C@_1CE@FCDKFBGI@?$AAM?$AAC?$AAP?$AA?3?$AA?$CL?$AA?$CF?$AAS?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  041c4		 |$M37643|

			 ENDP  ; |mcbsp_SideToneResetInterrupt|

	EXPORT	|??_C@_1CG@EGIBJING@?$AAS?$AAY?$AAS?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CE@BFHPMMGC@?$AAW?$AAA?$AAK?$AAE?$AAU?$AAP?$AAE?$AAN?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CE@KKNKNOOB@?$AAT?$AAH?$AAR?$AAS?$AAH?$AA2?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CE@FIINDDBJ@?$AAT?$AAH?$AAR?$AAS?$AAH?$AA1?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CE@CEEMHBJF@?$AAP?$AAC?$AAR?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CE@FEABPBOP@?$AAM?$AAC?$AAR?$AA1?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CE@BAKANEPH@?$AAM?$AAC?$AAR?$AA2?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CE@DHEPGLAF@?$AAS?$AAR?$AAG?$AAR?$AA1?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CE@DFJBGMCC@?$AAS?$AAR?$AAG?$AAR?$AA2?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CE@BIGABPLB@?$AAX?$AAC?$AAR?$AA1?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CE@FMMBDKKJ@?$AAX?$AAC?$AAR?$AA2?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CE@JJFAABPE@?$AAR?$AAC?$AAR?$AA1?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CE@NNPBCEOM@?$AAR?$AAC?$AAR?$AA2?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CE@PMBNDED@?$AAS?$AAP?$AAC?$AAR?$AA1?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CE@NBPNEGE@?$AAS?$AAP?$AAC?$AAR?$AA2?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|mcbsp_DumpReg|

  000f0			 AREA	 |.pdata|, PDATA
|$T37687| DCD	|$LN37@mcbsp_Dump|
	DCD	0x4000b704

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CG@EGIBJING@?$AAS?$AAY?$AAS?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "Y", 0x0, "S", 0x0, "C", 0x0, "O", 0x0, "N", 0x0, "F"
	DCB	0x0, "I", 0x0, "G", 0x0, " ", 0x0, ":", 0x0, " ", 0x0, "%"
	DCB	0x0, "0", 0x0, "8", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@BFHPMMGC@?$AAW?$AAA?$AAK?$AAE?$AAU?$AAP?$AAE?$AAN?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "W"
	DCB	0x0, "A", 0x0, "K", 0x0, "E", 0x0, "U", 0x0, "P", 0x0, "E"
	DCB	0x0, "N", 0x0, " ", 0x0, ":", 0x0, " ", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@KKNKNOOB@?$AAT?$AAH?$AAR?$AAS?$AAH?$AA2?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "T"
	DCB	0x0, "H", 0x0, "R", 0x0, "S", 0x0, "H", 0x0, "2", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, ":", 0x0, " ", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@FIINDDBJ@?$AAT?$AAH?$AAR?$AAS?$AAH?$AA1?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "T"
	DCB	0x0, "H", 0x0, "R", 0x0, "S", 0x0, "H", 0x0, "1", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, ":", 0x0, " ", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@CEEMHBJF@?$AAP?$AAC?$AAR?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "P"
	DCB	0x0, "C", 0x0, "R", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, ":", 0x0, " ", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@FEABPBOP@?$AAM?$AAC?$AAR?$AA1?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "M"
	DCB	0x0, "C", 0x0, "R", 0x0, "1", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, ":", 0x0, " ", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@BAKANEPH@?$AAM?$AAC?$AAR?$AA2?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "M"
	DCB	0x0, "C", 0x0, "R", 0x0, "2", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, ":", 0x0, " ", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@DHEPGLAF@?$AAS?$AAR?$AAG?$AAR?$AA1?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "R", 0x0, "G", 0x0, "R", 0x0, "1", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, ":", 0x0, " ", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@DFJBGMCC@?$AAS?$AAR?$AAG?$AAR?$AA2?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "R", 0x0, "G", 0x0, "R", 0x0, "2", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, ":", 0x0, " ", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@BIGABPLB@?$AAX?$AAC?$AAR?$AA1?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "X"
	DCB	0x0, "C", 0x0, "R", 0x0, "1", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, ":", 0x0, " ", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@FMMBDKKJ@?$AAX?$AAC?$AAR?$AA2?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "X"
	DCB	0x0, "C", 0x0, "R", 0x0, "2", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, ":", 0x0, " ", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@JJFAABPE@?$AAR?$AAC?$AAR?$AA1?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "R"
	DCB	0x0, "C", 0x0, "R", 0x0, "1", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, ":", 0x0, " ", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@NNPBCEOM@?$AAR?$AAC?$AAR?$AA2?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "R"
	DCB	0x0, "C", 0x0, "R", 0x0, "2", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, ":", 0x0, " ", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@PMBNDED@?$AAS?$AAP?$AAC?$AAR?$AA1?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "P", 0x0, "C", 0x0, "R", 0x0, "1", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, ":", 0x0, " ", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@NBPNEGE@?$AAS?$AAP?$AAC?$AAR?$AA2?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "P", 0x0, "C", 0x0, "R", 0x0, "2", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, ":", 0x0, " ", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  041c4			 AREA	 |.text|, CODE, ARM

  041c4		 |mcbsp_DumpReg| PROC

; 1755 : {

  041c4		 |$LN37@mcbsp_Dump|
  041c4	e1a0c00d	 mov         r12, sp
  041c8	e92d0003	 stmdb       sp!, {r0, r1}
  041cc	e92d5000	 stmdb       sp!, {r12, lr}
  041d0	e24dd044	 sub         sp, sp, #0x44
  041d4		 |$M37684|

; 1756 :     OMAP35XX_MCBSP_REGS_t *pMcbspRegs = pDevice->pMcbspRegs;

  041d4	e59d304c	 ldr         r3, [sp, #0x4C]
  041d8	e283301c	 add         r3, r3, #0x1C
  041dc	e5933000	 ldr         r3, [r3]
  041e0	e58d3000	 str         r3, [sp]

; 1757 : 
; 1758 :     RETAILMSG(1,(szMsg));

  041e4	e59d0050	 ldr         r0, [sp, #0x50]
  041e8	eb000000	 bl          NKDbgPrintfW
  041ec	e3a03001	 mov         r3, #1
  041f0	e58d3004	 str         r3, [sp, #4]
  041f4	ea000001	 b           |$LN4@mcbsp_Dump|
  041f8	e3a03000	 mov         r3, #0
  041fc	e58d3004	 str         r3, [sp, #4]
  04200		 |$LN4@mcbsp_Dump|

; 1759 :     RETAILMSG(1,(TEXT("SPCR2    : %08x\r\n"), INREG32(&pMcbspRegs->SPCR2)));

  04200	e59d3000	 ldr         r3, [sp]
  04204	e2833010	 add         r3, r3, #0x10
  04208	e5931000	 ldr         r1, [r3]
  0420c	e59f0288	 ldr         r0, [pc, #0x288]
  04210	eb000000	 bl          NKDbgPrintfW
  04214	e3a03001	 mov         r3, #1
  04218	e58d3008	 str         r3, [sp, #8]
  0421c	ea000001	 b           |$LN6@mcbsp_Dump|
  04220	e3a03000	 mov         r3, #0
  04224	e58d3008	 str         r3, [sp, #8]
  04228		 |$LN6@mcbsp_Dump|

; 1760 :     RETAILMSG(1,(TEXT("SPCR1    : %08x\r\n"), INREG32(&pMcbspRegs->SPCR1)));

  04228	e59d3000	 ldr         r3, [sp]
  0422c	e2833014	 add         r3, r3, #0x14
  04230	e5931000	 ldr         r1, [r3]
  04234	e59f025c	 ldr         r0, [pc, #0x25C]
  04238	eb000000	 bl          NKDbgPrintfW
  0423c	e3a03001	 mov         r3, #1
  04240	e58d300c	 str         r3, [sp, #0xC]
  04244	ea000001	 b           |$LN8@mcbsp_Dump|
  04248	e3a03000	 mov         r3, #0
  0424c	e58d300c	 str         r3, [sp, #0xC]
  04250		 |$LN8@mcbsp_Dump|

; 1761 :     RETAILMSG(1,(TEXT("RCR2     : %08x\r\n"), INREG32(&pMcbspRegs->RCR2)));

  04250	e59d3000	 ldr         r3, [sp]
  04254	e2833018	 add         r3, r3, #0x18
  04258	e5931000	 ldr         r1, [r3]
  0425c	e59f0230	 ldr         r0, [pc, #0x230]
  04260	eb000000	 bl          NKDbgPrintfW
  04264	e3a03001	 mov         r3, #1
  04268	e58d3010	 str         r3, [sp, #0x10]
  0426c	ea000001	 b           |$LN10@mcbsp_Dump|
  04270	e3a03000	 mov         r3, #0
  04274	e58d3010	 str         r3, [sp, #0x10]
  04278		 |$LN10@mcbsp_Dump|

; 1762 :     RETAILMSG(1,(TEXT("RCR1     : %08x\r\n"), INREG32(&pMcbspRegs->RCR1)));

  04278	e59d3000	 ldr         r3, [sp]
  0427c	e283301c	 add         r3, r3, #0x1C
  04280	e5931000	 ldr         r1, [r3]
  04284	e59f0204	 ldr         r0, [pc, #0x204]
  04288	eb000000	 bl          NKDbgPrintfW
  0428c	e3a03001	 mov         r3, #1
  04290	e58d3014	 str         r3, [sp, #0x14]
  04294	ea000001	 b           |$LN12@mcbsp_Dump|
  04298	e3a03000	 mov         r3, #0
  0429c	e58d3014	 str         r3, [sp, #0x14]
  042a0		 |$LN12@mcbsp_Dump|

; 1763 :     RETAILMSG(1,(TEXT("XCR2     : %08x\r\n"), INREG32(&pMcbspRegs->XCR2)));

  042a0	e59d3000	 ldr         r3, [sp]
  042a4	e2833020	 add         r3, r3, #0x20
  042a8	e5931000	 ldr         r1, [r3]
  042ac	e59f01d8	 ldr         r0, [pc, #0x1D8]
  042b0	eb000000	 bl          NKDbgPrintfW
  042b4	e3a03001	 mov         r3, #1
  042b8	e58d3018	 str         r3, [sp, #0x18]
  042bc	ea000001	 b           |$LN14@mcbsp_Dump|
  042c0	e3a03000	 mov         r3, #0
  042c4	e58d3018	 str         r3, [sp, #0x18]
  042c8		 |$LN14@mcbsp_Dump|

; 1764 :     RETAILMSG(1,(TEXT("XCR1     : %08x\r\n"), INREG32(&pMcbspRegs->XCR1)));

  042c8	e59d3000	 ldr         r3, [sp]
  042cc	e2833024	 add         r3, r3, #0x24
  042d0	e5931000	 ldr         r1, [r3]
  042d4	e59f01ac	 ldr         r0, [pc, #0x1AC]
  042d8	eb000000	 bl          NKDbgPrintfW
  042dc	e3a03001	 mov         r3, #1
  042e0	e58d301c	 str         r3, [sp, #0x1C]
  042e4	ea000001	 b           |$LN16@mcbsp_Dump|
  042e8	e3a03000	 mov         r3, #0
  042ec	e58d301c	 str         r3, [sp, #0x1C]
  042f0		 |$LN16@mcbsp_Dump|

; 1765 :     RETAILMSG(1,(TEXT("SRGR2    : %08x\r\n"), INREG32(&pMcbspRegs->SRGR2)));

  042f0	e59d3000	 ldr         r3, [sp]
  042f4	e2833028	 add         r3, r3, #0x28
  042f8	e5931000	 ldr         r1, [r3]
  042fc	e59f0180	 ldr         r0, [pc, #0x180]
  04300	eb000000	 bl          NKDbgPrintfW
  04304	e3a03001	 mov         r3, #1
  04308	e58d3020	 str         r3, [sp, #0x20]
  0430c	ea000001	 b           |$LN18@mcbsp_Dump|
  04310	e3a03000	 mov         r3, #0
  04314	e58d3020	 str         r3, [sp, #0x20]
  04318		 |$LN18@mcbsp_Dump|

; 1766 :     RETAILMSG(1,(TEXT("SRGR1    : %08x\r\n"), INREG32(&pMcbspRegs->SRGR1)));

  04318	e59d3000	 ldr         r3, [sp]
  0431c	e283302c	 add         r3, r3, #0x2C
  04320	e5931000	 ldr         r1, [r3]
  04324	e59f0154	 ldr         r0, [pc, #0x154]
  04328	eb000000	 bl          NKDbgPrintfW
  0432c	e3a03001	 mov         r3, #1
  04330	e58d3024	 str         r3, [sp, #0x24]
  04334	ea000001	 b           |$LN20@mcbsp_Dump|
  04338	e3a03000	 mov         r3, #0
  0433c	e58d3024	 str         r3, [sp, #0x24]
  04340		 |$LN20@mcbsp_Dump|

; 1767 :     RETAILMSG(1,(TEXT("MCR2     : %08x\r\n"), INREG32(&pMcbspRegs->MCR2)));

  04340	e59d3000	 ldr         r3, [sp]
  04344	e2833030	 add         r3, r3, #0x30
  04348	e5931000	 ldr         r1, [r3]
  0434c	e59f0128	 ldr         r0, [pc, #0x128]
  04350	eb000000	 bl          NKDbgPrintfW
  04354	e3a03001	 mov         r3, #1
  04358	e58d3028	 str         r3, [sp, #0x28]
  0435c	ea000001	 b           |$LN22@mcbsp_Dump|
  04360	e3a03000	 mov         r3, #0
  04364	e58d3028	 str         r3, [sp, #0x28]
  04368		 |$LN22@mcbsp_Dump|

; 1768 :     RETAILMSG(1,(TEXT("MCR1     : %08x\r\n"), INREG32(&pMcbspRegs->MCR1)));

  04368	e59d3000	 ldr         r3, [sp]
  0436c	e2833034	 add         r3, r3, #0x34
  04370	e5931000	 ldr         r1, [r3]
  04374	e59f00fc	 ldr         r0, [pc, #0xFC]
  04378	eb000000	 bl          NKDbgPrintfW
  0437c	e3a03001	 mov         r3, #1
  04380	e58d302c	 str         r3, [sp, #0x2C]
  04384	ea000001	 b           |$LN24@mcbsp_Dump|
  04388	e3a03000	 mov         r3, #0
  0438c	e58d302c	 str         r3, [sp, #0x2C]
  04390		 |$LN24@mcbsp_Dump|

; 1769 :     RETAILMSG(1,(TEXT("PCR      : %08x\r\n"), INREG32(&pMcbspRegs->PCR)));

  04390	e59d3000	 ldr         r3, [sp]
  04394	e2833048	 add         r3, r3, #0x48
  04398	e5931000	 ldr         r1, [r3]
  0439c	e59f00d0	 ldr         r0, [pc, #0xD0]
  043a0	eb000000	 bl          NKDbgPrintfW
  043a4	e3a03001	 mov         r3, #1
  043a8	e58d3030	 str         r3, [sp, #0x30]
  043ac	ea000001	 b           |$LN26@mcbsp_Dump|
  043b0	e3a03000	 mov         r3, #0
  043b4	e58d3030	 str         r3, [sp, #0x30]
  043b8		 |$LN26@mcbsp_Dump|

; 1770 :     RETAILMSG(1,(TEXT("THRSH1   : %08x\r\n"), INREG32(&pMcbspRegs->THRSH1)));

  043b8	e59d3000	 ldr         r3, [sp]
  043bc	e2833094	 add         r3, r3, #0x94
  043c0	e5931000	 ldr         r1, [r3]
  043c4	e59f00a4	 ldr         r0, [pc, #0xA4]
  043c8	eb000000	 bl          NKDbgPrintfW
  043cc	e3a03001	 mov         r3, #1
  043d0	e58d3034	 str         r3, [sp, #0x34]
  043d4	ea000001	 b           |$LN28@mcbsp_Dump|
  043d8	e3a03000	 mov         r3, #0
  043dc	e58d3034	 str         r3, [sp, #0x34]
  043e0		 |$LN28@mcbsp_Dump|

; 1771 :     RETAILMSG(1,(TEXT("THRSH2   : %08x\r\n"), INREG32(&pMcbspRegs->THRSH2)));

  043e0	e59d3000	 ldr         r3, [sp]
  043e4	e2833090	 add         r3, r3, #0x90
  043e8	e5931000	 ldr         r1, [r3]
  043ec	e59f0078	 ldr         r0, [pc, #0x78]
  043f0	eb000000	 bl          NKDbgPrintfW
  043f4	e3a03001	 mov         r3, #1
  043f8	e58d3038	 str         r3, [sp, #0x38]
  043fc	ea000001	 b           |$LN30@mcbsp_Dump|
  04400	e3a03000	 mov         r3, #0
  04404	e58d3038	 str         r3, [sp, #0x38]
  04408		 |$LN30@mcbsp_Dump|

; 1772 :     RETAILMSG(1,(TEXT("WAKEUPEN : %08x\r\n"), INREG32(&pMcbspRegs->WAKEUPEN)));

  04408	e59d3000	 ldr         r3, [sp]
  0440c	e28330a8	 add         r3, r3, #0xA8
  04410	e5931000	 ldr         r1, [r3]
  04414	e59f004c	 ldr         r0, [pc, #0x4C]
  04418	eb000000	 bl          NKDbgPrintfW
  0441c	e3a03001	 mov         r3, #1
  04420	e58d303c	 str         r3, [sp, #0x3C]
  04424	ea000001	 b           |$LN32@mcbsp_Dump|
  04428	e3a03000	 mov         r3, #0
  0442c	e58d303c	 str         r3, [sp, #0x3C]
  04430		 |$LN32@mcbsp_Dump|

; 1773 :     RETAILMSG(1,(TEXT("SYSCONFIG : %08x\r\n"), INREG32(&pMcbspRegs->SYSCONFIG)));

  04430	e59d3000	 ldr         r3, [sp]
  04434	e283308c	 add         r3, r3, #0x8C
  04438	e5931000	 ldr         r1, [r3]
  0443c	e59f0020	 ldr         r0, [pc, #0x20]
  04440	eb000000	 bl          NKDbgPrintfW
  04444	e3a03001	 mov         r3, #1
  04448	e58d3040	 str         r3, [sp, #0x40]
  0444c	ea000001	 b           |$LN34@mcbsp_Dump|
  04450	e3a03000	 mov         r3, #0
  04454	e58d3040	 str         r3, [sp, #0x40]
  04458		 |$LN34@mcbsp_Dump|

; 1774 : 
; 1775 : }

  04458	e28dd044	 add         sp, sp, #0x44
  0445c	e89d6000	 ldmia       sp, {sp, lr}
  04460	e12fff1e	 bx          lr
  04464		 |$LN38@mcbsp_Dump|
  04464		 |$LN39@mcbsp_Dump|
  04464	00000000	 DCD         |??_C@_1CG@EGIBJING@?$AAS?$AAY?$AAS?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  04468		 |$LN40@mcbsp_Dump|
  04468	00000000	 DCD         |??_C@_1CE@BFHPMMGC@?$AAW?$AAA?$AAK?$AAE?$AAU?$AAP?$AAE?$AAN?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  0446c		 |$LN41@mcbsp_Dump|
  0446c	00000000	 DCD         |??_C@_1CE@KKNKNOOB@?$AAT?$AAH?$AAR?$AAS?$AAH?$AA2?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  04470		 |$LN42@mcbsp_Dump|
  04470	00000000	 DCD         |??_C@_1CE@FIINDDBJ@?$AAT?$AAH?$AAR?$AAS?$AAH?$AA1?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  04474		 |$LN43@mcbsp_Dump|
  04474	00000000	 DCD         |??_C@_1CE@CEEMHBJF@?$AAP?$AAC?$AAR?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  04478		 |$LN44@mcbsp_Dump|
  04478	00000000	 DCD         |??_C@_1CE@FEABPBOP@?$AAM?$AAC?$AAR?$AA1?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  0447c		 |$LN45@mcbsp_Dump|
  0447c	00000000	 DCD         |??_C@_1CE@BAKANEPH@?$AAM?$AAC?$AAR?$AA2?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  04480		 |$LN46@mcbsp_Dump|
  04480	00000000	 DCD         |??_C@_1CE@DHEPGLAF@?$AAS?$AAR?$AAG?$AAR?$AA1?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  04484		 |$LN47@mcbsp_Dump|
  04484	00000000	 DCD         |??_C@_1CE@DFJBGMCC@?$AAS?$AAR?$AAG?$AAR?$AA2?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  04488		 |$LN48@mcbsp_Dump|
  04488	00000000	 DCD         |??_C@_1CE@BIGABPLB@?$AAX?$AAC?$AAR?$AA1?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  0448c		 |$LN49@mcbsp_Dump|
  0448c	00000000	 DCD         |??_C@_1CE@FMMBDKKJ@?$AAX?$AAC?$AAR?$AA2?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  04490		 |$LN50@mcbsp_Dump|
  04490	00000000	 DCD         |??_C@_1CE@JJFAABPE@?$AAR?$AAC?$AAR?$AA1?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  04494		 |$LN51@mcbsp_Dump|
  04494	00000000	 DCD         |??_C@_1CE@NNPBCEOM@?$AAR?$AAC?$AAR?$AA2?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  04498		 |$LN52@mcbsp_Dump|
  04498	00000000	 DCD         |??_C@_1CE@PMBNDED@?$AAS?$AAP?$AAC?$AAR?$AA1?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  0449c		 |$LN53@mcbsp_Dump|
  0449c	00000000	 DCD         |??_C@_1CE@NBPNEGE@?$AAS?$AAP?$AAC?$AAR?$AA2?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  044a0		 |$M37685|

			 ENDP  ; |mcbsp_DumpReg|

	END
