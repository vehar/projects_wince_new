; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\MCBSP\dataport.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|??_C@_1BE@LFFACMJN@?$AAM?$AAC?$AAP?$AA?3?$AA?9?$AA?$CF?$AAS?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BE@FKGNIJHN@?$AAM?$AAC?$AAP?$AA?3?$AA?$CL?$AA?$CF?$AAS?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0BH@MLJNGFKI@DataPort_t?3?3DataPort_t?$AA@| [ DATA ] ; `string'
	EXPORT	|??_7DataPort_t@@6B@| [ DATA ]		; DataPort_t::`vftable'
	EXPORT	|??0DataPort_t@@QAA@PAUMcBSPDevice_t@@@Z| ; DataPort_t::DataPort_t
	EXPORT	|?GetDataBufferSize@DataPort_t@@UBAHXZ|	; DataPort_t::GetDataBufferSize
	EXPORT	|?ResetDataBuffer@DataPort_t@@UAAXXZ|	; DataPort_t::ResetDataBuffer
	EXPORT	|?UpdateSamplesPerPage@DataPort_t@@UAAXKK@Z| ; DataPort_t::UpdateSamplesPerPage
	EXPORT	|?StopDma@DataPort_t@@UAAHXZ|		; DataPort_t::StopDma
	EXPORT	|?StartDma@DataPort_t@@UAAHH@Z|		; DataPort_t::StartDma
	EXPORT	|?Initialize@DataPort_t@@UAAHPAUDmaConfigInfo_t@@KGP6AKPAX@Z@Z| ; DataPort_t::Initialize
	EXPORT	|?RestoreDMAcontext@DataPort_t@@UAAHPAUDmaConfigInfo_t@@KG@Z| ; DataPort_t::RestoreDMAcontext
	EXPORT	|?GetDataBuffer@DataPort_t@@UAAPAEW4BufferRequest_e@1@@Z| ; DataPort_t::GetDataBuffer
	EXPORT	|?SwapBuffer@DataPort_t@@UAAXH@Z|	; DataPort_t::SwapBuffer
	EXPORT	|?PreprocessDataForRender@DataPort_t@@UAAXW4BufferRequest_e@1@I@Z| ; DataPort_t::PreprocessDataForRender
	EXPORT	|?PostprocessDataForCapture@DataPort_t@@UAAXW4BufferRequest_e@1@I@Z| ; DataPort_t::PostprocessDataForCapture
	IMPORT	|InitializeCriticalSection|
	IMPORT	|memset|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|dpCurSettings|
	IMPORT	|??_EDataPort_t@@UAAPAXI@Z|, WEAK |??_GDataPort_t@@UAAPAXI@Z| ; DataPort_t::`vector deleting destructor', DataPort_t::`scalar deleting destructor'

  00000			 AREA	 |.pdata|, PDATA
|$T37029| DCD	|$LN9@DataPort_t|
	DCD	0x40005e04
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\mcbsp\dataport.cpp

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BE@LFFACMJN@?$AAM?$AAC?$AAP?$AA?3?$AA?9?$AA?$CF?$AAS?$AA?$AN?$AA?6?$AA?$AA@| DCB "M"
	DCB	0x0, "C", 0x0, "P", 0x0, ":", 0x0, "-", 0x0, "%", 0x0, "S"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BE@FKGNIJHN@?$AAM?$AAC?$AAP?$AA?3?$AA?$CL?$AA?$CF?$AAS?$AA?$AN?$AA?6?$AA?$AA@| DCB "M"
	DCB	0x0, "C", 0x0, "P", 0x0, ":", 0x0, "+", 0x0, "%", 0x0, "S"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BH@MLJNGFKI@DataPort_t?3?3DataPort_t?$AA@| DCB "DataPort_t::DataP"
	DCB	"ort_t", 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_7DataPort_t@@6B@| DCD |??_EDataPort_t@@UAAPAXI@Z|	; DataPort_t::`vftable'
	DCD	|?GetDataBufferSize@DataPort_t@@UBAHXZ|
	DCD	|?ResetDataBuffer@DataPort_t@@UAAXXZ|
	DCD	|?UpdateSamplesPerPage@DataPort_t@@UAAXKK@Z|
	DCD	|?StopDma@DataPort_t@@UAAHXZ|
	DCD	|?StartDma@DataPort_t@@UAAHH@Z|
	DCD	|?Initialize@DataPort_t@@UAAHPAUDmaConfigInfo_t@@KGP6AKPAX@Z@Z|
	DCD	|?RestoreDMAcontext@DataPort_t@@UAAHPAUDmaConfigInfo_t@@KG@Z|
	DCD	|?GetDataBuffer@DataPort_t@@UAAPAEW4BufferRequest_e@1@@Z|
	DCD	|?SwapBuffer@DataPort_t@@UAAXH@Z|
	DCD	|?PreprocessDataForRender@DataPort_t@@UAAXW4BufferRequest_e@1@I@Z|
	DCD	|?PostprocessDataForCapture@DataPort_t@@UAAXW4BufferRequest_e@1@I@Z|
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0DataPort_t@@QAA@PAUMcBSPDevice_t@@@Z| PROC ; DataPort_t::DataPort_t

; 40   : {

  00000		 |$LN9@DataPort_t|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd00c	 sub         sp, sp, #0xC
  00010		 |$M37026|
  00010	e59f215c	 ldr         r2, [pc, #0x15C]
  00014	e59d3014	 ldr         r3, [sp, #0x14]
  00018	e5832000	 str         r2, [r3]

; 41   :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S\r\n", __FUNCTION__));

  0001c	e59f3148	 ldr         r3, [pc, #0x148]
  00020	e5933440	 ldr         r3, [r3, #0x440]
  00024	e3130004	 tst         r3, #4
  00028	0a000005	 beq         |$LN3@DataPort_t|
  0002c	e59f1134	 ldr         r1, [pc, #0x134]
  00030	e59f0138	 ldr         r0, [pc, #0x138]
  00034	eb000000	 bl          NKDbgPrintfW
  00038	e3a03001	 mov         r3, #1
  0003c	e58d3004	 str         r3, [sp, #4]
  00040	ea000001	 b           |$LN4@DataPort_t|
  00044		 |$LN3@DataPort_t|
  00044	e3a03000	 mov         r3, #0
  00048	e58d3004	 str         r3, [sp, #4]
  0004c		 |$LN4@DataPort_t|

; 42   : 
; 43   :     memset(&m_DmaInfo, 0, sizeof(DmaDataInfo_t));

  0004c	e3a02018	 mov         r2, #0x18
  00050	e3a01000	 mov         r1, #0
  00054	e59d3014	 ldr         r3, [sp, #0x14]
  00058	e2830004	 add         r0, r3, #4
  0005c	eb000000	 bl          memset

; 44   : 
; 45   :     m_pDevice           = pDevice;

  00060	e59d3014	 ldr         r3, [sp, #0x14]
  00064	e283201c	 add         r2, r3, #0x1C
  00068	e59d3018	 ldr         r3, [sp, #0x18]
  0006c	e5823000	 str         r3, [r2]

; 46   :     m_DmaLoopCounter    = 0;

  00070	e59d3014	 ldr         r3, [sp, #0x14]
  00074	e2832020	 add         r2, r3, #0x20
  00078	e3a03000	 mov         r3, #0
  0007c	e5823000	 str         r3, [r2]

; 47   :     m_PortState         = kMCBSP_Port_Uninitialized;

  00080	e59d3014	 ldr         r3, [sp, #0x14]
  00084	e2832024	 add         r2, r3, #0x24
  00088	e3a03000	 mov         r3, #0
  0008c	e5823000	 str         r3, [r2]

; 48   :     m_DmaPhysAddr       = 0;

  00090	e59d3014	 ldr         r3, [sp, #0x14]
  00094	e283203c	 add         r2, r3, #0x3C
  00098	e3a03000	 mov         r3, #0
  0009c	e5823000	 str         r3, [r2]

; 49   :     m_pActiveDmaBuffer  = NULL;

  000a0	e59d3014	 ldr         r3, [sp, #0x14]
  000a4	e2832040	 add         r2, r3, #0x40
  000a8	e3a03000	 mov         r3, #0
  000ac	e5823000	 str         r3, [r2]

; 50   :     m_pDmaBufferStart   = NULL;

  000b0	e59d3014	 ldr         r3, [sp, #0x14]
  000b4	e2832044	 add         r2, r3, #0x44
  000b8	e3a03000	 mov         r3, #0
  000bc	e5823000	 str         r3, [r2]

; 51   :     m_pDmaBufferMiddle  = NULL;

  000c0	e59d3014	 ldr         r3, [sp, #0x14]
  000c4	e2832048	 add         r2, r3, #0x48
  000c8	e3a03000	 mov         r3, #0
  000cc	e5823000	 str         r3, [r2]

; 52   :     m_SamplesPerPage    = 0;

  000d0	e59d3014	 ldr         r3, [sp, #0x14]
  000d4	e2832050	 add         r2, r3, #0x50
  000d8	e3a03000	 mov         r3, #0
  000dc	e5823000	 str         r3, [r2]

; 53   :     m_pActiveInstance   = NULL;

  000e0	e59d3014	 ldr         r3, [sp, #0x14]
  000e4	e2832054	 add         r2, r3, #0x54
  000e8	e3a03000	 mov         r3, #0
  000ec	e5823000	 str         r3, [r2]

; 54   :     m_hEvent            = NULL;

  000f0	e59d3014	 ldr         r3, [sp, #0x14]
  000f4	e2832058	 add         r2, r3, #0x58
  000f8	e3a03000	 mov         r3, #0
  000fc	e5823000	 str         r3, [r2]

; 55   :     m_hDmaChannel       = NULL;

  00100	e59d3014	 ldr         r3, [sp, #0x14]
  00104	e283205c	 add         r2, r3, #0x5C
  00108	e3a03000	 mov         r3, #0
  0010c	e5823000	 str         r3, [r2]

; 56   : 
; 57   :     InitializeCriticalSection(&m_cs);

  00110	e59d3014	 ldr         r3, [sp, #0x14]
  00114	e2830028	 add         r0, r3, #0x28
  00118	eb000000	 bl          InitializeCriticalSection

; 58   : 
; 59   :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S\r\n", __FUNCTION__));

  0011c	e59f3048	 ldr         r3, [pc, #0x48]
  00120	e5933440	 ldr         r3, [r3, #0x440]
  00124	e3130004	 tst         r3, #4
  00128	0a000005	 beq         |$LN5@DataPort_t|
  0012c	e59f1034	 ldr         r1, [pc, #0x34]
  00130	e59f002c	 ldr         r0, [pc, #0x2C]
  00134	eb000000	 bl          NKDbgPrintfW
  00138	e3a03001	 mov         r3, #1
  0013c	e58d3008	 str         r3, [sp, #8]
  00140	ea000001	 b           |$LN6@DataPort_t|
  00144		 |$LN5@DataPort_t|
  00144	e3a03000	 mov         r3, #0
  00148	e58d3008	 str         r3, [sp, #8]
  0014c		 |$LN6@DataPort_t|

; 60   : }

  0014c	e59d3014	 ldr         r3, [sp, #0x14]
  00150	e58d3000	 str         r3, [sp]
  00154	e59d0000	 ldr         r0, [sp]
  00158	e28dd00c	 add         sp, sp, #0xC
  0015c	e89d6000	 ldmia       sp, {sp, lr}
  00160	e12fff1e	 bx          lr
  00164		 |$LN10@DataPort_t|
  00164		 |$LN11@DataPort_t|
  00164	00000000	 DCD         |??_C@_1BE@LFFACMJN@?$AAM?$AAC?$AAP?$AA?3?$AA?9?$AA?$CF?$AAS?$AA?$AN?$AA?6?$AA?$AA@|
  00168		 |$LN12@DataPort_t|
  00168	00000000	 DCD         |??_C@_0BH@MLJNGFKI@DataPort_t?3?3DataPort_t?$AA@|
  0016c		 |$LN13@DataPort_t|
  0016c	00000000	 DCD         |dpCurSettings|
  00170		 |$LN14@DataPort_t|
  00170	00000000	 DCD         |??_C@_1BE@FKGNIJHN@?$AAM?$AAC?$AAP?$AA?3?$AA?$CL?$AA?$CF?$AAS?$AA?$AN?$AA?6?$AA?$AA@|
  00174		 |$LN15@DataPort_t|
  00174	00000000	 DCD         |??_7DataPort_t@@6B@|
  00178		 |$M37027|

			 ENDP  ; |??0DataPort_t@@QAA@PAUMcBSPDevice_t@@@Z|, DataPort_t::DataPort_t

; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\mcbsp\dataport.h

  00000			 AREA	 |.pdata|, PDATA
|$T37041| DCD	|$LN5@GetDataBuf|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetDataBufferSize@DataPort_t@@UBAHXZ| PROC ; DataPort_t::GetDataBufferSize

; 112  :     {

  00000		 |$LN5@GetDataBuf|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M37038|

; 113  :         return m_sizeDmaBuffer;

  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e283304c	 add         r3, r3, #0x4C
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3000	 str         r3, [sp]

; 114  :     }

  00020	e59d0000	 ldr         r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M37039|

			 ENDP  ; |?GetDataBufferSize@DataPort_t@@UBAHXZ|, DataPort_t::GetDataBufferSize


  00000			 AREA	 |.pdata|, PDATA
|$T37048| DCD	|$LN5@ResetDataB|
	DCD	0x40000b03
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ResetDataBuffer@DataPort_t@@UAAXXZ| PROC ; DataPort_t::ResetDataBuffer

; 117  :     {

  00000		 |$LN5@ResetDataB|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M37045|

; 118  :         m_pActiveDmaBuffer = m_pDmaBufferStart;

  0000c	e59d3008	 ldr         r3, [sp, #8]
  00010	e2831044	 add         r1, r3, #0x44
  00014	e59d3008	 ldr         r3, [sp, #8]
  00018	e2832040	 add         r2, r3, #0x40
  0001c	e5913000	 ldr         r3, [r1]
  00020	e5823000	 str         r3, [r2]

; 119  :     }

  00024	e89d6000	 ldmia       sp, {sp, lr}
  00028	e12fff1e	 bx          lr
  0002c		 |$M37046|

			 ENDP  ; |?ResetDataBuffer@DataPort_t@@UAAXXZ|, DataPort_t::ResetDataBuffer

	IMPORT	|__rt_udiv|

  00000			 AREA	 |.pdata|, PDATA
|$T37056| DCD	|$LN10@UpdateSamp|
	DCD	0x40002403
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?UpdateSamplesPerPage@DataPort_t@@UAAXKK@Z| PROC ; DataPort_t::UpdateSamplesPerPage

; 137  :     {

  00000		 |$LN10@UpdateSamp|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0007	 stmdb       sp!, {r0 - r2}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M37053|

; 138  :         if (datatype == DMA_CSDP_DATATYPE_S32)

  0000c	e59d3010	 ldr         r3, [sp, #0x10]
  00010	e3530002	 cmp         r3, #2
  00014	1a000007	 bne         |$LN5@UpdateSamp|

; 139  :             {
; 140  :             m_SamplesPerPage = (nDmaBufferSize >> 1) / sizeof(DWORD);

  00018	e59d300c	 ldr         r3, [sp, #0xC]
  0001c	e1a010a3	 mov         r1, r3, lsr #1
  00020	e3a00004	 mov         r0, #4
  00024	eb000000	 bl          __rt_udiv
  00028	e59d3008	 ldr         r3, [sp, #8]
  0002c	e2833050	 add         r3, r3, #0x50
  00030	e5830000	 str         r0, [r3]
  00034	ea000013	 b           |$LN4@UpdateSamp|
  00038		 |$LN5@UpdateSamp|

; 141  :             }
; 142  :         else if (datatype == DMA_CSDP_DATATYPE_S16)

  00038	e59d3010	 ldr         r3, [sp, #0x10]
  0003c	e3530001	 cmp         r3, #1
  00040	1a000007	 bne         |$LN3@UpdateSamp|

; 143  :             {
; 144  :             m_SamplesPerPage = (nDmaBufferSize >> 1) / sizeof(WORD);

  00044	e59d300c	 ldr         r3, [sp, #0xC]
  00048	e1a010a3	 mov         r1, r3, lsr #1
  0004c	e3a00002	 mov         r0, #2
  00050	eb000000	 bl          __rt_udiv
  00054	e59d3008	 ldr         r3, [sp, #8]
  00058	e2833050	 add         r3, r3, #0x50
  0005c	e5830000	 str         r0, [r3]
  00060	ea000008	 b           |$LN2@UpdateSamp|
  00064		 |$LN3@UpdateSamp|

; 145  :             }
; 146  :         else if (datatype == DMA_CSDP_DATATYPE_S8)

  00064	e59d3010	 ldr         r3, [sp, #0x10]
  00068	e3530000	 cmp         r3, #0
  0006c	1a000005	 bne         |$LN1@UpdateSamp|

; 147  :             {
; 148  :             m_SamplesPerPage = nDmaBufferSize / sizeof(WORD);

  00070	e59d100c	 ldr         r1, [sp, #0xC]
  00074	e3a00002	 mov         r0, #2
  00078	eb000000	 bl          __rt_udiv
  0007c	e59d3008	 ldr         r3, [sp, #8]
  00080	e2833050	 add         r3, r3, #0x50
  00084	e5830000	 str         r0, [r3]
  00088		 |$LN1@UpdateSamp|
  00088		 |$LN2@UpdateSamp|
  00088		 |$LN4@UpdateSamp|

; 149  :             }
; 150  :     }

  00088	e89d6000	 ldmia       sp, {sp, lr}
  0008c	e12fff1e	 bx          lr
  00090		 |$M37054|

			 ENDP  ; |?UpdateSamplesPerPage@DataPort_t@@UAAXKK@Z|, DataPort_t::UpdateSamplesPerPage


  00000			 AREA	 |.pdata|, PDATA
|$T37063| DCD	|$LN5@Preprocess|
	DCD	0x40000503
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?PreprocessDataForRender@DataPort_t@@UAAXW4BufferRequest_e@1@I@Z| PROC ; DataPort_t::PreprocessDataForRender

; 174  :     virtual void PreprocessDataForRender(BufferRequest_e type, UINT count)  { UNREFERENCED_PARAMETER(type); UNREFERENCED_PARAMETER(count); };

  00000		 |$LN5@Preprocess|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0007	 stmdb       sp!, {r0 - r2}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M37060|
  0000c	e89d6000	 ldmia       sp, {sp, lr}
  00010	e12fff1e	 bx          lr
  00014		 |$M37061|

			 ENDP  ; |?PreprocessDataForRender@DataPort_t@@UAAXW4BufferRequest_e@1@I@Z|, DataPort_t::PreprocessDataForRender


  00000			 AREA	 |.pdata|, PDATA
|$T37070| DCD	|$LN5@Postproces|
	DCD	0x40000503
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?PostprocessDataForCapture@DataPort_t@@UAAXW4BufferRequest_e@1@I@Z| PROC ; DataPort_t::PostprocessDataForCapture

; 175  :     virtual void PostprocessDataForCapture(BufferRequest_e type, UINT count){ UNREFERENCED_PARAMETER(type); UNREFERENCED_PARAMETER(count); };

  00000		 |$LN5@Postproces|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0007	 stmdb       sp!, {r0 - r2}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M37067|
  0000c	e89d6000	 ldmia       sp, {sp, lr}
  00010	e12fff1e	 bx          lr
  00014		 |$M37068|

			 ENDP  ; |?PostprocessDataForCapture@DataPort_t@@UAAXW4BufferRequest_e@1@I@Z|, DataPort_t::PostprocessDataForCapture

	EXPORT	|??1DataPort_t@@UAA@XZ|			; DataPort_t::~DataPort_t
	IMPORT	|??3@YAXPAX@Z|				; operator delete

  00000			 AREA	 |.pdata|, PDATA
|$T37078| DCD	|$LN6@scalar|
	DCD	0x40001104
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??_GDataPort_t@@UAAPAXI@Z| PROC	; DataPort_t::`scalar deleting destructor'
  00000		 |$LN6@scalar|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M37075|
  00010	e59d000c	 ldr         r0, [sp, #0xC]
  00014	eb000000	 bl          |??1DataPort_t@@UAA@XZ|
  00018	e59d3010	 ldr         r3, [sp, #0x10]
  0001c	e3130001	 tst         r3, #1
  00020	0a000001	 beq         |$LN1@scalar|
  00024	e59d000c	 ldr         r0, [sp, #0xC]
  00028	eb000000	 bl          |??3@YAXPAX@Z|
  0002c		 |$LN1@scalar|
  0002c	e59d300c	 ldr         r3, [sp, #0xC]
  00030	e58d3000	 str         r3, [sp]
  00034	e59d0000	 ldr         r0, [sp]
  00038	e28dd004	 add         sp, sp, #4
  0003c	e89d6000	 ldmia       sp, {sp, lr}
  00040	e12fff1e	 bx          lr
  00044		 |$M37076|

			 ENDP  ; |??_GDataPort_t@@UAAPAXI@Z|, DataPort_t::`scalar deleting destructor'

	EXPORT	|??_C@_0BI@NJPPFJKM@DataPort_t?3?3?$HODataPort_t?$AA@| [ DATA ] ; `string'
	IMPORT	|CloseHandle|
	IMPORT	|FreePhysMem|
	IMPORT	|DeleteCriticalSection|

  00008			 AREA	 |.pdata|, PDATA
|$T37089| DCD	|$LN11@DataPort_t@2|
	DCD	0x40003c04
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\mcbsp\dataport.cpp

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BI@NJPPFJKM@DataPort_t?3?3?$HODataPort_t?$AA@| DCB "DataPort_t::~"
	DCB	"DataPort_t", 0x0			; `string'
; Function compile flags: /Odtp

  00178			 AREA	 |.text|, CODE, ARM

  00178		 |??1DataPort_t@@UAA@XZ| PROC		; DataPort_t::~DataPort_t

; 69   : {

  00178		 |$LN11@DataPort_t@2|
  00178	e1a0c00d	 mov         r12, sp
  0017c	e92d0001	 stmdb       sp!, {r0}
  00180	e92d5000	 stmdb       sp!, {r12, lr}
  00184	e24dd008	 sub         sp, sp, #8
  00188		 |$M37086|
  00188	e59f20d4	 ldr         r2, [pc, #0xD4]
  0018c	e59d3010	 ldr         r3, [sp, #0x10]
  00190	e5832000	 str         r2, [r3]

; 70   :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S\r\n", __FUNCTION__));

  00194	e59f30c0	 ldr         r3, [pc, #0xC0]
  00198	e5933440	 ldr         r3, [r3, #0x440]
  0019c	e3130004	 tst         r3, #4
  001a0	0a000005	 beq         |$LN5@DataPort_t@2|
  001a4	e59f10ac	 ldr         r1, [pc, #0xAC]
  001a8	e59f00b0	 ldr         r0, [pc, #0xB0]
  001ac	eb000000	 bl          NKDbgPrintfW
  001b0	e3a03001	 mov         r3, #1
  001b4	e58d3000	 str         r3, [sp]
  001b8	ea000001	 b           |$LN6@DataPort_t@2|
  001bc		 |$LN5@DataPort_t@2|
  001bc	e3a03000	 mov         r3, #0
  001c0	e58d3000	 str         r3, [sp]
  001c4		 |$LN6@DataPort_t@2|

; 71   : 
; 72   :     // free allocated resources
; 73   :     //
; 74   :     DeleteCriticalSection(&m_cs);

  001c4	e59d3010	 ldr         r3, [sp, #0x10]
  001c8	e2830028	 add         r0, r3, #0x28
  001cc	eb000000	 bl          DeleteCriticalSection

; 75   : 
; 76   :     if (m_pDmaBufferStart)

  001d0	e59d3010	 ldr         r3, [sp, #0x10]
  001d4	e2833044	 add         r3, r3, #0x44
  001d8	e5933000	 ldr         r3, [r3]
  001dc	e3530000	 cmp         r3, #0
  001e0	0a000003	 beq         |$LN2@DataPort_t@2|

; 77   :         {
; 78   :         FreePhysMem(m_pDmaBufferStart);

  001e4	e59d3010	 ldr         r3, [sp, #0x10]
  001e8	e2833044	 add         r3, r3, #0x44
  001ec	e5930000	 ldr         r0, [r3]
  001f0	eb000000	 bl          FreePhysMem
  001f4		 |$LN2@DataPort_t@2|

; 79   :         }
; 80   : 
; 81   :      if (m_hEvent)

  001f4	e59d3010	 ldr         r3, [sp, #0x10]
  001f8	e2833058	 add         r3, r3, #0x58
  001fc	e5933000	 ldr         r3, [r3]
  00200	e3530000	 cmp         r3, #0
  00204	0a000003	 beq         |$LN1@DataPort_t@2|

; 82   :         {
; 83   :         CloseHandle(m_hEvent);

  00208	e59d3010	 ldr         r3, [sp, #0x10]
  0020c	e2833058	 add         r3, r3, #0x58
  00210	e5930000	 ldr         r0, [r3]
  00214	eb000000	 bl          CloseHandle
  00218		 |$LN1@DataPort_t@2|

; 84   :         }
; 85   : 
; 86   :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S\r\n", __FUNCTION__));

  00218	e59f303c	 ldr         r3, [pc, #0x3C]
  0021c	e5933440	 ldr         r3, [r3, #0x440]
  00220	e3130004	 tst         r3, #4
  00224	0a000005	 beq         |$LN7@DataPort_t@2|
  00228	e59f1028	 ldr         r1, [pc, #0x28]
  0022c	e59f0020	 ldr         r0, [pc, #0x20]
  00230	eb000000	 bl          NKDbgPrintfW
  00234	e3a03001	 mov         r3, #1
  00238	e58d3004	 str         r3, [sp, #4]
  0023c	ea000001	 b           |$LN8@DataPort_t@2|
  00240		 |$LN7@DataPort_t@2|
  00240	e3a03000	 mov         r3, #0
  00244	e58d3004	 str         r3, [sp, #4]
  00248		 |$LN8@DataPort_t@2|

; 87   : }

  00248	e28dd008	 add         sp, sp, #8
  0024c	e89d6000	 ldmia       sp, {sp, lr}
  00250	e12fff1e	 bx          lr
  00254		 |$LN12@DataPort_t@2|
  00254		 |$LN13@DataPort_t@2|
  00254	00000000	 DCD         |??_C@_1BE@LFFACMJN@?$AAM?$AAC?$AAP?$AA?3?$AA?9?$AA?$CF?$AAS?$AA?$AN?$AA?6?$AA?$AA@|
  00258		 |$LN14@DataPort_t@2|
  00258	00000000	 DCD         |??_C@_0BI@NJPPFJKM@DataPort_t?3?3?$HODataPort_t?$AA@|
  0025c		 |$LN15@DataPort_t@2|
  0025c	00000000	 DCD         |dpCurSettings|
  00260		 |$LN16@DataPort_t@2|
  00260	00000000	 DCD         |??_C@_1BE@FKGNIJHN@?$AAM?$AAC?$AAP?$AA?3?$AA?$CL?$AA?$CF?$AAS?$AA?$AN?$AA?6?$AA?$AA@|
  00264		 |$LN17@DataPort_t@2|
  00264	00000000	 DCD         |??_7DataPort_t@@6B@|
  00268		 |$M37087|

			 ENDP  ; |??1DataPort_t@@UAA@XZ|, DataPort_t::~DataPort_t

	EXPORT	|??_C@_1CM@IONDIDDH@?$AAM?$AAC?$AAP?$AA?3?$AA?$CL?$AA?$CF?$AAS?$AA?$CI?$AAp?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?$DN?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1KA@JNFELPBD@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CG@MCKDAEHE@?$AAM?$AAC?$AAP?$AA?3?$AA?$CL?$AA?$CF?$AAS?$AA?$CI?$AAt?$AAy?$AAp?$AAe?$AA?$DN?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0BK@GLCANLAI@DataPort_t?3?3GetDataBuffer?$AA@| [ DATA ] ; `string'

  00010			 AREA	 |.pdata|, PDATA
|$T37117| DCD	|$LN28@GetDataBuf@2|
	DCD	0x40007a04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@IONDIDDH@?$AAM?$AAC?$AAP?$AA?3?$AA?$CL?$AA?$CF?$AAS?$AA?$CI?$AAp?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?$DN?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "M"
	DCB	0x0, "C", 0x0, "P", 0x0, ":", 0x0, "+", 0x0, "%", 0x0, "S"
	DCB	0x0, "(", 0x0, "p", 0x0, "B", 0x0, "u", 0x0, "f", 0x0, "f"
	DCB	0x0, "e", 0x0, "r", 0x0, "=", 0x0, "%", 0x0, "d", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@| DCB "%"
	DCB	0x0, "s", 0x0, ":", 0x0, " ", 0x0, "D", 0x0, "E", 0x0, "B"
	DCB	0x0, "U", 0x0, "G", 0x0, "C", 0x0, "H", 0x0, "K", 0x0, " "
	DCB	0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "i", 0x0, "n", 0x0, " ", 0x0, "f", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, " ", 0x0, "%", 0x0, "s", 0x0, " "
	DCB	0x0, "a", 0x0, "t", 0x0, " ", 0x0, "l", 0x0, "i", 0x0, "n"
	DCB	0x0, "e", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@| DCB "U", 0x0
	DCB	"n", 0x0, "k", 0x0, "n", 0x0, "o", 0x0, "w", 0x0, "n", 0x0
	DCB	0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KA@JNFELPBD@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@| DCB "C"
	DCB	0x0, ":", 0x0, "\\", 0x0, "W", 0x0, "I", 0x0, "N", 0x0, "C"
	DCB	0x0, "E", 0x0, "6", 0x0, "0", 0x0, "0", 0x0, "\\", 0x0, "P"
	DCB	0x0, "L", 0x0, "A", 0x0, "T", 0x0, "F", 0x0, "O", 0x0, "R"
	DCB	0x0, "M", 0x0, "\\", 0x0, "C", 0x0, "O", 0x0, "M", 0x0, "M"
	DCB	0x0, "O", 0x0, "N", 0x0, "\\", 0x0, "S", 0x0, "R", 0x0, "C"
	DCB	0x0, "\\", 0x0, "S", 0x0, "O", 0x0, "C", 0x0, "\\", 0x0, "C"
	DCB	0x0, "O", 0x0, "M", 0x0, "M", 0x0, "O", 0x0, "N", 0x0, "_"
	DCB	0x0, "T", 0x0, "I", 0x0, "_", 0x0, "V", 0x0, "1", 0x0, "\\"
	DCB	0x0, "C", 0x0, "O", 0x0, "M", 0x0, "M", 0x0, "O", 0x0, "N"
	DCB	0x0, "_", 0x0, "T", 0x0, "I", 0x0, "\\", 0x0, "M", 0x0, "C"
	DCB	0x0, "B", 0x0, "S", 0x0, "P", 0x0, "\\", 0x0, ".", 0x0, "\\"
	DCB	0x0, "d", 0x0, "a", 0x0, "t", 0x0, "a", 0x0, "p", 0x0, "o"
	DCB	0x0, "r", 0x0, "t", 0x0, ".", 0x0, "c", 0x0, "p", 0x0, "p"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CG@MCKDAEHE@?$AAM?$AAC?$AAP?$AA?3?$AA?$CL?$AA?$CF?$AAS?$AA?$CI?$AAt?$AAy?$AAp?$AAe?$AA?$DN?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "M"
	DCB	0x0, "C", 0x0, "P", 0x0, ":", 0x0, "+", 0x0, "%", 0x0, "S"
	DCB	0x0, "(", 0x0, "t", 0x0, "y", 0x0, "p", 0x0, "e", 0x0, "="
	DCB	0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BK@GLCANLAI@DataPort_t?3?3GetDataBuffer?$AA@| DCB "DataPort_t::Ge"
	DCB	"tDataBuffer", 0x0			; `string'
; Function compile flags: /Odtp

  00268			 AREA	 |.text|, CODE, ARM

  00268		 |?GetDataBuffer@DataPort_t@@UAAPAEW4BufferRequest_e@1@@Z| PROC ; DataPort_t::GetDataBuffer

; 99   : {

  00268		 |$LN28@GetDataBuf@2|
  00268	e1a0c00d	 mov         r12, sp
  0026c	e92d0003	 stmdb       sp!, {r0, r1}
  00270	e92d5000	 stmdb       sp!, {r12, lr}
  00274	e24dd020	 sub         sp, sp, #0x20
  00278		 |$M37114|

; 100  :     BYTE* pBuffer;
; 101  : 
; 102  :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S(type=%d)\r\n", __FUNCTION__, type));

  00278	e59f31bc	 ldr         r3, [pc, #0x1BC]
  0027c	e5933440	 ldr         r3, [r3, #0x440]
  00280	e3130004	 tst         r3, #4
  00284	0a000006	 beq         |$LN10@GetDataBuf@2|
  00288	e59d202c	 ldr         r2, [sp, #0x2C]
  0028c	e59f11a4	 ldr         r1, [pc, #0x1A4]
  00290	e59f01b4	 ldr         r0, [pc, #0x1B4]
  00294	eb000000	 bl          NKDbgPrintfW
  00298	e3a03001	 mov         r3, #1
  0029c	e58d3008	 str         r3, [sp, #8]
  002a0	ea000001	 b           |$LN11@GetDataBuf@2|
  002a4		 |$LN10@GetDataBuf@2|
  002a4	e3a03000	 mov         r3, #0
  002a8	e58d3008	 str         r3, [sp, #8]
  002ac		 |$LN11@GetDataBuf@2|

; 103  : 
; 104  :     switch (type)

  002ac	e59d302c	 ldr         r3, [sp, #0x2C]
  002b0	e58d300c	 str         r3, [sp, #0xC]
  002b4	e59d300c	 ldr         r3, [sp, #0xC]
  002b8	e3530003	 cmp         r3, #3
  002bc	8a00003a	 bhi         |$LN1@GetDataBuf@2|
  002c0	e59d200c	 ldr         r2, [sp, #0xC]
  002c4	e1a03102	 mov         r3, r2, lsl #2
  002c8	e083300f	 add         r3, r3, pc
  002cc	e5933004	 ldr         r3, [r3, #4]
  002d0	e08ff003	 add         pc, pc, r3
  002d4		 |$LN21@GetDataBuf@2|
  002d4		 |$LN20@GetDataBuf@2|
  002d4		 |$LN22@GetDataBuf@2|
  002d4	0000000c	 DCD         0xc
  002d8		 |$LN23@GetDataBuf@2|
  002d8	00000020	 DCD         0x20
  002dc		 |$LN24@GetDataBuf@2|
  002dc	00000034	 DCD         0x34
  002e0		 |$LN25@GetDataBuf@2|
  002e0	00000084	 DCD         0x84
  002e4		 |$LN5@GetDataBuf@2|

; 105  :         {
; 106  :         case kBufferStart:
; 107  :             pBuffer = m_pDmaBufferStart;

  002e4	e59d3028	 ldr         r3, [sp, #0x28]
  002e8	e2833044	 add         r3, r3, #0x44
  002ec	e5933000	 ldr         r3, [r3]
  002f0	e58d3000	 str         r3, [sp]

; 108  :             break;

  002f4	ea00003b	 b           |$LN6@GetDataBuf@2|
  002f8		 |$LN4@GetDataBuf@2|

; 109  : 
; 110  :         case kBufferMiddle:
; 111  :             pBuffer = m_pDmaBufferMiddle;

  002f8	e59d3028	 ldr         r3, [sp, #0x28]
  002fc	e2833048	 add         r3, r3, #0x48
  00300	e5933000	 ldr         r3, [r3]
  00304	e58d3000	 str         r3, [sp]

; 112  :             break;

  00308	ea000036	 b           |$LN6@GetDataBuf@2|
  0030c		 |$LN3@GetDataBuf@2|

; 113  : 
; 114  :         case kBufferActive:
; 115  :             pBuffer = (m_pActiveDmaBuffer == m_pDmaBufferStart) ?
; 116  :                         m_pDmaBufferStart : m_pDmaBufferMiddle;

  0030c	e59d3028	 ldr         r3, [sp, #0x28]
  00310	e2832040	 add         r2, r3, #0x40
  00314	e59d3028	 ldr         r3, [sp, #0x28]
  00318	e2833044	 add         r3, r3, #0x44
  0031c	e5922000	 ldr         r2, [r2]
  00320	e5933000	 ldr         r3, [r3]
  00324	e1520003	 cmp         r2, r3
  00328	1a000004	 bne         |$LN12@GetDataBuf@2|
  0032c	e59d3028	 ldr         r3, [sp, #0x28]
  00330	e2833044	 add         r3, r3, #0x44
  00334	e5933000	 ldr         r3, [r3]
  00338	e58d3010	 str         r3, [sp, #0x10]
  0033c	ea000003	 b           |$LN13@GetDataBuf@2|
  00340		 |$LN12@GetDataBuf@2|
  00340	e59d3028	 ldr         r3, [sp, #0x28]
  00344	e2833048	 add         r3, r3, #0x48
  00348	e5933000	 ldr         r3, [r3]
  0034c	e58d3010	 str         r3, [sp, #0x10]
  00350		 |$LN13@GetDataBuf@2|
  00350	e59d3010	 ldr         r3, [sp, #0x10]
  00354	e58d3000	 str         r3, [sp]

; 117  :             break;

  00358	ea000022	 b           |$LN6@GetDataBuf@2|
  0035c		 |$LN2@GetDataBuf@2|

; 118  : 
; 119  :         case kBufferInactive:
; 120  :             pBuffer = (m_pActiveDmaBuffer == m_pDmaBufferStart) ?
; 121  :                         m_pDmaBufferMiddle : m_pDmaBufferStart;

  0035c	e59d3028	 ldr         r3, [sp, #0x28]
  00360	e2832040	 add         r2, r3, #0x40
  00364	e59d3028	 ldr         r3, [sp, #0x28]
  00368	e2833044	 add         r3, r3, #0x44
  0036c	e5922000	 ldr         r2, [r2]
  00370	e5933000	 ldr         r3, [r3]
  00374	e1520003	 cmp         r2, r3
  00378	1a000004	 bne         |$LN14@GetDataBuf@2|
  0037c	e59d3028	 ldr         r3, [sp, #0x28]
  00380	e2833048	 add         r3, r3, #0x48
  00384	e5933000	 ldr         r3, [r3]
  00388	e58d3014	 str         r3, [sp, #0x14]
  0038c	ea000003	 b           |$LN15@GetDataBuf@2|
  00390		 |$LN14@GetDataBuf@2|
  00390	e59d3028	 ldr         r3, [sp, #0x28]
  00394	e2833044	 add         r3, r3, #0x44
  00398	e5933000	 ldr         r3, [r3]
  0039c	e58d3014	 str         r3, [sp, #0x14]
  003a0		 |$LN15@GetDataBuf@2|
  003a0	e59d3014	 ldr         r3, [sp, #0x14]
  003a4	e58d3000	 str         r3, [sp]

; 122  :             break;

  003a8	ea00000e	 b           |$LN6@GetDataBuf@2|
  003ac		 |$LN1@GetDataBuf@2|

; 123  : 
; 124  :         default:
; 125  :             ASSERT(0);

  003ac	ea000002	 b           |$LN16@GetDataBuf@2|
  003b0	e3a03001	 mov         r3, #1
  003b4	e58d3018	 str         r3, [sp, #0x18]
  003b8	ea000007	 b           |$LN17@GetDataBuf@2|
  003bc		 |$LN16@GetDataBuf@2|
  003bc	e3a0307d	 mov         r3, #0x7D
  003c0	e59f2080	 ldr         r2, [pc, #0x80]
  003c4	e59f1078	 ldr         r1, [pc, #0x78]
  003c8	e59f0070	 ldr         r0, [pc, #0x70]
  003cc	eb000000	 bl          NKDbgPrintfW
  003d0	e6000010	 __debugbreak_ce
  003d4	e3a03000	 mov         r3, #0
  003d8	e58d3018	 str         r3, [sp, #0x18]
  003dc		 |$LN17@GetDataBuf@2|

; 126  :             return NULL;

  003dc	e3a03000	 mov         r3, #0
  003e0	e58d3004	 str         r3, [sp, #4]
  003e4	ea00000e	 b           |$LN8@GetDataBuf@2|
  003e8		 |$LN6@GetDataBuf@2|

; 127  :             break;
; 128  :         }
; 129  : 
; 130  :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S(pBuffer=%d)\r\n", __FUNCTION__,
; 131  :         pBuffer)
; 132  :         );

  003e8	e59f304c	 ldr         r3, [pc, #0x4C]
  003ec	e5933440	 ldr         r3, [r3, #0x440]
  003f0	e3130004	 tst         r3, #4
  003f4	0a000006	 beq         |$LN18@GetDataBuf@2|
  003f8	e59d2000	 ldr         r2, [sp]
  003fc	e59f1034	 ldr         r1, [pc, #0x34]
  00400	e59f002c	 ldr         r0, [pc, #0x2C]
  00404	eb000000	 bl          NKDbgPrintfW
  00408	e3a03001	 mov         r3, #1
  0040c	e58d301c	 str         r3, [sp, #0x1C]
  00410	ea000001	 b           |$LN19@GetDataBuf@2|
  00414		 |$LN18@GetDataBuf@2|
  00414	e3a03000	 mov         r3, #0
  00418	e58d301c	 str         r3, [sp, #0x1C]
  0041c		 |$LN19@GetDataBuf@2|

; 133  :     return pBuffer;

  0041c	e59d3000	 ldr         r3, [sp]
  00420	e58d3004	 str         r3, [sp, #4]
  00424		 |$LN8@GetDataBuf@2|

; 134  : }

  00424	e59d0004	 ldr         r0, [sp, #4]
  00428	e28dd020	 add         sp, sp, #0x20
  0042c	e89d6000	 ldmia       sp, {sp, lr}
  00430	e12fff1e	 bx          lr
  00434		 |$LN29@GetDataBuf@2|
  00434		 |$LN30@GetDataBuf@2|
  00434	00000000	 DCD         |??_C@_1CM@IONDIDDH@?$AAM?$AAC?$AAP?$AA?3?$AA?$CL?$AA?$CF?$AAS?$AA?$CI?$AAp?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?$DN?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00438		 |$LN31@GetDataBuf@2|
  00438	00000000	 DCD         |??_C@_0BK@GLCANLAI@DataPort_t?3?3GetDataBuffer?$AA@|
  0043c		 |$LN32@GetDataBuf@2|
  0043c	00000000	 DCD         |dpCurSettings|
  00440		 |$LN33@GetDataBuf@2|
  00440	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  00444		 |$LN34@GetDataBuf@2|
  00444	00000000	 DCD         |??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@|
  00448		 |$LN35@GetDataBuf@2|
  00448	00000000	 DCD         |??_C@_1KA@JNFELPBD@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  0044c		 |$LN36@GetDataBuf@2|
  0044c	00000000	 DCD         |??_C@_1CG@MCKDAEHE@?$AAM?$AAC?$AAP?$AA?3?$AA?$CL?$AA?$CF?$AAS?$AA?$CI?$AAt?$AAy?$AAp?$AAe?$AA?$DN?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00450		 |$M37115|

			 ENDP  ; |?GetDataBuffer@DataPort_t@@UAAPAEW4BufferRequest_e@1@@Z|, DataPort_t::GetDataBuffer

	EXPORT	|??_C@_1IE@LNAIPGPE@?$AAM?$AAC?$AAP?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAD?$AAa?$AAt?$AAa?$AAP?$AAo?$AAr?$AAt?$AA_?$AAt?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi@| [ DATA ] ; `string'
	EXPORT	|DmaSetRepeatMode|
	EXPORT	|DmaSetElementAndFrameCount|
	EXPORT	|?GetSamplesPerPage@DataPort_t@@QBAHXZ|	; DataPort_t::GetSamplesPerPage
	EXPORT	|DmaConfigure|
	EXPORT	|??_C@_1JA@FCKGBGIJ@?$AAM?$AAC?$AAP?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAD?$AAa?$AAt?$AAa?$AAP?$AAo?$AAr?$AAt?$AA_?$AAt?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IA@EJJCKLKK@?$AAM?$AAC?$AAP?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAD?$AAa?$AAt?$AAa?$AAP?$AAo?$AAr?$AAt?$AA_?$AAt?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HI@JAHBAEGA@?$AAM?$AAC?$AAP?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAD?$AAa?$AAt?$AAa?$AAP?$AAo?$AAr?$AAt?$AA_?$AAt?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi@| [ DATA ] ; `string'
	EXPORT	|??_C@_1JG@LOPGIIKA@?$AAM?$AAC?$AAP?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAD?$AAa?$AAt?$AAa?$AAP?$AAo?$AAr?$AAt?$AA_?$AAt?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IM@BMMJICNO@?$AAM?$AAC?$AAP?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAD?$AAa?$AAt?$AAa?$AAP?$AAo?$AAr?$AAt?$AA_?$AAt?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi@| [ DATA ] ; `string'
	EXPORT	|??_C@_0BH@IPNLGJAA@DataPort_t?3?3Initialize?$AA@| [ DATA ] ; `string'
	IMPORT	|CreateThread|
	IMPORT	|DmaEnableInterrupts|
	IMPORT	|DmaAllocateChannel|
	IMPORT	|CreateEventW|
	IMPORT	|AllocPhysMem|

  00018			 AREA	 |.pdata|, PDATA
|$T37150| DCD	|$LN54@Initialize|
	DCD	0x4001a104

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IE@LNAIPGPE@?$AAM?$AAC?$AAP?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAD?$AAa?$AAt?$AAa?$AAP?$AAo?$AAr?$AAt?$AA_?$AAt?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi@| DCB "M"
	DCB	0x0, "C", 0x0, "P", 0x0, ":", 0x0, " ", 0x0, "E", 0x0, "R"
	DCB	0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " ", 0x0, "D"
	DCB	0x0, "a", 0x0, "t", 0x0, "a", 0x0, "P", 0x0, "o", 0x0, "r"
	DCB	0x0, "t", 0x0, "_", 0x0, "t", 0x0, ":", 0x0, ":", 0x0, "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a", 0x0, "l"
	DCB	0x0, "i", 0x0, "z", 0x0, "e", 0x0, ":", 0x0, " ", 0x0, "F"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "t", 0x0, "o", 0x0, " ", 0x0, "c", 0x0, "r", 0x0, "e"
	DCB	0x0, "a", 0x0, "t", 0x0, "e", 0x0, " ", 0x0, "I", 0x0, "s"
	DCB	0x0, "t", 0x0, " ", 0x0, "T", 0x0, "h", 0x0, "r", 0x0, "e"
	DCB	0x0, "a", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JA@FCKGBGIJ@?$AAM?$AAC?$AAP?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAD?$AAa?$AAt?$AAa?$AAP?$AAo?$AAr?$AAt?$AA_?$AAt?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi@| DCB "M"
	DCB	0x0, "C", 0x0, "P", 0x0, ":", 0x0, " ", 0x0, "E", 0x0, "R"
	DCB	0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " ", 0x0, "D"
	DCB	0x0, "a", 0x0, "t", 0x0, "a", 0x0, "P", 0x0, "o", 0x0, "r"
	DCB	0x0, "t", 0x0, "_", 0x0, "t", 0x0, ":", 0x0, ":", 0x0, "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a", 0x0, "l"
	DCB	0x0, "i", 0x0, "z", 0x0, "e", 0x0, ":", 0x0, " ", 0x0, "F"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "t", 0x0, "o", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "g"
	DCB	0x0, "i", 0x0, "s", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, " "
	DCB	0x0, "f", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "i", 0x0, "n"
	DCB	0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p"
	DCB	0x0, "t", 0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IA@EJJCKLKK@?$AAM?$AAC?$AAP?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAD?$AAa?$AAt?$AAa?$AAP?$AAo?$AAr?$AAt?$AA_?$AAt?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi@| DCB "M"
	DCB	0x0, "C", 0x0, "P", 0x0, ":", 0x0, " ", 0x0, "E", 0x0, "R"
	DCB	0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " ", 0x0, "D"
	DCB	0x0, "a", 0x0, "t", 0x0, "a", 0x0, "P", 0x0, "o", 0x0, "r"
	DCB	0x0, "t", 0x0, "_", 0x0, "t", 0x0, ":", 0x0, ":", 0x0, "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a", 0x0, "l"
	DCB	0x0, "i", 0x0, "z", 0x0, "e", 0x0, ":", 0x0, " ", 0x0, "F"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "D", 0x0, "m", 0x0, "a", 0x0, "A", 0x0, "l", 0x0, "l"
	DCB	0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, "C"
	DCB	0x0, "h", 0x0, "a", 0x0, "n", 0x0, "n", 0x0, "e", 0x0, "l"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HI@JAHBAEGA@?$AAM?$AAC?$AAP?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAD?$AAa?$AAt?$AAa?$AAP?$AAo?$AAr?$AAt?$AA_?$AAt?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi@| DCB "M"
	DCB	0x0, "C", 0x0, "P", 0x0, ":", 0x0, " ", 0x0, "E", 0x0, "R"
	DCB	0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " ", 0x0, "D"
	DCB	0x0, "a", 0x0, "t", 0x0, "a", 0x0, "P", 0x0, "o", 0x0, "r"
	DCB	0x0, "t", 0x0, "_", 0x0, "t", 0x0, ":", 0x0, ":", 0x0, "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a", 0x0, "l"
	DCB	0x0, "i", 0x0, "z", 0x0, "e", 0x0, ":", 0x0, " ", 0x0, "E"
	DCB	0x0, "v", 0x0, "e", 0x0, "n", 0x0, "t", 0x0, " ", 0x0, "c"
	DCB	0x0, "r", 0x0, "e", 0x0, "a", 0x0, "t", 0x0, "i", 0x0, "o"
	DCB	0x0, "n", 0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l"
	DCB	0x0, "e", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JG@LOPGIIKA@?$AAM?$AAC?$AAP?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAD?$AAa?$AAt?$AAa?$AAP?$AAo?$AAr?$AAt?$AA_?$AAt?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi@| DCB "M"
	DCB	0x0, "C", 0x0, "P", 0x0, ":", 0x0, " ", 0x0, "E", 0x0, "R"
	DCB	0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " ", 0x0, "D"
	DCB	0x0, "a", 0x0, "t", 0x0, "a", 0x0, "P", 0x0, "o", 0x0, "r"
	DCB	0x0, "t", 0x0, "_", 0x0, "t", 0x0, ":", 0x0, ":", 0x0, "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a", 0x0, "l"
	DCB	0x0, "i", 0x0, "z", 0x0, "e", 0x0, ":", 0x0, " ", 0x0, "F"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "a", 0x0, "l", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a"
	DCB	0x0, "t", 0x0, "e", 0x0, " ", 0x0, "d", 0x0, "m", 0x0, "a"
	DCB	0x0, " ", 0x0, "b", 0x0, "u", 0x0, "f", 0x0, "f", 0x0, "e"
	DCB	0x0, "r", 0x0, " ", 0x0, "(", 0x0, "s", 0x0, "i", 0x0, "z"
	DCB	0x0, "e", 0x0, " ", 0x0, "%", 0x0, "u", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IM@BMMJICNO@?$AAM?$AAC?$AAP?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAD?$AAa?$AAt?$AAa?$AAP?$AAo?$AAr?$AAt?$AA_?$AAt?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi@| DCB "M"
	DCB	0x0, "C", 0x0, "P", 0x0, ":", 0x0, " ", 0x0, "E", 0x0, "R"
	DCB	0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " ", 0x0, "D"
	DCB	0x0, "a", 0x0, "t", 0x0, "a", 0x0, "P", 0x0, "o", 0x0, "r"
	DCB	0x0, "t", 0x0, "_", 0x0, "t", 0x0, ":", 0x0, ":", 0x0, "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a", 0x0, "l"
	DCB	0x0, "i", 0x0, "z", 0x0, "e", 0x0, ":", 0x0, " ", 0x0, "m"
	DCB	0x0, "c", 0x0, "b", 0x0, "s", 0x0, "p", 0x0, " ", 0x0, "d"
	DCB	0x0, "m", 0x0, "a", 0x0, " ", 0x0, "m", 0x0, "a", 0x0, "p"
	DCB	0x0, "p", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, " ", 0x0, "n"
	DCB	0x0, "o", 0x0, "t", 0x0, " ", 0x0, "s", 0x0, "p", 0x0, "e"
	DCB	0x0, "c", 0x0, "i", 0x0, "f", 0x0, "i", 0x0, "e", 0x0, "d"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BH@IPNLGJAA@DataPort_t?3?3Initialize?$AA@| DCB "DataPort_t::Initi"
	DCB	"alize", 0x0				; `string'
; Function compile flags: /Odtp

  00450			 AREA	 |.text|, CODE, ARM

  00450		 |?Initialize@DataPort_t@@UAAHPAUDmaConfigInfo_t@@KGP6AKPAX@Z@Z| PROC ; DataPort_t::Initialize

; 148  : {

  00450		 |$LN54@Initialize|
  00450	e1a0c00d	 mov         r12, sp
  00454	e92d000f	 stmdb       sp!, {r0 - r3}
  00458	e92d5010	 stmdb       sp!, {r4, r12, lr}
  0045c	e24dd05c	 sub         sp, sp, #0x5C
  00460		 |$M37147|

; 149  :     BOOL bResult = FALSE;

  00460	e3a03000	 mov         r3, #0
  00464	e58d3010	 str         r3, [sp, #0x10]

; 150  : 
; 151  :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S\r\n", __FUNCTION__));

  00468	e59f3644	 ldr         r3, [pc, #0x644]
  0046c	e5933440	 ldr         r3, [r3, #0x440]
  00470	e3130004	 tst         r3, #4
  00474	0a000005	 beq         |$LN36@Initialize|
  00478	e59f1630	 ldr         r1, [pc, #0x630]
  0047c	e59f064c	 ldr         r0, [pc, #0x64C]
  00480	eb000000	 bl          NKDbgPrintfW
  00484	e3a03001	 mov         r3, #1
  00488	e58d3024	 str         r3, [sp, #0x24]
  0048c	ea000001	 b           |$LN37@Initialize|
  00490		 |$LN36@Initialize|
  00490	e3a03000	 mov         r3, #0
  00494	e58d3024	 str         r3, [sp, #0x24]
  00498		 |$LN37@Initialize|

; 152  : 
; 153  :     // verify mcbsp dma mapping
; 154  :     //
; 155  :     if (dmaSyncMap == NULL)

  00498	e1dd37b4	 ldrh        r3, [sp, #0x74]
  0049c	e3530000	 cmp         r3, #0
  004a0	1a00000c	 bne         |$LN33@Initialize|

; 156  :         {
; 157  :         DEBUGMSG(ZONE_ERROR, (L"MCP: ERROR: DataPort_t::Initialize: "
; 158  :             L"mcbsp dma mapping not specified\r\n")
; 159  :             );

  004a4	e59f3608	 ldr         r3, [pc, #0x608]
  004a8	e5933440	 ldr         r3, [r3, #0x440]
  004ac	e3130001	 tst         r3, #1
  004b0	0a000004	 beq         |$LN38@Initialize|
  004b4	e59f0610	 ldr         r0, [pc, #0x610]
  004b8	eb000000	 bl          NKDbgPrintfW
  004bc	e3a03001	 mov         r3, #1
  004c0	e58d3028	 str         r3, [sp, #0x28]
  004c4	ea000001	 b           |$LN39@Initialize|
  004c8		 |$LN38@Initialize|
  004c8	e3a03000	 mov         r3, #0
  004cc	e58d3028	 str         r3, [sp, #0x28]
  004d0		 |$LN39@Initialize|

; 160  :         goto cleanUp;

  004d0	ea000163	 b           |$LN32@Initialize|
  004d4	ea000162	 b           |$cleanUp$36788|
  004d8		 |$LN33@Initialize|

; 161  :         }
; 162  : 
; 163  :     // TDM mode is sets DMA element size of 16bits.
; 164  :     // I2S mode supports  DMA element size from 8 bits to 32 bits
; 165  :     //
; 166  :     if ((m_pDevice->mcbspProfile == kMcBSPProfile_I2S_Slave) ||
; 167  :         (m_pDevice->mcbspProfile == kMcBSPProfile_I2S_Master))

  004d8	e59d3068	 ldr         r3, [sp, #0x68]
  004dc	e283301c	 add         r3, r3, #0x1C
  004e0	e5933000	 ldr         r3, [r3]
  004e4	e283308c	 add         r3, r3, #0x8C
  004e8	e5933000	 ldr         r3, [r3]
  004ec	e3530000	 cmp         r3, #0
  004f0	0a000006	 beq         |$LN30@Initialize|
  004f4	e59d3068	 ldr         r3, [sp, #0x68]
  004f8	e283301c	 add         r3, r3, #0x1C
  004fc	e5933000	 ldr         r3, [r3]
  00500	e283308c	 add         r3, r3, #0x8C
  00504	e5933000	 ldr         r3, [r3]
  00508	e3530001	 cmp         r3, #1
  0050c	1a000019	 bne         |$LN31@Initialize|
  00510		 |$LN30@Initialize|

; 168  :         {
; 169  :         // Determine DMA datatype
; 170  :         //
; 171  :         if (m_pDevice->wordLength > 16)

  00510	e59d3068	 ldr         r3, [sp, #0x68]
  00514	e283301c	 add         r3, r3, #0x1C
  00518	e5933000	 ldr         r3, [r3]
  0051c	e28330cc	 add         r3, r3, #0xCC
  00520	e5933000	 ldr         r3, [r3]
  00524	e3530010	 cmp         r3, #0x10
  00528	9a000003	 bls         |$LN29@Initialize|

; 172  :             {
; 173  :             //  32 bit data type
; 174  :             pDmaConfigInfo->elemSize = DMA_CSDP_DATATYPE_S32;

  0052c	e59d206c	 ldr         r2, [sp, #0x6C]
  00530	e3a03002	 mov         r3, #2
  00534	e5823000	 str         r3, [r2]
  00538	ea00000d	 b           |$LN28@Initialize|
  0053c		 |$LN29@Initialize|

; 175  :             }
; 176  :         else if (m_pDevice->wordLength > 8)

  0053c	e59d3068	 ldr         r3, [sp, #0x68]
  00540	e283301c	 add         r3, r3, #0x1C
  00544	e5933000	 ldr         r3, [r3]
  00548	e28330cc	 add         r3, r3, #0xCC
  0054c	e5933000	 ldr         r3, [r3]
  00550	e3530008	 cmp         r3, #8
  00554	9a000003	 bls         |$LN27@Initialize|

; 177  :             {
; 178  :             //  16 bit data type
; 179  :             pDmaConfigInfo->elemSize = DMA_CSDP_DATATYPE_S16;

  00558	e59d206c	 ldr         r2, [sp, #0x6C]
  0055c	e3a03001	 mov         r3, #1
  00560	e5823000	 str         r3, [r2]

; 180  :             }
; 181  :         else

  00564	ea000002	 b           |$LN26@Initialize|
  00568		 |$LN27@Initialize|

; 182  :             {
; 183  :             //  8 bit data type
; 184  :             pDmaConfigInfo->elemSize = DMA_CSDP_DATATYPE_S8;

  00568	e59d206c	 ldr         r2, [sp, #0x6C]
  0056c	e3a03000	 mov         r3, #0
  00570	e5823000	 str         r3, [r2]
  00574		 |$LN26@Initialize|
  00574		 |$LN28@Initialize|

; 185  :             }

  00574	ea000009	 b           |$LN25@Initialize|
  00578		 |$LN31@Initialize|

; 186  :         }
; 187  :     else if (m_pDevice->mcbspProfile == kMcBSPProfile_TDM)

  00578	e59d3068	 ldr         r3, [sp, #0x68]
  0057c	e283301c	 add         r3, r3, #0x1C
  00580	e5933000	 ldr         r3, [r3]
  00584	e283308c	 add         r3, r3, #0x8C
  00588	e5933000	 ldr         r3, [r3]
  0058c	e3530002	 cmp         r3, #2
  00590	1a000002	 bne         |$LN24@Initialize|

; 188  :         {
; 189  :         //  16 bit data type
; 190  :         pDmaConfigInfo->elemSize = DMA_CSDP_DATATYPE_S16;

  00594	e59d206c	 ldr         r2, [sp, #0x6C]
  00598	e3a03001	 mov         r3, #1
  0059c	e5823000	 str         r3, [r2]
  005a0		 |$LN24@Initialize|
  005a0		 |$LN25@Initialize|

; 191  :         }
; 192  : 
; 193  :     // allocate contiguous physical memory to be used with DMA
; 194  :     //
; 195  :     PHYSICAL_ADDRESS pa;
; 196  :     pa.LowPart = 0;

  005a0	e3a03000	 mov         r3, #0
  005a4	e58d3008	 str         r3, [sp, #8]

; 197  :     m_pDmaBufferStart = (BYTE*)AllocPhysMem(nBufferSize,
; 198  :         PAGE_READWRITE | PAGE_NOCACHE, 0, 0, &pa.LowPart
; 199  :         );

  005a8	e28d3008	 add         r3, sp, #8
  005ac	e58d3000	 str         r3, [sp]
  005b0	e3a03000	 mov         r3, #0
  005b4	e3a02000	 mov         r2, #0
  005b8	e3a01f81	 mov         r1, #0x81, 30
  005bc	e59d0070	 ldr         r0, [sp, #0x70]
  005c0	eb000000	 bl          AllocPhysMem
  005c4	e58d002c	 str         r0, [sp, #0x2C]
  005c8	e59d3068	 ldr         r3, [sp, #0x68]
  005cc	e2832044	 add         r2, r3, #0x44
  005d0	e59d302c	 ldr         r3, [sp, #0x2C]
  005d4	e5823000	 str         r3, [r2]

; 200  :     if (m_pDmaBufferStart == NULL)

  005d8	e59d3068	 ldr         r3, [sp, #0x68]
  005dc	e2833044	 add         r3, r3, #0x44
  005e0	e5933000	 ldr         r3, [r3]
  005e4	e3530000	 cmp         r3, #0
  005e8	1a00000d	 bne         |$LN23@Initialize|

; 201  :         {
; 202  :         DEBUGMSG(ZONE_ERROR, (L"MCP: ERROR: DataPort_t::Initialize: "
; 203  :             L"Failed allocate dma buffer (size %u)\r\n", nBufferSize)
; 204  :             );

  005ec	e59f34c0	 ldr         r3, [pc, #0x4C0]
  005f0	e5933440	 ldr         r3, [r3, #0x440]
  005f4	e3130001	 tst         r3, #1
  005f8	0a000005	 beq         |$LN40@Initialize|
  005fc	e59d1070	 ldr         r1, [sp, #0x70]
  00600	e59f04c0	 ldr         r0, [pc, #0x4C0]
  00604	eb000000	 bl          NKDbgPrintfW
  00608	e3a03001	 mov         r3, #1
  0060c	e58d3030	 str         r3, [sp, #0x30]
  00610	ea000001	 b           |$LN41@Initialize|
  00614		 |$LN40@Initialize|
  00614	e3a03000	 mov         r3, #0
  00618	e58d3030	 str         r3, [sp, #0x30]
  0061c		 |$LN41@Initialize|

; 205  :         goto cleanUp;

  0061c	ea000110	 b           |$LN22@Initialize|
  00620	ea00010f	 b           |$cleanUp$36788|
  00624		 |$LN23@Initialize|

; 206  :         }
; 207  : 
; 208  :     m_DmaPhysAddr = pa.LowPart;

  00624	e59d3068	 ldr         r3, [sp, #0x68]
  00628	e283203c	 add         r2, r3, #0x3C
  0062c	e59d3008	 ldr         r3, [sp, #8]
  00630	e5823000	 str         r3, [r2]

; 209  :     m_pDmaBufferMiddle = (BYTE*)((DWORD)m_pDmaBufferStart + (nBufferSize / 2));

  00634	e59d3068	 ldr         r3, [sp, #0x68]
  00638	e2834044	 add         r4, r3, #0x44
  0063c	e59d1070	 ldr         r1, [sp, #0x70]
  00640	e3a00002	 mov         r0, #2
  00644	eb000000	 bl          __rt_udiv
  00648	e5943000	 ldr         r3, [r4]
  0064c	e0832000	 add         r2, r3, r0
  00650	e59d3068	 ldr         r3, [sp, #0x68]
  00654	e2833048	 add         r3, r3, #0x48
  00658	e5832000	 str         r2, [r3]

; 210  :     m_sizeDmaBuffer = nBufferSize;

  0065c	e59d3068	 ldr         r3, [sp, #0x68]
  00660	e283204c	 add         r2, r3, #0x4C
  00664	e59d3070	 ldr         r3, [sp, #0x70]
  00668	e5823000	 str         r3, [r2]

; 211  : 
; 212  :     UpdateSamplesPerPage(nBufferSize, pDmaConfigInfo->elemSize);

  0066c	e59d306c	 ldr         r3, [sp, #0x6C]
  00670	e5932000	 ldr         r2, [r3]
  00674	e59d1070	 ldr         r1, [sp, #0x70]
  00678	e59d3068	 ldr         r3, [sp, #0x68]
  0067c	e5933000	 ldr         r3, [r3]
  00680	e283300c	 add         r3, r3, #0xC
  00684	e59d0068	 ldr         r0, [sp, #0x68]
  00688	e5933000	 ldr         r3, [r3]
  0068c	e1a0e00f	 mov         lr, pc
  00690	e12fff13	 bx          r3

; 213  : 
; 214  :     // Packet burst mode for I2S mode only
; 215  :     //
; 216  :     if ((m_pDevice->mcbspProfile == kMcBSPProfile_I2S_Slave) ||
; 217  :         (m_pDevice->mcbspProfile == kMcBSPProfile_I2S_Master))

  00694	e59d3068	 ldr         r3, [sp, #0x68]
  00698	e283301c	 add         r3, r3, #0x1C
  0069c	e5933000	 ldr         r3, [r3]
  006a0	e283308c	 add         r3, r3, #0x8C
  006a4	e5933000	 ldr         r3, [r3]
  006a8	e3530000	 cmp         r3, #0
  006ac	0a000006	 beq         |$LN20@Initialize|
  006b0	e59d3068	 ldr         r3, [sp, #0x68]
  006b4	e283301c	 add         r3, r3, #0x1C
  006b8	e5933000	 ldr         r3, [r3]
  006bc	e283308c	 add         r3, r3, #0x8C
  006c0	e5933000	 ldr         r3, [r3]
  006c4	e3530001	 cmp         r3, #1
  006c8	1a00001b	 bne         |$LN21@Initialize|
  006cc		 |$LN20@Initialize|

; 218  :         {
; 219  :         // TX and RX CSDP settings for MCBSP FIFO packet burst
; 220  :         //
; 221  :         if (dmaSyncMap == m_pDevice->dmaTxSyncMap)

  006cc	e1dd27b4	 ldrh        r2, [sp, #0x74]
  006d0	e59d3068	 ldr         r3, [sp, #0x68]
  006d4	e283301c	 add         r3, r3, #0x1C
  006d8	e5933000	 ldr         r3, [r3]
  006dc	e28330a8	 add         r3, r3, #0xA8
  006e0	e5933000	 ldr         r3, [r3]
  006e4	e1520003	 cmp         r2, r3
  006e8	1a000005	 bne         |$LN19@Initialize|

; 222  :             {
; 223  :             // To make sure the TX CSDP configurations
; 224  :             //
; 225  :             pDmaConfigInfo->elemSize |= DMA_CSDP_DST_PACKED |
; 226  :                 DMA_CSDP_DST_BURST_64BYTES_16x32_8x64;

  006ec	e59d306c	 ldr         r3, [sp, #0x6C]
  006f0	e5933000	 ldr         r3, [r3]
  006f4	e3832a0e	 orr         r2, r3, #0xE, 20
  006f8	e59d306c	 ldr         r3, [sp, #0x6C]
  006fc	e5832000	 str         r2, [r3]
  00700	ea00000c	 b           |$LN18@Initialize|
  00704		 |$LN19@Initialize|

; 227  :             }
; 228  :         else if (dmaSyncMap == m_pDevice->dmaRxSyncMap)

  00704	e1dd27b4	 ldrh        r2, [sp, #0x74]
  00708	e59d3068	 ldr         r3, [sp, #0x68]
  0070c	e283301c	 add         r3, r3, #0x1C
  00710	e5933000	 ldr         r3, [r3]
  00714	e28330ac	 add         r3, r3, #0xAC
  00718	e5933000	 ldr         r3, [r3]
  0071c	e1520003	 cmp         r2, r3
  00720	1a000004	 bne         |$LN17@Initialize|

; 229  :             {
; 230  :             // To make sure the RX CSDP configurations
; 231  :             //
; 232  :             pDmaConfigInfo->elemSize |=  DMA_CSDP_SRC_PACKED |
; 233  :                 DMA_CSDP_SRC_BURST_64BYTES_16x32_8x64;

  00724	e59d306c	 ldr         r3, [sp, #0x6C]
  00728	e5933000	 ldr         r3, [r3]
  0072c	e3832d07	 orr         r2, r3, #7, 26
  00730	e59d306c	 ldr         r3, [sp, #0x6C]
  00734	e5832000	 str         r2, [r3]
  00738		 |$LN17@Initialize|
  00738		 |$LN18@Initialize|

; 234  :             }
; 235  :         }

  00738	ea000021	 b           |$LN16@Initialize|
  0073c		 |$LN21@Initialize|

; 236  :     else if (m_pDevice->mcbspProfile == kMcBSPProfile_TDM)

  0073c	e59d3068	 ldr         r3, [sp, #0x68]
  00740	e283301c	 add         r3, r3, #0x1C
  00744	e5933000	 ldr         r3, [r3]
  00748	e283308c	 add         r3, r3, #0x8C
  0074c	e5933000	 ldr         r3, [r3]
  00750	e3530002	 cmp         r3, #2
  00754	1a00001a	 bne         |$LN15@Initialize|

; 237  :         {
; 238  :         // TX and RX CSDP settings for MCBSP FIFO packet burst
; 239  :         //
; 240  :         if (dmaSyncMap == m_pDevice->dmaTxSyncMap)

  00758	e1dd27b4	 ldrh        r2, [sp, #0x74]
  0075c	e59d3068	 ldr         r3, [sp, #0x68]
  00760	e283301c	 add         r3, r3, #0x1C
  00764	e5933000	 ldr         r3, [r3]
  00768	e28330a8	 add         r3, r3, #0xA8
  0076c	e5933000	 ldr         r3, [r3]
  00770	e1520003	 cmp         r2, r3
  00774	1a000005	 bne         |$LN14@Initialize|

; 241  :             {
; 242  :             // To make sure the TX CSDP configurations
; 243  :             //
; 244  :             pDmaConfigInfo->elemSize |= DMA_CSDP_DST_PACKED |
; 245  :                 DMA_CSDP_DST_BURST_64BYTES_16x32_8x64;

  00778	e59d306c	 ldr         r3, [sp, #0x6C]
  0077c	e5933000	 ldr         r3, [r3]
  00780	e3832a0e	 orr         r2, r3, #0xE, 20
  00784	e59d306c	 ldr         r3, [sp, #0x6C]
  00788	e5832000	 str         r2, [r3]
  0078c	ea00000c	 b           |$LN13@Initialize|
  00790		 |$LN14@Initialize|

; 246  :             }
; 247  :         else if (dmaSyncMap == m_pDevice->dmaRxSyncMap)

  00790	e1dd27b4	 ldrh        r2, [sp, #0x74]
  00794	e59d3068	 ldr         r3, [sp, #0x68]
  00798	e283301c	 add         r3, r3, #0x1C
  0079c	e5933000	 ldr         r3, [r3]
  007a0	e28330ac	 add         r3, r3, #0xAC
  007a4	e5933000	 ldr         r3, [r3]
  007a8	e1520003	 cmp         r2, r3
  007ac	1a000004	 bne         |$LN12@Initialize|

; 248  :             {
; 249  :             // To make sure the RX CSDP configurations
; 250  :             //
; 251  :             pDmaConfigInfo->elemSize |= DMA_CSDP_SRC_PACKED |
; 252  :                 DMA_CSDP_SRC_BURST_64BYTES_16x32_8x64;

  007b0	e59d306c	 ldr         r3, [sp, #0x6C]
  007b4	e5933000	 ldr         r3, [r3]
  007b8	e3832d07	 orr         r2, r3, #7, 26
  007bc	e59d306c	 ldr         r3, [sp, #0x6C]
  007c0	e5832000	 str         r2, [r3]
  007c4		 |$LN12@Initialize|
  007c4		 |$LN13@Initialize|
  007c4		 |$LN15@Initialize|
  007c4		 |$LN16@Initialize|

; 253  :             }
; 254  :         }
; 255  : 
; 256  :     if (dmaSyncMap == m_pDevice->dmaTxSyncMap)

  007c4	e1dd27b4	 ldrh        r2, [sp, #0x74]
  007c8	e59d3068	 ldr         r3, [sp, #0x68]
  007cc	e283301c	 add         r3, r3, #0x1C
  007d0	e5933000	 ldr         r3, [r3]
  007d4	e28330a8	 add         r3, r3, #0xA8
  007d8	e5933000	 ldr         r3, [r3]
  007dc	e1520003	 cmp         r2, r3
  007e0	1a000009	 bne         |$LN11@Initialize|

; 257  :         {
; 258  :         // DMA destination frame index must be equal to the TX threshold
; 259  :         // value of the McBSP
; 260  :         pDmaConfigInfo->dstFrameIndex = m_pDevice->fifoThresholdTx + 1;

  007e4	e59d3068	 ldr         r3, [sp, #0x68]
  007e8	e283301c	 add         r3, r3, #0x1C
  007ec	e5933000	 ldr         r3, [r3]
  007f0	e28330f0	 add         r3, r3, #0xF0
  007f4	e5933000	 ldr         r3, [r3]
  007f8	e2832001	 add         r2, r3, #1
  007fc	e59d306c	 ldr         r3, [sp, #0x6C]
  00800	e2833014	 add         r3, r3, #0x14
  00804	e5832000	 str         r2, [r3]
  00808	ea000010	 b           |$LN10@Initialize|
  0080c		 |$LN11@Initialize|

; 261  :         }
; 262  :     else if (dmaSyncMap == m_pDevice->dmaRxSyncMap)

  0080c	e1dd27b4	 ldrh        r2, [sp, #0x74]
  00810	e59d3068	 ldr         r3, [sp, #0x68]
  00814	e283301c	 add         r3, r3, #0x1C
  00818	e5933000	 ldr         r3, [r3]
  0081c	e28330ac	 add         r3, r3, #0xAC
  00820	e5933000	 ldr         r3, [r3]
  00824	e1520003	 cmp         r2, r3
  00828	1a000008	 bne         |$LN9@Initialize|

; 263  :         {
; 264  :         // DMA source frame index must be equal to the RX threshold
; 265  :         // value of the McBSP
; 266  :         pDmaConfigInfo->srcFrameIndex = m_pDevice->fifoThresholdRx + 1;

  0082c	e59d3068	 ldr         r3, [sp, #0x68]
  00830	e283301c	 add         r3, r3, #0x1C
  00834	e5933000	 ldr         r3, [r3]
  00838	e2833e11	 add         r3, r3, #0x11, 28
  0083c	e5933000	 ldr         r3, [r3]
  00840	e2832001	 add         r2, r3, #1
  00844	e59d306c	 ldr         r3, [sp, #0x6C]
  00848	e2833008	 add         r3, r3, #8
  0084c	e5832000	 str         r2, [r3]
  00850		 |$LN9@Initialize|
  00850		 |$LN10@Initialize|

; 267  :         }
; 268  : 
; 269  :     m_hEvent = CreateEvent(NULL, FALSE, FALSE, NULL);

  00850	e3a03000	 mov         r3, #0
  00854	e3a02000	 mov         r2, #0
  00858	e3a01000	 mov         r1, #0
  0085c	e3a00000	 mov         r0, #0
  00860	eb000000	 bl          CreateEventW
  00864	e58d0034	 str         r0, [sp, #0x34]
  00868	e59d3068	 ldr         r3, [sp, #0x68]
  0086c	e2832058	 add         r2, r3, #0x58
  00870	e59d3034	 ldr         r3, [sp, #0x34]
  00874	e5823000	 str         r3, [r2]

; 270  :     if (m_hEvent == NULL)

  00878	e59d3068	 ldr         r3, [sp, #0x68]
  0087c	e2833058	 add         r3, r3, #0x58
  00880	e5933000	 ldr         r3, [r3]
  00884	e3530000	 cmp         r3, #0
  00888	1a00000c	 bne         |$LN8@Initialize|

; 271  :         {
; 272  :         DEBUGMSG(ZONE_ERROR, (L"MCP: ERROR: DataPort_t::Initialize: "
; 273  :             L"Event creation failed\r\n")
; 274  :             );

  0088c	e59f3220	 ldr         r3, [pc, #0x220]
  00890	e5933440	 ldr         r3, [r3, #0x440]
  00894	e3130001	 tst         r3, #1
  00898	0a000004	 beq         |$LN42@Initialize|
  0089c	e59f0220	 ldr         r0, [pc, #0x220]
  008a0	eb000000	 bl          NKDbgPrintfW
  008a4	e3a03001	 mov         r3, #1
  008a8	e58d3038	 str         r3, [sp, #0x38]
  008ac	ea000001	 b           |$LN43@Initialize|
  008b0		 |$LN42@Initialize|
  008b0	e3a03000	 mov         r3, #0
  008b4	e58d3038	 str         r3, [sp, #0x38]
  008b8		 |$LN43@Initialize|

; 275  :         goto cleanUp;

  008b8	ea000069	 b           |$LN7@Initialize|
  008bc	ea000068	 b           |$cleanUp$36788|
  008c0		 |$LN8@Initialize|

; 276  :         }
; 277  : 
; 278  :     m_hDmaChannel = DmaAllocateChannel(DMA_TYPE_SYSTEM);

  008c0	e3a00000	 mov         r0, #0
  008c4	eb000000	 bl          DmaAllocateChannel
  008c8	e58d003c	 str         r0, [sp, #0x3C]
  008cc	e59d3068	 ldr         r3, [sp, #0x68]
  008d0	e283205c	 add         r2, r3, #0x5C
  008d4	e59d303c	 ldr         r3, [sp, #0x3C]
  008d8	e5823000	 str         r3, [r2]

; 279  :     if (m_hDmaChannel == NULL)

  008dc	e59d3068	 ldr         r3, [sp, #0x68]
  008e0	e283305c	 add         r3, r3, #0x5C
  008e4	e5933000	 ldr         r3, [r3]
  008e8	e3530000	 cmp         r3, #0
  008ec	1a00000c	 bne         |$LN6@Initialize|

; 280  :         {
; 281  :         DEBUGMSG(ZONE_ERROR, (L"MCP: ERROR: DataPort_t::Initialize: "
; 282  :             L"Failed DmaAllocateChannel\r\n")
; 283  :             );

  008f0	e59f31bc	 ldr         r3, [pc, #0x1BC]
  008f4	e5933440	 ldr         r3, [r3, #0x440]
  008f8	e3130001	 tst         r3, #1
  008fc	0a000004	 beq         |$LN44@Initialize|
  00900	e59f01b8	 ldr         r0, [pc, #0x1B8]
  00904	eb000000	 bl          NKDbgPrintfW
  00908	e3a03001	 mov         r3, #1
  0090c	e58d3040	 str         r3, [sp, #0x40]
  00910	ea000001	 b           |$LN45@Initialize|
  00914		 |$LN44@Initialize|
  00914	e3a03000	 mov         r3, #0
  00918	e58d3040	 str         r3, [sp, #0x40]
  0091c		 |$LN45@Initialize|

; 284  :         goto cleanUp;

  0091c	ea000050	 b           |$LN5@Initialize|
  00920	ea00004f	 b           |$cleanUp$36788|
  00924		 |$LN6@Initialize|

; 285  :         }
; 286  : 
; 287  :     // register dma for interrupts
; 288  :     if (DmaEnableInterrupts(m_hDmaChannel, m_hEvent) == FALSE)

  00924	e59d3068	 ldr         r3, [sp, #0x68]
  00928	e2833058	 add         r3, r3, #0x58
  0092c	e5931000	 ldr         r1, [r3]
  00930	e59d3068	 ldr         r3, [sp, #0x68]
  00934	e283305c	 add         r3, r3, #0x5C
  00938	e5930000	 ldr         r0, [r3]
  0093c	eb000000	 bl          DmaEnableInterrupts
  00940	e58d0044	 str         r0, [sp, #0x44]
  00944	e59d3044	 ldr         r3, [sp, #0x44]
  00948	e3530000	 cmp         r3, #0
  0094c	1a00000c	 bne         |$LN4@Initialize|

; 289  :         {
; 290  :         DEBUGMSG(ZONE_ERROR, (L"MCP: ERROR: DataPort_t::Initialize: "
; 291  :             L"Failed to register for interrupts\r\n")
; 292  :             );

  00950	e59f315c	 ldr         r3, [pc, #0x15C]
  00954	e5933440	 ldr         r3, [r3, #0x440]
  00958	e3130001	 tst         r3, #1
  0095c	0a000004	 beq         |$LN46@Initialize|
  00960	e59f0154	 ldr         r0, [pc, #0x154]
  00964	eb000000	 bl          NKDbgPrintfW
  00968	e3a03001	 mov         r3, #1
  0096c	e58d3048	 str         r3, [sp, #0x48]
  00970	ea000001	 b           |$LN47@Initialize|
  00974		 |$LN46@Initialize|
  00974	e3a03000	 mov         r3, #0
  00978	e58d3048	 str         r3, [sp, #0x48]
  0097c		 |$LN47@Initialize|

; 293  :         goto cleanUp;

  0097c	ea000038	 b           |$LN3@Initialize|
  00980	ea000037	 b           |$cleanUp$36788|
  00984		 |$LN4@Initialize|

; 294  :         }
; 295  : 
; 296  :     // configure dma
; 297  :     //
; 298  :     DmaConfigure(m_hDmaChannel, pDmaConfigInfo, dmaSyncMap, &m_DmaInfo);

  00984	e59d3068	 ldr         r3, [sp, #0x68]
  00988	e2833004	 add         r3, r3, #4
  0098c	e1dd27b4	 ldrh        r2, [sp, #0x74]
  00990	e59d106c	 ldr         r1, [sp, #0x6C]
  00994	e59d0068	 ldr         r0, [sp, #0x68]
  00998	e280005c	 add         r0, r0, #0x5C
  0099c	e5900000	 ldr         r0, [r0]
  009a0	eb000000	 bl          DmaConfigure

; 299  :     DmaSetElementAndFrameCount(&m_DmaInfo, (WORD)GetSamplesPerPage(), 2);

  009a4	e59d0068	 ldr         r0, [sp, #0x68]
  009a8	eb000000	 bl          |?GetSamplesPerPage@DataPort_t@@QBAHXZ|
  009ac	e58d004c	 str         r0, [sp, #0x4C]
  009b0	e3a02002	 mov         r2, #2
  009b4	e59d304c	 ldr         r3, [sp, #0x4C]
  009b8	e1a01803	 mov         r1, r3, lsl #16
  009bc	e1a01821	 mov         r1, r1, lsr #16
  009c0	e59d3068	 ldr         r3, [sp, #0x68]
  009c4	e2830004	 add         r0, r3, #4
  009c8	eb000000	 bl          DmaSetElementAndFrameCount

; 300  :     DmaSetRepeatMode(&m_DmaInfo, TRUE);

  009cc	e3a01001	 mov         r1, #1
  009d0	e59d3068	 ldr         r3, [sp, #0x68]
  009d4	e2830004	 add         r0, r3, #4
  009d8	eb000000	 bl          DmaSetRepeatMode

; 301  : 
; 302  :     // spawn thread
; 303  :     //
; 304  :     if (NULL == CreateThread(NULL, 0, pIstDma, m_pDevice, 0, NULL))

  009dc	e3a03000	 mov         r3, #0
  009e0	e58d3004	 str         r3, [sp, #4]
  009e4	e3a03000	 mov         r3, #0
  009e8	e58d3000	 str         r3, [sp]
  009ec	e59d3068	 ldr         r3, [sp, #0x68]
  009f0	e283301c	 add         r3, r3, #0x1C
  009f4	e5933000	 ldr         r3, [r3]
  009f8	e59d2078	 ldr         r2, [sp, #0x78]
  009fc	e3a01000	 mov         r1, #0
  00a00	e3a00000	 mov         r0, #0
  00a04	eb000000	 bl          CreateThread
  00a08	e58d0050	 str         r0, [sp, #0x50]
  00a0c	e59d3050	 ldr         r3, [sp, #0x50]
  00a10	e3530000	 cmp         r3, #0
  00a14	1a00000c	 bne         |$LN2@Initialize|

; 305  :         {
; 306  :         DEBUGMSG(ZONE_ERROR, (L"MCP: ERROR: DataPort_t::Initialize: "
; 307  :             L"Failed to create Ist Thread\r\n")
; 308  :             );

  00a18	e59f3094	 ldr         r3, [pc, #0x94]
  00a1c	e5933440	 ldr         r3, [r3, #0x440]
  00a20	e3130001	 tst         r3, #1
  00a24	0a000004	 beq         |$LN48@Initialize|
  00a28	e59f0088	 ldr         r0, [pc, #0x88]
  00a2c	eb000000	 bl          NKDbgPrintfW
  00a30	e3a03001	 mov         r3, #1
  00a34	e58d3054	 str         r3, [sp, #0x54]
  00a38	ea000001	 b           |$LN49@Initialize|
  00a3c		 |$LN48@Initialize|
  00a3c	e3a03000	 mov         r3, #0
  00a40	e58d3054	 str         r3, [sp, #0x54]
  00a44		 |$LN49@Initialize|

; 309  :         goto cleanUp;

  00a44	ea000006	 b           |$LN1@Initialize|
  00a48	ea000005	 b           |$cleanUp$36788|
  00a4c		 |$LN2@Initialize|

; 310  :         }
; 311  : 
; 312  :     m_PortState = kMcBSP_Port_Idle;

  00a4c	e59d3068	 ldr         r3, [sp, #0x68]
  00a50	e2832024	 add         r2, r3, #0x24
  00a54	e3a03001	 mov         r3, #1
  00a58	e5823000	 str         r3, [r2]

; 313  :     bResult = TRUE;

  00a5c	e3a03001	 mov         r3, #1
  00a60	e58d3010	 str         r3, [sp, #0x10]
  00a64		 |$LN1@Initialize|
  00a64		 |$LN3@Initialize|
  00a64		 |$LN5@Initialize|
  00a64		 |$LN7@Initialize|
  00a64		 |$LN22@Initialize|
  00a64		 |$LN32@Initialize|
  00a64		 |$cleanUp$36788|

; 314  : 
; 315  : cleanUp:
; 316  : 
; 317  :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S\r\n", __FUNCTION__));

  00a64	e59f3048	 ldr         r3, [pc, #0x48]
  00a68	e5933440	 ldr         r3, [r3, #0x440]
  00a6c	e3130004	 tst         r3, #4
  00a70	0a000005	 beq         |$LN50@Initialize|
  00a74	e59f1034	 ldr         r1, [pc, #0x34]
  00a78	e59f002c	 ldr         r0, [pc, #0x2C]
  00a7c	eb000000	 bl          NKDbgPrintfW
  00a80	e3a03001	 mov         r3, #1
  00a84	e58d3058	 str         r3, [sp, #0x58]
  00a88	ea000001	 b           |$LN51@Initialize|
  00a8c		 |$LN50@Initialize|
  00a8c	e3a03000	 mov         r3, #0
  00a90	e58d3058	 str         r3, [sp, #0x58]
  00a94		 |$LN51@Initialize|

; 318  :     return bResult;

  00a94	e59d3010	 ldr         r3, [sp, #0x10]
  00a98	e58d3020	 str         r3, [sp, #0x20]

; 319  : }

  00a9c	e59d0020	 ldr         r0, [sp, #0x20]
  00aa0	e28dd05c	 add         sp, sp, #0x5C
  00aa4	e89d6010	 ldmia       sp, {r4, sp, lr}
  00aa8	e12fff1e	 bx          lr
  00aac		 |$LN55@Initialize|
  00aac		 |$LN56@Initialize|
  00aac	00000000	 DCD         |??_C@_1BE@LFFACMJN@?$AAM?$AAC?$AAP?$AA?3?$AA?9?$AA?$CF?$AAS?$AA?$AN?$AA?6?$AA?$AA@|
  00ab0		 |$LN57@Initialize|
  00ab0	00000000	 DCD         |??_C@_0BH@IPNLGJAA@DataPort_t?3?3Initialize?$AA@|
  00ab4		 |$LN58@Initialize|
  00ab4	00000000	 DCD         |dpCurSettings|
  00ab8		 |$LN59@Initialize|
  00ab8	00000000	 DCD         |??_C@_1IE@LNAIPGPE@?$AAM?$AAC?$AAP?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAD?$AAa?$AAt?$AAa?$AAP?$AAo?$AAr?$AAt?$AA_?$AAt?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi@|
  00abc		 |$LN60@Initialize|
  00abc	00000000	 DCD         |??_C@_1JA@FCKGBGIJ@?$AAM?$AAC?$AAP?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAD?$AAa?$AAt?$AAa?$AAP?$AAo?$AAr?$AAt?$AA_?$AAt?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi@|
  00ac0		 |$LN61@Initialize|
  00ac0	00000000	 DCD         |??_C@_1IA@EJJCKLKK@?$AAM?$AAC?$AAP?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAD?$AAa?$AAt?$AAa?$AAP?$AAo?$AAr?$AAt?$AA_?$AAt?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi@|
  00ac4		 |$LN62@Initialize|
  00ac4	00000000	 DCD         |??_C@_1HI@JAHBAEGA@?$AAM?$AAC?$AAP?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAD?$AAa?$AAt?$AAa?$AAP?$AAo?$AAr?$AAt?$AA_?$AAt?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi@|
  00ac8		 |$LN63@Initialize|
  00ac8	00000000	 DCD         |??_C@_1JG@LOPGIIKA@?$AAM?$AAC?$AAP?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAD?$AAa?$AAt?$AAa?$AAP?$AAo?$AAr?$AAt?$AA_?$AAt?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi@|
  00acc		 |$LN64@Initialize|
  00acc	00000000	 DCD         |??_C@_1IM@BMMJICNO@?$AAM?$AAC?$AAP?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAD?$AAa?$AAt?$AAa?$AAP?$AAo?$AAr?$AAt?$AA_?$AAt?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi@|
  00ad0		 |$LN65@Initialize|
  00ad0	00000000	 DCD         |??_C@_1BE@FKGNIJHN@?$AAM?$AAC?$AAP?$AA?3?$AA?$CL?$AA?$CF?$AAS?$AA?$AN?$AA?6?$AA?$AA@|
  00ad4		 |$M37148|

			 ENDP  ; |?Initialize@DataPort_t@@UAAHPAUDmaConfigInfo_t@@KGP6AKPAX@Z@Z|, DataPort_t::Initialize

	IMPORT	|DmaGetLogicalChannel|
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\mcbsp\dma_utility.h

  00000			 AREA	 |.pdata|, PDATA
|$T37167| DCD	|$LN9@DmaConfigu|
	DCD	0x40007e04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DmaConfigure| PROC

; 172  : {

  00000		 |$LN9@DmaConfigu|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d000f	 stmdb       sp!, {r0 - r3}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd010	 sub         sp, sp, #0x10
  00010		 |$M37164|

; 173  :     BOOL rc = FALSE;

  00010	e3a03000	 mov         r3, #0
  00014	e58d3004	 str         r3, [sp, #4]

; 174  :     OMAP_DMA_LC_REGS *pDmaLcReg = (OMAP_DMA_LC_REGS*)DmaGetLogicalChannel(hDmaChannel);

  00018	e59d0018	 ldr         r0, [sp, #0x18]
  0001c	eb000000	 bl          DmaGetLogicalChannel
  00020	e58d000c	 str         r0, [sp, #0xC]
  00024	e59d300c	 ldr         r3, [sp, #0xC]
  00028	e58d3000	 str         r3, [sp]

; 175  :     if (pDmaLcReg == NULL || pConfigInfo == NULL)

  0002c	e59d3000	 ldr         r3, [sp]
  00030	e3530000	 cmp         r3, #0
  00034	0a000002	 beq         |$LN3@DmaConfigu|
  00038	e59d301c	 ldr         r3, [sp, #0x1C]
  0003c	e3530000	 cmp         r3, #0
  00040	1a000001	 bne         |$LN4@DmaConfigu|
  00044		 |$LN3@DmaConfigu|

; 176  :         {
; 177  :         goto cleanUp;

  00044	ea000065	 b           |$LN2@DmaConfigu|
  00048	ea000064	 b           |$cleanUp$35972|
  0004c		 |$LN4@DmaConfigu|

; 178  :         }
; 179  : 
; 180  :     // initialize dma DataInfo if necessary
; 181  :     if (pDataInfo != NULL)

  0004c	e59d3024	 ldr         r3, [sp, #0x24]
  00050	e3530000	 cmp         r3, #0
  00054	0a00000b	 beq         |$LN1@DmaConfigu|

; 182  :         {
; 183  :         memset(pDataInfo, 0, sizeof(DmaDataInfo_t));

  00058	e3a02018	 mov         r2, #0x18
  0005c	e3a01000	 mov         r1, #0
  00060	e59d0024	 ldr         r0, [sp, #0x24]
  00064	eb000000	 bl          memset

; 184  :         pDataInfo->hDmaChannel = hDmaChannel;

  00068	e59d3024	 ldr         r3, [sp, #0x24]
  0006c	e2832010	 add         r2, r3, #0x10
  00070	e59d3018	 ldr         r3, [sp, #0x18]
  00074	e5823000	 str         r3, [r2]

; 185  :         pDataInfo->pDmaLcReg = pDmaLcReg;

  00078	e59d3024	 ldr         r3, [sp, #0x24]
  0007c	e2832014	 add         r2, r3, #0x14
  00080	e59d3000	 ldr         r3, [sp]
  00084	e5823000	 str         r3, [r2]
  00088		 |$LN1@DmaConfigu|

; 186  :         }
; 187  : 
; 188  :     // Disable the DMA in case it is running
; 189  :     CLRREG32(&pDmaLcReg->CCR, DMA_CCR_ENABLE);

  00088	e59d3000	 ldr         r3, [sp]
  0008c	e5932000	 ldr         r2, [r3]
  00090	e3e03080	 mvn         r3, #0x80
  00094	e0022003	 and         r2, r2, r3
  00098	e59d3000	 ldr         r3, [sp]
  0009c	e5832000	 str         r2, [r3]

; 190  : 
; 191  :     // update syncmap
; 192  :     pConfigInfo->syncMap = syncMap;

  000a0	e59d301c	 ldr         r3, [sp, #0x1C]
  000a4	e283202c	 add         r2, r3, #0x2C
  000a8	e59d3020	 ldr         r3, [sp, #0x20]
  000ac	e5823000	 str         r3, [r2]

; 193  : 
; 194  :     // Initialize logical channel registers
; 195  :     //
; 196  :     OUTREG32(&pDmaLcReg->CCR, 0);

  000b0	e59d2000	 ldr         r2, [sp]
  000b4	e3a03000	 mov         r3, #0
  000b8	e5823000	 str         r3, [r2]

; 197  :     OUTREG32(&pDmaLcReg->CLNK_CTRL, 0);

  000bc	e59d3000	 ldr         r3, [sp]
  000c0	e2832004	 add         r2, r3, #4
  000c4	e3a03000	 mov         r3, #0
  000c8	e5823000	 str         r3, [r2]

; 198  :     OUTREG32(&pDmaLcReg->COLOR, 0);

  000cc	e59d3000	 ldr         r3, [sp]
  000d0	e2832044	 add         r2, r3, #0x44
  000d4	e3a03000	 mov         r3, #0
  000d8	e5823000	 str         r3, [r2]

; 199  : 
; 200  :     // update CSDP
; 201  :     //  DATA_TYPE
; 202  :     //  DST
; 203  :     //  SRC
; 204  :     OUTREG32(&pDmaLcReg->CSDP, pConfigInfo->elemSize);

  000dc	e59d3000	 ldr         r3, [sp]
  000e0	e2832010	 add         r2, r3, #0x10
  000e4	e59d301c	 ldr         r3, [sp, #0x1C]
  000e8	e5933000	 ldr         r3, [r3]
  000ec	e5823000	 str         r3, [r2]

; 205  : 
; 206  :     // update CCR
; 207  :     //  DST_MODE
; 208  :     //  SRC_MODE
; 209  :     //  PRIO
; 210  :     //  SYNC
; 211  :     //
; 212  :     OUTREG32(&pDmaLcReg->CCR, pConfigInfo->srcAddrMode |
; 213  :         pConfigInfo->dstAddrMode | pConfigInfo->dmaPrio |
; 214  :         DMA_CCR_SYNC(syncMap) | pConfigInfo->synchTrigger |
; 215  :         pConfigInfo->synchMode
; 216  :         );

  000f0	e59d301c	 ldr         r3, [sp, #0x1C]
  000f4	e283200c	 add         r2, r3, #0xC
  000f8	e59d301c	 ldr         r3, [sp, #0x1C]
  000fc	e2833018	 add         r3, r3, #0x18
  00100	e5922000	 ldr         r2, [r2]
  00104	e5933000	 ldr         r3, [r3]
  00108	e1822003	 orr         r2, r2, r3
  0010c	e59d301c	 ldr         r3, [sp, #0x1C]
  00110	e283301c	 add         r3, r3, #0x1C
  00114	e5933000	 ldr         r3, [r3]
  00118	e1821003	 orr         r1, r2, r3
  0011c	e59d3020	 ldr         r3, [sp, #0x20]
  00120	e203201f	 and         r2, r3, #0x1F
  00124	e59d3020	 ldr         r3, [sp, #0x20]
  00128	e2033060	 and         r3, r3, #0x60
  0012c	e1a03703	 mov         r3, r3, lsl #14
  00130	e1823003	 orr         r3, r2, r3
  00134	e1812003	 orr         r2, r1, r3
  00138	e59d301c	 ldr         r3, [sp, #0x1C]
  0013c	e2833020	 add         r3, r3, #0x20
  00140	e5933000	 ldr         r3, [r3]
  00144	e1822003	 orr         r2, r2, r3
  00148	e59d301c	 ldr         r3, [sp, #0x1C]
  0014c	e2833024	 add         r3, r3, #0x24
  00150	e5933000	 ldr         r3, [r3]
  00154	e1822003	 orr         r2, r2, r3
  00158	e59d3000	 ldr         r3, [sp]
  0015c	e5832000	 str         r2, [r3]

; 217  : 
; 218  :     // update CSEI
; 219  :     //
; 220  :     OUTREG32(&pDmaLcReg->CSEI, pConfigInfo->srcElemIndex);

  00160	e59d301c	 ldr         r3, [sp, #0x1C]
  00164	e2831004	 add         r1, r3, #4
  00168	e59d3000	 ldr         r3, [sp]
  0016c	e2832024	 add         r2, r3, #0x24
  00170	e5913000	 ldr         r3, [r1]
  00174	e5823000	 str         r3, [r2]

; 221  : 
; 222  :     // update CDEI
; 223  :     //
; 224  :     OUTREG32(&pDmaLcReg->CDEI, pConfigInfo->dstElemIndex);

  00178	e59d301c	 ldr         r3, [sp, #0x1C]
  0017c	e2831010	 add         r1, r3, #0x10
  00180	e59d3000	 ldr         r3, [sp]
  00184	e283202c	 add         r2, r3, #0x2C
  00188	e5913000	 ldr         r3, [r1]
  0018c	e5823000	 str         r3, [r2]

; 225  : 
; 226  :     // update CSFI
; 227  :     //
; 228  :     OUTREG32(&pDmaLcReg->CSFI, pConfigInfo->srcFrameIndex);

  00190	e59d301c	 ldr         r3, [sp, #0x1C]
  00194	e2831008	 add         r1, r3, #8
  00198	e59d3000	 ldr         r3, [sp]
  0019c	e2832028	 add         r2, r3, #0x28
  001a0	e5913000	 ldr         r3, [r1]
  001a4	e5823000	 str         r3, [r2]

; 229  : 
; 230  :     // update CDFI
; 231  :     //
; 232  :     OUTREG32(&pDmaLcReg->CDFI, pConfigInfo->dstFrameIndex);

  001a8	e59d301c	 ldr         r3, [sp, #0x1C]
  001ac	e2831014	 add         r1, r3, #0x14
  001b0	e59d3000	 ldr         r3, [sp]
  001b4	e2832030	 add         r2, r3, #0x30
  001b8	e5913000	 ldr         r3, [r1]
  001bc	e5823000	 str         r3, [r2]

; 233  : 
; 234  :     // update CICR
; 235  :     //
; 236  :     OUTREG32(&pDmaLcReg->CICR , pConfigInfo->interrupts);

  001c0	e59d301c	 ldr         r3, [sp, #0x1C]
  001c4	e2831028	 add         r1, r3, #0x28
  001c8	e59d3000	 ldr         r3, [sp]
  001cc	e2832008	 add         r2, r3, #8
  001d0	e5913000	 ldr         r3, [r1]
  001d4	e5823000	 str         r3, [r2]

; 237  :     
; 238  :     rc = TRUE;

  001d8	e3a03001	 mov         r3, #1
  001dc	e58d3004	 str         r3, [sp, #4]
  001e0		 |$LN2@DmaConfigu|
  001e0		 |$cleanUp$35972|

; 239  : 
; 240  : cleanUp:
; 241  :     return rc;

  001e0	e59d3004	 ldr         r3, [sp, #4]
  001e4	e58d3008	 str         r3, [sp, #8]

; 242  : }

  001e8	e59d0008	 ldr         r0, [sp, #8]
  001ec	e28dd010	 add         sp, sp, #0x10
  001f0	e89d6000	 ldmia       sp, {sp, lr}
  001f4	e12fff1e	 bx          lr
  001f8		 |$M37165|

			 ENDP  ; |DmaConfigure|


  00000			 AREA	 |.pdata|, PDATA
|$T37174| DCD	|$LN5@DmaSetElem|
	DCD	0x40001103
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DmaSetElementAndFrameCount| PROC

; 392  : {

  00000		 |$LN5@DmaSetElem|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0007	 stmdb       sp!, {r0 - r2}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M37171|

; 393  :     // setup frame and element count for destination side
; 394  :     //
; 395  :     OUTREG32(&pDataInfo->pDmaLcReg->CEN , countElements);

  0000c	e59d3008	 ldr         r3, [sp, #8]
  00010	e2833014	 add         r3, r3, #0x14
  00014	e5933000	 ldr         r3, [r3]
  00018	e2832014	 add         r2, r3, #0x14
  0001c	e59d300c	 ldr         r3, [sp, #0xC]
  00020	e5823000	 str         r3, [r2]

; 396  :     OUTREG32(&pDataInfo->pDmaLcReg->CFN , countFrames);

  00024	e1dd21b0	 ldrh        r2, [sp, #0x10]
  00028	e59d3008	 ldr         r3, [sp, #8]
  0002c	e2833014	 add         r3, r3, #0x14
  00030	e5933000	 ldr         r3, [r3]
  00034	e2833018	 add         r3, r3, #0x18
  00038	e5832000	 str         r2, [r3]

; 397  : }

  0003c	e89d6000	 ldmia       sp, {sp, lr}
  00040	e12fff1e	 bx          lr
  00044		 |$M37172|

			 ENDP  ; |DmaSetElementAndFrameCount|

	IMPORT	|DmaGetLogicalChannelId|

  00000			 AREA	 |.pdata|, PDATA
|$T37184| DCD	|$LN8@DmaSetRepe|
	DCD	0x40002904
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DmaSetRepeatMode| PROC

; 549  : {

  00000		 |$LN8@DmaSetRepe|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd010	 sub         sp, sp, #0x10
  00010		 |$M37181|

; 550  :     DWORD dwMode = DmaGetLogicalChannelId(pDataInfo->hDmaChannel);

  00010	e59d3018	 ldr         r3, [sp, #0x18]
  00014	e2833010	 add         r3, r3, #0x10
  00018	e5930000	 ldr         r0, [r3]
  0001c	eb000000	 bl          DmaGetLogicalChannelId
  00020	e58d0008	 str         r0, [sp, #8]
  00024	e59d3008	 ldr         r3, [sp, #8]
  00028	e58d3000	 str         r3, [sp]

; 551  :     if (dwMode == -1) return FALSE;

  0002c	e59d3000	 ldr         r3, [sp]
  00030	e3730001	 cmn         r3, #1
  00034	1a000002	 bne         |$LN1@DmaSetRepe|
  00038	e3a03000	 mov         r3, #0
  0003c	e58d3004	 str         r3, [sp, #4]
  00040	ea000013	 b           |$LN2@DmaSetRepe|
  00044		 |$LN1@DmaSetRepe|

; 552  : 
; 553  :     dwMode |= (bEnable == TRUE) ? DMA_CLNK_CTRL_ENABLE_LINK : 0;

  00044	e59d301c	 ldr         r3, [sp, #0x1C]
  00048	e3530001	 cmp         r3, #1
  0004c	1a000002	 bne         |$LN4@DmaSetRepe|
  00050	e3a03902	 mov         r3, #2, 18
  00054	e58d300c	 str         r3, [sp, #0xC]
  00058	ea000001	 b           |$LN5@DmaSetRepe|
  0005c		 |$LN4@DmaSetRepe|
  0005c	e3a03000	 mov         r3, #0
  00060	e58d300c	 str         r3, [sp, #0xC]
  00064		 |$LN5@DmaSetRepe|
  00064	e59d2000	 ldr         r2, [sp]
  00068	e59d300c	 ldr         r3, [sp, #0xC]
  0006c	e1823003	 orr         r3, r2, r3
  00070	e58d3000	 str         r3, [sp]

; 554  :     OUTREG32(&pDataInfo->pDmaLcReg->CLNK_CTRL, dwMode);

  00074	e59d3018	 ldr         r3, [sp, #0x18]
  00078	e2833014	 add         r3, r3, #0x14
  0007c	e5933000	 ldr         r3, [r3]
  00080	e2832004	 add         r2, r3, #4
  00084	e59d3000	 ldr         r3, [sp]
  00088	e5823000	 str         r3, [r2]

; 555  :     return TRUE;

  0008c	e3a03001	 mov         r3, #1
  00090	e58d3004	 str         r3, [sp, #4]
  00094		 |$LN2@DmaSetRepe|

; 556  : }

  00094	e59d0004	 ldr         r0, [sp, #4]
  00098	e28dd010	 add         sp, sp, #0x10
  0009c	e89d6000	 ldmia       sp, {sp, lr}
  000a0	e12fff1e	 bx          lr
  000a4		 |$M37182|

			 ENDP  ; |DmaSetRepeatMode|

; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\mcbsp\dataport.h

  00000			 AREA	 |.pdata|, PDATA
|$T37192| DCD	|$LN5@GetSamples|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetSamplesPerPage@DataPort_t@@QBAHXZ| PROC ; DataPort_t::GetSamplesPerPage

; 89   :     {

  00000		 |$LN5@GetSamples|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M37189|

; 90   :         return m_SamplesPerPage;

  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e2833050	 add         r3, r3, #0x50
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3000	 str         r3, [sp]

; 91   :     }

  00020	e59d0000	 ldr         r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M37190|

			 ENDP  ; |?GetSamplesPerPage@DataPort_t@@QBAHXZ|, DataPort_t::GetSamplesPerPage

	EXPORT	|DmaUpdate|
	EXPORT	|??_C@_0BO@GEGNALDO@DataPort_t?3?3RestoreDMAcontext?$AA@| [ DATA ] ; `string'

  00020			 AREA	 |.pdata|, PDATA
|$T37204| DCD	|$LN30@RestoreDMA|
	DCD	0x4000ec04
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\mcbsp\dataport.cpp

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BO@GEGNALDO@DataPort_t?3?3RestoreDMAcontext?$AA@| DCB "DataPort_t"
	DCB	"::RestoreDMAcontext", 0x0		; `string'
; Function compile flags: /Odtp

  00ad4			 AREA	 |.text|, CODE, ARM

  00ad4		 |?RestoreDMAcontext@DataPort_t@@UAAHPAUDmaConfigInfo_t@@KG@Z| PROC ; DataPort_t::RestoreDMAcontext

; 332  : {

  00ad4		 |$LN30@RestoreDMA|
  00ad4	e1a0c00d	 mov         r12, sp
  00ad8	e92d000f	 stmdb       sp!, {r0 - r3}
  00adc	e92d5000	 stmdb       sp!, {r12, lr}
  00ae0	e24dd014	 sub         sp, sp, #0x14
  00ae4		 |$M37201|

; 333  :     BOOL bResult = FALSE;

  00ae4	e3a03000	 mov         r3, #0
  00ae8	e58d3000	 str         r3, [sp]

; 334  : 
; 335  :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S\r\n", __FUNCTION__));

  00aec	e59f3388	 ldr         r3, [pc, #0x388]
  00af0	e5933440	 ldr         r3, [r3, #0x440]
  00af4	e3130004	 tst         r3, #4
  00af8	0a000005	 beq         |$LN24@RestoreDMA|
  00afc	e59f1374	 ldr         r1, [pc, #0x374]
  00b00	e59f0378	 ldr         r0, [pc, #0x378]
  00b04	eb000000	 bl          NKDbgPrintfW
  00b08	e3a03001	 mov         r3, #1
  00b0c	e58d3008	 str         r3, [sp, #8]
  00b10	ea000001	 b           |$LN25@RestoreDMA|
  00b14		 |$LN24@RestoreDMA|
  00b14	e3a03000	 mov         r3, #0
  00b18	e58d3008	 str         r3, [sp, #8]
  00b1c		 |$LN25@RestoreDMA|

; 336  : 
; 337  :     // TDM mode is sets DMA element size of 16bits.
; 338  :     // I2S mode supports  DMA element size from 8 bits to 32 bits
; 339  :     //
; 340  :     if ((m_pDevice->mcbspProfile == kMcBSPProfile_I2S_Slave) ||
; 341  :         (m_pDevice->mcbspProfile == kMcBSPProfile_I2S_Master))

  00b1c	e59d301c	 ldr         r3, [sp, #0x1C]
  00b20	e283301c	 add         r3, r3, #0x1C
  00b24	e5933000	 ldr         r3, [r3]
  00b28	e283308c	 add         r3, r3, #0x8C
  00b2c	e5933000	 ldr         r3, [r3]
  00b30	e3530000	 cmp         r3, #0
  00b34	0a000006	 beq         |$LN20@RestoreDMA|
  00b38	e59d301c	 ldr         r3, [sp, #0x1C]
  00b3c	e283301c	 add         r3, r3, #0x1C
  00b40	e5933000	 ldr         r3, [r3]
  00b44	e283308c	 add         r3, r3, #0x8C
  00b48	e5933000	 ldr         r3, [r3]
  00b4c	e3530001	 cmp         r3, #1
  00b50	1a000019	 bne         |$LN21@RestoreDMA|
  00b54		 |$LN20@RestoreDMA|

; 342  :         {
; 343  :         // Determine DMA datatype
; 344  :         //
; 345  :         if (m_pDevice->wordLength > 16)

  00b54	e59d301c	 ldr         r3, [sp, #0x1C]
  00b58	e283301c	 add         r3, r3, #0x1C
  00b5c	e5933000	 ldr         r3, [r3]
  00b60	e28330cc	 add         r3, r3, #0xCC
  00b64	e5933000	 ldr         r3, [r3]
  00b68	e3530010	 cmp         r3, #0x10
  00b6c	9a000003	 bls         |$LN19@RestoreDMA|

; 346  :             {
; 347  :             //  32 bit data type
; 348  :             pDmaConfigInfo->elemSize = DMA_CSDP_DATATYPE_S32;

  00b70	e59d2020	 ldr         r2, [sp, #0x20]
  00b74	e3a03002	 mov         r3, #2
  00b78	e5823000	 str         r3, [r2]
  00b7c	ea00000d	 b           |$LN18@RestoreDMA|
  00b80		 |$LN19@RestoreDMA|

; 349  :             }
; 350  :         else if (m_pDevice->wordLength > 8)

  00b80	e59d301c	 ldr         r3, [sp, #0x1C]
  00b84	e283301c	 add         r3, r3, #0x1C
  00b88	e5933000	 ldr         r3, [r3]
  00b8c	e28330cc	 add         r3, r3, #0xCC
  00b90	e5933000	 ldr         r3, [r3]
  00b94	e3530008	 cmp         r3, #8
  00b98	9a000003	 bls         |$LN17@RestoreDMA|

; 351  :             {
; 352  :             //  16 bit data type
; 353  :             pDmaConfigInfo->elemSize = DMA_CSDP_DATATYPE_S16;

  00b9c	e59d2020	 ldr         r2, [sp, #0x20]
  00ba0	e3a03001	 mov         r3, #1
  00ba4	e5823000	 str         r3, [r2]

; 354  :             }
; 355  :         else

  00ba8	ea000002	 b           |$LN16@RestoreDMA|
  00bac		 |$LN17@RestoreDMA|

; 356  :             {
; 357  :             //  8 bit data type
; 358  :             pDmaConfigInfo->elemSize = DMA_CSDP_DATATYPE_S8;

  00bac	e59d2020	 ldr         r2, [sp, #0x20]
  00bb0	e3a03000	 mov         r3, #0
  00bb4	e5823000	 str         r3, [r2]
  00bb8		 |$LN16@RestoreDMA|
  00bb8		 |$LN18@RestoreDMA|

; 359  :             }

  00bb8	ea000009	 b           |$LN15@RestoreDMA|
  00bbc		 |$LN21@RestoreDMA|

; 360  :         }
; 361  :     else if (m_pDevice->mcbspProfile == kMcBSPProfile_TDM)

  00bbc	e59d301c	 ldr         r3, [sp, #0x1C]
  00bc0	e283301c	 add         r3, r3, #0x1C
  00bc4	e5933000	 ldr         r3, [r3]
  00bc8	e283308c	 add         r3, r3, #0x8C
  00bcc	e5933000	 ldr         r3, [r3]
  00bd0	e3530002	 cmp         r3, #2
  00bd4	1a000002	 bne         |$LN14@RestoreDMA|

; 362  :         {
; 363  :         //  16 bit data type
; 364  :         pDmaConfigInfo->elemSize = DMA_CSDP_DATATYPE_S16;

  00bd8	e59d2020	 ldr         r2, [sp, #0x20]
  00bdc	e3a03001	 mov         r3, #1
  00be0	e5823000	 str         r3, [r2]
  00be4		 |$LN14@RestoreDMA|
  00be4		 |$LN15@RestoreDMA|

; 365  :         }
; 366  : 
; 367  :     UpdateSamplesPerPage(nBufferSize, pDmaConfigInfo->elemSize);

  00be4	e59d3020	 ldr         r3, [sp, #0x20]
  00be8	e5932000	 ldr         r2, [r3]
  00bec	e59d1024	 ldr         r1, [sp, #0x24]
  00bf0	e59d301c	 ldr         r3, [sp, #0x1C]
  00bf4	e5933000	 ldr         r3, [r3]
  00bf8	e283300c	 add         r3, r3, #0xC
  00bfc	e59d001c	 ldr         r0, [sp, #0x1C]
  00c00	e5933000	 ldr         r3, [r3]
  00c04	e1a0e00f	 mov         lr, pc
  00c08	e12fff13	 bx          r3

; 368  : 
; 369  :     // Packet burst mode for I2S mode only
; 370  :     //
; 371  :     if ((m_pDevice->mcbspProfile == kMcBSPProfile_I2S_Slave) ||
; 372  :         (m_pDevice->mcbspProfile == kMcBSPProfile_I2S_Master))

  00c0c	e59d301c	 ldr         r3, [sp, #0x1C]
  00c10	e283301c	 add         r3, r3, #0x1C
  00c14	e5933000	 ldr         r3, [r3]
  00c18	e283308c	 add         r3, r3, #0x8C
  00c1c	e5933000	 ldr         r3, [r3]
  00c20	e3530000	 cmp         r3, #0
  00c24	0a000006	 beq         |$LN12@RestoreDMA|
  00c28	e59d301c	 ldr         r3, [sp, #0x1C]
  00c2c	e283301c	 add         r3, r3, #0x1C
  00c30	e5933000	 ldr         r3, [r3]
  00c34	e283308c	 add         r3, r3, #0x8C
  00c38	e5933000	 ldr         r3, [r3]
  00c3c	e3530001	 cmp         r3, #1
  00c40	1a00001b	 bne         |$LN13@RestoreDMA|
  00c44		 |$LN12@RestoreDMA|

; 373  :         {
; 374  :         // TX and RX CSDP settings for MCBSP FIFO packet burst
; 375  :         //
; 376  :         if (dmaSyncMap == m_pDevice->dmaTxSyncMap)

  00c44	e1dd22b8	 ldrh        r2, [sp, #0x28]
  00c48	e59d301c	 ldr         r3, [sp, #0x1C]
  00c4c	e283301c	 add         r3, r3, #0x1C
  00c50	e5933000	 ldr         r3, [r3]
  00c54	e28330a8	 add         r3, r3, #0xA8
  00c58	e5933000	 ldr         r3, [r3]
  00c5c	e1520003	 cmp         r2, r3
  00c60	1a000005	 bne         |$LN11@RestoreDMA|

; 377  :             {
; 378  :             // To make sure the TX CSDP configurations are not over written
; 379  :             //
; 380  :             pDmaConfigInfo->elemSize |= DMA_CSDP_DST_PACKED |
; 381  :                 DMA_CSDP_DST_BURST_64BYTES_16x32_8x64;

  00c64	e59d3020	 ldr         r3, [sp, #0x20]
  00c68	e5933000	 ldr         r3, [r3]
  00c6c	e3832a0e	 orr         r2, r3, #0xE, 20
  00c70	e59d3020	 ldr         r3, [sp, #0x20]
  00c74	e5832000	 str         r2, [r3]
  00c78	ea00000c	 b           |$LN10@RestoreDMA|
  00c7c		 |$LN11@RestoreDMA|

; 382  :             }
; 383  :         else if (dmaSyncMap == m_pDevice->dmaRxSyncMap)

  00c7c	e1dd22b8	 ldrh        r2, [sp, #0x28]
  00c80	e59d301c	 ldr         r3, [sp, #0x1C]
  00c84	e283301c	 add         r3, r3, #0x1C
  00c88	e5933000	 ldr         r3, [r3]
  00c8c	e28330ac	 add         r3, r3, #0xAC
  00c90	e5933000	 ldr         r3, [r3]
  00c94	e1520003	 cmp         r2, r3
  00c98	1a000004	 bne         |$LN9@RestoreDMA|

; 384  :             {
; 385  :             // To make sure the RX CSDP configurations are not over written
; 386  :             //
; 387  :             pDmaConfigInfo->elemSize |= DMA_CSDP_SRC_PACKED |
; 388  :                 DMA_CSDP_SRC_BURST_64BYTES_16x32_8x64;

  00c9c	e59d3020	 ldr         r3, [sp, #0x20]
  00ca0	e5933000	 ldr         r3, [r3]
  00ca4	e3832d07	 orr         r2, r3, #7, 26
  00ca8	e59d3020	 ldr         r3, [sp, #0x20]
  00cac	e5832000	 str         r2, [r3]
  00cb0		 |$LN9@RestoreDMA|
  00cb0		 |$LN10@RestoreDMA|

; 389  :             }
; 390  :         }

  00cb0	ea000021	 b           |$LN8@RestoreDMA|
  00cb4		 |$LN13@RestoreDMA|

; 391  :     else if (m_pDevice->mcbspProfile == kMcBSPProfile_TDM)

  00cb4	e59d301c	 ldr         r3, [sp, #0x1C]
  00cb8	e283301c	 add         r3, r3, #0x1C
  00cbc	e5933000	 ldr         r3, [r3]
  00cc0	e283308c	 add         r3, r3, #0x8C
  00cc4	e5933000	 ldr         r3, [r3]
  00cc8	e3530002	 cmp         r3, #2
  00ccc	1a00001a	 bne         |$LN7@RestoreDMA|

; 392  :         {
; 393  :         // TX and RX CSDP settings for MCBSP FIFO packet burst
; 394  :         //
; 395  :         if (dmaSyncMap == m_pDevice->dmaTxSyncMap)

  00cd0	e1dd22b8	 ldrh        r2, [sp, #0x28]
  00cd4	e59d301c	 ldr         r3, [sp, #0x1C]
  00cd8	e283301c	 add         r3, r3, #0x1C
  00cdc	e5933000	 ldr         r3, [r3]
  00ce0	e28330a8	 add         r3, r3, #0xA8
  00ce4	e5933000	 ldr         r3, [r3]
  00ce8	e1520003	 cmp         r2, r3
  00cec	1a000005	 bne         |$LN6@RestoreDMA|

; 396  :             {
; 397  :             // To make sure the TX CSDP configurations are not over written
; 398  :             //
; 399  :             pDmaConfigInfo->elemSize |= DMA_CSDP_DST_PACKED |
; 400  :                 DMA_CSDP_DST_BURST_64BYTES_16x32_8x64;

  00cf0	e59d3020	 ldr         r3, [sp, #0x20]
  00cf4	e5933000	 ldr         r3, [r3]
  00cf8	e3832a0e	 orr         r2, r3, #0xE, 20
  00cfc	e59d3020	 ldr         r3, [sp, #0x20]
  00d00	e5832000	 str         r2, [r3]
  00d04	ea00000c	 b           |$LN5@RestoreDMA|
  00d08		 |$LN6@RestoreDMA|

; 401  :             }
; 402  :         else if (dmaSyncMap == m_pDevice->dmaRxSyncMap)

  00d08	e1dd22b8	 ldrh        r2, [sp, #0x28]
  00d0c	e59d301c	 ldr         r3, [sp, #0x1C]
  00d10	e283301c	 add         r3, r3, #0x1C
  00d14	e5933000	 ldr         r3, [r3]
  00d18	e28330ac	 add         r3, r3, #0xAC
  00d1c	e5933000	 ldr         r3, [r3]
  00d20	e1520003	 cmp         r2, r3
  00d24	1a000004	 bne         |$LN4@RestoreDMA|

; 403  :             {
; 404  :             // To make sure the RX CSDP configurations are not over written
; 405  :             //
; 406  :             pDmaConfigInfo->elemSize |= DMA_CSDP_SRC_PACKED |
; 407  :                 DMA_CSDP_SRC_BURST_64BYTES_16x32_8x64;

  00d28	e59d3020	 ldr         r3, [sp, #0x20]
  00d2c	e5933000	 ldr         r3, [r3]
  00d30	e3832d07	 orr         r2, r3, #7, 26
  00d34	e59d3020	 ldr         r3, [sp, #0x20]
  00d38	e5832000	 str         r2, [r3]
  00d3c		 |$LN4@RestoreDMA|
  00d3c		 |$LN5@RestoreDMA|
  00d3c		 |$LN7@RestoreDMA|
  00d3c		 |$LN8@RestoreDMA|

; 408  :             }
; 409  :         }
; 410  : 
; 411  :     if (dmaSyncMap == m_pDevice->dmaTxSyncMap)

  00d3c	e1dd22b8	 ldrh        r2, [sp, #0x28]
  00d40	e59d301c	 ldr         r3, [sp, #0x1C]
  00d44	e283301c	 add         r3, r3, #0x1C
  00d48	e5933000	 ldr         r3, [r3]
  00d4c	e28330a8	 add         r3, r3, #0xA8
  00d50	e5933000	 ldr         r3, [r3]
  00d54	e1520003	 cmp         r2, r3
  00d58	1a000009	 bne         |$LN3@RestoreDMA|

; 412  :         {
; 413  :         // DMA destination frame index must be equal to the TX threshold
; 414  :         // value of the McBSP
; 415  :         pDmaConfigInfo->dstFrameIndex = m_pDevice->fifoThresholdTx + 1;

  00d5c	e59d301c	 ldr         r3, [sp, #0x1C]
  00d60	e283301c	 add         r3, r3, #0x1C
  00d64	e5933000	 ldr         r3, [r3]
  00d68	e28330f0	 add         r3, r3, #0xF0
  00d6c	e5933000	 ldr         r3, [r3]
  00d70	e2832001	 add         r2, r3, #1
  00d74	e59d3020	 ldr         r3, [sp, #0x20]
  00d78	e2833014	 add         r3, r3, #0x14
  00d7c	e5832000	 str         r2, [r3]
  00d80	ea000010	 b           |$LN2@RestoreDMA|
  00d84		 |$LN3@RestoreDMA|

; 416  :         }
; 417  :     else if (dmaSyncMap == m_pDevice->dmaRxSyncMap)

  00d84	e1dd22b8	 ldrh        r2, [sp, #0x28]
  00d88	e59d301c	 ldr         r3, [sp, #0x1C]
  00d8c	e283301c	 add         r3, r3, #0x1C
  00d90	e5933000	 ldr         r3, [r3]
  00d94	e28330ac	 add         r3, r3, #0xAC
  00d98	e5933000	 ldr         r3, [r3]
  00d9c	e1520003	 cmp         r2, r3
  00da0	1a000008	 bne         |$LN1@RestoreDMA|

; 418  :         {
; 419  :         // DMA source frame index must be equal to the RX threshold
; 420  :         // value of the McBSP
; 421  :         pDmaConfigInfo->srcFrameIndex = m_pDevice->fifoThresholdRx + 1;

  00da4	e59d301c	 ldr         r3, [sp, #0x1C]
  00da8	e283301c	 add         r3, r3, #0x1C
  00dac	e5933000	 ldr         r3, [r3]
  00db0	e2833e11	 add         r3, r3, #0x11, 28
  00db4	e5933000	 ldr         r3, [r3]
  00db8	e2832001	 add         r2, r3, #1
  00dbc	e59d3020	 ldr         r3, [sp, #0x20]
  00dc0	e2833008	 add         r3, r3, #8
  00dc4	e5832000	 str         r2, [r3]
  00dc8		 |$LN1@RestoreDMA|
  00dc8		 |$LN2@RestoreDMA|

; 422  :         }
; 423  :     // configure dma
; 424  :     //
; 425  :     DmaUpdate(pDmaConfigInfo, dmaSyncMap, &m_DmaInfo);

  00dc8	e59d301c	 ldr         r3, [sp, #0x1C]
  00dcc	e2832004	 add         r2, r3, #4
  00dd0	e1dd12b8	 ldrh        r1, [sp, #0x28]
  00dd4	e59d0020	 ldr         r0, [sp, #0x20]
  00dd8	eb000000	 bl          DmaUpdate

; 426  :     DmaSetElementAndFrameCount(&m_DmaInfo, (WORD)GetSamplesPerPage(), 2);

  00ddc	e59d001c	 ldr         r0, [sp, #0x1C]
  00de0	eb000000	 bl          |?GetSamplesPerPage@DataPort_t@@QBAHXZ|
  00de4	e58d000c	 str         r0, [sp, #0xC]
  00de8	e3a02002	 mov         r2, #2
  00dec	e59d300c	 ldr         r3, [sp, #0xC]
  00df0	e1a01803	 mov         r1, r3, lsl #16
  00df4	e1a01821	 mov         r1, r1, lsr #16
  00df8	e59d301c	 ldr         r3, [sp, #0x1C]
  00dfc	e2830004	 add         r0, r3, #4
  00e00	eb000000	 bl          DmaSetElementAndFrameCount

; 427  :     DmaSetRepeatMode(&m_DmaInfo, TRUE);

  00e04	e3a01001	 mov         r1, #1
  00e08	e59d301c	 ldr         r3, [sp, #0x1C]
  00e0c	e2830004	 add         r0, r3, #4
  00e10	eb000000	 bl          DmaSetRepeatMode

; 428  : 
; 429  :     m_PortState = kMcBSP_Port_Idle;

  00e14	e59d301c	 ldr         r3, [sp, #0x1C]
  00e18	e2832024	 add         r2, r3, #0x24
  00e1c	e3a03001	 mov         r3, #1
  00e20	e5823000	 str         r3, [r2]

; 430  :     bResult = TRUE;

  00e24	e3a03001	 mov         r3, #1
  00e28	e58d3000	 str         r3, [sp]

; 431  : 
; 432  :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S\r\n", __FUNCTION__));

  00e2c	e59f3048	 ldr         r3, [pc, #0x48]
  00e30	e5933440	 ldr         r3, [r3, #0x440]
  00e34	e3130004	 tst         r3, #4
  00e38	0a000005	 beq         |$LN26@RestoreDMA|
  00e3c	e59f1034	 ldr         r1, [pc, #0x34]
  00e40	e59f002c	 ldr         r0, [pc, #0x2C]
  00e44	eb000000	 bl          NKDbgPrintfW
  00e48	e3a03001	 mov         r3, #1
  00e4c	e58d3010	 str         r3, [sp, #0x10]
  00e50	ea000001	 b           |$LN27@RestoreDMA|
  00e54		 |$LN26@RestoreDMA|
  00e54	e3a03000	 mov         r3, #0
  00e58	e58d3010	 str         r3, [sp, #0x10]
  00e5c		 |$LN27@RestoreDMA|

; 433  : 
; 434  :     return bResult;

  00e5c	e59d3000	 ldr         r3, [sp]
  00e60	e58d3004	 str         r3, [sp, #4]

; 435  : }

  00e64	e59d0004	 ldr         r0, [sp, #4]
  00e68	e28dd014	 add         sp, sp, #0x14
  00e6c	e89d6000	 ldmia       sp, {sp, lr}
  00e70	e12fff1e	 bx          lr
  00e74		 |$LN31@RestoreDMA|
  00e74		 |$LN32@RestoreDMA|
  00e74	00000000	 DCD         |??_C@_1BE@LFFACMJN@?$AAM?$AAC?$AAP?$AA?3?$AA?9?$AA?$CF?$AAS?$AA?$AN?$AA?6?$AA?$AA@|
  00e78		 |$LN33@RestoreDMA|
  00e78	00000000	 DCD         |??_C@_0BO@GEGNALDO@DataPort_t?3?3RestoreDMAcontext?$AA@|
  00e7c		 |$LN34@RestoreDMA|
  00e7c	00000000	 DCD         |dpCurSettings|
  00e80		 |$LN35@RestoreDMA|
  00e80	00000000	 DCD         |??_C@_1BE@FKGNIJHN@?$AAM?$AAC?$AAP?$AA?3?$AA?$CL?$AA?$CF?$AAS?$AA?$AN?$AA?6?$AA?$AA@|
  00e84		 |$M37202|

			 ENDP  ; |?RestoreDMAcontext@DataPort_t@@UAAHPAUDmaConfigInfo_t@@KG@Z|, DataPort_t::RestoreDMAcontext

; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\mcbsp\dma_utility.h

  00000			 AREA	 |.pdata|, PDATA
|$T37215| DCD	|$LN8@DmaUpdate|
	DCD	0x40007004
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DmaUpdate| PROC

; 257  : {

  00000		 |$LN8@DmaUpdate|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0007	 stmdb       sp!, {r0 - r2}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd00c	 sub         sp, sp, #0xC
  00010		 |$M37212|

; 258  :     BOOL rc = FALSE;

  00010	e3a03000	 mov         r3, #0
  00014	e58d3004	 str         r3, [sp, #4]

; 259  :     OMAP_DMA_LC_REGS *pDmaLcReg;
; 260  : 
; 261  :     if (pDataInfo == NULL || pDataInfo->pDmaLcReg == NULL)

  00018	e59d301c	 ldr         r3, [sp, #0x1C]
  0001c	e3530000	 cmp         r3, #0
  00020	0a000004	 beq         |$LN2@DmaUpdate|
  00024	e59d301c	 ldr         r3, [sp, #0x1C]
  00028	e2833014	 add         r3, r3, #0x14
  0002c	e5933000	 ldr         r3, [r3]
  00030	e3530000	 cmp         r3, #0
  00034	1a000001	 bne         |$LN3@DmaUpdate|
  00038		 |$LN2@DmaUpdate|

; 262  :         {
; 263  :         goto cleanUp;

  00038	ea00005a	 b           |$LN1@DmaUpdate|
  0003c	ea000059	 b           |$cleanUp$36009|
  00040		 |$LN3@DmaUpdate|

; 264  :         }
; 265  :     pDmaLcReg = pDataInfo->pDmaLcReg;

  00040	e59d301c	 ldr         r3, [sp, #0x1C]
  00044	e2833014	 add         r3, r3, #0x14
  00048	e5933000	 ldr         r3, [r3]
  0004c	e58d3000	 str         r3, [sp]

; 266  : 
; 267  :     // Disable the DMA in case it is running
; 268  :     CLRREG32(&pDmaLcReg->CCR, DMA_CCR_ENABLE);

  00050	e59d3000	 ldr         r3, [sp]
  00054	e5932000	 ldr         r2, [r3]
  00058	e3e03080	 mvn         r3, #0x80
  0005c	e0022003	 and         r2, r2, r3
  00060	e59d3000	 ldr         r3, [sp]
  00064	e5832000	 str         r2, [r3]

; 269  : 
; 270  :     // update syncmap
; 271  :     pConfigInfo->syncMap = syncMap;

  00068	e59d3014	 ldr         r3, [sp, #0x14]
  0006c	e283202c	 add         r2, r3, #0x2C
  00070	e59d3018	 ldr         r3, [sp, #0x18]
  00074	e5823000	 str         r3, [r2]

; 272  : 
; 273  :     // Initialize logical channel registers
; 274  :     //
; 275  :     OUTREG32(&pDmaLcReg->CCR, 0);

  00078	e59d2000	 ldr         r2, [sp]
  0007c	e3a03000	 mov         r3, #0
  00080	e5823000	 str         r3, [r2]

; 276  :     OUTREG32(&pDmaLcReg->CLNK_CTRL, 0);

  00084	e59d3000	 ldr         r3, [sp]
  00088	e2832004	 add         r2, r3, #4
  0008c	e3a03000	 mov         r3, #0
  00090	e5823000	 str         r3, [r2]

; 277  :     OUTREG32(&pDmaLcReg->COLOR, 0);

  00094	e59d3000	 ldr         r3, [sp]
  00098	e2832044	 add         r2, r3, #0x44
  0009c	e3a03000	 mov         r3, #0
  000a0	e5823000	 str         r3, [r2]

; 278  : 
; 279  :     // update CSDP
; 280  :     //  DATA_TYPE
; 281  :     //  DST
; 282  :     //  SRC
; 283  :     OUTREG32(&pDmaLcReg->CSDP, pConfigInfo->elemSize);

  000a4	e59d3000	 ldr         r3, [sp]
  000a8	e2832010	 add         r2, r3, #0x10
  000ac	e59d3014	 ldr         r3, [sp, #0x14]
  000b0	e5933000	 ldr         r3, [r3]
  000b4	e5823000	 str         r3, [r2]

; 284  : 
; 285  :     // update CCR
; 286  :     //  DST_MODE
; 287  :     //  SRC_MODE
; 288  :     //  PRIO
; 289  :     //  SYNC
; 290  :     //
; 291  :     OUTREG32(&pDmaLcReg->CCR, pConfigInfo->srcAddrMode |
; 292  :         pConfigInfo->dstAddrMode | pConfigInfo->dmaPrio |
; 293  :         DMA_CCR_SYNC(syncMap) | pConfigInfo->synchTrigger |
; 294  :         pConfigInfo->synchMode
; 295  :         );

  000b8	e59d3014	 ldr         r3, [sp, #0x14]
  000bc	e283200c	 add         r2, r3, #0xC
  000c0	e59d3014	 ldr         r3, [sp, #0x14]
  000c4	e2833018	 add         r3, r3, #0x18
  000c8	e5922000	 ldr         r2, [r2]
  000cc	e5933000	 ldr         r3, [r3]
  000d0	e1822003	 orr         r2, r2, r3
  000d4	e59d3014	 ldr         r3, [sp, #0x14]
  000d8	e283301c	 add         r3, r3, #0x1C
  000dc	e5933000	 ldr         r3, [r3]
  000e0	e1821003	 orr         r1, r2, r3
  000e4	e59d3018	 ldr         r3, [sp, #0x18]
  000e8	e203201f	 and         r2, r3, #0x1F
  000ec	e59d3018	 ldr         r3, [sp, #0x18]
  000f0	e2033060	 and         r3, r3, #0x60
  000f4	e1a03703	 mov         r3, r3, lsl #14
  000f8	e1823003	 orr         r3, r2, r3
  000fc	e1812003	 orr         r2, r1, r3
  00100	e59d3014	 ldr         r3, [sp, #0x14]
  00104	e2833020	 add         r3, r3, #0x20
  00108	e5933000	 ldr         r3, [r3]
  0010c	e1822003	 orr         r2, r2, r3
  00110	e59d3014	 ldr         r3, [sp, #0x14]
  00114	e2833024	 add         r3, r3, #0x24
  00118	e5933000	 ldr         r3, [r3]
  0011c	e1822003	 orr         r2, r2, r3
  00120	e59d3000	 ldr         r3, [sp]
  00124	e5832000	 str         r2, [r3]

; 296  : 
; 297  :     // update CSEI
; 298  :     //
; 299  :     OUTREG32(&pDmaLcReg->CSEI, pConfigInfo->srcElemIndex);

  00128	e59d3014	 ldr         r3, [sp, #0x14]
  0012c	e2831004	 add         r1, r3, #4
  00130	e59d3000	 ldr         r3, [sp]
  00134	e2832024	 add         r2, r3, #0x24
  00138	e5913000	 ldr         r3, [r1]
  0013c	e5823000	 str         r3, [r2]

; 300  : 
; 301  :     // update CDEI
; 302  :     //
; 303  :     OUTREG32(&pDmaLcReg->CDEI, pConfigInfo->dstElemIndex);

  00140	e59d3014	 ldr         r3, [sp, #0x14]
  00144	e2831010	 add         r1, r3, #0x10
  00148	e59d3000	 ldr         r3, [sp]
  0014c	e283202c	 add         r2, r3, #0x2C
  00150	e5913000	 ldr         r3, [r1]
  00154	e5823000	 str         r3, [r2]

; 304  : 
; 305  :     // update CSFI
; 306  :     //
; 307  :     OUTREG32(&pDmaLcReg->CSFI, pConfigInfo->srcFrameIndex);

  00158	e59d3014	 ldr         r3, [sp, #0x14]
  0015c	e2831008	 add         r1, r3, #8
  00160	e59d3000	 ldr         r3, [sp]
  00164	e2832028	 add         r2, r3, #0x28
  00168	e5913000	 ldr         r3, [r1]
  0016c	e5823000	 str         r3, [r2]

; 308  : 
; 309  :     // update CDFI
; 310  :     //
; 311  :     OUTREG32(&pDmaLcReg->CDFI, pConfigInfo->dstFrameIndex);

  00170	e59d3014	 ldr         r3, [sp, #0x14]
  00174	e2831014	 add         r1, r3, #0x14
  00178	e59d3000	 ldr         r3, [sp]
  0017c	e2832030	 add         r2, r3, #0x30
  00180	e5913000	 ldr         r3, [r1]
  00184	e5823000	 str         r3, [r2]

; 312  : 
; 313  :     // update CICR
; 314  :     //
; 315  :     OUTREG32(&pDmaLcReg->CICR , pConfigInfo->interrupts);

  00188	e59d3014	 ldr         r3, [sp, #0x14]
  0018c	e2831028	 add         r1, r3, #0x28
  00190	e59d3000	 ldr         r3, [sp]
  00194	e2832008	 add         r2, r3, #8
  00198	e5913000	 ldr         r3, [r1]
  0019c	e5823000	 str         r3, [r2]

; 316  : 
; 317  :     rc = TRUE;

  001a0	e3a03001	 mov         r3, #1
  001a4	e58d3004	 str         r3, [sp, #4]
  001a8		 |$LN1@DmaUpdate|
  001a8		 |$cleanUp$36009|

; 318  : 
; 319  : cleanUp:
; 320  :     return rc;

  001a8	e59d3004	 ldr         r3, [sp, #4]
  001ac	e58d3008	 str         r3, [sp, #8]

; 321  : }

  001b0	e59d0008	 ldr         r0, [sp, #8]
  001b4	e28dd00c	 add         sp, sp, #0xC
  001b8	e89d6000	 ldmia       sp, {sp, lr}
  001bc	e12fff1e	 bx          lr
  001c0		 |$M37213|

			 ENDP  ; |DmaUpdate|

	EXPORT	|DmaStart|
	EXPORT	|DmaSetDstBuffer|
	EXPORT	|DmaSetSrcBuffer|
	EXPORT	|??_C@_1DI@DPMMOMBO@?$AAM?$AAC?$AAP?$AA?3?$AA?9?$AA?$CF?$AAS?$AA?$CI?$AAb?$AAT?$AAr?$AAa?$AAn?$AAs?$AAm?$AAi?$AAt?$AAM?$AAo?$AAd?$AAe?$AA?$DN?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0BF@LLJLPAED@DataPort_t?3?3StartDma?$AA@| [ DATA ] ; `string'

  00028			 AREA	 |.pdata|, PDATA
|$T37227| DCD	|$LN11@StartDma|
	DCD	0x40004804
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\mcbsp\dataport.cpp

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DI@DPMMOMBO@?$AAM?$AAC?$AAP?$AA?3?$AA?9?$AA?$CF?$AAS?$AA?$CI?$AAb?$AAT?$AAr?$AAa?$AAn?$AAs?$AAm?$AAi?$AAt?$AAM?$AAo?$AAd?$AAe?$AA?$DN?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "M"
	DCB	0x0, "C", 0x0, "P", 0x0, ":", 0x0, "-", 0x0, "%", 0x0, "S"
	DCB	0x0, "(", 0x0, "b", 0x0, "T", 0x0, "r", 0x0, "a", 0x0, "n"
	DCB	0x0, "s", 0x0, "m", 0x0, "i", 0x0, "t", 0x0, "M", 0x0, "o"
	DCB	0x0, "d", 0x0, "e", 0x0, "=", 0x0, "%", 0x0, "d", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BF@LLJLPAED@DataPort_t?3?3StartDma?$AA@| DCB "DataPort_t::StartDm"
	DCB	"a", 0x0				; `string'
; Function compile flags: /Odtp

  00e84			 AREA	 |.text|, CODE, ARM

  00e84		 |?StartDma@DataPort_t@@UAAHH@Z| PROC	; DataPort_t::StartDma

; 447  : {

  00e84		 |$LN11@StartDma|
  00e84	e1a0c00d	 mov         r12, sp
  00e88	e92d0003	 stmdb       sp!, {r0, r1}
  00e8c	e92d5000	 stmdb       sp!, {r12, lr}
  00e90	e24dd00c	 sub         sp, sp, #0xC
  00e94		 |$M37224|

; 448  :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S(bTransmitMode=%d)\r\n", __FUNCTION__,
; 449  :         bTransmitMode)
; 450  :         );

  00e94	e59f3100	 ldr         r3, [pc, #0x100]
  00e98	e5933440	 ldr         r3, [r3, #0x440]
  00e9c	e3130004	 tst         r3, #4
  00ea0	0a000006	 beq         |$LN5@StartDma|
  00ea4	e59d2018	 ldr         r2, [sp, #0x18]
  00ea8	e59f10e8	 ldr         r1, [pc, #0xE8]
  00eac	e59f00ec	 ldr         r0, [pc, #0xEC]
  00eb0	eb000000	 bl          NKDbgPrintfW
  00eb4	e3a03001	 mov         r3, #1
  00eb8	e58d3004	 str         r3, [sp, #4]
  00ebc	ea000001	 b           |$LN6@StartDma|
  00ec0		 |$LN5@StartDma|
  00ec0	e3a03000	 mov         r3, #0
  00ec4	e58d3004	 str         r3, [sp, #4]
  00ec8		 |$LN6@StartDma|

; 451  : 
; 452  :     m_PortState = kMcBSP_Port_Active;

  00ec8	e59d3014	 ldr         r3, [sp, #0x14]
  00ecc	e2832024	 add         r2, r3, #0x24
  00ed0	e3a03002	 mov         r3, #2
  00ed4	e5823000	 str         r3, [r2]

; 453  :     DmaSetRepeatMode(&m_DmaInfo, TRUE);

  00ed8	e3a01001	 mov         r1, #1
  00edc	e59d3014	 ldr         r3, [sp, #0x14]
  00ee0	e2830004	 add         r0, r3, #4
  00ee4	eb000000	 bl          DmaSetRepeatMode

; 454  : 
; 455  :     if (bTransmitMode)

  00ee8	e59d3018	 ldr         r3, [sp, #0x18]
  00eec	e3530000	 cmp         r3, #0
  00ef0	0a000009	 beq         |$LN2@StartDma|

; 456  :         {
; 457  :         // the buffer is the source
; 458  :         //
; 459  :         DmaSetSrcBuffer(&m_DmaInfo, m_pDmaBufferStart, m_DmaPhysAddr);

  00ef4	e59d3014	 ldr         r3, [sp, #0x14]
  00ef8	e283303c	 add         r3, r3, #0x3C
  00efc	e5932000	 ldr         r2, [r3]
  00f00	e59d3014	 ldr         r3, [sp, #0x14]
  00f04	e2833044	 add         r3, r3, #0x44
  00f08	e5931000	 ldr         r1, [r3]
  00f0c	e59d3014	 ldr         r3, [sp, #0x14]
  00f10	e2830004	 add         r0, r3, #4
  00f14	eb000000	 bl          DmaSetSrcBuffer

; 460  :         }
; 461  :     else

  00f18	ea000008	 b           |$LN1@StartDma|
  00f1c		 |$LN2@StartDma|

; 462  :         {
; 463  :         DmaSetDstBuffer(&m_DmaInfo, m_pDmaBufferStart, m_DmaPhysAddr);

  00f1c	e59d3014	 ldr         r3, [sp, #0x14]
  00f20	e283303c	 add         r3, r3, #0x3C
  00f24	e5932000	 ldr         r2, [r3]
  00f28	e59d3014	 ldr         r3, [sp, #0x14]
  00f2c	e2833044	 add         r3, r3, #0x44
  00f30	e5931000	 ldr         r1, [r3]
  00f34	e59d3014	 ldr         r3, [sp, #0x14]
  00f38	e2830004	 add         r0, r3, #4
  00f3c	eb000000	 bl          DmaSetDstBuffer
  00f40		 |$LN1@StartDma|

; 464  :         }
; 465  : 
; 466  :     DmaStart(&m_DmaInfo);

  00f40	e59d3014	 ldr         r3, [sp, #0x14]
  00f44	e2830004	 add         r0, r3, #4
  00f48	eb000000	 bl          DmaStart

; 467  : 
; 468  :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S\r\n", __FUNCTION__));

  00f4c	e59f3048	 ldr         r3, [pc, #0x48]
  00f50	e5933440	 ldr         r3, [r3, #0x440]
  00f54	e3130004	 tst         r3, #4
  00f58	0a000005	 beq         |$LN7@StartDma|
  00f5c	e59f1034	 ldr         r1, [pc, #0x34]
  00f60	e59f002c	 ldr         r0, [pc, #0x2C]
  00f64	eb000000	 bl          NKDbgPrintfW
  00f68	e3a03001	 mov         r3, #1
  00f6c	e58d3008	 str         r3, [sp, #8]
  00f70	ea000001	 b           |$LN8@StartDma|
  00f74		 |$LN7@StartDma|
  00f74	e3a03000	 mov         r3, #0
  00f78	e58d3008	 str         r3, [sp, #8]
  00f7c		 |$LN8@StartDma|

; 469  : 
; 470  :     return TRUE;

  00f7c	e3a03001	 mov         r3, #1
  00f80	e58d3000	 str         r3, [sp]

; 471  : }

  00f84	e59d0000	 ldr         r0, [sp]
  00f88	e28dd00c	 add         sp, sp, #0xC
  00f8c	e89d6000	 ldmia       sp, {sp, lr}
  00f90	e12fff1e	 bx          lr
  00f94		 |$LN12@StartDma|
  00f94		 |$LN13@StartDma|
  00f94	00000000	 DCD         |??_C@_1BE@LFFACMJN@?$AAM?$AAC?$AAP?$AA?3?$AA?9?$AA?$CF?$AAS?$AA?$AN?$AA?6?$AA?$AA@|
  00f98		 |$LN14@StartDma|
  00f98	00000000	 DCD         |??_C@_0BF@LLJLPAED@DataPort_t?3?3StartDma?$AA@|
  00f9c		 |$LN15@StartDma|
  00f9c	00000000	 DCD         |dpCurSettings|
  00fa0		 |$LN16@StartDma|
  00fa0	00000000	 DCD         |??_C@_1DI@DPMMOMBO@?$AAM?$AAC?$AAP?$AA?3?$AA?9?$AA?$CF?$AAS?$AA?$CI?$AAb?$AAT?$AAr?$AAa?$AAn?$AAs?$AAm?$AAi?$AAt?$AAM?$AAo?$AAd?$AAe?$AA?$DN?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00fa4		 |$M37225|

			 ENDP  ; |?StartDma@DataPort_t@@UAAHH@Z|, DataPort_t::StartDma

; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\mcbsp\dma_utility.h

  00000			 AREA	 |.pdata|, PDATA
|$T37237| DCD	|$LN6@DmaSetDstB|
	DCD	0x40001e03
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DmaSetDstBuffer| PROC

; 336  : {

  00000		 |$LN6@DmaSetDstB|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0007	 stmdb       sp!, {r0 - r2}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M37234|

; 337  :     // save values
; 338  :     //
; 339  :     pDataInfo->pDstBuffer = pBuffer;

  0000c	e59d3008	 ldr         r3, [sp, #8]
  00010	e2832004	 add         r2, r3, #4
  00014	e59d300c	 ldr         r3, [sp, #0xC]
  00018	e5823000	 str         r3, [r2]

; 340  :     pDataInfo->PhysAddrDstBuffer = PhysAddr;

  0001c	e59d3008	 ldr         r3, [sp, #8]
  00020	e283200c	 add         r2, r3, #0xC
  00024	e59d3010	 ldr         r3, [sp, #0x10]
  00028	e5823000	 str         r3, [r2]

; 341  : 
; 342  :     // set destination address
; 343  :     //
; 344  :     if (pDataInfo->pDmaLcReg != NULL)

  0002c	e59d3008	 ldr         r3, [sp, #8]
  00030	e2833014	 add         r3, r3, #0x14
  00034	e5933000	 ldr         r3, [r3]
  00038	e3530000	 cmp         r3, #0
  0003c	0a00000b	 beq         |$LN1@DmaSetDstB|

; 345  :         {
; 346  :         OUTREG32(&pDataInfo->pDmaLcReg->CDSA, PhysAddr);

  00040	e59d3008	 ldr         r3, [sp, #8]
  00044	e2833014	 add         r3, r3, #0x14
  00048	e5933000	 ldr         r3, [r3]
  0004c	e2832020	 add         r2, r3, #0x20
  00050	e59d3010	 ldr         r3, [sp, #0x10]
  00054	e5823000	 str         r3, [r2]

; 347  :         OUTREG32(&pDataInfo->pDmaLcReg->CDAC, PhysAddr);

  00058	e59d3008	 ldr         r3, [sp, #8]
  0005c	e2833014	 add         r3, r3, #0x14
  00060	e5933000	 ldr         r3, [r3]
  00064	e2832038	 add         r2, r3, #0x38
  00068	e59d3010	 ldr         r3, [sp, #0x10]
  0006c	e5823000	 str         r3, [r2]
  00070		 |$LN1@DmaSetDstB|

; 348  :         }
; 349  : }

  00070	e89d6000	 ldmia       sp, {sp, lr}
  00074	e12fff1e	 bx          lr
  00078		 |$M37235|

			 ENDP  ; |DmaSetDstBuffer|


  00000			 AREA	 |.pdata|, PDATA
|$T37244| DCD	|$LN6@DmaSetSrcB|
	DCD	0x40001d03
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DmaSetSrcBuffer| PROC

; 364  : {

  00000		 |$LN6@DmaSetSrcB|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0007	 stmdb       sp!, {r0 - r2}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M37241|

; 365  :     // save values
; 366  :     //
; 367  :     pDataInfo->pSrcBuffer = pBuffer;

  0000c	e59d200c	 ldr         r2, [sp, #0xC]
  00010	e59d3008	 ldr         r3, [sp, #8]
  00014	e5832000	 str         r2, [r3]

; 368  :     pDataInfo->PhysAddrSrcBuffer = PhysAddr;

  00018	e59d3008	 ldr         r3, [sp, #8]
  0001c	e2832008	 add         r2, r3, #8
  00020	e59d3010	 ldr         r3, [sp, #0x10]
  00024	e5823000	 str         r3, [r2]

; 369  : 
; 370  :     // set source address
; 371  :     //
; 372  :     if (pDataInfo->pDmaLcReg != NULL)

  00028	e59d3008	 ldr         r3, [sp, #8]
  0002c	e2833014	 add         r3, r3, #0x14
  00030	e5933000	 ldr         r3, [r3]
  00034	e3530000	 cmp         r3, #0
  00038	0a00000b	 beq         |$LN1@DmaSetSrcB|

; 373  :         {
; 374  :         OUTREG32(&pDataInfo->pDmaLcReg->CSSA, PhysAddr);

  0003c	e59d3008	 ldr         r3, [sp, #8]
  00040	e2833014	 add         r3, r3, #0x14
  00044	e5933000	 ldr         r3, [r3]
  00048	e283201c	 add         r2, r3, #0x1C
  0004c	e59d3010	 ldr         r3, [sp, #0x10]
  00050	e5823000	 str         r3, [r2]

; 375  :         OUTREG32(&pDataInfo->pDmaLcReg->CSAC, PhysAddr);

  00054	e59d3008	 ldr         r3, [sp, #8]
  00058	e2833014	 add         r3, r3, #0x14
  0005c	e5933000	 ldr         r3, [r3]
  00060	e2832034	 add         r2, r3, #0x34
  00064	e59d3010	 ldr         r3, [sp, #0x10]
  00068	e5823000	 str         r3, [r2]
  0006c		 |$LN1@DmaSetSrcB|

; 376  :         }
; 377  : }

  0006c	e89d6000	 ldmia       sp, {sp, lr}
  00070	e12fff1e	 bx          lr
  00074		 |$M37242|

			 ENDP  ; |DmaSetSrcBuffer|


  00000			 AREA	 |.pdata|, PDATA
|$T37251| DCD	|$LN5@DmaStart|
	DCD	0x40000e03
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DmaStart| PROC

; 498  : {

  00000		 |$LN5@DmaStart|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M37248|

; 499  :     // setup frame and element count for destination side
; 500  :     //
; 501  :     SETREG32(&pDataInfo->pDmaLcReg->CCR , DMA_CCR_ENABLE);

  0000c	e59d3008	 ldr         r3, [sp, #8]
  00010	e2833014	 add         r3, r3, #0x14
  00014	e5933000	 ldr         r3, [r3]
  00018	e5933000	 ldr         r3, [r3]
  0001c	e3832080	 orr         r2, r3, #0x80
  00020	e59d3008	 ldr         r3, [sp, #8]
  00024	e2833014	 add         r3, r3, #0x14
  00028	e5933000	 ldr         r3, [r3]
  0002c	e5832000	 str         r2, [r3]

; 502  : }

  00030	e89d6000	 ldmia       sp, {sp, lr}
  00034	e12fff1e	 bx          lr
  00038		 |$M37249|

			 ENDP  ; |DmaStart|

	EXPORT	|DmaStop|
	EXPORT	|??_C@_0BE@IBMKOJKJ@DataPort_t?3?3StopDma?$AA@| [ DATA ] ; `string'

  00030			 AREA	 |.pdata|, PDATA
|$T37263| DCD	|$LN9@StopDma|
	DCD	0x40003104
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\mcbsp\dataport.cpp

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BE@IBMKOJKJ@DataPort_t?3?3StopDma?$AA@| DCB "DataPort_t::StopDma", 0x0 ; `string'
; Function compile flags: /Odtp

  00fa4			 AREA	 |.text|, CODE, ARM

  00fa4		 |?StopDma@DataPort_t@@UAAHXZ| PROC	; DataPort_t::StopDma

; 481  : {

  00fa4		 |$LN9@StopDma|
  00fa4	e1a0c00d	 mov         r12, sp
  00fa8	e92d0001	 stmdb       sp!, {r0}
  00fac	e92d5000	 stmdb       sp!, {r12, lr}
  00fb0	e24dd00c	 sub         sp, sp, #0xC
  00fb4		 |$M37260|

; 482  :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S\r\n", __FUNCTION__));

  00fb4	e59f30a4	 ldr         r3, [pc, #0xA4]
  00fb8	e5933440	 ldr         r3, [r3, #0x440]
  00fbc	e3130004	 tst         r3, #4
  00fc0	0a000005	 beq         |$LN3@StopDma|
  00fc4	e59f1090	 ldr         r1, [pc, #0x90]
  00fc8	e59f0094	 ldr         r0, [pc, #0x94]
  00fcc	eb000000	 bl          NKDbgPrintfW
  00fd0	e3a03001	 mov         r3, #1
  00fd4	e58d3004	 str         r3, [sp, #4]
  00fd8	ea000001	 b           |$LN4@StopDma|
  00fdc		 |$LN3@StopDma|
  00fdc	e3a03000	 mov         r3, #0
  00fe0	e58d3004	 str         r3, [sp, #4]
  00fe4		 |$LN4@StopDma|

; 483  : 
; 484  :     m_DmaLoopCounter = 0;

  00fe4	e59d3014	 ldr         r3, [sp, #0x14]
  00fe8	e2832020	 add         r2, r3, #0x20
  00fec	e3a03000	 mov         r3, #0
  00ff0	e5823000	 str         r3, [r2]

; 485  :     m_PortState = kMcBSP_Port_Idle;

  00ff4	e59d3014	 ldr         r3, [sp, #0x14]
  00ff8	e2832024	 add         r2, r3, #0x24
  00ffc	e3a03001	 mov         r3, #1
  01000	e5823000	 str         r3, [r2]

; 486  :     DmaStop(&m_DmaInfo);

  01004	e59d3014	 ldr         r3, [sp, #0x14]
  01008	e2830004	 add         r0, r3, #4
  0100c	eb000000	 bl          DmaStop

; 487  : 
; 488  :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S\r\n", __FUNCTION__));

  01010	e59f3048	 ldr         r3, [pc, #0x48]
  01014	e5933440	 ldr         r3, [r3, #0x440]
  01018	e3130004	 tst         r3, #4
  0101c	0a000005	 beq         |$LN5@StopDma|
  01020	e59f1034	 ldr         r1, [pc, #0x34]
  01024	e59f002c	 ldr         r0, [pc, #0x2C]
  01028	eb000000	 bl          NKDbgPrintfW
  0102c	e3a03001	 mov         r3, #1
  01030	e58d3008	 str         r3, [sp, #8]
  01034	ea000001	 b           |$LN6@StopDma|
  01038		 |$LN5@StopDma|
  01038	e3a03000	 mov         r3, #0
  0103c	e58d3008	 str         r3, [sp, #8]
  01040		 |$LN6@StopDma|

; 489  : 
; 490  :     return TRUE;

  01040	e3a03001	 mov         r3, #1
  01044	e58d3000	 str         r3, [sp]

; 491  : }

  01048	e59d0000	 ldr         r0, [sp]
  0104c	e28dd00c	 add         sp, sp, #0xC
  01050	e89d6000	 ldmia       sp, {sp, lr}
  01054	e12fff1e	 bx          lr
  01058		 |$LN10@StopDma|
  01058		 |$LN11@StopDma|
  01058	00000000	 DCD         |??_C@_1BE@LFFACMJN@?$AAM?$AAC?$AAP?$AA?3?$AA?9?$AA?$CF?$AAS?$AA?$AN?$AA?6?$AA?$AA@|
  0105c		 |$LN12@StopDma|
  0105c	00000000	 DCD         |??_C@_0BE@IBMKOJKJ@DataPort_t?3?3StopDma?$AA@|
  01060		 |$LN13@StopDma|
  01060	00000000	 DCD         |dpCurSettings|
  01064		 |$LN14@StopDma|
  01064	00000000	 DCD         |??_C@_1BE@FKGNIJHN@?$AAM?$AAC?$AAP?$AA?3?$AA?$CL?$AA?$CF?$AAS?$AA?$AN?$AA?6?$AA?$AA@|
  01068		 |$M37261|

			 ENDP  ; |?StopDma@DataPort_t@@UAAHXZ|, DataPort_t::StopDma

	IMPORT	|DmaDisableStandby|
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\mcbsp\dma_utility.h

  00000			 AREA	 |.pdata|, PDATA
|$T37274| DCD	|$LN11@DmaStop|
	DCD	0x40003004
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DmaStop| PROC

; 452  : {

  00000		 |$LN11@DmaStop|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd008	 sub         sp, sp, #8
  00010		 |$M37271|

; 453  :     volatile ULONG ulCCR;
; 454  :     BOOL breakLoop = FALSE;

  00010	e3a03000	 mov         r3, #0
  00014	e58d3000	 str         r3, [sp]

; 455  : 
; 456  :     // disable standby in dma controller
; 457  :     //
; 458  :     DmaDisableStandby(pDataInfo->hDmaChannel, TRUE);

  00018	e3a01001	 mov         r1, #1
  0001c	e59d3010	 ldr         r3, [sp, #0x10]
  00020	e2833010	 add         r3, r3, #0x10
  00024	e5930000	 ldr         r0, [r3]
  00028	eb000000	 bl          DmaDisableStandby

; 459  : 
; 460  :     // setup frame and element count for destination side
; 461  :     //
; 462  :     CLRREG32(&pDataInfo->pDmaLcReg->CCR , DMA_CCR_ENABLE);

  0002c	e59d3010	 ldr         r3, [sp, #0x10]
  00030	e2833014	 add         r3, r3, #0x14
  00034	e5933000	 ldr         r3, [r3]
  00038	e5932000	 ldr         r2, [r3]
  0003c	e3e03080	 mvn         r3, #0x80
  00040	e0022003	 and         r2, r2, r3
  00044	e59d3010	 ldr         r3, [sp, #0x10]
  00048	e2833014	 add         r3, r3, #0x14
  0004c	e5933000	 ldr         r3, [r3]
  00050	e5832000	 str         r2, [r3]
  00054		 |$LN8@DmaStop|
  00054		 |$LN5@DmaStop|

; 463  : 
; 464  :     // ensure DMA transfer is completed by polling the active bits
; 465  :     //
; 466  :     while (breakLoop == FALSE)

  00054	e59d3000	 ldr         r3, [sp]
  00058	e3530000	 cmp         r3, #0
  0005c	1a00000f	 bne         |$LN4@DmaStop|

; 467  :         {
; 468  :         ulCCR = INREG32(&pDataInfo->pDmaLcReg->CCR);

  00060	e59d3010	 ldr         r3, [sp, #0x10]
  00064	e2833014	 add         r3, r3, #0x14
  00068	e5933000	 ldr         r3, [r3]
  0006c	e5933000	 ldr         r3, [r3]
  00070	e58d3004	 str         r3, [sp, #4]

; 469  :         if ((ulCCR & DMA_CCR_WR_ACTIVE) || (ulCCR & DMA_CCR_RD_ACTIVE))

  00074	e59d3004	 ldr         r3, [sp, #4]
  00078	e3130b01	 tst         r3, #1, 22
  0007c	1a000002	 bne         |$LN2@DmaStop|
  00080	e59d3004	 ldr         r3, [sp, #4]
  00084	e3130c02	 tst         r3, #2, 24
  00088	0a000001	 beq         |$LN3@DmaStop|
  0008c		 |$LN2@DmaStop|

; 470  :             {
; 471  :             // fix this infinite loop
; 472  :             //
; 473  :             continue;

  0008c	eafffff0	 b           |$LN5@DmaStop|

; 474  :             }
; 475  :         else

  00090	ea000001	 b           |$LN1@DmaStop|
  00094		 |$LN3@DmaStop|

; 476  :             {
; 477  :             breakLoop = TRUE;

  00094	e3a03001	 mov         r3, #1
  00098	e58d3000	 str         r3, [sp]
  0009c		 |$LN1@DmaStop|

; 478  :             }
; 479  :         }

  0009c	eaffffec	 b           |$LN8@DmaStop|
  000a0		 |$LN4@DmaStop|

; 480  : 
; 481  :     // re-enable standby in dma controller
; 482  :     //
; 483  :     DmaDisableStandby(pDataInfo->hDmaChannel, FALSE);

  000a0	e3a01000	 mov         r1, #0
  000a4	e59d3010	 ldr         r3, [sp, #0x10]
  000a8	e2833010	 add         r3, r3, #0x10
  000ac	e5930000	 ldr         r0, [r3]
  000b0	eb000000	 bl          DmaDisableStandby

; 484  : 
; 485  : }

  000b4	e28dd008	 add         sp, sp, #8
  000b8	e89d6000	 ldmia       sp, {sp, lr}
  000bc	e12fff1e	 bx          lr
  000c0		 |$M37272|

			 ENDP  ; |DmaStop|

	EXPORT	|??_C@_1DG@DINIPIEG@?$AAM?$AAC?$AAP?$AA?3?$AA?$CL?$AA?$CF?$AAS?$AA?$CI?$AAP?$AAh?$AAy?$AAs?$AAA?$AAd?$AAd?$AAr?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0BL@DNIMCMFL@DataPort_t?3?3SetDstPhysAddr?$AA@| [ DATA ] ; `string'
	EXPORT	|?SetDstPhysAddr@DataPort_t@@QAAXK@Z|	; DataPort_t::SetDstPhysAddr

  00038			 AREA	 |.pdata|, PDATA
|$T37285| DCD	|$LN9@SetDstPhys|
	DCD	0x40002904
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\mcbsp\dataport.cpp

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DG@DINIPIEG@?$AAM?$AAC?$AAP?$AA?3?$AA?$CL?$AA?$CF?$AAS?$AA?$CI?$AAP?$AAh?$AAy?$AAs?$AAA?$AAd?$AAd?$AAr?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "M"
	DCB	0x0, "C", 0x0, "P", 0x0, ":", 0x0, "+", 0x0, "%", 0x0, "S"
	DCB	0x0, "(", 0x0, "P", 0x0, "h", 0x0, "y", 0x0, "s", 0x0, "A"
	DCB	0x0, "d", 0x0, "d", 0x0, "r", 0x0, "=", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BL@DNIMCMFL@DataPort_t?3?3SetDstPhysAddr?$AA@| DCB "DataPort_t::S"
	DCB	"etDstPhysAddr", 0x0			; `string'
; Function compile flags: /Odtp

  01068			 AREA	 |.text|, CODE, ARM

  01068		 |?SetDstPhysAddr@DataPort_t@@QAAXK@Z| PROC ; DataPort_t::SetDstPhysAddr

; 503  : {

  01068		 |$LN9@SetDstPhys|
  01068	e1a0c00d	 mov         r12, sp
  0106c	e92d0003	 stmdb       sp!, {r0, r1}
  01070	e92d5000	 stmdb       sp!, {r12, lr}
  01074	e24dd008	 sub         sp, sp, #8
  01078		 |$M37282|

; 504  :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S(PhysAddr=0x%08X)\r\n", __FUNCTION__,
; 505  :         PhysAddr)
; 506  :         );

  01078	e59f3084	 ldr         r3, [pc, #0x84]
  0107c	e5933440	 ldr         r3, [r3, #0x440]
  01080	e3130004	 tst         r3, #4
  01084	0a000006	 beq         |$LN3@SetDstPhys|
  01088	e59d2014	 ldr         r2, [sp, #0x14]
  0108c	e59f106c	 ldr         r1, [pc, #0x6C]
  01090	e59f0070	 ldr         r0, [pc, #0x70]
  01094	eb000000	 bl          NKDbgPrintfW
  01098	e3a03001	 mov         r3, #1
  0109c	e58d3000	 str         r3, [sp]
  010a0	ea000001	 b           |$LN4@SetDstPhys|
  010a4		 |$LN3@SetDstPhys|
  010a4	e3a03000	 mov         r3, #0
  010a8	e58d3000	 str         r3, [sp]
  010ac		 |$LN4@SetDstPhys|

; 507  : 
; 508  :     DmaSetDstBuffer(&m_DmaInfo, NULL, PhysAddr);

  010ac	e59d2014	 ldr         r2, [sp, #0x14]
  010b0	e3a01000	 mov         r1, #0
  010b4	e59d3010	 ldr         r3, [sp, #0x10]
  010b8	e2830004	 add         r0, r3, #4
  010bc	eb000000	 bl          DmaSetDstBuffer

; 509  : 
; 510  :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S\r\n", __FUNCTION__));

  010c0	e59f303c	 ldr         r3, [pc, #0x3C]
  010c4	e5933440	 ldr         r3, [r3, #0x440]
  010c8	e3130004	 tst         r3, #4
  010cc	0a000005	 beq         |$LN5@SetDstPhys|
  010d0	e59f1028	 ldr         r1, [pc, #0x28]
  010d4	e59f0020	 ldr         r0, [pc, #0x20]
  010d8	eb000000	 bl          NKDbgPrintfW
  010dc	e3a03001	 mov         r3, #1
  010e0	e58d3004	 str         r3, [sp, #4]
  010e4	ea000001	 b           |$LN6@SetDstPhys|
  010e8		 |$LN5@SetDstPhys|
  010e8	e3a03000	 mov         r3, #0
  010ec	e58d3004	 str         r3, [sp, #4]
  010f0		 |$LN6@SetDstPhys|

; 511  : }

  010f0	e28dd008	 add         sp, sp, #8
  010f4	e89d6000	 ldmia       sp, {sp, lr}
  010f8	e12fff1e	 bx          lr
  010fc		 |$LN10@SetDstPhys|
  010fc		 |$LN11@SetDstPhys|
  010fc	00000000	 DCD         |??_C@_1BE@LFFACMJN@?$AAM?$AAC?$AAP?$AA?3?$AA?9?$AA?$CF?$AAS?$AA?$AN?$AA?6?$AA?$AA@|
  01100		 |$LN12@SetDstPhys|
  01100	00000000	 DCD         |??_C@_0BL@DNIMCMFL@DataPort_t?3?3SetDstPhysAddr?$AA@|
  01104		 |$LN13@SetDstPhys|
  01104	00000000	 DCD         |dpCurSettings|
  01108		 |$LN14@SetDstPhys|
  01108	00000000	 DCD         |??_C@_1DG@DINIPIEG@?$AAM?$AAC?$AAP?$AA?3?$AA?$CL?$AA?$CF?$AAS?$AA?$CI?$AAP?$AAh?$AAy?$AAs?$AAA?$AAd?$AAd?$AAr?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  0110c		 |$M37283|

			 ENDP  ; |?SetDstPhysAddr@DataPort_t@@QAAXK@Z|, DataPort_t::SetDstPhysAddr

	EXPORT	|??_C@_0BL@EBPAGNHJ@DataPort_t?3?3SetSrcPhysAddr?$AA@| [ DATA ] ; `string'
	EXPORT	|?SetSrcPhysAddr@DataPort_t@@QAAXK@Z|	; DataPort_t::SetSrcPhysAddr

  00040			 AREA	 |.pdata|, PDATA
|$T37299| DCD	|$LN9@SetSrcPhys|
	DCD	0x40002904

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BL@EBPAGNHJ@DataPort_t?3?3SetSrcPhysAddr?$AA@| DCB "DataPort_t::S"
	DCB	"etSrcPhysAddr", 0x0			; `string'
; Function compile flags: /Odtp

  0110c			 AREA	 |.text|, CODE, ARM

  0110c		 |?SetSrcPhysAddr@DataPort_t@@QAAXK@Z| PROC ; DataPort_t::SetSrcPhysAddr

; 523  : {

  0110c		 |$LN9@SetSrcPhys|
  0110c	e1a0c00d	 mov         r12, sp
  01110	e92d0003	 stmdb       sp!, {r0, r1}
  01114	e92d5000	 stmdb       sp!, {r12, lr}
  01118	e24dd008	 sub         sp, sp, #8
  0111c		 |$M37296|

; 524  :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S(PhysAddr=0x%08X)\r\n", __FUNCTION__,
; 525  :         PhysAddr)
; 526  :         );

  0111c	e59f3084	 ldr         r3, [pc, #0x84]
  01120	e5933440	 ldr         r3, [r3, #0x440]
  01124	e3130004	 tst         r3, #4
  01128	0a000006	 beq         |$LN3@SetSrcPhys|
  0112c	e59d2014	 ldr         r2, [sp, #0x14]
  01130	e59f106c	 ldr         r1, [pc, #0x6C]
  01134	e59f0070	 ldr         r0, [pc, #0x70]
  01138	eb000000	 bl          NKDbgPrintfW
  0113c	e3a03001	 mov         r3, #1
  01140	e58d3000	 str         r3, [sp]
  01144	ea000001	 b           |$LN4@SetSrcPhys|
  01148		 |$LN3@SetSrcPhys|
  01148	e3a03000	 mov         r3, #0
  0114c	e58d3000	 str         r3, [sp]
  01150		 |$LN4@SetSrcPhys|

; 527  : 
; 528  :     DmaSetSrcBuffer(&m_DmaInfo, NULL, PhysAddr);

  01150	e59d2014	 ldr         r2, [sp, #0x14]
  01154	e3a01000	 mov         r1, #0
  01158	e59d3010	 ldr         r3, [sp, #0x10]
  0115c	e2830004	 add         r0, r3, #4
  01160	eb000000	 bl          DmaSetSrcBuffer

; 529  : 
; 530  :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S\r\n", __FUNCTION__));

  01164	e59f303c	 ldr         r3, [pc, #0x3C]
  01168	e5933440	 ldr         r3, [r3, #0x440]
  0116c	e3130004	 tst         r3, #4
  01170	0a000005	 beq         |$LN5@SetSrcPhys|
  01174	e59f1028	 ldr         r1, [pc, #0x28]
  01178	e59f0020	 ldr         r0, [pc, #0x20]
  0117c	eb000000	 bl          NKDbgPrintfW
  01180	e3a03001	 mov         r3, #1
  01184	e58d3004	 str         r3, [sp, #4]
  01188	ea000001	 b           |$LN6@SetSrcPhys|
  0118c		 |$LN5@SetSrcPhys|
  0118c	e3a03000	 mov         r3, #0
  01190	e58d3004	 str         r3, [sp, #4]
  01194		 |$LN6@SetSrcPhys|

; 531  : }

  01194	e28dd008	 add         sp, sp, #8
  01198	e89d6000	 ldmia       sp, {sp, lr}
  0119c	e12fff1e	 bx          lr
  011a0		 |$LN10@SetSrcPhys|
  011a0		 |$LN11@SetSrcPhys|
  011a0	00000000	 DCD         |??_C@_1BE@LFFACMJN@?$AAM?$AAC?$AAP?$AA?3?$AA?9?$AA?$CF?$AAS?$AA?$AN?$AA?6?$AA?$AA@|
  011a4		 |$LN12@SetSrcPhys|
  011a4	00000000	 DCD         |??_C@_0BL@EBPAGNHJ@DataPort_t?3?3SetSrcPhysAddr?$AA@|
  011a8		 |$LN13@SetSrcPhys|
  011a8	00000000	 DCD         |dpCurSettings|
  011ac		 |$LN14@SetSrcPhys|
  011ac	00000000	 DCD         |??_C@_1DG@DINIPIEG@?$AAM?$AAC?$AAP?$AA?3?$AA?$CL?$AA?$CF?$AAS?$AA?$CI?$AAP?$AAh?$AAy?$AAs?$AAA?$AAd?$AAd?$AAr?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  011b0		 |$M37297|

			 ENDP  ; |?SetSrcPhysAddr@DataPort_t@@QAAXK@Z|, DataPort_t::SetSrcPhysAddr

	EXPORT	|DmaGetLastWritePos|
	EXPORT	|DmaGetLastReadPos|
	EXPORT	|??_C@_0BH@HCHMLGEI@DataPort_t?3?3SwapBuffer?$AA@| [ DATA ] ; `string'

  00048			 AREA	 |.pdata|, PDATA
|$T37313| DCD	|$LN15@SwapBuffer|
	DCD	0x40005b04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BH@HCHMLGEI@DataPort_t?3?3SwapBuffer?$AA@| DCB "DataPort_t::SwapB"
	DCB	"uffer", 0x0				; `string'
; Function compile flags: /Odtp

  011b0			 AREA	 |.text|, CODE, ARM

  011b0		 |?SwapBuffer@DataPort_t@@UAAXH@Z| PROC	; DataPort_t::SwapBuffer

; 542  : {

  011b0		 |$LN15@SwapBuffer|
  011b0	e1a0c00d	 mov         r12, sp
  011b4	e92d0003	 stmdb       sp!, {r0, r1}
  011b8	e92d5000	 stmdb       sp!, {r12, lr}
  011bc	e24dd014	 sub         sp, sp, #0x14
  011c0		 |$M37310|

; 543  :     UINT8 const * pPos;
; 544  : 
; 545  :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S\r\n", __FUNCTION__));

  011c0	e59f314c	 ldr         r3, [pc, #0x14C]
  011c4	e5933440	 ldr         r3, [r3, #0x440]
  011c8	e3130004	 tst         r3, #4
  011cc	0a000005	 beq         |$LN9@SwapBuffer|
  011d0	e59f1138	 ldr         r1, [pc, #0x138]
  011d4	e59f013c	 ldr         r0, [pc, #0x13C]
  011d8	eb000000	 bl          NKDbgPrintfW
  011dc	e3a03001	 mov         r3, #1
  011e0	e58d3004	 str         r3, [sp, #4]
  011e4	ea000001	 b           |$LN10@SwapBuffer|
  011e8		 |$LN9@SwapBuffer|
  011e8	e3a03000	 mov         r3, #0
  011ec	e58d3004	 str         r3, [sp, #4]
  011f0		 |$LN10@SwapBuffer|

; 546  : 
; 547  :     // it's insufficient to just check the active buffer since the
; 548  :     // dma interrupt may not get serviced in time and the next page is
; 549  :     // already being rendered.  Check for this and select the appropriate
; 550  :     // page to swap to.
; 551  :     //
; 552  : 
; 553  :     if (bTransmitMode)

  011f0	e59d3020	 ldr         r3, [sp, #0x20]
  011f4	e3530000	 cmp         r3, #0
  011f8	0a000006	 beq         |$LN6@SwapBuffer|

; 554  :         {
; 555  :         pPos = DmaGetLastReadPos(&m_DmaInfo);

  011fc	e59d301c	 ldr         r3, [sp, #0x1C]
  01200	e2830004	 add         r0, r3, #4
  01204	eb000000	 bl          DmaGetLastReadPos
  01208	e58d0008	 str         r0, [sp, #8]
  0120c	e59d3008	 ldr         r3, [sp, #8]
  01210	e58d3000	 str         r3, [sp]

; 556  :         }
; 557  :     else

  01214	ea000005	 b           |$LN5@SwapBuffer|
  01218		 |$LN6@SwapBuffer|

; 558  :         {
; 559  :         pPos = DmaGetLastWritePos(&m_DmaInfo);

  01218	e59d301c	 ldr         r3, [sp, #0x1C]
  0121c	e2830004	 add         r0, r3, #4
  01220	eb000000	 bl          DmaGetLastWritePos
  01224	e58d000c	 str         r0, [sp, #0xC]
  01228	e59d300c	 ldr         r3, [sp, #0xC]
  0122c	e58d3000	 str         r3, [sp]
  01230		 |$LN5@SwapBuffer|

; 560  :         }
; 561  : 
; 562  :     // assume circular buffer.  therefore we only need to keep active
; 563  :     // buffer pointer in sync with DMA
; 564  :     //
; 565  :     if (pPos ==
; 566  :         ((m_pDmaBufferMiddle - m_pDmaBufferStart) + (m_pDmaBufferMiddle)))

  01230	e59d301c	 ldr         r3, [sp, #0x1C]
  01234	e2831048	 add         r1, r3, #0x48
  01238	e59d301c	 ldr         r3, [sp, #0x1C]
  0123c	e2832048	 add         r2, r3, #0x48
  01240	e59d301c	 ldr         r3, [sp, #0x1C]
  01244	e2833044	 add         r3, r3, #0x44
  01248	e5922000	 ldr         r2, [r2]
  0124c	e5933000	 ldr         r3, [r3]
  01250	e0422003	 sub         r2, r2, r3
  01254	e5913000	 ldr         r3, [r1]
  01258	e0832002	 add         r2, r3, r2
  0125c	e59d3000	 ldr         r3, [sp]
  01260	e1530002	 cmp         r3, r2
  01264	1a000006	 bne         |$LN4@SwapBuffer|

; 567  :         {
; 568  :         m_pActiveDmaBuffer = m_pDmaBufferStart;

  01268	e59d301c	 ldr         r3, [sp, #0x1C]
  0126c	e2831044	 add         r1, r3, #0x44
  01270	e59d301c	 ldr         r3, [sp, #0x1C]
  01274	e2832040	 add         r2, r3, #0x40
  01278	e5913000	 ldr         r3, [r1]
  0127c	e5823000	 str         r3, [r2]
  01280	ea000012	 b           |$LN3@SwapBuffer|
  01284		 |$LN4@SwapBuffer|

; 569  :         }
; 570  :     else if (pPos < m_pDmaBufferMiddle)

  01284	e59d301c	 ldr         r3, [sp, #0x1C]
  01288	e2833048	 add         r3, r3, #0x48
  0128c	e59d2000	 ldr         r2, [sp]
  01290	e5933000	 ldr         r3, [r3]
  01294	e1520003	 cmp         r2, r3
  01298	2a000006	 bcs         |$LN2@SwapBuffer|

; 571  :         {
; 572  :         m_pActiveDmaBuffer = m_pDmaBufferStart;

  0129c	e59d301c	 ldr         r3, [sp, #0x1C]
  012a0	e2831044	 add         r1, r3, #0x44
  012a4	e59d301c	 ldr         r3, [sp, #0x1C]
  012a8	e2832040	 add         r2, r3, #0x40
  012ac	e5913000	 ldr         r3, [r1]
  012b0	e5823000	 str         r3, [r2]

; 573  :         }
; 574  :     else

  012b4	ea000005	 b           |$LN1@SwapBuffer|
  012b8		 |$LN2@SwapBuffer|

; 575  :         {
; 576  :         m_pActiveDmaBuffer = m_pDmaBufferMiddle;

  012b8	e59d301c	 ldr         r3, [sp, #0x1C]
  012bc	e2831048	 add         r1, r3, #0x48
  012c0	e59d301c	 ldr         r3, [sp, #0x1C]
  012c4	e2832040	 add         r2, r3, #0x40
  012c8	e5913000	 ldr         r3, [r1]
  012cc	e5823000	 str         r3, [r2]
  012d0		 |$LN1@SwapBuffer|
  012d0		 |$LN3@SwapBuffer|

; 577  :         }
; 578  : 
; 579  :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S\r\n", __FUNCTION__));

  012d0	e59f303c	 ldr         r3, [pc, #0x3C]
  012d4	e5933440	 ldr         r3, [r3, #0x440]
  012d8	e3130004	 tst         r3, #4
  012dc	0a000005	 beq         |$LN11@SwapBuffer|
  012e0	e59f1028	 ldr         r1, [pc, #0x28]
  012e4	e59f0020	 ldr         r0, [pc, #0x20]
  012e8	eb000000	 bl          NKDbgPrintfW
  012ec	e3a03001	 mov         r3, #1
  012f0	e58d3010	 str         r3, [sp, #0x10]
  012f4	ea000001	 b           |$LN12@SwapBuffer|
  012f8		 |$LN11@SwapBuffer|
  012f8	e3a03000	 mov         r3, #0
  012fc	e58d3010	 str         r3, [sp, #0x10]
  01300		 |$LN12@SwapBuffer|

; 580  : }

  01300	e28dd014	 add         sp, sp, #0x14
  01304	e89d6000	 ldmia       sp, {sp, lr}
  01308	e12fff1e	 bx          lr
  0130c		 |$LN16@SwapBuffer|
  0130c		 |$LN17@SwapBuffer|
  0130c	00000000	 DCD         |??_C@_1BE@LFFACMJN@?$AAM?$AAC?$AAP?$AA?3?$AA?9?$AA?$CF?$AAS?$AA?$AN?$AA?6?$AA?$AA@|
  01310		 |$LN18@SwapBuffer|
  01310	00000000	 DCD         |??_C@_0BH@HCHMLGEI@DataPort_t?3?3SwapBuffer?$AA@|
  01314		 |$LN19@SwapBuffer|
  01314	00000000	 DCD         |dpCurSettings|
  01318		 |$LN20@SwapBuffer|
  01318	00000000	 DCD         |??_C@_1BE@FKGNIJHN@?$AAM?$AAC?$AAP?$AA?3?$AA?$CL?$AA?$CF?$AAS?$AA?$AN?$AA?6?$AA?$AA@|
  0131c		 |$M37311|

			 ENDP  ; |?SwapBuffer@DataPort_t@@UAAXH@Z|, DataPort_t::SwapBuffer

; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\mcbsp\dma_utility.h

  00000			 AREA	 |.pdata|, PDATA
|$T37324| DCD	|$LN5@DmaGetLast|
	DCD	0x40001804
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DmaGetLastWritePos| PROC

; 515  : {

  00000		 |$LN5@DmaGetLast|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd008	 sub         sp, sp, #8
  00010		 |$M37321|

; 516  :     UINT32  offset;
; 517  :     offset = INREG32(&pDataInfo->pDmaLcReg->CDAC) - pDataInfo->PhysAddrDstBuffer;

  00010	e59d3010	 ldr         r3, [sp, #0x10]
  00014	e2833014	 add         r3, r3, #0x14
  00018	e5933000	 ldr         r3, [r3]
  0001c	e2832038	 add         r2, r3, #0x38
  00020	e59d3010	 ldr         r3, [sp, #0x10]
  00024	e283300c	 add         r3, r3, #0xC
  00028	e5922000	 ldr         r2, [r2]
  0002c	e5933000	 ldr         r3, [r3]
  00030	e0423003	 sub         r3, r2, r3
  00034	e58d3000	 str         r3, [sp]

; 518  :     return ((UINT8*)pDataInfo->pDstBuffer + offset);

  00038	e59d3010	 ldr         r3, [sp, #0x10]
  0003c	e2833004	 add         r3, r3, #4
  00040	e5932000	 ldr         r2, [r3]
  00044	e59d3000	 ldr         r3, [sp]
  00048	e0823003	 add         r3, r2, r3
  0004c	e58d3004	 str         r3, [sp, #4]

; 519  : }

  00050	e59d0004	 ldr         r0, [sp, #4]
  00054	e28dd008	 add         sp, sp, #8
  00058	e89d6000	 ldmia       sp, {sp, lr}
  0005c	e12fff1e	 bx          lr
  00060		 |$M37322|

			 ENDP  ; |DmaGetLastWritePos|


  00000			 AREA	 |.pdata|, PDATA
|$T37332| DCD	|$LN5@DmaGetLast@2|
	DCD	0x40001704
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DmaGetLastReadPos| PROC

; 532  : {

  00000		 |$LN5@DmaGetLast@2|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd008	 sub         sp, sp, #8
  00010		 |$M37329|

; 533  :     UINT32  offset;
; 534  :     offset = INREG32(&pDataInfo->pDmaLcReg->CSAC) - pDataInfo->PhysAddrSrcBuffer;

  00010	e59d3010	 ldr         r3, [sp, #0x10]
  00014	e2833014	 add         r3, r3, #0x14
  00018	e5933000	 ldr         r3, [r3]
  0001c	e2832034	 add         r2, r3, #0x34
  00020	e59d3010	 ldr         r3, [sp, #0x10]
  00024	e2833008	 add         r3, r3, #8
  00028	e5922000	 ldr         r2, [r2]
  0002c	e5933000	 ldr         r3, [r3]
  00030	e0423003	 sub         r3, r2, r3
  00034	e58d3000	 str         r3, [sp]

; 535  :     return ((UINT8*)pDataInfo->pSrcBuffer + offset);

  00038	e59d3010	 ldr         r3, [sp, #0x10]
  0003c	e5932000	 ldr         r2, [r3]
  00040	e59d3000	 ldr         r3, [sp]
  00044	e0823003	 add         r3, r2, r3
  00048	e58d3004	 str         r3, [sp, #4]

; 536  : }

  0004c	e59d0004	 ldr         r0, [sp, #4]
  00050	e28dd008	 add         sp, sp, #8
  00054	e89d6000	 ldmia       sp, {sp, lr}
  00058	e12fff1e	 bx          lr
  0005c		 |$M37330|

			 ENDP  ; |DmaGetLastReadPos|

	END
