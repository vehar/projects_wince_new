; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\EMAC\Emac_Init.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|g_HighestAcceptedMax| [ DATA ]

  00000			 AREA	 |.data|, DATA
|g_HighestAcceptedMax| DCD 0xffffffff
	DCD	0xffffffff

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|??_C@_1EA@BPDHNMHD@?$AA?$DM?$AA?9?$AA?9?$AA?5?$AAN?$AAI?$AAC?$AAA?$AAl?$AAl?$AAo?$AAc?$AAA?$AAd?$AAa?$AAp?$AAt?$AAe?$AAr?$AA?5?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?$DN?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GG@NDLPGEFK@?$AAE?$AAM?$AAA?$AAC?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?3?$AA?5?$AAN?$AAd?$AAi?$AAs?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAM?$AAe?$AAm@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CM@JIHJICFE@?$AA?9?$AA?9?$AA?$DO?$AA?5?$AAN?$AAI?$AAC?$AAA?$AAl?$AAl?$AAo?$AAc?$AAA?$AAd?$AAa?$AAp?$AAt?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|EmacAllocAdapterBlock|
	IMPORT	|NdisAllocateSpinLock|
	IMPORT	|memset|
	IMPORT	|NdisAllocateMemory|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|dpCurSettings|
	IMPORT	|memcpy|

  00000			 AREA	 |.pdata|, PDATA
|$T51786| DCD	|$LN12@EmacAllocA|
	DCD	0x40005704
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\emac\emac_init.c

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@BPDHNMHD@?$AA?$DM?$AA?9?$AA?9?$AA?5?$AAN?$AAI?$AAC?$AAA?$AAl?$AAl?$AAo?$AAc?$AAA?$AAd?$AAa?$AAp?$AAt?$AAe?$AAr?$AA?5?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?$DN?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "<"
	DCB	0x0, "-", 0x0, "-", 0x0, " ", 0x0, "N", 0x0, "I", 0x0, "C"
	DCB	0x0, "A", 0x0, "l", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "A"
	DCB	0x0, "d", 0x0, "a", 0x0, "p", 0x0, "t", 0x0, "e", 0x0, "r"
	DCB	0x0, " ", 0x0, "S", 0x0, "t", 0x0, "a", 0x0, "t", 0x0, "u"
	DCB	0x0, "s", 0x0, "=", 0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GG@NDLPGEFK@?$AAE?$AAM?$AAA?$AAC?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?3?$AA?5?$AAN?$AAd?$AAi?$AAs?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAM?$AAe?$AAm@| DCB "E"
	DCB	0x0, "M", 0x0, "A", 0x0, "C", 0x0, ":", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a", 0x0, "l", 0x0, "i"
	DCB	0x0, "z", 0x0, "e", 0x0, ":", 0x0, " ", 0x0, "N", 0x0, "d"
	DCB	0x0, "i", 0x0, "s", 0x0, "A", 0x0, "l", 0x0, "l", 0x0, "o"
	DCB	0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, "M", 0x0, "e"
	DCB	0x0, "m", 0x0, "o", 0x0, "r", 0x0, "y", 0x0, "(", 0x0, "E"
	DCB	0x0, "M", 0x0, "A", 0x0, "C", 0x0, ")", 0x0, " ", 0x0, "f"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@JIHJICFE@?$AA?9?$AA?9?$AA?$DO?$AA?5?$AAN?$AAI?$AAC?$AAA?$AAl?$AAl?$AAo?$AAc?$AAA?$AAd?$AAa?$AAp?$AAt?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "-", 0x0, ">", 0x0, " ", 0x0, "N", 0x0, "I", 0x0, "C"
	DCB	0x0, "A", 0x0, "l", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "A"
	DCB	0x0, "d", 0x0, "a", 0x0, "p", 0x0, "t", 0x0, "e", 0x0, "r"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |EmacAllocAdapterBlock| PROC

; 37   : {

  00000		 |$LN12@EmacAllocA|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd024	 sub         sp, sp, #0x24
  00010		 |$M51783|

; 38   :     PMINIPORT_ADAPTER     pTempAdapter;
; 39   :     NDIS_STATUS           Status;
; 40   : 
; 41   :     DEBUGMSG(DBG_FUNC, (L"--> NICAllocAdapter\r\n"));

  00010	e59f3134	 ldr         r3, [pc, #0x134]
  00014	e5933440	 ldr         r3, [r3, #0x440]
  00018	e3130080	 tst         r3, #0x80
  0001c	0a000004	 beq         |$LN4@EmacAllocA|
  00020	e59f0130	 ldr         r0, [pc, #0x130]
  00024	eb000000	 bl          NKDbgPrintfW
  00028	e3a03001	 mov         r3, #1
  0002c	e58d3010	 str         r3, [sp, #0x10]
  00030	ea000001	 b           |$LN5@EmacAllocA|
  00034		 |$LN4@EmacAllocA|
  00034	e3a03000	 mov         r3, #0
  00038	e58d3010	 str         r3, [sp, #0x10]
  0003c		 |$LN5@EmacAllocA|

; 42   : 
; 43   :     *pAdapter = NULL;

  0003c	e59d202c	 ldr         r2, [sp, #0x2C]
  00040	e3a03000	 mov         r3, #0
  00044	e5823000	 str         r3, [r2]

; 44   : 
; 45   :     /* Allocate memory for the adapter block now. */
; 46   : 
; 47   :     Status = NdisAllocateMemory(
; 48   :                 (PVOID *)&pTempAdapter,
; 49   :                 sizeof(MINIPORT_ADAPTER),
; 50   :                 0,              /* System space cached memory */
; 51   :                 g_HighestAcceptedMax);

  00048	e59f3104	 ldr         r3, [pc, #0x104]
  0004c	e58d3014	 str         r3, [sp, #0x14]
  00050	e28d0000	 add         r0, sp, #0
  00054	e59d3014	 ldr         r3, [sp, #0x14]
  00058	e2831004	 add         r1, r3, #4
  0005c	e3a02004	 mov         r2, #4
  00060	eb000000	 bl          memcpy
  00064	e59d3014	 ldr         r3, [sp, #0x14]
  00068	e5933000	 ldr         r3, [r3]
  0006c	e3a02000	 mov         r2, #0
  00070	e3a01e3a	 mov         r1, #0x3A, 28
  00074	e28d0008	 add         r0, sp, #8
  00078	eb000000	 bl          NdisAllocateMemory
  0007c	e58d0018	 str         r0, [sp, #0x18]
  00080	e59d3018	 ldr         r3, [sp, #0x18]
  00084	e58d3004	 str         r3, [sp, #4]

; 52   : 
; 53   :     if (Status != NDIS_STATUS_SUCCESS)

  00088	e59d3004	 ldr         r3, [sp, #4]
  0008c	e3530000	 cmp         r3, #0
  00090	0a00000a	 beq         |$LN1@EmacAllocA|

; 54   :     {
; 55   :         DEBUGMSG(DBG_ERR, (L"EMAC:Initialize: NdisAllocateMemory(EMAC) failed\r\n"));

  00094	e59f30b0	 ldr         r3, [pc, #0xB0]
  00098	e5933440	 ldr         r3, [r3, #0x440]
  0009c	e3130902	 tst         r3, #2, 18
  000a0	0a000004	 beq         |$LN6@EmacAllocA|
  000a4	e59f00a4	 ldr         r0, [pc, #0xA4]
  000a8	eb000000	 bl          NKDbgPrintfW
  000ac	e3a03001	 mov         r3, #1
  000b0	e58d301c	 str         r3, [sp, #0x1C]
  000b4	ea000001	 b           |$LN7@EmacAllocA|
  000b8		 |$LN6@EmacAllocA|
  000b8	e3a03000	 mov         r3, #0
  000bc	e58d301c	 str         r3, [sp, #0x1C]
  000c0		 |$LN7@EmacAllocA|
  000c0		 |$LN1@EmacAllocA|

; 56   :     }
; 57   : 
; 58   :     /* Clear out the adapter block, which sets all default values to FALSE,
; 59   :      * or NULL.
; 60   :      */
; 61   : 
; 62   :     NdisZeroMemory (pTempAdapter, sizeof(MINIPORT_ADAPTER));

  000c0	e3a02e3a	 mov         r2, #0x3A, 28
  000c4	e3a01000	 mov         r1, #0
  000c8	e59d0008	 ldr         r0, [sp, #8]
  000cc	eb000000	 bl          memset

; 63   : 
; 64   :     /* Allocating the spin locks */
; 65   : 
; 66   :     NdisAllocateSpinLock(&pTempAdapter->m_Lock);

  000d0	e59d3008	 ldr         r3, [sp, #8]
  000d4	e2830058	 add         r0, r3, #0x58
  000d8	eb000000	 bl          NdisAllocateSpinLock

; 67   :     NdisAllocateSpinLock(&pTempAdapter->m_SendLock);

  000dc	e59d3008	 ldr         r3, [sp, #8]
  000e0	e283006c	 add         r0, r3, #0x6C
  000e4	eb000000	 bl          NdisAllocateSpinLock

; 68   :     NdisAllocateSpinLock(&pTempAdapter->m_RcvLock);

  000e8	e59d3008	 ldr         r3, [sp, #8]
  000ec	e2830080	 add         r0, r3, #0x80
  000f0	eb000000	 bl          NdisAllocateSpinLock

; 69   : 
; 70   : 
; 71   :     *pAdapter = pTempAdapter;

  000f4	e59d2008	 ldr         r2, [sp, #8]
  000f8	e59d302c	 ldr         r3, [sp, #0x2C]
  000fc	e5832000	 str         r2, [r3]

; 72   : 
; 73   :     DEBUGMSG(DBG_FUNC, (L"<-- NICAllocAdapter Status=%x\r\n", Status));

  00100	e59f3044	 ldr         r3, [pc, #0x44]
  00104	e5933440	 ldr         r3, [r3, #0x440]
  00108	e3130080	 tst         r3, #0x80
  0010c	0a000005	 beq         |$LN8@EmacAllocA|
  00110	e59d1004	 ldr         r1, [sp, #4]
  00114	e59f002c	 ldr         r0, [pc, #0x2C]
  00118	eb000000	 bl          NKDbgPrintfW
  0011c	e3a03001	 mov         r3, #1
  00120	e58d3020	 str         r3, [sp, #0x20]
  00124	ea000001	 b           |$LN9@EmacAllocA|
  00128		 |$LN8@EmacAllocA|
  00128	e3a03000	 mov         r3, #0
  0012c	e58d3020	 str         r3, [sp, #0x20]
  00130		 |$LN9@EmacAllocA|

; 74   : 
; 75   :     return Status;

  00130	e59d3004	 ldr         r3, [sp, #4]
  00134	e58d300c	 str         r3, [sp, #0xC]

; 76   : 
; 77   : }

  00138	e59d000c	 ldr         r0, [sp, #0xC]
  0013c	e28dd024	 add         sp, sp, #0x24
  00140	e89d6000	 ldmia       sp, {sp, lr}
  00144	e12fff1e	 bx          lr
  00148		 |$LN13@EmacAllocA|
  00148		 |$LN14@EmacAllocA|
  00148	00000000	 DCD         |??_C@_1EA@BPDHNMHD@?$AA?$DM?$AA?9?$AA?9?$AA?5?$AAN?$AAI?$AAC?$AAA?$AAl?$AAl?$AAo?$AAc?$AAA?$AAd?$AAa?$AAp?$AAt?$AAe?$AAr?$AA?5?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?$DN?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  0014c		 |$LN15@EmacAllocA|
  0014c	00000000	 DCD         |dpCurSettings|
  00150		 |$LN16@EmacAllocA|
  00150	00000000	 DCD         |??_C@_1GG@NDLPGEFK@?$AAE?$AAM?$AAA?$AAC?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?3?$AA?5?$AAN?$AAd?$AAi?$AAs?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAM?$AAe?$AAm@|
  00154		 |$LN17@EmacAllocA|
  00154	00000000	 DCD         |g_HighestAcceptedMax|
  00158		 |$LN18@EmacAllocA|
  00158	00000000	 DCD         |??_C@_1CM@JIHJICFE@?$AA?9?$AA?9?$AA?$DO?$AA?5?$AAN?$AAI?$AAC?$AAA?$AAl?$AAl?$AAo?$AAc?$AAA?$AAd?$AAa?$AAp?$AAt?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@|
  0015c		 |$M51784|

			 ENDP  ; |EmacAllocAdapterBlock|

	EXPORT	|??_C@_1CO@JBHLBOFG@?$AA?$DM?$AA?9?$AA?9?$AA?5?$AAE?$AAm?$AAa?$AAc?$AAF?$AAr?$AAe?$AAe?$AAA?$AAd?$AAa?$AAp?$AAt?$AAe?$AAr?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CM@EPCLOBPP@?$AA?9?$AA?9?$AA?$DO?$AA?5?$AAE?$AAm?$AAa?$AAc?$AAF?$AAr?$AAe?$AAe?$AAA?$AAd?$AAa?$AAp?$AAt?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|EmacFreeAdapter|
	IMPORT	|g_EmacMemLayout|
	IMPORT	|NdisFreeSpinLock|
	IMPORT	|NdisMUnmapIoSpace|
	IMPORT	|NdisFreeMemory|
	IMPORT	|NdisFreeBufferPool|
	IMPORT	|NdisFreePacketPool|
	IMPORT	|NdisFreePacket|
	IMPORT	|NdisFreeBuffer|
	IMPORT	|NdisMDeregisterInterrupt|

  00008			 AREA	 |.pdata|, PDATA
|$T51801| DCD	|$LN29@EmacFreeAd|
	DCD	0x40012f04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@JBHLBOFG@?$AA?$DM?$AA?9?$AA?9?$AA?5?$AAE?$AAm?$AAa?$AAc?$AAF?$AAr?$AAe?$AAe?$AAA?$AAd?$AAa?$AAp?$AAt?$AAe?$AAr?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| DCB "<"
	DCB	0x0, "-", 0x0, "-", 0x0, " ", 0x0, "E", 0x0, "m", 0x0, "a"
	DCB	0x0, "c", 0x0, "F", 0x0, "r", 0x0, "e", 0x0, "e", 0x0, "A"
	DCB	0x0, "d", 0x0, "a", 0x0, "p", 0x0, "t", 0x0, "e", 0x0, "r"
	DCB	0x0, " ", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@EPCLOBPP@?$AA?9?$AA?9?$AA?$DO?$AA?5?$AAE?$AAm?$AAa?$AAc?$AAF?$AAr?$AAe?$AAe?$AAA?$AAd?$AAa?$AAp?$AAt?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "-", 0x0, ">", 0x0, " ", 0x0, "E", 0x0, "m", 0x0, "a"
	DCB	0x0, "c", 0x0, "F", 0x0, "r", 0x0, "e", 0x0, "e", 0x0, "A"
	DCB	0x0, "d", 0x0, "a", 0x0, "p", 0x0, "t", 0x0, "e", 0x0, "r"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  0015c			 AREA	 |.text|, CODE, ARM

  0015c		 |EmacFreeAdapter| PROC

; 89   : {

  0015c		 |$LN29@EmacFreeAd|
  0015c	e1a0c00d	 mov         r12, sp
  00160	e92d0001	 stmdb       sp!, {r0}
  00164	e92d5000	 stmdb       sp!, {r12, lr}
  00168	e24dd01c	 sub         sp, sp, #0x1C
  0016c		 |$M51798|

; 90   :     PEMAC_RXPKTS    pNextPkt;
; 91   :     PEMAC_RXPKTS    pCurPkt;
; 92   : 	PEMAC_RXBUFS	pNextBuf;
; 93   : 	PEMAC_RXBUFS	pCurBuf;
; 94   :     UINT            Count;
; 95   : 
; 96   :     DEBUGMSG(DBG_FUNC, (L"--> EmacFreeAdapter\r\n"));

  0016c	e59f3498	 ldr         r3, [pc, #0x498]
  00170	e5933440	 ldr         r3, [r3, #0x440]
  00174	e3130080	 tst         r3, #0x80
  00178	0a000004	 beq         |$LN23@EmacFreeAd|
  0017c	e59f0490	 ldr         r0, [pc, #0x490]
  00180	eb000000	 bl          NKDbgPrintfW
  00184	e3a03001	 mov         r3, #1
  00188	e58d3014	 str         r3, [sp, #0x14]
  0018c	ea000001	 b           |$LN24@EmacFreeAd|
  00190		 |$LN23@EmacFreeAd|
  00190	e3a03000	 mov         r3, #0
  00194	e58d3014	 str         r3, [sp, #0x14]
  00198		 |$LN24@EmacFreeAd|

; 97   : 
; 98   :     /*
; 99   :     * Check if the Interrupt has been registered, if so then deregister the
; 100  :     * interrupt for the adapter. Rest, all deallocation is done in reverse way
; 101  :     */
; 102  :     if(pAdapter->m_HwStatus != NdisHardwareStatusReset)

  00198	e59d3024	 ldr         r3, [sp, #0x24]
  0019c	e2833e1a	 add         r3, r3, #0x1A, 28
  001a0	e5933000	 ldr         r3, [r3]
  001a4	e3530002	 cmp         r3, #2
  001a8	0a000017	 beq         |$LN20@EmacFreeAd|

; 103  :     {
; 104  :         if(pAdapter->m_RxIntrVector)

  001ac	e59d3024	 ldr         r3, [sp, #0x24]
  001b0	e28330e8	 add         r3, r3, #0xE8
  001b4	e1d330b0	 ldrh        r3, [r3]
  001b8	e3530000	 cmp         r3, #0
  001bc	0a000002	 beq         |$LN19@EmacFreeAd|

; 105  :         {
; 106  :             NdisMDeregisterInterrupt(&pAdapter->m_RxIntrInfo);

  001c0	e59d3024	 ldr         r3, [sp, #0x24]
  001c4	e2830098	 add         r0, r3, #0x98
  001c8	eb000000	 bl          NdisMDeregisterInterrupt
  001cc		 |$LN19@EmacFreeAd|

; 107  :         }
; 108  :         if(pAdapter->m_TxIntrVector)

  001cc	e59d3024	 ldr         r3, [sp, #0x24]
  001d0	e2833f4f	 add         r3, r3, #0x4F, 30
  001d4	e1d330b0	 ldrh        r3, [r3]
  001d8	e3530000	 cmp         r3, #0
  001dc	0a000002	 beq         |$LN18@EmacFreeAd|

; 109  :         {
; 110  :             NdisMDeregisterInterrupt(&pAdapter->m_TxIntrInfo);

  001e0	e59d3024	 ldr         r3, [sp, #0x24]
  001e4	e28300ec	 add         r0, r3, #0xEC
  001e8	eb000000	 bl          NdisMDeregisterInterrupt
  001ec		 |$LN18@EmacFreeAd|

; 111  :         }
; 112  :         if(pAdapter->m_LinkIntrVector)

  001ec	e59d3024	 ldr         r3, [sp, #0x24]
  001f0	e2833e19	 add         r3, r3, #0x19, 28
  001f4	e1d330b0	 ldrh        r3, [r3]
  001f8	e3530000	 cmp         r3, #0
  001fc	0a000002	 beq         |$LN17@EmacFreeAd|

; 113  :         {
; 114  :             NdisMDeregisterInterrupt(&pAdapter->m_LinkIntrInfo);

  00200	e59d3024	 ldr         r3, [sp, #0x24]
  00204	e2830d05	 add         r0, r3, #5, 26
  00208	eb000000	 bl          NdisMDeregisterInterrupt
  0020c		 |$LN17@EmacFreeAd|
  0020c		 |$LN20@EmacFreeAd|

; 115  :         }
; 116  :     }
; 117  : 
; 118  : 	pNextBuf = pAdapter->m_pBaseRxBufs;

  0020c	e59d3024	 ldr         r3, [sp, #0x24]
  00210	e2833030	 add         r3, r3, #0x30
  00214	e5933000	 ldr         r3, [r3]
  00218	e58d3000	 str         r3, [sp]

; 119  : 	for (Count = 0; Count < pAdapter->m_NumEmacRxBufDesc ; Count++)

  0021c	e3a03000	 mov         r3, #0
  00220	e58d3008	 str         r3, [sp, #8]
  00224	ea000002	 b           |$LN16@EmacFreeAd|
  00228		 |$LN15@EmacFreeAd|
  00228	e59d3008	 ldr         r3, [sp, #8]
  0022c	e2833001	 add         r3, r3, #1
  00230	e58d3008	 str         r3, [sp, #8]
  00234		 |$LN16@EmacFreeAd|
  00234	e59d3024	 ldr         r3, [sp, #0x24]
  00238	e2833026	 add         r3, r3, #0x26
  0023c	e1d320b0	 ldrh        r2, [r3]
  00240	e59d3008	 ldr         r3, [sp, #8]
  00244	e1530002	 cmp         r3, r2
  00248	2a000010	 bcs         |$LN14@EmacFreeAd|

; 120  : 	{
; 121  : 		pCurBuf = pNextBuf;

  0024c	e59d3000	 ldr         r3, [sp]
  00250	e58d3010	 str         r3, [sp, #0x10]

; 122  : 
; 123  : 		/* Free buffers from buffer pool */
; 124  : 		NdisFreeBuffer((PNDIS_BUFFER)pNextBuf->m_BufHandle);

  00254	e59d3000	 ldr         r3, [sp]
  00258	e2833004	 add         r3, r3, #4
  0025c	e5930000	 ldr         r0, [r3]
  00260	eb000000	 bl          NdisFreeBuffer

; 125  : 
; 126  : 		pNextBuf->m_BufHandle = NULL;

  00264	e59d3000	 ldr         r3, [sp]
  00268	e2832004	 add         r2, r3, #4
  0026c	e3a03000	 mov         r3, #0
  00270	e5823000	 str         r3, [r2]

; 127  : 
; 128  : 		pNextBuf++;

  00274	e59d3000	 ldr         r3, [sp]
  00278	e2833018	 add         r3, r3, #0x18
  0027c	e58d3000	 str         r3, [sp]

; 129  : 		pCurBuf->m_pNext = pNextBuf;

  00280	e59d2000	 ldr         r2, [sp]
  00284	e59d3010	 ldr         r3, [sp, #0x10]
  00288	e5832000	 str         r2, [r3]

; 130  : 	}

  0028c	eaffffe5	 b           |$LN15@EmacFreeAd|
  00290		 |$LN14@EmacFreeAd|

; 131  : 
; 132  :     if(NULL != pAdapter->m_pBaseRxPkts)

  00290	e59d3024	 ldr         r3, [sp, #0x24]
  00294	e283302c	 add         r3, r3, #0x2C
  00298	e5933000	 ldr         r3, [r3]
  0029c	e3530000	 cmp         r3, #0
  002a0	0a000020	 beq         |$LN13@EmacFreeAd|

; 133  :     {
; 134  :         pNextPkt = pAdapter->m_pBaseRxPkts;

  002a4	e59d3024	 ldr         r3, [sp, #0x24]
  002a8	e283302c	 add         r3, r3, #0x2C
  002ac	e5933000	 ldr         r3, [r3]
  002b0	e58d300c	 str         r3, [sp, #0xC]

; 135  :         for (Count = 0; Count < pAdapter->m_NumRxIndicatePkts ; Count++)

  002b4	e3a03000	 mov         r3, #0
  002b8	e58d3008	 str         r3, [sp, #8]
  002bc	ea000002	 b           |$LN12@EmacFreeAd|
  002c0		 |$LN11@EmacFreeAd|
  002c0	e59d3008	 ldr         r3, [sp, #8]
  002c4	e2833001	 add         r3, r3, #1
  002c8	e58d3008	 str         r3, [sp, #8]
  002cc		 |$LN12@EmacFreeAd|
  002cc	e59d3024	 ldr         r3, [sp, #0x24]
  002d0	e2833024	 add         r3, r3, #0x24
  002d4	e1d320b0	 ldrh        r2, [r3]
  002d8	e59d3008	 ldr         r3, [sp, #8]
  002dc	e1530002	 cmp         r3, r2
  002e0	2a000010	 bcs         |$LN10@EmacFreeAd|

; 136  :         {
; 137  :             pCurPkt = pNextPkt;

  002e4	e59d300c	 ldr         r3, [sp, #0xC]
  002e8	e58d3004	 str         r3, [sp, #4]

; 138  : 
; 139  :             /* Free packets from packet pool */
; 140  :             NdisFreePacket((PNDIS_PACKET)pNextPkt->m_PktHandle);

  002ec	e59d300c	 ldr         r3, [sp, #0xC]
  002f0	e2833004	 add         r3, r3, #4
  002f4	e5930000	 ldr         r0, [r3]
  002f8	eb000000	 bl          NdisFreePacket

; 141  : 
; 142  :             pNextPkt->m_PktHandle = NULL;

  002fc	e59d300c	 ldr         r3, [sp, #0xC]
  00300	e2832004	 add         r2, r3, #4
  00304	e3a03000	 mov         r3, #0
  00308	e5823000	 str         r3, [r2]

; 143  : 
; 144  :             pNextPkt++;

  0030c	e59d300c	 ldr         r3, [sp, #0xC]
  00310	e2833014	 add         r3, r3, #0x14
  00314	e58d300c	 str         r3, [sp, #0xC]

; 145  :             pCurPkt->m_pNext = pNextPkt;

  00318	e59d200c	 ldr         r2, [sp, #0xC]
  0031c	e59d3004	 ldr         r3, [sp, #4]
  00320	e5832000	 str         r2, [r3]

; 146  :         }

  00324	eaffffe5	 b           |$LN11@EmacFreeAd|
  00328		 |$LN10@EmacFreeAd|
  00328		 |$LN13@EmacFreeAd|

; 147  :     }
; 148  : 
; 149  :     if(NULL != pAdapter->m_RecvPacketPool)

  00328	e59d3024	 ldr         r3, [sp, #0x24]
  0032c	e283301c	 add         r3, r3, #0x1C
  00330	e5933000	 ldr         r3, [r3]
  00334	e3530000	 cmp         r3, #0
  00338	0a000007	 beq         |$LN9@EmacFreeAd|

; 150  :     {
; 151  :         NdisFreePacketPool(pAdapter->m_RecvPacketPool);

  0033c	e59d3024	 ldr         r3, [sp, #0x24]
  00340	e283301c	 add         r3, r3, #0x1C
  00344	e5930000	 ldr         r0, [r3]
  00348	eb000000	 bl          NdisFreePacketPool

; 152  :         pAdapter->m_RecvPacketPool = NULL;

  0034c	e59d3024	 ldr         r3, [sp, #0x24]
  00350	e283201c	 add         r2, r3, #0x1C
  00354	e3a03000	 mov         r3, #0
  00358	e5823000	 str         r3, [r2]
  0035c		 |$LN9@EmacFreeAd|

; 153  :     }
; 154  : 
; 155  :     NdisFreeBufferPool(pAdapter->m_RecvBufferPool);

  0035c	e59d3024	 ldr         r3, [sp, #0x24]
  00360	e2833020	 add         r3, r3, #0x20
  00364	e5930000	 ldr         r0, [r3]
  00368	eb000000	 bl          NdisFreeBufferPool

; 156  :     pAdapter->m_RecvBufferPool = NULL;

  0036c	e59d3024	 ldr         r3, [sp, #0x24]
  00370	e2832020	 add         r2, r3, #0x20
  00374	e3a03000	 mov         r3, #0
  00378	e5823000	 str         r3, [r2]

; 157  : 
; 158  : 	if(pAdapter->m_HwStatus != NdisHardwareStatusReset)

  0037c	e59d3024	 ldr         r3, [sp, #0x24]
  00380	e2833e1a	 add         r3, r3, #0x1A, 28
  00384	e5933000	 ldr         r3, [r3]
  00388	e3530002	 cmp         r3, #2
  0038c	0a00008f	 beq         |$LN8@EmacFreeAd|

; 159  : 	{
; 160  : 		if(NULL != pAdapter->m_pBaseRxPkts)

  00390	e59d3024	 ldr         r3, [sp, #0x24]
  00394	e283302c	 add         r3, r3, #0x2C
  00398	e5933000	 ldr         r3, [r3]
  0039c	e3530000	 cmp         r3, #0
  003a0	0a00000d	 beq         |$LN7@EmacFreeAd|

; 161  : 		{
; 162  : 			NdisFreeMemory(pAdapter->m_pBaseRxPkts,
; 163  : 						pAdapter->m_NumRxIndicatePkts * sizeof(EMAC_RXPKTS),
; 164  : 						0);

  003a4	e3a02000	 mov         r2, #0
  003a8	e59d3024	 ldr         r3, [sp, #0x24]
  003ac	e2833024	 add         r3, r3, #0x24
  003b0	e1d300b0	 ldrh        r0, [r3]
  003b4	e3a03014	 mov         r3, #0x14
  003b8	e0010390	 mul         r1, r0, r3
  003bc	e59d3024	 ldr         r3, [sp, #0x24]
  003c0	e283302c	 add         r3, r3, #0x2C
  003c4	e5930000	 ldr         r0, [r3]
  003c8	eb000000	 bl          NdisFreeMemory

; 165  : 
; 166  : 			pAdapter->m_pBaseRxPkts = NULL;

  003cc	e59d3024	 ldr         r3, [sp, #0x24]
  003d0	e283202c	 add         r2, r3, #0x2C
  003d4	e3a03000	 mov         r3, #0
  003d8	e5823000	 str         r3, [r2]
  003dc		 |$LN7@EmacFreeAd|

; 167  : 		}
; 168  : 
; 169  : 		if(NULL != pAdapter->m_pBaseRxBufs)

  003dc	e59d3024	 ldr         r3, [sp, #0x24]
  003e0	e2833030	 add         r3, r3, #0x30
  003e4	e5933000	 ldr         r3, [r3]
  003e8	e3530000	 cmp         r3, #0
  003ec	0a00000d	 beq         |$LN6@EmacFreeAd|

; 170  : 		{
; 171  : 			NdisFreeMemory(pAdapter->m_pBaseRxBufs,
; 172  : 					pAdapter->m_NumEmacRxBufDesc * sizeof(EMAC_RXBUFS),
; 173  : 					0);

  003f0	e3a02000	 mov         r2, #0
  003f4	e59d3024	 ldr         r3, [sp, #0x24]
  003f8	e2833026	 add         r3, r3, #0x26
  003fc	e1d300b0	 ldrh        r0, [r3]
  00400	e3a03018	 mov         r3, #0x18
  00404	e0010390	 mul         r1, r0, r3
  00408	e59d3024	 ldr         r3, [sp, #0x24]
  0040c	e2833030	 add         r3, r3, #0x30
  00410	e5930000	 ldr         r0, [r3]
  00414	eb000000	 bl          NdisFreeMemory

; 174  : 
; 175  : 			pAdapter->m_pBaseRxBufs = NULL;

  00418	e59d3024	 ldr         r3, [sp, #0x24]
  0041c	e2832030	 add         r2, r3, #0x30
  00420	e3a03000	 mov         r3, #0
  00424	e5823000	 str         r3, [r2]
  00428		 |$LN6@EmacFreeAd|

; 176  : 		}
; 177  : 
; 178  : 		if(NULL != (VOID *)pAdapter->m_RxBufsBase)

  00428	e59d3024	 ldr         r3, [sp, #0x24]
  0042c	e283303c	 add         r3, r3, #0x3C
  00430	e5933000	 ldr         r3, [r3]
  00434	e3530000	 cmp         r3, #0
  00438	0a00000f	 beq         |$LN5@EmacFreeAd|

; 179  : 		{
; 180  : 			NdisMUnmapIoSpace(pAdapter->m_AdapterHandle,
; 181  : 					(PVOID)pAdapter->m_RxBufsBase,
; 182  : 					(pAdapter->m_NumEmacRxBufDesc * EMAC_MAX_PKT_BUFFER_SIZE)
; 183  : 					);

  0043c	e59d3024	 ldr         r3, [sp, #0x24]
  00440	e2833026	 add         r3, r3, #0x26
  00444	e1d330b0	 ldrh        r3, [r3]
  00448	e1a01003	 mov         r1, r3
  0044c	e3a03c06	 mov         r3, #6, 24
  00450	e0020391	 mul         r2, r1, r3
  00454	e59d3024	 ldr         r3, [sp, #0x24]
  00458	e283303c	 add         r3, r3, #0x3C
  0045c	e5931000	 ldr         r1, [r3]
  00460	e59d3024	 ldr         r3, [sp, #0x24]
  00464	e5930000	 ldr         r0, [r3]
  00468	eb000000	 bl          NdisMUnmapIoSpace

; 184  : 
; 185  : 			pAdapter->m_RxBufsBase = 0;

  0046c	e59d3024	 ldr         r3, [sp, #0x24]
  00470	e283203c	 add         r2, r3, #0x3C
  00474	e3a03000	 mov         r3, #0
  00478	e5823000	 str         r3, [r2]
  0047c		 |$LN5@EmacFreeAd|

; 186  : 		}
; 187  : 
; 188  : 		if(NULL != pAdapter->m_pBaseTxPkts)

  0047c	e59d3024	 ldr         r3, [sp, #0x24]
  00480	e2833034	 add         r3, r3, #0x34
  00484	e5933000	 ldr         r3, [r3]
  00488	e3530000	 cmp         r3, #0
  0048c	0a00000d	 beq         |$LN4@EmacFreeAd|

; 189  : 		{
; 190  : 			NdisFreeMemory(pAdapter->m_pBaseTxPkts,
; 191  : 					pAdapter->m_MaxPacketPerTransmit * sizeof(EMAC_TXPKT),
; 192  : 					0);

  00490	e3a02000	 mov         r2, #0
  00494	e59d3024	 ldr         r3, [sp, #0x24]
  00498	e2833028	 add         r3, r3, #0x28
  0049c	e1d300b0	 ldrh        r0, [r3]
  004a0	e3a03014	 mov         r3, #0x14
  004a4	e0010390	 mul         r1, r0, r3
  004a8	e59d3024	 ldr         r3, [sp, #0x24]
  004ac	e2833034	 add         r3, r3, #0x34
  004b0	e5930000	 ldr         r0, [r3]
  004b4	eb000000	 bl          NdisFreeMemory

; 193  : 
; 194  : 			pAdapter->m_pBaseTxPkts = NULL;

  004b8	e59d3024	 ldr         r3, [sp, #0x24]
  004bc	e2832034	 add         r2, r3, #0x34
  004c0	e3a03000	 mov         r3, #0
  004c4	e5823000	 str         r3, [r2]
  004c8		 |$LN4@EmacFreeAd|

; 195  : 		}
; 196  : 
; 197  : 		if(NULL != pAdapter->m_pBaseTxBufs)

  004c8	e59d3024	 ldr         r3, [sp, #0x24]
  004cc	e2833038	 add         r3, r3, #0x38
  004d0	e5933000	 ldr         r3, [r3]
  004d4	e3530000	 cmp         r3, #0
  004d8	0a00000d	 beq         |$LN3@EmacFreeAd|

; 198  : 		{
; 199  : 			NdisFreeMemory(pAdapter->m_pBaseTxBufs,
; 200  : 				pAdapter->m_MaxTxEmacBufs * sizeof(EMAC_TXBUF),
; 201  : 				0);

  004dc	e3a02000	 mov         r2, #0
  004e0	e59d3024	 ldr         r3, [sp, #0x24]
  004e4	e283302a	 add         r3, r3, #0x2A
  004e8	e1d300b0	 ldrh        r0, [r3]
  004ec	e3a03018	 mov         r3, #0x18
  004f0	e0010390	 mul         r1, r0, r3
  004f4	e59d3024	 ldr         r3, [sp, #0x24]
  004f8	e2833038	 add         r3, r3, #0x38
  004fc	e5930000	 ldr         r0, [r3]
  00500	eb000000	 bl          NdisFreeMemory

; 202  : 
; 203  : 			pAdapter->m_pBaseTxBufs = NULL;

  00504	e59d3024	 ldr         r3, [sp, #0x24]
  00508	e2832038	 add         r2, r3, #0x38
  0050c	e3a03000	 mov         r3, #0
  00510	e5823000	 str         r3, [r2]
  00514		 |$LN3@EmacFreeAd|

; 204  : 		}
; 205  : 
; 206  : 		if(NULL != (VOID *)pAdapter->m_TxBufBase)

  00514	e59d3024	 ldr         r3, [sp, #0x24]
  00518	e2833048	 add         r3, r3, #0x48
  0051c	e5933000	 ldr         r3, [r3]
  00520	e3530000	 cmp         r3, #0
  00524	0a00000b	 beq         |$LN2@EmacFreeAd|

; 207  : 		{
; 208  : 			NdisMUnmapIoSpace(pAdapter->m_AdapterHandle,
; 209  : 					(PVOID)pAdapter->m_TxBufBase,
; 210  : 					(EMAC_MAX_TX_BUFFERS * EMAC_MAX_ETHERNET_PKT_SIZE)
; 211  : 					);

  00528	e3a02a5e	 mov         r2, #0x5E, 20
  0052c	e3822c0a	 orr         r2, r2, #0xA, 24
  00530	e59d3024	 ldr         r3, [sp, #0x24]
  00534	e2833048	 add         r3, r3, #0x48
  00538	e5931000	 ldr         r1, [r3]
  0053c	e59d3024	 ldr         r3, [sp, #0x24]
  00540	e5930000	 ldr         r0, [r3]
  00544	eb000000	 bl          NdisMUnmapIoSpace

; 212  : 
; 213  : 			pAdapter->m_TxBufBase = 0;

  00548	e59d3024	 ldr         r3, [sp, #0x24]
  0054c	e2832048	 add         r2, r3, #0x48
  00550	e3a03000	 mov         r3, #0
  00554	e5823000	 str         r3, [r2]
  00558		 |$LN2@EmacFreeAd|

; 214  : 		}
; 215  : 
; 216  : 		NdisFreeSpinLock(&pAdapter->m_Lock);

  00558	e59d3024	 ldr         r3, [sp, #0x24]
  0055c	e2830058	 add         r0, r3, #0x58
  00560	eb000000	 bl          NdisFreeSpinLock

; 217  : 		NdisFreeSpinLock(&pAdapter->m_SendLock);

  00564	e59d3024	 ldr         r3, [sp, #0x24]
  00568	e283006c	 add         r0, r3, #0x6C
  0056c	eb000000	 bl          NdisFreeSpinLock

; 218  : 		NdisFreeSpinLock(&pAdapter->m_RcvLock);

  00570	e59d3024	 ldr         r3, [sp, #0x24]
  00574	e2830080	 add         r0, r3, #0x80
  00578	eb000000	 bl          NdisFreeSpinLock

; 219  : 
; 220  : 		if(pAdapter->m_EmacIRamBase)

  0057c	e59d3024	 ldr         r3, [sp, #0x24]
  00580	e283300c	 add         r3, r3, #0xC
  00584	e5933000	 ldr         r3, [r3]
  00588	e3530000	 cmp         r3, #0
  0058c	0a00000b	 beq         |$LN1@EmacFreeAd|

; 221  : 		{
; 222  : 			NdisMUnmapIoSpace(pAdapter->m_AdapterHandle,
; 223  : 							  (PVOID)pAdapter->m_EmacIRamBase,
; 224  : 							  g_EmacMemLayout.EMAC_TOTAL_MEMORY);

  00590	e59f3078	 ldr         r3, [pc, #0x78]
  00594	e5932010	 ldr         r2, [r3, #0x10]
  00598	e59d3024	 ldr         r3, [sp, #0x24]
  0059c	e283300c	 add         r3, r3, #0xC
  005a0	e5931000	 ldr         r1, [r3]
  005a4	e59d3024	 ldr         r3, [sp, #0x24]
  005a8	e5930000	 ldr         r0, [r3]
  005ac	eb000000	 bl          NdisMUnmapIoSpace

; 225  : 
; 226  : 			pAdapter->m_EmacIRamBase = 0;

  005b0	e59d3024	 ldr         r3, [sp, #0x24]
  005b4	e283200c	 add         r2, r3, #0xC
  005b8	e3a03000	 mov         r3, #0
  005bc	e5823000	 str         r3, [r2]
  005c0		 |$LN1@EmacFreeAd|

; 227  : 		}
; 228  : 
; 229  : 		/* Finally free adapter memory itself  */
; 230  : 		NdisFreeMemory((PVOID)pAdapter,
; 231  : 					sizeof(MINIPORT_ADAPTER),
; 232  : 					0);

  005c0	e3a02000	 mov         r2, #0
  005c4	e3a01e3a	 mov         r1, #0x3A, 28
  005c8	e59d0024	 ldr         r0, [sp, #0x24]
  005cc	eb000000	 bl          NdisFreeMemory
  005d0		 |$LN8@EmacFreeAd|

; 233  : 	}
; 234  : 
; 235  :     DEBUGMSG(DBG_FUNC, (L"<-- EmacFreeAdapter \r\n"));

  005d0	e59f3034	 ldr         r3, [pc, #0x34]
  005d4	e5933440	 ldr         r3, [r3, #0x440]
  005d8	e3130080	 tst         r3, #0x80
  005dc	0a000004	 beq         |$LN25@EmacFreeAd|
  005e0	e59f0020	 ldr         r0, [pc, #0x20]
  005e4	eb000000	 bl          NKDbgPrintfW
  005e8	e3a03001	 mov         r3, #1
  005ec	e58d3018	 str         r3, [sp, #0x18]
  005f0	ea000001	 b           |$LN26@EmacFreeAd|
  005f4		 |$LN25@EmacFreeAd|
  005f4	e3a03000	 mov         r3, #0
  005f8	e58d3018	 str         r3, [sp, #0x18]
  005fc		 |$LN26@EmacFreeAd|

; 236  : }

  005fc	e28dd01c	 add         sp, sp, #0x1C
  00600	e89d6000	 ldmia       sp, {sp, lr}
  00604	e12fff1e	 bx          lr
  00608		 |$LN30@EmacFreeAd|
  00608		 |$LN31@EmacFreeAd|
  00608	00000000	 DCD         |??_C@_1CO@JBHLBOFG@?$AA?$DM?$AA?9?$AA?9?$AA?5?$AAE?$AAm?$AAa?$AAc?$AAF?$AAr?$AAe?$AAe?$AAA?$AAd?$AAa?$AAp?$AAt?$AAe?$AAr?$AA?5?$AA?$AN?$AA?6?$AA?$AA@|
  0060c		 |$LN32@EmacFreeAd|
  0060c	00000000	 DCD         |dpCurSettings|
  00610		 |$LN33@EmacFreeAd|
  00610	00000000	 DCD         |g_EmacMemLayout|
  00614		 |$LN34@EmacFreeAd|
  00614	00000000	 DCD         |??_C@_1CM@EPCLOBPP@?$AA?9?$AA?9?$AA?$DO?$AA?5?$AAE?$AAm?$AAa?$AAc?$AAF?$AAr?$AAe?$AAe?$AAA?$AAd?$AAa?$AAp?$AAt?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@|
  00618		 |$M51799|

			 ENDP  ; |EmacFreeAdapter|

	EXPORT	|??_C@_1HC@GJGDDJAL@?$AAA?$AAd?$AAa?$AAp?$AAt?$AAe?$AAr?$AA?8?$AAs?$AA?5?$AAM?$AAA?$AAC?$AA?5?$AAa?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?5?$AAi?$AAs?$AA?5?$AA?$CF?$AA0?$AA2?$AAX?$AA?3?$AA?$CF?$AA0@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DK@JPGELFIC@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAM?$AAA?$AAC?$AA?5?$AAa?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|EmacReadEEProm|
	IMPORT	|memcpy|
	IMPORT	|KernelIoControl|
	IMPORT	|__security_cookie|
	IMPORT	|__GSHandlerCheck|
	IMPORT	|__security_check_cookie|

  00010			 AREA	 |.pdata|, PDATA
|$T51822| DCD	|$LN6@EmacReadEE|
	DCD	0xc0004904

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HC@GJGDDJAL@?$AAA?$AAd?$AAa?$AAp?$AAt?$AAe?$AAr?$AA?8?$AAs?$AA?5?$AAM?$AAA?$AAC?$AA?5?$AAa?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?5?$AAi?$AAs?$AA?5?$AA?$CF?$AA0?$AA2?$AAX?$AA?3?$AA?$CF?$AA0@| DCB "A"
	DCB	0x0, "d", 0x0, "a", 0x0, "p", 0x0, "t", 0x0, "e", 0x0, "r"
	DCB	0x0, "'", 0x0, "s", 0x0, " ", 0x0, "M", 0x0, "A", 0x0, "C"
	DCB	0x0, " ", 0x0, "a", 0x0, "d", 0x0, "d", 0x0, "r", 0x0, "e"
	DCB	0x0, "s", 0x0, "s", 0x0, " ", 0x0, "i", 0x0, "s", 0x0, " "
	DCB	0x0, "%", 0x0, "0", 0x0, "2", 0x0, "X", 0x0, ":", 0x0, "%"
	DCB	0x0, "0", 0x0, "2", 0x0, "X", 0x0, ":", 0x0, "%", 0x0, "0"
	DCB	0x0, "2", 0x0, "X", 0x0, ":", 0x0, "%", 0x0, "0", 0x0, "2"
	DCB	0x0, "X", 0x0, ":", 0x0, "%", 0x0, "0", 0x0, "2", 0x0, "X"
	DCB	0x0, ":", 0x0, "%", 0x0, "0", 0x0, "2", 0x0, "X", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DK@JPGELFIC@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAM?$AAA?$AAC?$AA?5?$AAa?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?$AN?$AA?6?$AA?$AA@| DCB "F"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "t", 0x0, "o", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "a"
	DCB	0x0, "d", 0x0, " ", 0x0, "M", 0x0, "A", 0x0, "C", 0x0, " "
	DCB	0x0, "a", 0x0, "d", 0x0, "d", 0x0, "r", 0x0, "e", 0x0, "s"
	DCB	0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.xdata|, DATA
|$T51818| DCD	0xffffffd4
; Function compile flags: /Odtp

  00618			 AREA	 |.text|, CODE, ARM

  00618	00000000	 DCD         |__GSHandlerCheck|
  0061c	00000000	 DCD         |$T51818|

  00620		 |EmacReadEEProm| PROC

; 248  : {

  00620		 |$LN6@EmacReadEE|
  00620	e1a0c00d	 mov         r12, sp
  00624	e92d0001	 stmdb       sp!, {r0}
  00628	e92d5000	 stmdb       sp!, {r12, lr}
  0062c	e24dd03c	 sub         sp, sp, #0x3C
  00630		 |$M51819|
  00630	e59f3108	 ldr         r3, [pc, #0x108]
  00634	e5933000	 ldr         r3, [r3]
  00638	e58d301c	 str         r3, [sp, #0x1C]

; 249  :     
; 250  :     BOOL    RetVal = FALSE;

  0063c	e3a03000	 mov         r3, #0
  00640	e58d300c	 str         r3, [sp, #0xC]

; 251  :     UINT8   ReadBuffer[ETH_LENGTH_OF_ADDRESS] = {0x20,0x20,0x30,0x30,0x40,0x40};    

  00644	e3a03020	 mov         r3, #0x20
  00648	e5cd3014	 strb        r3, [sp, #0x14]
  0064c	e3a03020	 mov         r3, #0x20
  00650	e5cd3015	 strb        r3, [sp, #0x15]
  00654	e3a03030	 mov         r3, #0x30
  00658	e5cd3016	 strb        r3, [sp, #0x16]
  0065c	e3a03030	 mov         r3, #0x30
  00660	e5cd3017	 strb        r3, [sp, #0x17]
  00664	e3a03040	 mov         r3, #0x40
  00668	e5cd3018	 strb        r3, [sp, #0x18]
  0066c	e3a03040	 mov         r3, #0x40
  00670	e5cd3019	 strb        r3, [sp, #0x19]

; 252  :     DWORD   dwKernelRet = 0;

  00674	e3a03000	 mov         r3, #0
  00678	e58d3010	 str         r3, [sp, #0x10]

; 253  : 
; 254  :     /* Get the MAC address from the kernel */
; 255  :     if (!KernelIoControl(IOCTL_HAL_GET_MAC_ADDRESS,
; 256  :                          NULL, 0, &ReadBuffer, sizeof(ReadBuffer), &dwKernelRet))

  0067c	e28d3010	 add         r3, sp, #0x10
  00680	e58d3004	 str         r3, [sp, #4]
  00684	e3a03006	 mov         r3, #6
  00688	e58d3000	 str         r3, [sp]
  0068c	e28d3014	 add         r3, sp, #0x14
  00690	e3a02000	 mov         r2, #0
  00694	e3a01000	 mov         r1, #0
  00698	e59f009c	 ldr         r0, [pc, #0x9C]
  0069c	eb000000	 bl          KernelIoControl
  006a0	e58d0038	 str         r0, [sp, #0x38]
  006a4	e59d3038	 ldr         r3, [sp, #0x38]
  006a8	e3530000	 cmp         r3, #0
  006ac	1a000006	 bne         |$LN1@EmacReadEE|

; 257  :     {
; 258  :         RETAILMSG( TRUE,(TEXT("Failed to read MAC address\r\n")));

  006b0	e59f0080	 ldr         r0, [pc, #0x80]
  006b4	eb000000	 bl          NKDbgPrintfW

; 259  :         return RetVal;

  006b8	e59d001c	 ldr         r0, [sp, #0x1C]
  006bc	eb000000	 bl          __security_check_cookie
  006c0	e59d300c	 ldr         r3, [sp, #0xC]
  006c4	e58d3028	 str         r3, [sp, #0x28]
  006c8	ea000015	 b           |$LN2@EmacReadEE|
  006cc		 |$LN1@EmacReadEE|

; 260  :     }
; 261  : 
; 262  :     /* Fill to Adapter structure */
; 263  :     memcpy(pAdapter->m_MACAddress, ReadBuffer, ETH_LENGTH_OF_ADDRESS);

  006cc	e3a02006	 mov         r2, #6
  006d0	e28d1014	 add         r1, sp, #0x14
  006d4	e59d3044	 ldr         r3, [sp, #0x44]
  006d8	e2830014	 add         r0, r3, #0x14
  006dc	eb000000	 bl          memcpy

; 264  : 
; 265  :     RETAILMSG( TRUE,(TEXT("Adapter's MAC address is %02X:%02X:%02X:%02X:%02X:%02X\r\n"),
; 266  :                 ReadBuffer[0], ReadBuffer[1], ReadBuffer[2],
; 267  :                 ReadBuffer[3], ReadBuffer[4], ReadBuffer[5] ));

  006e0	e5dd3019	 ldrb        r3, [sp, #0x19]
  006e4	e58d3008	 str         r3, [sp, #8]
  006e8	e5dd3018	 ldrb        r3, [sp, #0x18]
  006ec	e58d3004	 str         r3, [sp, #4]
  006f0	e5dd3017	 ldrb        r3, [sp, #0x17]
  006f4	e58d3000	 str         r3, [sp]
  006f8	e5dd3016	 ldrb        r3, [sp, #0x16]
  006fc	e5dd2015	 ldrb        r2, [sp, #0x15]
  00700	e5dd1014	 ldrb        r1, [sp, #0x14]
  00704	e59f0028	 ldr         r0, [pc, #0x28]
  00708	eb000000	 bl          NKDbgPrintfW

; 268  :    
; 269  :     RetVal = TRUE;

  0070c	e3a03001	 mov         r3, #1
  00710	e58d300c	 str         r3, [sp, #0xC]

; 270  : 
; 271  :    return (RetVal);

  00714	e59d001c	 ldr         r0, [sp, #0x1C]
  00718	eb000000	 bl          __security_check_cookie
  0071c	e59d300c	 ldr         r3, [sp, #0xC]
  00720	e58d3028	 str         r3, [sp, #0x28]
  00724		 |$LN2@EmacReadEE|

; 272  : }

  00724	e59d0028	 ldr         r0, [sp, #0x28]
  00728	e28dd03c	 add         sp, sp, #0x3C
  0072c	e89d6000	 ldmia       sp, {sp, lr}
  00730	e12fff1e	 bx          lr
  00734		 |$LN7@EmacReadEE|
  00734		 |$LN8@EmacReadEE|
  00734	00000000	 DCD         |??_C@_1HC@GJGDDJAL@?$AAA?$AAd?$AAa?$AAp?$AAt?$AAe?$AAr?$AA?8?$AAs?$AA?5?$AAM?$AAA?$AAC?$AA?5?$AAa?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?5?$AAi?$AAs?$AA?5?$AA?$CF?$AA0?$AA2?$AAX?$AA?3?$AA?$CF?$AA0@|
  00738		 |$LN9@EmacReadEE|
  00738	00000000	 DCD         |??_C@_1DK@JPGELFIC@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAM?$AAA?$AAC?$AA?5?$AAa?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?$AN?$AA?6?$AA?$AA@|
  0073c		 |$LN10@EmacReadEE|
  0073c	01011020	 DCD         0x1011020
  00740		 |$LN11@EmacReadEE|
  00740	00000000	 DCD         |__security_cookie|
  00744		 |$M51820|

			 ENDP  ; |EmacReadEEProm|

	EXPORT	|??_C@_1EI@FJABGIIJ@?$AA?$DM?$AA?9?$AA?9?$AA?5?$AAN?$AAI?$AAC?$AAR?$AAe?$AAa?$AAd?$AAA?$AAd?$AAa?$AAp?$AAt?$AAe?$AAr?$AAI?$AAn?$AAf?$AAo?$AA?0?$AA?5?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?$DN?$AA?$CF@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FG@FDHOACEA@?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAM?$AAA?$AAC?$AA?5?$AAa?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?5?$AAf?$AAr?$AAo?$AAm?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DM@KDDOMENK@?$AAp?$AAA?$AAd?$AAa?$AAp?$AAt?$AAe?$AAr?$AA?9?$AA?$DO?$AAm?$AA_?$AAR?$AAx?$AAB?$AAu?$AAf?$AAs?$AAB?$AAa?$AAs?$AAe?$AAP?$AAa?$AA?$DN?$AA?$CF?$AAp?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DK@NBCNHLBN@?$AAp?$AAA?$AAd?$AAa?$AAp?$AAt?$AAe?$AAr?$AA?9?$AA?$DO?$AAm?$AA_?$AAT?$AAx?$AAB?$AAu?$AAf?$AAB?$AAa?$AAs?$AAe?$AAP?$AAa?$AA?$DN?$AA?$CF?$AAp?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_19ECFIEPNF@?$AAM?$AAI?$AAS?$AAC?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_15NHJLDDPA@?$AAT?$AAX?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_15BMCNAON@?$AAR?$AAX?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DO@FOJHHOKO@?$AAN?$AAd?$AAi?$AAs?$AAO?$AAp?$AAe?$AAn?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DC@OHHKNHMH@?$AA?9?$AA?9?$AA?$DO?$AA?5?$AAN?$AAI?$AAC?$AAR?$AAe?$AAa?$AAd?$AAA?$AAd?$AAa?$AAp?$AAt?$AAe?$AAr?$AAI?$AAn?$AAf?$AAo?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BO@FEBAGMNM@?$AAE?$AAM?$AAA?$AAC?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AAB?$AAa?$AAs?$AAe?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BI@MOLEDANL@?$AAL?$AAi?$AAn?$AAk?$AAI?$AAn?$AAt?$AAr?$AAN?$AAu?$AAm?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BE@HKMHBAIM@?$AAT?$AAx?$AAI?$AAn?$AAt?$AAr?$AAN?$AAu?$AAm?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BE@POOEINFJ@?$AAR?$AAx?$AAI?$AAn?$AAt?$AAr?$AAN?$AAu?$AAm?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BG@JNLHMBE@?$AAE?$AAm?$AAa?$AAc?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|NICReadAdapterInfo|
	IMPORT	|NdisCloseConfiguration|
	IMPORT	|AllocPhysMem|
	IMPORT	|GetIrqByDevice|
	IMPORT	|SOCGetEMACDevice|
	IMPORT	|NdisReadConfiguration|
	IMPORT	|NdisOpenConfiguration|

  00018			 AREA	 |.pdata|, PDATA
|$T51848| DCD	|$LN24@NICReadAda|
	DCD	0x40011b04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EI@FJABGIIJ@?$AA?$DM?$AA?9?$AA?9?$AA?5?$AAN?$AAI?$AAC?$AAR?$AAe?$AAa?$AAd?$AAA?$AAd?$AAa?$AAp?$AAt?$AAe?$AAr?$AAI?$AAn?$AAf?$AAo?$AA?0?$AA?5?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?$DN?$AA?$CF@| DCB "<"
	DCB	0x0, "-", 0x0, "-", 0x0, " ", 0x0, "N", 0x0, "I", 0x0, "C"
	DCB	0x0, "R", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, "A", 0x0, "d"
	DCB	0x0, "a", 0x0, "p", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "I"
	DCB	0x0, "n", 0x0, "f", 0x0, "o", 0x0, ",", 0x0, " ", 0x0, "S"
	DCB	0x0, "t", 0x0, "a", 0x0, "t", 0x0, "u", 0x0, "s", 0x0, "="
	DCB	0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FG@FDHOACEA@?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAM?$AAA?$AAC?$AA?5?$AAa?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?5?$AAf?$AAr?$AAo?$AAm?$AA?5@| DCB "U"
	DCB	0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, " "
	DCB	0x0, "t", 0x0, "o", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "a"
	DCB	0x0, "d", 0x0, " ", 0x0, "M", 0x0, "A", 0x0, "C", 0x0, " "
	DCB	0x0, "a", 0x0, "d", 0x0, "d", 0x0, "r", 0x0, "e", 0x0, "s"
	DCB	0x0, "s", 0x0, " ", 0x0, "f", 0x0, "r", 0x0, "o", 0x0, "m"
	DCB	0x0, " ", 0x0, "A", 0x0, "d", 0x0, "a", 0x0, "p", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, " ", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@KDDOMENK@?$AAp?$AAA?$AAd?$AAa?$AAp?$AAt?$AAe?$AAr?$AA?9?$AA?$DO?$AAm?$AA_?$AAR?$AAx?$AAB?$AAu?$AAf?$AAs?$AAB?$AAa?$AAs?$AAe?$AAP?$AAa?$AA?$DN?$AA?$CF?$AAp?$AA?$AN?$AA?6?$AA?$AA@| DCB "p"
	DCB	0x0, "A", 0x0, "d", 0x0, "a", 0x0, "p", 0x0, "t", 0x0, "e"
	DCB	0x0, "r", 0x0, "-", 0x0, ">", 0x0, "m", 0x0, "_", 0x0, "R"
	DCB	0x0, "x", 0x0, "B", 0x0, "u", 0x0, "f", 0x0, "s", 0x0, "B"
	DCB	0x0, "a", 0x0, "s", 0x0, "e", 0x0, "P", 0x0, "a", 0x0, "="
	DCB	0x0, "%", 0x0, "p", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DK@NBCNHLBN@?$AAp?$AAA?$AAd?$AAa?$AAp?$AAt?$AAe?$AAr?$AA?9?$AA?$DO?$AAm?$AA_?$AAT?$AAx?$AAB?$AAu?$AAf?$AAB?$AAa?$AAs?$AAe?$AAP?$AAa?$AA?$DN?$AA?$CF?$AAp?$AA?$AN?$AA?6?$AA?$AA@| DCB "p"
	DCB	0x0, "A", 0x0, "d", 0x0, "a", 0x0, "p", 0x0, "t", 0x0, "e"
	DCB	0x0, "r", 0x0, "-", 0x0, ">", 0x0, "m", 0x0, "_", 0x0, "T"
	DCB	0x0, "x", 0x0, "B", 0x0, "u", 0x0, "f", 0x0, "B", 0x0, "a"
	DCB	0x0, "s", 0x0, "e", 0x0, "P", 0x0, "a", 0x0, "=", 0x0, "%"
	DCB	0x0, "p", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_19ECFIEPNF@?$AAM?$AAI?$AAS?$AAC?$AA?$AA@| DCB "M", 0x0, "I", 0x0, "S"
	DCB	0x0, "C", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_15NHJLDDPA@?$AAT?$AAX?$AA?$AA@| DCB "T", 0x0, "X", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_15BMCNAON@?$AAR?$AAX?$AA?$AA@| DCB "R", 0x0, "X", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@FOJHHOKO@?$AAN?$AAd?$AAi?$AAs?$AAO?$AAp?$AAe?$AAn?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "N"
	DCB	0x0, "d", 0x0, "i", 0x0, "s", 0x0, "O", 0x0, "p", 0x0, "e"
	DCB	0x0, "n", 0x0, "C", 0x0, "o", 0x0, "n", 0x0, "f", 0x0, "i"
	DCB	0x0, "g", 0x0, "u", 0x0, "r", 0x0, "a", 0x0, "t", 0x0, "i"
	DCB	0x0, "o", 0x0, "n", 0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DC@OHHKNHMH@?$AA?9?$AA?9?$AA?$DO?$AA?5?$AAN?$AAI?$AAC?$AAR?$AAe?$AAa?$AAd?$AAA?$AAd?$AAa?$AAp?$AAt?$AAe?$AAr?$AAI?$AAn?$AAf?$AAo?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "-", 0x0, ">", 0x0, " ", 0x0, "N", 0x0, "I", 0x0, "C"
	DCB	0x0, "R", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, "A", 0x0, "d"
	DCB	0x0, "a", 0x0, "p", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "I"
	DCB	0x0, "n", 0x0, "f", 0x0, "o", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@FEBAGMNM@?$AAE?$AAM?$AAA?$AAC?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AAB?$AAa?$AAs?$AAe?$AA?$AA@| DCB "E"
	DCB	0x0, "M", 0x0, "A", 0x0, "C", 0x0, "B", 0x0, "u", 0x0, "f"
	DCB	0x0, "f", 0x0, "e", 0x0, "r", 0x0, "B", 0x0, "a", 0x0, "s"
	DCB	0x0, "e", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BI@MOLEDANL@?$AAL?$AAi?$AAn?$AAk?$AAI?$AAn?$AAt?$AAr?$AAN?$AAu?$AAm?$AA?$AA@| DCB "L"
	DCB	0x0, "i", 0x0, "n", 0x0, "k", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "r", 0x0, "N", 0x0, "u", 0x0, "m", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BE@HKMHBAIM@?$AAT?$AAx?$AAI?$AAn?$AAt?$AAr?$AAN?$AAu?$AAm?$AA?$AA@| DCB "T"
	DCB	0x0, "x", 0x0, "I", 0x0, "n", 0x0, "t", 0x0, "r", 0x0, "N"
	DCB	0x0, "u", 0x0, "m", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BE@POOEINFJ@?$AAR?$AAx?$AAI?$AAn?$AAt?$AAr?$AAN?$AAu?$AAm?$AA?$AA@| DCB "R"
	DCB	0x0, "x", 0x0, "I", 0x0, "n", 0x0, "t", 0x0, "r", 0x0, "N"
	DCB	0x0, "u", 0x0, "m", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BG@JNLHMBE@?$AAE?$AAm?$AAa?$AAc?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?$AA@| DCB "E"
	DCB	0x0, "m", 0x0, "a", 0x0, "c", 0x0, "D", 0x0, "e", 0x0, "v"
	DCB	0x0, "i", 0x0, "c", 0x0, "e", 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  00744			 AREA	 |.text|, CODE, ARM

  00744		 |NICReadAdapterInfo| PROC

; 287  : {

  00744		 |$LN24@NICReadAda|
  00744	e1a0c00d	 mov         r12, sp
  00748	e92d0003	 stmdb       sp!, {r0, r1}
  0074c	e92d5000	 stmdb       sp!, {r12, lr}
  00750	e24dd08c	 sub         sp, sp, #0x8C
  00754		 |$M51845|

; 288  :     DWORD                               phys = 0;

  00754	e3a03000	 mov         r3, #0
  00758	e58d3034	 str         r3, [sp, #0x34]

; 289  :     DWORD                               dwEmacIndex = 0;

  0075c	e3a03000	 mov         r3, #0
  00760	e58d302c	 str         r3, [sp, #0x2C]

; 290  :     NDIS_STATUS                         Status = NDIS_STATUS_SUCCESS;

  00764	e3a03000	 mov         r3, #0
  00768	e58d3030	 str         r3, [sp, #0x30]

; 291  :     NDIS_HANDLE                         ConfigurationHandle;
; 292  :     PNDIS_CONFIGURATION_PARAMETER       pReturnedValue;
; 293  :     NDIS_STRING                         EmacDeviceRegName = NDIS_STRING_CONST("EmacDevice");

  0076c	e3a03014	 mov         r3, #0x14
  00770	e1cd31b0	 strh        r3, [sp, #0x10]
  00774	e3a03016	 mov         r3, #0x16
  00778	e1cd31b2	 strh        r3, [sp, #0x12]
  0077c	e59f3428	 ldr         r3, [pc, #0x428]
  00780	e58d3014	 str         r3, [sp, #0x14]

; 294  :     NDIS_STRING                         RxIntRegName = NDIS_STRING_CONST("RxIntrNum");

  00784	e3a03012	 mov         r3, #0x12
  00788	e1cd30b8	 strh        r3, [sp, #8]
  0078c	e3a03014	 mov         r3, #0x14
  00790	e1cd30ba	 strh        r3, [sp, #0xA]
  00794	e59f340c	 ldr         r3, [pc, #0x40C]
  00798	e58d300c	 str         r3, [sp, #0xC]

; 295  :     NDIS_STRING                         TxIntRegName = NDIS_STRING_CONST("TxIntrNum");

  0079c	e3a03012	 mov         r3, #0x12
  007a0	e1cd31bc	 strh        r3, [sp, #0x1C]
  007a4	e3a03014	 mov         r3, #0x14
  007a8	e1cd31be	 strh        r3, [sp, #0x1E]
  007ac	e59f33f0	 ldr         r3, [pc, #0x3F0]
  007b0	e58d3020	 str         r3, [sp, #0x20]

; 296  :     NDIS_STRING                         LinkIntRegName = NDIS_STRING_CONST("LinkIntrNum");

  007b4	e3a03016	 mov         r3, #0x16
  007b8	e1cd33b8	 strh        r3, [sp, #0x38]
  007bc	e3a03018	 mov         r3, #0x18
  007c0	e1cd33ba	 strh        r3, [sp, #0x3A]
  007c4	e59f33d4	 ldr         r3, [pc, #0x3D4]
  007c8	e58d303c	 str         r3, [sp, #0x3C]

; 297  :     NDIS_STRING                         PhysBufRegName = NDIS_STRING_CONST("EMACBufferBase");

  007cc	e3a0301c	 mov         r3, #0x1C
  007d0	e1cd32b4	 strh        r3, [sp, #0x24]
  007d4	e3a0301e	 mov         r3, #0x1E
  007d8	e1cd32b6	 strh        r3, [sp, #0x26]
  007dc	e59f33b8	 ldr         r3, [pc, #0x3B8]
  007e0	e58d3028	 str         r3, [sp, #0x28]

; 298  : 
; 299  :     DEBUGMSG(DBG_FUNC, (L"--> NICReadAdapterInfo\r\n"));

  007e4	e59f338c	 ldr         r3, [pc, #0x38C]
  007e8	e5933440	 ldr         r3, [r3, #0x440]
  007ec	e3130080	 tst         r3, #0x80
  007f0	0a000004	 beq         |$LN10@NICReadAda|
  007f4	e59f039c	 ldr         r0, [pc, #0x39C]
  007f8	eb000000	 bl          NKDbgPrintfW
  007fc	e3a03001	 mov         r3, #1
  00800	e58d3054	 str         r3, [sp, #0x54]
  00804	ea000001	 b           |$LN11@NICReadAda|
  00808		 |$LN10@NICReadAda|
  00808	e3a03000	 mov         r3, #0
  0080c	e58d3054	 str         r3, [sp, #0x54]
  00810		 |$LN11@NICReadAda|

; 300  : 
; 301  :     /* Open the registry for this adapter */
; 302  :     NdisOpenConfiguration(
; 303  :         &Status,
; 304  :         &ConfigurationHandle,
; 305  :         WrapperConfigurationContext);

  00810	e59d2098	 ldr         r2, [sp, #0x98]
  00814	e28d1004	 add         r1, sp, #4
  00818	e28d0030	 add         r0, sp, #0x30
  0081c	eb000000	 bl          NdisOpenConfiguration

; 306  : 
; 307  :     if (Status != NDIS_STATUS_SUCCESS)

  00820	e59d3030	 ldr         r3, [sp, #0x30]
  00824	e3530000	 cmp         r3, #0
  00828	0a00000d	 beq         |$LN7@NICReadAda|

; 308  :     {
; 309  :         DEBUGMSG(DBG_WARN, (L"NdisOpenConfiguration failed\r\n"));

  0082c	e59f3344	 ldr         r3, [pc, #0x344]
  00830	e5933440	 ldr         r3, [r3, #0x440]
  00834	e3130901	 tst         r3, #1, 18
  00838	0a000004	 beq         |$LN12@NICReadAda|
  0083c	e59f0350	 ldr         r0, [pc, #0x350]
  00840	eb000000	 bl          NKDbgPrintfW
  00844	e3a03001	 mov         r3, #1
  00848	e58d3058	 str         r3, [sp, #0x58]
  0084c	ea000001	 b           |$LN13@NICReadAda|
  00850		 |$LN12@NICReadAda|
  00850	e3a03000	 mov         r3, #0
  00854	e58d3058	 str         r3, [sp, #0x58]
  00858		 |$LN13@NICReadAda|

; 310  :         return Status;

  00858	e59d3030	 ldr         r3, [sp, #0x30]
  0085c	e58d3044	 str         r3, [sp, #0x44]
  00860	ea0000bf	 b           |$LN8@NICReadAda|
  00864		 |$LN7@NICReadAda|

; 311  :     }
; 312  :  
; 313  :     /* Get the configuration value for a specific parameter for EMAC device number */    
; 314  :     NdisReadConfiguration(&Status, &pReturnedValue, ConfigurationHandle,
; 315  :                           &EmacDeviceRegName, NdisParameterInteger);

  00864	e3a03000	 mov         r3, #0
  00868	e58d3000	 str         r3, [sp]
  0086c	e28d3010	 add         r3, sp, #0x10
  00870	e59d2004	 ldr         r2, [sp, #4]
  00874	e28d1018	 add         r1, sp, #0x18
  00878	e28d0030	 add         r0, sp, #0x30
  0087c	eb000000	 bl          NdisReadConfiguration

; 316  :     if (Status == NDIS_STATUS_SUCCESS)

  00880	e59d3030	 ldr         r3, [sp, #0x30]
  00884	e3530000	 cmp         r3, #0
  00888	1a000003	 bne         |$LN6@NICReadAda|

; 317  :     {        
; 318  :         dwEmacIndex = pReturnedValue->ParameterData.IntegerData;

  0088c	e59d3018	 ldr         r3, [sp, #0x18]
  00890	e2833004	 add         r3, r3, #4
  00894	e5933000	 ldr         r3, [r3]
  00898	e58d302c	 str         r3, [sp, #0x2C]
  0089c		 |$LN6@NICReadAda|

; 319  :     }
; 320  :     pAdapter->m_device = SOCGetEMACDevice(dwEmacIndex);

  0089c	e59d002c	 ldr         r0, [sp, #0x2C]
  008a0	eb000000	 bl          SOCGetEMACDevice
  008a4	e58d005c	 str         r0, [sp, #0x5C]
  008a8	e59d3094	 ldr         r3, [sp, #0x94]
  008ac	e2832094	 add         r2, r3, #0x94
  008b0	e59d305c	 ldr         r3, [sp, #0x5C]
  008b4	e5823000	 str         r3, [r2]

; 321  : 
; 322  : #if 0
; 323  :     /* Get the configuration value for a specific parameter for Interrupt number */
; 324  :     NdisReadConfiguration(&Status, &pReturnedValue, ConfigurationHandle,
; 325  :                           &RxIntRegName, NdisParameterInteger);
; 326  : 
; 327  :     if (Status != NDIS_STATUS_SUCCESS)
; 328  :     {
; 329  :         ERRORMSG(TRUE, (L"Failed to read Interrupt number for EMAC.\r\n"));
; 330  :         return Status;
; 331  :     }
; 332  :     else
; 333  :     {
; 334  :         RETAILMSG(FALSE, (L"NICReadAdapterInfo: Successfull read Int no.\r\n"));
; 335  :     }
; 336  : 
; 337  :      /* Populate the interrupt vector */
; 338  :     pAdapter->m_RxIntrVector = (USHORT)pReturnedValue->ParameterData.IntegerData;
; 339  :     
; 340  :     NdisReadConfiguration(&Status, &pReturnedValue, ConfigurationHandle,
; 341  :                           &TxIntRegName, NdisParameterInteger);
; 342  : 
; 343  :     if (Status != NDIS_STATUS_SUCCESS)
; 344  :     {
; 345  :         ERRORMSG(TRUE, (L"Failed to read Interrupt number for EMAC.\r\n"));
; 346  :         return Status;
; 347  :     }
; 348  :     else
; 349  :     {
; 350  :         RETAILMSG(FALSE, (L"NICReadAdapterInfo: Successfull read Int no.\r\n"));
; 351  :     }
; 352  : 
; 353  :      /* Populate the interrupt vector */
; 354  :     pAdapter->m_TxIntrVector = (USHORT)pReturnedValue->ParameterData.IntegerData;
; 355  :     
; 356  :     NdisReadConfiguration(&Status, &pReturnedValue, ConfigurationHandle,
; 357  :                           &LinkIntRegName, NdisParameterInteger);
; 358  : 
; 359  :     if (Status != NDIS_STATUS_SUCCESS)
; 360  :     {
; 361  :         ERRORMSG(TRUE, (L"Failed to read Interrupt number for EMAC.\r\n"));
; 362  :         return Status;
; 363  :     }
; 364  :     else
; 365  :     {
; 366  :         RETAILMSG(FALSE, (L"NICReadAdapterInfo: Successfull read Int no.\r\n"));
; 367  :     }
; 368  : 
; 369  :      /* Populate the interrupt vector */
; 370  :     pAdapter->m_LinkIntrVector = (USHORT)pReturnedValue->ParameterData.IntegerData;
; 371  : #else
; 372  :     pAdapter->m_RxIntrVector = (USHORT) GetIrqByDevice(pAdapter->m_device,L"RX");

  008b8	e59f12d0	 ldr         r1, [pc, #0x2D0]
  008bc	e59d3094	 ldr         r3, [sp, #0x94]
  008c0	e2833094	 add         r3, r3, #0x94
  008c4	e5930000	 ldr         r0, [r3]
  008c8	eb000000	 bl          GetIrqByDevice
  008cc	e58d0060	 str         r0, [sp, #0x60]
  008d0	e59d3060	 ldr         r3, [sp, #0x60]
  008d4	e1a02803	 mov         r2, r3, lsl #16
  008d8	e1a02822	 mov         r2, r2, lsr #16
  008dc	e59d3094	 ldr         r3, [sp, #0x94]
  008e0	e28330e8	 add         r3, r3, #0xE8
  008e4	e1c320b0	 strh        r2, [r3]

; 373  :     pAdapter->m_TxIntrVector = (USHORT) GetIrqByDevice(pAdapter->m_device,L"TX");

  008e8	e59f129c	 ldr         r1, [pc, #0x29C]
  008ec	e59d3094	 ldr         r3, [sp, #0x94]
  008f0	e2833094	 add         r3, r3, #0x94
  008f4	e5930000	 ldr         r0, [r3]
  008f8	eb000000	 bl          GetIrqByDevice
  008fc	e58d0064	 str         r0, [sp, #0x64]
  00900	e59d3064	 ldr         r3, [sp, #0x64]
  00904	e1a02803	 mov         r2, r3, lsl #16
  00908	e1a02822	 mov         r2, r2, lsr #16
  0090c	e59d3094	 ldr         r3, [sp, #0x94]
  00910	e2833f4f	 add         r3, r3, #0x4F, 30
  00914	e1c320b0	 strh        r2, [r3]

; 374  :     pAdapter->m_LinkIntrVector = (USHORT) GetIrqByDevice(pAdapter->m_device,L"MISC");

  00918	e59f1268	 ldr         r1, [pc, #0x268]
  0091c	e59d3094	 ldr         r3, [sp, #0x94]
  00920	e2833094	 add         r3, r3, #0x94
  00924	e5930000	 ldr         r0, [r3]
  00928	eb000000	 bl          GetIrqByDevice
  0092c	e58d0068	 str         r0, [sp, #0x68]
  00930	e59d3068	 ldr         r3, [sp, #0x68]
  00934	e1a02803	 mov         r2, r3, lsl #16
  00938	e1a02822	 mov         r2, r2, lsr #16
  0093c	e59d3094	 ldr         r3, [sp, #0x94]
  00940	e2833e19	 add         r3, r3, #0x19, 28
  00944	e1c320b0	 strh        r2, [r3]

; 375  : #endif
; 376  : 
; 377  :     /* Get the configuration value for a specific parameter for physical buffers */
; 378  :     NdisReadConfiguration(&Status, &pReturnedValue, ConfigurationHandle,
; 379  :                           &PhysBufRegName, NdisParameterInteger);

  00948	e3a03000	 mov         r3, #0
  0094c	e58d3000	 str         r3, [sp]
  00950	e28d3024	 add         r3, sp, #0x24
  00954	e59d2004	 ldr         r2, [sp, #4]
  00958	e28d1018	 add         r1, sp, #0x18
  0095c	e28d0030	 add         r0, sp, #0x30
  00960	eb000000	 bl          NdisReadConfiguration

; 380  : 
; 381  :     if (Status != NDIS_STATUS_SUCCESS)

  00964	e59d3030	 ldr         r3, [sp, #0x30]
  00968	e3530000	 cmp         r3, #0
  0096c	0a000011	 beq         |$LN5@NICReadAda|

; 382  :     {
; 383  :         PVOID* pv = NULL;        

  00970	e3a03000	 mov         r3, #0
  00974	e58d3040	 str         r3, [sp, #0x40]

; 384  : 
; 385  :         // TODO : Currently hardcoded, should be replace with a real computation
; 386  :         pv = AllocPhysMem(768*1024, PAGE_READWRITE, 0, 0,&phys);

  00978	e28d3034	 add         r3, sp, #0x34
  0097c	e58d3000	 str         r3, [sp]
  00980	e3a03000	 mov         r3, #0
  00984	e3a02000	 mov         r2, #0
  00988	e3a01004	 mov         r1, #4
  0098c	e3a00703	 mov         r0, #3, 14
  00990	eb000000	 bl          AllocPhysMem
  00994	e58d006c	 str         r0, [sp, #0x6C]
  00998	e59d306c	 ldr         r3, [sp, #0x6C]
  0099c	e58d3040	 str         r3, [sp, #0x40]

; 387  :         if (pv)

  009a0	e59d3040	 ldr         r3, [sp, #0x40]
  009a4	e3530000	 cmp         r3, #0
  009a8	0a000001	 beq         |$LN4@NICReadAda|

; 388  :         {                
; 389  :             RETAILMSG(FALSE, (L"NICReadAdapterInfo: Allocated Buffers 0x%X.\r\n", (DWORD) phys));
; 390  :             Status = NDIS_STATUS_SUCCESS;

  009ac	e3a03000	 mov         r3, #0
  009b0	e58d3030	 str         r3, [sp, #0x30]
  009b4		 |$LN4@NICReadAda|

; 391  :         }
; 392  :         else
; 393  :         {
; 394  :             RETAILMSG(FALSE, (L"NICReadAdapterInfo:Unable to get physicall buffers\r\n"));
; 395  :         }
; 396  :     }
; 397  :     else

  009b4	ea000003	 b           |$LN2@NICReadAda|
  009b8		 |$LN5@NICReadAda|

; 398  :     {
; 399  :         RETAILMSG(FALSE, (L"NICReadAdapterInfo: Successfull read phys base as 0x%X.\r\n",
; 400  :                          (DWORD) pReturnedValue->ParameterData.IntegerData));
; 401  :         phys = (DWORD) pReturnedValue->ParameterData.IntegerData;

  009b8	e59d3018	 ldr         r3, [sp, #0x18]
  009bc	e2833004	 add         r3, r3, #4
  009c0	e5933000	 ldr         r3, [r3]
  009c4	e58d3034	 str         r3, [sp, #0x34]
  009c8		 |$LN2@NICReadAda|

; 402  :     }
; 403  : 
; 404  :     /* Populate the local structures with the Buffer base read from registry */
; 405  :     NdisSetPhysicalAddressLow (pAdapter->m_RxBufsBasePa,
; 406  :                                phys);

  009c8	e59d3094	 ldr         r3, [sp, #0x94]
  009cc	e2832040	 add         r2, r3, #0x40
  009d0	e59d3034	 ldr         r3, [sp, #0x34]
  009d4	e5823000	 str         r3, [r2]

; 407  :     NdisSetPhysicalAddressHigh (pAdapter->m_RxBufsBasePa, 0);

  009d8	e59d3094	 ldr         r3, [sp, #0x94]
  009dc	e2832044	 add         r2, r3, #0x44
  009e0	e3a03000	 mov         r3, #0
  009e4	e5823000	 str         r3, [r2]

; 408  : 
; 409  :     NdisSetPhysicalAddressLow (pAdapter->m_TxBufBasePa,
; 410  :                                (phys +
; 411  :                                 (EMAC_MAX_RXBUF_DESCS * (EMAC_MAX_PKT_BUFFER_SIZE))));

  009e8	e59d3034	 ldr         r3, [sp, #0x34]
  009ec	e2832806	 add         r2, r3, #6, 16
  009f0	e59d3094	 ldr         r3, [sp, #0x94]
  009f4	e2833050	 add         r3, r3, #0x50
  009f8	e5832000	 str         r2, [r3]

; 412  :     NdisSetPhysicalAddressHigh (pAdapter->m_TxBufBasePa, 0);

  009fc	e59d3094	 ldr         r3, [sp, #0x94]
  00a00	e2832054	 add         r2, r3, #0x54
  00a04	e3a03000	 mov         r3, #0
  00a08	e5823000	 str         r3, [r2]

; 413  : 
; 414  :     DEBUGMSG(DBG_FUNC, (L"pAdapter->m_TxBufBasePa=%p\r\n", pAdapter->m_TxBufBasePa));

  00a0c	e59f3164	 ldr         r3, [pc, #0x164]
  00a10	e5933440	 ldr         r3, [r3, #0x440]
  00a14	e3130080	 tst         r3, #0x80
  00a18	0a00000a	 beq         |$LN14@NICReadAda|
  00a1c	e59d3094	 ldr         r3, [sp, #0x94]
  00a20	e2833050	 add         r3, r3, #0x50
  00a24	e58d3070	 str         r3, [sp, #0x70]
  00a28	e59d3070	 ldr         r3, [sp, #0x70]
  00a2c	e5931000	 ldr         r1, [r3]
  00a30	e5932004	 ldr         r2, [r3, #4]
  00a34	e59f0148	 ldr         r0, [pc, #0x148]
  00a38	eb000000	 bl          NKDbgPrintfW
  00a3c	e3a03001	 mov         r3, #1
  00a40	e58d3074	 str         r3, [sp, #0x74]
  00a44	ea000001	 b           |$LN15@NICReadAda|
  00a48		 |$LN14@NICReadAda|
  00a48	e3a03000	 mov         r3, #0
  00a4c	e58d3074	 str         r3, [sp, #0x74]
  00a50		 |$LN15@NICReadAda|

; 415  :     DEBUGMSG(DBG_FUNC, (L"pAdapter->m_RxBufsBasePa=%p\r\n", pAdapter->m_RxBufsBasePa));

  00a50	e59f3120	 ldr         r3, [pc, #0x120]
  00a54	e5933440	 ldr         r3, [r3, #0x440]
  00a58	e3130080	 tst         r3, #0x80
  00a5c	0a00000a	 beq         |$LN16@NICReadAda|
  00a60	e59d3094	 ldr         r3, [sp, #0x94]
  00a64	e2833040	 add         r3, r3, #0x40
  00a68	e58d3078	 str         r3, [sp, #0x78]
  00a6c	e59d3078	 ldr         r3, [sp, #0x78]
  00a70	e5931000	 ldr         r1, [r3]
  00a74	e5932004	 ldr         r2, [r3, #4]
  00a78	e59f0100	 ldr         r0, [pc, #0x100]
  00a7c	eb000000	 bl          NKDbgPrintfW
  00a80	e3a03001	 mov         r3, #1
  00a84	e58d307c	 str         r3, [sp, #0x7C]
  00a88	ea000001	 b           |$LN17@NICReadAda|
  00a8c		 |$LN16@NICReadAda|
  00a8c	e3a03000	 mov         r3, #0
  00a90	e58d307c	 str         r3, [sp, #0x7C]
  00a94		 |$LN17@NICReadAda|

; 416  : 
; 417  :      /* Close the registry */
; 418  :     NdisCloseConfiguration(ConfigurationHandle);

  00a94	e59d0004	 ldr         r0, [sp, #4]
  00a98	eb000000	 bl          NdisCloseConfiguration

; 419  : 
; 420  :     /* Read MAC information stored in EEPROM */
; 421  : 
; 422  :     if(FALSE == EmacReadEEProm (pAdapter))

  00a9c	e59d0094	 ldr         r0, [sp, #0x94]
  00aa0	eb000000	 bl          EmacReadEEProm
  00aa4	e58d0080	 str         r0, [sp, #0x80]
  00aa8	e59d3080	 ldr         r3, [sp, #0x80]
  00aac	e3530000	 cmp         r3, #0
  00ab0	1a00000d	 bne         |$LN1@NICReadAda|

; 423  :     {
; 424  :         DEBUGMSG(DBG_FUNC, (L"Unable to read MAC address from Adapter \r\n"));

  00ab4	e59f30bc	 ldr         r3, [pc, #0xBC]
  00ab8	e5933440	 ldr         r3, [r3, #0x440]
  00abc	e3130080	 tst         r3, #0x80
  00ac0	0a000004	 beq         |$LN18@NICReadAda|
  00ac4	e59f00b0	 ldr         r0, [pc, #0xB0]
  00ac8	eb000000	 bl          NKDbgPrintfW
  00acc	e3a03001	 mov         r3, #1
  00ad0	e58d3084	 str         r3, [sp, #0x84]
  00ad4	ea000001	 b           |$LN19@NICReadAda|
  00ad8		 |$LN18@NICReadAda|
  00ad8	e3a03000	 mov         r3, #0
  00adc	e58d3084	 str         r3, [sp, #0x84]
  00ae0		 |$LN19@NICReadAda|

; 425  :         return (NDIS_STATUS_FAILURE);

  00ae0	e3a03107	 mov         r3, #7, 2
  00ae4	e58d3044	 str         r3, [sp, #0x44]
  00ae8	ea00001d	 b           |$LN8@NICReadAda|
  00aec		 |$LN1@NICReadAda|

; 426  :     }
; 427  : 
; 428  :     /* Filling Rx information */
; 429  :     pAdapter->m_NumEmacRxBufDesc        =  EMAC_MAX_RXBUF_DESCS;

  00aec	e59d3094	 ldr         r3, [sp, #0x94]
  00af0	e2832026	 add         r2, r3, #0x26
  00af4	e3a03c01	 mov         r3, #1, 24
  00af8	e1c230b0	 strh        r3, [r2]

; 430  :     pAdapter->m_NumRxIndicatePkts       =  NDIS_INDICATE_PKTS;

  00afc	e59d3094	 ldr         r3, [sp, #0x94]
  00b00	e2832024	 add         r2, r3, #0x24
  00b04	e3a03c01	 mov         r3, #1, 24
  00b08	e1c230b0	 strh        r3, [r2]

; 431  : 
; 432  :     /* Filling Tx information */
; 433  :     pAdapter->m_MaxPacketPerTransmit    = MAX_NUM_PACKETS_PER_SEND;

  00b0c	e59d3094	 ldr         r3, [sp, #0x94]
  00b10	e2832028	 add         r2, r3, #0x28
  00b14	e3a03c01	 mov         r3, #1, 24
  00b18	e1c230b0	 strh        r3, [r2]

; 434  :     pAdapter->m_MaxTxEmacBufs           = EMAC_MAX_TXBUF_DESCS;

  00b1c	e59d3094	 ldr         r3, [sp, #0x94]
  00b20	e283202a	 add         r2, r3, #0x2A
  00b24	e3a03c01	 mov         r3, #1, 24
  00b28	e1c230b0	 strh        r3, [r2]

; 435  : 
; 436  : 
; 437  :     DEBUGMSG(DBG_FUNC, (L"<-- NICReadAdapterInfo, Status=%x\r\n", Status));

  00b2c	e59f3044	 ldr         r3, [pc, #0x44]
  00b30	e5933440	 ldr         r3, [r3, #0x440]
  00b34	e3130080	 tst         r3, #0x80
  00b38	0a000005	 beq         |$LN20@NICReadAda|
  00b3c	e59d1030	 ldr         r1, [sp, #0x30]
  00b40	e59f002c	 ldr         r0, [pc, #0x2C]
  00b44	eb000000	 bl          NKDbgPrintfW
  00b48	e3a03001	 mov         r3, #1
  00b4c	e58d3088	 str         r3, [sp, #0x88]
  00b50	ea000001	 b           |$LN21@NICReadAda|
  00b54		 |$LN20@NICReadAda|
  00b54	e3a03000	 mov         r3, #0
  00b58	e58d3088	 str         r3, [sp, #0x88]
  00b5c		 |$LN21@NICReadAda|

; 438  : 
; 439  :     return (Status);

  00b5c	e59d3030	 ldr         r3, [sp, #0x30]
  00b60	e58d3044	 str         r3, [sp, #0x44]
  00b64		 |$LN8@NICReadAda|

; 440  : }

  00b64	e59d0044	 ldr         r0, [sp, #0x44]
  00b68	e28dd08c	 add         sp, sp, #0x8C
  00b6c	e89d6000	 ldmia       sp, {sp, lr}
  00b70	e12fff1e	 bx          lr
  00b74		 |$LN25@NICReadAda|
  00b74		 |$LN26@NICReadAda|
  00b74	00000000	 DCD         |??_C@_1EI@FJABGIIJ@?$AA?$DM?$AA?9?$AA?9?$AA?5?$AAN?$AAI?$AAC?$AAR?$AAe?$AAa?$AAd?$AAA?$AAd?$AAa?$AAp?$AAt?$AAe?$AAr?$AAI?$AAn?$AAf?$AAo?$AA?0?$AA?5?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?$DN?$AA?$CF@|
  00b78		 |$LN27@NICReadAda|
  00b78	00000000	 DCD         |dpCurSettings|
  00b7c		 |$LN28@NICReadAda|
  00b7c	00000000	 DCD         |??_C@_1FG@FDHOACEA@?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAM?$AAA?$AAC?$AA?5?$AAa?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?5?$AAf?$AAr?$AAo?$AAm?$AA?5@|
  00b80		 |$LN29@NICReadAda|
  00b80	00000000	 DCD         |??_C@_1DM@KDDOMENK@?$AAp?$AAA?$AAd?$AAa?$AAp?$AAt?$AAe?$AAr?$AA?9?$AA?$DO?$AAm?$AA_?$AAR?$AAx?$AAB?$AAu?$AAf?$AAs?$AAB?$AAa?$AAs?$AAe?$AAP?$AAa?$AA?$DN?$AA?$CF?$AAp?$AA?$AN?$AA?6?$AA?$AA@|
  00b84		 |$LN30@NICReadAda|
  00b84	00000000	 DCD         |??_C@_1DK@NBCNHLBN@?$AAp?$AAA?$AAd?$AAa?$AAp?$AAt?$AAe?$AAr?$AA?9?$AA?$DO?$AAm?$AA_?$AAT?$AAx?$AAB?$AAu?$AAf?$AAB?$AAa?$AAs?$AAe?$AAP?$AAa?$AA?$DN?$AA?$CF?$AAp?$AA?$AN?$AA?6?$AA?$AA@|
  00b88		 |$LN31@NICReadAda|
  00b88	00000000	 DCD         |??_C@_19ECFIEPNF@?$AAM?$AAI?$AAS?$AAC?$AA?$AA@|
  00b8c		 |$LN32@NICReadAda|
  00b8c	00000000	 DCD         |??_C@_15NHJLDDPA@?$AAT?$AAX?$AA?$AA@|
  00b90		 |$LN33@NICReadAda|
  00b90	00000000	 DCD         |??_C@_15BMCNAON@?$AAR?$AAX?$AA?$AA@|
  00b94		 |$LN34@NICReadAda|
  00b94	00000000	 DCD         |??_C@_1DO@FOJHHOKO@?$AAN?$AAd?$AAi?$AAs?$AAO?$AAp?$AAe?$AAn?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  00b98		 |$LN35@NICReadAda|
  00b98	00000000	 DCD         |??_C@_1DC@OHHKNHMH@?$AA?9?$AA?9?$AA?$DO?$AA?5?$AAN?$AAI?$AAC?$AAR?$AAe?$AAa?$AAd?$AAA?$AAd?$AAa?$AAp?$AAt?$AAe?$AAr?$AAI?$AAn?$AAf?$AAo?$AA?$AN?$AA?6?$AA?$AA@|
  00b9c		 |$LN36@NICReadAda|
  00b9c	00000000	 DCD         |??_C@_1BO@FEBAGMNM@?$AAE?$AAM?$AAA?$AAC?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AAB?$AAa?$AAs?$AAe?$AA?$AA@|
  00ba0		 |$LN37@NICReadAda|
  00ba0	00000000	 DCD         |??_C@_1BI@MOLEDANL@?$AAL?$AAi?$AAn?$AAk?$AAI?$AAn?$AAt?$AAr?$AAN?$AAu?$AAm?$AA?$AA@|
  00ba4		 |$LN38@NICReadAda|
  00ba4	00000000	 DCD         |??_C@_1BE@HKMHBAIM@?$AAT?$AAx?$AAI?$AAn?$AAt?$AAr?$AAN?$AAu?$AAm?$AA?$AA@|
  00ba8		 |$LN39@NICReadAda|
  00ba8	00000000	 DCD         |??_C@_1BE@POOEINFJ@?$AAR?$AAx?$AAI?$AAn?$AAt?$AAr?$AAN?$AAu?$AAm?$AA?$AA@|
  00bac		 |$LN40@NICReadAda|
  00bac	00000000	 DCD         |??_C@_1BG@JNLHMBE@?$AAE?$AAm?$AAa?$AAc?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?$AA@|
  00bb0		 |$M51846|

			 ENDP  ; |NICReadAdapterInfo|

	EXPORT	|NICSelfTest|

  00020			 AREA	 |.pdata|, PDATA
|$T51870| DCD	|$LN5@NICSelfTes|
	DCD	0x40000a04
; Function compile flags: /Odtp

  00bb0			 AREA	 |.text|, CODE, ARM

  00bb0		 |NICSelfTest| PROC

; 452  : {

  00bb0		 |$LN5@NICSelfTes|
  00bb0	e1a0c00d	 mov         r12, sp
  00bb4	e92d0001	 stmdb       sp!, {r0}
  00bb8	e92d5000	 stmdb       sp!, {r12, lr}
  00bbc	e24dd004	 sub         sp, sp, #4
  00bc0		 |$M51867|

; 453  :     /* TBD */
; 454  : 
; 455  :     return (NDIS_STATUS_SUCCESS);

  00bc0	e3a03000	 mov         r3, #0
  00bc4	e58d3000	 str         r3, [sp]

; 456  : }

  00bc8	e59d0000	 ldr         r0, [sp]
  00bcc	e28dd004	 add         sp, sp, #4
  00bd0	e89d6000	 ldmia       sp, {sp, lr}
  00bd4	e12fff1e	 bx          lr
  00bd8		 |$M51868|

			 ENDP  ; |NICSelfTest|

	EXPORT	|??_C@_1DO@EHFELICI@?$AA?$DM?$AA?9?$AA?9?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GE@FFCPNAMA@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?3?$AA?5?$AAN?$AAI?$AAC?$AAS?$AAe?$AAl?$AAf@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HG@FLMCAIKK@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?3?$AA?5?$AAN?$AAI?$AAC?$AAI?$AAn?$AAi?$AAt@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FK@BKDKNCLO@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?3?$AA?5?$AAE?$AAt?$AAh?$AAH?$AAw?$AAI?$AAn@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GK@LBFALBHL@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?3?$AA?5?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt@| [ DATA ] ; `string'
	EXPORT	|??_C@_1JG@HNOFAKIH@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?3?$AA?5?$AAN?$AAd?$AAi?$AAs?$AAM?$AAR?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1JC@NMKICHI@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?3?$AA?5?$AAN?$AAd?$AAi?$AAs?$AAM?$AAR?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1JC@NGAONNFD@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?3?$AA?5?$AAN?$AAd?$AAi?$AAs?$AAM?$AAR?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GE@NDLANGAH@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?3?$AA?5?$AAN?$AAI?$AAC?$AAI?$AAn?$AAi?$AAt@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GE@CNKJNDFE@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?3?$AA?5?$AAN?$AAI?$AAC?$AAI?$AAn?$AAi?$AAt@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HA@PNDOGDJ@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?3?$AA?5?$AAN?$AAI?$AAC?$AAM?$AAa?$AAp?$AAA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HC@KJACGMBF@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?3?$AA?5?$AAN?$AAI?$AAC?$AAR?$AAe?$AAa?$AAd@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FK@JKDJGBGL@?$AAE?$AAx?$AAp?$AAe?$AAc?$AAt?$AAe?$AAd?$AA?5?$AAm?$AAe?$AAd?$AAi?$AAa?$AA?5?$AA?$CI?$AA?$CF?$AAx?$AA?$CJ?$AA?5?$AAi?$AAs?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AA?5?$AAM?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DK@GILKNPFA@?$AA?$CL?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|Emac_MiniportInitialize|
	IMPORT	|NICInitializeAdapter|
	IMPORT	|EthHwInit|
	IMPORT	|RequestDevicePads|
	IMPORT	|NdisMRegisterInterrupt|
	IMPORT	|Emac_MiniportDisableInterrupt|
	IMPORT	|NICInitRecv|
	IMPORT	|NICInitSend|
	IMPORT	|NICMapAdapterRegs|
	IMPORT	|NdisMSetAttributesEx|

  00028			 AREA	 |.pdata|, PDATA
|$T51898| DCD	|$LN40@Emac_Minip|
	DCD	0x40014c04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@EHFELICI@?$AA?$DM?$AA?9?$AA?9?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "<"
	DCB	0x0, "-", 0x0, "-", 0x0, "E", 0x0, "m", 0x0, "a", 0x0, "c"
	DCB	0x0, "_", 0x0, "M", 0x0, "i", 0x0, "n", 0x0, "i", 0x0, "p"
	DCB	0x0, "o", 0x0, "r", 0x0, "t", 0x0, "I", 0x0, "n", 0x0, "i"
	DCB	0x0, "t", 0x0, "i", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "z"
	DCB	0x0, "e", 0x0, "(", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GE@FFCPNAMA@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?3?$AA?5?$AAN?$AAI?$AAC?$AAS?$AAe?$AAl?$AAf@| DCB "E"
	DCB	0x0, "m", 0x0, "a", 0x0, "c", 0x0, "_", 0x0, "M", 0x0, "i"
	DCB	0x0, "n", 0x0, "i", 0x0, "p", 0x0, "o", 0x0, "r", 0x0, "t"
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a"
	DCB	0x0, "l", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, ":", 0x0, " "
	DCB	0x0, "N", 0x0, "I", 0x0, "C", 0x0, "S", 0x0, "e", 0x0, "l"
	DCB	0x0, "f", 0x0, "T", 0x0, "e", 0x0, "s", 0x0, "t", 0x0, " "
	DCB	0x0, "i", 0x0, "s", 0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, "d", 0x0, ".", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HG@FLMCAIKK@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?3?$AA?5?$AAN?$AAI?$AAC?$AAI?$AAn?$AAi?$AAt@| DCB "E"
	DCB	0x0, "m", 0x0, "a", 0x0, "c", 0x0, "_", 0x0, "M", 0x0, "i"
	DCB	0x0, "n", 0x0, "i", 0x0, "p", 0x0, "o", 0x0, "r", 0x0, "t"
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a"
	DCB	0x0, "l", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, ":", 0x0, " "
	DCB	0x0, "N", 0x0, "I", 0x0, "C", 0x0, "I", 0x0, "n", 0x0, "i"
	DCB	0x0, "t", 0x0, "i", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "z"
	DCB	0x0, "e", 0x0, "A", 0x0, "d", 0x0, "a", 0x0, "p", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, " ", 0x0, "i", 0x0, "s", 0x0, " "
	DCB	0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, ".", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FK@BKDKNCLO@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?3?$AA?5?$AAE?$AAt?$AAh?$AAH?$AAw?$AAI?$AAn@| DCB "E"
	DCB	0x0, "m", 0x0, "a", 0x0, "c", 0x0, "_", 0x0, "M", 0x0, "i"
	DCB	0x0, "n", 0x0, "i", 0x0, "p", 0x0, "o", 0x0, "r", 0x0, "t"
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a"
	DCB	0x0, "l", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, ":", 0x0, " "
	DCB	0x0, "E", 0x0, "t", 0x0, "h", 0x0, "H", 0x0, "w", 0x0, "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, " ", 0x0, "f", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, ".", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GK@LBFALBHL@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?3?$AA?5?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt@| DCB "E"
	DCB	0x0, "m", 0x0, "a", 0x0, "c", 0x0, "_", 0x0, "M", 0x0, "i"
	DCB	0x0, "n", 0x0, "i", 0x0, "p", 0x0, "o", 0x0, "r", 0x0, "t"
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a"
	DCB	0x0, "l", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, ":", 0x0, " "
	DCB	0x0, "R", 0x0, "e", 0x0, "q", 0x0, "u", 0x0, "e", 0x0, "s"
	DCB	0x0, "t", 0x0, "D", 0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c"
	DCB	0x0, "e", 0x0, "P", 0x0, "a", 0x0, "d", 0x0, "s", 0x0, " "
	DCB	0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, ".", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JG@HNOFAKIH@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?3?$AA?5?$AAN?$AAd?$AAi?$AAs?$AAM?$AAR?$AAe@| DCB "E"
	DCB	0x0, "m", 0x0, "a", 0x0, "c", 0x0, "_", 0x0, "M", 0x0, "i"
	DCB	0x0, "n", 0x0, "i", 0x0, "p", 0x0, "o", 0x0, "r", 0x0, "t"
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a"
	DCB	0x0, "l", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, ":", 0x0, " "
	DCB	0x0, "N", 0x0, "d", 0x0, "i", 0x0, "s", 0x0, "M", 0x0, "R"
	DCB	0x0, "e", 0x0, "g", 0x0, "i", 0x0, "s", 0x0, "t", 0x0, "e"
	DCB	0x0, "r", 0x0, "I", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r"
	DCB	0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t", 0x0, "(", 0x0, "m"
	DCB	0x0, "_", 0x0, "L", 0x0, "i", 0x0, "n", 0x0, "k", 0x0, "I"
	DCB	0x0, "n", 0x0, "t", 0x0, "r", 0x0, "V", 0x0, "e", 0x0, "c"
	DCB	0x0, "t", 0x0, "o", 0x0, "r", 0x0, ")", 0x0, " ", 0x0, "f"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JC@NMKICHI@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?3?$AA?5?$AAN?$AAd?$AAi?$AAs?$AAM?$AAR?$AAe@| DCB "E"
	DCB	0x0, "m", 0x0, "a", 0x0, "c", 0x0, "_", 0x0, "M", 0x0, "i"
	DCB	0x0, "n", 0x0, "i", 0x0, "p", 0x0, "o", 0x0, "r", 0x0, "t"
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a"
	DCB	0x0, "l", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, ":", 0x0, " "
	DCB	0x0, "N", 0x0, "d", 0x0, "i", 0x0, "s", 0x0, "M", 0x0, "R"
	DCB	0x0, "e", 0x0, "g", 0x0, "i", 0x0, "s", 0x0, "t", 0x0, "e"
	DCB	0x0, "r", 0x0, "I", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r"
	DCB	0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t", 0x0, "(", 0x0, "m"
	DCB	0x0, "_", 0x0, "T", 0x0, "x", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "r", 0x0, "V", 0x0, "e", 0x0, "c", 0x0, "t", 0x0, "o"
	DCB	0x0, "r", 0x0, ")", 0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JC@NGAONNFD@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?3?$AA?5?$AAN?$AAd?$AAi?$AAs?$AAM?$AAR?$AAe@| DCB "E"
	DCB	0x0, "m", 0x0, "a", 0x0, "c", 0x0, "_", 0x0, "M", 0x0, "i"
	DCB	0x0, "n", 0x0, "i", 0x0, "p", 0x0, "o", 0x0, "r", 0x0, "t"
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a"
	DCB	0x0, "l", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, ":", 0x0, " "
	DCB	0x0, "N", 0x0, "d", 0x0, "i", 0x0, "s", 0x0, "M", 0x0, "R"
	DCB	0x0, "e", 0x0, "g", 0x0, "i", 0x0, "s", 0x0, "t", 0x0, "e"
	DCB	0x0, "r", 0x0, "I", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r"
	DCB	0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t", 0x0, "(", 0x0, "m"
	DCB	0x0, "_", 0x0, "R", 0x0, "x", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "r", 0x0, "V", 0x0, "e", 0x0, "c", 0x0, "t", 0x0, "o"
	DCB	0x0, "r", 0x0, ")", 0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GE@NDLANGAH@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?3?$AA?5?$AAN?$AAI?$AAC?$AAI?$AAn?$AAi?$AAt@| DCB "E"
	DCB	0x0, "m", 0x0, "a", 0x0, "c", 0x0, "_", 0x0, "M", 0x0, "i"
	DCB	0x0, "n", 0x0, "i", 0x0, "p", 0x0, "o", 0x0, "r", 0x0, "t"
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a"
	DCB	0x0, "l", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, ":", 0x0, " "
	DCB	0x0, "N", 0x0, "I", 0x0, "C", 0x0, "I", 0x0, "n", 0x0, "i"
	DCB	0x0, "t", 0x0, "R", 0x0, "e", 0x0, "c", 0x0, "v", 0x0, " "
	DCB	0x0, "i", 0x0, "s", 0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, "d", 0x0, ".", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GE@CNKJNDFE@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?3?$AA?5?$AAN?$AAI?$AAC?$AAI?$AAn?$AAi?$AAt@| DCB "E"
	DCB	0x0, "m", 0x0, "a", 0x0, "c", 0x0, "_", 0x0, "M", 0x0, "i"
	DCB	0x0, "n", 0x0, "i", 0x0, "p", 0x0, "o", 0x0, "r", 0x0, "t"
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a"
	DCB	0x0, "l", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, ":", 0x0, " "
	DCB	0x0, "N", 0x0, "I", 0x0, "C", 0x0, "I", 0x0, "n", 0x0, "i"
	DCB	0x0, "t", 0x0, "S", 0x0, "e", 0x0, "n", 0x0, "d", 0x0, " "
	DCB	0x0, "i", 0x0, "s", 0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, "d", 0x0, ".", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HA@PNDOGDJ@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?3?$AA?5?$AAN?$AAI?$AAC?$AAM?$AAa?$AAp?$AAA@| DCB "E"
	DCB	0x0, "m", 0x0, "a", 0x0, "c", 0x0, "_", 0x0, "M", 0x0, "i"
	DCB	0x0, "n", 0x0, "i", 0x0, "p", 0x0, "o", 0x0, "r", 0x0, "t"
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a"
	DCB	0x0, "l", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, ":", 0x0, " "
	DCB	0x0, "N", 0x0, "I", 0x0, "C", 0x0, "M", 0x0, "a", 0x0, "p"
	DCB	0x0, "A", 0x0, "d", 0x0, "a", 0x0, "p", 0x0, "t", 0x0, "e"
	DCB	0x0, "r", 0x0, "R", 0x0, "e", 0x0, "g", 0x0, "s", 0x0, " "
	DCB	0x0, "i", 0x0, "s", 0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, "d", 0x0, ".", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HC@KJACGMBF@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?3?$AA?5?$AAN?$AAI?$AAC?$AAR?$AAe?$AAa?$AAd@| DCB "E"
	DCB	0x0, "m", 0x0, "a", 0x0, "c", 0x0, "_", 0x0, "M", 0x0, "i"
	DCB	0x0, "n", 0x0, "i", 0x0, "p", 0x0, "o", 0x0, "r", 0x0, "t"
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a"
	DCB	0x0, "l", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, ":", 0x0, " "
	DCB	0x0, "N", 0x0, "I", 0x0, "C", 0x0, "R", 0x0, "e", 0x0, "a"
	DCB	0x0, "d", 0x0, "A", 0x0, "d", 0x0, "a", 0x0, "p", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "I", 0x0, "n", 0x0, "f", 0x0, "o"
	DCB	0x0, " ", 0x0, "i", 0x0, "s", 0x0, " ", 0x0, "f", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, ".", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FK@JKDJGBGL@?$AAE?$AAx?$AAp?$AAe?$AAc?$AAt?$AAe?$AAd?$AA?5?$AAm?$AAe?$AAd?$AAi?$AAa?$AA?5?$AA?$CI?$AA?$CF?$AAx?$AA?$CJ?$AA?5?$AAi?$AAs?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AA?5?$AAM?$AAe@| DCB "E"
	DCB	0x0, "x", 0x0, "p", 0x0, "e", 0x0, "c", 0x0, "t", 0x0, "e"
	DCB	0x0, "d", 0x0, " ", 0x0, "m", 0x0, "e", 0x0, "d", 0x0, "i"
	DCB	0x0, "a", 0x0, " ", 0x0, "(", 0x0, "%", 0x0, "x", 0x0, ")"
	DCB	0x0, " ", 0x0, "i", 0x0, "s", 0x0, " ", 0x0, "n", 0x0, "o"
	DCB	0x0, "t", 0x0, " ", 0x0, "i", 0x0, "n", 0x0, " ", 0x0, "M"
	DCB	0x0, "e", 0x0, "d", 0x0, "i", 0x0, "u", 0x0, "m", 0x0, "A"
	DCB	0x0, "r", 0x0, "r", 0x0, "a", 0x0, "y", 0x0, ".", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DK@GILKNPFA@?$AA?$CL?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "E", 0x0, "m", 0x0, "a", 0x0, "c", 0x0, "_", 0x0, "M"
	DCB	0x0, "i", 0x0, "n", 0x0, "i", 0x0, "p", 0x0, "o", 0x0, "r"
	DCB	0x0, "t", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i"
	DCB	0x0, "a", 0x0, "l", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, "("
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  00bd8			 AREA	 |.text|, CODE, ARM

  00bd8		 |Emac_MiniportInitialize| PROC

; 491  : {

  00bd8		 |$LN40@Emac_Minip|
  00bd8	e1a0c00d	 mov         r12, sp
  00bdc	e92d000f	 stmdb       sp!, {r0 - r3}
  00be0	e92d5000	 stmdb       sp!, {r12, lr}
  00be4	e24dd08c	 sub         sp, sp, #0x8C
  00be8		 |$M51895|

; 492  :     NDIS_STATUS       Status;
; 493  :     PEMAC_ADAPTER     pAdapter = NULL;

  00be8	e3a03000	 mov         r3, #0
  00bec	e58d3014	 str         r3, [sp, #0x14]

; 494  :     UINT              Index;
; 495  : 
; 496  :     DEBUGMSG (DBG_FUNC,(L"+Emac_MiniportInitialize()\r\n"));

  00bf0	e59f34d8	 ldr         r3, [pc, #0x4D8]
  00bf4	e5933440	 ldr         r3, [r3, #0x440]
  00bf8	e3130080	 tst         r3, #0x80
  00bfc	0a000004	 beq         |$LN26@Emac_Minip|
  00c00	e59f04fc	 ldr         r0, [pc, #0x4FC]
  00c04	eb000000	 bl          NKDbgPrintfW
  00c08	e3a03001	 mov         r3, #1
  00c0c	e58d3044	 str         r3, [sp, #0x44]
  00c10	ea000001	 b           |$LN27@Emac_Minip|
  00c14		 |$LN26@Emac_Minip|
  00c14	e3a03000	 mov         r3, #0
  00c18	e58d3044	 str         r3, [sp, #0x44]
  00c1c		 |$LN27@Emac_Minip|

; 497  : 
; 498  :      do
; 499  :     {
; 500  :         /* Find the media type we support, we
; 501  :          * are checking for 802.3 MediaType.
; 502  :          */
; 503  :         for (Index = 0; Index < MediumArraySize; ++Index)

  00c1c	e3a03000	 mov         r3, #0
  00c20	e58d300c	 str         r3, [sp, #0xC]
  00c24	ea000002	 b           |$LN20@Emac_Minip|
  00c28		 |$LN19@Emac_Minip|
  00c28	e59d300c	 ldr         r3, [sp, #0xC]
  00c2c	e2833001	 add         r3, r3, #1
  00c30	e58d300c	 str         r3, [sp, #0xC]
  00c34		 |$LN20@Emac_Minip|
  00c34	e59d200c	 ldr         r2, [sp, #0xC]
  00c38	e59d30a0	 ldr         r3, [sp, #0xA0]
  00c3c	e1520003	 cmp         r2, r3
  00c40	2a000009	 bcs         |$LN18@Emac_Minip|

; 504  :         {
; 505  :             if (MediumArray[Index] == NIC_MEDIA_TYPE)

  00c44	e59d100c	 ldr         r1, [sp, #0xC]
  00c48	e3a03004	 mov         r3, #4
  00c4c	e0020391	 mul         r2, r1, r3
  00c50	e59d309c	 ldr         r3, [sp, #0x9C]
  00c54	e0833002	 add         r3, r3, r2
  00c58	e5933000	 ldr         r3, [r3]
  00c5c	e3530000	 cmp         r3, #0
  00c60	1a000000	 bne         |$LN17@Emac_Minip|

; 506  :             {
; 507  :                 break;

  00c64	ea000000	 b           |$LN18@Emac_Minip|
  00c68		 |$LN17@Emac_Minip|

; 508  :             }
; 509  :         }

  00c68	eaffffee	 b           |$LN19@Emac_Minip|
  00c6c		 |$LN18@Emac_Minip|

; 510  : 
; 511  :         if (Index == MediumArraySize)

  00c6c	e59d200c	 ldr         r2, [sp, #0xC]
  00c70	e59d30a0	 ldr         r3, [sp, #0xA0]
  00c74	e1520003	 cmp         r2, r3
  00c78	1a00000f	 bne         |$LN16@Emac_Minip|

; 512  :         {
; 513  :             DEBUGMSG(DBG_WARN, (L"Expected media (%x) is not in MediumArray.\r\n",
; 514  :                                                         NIC_MEDIA_TYPE));

  00c7c	e59f344c	 ldr         r3, [pc, #0x44C]
  00c80	e5933440	 ldr         r3, [r3, #0x440]
  00c84	e3130901	 tst         r3, #1, 18
  00c88	0a000005	 beq         |$LN28@Emac_Minip|
  00c8c	e3a01000	 mov         r1, #0
  00c90	e59f0468	 ldr         r0, [pc, #0x468]
  00c94	eb000000	 bl          NKDbgPrintfW
  00c98	e3a03001	 mov         r3, #1
  00c9c	e58d3048	 str         r3, [sp, #0x48]
  00ca0	ea000001	 b           |$LN29@Emac_Minip|
  00ca4		 |$LN28@Emac_Minip|
  00ca4	e3a03000	 mov         r3, #0
  00ca8	e58d3048	 str         r3, [sp, #0x48]
  00cac		 |$LN29@Emac_Minip|

; 515  :             Status = NDIS_STATUS_UNSUPPORTED_MEDIA;

  00cac	e3a03167	 mov         r3, #0x67, 2
  00cb0	e3833801	 orr         r3, r3, #1, 16
  00cb4	e58d3010	 str         r3, [sp, #0x10]

; 516  :             break;

  00cb8	ea0000ea	 b           |$LN21@Emac_Minip|
  00cbc		 |$LN16@Emac_Minip|

; 517  :         }
; 518  : 
; 519  :         *SelectedMediumIndex = Index;

  00cbc	e59d200c	 ldr         r2, [sp, #0xC]
  00cc0	e59d3098	 ldr         r3, [sp, #0x98]
  00cc4	e5832000	 str         r2, [r3]

; 520  : 
; 521  : 
; 522  :         /* Allocate Emac Miniport Adapter structure */
; 523  : 
; 524  :         Status = EmacAllocAdapterBlock(&pAdapter);

  00cc8	e28d0014	 add         r0, sp, #0x14
  00ccc	eb000000	 bl          EmacAllocAdapterBlock
  00cd0	e58d004c	 str         r0, [sp, #0x4C]
  00cd4	e59d304c	 ldr         r3, [sp, #0x4C]
  00cd8	e58d3010	 str         r3, [sp, #0x10]

; 525  : 
; 526  :         if (Status != NDIS_STATUS_SUCCESS)

  00cdc	e59d3010	 ldr         r3, [sp, #0x10]
  00ce0	e3530000	 cmp         r3, #0
  00ce4	0a000000	 beq         |$LN15@Emac_Minip|

; 527  :         {
; 528  :             break;

  00ce8	ea0000de	 b           |$LN21@Emac_Minip|
  00cec		 |$LN15@Emac_Minip|

; 529  :         }
; 530  : 
; 531  :         pAdapter->m_AdapterHandle = MiniportAdapterHandle;

  00cec	e59d20a4	 ldr         r2, [sp, #0xA4]
  00cf0	e59d3014	 ldr         r3, [sp, #0x14]
  00cf4	e5832000	 str         r2, [r3]

; 532  : 
; 533  :         /* Initialise Hardware status */
; 534  :         pAdapter->m_HwStatus = NdisHardwareStatusNotReady;

  00cf8	e59d3014	 ldr         r3, [sp, #0x14]
  00cfc	e2832e1a	 add         r2, r3, #0x1A, 28
  00d00	e3a03004	 mov         r3, #4
  00d04	e5823000	 str         r3, [r2]

; 535  : 
; 536  :         /* Inform NDIS of the attributes of our adapter.
; 537  :          * This has to be done before calling NdisMRegisterXxx or NdisXxxx function
; 538  :          * that depends on the information supplied to NdisMSetAttributesEx
; 539  :          * e.g. NdisMAllocateMapRegisters
; 540  :          */
; 541  :         NdisMSetAttributes (
; 542  :             MiniportAdapterHandle,
; 543  :             (NDIS_HANDLE) pAdapter,
; 544  :             TRUE,                    /* True since ours is Bus Master */
; 545  :             NdisInterfaceInternal);  /* We have internal controller */

  00d08	e3a03000	 mov         r3, #0
  00d0c	e58d3000	 str         r3, [sp]
  00d10	e3a03008	 mov         r3, #8
  00d14	e3a02000	 mov         r2, #0
  00d18	e59d1014	 ldr         r1, [sp, #0x14]
  00d1c	e59d00a4	 ldr         r0, [sp, #0xA4]
  00d20	eb000000	 bl          NdisMSetAttributesEx

; 546  : 
; 547  :         /* Reading all relevant information from adapter
; 548  :          * etc. and filling it in to our adapter structure
; 549  :          */
; 550  : 
; 551  :         Status = NICReadAdapterInfo(
; 552  :                     pAdapter,
; 553  :                     WrapperConfigurationContext);

  00d24	e59d10a8	 ldr         r1, [sp, #0xA8]
  00d28	e59d0014	 ldr         r0, [sp, #0x14]
  00d2c	eb000000	 bl          NICReadAdapterInfo
  00d30	e58d0050	 str         r0, [sp, #0x50]
  00d34	e59d3050	 ldr         r3, [sp, #0x50]
  00d38	e58d3010	 str         r3, [sp, #0x10]

; 554  : 
; 555  :         if (Status != NDIS_STATUS_SUCCESS)

  00d3c	e59d3010	 ldr         r3, [sp, #0x10]
  00d40	e3530000	 cmp         r3, #0
  00d44	0a000002	 beq         |$LN14@Emac_Minip|

; 556  :         {
; 557  :             RETAILMSG(TRUE, (L"Emac_MiniportInitialize: NICReadAdapterInfo is failed.\r\n"));

  00d48	e59f03ac	 ldr         r0, [pc, #0x3AC]
  00d4c	eb000000	 bl          NKDbgPrintfW

; 558  :             break;

  00d50	ea0000c4	 b           |$LN21@Emac_Minip|
  00d54		 |$LN14@Emac_Minip|

; 559  :         }
; 560  :         /* Allocate all other memory blocks
; 561  :          *
; 562  :          */
; 563  :         Status = NICMapAdapterRegs(pAdapter);

  00d54	e59d0014	 ldr         r0, [sp, #0x14]
  00d58	eb000000	 bl          NICMapAdapterRegs
  00d5c	e58d0054	 str         r0, [sp, #0x54]
  00d60	e59d3054	 ldr         r3, [sp, #0x54]
  00d64	e58d3010	 str         r3, [sp, #0x10]

; 564  :         if (Status != NDIS_STATUS_SUCCESS)

  00d68	e59d3010	 ldr         r3, [sp, #0x10]
  00d6c	e3530000	 cmp         r3, #0
  00d70	0a000002	 beq         |$LN13@Emac_Minip|

; 565  :         {
; 566  :             RETAILMSG(TRUE, (L"Emac_MiniportInitialize: NICMapAdapterRegs is failed.\r\n"));

  00d74	e59f037c	 ldr         r0, [pc, #0x37C]
  00d78	eb000000	 bl          NKDbgPrintfW

; 567  :             break;

  00d7c	ea0000b9	 b           |$LN21@Emac_Minip|
  00d80		 |$LN13@Emac_Minip|

; 568  :         }
; 569  : 
; 570  :         /* Init send data structures */
; 571  : 
; 572  :         Status = NICInitSend(pAdapter);

  00d80	e59d0014	 ldr         r0, [sp, #0x14]
  00d84	eb000000	 bl          NICInitSend
  00d88	e58d0058	 str         r0, [sp, #0x58]
  00d8c	e59d3058	 ldr         r3, [sp, #0x58]
  00d90	e58d3010	 str         r3, [sp, #0x10]

; 573  :         if (Status != NDIS_STATUS_SUCCESS)

  00d94	e59d3010	 ldr         r3, [sp, #0x10]
  00d98	e3530000	 cmp         r3, #0
  00d9c	0a000002	 beq         |$LN12@Emac_Minip|

; 574  :         {
; 575  :             RETAILMSG(TRUE, (L"Emac_MiniportInitialize: NICInitSend is failed.\r\n"));

  00da0	e59f034c	 ldr         r0, [pc, #0x34C]
  00da4	eb000000	 bl          NKDbgPrintfW

; 576  :             break;

  00da8	ea0000ae	 b           |$LN21@Emac_Minip|
  00dac		 |$LN12@Emac_Minip|

; 577  :         }
; 578  :         /* Init receive data structures */
; 579  : 
; 580  :         Status = NICInitRecv(pAdapter);

  00dac	e59d0014	 ldr         r0, [sp, #0x14]
  00db0	eb000000	 bl          NICInitRecv
  00db4	e58d005c	 str         r0, [sp, #0x5C]
  00db8	e59d305c	 ldr         r3, [sp, #0x5C]
  00dbc	e58d3010	 str         r3, [sp, #0x10]

; 581  :         if (Status != NDIS_STATUS_SUCCESS)

  00dc0	e59d3010	 ldr         r3, [sp, #0x10]
  00dc4	e3530000	 cmp         r3, #0
  00dc8	0a000002	 beq         |$LN11@Emac_Minip|

; 582  :         {
; 583  :             RETAILMSG(TRUE, (L"Emac_MiniportInitialize: NICInitRecv is failed.\r\n"));

  00dcc	e59f031c	 ldr         r0, [pc, #0x31C]
  00dd0	eb000000	 bl          NKDbgPrintfW

; 584  :             break;

  00dd4	ea0000a3	 b           |$LN21@Emac_Minip|
  00dd8		 |$LN11@Emac_Minip|

; 585  :         }
; 586  : 
; 587  :         /* Disable interrupts here which is as soon as possible */
; 588  : 
; 589  :         Emac_MiniportDisableInterrupt(pAdapter);

  00dd8	e59d0014	 ldr         r0, [sp, #0x14]
  00ddc	eb000000	 bl          Emac_MiniportDisableInterrupt

; 590  : 
; 591  :          /*  Register the interrupt */
; 592  : 
; 593  :         Status = NdisMRegisterInterrupt(
; 594  :                      &pAdapter->m_RxIntrInfo,
; 595  :                      pAdapter->m_AdapterHandle,
; 596  :                      pAdapter->m_RxIntrVector,
; 597  :                      0,          //ignored
; 598  :                      FALSE,      // RequestISR
; 599  :                      FALSE,      // SharedInterrupt
; 600  :                      0);         //ignored

  00de0	e3a03000	 mov         r3, #0
  00de4	e58d3008	 str         r3, [sp, #8]
  00de8	e3a03000	 mov         r3, #0
  00dec	e58d3004	 str         r3, [sp, #4]
  00df0	e3a03000	 mov         r3, #0
  00df4	e58d3000	 str         r3, [sp]
  00df8	e3a03000	 mov         r3, #0
  00dfc	e59d2014	 ldr         r2, [sp, #0x14]
  00e00	e28220e8	 add         r2, r2, #0xE8
  00e04	e1d220b0	 ldrh        r2, [r2]
  00e08	e59d1014	 ldr         r1, [sp, #0x14]
  00e0c	e5911000	 ldr         r1, [r1]
  00e10	e59d0014	 ldr         r0, [sp, #0x14]
  00e14	e2800098	 add         r0, r0, #0x98
  00e18	eb000000	 bl          NdisMRegisterInterrupt
  00e1c	e58d0060	 str         r0, [sp, #0x60]
  00e20	e59d3060	 ldr         r3, [sp, #0x60]
  00e24	e58d3010	 str         r3, [sp, #0x10]

; 601  :         if (Status != NDIS_STATUS_SUCCESS)

  00e28	e59d3010	 ldr         r3, [sp, #0x10]
  00e2c	e3530000	 cmp         r3, #0
  00e30	0a00000b	 beq         |$LN10@Emac_Minip|

; 602  :         {
; 603  :             DEBUGMSG(DBG_ERR, (L"Emac_MiniportInitialize: NdisMRegisterInterrupt(m_RxIntrVector) failed\r\n"));

  00e34	e59f3294	 ldr         r3, [pc, #0x294]
  00e38	e5933440	 ldr         r3, [r3, #0x440]
  00e3c	e3130902	 tst         r3, #2, 18
  00e40	0a000004	 beq         |$LN30@Emac_Minip|
  00e44	e59f02a0	 ldr         r0, [pc, #0x2A0]
  00e48	eb000000	 bl          NKDbgPrintfW
  00e4c	e3a03001	 mov         r3, #1
  00e50	e58d3064	 str         r3, [sp, #0x64]
  00e54	ea000001	 b           |$LN31@Emac_Minip|
  00e58		 |$LN30@Emac_Minip|
  00e58	e3a03000	 mov         r3, #0
  00e5c	e58d3064	 str         r3, [sp, #0x64]
  00e60		 |$LN31@Emac_Minip|

; 604  :             break;

  00e60	ea000080	 b           |$LN21@Emac_Minip|
  00e64		 |$LN10@Emac_Minip|

; 605  :         }
; 606  : 
; 607  :         if(pAdapter->m_TxIntrVector)

  00e64	e59d3014	 ldr         r3, [sp, #0x14]
  00e68	e2833f4f	 add         r3, r3, #0x4F, 30
  00e6c	e1d330b0	 ldrh        r3, [r3]
  00e70	e3530000	 cmp         r3, #0
  00e74	0a000020	 beq         |$LN9@Emac_Minip|

; 608  :         {
; 609  :             Status = NdisMRegisterInterrupt(
; 610  :                          &pAdapter->m_TxIntrInfo,
; 611  :                          pAdapter->m_AdapterHandle,
; 612  :                          pAdapter->m_TxIntrVector,
; 613  :                          0,          //ignored
; 614  :                          FALSE,      // RequestISR
; 615  :                          FALSE,      // SharedInterrupt
; 616  :                          0);         //ignored

  00e78	e3a03000	 mov         r3, #0
  00e7c	e58d3008	 str         r3, [sp, #8]
  00e80	e3a03000	 mov         r3, #0
  00e84	e58d3004	 str         r3, [sp, #4]
  00e88	e3a03000	 mov         r3, #0
  00e8c	e58d3000	 str         r3, [sp]
  00e90	e3a03000	 mov         r3, #0
  00e94	e59d2014	 ldr         r2, [sp, #0x14]
  00e98	e2822f4f	 add         r2, r2, #0x4F, 30
  00e9c	e1d220b0	 ldrh        r2, [r2]
  00ea0	e59d1014	 ldr         r1, [sp, #0x14]
  00ea4	e5911000	 ldr         r1, [r1]
  00ea8	e59d0014	 ldr         r0, [sp, #0x14]
  00eac	e28000ec	 add         r0, r0, #0xEC
  00eb0	eb000000	 bl          NdisMRegisterInterrupt
  00eb4	e58d0068	 str         r0, [sp, #0x68]
  00eb8	e59d3068	 ldr         r3, [sp, #0x68]
  00ebc	e58d3010	 str         r3, [sp, #0x10]

; 617  :             if (Status != NDIS_STATUS_SUCCESS)

  00ec0	e59d3010	 ldr         r3, [sp, #0x10]
  00ec4	e3530000	 cmp         r3, #0
  00ec8	0a00000b	 beq         |$LN8@Emac_Minip|

; 618  :             {
; 619  :                 DEBUGMSG(DBG_ERR, (L"Emac_MiniportInitialize: NdisMRegisterInterrupt(m_TxIntrVector) failed\r\n"));

  00ecc	e59f31fc	 ldr         r3, [pc, #0x1FC]
  00ed0	e5933440	 ldr         r3, [r3, #0x440]
  00ed4	e3130902	 tst         r3, #2, 18
  00ed8	0a000004	 beq         |$LN32@Emac_Minip|
  00edc	e59f0204	 ldr         r0, [pc, #0x204]
  00ee0	eb000000	 bl          NKDbgPrintfW
  00ee4	e3a03001	 mov         r3, #1
  00ee8	e58d306c	 str         r3, [sp, #0x6C]
  00eec	ea000001	 b           |$LN33@Emac_Minip|
  00ef0		 |$LN32@Emac_Minip|
  00ef0	e3a03000	 mov         r3, #0
  00ef4	e58d306c	 str         r3, [sp, #0x6C]
  00ef8		 |$LN33@Emac_Minip|

; 620  :                 break;

  00ef8	ea00005a	 b           |$LN21@Emac_Minip|
  00efc		 |$LN8@Emac_Minip|
  00efc		 |$LN9@Emac_Minip|

; 621  :             }
; 622  :         }
; 623  : 
; 624  :         if(pAdapter->m_LinkIntrVector)

  00efc	e59d3014	 ldr         r3, [sp, #0x14]
  00f00	e2833e19	 add         r3, r3, #0x19, 28
  00f04	e1d330b0	 ldrh        r3, [r3]
  00f08	e3530000	 cmp         r3, #0
  00f0c	0a000020	 beq         |$LN7@Emac_Minip|

; 625  :         {
; 626  :             Status = NdisMRegisterInterrupt(
; 627  :                          &pAdapter->m_LinkIntrInfo,
; 628  :                          pAdapter->m_AdapterHandle,
; 629  :                          pAdapter->m_LinkIntrVector,
; 630  :                          0,          //ignored
; 631  :                          FALSE,      // RequestISR
; 632  :                          FALSE,      // SharedInterrupt
; 633  :                          0);         //ignored

  00f10	e3a03000	 mov         r3, #0
  00f14	e58d3008	 str         r3, [sp, #8]
  00f18	e3a03000	 mov         r3, #0
  00f1c	e58d3004	 str         r3, [sp, #4]
  00f20	e3a03000	 mov         r3, #0
  00f24	e58d3000	 str         r3, [sp]
  00f28	e3a03000	 mov         r3, #0
  00f2c	e59d2014	 ldr         r2, [sp, #0x14]
  00f30	e2822e19	 add         r2, r2, #0x19, 28
  00f34	e1d220b0	 ldrh        r2, [r2]
  00f38	e59d1014	 ldr         r1, [sp, #0x14]
  00f3c	e5911000	 ldr         r1, [r1]
  00f40	e59d0014	 ldr         r0, [sp, #0x14]
  00f44	e2800d05	 add         r0, r0, #5, 26
  00f48	eb000000	 bl          NdisMRegisterInterrupt
  00f4c	e58d0070	 str         r0, [sp, #0x70]
  00f50	e59d3070	 ldr         r3, [sp, #0x70]
  00f54	e58d3010	 str         r3, [sp, #0x10]

; 634  :             if (Status != NDIS_STATUS_SUCCESS)

  00f58	e59d3010	 ldr         r3, [sp, #0x10]
  00f5c	e3530000	 cmp         r3, #0
  00f60	0a00000b	 beq         |$LN6@Emac_Minip|

; 635  :             {
; 636  :                 DEBUGMSG(DBG_ERR, (L"Emac_MiniportInitialize: NdisMRegisterInterrupt(m_LinkIntrVector) failed\r\n"));

  00f64	e59f3164	 ldr         r3, [pc, #0x164]
  00f68	e5933440	 ldr         r3, [r3, #0x440]
  00f6c	e3130902	 tst         r3, #2, 18
  00f70	0a000004	 beq         |$LN34@Emac_Minip|
  00f74	e59f0168	 ldr         r0, [pc, #0x168]
  00f78	eb000000	 bl          NKDbgPrintfW
  00f7c	e3a03001	 mov         r3, #1
  00f80	e58d3074	 str         r3, [sp, #0x74]
  00f84	ea000001	 b           |$LN35@Emac_Minip|
  00f88		 |$LN34@Emac_Minip|
  00f88	e3a03000	 mov         r3, #0
  00f8c	e58d3074	 str         r3, [sp, #0x74]
  00f90		 |$LN35@Emac_Minip|

; 637  :                 break;

  00f90	ea000034	 b           |$LN21@Emac_Minip|
  00f94		 |$LN6@Emac_Minip|
  00f94		 |$LN7@Emac_Minip|

; 638  :             }
; 639  :         }
; 640  : 
; 641  :         /* About to initialise */
; 642  : 
; 643  :         pAdapter->m_HwStatus = NdisHardwareStatusInitializing;

  00f94	e59d3014	 ldr         r3, [sp, #0x14]
  00f98	e2832e1a	 add         r2, r3, #0x1A, 28
  00f9c	e3a03001	 mov         r3, #1
  00fa0	e5823000	 str         r3, [r2]

; 644  : 
; 645  :         /* request and configure the pads used by the EMAC device*/
; 646  :         if (!RequestDevicePads(pAdapter->m_device))

  00fa4	e59d3014	 ldr         r3, [sp, #0x14]
  00fa8	e2833094	 add         r3, r3, #0x94
  00fac	e5930000	 ldr         r0, [r3]
  00fb0	eb000000	 bl          RequestDevicePads
  00fb4	e58d0078	 str         r0, [sp, #0x78]
  00fb8	e59d3078	 ldr         r3, [sp, #0x78]
  00fbc	e3530000	 cmp         r3, #0
  00fc0	1a000004	 bne         |$LN5@Emac_Minip|

; 647  :         {
; 648  :             Status = NDIS_STATUS_FAILURE;

  00fc4	e3a03107	 mov         r3, #7, 2
  00fc8	e58d3010	 str         r3, [sp, #0x10]

; 649  :             RETAILMSG(TRUE, (L"Emac_MiniportInitialize: RequestDevicePads failed.\r\n"));

  00fcc	e59f010c	 ldr         r0, [pc, #0x10C]
  00fd0	eb000000	 bl          NKDbgPrintfW

; 650  :             break;

  00fd4	ea000023	 b           |$LN21@Emac_Minip|
  00fd8		 |$LN5@Emac_Minip|

; 651  :         }
; 652  : 
; 653  :         /* Init the hardware and set up everything */
; 654  :         if (!EthHwInit())

  00fd8	eb000000	 bl          EthHwInit
  00fdc	e58d007c	 str         r0, [sp, #0x7C]
  00fe0	e59d307c	 ldr         r3, [sp, #0x7C]
  00fe4	e3530000	 cmp         r3, #0
  00fe8	1a000004	 bne         |$LN4@Emac_Minip|

; 655  :         {
; 656  :             Status = NDIS_STATUS_FAILURE;

  00fec	e3a03107	 mov         r3, #7, 2
  00ff0	e58d3010	 str         r3, [sp, #0x10]

; 657  :             RETAILMSG(TRUE, (L"Emac_MiniportInitialize: EthHwInit failed.\r\n"));

  00ff4	e59f00e0	 ldr         r0, [pc, #0xE0]
  00ff8	eb000000	 bl          NKDbgPrintfW

; 658  :             break;

  00ffc	ea000019	 b           |$LN21@Emac_Minip|
  01000		 |$LN4@Emac_Minip|

; 659  :         }
; 660  : 
; 661  :         Status = NICInitializeAdapter(pAdapter);

  01000	e59d0014	 ldr         r0, [sp, #0x14]
  01004	eb000000	 bl          NICInitializeAdapter
  01008	e58d0080	 str         r0, [sp, #0x80]
  0100c	e59d3080	 ldr         r3, [sp, #0x80]
  01010	e58d3010	 str         r3, [sp, #0x10]

; 662  :         if (Status != NDIS_STATUS_SUCCESS)

  01014	e59d3010	 ldr         r3, [sp, #0x10]
  01018	e3530000	 cmp         r3, #0
  0101c	0a000002	 beq         |$LN3@Emac_Minip|

; 663  :         {
; 664  :             RETAILMSG(TRUE, (L"Emac_MiniportInitialize: NICInitializeAdapter is failed.\r\n"));

  01020	e59f00b0	 ldr         r0, [pc, #0xB0]
  01024	eb000000	 bl          NKDbgPrintfW

; 665  :             break;

  01028	ea00000e	 b           |$LN21@Emac_Minip|
  0102c		 |$LN3@Emac_Minip|

; 666  :         }
; 667  : 
; 668  :         /* Test our adapter hardware */
; 669  : 
; 670  :         Status = NICSelfTest(pAdapter);

  0102c	e59d0014	 ldr         r0, [sp, #0x14]
  01030	eb000000	 bl          NICSelfTest
  01034	e58d0084	 str         r0, [sp, #0x84]
  01038	e59d3084	 ldr         r3, [sp, #0x84]
  0103c	e58d3010	 str         r3, [sp, #0x10]

; 671  :         if (Status != NDIS_STATUS_SUCCESS)

  01040	e59d3010	 ldr         r3, [sp, #0x10]
  01044	e3530000	 cmp         r3, #0
  01048	0a000002	 beq         |$LN2@Emac_Minip|

; 672  :         {
; 673  :             RETAILMSG(TRUE, (L"Emac_MiniportInitialize: NICSelfTest is failed.\r\n"));

  0104c	e59f0080	 ldr         r0, [pc, #0x80]
  01050	eb000000	 bl          NKDbgPrintfW

; 674  :             break;

  01054	ea000003	 b           |$LN21@Emac_Minip|
  01058		 |$LN2@Emac_Minip|

; 675  :         }
; 676  : 
; 677  :         /* Test is successful , make a status transition */
; 678  :         pAdapter->m_HwStatus = NdisHardwareStatusReady;

  01058	e59d3014	 ldr         r3, [sp, #0x14]
  0105c	e2832e1a	 add         r2, r3, #0x1A, 28
  01060	e3a03000	 mov         r3, #0
  01064	e5823000	 str         r3, [r2]
  01068		 |$LN21@Emac_Minip|

; 679  : 
; 680  :     } while (FALSE);
; 681  : 
; 682  :     if (pAdapter && Status != NDIS_STATUS_SUCCESS)

  01068	e59d3014	 ldr         r3, [sp, #0x14]
  0106c	e3530000	 cmp         r3, #0
  01070	0a000004	 beq         |$LN1@Emac_Minip|
  01074	e59d3010	 ldr         r3, [sp, #0x10]
  01078	e3530000	 cmp         r3, #0
  0107c	0a000001	 beq         |$LN1@Emac_Minip|

; 683  :     {
; 684  :        /* Free allocated memory and resources held */
; 685  :        EmacFreeAdapter(pAdapter);

  01080	e59d0014	 ldr         r0, [sp, #0x14]
  01084	eb000000	 bl          EmacFreeAdapter
  01088		 |$LN1@Emac_Minip|

; 686  :     }
; 687  : 
; 688  :     DEBUGMSG (DBG_FUNC,(L"<--Emac_MiniportInitialize()\r\n"));

  01088	e59f3040	 ldr         r3, [pc, #0x40]
  0108c	e5933440	 ldr         r3, [r3, #0x440]
  01090	e3130080	 tst         r3, #0x80
  01094	0a000004	 beq         |$LN36@Emac_Minip|
  01098	e59f002c	 ldr         r0, [pc, #0x2C]
  0109c	eb000000	 bl          NKDbgPrintfW
  010a0	e3a03001	 mov         r3, #1
  010a4	e58d3088	 str         r3, [sp, #0x88]
  010a8	ea000001	 b           |$LN37@Emac_Minip|
  010ac		 |$LN36@Emac_Minip|
  010ac	e3a03000	 mov         r3, #0
  010b0	e58d3088	 str         r3, [sp, #0x88]
  010b4		 |$LN37@Emac_Minip|

; 689  : 
; 690  :     return Status;

  010b4	e59d3010	 ldr         r3, [sp, #0x10]
  010b8	e58d3040	 str         r3, [sp, #0x40]

; 691  : 
; 692  : }

  010bc	e59d0040	 ldr         r0, [sp, #0x40]
  010c0	e28dd08c	 add         sp, sp, #0x8C
  010c4	e89d6000	 ldmia       sp, {sp, lr}
  010c8	e12fff1e	 bx          lr
  010cc		 |$LN41@Emac_Minip|
  010cc		 |$LN42@Emac_Minip|
  010cc	00000000	 DCD         |??_C@_1DO@EHFELICI@?$AA?$DM?$AA?9?$AA?9?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  010d0		 |$LN43@Emac_Minip|
  010d0	00000000	 DCD         |dpCurSettings|
  010d4		 |$LN44@Emac_Minip|
  010d4	00000000	 DCD         |??_C@_1GE@FFCPNAMA@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?3?$AA?5?$AAN?$AAI?$AAC?$AAS?$AAe?$AAl?$AAf@|
  010d8		 |$LN45@Emac_Minip|
  010d8	00000000	 DCD         |??_C@_1HG@FLMCAIKK@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?3?$AA?5?$AAN?$AAI?$AAC?$AAI?$AAn?$AAi?$AAt@|
  010dc		 |$LN46@Emac_Minip|
  010dc	00000000	 DCD         |??_C@_1FK@BKDKNCLO@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?3?$AA?5?$AAE?$AAt?$AAh?$AAH?$AAw?$AAI?$AAn@|
  010e0		 |$LN47@Emac_Minip|
  010e0	00000000	 DCD         |??_C@_1GK@LBFALBHL@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?3?$AA?5?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt@|
  010e4		 |$LN48@Emac_Minip|
  010e4	00000000	 DCD         |??_C@_1JG@HNOFAKIH@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?3?$AA?5?$AAN?$AAd?$AAi?$AAs?$AAM?$AAR?$AAe@|
  010e8		 |$LN49@Emac_Minip|
  010e8	00000000	 DCD         |??_C@_1JC@NMKICHI@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?3?$AA?5?$AAN?$AAd?$AAi?$AAs?$AAM?$AAR?$AAe@|
  010ec		 |$LN50@Emac_Minip|
  010ec	00000000	 DCD         |??_C@_1JC@NGAONNFD@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?3?$AA?5?$AAN?$AAd?$AAi?$AAs?$AAM?$AAR?$AAe@|
  010f0		 |$LN51@Emac_Minip|
  010f0	00000000	 DCD         |??_C@_1GE@NDLANGAH@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?3?$AA?5?$AAN?$AAI?$AAC?$AAI?$AAn?$AAi?$AAt@|
  010f4		 |$LN52@Emac_Minip|
  010f4	00000000	 DCD         |??_C@_1GE@CNKJNDFE@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?3?$AA?5?$AAN?$AAI?$AAC?$AAI?$AAn?$AAi?$AAt@|
  010f8		 |$LN53@Emac_Minip|
  010f8	00000000	 DCD         |??_C@_1HA@PNDOGDJ@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?3?$AA?5?$AAN?$AAI?$AAC?$AAM?$AAa?$AAp?$AAA@|
  010fc		 |$LN54@Emac_Minip|
  010fc	00000000	 DCD         |??_C@_1HC@KJACGMBF@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?3?$AA?5?$AAN?$AAI?$AAC?$AAR?$AAe?$AAa?$AAd@|
  01100		 |$LN55@Emac_Minip|
  01100	00000000	 DCD         |??_C@_1FK@JKDJGBGL@?$AAE?$AAx?$AAp?$AAe?$AAc?$AAt?$AAe?$AAd?$AA?5?$AAm?$AAe?$AAd?$AAi?$AAa?$AA?5?$AA?$CI?$AA?$CF?$AAx?$AA?$CJ?$AA?5?$AAi?$AAs?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AA?5?$AAM?$AAe@|
  01104		 |$LN56@Emac_Minip|
  01104	00000000	 DCD         |??_C@_1DK@GILKNPFA@?$AA?$CL?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  01108		 |$M51896|

			 ENDP  ; |Emac_MiniportInitialize|

	END
