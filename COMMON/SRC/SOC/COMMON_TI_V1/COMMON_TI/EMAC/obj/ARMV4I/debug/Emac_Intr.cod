; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\EMAC\Emac_Intr.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|AddBufToRxQueue|
	IMPORT	|NdisReleaseSpinLock|
	IMPORT	|memset|
	IMPORT	|NdisAcquireSpinLock|

  00000			 AREA	 |.pdata|, PDATA
|$T50729| DCD	|$LN13@AddBufToRx|
	DCD	0x40009404
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\emac\emac_intr.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |AddBufToRxQueue| PROC

; 92   : {

  00000		 |$LN13@AddBufToRx|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd01c	 sub         sp, sp, #0x1C
  00010		 |$M50726|

; 93   :     PEMAC_ADAPTER   pAdapter;
; 94   :     PEMAC_RXBUFS    pEmacRxBufsList;
; 95   :     PEMACDESC       pRXDescPa;
; 96   :     PEMACDESC       pRXDescVa;
; 97   :     UINT32          RXTailDescPa;
; 98   :     UINT32          RXTailDescVa;
; 99   :     UINT32          TailPktStatus;
; 100  :     
; 101  :     pAdapter = (PEMAC_ADAPTER)MiniportAdapterContext;

  00010	e59d3024	 ldr         r3, [sp, #0x24]
  00014	e58d3018	 str         r3, [sp, #0x18]

; 102  :     
; 103  :     /* Acquire the Receive lock */
; 104  :     NdisAcquireSpinLock(&pAdapter->m_RcvLock);

  00018	e59d3018	 ldr         r3, [sp, #0x18]
  0001c	e2830080	 add         r0, r3, #0x80
  00020	eb000000	 bl          NdisAcquireSpinLock

; 105  : 
; 106  :     /* Fetch the current buffer to be added */
; 107  :     pEmacRxBufsList = (PEMAC_RXBUFS)pTmpRxPkt->m_BufsList.m_pHead;

  00024	e59d3028	 ldr         r3, [sp, #0x28]
  00028	e2833008	 add         r3, r3, #8
  0002c	e5933000	 ldr         r3, [r3]
  00030	e58d3004	 str         r3, [sp, #4]
  00034		 |$LN8@AddBufToRx|

; 108  :     
; 109  :     while(pEmacRxBufsList != 0)

  00034	e59d3004	 ldr         r3, [sp, #4]
  00038	e3530000	 cmp         r3, #0
  0003c	0a00007d	 beq         |$LN7@AddBufToRx|

; 110  :     {
; 111  :         /* Get the current Rx bufs physical and virtual EMAC buffer descriptor */
; 112  :         pRXDescPa = (PEMACDESC)pEmacRxBufsList->m_EmacBufDesPa; 

  00040	e59d3004	 ldr         r3, [sp, #4]
  00044	e2833014	 add         r3, r3, #0x14
  00048	e5933000	 ldr         r3, [r3]
  0004c	e58d3010	 str         r3, [sp, #0x10]

; 113  :         pRXDescVa = (PEMACDESC)pEmacRxBufsList->m_EmacBufDes; 

  00050	e59d3004	 ldr         r3, [sp, #4]
  00054	e2833010	 add         r3, r3, #0x10
  00058	e5933000	 ldr         r3, [r3]
  0005c	e58d3014	 str         r3, [sp, #0x14]

; 114  :         
; 115  :         /* Terminating the present descriptor to NULL */
; 116  :         pRXDescVa->pNext = 0;

  00060	e59d2014	 ldr         r2, [sp, #0x14]
  00064	e3a03000	 mov         r3, #0
  00068	e5823000	 str         r3, [r2]

; 117  :         
; 118  :         /* Recylcling buffer length and ownership fields */
; 119  :         pRXDescVa->BufOffLen    = EMAC_MAX_PKT_BUFFER_SIZE;

  0006c	e59d3014	 ldr         r3, [sp, #0x14]
  00070	e2832008	 add         r2, r3, #8
  00074	e3a03c06	 mov         r3, #6, 24
  00078	e5823000	 str         r3, [r2]

; 120  :         pRXDescVa->PktFlgLen    = EMAC_DSC_FLAG_OWNER; 

  0007c	e59d3014	 ldr         r3, [sp, #0x14]
  00080	e283200c	 add         r2, r3, #0xC
  00084	e3a03202	 mov         r3, #2, 4
  00088	e5823000	 str         r3, [r2]

; 121  : 
; 122  :         if(0 != QUEUE_COUNT(&pAdapter->m_RxBufsPool))

  0008c	e59d3018	 ldr         r3, [sp, #0x18]
  00090	e2833f71	 add         r3, r3, #0x71, 30
  00094	e5933000	 ldr         r3, [r3]
  00098	e3530000	 cmp         r3, #0
  0009c	0a000026	 beq         |$LN6@AddBufToRx|

; 123  :         {
; 124  :             RXTailDescPa = ((PEMAC_RXBUFS)(pAdapter->m_RxBufsPool.m_pTail))->m_EmacBufDesPa;

  000a0	e59d3018	 ldr         r3, [sp, #0x18]
  000a4	e2833d07	 add         r3, r3, #7, 26
  000a8	e5933000	 ldr         r3, [r3]
  000ac	e2833014	 add         r3, r3, #0x14
  000b0	e5933000	 ldr         r3, [r3]
  000b4	e58d300c	 str         r3, [sp, #0xC]

; 125  :             RXTailDescVa = ((PEMAC_RXBUFS)(pAdapter->m_RxBufsPool.m_pTail))->m_EmacBufDes;

  000b8	e59d3018	 ldr         r3, [sp, #0x18]
  000bc	e2833d07	 add         r3, r3, #7, 26
  000c0	e5933000	 ldr         r3, [r3]
  000c4	e2833010	 add         r3, r3, #0x10
  000c8	e5933000	 ldr         r3, [r3]
  000cc	e58d3000	 str         r3, [sp]

; 126  : 
; 127  :             /* Attaching tail's EMAC buffer descriptor's next to got one */
; 128  :             ((PEMACDESC)(RXTailDescVa))->pNext = pRXDescPa;

  000d0	e59d2010	 ldr         r2, [sp, #0x10]
  000d4	e59d3000	 ldr         r3, [sp]
  000d8	e5832000	 str         r2, [r3]

; 129  :             
; 130  :              if(0 != (((PEMACDESC)(RXTailDescVa))->PktFlgLen & EMAC_DSC_FLAG_EOQ))

  000dc	e59d3000	 ldr         r3, [sp]
  000e0	e283300c	 add         r3, r3, #0xC
  000e4	e5933000	 ldr         r3, [r3]
  000e8	e3130201	 tst         r3, #1, 4
  000ec	0a000011	 beq         |$LN5@AddBufToRx|

; 131  :             {
; 132  :                 TailPktStatus = ((PEMACDESC)(RXTailDescVa))->PktFlgLen;

  000f0	e59d3000	 ldr         r3, [sp]
  000f4	e283300c	 add         r3, r3, #0xC
  000f8	e5933000	 ldr         r3, [r3]
  000fc	e58d3008	 str         r3, [sp, #8]

; 133  :                 TailPktStatus &= ~(EMAC_DSC_FLAG_EOQ);

  00100	e59d2008	 ldr         r2, [sp, #8]
  00104	e3e03201	 mvn         r3, #1, 4
  00108	e0023003	 and         r3, r2, r3
  0010c	e58d3008	 str         r3, [sp, #8]

; 134  :                 ((PEMACDESC)(RXTailDescVa))->PktFlgLen = TailPktStatus;

  00110	e59d3000	 ldr         r3, [sp]
  00114	e283200c	 add         r2, r3, #0xC
  00118	e59d3008	 ldr         r3, [sp, #8]
  0011c	e5823000	 str         r3, [r2]

; 135  :                 pAdapter->m_pEmacRegsBase->RX0HDP = (UINT32)pRXDescPa; 

  00120	e59d3018	 ldr         r3, [sp, #0x18]
  00124	e2833004	 add         r3, r3, #4
  00128	e5933000	 ldr         r3, [r3]
  0012c	e2832e62	 add         r2, r3, #0x62, 28
  00130	e59d3010	 ldr         r3, [sp, #0x10]
  00134	e5823000	 str         r3, [r2]
  00138		 |$LN5@AddBufToRx|

; 136  :             }
; 137  :         }
; 138  :         else 

  00138	ea000005	 b           |$LN4@AddBufToRx|
  0013c		 |$LN6@AddBufToRx|

; 139  :         {
; 140  :             
; 141  :             pAdapter->m_pEmacRegsBase->RX0HDP = (UINT32)pRXDescPa;

  0013c	e59d3018	 ldr         r3, [sp, #0x18]
  00140	e2833004	 add         r3, r3, #4
  00144	e5933000	 ldr         r3, [r3]
  00148	e2832e62	 add         r2, r3, #0x62, 28
  0014c	e59d3010	 ldr         r3, [sp, #0x10]
  00150	e5823000	 str         r3, [r2]
  00154		 |$LN4@AddBufToRx|

; 142  :             
; 143  :            // pAdapter->m_RxQueueActive = TRUE;    
; 144  :         }
; 145  : 
; 146  :         /* Write to increment the register the buffer we got back for
; 147  :          * hardware flow control support
; 148  :          */
; 149  :         pAdapter->m_pEmacRegsBase->RX0FREEBUFFER = 0x1;

  00154	e59d3018	 ldr         r3, [sp, #0x18]
  00158	e2833004	 add         r3, r3, #4
  0015c	e5933000	 ldr         r3, [r3]
  00160	e2832d05	 add         r2, r3, #5, 26
  00164	e3a03001	 mov         r3, #1
  00168	e5823000	 str         r3, [r2]

; 150  :       
; 151  :         /* Clearing memory */
; 152  :         NdisZeroMemory((PVOID)pEmacRxBufsList->m_BufLogicalAddress,
; 153  :                                 EMAC_MAX_PKT_BUFFER_SIZE);

  0016c	e3a02c06	 mov         r2, #6, 24
  00170	e3a01000	 mov         r1, #0
  00174	e59d3004	 ldr         r3, [sp, #4]
  00178	e2833008	 add         r3, r3, #8
  0017c	e5930000	 ldr         r0, [r3]
  00180	eb000000	 bl          memset

; 154  :    
; 155  :         /* Adjust the Buffer length */
; 156  :         NdisAdjustBufferLength((PNDIS_BUFFER)pEmacRxBufsList->m_BufHandle,
; 157  :                                    EMAC_MAX_PKT_BUFFER_SIZE);

  00184	e59d3004	 ldr         r3, [sp, #4]
  00188	e2833004	 add         r3, r3, #4
  0018c	e5933000	 ldr         r3, [r3]
  00190	e2832008	 add         r2, r3, #8
  00194	e3a03c06	 mov         r3, #6, 24
  00198	e5823000	 str         r3, [r2]

; 158  : 
; 159  :          /* Also adding to our Rx bufs pool */
; 160  :         QUEUE_INSERT(&pAdapter->m_RxBufsPool,pEmacRxBufsList);

  0019c	e59d3018	 ldr         r3, [sp, #0x18]
  001a0	e2933f6f	 adds        r3, r3, #0x6F, 30
  001a4	0a00001f	 beq         |$LN3@AddBufToRx|
  001a8	e59d3004	 ldr         r3, [sp, #4]
  001ac	e3530000	 cmp         r3, #0
  001b0	0a00001c	 beq         |$LN3@AddBufToRx|
  001b4	e59d3018	 ldr         r3, [sp, #0x18]
  001b8	e2833f6f	 add         r3, r3, #0x6F, 30
  001bc	e5933000	 ldr         r3, [r3]
  001c0	e3530000	 cmp         r3, #0
  001c4	1a000004	 bne         |$LN2@AddBufToRx|
  001c8	e59d3018	 ldr         r3, [sp, #0x18]
  001cc	e2832f6f	 add         r2, r3, #0x6F, 30
  001d0	e59d3004	 ldr         r3, [sp, #4]
  001d4	e5823000	 str         r3, [r2]
  001d8	ea000004	 b           |$LN1@AddBufToRx|
  001dc		 |$LN2@AddBufToRx|
  001dc	e59d3018	 ldr         r3, [sp, #0x18]
  001e0	e2833d07	 add         r3, r3, #7, 26
  001e4	e5932000	 ldr         r2, [r3]
  001e8	e59d3004	 ldr         r3, [sp, #4]
  001ec	e5823000	 str         r3, [r2]
  001f0		 |$LN1@AddBufToRx|
  001f0	e59d3018	 ldr         r3, [sp, #0x18]
  001f4	e2832d07	 add         r2, r3, #7, 26
  001f8	e59d3004	 ldr         r3, [sp, #4]
  001fc	e5823000	 str         r3, [r2]
  00200	e59d3018	 ldr         r3, [sp, #0x18]
  00204	e2833f71	 add         r3, r3, #0x71, 30
  00208	e5933000	 ldr         r3, [r3]
  0020c	e2832001	 add         r2, r3, #1
  00210	e59d3018	 ldr         r3, [sp, #0x18]
  00214	e2833f71	 add         r3, r3, #0x71, 30
  00218	e5832000	 str         r2, [r3]
  0021c	e59d2004	 ldr         r2, [sp, #4]
  00220	e3a03000	 mov         r3, #0
  00224	e5823000	 str         r3, [r2]
  00228		 |$LN3@AddBufToRx|

; 161  :                 
; 162  :         /* Getting to next Rx buf if any */
; 163  :         pEmacRxBufsList = (PEMAC_RXBUFS)((PSLINK_T)pEmacRxBufsList)->m_pLink;

  00228	e59d3004	 ldr         r3, [sp, #4]
  0022c	e5933000	 ldr         r3, [r3]
  00230	e58d3004	 str         r3, [sp, #4]

; 164  :     }       

  00234	eaffff7e	 b           |$LN8@AddBufToRx|
  00238		 |$LN7@AddBufToRx|

; 165  :     
; 166  :      NdisReleaseSpinLock(&pAdapter->m_RcvLock);

  00238	e59d3018	 ldr         r3, [sp, #0x18]
  0023c	e2830080	 add         r0, r3, #0x80
  00240	eb000000	 bl          NdisReleaseSpinLock

; 167  : }

  00244	e28dd01c	 add         sp, sp, #0x1C
  00248	e89d6000	 ldmia       sp, {sp, lr}
  0024c	e12fff1e	 bx          lr
  00250		 |$M50727|

			 ENDP  ; |AddBufToRxQueue|

	EXPORT	|??_C@_1CG@OJLIAIFO@?$AA?$DM?$AA?9?$AA?9?$AAR?$AAx?$AAI?$AAn?$AAt?$AAr?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CM@NEBDCKHF@?$AAT?$AAe?$AAa?$AAr?$AAd?$AAo?$AAw?$AAn?$AA?5?$AAi?$AAn?$AA?5?$AAp?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CG@OINHPDJG@?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAi?$AAn?$AA?5?$AAp?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CG@JJLCOMCI@?$AA?9?$AA?9?$AA?$DO?$AAR?$AAx?$AAI?$AAn?$AAt?$AAr?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|RxIntrHandler|
	IMPORT	|NdisUnchainBufferAtFront|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|dpCurSettings|

  00008			 AREA	 |.pdata|, PDATA
|$T50742| DCD	|$LN48@RxIntrHand|
	DCD	0x40029c04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CG@OJLIAIFO@?$AA?$DM?$AA?9?$AA?9?$AAR?$AAx?$AAI?$AAn?$AAt?$AAr?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@| DCB "<"
	DCB	0x0, "-", 0x0, "-", 0x0, "R", 0x0, "x", 0x0, "I", 0x0, "n"
	DCB	0x0, "t", 0x0, "r", 0x0, "H", 0x0, "a", 0x0, "n", 0x0, "d"
	DCB	0x0, "l", 0x0, "e", 0x0, "r", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@NEBDCKHF@?$AAT?$AAe?$AAa?$AAr?$AAd?$AAo?$AAw?$AAn?$AA?5?$AAi?$AAn?$AA?5?$AAp?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| DCB "T"
	DCB	0x0, "e", 0x0, "a", 0x0, "r", 0x0, "d", 0x0, "o", 0x0, "w"
	DCB	0x0, "n", 0x0, " ", 0x0, "i", 0x0, "n", 0x0, " ", 0x0, "p"
	DCB	0x0, "a", 0x0, "c", 0x0, "k", 0x0, "e", 0x0, "t", 0x0, " "
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CG@OINHPDJG@?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAi?$AAn?$AA?5?$AAp?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| DCB "E"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "i"
	DCB	0x0, "n", 0x0, " ", 0x0, "p", 0x0, "a", 0x0, "c", 0x0, "k"
	DCB	0x0, "e", 0x0, "t", 0x0, " ", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CG@JJLCOMCI@?$AA?9?$AA?9?$AA?$DO?$AAR?$AAx?$AAI?$AAn?$AAt?$AAr?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "-", 0x0, ">", 0x0, "R", 0x0, "x", 0x0, "I", 0x0, "n"
	DCB	0x0, "t", 0x0, "r", 0x0, "H", 0x0, "a", 0x0, "n", 0x0, "d"
	DCB	0x0, "l", 0x0, "e", 0x0, "r", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Odtp

  00250			 AREA	 |.text|, CODE, ARM

  00250		 |RxIntrHandler| PROC

; 178  : {

  00250		 |$LN48@RxIntrHand|
  00250	e1a0c00d	 mov         r12, sp
  00254	e92d0001	 stmdb       sp!, {r0}
  00258	e92d5010	 stmdb       sp!, {r4, r12, lr}
  0025c	e24dde45	 sub         sp, sp, #0x45, 28
  00260		 |$M50739|

; 179  :     PEMAC_ADAPTER   pAdapter;
; 180  :     PEMAC_RXBUFS    pCurRxBuf;
; 181  :     PEMAC_RXBUFS    pNextRxBuf;
; 182  :     PNDIS_PACKET    NdisPktsArray[NDIS_INDICATE_PKTS];
; 183  :     UINT32          Status;
; 184  :     PEMACDESC       pCurDesc;
; 185  :     USHORT          PacketArrayCount = 0;

  00260	e3a03000	 mov         r3, #0
  00264	e28dcb01	 add         r12, sp, #1, 22
  00268	e1cc31b8	 strh        r3, [r12, #0x18]

; 186  :     UINT16          BufLen;
; 187  :     UINT16          Index;
; 188  :     PEMAC_RXPKTS    pRxPkt;
; 189  :     PNDIS_BUFFER    NdisBuffer;
; 190  :     PEMAC_RXPKTS    *TempPtr;
; 191  :     PEMAC_RXPKTS    pTmpRxPkt;
; 192  :     BOOL            EOQPktGot = FALSE;

  0026c	e3a03000	 mov         r3, #0
  00270	e58d3434	 str         r3, [sp, #0x434]

; 193  :     UINT32          RXTailDescVa;
; 194  :     
; 195  :     pAdapter = (PEMAC_ADAPTER)MiniportAdapterContext;      

  00274	e59d345c	 ldr         r3, [sp, #0x45C]
  00278	e58d3430	 str         r3, [sp, #0x430]

; 196  : 
; 197  :     if(DOWN == pAdapter->m_LinkStatus)

  0027c	e59d3430	 ldr         r3, [sp, #0x430]
  00280	e2833f69	 add         r3, r3, #0x69, 30
  00284	e5933000	 ldr         r3, [r3]
  00288	e3530001	 cmp         r3, #1
  0028c	1a000000	 bne         |$LN35@RxIntrHand|

; 198  :     {
; 199  :         return;

  00290	ea000282	 b           |$LN36@RxIntrHand|
  00294		 |$LN35@RxIntrHand|

; 200  :     }
; 201  : 
; 202  :     DEBUGMSG (DBG_FUNC,(L"-->RxIntrHandler\r\n"));

  00294	e59f3a14	 ldr         r3, [pc, #0xA14]
  00298	e5933440	 ldr         r3, [r3, #0x440]
  0029c	e3130080	 tst         r3, #0x80
  002a0	0a000004	 beq         |$LN38@RxIntrHand|
  002a4	e59f0a10	 ldr         r0, [pc, #0xA10]
  002a8	eb000000	 bl          NKDbgPrintfW
  002ac	e3a03001	 mov         r3, #1
  002b0	e58d3440	 str         r3, [sp, #0x440]
  002b4	ea000001	 b           |$LN39@RxIntrHand|
  002b8		 |$LN38@RxIntrHand|
  002b8	e3a03000	 mov         r3, #0
  002bc	e58d3440	 str         r3, [sp, #0x440]
  002c0		 |$LN39@RxIntrHand|

; 203  : 
; 204  :     pCurRxBuf =  pAdapter->m_pCurEmacRxBuf;

  002c0	e59d3430	 ldr         r3, [sp, #0x430]
  002c4	e2833f67	 add         r3, r3, #0x67, 30
  002c8	e5933000	 ldr         r3, [r3]
  002cc	e58d3010	 str         r3, [sp, #0x10]

; 205  :     
; 206  :     /* Check if it is teardown interrupt then clear it 
; 207  :      * and return 
; 208  :      */
; 209  :      if(0xfffffffc == pAdapter->m_pEmacRegsBase->RX0CP)

  002d0	e59d3430	 ldr         r3, [sp, #0x430]
  002d4	e2833004	 add         r3, r3, #4
  002d8	e5933000	 ldr         r3, [r3]
  002dc	e2833e66	 add         r3, r3, #0x66, 28
  002e0	e5933000	 ldr         r3, [r3]
  002e4	e3730004	 cmn         r3, #4
  002e8	1a00000d	 bne         |$LN34@RxIntrHand|

; 210  :      {
; 211  :         pAdapter->m_Events |= EMAC_RX_TEARDOWN_EVENT;

  002ec	e59d3430	 ldr         r3, [sp, #0x430]
  002f0	e2833fe7	 add         r3, r3, #0xE7, 30
  002f4	e5933000	 ldr         r3, [r3]
  002f8	e3832002	 orr         r2, r3, #2
  002fc	e59d3430	 ldr         r3, [sp, #0x430]
  00300	e2833fe7	 add         r3, r3, #0xE7, 30
  00304	e5832000	 str         r2, [r3]

; 212  :         pAdapter->m_pEmacRegsBase->RX0CP = 0xfffffffc;

  00308	e59d3430	 ldr         r3, [sp, #0x430]
  0030c	e2833004	 add         r3, r3, #4
  00310	e5933000	 ldr         r3, [r3]
  00314	e2832e66	 add         r2, r3, #0x66, 28
  00318	e3e03003	 mvn         r3, #3
  0031c	e5823000	 str         r3, [r2]

; 213  :         return;

  00320	ea00025e	 b           |$LN36@RxIntrHand|
  00324		 |$LN34@RxIntrHand|
  00324		 |$LN33@RxIntrHand|

; 214  :      }   
; 215  :                 
; 216  :     do
; 217  :     {
; 218  :       /* Dequeue buffer from available buffers pool */
; 219  :       QUEUE_REMOVE(&pAdapter->m_RxBufsPool, pCurRxBuf);

  00324	e3a03000	 mov         r3, #0
  00328	e58d3010	 str         r3, [sp, #0x10]
  0032c	e59d3430	 ldr         r3, [sp, #0x430]
  00330	e2933f6f	 adds        r3, r3, #0x6F, 30
  00334	0a000022	 beq         |$LN30@RxIntrHand|
  00338	e59d3430	 ldr         r3, [sp, #0x430]
  0033c	e2833f6f	 add         r3, r3, #0x6F, 30
  00340	e5933000	 ldr         r3, [r3]
  00344	e3530000	 cmp         r3, #0
  00348	0a00001d	 beq         |$LN30@RxIntrHand|
  0034c	e59d3430	 ldr         r3, [sp, #0x430]
  00350	e2833f6f	 add         r3, r3, #0x6F, 30
  00354	e5933000	 ldr         r3, [r3]
  00358	e58d3010	 str         r3, [sp, #0x10]
  0035c	e59d3430	 ldr         r3, [sp, #0x430]
  00360	e2833f6f	 add         r3, r3, #0x6F, 30
  00364	e5931000	 ldr         r1, [r3]
  00368	e59d3430	 ldr         r3, [sp, #0x430]
  0036c	e2832f6f	 add         r2, r3, #0x6F, 30
  00370	e5913000	 ldr         r3, [r1]
  00374	e5823000	 str         r3, [r2]
  00378	e59d3430	 ldr         r3, [sp, #0x430]
  0037c	e2833f6f	 add         r3, r3, #0x6F, 30
  00380	e5933000	 ldr         r3, [r3]
  00384	e3530000	 cmp         r3, #0
  00388	1a000003	 bne         |$LN29@RxIntrHand|
  0038c	e59d3430	 ldr         r3, [sp, #0x430]
  00390	e2832d07	 add         r2, r3, #7, 26
  00394	e3a03000	 mov         r3, #0
  00398	e5823000	 str         r3, [r2]
  0039c		 |$LN29@RxIntrHand|
  0039c	e59d3430	 ldr         r3, [sp, #0x430]
  003a0	e2833f71	 add         r3, r3, #0x71, 30
  003a4	e5933000	 ldr         r3, [r3]
  003a8	e2432001	 sub         r2, r3, #1
  003ac	e59d3430	 ldr         r3, [sp, #0x430]
  003b0	e2833f71	 add         r3, r3, #0x71, 30
  003b4	e5832000	 str         r2, [r3]
  003b8	e59d2010	 ldr         r2, [sp, #0x10]
  003bc	e3a03000	 mov         r3, #0
  003c0	e5823000	 str         r3, [r2]
  003c4		 |$LN30@RxIntrHand|

; 220  :   
; 221  :         pNextRxBuf = (PEMAC_RXBUFS)(pAdapter->m_RxBufsPool.m_pHead);

  003c4	e59d3430	 ldr         r3, [sp, #0x430]
  003c8	e2833f6f	 add         r3, r3, #0x6F, 30
  003cc	e5933000	 ldr         r3, [r3]
  003d0	e58d342c	 str         r3, [sp, #0x42C]

; 222  : 
; 223  :       /* Extract the EMAC buffer descriptor information */
; 224  :       pCurDesc = (PEMACDESC)pCurRxBuf->m_EmacBufDes;

  003d4	e59d3010	 ldr         r3, [sp, #0x10]
  003d8	e2833010	 add         r3, r3, #0x10
  003dc	e5933000	 ldr         r3, [r3]
  003e0	e58d341c	 str         r3, [sp, #0x41C]

; 225  :       Status   = pCurDesc->PktFlgLen;

  003e4	e59d341c	 ldr         r3, [sp, #0x41C]
  003e8	e283300c	 add         r3, r3, #0xC
  003ec	e5933000	 ldr         r3, [r3]
  003f0	e58d3420	 str         r3, [sp, #0x420]

; 226  :       BufLen   = pCurDesc->BufOffLen & 0xFFFF;

  003f4	e59d341c	 ldr         r3, [sp, #0x41C]
  003f8	e2833008	 add         r3, r3, #8
  003fc	e5932000	 ldr         r2, [r3]
  00400	e3a03cff	 mov         r3, #0xFF, 24
  00404	e38330ff	 orr         r3, r3, #0xFF
  00408	e0023003	 and         r3, r2, r3
  0040c	e1a03803	 mov         r3, r3, lsl #16
  00410	e1a03823	 mov         r3, r3, lsr #16
  00414	e1cd30bc	 strh        r3, [sp, #0xC]

; 227  :       
; 228  :         /* Process for bad packet received  */
; 229  :         if ( 0 != (Status & EMAC_DSC_FLAG_SOP ))

  00418	e59d3420	 ldr         r3, [sp, #0x420]
  0041c	e3130102	 tst         r3, #2, 2
  00420	0a000022	 beq         |$LN28@RxIntrHand|

; 230  :         {
; 231  :             /* Process if a error in packet */
; 232  :             if ( 0 != (Status & EMAC_DSC_RX_ERROR_FRAME ))

  00424	e59d3420	 ldr         r3, [sp, #0x420]
  00428	e31307ff	 tst         r3, #0xFF, 14
  0042c	0a00000a	 beq         |$LN27@RxIntrHand|

; 233  :             {
; 234  :                 DEBUGMSG (DBG_INFO,
; 235  :                     (L"Error in packet \r\n"));

  00430	e59f3878	 ldr         r3, [pc, #0x878]
  00434	e5933440	 ldr         r3, [r3, #0x440]
  00438	e3130040	 tst         r3, #0x40
  0043c	0a000004	 beq         |$LN40@RxIntrHand|
  00440	e59f0870	 ldr         r0, [pc, #0x870]
  00444	eb000000	 bl          NKDbgPrintfW
  00448	e3a03001	 mov         r3, #1
  0044c	e58d3444	 str         r3, [sp, #0x444]
  00450	ea000001	 b           |$LN41@RxIntrHand|
  00454		 |$LN40@RxIntrHand|
  00454	e3a03000	 mov         r3, #0
  00458	e58d3444	 str         r3, [sp, #0x444]
  0045c		 |$LN41@RxIntrHand|
  0045c		 |$LN27@RxIntrHand|

; 236  :             }
; 237  :             /* Process if a teardown happened */
; 238  :             if ( 0 != (Status & EMAC_DSC_FLAG_TDOWNCMPLT ))

  0045c	e59d3420	 ldr         r3, [sp, #0x420]
  00460	e3130302	 tst         r3, #2, 6
  00464	0a000011	 beq         |$LN26@RxIntrHand|

; 239  :             {
; 240  :                 DEBUGMSG (DBG_INFO,
; 241  :                     (L"Teardown in packet \r\n"));

  00468	e59f3840	 ldr         r3, [pc, #0x840]
  0046c	e5933440	 ldr         r3, [r3, #0x440]
  00470	e3130040	 tst         r3, #0x40
  00474	0a000004	 beq         |$LN42@RxIntrHand|
  00478	e59f0834	 ldr         r0, [pc, #0x834]
  0047c	eb000000	 bl          NKDbgPrintfW
  00480	e3a03001	 mov         r3, #1
  00484	e58d3448	 str         r3, [sp, #0x448]
  00488	ea000001	 b           |$LN43@RxIntrHand|
  0048c		 |$LN42@RxIntrHand|
  0048c	e3a03000	 mov         r3, #0
  00490	e58d3448	 str         r3, [sp, #0x448]
  00494		 |$LN43@RxIntrHand|

; 242  :                     
; 243  :                 pAdapter->m_Events |= EMAC_RX_TEARDOWN_EVENT;

  00494	e59d3430	 ldr         r3, [sp, #0x430]
  00498	e2833fe7	 add         r3, r3, #0xE7, 30
  0049c	e5933000	 ldr         r3, [r3]
  004a0	e3832002	 orr         r2, r3, #2
  004a4	e59d3430	 ldr         r3, [sp, #0x430]
  004a8	e2833fe7	 add         r3, r3, #0xE7, 30
  004ac	e5832000	 str         r2, [r3]
  004b0		 |$LN26@RxIntrHand|
  004b0		 |$LN28@RxIntrHand|

; 244  :             }
; 245  :             
; 246  :         }
; 247  :         /* Process for single buffer packets */
; 248  :       
; 249  :         if ( ( 0 != (Status & EMAC_DSC_FLAG_SOP )) &&
; 250  :              ( 0 != (Status & EMAC_DSC_FLAG_EOP )) )                            

  004b0	e59d3420	 ldr         r3, [sp, #0x420]
  004b4	e3130102	 tst         r3, #2, 2
  004b8	0a00010d	 beq         |$LN25@RxIntrHand|
  004bc	e59d3420	 ldr         r3, [sp, #0x420]
  004c0	e3130101	 tst         r3, #1, 2
  004c4	0a00010a	 beq         |$LN25@RxIntrHand|

; 251  :         {
; 252  :             /* Deque from available packet pool a fresh packet  */
; 253  :             QUEUE_REMOVE(&pAdapter->m_RxPktPool, pRxPkt);

  004c8	e3a03000	 mov         r3, #0
  004cc	e58d3008	 str         r3, [sp, #8]
  004d0	e59d3430	 ldr         r3, [sp, #0x430]
  004d4	e2933e1b	 adds        r3, r3, #0x1B, 28
  004d8	0a000022	 beq         |$LN24@RxIntrHand|
  004dc	e59d3430	 ldr         r3, [sp, #0x430]
  004e0	e2833e1b	 add         r3, r3, #0x1B, 28
  004e4	e5933000	 ldr         r3, [r3]
  004e8	e3530000	 cmp         r3, #0
  004ec	0a00001d	 beq         |$LN24@RxIntrHand|
  004f0	e59d3430	 ldr         r3, [sp, #0x430]
  004f4	e2833e1b	 add         r3, r3, #0x1B, 28
  004f8	e5933000	 ldr         r3, [r3]
  004fc	e58d3008	 str         r3, [sp, #8]
  00500	e59d3430	 ldr         r3, [sp, #0x430]
  00504	e2833e1b	 add         r3, r3, #0x1B, 28
  00508	e5931000	 ldr         r1, [r3]
  0050c	e59d3430	 ldr         r3, [sp, #0x430]
  00510	e2832e1b	 add         r2, r3, #0x1B, 28
  00514	e5913000	 ldr         r3, [r1]
  00518	e5823000	 str         r3, [r2]
  0051c	e59d3430	 ldr         r3, [sp, #0x430]
  00520	e2833e1b	 add         r3, r3, #0x1B, 28
  00524	e5933000	 ldr         r3, [r3]
  00528	e3530000	 cmp         r3, #0
  0052c	1a000003	 bne         |$LN23@RxIntrHand|
  00530	e59d3430	 ldr         r3, [sp, #0x430]
  00534	e2832f6d	 add         r2, r3, #0x6D, 30
  00538	e3a03000	 mov         r3, #0
  0053c	e5823000	 str         r3, [r2]
  00540		 |$LN23@RxIntrHand|
  00540	e59d3430	 ldr         r3, [sp, #0x430]
  00544	e2833f6e	 add         r3, r3, #0x6E, 30
  00548	e5933000	 ldr         r3, [r3]
  0054c	e2432001	 sub         r2, r3, #1
  00550	e59d3430	 ldr         r3, [sp, #0x430]
  00554	e2833f6e	 add         r3, r3, #0x6E, 30
  00558	e5832000	 str         r2, [r3]
  0055c	e59d2008	 ldr         r2, [sp, #8]
  00560	e3a03000	 mov         r3, #0
  00564	e5823000	 str         r3, [r2]
  00568		 |$LN24@RxIntrHand|

; 254  : 
; 255  :             /* Initialise per packet maintained queue of bufs list */
; 256  :             QUEUE_INIT(&pRxPkt->m_BufsList);

  00568	e59d3008	 ldr         r3, [sp, #8]
  0056c	e2832008	 add         r2, r3, #8
  00570	e3a03000	 mov         r3, #0
  00574	e5823000	 str         r3, [r2]
  00578	e59d3008	 ldr         r3, [sp, #8]
  0057c	e283200c	 add         r2, r3, #0xC
  00580	e3a03000	 mov         r3, #0
  00584	e5823000	 str         r3, [r2]
  00588	e59d3008	 ldr         r3, [sp, #8]
  0058c	e2832010	 add         r2, r3, #0x10
  00590	e3a03000	 mov         r3, #0
  00594	e5823000	 str         r3, [r2]

; 257  :             
; 258  :             /* Getting the associated NDIS buffer from RxBuffer pool*/
; 259  :             NdisBuffer = (PNDIS_BUFFER)pCurRxBuf->m_BufHandle;

  00598	e59d3010	 ldr         r3, [sp, #0x10]
  0059c	e2833004	 add         r3, r3, #4
  005a0	e5933000	 ldr         r3, [r3]
  005a4	e58d3428	 str         r3, [sp, #0x428]

; 260  : 
; 261  :             /* Adjust the buffer length in the NDIS_BUFFER */
; 262  :             NdisAdjustBufferLength( NdisBuffer, BufLen);

  005a8	e59d3428	 ldr         r3, [sp, #0x428]
  005ac	e2832008	 add         r2, r3, #8
  005b0	e1dd30bc	 ldrh        r3, [sp, #0xC]
  005b4	e5823000	 str         r3, [r2]

; 263  : 
; 264  :             /* Also setting header size */
; 265  :             NDIS_SET_PACKET_HEADER_SIZE((PNDIS_PACKET)pRxPkt->m_PktHandle,
; 266  :                             EMAC_HEADER_SIZE);

  005b8	e59d3008	 ldr         r3, [sp, #8]
  005bc	e2831004	 add         r1, r3, #4
  005c0	e59d3008	 ldr         r3, [sp, #8]
  005c4	e2833004	 add         r3, r3, #4
  005c8	e5933000	 ldr         r3, [r3]
  005cc	e283301e	 add         r3, r3, #0x1E
  005d0	e1d330b0	 ldrh        r3, [r3]
  005d4	e1a02003	 mov         r2, r3
  005d8	e5913000	 ldr         r3, [r1]
  005dc	e0833002	 add         r3, r3, r2
  005e0	e2832010	 add         r2, r3, #0x10
  005e4	e3a0300e	 mov         r3, #0xE
  005e8	e5823000	 str         r3, [r2]

; 267  :             
; 268  :             /* Add it to array of packets */                   
; 269  :             NdisPktsArray[PacketArrayCount] = (PNDIS_PACKET)pRxPkt->m_PktHandle;

  005ec	e59d3008	 ldr         r3, [sp, #8]
  005f0	e2830004	 add         r0, r3, #4
  005f4	e28d3b01	 add         r3, sp, #1, 22
  005f8	e1d331b8	 ldrh        r3, [r3, #0x18]
  005fc	e1a01003	 mov         r1, r3
  00600	e3a03004	 mov         r3, #4
  00604	e0020391	 mul         r2, r1, r3
  00608	e28d3014	 add         r3, sp, #0x14
  0060c	e0832002	 add         r2, r3, r2
  00610	e5903000	 ldr         r3, [r0]
  00614	e5823000	 str         r3, [r2]

; 270  :         
; 271  : 
; 272  :             /* Also insert in to per packet maintained Buffer queue */
; 273  :             QUEUE_INSERT(&pRxPkt->m_BufsList,pCurRxBuf);

  00618	e59d3008	 ldr         r3, [sp, #8]
  0061c	e2933008	 adds        r3, r3, #8
  00620	0a00001f	 beq         |$LN22@RxIntrHand|
  00624	e59d3010	 ldr         r3, [sp, #0x10]
  00628	e3530000	 cmp         r3, #0
  0062c	0a00001c	 beq         |$LN22@RxIntrHand|
  00630	e59d3008	 ldr         r3, [sp, #8]
  00634	e2833008	 add         r3, r3, #8
  00638	e5933000	 ldr         r3, [r3]
  0063c	e3530000	 cmp         r3, #0
  00640	1a000004	 bne         |$LN21@RxIntrHand|
  00644	e59d3008	 ldr         r3, [sp, #8]
  00648	e2832008	 add         r2, r3, #8
  0064c	e59d3010	 ldr         r3, [sp, #0x10]
  00650	e5823000	 str         r3, [r2]
  00654	ea000004	 b           |$LN20@RxIntrHand|
  00658		 |$LN21@RxIntrHand|
  00658	e59d3008	 ldr         r3, [sp, #8]
  0065c	e283300c	 add         r3, r3, #0xC
  00660	e5932000	 ldr         r2, [r3]
  00664	e59d3010	 ldr         r3, [sp, #0x10]
  00668	e5823000	 str         r3, [r2]
  0066c		 |$LN20@RxIntrHand|
  0066c	e59d3008	 ldr         r3, [sp, #8]
  00670	e283200c	 add         r2, r3, #0xC
  00674	e59d3010	 ldr         r3, [sp, #0x10]
  00678	e5823000	 str         r3, [r2]
  0067c	e59d3008	 ldr         r3, [sp, #8]
  00680	e2833010	 add         r3, r3, #0x10
  00684	e5933000	 ldr         r3, [r3]
  00688	e2832001	 add         r2, r3, #1
  0068c	e59d3008	 ldr         r3, [sp, #8]
  00690	e2833010	 add         r3, r3, #0x10
  00694	e5832000	 str         r2, [r3]
  00698	e59d2010	 ldr         r2, [sp, #0x10]
  0069c	e3a03000	 mov         r3, #0
  006a0	e5823000	 str         r3, [r2]
  006a4		 |$LN22@RxIntrHand|

; 274  :                   
; 275  :             /* Get the HALPacket associated with this packet */
; 276  :              TempPtr = (PEMAC_RXPKTS *)(((PNDIS_PACKET)pRxPkt->m_PktHandle)->MiniportReserved);

  006a4	e59d3008	 ldr         r3, [sp, #8]
  006a8	e2833004	 add         r3, r3, #4
  006ac	e5933000	 ldr         r3, [r3]
  006b0	e2833020	 add         r3, r3, #0x20
  006b4	e58d3424	 str         r3, [sp, #0x424]

; 277  :              
; 278  :             /* 
; 279  :              * Assign back pointer from the NdisPacket to the
; 280  :              * HALPacket. This will be useful, when NDIS calls
; 281  :              * MiniportGetReturnedPackets function.
; 282  :              */
; 283  :              *TempPtr = pRxPkt;

  006b8	e59d2008	 ldr         r2, [sp, #8]
  006bc	e59d3424	 ldr         r3, [sp, #0x424]
  006c0	e5832000	 str         r2, [r3]

; 284  :             
; 285  :             /* Add it to packets buffer list */
; 286  :             NdisChainBufferAtFront(NdisPktsArray[PacketArrayCount],
; 287  :                                NdisBuffer);

  006c4	e59d3428	 ldr         r3, [sp, #0x428]
  006c8	e58d3438	 str         r3, [sp, #0x438]
  006cc		 |$LN19@RxIntrHand|
  006cc	e59d3438	 ldr         r3, [sp, #0x438]
  006d0	e5933000	 ldr         r3, [r3]
  006d4	e3530000	 cmp         r3, #0
  006d8	1a000000	 bne         |$LN17@RxIntrHand|
  006dc	ea000003	 b           |$LN18@RxIntrHand|
  006e0		 |$LN17@RxIntrHand|
  006e0	e59d3438	 ldr         r3, [sp, #0x438]
  006e4	e5933000	 ldr         r3, [r3]
  006e8	e58d3438	 str         r3, [sp, #0x438]
  006ec	eafffff6	 b           |$LN19@RxIntrHand|
  006f0		 |$LN18@RxIntrHand|
  006f0	e28d3b01	 add         r3, sp, #1, 22
  006f4	e1d331b8	 ldrh        r3, [r3, #0x18]
  006f8	e1a01003	 mov         r1, r3
  006fc	e3a03004	 mov         r3, #4
  00700	e0020391	 mul         r2, r1, r3
  00704	e28d3014	 add         r3, sp, #0x14
  00708	e0833002	 add         r3, r3, r2
  0070c	e5933000	 ldr         r3, [r3]
  00710	e2833008	 add         r3, r3, #8
  00714	e5933000	 ldr         r3, [r3]
  00718	e3530000	 cmp         r3, #0
  0071c	1a00000a	 bne         |$LN16@RxIntrHand|
  00720	e28d3b01	 add         r3, sp, #1, 22
  00724	e1d331b8	 ldrh        r3, [r3, #0x18]
  00728	e1a01003	 mov         r1, r3
  0072c	e3a03004	 mov         r3, #4
  00730	e0020391	 mul         r2, r1, r3
  00734	e28d3014	 add         r3, sp, #0x14
  00738	e0833002	 add         r3, r3, r2
  0073c	e5933000	 ldr         r3, [r3]
  00740	e283200c	 add         r2, r3, #0xC
  00744	e59d3438	 ldr         r3, [sp, #0x438]
  00748	e5823000	 str         r3, [r2]
  0074c		 |$LN16@RxIntrHand|
  0074c	e28d3b01	 add         r3, sp, #1, 22
  00750	e1d331b8	 ldrh        r3, [r3, #0x18]
  00754	e1a01003	 mov         r1, r3
  00758	e3a03004	 mov         r3, #4
  0075c	e0020391	 mul         r2, r1, r3
  00760	e28d3014	 add         r3, sp, #0x14
  00764	e0833002	 add         r3, r3, r2
  00768	e5933000	 ldr         r3, [r3]
  0076c	e2833008	 add         r3, r3, #8
  00770	e5932000	 ldr         r2, [r3]
  00774	e59d3438	 ldr         r3, [sp, #0x438]
  00778	e5832000	 str         r2, [r3]
  0077c	e28d3b01	 add         r3, sp, #1, 22
  00780	e1d331b8	 ldrh        r3, [r3, #0x18]
  00784	e1a01003	 mov         r1, r3
  00788	e3a03004	 mov         r3, #4
  0078c	e0020391	 mul         r2, r1, r3
  00790	e28d3014	 add         r3, sp, #0x14
  00794	e0833002	 add         r3, r3, r2
  00798	e5933000	 ldr         r3, [r3]
  0079c	e2832008	 add         r2, r3, #8
  007a0	e59d3428	 ldr         r3, [sp, #0x428]
  007a4	e5823000	 str         r3, [r2]
  007a8	e28d3b01	 add         r3, sp, #1, 22
  007ac	e1d331b8	 ldrh        r3, [r3, #0x18]
  007b0	e1a01003	 mov         r1, r3
  007b4	e3a03004	 mov         r3, #4
  007b8	e0020391	 mul         r2, r1, r3
  007bc	e28d3014	 add         r3, sp, #0x14
  007c0	e0833002	 add         r3, r3, r2
  007c4	e5933000	 ldr         r3, [r3]
  007c8	e283201c	 add         r2, r3, #0x1C
  007cc	e3a03000	 mov         r3, #0
  007d0	e5c23000	 strb        r3, [r2]

; 288  :           
; 289  :         
; 290  :             if(PacketArrayCount >= (pAdapter->m_NumRxIndicatePkts -4))

  007d4	e28d3b01	 add         r3, sp, #1, 22
  007d8	e1d331b8	 ldrh        r3, [r3, #0x18]
  007dc	e1a02003	 mov         r2, r3
  007e0	e59d3430	 ldr         r3, [sp, #0x430]
  007e4	e2833024	 add         r3, r3, #0x24
  007e8	e1d330b0	 ldrh        r3, [r3]
  007ec	e2433004	 sub         r3, r3, #4
  007f0	e1520003	 cmp         r2, r3
  007f4	ba000018	 blt         |$LN15@RxIntrHand|

; 291  :             {
; 292  :                      /* Set status as resources */
; 293  :                     NDIS_SET_PACKET_STATUS(NdisPktsArray[PacketArrayCount],
; 294  :                                                          NDIS_STATUS_RESOURCES );

  007f8	e28d3b01	 add         r3, sp, #1, 22
  007fc	e1d331b8	 ldrh        r3, [r3, #0x18]
  00800	e1a01003	 mov         r1, r3
  00804	e3a03004	 mov         r3, #4
  00808	e0020391	 mul         r2, r1, r3
  0080c	e28d3014	 add         r3, sp, #0x14
  00810	e0830002	 add         r0, r3, r2
  00814	e28d3b01	 add         r3, sp, #1, 22
  00818	e1d331b8	 ldrh        r3, [r3, #0x18]
  0081c	e1a01003	 mov         r1, r3
  00820	e3a03004	 mov         r3, #4
  00824	e0020391	 mul         r2, r1, r3
  00828	e28d3014	 add         r3, sp, #0x14
  0082c	e0833002	 add         r3, r3, r2
  00830	e5933000	 ldr         r3, [r3]
  00834	e283301e	 add         r3, r3, #0x1E
  00838	e1d330b0	 ldrh        r3, [r3]
  0083c	e1a02003	 mov         r2, r3
  00840	e5903000	 ldr         r3, [r0]
  00844	e0833002	 add         r3, r3, r2
  00848	e283201c	 add         r2, r3, #0x1C
  0084c	e3a03103	 mov         r3, #3, 2
  00850	e383309a	 orr         r3, r3, #0x9A
  00854	e5823000	 str         r3, [r2]

; 295  :                             
; 296  :             }       
; 297  :             else

  00858	ea000016	 b           |$LN14@RxIntrHand|
  0085c		 |$LN15@RxIntrHand|

; 298  :             {
; 299  :                 /* Set status as success */
; 300  :                 NDIS_SET_PACKET_STATUS(NdisPktsArray[PacketArrayCount],
; 301  :                                                          NDIS_STATUS_SUCCESS );

  0085c	e28d3b01	 add         r3, sp, #1, 22
  00860	e1d331b8	 ldrh        r3, [r3, #0x18]
  00864	e1a01003	 mov         r1, r3
  00868	e3a03004	 mov         r3, #4
  0086c	e0020391	 mul         r2, r1, r3
  00870	e28d3014	 add         r3, sp, #0x14
  00874	e0830002	 add         r0, r3, r2
  00878	e28d3b01	 add         r3, sp, #1, 22
  0087c	e1d331b8	 ldrh        r3, [r3, #0x18]
  00880	e1a01003	 mov         r1, r3
  00884	e3a03004	 mov         r3, #4
  00888	e0020391	 mul         r2, r1, r3
  0088c	e28d3014	 add         r3, sp, #0x14
  00890	e0833002	 add         r3, r3, r2
  00894	e5933000	 ldr         r3, [r3]
  00898	e283301e	 add         r3, r3, #0x1E
  0089c	e1d330b0	 ldrh        r3, [r3]
  008a0	e1a02003	 mov         r2, r3
  008a4	e5903000	 ldr         r3, [r0]
  008a8	e0833002	 add         r3, r3, r2
  008ac	e283201c	 add         r2, r3, #0x1C
  008b0	e3a03000	 mov         r3, #0
  008b4	e5823000	 str         r3, [r2]
  008b8		 |$LN14@RxIntrHand|

; 302  : 
; 303  :             }
; 304  :                  
; 305  :             PacketArrayCount++;

  008b8	e28d3b01	 add         r3, sp, #1, 22
  008bc	e1d331b8	 ldrh        r3, [r3, #0x18]
  008c0	e2833001	 add         r3, r3, #1
  008c4	e1a03803	 mov         r3, r3, lsl #16
  008c8	e1a03823	 mov         r3, r3, lsr #16
  008cc	e28dcb01	 add         r12, sp, #1, 22
  008d0	e1cc31b8	 strh        r3, [r12, #0x18]

; 306  : 
; 307  :             /* Acknowledge to channel completion register our last processed buffer */
; 308  :             pAdapter->m_pEmacRegsBase->RX0CP = pCurRxBuf->m_EmacBufDesPa;

  008d4	e59d3010	 ldr         r3, [sp, #0x10]
  008d8	e2831014	 add         r1, r3, #0x14
  008dc	e59d3430	 ldr         r3, [sp, #0x430]
  008e0	e2833004	 add         r3, r3, #4
  008e4	e5933000	 ldr         r3, [r3]
  008e8	e2832e66	 add         r2, r3, #0x66, 28
  008ec	e5913000	 ldr         r3, [r1]
  008f0	e5823000	 str         r3, [r2]
  008f4		 |$LN25@RxIntrHand|

; 309  :          } 
; 310  :         
; 311  :     } while ((NULL != pNextRxBuf) &&
; 312  :             (0 ==(EMAC_DSC_FLAG_OWNER & ((PEMACDESC)(pNextRxBuf->m_EmacBufDes))->PktFlgLen)) &&
; 313  :              (PacketArrayCount < NDIS_INDICATE_PKTS));

  008f4	e59d342c	 ldr         r3, [sp, #0x42C]
  008f8	e3530000	 cmp         r3, #0
  008fc	0a00000a	 beq         |$LN13@RxIntrHand|
  00900	e59d342c	 ldr         r3, [sp, #0x42C]
  00904	e2833010	 add         r3, r3, #0x10
  00908	e5933000	 ldr         r3, [r3]
  0090c	e283300c	 add         r3, r3, #0xC
  00910	e5933000	 ldr         r3, [r3]
  00914	e3130202	 tst         r3, #2, 4
  00918	1a000003	 bne         |$LN13@RxIntrHand|
  0091c	e28d3b01	 add         r3, sp, #1, 22
  00920	e1d331b8	 ldrh        r3, [r3, #0x18]
  00924	e3530c01	 cmp         r3, #1, 24
  00928	bafffe7d	 blt         |$LN33@RxIntrHand|
  0092c		 |$LN13@RxIntrHand|

; 314  :        
; 315  :     if (0 == PacketArrayCount)

  0092c	e28d3b01	 add         r3, sp, #1, 22
  00930	e1d331b8	 ldrh        r3, [r3, #0x18]
  00934	e3530000	 cmp         r3, #0
  00938	1a000000	 bne         |$LN12@RxIntrHand|

; 316  :     {
; 317  :         return;

  0093c	ea0000d7	 b           |$LN36@RxIntrHand|
  00940		 |$LN12@RxIntrHand|

; 318  :     }
; 319  :     
; 320  :     /* Indicate to NDIS */                        
; 321  :     NdisMIndicateReceivePacket(pAdapter->m_AdapterHandle , 
; 322  :                         NdisPktsArray,
; 323  :                         PacketArrayCount);

  00940	e28d2b01	 add         r2, sp, #1, 22
  00944	e1d221b8	 ldrh        r2, [r2, #0x18]
  00948	e28d1014	 add         r1, sp, #0x14
  0094c	e59d3430	 ldr         r3, [sp, #0x430]
  00950	e5930000	 ldr         r0, [r3]
  00954	e59d3430	 ldr         r3, [sp, #0x430]
  00958	e5933000	 ldr         r3, [r3]
  0095c	e2833f42	 add         r3, r3, #0x42, 30
  00960	e5933000	 ldr         r3, [r3]
  00964	e1a0e00f	 mov         lr, pc
  00968	e12fff13	 bx          r3

; 324  : 
; 325  :     /* Check if the NDIS has returned the ownership of any of
; 326  :      * the packets back to us.
; 327  :      */
; 328  :     for (Index = 0; Index < PacketArrayCount ; Index++ )

  0096c	e3a03000	 mov         r3, #0
  00970	e1cd30b4	 strh        r3, [sp, #4]
  00974	ea000004	 b           |$LN11@RxIntrHand|
  00978		 |$LN10@RxIntrHand|
  00978	e1dd30b4	 ldrh        r3, [sp, #4]
  0097c	e2833001	 add         r3, r3, #1
  00980	e1a03803	 mov         r3, r3, lsl #16
  00984	e1a03823	 mov         r3, r3, lsr #16
  00988	e1cd30b4	 strh        r3, [sp, #4]
  0098c		 |$LN11@RxIntrHand|
  0098c	e1dd30b4	 ldrh        r3, [sp, #4]
  00990	e1a02003	 mov         r2, r3
  00994	e28d3b01	 add         r3, sp, #1, 22
  00998	e1d331b8	 ldrh        r3, [r3, #0x18]
  0099c	e1520003	 cmp         r2, r3
  009a0	aa000080	 bge         |$LN9@RxIntrHand|

; 329  :     {
; 330  :         NDIS_STATUS ReturnStatus;
; 331  :         
; 332  :         ReturnStatus = NDIS_GET_PACKET_STATUS(NdisPktsArray[Index]);

  009a4	e1dd30b4	 ldrh        r3, [sp, #4]
  009a8	e1a01003	 mov         r1, r3
  009ac	e3a03004	 mov         r3, #4
  009b0	e0020391	 mul         r2, r1, r3
  009b4	e28d3014	 add         r3, sp, #0x14
  009b8	e0830002	 add         r0, r3, r2
  009bc	e1dd30b4	 ldrh        r3, [sp, #4]
  009c0	e1a01003	 mov         r1, r3
  009c4	e3a03004	 mov         r3, #4
  009c8	e0020391	 mul         r2, r1, r3
  009cc	e28d3014	 add         r3, sp, #0x14
  009d0	e0833002	 add         r3, r3, r2
  009d4	e5933000	 ldr         r3, [r3]
  009d8	e283301e	 add         r3, r3, #0x1E
  009dc	e1d330b0	 ldrh        r3, [r3]
  009e0	e1a02003	 mov         r2, r3
  009e4	e5903000	 ldr         r3, [r0]
  009e8	e0833002	 add         r3, r3, r2
  009ec	e283301c	 add         r3, r3, #0x1C
  009f0	e5933000	 ldr         r3, [r3]
  009f4	e58d343c	 str         r3, [sp, #0x43C]

; 333  :        
; 334  :         /* we can regain ownership of packets only for which pending status is
; 335  :          * not set
; 336  :          */
; 337  :         
; 338  :         if (ReturnStatus != NDIS_STATUS_PENDING)

  009f8	e59d243c	 ldr         r2, [sp, #0x43C]
  009fc	e3a03c01	 mov         r3, #1, 24
  00a00	e3833003	 orr         r3, r3, #3
  00a04	e1520003	 cmp         r2, r3
  00a08	0a000065	 beq         |$LN8@RxIntrHand|

; 339  :         {
; 340  :             
; 341  :             /* Get the HALPacket associated with this packet */
; 342  :             TempPtr = (PEMAC_RXPKTS *)(NdisPktsArray[Index]->MiniportReserved);

  00a0c	e1dd30b4	 ldrh        r3, [sp, #4]
  00a10	e1a01003	 mov         r1, r3
  00a14	e3a03004	 mov         r3, #4
  00a18	e0020391	 mul         r2, r1, r3
  00a1c	e28d3014	 add         r3, sp, #0x14
  00a20	e0833002	 add         r3, r3, r2
  00a24	e5933000	 ldr         r3, [r3]
  00a28	e2833020	 add         r3, r3, #0x20
  00a2c	e58d3424	 str         r3, [sp, #0x424]

; 343  :              
; 344  :             pTmpRxPkt = *TempPtr; 

  00a30	e59d3424	 ldr         r3, [sp, #0x424]
  00a34	e5933000	 ldr         r3, [r3]
  00a38	e58d3414	 str         r3, [sp, #0x414]

; 345  :                 
; 346  :             /* This has every information about packets information like
; 347  :              * buffers chained to it. This will be useful when we are adding
; 348  :              * associated buffers to EMAC buffer descriptor queue
; 349  :              */
; 350  :      
; 351  :             AddBufToRxQueue(pAdapter , pTmpRxPkt);

  00a3c	e59d1414	 ldr         r1, [sp, #0x414]
  00a40	e59d0430	 ldr         r0, [sp, #0x430]
  00a44	eb000000	 bl          AddBufToRxQueue

; 352  :             
; 353  :             /* Unchain buffer attached preventing memory leak */
; 354  :             NdisUnchainBufferAtFront(NdisPktsArray[Index],
; 355  :                             &NdisBuffer);

  00a48	e3a01b01	 mov         r1, #1, 22
  00a4c	e3811028	 orr         r1, r1, #0x28
  00a50	e08d1001	 add         r1, sp, r1
  00a54	e1dd30b4	 ldrh        r3, [sp, #4]
  00a58	e1a00003	 mov         r0, r3
  00a5c	e3a03004	 mov         r3, #4
  00a60	e0020390	 mul         r2, r0, r3
  00a64	e28d3014	 add         r3, sp, #0x14
  00a68	e0833002	 add         r3, r3, r2
  00a6c	e5930000	 ldr         r0, [r3]
  00a70	eb000000	 bl          NdisUnchainBufferAtFront

; 356  : 
; 357  :              /* 
; 358  :               * Reinitialize the NDIS packet for later use.
; 359  :               * This will remove the NdisBuffer Linkage from
; 360  :               * the NDIS Packet.
; 361  :               */
; 362  :             NdisReinitializePacket(NdisPktsArray[Index]);

  00a74	e1dd30b4	 ldrh        r3, [sp, #4]
  00a78	e1a01003	 mov         r1, r3
  00a7c	e3a03004	 mov         r3, #4
  00a80	e0020391	 mul         r2, r1, r3
  00a84	e28d3014	 add         r3, sp, #0x14
  00a88	e0833002	 add         r3, r3, r2
  00a8c	e5933000	 ldr         r3, [r3]
  00a90	e2832008	 add         r2, r3, #8
  00a94	e3a03000	 mov         r3, #0
  00a98	e5823000	 str         r3, [r2]
  00a9c	e1dd30b4	 ldrh        r3, [sp, #4]
  00aa0	e1a01003	 mov         r1, r3
  00aa4	e3a03004	 mov         r3, #4
  00aa8	e0020391	 mul         r2, r1, r3
  00aac	e28d3014	 add         r3, sp, #0x14
  00ab0	e0833002	 add         r3, r3, r2
  00ab4	e5933000	 ldr         r3, [r3]
  00ab8	e283201c	 add         r2, r3, #0x1C
  00abc	e3a03000	 mov         r3, #0
  00ac0	e5c23000	 strb        r3, [r2]

; 363  :             
; 364  :             /* Also clearing OOB data */
; 365  :             NdisZeroMemory(NDIS_OOB_DATA_FROM_PACKET(NdisPktsArray[Index]),
; 366  :                            sizeof(NDIS_PACKET_OOB_DATA));

  00ac4	e3a02020	 mov         r2, #0x20
  00ac8	e3a01000	 mov         r1, #0
  00acc	e1dd30b4	 ldrh        r3, [sp, #4]
  00ad0	e1a0e003	 mov         lr, r3
  00ad4	e3a03004	 mov         r3, #4
  00ad8	e000039e	 mul         r0, lr, r3
  00adc	e28d3014	 add         r3, sp, #0x14
  00ae0	e0834000	 add         r4, r3, r0
  00ae4	e1dd30b4	 ldrh        r3, [sp, #4]
  00ae8	e1a0e003	 mov         lr, r3
  00aec	e3a03004	 mov         r3, #4
  00af0	e000039e	 mul         r0, lr, r3
  00af4	e28d3014	 add         r3, sp, #0x14
  00af8	e0833000	 add         r3, r3, r0
  00afc	e5933000	 ldr         r3, [r3]
  00b00	e283301e	 add         r3, r3, #0x1E
  00b04	e1d330b0	 ldrh        r3, [r3]
  00b08	e1a00003	 mov         r0, r3
  00b0c	e5943000	 ldr         r3, [r4]
  00b10	e0830000	 add         r0, r3, r0
  00b14	eb000000	 bl          memset

; 367  :                 
; 368  :             /* Also insert in packet got in to packet pool */
; 369  :             QUEUE_INSERT(&pAdapter->m_RxPktPool,pTmpRxPkt);

  00b18	e59d3430	 ldr         r3, [sp, #0x430]
  00b1c	e2933e1b	 adds        r3, r3, #0x1B, 28
  00b20	0a00001f	 beq         |$LN7@RxIntrHand|
  00b24	e59d3414	 ldr         r3, [sp, #0x414]
  00b28	e3530000	 cmp         r3, #0
  00b2c	0a00001c	 beq         |$LN7@RxIntrHand|
  00b30	e59d3430	 ldr         r3, [sp, #0x430]
  00b34	e2833e1b	 add         r3, r3, #0x1B, 28
  00b38	e5933000	 ldr         r3, [r3]
  00b3c	e3530000	 cmp         r3, #0
  00b40	1a000004	 bne         |$LN6@RxIntrHand|
  00b44	e59d3430	 ldr         r3, [sp, #0x430]
  00b48	e2832e1b	 add         r2, r3, #0x1B, 28
  00b4c	e59d3414	 ldr         r3, [sp, #0x414]
  00b50	e5823000	 str         r3, [r2]
  00b54	ea000004	 b           |$LN5@RxIntrHand|
  00b58		 |$LN6@RxIntrHand|
  00b58	e59d3430	 ldr         r3, [sp, #0x430]
  00b5c	e2833f6d	 add         r3, r3, #0x6D, 30
  00b60	e5932000	 ldr         r2, [r3]
  00b64	e59d3414	 ldr         r3, [sp, #0x414]
  00b68	e5823000	 str         r3, [r2]
  00b6c		 |$LN5@RxIntrHand|
  00b6c	e59d3430	 ldr         r3, [sp, #0x430]
  00b70	e2832f6d	 add         r2, r3, #0x6D, 30
  00b74	e59d3414	 ldr         r3, [sp, #0x414]
  00b78	e5823000	 str         r3, [r2]
  00b7c	e59d3430	 ldr         r3, [sp, #0x430]
  00b80	e2833f6e	 add         r3, r3, #0x6E, 30
  00b84	e5933000	 ldr         r3, [r3]
  00b88	e2832001	 add         r2, r3, #1
  00b8c	e59d3430	 ldr         r3, [sp, #0x430]
  00b90	e2833f6e	 add         r3, r3, #0x6E, 30
  00b94	e5832000	 str         r2, [r3]
  00b98	e59d2414	 ldr         r2, [sp, #0x414]
  00b9c	e3a03000	 mov         r3, #0
  00ba0	e5823000	 str         r3, [r2]
  00ba4		 |$LN7@RxIntrHand|
  00ba4		 |$LN8@RxIntrHand|

; 370  :         }
; 371  :     }  

  00ba4	eaffff73	 b           |$LN10@RxIntrHand|
  00ba8		 |$LN9@RxIntrHand|

; 372  : 
; 373  :     /* Check for race condition - null RX0HDP and no EOQ flagged.  This appears to arise 
; 374  :        when the EOQ flag is set on the tail BD some time after the null 'next' pointer
; 375  :        is read by the EMAC.  If our EOQ check occurs after the 'next' pointer is set but 
; 376  :        before the EOQ flag is set by the EMAC then RX0HDP does not get reset. */
; 377  :     RXTailDescVa = ((PEMAC_RXBUFS)(pAdapter->m_RxBufsPool.m_pTail))->m_EmacBufDes;

  00ba8	e59d3430	 ldr         r3, [sp, #0x430]
  00bac	e2833d07	 add         r3, r3, #7, 26
  00bb0	e5933000	 ldr         r3, [r3]
  00bb4	e2833010	 add         r3, r3, #0x10
  00bb8	e5933000	 ldr         r3, [r3]
  00bbc	e58d3000	 str         r3, [sp]

; 378  :     if (pAdapter->m_pEmacRegsBase->RX0HDP == 0 &&
; 379  :         (((PEMACDESC)(RXTailDescVa))->PktFlgLen & EMAC_DSC_FLAG_EOQ) == 0)

  00bc0	e59d3430	 ldr         r3, [sp, #0x430]
  00bc4	e2833004	 add         r3, r3, #4
  00bc8	e5933000	 ldr         r3, [r3]
  00bcc	e2833e62	 add         r3, r3, #0x62, 28
  00bd0	e5933000	 ldr         r3, [r3]
  00bd4	e3530000	 cmp         r3, #0
  00bd8	1a000025	 bne         |$LN4@RxIntrHand|
  00bdc	e59d3000	 ldr         r3, [sp]
  00be0	e283300c	 add         r3, r3, #0xC
  00be4	e5933000	 ldr         r3, [r3]
  00be8	e3130201	 tst         r3, #1, 4
  00bec	1a000020	 bne         |$LN4@RxIntrHand|

; 380  :     {
; 381  :         /* Find the first free packet in the queue */
; 382  :         pCurRxBuf = (PEMAC_RXBUFS)(pAdapter->m_RxBufsPool.m_pHead);

  00bf0	e59d3430	 ldr         r3, [sp, #0x430]
  00bf4	e2833f6f	 add         r3, r3, #0x6F, 30
  00bf8	e5933000	 ldr         r3, [r3]
  00bfc	e58d3010	 str         r3, [sp, #0x10]
  00c00		 |$LN3@RxIntrHand|

; 383  :         while (pCurRxBuf && 0 == (((PEMACDESC)pCurRxBuf->m_EmacBufDes)->PktFlgLen & EMAC_DSC_FLAG_OWNER))

  00c00	e59d3010	 ldr         r3, [sp, #0x10]
  00c04	e3530000	 cmp         r3, #0
  00c08	0a00000a	 beq         |$LN2@RxIntrHand|
  00c0c	e59d3010	 ldr         r3, [sp, #0x10]
  00c10	e2833010	 add         r3, r3, #0x10
  00c14	e5933000	 ldr         r3, [r3]
  00c18	e283300c	 add         r3, r3, #0xC
  00c1c	e5933000	 ldr         r3, [r3]
  00c20	e3130202	 tst         r3, #2, 4
  00c24	1a000003	 bne         |$LN2@RxIntrHand|

; 384  :         {
; 385  :             pCurRxBuf = (PEMAC_RXBUFS)(pCurRxBuf->m_pNext);

  00c28	e59d3010	 ldr         r3, [sp, #0x10]
  00c2c	e5933000	 ldr         r3, [r3]
  00c30	e58d3010	 str         r3, [sp, #0x10]

; 386  :         }

  00c34	eafffff1	 b           |$LN3@RxIntrHand|
  00c38		 |$LN2@RxIntrHand|

; 387  :         if (!pCurRxBuf)

  00c38	e59d3010	 ldr         r3, [sp, #0x10]
  00c3c	e3530000	 cmp         r3, #0
  00c40	1a000003	 bne         |$LN1@RxIntrHand|

; 388  :         {
; 389  :             pCurRxBuf = (PEMAC_RXBUFS)(pAdapter->m_RxBufsPool.m_pHead);

  00c44	e59d3430	 ldr         r3, [sp, #0x430]
  00c48	e2833f6f	 add         r3, r3, #0x6F, 30
  00c4c	e5933000	 ldr         r3, [r3]
  00c50	e58d3010	 str         r3, [sp, #0x10]
  00c54		 |$LN1@RxIntrHand|

; 390  :         }
; 391  :         pAdapter->m_pEmacRegsBase->RX0HDP = pCurRxBuf->m_EmacBufDesPa;

  00c54	e59d3010	 ldr         r3, [sp, #0x10]
  00c58	e2831014	 add         r1, r3, #0x14
  00c5c	e59d3430	 ldr         r3, [sp, #0x430]
  00c60	e2833004	 add         r3, r3, #4
  00c64	e5933000	 ldr         r3, [r3]
  00c68	e2832e62	 add         r2, r3, #0x62, 28
  00c6c	e5913000	 ldr         r3, [r1]
  00c70	e5823000	 str         r3, [r2]
  00c74		 |$LN4@RxIntrHand|

; 392  :     }
; 393  : 
; 394  :     DEBUGMSG(DBG_FUNC,(L"<--RxIntrHandler\r\n"));

  00c74	e59f3034	 ldr         r3, [pc, #0x34]
  00c78	e5933440	 ldr         r3, [r3, #0x440]
  00c7c	e3130080	 tst         r3, #0x80
  00c80	0a000004	 beq         |$LN44@RxIntrHand|
  00c84	e59f0020	 ldr         r0, [pc, #0x20]
  00c88	eb000000	 bl          NKDbgPrintfW
  00c8c	e3a03001	 mov         r3, #1
  00c90	e58d344c	 str         r3, [sp, #0x44C]
  00c94	ea000001	 b           |$LN45@RxIntrHand|
  00c98		 |$LN44@RxIntrHand|
  00c98	e3a03000	 mov         r3, #0
  00c9c	e58d344c	 str         r3, [sp, #0x44C]
  00ca0		 |$LN45@RxIntrHand|
  00ca0		 |$LN36@RxIntrHand|

; 395  : }

  00ca0	e28dde45	 add         sp, sp, #0x45, 28
  00ca4	e89d6010	 ldmia       sp, {r4, sp, lr}
  00ca8	e12fff1e	 bx          lr
  00cac		 |$LN49@RxIntrHand|
  00cac		 |$LN50@RxIntrHand|
  00cac	00000000	 DCD         |??_C@_1CG@OJLIAIFO@?$AA?$DM?$AA?9?$AA?9?$AAR?$AAx?$AAI?$AAn?$AAt?$AAr?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@|
  00cb0		 |$LN51@RxIntrHand|
  00cb0	00000000	 DCD         |dpCurSettings|
  00cb4		 |$LN52@RxIntrHand|
  00cb4	00000000	 DCD         |??_C@_1CM@NEBDCKHF@?$AAT?$AAe?$AAa?$AAr?$AAd?$AAo?$AAw?$AAn?$AA?5?$AAi?$AAn?$AA?5?$AAp?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?5?$AA?$AN?$AA?6?$AA?$AA@|
  00cb8		 |$LN53@RxIntrHand|
  00cb8	00000000	 DCD         |??_C@_1CG@OINHPDJG@?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAi?$AAn?$AA?5?$AAp?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?5?$AA?$AN?$AA?6?$AA?$AA@|
  00cbc		 |$LN54@RxIntrHand|
  00cbc	00000000	 DCD         |??_C@_1CG@JJLCOMCI@?$AA?9?$AA?9?$AA?$DO?$AAR?$AAx?$AAI?$AAn?$AAt?$AAr?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@|
  00cc0		 |$M50740|

			 ENDP  ; |RxIntrHandler|

	EXPORT	|??_C@_1CG@KAPHBPGB@?$AA?$DM?$AA?9?$AA?9?$AAT?$AAx?$AAI?$AAn?$AAt?$AAr?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FI@GNFCNJKN@?$AAp?$AAC?$AAu?$AAr?$AAP?$AAk?$AAt?$AAI?$AAn?$AAf?$AAo?$AA?9?$AA?$DO?$AAm?$AA_?$AAP?$AAk?$AAt?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?5?$AAT?$AAX@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FE@KOIDHCEA@?$AAG?$AAo?$AAt?$AA?5?$AAT?$AAx?$AA?5?$AAi?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AAw?$AAi?$AAt?$AAh?$AAo?$AAu?$AAt?$AA?5?$AAp?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CG@NAPNPLBH@?$AA?9?$AA?9?$AA?$DO?$AAT?$AAx?$AAI?$AAn?$AAt?$AAr?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|TxIntrHandler|

  00010			 AREA	 |.pdata|, PDATA
|$T50763| DCD	|$LN36@TxIntrHand|
	DCD	0x40017e04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CG@KAPHBPGB@?$AA?$DM?$AA?9?$AA?9?$AAT?$AAx?$AAI?$AAn?$AAt?$AAr?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@| DCB "<"
	DCB	0x0, "-", 0x0, "-", 0x0, "T", 0x0, "x", 0x0, "I", 0x0, "n"
	DCB	0x0, "t", 0x0, "r", 0x0, "H", 0x0, "a", 0x0, "n", 0x0, "d"
	DCB	0x0, "l", 0x0, "e", 0x0, "r", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FI@GNFCNJKN@?$AAp?$AAC?$AAu?$AAr?$AAP?$AAk?$AAt?$AAI?$AAn?$AAf?$AAo?$AA?9?$AA?$DO?$AAm?$AA_?$AAP?$AAk?$AAt?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?5?$AAT?$AAX@| DCB "p"
	DCB	0x0, "C", 0x0, "u", 0x0, "r", 0x0, "P", 0x0, "k", 0x0, "t"
	DCB	0x0, "I", 0x0, "n", 0x0, "f", 0x0, "o", 0x0, "-", 0x0, ">"
	DCB	0x0, "m", 0x0, "_", 0x0, "P", 0x0, "k", 0x0, "t", 0x0, "H"
	DCB	0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e", 0x0, " "
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, " ", 0x0, "T"
	DCB	0x0, "X", 0x0, "0", 0x0, "C", 0x0, "P", 0x0, " ", 0x0, "%"
	DCB	0x0, "0", 0x0, "8", 0x0, "x", 0x0, " ", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FE@KOIDHCEA@?$AAG?$AAo?$AAt?$AA?5?$AAT?$AAx?$AA?5?$AAi?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AAw?$AAi?$AAt?$AAh?$AAo?$AAu?$AAt?$AA?5?$AAp?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?5@| DCB "G"
	DCB	0x0, "o", 0x0, "t", 0x0, " ", 0x0, "T", 0x0, "x", 0x0, " "
	DCB	0x0, "i", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r"
	DCB	0x0, "u", 0x0, "p", 0x0, "t", 0x0, " ", 0x0, "w", 0x0, "i"
	DCB	0x0, "t", 0x0, "h", 0x0, "o", 0x0, "u", 0x0, "t", 0x0, " "
	DCB	0x0, "p", 0x0, "a", 0x0, "c", 0x0, "k", 0x0, "e", 0x0, "t"
	DCB	0x0, " ", 0x0, "p", 0x0, "o", 0x0, "s", 0x0, "t", 0x0, "e"
	DCB	0x0, "d", 0x0, " ", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CG@NAPNPLBH@?$AA?9?$AA?9?$AA?$DO?$AAT?$AAx?$AAI?$AAn?$AAt?$AAr?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "-", 0x0, ">", 0x0, "T", 0x0, "x", 0x0, "I", 0x0, "n"
	DCB	0x0, "t", 0x0, "r", 0x0, "H", 0x0, "a", 0x0, "n", 0x0, "d"
	DCB	0x0, "l", 0x0, "e", 0x0, "r", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Odtp

  00cc0			 AREA	 |.text|, CODE, ARM

  00cc0		 |TxIntrHandler| PROC

; 407  : {

  00cc0		 |$LN36@TxIntrHand|
  00cc0	e1a0c00d	 mov         r12, sp
  00cc4	e92d0001	 stmdb       sp!, {r0}
  00cc8	e92d5000	 stmdb       sp!, {r12, lr}
  00ccc	e24dd04c	 sub         sp, sp, #0x4C
  00cd0		 |$M50760|

; 408  :     PEMAC_ADAPTER       pAdapter;
; 409  :     PQUEUE_T            QBufsList; 
; 410  :     PEMACDESC           pHeadTxDescPa;
; 411  :     PEMACDESC           pTailTxDescPa;
; 412  :     PEMACDESC           pSOPTxDesc;
; 413  :     PEMACDESC           pEOPTxDesc;
; 414  :     PEMAC_TXPKT         pCurPktInfo;
; 415  :     PEMACDESC           pCurTxDescVa;
; 416  :     PEMACDESC           pBufTailDescVa;
; 417  :     PEMAC_TXBUF         pNextTxBuf;
; 418  :     PEMAC_TXBUF         pCurTxBuf;
; 419  :     PEMAC_TXBUF         TxHeadBuf;
; 420  :     ULONG               Count;
; 421  :     ULONG               Status;
; 422  : 
; 423  :     DEBUGMSG (DBG_FUNC,(L"-->TxIntrHandler\r\n"));

  00cd0	e59f35cc	 ldr         r3, [pc, #0x5CC]
  00cd4	e5933440	 ldr         r3, [r3, #0x440]
  00cd8	e3130080	 tst         r3, #0x80
  00cdc	0a000004	 beq         |$LN24@TxIntrHand|
  00ce0	e59f05cc	 ldr         r0, [pc, #0x5CC]
  00ce4	eb000000	 bl          NKDbgPrintfW
  00ce8	e3a03001	 mov         r3, #1
  00cec	e58d3038	 str         r3, [sp, #0x38]
  00cf0	ea000001	 b           |$LN25@TxIntrHand|
  00cf4		 |$LN24@TxIntrHand|
  00cf4	e3a03000	 mov         r3, #0
  00cf8	e58d3038	 str         r3, [sp, #0x38]
  00cfc		 |$LN25@TxIntrHand|

; 424  : 
; 425  :     pAdapter = (PEMAC_ADAPTER)MiniportAdapterContext;      

  00cfc	e59d3054	 ldr         r3, [sp, #0x54]
  00d00	e58d3030	 str         r3, [sp, #0x30]

; 426  :     
; 427  :      /* Acquire the send lock */
; 428  :     NdisAcquireSpinLock(&pAdapter->m_SendLock); 

  00d04	e59d3030	 ldr         r3, [sp, #0x30]
  00d08	e283006c	 add         r0, r3, #0x6C
  00d0c	eb000000	 bl          NdisAcquireSpinLock

; 429  :     /* Check if it is teardown interrupt then clear it 
; 430  :      * and return 
; 431  :      */
; 432  :     if(0xfffffffc == pAdapter->m_pEmacRegsBase->TX0CP)

  00d10	e59d3030	 ldr         r3, [sp, #0x30]
  00d14	e2833004	 add         r3, r3, #4
  00d18	e5933000	 ldr         r3, [r3]
  00d1c	e2833d19	 add         r3, r3, #0x19, 26
  00d20	e5933000	 ldr         r3, [r3]
  00d24	e3730004	 cmn         r3, #4
  00d28	1a00000d	 bne         |$LN21@TxIntrHand|

; 433  :     {
; 434  :         pAdapter->m_Events |= EMAC_TX_TEARDOWN_EVENT;

  00d2c	e59d3030	 ldr         r3, [sp, #0x30]
  00d30	e2833fe7	 add         r3, r3, #0xE7, 30
  00d34	e5933000	 ldr         r3, [r3]
  00d38	e3832001	 orr         r2, r3, #1
  00d3c	e59d3030	 ldr         r3, [sp, #0x30]
  00d40	e2833fe7	 add         r3, r3, #0xE7, 30
  00d44	e5832000	 str         r2, [r3]

; 435  :         pAdapter->m_pEmacRegsBase->TX0CP = 0xfffffffc;

  00d48	e59d3030	 ldr         r3, [sp, #0x30]
  00d4c	e2833004	 add         r3, r3, #4
  00d50	e5933000	 ldr         r3, [r3]
  00d54	e2832d19	 add         r2, r3, #0x19, 26
  00d58	e3e03003	 mvn         r3, #3
  00d5c	e5823000	 str         r3, [r2]

; 436  :         goto end;

  00d60	ea000148	 b           |$end$50427|
  00d64		 |$LN21@TxIntrHand|
  00d64		 |$LN20@TxIntrHand|

; 437  :     } 
; 438  :                 
; 439  :     do
; 440  :     {
; 441  :         if(0 == QUEUE_COUNT(&pAdapter->m_TxPostedPktPool))

  00d64	e59d3030	 ldr         r3, [sp, #0x30]
  00d68	e2833f7a	 add         r3, r3, #0x7A, 30
  00d6c	e5933000	 ldr         r3, [r3]
  00d70	e3530000	 cmp         r3, #0
  00d74	1a00000b	 bne         |$LN17@TxIntrHand|

; 442  :         {
; 443  :           DEBUGMSG (DBG_INFO,(L"Got Tx interrupt without packet posted \r\n"));  

  00d78	e59f3524	 ldr         r3, [pc, #0x524]
  00d7c	e5933440	 ldr         r3, [r3, #0x440]
  00d80	e3130040	 tst         r3, #0x40
  00d84	0a000004	 beq         |$LN26@TxIntrHand|
  00d88	e59f0520	 ldr         r0, [pc, #0x520]
  00d8c	eb000000	 bl          NKDbgPrintfW
  00d90	e3a03001	 mov         r3, #1
  00d94	e58d303c	 str         r3, [sp, #0x3C]
  00d98	ea000001	 b           |$LN27@TxIntrHand|
  00d9c		 |$LN26@TxIntrHand|
  00d9c	e3a03000	 mov         r3, #0
  00da0	e58d303c	 str         r3, [sp, #0x3C]
  00da4		 |$LN27@TxIntrHand|

; 444  :           goto end;

  00da4	ea000137	 b           |$end$50427|
  00da8		 |$LN17@TxIntrHand|

; 445  :         
; 446  :         }
; 447  :         /* Dequeue packet from already  posted packets  pool */
; 448  :         QUEUE_REMOVE(&pAdapter->m_TxPostedPktPool, pCurPktInfo);

  00da8	e3a03000	 mov         r3, #0
  00dac	e58d3008	 str         r3, [sp, #8]
  00db0	e59d3030	 ldr         r3, [sp, #0x30]
  00db4	e2933e1e	 adds        r3, r3, #0x1E, 28
  00db8	0a000022	 beq         |$LN16@TxIntrHand|
  00dbc	e59d3030	 ldr         r3, [sp, #0x30]
  00dc0	e2833e1e	 add         r3, r3, #0x1E, 28
  00dc4	e5933000	 ldr         r3, [r3]
  00dc8	e3530000	 cmp         r3, #0
  00dcc	0a00001d	 beq         |$LN16@TxIntrHand|
  00dd0	e59d3030	 ldr         r3, [sp, #0x30]
  00dd4	e2833e1e	 add         r3, r3, #0x1E, 28
  00dd8	e5933000	 ldr         r3, [r3]
  00ddc	e58d3008	 str         r3, [sp, #8]
  00de0	e59d3030	 ldr         r3, [sp, #0x30]
  00de4	e2833e1e	 add         r3, r3, #0x1E, 28
  00de8	e5931000	 ldr         r1, [r3]
  00dec	e59d3030	 ldr         r3, [sp, #0x30]
  00df0	e2832e1e	 add         r2, r3, #0x1E, 28
  00df4	e5913000	 ldr         r3, [r1]
  00df8	e5823000	 str         r3, [r2]
  00dfc	e59d3030	 ldr         r3, [sp, #0x30]
  00e00	e2833e1e	 add         r3, r3, #0x1E, 28
  00e04	e5933000	 ldr         r3, [r3]
  00e08	e3530000	 cmp         r3, #0
  00e0c	1a000003	 bne         |$LN15@TxIntrHand|
  00e10	e59d3030	 ldr         r3, [sp, #0x30]
  00e14	e2832f79	 add         r2, r3, #0x79, 30
  00e18	e3a03000	 mov         r3, #0
  00e1c	e5823000	 str         r3, [r2]
  00e20		 |$LN15@TxIntrHand|
  00e20	e59d3030	 ldr         r3, [sp, #0x30]
  00e24	e2833f7a	 add         r3, r3, #0x7A, 30
  00e28	e5933000	 ldr         r3, [r3]
  00e2c	e2432001	 sub         r2, r3, #1
  00e30	e59d3030	 ldr         r3, [sp, #0x30]
  00e34	e2833f7a	 add         r3, r3, #0x7A, 30
  00e38	e5832000	 str         r2, [r3]
  00e3c	e59d2008	 ldr         r2, [sp, #8]
  00e40	e3a03000	 mov         r3, #0
  00e44	e5823000	 str         r3, [r2]
  00e48		 |$LN16@TxIntrHand|

; 449  :             
; 450  :         /* Extract the EMAC buffer descriptor information */
; 451  :         QBufsList      = &pCurPktInfo->m_BufsList;

  00e48	e59d3008	 ldr         r3, [sp, #8]
  00e4c	e2833008	 add         r3, r3, #8
  00e50	e58d3034	 str         r3, [sp, #0x34]

; 452  :         pHeadTxDescPa  = (PEMACDESC)((PEMAC_TXBUF)(QBufsList->m_pHead))->m_EmacBufDesPa;

  00e54	e59d3034	 ldr         r3, [sp, #0x34]
  00e58	e5933000	 ldr         r3, [r3]
  00e5c	e2833014	 add         r3, r3, #0x14
  00e60	e5933000	 ldr         r3, [r3]
  00e64	e58d3000	 str         r3, [sp]

; 453  :         pTailTxDescPa  = (PEMACDESC)((PEMAC_TXBUF)(QBufsList->m_pTail))->m_EmacBufDesPa;

  00e68	e59d3034	 ldr         r3, [sp, #0x34]
  00e6c	e2833004	 add         r3, r3, #4
  00e70	e5933000	 ldr         r3, [r3]
  00e74	e2833014	 add         r3, r3, #0x14
  00e78	e5933000	 ldr         r3, [r3]
  00e7c	e58d3018	 str         r3, [sp, #0x18]

; 454  :         
; 455  :         pSOPTxDesc    = (PEMACDESC)((PEMAC_TXBUF)(QBufsList->m_pHead))->m_EmacBufDes;

  00e80	e59d3034	 ldr         r3, [sp, #0x34]
  00e84	e5933000	 ldr         r3, [r3]
  00e88	e2833010	 add         r3, r3, #0x10
  00e8c	e5933000	 ldr         r3, [r3]
  00e90	e58d300c	 str         r3, [sp, #0xC]

; 456  :         pEOPTxDesc    = (PEMACDESC)((PEMAC_TXBUF)(QBufsList->m_pTail))->m_EmacBufDes; 

  00e94	e59d3034	 ldr         r3, [sp, #0x34]
  00e98	e2833004	 add         r3, r3, #4
  00e9c	e5933000	 ldr         r3, [r3]
  00ea0	e2833010	 add         r3, r3, #0x10
  00ea4	e5933000	 ldr         r3, [r3]
  00ea8	e58d301c	 str         r3, [sp, #0x1C]

; 457  : 
; 458  :         Status   = pSOPTxDesc->PktFlgLen;

  00eac	e59d300c	 ldr         r3, [sp, #0xC]
  00eb0	e283300c	 add         r3, r3, #0xC
  00eb4	e5933000	 ldr         r3, [r3]
  00eb8	e58d3020	 str         r3, [sp, #0x20]

; 459  :         /* Extract the flags and see if teardown has happened */
; 460  :         
; 461  :         if ( 0 != (Status & EMAC_DSC_FLAG_SOP ))

  00ebc	e59d3020	 ldr         r3, [sp, #0x20]
  00ec0	e3130102	 tst         r3, #2, 2
  00ec4	0a000015	 beq         |$LN14@TxIntrHand|

; 462  :         {
; 463  :             /* Process if a teardown happened */
; 464  :             if ( 0 != (Status & EMAC_DSC_FLAG_TDOWNCMPLT ))

  00ec8	e59d3020	 ldr         r3, [sp, #0x20]
  00ecc	e3130302	 tst         r3, #2, 6
  00ed0	0a000012	 beq         |$LN13@TxIntrHand|

; 465  :             {
; 466  :             DEBUGMSG (DBG_INFO,(L"Teardown in packet \r\n"));

  00ed4	e59f33c8	 ldr         r3, [pc, #0x3C8]
  00ed8	e5933440	 ldr         r3, [r3, #0x440]
  00edc	e3130040	 tst         r3, #0x40
  00ee0	0a000004	 beq         |$LN28@TxIntrHand|
  00ee4	e59f03c0	 ldr         r0, [pc, #0x3C0]
  00ee8	eb000000	 bl          NKDbgPrintfW
  00eec	e3a03001	 mov         r3, #1
  00ef0	e58d3040	 str         r3, [sp, #0x40]
  00ef4	ea000001	 b           |$LN29@TxIntrHand|
  00ef8		 |$LN28@TxIntrHand|
  00ef8	e3a03000	 mov         r3, #0
  00efc	e58d3040	 str         r3, [sp, #0x40]
  00f00		 |$LN29@TxIntrHand|

; 467  :         
; 468  :             pAdapter->m_Events |= EMAC_TX_TEARDOWN_EVENT;

  00f00	e59d3030	 ldr         r3, [sp, #0x30]
  00f04	e2833fe7	 add         r3, r3, #0xE7, 30
  00f08	e5933000	 ldr         r3, [r3]
  00f0c	e3832001	 orr         r2, r3, #1
  00f10	e59d3030	 ldr         r3, [sp, #0x30]
  00f14	e2833fe7	 add         r3, r3, #0xE7, 30
  00f18	e5832000	 str         r2, [r3]

; 469  :             goto end;

  00f1c	ea0000d9	 b           |$end$50427|
  00f20		 |$LN13@TxIntrHand|
  00f20		 |$LN14@TxIntrHand|

; 470  :             
; 471  :             }
; 472  :         }
; 473  : 
; 474  :         Status   = pEOPTxDesc->PktFlgLen;

  00f20	e59d301c	 ldr         r3, [sp, #0x1C]
  00f24	e283300c	 add         r3, r3, #0xC
  00f28	e5933000	 ldr         r3, [r3]
  00f2c	e58d3020	 str         r3, [sp, #0x20]

; 475  : 
; 476  :         if ( 0 != (Status & EMAC_DSC_FLAG_EOQ ))

  00f30	e59d3020	 ldr         r3, [sp, #0x20]
  00f34	e3130201	 tst         r3, #1, 4
  00f38	0a000012	 beq         |$LN12@TxIntrHand|

; 477  :         {
; 478  :             /* Queue has been halted Let others can proceed if there is/are any */
; 479  :             if(0 != QUEUE_COUNT(&pAdapter->m_TxPostedPktPool))

  00f3c	e59d3030	 ldr         r3, [sp, #0x30]
  00f40	e2833f7a	 add         r3, r3, #0x7A, 30
  00f44	e5933000	 ldr         r3, [r3]
  00f48	e3530000	 cmp         r3, #0
  00f4c	0a00000d	 beq         |$LN11@TxIntrHand|

; 480  :             {
; 481  :                 TxHeadBuf = (PEMAC_TXBUF)(((PEMAC_TXPKT)(pAdapter->m_TxPostedPktPool.m_pHead))->m_BufsList).m_pHead; 

  00f50	e59d3030	 ldr         r3, [sp, #0x30]
  00f54	e2833e1e	 add         r3, r3, #0x1E, 28
  00f58	e5933000	 ldr         r3, [r3]
  00f5c	e2833008	 add         r3, r3, #8
  00f60	e5933000	 ldr         r3, [r3]
  00f64	e58d3014	 str         r3, [sp, #0x14]

; 482  :                 pAdapter->m_pEmacRegsBase->TX0HDP = TxHeadBuf->m_EmacBufDesPa;

  00f68	e59d3014	 ldr         r3, [sp, #0x14]
  00f6c	e2831014	 add         r1, r3, #0x14
  00f70	e59d3030	 ldr         r3, [sp, #0x30]
  00f74	e2833004	 add         r3, r3, #4
  00f78	e5933000	 ldr         r3, [r3]
  00f7c	e2832c06	 add         r2, r3, #6, 24
  00f80	e5913000	 ldr         r3, [r1]
  00f84	e5823000	 str         r3, [r2]
  00f88		 |$LN11@TxIntrHand|
  00f88		 |$LN12@TxIntrHand|

; 483  :             }
; 484  :          }
; 485  :         /* Acknowledge to channel completion register our last processed buffer */
; 486  :         
; 487  :         pAdapter->m_pEmacRegsBase->TX0CP = (UINT32)pTailTxDescPa;

  00f88	e59d3030	 ldr         r3, [sp, #0x30]
  00f8c	e2833004	 add         r3, r3, #4
  00f90	e5933000	 ldr         r3, [r3]
  00f94	e2832d19	 add         r2, r3, #0x19, 26
  00f98	e59d3018	 ldr         r3, [sp, #0x18]
  00f9c	e5823000	 str         r3, [r2]

; 488  : 
; 489  :         DEBUGMSG(DBG_INFO, (L"pCurPktInfo->m_PktHandle %08x TX0CP %08x \r\n",
; 490  :             pCurPktInfo->m_PktHandle,pTailTxDescPa));

  00fa0	e59f32fc	 ldr         r3, [pc, #0x2FC]
  00fa4	e5933440	 ldr         r3, [r3, #0x440]
  00fa8	e3130040	 tst         r3, #0x40
  00fac	0a000008	 beq         |$LN30@TxIntrHand|
  00fb0	e59d2018	 ldr         r2, [sp, #0x18]
  00fb4	e59d3008	 ldr         r3, [sp, #8]
  00fb8	e2833004	 add         r3, r3, #4
  00fbc	e5931000	 ldr         r1, [r3]
  00fc0	e59f02e0	 ldr         r0, [pc, #0x2E0]
  00fc4	eb000000	 bl          NKDbgPrintfW
  00fc8	e3a03001	 mov         r3, #1
  00fcc	e58d3044	 str         r3, [sp, #0x44]
  00fd0	ea000001	 b           |$LN31@TxIntrHand|
  00fd4		 |$LN30@TxIntrHand|
  00fd4	e3a03000	 mov         r3, #0
  00fd8	e58d3044	 str         r3, [sp, #0x44]
  00fdc		 |$LN31@TxIntrHand|

; 491  :     
; 492  : 
; 493  :         /* We can reuse this  packet info structure */                       
; 494  :         QUEUE_INSERT(&pAdapter->m_TxPktsInfoPool,pCurPktInfo);

  00fdc	e59d3030	 ldr         r3, [sp, #0x30]
  00fe0	e2933f75	 adds        r3, r3, #0x75, 30
  00fe4	0a00001f	 beq         |$LN10@TxIntrHand|
  00fe8	e59d3008	 ldr         r3, [sp, #8]
  00fec	e3530000	 cmp         r3, #0
  00ff0	0a00001c	 beq         |$LN10@TxIntrHand|
  00ff4	e59d3030	 ldr         r3, [sp, #0x30]
  00ff8	e2833f75	 add         r3, r3, #0x75, 30
  00ffc	e5933000	 ldr         r3, [r3]
  01000	e3530000	 cmp         r3, #0
  01004	1a000004	 bne         |$LN9@TxIntrHand|
  01008	e59d3030	 ldr         r3, [sp, #0x30]
  0100c	e2832f75	 add         r2, r3, #0x75, 30
  01010	e59d3008	 ldr         r3, [sp, #8]
  01014	e5823000	 str         r3, [r2]
  01018	ea000004	 b           |$LN8@TxIntrHand|
  0101c		 |$LN9@TxIntrHand|
  0101c	e59d3030	 ldr         r3, [sp, #0x30]
  01020	e2833f76	 add         r3, r3, #0x76, 30
  01024	e5932000	 ldr         r2, [r3]
  01028	e59d3008	 ldr         r3, [sp, #8]
  0102c	e5823000	 str         r3, [r2]
  01030		 |$LN8@TxIntrHand|
  01030	e59d3030	 ldr         r3, [sp, #0x30]
  01034	e2832f76	 add         r2, r3, #0x76, 30
  01038	e59d3008	 ldr         r3, [sp, #8]
  0103c	e5823000	 str         r3, [r2]
  01040	e59d3030	 ldr         r3, [sp, #0x30]
  01044	e2833f77	 add         r3, r3, #0x77, 30
  01048	e5933000	 ldr         r3, [r3]
  0104c	e2832001	 add         r2, r3, #1
  01050	e59d3030	 ldr         r3, [sp, #0x30]
  01054	e2833f77	 add         r3, r3, #0x77, 30
  01058	e5832000	 str         r2, [r3]
  0105c	e59d2008	 ldr         r2, [sp, #8]
  01060	e3a03000	 mov         r3, #0
  01064	e5823000	 str         r3, [r2]
  01068		 |$LN10@TxIntrHand|

; 495  :         
; 496  :         /* We can also reuse associated Tx buffers also 
; 497  :          * But before that we have to recycle the descriptor 
; 498  :          * information 
; 499  :          */
; 500  :         pNextTxBuf=(PEMAC_TXBUF)(QBufsList->m_pHead);

  01068	e59d3034	 ldr         r3, [sp, #0x34]
  0106c	e5933000	 ldr         r3, [r3]
  01070	e58d3004	 str         r3, [sp, #4]

; 501  :         
; 502  :         for(Count = QBufsList->m_Count; Count != 0 ;Count--)

  01074	e59d3034	 ldr         r3, [sp, #0x34]
  01078	e2833008	 add         r3, r3, #8
  0107c	e5933000	 ldr         r3, [r3]
  01080	e58d3010	 str         r3, [sp, #0x10]
  01084	ea000002	 b           |$LN7@TxIntrHand|
  01088		 |$LN6@TxIntrHand|
  01088	e59d3010	 ldr         r3, [sp, #0x10]
  0108c	e2433001	 sub         r3, r3, #1
  01090	e58d3010	 str         r3, [sp, #0x10]
  01094		 |$LN7@TxIntrHand|
  01094	e59d3010	 ldr         r3, [sp, #0x10]
  01098	e3530000	 cmp         r3, #0
  0109c	0a00001d	 beq         |$LN5@TxIntrHand|

; 503  :         {
; 504  :             pCurTxBuf                   = pNextTxBuf;

  010a0	e59d3004	 ldr         r3, [sp, #4]
  010a4	e58d3024	 str         r3, [sp, #0x24]

; 505  :             pCurTxDescVa                = (PEMACDESC)pCurTxBuf->m_EmacBufDes;

  010a8	e59d3024	 ldr         r3, [sp, #0x24]
  010ac	e2833010	 add         r3, r3, #0x10
  010b0	e5933000	 ldr         r3, [r3]
  010b4	e58d3028	 str         r3, [sp, #0x28]

; 506  :             pCurTxDescVa->pBuffer       = 0;

  010b8	e59d3028	 ldr         r3, [sp, #0x28]
  010bc	e2832004	 add         r2, r3, #4
  010c0	e3a03000	 mov         r3, #0
  010c4	e5823000	 str         r3, [r2]

; 507  :             pCurTxDescVa->BufOffLen     = EMAC_MAX_ETHERNET_PKT_SIZE;

  010c8	e59d3028	 ldr         r3, [sp, #0x28]
  010cc	e2832008	 add         r2, r3, #8
  010d0	e3a03c05	 mov         r3, #5, 24
  010d4	e38330ea	 orr         r3, r3, #0xEA
  010d8	e5823000	 str         r3, [r2]

; 508  :             pCurTxDescVa->PktFlgLen     = 0;

  010dc	e59d3028	 ldr         r3, [sp, #0x28]
  010e0	e283200c	 add         r2, r3, #0xC
  010e4	e3a03000	 mov         r3, #0
  010e8	e5823000	 str         r3, [r2]

; 509  : 
; 510  :             NdisZeroMemory((PVOID)(pCurTxBuf->m_BufLogicalAddress),
; 511  :                                 EMAC_MAX_ETHERNET_PKT_SIZE);

  010ec	e3a02c05	 mov         r2, #5, 24
  010f0	e38220ea	 orr         r2, r2, #0xEA
  010f4	e3a01000	 mov         r1, #0
  010f8	e59d3024	 ldr         r3, [sp, #0x24]
  010fc	e2833008	 add         r3, r3, #8
  01100	e5930000	 ldr         r0, [r3]
  01104	eb000000	 bl          memset

; 512  :             pNextTxBuf = (PEMAC_TXBUF)((PSLINK_T)pCurTxBuf)->m_pLink;

  01108	e59d3024	 ldr         r3, [sp, #0x24]
  0110c	e5933000	 ldr         r3, [r3]
  01110	e58d3004	 str         r3, [sp, #4]

; 513  :             
; 514  :         }

  01114	eaffffdb	 b           |$LN6@TxIntrHand|
  01118		 |$LN5@TxIntrHand|

; 515  :         pCurTxDescVa->pNext = 0;  

  01118	e59d2028	 ldr         r2, [sp, #0x28]
  0111c	e3a03000	 mov         r3, #0
  01120	e5823000	 str         r3, [r2]

; 516  :         /* Also relinking chain */
; 517  :         if(0 != QUEUE_COUNT(&pAdapter->m_TxBufInfoPool))

  01124	e59d3030	 ldr         r3, [sp, #0x30]
  01128	e2833e1d	 add         r3, r3, #0x1D, 28
  0112c	e5933000	 ldr         r3, [r3]
  01130	e3530000	 cmp         r3, #0
  01134	0a000008	 beq         |$LN4@TxIntrHand|

; 518  :         {
; 519  :             pBufTailDescVa =(PEMACDESC)((PEMAC_TXBUF)(pAdapter->m_TxBufInfoPool.m_pTail))->m_EmacBufDes;

  01138	e59d3030	 ldr         r3, [sp, #0x30]
  0113c	e2833f73	 add         r3, r3, #0x73, 30
  01140	e5933000	 ldr         r3, [r3]
  01144	e2833010	 add         r3, r3, #0x10
  01148	e5933000	 ldr         r3, [r3]
  0114c	e58d302c	 str         r3, [sp, #0x2C]

; 520  :             pBufTailDescVa->pNext = pHeadTxDescPa;

  01150	e59d2000	 ldr         r2, [sp]
  01154	e59d302c	 ldr         r3, [sp, #0x2C]
  01158	e5832000	 str         r2, [r3]
  0115c		 |$LN4@TxIntrHand|

; 521  :         }
; 522  :         
; 523  :         QUEUE_INSERT_QUEUE(&pAdapter->m_TxBufInfoPool,QBufsList);

  0115c	e59d3030	 ldr         r3, [sp, #0x30]
  01160	e2933f72	 adds        r3, r3, #0x72, 30
  01164	0a000023	 beq         |$LN3@TxIntrHand|
  01168	e59d3034	 ldr         r3, [sp, #0x34]
  0116c	e3530000	 cmp         r3, #0
  01170	0a000020	 beq         |$LN3@TxIntrHand|
  01174	e59d3030	 ldr         r3, [sp, #0x30]
  01178	e2833f73	 add         r3, r3, #0x73, 30
  0117c	e5933000	 ldr         r3, [r3]
  01180	e3530000	 cmp         r3, #0
  01184	0a000006	 beq         |$LN2@TxIntrHand|
  01188	e59d3030	 ldr         r3, [sp, #0x30]
  0118c	e2833f73	 add         r3, r3, #0x73, 30
  01190	e5932000	 ldr         r2, [r3]
  01194	e59d3034	 ldr         r3, [sp, #0x34]
  01198	e5933000	 ldr         r3, [r3]
  0119c	e5823000	 str         r3, [r2]
  011a0	ea000004	 b           |$LN1@TxIntrHand|
  011a4		 |$LN2@TxIntrHand|
  011a4	e59d3030	 ldr         r3, [sp, #0x30]
  011a8	e2832f72	 add         r2, r3, #0x72, 30
  011ac	e59d3034	 ldr         r3, [sp, #0x34]
  011b0	e5933000	 ldr         r3, [r3]
  011b4	e5823000	 str         r3, [r2]
  011b8		 |$LN1@TxIntrHand|
  011b8	e59d3034	 ldr         r3, [sp, #0x34]
  011bc	e2831004	 add         r1, r3, #4
  011c0	e59d3030	 ldr         r3, [sp, #0x30]
  011c4	e2832f73	 add         r2, r3, #0x73, 30
  011c8	e5913000	 ldr         r3, [r1]
  011cc	e5823000	 str         r3, [r2]
  011d0	e59d3030	 ldr         r3, [sp, #0x30]
  011d4	e2832e1d	 add         r2, r3, #0x1D, 28
  011d8	e59d3034	 ldr         r3, [sp, #0x34]
  011dc	e2833008	 add         r3, r3, #8
  011e0	e5922000	 ldr         r2, [r2]
  011e4	e5933000	 ldr         r3, [r3]
  011e8	e0822003	 add         r2, r2, r3
  011ec	e59d3030	 ldr         r3, [sp, #0x30]
  011f0	e2833e1d	 add         r3, r3, #0x1D, 28
  011f4	e5832000	 str         r2, [r3]
  011f8		 |$LN3@TxIntrHand|

; 524  :         NdisReleaseSpinLock(&pAdapter->m_SendLock);

  011f8	e59d3030	 ldr         r3, [sp, #0x30]
  011fc	e283006c	 add         r0, r3, #0x6C
  01200	eb000000	 bl          NdisReleaseSpinLock

; 525  : 
; 526  :         NdisMSendComplete(pAdapter->m_AdapterHandle, 
; 527  :                         pCurPktInfo->m_PktHandle,
; 528  :                         NDIS_STATUS_SUCCESS);

  01204	e3a02000	 mov         r2, #0
  01208	e59d3008	 ldr         r3, [sp, #8]
  0120c	e2833004	 add         r3, r3, #4
  01210	e5931000	 ldr         r1, [r3]
  01214	e59d3030	 ldr         r3, [sp, #0x30]
  01218	e5930000	 ldr         r0, [r3]
  0121c	e59d3030	 ldr         r3, [sp, #0x30]
  01220	e5933000	 ldr         r3, [r3]
  01224	e2833f43	 add         r3, r3, #0x43, 30
  01228	e5933000	 ldr         r3, [r3]
  0122c	e1a0e00f	 mov         lr, pc
  01230	e12fff13	 bx          r3

; 529  :                         
; 530  :         NdisAcquireSpinLock(&pAdapter->m_SendLock); 

  01234	e59d3030	 ldr         r3, [sp, #0x30]
  01238	e283006c	 add         r0, r3, #0x6C
  0123c	eb000000	 bl          NdisAcquireSpinLock

; 531  :         
; 532  :     } while (0 != (BIT(0) & pAdapter->m_pEmacRegsBase->TXINTSTATMASKED));

  01240	e59d3030	 ldr         r3, [sp, #0x30]
  01244	e2833004	 add         r3, r3, #4
  01248	e5933000	 ldr         r3, [r3]
  0124c	e2833084	 add         r3, r3, #0x84
  01250	e5933000	 ldr         r3, [r3]
  01254	e3130001	 tst         r3, #1
  01258	1afffec1	 bne         |$LN20@TxIntrHand|

; 533  : 
; 534  : 
; 535  :     DEBUGMSG (DBG_FUNC,(L"<--TxIntrHandler\r\n"));

  0125c	e59f3040	 ldr         r3, [pc, #0x40]
  01260	e5933440	 ldr         r3, [r3, #0x440]
  01264	e3130080	 tst         r3, #0x80
  01268	0a000004	 beq         |$LN32@TxIntrHand|
  0126c	e59f002c	 ldr         r0, [pc, #0x2C]
  01270	eb000000	 bl          NKDbgPrintfW
  01274	e3a03001	 mov         r3, #1
  01278	e58d3048	 str         r3, [sp, #0x48]
  0127c	ea000001	 b           |$LN33@TxIntrHand|
  01280		 |$LN32@TxIntrHand|
  01280	e3a03000	 mov         r3, #0
  01284	e58d3048	 str         r3, [sp, #0x48]
  01288		 |$LN33@TxIntrHand|
  01288		 |$end$50427|

; 536  : 
; 537  : end:
; 538  :     NdisReleaseSpinLock(&pAdapter->m_SendLock);

  01288	e59d3030	 ldr         r3, [sp, #0x30]
  0128c	e283006c	 add         r0, r3, #0x6C
  01290	eb000000	 bl          NdisReleaseSpinLock

; 539  : }

  01294	e28dd04c	 add         sp, sp, #0x4C
  01298	e89d6000	 ldmia       sp, {sp, lr}
  0129c	e12fff1e	 bx          lr
  012a0		 |$LN37@TxIntrHand|
  012a0		 |$LN38@TxIntrHand|
  012a0	00000000	 DCD         |??_C@_1CG@KAPHBPGB@?$AA?$DM?$AA?9?$AA?9?$AAT?$AAx?$AAI?$AAn?$AAt?$AAr?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@|
  012a4		 |$LN39@TxIntrHand|
  012a4	00000000	 DCD         |dpCurSettings|
  012a8		 |$LN40@TxIntrHand|
  012a8	00000000	 DCD         |??_C@_1FI@GNFCNJKN@?$AAp?$AAC?$AAu?$AAr?$AAP?$AAk?$AAt?$AAI?$AAn?$AAf?$AAo?$AA?9?$AA?$DO?$AAm?$AA_?$AAP?$AAk?$AAt?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?5?$AAT?$AAX@|
  012ac		 |$LN41@TxIntrHand|
  012ac	00000000	 DCD         |??_C@_1CM@NEBDCKHF@?$AAT?$AAe?$AAa?$AAr?$AAd?$AAo?$AAw?$AAn?$AA?5?$AAi?$AAn?$AA?5?$AAp?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?5?$AA?$AN?$AA?6?$AA?$AA@|
  012b0		 |$LN42@TxIntrHand|
  012b0	00000000	 DCD         |??_C@_1FE@KOIDHCEA@?$AAG?$AAo?$AAt?$AA?5?$AAT?$AAx?$AA?5?$AAi?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AAw?$AAi?$AAt?$AAh?$AAo?$AAu?$AAt?$AA?5?$AAp?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?5@|
  012b4		 |$LN43@TxIntrHand|
  012b4	00000000	 DCD         |??_C@_1CG@NAPNPLBH@?$AA?9?$AA?9?$AA?$DO?$AAT?$AAx?$AAI?$AAn?$AAt?$AAr?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@|
  012b8		 |$M50761|

			 ENDP  ; |TxIntrHandler|

	EXPORT	|UpdateStatInfoByCount|

  00018			 AREA	 |.pdata|, PDATA
|$T50813| DCD	|$LN57@UpdateStat|
	DCD	0x4000a804
; Function compile flags: /Odtp

  012b8			 AREA	 |.text|, CODE, ARM

  012b8		 |UpdateStatInfoByCount| PROC

; 555  : {

  012b8		 |$LN57@UpdateStat|
  012b8	e1a0c00d	 mov         r12, sp
  012bc	e92d0007	 stmdb       sp!, {r0 - r2}
  012c0	e92d5000	 stmdb       sp!, {r12, lr}
  012c4	e24dd004	 sub         sp, sp, #4
  012c8		 |$M50810|

; 556  :     /* Updating only the driver required statistics info from EMAC statistics
; 557  :      * Register value using count
; 558  :      */
; 559  :       
; 560  :     
; 561  :     switch(StatReg)

  012c8	e1dd31b4	 ldrh        r3, [sp, #0x14]
  012cc	e58d3000	 str         r3, [sp]
  012d0	e59d3000	 ldr         r3, [sp]
  012d4	e3530023	 cmp         r3, #0x23
  012d8	8a00009b	 bhi         |$LN1@UpdateStat|
  012dc	e59d2000	 ldr         r2, [sp]
  012e0	e1a03102	 mov         r3, r2, lsl #2
  012e4	e083300f	 add         r3, r3, pc
  012e8	e5933004	 ldr         r3, [r3, #4]
  012ec	e08ff003	 add         pc, pc, r3
  012f0		 |$LN18@UpdateStat|
  012f0		 |$LN17@UpdateStat|
  012f0		 |$LN19@UpdateStat|
  012f0	0000008c	 DCD         0x8c
  012f4		 |$LN20@UpdateStat|
  012f4	00000258	 DCD         0x258
  012f8		 |$LN21@UpdateStat|
  012f8	00000258	 DCD         0x258
  012fc		 |$LN22@UpdateStat|
  012fc	00000258	 DCD         0x258
  01300		 |$LN23@UpdateStat|
  01300	000000d8	 DCD         0xd8
  01304		 |$LN24@UpdateStat|
  01304	000000b4	 DCD         0xb4
  01308		 |$LN25@UpdateStat|
  01308	000000d8	 DCD         0xd8
  0130c		 |$LN26@UpdateStat|
  0130c	000000d8	 DCD         0xd8
  01310		 |$LN27@UpdateStat|
  01310	000000d8	 DCD         0xd8
  01314		 |$LN28@UpdateStat|
  01314	00000258	 DCD         0x258
  01318		 |$LN29@UpdateStat|
  01318	00000258	 DCD         0x258
  0131c		 |$LN30@UpdateStat|
  0131c	00000258	 DCD         0x258
  01320		 |$LN31@UpdateStat|
  01320	00000258	 DCD         0x258
  01324		 |$LN32@UpdateStat|
  01324	00000100	 DCD         0x100
  01328		 |$LN33@UpdateStat|
  01328	00000258	 DCD         0x258
  0132c		 |$LN34@UpdateStat|
  0132c	00000258	 DCD         0x258
  01330		 |$LN35@UpdateStat|
  01330	00000258	 DCD         0x258
  01334		 |$LN36@UpdateStat|
  01334	00000120	 DCD         0x120
  01338		 |$LN37@UpdateStat|
  01338	00000258	 DCD         0x258
  0133c		 |$LN38@UpdateStat|
  0133c	00000148	 DCD         0x148
  01340		 |$LN39@UpdateStat|
  01340	00000170	 DCD         0x170
  01344		 |$LN40@UpdateStat|
  01344	00000198	 DCD         0x198
  01348		 |$LN41@UpdateStat|
  01348	000001c0	 DCD         0x1c0
  0134c		 |$LN42@UpdateStat|
  0134c	00000258	 DCD         0x258
  01350		 |$LN43@UpdateStat|
  01350	000001c0	 DCD         0x1c0
  01354		 |$LN44@UpdateStat|
  01354	00000258	 DCD         0x258
  01358		 |$LN45@UpdateStat|
  01358	00000258	 DCD         0x258
  0135c		 |$LN46@UpdateStat|
  0135c	00000258	 DCD         0x258
  01360		 |$LN47@UpdateStat|
  01360	00000258	 DCD         0x258
  01364		 |$LN48@UpdateStat|
  01364	00000258	 DCD         0x258
  01368		 |$LN49@UpdateStat|
  01368	00000258	 DCD         0x258
  0136c		 |$LN50@UpdateStat|
  0136c	00000258	 DCD         0x258
  01370		 |$LN51@UpdateStat|
  01370	00000258	 DCD         0x258
  01374		 |$LN52@UpdateStat|
  01374	000001e8	 DCD         0x1e8
  01378		 |$LN53@UpdateStat|
  01378	000001e8	 DCD         0x1e8
  0137c		 |$LN54@UpdateStat|
  0137c	00000210	 DCD         0x210
  01380		 |$LN12@UpdateStat|

; 562  :     {
; 563  :         case 0:
; 564  :             EmacStatInfo->m_RxOKFrames += *StatRegVal;   

  01380	e59d300c	 ldr         r3, [sp, #0xC]
  01384	e2833004	 add         r3, r3, #4
  01388	e5932000	 ldr         r2, [r3]
  0138c	e59d3010	 ldr         r3, [sp, #0x10]
  01390	e5933000	 ldr         r3, [r3]
  01394	e0822003	 add         r2, r2, r3
  01398	e59d300c	 ldr         r3, [sp, #0xC]
  0139c	e2833004	 add         r3, r3, #4
  013a0	e5832000	 str         r2, [r3]

; 565  :             break;

  013a4	ea000068	 b           |$LN13@UpdateStat|
  013a8		 |$LN11@UpdateStat|

; 566  :         
; 567  :         case 5:
; 568  :             EmacStatInfo->m_RxAlignErrorFrames += *StatRegVal;   

  013a8	e59d300c	 ldr         r3, [sp, #0xC]
  013ac	e2833014	 add         r3, r3, #0x14
  013b0	e5932000	 ldr         r2, [r3]
  013b4	e59d3010	 ldr         r3, [sp, #0x10]
  013b8	e5933000	 ldr         r3, [r3]
  013bc	e0822003	 add         r2, r2, r3
  013c0	e59d300c	 ldr         r3, [sp, #0xC]
  013c4	e2833014	 add         r3, r3, #0x14
  013c8	e5832000	 str         r2, [r3]
  013cc		 |$LN10@UpdateStat|

; 569  :         case 4:
; 570  :         case 6:
; 571  :         case 7:
; 572  :         case 8:
; 573  :              EmacStatInfo->m_RxErrorframes += *StatRegVal;   

  013cc	e59d300c	 ldr         r3, [sp, #0xC]
  013d0	e283300c	 add         r3, r3, #0xC
  013d4	e5932000	 ldr         r2, [r3]
  013d8	e59d3010	 ldr         r3, [sp, #0x10]
  013dc	e5933000	 ldr         r3, [r3]
  013e0	e0822003	 add         r2, r2, r3
  013e4	e59d300c	 ldr         r3, [sp, #0xC]
  013e8	e283300c	 add         r3, r3, #0xC
  013ec	e5832000	 str         r2, [r3]

; 574  :              break;

  013f0	ea000055	 b           |$LN13@UpdateStat|
  013f4		 |$LN9@UpdateStat|

; 575  :         
; 576  :         case 13:
; 577  :             EmacStatInfo->m_TxOKFrames += *StatRegVal;   

  013f4	e59d300c	 ldr         r3, [sp, #0xC]
  013f8	e5932000	 ldr         r2, [r3]
  013fc	e59d3010	 ldr         r3, [sp, #0x10]
  01400	e5933000	 ldr         r3, [r3]
  01404	e0822003	 add         r2, r2, r3
  01408	e59d300c	 ldr         r3, [sp, #0xC]
  0140c	e5832000	 str         r2, [r3]

; 578  :             break;

  01410	ea00004d	 b           |$LN13@UpdateStat|
  01414		 |$LN8@UpdateStat|

; 579  :         case 17:
; 580  :             EmacStatInfo->m_TxDeferred += *StatRegVal;   

  01414	e59d300c	 ldr         r3, [sp, #0xC]
  01418	e2833020	 add         r3, r3, #0x20
  0141c	e5932000	 ldr         r2, [r3]
  01420	e59d3010	 ldr         r3, [sp, #0x10]
  01424	e5933000	 ldr         r3, [r3]
  01428	e0822003	 add         r2, r2, r3
  0142c	e59d300c	 ldr         r3, [sp, #0xC]
  01430	e2833020	 add         r3, r3, #0x20
  01434	e5832000	 str         r2, [r3]

; 581  :             break;

  01438	ea000043	 b           |$LN13@UpdateStat|
  0143c		 |$LN7@UpdateStat|

; 582  :         
; 583  :                 
; 584  :         case 19:
; 585  :             EmacStatInfo->m_TxOneColl += *StatRegVal;   

  0143c	e59d300c	 ldr         r3, [sp, #0xC]
  01440	e2833018	 add         r3, r3, #0x18
  01444	e5932000	 ldr         r2, [r3]
  01448	e59d3010	 ldr         r3, [sp, #0x10]
  0144c	e5933000	 ldr         r3, [r3]
  01450	e0822003	 add         r2, r2, r3
  01454	e59d300c	 ldr         r3, [sp, #0xC]
  01458	e2833018	 add         r3, r3, #0x18
  0145c	e5832000	 str         r2, [r3]

; 586  :             break;

  01460	ea000039	 b           |$LN13@UpdateStat|
  01464		 |$LN6@UpdateStat|

; 587  :             
; 588  :         case 20:    
; 589  :             EmacStatInfo->m_TxMoreColl += *StatRegVal;   

  01464	e59d300c	 ldr         r3, [sp, #0xC]
  01468	e283301c	 add         r3, r3, #0x1C
  0146c	e5932000	 ldr         r2, [r3]
  01470	e59d3010	 ldr         r3, [sp, #0x10]
  01474	e5933000	 ldr         r3, [r3]
  01478	e0822003	 add         r2, r2, r3
  0147c	e59d300c	 ldr         r3, [sp, #0xC]
  01480	e283301c	 add         r3, r3, #0x1C
  01484	e5832000	 str         r2, [r3]

; 590  :             break;

  01488	ea00002f	 b           |$LN13@UpdateStat|
  0148c		 |$LN5@UpdateStat|

; 591  :             
; 592  :         case 21:
; 593  :             EmacStatInfo->m_TxMaxColl += *StatRegVal;

  0148c	e59d300c	 ldr         r3, [sp, #0xC]
  01490	e2833024	 add         r3, r3, #0x24
  01494	e5932000	 ldr         r2, [r3]
  01498	e59d3010	 ldr         r3, [sp, #0x10]
  0149c	e5933000	 ldr         r3, [r3]
  014a0	e0822003	 add         r2, r2, r3
  014a4	e59d300c	 ldr         r3, [sp, #0xC]
  014a8	e2833024	 add         r3, r3, #0x24
  014ac	e5832000	 str         r2, [r3]

; 594  :             break;

  014b0	ea000025	 b           |$LN13@UpdateStat|
  014b4		 |$LN4@UpdateStat|

; 595  :         case 22:
; 596  :         case 24:     
; 597  :             EmacStatInfo->m_TxErrorframes += *StatRegVal;   

  014b4	e59d300c	 ldr         r3, [sp, #0xC]
  014b8	e2833008	 add         r3, r3, #8
  014bc	e5932000	 ldr         r2, [r3]
  014c0	e59d3010	 ldr         r3, [sp, #0x10]
  014c4	e5933000	 ldr         r3, [r3]
  014c8	e0822003	 add         r2, r2, r3
  014cc	e59d300c	 ldr         r3, [sp, #0xC]
  014d0	e2833008	 add         r3, r3, #8
  014d4	e5832000	 str         r2, [r3]

; 598  :             break;  

  014d8	ea00001b	 b           |$LN13@UpdateStat|
  014dc		 |$LN3@UpdateStat|

; 599  :         case 33:
; 600  :         case 34:
; 601  :             EmacStatInfo->m_RxOverRun += *StatRegVal;

  014dc	e59d300c	 ldr         r3, [sp, #0xC]
  014e0	e2833028	 add         r3, r3, #0x28
  014e4	e5932000	 ldr         r2, [r3]
  014e8	e59d3010	 ldr         r3, [sp, #0x10]
  014ec	e5933000	 ldr         r3, [r3]
  014f0	e0822003	 add         r2, r2, r3
  014f4	e59d300c	 ldr         r3, [sp, #0xC]
  014f8	e2833028	 add         r3, r3, #0x28
  014fc	e5832000	 str         r2, [r3]

; 602  :             break;

  01500	ea000011	 b           |$LN13@UpdateStat|
  01504		 |$LN2@UpdateStat|

; 603  :                   
; 604  :         case 35:
; 605  :             EmacStatInfo->m_RxOverRun += *StatRegVal;     

  01504	e59d300c	 ldr         r3, [sp, #0xC]
  01508	e2833028	 add         r3, r3, #0x28
  0150c	e5932000	 ldr         r2, [r3]
  01510	e59d3010	 ldr         r3, [sp, #0x10]
  01514	e5933000	 ldr         r3, [r3]
  01518	e0822003	 add         r2, r2, r3
  0151c	e59d300c	 ldr         r3, [sp, #0xC]
  01520	e2833028	 add         r3, r3, #0x28
  01524	e5832000	 str         r2, [r3]

; 606  :             EmacStatInfo->m_RxNoBufFrames += *StatRegVal;   

  01528	e59d300c	 ldr         r3, [sp, #0xC]
  0152c	e2833010	 add         r3, r3, #0x10
  01530	e5932000	 ldr         r2, [r3]
  01534	e59d3010	 ldr         r3, [sp, #0x10]
  01538	e5933000	 ldr         r3, [r3]
  0153c	e0822003	 add         r2, r2, r3
  01540	e59d300c	 ldr         r3, [sp, #0xC]
  01544	e2833010	 add         r3, r3, #0x10
  01548	e5832000	 str         r2, [r3]
  0154c		 |$LN1@UpdateStat|
  0154c		 |$LN13@UpdateStat|

; 607  :             break;  
; 608  :                    
; 609  :        default:
; 610  :            break;
; 611  :     }  
; 612  :         
; 613  : }    

  0154c	e28dd004	 add         sp, sp, #4
  01550	e89d6000	 ldmia       sp, {sp, lr}
  01554	e12fff1e	 bx          lr
  01558		 |$M50811|

			 ENDP  ; |UpdateStatInfoByCount|

	EXPORT	|??_C@_1CI@DPPLPAEF@?$AAS?$AAt?$AAa?$AAt?$AA?5?$AAr?$AAe?$AAg?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|StatIntrHandler|

  00020			 AREA	 |.pdata|, PDATA
|$T50818| DCD	|$LN11@StatIntrHa|
	DCD	0x40003e04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@DPPLPAEF@?$AAS?$AAt?$AAa?$AAt?$AA?5?$AAr?$AAe?$AAg?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "t", 0x0, "a", 0x0, "t", 0x0, " ", 0x0, "r", 0x0, "e"
	DCB	0x0, "g", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ":", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  01558			 AREA	 |.text|, CODE, ARM

  01558		 |StatIntrHandler| PROC

; 626  : {

  01558		 |$LN11@StatIntrHa|
  01558	e1a0c00d	 mov         r12, sp
  0155c	e92d0001	 stmdb       sp!, {r0}
  01560	e92d5000	 stmdb       sp!, {r12, lr}
  01564	e24dd010	 sub         sp, sp, #0x10
  01568		 |$M50815|

; 627  :     PEMAC_ADAPTER   pAdapter;
; 628  :     PDWORD          TempStatReg;  
; 629  :     PDWORD          StatRegStart;
; 630  :     USHORT          Count;
; 631  :     
; 632  :     pAdapter = (PEMAC_ADAPTER)MiniportAdapterContext;

  01568	e59d3018	 ldr         r3, [sp, #0x18]
  0156c	e58d300c	 str         r3, [sp, #0xC]

; 633  :     
; 634  :     StatRegStart = (PDWORD)&(pAdapter->m_pEmacRegsBase->RXGOODFRAMES);

  01570	e59d300c	 ldr         r3, [sp, #0xC]
  01574	e2833004	 add         r3, r3, #4
  01578	e5933000	 ldr         r3, [r3]
  0157c	e2833c02	 add         r3, r3, #2, 24
  01580	e58d3000	 str         r3, [sp]

; 635  :     
; 636  :     TempStatReg = StatRegStart;

  01584	e59d3000	 ldr         r3, [sp]
  01588	e58d3008	 str         r3, [sp, #8]

; 637  :      
; 638  :     for(Count = 0 ;Count < EMAC_STATS_REGS ; Count++)

  0158c	e3a03000	 mov         r3, #0
  01590	e1cd30b4	 strh        r3, [sp, #4]
  01594	ea000004	 b           |$LN6@StatIntrHa|
  01598		 |$LN5@StatIntrHa|
  01598	e1dd30b4	 ldrh        r3, [sp, #4]
  0159c	e2833001	 add         r3, r3, #1
  015a0	e1a03803	 mov         r3, r3, lsl #16
  015a4	e1a03823	 mov         r3, r3, lsr #16
  015a8	e1cd30b4	 strh        r3, [sp, #4]
  015ac		 |$LN6@StatIntrHa|
  015ac	e1dd30b4	 ldrh        r3, [sp, #4]
  015b0	e3530024	 cmp         r3, #0x24
  015b4	aa00000d	 bge         |$LN4@StatIntrHa|

; 639  :     {
; 640  :         if( 0x80000000 <= INREG32(TempStatReg))

  015b8	e59d3008	 ldr         r3, [sp, #8]
  015bc	e5933000	 ldr         r3, [r3]
  015c0	e3530102	 cmp         r3, #2, 2
  015c4	3a000005	 bcc         |$LN3@StatIntrHa|

; 641  :         {
; 642  :             RETAILMSG(1,(TEXT("Stat reg %d: 0x%x\r\n"),Count,INREG32(TempStatReg)));

  015c8	e59d3008	 ldr         r3, [sp, #8]
  015cc	e5932000	 ldr         r2, [r3]
  015d0	e1dd10b4	 ldrh        r1, [sp, #4]
  015d4	e59f0070	 ldr         r0, [pc, #0x70]
  015d8	eb000000	 bl          NKDbgPrintfW

; 643  :             break;

  015dc	ea000003	 b           |$LN4@StatIntrHa|
  015e0		 |$LN3@StatIntrHa|

; 644  :         }
; 645  :         
; 646  :         TempStatReg++;      

  015e0	e59d3008	 ldr         r3, [sp, #8]
  015e4	e2833004	 add         r3, r3, #4
  015e8	e58d3008	 str         r3, [sp, #8]

; 647  :     }

  015ec	eaffffe9	 b           |$LN5@StatIntrHa|
  015f0		 |$LN4@StatIntrHa|

; 648  :     
; 649  :     /* Updating driver maintained structures */
; 650  :     UpdateStatInfoByCount(&pAdapter->m_EmacStatInfo ,TempStatReg , Count);

  015f0	e1dd20b4	 ldrh        r2, [sp, #4]
  015f4	e59d1008	 ldr         r1, [sp, #8]
  015f8	e59d300c	 ldr         r3, [sp, #0xC]
  015fc	e2830e37	 add         r0, r3, #0x37, 28
  01600	eb000000	 bl          UpdateStatInfoByCount

; 651  :     
; 652  :     if(INREG32(&(pAdapter->m_pEmacRegsBase->MACCONTROL)) & EMAC_MACCONTROL_GMII_ENABLE)

  01604	e59d300c	 ldr         r3, [sp, #0xC]
  01608	e2833004	 add         r3, r3, #4
  0160c	e5933000	 ldr         r3, [r3]
  01610	e2833e16	 add         r3, r3, #0x16, 28
  01614	e5933000	 ldr         r3, [r3]
  01618	e3130020	 tst         r3, #0x20
  0161c	0a000004	 beq         |$LN2@StatIntrHa|

; 653  :     {
; 654  :         /* Decrement the value to 0 (this a Write-to-decrement register)*/    
; 655  :          OUTREG32(TempStatReg,INREG32(TempStatReg));

  01620	e59d3008	 ldr         r3, [sp, #8]
  01624	e5932000	 ldr         r2, [r3]
  01628	e59d3008	 ldr         r3, [sp, #8]
  0162c	e5832000	 str         r2, [r3]

; 656  :     }
; 657  :     else

  01630	ea000002	 b           |$LN1@StatIntrHa|
  01634		 |$LN2@StatIntrHa|

; 658  :     {
; 659  :         /* Decrement the value to 0 (this a Read/Writeregister)*/    
; 660  :         OUTREG32(TempStatReg,0);

  01634	e59d2008	 ldr         r2, [sp, #8]
  01638	e3a03000	 mov         r3, #0
  0163c	e5823000	 str         r3, [r2]
  01640		 |$LN1@StatIntrHa|

; 661  :     }
; 662  :     
; 663  : }

  01640	e28dd010	 add         sp, sp, #0x10
  01644	e89d6000	 ldmia       sp, {sp, lr}
  01648	e12fff1e	 bx          lr
  0164c		 |$LN12@StatIntrHa|
  0164c		 |$LN13@StatIntrHa|
  0164c	00000000	 DCD         |??_C@_1CI@DPPLPAEF@?$AAS?$AAt?$AAa?$AAt?$AA?5?$AAr?$AAe?$AAg?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  01650		 |$M50816|

			 ENDP  ; |StatIntrHandler|

	EXPORT	|??_C@_1CA@KCGEENMN@?$AAR?$AAx?$AA?5?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?$CI?$AA?$CJ?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CA@OLCLFKPC@?$AAT?$AAx?$AA?5?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?$CI?$AA?$CJ?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BM@EEEEBCFN@?$AAs?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DI@JJMFGAIJ@?$AA?9?$AA?9?$AA?$DO?$AAH?$AAo?$AAs?$AAt?$AAE?$AAr?$AAr?$AAo?$AAr?$AAI?$AAn?$AAt?$AAr?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|HostErrorIntrHandler|
	IMPORT	|NICInitializeAdapter|
	IMPORT	|EMACModStateChange|

  00028			 AREA	 |.pdata|, PDATA
|$T50833| DCD	|$LN20@HostErrorI|
	DCD	0x40007704

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CA@KCGEENMN@?$AAR?$AAx?$AA?5?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?$CI?$AA?$CJ?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "R"
	DCB	0x0, "x", 0x0, " ", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "o"
	DCB	0x0, "r", 0x0, "(", 0x0, ")", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CA@OLCLFKPC@?$AAT?$AAx?$AA?5?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?$CI?$AA?$CJ?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "T"
	DCB	0x0, "x", 0x0, " ", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "o"
	DCB	0x0, "r", 0x0, "(", 0x0, ")", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@EEEEBCFN@?$AAs?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "s"
	DCB	0x0, "t", 0x0, "a", 0x0, "t", 0x0, "u", 0x0, "s", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DI@JJMFGAIJ@?$AA?9?$AA?9?$AA?$DO?$AAH?$AAo?$AAs?$AAt?$AAE?$AAr?$AAr?$AAo?$AAr?$AAI?$AAn?$AAt?$AAr?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "-", 0x0, ">", 0x0, "H", 0x0, "o", 0x0, "s", 0x0, "t"
	DCB	0x0, "E", 0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, "I"
	DCB	0x0, "n", 0x0, "t", 0x0, "r", 0x0, "H", 0x0, "a", 0x0, "n"
	DCB	0x0, "d", 0x0, "l", 0x0, "e", 0x0, "r", 0x0, "(", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  01650			 AREA	 |.text|, CODE, ARM

  01650		 |HostErrorIntrHandler| PROC

; 676  : { 

  01650		 |$LN20@HostErrorI|
  01650	e1a0c00d	 mov         r12, sp
  01654	e92d0001	 stmdb       sp!, {r0}
  01658	e92d5000	 stmdb       sp!, {r12, lr}
  0165c	e24dd024	 sub         sp, sp, #0x24
  01660		 |$M50830|

; 677  :     PEMAC_ADAPTER   pAdapter;
; 678  :     DWORD           MacStatus;
; 679  :     DWORD           TxIntrMask;
; 680  :     DWORD           RXIntrMask;
; 681  :     DWORD           IntrVal;
; 682  :     
; 683  :     DEBUGMSG (DBG_FUNC,(L"-->HostErrorIntrHandler()\r\n"));

  01660	e59f31b4	 ldr         r3, [pc, #0x1B4]
  01664	e5933440	 ldr         r3, [r3, #0x440]
  01668	e3130080	 tst         r3, #0x80
  0166c	0a000004	 beq         |$LN10@HostErrorI|
  01670	e59f01b0	 ldr         r0, [pc, #0x1B0]
  01674	eb000000	 bl          NKDbgPrintfW
  01678	e3a03001	 mov         r3, #1
  0167c	e58d3014	 str         r3, [sp, #0x14]
  01680	ea000001	 b           |$LN11@HostErrorI|
  01684		 |$LN10@HostErrorI|
  01684	e3a03000	 mov         r3, #0
  01688	e58d3014	 str         r3, [sp, #0x14]
  0168c		 |$LN11@HostErrorI|

; 684  : 
; 685  :     pAdapter = (PEMAC_ADAPTER)MiniportAdapterContext; 

  0168c	e59d302c	 ldr         r3, [sp, #0x2C]
  01690	e58d3010	 str         r3, [sp, #0x10]

; 686  :     
; 687  :     MacStatus   = pAdapter->m_pEmacRegsBase->MACSTATUS;

  01694	e59d3010	 ldr         r3, [sp, #0x10]
  01698	e2833004	 add         r3, r3, #4
  0169c	e5933000	 ldr         r3, [r3]
  016a0	e2833f59	 add         r3, r3, #0x59, 30
  016a4	e5933000	 ldr         r3, [r3]
  016a8	e58d3004	 str         r3, [sp, #4]

; 688  :     DEBUGMSG (DBG_FUNC,(L"status 0x%x\r\n",MacStatus));

  016ac	e59f3168	 ldr         r3, [pc, #0x168]
  016b0	e5933440	 ldr         r3, [r3, #0x440]
  016b4	e3130080	 tst         r3, #0x80
  016b8	0a000005	 beq         |$LN12@HostErrorI|
  016bc	e59d1004	 ldr         r1, [sp, #4]
  016c0	e59f015c	 ldr         r0, [pc, #0x15C]
  016c4	eb000000	 bl          NKDbgPrintfW
  016c8	e3a03001	 mov         r3, #1
  016cc	e58d3018	 str         r3, [sp, #0x18]
  016d0	ea000001	 b           |$LN13@HostErrorI|
  016d4		 |$LN12@HostErrorI|
  016d4	e3a03000	 mov         r3, #0
  016d8	e58d3018	 str         r3, [sp, #0x18]
  016dc		 |$LN13@HostErrorI|

; 689  :     TxIntrMask  = (BIT(23) | BIT(22) | BIT(21) | BIT(20));

  016dc	e3a0360f	 mov         r3, #0xF, 12
  016e0	e58d3000	 str         r3, [sp]

; 690  :     RXIntrMask  = (BIT(15) | BIT(14) | BIT(13) | BIT(12));

  016e4	e3a03a0f	 mov         r3, #0xF, 20
  016e8	e58d300c	 str         r3, [sp, #0xC]

; 691  :     
; 692  :     if(IntrVal =  ((MacStatus & TxIntrMask) >> 20)) 

  016ec	e59d2004	 ldr         r2, [sp, #4]
  016f0	e59d3000	 ldr         r3, [sp]
  016f4	e0023003	 and         r3, r2, r3
  016f8	e1a03a23	 mov         r3, r3, lsr #20
  016fc	e58d3008	 str         r3, [sp, #8]
  01700	e59d3008	 ldr         r3, [sp, #8]
  01704	e3530000	 cmp         r3, #0
  01708	0a00001e	 beq         |$LN7@HostErrorI|

; 693  :     {
; 694  :         if((0x1 == IntrVal) || 
; 695  :            (0x2 == IntrVal) ||
; 696  :            (0x3 == IntrVal) ||
; 697  :            (0x4 == IntrVal) ||
; 698  :            (0x5 == IntrVal) ||
; 699  :            (0x6 == IntrVal))

  0170c	e59d3008	 ldr         r3, [sp, #8]
  01710	e3530001	 cmp         r3, #1
  01714	0a00000e	 beq         |$LN5@HostErrorI|
  01718	e59d3008	 ldr         r3, [sp, #8]
  0171c	e3530002	 cmp         r3, #2
  01720	0a00000b	 beq         |$LN5@HostErrorI|
  01724	e59d3008	 ldr         r3, [sp, #8]
  01728	e3530003	 cmp         r3, #3
  0172c	0a000008	 beq         |$LN5@HostErrorI|
  01730	e59d3008	 ldr         r3, [sp, #8]
  01734	e3530004	 cmp         r3, #4
  01738	0a000005	 beq         |$LN5@HostErrorI|
  0173c	e59d3008	 ldr         r3, [sp, #8]
  01740	e3530005	 cmp         r3, #5
  01744	0a000002	 beq         |$LN5@HostErrorI|
  01748	e59d3008	 ldr         r3, [sp, #8]
  0174c	e3530006	 cmp         r3, #6
  01750	1a00000b	 bne         |$LN6@HostErrorI|
  01754		 |$LN5@HostErrorI|

; 700  :         {   
; 701  :             DEBUGMSG (DBG_INFO,(L"Tx error() %d\r\n",IntrVal));  

  01754	e59f30c0	 ldr         r3, [pc, #0xC0]
  01758	e5933440	 ldr         r3, [r3, #0x440]
  0175c	e3130040	 tst         r3, #0x40
  01760	0a000005	 beq         |$LN14@HostErrorI|
  01764	e59d1008	 ldr         r1, [sp, #8]
  01768	e59f00b0	 ldr         r0, [pc, #0xB0]
  0176c	eb000000	 bl          NKDbgPrintfW
  01770	e3a03001	 mov         r3, #1
  01774	e58d301c	 str         r3, [sp, #0x1C]
  01778	ea000001	 b           |$LN15@HostErrorI|
  0177c		 |$LN14@HostErrorI|
  0177c	e3a03000	 mov         r3, #0
  01780	e58d301c	 str         r3, [sp, #0x1C]
  01784		 |$LN15@HostErrorI|
  01784		 |$LN6@HostErrorI|

; 702  :         }    

  01784	ea000019	 b           |$LN4@HostErrorI|
  01788		 |$LN7@HostErrorI|

; 703  :     }       
; 704  :     else if(IntrVal =  ((MacStatus & RXIntrMask) >> 12)) 

  01788	e59d2004	 ldr         r2, [sp, #4]
  0178c	e59d300c	 ldr         r3, [sp, #0xC]
  01790	e0023003	 and         r3, r2, r3
  01794	e1a03623	 mov         r3, r3, lsr #12
  01798	e58d3008	 str         r3, [sp, #8]
  0179c	e59d3008	 ldr         r3, [sp, #8]
  017a0	e3530000	 cmp         r3, #0
  017a4	0a000011	 beq         |$LN3@HostErrorI|

; 705  :     {
; 706  :         if((0x2 == IntrVal) || 
; 707  :            (0x4 == IntrVal))

  017a8	e59d3008	 ldr         r3, [sp, #8]
  017ac	e3530002	 cmp         r3, #2
  017b0	0a000002	 beq         |$LN1@HostErrorI|
  017b4	e59d3008	 ldr         r3, [sp, #8]
  017b8	e3530004	 cmp         r3, #4
  017bc	1a00000b	 bne         |$LN2@HostErrorI|
  017c0		 |$LN1@HostErrorI|

; 708  :         {
; 709  :             DEBUGMSG (DBG_INFO,(L"Rx error() %d\r\n",IntrVal));  

  017c0	e59f3054	 ldr         r3, [pc, #0x54]
  017c4	e5933440	 ldr         r3, [r3, #0x440]
  017c8	e3130040	 tst         r3, #0x40
  017cc	0a000005	 beq         |$LN16@HostErrorI|
  017d0	e59d1008	 ldr         r1, [sp, #8]
  017d4	e59f003c	 ldr         r0, [pc, #0x3C]
  017d8	eb000000	 bl          NKDbgPrintfW
  017dc	e3a03001	 mov         r3, #1
  017e0	e58d3020	 str         r3, [sp, #0x20]
  017e4	ea000001	 b           |$LN17@HostErrorI|
  017e8		 |$LN16@HostErrorI|
  017e8	e3a03000	 mov         r3, #0
  017ec	e58d3020	 str         r3, [sp, #0x20]
  017f0		 |$LN17@HostErrorI|
  017f0		 |$LN2@HostErrorI|
  017f0		 |$LN3@HostErrorI|
  017f0		 |$LN4@HostErrorI|

; 710  :         }   
; 711  :     }    
; 712  :     
; 713  :     /* Reset the EMAC modules */
; 714  :     EMACModStateChange(pAdapter->m_device,SYNCRST);

  017f0	e3a01000	 mov         r1, #0
  017f4	e59d3010	 ldr         r3, [sp, #0x10]
  017f8	e2833094	 add         r3, r3, #0x94
  017fc	e5930000	 ldr         r0, [r3]
  01800	eb000000	 bl          EMACModStateChange

; 715  : 
; 716  :     /* Initialise once again the EMAC */
; 717  :     NICInitializeAdapter(pAdapter);

  01804	e59d0010	 ldr         r0, [sp, #0x10]
  01808	eb000000	 bl          NICInitializeAdapter

; 718  :     
; 719  : }    

  0180c	e28dd024	 add         sp, sp, #0x24
  01810	e89d6000	 ldmia       sp, {sp, lr}
  01814	e12fff1e	 bx          lr
  01818		 |$LN21@HostErrorI|
  01818		 |$LN22@HostErrorI|
  01818	00000000	 DCD         |??_C@_1CA@KCGEENMN@?$AAR?$AAx?$AA?5?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?$CI?$AA?$CJ?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  0181c		 |$LN23@HostErrorI|
  0181c	00000000	 DCD         |dpCurSettings|
  01820		 |$LN24@HostErrorI|
  01820	00000000	 DCD         |??_C@_1CA@OLCLFKPC@?$AAT?$AAx?$AA?5?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?$CI?$AA?$CJ?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  01824		 |$LN25@HostErrorI|
  01824	00000000	 DCD         |??_C@_1BM@EEEEBCFN@?$AAs?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  01828		 |$LN26@HostErrorI|
  01828	00000000	 DCD         |??_C@_1DI@JJMFGAIJ@?$AA?9?$AA?9?$AA?$DO?$AAH?$AAo?$AAs?$AAt?$AAE?$AAr?$AAr?$AAo?$AAr?$AAI?$AAn?$AAt?$AAr?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  0182c		 |$M50831|

			 ENDP  ; |HostErrorIntrHandler|

	EXPORT	|Emac_MiniportIsr|

  00030			 AREA	 |.pdata|, PDATA
|$T50844| DCD	|$LN5@Emac_Minip|
	DCD	0x40000b03
; Function compile flags: /Odtp

  0182c			 AREA	 |.text|, CODE, ARM

  0182c		 |Emac_MiniportIsr| PROC

; 746  : {

  0182c		 |$LN5@Emac_Minip|
  0182c	e1a0c00d	 mov         r12, sp
  01830	e92d0007	 stmdb       sp!, {r0 - r2}
  01834	e92d5000	 stmdb       sp!, {r12, lr}
  01838		 |$M50841|

; 747  :     *InterruptRecognized = TRUE;

  01838	e59d2008	 ldr         r2, [sp, #8]
  0183c	e3a03001	 mov         r3, #1
  01840	e5c23000	 strb        r3, [r2]

; 748  :     *QueueMiniportHandleInterrupt = TRUE;

  01844	e59d200c	 ldr         r2, [sp, #0xC]
  01848	e3a03001	 mov         r3, #1
  0184c	e5c23000	 strb        r3, [r2]

; 749  : 
; 750  : //    DEBUGMSG (DBG_FUNC,(L"+Emac_MiniportIsr()\r\n"));
; 751  : 
; 752  :     return;
; 753  : }

  01850	e89d6000	 ldmia       sp, {sp, lr}
  01854	e12fff1e	 bx          lr
  01858		 |$M50842|

			 ENDP  ; |Emac_MiniportIsr|

	EXPORT	|EmacEnableInterrupts|

  00038			 AREA	 |.pdata|, PDATA
|$T50849| DCD	|$LN6@EmacEnable|
	DCD	0x40003403
; Function compile flags: /Odtp

  01858			 AREA	 |.text|, CODE, ARM

  01858		 |EmacEnableInterrupts| PROC

; 756  : {

  01858		 |$LN6@EmacEnable|
  01858	e1a0c00d	 mov         r12, sp
  0185c	e92d0001	 stmdb       sp!, {r0}
  01860	e92d5000	 stmdb       sp!, {r12, lr}
  01864		 |$M50846|

; 757  :     if(pAdapter->m_pEmacCtlRegs)

  01864	e59d3008	 ldr         r3, [sp, #8]
  01868	e2833008	 add         r3, r3, #8
  0186c	e5933000	 ldr         r3, [r3]
  01870	e3530000	 cmp         r3, #0
  01874	0a000029	 beq         |$LN1@EmacEnable|

; 758  :     {
; 759  :         pAdapter->m_pEmacRegsBase->MACEOIVECTOR = 0x1;

  01878	e59d3008	 ldr         r3, [sp, #8]
  0187c	e2833004	 add         r3, r3, #4
  01880	e5933000	 ldr         r3, [r3]
  01884	e2832094	 add         r2, r3, #0x94
  01888	e3a03001	 mov         r3, #1
  0188c	e5823000	 str         r3, [r2]

; 760  :         pAdapter->m_pEmacRegsBase->MACEOIVECTOR = 0x2;

  01890	e59d3008	 ldr         r3, [sp, #8]
  01894	e2833004	 add         r3, r3, #4
  01898	e5933000	 ldr         r3, [r3]
  0189c	e2832094	 add         r2, r3, #0x94
  018a0	e3a03002	 mov         r3, #2
  018a4	e5823000	 str         r3, [r2]

; 761  :         pAdapter->m_pEmacRegsBase->MACEOIVECTOR = 0x3;

  018a8	e59d3008	 ldr         r3, [sp, #8]
  018ac	e2833004	 add         r3, r3, #4
  018b0	e5933000	 ldr         r3, [r3]
  018b4	e2832094	 add         r2, r3, #0x94
  018b8	e3a03003	 mov         r3, #3
  018bc	e5823000	 str         r3, [r2]

; 762  :         pAdapter->m_pEmacCtlRegs->C0RXTHRESHEN=0xff;

  018c0	e59d3008	 ldr         r3, [sp, #8]
  018c4	e2833008	 add         r3, r3, #8
  018c8	e5933000	 ldr         r3, [r3]
  018cc	e2832010	 add         r2, r3, #0x10
  018d0	e3a030ff	 mov         r3, #0xFF
  018d4	e5823000	 str         r3, [r2]

; 763  :         pAdapter->m_pEmacCtlRegs->C0RXEN=0x01;

  018d8	e59d3008	 ldr         r3, [sp, #8]
  018dc	e2833008	 add         r3, r3, #8
  018e0	e5933000	 ldr         r3, [r3]
  018e4	e2832014	 add         r2, r3, #0x14
  018e8	e3a03001	 mov         r3, #1
  018ec	e5823000	 str         r3, [r2]

; 764  :         pAdapter->m_pEmacCtlRegs->C0TXEN=0x01;

  018f0	e59d3008	 ldr         r3, [sp, #8]
  018f4	e2833008	 add         r3, r3, #8
  018f8	e5933000	 ldr         r3, [r3]
  018fc	e2832018	 add         r2, r3, #0x18
  01900	e3a03001	 mov         r3, #1
  01904	e5823000	 str         r3, [r2]

; 765  :         pAdapter->m_pEmacCtlRegs->C0MISCEN=0xf;

  01908	e59d3008	 ldr         r3, [sp, #8]
  0190c	e2833008	 add         r3, r3, #8
  01910	e5933000	 ldr         r3, [r3]
  01914	e283201c	 add         r2, r3, #0x1C
  01918	e3a0300f	 mov         r3, #0xF
  0191c	e5823000	 str         r3, [r2]
  01920		 |$LN1@EmacEnable|

; 766  :     }
; 767  : }

  01920	e89d6000	 ldmia       sp, {sp, lr}
  01924	e12fff1e	 bx          lr
  01928		 |$M50847|

			 ENDP  ; |EmacEnableInterrupts|

	EXPORT	|EmacDisableInterrupts|

  00040			 AREA	 |.pdata|, PDATA
|$T50854| DCD	|$LN6@EmacDisabl|
	DCD	0x40002203
; Function compile flags: /Odtp

  01928			 AREA	 |.text|, CODE, ARM

  01928		 |EmacDisableInterrupts| PROC

; 770  : {

  01928		 |$LN6@EmacDisabl|
  01928	e1a0c00d	 mov         r12, sp
  0192c	e92d0001	 stmdb       sp!, {r0}
  01930	e92d5000	 stmdb       sp!, {r12, lr}
  01934		 |$M50851|

; 771  :     if(pAdapter->m_pEmacCtlRegs)

  01934	e59d3008	 ldr         r3, [sp, #8]
  01938	e2833008	 add         r3, r3, #8
  0193c	e5933000	 ldr         r3, [r3]
  01940	e3530000	 cmp         r3, #0
  01944	0a000017	 beq         |$LN1@EmacDisabl|

; 772  :     {
; 773  :         pAdapter->m_pEmacCtlRegs->C0RXTHRESHEN=0x0;

  01948	e59d3008	 ldr         r3, [sp, #8]
  0194c	e2833008	 add         r3, r3, #8
  01950	e5933000	 ldr         r3, [r3]
  01954	e2832010	 add         r2, r3, #0x10
  01958	e3a03000	 mov         r3, #0
  0195c	e5823000	 str         r3, [r2]

; 774  :         pAdapter->m_pEmacCtlRegs->C0RXEN=0x0;

  01960	e59d3008	 ldr         r3, [sp, #8]
  01964	e2833008	 add         r3, r3, #8
  01968	e5933000	 ldr         r3, [r3]
  0196c	e2832014	 add         r2, r3, #0x14
  01970	e3a03000	 mov         r3, #0
  01974	e5823000	 str         r3, [r2]

; 775  :         pAdapter->m_pEmacCtlRegs->C0TXEN=0x0;

  01978	e59d3008	 ldr         r3, [sp, #8]
  0197c	e2833008	 add         r3, r3, #8
  01980	e5933000	 ldr         r3, [r3]
  01984	e2832018	 add         r2, r3, #0x18
  01988	e3a03000	 mov         r3, #0
  0198c	e5823000	 str         r3, [r2]

; 776  :         pAdapter->m_pEmacCtlRegs->C0MISCEN=0x0;

  01990	e59d3008	 ldr         r3, [sp, #8]
  01994	e2833008	 add         r3, r3, #8
  01998	e5933000	 ldr         r3, [r3]
  0199c	e283201c	 add         r2, r3, #0x1C
  019a0	e3a03000	 mov         r3, #0
  019a4	e5823000	 str         r3, [r2]
  019a8		 |$LN1@EmacDisabl|

; 777  :     }
; 778  : }

  019a8	e89d6000	 ldmia       sp, {sp, lr}
  019ac	e12fff1e	 bx          lr
  019b0		 |$M50852|

			 ENDP  ; |EmacDisableInterrupts|

	EXPORT	|??_C@_1FK@EOOACHNH@?$AA?$CL?$AAS?$AAt?$AAa?$AAt?$AAi?$AAs?$AAt?$AAi?$AAc?$AAs?$AA?5?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAI@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DG@JBBHDBI@?$AA?$CL?$AAL?$AAi?$AAn?$AAk?$AA?5?$AAc?$AAh?$AAa?$AAn?$AAg?$AAe?$AA?5?$AAi?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FK@CMCGIGCA@?$AA?$CL?$AAH?$AAo?$AAs?$AAt?$AA?5?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAI@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FG@CPAAMBIJ@?$AA?$CL?$AA?5?$AAT?$AAr?$AAa?$AAs?$AAm?$AAi?$AAt?$AA?5?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAI?$AAn?$AAt@| [ DATA ] ; `string'
	EXPORT	|Emac_MiniportHandleInterrupt|
	IMPORT	|SocAckInterrupt|
	IMPORT	|LinkChangeIntrHandler|

  00048			 AREA	 |.pdata|, PDATA
|$T50867| DCD	|$LN18@Emac_Minip@2|
	DCD	0x40006e04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FK@EOOACHNH@?$AA?$CL?$AAS?$AAt?$AAa?$AAt?$AAi?$AAs?$AAt?$AAi?$AAc?$AAs?$AA?5?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAI@| DCB "+"
	DCB	0x0, "S", 0x0, "t", 0x0, "a", 0x0, "t", 0x0, "i", 0x0, "s"
	DCB	0x0, "t", 0x0, "i", 0x0, "c", 0x0, "s", 0x0, " ", 0x0, "E"
	DCB	0x0, "m", 0x0, "a", 0x0, "c", 0x0, "_", 0x0, "M", 0x0, "i"
	DCB	0x0, "n", 0x0, "i", 0x0, "p", 0x0, "o", 0x0, "r", 0x0, "t"
	DCB	0x0, "H", 0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e"
	DCB	0x0, "I", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r"
	DCB	0x0, "u", 0x0, "p", 0x0, "t", 0x0, "(", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DG@JBBHDBI@?$AA?$CL?$AAL?$AAi?$AAn?$AAk?$AA?5?$AAc?$AAh?$AAa?$AAn?$AAg?$AAe?$AA?5?$AAi?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "L", 0x0, "i", 0x0, "n", 0x0, "k", 0x0, " ", 0x0, "c"
	DCB	0x0, "h", 0x0, "a", 0x0, "n", 0x0, "g", 0x0, "e", 0x0, " "
	DCB	0x0, "i", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r"
	DCB	0x0, "u", 0x0, "p", 0x0, "t", 0x0, "(", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FK@CMCGIGCA@?$AA?$CL?$AAH?$AAo?$AAs?$AAt?$AA?5?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAI@| DCB "+"
	DCB	0x0, "H", 0x0, "o", 0x0, "s", 0x0, "t", 0x0, " ", 0x0, "e"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "E"
	DCB	0x0, "m", 0x0, "a", 0x0, "c", 0x0, "_", 0x0, "M", 0x0, "i"
	DCB	0x0, "n", 0x0, "i", 0x0, "p", 0x0, "o", 0x0, "r", 0x0, "t"
	DCB	0x0, "H", 0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e"
	DCB	0x0, "I", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r"
	DCB	0x0, "u", 0x0, "p", 0x0, "t", 0x0, "(", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FG@CPAAMBIJ@?$AA?$CL?$AA?5?$AAT?$AAr?$AAa?$AAs?$AAm?$AAi?$AAt?$AA?5?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAI?$AAn?$AAt@| DCB "+"
	DCB	0x0, " ", 0x0, "T", 0x0, "r", 0x0, "a", 0x0, "s", 0x0, "m"
	DCB	0x0, "i", 0x0, "t", 0x0, " ", 0x0, "E", 0x0, "m", 0x0, "a"
	DCB	0x0, "c", 0x0, "_", 0x0, "M", 0x0, "i", 0x0, "n", 0x0, "i"
	DCB	0x0, "p", 0x0, "o", 0x0, "r", 0x0, "t", 0x0, "H", 0x0, "a"
	DCB	0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e", 0x0, "I", 0x0, "n"
	DCB	0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p"
	DCB	0x0, "t", 0x0, "(", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Odtp

  019b0			 AREA	 |.text|, CODE, ARM

  019b0		 |Emac_MiniportHandleInterrupt| PROC

; 794  : {

  019b0		 |$LN18@Emac_Minip@2|
  019b0	e1a0c00d	 mov         r12, sp
  019b4	e92d0001	 stmdb       sp!, {r0}
  019b8	e92d5000	 stmdb       sp!, {r12, lr}
  019bc	e24dd01c	 sub         sp, sp, #0x1C
  019c0		 |$M50864|

; 795  :     DWORD ack_flag = 0;

  019c0	e3a03000	 mov         r3, #0
  019c4	e58d3004	 str         r3, [sp, #4]

; 796  :     DWORD           MacStatus;
; 797  :     PEMAC_ADAPTER   pAdapter;
; 798  :     
; 799  :         
; 800  :     //DEBUGMSG(DBG_FUNC && DBG_INT,(L"-->Emac_MiniportHandleInterrupt()\r\n"));
; 801  :     
; 802  :     pAdapter = (PEMAC_ADAPTER)MiniportAdapterContext;

  019c8	e59d3024	 ldr         r3, [sp, #0x24]
  019cc	e58d3008	 str         r3, [sp, #8]

; 803  : 
; 804  :     /* Since always interrupts are processed by disabling,servicing and enabling 
; 805  :      * the interrupt in NDIS by calling Emac_MiniportDisableInterrupt and 
; 806  :      * Emac_MiniportEnableInterrupt we need not take care of them here 
; 807  :      */  
; 808  :       
; 809  :     MacStatus = pAdapter->m_pEmacRegsBase->MACINVECTOR;

  019d0	e59d3008	 ldr         r3, [sp, #8]
  019d4	e2833004	 add         r3, r3, #4
  019d8	e5933000	 ldr         r3, [r3]
  019dc	e2833090	 add         r3, r3, #0x90
  019e0	e5933000	 ldr         r3, [r3]
  019e4	e58d3000	 str         r3, [sp]

; 810  :     
; 811  : 	/* Receive interrupt */
; 812  :     if( MacStatus & BIT(0) )

  019e8	e59d3000	 ldr         r3, [sp]
  019ec	e3130001	 tst         r3, #1
  019f0	0a000004	 beq         |$LN5@Emac_Minip@2|

; 813  :     {
; 814  :         //DEBUGMSG (DBG_INFO,(L"+Receive Emac_MiniportHandleInterrupt()\r\n")); 
; 815  :         RxIntrHandler(pAdapter);

  019f4	e59d0008	 ldr         r0, [sp, #8]
  019f8	eb000000	 bl          RxIntrHandler

; 816  :         ack_flag |= ACK_RX;

  019fc	e59d3004	 ldr         r3, [sp, #4]
  01a00	e3833002	 orr         r3, r3, #2
  01a04	e58d3004	 str         r3, [sp, #4]
  01a08		 |$LN5@Emac_Minip@2|

; 817  :     } 
; 818  :     
; 819  :     /* Trasmit interrupt */
; 820  :     if( MacStatus & BIT(16) )

  01a08	e59d3000	 ldr         r3, [sp]
  01a0c	e3130801	 tst         r3, #1, 16
  01a10	0a00000f	 beq         |$LN4@Emac_Minip@2|

; 821  :     {
; 822  :         DEBUGMSG (DBG_INFO,(L"+ Trasmit Emac_MiniportHandleInterrupt()\r\n"));

  01a14	e59f313c	 ldr         r3, [pc, #0x13C]
  01a18	e5933440	 ldr         r3, [r3, #0x440]
  01a1c	e3130040	 tst         r3, #0x40
  01a20	0a000004	 beq         |$LN8@Emac_Minip@2|
  01a24	e59f0138	 ldr         r0, [pc, #0x138]
  01a28	eb000000	 bl          NKDbgPrintfW
  01a2c	e3a03001	 mov         r3, #1
  01a30	e58d300c	 str         r3, [sp, #0xC]
  01a34	ea000001	 b           |$LN9@Emac_Minip@2|
  01a38		 |$LN8@Emac_Minip@2|
  01a38	e3a03000	 mov         r3, #0
  01a3c	e58d300c	 str         r3, [sp, #0xC]
  01a40		 |$LN9@Emac_Minip@2|

; 823  :         TxIntrHandler(pAdapter);

  01a40	e59d0008	 ldr         r0, [sp, #8]
  01a44	eb000000	 bl          TxIntrHandler

; 824  :         ack_flag |= ACK_TX;

  01a48	e59d3004	 ldr         r3, [sp, #4]
  01a4c	e3833008	 orr         r3, r3, #8
  01a50	e58d3004	 str         r3, [sp, #4]
  01a54		 |$LN4@Emac_Minip@2|

; 825  :     }      
; 826  :           
; 827  :     /* Host error interrupt */
; 828  :     if( MacStatus & BIT(26) )

  01a54	e59d3000	 ldr         r3, [sp]
  01a58	e3130301	 tst         r3, #1, 6
  01a5c	0a00000f	 beq         |$LN3@Emac_Minip@2|

; 829  :     {
; 830  :          DEBUGMSG (DBG_INFO,(L"+Host error Emac_MiniportHandleInterrupt()\r\n"));

  01a60	e59f30f0	 ldr         r3, [pc, #0xF0]
  01a64	e5933440	 ldr         r3, [r3, #0x440]
  01a68	e3130040	 tst         r3, #0x40
  01a6c	0a000004	 beq         |$LN10@Emac_Minip@2|
  01a70	e59f00e8	 ldr         r0, [pc, #0xE8]
  01a74	eb000000	 bl          NKDbgPrintfW
  01a78	e3a03001	 mov         r3, #1
  01a7c	e58d3010	 str         r3, [sp, #0x10]
  01a80	ea000001	 b           |$LN11@Emac_Minip@2|
  01a84		 |$LN10@Emac_Minip@2|
  01a84	e3a03000	 mov         r3, #0
  01a88	e58d3010	 str         r3, [sp, #0x10]
  01a8c		 |$LN11@Emac_Minip@2|

; 831  :          HostErrorIntrHandler(pAdapter);

  01a8c	e59d0008	 ldr         r0, [sp, #8]
  01a90	eb000000	 bl          HostErrorIntrHandler

; 832  :          ack_flag |= ACK_MISC;

  01a94	e59d3004	 ldr         r3, [sp, #4]
  01a98	e3833001	 orr         r3, r3, #1
  01a9c	e58d3004	 str         r3, [sp, #4]
  01aa0		 |$LN3@Emac_Minip@2|

; 833  :     }       
; 834  :     
; 835  :     /* Link change interrupt */
; 836  :     if( MacStatus & BIT(25) )

  01aa0	e59d3000	 ldr         r3, [sp]
  01aa4	e3130402	 tst         r3, #2, 8
  01aa8	0a00000f	 beq         |$LN2@Emac_Minip@2|

; 837  :     {
; 838  :         DEBUGMSG (DBG_INFO,(L"+Link change interrupt()\r\n"));

  01aac	e59f30a4	 ldr         r3, [pc, #0xA4]
  01ab0	e5933440	 ldr         r3, [r3, #0x440]
  01ab4	e3130040	 tst         r3, #0x40
  01ab8	0a000004	 beq         |$LN12@Emac_Minip@2|
  01abc	e59f0098	 ldr         r0, [pc, #0x98]
  01ac0	eb000000	 bl          NKDbgPrintfW
  01ac4	e3a03001	 mov         r3, #1
  01ac8	e58d3014	 str         r3, [sp, #0x14]
  01acc	ea000001	 b           |$LN13@Emac_Minip@2|
  01ad0		 |$LN12@Emac_Minip@2|
  01ad0	e3a03000	 mov         r3, #0
  01ad4	e58d3014	 str         r3, [sp, #0x14]
  01ad8		 |$LN13@Emac_Minip@2|

; 839  :         LinkChangeIntrHandler(pAdapter);

  01ad8	e59d0008	 ldr         r0, [sp, #8]
  01adc	eb000000	 bl          LinkChangeIntrHandler

; 840  :         ack_flag |= ACK_MISC;

  01ae0	e59d3004	 ldr         r3, [sp, #4]
  01ae4	e3833001	 orr         r3, r3, #1
  01ae8	e58d3004	 str         r3, [sp, #4]
  01aec		 |$LN2@Emac_Minip@2|

; 841  :     }
; 842  :     
; 843  :     /* Statistics interrupt */
; 844  :     if( MacStatus & BIT(27) )

  01aec	e59d3000	 ldr         r3, [sp]
  01af0	e3130302	 tst         r3, #2, 6
  01af4	0a00000f	 beq         |$LN1@Emac_Minip@2|

; 845  :     {
; 846  :         DEBUGMSG (DBG_INFO,(L"+Statistics Emac_MiniportHandleInterrupt()\r\n")); 

  01af8	e59f3058	 ldr         r3, [pc, #0x58]
  01afc	e5933440	 ldr         r3, [r3, #0x440]
  01b00	e3130040	 tst         r3, #0x40
  01b04	0a000004	 beq         |$LN14@Emac_Minip@2|
  01b08	e59f0044	 ldr         r0, [pc, #0x44]
  01b0c	eb000000	 bl          NKDbgPrintfW
  01b10	e3a03001	 mov         r3, #1
  01b14	e58d3018	 str         r3, [sp, #0x18]
  01b18	ea000001	 b           |$LN15@Emac_Minip@2|
  01b1c		 |$LN14@Emac_Minip@2|
  01b1c	e3a03000	 mov         r3, #0
  01b20	e58d3018	 str         r3, [sp, #0x18]
  01b24		 |$LN15@Emac_Minip@2|

; 847  :         StatIntrHandler(pAdapter);

  01b24	e59d0008	 ldr         r0, [sp, #8]
  01b28	eb000000	 bl          StatIntrHandler

; 848  :         ack_flag |= ACK_MISC;

  01b2c	e59d3004	 ldr         r3, [sp, #4]
  01b30	e3833001	 orr         r3, r3, #1
  01b34	e58d3004	 str         r3, [sp, #4]
  01b38		 |$LN1@Emac_Minip@2|

; 849  :     }
; 850  :     
; 851  :     SocAckInterrupt(0xF);

  01b38	e3a0000f	 mov         r0, #0xF
  01b3c	eb000000	 bl          SocAckInterrupt

; 852  :     EmacEnableInterrupts(pAdapter);

  01b40	e59d0008	 ldr         r0, [sp, #8]
  01b44	eb000000	 bl          EmacEnableInterrupts

; 853  : 
; 854  :     //DEBUGMSG(DBG_FUNC && DBG_INT,(L"<--Emac_MiniportHandleInterrupt()\r\n"));
; 855  : 
; 856  :     return;
; 857  : }

  01b48	e28dd01c	 add         sp, sp, #0x1C
  01b4c	e89d6000	 ldmia       sp, {sp, lr}
  01b50	e12fff1e	 bx          lr
  01b54		 |$LN19@Emac_Minip@2|
  01b54		 |$LN20@Emac_Minip@2|
  01b54	00000000	 DCD         |??_C@_1FK@EOOACHNH@?$AA?$CL?$AAS?$AAt?$AAa?$AAt?$AAi?$AAs?$AAt?$AAi?$AAc?$AAs?$AA?5?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAI@|
  01b58		 |$LN21@Emac_Minip@2|
  01b58	00000000	 DCD         |dpCurSettings|
  01b5c		 |$LN22@Emac_Minip@2|
  01b5c	00000000	 DCD         |??_C@_1DG@JBBHDBI@?$AA?$CL?$AAL?$AAi?$AAn?$AAk?$AA?5?$AAc?$AAh?$AAa?$AAn?$AAg?$AAe?$AA?5?$AAi?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  01b60		 |$LN23@Emac_Minip@2|
  01b60	00000000	 DCD         |??_C@_1FK@CMCGIGCA@?$AA?$CL?$AAH?$AAo?$AAs?$AAt?$AA?5?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAI@|
  01b64		 |$LN24@Emac_Minip@2|
  01b64	00000000	 DCD         |??_C@_1FG@CPAAMBIJ@?$AA?$CL?$AA?5?$AAT?$AAr?$AAa?$AAs?$AAm?$AAi?$AAt?$AA?5?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAI?$AAn?$AAt@|
  01b68		 |$M50865|

			 ENDP  ; |Emac_MiniportHandleInterrupt|

	EXPORT	|Emac_MiniportDisableInterrupt|

  00050			 AREA	 |.pdata|, PDATA
|$T50878| DCD	|$LN5@Emac_Minip@3|
	DCD	0x40000b04
; Function compile flags: /Odtp

  01b68			 AREA	 |.text|, CODE, ARM

  01b68		 |Emac_MiniportDisableInterrupt| PROC

; 875  : {

  01b68		 |$LN5@Emac_Minip@3|
  01b68	e1a0c00d	 mov         r12, sp
  01b6c	e92d0001	 stmdb       sp!, {r0}
  01b70	e92d5000	 stmdb       sp!, {r12, lr}
  01b74	e24dd004	 sub         sp, sp, #4
  01b78		 |$M50875|

; 876  :     PEMAC_ADAPTER  pAdapter;
; 877  :     
; 878  : //    DEBUGMSG (DBG_FUNC && DBG_INT,(L"+Emac_MiniportDisableInterrupt()\r\n"));
; 879  :     
; 880  :     pAdapter = (PEMAC_ADAPTER)MiniportAdapterContext;

  01b78	e59d300c	 ldr         r3, [sp, #0xC]
  01b7c	e58d3000	 str         r3, [sp]

; 881  : 
; 882  :     EmacDisableInterrupts(pAdapter);

  01b80	e59d0000	 ldr         r0, [sp]
  01b84	eb000000	 bl          EmacDisableInterrupts

; 883  : 
; 884  :     return;
; 885  : }

  01b88	e28dd004	 add         sp, sp, #4
  01b8c	e89d6000	 ldmia       sp, {sp, lr}
  01b90	e12fff1e	 bx          lr
  01b94		 |$M50876|

			 ENDP  ; |Emac_MiniportDisableInterrupt|

	EXPORT	|??_C@_1EC@DNNJMGBL@?$AA?$DM?$AA?9?$AA?9?$AA?9?$AA?5?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAR?$AAe?$AAt?$AAu?$AAr?$AAn?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?$AN?$AA?6@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EM@COGDFPAP@?$AA?$CL?$AA?5?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAR?$AAe?$AAt?$AAu?$AAr?$AAn?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?5?$AA8?$AA?4?$AA2?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EC@KOKKOKJJ@?$AA?9?$AA?9?$AA?9?$AA?$DO?$AA?5?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAR?$AAe?$AAt?$AAu?$AAr?$AAn?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?$AN?$AA?6@| [ DATA ] ; `string'
	EXPORT	|Emac_MiniportReturnPacket|

  00058			 AREA	 |.pdata|, PDATA
|$T50889| DCD	|$LN14@Emac_Minip@4|
	DCD	0x40007904

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EC@DNNJMGBL@?$AA?$DM?$AA?9?$AA?9?$AA?9?$AA?5?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAR?$AAe?$AAt?$AAu?$AAr?$AAn?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?$AN?$AA?6@| DCB "<"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, " ", 0x0, "E", 0x0, "m"
	DCB	0x0, "a", 0x0, "c", 0x0, "_", 0x0, "M", 0x0, "i", 0x0, "n"
	DCB	0x0, "i", 0x0, "p", 0x0, "o", 0x0, "r", 0x0, "t", 0x0, "R"
	DCB	0x0, "e", 0x0, "t", 0x0, "u", 0x0, "r", 0x0, "n", 0x0, "P"
	DCB	0x0, "a", 0x0, "c", 0x0, "k", 0x0, "e", 0x0, "t", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EM@COGDFPAP@?$AA?$CL?$AA?5?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAR?$AAe?$AAt?$AAu?$AAr?$AAn?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?5?$AA8?$AA?4?$AA2?$AA?5@| DCB "+"
	DCB	0x0, " ", 0x0, "E", 0x0, "m", 0x0, "a", 0x0, "c", 0x0, "_"
	DCB	0x0, "M", 0x0, "i", 0x0, "n", 0x0, "i", 0x0, "p", 0x0, "o"
	DCB	0x0, "r", 0x0, "t", 0x0, "R", 0x0, "e", 0x0, "t", 0x0, "u"
	DCB	0x0, "r", 0x0, "n", 0x0, "P", 0x0, "a", 0x0, "c", 0x0, "k"
	DCB	0x0, "e", 0x0, "t", 0x0, " ", 0x0, "8", 0x0, ".", 0x0, "2"
	DCB	0x0, " ", 0x0, "%", 0x0, "X", 0x0, " ", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EC@KOKKOKJJ@?$AA?9?$AA?9?$AA?9?$AA?$DO?$AA?5?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAR?$AAe?$AAt?$AAu?$AAr?$AAn?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?$AN?$AA?6@| DCB "-"
	DCB	0x0, "-", 0x0, "-", 0x0, ">", 0x0, " ", 0x0, "E", 0x0, "m"
	DCB	0x0, "a", 0x0, "c", 0x0, "_", 0x0, "M", 0x0, "i", 0x0, "n"
	DCB	0x0, "i", 0x0, "p", 0x0, "o", 0x0, "r", 0x0, "t", 0x0, "R"
	DCB	0x0, "e", 0x0, "t", 0x0, "u", 0x0, "r", 0x0, "n", 0x0, "P"
	DCB	0x0, "a", 0x0, "c", 0x0, "k", 0x0, "e", 0x0, "t", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  01b94			 AREA	 |.text|, CODE, ARM

  01b94		 |Emac_MiniportReturnPacket| PROC

; 905  : {

  01b94		 |$LN14@Emac_Minip@4|
  01b94	e1a0c00d	 mov         r12, sp
  01b98	e92d0003	 stmdb       sp!, {r0, r1}
  01b9c	e92d5000	 stmdb       sp!, {r12, lr}
  01ba0	e24dd01c	 sub         sp, sp, #0x1C
  01ba4		 |$M50886|

; 906  :     PEMAC_RXPKTS    *TempPtr;
; 907  :     PEMAC_RXPKTS    pTmpRxPkt;
; 908  :     PNDIS_BUFFER    NdisBuffer = NULL;

  01ba4	e3a03000	 mov         r3, #0
  01ba8	e58d3004	 str         r3, [sp, #4]

; 909  :     PEMAC_ADAPTER   pAdapter;
; 910  :     
; 911  :     pAdapter = (PEMAC_ADAPTER) MiniportAdapterContext;

  01bac	e59d3024	 ldr         r3, [sp, #0x24]
  01bb0	e58d300c	 str         r3, [sp, #0xC]

; 912  :     
; 913  :     DEBUGMSG(DBG_FUNC && DBG_RX, (L"---> Emac_MiniportReturnPacket\r\n"));

  01bb4	e59f31b0	 ldr         r3, [pc, #0x1B0]
  01bb8	e5933440	 ldr         r3, [r3, #0x440]
  01bbc	e3130080	 tst         r3, #0x80
  01bc0	0a000008	 beq         |$LN6@Emac_Minip@4|
  01bc4	e59f31a0	 ldr         r3, [pc, #0x1A0]
  01bc8	e5933440	 ldr         r3, [r3, #0x440]
  01bcc	e3130020	 tst         r3, #0x20
  01bd0	0a000004	 beq         |$LN6@Emac_Minip@4|
  01bd4	e59f0198	 ldr         r0, [pc, #0x198]
  01bd8	eb000000	 bl          NKDbgPrintfW
  01bdc	e3a03001	 mov         r3, #1
  01be0	e58d3010	 str         r3, [sp, #0x10]
  01be4	ea000001	 b           |$LN7@Emac_Minip@4|
  01be8		 |$LN6@Emac_Minip@4|
  01be8	e3a03000	 mov         r3, #0
  01bec	e58d3010	 str         r3, [sp, #0x10]
  01bf0		 |$LN7@Emac_Minip@4|

; 914  : 
; 915  :     /* Unchain buffer attached preventing memory leak */
; 916  :     NdisUnchainBufferAtFront(Packet,&NdisBuffer);

  01bf0	e28d1004	 add         r1, sp, #4
  01bf4	e59d0028	 ldr         r0, [sp, #0x28]
  01bf8	eb000000	 bl          NdisUnchainBufferAtFront

; 917  :     
; 918  :     /* Reinitialize the NDIS packet for later use.
; 919  :      * This will remove the NdisBuffer Linkage from
; 920  :      * the NDIS Packet.
; 921  :      */
; 922  :     NdisReinitializePacket(Packet);    

  01bfc	e59d3028	 ldr         r3, [sp, #0x28]
  01c00	e2832008	 add         r2, r3, #8
  01c04	e3a03000	 mov         r3, #0
  01c08	e5823000	 str         r3, [r2]
  01c0c	e59d3028	 ldr         r3, [sp, #0x28]
  01c10	e283201c	 add         r2, r3, #0x1C
  01c14	e3a03000	 mov         r3, #0
  01c18	e5c23000	 strb        r3, [r2]

; 923  :     
; 924  :     /* Get the HALPacket associated with this packet */
; 925  :     TempPtr = (PEMAC_RXPKTS *)(Packet->MiniportReserved);

  01c1c	e59d3028	 ldr         r3, [sp, #0x28]
  01c20	e2833020	 add         r3, r3, #0x20
  01c24	e58d3008	 str         r3, [sp, #8]

; 926  :     
; 927  :     pTmpRxPkt = *TempPtr; 

  01c28	e59d3008	 ldr         r3, [sp, #8]
  01c2c	e5933000	 ldr         r3, [r3]
  01c30	e58d3000	 str         r3, [sp]

; 928  :     
; 929  :     DEBUGMSG (DBG_INFO,(L"+ Emac_MiniportReturnPacket 8.2 %X \r\n",pTmpRxPkt));

  01c34	e59f3130	 ldr         r3, [pc, #0x130]
  01c38	e5933440	 ldr         r3, [r3, #0x440]
  01c3c	e3130040	 tst         r3, #0x40
  01c40	0a000005	 beq         |$LN8@Emac_Minip@4|
  01c44	e59d1000	 ldr         r1, [sp]
  01c48	e59f0120	 ldr         r0, [pc, #0x120]
  01c4c	eb000000	 bl          NKDbgPrintfW
  01c50	e3a03001	 mov         r3, #1
  01c54	e58d3014	 str         r3, [sp, #0x14]
  01c58	ea000001	 b           |$LN9@Emac_Minip@4|
  01c5c		 |$LN8@Emac_Minip@4|
  01c5c	e3a03000	 mov         r3, #0
  01c60	e58d3014	 str         r3, [sp, #0x14]
  01c64		 |$LN9@Emac_Minip@4|

; 930  :     
; 931  :     /* This has every information about packets information like
; 932  :      * buffers chained to it. This will be useful when we are adding
; 933  :      * associated buffers to EMAC buffer descriptor queue
; 934  :      */
; 935  :     
; 936  :     AddBufToRxQueue(pAdapter, pTmpRxPkt);

  01c64	e59d1000	 ldr         r1, [sp]
  01c68	e59d000c	 ldr         r0, [sp, #0xC]
  01c6c	eb000000	 bl          AddBufToRxQueue

; 937  :     
; 938  :     /* Also clearing OOB data */
; 939  :     NdisZeroMemory(NDIS_OOB_DATA_FROM_PACKET(Packet),
; 940  :             sizeof(NDIS_PACKET_OOB_DATA));

  01c70	e3a02020	 mov         r2, #0x20
  01c74	e3a01000	 mov         r1, #0
  01c78	e59d3028	 ldr         r3, [sp, #0x28]
  01c7c	e283301e	 add         r3, r3, #0x1E
  01c80	e1d330b0	 ldrh        r3, [r3]
  01c84	e1a00003	 mov         r0, r3
  01c88	e59d3028	 ldr         r3, [sp, #0x28]
  01c8c	e0830000	 add         r0, r3, r0
  01c90	eb000000	 bl          memset

; 941  :     
; 942  :     /* Also insert in packet got in to packet pool */
; 943  :     QUEUE_INSERT(&pAdapter->m_RxPktPool, pTmpRxPkt);

  01c94	e59d300c	 ldr         r3, [sp, #0xC]
  01c98	e2933e1b	 adds        r3, r3, #0x1B, 28
  01c9c	0a00001f	 beq         |$LN3@Emac_Minip@4|
  01ca0	e59d3000	 ldr         r3, [sp]
  01ca4	e3530000	 cmp         r3, #0
  01ca8	0a00001c	 beq         |$LN3@Emac_Minip@4|
  01cac	e59d300c	 ldr         r3, [sp, #0xC]
  01cb0	e2833e1b	 add         r3, r3, #0x1B, 28
  01cb4	e5933000	 ldr         r3, [r3]
  01cb8	e3530000	 cmp         r3, #0
  01cbc	1a000004	 bne         |$LN2@Emac_Minip@4|
  01cc0	e59d300c	 ldr         r3, [sp, #0xC]
  01cc4	e2832e1b	 add         r2, r3, #0x1B, 28
  01cc8	e59d3000	 ldr         r3, [sp]
  01ccc	e5823000	 str         r3, [r2]
  01cd0	ea000004	 b           |$LN1@Emac_Minip@4|
  01cd4		 |$LN2@Emac_Minip@4|
  01cd4	e59d300c	 ldr         r3, [sp, #0xC]
  01cd8	e2833f6d	 add         r3, r3, #0x6D, 30
  01cdc	e5932000	 ldr         r2, [r3]
  01ce0	e59d3000	 ldr         r3, [sp]
  01ce4	e5823000	 str         r3, [r2]
  01ce8		 |$LN1@Emac_Minip@4|
  01ce8	e59d300c	 ldr         r3, [sp, #0xC]
  01cec	e2832f6d	 add         r2, r3, #0x6D, 30
  01cf0	e59d3000	 ldr         r3, [sp]
  01cf4	e5823000	 str         r3, [r2]
  01cf8	e59d300c	 ldr         r3, [sp, #0xC]
  01cfc	e2833f6e	 add         r3, r3, #0x6E, 30
  01d00	e5933000	 ldr         r3, [r3]
  01d04	e2832001	 add         r2, r3, #1
  01d08	e59d300c	 ldr         r3, [sp, #0xC]
  01d0c	e2833f6e	 add         r3, r3, #0x6E, 30
  01d10	e5832000	 str         r2, [r3]
  01d14	e59d2000	 ldr         r2, [sp]
  01d18	e3a03000	 mov         r3, #0
  01d1c	e5823000	 str         r3, [r2]
  01d20		 |$LN3@Emac_Minip@4|

; 944  :     
; 945  :     DEBUGMSG(DBG_FUNC && DBG_RX, (L"<--- Emac_MiniportReturnPacket\r\n"));

  01d20	e59f3044	 ldr         r3, [pc, #0x44]
  01d24	e5933440	 ldr         r3, [r3, #0x440]
  01d28	e3130080	 tst         r3, #0x80
  01d2c	0a000008	 beq         |$LN10@Emac_Minip@4|
  01d30	e59f3034	 ldr         r3, [pc, #0x34]
  01d34	e5933440	 ldr         r3, [r3, #0x440]
  01d38	e3130020	 tst         r3, #0x20
  01d3c	0a000004	 beq         |$LN10@Emac_Minip@4|
  01d40	e59f0020	 ldr         r0, [pc, #0x20]
  01d44	eb000000	 bl          NKDbgPrintfW
  01d48	e3a03001	 mov         r3, #1
  01d4c	e58d3018	 str         r3, [sp, #0x18]
  01d50	ea000001	 b           |$LN11@Emac_Minip@4|
  01d54		 |$LN10@Emac_Minip@4|
  01d54	e3a03000	 mov         r3, #0
  01d58	e58d3018	 str         r3, [sp, #0x18]
  01d5c		 |$LN11@Emac_Minip@4|

; 946  : 
; 947  : }

  01d5c	e28dd01c	 add         sp, sp, #0x1C
  01d60	e89d6000	 ldmia       sp, {sp, lr}
  01d64	e12fff1e	 bx          lr
  01d68		 |$LN15@Emac_Minip@4|
  01d68		 |$LN16@Emac_Minip@4|
  01d68	00000000	 DCD         |??_C@_1EC@DNNJMGBL@?$AA?$DM?$AA?9?$AA?9?$AA?9?$AA?5?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAR?$AAe?$AAt?$AAu?$AAr?$AAn?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?$AN?$AA?6@|
  01d6c		 |$LN17@Emac_Minip@4|
  01d6c	00000000	 DCD         |dpCurSettings|
  01d70		 |$LN18@Emac_Minip@4|
  01d70	00000000	 DCD         |??_C@_1EM@COGDFPAP@?$AA?$CL?$AA?5?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAR?$AAe?$AAt?$AAu?$AAr?$AAn?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?5?$AA8?$AA?4?$AA2?$AA?5@|
  01d74		 |$LN19@Emac_Minip@4|
  01d74	00000000	 DCD         |??_C@_1EC@KOKKOKJJ@?$AA?9?$AA?9?$AA?9?$AA?$DO?$AA?5?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAR?$AAe?$AAt?$AAu?$AAr?$AAn?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?$AN?$AA?6@|
  01d78		 |$M50887|

			 ENDP  ; |Emac_MiniportReturnPacket|

	END
