; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\EMAC\Emac_Filter.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|??_C@_1GI@DKAACIJN@?$AAE?$AAn?$AAt?$AAe?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAE?$AAm?$AAa?$AAc?$AAC?$AAl?$AAe?$AAa?$AAr?$AAM?$AAu?$AAl?$AAt?$AAi?$AAc?$AAa?$AAs?$AAt?$AAA?$AAd?$AAd?$AAr?$AAe@| [ DATA ] ; `string'
	EXPORT	|EmacClearMulticastAddressTable|
	IMPORT	|memset|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|dpCurSettings|

  00000			 AREA	 |.pdata|, PDATA
|$T50323| DCD	|$LN7@EmacClearM|
	DCD	0x40003004
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\emac\emac_filter.c

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GI@DKAACIJN@?$AAE?$AAn?$AAt?$AAe?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAE?$AAm?$AAa?$AAc?$AAC?$AAl?$AAe?$AAa?$AAr?$AAM?$AAu?$AAl?$AAt?$AAi?$AAc?$AAa?$AAs?$AAt?$AAA?$AAd?$AAd?$AAr?$AAe@| DCB "E"
	DCB	0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "i", 0x0, "n"
	DCB	0x0, "g", 0x0, " ", 0x0, "E", 0x0, "m", 0x0, "a", 0x0, "c"
	DCB	0x0, "C", 0x0, "l", 0x0, "e", 0x0, "a", 0x0, "r", 0x0, "M"
	DCB	0x0, "u", 0x0, "l", 0x0, "t", 0x0, "i", 0x0, "c", 0x0, "a"
	DCB	0x0, "s", 0x0, "t", 0x0, "A", 0x0, "d", 0x0, "d", 0x0, "r"
	DCB	0x0, "e", 0x0, "s", 0x0, "s", 0x0, "T", 0x0, "a", 0x0, "b"
	DCB	0x0, "l", 0x0, "e", 0x0, " ", 0x0, "F", 0x0, "u", 0x0, "n"
	DCB	0x0, "c", 0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, " "
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |EmacClearMulticastAddressTable| PROC

; 30   : {

  00000		 |$LN7@EmacClearM|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd010	 sub         sp, sp, #0x10
  00010		 |$M50320|

; 31   :     PEMAC_ADAPTER   pAdapter;
; 32   :     NDIS_STATUS     Status = NDIS_STATUS_SUCCESS;

  00010	e3a03000	 mov         r3, #0
  00014	e58d3000	 str         r3, [sp]

; 33   :     
; 34   :     /*
; 35   :      * Recover the Adapter pointer from the MiniportAdapterContext.
; 36   :      */
; 37   :     pAdapter = (PEMAC_ADAPTER)MiniportAdapterContext;

  00018	e59d3018	 ldr         r3, [sp, #0x18]
  0001c	e58d3004	 str         r3, [sp, #4]

; 38   : 
; 39   :     DEBUGMSG(DBG_FUNC, 
; 40   :             (L"Entering EmacClearMulticastAddressTable Function \r\n"));

  00020	e59f3094	 ldr         r3, [pc, #0x94]
  00024	e5933440	 ldr         r3, [r3, #0x440]
  00028	e3130080	 tst         r3, #0x80
  0002c	0a000004	 beq         |$LN3@EmacClearM|
  00030	e59f0080	 ldr         r0, [pc, #0x80]
  00034	eb000000	 bl          NKDbgPrintfW
  00038	e3a03001	 mov         r3, #1
  0003c	e58d300c	 str         r3, [sp, #0xC]
  00040	ea000001	 b           |$LN4@EmacClearM|
  00044		 |$LN3@EmacClearM|
  00044	e3a03000	 mov         r3, #0
  00048	e58d300c	 str         r3, [sp, #0xC]
  0004c		 |$LN4@EmacClearM|

; 41   :    
; 42   :     /* 
; 43   :      * Clear the receive Multicast table in the hardware first. 
; 44   :      * Disable the receive Filter before writing into the receive Filter
; 45   :      * memory.
; 46   :      */
; 47   :     pAdapter->m_pEmacRegsBase->MACHASH1 = 0x0;

  0004c	e59d3004	 ldr         r3, [sp, #4]
  00050	e2833004	 add         r3, r3, #4
  00054	e5933000	 ldr         r3, [r3]
  00058	e2832f76	 add         r2, r3, #0x76, 30
  0005c	e3a03000	 mov         r3, #0
  00060	e5823000	 str         r3, [r2]

; 48   :     pAdapter->m_pEmacRegsBase->MACHASH2 = 0x0;

  00064	e59d3004	 ldr         r3, [sp, #4]
  00068	e2833004	 add         r3, r3, #4
  0006c	e5933000	 ldr         r3, [r3]
  00070	e2832f77	 add         r2, r3, #0x77, 30
  00074	e3a03000	 mov         r3, #0
  00078	e5823000	 str         r3, [r2]

; 49   : 
; 50   :     /* Clear the receive multicast table in the software */
; 51   :     NdisZeroMemory(pAdapter->m_MulticastTable,
; 52   :                   sizeof(pAdapter->m_MulticastTable));

  0007c	e3a02d06	 mov         r2, #6, 26
  00080	e3a01000	 mov         r1, #0
  00084	e59d3004	 ldr         r3, [sp, #4]
  00088	e2830f7b	 add         r0, r3, #0x7B, 30
  0008c	eb000000	 bl          memset

; 53   :                   
; 54   :     pAdapter->m_NumMulticastEntries = 0;

  00090	e59d3004	 ldr         r3, [sp, #4]
  00094	e2832fdb	 add         r2, r3, #0xDB, 30
  00098	e3a03000	 mov         r3, #0
  0009c	e5823000	 str         r3, [r2]

; 55   : 
; 56   :     
; 57   :     /* Return success*/
; 58   :     return Status;

  000a0	e59d3000	 ldr         r3, [sp]
  000a4	e58d3008	 str         r3, [sp, #8]

; 59   : }

  000a8	e59d0008	 ldr         r0, [sp, #8]
  000ac	e28dd010	 add         sp, sp, #0x10
  000b0	e89d6000	 ldmia       sp, {sp, lr}
  000b4	e12fff1e	 bx          lr
  000b8		 |$LN8@EmacClearM|
  000b8		 |$LN9@EmacClearM|
  000b8	00000000	 DCD         |??_C@_1GI@DKAACIJN@?$AAE?$AAn?$AAt?$AAe?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAE?$AAm?$AAa?$AAc?$AAC?$AAl?$AAe?$AAa?$AAr?$AAM?$AAu?$AAl?$AAt?$AAi?$AAc?$AAa?$AAs?$AAt?$AAA?$AAd?$AAd?$AAr?$AAe@|
  000bc		 |$LN10@EmacClearM|
  000bc	00000000	 DCD         |dpCurSettings|
  000c0		 |$M50321|

			 ENDP  ; |EmacClearMulticastAddressTable|

	EXPORT	|ComputeHashValue|
	IMPORT	|__rt_sdiv|

  00008			 AREA	 |.pdata|, PDATA
|$T50333| DCD	|$LN11@ComputeHas|
	DCD	0x40004b04
; Function compile flags: /Odtp

  000c0			 AREA	 |.text|, CODE, ARM

  000c0		 |ComputeHashValue| PROC

; 72   : {

  000c0		 |$LN11@ComputeHas|
  000c0	e1a0c00d	 mov         r12, sp
  000c4	e92d0001	 stmdb       sp!, {r0}
  000c8	e92d5010	 stmdb       sp!, {r4, r12, lr}
  000cc	e24dd01c	 sub         sp, sp, #0x1C
  000d0		 |$M50330|

; 73   :    UINT     OutIndex;
; 74   :    UINT     InIndex;
; 75   :    UINT     Result=0;

  000d0	e3a03000	 mov         r3, #0
  000d4	e58d3008	 str         r3, [sp, #8]

; 76   :    USHORT   HashFunVal;
; 77   :    UCHAR    BitPos;
; 78   :    UCHAR    MACAddrIndex;
; 79   :    
; 80   :     for(OutIndex = 0; OutIndex < 6; OutIndex++)

  000d8	e3a03000	 mov         r3, #0
  000dc	e58d3004	 str         r3, [sp, #4]
  000e0	ea000002	 b           |$LN6@ComputeHas|
  000e4		 |$LN5@ComputeHas|
  000e4	e59d3004	 ldr         r3, [sp, #4]
  000e8	e2833001	 add         r3, r3, #1
  000ec	e58d3004	 str         r3, [sp, #4]
  000f0		 |$LN6@ComputeHas|
  000f0	e59d3004	 ldr         r3, [sp, #4]
  000f4	e3530006	 cmp         r3, #6
  000f8	2a000032	 bcs         |$LN4@ComputeHas|

; 81   :         {
; 82   :         
; 83   :         /* After each of 6 bits calculation value should be reset to low */
; 84   :         HashFunVal =0;

  000fc	e3a03000	 mov         r3, #0
  00100	e1cd30b0	 strh        r3, [sp]

; 85   :       
; 86   :         for(InIndex = 0; InIndex < 8; InIndex++)

  00104	e3a03000	 mov         r3, #0
  00108	e58d3010	 str         r3, [sp, #0x10]
  0010c	ea000002	 b           |$LN3@ComputeHas|
  00110		 |$LN2@ComputeHas|
  00110	e59d3010	 ldr         r3, [sp, #0x10]
  00114	e2833001	 add         r3, r3, #1
  00118	e58d3010	 str         r3, [sp, #0x10]
  0011c		 |$LN3@ComputeHas|
  0011c	e59d3010	 ldr         r3, [sp, #0x10]
  00120	e3530008	 cmp         r3, #8
  00124	2a00001f	 bcs         |$LN1@ComputeHas|

; 87   :             {
; 88   :             /* Calculate the bit position among 48 bits in mac address acc. to
; 89   :              * algorithm in TRM 
; 90   :              */
; 91   :             
; 92   :             BitPos = OutIndex + 6*InIndex;

  00128	e59d1010	 ldr         r1, [sp, #0x10]
  0012c	e3a03006	 mov         r3, #6
  00130	e0020391	 mul         r2, r1, r3
  00134	e59d3004	 ldr         r3, [sp, #4]
  00138	e0833002	 add         r3, r3, r2
  0013c	e20330ff	 and         r3, r3, #0xFF
  00140	e5cd300c	 strb        r3, [sp, #0xC]

; 93   :             
; 94   :             /* Here we need to calculate the MAC array index where the particular
; 95   :              * BitPos exists also pAddress[0] indicates 47-40 bits and so on
; 96   :              * so reversing is taken care by substracting 5
; 97   :              */
; 98   :              
; 99   :             MACAddrIndex = 5 - BitPos/8 ;

  00144	e5dd300c	 ldrb        r3, [sp, #0xC]
  00148	e1a01003	 mov         r1, r3
  0014c	e3a00008	 mov         r0, #8
  00150	eb000000	 bl          __rt_sdiv
  00154	e2603005	 rsb         r3, r0, #5
  00158	e20330ff	 and         r3, r3, #0xFF
  0015c	e5cd3014	 strb        r3, [sp, #0x14]

; 100  :             
; 101  :             /* This expression calulates the BitPos value (either high or low)
; 102  :              * and subsequently XOR ing with 8 BitPos and storing it in HashFunVal
; 103  :              * which should be also 0 or 1 acc. to TRM
; 104  :              */
; 105  :              
; 106  :             HashFunVal ^= ( pAddress[MACAddrIndex] >> (BitPos % 8)) & BIT(0) ;

  00160	e5dd3014	 ldrb        r3, [sp, #0x14]
  00164	e1a02003	 mov         r2, r3
  00168	e59d3028	 ldr         r3, [sp, #0x28]
  0016c	e0833002	 add         r3, r3, r2
  00170	e5d33000	 ldrb        r3, [r3]
  00174	e1a04003	 mov         r4, r3
  00178	e5dd300c	 ldrb        r3, [sp, #0xC]
  0017c	e1a01003	 mov         r1, r3
  00180	e3a00008	 mov         r0, #8
  00184	eb000000	 bl          __rt_sdiv
  00188	e1a03154	 mov         r3, r4, asr r1
  0018c	e2032001	 and         r2, r3, #1
  00190	e1dd30b0	 ldrh        r3, [sp]
  00194	e0233002	 eor         r3, r3, r2
  00198	e1a03803	 mov         r3, r3, lsl #16
  0019c	e1a03823	 mov         r3, r3, lsr #16
  001a0	e1cd30b0	 strh        r3, [sp]

; 107  :             
; 108  :             }

  001a4	eaffffd9	 b           |$LN2@ComputeHas|
  001a8		 |$LN1@ComputeHas|

; 109  :             
; 110  :         /* Storing value each of 6 bits in the Result by ORRing each bit 
; 111  :          * of it by the value obtained 
; 112  :          */
; 113  :                 
; 114  :         Result |= HashFunVal << OutIndex;

  001a8	e1dd30b0	 ldrh        r3, [sp]
  001ac	e1a02003	 mov         r2, r3
  001b0	e59d3004	 ldr         r3, [sp, #4]
  001b4	e1a02312	 mov         r2, r2, lsl r3
  001b8	e59d3008	 ldr         r3, [sp, #8]
  001bc	e1833002	 orr         r3, r3, r2
  001c0	e58d3008	 str         r3, [sp, #8]

; 115  :         
; 116  :         }

  001c4	eaffffc6	 b           |$LN5@ComputeHas|
  001c8		 |$LN4@ComputeHas|

; 117  :               
; 118  :    /* Since we are interested only in last 6 bits returning the same */
; 119  :    
; 120  :    return (USHORT)(Result & 0x3F);

  001c8	e59d3008	 ldr         r3, [sp, #8]
  001cc	e203303f	 and         r3, r3, #0x3F
  001d0	e1a03803	 mov         r3, r3, lsl #16
  001d4	e1a03823	 mov         r3, r3, lsr #16
  001d8	e1cd31b8	 strh        r3, [sp, #0x18]

; 121  :    
; 122  : }

  001dc	e1dd01b8	 ldrh        r0, [sp, #0x18]
  001e0	e28dd01c	 add         sp, sp, #0x1C
  001e4	e89d6010	 ldmia       sp, {r4, sp, lr}
  001e8	e12fff1e	 bx          lr
  001ec		 |$M50331|

			 ENDP  ; |ComputeHashValue|

	EXPORT	|EmacAddMulticastAddress|

  00010			 AREA	 |.pdata|, PDATA
|$T50339| DCD	|$LN9@EmacAddMul|
	DCD	0x40003404
; Function compile flags: /Odtp

  001ec			 AREA	 |.text|, CODE, ARM

  001ec		 |EmacAddMulticastAddress| PROC

; 136  : {

  001ec		 |$LN9@EmacAddMul|
  001ec	e1a0c00d	 mov         r12, sp
  001f0	e92d0003	 stmdb       sp!, {r0, r1}
  001f4	e92d5000	 stmdb       sp!, {r12, lr}
  001f8	e24dd010	 sub         sp, sp, #0x10
  001fc		 |$M50336|

; 137  :     
; 138  :     PEMAC_ADAPTER   pAdapter;
; 139  :     UINT32          HashValue;
; 140  :     /*
; 141  :      * Recover the Adapter pointer from the MiniportAdapterContext.
; 142  :      */
; 143  :     pAdapter = (PEMAC_ADAPTER)MiniportAdapterContext;

  001fc	e59d3018	 ldr         r3, [sp, #0x18]
  00200	e58d3004	 str         r3, [sp, #4]

; 144  : 
; 145  :     
; 146  :     /* 
; 147  :      * Check if the MacAddress is a multicast address.
; 148  :      */ 
; 149  :     if((MacAddress[0] & BIT(0)) == 0) 

  00204	e59d301c	 ldr         r3, [sp, #0x1C]
  00208	e5d33000	 ldrb        r3, [r3]
  0020c	e3130001	 tst         r3, #1
  00210	1a000003	 bne         |$LN4@EmacAddMul|

; 150  :     {
; 151  :         return NDIS_STATUS_INVALID_DATA;

  00214	e3a03157	 mov         r3, #0x57, 2
  00218	e3833801	 orr         r3, r3, #1, 16
  0021c	e58d3008	 str         r3, [sp, #8]
  00220	ea000021	 b           |$LN5@EmacAddMul|
  00224		 |$LN4@EmacAddMul|

; 152  :     }
; 153  :     /* Compute the Hash value which is number between 0 to 63 is generated */
; 154  :     
; 155  :     HashValue = ComputeHashValue(MacAddress);   

  00224	e59d001c	 ldr         r0, [sp, #0x1C]
  00228	eb000000	 bl          ComputeHashValue
  0022c	e1cd00bc	 strh        r0, [sp, #0xC]
  00230	e1dd30bc	 ldrh        r3, [sp, #0xC]
  00234	e58d3000	 str         r3, [sp]

; 156  :     
; 157  :     if (HashValue < 32 ) 

  00238	e59d3000	 ldr         r3, [sp]
  0023c	e3530020	 cmp         r3, #0x20
  00240	2a000008	 bcs         |$LN3@EmacAddMul|

; 158  :     {
; 159  :         pAdapter->m_pEmacRegsBase->MACHASH1 = (0x1 << HashValue);

  00244	e59d2000	 ldr         r2, [sp]
  00248	e3a03001	 mov         r3, #1
  0024c	e1a02213	 mov         r2, r3, lsl r2
  00250	e59d3004	 ldr         r3, [sp, #4]
  00254	e2833004	 add         r3, r3, #4
  00258	e5933000	 ldr         r3, [r3]
  0025c	e2833f76	 add         r3, r3, #0x76, 30
  00260	e5832000	 str         r2, [r3]
  00264	ea00000e	 b           |$LN2@EmacAddMul|
  00268		 |$LN3@EmacAddMul|

; 160  :     }
; 161  :     else if ((HashValue >= 32 ) && (HashValue < 64 ))  

  00268	e59d3000	 ldr         r3, [sp]
  0026c	e3530020	 cmp         r3, #0x20
  00270	3a00000b	 bcc         |$LN1@EmacAddMul|
  00274	e59d3000	 ldr         r3, [sp]
  00278	e3530040	 cmp         r3, #0x40
  0027c	2a000008	 bcs         |$LN1@EmacAddMul|

; 162  :     {    
; 163  :         pAdapter->m_pEmacRegsBase->MACHASH2 = (0x1 << (HashValue-32));

  00280	e59d3000	 ldr         r3, [sp]
  00284	e2432020	 sub         r2, r3, #0x20
  00288	e3a03001	 mov         r3, #1
  0028c	e1a02213	 mov         r2, r3, lsl r2
  00290	e59d3004	 ldr         r3, [sp, #4]
  00294	e2833004	 add         r3, r3, #4
  00298	e5933000	 ldr         r3, [r3]
  0029c	e2833f77	 add         r3, r3, #0x77, 30
  002a0	e5832000	 str         r2, [r3]
  002a4		 |$LN1@EmacAddMul|
  002a4		 |$LN2@EmacAddMul|

; 164  :     }
; 165  :     
; 166  :     /* Return success*/
; 167  :     return NDIS_STATUS_SUCCESS;

  002a4	e3a03000	 mov         r3, #0
  002a8	e58d3008	 str         r3, [sp, #8]
  002ac		 |$LN5@EmacAddMul|

; 168  : }

  002ac	e59d0008	 ldr         r0, [sp, #8]
  002b0	e28dd010	 add         sp, sp, #0x10
  002b4	e89d6000	 ldmia       sp, {sp, lr}
  002b8	e12fff1e	 bx          lr
  002bc		 |$M50337|

			 ENDP  ; |EmacAddMulticastAddress|

	EXPORT	|??_C@_1FE@JIGMBJEE@?$AA?$DM?$AA?9?$AA?9?$AA?5?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAS?$AAe?$AAt?$AAI?$AAn?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GO@FKNBJJKM@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAF?$AAi?$AAl?$AAt?$AAe?$AAr?$AA?3?$AA?5?$AAS?$AAe?$AAt?$AAI?$AAn?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?3?$AA?5?$AAU?$AAn?$AAs@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HC@PPKOAANN@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAF?$AAi?$AAl?$AAt?$AAe?$AAr?$AA?3?$AA?5?$AAS?$AAe?$AAt?$AAI?$AAn?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?3?$AA?5?$AAS?$AAe?$AAt@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HC@HBCBAHDO@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAF?$AAi?$AAl?$AAt?$AAe?$AAr?$AA?3?$AA?5?$AAS?$AAe?$AAt?$AAI?$AAn?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?3?$AA?5?$AAS?$AAe?$AAt@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GK@DFHGJKPD@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAF?$AAi?$AAl?$AAt?$AAe?$AAr?$AA?3?$AA?5?$AAS?$AAe?$AAt?$AAI?$AAn?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?3?$AA?5?$AAG?$AAo?$AAt@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GI@PEMJJLEE@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAS?$AAe?$AAt?$AAI?$AAn?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?3?$AA?5?$AAI?$AAn?$AAv@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FA@DAMHIAFI@?$AA?9?$AA?9?$AA?9?$AA?$DO?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAS?$AAe?$AAt?$AAI?$AAn?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?5@| [ DATA ] ; `string'
	EXPORT	|Emac_MiniportSetInformation|
	IMPORT	|EmacDisableInterrupts|
	IMPORT	|EMACModStateChange|
	IMPORT	|memcpy|
	IMPORT	|__rt_udiv|

  00018			 AREA	 |.pdata|, PDATA
|$T50357| DCD	|$LN46@Emac_Minip|
	DCD	0x40014f04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FE@JIGMBJEE@?$AA?$DM?$AA?9?$AA?9?$AA?5?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAS?$AAe?$AAt?$AAI?$AAn?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?5@| DCB "<"
	DCB	0x0, "-", 0x0, "-", 0x0, " ", 0x0, "E", 0x0, "m", 0x0, "a"
	DCB	0x0, "c", 0x0, "_", 0x0, "M", 0x0, "i", 0x0, "n", 0x0, "i"
	DCB	0x0, "p", 0x0, "o", 0x0, "r", 0x0, "t", 0x0, "S", 0x0, "e"
	DCB	0x0, "t", 0x0, "I", 0x0, "n", 0x0, "f", 0x0, "o", 0x0, "r"
	DCB	0x0, "m", 0x0, "a", 0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n"
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "X", 0x0, " ", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GO@FKNBJJKM@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAF?$AAi?$AAl?$AAt?$AAe?$AAr?$AA?3?$AA?5?$AAS?$AAe?$AAt?$AAI?$AAn?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?3?$AA?5?$AAU?$AAn?$AAs@| DCB "E"
	DCB	0x0, "m", 0x0, "a", 0x0, "c", 0x0, "_", 0x0, "F", 0x0, "i"
	DCB	0x0, "l", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, ":", 0x0, " "
	DCB	0x0, "S", 0x0, "e", 0x0, "t", 0x0, "I", 0x0, "n", 0x0, "f"
	DCB	0x0, "o", 0x0, "r", 0x0, "m", 0x0, "a", 0x0, "t", 0x0, "i"
	DCB	0x0, "o", 0x0, "n", 0x0, ":", 0x0, " ", 0x0, "U", 0x0, "n"
	DCB	0x0, "s", 0x0, "u", 0x0, "p", 0x0, "p", 0x0, "o", 0x0, "r"
	DCB	0x0, "t", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "p", 0x0, "o"
	DCB	0x0, "w", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, "s", 0x0, "t"
	DCB	0x0, "a", 0x0, "t", 0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HC@PPKOAANN@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAF?$AAi?$AAl?$AAt?$AAe?$AAr?$AA?3?$AA?5?$AAS?$AAe?$AAt?$AAI?$AAn?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?3?$AA?5?$AAS?$AAe?$AAt@| DCB "E"
	DCB	0x0, "m", 0x0, "a", 0x0, "c", 0x0, "_", 0x0, "F", 0x0, "i"
	DCB	0x0, "l", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, ":", 0x0, " "
	DCB	0x0, "S", 0x0, "e", 0x0, "t", 0x0, "I", 0x0, "n", 0x0, "f"
	DCB	0x0, "o", 0x0, "r", 0x0, "m", 0x0, "a", 0x0, "t", 0x0, "i"
	DCB	0x0, "o", 0x0, "n", 0x0, ":", 0x0, " ", 0x0, "S", 0x0, "e"
	DCB	0x0, "t", 0x0, "t", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, " "
	DCB	0x0, "p", 0x0, "o", 0x0, "w", 0x0, "e", 0x0, "r", 0x0, " "
	DCB	0x0, "s", 0x0, "t", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, " "
	DCB	0x0, "t", 0x0, "o", 0x0, " ", 0x0, "D", 0x0, "3", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HC@HBCBAHDO@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAF?$AAi?$AAl?$AAt?$AAe?$AAr?$AA?3?$AA?5?$AAS?$AAe?$AAt?$AAI?$AAn?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?3?$AA?5?$AAS?$AAe?$AAt@| DCB "E"
	DCB	0x0, "m", 0x0, "a", 0x0, "c", 0x0, "_", 0x0, "F", 0x0, "i"
	DCB	0x0, "l", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, ":", 0x0, " "
	DCB	0x0, "S", 0x0, "e", 0x0, "t", 0x0, "I", 0x0, "n", 0x0, "f"
	DCB	0x0, "o", 0x0, "r", 0x0, "m", 0x0, "a", 0x0, "t", 0x0, "i"
	DCB	0x0, "o", 0x0, "n", 0x0, ":", 0x0, " ", 0x0, "S", 0x0, "e"
	DCB	0x0, "t", 0x0, "t", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, " "
	DCB	0x0, "p", 0x0, "o", 0x0, "w", 0x0, "e", 0x0, "r", 0x0, " "
	DCB	0x0, "s", 0x0, "t", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, " "
	DCB	0x0, "t", 0x0, "o", 0x0, " ", 0x0, "D", 0x0, "0", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GK@DFHGJKPD@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAF?$AAi?$AAl?$AAt?$AAe?$AAr?$AA?3?$AA?5?$AAS?$AAe?$AAt?$AAI?$AAn?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?3?$AA?5?$AAG?$AAo?$AAt@| DCB "E"
	DCB	0x0, "m", 0x0, "a", 0x0, "c", 0x0, "_", 0x0, "F", 0x0, "i"
	DCB	0x0, "l", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, ":", 0x0, " "
	DCB	0x0, "S", 0x0, "e", 0x0, "t", 0x0, "I", 0x0, "n", 0x0, "f"
	DCB	0x0, "o", 0x0, "r", 0x0, "m", 0x0, "a", 0x0, "t", 0x0, "i"
	DCB	0x0, "o", 0x0, "n", 0x0, ":", 0x0, " ", 0x0, "G", 0x0, "o"
	DCB	0x0, "t", 0x0, " ", 0x0, "O", 0x0, "I", 0x0, "D", 0x0, "_"
	DCB	0x0, "P", 0x0, "N", 0x0, "P", 0x0, "_", 0x0, "S", 0x0, "E"
	DCB	0x0, "T", 0x0, "_", 0x0, "P", 0x0, "O", 0x0, "W", 0x0, "E"
	DCB	0x0, "R", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GI@PEMJJLEE@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAS?$AAe?$AAt?$AAI?$AAn?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?3?$AA?5?$AAI?$AAn?$AAv@| DCB "E"
	DCB	0x0, "m", 0x0, "a", 0x0, "c", 0x0, "_", 0x0, "M", 0x0, "i"
	DCB	0x0, "n", 0x0, "i", 0x0, "p", 0x0, "o", 0x0, "r", 0x0, "t"
	DCB	0x0, "S", 0x0, "e", 0x0, "t", 0x0, "I", 0x0, "n", 0x0, "f"
	DCB	0x0, "o", 0x0, "r", 0x0, "m", 0x0, "a", 0x0, "t", 0x0, "i"
	DCB	0x0, "o", 0x0, "n", 0x0, ":", 0x0, " ", 0x0, "I", 0x0, "n"
	DCB	0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d", 0x0, " "
	DCB	0x0, "P", 0x0, "a", 0x0, "c", 0x0, "k", 0x0, "e", 0x0, "t"
	DCB	0x0, "F", 0x0, "i", 0x0, "l", 0x0, "t", 0x0, "e", 0x0, "r"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FA@DAMHIAFI@?$AA?9?$AA?9?$AA?9?$AA?$DO?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAS?$AAe?$AAt?$AAI?$AAn?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?5@| DCB "-"
	DCB	0x0, "-", 0x0, "-", 0x0, ">", 0x0, "E", 0x0, "m", 0x0, "a"
	DCB	0x0, "c", 0x0, "_", 0x0, "M", 0x0, "i", 0x0, "n", 0x0, "i"
	DCB	0x0, "p", 0x0, "o", 0x0, "r", 0x0, "t", 0x0, "S", 0x0, "e"
	DCB	0x0, "t", 0x0, "I", 0x0, "n", 0x0, "f", 0x0, "o", 0x0, "r"
	DCB	0x0, "m", 0x0, "a", 0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n"
	DCB	0x0, " ", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, " "
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  002bc			 AREA	 |.text|, CODE, ARM

  002bc		 |Emac_MiniportSetInformation| PROC

; 206  : {

  002bc		 |$LN46@Emac_Minip|
  002bc	e1a0c00d	 mov         r12, sp
  002c0	e92d000f	 stmdb       sp!, {r0 - r3}
  002c4	e92d5000	 stmdb       sp!, {r12, lr}
  002c8	e24dd040	 sub         sp, sp, #0x40
  002cc		 |$M50354|

; 207  :     PEMAC_ADAPTER           pAdapter;
; 208  :     NDIS_STATUS             Status;
; 209  :     DWORD                   PacketFilter;
; 210  :     DWORD                   EmacPktFilter;
; 211  :     PUCHAR                  MacAddress;
; 212  :     DWORD                   Index;
; 213  :     NDIS_DEVICE_POWER_STATE PowerState;
; 214  :     
; 215  :     DEBUGMSG(DBG_FUNC && DBG_OID, 
; 216  :             (L"--->Emac_MiniportSetInformation %08x \r\n",Oid));

  002cc	e59f34f8	 ldr         r3, [pc, #0x4F8]
  002d0	e5933440	 ldr         r3, [r3, #0x440]
  002d4	e3130080	 tst         r3, #0x80
  002d8	0a000009	 beq         |$LN33@Emac_Minip|
  002dc	e59f34e8	 ldr         r3, [pc, #0x4E8]
  002e0	e5933440	 ldr         r3, [r3, #0x440]
  002e4	e3130c01	 tst         r3, #1, 24
  002e8	0a000005	 beq         |$LN33@Emac_Minip|
  002ec	e59d104c	 ldr         r1, [sp, #0x4C]
  002f0	e59f04fc	 ldr         r0, [pc, #0x4FC]
  002f4	eb000000	 bl          NKDbgPrintfW
  002f8	e3a03001	 mov         r3, #1
  002fc	e58d3020	 str         r3, [sp, #0x20]
  00300	ea000001	 b           |$LN34@Emac_Minip|
  00304		 |$LN33@Emac_Minip|
  00304	e3a03000	 mov         r3, #0
  00308	e58d3020	 str         r3, [sp, #0x20]
  0030c		 |$LN34@Emac_Minip|

; 217  : 
; 218  :     /*
; 219  :      * Recover the Adapter pointer from the MiniportAdapterContext.
; 220  :      */
; 221  :     pAdapter = (PEMAC_ADAPTER)MiniportAdapterContext;

  0030c	e59d3048	 ldr         r3, [sp, #0x48]
  00310	e58d3014	 str         r3, [sp, #0x14]

; 222  : 
; 223  :     if(pAdapter == (PEMAC_ADAPTER) NULL)

  00314	e59d3014	 ldr         r3, [sp, #0x14]
  00318	e3530000	 cmp         r3, #0
  0031c	1a000003	 bne         |$LN30@Emac_Minip|

; 224  :     {
; 225  :         return NDIS_STATUS_NOT_ACCEPTED;

  00320	e3a03801	 mov         r3, #1, 16
  00324	e3833003	 orr         r3, r3, #3
  00328	e58d301c	 str         r3, [sp, #0x1C]
  0032c	ea000121	 b           |$LN31@Emac_Minip|
  00330		 |$LN30@Emac_Minip|

; 226  :     }
; 227  :     /*
; 228  :      * Set the Bytes read and Bytes Needed to be 0, so that if we return due
; 229  :      * to failure, it will be valid.
; 230  :      */
; 231  :     *BytesRead = 0;

  00330	e59d2058	 ldr         r2, [sp, #0x58]
  00334	e3a03000	 mov         r3, #0
  00338	e5823000	 str         r3, [r2]

; 232  :     *BytesNeeded  = 0;

  0033c	e59d205c	 ldr         r2, [sp, #0x5C]
  00340	e3a03000	 mov         r3, #0
  00344	e5823000	 str         r3, [r2]

; 233  : 
; 234  :     switch( Oid )

  00348	e59d304c	 ldr         r3, [sp, #0x4C]
  0034c	e58d3024	 str         r3, [sp, #0x24]
  00350	e59d2024	 ldr         r2, [sp, #0x24]
  00354	e59f3494	 ldr         r3, [pc, #0x494]
  00358	e1520003	 cmp         r2, r3
  0035c	8a00000c	 bhi         |$LN41@Emac_Minip|
  00360	e59d2024	 ldr         r2, [sp, #0x24]
  00364	e59f3484	 ldr         r3, [pc, #0x484]
  00368	e1520003	 cmp         r2, r3
  0036c	0a00000d	 beq         |$LN27@Emac_Minip|
  00370	e59d2024	 ldr         r2, [sp, #0x24]
  00374	e59f3470	 ldr         r3, [pc, #0x470]
  00378	e1520003	 cmp         r2, r3
  0037c	0a00004e	 beq         |$LN20@Emac_Minip|
  00380	e59d2024	 ldr         r2, [sp, #0x24]
  00384	e59f345c	 ldr         r3, [pc, #0x45C]
  00388	e1520003	 cmp         r2, r3
  0038c	0a000094	 beq         |$LN12@Emac_Minip|
  00390	ea0000f3	 b           |$LN1@Emac_Minip|
  00394		 |$LN41@Emac_Minip|
  00394	e59d2024	 ldr         r2, [sp, #0x24]
  00398	e59f3444	 ldr         r3, [pc, #0x444]
  0039c	e1520003	 cmp         r2, r3
  003a0	0a00009c	 beq         |$LN10@Emac_Minip|
  003a4	ea0000ee	 b           |$LN1@Emac_Minip|
  003a8		 |$LN27@Emac_Minip|

; 235  :     {
; 236  :         case OID_802_3_MULTICAST_LIST:
; 237  :             /*
; 238  :              * Check if the InformationBufferLength is multiple of Ethernet
; 239  :              * Mac address size.
; 240  :              */
; 241  :             if ((InformationBufferLength % ETH_LENGTH_OF_ADDRESS) != 0)

  003a8	e59d1054	 ldr         r1, [sp, #0x54]
  003ac	e3a00006	 mov         r0, #6
  003b0	eb000000	 bl          __rt_udiv
  003b4	e3510000	 cmp         r1, #0
  003b8	0a000003	 beq         |$LN26@Emac_Minip|

; 242  :             {
; 243  :                 return (NDIS_STATUS_INVALID_LENGTH);

  003bc	e3a03153	 mov         r3, #0x53, 2
  003c0	e3833801	 orr         r3, r3, #1, 16
  003c4	e58d301c	 str         r3, [sp, #0x1C]
  003c8	ea0000fa	 b           |$LN31@Emac_Minip|
  003cc		 |$LN26@Emac_Minip|

; 244  :             }
; 245  :             
; 246  :             /* 
; 247  :              * Clear old multicast entries, if any, before accepting a 
; 248  :              * set of new ones.
; 249  :              */
; 250  :              
; 251  :             EmacClearMulticastAddressTable(pAdapter);

  003cc	e59d0014	 ldr         r0, [sp, #0x14]
  003d0	eb000000	 bl          EmacClearMulticastAddressTable

; 252  : 
; 253  :             if (InformationBufferLength == 0)

  003d4	e59d3054	 ldr         r3, [sp, #0x54]
  003d8	e3530000	 cmp         r3, #0
  003dc	1a000002	 bne         |$LN25@Emac_Minip|

; 254  :             {
; 255  :                 return NDIS_STATUS_SUCCESS;

  003e0	e3a03000	 mov         r3, #0
  003e4	e58d301c	 str         r3, [sp, #0x1C]
  003e8	ea0000f2	 b           |$LN31@Emac_Minip|
  003ec		 |$LN25@Emac_Minip|

; 256  :             }
; 257  :                 
; 258  :             /*
; 259  :              * For each of the MAC address in the Information Buffer, call
; 260  :              * HALAddMulticastAddress. The HALAddMulticastAddress handles any
; 261  :              * errors in the Multicast Address/Duplicates etc.
; 262  :              */
; 263  :              
; 264  :             MacAddress = (PUCHAR) InformationBuffer;

  003ec	e59d3050	 ldr         r3, [sp, #0x50]
  003f0	e58d3018	 str         r3, [sp, #0x18]

; 265  :             
; 266  :             for( Index = 0; 
; 267  :                  Index < (InformationBufferLength /ETH_LENGTH_OF_ADDRESS); 
; 268  :                  Index ++
; 269  :                )

  003f4	e3a03000	 mov         r3, #0
  003f8	e58d3000	 str         r3, [sp]
  003fc	ea000002	 b           |$LN24@Emac_Minip|
  00400		 |$LN23@Emac_Minip|
  00400	e59d3000	 ldr         r3, [sp]
  00404	e2833001	 add         r3, r3, #1
  00408	e58d3000	 str         r3, [sp]
  0040c		 |$LN24@Emac_Minip|
  0040c	e59d1054	 ldr         r1, [sp, #0x54]
  00410	e3a00006	 mov         r0, #6
  00414	eb000000	 bl          __rt_udiv
  00418	e59d3000	 ldr         r3, [sp]
  0041c	e1530000	 cmp         r3, r0
  00420	2a00001f	 bcs         |$LN22@Emac_Minip|

; 270  :             {
; 271  :                 Status = EmacAddMulticastAddress( pAdapter, MacAddress); 

  00424	e59d1018	 ldr         r1, [sp, #0x18]
  00428	e59d0014	 ldr         r0, [sp, #0x14]
  0042c	eb000000	 bl          EmacAddMulticastAddress
  00430	e58d0028	 str         r0, [sp, #0x28]
  00434	e59d3028	 ldr         r3, [sp, #0x28]
  00438	e58d300c	 str         r3, [sp, #0xC]

; 272  :                 if(NDIS_STATUS_SUCCESS != Status)

  0043c	e59d300c	 ldr         r3, [sp, #0xC]
  00440	e3530000	 cmp         r3, #0
  00444	0a000002	 beq         |$LN21@Emac_Minip|

; 273  :                 {
; 274  :                     return(Status);

  00448	e59d300c	 ldr         r3, [sp, #0xC]
  0044c	e58d301c	 str         r3, [sp, #0x1C]
  00450	ea0000d8	 b           |$LN31@Emac_Minip|
  00454		 |$LN21@Emac_Minip|

; 275  :                 }    
; 276  :                 MacAddress += ETH_LENGTH_OF_ADDRESS;

  00454	e59d3018	 ldr         r3, [sp, #0x18]
  00458	e2833006	 add         r3, r3, #6
  0045c	e58d3018	 str         r3, [sp, #0x18]

; 277  :                 
; 278  :                 NdisMoveMemory(pAdapter->m_MulticastTable[Index], 
; 279  :                         (PUINT8) MacAddress,
; 280  :                         ETH_LENGTH_OF_ADDRESS);

  00460	e3a02006	 mov         r2, #6
  00464	e59d1018	 ldr         r1, [sp, #0x18]
  00468	e59d3014	 ldr         r3, [sp, #0x14]
  0046c	e283ef7b	 add         lr, r3, #0x7B, 30
  00470	e59d0000	 ldr         r0, [sp]
  00474	e3a03006	 mov         r3, #6
  00478	e0030390	 mul         r3, r0, r3
  0047c	e08e0003	 add         r0, lr, r3
  00480	eb000000	 bl          memcpy

; 281  :                      
; 282  :                 pAdapter->m_NumMulticastEntries ++;

  00484	e59d3014	 ldr         r3, [sp, #0x14]
  00488	e2833fdb	 add         r3, r3, #0xDB, 30
  0048c	e5933000	 ldr         r3, [r3]
  00490	e2832001	 add         r2, r3, #1
  00494	e59d3014	 ldr         r3, [sp, #0x14]
  00498	e2833fdb	 add         r3, r3, #0xDB, 30
  0049c	e5832000	 str         r2, [r3]

; 283  :             }   

  004a0	eaffffd6	 b           |$LN23@Emac_Minip|
  004a4		 |$LN22@Emac_Minip|

; 284  :                 
; 285  :             /* 
; 286  :              * Set Bytes Read as InformationBufferLength,  & status as
; 287  :              * success 
; 288  :              */
; 289  :             *BytesRead = InformationBufferLength;

  004a4	e59d2054	 ldr         r2, [sp, #0x54]
  004a8	e59d3058	 ldr         r3, [sp, #0x58]
  004ac	e5832000	 str         r2, [r3]

; 290  :              Status = NDIS_STATUS_SUCCESS;

  004b0	e3a03000	 mov         r3, #0
  004b4	e58d300c	 str         r3, [sp, #0xC]

; 291  :              break;

  004b8	ea0000ac	 b           |$LN28@Emac_Minip|
  004bc		 |$LN20@Emac_Minip|

; 292  : 
; 293  :         case OID_GEN_CURRENT_PACKET_FILTER:
; 294  :             
; 295  :             /* Check that the InformationBufferLength is sizeof(ULONG) */
; 296  :             if (InformationBufferLength != sizeof(ULONG))

  004bc	e59d3054	 ldr         r3, [sp, #0x54]
  004c0	e3530004	 cmp         r3, #4
  004c4	0a000003	 beq         |$LN19@Emac_Minip|

; 297  :             {
; 298  :                 return (NDIS_STATUS_INVALID_LENGTH);

  004c8	e3a03153	 mov         r3, #0x53, 2
  004cc	e3833801	 orr         r3, r3, #1, 16
  004d0	e58d301c	 str         r3, [sp, #0x1C]
  004d4	ea0000b7	 b           |$LN31@Emac_Minip|
  004d8		 |$LN19@Emac_Minip|

; 299  :             }            
; 300  :             /*
; 301  :              * Now check if there are any unsupported Packet filter types that
; 302  :              * have been requested. If so return NDIS_STATUS_NOT_SUPPORTED.
; 303  :              */
; 304  :             NdisMoveMemory((PVOID)&PacketFilter, InformationBuffer,
; 305  :                            sizeof(ULONG));

  004d8	e3a02004	 mov         r2, #4
  004dc	e59d1050	 ldr         r1, [sp, #0x50]
  004e0	e28d0008	 add         r0, sp, #8
  004e4	eb000000	 bl          memcpy

; 306  :             
; 307  :             if (PacketFilter & (NDIS_PACKET_TYPE_ALL_FUNCTIONAL |
; 308  :                                 NDIS_PACKET_TYPE_SOURCE_ROUTING |
; 309  :                                 NDIS_PACKET_TYPE_SMT |
; 310  :                                 NDIS_PACKET_TYPE_MAC_FRAME |
; 311  :                                 NDIS_PACKET_TYPE_FUNCTIONAL |
; 312  :                                 NDIS_PACKET_TYPE_GROUP |
; 313  :                                 NDIS_PACKET_TYPE_ALL_LOCAL
; 314  :                                 ))  

  004e8	e59d2008	 ldr         r2, [sp, #8]
  004ec	e3a03a0f	 mov         r3, #0xF, 20
  004f0	e38330d0	 orr         r3, r3, #0xD0
  004f4	e1120003	 tst         r2, r3
  004f8	0a000011	 beq         |$LN18@Emac_Minip|

; 315  :                                 
; 316  :             {
; 317  :                 DEBUGMSG(DBG_WARN, 
; 318  :                          (L"Emac_MiniportSetInformation: Invalid PacketFilter\r\n"));

  004fc	e59f32c8	 ldr         r3, [pc, #0x2C8]
  00500	e5933440	 ldr         r3, [r3, #0x440]
  00504	e3130901	 tst         r3, #1, 18
  00508	0a000004	 beq         |$LN35@Emac_Minip|
  0050c	e59f02cc	 ldr         r0, [pc, #0x2CC]
  00510	eb000000	 bl          NKDbgPrintfW
  00514	e3a03001	 mov         r3, #1
  00518	e58d302c	 str         r3, [sp, #0x2C]
  0051c	ea000001	 b           |$LN36@Emac_Minip|
  00520		 |$LN35@Emac_Minip|
  00520	e3a03000	 mov         r3, #0
  00524	e58d302c	 str         r3, [sp, #0x2C]
  00528		 |$LN36@Emac_Minip|

; 319  :                 Status = NDIS_STATUS_NOT_SUPPORTED;

  00528	e3a03103	 mov         r3, #3, 2
  0052c	e38330bb	 orr         r3, r3, #0xBB
  00530	e58d300c	 str         r3, [sp, #0xC]

; 320  :                 *BytesRead = 4;

  00534	e59d2058	 ldr         r2, [sp, #0x58]
  00538	e3a03004	 mov         r3, #4
  0053c	e5823000	 str         r3, [r2]

; 321  :                 break;

  00540	ea00008a	 b           |$LN28@Emac_Minip|
  00544		 |$LN18@Emac_Minip|

; 322  :             }
; 323  :             
; 324  :             /* 
; 325  :              * Convert the NDIS Packet filter mapping into the EMAC
; 326  :              * Receive packet Filter mapping. 
; 327  :              */
; 328  :             
; 329  :             EmacPktFilter = 0;

  00544	e3a03000	 mov         r3, #0
  00548	e58d3010	 str         r3, [sp, #0x10]

; 330  :             
; 331  :             if((PacketFilter & NDIS_PACKET_TYPE_ALL_MULTICAST) ||
; 332  :                (PacketFilter & NDIS_PACKET_TYPE_PROMISCUOUS))

  0054c	e59d3008	 ldr         r3, [sp, #8]
  00550	e3130004	 tst         r3, #4
  00554	1a000002	 bne         |$LN16@Emac_Minip|
  00558	e59d3008	 ldr         r3, [sp, #8]
  0055c	e3130020	 tst         r3, #0x20
  00560	0a000002	 beq         |$LN17@Emac_Minip|
  00564		 |$LN16@Emac_Minip|

; 333  :             {    
; 334  :                 EmacPktFilter |= EMAC_RXMBPENABLE_RXCAFEN_ENABLE;

  00564	e59d3010	 ldr         r3, [sp, #0x10]
  00568	e3833602	 orr         r3, r3, #2, 12
  0056c	e58d3010	 str         r3, [sp, #0x10]
  00570		 |$LN17@Emac_Minip|

; 335  :             }    
; 336  :             
; 337  :             if(PacketFilter & NDIS_PACKET_TYPE_BROADCAST)

  00570	e59d3008	 ldr         r3, [sp, #8]
  00574	e3130008	 tst         r3, #8
  00578	0a000002	 beq         |$LN15@Emac_Minip|

; 338  :             {
; 339  :                 EmacPktFilter |= EMAC_RXMBPENABLE_RXBROADEN;

  0057c	e59d3010	 ldr         r3, [sp, #0x10]
  00580	e3833a02	 orr         r3, r3, #2, 20
  00584	e58d3010	 str         r3, [sp, #0x10]
  00588		 |$LN15@Emac_Minip|

; 340  :             }
; 341  :             
; 342  :             if(PacketFilter & NDIS_PACKET_TYPE_DIRECTED)
; 343  :             {
; 344  :                 /* Always supported */
; 345  :             }
; 346  :             if(PacketFilter & NDIS_PACKET_TYPE_MULTICAST)

  00588	e59d3008	 ldr         r3, [sp, #8]
  0058c	e3130002	 tst         r3, #2
  00590	0a000002	 beq         |$LN13@Emac_Minip|

; 347  :             { 
; 348  :                 EmacPktFilter |= EMAC_RXMBPENABLE_RXMULTIEN;

  00594	e59d3010	 ldr         r3, [sp, #0x10]
  00598	e3833020	 orr         r3, r3, #0x20
  0059c	e58d3010	 str         r3, [sp, #0x10]
  005a0		 |$LN13@Emac_Minip|

; 349  :             }
; 350  :             /* Set the current packet filter to EMAC Filter register */
; 351  :             pAdapter->m_pEmacRegsBase->RXMBPENABLE = EmacPktFilter;

  005a0	e59d3014	 ldr         r3, [sp, #0x14]
  005a4	e2833004	 add         r3, r3, #4
  005a8	e5933000	 ldr         r3, [r3]
  005ac	e2832c01	 add         r2, r3, #1, 24
  005b0	e59d3010	 ldr         r3, [sp, #0x10]
  005b4	e5823000	 str         r3, [r2]

; 352  :             
; 353  :             /* Set Bytes Read as InformationBufferLength, & status as success */
; 354  :             *BytesRead = InformationBufferLength;

  005b8	e59d2054	 ldr         r2, [sp, #0x54]
  005bc	e59d3058	 ldr         r3, [sp, #0x58]
  005c0	e5832000	 str         r2, [r3]

; 355  :             
; 356  :             /* Update PacketFilter but we always have NDIS_PACKET_TYPE_DIRECTED set */
; 357  :             pAdapter->m_PacketFilter = (PacketFilter|NDIS_PACKET_TYPE_DIRECTED);

  005c4	e59d3008	 ldr         r3, [sp, #8]
  005c8	e3832001	 orr         r2, r3, #1
  005cc	e59d3014	 ldr         r3, [sp, #0x14]
  005d0	e2833f6b	 add         r3, r3, #0x6B, 30
  005d4	e5832000	 str         r2, [r3]

; 358  :             Status = NDIS_STATUS_SUCCESS;

  005d8	e3a03000	 mov         r3, #0
  005dc	e58d300c	 str         r3, [sp, #0xC]

; 359  :             
; 360  :             break;

  005e0	ea000062	 b           |$LN28@Emac_Minip|
  005e4		 |$LN12@Emac_Minip|

; 361  : 
; 362  :         case OID_GEN_CURRENT_LOOKAHEAD:
; 363  :             /*
; 364  :              * We are going to indicate the full ethernet frame, and hence if
; 365  :              * somebody tries to set the lookahead, then set the status as
; 366  :              * success.
; 367  :              */
; 368  :             if (InformationBufferLength != 4)

  005e4	e59d3054	 ldr         r3, [sp, #0x54]
  005e8	e3530004	 cmp         r3, #4
  005ec	0a000003	 beq         |$LN11@Emac_Minip|

; 369  :             {
; 370  :                 return (NDIS_STATUS_INVALID_LENGTH);

  005f0	e3a03153	 mov         r3, #0x53, 2
  005f4	e3833801	 orr         r3, r3, #1, 16
  005f8	e58d301c	 str         r3, [sp, #0x1C]
  005fc	ea00006d	 b           |$LN31@Emac_Minip|
  00600		 |$LN11@Emac_Minip|

; 371  :             }   
; 372  :             /* Set Bytes Read as 4, & status as success */
; 373  :             *BytesRead = 4;

  00600	e59d2058	 ldr         r2, [sp, #0x58]
  00604	e3a03004	 mov         r3, #4
  00608	e5823000	 str         r3, [r2]

; 374  :             Status = NDIS_STATUS_SUCCESS;

  0060c	e3a03000	 mov         r3, #0
  00610	e58d300c	 str         r3, [sp, #0xC]

; 375  :             break;

  00614	ea000055	 b           |$LN28@Emac_Minip|
  00618		 |$LN10@Emac_Minip|

; 376  : 
; 377  :         case OID_PNP_SET_POWER:
; 378  :             DEBUGMSG(DBG_FUNC, (TEXT ("Emac_Filter: SetInformation: Got OID_PNP_SET_POWER\r\n")));

  00618	e59f31ac	 ldr         r3, [pc, #0x1AC]
  0061c	e5933440	 ldr         r3, [r3, #0x440]
  00620	e3130080	 tst         r3, #0x80
  00624	0a000004	 beq         |$LN37@Emac_Minip|
  00628	e59f01ac	 ldr         r0, [pc, #0x1AC]
  0062c	eb000000	 bl          NKDbgPrintfW
  00630	e3a03001	 mov         r3, #1
  00634	e58d3030	 str         r3, [sp, #0x30]
  00638	ea000001	 b           |$LN38@Emac_Minip|
  0063c		 |$LN37@Emac_Minip|
  0063c	e3a03000	 mov         r3, #0
  00640	e58d3030	 str         r3, [sp, #0x30]
  00644		 |$LN38@Emac_Minip|

; 379  :             if (!InformationBuffer || InformationBufferLength < sizeof(NDIS_DEVICE_POWER_STATE))

  00644	e59d3050	 ldr         r3, [sp, #0x50]
  00648	e3530000	 cmp         r3, #0
  0064c	0a000002	 beq         |$LN8@Emac_Minip|
  00650	e59d3054	 ldr         r3, [sp, #0x54]
  00654	e3530004	 cmp         r3, #4
  00658	2a000009	 bcs         |$LN9@Emac_Minip|
  0065c		 |$LN8@Emac_Minip|

; 380  :             {
; 381  :                 // Buffer not big enough
; 382  :                 Status = NDIS_STATUS_INVALID_LENGTH;

  0065c	e3a03153	 mov         r3, #0x53, 2
  00660	e3833801	 orr         r3, r3, #1, 16
  00664	e58d300c	 str         r3, [sp, #0xC]

; 383  :                 *BytesRead = 0;

  00668	e59d2058	 ldr         r2, [sp, #0x58]
  0066c	e3a03000	 mov         r3, #0
  00670	e5823000	 str         r3, [r2]

; 384  :                 *BytesNeeded = sizeof(PowerState);

  00674	e59d205c	 ldr         r2, [sp, #0x5C]
  00678	e3a03004	 mov         r3, #4
  0067c	e5823000	 str         r3, [r2]

; 385  :             }
; 386  :             else

  00680	ea000036	 b           |$LN7@Emac_Minip|
  00684		 |$LN9@Emac_Minip|

; 387  :             {
; 388  :                 NdisMoveMemory(&PowerState, (PUCHAR)InformationBuffer, sizeof(PowerState));

  00684	e3a02004	 mov         r2, #4
  00688	e59d1050	 ldr         r1, [sp, #0x50]
  0068c	e28d0004	 add         r0, sp, #4
  00690	eb000000	 bl          memcpy

; 389  :                 switch (PowerState)

  00694	e59d3004	 ldr         r3, [sp, #4]
  00698	e58d3034	 str         r3, [sp, #0x34]
  0069c	e59d3034	 ldr         r3, [sp, #0x34]
  006a0	e3530001	 cmp         r3, #1
  006a4	0a000003	 beq         |$LN4@Emac_Minip|
  006a8	e59d3034	 ldr         r3, [sp, #0x34]
  006ac	e3530004	 cmp         r3, #4
  006b0	0a00000a	 beq         |$LN3@Emac_Minip|
  006b4	ea000015	 b           |$LN2@Emac_Minip|
  006b8		 |$LN4@Emac_Minip|

; 390  :                 {
; 391  :                 case NdisDeviceStateD0:
; 392  :                     // Power on device
; 393  :                     DEBUGMSG(1, (TEXT ("Emac_Filter: SetInformation: Setting power state to D0\r\n")));

  006b8	e59f0118	 ldr         r0, [pc, #0x118]
  006bc	eb000000	 bl          NKDbgPrintfW

; 394  :                     EMACModStateChange(pAdapter->m_device,ENABLED);

  006c0	e3a01001	 mov         r1, #1
  006c4	e59d3014	 ldr         r3, [sp, #0x14]
  006c8	e2833094	 add         r3, r3, #0x94
  006cc	e5930000	 ldr         r0, [r3]
  006d0	eb000000	 bl          EMACModStateChange

; 395  :                     Status = NDIS_STATUS_SUCCESS;

  006d4	e3a03000	 mov         r3, #0
  006d8	e58d300c	 str         r3, [sp, #0xC]

; 396  :                     break;

  006dc	ea00001f	 b           |$LN5@Emac_Minip|
  006e0		 |$LN3@Emac_Minip|

; 397  :                 case NdisDeviceStateD3:
; 398  :                     // Power down device
; 399  :                     DEBUGMSG(1, (TEXT ("Emac_Filter: SetInformation: Setting power state to D3\r\n")));

  006e0	e59f00ec	 ldr         r0, [pc, #0xEC]
  006e4	eb000000	 bl          NKDbgPrintfW

; 400  : 					EmacDisableInterrupts(pAdapter);

  006e8	e59d0014	 ldr         r0, [sp, #0x14]
  006ec	eb000000	 bl          EmacDisableInterrupts

; 401  :                     EMACModStateChange(pAdapter->m_device,DISABLED);

  006f0	e3a01002	 mov         r1, #2
  006f4	e59d3014	 ldr         r3, [sp, #0x14]
  006f8	e2833094	 add         r3, r3, #0x94
  006fc	e5930000	 ldr         r0, [r3]
  00700	eb000000	 bl          EMACModStateChange

; 402  :                     Status = NDIS_STATUS_SUCCESS;

  00704	e3a03000	 mov         r3, #0
  00708	e58d300c	 str         r3, [sp, #0xC]

; 403  :                     break;

  0070c	ea000013	 b           |$LN5@Emac_Minip|
  00710		 |$LN2@Emac_Minip|

; 404  :                 default:
; 405  :                     // Unsupported
; 406  :                     DEBUGMSG(DBG_ERR, (TEXT ("Emac_Filter: SetInformation: Unsupported power state\r\n")));

  00710	e59f30b4	 ldr         r3, [pc, #0xB4]
  00714	e5933440	 ldr         r3, [r3, #0x440]
  00718	e3130902	 tst         r3, #2, 18
  0071c	0a000004	 beq         |$LN39@Emac_Minip|
  00720	e59f00a8	 ldr         r0, [pc, #0xA8]
  00724	eb000000	 bl          NKDbgPrintfW
  00728	e3a03001	 mov         r3, #1
  0072c	e58d3038	 str         r3, [sp, #0x38]
  00730	ea000001	 b           |$LN40@Emac_Minip|
  00734		 |$LN39@Emac_Minip|
  00734	e3a03000	 mov         r3, #0
  00738	e58d3038	 str         r3, [sp, #0x38]
  0073c		 |$LN40@Emac_Minip|

; 407  :                     *BytesRead = sizeof(PowerState);

  0073c	e59d2058	 ldr         r2, [sp, #0x58]
  00740	e3a03004	 mov         r3, #4
  00744	e5823000	 str         r3, [r2]

; 408  :                     *BytesNeeded = 0;

  00748	e59d205c	 ldr         r2, [sp, #0x5C]
  0074c	e3a03000	 mov         r3, #0
  00750	e5823000	 str         r3, [r2]

; 409  :                     Status = NDIS_STATUS_NOT_SUPPORTED;

  00754	e3a03103	 mov         r3, #3, 2
  00758	e38330bb	 orr         r3, r3, #0xBB
  0075c	e58d300c	 str         r3, [sp, #0xC]
  00760		 |$LN5@Emac_Minip|
  00760		 |$LN7@Emac_Minip|

; 410  :                     break;
; 411  :                 };
; 412  :             }
; 413  :             break;

  00760	ea000002	 b           |$LN28@Emac_Minip|
  00764		 |$LN1@Emac_Minip|

; 414  : 
; 415  :         default:
; 416  :             /* Set the status as NDIS_STATUS_INVALID_OID */
; 417  :             Status = NDIS_STATUS_INVALID_OID;

  00764	e3a0315f	 mov         r3, #0x5F, 2
  00768	e3833801	 orr         r3, r3, #1, 16
  0076c	e58d300c	 str         r3, [sp, #0xC]
  00770		 |$LN28@Emac_Minip|

; 418  :             break;
; 419  :     }
; 420  :     
; 421  :     DEBUGMSG(DBG_FUNC && DBG_OID, (L"<-- Emac_MiniportSetInformation 0x%08X \r\n",Status));

  00770	e59f3054	 ldr         r3, [pc, #0x54]
  00774	e5933440	 ldr         r3, [r3, #0x440]
  00778	e3130080	 tst         r3, #0x80
  0077c	0a000009	 beq         |$LN42@Emac_Minip|
  00780	e59f3044	 ldr         r3, [pc, #0x44]
  00784	e5933440	 ldr         r3, [r3, #0x440]
  00788	e3130c01	 tst         r3, #1, 24
  0078c	0a000005	 beq         |$LN42@Emac_Minip|
  00790	e59d100c	 ldr         r1, [sp, #0xC]
  00794	e59f002c	 ldr         r0, [pc, #0x2C]
  00798	eb000000	 bl          NKDbgPrintfW
  0079c	e3a03001	 mov         r3, #1
  007a0	e58d303c	 str         r3, [sp, #0x3C]
  007a4	ea000001	 b           |$LN43@Emac_Minip|
  007a8		 |$LN42@Emac_Minip|
  007a8	e3a03000	 mov         r3, #0
  007ac	e58d303c	 str         r3, [sp, #0x3C]
  007b0		 |$LN43@Emac_Minip|

; 422  :     return(Status);

  007b0	e59d300c	 ldr         r3, [sp, #0xC]
  007b4	e58d301c	 str         r3, [sp, #0x1C]
  007b8		 |$LN31@Emac_Minip|

; 423  : }

  007b8	e59d001c	 ldr         r0, [sp, #0x1C]
  007bc	e28dd040	 add         sp, sp, #0x40
  007c0	e89d6000	 ldmia       sp, {sp, lr}
  007c4	e12fff1e	 bx          lr
  007c8		 |$LN47@Emac_Minip|
  007c8		 |$LN48@Emac_Minip|
  007c8	00000000	 DCD         |??_C@_1FE@JIGMBJEE@?$AA?$DM?$AA?9?$AA?9?$AA?5?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAS?$AAe?$AAt?$AAI?$AAn?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?5@|
  007cc		 |$LN49@Emac_Minip|
  007cc	00000000	 DCD         |dpCurSettings|
  007d0		 |$LN50@Emac_Minip|
  007d0	00000000	 DCD         |??_C@_1GO@FKNBJJKM@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAF?$AAi?$AAl?$AAt?$AAe?$AAr?$AA?3?$AA?5?$AAS?$AAe?$AAt?$AAI?$AAn?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?3?$AA?5?$AAU?$AAn?$AAs@|
  007d4		 |$LN51@Emac_Minip|
  007d4	00000000	 DCD         |??_C@_1HC@PPKOAANN@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAF?$AAi?$AAl?$AAt?$AAe?$AAr?$AA?3?$AA?5?$AAS?$AAe?$AAt?$AAI?$AAn?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?3?$AA?5?$AAS?$AAe?$AAt@|
  007d8		 |$LN52@Emac_Minip|
  007d8	00000000	 DCD         |??_C@_1HC@HBCBAHDO@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAF?$AAi?$AAl?$AAt?$AAe?$AAr?$AA?3?$AA?5?$AAS?$AAe?$AAt?$AAI?$AAn?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?3?$AA?5?$AAS?$AAe?$AAt@|
  007dc		 |$LN53@Emac_Minip|
  007dc	00000000	 DCD         |??_C@_1GK@DFHGJKPD@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAF?$AAi?$AAl?$AAt?$AAe?$AAr?$AA?3?$AA?5?$AAS?$AAe?$AAt?$AAI?$AAn?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?3?$AA?5?$AAG?$AAo?$AAt@|
  007e0		 |$LN54@Emac_Minip|
  007e0	00000000	 DCD         |??_C@_1GI@PEMJJLEE@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAS?$AAe?$AAt?$AAI?$AAn?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?3?$AA?5?$AAI?$AAn?$AAv@|
  007e4		 |$LN55@Emac_Minip|
  007e4	fd010101	 DCD         0xfd010101
  007e8		 |$LN56@Emac_Minip|
  007e8	0001010f	 DCD         0x1010f
  007ec		 |$LN57@Emac_Minip|
  007ec	0001010e	 DCD         0x1010e
  007f0		 |$LN58@Emac_Minip|
  007f0	01010103	 DCD         0x1010103
  007f4		 |$LN59@Emac_Minip|
  007f4	00000000	 DCD         |??_C@_1FA@DAMHIAFI@?$AA?9?$AA?9?$AA?9?$AA?$DO?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAS?$AAe?$AAt?$AAI?$AAn?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?5@|
  007f8		 |$M50355|

			 ENDP  ; |Emac_MiniportSetInformation|

	END
