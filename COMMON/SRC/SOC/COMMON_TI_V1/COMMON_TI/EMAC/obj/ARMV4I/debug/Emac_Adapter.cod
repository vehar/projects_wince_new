; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\EMAC\Emac_Adapter.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|??_C@_1FM@JNFIPHOG@?$AA?$DM?$AA?9?$AA?9?$AAN?$AAI?$AAC?$AAM?$AAa?$AAp?$AAA?$AAd?$AAa?$AAp?$AAt?$AAe?$AAr?$AAR?$AAe?$AAg?$AAs?$AA?5?$AAE?$AAm?$AAa?$AAc?$AAR?$AAe?$AAg?$AAs?$AA?9?$AA?$DO?$AAT@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DC@DOMEHKHN@?$AAN?$AAd?$AAi?$AAs?$AAM?$AAM?$AAa?$AAp?$AAI?$AAo?$AAS?$AAp?$AAa?$AAc?$AAe?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CO@LCPNHIAE@?$AA?9?$AA?9?$AA?$DO?$AAN?$AAI?$AAC?$AAM?$AAa?$AAp?$AAA?$AAd?$AAa?$AAp?$AAt?$AAe?$AAr?$AAR?$AAe?$AAg?$AAs?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|NICMapAdapterRegs|
	IMPORT	|NdisMMapIoSpace|
	IMPORT	|g_EmacMemLayout|
	IMPORT	|GetAddressByDevice|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|dpCurSettings|

  00000			 AREA	 |.pdata|, PDATA
|$T50596| DCD	|$LN12@NICMapAdap|
	DCD	0x40006a04
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\emac\emac_adapter.c

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FM@JNFIPHOG@?$AA?$DM?$AA?9?$AA?9?$AAN?$AAI?$AAC?$AAM?$AAa?$AAp?$AAA?$AAd?$AAa?$AAp?$AAt?$AAe?$AAr?$AAR?$AAe?$AAg?$AAs?$AA?5?$AAE?$AAm?$AAa?$AAc?$AAR?$AAe?$AAg?$AAs?$AA?9?$AA?$DO?$AAT@| DCB "<"
	DCB	0x0, "-", 0x0, "-", 0x0, "N", 0x0, "I", 0x0, "C", 0x0, "M"
	DCB	0x0, "a", 0x0, "p", 0x0, "A", 0x0, "d", 0x0, "a", 0x0, "p"
	DCB	0x0, "t", 0x0, "e", 0x0, "r", 0x0, "R", 0x0, "e", 0x0, "g"
	DCB	0x0, "s", 0x0, " ", 0x0, "E", 0x0, "m", 0x0, "a", 0x0, "c"
	DCB	0x0, "R", 0x0, "e", 0x0, "g", 0x0, "s", 0x0, "-", 0x0, ">"
	DCB	0x0, "T", 0x0, "X", 0x0, "R", 0x0, "E", 0x0, "V", 0x0, "I"
	DCB	0x0, "D", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%", 0x0, "x"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DC@DOMEHKHN@?$AAN?$AAd?$AAi?$AAs?$AAM?$AAM?$AAa?$AAp?$AAI?$AAo?$AAS?$AAp?$AAa?$AAc?$AAe?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "N"
	DCB	0x0, "d", 0x0, "i", 0x0, "s", 0x0, "M", 0x0, "M", 0x0, "a"
	DCB	0x0, "p", 0x0, "I", 0x0, "o", 0x0, "S", 0x0, "p", 0x0, "a"
	DCB	0x0, "c", 0x0, "e", 0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@LCPNHIAE@?$AA?9?$AA?9?$AA?$DO?$AAN?$AAI?$AAC?$AAM?$AAa?$AAp?$AAA?$AAd?$AAa?$AAp?$AAt?$AAe?$AAr?$AAR?$AAe?$AAg?$AAs?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "-", 0x0, ">", 0x0, "N", 0x0, "I", 0x0, "C", 0x0, "M"
	DCB	0x0, "a", 0x0, "p", 0x0, "A", 0x0, "d", 0x0, "a", 0x0, "p"
	DCB	0x0, "t", 0x0, "e", 0x0, "r", 0x0, "R", 0x0, "e", 0x0, "g"
	DCB	0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |NICMapAdapterRegs| PROC

; 34   : {

  00000		 |$LN12@NICMapAdap|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd034	 sub         sp, sp, #0x34
  00010		 |$M50593|

; 35   :     DWORD temp;
; 36   :     DWORD                   EmacIRamBase;
; 37   :     NDIS_STATUS             Status;
; 38   :     NDIS_PHYSICAL_ADDRESS   PhysicalAddress;
; 39   : 
; 40   :     DEBUGMSG(DBG_FUNC, (L"-->NICMapAdapterRegs\r\n"));

  00010	e59f3180	 ldr         r3, [pc, #0x180]
  00014	e5933440	 ldr         r3, [r3, #0x440]
  00018	e3130080	 tst         r3, #0x80
  0001c	0a000004	 beq         |$LN4@NICMapAdap|
  00020	e59f017c	 ldr         r0, [pc, #0x17C]
  00024	eb000000	 bl          NKDbgPrintfW
  00028	e3a03001	 mov         r3, #1
  0002c	e58d3020	 str         r3, [sp, #0x20]
  00030	ea000001	 b           |$LN5@NICMapAdap|
  00034		 |$LN4@NICMapAdap|
  00034	e3a03000	 mov         r3, #0
  00038	e58d3020	 str         r3, [sp, #0x20]
  0003c		 |$LN5@NICMapAdap|

; 41   : 
; 42   :     temp = GetAddressByDevice(pAdapter->m_device);

  0003c	e59d303c	 ldr         r3, [sp, #0x3C]
  00040	e2833094	 add         r3, r3, #0x94
  00044	e5930000	 ldr         r0, [r3]
  00048	eb000000	 bl          GetAddressByDevice
  0004c	e58d0024	 str         r0, [sp, #0x24]
  00050	e59d3024	 ldr         r3, [sp, #0x24]
  00054	e58d3010	 str         r3, [sp, #0x10]

; 43   : 
; 44   :     NdisSetPhysicalAddressLow (PhysicalAddress, temp);

  00058	e59d3010	 ldr         r3, [sp, #0x10]
  0005c	e58d3004	 str         r3, [sp, #4]

; 45   :     NdisSetPhysicalAddressHigh (PhysicalAddress, 0);

  00060	e3a03000	 mov         r3, #0
  00064	e58d3008	 str         r3, [sp, #8]

; 46   : 
; 47   :    /* Mapping the EMAC controller registers to process memory
; 48   :     * and initialising the individual register modules
; 49   :     */
; 50   :     Status = NdisMMapIoSpace((PVOID*)&EmacIRamBase,
; 51   :                             pAdapter->m_AdapterHandle,
; 52   :                             PhysicalAddress,
; 53   :                             g_EmacMemLayout.EMAC_TOTAL_MEMORY);

  00068	e59f312c	 ldr         r3, [pc, #0x12C]
  0006c	e5933010	 ldr         r3, [r3, #0x10]
  00070	e58d3000	 str         r3, [sp]
  00074	e59d2004	 ldr         r2, [sp, #4]
  00078	e59d3008	 ldr         r3, [sp, #8]
  0007c	e59d103c	 ldr         r1, [sp, #0x3C]
  00080	e5911000	 ldr         r1, [r1]
  00084	e28d000c	 add         r0, sp, #0xC
  00088	eb000000	 bl          NdisMMapIoSpace
  0008c	e58d0028	 str         r0, [sp, #0x28]
  00090	e59d3028	 ldr         r3, [sp, #0x28]
  00094	e58d3014	 str         r3, [sp, #0x14]

; 54   : 
; 55   :     if(Status != NDIS_STATUS_SUCCESS)

  00098	e59d3014	 ldr         r3, [sp, #0x14]
  0009c	e3530000	 cmp         r3, #0
  000a0	0a00000d	 beq         |$LN1@NICMapAdap|

; 56   :     {
; 57   :         DEBUGMSG(DBG_ERR, (L"NdisMMapIoSpace failed\r\n"));

  000a4	e59f30ec	 ldr         r3, [pc, #0xEC]
  000a8	e5933440	 ldr         r3, [r3, #0x440]
  000ac	e3130902	 tst         r3, #2, 18
  000b0	0a000004	 beq         |$LN6@NICMapAdap|
  000b4	e59f00e4	 ldr         r0, [pc, #0xE4]
  000b8	eb000000	 bl          NKDbgPrintfW
  000bc	e3a03001	 mov         r3, #1
  000c0	e58d302c	 str         r3, [sp, #0x2C]
  000c4	ea000001	 b           |$LN7@NICMapAdap|
  000c8		 |$LN6@NICMapAdap|
  000c8	e3a03000	 mov         r3, #0
  000cc	e58d302c	 str         r3, [sp, #0x2C]
  000d0		 |$LN7@NICMapAdap|

; 58   :         return Status;

  000d0	e59d3014	 ldr         r3, [sp, #0x14]
  000d4	e58d301c	 str         r3, [sp, #0x1C]
  000d8	ea000029	 b           |$LN2@NICMapAdap|
  000dc		 |$LN1@NICMapAdap|

; 59   :     }
; 60   : 
; 61   :    /* Since EMAC register modules are contiguos assigning
; 62   :     * mapped memory to our adapter structure elements
; 63   :     */
; 64   : 
; 65   :     pAdapter->m_EmacIRamBase    = EmacIRamBase;

  000dc	e59d303c	 ldr         r3, [sp, #0x3C]
  000e0	e283200c	 add         r2, r3, #0xC
  000e4	e59d300c	 ldr         r3, [sp, #0xC]
  000e8	e5823000	 str         r3, [r2]

; 66   :     pAdapter->m_pEmacRegsBase   = (PEMACREGS)(EmacIRamBase + g_EmacMemLayout.EMAC_REG_OFFSET);

  000ec	e59d200c	 ldr         r2, [sp, #0xC]
  000f0	e59f30a4	 ldr         r3, [pc, #0xA4]
  000f4	e593300c	 ldr         r3, [r3, #0xC]
  000f8	e0822003	 add         r2, r2, r3
  000fc	e59d303c	 ldr         r3, [sp, #0x3C]
  00100	e2833004	 add         r3, r3, #4
  00104	e5832000	 str         r2, [r3]

; 67   :     pAdapter->m_pEmacCtlRegs    = (PEMACCTRLREGS)(EmacIRamBase + g_EmacMemLayout.EMAC_CTRL_OFFSET);

  00108	e59d200c	 ldr         r2, [sp, #0xC]
  0010c	e59f3088	 ldr         r3, [pc, #0x88]
  00110	e5933000	 ldr         r3, [r3]
  00114	e0822003	 add         r2, r2, r3
  00118	e59d303c	 ldr         r3, [sp, #0x3C]
  0011c	e2833008	 add         r3, r3, #8
  00120	e5832000	 str         r2, [r3]

; 68   :     pAdapter->m_pMdioRegsBase   = (PEMACMDIOREGS)(EmacIRamBase + g_EmacMemLayout.EMAC_MDIO_OFFSET);

  00124	e59d200c	 ldr         r2, [sp, #0xC]
  00128	e59f306c	 ldr         r3, [pc, #0x6C]
  0012c	e5933008	 ldr         r3, [r3, #8]
  00130	e0822003	 add         r2, r2, r3
  00134	e59d303c	 ldr         r3, [sp, #0x3C]
  00138	e2833010	 add         r3, r3, #0x10
  0013c	e5832000	 str         r2, [r3]

; 69   : 
; 70   :     DEBUGMSG(DBG_FUNC, (L"<--NICMapAdapterRegs EmacRegs->TXREVID = %x\r\n", pAdapter->m_pEmacRegsBase->TXREVID));

  00140	e59f3050	 ldr         r3, [pc, #0x50]
  00144	e5933440	 ldr         r3, [r3, #0x440]
  00148	e3130080	 tst         r3, #0x80
  0014c	0a000008	 beq         |$LN8@NICMapAdap|
  00150	e59d303c	 ldr         r3, [sp, #0x3C]
  00154	e2833004	 add         r3, r3, #4
  00158	e5933000	 ldr         r3, [r3]
  0015c	e5931000	 ldr         r1, [r3]
  00160	e59f002c	 ldr         r0, [pc, #0x2C]
  00164	eb000000	 bl          NKDbgPrintfW
  00168	e3a03001	 mov         r3, #1
  0016c	e58d3030	 str         r3, [sp, #0x30]
  00170	ea000001	 b           |$LN9@NICMapAdap|
  00174		 |$LN8@NICMapAdap|
  00174	e3a03000	 mov         r3, #0
  00178	e58d3030	 str         r3, [sp, #0x30]
  0017c		 |$LN9@NICMapAdap|

; 71   : 
; 72   :     return Status;

  0017c	e59d3014	 ldr         r3, [sp, #0x14]
  00180	e58d301c	 str         r3, [sp, #0x1C]
  00184		 |$LN2@NICMapAdap|

; 73   : }

  00184	e59d001c	 ldr         r0, [sp, #0x1C]
  00188	e28dd034	 add         sp, sp, #0x34
  0018c	e89d6000	 ldmia       sp, {sp, lr}
  00190	e12fff1e	 bx          lr
  00194		 |$LN13@NICMapAdap|
  00194		 |$LN14@NICMapAdap|
  00194	00000000	 DCD         |??_C@_1FM@JNFIPHOG@?$AA?$DM?$AA?9?$AA?9?$AAN?$AAI?$AAC?$AAM?$AAa?$AAp?$AAA?$AAd?$AAa?$AAp?$AAt?$AAe?$AAr?$AAR?$AAe?$AAg?$AAs?$AA?5?$AAE?$AAm?$AAa?$AAc?$AAR?$AAe?$AAg?$AAs?$AA?9?$AA?$DO?$AAT@|
  00198		 |$LN15@NICMapAdap|
  00198	00000000	 DCD         |dpCurSettings|
  0019c		 |$LN16@NICMapAdap|
  0019c	00000000	 DCD         |g_EmacMemLayout|
  001a0		 |$LN17@NICMapAdap|
  001a0	00000000	 DCD         |??_C@_1DC@DOMEHKHN@?$AAN?$AAd?$AAi?$AAs?$AAM?$AAM?$AAa?$AAp?$AAI?$AAo?$AAS?$AAp?$AAa?$AAc?$AAe?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  001a4		 |$LN18@NICMapAdap|
  001a4	00000000	 DCD         |??_C@_1CO@LCPNHIAE@?$AA?9?$AA?9?$AA?$DO?$AAN?$AAI?$AAC?$AAM?$AAa?$AAp?$AAA?$AAd?$AAa?$AAp?$AAt?$AAe?$AAr?$AAR?$AAe?$AAg?$AAs?$AA?$AN?$AA?6?$AA?$AA@|
  001a8		 |$M50594|

			 ENDP  ; |NICMapAdapterRegs|

	EXPORT	|??_C@_1CI@HHEJMJJ@?$AA?$DM?$AA?9?$AA?9?$AA?5?$AAN?$AAI?$AAC?$AAI?$AAn?$AAi?$AAt?$AAS?$AAe?$AAn?$AAd?$AA?0?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HG@BEADHEGJ@?$AAA?$AAp?$AAt?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAp?$AA?5?$AAN?$AAd?$AAi?$AAs?$AAM?$AAM?$AAa?$AAp?$AAI?$AAo?$AAS?$AAp?$AAa?$AAc?$AAe?$AA?5?$AAT@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EE@FNBIODFC@?$AA?5?$AAN?$AAd?$AAi?$AAs?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAM?$AAe?$AAm?$AAo?$AAr?$AAy?$AA?5?$AAU?$AAn?$AAs?$AAu?$AAc?$AAe?$AAs?$AAs?$AAf?$AAu?$AAl?$AA?$AN@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@NJHGBEIC@?$AA?9?$AA?9?$AA?$DO?$AA?5?$AAN?$AAI?$AAC?$AAI?$AAn?$AAi?$AAt?$AAS?$AAe?$AAn?$AAd?$AA?0?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|NICInitSend|
	IMPORT	|memset|
	IMPORT	|NdisAllocateMemory|
	IMPORT	|g_HighestAcceptedMax|
	IMPORT	|memcpy|

  00008			 AREA	 |.pdata|, PDATA
|$T50622| DCD	|$LN34@NICInitSen|
	DCD	0x4001b904

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@HHEJMJJ@?$AA?$DM?$AA?9?$AA?9?$AA?5?$AAN?$AAI?$AAC?$AAI?$AAn?$AAi?$AAt?$AAS?$AAe?$AAn?$AAd?$AA?0?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| DCB "<"
	DCB	0x0, "-", 0x0, "-", 0x0, " ", 0x0, "N", 0x0, "I", 0x0, "C"
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "S", 0x0, "e"
	DCB	0x0, "n", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HG@BEADHEGJ@?$AAA?$AAp?$AAt?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAp?$AA?5?$AAN?$AAd?$AAi?$AAs?$AAM?$AAM?$AAa?$AAp?$AAI?$AAo?$AAS?$AAp?$AAa?$AAc?$AAe?$AA?5?$AAT@| DCB "A"
	DCB	0x0, "p", 0x0, "t", 0x0, "H", 0x0, "a", 0x0, "n", 0x0, "d"
	DCB	0x0, "l", 0x0, "e", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%"
	DCB	0x0, "p", 0x0, " ", 0x0, "N", 0x0, "d", 0x0, "i", 0x0, "s"
	DCB	0x0, "M", 0x0, "M", 0x0, "a", 0x0, "p", 0x0, "I", 0x0, "o"
	DCB	0x0, "S", 0x0, "p", 0x0, "a", 0x0, "c", 0x0, "e", 0x0, " "
	DCB	0x0, "T", 0x0, "x", 0x0, "B", 0x0, "u", 0x0, "f", 0x0, "f"
	DCB	0x0, "(", 0x0, "s", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, "="
	DCB	0x0, "%", 0x0, "d", 0x0, ")", 0x0, "(", 0x0, "%", 0x0, "p"
	DCB	0x0, ")", 0x0, "=", 0x0, "P", 0x0, "A", 0x0, ":", 0x0, "%"
	DCB	0x0, "p", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EE@FNBIODFC@?$AA?5?$AAN?$AAd?$AAi?$AAs?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAM?$AAe?$AAm?$AAo?$AAr?$AAy?$AA?5?$AAU?$AAn?$AAs?$AAu?$AAc?$AAe?$AAs?$AAs?$AAf?$AAu?$AAl?$AA?$AN@| DCB " "
	DCB	0x0, "N", 0x0, "d", 0x0, "i", 0x0, "s", 0x0, "A", 0x0, "l"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, "M", 0x0, "e", 0x0, "m", 0x0, "o", 0x0, "r", 0x0, "y"
	DCB	0x0, " ", 0x0, "U", 0x0, "n", 0x0, "s", 0x0, "u", 0x0, "c"
	DCB	0x0, "e", 0x0, "s", 0x0, "s", 0x0, "f", 0x0, "u", 0x0, "l"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@NJHGBEIC@?$AA?9?$AA?9?$AA?$DO?$AA?5?$AAN?$AAI?$AAC?$AAI?$AAn?$AAi?$AAt?$AAS?$AAe?$AAn?$AAd?$AA?0?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "-", 0x0, ">", 0x0, " ", 0x0, "N", 0x0, "I", 0x0, "C"
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "S", 0x0, "e"
	DCB	0x0, "n", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  001a8			 AREA	 |.text|, CODE, ARM

  001a8		 |NICInitSend| PROC

; 87   : {

  001a8		 |$LN34@NICInitSen|
  001a8	e1a0c00d	 mov         r12, sp
  001ac	e92d0001	 stmdb       sp!, {r0}
  001b0	e92d5000	 stmdb       sp!, {r12, lr}
  001b4	e24dd06c	 sub         sp, sp, #0x6C
  001b8		 |$M50619|

; 88   :     NDIS_STATUS     Status = NDIS_STATUS_SUCCESS;

  001b8	e3a03000	 mov         r3, #0
  001bc	e58d301c	 str         r3, [sp, #0x1C]

; 89   :     USHORT          Count;
; 90   :     DWORD           EmacTxBufDesBase;
; 91   :     DWORD           EmacTxBufDesBasePa;
; 92   :     DWORD           EmacTxPhyBuf ;
; 93   :     DWORD           EmacTxPhyBufPa;
; 94   :     PEMAC_TXPKT     pCurPkt;
; 95   :     PEMAC_TXPKT     pNextPkt;
; 96   :     PEMAC_TXBUF     pCurBuf;
; 97   :     PEMAC_TXBUF     pNextBuf;
; 98   : 
; 99   : 
; 100  :     DEBUGMSG(DBG_FUNC, (L"--> NICInitSend, \r\n" ));

  001c0	e59f36a8	 ldr         r3, [pc, #0x6A8]
  001c4	e5933440	 ldr         r3, [r3, #0x440]
  001c8	e3130080	 tst         r3, #0x80
  001cc	0a000004	 beq         |$LN20@NICInitSen|
  001d0	e59f06b0	 ldr         r0, [pc, #0x6B0]
  001d4	eb000000	 bl          NKDbgPrintfW
  001d8	e3a03001	 mov         r3, #1
  001dc	e58d3038	 str         r3, [sp, #0x38]
  001e0	ea000001	 b           |$LN21@NICInitSen|
  001e4		 |$LN20@NICInitSen|
  001e4	e3a03000	 mov         r3, #0
  001e8	e58d3038	 str         r3, [sp, #0x38]
  001ec		 |$LN21@NICInitSen|

; 101  : 
; 102  :     if(pAdapter->m_HwStatus != NdisHardwareStatusReset)

  001ec	e59d3074	 ldr         r3, [sp, #0x74]
  001f0	e2833e1a	 add         r3, r3, #0x1A, 28
  001f4	e5933000	 ldr         r3, [r3]
  001f8	e3530002	 cmp         r3, #2
  001fc	0a000072	 beq         |$LN17@NICInitSen|

; 103  :     {
; 104  : 		/* Setting up Transmit Packets data structures */
; 105  : 		Status = NdisAllocateMemory((PVOID *)&pAdapter->m_pBaseTxPkts,
; 106  : 							pAdapter->m_MaxPacketPerTransmit * sizeof(EMAC_TXPKT),
; 107  : 							0,
; 108  : 							g_HighestAcceptedMax);

  00200	e59f367c	 ldr         r3, [pc, #0x67C]
  00204	e58d303c	 str         r3, [sp, #0x3C]
  00208	e28d0000	 add         r0, sp, #0
  0020c	e59d303c	 ldr         r3, [sp, #0x3C]
  00210	e2831004	 add         r1, r3, #4
  00214	e3a02004	 mov         r2, #4
  00218	eb000000	 bl          memcpy
  0021c	e59d303c	 ldr         r3, [sp, #0x3C]
  00220	e5933000	 ldr         r3, [r3]
  00224	e3a02000	 mov         r2, #0
  00228	e59d1074	 ldr         r1, [sp, #0x74]
  0022c	e2811028	 add         r1, r1, #0x28
  00230	e1d100b0	 ldrh        r0, [r1]
  00234	e3a01014	 mov         r1, #0x14
  00238	e0010190	 mul         r1, r0, r1
  0023c	e59d0074	 ldr         r0, [sp, #0x74]
  00240	e2800034	 add         r0, r0, #0x34
  00244	eb000000	 bl          NdisAllocateMemory
  00248	e58d0040	 str         r0, [sp, #0x40]
  0024c	e59d3040	 ldr         r3, [sp, #0x40]
  00250	e58d301c	 str         r3, [sp, #0x1C]

; 109  : 
; 110  : 		if (Status != NDIS_STATUS_SUCCESS)

  00254	e59d301c	 ldr         r3, [sp, #0x1C]
  00258	e3530000	 cmp         r3, #0
  0025c	0a00000d	 beq         |$LN16@NICInitSen|

; 111  : 		{
; 112  : 			DEBUGMSG(DBG_ERR,(L" NdisAllocateMemory Unsucessful\r\n"));

  00260	e59f3608	 ldr         r3, [pc, #0x608]
  00264	e5933440	 ldr         r3, [r3, #0x440]
  00268	e3130902	 tst         r3, #2, 18
  0026c	0a000004	 beq         |$LN22@NICInitSen|
  00270	e59f0608	 ldr         r0, [pc, #0x608]
  00274	eb000000	 bl          NKDbgPrintfW
  00278	e3a03001	 mov         r3, #1
  0027c	e58d3044	 str         r3, [sp, #0x44]
  00280	ea000001	 b           |$LN23@NICInitSen|
  00284		 |$LN22@NICInitSen|
  00284	e3a03000	 mov         r3, #0
  00288	e58d3044	 str         r3, [sp, #0x44]
  0028c		 |$LN23@NICInitSen|

; 113  : 			return Status;

  0028c	e59d301c	 ldr         r3, [sp, #0x1C]
  00290	e58d3030	 str         r3, [sp, #0x30]
  00294	ea000170	 b           |$LN18@NICInitSen|
  00298		 |$LN16@NICInitSen|

; 114  : 		}
; 115  : 
; 116  : 		/* Setting up Transmit Buffers  data structures */
; 117  : 		Status = NdisAllocateMemory((PVOID *)&pAdapter->m_pBaseTxBufs,
; 118  : 								pAdapter->m_MaxTxEmacBufs * sizeof(EMAC_TXBUF),
; 119  : 								0,
; 120  : 								g_HighestAcceptedMax);

  00298	e59f35e4	 ldr         r3, [pc, #0x5E4]
  0029c	e58d3048	 str         r3, [sp, #0x48]
  002a0	e28d0000	 add         r0, sp, #0
  002a4	e59d3048	 ldr         r3, [sp, #0x48]
  002a8	e2831004	 add         r1, r3, #4
  002ac	e3a02004	 mov         r2, #4
  002b0	eb000000	 bl          memcpy
  002b4	e59d3048	 ldr         r3, [sp, #0x48]
  002b8	e5933000	 ldr         r3, [r3]
  002bc	e3a02000	 mov         r2, #0
  002c0	e59d1074	 ldr         r1, [sp, #0x74]
  002c4	e281102a	 add         r1, r1, #0x2A
  002c8	e1d100b0	 ldrh        r0, [r1]
  002cc	e3a01018	 mov         r1, #0x18
  002d0	e0010190	 mul         r1, r0, r1
  002d4	e59d0074	 ldr         r0, [sp, #0x74]
  002d8	e2800038	 add         r0, r0, #0x38
  002dc	eb000000	 bl          NdisAllocateMemory
  002e0	e58d004c	 str         r0, [sp, #0x4C]
  002e4	e59d304c	 ldr         r3, [sp, #0x4C]
  002e8	e58d301c	 str         r3, [sp, #0x1C]

; 121  : 
; 122  : 		if (Status != NDIS_STATUS_SUCCESS)

  002ec	e59d301c	 ldr         r3, [sp, #0x1C]
  002f0	e3530000	 cmp         r3, #0
  002f4	0a00000d	 beq         |$LN15@NICInitSen|

; 123  : 		{
; 124  : 			DEBUGMSG(DBG_ERR,(L" NdisAllocateMemory Unsucessful\r\n"));

  002f8	e59f3570	 ldr         r3, [pc, #0x570]
  002fc	e5933440	 ldr         r3, [r3, #0x440]
  00300	e3130902	 tst         r3, #2, 18
  00304	0a000004	 beq         |$LN24@NICInitSen|
  00308	e59f0570	 ldr         r0, [pc, #0x570]
  0030c	eb000000	 bl          NKDbgPrintfW
  00310	e3a03001	 mov         r3, #1
  00314	e58d3050	 str         r3, [sp, #0x50]
  00318	ea000001	 b           |$LN25@NICInitSen|
  0031c		 |$LN24@NICInitSen|
  0031c	e3a03000	 mov         r3, #0
  00320	e58d3050	 str         r3, [sp, #0x50]
  00324		 |$LN25@NICInitSen|

; 125  : 			return Status;

  00324	e59d301c	 ldr         r3, [sp, #0x1C]
  00328	e58d3030	 str         r3, [sp, #0x30]
  0032c	ea00014a	 b           |$LN18@NICInitSen|
  00330		 |$LN15@NICInitSen|

; 126  : 		}
; 127  : 
; 128  : 		/* Allocating reserved memory for Tx buffers */
; 129  : 		if(NULL == (VOID *)pAdapter->m_TxBufBase)

  00330	e59d3074	 ldr         r3, [sp, #0x74]
  00334	e2833048	 add         r3, r3, #0x48
  00338	e5933000	 ldr         r3, [r3]
  0033c	e3530000	 cmp         r3, #0
  00340	1a000021	 bne         |$LN14@NICInitSen|

; 130  : 		{
; 131  : 			Status = NdisMMapIoSpace((PVOID*)&pAdapter->m_TxBufBase,
; 132  : 							pAdapter->m_AdapterHandle,
; 133  : 							pAdapter->m_TxBufBasePa,
; 134  : 							(EMAC_MAX_TX_BUFFERS * EMAC_MAX_ETHERNET_PKT_SIZE));

  00344	e3a03a5e	 mov         r3, #0x5E, 20
  00348	e3833c0a	 orr         r3, r3, #0xA, 24
  0034c	e58d3000	 str         r3, [sp]
  00350	e59d3074	 ldr         r3, [sp, #0x74]
  00354	e2833050	 add         r3, r3, #0x50
  00358	e58d3054	 str         r3, [sp, #0x54]
  0035c	e59d3054	 ldr         r3, [sp, #0x54]
  00360	e5932000	 ldr         r2, [r3]
  00364	e5933004	 ldr         r3, [r3, #4]
  00368	e59d1074	 ldr         r1, [sp, #0x74]
  0036c	e5911000	 ldr         r1, [r1]
  00370	e59d0074	 ldr         r0, [sp, #0x74]
  00374	e2800048	 add         r0, r0, #0x48
  00378	eb000000	 bl          NdisMMapIoSpace
  0037c	e58d0058	 str         r0, [sp, #0x58]
  00380	e59d3058	 ldr         r3, [sp, #0x58]
  00384	e58d301c	 str         r3, [sp, #0x1C]

; 135  : 
; 136  : 			if(Status != NDIS_STATUS_SUCCESS)

  00388	e59d301c	 ldr         r3, [sp, #0x1C]
  0038c	e3530000	 cmp         r3, #0
  00390	0a00000d	 beq         |$LN13@NICInitSen|

; 137  : 			{
; 138  : 				DEBUGMSG(DBG_ERR, (L"NdisMMapIoSpace failed\r\n"));

  00394	e59f34d4	 ldr         r3, [pc, #0x4D4]
  00398	e5933440	 ldr         r3, [r3, #0x440]
  0039c	e3130902	 tst         r3, #2, 18
  003a0	0a000004	 beq         |$LN26@NICInitSen|
  003a4	e59f04d0	 ldr         r0, [pc, #0x4D0]
  003a8	eb000000	 bl          NKDbgPrintfW
  003ac	e3a03001	 mov         r3, #1
  003b0	e58d305c	 str         r3, [sp, #0x5C]
  003b4	ea000001	 b           |$LN27@NICInitSen|
  003b8		 |$LN26@NICInitSen|
  003b8	e3a03000	 mov         r3, #0
  003bc	e58d305c	 str         r3, [sp, #0x5C]
  003c0		 |$LN27@NICInitSen|

; 139  : 				return Status;

  003c0	e59d301c	 ldr         r3, [sp, #0x1C]
  003c4	e58d3030	 str         r3, [sp, #0x30]
  003c8	ea000123	 b           |$LN18@NICInitSen|
  003cc		 |$LN13@NICInitSen|
  003cc		 |$LN14@NICInitSen|
  003cc		 |$LN17@NICInitSen|

; 140  : 			}
; 141  : 		}
; 142  : 	}
; 143  : 
; 144  :     NdisZeroMemory(pAdapter->m_pBaseTxPkts, pAdapter->m_MaxPacketPerTransmit * sizeof(EMAC_TXPKT));

  003cc	e59d3074	 ldr         r3, [sp, #0x74]
  003d0	e2833028	 add         r3, r3, #0x28
  003d4	e1d310b0	 ldrh        r1, [r3]
  003d8	e3a03014	 mov         r3, #0x14
  003dc	e0020391	 mul         r2, r1, r3
  003e0	e3a01000	 mov         r1, #0
  003e4	e59d3074	 ldr         r3, [sp, #0x74]
  003e8	e2833034	 add         r3, r3, #0x34
  003ec	e5930000	 ldr         r0, [r3]
  003f0	eb000000	 bl          memset

; 145  :     NdisZeroMemory(pAdapter->m_pBaseTxBufs, pAdapter->m_MaxTxEmacBufs * sizeof(EMAC_TXBUF));

  003f4	e59d3074	 ldr         r3, [sp, #0x74]
  003f8	e283302a	 add         r3, r3, #0x2A
  003fc	e1d310b0	 ldrh        r1, [r3]
  00400	e3a03018	 mov         r3, #0x18
  00404	e0020391	 mul         r2, r1, r3
  00408	e3a01000	 mov         r1, #0
  0040c	e59d3074	 ldr         r3, [sp, #0x74]
  00410	e2833038	 add         r3, r3, #0x38
  00414	e5930000	 ldr         r0, [r3]
  00418	eb000000	 bl          memset

; 146  : 
; 147  :     pNextPkt = pAdapter->m_pBaseTxPkts;

  0041c	e59d3074	 ldr         r3, [sp, #0x74]
  00420	e2833034	 add         r3, r3, #0x34
  00424	e5933000	 ldr         r3, [r3]
  00428	e58d3018	 str         r3, [sp, #0x18]

; 148  : 
; 149  :     QUEUE_INIT(&pAdapter->m_TxPktsInfoPool);

  0042c	e59d3074	 ldr         r3, [sp, #0x74]
  00430	e2832f75	 add         r2, r3, #0x75, 30
  00434	e3a03000	 mov         r3, #0
  00438	e5823000	 str         r3, [r2]
  0043c	e59d3074	 ldr         r3, [sp, #0x74]
  00440	e2832f76	 add         r2, r3, #0x76, 30
  00444	e3a03000	 mov         r3, #0
  00448	e5823000	 str         r3, [r2]
  0044c	e59d3074	 ldr         r3, [sp, #0x74]
  00450	e2832f77	 add         r2, r3, #0x77, 30
  00454	e3a03000	 mov         r3, #0
  00458	e5823000	 str         r3, [r2]

; 150  : 
; 151  :     for (Count = 0; Count < pAdapter->m_MaxPacketPerTransmit ; Count++)

  0045c	e3a03000	 mov         r3, #0
  00460	e1cd31b0	 strh        r3, [sp, #0x10]
  00464	ea000004	 b           |$LN12@NICInitSen|
  00468		 |$LN11@NICInitSen|
  00468	e1dd31b0	 ldrh        r3, [sp, #0x10]
  0046c	e2833001	 add         r3, r3, #1
  00470	e1a03803	 mov         r3, r3, lsl #16
  00474	e1a03823	 mov         r3, r3, lsr #16
  00478	e1cd31b0	 strh        r3, [sp, #0x10]
  0047c		 |$LN12@NICInitSen|
  0047c	e1dd31b0	 ldrh        r3, [sp, #0x10]
  00480	e1a02003	 mov         r2, r3
  00484	e59d3074	 ldr         r3, [sp, #0x74]
  00488	e2833028	 add         r3, r3, #0x28
  0048c	e1d330b0	 ldrh        r3, [r3]
  00490	e1520003	 cmp         r2, r3
  00494	aa000037	 bge         |$LN10@NICInitSen|

; 152  :     {
; 153  :         pCurPkt = pNextPkt;

  00498	e59d3018	 ldr         r3, [sp, #0x18]
  0049c	e58d300c	 str         r3, [sp, #0xC]

; 154  : 
; 155  :         /* Add to Free Transmit packets pool */
; 156  :         QUEUE_INSERT(&pAdapter->m_TxPktsInfoPool,pCurPkt);

  004a0	e59d3074	 ldr         r3, [sp, #0x74]
  004a4	e2933f75	 adds        r3, r3, #0x75, 30
  004a8	0a00001f	 beq         |$LN9@NICInitSen|
  004ac	e59d300c	 ldr         r3, [sp, #0xC]
  004b0	e3530000	 cmp         r3, #0
  004b4	0a00001c	 beq         |$LN9@NICInitSen|
  004b8	e59d3074	 ldr         r3, [sp, #0x74]
  004bc	e2833f75	 add         r3, r3, #0x75, 30
  004c0	e5933000	 ldr         r3, [r3]
  004c4	e3530000	 cmp         r3, #0
  004c8	1a000004	 bne         |$LN8@NICInitSen|
  004cc	e59d3074	 ldr         r3, [sp, #0x74]
  004d0	e2832f75	 add         r2, r3, #0x75, 30
  004d4	e59d300c	 ldr         r3, [sp, #0xC]
  004d8	e5823000	 str         r3, [r2]
  004dc	ea000004	 b           |$LN7@NICInitSen|
  004e0		 |$LN8@NICInitSen|
  004e0	e59d3074	 ldr         r3, [sp, #0x74]
  004e4	e2833f76	 add         r3, r3, #0x76, 30
  004e8	e5932000	 ldr         r2, [r3]
  004ec	e59d300c	 ldr         r3, [sp, #0xC]
  004f0	e5823000	 str         r3, [r2]
  004f4		 |$LN7@NICInitSen|
  004f4	e59d3074	 ldr         r3, [sp, #0x74]
  004f8	e2832f76	 add         r2, r3, #0x76, 30
  004fc	e59d300c	 ldr         r3, [sp, #0xC]
  00500	e5823000	 str         r3, [r2]
  00504	e59d3074	 ldr         r3, [sp, #0x74]
  00508	e2833f77	 add         r3, r3, #0x77, 30
  0050c	e5933000	 ldr         r3, [r3]
  00510	e2832001	 add         r2, r3, #1
  00514	e59d3074	 ldr         r3, [sp, #0x74]
  00518	e2833f77	 add         r3, r3, #0x77, 30
  0051c	e5832000	 str         r2, [r3]
  00520	e59d200c	 ldr         r2, [sp, #0xC]
  00524	e3a03000	 mov         r3, #0
  00528	e5823000	 str         r3, [r2]
  0052c		 |$LN9@NICInitSen|

; 157  : 
; 158  :         /* Initialise per packet maintained Bufs List */
; 159  :         QUEUE_INIT(&pCurPkt->m_BufsList);

  0052c	e59d300c	 ldr         r3, [sp, #0xC]
  00530	e2832008	 add         r2, r3, #8
  00534	e3a03000	 mov         r3, #0
  00538	e5823000	 str         r3, [r2]
  0053c	e59d300c	 ldr         r3, [sp, #0xC]
  00540	e283200c	 add         r2, r3, #0xC
  00544	e3a03000	 mov         r3, #0
  00548	e5823000	 str         r3, [r2]
  0054c	e59d300c	 ldr         r3, [sp, #0xC]
  00550	e2832010	 add         r2, r3, #0x10
  00554	e3a03000	 mov         r3, #0
  00558	e5823000	 str         r3, [r2]

; 160  : 
; 161  :         pNextPkt++;

  0055c	e59d3018	 ldr         r3, [sp, #0x18]
  00560	e2833014	 add         r3, r3, #0x14
  00564	e58d3018	 str         r3, [sp, #0x18]

; 162  : 
; 163  :         pCurPkt->m_pNext  = pNextPkt;

  00568	e59d2018	 ldr         r2, [sp, #0x18]
  0056c	e59d300c	 ldr         r3, [sp, #0xC]
  00570	e5832000	 str         r2, [r3]

; 164  :     }

  00574	eaffffbb	 b           |$LN11@NICInitSen|
  00578		 |$LN10@NICInitSen|

; 165  : 
; 166  :     pCurPkt->m_pNext = 0;

  00578	e59d200c	 ldr         r2, [sp, #0xC]
  0057c	e3a03000	 mov         r3, #0
  00580	e5823000	 str         r3, [r2]

; 167  : 
; 168  :     DEBUGMSG(DBG_INFO, (L"AptHandle = %p NdisMMapIoSpace TxBuff(size=%d)(%p)=PA:%p\r\n", 
; 169  :         pAdapter->m_AdapterHandle, 
; 170  :         (EMAC_MAX_TX_BUFFERS * EMAC_MAX_ETHERNET_PKT_SIZE), 
; 171  :         pAdapter->m_TxBufBase, 
; 172  :         pAdapter->m_TxBufBasePa));

  00584	e59f32e4	 ldr         r3, [pc, #0x2E4]
  00588	e5933440	 ldr         r3, [r3, #0x440]
  0058c	e3130040	 tst         r3, #0x40
  00590	0a000012	 beq         |$LN28@NICInitSen|
  00594	e59d3074	 ldr         r3, [sp, #0x74]
  00598	e2833050	 add         r3, r3, #0x50
  0059c	e58d3060	 str         r3, [sp, #0x60]
  005a0	e28d0000	 add         r0, sp, #0
  005a4	e59d1060	 ldr         r1, [sp, #0x60]
  005a8	e3a02008	 mov         r2, #8
  005ac	eb000000	 bl          memcpy
  005b0	e59d3074	 ldr         r3, [sp, #0x74]
  005b4	e2833048	 add         r3, r3, #0x48
  005b8	e5933000	 ldr         r3, [r3]
  005bc	e3a02a5e	 mov         r2, #0x5E, 20
  005c0	e3822c0a	 orr         r2, r2, #0xA, 24
  005c4	e59d1074	 ldr         r1, [sp, #0x74]
  005c8	e5911000	 ldr         r1, [r1]
  005cc	e59f02a4	 ldr         r0, [pc, #0x2A4]
  005d0	eb000000	 bl          NKDbgPrintfW
  005d4	e3a03001	 mov         r3, #1
  005d8	e58d3064	 str         r3, [sp, #0x64]
  005dc	ea000001	 b           |$LN29@NICInitSen|
  005e0		 |$LN28@NICInitSen|
  005e0	e3a03000	 mov         r3, #0
  005e4	e58d3064	 str         r3, [sp, #0x64]
  005e8		 |$LN29@NICInitSen|

; 173  : 
; 174  :     NdisZeroMemory((PVOID)pAdapter->m_TxBufBase, (EMAC_MAX_TX_BUFFERS * EMAC_MAX_ETHERNET_PKT_SIZE));

  005e8	e3a02a5e	 mov         r2, #0x5E, 20
  005ec	e3822c0a	 orr         r2, r2, #0xA, 24
  005f0	e3a01000	 mov         r1, #0
  005f4	e59d3074	 ldr         r3, [sp, #0x74]
  005f8	e2833048	 add         r3, r3, #0x48
  005fc	e5930000	 ldr         r0, [r3]
  00600	eb000000	 bl          memset

; 175  : 
; 176  :     EmacTxBufDesBase = pAdapter->m_EmacIRamBase + EMAC_TX_DESC_BASE;

  00604	e59d3074	 ldr         r3, [sp, #0x74]
  00608	e283100c	 add         r1, r3, #0xC
  0060c	e59f3260	 ldr         r3, [pc, #0x260]
  00610	e5933004	 ldr         r3, [r3, #4]
  00614	e2832a01	 add         r2, r3, #1, 20
  00618	e5913000	 ldr         r3, [r1]
  0061c	e0833002	 add         r3, r3, r2
  00620	e58d3014	 str         r3, [sp, #0x14]

; 177  :     EmacTxBufDesBasePa = (g_EmacMemLayout.EMAC_PERPECTIVE_RAM_ADDR + EMAC_TX_DESC_BASE);

  00624	e59f3248	 ldr         r3, [pc, #0x248]
  00628	e5933004	 ldr         r3, [r3, #4]
  0062c	e2832a01	 add         r2, r3, #1, 20
  00630	e59f323c	 ldr         r3, [pc, #0x23C]
  00634	e5933014	 ldr         r3, [r3, #0x14]
  00638	e0833002	 add         r3, r3, r2
  0063c	e58d3028	 str         r3, [sp, #0x28]

; 178  : 
; 179  :     EmacTxPhyBuf   = pAdapter->m_TxBufBase;

  00640	e59d3074	 ldr         r3, [sp, #0x74]
  00644	e2833048	 add         r3, r3, #0x48
  00648	e5933000	 ldr         r3, [r3]
  0064c	e58d3024	 str         r3, [sp, #0x24]

; 180  :     EmacTxPhyBufPa = NdisGetPhysicalAddressLow(pAdapter->m_TxBufBasePa);

  00650	e59d3074	 ldr         r3, [sp, #0x74]
  00654	e2833050	 add         r3, r3, #0x50
  00658	e5933000	 ldr         r3, [r3]
  0065c	e58d302c	 str         r3, [sp, #0x2C]

; 181  : 
; 182  :     pNextBuf = pAdapter->m_pBaseTxBufs;

  00660	e59d3074	 ldr         r3, [sp, #0x74]
  00664	e2833038	 add         r3, r3, #0x38
  00668	e5933000	 ldr         r3, [r3]
  0066c	e58d3008	 str         r3, [sp, #8]

; 183  : 
; 184  :     QUEUE_INIT(&pAdapter->m_TxBufInfoPool);

  00670	e59d3074	 ldr         r3, [sp, #0x74]
  00674	e2832f72	 add         r2, r3, #0x72, 30
  00678	e3a03000	 mov         r3, #0
  0067c	e5823000	 str         r3, [r2]
  00680	e59d3074	 ldr         r3, [sp, #0x74]
  00684	e2832f73	 add         r2, r3, #0x73, 30
  00688	e3a03000	 mov         r3, #0
  0068c	e5823000	 str         r3, [r2]
  00690	e59d3074	 ldr         r3, [sp, #0x74]
  00694	e2832e1d	 add         r2, r3, #0x1D, 28
  00698	e3a03000	 mov         r3, #0
  0069c	e5823000	 str         r3, [r2]

; 185  : 
; 186  :     for (Count = 0; Count < pAdapter->m_MaxTxEmacBufs ; Count++)

  006a0	e3a03000	 mov         r3, #0
  006a4	e1cd31b0	 strh        r3, [sp, #0x10]
  006a8	ea000004	 b           |$LN6@NICInitSen|
  006ac		 |$LN5@NICInitSen|
  006ac	e1dd31b0	 ldrh        r3, [sp, #0x10]
  006b0	e2833001	 add         r3, r3, #1
  006b4	e1a03803	 mov         r3, r3, lsl #16
  006b8	e1a03823	 mov         r3, r3, lsr #16
  006bc	e1cd31b0	 strh        r3, [sp, #0x10]
  006c0		 |$LN6@NICInitSen|
  006c0	e1dd31b0	 ldrh        r3, [sp, #0x10]
  006c4	e1a02003	 mov         r2, r3
  006c8	e59d3074	 ldr         r3, [sp, #0x74]
  006cc	e283302a	 add         r3, r3, #0x2A
  006d0	e1d330b0	 ldrh        r3, [r3]
  006d4	e1520003	 cmp         r2, r3
  006d8	aa000046	 bge         |$LN4@NICInitSen|

; 187  :     {
; 188  :         pCurBuf = pNextBuf;

  006dc	e59d3008	 ldr         r3, [sp, #8]
  006e0	e58d3020	 str         r3, [sp, #0x20]

; 189  : 
; 190  :         /* Assigning the EMAC buffer descriptors virtual and physical
; 191  :         * addressses as well
; 192  :         */
; 193  :         pCurBuf->m_EmacBufDes   = EmacTxBufDesBase;

  006e4	e59d3020	 ldr         r3, [sp, #0x20]
  006e8	e2832010	 add         r2, r3, #0x10
  006ec	e59d3014	 ldr         r3, [sp, #0x14]
  006f0	e5823000	 str         r3, [r2]

; 194  :         pCurBuf->m_EmacBufDesPa = EmacTxBufDesBasePa;

  006f4	e59d3020	 ldr         r3, [sp, #0x20]
  006f8	e2832014	 add         r2, r3, #0x14
  006fc	e59d3028	 ldr         r3, [sp, #0x28]
  00700	e5823000	 str         r3, [r2]

; 195  : 
; 196  :         /* Assigning corresponding physical and logical addresses */
; 197  : 
; 198  :         pCurBuf->m_BufLogicalAddress    = EmacTxPhyBuf;

  00704	e59d3020	 ldr         r3, [sp, #0x20]
  00708	e2832008	 add         r2, r3, #8
  0070c	e59d3024	 ldr         r3, [sp, #0x24]
  00710	e5823000	 str         r3, [r2]

; 199  :         pCurBuf->m_BufPhysicalAddress   = EmacTxPhyBufPa;

  00714	e59d3020	 ldr         r3, [sp, #0x20]
  00718	e283200c	 add         r2, r3, #0xC
  0071c	e59d302c	 ldr         r3, [sp, #0x2C]
  00720	e5823000	 str         r3, [r2]

; 200  : 
; 201  :         EmacTxBufDesBase   += sizeof(EMAC_DESC);

  00724	e59d3014	 ldr         r3, [sp, #0x14]
  00728	e2833010	 add         r3, r3, #0x10
  0072c	e58d3014	 str         r3, [sp, #0x14]

; 202  :         EmacTxBufDesBasePa += sizeof(EMAC_DESC);

  00730	e59d3028	 ldr         r3, [sp, #0x28]
  00734	e2833010	 add         r3, r3, #0x10
  00738	e58d3028	 str         r3, [sp, #0x28]

; 203  : 
; 204  :         EmacTxPhyBuf   += EMAC_MAX_ETHERNET_PKT_SIZE;

  0073c	e59d3024	 ldr         r3, [sp, #0x24]
  00740	e2833c05	 add         r3, r3, #5, 24
  00744	e28330ea	 add         r3, r3, #0xEA
  00748	e58d3024	 str         r3, [sp, #0x24]

; 205  :         EmacTxPhyBufPa += EMAC_MAX_ETHERNET_PKT_SIZE;

  0074c	e59d302c	 ldr         r3, [sp, #0x2C]
  00750	e2833c05	 add         r3, r3, #5, 24
  00754	e28330ea	 add         r3, r3, #0xEA
  00758	e58d302c	 str         r3, [sp, #0x2C]

; 206  : 
; 207  :         pNextBuf++;

  0075c	e59d3008	 ldr         r3, [sp, #8]
  00760	e2833018	 add         r3, r3, #0x18
  00764	e58d3008	 str         r3, [sp, #8]

; 208  : 
; 209  :         QUEUE_INSERT(&pAdapter->m_TxBufInfoPool,pCurBuf);

  00768	e59d3074	 ldr         r3, [sp, #0x74]
  0076c	e2933f72	 adds        r3, r3, #0x72, 30
  00770	0a00001f	 beq         |$LN3@NICInitSen|
  00774	e59d3020	 ldr         r3, [sp, #0x20]
  00778	e3530000	 cmp         r3, #0
  0077c	0a00001c	 beq         |$LN3@NICInitSen|
  00780	e59d3074	 ldr         r3, [sp, #0x74]
  00784	e2833f72	 add         r3, r3, #0x72, 30
  00788	e5933000	 ldr         r3, [r3]
  0078c	e3530000	 cmp         r3, #0
  00790	1a000004	 bne         |$LN2@NICInitSen|
  00794	e59d3074	 ldr         r3, [sp, #0x74]
  00798	e2832f72	 add         r2, r3, #0x72, 30
  0079c	e59d3020	 ldr         r3, [sp, #0x20]
  007a0	e5823000	 str         r3, [r2]
  007a4	ea000004	 b           |$LN1@NICInitSen|
  007a8		 |$LN2@NICInitSen|
  007a8	e59d3074	 ldr         r3, [sp, #0x74]
  007ac	e2833f73	 add         r3, r3, #0x73, 30
  007b0	e5932000	 ldr         r2, [r3]
  007b4	e59d3020	 ldr         r3, [sp, #0x20]
  007b8	e5823000	 str         r3, [r2]
  007bc		 |$LN1@NICInitSen|
  007bc	e59d3074	 ldr         r3, [sp, #0x74]
  007c0	e2832f73	 add         r2, r3, #0x73, 30
  007c4	e59d3020	 ldr         r3, [sp, #0x20]
  007c8	e5823000	 str         r3, [r2]
  007cc	e59d3074	 ldr         r3, [sp, #0x74]
  007d0	e2833e1d	 add         r3, r3, #0x1D, 28
  007d4	e5933000	 ldr         r3, [r3]
  007d8	e2832001	 add         r2, r3, #1
  007dc	e59d3074	 ldr         r3, [sp, #0x74]
  007e0	e2833e1d	 add         r3, r3, #0x1D, 28
  007e4	e5832000	 str         r2, [r3]
  007e8	e59d2020	 ldr         r2, [sp, #0x20]
  007ec	e3a03000	 mov         r3, #0
  007f0	e5823000	 str         r3, [r2]
  007f4		 |$LN3@NICInitSen|

; 210  : 
; 211  :     }

  007f4	eaffffac	 b           |$LN5@NICInitSen|
  007f8		 |$LN4@NICInitSen|

; 212  : 
; 213  :     /* Initialise posted packets queue */
; 214  :     QUEUE_INIT(&pAdapter->m_TxPostedPktPool);

  007f8	e59d3074	 ldr         r3, [sp, #0x74]
  007fc	e2832e1e	 add         r2, r3, #0x1E, 28
  00800	e3a03000	 mov         r3, #0
  00804	e5823000	 str         r3, [r2]
  00808	e59d3074	 ldr         r3, [sp, #0x74]
  0080c	e2832f79	 add         r2, r3, #0x79, 30
  00810	e3a03000	 mov         r3, #0
  00814	e5823000	 str         r3, [r2]
  00818	e59d3074	 ldr         r3, [sp, #0x74]
  0081c	e2832f7a	 add         r2, r3, #0x7A, 30
  00820	e3a03000	 mov         r3, #0
  00824	e5823000	 str         r3, [r2]

; 215  : 
; 216  :     DEBUGMSG(DBG_FUNC, (L"<-- NICInitSend, \r\n" ));

  00828	e59f3040	 ldr         r3, [pc, #0x40]
  0082c	e5933440	 ldr         r3, [r3, #0x440]
  00830	e3130080	 tst         r3, #0x80
  00834	0a000004	 beq         |$LN30@NICInitSen|
  00838	e59f002c	 ldr         r0, [pc, #0x2C]
  0083c	eb000000	 bl          NKDbgPrintfW
  00840	e3a03001	 mov         r3, #1
  00844	e58d3068	 str         r3, [sp, #0x68]
  00848	ea000001	 b           |$LN31@NICInitSen|
  0084c		 |$LN30@NICInitSen|
  0084c	e3a03000	 mov         r3, #0
  00850	e58d3068	 str         r3, [sp, #0x68]
  00854		 |$LN31@NICInitSen|

; 217  : 
; 218  :     return Status;

  00854	e59d301c	 ldr         r3, [sp, #0x1C]
  00858	e58d3030	 str         r3, [sp, #0x30]
  0085c		 |$LN18@NICInitSen|

; 219  : }

  0085c	e59d0030	 ldr         r0, [sp, #0x30]
  00860	e28dd06c	 add         sp, sp, #0x6C
  00864	e89d6000	 ldmia       sp, {sp, lr}
  00868	e12fff1e	 bx          lr
  0086c		 |$LN35@NICInitSen|
  0086c		 |$LN36@NICInitSen|
  0086c	00000000	 DCD         |??_C@_1CI@HHEJMJJ@?$AA?$DM?$AA?9?$AA?9?$AA?5?$AAN?$AAI?$AAC?$AAI?$AAn?$AAi?$AAt?$AAS?$AAe?$AAn?$AAd?$AA?0?$AA?5?$AA?$AN?$AA?6?$AA?$AA@|
  00870		 |$LN37@NICInitSen|
  00870	00000000	 DCD         |dpCurSettings|
  00874		 |$LN38@NICInitSen|
  00874	00000000	 DCD         |g_EmacMemLayout|
  00878		 |$LN39@NICInitSen|
  00878	00000000	 DCD         |??_C@_1HG@BEADHEGJ@?$AAA?$AAp?$AAt?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAp?$AA?5?$AAN?$AAd?$AAi?$AAs?$AAM?$AAM?$AAa?$AAp?$AAI?$AAo?$AAS?$AAp?$AAa?$AAc?$AAe?$AA?5?$AAT@|
  0087c		 |$LN40@NICInitSen|
  0087c	00000000	 DCD         |??_C@_1DC@DOMEHKHN@?$AAN?$AAd?$AAi?$AAs?$AAM?$AAM?$AAa?$AAp?$AAI?$AAo?$AAS?$AAp?$AAa?$AAc?$AAe?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  00880		 |$LN41@NICInitSen|
  00880	00000000	 DCD         |??_C@_1EE@FNBIODFC@?$AA?5?$AAN?$AAd?$AAi?$AAs?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAM?$AAe?$AAm?$AAo?$AAr?$AAy?$AA?5?$AAU?$AAn?$AAs?$AAu?$AAc?$AAe?$AAs?$AAs?$AAf?$AAu?$AAl?$AA?$AN@|
  00884		 |$LN42@NICInitSen|
  00884	00000000	 DCD         |g_HighestAcceptedMax|
  00888		 |$LN43@NICInitSen|
  00888	00000000	 DCD         |??_C@_1CI@NJHGBEIC@?$AA?9?$AA?9?$AA?$DO?$AA?5?$AAN?$AAI?$AAC?$AAI?$AAn?$AAi?$AAt?$AAS?$AAe?$AAn?$AAd?$AA?0?$AA?5?$AA?$AN?$AA?6?$AA?$AA@|
  0088c		 |$M50620|

			 ENDP  ; |NICInitSend|

	EXPORT	|??_C@_1DK@BKEPHKB@?$AA?$DM?$AA?9?$AA?9?$AA?5?$AAN?$AAI?$AAC?$AAI?$AAn?$AAi?$AAt?$AAR?$AAe?$AAc?$AAv?$AA?0?$AA?5?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?$DN?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EE@JOEBELJD@?$AA?5?$AAN?$AAd?$AAi?$AAs?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?5?$AAU?$AAn?$AAs?$AAu?$AAc?$AAe?$AAs?$AAs?$AAf?$AAu?$AAl?$AA?$AN@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EA@HJJLOBMN@?$AAN?$AAd?$AAi?$AAs?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AAP?$AAo?$AAo?$AAl?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1MC@LHFAFGGE@?$AA?$CL?$AAp?$AAA?$AAd?$AAa?$AAp?$AAt?$AAe?$AAr?$AA?9?$AA?$DO?$AAm?$AA_?$AAR?$AAx?$AAP?$AAk?$AAt?$AAP?$AAo?$AAo?$AAl?$AA?4?$AAH?$AAe?$AAa?$AAd?$AA?5?$AA?$CF?$AAx?$AA?$AN?$AA?6@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EE@HCOEEHPL@?$AA?5?$AAN?$AAd?$AAi?$AAs?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?5?$AAU?$AAn?$AAs?$AAu?$AAc?$AAe?$AAs?$AAs?$AAf?$AAu?$AAl?$AA?$AN@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EA@ILAMJCPH@?$AAN?$AAd?$AAi?$AAs?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AAP?$AAo?$AAo?$AAl?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HG@FJHNBMJL@?$AAA?$AAp?$AAt?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAp?$AA?5?$AAN?$AAd?$AAi?$AAs?$AAM?$AAM?$AAa?$AAp?$AAI?$AAo?$AAS?$AAp?$AAa?$AAc?$AAe?$AA?5?$AAR@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@JKJJHEAG@?$AA?9?$AA?9?$AA?9?$AA?$DO?$AA?5?$AAN?$AAI?$AAC?$AAI?$AAn?$AAi?$AAt?$AAR?$AAe?$AAc?$AAv?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|NICInitRecv|
	IMPORT	|NdisAllocateBuffer|
	IMPORT	|NdisAllocateBufferPool|
	IMPORT	|NdisAllocatePacket|
	IMPORT	|NdisAllocatePacketPool|

  00010			 AREA	 |.pdata|, PDATA
|$T50661| DCD	|$LN50@NICInitRec|
	DCD	0x40025004

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DK@BKEPHKB@?$AA?$DM?$AA?9?$AA?9?$AA?5?$AAN?$AAI?$AAC?$AAI?$AAn?$AAi?$AAt?$AAR?$AAe?$AAc?$AAv?$AA?0?$AA?5?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?$DN?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "<"
	DCB	0x0, "-", 0x0, "-", 0x0, " ", 0x0, "N", 0x0, "I", 0x0, "C"
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "R", 0x0, "e"
	DCB	0x0, "c", 0x0, "v", 0x0, ",", 0x0, " ", 0x0, "S", 0x0, "t"
	DCB	0x0, "a", 0x0, "t", 0x0, "u", 0x0, "s", 0x0, "=", 0x0, "%"
	DCB	0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EE@JOEBELJD@?$AA?5?$AAN?$AAd?$AAi?$AAs?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?5?$AAU?$AAn?$AAs?$AAu?$AAc?$AAe?$AAs?$AAs?$AAf?$AAu?$AAl?$AA?$AN@| DCB " "
	DCB	0x0, "N", 0x0, "d", 0x0, "i", 0x0, "s", 0x0, "A", 0x0, "l"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, "B", 0x0, "u", 0x0, "f", 0x0, "f", 0x0, "e", 0x0, "r"
	DCB	0x0, " ", 0x0, "U", 0x0, "n", 0x0, "s", 0x0, "u", 0x0, "c"
	DCB	0x0, "e", 0x0, "s", 0x0, "s", 0x0, "f", 0x0, "u", 0x0, "l"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@HJJLOBMN@?$AAN?$AAd?$AAi?$AAs?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AAP?$AAo?$AAo?$AAl?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "N"
	DCB	0x0, "d", 0x0, "i", 0x0, "s", 0x0, "A", 0x0, "l", 0x0, "l"
	DCB	0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, "B"
	DCB	0x0, "u", 0x0, "f", 0x0, "f", 0x0, "e", 0x0, "r", 0x0, "P"
	DCB	0x0, "o", 0x0, "o", 0x0, "l", 0x0, " ", 0x0, "f", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1MC@LHFAFGGE@?$AA?$CL?$AAp?$AAA?$AAd?$AAa?$AAp?$AAt?$AAe?$AAr?$AA?9?$AA?$DO?$AAm?$AA_?$AAR?$AAx?$AAP?$AAk?$AAt?$AAP?$AAo?$AAo?$AAl?$AA?4?$AAH?$AAe?$AAa?$AAd?$AA?5?$AA?$CF?$AAx?$AA?$AN?$AA?6@| DCB "+"
	DCB	0x0, "p", 0x0, "A", 0x0, "d", 0x0, "a", 0x0, "p", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "-", 0x0, ">", 0x0, "m", 0x0, "_"
	DCB	0x0, "R", 0x0, "x", 0x0, "P", 0x0, "k", 0x0, "t", 0x0, "P"
	DCB	0x0, "o", 0x0, "o", 0x0, "l", 0x0, ".", 0x0, "H", 0x0, "e"
	DCB	0x0, "a", 0x0, "d", 0x0, " ", 0x0, "%", 0x0, "x", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, "p", 0x0, "A", 0x0, "d", 0x0, "a", 0x0, "p"
	DCB	0x0, "t", 0x0, "e", 0x0, "r", 0x0, "-", 0x0, ">", 0x0, "m"
	DCB	0x0, "_", 0x0, "R", 0x0, "x", 0x0, "P", 0x0, "k", 0x0, "t"
	DCB	0x0, "P", 0x0, "o", 0x0, "o", 0x0, "l", 0x0, ".", 0x0, "T"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, " ", 0x0, "%", 0x0, "x"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, "p", 0x0, "A", 0x0, "d", 0x0, "a"
	DCB	0x0, "p", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "-", 0x0, ">"
	DCB	0x0, "m", 0x0, "_", 0x0, "R", 0x0, "x", 0x0, "P", 0x0, "k"
	DCB	0x0, "t", 0x0, "P", 0x0, "o", 0x0, "o", 0x0, "l", 0x0, "."
	DCB	0x0, "C", 0x0, "o", 0x0, "u", 0x0, "n", 0x0, "t", 0x0, " "
	DCB	0x0, "%", 0x0, "x", 0x0, " ", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EE@HCOEEHPL@?$AA?5?$AAN?$AAd?$AAi?$AAs?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?5?$AAU?$AAn?$AAs?$AAu?$AAc?$AAe?$AAs?$AAs?$AAf?$AAu?$AAl?$AA?$AN@| DCB " "
	DCB	0x0, "N", 0x0, "d", 0x0, "i", 0x0, "s", 0x0, "A", 0x0, "l"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, "P", 0x0, "a", 0x0, "c", 0x0, "k", 0x0, "e", 0x0, "t"
	DCB	0x0, " ", 0x0, "U", 0x0, "n", 0x0, "s", 0x0, "u", 0x0, "c"
	DCB	0x0, "e", 0x0, "s", 0x0, "s", 0x0, "f", 0x0, "u", 0x0, "l"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@ILAMJCPH@?$AAN?$AAd?$AAi?$AAs?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AAP?$AAo?$AAo?$AAl?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "N"
	DCB	0x0, "d", 0x0, "i", 0x0, "s", 0x0, "A", 0x0, "l", 0x0, "l"
	DCB	0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, "P"
	DCB	0x0, "a", 0x0, "c", 0x0, "k", 0x0, "e", 0x0, "t", 0x0, "P"
	DCB	0x0, "o", 0x0, "o", 0x0, "l", 0x0, " ", 0x0, "f", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HG@FJHNBMJL@?$AAA?$AAp?$AAt?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAp?$AA?5?$AAN?$AAd?$AAi?$AAs?$AAM?$AAM?$AAa?$AAp?$AAI?$AAo?$AAS?$AAp?$AAa?$AAc?$AAe?$AA?5?$AAR@| DCB "A"
	DCB	0x0, "p", 0x0, "t", 0x0, "H", 0x0, "a", 0x0, "n", 0x0, "d"
	DCB	0x0, "l", 0x0, "e", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%"
	DCB	0x0, "p", 0x0, " ", 0x0, "N", 0x0, "d", 0x0, "i", 0x0, "s"
	DCB	0x0, "M", 0x0, "M", 0x0, "a", 0x0, "p", 0x0, "I", 0x0, "o"
	DCB	0x0, "S", 0x0, "p", 0x0, "a", 0x0, "c", 0x0, "e", 0x0, " "
	DCB	0x0, "R", 0x0, "x", 0x0, "B", 0x0, "u", 0x0, "f", 0x0, "f"
	DCB	0x0, "(", 0x0, "s", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, "="
	DCB	0x0, "%", 0x0, "d", 0x0, ")", 0x0, "(", 0x0, "%", 0x0, "p"
	DCB	0x0, ")", 0x0, "=", 0x0, "P", 0x0, "A", 0x0, ":", 0x0, "%"
	DCB	0x0, "p", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@JKJJHEAG@?$AA?9?$AA?9?$AA?9?$AA?$DO?$AA?5?$AAN?$AAI?$AAC?$AAI?$AAn?$AAi?$AAt?$AAR?$AAe?$AAc?$AAv?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "-", 0x0, "-", 0x0, ">", 0x0, " ", 0x0, "N", 0x0, "I"
	DCB	0x0, "C", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "R"
	DCB	0x0, "e", 0x0, "c", 0x0, "v", 0x0, " ", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  0088c			 AREA	 |.text|, CODE, ARM

  0088c		 |NICInitRecv| PROC

; 234  : {

  0088c		 |$LN50@NICInitRec|
  0088c	e1a0c00d	 mov         r12, sp
  00890	e92d0001	 stmdb       sp!, {r0}
  00894	e92d5000	 stmdb       sp!, {r12, lr}
  00898	e24dd084	 sub         sp, sp, #0x84
  0089c		 |$M50658|

; 235  :     NDIS_STATUS     Status = NDIS_STATUS_SUCCESS;

  0089c	e3a03000	 mov         r3, #0
  008a0	e58d301c	 str         r3, [sp, #0x1C]

; 236  :     USHORT          Count;
; 237  :     DWORD           EmacRcvBufDesBase;
; 238  :     DWORD           EmacRcvBufDesBasePa;
; 239  :     PEMAC_RXPKTS    pCurPkt;
; 240  :     PEMAC_RXPKTS    pNextPkt;
; 241  :     PEMAC_RXBUFS    pCurBuf;
; 242  :     PEMAC_RXBUFS    pNextBuf;
; 243  :     DWORD           RcvBufLogical;
; 244  :     DWORD           RcvBufPhysical;
; 245  : 
; 246  :     EmacRcvBufDesBase   = (pAdapter->m_EmacIRamBase +EMAC_RX_DESC_BASE);

  008a4	e59d308c	 ldr         r3, [sp, #0x8C]
  008a8	e283300c	 add         r3, r3, #0xC
  008ac	e5932000	 ldr         r2, [r3]
  008b0	e59f38fc	 ldr         r3, [pc, #0x8FC]
  008b4	e5933004	 ldr         r3, [r3, #4]
  008b8	e0823003	 add         r3, r2, r3
  008bc	e58d300c	 str         r3, [sp, #0xC]

; 247  :     EmacRcvBufDesBasePa = (g_EmacMemLayout.EMAC_PERPECTIVE_RAM_ADDR + EMAC_RX_DESC_BASE);

  008c0	e59f38ec	 ldr         r3, [pc, #0x8EC]
  008c4	e5932014	 ldr         r2, [r3, #0x14]
  008c8	e59f38e4	 ldr         r3, [pc, #0x8E4]
  008cc	e5933004	 ldr         r3, [r3, #4]
  008d0	e0823003	 add         r3, r2, r3
  008d4	e58d302c	 str         r3, [sp, #0x2C]

; 248  : 
; 249  :     DEBUGMSG(DBG_FUNC, (L"---> NICInitRecv \r\n" ));

  008d8	e59f38bc	 ldr         r3, [pc, #0x8BC]
  008dc	e5933440	 ldr         r3, [r3, #0x440]
  008e0	e3130080	 tst         r3, #0x80
  008e4	0a000004	 beq         |$LN26@NICInitRec|
  008e8	e59f08d8	 ldr         r0, [pc, #0x8D8]
  008ec	eb000000	 bl          NKDbgPrintfW
  008f0	e3a03001	 mov         r3, #1
  008f4	e58d303c	 str         r3, [sp, #0x3C]
  008f8	ea000001	 b           |$LN27@NICInitRec|
  008fc		 |$LN26@NICInitRec|
  008fc	e3a03000	 mov         r3, #0
  00900	e58d303c	 str         r3, [sp, #0x3C]
  00904		 |$LN27@NICInitRec|

; 250  : 
; 251  :     if(pAdapter->m_HwStatus != NdisHardwareStatusReset)

  00904	e59d308c	 ldr         r3, [sp, #0x8C]
  00908	e2833e1a	 add         r3, r3, #0x1A, 28
  0090c	e5933000	 ldr         r3, [r3]
  00910	e3530002	 cmp         r3, #2
  00914	0a000076	 beq         |$LN23@NICInitRec|

; 252  :     {
; 253  : 		// Setting up Receive Packets data structures */
; 254  : 		Status = NdisAllocateMemory((PVOID *)&pAdapter->m_pBaseRxPkts,
; 255  : 									  pAdapter->m_NumRxIndicatePkts * sizeof(EMAC_RXPKTS),
; 256  : 									  0,
; 257  : 									  g_HighestAcceptedMax);

  00918	e59f38a4	 ldr         r3, [pc, #0x8A4]
  0091c	e58d3040	 str         r3, [sp, #0x40]
  00920	e28d0000	 add         r0, sp, #0
  00924	e59d3040	 ldr         r3, [sp, #0x40]
  00928	e2831004	 add         r1, r3, #4
  0092c	e3a02004	 mov         r2, #4
  00930	eb000000	 bl          memcpy
  00934	e59d3040	 ldr         r3, [sp, #0x40]
  00938	e5933000	 ldr         r3, [r3]
  0093c	e3a02000	 mov         r2, #0
  00940	e59d108c	 ldr         r1, [sp, #0x8C]
  00944	e2811024	 add         r1, r1, #0x24
  00948	e1d100b0	 ldrh        r0, [r1]
  0094c	e3a01014	 mov         r1, #0x14
  00950	e0010190	 mul         r1, r0, r1
  00954	e59d008c	 ldr         r0, [sp, #0x8C]
  00958	e280002c	 add         r0, r0, #0x2C
  0095c	eb000000	 bl          NdisAllocateMemory
  00960	e58d0044	 str         r0, [sp, #0x44]
  00964	e59d3044	 ldr         r3, [sp, #0x44]
  00968	e58d301c	 str         r3, [sp, #0x1C]

; 258  : 	                            
; 259  : 		if (Status != NDIS_STATUS_SUCCESS)

  0096c	e59d301c	 ldr         r3, [sp, #0x1C]
  00970	e3530000	 cmp         r3, #0
  00974	0a00000d	 beq         |$LN22@NICInitRec|

; 260  : 		{
; 261  : 			DEBUGMSG(DBG_ERR,(L" NdisAllocateMemory Unsucessful\r\n"));

  00978	e59f381c	 ldr         r3, [pc, #0x81C]
  0097c	e5933440	 ldr         r3, [r3, #0x440]
  00980	e3130902	 tst         r3, #2, 18
  00984	0a000004	 beq         |$LN28@NICInitRec|
  00988	e59f0830	 ldr         r0, [pc, #0x830]
  0098c	eb000000	 bl          NKDbgPrintfW
  00990	e3a03001	 mov         r3, #1
  00994	e58d3048	 str         r3, [sp, #0x48]
  00998	ea000001	 b           |$LN29@NICInitRec|
  0099c		 |$LN28@NICInitRec|
  0099c	e3a03000	 mov         r3, #0
  009a0	e58d3048	 str         r3, [sp, #0x48]
  009a4		 |$LN29@NICInitRec|

; 262  : 			return Status;

  009a4	e59d301c	 ldr         r3, [sp, #0x1C]
  009a8	e58d3030	 str         r3, [sp, #0x30]
  009ac	ea0001f5	 b           |$LN24@NICInitRec|
  009b0		 |$LN22@NICInitRec|

; 263  : 		}
; 264  : 	    
; 265  : 		/* Setting up Receive Buffers  data structures */
; 266  : 	    
; 267  : 		Status = NdisAllocateMemory((PVOID *)&pAdapter->m_pBaseRxBufs,
; 268  : 										pAdapter->m_NumEmacRxBufDesc * sizeof(EMAC_RXBUFS),
; 269  : 										0,
; 270  : 										g_HighestAcceptedMax);

  009b0	e59f380c	 ldr         r3, [pc, #0x80C]
  009b4	e58d304c	 str         r3, [sp, #0x4C]
  009b8	e28d0000	 add         r0, sp, #0
  009bc	e59d304c	 ldr         r3, [sp, #0x4C]
  009c0	e2831004	 add         r1, r3, #4
  009c4	e3a02004	 mov         r2, #4
  009c8	eb000000	 bl          memcpy
  009cc	e59d304c	 ldr         r3, [sp, #0x4C]
  009d0	e5933000	 ldr         r3, [r3]
  009d4	e3a02000	 mov         r2, #0
  009d8	e59d108c	 ldr         r1, [sp, #0x8C]
  009dc	e2811026	 add         r1, r1, #0x26
  009e0	e1d100b0	 ldrh        r0, [r1]
  009e4	e3a01018	 mov         r1, #0x18
  009e8	e0010190	 mul         r1, r0, r1
  009ec	e59d008c	 ldr         r0, [sp, #0x8C]
  009f0	e2800030	 add         r0, r0, #0x30
  009f4	eb000000	 bl          NdisAllocateMemory
  009f8	e58d0050	 str         r0, [sp, #0x50]
  009fc	e59d3050	 ldr         r3, [sp, #0x50]
  00a00	e58d301c	 str         r3, [sp, #0x1C]

; 271  : 	                            
; 272  : 		if (Status != NDIS_STATUS_SUCCESS)

  00a04	e59d301c	 ldr         r3, [sp, #0x1C]
  00a08	e3530000	 cmp         r3, #0
  00a0c	0a00000d	 beq         |$LN21@NICInitRec|

; 273  : 		{
; 274  : 			DEBUGMSG(DBG_ERR,(L" NdisAllocateMemory Unsucessful\r\n"));

  00a10	e59f3784	 ldr         r3, [pc, #0x784]
  00a14	e5933440	 ldr         r3, [r3, #0x440]
  00a18	e3130902	 tst         r3, #2, 18
  00a1c	0a000004	 beq         |$LN30@NICInitRec|
  00a20	e59f0798	 ldr         r0, [pc, #0x798]
  00a24	eb000000	 bl          NKDbgPrintfW
  00a28	e3a03001	 mov         r3, #1
  00a2c	e58d3054	 str         r3, [sp, #0x54]
  00a30	ea000001	 b           |$LN31@NICInitRec|
  00a34		 |$LN30@NICInitRec|
  00a34	e3a03000	 mov         r3, #0
  00a38	e58d3054	 str         r3, [sp, #0x54]
  00a3c		 |$LN31@NICInitRec|

; 275  : 			return Status;

  00a3c	e59d301c	 ldr         r3, [sp, #0x1C]
  00a40	e58d3030	 str         r3, [sp, #0x30]
  00a44	ea0001cf	 b           |$LN24@NICInitRec|
  00a48		 |$LN21@NICInitRec|

; 276  : 		}
; 277  : 
; 278  : 		if(NULL == (VOID *)pAdapter->m_RxBufsBase)

  00a48	e59d308c	 ldr         r3, [sp, #0x8C]
  00a4c	e283303c	 add         r3, r3, #0x3C
  00a50	e5933000	 ldr         r3, [r3]
  00a54	e3530000	 cmp         r3, #0
  00a58	1a000025	 bne         |$LN20@NICInitRec|

; 279  : 		{
; 280  : 			Status = NdisMMapIoSpace((PVOID*)&pAdapter->m_RxBufsBase,
; 281  : 							pAdapter->m_AdapterHandle,
; 282  : 							pAdapter->m_RxBufsBasePa,
; 283  : 							(pAdapter->m_NumEmacRxBufDesc * EMAC_MAX_PKT_BUFFER_SIZE));

  00a5c	e59d308c	 ldr         r3, [sp, #0x8C]
  00a60	e2833026	 add         r3, r3, #0x26
  00a64	e1d330b0	 ldrh        r3, [r3]
  00a68	e1a02003	 mov         r2, r3
  00a6c	e3a03c06	 mov         r3, #6, 24
  00a70	e0030392	 mul         r3, r2, r3
  00a74	e58d3000	 str         r3, [sp]
  00a78	e59d308c	 ldr         r3, [sp, #0x8C]
  00a7c	e2833040	 add         r3, r3, #0x40
  00a80	e58d3058	 str         r3, [sp, #0x58]
  00a84	e59d3058	 ldr         r3, [sp, #0x58]
  00a88	e5932000	 ldr         r2, [r3]
  00a8c	e5933004	 ldr         r3, [r3, #4]
  00a90	e59d108c	 ldr         r1, [sp, #0x8C]
  00a94	e5911000	 ldr         r1, [r1]
  00a98	e59d008c	 ldr         r0, [sp, #0x8C]
  00a9c	e280003c	 add         r0, r0, #0x3C
  00aa0	eb000000	 bl          NdisMMapIoSpace
  00aa4	e58d005c	 str         r0, [sp, #0x5C]
  00aa8	e59d305c	 ldr         r3, [sp, #0x5C]
  00aac	e58d301c	 str         r3, [sp, #0x1C]

; 284  : 
; 285  : 			if(Status != NDIS_STATUS_SUCCESS)

  00ab0	e59d301c	 ldr         r3, [sp, #0x1C]
  00ab4	e3530000	 cmp         r3, #0
  00ab8	0a00000d	 beq         |$LN19@NICInitRec|

; 286  : 			{
; 287  : 				DEBUGMSG(DBG_ERR, (L"NdisMMapIoSpace failed\r\n"));

  00abc	e59f36d8	 ldr         r3, [pc, #0x6D8]
  00ac0	e5933440	 ldr         r3, [r3, #0x440]
  00ac4	e3130902	 tst         r3, #2, 18
  00ac8	0a000004	 beq         |$LN32@NICInitRec|
  00acc	e59f06e8	 ldr         r0, [pc, #0x6E8]
  00ad0	eb000000	 bl          NKDbgPrintfW
  00ad4	e3a03001	 mov         r3, #1
  00ad8	e58d3060	 str         r3, [sp, #0x60]
  00adc	ea000001	 b           |$LN33@NICInitRec|
  00ae0		 |$LN32@NICInitRec|
  00ae0	e3a03000	 mov         r3, #0
  00ae4	e58d3060	 str         r3, [sp, #0x60]
  00ae8		 |$LN33@NICInitRec|

; 288  : 				return Status;

  00ae8	e59d301c	 ldr         r3, [sp, #0x1C]
  00aec	e58d3030	 str         r3, [sp, #0x30]
  00af0	ea0001a4	 b           |$LN24@NICInitRec|
  00af4		 |$LN19@NICInitRec|
  00af4		 |$LN20@NICInitRec|
  00af4		 |$LN23@NICInitRec|

; 289  : 			}
; 290  : 		}
; 291  : 	}
; 292  : 
; 293  :     DEBUGMSG(DBG_INFO, (L"AptHandle = %p NdisMMapIoSpace RxBuff(size=%d)(%p)=PA:%p\r\n", 
; 294  :         pAdapter->m_AdapterHandle, 
; 295  :         (pAdapter->m_NumEmacRxBufDesc * EMAC_MAX_PKT_BUFFER_SIZE), 
; 296  :         pAdapter->m_RxBufsBase, 
; 297  :         pAdapter->m_RxBufsBasePa));

  00af4	e59f36a0	 ldr         r3, [pc, #0x6A0]
  00af8	e5933440	 ldr         r3, [r3, #0x440]
  00afc	e3130040	 tst         r3, #0x40
  00b00	0a000016	 beq         |$LN34@NICInitRec|
  00b04	e59d308c	 ldr         r3, [sp, #0x8C]
  00b08	e2833040	 add         r3, r3, #0x40
  00b0c	e58d3064	 str         r3, [sp, #0x64]
  00b10	e28d0000	 add         r0, sp, #0
  00b14	e59d1064	 ldr         r1, [sp, #0x64]
  00b18	e3a02008	 mov         r2, #8
  00b1c	eb000000	 bl          memcpy
  00b20	e59d308c	 ldr         r3, [sp, #0x8C]
  00b24	e283303c	 add         r3, r3, #0x3C
  00b28	e5933000	 ldr         r3, [r3]
  00b2c	e59d208c	 ldr         r2, [sp, #0x8C]
  00b30	e2822026	 add         r2, r2, #0x26
  00b34	e1d220b0	 ldrh        r2, [r2]
  00b38	e1a01002	 mov         r1, r2
  00b3c	e3a02c06	 mov         r2, #6, 24
  00b40	e0020291	 mul         r2, r1, r2
  00b44	e59d108c	 ldr         r1, [sp, #0x8C]
  00b48	e5911000	 ldr         r1, [r1]
  00b4c	e59f0664	 ldr         r0, [pc, #0x664]
  00b50	eb000000	 bl          NKDbgPrintfW
  00b54	e3a03001	 mov         r3, #1
  00b58	e58d3068	 str         r3, [sp, #0x68]
  00b5c	ea000001	 b           |$LN35@NICInitRec|
  00b60		 |$LN34@NICInitRec|
  00b60	e3a03000	 mov         r3, #0
  00b64	e58d3068	 str         r3, [sp, #0x68]
  00b68		 |$LN35@NICInitRec|

; 298  : 
; 299  :     NdisZeroMemory(pAdapter->m_pBaseRxPkts,
; 300  :                     pAdapter->m_NumRxIndicatePkts * sizeof(EMAC_RXPKTS));

  00b68	e59d308c	 ldr         r3, [sp, #0x8C]
  00b6c	e2833024	 add         r3, r3, #0x24
  00b70	e1d310b0	 ldrh        r1, [r3]
  00b74	e3a03014	 mov         r3, #0x14
  00b78	e0020391	 mul         r2, r1, r3
  00b7c	e3a01000	 mov         r1, #0
  00b80	e59d308c	 ldr         r3, [sp, #0x8C]
  00b84	e283302c	 add         r3, r3, #0x2C
  00b88	e5930000	 ldr         r0, [r3]
  00b8c	eb000000	 bl          memset

; 301  : 
; 302  :     NdisZeroMemory(pAdapter->m_pBaseRxBufs,
; 303  :                     pAdapter->m_NumEmacRxBufDesc * sizeof(EMAC_RXBUFS));

  00b90	e59d308c	 ldr         r3, [sp, #0x8C]
  00b94	e2833026	 add         r3, r3, #0x26
  00b98	e1d310b0	 ldrh        r1, [r3]
  00b9c	e3a03018	 mov         r3, #0x18
  00ba0	e0020391	 mul         r2, r1, r3
  00ba4	e3a01000	 mov         r1, #0
  00ba8	e59d308c	 ldr         r3, [sp, #0x8C]
  00bac	e2833030	 add         r3, r3, #0x30
  00bb0	e5930000	 ldr         r0, [r3]
  00bb4	eb000000	 bl          memset

; 304  : 
; 305  :     EmacRcvBufDesBase = (pAdapter->m_EmacIRamBase + EMAC_RX_DESC_BASE);

  00bb8	e59d308c	 ldr         r3, [sp, #0x8C]
  00bbc	e283300c	 add         r3, r3, #0xC
  00bc0	e5932000	 ldr         r2, [r3]
  00bc4	e59f35e8	 ldr         r3, [pc, #0x5E8]
  00bc8	e5933004	 ldr         r3, [r3, #4]
  00bcc	e0823003	 add         r3, r2, r3
  00bd0	e58d300c	 str         r3, [sp, #0xC]

; 306  : 
; 307  :     NdisZeroMemory((PVOID)pAdapter->m_RxBufsBase,
; 308  :                     pAdapter->m_NumEmacRxBufDesc * EMAC_MAX_PKT_BUFFER_SIZE);

  00bd4	e59d308c	 ldr         r3, [sp, #0x8C]
  00bd8	e2833026	 add         r3, r3, #0x26
  00bdc	e1d330b0	 ldrh        r3, [r3]
  00be0	e1a01003	 mov         r1, r3
  00be4	e3a03c06	 mov         r3, #6, 24
  00be8	e0020391	 mul         r2, r1, r3
  00bec	e3a01000	 mov         r1, #0
  00bf0	e59d308c	 ldr         r3, [sp, #0x8C]
  00bf4	e283303c	 add         r3, r3, #0x3C
  00bf8	e5930000	 ldr         r0, [r3]
  00bfc	eb000000	 bl          memset

; 309  : 
; 310  :     /* Allocate Packet pool */
; 311  :     NdisAllocatePacketPool(&Status,
; 312  :                            &pAdapter->m_RecvPacketPool,
; 313  :                            pAdapter->m_NumRxIndicatePkts,
; 314  :                            MINIPORT_RESERVED_SIZE);

  00c00	e3a03c01	 mov         r3, #1, 24
  00c04	e59d208c	 ldr         r2, [sp, #0x8C]
  00c08	e2822024	 add         r2, r2, #0x24
  00c0c	e1d220b0	 ldrh        r2, [r2]
  00c10	e59d108c	 ldr         r1, [sp, #0x8C]
  00c14	e281101c	 add         r1, r1, #0x1C
  00c18	e28d001c	 add         r0, sp, #0x1C
  00c1c	eb000000	 bl          NdisAllocatePacketPool

; 315  : 
; 316  :     if (Status != NDIS_STATUS_SUCCESS)

  00c20	e59d301c	 ldr         r3, [sp, #0x1C]
  00c24	e3530000	 cmp         r3, #0
  00c28	0a00000d	 beq         |$LN18@NICInitRec|

; 317  :     {
; 318  :         DEBUGMSG(DBG_ERR, (L"NdisAllocatePacketPool failed\r\n"));

  00c2c	e59f3568	 ldr         r3, [pc, #0x568]
  00c30	e5933440	 ldr         r3, [r3, #0x440]
  00c34	e3130902	 tst         r3, #2, 18
  00c38	0a000004	 beq         |$LN36@NICInitRec|
  00c3c	e59f056c	 ldr         r0, [pc, #0x56C]
  00c40	eb000000	 bl          NKDbgPrintfW
  00c44	e3a03001	 mov         r3, #1
  00c48	e58d306c	 str         r3, [sp, #0x6C]
  00c4c	ea000001	 b           |$LN37@NICInitRec|
  00c50		 |$LN36@NICInitRec|
  00c50	e3a03000	 mov         r3, #0
  00c54	e58d306c	 str         r3, [sp, #0x6C]
  00c58		 |$LN37@NICInitRec|

; 319  :         return Status;

  00c58	e59d301c	 ldr         r3, [sp, #0x1C]
  00c5c	e58d3030	 str         r3, [sp, #0x30]
  00c60	ea000148	 b           |$LN24@NICInitRec|
  00c64		 |$LN18@NICInitRec|

; 320  :     }
; 321  : 
; 322  : 
; 323  :     pNextPkt = pAdapter->m_pBaseRxPkts;

  00c64	e59d308c	 ldr         r3, [sp, #0x8C]
  00c68	e283302c	 add         r3, r3, #0x2C
  00c6c	e5933000	 ldr         r3, [r3]
  00c70	e58d3018	 str         r3, [sp, #0x18]

; 324  : 
; 325  :     QUEUE_INIT(&pAdapter->m_RxPktPool);

  00c74	e59d308c	 ldr         r3, [sp, #0x8C]
  00c78	e2832e1b	 add         r2, r3, #0x1B, 28
  00c7c	e3a03000	 mov         r3, #0
  00c80	e5823000	 str         r3, [r2]
  00c84	e59d308c	 ldr         r3, [sp, #0x8C]
  00c88	e2832f6d	 add         r2, r3, #0x6D, 30
  00c8c	e3a03000	 mov         r3, #0
  00c90	e5823000	 str         r3, [r2]
  00c94	e59d308c	 ldr         r3, [sp, #0x8C]
  00c98	e2832f6e	 add         r2, r3, #0x6E, 30
  00c9c	e3a03000	 mov         r3, #0
  00ca0	e5823000	 str         r3, [r2]

; 326  : 
; 327  :     for (Count = 0; Count < pAdapter->m_NumRxIndicatePkts ; Count++)

  00ca4	e3a03000	 mov         r3, #0
  00ca8	e1cd31b4	 strh        r3, [sp, #0x14]
  00cac	ea000004	 b           |$LN17@NICInitRec|
  00cb0		 |$LN16@NICInitRec|
  00cb0	e1dd31b4	 ldrh        r3, [sp, #0x14]
  00cb4	e2833001	 add         r3, r3, #1
  00cb8	e1a03803	 mov         r3, r3, lsl #16
  00cbc	e1a03823	 mov         r3, r3, lsr #16
  00cc0	e1cd31b4	 strh        r3, [sp, #0x14]
  00cc4		 |$LN17@NICInitRec|
  00cc4	e1dd31b4	 ldrh        r3, [sp, #0x14]
  00cc8	e1a02003	 mov         r2, r3
  00ccc	e59d308c	 ldr         r3, [sp, #0x8C]
  00cd0	e2833024	 add         r3, r3, #0x24
  00cd4	e1d330b0	 ldrh        r3, [r3]
  00cd8	e1520003	 cmp         r2, r3
  00cdc	aa00004e	 bge         |$LN15@NICInitRec|

; 328  :     {
; 329  :         pCurPkt = pNextPkt;

  00ce0	e59d3018	 ldr         r3, [sp, #0x18]
  00ce4	e58d3010	 str         r3, [sp, #0x10]

; 330  : 
; 331  :         /* Allocating packet from packet pool */
; 332  :         NdisAllocatePacket( &Status,
; 333  :                             (PNDIS_PACKET *)&pCurPkt->m_PktHandle,
; 334  :                             pAdapter->m_RecvPacketPool);

  00ce8	e59d308c	 ldr         r3, [sp, #0x8C]
  00cec	e283301c	 add         r3, r3, #0x1C
  00cf0	e5932000	 ldr         r2, [r3]
  00cf4	e59d3010	 ldr         r3, [sp, #0x10]
  00cf8	e2831004	 add         r1, r3, #4
  00cfc	e28d001c	 add         r0, sp, #0x1C
  00d00	eb000000	 bl          NdisAllocatePacket

; 335  : 
; 336  :         if (Status != NDIS_STATUS_SUCCESS)

  00d04	e59d301c	 ldr         r3, [sp, #0x1C]
  00d08	e3530000	 cmp         r3, #0
  00d0c	0a00000b	 beq         |$LN14@NICInitRec|

; 337  :         {
; 338  :             DEBUGMSG(DBG_ERR,(L" NdisAllocatePacket Unsucessful\r\n"));

  00d10	e59f3484	 ldr         r3, [pc, #0x484]
  00d14	e5933440	 ldr         r3, [r3, #0x440]
  00d18	e3130902	 tst         r3, #2, 18
  00d1c	0a000004	 beq         |$LN38@NICInitRec|
  00d20	e59f0484	 ldr         r0, [pc, #0x484]
  00d24	eb000000	 bl          NKDbgPrintfW
  00d28	e3a03001	 mov         r3, #1
  00d2c	e58d3070	 str         r3, [sp, #0x70]
  00d30	ea000001	 b           |$LN39@NICInitRec|
  00d34		 |$LN38@NICInitRec|
  00d34	e3a03000	 mov         r3, #0
  00d38	e58d3070	 str         r3, [sp, #0x70]
  00d3c		 |$LN39@NICInitRec|

; 339  :             break;

  00d3c	ea000036	 b           |$LN15@NICInitRec|
  00d40		 |$LN14@NICInitRec|

; 340  :         }
; 341  : 
; 342  :         QUEUE_INSERT(&pAdapter->m_RxPktPool, pCurPkt);

  00d40	e59d308c	 ldr         r3, [sp, #0x8C]
  00d44	e2933e1b	 adds        r3, r3, #0x1B, 28
  00d48	0a00001f	 beq         |$LN13@NICInitRec|
  00d4c	e59d3010	 ldr         r3, [sp, #0x10]
  00d50	e3530000	 cmp         r3, #0
  00d54	0a00001c	 beq         |$LN13@NICInitRec|
  00d58	e59d308c	 ldr         r3, [sp, #0x8C]
  00d5c	e2833e1b	 add         r3, r3, #0x1B, 28
  00d60	e5933000	 ldr         r3, [r3]
  00d64	e3530000	 cmp         r3, #0
  00d68	1a000004	 bne         |$LN12@NICInitRec|
  00d6c	e59d308c	 ldr         r3, [sp, #0x8C]
  00d70	e2832e1b	 add         r2, r3, #0x1B, 28
  00d74	e59d3010	 ldr         r3, [sp, #0x10]
  00d78	e5823000	 str         r3, [r2]
  00d7c	ea000004	 b           |$LN11@NICInitRec|
  00d80		 |$LN12@NICInitRec|
  00d80	e59d308c	 ldr         r3, [sp, #0x8C]
  00d84	e2833f6d	 add         r3, r3, #0x6D, 30
  00d88	e5932000	 ldr         r2, [r3]
  00d8c	e59d3010	 ldr         r3, [sp, #0x10]
  00d90	e5823000	 str         r3, [r2]
  00d94		 |$LN11@NICInitRec|
  00d94	e59d308c	 ldr         r3, [sp, #0x8C]
  00d98	e2832f6d	 add         r2, r3, #0x6D, 30
  00d9c	e59d3010	 ldr         r3, [sp, #0x10]
  00da0	e5823000	 str         r3, [r2]
  00da4	e59d308c	 ldr         r3, [sp, #0x8C]
  00da8	e2833f6e	 add         r3, r3, #0x6E, 30
  00dac	e5933000	 ldr         r3, [r3]
  00db0	e2832001	 add         r2, r3, #1
  00db4	e59d308c	 ldr         r3, [sp, #0x8C]
  00db8	e2833f6e	 add         r3, r3, #0x6E, 30
  00dbc	e5832000	 str         r2, [r3]
  00dc0	e59d2010	 ldr         r2, [sp, #0x10]
  00dc4	e3a03000	 mov         r3, #0
  00dc8	e5823000	 str         r3, [r2]
  00dcc		 |$LN13@NICInitRec|

; 343  : 
; 344  :         NDIS_SET_PACKET_HEADER_SIZE((PNDIS_PACKET)pCurPkt->m_PktHandle, EMAC_HEADER_SIZE);

  00dcc	e59d3010	 ldr         r3, [sp, #0x10]
  00dd0	e2831004	 add         r1, r3, #4
  00dd4	e59d3010	 ldr         r3, [sp, #0x10]
  00dd8	e2833004	 add         r3, r3, #4
  00ddc	e5933000	 ldr         r3, [r3]
  00de0	e283301e	 add         r3, r3, #0x1E
  00de4	e1d330b0	 ldrh        r3, [r3]
  00de8	e1a02003	 mov         r2, r3
  00dec	e5913000	 ldr         r3, [r1]
  00df0	e0833002	 add         r3, r3, r2
  00df4	e2832010	 add         r2, r3, #0x10
  00df8	e3a0300e	 mov         r3, #0xE
  00dfc	e5823000	 str         r3, [r2]

; 345  : 
; 346  :         pNextPkt++;

  00e00	e59d3018	 ldr         r3, [sp, #0x18]
  00e04	e2833014	 add         r3, r3, #0x14
  00e08	e58d3018	 str         r3, [sp, #0x18]

; 347  :         pCurPkt->m_pNext  = pNextPkt;

  00e0c	e59d2018	 ldr         r2, [sp, #0x18]
  00e10	e59d3010	 ldr         r3, [sp, #0x10]
  00e14	e5832000	 str         r2, [r3]

; 348  :     }

  00e18	eaffffa4	 b           |$LN16@NICInitRec|
  00e1c		 |$LN15@NICInitRec|

; 349  : 
; 350  :     pCurPkt->m_pNext=0;

  00e1c	e59d2010	 ldr         r2, [sp, #0x10]
  00e20	e3a03000	 mov         r3, #0
  00e24	e5823000	 str         r3, [r2]

; 351  : 
; 352  :     if(Count != pAdapter->m_NumRxIndicatePkts)

  00e28	e1dd31b4	 ldrh        r3, [sp, #0x14]
  00e2c	e1a02003	 mov         r2, r3
  00e30	e59d308c	 ldr         r3, [sp, #0x8C]
  00e34	e2833024	 add         r3, r3, #0x24
  00e38	e1d330b0	 ldrh        r3, [r3]
  00e3c	e1520003	 cmp         r2, r3
  00e40	0a000002	 beq         |$LN10@NICInitRec|

; 353  :     {
; 354  :         return Status;

  00e44	e59d301c	 ldr         r3, [sp, #0x1C]
  00e48	e58d3030	 str         r3, [sp, #0x30]
  00e4c	ea0000cd	 b           |$LN24@NICInitRec|
  00e50		 |$LN10@NICInitRec|

; 355  :     }
; 356  : 
; 357  :     DEBUGMSG (DBG_INFO,(L"+pAdapter->m_RxPktPool.Head %x\r\npAdapter->m_RxPktPool.Tail %x\r\npAdapter->m_RxPktPool.Count %x \r\n",
; 358  :         pAdapter->m_RxPktPool.m_pHead,  pAdapter->m_RxPktPool.m_pTail,pAdapter->m_RxPktPool.m_Count));

  00e50	e59f3344	 ldr         r3, [pc, #0x344]
  00e54	e5933440	 ldr         r3, [r3, #0x440]
  00e58	e3130040	 tst         r3, #0x40
  00e5c	0a00000d	 beq         |$LN40@NICInitRec|
  00e60	e59d308c	 ldr         r3, [sp, #0x8C]
  00e64	e2833f6e	 add         r3, r3, #0x6E, 30
  00e68	e5933000	 ldr         r3, [r3]
  00e6c	e59d208c	 ldr         r2, [sp, #0x8C]
  00e70	e2822f6d	 add         r2, r2, #0x6D, 30
  00e74	e5922000	 ldr         r2, [r2]
  00e78	e59d108c	 ldr         r1, [sp, #0x8C]
  00e7c	e2811e1b	 add         r1, r1, #0x1B, 28
  00e80	e5911000	 ldr         r1, [r1]
  00e84	e59f031c	 ldr         r0, [pc, #0x31C]
  00e88	eb000000	 bl          NKDbgPrintfW
  00e8c	e3a03001	 mov         r3, #1
  00e90	e58d3074	 str         r3, [sp, #0x74]
  00e94	ea000001	 b           |$LN41@NICInitRec|
  00e98		 |$LN40@NICInitRec|
  00e98	e3a03000	 mov         r3, #0
  00e9c	e58d3074	 str         r3, [sp, #0x74]
  00ea0		 |$LN41@NICInitRec|

; 359  : 
; 360  :     /* Allocate  the receive buffer pool */
; 361  :     NdisAllocateBufferPool( &Status,
; 362  :                             &pAdapter->m_RecvBufferPool,
; 363  :                             pAdapter->m_NumEmacRxBufDesc
; 364  :                           );

  00ea0	e59d308c	 ldr         r3, [sp, #0x8C]
  00ea4	e2833026	 add         r3, r3, #0x26
  00ea8	e1d320b0	 ldrh        r2, [r3]
  00eac	e59d308c	 ldr         r3, [sp, #0x8C]
  00eb0	e2831020	 add         r1, r3, #0x20
  00eb4	e28d001c	 add         r0, sp, #0x1C
  00eb8	eb000000	 bl          NdisAllocateBufferPool

; 365  :     if (Status != NDIS_STATUS_SUCCESS)

  00ebc	e59d301c	 ldr         r3, [sp, #0x1C]
  00ec0	e3530000	 cmp         r3, #0
  00ec4	0a00000d	 beq         |$LN9@NICInitRec|

; 366  :     {
; 367  :         DEBUGMSG(DBG_ERR, (L"NdisAllocateBufferPool failed\r\n"));

  00ec8	e59f32cc	 ldr         r3, [pc, #0x2CC]
  00ecc	e5933440	 ldr         r3, [r3, #0x440]
  00ed0	e3130902	 tst         r3, #2, 18
  00ed4	0a000004	 beq         |$LN42@NICInitRec|
  00ed8	e59f02c4	 ldr         r0, [pc, #0x2C4]
  00edc	eb000000	 bl          NKDbgPrintfW
  00ee0	e3a03001	 mov         r3, #1
  00ee4	e58d3078	 str         r3, [sp, #0x78]
  00ee8	ea000001	 b           |$LN43@NICInitRec|
  00eec		 |$LN42@NICInitRec|
  00eec	e3a03000	 mov         r3, #0
  00ef0	e58d3078	 str         r3, [sp, #0x78]
  00ef4		 |$LN43@NICInitRec|

; 368  :         return Status;

  00ef4	e59d301c	 ldr         r3, [sp, #0x1C]
  00ef8	e58d3030	 str         r3, [sp, #0x30]
  00efc	ea0000a1	 b           |$LN24@NICInitRec|
  00f00		 |$LN9@NICInitRec|

; 369  :     }
; 370  :     pNextBuf = pAdapter->m_pBaseRxBufs;

  00f00	e59d308c	 ldr         r3, [sp, #0x8C]
  00f04	e2833030	 add         r3, r3, #0x30
  00f08	e5933000	 ldr         r3, [r3]
  00f0c	e58d3008	 str         r3, [sp, #8]

; 371  : 
; 372  :     RcvBufLogical   = pAdapter->m_RxBufsBase;

  00f10	e59d308c	 ldr         r3, [sp, #0x8C]
  00f14	e283303c	 add         r3, r3, #0x3C
  00f18	e5933000	 ldr         r3, [r3]
  00f1c	e58d3020	 str         r3, [sp, #0x20]

; 373  :     RcvBufPhysical =  NdisGetPhysicalAddressLow(pAdapter->m_RxBufsBasePa);

  00f20	e59d308c	 ldr         r3, [sp, #0x8C]
  00f24	e2833040	 add         r3, r3, #0x40
  00f28	e5933000	 ldr         r3, [r3]
  00f2c	e58d3028	 str         r3, [sp, #0x28]

; 374  : 
; 375  :     QUEUE_INIT(&pAdapter->m_RxBufsPool);

  00f30	e59d308c	 ldr         r3, [sp, #0x8C]
  00f34	e2832f6f	 add         r2, r3, #0x6F, 30
  00f38	e3a03000	 mov         r3, #0
  00f3c	e5823000	 str         r3, [r2]
  00f40	e59d308c	 ldr         r3, [sp, #0x8C]
  00f44	e2832d07	 add         r2, r3, #7, 26
  00f48	e3a03000	 mov         r3, #0
  00f4c	e5823000	 str         r3, [r2]
  00f50	e59d308c	 ldr         r3, [sp, #0x8C]
  00f54	e2832f71	 add         r2, r3, #0x71, 30
  00f58	e3a03000	 mov         r3, #0
  00f5c	e5823000	 str         r3, [r2]

; 376  : 
; 377  : 
; 378  :     for (Count = 0; Count < pAdapter->m_NumEmacRxBufDesc ; Count++)

  00f60	e3a03000	 mov         r3, #0
  00f64	e1cd31b4	 strh        r3, [sp, #0x14]
  00f68	ea000004	 b           |$LN8@NICInitRec|
  00f6c		 |$LN7@NICInitRec|
  00f6c	e1dd31b4	 ldrh        r3, [sp, #0x14]
  00f70	e2833001	 add         r3, r3, #1
  00f74	e1a03803	 mov         r3, r3, lsl #16
  00f78	e1a03823	 mov         r3, r3, lsr #16
  00f7c	e1cd31b4	 strh        r3, [sp, #0x14]
  00f80		 |$LN8@NICInitRec|
  00f80	e1dd31b4	 ldrh        r3, [sp, #0x14]
  00f84	e1a02003	 mov         r2, r3
  00f88	e59d308c	 ldr         r3, [sp, #0x8C]
  00f8c	e2833026	 add         r3, r3, #0x26
  00f90	e1d330b0	 ldrh        r3, [r3]
  00f94	e1520003	 cmp         r2, r3
  00f98	aa00005f	 bge         |$LN6@NICInitRec|

; 379  :     {
; 380  :         pCurBuf = pNextBuf;

  00f9c	e59d3008	 ldr         r3, [sp, #8]
  00fa0	e58d3024	 str         r3, [sp, #0x24]

; 381  : 
; 382  :         pCurBuf->m_BufLogicalAddress  = RcvBufLogical;

  00fa4	e59d3024	 ldr         r3, [sp, #0x24]
  00fa8	e2832008	 add         r2, r3, #8
  00fac	e59d3020	 ldr         r3, [sp, #0x20]
  00fb0	e5823000	 str         r3, [r2]

; 383  :         pCurBuf->m_BufPhysicalAddress = RcvBufPhysical;

  00fb4	e59d3024	 ldr         r3, [sp, #0x24]
  00fb8	e283200c	 add         r2, r3, #0xC
  00fbc	e59d3028	 ldr         r3, [sp, #0x28]
  00fc0	e5823000	 str         r3, [r2]

; 384  : 
; 385  :         /* point our buffer for receives at this Rfd */
; 386  :         NdisAllocateBuffer(&Status,
; 387  :                             (PNDIS_BUFFER *)&pCurBuf->m_BufHandle,
; 388  :                             pAdapter->m_RecvBufferPool,
; 389  :                             (PVOID)pCurBuf->m_BufLogicalAddress,
; 390  :                             EMAC_MAX_PKT_BUFFER_SIZE);

  00fc4	e3a03c06	 mov         r3, #6, 24
  00fc8	e58d3000	 str         r3, [sp]
  00fcc	e59d3024	 ldr         r3, [sp, #0x24]
  00fd0	e2833008	 add         r3, r3, #8
  00fd4	e5933000	 ldr         r3, [r3]
  00fd8	e59d208c	 ldr         r2, [sp, #0x8C]
  00fdc	e2822020	 add         r2, r2, #0x20
  00fe0	e5922000	 ldr         r2, [r2]
  00fe4	e59d1024	 ldr         r1, [sp, #0x24]
  00fe8	e2811004	 add         r1, r1, #4
  00fec	e28d001c	 add         r0, sp, #0x1C
  00ff0	eb000000	 bl          NdisAllocateBuffer

; 391  : 
; 392  :         if (Status != NDIS_STATUS_SUCCESS)

  00ff4	e59d301c	 ldr         r3, [sp, #0x1C]
  00ff8	e3530000	 cmp         r3, #0
  00ffc	0a00000b	 beq         |$LN5@NICInitRec|

; 393  :         {
; 394  : 
; 395  :             DEBUGMSG(DBG_ERR,(L" NdisAllocateBuffer Unsucessful\r\n"));

  01000	e59f3194	 ldr         r3, [pc, #0x194]
  01004	e5933440	 ldr         r3, [r3, #0x440]
  01008	e3130902	 tst         r3, #2, 18
  0100c	0a000004	 beq         |$LN44@NICInitRec|
  01010	e59f0188	 ldr         r0, [pc, #0x188]
  01014	eb000000	 bl          NKDbgPrintfW
  01018	e3a03001	 mov         r3, #1
  0101c	e58d307c	 str         r3, [sp, #0x7C]
  01020	ea000001	 b           |$LN45@NICInitRec|
  01024		 |$LN44@NICInitRec|
  01024	e3a03000	 mov         r3, #0
  01028	e58d307c	 str         r3, [sp, #0x7C]
  0102c		 |$LN45@NICInitRec|

; 396  :             break;

  0102c	ea00003a	 b           |$LN6@NICInitRec|
  01030		 |$LN5@NICInitRec|

; 397  :         }
; 398  :         /* Assigning the EMAC buffer descriptors virtual and physical
; 399  :         * addressses as well
; 400  :         */
; 401  :         pCurBuf->m_EmacBufDes   = EmacRcvBufDesBase;

  01030	e59d3024	 ldr         r3, [sp, #0x24]
  01034	e2832010	 add         r2, r3, #0x10
  01038	e59d300c	 ldr         r3, [sp, #0xC]
  0103c	e5823000	 str         r3, [r2]

; 402  :         pCurBuf->m_EmacBufDesPa = EmacRcvBufDesBasePa;

  01040	e59d3024	 ldr         r3, [sp, #0x24]
  01044	e2832014	 add         r2, r3, #0x14
  01048	e59d302c	 ldr         r3, [sp, #0x2C]
  0104c	e5823000	 str         r3, [r2]

; 403  : 
; 404  :         /* we will also set up correspondinf EMAC buffer descriptors virtual as
; 405  :         * well as physical
; 406  :         */
; 407  : 
; 408  :         RcvBufLogical += EMAC_MAX_PKT_BUFFER_SIZE;

  01050	e59d3020	 ldr         r3, [sp, #0x20]
  01054	e2833c06	 add         r3, r3, #6, 24
  01058	e58d3020	 str         r3, [sp, #0x20]

; 409  :         RcvBufPhysical += EMAC_MAX_PKT_BUFFER_SIZE;

  0105c	e59d3028	 ldr         r3, [sp, #0x28]
  01060	e2833c06	 add         r3, r3, #6, 24
  01064	e58d3028	 str         r3, [sp, #0x28]

; 410  : 
; 411  :         EmacRcvBufDesBase += sizeof(EMAC_DESC);

  01068	e59d300c	 ldr         r3, [sp, #0xC]
  0106c	e2833010	 add         r3, r3, #0x10
  01070	e58d300c	 str         r3, [sp, #0xC]

; 412  :         EmacRcvBufDesBasePa += sizeof(EMAC_DESC);

  01074	e59d302c	 ldr         r3, [sp, #0x2C]
  01078	e2833010	 add         r3, r3, #0x10
  0107c	e58d302c	 str         r3, [sp, #0x2C]

; 413  : 
; 414  :         pNextBuf++;

  01080	e59d3008	 ldr         r3, [sp, #8]
  01084	e2833018	 add         r3, r3, #0x18
  01088	e58d3008	 str         r3, [sp, #8]

; 415  : 
; 416  :         QUEUE_INSERT(&pAdapter->m_RxBufsPool,pCurBuf);

  0108c	e59d308c	 ldr         r3, [sp, #0x8C]
  01090	e2933f6f	 adds        r3, r3, #0x6F, 30
  01094	0a00001f	 beq         |$LN4@NICInitRec|
  01098	e59d3024	 ldr         r3, [sp, #0x24]
  0109c	e3530000	 cmp         r3, #0
  010a0	0a00001c	 beq         |$LN4@NICInitRec|
  010a4	e59d308c	 ldr         r3, [sp, #0x8C]
  010a8	e2833f6f	 add         r3, r3, #0x6F, 30
  010ac	e5933000	 ldr         r3, [r3]
  010b0	e3530000	 cmp         r3, #0
  010b4	1a000004	 bne         |$LN3@NICInitRec|
  010b8	e59d308c	 ldr         r3, [sp, #0x8C]
  010bc	e2832f6f	 add         r2, r3, #0x6F, 30
  010c0	e59d3024	 ldr         r3, [sp, #0x24]
  010c4	e5823000	 str         r3, [r2]
  010c8	ea000004	 b           |$LN2@NICInitRec|
  010cc		 |$LN3@NICInitRec|
  010cc	e59d308c	 ldr         r3, [sp, #0x8C]
  010d0	e2833d07	 add         r3, r3, #7, 26
  010d4	e5932000	 ldr         r2, [r3]
  010d8	e59d3024	 ldr         r3, [sp, #0x24]
  010dc	e5823000	 str         r3, [r2]
  010e0		 |$LN2@NICInitRec|
  010e0	e59d308c	 ldr         r3, [sp, #0x8C]
  010e4	e2832d07	 add         r2, r3, #7, 26
  010e8	e59d3024	 ldr         r3, [sp, #0x24]
  010ec	e5823000	 str         r3, [r2]
  010f0	e59d308c	 ldr         r3, [sp, #0x8C]
  010f4	e2833f71	 add         r3, r3, #0x71, 30
  010f8	e5933000	 ldr         r3, [r3]
  010fc	e2832001	 add         r2, r3, #1
  01100	e59d308c	 ldr         r3, [sp, #0x8C]
  01104	e2833f71	 add         r3, r3, #0x71, 30
  01108	e5832000	 str         r2, [r3]
  0110c	e59d2024	 ldr         r2, [sp, #0x24]
  01110	e3a03000	 mov         r3, #0
  01114	e5823000	 str         r3, [r2]
  01118		 |$LN4@NICInitRec|

; 417  : 
; 418  :      }

  01118	eaffff93	 b           |$LN7@NICInitRec|
  0111c		 |$LN6@NICInitRec|

; 419  :         pCurBuf->m_pNext=0;

  0111c	e59d2024	 ldr         r2, [sp, #0x24]
  01120	e3a03000	 mov         r3, #0
  01124	e5823000	 str         r3, [r2]

; 420  : 
; 421  :     if(Count != pAdapter->m_NumEmacRxBufDesc)

  01128	e1dd31b4	 ldrh        r3, [sp, #0x14]
  0112c	e1a02003	 mov         r2, r3
  01130	e59d308c	 ldr         r3, [sp, #0x8C]
  01134	e2833026	 add         r3, r3, #0x26
  01138	e1d330b0	 ldrh        r3, [r3]
  0113c	e1520003	 cmp         r2, r3
  01140	0a000002	 beq         |$LN1@NICInitRec|

; 422  :     {
; 423  :         return Status;

  01144	e59d301c	 ldr         r3, [sp, #0x1C]
  01148	e58d3030	 str         r3, [sp, #0x30]
  0114c	ea00000d	 b           |$LN24@NICInitRec|
  01150		 |$LN1@NICInitRec|

; 424  :     }
; 425  :     DEBUGMSG(DBG_FUNC, (L"<-- NICInitRecv, Status=%x\r\n", Status));

  01150	e59f3044	 ldr         r3, [pc, #0x44]
  01154	e5933440	 ldr         r3, [r3, #0x440]
  01158	e3130080	 tst         r3, #0x80
  0115c	0a000005	 beq         |$LN46@NICInitRec|
  01160	e59d101c	 ldr         r1, [sp, #0x1C]
  01164	e59f002c	 ldr         r0, [pc, #0x2C]
  01168	eb000000	 bl          NKDbgPrintfW
  0116c	e3a03001	 mov         r3, #1
  01170	e58d3080	 str         r3, [sp, #0x80]
  01174	ea000001	 b           |$LN47@NICInitRec|
  01178		 |$LN46@NICInitRec|
  01178	e3a03000	 mov         r3, #0
  0117c	e58d3080	 str         r3, [sp, #0x80]
  01180		 |$LN47@NICInitRec|

; 426  : 
; 427  :     return Status;

  01180	e59d301c	 ldr         r3, [sp, #0x1C]
  01184	e58d3030	 str         r3, [sp, #0x30]
  01188		 |$LN24@NICInitRec|

; 428  : }

  01188	e59d0030	 ldr         r0, [sp, #0x30]
  0118c	e28dd084	 add         sp, sp, #0x84
  01190	e89d6000	 ldmia       sp, {sp, lr}
  01194	e12fff1e	 bx          lr
  01198		 |$LN51@NICInitRec|
  01198		 |$LN52@NICInitRec|
  01198	00000000	 DCD         |??_C@_1DK@BKEPHKB@?$AA?$DM?$AA?9?$AA?9?$AA?5?$AAN?$AAI?$AAC?$AAI?$AAn?$AAi?$AAt?$AAR?$AAe?$AAc?$AAv?$AA?0?$AA?5?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?$DN?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  0119c		 |$LN53@NICInitRec|
  0119c	00000000	 DCD         |dpCurSettings|
  011a0		 |$LN54@NICInitRec|
  011a0	00000000	 DCD         |??_C@_1EE@JOEBELJD@?$AA?5?$AAN?$AAd?$AAi?$AAs?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?5?$AAU?$AAn?$AAs?$AAu?$AAc?$AAe?$AAs?$AAs?$AAf?$AAu?$AAl?$AA?$AN@|
  011a4		 |$LN55@NICInitRec|
  011a4	00000000	 DCD         |??_C@_1EA@HJJLOBMN@?$AAN?$AAd?$AAi?$AAs?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AAP?$AAo?$AAo?$AAl?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  011a8		 |$LN56@NICInitRec|
  011a8	00000000	 DCD         |??_C@_1MC@LHFAFGGE@?$AA?$CL?$AAp?$AAA?$AAd?$AAa?$AAp?$AAt?$AAe?$AAr?$AA?9?$AA?$DO?$AAm?$AA_?$AAR?$AAx?$AAP?$AAk?$AAt?$AAP?$AAo?$AAo?$AAl?$AA?4?$AAH?$AAe?$AAa?$AAd?$AA?5?$AA?$CF?$AAx?$AA?$AN?$AA?6@|
  011ac		 |$LN57@NICInitRec|
  011ac	00000000	 DCD         |??_C@_1EE@HCOEEHPL@?$AA?5?$AAN?$AAd?$AAi?$AAs?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?5?$AAU?$AAn?$AAs?$AAu?$AAc?$AAe?$AAs?$AAs?$AAf?$AAu?$AAl?$AA?$AN@|
  011b0		 |$LN58@NICInitRec|
  011b0	00000000	 DCD         |??_C@_1EA@ILAMJCPH@?$AAN?$AAd?$AAi?$AAs?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AAP?$AAo?$AAo?$AAl?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  011b4		 |$LN59@NICInitRec|
  011b4	00000000	 DCD         |g_EmacMemLayout|
  011b8		 |$LN60@NICInitRec|
  011b8	00000000	 DCD         |??_C@_1HG@FJHNBMJL@?$AAA?$AAp?$AAt?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAp?$AA?5?$AAN?$AAd?$AAi?$AAs?$AAM?$AAM?$AAa?$AAp?$AAI?$AAo?$AAS?$AAp?$AAa?$AAc?$AAe?$AA?5?$AAR@|
  011bc		 |$LN61@NICInitRec|
  011bc	00000000	 DCD         |??_C@_1DC@DOMEHKHN@?$AAN?$AAd?$AAi?$AAs?$AAM?$AAM?$AAa?$AAp?$AAI?$AAo?$AAS?$AAp?$AAa?$AAc?$AAe?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  011c0		 |$LN62@NICInitRec|
  011c0	00000000	 DCD         |??_C@_1EE@FNBIODFC@?$AA?5?$AAN?$AAd?$AAi?$AAs?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAM?$AAe?$AAm?$AAo?$AAr?$AAy?$AA?5?$AAU?$AAn?$AAs?$AAu?$AAc?$AAe?$AAs?$AAs?$AAf?$AAu?$AAl?$AA?$AN@|
  011c4		 |$LN63@NICInitRec|
  011c4	00000000	 DCD         |g_HighestAcceptedMax|
  011c8		 |$LN64@NICInitRec|
  011c8	00000000	 DCD         |??_C@_1CI@JKJJHEAG@?$AA?9?$AA?9?$AA?9?$AA?$DO?$AA?5?$AAN?$AAI?$AAC?$AAI?$AAn?$AAi?$AAt?$AAR?$AAe?$AAc?$AAv?$AA?5?$AA?$AN?$AA?6?$AA?$AA@|
  011cc		 |$M50659|

			 ENDP  ; |NICInitRecv|

	EXPORT	|??_C@_1CM@BAKPAFPM@?$AA?9?$AAE?$AAM?$AAA?$AAC?$AAM?$AAo?$AAd?$AAS?$AAt?$AAa?$AAt?$AAe?$AAC?$AAh?$AAa?$AAn?$AAg?$AAe?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CM@OMFPJELA@?$AA?$CL?$AAE?$AAM?$AAA?$AAC?$AAM?$AAo?$AAd?$AAS?$AAt?$AAa?$AAt?$AAe?$AAC?$AAh?$AAa?$AAn?$AAg?$AAe?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|EMACModStateChange|
	IMPORT	|EnableDeviceClocks|
	IMPORT	|SocResetEmac|

  00018			 AREA	 |.pdata|, PDATA
|$T50681| DCD	|$LN10@EMACModSta|
	DCD	0x40002804

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@BAKPAFPM@?$AA?9?$AAE?$AAM?$AAA?$AAC?$AAM?$AAo?$AAd?$AAS?$AAt?$AAa?$AAt?$AAe?$AAC?$AAh?$AAa?$AAn?$AAg?$AAe?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "E", 0x0, "M", 0x0, "A", 0x0, "C", 0x0, "M", 0x0, "o"
	DCB	0x0, "d", 0x0, "S", 0x0, "t", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, "C", 0x0, "h", 0x0, "a", 0x0, "n", 0x0, "g", 0x0, "e"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@OMFPJELA@?$AA?$CL?$AAE?$AAM?$AAA?$AAC?$AAM?$AAo?$AAd?$AAS?$AAt?$AAa?$AAt?$AAe?$AAC?$AAh?$AAa?$AAn?$AAg?$AAe?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "E", 0x0, "M", 0x0, "A", 0x0, "C", 0x0, "M", 0x0, "o"
	DCB	0x0, "d", 0x0, "S", 0x0, "t", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, "C", 0x0, "h", 0x0, "a", 0x0, "n", 0x0, "g", 0x0, "e"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  011cc			 AREA	 |.text|, CODE, ARM

  011cc		 |EMACModStateChange| PROC

; 441  : {

  011cc		 |$LN10@EMACModSta|
  011cc	e1a0c00d	 mov         r12, sp
  011d0	e92d0003	 stmdb       sp!, {r0, r1}
  011d4	e92d5000	 stmdb       sp!, {r12, lr}
  011d8	e24dd008	 sub         sp, sp, #8
  011dc		 |$M50678|

; 442  :     DEBUGMSG(TRUE, (L"+EMACModStateChange\r\n"));

  011dc	e59f0084	 ldr         r0, [pc, #0x84]
  011e0	eb000000	 bl          NKDbgPrintfW

; 443  :  
; 444  :     switch (ModState)

  011e4	e59d3014	 ldr         r3, [sp, #0x14]
  011e8	e58d3004	 str         r3, [sp, #4]
  011ec	e59d3004	 ldr         r3, [sp, #4]
  011f0	e3530000	 cmp         r3, #0
  011f4	0a000006	 beq         |$LN3@EMACModSta|
  011f8	e59d3004	 ldr         r3, [sp, #4]
  011fc	e3530001	 cmp         r3, #1
  01200	0a000008	 beq         |$LN2@EMACModSta|
  01204	e59d3004	 ldr         r3, [sp, #4]
  01208	e3530002	 cmp         r3, #2
  0120c	0a000009	 beq         |$LN1@EMACModSta|
  01210	ea00000b	 b           |$LN4@EMACModSta|
  01214		 |$LN3@EMACModSta|

; 445  :     {   
; 446  :     case SYNCRST:
; 447  :         SocResetEmac();

  01214	eb000000	 bl          SocResetEmac

; 448  :         EnableDeviceClocks(device,TRUE);

  01218	e3a01001	 mov         r1, #1
  0121c	e59d0010	 ldr         r0, [sp, #0x10]
  01220	eb000000	 bl          EnableDeviceClocks

; 449  :         break;

  01224	ea000006	 b           |$LN4@EMACModSta|
  01228		 |$LN2@EMACModSta|

; 450  :     case ENABLED:
; 451  :         EnableDeviceClocks(device,TRUE);

  01228	e3a01001	 mov         r1, #1
  0122c	e59d0010	 ldr         r0, [sp, #0x10]
  01230	eb000000	 bl          EnableDeviceClocks

; 452  :         break;

  01234	ea000002	 b           |$LN4@EMACModSta|
  01238		 |$LN1@EMACModSta|

; 453  :     case DISABLED:
; 454  :         EnableDeviceClocks(device,FALSE);

  01238	e3a01000	 mov         r1, #0
  0123c	e59d0010	 ldr         r0, [sp, #0x10]
  01240	eb000000	 bl          EnableDeviceClocks
  01244		 |$LN4@EMACModSta|

; 455  :         break;
; 456  :     }
; 457  : 
; 458  :     DEBUGMSG(TRUE, ( L"-EMACModStateChange\r\n" ));

  01244	e59f0018	 ldr         r0, [pc, #0x18]
  01248	eb000000	 bl          NKDbgPrintfW

; 459  : 
; 460  :     return (TRUE);

  0124c	e3a03001	 mov         r3, #1
  01250	e58d3000	 str         r3, [sp]

; 461  : }

  01254	e59d0000	 ldr         r0, [sp]
  01258	e28dd008	 add         sp, sp, #8
  0125c	e89d6000	 ldmia       sp, {sp, lr}
  01260	e12fff1e	 bx          lr
  01264		 |$LN11@EMACModSta|
  01264		 |$LN12@EMACModSta|
  01264	00000000	 DCD         |??_C@_1CM@BAKPAFPM@?$AA?9?$AAE?$AAM?$AAA?$AAC?$AAM?$AAo?$AAd?$AAS?$AAt?$AAa?$AAt?$AAe?$AAC?$AAh?$AAa?$AAn?$AAg?$AAe?$AA?$AN?$AA?6?$AA?$AA@|
  01268		 |$LN13@EMACModSta|
  01268	00000000	 DCD         |??_C@_1CM@OMFPJELA@?$AA?$CL?$AAE?$AAM?$AAA?$AAC?$AAM?$AAo?$AAd?$AAS?$AAt?$AAa?$AAt?$AAe?$AAC?$AAh?$AAa?$AAn?$AAg?$AAe?$AA?$AN?$AA?6?$AA?$AA@|
  0126c		 |$M50679|

			 ENDP  ; |EMACModStateChange|

	EXPORT	|??_C@_1EO@ECEMODIK@?$AA?$DM?$AA?9?$AA?9?$AA?5?$AAN?$AAI?$AAC?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAA?$AAd?$AAa?$AAp?$AAt?$AAe?$AAr?$AA?0?$AA?5?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GA@DMJNDCLN@?$AAN?$AAI?$AAC?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAA?$AAd?$AAa?$AAp?$AAt?$AAe?$AAr?$AA?3?$AA?5?$AAp?$AAM?$AAd?$AAi?$AAo?$AAR?$AAe?$AAg?$AAs?$AA?9@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GO@NFNAAJCJ@?$AAN?$AAI?$AAC?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAA?$AAd?$AAa?$AAp?$AAt?$AAe?$AAr?$AA?3?$AA?5?$AAw?$AAa?$AAi?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAf?$AAo@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DI@DIHNALDI@?$AA?9?$AA?9?$AA?$DO?$AA?5?$AAN?$AAI?$AAC?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAA?$AAd?$AAa?$AAp?$AAt?$AAe?$AAr?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|NICInitializeAdapter|
	IMPORT	|EmacEnableInterrupts|
	IMPORT	|PhyFindLink|
	IMPORT	|NdisMSleep|
	IMPORT	|__rt_udiv|

  00020			 AREA	 |.pdata|, PDATA
|$T50695| DCD	|$LN41@NICInitial|
	DCD	0x40023104

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EO@ECEMODIK@?$AA?$DM?$AA?9?$AA?9?$AA?5?$AAN?$AAI?$AAC?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAA?$AAd?$AAa?$AAp?$AAt?$AAe?$AAr?$AA?0?$AA?5?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs@| DCB "<"
	DCB	0x0, "-", 0x0, "-", 0x0, " ", 0x0, "N", 0x0, "I", 0x0, "C"
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a"
	DCB	0x0, "l", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, "A", 0x0, "d"
	DCB	0x0, "a", 0x0, "p", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, ","
	DCB	0x0, " ", 0x0, "S", 0x0, "t", 0x0, "a", 0x0, "t", 0x0, "u"
	DCB	0x0, "s", 0x0, "=", 0x0, "%", 0x0, "x", 0x0, " ", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GA@DMJNDCLN@?$AAN?$AAI?$AAC?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAA?$AAd?$AAa?$AAp?$AAt?$AAe?$AAr?$AA?3?$AA?5?$AAp?$AAM?$AAd?$AAi?$AAo?$AAR?$AAe?$AAg?$AAs?$AA?9@| DCB "N"
	DCB	0x0, "I", 0x0, "C", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t"
	DCB	0x0, "i", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "z", 0x0, "e"
	DCB	0x0, "A", 0x0, "d", 0x0, "a", 0x0, "p", 0x0, "t", 0x0, "e"
	DCB	0x0, "r", 0x0, ":", 0x0, " ", 0x0, "p", 0x0, "M", 0x0, "d"
	DCB	0x0, "i", 0x0, "o", 0x0, "R", 0x0, "e", 0x0, "g", 0x0, "s"
	DCB	0x0, "-", 0x0, ">", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "V"
	DCB	0x0, "E", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GO@NFNAAJCJ@?$AAN?$AAI?$AAC?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAA?$AAd?$AAa?$AAp?$AAt?$AAe?$AAr?$AA?3?$AA?5?$AAw?$AAa?$AAi?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAf?$AAo@| DCB "N"
	DCB	0x0, "I", 0x0, "C", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t"
	DCB	0x0, "i", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "z", 0x0, "e"
	DCB	0x0, "A", 0x0, "d", 0x0, "a", 0x0, "p", 0x0, "t", 0x0, "e"
	DCB	0x0, "r", 0x0, ":", 0x0, " ", 0x0, "w", 0x0, "a", 0x0, "i"
	DCB	0x0, "t", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, " ", 0x0, "f"
	DCB	0x0, "o", 0x0, "r", 0x0, " ", 0x0, "a", 0x0, "c", 0x0, "t"
	DCB	0x0, "i", 0x0, "v", 0x0, "e", 0x0, " ", 0x0, "p", 0x0, "h"
	DCB	0x0, "y", 0x0, ".", 0x0, ".", 0x0, ".", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DI@DIHNALDI@?$AA?9?$AA?9?$AA?$DO?$AA?5?$AAN?$AAI?$AAC?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAA?$AAd?$AAa?$AAp?$AAt?$AAe?$AAr?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "-", 0x0, ">", 0x0, " ", 0x0, "N", 0x0, "I", 0x0, "C"
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a"
	DCB	0x0, "l", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, "A", 0x0, "d"
	DCB	0x0, "a", 0x0, "p", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, " "
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  0126c			 AREA	 |.text|, CODE, ARM

  0126c		 |NICInitializeAdapter| PROC

; 475  : {

  0126c		 |$LN41@NICInitial|
  0126c	e1a0c00d	 mov         r12, sp
  01270	e92d0001	 stmdb       sp!, {r0}
  01274	e92d5000	 stmdb       sp!, {r12, lr}
  01278	e24dd048	 sub         sp, sp, #0x48
  0127c		 |$M50692|

; 476  :     NDIS_STATUS             Status = NDIS_STATUS_FAILURE;

  0127c	e3a03107	 mov         r3, #7, 2
  01280	e58d3018	 str         r3, [sp, #0x18]

; 477  :     PEMACREGS               pEmacRegs;
; 478  :     PEMACMDIOREGS           pMdioRegs;
; 479  :     PEMACCTRLREGS           pEmacCtlRegs;
; 480  :     PEMAC_RXBUFS            pEmacRxCur;
; 481  :     PEMAC_RXBUFS            pEmacRxNext;
; 482  :     PEMAC_TXBUF             pEmacTxCur;
; 483  :     PEMAC_TXBUF             pEmacTxNext;
; 484  :     PEMACDESC               pRxDesc;
; 485  :     PEMACDESC               pTxDesc;
; 486  :     UINT32*                 pu32RegPtr = NULL;

  01284	e3a03000	 mov         r3, #0
  01288	e58d3014	 str         r3, [sp, #0x14]

; 487  :     USHORT                  Count = 0;

  0128c	e3a03000	 mov         r3, #0
  01290	e1cd30b8	 strh        r3, [sp, #8]

; 488  :     UINT32                  clkdiv;
; 489  :     UINT32                  RetVal = 0;

  01294	e3a03000	 mov         r3, #0
  01298	e58d3000	 str         r3, [sp]

; 490  : 
; 491  :     DEBUGMSG(DBG_FUNC, (L"--> NICInitializeAdapter \r\n"));

  0129c	e59f3878	 ldr         r3, [pc, #0x878]
  012a0	e5933440	 ldr         r3, [r3, #0x440]
  012a4	e3130080	 tst         r3, #0x80
  012a8	0a000004	 beq         |$LN35@NICInitial|
  012ac	e59f0878	 ldr         r0, [pc, #0x878]
  012b0	eb000000	 bl          NKDbgPrintfW
  012b4	e3a03001	 mov         r3, #1
  012b8	e58d303c	 str         r3, [sp, #0x3C]
  012bc	ea000001	 b           |$LN36@NICInitial|
  012c0		 |$LN35@NICInitial|
  012c0	e3a03000	 mov         r3, #0
  012c4	e58d303c	 str         r3, [sp, #0x3C]
  012c8		 |$LN36@NICInitial|

; 492  : 
; 493  :     //Power ON EMAC
; 494  :     EMACModStateChange(pAdapter->m_device,ENABLED);

  012c8	e3a01001	 mov         r1, #1
  012cc	e59d3050	 ldr         r3, [sp, #0x50]
  012d0	e2833094	 add         r3, r3, #0x94
  012d4	e5930000	 ldr         r0, [r3]
  012d8	eb000000	 bl          EMACModStateChange

; 495  : 
; 496  :     pEmacRegs       = pAdapter->m_pEmacRegsBase;

  012dc	e59d3050	 ldr         r3, [sp, #0x50]
  012e0	e2833004	 add         r3, r3, #4
  012e4	e5933000	 ldr         r3, [r3]
  012e8	e58d3004	 str         r3, [sp, #4]

; 497  :     pMdioRegs       = pAdapter->m_pMdioRegsBase;

  012ec	e59d3050	 ldr         r3, [sp, #0x50]
  012f0	e2833010	 add         r3, r3, #0x10
  012f4	e5933000	 ldr         r3, [r3]
  012f8	e58d300c	 str         r3, [sp, #0xC]

; 498  :     pEmacCtlRegs    = pAdapter->m_pEmacCtlRegs;

  012fc	e59d3050	 ldr         r3, [sp, #0x50]
  01300	e2833008	 add         r3, r3, #8
  01304	e5933000	 ldr         r3, [r3]
  01308	e58d3010	 str         r3, [sp, #0x10]

; 499  : 
; 500  :     /*Issuing a reset to EMAC soft reset register and polling till we get 0. */
; 501  :     pEmacRegs->SOFTRESET = 1;

  0130c	e59d3004	 ldr         r3, [sp, #4]
  01310	e2832f5d	 add         r2, r3, #0x5D, 30
  01314	e3a03001	 mov         r3, #1
  01318	e5823000	 str         r3, [r2]
  0131c		 |$LN32@NICInitial|

; 502  :     while ( pEmacRegs->SOFTRESET != 0 )

  0131c	e59d3004	 ldr         r3, [sp, #4]
  01320	e2833f5d	 add         r3, r3, #0x5D, 30
  01324	e5933000	 ldr         r3, [r3]
  01328	e3530000	 cmp         r3, #0
  0132c	0a000000	 beq         |$LN31@NICInitial|

; 503  :     {
; 504  :     }

  01330	eafffff9	 b           |$LN32@NICInitial|
  01334		 |$LN31@NICInitial|

; 505  :     pEmacRegs->SOFTRESET = 1;

  01334	e59d3004	 ldr         r3, [sp, #4]
  01338	e2832f5d	 add         r2, r3, #0x5D, 30
  0133c	e3a03001	 mov         r3, #1
  01340	e5823000	 str         r3, [r2]
  01344		 |$LN30@NICInitial|

; 506  :     while ( pEmacRegs->SOFTRESET != 0 )

  01344	e59d3004	 ldr         r3, [sp, #4]
  01348	e2833f5d	 add         r3, r3, #0x5D, 30
  0134c	e5933000	 ldr         r3, [r3]
  01350	e3530000	 cmp         r3, #0
  01354	0a000000	 beq         |$LN29@NICInitial|

; 507  :     {
; 508  :     }

  01358	eafffff9	 b           |$LN30@NICInitial|
  0135c		 |$LN29@NICInitial|

; 509  : 
; 510  :     /* Clear MACCONTROL, RXCONTROL & TXCONTROL registers */
; 511  :     pEmacRegs->MACCONTROL = 0x0;

  0135c	e59d3004	 ldr         r3, [sp, #4]
  01360	e2832e16	 add         r2, r3, #0x16, 28
  01364	e3a03000	 mov         r3, #0
  01368	e5823000	 str         r3, [r2]

; 512  :     pEmacRegs->TXCONTROL  = 0x0;

  0136c	e59d3004	 ldr         r3, [sp, #4]
  01370	e2832004	 add         r2, r3, #4
  01374	e3a03000	 mov         r3, #0
  01378	e5823000	 str         r3, [r2]

; 513  :     pEmacRegs->RXCONTROL  = 0x0;

  0137c	e59d3004	 ldr         r3, [sp, #4]
  01380	e2832014	 add         r2, r3, #0x14
  01384	e3a03000	 mov         r3, #0
  01388	e5823000	 str         r3, [r2]

; 514  : 
; 515  :     /* Initialise the 8 Rx/Tx Header descriptor pointer registers */
; 516  :     pu32RegPtr  = (UINT32 *)&pEmacRegs->TX0HDP;

  0138c	e59d3004	 ldr         r3, [sp, #4]
  01390	e2833c06	 add         r3, r3, #6, 24
  01394	e58d3014	 str         r3, [sp, #0x14]

; 517  :     for (Count = 0; Count < EMAC_MAX_CHAN; Count++)

  01398	e3a03000	 mov         r3, #0
  0139c	e1cd30b8	 strh        r3, [sp, #8]
  013a0	ea000004	 b           |$LN28@NICInitial|
  013a4		 |$LN27@NICInitial|
  013a4	e1dd30b8	 ldrh        r3, [sp, #8]
  013a8	e2833001	 add         r3, r3, #1
  013ac	e1a03803	 mov         r3, r3, lsl #16
  013b0	e1a03823	 mov         r3, r3, lsr #16
  013b4	e1cd30b8	 strh        r3, [sp, #8]
  013b8		 |$LN28@NICInitial|
  013b8	e1dd30b8	 ldrh        r3, [sp, #8]
  013bc	e3530008	 cmp         r3, #8
  013c0	aa000006	 bge         |$LN26@NICInitial|

; 518  :     {
; 519  :         *pu32RegPtr ++ = 0;

  013c4	e59d2014	 ldr         r2, [sp, #0x14]
  013c8	e3a03000	 mov         r3, #0
  013cc	e5823000	 str         r3, [r2]
  013d0	e59d3014	 ldr         r3, [sp, #0x14]
  013d4	e2833004	 add         r3, r3, #4
  013d8	e58d3014	 str         r3, [sp, #0x14]

; 520  :     }

  013dc	eafffff0	 b           |$LN27@NICInitial|
  013e0		 |$LN26@NICInitial|

; 521  :     pu32RegPtr  = (UINT32 *)&pEmacRegs->RX0HDP;

  013e0	e59d3004	 ldr         r3, [sp, #4]
  013e4	e2833e62	 add         r3, r3, #0x62, 28
  013e8	e58d3014	 str         r3, [sp, #0x14]

; 522  :     for (Count = 0; Count < EMAC_MAX_CHAN; Count++)

  013ec	e3a03000	 mov         r3, #0
  013f0	e1cd30b8	 strh        r3, [sp, #8]
  013f4	ea000004	 b           |$LN25@NICInitial|
  013f8		 |$LN24@NICInitial|
  013f8	e1dd30b8	 ldrh        r3, [sp, #8]
  013fc	e2833001	 add         r3, r3, #1
  01400	e1a03803	 mov         r3, r3, lsl #16
  01404	e1a03823	 mov         r3, r3, lsr #16
  01408	e1cd30b8	 strh        r3, [sp, #8]
  0140c		 |$LN25@NICInitial|
  0140c	e1dd30b8	 ldrh        r3, [sp, #8]
  01410	e3530008	 cmp         r3, #8
  01414	aa000006	 bge         |$LN23@NICInitial|

; 523  :     {
; 524  :         *pu32RegPtr ++ = 0;

  01418	e59d2014	 ldr         r2, [sp, #0x14]
  0141c	e3a03000	 mov         r3, #0
  01420	e5823000	 str         r3, [r2]
  01424	e59d3014	 ldr         r3, [sp, #0x14]
  01428	e2833004	 add         r3, r3, #4
  0142c	e58d3014	 str         r3, [sp, #0x14]

; 525  :     }

  01430	eafffff0	 b           |$LN24@NICInitial|
  01434		 |$LN23@NICInitial|

; 526  :     /* Clear 36 Statics registers */
; 527  :     /* The statics registers start from RXGODFRAMES and continues for the next
; 528  :      * 36 DWORD locations.
; 529  :      */
; 530  :     pu32RegPtr  = (UINT32 *)&pEmacRegs->RXGOODFRAMES;

  01434	e59d3004	 ldr         r3, [sp, #4]
  01438	e2833c02	 add         r3, r3, #2, 24
  0143c	e58d3014	 str         r3, [sp, #0x14]

; 531  :     for (Count=0; Count < EMAC_STATS_REGS; Count++)

  01440	e3a03000	 mov         r3, #0
  01444	e1cd30b8	 strh        r3, [sp, #8]
  01448	ea000004	 b           |$LN22@NICInitial|
  0144c		 |$LN21@NICInitial|
  0144c	e1dd30b8	 ldrh        r3, [sp, #8]
  01450	e2833001	 add         r3, r3, #1
  01454	e1a03803	 mov         r3, r3, lsl #16
  01458	e1a03823	 mov         r3, r3, lsr #16
  0145c	e1cd30b8	 strh        r3, [sp, #8]
  01460		 |$LN22@NICInitial|
  01460	e1dd30b8	 ldrh        r3, [sp, #8]
  01464	e3530024	 cmp         r3, #0x24
  01468	aa000006	 bge         |$LN20@NICInitial|

; 532  :     {
; 533  :         *pu32RegPtr ++ = 0;

  0146c	e59d2014	 ldr         r2, [sp, #0x14]
  01470	e3a03000	 mov         r3, #0
  01474	e5823000	 str         r3, [r2]
  01478	e59d3014	 ldr         r3, [sp, #0x14]
  0147c	e2833004	 add         r3, r3, #4
  01480	e58d3014	 str         r3, [sp, #0x14]

; 534  :     }

  01484	eafffff0	 b           |$LN21@NICInitial|
  01488		 |$LN20@NICInitial|

; 535  : 
; 536  :     /* Setup the local MAC address for all 8 Rx Channels */
; 537  : 
; 538  :     for (Count=0; Count < EMAC_MAX_CHAN; Count++)

  01488	e3a03000	 mov         r3, #0
  0148c	e1cd30b8	 strh        r3, [sp, #8]
  01490	ea000004	 b           |$LN19@NICInitial|
  01494		 |$LN18@NICInitial|
  01494	e1dd30b8	 ldrh        r3, [sp, #8]
  01498	e2833001	 add         r3, r3, #1
  0149c	e1a03803	 mov         r3, r3, lsl #16
  014a0	e1a03823	 mov         r3, r3, lsr #16
  014a4	e1cd30b8	 strh        r3, [sp, #8]
  014a8		 |$LN19@NICInitial|
  014a8	e1dd30b8	 ldrh        r3, [sp, #8]
  014ac	e3530008	 cmp         r3, #8
  014b0	aa00002b	 bge         |$LN17@NICInitial|

; 539  :     {
; 540  :         pEmacRegs->MACINDEX = Count;

  014b4	e59d3004	 ldr         r3, [sp, #4]
  014b8	e2833c05	 add         r3, r3, #5, 24
  014bc	e2832008	 add         r2, r3, #8
  014c0	e1dd30b8	 ldrh        r3, [sp, #8]
  014c4	e5823000	 str         r3, [r2]

; 541  : 
; 542  :         /* Filling MACADDRHI registers only for first channel */
; 543  :         if (Count==0 )

  014c8	e1dd30b8	 ldrh        r3, [sp, #8]
  014cc	e3530000	 cmp         r3, #0
  014d0	1a000015	 bne         |$LN16@NICInitial|

; 544  :         {
; 545  :             pEmacRegs->MACADDRHI = (
; 546  :                                        (*(pAdapter->m_MACAddress + 3) << 24) |
; 547  :                                        (*(pAdapter->m_MACAddress + 2) << 16) |
; 548  :                                        (*(pAdapter->m_MACAddress + 1) << 8) |
; 549  :                                        (*(pAdapter->m_MACAddress + 0) << 0)
; 550  :                                        );

  014d4	e59d3050	 ldr         r3, [sp, #0x50]
  014d8	e2833017	 add         r3, r3, #0x17
  014dc	e5d33000	 ldrb        r3, [r3]
  014e0	e1a02c03	 mov         r2, r3, lsl #24
  014e4	e59d3050	 ldr         r3, [sp, #0x50]
  014e8	e2833016	 add         r3, r3, #0x16
  014ec	e5d33000	 ldrb        r3, [r3]
  014f0	e1a03803	 mov         r3, r3, lsl #16
  014f4	e1822003	 orr         r2, r2, r3
  014f8	e59d3050	 ldr         r3, [sp, #0x50]
  014fc	e2833015	 add         r3, r3, #0x15
  01500	e5d33000	 ldrb        r3, [r3]
  01504	e1a03403	 mov         r3, r3, lsl #8
  01508	e1822003	 orr         r2, r2, r3
  0150c	e59d3050	 ldr         r3, [sp, #0x50]
  01510	e2833014	 add         r3, r3, #0x14
  01514	e5d33000	 ldrb        r3, [r3]
  01518	e1822003	 orr         r2, r2, r3
  0151c	e59d3004	 ldr         r3, [sp, #4]
  01520	e2833c05	 add         r3, r3, #5, 24
  01524	e2833004	 add         r3, r3, #4
  01528	e5832000	 str         r2, [r3]
  0152c		 |$LN16@NICInitial|

; 551  :         }
; 552  :         pEmacRegs->MACADDRLO = (
; 553  :                                    (*(pAdapter->m_MACAddress + 5) << 8) |
; 554  :                                    (*(pAdapter->m_MACAddress + 4) << 0) | (0<<16)|(1<<19) |(1<<20)
; 555  :                                    );

  0152c	e59d3050	 ldr         r3, [sp, #0x50]
  01530	e2833019	 add         r3, r3, #0x19
  01534	e5d33000	 ldrb        r3, [r3]
  01538	e1a02403	 mov         r2, r3, lsl #8
  0153c	e59d3050	 ldr         r3, [sp, #0x50]
  01540	e2833018	 add         r3, r3, #0x18
  01544	e5d33000	 ldrb        r3, [r3]
  01548	e1823003	 orr         r3, r2, r3
  0154c	e3833702	 orr         r3, r3, #2, 14
  01550	e3832601	 orr         r2, r3, #1, 12
  01554	e59d3004	 ldr         r3, [sp, #4]
  01558	e2833c05	 add         r3, r3, #5, 24
  0155c	e5832000	 str         r2, [r3]

; 556  :     }

  01560	eaffffcb	 b           |$LN18@NICInitial|
  01564		 |$LN17@NICInitial|

; 557  : 
; 558  : 
; 559  :     /* clear the MAC address hash registers to 0 */
; 560  :     pEmacRegs->MACHASH1 = 0;

  01564	e59d3004	 ldr         r3, [sp, #4]
  01568	e2832f76	 add         r2, r3, #0x76, 30
  0156c	e3a03000	 mov         r3, #0
  01570	e5823000	 str         r3, [r2]

; 561  :     pEmacRegs->MACHASH2 = 0;

  01574	e59d3004	 ldr         r3, [sp, #4]
  01578	e2832f77	 add         r2, r3, #0x77, 30
  0157c	e3a03000	 mov         r3, #0
  01580	e5823000	 str         r3, [r2]

; 562  : 
; 563  :     /* Setup the local MAC address for 0th Transmit channel */
; 564  :     pEmacRegs->MACINDEX = 0;

  01584	e59d3004	 ldr         r3, [sp, #4]
  01588	e2833c05	 add         r3, r3, #5, 24
  0158c	e2832008	 add         r2, r3, #8
  01590	e3a03000	 mov         r3, #0
  01594	e5823000	 str         r3, [r2]

; 565  :     pEmacRegs->MACSRCADDRHI = (
; 566  :                                   (*(pAdapter->m_MACAddress + 3) << 24) |
; 567  :                                   (*(pAdapter->m_MACAddress + 2) << 16) |
; 568  :                                   (*(pAdapter->m_MACAddress + 1) << 8) |
; 569  :                                   (*(pAdapter->m_MACAddress + 0) << 0)
; 570  :                                   );

  01598	e59d3050	 ldr         r3, [sp, #0x50]
  0159c	e2833017	 add         r3, r3, #0x17
  015a0	e5d33000	 ldrb        r3, [r3]
  015a4	e1a02c03	 mov         r2, r3, lsl #24
  015a8	e59d3050	 ldr         r3, [sp, #0x50]
  015ac	e2833016	 add         r3, r3, #0x16
  015b0	e5d33000	 ldrb        r3, [r3]
  015b4	e1a03803	 mov         r3, r3, lsl #16
  015b8	e1822003	 orr         r2, r2, r3
  015bc	e59d3050	 ldr         r3, [sp, #0x50]
  015c0	e2833015	 add         r3, r3, #0x15
  015c4	e5d33000	 ldrb        r3, [r3]
  015c8	e1a03403	 mov         r3, r3, lsl #8
  015cc	e1822003	 orr         r2, r2, r3
  015d0	e59d3050	 ldr         r3, [sp, #0x50]
  015d4	e2833014	 add         r3, r3, #0x14
  015d8	e5d33000	 ldrb        r3, [r3]
  015dc	e1822003	 orr         r2, r2, r3
  015e0	e59d3004	 ldr         r3, [sp, #4]
  015e4	e2833f75	 add         r3, r3, #0x75, 30
  015e8	e5832000	 str         r2, [r3]

; 571  : 
; 572  :     pEmacRegs->MACSRCADDRLO = (
; 573  :                                   (*(pAdapter->m_MACAddress + 5) << 8) |
; 574  :                                   (*(pAdapter->m_MACAddress + 4) << 0)
; 575  :                                   );

  015ec	e59d3050	 ldr         r3, [sp, #0x50]
  015f0	e2833019	 add         r3, r3, #0x19
  015f4	e5d33000	 ldrb        r3, [r3]
  015f8	e1a02403	 mov         r2, r3, lsl #8
  015fc	e59d3050	 ldr         r3, [sp, #0x50]
  01600	e2833018	 add         r3, r3, #0x18
  01604	e5d33000	 ldrb        r3, [r3]
  01608	e1822003	 orr         r2, r2, r3
  0160c	e59d3004	 ldr         r3, [sp, #4]
  01610	e2833e1d	 add         r3, r3, #0x1D, 28
  01614	e5832000	 str         r2, [r3]

; 576  : 
; 577  :     /* Initialize the receive channel free buffer register including the
; 578  :      * count, threshold, filter low priority frame threshold etc.
; 579  :      */
; 580  :     pEmacRegs->RX0FREEBUFFER = EMAC_MAX_RXBUF_DESCS;

  01618	e59d3004	 ldr         r3, [sp, #4]
  0161c	e2832d05	 add         r2, r3, #5, 26
  01620	e3a03c01	 mov         r3, #1, 24
  01624	e5823000	 str         r3, [r2]

; 581  :     pEmacRegs->RX0FLOWTHRESH = 0x1;

  01628	e59d3004	 ldr         r3, [sp, #4]
  0162c	e2832e12	 add         r2, r3, #0x12, 28
  01630	e3a03001	 mov         r3, #1
  01634	e5823000	 str         r3, [r2]

; 582  :     pEmacRegs->MACCONTROL   |= (EMAC_MACCONTROL_RXBUFFERFLOW_ENABLE);

  01638	e59d3004	 ldr         r3, [sp, #4]
  0163c	e2833e16	 add         r3, r3, #0x16, 28
  01640	e5933000	 ldr         r3, [r3]
  01644	e3832008	 orr         r2, r3, #8
  01648	e59d3004	 ldr         r3, [sp, #4]
  0164c	e2833e16	 add         r3, r3, #0x16, 28
  01650	e5832000	 str         r2, [r3]

; 583  : 
; 584  :     /* clear the MAC address hash registers to 0 */
; 585  :     pEmacRegs->MACHASH1 = 0;

  01654	e59d3004	 ldr         r3, [sp, #4]
  01658	e2832f76	 add         r2, r3, #0x76, 30
  0165c	e3a03000	 mov         r3, #0
  01660	e5823000	 str         r3, [r2]

; 586  :     pEmacRegs->MACHASH2 = 0;

  01664	e59d3004	 ldr         r3, [sp, #4]
  01668	e2832f77	 add         r2, r3, #0x77, 30
  0166c	e3a03000	 mov         r3, #0
  01670	e5823000	 str         r3, [r2]

; 587  : 
; 588  :     /* Zero the receive buffer offset register */
; 589  :     pEmacRegs->RXBUFFEROFFSET = 0;

  01674	e59d3004	 ldr         r3, [sp, #4]
  01678	e2832e11	 add         r2, r3, #0x11, 28
  0167c	e3a03000	 mov         r3, #0
  01680	e5823000	 str         r3, [r2]

; 590  : 
; 591  : 
; 592  :     /* Clear all the UniCast receive . This will effectively disalbe any packet
; 593  :      * reception.
; 594  :      */
; 595  :     pEmacRegs->RXUNICASTCLEAR = 0xFF;

  01684	e59d3004	 ldr         r3, [sp, #4]
  01688	e2832f42	 add         r2, r3, #0x42, 30
  0168c	e3a030ff	 mov         r3, #0xFF
  01690	e5823000	 str         r3, [r2]

; 596  : 
; 597  :     /* Setup receive multicast/broadcast/promiscous channel enable on channel 0.
; 598  :      * We don't need to enable the multicast/promiscous modes. However, we do
; 599  :      * need the broadcast receive capability.
; 600  :      */
; 601  :     pEmacRegs->RXMBPENABLE = EMAC_RXMBPENABLE_RXBROADEN; 

  01694	e59d3004	 ldr         r3, [sp, #4]
  01698	e2832c01	 add         r2, r3, #1, 24
  0169c	e3a03a02	 mov         r3, #2, 20
  016a0	e5823000	 str         r3, [r2]

; 602  : 
; 603  :     /* Setup MACCONTROL register with apt value */
; 604  :     pEmacRegs->MACCONTROL = EMAC_MACCONTROL_FULLDUPLEX_ENABLE;

  016a4	e59d3004	 ldr         r3, [sp, #4]
  016a8	e2832e16	 add         r2, r3, #0x16, 28
  016ac	e3a03001	 mov         r3, #1
  016b0	e5823000	 str         r3, [r2]

; 605  :     
; 606  :     /* Clear all unused Tx and RX channel interrupts */
; 607  :     pEmacRegs->TXINTMASKCLEAR = 0xFF;

  016b4	e59d3004	 ldr         r3, [sp, #4]
  016b8	e283208c	 add         r2, r3, #0x8C
  016bc	e3a030ff	 mov         r3, #0xFF
  016c0	e5823000	 str         r3, [r2]

; 608  :     pEmacRegs->RXINTMASKCLEAR = 0xFF;

  016c4	e59d3004	 ldr         r3, [sp, #4]
  016c8	e28320ac	 add         r2, r3, #0xAC
  016cc	e3a030ff	 mov         r3, #0xFF
  016d0	e5823000	 str         r3, [r2]

; 609  : 
; 610  :     /* Enable the Rx and Tx channel interrupt mask registers.
; 611  :      * Setting channel0   RX & TX channel interrupts
; 612  :      */
; 613  :     pEmacRegs->RXINTMASKSET = 0x1;

  016d4	e59d3004	 ldr         r3, [sp, #4]
  016d8	e28320a8	 add         r2, r3, #0xA8
  016dc	e3a03001	 mov         r3, #1
  016e0	e5823000	 str         r3, [r2]

; 614  :     pEmacRegs->TXINTMASKSET = 0x1;

  016e4	e59d3004	 ldr         r3, [sp, #4]
  016e8	e2832088	 add         r2, r3, #0x88
  016ec	e3a03001	 mov         r3, #1
  016f0	e5823000	 str         r3, [r2]

; 615  : 
; 616  :     /* Setting up Rx buffer descriptors */
; 617  :     pEmacRxNext = pAdapter->m_pBaseRxBufs;

  016f4	e59d3050	 ldr         r3, [sp, #0x50]
  016f8	e2833030	 add         r3, r3, #0x30
  016fc	e5933000	 ldr         r3, [r3]
  01700	e58d302c	 str         r3, [sp, #0x2C]

; 618  :     for( Count = 0; Count < pAdapter->m_NumEmacRxBufDesc ; Count++)

  01704	e3a03000	 mov         r3, #0
  01708	e1cd30b8	 strh        r3, [sp, #8]
  0170c	ea000004	 b           |$LN15@NICInitial|
  01710		 |$LN14@NICInitial|
  01710	e1dd30b8	 ldrh        r3, [sp, #8]
  01714	e2833001	 add         r3, r3, #1
  01718	e1a03803	 mov         r3, r3, lsl #16
  0171c	e1a03823	 mov         r3, r3, lsr #16
  01720	e1cd30b8	 strh        r3, [sp, #8]
  01724		 |$LN15@NICInitial|
  01724	e1dd30b8	 ldrh        r3, [sp, #8]
  01728	e1a02003	 mov         r2, r3
  0172c	e59d3050	 ldr         r3, [sp, #0x50]
  01730	e2833026	 add         r3, r3, #0x26
  01734	e1d330b0	 ldrh        r3, [r3]
  01738	e1520003	 cmp         r2, r3
  0173c	aa00001c	 bge         |$LN13@NICInitial|

; 619  :     {
; 620  :         pEmacRxCur            = pEmacRxNext;

  01740	e59d302c	 ldr         r3, [sp, #0x2C]
  01744	e58d3034	 str         r3, [sp, #0x34]

; 621  :         pEmacRxNext++;

  01748	e59d302c	 ldr         r3, [sp, #0x2C]
  0174c	e2833018	 add         r3, r3, #0x18
  01750	e58d302c	 str         r3, [sp, #0x2C]

; 622  :         pRxDesc               = (PEMACDESC)pEmacRxCur->m_EmacBufDes;

  01754	e59d3034	 ldr         r3, [sp, #0x34]
  01758	e2833010	 add         r3, r3, #0x10
  0175c	e5933000	 ldr         r3, [r3]
  01760	e58d3024	 str         r3, [sp, #0x24]

; 623  :         pRxDesc->pNext        = (PEMACDESC)(pEmacRxNext->m_EmacBufDesPa);

  01764	e59d302c	 ldr         r3, [sp, #0x2C]
  01768	e2833014	 add         r3, r3, #0x14
  0176c	e5932000	 ldr         r2, [r3]
  01770	e59d3024	 ldr         r3, [sp, #0x24]
  01774	e5832000	 str         r2, [r3]

; 624  :         pRxDesc->pBuffer      = (UINT8 *)(pEmacRxCur->m_BufPhysicalAddress);

  01778	e59d3034	 ldr         r3, [sp, #0x34]
  0177c	e283100c	 add         r1, r3, #0xC
  01780	e59d3024	 ldr         r3, [sp, #0x24]
  01784	e2832004	 add         r2, r3, #4
  01788	e5913000	 ldr         r3, [r1]
  0178c	e5823000	 str         r3, [r2]

; 625  :         pRxDesc->BufOffLen    = EMAC_MAX_PKT_BUFFER_SIZE;

  01790	e59d3024	 ldr         r3, [sp, #0x24]
  01794	e2832008	 add         r2, r3, #8
  01798	e3a03c06	 mov         r3, #6, 24
  0179c	e5823000	 str         r3, [r2]

; 626  :         pRxDesc->PktFlgLen    = EMAC_DSC_FLAG_OWNER;

  017a0	e59d3024	 ldr         r3, [sp, #0x24]
  017a4	e283200c	 add         r2, r3, #0xC
  017a8	e3a03202	 mov         r3, #2, 4
  017ac	e5823000	 str         r3, [r2]

; 627  :      }

  017b0	eaffffd6	 b           |$LN14@NICInitial|
  017b4		 |$LN13@NICInitial|

; 628  : 
; 629  :      pRxDesc-> pNext = 0;

  017b4	e59d2024	 ldr         r2, [sp, #0x24]
  017b8	e3a03000	 mov         r3, #0
  017bc	e5823000	 str         r3, [r2]

; 630  : 
; 631  :     /* Setting up Tx buffer descriptors */
; 632  :     pEmacTxNext = pAdapter->m_pBaseTxBufs;

  017c0	e59d3050	 ldr         r3, [sp, #0x50]
  017c4	e2833038	 add         r3, r3, #0x38
  017c8	e5933000	 ldr         r3, [r3]
  017cc	e58d3030	 str         r3, [sp, #0x30]

; 633  :     for( Count = 0; Count < pAdapter->m_MaxTxEmacBufs ; Count++)

  017d0	e3a03000	 mov         r3, #0
  017d4	e1cd30b8	 strh        r3, [sp, #8]
  017d8	ea000004	 b           |$LN12@NICInitial|
  017dc		 |$LN11@NICInitial|
  017dc	e1dd30b8	 ldrh        r3, [sp, #8]
  017e0	e2833001	 add         r3, r3, #1
  017e4	e1a03803	 mov         r3, r3, lsl #16
  017e8	e1a03823	 mov         r3, r3, lsr #16
  017ec	e1cd30b8	 strh        r3, [sp, #8]
  017f0		 |$LN12@NICInitial|
  017f0	e1dd30b8	 ldrh        r3, [sp, #8]
  017f4	e1a02003	 mov         r2, r3
  017f8	e59d3050	 ldr         r3, [sp, #0x50]
  017fc	e283302a	 add         r3, r3, #0x2A
  01800	e1d330b0	 ldrh        r3, [r3]
  01804	e1520003	 cmp         r2, r3
  01808	aa00001b	 bge         |$LN10@NICInitial|

; 634  :     {
; 635  :         pEmacTxCur            = pEmacTxNext;

  0180c	e59d3030	 ldr         r3, [sp, #0x30]
  01810	e58d3028	 str         r3, [sp, #0x28]

; 636  :         pEmacTxNext++;

  01814	e59d3030	 ldr         r3, [sp, #0x30]
  01818	e2833018	 add         r3, r3, #0x18
  0181c	e58d3030	 str         r3, [sp, #0x30]

; 637  :         pTxDesc               = (PEMACDESC)pEmacTxCur->m_EmacBufDes;

  01820	e59d3028	 ldr         r3, [sp, #0x28]
  01824	e2833010	 add         r3, r3, #0x10
  01828	e5933000	 ldr         r3, [r3]
  0182c	e58d3020	 str         r3, [sp, #0x20]

; 638  :         pTxDesc->pNext        = (PEMACDESC)(pEmacTxNext->m_EmacBufDesPa);

  01830	e59d3030	 ldr         r3, [sp, #0x30]
  01834	e2833014	 add         r3, r3, #0x14
  01838	e5932000	 ldr         r2, [r3]
  0183c	e59d3020	 ldr         r3, [sp, #0x20]
  01840	e5832000	 str         r2, [r3]

; 639  :         pTxDesc->pBuffer      = 0;

  01844	e59d3020	 ldr         r3, [sp, #0x20]
  01848	e2832004	 add         r2, r3, #4
  0184c	e3a03000	 mov         r3, #0
  01850	e5823000	 str         r3, [r2]

; 640  :         pTxDesc->BufOffLen    = EMAC_MAX_ETHERNET_PKT_SIZE;

  01854	e59d3020	 ldr         r3, [sp, #0x20]
  01858	e2832008	 add         r2, r3, #8
  0185c	e3a03c05	 mov         r3, #5, 24
  01860	e38330ea	 orr         r3, r3, #0xEA
  01864	e5823000	 str         r3, [r2]

; 641  :         pTxDesc->PktFlgLen    = 0;

  01868	e59d3020	 ldr         r3, [sp, #0x20]
  0186c	e283200c	 add         r2, r3, #0xC
  01870	e3a03000	 mov         r3, #0
  01874	e5823000	 str         r3, [r2]

; 642  :      }

  01878	eaffffd7	 b           |$LN11@NICInitial|
  0187c		 |$LN10@NICInitial|

; 643  : 
; 644  :     pTxDesc->pNext = 0;

  0187c	e59d2020	 ldr         r2, [sp, #0x20]
  01880	e3a03000	 mov         r3, #0
  01884	e5823000	 str         r3, [r2]

; 645  : 
; 646  :     /* Adjust RX Length characteristics */
; 647  :     pEmacRegs->RXMAXLEN = EMAC_RX_MAX_LEN;

  01888	e59d3004	 ldr         r3, [sp, #4]
  0188c	e2832f43	 add         r2, r3, #0x43, 30
  01890	e3a03e5f	 mov         r3, #0x5F, 28
  01894	e5823000	 str         r3, [r2]

; 648  : 
; 649  :     // Todo : Get the clock value using the clock SDK
; 650  :     clkdiv = 166000000;

  01898	e59f3288	 ldr         r3, [pc, #0x288]
  0189c	e58d301c	 str         r3, [sp, #0x1C]

; 651  :     clkdiv = (clkdiv/(EMAC_MDIO_CLOCK_FREQ)) - 1;

  018a0	e59d101c	 ldr         r1, [sp, #0x1C]
  018a4	e3a00a7a	 mov         r0, #0x7A, 20
  018a8	e3800e12	 orr         r0, r0, #0x12, 28
  018ac	eb000000	 bl          __rt_udiv
  018b0	e2403001	 sub         r3, r0, #1
  018b4	e58d301c	 str         r3, [sp, #0x1C]

; 652  : 
; 653  :     pMdioRegs->CONTROL = ((clkdiv & 0xFF) |
; 654  :                               (MDIO_CONTROL_ENABLE) |
; 655  :                               (MDIO_CONTROL_FAULTEN) |
; 656  :                               (MDIO_CONTROL_FAULT));

  018b8	e59d301c	 ldr         r3, [sp, #0x1C]
  018bc	e20330ff	 and         r3, r3, #0xFF
  018c0	e3833101	 orr         r3, r3, #1, 2
  018c4	e3833701	 orr         r3, r3, #1, 14
  018c8	e3832702	 orr         r2, r3, #2, 14
  018cc	e59d300c	 ldr         r3, [sp, #0xC]
  018d0	e2833004	 add         r3, r3, #4
  018d4	e5832000	 str         r2, [r3]
  018d8		 |$LN9@NICInitial|

; 657  : 
; 658  :     // wait for MDIO to become active
; 659  :     while (pMdioRegs->CONTROL & MDIO_CONTROL_IDLE) {

  018d8	e59d300c	 ldr         r3, [sp, #0xC]
  018dc	e2833004	 add         r3, r3, #4
  018e0	e5933000	 ldr         r3, [r3]
  018e4	e3130102	 tst         r3, #2, 2
  018e8	0a000003	 beq         |$LN8@NICInitial|

; 660  :         //5ms sleep
; 661  :         NdisMSleep(1000*5);

  018ec	e3a00c13	 mov         r0, #0x13, 24
  018f0	e3800088	 orr         r0, r0, #0x88
  018f4	eb000000	 bl          NdisMSleep

; 662  :     };

  018f8	eafffff6	 b           |$LN9@NICInitial|
  018fc		 |$LN8@NICInitial|

; 663  : 
; 664  :     // wait for the phy(s) to indicate they are active
; 665  :     for(Count = 0;Count < 256; Count++)

  018fc	e3a03000	 mov         r3, #0
  01900	e1cd30b8	 strh        r3, [sp, #8]
  01904	ea000004	 b           |$LN7@NICInitial|
  01908		 |$LN6@NICInitial|
  01908	e1dd30b8	 ldrh        r3, [sp, #8]
  0190c	e2833001	 add         r3, r3, #1
  01910	e1a03803	 mov         r3, r3, lsl #16
  01914	e1a03823	 mov         r3, r3, lsr #16
  01918	e1cd30b8	 strh        r3, [sp, #8]
  0191c		 |$LN7@NICInitial|
  0191c	e1dd30b8	 ldrh        r3, [sp, #8]
  01920	e3530c01	 cmp         r3, #1, 24
  01924	aa00000e	 bge         |$LN5@NICInitial|

; 666  :     {
; 667  :         DEBUGMSG(TRUE, (TEXT("NICInitializeAdapter: waiting for active phy... 0x%x\r\n"), pMdioRegs->ALIVE));

  01928	e59d300c	 ldr         r3, [sp, #0xC]
  0192c	e2833008	 add         r3, r3, #8
  01930	e5931000	 ldr         r1, [r3]
  01934	e59f01e8	 ldr         r0, [pc, #0x1E8]
  01938	eb000000	 bl          NKDbgPrintfW

; 668  :         if(pMdioRegs->ALIVE)

  0193c	e59d300c	 ldr         r3, [sp, #0xC]
  01940	e2833008	 add         r3, r3, #8
  01944	e5933000	 ldr         r3, [r3]
  01948	e3530000	 cmp         r3, #0
  0194c	0a000000	 beq         |$LN4@NICInitial|

; 669  :             break;

  01950	ea000003	 b           |$LN5@NICInitial|
  01954		 |$LN4@NICInitial|

; 670  :         NdisMSleep(1000* 10);

  01954	e3a00c27	 mov         r0, #0x27, 24
  01958	e3800010	 orr         r0, r0, #0x10
  0195c	eb000000	 bl          NdisMSleep

; 671  :     }

  01960	eaffffe8	 b           |$LN6@NICInitial|
  01964		 |$LN5@NICInitial|

; 672  : 
; 673  :     // print out the Phy(s) that are active
; 674  :     if(pMdioRegs->ALIVE)

  01964	e59d300c	 ldr         r3, [sp, #0xC]
  01968	e2833008	 add         r3, r3, #8
  0196c	e5933000	 ldr         r3, [r3]
  01970	e3530000	 cmp         r3, #0
  01974	0a000004	 beq         |$LN3@NICInitial|

; 675  :         DEBUGMSG(TRUE, (TEXT("NICInitializeAdapter: pMdioRegs->ALIVE = 0x%x\r\n"), pMdioRegs->ALIVE));

  01978	e59d300c	 ldr         r3, [sp, #0xC]
  0197c	e2833008	 add         r3, r3, #8
  01980	e5931000	 ldr         r1, [r3]
  01984	e59f0194	 ldr         r0, [pc, #0x194]
  01988	eb000000	 bl          NKDbgPrintfW
  0198c		 |$LN3@NICInitial|

; 676  : 
; 677  : #ifdef SUPPORT_TWO_ETH_PORT
; 678  :     
; 679  :     RetVal = PhyFindLink(pAdapter);
; 680  :     while(0 == RetVal)
; 681  :     {
; 682  :         DEBUGMSG(DBG_WARN, (TEXT("WARN: NICInitializeAdapter --> Could not find the link!!!\r\n")));
; 683  :         //1sec
; 684  :         NdisMSleep(1000*1000);
; 685  : 
; 686  :         RetVal = PhyFindLink(pAdapter);
; 687  :     }
; 688  : 
; 689  :     /* Monitor the PHY address for any link change  */
; 690  :     pMdioRegs->USERPHYSEL0 |= pAdapter->m_ActivePhy;
; 691  :     /* Enabling Link change status interrupt for PHY address being monitored */
; 692  :     pMdioRegs->USERPHYSEL0 |= (BIT(6));
; 693  :     /* Indicate that link is UP */
; 694  :     pAdapter->m_LinkStatus = UP;
; 695  : 
; 696  : #else
; 697  :     /* Supporting only Ethernet Port1 only if ethernet cable is not plug in 
; 698  :      * while booting up
; 699  :     */
; 700  : 
; 701  :     if(0 != PhyFindLink(pAdapter))

  0198c	e59d0050	 ldr         r0, [sp, #0x50]
  01990	eb000000	 bl          PhyFindLink
  01994	e58d0040	 str         r0, [sp, #0x40]
  01998	e59d3040	 ldr         r3, [sp, #0x40]
  0199c	e3530000	 cmp         r3, #0
  019a0	0a000004	 beq         |$LN2@NICInitial|

; 702  :     {
; 703  :         /* Indicate that link is UP */
; 704  :         pAdapter->m_LinkStatus = UP;

  019a4	e59d3050	 ldr         r3, [sp, #0x50]
  019a8	e2832f69	 add         r2, r3, #0x69, 30
  019ac	e3a03000	 mov         r3, #0
  019b0	e5823000	 str         r3, [r2]

; 705  :     }
; 706  : 	else

  019b4	ea000003	 b           |$LN1@NICInitial|
  019b8		 |$LN2@NICInitial|

; 707  : 	{
; 708  :         pAdapter->m_LinkStatus = DOWN;

  019b8	e59d3050	 ldr         r3, [sp, #0x50]
  019bc	e2832f69	 add         r2, r3, #0x69, 30
  019c0	e3a03001	 mov         r3, #1
  019c4	e5823000	 str         r3, [r2]
  019c8		 |$LN1@NICInitial|

; 709  : 	}
; 710  : 
; 711  :     /* Monitor the PHY address for any link change  */
; 712  :     pMdioRegs->USERPHYSEL0 |= pAdapter->m_ActivePhy;

  019c8	e59d300c	 ldr         r3, [sp, #0xC]
  019cc	e2832084	 add         r2, r3, #0x84
  019d0	e59d3050	 ldr         r3, [sp, #0x50]
  019d4	e2833f6a	 add         r3, r3, #0x6A, 30
  019d8	e5922000	 ldr         r2, [r2]
  019dc	e5933000	 ldr         r3, [r3]
  019e0	e1822003	 orr         r2, r2, r3
  019e4	e59d300c	 ldr         r3, [sp, #0xC]
  019e8	e2833084	 add         r3, r3, #0x84
  019ec	e5832000	 str         r2, [r3]

; 713  :     /* Enabling Link change status interrupt for PHY address being monitored */
; 714  :     pMdioRegs->USERPHYSEL0 |= (BIT(6));

  019f0	e59d300c	 ldr         r3, [sp, #0xC]
  019f4	e2833084	 add         r3, r3, #0x84
  019f8	e5933000	 ldr         r3, [r3]
  019fc	e3832040	 orr         r2, r3, #0x40
  01a00	e59d300c	 ldr         r3, [sp, #0xC]
  01a04	e2833084	 add         r3, r3, #0x84
  01a08	e5832000	 str         r2, [r3]

; 715  : 
; 716  : #endif
; 717  : 
; 718  :     /* Only coming here means complete initialisation is over */
; 719  :     Status = NDIS_STATUS_SUCCESS;

  01a0c	e3a03000	 mov         r3, #0
  01a10	e58d3018	 str         r3, [sp, #0x18]

; 720  : 
; 721  :     /* Enable Tx & Rx for channel 0 only */
; 722  :     pEmacRegs->RXUNICASTSET = 0x01;

  01a14	e59d3004	 ldr         r3, [sp, #4]
  01a18	e2832f41	 add         r2, r3, #0x41, 30
  01a1c	e3a03001	 mov         r3, #1
  01a20	e5823000	 str         r3, [r2]

; 723  :     pEmacRegs->TXCONTROL = 0x1;

  01a24	e59d3004	 ldr         r3, [sp, #4]
  01a28	e2832004	 add         r2, r3, #4
  01a2c	e3a03001	 mov         r3, #1
  01a30	e5823000	 str         r3, [r2]

; 724  :     pEmacRegs->RXCONTROL = 0x1;

  01a34	e59d3004	 ldr         r3, [sp, #4]
  01a38	e2832014	 add         r2, r3, #0x14
  01a3c	e3a03001	 mov         r3, #1
  01a40	e5823000	 str         r3, [r2]

; 725  :     pEmacRegs->MACCONTROL |= (EMAC_MACCONTROL_MIIEN_ENABLE | EMAC_MACCONTROL_RMII_SPEED);

  01a44	e59d3004	 ldr         r3, [sp, #4]
  01a48	e2833e16	 add         r3, r3, #0x16, 28
  01a4c	e5932000	 ldr         r2, [r3]
  01a50	e3a03902	 mov         r3, #2, 18
  01a54	e3833020	 orr         r3, r3, #0x20
  01a58	e1822003	 orr         r2, r2, r3
  01a5c	e59d3004	 ldr         r3, [sp, #4]
  01a60	e2833e16	 add         r3, r3, #0x16, 28
  01a64	e5832000	 str         r2, [r3]

; 726  : 
; 727  :     /* Enabling statistics and Host error interrupts */
; 728  :     pEmacRegs->MACINTMASKSET = (BIT(1) | BIT(0));

  01a68	e59d3004	 ldr         r3, [sp, #4]
  01a6c	e28320b8	 add         r2, r3, #0xB8
  01a70	e3a03003	 mov         r3, #3
  01a74	e5823000	 str         r3, [r2]

; 729  : 
; 730  :     /* Start receive process */
; 731  :     pEmacRegs->RX0HDP = (pAdapter->m_pBaseRxBufs->m_EmacBufDesPa);

  01a78	e59d3050	 ldr         r3, [sp, #0x50]
  01a7c	e2833030	 add         r3, r3, #0x30
  01a80	e5933000	 ldr         r3, [r3]
  01a84	e2831014	 add         r1, r3, #0x14
  01a88	e59d3004	 ldr         r3, [sp, #4]
  01a8c	e2832e62	 add         r2, r3, #0x62, 28
  01a90	e5913000	 ldr         r3, [r1]
  01a94	e5823000	 str         r3, [r2]

; 732  : 
; 733  :     /* Enable the interrupt */
; 734  :     //  pAdapter->m_EwrapRegsBase->m_Ewinttcnt = 0xFFFF;
; 735  :     EmacEnableInterrupts(pAdapter);

  01a98	e59d0050	 ldr         r0, [sp, #0x50]
  01a9c	eb000000	 bl          EmacEnableInterrupts

; 736  :     pEmacCtlRegs->INTCONTROL = 0x1;

  01aa0	e59d3010	 ldr         r3, [sp, #0x10]
  01aa4	e283200c	 add         r2, r3, #0xC
  01aa8	e3a03001	 mov         r3, #1
  01aac	e5823000	 str         r3, [r2]

; 737  : 
; 738  : 
; 739  :     /* Here we have enabled broadcast and unicast reception */
; 740  :     pAdapter->m_PacketFilter = (
; 741  :                                 NDIS_PACKET_TYPE_DIRECTED
; 742  :                               );

  01ab0	e59d3050	 ldr         r3, [sp, #0x50]
  01ab4	e2832f6b	 add         r2, r3, #0x6B, 30
  01ab8	e3a03001	 mov         r3, #1
  01abc	e5823000	 str         r3, [r2]

; 743  :     /* Clearing teardown events */
; 744  :     pAdapter->m_Events = 0x0;

  01ac0	e59d3050	 ldr         r3, [sp, #0x50]
  01ac4	e2832fe7	 add         r2, r3, #0xE7, 30
  01ac8	e3a03000	 mov         r3, #0
  01acc	e5823000	 str         r3, [r2]

; 745  : 
; 746  :     DEBUGMSG(DBG_FUNC, (L"<-- NICInitializeAdapter, Status=%x \r\n", Status));

  01ad0	e59f3044	 ldr         r3, [pc, #0x44]
  01ad4	e5933440	 ldr         r3, [r3, #0x440]
  01ad8	e3130080	 tst         r3, #0x80
  01adc	0a000005	 beq         |$LN37@NICInitial|
  01ae0	e59d1018	 ldr         r1, [sp, #0x18]
  01ae4	e59f002c	 ldr         r0, [pc, #0x2C]
  01ae8	eb000000	 bl          NKDbgPrintfW
  01aec	e3a03001	 mov         r3, #1
  01af0	e58d3044	 str         r3, [sp, #0x44]
  01af4	ea000001	 b           |$LN38@NICInitial|
  01af8		 |$LN37@NICInitial|
  01af8	e3a03000	 mov         r3, #0
  01afc	e58d3044	 str         r3, [sp, #0x44]
  01b00		 |$LN38@NICInitial|

; 747  : 
; 748  :     return Status;

  01b00	e59d3018	 ldr         r3, [sp, #0x18]
  01b04	e58d3038	 str         r3, [sp, #0x38]

; 749  : }

  01b08	e59d0038	 ldr         r0, [sp, #0x38]
  01b0c	e28dd048	 add         sp, sp, #0x48
  01b10	e89d6000	 ldmia       sp, {sp, lr}
  01b14	e12fff1e	 bx          lr
  01b18		 |$LN42@NICInitial|
  01b18		 |$LN43@NICInitial|
  01b18	00000000	 DCD         |??_C@_1EO@ECEMODIK@?$AA?$DM?$AA?9?$AA?9?$AA?5?$AAN?$AAI?$AAC?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAA?$AAd?$AAa?$AAp?$AAt?$AAe?$AAr?$AA?0?$AA?5?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs@|
  01b1c		 |$LN44@NICInitial|
  01b1c	00000000	 DCD         |dpCurSettings|
  01b20		 |$LN45@NICInitial|
  01b20	00000000	 DCD         |??_C@_1GA@DMJNDCLN@?$AAN?$AAI?$AAC?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAA?$AAd?$AAa?$AAp?$AAt?$AAe?$AAr?$AA?3?$AA?5?$AAp?$AAM?$AAd?$AAi?$AAo?$AAR?$AAe?$AAg?$AAs?$AA?9@|
  01b24		 |$LN46@NICInitial|
  01b24	00000000	 DCD         |??_C@_1GO@NFNAAJCJ@?$AAN?$AAI?$AAC?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAA?$AAd?$AAa?$AAp?$AAt?$AAe?$AAr?$AA?3?$AA?5?$AAw?$AAa?$AAi?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAf?$AAo@|
  01b28		 |$LN47@NICInitial|
  01b28	09e4f580	 DCD         0x9e4f580
  01b2c		 |$LN48@NICInitial|
  01b2c	00000000	 DCD         |??_C@_1DI@DIHNALDI@?$AA?9?$AA?9?$AA?$DO?$AA?5?$AAN?$AAI?$AAC?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAA?$AAd?$AAa?$AAp?$AAt?$AAe?$AAr?$AA?5?$AA?$AN?$AA?6?$AA?$AA@|
  01b30		 |$M50693|

			 ENDP  ; |NICInitializeAdapter|

	END
