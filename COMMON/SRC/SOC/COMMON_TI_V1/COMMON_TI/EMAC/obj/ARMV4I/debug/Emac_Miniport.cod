; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\EMAC\Emac_Miniport.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|VendorDriverVersion| [ DATA ]
	EXPORT	|NICSupportedOids| [ DATA ]

  00000			 AREA	 |.data|, DATA
|VendorDriverVersion| DCD 0x10000
	%	4
|NICSupportedOids| DCD 0x10101
	DCD	0x10102
	DCD	0x10103
	DCD	0x10104
	DCD	0x10105
	DCD	0x10106
	DCD	0x10107
	DCD	0x10108
	DCD	0x10109
	DCD	0x1010a
	DCD	0x1010b
	DCD	0x1010c
	DCD	0x1010d
	DCD	0x1010e
	DCD	0x1010f
	DCD	0x10110
	DCD	0x10111
	DCD	0x10113
	DCD	0x10114
	DCD	0x10115
	DCD	0x10116
	DCD	0x20101
	DCD	0x20102
	DCD	0x20103
	DCD	0x20104
	DCD	0x20105
	DCD	0x1010101
	DCD	0x1010102
	DCD	0x1010103
	DCD	0x1010104
	DCD	0x1020101
	DCD	0x1020102
	DCD	0x1020103
	DCD	0x1020201
	DCD	0x1020202
	DCD	0x1020203
	DCD	0xfd010100
	DCD	0xfd010102
	DCD	0xfd010101

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
|?VendorDescriptor@?1??Emac_MiniportQueryInformation@@9@9| DCB "TI- EMAC "
	DCB	"ADAPTER", 0x0				; `Emac_MiniportQueryInformation'::`2'::VendorDescriptor
	EXPORT	|??_C@_1CK@DNPAIPME@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAH?$AAa?$AAl?$AAt?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|Emac_MiniportHalt|
	IMPORT	|EmacFreeAdapter|
	IMPORT	|Emac_MiniportDisableInterrupt|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|dpCurSettings|

  00000			 AREA	 |.pdata|, PDATA
|$T50642| DCD	|$LN9@Emac_Minip|
	DCD	0x40003104
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\emac\emac_miniport.c

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CK@DNPAIPME@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAH?$AAa?$AAl?$AAt?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| DCB "E"
	DCB	0x0, "m", 0x0, "a", 0x0, "c", 0x0, "_", 0x0, "M", 0x0, "i"
	DCB	0x0, "n", 0x0, "i", 0x0, "p", 0x0, "o", 0x0, "r", 0x0, "t"
	DCB	0x0, "H", 0x0, "a", 0x0, "l", 0x0, "t", 0x0, " ", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Emac_MiniportHalt| PROC

; 89   : {

  00000		 |$LN9@Emac_Minip|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd008	 sub         sp, sp, #8
  00010		 |$M50639|

; 90   :     PEMAC_ADAPTER       pAdapter;
; 91   :     
; 92   :     pAdapter = (PEMAC_ADAPTER) MiniportAdapterContext;

  00010	e59d3010	 ldr         r3, [sp, #0x10]
  00014	e58d3000	 str         r3, [sp]

; 93   : 
; 94   :     DEBUGMSG(DBG_FUNC, (L"Emac_MiniportHalt \r\n"));

  00018	e59f30a0	 ldr         r3, [pc, #0xA0]
  0001c	e5933440	 ldr         r3, [r3, #0x440]
  00020	e3130080	 tst         r3, #0x80
  00024	0a000004	 beq         |$LN5@Emac_Minip|
  00028	e59f008c	 ldr         r0, [pc, #0x8C]
  0002c	eb000000	 bl          NKDbgPrintfW
  00030	e3a03001	 mov         r3, #1
  00034	e58d3004	 str         r3, [sp, #4]
  00038	ea000001	 b           |$LN6@Emac_Minip|
  0003c		 |$LN5@Emac_Minip|
  0003c	e3a03000	 mov         r3, #0
  00040	e58d3004	 str         r3, [sp, #4]
  00044		 |$LN6@Emac_Minip|

; 95   :     
; 96   :     /* Tear down receive and transmit channels so that Rx/Tx are completelly
; 97   :      * stopped immediately
; 98   :      */
; 99   :     pAdapter->m_pEmacRegsBase->RXTEARDOWN = 0x0;

  00044	e59d3000	 ldr         r3, [sp]
  00048	e2833004	 add         r3, r3, #4
  0004c	e5933000	 ldr         r3, [r3]
  00050	e2832018	 add         r2, r3, #0x18
  00054	e3a03000	 mov         r3, #0
  00058	e5823000	 str         r3, [r2]

; 100  :     pAdapter->m_pEmacRegsBase->TXTEARDOWN = 0x0;

  0005c	e59d3000	 ldr         r3, [sp]
  00060	e2833004	 add         r3, r3, #4
  00064	e5933000	 ldr         r3, [r3]
  00068	e2832008	 add         r2, r3, #8
  0006c	e3a03000	 mov         r3, #0
  00070	e5823000	 str         r3, [r2]
  00074		 |$LN2@Emac_Minip|

; 101  :      
; 102  :     /* wait for teardowm completion */
; 103  :     while(0 != (pAdapter->m_Events & EMAC_RX_TEARDOWN_EVENT) &&
; 104  :           0 != (pAdapter->m_Events & EMAC_TX_TEARDOWN_EVENT))

  00074	e59d3000	 ldr         r3, [sp]
  00078	e2833fe7	 add         r3, r3, #0xE7, 30
  0007c	e5933000	 ldr         r3, [r3]
  00080	e3130002	 tst         r3, #2
  00084	0a000005	 beq         |$LN1@Emac_Minip|
  00088	e59d3000	 ldr         r3, [sp]
  0008c	e2833fe7	 add         r3, r3, #0xE7, 30
  00090	e5933000	 ldr         r3, [r3]
  00094	e3130001	 tst         r3, #1
  00098	0a000000	 beq         |$LN1@Emac_Minip|

; 105  :     {
; 106  :        ;
; 107  :     }

  0009c	eafffff4	 b           |$LN2@Emac_Minip|
  000a0		 |$LN1@Emac_Minip|

; 108  :     /*
; 109  :      * Disable the interrupts in the card, so that the interrupt routine would
; 110  :      * not be called.
; 111  :      */
; 112  :     Emac_MiniportDisableInterrupt(pAdapter);

  000a0	e59d0000	 ldr         r0, [sp]
  000a4	eb000000	 bl          Emac_MiniportDisableInterrupt

; 113  : 
; 114  :     /* Free allocated memory and resources held */
; 115  :     EmacFreeAdapter(pAdapter);

  000a8	e59d0000	 ldr         r0, [sp]
  000ac	eb000000	 bl          EmacFreeAdapter

; 116  :     
; 117  :     return;
; 118  : }

  000b0	e28dd008	 add         sp, sp, #8
  000b4	e89d6000	 ldmia       sp, {sp, lr}
  000b8	e12fff1e	 bx          lr
  000bc		 |$LN10@Emac_Minip|
  000bc		 |$LN11@Emac_Minip|
  000bc	00000000	 DCD         |??_C@_1CK@DNPAIPME@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAH?$AAa?$AAl?$AAt?$AA?5?$AA?$AN?$AA?6?$AA?$AA@|
  000c0		 |$LN12@Emac_Minip|
  000c0	00000000	 DCD         |dpCurSettings|
  000c4		 |$M50640|

			 ENDP  ; |Emac_MiniportHalt|

	EXPORT	|EmacUpdateStatistics|

  00008			 AREA	 |.pdata|, PDATA
|$T50650| DCD	|$LN5@EmacUpdate|
	DCD	0x40009103
; Function compile flags: /Odtp

  000c4			 AREA	 |.text|, CODE, ARM

  000c4		 |EmacUpdateStatistics| PROC

; 131  : {

  000c4		 |$LN5@EmacUpdate|
  000c4	e1a0c00d	 mov         r12, sp
  000c8	e92d0003	 stmdb       sp!, {r0, r1}
  000cc	e92d5000	 stmdb       sp!, {r12, lr}
  000d0		 |$M50647|

; 132  :     /* Updating software statistics information from Network statistics registers
; 133  :      * from EMAC
; 134  :      */
; 135  :     EmacStatInfo->m_TxOKFrames          += EmacRegs->TXGOODFRAMES;

  000d0	e59d300c	 ldr         r3, [sp, #0xC]
  000d4	e2833f8d	 add         r3, r3, #0x8D, 30
  000d8	e5932000	 ldr         r2, [r3]
  000dc	e59d3008	 ldr         r3, [sp, #8]
  000e0	e5933000	 ldr         r3, [r3]
  000e4	e0832002	 add         r2, r3, r2
  000e8	e59d3008	 ldr         r3, [sp, #8]
  000ec	e5832000	 str         r2, [r3]

; 136  :     
; 137  :     EmacStatInfo->m_RxOKFrames          += EmacRegs->RXGOODFRAMES;

  000f0	e59d3008	 ldr         r3, [sp, #8]
  000f4	e2831004	 add         r1, r3, #4
  000f8	e59d300c	 ldr         r3, [sp, #0xC]
  000fc	e2833c02	 add         r3, r3, #2, 24
  00100	e5932000	 ldr         r2, [r3]
  00104	e5913000	 ldr         r3, [r1]
  00108	e0832002	 add         r2, r3, r2
  0010c	e59d3008	 ldr         r3, [sp, #8]
  00110	e2833004	 add         r3, r3, #4
  00114	e5832000	 str         r2, [r3]

; 138  :     
; 139  :     EmacStatInfo->m_TxErrorframes       += (
; 140  :                                             EmacRegs->TXEXCESSIVECOLL +
; 141  :                                             EmacRegs->TXLATECOLL +
; 142  :                                             EmacRegs->TXCARRIERSENSE
; 143  :                                             ); 

  00118	e59d3008	 ldr         r3, [sp, #8]
  0011c	e2831008	 add         r1, r3, #8
  00120	e59d300c	 ldr         r3, [sp, #0xC]
  00124	e2832f95	 add         r2, r3, #0x95, 30
  00128	e59d300c	 ldr         r3, [sp, #0xC]
  0012c	e2833f96	 add         r3, r3, #0x96, 30
  00130	e5922000	 ldr         r2, [r2]
  00134	e5933000	 ldr         r3, [r3]
  00138	e0822003	 add         r2, r2, r3
  0013c	e59d300c	 ldr         r3, [sp, #0xC]
  00140	e2833e26	 add         r3, r3, #0x26, 28
  00144	e5933000	 ldr         r3, [r3]
  00148	e0822003	 add         r2, r2, r3
  0014c	e5913000	 ldr         r3, [r1]
  00150	e0832002	 add         r2, r3, r2
  00154	e59d3008	 ldr         r3, [sp, #8]
  00158	e2833008	 add         r3, r3, #8
  0015c	e5832000	 str         r2, [r3]

; 144  :     
; 145  :     EmacStatInfo->m_RxErrorframes       += (
; 146  :                                             EmacRegs->RXCRCERRORS +
; 147  :                                             EmacRegs->RXALIGNCODEERRORS +
; 148  :                                             EmacRegs->RXOVERSIZED +
; 149  :                                             EmacRegs->RXJABBER +
; 150  :                                             EmacRegs->RXUNDERSIZED
; 151  :                                             ); 

  00160	e59d3008	 ldr         r3, [sp, #8]
  00164	e283100c	 add         r1, r3, #0xC
  00168	e59d300c	 ldr         r3, [sp, #0xC]
  0016c	e2832e21	 add         r2, r3, #0x21, 28
  00170	e59d300c	 ldr         r3, [sp, #0xC]
  00174	e2833f85	 add         r3, r3, #0x85, 30
  00178	e5922000	 ldr         r2, [r2]
  0017c	e5933000	 ldr         r3, [r3]
  00180	e0822003	 add         r2, r2, r3
  00184	e59d300c	 ldr         r3, [sp, #0xC]
  00188	e2833f86	 add         r3, r3, #0x86, 30
  0018c	e5933000	 ldr         r3, [r3]
  00190	e0822003	 add         r2, r2, r3
  00194	e59d300c	 ldr         r3, [sp, #0xC]
  00198	e2833f87	 add         r3, r3, #0x87, 30
  0019c	e5933000	 ldr         r3, [r3]
  001a0	e0822003	 add         r2, r2, r3
  001a4	e59d300c	 ldr         r3, [sp, #0xC]
  001a8	e2833e22	 add         r3, r3, #0x22, 28
  001ac	e5933000	 ldr         r3, [r3]
  001b0	e0822003	 add         r2, r2, r3
  001b4	e5913000	 ldr         r3, [r1]
  001b8	e0832002	 add         r2, r3, r2
  001bc	e59d3008	 ldr         r3, [sp, #8]
  001c0	e283300c	 add         r3, r3, #0xC
  001c4	e5832000	 str         r2, [r3]

; 152  :     
; 153  :     EmacStatInfo->m_RxNoBufFrames       += EmacRegs->RXDMAOVERRUNS; //needtocheck

  001c8	e59d3008	 ldr         r3, [sp, #8]
  001cc	e2831010	 add         r1, r3, #0x10
  001d0	e59d300c	 ldr         r3, [sp, #0xC]
  001d4	e2833fa3	 add         r3, r3, #0xA3, 30
  001d8	e5932000	 ldr         r2, [r3]
  001dc	e5913000	 ldr         r3, [r1]
  001e0	e0832002	 add         r2, r3, r2
  001e4	e59d3008	 ldr         r3, [sp, #8]
  001e8	e2833010	 add         r3, r3, #0x10
  001ec	e5832000	 str         r2, [r3]

; 154  :     
; 155  :     EmacStatInfo->m_RxAlignErrorFrames  += EmacRegs->RXALIGNCODEERRORS;

  001f0	e59d3008	 ldr         r3, [sp, #8]
  001f4	e2831014	 add         r1, r3, #0x14
  001f8	e59d300c	 ldr         r3, [sp, #0xC]
  001fc	e2833f85	 add         r3, r3, #0x85, 30
  00200	e5932000	 ldr         r2, [r3]
  00204	e5913000	 ldr         r3, [r1]
  00208	e0832002	 add         r2, r3, r2
  0020c	e59d3008	 ldr         r3, [sp, #8]
  00210	e2833014	 add         r3, r3, #0x14
  00214	e5832000	 str         r2, [r3]

; 156  :     
; 157  :     EmacStatInfo->m_TxOneColl           += EmacRegs->TXSINGLECOLL;

  00218	e59d3008	 ldr         r3, [sp, #8]
  0021c	e2831018	 add         r1, r3, #0x18
  00220	e59d300c	 ldr         r3, [sp, #0xC]
  00224	e2833f93	 add         r3, r3, #0x93, 30
  00228	e5932000	 ldr         r2, [r3]
  0022c	e5913000	 ldr         r3, [r1]
  00230	e0832002	 add         r2, r3, r2
  00234	e59d3008	 ldr         r3, [sp, #8]
  00238	e2833018	 add         r3, r3, #0x18
  0023c	e5832000	 str         r2, [r3]

; 158  :     
; 159  :     EmacStatInfo->m_TxMoreColl          += EmacRegs->TXMULTICOLL;

  00240	e59d3008	 ldr         r3, [sp, #8]
  00244	e283101c	 add         r1, r3, #0x1C
  00248	e59d300c	 ldr         r3, [sp, #0xC]
  0024c	e2833e25	 add         r3, r3, #0x25, 28
  00250	e5932000	 ldr         r2, [r3]
  00254	e5913000	 ldr         r3, [r1]
  00258	e0832002	 add         r2, r3, r2
  0025c	e59d3008	 ldr         r3, [sp, #8]
  00260	e283301c	 add         r3, r3, #0x1C
  00264	e5832000	 str         r2, [r3]

; 160  :     
; 161  :     EmacStatInfo->m_TxDeferred          += EmacRegs->TXDEFERRED;

  00268	e59d3008	 ldr         r3, [sp, #8]
  0026c	e2831020	 add         r1, r3, #0x20
  00270	e59d300c	 ldr         r3, [sp, #0xC]
  00274	e2833f91	 add         r3, r3, #0x91, 30
  00278	e5932000	 ldr         r2, [r3]
  0027c	e5913000	 ldr         r3, [r1]
  00280	e0832002	 add         r2, r3, r2
  00284	e59d3008	 ldr         r3, [sp, #8]
  00288	e2833020	 add         r3, r3, #0x20
  0028c	e5832000	 str         r2, [r3]

; 162  :     
; 163  :     EmacStatInfo->m_TxMaxColl           += EmacRegs->TXEXCESSIVECOLL;

  00290	e59d3008	 ldr         r3, [sp, #8]
  00294	e2831024	 add         r1, r3, #0x24
  00298	e59d300c	 ldr         r3, [sp, #0xC]
  0029c	e2833f95	 add         r3, r3, #0x95, 30
  002a0	e5932000	 ldr         r2, [r3]
  002a4	e5913000	 ldr         r3, [r1]
  002a8	e0832002	 add         r2, r3, r2
  002ac	e59d3008	 ldr         r3, [sp, #8]
  002b0	e2833024	 add         r3, r3, #0x24
  002b4	e5832000	 str         r2, [r3]

; 164  :     
; 165  :     EmacStatInfo->m_RxOverRun           += (
; 166  :                                              EmacRegs->RXSOFOVERRUNS +
; 167  :                                              EmacRegs->RXMOFOVERRUNS +
; 168  :                                              EmacRegs->RXDMAOVERRUNS 
; 169  :                                            );

  002b8	e59d3008	 ldr         r3, [sp, #8]
  002bc	e2831028	 add         r1, r3, #0x28
  002c0	e59d300c	 ldr         r3, [sp, #0xC]
  002c4	e2832fa1	 add         r2, r3, #0xA1, 30
  002c8	e59d300c	 ldr         r3, [sp, #0xC]
  002cc	e2833fa2	 add         r3, r3, #0xA2, 30
  002d0	e5922000	 ldr         r2, [r2]
  002d4	e5933000	 ldr         r3, [r3]
  002d8	e0822003	 add         r2, r2, r3
  002dc	e59d300c	 ldr         r3, [sp, #0xC]
  002e0	e2833fa3	 add         r3, r3, #0xA3, 30
  002e4	e5933000	 ldr         r3, [r3]
  002e8	e0822003	 add         r2, r2, r3
  002ec	e5913000	 ldr         r3, [r1]
  002f0	e0832002	 add         r2, r3, r2
  002f4	e59d3008	 ldr         r3, [sp, #8]
  002f8	e2833028	 add         r3, r3, #0x28
  002fc	e5832000	 str         r2, [r3]

; 170  :     
; 171  :     
; 172  :     
; 173  : }    

  00300	e89d6000	 ldmia       sp, {sp, lr}
  00304	e12fff1e	 bx          lr
  00308		 |$M50648|

			 ENDP  ; |EmacUpdateStatistics|

	EXPORT	|??_C@_1GI@GGNOOJNA@?$AA?$DM?$AA?9?$AA?9?$AA?9?$AA?5?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAQ?$AAu?$AAe?$AAr?$AAy?$AAI?$AAn?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAi@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HG@KFDEFPBE@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AA?3?$AA?5?$AAQ?$AAu?$AAe?$AAr?$AAy?$AAI?$AAn?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?3@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HI@CCJOCEHC@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AA?3?$AA?5?$AAQ?$AAu?$AAe?$AAr?$AAy?$AAI?$AAn?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?3@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EC@GKGOJFLJ@?$AAM?$AAa?$AAc?$AA?5?$AAa?$AAd?$AAd?$AAr?$AA?5?$AAi?$AAs?$AA?5?$AA?$CF?$AAx?$AA?3?$AA?$CF?$AAx?$AA?3?$AA?$CF?$AAx?$AA?3?$AA?$CF?$AAx?$AA?3?$AA?$CF?$AAx?$AA?3?$AA?$CF?$AAx?$AA?4?$AA?$AN?$AA?6@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EE@DMHDCADD@?$AAO?$AAI?$AAD?$AA_?$AAG?$AAE?$AAN?$AA_?$AAL?$AAI?$AAN?$AAK?$AA_?$AAS?$AAP?$AAE?$AAE?$AAD?$AA?5?$AAi?$AAs?$AA?5?$AAc?$AAa?$AAl?$AAl?$AAe?$AAd?$AA?5?$AA?$CF?$AAu?$AA?$AN@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DC@BOGMBBBA@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAL?$AAi?$AAn?$AAk?$AA?5?$AAi?$AAs?$AA?5?$AAD?$AAo?$AAw?$AAn?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FK@FOCKCOFB@?$AAO?$AAI?$AAD?$AA_?$AAG?$AAE?$AAN?$AA_?$AAM?$AAE?$AAD?$AAI?$AAA?$AA_?$AAC?$AAO?$AAN?$AAN?$AAE?$AAC?$AAT?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA?5?$AAi?$AAs?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FK@KDEHFLBN@?$AA?9?$AA?9?$AA?9?$AA?$DO?$AA?5?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAQ?$AAu?$AAe?$AAr?$AAy?$AAI?$AAn?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAi@| [ DATA ] ; `string'
	EXPORT	|Emac_MiniportQueryInformation|
	IMPORT	|ReadPhyRegister|
	IMPORT	|memcpy|

  00010			 AREA	 |.pdata|, PDATA
|$T50706| DCD	|$LN107@Emac_Minip@2|
	DCD	0x40022904

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GI@GGNOOJNA@?$AA?$DM?$AA?9?$AA?9?$AA?9?$AA?5?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAQ?$AAu?$AAe?$AAr?$AAy?$AAI?$AAn?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAi@| DCB "<"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, " ", 0x0, "E", 0x0, "m"
	DCB	0x0, "a", 0x0, "c", 0x0, "_", 0x0, "M", 0x0, "i", 0x0, "n"
	DCB	0x0, "i", 0x0, "p", 0x0, "o", 0x0, "r", 0x0, "t", 0x0, "Q"
	DCB	0x0, "u", 0x0, "e", 0x0, "r", 0x0, "y", 0x0, "I", 0x0, "n"
	DCB	0x0, "f", 0x0, "o", 0x0, "r", 0x0, "m", 0x0, "a", 0x0, "t"
	DCB	0x0, "i", 0x0, "o", 0x0, "n", 0x0, " ", 0x0, "s", 0x0, "t"
	DCB	0x0, "a", 0x0, "t", 0x0, "u", 0x0, "s", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, " "
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HG@KFDEFPBE@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AA?3?$AA?5?$AAQ?$AAu?$AAe?$AAr?$AAy?$AAI?$AAn?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?3@| DCB "E"
	DCB	0x0, "m", 0x0, "a", 0x0, "c", 0x0, "_", 0x0, "M", 0x0, "i"
	DCB	0x0, "n", 0x0, "i", 0x0, "p", 0x0, "o", 0x0, "r", 0x0, "t"
	DCB	0x0, ":", 0x0, " ", 0x0, "Q", 0x0, "u", 0x0, "e", 0x0, "r"
	DCB	0x0, "y", 0x0, "I", 0x0, "n", 0x0, "f", 0x0, "o", 0x0, "r"
	DCB	0x0, "m", 0x0, "a", 0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n"
	DCB	0x0, ":", 0x0, " ", 0x0, "G", 0x0, "o", 0x0, "t", 0x0, " "
	DCB	0x0, "O", 0x0, "I", 0x0, "D", 0x0, "_", 0x0, "P", 0x0, "N"
	DCB	0x0, "P", 0x0, "_", 0x0, "Q", 0x0, "U", 0x0, "E", 0x0, "R"
	DCB	0x0, "Y", 0x0, "_", 0x0, "P", 0x0, "O", 0x0, "W", 0x0, "E"
	DCB	0x0, "R", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HI@CCJOCEHC@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AA?3?$AA?5?$AAQ?$AAu?$AAe?$AAr?$AAy?$AAI?$AAn?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?3@| DCB "E"
	DCB	0x0, "m", 0x0, "a", 0x0, "c", 0x0, "_", 0x0, "M", 0x0, "i"
	DCB	0x0, "n", 0x0, "i", 0x0, "p", 0x0, "o", 0x0, "r", 0x0, "t"
	DCB	0x0, ":", 0x0, " ", 0x0, "Q", 0x0, "u", 0x0, "e", 0x0, "r"
	DCB	0x0, "y", 0x0, "I", 0x0, "n", 0x0, "f", 0x0, "o", 0x0, "r"
	DCB	0x0, "m", 0x0, "a", 0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n"
	DCB	0x0, ":", 0x0, " ", 0x0, "G", 0x0, "o", 0x0, "t", 0x0, " "
	DCB	0x0, "O", 0x0, "I", 0x0, "D", 0x0, "_", 0x0, "P", 0x0, "N"
	DCB	0x0, "P", 0x0, "_", 0x0, "C", 0x0, "A", 0x0, "P", 0x0, "A"
	DCB	0x0, "B", 0x0, "I", 0x0, "L", 0x0, "I", 0x0, "T", 0x0, "I"
	DCB	0x0, "E", 0x0, "S", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EC@GKGOJFLJ@?$AAM?$AAa?$AAc?$AA?5?$AAa?$AAd?$AAd?$AAr?$AA?5?$AAi?$AAs?$AA?5?$AA?$CF?$AAx?$AA?3?$AA?$CF?$AAx?$AA?3?$AA?$CF?$AAx?$AA?3?$AA?$CF?$AAx?$AA?3?$AA?$CF?$AAx?$AA?3?$AA?$CF?$AAx?$AA?4?$AA?$AN?$AA?6@| DCB "M"
	DCB	0x0, "a", 0x0, "c", 0x0, " ", 0x0, "a", 0x0, "d", 0x0, "d"
	DCB	0x0, "r", 0x0, " ", 0x0, "i", 0x0, "s", 0x0, " ", 0x0, "%"
	DCB	0x0, "x", 0x0, ":", 0x0, "%", 0x0, "x", 0x0, ":", 0x0, "%"
	DCB	0x0, "x", 0x0, ":", 0x0, "%", 0x0, "x", 0x0, ":", 0x0, "%"
	DCB	0x0, "x", 0x0, ":", 0x0, "%", 0x0, "x", 0x0, ".", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EE@DMHDCADD@?$AAO?$AAI?$AAD?$AA_?$AAG?$AAE?$AAN?$AA_?$AAL?$AAI?$AAN?$AAK?$AA_?$AAS?$AAP?$AAE?$AAE?$AAD?$AA?5?$AAi?$AAs?$AA?5?$AAc?$AAa?$AAl?$AAl?$AAe?$AAd?$AA?5?$AA?$CF?$AAu?$AA?$AN@| DCB "O"
	DCB	0x0, "I", 0x0, "D", 0x0, "_", 0x0, "G", 0x0, "E", 0x0, "N"
	DCB	0x0, "_", 0x0, "L", 0x0, "I", 0x0, "N", 0x0, "K", 0x0, "_"
	DCB	0x0, "S", 0x0, "P", 0x0, "E", 0x0, "E", 0x0, "D", 0x0, " "
	DCB	0x0, "i", 0x0, "s", 0x0, " ", 0x0, "c", 0x0, "a", 0x0, "l"
	DCB	0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "%", 0x0, "u"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DC@BOGMBBBA@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAL?$AAi?$AAn?$AAk?$AA?5?$AAi?$AAs?$AA?5?$AAD?$AAo?$AAw?$AAn?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@| DCB "W"
	DCB	0x0, "A", 0x0, "R", 0x0, "N", 0x0, ":", 0x0, " ", 0x0, "L"
	DCB	0x0, "i", 0x0, "n", 0x0, "k", 0x0, " ", 0x0, "i", 0x0, "s"
	DCB	0x0, " ", 0x0, "D", 0x0, "o", 0x0, "w", 0x0, "n", 0x0, "!"
	DCB	0x0, "!", 0x0, "!", 0x0, "!", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FK@FOCKCOFB@?$AAO?$AAI?$AAD?$AA_?$AAG?$AAE?$AAN?$AA_?$AAM?$AAE?$AAD?$AAI?$AAA?$AA_?$AAC?$AAO?$AAN?$AAN?$AAE?$AAC?$AAT?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA?5?$AAi?$AAs?$AA?5@| DCB "O"
	DCB	0x0, "I", 0x0, "D", 0x0, "_", 0x0, "G", 0x0, "E", 0x0, "N"
	DCB	0x0, "_", 0x0, "M", 0x0, "E", 0x0, "D", 0x0, "I", 0x0, "A"
	DCB	0x0, "_", 0x0, "C", 0x0, "O", 0x0, "N", 0x0, "N", 0x0, "E"
	DCB	0x0, "C", 0x0, "T", 0x0, "_", 0x0, "S", 0x0, "T", 0x0, "A"
	DCB	0x0, "T", 0x0, "U", 0x0, "S", 0x0, " ", 0x0, "i", 0x0, "s"
	DCB	0x0, " ", 0x0, "c", 0x0, "a", 0x0, "l", 0x0, "l", 0x0, "e"
	DCB	0x0, "d", 0x0, " ", 0x0, "%", 0x0, "u", 0x0, " ", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FK@KDEHFLBN@?$AA?9?$AA?9?$AA?9?$AA?$DO?$AA?5?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAQ?$AAu?$AAe?$AAr?$AAy?$AAI?$AAn?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAi@| DCB "-"
	DCB	0x0, "-", 0x0, "-", 0x0, ">", 0x0, " ", 0x0, "E", 0x0, "m"
	DCB	0x0, "a", 0x0, "c", 0x0, "_", 0x0, "M", 0x0, "i", 0x0, "n"
	DCB	0x0, "i", 0x0, "p", 0x0, "o", 0x0, "r", 0x0, "t", 0x0, "Q"
	DCB	0x0, "u", 0x0, "e", 0x0, "r", 0x0, "y", 0x0, "I", 0x0, "n"
	DCB	0x0, "f", 0x0, "o", 0x0, "r", 0x0, "m", 0x0, "a", 0x0, "t"
	DCB	0x0, "i", 0x0, "o", 0x0, "n", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, " ", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  00308			 AREA	 |.text|, CODE, ARM

  00308		 |Emac_MiniportQueryInformation| PROC

; 209  : {

  00308		 |$LN107@Emac_Minip@2|
  00308	e1a0c00d	 mov         r12, sp
  0030c	e92d000f	 stmdb       sp!, {r0 - r3}
  00310	e92d5000	 stmdb       sp!, {r12, lr}
  00314	e24dd080	 sub         sp, sp, #0x80
  00318		 |$M50703|

; 210  :     NDIS_STATUS                 Status = NDIS_STATUS_SUCCESS;

  00318	e3a03000	 mov         r3, #0
  0031c	e58d3020	 str         r3, [sp, #0x20]

; 211  :     NDIS_MEDIUM                 Medium = NIC_MEDIA_TYPE;

  00320	e3a03000	 mov         r3, #0
  00324	e58d3018	 str         r3, [sp, #0x18]

; 212  :     UCHAR                       VendorId[4];
; 213  :     static const UCHAR          VendorDescriptor[] = "TI- EMAC ADAPTER";
; 214  :     ULONG                       TempRegVal;
; 215  :     ULONG                       ulInfo = 0;

  00328	e3a03000	 mov         r3, #0
  0032c	e58d3024	 str         r3, [sp, #0x24]

; 216  :     PVOID                       pInfo = (PVOID) &ulInfo;

  00330	e28d3024	 add         r3, sp, #0x24
  00334	e58d3014	 str         r3, [sp, #0x14]

; 217  :     ULONG                       ulInfoLen = sizeof(ulInfo);

  00338	e3a03004	 mov         r3, #4
  0033c	e58d300c	 str         r3, [sp, #0xC]

; 218  :     ULONG                       ulBytesAvailable = ulInfoLen;

  00340	e59d300c	 ldr         r3, [sp, #0xC]
  00344	e58d3028	 str         r3, [sp, #0x28]

; 219  :     PEMAC_ADAPTER               pAdapter;
; 220  :     PEMAC_STATINFO              pEmacStatInfo;
; 221  :     NDIS_PNP_CAPABILITIES       Capabilites;
; 222  :     NDIS_DEVICE_POWER_STATE     PowerState;
; 223  :     
; 224  :     pAdapter = (PEMAC_ADAPTER) MiniportAdapterContext;

  00348	e59d3088	 ldr         r3, [sp, #0x88]
  0034c	e58d3030	 str         r3, [sp, #0x30]

; 225  :     
; 226  :     DEBUGMSG(DBG_FUNC && DBG_OID, 
; 227  :             (L"---> Emac_MiniportQueryInformation 0x%08X \r\n",Oid));

  00350	e59f37f0	 ldr         r3, [pc, #0x7F0]
  00354	e5933440	 ldr         r3, [r3, #0x440]
  00358	e3130080	 tst         r3, #0x80
  0035c	0a000009	 beq         |$LN58@Emac_Minip@2|
  00360	e59f37e0	 ldr         r3, [pc, #0x7E0]
  00364	e5933440	 ldr         r3, [r3, #0x440]
  00368	e3130c01	 tst         r3, #1, 24
  0036c	0a000005	 beq         |$LN58@Emac_Minip@2|
  00370	e59d108c	 ldr         r1, [sp, #0x8C]
  00374	e59f082c	 ldr         r0, [pc, #0x82C]
  00378	eb000000	 bl          NKDbgPrintfW
  0037c	e3a03001	 mov         r3, #1
  00380	e58d3058	 str         r3, [sp, #0x58]
  00384	ea000001	 b           |$LN59@Emac_Minip@2|
  00388		 |$LN58@Emac_Minip@2|
  00388	e3a03000	 mov         r3, #0
  0038c	e58d3058	 str         r3, [sp, #0x58]
  00390		 |$LN59@Emac_Minip@2|

; 228  :    
; 229  :     //
; 230  :     // Process different type of requests
; 231  :     //
; 232  :     switch(Oid)

  00390	e59d308c	 ldr         r3, [sp, #0x8C]
  00394	e58d305c	 str         r3, [sp, #0x5C]
  00398	e59d205c	 ldr         r2, [sp, #0x5C]
  0039c	e59f3800	 ldr         r3, [pc, #0x800]
  003a0	e1520003	 cmp         r2, r3
  003a4	8a000025	 bhi         |$LN70@Emac_Minip@2|
  003a8	e59d205c	 ldr         r2, [sp, #0x5C]
  003ac	e59f37ec	 ldr         r3, [pc, #0x7EC]
  003b0	e1520003	 cmp         r2, r3
  003b4	2a0000d7	 bcs         |$LN31@Emac_Minip@2|
  003b8	e59d205c	 ldr         r2, [sp, #0x5C]
  003bc	e59f37d8	 ldr         r3, [pc, #0x7D8]
  003c0	e0423003	 sub         r3, r2, r3
  003c4	e58d305c	 str         r3, [sp, #0x5C]
  003c8	e59d305c	 ldr         r3, [sp, #0x5C]
  003cc	e3530015	 cmp         r3, #0x15
  003d0	8a000134	 bhi         |$LN19@Emac_Minip@2|
  003d4	e59d205c	 ldr         r2, [sp, #0x5C]
  003d8	e1a03102	 mov         r3, r2, lsl #2
  003dc	e083300f	 add         r3, r3, pc
  003e0	e5933004	 ldr         r3, [r3, #4]
  003e4	e08ff003	 add         pc, pc, r3
  003e8		 |$LN75@Emac_Minip@2|
  003e8		 |$LN74@Emac_Minip@2|
  003e8		 |$LN76@Emac_Minip@2|
  003e8	000000ac	 DCD         0xac
  003ec		 |$LN77@Emac_Minip@2|
  003ec	000000c8	 DCD         0xc8
  003f0		 |$LN78@Emac_Minip@2|
  003f0	000000e8	 DCD         0xe8
  003f4		 |$LN79@Emac_Minip@2|
  003f4	000000e8	 DCD         0xe8
  003f8		 |$LN80@Emac_Minip@2|
  003f8	00000114	 DCD         0x114
  003fc		 |$LN81@Emac_Minip@2|
  003fc	00000114	 DCD         0x114
  00400		 |$LN82@Emac_Minip@2|
  00400	00000248	 DCD         0x248
  00404		 |$LN83@Emac_Minip@2|
  00404	00000124	 DCD         0x124
  00408		 |$LN84@Emac_Minip@2|
  00408	00000144	 DCD         0x144
  0040c		 |$LN85@Emac_Minip@2|
  0040c	00000104	 DCD         0x104
  00410		 |$LN86@Emac_Minip@2|
  00410	00000104	 DCD         0x104
  00414		 |$LN87@Emac_Minip@2|
  00414	0000017c	 DCD         0x17c
  00418		 |$LN88@Emac_Minip@2|
  00418	000001b4	 DCD         0x1b4
  0041c		 |$LN89@Emac_Minip@2|
  0041c	00000318	 DCD         0x318
  00420		 |$LN90@Emac_Minip@2|
  00420	00000114	 DCD         0x114
  00424		 |$LN91@Emac_Minip@2|
  00424	000001e0	 DCD         0x1e0
  00428		 |$LN92@Emac_Minip@2|
  00428	00000104	 DCD         0x104
  0042c		 |$LN93@Emac_Minip@2|
  0042c	000004bc	 DCD         0x4bc
  00430		 |$LN94@Emac_Minip@2|
  00430	00000170	 DCD         0x170
  00434		 |$LN95@Emac_Minip@2|
  00434	000001ec	 DCD         0x1ec
  00438		 |$LN96@Emac_Minip@2|
  00438	00000164	 DCD         0x164
  0043c		 |$LN97@Emac_Minip@2|
  0043c	000001d0	 DCD         0x1d0
  00440		 |$LN70@Emac_Minip@2|
  00440	e59d205c	 ldr         r2, [sp, #0x5C]
  00444	e59f374c	 ldr         r3, [pc, #0x74C]
  00448	e1520003	 cmp         r2, r3
  0044c	8a00000c	 bhi         |$LN71@Emac_Minip@2|
  00450	e59d205c	 ldr         r2, [sp, #0x5C]
  00454	e59f373c	 ldr         r3, [pc, #0x73C]
  00458	e1520003	 cmp         r2, r3
  0045c	0a0000e4	 beq         |$LN28@Emac_Minip@2|
  00460	e59d205c	 ldr         r2, [sp, #0x5C]
  00464	e59f3728	 ldr         r3, [pc, #0x728]
  00468	e1520003	 cmp         r2, r3
  0046c	0a0000d4	 beq         |$LN29@Emac_Minip@2|
  00470	e59d205c	 ldr         r2, [sp, #0x5C]
  00474	e59f3714	 ldr         r3, [pc, #0x714]
  00478	e1520003	 cmp         r2, r3
  0047c	0a0000cd	 beq         |$LN30@Emac_Minip@2|
  00480	ea000108	 b           |$LN19@Emac_Minip@2|
  00484		 |$LN71@Emac_Minip@2|
  00484	e59d205c	 ldr         r2, [sp, #0x5C]
  00488	e59f36fc	 ldr         r3, [pc, #0x6FC]
  0048c	e1520003	 cmp         r2, r3
  00490	0a0000e4	 beq         |$LN27@Emac_Minip@2|
  00494	ea000103	 b           |$LN19@Emac_Minip@2|
  00498		 |$LN53@Emac_Minip@2|

; 233  :     {
; 234  :         case OID_GEN_SUPPORTED_LIST:
; 235  :             pInfo = (PVOID) NICSupportedOids;

  00498	e59f36e8	 ldr         r3, [pc, #0x6E8]
  0049c	e58d3014	 str         r3, [sp, #0x14]

; 236  :             ulBytesAvailable = ulInfoLen = sizeof(NICSupportedOids);

  004a0	e3a0309c	 mov         r3, #0x9C
  004a4	e58d300c	 str         r3, [sp, #0xC]
  004a8	e59d300c	 ldr         r3, [sp, #0xC]
  004ac	e58d3028	 str         r3, [sp, #0x28]

; 237  :             break;

  004b0	ea000172	 b           |$LN54@Emac_Minip@2|
  004b4		 |$LN52@Emac_Minip@2|

; 238  :         
; 239  :         case OID_GEN_HARDWARE_STATUS:
; 240  :             pInfo = (PVOID) &pAdapter->m_HwStatus;

  004b4	e59d3030	 ldr         r3, [sp, #0x30]
  004b8	e2833e1a	 add         r3, r3, #0x1A, 28
  004bc	e58d3014	 str         r3, [sp, #0x14]

; 241  :             ulBytesAvailable = ulInfoLen = sizeof(NDIS_HARDWARE_STATUS);

  004c0	e3a03004	 mov         r3, #4
  004c4	e58d300c	 str         r3, [sp, #0xC]
  004c8	e59d300c	 ldr         r3, [sp, #0xC]
  004cc	e58d3028	 str         r3, [sp, #0x28]

; 242  :             break;     

  004d0	ea00016a	 b           |$LN54@Emac_Minip@2|
  004d4		 |$LN51@Emac_Minip@2|

; 243  :            
; 244  :         case OID_GEN_MEDIA_SUPPORTED:
; 245  :         case OID_GEN_MEDIA_IN_USE:
; 246  :             pInfo = (PVOID) &Medium;

  004d4	e28d3018	 add         r3, sp, #0x18
  004d8	e58d3014	 str         r3, [sp, #0x14]

; 247  :             ulBytesAvailable = ulInfoLen = sizeof(NDIS_MEDIUM);

  004dc	e3a03004	 mov         r3, #4
  004e0	e58d300c	 str         r3, [sp, #0xC]
  004e4	e59d300c	 ldr         r3, [sp, #0xC]
  004e8	e58d3028	 str         r3, [sp, #0x28]

; 248  :             break;

  004ec	ea000163	 b           |$LN54@Emac_Minip@2|
  004f0		 |$LN50@Emac_Minip@2|

; 249  :             
; 250  :         case OID_GEN_MAXIMUM_TOTAL_SIZE:
; 251  :         case OID_GEN_TRANSMIT_BLOCK_SIZE:
; 252  :         case OID_GEN_RECEIVE_BLOCK_SIZE:
; 253  :             ulInfo = (ULONG) EMAC_MAX_ETHERNET_PKT_SIZE;

  004f0	e3a03c05	 mov         r3, #5, 24
  004f4	e38330ea	 orr         r3, r3, #0xEA
  004f8	e58d3024	 str         r3, [sp, #0x24]

; 254  :             break;

  004fc	ea00015f	 b           |$LN54@Emac_Minip@2|
  00500		 |$LN49@Emac_Minip@2|

; 255  :         
; 256  :         case OID_GEN_MAXIMUM_LOOKAHEAD:
; 257  :         case OID_GEN_CURRENT_LOOKAHEAD:
; 258  :         case OID_GEN_MAXIMUM_FRAME_SIZE:
; 259  :             ulInfo = EMAC_MAX_ETHERNET_PKT_SIZE - EMAC_HEADER_SIZE;;

  00500	e3a03c05	 mov         r3, #5, 24
  00504	e38330dc	 orr         r3, r3, #0xDC
  00508	e58d3024	 str         r3, [sp, #0x24]

; 260  :             break;

  0050c	ea00015b	 b           |$LN54@Emac_Minip@2|
  00510		 |$LN48@Emac_Minip@2|

; 261  :              
; 262  :        case OID_GEN_TRANSMIT_BUFFER_SPACE:
; 263  :             ulInfo = (ULONG) EMAC_MAX_ETHERNET_PKT_SIZE * pAdapter->m_MaxTxEmacBufs;

  00510	e59d3030	 ldr         r3, [sp, #0x30]
  00514	e283302a	 add         r3, r3, #0x2A
  00518	e1d320b0	 ldrh        r2, [r3]
  0051c	e3a03c05	 mov         r3, #5, 24
  00520	e38330ea	 orr         r3, r3, #0xEA
  00524	e0030392	 mul         r3, r2, r3
  00528	e58d3024	 str         r3, [sp, #0x24]

; 264  :             break;

  0052c	ea000153	 b           |$LN54@Emac_Minip@2|
  00530		 |$LN47@Emac_Minip@2|

; 265  : 
; 266  :         case OID_GEN_RECEIVE_BUFFER_SPACE:
; 267  :             ulInfo = (ULONG) EMAC_MAX_ETHERNET_PKT_SIZE * pAdapter->m_NumRxIndicatePkts;

  00530	e59d3030	 ldr         r3, [sp, #0x30]
  00534	e2833024	 add         r3, r3, #0x24
  00538	e1d320b0	 ldrh        r2, [r3]
  0053c	e3a03c05	 mov         r3, #5, 24
  00540	e38330ea	 orr         r3, r3, #0xEA
  00544	e0030392	 mul         r3, r2, r3
  00548	e58d3024	 str         r3, [sp, #0x24]

; 268  :             break;

  0054c	ea00014b	 b           |$LN54@Emac_Minip@2|
  00550		 |$LN46@Emac_Minip@2|

; 269  :             
; 270  :         case OID_GEN_MAXIMUM_SEND_PACKETS:
; 271  :             ulInfo = MAX_NUM_PACKETS_PER_SEND;

  00550	e3a03c01	 mov         r3, #1, 24
  00554	e58d3024	 str         r3, [sp, #0x24]

; 272  :             break;

  00558	ea000148	 b           |$LN54@Emac_Minip@2|
  0055c		 |$LN45@Emac_Minip@2|

; 273  :             
; 274  :         case OID_GEN_MAC_OPTIONS:
; 275  :             // Notes: 
; 276  :             // The protocol driver is free to access indicated data by any means. 
; 277  :             // Some fast-copy functions have trouble accessing on-board device 
; 278  :             // memory. NIC drivers that indicate data out of mapped device memory 
; 279  :             // should never set this flag. If a NIC driver does set this flag, it 
; 280  :             // relaxes the restriction on fast-copy functions. 
; 281  : 
; 282  :             // This miniport indicates receive with NdisMIndicateReceivePacket 
; 283  :             // function. It has no MiniportTransferData function. Such a driver 
; 284  :             // should set this flag. 
; 285  : 
; 286  :             ulInfo = (
; 287  :                       NDIS_MAC_OPTION_COPY_LOOKAHEAD_DATA | 
; 288  :                       NDIS_MAC_OPTION_TRANSFERS_NOT_PEND  |
; 289  :                       NDIS_MAC_OPTION_NO_LOOPBACK 
; 290  :                      );

  0055c	e3a0300d	 mov         r3, #0xD
  00560	e58d3024	 str         r3, [sp, #0x24]

; 291  : #if 0
; 292  :             ulInfo |= NDIS_MAC_OPTION_FULL_DUPLEX    
; 293  : #endif
; 294  :             break;     

  00564	ea000145	 b           |$LN54@Emac_Minip@2|
  00568		 |$LN44@Emac_Minip@2|

; 295  :         
; 296  :         case OID_GEN_VENDOR_ID:
; 297  :             /* A 3-byte IEEE vendor code, followed by a single byte the vendor
; 298  :              * assigns to identify a particular vendor-supplied network
; 299  :              * interface card driver. The IEEE code uniquely identifies the
; 300  :              * vendor and is the same as the three bytes appearing at the
; 301  :              * beginning of the NIC hardware address. 
; 302  :              */ 
; 303  :             NdisMoveMemory(VendorId, pAdapter->m_MACAddress, 3);

  00568	e3a02003	 mov         r2, #3
  0056c	e59d3030	 ldr         r3, [sp, #0x30]
  00570	e2831014	 add         r1, r3, #0x14
  00574	e28d0044	 add         r0, sp, #0x44
  00578	eb000000	 bl          memcpy

; 304  :             VendorId[3] = 0x0;

  0057c	e3a03000	 mov         r3, #0
  00580	e5cd3047	 strb        r3, [sp, #0x47]

; 305  :             pInfo = VendorId;

  00584	e28d3044	 add         r3, sp, #0x44
  00588	e58d3014	 str         r3, [sp, #0x14]

; 306  :             ulBytesAvailable = ulInfoLen = sizeof(VendorId);

  0058c	e3a03004	 mov         r3, #4
  00590	e58d300c	 str         r3, [sp, #0xC]
  00594	e59d300c	 ldr         r3, [sp, #0xC]
  00598	e58d3028	 str         r3, [sp, #0x28]

; 307  :             break; 

  0059c	ea000137	 b           |$LN54@Emac_Minip@2|
  005a0		 |$LN43@Emac_Minip@2|

; 308  :                    
; 309  :         case OID_GEN_VENDOR_DESCRIPTION:
; 310  : 
; 311  :             pInfo = (PVOID) &VendorDescriptor;

  005a0	e59f35dc	 ldr         r3, [pc, #0x5DC]
  005a4	e58d3014	 str         r3, [sp, #0x14]

; 312  :             ulBytesAvailable = ulInfoLen = sizeof(VendorDescriptor);

  005a8	e3a03011	 mov         r3, #0x11
  005ac	e58d300c	 str         r3, [sp, #0xC]
  005b0	e59d300c	 ldr         r3, [sp, #0xC]
  005b4	e58d3028	 str         r3, [sp, #0x28]

; 313  :             break;

  005b8	ea000130	 b           |$LN54@Emac_Minip@2|
  005bc		 |$LN42@Emac_Minip@2|

; 314  :             
; 315  :         case OID_GEN_VENDOR_DRIVER_VERSION:
; 316  :             ulInfo = VendorDriverVersion;

  005bc	e59f35bc	 ldr         r3, [pc, #0x5BC]
  005c0	e5933000	 ldr         r3, [r3]
  005c4	e58d3024	 str         r3, [sp, #0x24]

; 317  :             break;

  005c8	ea00012c	 b           |$LN54@Emac_Minip@2|
  005cc		 |$LN41@Emac_Minip@2|

; 318  :         
; 319  :         case OID_GEN_DRIVER_VERSION:
; 320  : 
; 321  :             ulInfo  =  EMAC_NDIS_DRIVER_VERSION;

  005cc	e3a03c05	 mov         r3, #5, 24
  005d0	e58d3024	 str         r3, [sp, #0x24]

; 322  :             break;

  005d4	ea000129	 b           |$LN54@Emac_Minip@2|
  005d8		 |$LN40@Emac_Minip@2|

; 323  :                 
; 324  :         case OID_GEN_MEDIA_CONNECT_STATUS:
; 325  :             
; 326  :             
; 327  :             if(UP == pAdapter->m_LinkStatus)

  005d8	e59d3030	 ldr         r3, [sp, #0x30]
  005dc	e2833f69	 add         r3, r3, #0x69, 30
  005e0	e5933000	 ldr         r3, [r3]
  005e4	e3530000	 cmp         r3, #0
  005e8	1a000002	 bne         |$LN39@Emac_Minip@2|

; 328  :             {
; 329  :                 ulInfo = NdisMediaStateConnected;

  005ec	e3a03000	 mov         r3, #0
  005f0	e58d3024	 str         r3, [sp, #0x24]

; 330  :             }
; 331  :             else 

  005f4	ea000001	 b           |$LN38@Emac_Minip@2|
  005f8		 |$LN39@Emac_Minip@2|

; 332  :             {
; 333  :                 ulInfo  = NdisMediaStateDisconnected; 

  005f8	e3a03001	 mov         r3, #1
  005fc	e58d3024	 str         r3, [sp, #0x24]
  00600		 |$LN38@Emac_Minip@2|

; 334  :             }
; 335  :             DEBUGMSG (DBG_OID , (L"OID_GEN_MEDIA_CONNECT_STATUS is called %u \r\n",ulInfo));

  00600	e59f3540	 ldr         r3, [pc, #0x540]
  00604	e5933440	 ldr         r3, [r3, #0x440]
  00608	e3130c01	 tst         r3, #1, 24
  0060c	0a000005	 beq         |$LN60@Emac_Minip@2|
  00610	e59d1024	 ldr         r1, [sp, #0x24]
  00614	e59f0560	 ldr         r0, [pc, #0x560]
  00618	eb000000	 bl          NKDbgPrintfW
  0061c	e3a03001	 mov         r3, #1
  00620	e58d3060	 str         r3, [sp, #0x60]
  00624	ea000001	 b           |$LN61@Emac_Minip@2|
  00628		 |$LN60@Emac_Minip@2|
  00628	e3a03000	 mov         r3, #0
  0062c	e58d3060	 str         r3, [sp, #0x60]
  00630		 |$LN61@Emac_Minip@2|

; 336  :             break;

  00630	ea000112	 b           |$LN54@Emac_Minip@2|
  00634		 |$LN37@Emac_Minip@2|

; 337  :        
; 338  :         case OID_GEN_LINK_SPEED:
; 339  :             
; 340  :             TempRegVal = ReadPhyRegister(pAdapter->m_ActivePhy, MII_CONTROL_REG);

  00634	e3a01000	 mov         r1, #0
  00638	e59d3030	 ldr         r3, [sp, #0x30]
  0063c	e2833f6a	 add         r3, r3, #0x6A, 30
  00640	e5930000	 ldr         r0, [r3]
  00644	eb000000	 bl          ReadPhyRegister
  00648	e58d0064	 str         r0, [sp, #0x64]
  0064c	e59d3064	 ldr         r3, [sp, #0x64]
  00650	e58d302c	 str         r3, [sp, #0x2C]

; 341  :             if((0 == (TempRegVal & BIT(6))) && (0 == (TempRegVal & BIT(13))))

  00654	e59d302c	 ldr         r3, [sp, #0x2C]
  00658	e3130040	 tst         r3, #0x40
  0065c	1a000006	 bne         |$LN36@Emac_Minip@2|
  00660	e59d302c	 ldr         r3, [sp, #0x2C]
  00664	e3130a02	 tst         r3, #2, 20
  00668	1a000003	 bne         |$LN36@Emac_Minip@2|

; 342  :             {
; 343  :                 ulInfo = 100000;

  0066c	e3a03b61	 mov         r3, #0x61, 22
  00670	e3833e2a	 orr         r3, r3, #0x2A, 28
  00674	e58d3024	 str         r3, [sp, #0x24]
  00678	ea000014	 b           |$LN35@Emac_Minip@2|
  0067c		 |$LN36@Emac_Minip@2|

; 344  :             }
; 345  :             else if((0 == (TempRegVal & BIT(6))) && (0 != (TempRegVal & BIT(13))))

  0067c	e59d302c	 ldr         r3, [sp, #0x2C]
  00680	e3130040	 tst         r3, #0x40
  00684	1a000006	 bne         |$LN34@Emac_Minip@2|
  00688	e59d302c	 ldr         r3, [sp, #0x2C]
  0068c	e3130a02	 tst         r3, #2, 20
  00690	0a000003	 beq         |$LN34@Emac_Minip@2|

; 346  :             {
; 347  :                 ulInfo = 1000000;

  00694	e3a0393d	 mov         r3, #0x3D, 18
  00698	e3833d09	 orr         r3, r3, #9, 26
  0069c	e58d3024	 str         r3, [sp, #0x24]

; 348  :             }
; 349  :             else

  006a0	ea00000a	 b           |$LN33@Emac_Minip@2|
  006a4		 |$LN34@Emac_Minip@2|

; 350  :             {
; 351  :                 DEBUGMSG(DBG_WARN,(L"WARN: Link is Down!!!!\r\n"));

  006a4	e59f349c	 ldr         r3, [pc, #0x49C]
  006a8	e5933440	 ldr         r3, [r3, #0x440]
  006ac	e3130901	 tst         r3, #1, 18
  006b0	0a000004	 beq         |$LN62@Emac_Minip@2|
  006b4	e59f04bc	 ldr         r0, [pc, #0x4BC]
  006b8	eb000000	 bl          NKDbgPrintfW
  006bc	e3a03001	 mov         r3, #1
  006c0	e58d3068	 str         r3, [sp, #0x68]
  006c4	ea000001	 b           |$LN63@Emac_Minip@2|
  006c8		 |$LN62@Emac_Minip@2|
  006c8	e3a03000	 mov         r3, #0
  006cc	e58d3068	 str         r3, [sp, #0x68]
  006d0		 |$LN63@Emac_Minip@2|
  006d0		 |$LN33@Emac_Minip@2|
  006d0		 |$LN35@Emac_Minip@2|

; 352  :             }
; 353  : 
; 354  :             DEBUGMSG (DBG_OID, (L"OID_GEN_LINK_SPEED is called %u\r\n",ulInfo));

  006d0	e59f3470	 ldr         r3, [pc, #0x470]
  006d4	e5933440	 ldr         r3, [r3, #0x440]
  006d8	e3130c01	 tst         r3, #1, 24
  006dc	0a000005	 beq         |$LN64@Emac_Minip@2|
  006e0	e59d1024	 ldr         r1, [sp, #0x24]
  006e4	e59f0488	 ldr         r0, [pc, #0x488]
  006e8	eb000000	 bl          NKDbgPrintfW
  006ec	e3a03001	 mov         r3, #1
  006f0	e58d306c	 str         r3, [sp, #0x6C]
  006f4	ea000001	 b           |$LN65@Emac_Minip@2|
  006f8		 |$LN64@Emac_Minip@2|
  006f8	e3a03000	 mov         r3, #0
  006fc	e58d306c	 str         r3, [sp, #0x6C]
  00700		 |$LN65@Emac_Minip@2|

; 355  :             break;

  00700	ea0000de	 b           |$LN54@Emac_Minip@2|
  00704		 |$LN32@Emac_Minip@2|

; 356  :         
; 357  :         case OID_GEN_CURRENT_PACKET_FILTER:
; 358  :             ulInfo = pAdapter->m_PacketFilter;

  00704	e59d3030	 ldr         r3, [sp, #0x30]
  00708	e2833f6b	 add         r3, r3, #0x6B, 30
  0070c	e5933000	 ldr         r3, [r3]
  00710	e58d3024	 str         r3, [sp, #0x24]

; 359  :             break;               

  00714	ea0000d9	 b           |$LN54@Emac_Minip@2|
  00718		 |$LN31@Emac_Minip@2|

; 360  :             
; 361  :         case OID_802_3_PERMANENT_ADDRESS:
; 362  :         case OID_802_3_CURRENT_ADDRESS:
; 363  :             pInfo = pAdapter->m_MACAddress;

  00718	e59d3030	 ldr         r3, [sp, #0x30]
  0071c	e2833014	 add         r3, r3, #0x14
  00720	e58d3014	 str         r3, [sp, #0x14]

; 364  :             DEBUGMSG (DBG_OID, (L"Mac addr is %x:%x:%x:%x:%x:%x.\r\n",
; 365  :             pAdapter->m_MACAddress[0],pAdapter->m_MACAddress[1],pAdapter->m_MACAddress[2],
; 366  :             pAdapter->m_MACAddress[3],pAdapter->m_MACAddress[4],pAdapter->m_MACAddress[5]));

  00724	e59f341c	 ldr         r3, [pc, #0x41C]
  00728	e5933440	 ldr         r3, [r3, #0x440]
  0072c	e3130c01	 tst         r3, #1, 24
  00730	0a000019	 beq         |$LN66@Emac_Minip@2|
  00734	e59d3030	 ldr         r3, [sp, #0x30]
  00738	e2833019	 add         r3, r3, #0x19
  0073c	e5d33000	 ldrb        r3, [r3]
  00740	e58d3008	 str         r3, [sp, #8]
  00744	e59d3030	 ldr         r3, [sp, #0x30]
  00748	e2833018	 add         r3, r3, #0x18
  0074c	e5d33000	 ldrb        r3, [r3]
  00750	e58d3004	 str         r3, [sp, #4]
  00754	e59d3030	 ldr         r3, [sp, #0x30]
  00758	e2833017	 add         r3, r3, #0x17
  0075c	e5d33000	 ldrb        r3, [r3]
  00760	e58d3000	 str         r3, [sp]
  00764	e59d3030	 ldr         r3, [sp, #0x30]
  00768	e2833016	 add         r3, r3, #0x16
  0076c	e5d33000	 ldrb        r3, [r3]
  00770	e59d2030	 ldr         r2, [sp, #0x30]
  00774	e2822015	 add         r2, r2, #0x15
  00778	e5d22000	 ldrb        r2, [r2]
  0077c	e59d1030	 ldr         r1, [sp, #0x30]
  00780	e2811014	 add         r1, r1, #0x14
  00784	e5d11000	 ldrb        r1, [r1]
  00788	e59f03e0	 ldr         r0, [pc, #0x3E0]
  0078c	eb000000	 bl          NKDbgPrintfW
  00790	e3a03001	 mov         r3, #1
  00794	e58d3070	 str         r3, [sp, #0x70]
  00798	ea000001	 b           |$LN67@Emac_Minip@2|
  0079c		 |$LN66@Emac_Minip@2|
  0079c	e3a03000	 mov         r3, #0
  007a0	e58d3070	 str         r3, [sp, #0x70]
  007a4		 |$LN67@Emac_Minip@2|

; 367  :             ulBytesAvailable = ulInfoLen = ETH_LENGTH_OF_ADDRESS;

  007a4	e3a03006	 mov         r3, #6
  007a8	e58d300c	 str         r3, [sp, #0xC]
  007ac	e59d300c	 ldr         r3, [sp, #0xC]
  007b0	e58d3028	 str         r3, [sp, #0x28]

; 368  :             break;

  007b4	ea0000b1	 b           |$LN54@Emac_Minip@2|
  007b8		 |$LN30@Emac_Minip@2|

; 369  : 
; 370  :         case OID_802_3_MAXIMUM_LIST_SIZE:
; 371  :             ulInfo = EMAC_MAX_MCAST_ENTRIES;

  007b8	e3a03040	 mov         r3, #0x40
  007bc	e58d3024	 str         r3, [sp, #0x24]

; 372  :             break;

  007c0	ea0000ae	 b           |$LN54@Emac_Minip@2|
  007c4		 |$LN29@Emac_Minip@2|

; 373  :             
; 374  :         case OID_802_3_MULTICAST_LIST:
; 375  :              pInfo = pAdapter->m_MulticastTable;

  007c4	e59d3030	 ldr         r3, [sp, #0x30]
  007c8	e2833f7b	 add         r3, r3, #0x7B, 30
  007cc	e58d3014	 str         r3, [sp, #0x14]

; 376  :              ulBytesAvailable = ulInfoLen = pAdapter->m_NumMulticastEntries *
; 377  :                                                      ETH_LENGTH_OF_ADDRESS;   

  007d0	e59d3030	 ldr         r3, [sp, #0x30]
  007d4	e2833fdb	 add         r3, r3, #0xDB, 30
  007d8	e5932000	 ldr         r2, [r3]
  007dc	e3a03006	 mov         r3, #6
  007e0	e0030392	 mul         r3, r2, r3
  007e4	e58d300c	 str         r3, [sp, #0xC]
  007e8	e59d300c	 ldr         r3, [sp, #0xC]
  007ec	e58d3028	 str         r3, [sp, #0x28]

; 378  :             break;     

  007f0	ea0000a2	 b           |$LN54@Emac_Minip@2|
  007f4		 |$LN28@Emac_Minip@2|

; 379  :             
; 380  :         case OID_PNP_CAPABILITIES:
; 381  :             DEBUGMSG(1, (TEXT ("Emac_Miniport: QueryInformation: Got OID_PNP_CAPABILITIES\r\n")));

  007f4	e59f0370	 ldr         r0, [pc, #0x370]
  007f8	eb000000	 bl          NKDbgPrintfW

; 382  :             Capabilites.WakeUpCapabilities.MinMagicPacketWakeUp = 
; 383  :                 Capabilites.WakeUpCapabilities.MinPatternWakeUp =
; 384  :                 Capabilites.WakeUpCapabilities.MinLinkChangeWakeUp = NdisDeviceStateUnspecified;

  007fc	e3a03000	 mov         r3, #0
  00800	e58d3040	 str         r3, [sp, #0x40]
  00804	e59d3040	 ldr         r3, [sp, #0x40]
  00808	e58d303c	 str         r3, [sp, #0x3C]
  0080c	e59d303c	 ldr         r3, [sp, #0x3C]
  00810	e58d3038	 str         r3, [sp, #0x38]

; 385  :             pInfo = &Capabilites;

  00814	e28d3034	 add         r3, sp, #0x34
  00818	e58d3014	 str         r3, [sp, #0x14]

; 386  :             ulBytesAvailable = sizeof(Capabilites);

  0081c	e3a03010	 mov         r3, #0x10
  00820	e58d3028	 str         r3, [sp, #0x28]

; 387  :             break;

  00824	ea000095	 b           |$LN54@Emac_Minip@2|
  00828		 |$LN27@Emac_Minip@2|

; 388  : 
; 389  :         case OID_PNP_QUERY_POWER:
; 390  :             DEBUGMSG(1, (TEXT ("Emac_Miniport: QueryInformation: Got OID_PNP_QUERY_POWER\r\n")));

  00828	e59f0338	 ldr         r0, [pc, #0x338]
  0082c	eb000000	 bl          NKDbgPrintfW

; 391  :             if (!InformationBuffer || InformationBufferLength < sizeof(NDIS_DEVICE_POWER_STATE))

  00830	e59d3090	 ldr         r3, [sp, #0x90]
  00834	e3530000	 cmp         r3, #0
  00838	0a000002	 beq         |$LN25@Emac_Minip@2|
  0083c	e59d3094	 ldr         r3, [sp, #0x94]
  00840	e3530004	 cmp         r3, #4
  00844	2a000003	 bcs         |$LN26@Emac_Minip@2|
  00848		 |$LN25@Emac_Minip@2|

; 392  :             {
; 393  :                 // Buffer not big enough
; 394  :                 Status = NDIS_STATUS_INVALID_LENGTH;

  00848	e3a03153	 mov         r3, #0x53, 2
  0084c	e3833801	 orr         r3, r3, #1, 16
  00850	e58d3020	 str         r3, [sp, #0x20]

; 395  :             }
; 396  :             else

  00854	ea000012	 b           |$LN24@Emac_Minip@2|
  00858		 |$LN26@Emac_Minip@2|

; 397  :             {
; 398  :                 NdisMoveMemory((PVOID)&PowerState, InformationBuffer, sizeof(PowerState));

  00858	e3a02004	 mov         r2, #4
  0085c	e59d1090	 ldr         r1, [sp, #0x90]
  00860	e28d001c	 add         r0, sp, #0x1C
  00864	eb000000	 bl          memcpy

; 399  :                 ulBytesAvailable = 0;

  00868	e3a03000	 mov         r3, #0
  0086c	e58d3028	 str         r3, [sp, #0x28]

; 400  :                 switch (PowerState)

  00870	e59d301c	 ldr         r3, [sp, #0x1C]
  00874	e58d3074	 str         r3, [sp, #0x74]
  00878	e59d3074	 ldr         r3, [sp, #0x74]
  0087c	e3530001	 cmp         r3, #1
  00880	0a000003	 beq         |$LN21@Emac_Minip@2|
  00884	e59d3074	 ldr         r3, [sp, #0x74]
  00888	e3530004	 cmp         r3, #4
  0088c	0a000000	 beq         |$LN21@Emac_Minip@2|
  00890	ea000000	 b           |$LN20@Emac_Minip@2|
  00894		 |$LN21@Emac_Minip@2|

; 401  :                 {
; 402  :                 case NdisDeviceStateD0:
; 403  :                 case NdisDeviceStateD3:
; 404  :                     // Supported. Leave error code as success
; 405  :                     break;

  00894	ea000002	 b           |$LN22@Emac_Minip@2|
  00898		 |$LN20@Emac_Minip@2|

; 406  :                 default:
; 407  :                     // Unsupported
; 408  :                     Status = NDIS_STATUS_NOT_SUPPORTED;

  00898	e3a03103	 mov         r3, #3, 2
  0089c	e38330bb	 orr         r3, r3, #0xBB
  008a0	e58d3020	 str         r3, [sp, #0x20]
  008a4		 |$LN22@Emac_Minip@2|
  008a4		 |$LN24@Emac_Minip@2|

; 409  :                     break;
; 410  :                 };
; 411  :             }
; 412  :             break;

  008a4	ea000075	 b           |$LN54@Emac_Minip@2|
  008a8		 |$LN19@Emac_Minip@2|

; 413  : 
; 414  :          default:
; 415  :                 /*
; 416  :                  * This is a query for statistics information from the NDIS
; 417  :                  * wrapper. Let us call EmacStatistics and retrieve the latest set
; 418  :                  * of statistical information retrieved by the EMAC.
; 419  :                  */
; 420  :                  pEmacStatInfo = &pAdapter->m_EmacStatInfo;

  008a8	e59d3030	 ldr         r3, [sp, #0x30]
  008ac	e2833e37	 add         r3, r3, #0x37, 28
  008b0	e58d3010	 str         r3, [sp, #0x10]

; 421  :                  
; 422  :                  EmacUpdateStatistics(pEmacStatInfo , pAdapter->m_pEmacRegsBase);

  008b4	e59d3030	 ldr         r3, [sp, #0x30]
  008b8	e2833004	 add         r3, r3, #4
  008bc	e5931000	 ldr         r1, [r3]
  008c0	e59d0010	 ldr         r0, [sp, #0x10]
  008c4	eb000000	 bl          EmacUpdateStatistics

; 423  : 
; 424  :                 switch (Oid)

  008c8	e59d308c	 ldr         r3, [sp, #0x8C]
  008cc	e58d3078	 str         r3, [sp, #0x78]
  008d0	e59d2078	 ldr         r2, [sp, #0x78]
  008d4	e59f3288	 ldr         r3, [pc, #0x288]
  008d8	e1520003	 cmp         r2, r3
  008dc	8a000014	 bhi         |$LN68@Emac_Minip@2|
  008e0	e59d2078	 ldr         r2, [sp, #0x78]
  008e4	e59f3278	 ldr         r3, [pc, #0x278]
  008e8	e1520003	 cmp         r2, r3
  008ec	0a000042	 beq         |$LN11@Emac_Minip@2|
  008f0	e59d2078	 ldr         r2, [sp, #0x78]
  008f4	e59f3264	 ldr         r3, [pc, #0x264]
  008f8	e0423003	 sub         r3, r2, r3
  008fc	e58d3078	 str         r3, [sp, #0x78]
  00900	e59d3078	 ldr         r3, [sp, #0x78]
  00904	e3530004	 cmp         r3, #4
  00908	8a000059	 bhi         |$LN5@Emac_Minip@2|
  0090c	e59d2078	 ldr         r2, [sp, #0x78]
  00910	e1a03102	 mov         r3, r2, lsl #2
  00914	e083300f	 add         r3, r3, pc
  00918	e5933004	 ldr         r3, [r3, #4]
  0091c	e08ff003	 add         pc, pc, r3
  00920		 |$LN99@Emac_Minip@2|
  00920		 |$LN98@Emac_Minip@2|
  00920		 |$LN100@Emac_Minip@2|
  00920	00000078	 DCD         0x78
  00924		 |$LN101@Emac_Minip@2|
  00924	00000088	 DCD         0x88
  00928		 |$LN102@Emac_Minip@2|
  00928	0000009c	 DCD         0x9c
  0092c		 |$LN103@Emac_Minip@2|
  0092c	000000b0	 DCD         0xb0
  00930		 |$LN104@Emac_Minip@2|
  00930	000000c4	 DCD         0xc4
  00934		 |$LN68@Emac_Minip@2|
  00934	e59d2078	 ldr         r2, [sp, #0x78]
  00938	e59f321c	 ldr         r3, [pc, #0x21C]
  0093c	e1520003	 cmp         r2, r3
  00940	8a00000c	 bhi         |$LN69@Emac_Minip@2|
  00944	e59d2078	 ldr         r2, [sp, #0x78]
  00948	e59f320c	 ldr         r3, [pc, #0x20C]
  0094c	e1520003	 cmp         r2, r3
  00950	0a000038	 beq         |$LN8@Emac_Minip@2|
  00954	e59d2078	 ldr         r2, [sp, #0x78]
  00958	e59f31f8	 ldr         r3, [pc, #0x1F8]
  0095c	e1520003	 cmp         r2, r3
  00960	0a00002a	 beq         |$LN10@Emac_Minip@2|
  00964	e59d2078	 ldr         r2, [sp, #0x78]
  00968	e59f31e4	 ldr         r3, [pc, #0x1E4]
  0096c	e1520003	 cmp         r2, r3
  00970	0a00002b	 beq         |$LN9@Emac_Minip@2|
  00974	ea00003e	 b           |$LN5@Emac_Minip@2|
  00978		 |$LN69@Emac_Minip@2|
  00978	e59d2078	 ldr         r2, [sp, #0x78]
  0097c	e59f31cc	 ldr         r3, [pc, #0x1CC]
  00980	e1520003	 cmp         r2, r3
  00984	0a000030	 beq         |$LN7@Emac_Minip@2|
  00988	e59d2078	 ldr         r2, [sp, #0x78]
  0098c	e59f31b8	 ldr         r3, [pc, #0x1B8]
  00990	e1520003	 cmp         r2, r3
  00994	0a000031	 beq         |$LN6@Emac_Minip@2|
  00998	ea000035	 b           |$LN5@Emac_Minip@2|
  0099c		 |$LN16@Emac_Minip@2|

; 425  :                 {
; 426  :     
; 427  :                     case OID_GEN_XMIT_OK:
; 428  :     
; 429  :                         ulInfo = pEmacStatInfo->m_TxOKFrames;

  0099c	e59d3010	 ldr         r3, [sp, #0x10]
  009a0	e5933000	 ldr         r3, [r3]
  009a4	e58d3024	 str         r3, [sp, #0x24]

; 430  :                         break;

  009a8	ea000034	 b           |$LN17@Emac_Minip@2|
  009ac		 |$LN15@Emac_Minip@2|

; 431  :     
; 432  :                     case OID_GEN_RCV_OK:
; 433  :     
; 434  :                         ulInfo = pEmacStatInfo->m_RxOKFrames;

  009ac	e59d3010	 ldr         r3, [sp, #0x10]
  009b0	e2833004	 add         r3, r3, #4
  009b4	e5933000	 ldr         r3, [r3]
  009b8	e58d3024	 str         r3, [sp, #0x24]

; 435  :                         break;

  009bc	ea00002f	 b           |$LN17@Emac_Minip@2|
  009c0		 |$LN14@Emac_Minip@2|

; 436  :     
; 437  :                     case OID_GEN_XMIT_ERROR:
; 438  :     
; 439  :                         ulInfo = pEmacStatInfo->m_TxErrorframes;

  009c0	e59d3010	 ldr         r3, [sp, #0x10]
  009c4	e2833008	 add         r3, r3, #8
  009c8	e5933000	 ldr         r3, [r3]
  009cc	e58d3024	 str         r3, [sp, #0x24]

; 440  :                         break;

  009d0	ea00002a	 b           |$LN17@Emac_Minip@2|
  009d4		 |$LN13@Emac_Minip@2|

; 441  :     
; 442  :                     case OID_GEN_RCV_ERROR:
; 443  :                         ulInfo = pEmacStatInfo->m_RxErrorframes;

  009d4	e59d3010	 ldr         r3, [sp, #0x10]
  009d8	e283300c	 add         r3, r3, #0xC
  009dc	e5933000	 ldr         r3, [r3]
  009e0	e58d3024	 str         r3, [sp, #0x24]

; 444  :                         break;

  009e4	ea000025	 b           |$LN17@Emac_Minip@2|
  009e8		 |$LN12@Emac_Minip@2|

; 445  :     
; 446  :                     case OID_GEN_RCV_NO_BUFFER:
; 447  :                         ulInfo = pEmacStatInfo->m_RxNoBufFrames;

  009e8	e59d3010	 ldr         r3, [sp, #0x10]
  009ec	e2833010	 add         r3, r3, #0x10
  009f0	e5933000	 ldr         r3, [r3]
  009f4	e58d3024	 str         r3, [sp, #0x24]

; 448  :                         break;

  009f8	ea000020	 b           |$LN17@Emac_Minip@2|
  009fc		 |$LN11@Emac_Minip@2|

; 449  :     
; 450  :                   
; 451  :                     case OID_802_3_RCV_ERROR_ALIGNMENT:
; 452  :                         ulInfo = pEmacStatInfo->m_RxAlignErrorFrames;

  009fc	e59d3010	 ldr         r3, [sp, #0x10]
  00a00	e2833014	 add         r3, r3, #0x14
  00a04	e5933000	 ldr         r3, [r3]
  00a08	e58d3024	 str         r3, [sp, #0x24]

; 453  :                         break;

  00a0c	ea00001b	 b           |$LN17@Emac_Minip@2|
  00a10		 |$LN10@Emac_Minip@2|

; 454  :     
; 455  :                     case OID_802_3_XMIT_ONE_COLLISION:
; 456  :                         ulInfo = pEmacStatInfo->m_TxOneColl;

  00a10	e59d3010	 ldr         r3, [sp, #0x10]
  00a14	e2833018	 add         r3, r3, #0x18
  00a18	e5933000	 ldr         r3, [r3]
  00a1c	e58d3024	 str         r3, [sp, #0x24]

; 457  :                         break;

  00a20	ea000016	 b           |$LN17@Emac_Minip@2|
  00a24		 |$LN9@Emac_Minip@2|

; 458  :     
; 459  :                     case OID_802_3_XMIT_MORE_COLLISIONS:
; 460  :                         ulInfo = pEmacStatInfo->m_TxMoreColl;

  00a24	e59d3010	 ldr         r3, [sp, #0x10]
  00a28	e283301c	 add         r3, r3, #0x1C
  00a2c	e5933000	 ldr         r3, [r3]
  00a30	e58d3024	 str         r3, [sp, #0x24]

; 461  :                         break;

  00a34	ea000011	 b           |$LN17@Emac_Minip@2|
  00a38		 |$LN8@Emac_Minip@2|

; 462  :     
; 463  :                     case OID_802_3_XMIT_DEFERRED:
; 464  :                         ulInfo = pEmacStatInfo->m_TxDeferred;

  00a38	e59d3010	 ldr         r3, [sp, #0x10]
  00a3c	e2833020	 add         r3, r3, #0x20
  00a40	e5933000	 ldr         r3, [r3]
  00a44	e58d3024	 str         r3, [sp, #0x24]

; 465  :                         break;

  00a48	ea00000c	 b           |$LN17@Emac_Minip@2|
  00a4c		 |$LN7@Emac_Minip@2|

; 466  :     
; 467  :                     case OID_802_3_XMIT_MAX_COLLISIONS:
; 468  :                         ulInfo = pEmacStatInfo->m_TxMaxColl;

  00a4c	e59d3010	 ldr         r3, [sp, #0x10]
  00a50	e2833024	 add         r3, r3, #0x24
  00a54	e5933000	 ldr         r3, [r3]
  00a58	e58d3024	 str         r3, [sp, #0x24]

; 469  :                         break;

  00a5c	ea000007	 b           |$LN17@Emac_Minip@2|
  00a60		 |$LN6@Emac_Minip@2|

; 470  :     
; 471  :                     case OID_802_3_RCV_OVERRUN:
; 472  :                         ulInfo = pEmacStatInfo->m_RxOverRun;

  00a60	e59d3010	 ldr         r3, [sp, #0x10]
  00a64	e2833028	 add         r3, r3, #0x28
  00a68	e5933000	 ldr         r3, [r3]
  00a6c	e58d3024	 str         r3, [sp, #0x24]

; 473  :                         break;

  00a70	ea000002	 b           |$LN17@Emac_Minip@2|
  00a74		 |$LN5@Emac_Minip@2|

; 474  :     
; 475  :                   
; 476  :                     default:
; 477  :                         Status = NDIS_STATUS_NOT_SUPPORTED;

  00a74	e3a03103	 mov         r3, #3, 2
  00a78	e38330bb	 orr         r3, r3, #0xBB
  00a7c	e58d3020	 str         r3, [sp, #0x20]
  00a80		 |$LN17@Emac_Minip@2|
  00a80		 |$LN54@Emac_Minip@2|

; 478  :                         break;
; 479  :                 }
; 480  :     }
; 481  : 
; 482  :    if (Status == NDIS_STATUS_SUCCESS)

  00a80	e59d3020	 ldr         r3, [sp, #0x20]
  00a84	e3530000	 cmp         r3, #0
  00a88	1a000017	 bne         |$LN4@Emac_Minip@2|

; 483  :     {
; 484  :         *BytesNeeded = ulBytesAvailable;

  00a8c	e59d2028	 ldr         r2, [sp, #0x28]
  00a90	e59d309c	 ldr         r3, [sp, #0x9C]
  00a94	e5832000	 str         r2, [r3]

; 485  :         if (ulInfoLen <= InformationBufferLength)

  00a98	e59d200c	 ldr         r2, [sp, #0xC]
  00a9c	e59d3094	 ldr         r3, [sp, #0x94]
  00aa0	e1520003	 cmp         r2, r3
  00aa4	8a00000a	 bhi         |$LN3@Emac_Minip@2|

; 486  :         {
; 487  :             //
; 488  :             // Copy result into InformationBuffer
; 489  :             //
; 490  :             *BytesWritten = ulInfoLen;

  00aa8	e59d200c	 ldr         r2, [sp, #0xC]
  00aac	e59d3098	 ldr         r3, [sp, #0x98]
  00ab0	e5832000	 str         r2, [r3]

; 491  :             if (ulInfoLen)

  00ab4	e59d300c	 ldr         r3, [sp, #0xC]
  00ab8	e3530000	 cmp         r3, #0
  00abc	0a000003	 beq         |$LN2@Emac_Minip@2|

; 492  :             {
; 493  :                 NdisMoveMemory(InformationBuffer, pInfo, ulInfoLen);

  00ac0	e59d200c	 ldr         r2, [sp, #0xC]
  00ac4	e59d1014	 ldr         r1, [sp, #0x14]
  00ac8	e59d0090	 ldr         r0, [sp, #0x90]
  00acc	eb000000	 bl          memcpy
  00ad0		 |$LN2@Emac_Minip@2|

; 494  :             }
; 495  :         }
; 496  :         else

  00ad0	ea000005	 b           |$LN1@Emac_Minip@2|
  00ad4		 |$LN3@Emac_Minip@2|

; 497  :         {
; 498  :             //
; 499  :             // too short
; 500  :             //
; 501  :             *BytesNeeded = ulInfoLen;

  00ad4	e59d200c	 ldr         r2, [sp, #0xC]
  00ad8	e59d309c	 ldr         r3, [sp, #0x9C]
  00adc	e5832000	 str         r2, [r3]

; 502  :             Status = NDIS_STATUS_INVALID_LENGTH;

  00ae0	e3a03153	 mov         r3, #0x53, 2
  00ae4	e3833801	 orr         r3, r3, #1, 16
  00ae8	e58d3020	 str         r3, [sp, #0x20]
  00aec		 |$LN1@Emac_Minip@2|
  00aec		 |$LN4@Emac_Minip@2|

; 503  :         }
; 504  :     }
; 505  : 
; 506  :     DEBUGMSG(DBG_FUNC && DBG_OID, 
; 507  :             (L"<--- Emac_MiniportQueryInformation status 0x%08X \r\n",Status));

  00aec	e59f3054	 ldr         r3, [pc, #0x54]
  00af0	e5933440	 ldr         r3, [r3, #0x440]
  00af4	e3130080	 tst         r3, #0x80
  00af8	0a000009	 beq         |$LN72@Emac_Minip@2|
  00afc	e59f3044	 ldr         r3, [pc, #0x44]
  00b00	e5933440	 ldr         r3, [r3, #0x440]
  00b04	e3130c01	 tst         r3, #1, 24
  00b08	0a000005	 beq         |$LN72@Emac_Minip@2|
  00b0c	e59d1020	 ldr         r1, [sp, #0x20]
  00b10	e59f002c	 ldr         r0, [pc, #0x2C]
  00b14	eb000000	 bl          NKDbgPrintfW
  00b18	e3a03001	 mov         r3, #1
  00b1c	e58d307c	 str         r3, [sp, #0x7C]
  00b20	ea000001	 b           |$LN73@Emac_Minip@2|
  00b24		 |$LN72@Emac_Minip@2|
  00b24	e3a03000	 mov         r3, #0
  00b28	e58d307c	 str         r3, [sp, #0x7C]
  00b2c		 |$LN73@Emac_Minip@2|

; 508  :  
; 509  :     return(Status);

  00b2c	e59d3020	 ldr         r3, [sp, #0x20]
  00b30	e58d3054	 str         r3, [sp, #0x54]

; 510  : }

  00b34	e59d0054	 ldr         r0, [sp, #0x54]
  00b38	e28dd080	 add         sp, sp, #0x80
  00b3c	e89d6000	 ldmia       sp, {sp, lr}
  00b40	e12fff1e	 bx          lr
  00b44		 |$LN108@Emac_Minip@2|
  00b44		 |$LN109@Emac_Minip@2|
  00b44	00000000	 DCD         |??_C@_1GI@GGNOOJNA@?$AA?$DM?$AA?9?$AA?9?$AA?9?$AA?5?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAQ?$AAu?$AAe?$AAr?$AAy?$AAI?$AAn?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAi@|
  00b48		 |$LN110@Emac_Minip@2|
  00b48	00000000	 DCD         |dpCurSettings|
  00b4c		 |$LN111@Emac_Minip@2|
  00b4c	01020203	 DCD         0x1020203
  00b50		 |$LN112@Emac_Minip@2|
  00b50	01020202	 DCD         0x1020202
  00b54		 |$LN113@Emac_Minip@2|
  00b54	01020103	 DCD         0x1020103
  00b58		 |$LN114@Emac_Minip@2|
  00b58	01020102	 DCD         0x1020102
  00b5c		 |$LN115@Emac_Minip@2|
  00b5c	01020201	 DCD         0x1020201
  00b60		 |$LN116@Emac_Minip@2|
  00b60	00020101	 DCD         0x20101
  00b64		 |$LN117@Emac_Minip@2|
  00b64	01020101	 DCD         0x1020101
  00b68		 |$LN118@Emac_Minip@2|
  00b68	00000000	 DCD         |??_C@_1HG@KFDEFPBE@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AA?3?$AA?5?$AAQ?$AAu?$AAe?$AAr?$AAy?$AAI?$AAn?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?3@|
  00b6c		 |$LN119@Emac_Minip@2|
  00b6c	00000000	 DCD         |??_C@_1HI@CCJOCEHC@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AA?3?$AA?5?$AAQ?$AAu?$AAe?$AAr?$AAy?$AAI?$AAn?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?3@|
  00b70		 |$LN120@Emac_Minip@2|
  00b70	00000000	 DCD         |??_C@_1EC@GKGOJFLJ@?$AAM?$AAa?$AAc?$AA?5?$AAa?$AAd?$AAd?$AAr?$AA?5?$AAi?$AAs?$AA?5?$AA?$CF?$AAx?$AA?3?$AA?$CF?$AAx?$AA?3?$AA?$CF?$AAx?$AA?3?$AA?$CF?$AAx?$AA?3?$AA?$CF?$AAx?$AA?3?$AA?$CF?$AAx?$AA?4?$AA?$AN?$AA?6@|
  00b74		 |$LN121@Emac_Minip@2|
  00b74	00000000	 DCD         |??_C@_1EE@DMHDCADD@?$AAO?$AAI?$AAD?$AA_?$AAG?$AAE?$AAN?$AA_?$AAL?$AAI?$AAN?$AAK?$AA_?$AAS?$AAP?$AAE?$AAE?$AAD?$AA?5?$AAi?$AAs?$AA?5?$AAc?$AAa?$AAl?$AAl?$AAe?$AAd?$AA?5?$AA?$CF?$AAu?$AA?$AN@|
  00b78		 |$LN122@Emac_Minip@2|
  00b78	00000000	 DCD         |??_C@_1DC@BOGMBBBA@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAL?$AAi?$AAn?$AAk?$AA?5?$AAi?$AAs?$AA?5?$AAD?$AAo?$AAw?$AAn?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@|
  00b7c		 |$LN123@Emac_Minip@2|
  00b7c	00000000	 DCD         |??_C@_1FK@FOCKCOFB@?$AAO?$AAI?$AAD?$AA_?$AAG?$AAE?$AAN?$AA_?$AAM?$AAE?$AAD?$AAI?$AAA?$AA_?$AAC?$AAO?$AAN?$AAN?$AAE?$AAC?$AAT?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA?5?$AAi?$AAs?$AA?5@|
  00b80		 |$LN124@Emac_Minip@2|
  00b80	00000000	 DCD         |VendorDriverVersion|
  00b84		 |$LN125@Emac_Minip@2|
  00b84	00000000	 DCD         |?VendorDescriptor@?1??Emac_MiniportQueryInformation@@9@9|
  00b88		 |$LN126@Emac_Minip@2|
  00b88	00000000	 DCD         |NICSupportedOids|
  00b8c		 |$LN127@Emac_Minip@2|
  00b8c	fd010102	 DCD         0xfd010102
  00b90		 |$LN128@Emac_Minip@2|
  00b90	01010104	 DCD         0x1010104
  00b94		 |$LN129@Emac_Minip@2|
  00b94	01010103	 DCD         0x1010103
  00b98		 |$LN130@Emac_Minip@2|
  00b98	fd010100	 DCD         0xfd010100
  00b9c		 |$LN131@Emac_Minip@2|
  00b9c	00010101	 DCD         0x10101
  00ba0		 |$LN132@Emac_Minip@2|
  00ba0	01010101	 DCD         0x1010101
  00ba4		 |$LN133@Emac_Minip@2|
  00ba4	01010102	 DCD         0x1010102
  00ba8		 |$LN134@Emac_Minip@2|
  00ba8	00000000	 DCD         |??_C@_1FK@KDEHFLBN@?$AA?9?$AA?9?$AA?9?$AA?$DO?$AA?5?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAQ?$AAu?$AAe?$AAr?$AAy?$AAI?$AAn?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAi@|
  00bac		 |$M50704|

			 ENDP  ; |Emac_MiniportQueryInformation|

	EXPORT	|??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1KE@CEFMMIMA@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@| [ DATA ] ; `string'
	EXPORT	|CopyPacketToBuffer|

  00018			 AREA	 |.pdata|, PDATA
|$T50750| DCD	|$LN26@CopyPacket|
	DCD	0x40008604

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@| DCB "%"
	DCB	0x0, "s", 0x0, ":", 0x0, " ", 0x0, "D", 0x0, "E", 0x0, "B"
	DCB	0x0, "U", 0x0, "G", 0x0, "C", 0x0, "H", 0x0, "K", 0x0, " "
	DCB	0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "i", 0x0, "n", 0x0, " ", 0x0, "f", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, " ", 0x0, "%", 0x0, "s", 0x0, " "
	DCB	0x0, "a", 0x0, "t", 0x0, " ", 0x0, "l", 0x0, "i", 0x0, "n"
	DCB	0x0, "e", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@| DCB "U", 0x0
	DCB	"n", 0x0, "k", 0x0, "n", 0x0, "o", 0x0, "w", 0x0, "n", 0x0
	DCB	0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KE@CEFMMIMA@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@| DCB "C"
	DCB	0x0, ":", 0x0, "\\", 0x0, "W", 0x0, "I", 0x0, "N", 0x0, "C"
	DCB	0x0, "E", 0x0, "6", 0x0, "0", 0x0, "0", 0x0, "\\", 0x0, "P"
	DCB	0x0, "L", 0x0, "A", 0x0, "T", 0x0, "F", 0x0, "O", 0x0, "R"
	DCB	0x0, "M", 0x0, "\\", 0x0, "C", 0x0, "O", 0x0, "M", 0x0, "M"
	DCB	0x0, "O", 0x0, "N", 0x0, "\\", 0x0, "S", 0x0, "R", 0x0, "C"
	DCB	0x0, "\\", 0x0, "S", 0x0, "O", 0x0, "C", 0x0, "\\", 0x0, "C"
	DCB	0x0, "O", 0x0, "M", 0x0, "M", 0x0, "O", 0x0, "N", 0x0, "_"
	DCB	0x0, "T", 0x0, "I", 0x0, "_", 0x0, "V", 0x0, "1", 0x0, "\\"
	DCB	0x0, "C", 0x0, "O", 0x0, "M", 0x0, "M", 0x0, "O", 0x0, "N"
	DCB	0x0, "_", 0x0, "T", 0x0, "I", 0x0, "\\", 0x0, "E", 0x0, "M"
	DCB	0x0, "A", 0x0, "C", 0x0, "\\", 0x0, ".", 0x0, "\\", 0x0, "E"
	DCB	0x0, "m", 0x0, "a", 0x0, "c", 0x0, "_", 0x0, "M", 0x0, "i"
	DCB	0x0, "n", 0x0, "i", 0x0, "p", 0x0, "o", 0x0, "r", 0x0, "t"
	DCB	0x0, ".", 0x0, "c", 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  00bac			 AREA	 |.text|, CODE, ARM

  00bac		 |CopyPacketToBuffer| PROC

; 602  : {

  00bac		 |$LN26@CopyPacket|
  00bac	e1a0c00d	 mov         r12, sp
  00bb0	e92d000f	 stmdb       sp!, {r0 - r3}
  00bb4	e92d5000	 stmdb       sp!, {r12, lr}
  00bb8	e24dd02c	 sub         sp, sp, #0x2C
  00bbc		 |$M50747|

; 603  :     PNDIS_BUFFER        CurrBuffer;
; 604  :     PUCHAR              BufferVirtAddr;
; 605  :     ULONG               BufferLen;
; 606  :     ULONG               BytesOnThisCopy;
; 607  :     PUCHAR              DestAddr;
; 608  :     
; 609  :     
; 610  :     *BytesCopied = 0;

  00bbc	e59d2044	 ldr         r2, [sp, #0x44]
  00bc0	e3a03000	 mov         r3, #0
  00bc4	e5823000	 str         r3, [r2]

; 611  : 
; 612  :     if(BytesToCopy == 0)

  00bc8	e59d3040	 ldr         r3, [sp, #0x40]
  00bcc	e3530000	 cmp         r3, #0
  00bd0	1a000000	 bne         |$LN9@CopyPacket|

; 613  :     {
; 614  :             return;

  00bd4	ea000074	 b           |$LN10@CopyPacket|
  00bd8		 |$LN9@CopyPacket|

; 615  :     }
; 616  :         
; 617  :     DestAddr   = (PUCHAR) buffer;

  00bd8	e59d303c	 ldr         r3, [sp, #0x3C]
  00bdc	e58d3008	 str         r3, [sp, #8]

; 618  :     CurrBuffer = FirstBuffer;

  00be0	e59d3038	 ldr         r3, [sp, #0x38]
  00be4	e58d3010	 str         r3, [sp, #0x10]

; 619  :     
; 620  :     NdisQueryBuffer( CurrBuffer, &BufferVirtAddr, &BufferLen);

  00be8	e28d300c	 add         r3, sp, #0xC
  00bec	e3530000	 cmp         r3, #0
  00bf0	0a00000b	 beq         |$LN8@CopyPacket|
  00bf4	e59d3010	 ldr         r3, [sp, #0x10]
  00bf8	e3530000	 cmp         r3, #0
  00bfc	1a000002	 bne         |$LN12@CopyPacket|
  00c00	e3a03000	 mov         r3, #0
  00c04	e58d3014	 str         r3, [sp, #0x14]
  00c08	ea000003	 b           |$LN13@CopyPacket|
  00c0c		 |$LN12@CopyPacket|
  00c0c	e59d3010	 ldr         r3, [sp, #0x10]
  00c10	e2833004	 add         r3, r3, #4
  00c14	e5933000	 ldr         r3, [r3]
  00c18	e58d3014	 str         r3, [sp, #0x14]
  00c1c		 |$LN13@CopyPacket|
  00c1c	e59d3014	 ldr         r3, [sp, #0x14]
  00c20	e58d300c	 str         r3, [sp, #0xC]
  00c24		 |$LN8@CopyPacket|
  00c24	e59d3010	 ldr         r3, [sp, #0x10]
  00c28	e3530000	 cmp         r3, #0
  00c2c	1a000002	 bne         |$LN14@CopyPacket|
  00c30	e3a03000	 mov         r3, #0
  00c34	e58d3018	 str         r3, [sp, #0x18]
  00c38	ea000003	 b           |$LN15@CopyPacket|
  00c3c		 |$LN14@CopyPacket|
  00c3c	e59d3010	 ldr         r3, [sp, #0x10]
  00c40	e2833008	 add         r3, r3, #8
  00c44	e5933000	 ldr         r3, [r3]
  00c48	e58d3018	 str         r3, [sp, #0x18]
  00c4c		 |$LN15@CopyPacket|
  00c4c	e59d3018	 ldr         r3, [sp, #0x18]
  00c50	e58d3004	 str         r3, [sp, #4]
  00c54		 |$LN7@CopyPacket|
  00c54		 |$LN4@CopyPacket|

; 621  : 
; 622  :     do
; 623  :     {
; 624  :         while(!BufferLen)

  00c54	e59d3004	 ldr         r3, [sp, #4]
  00c58	e3530000	 cmp         r3, #0
  00c5c	1a000030	 bne         |$LN3@CopyPacket|

; 625  :         {
; 626  :             NdisGetNextBuffer( CurrBuffer, &CurrBuffer);

  00c60	e59d3010	 ldr         r3, [sp, #0x10]
  00c64	e5933000	 ldr         r3, [r3]
  00c68	e58d3010	 str         r3, [sp, #0x10]

; 627  : 
; 628  :             /* Check if we have reached the end of packet, if so return. */
; 629  :             if (!CurrBuffer)

  00c6c	e59d3010	 ldr         r3, [sp, #0x10]
  00c70	e3530000	 cmp         r3, #0
  00c74	1a00000e	 bne         |$LN2@CopyPacket|

; 630  :             {
; 631  :                 /* Assert BytesToCopy = 0 */
; 632  :                 ASSERT(BytesToCopy == 0);

  00c78	e59d3040	 ldr         r3, [sp, #0x40]
  00c7c	e3530000	 cmp         r3, #0
  00c80	1a000002	 bne         |$LN16@CopyPacket|
  00c84	e3a03001	 mov         r3, #1
  00c88	e58d301c	 str         r3, [sp, #0x1C]
  00c8c	ea000007	 b           |$LN17@CopyPacket|
  00c90		 |$LN16@CopyPacket|
  00c90	e3a03f9e	 mov         r3, #0x9E, 30
  00c94	e59f2124	 ldr         r2, [pc, #0x124]
  00c98	e59f111c	 ldr         r1, [pc, #0x11C]
  00c9c	e59f0114	 ldr         r0, [pc, #0x114]
  00ca0	eb000000	 bl          NKDbgPrintfW
  00ca4	e6000010	 __debugbreak_ce
  00ca8	e3a03000	 mov         r3, #0
  00cac	e58d301c	 str         r3, [sp, #0x1C]
  00cb0		 |$LN17@CopyPacket|

; 633  :                 return;

  00cb0	ea00003d	 b           |$LN10@CopyPacket|
  00cb4		 |$LN2@CopyPacket|

; 634  :             }
; 635  :             NdisQueryBuffer(CurrBuffer, &BufferVirtAddr, &BufferLen);

  00cb4	e28d300c	 add         r3, sp, #0xC
  00cb8	e3530000	 cmp         r3, #0
  00cbc	0a00000b	 beq         |$LN1@CopyPacket|
  00cc0	e59d3010	 ldr         r3, [sp, #0x10]
  00cc4	e3530000	 cmp         r3, #0
  00cc8	1a000002	 bne         |$LN18@CopyPacket|
  00ccc	e3a03000	 mov         r3, #0
  00cd0	e58d3020	 str         r3, [sp, #0x20]
  00cd4	ea000003	 b           |$LN19@CopyPacket|
  00cd8		 |$LN18@CopyPacket|
  00cd8	e59d3010	 ldr         r3, [sp, #0x10]
  00cdc	e2833004	 add         r3, r3, #4
  00ce0	e5933000	 ldr         r3, [r3]
  00ce4	e58d3020	 str         r3, [sp, #0x20]
  00ce8		 |$LN19@CopyPacket|
  00ce8	e59d3020	 ldr         r3, [sp, #0x20]
  00cec	e58d300c	 str         r3, [sp, #0xC]
  00cf0		 |$LN1@CopyPacket|
  00cf0	e59d3010	 ldr         r3, [sp, #0x10]
  00cf4	e3530000	 cmp         r3, #0
  00cf8	1a000002	 bne         |$LN20@CopyPacket|
  00cfc	e3a03000	 mov         r3, #0
  00d00	e58d3024	 str         r3, [sp, #0x24]
  00d04	ea000003	 b           |$LN21@CopyPacket|
  00d08		 |$LN20@CopyPacket|
  00d08	e59d3010	 ldr         r3, [sp, #0x10]
  00d0c	e2833008	 add         r3, r3, #8
  00d10	e5933000	 ldr         r3, [r3]
  00d14	e58d3024	 str         r3, [sp, #0x24]
  00d18		 |$LN21@CopyPacket|
  00d18	e59d3024	 ldr         r3, [sp, #0x24]
  00d1c	e58d3004	 str         r3, [sp, #4]

; 636  :         }

  00d20	eaffffcb	 b           |$LN4@CopyPacket|
  00d24		 |$LN3@CopyPacket|

; 637  : 
; 638  :         BytesOnThisCopy = MIN(BytesToCopy, BufferLen);

  00d24	e59d2040	 ldr         r2, [sp, #0x40]
  00d28	e59d3004	 ldr         r3, [sp, #4]
  00d2c	e1520003	 cmp         r2, r3
  00d30	2a000002	 bcs         |$LN22@CopyPacket|
  00d34	e59d3040	 ldr         r3, [sp, #0x40]
  00d38	e58d3028	 str         r3, [sp, #0x28]
  00d3c	ea000001	 b           |$LN23@CopyPacket|
  00d40		 |$LN22@CopyPacket|
  00d40	e59d3004	 ldr         r3, [sp, #4]
  00d44	e58d3028	 str         r3, [sp, #0x28]
  00d48		 |$LN23@CopyPacket|
  00d48	e59d3028	 ldr         r3, [sp, #0x28]
  00d4c	e58d3000	 str         r3, [sp]

; 639  :         NdisMoveMemory(DestAddr, BufferVirtAddr, BytesOnThisCopy);

  00d50	e59d2000	 ldr         r2, [sp]
  00d54	e59d100c	 ldr         r1, [sp, #0xC]
  00d58	e59d0008	 ldr         r0, [sp, #8]
  00d5c	eb000000	 bl          memcpy

; 640  : 
; 641  :         (PUCHAR)DestAddr += BytesOnThisCopy;

  00d60	e59d2008	 ldr         r2, [sp, #8]
  00d64	e59d3000	 ldr         r3, [sp]
  00d68	e0823003	 add         r3, r2, r3
  00d6c	e58d3008	 str         r3, [sp, #8]

; 642  : 
; 643  :         *BytesCopied += BytesOnThisCopy;

  00d70	e59d3044	 ldr         r3, [sp, #0x44]
  00d74	e5932000	 ldr         r2, [r3]
  00d78	e59d3000	 ldr         r3, [sp]
  00d7c	e0822003	 add         r2, r2, r3
  00d80	e59d3044	 ldr         r3, [sp, #0x44]
  00d84	e5832000	 str         r2, [r3]

; 644  :         BytesToCopy -= BytesOnThisCopy;

  00d88	e59d2040	 ldr         r2, [sp, #0x40]
  00d8c	e59d3000	 ldr         r3, [sp]
  00d90	e0423003	 sub         r3, r2, r3
  00d94	e58d3040	 str         r3, [sp, #0x40]

; 645  : 
; 646  :         BufferLen = 0;

  00d98	e3a03000	 mov         r3, #0
  00d9c	e58d3004	 str         r3, [sp, #4]

; 647  : 
; 648  :     }while(BytesToCopy);

  00da0	e59d3040	 ldr         r3, [sp, #0x40]
  00da4	e3530000	 cmp         r3, #0
  00da8	1affffa9	 bne         |$LN7@CopyPacket|
  00dac		 |$LN10@CopyPacket|

; 649  :     
; 650  :     return;
; 651  : }    

  00dac	e28dd02c	 add         sp, sp, #0x2C
  00db0	e89d6000	 ldmia       sp, {sp, lr}
  00db4	e12fff1e	 bx          lr
  00db8		 |$LN27@CopyPacket|
  00db8		 |$LN28@CopyPacket|
  00db8	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  00dbc		 |$LN29@CopyPacket|
  00dbc	00000000	 DCD         |??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@|
  00dc0		 |$LN30@CopyPacket|
  00dc0	00000000	 DCD         |??_C@_1KE@CEFMMIMA@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  00dc4		 |$M50748|

			 ENDP  ; |CopyPacketToBuffer|

	EXPORT	|??_C@_1FA@PDBIFEGH@?$AA?$DM?$AA?9?$AA?9?$AA?9?$AA?5?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAS?$AAe?$AAn?$AAd?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AAs?$AAH?$AAa?$AAn@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DI@ICNKKFKJ@?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAs?$AAe?$AAn?$AAd?$AA?5?$AAp?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?5?$AA?$CF?$AAd?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1LA@ECMAGNKC@?$AAP?$AAh?$AAy?$AAs?$AAi?$AAc?$AAa?$AAl?$AAB?$AAu?$AAf?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AAp?$AAA?$AAd?$AAa?$AAp?$AAt?$AAe?$AAr?$AA?9?$AA?$DO?$AAT@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FG@LLNAPMNB@?$AA?9?$AA?9?$AA?9?$AA?$DO?$AA?5?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAS?$AAe?$AAn?$AAd?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AAs?$AAH?$AAa?$AAn@| [ DATA ] ; `string'
	EXPORT	|Emac_MiniportSendPacketsHandler|
	IMPORT	|NdisReleaseSpinLock|
	IMPORT	|NdisQueryPacket|
	IMPORT	|NdisAcquireSpinLock|

  00020			 AREA	 |.pdata|, PDATA
|$T50770| DCD	|$LN39@Emac_Minip@3|
	DCD	0x4001e504

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FA@PDBIFEGH@?$AA?$DM?$AA?9?$AA?9?$AA?9?$AA?5?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAS?$AAe?$AAn?$AAd?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AAs?$AAH?$AAa?$AAn@| DCB "<"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, " ", 0x0, "E", 0x0, "m"
	DCB	0x0, "a", 0x0, "c", 0x0, "_", 0x0, "M", 0x0, "i", 0x0, "n"
	DCB	0x0, "i", 0x0, "p", 0x0, "o", 0x0, "r", 0x0, "t", 0x0, "S"
	DCB	0x0, "e", 0x0, "n", 0x0, "d", 0x0, "P", 0x0, "a", 0x0, "c"
	DCB	0x0, "k", 0x0, "e", 0x0, "t", 0x0, "s", 0x0, "H", 0x0, "a"
	DCB	0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e", 0x0, "r", 0x0, " "
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DI@ICNKKFKJ@?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAs?$AAe?$AAn?$AAd?$AA?5?$AAp?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?5?$AA?$CF?$AAd?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| DCB "U"
	DCB	0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, " "
	DCB	0x0, "t", 0x0, "o", 0x0, " ", 0x0, "s", 0x0, "e", 0x0, "n"
	DCB	0x0, "d", 0x0, " ", 0x0, "p", 0x0, "a", 0x0, "c", 0x0, "k"
	DCB	0x0, "e", 0x0, "t", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, " "
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1LA@ECMAGNKC@?$AAP?$AAh?$AAy?$AAs?$AAi?$AAc?$AAa?$AAl?$AAB?$AAu?$AAf?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AAp?$AAA?$AAd?$AAa?$AAp?$AAt?$AAe?$AAr?$AA?9?$AA?$DO?$AAT@| DCB "P"
	DCB	0x0, "h", 0x0, "y", 0x0, "s", 0x0, "i", 0x0, "c", 0x0, "a"
	DCB	0x0, "l", 0x0, "B", 0x0, "u", 0x0, "f", 0x0, "C", 0x0, "o"
	DCB	0x0, "u", 0x0, "n", 0x0, "t", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, "p", 0x0, "A", 0x0, "d", 0x0, "a"
	DCB	0x0, "p", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "-", 0x0, ">"
	DCB	0x0, "T", 0x0, "x", 0x0, "B", 0x0, "u", 0x0, "f", 0x0, "I"
	DCB	0x0, "n", 0x0, "f", 0x0, "o", 0x0, "P", 0x0, "o", 0x0, "o"
	DCB	0x0, "l", 0x0, ".", 0x0, "C", 0x0, "o", 0x0, "u", 0x0, "n"
	DCB	0x0, "t", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, "B", 0x0, "u", 0x0, "f", 0x0, "C", 0x0, "o", 0x0, "u"
	DCB	0x0, "n", 0x0, "t", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, "T", 0x0, "o", 0x0, "t", 0x0, "a", 0x0, "l"
	DCB	0x0, "P", 0x0, "k", 0x0, "t", 0x0, "L", 0x0, "e", 0x0, "n"
	DCB	0x0, "g", 0x0, "t", 0x0, "h", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FG@LLNAPMNB@?$AA?9?$AA?9?$AA?9?$AA?$DO?$AA?5?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAS?$AAe?$AAn?$AAd?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AAs?$AAH?$AAa?$AAn@| DCB "-"
	DCB	0x0, "-", 0x0, "-", 0x0, ">", 0x0, " ", 0x0, "E", 0x0, "m"
	DCB	0x0, "a", 0x0, "c", 0x0, "_", 0x0, "M", 0x0, "i", 0x0, "n"
	DCB	0x0, "i", 0x0, "p", 0x0, "o", 0x0, "r", 0x0, "t", 0x0, "S"
	DCB	0x0, "e", 0x0, "n", 0x0, "d", 0x0, "P", 0x0, "a", 0x0, "c"
	DCB	0x0, "k", 0x0, "e", 0x0, "t", 0x0, "s", 0x0, "H", 0x0, "a"
	DCB	0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e", 0x0, "r", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, " ", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Odtp

  00dc4			 AREA	 |.text|, CODE, ARM

  00dc4		 |Emac_MiniportSendPacketsHandler| PROC

; 671  : {  

  00dc4		 |$LN39@Emac_Minip@3|
  00dc4	e1a0c00d	 mov         r12, sp
  00dc8	e92d0007	 stmdb       sp!, {r0 - r2}
  00dcc	e92d5000	 stmdb       sp!, {r12, lr}
  00dd0	e24dd06c	 sub         sp, sp, #0x6C
  00dd4		 |$M50767|

; 672  :     USHORT          Count;
; 673  :     PNDIS_PACKET    CurPacket;
; 674  :     PEMAC_ADAPTER   pAdapter;
; 675  :     UINT            PhysicalBufCount;
; 676  :     UINT            BufCount;
; 677  :     UINT            TotalPktLength;
; 678  :     UINT            CurBufAddress;
; 679  :     UINT            CurBufAddressPa;
; 680  :     PNDIS_BUFFER    FirstBuf;
; 681  :     PEMAC_TXPKT     pTxPktInfo = NULL;

  00dd4	e3a03000	 mov         r3, #0
  00dd8	e58d3008	 str         r3, [sp, #8]

; 682  :     PEMAC_TXBUF     TxHeadBuf;
; 683  :     PEMAC_TXBUF     TxNextHeadBuf;
; 684  :     PEMAC_TXBUF     TxPrevTailBuf;
; 685  :     PEMAC_TXBUF     TxTailBuf;  
; 686  :     PEMAC_TXBUF     pTxBufInfo;
; 687  :     QUEUE_T         TmpPerSendPktPool;    
; 688  : 
; 689  :     ULONG BytesCopied;
; 690  : 
; 691  :     pAdapter = (PEMAC_ADAPTER)MiniportAdapterContext;

  00ddc	e59d3074	 ldr         r3, [sp, #0x74]
  00de0	e58d3048	 str         r3, [sp, #0x48]

; 692  : 
; 693  :     DEBUGMSG(DBG_FUNC && DBG_TX, (L"---> Emac_MiniportSendPacketsHandler %d \r\n",NumberOfPackets));

  00de4	e59f375c	 ldr         r3, [pc, #0x75C]
  00de8	e5933440	 ldr         r3, [r3, #0x440]
  00dec	e3130080	 tst         r3, #0x80
  00df0	0a000009	 beq         |$LN29@Emac_Minip@3|
  00df4	e59f374c	 ldr         r3, [pc, #0x74C]
  00df8	e5933440	 ldr         r3, [r3, #0x440]
  00dfc	e3130010	 tst         r3, #0x10
  00e00	0a000005	 beq         |$LN29@Emac_Minip@3|
  00e04	e59d107c	 ldr         r1, [sp, #0x7C]
  00e08	e59f0744	 ldr         r0, [pc, #0x744]
  00e0c	eb000000	 bl          NKDbgPrintfW
  00e10	e3a03001	 mov         r3, #1
  00e14	e58d305c	 str         r3, [sp, #0x5C]
  00e18	ea000001	 b           |$LN30@Emac_Minip@3|
  00e1c		 |$LN29@Emac_Minip@3|
  00e1c	e3a03000	 mov         r3, #0
  00e20	e58d305c	 str         r3, [sp, #0x5C]
  00e24		 |$LN30@Emac_Minip@3|

; 694  :   
; 695  :      /* Acquire the Send lock */
; 696  :     NdisAcquireSpinLock(&pAdapter->m_SendLock); 

  00e24	e59d3048	 ldr         r3, [sp, #0x48]
  00e28	e283006c	 add         r0, r3, #0x6C
  00e2c	eb000000	 bl          NdisAcquireSpinLock

; 697  : 
; 698  :     if(DOWN == pAdapter->m_LinkStatus)

  00e30	e59d3048	 ldr         r3, [sp, #0x48]
  00e34	e2833f69	 add         r3, r3, #0x69, 30
  00e38	e5933000	 ldr         r3, [r3]
  00e3c	e3530001	 cmp         r3, #1
  00e40	1a000000	 bne         |$LN26@Emac_Minip@3|

; 699  :     {
; 700  :         goto end;  

  00e44	ea0001a9	 b           |$end$50371|
  00e48		 |$LN26@Emac_Minip@3|

; 701  :     }
; 702  : 
; 703  : 
; 704  :     /* Initialise total packets maintained queue of bufs list */
; 705  :     QUEUE_INIT(&TmpPerSendPktPool);

  00e48	e3a03000	 mov         r3, #0
  00e4c	e58d3028	 str         r3, [sp, #0x28]
  00e50	e3a03000	 mov         r3, #0
  00e54	e58d302c	 str         r3, [sp, #0x2C]
  00e58	e3a03000	 mov         r3, #0
  00e5c	e58d3030	 str         r3, [sp, #0x30]

; 706  :               
; 707  :     for( Count = 0 ; Count < NumberOfPackets ; Count++)

  00e60	e3a03000	 mov         r3, #0
  00e64	e1cd31b4	 strh        r3, [sp, #0x14]
  00e68	ea000004	 b           |$LN25@Emac_Minip@3|
  00e6c		 |$LN24@Emac_Minip@3|
  00e6c	e1dd31b4	 ldrh        r3, [sp, #0x14]
  00e70	e2833001	 add         r3, r3, #1
  00e74	e1a03803	 mov         r3, r3, lsl #16
  00e78	e1a03823	 mov         r3, r3, lsr #16
  00e7c	e1cd31b4	 strh        r3, [sp, #0x14]
  00e80		 |$LN25@Emac_Minip@3|
  00e80	e1dd21b4	 ldrh        r2, [sp, #0x14]
  00e84	e59d307c	 ldr         r3, [sp, #0x7C]
  00e88	e1520003	 cmp         r2, r3
  00e8c	2a00012c	 bcs         |$LN23@Emac_Minip@3|

; 708  :     {
; 709  :         /* Point to current packet */
; 710  :         CurPacket = PacketArray[Count];

  00e90	e1dd31b4	 ldrh        r3, [sp, #0x14]
  00e94	e1a01003	 mov         r1, r3
  00e98	e3a03004	 mov         r3, #4
  00e9c	e0020391	 mul         r2, r1, r3
  00ea0	e59d3078	 ldr         r3, [sp, #0x78]
  00ea4	e0833002	 add         r3, r3, r2
  00ea8	e5933000	 ldr         r3, [r3]
  00eac	e58d3010	 str         r3, [sp, #0x10]

; 711  :         
; 712  :         /* Querying information about packet */
; 713  :         NdisQueryPacket(CurPacket,
; 714  :                        &PhysicalBufCount,
; 715  :                        &BufCount,
; 716  :                        &FirstBuf,
; 717  :                        &TotalPktLength);

  00eb0	e28d3044	 add         r3, sp, #0x44
  00eb4	e58d3000	 str         r3, [sp]
  00eb8	e28d3020	 add         r3, sp, #0x20
  00ebc	e28d204c	 add         r2, sp, #0x4C
  00ec0	e28d1040	 add         r1, sp, #0x40
  00ec4	e59d0010	 ldr         r0, [sp, #0x10]
  00ec8	eb000000	 bl          NdisQueryPacket

; 718  :         
; 719  :        /*  Number of Physical buffers, could be returned with invalid 
; 720  :         *  higher order bits.
; 721  :         */
; 722  :         PhysicalBufCount &= 0x0000FFFF;

  00ecc	e59d2040	 ldr         r2, [sp, #0x40]
  00ed0	e3a03cff	 mov         r3, #0xFF, 24
  00ed4	e38330ff	 orr         r3, r3, #0xFF
  00ed8	e0023003	 and         r3, r2, r3
  00edc	e58d3040	 str         r3, [sp, #0x40]

; 723  :         
; 724  :         DEBUGMSG(DBG_TX, (L"PhysicalBufCount %d\r\npAdapter->TxBufInfoPool.Count %d\r\nBufCount %d\r\nTotalPktLength %d\r\n",
; 725  :             PhysicalBufCount,pAdapter->m_TxBufInfoPool.m_Count,BufCount,TotalPktLength)); 

  00ee0	e59f3660	 ldr         r3, [pc, #0x660]
  00ee4	e5933440	 ldr         r3, [r3, #0x440]
  00ee8	e3130010	 tst         r3, #0x10
  00eec	0a00000b	 beq         |$LN31@Emac_Minip@3|
  00ef0	e59d3044	 ldr         r3, [sp, #0x44]
  00ef4	e58d3000	 str         r3, [sp]
  00ef8	e59d304c	 ldr         r3, [sp, #0x4C]
  00efc	e59d2048	 ldr         r2, [sp, #0x48]
  00f00	e2822e1d	 add         r2, r2, #0x1D, 28
  00f04	e5922000	 ldr         r2, [r2]
  00f08	e59d1040	 ldr         r1, [sp, #0x40]
  00f0c	e59f063c	 ldr         r0, [pc, #0x63C]
  00f10	eb000000	 bl          NKDbgPrintfW
  00f14	e3a03001	 mov         r3, #1
  00f18	e58d3060	 str         r3, [sp, #0x60]
  00f1c	ea000001	 b           |$LN32@Emac_Minip@3|
  00f20		 |$LN31@Emac_Minip@3|
  00f20	e3a03000	 mov         r3, #0
  00f24	e58d3060	 str         r3, [sp, #0x60]
  00f28		 |$LN32@Emac_Minip@3|

; 726  :    
; 727  :         
; 728  :         if(0 == QUEUE_COUNT(&pAdapter->m_TxPktsInfoPool))

  00f28	e59d3048	 ldr         r3, [sp, #0x48]
  00f2c	e2833f77	 add         r3, r3, #0x77, 30
  00f30	e5933000	 ldr         r3, [r3]
  00f34	e3530000	 cmp         r3, #0
  00f38	1a000018	 bne         |$LN22@Emac_Minip@3|

; 729  :         {
; 730  :             DEBUGMSG(DBG_WARN, (L"Unable to send packet %d \r\n",QUEUE_COUNT(&pAdapter->m_TxPktsInfoPool)));

  00f3c	e59f3604	 ldr         r3, [pc, #0x604]
  00f40	e5933440	 ldr         r3, [r3, #0x440]
  00f44	e3130901	 tst         r3, #1, 18
  00f48	0a000007	 beq         |$LN33@Emac_Minip@3|
  00f4c	e59d3048	 ldr         r3, [sp, #0x48]
  00f50	e2833f77	 add         r3, r3, #0x77, 30
  00f54	e5931000	 ldr         r1, [r3]
  00f58	e59f05ec	 ldr         r0, [pc, #0x5EC]
  00f5c	eb000000	 bl          NKDbgPrintfW
  00f60	e3a03001	 mov         r3, #1
  00f64	e58d3064	 str         r3, [sp, #0x64]
  00f68	ea000001	 b           |$LN34@Emac_Minip@3|
  00f6c		 |$LN33@Emac_Minip@3|
  00f6c	e3a03000	 mov         r3, #0
  00f70	e58d3064	 str         r3, [sp, #0x64]
  00f74		 |$LN34@Emac_Minip@3|

; 731  :             /* Set status as resources */
; 732  :             NDIS_SET_PACKET_STATUS(CurPacket,NDIS_STATUS_RESOURCES );

  00f74	e59d3010	 ldr         r3, [sp, #0x10]
  00f78	e283301e	 add         r3, r3, #0x1E
  00f7c	e1d330b0	 ldrh        r3, [r3]
  00f80	e1a02003	 mov         r2, r3
  00f84	e59d3010	 ldr         r3, [sp, #0x10]
  00f88	e0833002	 add         r3, r3, r2
  00f8c	e283201c	 add         r2, r3, #0x1C
  00f90	e3a03103	 mov         r3, #3, 2
  00f94	e383309a	 orr         r3, r3, #0x9A
  00f98	e5823000	 str         r3, [r2]

; 733  :             
; 734  :             /* we will return to indicate NDIS to resubmit remaining packets */
; 735  :             continue;

  00f9c	eaffffb2	 b           |$LN24@Emac_Minip@3|
  00fa0		 |$LN22@Emac_Minip@3|

; 736  :         }
; 737  : 
; 738  :         /* we can transmit this packet 
; 739  :          * Dequeue  from available packet pool a packet  
; 740  :          */
; 741  :         QUEUE_REMOVE(&pAdapter->m_TxPktsInfoPool, pTxPktInfo);

  00fa0	e3a03000	 mov         r3, #0
  00fa4	e58d3008	 str         r3, [sp, #8]
  00fa8	e59d3048	 ldr         r3, [sp, #0x48]
  00fac	e2933f75	 adds        r3, r3, #0x75, 30
  00fb0	0a000022	 beq         |$LN21@Emac_Minip@3|
  00fb4	e59d3048	 ldr         r3, [sp, #0x48]
  00fb8	e2833f75	 add         r3, r3, #0x75, 30
  00fbc	e5933000	 ldr         r3, [r3]
  00fc0	e3530000	 cmp         r3, #0
  00fc4	0a00001d	 beq         |$LN21@Emac_Minip@3|
  00fc8	e59d3048	 ldr         r3, [sp, #0x48]
  00fcc	e2833f75	 add         r3, r3, #0x75, 30
  00fd0	e5933000	 ldr         r3, [r3]
  00fd4	e58d3008	 str         r3, [sp, #8]
  00fd8	e59d3048	 ldr         r3, [sp, #0x48]
  00fdc	e2833f75	 add         r3, r3, #0x75, 30
  00fe0	e5931000	 ldr         r1, [r3]
  00fe4	e59d3048	 ldr         r3, [sp, #0x48]
  00fe8	e2832f75	 add         r2, r3, #0x75, 30
  00fec	e5913000	 ldr         r3, [r1]
  00ff0	e5823000	 str         r3, [r2]
  00ff4	e59d3048	 ldr         r3, [sp, #0x48]
  00ff8	e2833f75	 add         r3, r3, #0x75, 30
  00ffc	e5933000	 ldr         r3, [r3]
  01000	e3530000	 cmp         r3, #0
  01004	1a000003	 bne         |$LN20@Emac_Minip@3|
  01008	e59d3048	 ldr         r3, [sp, #0x48]
  0100c	e2832f76	 add         r2, r3, #0x76, 30
  01010	e3a03000	 mov         r3, #0
  01014	e5823000	 str         r3, [r2]
  01018		 |$LN20@Emac_Minip@3|
  01018	e59d3048	 ldr         r3, [sp, #0x48]
  0101c	e2833f77	 add         r3, r3, #0x77, 30
  01020	e5933000	 ldr         r3, [r3]
  01024	e2432001	 sub         r2, r3, #1
  01028	e59d3048	 ldr         r3, [sp, #0x48]
  0102c	e2833f77	 add         r3, r3, #0x77, 30
  01030	e5832000	 str         r2, [r3]
  01034	e59d2008	 ldr         r2, [sp, #8]
  01038	e3a03000	 mov         r3, #0
  0103c	e5823000	 str         r3, [r2]
  01040		 |$LN21@Emac_Minip@3|

; 742  :         
; 743  :         /* Initialise per packet maintained queue of bufs list */
; 744  :         QUEUE_INIT(&pTxPktInfo->m_BufsList);

  01040	e59d3008	 ldr         r3, [sp, #8]
  01044	e2832008	 add         r2, r3, #8
  01048	e3a03000	 mov         r3, #0
  0104c	e5823000	 str         r3, [r2]
  01050	e59d3008	 ldr         r3, [sp, #8]
  01054	e283200c	 add         r2, r3, #0xC
  01058	e3a03000	 mov         r3, #0
  0105c	e5823000	 str         r3, [r2]
  01060	e59d3008	 ldr         r3, [sp, #8]
  01064	e2832010	 add         r2, r3, #0x10
  01068	e3a03000	 mov         r3, #0
  0106c	e5823000	 str         r3, [r2]

; 745  :         
; 746  :         /* Pkt handle will be current packet */
; 747  :         pTxPktInfo->m_PktHandle = CurPacket;

  01070	e59d3008	 ldr         r3, [sp, #8]
  01074	e2832004	 add         r2, r3, #4
  01078	e59d3010	 ldr         r3, [sp, #0x10]
  0107c	e5823000	 str         r3, [r2]

; 748  :         
; 749  :         /*
; 750  :         * Dequeue a TxBufInfoPool structure, and assert that one is
; 751  :         * available.
; 752  :         */
; 753  :         QUEUE_REMOVE(&pAdapter->m_TxBufInfoPool, pTxBufInfo);

  01080	e3a03000	 mov         r3, #0
  01084	e58d3024	 str         r3, [sp, #0x24]
  01088	e59d3048	 ldr         r3, [sp, #0x48]
  0108c	e2933f72	 adds        r3, r3, #0x72, 30
  01090	0a000022	 beq         |$LN19@Emac_Minip@3|
  01094	e59d3048	 ldr         r3, [sp, #0x48]
  01098	e2833f72	 add         r3, r3, #0x72, 30
  0109c	e5933000	 ldr         r3, [r3]
  010a0	e3530000	 cmp         r3, #0
  010a4	0a00001d	 beq         |$LN19@Emac_Minip@3|
  010a8	e59d3048	 ldr         r3, [sp, #0x48]
  010ac	e2833f72	 add         r3, r3, #0x72, 30
  010b0	e5933000	 ldr         r3, [r3]
  010b4	e58d3024	 str         r3, [sp, #0x24]
  010b8	e59d3048	 ldr         r3, [sp, #0x48]
  010bc	e2833f72	 add         r3, r3, #0x72, 30
  010c0	e5931000	 ldr         r1, [r3]
  010c4	e59d3048	 ldr         r3, [sp, #0x48]
  010c8	e2832f72	 add         r2, r3, #0x72, 30
  010cc	e5913000	 ldr         r3, [r1]
  010d0	e5823000	 str         r3, [r2]
  010d4	e59d3048	 ldr         r3, [sp, #0x48]
  010d8	e2833f72	 add         r3, r3, #0x72, 30
  010dc	e5933000	 ldr         r3, [r3]
  010e0	e3530000	 cmp         r3, #0
  010e4	1a000003	 bne         |$LN18@Emac_Minip@3|
  010e8	e59d3048	 ldr         r3, [sp, #0x48]
  010ec	e2832f73	 add         r2, r3, #0x73, 30
  010f0	e3a03000	 mov         r3, #0
  010f4	e5823000	 str         r3, [r2]
  010f8		 |$LN18@Emac_Minip@3|
  010f8	e59d3048	 ldr         r3, [sp, #0x48]
  010fc	e2833e1d	 add         r3, r3, #0x1D, 28
  01100	e5933000	 ldr         r3, [r3]
  01104	e2432001	 sub         r2, r3, #1
  01108	e59d3048	 ldr         r3, [sp, #0x48]
  0110c	e2833e1d	 add         r3, r3, #0x1D, 28
  01110	e5832000	 str         r2, [r3]
  01114	e59d2024	 ldr         r2, [sp, #0x24]
  01118	e3a03000	 mov         r3, #0
  0111c	e5823000	 str         r3, [r2]
  01120		 |$LN19@Emac_Minip@3|

; 754  :         
; 755  :         CurBufAddress  = pTxBufInfo->m_BufLogicalAddress;

  01120	e59d3024	 ldr         r3, [sp, #0x24]
  01124	e2833008	 add         r3, r3, #8
  01128	e5933000	 ldr         r3, [r3]
  0112c	e58d303c	 str         r3, [sp, #0x3C]

; 756  :         CurBufAddressPa = pTxBufInfo->m_BufPhysicalAddress;

  01130	e59d3024	 ldr         r3, [sp, #0x24]
  01134	e283300c	 add         r3, r3, #0xC
  01138	e5933000	 ldr         r3, [r3]
  0113c	e58d300c	 str         r3, [sp, #0xC]

; 757  :         
; 758  :         CopyPacketToBuffer(CurPacket,FirstBuf,
; 759  :                     (PUCHAR)CurBufAddress,
; 760  :                     TotalPktLength,
; 761  :                     &BytesCopied);

  01140	e28d3038	 add         r3, sp, #0x38
  01144	e58d3000	 str         r3, [sp]
  01148	e59d3044	 ldr         r3, [sp, #0x44]
  0114c	e59d203c	 ldr         r2, [sp, #0x3C]
  01150	e59d1020	 ldr         r1, [sp, #0x20]
  01154	e59d0010	 ldr         r0, [sp, #0x10]
  01158	eb000000	 bl          CopyPacketToBuffer

; 762  :         
; 763  :         if(TotalPktLength < EMAC_MIN_ETHERNET_PKT_SIZE)

  0115c	e59d3044	 ldr         r3, [sp, #0x44]
  01160	e353003c	 cmp         r3, #0x3C
  01164	2a000001	 bcs         |$LN17@Emac_Minip@3|

; 764  :         {
; 765  :             TotalPktLength = EMAC_MIN_ETHERNET_PKT_SIZE;

  01168	e3a0303c	 mov         r3, #0x3C
  0116c	e58d3044	 str         r3, [sp, #0x44]
  01170		 |$LN17@Emac_Minip@3|

; 766  :         }
; 767  :         
; 768  :         ((PEMACDESC)(pTxBufInfo->m_EmacBufDes))->pNext = 0;

  01170	e59d3024	 ldr         r3, [sp, #0x24]
  01174	e2833010	 add         r3, r3, #0x10
  01178	e5932000	 ldr         r2, [r3]
  0117c	e3a03000	 mov         r3, #0
  01180	e5823000	 str         r3, [r2]

; 769  :         
; 770  :         ((PEMACDESC)(pTxBufInfo->m_EmacBufDes))->PktFlgLen = (
; 771  :                                                                EMAC_DSC_FLAG_SOP |
; 772  :                                                                EMAC_DSC_FLAG_EOP | 
; 773  :                                                                EMAC_DSC_FLAG_OWNER |
; 774  :                                                                (TotalPktLength & 0xFFFF)
; 775  :                                                                );

  01184	e59d2044	 ldr         r2, [sp, #0x44]
  01188	e3a03cff	 mov         r3, #0xFF, 24
  0118c	e38330ff	 orr         r3, r3, #0xFF
  01190	e0023003	 and         r3, r2, r3
  01194	e383220e	 orr         r2, r3, #0xE, 4
  01198	e59d3024	 ldr         r3, [sp, #0x24]
  0119c	e2833010	 add         r3, r3, #0x10
  011a0	e5933000	 ldr         r3, [r3]
  011a4	e283300c	 add         r3, r3, #0xC
  011a8	e5832000	 str         r2, [r3]

; 776  :         ((PEMACDESC)(pTxBufInfo->m_EmacBufDes))->BufOffLen =  (TotalPktLength & 0xFFFF);

  011ac	e59d2044	 ldr         r2, [sp, #0x44]
  011b0	e3a03cff	 mov         r3, #0xFF, 24
  011b4	e38330ff	 orr         r3, r3, #0xFF
  011b8	e0022003	 and         r2, r2, r3
  011bc	e59d3024	 ldr         r3, [sp, #0x24]
  011c0	e2833010	 add         r3, r3, #0x10
  011c4	e5933000	 ldr         r3, [r3]
  011c8	e2833008	 add         r3, r3, #8
  011cc	e5832000	 str         r2, [r3]

; 777  :         
; 778  :         ((PEMACDESC)(pTxBufInfo->m_EmacBufDes))->pBuffer = (UINT8 *)CurBufAddressPa;

  011d0	e59d3024	 ldr         r3, [sp, #0x24]
  011d4	e2833010	 add         r3, r3, #0x10
  011d8	e5933000	 ldr         r3, [r3]
  011dc	e2832004	 add         r2, r3, #4
  011e0	e59d300c	 ldr         r3, [sp, #0xC]
  011e4	e5823000	 str         r3, [r2]

; 779  :         
; 780  :         
; 781  :         /* Insert in to per packet maintained buffer pool */
; 782  :         QUEUE_INSERT(&pTxPktInfo->m_BufsList,pTxBufInfo);

  011e8	e59d3008	 ldr         r3, [sp, #8]
  011ec	e2933008	 adds        r3, r3, #8
  011f0	0a00001f	 beq         |$LN16@Emac_Minip@3|
  011f4	e59d3024	 ldr         r3, [sp, #0x24]
  011f8	e3530000	 cmp         r3, #0
  011fc	0a00001c	 beq         |$LN16@Emac_Minip@3|
  01200	e59d3008	 ldr         r3, [sp, #8]
  01204	e2833008	 add         r3, r3, #8
  01208	e5933000	 ldr         r3, [r3]
  0120c	e3530000	 cmp         r3, #0
  01210	1a000004	 bne         |$LN15@Emac_Minip@3|
  01214	e59d3008	 ldr         r3, [sp, #8]
  01218	e2832008	 add         r2, r3, #8
  0121c	e59d3024	 ldr         r3, [sp, #0x24]
  01220	e5823000	 str         r3, [r2]
  01224	ea000004	 b           |$LN14@Emac_Minip@3|
  01228		 |$LN15@Emac_Minip@3|
  01228	e59d3008	 ldr         r3, [sp, #8]
  0122c	e283300c	 add         r3, r3, #0xC
  01230	e5932000	 ldr         r2, [r3]
  01234	e59d3024	 ldr         r3, [sp, #0x24]
  01238	e5823000	 str         r3, [r2]
  0123c		 |$LN14@Emac_Minip@3|
  0123c	e59d3008	 ldr         r3, [sp, #8]
  01240	e283200c	 add         r2, r3, #0xC
  01244	e59d3024	 ldr         r3, [sp, #0x24]
  01248	e5823000	 str         r3, [r2]
  0124c	e59d3008	 ldr         r3, [sp, #8]
  01250	e2833010	 add         r3, r3, #0x10
  01254	e5933000	 ldr         r3, [r3]
  01258	e2832001	 add         r2, r3, #1
  0125c	e59d3008	 ldr         r3, [sp, #8]
  01260	e2833010	 add         r3, r3, #0x10
  01264	e5832000	 str         r2, [r3]
  01268	e59d2024	 ldr         r2, [sp, #0x24]
  0126c	e3a03000	 mov         r3, #0
  01270	e5823000	 str         r3, [r2]
  01274		 |$LN16@Emac_Minip@3|

; 783  :         
; 784  :         
; 785  :         if(0 != QUEUE_COUNT(&TmpPerSendPktPool))

  01274	e59d3030	 ldr         r3, [sp, #0x30]
  01278	e3530000	 cmp         r3, #0
  0127c	0a00000e	 beq         |$LN13@Emac_Minip@3|

; 786  :         {
; 787  :             /* Since there are some other packets in to be posted send pkt pool
; 788  :              * we have to link the current head of the to be posted send packet pool 
; 789  :              * to the tail of temporary send packets pool
; 790  :              */
; 791  : 
; 792  :             /* First we will fetch the tail buffer of temp send pkts pool */
; 793  :             
; 794  :             TxPrevTailBuf = (PEMAC_TXBUF)(((PEMAC_TXPKT)(TmpPerSendPktPool.m_pTail))->m_BufsList).m_pTail;

  01280	e59d302c	 ldr         r3, [sp, #0x2C]
  01284	e283300c	 add         r3, r3, #0xC
  01288	e5933000	 ldr         r3, [r3]
  0128c	e58d3018	 str         r3, [sp, #0x18]

; 795  :             TxNextHeadBuf = (PEMAC_TXBUF)((pTxPktInfo->m_BufsList).m_pHead);

  01290	e59d3008	 ldr         r3, [sp, #8]
  01294	e2833008	 add         r3, r3, #8
  01298	e5933000	 ldr         r3, [r3]
  0129c	e58d3004	 str         r3, [sp, #4]

; 796  :             
; 797  :             ((PEMACDESC)(TxPrevTailBuf->m_EmacBufDes))->pNext = (PEMACDESC)(TxNextHeadBuf->m_EmacBufDesPa);

  012a0	e59d3004	 ldr         r3, [sp, #4]
  012a4	e2831014	 add         r1, r3, #0x14
  012a8	e59d3018	 ldr         r3, [sp, #0x18]
  012ac	e2833010	 add         r3, r3, #0x10
  012b0	e5932000	 ldr         r2, [r3]
  012b4	e5913000	 ldr         r3, [r1]
  012b8	e5823000	 str         r3, [r2]
  012bc		 |$LN13@Emac_Minip@3|

; 798  :          }
; 799  :         /* add it to the to be posted packet pool */
; 800  :        
; 801  :         QUEUE_INSERT(&TmpPerSendPktPool,pTxPktInfo);

  012bc	e28d3028	 add         r3, sp, #0x28
  012c0	e3530000	 cmp         r3, #0
  012c4	0a000013	 beq         |$LN12@Emac_Minip@3|
  012c8	e59d3008	 ldr         r3, [sp, #8]
  012cc	e3530000	 cmp         r3, #0
  012d0	0a000010	 beq         |$LN12@Emac_Minip@3|
  012d4	e59d3028	 ldr         r3, [sp, #0x28]
  012d8	e3530000	 cmp         r3, #0
  012dc	1a000002	 bne         |$LN11@Emac_Minip@3|
  012e0	e59d3008	 ldr         r3, [sp, #8]
  012e4	e58d3028	 str         r3, [sp, #0x28]
  012e8	ea000002	 b           |$LN10@Emac_Minip@3|
  012ec		 |$LN11@Emac_Minip@3|
  012ec	e59d2008	 ldr         r2, [sp, #8]
  012f0	e59d302c	 ldr         r3, [sp, #0x2C]
  012f4	e5832000	 str         r2, [r3]
  012f8		 |$LN10@Emac_Minip@3|
  012f8	e59d3008	 ldr         r3, [sp, #8]
  012fc	e58d302c	 str         r3, [sp, #0x2C]
  01300	e59d3030	 ldr         r3, [sp, #0x30]
  01304	e2833001	 add         r3, r3, #1
  01308	e58d3030	 str         r3, [sp, #0x30]
  0130c	e59d2008	 ldr         r2, [sp, #8]
  01310	e3a03000	 mov         r3, #0
  01314	e5823000	 str         r3, [r2]
  01318		 |$LN12@Emac_Minip@3|

; 802  :            
; 803  :         /* Set status as pending as we are indicating asynchronously */
; 804  :         
; 805  :         NDIS_SET_PACKET_STATUS(CurPacket,NDIS_STATUS_PENDING );

  01318	e59d3010	 ldr         r3, [sp, #0x10]
  0131c	e283301e	 add         r3, r3, #0x1E
  01320	e1d330b0	 ldrh        r3, [r3]
  01324	e1a02003	 mov         r2, r3
  01328	e59d3010	 ldr         r3, [sp, #0x10]
  0132c	e0833002	 add         r3, r3, r2
  01330	e283201c	 add         r2, r3, #0x1C
  01334	e3a03c01	 mov         r3, #1, 24
  01338	e3833003	 orr         r3, r3, #3
  0133c	e5823000	 str         r3, [r2]

; 806  :         
; 807  :     }/* end of for loop */

  01340	eafffec9	 b           |$LN24@Emac_Minip@3|
  01344		 |$LN23@Emac_Minip@3|

; 808  :     
; 809  :     if(0 == QUEUE_COUNT(&TmpPerSendPktPool))

  01344	e59d3030	 ldr         r3, [sp, #0x30]
  01348	e3530000	 cmp         r3, #0
  0134c	1a000000	 bne         |$LN9@Emac_Minip@3|

; 810  :     {
; 811  :         goto end;   

  01350	ea000066	 b           |$end$50371|
  01354		 |$LN9@Emac_Minip@3|

; 812  :     }
; 813  :   
; 814  :     if(0 == QUEUE_COUNT(&pAdapter->m_TxPostedPktPool))

  01354	e59d3048	 ldr         r3, [sp, #0x48]
  01358	e2833f7a	 add         r3, r3, #0x7A, 30
  0135c	e5933000	 ldr         r3, [r3]
  01360	e3530000	 cmp         r3, #0
  01364	1a00002f	 bne         |$LN8@Emac_Minip@3|

; 815  :     {
; 816  :         /* Insert in to posted packets pool */
; 817  :         QUEUE_INSERT_QUEUE(&pAdapter->m_TxPostedPktPool,&TmpPerSendPktPool);

  01368	e59d3048	 ldr         r3, [sp, #0x48]
  0136c	e2933e1e	 adds        r3, r3, #0x1E, 28
  01370	0a00001d	 beq         |$LN7@Emac_Minip@3|
  01374	e28d3028	 add         r3, sp, #0x28
  01378	e3530000	 cmp         r3, #0
  0137c	0a00001a	 beq         |$LN7@Emac_Minip@3|
  01380	e59d3048	 ldr         r3, [sp, #0x48]
  01384	e2833f79	 add         r3, r3, #0x79, 30
  01388	e5933000	 ldr         r3, [r3]
  0138c	e3530000	 cmp         r3, #0
  01390	0a000005	 beq         |$LN6@Emac_Minip@3|
  01394	e59d3048	 ldr         r3, [sp, #0x48]
  01398	e2833f79	 add         r3, r3, #0x79, 30
  0139c	e5932000	 ldr         r2, [r3]
  013a0	e59d3028	 ldr         r3, [sp, #0x28]
  013a4	e5823000	 str         r3, [r2]
  013a8	ea000003	 b           |$LN5@Emac_Minip@3|
  013ac		 |$LN6@Emac_Minip@3|
  013ac	e59d3048	 ldr         r3, [sp, #0x48]
  013b0	e2832e1e	 add         r2, r3, #0x1E, 28
  013b4	e59d3028	 ldr         r3, [sp, #0x28]
  013b8	e5823000	 str         r3, [r2]
  013bc		 |$LN5@Emac_Minip@3|
  013bc	e59d3048	 ldr         r3, [sp, #0x48]
  013c0	e2832f79	 add         r2, r3, #0x79, 30
  013c4	e59d302c	 ldr         r3, [sp, #0x2C]
  013c8	e5823000	 str         r3, [r2]
  013cc	e59d3048	 ldr         r3, [sp, #0x48]
  013d0	e2833f7a	 add         r3, r3, #0x7A, 30
  013d4	e5932000	 ldr         r2, [r3]
  013d8	e59d3030	 ldr         r3, [sp, #0x30]
  013dc	e0822003	 add         r2, r2, r3
  013e0	e59d3048	 ldr         r3, [sp, #0x48]
  013e4	e2833f7a	 add         r3, r3, #0x7A, 30
  013e8	e5832000	 str         r2, [r3]
  013ec		 |$LN7@Emac_Minip@3|

; 818  :         
; 819  :         TxHeadBuf = (PEMAC_TXBUF)(((PEMAC_TXPKT)(pAdapter->m_TxPostedPktPool.m_pHead))->m_BufsList).m_pHead;

  013ec	e59d3048	 ldr         r3, [sp, #0x48]
  013f0	e2833e1e	 add         r3, r3, #0x1E, 28
  013f4	e5933000	 ldr         r3, [r3]
  013f8	e2833008	 add         r3, r3, #8
  013fc	e5933000	 ldr         r3, [r3]
  01400	e58d301c	 str         r3, [sp, #0x1C]

; 820  :        
; 821  :         /* Submit formed TX buffers queue to EMAC TX DMA */  
; 822  :         pAdapter->m_pEmacRegsBase->TX0HDP = TxHeadBuf->m_EmacBufDesPa;

  01404	e59d301c	 ldr         r3, [sp, #0x1C]
  01408	e2831014	 add         r1, r3, #0x14
  0140c	e59d3048	 ldr         r3, [sp, #0x48]
  01410	e2833004	 add         r3, r3, #4
  01414	e5933000	 ldr         r3, [r3]
  01418	e2832c06	 add         r2, r3, #6, 24
  0141c	e5913000	 ldr         r3, [r1]
  01420	e5823000	 str         r3, [r2]

; 823  :         
; 824  :     }
; 825  :     else   /* Posted packets is non zero */

  01424	ea000031	 b           |$LN4@Emac_Minip@3|
  01428		 |$LN8@Emac_Minip@3|

; 826  :     {    
; 827  :         TxTailBuf = (PEMAC_TXBUF)(((PEMAC_TXPKT)(pAdapter->m_TxPostedPktPool.m_pTail))->m_BufsList).m_pTail;

  01428	e59d3048	 ldr         r3, [sp, #0x48]
  0142c	e2833f79	 add         r3, r3, #0x79, 30
  01430	e5933000	 ldr         r3, [r3]
  01434	e283300c	 add         r3, r3, #0xC
  01438	e5933000	 ldr         r3, [r3]
  0143c	e58d3034	 str         r3, [sp, #0x34]

; 828  :         TxHeadBuf = (PEMAC_TXBUF)(((PEMAC_TXPKT)(TmpPerSendPktPool.m_pHead))->m_BufsList).m_pHead;

  01440	e59d3028	 ldr         r3, [sp, #0x28]
  01444	e2833008	 add         r3, r3, #8
  01448	e5933000	 ldr         r3, [r3]
  0144c	e58d301c	 str         r3, [sp, #0x1C]

; 829  :          
; 830  :         /* Insert in to posted packets pool */
; 831  :         QUEUE_INSERT_QUEUE(&pAdapter->m_TxPostedPktPool,&TmpPerSendPktPool);

  01450	e59d3048	 ldr         r3, [sp, #0x48]
  01454	e2933e1e	 adds        r3, r3, #0x1E, 28
  01458	0a00001d	 beq         |$LN3@Emac_Minip@3|
  0145c	e28d3028	 add         r3, sp, #0x28
  01460	e3530000	 cmp         r3, #0
  01464	0a00001a	 beq         |$LN3@Emac_Minip@3|
  01468	e59d3048	 ldr         r3, [sp, #0x48]
  0146c	e2833f79	 add         r3, r3, #0x79, 30
  01470	e5933000	 ldr         r3, [r3]
  01474	e3530000	 cmp         r3, #0
  01478	0a000005	 beq         |$LN2@Emac_Minip@3|
  0147c	e59d3048	 ldr         r3, [sp, #0x48]
  01480	e2833f79	 add         r3, r3, #0x79, 30
  01484	e5932000	 ldr         r2, [r3]
  01488	e59d3028	 ldr         r3, [sp, #0x28]
  0148c	e5823000	 str         r3, [r2]
  01490	ea000003	 b           |$LN1@Emac_Minip@3|
  01494		 |$LN2@Emac_Minip@3|
  01494	e59d3048	 ldr         r3, [sp, #0x48]
  01498	e2832e1e	 add         r2, r3, #0x1E, 28
  0149c	e59d3028	 ldr         r3, [sp, #0x28]
  014a0	e5823000	 str         r3, [r2]
  014a4		 |$LN1@Emac_Minip@3|
  014a4	e59d3048	 ldr         r3, [sp, #0x48]
  014a8	e2832f79	 add         r2, r3, #0x79, 30
  014ac	e59d302c	 ldr         r3, [sp, #0x2C]
  014b0	e5823000	 str         r3, [r2]
  014b4	e59d3048	 ldr         r3, [sp, #0x48]
  014b8	e2833f7a	 add         r3, r3, #0x7A, 30
  014bc	e5932000	 ldr         r2, [r3]
  014c0	e59d3030	 ldr         r3, [sp, #0x30]
  014c4	e0822003	 add         r2, r2, r3
  014c8	e59d3048	 ldr         r3, [sp, #0x48]
  014cc	e2833f7a	 add         r3, r3, #0x7A, 30
  014d0	e5832000	 str         r2, [r3]
  014d4		 |$LN3@Emac_Minip@3|

; 832  :             
; 833  :         /* Insert in to posted packets pool */
; 834  :         ((PEMACDESC)(TxTailBuf->m_EmacBufDes))->pNext = ((PEMACDESC)(TxHeadBuf->m_EmacBufDesPa));

  014d4	e59d301c	 ldr         r3, [sp, #0x1C]
  014d8	e2831014	 add         r1, r3, #0x14
  014dc	e59d3034	 ldr         r3, [sp, #0x34]
  014e0	e2833010	 add         r3, r3, #0x10
  014e4	e5932000	 ldr         r2, [r3]
  014e8	e5913000	 ldr         r3, [r1]
  014ec	e5823000	 str         r3, [r2]
  014f0		 |$LN4@Emac_Minip@3|
  014f0		 |$end$50371|

; 835  :         
; 836  :     }
; 837  : 
; 838  : end:   
; 839  :     NdisReleaseSpinLock(&pAdapter->m_SendLock);

  014f0	e59d3048	 ldr         r3, [sp, #0x48]
  014f4	e283006c	 add         r0, r3, #0x6C
  014f8	eb000000	 bl          NdisReleaseSpinLock

; 840  :     
; 841  :     DEBUGMSG(DBG_FUNC && DBG_TX, (L"<--- Emac_MiniportSendPacketsHandler \r\n"));

  014fc	e59f3044	 ldr         r3, [pc, #0x44]
  01500	e5933440	 ldr         r3, [r3, #0x440]
  01504	e3130080	 tst         r3, #0x80
  01508	0a000008	 beq         |$LN35@Emac_Minip@3|
  0150c	e59f3034	 ldr         r3, [pc, #0x34]
  01510	e5933440	 ldr         r3, [r3, #0x440]
  01514	e3130010	 tst         r3, #0x10
  01518	0a000004	 beq         |$LN35@Emac_Minip@3|
  0151c	e59f0020	 ldr         r0, [pc, #0x20]
  01520	eb000000	 bl          NKDbgPrintfW
  01524	e3a03001	 mov         r3, #1
  01528	e58d3068	 str         r3, [sp, #0x68]
  0152c	ea000001	 b           |$LN36@Emac_Minip@3|
  01530		 |$LN35@Emac_Minip@3|
  01530	e3a03000	 mov         r3, #0
  01534	e58d3068	 str         r3, [sp, #0x68]
  01538		 |$LN36@Emac_Minip@3|

; 842  : }

  01538	e28dd06c	 add         sp, sp, #0x6C
  0153c	e89d6000	 ldmia       sp, {sp, lr}
  01540	e12fff1e	 bx          lr
  01544		 |$LN40@Emac_Minip@3|
  01544		 |$LN41@Emac_Minip@3|
  01544	00000000	 DCD         |??_C@_1FA@PDBIFEGH@?$AA?$DM?$AA?9?$AA?9?$AA?9?$AA?5?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAS?$AAe?$AAn?$AAd?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AAs?$AAH?$AAa?$AAn@|
  01548		 |$LN42@Emac_Minip@3|
  01548	00000000	 DCD         |dpCurSettings|
  0154c		 |$LN43@Emac_Minip@3|
  0154c	00000000	 DCD         |??_C@_1DI@ICNKKFKJ@?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAs?$AAe?$AAn?$AAd?$AA?5?$AAp?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?5?$AA?$CF?$AAd?$AA?5?$AA?$AN?$AA?6?$AA?$AA@|
  01550		 |$LN44@Emac_Minip@3|
  01550	00000000	 DCD         |??_C@_1LA@ECMAGNKC@?$AAP?$AAh?$AAy?$AAs?$AAi?$AAc?$AAa?$AAl?$AAB?$AAu?$AAf?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AAp?$AAA?$AAd?$AAa?$AAp?$AAt?$AAe?$AAr?$AA?9?$AA?$DO?$AAT@|
  01554		 |$LN45@Emac_Minip@3|
  01554	00000000	 DCD         |??_C@_1FG@LLNAPMNB@?$AA?9?$AA?9?$AA?9?$AA?$DO?$AA?5?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAS?$AAe?$AAn?$AAd?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AAs?$AAH?$AAa?$AAn@|
  01558		 |$M50768|

			 ENDP  ; |Emac_MiniportSendPacketsHandler|

	EXPORT	|??_C@_1EM@KBLJKKFJ@?$AA?$DM?$AA?9?$AA?9?$AA?9?$AA?5?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAR?$AAe?$AAs?$AAe?$AAt?$AA?5?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?5?$AA?$DN@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GK@HEDBLALI@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAR?$AAe?$AAs?$AAe?$AAt?$AA?3?$AAN?$AAI?$AAC?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FI@LDCCALIL@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAR?$AAe?$AAs?$AAe?$AAt?$AA?3?$AAN?$AAI?$AAC?$AAI?$AAn?$AAi?$AAt?$AAR?$AAe?$AAc?$AAv?$AA?5?$AAi@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FI@ENDLAONI@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAR?$AAe?$AAs?$AAe?$AAt?$AA?3?$AAN?$AAI?$AAC?$AAI?$AAn?$AAi?$AAt?$AAS?$AAe?$AAn?$AAd?$AA?5?$AAi@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FI@LDKJODNI@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAR?$AAe?$AAs?$AAe?$AAt?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAA?$AAd?$AAa?$AAp@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DE@HLDJOJJ@?$AA?9?$AA?9?$AA?9?$AA?$DO?$AA?5?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAR?$AAe?$AAs?$AAe?$AAt?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|Emac_MiniportReset|
	IMPORT	|NICSelfTest|
	IMPORT	|NICInitializeAdapter|
	IMPORT	|EMACModStateChange|
	IMPORT	|NICInitRecv|
	IMPORT	|NICInitSend|

  00028			 AREA	 |.pdata|, PDATA
|$T50788| DCD	|$LN22@Emac_Minip@4|
	DCD	0x4000a404

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EM@KBLJKKFJ@?$AA?$DM?$AA?9?$AA?9?$AA?9?$AA?5?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAR?$AAe?$AAs?$AAe?$AAt?$AA?5?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?5?$AA?$DN@| DCB "<"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, " ", 0x0, "E", 0x0, "m"
	DCB	0x0, "a", 0x0, "c", 0x0, "_", 0x0, "M", 0x0, "i", 0x0, "n"
	DCB	0x0, "i", 0x0, "p", 0x0, "o", 0x0, "r", 0x0, "t", 0x0, "R"
	DCB	0x0, "e", 0x0, "s", 0x0, "e", 0x0, "t", 0x0, " ", 0x0, "S"
	DCB	0x0, "t", 0x0, "a", 0x0, "t", 0x0, "u", 0x0, "s", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "%", 0x0, "X", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GK@HEDBLALI@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAR?$AAe?$AAs?$AAe?$AAt?$AA?3?$AAN?$AAI?$AAC?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe@| DCB "E"
	DCB	0x0, "m", 0x0, "a", 0x0, "c", 0x0, "_", 0x0, "M", 0x0, "i"
	DCB	0x0, "n", 0x0, "i", 0x0, "p", 0x0, "o", 0x0, "r", 0x0, "t"
	DCB	0x0, "R", 0x0, "e", 0x0, "s", 0x0, "e", 0x0, "t", 0x0, ":"
	DCB	0x0, "N", 0x0, "I", 0x0, "C", 0x0, "I", 0x0, "n", 0x0, "i"
	DCB	0x0, "t", 0x0, "i", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "z"
	DCB	0x0, "e", 0x0, "A", 0x0, "d", 0x0, "a", 0x0, "p", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, " ", 0x0, "i", 0x0, "s", 0x0, " "
	DCB	0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, ".", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FI@LDCCALIL@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAR?$AAe?$AAs?$AAe?$AAt?$AA?3?$AAN?$AAI?$AAC?$AAI?$AAn?$AAi?$AAt?$AAR?$AAe?$AAc?$AAv?$AA?5?$AAi@| DCB "E"
	DCB	0x0, "m", 0x0, "a", 0x0, "c", 0x0, "_", 0x0, "M", 0x0, "i"
	DCB	0x0, "n", 0x0, "i", 0x0, "p", 0x0, "o", 0x0, "r", 0x0, "t"
	DCB	0x0, "R", 0x0, "e", 0x0, "s", 0x0, "e", 0x0, "t", 0x0, ":"
	DCB	0x0, "N", 0x0, "I", 0x0, "C", 0x0, "I", 0x0, "n", 0x0, "i"
	DCB	0x0, "t", 0x0, "R", 0x0, "e", 0x0, "c", 0x0, "v", 0x0, " "
	DCB	0x0, "i", 0x0, "s", 0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, "d", 0x0, ".", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FI@ENDLAONI@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAR?$AAe?$AAs?$AAe?$AAt?$AA?3?$AAN?$AAI?$AAC?$AAI?$AAn?$AAi?$AAt?$AAS?$AAe?$AAn?$AAd?$AA?5?$AAi@| DCB "E"
	DCB	0x0, "m", 0x0, "a", 0x0, "c", 0x0, "_", 0x0, "M", 0x0, "i"
	DCB	0x0, "n", 0x0, "i", 0x0, "p", 0x0, "o", 0x0, "r", 0x0, "t"
	DCB	0x0, "R", 0x0, "e", 0x0, "s", 0x0, "e", 0x0, "t", 0x0, ":"
	DCB	0x0, "N", 0x0, "I", 0x0, "C", 0x0, "I", 0x0, "n", 0x0, "i"
	DCB	0x0, "t", 0x0, "S", 0x0, "e", 0x0, "n", 0x0, "d", 0x0, " "
	DCB	0x0, "i", 0x0, "s", 0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, "d", 0x0, ".", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FI@LDKJODNI@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAR?$AAe?$AAs?$AAe?$AAt?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAA?$AAd?$AAa?$AAp@| DCB "E"
	DCB	0x0, "m", 0x0, "a", 0x0, "c", 0x0, "_", 0x0, "M", 0x0, "i"
	DCB	0x0, "n", 0x0, "i", 0x0, "p", 0x0, "o", 0x0, "r", 0x0, "t"
	DCB	0x0, "R", 0x0, "e", 0x0, "s", 0x0, "e", 0x0, "t", 0x0, ":"
	DCB	0x0, " ", 0x0, "I", 0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l"
	DCB	0x0, "i", 0x0, "d", 0x0, " ", 0x0, "A", 0x0, "d", 0x0, "a"
	DCB	0x0, "p", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, "p"
	DCB	0x0, "o", 0x0, "i", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DE@HLDJOJJ@?$AA?9?$AA?9?$AA?9?$AA?$DO?$AA?5?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAR?$AAe?$AAs?$AAe?$AAt?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "-", 0x0, "-", 0x0, ">", 0x0, " ", 0x0, "E", 0x0, "m"
	DCB	0x0, "a", 0x0, "c", 0x0, "_", 0x0, "M", 0x0, "i", 0x0, "n"
	DCB	0x0, "i", 0x0, "p", 0x0, "o", 0x0, "r", 0x0, "t", 0x0, "R"
	DCB	0x0, "e", 0x0, "s", 0x0, "e", 0x0, "t", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  01558			 AREA	 |.text|, CODE, ARM

  01558		 |Emac_MiniportReset| PROC

; 862  : {

  01558		 |$LN22@Emac_Minip@4|
  01558	e1a0c00d	 mov         r12, sp
  0155c	e92d0003	 stmdb       sp!, {r0, r1}
  01560	e92d5000	 stmdb       sp!, {r12, lr}
  01564	e24dd028	 sub         sp, sp, #0x28
  01568		 |$M50785|

; 863  : 	NDIS_STATUS     Status = NDIS_STATUS_SUCCESS;

  01568	e3a03000	 mov         r3, #0
  0156c	e58d3000	 str         r3, [sp]

; 864  :     PEMAC_ADAPTER   pAdapter = (PEMAC_ADAPTER) MiniportAdapterContext;

  01570	e59d3034	 ldr         r3, [sp, #0x34]
  01574	e58d3004	 str         r3, [sp, #4]

; 865  :     
; 866  :     DEBUGMSG(DBG_CRITICAL || DBG_FUNC, (L"---> Emac_MiniportReset\r\n")); 

  01578	e59f3250	 ldr         r3, [pc, #0x250]
  0157c	e5933440	 ldr         r3, [r3, #0x440]
  01580	e3130002	 tst         r3, #2
  01584	1a000006	 bne         |$LN14@Emac_Minip@4|
  01588	e59f3240	 ldr         r3, [pc, #0x240]
  0158c	e5933440	 ldr         r3, [r3, #0x440]
  01590	e3130080	 tst         r3, #0x80
  01594	1a000002	 bne         |$LN14@Emac_Minip@4|
  01598	e3a03000	 mov         r3, #0
  0159c	e58d300c	 str         r3, [sp, #0xC]
  015a0	ea000003	 b           |$LN15@Emac_Minip@4|
  015a4		 |$LN14@Emac_Minip@4|
  015a4	e59f0238	 ldr         r0, [pc, #0x238]
  015a8	eb000000	 bl          NKDbgPrintfW
  015ac	e3a03001	 mov         r3, #1
  015b0	e58d300c	 str         r3, [sp, #0xC]
  015b4		 |$LN15@Emac_Minip@4|

; 867  :   
; 868  :     /*
; 869  :      * Perform validity checks on the MiniportAdapterContext -> adapter
; 870  :      * pointer.
; 871  :      */
; 872  : 
; 873  :     do
; 874  :     {
; 875  :         if(pAdapter == (PEMAC_ADAPTER) NULL)

  015b4	e59d3004	 ldr         r3, [sp, #4]
  015b8	e3530000	 cmp         r3, #0
  015bc	1a00000d	 bne         |$LN8@Emac_Minip@4|

; 876  :         {
; 877  :             DEBUGMSG(DBG_ERR, (L"Emac_MiniportReset: Invalid Adapter pointer"));

  015c0	e59f3208	 ldr         r3, [pc, #0x208]
  015c4	e5933440	 ldr         r3, [r3, #0x440]
  015c8	e3130902	 tst         r3, #2, 18
  015cc	0a000004	 beq         |$LN16@Emac_Minip@4|
  015d0	e59f0208	 ldr         r0, [pc, #0x208]
  015d4	eb000000	 bl          NKDbgPrintfW
  015d8	e3a03001	 mov         r3, #1
  015dc	e58d3010	 str         r3, [sp, #0x10]
  015e0	ea000001	 b           |$LN17@Emac_Minip@4|
  015e4		 |$LN16@Emac_Minip@4|
  015e4	e3a03000	 mov         r3, #0
  015e8	e58d3010	 str         r3, [sp, #0x10]
  015ec		 |$LN17@Emac_Minip@4|

; 878  :             return NDIS_STATUS_FAILURE;

  015ec	e3a03107	 mov         r3, #7, 2
  015f0	e58d3008	 str         r3, [sp, #8]
  015f4	ea000070	 b           |$LN12@Emac_Minip@4|
  015f8		 |$LN8@Emac_Minip@4|

; 879  :         }
; 880  :                     
; 881  :         /* Test is successful , make a status transition */     
; 882  :         pAdapter->m_HwStatus = NdisHardwareStatusReset;

  015f8	e59d3004	 ldr         r3, [sp, #4]
  015fc	e2832e1a	 add         r2, r3, #0x1A, 28
  01600	e3a03002	 mov         r3, #2
  01604	e5823000	 str         r3, [r2]

; 883  :         
; 884  :         *AddressingReset = TRUE;

  01608	e59d2030	 ldr         r2, [sp, #0x30]
  0160c	e3a03001	 mov         r3, #1
  01610	e5c23000	 strb        r3, [r2]

; 885  :       
; 886  :         /* Tear down receive and transmit channels so that Rx/Tx are completelly
; 887  :          * stopped immediately
; 888  :          */
; 889  :         pAdapter->m_pEmacRegsBase->RXTEARDOWN = 0x0;

  01614	e59d3004	 ldr         r3, [sp, #4]
  01618	e2833004	 add         r3, r3, #4
  0161c	e5933000	 ldr         r3, [r3]
  01620	e2832018	 add         r2, r3, #0x18
  01624	e3a03000	 mov         r3, #0
  01628	e5823000	 str         r3, [r2]

; 890  :         pAdapter->m_pEmacRegsBase->TXTEARDOWN = 0x0;

  0162c	e59d3004	 ldr         r3, [sp, #4]
  01630	e2833004	 add         r3, r3, #4
  01634	e5933000	 ldr         r3, [r3]
  01638	e2832008	 add         r2, r3, #8
  0163c	e3a03000	 mov         r3, #0
  01640	e5823000	 str         r3, [r2]
  01644		 |$LN7@Emac_Minip@4|

; 891  :          
; 892  :         /* wait for teardowm completion */
; 893  :         while(0 != (pAdapter->m_Events & EMAC_RX_TEARDOWN_EVENT) &&
; 894  :               0 != (pAdapter->m_Events & EMAC_TX_TEARDOWN_EVENT))

  01644	e59d3004	 ldr         r3, [sp, #4]
  01648	e2833fe7	 add         r3, r3, #0xE7, 30
  0164c	e5933000	 ldr         r3, [r3]
  01650	e3130002	 tst         r3, #2
  01654	0a000005	 beq         |$LN6@Emac_Minip@4|
  01658	e59d3004	 ldr         r3, [sp, #4]
  0165c	e2833fe7	 add         r3, r3, #0xE7, 30
  01660	e5933000	 ldr         r3, [r3]
  01664	e3130001	 tst         r3, #1
  01668	0a000000	 beq         |$LN6@Emac_Minip@4|

; 895  :         {
; 896  : 
; 897  :         }

  0166c	eafffff4	 b           |$LN7@Emac_Minip@4|
  01670		 |$LN6@Emac_Minip@4|

; 898  : 
; 899  :         /*
; 900  :          * Disable the interrupts in the card, so that the interrupt routine would
; 901  :          * not be called.
; 902  :          */
; 903  :         Emac_MiniportDisableInterrupt(pAdapter);

  01670	e59d0004	 ldr         r0, [sp, #4]
  01674	eb000000	 bl          Emac_MiniportDisableInterrupt

; 904  : 
; 905  :         /* Free allocated memory */
; 906  :         EmacFreeAdapter(pAdapter);

  01678	e59d0004	 ldr         r0, [sp, #4]
  0167c	eb000000	 bl          EmacFreeAdapter

; 907  : 
; 908  :         /* Init send data structures */
; 909  :         Status = NICInitSend(pAdapter);

  01680	e59d0004	 ldr         r0, [sp, #4]
  01684	eb000000	 bl          NICInitSend
  01688	e58d0014	 str         r0, [sp, #0x14]
  0168c	e59d3014	 ldr         r3, [sp, #0x14]
  01690	e58d3000	 str         r3, [sp]

; 910  :         if (Status != NDIS_STATUS_SUCCESS)

  01694	e59d3000	 ldr         r3, [sp]
  01698	e3530000	 cmp         r3, #0
  0169c	0a000002	 beq         |$LN5@Emac_Minip@4|

; 911  :         {
; 912  :             RETAILMSG(TRUE, (L"Emac_MiniportReset:NICInitSend is failed.\r\n"));

  016a0	e59f0134	 ldr         r0, [pc, #0x134]
  016a4	eb000000	 bl          NKDbgPrintfW

; 913  :             break;

  016a8	ea000031	 b           |$LN9@Emac_Minip@4|
  016ac		 |$LN5@Emac_Minip@4|

; 914  :         }   
; 915  : 
; 916  :         /* Init receive data structures */
; 917  :         Status = NICInitRecv(pAdapter);

  016ac	e59d0004	 ldr         r0, [sp, #4]
  016b0	eb000000	 bl          NICInitRecv
  016b4	e58d0018	 str         r0, [sp, #0x18]
  016b8	e59d3018	 ldr         r3, [sp, #0x18]
  016bc	e58d3000	 str         r3, [sp]

; 918  :         if (Status != NDIS_STATUS_SUCCESS)

  016c0	e59d3000	 ldr         r3, [sp]
  016c4	e3530000	 cmp         r3, #0
  016c8	0a000002	 beq         |$LN4@Emac_Minip@4|

; 919  :         {
; 920  :             RETAILMSG(TRUE, (L"Emac_MiniportReset:NICInitRecv is failed.\r\n"));

  016cc	e59f0104	 ldr         r0, [pc, #0x104]
  016d0	eb000000	 bl          NKDbgPrintfW

; 921  :             break;

  016d4	ea000026	 b           |$LN9@Emac_Minip@4|
  016d8		 |$LN4@Emac_Minip@4|

; 922  :         }   
; 923  : 
; 924  : 		/* Init the hardware and set up everything */
; 925  :         pAdapter->m_HwStatus = NdisHardwareStatusInitializing;

  016d8	e59d3004	 ldr         r3, [sp, #4]
  016dc	e2832e1a	 add         r2, r3, #0x1A, 28
  016e0	e3a03001	 mov         r3, #1
  016e4	e5823000	 str         r3, [r2]

; 926  :         
; 927  :         /* Power on the EMAC subsystem */
; 928  :         EMACModStateChange(pAdapter->m_device,SYNCRST);

  016e8	e3a01000	 mov         r1, #0
  016ec	e59d3004	 ldr         r3, [sp, #4]
  016f0	e2833094	 add         r3, r3, #0x94
  016f4	e5930000	 ldr         r0, [r3]
  016f8	eb000000	 bl          EMACModStateChange

; 929  : 
; 930  :         Status = NICInitializeAdapter(pAdapter);

  016fc	e59d0004	 ldr         r0, [sp, #4]
  01700	eb000000	 bl          NICInitializeAdapter
  01704	e58d001c	 str         r0, [sp, #0x1C]
  01708	e59d301c	 ldr         r3, [sp, #0x1C]
  0170c	e58d3000	 str         r3, [sp]

; 931  :         if (Status != NDIS_STATUS_SUCCESS) 

  01710	e59d3000	 ldr         r3, [sp]
  01714	e3530000	 cmp         r3, #0
  01718	0a000005	 beq         |$LN3@Emac_Minip@4|

; 932  :         {
; 933  :             RETAILMSG(TRUE, (L"Emac_MiniportReset:NICInitializeAdapter is failed.\r\n"));

  0171c	e59f00b0	 ldr         r0, [pc, #0xB0]
  01720	eb000000	 bl          NKDbgPrintfW

; 934  :             Status = NDIS_STATUS_HARD_ERRORS;

  01724	e3a03112	 mov         r3, #0x12, 2
  01728	e3833801	 orr         r3, r3, #1, 16
  0172c	e58d3000	 str         r3, [sp]

; 935  :             break;

  01730	ea00000f	 b           |$LN9@Emac_Minip@4|
  01734		 |$LN3@Emac_Minip@4|

; 936  :         }
; 937  : 
; 938  :         Status = NICSelfTest(pAdapter);

  01734	e59d0004	 ldr         r0, [sp, #4]
  01738	eb000000	 bl          NICSelfTest
  0173c	e58d0020	 str         r0, [sp, #0x20]
  01740	e59d3020	 ldr         r3, [sp, #0x20]
  01744	e58d3000	 str         r3, [sp]

; 939  :         if (Status == NDIS_STATUS_SUCCESS)

  01748	e59d3000	 ldr         r3, [sp]
  0174c	e3530000	 cmp         r3, #0
  01750	1a000004	 bne         |$LN2@Emac_Minip@4|

; 940  :         {
; 941  :             /* Test is successful , make a status transition */     
; 942  :             pAdapter->m_HwStatus = NdisHardwareStatusReady; 

  01754	e59d3004	 ldr         r3, [sp, #4]
  01758	e2832e1a	 add         r2, r3, #0x1A, 28
  0175c	e3a03000	 mov         r3, #0
  01760	e5823000	 str         r3, [r2]

; 943  :         }  
; 944  :         else

  01764	ea000002	 b           |$LN1@Emac_Minip@4|
  01768		 |$LN2@Emac_Minip@4|

; 945  :         {
; 946  :             Status = NDIS_STATUS_HARD_ERRORS;

  01768	e3a03112	 mov         r3, #0x12, 2
  0176c	e3833801	 orr         r3, r3, #1, 16
  01770	e58d3000	 str         r3, [sp]
  01774		 |$LN1@Emac_Minip@4|
  01774		 |$LN9@Emac_Minip@4|

; 947  :             break;
; 948  :         }
; 949  : 
; 950  :     }while(0);
; 951  : 
; 952  :     DEBUGMSG(DBG_CRITICAL || DBG_FUNC, (L"<--- Emac_MiniportReset Status = %X\r\n", Status));

  01774	e59f3054	 ldr         r3, [pc, #0x54]
  01778	e5933440	 ldr         r3, [r3, #0x440]
  0177c	e3130002	 tst         r3, #2
  01780	1a000006	 bne         |$LN18@Emac_Minip@4|
  01784	e59f3044	 ldr         r3, [pc, #0x44]
  01788	e5933440	 ldr         r3, [r3, #0x440]
  0178c	e3130080	 tst         r3, #0x80
  01790	1a000002	 bne         |$LN18@Emac_Minip@4|
  01794	e3a03000	 mov         r3, #0
  01798	e58d3024	 str         r3, [sp, #0x24]
  0179c	ea000004	 b           |$LN19@Emac_Minip@4|
  017a0		 |$LN18@Emac_Minip@4|
  017a0	e59d1000	 ldr         r1, [sp]
  017a4	e59f0020	 ldr         r0, [pc, #0x20]
  017a8	eb000000	 bl          NKDbgPrintfW
  017ac	e3a03001	 mov         r3, #1
  017b0	e58d3024	 str         r3, [sp, #0x24]
  017b4		 |$LN19@Emac_Minip@4|

; 953  :   
; 954  :     return(Status);

  017b4	e59d3000	 ldr         r3, [sp]
  017b8	e58d3008	 str         r3, [sp, #8]
  017bc		 |$LN12@Emac_Minip@4|

; 955  : }

  017bc	e59d0008	 ldr         r0, [sp, #8]
  017c0	e28dd028	 add         sp, sp, #0x28
  017c4	e89d6000	 ldmia       sp, {sp, lr}
  017c8	e12fff1e	 bx          lr
  017cc		 |$LN23@Emac_Minip@4|
  017cc		 |$LN24@Emac_Minip@4|
  017cc	00000000	 DCD         |??_C@_1EM@KBLJKKFJ@?$AA?$DM?$AA?9?$AA?9?$AA?9?$AA?5?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAR?$AAe?$AAs?$AAe?$AAt?$AA?5?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?5?$AA?$DN@|
  017d0		 |$LN25@Emac_Minip@4|
  017d0	00000000	 DCD         |dpCurSettings|
  017d4		 |$LN26@Emac_Minip@4|
  017d4	00000000	 DCD         |??_C@_1GK@HEDBLALI@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAR?$AAe?$AAs?$AAe?$AAt?$AA?3?$AAN?$AAI?$AAC?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe@|
  017d8		 |$LN27@Emac_Minip@4|
  017d8	00000000	 DCD         |??_C@_1FI@LDCCALIL@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAR?$AAe?$AAs?$AAe?$AAt?$AA?3?$AAN?$AAI?$AAC?$AAI?$AAn?$AAi?$AAt?$AAR?$AAe?$AAc?$AAv?$AA?5?$AAi@|
  017dc		 |$LN28@Emac_Minip@4|
  017dc	00000000	 DCD         |??_C@_1FI@ENDLAONI@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAR?$AAe?$AAs?$AAe?$AAt?$AA?3?$AAN?$AAI?$AAC?$AAI?$AAn?$AAi?$AAt?$AAS?$AAe?$AAn?$AAd?$AA?5?$AAi@|
  017e0		 |$LN29@Emac_Minip@4|
  017e0	00000000	 DCD         |??_C@_1FI@LDKJODNI@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAR?$AAe?$AAs?$AAe?$AAt?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAA?$AAd?$AAa?$AAp@|
  017e4		 |$LN30@Emac_Minip@4|
  017e4	00000000	 DCD         |??_C@_1DE@HLDJOJJ@?$AA?9?$AA?9?$AA?9?$AA?$DO?$AA?5?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAR?$AAe?$AAs?$AAe?$AAt?$AA?$AN?$AA?6?$AA?$AA@|
  017e8		 |$M50786|

			 ENDP  ; |Emac_MiniportReset|

	EXPORT	|??_C@_1EC@MCIDCGOP@?$AA?9?$AA?9?$AA?9?$AA?$DO?$AA?5?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAC?$AAh?$AAe?$AAc?$AAk?$AAF?$AAo?$AAr?$AAH?$AAa?$AAn?$AAg?$AA?$AN?$AA?6@| [ DATA ] ; `string'
	EXPORT	|Emac_MiniportCheckForHang|

  00030			 AREA	 |.pdata|, PDATA
|$T50804| DCD	|$LN7@Emac_Minip@5|
	DCD	0x40001d04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EC@MCIDCGOP@?$AA?9?$AA?9?$AA?9?$AA?$DO?$AA?5?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAC?$AAh?$AAe?$AAc?$AAk?$AAF?$AAo?$AAr?$AAH?$AAa?$AAn?$AAg?$AA?$AN?$AA?6@| DCB "-"
	DCB	0x0, "-", 0x0, "-", 0x0, ">", 0x0, " ", 0x0, "E", 0x0, "m"
	DCB	0x0, "a", 0x0, "c", 0x0, "_", 0x0, "M", 0x0, "i", 0x0, "n"
	DCB	0x0, "i", 0x0, "p", 0x0, "o", 0x0, "r", 0x0, "t", 0x0, "C"
	DCB	0x0, "h", 0x0, "e", 0x0, "c", 0x0, "k", 0x0, "F", 0x0, "o"
	DCB	0x0, "r", 0x0, "H", 0x0, "a", 0x0, "n", 0x0, "g", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  017e8			 AREA	 |.text|, CODE, ARM

  017e8		 |Emac_MiniportCheckForHang| PROC

; 971  : {

  017e8		 |$LN7@Emac_Minip@5|
  017e8	e1a0c00d	 mov         r12, sp
  017ec	e92d0001	 stmdb       sp!, {r0}
  017f0	e92d5000	 stmdb       sp!, {r12, lr}
  017f4	e24dd00c	 sub         sp, sp, #0xC
  017f8		 |$M50801|

; 972  :     PEMAC_ADAPTER     pAdapter = (PEMAC_ADAPTER) MiniportAdapterContext;

  017f8	e59d3014	 ldr         r3, [sp, #0x14]
  017fc	e58d3000	 str         r3, [sp]

; 973  :     
; 974  :     DEBUGMSG(DBG_FUNC && DBG_MSG, (L"---> Emac_MiniportCheckForHang\r\n"));

  01800	e59f3050	 ldr         r3, [pc, #0x50]
  01804	e5933440	 ldr         r3, [r3, #0x440]
  01808	e3130080	 tst         r3, #0x80
  0180c	0a000008	 beq         |$LN3@Emac_Minip@5|
  01810	e59f3040	 ldr         r3, [pc, #0x40]
  01814	e5933440	 ldr         r3, [r3, #0x440]
  01818	e3130008	 tst         r3, #8
  0181c	0a000004	 beq         |$LN3@Emac_Minip@5|
  01820	e59f002c	 ldr         r0, [pc, #0x2C]
  01824	eb000000	 bl          NKDbgPrintfW
  01828	e3a03001	 mov         r3, #1
  0182c	e58d3008	 str         r3, [sp, #8]
  01830	ea000001	 b           |$LN4@Emac_Minip@5|
  01834		 |$LN3@Emac_Minip@5|
  01834	e3a03000	 mov         r3, #0
  01838	e58d3008	 str         r3, [sp, #8]
  0183c		 |$LN4@Emac_Minip@5|

; 975  :     
; 976  :     /* We are indicating link change interrupt asynchonioulsly 
; 977  :      * No need to take care of link down state. Also host error events
; 978  :      * are interrupts here and reset will be done there also.
; 979  :      */
; 980  :      
; 981  :     /* Need to see any other way we can monitor hungups */
; 982  :      
; 983  :     return (FALSE);  

  0183c	e3a03000	 mov         r3, #0
  01840	e5cd3004	 strb        r3, [sp, #4]

; 984  : }     

  01844	e5dd0004	 ldrb        r0, [sp, #4]
  01848	e28dd00c	 add         sp, sp, #0xC
  0184c	e89d6000	 ldmia       sp, {sp, lr}
  01850	e12fff1e	 bx          lr
  01854		 |$LN8@Emac_Minip@5|
  01854		 |$LN9@Emac_Minip@5|
  01854	00000000	 DCD         |??_C@_1EC@MCIDCGOP@?$AA?9?$AA?9?$AA?9?$AA?$DO?$AA?5?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAC?$AAh?$AAe?$AAc?$AAk?$AAF?$AAo?$AAr?$AAH?$AAa?$AAn?$AAg?$AA?$AN?$AA?6@|
  01858		 |$LN10@Emac_Minip@5|
  01858	00000000	 DCD         |dpCurSettings|
  0185c		 |$M50802|

			 ENDP  ; |Emac_MiniportCheckForHang|

	END
