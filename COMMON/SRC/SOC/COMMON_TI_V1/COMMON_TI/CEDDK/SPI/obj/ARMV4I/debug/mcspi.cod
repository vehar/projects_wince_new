; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\CEDDK\SPI\mcspi.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|DEVICE_IFC_SPI_GUID| [ DATA ]

  00000			 AREA	 |.rdata|, DATA, READONLY
|DEVICE_IFC_SPI_GUID| DCD 0x2e559225
	DCW	0xc95e
	DCW	0x4300
	DCB	0x86
	DCB	0xe9
	DCB	0x6a
	DCB	0x5c
	DCB	0xbc
	DCB	0x7
	DCB	0x32
	DCB	0x8f
	EXPORT	|SPIOpen|
	IMPORT	|DeviceIoControl|
	IMPORT	|CloseHandle|
	IMPORT	|LocalAlloc|
	IMPORT	|CreateFileW|

  00000			 AREA	 |.pdata|, PDATA
|$T35946| DCD	|$LN10@SPIOpen|
	DCD	0x40004604
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\ceddk\spi\mcspi.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SPIOpen| PROC

; 25   : {

  00000		 |$LN10@SPIOpen|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd044	 sub         sp, sp, #0x44
  00010		 |$M35943|

; 26   :     HANDLE hDevice;
; 27   :     DEVICE_CONTEXT_SPI *pContext = NULL;

  00010	e3a03000	 mov         r3, #0
  00014	e58d3014	 str         r3, [sp, #0x14]

; 28   :    
; 29   :     hDevice = CreateFile(pSpiName, GENERIC_READ | GENERIC_WRITE,    
; 30   :                          FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, 0, NULL);    

  00018	e3a03000	 mov         r3, #0
  0001c	e58d3008	 str         r3, [sp, #8]
  00020	e3a03000	 mov         r3, #0
  00024	e58d3004	 str         r3, [sp, #4]
  00028	e3a03003	 mov         r3, #3
  0002c	e58d3000	 str         r3, [sp]
  00030	e3a03000	 mov         r3, #0
  00034	e3a02003	 mov         r2, #3
  00038	e3a01103	 mov         r1, #3, 2
  0003c	e59d004c	 ldr         r0, [sp, #0x4C]
  00040	eb000000	 bl          CreateFileW
  00044	e58d0038	 str         r0, [sp, #0x38]
  00048	e59d3038	 ldr         r3, [sp, #0x38]
  0004c	e58d3010	 str         r3, [sp, #0x10]

; 31   :     if (hDevice == INVALID_HANDLE_VALUE) goto clean;

  00050	e59d3010	 ldr         r3, [sp, #0x10]
  00054	e3730001	 cmn         r3, #1
  00058	1a000001	 bne         |$LN5@SPIOpen|
  0005c	ea000026	 b           |$LN4@SPIOpen|
  00060	ea000025	 b           |$clean$35813|
  00064		 |$LN5@SPIOpen|

; 32   : 
; 33   :     // Allocate memory for our handler...
; 34   :     if ((pContext = (DEVICE_CONTEXT_SPI *)LocalAlloc(
; 35   :         LPTR, sizeof(DEVICE_CONTEXT_SPI)
; 36   :     )) == NULL) {

  00064	e3a01034	 mov         r1, #0x34
  00068	e3a00040	 mov         r0, #0x40
  0006c	eb000000	 bl          LocalAlloc
  00070	e58d003c	 str         r0, [sp, #0x3C]
  00074	e59d303c	 ldr         r3, [sp, #0x3C]
  00078	e58d3014	 str         r3, [sp, #0x14]
  0007c	e59d3014	 ldr         r3, [sp, #0x14]
  00080	e3530000	 cmp         r3, #0
  00084	1a000003	 bne         |$LN3@SPIOpen|

; 37   :         CloseHandle(hDevice);

  00088	e59d0010	 ldr         r0, [sp, #0x10]
  0008c	eb000000	 bl          CloseHandle
  00090	ea000019	 b           |$LN2@SPIOpen|

; 38   :         goto clean;

  00094	ea000018	 b           |$clean$35813|
  00098		 |$LN3@SPIOpen|

; 39   :     }
; 40   : 
; 41   :     // Get function pointers.  If not possible (b/c of cross process calls), use IOCTLs instead
; 42   :     if (!DeviceIoControl(
; 43   :         hDevice, IOCTL_DDK_GET_DRIVER_IFC, (VOID*)&DEVICE_IFC_SPI_GUID,
; 44   :         sizeof(DEVICE_IFC_SPI_GUID), &pContext->ifc, sizeof(DEVICE_IFC_SPI),
; 45   :         NULL, NULL
; 46   :     )) {

  00098	e3a03000	 mov         r3, #0
  0009c	e58d300c	 str         r3, [sp, #0xC]
  000a0	e3a03000	 mov         r3, #0
  000a4	e58d3008	 str         r3, [sp, #8]
  000a8	e3a03030	 mov         r3, #0x30
  000ac	e58d3004	 str         r3, [sp, #4]
  000b0	e59d3014	 ldr         r3, [sp, #0x14]
  000b4	e58d3000	 str         r3, [sp]
  000b8	e3a03010	 mov         r3, #0x10
  000bc	e59f2050	 ldr         r2, [pc, #0x50]
  000c0	e3a01822	 mov         r1, #0x22, 16
  000c4	e3811b01	 orr         r1, r1, #1, 22
  000c8	e59d0010	 ldr         r0, [sp, #0x10]
  000cc	eb000000	 bl          DeviceIoControl
  000d0	e58d0040	 str         r0, [sp, #0x40]
  000d4	e59d3040	 ldr         r3, [sp, #0x40]
  000d8	e3530000	 cmp         r3, #0
  000dc	1a000002	 bne         |$LN1@SPIOpen|

; 47   :         //  Need to use IOCTLs instead of direct function ptrs
; 48   :         pContext->ifc.context = 0;

  000e0	e59d2014	 ldr         r2, [sp, #0x14]
  000e4	e3a03000	 mov         r3, #0
  000e8	e5823000	 str         r3, [r2]
  000ec		 |$LN1@SPIOpen|

; 49   :     }
; 50   : 
; 51   :     // Save device handle
; 52   :     pContext->hDevice = hDevice;

  000ec	e59d3014	 ldr         r3, [sp, #0x14]
  000f0	e2832030	 add         r2, r3, #0x30
  000f4	e59d3010	 ldr         r3, [sp, #0x10]
  000f8	e5823000	 str         r3, [r2]
  000fc		 |$LN2@SPIOpen|
  000fc		 |$LN4@SPIOpen|
  000fc		 |$clean$35813|

; 53   : 
; 54   : clean:
; 55   :     return pContext;

  000fc	e59d3014	 ldr         r3, [sp, #0x14]
  00100	e58d3034	 str         r3, [sp, #0x34]

; 56   : }

  00104	e59d0034	 ldr         r0, [sp, #0x34]
  00108	e28dd044	 add         sp, sp, #0x44
  0010c	e89d6000	 ldmia       sp, {sp, lr}
  00110	e12fff1e	 bx          lr
  00114		 |$LN11@SPIOpen|
  00114		 |$LN12@SPIOpen|
  00114	00000000	 DCD         |DEVICE_IFC_SPI_GUID|
  00118		 |$M35944|

			 ENDP  ; |SPIOpen|

	EXPORT	|SPIClose|
	IMPORT	|LocalFree|

  00008			 AREA	 |.pdata|, PDATA
|$T35953| DCD	|$LN5@SPIClose|
	DCD	0x40000f04
; Function compile flags: /Odtp

  00118			 AREA	 |.text|, CODE, ARM

  00118		 |SPIClose| PROC

; 59   : {

  00118		 |$LN5@SPIClose|
  00118	e1a0c00d	 mov         r12, sp
  0011c	e92d0001	 stmdb       sp!, {r0}
  00120	e92d5000	 stmdb       sp!, {r12, lr}
  00124	e24dd004	 sub         sp, sp, #4
  00128		 |$M35950|

; 60   :     DEVICE_CONTEXT_SPI *pContext = (DEVICE_CONTEXT_SPI *)hContext;

  00128	e59d300c	 ldr         r3, [sp, #0xC]
  0012c	e58d3000	 str         r3, [sp]

; 61   :     CloseHandle(pContext->hDevice);

  00130	e59d3000	 ldr         r3, [sp]
  00134	e2833030	 add         r3, r3, #0x30
  00138	e5930000	 ldr         r0, [r3]
  0013c	eb000000	 bl          CloseHandle

; 62   :     LocalFree(pContext);

  00140	e59d0000	 ldr         r0, [sp]
  00144	eb000000	 bl          LocalFree

; 63   : }

  00148	e28dd004	 add         sp, sp, #4
  0014c	e89d6000	 ldmia       sp, {sp, lr}
  00150	e12fff1e	 bx          lr
  00154		 |$M35951|

			 ENDP  ; |SPIClose|

	EXPORT	|SPILockController|

  00010			 AREA	 |.pdata|, PDATA
|$T35963| DCD	|$LN7@SPILockCon|
	DCD	0x40002e04
; Function compile flags: /Odtp

  00154			 AREA	 |.text|, CODE, ARM

  00154		 |SPILockController| PROC

; 66   : {

  00154		 |$LN7@SPILockCon|
  00154	e1a0c00d	 mov         r12, sp
  00158	e92d000f	 stmdb       sp!, {r0 - r3}
  0015c	e92d5000	 stmdb       sp!, {r12, lr}
  00160	e24dd030	 sub         sp, sp, #0x30
  00164		 |$M35960|

; 67   :     DEVICE_CONTEXT_SPI *pContext = (DEVICE_CONTEXT_SPI *)hContext;

  00164	e59d3038	 ldr         r3, [sp, #0x38]
  00168	e58d3010	 str         r3, [sp, #0x10]

; 68   :     if( pContext->ifc.context )

  0016c	e59d3010	 ldr         r3, [sp, #0x10]
  00170	e5933000	 ldr         r3, [r3]
  00174	e3530000	 cmp         r3, #0
  00178	0a00000c	 beq         |$LN2@SPILockCon|

; 69   :     {
; 70   :         return pContext->ifc.pfnLockController(pContext->ifc.context, dwTimeout);

  0017c	e59d103c	 ldr         r1, [sp, #0x3C]
  00180	e59d3010	 ldr         r3, [sp, #0x10]
  00184	e5930000	 ldr         r0, [r3]
  00188	e59d3010	 ldr         r3, [sp, #0x10]
  0018c	e2833014	 add         r3, r3, #0x14
  00190	e5933000	 ldr         r3, [r3]
  00194	e1a0e00f	 mov         lr, pc
  00198	e12fff13	 bx          r3
  0019c	e58d0028	 str         r0, [sp, #0x28]
  001a0	e59d3028	 ldr         r3, [sp, #0x28]
  001a4	e58d3014	 str         r3, [sp, #0x14]
  001a8	ea000012	 b           |$LN3@SPILockCon|

; 71   :     }
; 72   :     else

  001ac	ea000011	 b           |$LN1@SPILockCon|
  001b0		 |$LN2@SPILockCon|

; 73   :     {
; 74   :         return DeviceIoControl(pContext->hDevice,
; 75   :                         IOCTL_SPI_LOCK_CTRL,
; 76   :                         &dwTimeout,
; 77   :                         sizeof(dwTimeout),
; 78   :                         NULL,
; 79   :                         0,
; 80   :                         NULL,
; 81   :                         NULL );

  001b0	e3a03000	 mov         r3, #0
  001b4	e58d300c	 str         r3, [sp, #0xC]
  001b8	e3a03000	 mov         r3, #0
  001bc	e58d3008	 str         r3, [sp, #8]
  001c0	e3a03000	 mov         r3, #0
  001c4	e58d3004	 str         r3, [sp, #4]
  001c8	e3a03000	 mov         r3, #0
  001cc	e58d3000	 str         r3, [sp]
  001d0	e3a03004	 mov         r3, #4
  001d4	e28d203c	 add         r2, sp, #0x3C
  001d8	e59f1028	 ldr         r1, [pc, #0x28]
  001dc	e59d0010	 ldr         r0, [sp, #0x10]
  001e0	e2800030	 add         r0, r0, #0x30
  001e4	e5900000	 ldr         r0, [r0]
  001e8	eb000000	 bl          DeviceIoControl
  001ec	e58d002c	 str         r0, [sp, #0x2C]
  001f0	e59d302c	 ldr         r3, [sp, #0x2C]
  001f4	e58d3014	 str         r3, [sp, #0x14]
  001f8		 |$LN1@SPILockCon|
  001f8		 |$LN3@SPILockCon|

; 82   :     }
; 83   : }

  001f8	e59d0014	 ldr         r0, [sp, #0x14]
  001fc	e28dd030	 add         sp, sp, #0x30
  00200	e89d6000	 ldmia       sp, {sp, lr}
  00204	e12fff1e	 bx          lr
  00208		 |$LN8@SPILockCon|
  00208		 |$LN9@SPILockCon|
  00208	00220814	 DCD         0x220814
  0020c		 |$M35961|

			 ENDP  ; |SPILockController|

	EXPORT	|SPIUnlockController|

  00018			 AREA	 |.pdata|, PDATA
|$T35975| DCD	|$LN7@SPIUnlockC|
	DCD	0x40002d04
; Function compile flags: /Odtp

  0020c			 AREA	 |.text|, CODE, ARM

  0020c		 |SPIUnlockController| PROC

; 86   : {

  0020c		 |$LN7@SPIUnlockC|
  0020c	e1a0c00d	 mov         r12, sp
  00210	e92d0001	 stmdb       sp!, {r0}
  00214	e92d5000	 stmdb       sp!, {r12, lr}
  00218	e24dd030	 sub         sp, sp, #0x30
  0021c		 |$M35972|

; 87   :     DEVICE_CONTEXT_SPI *pContext = (DEVICE_CONTEXT_SPI *)hContext;

  0021c	e59d3038	 ldr         r3, [sp, #0x38]
  00220	e58d3010	 str         r3, [sp, #0x10]

; 88   :     if( pContext->ifc.context )

  00224	e59d3010	 ldr         r3, [sp, #0x10]
  00228	e5933000	 ldr         r3, [r3]
  0022c	e3530000	 cmp         r3, #0
  00230	0a00000b	 beq         |$LN2@SPIUnlockC|

; 89   :     {
; 90   :         return pContext->ifc.pfnUnlockController(pContext->ifc.context);

  00234	e59d3010	 ldr         r3, [sp, #0x10]
  00238	e5930000	 ldr         r0, [r3]
  0023c	e59d3010	 ldr         r3, [sp, #0x10]
  00240	e2833018	 add         r3, r3, #0x18
  00244	e5933000	 ldr         r3, [r3]
  00248	e1a0e00f	 mov         lr, pc
  0024c	e12fff13	 bx          r3
  00250	e58d0028	 str         r0, [sp, #0x28]
  00254	e59d3028	 ldr         r3, [sp, #0x28]
  00258	e58d3014	 str         r3, [sp, #0x14]
  0025c	ea000012	 b           |$LN3@SPIUnlockC|

; 91   :     }
; 92   :     else

  00260	ea000011	 b           |$LN1@SPIUnlockC|
  00264		 |$LN2@SPIUnlockC|

; 93   :     {
; 94   :         return DeviceIoControl(pContext->hDevice,
; 95   :                         IOCTL_SPI_UNLOCK_CTRL,
; 96   :                         NULL,
; 97   :                         0,
; 98   :                         NULL,
; 99   :                         0,
; 100  :                         NULL,
; 101  :                         NULL );

  00264	e3a03000	 mov         r3, #0
  00268	e58d300c	 str         r3, [sp, #0xC]
  0026c	e3a03000	 mov         r3, #0
  00270	e58d3008	 str         r3, [sp, #8]
  00274	e3a03000	 mov         r3, #0
  00278	e58d3004	 str         r3, [sp, #4]
  0027c	e3a03000	 mov         r3, #0
  00280	e58d3000	 str         r3, [sp]
  00284	e3a03000	 mov         r3, #0
  00288	e3a02000	 mov         r2, #0
  0028c	e59f1028	 ldr         r1, [pc, #0x28]
  00290	e59d0010	 ldr         r0, [sp, #0x10]
  00294	e2800030	 add         r0, r0, #0x30
  00298	e5900000	 ldr         r0, [r0]
  0029c	eb000000	 bl          DeviceIoControl
  002a0	e58d002c	 str         r0, [sp, #0x2C]
  002a4	e59d302c	 ldr         r3, [sp, #0x2C]
  002a8	e58d3014	 str         r3, [sp, #0x14]
  002ac		 |$LN1@SPIUnlockC|
  002ac		 |$LN3@SPIUnlockC|

; 102  :     }
; 103  : }

  002ac	e59d0014	 ldr         r0, [sp, #0x14]
  002b0	e28dd030	 add         sp, sp, #0x30
  002b4	e89d6000	 ldmia       sp, {sp, lr}
  002b8	e12fff1e	 bx          lr
  002bc		 |$LN8@SPIUnlockC|
  002bc		 |$LN9@SPIUnlockC|
  002bc	00220818	 DCD         0x220818
  002c0		 |$M35973|

			 ENDP  ; |SPIUnlockController|

	EXPORT	|SPIEnableChannel|

  00020			 AREA	 |.pdata|, PDATA
|$T35987| DCD	|$LN7@SPIEnableC|
	DCD	0x40002d04
; Function compile flags: /Odtp

  002c0			 AREA	 |.text|, CODE, ARM

  002c0		 |SPIEnableChannel| PROC

; 106  : {

  002c0		 |$LN7@SPIEnableC|
  002c0	e1a0c00d	 mov         r12, sp
  002c4	e92d0001	 stmdb       sp!, {r0}
  002c8	e92d5000	 stmdb       sp!, {r12, lr}
  002cc	e24dd030	 sub         sp, sp, #0x30
  002d0		 |$M35984|

; 107  :     DEVICE_CONTEXT_SPI *pContext = (DEVICE_CONTEXT_SPI *)hContext;

  002d0	e59d3038	 ldr         r3, [sp, #0x38]
  002d4	e58d3010	 str         r3, [sp, #0x10]

; 108  :     if( pContext->ifc.context )

  002d8	e59d3010	 ldr         r3, [sp, #0x10]
  002dc	e5933000	 ldr         r3, [r3]
  002e0	e3530000	 cmp         r3, #0
  002e4	0a00000b	 beq         |$LN2@SPIEnableC|

; 109  :     {
; 110  :         return pContext->ifc.pfnEnableChannel(pContext->ifc.context);

  002e8	e59d3010	 ldr         r3, [sp, #0x10]
  002ec	e5930000	 ldr         r0, [r3]
  002f0	e59d3010	 ldr         r3, [sp, #0x10]
  002f4	e283301c	 add         r3, r3, #0x1C
  002f8	e5933000	 ldr         r3, [r3]
  002fc	e1a0e00f	 mov         lr, pc
  00300	e12fff13	 bx          r3
  00304	e58d0028	 str         r0, [sp, #0x28]
  00308	e59d3028	 ldr         r3, [sp, #0x28]
  0030c	e58d3014	 str         r3, [sp, #0x14]
  00310	ea000012	 b           |$LN3@SPIEnableC|

; 111  :     }
; 112  :     else

  00314	ea000011	 b           |$LN1@SPIEnableC|
  00318		 |$LN2@SPIEnableC|

; 113  :     {
; 114  :         return DeviceIoControl(pContext->hDevice,
; 115  :                         IOCTL_SPI_ENABLE_CHANNEL,
; 116  :                         NULL,
; 117  :                         0,
; 118  :                         NULL,
; 119  :                         0,
; 120  :                         NULL,
; 121  :                         NULL );

  00318	e3a03000	 mov         r3, #0
  0031c	e58d300c	 str         r3, [sp, #0xC]
  00320	e3a03000	 mov         r3, #0
  00324	e58d3008	 str         r3, [sp, #8]
  00328	e3a03000	 mov         r3, #0
  0032c	e58d3004	 str         r3, [sp, #4]
  00330	e3a03000	 mov         r3, #0
  00334	e58d3000	 str         r3, [sp]
  00338	e3a03000	 mov         r3, #0
  0033c	e3a02000	 mov         r2, #0
  00340	e59f1028	 ldr         r1, [pc, #0x28]
  00344	e59d0010	 ldr         r0, [sp, #0x10]
  00348	e2800030	 add         r0, r0, #0x30
  0034c	e5900000	 ldr         r0, [r0]
  00350	eb000000	 bl          DeviceIoControl
  00354	e58d002c	 str         r0, [sp, #0x2C]
  00358	e59d302c	 ldr         r3, [sp, #0x2C]
  0035c	e58d3014	 str         r3, [sp, #0x14]
  00360		 |$LN1@SPIEnableC|
  00360		 |$LN3@SPIEnableC|

; 122  :     }
; 123  : }

  00360	e59d0014	 ldr         r0, [sp, #0x14]
  00364	e28dd030	 add         sp, sp, #0x30
  00368	e89d6000	 ldmia       sp, {sp, lr}
  0036c	e12fff1e	 bx          lr
  00370		 |$LN8@SPIEnableC|
  00370		 |$LN9@SPIEnableC|
  00370	0022081c	 DCD         0x22081c
  00374		 |$M35985|

			 ENDP  ; |SPIEnableChannel|

	EXPORT	|SPIDisableChannel|

  00028			 AREA	 |.pdata|, PDATA
|$T35999| DCD	|$LN7@SPIDisable|
	DCD	0x40002d04
; Function compile flags: /Odtp

  00374			 AREA	 |.text|, CODE, ARM

  00374		 |SPIDisableChannel| PROC

; 126  : {

  00374		 |$LN7@SPIDisable|
  00374	e1a0c00d	 mov         r12, sp
  00378	e92d0001	 stmdb       sp!, {r0}
  0037c	e92d5000	 stmdb       sp!, {r12, lr}
  00380	e24dd030	 sub         sp, sp, #0x30
  00384		 |$M35996|

; 127  :     DEVICE_CONTEXT_SPI *pContext = (DEVICE_CONTEXT_SPI *)hContext;

  00384	e59d3038	 ldr         r3, [sp, #0x38]
  00388	e58d3010	 str         r3, [sp, #0x10]

; 128  :     if( pContext->ifc.context )

  0038c	e59d3010	 ldr         r3, [sp, #0x10]
  00390	e5933000	 ldr         r3, [r3]
  00394	e3530000	 cmp         r3, #0
  00398	0a00000b	 beq         |$LN2@SPIDisable|

; 129  :     {
; 130  :         return pContext->ifc.pfnDisableChannel(pContext->ifc.context);

  0039c	e59d3010	 ldr         r3, [sp, #0x10]
  003a0	e5930000	 ldr         r0, [r3]
  003a4	e59d3010	 ldr         r3, [sp, #0x10]
  003a8	e2833020	 add         r3, r3, #0x20
  003ac	e5933000	 ldr         r3, [r3]
  003b0	e1a0e00f	 mov         lr, pc
  003b4	e12fff13	 bx          r3
  003b8	e58d0028	 str         r0, [sp, #0x28]
  003bc	e59d3028	 ldr         r3, [sp, #0x28]
  003c0	e58d3014	 str         r3, [sp, #0x14]
  003c4	ea000013	 b           |$LN3@SPIDisable|

; 131  :     }
; 132  :     else

  003c8	ea000012	 b           |$LN1@SPIDisable|
  003cc		 |$LN2@SPIDisable|

; 133  :     {
; 134  :         return DeviceIoControl(pContext->hDevice,
; 135  :                         IOCTL_SPI_DISABLE_CHANNEL,
; 136  :                         NULL,
; 137  :                         0,
; 138  :                         NULL,
; 139  :                         0,
; 140  :                         NULL,
; 141  :                         NULL );

  003cc	e3a03000	 mov         r3, #0
  003d0	e58d300c	 str         r3, [sp, #0xC]
  003d4	e3a03000	 mov         r3, #0
  003d8	e58d3008	 str         r3, [sp, #8]
  003dc	e3a03000	 mov         r3, #0
  003e0	e58d3004	 str         r3, [sp, #4]
  003e4	e3a03000	 mov         r3, #0
  003e8	e58d3000	 str         r3, [sp]
  003ec	e3a03000	 mov         r3, #0
  003f0	e3a02000	 mov         r2, #0
  003f4	e3a01822	 mov         r1, #0x22, 16
  003f8	e3811e82	 orr         r1, r1, #0x82, 28
  003fc	e59d0010	 ldr         r0, [sp, #0x10]
  00400	e2800030	 add         r0, r0, #0x30
  00404	e5900000	 ldr         r0, [r0]
  00408	eb000000	 bl          DeviceIoControl
  0040c	e58d002c	 str         r0, [sp, #0x2C]
  00410	e59d302c	 ldr         r3, [sp, #0x2C]
  00414	e58d3014	 str         r3, [sp, #0x14]
  00418		 |$LN1@SPIDisable|
  00418		 |$LN3@SPIDisable|

; 142  :     }
; 143  : }

  00418	e59d0014	 ldr         r0, [sp, #0x14]
  0041c	e28dd030	 add         sp, sp, #0x30
  00420	e89d6000	 ldmia       sp, {sp, lr}
  00424	e12fff1e	 bx          lr
  00428		 |$M35997|

			 ENDP  ; |SPIDisableChannel|

	EXPORT	|SPIConfigure|

  00030			 AREA	 |.pdata|, PDATA
|$T36009| DCD	|$LN7@SPIConfigu|
	DCD	0x40003304
; Function compile flags: /Odtp

  00428			 AREA	 |.text|, CODE, ARM

  00428		 |SPIConfigure| PROC

; 147  : {

  00428		 |$LN7@SPIConfigu|
  00428	e1a0c00d	 mov         r12, sp
  0042c	e92d0007	 stmdb       sp!, {r0 - r2}
  00430	e92d5000	 stmdb       sp!, {r12, lr}
  00434	e24dd038	 sub         sp, sp, #0x38
  00438		 |$M36006|

; 148  :     DEVICE_CONTEXT_SPI *pContext = (DEVICE_CONTEXT_SPI *)hContext;

  00438	e59d3040	 ldr         r3, [sp, #0x40]
  0043c	e58d3010	 str         r3, [sp, #0x10]

; 149  :     if( pContext->ifc.context )

  00440	e59d3010	 ldr         r3, [sp, #0x10]
  00444	e5933000	 ldr         r3, [r3]
  00448	e3530000	 cmp         r3, #0
  0044c	0a00000d	 beq         |$LN2@SPIConfigu|

; 150  :     {
; 151  : 	    return pContext->ifc.pfnConfigure(pContext->ifc.context, address, config);

  00450	e59d2048	 ldr         r2, [sp, #0x48]
  00454	e59d1044	 ldr         r1, [sp, #0x44]
  00458	e59d3010	 ldr         r3, [sp, #0x10]
  0045c	e5930000	 ldr         r0, [r3]
  00460	e59d3010	 ldr         r3, [sp, #0x10]
  00464	e2833004	 add         r3, r3, #4
  00468	e5933000	 ldr         r3, [r3]
  0046c	e1a0e00f	 mov         lr, pc
  00470	e12fff13	 bx          r3
  00474	e58d0030	 str         r0, [sp, #0x30]
  00478	e59d3030	 ldr         r3, [sp, #0x30]
  0047c	e58d301c	 str         r3, [sp, #0x1C]
  00480	ea000017	 b           |$LN3@SPIConfigu|

; 152  : 	}
; 153  :     else

  00484	ea000016	 b           |$LN1@SPIConfigu|
  00488		 |$LN2@SPIConfigu|

; 154  :     {
; 155  :         IOCTL_SPI_CONFIGURE_IN  dwIn;
; 156  : 
; 157  :         dwIn.address = address;

  00488	e59d3044	 ldr         r3, [sp, #0x44]
  0048c	e58d3014	 str         r3, [sp, #0x14]

; 158  :         dwIn.config = config;

  00490	e59d3048	 ldr         r3, [sp, #0x48]
  00494	e58d3018	 str         r3, [sp, #0x18]

; 159  : 
; 160  :         return DeviceIoControl(pContext->hDevice,
; 161  :                         IOCTL_SPI_CONFIGURE,
; 162  :                         &dwIn,
; 163  :                         sizeof(dwIn),
; 164  :                         NULL,
; 165  :                         0,
; 166  :                         NULL,
; 167  :                         NULL );

  00498	e3a03000	 mov         r3, #0
  0049c	e58d300c	 str         r3, [sp, #0xC]
  004a0	e3a03000	 mov         r3, #0
  004a4	e58d3008	 str         r3, [sp, #8]
  004a8	e3a03000	 mov         r3, #0
  004ac	e58d3004	 str         r3, [sp, #4]
  004b0	e3a03000	 mov         r3, #0
  004b4	e58d3000	 str         r3, [sp]
  004b8	e3a03008	 mov         r3, #8
  004bc	e28d2014	 add         r2, sp, #0x14
  004c0	e3a01822	 mov         r1, #0x22, 16
  004c4	e3811b02	 orr         r1, r1, #2, 22
  004c8	e59d0010	 ldr         r0, [sp, #0x10]
  004cc	e2800030	 add         r0, r0, #0x30
  004d0	e5900000	 ldr         r0, [r0]
  004d4	eb000000	 bl          DeviceIoControl
  004d8	e58d0034	 str         r0, [sp, #0x34]
  004dc	e59d3034	 ldr         r3, [sp, #0x34]
  004e0	e58d301c	 str         r3, [sp, #0x1C]
  004e4		 |$LN1@SPIConfigu|
  004e4		 |$LN3@SPIConfigu|

; 168  :     }
; 169  : }

  004e4	e59d001c	 ldr         r0, [sp, #0x1C]
  004e8	e28dd038	 add         sp, sp, #0x38
  004ec	e89d6000	 ldmia       sp, {sp, lr}
  004f0	e12fff1e	 bx          lr
  004f4		 |$M36007|

			 ENDP  ; |SPIConfigure|

	EXPORT	|SPISetSlaveMode|

  00038			 AREA	 |.pdata|, PDATA
|$T36019| DCD	|$LN7@SPISetSlav|
	DCD	0x40002d04
; Function compile flags: /Odtp

  004f4			 AREA	 |.text|, CODE, ARM

  004f4		 |SPISetSlaveMode| PROC

; 172  : {

  004f4		 |$LN7@SPISetSlav|
  004f4	e1a0c00d	 mov         r12, sp
  004f8	e92d0001	 stmdb       sp!, {r0}
  004fc	e92d5000	 stmdb       sp!, {r12, lr}
  00500	e24dd030	 sub         sp, sp, #0x30
  00504		 |$M36016|

; 173  :     DEVICE_CONTEXT_SPI *pContext = (DEVICE_CONTEXT_SPI *)hContext;

  00504	e59d3038	 ldr         r3, [sp, #0x38]
  00508	e58d3010	 str         r3, [sp, #0x10]

; 174  :     if( pContext->ifc.context )

  0050c	e59d3010	 ldr         r3, [sp, #0x10]
  00510	e5933000	 ldr         r3, [r3]
  00514	e3530000	 cmp         r3, #0
  00518	0a00000b	 beq         |$LN2@SPISetSlav|

; 175  :     {
; 176  :         return pContext->ifc.pfnSetSlaveMode(pContext->ifc.context);

  0051c	e59d3010	 ldr         r3, [sp, #0x10]
  00520	e5930000	 ldr         r0, [r3]
  00524	e59d3010	 ldr         r3, [sp, #0x10]
  00528	e283302c	 add         r3, r3, #0x2C
  0052c	e5933000	 ldr         r3, [r3]
  00530	e1a0e00f	 mov         lr, pc
  00534	e12fff13	 bx          r3
  00538	e58d0028	 str         r0, [sp, #0x28]
  0053c	e59d3028	 ldr         r3, [sp, #0x28]
  00540	e58d3014	 str         r3, [sp, #0x14]
  00544	ea000013	 b           |$LN3@SPISetSlav|

; 177  :     }
; 178  :     else

  00548	ea000012	 b           |$LN1@SPISetSlav|
  0054c		 |$LN2@SPISetSlav|

; 179  :     {
; 180  :         return DeviceIoControl(pContext->hDevice,
; 181  :                         IOCTL_SPI_SET_SLAVEMODE,
; 182  :                         NULL,
; 183  :                         0,
; 184  :                         NULL,
; 185  :                         0,
; 186  :                         NULL,
; 187  :                         NULL );

  0054c	e3a03000	 mov         r3, #0
  00550	e58d300c	 str         r3, [sp, #0xC]
  00554	e3a03000	 mov         r3, #0
  00558	e58d3008	 str         r3, [sp, #8]
  0055c	e3a03000	 mov         r3, #0
  00560	e58d3004	 str         r3, [sp, #4]
  00564	e3a03000	 mov         r3, #0
  00568	e58d3000	 str         r3, [sp]
  0056c	e3a03000	 mov         r3, #0
  00570	e3a02000	 mov         r2, #0
  00574	e3a01822	 mov         r1, #0x22, 16
  00578	e3811e81	 orr         r1, r1, #0x81, 28
  0057c	e59d0010	 ldr         r0, [sp, #0x10]
  00580	e2800030	 add         r0, r0, #0x30
  00584	e5900000	 ldr         r0, [r0]
  00588	eb000000	 bl          DeviceIoControl
  0058c	e58d002c	 str         r0, [sp, #0x2C]
  00590	e59d302c	 ldr         r3, [sp, #0x2C]
  00594	e58d3014	 str         r3, [sp, #0x14]
  00598		 |$LN1@SPISetSlav|
  00598		 |$LN3@SPISetSlav|

; 188  :     }
; 189  : }

  00598	e59d0014	 ldr         r0, [sp, #0x14]
  0059c	e28dd030	 add         sp, sp, #0x30
  005a0	e89d6000	 ldmia       sp, {sp, lr}
  005a4	e12fff1e	 bx          lr
  005a8		 |$M36017|

			 ENDP  ; |SPISetSlaveMode|

	EXPORT	|SPIRead|
	IMPORT	|ReadFile|

  00040			 AREA	 |.pdata|, PDATA
|$T36026| DCD	|$LN7@SPIRead|
	DCD	0x40002c04
; Function compile flags: /Odtp

  005a8			 AREA	 |.text|, CODE, ARM

  005a8		 |SPIRead| PROC

; 192  : {

  005a8		 |$LN7@SPIRead|
  005a8	e1a0c00d	 mov         r12, sp
  005ac	e92d0007	 stmdb       sp!, {r0 - r2}
  005b0	e92d5000	 stmdb       sp!, {r12, lr}
  005b4	e24dd020	 sub         sp, sp, #0x20
  005b8		 |$M36023|

; 193  :     DEVICE_CONTEXT_SPI *pContext = (DEVICE_CONTEXT_SPI *)hContext;

  005b8	e59d3028	 ldr         r3, [sp, #0x28]
  005bc	e58d3004	 str         r3, [sp, #4]

; 194  :     if( pContext->ifc.context )

  005c0	e59d3004	 ldr         r3, [sp, #4]
  005c4	e5933000	 ldr         r3, [r3]
  005c8	e3530000	 cmp         r3, #0
  005cc	0a00000d	 beq         |$LN2@SPIRead|

; 195  :     {
; 196  :     	return pContext->ifc.pfnRead(pContext->ifc.context, pBuffer, size);

  005d0	e59d202c	 ldr         r2, [sp, #0x2C]
  005d4	e59d1030	 ldr         r1, [sp, #0x30]
  005d8	e59d3004	 ldr         r3, [sp, #4]
  005dc	e5930000	 ldr         r0, [r3]
  005e0	e59d3004	 ldr         r3, [sp, #4]
  005e4	e2833008	 add         r3, r3, #8
  005e8	e5933000	 ldr         r3, [r3]
  005ec	e1a0e00f	 mov         lr, pc
  005f0	e12fff13	 bx          r3
  005f4	e58d0018	 str         r0, [sp, #0x18]
  005f8	e59d3018	 ldr         r3, [sp, #0x18]
  005fc	e58d3010	 str         r3, [sp, #0x10]
  00600	ea000010	 b           |$LN3@SPIRead|

; 197  : 	}
; 198  :     else

  00604	ea00000f	 b           |$LN1@SPIRead|
  00608		 |$LN2@SPIRead|

; 199  :     {
; 200  :         DWORD   dwCount = 0;

  00608	e3a03000	 mov         r3, #0
  0060c	e58d3008	 str         r3, [sp, #8]

; 201  : 		BOOL ret; 
; 202  : 		ret = ReadFile( pContext->hDevice, pBuffer, size, &dwCount, NULL );

  00610	e3a03000	 mov         r3, #0
  00614	e58d3000	 str         r3, [sp]
  00618	e28d3008	 add         r3, sp, #8
  0061c	e59d202c	 ldr         r2, [sp, #0x2C]
  00620	e59d1030	 ldr         r1, [sp, #0x30]
  00624	e59d0004	 ldr         r0, [sp, #4]
  00628	e2800030	 add         r0, r0, #0x30
  0062c	e5900000	 ldr         r0, [r0]
  00630	eb000000	 bl          ReadFile
  00634	e58d001c	 str         r0, [sp, #0x1C]
  00638	e59d301c	 ldr         r3, [sp, #0x1C]
  0063c	e58d300c	 str         r3, [sp, #0xC]

; 203  :         return dwCount;

  00640	e59d3008	 ldr         r3, [sp, #8]
  00644	e58d3010	 str         r3, [sp, #0x10]
  00648		 |$LN1@SPIRead|
  00648		 |$LN3@SPIRead|

; 204  :     }
; 205  : }

  00648	e59d0010	 ldr         r0, [sp, #0x10]
  0064c	e28dd020	 add         sp, sp, #0x20
  00650	e89d6000	 ldmia       sp, {sp, lr}
  00654	e12fff1e	 bx          lr
  00658		 |$M36024|

			 ENDP  ; |SPIRead|

	EXPORT	|SPIWrite|
	IMPORT	|WriteFile|

  00048			 AREA	 |.pdata|, PDATA
|$T36033| DCD	|$LN7@SPIWrite|
	DCD	0x40002904
; Function compile flags: /Odtp

  00658			 AREA	 |.text|, CODE, ARM

  00658		 |SPIWrite| PROC

; 208  : {

  00658		 |$LN7@SPIWrite|
  00658	e1a0c00d	 mov         r12, sp
  0065c	e92d0007	 stmdb       sp!, {r0 - r2}
  00660	e92d5000	 stmdb       sp!, {r12, lr}
  00664	e24dd018	 sub         sp, sp, #0x18
  00668		 |$M36030|

; 209  :     DEVICE_CONTEXT_SPI *pContext = (DEVICE_CONTEXT_SPI *)hContext;

  00668	e59d3020	 ldr         r3, [sp, #0x20]
  0066c	e58d3004	 str         r3, [sp, #4]

; 210  :     if( pContext->ifc.context )

  00670	e59d3004	 ldr         r3, [sp, #4]
  00674	e5933000	 ldr         r3, [r3]
  00678	e3530000	 cmp         r3, #0
  0067c	0a00000d	 beq         |$LN2@SPIWrite|

; 211  :     {
; 212  : 	    return pContext->ifc.pfnWrite(pContext->ifc.context, pBuffer, size);

  00680	e59d2024	 ldr         r2, [sp, #0x24]
  00684	e59d1028	 ldr         r1, [sp, #0x28]
  00688	e59d3004	 ldr         r3, [sp, #4]
  0068c	e5930000	 ldr         r0, [r3]
  00690	e59d3004	 ldr         r3, [sp, #4]
  00694	e283300c	 add         r3, r3, #0xC
  00698	e5933000	 ldr         r3, [r3]
  0069c	e1a0e00f	 mov         lr, pc
  006a0	e12fff13	 bx          r3
  006a4	e58d0014	 str         r0, [sp, #0x14]
  006a8	e59d3014	 ldr         r3, [sp, #0x14]
  006ac	e58d300c	 str         r3, [sp, #0xC]
  006b0	ea00000d	 b           |$LN3@SPIWrite|

; 213  : 	}
; 214  :     else

  006b4	ea00000c	 b           |$LN1@SPIWrite|
  006b8		 |$LN2@SPIWrite|

; 215  :     {
; 216  :         DWORD   dwCount = 0;

  006b8	e3a03000	 mov         r3, #0
  006bc	e58d3008	 str         r3, [sp, #8]

; 217  : 
; 218  :         WriteFile( pContext->hDevice, pBuffer, size, &dwCount, NULL );

  006c0	e3a03000	 mov         r3, #0
  006c4	e58d3000	 str         r3, [sp]
  006c8	e28d3008	 add         r3, sp, #8
  006cc	e59d2024	 ldr         r2, [sp, #0x24]
  006d0	e59d1028	 ldr         r1, [sp, #0x28]
  006d4	e59d0004	 ldr         r0, [sp, #4]
  006d8	e2800030	 add         r0, r0, #0x30
  006dc	e5900000	 ldr         r0, [r0]
  006e0	eb000000	 bl          WriteFile

; 219  :         return dwCount;

  006e4	e59d3008	 ldr         r3, [sp, #8]
  006e8	e58d300c	 str         r3, [sp, #0xC]
  006ec		 |$LN1@SPIWrite|
  006ec		 |$LN3@SPIWrite|

; 220  :     }
; 221  : }

  006ec	e59d000c	 ldr         r0, [sp, #0xC]
  006f0	e28dd018	 add         sp, sp, #0x18
  006f4	e89d6000	 ldmia       sp, {sp, lr}
  006f8	e12fff1e	 bx          lr
  006fc		 |$M36031|

			 ENDP  ; |SPIWrite|

	EXPORT	|SPIWriteRead|

  00050			 AREA	 |.pdata|, PDATA
|$T36043| DCD	|$LN7@SPIWriteRe|
	DCD	0x40003004
; Function compile flags: /Odtp

  006fc			 AREA	 |.text|, CODE, ARM

  006fc		 |SPIWriteRead| PROC

; 224  : {

  006fc		 |$LN7@SPIWriteRe|
  006fc	e1a0c00d	 mov         r12, sp
  00700	e92d000f	 stmdb       sp!, {r0 - r3}
  00704	e92d5010	 stmdb       sp!, {r4, r12, lr}
  00708	e24dd030	 sub         sp, sp, #0x30
  0070c		 |$M36040|

; 225  :     DEVICE_CONTEXT_SPI *pContext = (DEVICE_CONTEXT_SPI *)hContext;

  0070c	e59d303c	 ldr         r3, [sp, #0x3C]
  00710	e58d3010	 str         r3, [sp, #0x10]

; 226  :     if( pContext->ifc.context )

  00714	e59d3010	 ldr         r3, [sp, #0x10]
  00718	e5933000	 ldr         r3, [r3]
  0071c	e3530000	 cmp         r3, #0
  00720	0a00000e	 beq         |$LN2@SPIWriteRe|

; 227  :     {
; 228  : 	    return pContext->ifc.pfnWriteRead(pContext->ifc.context, size, pOutBuffer, pInBuffer);

  00724	e59d3048	 ldr         r3, [sp, #0x48]
  00728	e59d2044	 ldr         r2, [sp, #0x44]
  0072c	e59d1040	 ldr         r1, [sp, #0x40]
  00730	e59d0010	 ldr         r0, [sp, #0x10]
  00734	e5900000	 ldr         r0, [r0]
  00738	e59de010	 ldr         lr, [sp, #0x10]
  0073c	e28ee010	 add         lr, lr, #0x10
  00740	e59e4000	 ldr         r4, [lr]
  00744	e1a0e00f	 mov         lr, pc
  00748	e12fff14	 bx          r4
  0074c	e58d0028	 str         r0, [sp, #0x28]
  00750	e59d3028	 ldr         r3, [sp, #0x28]
  00754	e58d3014	 str         r3, [sp, #0x14]
  00758	ea000012	 b           |$LN3@SPIWriteRe|

; 229  : 	}
; 230  :     else

  0075c	ea000011	 b           |$LN1@SPIWriteRe|
  00760		 |$LN2@SPIWriteRe|

; 231  :     {
; 232  :         return DeviceIoControl(pContext->hDevice,
; 233  :                         IOCTL_SPI_WRITEREAD,
; 234  :                         pInBuffer,
; 235  :                         size,
; 236  :                         pOutBuffer,
; 237  :                         size,
; 238  :                         NULL,
; 239  :                         NULL );

  00760	e3a03000	 mov         r3, #0
  00764	e58d300c	 str         r3, [sp, #0xC]
  00768	e3a03000	 mov         r3, #0
  0076c	e58d3008	 str         r3, [sp, #8]
  00770	e59d3040	 ldr         r3, [sp, #0x40]
  00774	e58d3004	 str         r3, [sp, #4]
  00778	e59d3044	 ldr         r3, [sp, #0x44]
  0077c	e58d3000	 str         r3, [sp]
  00780	e59d3040	 ldr         r3, [sp, #0x40]
  00784	e59d2048	 ldr         r2, [sp, #0x48]
  00788	e59f1028	 ldr         r1, [pc, #0x28]
  0078c	e59d0010	 ldr         r0, [sp, #0x10]
  00790	e2800030	 add         r0, r0, #0x30
  00794	e5900000	 ldr         r0, [r0]
  00798	eb000000	 bl          DeviceIoControl
  0079c	e58d002c	 str         r0, [sp, #0x2C]
  007a0	e59d302c	 ldr         r3, [sp, #0x2C]
  007a4	e58d3014	 str         r3, [sp, #0x14]
  007a8		 |$LN1@SPIWriteRe|
  007a8		 |$LN3@SPIWriteRe|

; 240  :     }
; 241  : }

  007a8	e59d0014	 ldr         r0, [sp, #0x14]
  007ac	e28dd030	 add         sp, sp, #0x30
  007b0	e89d6010	 ldmia       sp, {r4, sp, lr}
  007b4	e12fff1e	 bx          lr
  007b8		 |$LN8@SPIWriteRe|
  007b8		 |$LN9@SPIWriteRe|
  007b8	00220804	 DCD         0x220804
  007bc		 |$M36041|

			 ENDP  ; |SPIWriteRead|

	EXPORT	|SPIAsyncWriteRead|

  00058			 AREA	 |.pdata|, PDATA
|$T36055| DCD	|$LN7@SPIAsyncWr|
	DCD	0x40003004
; Function compile flags: /Odtp

  007bc			 AREA	 |.text|, CODE, ARM

  007bc		 |SPIAsyncWriteRead| PROC

; 244  : {

  007bc		 |$LN7@SPIAsyncWr|
  007bc	e1a0c00d	 mov         r12, sp
  007c0	e92d000f	 stmdb       sp!, {r0 - r3}
  007c4	e92d5010	 stmdb       sp!, {r4, r12, lr}
  007c8	e24dd030	 sub         sp, sp, #0x30
  007cc		 |$M36052|

; 245  :     DEVICE_CONTEXT_SPI *pContext = (DEVICE_CONTEXT_SPI *)hContext;

  007cc	e59d303c	 ldr         r3, [sp, #0x3C]
  007d0	e58d3010	 str         r3, [sp, #0x10]

; 246  :     if( pContext->ifc.context )

  007d4	e59d3010	 ldr         r3, [sp, #0x10]
  007d8	e5933000	 ldr         r3, [r3]
  007dc	e3530000	 cmp         r3, #0
  007e0	0a00000e	 beq         |$LN2@SPIAsyncWr|

; 247  :     {
; 248  :         return pContext->ifc.pfnAsyncWriteRead(pContext->ifc.context, size, pOutBuffer, pInBuffer);

  007e4	e59d3048	 ldr         r3, [sp, #0x48]
  007e8	e59d2044	 ldr         r2, [sp, #0x44]
  007ec	e59d1040	 ldr         r1, [sp, #0x40]
  007f0	e59d0010	 ldr         r0, [sp, #0x10]
  007f4	e5900000	 ldr         r0, [r0]
  007f8	e59de010	 ldr         lr, [sp, #0x10]
  007fc	e28ee024	 add         lr, lr, #0x24
  00800	e59e4000	 ldr         r4, [lr]
  00804	e1a0e00f	 mov         lr, pc
  00808	e12fff14	 bx          r4
  0080c	e58d0028	 str         r0, [sp, #0x28]
  00810	e59d3028	 ldr         r3, [sp, #0x28]
  00814	e58d3014	 str         r3, [sp, #0x14]
  00818	ea000012	 b           |$LN3@SPIAsyncWr|

; 249  :     }
; 250  :     else

  0081c	ea000011	 b           |$LN1@SPIAsyncWr|
  00820		 |$LN2@SPIAsyncWr|

; 251  :     {
; 252  :         return DeviceIoControl(pContext->hDevice,
; 253  :                         IOCTL_SPI_ASYNC_WRITEREAD,
; 254  :                         pInBuffer,
; 255  :                         size,
; 256  :                         pOutBuffer,
; 257  :                         size,
; 258  :                         NULL,
; 259  :                         NULL );

  00820	e3a03000	 mov         r3, #0
  00824	e58d300c	 str         r3, [sp, #0xC]
  00828	e3a03000	 mov         r3, #0
  0082c	e58d3008	 str         r3, [sp, #8]
  00830	e59d3040	 ldr         r3, [sp, #0x40]
  00834	e58d3004	 str         r3, [sp, #4]
  00838	e59d3044	 ldr         r3, [sp, #0x44]
  0083c	e58d3000	 str         r3, [sp]
  00840	e59d3040	 ldr         r3, [sp, #0x40]
  00844	e59d2048	 ldr         r2, [sp, #0x48]
  00848	e59f1028	 ldr         r1, [pc, #0x28]
  0084c	e59d0010	 ldr         r0, [sp, #0x10]
  00850	e2800030	 add         r0, r0, #0x30
  00854	e5900000	 ldr         r0, [r0]
  00858	eb000000	 bl          DeviceIoControl
  0085c	e58d002c	 str         r0, [sp, #0x2C]
  00860	e59d302c	 ldr         r3, [sp, #0x2C]
  00864	e58d3014	 str         r3, [sp, #0x14]
  00868		 |$LN1@SPIAsyncWr|
  00868		 |$LN3@SPIAsyncWr|

; 260  :     }
; 261  : }

  00868	e59d0014	 ldr         r0, [sp, #0x14]
  0086c	e28dd030	 add         sp, sp, #0x30
  00870	e89d6010	 ldmia       sp, {r4, sp, lr}
  00874	e12fff1e	 bx          lr
  00878		 |$LN8@SPIAsyncWr|
  00878		 |$LN9@SPIAsyncWr|
  00878	00220808	 DCD         0x220808
  0087c		 |$M36053|

			 ENDP  ; |SPIAsyncWriteRead|

	EXPORT	|SPIWaitForAsyncWriteReadComplet|

  00060			 AREA	 |.pdata|, PDATA
|$T36067| DCD	|$LN7@SPIWaitFor|
	DCD	0x40002f04
; Function compile flags: /Odtp

  0087c			 AREA	 |.text|, CODE, ARM

  0087c		 |SPIWaitForAsyncWriteReadComplet| PROC

; 264  : {

  0087c		 |$LN7@SPIWaitFor|
  0087c	e1a0c00d	 mov         r12, sp
  00880	e92d0007	 stmdb       sp!, {r0 - r2}
  00884	e92d5000	 stmdb       sp!, {r12, lr}
  00888	e24dd030	 sub         sp, sp, #0x30
  0088c		 |$M36064|

; 265  :     DEVICE_CONTEXT_SPI *pContext = (DEVICE_CONTEXT_SPI *)hContext;

  0088c	e59d3038	 ldr         r3, [sp, #0x38]
  00890	e58d3010	 str         r3, [sp, #0x10]

; 266  :     if( pContext->ifc.context )

  00894	e59d3010	 ldr         r3, [sp, #0x10]
  00898	e5933000	 ldr         r3, [r3]
  0089c	e3530000	 cmp         r3, #0
  008a0	0a00000d	 beq         |$LN2@SPIWaitFor|

; 267  :     {
; 268  :         return pContext->ifc.pfnWaitForAsyncWriteReadComplete(pContext->ifc.context, size, pOutBuffer);

  008a4	e59d2040	 ldr         r2, [sp, #0x40]
  008a8	e59d103c	 ldr         r1, [sp, #0x3C]
  008ac	e59d3010	 ldr         r3, [sp, #0x10]
  008b0	e5930000	 ldr         r0, [r3]
  008b4	e59d3010	 ldr         r3, [sp, #0x10]
  008b8	e2833028	 add         r3, r3, #0x28
  008bc	e5933000	 ldr         r3, [r3]
  008c0	e1a0e00f	 mov         lr, pc
  008c4	e12fff13	 bx          r3
  008c8	e58d0028	 str         r0, [sp, #0x28]
  008cc	e59d3028	 ldr         r3, [sp, #0x28]
  008d0	e58d3014	 str         r3, [sp, #0x14]
  008d4	ea000012	 b           |$LN3@SPIWaitFor|

; 269  :     }
; 270  :     else

  008d8	ea000011	 b           |$LN1@SPIWaitFor|
  008dc		 |$LN2@SPIWaitFor|

; 271  :     {
; 272  :         return DeviceIoControl(pContext->hDevice,
; 273  :                         IOCTL_SPI_ASYNC_WRITEREAD_COMPLETE,
; 274  :                         NULL,
; 275  :                         0,
; 276  :                         pOutBuffer,
; 277  :                         size,
; 278  :                         NULL,
; 279  :                         NULL );

  008dc	e3a03000	 mov         r3, #0
  008e0	e58d300c	 str         r3, [sp, #0xC]
  008e4	e3a03000	 mov         r3, #0
  008e8	e58d3008	 str         r3, [sp, #8]
  008ec	e59d303c	 ldr         r3, [sp, #0x3C]
  008f0	e58d3004	 str         r3, [sp, #4]
  008f4	e59d3040	 ldr         r3, [sp, #0x40]
  008f8	e58d3000	 str         r3, [sp]
  008fc	e3a03000	 mov         r3, #0
  00900	e3a02000	 mov         r2, #0
  00904	e59f1028	 ldr         r1, [pc, #0x28]
  00908	e59d0010	 ldr         r0, [sp, #0x10]
  0090c	e2800030	 add         r0, r0, #0x30
  00910	e5900000	 ldr         r0, [r0]
  00914	eb000000	 bl          DeviceIoControl
  00918	e58d002c	 str         r0, [sp, #0x2C]
  0091c	e59d302c	 ldr         r3, [sp, #0x2C]
  00920	e58d3014	 str         r3, [sp, #0x14]
  00924		 |$LN1@SPIWaitFor|
  00924		 |$LN3@SPIWaitFor|

; 280  :     }
; 281  : }

  00924	e59d0014	 ldr         r0, [sp, #0x14]
  00928	e28dd030	 add         sp, sp, #0x30
  0092c	e89d6000	 ldmia       sp, {sp, lr}
  00930	e12fff1e	 bx          lr
  00934		 |$LN8@SPIWaitFor|
  00934		 |$LN9@SPIWaitFor|
  00934	0022080c	 DCD         0x22080c
  00938		 |$M36065|

			 ENDP  ; |SPIWaitForAsyncWriteReadComplet|

	END
