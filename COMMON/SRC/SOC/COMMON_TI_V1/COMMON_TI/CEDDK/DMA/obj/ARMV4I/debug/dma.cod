; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\CEDDK\DMA\dma.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|g_hDmaDrv| [ DATA ]

  00000			 AREA	 |.bss|, NOINIT
|g_hDmaDrv| %	0x4

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|??_C@_1M@GJIMDHLB@?$AAD?$AAM?$AAA?$AA1?$AA?3?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|LoadDmaDriver|
	IMPORT	|CreateFileW|

  00000			 AREA	 |.pdata|, PDATA
|$T43944| DCD	|$LN6@LoadDmaDri|
	DCD	0x40002502
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\ceddk\dma\dma.c

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@GJIMDHLB@?$AAD?$AAM?$AAA?$AA1?$AA?3?$AA?$AA@| DCB "D", 0x0, "M", 0x0
	DCB	"A", 0x0, "1", 0x0, ":", 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |LoadDmaDriver| PROC

; 46   : {

  00000		 |$LN6@LoadDmaDri|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004	e24dd024	 sub         sp, sp, #0x24
  00008		 |$M43941|

; 47   :     BOOL rc = FALSE;

  00008	e3a03000	 mov         r3, #0
  0000c	e58d300c	 str         r3, [sp, #0xC]

; 48   :     g_hDmaDrv = CreateFile(L"DMA1:", 0, 0, NULL, 0, 0, NULL);

  00010	e3a03000	 mov         r3, #0
  00014	e58d3008	 str         r3, [sp, #8]
  00018	e3a03000	 mov         r3, #0
  0001c	e58d3004	 str         r3, [sp, #4]
  00020	e3a03000	 mov         r3, #0
  00024	e58d3000	 str         r3, [sp]
  00028	e3a03000	 mov         r3, #0
  0002c	e3a02000	 mov         r2, #0
  00030	e3a01000	 mov         r1, #0
  00034	e59f0054	 ldr         r0, [pc, #0x54]
  00038	eb000000	 bl          CreateFileW
  0003c	e58d0020	 str         r0, [sp, #0x20]
  00040	e59d2020	 ldr         r2, [sp, #0x20]
  00044	e59f3040	 ldr         r3, [pc, #0x40]
  00048	e5832000	 str         r2, [r3]

; 49   :     if (g_hDmaDrv == INVALID_HANDLE_VALUE)

  0004c	e59f3038	 ldr         r3, [pc, #0x38]
  00050	e5933000	 ldr         r3, [r3]
  00054	e3730001	 cmn         r3, #1
  00058	1a000003	 bne         |$LN1@LoadDmaDri|

; 50   :         {
; 51   :         g_hDmaDrv = NULL;

  0005c	e59f2028	 ldr         r2, [pc, #0x28]
  00060	e3a03000	 mov         r3, #0
  00064	e5823000	 str         r3, [r2]

; 52   :         goto cleanUp;

  00068	ea000001	 b           |$cleanUp$43723|
  0006c		 |$LN1@LoadDmaDri|

; 53   :         }
; 54   : 
; 55   :     rc = TRUE;

  0006c	e3a03001	 mov         r3, #1
  00070	e58d300c	 str         r3, [sp, #0xC]
  00074		 |$cleanUp$43723|

; 56   : cleanUp:
; 57   :     return rc;

  00074	e59d300c	 ldr         r3, [sp, #0xC]
  00078	e58d301c	 str         r3, [sp, #0x1C]

; 58   : }

  0007c	e59d001c	 ldr         r0, [sp, #0x1C]
  00080	e28dd024	 add         sp, sp, #0x24
  00084	e49de004	 ldr         lr, [sp], #4
  00088	e12fff1e	 bx          lr
  0008c		 |$LN7@LoadDmaDri|
  0008c		 |$LN8@LoadDmaDri|
  0008c	00000000	 DCD         |g_hDmaDrv|
  00090		 |$LN9@LoadDmaDri|
  00090	00000000	 DCD         |??_C@_1M@GJIMDHLB@?$AAD?$AAM?$AAA?$AA1?$AA?3?$AA?$AA@|
  00094		 |$M43942|

			 ENDP  ; |LoadDmaDriver|

	EXPORT	|DmaFreeChannel|
	EXPORT	|DmaAllocateChannel|
	IMPORT	|LocalFree|
	IMPORT	|MmMapIoSpace|
	IMPORT	|DeviceIoControl|
	IMPORT	|memset|
	IMPORT	|LocalAlloc|

  00008			 AREA	 |.pdata|, PDATA
|$T43959| DCD	|$LN12@DmaAllocat|
	DCD	0x40007804
; Function compile flags: /Odtp

  00094			 AREA	 |.text|, CODE, ARM

  00094		 |DmaAllocateChannel| PROC

; 69   : {

  00094		 |$LN12@DmaAllocat|
  00094	e1a0c00d	 mov         r12, sp
  00098	e92d000f	 stmdb       sp!, {r0 - r3}
  0009c	e92d5000	 stmdb       sp!, {r12, lr}
  000a0	e24dd048	 sub         sp, sp, #0x48
  000a4		 |$M43956|

; 70   :     BOOL rc = FALSE;

  000a4	e3a03000	 mov         r3, #0
  000a8	e58d3010	 str         r3, [sp, #0x10]

; 71   :     PHYSICAL_ADDRESS pa;
; 72   :     CeddkDmaContext_t *pContext = NULL;

  000ac	e3a03000	 mov         r3, #0
  000b0	e58d301c	 str         r3, [sp, #0x1C]

; 73   :     
; 74   :     // check if dma handle is valid
; 75   :     if (ValidateDmaDriver() == FALSE)

  000b4	e59f31ac	 ldr         r3, [pc, #0x1AC]
  000b8	e5933000	 ldr         r3, [r3]
  000bc	e3530000	 cmp         r3, #0
  000c0	0a000002	 beq         |$LN8@DmaAllocat|
  000c4	e3a03001	 mov         r3, #1
  000c8	e58d3034	 str         r3, [sp, #0x34]
  000cc	ea000003	 b           |$LN9@DmaAllocat|
  000d0		 |$LN8@DmaAllocat|
  000d0	eb000000	 bl          LoadDmaDriver
  000d4	e58d0038	 str         r0, [sp, #0x38]
  000d8	e59d3038	 ldr         r3, [sp, #0x38]
  000dc	e58d3034	 str         r3, [sp, #0x34]
  000e0		 |$LN9@DmaAllocat|
  000e0	e59d3034	 ldr         r3, [sp, #0x34]
  000e4	e3530000	 cmp         r3, #0
  000e8	1a000000	 bne         |$LN5@DmaAllocat|

; 76   :         {
; 77   :         goto cleanUp;

  000ec	ea00004d	 b           |$cleanUp$43733|
  000f0		 |$LN5@DmaAllocat|

; 78   :         }
; 79   : 
; 80   :     // allocate handle for dma
; 81   :     pContext = (CeddkDmaContext_t*)LocalAlloc(LPTR, sizeof(CeddkDmaContext_t));

  000f0	e3a01018	 mov         r1, #0x18
  000f4	e3a00040	 mov         r0, #0x40
  000f8	eb000000	 bl          LocalAlloc
  000fc	e58d003c	 str         r0, [sp, #0x3C]
  00100	e59d303c	 ldr         r3, [sp, #0x3C]
  00104	e58d301c	 str         r3, [sp, #0x1C]

; 82   :     if (pContext == NULL)

  00108	e59d301c	 ldr         r3, [sp, #0x1C]
  0010c	e3530000	 cmp         r3, #0
  00110	1a000000	 bne         |$LN4@DmaAllocat|

; 83   :         {
; 84   :         goto cleanUp;

  00114	ea000043	 b           |$cleanUp$43733|
  00118		 |$LN4@DmaAllocat|

; 85   :         }
; 86   : 
; 87   :     memset(pContext, 0, sizeof(CeddkDmaContext_t));

  00118	e3a02018	 mov         r2, #0x18
  0011c	e3a01000	 mov         r1, #0
  00120	e59d001c	 ldr         r0, [sp, #0x1C]
  00124	eb000000	 bl          memset

; 88   :     pContext->cookie = DMA_HANDLE_CHANNEL_COOKIE;

  00128	e59d201c	 ldr         r2, [sp, #0x1C]
  0012c	e59f313c	 ldr         r3, [pc, #0x13C]
  00130	e5823000	 str         r3, [r2]

; 89   :     if (!DeviceIoControl(
; 90   :             g_hDmaDrv, IOCTL_DMA_RESERVE_CHANNEL, (VOID*)&dmaType,
; 91   :             sizeof(IOCTL_DMA_RESERVE_IN), &pContext->context, 
; 92   :             sizeof(IOCTL_DMA_RESERVE_OUT), NULL, NULL))

  00134	e3a03000	 mov         r3, #0
  00138	e58d300c	 str         r3, [sp, #0xC]
  0013c	e3a03000	 mov         r3, #0
  00140	e58d3008	 str         r3, [sp, #8]
  00144	e3a03010	 mov         r3, #0x10
  00148	e58d3004	 str         r3, [sp, #4]
  0014c	e59d301c	 ldr         r3, [sp, #0x1C]
  00150	e2833008	 add         r3, r3, #8
  00154	e58d3000	 str         r3, [sp]
  00158	e3a03004	 mov         r3, #4
  0015c	e28d2050	 add         r2, sp, #0x50
  00160	e59f1104	 ldr         r1, [pc, #0x104]
  00164	e59f00fc	 ldr         r0, [pc, #0xFC]
  00168	e5900000	 ldr         r0, [r0]
  0016c	eb000000	 bl          DeviceIoControl
  00170	e58d0040	 str         r0, [sp, #0x40]
  00174	e59d3040	 ldr         r3, [sp, #0x40]
  00178	e3530000	 cmp         r3, #0
  0017c	1a000000	 bne         |$LN3@DmaAllocat|

; 93   :         {
; 94   :         goto cleanUp;

  00180	ea000028	 b           |$cleanUp$43733|
  00184		 |$LN3@DmaAllocat|

; 95   :         }
; 96   : 
; 97   :     // map memory to register
; 98   :     pa.HighPart = 0;

  00184	e3a03000	 mov         r3, #0
  00188	e58d3018	 str         r3, [sp, #0x18]

; 99   :     pa.LowPart = pContext->context.channelAddress;

  0018c	e59d301c	 ldr         r3, [sp, #0x1C]
  00190	e2833010	 add         r3, r3, #0x10
  00194	e5933000	 ldr         r3, [r3]
  00198	e58d3014	 str         r3, [sp, #0x14]

; 100  :     pContext->pDmaChannel = (OMAP_DMA_LC_REGS*)MmMapIoSpace(pa, 
; 101  :                                                 pContext->context.registerSize, 
; 102  :                                                 FALSE
; 103  :                                                 );

  0019c	e3a03000	 mov         r3, #0
  001a0	e59d201c	 ldr         r2, [sp, #0x1C]
  001a4	e2822014	 add         r2, r2, #0x14
  001a8	e5922000	 ldr         r2, [r2]
  001ac	e59d0014	 ldr         r0, [sp, #0x14]
  001b0	e59d1018	 ldr         r1, [sp, #0x18]
  001b4	eb000000	 bl          MmMapIoSpace
  001b8	e58d0044	 str         r0, [sp, #0x44]
  001bc	e59d301c	 ldr         r3, [sp, #0x1C]
  001c0	e2832004	 add         r2, r3, #4
  001c4	e59d3044	 ldr         r3, [sp, #0x44]
  001c8	e5823000	 str         r3, [r2]

; 104  : 
; 105  :     if (pContext->pDmaChannel == NULL)

  001cc	e59d301c	 ldr         r3, [sp, #0x1C]
  001d0	e2833004	 add         r3, r3, #4
  001d4	e5933000	 ldr         r3, [r3]
  001d8	e3530000	 cmp         r3, #0
  001dc	1a000002	 bne         |$LN2@DmaAllocat|

; 106  :         {
; 107  :         DmaFreeChannel(pContext);

  001e0	e59d001c	 ldr         r0, [sp, #0x1C]
  001e4	eb000000	 bl          DmaFreeChannel

; 108  :         goto cleanUp;

  001e8	ea00000e	 b           |$cleanUp$43733|
  001ec		 |$LN2@DmaAllocat|

; 109  :         }
; 110  : 
; 111  :     // clear status mask
; 112  :     WRITE_REGISTER_ULONG(&pContext->pDmaChannel->CSR, 0x00000FFE);

  001ec	e59d301c	 ldr         r3, [sp, #0x1C]
  001f0	e2833004	 add         r3, r3, #4
  001f4	e5933000	 ldr         r3, [r3]
  001f8	e283200c	 add         r2, r3, #0xC
  001fc	e3a03c0f	 mov         r3, #0xF, 24
  00200	e38330fe	 orr         r3, r3, #0xFE
  00204	e5823000	 str         r3, [r2]

; 113  :     WRITE_REGISTER_ULONG(&pContext->pDmaChannel->CLNK_CTRL, 0x00000000);

  00208	e59d301c	 ldr         r3, [sp, #0x1C]
  0020c	e2833004	 add         r3, r3, #4
  00210	e5933000	 ldr         r3, [r3]
  00214	e2832004	 add         r2, r3, #4
  00218	e3a03000	 mov         r3, #0
  0021c	e5823000	 str         r3, [r2]

; 114  : 
; 115  :     rc = TRUE;

  00220	e3a03001	 mov         r3, #1
  00224	e58d3010	 str         r3, [sp, #0x10]
  00228		 |$cleanUp$43733|

; 116  : 
; 117  : cleanUp:
; 118  :     // request dma channel
; 119  :     if (rc == FALSE && pContext != NULL)

  00228	e59d3010	 ldr         r3, [sp, #0x10]
  0022c	e3530000	 cmp         r3, #0
  00230	1a000006	 bne         |$LN1@DmaAllocat|
  00234	e59d301c	 ldr         r3, [sp, #0x1C]
  00238	e3530000	 cmp         r3, #0
  0023c	0a000003	 beq         |$LN1@DmaAllocat|

; 120  :         {
; 121  :         LocalFree(pContext);

  00240	e59d001c	 ldr         r0, [sp, #0x1C]
  00244	eb000000	 bl          LocalFree

; 122  :         pContext = NULL;

  00248	e3a03000	 mov         r3, #0
  0024c	e58d301c	 str         r3, [sp, #0x1C]
  00250		 |$LN1@DmaAllocat|

; 123  :         }
; 124  :     
; 125  :     return pContext;    

  00250	e59d301c	 ldr         r3, [sp, #0x1C]
  00254	e58d3030	 str         r3, [sp, #0x30]

; 126  : }

  00258	e59d0030	 ldr         r0, [sp, #0x30]
  0025c	e28dd048	 add         sp, sp, #0x48
  00260	e89d6000	 ldmia       sp, {sp, lr}
  00264	e12fff1e	 bx          lr
  00268		 |$LN13@DmaAllocat|
  00268		 |$LN14@DmaAllocat|
  00268	00000000	 DCD         |g_hDmaDrv|
  0026c		 |$LN15@DmaAllocat|
  0026c	01da0404	 DCD         0x1da0404
  00270		 |$LN16@DmaAllocat|
  00270	43a608f0	 DCD         0x43a608f0
  00274		 |$M43957|

			 ENDP  ; |DmaAllocateChannel|

	EXPORT	|??_C@_1FM@OLMMJHOB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$CB?$AA?5?$AAC?$AAE?$AAD?$AAD?$AAK?$AA?3?$AA?5?$AAe?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAf?$AAr?$AAe?$AAe?$AA?8?$AAi?$AAn?$AAg@| [ DATA ] ; `string'
	EXPORT	|DmaEnableInterrupts|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|MmUnmapIoSpace|
	IMPORT	|__C_specific_handler|

  00010			 AREA	 |.pdata|, PDATA
|$T43986| DCD	|$LN22@DmaFreeCha|
	DCD	0xc0006405
|$T43988| DCD	|$LN12@DmaFreeCha|
	DCD	0x40000902

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FM@OLMMJHOB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$CB?$AA?5?$AAC?$AAE?$AAD?$AAD?$AAK?$AA?3?$AA?5?$AAe?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAf?$AAr?$AAe?$AAe?$AA?8?$AAi?$AAn?$AAg@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, "!", 0x0, " "
	DCB	0x0, "C", 0x0, "E", 0x0, "D", 0x0, "D", 0x0, "K", 0x0, ":"
	DCB	0x0, " ", 0x0, "e", 0x0, "x", 0x0, "c", 0x0, "e", 0x0, "p"
	DCB	0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, " ", 0x0, "f"
	DCB	0x0, "r", 0x0, "e", 0x0, "e", 0x0, "'", 0x0, "i", 0x0, "n"
	DCB	0x0, "g", 0x0, " ", 0x0, "d", 0x0, "m", 0x0, "a", 0x0, " "
	DCB	0x0, "h", 0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.xdata|, DATA
|$T43984| DCD	0x1
	DCD	|$LN16@DmaFreeCha|
	DCD	|$LN17@DmaFreeCha|
	DCD	|$LN12@DmaFreeCha|
	DCD	|$LN13@DmaFreeCha|
; Function compile flags: /Odtp

  00274			 AREA	 |.text|, CODE, ARM

  00274	00000000	 DCD         |__C_specific_handler|
  00278	00000000	 DCD         |$T43984|

  0027c		 |DmaFreeChannel| PROC

; 136  : {

  0027c		 |$LN22@DmaFreeCha|
  0027c	e1a0c00d	 mov         r12, sp
  00280	e92d0001	 stmdb       sp!, {r0}
  00284	e92d5800	 stmdb       sp!, {r11, r12, lr}
  00288	e28db00c	 add         r11, sp, #0xC
  0028c	e24dd034	 sub         sp, sp, #0x34
  00290		 |$LN20@DmaFreeCha|

; 137  :     BOOL rc = FALSE;

  00290	e3a03000	 mov         r3, #0
  00294	e50b3030	 str         r3, [r11, #-0x30]

; 138  :     CeddkDmaContext_t *pContext = (CeddkDmaContext_t*)hDmaChannel;

  00298	e59b3000	 ldr         r3, [r11]
  0029c	e50b302c	 str         r3, [r11, #-0x2C]

; 139  :     
; 140  :     // check if dma handle is valid
; 141  :     if (ValidateDmaDriver() == FALSE || hDmaChannel == NULL)

  002a0	e59f317c	 ldr         r3, [pc, #0x17C]
  002a4	e5933000	 ldr         r3, [r3]
  002a8	e3530000	 cmp         r3, #0
  002ac	0a000002	 beq         |$LN9@DmaFreeCha|
  002b0	e3a03001	 mov         r3, #1
  002b4	e50b3014	 str         r3, [r11, #-0x14]
  002b8	ea000003	 b           |$LN10@DmaFreeCha|
  002bc		 |$LN9@DmaFreeCha|
  002bc	eb000000	 bl          LoadDmaDriver
  002c0	e50b0010	 str         r0, [r11, #-0x10]
  002c4	e51b3010	 ldr         r3, [r11, #-0x10]
  002c8	e50b3014	 str         r3, [r11, #-0x14]
  002cc		 |$LN10@DmaFreeCha|
  002cc	e51b3014	 ldr         r3, [r11, #-0x14]
  002d0	e3530000	 cmp         r3, #0
  002d4	0a000002	 beq         |$LN5@DmaFreeCha|
  002d8	e59b3000	 ldr         r3, [r11]
  002dc	e3530000	 cmp         r3, #0
  002e0	1a000000	 bne         |$LN6@DmaFreeCha|
  002e4		 |$LN5@DmaFreeCha|

; 142  :         {
; 143  :         goto cleanUp;

  002e4	ea000042	 b           |$cleanUp$43763|
  002e8		 |$LN6@DmaFreeCha|
  002e8		 |$LN16@DmaFreeCha|

; 144  :         }
; 145  : 
; 146  :     __try
; 147  :         {
; 148  :         if (pContext->cookie != DMA_HANDLE_CHANNEL_COOKIE)

  002e8	e51b302c	 ldr         r3, [r11, #-0x2C]
  002ec	e5932000	 ldr         r2, [r3]
  002f0	e59f3134	 ldr         r3, [pc, #0x134]
  002f4	e1520003	 cmp         r2, r3
  002f8	0a000000	 beq         |$LN3@DmaFreeCha|

; 149  :             {
; 150  :             goto cleanUp;

  002fc	ea00003c	 b           |$cleanUp$43763|
  00300		 |$LN3@DmaFreeCha|

; 151  :             }
; 152  :         
; 153  :         // unmap dma registers
; 154  :         if (pContext->pDmaChannel != NULL)

  00300	e51b302c	 ldr         r3, [r11, #-0x2C]
  00304	e2833004	 add         r3, r3, #4
  00308	e5933000	 ldr         r3, [r3]
  0030c	e3530000	 cmp         r3, #0
  00310	0a00002f	 beq         |$LN2@DmaFreeCha|

; 155  :             {
; 156  :             // stop dma, break all links, and reset status
; 157  :             WRITE_REGISTER_ULONG(&pContext->pDmaChannel->CCR, 0x00000000);

  00314	e51b302c	 ldr         r3, [r11, #-0x2C]
  00318	e2833004	 add         r3, r3, #4
  0031c	e5932000	 ldr         r2, [r3]
  00320	e3a03000	 mov         r3, #0
  00324	e5823000	 str         r3, [r2]

; 158  :             WRITE_REGISTER_ULONG(&pContext->pDmaChannel->CSR, 0x00000FFE);

  00328	e51b302c	 ldr         r3, [r11, #-0x2C]
  0032c	e2833004	 add         r3, r3, #4
  00330	e5933000	 ldr         r3, [r3]
  00334	e283200c	 add         r2, r3, #0xC
  00338	e3a03c0f	 mov         r3, #0xF, 24
  0033c	e38330fe	 orr         r3, r3, #0xFE
  00340	e5823000	 str         r3, [r2]

; 159  :             WRITE_REGISTER_ULONG(&pContext->pDmaChannel->CLNK_CTRL, 0x00000000);

  00344	e51b302c	 ldr         r3, [r11, #-0x2C]
  00348	e2833004	 add         r3, r3, #4
  0034c	e5933000	 ldr         r3, [r3]
  00350	e2832004	 add         r2, r3, #4
  00354	e3a03000	 mov         r3, #0
  00358	e5823000	 str         r3, [r2]

; 160  : 
; 161  :             // unregister for all interrupts
; 162  :             DmaEnableInterrupts(hDmaChannel, NULL);

  0035c	e3a01000	 mov         r1, #0
  00360	e59b0000	 ldr         r0, [r11]
  00364	eb000000	 bl          DmaEnableInterrupts

; 163  : 
; 164  :             // release reserved dma channel
; 165  :             if (pContext->context.channelAddress != 0)

  00368	e51b302c	 ldr         r3, [r11, #-0x2C]
  0036c	e2833010	 add         r3, r3, #0x10
  00370	e5933000	 ldr         r3, [r3]
  00374	e3530000	 cmp         r3, #0
  00378	0a00000e	 beq         |$LN1@DmaFreeCha|

; 166  :                 {
; 167  :                 DeviceIoControl(g_hDmaDrv, IOCTL_DMA_RELEASE_CHANNEL, 
; 168  :                     (VOID*)&pContext->context, sizeof(DmaChannelContext_t), NULL, 
; 169  :                     0, NULL, NULL);

  0037c	e3a03000	 mov         r3, #0
  00380	e58d300c	 str         r3, [sp, #0xC]
  00384	e3a03000	 mov         r3, #0
  00388	e58d3008	 str         r3, [sp, #8]
  0038c	e3a03000	 mov         r3, #0
  00390	e58d3004	 str         r3, [sp, #4]
  00394	e3a03000	 mov         r3, #0
  00398	e58d3000	 str         r3, [sp]
  0039c	e3a03010	 mov         r3, #0x10
  003a0	e51b202c	 ldr         r2, [r11, #-0x2C]
  003a4	e2822008	 add         r2, r2, #8
  003a8	e59f1078	 ldr         r1, [pc, #0x78]
  003ac	e59f0070	 ldr         r0, [pc, #0x70]
  003b0	e5900000	 ldr         r0, [r0]
  003b4	eb000000	 bl          DeviceIoControl
  003b8		 |$LN1@DmaFreeCha|

; 170  :                 }
; 171  : 
; 172  :             MmUnmapIoSpace((void*)pContext->pDmaChannel, 
; 173  :                 pContext->context.registerSize
; 174  :                 );

  003b8	e51b302c	 ldr         r3, [r11, #-0x2C]
  003bc	e2833014	 add         r3, r3, #0x14
  003c0	e5931000	 ldr         r1, [r3]
  003c4	e51b302c	 ldr         r3, [r11, #-0x2C]
  003c8	e2833004	 add         r3, r3, #4
  003cc	e5930000	 ldr         r0, [r3]
  003d0	eb000000	 bl          MmUnmapIoSpace
  003d4		 |$LN2@DmaFreeCha|

; 175  :             }
; 176  : 
; 177  :         LocalFree(pContext);

  003d4	e51b002c	 ldr         r0, [r11, #-0x2C]
  003d8	eb000000	 bl          LocalFree

; 178  :         rc = TRUE;

  003dc	e3a03001	 mov         r3, #1
  003e0	e50b3030	 str         r3, [r11, #-0x30]
  003e4		 |$LN17@DmaFreeCha|

; 179  :         }

  003e4	ea000002	 b           |$LN18@DmaFreeCha|
  003e8		 |$LN13@DmaFreeCha|

; 181  :         {
; 182  :         RETAILMSG(TRUE, (L"ERROR! CEDDK: "
; 183  :             L"exception free'ing dma handle\r\n"
; 184  :             ));

  003e8	e59f0030	 ldr         r0, [pc, #0x30]
  003ec	eb000000	 bl          NKDbgPrintfW
  003f0	eaffffff	 b           |$LN18@DmaFreeCha|
  003f4		 |$LN18@DmaFreeCha|
  003f4		 |$cleanUp$43763|

; 185  :         }
; 186  : 
; 187  : cleanUp:
; 188  :     return rc; 

  003f4	e51b3030	 ldr         r3, [r11, #-0x30]
  003f8	e50b3018	 str         r3, [r11, #-0x18]
  003fc		 |$LN11@DmaFreeCha|

; 189  : }

  003fc	e51b0018	 ldr         r0, [r11, #-0x18]
  00400	e24bd00c	 sub         sp, r11, #0xC
  00404	e89d6800	 ldmia       sp, {r11, sp, lr}
  00408	e12fff1e	 bx          lr

			 ENDP  ; |DmaFreeChannel|

  0040c		 |$LN12@DmaFreeCha|
  0040c		 |$LN21@DmaFreeCha|

; 180  :     __except (EXCEPTION_EXECUTE_HANDLER)

  0040c	e52de004	 str         lr, [sp, #-4]!
  00410	e24dd010	 sub         sp, sp, #0x10
  00414		 |$LN15@DmaFreeCha|
  00414		 |$LN24@DmaFreeCha|
  00414	e3a00001	 mov         r0, #1
  00418		 |$LN14@DmaFreeCha|
  00418	e28dd010	 add         sp, sp, #0x10
  0041c	e49df004	 ldr         pc, [sp], #4
  00420		 |$LN26@DmaFreeCha|
  00420		 |$LN27@DmaFreeCha|
  00420	00000000	 DCD         |??_C@_1FM@OLMMJHOB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$CB?$AA?5?$AAC?$AAE?$AAD?$AAD?$AAK?$AA?3?$AA?5?$AAe?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAf?$AAr?$AAe?$AAe?$AA?8?$AAi?$AAn?$AAg@|
  00424		 |$LN28@DmaFreeCha|
  00424	00000000	 DCD         |g_hDmaDrv|
  00428		 |$LN29@DmaFreeCha|
  00428	01da0408	 DCD         0x1da0408
  0042c		 |$LN30@DmaFreeCha|
  0042c	43a608f0	 DCD         0x43a608f0
  00430		 |$LN25@DmaFreeCha|
  00430		 |$LN23@DmaFreeCha|
	EXPORT	|??_C@_1HE@JBPHHPPH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$CB?$AA?5?$AAC?$AAE?$AAD?$AAD?$AAK?$AA?3?$AA?5?$AAe?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAt?$AAr?$AAy?$AAi?$AAn?$AAg?$AA?5?$AAt@| [ DATA ] ; `string'
	EXPORT	|GetCurrentProcessId|

  00020			 AREA	 |.pdata|, PDATA
|$T44017| DCD	|$LN21@DmaEnableI|
	DCD	0xc0004905
|$T44019| DCD	|$LN11@DmaEnableI|
	DCD	0x40000902

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HE@JBPHHPPH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$CB?$AA?5?$AAC?$AAE?$AAD?$AAD?$AAK?$AA?3?$AA?5?$AAe?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAt?$AAr?$AAy?$AAi?$AAn?$AAg?$AA?5?$AAt@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, "!", 0x0, " "
	DCB	0x0, "C", 0x0, "E", 0x0, "D", 0x0, "D", 0x0, "K", 0x0, ":"
	DCB	0x0, " ", 0x0, "e", 0x0, "x", 0x0, "c", 0x0, "e", 0x0, "p"
	DCB	0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, " ", 0x0, "t"
	DCB	0x0, "r", 0x0, "y", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, " "
	DCB	0x0, "t", 0x0, "o", 0x0, " ", 0x0, "e", 0x0, "n", 0x0, "a"
	DCB	0x0, "b", 0x0, "l", 0x0, "e", 0x0, " ", 0x0, "d", 0x0, "m"
	DCB	0x0, "a", 0x0, " ", 0x0, "i", 0x0, "n", 0x0, "t", 0x0, "e"
	DCB	0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t", 0x0, "s"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00014			 AREA	 |.xdata|, DATA
|$T44015| DCD	0x1
	DCD	|$LN15@DmaEnableI|
	DCD	|$LN16@DmaEnableI|
	DCD	|$LN11@DmaEnableI|
	DCD	|$LN12@DmaEnableI|
; Function compile flags: /Odtp

  00430			 AREA	 |.text|, CODE, ARM

  00430	00000000	 DCD         |__C_specific_handler|
  00434	00000000	 DCD         |$T44015|

  00438		 |DmaEnableInterrupts| PROC

; 201  : {

  00438		 |$LN21@DmaEnableI|
  00438	e1a0c00d	 mov         r12, sp
  0043c	e92d0003	 stmdb       sp!, {r0, r1}
  00440	e92d5800	 stmdb       sp!, {r11, r12, lr}
  00444	e28db00c	 add         r11, sp, #0xC
  00448	e24dd048	 sub         sp, sp, #0x48
  0044c		 |$LN19@DmaEnableI|

; 202  :     BOOL rc = FALSE;

  0044c	e3a03000	 mov         r3, #0
  00450	e50b3044	 str         r3, [r11, #-0x44]

; 203  :     IOCTL_DMA_REGISTER_EVENTHANDLE_IN RegisterEvent;
; 204  :     CeddkDmaContext_t *pContext = (CeddkDmaContext_t*)hDmaChannel;

  00454	e59b3000	 ldr         r3, [r11]
  00458	e50b3034	 str         r3, [r11, #-0x34]

; 205  :     
; 206  :     // check if dma handle is valid
; 207  :     if (ValidateDmaDriver() == FALSE || hDmaChannel == NULL)

  0045c	e59f3110	 ldr         r3, [pc, #0x110]
  00460	e5933000	 ldr         r3, [r3]
  00464	e3530000	 cmp         r3, #0
  00468	0a000002	 beq         |$LN8@DmaEnableI|
  0046c	e3a03001	 mov         r3, #1
  00470	e50b301c	 str         r3, [r11, #-0x1C]
  00474	ea000003	 b           |$LN9@DmaEnableI|
  00478		 |$LN8@DmaEnableI|
  00478	eb000000	 bl          LoadDmaDriver
  0047c	e50b0018	 str         r0, [r11, #-0x18]
  00480	e51b3018	 ldr         r3, [r11, #-0x18]
  00484	e50b301c	 str         r3, [r11, #-0x1C]
  00488		 |$LN9@DmaEnableI|
  00488	e51b301c	 ldr         r3, [r11, #-0x1C]
  0048c	e3530000	 cmp         r3, #0
  00490	0a000002	 beq         |$LN4@DmaEnableI|
  00494	e59b3000	 ldr         r3, [r11]
  00498	e3530000	 cmp         r3, #0
  0049c	1a000000	 bne         |$LN5@DmaEnableI|
  004a0		 |$LN4@DmaEnableI|

; 208  :         {
; 209  :         goto cleanUp;

  004a0	ea000027	 b           |$cleanUp$43793|
  004a4		 |$LN5@DmaEnableI|
  004a4		 |$LN15@DmaEnableI|

; 210  :         }
; 211  : 
; 212  :     __try
; 213  :         {
; 214  :         if (pContext->cookie != DMA_HANDLE_CHANNEL_COOKIE)

  004a4	e51b3034	 ldr         r3, [r11, #-0x34]
  004a8	e5932000	 ldr         r2, [r3]
  004ac	e59f30c8	 ldr         r3, [pc, #0xC8]
  004b0	e1520003	 cmp         r2, r3
  004b4	0a000000	 beq         |$LN2@DmaEnableI|

; 215  :             {
; 216  :             goto cleanUp;

  004b8	ea000021	 b           |$cleanUp$43793|
  004bc		 |$LN2@DmaEnableI|

; 217  :             }
; 218  : 
; 219  :         RegisterEvent.hEvent = hEvent;

  004bc	e59b3004	 ldr         r3, [r11, #4]
  004c0	e50b303c	 str         r3, [r11, #-0x3C]

; 220  :         RegisterEvent.processId = GetCurrentProcessId();

  004c4	eb000000	 bl          GetCurrentProcessId
  004c8	e50b0014	 str         r0, [r11, #-0x14]
  004cc	e51b3014	 ldr         r3, [r11, #-0x14]
  004d0	e50b3038	 str         r3, [r11, #-0x38]

; 221  :         RegisterEvent.pContext = &pContext->context;

  004d4	e51b3034	 ldr         r3, [r11, #-0x34]
  004d8	e2833008	 add         r3, r3, #8
  004dc	e50b3040	 str         r3, [r11, #-0x40]

; 222  :         if (!DeviceIoControl(g_hDmaDrv, IOCTL_DMA_REGISTER_EVENTHANDLE, 
; 223  :             (VOID*)&RegisterEvent, sizeof(IOCTL_DMA_REGISTER_EVENTHANDLE_IN), 
; 224  :             NULL, 0, NULL, NULL))

  004e0	e3a03000	 mov         r3, #0
  004e4	e58d300c	 str         r3, [sp, #0xC]
  004e8	e3a03000	 mov         r3, #0
  004ec	e58d3008	 str         r3, [sp, #8]
  004f0	e3a03000	 mov         r3, #0
  004f4	e58d3004	 str         r3, [sp, #4]
  004f8	e3a03000	 mov         r3, #0
  004fc	e58d3000	 str         r3, [sp]
  00500	e3a0300c	 mov         r3, #0xC
  00504	e24b2040	 sub         r2, r11, #0x40
  00508	e59f1068	 ldr         r1, [pc, #0x68]
  0050c	e59f0060	 ldr         r0, [pc, #0x60]
  00510	e5900000	 ldr         r0, [r0]
  00514	eb000000	 bl          DeviceIoControl
  00518	e50b0010	 str         r0, [r11, #-0x10]
  0051c	e51b3010	 ldr         r3, [r11, #-0x10]
  00520	e3530000	 cmp         r3, #0
  00524	1a000000	 bne         |$LN1@DmaEnableI|

; 225  :             {
; 226  :             goto cleanUp;

  00528	ea000005	 b           |$cleanUp$43793|
  0052c		 |$LN1@DmaEnableI|

; 227  :             }
; 228  :         rc = TRUE;

  0052c	e3a03001	 mov         r3, #1
  00530	e50b3044	 str         r3, [r11, #-0x44]
  00534		 |$LN16@DmaEnableI|

; 229  : 
; 230  :         }

  00534	ea000002	 b           |$LN17@DmaEnableI|
  00538		 |$LN12@DmaEnableI|

; 232  :         {
; 233  :         RETAILMSG(TRUE, (L"ERROR! CEDDK: "
; 234  :             L"exception trying to enable dma interrupts\r\n"
; 235  :             ));

  00538	e59f0030	 ldr         r0, [pc, #0x30]
  0053c	eb000000	 bl          NKDbgPrintfW
  00540	eaffffff	 b           |$LN17@DmaEnableI|
  00544		 |$LN17@DmaEnableI|
  00544		 |$cleanUp$43793|

; 236  :         }
; 237  :     
; 238  : cleanUp:
; 239  :     return rc; 

  00544	e51b3044	 ldr         r3, [r11, #-0x44]
  00548	e50b3020	 str         r3, [r11, #-0x20]
  0054c		 |$LN10@DmaEnableI|

; 240  : }

  0054c	e51b0020	 ldr         r0, [r11, #-0x20]
  00550	e24bd00c	 sub         sp, r11, #0xC
  00554	e89d6800	 ldmia       sp, {r11, sp, lr}
  00558	e12fff1e	 bx          lr

			 ENDP  ; |DmaEnableInterrupts|

  0055c		 |$LN11@DmaEnableI|
  0055c		 |$LN20@DmaEnableI|

; 231  :     __except (EXCEPTION_EXECUTE_HANDLER)

  0055c	e52de004	 str         lr, [sp, #-4]!
  00560	e24dd010	 sub         sp, sp, #0x10
  00564		 |$LN14@DmaEnableI|
  00564		 |$LN23@DmaEnableI|
  00564	e3a00001	 mov         r0, #1
  00568		 |$LN13@DmaEnableI|
  00568	e28dd010	 add         sp, sp, #0x10
  0056c	e49df004	 ldr         pc, [sp], #4
  00570		 |$LN25@DmaEnableI|
  00570		 |$LN26@DmaEnableI|
  00570	00000000	 DCD         |??_C@_1HE@JBPHHPPH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$CB?$AA?5?$AAC?$AAE?$AAD?$AAD?$AAK?$AA?3?$AA?5?$AAe?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAt?$AAr?$AAy?$AAi?$AAn?$AAg?$AA?5?$AAt@|
  00574		 |$LN27@DmaEnableI|
  00574	00000000	 DCD         |g_hDmaDrv|
  00578		 |$LN28@DmaEnableI|
  00578	01da040c	 DCD         0x1da040c
  0057c		 |$LN29@DmaEnableI|
  0057c	43a608f0	 DCD         0x43a608f0
  00580		 |$LN24@DmaEnableI|
  00580		 |$LN22@DmaEnableI|
	IMPORT	|__GetUserKData|
; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T44032| DCD	|$LN5@GetCurrent|
	DCD	0x40000b02
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |GetCurrentProcessId| PROC

; 373  : _inline DWORD GetCurrentProcessId(void) {

  00000		 |$LN5@GetCurrent|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004	e24dd008	 sub         sp, sp, #8
  00008		 |$M44029|

; 374  :     return __GetUserKData (SYSHANDLE_OFFSET + (SH_CURPROC * sizeof(HANDLE)));

  00008	e3a0000c	 mov         r0, #0xC
  0000c	eb000000	 bl          __GetUserKData
  00010	e58d0004	 str         r0, [sp, #4]
  00014	e59d3004	 ldr         r3, [sp, #4]
  00018	e58d3000	 str         r3, [sp]

; 375  : }

  0001c	e59d0000	 ldr         r0, [sp]
  00020	e28dd008	 add         sp, sp, #8
  00024	e49de004	 ldr         lr, [sp], #4
  00028	e12fff1e	 bx          lr
  0002c		 |$M44030|

			 ENDP  ; |GetCurrentProcessId|

	EXPORT	|??_C@_1HG@KKAEFBLK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$CB?$AA?5?$AAC?$AAE?$AAD?$AAD?$AAK?$AA?3?$AA?5?$AAe?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAt?$AAr?$AAy?$AAi?$AAn?$AAg?$AA?5?$AAt@| [ DATA ] ; `string'
	EXPORT	|DmaGetLogicalChannelId|

  00030			 AREA	 |.pdata|, PDATA
|$T44052| DCD	|$LN23@DmaGetLogi|
	DCD	0xc0004005
|$T44054| DCD	|$LN13@DmaGetLogi|
	DCD	0x40000701
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\ceddk\dma\dma.c

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HG@KKAEFBLK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$CB?$AA?5?$AAC?$AAE?$AAD?$AAD?$AAK?$AA?3?$AA?5?$AAe?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAt?$AAr?$AAy?$AAi?$AAn?$AAg?$AA?5?$AAt@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, "!", 0x0, " "
	DCB	0x0, "C", 0x0, "E", 0x0, "D", 0x0, "D", 0x0, "K", 0x0, ":"
	DCB	0x0, " ", 0x0, "e", 0x0, "x", 0x0, "c", 0x0, "e", 0x0, "p"
	DCB	0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, " ", 0x0, "t"
	DCB	0x0, "r", 0x0, "y", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, " "
	DCB	0x0, "t", 0x0, "o", 0x0, " ", 0x0, "e", 0x0, "n", 0x0, "a"
	DCB	0x0, "b", 0x0, "l", 0x0, "e", 0x0, " ", 0x0, "d", 0x0, "m"
	DCB	0x0, "a", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "p", 0x0, "e"
	DCB	0x0, "a", 0x0, "t", 0x0, " ", 0x0, "m", 0x0, "o", 0x0, "d"
	DCB	0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00028			 AREA	 |.xdata|, DATA
|$T44050| DCD	0x1
	DCD	|$LN17@DmaGetLogi|
	DCD	|$LN18@DmaGetLogi|
	DCD	|$LN13@DmaGetLogi|
	DCD	|$LN14@DmaGetLogi|
; Function compile flags: /Odtp

  00580			 AREA	 |.text|, CODE, ARM

  00580	00000000	 DCD         |__C_specific_handler|
  00584	00000000	 DCD         |$T44050|

  00588		 |DmaGetLogicalChannelId| PROC

; 250  : {

  00588		 |$LN23@DmaGetLogi|
  00588	e1a0c00d	 mov         r12, sp
  0058c	e92d0001	 stmdb       sp!, {r0}
  00590	e92d5800	 stmdb       sp!, {r11, r12, lr}
  00594	e28db00c	 add         r11, sp, #0xC
  00598	e24dd018	 sub         sp, sp, #0x18
  0059c		 |$LN21@DmaGetLogi|

; 251  :     DWORD dwId = (DWORD) -1;

  0059c	e3e03000	 mvn         r3, #0
  005a0	e50b3024	 str         r3, [r11, #-0x24]

; 252  :     
; 253  :     // check if dma handle is valid
; 254  :     if (ValidateDmaDriver() == FALSE || hDmaChannel == NULL)

  005a4	e59f30f4	 ldr         r3, [pc, #0xF4]
  005a8	e5933000	 ldr         r3, [r3]
  005ac	e3530000	 cmp         r3, #0
  005b0	0a000002	 beq         |$LN10@DmaGetLogi|
  005b4	e3a03001	 mov         r3, #1
  005b8	e50b3014	 str         r3, [r11, #-0x14]
  005bc	ea000003	 b           |$LN11@DmaGetLogi|
  005c0		 |$LN10@DmaGetLogi|
  005c0	eb000000	 bl          LoadDmaDriver
  005c4	e50b0010	 str         r0, [r11, #-0x10]
  005c8	e51b3010	 ldr         r3, [r11, #-0x10]
  005cc	e50b3014	 str         r3, [r11, #-0x14]
  005d0		 |$LN11@DmaGetLogi|
  005d0	e51b3014	 ldr         r3, [r11, #-0x14]
  005d4	e3530000	 cmp         r3, #0
  005d8	0a000002	 beq         |$LN6@DmaGetLogi|
  005dc	e59b3000	 ldr         r3, [r11]
  005e0	e3530000	 cmp         r3, #0
  005e4	1a000000	 bne         |$LN7@DmaGetLogi|
  005e8		 |$LN6@DmaGetLogi|

; 255  :         {
; 256  :         goto cleanUp;

  005e8	ea000020	 b           |$cleanUp$43812|
  005ec		 |$LN7@DmaGetLogi|
  005ec		 |$LN17@DmaGetLogi|

; 257  :         }
; 258  : 
; 259  :     __try
; 260  :         {
; 261  :             {
; 262  :             CeddkDmaContext_t *pContext = (CeddkDmaContext_t*)hDmaChannel;

  005ec	e59b3000	 ldr         r3, [r11]
  005f0	e50b3020	 str         r3, [r11, #-0x20]

; 263  : 
; 264  :             if (pContext->cookie == DMA_HANDLE_CHANNEL_COOKIE)

  005f4	e51b3020	 ldr         r3, [r11, #-0x20]
  005f8	e5932000	 ldr         r2, [r3]
  005fc	e59f3098	 ldr         r3, [pc, #0x98]
  00600	e1520003	 cmp         r2, r3
  00604	1a000003	 bne         |$LN4@DmaGetLogi|

; 265  :                 {
; 266  :         dwId = pContext->context.index;

  00608	e51b3020	 ldr         r3, [r11, #-0x20]
  0060c	e2833008	 add         r3, r3, #8
  00610	e5933000	 ldr         r3, [r3]
  00614	e50b3024	 str         r3, [r11, #-0x24]
  00618		 |$LN4@DmaGetLogi|

; 267  :         }
; 268  :             }
; 269  :             if(dwId == -1)

  00618	e51b3024	 ldr         r3, [r11, #-0x24]
  0061c	e3730001	 cmn         r3, #1
  00620	1a00000a	 bne         |$LN3@DmaGetLogi|

; 270  :                 {
; 271  :                 CeddkDmaDIChannelContext_t *pContext = (CeddkDmaDIChannelContext_t*)hDmaChannel;

  00624	e59b3000	 ldr         r3, [r11]
  00628	e50b301c	 str         r3, [r11, #-0x1C]

; 272  :                 
; 273  :                 if(pContext->cookie == DMA_DEDICATED_CHANNEL_HANDLE_COOKIE)

  0062c	e51b301c	 ldr         r3, [r11, #-0x1C]
  00630	e5932000	 ldr         r2, [r3]
  00634	e59f305c	 ldr         r3, [pc, #0x5C]
  00638	e1520003	 cmp         r2, r3
  0063c	1a000003	 bne         |$LN2@DmaGetLogi|

; 274  :                 {
; 275  :                 dwId = pContext->index;

  00640	e51b301c	 ldr         r3, [r11, #-0x1C]
  00644	e2833008	 add         r3, r3, #8
  00648	e5933000	 ldr         r3, [r3]
  0064c	e50b3024	 str         r3, [r11, #-0x24]
  00650		 |$LN2@DmaGetLogi|
  00650		 |$LN3@DmaGetLogi|

; 276  :                 }
; 277  :             }
; 278  :             if(dwId == -1)

  00650	e51b3024	 ldr         r3, [r11, #-0x24]
  00654	e3730001	 cmn         r3, #1
  00658	1a000000	 bne         |$LN1@DmaGetLogi|

; 279  :             {
; 280  :             goto cleanUp;

  0065c	ea000003	 b           |$cleanUp$43812|
  00660		 |$LN1@DmaGetLogi|
  00660		 |$LN18@DmaGetLogi|

; 281  :             }
; 282  :         }

  00660	ea000002	 b           |$LN19@DmaGetLogi|
  00664		 |$LN14@DmaGetLogi|

; 284  :         {
; 285  :         RETAILMSG(TRUE, (L"ERROR! CEDDK: "
; 286  :             L"exception trying to enable dma repeat mode\r\n"
; 287  :             ));

  00664	e59f0028	 ldr         r0, [pc, #0x28]
  00668	eb000000	 bl          NKDbgPrintfW
  0066c	eaffffff	 b           |$LN19@DmaGetLogi|
  00670		 |$LN19@DmaGetLogi|
  00670		 |$cleanUp$43812|

; 288  :         }
; 289  :     
; 290  : cleanUp:
; 291  :     return dwId; 

  00670	e51b3024	 ldr         r3, [r11, #-0x24]
  00674	e50b3018	 str         r3, [r11, #-0x18]
  00678		 |$LN12@DmaGetLogi|

; 292  : }

  00678	e51b0018	 ldr         r0, [r11, #-0x18]
  0067c	e24bd00c	 sub         sp, r11, #0xC
  00680	e89d6800	 ldmia       sp, {r11, sp, lr}
  00684	e12fff1e	 bx          lr

			 ENDP  ; |DmaGetLogicalChannelId|

  00688		 |$LN13@DmaGetLogi|
  00688		 |$LN22@DmaGetLogi|

; 283  :     __except (EXCEPTION_EXECUTE_HANDLER)

  00688	e52de004	 str         lr, [sp, #-4]!
  0068c		 |$LN16@DmaGetLogi|
  0068c		 |$LN25@DmaGetLogi|
  0068c	e3a00001	 mov         r0, #1
  00690		 |$LN15@DmaGetLogi|
  00690	e49df004	 ldr         pc, [sp], #4
  00694		 |$LN27@DmaGetLogi|
  00694		 |$LN28@DmaGetLogi|
  00694	00000000	 DCD         |??_C@_1HG@KKAEFBLK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$CB?$AA?5?$AAC?$AAE?$AAD?$AAD?$AAK?$AA?3?$AA?5?$AAe?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAt?$AAr?$AAy?$AAi?$AAn?$AAg?$AA?5?$AAt@|
  00698		 |$LN29@DmaGetLogi|
  00698	43a608f2	 DCD         0x43a608f2
  0069c		 |$LN30@DmaGetLogi|
  0069c	43a608f0	 DCD         0x43a608f0
  006a0		 |$LN31@DmaGetLogi|
  006a0	00000000	 DCD         |g_hDmaDrv|
  006a4		 |$LN26@DmaGetLogi|
  006a4		 |$LN24@DmaGetLogi|
	EXPORT	|??_C@_1HM@LPPDCJDJ@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$CB?$AA?5?$AAC?$AAE?$AAD?$AAD?$AAK?$AA?3?$AA?5?$AAe?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAt?$AAr?$AAy?$AAi?$AAn?$AAg?$AA?5?$AAt@| [ DATA ] ; `string'
	EXPORT	|DmaInterruptDone|

  00040			 AREA	 |.pdata|, PDATA
|$T44083| DCD	|$LN21@DmaInterru|
	DCD	0xc0004105
|$T44085| DCD	|$LN11@DmaInterru|
	DCD	0x40000902

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HM@LPPDCJDJ@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$CB?$AA?5?$AAC?$AAE?$AAD?$AAD?$AAK?$AA?3?$AA?5?$AAe?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAt?$AAr?$AAy?$AAi?$AAn?$AAg?$AA?5?$AAt@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, "!", 0x0, " "
	DCB	0x0, "C", 0x0, "E", 0x0, "D", 0x0, "D", 0x0, "K", 0x0, ":"
	DCB	0x0, " ", 0x0, "e", 0x0, "x", 0x0, "c", 0x0, "e", 0x0, "p"
	DCB	0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, " ", 0x0, "t"
	DCB	0x0, "r", 0x0, "y", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, " "
	DCB	0x0, "t", 0x0, "o", 0x0, " ", 0x0, "g", 0x0, "e", 0x0, "t"
	DCB	0x0, " ", 0x0, "l", 0x0, "a", 0x0, "s", 0x0, "t", 0x0, " "
	DCB	0x0, "i", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r"
	DCB	0x0, "u", 0x0, "p", 0x0, "t", 0x0, " ", 0x0, "s", 0x0, "t"
	DCB	0x0, "a", 0x0, "t", 0x0, "u", 0x0, "s", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  0003c			 AREA	 |.xdata|, DATA
|$T44081| DCD	0x1
	DCD	|$LN15@DmaInterru|
	DCD	|$LN16@DmaInterru|
	DCD	|$LN11@DmaInterru|
	DCD	|$LN12@DmaInterru|
; Function compile flags: /Odtp

  006a4			 AREA	 |.text|, CODE, ARM

  006a4	00000000	 DCD         |__C_specific_handler|
  006a8	00000000	 DCD         |$T44081|

  006ac		 |DmaInterruptDone| PROC

; 302  : {

  006ac		 |$LN21@DmaInterru|
  006ac	e1a0c00d	 mov         r12, sp
  006b0	e92d0001	 stmdb       sp!, {r0}
  006b4	e92d5800	 stmdb       sp!, {r11, r12, lr}
  006b8	e28db00c	 add         r11, sp, #0xC
  006bc	e24dd038	 sub         sp, sp, #0x38
  006c0		 |$LN19@DmaInterru|

; 303  :     BOOL rc = FALSE;

  006c0	e3a03000	 mov         r3, #0
  006c4	e50b3034	 str         r3, [r11, #-0x34]

; 304  :     CeddkDmaContext_t *pContext = (CeddkDmaContext_t*)hDmaChannel;

  006c8	e59b3000	 ldr         r3, [r11]
  006cc	e50b3030	 str         r3, [r11, #-0x30]

; 305  :     
; 306  :     // check if dma handle is valid
; 307  :     if (ValidateDmaDriver() == FALSE || hDmaChannel == NULL)

  006d0	e59f30f0	 ldr         r3, [pc, #0xF0]
  006d4	e5933000	 ldr         r3, [r3]
  006d8	e3530000	 cmp         r3, #0
  006dc	0a000002	 beq         |$LN8@DmaInterru|
  006e0	e3a03001	 mov         r3, #1
  006e4	e50b3018	 str         r3, [r11, #-0x18]
  006e8	ea000003	 b           |$LN9@DmaInterru|
  006ec		 |$LN8@DmaInterru|
  006ec	eb000000	 bl          LoadDmaDriver
  006f0	e50b0014	 str         r0, [r11, #-0x14]
  006f4	e51b3014	 ldr         r3, [r11, #-0x14]
  006f8	e50b3018	 str         r3, [r11, #-0x18]
  006fc		 |$LN9@DmaInterru|
  006fc	e51b3018	 ldr         r3, [r11, #-0x18]
  00700	e3530000	 cmp         r3, #0
  00704	0a000002	 beq         |$LN4@DmaInterru|
  00708	e59b3000	 ldr         r3, [r11]
  0070c	e3530000	 cmp         r3, #0
  00710	1a000000	 bne         |$LN5@DmaInterru|
  00714		 |$LN4@DmaInterru|

; 308  :         {
; 309  :         goto cleanUp;

  00714	ea00001f	 b           |$cleanUp$43833|
  00718		 |$LN5@DmaInterru|
  00718		 |$LN15@DmaInterru|

; 310  :         }
; 311  : 
; 312  :     __try
; 313  :         {
; 314  :         if (pContext->cookie != DMA_HANDLE_CHANNEL_COOKIE)

  00718	e51b3030	 ldr         r3, [r11, #-0x30]
  0071c	e5932000	 ldr         r2, [r3]
  00720	e59f30a8	 ldr         r3, [pc, #0xA8]
  00724	e1520003	 cmp         r2, r3
  00728	0a000000	 beq         |$LN2@DmaInterru|

; 315  :             {
; 316  :             goto cleanUp;

  0072c	ea000019	 b           |$cleanUp$43833|
  00730		 |$LN2@DmaInterru|

; 317  :             }
; 318  : 
; 319  :         if (!DeviceIoControl(g_hDmaDrv, IOCTL_DMA_INTERRUPTDONE, 
; 320  :             (VOID*)&pContext->context, sizeof(IOCTL_DMA_INTERRUPTDONE_IN), 
; 321  :             NULL, 0, NULL, NULL))

  00730	e3a03000	 mov         r3, #0
  00734	e58d300c	 str         r3, [sp, #0xC]
  00738	e3a03000	 mov         r3, #0
  0073c	e58d3008	 str         r3, [sp, #8]
  00740	e3a03000	 mov         r3, #0
  00744	e58d3004	 str         r3, [sp, #4]
  00748	e3a03000	 mov         r3, #0
  0074c	e58d3000	 str         r3, [sp]
  00750	e3a03010	 mov         r3, #0x10
  00754	e51b2030	 ldr         r2, [r11, #-0x30]
  00758	e2822008	 add         r2, r2, #8
  0075c	e59f1068	 ldr         r1, [pc, #0x68]
  00760	e59f0060	 ldr         r0, [pc, #0x60]
  00764	e5900000	 ldr         r0, [r0]
  00768	eb000000	 bl          DeviceIoControl
  0076c	e50b0010	 str         r0, [r11, #-0x10]
  00770	e51b3010	 ldr         r3, [r11, #-0x10]
  00774	e3530000	 cmp         r3, #0
  00778	1a000000	 bne         |$LN1@DmaInterru|

; 322  :             {
; 323  :             goto cleanUp;

  0077c	ea000005	 b           |$cleanUp$43833|
  00780		 |$LN1@DmaInterru|

; 324  :             }
; 325  :         
; 326  :         rc = TRUE;

  00780	e3a03001	 mov         r3, #1
  00784	e50b3034	 str         r3, [r11, #-0x34]
  00788		 |$LN16@DmaInterru|

; 327  :         }

  00788	ea000002	 b           |$LN17@DmaInterru|
  0078c		 |$LN12@DmaInterru|

; 329  :         {
; 330  :         RETAILMSG(TRUE, (L"ERROR! CEDDK: "
; 331  :             L"exception trying to get last interrupt status\r\n"
; 332  :             ));

  0078c	e59f0030	 ldr         r0, [pc, #0x30]
  00790	eb000000	 bl          NKDbgPrintfW
  00794	eaffffff	 b           |$LN17@DmaInterru|
  00798		 |$LN17@DmaInterru|
  00798		 |$cleanUp$43833|

; 333  :         }
; 334  :     
; 335  : cleanUp:
; 336  :     return rc; 

  00798	e51b3034	 ldr         r3, [r11, #-0x34]
  0079c	e50b301c	 str         r3, [r11, #-0x1C]
  007a0		 |$LN10@DmaInterru|

; 337  : }

  007a0	e51b001c	 ldr         r0, [r11, #-0x1C]
  007a4	e24bd00c	 sub         sp, r11, #0xC
  007a8	e89d6800	 ldmia       sp, {r11, sp, lr}
  007ac	e12fff1e	 bx          lr

			 ENDP  ; |DmaInterruptDone|

  007b0		 |$LN11@DmaInterru|
  007b0		 |$LN20@DmaInterru|

; 328  :     __except (EXCEPTION_EXECUTE_HANDLER)

  007b0	e52de004	 str         lr, [sp, #-4]!
  007b4	e24dd010	 sub         sp, sp, #0x10
  007b8		 |$LN14@DmaInterru|
  007b8		 |$LN23@DmaInterru|
  007b8	e3a00001	 mov         r0, #1
  007bc		 |$LN13@DmaInterru|
  007bc	e28dd010	 add         sp, sp, #0x10
  007c0	e49df004	 ldr         pc, [sp], #4
  007c4		 |$LN25@DmaInterru|
  007c4		 |$LN26@DmaInterru|
  007c4	00000000	 DCD         |??_C@_1HM@LPPDCJDJ@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$CB?$AA?5?$AAC?$AAE?$AAD?$AAD?$AAK?$AA?3?$AA?5?$AAe?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAt?$AAr?$AAy?$AAi?$AAn?$AAg?$AA?5?$AAt@|
  007c8		 |$LN27@DmaInterru|
  007c8	00000000	 DCD         |g_hDmaDrv|
  007cc		 |$LN28@DmaInterru|
  007cc	01da0414	 DCD         0x1da0414
  007d0		 |$LN29@DmaInterru|
  007d0	43a608f0	 DCD         0x43a608f0
  007d4		 |$LN24@DmaInterru|
  007d4		 |$LN22@DmaInterru|
	EXPORT	|??_C@_1GM@DOJMJKAG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$CB?$AA?5?$AAC?$AAE?$AAD?$AAD?$AAK?$AA?3?$AA?5?$AAe?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAt?$AAr?$AAy?$AAi?$AAn?$AAg?$AA?5?$AAt@| [ DATA ] ; `string'
	EXPORT	|DmaGetLogicalChannel|

  00050			 AREA	 |.pdata|, PDATA
|$T44110| DCD	|$LN23@DmaGetLogi@2|
	DCD	0xc0004005
|$T44112| DCD	|$LN13@DmaGetLogi@2|
	DCD	0x40000701

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GM@DOJMJKAG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$CB?$AA?5?$AAC?$AAE?$AAD?$AAD?$AAK?$AA?3?$AA?5?$AAe?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAt?$AAr?$AAy?$AAi?$AAn?$AAg?$AA?5?$AAt@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, "!", 0x0, " "
	DCB	0x0, "C", 0x0, "E", 0x0, "D", 0x0, "D", 0x0, "K", 0x0, ":"
	DCB	0x0, " ", 0x0, "e", 0x0, "x", 0x0, "c", 0x0, "e", 0x0, "p"
	DCB	0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, " ", 0x0, "t"
	DCB	0x0, "r", 0x0, "y", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, " "
	DCB	0x0, "t", 0x0, "o", 0x0, " ", 0x0, "g", 0x0, "e", 0x0, "t"
	DCB	0x0, " ", 0x0, "d", 0x0, "m", 0x0, "a", 0x0, " ", 0x0, "r"
	DCB	0x0, "e", 0x0, "g", 0x0, "i", 0x0, "s", 0x0, "t", 0x0, "e"
	DCB	0x0, "r", 0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00050			 AREA	 |.xdata|, DATA
|$T44108| DCD	0x1
	DCD	|$LN17@DmaGetLogi@2|
	DCD	|$LN18@DmaGetLogi@2|
	DCD	|$LN13@DmaGetLogi@2|
	DCD	|$LN14@DmaGetLogi@2|
; Function compile flags: /Odtp

  007d4			 AREA	 |.text|, CODE, ARM

  007d4	00000000	 DCD         |__C_specific_handler|
  007d8	00000000	 DCD         |$T44108|

  007dc		 |DmaGetLogicalChannel| PROC

; 347  : {

  007dc		 |$LN23@DmaGetLogi@2|
  007dc	e1a0c00d	 mov         r12, sp
  007e0	e92d0001	 stmdb       sp!, {r0}
  007e4	e92d5800	 stmdb       sp!, {r11, r12, lr}
  007e8	e28db00c	 add         r11, sp, #0xC
  007ec	e24dd018	 sub         sp, sp, #0x18
  007f0		 |$LN21@DmaGetLogi@2|

; 348  :     OMAP_DMA_LC_REGS* pChannel = NULL;

  007f0	e3a03000	 mov         r3, #0
  007f4	e50b3024	 str         r3, [r11, #-0x24]

; 349  :     
; 350  :     // check if dma handle is valid
; 351  :     if (ValidateDmaDriver() == FALSE || hDmaChannel == NULL)

  007f8	e59f30f4	 ldr         r3, [pc, #0xF4]
  007fc	e5933000	 ldr         r3, [r3]
  00800	e3530000	 cmp         r3, #0
  00804	0a000002	 beq         |$LN10@DmaGetLogi@2|
  00808	e3a03001	 mov         r3, #1
  0080c	e50b3014	 str         r3, [r11, #-0x14]
  00810	ea000003	 b           |$LN11@DmaGetLogi@2|
  00814		 |$LN10@DmaGetLogi@2|
  00814	eb000000	 bl          LoadDmaDriver
  00818	e50b0010	 str         r0, [r11, #-0x10]
  0081c	e51b3010	 ldr         r3, [r11, #-0x10]
  00820	e50b3014	 str         r3, [r11, #-0x14]
  00824		 |$LN11@DmaGetLogi@2|
  00824	e51b3014	 ldr         r3, [r11, #-0x14]
  00828	e3530000	 cmp         r3, #0
  0082c	0a000002	 beq         |$LN6@DmaGetLogi@2|
  00830	e59b3000	 ldr         r3, [r11]
  00834	e3530000	 cmp         r3, #0
  00838	1a000000	 bne         |$LN7@DmaGetLogi@2|
  0083c		 |$LN6@DmaGetLogi@2|

; 352  :         {
; 353  :         goto cleanUp;

  0083c	ea000020	 b           |$cleanUp$43852|
  00840		 |$LN7@DmaGetLogi@2|
  00840		 |$LN17@DmaGetLogi@2|

; 354  :         }
; 355  : 
; 356  :     __try
; 357  :         {
; 358  :             {
; 359  :             CeddkDmaContext_t *pContext = (CeddkDmaContext_t*)hDmaChannel;

  00840	e59b3000	 ldr         r3, [r11]
  00844	e50b3020	 str         r3, [r11, #-0x20]

; 360  : 
; 361  :             if (pContext->cookie == DMA_HANDLE_CHANNEL_COOKIE)

  00848	e51b3020	 ldr         r3, [r11, #-0x20]
  0084c	e5932000	 ldr         r2, [r3]
  00850	e59f3098	 ldr         r3, [pc, #0x98]
  00854	e1520003	 cmp         r2, r3
  00858	1a000003	 bne         |$LN4@DmaGetLogi@2|

; 362  :                 {
; 363  :                 pChannel = pContext->pDmaChannel;

  0085c	e51b3020	 ldr         r3, [r11, #-0x20]
  00860	e2833004	 add         r3, r3, #4
  00864	e5933000	 ldr         r3, [r3]
  00868	e50b3024	 str         r3, [r11, #-0x24]
  0086c		 |$LN4@DmaGetLogi@2|

; 364  :                 }
; 365  :             }
; 366  :             if(pChannel == NULL)

  0086c	e51b3024	 ldr         r3, [r11, #-0x24]
  00870	e3530000	 cmp         r3, #0
  00874	1a00000a	 bne         |$LN3@DmaGetLogi@2|

; 367  :                 {
; 368  :                 CeddkDmaDIChannelContext_t *pContext = (CeddkDmaDIChannelContext_t*)hDmaChannel;

  00878	e59b3000	 ldr         r3, [r11]
  0087c	e50b301c	 str         r3, [r11, #-0x1C]

; 369  : 
; 370  :                 if(pContext->cookie == DMA_DEDICATED_CHANNEL_HANDLE_COOKIE)

  00880	e51b301c	 ldr         r3, [r11, #-0x1C]
  00884	e5932000	 ldr         r2, [r3]
  00888	e59f305c	 ldr         r3, [pc, #0x5C]
  0088c	e1520003	 cmp         r2, r3
  00890	1a000003	 bne         |$LN2@DmaGetLogi@2|

; 371  :                 {
; 372  :                 pChannel = pContext->pDmaChannel;

  00894	e51b301c	 ldr         r3, [r11, #-0x1C]
  00898	e2833004	 add         r3, r3, #4
  0089c	e5933000	 ldr         r3, [r3]
  008a0	e50b3024	 str         r3, [r11, #-0x24]
  008a4		 |$LN2@DmaGetLogi@2|
  008a4		 |$LN3@DmaGetLogi@2|

; 373  :         }
; 374  :             }
; 375  :             if(pChannel == NULL)

  008a4	e51b3024	 ldr         r3, [r11, #-0x24]
  008a8	e3530000	 cmp         r3, #0
  008ac	1a000000	 bne         |$LN1@DmaGetLogi@2|

; 376  :             {
; 377  :             goto cleanUp;

  008b0	ea000003	 b           |$cleanUp$43852|
  008b4		 |$LN1@DmaGetLogi@2|
  008b4		 |$LN18@DmaGetLogi@2|

; 378  :             }
; 379  :         }

  008b4	ea000002	 b           |$LN19@DmaGetLogi@2|
  008b8		 |$LN14@DmaGetLogi@2|

; 381  :         {
; 382  :         RETAILMSG(TRUE, (L"ERROR! CEDDK: "
; 383  :             L"exception trying to get dma registers\r\n"
; 384  :             ));

  008b8	e59f0028	 ldr         r0, [pc, #0x28]
  008bc	eb000000	 bl          NKDbgPrintfW
  008c0	eaffffff	 b           |$LN19@DmaGetLogi@2|
  008c4		 |$LN19@DmaGetLogi@2|
  008c4		 |$cleanUp$43852|

; 385  :         }
; 386  :     
; 387  : cleanUp:
; 388  :     return (void*)pChannel;

  008c4	e51b3024	 ldr         r3, [r11, #-0x24]
  008c8	e50b3018	 str         r3, [r11, #-0x18]
  008cc		 |$LN12@DmaGetLogi@2|

; 389  : }

  008cc	e51b0018	 ldr         r0, [r11, #-0x18]
  008d0	e24bd00c	 sub         sp, r11, #0xC
  008d4	e89d6800	 ldmia       sp, {r11, sp, lr}
  008d8	e12fff1e	 bx          lr

			 ENDP  ; |DmaGetLogicalChannel|

  008dc		 |$LN13@DmaGetLogi@2|
  008dc		 |$LN22@DmaGetLogi@2|

; 380  :     __except (EXCEPTION_EXECUTE_HANDLER)

  008dc	e52de004	 str         lr, [sp, #-4]!
  008e0		 |$LN16@DmaGetLogi@2|
  008e0		 |$LN25@DmaGetLogi@2|
  008e0	e3a00001	 mov         r0, #1
  008e4		 |$LN15@DmaGetLogi@2|
  008e4	e49df004	 ldr         pc, [sp], #4
  008e8		 |$LN27@DmaGetLogi@2|
  008e8		 |$LN28@DmaGetLogi@2|
  008e8	00000000	 DCD         |??_C@_1GM@DOJMJKAG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$CB?$AA?5?$AAC?$AAE?$AAD?$AAD?$AAK?$AA?3?$AA?5?$AAe?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAt?$AAr?$AAy?$AAi?$AAn?$AAg?$AA?5?$AAt@|
  008ec		 |$LN29@DmaGetLogi@2|
  008ec	43a608f2	 DCD         0x43a608f2
  008f0		 |$LN30@DmaGetLogi@2|
  008f0	43a608f0	 DCD         0x43a608f0
  008f4		 |$LN31@DmaGetLogi@2|
  008f4	00000000	 DCD         |g_hDmaDrv|
  008f8		 |$LN26@DmaGetLogi@2|
  008f8		 |$LN24@DmaGetLogi@2|
	EXPORT	|??_C@_1FI@DFDPOLAA@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$CB?$AA?5?$AAC?$AAE?$AAD?$AAD?$AAK?$AA?3?$AA?5?$AAe?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAD?$AAm?$AAa?$AAD?$AAi?$AAs?$AAa?$AAb@| [ DATA ] ; `string'
	EXPORT	|DmaDisableStandby|

  00060			 AREA	 |.pdata|, PDATA
|$T44141| DCD	|$LN26@DmaDisable|
	DCD	0xc0005e05
|$T44143| DCD	|$LN16@DmaDisable|
	DCD	0x40000a02

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FI@DFDPOLAA@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$CB?$AA?5?$AAC?$AAE?$AAD?$AAD?$AAK?$AA?3?$AA?5?$AAe?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAD?$AAm?$AAa?$AAD?$AAi?$AAs?$AAa?$AAb@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, "!", 0x0, " "
	DCB	0x0, "C", 0x0, "E", 0x0, "D", 0x0, "D", 0x0, "K", 0x0, ":"
	DCB	0x0, " ", 0x0, "e", 0x0, "x", 0x0, "c", 0x0, "e", 0x0, "p"
	DCB	0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, " ", 0x0, "D"
	DCB	0x0, "m", 0x0, "a", 0x0, "D", 0x0, "i", 0x0, "s", 0x0, "a"
	DCB	0x0, "b", 0x0, "l", 0x0, "e", 0x0, "S", 0x0, "t", 0x0, "a"
	DCB	0x0, "n", 0x0, "d", 0x0, "b", 0x0, "y", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00064			 AREA	 |.xdata|, DATA
|$T44139| DCD	0x1
	DCD	|$LN20@DmaDisable|
	DCD	|$LN21@DmaDisable|
	DCD	|$LN16@DmaDisable|
	DCD	|$LN17@DmaDisable|
; Function compile flags: /Odtp

  008f8			 AREA	 |.text|, CODE, ARM

  008f8	00000000	 DCD         |__C_specific_handler|
  008fc	00000000	 DCD         |$T44139|

  00900		 |DmaDisableStandby| PROC

; 399  : {

  00900		 |$LN26@DmaDisable|
  00900	e1a0c00d	 mov         r12, sp
  00904	e92d0003	 stmdb       sp!, {r0, r1}
  00908	e92d5800	 stmdb       sp!, {r11, r12, lr}
  0090c	e28db00c	 add         r11, sp, #0xC
  00910	e24dd04c	 sub         sp, sp, #0x4C
  00914		 |$LN24@DmaDisable|

; 400  :     BOOL bDelicatedChannel = FALSE;

  00914	e3a03000	 mov         r3, #0
  00918	e50b3030	 str         r3, [r11, #-0x30]

; 401  :     BOOL rc = FALSE;

  0091c	e3a03000	 mov         r3, #0
  00920	e50b3048	 str         r3, [r11, #-0x48]

; 402  :     IOCTL_DMA_DISABLESTANDBY_IN IoctlInput;
; 403  :     CeddkDmaContext_t *pContext = (CeddkDmaContext_t*)hDmaChannel;

  00924	e59b3000	 ldr         r3, [r11]
  00928	e50b3034	 str         r3, [r11, #-0x34]

; 404  :     CeddkDmaDIChannelContext_t  *pContext1= NULL;

  0092c	e3a03000	 mov         r3, #0
  00930	e50b3038	 str         r3, [r11, #-0x38]

; 405  :     
; 406  :     // check if dma handle is valid
; 407  :     if (ValidateDmaDriver() == FALSE || hDmaChannel == NULL)

  00934	e59f3154	 ldr         r3, [pc, #0x154]
  00938	e5933000	 ldr         r3, [r3]
  0093c	e3530000	 cmp         r3, #0
  00940	0a000002	 beq         |$LN13@DmaDisable|
  00944	e3a03001	 mov         r3, #1
  00948	e50b3018	 str         r3, [r11, #-0x18]
  0094c	ea000003	 b           |$LN14@DmaDisable|
  00950		 |$LN13@DmaDisable|
  00950	eb000000	 bl          LoadDmaDriver
  00954	e50b0014	 str         r0, [r11, #-0x14]
  00958	e51b3014	 ldr         r3, [r11, #-0x14]
  0095c	e50b3018	 str         r3, [r11, #-0x18]
  00960		 |$LN14@DmaDisable|
  00960	e51b3018	 ldr         r3, [r11, #-0x18]
  00964	e3530000	 cmp         r3, #0
  00968	0a000002	 beq         |$LN9@DmaDisable|
  0096c	e59b3000	 ldr         r3, [r11]
  00970	e3530000	 cmp         r3, #0
  00974	1a000000	 bne         |$LN10@DmaDisable|
  00978		 |$LN9@DmaDisable|

; 408  :         {
; 409  :         goto cleanUp;

  00978	ea000038	 b           |$cleanUp$43882|
  0097c		 |$LN10@DmaDisable|
  0097c		 |$LN20@DmaDisable|

; 410  :         }
; 411  : 
; 412  :     __try
; 413  :         {
; 414  :         if (pContext->cookie != DMA_HANDLE_CHANNEL_COOKIE)

  0097c	e51b3034	 ldr         r3, [r11, #-0x34]
  00980	e5932000	 ldr         r2, [r3]
  00984	e59f3110	 ldr         r3, [pc, #0x110]
  00988	e1520003	 cmp         r2, r3
  0098c	0a00000b	 beq         |$LN7@DmaDisable|

; 415  :             {
; 416  :             pContext1 = (CeddkDmaDIChannelContext_t  *) hDmaChannel;

  00990	e59b3000	 ldr         r3, [r11]
  00994	e50b3038	 str         r3, [r11, #-0x38]

; 417  :             if (pContext1->cookie == DMA_DEDICATED_CHANNEL_HANDLE_COOKIE)

  00998	e51b3038	 ldr         r3, [r11, #-0x38]
  0099c	e5932000	 ldr         r2, [r3]
  009a0	e59f30f0	 ldr         r3, [pc, #0xF0]
  009a4	e1520003	 cmp         r2, r3
  009a8	1a000002	 bne         |$LN6@DmaDisable|

; 418  :                 {
; 419  :                 bDelicatedChannel = TRUE;

  009ac	e3a03001	 mov         r3, #1
  009b0	e50b3030	 str         r3, [r11, #-0x30]

; 420  :                 }
; 421  :                 else

  009b4	ea000000	 b           |$LN5@DmaDisable|
  009b8		 |$LN6@DmaDisable|

; 422  :                 {
; 423  :                 goto cleanUp;

  009b8	ea000028	 b           |$cleanUp$43882|
  009bc		 |$LN5@DmaDisable|

; 424  :                 }
; 425  :             }
; 426  :             else

  009bc	ea000001	 b           |$LN4@DmaDisable|
  009c0		 |$LN7@DmaDisable|

; 427  :             {
; 428  :                 bDelicatedChannel = FALSE;

  009c0	e3a03000	 mov         r3, #0
  009c4	e50b3030	 str         r3, [r11, #-0x30]
  009c8		 |$LN4@DmaDisable|

; 429  :             }
; 430  : 
; 431  :         IoctlInput.bNoStandby = noStandby;

  009c8	e59b3004	 ldr         r3, [r11, #4]
  009cc	e50b3040	 str         r3, [r11, #-0x40]

; 432  :         IoctlInput.bDelicatedChannel = bDelicatedChannel;

  009d0	e51b3030	 ldr         r3, [r11, #-0x30]
  009d4	e50b303c	 str         r3, [r11, #-0x3C]

; 433  : 
; 434  :         if (bDelicatedChannel)

  009d8	e51b3030	 ldr         r3, [r11, #-0x30]
  009dc	e3530000	 cmp         r3, #0
  009e0	0a000002	 beq         |$LN3@DmaDisable|

; 435  :             {
; 436  :             IoctlInput.pContext = (void *) pContext1;

  009e4	e51b3038	 ldr         r3, [r11, #-0x38]
  009e8	e50b3044	 str         r3, [r11, #-0x44]

; 437  :             }
; 438  :             else

  009ec	ea000002	 b           |$LN2@DmaDisable|
  009f0		 |$LN3@DmaDisable|

; 439  :             {
; 440  :             IoctlInput.pContext = (void *) &pContext->context;

  009f0	e51b3034	 ldr         r3, [r11, #-0x34]
  009f4	e2833008	 add         r3, r3, #8
  009f8	e50b3044	 str         r3, [r11, #-0x44]
  009fc		 |$LN2@DmaDisable|

; 441  :             }
; 442  :         if (!DeviceIoControl(g_hDmaDrv, IOCTL_DMA_DISABLESTANDBY, 
; 443  :             (VOID*)&IoctlInput, sizeof(IOCTL_DMA_DISABLESTANDBY_IN),
; 444  :             NULL, 0, NULL, NULL))

  009fc	e3a03000	 mov         r3, #0
  00a00	e58d300c	 str         r3, [sp, #0xC]
  00a04	e3a03000	 mov         r3, #0
  00a08	e58d3008	 str         r3, [sp, #8]
  00a0c	e3a03000	 mov         r3, #0
  00a10	e58d3004	 str         r3, [sp, #4]
  00a14	e3a03000	 mov         r3, #0
  00a18	e58d3000	 str         r3, [sp]
  00a1c	e3a0300c	 mov         r3, #0xC
  00a20	e24b2044	 sub         r2, r11, #0x44
  00a24	e59f1068	 ldr         r1, [pc, #0x68]
  00a28	e59f0060	 ldr         r0, [pc, #0x60]
  00a2c	e5900000	 ldr         r0, [r0]
  00a30	eb000000	 bl          DeviceIoControl
  00a34	e50b0010	 str         r0, [r11, #-0x10]
  00a38	e51b3010	 ldr         r3, [r11, #-0x10]
  00a3c	e3530000	 cmp         r3, #0
  00a40	1a000000	 bne         |$LN1@DmaDisable|

; 445  :             {
; 446  :             goto cleanUp;

  00a44	ea000005	 b           |$cleanUp$43882|
  00a48		 |$LN1@DmaDisable|

; 447  :             }
; 448  : 
; 449  :         rc = TRUE;

  00a48	e3a03001	 mov         r3, #1
  00a4c	e50b3048	 str         r3, [r11, #-0x48]
  00a50		 |$LN21@DmaDisable|

; 450  :         }

  00a50	ea000002	 b           |$LN22@DmaDisable|
  00a54		 |$LN17@DmaDisable|

; 452  :         {
; 453  :         RETAILMSG(TRUE, (L"ERROR! CEDDK: "
; 454  :             L"exception DmaDisableStandby\r\n"
; 455  :             ));

  00a54	e59f0030	 ldr         r0, [pc, #0x30]
  00a58	eb000000	 bl          NKDbgPrintfW
  00a5c	eaffffff	 b           |$LN22@DmaDisable|
  00a60		 |$LN22@DmaDisable|
  00a60		 |$cleanUp$43882|

; 456  :         }
; 457  : 
; 458  : cleanUp:
; 459  :     return rc; 

  00a60	e51b3048	 ldr         r3, [r11, #-0x48]
  00a64	e50b301c	 str         r3, [r11, #-0x1C]
  00a68		 |$LN15@DmaDisable|

; 460  : }

  00a68	e51b001c	 ldr         r0, [r11, #-0x1C]
  00a6c	e24bd00c	 sub         sp, r11, #0xC
  00a70	e89d6800	 ldmia       sp, {r11, sp, lr}
  00a74	e12fff1e	 bx          lr

			 ENDP  ; |DmaDisableStandby|

  00a78		 |$LN16@DmaDisable|
  00a78		 |$LN25@DmaDisable|

; 451  :     __except (EXCEPTION_EXECUTE_HANDLER)

  00a78	e52de004	 str         lr, [sp, #-4]!
  00a7c	e24dd010	 sub         sp, sp, #0x10
  00a80		 |$LN19@DmaDisable|
  00a80		 |$LN28@DmaDisable|
  00a80	e3a00001	 mov         r0, #1
  00a84		 |$LN18@DmaDisable|
  00a84	e28dd010	 add         sp, sp, #0x10
  00a88	e49df004	 ldr         pc, [sp], #4
  00a8c		 |$LN30@DmaDisable|
  00a8c		 |$LN31@DmaDisable|
  00a8c	00000000	 DCD         |??_C@_1FI@DFDPOLAA@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$CB?$AA?5?$AAC?$AAE?$AAD?$AAD?$AAK?$AA?3?$AA?5?$AAe?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAD?$AAm?$AAa?$AAD?$AAi?$AAs?$AAa?$AAb@|
  00a90		 |$LN32@DmaDisable|
  00a90	00000000	 DCD         |g_hDmaDrv|
  00a94		 |$LN33@DmaDisable|
  00a94	01da0418	 DCD         0x1da0418
  00a98		 |$LN34@DmaDisable|
  00a98	43a608f2	 DCD         0x43a608f2
  00a9c		 |$LN35@DmaDisable|
  00a9c	43a608f0	 DCD         0x43a608f0
  00aa0		 |$LN29@DmaDisable|
  00aa0		 |$LN27@DmaDisable|
	END
