; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\CEDDK\DMA\dma_dedicated.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.data|, DATA
|?dwDmaStartIrq@?1??DmaDiAllocateInterrupt@@9@9| DCD 0xffffffff ; `DmaDiAllocateInterrupt'::`2'::dwDmaStartIrq

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|??_C@_1GI@BNFFDFCM@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HE@BELIOLMC@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAm?$AAa@| [ DATA ] ; `string'
	EXPORT	|??_C@_19FOCAGMKL@?$AAI?$AAR?$AAQ?$AA0?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FO@GCGOBMBN@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAM?$AAm?$AAM?$AAa?$AAp?$AAI?$AAo?$AAS@| [ DATA ] ; `string'
	EXPORT	|??_C@_1JA@KILAOCLM@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAD?$AAM@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GI@PLLCPBPA@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAm?$AAe?$AAm?$AAo?$AAr?$AAy?$AA?5?$AAa@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GK@BAJGPPFD@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAN?$AAu?$AAm?$AAb?$AAe?$AAr?$AAO?$AAf@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GI@NOOLDBAN@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAV?$AAa?$AAl?$AAi?$AAd?$AAa?$AAt?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1KO@IEMELEG@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@| [ DATA ] ; `string'
	EXPORT	|DmaDiAllocateInterrupt|
	IMPORT	|InterruptInitialize|
	IMPORT	|KernelIoControl|
	IMPORT	|GetIrqByDevice|
	IMPORT	|SOCGetDMADevice|
	IMPORT	|MmMapIoSpace|
	IMPORT	|GetLastError|
	IMPORT	|DeviceIoControl|
	IMPORT	|LocalAlloc|
	IMPORT	|SetLastError|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|LoadDmaDriver|
	IMPORT	|g_hDmaDrv|

  00000			 AREA	 |.pdata|, PDATA
|$T44286| DCD	|$LN26@DmaDiAlloc|
	DCD	0x40019104
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\ceddk\dma\dma_dedicated.c

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GI@BNFFDFCM@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt@| DCB "D"
	DCB	0x0, "m", 0x0, "a", 0x0, "D", 0x0, "i", 0x0, "A", 0x0, "l"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, "I", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r"
	DCB	0x0, "u", 0x0, "p", 0x0, "t", 0x0, " ", 0x0, "I", 0x0, "n"
	DCB	0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p"
	DCB	0x0, "t", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i"
	DCB	0x0, "a", 0x0, "l", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, " "
	DCB	0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HE@BELIOLMC@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAm?$AAa@| DCB "D"
	DCB	0x0, "m", 0x0, "a", 0x0, "D", 0x0, "i", 0x0, "A", 0x0, "l"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, "I", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r"
	DCB	0x0, "u", 0x0, "p", 0x0, "t", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "m"
	DCB	0x0, "a", 0x0, "p", 0x0, " ", 0x0, "D", 0x0, "M", 0x0, "A"
	DCB	0x0, " ", 0x0, "i", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r"
	DCB	0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t", 0x0, "(", 0x0, "i"
	DCB	0x0, "r", 0x0, "q", 0x0, "=", 0x0, "%", 0x0, "d", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_19FOCAGMKL@?$AAI?$AAR?$AAQ?$AA0?$AA?$AA@| DCB "I", 0x0, "R", 0x0, "Q"
	DCB	0x0, "0", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FO@GCGOBMBN@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAM?$AAm?$AAM?$AAa?$AAp?$AAI?$AAo?$AAS@| DCB "D"
	DCB	0x0, "m", 0x0, "a", 0x0, "D", 0x0, "i", 0x0, "A", 0x0, "l"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, "I", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r"
	DCB	0x0, "u", 0x0, "p", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "M"
	DCB	0x0, "m", 0x0, "M", 0x0, "a", 0x0, "p", 0x0, "I", 0x0, "o"
	DCB	0x0, "S", 0x0, "p", 0x0, "a", 0x0, "c", 0x0, "e", 0x0, " "
	DCB	0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "u", 0x0, "r"
	DCB	0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JA@KILAOCLM@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAD?$AAM@| DCB "D"
	DCB	0x0, "m", 0x0, "a", 0x0, "D", 0x0, "i", 0x0, "A", 0x0, "l"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, "I", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r"
	DCB	0x0, "u", 0x0, "p", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "I"
	DCB	0x0, "O", 0x0, "C", 0x0, "T", 0x0, "L", 0x0, "_", 0x0, "D"
	DCB	0x0, "M", 0x0, "A", 0x0, "_", 0x0, "R", 0x0, "E", 0x0, "Q"
	DCB	0x0, "U", 0x0, "E", 0x0, "S", 0x0, "T", 0x0, "_", 0x0, "D"
	DCB	0x0, "E", 0x0, "D", 0x0, "I", 0x0, "C", 0x0, "A", 0x0, "T"
	DCB	0x0, "E", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "N", 0x0, "T"
	DCB	0x0, "E", 0x0, "R", 0x0, "R", 0x0, "U", 0x0, "P", 0x0, "T"
	DCB	0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "u"
	DCB	0x0, "r", 0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GI@PLLCPBPA@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAm?$AAe?$AAm?$AAo?$AAr?$AAy?$AA?5?$AAa@| DCB "D"
	DCB	0x0, "m", 0x0, "a", 0x0, "D", 0x0, "i", 0x0, "A", 0x0, "l"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, "I", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r"
	DCB	0x0, "u", 0x0, "p", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "m"
	DCB	0x0, "e", 0x0, "m", 0x0, "o", 0x0, "r", 0x0, "y", 0x0, " "
	DCB	0x0, "a", 0x0, "l", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a"
	DCB	0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, " ", 0x0, "f"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, "u", 0x0, "r", 0x0, "e"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GK@BAJGPPFD@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAN?$AAu?$AAm?$AAb?$AAe?$AAr?$AAO?$AAf@| DCB "D"
	DCB	0x0, "m", 0x0, "a", 0x0, "D", 0x0, "i", 0x0, "A", 0x0, "l"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, "I", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r"
	DCB	0x0, "u", 0x0, "p", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "N"
	DCB	0x0, "u", 0x0, "m", 0x0, "b", 0x0, "e", 0x0, "r", 0x0, "O"
	DCB	0x0, "f", 0x0, "C", 0x0, "h", 0x0, "a", 0x0, "n", 0x0, "n"
	DCB	0x0, "e", 0x0, "l", 0x0, "s", 0x0, " ", 0x0, "t", 0x0, "o"
	DCB	0x0, "o", 0x0, " ", 0x0, "l", 0x0, "a", 0x0, "r", 0x0, "g"
	DCB	0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GI@NOOLDBAN@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAV?$AAa?$AAl?$AAi?$AAd?$AAa?$AAt?$AAe@| DCB "D"
	DCB	0x0, "m", 0x0, "a", 0x0, "D", 0x0, "i", 0x0, "A", 0x0, "l"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, "I", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r"
	DCB	0x0, "u", 0x0, "p", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "V"
	DCB	0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d", 0x0, "a", 0x0, "t"
	DCB	0x0, "e", 0x0, "D", 0x0, "m", 0x0, "a", 0x0, "D", 0x0, "r"
	DCB	0x0, "i", 0x0, "v", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, "F"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, "u", 0x0, "r", 0x0, "e"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "%", 0x0, "s", 0x0, " ", 0x0, "l", 0x0, "i", 0x0, "n"
	DCB	0x0, "e", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ":", 0x0, " "
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KO@IEMELEG@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@| DCB "C"
	DCB	0x0, ":", 0x0, "\\", 0x0, "W", 0x0, "I", 0x0, "N", 0x0, "C"
	DCB	0x0, "E", 0x0, "6", 0x0, "0", 0x0, "0", 0x0, "\\", 0x0, "P"
	DCB	0x0, "L", 0x0, "A", 0x0, "T", 0x0, "F", 0x0, "O", 0x0, "R"
	DCB	0x0, "M", 0x0, "\\", 0x0, "C", 0x0, "O", 0x0, "M", 0x0, "M"
	DCB	0x0, "O", 0x0, "N", 0x0, "\\", 0x0, "S", 0x0, "R", 0x0, "C"
	DCB	0x0, "\\", 0x0, "S", 0x0, "O", 0x0, "C", 0x0, "\\", 0x0, "C"
	DCB	0x0, "O", 0x0, "M", 0x0, "M", 0x0, "O", 0x0, "N", 0x0, "_"
	DCB	0x0, "T", 0x0, "I", 0x0, "_", 0x0, "V", 0x0, "1", 0x0, "\\"
	DCB	0x0, "C", 0x0, "O", 0x0, "M", 0x0, "M", 0x0, "O", 0x0, "N"
	DCB	0x0, "_", 0x0, "T", 0x0, "I", 0x0, "\\", 0x0, "C", 0x0, "E"
	DCB	0x0, "D", 0x0, "D", 0x0, "K", 0x0, "\\", 0x0, "D", 0x0, "M"
	DCB	0x0, "A", 0x0, "\\", 0x0, ".", 0x0, "\\", 0x0, "d", 0x0, "m"
	DCB	0x0, "a", 0x0, "_", 0x0, "d", 0x0, "e", 0x0, "d", 0x0, "i"
	DCB	0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, "d", 0x0, "."
	DCB	0x0, "c", 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DmaDiAllocateInterrupt| PROC

; 64   : {

  00000		 |$LN26@DmaDiAlloc|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d000f	 stmdb       sp!, {r0 - r3}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd084	 sub         sp, sp, #0x84
  00010		 |$M44283|

; 65   :     BOOL rc = FALSE;

  00010	e3a03000	 mov         r3, #0
  00014	e58d3010	 str         r3, [sp, #0x10]

; 66   :     static int dwDmaStartIrq = -1;
; 67   :     CeddkDmaDIContext_t *pContext = NULL;

  00018	e3a03000	 mov         r3, #0
  0001c	e58d3020	 str         r3, [sp, #0x20]

; 68   :     DWORD i;
; 69   :     PHYSICAL_ADDRESS pa;
; 70   :     
; 71   :     // check if dma handle is valid
; 72   :     if (ValidateDmaDriver() == FALSE)

  00020	e59f3608	 ldr         r3, [pc, #0x608]
  00024	e5933000	 ldr         r3, [r3]
  00028	e3530000	 cmp         r3, #0
  0002c	0a000002	 beq         |$LN22@DmaDiAlloc|
  00030	e3a03001	 mov         r3, #1
  00034	e58d3058	 str         r3, [sp, #0x58]
  00038	ea000003	 b           |$LN23@DmaDiAlloc|
  0003c		 |$LN22@DmaDiAlloc|
  0003c	eb000000	 bl          LoadDmaDriver
  00040	e58d005c	 str         r0, [sp, #0x5C]
  00044	e59d305c	 ldr         r3, [sp, #0x5C]
  00048	e58d3058	 str         r3, [sp, #0x58]
  0004c		 |$LN23@DmaDiAlloc|
  0004c	e59d3058	 ldr         r3, [sp, #0x58]
  00050	e3530000	 cmp         r3, #0
  00054	1a000009	 bne         |$LN19@DmaDiAlloc|

; 73   :         {
; 74   :         ERRORMSG(TRUE, (
; 75   :                         L"DmaDiAllocateInterrupt: ValidateDmaDriver Failure\r\n"
; 76   :                        ));

  00058	e3a0204c	 mov         r2, #0x4C
  0005c	e59f15ac	 ldr         r1, [pc, #0x5AC]
  00060	e59f05a4	 ldr         r0, [pc, #0x5A4]
  00064	eb000000	 bl          NKDbgPrintfW
  00068	e59f05d0	 ldr         r0, [pc, #0x5D0]
  0006c	eb000000	 bl          NKDbgPrintfW

; 77   :         SetLastError(ERROR_DLL_INIT_FAILED);

  00070	e3a00b01	 mov         r0, #1, 22
  00074	e380005a	 orr         r0, r0, #0x5A
  00078	eb000000	 bl          SetLastError

; 78   :         goto cleanUp;

  0007c	ea000150	 b           |$cleanUp$44044|
  00080		 |$LN19@DmaDiAlloc|

; 79   :         }
; 80   : 
; 81   :     // ensure valid request
; 82   :     if(NumberOfChannels > OMAP_DMA_LOGICAL_CHANNEL_COUNT)

  00080	e59d308c	 ldr         r3, [sp, #0x8C]
  00084	e3530020	 cmp         r3, #0x20
  00088	9a000008	 bls         |$LN18@DmaDiAlloc|

; 83   :         {
; 84   :         ERRORMSG(TRUE, (
; 85   :                         L"DmaDiAllocateInterrupt: NumberOfChannels too large\r\n"
; 86   :                        ));

  0008c	e3a02056	 mov         r2, #0x56
  00090	e59f1578	 ldr         r1, [pc, #0x578]
  00094	e59f0570	 ldr         r0, [pc, #0x570]
  00098	eb000000	 bl          NKDbgPrintfW
  0009c	e59f0598	 ldr         r0, [pc, #0x598]
  000a0	eb000000	 bl          NKDbgPrintfW

; 87   :         SetLastError(ERROR_INVALID_PARAMETER);

  000a4	e3a00057	 mov         r0, #0x57
  000a8	eb000000	 bl          SetLastError

; 88   :         goto cleanUp;

  000ac	ea000144	 b           |$cleanUp$44044|
  000b0		 |$LN18@DmaDiAlloc|

; 89   :         }
; 90   : 
; 91   :     // allocate array of dma dedicated interrupt context
; 92   :     pContext = (CeddkDmaDIContext_t*)LocalAlloc(LPTR, sizeof(CeddkDmaDIContext_t));

  000b0	e3a0102c	 mov         r1, #0x2C
  000b4	e3a00040	 mov         r0, #0x40
  000b8	eb000000	 bl          LocalAlloc
  000bc	e58d0060	 str         r0, [sp, #0x60]
  000c0	e59d3060	 ldr         r3, [sp, #0x60]
  000c4	e58d3020	 str         r3, [sp, #0x20]

; 93   :     if (pContext == NULL)

  000c8	e59d3020	 ldr         r3, [sp, #0x20]
  000cc	e3530000	 cmp         r3, #0
  000d0	1a000006	 bne         |$LN17@DmaDiAlloc|

; 94   :         {
; 95   :         ERRORMSG(TRUE, (
; 96   :                         L"DmaDiAllocateInterrupt: memory allocation failure\r\n"
; 97   :                        ));

  000d4	e3a02061	 mov         r2, #0x61
  000d8	e59f1530	 ldr         r1, [pc, #0x530]
  000dc	e59f0528	 ldr         r0, [pc, #0x528]
  000e0	eb000000	 bl          NKDbgPrintfW
  000e4	e59f053c	 ldr         r0, [pc, #0x53C]
  000e8	eb000000	 bl          NKDbgPrintfW

; 98   :         //last error already set
; 99   :         goto cleanUp;

  000ec	ea000134	 b           |$cleanUp$44044|
  000f0		 |$LN17@DmaDiAlloc|

; 100  :         }
; 101  :     pContext->cookie = DMA_DEDICATED_INTERRUPT_HANDLE_COOKIE;

  000f0	e59d2020	 ldr         r2, [sp, #0x20]
  000f4	e59f353c	 ldr         r3, [pc, #0x53C]
  000f8	e5823000	 str         r3, [r2]

; 102  :     pContext->NumberOfChannels = NumberOfChannels;

  000fc	e59d3020	 ldr         r3, [sp, #0x20]
  00100	e2832010	 add         r2, r3, #0x10
  00104	e59d308c	 ldr         r3, [sp, #0x8C]
  00108	e5823000	 str         r3, [r2]

; 103  : 
; 104  :     //request the interrupt and channels
; 105  :     {
; 106  :     IOCTL_DMA_REQUEST_DEDICATED_INTERRUPT_OUT bufferOut;
; 107  : 
; 108  :     if (!DeviceIoControl(
; 109  :             g_hDmaDrv, IOCTL_DMA_REQUEST_DEDICATED_INTERRUPT, 
; 110  :             (VOID*)&NumberOfChannels, sizeof(IOCTL_DMA_REQUEST_DEDICATED_INTERRUPT_IN), 
; 111  :             (VOID*)&bufferOut, sizeof(IOCTL_DMA_REQUEST_DEDICATED_INTERRUPT_OUT), 
; 112  :             NULL, NULL))

  0010c	e3a03000	 mov         r3, #0
  00110	e58d300c	 str         r3, [sp, #0xC]
  00114	e3a03000	 mov         r3, #0
  00118	e58d3008	 str         r3, [sp, #8]
  0011c	e3a0300c	 mov         r3, #0xC
  00120	e58d3004	 str         r3, [sp, #4]
  00124	e28d3024	 add         r3, sp, #0x24
  00128	e58d3000	 str         r3, [sp]
  0012c	e3a03004	 mov         r3, #4
  00130	e28d208c	 add         r2, sp, #0x8C
  00134	e59f14f8	 ldr         r1, [pc, #0x4F8]
  00138	e59f04f0	 ldr         r0, [pc, #0x4F0]
  0013c	e5900000	 ldr         r0, [r0]
  00140	eb000000	 bl          DeviceIoControl
  00144	e58d0064	 str         r0, [sp, #0x64]
  00148	e59d3064	 ldr         r3, [sp, #0x64]
  0014c	e3530000	 cmp         r3, #0
  00150	1a00000b	 bne         |$LN16@DmaDiAlloc|

; 113  :         {
; 114  :         // ERROR_BUSY indcates that max channels or max interrupts requested, don't print error
; 115  :         if(GetLastError() != ERROR_BUSY)

  00154	eb000000	 bl          GetLastError
  00158	e58d0068	 str         r0, [sp, #0x68]
  0015c	e59d3068	 ldr         r3, [sp, #0x68]
  00160	e35300aa	 cmp         r3, #0xAA
  00164	0a000005	 beq         |$LN15@DmaDiAlloc|

; 116  :             {
; 117  :             ERRORMSG(TRUE, (
; 118  :                         L"DmaDiAllocateInterrupt: IOCTL_DMA_REQUEST_DEDICATED_INTERRUPT failure\r\n"
; 119  :                        ));

  00168	e3a02077	 mov         r2, #0x77
  0016c	e59f149c	 ldr         r1, [pc, #0x49C]
  00170	e59f0494	 ldr         r0, [pc, #0x494]
  00174	eb000000	 bl          NKDbgPrintfW
  00178	e59f04ac	 ldr         r0, [pc, #0x4AC]
  0017c	eb000000	 bl          NKDbgPrintfW
  00180		 |$LN15@DmaDiAlloc|

; 120  :             }
; 121  : 
; 122  :         //last error already set
; 123  :         goto cleanUp;

  00180	ea00010f	 b           |$cleanUp$44044|
  00184		 |$LN16@DmaDiAlloc|

; 124  :         }
; 125  : 
; 126  :     pContext->IrqNum = bufferOut.IrqNum;

  00184	e59d3020	 ldr         r3, [sp, #0x20]
  00188	e2832008	 add         r2, r3, #8
  0018c	e59d3024	 ldr         r3, [sp, #0x24]
  00190	e5823000	 str         r3, [r2]

; 127  :     pContext->DmaControllerPhysAddr = bufferOut.DmaControllerPhysAddr;

  00194	e59d3020	 ldr         r3, [sp, #0x20]
  00198	e2832004	 add         r2, r3, #4
  0019c	e59d3028	 ldr         r3, [sp, #0x28]
  001a0	e5823000	 str         r3, [r2]

; 128  :     pContext->ffDmaChannels = bufferOut.ffDmaChannels;

  001a4	e59d3020	 ldr         r3, [sp, #0x20]
  001a8	e2832014	 add         r2, r3, #0x14
  001ac	e59d302c	 ldr         r3, [sp, #0x2C]
  001b0	e5823000	 str         r3, [r2]

; 129  :     }
; 130  : 
; 131  :     // allocate array of channel register pointers
; 132  :     pContext->ChannelContextArray = (CeddkDmaDIChannelContext_t *)LocalAlloc(LPTR, (sizeof(CeddkDmaDIChannelContext_t) * NumberOfChannels));

  001b4	e59d208c	 ldr         r2, [sp, #0x8C]
  001b8	e3a03010	 mov         r3, #0x10
  001bc	e0010392	 mul         r1, r2, r3
  001c0	e3a00040	 mov         r0, #0x40
  001c4	eb000000	 bl          LocalAlloc
  001c8	e58d006c	 str         r0, [sp, #0x6C]
  001cc	e59d3020	 ldr         r3, [sp, #0x20]
  001d0	e2832028	 add         r2, r3, #0x28
  001d4	e59d306c	 ldr         r3, [sp, #0x6C]
  001d8	e5823000	 str         r3, [r2]

; 133  :     if (pContext->ChannelContextArray == NULL)

  001dc	e59d3020	 ldr         r3, [sp, #0x20]
  001e0	e2833028	 add         r3, r3, #0x28
  001e4	e5933000	 ldr         r3, [r3]
  001e8	e3530000	 cmp         r3, #0
  001ec	1a000006	 bne         |$LN14@DmaDiAlloc|

; 134  :         {
; 135  :         ERRORMSG(TRUE, (
; 136  :                         L"DmaDiAllocateInterrupt: memory allocation failure\r\n"
; 137  :                        ));

  001f0	e3a02089	 mov         r2, #0x89
  001f4	e59f1414	 ldr         r1, [pc, #0x414]
  001f8	e59f040c	 ldr         r0, [pc, #0x40C]
  001fc	eb000000	 bl          NKDbgPrintfW
  00200	e59f0420	 ldr         r0, [pc, #0x420]
  00204	eb000000	 bl          NKDbgPrintfW

; 138  :         //last error already set
; 139  :         goto cleanUp;

  00208	ea0000ed	 b           |$cleanUp$44044|
  0020c		 |$LN14@DmaDiAlloc|

; 140  :         }
; 141  :     
; 142  :     // map memory to registers
; 143  :     pa.HighPart = 0;

  0020c	e3a03000	 mov         r3, #0
  00210	e58d301c	 str         r3, [sp, #0x1C]

; 144  :     pa.LowPart = pContext->DmaControllerPhysAddr;

  00214	e59d3020	 ldr         r3, [sp, #0x20]
  00218	e2833004	 add         r3, r3, #4
  0021c	e5933000	 ldr         r3, [r3]
  00220	e58d3018	 str         r3, [sp, #0x18]

; 145  :     pContext->pDmaRegs = (OMAP_SDMA_REGS*)MmMapIoSpace(pa, 
; 146  :                                                 sizeof(OMAP_SDMA_REGS), 
; 147  :                                                 FALSE
; 148  :                                                 );

  00224	e3a03000	 mov         r3, #0
  00228	e3a02d32	 mov         r2, #0x32, 26
  0022c	e59d0018	 ldr         r0, [sp, #0x18]
  00230	e59d101c	 ldr         r1, [sp, #0x1C]
  00234	eb000000	 bl          MmMapIoSpace
  00238	e58d0070	 str         r0, [sp, #0x70]
  0023c	e59d3020	 ldr         r3, [sp, #0x20]
  00240	e2832018	 add         r2, r3, #0x18
  00244	e59d3070	 ldr         r3, [sp, #0x70]
  00248	e5823000	 str         r3, [r2]

; 149  :     if (pContext->pDmaRegs == NULL)

  0024c	e59d3020	 ldr         r3, [sp, #0x20]
  00250	e2833018	 add         r3, r3, #0x18
  00254	e5933000	 ldr         r3, [r3]
  00258	e3530000	 cmp         r3, #0
  0025c	1a000006	 bne         |$LN13@DmaDiAlloc|

; 150  :         {
; 151  :         ERRORMSG(TRUE, (
; 152  :                         L"DmaDiAllocateInterrupt: MmMapIoSpace failure\r\n"
; 153  :                        ));

  00260	e3a02099	 mov         r2, #0x99
  00264	e59f13a4	 ldr         r1, [pc, #0x3A4]
  00268	e59f039c	 ldr         r0, [pc, #0x39C]
  0026c	eb000000	 bl          NKDbgPrintfW
  00270	e59f03ac	 ldr         r0, [pc, #0x3AC]
  00274	eb000000	 bl          NKDbgPrintfW

; 154  :         //last error already set
; 155  :         goto cleanUp;

  00278	ea0000d1	 b           |$cleanUp$44044|
  0027c		 |$LN13@DmaDiAlloc|

; 156  :         }
; 157  : 
; 158  :     // Get the Mask and Status registers for the coresponding SDMA IRQ
; 159  :     if (dwDmaStartIrq == -1)

  0027c	e59f3398	 ldr         r3, [pc, #0x398]
  00280	e5933000	 ldr         r3, [r3]
  00284	e3730001	 cmn         r3, #1
  00288	1a000009	 bne         |$LN12@DmaDiAlloc|

; 160  :     {
; 161  :         dwDmaStartIrq = GetIrqByDevice(SOCGetDMADevice(0),L"IRQ0");

  0028c	e3a00000	 mov         r0, #0
  00290	eb000000	 bl          SOCGetDMADevice
  00294	e58d0074	 str         r0, [sp, #0x74]
  00298	e59f1380	 ldr         r1, [pc, #0x380]
  0029c	e59d0074	 ldr         r0, [sp, #0x74]
  002a0	eb000000	 bl          GetIrqByDevice
  002a4	e58d0078	 str         r0, [sp, #0x78]
  002a8	e59d2078	 ldr         r2, [sp, #0x78]
  002ac	e59f3368	 ldr         r3, [pc, #0x368]
  002b0	e5832000	 str         r2, [r3]
  002b4		 |$LN12@DmaDiAlloc|

; 162  :     }
; 163  : 
; 164  :     pContext->pMaskRegister = (volatile DWORD*)(&pContext->pDmaRegs->DMA4_IRQENABLE_L0) + (pContext->IrqNum - dwDmaStartIrq);

  002b4	e59d3020	 ldr         r3, [sp, #0x20]
  002b8	e2833018	 add         r3, r3, #0x18
  002bc	e5933000	 ldr         r3, [r3]
  002c0	e2831018	 add         r1, r3, #0x18
  002c4	e59d3020	 ldr         r3, [sp, #0x20]
  002c8	e2833008	 add         r3, r3, #8
  002cc	e5932000	 ldr         r2, [r3]
  002d0	e59f3344	 ldr         r3, [pc, #0x344]
  002d4	e5933000	 ldr         r3, [r3]
  002d8	e0422003	 sub         r2, r2, r3
  002dc	e3a03004	 mov         r3, #4
  002e0	e0030392	 mul         r3, r2, r3
  002e4	e0812003	 add         r2, r1, r3
  002e8	e59d3020	 ldr         r3, [sp, #0x20]
  002ec	e283301c	 add         r3, r3, #0x1C
  002f0	e5832000	 str         r2, [r3]

; 165  :     pContext->pStatusRegister = (volatile DWORD*)(&pContext->pDmaRegs->DMA4_IRQSTATUS_L0) + (pContext->IrqNum - dwDmaStartIrq);

  002f4	e59d3020	 ldr         r3, [sp, #0x20]
  002f8	e2833018	 add         r3, r3, #0x18
  002fc	e5933000	 ldr         r3, [r3]
  00300	e2831008	 add         r1, r3, #8
  00304	e59d3020	 ldr         r3, [sp, #0x20]
  00308	e2833008	 add         r3, r3, #8
  0030c	e5932000	 ldr         r2, [r3]
  00310	e59f3304	 ldr         r3, [pc, #0x304]
  00314	e5933000	 ldr         r3, [r3]
  00318	e0422003	 sub         r2, r2, r3
  0031c	e3a03004	 mov         r3, #4
  00320	e0030392	 mul         r3, r2, r3
  00324	e0812003	 add         r2, r1, r3
  00328	e59d3020	 ldr         r3, [sp, #0x20]
  0032c	e2833020	 add         r3, r3, #0x20
  00330	e5832000	 str         r2, [r3]

; 166  : 
; 167  :     // get system interrupt for irq
; 168  :     if (!KernelIoControl(IOCTL_HAL_REQUEST_SYSINTR, &pContext->IrqNum, 
; 169  :             sizeof(pContext->IrqNum), &pContext->SysInterruptNum, sizeof(pContext->SysInterruptNum), 
; 170  :             NULL)) 

  00334	e3a03000	 mov         r3, #0
  00338	e58d3004	 str         r3, [sp, #4]
  0033c	e3a03004	 mov         r3, #4
  00340	e58d3000	 str         r3, [sp]
  00344	e59d3020	 ldr         r3, [sp, #0x20]
  00348	e283300c	 add         r3, r3, #0xC
  0034c	e3a02004	 mov         r2, #4
  00350	e59d1020	 ldr         r1, [sp, #0x20]
  00354	e2811008	 add         r1, r1, #8
  00358	e59f02b8	 ldr         r0, [pc, #0x2B8]
  0035c	eb000000	 bl          KernelIoControl
  00360	e58d007c	 str         r0, [sp, #0x7C]
  00364	e59d307c	 ldr         r3, [sp, #0x7C]
  00368	e3530000	 cmp         r3, #0
  0036c	1a000009	 bne         |$LN11@DmaDiAlloc|

; 171  :         {
; 172  :         ERRORMSG(TRUE, (L"DmaDiAllocateInterrupt "
; 173  :             L"Failed map DMA interrupt(irq=%d)\r\n", pContext->IrqNum
; 174  :             ));

  00370	e3a020ae	 mov         r2, #0xAE
  00374	e59f1294	 ldr         r1, [pc, #0x294]
  00378	e59f028c	 ldr         r0, [pc, #0x28C]
  0037c	eb000000	 bl          NKDbgPrintfW
  00380	e59d3020	 ldr         r3, [sp, #0x20]
  00384	e2833008	 add         r3, r3, #8
  00388	e5931000	 ldr         r1, [r3]
  0038c	e59f0280	 ldr         r0, [pc, #0x280]
  00390	eb000000	 bl          NKDbgPrintfW

; 175  :         //last error already set
; 176  :         goto cleanUp;

  00394	ea00008a	 b           |$cleanUp$44044|
  00398		 |$LN11@DmaDiAlloc|

; 177  :         }
; 178  : 
; 179  :     // register event handle with system interrupt
; 180  :     if (!InterruptInitialize(pContext->SysInterruptNum, hInterruptEvent, NULL, 0)) 

  00398	e3a03000	 mov         r3, #0
  0039c	e3a02000	 mov         r2, #0
  003a0	e59d1090	 ldr         r1, [sp, #0x90]
  003a4	e59d0020	 ldr         r0, [sp, #0x20]
  003a8	e280000c	 add         r0, r0, #0xC
  003ac	e5900000	 ldr         r0, [r0]
  003b0	eb000000	 bl          InterruptInitialize
  003b4	e58d0080	 str         r0, [sp, #0x80]
  003b8	e59d3080	 ldr         r3, [sp, #0x80]
  003bc	e3530000	 cmp         r3, #0
  003c0	1a000009	 bne         |$LN10@DmaDiAlloc|

; 181  :         {
; 182  :         ERRORMSG(TRUE, (L"DmaDiAllocateInterrupt "
; 183  :             L"InterruptInitialize failed\r\n"
; 184  :             ));

  003c4	e3a020b8	 mov         r2, #0xB8
  003c8	e59f1240	 ldr         r1, [pc, #0x240]
  003cc	e59f0238	 ldr         r0, [pc, #0x238]
  003d0	eb000000	 bl          NKDbgPrintfW
  003d4	e59f022c	 ldr         r0, [pc, #0x22C]
  003d8	eb000000	 bl          NKDbgPrintfW

; 185  :         SetLastError(ERROR_GEN_FAILURE);

  003dc	e3a0001f	 mov         r0, #0x1F
  003e0	eb000000	 bl          SetLastError

; 186  :         goto cleanUp;

  003e4	ea000076	 b           |$cleanUp$44044|

; 187  :         }
; 188  :     else

  003e8	ea000003	 b           |$LN9@DmaDiAlloc|
  003ec		 |$LN10@DmaDiAlloc|

; 189  :         {
; 190  :         pContext->hInterruptEvent = hInterruptEvent;

  003ec	e59d3020	 ldr         r3, [sp, #0x20]
  003f0	e2832024	 add         r2, r3, #0x24
  003f4	e59d3090	 ldr         r3, [sp, #0x90]
  003f8	e5823000	 str         r3, [r2]
  003fc		 |$LN9@DmaDiAlloc|

; 191  :         }
; 192  : 
; 193  :     // configure channel info
; 194  :     {
; 195  :     DWORD HandleIndex =0;

  003fc	e3a03000	 mov         r3, #0
  00400	e58d3034	 str         r3, [sp, #0x34]

; 196  :     CeddkDmaDIChannelContext_t *pChannelContext = pContext->ChannelContextArray;

  00404	e59d3020	 ldr         r3, [sp, #0x20]
  00408	e2833028	 add         r3, r3, #0x28
  0040c	e5933000	 ldr         r3, [r3]
  00410	e58d3030	 str         r3, [sp, #0x30]

; 197  :     DWORD ff = 1;

  00414	e3a03001	 mov         r3, #1
  00418	e58d3038	 str         r3, [sp, #0x38]

; 198  : 
; 199  :     for(i =0; i < OMAP_DMA_LOGICAL_CHANNEL_COUNT; i++)

  0041c	e3a03000	 mov         r3, #0
  00420	e58d3014	 str         r3, [sp, #0x14]
  00424	ea000002	 b           |$LN8@DmaDiAlloc|
  00428		 |$LN7@DmaDiAlloc|
  00428	e59d3014	 ldr         r3, [sp, #0x14]
  0042c	e2833001	 add         r3, r3, #1
  00430	e58d3014	 str         r3, [sp, #0x14]
  00434		 |$LN8@DmaDiAlloc|
  00434	e59d3014	 ldr         r3, [sp, #0x14]
  00438	e3530020	 cmp         r3, #0x20
  0043c	2a00002c	 bcs         |$LN6@DmaDiAlloc|

; 200  :         {
; 201  :         if(ff & pContext->ffDmaChannels)

  00440	e59d3020	 ldr         r3, [sp, #0x20]
  00444	e2833014	 add         r3, r3, #0x14
  00448	e59d2038	 ldr         r2, [sp, #0x38]
  0044c	e5933000	 ldr         r3, [r3]
  00450	e1120003	 tst         r2, r3
  00454	0a000022	 beq         |$LN5@DmaDiAlloc|

; 202  :             {
; 203  :             //initalize the cookie
; 204  :             pChannelContext->cookie = DMA_DEDICATED_CHANNEL_HANDLE_COOKIE;

  00458	e59d2030	 ldr         r2, [sp, #0x30]
  0045c	e59f31a0	 ldr         r3, [pc, #0x1A0]
  00460	e5823000	 str         r3, [r2]

; 205  : 
; 206  :             //Save index of the channel
; 207  :             pChannelContext->index = i;

  00464	e59d3030	 ldr         r3, [sp, #0x30]
  00468	e2832008	 add         r2, r3, #8
  0046c	e59d3014	 ldr         r3, [sp, #0x14]
  00470	e5823000	 str         r3, [r2]

; 208  : 
; 209  :             //Save the bit mask
; 210  :             pChannelContext->ChannelIntMask = ff;

  00474	e59d3030	 ldr         r3, [sp, #0x30]
  00478	e283200c	 add         r2, r3, #0xC
  0047c	e59d3038	 ldr         r3, [sp, #0x38]
  00480	e5823000	 str         r3, [r2]

; 211  : 
; 212  :             // get pointer to the channel registers
; 213  :             pChannelContext->pDmaChannel = &pContext->pDmaRegs->CHNL_CTRL[i];

  00484	e59d3020	 ldr         r3, [sp, #0x20]
  00488	e2833018	 add         r3, r3, #0x18
  0048c	e5933000	 ldr         r3, [r3]
  00490	e2831080	 add         r1, r3, #0x80
  00494	e59d2014	 ldr         r2, [sp, #0x14]
  00498	e3a03060	 mov         r3, #0x60
  0049c	e0030392	 mul         r3, r2, r3
  004a0	e0812003	 add         r2, r1, r3
  004a4	e59d3030	 ldr         r3, [sp, #0x30]
  004a8	e2833004	 add         r3, r3, #4
  004ac	e5832000	 str         r2, [r3]

; 214  : 
; 215  :             //return a handle to the channel registers such that dma_utility functions can be used.
; 216  :             phChannelHandles[HandleIndex] = (void*) pChannelContext;

  004b0	e59d1034	 ldr         r1, [sp, #0x34]
  004b4	e3a03004	 mov         r3, #4
  004b8	e0020391	 mul         r2, r1, r3
  004bc	e59d3094	 ldr         r3, [sp, #0x94]
  004c0	e0832002	 add         r2, r3, r2
  004c4	e59d3030	 ldr         r3, [sp, #0x30]
  004c8	e5823000	 str         r3, [r2]

; 217  : 
; 218  :             //Point to next entry
; 219  :             pChannelContext++;

  004cc	e59d3030	 ldr         r3, [sp, #0x30]
  004d0	e2833010	 add         r3, r3, #0x10
  004d4	e58d3030	 str         r3, [sp, #0x30]

; 220  :             HandleIndex++;

  004d8	e59d3034	 ldr         r3, [sp, #0x34]
  004dc	e2833001	 add         r3, r3, #1
  004e0	e58d3034	 str         r3, [sp, #0x34]
  004e4		 |$LN5@DmaDiAlloc|

; 221  :             }
; 222  :         ff <<= 1;

  004e4	e59d3038	 ldr         r3, [sp, #0x38]
  004e8	e1a03083	 mov         r3, r3, lsl #1
  004ec	e58d3038	 str         r3, [sp, #0x38]

; 223  :         }

  004f0	eaffffcc	 b           |$LN7@DmaDiAlloc|
  004f4		 |$LN6@DmaDiAlloc|

; 224  :         
; 225  :     }
; 226  : 
; 227  :     // reset dma interrupts and status
; 228  :     WRITE_REGISTER_ULONG(pContext->pMaskRegister, pContext->ffDmaChannels);

  004f4	e59d3020	 ldr         r3, [sp, #0x20]
  004f8	e2831014	 add         r1, r3, #0x14
  004fc	e59d3020	 ldr         r3, [sp, #0x20]
  00500	e283301c	 add         r3, r3, #0x1C
  00504	e5932000	 ldr         r2, [r3]
  00508	e5913000	 ldr         r3, [r1]
  0050c	e5823000	 str         r3, [r2]

; 229  :     WRITE_REGISTER_ULONG(pContext->pStatusRegister, 0xFFFFFFFF);

  00510	e59d3020	 ldr         r3, [sp, #0x20]
  00514	e2833020	 add         r3, r3, #0x20
  00518	e5932000	 ldr         r2, [r3]
  0051c	e3e03000	 mvn         r3, #0
  00520	e5823000	 str         r3, [r2]

; 230  : 
; 231  :     // clear interrupt status 
; 232  :     for(i =0; i < NumberOfChannels; i++)

  00524	e3a03000	 mov         r3, #0
  00528	e58d3014	 str         r3, [sp, #0x14]
  0052c	ea000002	 b           |$LN4@DmaDiAlloc|
  00530		 |$LN3@DmaDiAlloc|
  00530	e59d3014	 ldr         r3, [sp, #0x14]
  00534	e2833001	 add         r3, r3, #1
  00538	e58d3014	 str         r3, [sp, #0x14]
  0053c		 |$LN4@DmaDiAlloc|
  0053c	e59d2014	 ldr         r2, [sp, #0x14]
  00540	e59d308c	 ldr         r3, [sp, #0x8C]
  00544	e1520003	 cmp         r2, r3
  00548	2a000019	 bcs         |$LN2@DmaDiAlloc|

; 233  :         {
; 234  :         WRITE_REGISTER_ULONG(&pContext->ChannelContextArray[i].pDmaChannel->CSR, 0x00000FFE);

  0054c	e59d3020	 ldr         r3, [sp, #0x20]
  00550	e2830028	 add         r0, r3, #0x28
  00554	e59d1014	 ldr         r1, [sp, #0x14]
  00558	e3a03010	 mov         r3, #0x10
  0055c	e0020391	 mul         r2, r1, r3
  00560	e5903000	 ldr         r3, [r0]
  00564	e0833002	 add         r3, r3, r2
  00568	e2833004	 add         r3, r3, #4
  0056c	e5933000	 ldr         r3, [r3]
  00570	e283200c	 add         r2, r3, #0xC
  00574	e3a03c0f	 mov         r3, #0xF, 24
  00578	e38330fe	 orr         r3, r3, #0xFE
  0057c	e5823000	 str         r3, [r2]

; 235  :         WRITE_REGISTER_ULONG(&pContext->ChannelContextArray[i].pDmaChannel->CLNK_CTRL, 0x00000000);

  00580	e59d3020	 ldr         r3, [sp, #0x20]
  00584	e2830028	 add         r0, r3, #0x28
  00588	e59d1014	 ldr         r1, [sp, #0x14]
  0058c	e3a03010	 mov         r3, #0x10
  00590	e0020391	 mul         r2, r1, r3
  00594	e5903000	 ldr         r3, [r0]
  00598	e0833002	 add         r3, r3, r2
  0059c	e2833004	 add         r3, r3, #4
  005a0	e5933000	 ldr         r3, [r3]
  005a4	e2832004	 add         r2, r3, #4
  005a8	e3a03000	 mov         r3, #0
  005ac	e5823000	 str         r3, [r2]

; 236  :         }

  005b0	eaffffde	 b           |$LN3@DmaDiAlloc|
  005b4		 |$LN2@DmaDiAlloc|

; 237  : 
; 238  :     rc = TRUE;

  005b4	e3a03001	 mov         r3, #1
  005b8	e58d3010	 str         r3, [sp, #0x10]

; 239  :     SetLastError(ERROR_SUCCESS);

  005bc	e3a00000	 mov         r0, #0
  005c0	eb000000	 bl          SetLastError
  005c4		 |$cleanUp$44044|

; 240  : 
; 241  : cleanUp:
; 242  :     // request dma channel
; 243  :     if (rc == FALSE && pContext != NULL)

  005c4	e59d3010	 ldr         r3, [sp, #0x10]
  005c8	e3530000	 cmp         r3, #0
  005cc	1a000006	 bne         |$LN1@DmaDiAlloc|
  005d0	e59d3020	 ldr         r3, [sp, #0x20]
  005d4	e3530000	 cmp         r3, #0
  005d8	0a000003	 beq         |$LN1@DmaDiAlloc|

; 244  :         {
; 245  :         DmaDeallocateContext(pContext);

  005dc	e59d0020	 ldr         r0, [sp, #0x20]
  005e0	eb000000	 bl          DmaDeallocateContext

; 246  :         pContext = NULL;

  005e4	e3a03000	 mov         r3, #0
  005e8	e58d3020	 str         r3, [sp, #0x20]
  005ec		 |$LN1@DmaDiAlloc|

; 247  :         }
; 248  :     
; 249  :     return pContext;    

  005ec	e59d3020	 ldr         r3, [sp, #0x20]
  005f0	e58d3054	 str         r3, [sp, #0x54]

; 250  : }

  005f4	e59d0054	 ldr         r0, [sp, #0x54]
  005f8	e28dd084	 add         sp, sp, #0x84
  005fc	e89d6000	 ldmia       sp, {sp, lr}
  00600	e12fff1e	 bx          lr
  00604		 |$LN27@DmaDiAlloc|
  00604		 |$LN28@DmaDiAlloc|
  00604	43a608f2	 DCD         0x43a608f2
  00608		 |$LN29@DmaDiAlloc|
  00608	00000000	 DCD         |??_C@_1GI@BNFFDFCM@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt@|
  0060c		 |$LN30@DmaDiAlloc|
  0060c	00000000	 DCD         |??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@|
  00610		 |$LN31@DmaDiAlloc|
  00610	00000000	 DCD         |??_C@_1KO@IEMELEG@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  00614		 |$LN32@DmaDiAlloc|
  00614	00000000	 DCD         |??_C@_1HE@BELIOLMC@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAm?$AAa@|
  00618		 |$LN33@DmaDiAlloc|
  00618	01010098	 DCD         0x1010098
  0061c		 |$LN34@DmaDiAlloc|
  0061c	00000000	 DCD         |?dwDmaStartIrq@?1??DmaDiAllocateInterrupt@@9@9|
  00620		 |$LN35@DmaDiAlloc|
  00620	00000000	 DCD         |??_C@_19FOCAGMKL@?$AAI?$AAR?$AAQ?$AA0?$AA?$AA@|
  00624		 |$LN36@DmaDiAlloc|
  00624	00000000	 DCD         |??_C@_1FO@GCGOBMBN@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAM?$AAm?$AAM?$AAa?$AAp?$AAI?$AAo?$AAS@|
  00628		 |$LN37@DmaDiAlloc|
  00628	00000000	 DCD         |??_C@_1GI@PLLCPBPA@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAm?$AAe?$AAm?$AAo?$AAr?$AAy?$AA?5?$AAa@|
  0062c		 |$LN38@DmaDiAlloc|
  0062c	00000000	 DCD         |??_C@_1JA@KILAOCLM@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAD?$AAM@|
  00630		 |$LN39@DmaDiAlloc|
  00630	00000000	 DCD         |g_hDmaDrv|
  00634		 |$LN40@DmaDiAlloc|
  00634	01da041c	 DCD         0x1da041c
  00638		 |$LN41@DmaDiAlloc|
  00638	43a608f1	 DCD         0x43a608f1
  0063c		 |$LN42@DmaDiAlloc|
  0063c	00000000	 DCD         |??_C@_1GK@BAJGPPFD@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAN?$AAu?$AAm?$AAb?$AAe?$AAr?$AAO?$AAf@|
  00640		 |$LN43@DmaDiAlloc|
  00640	00000000	 DCD         |??_C@_1GI@NOOLDBAN@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAV?$AAa?$AAl?$AAi?$AAd?$AAa?$AAt?$AAe@|
  00644		 |$M44284|

			 ENDP  ; |DmaDiAllocateInterrupt|

	EXPORT	|??_C@_1JK@NPBFIFGL@?$AAD?$AAm?$AAa?$AAD?$AAe?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAC?$AAo?$AAn?$AAt?$AAe?$AAx?$AAt?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAI?$AAO?$AAC?$AAT@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IM@MBKONHJG@?$AAD?$AAm?$AAa?$AAD?$AAe?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAC?$AAo?$AAn?$AAt?$AAe?$AAx?$AAt?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAD?$AAM?$AAA?$AA_@| [ DATA ] ; `string'
	IMPORT	|LocalFree|
	IMPORT	|MmUnmapIoSpace|
	IMPORT	|InterruptDisable|

  00008			 AREA	 |.pdata|, PDATA
|$T44314| DCD	|$LN13@DmaDealloc|
	DCD	0x40006d04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JK@NPBFIFGL@?$AAD?$AAm?$AAa?$AAD?$AAe?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAC?$AAo?$AAn?$AAt?$AAe?$AAx?$AAt?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAI?$AAO?$AAC?$AAT@| DCB "D"
	DCB	0x0, "m", 0x0, "a", 0x0, "D", 0x0, "e", 0x0, "a", 0x0, "l"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, "C", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "x"
	DCB	0x0, "t", 0x0, " ", 0x0, "F", 0x0, "a", 0x0, "i", 0x0, "l"
	DCB	0x0, "e", 0x0, "d", 0x0, " ", 0x0, "I", 0x0, "O", 0x0, "C"
	DCB	0x0, "T", 0x0, "L", 0x0, "_", 0x0, "H", 0x0, "A", 0x0, "L"
	DCB	0x0, "_", 0x0, "R", 0x0, "E", 0x0, "L", 0x0, "E", 0x0, "A"
	DCB	0x0, "S", 0x0, "E", 0x0, "_", 0x0, "S", 0x0, "Y", 0x0, "S"
	DCB	0x0, "I", 0x0, "N", 0x0, "T", 0x0, "R", 0x0, " ", 0x0, "("
	DCB	0x0, "S", 0x0, "y", 0x0, "s", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t"
	DCB	0x0, "N", 0x0, "u", 0x0, "m", 0x0, "=", 0x0, "%", 0x0, "d"
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IM@MBKONHJG@?$AAD?$AAm?$AAa?$AAD?$AAe?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAC?$AAo?$AAn?$AAt?$AAe?$AAx?$AAt?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAD?$AAM?$AAA?$AA_@| DCB "D"
	DCB	0x0, "m", 0x0, "a", 0x0, "D", 0x0, "e", 0x0, "a", 0x0, "l"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, "C", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "x"
	DCB	0x0, "t", 0x0, ":", 0x0, " ", 0x0, "I", 0x0, "O", 0x0, "C"
	DCB	0x0, "T", 0x0, "L", 0x0, "_", 0x0, "D", 0x0, "M", 0x0, "A"
	DCB	0x0, "_", 0x0, "R", 0x0, "E", 0x0, "L", 0x0, "E", 0x0, "A"
	DCB	0x0, "S", 0x0, "E", 0x0, "_", 0x0, "D", 0x0, "E", 0x0, "D"
	DCB	0x0, "I", 0x0, "C", 0x0, "A", 0x0, "T", 0x0, "E", 0x0, "D"
	DCB	0x0, "_", 0x0, "I", 0x0, "N", 0x0, "T", 0x0, "E", 0x0, "R"
	DCB	0x0, "R", 0x0, "U", 0x0, "P", 0x0, "T", 0x0, " ", 0x0, "f"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, "u", 0x0, "r", 0x0, "e"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  00644			 AREA	 |.text|, CODE, ARM

  00644		 |DmaDeallocateContext| PROC

; 257  : {

  00644		 |$LN13@DmaDealloc|
  00644	e1a0c00d	 mov         r12, sp
  00648	e92d0001	 stmdb       sp!, {r0}
  0064c	e92d5000	 stmdb       sp!, {r12, lr}
  00650	e24dd030	 sub         sp, sp, #0x30
  00654		 |$M44311|

; 258  :     if(pContext)

  00654	e59d3038	 ldr         r3, [sp, #0x38]
  00658	e3530000	 cmp         r3, #0
  0065c	0a00005b	 beq         |$LN8@DmaDealloc|

; 259  :         {
; 260  :         //free DMA Driver resources for DMA interrupt
; 261  :          if(pContext->SysInterruptNum)

  00660	e59d3038	 ldr         r3, [sp, #0x38]
  00664	e283300c	 add         r3, r3, #0xC
  00668	e5933000	 ldr         r3, [r3]
  0066c	e3530000	 cmp         r3, #0
  00670	0a000003	 beq         |$LN7@DmaDealloc|

; 262  :             {
; 263  :             InterruptDisable(pContext->SysInterruptNum);

  00674	e59d3038	 ldr         r3, [sp, #0x38]
  00678	e283300c	 add         r3, r3, #0xC
  0067c	e5930000	 ldr         r0, [r3]
  00680	eb000000	 bl          InterruptDisable
  00684		 |$LN7@DmaDealloc|

; 264  :             }
; 265  : 
; 266  :         if(pContext->IrqNum)

  00684	e59d3038	 ldr         r3, [sp, #0x38]
  00688	e2833008	 add         r3, r3, #8
  0068c	e5933000	 ldr         r3, [r3]
  00690	e3530000	 cmp         r3, #0
  00694	0a00002f	 beq         |$LN6@DmaDealloc|

; 267  :             {
; 268  :             if (!DeviceIoControl(
; 269  :                                 g_hDmaDrv, IOCTL_DMA_RELEASE_DEDICATED_INTERRUPT, 
; 270  :                                 (VOID*)&pContext->IrqNum, sizeof(IOCTL_DMA_RELEASE_DEDICATED_INTERRUPT_IN), 
; 271  :                                 NULL, 0, 
; 272  :                                 NULL, NULL))

  00698	e3a03000	 mov         r3, #0
  0069c	e58d300c	 str         r3, [sp, #0xC]
  006a0	e3a03000	 mov         r3, #0
  006a4	e58d3008	 str         r3, [sp, #8]
  006a8	e3a03000	 mov         r3, #0
  006ac	e58d3004	 str         r3, [sp, #4]
  006b0	e3a03000	 mov         r3, #0
  006b4	e58d3000	 str         r3, [sp]
  006b8	e3a03004	 mov         r3, #4
  006bc	e59d2038	 ldr         r2, [sp, #0x38]
  006c0	e2822008	 add         r2, r2, #8
  006c4	e59f1128	 ldr         r1, [pc, #0x128]
  006c8	e59f0120	 ldr         r0, [pc, #0x120]
  006cc	e5900000	 ldr         r0, [r0]
  006d0	eb000000	 bl          DeviceIoControl
  006d4	e58d0028	 str         r0, [sp, #0x28]
  006d8	e59d3028	 ldr         r3, [sp, #0x28]
  006dc	e3530000	 cmp         r3, #0
  006e0	1a000005	 bne         |$LN5@DmaDealloc|

; 273  :                 {
; 274  :                 ERRORMSG(TRUE, (
; 275  :                                 L"DmaDeallocateContext: IOCTL_DMA_RELEASE_DEDICATED_INTERRUPT failure\r\n"
; 276  :                                ));

  006e4	e3a02f45	 mov         r2, #0x45, 30
  006e8	e59f10f4	 ldr         r1, [pc, #0xF4]
  006ec	e59f00ec	 ldr         r0, [pc, #0xEC]
  006f0	eb000000	 bl          NKDbgPrintfW
  006f4	e59f00f0	 ldr         r0, [pc, #0xF0]
  006f8	eb000000	 bl          NKDbgPrintfW
  006fc		 |$LN5@DmaDealloc|

; 277  :                 //last error already set
; 278  :                 }
; 279  : 
; 280  :             if (!KernelIoControl(IOCTL_HAL_RELEASE_SYSINTR, 
; 281  :                                 &pContext->SysInterruptNum, sizeof(pContext->SysInterruptNum), 
; 282  :                                 NULL, 0, 
; 283  :                                 NULL)) 

  006fc	e3a03000	 mov         r3, #0
  00700	e58d3004	 str         r3, [sp, #4]
  00704	e3a03000	 mov         r3, #0
  00708	e58d3000	 str         r3, [sp]
  0070c	e3a03000	 mov         r3, #0
  00710	e3a02004	 mov         r2, #4
  00714	e59d1038	 ldr         r1, [sp, #0x38]
  00718	e281100c	 add         r1, r1, #0xC
  0071c	e59f00c4	 ldr         r0, [pc, #0xC4]
  00720	eb000000	 bl          KernelIoControl
  00724	e58d002c	 str         r0, [sp, #0x2C]
  00728	e59d302c	 ldr         r3, [sp, #0x2C]
  0072c	e3530000	 cmp         r3, #0
  00730	1a000008	 bne         |$LN4@DmaDealloc|

; 284  :                 {
; 285  :                 ERRORMSG(TRUE, (
; 286  :                             L"DmaDeallocateContext "
; 287  :                             L"Failed IOCTL_HAL_RELEASE_SYSINTR (SysInterruptNum=%d)\r\n", pContext->SysInterruptNum
; 288  :                             ));

  00734	e3a02e12	 mov         r2, #0x12, 28
  00738	e59f10a4	 ldr         r1, [pc, #0xA4]
  0073c	e59f009c	 ldr         r0, [pc, #0x9C]
  00740	eb000000	 bl          NKDbgPrintfW
  00744	e59d3038	 ldr         r3, [sp, #0x38]
  00748	e283300c	 add         r3, r3, #0xC
  0074c	e5931000	 ldr         r1, [r3]
  00750	e59f0084	 ldr         r0, [pc, #0x84]
  00754	eb000000	 bl          NKDbgPrintfW
  00758		 |$LN4@DmaDealloc|
  00758		 |$LN6@DmaDealloc|

; 289  :                 //last error already set
; 290  :                 }
; 291  : 
; 292  :             }
; 293  : 
; 294  :         //unmap registers
; 295  :         if(pContext->pDmaRegs)

  00758	e59d3038	 ldr         r3, [sp, #0x38]
  0075c	e2833018	 add         r3, r3, #0x18
  00760	e5933000	 ldr         r3, [r3]
  00764	e3530000	 cmp         r3, #0
  00768	0a000004	 beq         |$LN3@DmaDealloc|

; 296  :             {
; 297  :             MmUnmapIoSpace((PVOID)pContext->pDmaRegs, sizeof(OMAP_SDMA_REGS));

  0076c	e3a01d32	 mov         r1, #0x32, 26
  00770	e59d3038	 ldr         r3, [sp, #0x38]
  00774	e2833018	 add         r3, r3, #0x18
  00778	e5930000	 ldr         r0, [r3]
  0077c	eb000000	 bl          MmUnmapIoSpace
  00780		 |$LN3@DmaDealloc|

; 298  :             }
; 299  : 
; 300  :         //free memory
; 301  :         if(pContext->ChannelContextArray)

  00780	e59d3038	 ldr         r3, [sp, #0x38]
  00784	e2833028	 add         r3, r3, #0x28
  00788	e5933000	 ldr         r3, [r3]
  0078c	e3530000	 cmp         r3, #0
  00790	0a000003	 beq         |$LN2@DmaDealloc|

; 302  :             {
; 303  :             LocalFree((PVOID)pContext->ChannelContextArray);

  00794	e59d3038	 ldr         r3, [sp, #0x38]
  00798	e2833028	 add         r3, r3, #0x28
  0079c	e5930000	 ldr         r0, [r3]
  007a0	eb000000	 bl          LocalFree
  007a4		 |$LN2@DmaDealloc|

; 304  :             }
; 305  : 
; 306  :         if(pContext->hInterruptEvent)

  007a4	e59d3038	 ldr         r3, [sp, #0x38]
  007a8	e2833024	 add         r3, r3, #0x24
  007ac	e5933000	 ldr         r3, [r3]
  007b0	e3530000	 cmp         r3, #0
  007b4	0a000003	 beq         |$LN1@DmaDealloc|

; 307  :             {
; 308  :             InterruptDisable(pContext->SysInterruptNum);

  007b8	e59d3038	 ldr         r3, [sp, #0x38]
  007bc	e283300c	 add         r3, r3, #0xC
  007c0	e5930000	 ldr         r0, [r3]
  007c4	eb000000	 bl          InterruptDisable
  007c8		 |$LN1@DmaDealloc|

; 309  :             }
; 310  :               
; 311  :         LocalFree(pContext);   

  007c8	e59d0038	 ldr         r0, [sp, #0x38]
  007cc	eb000000	 bl          LocalFree
  007d0		 |$LN8@DmaDealloc|

; 312  :         }
; 313  : }

  007d0	e28dd030	 add         sp, sp, #0x30
  007d4	e89d6000	 ldmia       sp, {sp, lr}
  007d8	e12fff1e	 bx          lr
  007dc		 |$LN14@DmaDealloc|
  007dc		 |$LN15@DmaDealloc|
  007dc	00000000	 DCD         |??_C@_1JK@NPBFIFGL@?$AAD?$AAm?$AAa?$AAD?$AAe?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAC?$AAo?$AAn?$AAt?$AAe?$AAx?$AAt?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAI?$AAO?$AAC?$AAT@|
  007e0		 |$LN16@DmaDealloc|
  007e0	00000000	 DCD         |??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@|
  007e4		 |$LN17@DmaDealloc|
  007e4	00000000	 DCD         |??_C@_1KO@IEMELEG@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  007e8		 |$LN18@DmaDealloc|
  007e8	010100d8	 DCD         0x10100d8
  007ec		 |$LN19@DmaDealloc|
  007ec	00000000	 DCD         |??_C@_1IM@MBKONHJG@?$AAD?$AAm?$AAa?$AAD?$AAe?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAC?$AAo?$AAn?$AAt?$AAe?$AAx?$AAt?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAD?$AAM?$AAA?$AA_@|
  007f0		 |$LN20@DmaDealloc|
  007f0	00000000	 DCD         |g_hDmaDrv|
  007f4		 |$LN21@DmaDealloc|
  007f4	01da0420	 DCD         0x1da0420
  007f8		 |$M44312|

			 ENDP  ; |DmaDeallocateContext|

	EXPORT	|??_C@_1FM@OLMMJHOB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$CB?$AA?5?$AAC?$AAE?$AAD?$AAD?$AAK?$AA?3?$AA?5?$AAe?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAf?$AAr?$AAe?$AAe?$AA?8?$AAi?$AAn?$AAg@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FK@DOJBJKJ@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAD?$AAm?$AAa?$AAF?$AAr?$AAe?$AAe?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAH@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GG@MBAKFDLI@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAD?$AAm?$AAa?$AAF?$AAr?$AAe?$AAe?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAV?$AAa?$AAl?$AAi?$AAd?$AAa?$AAt?$AAe?$AAD@| [ DATA ] ; `string'
	EXPORT	|DmaDiDmaFreeInterrupt|
	IMPORT	|DmaDisableStandby|
	IMPORT	|__C_specific_handler|

  00010			 AREA	 |.pdata|, PDATA
|$T44341| DCD	|$LN28@DmaDiDmaFr|
	DCD	0xc000bc05
|$T44343| DCD	|$LN18@DmaDiDmaFr|
	DCD	0x40000a01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FM@OLMMJHOB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$CB?$AA?5?$AAC?$AAE?$AAD?$AAD?$AAK?$AA?3?$AA?5?$AAe?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAf?$AAr?$AAe?$AAe?$AA?8?$AAi?$AAn?$AAg@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, "!", 0x0, " "
	DCB	0x0, "C", 0x0, "E", 0x0, "D", 0x0, "D", 0x0, "K", 0x0, ":"
	DCB	0x0, " ", 0x0, "e", 0x0, "x", 0x0, "c", 0x0, "e", 0x0, "p"
	DCB	0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, " ", 0x0, "f"
	DCB	0x0, "r", 0x0, "e", 0x0, "e", 0x0, "'", 0x0, "i", 0x0, "n"
	DCB	0x0, "g", 0x0, " ", 0x0, "d", 0x0, "m", 0x0, "a", 0x0, " "
	DCB	0x0, "h", 0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FK@DOJBJKJ@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAD?$AAm?$AAa?$AAF?$AAr?$AAe?$AAe?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAH@| DCB "D"
	DCB	0x0, "m", 0x0, "a", 0x0, "D", 0x0, "i", 0x0, "D", 0x0, "m"
	DCB	0x0, "a", 0x0, "F", 0x0, "r", 0x0, "e", 0x0, "e", 0x0, "I"
	DCB	0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u"
	DCB	0x0, "p", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "I", 0x0, "n"
	DCB	0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d", 0x0, " "
	DCB	0x0, "H", 0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e"
	DCB	0x0, " ", 0x0, "T", 0x0, "y", 0x0, "p", 0x0, "e", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GG@MBAKFDLI@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAD?$AAm?$AAa?$AAF?$AAr?$AAe?$AAe?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAV?$AAa?$AAl?$AAi?$AAd?$AAa?$AAt?$AAe?$AAD@| DCB "D"
	DCB	0x0, "m", 0x0, "a", 0x0, "D", 0x0, "i", 0x0, "D", 0x0, "m"
	DCB	0x0, "a", 0x0, "F", 0x0, "r", 0x0, "e", 0x0, "e", 0x0, "I"
	DCB	0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u"
	DCB	0x0, "p", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "V", 0x0, "a"
	DCB	0x0, "l", 0x0, "i", 0x0, "d", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, "D", 0x0, "m", 0x0, "a", 0x0, "D", 0x0, "r", 0x0, "i"
	DCB	0x0, "v", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "u", 0x0, "r", 0x0, "e", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.xdata|, DATA
|$T44339| DCD	0x1
	DCD	|$LN22@DmaDiDmaFr|
	DCD	|$LN23@DmaDiDmaFr|
	DCD	|$LN18@DmaDiDmaFr|
	DCD	|$LN19@DmaDiDmaFr|
; Function compile flags: /Odtp

  007f8			 AREA	 |.text|, CODE, ARM

  007f8	00000000	 DCD         |__C_specific_handler|
  007fc	00000000	 DCD         |$T44339|

  00800		 |DmaDiDmaFreeInterrupt| PROC

; 328  : {

  00800		 |$LN28@DmaDiDmaFr|
  00800	e1a0c00d	 mov         r12, sp
  00804	e92d0001	 stmdb       sp!, {r0}
  00808	e92d5800	 stmdb       sp!, {r11, r12, lr}
  0080c	e28db00c	 add         r11, sp, #0xC
  00810	e24dd024	 sub         sp, sp, #0x24
  00814		 |$LN26@DmaDiDmaFr|

; 329  :     BOOL rc = FALSE;

  00814	e3a03000	 mov         r3, #0
  00818	e50b3030	 str         r3, [r11, #-0x30]

; 330  :     CeddkDmaDIContext_t *pContext = (CeddkDmaDIContext_t*)hDmaInterrupt;

  0081c	e59b3000	 ldr         r3, [r11]
  00820	e50b3020	 str         r3, [r11, #-0x20]

; 331  :     DWORD i;
; 332  : 
; 333  :     volatile ULONG ulCCR;
; 334  :     BOOL breakLoop = FALSE;

  00824	e3a03000	 mov         r3, #0
  00828	e50b302c	 str         r3, [r11, #-0x2C]

; 335  :     int  DelayCnt = 0x7FFF;

  0082c	e3a03c7f	 mov         r3, #0x7F, 24
  00830	e38330ff	 orr         r3, r3, #0xFF
  00834	e50b301c	 str         r3, [r11, #-0x1C]

; 336  : 
; 337  :     // check if dma handle is valid
; 338  :     if (ValidateDmaDriver() == FALSE || hDmaInterrupt == NULL)

  00838	e59f32d4	 ldr         r3, [pc, #0x2D4]
  0083c	e5933000	 ldr         r3, [r3]
  00840	e3530000	 cmp         r3, #0
  00844	0a000002	 beq         |$LN15@DmaDiDmaFr|
  00848	e3a03001	 mov         r3, #1
  0084c	e50b3014	 str         r3, [r11, #-0x14]
  00850	ea000003	 b           |$LN16@DmaDiDmaFr|
  00854		 |$LN15@DmaDiDmaFr|
  00854	eb000000	 bl          LoadDmaDriver
  00858	e50b0010	 str         r0, [r11, #-0x10]
  0085c	e51b3010	 ldr         r3, [r11, #-0x10]
  00860	e50b3014	 str         r3, [r11, #-0x14]
  00864		 |$LN16@DmaDiDmaFr|
  00864	e51b3014	 ldr         r3, [r11, #-0x14]
  00868	e3530000	 cmp         r3, #0
  0086c	0a000002	 beq         |$LN11@DmaDiDmaFr|
  00870	e59b3000	 ldr         r3, [r11]
  00874	e3530000	 cmp         r3, #0
  00878	1a00000a	 bne         |$LN12@DmaDiDmaFr|
  0087c		 |$LN11@DmaDiDmaFr|

; 339  :         {
; 340  :         ERRORMSG(TRUE, (
; 341  :                         L"DmaDiDmaFreeInterrupt: ValidateDmaDriver Failure\r\n"
; 342  :                        ));

  0087c	e3a02c01	 mov         r2, #1, 24
  00880	e3822056	 orr         r2, r2, #0x56
  00884	e59f1278	 ldr         r1, [pc, #0x278]
  00888	e59f0270	 ldr         r0, [pc, #0x270]
  0088c	eb000000	 bl          NKDbgPrintfW
  00890	e59f0278	 ldr         r0, [pc, #0x278]
  00894	eb000000	 bl          NKDbgPrintfW

; 343  :         SetLastError(ERROR_DLL_INIT_FAILED);

  00898	e3a00b01	 mov         r0, #1, 22
  0089c	e380005a	 orr         r0, r0, #0x5A
  008a0	eb000000	 bl          SetLastError

; 344  :         goto cleanUp;

  008a4	ea00008b	 b           |$cleanUp$44138|
  008a8		 |$LN12@DmaDiDmaFr|
  008a8		 |$LN22@DmaDiDmaFr|

; 345  :         }
; 346  : 
; 347  :     __try
; 348  :         {
; 349  :         if (pContext->cookie != DMA_DEDICATED_INTERRUPT_HANDLE_COOKIE)

  008a8	e51b3020	 ldr         r3, [r11, #-0x20]
  008ac	e5932000	 ldr         r2, [r3]
  008b0	e59f3254	 ldr         r3, [pc, #0x254]
  008b4	e1520003	 cmp         r2, r3
  008b8	0a000009	 beq         |$LN9@DmaDiDmaFr|

; 350  :             {
; 351  :             ERRORMSG(TRUE, (
; 352  :                         L"DmaDiDmaFreeInterrupt: Invalid Handle Type\r\n"
; 353  :                        ));

  008bc	e3a02c01	 mov         r2, #1, 24
  008c0	e3822061	 orr         r2, r2, #0x61
  008c4	e59f1238	 ldr         r1, [pc, #0x238]
  008c8	e59f0230	 ldr         r0, [pc, #0x230]
  008cc	eb000000	 bl          NKDbgPrintfW
  008d0	e59f0230	 ldr         r0, [pc, #0x230]
  008d4	eb000000	 bl          NKDbgPrintfW

; 354  :             SetLastError(ERROR_INVALID_HANDLE);

  008d8	e3a00006	 mov         r0, #6
  008dc	eb000000	 bl          SetLastError

; 355  :             goto cleanUp;

  008e0	ea00007c	 b           |$cleanUp$44138|
  008e4		 |$LN9@DmaDiDmaFr|

; 356  :             }
; 357  :         
; 358  :         for(i =0; i < pContext->NumberOfChannels; i++)

  008e4	e3a03000	 mov         r3, #0
  008e8	e50b3028	 str         r3, [r11, #-0x28]
  008ec	ea000002	 b           |$LN8@DmaDiDmaFr|
  008f0		 |$LN7@DmaDiDmaFr|
  008f0	e51b3028	 ldr         r3, [r11, #-0x28]
  008f4	e2833001	 add         r3, r3, #1
  008f8	e50b3028	 str         r3, [r11, #-0x28]
  008fc		 |$LN8@DmaDiDmaFr|
  008fc	e51b3020	 ldr         r3, [r11, #-0x20]
  00900	e2833010	 add         r3, r3, #0x10
  00904	e51b2028	 ldr         r2, [r11, #-0x28]
  00908	e5933000	 ldr         r3, [r3]
  0090c	e1520003	 cmp         r2, r3
  00910	2a000054	 bcs         |$LN6@DmaDiDmaFr|

; 359  :             {
; 360  :             DmaDisableStandby((HANDLE)&pContext->ChannelContextArray[i], TRUE);

  00914	e3a01001	 mov         r1, #1
  00918	e51b3020	 ldr         r3, [r11, #-0x20]
  0091c	e283e028	 add         lr, r3, #0x28
  00920	e51b0028	 ldr         r0, [r11, #-0x28]
  00924	e3a03010	 mov         r3, #0x10
  00928	e0020390	 mul         r2, r0, r3
  0092c	e59e3000	 ldr         r3, [lr]
  00930	e0830002	 add         r0, r3, r2
  00934	eb000000	 bl          DmaDisableStandby

; 361  :             // stop dma, break all links, and reset status
; 362  :             WRITE_REGISTER_ULONG(&pContext->ChannelContextArray[i].pDmaChannel->CCR, 0x00000000);

  00938	e51b3020	 ldr         r3, [r11, #-0x20]
  0093c	e2830028	 add         r0, r3, #0x28
  00940	e51b1028	 ldr         r1, [r11, #-0x28]
  00944	e3a03010	 mov         r3, #0x10
  00948	e0020391	 mul         r2, r1, r3
  0094c	e5903000	 ldr         r3, [r0]
  00950	e0833002	 add         r3, r3, r2
  00954	e2833004	 add         r3, r3, #4
  00958	e5932000	 ldr         r2, [r3]
  0095c	e3a03000	 mov         r3, #0
  00960	e5823000	 str         r3, [r2]
  00964		 |$LN5@DmaDiDmaFr|

; 363  :             // ensure DMA transfer is completed by polling the active bits
; 364  :             //
; 365  :             while ((breakLoop == FALSE) && (DelayCnt != 0))

  00964	e51b302c	 ldr         r3, [r11, #-0x2C]
  00968	e3530000	 cmp         r3, #0
  0096c	1a00001a	 bne         |$LN4@DmaDiDmaFr|
  00970	e51b301c	 ldr         r3, [r11, #-0x1C]
  00974	e3530000	 cmp         r3, #0
  00978	0a000017	 beq         |$LN4@DmaDiDmaFr|

; 366  :             {
; 367  :             ulCCR = READ_REGISTER_ULONG(&pContext->ChannelContextArray[i].pDmaChannel->CCR);

  0097c	e51b3020	 ldr         r3, [r11, #-0x20]
  00980	e2830028	 add         r0, r3, #0x28
  00984	e51b1028	 ldr         r1, [r11, #-0x28]
  00988	e3a03010	 mov         r3, #0x10
  0098c	e0020391	 mul         r2, r1, r3
  00990	e5903000	 ldr         r3, [r0]
  00994	e0833002	 add         r3, r3, r2
  00998	e2833004	 add         r3, r3, #4
  0099c	e5933000	 ldr         r3, [r3]
  009a0	e5933000	 ldr         r3, [r3]
  009a4	e50b3024	 str         r3, [r11, #-0x24]

; 368  :             if ((ulCCR & DMA_CCR_WR_ACTIVE) || (ulCCR & DMA_CCR_RD_ACTIVE))

  009a8	e51b3024	 ldr         r3, [r11, #-0x24]
  009ac	e3130b01	 tst         r3, #1, 22
  009b0	1a000002	 bne         |$LN2@DmaDiDmaFr|
  009b4	e51b3024	 ldr         r3, [r11, #-0x24]
  009b8	e3130c02	 tst         r3, #2, 24
  009bc	0a000003	 beq         |$LN3@DmaDiDmaFr|
  009c0		 |$LN2@DmaDiDmaFr|

; 369  :                {
; 370  :                DelayCnt--;

  009c0	e51b301c	 ldr         r3, [r11, #-0x1C]
  009c4	e2433001	 sub         r3, r3, #1
  009c8	e50b301c	 str         r3, [r11, #-0x1C]

; 371  :                //RETAILMSG (1,(TEXT("-->DmaDiDmaFreeInterrupt - DrainDMA (DelayCnt=%d)\r\n"), DelayCnt));
; 372  :                }
; 373  :             else

  009cc	ea000001	 b           |$LN1@DmaDiDmaFr|
  009d0		 |$LN3@DmaDiDmaFr|

; 374  :                {
; 375  :                breakLoop = TRUE;

  009d0	e3a03001	 mov         r3, #1
  009d4	e50b302c	 str         r3, [r11, #-0x2C]
  009d8		 |$LN1@DmaDiDmaFr|

; 376  :                }
; 377  :             }

  009d8	eaffffe1	 b           |$LN5@DmaDiDmaFr|
  009dc		 |$LN4@DmaDiDmaFr|

; 378  : 
; 379  :             // re-enable standby in dma controller
; 380  :             //
; 381  :             DmaDisableStandby((HANDLE)&pContext->ChannelContextArray[i], FALSE);

  009dc	e3a01000	 mov         r1, #0
  009e0	e51b3020	 ldr         r3, [r11, #-0x20]
  009e4	e283e028	 add         lr, r3, #0x28
  009e8	e51b0028	 ldr         r0, [r11, #-0x28]
  009ec	e3a03010	 mov         r3, #0x10
  009f0	e0020390	 mul         r2, r0, r3
  009f4	e59e3000	 ldr         r3, [lr]
  009f8	e0830002	 add         r0, r3, r2
  009fc	eb000000	 bl          DmaDisableStandby

; 382  :             WRITE_REGISTER_ULONG(&pContext->ChannelContextArray[i].pDmaChannel->CSR, 0x00000FFE);

  00a00	e51b3020	 ldr         r3, [r11, #-0x20]
  00a04	e2830028	 add         r0, r3, #0x28
  00a08	e51b1028	 ldr         r1, [r11, #-0x28]
  00a0c	e3a03010	 mov         r3, #0x10
  00a10	e0020391	 mul         r2, r1, r3
  00a14	e5903000	 ldr         r3, [r0]
  00a18	e0833002	 add         r3, r3, r2
  00a1c	e2833004	 add         r3, r3, #4
  00a20	e5933000	 ldr         r3, [r3]
  00a24	e283200c	 add         r2, r3, #0xC
  00a28	e3a03c0f	 mov         r3, #0xF, 24
  00a2c	e38330fe	 orr         r3, r3, #0xFE
  00a30	e5823000	 str         r3, [r2]

; 383  :             WRITE_REGISTER_ULONG(&pContext->ChannelContextArray[i].pDmaChannel->CLNK_CTRL, 0x00000000);

  00a34	e51b3020	 ldr         r3, [r11, #-0x20]
  00a38	e2830028	 add         r0, r3, #0x28
  00a3c	e51b1028	 ldr         r1, [r11, #-0x28]
  00a40	e3a03010	 mov         r3, #0x10
  00a44	e0020391	 mul         r2, r1, r3
  00a48	e5903000	 ldr         r3, [r0]
  00a4c	e0833002	 add         r3, r3, r2
  00a50	e2833004	 add         r3, r3, #4
  00a54	e5933000	 ldr         r3, [r3]
  00a58	e2832004	 add         r2, r3, #4
  00a5c	e3a03000	 mov         r3, #0
  00a60	e5823000	 str         r3, [r2]

; 384  :             }

  00a64	eaffffa1	 b           |$LN7@DmaDiDmaFr|
  00a68		 |$LN6@DmaDiDmaFr|

; 385  : 
; 386  :         // reset dma interrupts and status
; 387  :         WRITE_REGISTER_ULONG(pContext->pMaskRegister, 0x00000000);

  00a68	e51b3020	 ldr         r3, [r11, #-0x20]
  00a6c	e283301c	 add         r3, r3, #0x1C
  00a70	e5932000	 ldr         r2, [r3]
  00a74	e3a03000	 mov         r3, #0
  00a78	e5823000	 str         r3, [r2]

; 388  :         WRITE_REGISTER_ULONG(pContext->pStatusRegister, 0xFFFFFFFF);

  00a7c	e51b3020	 ldr         r3, [r11, #-0x20]
  00a80	e2833020	 add         r3, r3, #0x20
  00a84	e5932000	 ldr         r2, [r3]
  00a88	e3e03000	 mvn         r3, #0
  00a8c	e5823000	 str         r3, [r2]

; 389  : 
; 390  :         //free all the resources
; 391  :         DmaDeallocateContext(pContext);

  00a90	e51b0020	 ldr         r0, [r11, #-0x20]
  00a94	eb000000	 bl          DmaDeallocateContext

; 392  : 
; 393  :         SetLastError(ERROR_SUCCESS);

  00a98	e3a00000	 mov         r0, #0
  00a9c	eb000000	 bl          SetLastError

; 394  :         rc = TRUE;

  00aa0	e3a03001	 mov         r3, #1
  00aa4	e50b3030	 str         r3, [r11, #-0x30]
  00aa8		 |$LN23@DmaDiDmaFr|

; 395  :         }

  00aa8	ea00000a	 b           |$LN24@DmaDiDmaFr|
  00aac		 |$LN19@DmaDiDmaFr|

; 397  :         {
; 398  :         ERRORMSG(TRUE, (
; 399  :                         L"ERROR! CEDDK: "
; 400  :                         L"exception free'ing dma handle\r\n"
; 401  :                        ));

  00aac	e3a02c01	 mov         r2, #1, 24
  00ab0	e3822091	 orr         r2, r2, #0x91
  00ab4	e59f1048	 ldr         r1, [pc, #0x48]
  00ab8	e59f0040	 ldr         r0, [pc, #0x40]
  00abc	eb000000	 bl          NKDbgPrintfW
  00ac0	e59f0034	 ldr         r0, [pc, #0x34]
  00ac4	eb000000	 bl          NKDbgPrintfW

; 402  :         SetLastError(ERROR_EXCEPTION_IN_SERVICE);

  00ac8	e3a00b01	 mov         r0, #1, 22
  00acc	e3800028	 orr         r0, r0, #0x28
  00ad0	eb000000	 bl          SetLastError
  00ad4	eaffffff	 b           |$LN24@DmaDiDmaFr|
  00ad8		 |$LN24@DmaDiDmaFr|
  00ad8		 |$cleanUp$44138|

; 403  :         }
; 404  : 
; 405  : cleanUp:
; 406  :     return rc; 

  00ad8	e51b3030	 ldr         r3, [r11, #-0x30]
  00adc	e50b3018	 str         r3, [r11, #-0x18]
  00ae0		 |$LN17@DmaDiDmaFr|

; 407  : }

  00ae0	e51b0018	 ldr         r0, [r11, #-0x18]
  00ae4	e24bd00c	 sub         sp, r11, #0xC
  00ae8	e89d6800	 ldmia       sp, {r11, sp, lr}
  00aec	e12fff1e	 bx          lr

			 ENDP  ; |DmaDiDmaFreeInterrupt|

  00af0		 |$LN18@DmaDiDmaFr|
  00af0		 |$LN27@DmaDiDmaFr|

; 396  :     __except (TRUE)

  00af0	e52de004	 str         lr, [sp, #-4]!
  00af4		 |$LN21@DmaDiDmaFr|
  00af4		 |$LN30@DmaDiDmaFr|
  00af4	e3a00001	 mov         r0, #1
  00af8		 |$LN20@DmaDiDmaFr|
  00af8	e49df004	 ldr         pc, [sp], #4
  00afc		 |$LN32@DmaDiDmaFr|
  00afc		 |$LN33@DmaDiDmaFr|
  00afc	00000000	 DCD         |??_C@_1FM@OLMMJHOB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$CB?$AA?5?$AAC?$AAE?$AAD?$AAD?$AAK?$AA?3?$AA?5?$AAe?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAf?$AAr?$AAe?$AAe?$AA?8?$AAi?$AAn?$AAg@|
  00b00		 |$LN34@DmaDiDmaFr|
  00b00	00000000	 DCD         |??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@|
  00b04		 |$LN35@DmaDiDmaFr|
  00b04	00000000	 DCD         |??_C@_1KO@IEMELEG@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  00b08		 |$LN36@DmaDiDmaFr|
  00b08	00000000	 DCD         |??_C@_1FK@DOJBJKJ@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAD?$AAm?$AAa?$AAF?$AAr?$AAe?$AAe?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAH@|
  00b0c		 |$LN37@DmaDiDmaFr|
  00b0c	43a608f1	 DCD         0x43a608f1
  00b10		 |$LN38@DmaDiDmaFr|
  00b10	00000000	 DCD         |??_C@_1GG@MBAKFDLI@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAD?$AAm?$AAa?$AAF?$AAr?$AAe?$AAe?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAV?$AAa?$AAl?$AAi?$AAd?$AAa?$AAt?$AAe?$AAD@|
  00b14		 |$LN39@DmaDiDmaFr|
  00b14	00000000	 DCD         |g_hDmaDrv|
  00b18		 |$LN31@DmaDiDmaFr|
  00b18		 |$LN29@DmaDiDmaFr|
	EXPORT	|??_C@_1JI@JNJAEFCG@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAF?$AAi?$AAn?$AAd?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAB?$AAy?$AAI?$AAn?$AAd?$AAe?$AAx@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HA@JDNHJBFB@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAF?$AAi?$AAn?$AAd?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAB?$AAy?$AAI?$AAn?$AAd?$AAe?$AAx@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HM@PCAGOPDN@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAF?$AAi?$AAn?$AAd?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAB?$AAy?$AAI?$AAn?$AAd?$AAe?$AAx@| [ DATA ] ; `string'
	EXPORT	|DmaDiFindInterruptChannelByIndex|

  00020			 AREA	 |.pdata|, PDATA
|$T44371| DCD	|$LN24@DmaDiFindI|
	DCD	0xc0006105
|$T44373| DCD	|$LN14@DmaDiFindI|
	DCD	0x40000a01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JI@JNJAEFCG@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAF?$AAi?$AAn?$AAd?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAB?$AAy?$AAI?$AAn?$AAd?$AAe?$AAx@| DCB "D"
	DCB	0x0, "m", 0x0, "a", 0x0, "D", 0x0, "i", 0x0, "F", 0x0, "i"
	DCB	0x0, "n", 0x0, "d", 0x0, "I", 0x0, "n", 0x0, "t", 0x0, "e"
	DCB	0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t", 0x0, "C"
	DCB	0x0, "h", 0x0, "a", 0x0, "n", 0x0, "n", 0x0, "e", 0x0, "l"
	DCB	0x0, "B", 0x0, "y", 0x0, "I", 0x0, "n", 0x0, "d", 0x0, "e"
	DCB	0x0, "x", 0x0, ":", 0x0, " ", 0x0, "e", 0x0, "x", 0x0, "c"
	DCB	0x0, "e", 0x0, "p", 0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n"
	DCB	0x0, " ", 0x0, "g", 0x0, "e", 0x0, "t", 0x0, "t", 0x0, "i"
	DCB	0x0, "n", 0x0, "g", 0x0, " ", 0x0, "d", 0x0, "m", 0x0, "a"
	DCB	0x0, " ", 0x0, "c", 0x0, "h", 0x0, "a", 0x0, "n", 0x0, "n"
	DCB	0x0, "e", 0x0, "l", 0x0, " ", 0x0, "i", 0x0, "n", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HA@JDNHJBFB@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAF?$AAi?$AAn?$AAd?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAB?$AAy?$AAI?$AAn?$AAd?$AAe?$AAx@| DCB "D"
	DCB	0x0, "m", 0x0, "a", 0x0, "D", 0x0, "i", 0x0, "F", 0x0, "i"
	DCB	0x0, "n", 0x0, "d", 0x0, "I", 0x0, "n", 0x0, "t", 0x0, "e"
	DCB	0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t", 0x0, "C"
	DCB	0x0, "h", 0x0, "a", 0x0, "n", 0x0, "n", 0x0, "e", 0x0, "l"
	DCB	0x0, "B", 0x0, "y", 0x0, "I", 0x0, "n", 0x0, "d", 0x0, "e"
	DCB	0x0, "x", 0x0, ":", 0x0, " ", 0x0, "I", 0x0, "n", 0x0, "v"
	DCB	0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d", 0x0, " ", 0x0, "H"
	DCB	0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e", 0x0, " "
	DCB	0x0, "T", 0x0, "y", 0x0, "p", 0x0, "e", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HM@PCAGOPDN@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAF?$AAi?$AAn?$AAd?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAB?$AAy?$AAI?$AAn?$AAd?$AAe?$AAx@| DCB "D"
	DCB	0x0, "m", 0x0, "a", 0x0, "D", 0x0, "i", 0x0, "F", 0x0, "i"
	DCB	0x0, "n", 0x0, "d", 0x0, "I", 0x0, "n", 0x0, "t", 0x0, "e"
	DCB	0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t", 0x0, "C"
	DCB	0x0, "h", 0x0, "a", 0x0, "n", 0x0, "n", 0x0, "e", 0x0, "l"
	DCB	0x0, "B", 0x0, "y", 0x0, "I", 0x0, "n", 0x0, "d", 0x0, "e"
	DCB	0x0, "x", 0x0, ":", 0x0, " ", 0x0, "V", 0x0, "a", 0x0, "l"
	DCB	0x0, "i", 0x0, "d", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, "D"
	DCB	0x0, "m", 0x0, "a", 0x0, "D", 0x0, "r", 0x0, "i", 0x0, "v"
	DCB	0x0, "e", 0x0, "r", 0x0, " ", 0x0, "F", 0x0, "a", 0x0, "i"
	DCB	0x0, "l", 0x0, "u", 0x0, "r", 0x0, "e", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00014			 AREA	 |.xdata|, DATA
|$T44369| DCD	0x1
	DCD	|$LN18@DmaDiFindI|
	DCD	|$LN19@DmaDiFindI|
	DCD	|$LN14@DmaDiFindI|
	DCD	|$LN15@DmaDiFindI|
; Function compile flags: /Odtp

  00b18			 AREA	 |.text|, CODE, ARM

  00b18	00000000	 DCD         |__C_specific_handler|
  00b1c	00000000	 DCD         |$T44369|

  00b20		 |DmaDiFindInterruptChannelByIndex| PROC

; 421  : {

  00b20		 |$LN24@DmaDiFindI|
  00b20	e1a0c00d	 mov         r12, sp
  00b24	e92d0001	 stmdb       sp!, {r0}
  00b28	e92d5800	 stmdb       sp!, {r11, r12, lr}
  00b2c	e28db00c	 add         r11, sp, #0xC
  00b30	e24dd018	 sub         sp, sp, #0x18
  00b34		 |$LN22@DmaDiFindI|

; 422  :     DWORD RetVal = (DWORD)-1;

  00b34	e3e03000	 mvn         r3, #0
  00b38	e50b3024	 str         r3, [r11, #-0x24]

; 423  :     CeddkDmaDIContext_t *pContext = (CeddkDmaDIContext_t*)hDmaInterrupt;

  00b3c	e59b3000	 ldr         r3, [r11]
  00b40	e50b301c	 str         r3, [r11, #-0x1C]

; 424  :     DWORD i;
; 425  :     
; 426  :     // check if dma handle is valid
; 427  :     if (ValidateDmaDriver() == FALSE || hDmaInterrupt == NULL)

  00b44	e59f317c	 ldr         r3, [pc, #0x17C]
  00b48	e5933000	 ldr         r3, [r3]
  00b4c	e3530000	 cmp         r3, #0
  00b50	0a000002	 beq         |$LN11@DmaDiFindI|
  00b54	e3a03001	 mov         r3, #1
  00b58	e50b3014	 str         r3, [r11, #-0x14]
  00b5c	ea000003	 b           |$LN12@DmaDiFindI|
  00b60		 |$LN11@DmaDiFindI|
  00b60	eb000000	 bl          LoadDmaDriver
  00b64	e50b0010	 str         r0, [r11, #-0x10]
  00b68	e51b3010	 ldr         r3, [r11, #-0x10]
  00b6c	e50b3014	 str         r3, [r11, #-0x14]
  00b70		 |$LN12@DmaDiFindI|
  00b70	e51b3014	 ldr         r3, [r11, #-0x14]
  00b74	e3530000	 cmp         r3, #0
  00b78	0a000002	 beq         |$LN7@DmaDiFindI|
  00b7c	e59b3000	 ldr         r3, [r11]
  00b80	e3530000	 cmp         r3, #0
  00b84	1a00000a	 bne         |$LN8@DmaDiFindI|
  00b88		 |$LN7@DmaDiFindI|

; 428  :         {
; 429  :         ERRORMSG(TRUE, (
; 430  :                         L"DmaDiFindInterruptChannelByIndex: ValidateDmaDriver Failure\r\n"
; 431  :                        ));

  00b88	e3a02c01	 mov         r2, #1, 24
  00b8c	e38220af	 orr         r2, r2, #0xAF
  00b90	e59f1124	 ldr         r1, [pc, #0x124]
  00b94	e59f011c	 ldr         r0, [pc, #0x11C]
  00b98	eb000000	 bl          NKDbgPrintfW
  00b9c	e59f0120	 ldr         r0, [pc, #0x120]
  00ba0	eb000000	 bl          NKDbgPrintfW

; 432  :         SetLastError(ERROR_DLL_INIT_FAILED);

  00ba4	e3a00b01	 mov         r0, #1, 22
  00ba8	e380005a	 orr         r0, r0, #0x5A
  00bac	eb000000	 bl          SetLastError

; 433  :         goto cleanUp;

  00bb0	ea000035	 b           |$cleanUp$44173|
  00bb4		 |$LN8@DmaDiFindI|
  00bb4		 |$LN18@DmaDiFindI|

; 434  :         }
; 435  : 
; 436  :     __try
; 437  :         {
; 438  :         if (pContext->cookie != DMA_DEDICATED_INTERRUPT_HANDLE_COOKIE)

  00bb4	e51b301c	 ldr         r3, [r11, #-0x1C]
  00bb8	e5932000	 ldr         r2, [r3]
  00bbc	e59f30fc	 ldr         r3, [pc, #0xFC]
  00bc0	e1520003	 cmp         r2, r3
  00bc4	0a000009	 beq         |$LN5@DmaDiFindI|

; 439  :             {
; 440  :             ERRORMSG(TRUE, (
; 441  :                         L"DmaDiFindInterruptChannelByIndex: Invalid Handle Type\r\n"
; 442  :                        ));

  00bc8	e3a02c01	 mov         r2, #1, 24
  00bcc	e38220ba	 orr         r2, r2, #0xBA
  00bd0	e59f10e4	 ldr         r1, [pc, #0xE4]
  00bd4	e59f00dc	 ldr         r0, [pc, #0xDC]
  00bd8	eb000000	 bl          NKDbgPrintfW
  00bdc	e59f00d0	 ldr         r0, [pc, #0xD0]
  00be0	eb000000	 bl          NKDbgPrintfW

; 443  :             SetLastError(ERROR_INVALID_HANDLE);

  00be4	e3a00006	 mov         r0, #6
  00be8	eb000000	 bl          SetLastError

; 444  :             goto cleanUp;

  00bec	ea000026	 b           |$cleanUp$44173|
  00bf0		 |$LN5@DmaDiFindI|

; 445  :             }
; 446  : 
; 447  :         for(i =0; i < pContext->NumberOfChannels; i++)

  00bf0	e3a03000	 mov         r3, #0
  00bf4	e50b3020	 str         r3, [r11, #-0x20]
  00bf8	ea000002	 b           |$LN4@DmaDiFindI|
  00bfc		 |$LN3@DmaDiFindI|
  00bfc	e51b3020	 ldr         r3, [r11, #-0x20]
  00c00	e2833001	 add         r3, r3, #1
  00c04	e50b3020	 str         r3, [r11, #-0x20]
  00c08		 |$LN4@DmaDiFindI|
  00c08	e51b301c	 ldr         r3, [r11, #-0x1C]
  00c0c	e2833010	 add         r3, r3, #0x10
  00c10	e51b2020	 ldr         r2, [r11, #-0x20]
  00c14	e5933000	 ldr         r3, [r3]
  00c18	e1520003	 cmp         r2, r3
  00c1c	2a000011	 bcs         |$LN2@DmaDiFindI|

; 448  :             {
; 449  :             if(pContext->ChannelContextArray[i].ChannelIntMask & *pContext->pStatusRegister)

  00c20	e51b301c	 ldr         r3, [r11, #-0x1C]
  00c24	e2830028	 add         r0, r3, #0x28
  00c28	e51b1020	 ldr         r1, [r11, #-0x20]
  00c2c	e3a03010	 mov         r3, #0x10
  00c30	e0020391	 mul         r2, r1, r3
  00c34	e5903000	 ldr         r3, [r0]
  00c38	e0833002	 add         r3, r3, r2
  00c3c	e283100c	 add         r1, r3, #0xC
  00c40	e51b301c	 ldr         r3, [r11, #-0x1C]
  00c44	e2833020	 add         r3, r3, #0x20
  00c48	e5933000	 ldr         r3, [r3]
  00c4c	e5932000	 ldr         r2, [r3]
  00c50	e5913000	 ldr         r3, [r1]
  00c54	e1130002	 tst         r3, r2
  00c58	0a000001	 beq         |$LN1@DmaDiFindI|

; 450  :                 {
; 451  :                 RetVal = i;

  00c5c	e51b3020	 ldr         r3, [r11, #-0x20]
  00c60	e50b3024	 str         r3, [r11, #-0x24]
  00c64		 |$LN1@DmaDiFindI|

; 452  :                 }
; 453  :             }

  00c64	eaffffe4	 b           |$LN3@DmaDiFindI|
  00c68		 |$LN2@DmaDiFindI|

; 454  :         SetLastError(ERROR_SUCCESS);

  00c68	e3a00000	 mov         r0, #0
  00c6c	eb000000	 bl          SetLastError
  00c70		 |$LN19@DmaDiFindI|

; 455  :         }

  00c70	ea000005	 b           |$LN20@DmaDiFindI|
  00c74		 |$LN15@DmaDiFindI|

; 457  :         {
; 458  :         RETAILMSG(TRUE, (L"DmaDiFindInterruptChannelByIndex: "
; 459  :             L"exception getting dma channel interrupt\r\n"
; 460  :             ));

  00c74	e59f0034	 ldr         r0, [pc, #0x34]
  00c78	eb000000	 bl          NKDbgPrintfW

; 461  :         SetLastError(ERROR_EXCEPTION_IN_SERVICE);

  00c7c	e3a00b01	 mov         r0, #1, 22
  00c80	e3800028	 orr         r0, r0, #0x28
  00c84	eb000000	 bl          SetLastError
  00c88	eaffffff	 b           |$LN20@DmaDiFindI|
  00c8c		 |$LN20@DmaDiFindI|
  00c8c		 |$cleanUp$44173|

; 462  :         }
; 463  : 
; 464  : cleanUp:
; 465  : 
; 466  :     return RetVal;

  00c8c	e51b3024	 ldr         r3, [r11, #-0x24]
  00c90	e50b3018	 str         r3, [r11, #-0x18]
  00c94		 |$LN13@DmaDiFindI|

; 467  : }

  00c94	e51b0018	 ldr         r0, [r11, #-0x18]
  00c98	e24bd00c	 sub         sp, r11, #0xC
  00c9c	e89d6800	 ldmia       sp, {r11, sp, lr}
  00ca0	e12fff1e	 bx          lr

			 ENDP  ; |DmaDiFindInterruptChannelByIndex|

  00ca4		 |$LN14@DmaDiFindI|
  00ca4		 |$LN23@DmaDiFindI|

; 456  :     __except (TRUE)

  00ca4	e52de004	 str         lr, [sp, #-4]!
  00ca8		 |$LN17@DmaDiFindI|
  00ca8		 |$LN26@DmaDiFindI|
  00ca8	e3a00001	 mov         r0, #1
  00cac		 |$LN16@DmaDiFindI|
  00cac	e49df004	 ldr         pc, [sp], #4
  00cb0		 |$LN28@DmaDiFindI|
  00cb0		 |$LN29@DmaDiFindI|
  00cb0	00000000	 DCD         |??_C@_1JI@JNJAEFCG@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAF?$AAi?$AAn?$AAd?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAB?$AAy?$AAI?$AAn?$AAd?$AAe?$AAx@|
  00cb4		 |$LN30@DmaDiFindI|
  00cb4	00000000	 DCD         |??_C@_1HA@JDNHJBFB@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAF?$AAi?$AAn?$AAd?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAB?$AAy?$AAI?$AAn?$AAd?$AAe?$AAx@|
  00cb8		 |$LN31@DmaDiFindI|
  00cb8	00000000	 DCD         |??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@|
  00cbc		 |$LN32@DmaDiFindI|
  00cbc	00000000	 DCD         |??_C@_1KO@IEMELEG@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  00cc0		 |$LN33@DmaDiFindI|
  00cc0	43a608f1	 DCD         0x43a608f1
  00cc4		 |$LN34@DmaDiFindI|
  00cc4	00000000	 DCD         |??_C@_1HM@PCAGOPDN@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAF?$AAi?$AAn?$AAd?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAB?$AAy?$AAI?$AAn?$AAd?$AAe?$AAx@|
  00cc8		 |$LN35@DmaDiFindI|
  00cc8	00000000	 DCD         |g_hDmaDrv|
  00ccc		 |$LN27@DmaDiFindI|
  00ccc		 |$LN25@DmaDiFindI|
	EXPORT	|??_C@_1JE@OBHPHHHD@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAC?$AAl?$AAe?$AAa?$AAr?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAB?$AAy?$AAI?$AAn?$AAd?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IC@PCDBMAPF@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAC?$AAl?$AAe?$AAa?$AAr?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAB?$AAy?$AAI?$AAn?$AAd?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HO@FNKOOPNH@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAC?$AAl?$AAe?$AAa?$AAr?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAB?$AAy?$AAI?$AAn?$AAd?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HC@KFHMPDBB@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAC?$AAl?$AAe?$AAa?$AAr?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAB?$AAy?$AAI?$AAn?$AAd?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HO@MGEODPEK@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAC?$AAl?$AAe?$AAa?$AAr?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAB?$AAy?$AAI?$AAn?$AAd?$AAe@| [ DATA ] ; `string'
	EXPORT	|DmaDiClearInterruptChannelByIndex|

  00030			 AREA	 |.pdata|, PDATA
|$T44401| DCD	|$LN22@DmaDiClear|
	DCD	0xc0007905
|$T44403| DCD	|$LN12@DmaDiClear|
	DCD	0x40000c01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JE@OBHPHHHD@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAC?$AAl?$AAe?$AAa?$AAr?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAB?$AAy?$AAI?$AAn?$AAd?$AAe@| DCB "D"
	DCB	0x0, "m", 0x0, "a", 0x0, "D", 0x0, "i", 0x0, "C", 0x0, "l"
	DCB	0x0, "e", 0x0, "a", 0x0, "r", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t"
	DCB	0x0, "C", 0x0, "h", 0x0, "a", 0x0, "n", 0x0, "n", 0x0, "e"
	DCB	0x0, "l", 0x0, "B", 0x0, "y", 0x0, "I", 0x0, "n", 0x0, "d"
	DCB	0x0, "e", 0x0, "x", 0x0, ":", 0x0, " ", 0x0, "e", 0x0, "x"
	DCB	0x0, "c", 0x0, "e", 0x0, "p", 0x0, "t", 0x0, "i", 0x0, "o"
	DCB	0x0, "n", 0x0, " ", 0x0, "c", 0x0, "l", 0x0, "e", 0x0, "a"
	DCB	0x0, "r", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, " ", 0x0, "c"
	DCB	0x0, "h", 0x0, "a", 0x0, "n", 0x0, "n", 0x0, "e", 0x0, "l"
	DCB	0x0, " ", 0x0, "i", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r"
	DCB	0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IC@PCDBMAPF@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAC?$AAl?$AAe?$AAa?$AAr?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAB?$AAy?$AAI?$AAn?$AAd?$AAe@| DCB "D"
	DCB	0x0, "m", 0x0, "a", 0x0, "D", 0x0, "i", 0x0, "C", 0x0, "l"
	DCB	0x0, "e", 0x0, "a", 0x0, "r", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t"
	DCB	0x0, "C", 0x0, "h", 0x0, "a", 0x0, "n", 0x0, "n", 0x0, "e"
	DCB	0x0, "l", 0x0, "B", 0x0, "y", 0x0, "I", 0x0, "n", 0x0, "d"
	DCB	0x0, "e", 0x0, "x", 0x0, ":", 0x0, " ", 0x0, "C", 0x0, "h"
	DCB	0x0, "a", 0x0, "n", 0x0, "n", 0x0, "e", 0x0, "l", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, " ", 0x0, "w", 0x0, "a", 0x0, "s"
	DCB	0x0, " ", 0x0, "n", 0x0, "o", 0x0, "t", 0x0, " ", 0x0, "c"
	DCB	0x0, "l", 0x0, "e", 0x0, "a", 0x0, "r", 0x0, "e", 0x0, "d"
	DCB	0x0, ".", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HO@FNKOOPNH@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAC?$AAl?$AAe?$AAa?$AAr?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAB?$AAy?$AAI?$AAn?$AAd?$AAe@| DCB "D"
	DCB	0x0, "m", 0x0, "a", 0x0, "D", 0x0, "i", 0x0, "C", 0x0, "l"
	DCB	0x0, "e", 0x0, "a", 0x0, "r", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t"
	DCB	0x0, "C", 0x0, "h", 0x0, "a", 0x0, "n", 0x0, "n", 0x0, "e"
	DCB	0x0, "l", 0x0, "B", 0x0, "y", 0x0, "I", 0x0, "n", 0x0, "d"
	DCB	0x0, "e", 0x0, "x", 0x0, ":", 0x0, " ", 0x0, "I", 0x0, "n"
	DCB	0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d", 0x0, " "
	DCB	0x0, "C", 0x0, "h", 0x0, "a", 0x0, "n", 0x0, "n", 0x0, "e"
	DCB	0x0, "l", 0x0, " ", 0x0, "N", 0x0, "u", 0x0, "m", 0x0, "b"
	DCB	0x0, "e", 0x0, "r", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HC@KFHMPDBB@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAC?$AAl?$AAe?$AAa?$AAr?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAB?$AAy?$AAI?$AAn?$AAd?$AAe@| DCB "D"
	DCB	0x0, "m", 0x0, "a", 0x0, "D", 0x0, "i", 0x0, "C", 0x0, "l"
	DCB	0x0, "e", 0x0, "a", 0x0, "r", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t"
	DCB	0x0, "C", 0x0, "h", 0x0, "a", 0x0, "n", 0x0, "n", 0x0, "e"
	DCB	0x0, "l", 0x0, "B", 0x0, "y", 0x0, "I", 0x0, "n", 0x0, "d"
	DCB	0x0, "e", 0x0, "x", 0x0, ":", 0x0, " ", 0x0, "I", 0x0, "n"
	DCB	0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d", 0x0, " "
	DCB	0x0, "H", 0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e"
	DCB	0x0, " ", 0x0, "T", 0x0, "y", 0x0, "p", 0x0, "e", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HO@MGEODPEK@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAC?$AAl?$AAe?$AAa?$AAr?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAB?$AAy?$AAI?$AAn?$AAd?$AAe@| DCB "D"
	DCB	0x0, "m", 0x0, "a", 0x0, "D", 0x0, "i", 0x0, "C", 0x0, "l"
	DCB	0x0, "e", 0x0, "a", 0x0, "r", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t"
	DCB	0x0, "C", 0x0, "h", 0x0, "a", 0x0, "n", 0x0, "n", 0x0, "e"
	DCB	0x0, "l", 0x0, "B", 0x0, "y", 0x0, "I", 0x0, "n", 0x0, "d"
	DCB	0x0, "e", 0x0, "x", 0x0, ":", 0x0, " ", 0x0, "V", 0x0, "a"
	DCB	0x0, "l", 0x0, "i", 0x0, "d", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, "D", 0x0, "m", 0x0, "a", 0x0, "D", 0x0, "r", 0x0, "i"
	DCB	0x0, "v", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "u", 0x0, "r", 0x0, "e", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00028			 AREA	 |.xdata|, DATA
|$T44399| DCD	0x1
	DCD	|$LN16@DmaDiClear|
	DCD	|$LN17@DmaDiClear|
	DCD	|$LN12@DmaDiClear|
	DCD	|$LN13@DmaDiClear|
; Function compile flags: /Odtp

  00ccc			 AREA	 |.text|, CODE, ARM

  00ccc	00000000	 DCD         |__C_specific_handler|
  00cd0	00000000	 DCD         |$T44399|

  00cd4		 |DmaDiClearInterruptChannelByIndex| PROC

; 483  : {

  00cd4		 |$LN22@DmaDiClear|
  00cd4	e1a0c00d	 mov         r12, sp
  00cd8	e92d0003	 stmdb       sp!, {r0, r1}
  00cdc	e92d5800	 stmdb       sp!, {r11, r12, lr}
  00ce0	e28db00c	 add         r11, sp, #0xC
  00ce4	e24dd014	 sub         sp, sp, #0x14
  00ce8		 |$LN20@DmaDiClear|

; 484  :     BOOL rc = FALSE;

  00ce8	e3a03000	 mov         r3, #0
  00cec	e50b3020	 str         r3, [r11, #-0x20]

; 485  :     CeddkDmaDIContext_t *pContext = (CeddkDmaDIContext_t*)hDmaInterrupt;

  00cf0	e59b3000	 ldr         r3, [r11]
  00cf4	e50b301c	 str         r3, [r11, #-0x1C]

; 486  :     
; 487  :     // check if dma handle is valid
; 488  :     if (ValidateDmaDriver() == FALSE || hDmaInterrupt == NULL)

  00cf8	e59f31e4	 ldr         r3, [pc, #0x1E4]
  00cfc	e5933000	 ldr         r3, [r3]
  00d00	e3530000	 cmp         r3, #0
  00d04	0a000002	 beq         |$LN9@DmaDiClear|
  00d08	e3a03001	 mov         r3, #1
  00d0c	e50b3014	 str         r3, [r11, #-0x14]
  00d10	ea000003	 b           |$LN10@DmaDiClear|
  00d14		 |$LN9@DmaDiClear|
  00d14	eb000000	 bl          LoadDmaDriver
  00d18	e50b0010	 str         r0, [r11, #-0x10]
  00d1c	e51b3010	 ldr         r3, [r11, #-0x10]
  00d20	e50b3014	 str         r3, [r11, #-0x14]
  00d24		 |$LN10@DmaDiClear|
  00d24	e51b3014	 ldr         r3, [r11, #-0x14]
  00d28	e3530000	 cmp         r3, #0
  00d2c	0a000002	 beq         |$LN5@DmaDiClear|
  00d30	e59b3000	 ldr         r3, [r11]
  00d34	e3530000	 cmp         r3, #0
  00d38	1a000009	 bne         |$LN6@DmaDiClear|
  00d3c		 |$LN5@DmaDiClear|

; 489  :         {
; 490  :         ERRORMSG(TRUE, (
; 491  :                         L"DmaDiClearInterruptChannelByIndex: ValidateDmaDriver Failure\r\n"
; 492  :                        ));

  00d3c	e3a02f7b	 mov         r2, #0x7B, 30
  00d40	e59f1184	 ldr         r1, [pc, #0x184]
  00d44	e59f017c	 ldr         r0, [pc, #0x17C]
  00d48	eb000000	 bl          NKDbgPrintfW
  00d4c	e59f018c	 ldr         r0, [pc, #0x18C]
  00d50	eb000000	 bl          NKDbgPrintfW

; 493  :         SetLastError(ERROR_DLL_INIT_FAILED);

  00d54	e3a00b01	 mov         r0, #1, 22
  00d58	e380005a	 orr         r0, r0, #0x5A
  00d5c	eb000000	 bl          SetLastError

; 494  :         goto cleanUp;

  00d60	ea00004e	 b           |$cleanUp$44195|
  00d64		 |$LN6@DmaDiClear|
  00d64		 |$LN16@DmaDiClear|

; 495  :         }
; 496  : 
; 497  :     __try
; 498  :         {
; 499  :         if (pContext->cookie != DMA_DEDICATED_INTERRUPT_HANDLE_COOKIE)

  00d64	e51b301c	 ldr         r3, [r11, #-0x1C]
  00d68	e5932000	 ldr         r2, [r3]
  00d6c	e59f3168	 ldr         r3, [pc, #0x168]
  00d70	e1520003	 cmp         r2, r3
  00d74	0a000009	 beq         |$LN3@DmaDiClear|

; 500  :             {
; 501  :             ERRORMSG(TRUE, (
; 502  :                         L"DmaDiClearInterruptChannelByIndex: Invalid Handle Type\r\n"
; 503  :                        ));

  00d78	e3a02c01	 mov         r2, #1, 24
  00d7c	e38220f7	 orr         r2, r2, #0xF7
  00d80	e59f1144	 ldr         r1, [pc, #0x144]
  00d84	e59f013c	 ldr         r0, [pc, #0x13C]
  00d88	eb000000	 bl          NKDbgPrintfW
  00d8c	e59f0144	 ldr         r0, [pc, #0x144]
  00d90	eb000000	 bl          NKDbgPrintfW

; 504  :             SetLastError(ERROR_INVALID_HANDLE);

  00d94	e3a00006	 mov         r0, #6
  00d98	eb000000	 bl          SetLastError

; 505  :             goto cleanUp;

  00d9c	ea00003f	 b           |$cleanUp$44195|
  00da0		 |$LN3@DmaDiClear|

; 506  :             }
; 507  : 
; 508  :         if(ChannelIndex > pContext->NumberOfChannels)

  00da0	e51b301c	 ldr         r3, [r11, #-0x1C]
  00da4	e2833010	 add         r3, r3, #0x10
  00da8	e59b2004	 ldr         r2, [r11, #4]
  00dac	e5933000	 ldr         r3, [r3]
  00db0	e1520003	 cmp         r2, r3
  00db4	9a00000a	 bls         |$LN2@DmaDiClear|

; 509  :             {
; 510  :             ERRORMSG(TRUE, (
; 511  :                         L"DmaDiClearInterruptChannelByIndex: Invalid Channel Number %d\r\n",
; 512  :                        ChannelIndex
; 513  :                        ));

  00db8	e3a02c02	 mov         r2, #2, 24
  00dbc	e3822001	 orr         r2, r2, #1
  00dc0	e59f1104	 ldr         r1, [pc, #0x104]
  00dc4	e59f00fc	 ldr         r0, [pc, #0xFC]
  00dc8	eb000000	 bl          NKDbgPrintfW
  00dcc	e59b1004	 ldr         r1, [r11, #4]
  00dd0	e59f00fc	 ldr         r0, [pc, #0xFC]
  00dd4	eb000000	 bl          NKDbgPrintfW

; 514  :             SetLastError(ERROR_INVALID_PARAMETER);

  00dd8	e3a00057	 mov         r0, #0x57
  00ddc	eb000000	 bl          SetLastError

; 515  :             goto cleanUp;

  00de0	ea00002e	 b           |$cleanUp$44195|
  00de4		 |$LN2@DmaDiClear|

; 516  :             }
; 517  : 
; 518  :         *pContext->pStatusRegister = pContext->ChannelContextArray[ChannelIndex].ChannelIntMask;

  00de4	e51b301c	 ldr         r3, [r11, #-0x1C]
  00de8	e2830028	 add         r0, r3, #0x28
  00dec	e59b1004	 ldr         r1, [r11, #4]
  00df0	e3a03010	 mov         r3, #0x10
  00df4	e0020391	 mul         r2, r1, r3
  00df8	e5903000	 ldr         r3, [r0]
  00dfc	e0833002	 add         r3, r3, r2
  00e00	e283100c	 add         r1, r3, #0xC
  00e04	e51b301c	 ldr         r3, [r11, #-0x1C]
  00e08	e2833020	 add         r3, r3, #0x20
  00e0c	e5932000	 ldr         r2, [r3]
  00e10	e5913000	 ldr         r3, [r1]
  00e14	e5823000	 str         r3, [r2]

; 519  : 
; 520  :         if(*pContext->pStatusRegister & pContext->ChannelContextArray[ChannelIndex].ChannelIntMask)

  00e18	e51b301c	 ldr         r3, [r11, #-0x1C]
  00e1c	e2833020	 add         r3, r3, #0x20
  00e20	e593e000	 ldr         lr, [r3]
  00e24	e51b301c	 ldr         r3, [r11, #-0x1C]
  00e28	e2830028	 add         r0, r3, #0x28
  00e2c	e59b1004	 ldr         r1, [r11, #4]
  00e30	e3a03010	 mov         r3, #0x10
  00e34	e0020391	 mul         r2, r1, r3
  00e38	e5903000	 ldr         r3, [r0]
  00e3c	e0833002	 add         r3, r3, r2
  00e40	e283300c	 add         r3, r3, #0xC
  00e44	e59e2000	 ldr         r2, [lr]
  00e48	e5933000	 ldr         r3, [r3]
  00e4c	e1120003	 tst         r2, r3
  00e50	0a000002	 beq         |$LN1@DmaDiClear|

; 521  :             {
; 522  :             //most likely DMA4_CSRi was not cleared
; 523  :             DEBUGMSG(1, (
; 524  :                 L"DmaDiClearInterruptChannelByIndex: Channel %d was not cleared.\r\n",
; 525  :                ChannelIndex
; 526  :                ));

  00e54	e59b1004	 ldr         r1, [r11, #4]
  00e58	e59f0070	 ldr         r0, [pc, #0x70]
  00e5c	eb000000	 bl          NKDbgPrintfW
  00e60		 |$LN1@DmaDiClear|

; 527  :             }
; 528  : 
; 529  :         rc = TRUE;

  00e60	e3a03001	 mov         r3, #1
  00e64	e50b3020	 str         r3, [r11, #-0x20]

; 530  :         SetLastError(ERROR_SUCCESS);

  00e68	e3a00000	 mov         r0, #0
  00e6c	eb000000	 bl          SetLastError
  00e70		 |$LN17@DmaDiClear|

; 531  :         }

  00e70	ea00000a	 b           |$LN18@DmaDiClear|
  00e74		 |$LN13@DmaDiClear|

; 533  :         {
; 534  :         ERRORMSG(TRUE, (
; 535  :             L"DmaDiClearInterruptChannelByIndex: "
; 536  :             L"exception clearing channel interrupt\r\n"
; 537  :             ));

  00e74	e3a02c02	 mov         r2, #2, 24
  00e78	e3822019	 orr         r2, r2, #0x19
  00e7c	e59f1048	 ldr         r1, [pc, #0x48]
  00e80	e59f0040	 ldr         r0, [pc, #0x40]
  00e84	eb000000	 bl          NKDbgPrintfW
  00e88	e59f0034	 ldr         r0, [pc, #0x34]
  00e8c	eb000000	 bl          NKDbgPrintfW

; 538  :         SetLastError(ERROR_EXCEPTION_IN_SERVICE);

  00e90	e3a00b01	 mov         r0, #1, 22
  00e94	e3800028	 orr         r0, r0, #0x28
  00e98	eb000000	 bl          SetLastError
  00e9c	eaffffff	 b           |$LN18@DmaDiClear|
  00ea0		 |$LN18@DmaDiClear|
  00ea0		 |$cleanUp$44195|

; 539  :         }
; 540  : 
; 541  : cleanUp:
; 542  : 
; 543  :     return rc;

  00ea0	e51b3020	 ldr         r3, [r11, #-0x20]
  00ea4	e50b3018	 str         r3, [r11, #-0x18]
  00ea8		 |$LN11@DmaDiClear|

; 544  : }

  00ea8	e51b0018	 ldr         r0, [r11, #-0x18]
  00eac	e24bd00c	 sub         sp, r11, #0xC
  00eb0	e89d6800	 ldmia       sp, {r11, sp, lr}
  00eb4	e12fff1e	 bx          lr

			 ENDP  ; |DmaDiClearInterruptChannelByIndex|

  00eb8		 |$LN12@DmaDiClear|
  00eb8		 |$LN21@DmaDiClear|

; 532  :     __except (TRUE)

  00eb8	e52de004	 str         lr, [sp, #-4]!
  00ebc		 |$LN15@DmaDiClear|
  00ebc		 |$LN24@DmaDiClear|
  00ebc	e3a00001	 mov         r0, #1
  00ec0		 |$LN14@DmaDiClear|
  00ec0	e49df004	 ldr         pc, [sp], #4
  00ec4		 |$LN26@DmaDiClear|
  00ec4		 |$LN27@DmaDiClear|
  00ec4	00000000	 DCD         |??_C@_1JE@OBHPHHHD@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAC?$AAl?$AAe?$AAa?$AAr?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAB?$AAy?$AAI?$AAn?$AAd?$AAe@|
  00ec8		 |$LN28@DmaDiClear|
  00ec8	00000000	 DCD         |??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@|
  00ecc		 |$LN29@DmaDiClear|
  00ecc	00000000	 DCD         |??_C@_1KO@IEMELEG@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  00ed0		 |$LN30@DmaDiClear|
  00ed0	00000000	 DCD         |??_C@_1IC@PCDBMAPF@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAC?$AAl?$AAe?$AAa?$AAr?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAB?$AAy?$AAI?$AAn?$AAd?$AAe@|
  00ed4		 |$LN31@DmaDiClear|
  00ed4	00000000	 DCD         |??_C@_1HO@FNKOOPNH@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAC?$AAl?$AAe?$AAa?$AAr?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAB?$AAy?$AAI?$AAn?$AAd?$AAe@|
  00ed8		 |$LN32@DmaDiClear|
  00ed8	00000000	 DCD         |??_C@_1HC@KFHMPDBB@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAC?$AAl?$AAe?$AAa?$AAr?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAB?$AAy?$AAI?$AAn?$AAd?$AAe@|
  00edc		 |$LN33@DmaDiClear|
  00edc	43a608f1	 DCD         0x43a608f1
  00ee0		 |$LN34@DmaDiClear|
  00ee0	00000000	 DCD         |??_C@_1HO@MGEODPEK@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAC?$AAl?$AAe?$AAa?$AAr?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAB?$AAy?$AAI?$AAn?$AAd?$AAe@|
  00ee4		 |$LN35@DmaDiClear|
  00ee4	00000000	 DCD         |g_hDmaDrv|
  00ee8		 |$LN25@DmaDiClear|
  00ee8		 |$LN23@DmaDiClear|
	EXPORT	|??_C@_1HG@NEFDHMGL@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAD?$AAo?$AAn?$AAe?$AA?3?$AA?5?$AAe?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAc?$AAl@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FE@NPICJGD@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAD?$AAo?$AAn?$AAe?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAH?$AAa?$AAn?$AAd@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GA@FDFNBJJB@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAD?$AAo?$AAn?$AAe?$AA?3?$AA?5?$AAV?$AAa?$AAl?$AAi?$AAd?$AAa?$AAt?$AAe?$AAD?$AAm?$AAa?$AAD@| [ DATA ] ; `string'
	EXPORT	|DmaDiInterruptDone|
	IMPORT	|InterruptDone|

  00040			 AREA	 |.pdata|, PDATA
|$T44433| DCD	|$LN20@DmaDiInter|
	DCD	0xc0004d05
|$T44435| DCD	|$LN10@DmaDiInter|
	DCD	0x40000a01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HG@NEFDHMGL@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAD?$AAo?$AAn?$AAe?$AA?3?$AA?5?$AAe?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAc?$AAl@| DCB "D"
	DCB	0x0, "m", 0x0, "a", 0x0, "D", 0x0, "i", 0x0, "I", 0x0, "n"
	DCB	0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p"
	DCB	0x0, "t", 0x0, "D", 0x0, "o", 0x0, "n", 0x0, "e", 0x0, ":"
	DCB	0x0, " ", 0x0, "e", 0x0, "x", 0x0, "c", 0x0, "e", 0x0, "p"
	DCB	0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, " ", 0x0, "c"
	DCB	0x0, "l", 0x0, "e", 0x0, "a", 0x0, "r", 0x0, "i", 0x0, "n"
	DCB	0x0, "g", 0x0, " ", 0x0, "c", 0x0, "h", 0x0, "a", 0x0, "n"
	DCB	0x0, "n", 0x0, "e", 0x0, "l", 0x0, " ", 0x0, "i", 0x0, "n"
	DCB	0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p"
	DCB	0x0, "t", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FE@NPICJGD@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAD?$AAo?$AAn?$AAe?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAH?$AAa?$AAn?$AAd@| DCB "D"
	DCB	0x0, "m", 0x0, "a", 0x0, "D", 0x0, "i", 0x0, "I", 0x0, "n"
	DCB	0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p"
	DCB	0x0, "t", 0x0, "D", 0x0, "o", 0x0, "n", 0x0, "e", 0x0, ":"
	DCB	0x0, " ", 0x0, "I", 0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l"
	DCB	0x0, "i", 0x0, "d", 0x0, " ", 0x0, "H", 0x0, "a", 0x0, "n"
	DCB	0x0, "d", 0x0, "l", 0x0, "e", 0x0, " ", 0x0, "T", 0x0, "y"
	DCB	0x0, "p", 0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GA@FDFNBJJB@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAD?$AAo?$AAn?$AAe?$AA?3?$AA?5?$AAV?$AAa?$AAl?$AAi?$AAd?$AAa?$AAt?$AAe?$AAD?$AAm?$AAa?$AAD@| DCB "D"
	DCB	0x0, "m", 0x0, "a", 0x0, "D", 0x0, "i", 0x0, "I", 0x0, "n"
	DCB	0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p"
	DCB	0x0, "t", 0x0, "D", 0x0, "o", 0x0, "n", 0x0, "e", 0x0, ":"
	DCB	0x0, " ", 0x0, "V", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d"
	DCB	0x0, "a", 0x0, "t", 0x0, "e", 0x0, "D", 0x0, "m", 0x0, "a"
	DCB	0x0, "D", 0x0, "r", 0x0, "i", 0x0, "v", 0x0, "e", 0x0, "r"
	DCB	0x0, " ", 0x0, "F", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "u"
	DCB	0x0, "r", 0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  0003c			 AREA	 |.xdata|, DATA
|$T44431| DCD	0x1
	DCD	|$LN14@DmaDiInter|
	DCD	|$LN15@DmaDiInter|
	DCD	|$LN10@DmaDiInter|
	DCD	|$LN11@DmaDiInter|
; Function compile flags: /Odtp

  00ee8			 AREA	 |.text|, CODE, ARM

  00ee8	00000000	 DCD         |__C_specific_handler|
  00eec	00000000	 DCD         |$T44431|

  00ef0		 |DmaDiInterruptDone| PROC

; 559  : {

  00ef0		 |$LN20@DmaDiInter|
  00ef0	e1a0c00d	 mov         r12, sp
  00ef4	e92d0001	 stmdb       sp!, {r0}
  00ef8	e92d5800	 stmdb       sp!, {r11, r12, lr}
  00efc	e28db00c	 add         r11, sp, #0xC
  00f00	e24dd014	 sub         sp, sp, #0x14
  00f04		 |$LN18@DmaDiInter|

; 560  :     BOOL rc = FALSE;

  00f04	e3a03000	 mov         r3, #0
  00f08	e50b3020	 str         r3, [r11, #-0x20]

; 561  :     CeddkDmaDIContext_t *pContext = (CeddkDmaDIContext_t*)hDmaInterrupt;

  00f0c	e59b3000	 ldr         r3, [r11]
  00f10	e50b301c	 str         r3, [r11, #-0x1C]

; 562  :     
; 563  :     // check if dma handle is valid
; 564  :     // check if dma handle is valid
; 565  :     if (ValidateDmaDriver() == FALSE || hDmaInterrupt == NULL)

  00f14	e59f312c	 ldr         r3, [pc, #0x12C]
  00f18	e5933000	 ldr         r3, [r3]
  00f1c	e3530000	 cmp         r3, #0
  00f20	0a000002	 beq         |$LN7@DmaDiInter|
  00f24	e3a03001	 mov         r3, #1
  00f28	e50b3014	 str         r3, [r11, #-0x14]
  00f2c	ea000003	 b           |$LN8@DmaDiInter|
  00f30		 |$LN7@DmaDiInter|
  00f30	eb000000	 bl          LoadDmaDriver
  00f34	e50b0010	 str         r0, [r11, #-0x10]
  00f38	e51b3010	 ldr         r3, [r11, #-0x10]
  00f3c	e50b3014	 str         r3, [r11, #-0x14]
  00f40		 |$LN8@DmaDiInter|
  00f40	e51b3014	 ldr         r3, [r11, #-0x14]
  00f44	e3530000	 cmp         r3, #0
  00f48	0a000002	 beq         |$LN3@DmaDiInter|
  00f4c	e59b3000	 ldr         r3, [r11]
  00f50	e3530000	 cmp         r3, #0
  00f54	1a00000a	 bne         |$LN4@DmaDiInter|
  00f58		 |$LN3@DmaDiInter|

; 566  :         {
; 567  :         ERRORMSG(TRUE, (
; 568  :                         L"DmaDiInterruptDone: ValidateDmaDriver Failure\r\n"
; 569  :                        ));

  00f58	e3a02c02	 mov         r2, #2, 24
  00f5c	e3822039	 orr         r2, r2, #0x39
  00f60	e59f10d0	 ldr         r1, [pc, #0xD0]
  00f64	e59f00c8	 ldr         r0, [pc, #0xC8]
  00f68	eb000000	 bl          NKDbgPrintfW
  00f6c	e59f00d0	 ldr         r0, [pc, #0xD0]
  00f70	eb000000	 bl          NKDbgPrintfW

; 570  :         SetLastError(ERROR_DLL_INIT_FAILED);

  00f74	e3a00b01	 mov         r0, #1, 22
  00f78	e380005a	 orr         r0, r0, #0x5A
  00f7c	eb000000	 bl          SetLastError

; 571  :         goto cleanUp;

  00f80	ea000021	 b           |$cleanUp$44216|
  00f84		 |$LN4@DmaDiInter|
  00f84		 |$LN14@DmaDiInter|

; 572  :         }
; 573  : 
; 574  :     __try
; 575  :         {
; 576  :         if (pContext->cookie != DMA_DEDICATED_INTERRUPT_HANDLE_COOKIE)

  00f84	e51b301c	 ldr         r3, [r11, #-0x1C]
  00f88	e5932000	 ldr         r2, [r3]
  00f8c	e59f30ac	 ldr         r3, [pc, #0xAC]
  00f90	e1520003	 cmp         r2, r3
  00f94	0a000008	 beq         |$LN1@DmaDiInter|

; 577  :             {
; 578  :             ERRORMSG(TRUE, (
; 579  :                         L"DmaDiInterruptDone: Invalid Handle Type\r\n"
; 580  :                        ));

  00f98	e3a02f91	 mov         r2, #0x91, 30
  00f9c	e59f1094	 ldr         r1, [pc, #0x94]
  00fa0	e59f008c	 ldr         r0, [pc, #0x8C]
  00fa4	eb000000	 bl          NKDbgPrintfW
  00fa8	e59f008c	 ldr         r0, [pc, #0x8C]
  00fac	eb000000	 bl          NKDbgPrintfW

; 581  :             SetLastError(ERROR_INVALID_HANDLE);

  00fb0	e3a00006	 mov         r0, #6
  00fb4	eb000000	 bl          SetLastError

; 582  :             goto cleanUp;

  00fb8	ea000013	 b           |$cleanUp$44216|
  00fbc		 |$LN1@DmaDiInter|

; 583  :             }
; 584  : 
; 585  :             InterruptDone(pContext->SysInterruptNum); 

  00fbc	e51b301c	 ldr         r3, [r11, #-0x1C]
  00fc0	e283300c	 add         r3, r3, #0xC
  00fc4	e5930000	 ldr         r0, [r3]
  00fc8	eb000000	 bl          InterruptDone

; 586  :             rc = TRUE;

  00fcc	e3a03001	 mov         r3, #1
  00fd0	e50b3020	 str         r3, [r11, #-0x20]

; 587  :             SetLastError(ERROR_SUCCESS);

  00fd4	e3a00000	 mov         r0, #0
  00fd8	eb000000	 bl          SetLastError
  00fdc		 |$LN15@DmaDiInter|

; 588  : 
; 589  :         }

  00fdc	ea00000a	 b           |$LN16@DmaDiInter|
  00fe0		 |$LN11@DmaDiInter|

; 591  :         {
; 592  :         ERRORMSG(TRUE, (
; 593  :             L"DmaDiInterruptDone: "
; 594  :             L"exception clearing channel interrupt\r\n"
; 595  :             ));

  00fe0	e3a02c02	 mov         r2, #2, 24
  00fe4	e3822053	 orr         r2, r2, #0x53
  00fe8	e59f1048	 ldr         r1, [pc, #0x48]
  00fec	e59f0040	 ldr         r0, [pc, #0x40]
  00ff0	eb000000	 bl          NKDbgPrintfW
  00ff4	e59f0034	 ldr         r0, [pc, #0x34]
  00ff8	eb000000	 bl          NKDbgPrintfW

; 596  :         SetLastError(ERROR_EXCEPTION_IN_SERVICE);

  00ffc	e3a00b01	 mov         r0, #1, 22
  01000	e3800028	 orr         r0, r0, #0x28
  01004	eb000000	 bl          SetLastError
  01008	eaffffff	 b           |$LN16@DmaDiInter|
  0100c		 |$LN16@DmaDiInter|
  0100c		 |$cleanUp$44216|

; 597  :         }
; 598  : 
; 599  : cleanUp:
; 600  : 
; 601  :     return rc;

  0100c	e51b3020	 ldr         r3, [r11, #-0x20]
  01010	e50b3018	 str         r3, [r11, #-0x18]
  01014		 |$LN9@DmaDiInter|

; 602  : }

  01014	e51b0018	 ldr         r0, [r11, #-0x18]
  01018	e24bd00c	 sub         sp, r11, #0xC
  0101c	e89d6800	 ldmia       sp, {r11, sp, lr}
  01020	e12fff1e	 bx          lr

			 ENDP  ; |DmaDiInterruptDone|

  01024		 |$LN10@DmaDiInter|
  01024		 |$LN19@DmaDiInter|

; 590  :     __except (TRUE)

  01024	e52de004	 str         lr, [sp, #-4]!
  01028		 |$LN13@DmaDiInter|
  01028		 |$LN22@DmaDiInter|
  01028	e3a00001	 mov         r0, #1
  0102c		 |$LN12@DmaDiInter|
  0102c	e49df004	 ldr         pc, [sp], #4
  01030		 |$LN24@DmaDiInter|
  01030		 |$LN25@DmaDiInter|
  01030	00000000	 DCD         |??_C@_1HG@NEFDHMGL@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAD?$AAo?$AAn?$AAe?$AA?3?$AA?5?$AAe?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAc?$AAl@|
  01034		 |$LN26@DmaDiInter|
  01034	00000000	 DCD         |??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@|
  01038		 |$LN27@DmaDiInter|
  01038	00000000	 DCD         |??_C@_1KO@IEMELEG@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  0103c		 |$LN28@DmaDiInter|
  0103c	00000000	 DCD         |??_C@_1FE@NPICJGD@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAD?$AAo?$AAn?$AAe?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAH?$AAa?$AAn?$AAd@|
  01040		 |$LN29@DmaDiInter|
  01040	43a608f1	 DCD         0x43a608f1
  01044		 |$LN30@DmaDiInter|
  01044	00000000	 DCD         |??_C@_1GA@FDFNBJJB@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAD?$AAo?$AAn?$AAe?$AA?3?$AA?5?$AAV?$AAa?$AAl?$AAi?$AAd?$AAa?$AAt?$AAe?$AAD?$AAm?$AAa?$AAD@|
  01048		 |$LN31@DmaDiInter|
  01048	00000000	 DCD         |g_hDmaDrv|
  0104c		 |$LN23@DmaDiInter|
  0104c		 |$LN21@DmaDiInter|
	END
