; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\CEDDK\REG\registry.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|??_C@_1DG@HMCHMIHB@?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AA?3?$AA?5?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5?$AAk?$AAe?$AAy?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|GetDeviceRegistryParams|
	IMPORT	|LocalFree|
	IMPORT	|RegCloseKey|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|RegOpenKeyExW|
	IMPORT	|OpenDeviceKey|

  00000			 AREA	 |.pdata|, PDATA
|$T39503| DCD	|$LN30@GetDeviceR|
	DCD	0x4000b304
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\ceddk\reg\registry.c

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DG@HMCHMIHB@?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AA?3?$AA?5?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5?$AAk?$AAe?$AAy?$AA?$AN?$AA?6?$AA?$AA@| DCB "R"
	DCB	0x0, "e", 0x0, "g", 0x0, "i", 0x0, "s", 0x0, "t", 0x0, "r"
	DCB	0x0, "y", 0x0, ":", 0x0, " ", 0x0, "c", 0x0, "a", 0x0, "n"
	DCB	0x0, "'", 0x0, "t", 0x0, " ", 0x0, "o", 0x0, "p", 0x0, "e"
	DCB	0x0, "n", 0x0, " ", 0x0, "k", 0x0, "e", 0x0, "y", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |GetDeviceRegistryParams| PROC

; 288  : {

  00000		 |$LN30@GetDeviceR|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d000f	 stmdb       sp!, {r0 - r3}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd040	 sub         sp, sp, #0x40
  00010		 |$M39500|

; 289  :     DWORD status = ERROR_SUCCESS;

  00010	e3a03000	 mov         r3, #0
  00014	e58d300c	 str         r3, [sp, #0xC]

; 290  :     HKEY hKey;
; 291  :     DWORD i;
; 292  : 
; 293  :     // Open registry context to read parameters
; 294  :     if ((hKey = OpenDeviceKey(context)) == NULL)

  00018	e59d0048	 ldr         r0, [sp, #0x48]
  0001c	eb000000	 bl          OpenDeviceKey
  00020	e58d0020	 str         r0, [sp, #0x20]
  00024	e59d3020	 ldr         r3, [sp, #0x20]
  00028	e58d3008	 str         r3, [sp, #8]
  0002c	e59d3008	 ldr         r3, [sp, #8]
  00030	e3530000	 cmp         r3, #0
  00034	1a00000f	 bne         |$LN19@GetDeviceR|

; 295  :         {
; 296  :         // It looks like we didn't get active registry key,
; 297  :         // try open key directly
; 298  :         if ((status = RegOpenKeyEx(
; 299  :             HKEY_LOCAL_MACHINE, context, 0, 0, &hKey
; 300  :             )) != ERROR_SUCCESS) 

  00038	e28d3008	 add         r3, sp, #8
  0003c	e58d3000	 str         r3, [sp]
  00040	e3a03000	 mov         r3, #0
  00044	e3a02000	 mov         r2, #0
  00048	e59d1048	 ldr         r1, [sp, #0x48]
  0004c	e3a0010a	 mov         r0, #0xA, 2
  00050	eb000000	 bl          RegOpenKeyExW
  00054	e58d0024	 str         r0, [sp, #0x24]
  00058	e59d3024	 ldr         r3, [sp, #0x24]
  0005c	e58d300c	 str         r3, [sp, #0xC]
  00060	e59d300c	 ldr         r3, [sp, #0xC]
  00064	e3530000	 cmp         r3, #0
  00068	0a000002	 beq         |$LN18@GetDeviceR|

; 301  :         {
; 302  :             RETAILMSG(1, (L"Registry: can't open key\r\n"));

  0006c	e59f0254	 ldr         r0, [pc, #0x254]
  00070	eb000000	 bl          NKDbgPrintfW

; 303  :             goto cleanUp;

  00074	ea00008d	 b           |$cleanUp$39402|
  00078		 |$LN18@GetDeviceR|
  00078		 |$LN19@GetDeviceR|

; 304  :         }
; 305  :         }
; 306  : 
; 307  :     // For all members of array
; 308  :     for (i = 0; i < count && status == ERROR_SUCCESS; i++)

  00078	e3a03000	 mov         r3, #0
  0007c	e58d3004	 str         r3, [sp, #4]
  00080	ea000002	 b           |$LN17@GetDeviceR|
  00084		 |$LN16@GetDeviceR|
  00084	e59d3004	 ldr         r3, [sp, #4]
  00088	e2833001	 add         r3, r3, #1
  0008c	e58d3004	 str         r3, [sp, #4]
  00090		 |$LN17@GetDeviceR|
  00090	e59d2004	 ldr         r2, [sp, #4]
  00094	e59d3050	 ldr         r3, [sp, #0x50]
  00098	e1520003	 cmp         r2, r3
  0009c	2a00004d	 bcs         |$LN15@GetDeviceR|
  000a0	e59d300c	 ldr         r3, [sp, #0xC]
  000a4	e3530000	 cmp         r3, #0
  000a8	1a00004a	 bne         |$LN15@GetDeviceR|

; 309  :         {
; 310  :         switch (params[i].type)

  000ac	e59d1004	 ldr         r1, [sp, #4]
  000b0	e3a03018	 mov         r3, #0x18
  000b4	e0020391	 mul         r2, r1, r3
  000b8	e59d3054	 ldr         r3, [sp, #0x54]
  000bc	e0833002	 add         r3, r3, r2
  000c0	e2833004	 add         r3, r3, #4
  000c4	e5933000	 ldr         r3, [r3]
  000c8	e58d3028	 str         r3, [sp, #0x28]
  000cc	e59d3028	 ldr         r3, [sp, #0x28]
  000d0	e2433001	 sub         r3, r3, #1
  000d4	e58d3028	 str         r3, [sp, #0x28]
  000d8	e59d3028	 ldr         r3, [sp, #0x28]
  000dc	e3530003	 cmp         r3, #3
  000e0	8a000038	 bhi         |$LN8@GetDeviceR|
  000e4	e59d2028	 ldr         r2, [sp, #0x28]
  000e8	e1a03102	 mov         r3, r2, lsl #2
  000ec	e083300f	 add         r3, r3, pc
  000f0	e5933004	 ldr         r3, [r3, #4]
  000f4	e08ff003	 add         pc, pc, r3
  000f8		 |$LN23@GetDeviceR|
  000f8		 |$LN22@GetDeviceR|
  000f8		 |$LN24@GetDeviceR|
  000f8	0000000c	 DCD         0xc
  000fc		 |$LN25@GetDeviceR|
  000fc	0000003c	 DCD         0x3c
  00100		 |$LN26@GetDeviceR|
  00100	0000006c	 DCD         0x6c
  00104		 |$LN27@GetDeviceR|
  00104	0000009c	 DCD         0x9c
  00108		 |$LN12@GetDeviceR|

; 311  :             {
; 312  :             case PARAM_DWORD:
; 313  :                 status = GetDWordParam(hKey, pBase, &params[i]);

  00108	e59d1004	 ldr         r1, [sp, #4]
  0010c	e3a03018	 mov         r3, #0x18
  00110	e0020391	 mul         r2, r1, r3
  00114	e59d3054	 ldr         r3, [sp, #0x54]
  00118	e0832002	 add         r2, r3, r2
  0011c	e59d104c	 ldr         r1, [sp, #0x4C]
  00120	e59d0008	 ldr         r0, [sp, #8]
  00124	eb000000	 bl          GetDWordParam
  00128	e58d002c	 str         r0, [sp, #0x2C]
  0012c	e59d302c	 ldr         r3, [sp, #0x2C]
  00130	e58d300c	 str         r3, [sp, #0xC]

; 314  :                 break;

  00134	ea000026	 b           |$LN13@GetDeviceR|
  00138		 |$LN11@GetDeviceR|

; 315  :             case PARAM_STRING:
; 316  :                 status = GetStringParam(hKey, pBase, &params[i]);

  00138	e59d1004	 ldr         r1, [sp, #4]
  0013c	e3a03018	 mov         r3, #0x18
  00140	e0020391	 mul         r2, r1, r3
  00144	e59d3054	 ldr         r3, [sp, #0x54]
  00148	e0832002	 add         r2, r3, r2
  0014c	e59d104c	 ldr         r1, [sp, #0x4C]
  00150	e59d0008	 ldr         r0, [sp, #8]
  00154	eb000000	 bl          GetStringParam
  00158	e58d0030	 str         r0, [sp, #0x30]
  0015c	e59d3030	 ldr         r3, [sp, #0x30]
  00160	e58d300c	 str         r3, [sp, #0xC]

; 317  :                 break;

  00164	ea00001a	 b           |$LN13@GetDeviceR|
  00168		 |$LN10@GetDeviceR|

; 318  :             case PARAM_MULTIDWORD:
; 319  :                 status = GetMultiDWordParam(hKey, pBase, &params[i]);

  00168	e59d1004	 ldr         r1, [sp, #4]
  0016c	e3a03018	 mov         r3, #0x18
  00170	e0020391	 mul         r2, r1, r3
  00174	e59d3054	 ldr         r3, [sp, #0x54]
  00178	e0832002	 add         r2, r3, r2
  0017c	e59d104c	 ldr         r1, [sp, #0x4C]
  00180	e59d0008	 ldr         r0, [sp, #8]
  00184	eb000000	 bl          GetMultiDWordParam
  00188	e58d0034	 str         r0, [sp, #0x34]
  0018c	e59d3034	 ldr         r3, [sp, #0x34]
  00190	e58d300c	 str         r3, [sp, #0xC]

; 320  :                 break;

  00194	ea00000e	 b           |$LN13@GetDeviceR|
  00198		 |$LN9@GetDeviceR|

; 321  :             case PARAM_BIN:
; 322  :                 status = GetBinParam(hKey, pBase, &params[i]);

  00198	e59d1004	 ldr         r1, [sp, #4]
  0019c	e3a03018	 mov         r3, #0x18
  001a0	e0020391	 mul         r2, r1, r3
  001a4	e59d3054	 ldr         r3, [sp, #0x54]
  001a8	e0832002	 add         r2, r3, r2
  001ac	e59d104c	 ldr         r1, [sp, #0x4C]
  001b0	e59d0008	 ldr         r0, [sp, #8]
  001b4	eb000000	 bl          GetBinParam
  001b8	e58d0038	 str         r0, [sp, #0x38]
  001bc	e59d3038	 ldr         r3, [sp, #0x38]
  001c0	e58d300c	 str         r3, [sp, #0xC]

; 323  :                 break;

  001c4	ea000002	 b           |$LN13@GetDeviceR|
  001c8		 |$LN8@GetDeviceR|

; 324  :             default:
; 325  :                 status = (DWORD) STATUS_FAIL_CHECK;

  001c8	e3a03107	 mov         r3, #7, 2
  001cc	e3833f8a	 orr         r3, r3, #0x8A, 30
  001d0	e58d300c	 str         r3, [sp, #0xC]
  001d4		 |$LN13@GetDeviceR|

; 326  :                 break;
; 327  :             }
; 328  :         }

  001d4	eaffffaa	 b           |$LN16@GetDeviceR|
  001d8		 |$LN15@GetDeviceR|

; 329  : 
; 330  :     // Close key
; 331  :     RegCloseKey(hKey);

  001d8	e59d0008	 ldr         r0, [sp, #8]
  001dc	eb000000	 bl          RegCloseKey

; 332  : 
; 333  :     // Release allocated memory in case of failure
; 334  :     if (status != ERROR_SUCCESS)

  001e0	e59d300c	 ldr         r3, [sp, #0xC]
  001e4	e3530000	 cmp         r3, #0
  001e8	0a000030	 beq         |$LN7@GetDeviceR|
  001ec		 |$LN6@GetDeviceR|

; 335  :         {
; 336  :         UCHAR *pBuffer, *pValue;
; 337  : 
; 338  :         while (i-- > 0)

  001ec	e59d3004	 ldr         r3, [sp, #4]
  001f0	e3530000	 cmp         r3, #0
  001f4	e59d3004	 ldr         r3, [sp, #4]
  001f8	e2433001	 sub         r3, r3, #1
  001fc	e58d3004	 str         r3, [sp, #4]
  00200	9a00002a	 bls         |$LN5@GetDeviceR|

; 339  :             {
; 340  :             pValue = (UCHAR*)pBase + params[i].offset;

  00204	e59d1004	 ldr         r1, [sp, #4]
  00208	e3a03018	 mov         r3, #0x18
  0020c	e0020391	 mul         r2, r1, r3
  00210	e59d3054	 ldr         r3, [sp, #0x54]
  00214	e0833002	 add         r3, r3, r2
  00218	e283300c	 add         r3, r3, #0xC
  0021c	e59d204c	 ldr         r2, [sp, #0x4C]
  00220	e5933000	 ldr         r3, [r3]
  00224	e0823003	 add         r3, r2, r3
  00228	e58d3014	 str         r3, [sp, #0x14]

; 341  :             switch (params[i].type)

  0022c	e59d1004	 ldr         r1, [sp, #4]
  00230	e3a03018	 mov         r3, #0x18
  00234	e0020391	 mul         r2, r1, r3
  00238	e59d3054	 ldr         r3, [sp, #0x54]
  0023c	e0833002	 add         r3, r3, r2
  00240	e2833004	 add         r3, r3, #4
  00244	e5933000	 ldr         r3, [r3]
  00248	e58d303c	 str         r3, [sp, #0x3C]
  0024c	e59d303c	 ldr         r3, [sp, #0x3C]
  00250	e3530002	 cmp         r3, #2
  00254	0a000003	 beq         |$LN2@GetDeviceR|
  00258	e59d303c	 ldr         r3, [sp, #0x3C]
  0025c	e3530004	 cmp         r3, #4
  00260	0a000000	 beq         |$LN2@GetDeviceR|
  00264	ea000010	 b           |$LN3@GetDeviceR|
  00268		 |$LN2@GetDeviceR|

; 342  :                 {
; 343  :                 case PARAM_STRING:
; 344  :                 case PARAM_BIN:
; 345  :                     if (params[i].size == 0)

  00268	e59d1004	 ldr         r1, [sp, #4]
  0026c	e3a03018	 mov         r3, #0x18
  00270	e0020391	 mul         r2, r1, r3
  00274	e59d3054	 ldr         r3, [sp, #0x54]
  00278	e0833002	 add         r3, r3, r2
  0027c	e2833010	 add         r3, r3, #0x10
  00280	e5933000	 ldr         r3, [r3]
  00284	e3530000	 cmp         r3, #0
  00288	1a000007	 bne         |$LN1@GetDeviceR|

; 346  :                         {
; 347  :                         pBuffer = (UCHAR*)(*(VOID**)pValue);

  0028c	e59d3014	 ldr         r3, [sp, #0x14]
  00290	e5933000	 ldr         r3, [r3]
  00294	e58d3010	 str         r3, [sp, #0x10]

; 348  :                         *(VOID**)pValue = NULL;

  00298	e59d2014	 ldr         r2, [sp, #0x14]
  0029c	e3a03000	 mov         r3, #0
  002a0	e5823000	 str         r3, [r2]

; 349  :                         LocalFree(pBuffer);

  002a4	e59d0010	 ldr         r0, [sp, #0x10]
  002a8	eb000000	 bl          LocalFree
  002ac		 |$LN1@GetDeviceR|
  002ac		 |$LN3@GetDeviceR|

; 350  :                         }
; 351  :                     break;
; 352  :                 }
; 353  :             }

  002ac	eaffffce	 b           |$LN6@GetDeviceR|
  002b0		 |$LN5@GetDeviceR|
  002b0		 |$LN7@GetDeviceR|
  002b0		 |$cleanUp$39402|

; 354  :         }
; 355  : 
; 356  : cleanUp:
; 357  :     return status;

  002b0	e59d300c	 ldr         r3, [sp, #0xC]
  002b4	e58d301c	 str         r3, [sp, #0x1C]

; 358  : }

  002b8	e59d001c	 ldr         r0, [sp, #0x1C]
  002bc	e28dd040	 add         sp, sp, #0x40
  002c0	e89d6000	 ldmia       sp, {sp, lr}
  002c4	e12fff1e	 bx          lr
  002c8		 |$LN31@GetDeviceR|
  002c8		 |$LN32@GetDeviceR|
  002c8	00000000	 DCD         |??_C@_1DG@HMCHMIHB@?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AA?3?$AA?5?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5?$AAk?$AAe?$AAy?$AA?$AN?$AA?6?$AA?$AA@|
  002cc		 |$M39501|

			 ENDP  ; |GetDeviceRegistryParams|

	EXPORT	|??_C@_1EA@FGNHCGNB@?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AA?3?$AA?5?$AAm?$AAi?$AAs?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AA?$CC?$AA?$CF?$AAs?$AA?$CC?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|LocalAlloc|
	IMPORT	|memcpy|
	IMPORT	|wcslen|
	IMPORT	|RegQueryValueExW|

  00008			 AREA	 |.pdata|, PDATA
|$T39519| DCD	|$LN18@GetStringP|
	DCD	0x4000ac04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@FGNHCGNB@?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AA?3?$AA?5?$AAm?$AAi?$AAs?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AA?$CC?$AA?$CF?$AAs?$AA?$CC?$AA?$AN?$AA?6?$AA?$AA@| DCB "R"
	DCB	0x0, "e", 0x0, "g", 0x0, "i", 0x0, "s", 0x0, "t", 0x0, "r"
	DCB	0x0, "y", 0x0, ":", 0x0, " ", 0x0, "m", 0x0, "i", 0x0, "s"
	DCB	0x0, "s", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, " ", 0x0, "s"
	DCB	0x0, "t", 0x0, "r", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, " "
	DCB	0x0, """", 0x0, "%", 0x0, "s", 0x0, """", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  002cc			 AREA	 |.text|, CODE, ARM

  002cc		 |GetStringParam| PROC

; 30   : {

  002cc		 |$LN18@GetStringP|
  002cc	e1a0c00d	 mov         r12, sp
  002d0	e92d0007	 stmdb       sp!, {r0 - r2}
  002d4	e92d5000	 stmdb       sp!, {r12, lr}
  002d8	e24dd05c	 sub         sp, sp, #0x5C
  002dc		 |$M39516|

; 31   :     DWORD status, size, type;
; 32   :     WCHAR *pName;
; 33   :     UCHAR *pBuffer, *pValue;
; 34   : 
; 35   :     pName = pParam->name;

  002dc	e59d306c	 ldr         r3, [sp, #0x6C]
  002e0	e5933000	 ldr         r3, [r3]
  002e4	e58d3014	 str         r3, [sp, #0x14]

; 36   :     pValue = (UCHAR*)pBase + pParam->offset;

  002e8	e59d306c	 ldr         r3, [sp, #0x6C]
  002ec	e283300c	 add         r3, r3, #0xC
  002f0	e59d2068	 ldr         r2, [sp, #0x68]
  002f4	e5933000	 ldr         r3, [r3]
  002f8	e0823003	 add         r3, r2, r3
  002fc	e58d3010	 str         r3, [sp, #0x10]

; 37   :     size = pParam->size;

  00300	e59d306c	 ldr         r3, [sp, #0x6C]
  00304	e2833010	 add         r3, r3, #0x10
  00308	e5933000	 ldr         r3, [r3]
  0030c	e58d3018	 str         r3, [sp, #0x18]

; 38   : 
; 39   :     // If there is parameter size we simply try to read value or used default
; 40   :     if (size > 0)

  00310	e59d3018	 ldr         r3, [sp, #0x18]
  00314	e3530000	 cmp         r3, #0
  00318	9a00003b	 bls         |$LN11@GetStringP|

; 41   :         {
; 42   :         status = RegQueryValueEx(hKey, pName, NULL, &type, pValue, &size);

  0031c	e28d3018	 add         r3, sp, #0x18
  00320	e58d3004	 str         r3, [sp, #4]
  00324	e59d3010	 ldr         r3, [sp, #0x10]
  00328	e58d3000	 str         r3, [sp]
  0032c	e28d300c	 add         r3, sp, #0xC
  00330	e3a02000	 mov         r2, #0
  00334	e59d1014	 ldr         r1, [sp, #0x14]
  00338	e59d0064	 ldr         r0, [sp, #0x64]
  0033c	eb000000	 bl          RegQueryValueExW
  00340	e58d003c	 str         r0, [sp, #0x3C]
  00344	e59d303c	 ldr         r3, [sp, #0x3C]
  00348	e58d301c	 str         r3, [sp, #0x1C]

; 43   :         if (status == ERROR_SUCCESS || pParam->required) 

  0034c	e59d301c	 ldr         r3, [sp, #0x1C]
  00350	e3530000	 cmp         r3, #0
  00354	0a000004	 beq         |$LN9@GetStringP|
  00358	e59d306c	 ldr         r3, [sp, #0x6C]
  0035c	e2833008	 add         r3, r3, #8
  00360	e5933000	 ldr         r3, [r3]
  00364	e3530000	 cmp         r3, #0
  00368	0a00000b	 beq         |$LN10@GetStringP|
  0036c		 |$LN9@GetStringP|

; 44   :         {
; 45   :             RETAILMSG(status != ERROR_SUCCESS, (L"Registry: missing string \"%s\"\r\n", pName));

  0036c	e59d301c	 ldr         r3, [sp, #0x1C]
  00370	e3530000	 cmp         r3, #0
  00374	0a000005	 beq         |$LN14@GetStringP|
  00378	e59d1014	 ldr         r1, [sp, #0x14]
  0037c	e59f01f4	 ldr         r0, [pc, #0x1F4]
  00380	eb000000	 bl          NKDbgPrintfW
  00384	e3a03001	 mov         r3, #1
  00388	e58d3040	 str         r3, [sp, #0x40]
  0038c	ea000001	 b           |$LN15@GetStringP|
  00390		 |$LN14@GetStringP|
  00390	e3a03000	 mov         r3, #0
  00394	e58d3040	 str         r3, [sp, #0x40]
  00398		 |$LN15@GetStringP|

; 46   :             goto cleanUp;

  00398	ea000070	 b           |$cleanUp$39249|
  0039c		 |$LN10@GetStringP|

; 47   :         }
; 48   :         size = (wcslen((WCHAR*)pParam->pDefault) + 1) * sizeof(WCHAR);

  0039c	e59d306c	 ldr         r3, [sp, #0x6C]
  003a0	e2833014	 add         r3, r3, #0x14
  003a4	e5930000	 ldr         r0, [r3]
  003a8	eb000000	 bl          wcslen
  003ac	e58d0044	 str         r0, [sp, #0x44]
  003b0	e59d3044	 ldr         r3, [sp, #0x44]
  003b4	e2832001	 add         r2, r3, #1
  003b8	e3a03002	 mov         r3, #2
  003bc	e0030392	 mul         r3, r2, r3
  003c0	e58d3018	 str         r3, [sp, #0x18]

; 49   :         if (size > pParam->size)

  003c4	e59d306c	 ldr         r3, [sp, #0x6C]
  003c8	e2833010	 add         r3, r3, #0x10
  003cc	e59d2018	 ldr         r2, [sp, #0x18]
  003d0	e5933000	 ldr         r3, [r3]
  003d4	e1520003	 cmp         r2, r3
  003d8	9a000002	 bls         |$LN8@GetStringP|

; 50   :             {
; 51   :             status = ERROR_OUTOFMEMORY;

  003dc	e3a0300e	 mov         r3, #0xE
  003e0	e58d301c	 str         r3, [sp, #0x1C]

; 52   :             }
; 53   :         else

  003e4	ea000007	 b           |$LN7@GetStringP|
  003e8		 |$LN8@GetStringP|

; 54   :             {
; 55   :             memcpy(pValue, pParam->pDefault, size);

  003e8	e59d2018	 ldr         r2, [sp, #0x18]
  003ec	e59d306c	 ldr         r3, [sp, #0x6C]
  003f0	e2833014	 add         r3, r3, #0x14
  003f4	e5931000	 ldr         r1, [r3]
  003f8	e59d0010	 ldr         r0, [sp, #0x10]
  003fc	eb000000	 bl          memcpy

; 56   :             status = ERROR_SUCCESS;

  00400	e3a03000	 mov         r3, #0
  00404	e58d301c	 str         r3, [sp, #0x1C]
  00408		 |$LN7@GetStringP|

; 57   :             }
; 58   :         }
; 59   :     else

  00408	ea000054	 b           |$LN6@GetStringP|
  0040c		 |$LN11@GetStringP|

; 60   :         {
; 61   :         // First find if value is there
; 62   :         status = RegQueryValueEx(hKey, pName, NULL, &type, NULL, &size);

  0040c	e28d3018	 add         r3, sp, #0x18
  00410	e58d3004	 str         r3, [sp, #4]
  00414	e3a03000	 mov         r3, #0
  00418	e58d3000	 str         r3, [sp]
  0041c	e28d300c	 add         r3, sp, #0xC
  00420	e3a02000	 mov         r2, #0
  00424	e59d1014	 ldr         r1, [sp, #0x14]
  00428	e59d0064	 ldr         r0, [sp, #0x64]
  0042c	eb000000	 bl          RegQueryValueExW
  00430	e58d0048	 str         r0, [sp, #0x48]
  00434	e59d3048	 ldr         r3, [sp, #0x48]
  00438	e58d301c	 str         r3, [sp, #0x1C]

; 63   :         // Value isn't in registry, break or use default
; 64   :         if (status != ERROR_SUCCESS)

  0043c	e59d301c	 ldr         r3, [sp, #0x1C]
  00440	e3530000	 cmp         r3, #0
  00444	0a00002a	 beq         |$LN5@GetStringP|

; 65   :             {
; 66   :             if (pParam->required) 

  00448	e59d306c	 ldr         r3, [sp, #0x6C]
  0044c	e2833008	 add         r3, r3, #8
  00450	e5933000	 ldr         r3, [r3]
  00454	e3530000	 cmp         r3, #0
  00458	0a000003	 beq         |$LN4@GetStringP|

; 67   :             {
; 68   :                 RETAILMSG(1, (L"Registry: missing string \"%s\"\r\n", pName));

  0045c	e59d1014	 ldr         r1, [sp, #0x14]
  00460	e59f0110	 ldr         r0, [pc, #0x110]
  00464	eb000000	 bl          NKDbgPrintfW

; 69   :                 goto cleanUp;

  00468	ea00003c	 b           |$cleanUp$39249|
  0046c		 |$LN4@GetStringP|

; 70   :             }
; 71   :             size = (wcslen((WCHAR*)pParam->pDefault) + 1) * sizeof(WCHAR);

  0046c	e59d306c	 ldr         r3, [sp, #0x6C]
  00470	e2833014	 add         r3, r3, #0x14
  00474	e5930000	 ldr         r0, [r3]
  00478	eb000000	 bl          wcslen
  0047c	e58d004c	 str         r0, [sp, #0x4C]
  00480	e59d304c	 ldr         r3, [sp, #0x4C]
  00484	e2832001	 add         r2, r3, #1
  00488	e3a03002	 mov         r3, #2
  0048c	e0030392	 mul         r3, r2, r3
  00490	e58d3018	 str         r3, [sp, #0x18]

; 72   :             pBuffer = (UCHAR*)LocalAlloc(LMEM_FIXED, size);

  00494	e59d1018	 ldr         r1, [sp, #0x18]
  00498	e3a00000	 mov         r0, #0
  0049c	eb000000	 bl          LocalAlloc
  004a0	e58d0050	 str         r0, [sp, #0x50]
  004a4	e59d3050	 ldr         r3, [sp, #0x50]
  004a8	e58d3008	 str         r3, [sp, #8]

; 73   :             if (pBuffer == NULL)

  004ac	e59d3008	 ldr         r3, [sp, #8]
  004b0	e3530000	 cmp         r3, #0
  004b4	1a000002	 bne         |$LN3@GetStringP|

; 74   :                 {
; 75   :                 status = ERROR_OUTOFMEMORY;

  004b8	e3a0300e	 mov         r3, #0xE
  004bc	e58d301c	 str         r3, [sp, #0x1C]

; 76   :                 goto cleanUp;

  004c0	ea000026	 b           |$cleanUp$39249|
  004c4		 |$LN3@GetStringP|

; 77   :                 }
; 78   :             memcpy(pBuffer, pParam->pDefault, size);

  004c4	e59d2018	 ldr         r2, [sp, #0x18]
  004c8	e59d306c	 ldr         r3, [sp, #0x6C]
  004cc	e2833014	 add         r3, r3, #0x14
  004d0	e5931000	 ldr         r1, [r3]
  004d4	e59d0008	 ldr         r0, [sp, #8]
  004d8	eb000000	 bl          memcpy

; 79   :             *(VOID**)pValue = pBuffer;

  004dc	e59d2008	 ldr         r2, [sp, #8]
  004e0	e59d3010	 ldr         r3, [sp, #0x10]
  004e4	e5832000	 str         r2, [r3]

; 80   :             status = ERROR_SUCCESS;

  004e8	e3a03000	 mov         r3, #0
  004ec	e58d301c	 str         r3, [sp, #0x1C]

; 81   :             }
; 82   :         else

  004f0	ea00001a	 b           |$LN2@GetStringP|
  004f4		 |$LN5@GetStringP|

; 83   :             {
; 84   :             pBuffer = (UCHAR*)LocalAlloc(LMEM_FIXED, size);

  004f4	e59d1018	 ldr         r1, [sp, #0x18]
  004f8	e3a00000	 mov         r0, #0
  004fc	eb000000	 bl          LocalAlloc
  00500	e58d0054	 str         r0, [sp, #0x54]
  00504	e59d3054	 ldr         r3, [sp, #0x54]
  00508	e58d3008	 str         r3, [sp, #8]

; 85   :             if (pBuffer == NULL)

  0050c	e59d3008	 ldr         r3, [sp, #8]
  00510	e3530000	 cmp         r3, #0
  00514	1a000002	 bne         |$LN1@GetStringP|

; 86   :                 {
; 87   :                 status = ERROR_OUTOFMEMORY;

  00518	e3a0300e	 mov         r3, #0xE
  0051c	e58d301c	 str         r3, [sp, #0x1C]

; 88   :                 goto cleanUp;

  00520	ea00000e	 b           |$cleanUp$39249|
  00524		 |$LN1@GetStringP|

; 89   :                 }
; 90   :             status = RegQueryValueEx(hKey, pName, NULL, &type, pBuffer, &size);

  00524	e28d3018	 add         r3, sp, #0x18
  00528	e58d3004	 str         r3, [sp, #4]
  0052c	e59d3008	 ldr         r3, [sp, #8]
  00530	e58d3000	 str         r3, [sp]
  00534	e28d300c	 add         r3, sp, #0xC
  00538	e3a02000	 mov         r2, #0
  0053c	e59d1014	 ldr         r1, [sp, #0x14]
  00540	e59d0064	 ldr         r0, [sp, #0x64]
  00544	eb000000	 bl          RegQueryValueExW
  00548	e58d0058	 str         r0, [sp, #0x58]
  0054c	e59d3058	 ldr         r3, [sp, #0x58]
  00550	e58d301c	 str         r3, [sp, #0x1C]

; 91   :             *(VOID**)pValue = pBuffer;

  00554	e59d2008	 ldr         r2, [sp, #8]
  00558	e59d3010	 ldr         r3, [sp, #0x10]
  0055c	e5832000	 str         r2, [r3]
  00560		 |$LN2@GetStringP|
  00560		 |$LN6@GetStringP|
  00560		 |$cleanUp$39249|

; 92   :             }
; 93   :         }
; 94   : 
; 95   : cleanUp:
; 96   :     return status;

  00560	e59d301c	 ldr         r3, [sp, #0x1C]
  00564	e58d3038	 str         r3, [sp, #0x38]

; 97   : }

  00568	e59d0038	 ldr         r0, [sp, #0x38]
  0056c	e28dd05c	 add         sp, sp, #0x5C
  00570	e89d6000	 ldmia       sp, {sp, lr}
  00574	e12fff1e	 bx          lr
  00578		 |$LN19@GetStringP|
  00578		 |$LN20@GetStringP|
  00578	00000000	 DCD         |??_C@_1EA@FGNHCGNB@?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AA?3?$AA?5?$AAm?$AAi?$AAs?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AA?$CC?$AA?$CF?$AAs?$AA?$CC?$AA?$AN?$AA?6?$AA?$AA@|
  0057c		 |$M39517|

			 ENDP  ; |GetStringParam|

	EXPORT	|??_C@_1DO@MCOMFDBG@?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AA?3?$AA?5?$AAm?$AAi?$AAs?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAd?$AAw?$AAo?$AAr?$AAd?$AA?5?$AA?$CC?$AA?$CF?$AAs?$AA?$CC?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00010			 AREA	 |.pdata|, PDATA
|$T39529| DCD	|$LN7@GetDWordPa|
	DCD	0x40003704

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@MCOMFDBG@?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AA?3?$AA?5?$AAm?$AAi?$AAs?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAd?$AAw?$AAo?$AAr?$AAd?$AA?5?$AA?$CC?$AA?$CF?$AAs?$AA?$CC?$AA?$AN?$AA?6?$AA?$AA@| DCB "R"
	DCB	0x0, "e", 0x0, "g", 0x0, "i", 0x0, "s", 0x0, "t", 0x0, "r"
	DCB	0x0, "y", 0x0, ":", 0x0, " ", 0x0, "m", 0x0, "i", 0x0, "s"
	DCB	0x0, "s", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, " ", 0x0, "d"
	DCB	0x0, "w", 0x0, "o", 0x0, "r", 0x0, "d", 0x0, " ", 0x0, """"
	DCB	0x0, "%", 0x0, "s", 0x0, """", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Odtp

  0057c			 AREA	 |.text|, CODE, ARM

  0057c		 |GetDWordParam| PROC

; 107  : {

  0057c		 |$LN7@GetDWordPa|
  0057c	e1a0c00d	 mov         r12, sp
  00580	e92d0007	 stmdb       sp!, {r0 - r2}
  00584	e92d5000	 stmdb       sp!, {r12, lr}
  00588	e24dd02c	 sub         sp, sp, #0x2C
  0058c		 |$M39526|

; 108  :     DWORD status, size, type;
; 109  :     WCHAR *pName;
; 110  :     UCHAR *pValue;
; 111  : 
; 112  : 
; 113  :     pName = pParam->name;

  0058c	e59d303c	 ldr         r3, [sp, #0x3C]
  00590	e5933000	 ldr         r3, [r3]
  00594	e58d3010	 str         r3, [sp, #0x10]

; 114  :     pValue = (UCHAR*)pBase + pParam->offset;

  00598	e59d303c	 ldr         r3, [sp, #0x3C]
  0059c	e283300c	 add         r3, r3, #0xC
  005a0	e59d2038	 ldr         r2, [sp, #0x38]
  005a4	e5933000	 ldr         r3, [r3]
  005a8	e0823003	 add         r3, r2, r3
  005ac	e58d300c	 str         r3, [sp, #0xC]

; 115  :     size = pParam->size;

  005b0	e59d303c	 ldr         r3, [sp, #0x3C]
  005b4	e2833010	 add         r3, r3, #0x10
  005b8	e5933000	 ldr         r3, [r3]
  005bc	e58d3014	 str         r3, [sp, #0x14]

; 116  : 
; 117  :     status = RegQueryValueEx(hKey, pName, NULL, &type, pValue, &size);

  005c0	e28d3014	 add         r3, sp, #0x14
  005c4	e58d3004	 str         r3, [sp, #4]
  005c8	e59d300c	 ldr         r3, [sp, #0xC]
  005cc	e58d3000	 str         r3, [sp]
  005d0	e28d3008	 add         r3, sp, #8
  005d4	e3a02000	 mov         r2, #0
  005d8	e59d1010	 ldr         r1, [sp, #0x10]
  005dc	e59d0034	 ldr         r0, [sp, #0x34]
  005e0	eb000000	 bl          RegQueryValueExW
  005e4	e58d0028	 str         r0, [sp, #0x28]
  005e8	e59d3028	 ldr         r3, [sp, #0x28]
  005ec	e58d3018	 str         r3, [sp, #0x18]

; 118  :     if (status != ERROR_SUCCESS)

  005f0	e59d3018	 ldr         r3, [sp, #0x18]
  005f4	e3530000	 cmp         r3, #0
  005f8	0a00000f	 beq         |$LN2@GetDWordPa|

; 119  :     {
; 120  :         if (pParam->required)

  005fc	e59d303c	 ldr         r3, [sp, #0x3C]
  00600	e2833008	 add         r3, r3, #8
  00604	e5933000	 ldr         r3, [r3]
  00608	e3530000	 cmp         r3, #0
  0060c	0a000003	 beq         |$LN1@GetDWordPa|

; 121  :         {
; 122  :             RETAILMSG(1, (L"Registry: missing dword \"%s\"\r\n", pName));

  00610	e59d1010	 ldr         r1, [sp, #0x10]
  00614	e59f0038	 ldr         r0, [pc, #0x38]
  00618	eb000000	 bl          NKDbgPrintfW

; 123  : 	        goto cleanUp;

  0061c	ea000006	 b           |$cleanUp$39289|
  00620		 |$LN1@GetDWordPa|

; 124  :         }		
; 125  :     *(DWORD*)pValue = (DWORD)pParam->pDefault;

  00620	e59d303c	 ldr         r3, [sp, #0x3C]
  00624	e2833014	 add         r3, r3, #0x14
  00628	e5932000	 ldr         r2, [r3]
  0062c	e59d300c	 ldr         r3, [sp, #0xC]
  00630	e5832000	 str         r2, [r3]

; 126  :     status = ERROR_SUCCESS;

  00634	e3a03000	 mov         r3, #0
  00638	e58d3018	 str         r3, [sp, #0x18]
  0063c		 |$LN2@GetDWordPa|
  0063c		 |$cleanUp$39289|

; 127  :     }
; 128  : 
; 129  : cleanUp:
; 130  :     return status;

  0063c	e59d3018	 ldr         r3, [sp, #0x18]
  00640	e58d3024	 str         r3, [sp, #0x24]

; 131  : }

  00644	e59d0024	 ldr         r0, [sp, #0x24]
  00648	e28dd02c	 add         sp, sp, #0x2C
  0064c	e89d6000	 ldmia       sp, {sp, lr}
  00650	e12fff1e	 bx          lr
  00654		 |$LN8@GetDWordPa|
  00654		 |$LN9@GetDWordPa|
  00654	00000000	 DCD         |??_C@_1DO@MCOMFDBG@?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AA?3?$AA?5?$AAm?$AAi?$AAs?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAd?$AAw?$AAo?$AAr?$AAd?$AA?5?$AA?$CC?$AA?$CF?$AAs?$AA?$CC?$AA?$AN?$AA?6?$AA?$AA@|
  00658		 |$M39527|

			 ENDP  ; |GetDWordParam|

	EXPORT	|??_C@_1IE@MEPOILFJ@?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AA?3?$AA?5?$AAm?$AAu?$AAl?$AAt?$AAi?$AAd?$AAw?$AAo?$AAr?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAR?$AAE?$AAG?$AA_?$AAD?$AAW?$AAO@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EO@IOCGNGDN@?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AA?3?$AA?5?$AAb?$AAa?$AAd?$AA?5?$AAm?$AAu?$AAl?$AAt?$AAi?$AAd?$AAw?$AAo?$AAr?$AAd?$AA?5?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EI@MOBDLJII@?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AA?3?$AA?5?$AAm?$AAi?$AAs?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAm?$AAu?$AAl?$AAt?$AAi?$AAd?$AAw?$AAo?$AAr?$AAd?$AA?5?$AA?$CC?$AA?$CF?$AAs@| [ DATA ] ; `string'
	IMPORT	|wcstoul|

  00018			 AREA	 |.pdata|, PDATA
|$T39547| DCD	|$LN28@GetMultiDW|
	DCD	0x4000d004

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IE@MEPOILFJ@?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AA?3?$AA?5?$AAm?$AAu?$AAl?$AAt?$AAi?$AAd?$AAw?$AAo?$AAr?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAR?$AAE?$AAG?$AA_?$AAD?$AAW?$AAO@| DCB "R"
	DCB	0x0, "e", 0x0, "g", 0x0, "i", 0x0, "s", 0x0, "t", 0x0, "r"
	DCB	0x0, "y", 0x0, ":", 0x0, " ", 0x0, "m", 0x0, "u", 0x0, "l"
	DCB	0x0, "t", 0x0, "i", 0x0, "d", 0x0, "w", 0x0, "o", 0x0, "r"
	DCB	0x0, "d", 0x0, " ", 0x0, "n", 0x0, "o", 0x0, "t", 0x0, " "
	DCB	0x0, "R", 0x0, "E", 0x0, "G", 0x0, "_", 0x0, "D", 0x0, "W"
	DCB	0x0, "O", 0x0, "R", 0x0, "D", 0x0, ",", 0x0, " ", 0x0, "R"
	DCB	0x0, "E", 0x0, "G", 0x0, "_", 0x0, "S", 0x0, "Z", 0x0, " "
	DCB	0x0, "o", 0x0, "r", 0x0, " ", 0x0, "R", 0x0, "E", 0x0, "G"
	DCB	0x0, "_", 0x0, "M", 0x0, "U", 0x0, "L", 0x0, "T", 0x0, "I"
	DCB	0x0, "_", 0x0, "S", 0x0, "Z", 0x0, " ", 0x0, """", 0x0, "%"
	DCB	0x0, "s", 0x0, """", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EO@IOCGNGDN@?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AA?3?$AA?5?$AAb?$AAa?$AAd?$AA?5?$AAm?$AAu?$AAl?$AAt?$AAi?$AAd?$AAw?$AAo?$AAr?$AAd?$AA?5?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5@| DCB "R"
	DCB	0x0, "e", 0x0, "g", 0x0, "i", 0x0, "s", 0x0, "t", 0x0, "r"
	DCB	0x0, "y", 0x0, ":", 0x0, " ", 0x0, "b", 0x0, "a", 0x0, "d"
	DCB	0x0, " ", 0x0, "m", 0x0, "u", 0x0, "l", 0x0, "t", 0x0, "i"
	DCB	0x0, "d", 0x0, "w", 0x0, "o", 0x0, "r", 0x0, "d", 0x0, " "
	DCB	0x0, "s", 0x0, "t", 0x0, "r", 0x0, "i", 0x0, "n", 0x0, "g"
	DCB	0x0, " ", 0x0, """", 0x0, "%", 0x0, "s", 0x0, """", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EI@MOBDLJII@?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AA?3?$AA?5?$AAm?$AAi?$AAs?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAm?$AAu?$AAl?$AAt?$AAi?$AAd?$AAw?$AAo?$AAr?$AAd?$AA?5?$AA?$CC?$AA?$CF?$AAs@| DCB "R"
	DCB	0x0, "e", 0x0, "g", 0x0, "i", 0x0, "s", 0x0, "t", 0x0, "r"
	DCB	0x0, "y", 0x0, ":", 0x0, " ", 0x0, "m", 0x0, "i", 0x0, "s"
	DCB	0x0, "s", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, " ", 0x0, "m"
	DCB	0x0, "u", 0x0, "l", 0x0, "t", 0x0, "i", 0x0, "d", 0x0, "w"
	DCB	0x0, "o", 0x0, "r", 0x0, "d", 0x0, " ", 0x0, """", 0x0, "%"
	DCB	0x0, "s", 0x0, """", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  00658			 AREA	 |.text|, CODE, ARM

  00658		 |GetMultiDWordParam| PROC

; 141  : {

  00658		 |$LN28@GetMultiDW|
  00658	e1a0c00d	 mov         r12, sp
  0065c	e92d0007	 stmdb       sp!, {r0 - r2}
  00660	e92d5000	 stmdb       sp!, {r12, lr}
  00664	e24dd060	 sub         sp, sp, #0x60
  00668		 |$M39544|

; 142  :     DWORD status, size, type;
; 143  :     WCHAR *pName, *pBuffer = NULL, *pPos;

  00668	e3a03000	 mov         r3, #0
  0066c	e58d3008	 str         r3, [sp, #8]

; 144  :     UCHAR *pValue, *pDefault;
; 145  : 
; 146  :     pName = pParam->name;

  00670	e59d3070	 ldr         r3, [sp, #0x70]
  00674	e5933000	 ldr         r3, [r3]
  00678	e58d3014	 str         r3, [sp, #0x14]

; 147  :     pValue = (UCHAR*)pBase + pParam->offset;

  0067c	e59d3070	 ldr         r3, [sp, #0x70]
  00680	e283300c	 add         r3, r3, #0xC
  00684	e59d206c	 ldr         r2, [sp, #0x6C]
  00688	e5933000	 ldr         r3, [r3]
  0068c	e0823003	 add         r3, r2, r3
  00690	e58d3010	 str         r3, [sp, #0x10]

; 148  :     pDefault = (UCHAR*)pParam->pDefault;

  00694	e59d3070	 ldr         r3, [sp, #0x70]
  00698	e2833014	 add         r3, r3, #0x14
  0069c	e5933000	 ldr         r3, [r3]
  006a0	e58d301c	 str         r3, [sp, #0x1C]

; 149  : 
; 150  :     // Get registry value type and size
; 151  :     status = RegQueryValueEx(hKey, pName, NULL, &type, NULL, &size);

  006a4	e28d3018	 add         r3, sp, #0x18
  006a8	e58d3004	 str         r3, [sp, #4]
  006ac	e3a03000	 mov         r3, #0
  006b0	e58d3000	 str         r3, [sp]
  006b4	e28d300c	 add         r3, sp, #0xC
  006b8	e3a02000	 mov         r2, #0
  006bc	e59d1014	 ldr         r1, [sp, #0x14]
  006c0	e59d0068	 ldr         r0, [sp, #0x68]
  006c4	eb000000	 bl          RegQueryValueExW
  006c8	e58d0044	 str         r0, [sp, #0x44]
  006cc	e59d3044	 ldr         r3, [sp, #0x44]
  006d0	e58d3020	 str         r3, [sp, #0x20]

; 152  :     if (status != ERROR_SUCCESS)

  006d4	e59d3020	 ldr         r3, [sp, #0x20]
  006d8	e3530000	 cmp         r3, #0
  006dc	0a000014	 beq         |$LN19@GetMultiDW|

; 153  :         {
; 154  :         // If value doesn't exists use default value if optional
; 155  :         if (pParam->required)

  006e0	e59d3070	 ldr         r3, [sp, #0x70]
  006e4	e2833008	 add         r3, r3, #8
  006e8	e5933000	 ldr         r3, [r3]
  006ec	e3530000	 cmp         r3, #0
  006f0	0a000003	 beq         |$LN18@GetMultiDW|

; 156  :         {
; 157  :             RETAILMSG(1, (L"Registry: missing multidword \"%s\"\r\n", pName));

  006f4	e59d1014	 ldr         r1, [sp, #0x14]
  006f8	e59f0294	 ldr         r0, [pc, #0x294]
  006fc	eb000000	 bl          NKDbgPrintfW

; 158  :             goto cleanUp;

  00700	ea000096	 b           |$cleanUp$39316|
  00704		 |$LN18@GetMultiDW|

; 159  :         }
; 160  :         if (pDefault != NULL) memcpy(pValue, pDefault, pParam->size);

  00704	e59d301c	 ldr         r3, [sp, #0x1C]
  00708	e3530000	 cmp         r3, #0
  0070c	0a000005	 beq         |$LN17@GetMultiDW|
  00710	e59d3070	 ldr         r3, [sp, #0x70]
  00714	e2833010	 add         r3, r3, #0x10
  00718	e5932000	 ldr         r2, [r3]
  0071c	e59d101c	 ldr         r1, [sp, #0x1C]
  00720	e59d0010	 ldr         r0, [sp, #0x10]
  00724	eb000000	 bl          memcpy
  00728		 |$LN17@GetMultiDW|

; 161  :         status = ERROR_SUCCESS;

  00728	e3a03000	 mov         r3, #0
  0072c	e58d3020	 str         r3, [sp, #0x20]

; 162  :         goto cleanUp;

  00730	ea00008a	 b           |$cleanUp$39316|
  00734		 |$LN19@GetMultiDW|

; 163  :         }
; 164  : 
; 165  :     // If type is DWORD and we expect it, simply read it
; 166  :     if (type == REG_DWORD)

  00734	e59d300c	 ldr         r3, [sp, #0xC]
  00738	e3530004	 cmp         r3, #4
  0073c	1a000015	 bne         |$LN16@GetMultiDW|

; 167  :         {
; 168  :         if (size == pParam->size)

  00740	e59d3070	 ldr         r3, [sp, #0x70]
  00744	e2833010	 add         r3, r3, #0x10
  00748	e59d2018	 ldr         r2, [sp, #0x18]
  0074c	e5933000	 ldr         r3, [r3]
  00750	e1520003	 cmp         r2, r3
  00754	1a00000c	 bne         |$LN15@GetMultiDW|

; 169  :             {
; 170  :             status = RegQueryValueEx(hKey, pName, NULL, NULL, pValue, &size);

  00758	e28d3018	 add         r3, sp, #0x18
  0075c	e58d3004	 str         r3, [sp, #4]
  00760	e59d3010	 ldr         r3, [sp, #0x10]
  00764	e58d3000	 str         r3, [sp]
  00768	e3a03000	 mov         r3, #0
  0076c	e3a02000	 mov         r2, #0
  00770	e59d1014	 ldr         r1, [sp, #0x14]
  00774	e59d0068	 ldr         r0, [sp, #0x68]
  00778	eb000000	 bl          RegQueryValueExW
  0077c	e58d0048	 str         r0, [sp, #0x48]
  00780	e59d3048	 ldr         r3, [sp, #0x48]
  00784	e58d3020	 str         r3, [sp, #0x20]

; 171  :             }
; 172  :         else

  00788	ea000001	 b           |$LN14@GetMultiDW|
  0078c		 |$LN15@GetMultiDW|

; 173  :             {
; 174  :             status = ERROR_BAD_LENGTH;

  0078c	e3a03018	 mov         r3, #0x18
  00790	e58d3020	 str         r3, [sp, #0x20]
  00794		 |$LN14@GetMultiDW|

; 175  :             }

  00794	ea000071	 b           |$LN13@GetMultiDW|
  00798		 |$LN16@GetMultiDW|

; 176  :         }
; 177  :     else if ((type == REG_SZ) || (type == REG_MULTI_SZ))

  00798	e59d300c	 ldr         r3, [sp, #0xC]
  0079c	e3530001	 cmp         r3, #1
  007a0	0a000002	 beq         |$LN11@GetMultiDW|
  007a4	e59d300c	 ldr         r3, [sp, #0xC]
  007a8	e3530007	 cmp         r3, #7
  007ac	1a000066	 bne         |$LN12@GetMultiDW|
  007b0		 |$LN11@GetMultiDW|

; 178  :         {
; 179  :         // Allocate buffer for key
; 180  :         pBuffer = LocalAlloc(LPTR, size);

  007b0	e59d1018	 ldr         r1, [sp, #0x18]
  007b4	e3a00040	 mov         r0, #0x40
  007b8	eb000000	 bl          LocalAlloc
  007bc	e58d004c	 str         r0, [sp, #0x4C]
  007c0	e59d304c	 ldr         r3, [sp, #0x4C]
  007c4	e58d3008	 str         r3, [sp, #8]

; 181  :         if (pBuffer == NULL)

  007c8	e59d3008	 ldr         r3, [sp, #8]
  007cc	e3530000	 cmp         r3, #0
  007d0	1a000002	 bne         |$LN10@GetMultiDW|

; 182  :             {
; 183  :             status = ERROR_OUTOFMEMORY;

  007d4	e3a0300e	 mov         r3, #0xE
  007d8	e58d3020	 str         r3, [sp, #0x20]

; 184  :             goto cleanUp;

  007dc	ea00005f	 b           |$cleanUp$39316|
  007e0		 |$LN10@GetMultiDW|

; 185  :             }
; 186  :         // Read registry value (in most cases it should not fail)
; 187  :         status = RegQueryValueEx(
; 188  :             hKey, pName, NULL, NULL, (UCHAR*)pBuffer, &size
; 189  :             );

  007e0	e28d3018	 add         r3, sp, #0x18
  007e4	e58d3004	 str         r3, [sp, #4]
  007e8	e59d3008	 ldr         r3, [sp, #8]
  007ec	e58d3000	 str         r3, [sp]
  007f0	e3a03000	 mov         r3, #0
  007f4	e3a02000	 mov         r2, #0
  007f8	e59d1014	 ldr         r1, [sp, #0x14]
  007fc	e59d0068	 ldr         r0, [sp, #0x68]
  00800	eb000000	 bl          RegQueryValueExW
  00804	e58d0050	 str         r0, [sp, #0x50]
  00808	e59d3050	 ldr         r3, [sp, #0x50]
  0080c	e58d3020	 str         r3, [sp, #0x20]

; 190  :         if (status != ERROR_SUCCESS) 

  00810	e59d3020	 ldr         r3, [sp, #0x20]
  00814	e3530000	 cmp         r3, #0
  00818	0a000000	 beq         |$LN9@GetMultiDW|

; 191  :         {
; 192  :             goto cleanUp;

  0081c	ea00004f	 b           |$cleanUp$39316|
  00820		 |$LN9@GetMultiDW|

; 193  :         }
; 194  :         pPos = pBuffer;

  00820	e59d3008	 ldr         r3, [sp, #8]
  00824	e58d3024	 str         r3, [sp, #0x24]

; 195  :         size = pParam->size;

  00828	e59d3070	 ldr         r3, [sp, #0x70]
  0082c	e2833010	 add         r3, r3, #0x10
  00830	e5933000	 ldr         r3, [r3]
  00834	e58d3018	 str         r3, [sp, #0x18]
  00838		 |$LN8@GetMultiDW|

; 196  :         while (size >= sizeof(DWORD) && *pPos != L'\0')

  00838	e59d3018	 ldr         r3, [sp, #0x18]
  0083c	e3530004	 cmp         r3, #4
  00840	3a00002b	 bcc         |$LN7@GetMultiDW|
  00844	e59d3024	 ldr         r3, [sp, #0x24]
  00848	e1d330b0	 ldrh        r3, [r3]
  0084c	e3530000	 cmp         r3, #0
  00850	0a000027	 beq         |$LN7@GetMultiDW|
  00854		 |$LN6@GetMultiDW|

; 197  :             {
; 198  :             while (*pPos == L' ' || (type == REG_SZ && *pPos == L',')) pPos++;

  00854	e59d3024	 ldr         r3, [sp, #0x24]
  00858	e1d330b0	 ldrh        r3, [r3]
  0085c	e3530020	 cmp         r3, #0x20
  00860	0a000006	 beq         |$LN4@GetMultiDW|
  00864	e59d300c	 ldr         r3, [sp, #0xC]
  00868	e3530001	 cmp         r3, #1
  0086c	1a000007	 bne         |$LN5@GetMultiDW|
  00870	e59d3024	 ldr         r3, [sp, #0x24]
  00874	e1d330b0	 ldrh        r3, [r3]
  00878	e353002c	 cmp         r3, #0x2C
  0087c	1a000003	 bne         |$LN5@GetMultiDW|
  00880		 |$LN4@GetMultiDW|
  00880	e59d3024	 ldr         r3, [sp, #0x24]
  00884	e2833002	 add         r3, r3, #2
  00888	e58d3024	 str         r3, [sp, #0x24]
  0088c	eafffff0	 b           |$LN6@GetMultiDW|
  00890		 |$LN5@GetMultiDW|

; 199  :             *(DWORD*)pValue = wcstoul(pPos, &pPos, 16);

  00890	e3a02010	 mov         r2, #0x10
  00894	e28d1024	 add         r1, sp, #0x24
  00898	e59d0024	 ldr         r0, [sp, #0x24]
  0089c	eb000000	 bl          wcstoul
  008a0	e58d0054	 str         r0, [sp, #0x54]
  008a4	e59d2054	 ldr         r2, [sp, #0x54]
  008a8	e59d3010	 ldr         r3, [sp, #0x10]
  008ac	e5832000	 str         r2, [r3]

; 200  :             pValue += sizeof(DWORD);

  008b0	e59d3010	 ldr         r3, [sp, #0x10]
  008b4	e2833004	 add         r3, r3, #4
  008b8	e58d3010	 str         r3, [sp, #0x10]

; 201  :             size -= sizeof(DWORD);

  008bc	e59d3018	 ldr         r3, [sp, #0x18]
  008c0	e2433004	 sub         r3, r3, #4
  008c4	e58d3018	 str         r3, [sp, #0x18]

; 202  :             if (type == REG_MULTI_SZ && *pPos == L'\0') pPos++;

  008c8	e59d300c	 ldr         r3, [sp, #0xC]
  008cc	e3530007	 cmp         r3, #7
  008d0	1a000006	 bne         |$LN3@GetMultiDW|
  008d4	e59d3024	 ldr         r3, [sp, #0x24]
  008d8	e1d330b0	 ldrh        r3, [r3]
  008dc	e3530000	 cmp         r3, #0
  008e0	1a000002	 bne         |$LN3@GetMultiDW|
  008e4	e59d3024	 ldr         r3, [sp, #0x24]
  008e8	e2833002	 add         r3, r3, #2
  008ec	e58d3024	 str         r3, [sp, #0x24]
  008f0		 |$LN3@GetMultiDW|

; 203  :             }

  008f0	eaffffd0	 b           |$LN8@GetMultiDW|
  008f4		 |$LN7@GetMultiDW|

; 204  :         status = size == 0 ? ERROR_SUCCESS : ERROR_BAD_FORMAT;

  008f4	e59d3018	 ldr         r3, [sp, #0x18]
  008f8	e3530000	 cmp         r3, #0
  008fc	1a000002	 bne         |$LN22@GetMultiDW|
  00900	e3a03000	 mov         r3, #0
  00904	e58d3058	 str         r3, [sp, #0x58]
  00908	ea000001	 b           |$LN23@GetMultiDW|
  0090c		 |$LN22@GetMultiDW|
  0090c	e3a0300b	 mov         r3, #0xB
  00910	e58d3058	 str         r3, [sp, #0x58]
  00914		 |$LN23@GetMultiDW|
  00914	e59d3058	 ldr         r3, [sp, #0x58]
  00918	e58d3020	 str         r3, [sp, #0x20]

; 205  :         RETAILMSG(status == ERROR_BAD_FORMAT, (L"Registry: bad multidword string \"%s\"\r\n", pName));

  0091c	e59d3020	 ldr         r3, [sp, #0x20]
  00920	e353000b	 cmp         r3, #0xB
  00924	1a000005	 bne         |$LN24@GetMultiDW|
  00928	e59d1014	 ldr         r1, [sp, #0x14]
  0092c	e59f005c	 ldr         r0, [pc, #0x5C]
  00930	eb000000	 bl          NKDbgPrintfW
  00934	e3a03001	 mov         r3, #1
  00938	e58d305c	 str         r3, [sp, #0x5C]
  0093c	ea000001	 b           |$LN25@GetMultiDW|
  00940		 |$LN24@GetMultiDW|
  00940	e3a03000	 mov         r3, #0
  00944	e58d305c	 str         r3, [sp, #0x5C]
  00948		 |$LN25@GetMultiDW|

; 206  :         }
; 207  :     else

  00948	ea000004	 b           |$LN2@GetMultiDW|
  0094c		 |$LN12@GetMultiDW|

; 208  :         {
; 209  :         RETAILMSG(1, (L"Registry: multidword not REG_DWORD, REG_SZ or REG_MULTI_SZ \"%s\"\r\n", pName));

  0094c	e59d1014	 ldr         r1, [sp, #0x14]
  00950	e59f0034	 ldr         r0, [pc, #0x34]
  00954	eb000000	 bl          NKDbgPrintfW

; 210  :         status = ERROR_BAD_FORMAT;

  00958	e3a0300b	 mov         r3, #0xB
  0095c	e58d3020	 str         r3, [sp, #0x20]
  00960		 |$LN2@GetMultiDW|
  00960		 |$LN13@GetMultiDW|
  00960		 |$cleanUp$39316|

; 211  :         }
; 212  : 
; 213  : cleanUp:
; 214  :     if (pBuffer != NULL) LocalFree(pBuffer);

  00960	e59d3008	 ldr         r3, [sp, #8]
  00964	e3530000	 cmp         r3, #0
  00968	0a000001	 beq         |$LN1@GetMultiDW|
  0096c	e59d0008	 ldr         r0, [sp, #8]
  00970	eb000000	 bl          LocalFree
  00974		 |$LN1@GetMultiDW|

; 215  :     return status;

  00974	e59d3020	 ldr         r3, [sp, #0x20]
  00978	e58d3040	 str         r3, [sp, #0x40]

; 216  : }

  0097c	e59d0040	 ldr         r0, [sp, #0x40]
  00980	e28dd060	 add         sp, sp, #0x60
  00984	e89d6000	 ldmia       sp, {sp, lr}
  00988	e12fff1e	 bx          lr
  0098c		 |$LN29@GetMultiDW|
  0098c		 |$LN30@GetMultiDW|
  0098c	00000000	 DCD         |??_C@_1IE@MEPOILFJ@?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AA?3?$AA?5?$AAm?$AAu?$AAl?$AAt?$AAi?$AAd?$AAw?$AAo?$AAr?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAR?$AAE?$AAG?$AA_?$AAD?$AAW?$AAO@|
  00990		 |$LN31@GetMultiDW|
  00990	00000000	 DCD         |??_C@_1EO@IOCGNGDN@?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AA?3?$AA?5?$AAb?$AAa?$AAd?$AA?5?$AAm?$AAu?$AAl?$AAt?$AAi?$AAd?$AAw?$AAo?$AAr?$AAd?$AA?5?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5@|
  00994		 |$LN32@GetMultiDW|
  00994	00000000	 DCD         |??_C@_1EI@MOBDLJII@?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AA?3?$AA?5?$AAm?$AAi?$AAs?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAm?$AAu?$AAl?$AAt?$AAi?$AAd?$AAw?$AAo?$AAr?$AAd?$AA?5?$AA?$CC?$AA?$CF?$AAs@|
  00998		 |$M39545|

			 ENDP  ; |GetMultiDWordParam|

	EXPORT	|??_C@_1DK@FFJGJOJE@?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AA?3?$AA?5?$AAm?$AAi?$AAs?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAb?$AAi?$AAn?$AA?5?$AA?$CC?$AA?$CF?$AAs?$AA?$CC?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00020			 AREA	 |.pdata|, PDATA
|$T39565| DCD	|$LN15@GetBinPara|
	DCD	0x40007f04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DK@FFJGJOJE@?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AA?3?$AA?5?$AAm?$AAi?$AAs?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAb?$AAi?$AAn?$AA?5?$AA?$CC?$AA?$CF?$AAs?$AA?$CC?$AA?$AN?$AA?6?$AA?$AA@| DCB "R"
	DCB	0x0, "e", 0x0, "g", 0x0, "i", 0x0, "s", 0x0, "t", 0x0, "r"
	DCB	0x0, "y", 0x0, ":", 0x0, " ", 0x0, "m", 0x0, "i", 0x0, "s"
	DCB	0x0, "s", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, " ", 0x0, "b"
	DCB	0x0, "i", 0x0, "n", 0x0, " ", 0x0, """", 0x0, "%", 0x0, "s"
	DCB	0x0, """", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  00998			 AREA	 |.text|, CODE, ARM

  00998		 |GetBinParam| PROC

; 226  : {

  00998		 |$LN15@GetBinPara|
  00998	e1a0c00d	 mov         r12, sp
  0099c	e92d0007	 stmdb       sp!, {r0 - r2}
  009a0	e92d5000	 stmdb       sp!, {r12, lr}
  009a4	e24dd050	 sub         sp, sp, #0x50
  009a8		 |$M39562|

; 227  :     DWORD status, size, type;
; 228  :     WCHAR *pName;
; 229  :     UCHAR *pBuffer, *pValue;
; 230  : 
; 231  :     pName = pParam->name;

  009a8	e59d3060	 ldr         r3, [sp, #0x60]
  009ac	e5933000	 ldr         r3, [r3]
  009b0	e58d3014	 str         r3, [sp, #0x14]

; 232  :     pValue = (UCHAR*)pBase + pParam->offset;

  009b4	e59d3060	 ldr         r3, [sp, #0x60]
  009b8	e283300c	 add         r3, r3, #0xC
  009bc	e59d205c	 ldr         r2, [sp, #0x5C]
  009c0	e5933000	 ldr         r3, [r3]
  009c4	e0823003	 add         r3, r2, r3
  009c8	e58d3010	 str         r3, [sp, #0x10]

; 233  :     size = pParam->size;

  009cc	e59d3060	 ldr         r3, [sp, #0x60]
  009d0	e2833010	 add         r3, r3, #0x10
  009d4	e5933000	 ldr         r3, [r3]
  009d8	e58d3018	 str         r3, [sp, #0x18]

; 234  : 
; 235  :     // If there is parameter size we simply try to read value or use default
; 236  :     if (size > 0)

  009dc	e59d3018	 ldr         r3, [sp, #0x18]
  009e0	e3530000	 cmp         r3, #0
  009e4	9a00002a	 bls         |$LN8@GetBinPara|

; 237  :         {
; 238  :         status = RegQueryValueEx(hKey, pName, NULL, &type, pValue, &size);

  009e8	e28d3018	 add         r3, sp, #0x18
  009ec	e58d3004	 str         r3, [sp, #4]
  009f0	e59d3010	 ldr         r3, [sp, #0x10]
  009f4	e58d3000	 str         r3, [sp]
  009f8	e28d300c	 add         r3, sp, #0xC
  009fc	e3a02000	 mov         r2, #0
  00a00	e59d1014	 ldr         r1, [sp, #0x14]
  00a04	e59d0058	 ldr         r0, [sp, #0x58]
  00a08	eb000000	 bl          RegQueryValueExW
  00a0c	e58d003c	 str         r0, [sp, #0x3C]
  00a10	e59d303c	 ldr         r3, [sp, #0x3C]
  00a14	e58d301c	 str         r3, [sp, #0x1C]

; 239  :         if (status == ERROR_SUCCESS || pParam->required) 

  00a18	e59d301c	 ldr         r3, [sp, #0x1C]
  00a1c	e3530000	 cmp         r3, #0
  00a20	0a000004	 beq         |$LN6@GetBinPara|
  00a24	e59d3060	 ldr         r3, [sp, #0x60]
  00a28	e2833008	 add         r3, r3, #8
  00a2c	e5933000	 ldr         r3, [r3]
  00a30	e3530000	 cmp         r3, #0
  00a34	0a00000b	 beq         |$LN7@GetBinPara|
  00a38		 |$LN6@GetBinPara|

; 240  :         {
; 241  :             RETAILMSG(status != ERROR_SUCCESS, (L"Registry: missing bin \"%s\"\r\n", pName));

  00a38	e59d301c	 ldr         r3, [sp, #0x1C]
  00a3c	e3530000	 cmp         r3, #0
  00a40	0a000005	 beq         |$LN11@GetBinPara|
  00a44	e59d1014	 ldr         r1, [sp, #0x14]
  00a48	e59f0140	 ldr         r0, [pc, #0x140]
  00a4c	eb000000	 bl          NKDbgPrintfW
  00a50	e3a03001	 mov         r3, #1
  00a54	e58d3040	 str         r3, [sp, #0x40]
  00a58	ea000001	 b           |$LN12@GetBinPara|
  00a5c		 |$LN11@GetBinPara|
  00a5c	e3a03000	 mov         r3, #0
  00a60	e58d3040	 str         r3, [sp, #0x40]
  00a64		 |$LN12@GetBinPara|

; 242  :             goto cleanUp;

  00a64	ea000043	 b           |$cleanUp$39370|
  00a68		 |$LN7@GetBinPara|

; 243  :         }
; 244  :         memcpy(pValue, pParam->pDefault, pParam->size);

  00a68	e59d3060	 ldr         r3, [sp, #0x60]
  00a6c	e2833010	 add         r3, r3, #0x10
  00a70	e5932000	 ldr         r2, [r3]
  00a74	e59d3060	 ldr         r3, [sp, #0x60]
  00a78	e2833014	 add         r3, r3, #0x14
  00a7c	e5931000	 ldr         r1, [r3]
  00a80	e59d0010	 ldr         r0, [sp, #0x10]
  00a84	eb000000	 bl          memcpy

; 245  :         status = ERROR_SUCCESS;

  00a88	e3a03000	 mov         r3, #0
  00a8c	e58d301c	 str         r3, [sp, #0x1C]

; 246  :         }
; 247  :     else 

  00a90	ea000038	 b           |$LN5@GetBinPara|
  00a94		 |$LN8@GetBinPara|

; 248  :         {
; 249  :         // First find if value is there
; 250  :         status = RegQueryValueEx(hKey, pName, NULL, &type, NULL, &size);

  00a94	e28d3018	 add         r3, sp, #0x18
  00a98	e58d3004	 str         r3, [sp, #4]
  00a9c	e3a03000	 mov         r3, #0
  00aa0	e58d3000	 str         r3, [sp]
  00aa4	e28d300c	 add         r3, sp, #0xC
  00aa8	e3a02000	 mov         r2, #0
  00aac	e59d1014	 ldr         r1, [sp, #0x14]
  00ab0	e59d0058	 ldr         r0, [sp, #0x58]
  00ab4	eb000000	 bl          RegQueryValueExW
  00ab8	e58d0044	 str         r0, [sp, #0x44]
  00abc	e59d3044	 ldr         r3, [sp, #0x44]
  00ac0	e58d301c	 str         r3, [sp, #0x1C]

; 251  :         // Value isn't in registry, break or use default
; 252  :         if (status != ERROR_SUCCESS)

  00ac4	e59d301c	 ldr         r3, [sp, #0x1C]
  00ac8	e3530000	 cmp         r3, #0
  00acc	0a00000e	 beq         |$LN4@GetBinPara|

; 253  :             {
; 254  :             if (pParam->required) 

  00ad0	e59d3060	 ldr         r3, [sp, #0x60]
  00ad4	e2833008	 add         r3, r3, #8
  00ad8	e5933000	 ldr         r3, [r3]
  00adc	e3530000	 cmp         r3, #0
  00ae0	0a000003	 beq         |$LN3@GetBinPara|

; 255  :         	{
; 256  :                 RETAILMSG(1, (L"Registry: missing bin \"%s\"\r\n", pName));

  00ae4	e59d1014	 ldr         r1, [sp, #0x14]
  00ae8	e59f00a0	 ldr         r0, [pc, #0xA0]
  00aec	eb000000	 bl          NKDbgPrintfW

; 257  :                 goto cleanUp;

  00af0	ea000020	 b           |$cleanUp$39370|
  00af4		 |$LN3@GetBinPara|

; 258  :         	}
; 259  :             *(VOID**)pValue = NULL;

  00af4	e59d2010	 ldr         r2, [sp, #0x10]
  00af8	e3a03000	 mov         r3, #0
  00afc	e5823000	 str         r3, [r2]

; 260  :             status = ERROR_SUCCESS;

  00b00	e3a03000	 mov         r3, #0
  00b04	e58d301c	 str         r3, [sp, #0x1C]

; 261  :             }
; 262  :         else

  00b08	ea00001a	 b           |$LN2@GetBinPara|
  00b0c		 |$LN4@GetBinPara|

; 263  :             {
; 264  :             pBuffer = (UCHAR*)LocalAlloc(LMEM_FIXED, size);

  00b0c	e59d1018	 ldr         r1, [sp, #0x18]
  00b10	e3a00000	 mov         r0, #0
  00b14	eb000000	 bl          LocalAlloc
  00b18	e58d0048	 str         r0, [sp, #0x48]
  00b1c	e59d3048	 ldr         r3, [sp, #0x48]
  00b20	e58d3008	 str         r3, [sp, #8]

; 265  :             if (pBuffer == NULL)

  00b24	e59d3008	 ldr         r3, [sp, #8]
  00b28	e3530000	 cmp         r3, #0
  00b2c	1a000002	 bne         |$LN1@GetBinPara|

; 266  :                 {
; 267  :                 status = ERROR_OUTOFMEMORY;

  00b30	e3a0300e	 mov         r3, #0xE
  00b34	e58d301c	 str         r3, [sp, #0x1C]

; 268  :                 goto cleanUp;

  00b38	ea00000e	 b           |$cleanUp$39370|
  00b3c		 |$LN1@GetBinPara|

; 269  :                 }
; 270  :             status = RegQueryValueEx(hKey, pName, NULL, &type, pBuffer, &size);

  00b3c	e28d3018	 add         r3, sp, #0x18
  00b40	e58d3004	 str         r3, [sp, #4]
  00b44	e59d3008	 ldr         r3, [sp, #8]
  00b48	e58d3000	 str         r3, [sp]
  00b4c	e28d300c	 add         r3, sp, #0xC
  00b50	e3a02000	 mov         r2, #0
  00b54	e59d1014	 ldr         r1, [sp, #0x14]
  00b58	e59d0058	 ldr         r0, [sp, #0x58]
  00b5c	eb000000	 bl          RegQueryValueExW
  00b60	e58d004c	 str         r0, [sp, #0x4C]
  00b64	e59d304c	 ldr         r3, [sp, #0x4C]
  00b68	e58d301c	 str         r3, [sp, #0x1C]

; 271  :             *(VOID**)pValue = pBuffer;

  00b6c	e59d2008	 ldr         r2, [sp, #8]
  00b70	e59d3010	 ldr         r3, [sp, #0x10]
  00b74	e5832000	 str         r2, [r3]
  00b78		 |$LN2@GetBinPara|
  00b78		 |$LN5@GetBinPara|
  00b78		 |$cleanUp$39370|

; 272  :             }
; 273  :         }
; 274  : 
; 275  : cleanUp:
; 276  :     return status;

  00b78	e59d301c	 ldr         r3, [sp, #0x1C]
  00b7c	e58d3038	 str         r3, [sp, #0x38]

; 277  : }

  00b80	e59d0038	 ldr         r0, [sp, #0x38]
  00b84	e28dd050	 add         sp, sp, #0x50
  00b88	e89d6000	 ldmia       sp, {sp, lr}
  00b8c	e12fff1e	 bx          lr
  00b90		 |$LN16@GetBinPara|
  00b90		 |$LN17@GetBinPara|
  00b90	00000000	 DCD         |??_C@_1DK@FFJGJOJE@?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AA?3?$AA?5?$AAm?$AAi?$AAs?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAb?$AAi?$AAn?$AA?5?$AA?$CC?$AA?$CF?$AAs?$AA?$CC?$AA?$AN?$AA?6?$AA?$AA@|
  00b94		 |$M39563|

			 ENDP  ; |GetBinParam|

	EXPORT	|SetDeviceRegistryParams|

  00028			 AREA	 |.pdata|, PDATA
|$T39580| DCD	|$LN23@SetDeviceR|
	DCD	0x40005b04
; Function compile flags: /Odtp

  00b94			 AREA	 |.text|, CODE, ARM

  00b94		 |SetDeviceRegistryParams| PROC

; 392  : {

  00b94		 |$LN23@SetDeviceR|
  00b94	e1a0c00d	 mov         r12, sp
  00b98	e92d000f	 stmdb       sp!, {r0 - r3}
  00b9c	e92d5000	 stmdb       sp!, {r12, lr}
  00ba0	e24dd028	 sub         sp, sp, #0x28
  00ba4		 |$M39577|

; 393  :     DWORD status = ERROR_SUCCESS;

  00ba4	e3a03000	 mov         r3, #0
  00ba8	e58d300c	 str         r3, [sp, #0xC]

; 394  :     HKEY hKey;
; 395  :     DWORD i;
; 396  : 
; 397  :     // Open registry context to read parameters
; 398  :     if ((hKey = OpenDeviceKey(context)) == NULL)

  00bac	e59d0030	 ldr         r0, [sp, #0x30]
  00bb0	eb000000	 bl          OpenDeviceKey
  00bb4	e58d0018	 str         r0, [sp, #0x18]
  00bb8	e59d3018	 ldr         r3, [sp, #0x18]
  00bbc	e58d3008	 str         r3, [sp, #8]
  00bc0	e59d3008	 ldr         r3, [sp, #8]
  00bc4	e3530000	 cmp         r3, #0
  00bc8	1a00000d	 bne         |$LN12@SetDeviceR|

; 399  :         {
; 400  :         // It looks like we didn't get active registry key,
; 401  :         // try open key directly
; 402  :         if ((status = RegOpenKeyEx(
; 403  :             HKEY_LOCAL_MACHINE, context, 0, 0, &hKey
; 404  :             )) != ERROR_SUCCESS)

  00bcc	e28d3008	 add         r3, sp, #8
  00bd0	e58d3000	 str         r3, [sp]
  00bd4	e3a03000	 mov         r3, #0
  00bd8	e3a02000	 mov         r2, #0
  00bdc	e59d1030	 ldr         r1, [sp, #0x30]
  00be0	e3a0010a	 mov         r0, #0xA, 2
  00be4	eb000000	 bl          RegOpenKeyExW
  00be8	e58d001c	 str         r0, [sp, #0x1C]
  00bec	e59d301c	 ldr         r3, [sp, #0x1C]
  00bf0	e58d300c	 str         r3, [sp, #0xC]
  00bf4	e59d300c	 ldr         r3, [sp, #0xC]
  00bf8	e3530000	 cmp         r3, #0
  00bfc	0a000000	 beq         |$LN11@SetDeviceR|

; 405  :         {
; 406  :             goto cleanUp;

  00c00	ea000038	 b           |$cleanUp$39464|
  00c04		 |$LN11@SetDeviceR|
  00c04		 |$LN12@SetDeviceR|

; 407  :         }
; 408  :         }
; 409  : 
; 410  :     // For all members of array
; 411  :     for (i = 0; i < count && status == ERROR_SUCCESS; i++)

  00c04	e3a03000	 mov         r3, #0
  00c08	e58d3004	 str         r3, [sp, #4]
  00c0c	ea000002	 b           |$LN10@SetDeviceR|
  00c10		 |$LN9@SetDeviceR|
  00c10	e59d3004	 ldr         r3, [sp, #4]
  00c14	e2833001	 add         r3, r3, #1
  00c18	e58d3004	 str         r3, [sp, #4]
  00c1c		 |$LN10@SetDeviceR|
  00c1c	e59d2004	 ldr         r2, [sp, #4]
  00c20	e59d3038	 ldr         r3, [sp, #0x38]
  00c24	e1520003	 cmp         r2, r3
  00c28	2a00002c	 bcs         |$LN8@SetDeviceR|
  00c2c	e59d300c	 ldr         r3, [sp, #0xC]
  00c30	e3530000	 cmp         r3, #0
  00c34	1a000029	 bne         |$LN8@SetDeviceR|

; 412  :         {
; 413  :         switch (params[i].type)

  00c38	e59d1004	 ldr         r1, [sp, #4]
  00c3c	e3a03018	 mov         r3, #0x18
  00c40	e0020391	 mul         r2, r1, r3
  00c44	e59d303c	 ldr         r3, [sp, #0x3C]
  00c48	e0833002	 add         r3, r3, r2
  00c4c	e2833004	 add         r3, r3, #4
  00c50	e5933000	 ldr         r3, [r3]
  00c54	e58d3020	 str         r3, [sp, #0x20]
  00c58	e59d3020	 ldr         r3, [sp, #0x20]
  00c5c	e2433001	 sub         r3, r3, #1
  00c60	e58d3020	 str         r3, [sp, #0x20]
  00c64	e59d3020	 ldr         r3, [sp, #0x20]
  00c68	e3530003	 cmp         r3, #3
  00c6c	8a000017	 bhi         |$LN1@SetDeviceR|
  00c70	e59d2020	 ldr         r2, [sp, #0x20]
  00c74	e1a03102	 mov         r3, r2, lsl #2
  00c78	e083300f	 add         r3, r3, pc
  00c7c	e5933004	 ldr         r3, [r3, #4]
  00c80	e08ff003	 add         pc, pc, r3
  00c84		 |$LN16@SetDeviceR|
  00c84		 |$LN15@SetDeviceR|
  00c84		 |$LN17@SetDeviceR|
  00c84	0000000c	 DCD         0xc
  00c88		 |$LN18@SetDeviceR|
  00c88	0000003c	 DCD         0x3c
  00c8c		 |$LN19@SetDeviceR|
  00c8c	00000040	 DCD         0x40
  00c90		 |$LN20@SetDeviceR|
  00c90	00000044	 DCD         0x44
  00c94		 |$LN5@SetDeviceR|

; 414  :             {
; 415  :             case PARAM_DWORD:
; 416  :                 status = SetDWordParam(hKey, pBase, &params[i]);

  00c94	e59d1004	 ldr         r1, [sp, #4]
  00c98	e3a03018	 mov         r3, #0x18
  00c9c	e0020391	 mul         r2, r1, r3
  00ca0	e59d303c	 ldr         r3, [sp, #0x3C]
  00ca4	e0832002	 add         r2, r3, r2
  00ca8	e59d1034	 ldr         r1, [sp, #0x34]
  00cac	e59d0008	 ldr         r0, [sp, #8]
  00cb0	eb000000	 bl          SetDWordParam
  00cb4	e58d0024	 str         r0, [sp, #0x24]
  00cb8	e59d3024	 ldr         r3, [sp, #0x24]
  00cbc	e58d300c	 str         r3, [sp, #0xC]

; 417  :                 break;

  00cc0	ea000005	 b           |$LN6@SetDeviceR|
  00cc4		 |$LN4@SetDeviceR|

; 418  :             case PARAM_STRING:
; 419  :               //  status = SetStringParam(hKey, pBase, &params[i]);
; 420  :                 break;

  00cc4	ea000004	 b           |$LN6@SetDeviceR|
  00cc8		 |$LN3@SetDeviceR|

; 421  :             case PARAM_MULTIDWORD:
; 422  :               //  status = GetMultiDWordParam(hKey, pBase, &params[i]);
; 423  :                 break;

  00cc8	ea000003	 b           |$LN6@SetDeviceR|
  00ccc		 |$LN2@SetDeviceR|

; 424  :             case PARAM_BIN:
; 425  :               //  status = GetBinParam(hKey, pBase, &params[i]);
; 426  :                 break;

  00ccc	ea000002	 b           |$LN6@SetDeviceR|
  00cd0		 |$LN1@SetDeviceR|

; 427  :             default:
; 428  :                 status = (DWORD) STATUS_FAIL_CHECK;

  00cd0	e3a03107	 mov         r3, #7, 2
  00cd4	e3833f8a	 orr         r3, r3, #0x8A, 30
  00cd8	e58d300c	 str         r3, [sp, #0xC]
  00cdc		 |$LN6@SetDeviceR|

; 429  :                 break;
; 430  :             }
; 431  :         }

  00cdc	eaffffcb	 b           |$LN9@SetDeviceR|
  00ce0		 |$LN8@SetDeviceR|

; 432  : 
; 433  :     // Close key
; 434  :     RegCloseKey(hKey);

  00ce0	e59d0008	 ldr         r0, [sp, #8]
  00ce4	eb000000	 bl          RegCloseKey
  00ce8		 |$cleanUp$39464|

; 435  : 
; 436  : cleanUp:
; 437  :     return status;

  00ce8	e59d300c	 ldr         r3, [sp, #0xC]
  00cec	e58d3014	 str         r3, [sp, #0x14]

; 438  : }

  00cf0	e59d0014	 ldr         r0, [sp, #0x14]
  00cf4	e28dd028	 add         sp, sp, #0x28
  00cf8	e89d6000	 ldmia       sp, {sp, lr}
  00cfc	e12fff1e	 bx          lr
  00d00		 |$M39578|

			 ENDP  ; |SetDeviceRegistryParams|

	IMPORT	|RegSetValueExW|

  00030			 AREA	 |.pdata|, PDATA
|$T39588| DCD	|$LN5@SetDWordPa|
	DCD	0x40002304
; Function compile flags: /Odtp

  00d00			 AREA	 |.text|, CODE, ARM

  00d00		 |SetDWordParam| PROC

; 368  : {

  00d00		 |$LN5@SetDWordPa|
  00d00	e1a0c00d	 mov         r12, sp
  00d04	e92d0007	 stmdb       sp!, {r0 - r2}
  00d08	e92d5000	 stmdb       sp!, {r12, lr}
  00d0c	e24dd028	 sub         sp, sp, #0x28
  00d10		 |$M39585|

; 369  :     DWORD status, size;
; 370  :     WCHAR *pName;
; 371  :     UCHAR *pValue;
; 372  : 
; 373  : 
; 374  :     pName = pParam->name;

  00d10	e59d3038	 ldr         r3, [sp, #0x38]
  00d14	e5933000	 ldr         r3, [r3]
  00d18	e58d300c	 str         r3, [sp, #0xC]

; 375  :     pValue = (UCHAR*)pBase + pParam->offset;

  00d1c	e59d3038	 ldr         r3, [sp, #0x38]
  00d20	e283300c	 add         r3, r3, #0xC
  00d24	e59d2034	 ldr         r2, [sp, #0x34]
  00d28	e5933000	 ldr         r3, [r3]
  00d2c	e0823003	 add         r3, r2, r3
  00d30	e58d3008	 str         r3, [sp, #8]

; 376  :     size = pParam->size;

  00d34	e59d3038	 ldr         r3, [sp, #0x38]
  00d38	e2833010	 add         r3, r3, #0x10
  00d3c	e5933000	 ldr         r3, [r3]
  00d40	e58d3010	 str         r3, [sp, #0x10]

; 377  : 
; 378  :     status = RegSetValueEx(hKey, pName, 0, REG_DWORD, pValue, size);

  00d44	e59d3010	 ldr         r3, [sp, #0x10]
  00d48	e58d3004	 str         r3, [sp, #4]
  00d4c	e59d3008	 ldr         r3, [sp, #8]
  00d50	e58d3000	 str         r3, [sp]
  00d54	e3a03004	 mov         r3, #4
  00d58	e3a02000	 mov         r2, #0
  00d5c	e59d100c	 ldr         r1, [sp, #0xC]
  00d60	e59d0030	 ldr         r0, [sp, #0x30]
  00d64	eb000000	 bl          RegSetValueExW
  00d68	e58d0024	 str         r0, [sp, #0x24]
  00d6c	e59d3024	 ldr         r3, [sp, #0x24]
  00d70	e58d3014	 str         r3, [sp, #0x14]

; 379  : 
; 380  :     return status;

  00d74	e59d3014	 ldr         r3, [sp, #0x14]
  00d78	e58d3020	 str         r3, [sp, #0x20]

; 381  : }

  00d7c	e59d0020	 ldr         r0, [sp, #0x20]
  00d80	e28dd028	 add         sp, sp, #0x28
  00d84	e89d6000	 ldmia       sp, {sp, lr}
  00d88	e12fff1e	 bx          lr
  00d8c		 |$M39586|

			 ENDP  ; |SetDWordParam|

	END
