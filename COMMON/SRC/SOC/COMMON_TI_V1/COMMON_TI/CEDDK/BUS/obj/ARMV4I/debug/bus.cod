; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\CEDDK\BUS\bus.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|CreateBusAccessHandle|
	IMPORT	|LocalFree|
	IMPORT	|CloseHandle|
	IMPORT	|CreateFileW|
	IMPORT	|memcpy|
	IMPORT	|wcslen|
	IMPORT	|LocalAlloc|
	IMPORT	|GetDeviceInformationByDeviceHandle|
	IMPORT	|memset|
	IMPORT	|GetDeviceHandleFromContext|
	IMPORT	|__security_cookie|
	IMPORT	|__GSHandlerCheck|
	IMPORT	|__security_check_cookie|

  00000			 AREA	 |.pdata|, PDATA
|$T43561| DCD	|$LN14@CreateBusA|
	DCD	0xc000aa05

  00000			 AREA	 |.xdata|, DATA
|$T43557| DCD	0xffffffc4
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\ceddk\bus\bus.c

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T43557|

  00008		 |CreateBusAccessHandle| PROC

; 33   : {

  00008		 |$LN14@CreateBusA|
  00008	e1a0c00d	 mov         r12, sp
  0000c	e92d0001	 stmdb       sp!, {r0}
  00010	e92d5000	 stmdb       sp!, {r12, lr}
  00014	e59fc290	 ldr         r12, [pc, #0x290]
  00018	e08dd00c	 add         sp, sp, r12
  0001c		 |$M43558|
  0001c	e59f3284	 ldr         r3, [pc, #0x284]
  00020	e5933000	 ldr         r3, [r3]
  00024	e58d364c	 str         r3, [sp, #0x64C]

; 34   :     BOOL rc = FALSE;

  00028	e3a03000	 mov         r3, #0
  0002c	e58d3010	 str         r3, [sp, #0x10]

; 35   :     PARENT_BUS_ACCESS *pBusAccess = NULL;

  00030	e3a03000	 mov         r3, #0
  00034	e58d3018	 str         r3, [sp, #0x18]

; 36   :     HANDLE hDevice;
; 37   :     DEVMGR_DEVICE_INFORMATION di;
; 38   :     DWORD length;
; 39   : 
; 40   :     // Get device handle
; 41   :     hDevice = GetDeviceHandleFromContext(szActivePath);

  00038	e59d0684	 ldr         r0, [sp, #0x684]
  0003c	eb000000	 bl          GetDeviceHandleFromContext
  00040	e58d0660	 str         r0, [sp, #0x660]
  00044	e59d3660	 ldr         r3, [sp, #0x660]
  00048	e58d300c	 str         r3, [sp, #0xC]

; 42   :     if (hDevice == NULL) goto cleanUp;

  0004c	e59d300c	 ldr         r3, [sp, #0xC]
  00050	e3530000	 cmp         r3, #0
  00054	1a000000	 bne         |$LN9@CreateBusA|
  00058	ea00006b	 b           |$cleanUp$43200|
  0005c		 |$LN9@CreateBusA|

; 43   : 
; 44   :     // Get device name and parent bus device manager handler
; 45   :     memset(&di, 0, sizeof(di));

  0005c	e3a02e63	 mov         r2, #0x63, 28
  00060	e3a01000	 mov         r1, #0
  00064	e28d001c	 add         r0, sp, #0x1C
  00068	eb000000	 bl          memset

; 46   :     di.dwSize = sizeof(di);

  0006c	e3a03e63	 mov         r3, #0x63, 28
  00070	e58d301c	 str         r3, [sp, #0x1C]

; 47   :     if (!GetDeviceInformationByDeviceHandle(hDevice, &di)) goto cleanUp;

  00074	e28d101c	 add         r1, sp, #0x1C
  00078	e59d000c	 ldr         r0, [sp, #0xC]
  0007c	eb000000	 bl          GetDeviceInformationByDeviceHandle
  00080	e58d0664	 str         r0, [sp, #0x664]
  00084	e59d3664	 ldr         r3, [sp, #0x664]
  00088	e3530000	 cmp         r3, #0
  0008c	1a000000	 bne         |$LN8@CreateBusA|
  00090	ea00005d	 b           |$cleanUp$43200|
  00094		 |$LN8@CreateBusA|

; 48   : 
; 49   :     // Allocate internal structure
; 50   :     pBusAccess = LocalAlloc(LPTR, sizeof(PARENT_BUS_ACCESS));

  00094	e3a01010	 mov         r1, #0x10
  00098	e3a00040	 mov         r0, #0x40
  0009c	eb000000	 bl          LocalAlloc
  000a0	e58d0668	 str         r0, [sp, #0x668]
  000a4	e59d3668	 ldr         r3, [sp, #0x668]
  000a8	e58d3018	 str         r3, [sp, #0x18]

; 51   :     if (pBusAccess == NULL) goto cleanUp;

  000ac	e59d3018	 ldr         r3, [sp, #0x18]
  000b0	e3530000	 cmp         r3, #0
  000b4	1a000000	 bne         |$LN7@CreateBusA|
  000b8	ea000053	 b           |$cleanUp$43200|
  000bc		 |$LN7@CreateBusA|

; 52   : 
; 53   :     // Set cookie & hBus
; 54   :     pBusAccess->cookie = BUS_ACCESS_COOKIE;

  000bc	e59d2018	 ldr         r2, [sp, #0x18]
  000c0	e59f31dc	 ldr         r3, [pc, #0x1DC]
  000c4	e5823000	 str         r3, [r2]

; 55   :     pBusAccess->hBus = INVALID_HANDLE_VALUE;

  000c8	e59d3018	 ldr         r3, [sp, #0x18]
  000cc	e2832008	 add         r2, r3, #8
  000d0	e3e03000	 mvn         r3, #0
  000d4	e5823000	 str         r3, [r2]

; 56   : 
; 57   :     // Save parent bus handler
; 58   :     pBusAccess->hRefBus = di.hParentDevice;

  000d8	e59d3018	 ldr         r3, [sp, #0x18]
  000dc	e2832004	 add         r2, r3, #4
  000e0	e59d3024	 ldr         r3, [sp, #0x24]
  000e4	e5823000	 str         r3, [r2]

; 59   : 
; 60   :     // Save device bus name
; 61   :     length = (wcslen(di.szBusName) + 1) * sizeof(WCHAR);

  000e8	e3a00b01	 mov         r0, #1, 22
  000ec	e3800044	 orr         r0, r0, #0x44
  000f0	e08d0000	 add         r0, sp, r0
  000f4	eb000000	 bl          wcslen
  000f8	e58d066c	 str         r0, [sp, #0x66C]
  000fc	e59d366c	 ldr         r3, [sp, #0x66C]
  00100	e2832001	 add         r2, r3, #1
  00104	e3a03002	 mov         r3, #2
  00108	e0030392	 mul         r3, r2, r3
  0010c	e58d3014	 str         r3, [sp, #0x14]

; 62   :     pBusAccess->pszDeviceName = LocalAlloc(LPTR, length);

  00110	e59d1014	 ldr         r1, [sp, #0x14]
  00114	e3a00040	 mov         r0, #0x40
  00118	eb000000	 bl          LocalAlloc
  0011c	e58d0670	 str         r0, [sp, #0x670]
  00120	e59d3018	 ldr         r3, [sp, #0x18]
  00124	e283200c	 add         r2, r3, #0xC
  00128	e59d3670	 ldr         r3, [sp, #0x670]
  0012c	e5823000	 str         r3, [r2]

; 63   :     if (pBusAccess->pszDeviceName == NULL) goto cleanUp;

  00130	e59d3018	 ldr         r3, [sp, #0x18]
  00134	e283300c	 add         r3, r3, #0xC
  00138	e5933000	 ldr         r3, [r3]
  0013c	e3530000	 cmp         r3, #0
  00140	1a000000	 bne         |$LN6@CreateBusA|
  00144	ea000030	 b           |$cleanUp$43200|
  00148		 |$LN6@CreateBusA|

; 64   :     memcpy(pBusAccess->pszDeviceName, di.szBusName, length);

  00148	e59d2014	 ldr         r2, [sp, #0x14]
  0014c	e3a01b01	 mov         r1, #1, 22
  00150	e3811044	 orr         r1, r1, #0x44
  00154	e08d1001	 add         r1, sp, r1
  00158	e59d3018	 ldr         r3, [sp, #0x18]
  0015c	e283300c	 add         r3, r3, #0xC
  00160	e5930000	 ldr         r0, [r3]
  00164	eb000000	 bl          memcpy

; 65   : 
; 66   :     // Get parent bus info when there is one
; 67   :     if (pBusAccess->hRefBus != NULL)

  00168	e59d3018	 ldr         r3, [sp, #0x18]
  0016c	e2833004	 add         r3, r3, #4
  00170	e5933000	 ldr         r3, [r3]
  00174	e3530000	 cmp         r3, #0
  00178	0a000021	 beq         |$LN5@CreateBusA|

; 68   :         {
; 69   :         // Get parent bus device information
; 70   :         memset(&di, 0, sizeof(di));

  0017c	e3a02e63	 mov         r2, #0x63, 28
  00180	e3a01000	 mov         r1, #0
  00184	e28d001c	 add         r0, sp, #0x1C
  00188	eb000000	 bl          memset

; 71   :         di.dwSize = sizeof(di);

  0018c	e3a03e63	 mov         r3, #0x63, 28
  00190	e58d301c	 str         r3, [sp, #0x1C]

; 72   :         if (!GetDeviceInformationByDeviceHandle(pBusAccess->hRefBus, &di))

  00194	e28d101c	 add         r1, sp, #0x1C
  00198	e59d3018	 ldr         r3, [sp, #0x18]
  0019c	e2833004	 add         r3, r3, #4
  001a0	e5930000	 ldr         r0, [r3]
  001a4	eb000000	 bl          GetDeviceInformationByDeviceHandle
  001a8	e58d0674	 str         r0, [sp, #0x674]
  001ac	e59d3674	 ldr         r3, [sp, #0x674]
  001b0	e3530000	 cmp         r3, #0
  001b4	1a000000	 bne         |$LN4@CreateBusA|

; 73   :             {
; 74   :             goto cleanUp;

  001b8	ea000013	 b           |$cleanUp$43200|
  001bc		 |$LN4@CreateBusA|

; 75   :             }
; 76   :         // Open bus for later calls
; 77   :         pBusAccess->hBus = CreateFile(
; 78   :             di.szBusName, GENERIC_READ|GENERIC_WRITE,
; 79   :             FILE_SHARE_READ|FILE_SHARE_WRITE, NULL, OPEN_EXISTING, 0, NULL
; 80   :             );

  001bc	e3a03000	 mov         r3, #0
  001c0	e58d3008	 str         r3, [sp, #8]
  001c4	e3a03000	 mov         r3, #0
  001c8	e58d3004	 str         r3, [sp, #4]
  001cc	e3a03003	 mov         r3, #3
  001d0	e58d3000	 str         r3, [sp]
  001d4	e3a03000	 mov         r3, #0
  001d8	e3a02003	 mov         r2, #3
  001dc	e3a01103	 mov         r1, #3, 2
  001e0	e3a00b01	 mov         r0, #1, 22
  001e4	e3800044	 orr         r0, r0, #0x44
  001e8	e08d0000	 add         r0, sp, r0
  001ec	eb000000	 bl          CreateFileW
  001f0	e58d0678	 str         r0, [sp, #0x678]
  001f4	e59d3018	 ldr         r3, [sp, #0x18]
  001f8	e2832008	 add         r2, r3, #8
  001fc	e59d3678	 ldr         r3, [sp, #0x678]
  00200	e5823000	 str         r3, [r2]
  00204		 |$LN5@CreateBusA|

; 81   :         }        
; 82   : 
; 83   :     // Done
; 84   :     rc = TRUE;

  00204	e3a03001	 mov         r3, #1
  00208	e58d3010	 str         r3, [sp, #0x10]
  0020c		 |$cleanUp$43200|

; 85   : 
; 86   : cleanUp:
; 87   :     if (!rc && pBusAccess != NULL)

  0020c	e59d3010	 ldr         r3, [sp, #0x10]
  00210	e3530000	 cmp         r3, #0
  00214	1a000018	 bne         |$LN3@CreateBusA|
  00218	e59d3018	 ldr         r3, [sp, #0x18]
  0021c	e3530000	 cmp         r3, #0
  00220	0a000015	 beq         |$LN3@CreateBusA|

; 88   :         {
; 89   :         if (pBusAccess->hBus != INVALID_HANDLE_VALUE)

  00224	e59d3018	 ldr         r3, [sp, #0x18]
  00228	e2833008	 add         r3, r3, #8
  0022c	e5933000	 ldr         r3, [r3]
  00230	e3730001	 cmn         r3, #1
  00234	0a000003	 beq         |$LN2@CreateBusA|

; 90   :             {
; 91   :             CloseHandle(pBusAccess->hBus);

  00238	e59d3018	 ldr         r3, [sp, #0x18]
  0023c	e2833008	 add         r3, r3, #8
  00240	e5930000	 ldr         r0, [r3]
  00244	eb000000	 bl          CloseHandle
  00248		 |$LN2@CreateBusA|

; 92   :             }            
; 93   :         if (pBusAccess->pszDeviceName != NULL)

  00248	e59d3018	 ldr         r3, [sp, #0x18]
  0024c	e283300c	 add         r3, r3, #0xC
  00250	e5933000	 ldr         r3, [r3]
  00254	e3530000	 cmp         r3, #0
  00258	0a000003	 beq         |$LN1@CreateBusA|

; 94   :             {
; 95   :             LocalFree(pBusAccess->pszDeviceName);

  0025c	e59d3018	 ldr         r3, [sp, #0x18]
  00260	e283300c	 add         r3, r3, #0xC
  00264	e5930000	 ldr         r0, [r3]
  00268	eb000000	 bl          LocalFree
  0026c		 |$LN1@CreateBusA|

; 96   :             }
; 97   :         LocalFree(pBusAccess);

  0026c	e59d0018	 ldr         r0, [sp, #0x18]
  00270	eb000000	 bl          LocalFree

; 98   :         pBusAccess = NULL;

  00274	e3a03000	 mov         r3, #0
  00278	e58d3018	 str         r3, [sp, #0x18]
  0027c		 |$LN3@CreateBusA|

; 99   :         }
; 100  :     return pBusAccess;

  0027c	e59d064c	 ldr         r0, [sp, #0x64C]
  00280	eb000000	 bl          __security_check_cookie
  00284	e59d3018	 ldr         r3, [sp, #0x18]
  00288	e58d365c	 str         r3, [sp, #0x65C]

; 101  : }

  0028c	e59d065c	 ldr         r0, [sp, #0x65C]
  00290	e3a0cc06	 mov         r12, #6, 24
  00294	e38cc07c	 orr         r12, r12, #0x7C
  00298	e08dd00c	 add         sp, sp, r12
  0029c	e89d6000	 ldmia       sp, {sp, lr}
  002a0	e12fff1e	 bx          lr
  002a4		 |$LN15@CreateBusA|
  002a4		 |$LN16@CreateBusA|
  002a4	41737562	 DCD         0x41737562
  002a8		 |$LN17@CreateBusA|
  002a8	00000000	 DCD         |__security_cookie|
  002ac		 |$LN18@CreateBusA|
  002ac	fffff984	 DCD         0xfffff984
  002b0		 |$M43559|

			 ENDP  ; |CreateBusAccessHandle|

	EXPORT	|CloseBusAccessHandle|
	IMPORT	|SetLastError|

  00008			 AREA	 |.pdata|, PDATA
|$T43570| DCD	|$LN9@CloseBusAc|
	DCD	0x40002904
; Function compile flags: /Odtp

  002b0			 AREA	 |.text|, CODE, ARM

  002b0		 |CloseBusAccessHandle| PROC

; 106  : {

  002b0		 |$LN9@CloseBusAc|
  002b0	e1a0c00d	 mov         r12, sp
  002b4	e92d0001	 stmdb       sp!, {r0}
  002b8	e92d5000	 stmdb       sp!, {r12, lr}
  002bc	e24dd004	 sub         sp, sp, #4
  002c0		 |$M43567|

; 107  :     PARENT_BUS_ACCESS *pBusAccess = (PARENT_BUS_ACCESS *)hBusAccess;

  002c0	e59d300c	 ldr         r3, [sp, #0xC]
  002c4	e58d3000	 str         r3, [sp]

; 108  : 
; 109  :     if ((pBusAccess == NULL) || (pBusAccess->cookie != BUS_ACCESS_COOKIE))

  002c8	e59d3000	 ldr         r3, [sp]
  002cc	e3530000	 cmp         r3, #0
  002d0	0a000004	 beq         |$LN3@CloseBusAc|
  002d4	e59d3000	 ldr         r3, [sp]
  002d8	e5932000	 ldr         r2, [r3]
  002dc	e59f306c	 ldr         r3, [pc, #0x6C]
  002e0	e1520003	 cmp         r2, r3
  002e4	0a000002	 beq         |$LN4@CloseBusAc|
  002e8		 |$LN3@CloseBusAc|

; 110  :         {
; 111  :         SetLastError(ERROR_INVALID_HANDLE);

  002e8	e3a00006	 mov         r0, #6
  002ec	eb000000	 bl          SetLastError

; 112  :         goto cleanUp;

  002f0	ea000013	 b           |$cleanUp$43229|
  002f4		 |$LN4@CloseBusAc|

; 113  :         }
; 114  : 
; 115  :     if (pBusAccess->hBus != INVALID_HANDLE_VALUE) CloseHandle(pBusAccess->hBus);

  002f4	e59d3000	 ldr         r3, [sp]
  002f8	e2833008	 add         r3, r3, #8
  002fc	e5933000	 ldr         r3, [r3]
  00300	e3730001	 cmn         r3, #1
  00304	0a000003	 beq         |$LN2@CloseBusAc|
  00308	e59d3000	 ldr         r3, [sp]
  0030c	e2833008	 add         r3, r3, #8
  00310	e5930000	 ldr         r0, [r3]
  00314	eb000000	 bl          CloseHandle
  00318		 |$LN2@CloseBusAc|

; 116  :     if (pBusAccess->pszDeviceName != NULL) LocalFree(pBusAccess->pszDeviceName);

  00318	e59d3000	 ldr         r3, [sp]
  0031c	e283300c	 add         r3, r3, #0xC
  00320	e5933000	 ldr         r3, [r3]
  00324	e3530000	 cmp         r3, #0
  00328	0a000003	 beq         |$LN1@CloseBusAc|
  0032c	e59d3000	 ldr         r3, [sp]
  00330	e283300c	 add         r3, r3, #0xC
  00334	e5930000	 ldr         r0, [r3]
  00338	eb000000	 bl          LocalFree
  0033c		 |$LN1@CloseBusAc|

; 117  :     LocalFree(pBusAccess);

  0033c	e59d0000	 ldr         r0, [sp]
  00340	eb000000	 bl          LocalFree
  00344		 |$cleanUp$43229|

; 118  : 
; 119  : cleanUp:
; 120  :     return;
; 121  : }

  00344	e28dd004	 add         sp, sp, #4
  00348	e89d6000	 ldmia       sp, {sp, lr}
  0034c	e12fff1e	 bx          lr
  00350		 |$LN10@CloseBusAc|
  00350		 |$LN11@CloseBusAc|
  00350	41737562	 DCD         0x41737562
  00354		 |$M43568|

			 ENDP  ; |CloseBusAccessHandle|

	EXPORT	|SetDevicePowerState|
	IMPORT	|DeviceIoControl|

  00010			 AREA	 |.pdata|, PDATA
|$T43582| DCD	|$LN8@SetDeviceP|
	DCD	0x40003a04
; Function compile flags: /Odtp

  00354			 AREA	 |.text|, CODE, ARM

  00354		 |SetDevicePowerState| PROC

; 127  : ) {

  00354		 |$LN8@SetDeviceP|
  00354	e1a0c00d	 mov         r12, sp
  00358	e92d000f	 stmdb       sp!, {r0 - r3}
  0035c	e92d5000	 stmdb       sp!, {r12, lr}
  00360	e24dd048	 sub         sp, sp, #0x48
  00364		 |$M43579|

; 128  :     BOOL rc = FALSE;

  00364	e3a03000	 mov         r3, #0
  00368	e58d3010	 str         r3, [sp, #0x10]

; 129  :     PARENT_BUS_ACCESS *pBusAccess = (PARENT_BUS_ACCESS *)hBusAccess;

  0036c	e59d3050	 ldr         r3, [sp, #0x50]
  00370	e58d3020	 str         r3, [sp, #0x20]

; 130  :     CE_BUS_POWER_STATE ps, psout;
; 131  :     
; 132  :     // Check passed handler
; 133  :     if (pBusAccess == NULL || pBusAccess->cookie != BUS_ACCESS_COOKIE)

  00374	e59d3020	 ldr         r3, [sp, #0x20]
  00378	e3530000	 cmp         r3, #0
  0037c	0a000004	 beq         |$LN2@SetDeviceP|
  00380	e59d3020	 ldr         r3, [sp, #0x20]
  00384	e5932000	 ldr         r2, [r3]
  00388	e59f30a8	 ldr         r3, [pc, #0xA8]
  0038c	e1520003	 cmp         r2, r3
  00390	0a000002	 beq         |$LN3@SetDeviceP|
  00394		 |$LN2@SetDeviceP|

; 134  :         {
; 135  :         SetLastError(ERROR_INVALID_HANDLE);

  00394	e3a00006	 mov         r0, #6
  00398	eb000000	 bl          SetLastError

; 136  :         goto cleanUp;

  0039c	ea00001f	 b           |$cleanUp$43249|
  003a0		 |$LN3@SetDeviceP|

; 137  :         }
; 138  : 
; 139  :     // Call parent device
; 140  :     if (pBusAccess->hBus != INVALID_HANDLE_VALUE)

  003a0	e59d3020	 ldr         r3, [sp, #0x20]
  003a4	e2833008	 add         r3, r3, #8
  003a8	e5933000	 ldr         r3, [r3]
  003ac	e3730001	 cmn         r3, #1
  003b0	0a00001a	 beq         |$LN1@SetDeviceP|

; 141  :         {
; 142  :         ps.lpDeviceBusName = pBusAccess->pszDeviceName;

  003b4	e59d3020	 ldr         r3, [sp, #0x20]
  003b8	e283300c	 add         r3, r3, #0xC
  003bc	e5933000	 ldr         r3, [r3]
  003c0	e58d3014	 str         r3, [sp, #0x14]

; 143  :         ps.lpceDevicePowerState = &powerState;

  003c4	e28d3054	 add         r3, sp, #0x54
  003c8	e58d3018	 str         r3, [sp, #0x18]

; 144  :         ps.lpReserved = pReserved;

  003cc	e59d3058	 ldr         r3, [sp, #0x58]
  003d0	e58d301c	 str         r3, [sp, #0x1C]

; 145  : 
; 146  :         // Due to problem with public\common\oak\busenum\defbus\defbus.cpp
; 147  :         // IOCTL_BUS_SET_POWER_STATE should always be called with lpOutBuffer
; 148  :         // pointing to a CE_BUS_POWER_STATE structure.
; 149  :         rc = DeviceIoControl(
; 150  :             pBusAccess->hBus, IOCTL_BUS_SET_POWER_STATE, &ps, sizeof(ps),
; 151  :             &psout, sizeof(psout), NULL, 0
; 152  :             );

  003d4	e3a03000	 mov         r3, #0
  003d8	e58d300c	 str         r3, [sp, #0xC]
  003dc	e3a03000	 mov         r3, #0
  003e0	e58d3008	 str         r3, [sp, #8]
  003e4	e3a0300c	 mov         r3, #0xC
  003e8	e58d3004	 str         r3, [sp, #4]
  003ec	e28d3024	 add         r3, sp, #0x24
  003f0	e58d3000	 str         r3, [sp]
  003f4	e3a0300c	 mov         r3, #0xC
  003f8	e28d2014	 add         r2, sp, #0x14
  003fc	e3a0182a	 mov         r1, #0x2A, 16
  00400	e3811010	 orr         r1, r1, #0x10
  00404	e59d0020	 ldr         r0, [sp, #0x20]
  00408	e2800008	 add         r0, r0, #8
  0040c	e5900000	 ldr         r0, [r0]
  00410	eb000000	 bl          DeviceIoControl
  00414	e58d0044	 str         r0, [sp, #0x44]
  00418	e59d3044	 ldr         r3, [sp, #0x44]
  0041c	e58d3010	 str         r3, [sp, #0x10]
  00420		 |$LN1@SetDeviceP|
  00420		 |$cleanUp$43249|

; 153  :         }
; 154  : 
; 155  : cleanUp:
; 156  :     return rc;

  00420	e59d3010	 ldr         r3, [sp, #0x10]
  00424	e58d3040	 str         r3, [sp, #0x40]

; 157  : }

  00428	e59d0040	 ldr         r0, [sp, #0x40]
  0042c	e28dd048	 add         sp, sp, #0x48
  00430	e89d6000	 ldmia       sp, {sp, lr}
  00434	e12fff1e	 bx          lr
  00438		 |$LN9@SetDeviceP|
  00438		 |$LN10@SetDeviceP|
  00438	41737562	 DCD         0x41737562
  0043c		 |$M43580|

			 ENDP  ; |SetDevicePowerState|

	EXPORT	|GetDevicePowerState|

  00018			 AREA	 |.pdata|, PDATA
|$T43594| DCD	|$LN8@GetDeviceP|
	DCD	0x40003a04
; Function compile flags: /Odtp

  0043c			 AREA	 |.text|, CODE, ARM

  0043c		 |GetDevicePowerState| PROC

; 163  : ) {

  0043c		 |$LN8@GetDeviceP|
  0043c	e1a0c00d	 mov         r12, sp
  00440	e92d0007	 stmdb       sp!, {r0 - r2}
  00444	e92d5000	 stmdb       sp!, {r12, lr}
  00448	e24dd03c	 sub         sp, sp, #0x3C
  0044c		 |$M43591|

; 164  :     BOOL rc = FALSE;

  0044c	e3a03000	 mov         r3, #0
  00450	e58d3010	 str         r3, [sp, #0x10]

; 165  :     PARENT_BUS_ACCESS *pBusAccess = (PARENT_BUS_ACCESS *)hBusAccess;

  00454	e59d3044	 ldr         r3, [sp, #0x44]
  00458	e58d3020	 str         r3, [sp, #0x20]

; 166  :     CE_BUS_POWER_STATE ps;
; 167  : 
; 168  :     // Check passed handler
; 169  :     if (pBusAccess == NULL || pBusAccess->cookie != BUS_ACCESS_COOKIE)

  0045c	e59d3020	 ldr         r3, [sp, #0x20]
  00460	e3530000	 cmp         r3, #0
  00464	0a000004	 beq         |$LN2@GetDeviceP|
  00468	e59d3020	 ldr         r3, [sp, #0x20]
  0046c	e5932000	 ldr         r2, [r3]
  00470	e59f30a8	 ldr         r3, [pc, #0xA8]
  00474	e1520003	 cmp         r2, r3
  00478	0a000002	 beq         |$LN3@GetDeviceP|
  0047c		 |$LN2@GetDeviceP|

; 170  :         {
; 171  :         SetLastError(ERROR_INVALID_HANDLE);

  0047c	e3a00006	 mov         r0, #6
  00480	eb000000	 bl          SetLastError

; 172  :         goto cleanUp;

  00484	ea00001f	 b           |$cleanUp$43267|
  00488		 |$LN3@GetDeviceP|

; 173  :         }
; 174  : 
; 175  :     // Call parent device
; 176  :     if (pBusAccess->hBus != INVALID_HANDLE_VALUE)

  00488	e59d3020	 ldr         r3, [sp, #0x20]
  0048c	e2833008	 add         r3, r3, #8
  00490	e5933000	 ldr         r3, [r3]
  00494	e3730001	 cmn         r3, #1
  00498	0a00001a	 beq         |$LN1@GetDeviceP|

; 177  :         {
; 178  :         ps.lpDeviceBusName = pBusAccess->pszDeviceName;

  0049c	e59d3020	 ldr         r3, [sp, #0x20]
  004a0	e283300c	 add         r3, r3, #0xC
  004a4	e5933000	 ldr         r3, [r3]
  004a8	e58d3014	 str         r3, [sp, #0x14]

; 179  :         ps.lpceDevicePowerState = pPowerState;

  004ac	e59d3048	 ldr         r3, [sp, #0x48]
  004b0	e58d3018	 str         r3, [sp, #0x18]

; 180  :         ps.lpReserved = pReserved;

  004b4	e59d304c	 ldr         r3, [sp, #0x4C]
  004b8	e58d301c	 str         r3, [sp, #0x1C]

; 181  :         rc = DeviceIoControl(
; 182  :             pBusAccess->hBus, IOCTL_BUS_GET_POWER_STATE, &ps, sizeof(ps),
; 183  :             NULL, 0, NULL, 0
; 184  :             );

  004bc	e3a03000	 mov         r3, #0
  004c0	e58d300c	 str         r3, [sp, #0xC]
  004c4	e3a03000	 mov         r3, #0
  004c8	e58d3008	 str         r3, [sp, #8]
  004cc	e3a03000	 mov         r3, #0
  004d0	e58d3004	 str         r3, [sp, #4]
  004d4	e3a03000	 mov         r3, #0
  004d8	e58d3000	 str         r3, [sp]
  004dc	e3a0300c	 mov         r3, #0xC
  004e0	e28d2014	 add         r2, sp, #0x14
  004e4	e3a0182a	 mov         r1, #0x2A, 16
  004e8	e381100c	 orr         r1, r1, #0xC
  004ec	e59d0020	 ldr         r0, [sp, #0x20]
  004f0	e2800008	 add         r0, r0, #8
  004f4	e5900000	 ldr         r0, [r0]
  004f8	eb000000	 bl          DeviceIoControl
  004fc	e58d0038	 str         r0, [sp, #0x38]
  00500	e59d3038	 ldr         r3, [sp, #0x38]
  00504	e58d3010	 str         r3, [sp, #0x10]
  00508		 |$LN1@GetDeviceP|
  00508		 |$cleanUp$43267|

; 185  :         }
; 186  : 
; 187  : cleanUp:
; 188  :     return rc;

  00508	e59d3010	 ldr         r3, [sp, #0x10]
  0050c	e58d3034	 str         r3, [sp, #0x34]

; 189  : }

  00510	e59d0034	 ldr         r0, [sp, #0x34]
  00514	e28dd03c	 add         sp, sp, #0x3C
  00518	e89d6000	 ldmia       sp, {sp, lr}
  0051c	e12fff1e	 bx          lr
  00520		 |$LN9@GetDeviceP|
  00520		 |$LN10@GetDeviceP|
  00520	41737562	 DCD         0x41737562
  00524		 |$M43592|

			 ENDP  ; |GetDevicePowerState|

	EXPORT	|TranslateBusAddr|
	IMPORT	|HalTranslateBusAddress|
	IMPORT	|memcpy|

  00020			 AREA	 |.pdata|, PDATA
|$T43609| DCD	|$LN9@TranslateB|
	DCD	0x40004f04
; Function compile flags: /Odtp

  00524			 AREA	 |.text|, CODE, ARM

  00524		 |TranslateBusAddr| PROC

; 197  : ) {

  00524		 |$LN9@TranslateB|
  00524	e1a0c00d	 mov         r12, sp
  00528	e92d000f	 stmdb       sp!, {r0 - r3}
  0052c	e92d5000	 stmdb       sp!, {r12, lr}
  00530	e24dd05c	 sub         sp, sp, #0x5C
  00534		 |$M43606|

; 198  :     BOOL rc = FALSE;

  00534	e3a03000	 mov         r3, #0
  00538	e58d3010	 str         r3, [sp, #0x10]

; 199  :     PARENT_BUS_ACCESS *pBusAccess = (PARENT_BUS_ACCESS *)hBusAccess;

  0053c	e59d3064	 ldr         r3, [sp, #0x64]
  00540	e58d3034	 str         r3, [sp, #0x34]

; 200  :     CE_BUS_TRANSLATE_BUS_ADDR busTranslate;
; 201  : 
; 202  :     // Check passed handler
; 203  :     if (pBusAccess == NULL || pBusAccess->cookie != BUS_ACCESS_COOKIE) {

  00544	e59d3034	 ldr         r3, [sp, #0x34]
  00548	e3530000	 cmp         r3, #0
  0054c	0a000004	 beq         |$LN3@TranslateB|
  00550	e59d3034	 ldr         r3, [sp, #0x34]
  00554	e5932000	 ldr         r2, [r3]
  00558	e59f30fc	 ldr         r3, [pc, #0xFC]
  0055c	e1520003	 cmp         r2, r3
  00560	0a000002	 beq         |$LN4@TranslateB|
  00564		 |$LN3@TranslateB|

; 204  :         SetLastError(ERROR_INVALID_HANDLE);

  00564	e3a00006	 mov         r0, #6
  00568	eb000000	 bl          SetLastError

; 205  :         goto clean;

  0056c	ea000034	 b           |$clean$43292|
  00570		 |$LN4@TranslateB|

; 206  :     }
; 207  : 
; 208  :     if (pBusAccess->hBus != INVALID_HANDLE_VALUE) {

  00570	e59d3034	 ldr         r3, [sp, #0x34]
  00574	e2833008	 add         r3, r3, #8
  00578	e5933000	 ldr         r3, [r3]
  0057c	e3730001	 cmn         r3, #1
  00580	0a000023	 beq         |$LN2@TranslateB|

; 209  :         // Call parent device bus
; 210  :         busTranslate.lpDeviceBusName = pBusAccess->pszDeviceName;

  00584	e59d3034	 ldr         r3, [sp, #0x34]
  00588	e283300c	 add         r3, r3, #0xC
  0058c	e5933000	 ldr         r3, [r3]
  00590	e58d3014	 str         r3, [sp, #0x14]

; 211  :         busTranslate.InterfaceType = interfaceType;

  00594	e59d3068	 ldr         r3, [sp, #0x68]
  00598	e58d3018	 str         r3, [sp, #0x18]

; 212  :         busTranslate.BusNumber = busNumber;

  0059c	e59d306c	 ldr         r3, [sp, #0x6C]
  005a0	e58d301c	 str         r3, [sp, #0x1C]

; 213  :         busTranslate.BusAddress = busAddress;

  005a4	e28d0024	 add         r0, sp, #0x24
  005a8	e28d1070	 add         r1, sp, #0x70
  005ac	e3a02008	 mov         r2, #8
  005b0	eb000000	 bl          memcpy

; 214  :         busTranslate.AddressSpace = pAddressSpace;

  005b4	e59d3078	 ldr         r3, [sp, #0x78]
  005b8	e58d302c	 str         r3, [sp, #0x2C]

; 215  :         busTranslate.TranslatedAddress = pTranslatedAddress;

  005bc	e59d307c	 ldr         r3, [sp, #0x7C]
  005c0	e58d3030	 str         r3, [sp, #0x30]

; 216  :         rc = DeviceIoControl(
; 217  :             pBusAccess->hBus, IOCTL_BUS_TRANSLATE_BUS_ADDRESS, &busTranslate,
; 218  :             sizeof(busTranslate), NULL, 0, NULL, 0
; 219  :         );

  005c4	e3a03000	 mov         r3, #0
  005c8	e58d300c	 str         r3, [sp, #0xC]
  005cc	e3a03000	 mov         r3, #0
  005d0	e58d3008	 str         r3, [sp, #8]
  005d4	e3a03000	 mov         r3, #0
  005d8	e58d3004	 str         r3, [sp, #4]
  005dc	e3a03000	 mov         r3, #0
  005e0	e58d3000	 str         r3, [sp]
  005e4	e3a03020	 mov         r3, #0x20
  005e8	e28d2014	 add         r2, sp, #0x14
  005ec	e3a0182a	 mov         r1, #0x2A, 16
  005f0	e3811004	 orr         r1, r1, #4
  005f4	e59d0034	 ldr         r0, [sp, #0x34]
  005f8	e2800008	 add         r0, r0, #8
  005fc	e5900000	 ldr         r0, [r0]
  00600	eb000000	 bl          DeviceIoControl
  00604	e58d0054	 str         r0, [sp, #0x54]
  00608	e59d3054	 ldr         r3, [sp, #0x54]
  0060c	e58d3010	 str         r3, [sp, #0x10]

; 220  :     } else {

  00610	ea00000b	 b           |$LN1@TranslateB|
  00614		 |$LN2@TranslateB|

; 221  :         // Call HAL
; 222  :         rc = HalTranslateBusAddress(
; 223  :             interfaceType, busNumber, busAddress, pAddressSpace, 
; 224  :             pTranslatedAddress
; 225  :         );

  00614	e59d307c	 ldr         r3, [sp, #0x7C]
  00618	e58d3004	 str         r3, [sp, #4]
  0061c	e59d3078	 ldr         r3, [sp, #0x78]
  00620	e58d3000	 str         r3, [sp]
  00624	e59d2070	 ldr         r2, [sp, #0x70]
  00628	e59d3074	 ldr         r3, [sp, #0x74]
  0062c	e59d106c	 ldr         r1, [sp, #0x6C]
  00630	e59d0068	 ldr         r0, [sp, #0x68]
  00634	eb000000	 bl          HalTranslateBusAddress
  00638	e5cd0058	 strb        r0, [sp, #0x58]
  0063c	e5dd3058	 ldrb        r3, [sp, #0x58]
  00640	e58d3010	 str         r3, [sp, #0x10]
  00644		 |$LN1@TranslateB|
  00644		 |$clean$43292|

; 226  :     }
; 227  :     
; 228  : clean:
; 229  :     return rc;

  00644	e59d3010	 ldr         r3, [sp, #0x10]
  00648	e58d3050	 str         r3, [sp, #0x50]

; 230  : }

  0064c	e59d0050	 ldr         r0, [sp, #0x50]
  00650	e28dd05c	 add         sp, sp, #0x5C
  00654	e89d6000	 ldmia       sp, {sp, lr}
  00658	e12fff1e	 bx          lr
  0065c		 |$LN10@TranslateB|
  0065c		 |$LN11@TranslateB|
  0065c	41737562	 DCD         0x41737562
  00660		 |$M43607|

			 ENDP  ; |TranslateBusAddr|

	EXPORT	|TranslateSystemAddr|
	IMPORT	|HalTranslateSystemAddress|

  00028			 AREA	 |.pdata|, PDATA
|$T43622| DCD	|$LN9@TranslateS|
	DCD	0x40004b04
; Function compile flags: /Odtp

  00660			 AREA	 |.text|, CODE, ARM

  00660		 |TranslateSystemAddr| PROC

; 237  : ) {

  00660		 |$LN9@TranslateS|
  00660	e1a0c00d	 mov         r12, sp
  00664	e92d000f	 stmdb       sp!, {r0 - r3}
  00668	e92d5000	 stmdb       sp!, {r12, lr}
  0066c	e24dd058	 sub         sp, sp, #0x58
  00670		 |$M43619|

; 238  :     BOOL rc = FALSE;

  00670	e3a03000	 mov         r3, #0
  00674	e58d3010	 str         r3, [sp, #0x10]

; 239  :     PARENT_BUS_ACCESS *pBusAccess = (PARENT_BUS_ACCESS *)hBusAccess;

  00678	e59d3060	 ldr         r3, [sp, #0x60]
  0067c	e58d3014	 str         r3, [sp, #0x14]

; 240  :     CE_BUS_TRANSLATE_SYSTEM_ADDR systemTranslate;
; 241  : 
; 242  : 
; 243  :     // Check passed handler
; 244  :     if (pBusAccess == NULL || pBusAccess->cookie != BUS_ACCESS_COOKIE) {

  00680	e59d3014	 ldr         r3, [sp, #0x14]
  00684	e3530000	 cmp         r3, #0
  00688	0a000004	 beq         |$LN3@TranslateS|
  0068c	e59d3014	 ldr         r3, [sp, #0x14]
  00690	e5932000	 ldr         r2, [r3]
  00694	e59f30ec	 ldr         r3, [pc, #0xEC]
  00698	e1520003	 cmp         r2, r3
  0069c	0a000002	 beq         |$LN4@TranslateS|
  006a0		 |$LN3@TranslateS|

; 245  :         SetLastError(ERROR_INVALID_HANDLE);

  006a0	e3a00006	 mov         r0, #6
  006a4	eb000000	 bl          SetLastError

; 246  :         goto clean;

  006a8	ea000030	 b           |$clean$43316|
  006ac		 |$LN4@TranslateS|

; 247  :     }
; 248  : 
; 249  :     if (pBusAccess->hBus != INVALID_HANDLE_VALUE) {

  006ac	e59d3014	 ldr         r3, [sp, #0x14]
  006b0	e2833008	 add         r3, r3, #8
  006b4	e5933000	 ldr         r3, [r3]
  006b8	e3730001	 cmn         r3, #1
  006bc	0a000021	 beq         |$LN2@TranslateS|

; 250  :         // Call parent device bus
; 251  :         systemTranslate.lpDeviceBusName = pBusAccess->pszDeviceName;

  006c0	e59d3014	 ldr         r3, [sp, #0x14]
  006c4	e283300c	 add         r3, r3, #0xC
  006c8	e5933000	 ldr         r3, [r3]
  006cc	e58d3018	 str         r3, [sp, #0x18]

; 252  :         systemTranslate.InterfaceType =  interfaceType;

  006d0	e59d3064	 ldr         r3, [sp, #0x64]
  006d4	e58d301c	 str         r3, [sp, #0x1C]

; 253  :         systemTranslate.BusNumber = busNumber;

  006d8	e59d3068	 ldr         r3, [sp, #0x68]
  006dc	e58d3020	 str         r3, [sp, #0x20]

; 254  :         systemTranslate.SystemAddress = systemAddress;

  006e0	e28d0028	 add         r0, sp, #0x28
  006e4	e28d106c	 add         r1, sp, #0x6C
  006e8	e3a02008	 mov         r2, #8
  006ec	eb000000	 bl          memcpy

; 255  :         systemTranslate.TranslatedAddress = pTranslatedAddress;

  006f0	e59d3074	 ldr         r3, [sp, #0x74]
  006f4	e58d3030	 str         r3, [sp, #0x30]

; 256  :         rc = DeviceIoControl(
; 257  :             pBusAccess->hBus, IOCTL_BUS_TRANSLATE_SYSTEM_ADDRESS,
; 258  :             &systemTranslate, sizeof(systemTranslate), NULL, 0, NULL, 0
; 259  :         );

  006f8	e3a03000	 mov         r3, #0
  006fc	e58d300c	 str         r3, [sp, #0xC]
  00700	e3a03000	 mov         r3, #0
  00704	e58d3008	 str         r3, [sp, #8]
  00708	e3a03000	 mov         r3, #0
  0070c	e58d3004	 str         r3, [sp, #4]
  00710	e3a03000	 mov         r3, #0
  00714	e58d3000	 str         r3, [sp]
  00718	e3a03020	 mov         r3, #0x20
  0071c	e28d2018	 add         r2, sp, #0x18
  00720	e3a0182a	 mov         r1, #0x2A, 16
  00724	e3811008	 orr         r1, r1, #8
  00728	e59d0014	 ldr         r0, [sp, #0x14]
  0072c	e2800008	 add         r0, r0, #8
  00730	e5900000	 ldr         r0, [r0]
  00734	eb000000	 bl          DeviceIoControl
  00738	e58d0050	 str         r0, [sp, #0x50]
  0073c	e59d3050	 ldr         r3, [sp, #0x50]
  00740	e58d3010	 str         r3, [sp, #0x10]

; 260  :     }  else {

  00744	ea000009	 b           |$LN1@TranslateS|
  00748		 |$LN2@TranslateS|

; 261  :         // Call HAL
; 262  :         rc = HalTranslateSystemAddress(
; 263  :             interfaceType, busNumber, systemAddress, pTranslatedAddress
; 264  :         );

  00748	e59d3074	 ldr         r3, [sp, #0x74]
  0074c	e58d3000	 str         r3, [sp]
  00750	e59d206c	 ldr         r2, [sp, #0x6C]
  00754	e59d3070	 ldr         r3, [sp, #0x70]
  00758	e59d1068	 ldr         r1, [sp, #0x68]
  0075c	e59d0064	 ldr         r0, [sp, #0x64]
  00760	eb000000	 bl          HalTranslateSystemAddress
  00764	e5cd0054	 strb        r0, [sp, #0x54]
  00768	e5dd3054	 ldrb        r3, [sp, #0x54]
  0076c	e58d3010	 str         r3, [sp, #0x10]
  00770		 |$LN1@TranslateS|
  00770		 |$clean$43316|

; 265  :     }
; 266  : 
; 267  : clean:
; 268  :     return rc;

  00770	e59d3010	 ldr         r3, [sp, #0x10]
  00774	e58d304c	 str         r3, [sp, #0x4C]

; 269  : }

  00778	e59d004c	 ldr         r0, [sp, #0x4C]
  0077c	e28dd058	 add         sp, sp, #0x58
  00780	e89d6000	 ldmia       sp, {sp, lr}
  00784	e12fff1e	 bx          lr
  00788		 |$LN10@TranslateS|
  00788		 |$LN11@TranslateS|
  00788	41737562	 DCD         0x41737562
  0078c		 |$M43620|

			 ENDP  ; |TranslateSystemAddr|

	EXPORT	|SetDeviceConfigurationData|
	IMPORT	|HalSetBusDataByOffset|

  00030			 AREA	 |.pdata|, PDATA
|$T43636| DCD	|$LN12@SetDeviceC|
	DCD	0x40005404
; Function compile flags: /Odtp

  0078c			 AREA	 |.text|, CODE, ARM

  0078c		 |SetDeviceConfigurationData| PROC

; 276  : ) {

  0078c		 |$LN12@SetDeviceC|
  0078c	e1a0c00d	 mov         r12, sp
  00790	e92d000f	 stmdb       sp!, {r0 - r3}
  00794	e92d5000	 stmdb       sp!, {r12, lr}
  00798	e24dd050	 sub         sp, sp, #0x50
  0079c		 |$M43633|

; 277  :     ULONG rc = 0;

  0079c	e3a03000	 mov         r3, #0
  007a0	e58d3010	 str         r3, [sp, #0x10]

; 278  :     PARENT_BUS_ACCESS *pBusAccess = (PARENT_BUS_ACCESS *)hBusAccess;

  007a4	e59d3058	 ldr         r3, [sp, #0x58]
  007a8	e58d3014	 str         r3, [sp, #0x14]

; 279  :     CE_BUS_DEVICE_CONFIGURATION_DATA deviceConfigData;
; 280  : 
; 281  : 
; 282  :     // Check passed handler
; 283  :     if (pBusAccess == NULL || pBusAccess->cookie != BUS_ACCESS_COOKIE) {

  007ac	e59d3014	 ldr         r3, [sp, #0x14]
  007b0	e3530000	 cmp         r3, #0
  007b4	0a000004	 beq         |$LN6@SetDeviceC|
  007b8	e59d3014	 ldr         r3, [sp, #0x14]
  007bc	e5932000	 ldr         r2, [r3]
  007c0	e59f3110	 ldr         r3, [pc, #0x110]
  007c4	e1520003	 cmp         r2, r3
  007c8	0a000002	 beq         |$LN7@SetDeviceC|
  007cc		 |$LN6@SetDeviceC|

; 284  :         SetLastError(ERROR_INVALID_HANDLE);

  007cc	e3a00006	 mov         r0, #6
  007d0	eb000000	 bl          SetLastError

; 285  :         goto clean;

  007d4	ea000039	 b           |$clean$43344|
  007d8		 |$LN7@SetDeviceC|

; 286  :     }
; 287  : 
; 288  :     if (pBusAccess->hBus != INVALID_HANDLE_VALUE) {

  007d8	e59d3014	 ldr         r3, [sp, #0x14]
  007dc	e2833008	 add         r3, r3, #8
  007e0	e5933000	 ldr         r3, [r3]
  007e4	e3730001	 cmn         r3, #1
  007e8	0a00001f	 beq         |$LN5@SetDeviceC|

; 289  :         // Call parent device bus
; 290  :         deviceConfigData.lpDeviceBusName = pBusAccess->pszDeviceName;

  007ec	e59d3014	 ldr         r3, [sp, #0x14]
  007f0	e283300c	 add         r3, r3, #0xC
  007f4	e5933000	 ldr         r3, [r3]
  007f8	e58d3018	 str         r3, [sp, #0x18]

; 291  :         deviceConfigData.dwSpace = space;

  007fc	e59d305c	 ldr         r3, [sp, #0x5C]
  00800	e58d301c	 str         r3, [sp, #0x1C]

; 292  :         deviceConfigData.dwOffset = offset;

  00804	e59d3068	 ldr         r3, [sp, #0x68]
  00808	e58d3020	 str         r3, [sp, #0x20]

; 293  :         deviceConfigData.dwLength = length;

  0080c	e59d306c	 ldr         r3, [sp, #0x6C]
  00810	e58d3024	 str         r3, [sp, #0x24]

; 294  :         deviceConfigData.pBuffer = pBuffer;

  00814	e59d3070	 ldr         r3, [sp, #0x70]
  00818	e58d3028	 str         r3, [sp, #0x28]

; 295  :         rc = DeviceIoControl(
; 296  :             pBusAccess->hBus, IOCTL_BUS_SET_CONFIGURE_DATA, &deviceConfigData,
; 297  :             sizeof(deviceConfigData), NULL, 0, NULL, 0
; 298  :         );

  0081c	e3a03000	 mov         r3, #0
  00820	e58d300c	 str         r3, [sp, #0xC]
  00824	e3a03000	 mov         r3, #0
  00828	e58d3008	 str         r3, [sp, #8]
  0082c	e3a03000	 mov         r3, #0
  00830	e58d3004	 str         r3, [sp, #4]
  00834	e3a03000	 mov         r3, #0
  00838	e58d3000	 str         r3, [sp]
  0083c	e3a03014	 mov         r3, #0x14
  00840	e28d2018	 add         r2, sp, #0x18
  00844	e3a0182a	 mov         r1, #0x2A, 16
  00848	e3811018	 orr         r1, r1, #0x18
  0084c	e59d0014	 ldr         r0, [sp, #0x14]
  00850	e2800008	 add         r0, r0, #8
  00854	e5900000	 ldr         r0, [r0]
  00858	eb000000	 bl          DeviceIoControl
  0085c	e58d0048	 str         r0, [sp, #0x48]
  00860	e59d3048	 ldr         r3, [sp, #0x48]
  00864	e58d3010	 str         r3, [sp, #0x10]

; 299  :     } else if (

  00868	ea000014	 b           |$LN4@SetDeviceC|
  0086c		 |$LN5@SetDeviceC|

; 300  :         space == PCI_WHICHSPACE_CONFIG || 
; 301  :         space == PCCARD_PCI_CONFIGURATION_SPACE
; 302  :     ) {

  0086c	e59d305c	 ldr         r3, [sp, #0x5C]
  00870	e3530000	 cmp         r3, #0
  00874	0a000002	 beq         |$LN2@SetDeviceC|
  00878	e59d305c	 ldr         r3, [sp, #0x5C]
  0087c	e3530000	 cmp         r3, #0
  00880	1a00000c	 bne         |$LN3@SetDeviceC|
  00884		 |$LN2@SetDeviceC|

; 303  :         // Call HAL for config space
; 304  :         rc = HalSetBusDataByOffset(
; 305  :             PCIConfiguration, busNumber, slotNumber, pBuffer, offset, length
; 306  :         );

  00884	e59d306c	 ldr         r3, [sp, #0x6C]
  00888	e58d3004	 str         r3, [sp, #4]
  0088c	e59d3068	 ldr         r3, [sp, #0x68]
  00890	e58d3000	 str         r3, [sp]
  00894	e59d3070	 ldr         r3, [sp, #0x70]
  00898	e59d2064	 ldr         r2, [sp, #0x64]
  0089c	e59d1060	 ldr         r1, [sp, #0x60]
  008a0	e3a00004	 mov         r0, #4
  008a4	eb000000	 bl          HalSetBusDataByOffset
  008a8	e58d004c	 str         r0, [sp, #0x4C]
  008ac	e59d304c	 ldr         r3, [sp, #0x4C]
  008b0	e58d3010	 str         r3, [sp, #0x10]

; 307  :     } else {

  008b4	ea000001	 b           |$LN1@SetDeviceC|
  008b8		 |$LN3@SetDeviceC|

; 308  :         SetLastError(ERROR_INVALID_HANDLE);

  008b8	e3a00006	 mov         r0, #6
  008bc	eb000000	 bl          SetLastError
  008c0		 |$LN1@SetDeviceC|
  008c0		 |$LN4@SetDeviceC|
  008c0		 |$clean$43344|

; 309  :     }
; 310  : 
; 311  : clean:
; 312  :     return rc;

  008c0	e59d3010	 ldr         r3, [sp, #0x10]
  008c4	e58d3044	 str         r3, [sp, #0x44]

; 313  : }

  008c8	e59d0044	 ldr         r0, [sp, #0x44]
  008cc	e28dd050	 add         sp, sp, #0x50
  008d0	e89d6000	 ldmia       sp, {sp, lr}
  008d4	e12fff1e	 bx          lr
  008d8		 |$LN13@SetDeviceC|
  008d8		 |$LN14@SetDeviceC|
  008d8	41737562	 DCD         0x41737562
  008dc		 |$M43634|

			 ENDP  ; |SetDeviceConfigurationData|

	EXPORT	|GetDeviceConfigurationData|
	IMPORT	|HalGetBusDataByOffset|

  00038			 AREA	 |.pdata|, PDATA
|$T43650| DCD	|$LN12@GetDeviceC|
	DCD	0x40005404
; Function compile flags: /Odtp

  008dc			 AREA	 |.text|, CODE, ARM

  008dc		 |GetDeviceConfigurationData| PROC

; 320  : ) {

  008dc		 |$LN12@GetDeviceC|
  008dc	e1a0c00d	 mov         r12, sp
  008e0	e92d000f	 stmdb       sp!, {r0 - r3}
  008e4	e92d5000	 stmdb       sp!, {r12, lr}
  008e8	e24dd050	 sub         sp, sp, #0x50
  008ec		 |$M43647|

; 321  :     ULONG rc = 0;

  008ec	e3a03000	 mov         r3, #0
  008f0	e58d3010	 str         r3, [sp, #0x10]

; 322  :     PARENT_BUS_ACCESS *pBusAccess = (PARENT_BUS_ACCESS *)hBusAccess;

  008f4	e59d3058	 ldr         r3, [sp, #0x58]
  008f8	e58d3014	 str         r3, [sp, #0x14]

; 323  :     CE_BUS_DEVICE_CONFIGURATION_DATA deviceConfigData;
; 324  : 
; 325  : 
; 326  :     // Check passed handler
; 327  :     if (pBusAccess == NULL || pBusAccess->cookie != BUS_ACCESS_COOKIE) {

  008fc	e59d3014	 ldr         r3, [sp, #0x14]
  00900	e3530000	 cmp         r3, #0
  00904	0a000004	 beq         |$LN6@GetDeviceC|
  00908	e59d3014	 ldr         r3, [sp, #0x14]
  0090c	e5932000	 ldr         r2, [r3]
  00910	e59f3110	 ldr         r3, [pc, #0x110]
  00914	e1520003	 cmp         r2, r3
  00918	0a000002	 beq         |$LN7@GetDeviceC|
  0091c		 |$LN6@GetDeviceC|

; 328  :         SetLastError(ERROR_INVALID_HANDLE);

  0091c	e3a00006	 mov         r0, #6
  00920	eb000000	 bl          SetLastError

; 329  :         goto clean;

  00924	ea000039	 b           |$clean$43375|
  00928		 |$LN7@GetDeviceC|

; 330  :     }
; 331  : 
; 332  :     if (pBusAccess->hBus != INVALID_HANDLE_VALUE) {

  00928	e59d3014	 ldr         r3, [sp, #0x14]
  0092c	e2833008	 add         r3, r3, #8
  00930	e5933000	 ldr         r3, [r3]
  00934	e3730001	 cmn         r3, #1
  00938	0a00001f	 beq         |$LN5@GetDeviceC|

; 333  :         // Call parent device bus
; 334  :         deviceConfigData.lpDeviceBusName = pBusAccess->pszDeviceName;

  0093c	e59d3014	 ldr         r3, [sp, #0x14]
  00940	e283300c	 add         r3, r3, #0xC
  00944	e5933000	 ldr         r3, [r3]
  00948	e58d3018	 str         r3, [sp, #0x18]

; 335  :         deviceConfigData.dwSpace = space;

  0094c	e59d305c	 ldr         r3, [sp, #0x5C]
  00950	e58d301c	 str         r3, [sp, #0x1C]

; 336  :         deviceConfigData.dwOffset = offset;

  00954	e59d3068	 ldr         r3, [sp, #0x68]
  00958	e58d3020	 str         r3, [sp, #0x20]

; 337  :         deviceConfigData.dwLength = length;

  0095c	e59d306c	 ldr         r3, [sp, #0x6C]
  00960	e58d3024	 str         r3, [sp, #0x24]

; 338  :         deviceConfigData.pBuffer = pBuffer;

  00964	e59d3070	 ldr         r3, [sp, #0x70]
  00968	e58d3028	 str         r3, [sp, #0x28]

; 339  :         rc = DeviceIoControl(
; 340  :             pBusAccess->hBus, IOCTL_BUS_GET_CONFIGURE_DATA, &deviceConfigData,
; 341  :             sizeof(deviceConfigData), NULL, 0, NULL, 0
; 342  :         );

  0096c	e3a03000	 mov         r3, #0
  00970	e58d300c	 str         r3, [sp, #0xC]
  00974	e3a03000	 mov         r3, #0
  00978	e58d3008	 str         r3, [sp, #8]
  0097c	e3a03000	 mov         r3, #0
  00980	e58d3004	 str         r3, [sp, #4]
  00984	e3a03000	 mov         r3, #0
  00988	e58d3000	 str         r3, [sp]
  0098c	e3a03014	 mov         r3, #0x14
  00990	e28d2018	 add         r2, sp, #0x18
  00994	e3a0182a	 mov         r1, #0x2A, 16
  00998	e3811014	 orr         r1, r1, #0x14
  0099c	e59d0014	 ldr         r0, [sp, #0x14]
  009a0	e2800008	 add         r0, r0, #8
  009a4	e5900000	 ldr         r0, [r0]
  009a8	eb000000	 bl          DeviceIoControl
  009ac	e58d0048	 str         r0, [sp, #0x48]
  009b0	e59d3048	 ldr         r3, [sp, #0x48]
  009b4	e58d3010	 str         r3, [sp, #0x10]

; 343  :     } else if (

  009b8	ea000014	 b           |$LN4@GetDeviceC|
  009bc		 |$LN5@GetDeviceC|

; 344  :         space == PCI_WHICHSPACE_CONFIG || 
; 345  :         space == PCCARD_PCI_CONFIGURATION_SPACE
; 346  :     ) {

  009bc	e59d305c	 ldr         r3, [sp, #0x5C]
  009c0	e3530000	 cmp         r3, #0
  009c4	0a000002	 beq         |$LN2@GetDeviceC|
  009c8	e59d305c	 ldr         r3, [sp, #0x5C]
  009cc	e3530000	 cmp         r3, #0
  009d0	1a00000c	 bne         |$LN3@GetDeviceC|
  009d4		 |$LN2@GetDeviceC|

; 347  :         // Call HAL for config space
; 348  :         rc = HalGetBusDataByOffset(
; 349  :             PCIConfiguration, busNumber, slotNumber, pBuffer, offset, length
; 350  :         );

  009d4	e59d306c	 ldr         r3, [sp, #0x6C]
  009d8	e58d3004	 str         r3, [sp, #4]
  009dc	e59d3068	 ldr         r3, [sp, #0x68]
  009e0	e58d3000	 str         r3, [sp]
  009e4	e59d3070	 ldr         r3, [sp, #0x70]
  009e8	e59d2064	 ldr         r2, [sp, #0x64]
  009ec	e59d1060	 ldr         r1, [sp, #0x60]
  009f0	e3a00004	 mov         r0, #4
  009f4	eb000000	 bl          HalGetBusDataByOffset
  009f8	e58d004c	 str         r0, [sp, #0x4C]
  009fc	e59d304c	 ldr         r3, [sp, #0x4C]
  00a00	e58d3010	 str         r3, [sp, #0x10]

; 351  :     } else {

  00a04	ea000001	 b           |$LN1@GetDeviceC|
  00a08		 |$LN3@GetDeviceC|

; 352  :         SetLastError(ERROR_INVALID_HANDLE);

  00a08	e3a00006	 mov         r0, #6
  00a0c	eb000000	 bl          SetLastError
  00a10		 |$LN1@GetDeviceC|
  00a10		 |$LN4@GetDeviceC|
  00a10		 |$clean$43375|

; 353  :     }
; 354  : 
; 355  : clean:
; 356  :     return rc;

  00a10	e59d3010	 ldr         r3, [sp, #0x10]
  00a14	e58d3044	 str         r3, [sp, #0x44]

; 357  : }

  00a18	e59d0044	 ldr         r0, [sp, #0x44]
  00a1c	e28dd050	 add         sp, sp, #0x50
  00a20	e89d6000	 ldmia       sp, {sp, lr}
  00a24	e12fff1e	 bx          lr
  00a28		 |$LN13@GetDeviceC|
  00a28		 |$LN14@GetDeviceC|
  00a28	41737562	 DCD         0x41737562
  00a2c		 |$M43648|

			 ENDP  ; |GetDeviceConfigurationData|

	EXPORT	|GetParentDeviceInfo|

  00040			 AREA	 |.pdata|, PDATA
|$T43658| DCD	|$LN7@GetParentD|
	DCD	0x40002204
; Function compile flags: /Odtp

  00a2c			 AREA	 |.text|, CODE, ARM

  00a2c		 |GetParentDeviceInfo| PROC

; 362  : {

  00a2c		 |$LN7@GetParentD|
  00a2c	e1a0c00d	 mov         r12, sp
  00a30	e92d0003	 stmdb       sp!, {r0, r1}
  00a34	e92d5000	 stmdb       sp!, {r12, lr}
  00a38	e24dd010	 sub         sp, sp, #0x10
  00a3c		 |$M43655|

; 363  :     BOOL rc = FALSE;

  00a3c	e3a03000	 mov         r3, #0
  00a40	e58d3000	 str         r3, [sp]

; 364  :     PARENT_BUS_ACCESS *pBusAccess = (PARENT_BUS_ACCESS *)hBusAccess;

  00a44	e59d3018	 ldr         r3, [sp, #0x18]
  00a48	e58d3004	 str         r3, [sp, #4]

; 365  : 
; 366  :     // Check passed handler
; 367  :     if (pBusAccess == NULL || pBusAccess->cookie != BUS_ACCESS_COOKIE) {

  00a4c	e59d3004	 ldr         r3, [sp, #4]
  00a50	e3530000	 cmp         r3, #0
  00a54	0a000004	 beq         |$LN1@GetParentD|
  00a58	e59d3004	 ldr         r3, [sp, #4]
  00a5c	e5932000	 ldr         r2, [r3]
  00a60	e59f3048	 ldr         r3, [pc, #0x48]
  00a64	e1520003	 cmp         r2, r3
  00a68	0a000002	 beq         |$LN2@GetParentD|
  00a6c		 |$LN1@GetParentD|

; 368  :         SetLastError(ERROR_INVALID_HANDLE);

  00a6c	e3a00006	 mov         r0, #6
  00a70	eb000000	 bl          SetLastError

; 369  :         goto clean;

  00a74	ea000007	 b           |$clean$43395|
  00a78		 |$LN2@GetParentD|

; 370  :     }
; 371  : 
; 372  :     rc = GetDeviceInformationByDeviceHandle(pBusAccess->hRefBus, pInfo);

  00a78	e59d101c	 ldr         r1, [sp, #0x1C]
  00a7c	e59d3004	 ldr         r3, [sp, #4]
  00a80	e2833004	 add         r3, r3, #4
  00a84	e5930000	 ldr         r0, [r3]
  00a88	eb000000	 bl          GetDeviceInformationByDeviceHandle
  00a8c	e58d000c	 str         r0, [sp, #0xC]
  00a90	e59d300c	 ldr         r3, [sp, #0xC]
  00a94	e58d3000	 str         r3, [sp]
  00a98		 |$clean$43395|

; 373  : 
; 374  : clean:
; 375  :     return rc;

  00a98	e59d3000	 ldr         r3, [sp]
  00a9c	e58d3008	 str         r3, [sp, #8]

; 376  : }

  00aa0	e59d0008	 ldr         r0, [sp, #8]
  00aa4	e28dd010	 add         sp, sp, #0x10
  00aa8	e89d6000	 ldmia       sp, {sp, lr}
  00aac	e12fff1e	 bx          lr
  00ab0		 |$LN8@GetParentD|
  00ab0		 |$LN9@GetParentD|
  00ab0	41737562	 DCD         0x41737562
  00ab4		 |$M43656|

			 ENDP  ; |GetParentDeviceInfo|

	EXPORT	|GetChildDeviceRemoveState|

  00048			 AREA	 |.pdata|, PDATA
|$T43670| DCD	|$LN8@GetChildDe|
	DCD	0x40003c04
; Function compile flags: /Odtp

  00ab4			 AREA	 |.text|, CODE, ARM

  00ab4		 |GetChildDeviceRemoveState| PROC

; 381  : {

  00ab4		 |$LN8@GetChildDe|
  00ab4	e1a0c00d	 mov         r12, sp
  00ab8	e92d0003	 stmdb       sp!, {r0, r1}
  00abc	e92d5000	 stmdb       sp!, {r12, lr}
  00ac0	e24dd034	 sub         sp, sp, #0x34
  00ac4		 |$M43667|

; 382  :     BOOL rc = FALSE;

  00ac4	e3a03000	 mov         r3, #0
  00ac8	e58d3010	 str         r3, [sp, #0x10]

; 383  :     PARENT_BUS_ACCESS *pBusAccess = (PARENT_BUS_ACCESS *)hBusAccess;

  00acc	e59d303c	 ldr         r3, [sp, #0x3C]
  00ad0	e58d3014	 str         r3, [sp, #0x14]

; 384  : 
; 385  :     // Check passed handler
; 386  :     if (pBusAccess == NULL || pBusAccess->cookie != BUS_ACCESS_COOKIE) {

  00ad4	e59d3014	 ldr         r3, [sp, #0x14]
  00ad8	e3530000	 cmp         r3, #0
  00adc	0a000004	 beq         |$LN2@GetChildDe|
  00ae0	e59d3014	 ldr         r3, [sp, #0x14]
  00ae4	e5932000	 ldr         r2, [r3]
  00ae8	e59f30b0	 ldr         r3, [pc, #0xB0]
  00aec	e1520003	 cmp         r2, r3
  00af0	0a000002	 beq         |$LN3@GetChildDe|
  00af4		 |$LN2@GetChildDe|

; 387  :         SetLastError(ERROR_INVALID_HANDLE);

  00af4	e3a00006	 mov         r0, #6
  00af8	eb000000	 bl          SetLastError

; 388  :         goto clean;

  00afc	ea000021	 b           |$clean$43407|
  00b00		 |$LN3@GetChildDe|

; 389  :     }
; 390  : 
; 391  :     // Call parent device if exists
; 392  :     if (pBusAccess->hBus != INVALID_HANDLE_VALUE) {

  00b00	e59d3014	 ldr         r3, [sp, #0x14]
  00b04	e2833008	 add         r3, r3, #8
  00b08	e5933000	 ldr         r3, [r3]
  00b0c	e3730001	 cmn         r3, #1
  00b10	0a00001c	 beq         |$LN1@GetChildDe|

; 393  :         rc = DeviceIoControl(
; 394  :             pBusAccess->hBus, IOCTL_BUS_GET_CONFIGURE_DATA, 
; 395  :             pBusAccess->pszDeviceName, 
; 396  :             (_tcslen(pBusAccess->pszDeviceName) + 1) * sizeof(TCHAR),
; 397  :             pChildDeviceState, sizeof(DWORD), NULL, 0
; 398  :         );

  00b14	e59d3014	 ldr         r3, [sp, #0x14]
  00b18	e283300c	 add         r3, r3, #0xC
  00b1c	e5930000	 ldr         r0, [r3]
  00b20	eb000000	 bl          wcslen
  00b24	e58d002c	 str         r0, [sp, #0x2C]
  00b28	e3a03000	 mov         r3, #0
  00b2c	e58d300c	 str         r3, [sp, #0xC]
  00b30	e3a03000	 mov         r3, #0
  00b34	e58d3008	 str         r3, [sp, #8]
  00b38	e3a03004	 mov         r3, #4
  00b3c	e58d3004	 str         r3, [sp, #4]
  00b40	e59d3040	 ldr         r3, [sp, #0x40]
  00b44	e58d3000	 str         r3, [sp]
  00b48	e59d302c	 ldr         r3, [sp, #0x2C]
  00b4c	e2832001	 add         r2, r3, #1
  00b50	e3a03002	 mov         r3, #2
  00b54	e0030392	 mul         r3, r2, r3
  00b58	e59d2014	 ldr         r2, [sp, #0x14]
  00b5c	e282200c	 add         r2, r2, #0xC
  00b60	e5922000	 ldr         r2, [r2]
  00b64	e3a0182a	 mov         r1, #0x2A, 16
  00b68	e3811014	 orr         r1, r1, #0x14
  00b6c	e59d0014	 ldr         r0, [sp, #0x14]
  00b70	e2800008	 add         r0, r0, #8
  00b74	e5900000	 ldr         r0, [r0]
  00b78	eb000000	 bl          DeviceIoControl
  00b7c	e58d0030	 str         r0, [sp, #0x30]
  00b80	e59d3030	 ldr         r3, [sp, #0x30]
  00b84	e58d3010	 str         r3, [sp, #0x10]
  00b88		 |$LN1@GetChildDe|
  00b88		 |$clean$43407|

; 399  :     }
; 400  : 
; 401  : clean:
; 402  :     return rc;

  00b88	e59d3010	 ldr         r3, [sp, #0x10]
  00b8c	e58d3028	 str         r3, [sp, #0x28]

; 403  : }

  00b90	e59d0028	 ldr         r0, [sp, #0x28]
  00b94	e28dd034	 add         sp, sp, #0x34
  00b98	e89d6000	 ldmia       sp, {sp, lr}
  00b9c	e12fff1e	 bx          lr
  00ba0		 |$LN9@GetChildDe|
  00ba0		 |$LN10@GetChildDe|
  00ba0	41737562	 DCD         0x41737562
  00ba4		 |$M43668|

			 ENDP  ; |GetChildDeviceRemoveState|

	EXPORT	|GetBusNamePrefix|

  00050			 AREA	 |.pdata|, PDATA
|$T43682| DCD	|$LN8@GetBusName|
	DCD	0x40003e04
; Function compile flags: /Odtp

  00ba4			 AREA	 |.text|, CODE, ARM

  00ba4		 |GetBusNamePrefix| PROC

; 408  : {

  00ba4		 |$LN8@GetBusName|
  00ba4	e1a0c00d	 mov         r12, sp
  00ba8	e92d0007	 stmdb       sp!, {r0 - r2}
  00bac	e92d5000	 stmdb       sp!, {r12, lr}
  00bb0	e24dd034	 sub         sp, sp, #0x34
  00bb4		 |$M43679|

; 409  :     BOOL rc = FALSE;

  00bb4	e3a03000	 mov         r3, #0
  00bb8	e58d3010	 str         r3, [sp, #0x10]

; 410  :     PARENT_BUS_ACCESS *pBusAccess = (PARENT_BUS_ACCESS *)hBusAccess;

  00bbc	e59d303c	 ldr         r3, [sp, #0x3C]
  00bc0	e58d3014	 str         r3, [sp, #0x14]

; 411  : 
; 412  :     // Check passed handler
; 413  :     if (pBusAccess == NULL || pBusAccess->cookie != BUS_ACCESS_COOKIE) {

  00bc4	e59d3014	 ldr         r3, [sp, #0x14]
  00bc8	e3530000	 cmp         r3, #0
  00bcc	0a000004	 beq         |$LN2@GetBusName|
  00bd0	e59d3014	 ldr         r3, [sp, #0x14]
  00bd4	e5932000	 ldr         r2, [r3]
  00bd8	e59f30b8	 ldr         r3, [pc, #0xB8]
  00bdc	e1520003	 cmp         r2, r3
  00be0	0a000002	 beq         |$LN3@GetBusName|
  00be4		 |$LN2@GetBusName|

; 414  :         SetLastError(ERROR_INVALID_HANDLE);

  00be4	e3a00006	 mov         r0, #6
  00be8	eb000000	 bl          SetLastError

; 415  :         goto clean;

  00bec	ea000023	 b           |$clean$43426|
  00bf0		 |$LN3@GetBusName|

; 416  :     }
; 417  : 
; 418  :     // Call parent device if exists
; 419  :     if (pBusAccess->hBus != INVALID_HANDLE_VALUE) {

  00bf0	e59d3014	 ldr         r3, [sp, #0x14]
  00bf4	e2833008	 add         r3, r3, #8
  00bf8	e5933000	 ldr         r3, [r3]
  00bfc	e3730001	 cmn         r3, #1
  00c00	0a00001e	 beq         |$LN1@GetBusName|

; 420  :         rc = DeviceIoControl(
; 421  :             pBusAccess->hBus, IOCTL_BUS_NAME_PREFIX, pBusAccess->pszDeviceName, 
; 422  :             (_tcslen(pBusAccess->pszDeviceName) + 1) * sizeof(TCHAR),
; 423  :             pOutString, outSize * sizeof(TCHAR), NULL, 0
; 424  :         );

  00c04	e59d3014	 ldr         r3, [sp, #0x14]
  00c08	e283300c	 add         r3, r3, #0xC
  00c0c	e5930000	 ldr         r0, [r3]
  00c10	eb000000	 bl          wcslen
  00c14	e58d002c	 str         r0, [sp, #0x2C]
  00c18	e3a03000	 mov         r3, #0
  00c1c	e58d300c	 str         r3, [sp, #0xC]
  00c20	e3a03000	 mov         r3, #0
  00c24	e58d3008	 str         r3, [sp, #8]
  00c28	e59d2044	 ldr         r2, [sp, #0x44]
  00c2c	e3a03002	 mov         r3, #2
  00c30	e0030392	 mul         r3, r2, r3
  00c34	e58d3004	 str         r3, [sp, #4]
  00c38	e59d3040	 ldr         r3, [sp, #0x40]
  00c3c	e58d3000	 str         r3, [sp]
  00c40	e59d302c	 ldr         r3, [sp, #0x2C]
  00c44	e2832001	 add         r2, r3, #1
  00c48	e3a03002	 mov         r3, #2
  00c4c	e0030392	 mul         r3, r2, r3
  00c50	e59d2014	 ldr         r2, [sp, #0x14]
  00c54	e282200c	 add         r2, r2, #0xC
  00c58	e5922000	 ldr         r2, [r2]
  00c5c	e3a0182a	 mov         r1, #0x2A, 16
  00c60	e3811084	 orr         r1, r1, #0x84
  00c64	e59d0014	 ldr         r0, [sp, #0x14]
  00c68	e2800008	 add         r0, r0, #8
  00c6c	e5900000	 ldr         r0, [r0]
  00c70	eb000000	 bl          DeviceIoControl
  00c74	e58d0030	 str         r0, [sp, #0x30]
  00c78	e59d3030	 ldr         r3, [sp, #0x30]
  00c7c	e58d3010	 str         r3, [sp, #0x10]
  00c80		 |$LN1@GetBusName|
  00c80		 |$clean$43426|

; 425  :     }
; 426  : 
; 427  : clean:
; 428  :     return rc;

  00c80	e59d3010	 ldr         r3, [sp, #0x10]
  00c84	e58d3028	 str         r3, [sp, #0x28]

; 429  : }

  00c88	e59d0028	 ldr         r0, [sp, #0x28]
  00c8c	e28dd034	 add         sp, sp, #0x34
  00c90	e89d6000	 ldmia       sp, {sp, lr}
  00c94	e12fff1e	 bx          lr
  00c98		 |$LN9@GetBusName|
  00c98		 |$LN10@GetBusName|
  00c98	41737562	 DCD         0x41737562
  00c9c		 |$M43680|

			 ENDP  ; |GetBusNamePrefix|

	EXPORT	|BusTransBusAddrToVirtual|
	IMPORT	|MmMapIoSpace|

  00058			 AREA	 |.pdata|, PDATA
|$T43694| DCD	|$LN10@BusTransBu|
	DCD	0x40003c04
; Function compile flags: /Odtp

  00c9c			 AREA	 |.text|, CODE, ARM

  00c9c		 |BusTransBusAddrToVirtual| PROC

; 437  : ) {

  00c9c		 |$LN10@BusTransBu|
  00c9c	e1a0c00d	 mov         r12, sp
  00ca0	e92d000f	 stmdb       sp!, {r0 - r3}
  00ca4	e92d5000	 stmdb       sp!, {r12, lr}
  00ca8	e24dd030	 sub         sp, sp, #0x30
  00cac		 |$M43691|

; 438  :     BOOL rc = FALSE;

  00cac	e3a03000	 mov         r3, #0
  00cb0	e58d300c	 str         r3, [sp, #0xC]

; 439  :     PHYSICAL_ADDRESS translatedAddress;
; 440  : 
; 441  :     if (!TranslateBusAddr(
; 442  :         hBusAccess, interfaceType, busNumber, busAddress, pAddressSpace, 
; 443  :         &translatedAddress
; 444  :     )) goto clean;

  00cb4	e28d3010	 add         r3, sp, #0x10
  00cb8	e58d3008	 str         r3, [sp, #8]
  00cbc	e59d3050	 ldr         r3, [sp, #0x50]
  00cc0	e58d3004	 str         r3, [sp, #4]
  00cc4	e28d0000	 add         r0, sp, #0
  00cc8	e28d1048	 add         r1, sp, #0x48
  00ccc	e3a02004	 mov         r2, #4
  00cd0	eb000000	 bl          memcpy
  00cd4	e59d3044	 ldr         r3, [sp, #0x44]
  00cd8	e59d2040	 ldr         r2, [sp, #0x40]
  00cdc	e59d103c	 ldr         r1, [sp, #0x3C]
  00ce0	e59d0038	 ldr         r0, [sp, #0x38]
  00ce4	eb000000	 bl          TranslateBusAddr
  00ce8	e58d0024	 str         r0, [sp, #0x24]
  00cec	e59d3024	 ldr         r3, [sp, #0x24]
  00cf0	e3530000	 cmp         r3, #0
  00cf4	1a000000	 bne         |$LN3@BusTransBu|
  00cf8	ea00001d	 b           |$clean$43450|
  00cfc		 |$LN3@BusTransBu|

; 445  : 
; 446  :     if (*pAddressSpace == 0) {

  00cfc	e59d3050	 ldr         r3, [sp, #0x50]
  00d00	e5933000	 ldr         r3, [r3]
  00d04	e3530000	 cmp         r3, #0
  00d08	1a000014	 bne         |$LN2@BusTransBu|

; 447  :         // Memory-mapped I/O, get virtual address
; 448  :         *ppMappedAddress = MmMapIoSpace(translatedAddress, length, FALSE);

  00d0c	e3a03000	 mov         r3, #0
  00d10	e59d204c	 ldr         r2, [sp, #0x4C]
  00d14	e59d0010	 ldr         r0, [sp, #0x10]
  00d18	e59d1014	 ldr         r1, [sp, #0x14]
  00d1c	eb000000	 bl          MmMapIoSpace
  00d20	e58d0028	 str         r0, [sp, #0x28]
  00d24	e59d2028	 ldr         r2, [sp, #0x28]
  00d28	e59d3054	 ldr         r3, [sp, #0x54]
  00d2c	e5832000	 str         r2, [r3]

; 449  :         rc = (*ppMappedAddress != NULL);

  00d30	e59d3054	 ldr         r3, [sp, #0x54]
  00d34	e5933000	 ldr         r3, [r3]
  00d38	e3530000	 cmp         r3, #0
  00d3c	0a000002	 beq         |$LN6@BusTransBu|
  00d40	e3a03001	 mov         r3, #1
  00d44	e58d302c	 str         r3, [sp, #0x2C]
  00d48	ea000001	 b           |$LN7@BusTransBu|
  00d4c		 |$LN6@BusTransBu|
  00d4c	e3a03000	 mov         r3, #0
  00d50	e58d302c	 str         r3, [sp, #0x2C]
  00d54		 |$LN7@BusTransBu|
  00d54	e59d302c	 ldr         r3, [sp, #0x2C]
  00d58	e58d300c	 str         r3, [sp, #0xC]

; 450  :     } else {

  00d5c	ea000004	 b           |$LN1@BusTransBu|
  00d60		 |$LN2@BusTransBu|

; 451  :         // I/O port
; 452  :         *ppMappedAddress = (VOID*)translatedAddress.LowPart;

  00d60	e59d2010	 ldr         r2, [sp, #0x10]
  00d64	e59d3054	 ldr         r3, [sp, #0x54]
  00d68	e5832000	 str         r2, [r3]

; 453  :         rc = TRUE;

  00d6c	e3a03001	 mov         r3, #1
  00d70	e58d300c	 str         r3, [sp, #0xC]
  00d74		 |$LN1@BusTransBu|
  00d74		 |$clean$43450|

; 454  :     }
; 455  : 
; 456  : clean:
; 457  :     return rc;

  00d74	e59d300c	 ldr         r3, [sp, #0xC]
  00d78	e58d3020	 str         r3, [sp, #0x20]

; 458  : }

  00d7c	e59d0020	 ldr         r0, [sp, #0x20]
  00d80	e28dd030	 add         sp, sp, #0x30
  00d84	e89d6000	 ldmia       sp, {sp, lr}
  00d88	e12fff1e	 bx          lr
  00d8c		 |$M43692|

			 ENDP  ; |BusTransBusAddrToVirtual|

	EXPORT	|BusTransBusAddrToStatic|
	IMPORT	|CreateStaticMapping|

  00060			 AREA	 |.pdata|, PDATA
|$T43702| DCD	|$LN9@BusTransBu@2|
	DCD	0x40005204
; Function compile flags: /Odtp

  00d8c			 AREA	 |.text|, CODE, ARM

  00d8c		 |BusTransBusAddrToStatic| PROC

; 466  : ) {

  00d8c		 |$LN9@BusTransBu@2|
  00d8c	e1a0c00d	 mov         r12, sp
  00d90	e92d000f	 stmdb       sp!, {r0 - r3}
  00d94	e92d5000	 stmdb       sp!, {r12, lr}
  00d98	e24dd038	 sub         sp, sp, #0x38
  00d9c		 |$M43699|

; 467  :     BOOL rc = FALSE;

  00d9c	e3a03000	 mov         r3, #0
  00da0	e58d300c	 str         r3, [sp, #0xC]

; 468  :     PHYSICAL_ADDRESS translatedAddress;
; 469  :     UCHAR *pStaticAddress;
; 470  :     DWORD alignedAddress, alignedSize;
; 471  : 
; 472  :     if (!TranslateBusAddr(
; 473  :         hBusAccess, interfaceType, busNumber, busAddress, pAddressSpace, 
; 474  :         &translatedAddress
; 475  :     )) goto clean;

  00da4	e28d3014	 add         r3, sp, #0x14
  00da8	e58d3008	 str         r3, [sp, #8]
  00dac	e59d3058	 ldr         r3, [sp, #0x58]
  00db0	e58d3004	 str         r3, [sp, #4]
  00db4	e28d0000	 add         r0, sp, #0
  00db8	e28d1050	 add         r1, sp, #0x50
  00dbc	e3a02004	 mov         r2, #4
  00dc0	eb000000	 bl          memcpy
  00dc4	e59d304c	 ldr         r3, [sp, #0x4C]
  00dc8	e59d2048	 ldr         r2, [sp, #0x48]
  00dcc	e59d1044	 ldr         r1, [sp, #0x44]
  00dd0	e59d0040	 ldr         r0, [sp, #0x40]
  00dd4	eb000000	 bl          TranslateBusAddr
  00dd8	e58d0030	 str         r0, [sp, #0x30]
  00ddc	e59d3030	 ldr         r3, [sp, #0x30]
  00de0	e3530000	 cmp         r3, #0
  00de4	1a000000	 bne         |$LN4@BusTransBu@2|
  00de8	ea000033	 b           |$clean$43476|
  00dec		 |$LN4@BusTransBu@2|

; 476  : 
; 477  :     if (*pAddressSpace == 0) {

  00dec	e59d3058	 ldr         r3, [sp, #0x58]
  00df0	e5933000	 ldr         r3, [r3]
  00df4	e3530000	 cmp         r3, #0
  00df8	1a00002a	 bne         |$LN3@BusTransBu@2|

; 478  :         alignedAddress = translatedAddress.LowPart & ~(PAGE_SIZE - 1);

  00dfc	e3e03b0d	 mvn         r3, #0xD, 22
  00e00	e22330fb	 eor         r3, r3, #0xFB
  00e04	e5933000	 ldr         r3, [r3]
  00e08	e2433001	 sub         r3, r3, #1
  00e0c	e1e02003	 mvn         r2, r3
  00e10	e59d3014	 ldr         r3, [sp, #0x14]
  00e14	e0033002	 and         r3, r3, r2
  00e18	e58d3020	 str         r3, [sp, #0x20]

; 479  :         alignedSize = length + (translatedAddress.LowPart & (PAGE_SIZE - 1));

  00e1c	e3e03b0d	 mvn         r3, #0xD, 22
  00e20	e22330fb	 eor         r3, r3, #0xFB
  00e24	e5933000	 ldr         r3, [r3]
  00e28	e2432001	 sub         r2, r3, #1
  00e2c	e59d3014	 ldr         r3, [sp, #0x14]
  00e30	e0032002	 and         r2, r3, r2
  00e34	e59d3054	 ldr         r3, [sp, #0x54]
  00e38	e0833002	 add         r3, r3, r2
  00e3c	e58d3010	 str         r3, [sp, #0x10]

; 480  :         pStaticAddress = CreateStaticMapping(alignedAddress >> 8, alignedSize);

  00e40	e59d1010	 ldr         r1, [sp, #0x10]
  00e44	e59d3020	 ldr         r3, [sp, #0x20]
  00e48	e1a00423	 mov         r0, r3, lsr #8
  00e4c	eb000000	 bl          CreateStaticMapping
  00e50	e58d0034	 str         r0, [sp, #0x34]
  00e54	e59d3034	 ldr         r3, [sp, #0x34]
  00e58	e58d301c	 str         r3, [sp, #0x1C]

; 481  :         if (pStaticAddress == NULL) goto clean;

  00e5c	e59d301c	 ldr         r3, [sp, #0x1C]
  00e60	e3530000	 cmp         r3, #0
  00e64	1a000000	 bne         |$LN2@BusTransBu@2|
  00e68	ea000013	 b           |$clean$43476|
  00e6c		 |$LN2@BusTransBu@2|

; 482  :         pStaticAddress += translatedAddress.LowPart & (PAGE_SIZE - 1);

  00e6c	e3e03b0d	 mvn         r3, #0xD, 22
  00e70	e22330fb	 eor         r3, r3, #0xFB
  00e74	e5933000	 ldr         r3, [r3]
  00e78	e2432001	 sub         r2, r3, #1
  00e7c	e59d3014	 ldr         r3, [sp, #0x14]
  00e80	e0032002	 and         r2, r3, r2
  00e84	e59d301c	 ldr         r3, [sp, #0x1C]
  00e88	e0833002	 add         r3, r3, r2
  00e8c	e58d301c	 str         r3, [sp, #0x1C]

; 483  :         *ppMappedAddress = pStaticAddress;

  00e90	e59d201c	 ldr         r2, [sp, #0x1C]
  00e94	e59d305c	 ldr         r3, [sp, #0x5C]
  00e98	e5832000	 str         r2, [r3]

; 484  :         rc = TRUE;

  00e9c	e3a03001	 mov         r3, #1
  00ea0	e58d300c	 str         r3, [sp, #0xC]

; 485  :     } else {

  00ea4	ea000004	 b           |$LN1@BusTransBu@2|
  00ea8		 |$LN3@BusTransBu@2|

; 486  :         // I/O port
; 487  :         *ppMappedAddress = (VOID*)translatedAddress.LowPart;

  00ea8	e59d2014	 ldr         r2, [sp, #0x14]
  00eac	e59d305c	 ldr         r3, [sp, #0x5C]
  00eb0	e5832000	 str         r2, [r3]

; 488  :         rc = TRUE;

  00eb4	e3a03001	 mov         r3, #1
  00eb8	e58d300c	 str         r3, [sp, #0xC]
  00ebc		 |$LN1@BusTransBu@2|
  00ebc		 |$clean$43476|

; 489  :     }
; 490  : 
; 491  : clean:
; 492  :     return rc;

  00ebc	e59d300c	 ldr         r3, [sp, #0xC]
  00ec0	e58d302c	 str         r3, [sp, #0x2C]

; 493  : }

  00ec4	e59d002c	 ldr         r0, [sp, #0x2C]
  00ec8	e28dd038	 add         sp, sp, #0x38
  00ecc	e89d6000	 ldmia       sp, {sp, lr}
  00ed0	e12fff1e	 bx          lr
  00ed4		 |$M43700|

			 ENDP  ; |BusTransBusAddrToStatic|

	EXPORT	|BusIoControl|

  00068			 AREA	 |.pdata|, PDATA
|$T43712| DCD	|$LN9@BusIoContr|
	DCD	0x40004504
; Function compile flags: /Odtp

  00ed4			 AREA	 |.text|, CODE, ARM

  00ed4		 |BusIoControl| PROC

; 500  : ) {

  00ed4		 |$LN9@BusIoContr|
  00ed4	e1a0c00d	 mov         r12, sp
  00ed8	e92d000f	 stmdb       sp!, {r0 - r3}
  00edc	e92d5000	 stmdb       sp!, {r12, lr}
  00ee0	e24dd034	 sub         sp, sp, #0x34
  00ee4		 |$M43709|

; 501  :     BOOL rc = FALSE;

  00ee4	e3a03000	 mov         r3, #0
  00ee8	e58d3010	 str         r3, [sp, #0x10]

; 502  :     PARENT_BUS_ACCESS *pBusAccess = (PARENT_BUS_ACCESS *)hBusAccess;

  00eec	e59d303c	 ldr         r3, [sp, #0x3C]
  00ef0	e58d3014	 str         r3, [sp, #0x14]

; 503  : 
; 504  :     // Check passed handler
; 505  :     if (pBusAccess == NULL || pBusAccess->cookie != BUS_ACCESS_COOKIE) {

  00ef4	e59d3014	 ldr         r3, [sp, #0x14]
  00ef8	e3530000	 cmp         r3, #0
  00efc	0a000004	 beq         |$LN3@BusIoContr|
  00f00	e59d3014	 ldr         r3, [sp, #0x14]
  00f04	e5932000	 ldr         r2, [r3]
  00f08	e59f30d4	 ldr         r3, [pc, #0xD4]
  00f0c	e1520003	 cmp         r2, r3
  00f10	0a000002	 beq         |$LN4@BusIoContr|
  00f14		 |$LN3@BusIoContr|

; 506  :         SetLastError(ERROR_INVALID_HANDLE);

  00f14	e3a00006	 mov         r0, #6
  00f18	eb000000	 bl          SetLastError

; 507  :         goto clean;

  00f1c	ea00002a	 b           |$clean$43511|
  00f20		 |$LN4@BusIoContr|

; 508  :     }
; 509  : 
; 510  :     // Call parent device if exists
; 511  :     if (pBusAccess->hBus != INVALID_HANDLE_VALUE) {

  00f20	e59d3014	 ldr         r3, [sp, #0x14]
  00f24	e2833008	 add         r3, r3, #8
  00f28	e5933000	 ldr         r3, [r3]
  00f2c	e3730001	 cmn         r3, #1
  00f30	0a000025	 beq         |$LN2@BusIoContr|

; 512  : 
; 513  :         // If there isn't any input buffer, pass device name instead
; 514  :         if (pInBuffer == NULL && inSize == 0) {

  00f34	e59d3044	 ldr         r3, [sp, #0x44]
  00f38	e3530000	 cmp         r3, #0
  00f3c	1a000010	 bne         |$LN1@BusIoContr|
  00f40	e59d3048	 ldr         r3, [sp, #0x48]
  00f44	e3530000	 cmp         r3, #0
  00f48	1a00000d	 bne         |$LN1@BusIoContr|

; 515  :             pInBuffer = pBusAccess->pszDeviceName;

  00f4c	e59d3014	 ldr         r3, [sp, #0x14]
  00f50	e283300c	 add         r3, r3, #0xC
  00f54	e5933000	 ldr         r3, [r3]
  00f58	e58d3044	 str         r3, [sp, #0x44]

; 516  :             inSize = (_tcslen(pBusAccess->pszDeviceName) + 1)*sizeof(TCHAR);

  00f5c	e59d3014	 ldr         r3, [sp, #0x14]
  00f60	e283300c	 add         r3, r3, #0xC
  00f64	e5930000	 ldr         r0, [r3]
  00f68	eb000000	 bl          wcslen
  00f6c	e58d002c	 str         r0, [sp, #0x2C]
  00f70	e59d302c	 ldr         r3, [sp, #0x2C]
  00f74	e2832001	 add         r2, r3, #1
  00f78	e3a03002	 mov         r3, #2
  00f7c	e0030392	 mul         r3, r2, r3
  00f80	e58d3048	 str         r3, [sp, #0x48]
  00f84		 |$LN1@BusIoContr|

; 517  :         }        
; 518  : 
; 519  :         // Call bus driver
; 520  :         rc = DeviceIoControl(
; 521  :             pBusAccess->hBus, code, pInBuffer, inSize, pOutBuffer, outSize, 
; 522  :             pOutSize, pOverlapped
; 523  :         );        

  00f84	e59d3058	 ldr         r3, [sp, #0x58]
  00f88	e58d300c	 str         r3, [sp, #0xC]
  00f8c	e59d3054	 ldr         r3, [sp, #0x54]
  00f90	e58d3008	 str         r3, [sp, #8]
  00f94	e59d3050	 ldr         r3, [sp, #0x50]
  00f98	e58d3004	 str         r3, [sp, #4]
  00f9c	e59d304c	 ldr         r3, [sp, #0x4C]
  00fa0	e58d3000	 str         r3, [sp]
  00fa4	e59d3048	 ldr         r3, [sp, #0x48]
  00fa8	e59d2044	 ldr         r2, [sp, #0x44]
  00fac	e59d1040	 ldr         r1, [sp, #0x40]
  00fb0	e59d0014	 ldr         r0, [sp, #0x14]
  00fb4	e2800008	 add         r0, r0, #8
  00fb8	e5900000	 ldr         r0, [r0]
  00fbc	eb000000	 bl          DeviceIoControl
  00fc0	e58d0030	 str         r0, [sp, #0x30]
  00fc4	e59d3030	 ldr         r3, [sp, #0x30]
  00fc8	e58d3010	 str         r3, [sp, #0x10]
  00fcc		 |$LN2@BusIoContr|
  00fcc		 |$clean$43511|

; 524  :     }
; 525  : 
; 526  : clean:
; 527  :     return rc;

  00fcc	e59d3010	 ldr         r3, [sp, #0x10]
  00fd0	e58d3028	 str         r3, [sp, #0x28]

; 528  : }

  00fd4	e59d0028	 ldr         r0, [sp, #0x28]
  00fd8	e28dd034	 add         sp, sp, #0x34
  00fdc	e89d6000	 ldmia       sp, {sp, lr}
  00fe0	e12fff1e	 bx          lr
  00fe4		 |$LN10@BusIoContr|
  00fe4		 |$LN11@BusIoContr|
  00fe4	41737562	 DCD         0x41737562
  00fe8		 |$M43710|

			 ENDP  ; |BusIoControl|

	EXPORT	|BusChildIoControl|

  00070			 AREA	 |.pdata|, PDATA
|$T43724| DCD	|$LN8@BusChildIo|
	DCD	0x40003f04
; Function compile flags: /Odtp

  00fe8			 AREA	 |.text|, CODE, ARM

  00fe8		 |BusChildIoControl| PROC

; 534  : ) {

  00fe8		 |$LN8@BusChildIo|
  00fe8	e1a0c00d	 mov         r12, sp
  00fec	e92d000f	 stmdb       sp!, {r0 - r3}
  00ff0	e92d5000	 stmdb       sp!, {r12, lr}
  00ff4	e24dd03c	 sub         sp, sp, #0x3C
  00ff8		 |$M43721|

; 535  :     BOOL rc = FALSE;

  00ff8	e3a03000	 mov         r3, #0
  00ffc	e58d3010	 str         r3, [sp, #0x10]

; 536  :     LPVOID pInBuffer;
; 537  :     DWORD inSize;
; 538  :     PARENT_BUS_ACCESS *pBusAccess = (PARENT_BUS_ACCESS *)hBusAccess;

  01000	e59d3044	 ldr         r3, [sp, #0x44]
  01004	e58d3014	 str         r3, [sp, #0x14]

; 539  : 
; 540  :     // Check passed handler
; 541  :     if (pBusAccess == NULL || pBusAccess->cookie != BUS_ACCESS_COOKIE) {

  01008	e59d3014	 ldr         r3, [sp, #0x14]
  0100c	e3530000	 cmp         r3, #0
  01010	0a000004	 beq         |$LN2@BusChildIo|
  01014	e59d3014	 ldr         r3, [sp, #0x14]
  01018	e5932000	 ldr         r2, [r3]
  0101c	e59f30bc	 ldr         r3, [pc, #0xBC]
  01020	e1520003	 cmp         r2, r3
  01024	0a000002	 beq         |$LN3@BusChildIo|
  01028		 |$LN2@BusChildIo|

; 542  :         SetLastError(ERROR_INVALID_HANDLE);

  01028	e3a00006	 mov         r0, #6
  0102c	eb000000	 bl          SetLastError

; 543  :         goto clean;

  01030	ea000024	 b           |$clean$43534|
  01034		 |$LN3@BusChildIo|

; 544  :     }
; 545  : 
; 546  :     // Call parent device if exists
; 547  :     if (pBusAccess->hBus != INVALID_HANDLE_VALUE) {

  01034	e59d3014	 ldr         r3, [sp, #0x14]
  01038	e2833008	 add         r3, r3, #8
  0103c	e5933000	 ldr         r3, [r3]
  01040	e3730001	 cmn         r3, #1
  01044	0a00001f	 beq         |$LN1@BusChildIo|

; 548  : 
; 549  :         pInBuffer = pBusAccess->pszDeviceName;

  01048	e59d3014	 ldr         r3, [sp, #0x14]
  0104c	e283300c	 add         r3, r3, #0xC
  01050	e5933000	 ldr         r3, [r3]
  01054	e58d301c	 str         r3, [sp, #0x1C]

; 550  :         inSize = (_tcslen(pBusAccess->pszDeviceName) + 1)*sizeof(TCHAR);

  01058	e59d3014	 ldr         r3, [sp, #0x14]
  0105c	e283300c	 add         r3, r3, #0xC
  01060	e5930000	 ldr         r0, [r3]
  01064	eb000000	 bl          wcslen
  01068	e58d0034	 str         r0, [sp, #0x34]
  0106c	e59d3034	 ldr         r3, [sp, #0x34]
  01070	e2832001	 add         r2, r3, #1
  01074	e3a03002	 mov         r3, #2
  01078	e0030392	 mul         r3, r2, r3
  0107c	e58d3018	 str         r3, [sp, #0x18]

; 551  : 
; 552  :         // Call bus driver
; 553  :         rc = DeviceIoControl(
; 554  :             pBusAccess->hBus, code, pInBuffer, inSize, pBuffer, size, NULL, NULL
; 555  :         );        

  01080	e3a03000	 mov         r3, #0
  01084	e58d300c	 str         r3, [sp, #0xC]
  01088	e3a03000	 mov         r3, #0
  0108c	e58d3008	 str         r3, [sp, #8]
  01090	e59d3050	 ldr         r3, [sp, #0x50]
  01094	e58d3004	 str         r3, [sp, #4]
  01098	e59d304c	 ldr         r3, [sp, #0x4C]
  0109c	e58d3000	 str         r3, [sp]
  010a0	e59d3018	 ldr         r3, [sp, #0x18]
  010a4	e59d201c	 ldr         r2, [sp, #0x1C]
  010a8	e59d1048	 ldr         r1, [sp, #0x48]
  010ac	e59d0014	 ldr         r0, [sp, #0x14]
  010b0	e2800008	 add         r0, r0, #8
  010b4	e5900000	 ldr         r0, [r0]
  010b8	eb000000	 bl          DeviceIoControl
  010bc	e58d0038	 str         r0, [sp, #0x38]
  010c0	e59d3038	 ldr         r3, [sp, #0x38]
  010c4	e58d3010	 str         r3, [sp, #0x10]
  010c8		 |$LN1@BusChildIo|
  010c8		 |$clean$43534|

; 556  :     }
; 557  : 
; 558  : clean:
; 559  :     return rc;

  010c8	e59d3010	 ldr         r3, [sp, #0x10]
  010cc	e58d3030	 str         r3, [sp, #0x30]

; 560  : }

  010d0	e59d0030	 ldr         r0, [sp, #0x30]
  010d4	e28dd03c	 add         sp, sp, #0x3C
  010d8	e89d6000	 ldmia       sp, {sp, lr}
  010dc	e12fff1e	 bx          lr
  010e0		 |$LN9@BusChildIo|
  010e0		 |$LN10@BusChildIo|
  010e0	41737562	 DCD         0x41737562
  010e4		 |$M43722|

			 ENDP  ; |BusChildIoControl|

	END
