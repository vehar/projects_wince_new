; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\WAVEDEV2\midistrm.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|?ms_PitchTable@CMidiStream@@0PAKA| [ DATA ] ; CMidiStream::ms_PitchTable
	EXPORT	|?ms_BasePitchTable@CMidiStream@@0QBKB| [ DATA ] ; CMidiStream::ms_BasePitchTable
	EXPORT	|?ms_PitchTableInverseSampleRate@CMidiStream@@0KA| [ DATA ] ; CMidiStream::ms_PitchTableInverseSampleRate

  00000			 AREA	 |.bss|, NOINIT
|?ms_PitchTable@CMidiStream@@0PAKA| % 0x30		; CMidiStream::ms_PitchTable
|?ms_PitchTableInverseSampleRate@CMidiStream@@0KA| % 0x4 ; CMidiStream::ms_PitchTableInverseSampleRate

  00000			 AREA	 |.rdata|, DATA, READONLY
|?ms_BasePitchTable@CMidiStream@@0QBKB| DCD 0x105a025	; CMidiStream::ms_BasePitchTable
	DCD	0x1152ec0
	DCD	0x125aa2e
	DCD	0x1372082
	DCD	0x149a0a7
	DCD	0x15d3a6d
	DCD	0x171fe92
	DCD	0x187fed4
	DCD	0x19f4e00
	DCD	0x1b80000
	DCD	0x1d229ec
	DCD	0x1ede220
	EXPORT	|?GainChange@CMidiStream@@UAAXXZ|	; CMidiStream::GainChange
	IMPORT	|?GainChange@CMidiNote@@QAAXXZ|		; CMidiNote::GainChange

  00000			 AREA	 |.pdata|, PDATA
|$T35556| DCD	|$LN7@GainChange|
	DCD	0x40001a04
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\wavedev2\midistrm.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GainChange@CMidiStream@@UAAXXZ| PROC	; CMidiStream::GainChange

; 32   : {

  00000		 |$LN7@GainChange|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd008	 sub         sp, sp, #8
  00010		 |$M35553|

; 33   :     // Iterate through the active note list and change the gain of each note
; 34   :     PLIST_ENTRY pListEntry;
; 35   :     CMidiNote *pCNote;
; 36   :     pListEntry = m_NoteList.Flink;

  00010	e59d3010	 ldr         r3, [sp, #0x10]
  00014	e2833c06	 add         r3, r3, #6, 24
  00018	e283306c	 add         r3, r3, #0x6C
  0001c	e5933000	 ldr         r3, [r3]
  00020	e58d3000	 str         r3, [sp]
  00024		 |$LN2@GainChange|

; 37   :     while (pListEntry != &m_NoteList)

  00024	e59d3010	 ldr         r3, [sp, #0x10]
  00028	e2833c06	 add         r3, r3, #6, 24
  0002c	e283206c	 add         r2, r3, #0x6C
  00030	e59d3000	 ldr         r3, [sp]
  00034	e1530002	 cmp         r3, r2
  00038	0a000007	 beq         |$LN1@GainChange|

; 38   :     {
; 39   :         // Get a pointer to the stream context
; 40   :         pCNote = CONTAINING_RECORD(pListEntry,CMidiNote,m_Link);

  0003c	e59d3000	 ldr         r3, [sp]
  00040	e58d3004	 str         r3, [sp, #4]

; 41   :         pCNote->GainChange();

  00044	e59d0004	 ldr         r0, [sp, #4]
  00048	eb000000	 bl          |?GainChange@CMidiNote@@QAAXXZ|

; 42   :         pListEntry = pListEntry->Flink;

  0004c	e59d3000	 ldr         r3, [sp]
  00050	e5933000	 ldr         r3, [r3]
  00054	e58d3000	 str         r3, [sp]

; 43   :     }

  00058	eafffff1	 b           |$LN2@GainChange|
  0005c		 |$LN1@GainChange|

; 44   : }

  0005c	e28dd008	 add         sp, sp, #8
  00060	e89d6000	 ldmia       sp, {sp, lr}
  00064	e12fff1e	 bx          lr
  00068		 |$M35554|

			 ENDP  ; |?GainChange@CMidiStream@@UAAXXZ|, CMidiStream::GainChange

	EXPORT	|?MapNoteGain@CMidiStream@@QAAKKK@Z|	; CMidiStream::MapNoteGain
	IMPORT	|?MapGain@StreamContext@@QAAKKK@Z|	; StreamContext::MapGain

  00008			 AREA	 |.pdata|, PDATA
|$T35562| DCD	|$LN7@MapNoteGai|
	DCD	0x40003404
; Function compile flags: /Odtp

  00068			 AREA	 |.text|, CODE, ARM

  00068		 |?MapNoteGain@CMidiStream@@QAAKKK@Z| PROC ; CMidiStream::MapNoteGain

; 48   : {

  00068		 |$LN7@MapNoteGai|
  00068	e1a0c00d	 mov         r12, sp
  0006c	e92d0007	 stmdb       sp!, {r0 - r2}
  00070	e92d5000	 stmdb       sp!, {r12, lr}
  00074	e24dd010	 sub         sp, sp, #0x10
  00078		 |$M35559|

; 49   :     DWORD TotalGain = NoteGain & 0xFFFF;

  00078	e59d201c	 ldr         r2, [sp, #0x1C]
  0007c	e3a03cff	 mov         r3, #0xFF, 24
  00080	e38330ff	 orr         r3, r3, #0xFF
  00084	e0023003	 and         r3, r2, r3
  00088	e58d3000	 str         r3, [sp]

; 50   :     DWORD StreamGain = m_dwGain;

  0008c	e59d3018	 ldr         r3, [sp, #0x18]
  00090	e2833058	 add         r3, r3, #0x58
  00094	e5933000	 ldr         r3, [r3]
  00098	e58d3004	 str         r3, [sp, #4]

; 51   :     if (Channel==1)

  0009c	e59d3020	 ldr         r3, [sp, #0x20]
  000a0	e3530001	 cmp         r3, #1
  000a4	1a000002	 bne         |$LN2@MapNoteGai|

; 52   :     {
; 53   :         StreamGain >>= 16;

  000a8	e59d3004	 ldr         r3, [sp, #4]
  000ac	e1a03823	 mov         r3, r3, lsr #16
  000b0	e58d3004	 str         r3, [sp, #4]
  000b4		 |$LN2@MapNoteGai|

; 54   :     }
; 55   :     StreamGain &= 0xFFFF;

  000b4	e59d2004	 ldr         r2, [sp, #4]
  000b8	e3a03cff	 mov         r3, #0xFF, 24
  000bc	e38330ff	 orr         r3, r3, #0xFF
  000c0	e0023003	 and         r3, r2, r3
  000c4	e58d3004	 str         r3, [sp, #4]

; 56   : 
; 57   :     TotalGain *= StreamGain; // Calc. aggregate gain

  000c8	e59d2000	 ldr         r2, [sp]
  000cc	e59d3004	 ldr         r3, [sp, #4]
  000d0	e0030392	 mul         r3, r2, r3
  000d4	e58d3000	 str         r3, [sp]

; 58   :     TotalGain += 0xFFFF;   // Force to round up

  000d8	e59d3000	 ldr         r3, [sp]
  000dc	e2833cff	 add         r3, r3, #0xFF, 24
  000e0	e28330ff	 add         r3, r3, #0xFF
  000e4	e58d3000	 str         r3, [sp]

; 59   :     TotalGain >>= 16;

  000e8	e59d3000	 ldr         r3, [sp]
  000ec	e1a03823	 mov         r3, r3, lsr #16
  000f0	e58d3000	 str         r3, [sp]

; 60   :     
; 61   :     // If channel 1 (right channel), we should pass volume in upper 16 bits.
; 62   :     if (Channel==1)

  000f4	e59d3020	 ldr         r3, [sp, #0x20]
  000f8	e3530001	 cmp         r3, #1
  000fc	1a000002	 bne         |$LN1@MapNoteGai|

; 63   :     {
; 64   :         TotalGain <<= 16;

  00100	e59d3000	 ldr         r3, [sp]
  00104	e1a03803	 mov         r3, r3, lsl #16
  00108	e58d3000	 str         r3, [sp]
  0010c		 |$LN1@MapNoteGai|

; 65   :     }
; 66   : 
; 67   :     return MapGain(TotalGain,Channel);

  0010c	e59d2020	 ldr         r2, [sp, #0x20]
  00110	e59d1000	 ldr         r1, [sp]
  00114	e59d0018	 ldr         r0, [sp, #0x18]
  00118	eb000000	 bl          |?MapGain@StreamContext@@QAAKKK@Z|
  0011c	e58d000c	 str         r0, [sp, #0xC]
  00120	e59d300c	 ldr         r3, [sp, #0xC]
  00124	e58d3008	 str         r3, [sp, #8]

; 68   : }

  00128	e59d0008	 ldr         r0, [sp, #8]
  0012c	e28dd010	 add         sp, sp, #0x10
  00130	e89d6000	 ldmia       sp, {sp, lr}
  00134	e12fff1e	 bx          lr
  00138		 |$M35560|

			 ENDP  ; |?MapNoteGain@CMidiStream@@QAAKKK@Z|, CMidiStream::MapNoteGain

	EXPORT	|?Open@CMidiStream@@UAAKPAVDeviceContext@@PAUwaveopendesc_tag@@K@Z| ; CMidiStream::Open
	IMPORT	|?Open@StreamContext@@UAAKPAVDeviceContext@@PAUwaveopendesc_tag@@K@Z| ; StreamContext::Open

  00010			 AREA	 |.pdata|, PDATA
|$T35568| DCD	|$LN15@Open|
	DCD	0x40009d04
; Function compile flags: /Odtp

  00138			 AREA	 |.text|, CODE, ARM

  00138		 |?Open@CMidiStream@@UAAKPAVDeviceContext@@PAUwaveopendesc_tag@@K@Z| PROC ; CMidiStream::Open

; 72   : {

  00138		 |$LN15@Open|
  00138	e1a0c00d	 mov         r12, sp
  0013c	e92d000f	 stmdb       sp!, {r0 - r3}
  00140	e92d5000	 stmdb       sp!, {r12, lr}
  00144	e24dd01c	 sub         sp, sp, #0x1C
  00148		 |$M35565|

; 73   :     DWORD mmRet;
; 74   :     LPWAVEFORMAT_MIDI pwfxmidi = (LPWAVEFORMAT_MIDI) lpWOD->lpFormat;

  00148	e59d302c	 ldr         r3, [sp, #0x2C]
  0014c	e2831004	 add         r1, r3, #4
  00150	e1d130d3	 ldrsb       r3, [r1, #3]
  00154	e1a02403	 mov         r2, r3, lsl #8
  00158	e5d13002	 ldrb        r3, [r1, #2]
  0015c	e1833002	 orr         r3, r3, r2
  00160	e1a02403	 mov         r2, r3, lsl #8
  00164	e5d13001	 ldrb        r3, [r1, #1]
  00168	e1833002	 orr         r3, r3, r2
  0016c	e1a02403	 mov         r2, r3, lsl #8
  00170	e5d13000	 ldrb        r3, [r1]
  00174	e1833002	 orr         r3, r3, r2
  00178	e58d3000	 str         r3, [sp]

; 75   : 
; 76   :     if (pwfxmidi->wfx.cbSize!=WAVEFORMAT_MIDI_EXTRASIZE)

  0017c	e59d3000	 ldr         r3, [sp]
  00180	e2831010	 add         r1, r3, #0x10
  00184	e5d13001	 ldrb        r3, [r1, #1]
  00188	e1a03403	 mov         r3, r3, lsl #8
  0018c	e1a02803	 mov         r2, r3, lsl #16
  00190	e1a02822	 mov         r2, r2, lsr #16
  00194	e5d13000	 ldrb        r3, [r1]
  00198	e1833002	 orr         r3, r3, r2
  0019c	e353000a	 cmp         r3, #0xA
  001a0	0a000003	 beq         |$LN10@Open|

; 77   :     {
; 78   :         mmRet = WAVERR_BADFORMAT;

  001a4	e3a03020	 mov         r3, #0x20
  001a8	e58d3004	 str         r3, [sp, #4]
  001ac	ea000078	 b           |$LN9@Open|

; 79   :         goto Exit;

  001b0	ea000077	 b           |$Exit$35269|
  001b4		 |$LN10@Open|

; 80   :     }
; 81   : 
; 82   :     // Be sure to init these before calling StreamContext::Open;
; 83   :     // it will call back into CMidiStream to set rate & volume
; 84   :     m_USecPerQuarterNote  = pwfxmidi->USecPerQuarterNote;

  001b4	e59d3000	 ldr         r3, [sp]
  001b8	e2831014	 add         r1, r3, #0x14
  001bc	e59d3024	 ldr         r3, [sp, #0x24]
  001c0	e2833c06	 add         r3, r3, #6, 24
  001c4	e2832084	 add         r2, r3, #0x84
  001c8	e5913000	 ldr         r3, [r1]
  001cc	e5823000	 str         r3, [r2]

; 85   :     m_TicksPerQuarterNote = pwfxmidi->TicksPerQuarterNote;

  001d0	e59d3000	 ldr         r3, [sp]
  001d4	e2831018	 add         r1, r3, #0x18
  001d8	e59d3024	 ldr         r3, [sp, #0x24]
  001dc	e2833c06	 add         r3, r3, #6, 24
  001e0	e2832088	 add         r2, r3, #0x88
  001e4	e5913000	 ldr         r3, [r1]
  001e8	e5823000	 str         r3, [r2]

; 86   :     m_DeltaSampleCount=0;

  001ec	e59d3024	 ldr         r3, [sp, #0x24]
  001f0	e2832e69	 add         r2, r3, #0x69, 28
  001f4	e3a03000	 mov         r3, #0
  001f8	e5823000	 str         r3, [r2]

; 87   : 
; 88   :     // Add all notes to free list
; 89   :     InitializeListHead(&m_NoteList);

  001fc	e59d3024	 ldr         r3, [sp, #0x24]
  00200	e2833c06	 add         r3, r3, #6, 24
  00204	e283206c	 add         r2, r3, #0x6C
  00208	e59d3024	 ldr         r3, [sp, #0x24]
  0020c	e2833e67	 add         r3, r3, #0x67, 28
  00210	e5832000	 str         r2, [r3]
  00214	e59d3024	 ldr         r3, [sp, #0x24]
  00218	e2831e67	 add         r1, r3, #0x67, 28
  0021c	e59d3024	 ldr         r3, [sp, #0x24]
  00220	e2833c06	 add         r3, r3, #6, 24
  00224	e283206c	 add         r2, r3, #0x6C
  00228	e5913000	 ldr         r3, [r1]
  0022c	e5823000	 str         r3, [r2]

; 90   :     InitializeListHead(&m_FreeList);

  00230	e59d3024	 ldr         r3, [sp, #0x24]
  00234	e2833c06	 add         r3, r3, #6, 24
  00238	e2832074	 add         r2, r3, #0x74
  0023c	e59d3024	 ldr         r3, [sp, #0x24]
  00240	e2833c06	 add         r3, r3, #6, 24
  00244	e2833078	 add         r3, r3, #0x78
  00248	e5832000	 str         r2, [r3]
  0024c	e59d3024	 ldr         r3, [sp, #0x24]
  00250	e2833c06	 add         r3, r3, #6, 24
  00254	e2831078	 add         r1, r3, #0x78
  00258	e59d3024	 ldr         r3, [sp, #0x24]
  0025c	e2833c06	 add         r3, r3, #6, 24
  00260	e2832074	 add         r2, r3, #0x74
  00264	e5913000	 ldr         r3, [r1]
  00268	e5823000	 str         r3, [r2]

; 91   :     for (int i=0;i<NUMNOTES;i++)

  0026c	e3a03000	 mov         r3, #0
  00270	e58d3008	 str         r3, [sp, #8]
  00274	ea000002	 b           |$LN8@Open|
  00278		 |$LN7@Open|
  00278	e59d3008	 ldr         r3, [sp, #8]
  0027c	e2833001	 add         r3, r3, #1
  00280	e58d3008	 str         r3, [sp, #8]
  00284		 |$LN8@Open|
  00284	e59d3008	 ldr         r3, [sp, #8]
  00288	e3530020	 cmp         r3, #0x20
  0028c	aa00002a	 bge         |$LN6@Open|

; 92   :     {
; 93   :         InsertTailList(&m_FreeList,&m_MidiNote[i].m_Link);

  00290	e59d3024	 ldr         r3, [sp, #0x24]
  00294	e2833c06	 add         r3, r3, #6, 24
  00298	e2833074	 add         r3, r3, #0x74
  0029c	e58d3010	 str         r3, [sp, #0x10]
  002a0	e59d3010	 ldr         r3, [sp, #0x10]
  002a4	e2833004	 add         r3, r3, #4
  002a8	e5933000	 ldr         r3, [r3]
  002ac	e58d300c	 str         r3, [sp, #0xC]
  002b0	e59d3024	 ldr         r3, [sp, #0x24]
  002b4	e283106c	 add         r1, r3, #0x6C
  002b8	e59d2008	 ldr         r2, [sp, #8]
  002bc	e3a03030	 mov         r3, #0x30
  002c0	e0030392	 mul         r3, r2, r3
  002c4	e0812003	 add         r2, r1, r3
  002c8	e59d3010	 ldr         r3, [sp, #0x10]
  002cc	e5823000	 str         r3, [r2]
  002d0	e59d3024	 ldr         r3, [sp, #0x24]
  002d4	e283106c	 add         r1, r3, #0x6C
  002d8	e59d2008	 ldr         r2, [sp, #8]
  002dc	e3a03030	 mov         r3, #0x30
  002e0	e0030392	 mul         r3, r2, r3
  002e4	e0813003	 add         r3, r1, r3
  002e8	e2832004	 add         r2, r3, #4
  002ec	e59d300c	 ldr         r3, [sp, #0xC]
  002f0	e5823000	 str         r3, [r2]
  002f4	e59d3024	 ldr         r3, [sp, #0x24]
  002f8	e283106c	 add         r1, r3, #0x6C
  002fc	e59d2008	 ldr         r2, [sp, #8]
  00300	e3a03030	 mov         r3, #0x30
  00304	e0030392	 mul         r3, r2, r3
  00308	e0812003	 add         r2, r1, r3
  0030c	e59d300c	 ldr         r3, [sp, #0xC]
  00310	e5832000	 str         r2, [r3]
  00314	e59d3024	 ldr         r3, [sp, #0x24]
  00318	e283106c	 add         r1, r3, #0x6C
  0031c	e59d2008	 ldr         r2, [sp, #8]
  00320	e3a03030	 mov         r3, #0x30
  00324	e0030392	 mul         r3, r2, r3
  00328	e0812003	 add         r2, r1, r3
  0032c	e59d3010	 ldr         r3, [sp, #0x10]
  00330	e2833004	 add         r3, r3, #4
  00334	e5832000	 str         r2, [r3]

; 94   :     }

  00338	eaffffce	 b           |$LN7@Open|
  0033c		 |$LN6@Open|

; 95   :     
; 96   :     // Now it's safe to call this. Note that StreamContext::Open will call
; 97   :     // back into ResetBaseInfo to give us a chance to cache our HW-specific values,
; 98   :     // so we don't have to call UpdateTempo here.
; 99   :     mmRet = StreamContext::Open(pDeviceContext, lpWOD, dwFlags);

  0033c	e59d3030	 ldr         r3, [sp, #0x30]
  00340	e59d202c	 ldr         r2, [sp, #0x2C]
  00344	e59d1028	 ldr         r1, [sp, #0x28]
  00348	e59d0024	 ldr         r0, [sp, #0x24]
  0034c	eb000000	 bl          |?Open@StreamContext@@UAAKPAVDeviceContext@@PAUwaveopendesc_tag@@K@Z|
  00350	e58d0018	 str         r0, [sp, #0x18]
  00354	e59d3018	 ldr         r3, [sp, #0x18]
  00358	e58d3004	 str         r3, [sp, #4]

; 100  :     if (MMSYSERR_NOERROR!=mmRet)

  0035c	e59d3004	 ldr         r3, [sp, #4]
  00360	e3530000	 cmp         r3, #0
  00364	0a000001	 beq         |$LN2@Open|
  00368	ea000009	 b           |$LN1@Open|

; 101  :     {
; 102  :         goto Exit;

  0036c	ea000008	 b           |$Exit$35269|
  00370		 |$LN2@Open|

; 103  :     }
; 104  : 
; 105  :     // Note: Output streams should be initialized in the run state.
; 106  :     Run();

  00370	e59d3024	 ldr         r3, [sp, #0x24]
  00374	e5933000	 ldr         r3, [r3]
  00378	e2833010	 add         r3, r3, #0x10
  0037c	e59d0024	 ldr         r0, [sp, #0x24]
  00380	e5933000	 ldr         r3, [r3]
  00384	e1a0e00f	 mov         lr, pc
  00388	e12fff13	 bx          r3

; 107  : 
; 108  :     mmRet = MMSYSERR_NOERROR;

  0038c	e3a03000	 mov         r3, #0
  00390	e58d3004	 str         r3, [sp, #4]
  00394		 |$LN1@Open|
  00394		 |$LN9@Open|
  00394		 |$Exit$35269|

; 109  : 
; 110  : Exit:
; 111  :     return mmRet;

  00394	e59d3004	 ldr         r3, [sp, #4]
  00398	e58d3014	 str         r3, [sp, #0x14]

; 112  : }

  0039c	e59d0014	 ldr         r0, [sp, #0x14]
  003a0	e28dd01c	 add         sp, sp, #0x1C
  003a4	e89d6000	 ldmia       sp, {sp, lr}
  003a8	e12fff1e	 bx          lr
  003ac		 |$M35566|

			 ENDP  ; |?Open@CMidiStream@@UAAKPAVDeviceContext@@PAUwaveopendesc_tag@@K@Z|, CMidiStream::Open

	EXPORT	|?AllNotesOff@CMidiStream@@QAAJI@Z|	; CMidiStream::AllNotesOff
	EXPORT	|?Reset@CMidiStream@@UAAKXZ|		; CMidiStream::Reset
	IMPORT	|?Reset@StreamContext@@UAAKXZ|		; StreamContext::Reset

  00018			 AREA	 |.pdata|, PDATA
|$T35574| DCD	|$LN6@Reset|
	DCD	0x40001c04
; Function compile flags: /Odtp

  003ac			 AREA	 |.text|, CODE, ARM

  003ac		 |?Reset@CMidiStream@@UAAKXZ| PROC	; CMidiStream::Reset

; 115  : {

  003ac		 |$LN6@Reset|
  003ac	e1a0c00d	 mov         r12, sp
  003b0	e92d0001	 stmdb       sp!, {r0}
  003b4	e92d5000	 stmdb       sp!, {r12, lr}
  003b8	e24dd00c	 sub         sp, sp, #0xC
  003bc		 |$M35571|

; 116  :     DWORD dwResult = StreamContext::Reset();

  003bc	e59d0014	 ldr         r0, [sp, #0x14]
  003c0	eb000000	 bl          |?Reset@StreamContext@@UAAKXZ|
  003c4	e58d0008	 str         r0, [sp, #8]
  003c8	e59d3008	 ldr         r3, [sp, #8]
  003cc	e58d3000	 str         r3, [sp]

; 117  :     if (dwResult==MMSYSERR_NOERROR)

  003d0	e59d3000	 ldr         r3, [sp]
  003d4	e3530000	 cmp         r3, #0
  003d8	1a000009	 bne         |$LN1@Reset|

; 118  :     {
; 119  :         AllNotesOff(0);

  003dc	e3a01000	 mov         r1, #0
  003e0	e59d0014	 ldr         r0, [sp, #0x14]
  003e4	eb000000	 bl          |?AllNotesOff@CMidiStream@@QAAJI@Z|

; 120  : 
; 121  :         // Note: Output streams should be reset to the run state.
; 122  :         Run();

  003e8	e59d3014	 ldr         r3, [sp, #0x14]
  003ec	e5933000	 ldr         r3, [r3]
  003f0	e2833010	 add         r3, r3, #0x10
  003f4	e59d0014	 ldr         r0, [sp, #0x14]
  003f8	e5933000	 ldr         r3, [r3]
  003fc	e1a0e00f	 mov         lr, pc
  00400	e12fff13	 bx          r3
  00404		 |$LN1@Reset|

; 123  :     }
; 124  :     return dwResult;

  00404	e59d3000	 ldr         r3, [sp]
  00408	e58d3004	 str         r3, [sp, #4]

; 125  : }

  0040c	e59d0004	 ldr         r0, [sp, #4]
  00410	e28dd00c	 add         sp, sp, #0xC
  00414	e89d6000	 ldmia       sp, {sp, lr}
  00418	e12fff1e	 bx          lr
  0041c		 |$M35572|

			 ENDP  ; |?Reset@CMidiStream@@UAAKXZ|, CMidiStream::Reset

	EXPORT	|?Close@CMidiStream@@UAAKXZ|		; CMidiStream::Close
	IMPORT	|?Close@StreamContext@@UAAKXZ|		; StreamContext::Close

  00020			 AREA	 |.pdata|, PDATA
|$T35580| DCD	|$LN6@Close|
	DCD	0x40001504
; Function compile flags: /Odtp

  0041c			 AREA	 |.text|, CODE, ARM

  0041c		 |?Close@CMidiStream@@UAAKXZ| PROC	; CMidiStream::Close

; 128  : {

  0041c		 |$LN6@Close|
  0041c	e1a0c00d	 mov         r12, sp
  00420	e92d0001	 stmdb       sp!, {r0}
  00424	e92d5000	 stmdb       sp!, {r12, lr}
  00428	e24dd00c	 sub         sp, sp, #0xC
  0042c		 |$M35577|

; 129  :     DWORD dwResult = StreamContext::Close();

  0042c	e59d0014	 ldr         r0, [sp, #0x14]
  00430	eb000000	 bl          |?Close@StreamContext@@UAAKXZ|
  00434	e58d0008	 str         r0, [sp, #8]
  00438	e59d3008	 ldr         r3, [sp, #8]
  0043c	e58d3000	 str         r3, [sp]

; 130  :     if (dwResult==MMSYSERR_NOERROR)

  00440	e59d3000	 ldr         r3, [sp]
  00444	e3530000	 cmp         r3, #0
  00448	1a000002	 bne         |$LN1@Close|

; 131  :     {
; 132  :         AllNotesOff(0);

  0044c	e3a01000	 mov         r1, #0
  00450	e59d0014	 ldr         r0, [sp, #0x14]
  00454	eb000000	 bl          |?AllNotesOff@CMidiStream@@QAAJI@Z|
  00458		 |$LN1@Close|

; 133  :     }
; 134  :     return dwResult;

  00458	e59d3000	 ldr         r3, [sp]
  0045c	e58d3004	 str         r3, [sp, #4]

; 135  : }

  00460	e59d0004	 ldr         r0, [sp, #4]
  00464	e28dd00c	 add         sp, sp, #0xC
  00468	e89d6000	 ldmia       sp, {sp, lr}
  0046c	e12fff1e	 bx          lr
  00470		 |$M35578|

			 ENDP  ; |?Close@CMidiStream@@UAAKXZ|, CMidiStream::Close

	EXPORT	|?UpdateTempo@CMidiStream@@QAAJXZ|	; CMidiStream::UpdateTempo
	IMPORT	|?GetBaseSampleRate@DeviceContext@@QAAKXZ| ; DeviceContext::GetBaseSampleRate
	IMPORT	|__rt_udiv64by64|

  00028			 AREA	 |.pdata|, PDATA
|$T35587| DCD	|$LN7@UpdateTemp|
	DCD	0x40005b04
; Function compile flags: /Odtp

  00470			 AREA	 |.text|, CODE, ARM

  00470		 |?UpdateTempo@CMidiStream@@QAAJXZ| PROC ; CMidiStream::UpdateTempo

; 138  : {

  00470		 |$LN7@UpdateTemp|
  00470	e1a0c00d	 mov         r12, sp
  00474	e92d0001	 stmdb       sp!, {r0}
  00478	e92d5000	 stmdb       sp!, {r12, lr}
  0047c	e24dd030	 sub         sp, sp, #0x30
  00480		 |$M35584|

; 139  :     if (m_USecPerQuarterNote==0)

  00480	e59d3038	 ldr         r3, [sp, #0x38]
  00484	e2833c06	 add         r3, r3, #6, 24
  00488	e2833084	 add         r3, r3, #0x84
  0048c	e5933000	 ldr         r3, [r3]
  00490	e3530000	 cmp         r3, #0
  00494	1a000005	 bne         |$LN2@UpdateTemp|

; 140  :     {
; 141  :         m_USecPerQuarterNote = 500000; // If not specified, assume 500000usec = 1/2 sec per quarter note

  00498	e59d3038	 ldr         r3, [sp, #0x38]
  0049c	e2833c06	 add         r3, r3, #6, 24
  004a0	e2832084	 add         r2, r3, #0x84
  004a4	e3a03a7a	 mov         r3, #0x7A, 20
  004a8	e3833e12	 orr         r3, r3, #0x12, 28
  004ac	e5823000	 str         r3, [r2]
  004b0		 |$LN2@UpdateTemp|

; 142  :     }
; 143  : 
; 144  :     if (m_TicksPerQuarterNote==0)

  004b0	e59d3038	 ldr         r3, [sp, #0x38]
  004b4	e2833c06	 add         r3, r3, #6, 24
  004b8	e2833088	 add         r3, r3, #0x88
  004bc	e5933000	 ldr         r3, [r3]
  004c0	e3530000	 cmp         r3, #0
  004c4	1a000004	 bne         |$LN1@UpdateTemp|

; 145  :     {
; 146  :         m_TicksPerQuarterNote = 96;      // If not specified, assume 96 ticks/quarter note

  004c8	e59d3038	 ldr         r3, [sp, #0x38]
  004cc	e2833c06	 add         r3, r3, #6, 24
  004d0	e2832088	 add         r2, r3, #0x88
  004d4	e3a03060	 mov         r3, #0x60
  004d8	e5823000	 str         r3, [r2]
  004dc		 |$LN1@UpdateTemp|

; 147  :     }
; 148  : 
; 149  :     UINT64 Num = m_pDeviceContext->GetBaseSampleRate();

  004dc	e59d3038	 ldr         r3, [sp, #0x38]
  004e0	e2833050	 add         r3, r3, #0x50
  004e4	e5930000	 ldr         r0, [r3]
  004e8	eb000000	 bl          |?GetBaseSampleRate@DeviceContext@@QAAKXZ|
  004ec	e58d001c	 str         r0, [sp, #0x1C]
  004f0	e59d301c	 ldr         r3, [sp, #0x1C]
  004f4	e58d3008	 str         r3, [sp, #8]
  004f8	e3a03000	 mov         r3, #0
  004fc	e58d300c	 str         r3, [sp, #0xC]

; 150  :     Num *= m_USecPerQuarterNote;

  00500	e59d3038	 ldr         r3, [sp, #0x38]
  00504	e2833c06	 add         r3, r3, #6, 24
  00508	e2833084	 add         r3, r3, #0x84
  0050c	e5931000	 ldr         r1, [r3]
  00510	e59d3008	 ldr         r3, [sp, #8]
  00514	e59d200c	 ldr         r2, [sp, #0xC]
  00518	e58d3020	 str         r3, [sp, #0x20]
  0051c	e58d1024	 str         r1, [sp, #0x24]
  00520	e59d3024	 ldr         r3, [sp, #0x24]
  00524	e0000392	 mul         r0, r2, r3
  00528	e59d1020	 ldr         r1, [sp, #0x20]
  0052c	e59d3024	 ldr         r3, [sp, #0x24]
  00530	e0832391	 umull       r2, r3, r1, r3
  00534	e0803003	 add         r3, r0, r3
  00538	e58d2008	 str         r2, [sp, #8]
  0053c	e58d300c	 str         r3, [sp, #0xC]

; 151  :     UINT64 Den = 1000000;

  00540	e3a0393d	 mov         r3, #0x3D, 18
  00544	e3833d09	 orr         r3, r3, #9, 26
  00548	e58d3000	 str         r3, [sp]
  0054c	e3a03000	 mov         r3, #0
  00550	e58d3004	 str         r3, [sp, #4]

; 152  :     Den *= m_TicksPerQuarterNote;

  00554	e59d3038	 ldr         r3, [sp, #0x38]
  00558	e2833c06	 add         r3, r3, #6, 24
  0055c	e2833088	 add         r3, r3, #0x88
  00560	e5931000	 ldr         r1, [r3]
  00564	e59d3000	 ldr         r3, [sp]
  00568	e59d2004	 ldr         r2, [sp, #4]
  0056c	e58d3028	 str         r3, [sp, #0x28]
  00570	e58d102c	 str         r1, [sp, #0x2C]
  00574	e59d302c	 ldr         r3, [sp, #0x2C]
  00578	e0000392	 mul         r0, r2, r3
  0057c	e59d1028	 ldr         r1, [sp, #0x28]
  00580	e59d302c	 ldr         r3, [sp, #0x2C]
  00584	e0832391	 umull       r2, r3, r1, r3
  00588	e0803003	 add         r3, r0, r3
  0058c	e58d2000	 str         r2, [sp]
  00590	e58d3004	 str         r3, [sp, #4]

; 153  :     UINT64 SamplesPerTick = Num/Den;

  00594	e59d0008	 ldr         r0, [sp, #8]
  00598	e59d100c	 ldr         r1, [sp, #0xC]
  0059c	e59d2000	 ldr         r2, [sp]
  005a0	e59d3004	 ldr         r3, [sp, #4]
  005a4	eb000000	 bl          __rt_udiv64by64
  005a8	e58d0010	 str         r0, [sp, #0x10]
  005ac	e58d1014	 str         r1, [sp, #0x14]

; 154  :     m_SamplesPerTick = (UINT32)SamplesPerTick;

  005b0	e59d2010	 ldr         r2, [sp, #0x10]
  005b4	e59d3038	 ldr         r3, [sp, #0x38]
  005b8	e2833c06	 add         r3, r3, #6, 24
  005bc	e283308c	 add         r3, r3, #0x8C
  005c0	e5832000	 str         r2, [r3]

; 155  :     return S_OK;

  005c4	e3a03000	 mov         r3, #0
  005c8	e58d3018	 str         r3, [sp, #0x18]

; 156  : }

  005cc	e59d0018	 ldr         r0, [sp, #0x18]
  005d0	e28dd030	 add         sp, sp, #0x30
  005d4	e89d6000	 ldmia       sp, {sp, lr}
  005d8	e12fff1e	 bx          lr
  005dc		 |$M35585|

			 ENDP  ; |?UpdateTempo@CMidiStream@@QAAJXZ|, CMidiStream::UpdateTempo

	EXPORT	|??_C@_1HC@PLGDHHAP@?$AAE?$AAX?$AAC?$AAE?$AAP?$AAT?$AAI?$AAO?$AAN?$AA?5?$AAI?$AAN?$AA?5?$AAI?$AAS?$AAT?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAm?$AAi?$AAd?$AAi?$AA?5?$AAs?$AAt?$AAr?$AAe?$AAa?$AAm@| [ DATA ] ; `string'
	EXPORT	|?InternalMidiMessage@CMidiStream@@QAAJI@Z| ; CMidiStream::InternalMidiMessage
	EXPORT	|?DeltaTicksToSamples@CMidiStream@@QAAII@Z| ; CMidiStream::DeltaTicksToSamples
	EXPORT	|?ProcessMidiStream@CMidiStream@@QAAIXZ| ; CMidiStream::ProcessMidiStream
	IMPORT	|NKDbgPrintfW|
	IMPORT	|?GetNextBuffer@StreamContext@@QAAPAEXZ| ; StreamContext::GetNextBuffer
	IMPORT	|__C_specific_handler|

  00030			 AREA	 |.pdata|, PDATA
|$T35607| DCD	|$LN22@ProcessMid|
	DCD	0xc0005c05
|$T35609| DCD	|$LN12@ProcessMid|
	DCD	0x40000401

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HC@PLGDHHAP@?$AAE?$AAX?$AAC?$AAE?$AAP?$AAT?$AAI?$AAO?$AAN?$AA?5?$AAI?$AAN?$AA?5?$AAI?$AAS?$AAT?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAm?$AAi?$AAd?$AAi?$AA?5?$AAs?$AAt?$AAr?$AAe?$AAa?$AAm@| DCB "E"
	DCB	0x0, "X", 0x0, "C", 0x0, "E", 0x0, "P", 0x0, "T", 0x0, "I"
	DCB	0x0, "O", 0x0, "N", 0x0, " ", 0x0, "I", 0x0, "N", 0x0, " "
	DCB	0x0, "I", 0x0, "S", 0x0, "T", 0x0, " ", 0x0, "f", 0x0, "o"
	DCB	0x0, "r", 0x0, " ", 0x0, "m", 0x0, "i", 0x0, "d", 0x0, "i"
	DCB	0x0, " ", 0x0, "s", 0x0, "t", 0x0, "r", 0x0, "e", 0x0, "a"
	DCB	0x0, "m", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x"
	DCB	0x0, ",", 0x0, " ", 0x0, "b", 0x0, "u", 0x0, "f", 0x0, "f"
	DCB	0x0, "e", 0x0, "r", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "x", 0x0, "!", 0x0, "!", 0x0, "!", 0x0, "!", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.xdata|, DATA
|$T35605| DCD	0x1
	DCD	|$LN16@ProcessMid|
	DCD	|$LN17@ProcessMid|
	DCD	|$LN12@ProcessMid|
	DCD	|$LN13@ProcessMid|
; Function compile flags: /Odtp

  005dc			 AREA	 |.text|, CODE, ARM

  005dc	00000000	 DCD         |__C_specific_handler|
  005e0	00000000	 DCD         |$T35605|

  005e4		 |?ProcessMidiStream@CMidiStream@@QAAIXZ| PROC ; CMidiStream::ProcessMidiStream

; 161  : {

  005e4		 |$LN22@ProcessMid|
  005e4	e1a0c00d	 mov         r12, sp
  005e8	e92d0001	 stmdb       sp!, {r0}
  005ec	e92d5800	 stmdb       sp!, {r11, r12, lr}
  005f0	e28db00c	 add         r11, sp, #0xC
  005f4	e24dd024	 sub         sp, sp, #0x24
  005f8		 |$LN20@ProcessMid|

; 162  :     WAVEFORMAT_MIDI_MESSAGE *pMsg;
; 163  :     WAVEFORMAT_MIDI_MESSAGE *pMsgEnd;
; 164  :     UINT32 ThisMidiEventDelta;
; 165  : 
; 166  :     // Process all midi messages up to and including the current sample
; 167  :     pMsg    = (WAVEFORMAT_MIDI_MESSAGE *)m_lpCurrData;

  005f8	e59b3000	 ldr         r3, [r11]
  005fc	e2833044	 add         r3, r3, #0x44
  00600	e5933000	 ldr         r3, [r3]
  00604	e50b302c	 str         r3, [r11, #-0x2C]

; 168  :     pMsgEnd = (WAVEFORMAT_MIDI_MESSAGE *)m_lpCurrDataEnd;

  00608	e59b3000	 ldr         r3, [r11]
  0060c	e2833048	 add         r3, r3, #0x48
  00610	e5933000	 ldr         r3, [r3]
  00614	e50b3030	 str         r3, [r11, #-0x30]
  00618		 |$LN6@ProcessMid|

; 169  : 
; 170  :     for (;;)
; 171  :     {
; 172  :         if (pMsg>=pMsgEnd)

  00618	e51b202c	 ldr         r2, [r11, #-0x2C]
  0061c	e51b3030	 ldr         r3, [r11, #-0x30]
  00620	e1520003	 cmp         r2, r3
  00624	3a00000e	 bcc         |$LN4@ProcessMid|

; 173  :         {
; 174  :             pMsg = (WAVEFORMAT_MIDI_MESSAGE *)GetNextBuffer();

  00628	e59b0000	 ldr         r0, [r11]
  0062c	eb000000	 bl          |?GetNextBuffer@StreamContext@@QAAPAEXZ|
  00630	e50b0018	 str         r0, [r11, #-0x18]
  00634	e51b3018	 ldr         r3, [r11, #-0x18]
  00638	e50b302c	 str         r3, [r11, #-0x2C]

; 175  :             if (!pMsg)

  0063c	e51b302c	 ldr         r3, [r11, #-0x2C]
  00640	e3530000	 cmp         r3, #0
  00644	1a000002	 bne         |$LN3@ProcessMid|

; 176  :             {
; 177  :                 // DEBUGMSG(1, (TEXT("CMidiStream::ProcessMidiStream no more events\r\n")));
; 178  :                 return 0;

  00648	e3a03000	 mov         r3, #0
  0064c	e50b301c	 str         r3, [r11, #-0x1C]
  00650	ea00003b	 b           |$LN7@ProcessMid|
  00654		 |$LN3@ProcessMid|

; 179  :             }
; 180  :             pMsgEnd = (WAVEFORMAT_MIDI_MESSAGE *)m_lpCurrDataEnd;

  00654	e59b3000	 ldr         r3, [r11]
  00658	e2833048	 add         r3, r3, #0x48
  0065c	e5933000	 ldr         r3, [r3]
  00660	e50b3030	 str         r3, [r11, #-0x30]
  00664		 |$LN4@ProcessMid|
  00664		 |$LN16@ProcessMid|

; 181  :         }
; 182  : 
; 183  :         _try
; 184  :         {
; 185  :             ThisMidiEventDelta = DeltaTicksToSamples(pMsg->DeltaTicks);

  00664	e51b302c	 ldr         r3, [r11, #-0x2C]
  00668	e5931000	 ldr         r1, [r3]
  0066c	e59b0000	 ldr         r0, [r11]
  00670	eb000000	 bl          |?DeltaTicksToSamples@CMidiStream@@QAAII@Z|
  00674	e50b0014	 str         r0, [r11, #-0x14]
  00678	e51b3014	 ldr         r3, [r11, #-0x14]
  0067c	e50b3028	 str         r3, [r11, #-0x28]

; 186  :             if (ThisMidiEventDelta > m_DeltaSampleCount)

  00680	e59b3000	 ldr         r3, [r11]
  00684	e2833e69	 add         r3, r3, #0x69, 28
  00688	e51b2028	 ldr         r2, [r11, #-0x28]
  0068c	e5933000	 ldr         r3, [r3]
  00690	e1520003	 cmp         r2, r3
  00694	9a00000e	 bls         |$LN1@ProcessMid|

; 187  :             {
; 188  :                 m_lpCurrData = (PBYTE)pMsg;

  00698	e59b3000	 ldr         r3, [r11]
  0069c	e2832044	 add         r2, r3, #0x44
  006a0	e51b302c	 ldr         r3, [r11, #-0x2C]
  006a4	e5823000	 str         r3, [r2]

; 189  :                 INT32 Delta = ThisMidiEventDelta-m_DeltaSampleCount;

  006a8	e59b3000	 ldr         r3, [r11]
  006ac	e2833e69	 add         r3, r3, #0x69, 28
  006b0	e51b2028	 ldr         r2, [r11, #-0x28]
  006b4	e5933000	 ldr         r3, [r3]
  006b8	e0423003	 sub         r3, r2, r3
  006bc	e50b3024	 str         r3, [r11, #-0x24]

; 190  :                 // DEBUGMSG(1, (TEXT("CMidiStream::ProcessMidiStream next event @delta %d\r\n"),Delta));
; 191  :                 return Delta;

  006c0	e51b3024	 ldr         r3, [r11, #-0x24]
  006c4	e50b3020	 str         r3, [r11, #-0x20]
  006c8	e51b3020	 ldr         r3, [r11, #-0x20]
  006cc	e50b301c	 str         r3, [r11, #-0x1C]
  006d0	ea00001b	 b           |$LN7@ProcessMid|
  006d4		 |$LN1@ProcessMid|

; 192  :             }
; 193  : 
; 194  :             // DEBUGMSG(1, (TEXT("CMidiStream::ProcessMidiStream sending midi message 0x%x\r\n"),pMsg->MidiMsg));
; 195  :             InternalMidiMessage(pMsg->MidiMsg);

  006d4	e51b302c	 ldr         r3, [r11, #-0x2C]
  006d8	e2833004	 add         r3, r3, #4
  006dc	e5931000	 ldr         r1, [r3]
  006e0	e59b0000	 ldr         r0, [r11]
  006e4	eb000000	 bl          |?InternalMidiMessage@CMidiStream@@QAAJI@Z|

; 196  :             m_DeltaSampleCount=0;

  006e8	e59b3000	 ldr         r3, [r11]
  006ec	e2832e69	 add         r2, r3, #0x69, 28
  006f0	e3a03000	 mov         r3, #0
  006f4	e5823000	 str         r3, [r2]

; 197  :             pMsg++;

  006f8	e51b302c	 ldr         r3, [r11, #-0x2C]
  006fc	e2833008	 add         r3, r3, #8
  00700	e50b302c	 str         r3, [r11, #-0x2C]
  00704		 |$LN17@ProcessMid|

; 198  :         }

  00704	ea00000d	 b           |$LN18@ProcessMid|
  00708		 |$LN13@ProcessMid|

; 200  :         {
; 201  :             RETAILMSG(1, (TEXT("EXCEPTION IN IST for midi stream 0x%x, buffer 0x%x!!!!\r\n"), this, m_lpCurrData));

  00708	e59b3000	 ldr         r3, [r11]
  0070c	e2833044	 add         r3, r3, #0x44
  00710	e5932000	 ldr         r2, [r3]
  00714	e59b1000	 ldr         r1, [r11]
  00718	e59f0040	 ldr         r0, [pc, #0x40]
  0071c	eb000000	 bl          NKDbgPrintfW
  00720	e3a03001	 mov         r3, #1
  00724	e50b3010	 str         r3, [r11, #-0x10]
  00728	ea000001	 b           |$LN10@ProcessMid|
  0072c	e3a03000	 mov         r3, #0
  00730	e50b3010	 str         r3, [r11, #-0x10]
  00734		 |$LN10@ProcessMid|

; 202  :             pMsg = pMsgEnd; // Pretend we finished reading the application buffer

  00734	e51b3030	 ldr         r3, [r11, #-0x30]
  00738	e50b302c	 str         r3, [r11, #-0x2C]
  0073c	eaffffff	 b           |$LN18@ProcessMid|
  00740		 |$LN18@ProcessMid|

; 203  :         }
; 204  :     }

  00740	eaffffb4	 b           |$LN6@ProcessMid|
  00744		 |$LN7@ProcessMid|
  00744		 |$LN11@ProcessMid|

; 205  : }

  00744	e51b001c	 ldr         r0, [r11, #-0x1C]
  00748	e24bd00c	 sub         sp, r11, #0xC
  0074c	e89d6800	 ldmia       sp, {r11, sp, lr}
  00750	e12fff1e	 bx          lr

			 ENDP  ; |?ProcessMidiStream@CMidiStream@@QAAIXZ|, CMidiStream::ProcessMidiStream

  00754		 |$LN12@ProcessMid|
  00754		 |$LN21@ProcessMid|

; 199  :         _except (EXCEPTION_EXECUTE_HANDLER)

  00754	e52de004	 str         lr, [sp, #-4]!
  00758		 |$LN15@ProcessMid|
  00758		 |$LN24@ProcessMid|
  00758	e3a00001	 mov         r0, #1
  0075c		 |$LN14@ProcessMid|
  0075c	e49df004	 ldr         pc, [sp], #4
  00760		 |$LN26@ProcessMid|
  00760		 |$LN27@ProcessMid|
  00760	00000000	 DCD         |??_C@_1HC@PLGDHHAP@?$AAE?$AAX?$AAC?$AAE?$AAP?$AAT?$AAI?$AAO?$AAN?$AA?5?$AAI?$AAN?$AA?5?$AAI?$AAS?$AAT?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAm?$AAi?$AAd?$AAi?$AA?5?$AAs?$AAt?$AAr?$AAe?$AAa?$AAm@|
  00764		 |$LN25@ProcessMid|
  00764		 |$LN23@ProcessMid|
	EXPORT	|?Render@CMidiStream@@UAAPAEPAE00PAUTRANSFER_STATUS@@@Z| ; CMidiStream::Render
	IMPORT	|?ClearBuffer@StreamContext@@SAXPAE0@Z|	; StreamContext::ClearBuffer
	IMPORT	|?Render@CMidiNote@@QAAPAEPAE00PAUTRANSFER_STATUS@@@Z| ; CMidiNote::Render
	IMPORT	|?StillPlaying@StreamContext@@QAAHXZ|	; StreamContext::StillPlaying
	IMPORT	|__rt_udiv|

  00040			 AREA	 |.pdata|, PDATA
|$T35623| DCD	|$LN17@Render|
	DCD	0x40007904
; Function compile flags: /Odtp

  00764			 AREA	 |.text|, CODE, ARM

  00764		 |?Render@CMidiStream@@UAAPAEPAE00PAUTRANSFER_STATUS@@@Z| PROC ; CMidiStream::Render

; 208  : {

  00764		 |$LN17@Render|
  00764	e1a0c00d	 mov         r12, sp
  00768	e92d000f	 stmdb       sp!, {r0 - r3}
  0076c	e92d5010	 stmdb       sp!, {r4, r12, lr}
  00770	e24dd030	 sub         sp, sp, #0x30
  00774		 |$M35620|

; 209  : 
; 210  :     // DEBUGMSG(1, (TEXT("Entering CMidiStream::Render, pBuffer=0x%x, current delta = %d\r\n"), pBuffer, m_DeltaSampleCount));
; 211  : 
; 212  :     // If we're not running, or we don't have any buffers queued and the note list is empty,
; 213  :     // just return
; 214  :     if ( (!m_bRunning) || (!StillPlaying() && IsListEmpty(&m_NoteList)) )

  00774	e59d303c	 ldr         r3, [sp, #0x3C]
  00778	e2833010	 add         r3, r3, #0x10
  0077c	e5933000	 ldr         r3, [r3]
  00780	e3530000	 cmp         r3, #0
  00784	0a000016	 beq         |$LN9@Render|
  00788	e59d003c	 ldr         r0, [sp, #0x3C]
  0078c	eb000000	 bl          |?StillPlaying@StreamContext@@QAAHXZ|
  00790	e58d0020	 str         r0, [sp, #0x20]
  00794	e59d3020	 ldr         r3, [sp, #0x20]
  00798	e3530000	 cmp         r3, #0
  0079c	1a000013	 bne         |$LN10@Render|
  007a0	e59d303c	 ldr         r3, [sp, #0x3C]
  007a4	e2833c06	 add         r3, r3, #6, 24
  007a8	e283106c	 add         r1, r3, #0x6C
  007ac	e59d303c	 ldr         r3, [sp, #0x3C]
  007b0	e2833c06	 add         r3, r3, #6, 24
  007b4	e283206c	 add         r2, r3, #0x6C
  007b8	e5913000	 ldr         r3, [r1]
  007bc	e1530002	 cmp         r3, r2
  007c0	1a000002	 bne         |$LN13@Render|
  007c4	e3a03001	 mov         r3, #1
  007c8	e58d3024	 str         r3, [sp, #0x24]
  007cc	ea000001	 b           |$LN14@Render|
  007d0		 |$LN13@Render|
  007d0	e3a03000	 mov         r3, #0
  007d4	e58d3024	 str         r3, [sp, #0x24]
  007d8		 |$LN14@Render|
  007d8	e59d3024	 ldr         r3, [sp, #0x24]
  007dc	e3530000	 cmp         r3, #0
  007e0	0a000002	 beq         |$LN10@Render|
  007e4		 |$LN9@Render|

; 215  :     {
; 216  :         // DEBUGMSG(1, (TEXT("CMidiStream::Render nothing to do\r\n")));
; 217  :         return pBuffer;

  007e4	e59d3040	 ldr         r3, [sp, #0x40]
  007e8	e58d3018	 str         r3, [sp, #0x18]
  007ec	ea000051	 b           |$LN11@Render|
  007f0		 |$LN10@Render|
  007f0		 |$LN8@Render|

; 218  :     }
; 219  : 
; 220  :     while (pBuffer<pBufferEnd)

  007f0	e59d2040	 ldr         r2, [sp, #0x40]
  007f4	e59d3044	 ldr         r3, [sp, #0x44]
  007f8	e1520003	 cmp         r2, r3
  007fc	2a000046	 bcs         |$LN7@Render|

; 221  :     {
; 222  :         // Process pending midi messages and get relative sample # of next midi event
; 223  :         UINT32 NextMidiEvent;
; 224  :         NextMidiEvent = ProcessMidiStream();

  00800	e59d003c	 ldr         r0, [sp, #0x3C]
  00804	eb000000	 bl          |?ProcessMidiStream@CMidiStream@@QAAIXZ|
  00808	e58d0028	 str         r0, [sp, #0x28]
  0080c	e59d3028	 ldr         r3, [sp, #0x28]
  00810	e58d3004	 str         r3, [sp, #4]

; 225  : 
; 226  :         PBYTE pBufferEndEvent;  // Where to stop on this pass
; 227  : 
; 228  :         // If NextMidiEvent returns 0, it means there are no more midi messages left in the queue.
; 229  :         if (NextMidiEvent==0)

  00814	e59d3004	 ldr         r3, [sp, #4]
  00818	e3530000	 cmp         r3, #0
  0081c	1a000002	 bne         |$LN6@Render|

; 230  :         {
; 231  :             // Just process the rest of this buffer
; 232  :             pBufferEndEvent=pBufferEnd;

  00820	e59d3044	 ldr         r3, [sp, #0x44]
  00824	e58d300c	 str         r3, [sp, #0xC]

; 233  :         }
; 234  :         // NextMidiEvent is non-zero, and represents the delta sample value of the next midi event
; 235  :         else

  00828	ea00000b	 b           |$LN5@Render|
  0082c		 |$LN6@Render|

; 236  :         {
; 237  :             // Convert to be a pointer in this buffer
; 238  :             pBufferEndEvent = pBuffer + (NextMidiEvent * (sizeof(HWSAMPLE) * OUTCHANNELS));

  0082c	e59d1004	 ldr         r1, [sp, #4]
  00830	e3a03004	 mov         r3, #4
  00834	e0020391	 mul         r2, r1, r3
  00838	e59d3040	 ldr         r3, [sp, #0x40]
  0083c	e0833002	 add         r3, r3, r2
  00840	e58d300c	 str         r3, [sp, #0xC]

; 239  : 
; 240  :             // If the next event occurs after this buffer, just finish processing this buffer
; 241  :             if (pBufferEndEvent>pBufferEnd)

  00844	e59d200c	 ldr         r2, [sp, #0xC]
  00848	e59d3044	 ldr         r3, [sp, #0x44]
  0084c	e1520003	 cmp         r2, r3
  00850	9a000001	 bls         |$LN4@Render|

; 242  :             {
; 243  :                 pBufferEndEvent=pBufferEnd;

  00854	e59d3044	 ldr         r3, [sp, #0x44]
  00858	e58d300c	 str         r3, [sp, #0xC]
  0085c		 |$LN4@Render|
  0085c		 |$LN5@Render|

; 244  :             }
; 245  :         }
; 246  : 
; 247  :         // Update the delta for the samples we're about to process
; 248  :         m_DeltaSampleCount += ((pBufferEndEvent-pBuffer)/(sizeof(HWSAMPLE) * OUTCHANNELS));

  0085c	e59d303c	 ldr         r3, [sp, #0x3C]
  00860	e2834e69	 add         r4, r3, #0x69, 28
  00864	e59d200c	 ldr         r2, [sp, #0xC]
  00868	e59d3040	 ldr         r3, [sp, #0x40]
  0086c	e0421003	 sub         r1, r2, r3
  00870	e3a00004	 mov         r0, #4
  00874	eb000000	 bl          __rt_udiv
  00878	e5943000	 ldr         r3, [r4]
  0087c	e0832000	 add         r2, r3, r0
  00880	e59d303c	 ldr         r3, [sp, #0x3C]
  00884	e2833e69	 add         r3, r3, #0x69, 28
  00888	e5832000	 str         r2, [r3]

; 249  : 
; 250  :         // Process existing notes
; 251  :         PLIST_ENTRY pListEntry;
; 252  :         pListEntry = m_NoteList.Flink;

  0088c	e59d303c	 ldr         r3, [sp, #0x3C]
  00890	e2833c06	 add         r3, r3, #6, 24
  00894	e283306c	 add         r3, r3, #0x6C
  00898	e5933000	 ldr         r3, [r3]
  0089c	e58d3008	 str         r3, [sp, #8]
  008a0		 |$LN3@Render|

; 253  :         while (pListEntry != &m_NoteList)

  008a0	e59d303c	 ldr         r3, [sp, #0x3C]
  008a4	e2833c06	 add         r3, r3, #6, 24
  008a8	e283206c	 add         r2, r3, #0x6C
  008ac	e59d3008	 ldr         r3, [sp, #8]
  008b0	e1530002	 cmp         r3, r2
  008b4	0a000015	 beq         |$LN2@Render|

; 254  :         {
; 255  :             CMidiNote *pCNote;
; 256  : 
; 257  :             // Get a pointer to the stream context
; 258  :             pCNote = CONTAINING_RECORD(pListEntry,CMidiNote,m_Link);

  008b8	e59d3008	 ldr         r3, [sp, #8]
  008bc	e58d3014	 str         r3, [sp, #0x14]

; 259  : 
; 260  :             // Get next list entry, since Render may cause note to go away
; 261  :             pListEntry = pListEntry->Flink;

  008c0	e59d3008	 ldr         r3, [sp, #8]
  008c4	e5933000	 ldr         r3, [r3]
  008c8	e58d3008	 str         r3, [sp, #8]

; 262  : 
; 263  :             PBYTE pBufferLastThis;
; 264  :             pBufferLastThis = pCNote->Render(pBuffer, pBufferEndEvent, pBufferLast, pTranferStatus);

  008cc	e59d304c	 ldr         r3, [sp, #0x4C]
  008d0	e58d3000	 str         r3, [sp]
  008d4	e59d3048	 ldr         r3, [sp, #0x48]
  008d8	e59d200c	 ldr         r2, [sp, #0xC]
  008dc	e59d1040	 ldr         r1, [sp, #0x40]
  008e0	e59d0014	 ldr         r0, [sp, #0x14]
  008e4	eb000000	 bl          |?Render@CMidiNote@@QAAPAEPAE00PAUTRANSFER_STATUS@@@Z|
  008e8	e58d002c	 str         r0, [sp, #0x2C]
  008ec	e59d302c	 ldr         r3, [sp, #0x2C]
  008f0	e58d3010	 str         r3, [sp, #0x10]

; 265  :             if (pBufferLast < pBufferLastThis)

  008f4	e59d2048	 ldr         r2, [sp, #0x48]
  008f8	e59d3010	 ldr         r3, [sp, #0x10]
  008fc	e1520003	 cmp         r2, r3
  00900	2a000001	 bcs         |$LN1@Render|

; 266  :             {
; 267  :                 pBufferLast = pBufferLastThis;

  00904	e59d3010	 ldr         r3, [sp, #0x10]
  00908	e58d3048	 str         r3, [sp, #0x48]
  0090c		 |$LN1@Render|

; 268  :             }
; 269  :         }

  0090c	eaffffe3	 b           |$LN3@Render|
  00910		 |$LN2@Render|

; 270  : 
; 271  :         pBuffer = pBufferEndEvent;

  00910	e59d300c	 ldr         r3, [sp, #0xC]
  00914	e58d3040	 str         r3, [sp, #0x40]

; 272  :     }

  00918	eaffffb4	 b           |$LN8@Render|
  0091c		 |$LN7@Render|

; 273  : 
; 274  :     // We need to make sure we clear any unwritten section of the buffer to make sure the DMA controller doesn't stop
; 275  :     // Note: we don't check for pTransferStatus->Mute here- should we?
; 276  :     StreamContext::ClearBuffer(pBufferLast,pBufferEnd);

  0091c	e59d1044	 ldr         r1, [sp, #0x44]
  00920	e59d0048	 ldr         r0, [sp, #0x48]
  00924	eb000000	 bl          |?ClearBuffer@StreamContext@@SAXPAE0@Z|

; 277  :     pBufferLast=pBufferEnd;

  00928	e59d3044	 ldr         r3, [sp, #0x44]
  0092c	e58d3048	 str         r3, [sp, #0x48]

; 278  : 
; 279  :     // DEBUGMSG(1, (TEXT("CMidiStream::Render returning, pBufferLast=0x%x, pBufferEnd=0x%x\r\n"),pBufferLast,pBufferEnd));
; 280  :     return pBufferLast;

  00930	e59d3048	 ldr         r3, [sp, #0x48]
  00934	e58d3018	 str         r3, [sp, #0x18]
  00938		 |$LN11@Render|

; 281  : }

  00938	e59d0018	 ldr         r0, [sp, #0x18]
  0093c	e28dd030	 add         sp, sp, #0x30
  00940	e89d6010	 ldmia       sp, {r4, sp, lr}
  00944	e12fff1e	 bx          lr
  00948		 |$M35621|

			 ENDP  ; |?Render@CMidiStream@@UAAPAEPAE00PAUTRANSFER_STATUS@@@Z|, CMidiStream::Render

	EXPORT	|?MidiMessage@CMidiStream@@QAAKI@Z|	; CMidiStream::MidiMessage

  00048			 AREA	 |.pdata|, PDATA
|$T35631| DCD	|$LN8@MidiMessag|
	DCD	0x40003204
; Function compile flags: /Odtp

  00948			 AREA	 |.text|, CODE, ARM

  00948		 |?MidiMessage@CMidiStream@@QAAKI@Z| PROC ; CMidiStream::MidiMessage

; 284  : {

  00948		 |$LN8@MidiMessag|
  00948	e1a0c00d	 mov         r12, sp
  0094c	e92d0003	 stmdb       sp!, {r0, r1}
  00950	e92d5000	 stmdb       sp!, {r12, lr}
  00954	e24dd010	 sub         sp, sp, #0x10
  00958		 |$M35628|

; 285  :     HRESULT Result;
; 286  : 
; 287  :     Result = InternalMidiMessage(dwMessage);

  00958	e59d101c	 ldr         r1, [sp, #0x1C]
  0095c	e59d0018	 ldr         r0, [sp, #0x18]
  00960	eb000000	 bl          |?InternalMidiMessage@CMidiStream@@QAAJI@Z|
  00964	e58d0008	 str         r0, [sp, #8]
  00968	e59d3008	 ldr         r3, [sp, #8]
  0096c	e58d3000	 str         r3, [sp]

; 288  : 
; 289  :     // If we're running, and the notelist has notes to render, make sure DMA is enabled
; 290  :     if ( (m_bRunning) && (m_NoteList.Flink != &m_NoteList) )

  00970	e59d3018	 ldr         r3, [sp, #0x18]
  00974	e2833010	 add         r3, r3, #0x10
  00978	e5933000	 ldr         r3, [r3]
  0097c	e3530000	 cmp         r3, #0
  00980	0a000014	 beq         |$LN1@MidiMessag|
  00984	e59d3018	 ldr         r3, [sp, #0x18]
  00988	e2833c06	 add         r3, r3, #6, 24
  0098c	e283106c	 add         r1, r3, #0x6C
  00990	e59d3018	 ldr         r3, [sp, #0x18]
  00994	e2833c06	 add         r3, r3, #6, 24
  00998	e283206c	 add         r2, r3, #0x6C
  0099c	e5913000	 ldr         r3, [r1]
  009a0	e1530002	 cmp         r3, r2
  009a4	0a00000b	 beq         |$LN1@MidiMessag|

; 291  :     {
; 292  :         m_pDeviceContext->StreamReadyToRender(this);

  009a8	e59d1018	 ldr         r1, [sp, #0x18]
  009ac	e59d3018	 ldr         r3, [sp, #0x18]
  009b0	e2833050	 add         r3, r3, #0x50
  009b4	e5932000	 ldr         r2, [r3]
  009b8	e59d3018	 ldr         r3, [sp, #0x18]
  009bc	e2833050	 add         r3, r3, #0x50
  009c0	e5930000	 ldr         r0, [r3]
  009c4	e5923000	 ldr         r3, [r2]
  009c8	e2833010	 add         r3, r3, #0x10
  009cc	e5933000	 ldr         r3, [r3]
  009d0	e1a0e00f	 mov         lr, pc
  009d4	e12fff13	 bx          r3
  009d8		 |$LN1@MidiMessag|

; 293  :     }
; 294  : 
; 295  :     return (Result==S_OK) ? MMSYSERR_NOERROR : MMSYSERR_ERROR;

  009d8	e59d3000	 ldr         r3, [sp]
  009dc	e3530000	 cmp         r3, #0
  009e0	1a000002	 bne         |$LN4@MidiMessag|
  009e4	e3a03000	 mov         r3, #0
  009e8	e58d300c	 str         r3, [sp, #0xC]
  009ec	ea000001	 b           |$LN5@MidiMessag|
  009f0		 |$LN4@MidiMessag|
  009f0	e3a03001	 mov         r3, #1
  009f4	e58d300c	 str         r3, [sp, #0xC]
  009f8		 |$LN5@MidiMessag|
  009f8	e59d300c	 ldr         r3, [sp, #0xC]
  009fc	e58d3004	 str         r3, [sp, #4]

; 296  : }

  00a00	e59d0004	 ldr         r0, [sp, #4]
  00a04	e28dd010	 add         sp, sp, #0x10
  00a08	e89d6000	 ldmia       sp, {sp, lr}
  00a0c	e12fff1e	 bx          lr
  00a10		 |$M35629|

			 ENDP  ; |?MidiMessage@CMidiStream@@QAAKI@Z|, CMidiStream::MidiMessage

	EXPORT	|?NoteOff@CMidiStream@@QAAJIII@Z|	; CMidiStream::NoteOff
	EXPORT	|?NoteOn@CMidiStream@@QAAJIII@Z|	; CMidiStream::NoteOn
	EXPORT	|?MidiData@CMidiStream@@QAAJI@Z|	; CMidiStream::MidiData

  00050			 AREA	 |.pdata|, PDATA
|$T35638| DCD	|$LN13@InternalMi|
	DCD	0x40005704
; Function compile flags: /Odtp

  00a10			 AREA	 |.text|, CODE, ARM

  00a10		 |?InternalMidiMessage@CMidiStream@@QAAJI@Z| PROC ; CMidiStream::InternalMidiMessage

; 300  : {

  00a10		 |$LN13@InternalMi|
  00a10	e1a0c00d	 mov         r12, sp
  00a14	e92d0003	 stmdb       sp!, {r0, r1}
  00a18	e92d5000	 stmdb       sp!, {r12, lr}
  00a1c	e24dd024	 sub         sp, sp, #0x24
  00a20		 |$M35635|

; 301  :     UINT32 OpCode = dwData & 0xF0000000;

  00a20	e59d3030	 ldr         r3, [sp, #0x30]
  00a24	e203320f	 and         r3, r3, #0xF, 4
  00a28	e58d3000	 str         r3, [sp]

; 302  :     switch (OpCode)

  00a2c	e59d3000	 ldr         r3, [sp]
  00a30	e58d3010	 str         r3, [sp, #0x10]
  00a34	e59d3010	 ldr         r3, [sp, #0x10]
  00a38	e3530202	 cmp         r3, #2, 4
  00a3c	8a000009	 bhi         |$LN10@InternalMi|
  00a40	e59d3010	 ldr         r3, [sp, #0x10]
  00a44	e3530202	 cmp         r3, #2, 4
  00a48	0a00001e	 beq         |$LN3@InternalMi|
  00a4c	e59d3010	 ldr         r3, [sp, #0x10]
  00a50	e3530000	 cmp         r3, #0
  00a54	0a000007	 beq         |$LN5@InternalMi|
  00a58	e59d3010	 ldr         r3, [sp, #0x10]
  00a5c	e3530201	 cmp         r3, #1, 4
  00a60	0a00000b	 beq         |$LN4@InternalMi|
  00a64	ea000039	 b           |$LN6@InternalMi|
  00a68		 |$LN10@InternalMi|
  00a68	e59d3010	 ldr         r3, [sp, #0x10]
  00a6c	e3530203	 cmp         r3, #3, 4
  00a70	0a000014	 beq         |$LN3@InternalMi|
  00a74	ea000035	 b           |$LN6@InternalMi|
  00a78		 |$LN5@InternalMi|

; 303  :     {
; 304  :     case 0:
; 305  :         return MidiData(dwData);

  00a78	e59d1030	 ldr         r1, [sp, #0x30]
  00a7c	e59d002c	 ldr         r0, [sp, #0x2C]
  00a80	eb000000	 bl          |?MidiData@CMidiStream@@QAAJI@Z|
  00a84	e58d0014	 str         r0, [sp, #0x14]
  00a88	e59d3014	 ldr         r3, [sp, #0x14]
  00a8c	e58d300c	 str         r3, [sp, #0xC]
  00a90	ea000031	 b           |$LN8@InternalMi|
  00a94		 |$LN4@InternalMi|

; 306  :     case MIDI_MESSAGE_UPDATETEMPO:
; 307  :         m_USecPerQuarterNote  = (dwData & 0xFFFFFF);

  00a94	e59d2030	 ldr         r2, [sp, #0x30]
  00a98	e3e034ff	 mvn         r3, #0xFF, 8
  00a9c	e0022003	 and         r2, r2, r3
  00aa0	e59d302c	 ldr         r3, [sp, #0x2C]
  00aa4	e2833c06	 add         r3, r3, #6, 24
  00aa8	e2833084	 add         r3, r3, #0x84
  00aac	e5832000	 str         r2, [r3]

; 308  :         return UpdateTempo();

  00ab0	e59d002c	 ldr         r0, [sp, #0x2C]
  00ab4	eb000000	 bl          |?UpdateTempo@CMidiStream@@QAAJXZ|
  00ab8	e58d0018	 str         r0, [sp, #0x18]
  00abc	e59d3018	 ldr         r3, [sp, #0x18]
  00ac0	e58d300c	 str         r3, [sp, #0xC]
  00ac4	ea000024	 b           |$LN8@InternalMi|
  00ac8		 |$LN3@InternalMi|

; 309  :     case MIDI_MESSAGE_FREQGENON:
; 310  :     case MIDI_MESSAGE_FREQGENOFF:
; 311  :         {
; 312  :             UINT32 dwNote = ((dwData) & 0xffff);

  00ac8	e59d2030	 ldr         r2, [sp, #0x30]
  00acc	e3a03cff	 mov         r3, #0xFF, 24
  00ad0	e38330ff	 orr         r3, r3, #0xFF
  00ad4	e0023003	 and         r3, r2, r3
  00ad8	e58d3008	 str         r3, [sp, #8]

; 313  :             UINT32 dwVelocity = ((dwData >> 16) & 0x7f) ;

  00adc	e59d3030	 ldr         r3, [sp, #0x30]
  00ae0	e1a03483	 mov         r3, r3, lsl #9
  00ae4	e1a03ca3	 mov         r3, r3, lsr #25
  00ae8	e58d3004	 str         r3, [sp, #4]

; 314  :             if ((OpCode==MIDI_MESSAGE_FREQGENON)  && (dwVelocity>0))

  00aec	e59d3000	 ldr         r3, [sp]
  00af0	e3530202	 cmp         r3, #2, 4
  00af4	1a00000c	 bne         |$LN2@InternalMi|
  00af8	e59d3004	 ldr         r3, [sp, #4]
  00afc	e3530000	 cmp         r3, #0
  00b00	9a000009	 bls         |$LN2@InternalMi|

; 315  :             {
; 316  :                 return NoteOn(dwNote, dwVelocity, FREQCHANNEL);

  00b04	e3a03010	 mov         r3, #0x10
  00b08	e59d2004	 ldr         r2, [sp, #4]
  00b0c	e59d1008	 ldr         r1, [sp, #8]
  00b10	e59d002c	 ldr         r0, [sp, #0x2C]
  00b14	eb000000	 bl          |?NoteOn@CMidiStream@@QAAJIII@Z|
  00b18	e58d001c	 str         r0, [sp, #0x1C]
  00b1c	e59d301c	 ldr         r3, [sp, #0x1C]
  00b20	e58d300c	 str         r3, [sp, #0xC]
  00b24	ea00000c	 b           |$LN8@InternalMi|

; 317  :             }
; 318  :             else

  00b28	ea000008	 b           |$LN1@InternalMi|
  00b2c		 |$LN2@InternalMi|

; 319  :             {
; 320  :                 return NoteOff(dwNote, dwVelocity, FREQCHANNEL);

  00b2c	e3a03010	 mov         r3, #0x10
  00b30	e59d2004	 ldr         r2, [sp, #4]
  00b34	e59d1008	 ldr         r1, [sp, #8]
  00b38	e59d002c	 ldr         r0, [sp, #0x2C]
  00b3c	eb000000	 bl          |?NoteOff@CMidiStream@@QAAJIII@Z|
  00b40	e58d0020	 str         r0, [sp, #0x20]
  00b44	e59d3020	 ldr         r3, [sp, #0x20]
  00b48	e58d300c	 str         r3, [sp, #0xC]
  00b4c	ea000002	 b           |$LN8@InternalMi|
  00b50		 |$LN1@InternalMi|
  00b50		 |$LN6@InternalMi|

; 321  :             }
; 322  :         }
; 323  :     }
; 324  :     return E_NOTIMPL;

  00b50	e3a03106	 mov         r3, #6, 2
  00b54	e3833901	 orr         r3, r3, #1, 18
  00b58	e58d300c	 str         r3, [sp, #0xC]
  00b5c		 |$LN8@InternalMi|

; 325  : }

  00b5c	e59d000c	 ldr         r0, [sp, #0xC]
  00b60	e28dd024	 add         sp, sp, #0x24
  00b64	e89d6000	 ldmia       sp, {sp, lr}
  00b68	e12fff1e	 bx          lr
  00b6c		 |$M35636|

			 ENDP  ; |?InternalMidiMessage@CMidiStream@@QAAJI@Z|, CMidiStream::InternalMidiMessage


  00058			 AREA	 |.pdata|, PDATA
|$T35644| DCD	|$LN16@MidiData|
	DCD	0x40005504
; Function compile flags: /Odtp

  00b6c			 AREA	 |.text|, CODE, ARM

  00b6c		 |?MidiData@CMidiStream@@QAAJI@Z| PROC	; CMidiStream::MidiData

; 328  : {

  00b6c		 |$LN16@MidiData|
  00b6c	e1a0c00d	 mov         r12, sp
  00b70	e92d0003	 stmdb       sp!, {r0, r1}
  00b74	e92d5000	 stmdb       sp!, {r12, lr}
  00b78	e24dd024	 sub         sp, sp, #0x24
  00b7c		 |$M35641|

; 329  :     HRESULT Result=E_NOTIMPL;

  00b7c	e3a03106	 mov         r3, #6, 2
  00b80	e3833901	 orr         r3, r3, #1, 18
  00b84	e58d3004	 str         r3, [sp, #4]

; 330  :     UINT32 dwChannel;
; 331  :     UINT32 dwNote;
; 332  :     UINT32 dwVelocity;
; 333  : 
; 334  :     if (dwData & 0x80)

  00b88	e59d3030	 ldr         r3, [sp, #0x30]
  00b8c	e3130080	 tst         r3, #0x80
  00b90	0a000006	 beq         |$LN11@MidiData|

; 335  :     {
; 336  :         m_RunningStatus = (BYTE)(dwData & 0xFF);      // status byte...

  00b94	e59d3030	 ldr         r3, [sp, #0x30]
  00b98	e20330ff	 and         r3, r3, #0xFF
  00b9c	e20320ff	 and         r2, r3, #0xFF
  00ba0	e59d302c	 ldr         r3, [sp, #0x2C]
  00ba4	e2833d1a	 add         r3, r3, #0x1A, 26
  00ba8	e5c32000	 strb        r2, [r3]

; 337  :     }
; 338  :     else

  00bac	ea000006	 b           |$LN10@MidiData|
  00bb0		 |$LN11@MidiData|

; 339  :     {
; 340  :         dwData = (dwData<<8) | m_RunningStatus;

  00bb0	e59d3030	 ldr         r3, [sp, #0x30]
  00bb4	e1a02403	 mov         r2, r3, lsl #8
  00bb8	e59d302c	 ldr         r3, [sp, #0x2C]
  00bbc	e2833d1a	 add         r3, r3, #0x1A, 26
  00bc0	e5d33000	 ldrb        r3, [r3]
  00bc4	e1823003	 orr         r3, r2, r3
  00bc8	e58d3030	 str         r3, [sp, #0x30]
  00bcc		 |$LN10@MidiData|

; 341  :     }
; 342  : 
; 343  :     dwChannel  = (dwData & 0x0f) ;

  00bcc	e59d3030	 ldr         r3, [sp, #0x30]
  00bd0	e203300f	 and         r3, r3, #0xF
  00bd4	e58d300c	 str         r3, [sp, #0xC]

; 344  :     dwNote     = ((dwData >> 8) & 0x7f) ;

  00bd8	e59d3030	 ldr         r3, [sp, #0x30]
  00bdc	e1a03883	 mov         r3, r3, lsl #17
  00be0	e1a03ca3	 mov         r3, r3, lsr #25
  00be4	e58d3008	 str         r3, [sp, #8]

; 345  :     dwVelocity = ((dwData >> 16) & 0x7f) ;

  00be8	e59d3030	 ldr         r3, [sp, #0x30]
  00bec	e1a03483	 mov         r3, r3, lsl #9
  00bf0	e1a03ca3	 mov         r3, r3, lsr #25
  00bf4	e58d3000	 str         r3, [sp]

; 346  : 
; 347  :     switch (dwData & 0xf0)

  00bf8	e59d3030	 ldr         r3, [sp, #0x30]
  00bfc	e20330f0	 and         r3, r3, #0xF0
  00c00	e58d3014	 str         r3, [sp, #0x14]
  00c04	e59d3014	 ldr         r3, [sp, #0x14]
  00c08	e3530080	 cmp         r3, #0x80
  00c0c	0a000012	 beq         |$LN5@MidiData|
  00c10	e59d3014	 ldr         r3, [sp, #0x14]
  00c14	e3530090	 cmp         r3, #0x90
  00c18	0a000003	 beq         |$LN7@MidiData|
  00c1c	e59d3014	 ldr         r3, [sp, #0x14]
  00c20	e35300b0	 cmp         r3, #0xB0
  00c24	0a000015	 beq         |$LN4@MidiData|
  00c28	ea00001e	 b           |$LN8@MidiData|
  00c2c		 |$LN7@MidiData|

; 348  :     {
; 349  :     case 0x90:  // Note on
; 350  :         if (dwVelocity!=0)

  00c2c	e59d3000	 ldr         r3, [sp]
  00c30	e3530000	 cmp         r3, #0
  00c34	0a000008	 beq         |$LN6@MidiData|

; 351  :         {
; 352  :             Result = NoteOn(dwNote, dwVelocity, dwChannel);

  00c38	e59d300c	 ldr         r3, [sp, #0xC]
  00c3c	e59d2000	 ldr         r2, [sp]
  00c40	e59d1008	 ldr         r1, [sp, #8]
  00c44	e59d002c	 ldr         r0, [sp, #0x2C]
  00c48	eb000000	 bl          |?NoteOn@CMidiStream@@QAAJIII@Z|
  00c4c	e58d0018	 str         r0, [sp, #0x18]
  00c50	e59d3018	 ldr         r3, [sp, #0x18]
  00c54	e58d3004	 str         r3, [sp, #4]

; 353  :             break;

  00c58	ea000012	 b           |$LN8@MidiData|
  00c5c		 |$LN6@MidiData|
  00c5c		 |$LN5@MidiData|

; 354  :         }
; 355  :         // If dwVelocity is 0, this is really a note off message, so fall through
; 356  : 
; 357  :     case 0x80:  // Note off
; 358  :         Result = NoteOff(dwNote, dwVelocity, dwChannel);

  00c5c	e59d300c	 ldr         r3, [sp, #0xC]
  00c60	e59d2000	 ldr         r2, [sp]
  00c64	e59d1008	 ldr         r1, [sp, #8]
  00c68	e59d002c	 ldr         r0, [sp, #0x2C]
  00c6c	eb000000	 bl          |?NoteOff@CMidiStream@@QAAJIII@Z|
  00c70	e58d001c	 str         r0, [sp, #0x1C]
  00c74	e59d301c	 ldr         r3, [sp, #0x1C]
  00c78	e58d3004	 str         r3, [sp, #4]

; 359  :         break;

  00c7c	ea000009	 b           |$LN8@MidiData|
  00c80		 |$LN4@MidiData|

; 360  : 
; 361  :     case 0xB0:  // Control change
; 362  :         {
; 363  :             switch (dwNote)

  00c80	e59d3008	 ldr         r3, [sp, #8]
  00c84	e353007b	 cmp         r3, #0x7B
  00c88	0a000000	 beq         |$LN1@MidiData|
  00c8c	ea000005	 b           |$LN2@MidiData|
  00c90		 |$LN1@MidiData|

; 364  :             {
; 365  :             case 123:   // turns all notes off
; 366  :                 {
; 367  :                     Result = AllNotesOff(0);

  00c90	e3a01000	 mov         r1, #0
  00c94	e59d002c	 ldr         r0, [sp, #0x2C]
  00c98	eb000000	 bl          |?AllNotesOff@CMidiStream@@QAAJI@Z|
  00c9c	e58d0020	 str         r0, [sp, #0x20]
  00ca0	e59d3020	 ldr         r3, [sp, #0x20]
  00ca4	e58d3004	 str         r3, [sp, #4]
  00ca8		 |$LN2@MidiData|
  00ca8		 |$LN8@MidiData|

; 368  :                     break;
; 369  :                 }
; 370  :             }
; 371  :             break;
; 372  :         }
; 373  :     }
; 374  : 
; 375  :     return Result;

  00ca8	e59d3004	 ldr         r3, [sp, #4]
  00cac	e58d3010	 str         r3, [sp, #0x10]

; 376  : }

  00cb0	e59d0010	 ldr         r0, [sp, #0x10]
  00cb4	e28dd024	 add         sp, sp, #0x24
  00cb8	e89d6000	 ldmia       sp, {sp, lr}
  00cbc	e12fff1e	 bx          lr
  00cc0		 |$M35642|

			 ENDP  ; |?MidiData@CMidiStream@@QAAJI@Z|, CMidiStream::MidiData

	EXPORT	|?FindNote@CMidiStream@@QAAPAVCMidiNote@@II@Z| ; CMidiStream::FindNote
	IMPORT	|?NoteChannel@CMidiNote@@QAAIXZ|	; CMidiNote::NoteChannel
	IMPORT	|?NoteVal@CMidiNote@@QAAIXZ|		; CMidiNote::NoteVal

  00060			 AREA	 |.pdata|, PDATA
|$T35650| DCD	|$LN8@FindNote|
	DCD	0x40002c04
; Function compile flags: /Odtp

  00cc0			 AREA	 |.text|, CODE, ARM

  00cc0		 |?FindNote@CMidiStream@@QAAPAVCMidiNote@@II@Z| PROC ; CMidiStream::FindNote

; 379  : {

  00cc0		 |$LN8@FindNote|
  00cc0	e1a0c00d	 mov         r12, sp
  00cc4	e92d0007	 stmdb       sp!, {r0 - r2}
  00cc8	e92d5000	 stmdb       sp!, {r12, lr}
  00ccc	e24dd014	 sub         sp, sp, #0x14
  00cd0		 |$M35647|

; 380  :     PLIST_ENTRY pListEntry;
; 381  :     CMidiNote *pCNote;
; 382  :     pListEntry = m_NoteList.Flink;

  00cd0	e59d301c	 ldr         r3, [sp, #0x1C]
  00cd4	e2833c06	 add         r3, r3, #6, 24
  00cd8	e283306c	 add         r3, r3, #0x6C
  00cdc	e5933000	 ldr         r3, [r3]
  00ce0	e58d3000	 str         r3, [sp]
  00ce4		 |$LN3@FindNote|

; 383  :     while (pListEntry != &m_NoteList)

  00ce4	e59d301c	 ldr         r3, [sp, #0x1C]
  00ce8	e2833c06	 add         r3, r3, #6, 24
  00cec	e283206c	 add         r2, r3, #0x6C
  00cf0	e59d3000	 ldr         r3, [sp]
  00cf4	e1530002	 cmp         r3, r2
  00cf8	0a000016	 beq         |$LN2@FindNote|

; 384  :     {
; 385  :         // Get a pointer to the stream context
; 386  :         pCNote = CONTAINING_RECORD(pListEntry,CMidiNote,m_Link);

  00cfc	e59d3000	 ldr         r3, [sp]
  00d00	e58d3004	 str         r3, [sp, #4]

; 387  : 
; 388  :         if (pCNote->NoteVal()==dwNote && pCNote->NoteChannel()==dwChannel)

  00d04	e59d0004	 ldr         r0, [sp, #4]
  00d08	eb000000	 bl          |?NoteVal@CMidiNote@@QAAIXZ|
  00d0c	e58d000c	 str         r0, [sp, #0xC]
  00d10	e59d200c	 ldr         r2, [sp, #0xC]
  00d14	e59d3020	 ldr         r3, [sp, #0x20]
  00d18	e1520003	 cmp         r2, r3
  00d1c	1a000009	 bne         |$LN1@FindNote|
  00d20	e59d0004	 ldr         r0, [sp, #4]
  00d24	eb000000	 bl          |?NoteChannel@CMidiNote@@QAAIXZ|
  00d28	e58d0010	 str         r0, [sp, #0x10]
  00d2c	e59d2010	 ldr         r2, [sp, #0x10]
  00d30	e59d3024	 ldr         r3, [sp, #0x24]
  00d34	e1520003	 cmp         r2, r3
  00d38	1a000002	 bne         |$LN1@FindNote|

; 389  :         {
; 390  :             return pCNote;

  00d3c	e59d3004	 ldr         r3, [sp, #4]
  00d40	e58d3008	 str         r3, [sp, #8]
  00d44	ea000005	 b           |$LN4@FindNote|
  00d48		 |$LN1@FindNote|

; 391  :         }
; 392  : 
; 393  :         pListEntry = pListEntry->Flink;

  00d48	e59d3000	 ldr         r3, [sp]
  00d4c	e5933000	 ldr         r3, [r3]
  00d50	e58d3000	 str         r3, [sp]

; 394  :     }

  00d54	eaffffe2	 b           |$LN3@FindNote|
  00d58		 |$LN2@FindNote|

; 395  :     return NULL;

  00d58	e3a03000	 mov         r3, #0
  00d5c	e58d3008	 str         r3, [sp, #8]
  00d60		 |$LN4@FindNote|

; 396  : }

  00d60	e59d0008	 ldr         r0, [sp, #8]
  00d64	e28dd014	 add         sp, sp, #0x14
  00d68	e89d6000	 ldmia       sp, {sp, lr}
  00d6c	e12fff1e	 bx          lr
  00d70		 |$M35648|

			 ENDP  ; |?FindNote@CMidiStream@@QAAPAVCMidiNote@@II@Z|, CMidiStream::FindNote

	EXPORT	|?NoteMoveToNoteList@CMidiStream@@QAAXPAVCMidiNote@@@Z| ; CMidiStream::NoteMoveToNoteList
	IMPORT	|?NoteOn@CMidiNote@@QAAJPAVCMidiStream@@III@Z| ; CMidiNote::NoteOn
	IMPORT	|?AddRef@StreamContext@@QAAJXZ|		; StreamContext::AddRef
	IMPORT	|?SetVelocity@CMidiNote@@QAAXI@Z|	; CMidiNote::SetVelocity

  00068			 AREA	 |.pdata|, PDATA
|$T35657| DCD	|$LN9@NoteOn|
	DCD	0x40003b04
; Function compile flags: /Odtp

  00d70			 AREA	 |.text|, CODE, ARM

  00d70		 |?NoteOn@CMidiStream@@QAAJIII@Z| PROC	; CMidiStream::NoteOn

; 400  : {

  00d70		 |$LN9@NoteOn|
  00d70	e1a0c00d	 mov         r12, sp
  00d74	e92d000f	 stmdb       sp!, {r0 - r3}
  00d78	e92d5000	 stmdb       sp!, {r12, lr}
  00d7c	e24dd018	 sub         sp, sp, #0x18
  00d80		 |$M35654|

; 401  :     CMidiNote *pCNote=NULL;

  00d80	e3a03000	 mov         r3, #0
  00d84	e58d3008	 str         r3, [sp, #8]

; 402  : 
; 403  :     PLIST_ENTRY pListEntry;
; 404  : 
; 405  :     // First try to find the same note already being played
; 406  :     pCNote = FindNote(dwNote, dwChannel);

  00d88	e59d202c	 ldr         r2, [sp, #0x2C]
  00d8c	e59d1024	 ldr         r1, [sp, #0x24]
  00d90	e59d0020	 ldr         r0, [sp, #0x20]
  00d94	eb000000	 bl          |?FindNote@CMidiStream@@QAAPAVCMidiNote@@II@Z|
  00d98	e58d0014	 str         r0, [sp, #0x14]
  00d9c	e59d3014	 ldr         r3, [sp, #0x14]
  00da0	e58d3008	 str         r3, [sp, #8]

; 407  :     if (pCNote)

  00da4	e59d3008	 ldr         r3, [sp, #8]
  00da8	e3530000	 cmp         r3, #0
  00dac	0a000003	 beq         |$LN4@NoteOn|

; 408  :     {
; 409  :         // If so, just set its velocity to the new velocity
; 410  :         // This allows us to change volume while a note is being
; 411  :         // played without any chance of glitching
; 412  :         pCNote->SetVelocity(dwVelocity);

  00db0	e59d1028	 ldr         r1, [sp, #0x28]
  00db4	e59d0008	 ldr         r0, [sp, #8]
  00db8	eb000000	 bl          |?SetVelocity@CMidiNote@@QAAXI@Z|

; 413  :     }
; 414  :     else

  00dbc	ea00001d	 b           |$LN3@NoteOn|
  00dc0		 |$LN4@NoteOn|

; 415  :     {
; 416  :         // Try to allocate a note from the free list
; 417  :         pListEntry = m_FreeList.Flink;

  00dc0	e59d3020	 ldr         r3, [sp, #0x20]
  00dc4	e2833c06	 add         r3, r3, #6, 24
  00dc8	e2833074	 add         r3, r3, #0x74
  00dcc	e5933000	 ldr         r3, [r3]
  00dd0	e58d3004	 str         r3, [sp, #4]

; 418  :         if (pListEntry != &m_FreeList)

  00dd4	e59d3020	 ldr         r3, [sp, #0x20]
  00dd8	e2833c06	 add         r3, r3, #6, 24
  00ddc	e2832074	 add         r2, r3, #0x74
  00de0	e59d3004	 ldr         r3, [sp, #4]
  00de4	e1530002	 cmp         r3, r2
  00de8	0a000004	 beq         |$LN2@NoteOn|

; 419  :         {
; 420  :             pCNote = CONTAINING_RECORD(pListEntry,CMidiNote,m_Link);

  00dec	e59d3004	 ldr         r3, [sp, #4]
  00df0	e58d3008	 str         r3, [sp, #8]

; 421  : 
; 422  :             // If we got a note from the free list, do an AddRef on this stream context
; 423  :             AddRef();

  00df4	e59d0020	 ldr         r0, [sp, #0x20]
  00df8	eb000000	 bl          |?AddRef@StreamContext@@QAAJXZ|

; 424  :         }
; 425  :         else

  00dfc	ea000006	 b           |$LN1@NoteOn|
  00e00		 |$LN2@NoteOn|

; 426  :         {
; 427  :             // Note: if we every support multiple instruments, here we should try to steal the oldest
; 428  :             // note with the same channel before just trying to steal the oldest note.
; 429  : 
; 430  :             // Steal the oldest note (which is the note at the head of the note list)
; 431  :             // Note: This should _never_ fail, since there must be a note on one of the lists!
; 432  :             pListEntry = m_NoteList.Flink;

  00e00	e59d3020	 ldr         r3, [sp, #0x20]
  00e04	e2833c06	 add         r3, r3, #6, 24
  00e08	e283306c	 add         r3, r3, #0x6C
  00e0c	e5933000	 ldr         r3, [r3]
  00e10	e58d3004	 str         r3, [sp, #4]

; 433  :             pCNote = CONTAINING_RECORD(pListEntry,CMidiNote,m_Link);

  00e14	e59d3004	 ldr         r3, [sp, #4]
  00e18	e58d3008	 str         r3, [sp, #8]
  00e1c		 |$LN1@NoteOn|

; 434  :         }
; 435  : 
; 436  :         pCNote->NoteOn(this,dwNote,dwVelocity,dwChannel);

  00e1c	e59d302c	 ldr         r3, [sp, #0x2C]
  00e20	e58d3000	 str         r3, [sp]
  00e24	e59d3028	 ldr         r3, [sp, #0x28]
  00e28	e59d2024	 ldr         r2, [sp, #0x24]
  00e2c	e59d1020	 ldr         r1, [sp, #0x20]
  00e30	e59d0008	 ldr         r0, [sp, #8]
  00e34	eb000000	 bl          |?NoteOn@CMidiNote@@QAAJPAVCMidiStream@@III@Z|
  00e38		 |$LN3@NoteOn|

; 437  :     }
; 438  : 
; 439  :     // Move the note from whichever list it was on to the note list at the end.
; 440  :     // This ensures that if we reused an existing note, its age gets reset.
; 441  :     NoteMoveToNoteList(pCNote);

  00e38	e59d1008	 ldr         r1, [sp, #8]
  00e3c	e59d0020	 ldr         r0, [sp, #0x20]
  00e40	eb000000	 bl          |?NoteMoveToNoteList@CMidiStream@@QAAXPAVCMidiNote@@@Z|

; 442  : 
; 443  :     return S_OK;

  00e44	e3a03000	 mov         r3, #0
  00e48	e58d3010	 str         r3, [sp, #0x10]

; 444  : }

  00e4c	e59d0010	 ldr         r0, [sp, #0x10]
  00e50	e28dd018	 add         sp, sp, #0x18
  00e54	e89d6000	 ldmia       sp, {sp, lr}
  00e58	e12fff1e	 bx          lr
  00e5c		 |$M35655|

			 ENDP  ; |?NoteOn@CMidiStream@@QAAJIII@Z|, CMidiStream::NoteOn

	IMPORT	|?NoteOff@CMidiNote@@QAAJI@Z|		; CMidiNote::NoteOff

  00070			 AREA	 |.pdata|, PDATA
|$T35663| DCD	|$LN6@NoteOff|
	DCD	0x40001704
; Function compile flags: /Odtp

  00e5c			 AREA	 |.text|, CODE, ARM

  00e5c		 |?NoteOff@CMidiStream@@QAAJIII@Z| PROC	; CMidiStream::NoteOff

; 448  : {

  00e5c		 |$LN6@NoteOff|
  00e5c	e1a0c00d	 mov         r12, sp
  00e60	e92d000f	 stmdb       sp!, {r0 - r3}
  00e64	e92d5000	 stmdb       sp!, {r12, lr}
  00e68	e24dd00c	 sub         sp, sp, #0xC
  00e6c		 |$M35660|

; 449  :     CMidiNote *pCNote = FindNote(dwNote, dwChannel);

  00e6c	e59d2020	 ldr         r2, [sp, #0x20]
  00e70	e59d1018	 ldr         r1, [sp, #0x18]
  00e74	e59d0014	 ldr         r0, [sp, #0x14]
  00e78	eb000000	 bl          |?FindNote@CMidiStream@@QAAPAVCMidiNote@@II@Z|
  00e7c	e58d0008	 str         r0, [sp, #8]
  00e80	e59d3008	 ldr         r3, [sp, #8]
  00e84	e58d3000	 str         r3, [sp]

; 450  :     if (pCNote)

  00e88	e59d3000	 ldr         r3, [sp]
  00e8c	e3530000	 cmp         r3, #0
  00e90	0a000002	 beq         |$LN1@NoteOff|

; 451  :     {
; 452  :         pCNote->NoteOff(dwVelocity);

  00e94	e59d101c	 ldr         r1, [sp, #0x1C]
  00e98	e59d0000	 ldr         r0, [sp]
  00e9c	eb000000	 bl          |?NoteOff@CMidiNote@@QAAJI@Z|
  00ea0		 |$LN1@NoteOff|

; 453  :     }
; 454  : 
; 455  :     return S_OK;

  00ea0	e3a03000	 mov         r3, #0
  00ea4	e58d3004	 str         r3, [sp, #4]

; 456  : }

  00ea8	e59d0004	 ldr         r0, [sp, #4]
  00eac	e28dd00c	 add         sp, sp, #0xC
  00eb0	e89d6000	 ldmia       sp, {sp, lr}
  00eb4	e12fff1e	 bx          lr
  00eb8		 |$M35661|

			 ENDP  ; |?NoteOff@CMidiStream@@QAAJIII@Z|, CMidiStream::NoteOff


  00078			 AREA	 |.pdata|, PDATA
|$T35669| DCD	|$LN7@AllNotesOf|
	DCD	0x40001e04
; Function compile flags: /Odtp

  00eb8			 AREA	 |.text|, CODE, ARM

  00eb8		 |?AllNotesOff@CMidiStream@@QAAJI@Z| PROC ; CMidiStream::AllNotesOff

; 459  : {

  00eb8		 |$LN7@AllNotesOf|
  00eb8	e1a0c00d	 mov         r12, sp
  00ebc	e92d0003	 stmdb       sp!, {r0, r1}
  00ec0	e92d5000	 stmdb       sp!, {r12, lr}
  00ec4	e24dd00c	 sub         sp, sp, #0xC
  00ec8		 |$M35666|

; 460  :     PLIST_ENTRY pListEntry;
; 461  :     CMidiNote *pCNote;
; 462  :     pListEntry = m_NoteList.Flink;

  00ec8	e59d3014	 ldr         r3, [sp, #0x14]
  00ecc	e2833c06	 add         r3, r3, #6, 24
  00ed0	e283306c	 add         r3, r3, #0x6C
  00ed4	e5933000	 ldr         r3, [r3]
  00ed8	e58d3000	 str         r3, [sp]
  00edc		 |$LN2@AllNotesOf|

; 463  :     while (pListEntry != &m_NoteList)

  00edc	e59d3014	 ldr         r3, [sp, #0x14]
  00ee0	e2833c06	 add         r3, r3, #6, 24
  00ee4	e283206c	 add         r2, r3, #0x6C
  00ee8	e59d3000	 ldr         r3, [sp]
  00eec	e1530002	 cmp         r3, r2
  00ef0	0a000008	 beq         |$LN1@AllNotesOf|

; 464  :     {
; 465  :         // Get the note
; 466  :         pCNote = CONTAINING_RECORD(pListEntry,CMidiNote,m_Link);

  00ef4	e59d3000	 ldr         r3, [sp]
  00ef8	e58d3004	 str         r3, [sp, #4]

; 467  : 
; 468  :         // Get the next link, since NoteOff may remove the note from the queue depeding on the implementation
; 469  :         pListEntry = pListEntry->Flink;

  00efc	e59d3000	 ldr         r3, [sp]
  00f00	e5933000	 ldr         r3, [r3]
  00f04	e58d3000	 str         r3, [sp]

; 470  : 
; 471  :         // Turn the note off
; 472  :         pCNote->NoteOff(dwVelocity);

  00f08	e59d1018	 ldr         r1, [sp, #0x18]
  00f0c	e59d0004	 ldr         r0, [sp, #4]
  00f10	eb000000	 bl          |?NoteOff@CMidiNote@@QAAJI@Z|

; 473  :     }

  00f14	eafffff0	 b           |$LN2@AllNotesOf|
  00f18		 |$LN1@AllNotesOf|

; 474  :     return S_OK;

  00f18	e3a03000	 mov         r3, #0
  00f1c	e58d3008	 str         r3, [sp, #8]

; 475  : }

  00f20	e59d0008	 ldr         r0, [sp, #8]
  00f24	e28dd00c	 add         sp, sp, #0xC
  00f28	e89d6000	 ldmia       sp, {sp, lr}
  00f2c	e12fff1e	 bx          lr
  00f30		 |$M35667|

			 ENDP  ; |?AllNotesOff@CMidiStream@@QAAJI@Z|, CMidiStream::AllNotesOff

	EXPORT	|?ResetBaseInfo@CMidiStream@@UAAXXZ|	; CMidiStream::ResetBaseInfo
	IMPORT	|?ResetBaseInfo@CMidiNote@@QAAXXZ|	; CMidiNote::ResetBaseInfo
	IMPORT	|?GetBaseSampleRateInverse@DeviceContext@@QAAKXZ| ; DeviceContext::GetBaseSampleRateInverse

  00080			 AREA	 |.pdata|, PDATA
|$T35674| DCD	|$LN11@ResetBaseI|
	DCD	0x40006004
; Function compile flags: /Odtp

  00f30			 AREA	 |.text|, CODE, ARM

  00f30		 |?ResetBaseInfo@CMidiStream@@UAAXXZ| PROC ; CMidiStream::ResetBaseInfo

; 545  : {

  00f30		 |$LN11@ResetBaseI|
  00f30	e1a0c00d	 mov         r12, sp
  00f34	e92d0001	 stmdb       sp!, {r0}
  00f38	e92d5000	 stmdb       sp!, {r12, lr}
  00f3c	e24dd028	 sub         sp, sp, #0x28
  00f40		 |$M35671|

; 546  :     // If the HW sample rate has changed since the last time we updated the table, recalc now
; 547  :     // If multiple streams are active, only the first one in here will regenerate the table
; 548  :     // This assumes the global lock is taken.
; 549  :     UINT32 InverseSampleRate = m_pDeviceContext->GetBaseSampleRateInverse();

  00f40	e59d3030	 ldr         r3, [sp, #0x30]
  00f44	e2833050	 add         r3, r3, #0x50
  00f48	e5930000	 ldr         r0, [r3]
  00f4c	eb000000	 bl          |?GetBaseSampleRateInverse@DeviceContext@@QAAKXZ|
  00f50	e58d0018	 str         r0, [sp, #0x18]
  00f54	e59d3018	 ldr         r3, [sp, #0x18]
  00f58	e58d3004	 str         r3, [sp, #4]

; 550  :     if (ms_PitchTableInverseSampleRate!=InverseSampleRate)

  00f5c	e59f3148	 ldr         r3, [pc, #0x148]
  00f60	e5932000	 ldr         r2, [r3]
  00f64	e59d3004	 ldr         r3, [sp, #4]
  00f68	e1520003	 cmp         r2, r3
  00f6c	0a000034	 beq         |$LN6@ResetBaseI|

; 551  :     {
; 552  :         ms_PitchTableInverseSampleRate=InverseSampleRate;

  00f70	e59d2004	 ldr         r2, [sp, #4]
  00f74	e59f3130	 ldr         r3, [pc, #0x130]
  00f78	e5832000	 str         r2, [r3]

; 553  : 
; 554  :         for (int i=0;i<12;i++)

  00f7c	e3a03000	 mov         r3, #0
  00f80	e58d300c	 str         r3, [sp, #0xC]
  00f84	ea000002	 b           |$LN5@ResetBaseI|
  00f88		 |$LN4@ResetBaseI|
  00f88	e59d300c	 ldr         r3, [sp, #0xC]
  00f8c	e2833001	 add         r3, r3, #1
  00f90	e58d300c	 str         r3, [sp, #0xC]
  00f94		 |$LN5@ResetBaseI|
  00f94	e59d300c	 ldr         r3, [sp, #0xC]
  00f98	e353000c	 cmp         r3, #0xC
  00f9c	aa000028	 bge         |$LN3@ResetBaseI|

; 555  :         {
; 556  :             UINT64 Tmp;
; 557  :             Tmp = ms_BasePitchTable[i];

  00fa0	e59d100c	 ldr         r1, [sp, #0xC]
  00fa4	e3a03004	 mov         r3, #4
  00fa8	e0020391	 mul         r2, r1, r3
  00fac	e59f30f4	 ldr         r3, [pc, #0xF4]
  00fb0	e0833002	 add         r3, r3, r2
  00fb4	e5933000	 ldr         r3, [r3]
  00fb8	e58d3010	 str         r3, [sp, #0x10]
  00fbc	e3a03000	 mov         r3, #0
  00fc0	e58d3014	 str         r3, [sp, #0x14]

; 558  :             Tmp *= InverseSampleRate;

  00fc4	e59d1004	 ldr         r1, [sp, #4]
  00fc8	e59d3010	 ldr         r3, [sp, #0x10]
  00fcc	e59d2014	 ldr         r2, [sp, #0x14]
  00fd0	e58d301c	 str         r3, [sp, #0x1C]
  00fd4	e58d1020	 str         r1, [sp, #0x20]
  00fd8	e59d3020	 ldr         r3, [sp, #0x20]
  00fdc	e0000392	 mul         r0, r2, r3
  00fe0	e59d101c	 ldr         r1, [sp, #0x1C]
  00fe4	e59d3020	 ldr         r3, [sp, #0x20]
  00fe8	e0832391	 umull       r2, r3, r1, r3
  00fec	e0803003	 add         r3, r0, r3
  00ff0	e58d2010	 str         r2, [sp, #0x10]
  00ff4	e58d3014	 str         r3, [sp, #0x14]

; 559  :             Tmp >>= 16;

  00ff8	e59d2010	 ldr         r2, [sp, #0x10]
  00ffc	e59d3014	 ldr         r3, [sp, #0x14]
  01000	e58d3024	 str         r3, [sp, #0x24]
  01004	e1a02822	 mov         r2, r2, lsr #16
  01008	e59d3024	 ldr         r3, [sp, #0x24]
  0100c	e1a03803	 mov         r3, r3, lsl #16
  01010	e1832002	 orr         r2, r3, r2
  01014	e59d3024	 ldr         r3, [sp, #0x24]
  01018	e1a03823	 mov         r3, r3, lsr #16
  0101c	e58d2010	 str         r2, [sp, #0x10]
  01020	e58d3014	 str         r3, [sp, #0x14]

; 560  :             ms_PitchTable[i] = (DWORD)(Tmp);

  01024	e59d0010	 ldr         r0, [sp, #0x10]
  01028	e59d100c	 ldr         r1, [sp, #0xC]
  0102c	e3a03004	 mov         r3, #4
  01030	e0020391	 mul         r2, r1, r3
  01034	e59f3068	 ldr         r3, [pc, #0x68]
  01038	e0833002	 add         r3, r3, r2
  0103c	e5830000	 str         r0, [r3]

; 561  :         }

  01040	eaffffd0	 b           |$LN4@ResetBaseI|
  01044		 |$LN3@ResetBaseI|
  01044		 |$LN6@ResetBaseI|

; 562  :     }
; 563  : 
; 564  : 	// Update the tempo of this stream, which depends on the hw sample rate to keep time
; 565  : 	UpdateTempo();

  01044	e59d0030	 ldr         r0, [sp, #0x30]
  01048	eb000000	 bl          |?UpdateTempo@CMidiStream@@QAAJXZ|

; 566  : 
; 567  :     // Iterate through the active note list and force each note to recache it's params
; 568  :     PLIST_ENTRY pListEntry;
; 569  :     CMidiNote *pCNote;
; 570  :     pListEntry = m_NoteList.Flink;

  0104c	e59d3030	 ldr         r3, [sp, #0x30]
  01050	e2833c06	 add         r3, r3, #6, 24
  01054	e283306c	 add         r3, r3, #0x6C
  01058	e5933000	 ldr         r3, [r3]
  0105c	e58d3000	 str         r3, [sp]
  01060		 |$LN2@ResetBaseI|

; 571  :     while (pListEntry != &m_NoteList)

  01060	e59d3030	 ldr         r3, [sp, #0x30]
  01064	e2833c06	 add         r3, r3, #6, 24
  01068	e283206c	 add         r2, r3, #0x6C
  0106c	e59d3000	 ldr         r3, [sp]
  01070	e1530002	 cmp         r3, r2
  01074	0a000007	 beq         |$LN1@ResetBaseI|

; 572  :     {
; 573  :         // Get a pointer to the stream context
; 574  :         pCNote = CONTAINING_RECORD(pListEntry,CMidiNote,m_Link);

  01078	e59d3000	 ldr         r3, [sp]
  0107c	e58d3008	 str         r3, [sp, #8]

; 575  :         pCNote->ResetBaseInfo();

  01080	e59d0008	 ldr         r0, [sp, #8]
  01084	eb000000	 bl          |?ResetBaseInfo@CMidiNote@@QAAXXZ|

; 576  :         pListEntry = pListEntry->Flink;

  01088	e59d3000	 ldr         r3, [sp]
  0108c	e5933000	 ldr         r3, [r3]
  01090	e58d3000	 str         r3, [sp]

; 577  :     }

  01094	eafffff1	 b           |$LN2@ResetBaseI|
  01098		 |$LN1@ResetBaseI|

; 578  : }

  01098	e28dd028	 add         sp, sp, #0x28
  0109c	e89d6000	 ldmia       sp, {sp, lr}
  010a0	e12fff1e	 bx          lr
  010a4		 |$LN12@ResetBaseI|
  010a4		 |$LN13@ResetBaseI|
  010a4	00000000	 DCD         |?ms_PitchTable@CMidiStream@@0PAKA|
  010a8		 |$LN14@ResetBaseI|
  010a8	00000000	 DCD         |?ms_BasePitchTable@CMidiStream@@0QBKB|
  010ac		 |$LN15@ResetBaseI|
  010ac	00000000	 DCD         |?ms_PitchTableInverseSampleRate@CMidiStream@@0KA|
  010b0		 |$M35672|

			 ENDP  ; |?ResetBaseInfo@CMidiStream@@UAAXXZ|, CMidiStream::ResetBaseInfo

	EXPORT	|?GetDeltaFromNote@CMidiStream@@QAAKK@Z| ; CMidiStream::GetDeltaFromNote

  00088			 AREA	 |.pdata|, PDATA
|$T35684| DCD	|$LN8@GetDeltaFr|
	DCD	0x40002904
; Function compile flags: /Odtp

  010b0			 AREA	 |.text|, CODE, ARM

  010b0		 |?GetDeltaFromNote@CMidiStream@@QAAKK@Z| PROC ; CMidiStream::GetDeltaFromNote

; 582  : {

  010b0		 |$LN8@GetDeltaFr|
  010b0	e1a0c00d	 mov         r12, sp
  010b4	e92d0003	 stmdb       sp!, {r0, r1}
  010b8	e92d5000	 stmdb       sp!, {r12, lr}
  010bc	e24dd00c	 sub         sp, sp, #0xC
  010c0		 |$M35681|

; 583  :     DWORD Delta;
; 584  : 
; 585  :     // Load the delta from the pitch table (see the description above)
; 586  :     Delta = ms_PitchTable[ Note % 12 ] ;

  010c0	e59d1018	 ldr         r1, [sp, #0x18]
  010c4	e3a0000c	 mov         r0, #0xC
  010c8	eb000000	 bl          __rt_udiv
  010cc	e3a03004	 mov         r3, #4
  010d0	e0020391	 mul         r2, r1, r3
  010d4	e59f3074	 ldr         r3, [pc, #0x74]
  010d8	e0833002	 add         r3, r3, r2
  010dc	e5933000	 ldr         r3, [r3]
  010e0	e58d3004	 str         r3, [sp, #4]

; 587  : 
; 588  :     // Adjust for the correct octave
; 589  :     int Octave = ((int)(Note/12)) - 5;

  010e4	e59d1018	 ldr         r1, [sp, #0x18]
  010e8	e3a0000c	 mov         r0, #0xC
  010ec	eb000000	 bl          __rt_udiv
  010f0	e2403005	 sub         r3, r0, #5
  010f4	e58d3000	 str         r3, [sp]

; 590  :     if (Octave>0)

  010f8	e59d3000	 ldr         r3, [sp]
  010fc	e3530000	 cmp         r3, #0
  01100	da000004	 ble         |$LN3@GetDeltaFr|

; 591  :     {
; 592  :         Delta <<= Octave;

  01104	e59d2004	 ldr         r2, [sp, #4]
  01108	e59d3000	 ldr         r3, [sp]
  0110c	e1a03312	 mov         r3, r2, lsl r3
  01110	e58d3004	 str         r3, [sp, #4]
  01114	ea000007	 b           |$LN2@GetDeltaFr|
  01118		 |$LN3@GetDeltaFr|

; 593  :     }
; 594  :     else if (Octave<0)

  01118	e59d3000	 ldr         r3, [sp]
  0111c	e3530000	 cmp         r3, #0
  01120	aa000004	 bge         |$LN1@GetDeltaFr|

; 595  :     {
; 596  :         Delta >>= -Octave;

  01124	e59d3000	 ldr         r3, [sp]
  01128	e2632000	 rsb         r2, r3, #0
  0112c	e59d3004	 ldr         r3, [sp, #4]
  01130	e1a03233	 mov         r3, r3, lsr r2
  01134	e58d3004	 str         r3, [sp, #4]
  01138		 |$LN1@GetDeltaFr|
  01138		 |$LN2@GetDeltaFr|

; 597  :     }
; 598  : 
; 599  :     return Delta;

  01138	e59d3004	 ldr         r3, [sp, #4]
  0113c	e58d3008	 str         r3, [sp, #8]

; 600  : }

  01140	e59d0008	 ldr         r0, [sp, #8]
  01144	e28dd00c	 add         sp, sp, #0xC
  01148	e89d6000	 ldmia       sp, {sp, lr}
  0114c	e12fff1e	 bx          lr
  01150		 |$LN9@GetDeltaFr|
  01150		 |$LN10@GetDeltaFr|
  01150	00000000	 DCD         |?ms_PitchTable@CMidiStream@@0PAKA|
  01154		 |$M35682|

			 ENDP  ; |?GetDeltaFromNote@CMidiStream@@QAAKK@Z|, CMidiStream::GetDeltaFromNote

	EXPORT	|?GetDeltaFromFreq@CMidiStream@@QAAKK@Z| ; CMidiStream::GetDeltaFromFreq

  00090			 AREA	 |.pdata|, PDATA
|$T35692| DCD	|$LN5@GetDeltaFr@2|
	DCD	0x40001304
; Function compile flags: /Odtp

  01154			 AREA	 |.text|, CODE, ARM

  01154		 |?GetDeltaFromFreq@CMidiStream@@QAAKK@Z| PROC ; CMidiStream::GetDeltaFromFreq

; 604  : {

  01154		 |$LN5@GetDeltaFr@2|
  01154	e1a0c00d	 mov         r12, sp
  01158	e92d0003	 stmdb       sp!, {r0, r1}
  0115c	e92d5000	 stmdb       sp!, {r12, lr}
  01160	e24dd00c	 sub         sp, sp, #0xC
  01164		 |$M35689|

; 605  :     UINT32 InverseSampleRate = m_pDeviceContext->GetBaseSampleRateInverse();

  01164	e59d3014	 ldr         r3, [sp, #0x14]
  01168	e2833050	 add         r3, r3, #0x50
  0116c	e5930000	 ldr         r0, [r3]
  01170	eb000000	 bl          |?GetBaseSampleRateInverse@DeviceContext@@QAAKXZ|
  01174	e58d0008	 str         r0, [sp, #8]
  01178	e59d3008	 ldr         r3, [sp, #8]
  0117c	e58d3000	 str         r3, [sp]

; 606  : 
; 607  :     // Assuming Freq is a 32(.0) bit value and BaseSampleRate is a 0.32-bit value,
; 608  :     // multiplying them together yields a 32.32 bit value. We only care about the fractional
; 609  :     // part, so we can get away with just 32-bit math (and just throw away the upper 32 bits).
; 610  :     return (Freq * InverseSampleRate);

  01180	e59d2018	 ldr         r2, [sp, #0x18]
  01184	e59d3000	 ldr         r3, [sp]
  01188	e0030392	 mul         r3, r2, r3
  0118c	e58d3004	 str         r3, [sp, #4]

; 611  : }

  01190	e59d0004	 ldr         r0, [sp, #4]
  01194	e28dd00c	 add         sp, sp, #0xC
  01198	e89d6000	 ldmia       sp, {sp, lr}
  0119c	e12fff1e	 bx          lr
  011a0		 |$M35690|

			 ENDP  ; |?GetDeltaFromFreq@CMidiStream@@QAAKK@Z|, CMidiStream::GetDeltaFromFreq

	EXPORT	|?NoteMoveToFreeList@CMidiStream@@QAAXPAVCMidiNote@@@Z| ; CMidiStream::NoteMoveToFreeList

  00098			 AREA	 |.pdata|, PDATA
|$T35697| DCD	|$LN11@NoteMoveTo|
	DCD	0x40002e04
; Function compile flags: /Odtp

  011a0			 AREA	 |.text|, CODE, ARM

  011a0		 |?NoteMoveToFreeList@CMidiStream@@QAAXPAVCMidiNote@@@Z| PROC ; CMidiStream::NoteMoveToFreeList

; 614  : {

  011a0		 |$LN11@NoteMoveTo|
  011a0	e1a0c00d	 mov         r12, sp
  011a4	e92d0003	 stmdb       sp!, {r0, r1}
  011a8	e92d5000	 stmdb       sp!, {r12, lr}
  011ac	e24dd010	 sub         sp, sp, #0x10
  011b0		 |$M35694|

; 615  :     PLIST_ENTRY pListEntry = &pCMidiNote->m_Link;

  011b0	e59d301c	 ldr         r3, [sp, #0x1C]
  011b4	e58d3000	 str         r3, [sp]

; 616  :     RemoveEntryList(pListEntry);

  011b8	e59d3000	 ldr         r3, [sp]
  011bc	e58d3004	 str         r3, [sp, #4]
  011c0	e59d3004	 ldr         r3, [sp, #4]
  011c4	e2833004	 add         r3, r3, #4
  011c8	e5932000	 ldr         r2, [r3]
  011cc	e59d3004	 ldr         r3, [sp, #4]
  011d0	e5933000	 ldr         r3, [r3]
  011d4	e5823000	 str         r3, [r2]
  011d8	e59d3004	 ldr         r3, [sp, #4]
  011dc	e2831004	 add         r1, r3, #4
  011e0	e59d3004	 ldr         r3, [sp, #4]
  011e4	e5933000	 ldr         r3, [r3]
  011e8	e2832004	 add         r2, r3, #4
  011ec	e5913000	 ldr         r3, [r1]
  011f0	e5823000	 str         r3, [r2]

; 617  :     InsertTailList(&m_FreeList,pListEntry);

  011f4	e59d3018	 ldr         r3, [sp, #0x18]
  011f8	e2833c06	 add         r3, r3, #6, 24
  011fc	e2833074	 add         r3, r3, #0x74
  01200	e58d300c	 str         r3, [sp, #0xC]
  01204	e59d300c	 ldr         r3, [sp, #0xC]
  01208	e2833004	 add         r3, r3, #4
  0120c	e5933000	 ldr         r3, [r3]
  01210	e58d3008	 str         r3, [sp, #8]
  01214	e59d200c	 ldr         r2, [sp, #0xC]
  01218	e59d3000	 ldr         r3, [sp]
  0121c	e5832000	 str         r2, [r3]
  01220	e59d3000	 ldr         r3, [sp]
  01224	e2832004	 add         r2, r3, #4
  01228	e59d3008	 ldr         r3, [sp, #8]
  0122c	e5823000	 str         r3, [r2]
  01230	e59d2000	 ldr         r2, [sp]
  01234	e59d3008	 ldr         r3, [sp, #8]
  01238	e5832000	 str         r2, [r3]
  0123c	e59d300c	 ldr         r3, [sp, #0xC]
  01240	e2832004	 add         r2, r3, #4
  01244	e59d3000	 ldr         r3, [sp]
  01248	e5823000	 str         r3, [r2]

; 618  : }

  0124c	e28dd010	 add         sp, sp, #0x10
  01250	e89d6000	 ldmia       sp, {sp, lr}
  01254	e12fff1e	 bx          lr
  01258		 |$M35695|

			 ENDP  ; |?NoteMoveToFreeList@CMidiStream@@QAAXPAVCMidiNote@@@Z|, CMidiStream::NoteMoveToFreeList


  000a0			 AREA	 |.pdata|, PDATA
|$T35702| DCD	|$LN11@NoteMoveTo@2|
	DCD	0x40002e04
; Function compile flags: /Odtp

  01258			 AREA	 |.text|, CODE, ARM

  01258		 |?NoteMoveToNoteList@CMidiStream@@QAAXPAVCMidiNote@@@Z| PROC ; CMidiStream::NoteMoveToNoteList

; 621  : {

  01258		 |$LN11@NoteMoveTo@2|
  01258	e1a0c00d	 mov         r12, sp
  0125c	e92d0003	 stmdb       sp!, {r0, r1}
  01260	e92d5000	 stmdb       sp!, {r12, lr}
  01264	e24dd010	 sub         sp, sp, #0x10
  01268		 |$M35699|

; 622  :     PLIST_ENTRY pListEntry = &pCMidiNote->m_Link;

  01268	e59d301c	 ldr         r3, [sp, #0x1C]
  0126c	e58d3000	 str         r3, [sp]

; 623  :     RemoveEntryList(pListEntry);

  01270	e59d3000	 ldr         r3, [sp]
  01274	e58d3004	 str         r3, [sp, #4]
  01278	e59d3004	 ldr         r3, [sp, #4]
  0127c	e2833004	 add         r3, r3, #4
  01280	e5932000	 ldr         r2, [r3]
  01284	e59d3004	 ldr         r3, [sp, #4]
  01288	e5933000	 ldr         r3, [r3]
  0128c	e5823000	 str         r3, [r2]
  01290	e59d3004	 ldr         r3, [sp, #4]
  01294	e2831004	 add         r1, r3, #4
  01298	e59d3004	 ldr         r3, [sp, #4]
  0129c	e5933000	 ldr         r3, [r3]
  012a0	e2832004	 add         r2, r3, #4
  012a4	e5913000	 ldr         r3, [r1]
  012a8	e5823000	 str         r3, [r2]

; 624  :     InsertTailList(&m_NoteList,pListEntry);

  012ac	e59d3018	 ldr         r3, [sp, #0x18]
  012b0	e2833c06	 add         r3, r3, #6, 24
  012b4	e283306c	 add         r3, r3, #0x6C
  012b8	e58d300c	 str         r3, [sp, #0xC]
  012bc	e59d300c	 ldr         r3, [sp, #0xC]
  012c0	e2833004	 add         r3, r3, #4
  012c4	e5933000	 ldr         r3, [r3]
  012c8	e58d3008	 str         r3, [sp, #8]
  012cc	e59d200c	 ldr         r2, [sp, #0xC]
  012d0	e59d3000	 ldr         r3, [sp]
  012d4	e5832000	 str         r2, [r3]
  012d8	e59d3000	 ldr         r3, [sp]
  012dc	e2832004	 add         r2, r3, #4
  012e0	e59d3008	 ldr         r3, [sp, #8]
  012e4	e5823000	 str         r3, [r2]
  012e8	e59d2000	 ldr         r2, [sp]
  012ec	e59d3008	 ldr         r3, [sp, #8]
  012f0	e5832000	 str         r2, [r3]
  012f4	e59d300c	 ldr         r3, [sp, #0xC]
  012f8	e2832004	 add         r2, r3, #4
  012fc	e59d3000	 ldr         r3, [sp]
  01300	e5823000	 str         r3, [r2]

; 625  : }

  01304	e28dd010	 add         sp, sp, #0x10
  01308	e89d6000	 ldmia       sp, {sp, lr}
  0130c	e12fff1e	 bx          lr
  01310		 |$M35700|

			 ENDP  ; |?NoteMoveToNoteList@CMidiStream@@QAAXPAVCMidiNote@@@Z|, CMidiStream::NoteMoveToNoteList

	EXPORT	|?NoteDone@CMidiStream@@QAAXPAVCMidiNote@@@Z| ; CMidiStream::NoteDone
	IMPORT	|?Release@StreamContext@@QAAJXZ|	; StreamContext::Release

  000a8			 AREA	 |.pdata|, PDATA
|$T35707| DCD	|$LN5@NoteDone|
	DCD	0x40000a03
; Function compile flags: /Odtp

  01310			 AREA	 |.text|, CODE, ARM

  01310		 |?NoteDone@CMidiStream@@QAAXPAVCMidiNote@@@Z| PROC ; CMidiStream::NoteDone

; 628  : {

  01310		 |$LN5@NoteDone|
  01310	e1a0c00d	 mov         r12, sp
  01314	e92d0003	 stmdb       sp!, {r0, r1}
  01318	e92d5000	 stmdb       sp!, {r12, lr}
  0131c		 |$M35704|

; 629  :     NoteMoveToFreeList(pCMidiNote);

  0131c	e59d100c	 ldr         r1, [sp, #0xC]
  01320	e59d0008	 ldr         r0, [sp, #8]
  01324	eb000000	 bl          |?NoteMoveToFreeList@CMidiStream@@QAAXPAVCMidiNote@@@Z|

; 630  :     Release();

  01328	e59d0008	 ldr         r0, [sp, #8]
  0132c	eb000000	 bl          |?Release@StreamContext@@QAAJXZ|

; 631  : }

  01330	e89d6000	 ldmia       sp, {sp, lr}
  01334	e12fff1e	 bx          lr
  01338		 |$M35705|

			 ENDP  ; |?NoteDone@CMidiStream@@QAAXPAVCMidiNote@@@Z|, CMidiStream::NoteDone


  000b0			 AREA	 |.pdata|, PDATA
|$T35713| DCD	|$LN5@DeltaTicks|
	DCD	0x40000f04
; Function compile flags: /Odtp

  01338			 AREA	 |.text|, CODE, ARM

  01338		 |?DeltaTicksToSamples@CMidiStream@@QAAII@Z| PROC ; CMidiStream::DeltaTicksToSamples

; 634  : {

  01338		 |$LN5@DeltaTicks|
  01338	e1a0c00d	 mov         r12, sp
  0133c	e92d0003	 stmdb       sp!, {r0, r1}
  01340	e92d5000	 stmdb       sp!, {r12, lr}
  01344	e24dd004	 sub         sp, sp, #4
  01348		 |$M35710|

; 635  :     return (DeltaTicks * m_SamplesPerTick);

  01348	e59d300c	 ldr         r3, [sp, #0xC]
  0134c	e2833c06	 add         r3, r3, #6, 24
  01350	e283308c	 add         r3, r3, #0x8C
  01354	e59d2010	 ldr         r2, [sp, #0x10]
  01358	e5933000	 ldr         r3, [r3]
  0135c	e0030392	 mul         r3, r2, r3
  01360	e58d3000	 str         r3, [sp]

; 636  : }

  01364	e59d0000	 ldr         r0, [sp]
  01368	e28dd004	 add         sp, sp, #4
  0136c	e89d6000	 ldmia       sp, {sp, lr}
  01370	e12fff1e	 bx          lr
  01374		 |$M35711|

			 ENDP  ; |?DeltaTicksToSamples@CMidiStream@@QAAII@Z|, CMidiStream::DeltaTicksToSamples

	END
