; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\WAVEDEV2\input.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|?Open@InputStreamContext@@UAAKPAVDeviceContext@@PAUwaveopendesc_tag@@K@Z| ; InputStreamContext::Open
	IMPORT	|?Open@WaveStreamContext@@UAAKPAVDeviceContext@@PAUwaveopendesc_tag@@K@Z| ; WaveStreamContext::Open

  00000			 AREA	 |.pdata|, PDATA
|$T35326| DCD	|$LN5@Open|
	DCD	0x40001904
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\wavedev2\input.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Open@InputStreamContext@@UAAKPAVDeviceContext@@PAUwaveopendesc_tag@@K@Z| PROC ; InputStreamContext::Open

; 25   : {

  00000		 |$LN5@Open|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d000f	 stmdb       sp!, {r0 - r3}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd00c	 sub         sp, sp, #0xC
  00010		 |$M35323|

; 26   :     DWORD mmRet;
; 27   : 
; 28   :     mmRet = WaveStreamContext::Open(pDeviceContext, lpWOD, dwFlags);

  00010	e59d3020	 ldr         r3, [sp, #0x20]
  00014	e59d201c	 ldr         r2, [sp, #0x1C]
  00018	e59d1018	 ldr         r1, [sp, #0x18]
  0001c	e59d0014	 ldr         r0, [sp, #0x14]
  00020	eb000000	 bl          |?Open@WaveStreamContext@@UAAKPAVDeviceContext@@PAUwaveopendesc_tag@@K@Z|
  00024	e58d0008	 str         r0, [sp, #8]
  00028	e59d3008	 ldr         r3, [sp, #8]
  0002c	e58d3000	 str         r3, [sp]

; 29   : 
; 30   :     // Init m_CurrPos to force us to read the first sample
; 31   :     m_CurrPos = -(LONG)m_ClientRate;

  00030	e59d3014	 ldr         r3, [sp, #0x14]
  00034	e283308c	 add         r3, r3, #0x8C
  00038	e5933000	 ldr         r3, [r3]
  0003c	e2632000	 rsb         r2, r3, #0
  00040	e59d3014	 ldr         r3, [sp, #0x14]
  00044	e2833088	 add         r3, r3, #0x88
  00048	e5832000	 str         r2, [r3]

; 32   : 
; 33   :     return mmRet;

  0004c	e59d3000	 ldr         r3, [sp]
  00050	e58d3004	 str         r3, [sp, #4]

; 34   : }

  00054	e59d0004	 ldr         r0, [sp, #4]
  00058	e28dd00c	 add         sp, sp, #0xC
  0005c	e89d6000	 ldmia       sp, {sp, lr}
  00060	e12fff1e	 bx          lr
  00064		 |$M35324|

			 ENDP  ; |?Open@InputStreamContext@@UAAKPAVDeviceContext@@PAUwaveopendesc_tag@@K@Z|, InputStreamContext::Open

	EXPORT	|?DoCallbackReturnBuffer@InputStreamContext@@UAAXPAUwavehdr_tag@@@Z| ; InputStreamContext::DoCallbackReturnBuffer
	IMPORT	|?DoDriverCallback@StreamContext@@QAAXIKK@Z| ; StreamContext::DoDriverCallback

  00008			 AREA	 |.pdata|, PDATA
|$T35331| DCD	|$LN5@DoCallback|
	DCD	0x40000a03
; Function compile flags: /Odtp

  00064			 AREA	 |.text|, CODE, ARM

  00064		 |?DoCallbackReturnBuffer@InputStreamContext@@UAAXPAUwavehdr_tag@@@Z| PROC ; InputStreamContext::DoCallbackReturnBuffer

; 37   : {

  00064		 |$LN5@DoCallback|
  00064	e1a0c00d	 mov         r12, sp
  00068	e92d0003	 stmdb       sp!, {r0, r1}
  0006c	e92d5000	 stmdb       sp!, {r12, lr}
  00070		 |$M35328|

; 38   :     DoDriverCallback(WIM_DATA,(DWORD)lpHdr,0);

  00070	e3a03000	 mov         r3, #0
  00074	e59d200c	 ldr         r2, [sp, #0xC]
  00078	e3a01d0f	 mov         r1, #0xF, 26
  0007c	e59d0008	 ldr         r0, [sp, #8]
  00080	eb000000	 bl          |?DoDriverCallback@StreamContext@@QAAXIKK@Z|

; 39   : }

  00084	e89d6000	 ldmia       sp, {sp, lr}
  00088	e12fff1e	 bx          lr
  0008c		 |$M35329|

			 ENDP  ; |?DoCallbackReturnBuffer@InputStreamContext@@UAAXPAUwavehdr_tag@@@Z|, InputStreamContext::DoCallbackReturnBuffer

	EXPORT	|?DoCallbackStreamOpened@InputStreamContext@@UAAXXZ| ; InputStreamContext::DoCallbackStreamOpened

  00010			 AREA	 |.pdata|, PDATA
|$T35336| DCD	|$LN5@DoCallback@2|
	DCD	0x40000b03
; Function compile flags: /Odtp

  0008c			 AREA	 |.text|, CODE, ARM

  0008c		 |?DoCallbackStreamOpened@InputStreamContext@@UAAXXZ| PROC ; InputStreamContext::DoCallbackStreamOpened

; 42   : {

  0008c		 |$LN5@DoCallback@2|
  0008c	e1a0c00d	 mov         r12, sp
  00090	e92d0001	 stmdb       sp!, {r0}
  00094	e92d5000	 stmdb       sp!, {r12, lr}
  00098		 |$M35333|

; 43   :     DoDriverCallback(WIM_OPEN,0,0);

  00098	e3a03000	 mov         r3, #0
  0009c	e3a02000	 mov         r2, #0
  000a0	e3a01c03	 mov         r1, #3, 24
  000a4	e38110be	 orr         r1, r1, #0xBE
  000a8	e59d0008	 ldr         r0, [sp, #8]
  000ac	eb000000	 bl          |?DoDriverCallback@StreamContext@@QAAXIKK@Z|

; 44   : }

  000b0	e89d6000	 ldmia       sp, {sp, lr}
  000b4	e12fff1e	 bx          lr
  000b8		 |$M35334|

			 ENDP  ; |?DoCallbackStreamOpened@InputStreamContext@@UAAXXZ|, InputStreamContext::DoCallbackStreamOpened

	EXPORT	|?DoCallbackStreamClosed@InputStreamContext@@UAAXXZ| ; InputStreamContext::DoCallbackStreamClosed

  00018			 AREA	 |.pdata|, PDATA
|$T35341| DCD	|$LN5@DoCallback@3|
	DCD	0x40000b03
; Function compile flags: /Odtp

  000b8			 AREA	 |.text|, CODE, ARM

  000b8		 |?DoCallbackStreamClosed@InputStreamContext@@UAAXXZ| PROC ; InputStreamContext::DoCallbackStreamClosed

; 47   : {

  000b8		 |$LN5@DoCallback@3|
  000b8	e1a0c00d	 mov         r12, sp
  000bc	e92d0001	 stmdb       sp!, {r0}
  000c0	e92d5000	 stmdb       sp!, {r12, lr}
  000c4		 |$M35338|

; 48   :     DoDriverCallback(WIM_CLOSE,0,0);

  000c4	e3a03000	 mov         r3, #0
  000c8	e3a02000	 mov         r2, #0
  000cc	e3a01c03	 mov         r1, #3, 24
  000d0	e38110bf	 orr         r1, r1, #0xBF
  000d4	e59d0008	 ldr         r0, [sp, #8]
  000d8	eb000000	 bl          |?DoDriverCallback@StreamContext@@QAAXIKK@Z|

; 49   : }

  000dc	e89d6000	 ldmia       sp, {sp, lr}
  000e0	e12fff1e	 bx          lr
  000e4		 |$M35339|

			 ENDP  ; |?DoCallbackStreamClosed@InputStreamContext@@UAAXXZ|, InputStreamContext::DoCallbackStreamClosed

	EXPORT	|?Stop@InputStreamContext@@UAAKXZ|	; InputStreamContext::Stop
	IMPORT	|?GetNextBuffer@StreamContext@@QAAPAEXZ| ; StreamContext::GetNextBuffer
	IMPORT	|?Stop@StreamContext@@UAAKXZ|		; StreamContext::Stop

  00020			 AREA	 |.pdata|, PDATA
|$T35347| DCD	|$LN6@Stop|
	DCD	0x40001a04
; Function compile flags: /Odtp

  000e4			 AREA	 |.text|, CODE, ARM

  000e4		 |?Stop@InputStreamContext@@UAAKXZ| PROC ; InputStreamContext::Stop

; 52   : {

  000e4		 |$LN6@Stop|
  000e4	e1a0c00d	 mov         r12, sp
  000e8	e92d0001	 stmdb       sp!, {r0}
  000ec	e92d5000	 stmdb       sp!, {r12, lr}
  000f0	e24dd004	 sub         sp, sp, #4
  000f4		 |$M35344|

; 53   :     // Stop the stream
; 54   :     WaveStreamContext::Stop();

  000f4	e59d000c	 ldr         r0, [sp, #0xC]
  000f8	eb000000	 bl          |?Stop@StreamContext@@UAAKXZ|

; 55   : 
; 56   :     // Return any partially filled buffers to the client
; 57   :     if ((m_lpWaveHdrCurrent) && (m_lpWaveHdrCurrent->dwBytesRecorded>0))

  000fc	e59d300c	 ldr         r3, [sp, #0xC]
  00100	e283303c	 add         r3, r3, #0x3C
  00104	e5933000	 ldr         r3, [r3]
  00108	e3530000	 cmp         r3, #0
  0010c	0a000008	 beq         |$LN1@Stop|
  00110	e59d300c	 ldr         r3, [sp, #0xC]
  00114	e283303c	 add         r3, r3, #0x3C
  00118	e5933000	 ldr         r3, [r3]
  0011c	e2833008	 add         r3, r3, #8
  00120	e5933000	 ldr         r3, [r3]
  00124	e3530000	 cmp         r3, #0
  00128	9a000001	 bls         |$LN1@Stop|

; 58   :     {
; 59   :         GetNextBuffer();

  0012c	e59d000c	 ldr         r0, [sp, #0xC]
  00130	eb000000	 bl          |?GetNextBuffer@StreamContext@@QAAPAEXZ|
  00134		 |$LN1@Stop|

; 60   :     }
; 61   : 
; 62   :     return MMSYSERR_NOERROR;

  00134	e3a03000	 mov         r3, #0
  00138	e58d3000	 str         r3, [sp]

; 63   : }

  0013c	e59d0000	 ldr         r0, [sp]
  00140	e28dd004	 add         sp, sp, #4
  00144	e89d6000	 ldmia       sp, {sp, lr}
  00148	e12fff1e	 bx          lr
  0014c		 |$M35345|

			 ENDP  ; |?Stop@InputStreamContext@@UAAKXZ|, InputStreamContext::Stop

	EXPORT	|?Render2@InputStreamContext@@UAAPAEPAE00PAUTRANSFER_STATUS@@@Z| ; InputStreamContext::Render2
	IMPORT	|?GetBaseSampleRate@DeviceContext@@QAAKXZ| ; DeviceContext::GetBaseSampleRate

  00028			 AREA	 |.pdata|, PDATA
|$T35353| DCD	|$LN19@Render2|
	DCD	0x40010704
; Function compile flags: /Odtp

  0014c			 AREA	 |.text|, CODE, ARM

  0014c		 |?Render2@InputStreamContext@@UAAPAEPAE00PAUTRANSFER_STATUS@@@Z| PROC ; InputStreamContext::Render2

; 67   : {

  0014c		 |$LN19@Render2|
  0014c	e1a0c00d	 mov         r12, sp
  00150	e92d000f	 stmdb       sp!, {r0 - r3}
  00154	e92d5000	 stmdb       sp!, {r12, lr}
  00158	e24dd04c	 sub         sp, sp, #0x4C
  0015c		 |$M35350|

; 68   : 	UNREFERENCED_PARAMETER(pBufferLast);
; 69   : 	UNREFERENCED_PARAMETER(pTranferStatus);
; 70   : 
; 71   :     LONG CurrPos = m_CurrPos;

  0015c	e59d3054	 ldr         r3, [sp, #0x54]
  00160	e2833088	 add         r3, r3, #0x88
  00164	e5933000	 ldr         r3, [r3]
  00168	e58d302c	 str         r3, [sp, #0x2C]

; 72   :     DWORD ClientRate = m_ClientRate;

  0016c	e59d3054	 ldr         r3, [sp, #0x54]
  00170	e283308c	 add         r3, r3, #0x8C
  00174	e5933000	 ldr         r3, [r3]
  00178	e58d3004	 str         r3, [sp, #4]

; 73   :     DWORD ClientRateInv = m_ClientRateInv;

  0017c	e59d3054	 ldr         r3, [sp, #0x54]
  00180	e2833090	 add         r3, r3, #0x90
  00184	e5933000	 ldr         r3, [r3]
  00188	e58d3000	 str         r3, [sp]

; 74   :     DWORD BaseRate = m_pDeviceContext->GetBaseSampleRate();

  0018c	e59d3054	 ldr         r3, [sp, #0x54]
  00190	e2833050	 add         r3, r3, #0x50
  00194	e5930000	 ldr         r0, [r3]
  00198	eb000000	 bl          |?GetBaseSampleRate@DeviceContext@@QAAKXZ|
  0019c	e58d0044	 str         r0, [sp, #0x44]
  001a0	e59d3044	 ldr         r3, [sp, #0x44]
  001a4	e58d3018	 str         r3, [sp, #0x18]

; 75   : 
; 76   :     PBYTE pCurrData = m_lpCurrData;

  001a8	e59d3054	 ldr         r3, [sp, #0x54]
  001ac	e2833044	 add         r3, r3, #0x44
  001b0	e5933000	 ldr         r3, [r3]
  001b4	e58d3014	 str         r3, [sp, #0x14]

; 77   :     PBYTE pCurrDataEnd = m_lpCurrDataEnd;

  001b8	e59d3054	 ldr         r3, [sp, #0x54]
  001bc	e2833048	 add         r3, r3, #0x48
  001c0	e5933000	 ldr         r3, [r3]
  001c4	e58d3020	 str         r3, [sp, #0x20]

; 78   : 
; 79   :     LONG fxpGain[2];
; 80   :     fxpGain[0] = m_fxpGain[0];

  001c8	e59d3054	 ldr         r3, [sp, #0x54]
  001cc	e2833060	 add         r3, r3, #0x60
  001d0	e5933000	 ldr         r3, [r3]
  001d4	e58d3024	 str         r3, [sp, #0x24]

; 81   :     fxpGain[1] = m_fxpGain[1];

  001d8	e59d3054	 ldr         r3, [sp, #0x54]
  001dc	e2833064	 add         r3, r3, #0x64
  001e0	e5933000	 ldr         r3, [r3]
  001e4	e58d3028	 str         r3, [sp, #0x28]

; 82   : 
; 83   :     LONG CurrSamp0 = m_CurrSamp[0];

  001e8	e59d3054	 ldr         r3, [sp, #0x54]
  001ec	e2833080	 add         r3, r3, #0x80
  001f0	e5933000	 ldr         r3, [r3]
  001f4	e58d300c	 str         r3, [sp, #0xC]

; 84   :     LONG PrevSamp0 = m_PrevSamp[0];

  001f8	e59d3054	 ldr         r3, [sp, #0x54]
  001fc	e2833078	 add         r3, r3, #0x78
  00200	e5933000	 ldr         r3, [r3]
  00204	e58d301c	 str         r3, [sp, #0x1C]

; 85   :     LONG CurrSamp1 = m_CurrSamp[1];

  00208	e59d3054	 ldr         r3, [sp, #0x54]
  0020c	e2833084	 add         r3, r3, #0x84
  00210	e5933000	 ldr         r3, [r3]
  00214	e58d3008	 str         r3, [sp, #8]

; 86   :     LONG PrevSamp1 = m_PrevSamp[1];

  00218	e59d3054	 ldr         r3, [sp, #0x54]
  0021c	e283307c	 add         r3, r3, #0x7C
  00220	e5933000	 ldr         r3, [r3]
  00224	e58d3010	 str         r3, [sp, #0x10]
  00228		 |$LN14@Render2|

; 87   : 
; 88   :     for (;;)
; 89   :     {
; 90   :         // Make sure we have a place to put the data
; 91   :         if (pCurrData>=pCurrDataEnd)

  00228	e59d2014	 ldr         r2, [sp, #0x14]
  0022c	e59d3020	 ldr         r3, [sp, #0x20]
  00230	e1520003	 cmp         r2, r3
  00234	3a000001	 bcc         |$LN12@Render2|
  00238	ea000090	 b           |$LN11@Render2|

; 92   :         {
; 93   :             goto Exit;

  0023c	ea00008f	 b           |$Exit$35281|
  00240		 |$LN12@Render2|
  00240		 |$LN10@Render2|

; 94   :         }
; 95   : 
; 96   :         // Get the next sample
; 97   :         while (CurrPos < 0)

  00240	e59d302c	 ldr         r3, [sp, #0x2C]
  00244	e3530000	 cmp         r3, #0
  00248	aa000018	 bge         |$LN9@Render2|

; 98   :         {
; 99   :             if (pBuffer>=pBufferEnd)

  0024c	e59d2058	 ldr         r2, [sp, #0x58]
  00250	e59d305c	 ldr         r3, [sp, #0x5C]
  00254	e1520003	 cmp         r2, r3
  00258	3a000001	 bcc         |$LN8@Render2|
  0025c	ea000087	 b           |$LN7@Render2|

; 100  :             {
; 101  :                 goto Exit;

  00260	ea000086	 b           |$Exit$35281|
  00264		 |$LN8@Render2|

; 102  :             }
; 103  : 
; 104  :             CurrPos += ClientRate;

  00264	e59d202c	 ldr         r2, [sp, #0x2C]
  00268	e59d3004	 ldr         r3, [sp, #4]
  0026c	e0823003	 add         r3, r2, r3
  00270	e58d302c	 str         r3, [sp, #0x2C]

; 105  : 
; 106  :             PrevSamp0 = CurrSamp0;

  00274	e59d300c	 ldr         r3, [sp, #0xC]
  00278	e58d301c	 str         r3, [sp, #0x1C]

; 107  :             PrevSamp1 = CurrSamp1;

  0027c	e59d3008	 ldr         r3, [sp, #8]
  00280	e58d3010	 str         r3, [sp, #0x10]

; 108  : 
; 109  :             CurrSamp0 = ((HWSAMPLE *)pBuffer)[0];

  00284	e59d3058	 ldr         r3, [sp, #0x58]
  00288	e1d330f0	 ldrsh       r3, [r3]
  0028c	e58d300c	 str         r3, [sp, #0xC]

; 110  :             CurrSamp1 = ((HWSAMPLE *)pBuffer)[1];

  00290	e59d3058	 ldr         r3, [sp, #0x58]
  00294	e2833002	 add         r3, r3, #2
  00298	e1d330f0	 ldrsh       r3, [r3]
  0029c	e58d3008	 str         r3, [sp, #8]

; 111  :             pBuffer += 2*sizeof(HWSAMPLE);

  002a0	e59d3058	 ldr         r3, [sp, #0x58]
  002a4	e2833004	 add         r3, r3, #4
  002a8	e58d3058	 str         r3, [sp, #0x58]

; 112  :         }

  002ac	eaffffe3	 b           |$LN10@Render2|
  002b0		 |$LN9@Render2|

; 113  : 
; 114  :         // Calculate ratio between samples as a 17.15 fraction
; 115  :         // (Only use 15 bits to avoid overflow on next multiply)
; 116  :         LONG Ratio;
; 117  :         Ratio = (CurrPos * ClientRateInv)>>17;

  002b0	e59d202c	 ldr         r2, [sp, #0x2C]
  002b4	e59d3000	 ldr         r3, [sp]
  002b8	e0030392	 mul         r3, r2, r3
  002bc	e1a038a3	 mov         r3, r3, lsr #17
  002c0	e58d3030	 str         r3, [sp, #0x30]

; 118  : 
; 119  :         CurrPos -= BaseRate;

  002c4	e59d202c	 ldr         r2, [sp, #0x2C]
  002c8	e59d3018	 ldr         r3, [sp, #0x18]
  002cc	e0423003	 sub         r3, r2, r3
  002d0	e58d302c	 str         r3, [sp, #0x2C]

; 120  : 
; 121  :         LONG InSamp0;
; 122  :         LONG InSamp1;
; 123  : 
; 124  :         // Calc difference between samples. Note InSamp0 is a 17-bit signed number now.
; 125  :         InSamp0 = PrevSamp0 - CurrSamp0;

  002d4	e59d201c	 ldr         r2, [sp, #0x1C]
  002d8	e59d300c	 ldr         r3, [sp, #0xC]
  002dc	e0423003	 sub         r3, r2, r3
  002e0	e58d3034	 str         r3, [sp, #0x34]

; 126  :         InSamp1 = PrevSamp1- CurrSamp1;

  002e4	e59d2010	 ldr         r2, [sp, #0x10]
  002e8	e59d3008	 ldr         r3, [sp, #8]
  002ec	e0423003	 sub         r3, r2, r3
  002f0	e58d3038	 str         r3, [sp, #0x38]

; 127  : 
; 128  :         // Now interpolate
; 129  :         InSamp0 = (InSamp0 * Ratio) >> 15;

  002f4	e59d2034	 ldr         r2, [sp, #0x34]
  002f8	e59d3030	 ldr         r3, [sp, #0x30]
  002fc	e0030392	 mul         r3, r2, r3
  00300	e1a037c3	 mov         r3, r3, asr #15
  00304	e58d3034	 str         r3, [sp, #0x34]

; 130  :         InSamp1 = (InSamp1 * Ratio) >> 15;

  00308	e59d2038	 ldr         r2, [sp, #0x38]
  0030c	e59d3030	 ldr         r3, [sp, #0x30]
  00310	e0030392	 mul         r3, r2, r3
  00314	e1a037c3	 mov         r3, r3, asr #15
  00318	e58d3038	 str         r3, [sp, #0x38]

; 131  : 
; 132  :         // Add to previous sample
; 133  :         InSamp0 += CurrSamp0;

  0031c	e59d2034	 ldr         r2, [sp, #0x34]
  00320	e59d300c	 ldr         r3, [sp, #0xC]
  00324	e0823003	 add         r3, r2, r3
  00328	e58d3034	 str         r3, [sp, #0x34]

; 134  :         InSamp1 += CurrSamp1;

  0032c	e59d2038	 ldr         r2, [sp, #0x38]
  00330	e59d3008	 ldr         r3, [sp, #8]
  00334	e0823003	 add         r3, r2, r3
  00338	e58d3038	 str         r3, [sp, #0x38]

; 135  : 
; 136  :         // Apply input gain
; 137  :         InSamp0 = (InSamp0 * fxpGain[0]) >> 16;

  0033c	e59d2034	 ldr         r2, [sp, #0x34]
  00340	e59d3024	 ldr         r3, [sp, #0x24]
  00344	e0030392	 mul         r3, r2, r3
  00348	e1a03843	 mov         r3, r3, asr #16
  0034c	e58d3034	 str         r3, [sp, #0x34]

; 138  :         InSamp1 = (InSamp1 * fxpGain[1]) >> 16;

  00350	e59d2038	 ldr         r2, [sp, #0x38]
  00354	e59d3028	 ldr         r3, [sp, #0x28]
  00358	e0030392	 mul         r3, r2, r3
  0035c	e1a03843	 mov         r3, r3, asr #16
  00360	e58d3038	 str         r3, [sp, #0x38]

; 139  : 
; 140  :         PPCM_SAMPLE pSampleDest = (PPCM_SAMPLE)pCurrData;

  00364	e59d3014	 ldr         r3, [sp, #0x14]
  00368	e58d303c	 str         r3, [sp, #0x3C]

; 141  :         switch (m_SampleType)

  0036c	e59d3054	 ldr         r3, [sp, #0x54]
  00370	e283306c	 add         r3, r3, #0x6C
  00374	e5933000	 ldr         r3, [r3]
  00378	e58d3048	 str         r3, [sp, #0x48]
  0037c	e59d3048	 ldr         r3, [sp, #0x48]
  00380	e3530001	 cmp         r3, #1
  00384	0a000022	 beq         |$LN2@Render2|
  00388	e59d3048	 ldr         r3, [sp, #0x48]
  0038c	e3530002	 cmp         r3, #2
  00390	0a00000e	 beq         |$LN3@Render2|
  00394	e59d3048	 ldr         r3, [sp, #0x48]
  00398	e3530003	 cmp         r3, #3
  0039c	0a000028	 beq         |$LN1@Render2|

; 142  :         {
; 143  :         case PCM_TYPE_M8:
; 144  :         default:
; 145  :             pSampleDest->m8.sample = (UINT8)( ((InSamp0+InSamp1) >> 9) + 128);

  003a0	e59d2034	 ldr         r2, [sp, #0x34]
  003a4	e59d3038	 ldr         r3, [sp, #0x38]
  003a8	e0823003	 add         r3, r2, r3
  003ac	e1a034c3	 mov         r3, r3, asr #9
  003b0	e2833080	 add         r3, r3, #0x80
  003b4	e20320ff	 and         r2, r3, #0xFF
  003b8	e59d303c	 ldr         r3, [sp, #0x3C]
  003bc	e5c32000	 strb        r2, [r3]

; 146  :             pCurrData  += 1;

  003c0	e59d3014	 ldr         r3, [sp, #0x14]
  003c4	e2833001	 add         r3, r3, #1
  003c8	e58d3014	 str         r3, [sp, #0x14]

; 147  :             break;

  003cc	ea00002a	 b           |$LN5@Render2|
  003d0		 |$LN3@Render2|

; 148  : 
; 149  :         case PCM_TYPE_S8:
; 150  :             pSampleDest->s8.sample_left  = (UINT8)((InSamp0 >> 8) + 128);

  003d0	e59d3034	 ldr         r3, [sp, #0x34]
  003d4	e1a03443	 mov         r3, r3, asr #8
  003d8	e2833080	 add         r3, r3, #0x80
  003dc	e20320ff	 and         r2, r3, #0xFF
  003e0	e59d303c	 ldr         r3, [sp, #0x3C]
  003e4	e5c32000	 strb        r2, [r3]

; 151  :             pSampleDest->s8.sample_right = (UINT8)((InSamp1 >> 8) + 128);

  003e8	e59d3038	 ldr         r3, [sp, #0x38]
  003ec	e1a03443	 mov         r3, r3, asr #8
  003f0	e2833080	 add         r3, r3, #0x80
  003f4	e20320ff	 and         r2, r3, #0xFF
  003f8	e59d303c	 ldr         r3, [sp, #0x3C]
  003fc	e2833001	 add         r3, r3, #1
  00400	e5c32000	 strb        r2, [r3]

; 152  :             pCurrData  += 2;

  00404	e59d3014	 ldr         r3, [sp, #0x14]
  00408	e2833002	 add         r3, r3, #2
  0040c	e58d3014	 str         r3, [sp, #0x14]

; 153  :             break;

  00410	ea000019	 b           |$LN5@Render2|
  00414		 |$LN2@Render2|

; 154  : 
; 155  :         case PCM_TYPE_M16:
; 156  :             pSampleDest->m16.sample = (INT16)((InSamp0+InSamp1)>>1);

  00414	e59d2034	 ldr         r2, [sp, #0x34]
  00418	e59d3038	 ldr         r3, [sp, #0x38]
  0041c	e0823003	 add         r3, r2, r3
  00420	e1a030c3	 mov         r3, r3, asr #1
  00424	e1a02803	 mov         r2, r3, lsl #16
  00428	e1a02842	 mov         r2, r2, asr #16
  0042c	e59d303c	 ldr         r3, [sp, #0x3C]
  00430	e1c320b0	 strh        r2, [r3]

; 157  :             pCurrData  += 2;

  00434	e59d3014	 ldr         r3, [sp, #0x14]
  00438	e2833002	 add         r3, r3, #2
  0043c	e58d3014	 str         r3, [sp, #0x14]

; 158  :             break;

  00440	ea00000d	 b           |$LN5@Render2|
  00444		 |$LN1@Render2|

; 159  : 
; 160  :         case PCM_TYPE_S16:
; 161  :             pSampleDest->s16.sample_left  = (INT16)InSamp0;

  00444	e59d3034	 ldr         r3, [sp, #0x34]
  00448	e1a02803	 mov         r2, r3, lsl #16
  0044c	e1a02842	 mov         r2, r2, asr #16
  00450	e59d303c	 ldr         r3, [sp, #0x3C]
  00454	e1c320b0	 strh        r2, [r3]

; 162  :             pSampleDest->s16.sample_right = (INT16)InSamp1;

  00458	e59d3038	 ldr         r3, [sp, #0x38]
  0045c	e1a02803	 mov         r2, r3, lsl #16
  00460	e1a02842	 mov         r2, r2, asr #16
  00464	e59d303c	 ldr         r3, [sp, #0x3C]
  00468	e2833002	 add         r3, r3, #2
  0046c	e1c320b0	 strh        r2, [r3]

; 163  :             pCurrData  += 4;

  00470	e59d3014	 ldr         r3, [sp, #0x14]
  00474	e2833004	 add         r3, r3, #4
  00478	e58d3014	 str         r3, [sp, #0x14]
  0047c		 |$LN5@Render2|

; 164  :             break;
; 165  :         }
; 166  :     }

  0047c	eaffff69	 b           |$LN14@Render2|
  00480		 |$LN7@Render2|
  00480		 |$LN11@Render2|
  00480		 |$Exit$35281|

; 167  : 
; 168  : Exit:
; 169  :     m_lpWaveHdrCurrent->dwBytesRecorded += (pCurrData-m_lpCurrData);

  00480	e59d3054	 ldr         r3, [sp, #0x54]
  00484	e283303c	 add         r3, r3, #0x3C
  00488	e5933000	 ldr         r3, [r3]
  0048c	e2831008	 add         r1, r3, #8
  00490	e59d3054	 ldr         r3, [sp, #0x54]
  00494	e2833044	 add         r3, r3, #0x44
  00498	e59d2014	 ldr         r2, [sp, #0x14]
  0049c	e5933000	 ldr         r3, [r3]
  004a0	e0422003	 sub         r2, r2, r3
  004a4	e5913000	 ldr         r3, [r1]
  004a8	e0832002	 add         r2, r3, r2
  004ac	e59d3054	 ldr         r3, [sp, #0x54]
  004b0	e283303c	 add         r3, r3, #0x3C
  004b4	e5933000	 ldr         r3, [r3]
  004b8	e2833008	 add         r3, r3, #8
  004bc	e5832000	 str         r2, [r3]

; 170  :     m_dwByteCount += (pCurrData-m_lpCurrData);

  004c0	e59d3054	 ldr         r3, [sp, #0x54]
  004c4	e283104c	 add         r1, r3, #0x4C
  004c8	e59d3054	 ldr         r3, [sp, #0x54]
  004cc	e2833044	 add         r3, r3, #0x44
  004d0	e59d2014	 ldr         r2, [sp, #0x14]
  004d4	e5933000	 ldr         r3, [r3]
  004d8	e0422003	 sub         r2, r2, r3
  004dc	e5913000	 ldr         r3, [r1]
  004e0	e0832002	 add         r2, r3, r2
  004e4	e59d3054	 ldr         r3, [sp, #0x54]
  004e8	e283304c	 add         r3, r3, #0x4C
  004ec	e5832000	 str         r2, [r3]

; 171  :     m_lpCurrData = pCurrData;

  004f0	e59d3054	 ldr         r3, [sp, #0x54]
  004f4	e2832044	 add         r2, r3, #0x44
  004f8	e59d3014	 ldr         r3, [sp, #0x14]
  004fc	e5823000	 str         r3, [r2]

; 172  :     m_CurrPos = CurrPos;

  00500	e59d3054	 ldr         r3, [sp, #0x54]
  00504	e2832088	 add         r2, r3, #0x88
  00508	e59d302c	 ldr         r3, [sp, #0x2C]
  0050c	e5823000	 str         r3, [r2]

; 173  :     m_PrevSamp[0] = PrevSamp0;

  00510	e59d3054	 ldr         r3, [sp, #0x54]
  00514	e2832078	 add         r2, r3, #0x78
  00518	e59d301c	 ldr         r3, [sp, #0x1C]
  0051c	e5823000	 str         r3, [r2]

; 174  :     m_CurrSamp[0] = CurrSamp0;

  00520	e59d3054	 ldr         r3, [sp, #0x54]
  00524	e2832080	 add         r2, r3, #0x80
  00528	e59d300c	 ldr         r3, [sp, #0xC]
  0052c	e5823000	 str         r3, [r2]

; 175  :     m_PrevSamp[1] = PrevSamp1;

  00530	e59d3054	 ldr         r3, [sp, #0x54]
  00534	e283207c	 add         r2, r3, #0x7C
  00538	e59d3010	 ldr         r3, [sp, #0x10]
  0053c	e5823000	 str         r3, [r2]

; 176  :     m_CurrSamp[1] = CurrSamp1;

  00540	e59d3054	 ldr         r3, [sp, #0x54]
  00544	e2832084	 add         r2, r3, #0x84
  00548	e59d3008	 ldr         r3, [sp, #8]
  0054c	e5823000	 str         r3, [r2]

; 177  :     return pBuffer;

  00550	e59d3058	 ldr         r3, [sp, #0x58]
  00554	e58d3040	 str         r3, [sp, #0x40]

; 178  : }

  00558	e59d0040	 ldr         r0, [sp, #0x40]
  0055c	e28dd04c	 add         sp, sp, #0x4C
  00560	e89d6000	 ldmia       sp, {sp, lr}
  00564	e12fff1e	 bx          lr
  00568		 |$M35351|

			 ENDP  ; |?Render2@InputStreamContext@@UAAPAEPAE00PAUTRANSFER_STATUS@@@Z|, InputStreamContext::Render2

	EXPORT	|?ResetBaseInfo@InputStreamContext@@UAAXXZ| ; InputStreamContext::ResetBaseInfo

  00030			 AREA	 |.pdata|, PDATA
|$T35358| DCD	|$LN5@ResetBaseI|
	DCD	0x40000503
; Function compile flags: /Odtp

  00568			 AREA	 |.text|, CODE, ARM

  00568		 |?ResetBaseInfo@InputStreamContext@@UAAXXZ| PROC ; InputStreamContext::ResetBaseInfo

; 282  : {

  00568		 |$LN5@ResetBaseI|
  00568	e1a0c00d	 mov         r12, sp
  0056c	e92d0001	 stmdb       sp!, {r0}
  00570	e92d5000	 stmdb       sp!, {r12, lr}
  00574		 |$M35355|

; 283  :     return;
; 284  : }

  00574	e89d6000	 ldmia       sp, {sp, lr}
  00578	e12fff1e	 bx          lr
  0057c		 |$M35356|

			 ENDP  ; |?ResetBaseInfo@InputStreamContext@@UAAXXZ|, InputStreamContext::ResetBaseInfo

	END
