; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\WAVEDEV2\output.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|?Open@OutputStreamContext@@UAAKPAVDeviceContext@@PAUwaveopendesc_tag@@K@Z| ; OutputStreamContext::Open
	IMPORT	|?GetBaseSampleRate@DeviceContext@@QAAKXZ| ; DeviceContext::GetBaseSampleRate
	IMPORT	|?Open@WaveStreamContext@@UAAKPAVDeviceContext@@PAUwaveopendesc_tag@@K@Z| ; WaveStreamContext::Open

  00000			 AREA	 |.pdata|, PDATA
|$T35534| DCD	|$LN6@Open|
	DCD	0x40002604
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\wavedev2\output.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Open@OutputStreamContext@@UAAKPAVDeviceContext@@PAUwaveopendesc_tag@@K@Z| PROC ; OutputStreamContext::Open

; 25   : {

  00000		 |$LN6@Open|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d000f	 stmdb       sp!, {r0 - r3}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd010	 sub         sp, sp, #0x10
  00010		 |$M35531|

; 26   :     DWORD mmRet;
; 27   : 
; 28   :     mmRet = WaveStreamContext::Open(pDeviceContext, lpWOD, dwFlags);

  00010	e59d3024	 ldr         r3, [sp, #0x24]
  00014	e59d2020	 ldr         r2, [sp, #0x20]
  00018	e59d101c	 ldr         r1, [sp, #0x1C]
  0001c	e59d0018	 ldr         r0, [sp, #0x18]
  00020	eb000000	 bl          |?Open@WaveStreamContext@@UAAKPAVDeviceContext@@PAUwaveopendesc_tag@@K@Z|
  00024	e58d0008	 str         r0, [sp, #8]
  00028	e59d3008	 ldr         r3, [sp, #8]
  0002c	e58d3000	 str         r3, [sp]

; 29   : 
; 30   :     // Init m_CurrPos to force us to read the first sample
; 31   :     m_CurrPos = -(LONG)m_pDeviceContext->GetBaseSampleRate();

  00030	e59d3018	 ldr         r3, [sp, #0x18]
  00034	e2833050	 add         r3, r3, #0x50
  00038	e5930000	 ldr         r0, [r3]
  0003c	eb000000	 bl          |?GetBaseSampleRate@DeviceContext@@QAAKXZ|
  00040	e58d000c	 str         r0, [sp, #0xC]
  00044	e59d300c	 ldr         r3, [sp, #0xC]
  00048	e2632000	 rsb         r2, r3, #0
  0004c	e59d3018	 ldr         r3, [sp, #0x18]
  00050	e2833088	 add         r3, r3, #0x88
  00054	e5832000	 str         r2, [r3]

; 32   : 
; 33   :     if (mmRet==MMSYSERR_NOERROR)

  00058	e59d3000	 ldr         r3, [sp]
  0005c	e3530000	 cmp         r3, #0
  00060	1a000006	 bne         |$LN1@Open|

; 34   :     {
; 35   :         // Note: Output streams should be initialized in the run state.
; 36   :         Run();

  00064	e59d3018	 ldr         r3, [sp, #0x18]
  00068	e5933000	 ldr         r3, [r3]
  0006c	e2833010	 add         r3, r3, #0x10
  00070	e59d0018	 ldr         r0, [sp, #0x18]
  00074	e5933000	 ldr         r3, [r3]
  00078	e1a0e00f	 mov         lr, pc
  0007c	e12fff13	 bx          r3
  00080		 |$LN1@Open|

; 37   :     }
; 38   : 
; 39   :     return mmRet;

  00080	e59d3000	 ldr         r3, [sp]
  00084	e58d3004	 str         r3, [sp, #4]

; 40   : }

  00088	e59d0004	 ldr         r0, [sp, #4]
  0008c	e28dd010	 add         sp, sp, #0x10
  00090	e89d6000	 ldmia       sp, {sp, lr}
  00094	e12fff1e	 bx          lr
  00098		 |$M35532|

			 ENDP  ; |?Open@OutputStreamContext@@UAAKPAVDeviceContext@@PAUwaveopendesc_tag@@K@Z|, OutputStreamContext::Open

	EXPORT	|?Reset@OutputStreamContext@@UAAKXZ|	; OutputStreamContext::Reset
	IMPORT	|?Reset@StreamContext@@UAAKXZ|		; StreamContext::Reset

  00008			 AREA	 |.pdata|, PDATA
|$T35540| DCD	|$LN6@Reset|
	DCD	0x40001904
; Function compile flags: /Odtp

  00098			 AREA	 |.text|, CODE, ARM

  00098		 |?Reset@OutputStreamContext@@UAAKXZ| PROC ; OutputStreamContext::Reset

; 43   : {

  00098		 |$LN6@Reset|
  00098	e1a0c00d	 mov         r12, sp
  0009c	e92d0001	 stmdb       sp!, {r0}
  000a0	e92d5000	 stmdb       sp!, {r12, lr}
  000a4	e24dd00c	 sub         sp, sp, #0xC
  000a8		 |$M35537|

; 44   :     HRESULT Result;
; 45   : 
; 46   :     Result = WaveStreamContext::Reset();

  000a8	e59d0014	 ldr         r0, [sp, #0x14]
  000ac	eb000000	 bl          |?Reset@StreamContext@@UAAKXZ|
  000b0	e58d0008	 str         r0, [sp, #8]
  000b4	e59d3008	 ldr         r3, [sp, #8]
  000b8	e58d3000	 str         r3, [sp]

; 47   : 
; 48   :     if (Result==MMSYSERR_NOERROR)

  000bc	e59d3000	 ldr         r3, [sp]
  000c0	e3530000	 cmp         r3, #0
  000c4	1a000006	 bne         |$LN1@Reset|

; 49   :     {
; 50   :         // Note: Output streams should be reset to the run state.
; 51   :         Run();

  000c8	e59d3014	 ldr         r3, [sp, #0x14]
  000cc	e5933000	 ldr         r3, [r3]
  000d0	e2833010	 add         r3, r3, #0x10
  000d4	e59d0014	 ldr         r0, [sp, #0x14]
  000d8	e5933000	 ldr         r3, [r3]
  000dc	e1a0e00f	 mov         lr, pc
  000e0	e12fff13	 bx          r3
  000e4		 |$LN1@Reset|

; 52   :     }
; 53   : 
; 54   :     return Result;

  000e4	e59d3000	 ldr         r3, [sp]
  000e8	e58d3004	 str         r3, [sp, #4]

; 55   : };

  000ec	e59d0004	 ldr         r0, [sp, #4]
  000f0	e28dd00c	 add         sp, sp, #0xC
  000f4	e89d6000	 ldmia       sp, {sp, lr}
  000f8	e12fff1e	 bx          lr
  000fc		 |$M35538|

			 ENDP  ; |?Reset@OutputStreamContext@@UAAKXZ|, OutputStreamContext::Reset

	EXPORT	|?ResetBaseInfo@OutputStreamContext@@UAAXXZ| ; OutputStreamContext::ResetBaseInfo

  00010			 AREA	 |.pdata|, PDATA
|$T35545| DCD	|$LN5@ResetBaseI|
	DCD	0x40000503
; Function compile flags: /Odtp

  000fc			 AREA	 |.text|, CODE, ARM

  000fc		 |?ResetBaseInfo@OutputStreamContext@@UAAXXZ| PROC ; OutputStreamContext::ResetBaseInfo

; 58   : {

  000fc		 |$LN5@ResetBaseI|
  000fc	e1a0c00d	 mov         r12, sp
  00100	e92d0001	 stmdb       sp!, {r0}
  00104	e92d5000	 stmdb       sp!, {r12, lr}
  00108		 |$M35542|

; 59   :     return;
; 60   : }

  00108	e89d6000	 ldmia       sp, {sp, lr}
  0010c	e12fff1e	 bx          lr
  00110		 |$M35543|

			 ENDP  ; |?ResetBaseInfo@OutputStreamContext@@UAAXXZ|, OutputStreamContext::ResetBaseInfo

	EXPORT	|?Render2@OutputStreamContextM8@@UAAPAEPAE00PAUTRANSFER_STATUS@@@Z| ; OutputStreamContextM8::Render2
	IMPORT	|?GetBaseSampleRateInverse@DeviceContext@@QAAKXZ| ; DeviceContext::GetBaseSampleRateInverse

  00018			 AREA	 |.pdata|, PDATA
|$T35551| DCD	|$LN20@Render2|
	DCD	0x4000dc04
; Function compile flags: /Odtp

  00110			 AREA	 |.text|, CODE, ARM

  00110		 |?Render2@OutputStreamContextM8@@UAAPAEPAE00PAUTRANSFER_STATUS@@@Z| PROC ; OutputStreamContextM8::Render2

; 64   : {

  00110		 |$LN20@Render2|
  00110	e1a0c00d	 mov         r12, sp
  00114	e92d000f	 stmdb       sp!, {r0 - r3}
  00118	e92d5000	 stmdb       sp!, {r12, lr}
  0011c	e24dd044	 sub         sp, sp, #0x44
  00120		 |$M35548|

; 65   :     LONG CurrPos = m_CurrPos;

  00120	e59d304c	 ldr         r3, [sp, #0x4C]
  00124	e2833088	 add         r3, r3, #0x88
  00128	e5933000	 ldr         r3, [r3]
  0012c	e58d3024	 str         r3, [sp, #0x24]

; 66   :     DWORD ClientRate = m_ClientRate;

  00130	e59d304c	 ldr         r3, [sp, #0x4C]
  00134	e283308c	 add         r3, r3, #0x8C
  00138	e5933000	 ldr         r3, [r3]
  0013c	e58d3000	 str         r3, [sp]

; 67   :     DWORD BaseRate = m_pDeviceContext->GetBaseSampleRate();

  00140	e59d304c	 ldr         r3, [sp, #0x4C]
  00144	e2833050	 add         r3, r3, #0x50
  00148	e5930000	 ldr         r0, [r3]
  0014c	eb000000	 bl          |?GetBaseSampleRate@DeviceContext@@QAAKXZ|
  00150	e58d003c	 str         r0, [sp, #0x3C]
  00154	e59d303c	 ldr         r3, [sp, #0x3C]
  00158	e58d3010	 str         r3, [sp, #0x10]

; 68   :     DWORD BaseRateInv = m_pDeviceContext->GetBaseSampleRateInverse();

  0015c	e59d304c	 ldr         r3, [sp, #0x4C]
  00160	e2833050	 add         r3, r3, #0x50
  00164	e5930000	 ldr         r0, [r3]
  00168	eb000000	 bl          |?GetBaseSampleRateInverse@DeviceContext@@QAAKXZ|
  0016c	e58d0040	 str         r0, [sp, #0x40]
  00170	e59d3040	 ldr         r3, [sp, #0x40]
  00174	e58d3004	 str         r3, [sp, #4]

; 69   : 
; 70   :     LONG CurrSamp0 = m_CurrSamp[0];

  00178	e59d304c	 ldr         r3, [sp, #0x4C]
  0017c	e2833080	 add         r3, r3, #0x80
  00180	e5933000	 ldr         r3, [r3]
  00184	e58d3008	 str         r3, [sp, #8]

; 71   :     LONG PrevSamp0 = m_PrevSamp[0];

  00188	e59d304c	 ldr         r3, [sp, #0x4C]
  0018c	e2833078	 add         r3, r3, #0x78
  00190	e5933000	 ldr         r3, [r3]
  00194	e58d3018	 str         r3, [sp, #0x18]

; 72   :     PBYTE pCurrData = m_lpCurrData;

  00198	e59d304c	 ldr         r3, [sp, #0x4C]
  0019c	e2833044	 add         r3, r3, #0x44
  001a0	e5933000	 ldr         r3, [r3]
  001a4	e58d300c	 str         r3, [sp, #0xC]

; 73   :     PBYTE pCurrDataEnd = m_lpCurrDataEnd;

  001a8	e59d304c	 ldr         r3, [sp, #0x4C]
  001ac	e2833048	 add         r3, r3, #0x48
  001b0	e5933000	 ldr         r3, [r3]
  001b4	e58d3014	 str         r3, [sp, #0x14]

; 74   :     LONG fxpGain[2];
; 75   : 
; 76   :     if (pTransferStatus->Mute)

  001b8	e59d305c	 ldr         r3, [sp, #0x5C]
  001bc	e2833004	 add         r3, r3, #4
  001c0	e5933000	 ldr         r3, [r3]
  001c4	e3530000	 cmp         r3, #0
  001c8	0a000004	 beq         |$LN15@Render2|

; 77   :     {
; 78   :         fxpGain[0] = 0;

  001cc	e3a03000	 mov         r3, #0
  001d0	e58d301c	 str         r3, [sp, #0x1C]

; 79   :         fxpGain[1] = 0;

  001d4	e3a03000	 mov         r3, #0
  001d8	e58d3020	 str         r3, [sp, #0x20]

; 80   :     }
; 81   :     else

  001dc	ea000007	 b           |$LN14@Render2|
  001e0		 |$LN15@Render2|

; 82   :     {
; 83   :         fxpGain[0] = m_fxpGain[0];

  001e0	e59d304c	 ldr         r3, [sp, #0x4C]
  001e4	e2833060	 add         r3, r3, #0x60
  001e8	e5933000	 ldr         r3, [r3]
  001ec	e58d301c	 str         r3, [sp, #0x1C]

; 84   :         fxpGain[1] = m_fxpGain[1];

  001f0	e59d304c	 ldr         r3, [sp, #0x4C]
  001f4	e2833064	 add         r3, r3, #0x64
  001f8	e5933000	 ldr         r3, [r3]
  001fc	e58d3020	 str         r3, [sp, #0x20]
  00200		 |$LN14@Render2|
  00200		 |$LN13@Render2|

; 85   :     }
; 86   : 
; 87   :     while (pBuffer < pBufferEnd)

  00200	e59d2050	 ldr         r2, [sp, #0x50]
  00204	e59d3054	 ldr         r3, [sp, #0x54]
  00208	e1520003	 cmp         r2, r3
  0020c	2a000079	 bcs         |$LN12@Render2|
  00210		 |$LN11@Render2|

; 88   :     {
; 89   :         while (CurrPos < 0)

  00210	e59d3024	 ldr         r3, [sp, #0x24]
  00214	e3530000	 cmp         r3, #0
  00218	aa000018	 bge         |$LN10@Render2|

; 90   :         {
; 91   :             if (pCurrData>=pCurrDataEnd)

  0021c	e59d200c	 ldr         r2, [sp, #0xC]
  00220	e59d3014	 ldr         r3, [sp, #0x14]
  00224	e1520003	 cmp         r2, r3
  00228	3a000001	 bcc         |$LN9@Render2|
  0022c	ea000071	 b           |$LN8@Render2|

; 92   :             {
; 93   :                 goto Exit;

  00230	ea000070	 b           |$Exit$35278|
  00234		 |$LN9@Render2|

; 94   :             }
; 95   : 
; 96   :             CurrPos += BaseRate;

  00234	e59d2024	 ldr         r2, [sp, #0x24]
  00238	e59d3010	 ldr         r3, [sp, #0x10]
  0023c	e0823003	 add         r3, r2, r3
  00240	e58d3024	 str         r3, [sp, #0x24]

; 97   : 
; 98   :             PrevSamp0 = CurrSamp0;

  00244	e59d3008	 ldr         r3, [sp, #8]
  00248	e58d3018	 str         r3, [sp, #0x18]

; 99   : 
; 100  :             PPCM_SAMPLE pSampleSrc = (PPCM_SAMPLE)pCurrData;

  0024c	e59d300c	 ldr         r3, [sp, #0xC]
  00250	e58d3034	 str         r3, [sp, #0x34]

; 101  :             CurrSamp0 = (LONG)pSampleSrc->m8.sample;

  00254	e59d3034	 ldr         r3, [sp, #0x34]
  00258	e5d33000	 ldrb        r3, [r3]
  0025c	e58d3008	 str         r3, [sp, #8]

; 102  :             CurrSamp0 = (CurrSamp0 - 128) << 8;

  00260	e59d3008	 ldr         r3, [sp, #8]
  00264	e2433080	 sub         r3, r3, #0x80
  00268	e1a03403	 mov         r3, r3, lsl #8
  0026c	e58d3008	 str         r3, [sp, #8]

; 103  :             pCurrData+=1;

  00270	e59d300c	 ldr         r3, [sp, #0xC]
  00274	e2833001	 add         r3, r3, #1
  00278	e58d300c	 str         r3, [sp, #0xC]

; 104  :         }

  0027c	eaffffe3	 b           |$LN11@Render2|
  00280		 |$LN10@Render2|

; 105  : 
; 106  :         // Calculate ratio between samples as a 17.15 fraction
; 107  :         // (Only use 15 bits to avoid overflow on next multiply)
; 108  :         LONG Ratio;
; 109  :         Ratio = (CurrPos * BaseRateInv)>>17;

  00280	e59d2024	 ldr         r2, [sp, #0x24]
  00284	e59d3004	 ldr         r3, [sp, #4]
  00288	e0030392	 mul         r3, r2, r3
  0028c	e1a038a3	 mov         r3, r3, lsr #17
  00290	e58d3028	 str         r3, [sp, #0x28]

; 110  : 
; 111  :         CurrPos -= ClientRate;

  00294	e59d2024	 ldr         r2, [sp, #0x24]
  00298	e59d3000	 ldr         r3, [sp]
  0029c	e0423003	 sub         r3, r2, r3
  002a0	e58d3024	 str         r3, [sp, #0x24]

; 112  : 
; 113  :         LONG OutSamp0;
; 114  : 
; 115  :         // Calc difference between samples. Note OutSamp0 is a 17-bit signed number now.
; 116  :         OutSamp0 = PrevSamp0 - CurrSamp0;

  002a4	e59d2018	 ldr         r2, [sp, #0x18]
  002a8	e59d3008	 ldr         r3, [sp, #8]
  002ac	e0423003	 sub         r3, r2, r3
  002b0	e58d302c	 str         r3, [sp, #0x2C]

; 117  : 
; 118  :         // Now interpolate
; 119  :         OutSamp0 = (OutSamp0 * Ratio) >> 15;

  002b4	e59d202c	 ldr         r2, [sp, #0x2C]
  002b8	e59d3028	 ldr         r3, [sp, #0x28]
  002bc	e0030392	 mul         r3, r2, r3
  002c0	e1a037c3	 mov         r3, r3, asr #15
  002c4	e58d302c	 str         r3, [sp, #0x2C]

; 120  : 
; 121  :         // Add to previous number
; 122  :         OutSamp0 += CurrSamp0;

  002c8	e59d202c	 ldr         r2, [sp, #0x2C]
  002cc	e59d3008	 ldr         r3, [sp, #8]
  002d0	e0823003	 add         r3, r2, r3
  002d4	e58d302c	 str         r3, [sp, #0x2C]

; 123  : 
; 124  : #if (OUTCHANNELS==2)
; 125  :         LONG OutSamp1;
; 126  :         OutSamp1 = OutSamp0;

  002d8	e59d302c	 ldr         r3, [sp, #0x2C]
  002dc	e58d3030	 str         r3, [sp, #0x30]

; 127  :         OutSamp0 = (OutSamp0 * fxpGain[0]) >> VOLSHIFT;

  002e0	e59d202c	 ldr         r2, [sp, #0x2C]
  002e4	e59d301c	 ldr         r3, [sp, #0x1C]
  002e8	e0030392	 mul         r3, r2, r3
  002ec	e1a03843	 mov         r3, r3, asr #16
  002f0	e58d302c	 str         r3, [sp, #0x2C]

; 128  :         OutSamp1 = (OutSamp1 * fxpGain[1]) >> VOLSHIFT;

  002f4	e59d2030	 ldr         r2, [sp, #0x30]
  002f8	e59d3020	 ldr         r3, [sp, #0x20]
  002fc	e0030392	 mul         r3, r2, r3
  00300	e1a03843	 mov         r3, r3, asr #16
  00304	e58d3030	 str         r3, [sp, #0x30]

; 129  :         if (pBuffer < pBufferLast)

  00308	e59d2050	 ldr         r2, [sp, #0x50]
  0030c	e59d3058	 ldr         r3, [sp, #0x58]
  00310	e1520003	 cmp         r2, r3
  00314	2a000028	 bcs         |$LN7@Render2|

; 130  :         {
; 131  :             OutSamp0 += ((HWSAMPLE *)pBuffer)[0];

  00318	e59d3050	 ldr         r3, [sp, #0x50]
  0031c	e1d320f0	 ldrsh       r2, [r3]
  00320	e59d302c	 ldr         r3, [sp, #0x2C]
  00324	e0833002	 add         r3, r3, r2
  00328	e58d302c	 str         r3, [sp, #0x2C]

; 132  :             OutSamp1 += ((HWSAMPLE *)pBuffer)[1];

  0032c	e59d3050	 ldr         r3, [sp, #0x50]
  00330	e2833002	 add         r3, r3, #2
  00334	e1d320f0	 ldrsh       r2, [r3]
  00338	e59d3030	 ldr         r3, [sp, #0x30]
  0033c	e0833002	 add         r3, r3, r2
  00340	e58d3030	 str         r3, [sp, #0x30]

; 133  : #if USE_MIX_SATURATE
; 134  :             // Handle saturation
; 135  :             if (OutSamp0>AUDIO_SAMPLE_MAX)

  00344	e59d202c	 ldr         r2, [sp, #0x2C]
  00348	e3a03c7f	 mov         r3, #0x7F, 24
  0034c	e38330ff	 orr         r3, r3, #0xFF
  00350	e1520003	 cmp         r2, r3
  00354	da000003	 ble         |$LN6@Render2|

; 136  :             {
; 137  :                 OutSamp0=AUDIO_SAMPLE_MAX;

  00358	e3a03c7f	 mov         r3, #0x7F, 24
  0035c	e38330ff	 orr         r3, r3, #0xFF
  00360	e58d302c	 str         r3, [sp, #0x2C]
  00364	ea000005	 b           |$LN5@Render2|
  00368		 |$LN6@Render2|

; 138  :             }
; 139  :             else if (OutSamp0<AUDIO_SAMPLE_MIN)

  00368	e59d302c	 ldr         r3, [sp, #0x2C]
  0036c	e3730902	 cmn         r3, #2, 18
  00370	aa000002	 bge         |$LN4@Render2|

; 140  :             {
; 141  :                 OutSamp0=AUDIO_SAMPLE_MIN;

  00374	e3e030ff	 mvn         r3, #0xFF
  00378	e1a03383	 mov         r3, r3, lsl #7
  0037c	e58d302c	 str         r3, [sp, #0x2C]
  00380		 |$LN4@Render2|
  00380		 |$LN5@Render2|

; 142  :             }
; 143  :             if (OutSamp1>AUDIO_SAMPLE_MAX)

  00380	e59d2030	 ldr         r2, [sp, #0x30]
  00384	e3a03c7f	 mov         r3, #0x7F, 24
  00388	e38330ff	 orr         r3, r3, #0xFF
  0038c	e1520003	 cmp         r2, r3
  00390	da000003	 ble         |$LN3@Render2|

; 144  :             {
; 145  :                 OutSamp1=AUDIO_SAMPLE_MAX;

  00394	e3a03c7f	 mov         r3, #0x7F, 24
  00398	e38330ff	 orr         r3, r3, #0xFF
  0039c	e58d3030	 str         r3, [sp, #0x30]
  003a0	ea000005	 b           |$LN2@Render2|
  003a4		 |$LN3@Render2|

; 146  :             }
; 147  :             else if (OutSamp1<AUDIO_SAMPLE_MIN)

  003a4	e59d3030	 ldr         r3, [sp, #0x30]
  003a8	e3730902	 cmn         r3, #2, 18
  003ac	aa000002	 bge         |$LN1@Render2|

; 148  :             {
; 149  :                 OutSamp1=AUDIO_SAMPLE_MIN;

  003b0	e3e030ff	 mvn         r3, #0xFF
  003b4	e1a03383	 mov         r3, r3, lsl #7
  003b8	e58d3030	 str         r3, [sp, #0x30]
  003bc		 |$LN1@Render2|
  003bc		 |$LN2@Render2|
  003bc		 |$LN7@Render2|

; 150  :             }
; 151  : #endif
; 152  :         }
; 153  :         ((HWSAMPLE *)pBuffer)[0] = (HWSAMPLE)OutSamp0;

  003bc	e59d302c	 ldr         r3, [sp, #0x2C]
  003c0	e1a02803	 mov         r2, r3, lsl #16
  003c4	e1a02842	 mov         r2, r2, asr #16
  003c8	e59d3050	 ldr         r3, [sp, #0x50]
  003cc	e1c320b0	 strh        r2, [r3]

; 154  :         ((HWSAMPLE *)pBuffer)[1] = (HWSAMPLE)OutSamp1;

  003d0	e59d3030	 ldr         r3, [sp, #0x30]
  003d4	e1a02803	 mov         r2, r3, lsl #16
  003d8	e1a02842	 mov         r2, r2, asr #16
  003dc	e59d3050	 ldr         r3, [sp, #0x50]
  003e0	e2833002	 add         r3, r3, #2
  003e4	e1c320b0	 strh        r2, [r3]

; 155  :         pBuffer += 2*sizeof(HWSAMPLE);

  003e8	e59d3050	 ldr         r3, [sp, #0x50]
  003ec	e2833004	 add         r3, r3, #4
  003f0	e58d3050	 str         r3, [sp, #0x50]

; 156  : #else
; 157  :         OutSamp0 = (OutSamp0 * fxpGain[0]) >> VOLSHIFT;
; 158  :         if (pBuffer < pBufferLast)
; 159  :         {
; 160  :             OutSamp0 += ((HWSAMPLE *)pBuffer)[0];
; 161  : #if USE_MIX_SATURATE
; 162  :             // Handle saturation
; 163  :             if (OutSamp0>AUDIO_SAMPLE_MAX)
; 164  :             {
; 165  :                 OutSamp0=AUDIO_SAMPLE_MAX;
; 166  :             }
; 167  :             else if (OutSamp0<AUDIO_SAMPLE_MIN)
; 168  :             {
; 169  :                 OutSamp0=AUDIO_SAMPLE_MIN;
; 170  :             }
; 171  : #endif
; 172  :         }
; 173  :         ((HWSAMPLE *)pBuffer)[0] = (HWSAMPLE)OutSamp0;
; 174  :         pBuffer += sizeof(HWSAMPLE);
; 175  : #endif
; 176  :     }

  003f4	eaffff81	 b           |$LN13@Render2|
  003f8		 |$LN12@Render2|
  003f8		 |$LN8@Render2|
  003f8		 |$Exit$35278|

; 177  : 
; 178  :     Exit:
; 179  : 
; 180  :     m_dwByteCount += (pCurrData - m_lpCurrData);

  003f8	e59d304c	 ldr         r3, [sp, #0x4C]
  003fc	e283104c	 add         r1, r3, #0x4C
  00400	e59d304c	 ldr         r3, [sp, #0x4C]
  00404	e2833044	 add         r3, r3, #0x44
  00408	e59d200c	 ldr         r2, [sp, #0xC]
  0040c	e5933000	 ldr         r3, [r3]
  00410	e0422003	 sub         r2, r2, r3
  00414	e5913000	 ldr         r3, [r1]
  00418	e0832002	 add         r2, r3, r2
  0041c	e59d304c	 ldr         r3, [sp, #0x4C]
  00420	e283304c	 add         r3, r3, #0x4C
  00424	e5832000	 str         r2, [r3]

; 181  :     m_lpCurrData = pCurrData;

  00428	e59d304c	 ldr         r3, [sp, #0x4C]
  0042c	e2832044	 add         r2, r3, #0x44
  00430	e59d300c	 ldr         r3, [sp, #0xC]
  00434	e5823000	 str         r3, [r2]

; 182  :     m_CurrPos = CurrPos;

  00438	e59d304c	 ldr         r3, [sp, #0x4C]
  0043c	e2832088	 add         r2, r3, #0x88
  00440	e59d3024	 ldr         r3, [sp, #0x24]
  00444	e5823000	 str         r3, [r2]

; 183  :     m_PrevSamp[0] = PrevSamp0;

  00448	e59d304c	 ldr         r3, [sp, #0x4C]
  0044c	e2832078	 add         r2, r3, #0x78
  00450	e59d3018	 ldr         r3, [sp, #0x18]
  00454	e5823000	 str         r3, [r2]

; 184  :     m_CurrSamp[0] = CurrSamp0;

  00458	e59d304c	 ldr         r3, [sp, #0x4C]
  0045c	e2832080	 add         r2, r3, #0x80
  00460	e59d3008	 ldr         r3, [sp, #8]
  00464	e5823000	 str         r3, [r2]

; 185  :     return pBuffer;

  00468	e59d3050	 ldr         r3, [sp, #0x50]
  0046c	e58d3038	 str         r3, [sp, #0x38]

; 186  : }

  00470	e59d0038	 ldr         r0, [sp, #0x38]
  00474	e28dd044	 add         sp, sp, #0x44
  00478	e89d6000	 ldmia       sp, {sp, lr}
  0047c	e12fff1e	 bx          lr
  00480		 |$M35549|

			 ENDP  ; |?Render2@OutputStreamContextM8@@UAAPAEPAE00PAUTRANSFER_STATUS@@@Z|, OutputStreamContextM8::Render2

	EXPORT	|?Render2@OutputStreamContextM16@@UAAPAEPAE00PAUTRANSFER_STATUS@@@Z| ; OutputStreamContextM16::Render2

  00020			 AREA	 |.pdata|, PDATA
|$T35557| DCD	|$LN20@Render2@2|
	DCD	0x4000d804
; Function compile flags: /Odtp

  00480			 AREA	 |.text|, CODE, ARM

  00480		 |?Render2@OutputStreamContextM16@@UAAPAEPAE00PAUTRANSFER_STATUS@@@Z| PROC ; OutputStreamContextM16::Render2

; 189  : {

  00480		 |$LN20@Render2@2|
  00480	e1a0c00d	 mov         r12, sp
  00484	e92d000f	 stmdb       sp!, {r0 - r3}
  00488	e92d5000	 stmdb       sp!, {r12, lr}
  0048c	e24dd044	 sub         sp, sp, #0x44
  00490		 |$M35554|

; 190  :     LONG CurrPos = m_CurrPos;

  00490	e59d304c	 ldr         r3, [sp, #0x4C]
  00494	e2833088	 add         r3, r3, #0x88
  00498	e5933000	 ldr         r3, [r3]
  0049c	e58d3024	 str         r3, [sp, #0x24]

; 191  :     DWORD ClientRate = m_ClientRate;

  004a0	e59d304c	 ldr         r3, [sp, #0x4C]
  004a4	e283308c	 add         r3, r3, #0x8C
  004a8	e5933000	 ldr         r3, [r3]
  004ac	e58d3000	 str         r3, [sp]

; 192  :     DWORD BaseRate = m_pDeviceContext->GetBaseSampleRate();

  004b0	e59d304c	 ldr         r3, [sp, #0x4C]
  004b4	e2833050	 add         r3, r3, #0x50
  004b8	e5930000	 ldr         r0, [r3]
  004bc	eb000000	 bl          |?GetBaseSampleRate@DeviceContext@@QAAKXZ|
  004c0	e58d003c	 str         r0, [sp, #0x3C]
  004c4	e59d303c	 ldr         r3, [sp, #0x3C]
  004c8	e58d3010	 str         r3, [sp, #0x10]

; 193  :     DWORD BaseRateInv = m_pDeviceContext->GetBaseSampleRateInverse();

  004cc	e59d304c	 ldr         r3, [sp, #0x4C]
  004d0	e2833050	 add         r3, r3, #0x50
  004d4	e5930000	 ldr         r0, [r3]
  004d8	eb000000	 bl          |?GetBaseSampleRateInverse@DeviceContext@@QAAKXZ|
  004dc	e58d0040	 str         r0, [sp, #0x40]
  004e0	e59d3040	 ldr         r3, [sp, #0x40]
  004e4	e58d3004	 str         r3, [sp, #4]

; 194  : 
; 195  :     LONG CurrSamp0 = m_CurrSamp[0];

  004e8	e59d304c	 ldr         r3, [sp, #0x4C]
  004ec	e2833080	 add         r3, r3, #0x80
  004f0	e5933000	 ldr         r3, [r3]
  004f4	e58d3008	 str         r3, [sp, #8]

; 196  :     LONG PrevSamp0 = m_PrevSamp[0];

  004f8	e59d304c	 ldr         r3, [sp, #0x4C]
  004fc	e2833078	 add         r3, r3, #0x78
  00500	e5933000	 ldr         r3, [r3]
  00504	e58d3018	 str         r3, [sp, #0x18]

; 197  :     PBYTE pCurrData = m_lpCurrData;

  00508	e59d304c	 ldr         r3, [sp, #0x4C]
  0050c	e2833044	 add         r3, r3, #0x44
  00510	e5933000	 ldr         r3, [r3]
  00514	e58d300c	 str         r3, [sp, #0xC]

; 198  :     PBYTE pCurrDataEnd = m_lpCurrDataEnd;

  00518	e59d304c	 ldr         r3, [sp, #0x4C]
  0051c	e2833048	 add         r3, r3, #0x48
  00520	e5933000	 ldr         r3, [r3]
  00524	e58d3014	 str         r3, [sp, #0x14]

; 199  :     LONG fxpGain[2];
; 200  : 
; 201  :     if (pTransferStatus->Mute)

  00528	e59d305c	 ldr         r3, [sp, #0x5C]
  0052c	e2833004	 add         r3, r3, #4
  00530	e5933000	 ldr         r3, [r3]
  00534	e3530000	 cmp         r3, #0
  00538	0a000004	 beq         |$LN15@Render2@2|

; 202  :     {
; 203  :         fxpGain[0] = 0;

  0053c	e3a03000	 mov         r3, #0
  00540	e58d301c	 str         r3, [sp, #0x1C]

; 204  :         fxpGain[1] = 0;

  00544	e3a03000	 mov         r3, #0
  00548	e58d3020	 str         r3, [sp, #0x20]

; 205  :     }
; 206  :     else

  0054c	ea000007	 b           |$LN14@Render2@2|
  00550		 |$LN15@Render2@2|

; 207  :     {
; 208  :         fxpGain[0] = m_fxpGain[0];

  00550	e59d304c	 ldr         r3, [sp, #0x4C]
  00554	e2833060	 add         r3, r3, #0x60
  00558	e5933000	 ldr         r3, [r3]
  0055c	e58d301c	 str         r3, [sp, #0x1C]

; 209  :         fxpGain[1] = m_fxpGain[1];

  00560	e59d304c	 ldr         r3, [sp, #0x4C]
  00564	e2833064	 add         r3, r3, #0x64
  00568	e5933000	 ldr         r3, [r3]
  0056c	e58d3020	 str         r3, [sp, #0x20]
  00570		 |$LN14@Render2@2|
  00570		 |$LN13@Render2@2|

; 210  :     }
; 211  : 
; 212  :     while (pBuffer < pBufferEnd)

  00570	e59d2050	 ldr         r2, [sp, #0x50]
  00574	e59d3054	 ldr         r3, [sp, #0x54]
  00578	e1520003	 cmp         r2, r3
  0057c	2a000075	 bcs         |$LN12@Render2@2|
  00580		 |$LN11@Render2@2|

; 213  :     {
; 214  :         while (CurrPos < 0)

  00580	e59d3024	 ldr         r3, [sp, #0x24]
  00584	e3530000	 cmp         r3, #0
  00588	aa000014	 bge         |$LN10@Render2@2|

; 215  :         {
; 216  :             if (pCurrData>=pCurrDataEnd)

  0058c	e59d200c	 ldr         r2, [sp, #0xC]
  00590	e59d3014	 ldr         r3, [sp, #0x14]
  00594	e1520003	 cmp         r2, r3
  00598	3a000001	 bcc         |$LN9@Render2@2|
  0059c	ea00006d	 b           |$LN8@Render2@2|

; 217  :             {
; 218  :                 goto Exit;

  005a0	ea00006c	 b           |$Exit$35325|
  005a4		 |$LN9@Render2@2|

; 219  :             }
; 220  : 
; 221  :             CurrPos += BaseRate;

  005a4	e59d2024	 ldr         r2, [sp, #0x24]
  005a8	e59d3010	 ldr         r3, [sp, #0x10]
  005ac	e0823003	 add         r3, r2, r3
  005b0	e58d3024	 str         r3, [sp, #0x24]

; 222  : 
; 223  :             PrevSamp0 = CurrSamp0;

  005b4	e59d3008	 ldr         r3, [sp, #8]
  005b8	e58d3018	 str         r3, [sp, #0x18]

; 224  : 
; 225  :             PPCM_SAMPLE pSampleSrc = (PPCM_SAMPLE)pCurrData;

  005bc	e59d300c	 ldr         r3, [sp, #0xC]
  005c0	e58d3034	 str         r3, [sp, #0x34]

; 226  :             CurrSamp0 = (LONG)pSampleSrc->m16.sample;

  005c4	e59d3034	 ldr         r3, [sp, #0x34]
  005c8	e1d330f0	 ldrsh       r3, [r3]
  005cc	e58d3008	 str         r3, [sp, #8]

; 227  :             pCurrData+=2;

  005d0	e59d300c	 ldr         r3, [sp, #0xC]
  005d4	e2833002	 add         r3, r3, #2
  005d8	e58d300c	 str         r3, [sp, #0xC]

; 228  :         }

  005dc	eaffffe7	 b           |$LN11@Render2@2|
  005e0		 |$LN10@Render2@2|

; 229  : 
; 230  :         // Calculate ratio between samples as a 17.15 fraction
; 231  :         // (Only use 15 bits to avoid overflow on next multiply)
; 232  :         LONG Ratio;
; 233  :         Ratio = (CurrPos * BaseRateInv)>>17;

  005e0	e59d2024	 ldr         r2, [sp, #0x24]
  005e4	e59d3004	 ldr         r3, [sp, #4]
  005e8	e0030392	 mul         r3, r2, r3
  005ec	e1a038a3	 mov         r3, r3, lsr #17
  005f0	e58d3028	 str         r3, [sp, #0x28]

; 234  : 
; 235  :         CurrPos -= ClientRate;

  005f4	e59d2024	 ldr         r2, [sp, #0x24]
  005f8	e59d3000	 ldr         r3, [sp]
  005fc	e0423003	 sub         r3, r2, r3
  00600	e58d3024	 str         r3, [sp, #0x24]

; 236  : 
; 237  :         LONG OutSamp0;
; 238  : 
; 239  :         // Calc difference between samples. Note OutSamp0 is a 17-bit signed number now.
; 240  :         OutSamp0 = PrevSamp0 - CurrSamp0;

  00604	e59d2018	 ldr         r2, [sp, #0x18]
  00608	e59d3008	 ldr         r3, [sp, #8]
  0060c	e0423003	 sub         r3, r2, r3
  00610	e58d302c	 str         r3, [sp, #0x2C]

; 241  : 
; 242  :         // Now interpolate
; 243  :         OutSamp0 = (OutSamp0 * Ratio) >> 15;

  00614	e59d202c	 ldr         r2, [sp, #0x2C]
  00618	e59d3028	 ldr         r3, [sp, #0x28]
  0061c	e0030392	 mul         r3, r2, r3
  00620	e1a037c3	 mov         r3, r3, asr #15
  00624	e58d302c	 str         r3, [sp, #0x2C]

; 244  : 
; 245  :         // Add to previous number
; 246  :         OutSamp0 += CurrSamp0;

  00628	e59d202c	 ldr         r2, [sp, #0x2C]
  0062c	e59d3008	 ldr         r3, [sp, #8]
  00630	e0823003	 add         r3, r2, r3
  00634	e58d302c	 str         r3, [sp, #0x2C]

; 247  : 
; 248  : #if (OUTCHANNELS==2)
; 249  :         LONG OutSamp1;
; 250  :         OutSamp1=OutSamp0;

  00638	e59d302c	 ldr         r3, [sp, #0x2C]
  0063c	e58d3030	 str         r3, [sp, #0x30]

; 251  :         OutSamp0 = (OutSamp0 * fxpGain[0]) >> VOLSHIFT;

  00640	e59d202c	 ldr         r2, [sp, #0x2C]
  00644	e59d301c	 ldr         r3, [sp, #0x1C]
  00648	e0030392	 mul         r3, r2, r3
  0064c	e1a03843	 mov         r3, r3, asr #16
  00650	e58d302c	 str         r3, [sp, #0x2C]

; 252  :         OutSamp1 = (OutSamp1 * fxpGain[1]) >> VOLSHIFT;

  00654	e59d2030	 ldr         r2, [sp, #0x30]
  00658	e59d3020	 ldr         r3, [sp, #0x20]
  0065c	e0030392	 mul         r3, r2, r3
  00660	e1a03843	 mov         r3, r3, asr #16
  00664	e58d3030	 str         r3, [sp, #0x30]

; 253  :         if (pBuffer < pBufferLast)

  00668	e59d2050	 ldr         r2, [sp, #0x50]
  0066c	e59d3058	 ldr         r3, [sp, #0x58]
  00670	e1520003	 cmp         r2, r3
  00674	2a000028	 bcs         |$LN7@Render2@2|

; 254  :         {
; 255  :             OutSamp0 += ((HWSAMPLE *)pBuffer)[0];

  00678	e59d3050	 ldr         r3, [sp, #0x50]
  0067c	e1d320f0	 ldrsh       r2, [r3]
  00680	e59d302c	 ldr         r3, [sp, #0x2C]
  00684	e0833002	 add         r3, r3, r2
  00688	e58d302c	 str         r3, [sp, #0x2C]

; 256  :             OutSamp1 += ((HWSAMPLE *)pBuffer)[1];

  0068c	e59d3050	 ldr         r3, [sp, #0x50]
  00690	e2833002	 add         r3, r3, #2
  00694	e1d320f0	 ldrsh       r2, [r3]
  00698	e59d3030	 ldr         r3, [sp, #0x30]
  0069c	e0833002	 add         r3, r3, r2
  006a0	e58d3030	 str         r3, [sp, #0x30]

; 257  : #if USE_MIX_SATURATE
; 258  :             // Handle saturation
; 259  :             if (OutSamp0>AUDIO_SAMPLE_MAX)

  006a4	e59d202c	 ldr         r2, [sp, #0x2C]
  006a8	e3a03c7f	 mov         r3, #0x7F, 24
  006ac	e38330ff	 orr         r3, r3, #0xFF
  006b0	e1520003	 cmp         r2, r3
  006b4	da000003	 ble         |$LN6@Render2@2|

; 260  :             {
; 261  :                 OutSamp0=AUDIO_SAMPLE_MAX;

  006b8	e3a03c7f	 mov         r3, #0x7F, 24
  006bc	e38330ff	 orr         r3, r3, #0xFF
  006c0	e58d302c	 str         r3, [sp, #0x2C]
  006c4	ea000005	 b           |$LN5@Render2@2|
  006c8		 |$LN6@Render2@2|

; 262  :             }
; 263  :             else if (OutSamp0<AUDIO_SAMPLE_MIN)

  006c8	e59d302c	 ldr         r3, [sp, #0x2C]
  006cc	e3730902	 cmn         r3, #2, 18
  006d0	aa000002	 bge         |$LN4@Render2@2|

; 264  :             {
; 265  :                 OutSamp0=AUDIO_SAMPLE_MIN;

  006d4	e3e030ff	 mvn         r3, #0xFF
  006d8	e1a03383	 mov         r3, r3, lsl #7
  006dc	e58d302c	 str         r3, [sp, #0x2C]
  006e0		 |$LN4@Render2@2|
  006e0		 |$LN5@Render2@2|

; 266  :             }
; 267  :             if (OutSamp1>AUDIO_SAMPLE_MAX)

  006e0	e59d2030	 ldr         r2, [sp, #0x30]
  006e4	e3a03c7f	 mov         r3, #0x7F, 24
  006e8	e38330ff	 orr         r3, r3, #0xFF
  006ec	e1520003	 cmp         r2, r3
  006f0	da000003	 ble         |$LN3@Render2@2|

; 268  :             {
; 269  :                 OutSamp1=AUDIO_SAMPLE_MAX;

  006f4	e3a03c7f	 mov         r3, #0x7F, 24
  006f8	e38330ff	 orr         r3, r3, #0xFF
  006fc	e58d3030	 str         r3, [sp, #0x30]
  00700	ea000005	 b           |$LN2@Render2@2|
  00704		 |$LN3@Render2@2|

; 270  :             }
; 271  :             else if (OutSamp1<AUDIO_SAMPLE_MIN)

  00704	e59d3030	 ldr         r3, [sp, #0x30]
  00708	e3730902	 cmn         r3, #2, 18
  0070c	aa000002	 bge         |$LN1@Render2@2|

; 272  :             {
; 273  :                 OutSamp1=AUDIO_SAMPLE_MIN;

  00710	e3e030ff	 mvn         r3, #0xFF
  00714	e1a03383	 mov         r3, r3, lsl #7
  00718	e58d3030	 str         r3, [sp, #0x30]
  0071c		 |$LN1@Render2@2|
  0071c		 |$LN2@Render2@2|
  0071c		 |$LN7@Render2@2|

; 274  :             }
; 275  : #endif
; 276  :         }
; 277  :         ((HWSAMPLE *)pBuffer)[0] = (HWSAMPLE)OutSamp0;

  0071c	e59d302c	 ldr         r3, [sp, #0x2C]
  00720	e1a02803	 mov         r2, r3, lsl #16
  00724	e1a02842	 mov         r2, r2, asr #16
  00728	e59d3050	 ldr         r3, [sp, #0x50]
  0072c	e1c320b0	 strh        r2, [r3]

; 278  :         ((HWSAMPLE *)pBuffer)[1] = (HWSAMPLE)OutSamp1;

  00730	e59d3030	 ldr         r3, [sp, #0x30]
  00734	e1a02803	 mov         r2, r3, lsl #16
  00738	e1a02842	 mov         r2, r2, asr #16
  0073c	e59d3050	 ldr         r3, [sp, #0x50]
  00740	e2833002	 add         r3, r3, #2
  00744	e1c320b0	 strh        r2, [r3]

; 279  :         pBuffer += 2*sizeof(HWSAMPLE);

  00748	e59d3050	 ldr         r3, [sp, #0x50]
  0074c	e2833004	 add         r3, r3, #4
  00750	e58d3050	 str         r3, [sp, #0x50]

; 280  : #else
; 281  :         OutSamp0 = (OutSamp0 * fxpGain[0]) >> VOLSHIFT;
; 282  :         if (pBuffer < pBufferLast)
; 283  :         {
; 284  :             OutSamp0 += ((HWSAMPLE *)pBuffer)[0];
; 285  : #if USE_MIX_SATURATE
; 286  :             // Handle saturation
; 287  :             if (OutSamp0>AUDIO_SAMPLE_MAX)
; 288  :             {
; 289  :                 OutSamp0=AUDIO_SAMPLE_MAX;
; 290  :             }
; 291  :             else if (OutSamp0<AUDIO_SAMPLE_MIN)
; 292  :             {
; 293  :                 OutSamp0=AUDIO_SAMPLE_MIN;
; 294  :             }
; 295  : #endif
; 296  :         }
; 297  :         ((HWSAMPLE *)pBuffer)[0] = (HWSAMPLE)OutSamp0;
; 298  :         pBuffer += sizeof(HWSAMPLE);
; 299  : #endif
; 300  :     }

  00754	eaffff85	 b           |$LN13@Render2@2|
  00758		 |$LN12@Render2@2|
  00758		 |$LN8@Render2@2|
  00758		 |$Exit$35325|

; 301  : 
; 302  :     Exit:
; 303  :     m_dwByteCount += (pCurrData - m_lpCurrData);

  00758	e59d304c	 ldr         r3, [sp, #0x4C]
  0075c	e283104c	 add         r1, r3, #0x4C
  00760	e59d304c	 ldr         r3, [sp, #0x4C]
  00764	e2833044	 add         r3, r3, #0x44
  00768	e59d200c	 ldr         r2, [sp, #0xC]
  0076c	e5933000	 ldr         r3, [r3]
  00770	e0422003	 sub         r2, r2, r3
  00774	e5913000	 ldr         r3, [r1]
  00778	e0832002	 add         r2, r3, r2
  0077c	e59d304c	 ldr         r3, [sp, #0x4C]
  00780	e283304c	 add         r3, r3, #0x4C
  00784	e5832000	 str         r2, [r3]

; 304  :     m_lpCurrData = pCurrData;

  00788	e59d304c	 ldr         r3, [sp, #0x4C]
  0078c	e2832044	 add         r2, r3, #0x44
  00790	e59d300c	 ldr         r3, [sp, #0xC]
  00794	e5823000	 str         r3, [r2]

; 305  :     m_CurrPos = CurrPos;

  00798	e59d304c	 ldr         r3, [sp, #0x4C]
  0079c	e2832088	 add         r2, r3, #0x88
  007a0	e59d3024	 ldr         r3, [sp, #0x24]
  007a4	e5823000	 str         r3, [r2]

; 306  :     m_PrevSamp[0] = PrevSamp0;

  007a8	e59d304c	 ldr         r3, [sp, #0x4C]
  007ac	e2832078	 add         r2, r3, #0x78
  007b0	e59d3018	 ldr         r3, [sp, #0x18]
  007b4	e5823000	 str         r3, [r2]

; 307  :     m_CurrSamp[0] = CurrSamp0;

  007b8	e59d304c	 ldr         r3, [sp, #0x4C]
  007bc	e2832080	 add         r2, r3, #0x80
  007c0	e59d3008	 ldr         r3, [sp, #8]
  007c4	e5823000	 str         r3, [r2]

; 308  :     return pBuffer;

  007c8	e59d3050	 ldr         r3, [sp, #0x50]
  007cc	e58d3038	 str         r3, [sp, #0x38]

; 309  : }

  007d0	e59d0038	 ldr         r0, [sp, #0x38]
  007d4	e28dd044	 add         sp, sp, #0x44
  007d8	e89d6000	 ldmia       sp, {sp, lr}
  007dc	e12fff1e	 bx          lr
  007e0		 |$M35555|

			 ENDP  ; |?Render2@OutputStreamContextM16@@UAAPAEPAE00PAUTRANSFER_STATUS@@@Z|, OutputStreamContextM16::Render2

	EXPORT	|?Render2@OutputStreamContextS8@@UAAPAEPAE00PAUTRANSFER_STATUS@@@Z| ; OutputStreamContextS8::Render2

  00028			 AREA	 |.pdata|, PDATA
|$T35563| DCD	|$LN20@Render2@3|
	DCD	0x40010104
; Function compile flags: /Odtp

  007e0			 AREA	 |.text|, CODE, ARM

  007e0		 |?Render2@OutputStreamContextS8@@UAAPAEPAE00PAUTRANSFER_STATUS@@@Z| PROC ; OutputStreamContextS8::Render2

; 313  : {

  007e0		 |$LN20@Render2@3|
  007e0	e1a0c00d	 mov         r12, sp
  007e4	e92d000f	 stmdb       sp!, {r0 - r3}
  007e8	e92d5000	 stmdb       sp!, {r12, lr}
  007ec	e24dd04c	 sub         sp, sp, #0x4C
  007f0		 |$M35560|

; 314  :     LONG CurrPos = m_CurrPos;

  007f0	e59d3054	 ldr         r3, [sp, #0x54]
  007f4	e2833088	 add         r3, r3, #0x88
  007f8	e5933000	 ldr         r3, [r3]
  007fc	e58d302c	 str         r3, [sp, #0x2C]

; 315  :     DWORD ClientRate = m_ClientRate;

  00800	e59d3054	 ldr         r3, [sp, #0x54]
  00804	e283308c	 add         r3, r3, #0x8C
  00808	e5933000	 ldr         r3, [r3]
  0080c	e58d3000	 str         r3, [sp]

; 316  :     DWORD BaseRate = m_pDeviceContext->GetBaseSampleRate();

  00810	e59d3054	 ldr         r3, [sp, #0x54]
  00814	e2833050	 add         r3, r3, #0x50
  00818	e5930000	 ldr         r0, [r3]
  0081c	eb000000	 bl          |?GetBaseSampleRate@DeviceContext@@QAAKXZ|
  00820	e58d0044	 str         r0, [sp, #0x44]
  00824	e59d3044	 ldr         r3, [sp, #0x44]
  00828	e58d3018	 str         r3, [sp, #0x18]

; 317  :     DWORD BaseRateInv = m_pDeviceContext->GetBaseSampleRateInverse();

  0082c	e59d3054	 ldr         r3, [sp, #0x54]
  00830	e2833050	 add         r3, r3, #0x50
  00834	e5930000	 ldr         r0, [r3]
  00838	eb000000	 bl          |?GetBaseSampleRateInverse@DeviceContext@@QAAKXZ|
  0083c	e58d0048	 str         r0, [sp, #0x48]
  00840	e59d3048	 ldr         r3, [sp, #0x48]
  00844	e58d3004	 str         r3, [sp, #4]

; 318  : 
; 319  :     LONG CurrSamp0 = m_CurrSamp[0];

  00848	e59d3054	 ldr         r3, [sp, #0x54]
  0084c	e2833080	 add         r3, r3, #0x80
  00850	e5933000	 ldr         r3, [r3]
  00854	e58d300c	 str         r3, [sp, #0xC]

; 320  :     LONG CurrSamp1 = m_CurrSamp[1];

  00858	e59d3054	 ldr         r3, [sp, #0x54]
  0085c	e2833084	 add         r3, r3, #0x84
  00860	e5933000	 ldr         r3, [r3]
  00864	e58d3008	 str         r3, [sp, #8]

; 321  :     LONG PrevSamp0 = m_PrevSamp[0];

  00868	e59d3054	 ldr         r3, [sp, #0x54]
  0086c	e2833078	 add         r3, r3, #0x78
  00870	e5933000	 ldr         r3, [r3]
  00874	e58d3020	 str         r3, [sp, #0x20]

; 322  :     LONG PrevSamp1 = m_PrevSamp[1];

  00878	e59d3054	 ldr         r3, [sp, #0x54]
  0087c	e283307c	 add         r3, r3, #0x7C
  00880	e5933000	 ldr         r3, [r3]
  00884	e58d3010	 str         r3, [sp, #0x10]

; 323  :     PBYTE pCurrData = m_lpCurrData;

  00888	e59d3054	 ldr         r3, [sp, #0x54]
  0088c	e2833044	 add         r3, r3, #0x44
  00890	e5933000	 ldr         r3, [r3]
  00894	e58d3014	 str         r3, [sp, #0x14]

; 324  :     PBYTE pCurrDataEnd = m_lpCurrDataEnd;

  00898	e59d3054	 ldr         r3, [sp, #0x54]
  0089c	e2833048	 add         r3, r3, #0x48
  008a0	e5933000	 ldr         r3, [r3]
  008a4	e58d301c	 str         r3, [sp, #0x1C]

; 325  :     LONG fxpGain[2];
; 326  : 
; 327  :     if (pTransferStatus->Mute)

  008a8	e59d3064	 ldr         r3, [sp, #0x64]
  008ac	e2833004	 add         r3, r3, #4
  008b0	e5933000	 ldr         r3, [r3]
  008b4	e3530000	 cmp         r3, #0
  008b8	0a000004	 beq         |$LN15@Render2@3|

; 328  :     {
; 329  :         fxpGain[0] = 0;

  008bc	e3a03000	 mov         r3, #0
  008c0	e58d3024	 str         r3, [sp, #0x24]

; 330  :         fxpGain[1] = 0;

  008c4	e3a03000	 mov         r3, #0
  008c8	e58d3028	 str         r3, [sp, #0x28]

; 331  :     }
; 332  :     else

  008cc	ea000007	 b           |$LN14@Render2@3|
  008d0		 |$LN15@Render2@3|

; 333  :     {
; 334  :         fxpGain[0] = m_fxpGain[0];

  008d0	e59d3054	 ldr         r3, [sp, #0x54]
  008d4	e2833060	 add         r3, r3, #0x60
  008d8	e5933000	 ldr         r3, [r3]
  008dc	e58d3024	 str         r3, [sp, #0x24]

; 335  :         fxpGain[1] = m_fxpGain[1];

  008e0	e59d3054	 ldr         r3, [sp, #0x54]
  008e4	e2833064	 add         r3, r3, #0x64
  008e8	e5933000	 ldr         r3, [r3]
  008ec	e58d3028	 str         r3, [sp, #0x28]
  008f0		 |$LN14@Render2@3|
  008f0		 |$LN13@Render2@3|

; 336  :     }
; 337  : 
; 338  :     while (pBuffer < pBufferEnd)

  008f0	e59d2058	 ldr         r2, [sp, #0x58]
  008f4	e59d305c	 ldr         r3, [sp, #0x5C]
  008f8	e1520003	 cmp         r2, r3
  008fc	2a00008e	 bcs         |$LN12@Render2@3|
  00900		 |$LN11@Render2@3|

; 339  :     {
; 340  :         while (CurrPos < 0)

  00900	e59d302c	 ldr         r3, [sp, #0x2C]
  00904	e3530000	 cmp         r3, #0
  00908	aa000022	 bge         |$LN10@Render2@3|

; 341  :         {
; 342  :             if (pCurrData>=pCurrDataEnd)

  0090c	e59d2014	 ldr         r2, [sp, #0x14]
  00910	e59d301c	 ldr         r3, [sp, #0x1C]
  00914	e1520003	 cmp         r2, r3
  00918	3a000001	 bcc         |$LN9@Render2@3|
  0091c	ea000086	 b           |$LN8@Render2@3|

; 343  :             {
; 344  :                 goto Exit;

  00920	ea000085	 b           |$Exit$35374|
  00924		 |$LN9@Render2@3|

; 345  :             }
; 346  : 
; 347  :             CurrPos += BaseRate;

  00924	e59d202c	 ldr         r2, [sp, #0x2C]
  00928	e59d3018	 ldr         r3, [sp, #0x18]
  0092c	e0823003	 add         r3, r2, r3
  00930	e58d302c	 str         r3, [sp, #0x2C]

; 348  : 
; 349  :             PrevSamp0 = CurrSamp0;

  00934	e59d300c	 ldr         r3, [sp, #0xC]
  00938	e58d3020	 str         r3, [sp, #0x20]

; 350  :             PrevSamp1 = CurrSamp1;

  0093c	e59d3008	 ldr         r3, [sp, #8]
  00940	e58d3010	 str         r3, [sp, #0x10]

; 351  : 
; 352  :             PPCM_SAMPLE pSampleSrc = (PPCM_SAMPLE)pCurrData;

  00944	e59d3014	 ldr         r3, [sp, #0x14]
  00948	e58d303c	 str         r3, [sp, #0x3C]

; 353  :             CurrSamp0 =  (LONG)pSampleSrc->s8.sample_left;

  0094c	e59d303c	 ldr         r3, [sp, #0x3C]
  00950	e5d33000	 ldrb        r3, [r3]
  00954	e58d300c	 str         r3, [sp, #0xC]

; 354  :             CurrSamp0 = (CurrSamp0 - 128) << 8;

  00958	e59d300c	 ldr         r3, [sp, #0xC]
  0095c	e2433080	 sub         r3, r3, #0x80
  00960	e1a03403	 mov         r3, r3, lsl #8
  00964	e58d300c	 str         r3, [sp, #0xC]

; 355  :             CurrSamp1 = (LONG)pSampleSrc->s8.sample_right;

  00968	e59d303c	 ldr         r3, [sp, #0x3C]
  0096c	e2833001	 add         r3, r3, #1
  00970	e5d33000	 ldrb        r3, [r3]
  00974	e58d3008	 str         r3, [sp, #8]

; 356  :             CurrSamp1 = (CurrSamp1 - 128) << 8;

  00978	e59d3008	 ldr         r3, [sp, #8]
  0097c	e2433080	 sub         r3, r3, #0x80
  00980	e1a03403	 mov         r3, r3, lsl #8
  00984	e58d3008	 str         r3, [sp, #8]

; 357  :             pCurrData+=2;

  00988	e59d3014	 ldr         r3, [sp, #0x14]
  0098c	e2833002	 add         r3, r3, #2
  00990	e58d3014	 str         r3, [sp, #0x14]

; 358  :         }

  00994	eaffffd9	 b           |$LN11@Render2@3|
  00998		 |$LN10@Render2@3|

; 359  : 
; 360  :         // Calculate ratio between samples as a 17.15 fraction
; 361  :         // (Only use 15 bits to avoid overflow on next multiply)
; 362  :         LONG Ratio;
; 363  :         Ratio = (CurrPos * BaseRateInv)>>17;

  00998	e59d202c	 ldr         r2, [sp, #0x2C]
  0099c	e59d3004	 ldr         r3, [sp, #4]
  009a0	e0030392	 mul         r3, r2, r3
  009a4	e1a038a3	 mov         r3, r3, lsr #17
  009a8	e58d3030	 str         r3, [sp, #0x30]

; 364  : 
; 365  :         CurrPos -= ClientRate;

  009ac	e59d202c	 ldr         r2, [sp, #0x2C]
  009b0	e59d3000	 ldr         r3, [sp]
  009b4	e0423003	 sub         r3, r2, r3
  009b8	e58d302c	 str         r3, [sp, #0x2C]

; 366  : 
; 367  :         LONG OutSamp0;
; 368  :         LONG OutSamp1;
; 369  : 
; 370  :         // Calc difference between samples. Note OutSamp0 is a 17-bit signed number now.
; 371  :         OutSamp0 = PrevSamp0 - CurrSamp0;

  009bc	e59d2020	 ldr         r2, [sp, #0x20]
  009c0	e59d300c	 ldr         r3, [sp, #0xC]
  009c4	e0423003	 sub         r3, r2, r3
  009c8	e58d3034	 str         r3, [sp, #0x34]

; 372  :         OutSamp1 = PrevSamp1 - CurrSamp1;

  009cc	e59d2010	 ldr         r2, [sp, #0x10]
  009d0	e59d3008	 ldr         r3, [sp, #8]
  009d4	e0423003	 sub         r3, r2, r3
  009d8	e58d3038	 str         r3, [sp, #0x38]

; 373  : 
; 374  :         // Now interpolate
; 375  :         OutSamp0 = (OutSamp0 * Ratio) >> 15;

  009dc	e59d2034	 ldr         r2, [sp, #0x34]
  009e0	e59d3030	 ldr         r3, [sp, #0x30]
  009e4	e0030392	 mul         r3, r2, r3
  009e8	e1a037c3	 mov         r3, r3, asr #15
  009ec	e58d3034	 str         r3, [sp, #0x34]

; 376  :         OutSamp1 = (OutSamp1 * Ratio) >> 15;

  009f0	e59d2038	 ldr         r2, [sp, #0x38]
  009f4	e59d3030	 ldr         r3, [sp, #0x30]
  009f8	e0030392	 mul         r3, r2, r3
  009fc	e1a037c3	 mov         r3, r3, asr #15
  00a00	e58d3038	 str         r3, [sp, #0x38]

; 377  : 
; 378  :         // Add to previous number
; 379  :         OutSamp0 += CurrSamp0;

  00a04	e59d2034	 ldr         r2, [sp, #0x34]
  00a08	e59d300c	 ldr         r3, [sp, #0xC]
  00a0c	e0823003	 add         r3, r2, r3
  00a10	e58d3034	 str         r3, [sp, #0x34]

; 380  :         OutSamp1 += CurrSamp1;

  00a14	e59d2038	 ldr         r2, [sp, #0x38]
  00a18	e59d3008	 ldr         r3, [sp, #8]
  00a1c	e0823003	 add         r3, r2, r3
  00a20	e58d3038	 str         r3, [sp, #0x38]

; 381  : 
; 382  :         // Gain
; 383  :         OutSamp0 = (OutSamp0 * fxpGain[0]) >> VOLSHIFT;

  00a24	e59d2034	 ldr         r2, [sp, #0x34]
  00a28	e59d3024	 ldr         r3, [sp, #0x24]
  00a2c	e0030392	 mul         r3, r2, r3
  00a30	e1a03843	 mov         r3, r3, asr #16
  00a34	e58d3034	 str         r3, [sp, #0x34]

; 384  :         OutSamp1 = (OutSamp1 * fxpGain[1]) >> VOLSHIFT;

  00a38	e59d2038	 ldr         r2, [sp, #0x38]
  00a3c	e59d3028	 ldr         r3, [sp, #0x28]
  00a40	e0030392	 mul         r3, r2, r3
  00a44	e1a03843	 mov         r3, r3, asr #16
  00a48	e58d3038	 str         r3, [sp, #0x38]

; 385  : 
; 386  :         if (pBuffer < pBufferLast)

  00a4c	e59d2058	 ldr         r2, [sp, #0x58]
  00a50	e59d3060	 ldr         r3, [sp, #0x60]
  00a54	e1520003	 cmp         r2, r3
  00a58	2a000028	 bcs         |$LN7@Render2@3|

; 387  :         {
; 388  :             OutSamp0 += ((HWSAMPLE *)pBuffer)[0];

  00a5c	e59d3058	 ldr         r3, [sp, #0x58]
  00a60	e1d320f0	 ldrsh       r2, [r3]
  00a64	e59d3034	 ldr         r3, [sp, #0x34]
  00a68	e0833002	 add         r3, r3, r2
  00a6c	e58d3034	 str         r3, [sp, #0x34]

; 389  :             OutSamp1 += ((HWSAMPLE *)pBuffer)[1];

  00a70	e59d3058	 ldr         r3, [sp, #0x58]
  00a74	e2833002	 add         r3, r3, #2
  00a78	e1d320f0	 ldrsh       r2, [r3]
  00a7c	e59d3038	 ldr         r3, [sp, #0x38]
  00a80	e0833002	 add         r3, r3, r2
  00a84	e58d3038	 str         r3, [sp, #0x38]

; 390  : #if USE_MIX_SATURATE
; 391  :             // Handle saturation
; 392  :             if (OutSamp0>AUDIO_SAMPLE_MAX)

  00a88	e59d2034	 ldr         r2, [sp, #0x34]
  00a8c	e3a03c7f	 mov         r3, #0x7F, 24
  00a90	e38330ff	 orr         r3, r3, #0xFF
  00a94	e1520003	 cmp         r2, r3
  00a98	da000003	 ble         |$LN6@Render2@3|

; 393  :             {
; 394  :                 OutSamp0=AUDIO_SAMPLE_MAX;

  00a9c	e3a03c7f	 mov         r3, #0x7F, 24
  00aa0	e38330ff	 orr         r3, r3, #0xFF
  00aa4	e58d3034	 str         r3, [sp, #0x34]
  00aa8	ea000005	 b           |$LN5@Render2@3|
  00aac		 |$LN6@Render2@3|

; 395  :             }
; 396  :             else if (OutSamp0<AUDIO_SAMPLE_MIN)

  00aac	e59d3034	 ldr         r3, [sp, #0x34]
  00ab0	e3730902	 cmn         r3, #2, 18
  00ab4	aa000002	 bge         |$LN4@Render2@3|

; 397  :             {
; 398  :                 OutSamp0=AUDIO_SAMPLE_MIN;

  00ab8	e3e030ff	 mvn         r3, #0xFF
  00abc	e1a03383	 mov         r3, r3, lsl #7
  00ac0	e58d3034	 str         r3, [sp, #0x34]
  00ac4		 |$LN4@Render2@3|
  00ac4		 |$LN5@Render2@3|

; 399  :             }
; 400  :             if (OutSamp1>AUDIO_SAMPLE_MAX)

  00ac4	e59d2038	 ldr         r2, [sp, #0x38]
  00ac8	e3a03c7f	 mov         r3, #0x7F, 24
  00acc	e38330ff	 orr         r3, r3, #0xFF
  00ad0	e1520003	 cmp         r2, r3
  00ad4	da000003	 ble         |$LN3@Render2@3|

; 401  :             {
; 402  :                 OutSamp1=AUDIO_SAMPLE_MAX;

  00ad8	e3a03c7f	 mov         r3, #0x7F, 24
  00adc	e38330ff	 orr         r3, r3, #0xFF
  00ae0	e58d3038	 str         r3, [sp, #0x38]
  00ae4	ea000005	 b           |$LN2@Render2@3|
  00ae8		 |$LN3@Render2@3|

; 403  :             }
; 404  :             else if (OutSamp1<AUDIO_SAMPLE_MIN)

  00ae8	e59d3038	 ldr         r3, [sp, #0x38]
  00aec	e3730902	 cmn         r3, #2, 18
  00af0	aa000002	 bge         |$LN1@Render2@3|

; 405  :             {
; 406  :                 OutSamp1=AUDIO_SAMPLE_MIN;

  00af4	e3e030ff	 mvn         r3, #0xFF
  00af8	e1a03383	 mov         r3, r3, lsl #7
  00afc	e58d3038	 str         r3, [sp, #0x38]
  00b00		 |$LN1@Render2@3|
  00b00		 |$LN2@Render2@3|
  00b00		 |$LN7@Render2@3|

; 407  :             }
; 408  : #endif
; 409  :         }
; 410  :         ((HWSAMPLE *)pBuffer)[0] = (HWSAMPLE)OutSamp0;

  00b00	e59d3034	 ldr         r3, [sp, #0x34]
  00b04	e1a02803	 mov         r2, r3, lsl #16
  00b08	e1a02842	 mov         r2, r2, asr #16
  00b0c	e59d3058	 ldr         r3, [sp, #0x58]
  00b10	e1c320b0	 strh        r2, [r3]

; 411  :         ((HWSAMPLE *)pBuffer)[1] = (HWSAMPLE)OutSamp1;

  00b14	e59d3038	 ldr         r3, [sp, #0x38]
  00b18	e1a02803	 mov         r2, r3, lsl #16
  00b1c	e1a02842	 mov         r2, r2, asr #16
  00b20	e59d3058	 ldr         r3, [sp, #0x58]
  00b24	e2833002	 add         r3, r3, #2
  00b28	e1c320b0	 strh        r2, [r3]

; 412  : 
; 413  :         pBuffer += 2*sizeof(HWSAMPLE);

  00b2c	e59d3058	 ldr         r3, [sp, #0x58]
  00b30	e2833004	 add         r3, r3, #4
  00b34	e58d3058	 str         r3, [sp, #0x58]

; 414  : 
; 415  :     }

  00b38	eaffff6c	 b           |$LN13@Render2@3|
  00b3c		 |$LN12@Render2@3|
  00b3c		 |$LN8@Render2@3|
  00b3c		 |$Exit$35374|

; 416  : 
; 417  :     Exit:
; 418  :     m_dwByteCount += (pCurrData - m_lpCurrData);

  00b3c	e59d3054	 ldr         r3, [sp, #0x54]
  00b40	e283104c	 add         r1, r3, #0x4C
  00b44	e59d3054	 ldr         r3, [sp, #0x54]
  00b48	e2833044	 add         r3, r3, #0x44
  00b4c	e59d2014	 ldr         r2, [sp, #0x14]
  00b50	e5933000	 ldr         r3, [r3]
  00b54	e0422003	 sub         r2, r2, r3
  00b58	e5913000	 ldr         r3, [r1]
  00b5c	e0832002	 add         r2, r3, r2
  00b60	e59d3054	 ldr         r3, [sp, #0x54]
  00b64	e283304c	 add         r3, r3, #0x4C
  00b68	e5832000	 str         r2, [r3]

; 419  :     m_lpCurrData = pCurrData;

  00b6c	e59d3054	 ldr         r3, [sp, #0x54]
  00b70	e2832044	 add         r2, r3, #0x44
  00b74	e59d3014	 ldr         r3, [sp, #0x14]
  00b78	e5823000	 str         r3, [r2]

; 420  :     m_CurrPos = CurrPos;

  00b7c	e59d3054	 ldr         r3, [sp, #0x54]
  00b80	e2832088	 add         r2, r3, #0x88
  00b84	e59d302c	 ldr         r3, [sp, #0x2C]
  00b88	e5823000	 str         r3, [r2]

; 421  :     m_PrevSamp[0] = PrevSamp0;

  00b8c	e59d3054	 ldr         r3, [sp, #0x54]
  00b90	e2832078	 add         r2, r3, #0x78
  00b94	e59d3020	 ldr         r3, [sp, #0x20]
  00b98	e5823000	 str         r3, [r2]

; 422  :     m_PrevSamp[1] = PrevSamp1;

  00b9c	e59d3054	 ldr         r3, [sp, #0x54]
  00ba0	e283207c	 add         r2, r3, #0x7C
  00ba4	e59d3010	 ldr         r3, [sp, #0x10]
  00ba8	e5823000	 str         r3, [r2]

; 423  :     m_CurrSamp[0] = CurrSamp0;

  00bac	e59d3054	 ldr         r3, [sp, #0x54]
  00bb0	e2832080	 add         r2, r3, #0x80
  00bb4	e59d300c	 ldr         r3, [sp, #0xC]
  00bb8	e5823000	 str         r3, [r2]

; 424  :     m_CurrSamp[1] = CurrSamp1;

  00bbc	e59d3054	 ldr         r3, [sp, #0x54]
  00bc0	e2832084	 add         r2, r3, #0x84
  00bc4	e59d3008	 ldr         r3, [sp, #8]
  00bc8	e5823000	 str         r3, [r2]

; 425  :     return pBuffer;

  00bcc	e59d3058	 ldr         r3, [sp, #0x58]
  00bd0	e58d3040	 str         r3, [sp, #0x40]

; 426  : }

  00bd4	e59d0040	 ldr         r0, [sp, #0x40]
  00bd8	e28dd04c	 add         sp, sp, #0x4C
  00bdc	e89d6000	 ldmia       sp, {sp, lr}
  00be0	e12fff1e	 bx          lr
  00be4		 |$M35561|

			 ENDP  ; |?Render2@OutputStreamContextS8@@UAAPAEPAE00PAUTRANSFER_STATUS@@@Z|, OutputStreamContextS8::Render2

	EXPORT	|?Render2@OutputStreamContextS16@@UAAPAEPAE00PAUTRANSFER_STATUS@@@Z| ; OutputStreamContextS16::Render2

  00030			 AREA	 |.pdata|, PDATA
|$T35569| DCD	|$LN20@Render2@4|
	DCD	0x4000f904
; Function compile flags: /Odtp

  00be4			 AREA	 |.text|, CODE, ARM

  00be4		 |?Render2@OutputStreamContextS16@@UAAPAEPAE00PAUTRANSFER_STATUS@@@Z| PROC ; OutputStreamContextS16::Render2

; 429  : {

  00be4		 |$LN20@Render2@4|
  00be4	e1a0c00d	 mov         r12, sp
  00be8	e92d000f	 stmdb       sp!, {r0 - r3}
  00bec	e92d5000	 stmdb       sp!, {r12, lr}
  00bf0	e24dd04c	 sub         sp, sp, #0x4C
  00bf4		 |$M35566|

; 430  :     LONG CurrPos = m_CurrPos;

  00bf4	e59d3054	 ldr         r3, [sp, #0x54]
  00bf8	e2833088	 add         r3, r3, #0x88
  00bfc	e5933000	 ldr         r3, [r3]
  00c00	e58d302c	 str         r3, [sp, #0x2C]

; 431  :     DWORD ClientRate = m_ClientRate;

  00c04	e59d3054	 ldr         r3, [sp, #0x54]
  00c08	e283308c	 add         r3, r3, #0x8C
  00c0c	e5933000	 ldr         r3, [r3]
  00c10	e58d3000	 str         r3, [sp]

; 432  :     DWORD BaseRate = m_pDeviceContext->GetBaseSampleRate();

  00c14	e59d3054	 ldr         r3, [sp, #0x54]
  00c18	e2833050	 add         r3, r3, #0x50
  00c1c	e5930000	 ldr         r0, [r3]
  00c20	eb000000	 bl          |?GetBaseSampleRate@DeviceContext@@QAAKXZ|
  00c24	e58d0044	 str         r0, [sp, #0x44]
  00c28	e59d3044	 ldr         r3, [sp, #0x44]
  00c2c	e58d3018	 str         r3, [sp, #0x18]

; 433  :     DWORD BaseRateInv = m_pDeviceContext->GetBaseSampleRateInverse();

  00c30	e59d3054	 ldr         r3, [sp, #0x54]
  00c34	e2833050	 add         r3, r3, #0x50
  00c38	e5930000	 ldr         r0, [r3]
  00c3c	eb000000	 bl          |?GetBaseSampleRateInverse@DeviceContext@@QAAKXZ|
  00c40	e58d0048	 str         r0, [sp, #0x48]
  00c44	e59d3048	 ldr         r3, [sp, #0x48]
  00c48	e58d3004	 str         r3, [sp, #4]

; 434  : 
; 435  :     LONG CurrSamp0 = m_CurrSamp[0];

  00c4c	e59d3054	 ldr         r3, [sp, #0x54]
  00c50	e2833080	 add         r3, r3, #0x80
  00c54	e5933000	 ldr         r3, [r3]
  00c58	e58d300c	 str         r3, [sp, #0xC]

; 436  :     LONG CurrSamp1 = m_CurrSamp[1];

  00c5c	e59d3054	 ldr         r3, [sp, #0x54]
  00c60	e2833084	 add         r3, r3, #0x84
  00c64	e5933000	 ldr         r3, [r3]
  00c68	e58d3008	 str         r3, [sp, #8]

; 437  :     LONG PrevSamp0 = m_PrevSamp[0];

  00c6c	e59d3054	 ldr         r3, [sp, #0x54]
  00c70	e2833078	 add         r3, r3, #0x78
  00c74	e5933000	 ldr         r3, [r3]
  00c78	e58d3020	 str         r3, [sp, #0x20]

; 438  :     LONG PrevSamp1 = m_PrevSamp[1];

  00c7c	e59d3054	 ldr         r3, [sp, #0x54]
  00c80	e283307c	 add         r3, r3, #0x7C
  00c84	e5933000	 ldr         r3, [r3]
  00c88	e58d3010	 str         r3, [sp, #0x10]

; 439  :     PBYTE pCurrData = m_lpCurrData;

  00c8c	e59d3054	 ldr         r3, [sp, #0x54]
  00c90	e2833044	 add         r3, r3, #0x44
  00c94	e5933000	 ldr         r3, [r3]
  00c98	e58d3014	 str         r3, [sp, #0x14]

; 440  :     PBYTE pCurrDataEnd = m_lpCurrDataEnd;

  00c9c	e59d3054	 ldr         r3, [sp, #0x54]
  00ca0	e2833048	 add         r3, r3, #0x48
  00ca4	e5933000	 ldr         r3, [r3]
  00ca8	e58d301c	 str         r3, [sp, #0x1C]

; 441  :     LONG fxpGain[2];
; 442  : 
; 443  :     if (pTransferStatus->Mute)

  00cac	e59d3064	 ldr         r3, [sp, #0x64]
  00cb0	e2833004	 add         r3, r3, #4
  00cb4	e5933000	 ldr         r3, [r3]
  00cb8	e3530000	 cmp         r3, #0
  00cbc	0a000004	 beq         |$LN15@Render2@4|

; 444  :     {
; 445  :         fxpGain[0] = 0;

  00cc0	e3a03000	 mov         r3, #0
  00cc4	e58d3024	 str         r3, [sp, #0x24]

; 446  :         fxpGain[1] = 0;

  00cc8	e3a03000	 mov         r3, #0
  00ccc	e58d3028	 str         r3, [sp, #0x28]

; 447  :     }
; 448  :     else

  00cd0	ea000007	 b           |$LN14@Render2@4|
  00cd4		 |$LN15@Render2@4|

; 449  :     {
; 450  :         fxpGain[0] = m_fxpGain[0];

  00cd4	e59d3054	 ldr         r3, [sp, #0x54]
  00cd8	e2833060	 add         r3, r3, #0x60
  00cdc	e5933000	 ldr         r3, [r3]
  00ce0	e58d3024	 str         r3, [sp, #0x24]

; 451  :         fxpGain[1] = m_fxpGain[1];

  00ce4	e59d3054	 ldr         r3, [sp, #0x54]
  00ce8	e2833064	 add         r3, r3, #0x64
  00cec	e5933000	 ldr         r3, [r3]
  00cf0	e58d3028	 str         r3, [sp, #0x28]
  00cf4		 |$LN14@Render2@4|
  00cf4		 |$LN13@Render2@4|

; 452  :     }
; 453  : 
; 454  :     while (pBuffer < pBufferEnd)

  00cf4	e59d2058	 ldr         r2, [sp, #0x58]
  00cf8	e59d305c	 ldr         r3, [sp, #0x5C]
  00cfc	e1520003	 cmp         r2, r3
  00d00	2a000086	 bcs         |$LN12@Render2@4|
  00d04		 |$LN11@Render2@4|

; 455  :     {
; 456  :         while (CurrPos < 0)

  00d04	e59d302c	 ldr         r3, [sp, #0x2C]
  00d08	e3530000	 cmp         r3, #0
  00d0c	aa00001a	 bge         |$LN10@Render2@4|

; 457  :         {
; 458  :             if (pCurrData>=pCurrDataEnd)

  00d10	e59d2014	 ldr         r2, [sp, #0x14]
  00d14	e59d301c	 ldr         r3, [sp, #0x1C]
  00d18	e1520003	 cmp         r2, r3
  00d1c	3a000001	 bcc         |$LN9@Render2@4|
  00d20	ea00007e	 b           |$LN8@Render2@4|

; 459  :             {
; 460  :                 goto Exit;

  00d24	ea00007d	 b           |$Exit$35424|
  00d28		 |$LN9@Render2@4|

; 461  :             }
; 462  : 
; 463  :             CurrPos += BaseRate;

  00d28	e59d202c	 ldr         r2, [sp, #0x2C]
  00d2c	e59d3018	 ldr         r3, [sp, #0x18]
  00d30	e0823003	 add         r3, r2, r3
  00d34	e58d302c	 str         r3, [sp, #0x2C]

; 464  : 
; 465  :             PrevSamp0 = CurrSamp0;

  00d38	e59d300c	 ldr         r3, [sp, #0xC]
  00d3c	e58d3020	 str         r3, [sp, #0x20]

; 466  :             PrevSamp1 = CurrSamp1;

  00d40	e59d3008	 ldr         r3, [sp, #8]
  00d44	e58d3010	 str         r3, [sp, #0x10]

; 467  : 
; 468  :             PPCM_SAMPLE pSampleSrc = (PPCM_SAMPLE)pCurrData;

  00d48	e59d3014	 ldr         r3, [sp, #0x14]
  00d4c	e58d303c	 str         r3, [sp, #0x3C]

; 469  :             CurrSamp0 = (LONG)pSampleSrc->s16.sample_left;

  00d50	e59d303c	 ldr         r3, [sp, #0x3C]
  00d54	e1d330f0	 ldrsh       r3, [r3]
  00d58	e58d300c	 str         r3, [sp, #0xC]

; 470  :             CurrSamp1 = (LONG)pSampleSrc->s16.sample_right;

  00d5c	e59d303c	 ldr         r3, [sp, #0x3C]
  00d60	e2833002	 add         r3, r3, #2
  00d64	e1d330f0	 ldrsh       r3, [r3]
  00d68	e58d3008	 str         r3, [sp, #8]

; 471  :             pCurrData+=4;

  00d6c	e59d3014	 ldr         r3, [sp, #0x14]
  00d70	e2833004	 add         r3, r3, #4
  00d74	e58d3014	 str         r3, [sp, #0x14]

; 472  :         }

  00d78	eaffffe1	 b           |$LN11@Render2@4|
  00d7c		 |$LN10@Render2@4|

; 473  : 
; 474  :         // Calculate ratio between samples as a 17.15 fraction
; 475  :         // (Only use 15 bits to avoid overflow on next multiply)
; 476  :         LONG Ratio;
; 477  :         Ratio = (CurrPos * BaseRateInv)>>17;

  00d7c	e59d202c	 ldr         r2, [sp, #0x2C]
  00d80	e59d3004	 ldr         r3, [sp, #4]
  00d84	e0030392	 mul         r3, r2, r3
  00d88	e1a038a3	 mov         r3, r3, lsr #17
  00d8c	e58d3030	 str         r3, [sp, #0x30]

; 478  : 
; 479  :         CurrPos -= ClientRate;

  00d90	e59d202c	 ldr         r2, [sp, #0x2C]
  00d94	e59d3000	 ldr         r3, [sp]
  00d98	e0423003	 sub         r3, r2, r3
  00d9c	e58d302c	 str         r3, [sp, #0x2C]

; 480  : 
; 481  :         LONG OutSamp0;
; 482  :         LONG OutSamp1;
; 483  : 
; 484  :         // Calc difference between samples. Note OutSamp0 is a 17-bit signed number now.
; 485  :         OutSamp0 = PrevSamp0 - CurrSamp0;

  00da0	e59d2020	 ldr         r2, [sp, #0x20]
  00da4	e59d300c	 ldr         r3, [sp, #0xC]
  00da8	e0423003	 sub         r3, r2, r3
  00dac	e58d3034	 str         r3, [sp, #0x34]

; 486  :         OutSamp1 = PrevSamp1 - CurrSamp1;

  00db0	e59d2010	 ldr         r2, [sp, #0x10]
  00db4	e59d3008	 ldr         r3, [sp, #8]
  00db8	e0423003	 sub         r3, r2, r3
  00dbc	e58d3038	 str         r3, [sp, #0x38]

; 487  : 
; 488  :         // Now interpolate
; 489  :         OutSamp0 = (OutSamp0 * Ratio) >> 15;

  00dc0	e59d2034	 ldr         r2, [sp, #0x34]
  00dc4	e59d3030	 ldr         r3, [sp, #0x30]
  00dc8	e0030392	 mul         r3, r2, r3
  00dcc	e1a037c3	 mov         r3, r3, asr #15
  00dd0	e58d3034	 str         r3, [sp, #0x34]

; 490  :         OutSamp1 = (OutSamp1 * Ratio) >> 15;

  00dd4	e59d2038	 ldr         r2, [sp, #0x38]
  00dd8	e59d3030	 ldr         r3, [sp, #0x30]
  00ddc	e0030392	 mul         r3, r2, r3
  00de0	e1a037c3	 mov         r3, r3, asr #15
  00de4	e58d3038	 str         r3, [sp, #0x38]

; 491  : 
; 492  :         // Add to previous number
; 493  :         OutSamp0 += CurrSamp0;

  00de8	e59d2034	 ldr         r2, [sp, #0x34]
  00dec	e59d300c	 ldr         r3, [sp, #0xC]
  00df0	e0823003	 add         r3, r2, r3
  00df4	e58d3034	 str         r3, [sp, #0x34]

; 494  :         OutSamp1 += CurrSamp1;

  00df8	e59d2038	 ldr         r2, [sp, #0x38]
  00dfc	e59d3008	 ldr         r3, [sp, #8]
  00e00	e0823003	 add         r3, r2, r3
  00e04	e58d3038	 str         r3, [sp, #0x38]

; 495  : 
; 496  :         // Gain
; 497  :         OutSamp0 = (OutSamp0 * fxpGain[0]) >> VOLSHIFT;

  00e08	e59d2034	 ldr         r2, [sp, #0x34]
  00e0c	e59d3024	 ldr         r3, [sp, #0x24]
  00e10	e0030392	 mul         r3, r2, r3
  00e14	e1a03843	 mov         r3, r3, asr #16
  00e18	e58d3034	 str         r3, [sp, #0x34]

; 498  :         OutSamp1 = (OutSamp1 * fxpGain[1]) >> VOLSHIFT;

  00e1c	e59d2038	 ldr         r2, [sp, #0x38]
  00e20	e59d3028	 ldr         r3, [sp, #0x28]
  00e24	e0030392	 mul         r3, r2, r3
  00e28	e1a03843	 mov         r3, r3, asr #16
  00e2c	e58d3038	 str         r3, [sp, #0x38]

; 499  : 
; 500  :         if (pBuffer < pBufferLast)

  00e30	e59d2058	 ldr         r2, [sp, #0x58]
  00e34	e59d3060	 ldr         r3, [sp, #0x60]
  00e38	e1520003	 cmp         r2, r3
  00e3c	2a000028	 bcs         |$LN7@Render2@4|

; 501  :         {
; 502  :             OutSamp0 += ((HWSAMPLE *)pBuffer)[0];

  00e40	e59d3058	 ldr         r3, [sp, #0x58]
  00e44	e1d320f0	 ldrsh       r2, [r3]
  00e48	e59d3034	 ldr         r3, [sp, #0x34]
  00e4c	e0833002	 add         r3, r3, r2
  00e50	e58d3034	 str         r3, [sp, #0x34]

; 503  :             OutSamp1 += ((HWSAMPLE *)pBuffer)[1];

  00e54	e59d3058	 ldr         r3, [sp, #0x58]
  00e58	e2833002	 add         r3, r3, #2
  00e5c	e1d320f0	 ldrsh       r2, [r3]
  00e60	e59d3038	 ldr         r3, [sp, #0x38]
  00e64	e0833002	 add         r3, r3, r2
  00e68	e58d3038	 str         r3, [sp, #0x38]

; 504  : #if USE_MIX_SATURATE
; 505  :             // Handle saturation
; 506  :             if (OutSamp0>AUDIO_SAMPLE_MAX)

  00e6c	e59d2034	 ldr         r2, [sp, #0x34]
  00e70	e3a03c7f	 mov         r3, #0x7F, 24
  00e74	e38330ff	 orr         r3, r3, #0xFF
  00e78	e1520003	 cmp         r2, r3
  00e7c	da000003	 ble         |$LN6@Render2@4|

; 507  :             {
; 508  :                 OutSamp0=AUDIO_SAMPLE_MAX;

  00e80	e3a03c7f	 mov         r3, #0x7F, 24
  00e84	e38330ff	 orr         r3, r3, #0xFF
  00e88	e58d3034	 str         r3, [sp, #0x34]
  00e8c	ea000005	 b           |$LN5@Render2@4|
  00e90		 |$LN6@Render2@4|

; 509  :             }
; 510  :             else if (OutSamp0<AUDIO_SAMPLE_MIN)

  00e90	e59d3034	 ldr         r3, [sp, #0x34]
  00e94	e3730902	 cmn         r3, #2, 18
  00e98	aa000002	 bge         |$LN4@Render2@4|

; 511  :             {
; 512  :                 OutSamp0=AUDIO_SAMPLE_MIN;

  00e9c	e3e030ff	 mvn         r3, #0xFF
  00ea0	e1a03383	 mov         r3, r3, lsl #7
  00ea4	e58d3034	 str         r3, [sp, #0x34]
  00ea8		 |$LN4@Render2@4|
  00ea8		 |$LN5@Render2@4|

; 513  :             }
; 514  :             if (OutSamp1>AUDIO_SAMPLE_MAX)

  00ea8	e59d2038	 ldr         r2, [sp, #0x38]
  00eac	e3a03c7f	 mov         r3, #0x7F, 24
  00eb0	e38330ff	 orr         r3, r3, #0xFF
  00eb4	e1520003	 cmp         r2, r3
  00eb8	da000003	 ble         |$LN3@Render2@4|

; 515  :             {
; 516  :                 OutSamp1=AUDIO_SAMPLE_MAX;

  00ebc	e3a03c7f	 mov         r3, #0x7F, 24
  00ec0	e38330ff	 orr         r3, r3, #0xFF
  00ec4	e58d3038	 str         r3, [sp, #0x38]
  00ec8	ea000005	 b           |$LN2@Render2@4|
  00ecc		 |$LN3@Render2@4|

; 517  :             }
; 518  :             else if (OutSamp1<AUDIO_SAMPLE_MIN)

  00ecc	e59d3038	 ldr         r3, [sp, #0x38]
  00ed0	e3730902	 cmn         r3, #2, 18
  00ed4	aa000002	 bge         |$LN1@Render2@4|

; 519  :             {
; 520  :                 OutSamp1=AUDIO_SAMPLE_MIN;

  00ed8	e3e030ff	 mvn         r3, #0xFF
  00edc	e1a03383	 mov         r3, r3, lsl #7
  00ee0	e58d3038	 str         r3, [sp, #0x38]
  00ee4		 |$LN1@Render2@4|
  00ee4		 |$LN2@Render2@4|
  00ee4		 |$LN7@Render2@4|

; 521  :             }
; 522  : #endif
; 523  :         }
; 524  :         ((HWSAMPLE *)pBuffer)[0] = (HWSAMPLE)OutSamp0;

  00ee4	e59d3034	 ldr         r3, [sp, #0x34]
  00ee8	e1a02803	 mov         r2, r3, lsl #16
  00eec	e1a02842	 mov         r2, r2, asr #16
  00ef0	e59d3058	 ldr         r3, [sp, #0x58]
  00ef4	e1c320b0	 strh        r2, [r3]

; 525  :         ((HWSAMPLE *)pBuffer)[1] = (HWSAMPLE)OutSamp1;

  00ef8	e59d3038	 ldr         r3, [sp, #0x38]
  00efc	e1a02803	 mov         r2, r3, lsl #16
  00f00	e1a02842	 mov         r2, r2, asr #16
  00f04	e59d3058	 ldr         r3, [sp, #0x58]
  00f08	e2833002	 add         r3, r3, #2
  00f0c	e1c320b0	 strh        r2, [r3]

; 526  : 
; 527  :         pBuffer += 2*sizeof(HWSAMPLE);

  00f10	e59d3058	 ldr         r3, [sp, #0x58]
  00f14	e2833004	 add         r3, r3, #4
  00f18	e58d3058	 str         r3, [sp, #0x58]

; 528  :     }

  00f1c	eaffff74	 b           |$LN13@Render2@4|
  00f20		 |$LN12@Render2@4|
  00f20		 |$LN8@Render2@4|
  00f20		 |$Exit$35424|

; 529  : 
; 530  :     Exit:
; 531  :     m_dwByteCount += (pCurrData - m_lpCurrData);

  00f20	e59d3054	 ldr         r3, [sp, #0x54]
  00f24	e283104c	 add         r1, r3, #0x4C
  00f28	e59d3054	 ldr         r3, [sp, #0x54]
  00f2c	e2833044	 add         r3, r3, #0x44
  00f30	e59d2014	 ldr         r2, [sp, #0x14]
  00f34	e5933000	 ldr         r3, [r3]
  00f38	e0422003	 sub         r2, r2, r3
  00f3c	e5913000	 ldr         r3, [r1]
  00f40	e0832002	 add         r2, r3, r2
  00f44	e59d3054	 ldr         r3, [sp, #0x54]
  00f48	e283304c	 add         r3, r3, #0x4C
  00f4c	e5832000	 str         r2, [r3]

; 532  :     m_lpCurrData = pCurrData;

  00f50	e59d3054	 ldr         r3, [sp, #0x54]
  00f54	e2832044	 add         r2, r3, #0x44
  00f58	e59d3014	 ldr         r3, [sp, #0x14]
  00f5c	e5823000	 str         r3, [r2]

; 533  :     m_CurrPos = CurrPos;

  00f60	e59d3054	 ldr         r3, [sp, #0x54]
  00f64	e2832088	 add         r2, r3, #0x88
  00f68	e59d302c	 ldr         r3, [sp, #0x2C]
  00f6c	e5823000	 str         r3, [r2]

; 534  :     m_PrevSamp[0] = PrevSamp0;

  00f70	e59d3054	 ldr         r3, [sp, #0x54]
  00f74	e2832078	 add         r2, r3, #0x78
  00f78	e59d3020	 ldr         r3, [sp, #0x20]
  00f7c	e5823000	 str         r3, [r2]

; 535  :     m_PrevSamp[1] = PrevSamp1;

  00f80	e59d3054	 ldr         r3, [sp, #0x54]
  00f84	e283207c	 add         r2, r3, #0x7C
  00f88	e59d3010	 ldr         r3, [sp, #0x10]
  00f8c	e5823000	 str         r3, [r2]

; 536  :     m_CurrSamp[0] = CurrSamp0;

  00f90	e59d3054	 ldr         r3, [sp, #0x54]
  00f94	e2832080	 add         r2, r3, #0x80
  00f98	e59d300c	 ldr         r3, [sp, #0xC]
  00f9c	e5823000	 str         r3, [r2]

; 537  :     m_CurrSamp[1] = CurrSamp1;

  00fa0	e59d3054	 ldr         r3, [sp, #0x54]
  00fa4	e2832084	 add         r2, r3, #0x84
  00fa8	e59d3008	 ldr         r3, [sp, #8]
  00fac	e5823000	 str         r3, [r2]

; 538  :     return pBuffer;

  00fb0	e59d3058	 ldr         r3, [sp, #0x58]
  00fb4	e58d3040	 str         r3, [sp, #0x40]

; 539  : }

  00fb8	e59d0040	 ldr         r0, [sp, #0x40]
  00fbc	e28dd04c	 add         sp, sp, #0x4C
  00fc0	e89d6000	 ldmia       sp, {sp, lr}
  00fc4	e12fff1e	 bx          lr
  00fc8		 |$M35567|

			 ENDP  ; |?Render2@OutputStreamContextS16@@UAAPAEPAE00PAUTRANSFER_STATUS@@@Z|, OutputStreamContextS16::Render2

	EXPORT	|?Render2@OutputStreamContextMC@@UAAPAEPAE00PAUTRANSFER_STATUS@@@Z| ; OutputStreamContextMC::Render2

  00038			 AREA	 |.pdata|, PDATA
|$T35575| DCD	|$LN32@Render2@5|
	DCD	0x40019f04
; Function compile flags: /Odtp

  00fc8			 AREA	 |.text|, CODE, ARM

  00fc8		 |?Render2@OutputStreamContextMC@@UAAPAEPAE00PAUTRANSFER_STATUS@@@Z| PROC ; OutputStreamContextMC::Render2

; 729  : {

  00fc8		 |$LN32@Render2@5|
  00fc8	e1a0c00d	 mov         r12, sp
  00fcc	e92d000f	 stmdb       sp!, {r0 - r3}
  00fd0	e92d5000	 stmdb       sp!, {r12, lr}
  00fd4	e24dd054	 sub         sp, sp, #0x54
  00fd8		 |$M35572|

; 730  :     LONG CurrPos = m_CurrPos;

  00fd8	e59d305c	 ldr         r3, [sp, #0x5C]
  00fdc	e2833088	 add         r3, r3, #0x88
  00fe0	e5933000	 ldr         r3, [r3]
  00fe4	e58d303c	 str         r3, [sp, #0x3C]

; 731  :     DWORD ClientRate = m_ClientRate;

  00fe8	e59d305c	 ldr         r3, [sp, #0x5C]
  00fec	e283308c	 add         r3, r3, #0x8C
  00ff0	e5933000	 ldr         r3, [r3]
  00ff4	e58d3000	 str         r3, [sp]

; 732  :     DWORD BaseRate = m_pDeviceContext->GetBaseSampleRate();

  00ff8	e59d305c	 ldr         r3, [sp, #0x5C]
  00ffc	e2833050	 add         r3, r3, #0x50
  01000	e5930000	 ldr         r0, [r3]
  01004	eb000000	 bl          |?GetBaseSampleRate@DeviceContext@@QAAKXZ|
  01008	e58d004c	 str         r0, [sp, #0x4C]
  0100c	e59d304c	 ldr         r3, [sp, #0x4C]
  01010	e58d302c	 str         r3, [sp, #0x2C]

; 733  :     DWORD BaseRateInv = m_pDeviceContext->GetBaseSampleRateInverse();

  01014	e59d305c	 ldr         r3, [sp, #0x5C]
  01018	e2833050	 add         r3, r3, #0x50
  0101c	e5930000	 ldr         r0, [r3]
  01020	eb000000	 bl          |?GetBaseSampleRateInverse@DeviceContext@@QAAKXZ|
  01024	e58d0050	 str         r0, [sp, #0x50]
  01028	e59d3050	 ldr         r3, [sp, #0x50]
  0102c	e58d300c	 str         r3, [sp, #0xC]

; 734  : 
; 735  :     LONG CurrSamp[2];
; 736  :     LONG PrevSamp[2];
; 737  :     LONG OutSamp[2];
; 738  :     LONG fxpGain[2];
; 739  : 
; 740  :     PBYTE pCurrData = m_lpCurrData;

  01030	e59d305c	 ldr         r3, [sp, #0x5C]
  01034	e2833044	 add         r3, r3, #0x44
  01038	e5933000	 ldr         r3, [r3]
  0103c	e58d3028	 str         r3, [sp, #0x28]

; 741  :     PBYTE pCurrDataEnd = m_lpCurrDataEnd;

  01040	e59d305c	 ldr         r3, [sp, #0x5C]
  01044	e2833048	 add         r3, r3, #0x48
  01048	e5933000	 ldr         r3, [r3]
  0104c	e58d3030	 str         r3, [sp, #0x30]

; 742  :     LONG nChannels = m_WaveFormat.nChannels;

  01050	e59d305c	 ldr         r3, [sp, #0x5C]
  01054	e2831026	 add         r1, r3, #0x26
  01058	e5d13001	 ldrb        r3, [r1, #1]
  0105c	e1a03403	 mov         r3, r3, lsl #8
  01060	e1a02803	 mov         r2, r3, lsl #16
  01064	e1a02822	 mov         r2, r2, lsr #16
  01068	e5d13000	 ldrb        r3, [r1]
  0106c	e1833002	 orr         r3, r3, r2
  01070	e58d3008	 str         r3, [sp, #8]

; 743  : 
; 744  :     int i;
; 745  : 
; 746  :     for (i=0;i<2;i++)

  01074	e3a03000	 mov         r3, #0
  01078	e58d3004	 str         r3, [sp, #4]
  0107c	ea000002	 b           |$LN27@Render2@5|
  01080		 |$LN26@Render2@5|
  01080	e59d3004	 ldr         r3, [sp, #4]
  01084	e2833001	 add         r3, r3, #1
  01088	e58d3004	 str         r3, [sp, #4]
  0108c		 |$LN27@Render2@5|
  0108c	e59d3004	 ldr         r3, [sp, #4]
  01090	e3530002	 cmp         r3, #2
  01094	aa000034	 bge         |$LN25@Render2@5|

; 747  :     {
; 748  :         CurrSamp[i] = m_CurrSamp[i];

  01098	e59d305c	 ldr         r3, [sp, #0x5C]
  0109c	e2831080	 add         r1, r3, #0x80
  010a0	e59d2004	 ldr         r2, [sp, #4]
  010a4	e3a03004	 mov         r3, #4
  010a8	e0030392	 mul         r3, r2, r3
  010ac	e0810003	 add         r0, r1, r3
  010b0	e59d1004	 ldr         r1, [sp, #4]
  010b4	e3a03004	 mov         r3, #4
  010b8	e0020391	 mul         r2, r1, r3
  010bc	e28d3010	 add         r3, sp, #0x10
  010c0	e0832002	 add         r2, r3, r2
  010c4	e5903000	 ldr         r3, [r0]
  010c8	e5823000	 str         r3, [r2]

; 749  :         PrevSamp[i] = m_PrevSamp[i];

  010cc	e59d305c	 ldr         r3, [sp, #0x5C]
  010d0	e2831078	 add         r1, r3, #0x78
  010d4	e59d2004	 ldr         r2, [sp, #4]
  010d8	e3a03004	 mov         r3, #4
  010dc	e0030392	 mul         r3, r2, r3
  010e0	e0810003	 add         r0, r1, r3
  010e4	e59d1004	 ldr         r1, [sp, #4]
  010e8	e3a03004	 mov         r3, #4
  010ec	e0020391	 mul         r2, r1, r3
  010f0	e28d3020	 add         r3, sp, #0x20
  010f4	e0832002	 add         r2, r3, r2
  010f8	e5903000	 ldr         r3, [r0]
  010fc	e5823000	 str         r3, [r2]

; 750  : 
; 751  :         if (pTransferStatus->Mute)

  01100	e59d306c	 ldr         r3, [sp, #0x6C]
  01104	e2833004	 add         r3, r3, #4
  01108	e5933000	 ldr         r3, [r3]
  0110c	e3530000	 cmp         r3, #0
  01110	0a000007	 beq         |$LN24@Render2@5|

; 752  :         {
; 753  :             fxpGain[i] = 0;

  01114	e59d1004	 ldr         r1, [sp, #4]
  01118	e3a03004	 mov         r3, #4
  0111c	e0020391	 mul         r2, r1, r3
  01120	e28d3034	 add         r3, sp, #0x34
  01124	e0832002	 add         r2, r3, r2
  01128	e3a03000	 mov         r3, #0
  0112c	e5823000	 str         r3, [r2]

; 754  :         }
; 755  :         else

  01130	ea00000c	 b           |$LN23@Render2@5|
  01134		 |$LN24@Render2@5|

; 756  :         {
; 757  :             fxpGain[i] = m_fxpGain[i];

  01134	e59d305c	 ldr         r3, [sp, #0x5C]
  01138	e2831060	 add         r1, r3, #0x60
  0113c	e59d2004	 ldr         r2, [sp, #4]
  01140	e3a03004	 mov         r3, #4
  01144	e0030392	 mul         r3, r2, r3
  01148	e0810003	 add         r0, r1, r3
  0114c	e59d1004	 ldr         r1, [sp, #4]
  01150	e3a03004	 mov         r3, #4
  01154	e0020391	 mul         r2, r1, r3
  01158	e28d3034	 add         r3, sp, #0x34
  0115c	e0832002	 add         r2, r3, r2
  01160	e5903000	 ldr         r3, [r0]
  01164	e5823000	 str         r3, [r2]
  01168		 |$LN23@Render2@5|

; 758  :         }
; 759  :     }

  01168	eaffffc4	 b           |$LN26@Render2@5|
  0116c		 |$LN25@Render2@5|
  0116c		 |$LN22@Render2@5|

; 760  : 
; 761  :     while (pBuffer < pBufferEnd)

  0116c	e59d2060	 ldr         r2, [sp, #0x60]
  01170	e59d3064	 ldr         r3, [sp, #0x64]
  01174	e1520003	 cmp         r2, r3
  01178	2a0000f3	 bcs         |$LN21@Render2@5|
  0117c		 |$LN20@Render2@5|

; 762  :     {
; 763  :         while (CurrPos < 0)

  0117c	e59d303c	 ldr         r3, [sp, #0x3C]
  01180	e3530000	 cmp         r3, #0
  01184	aa000048	 bge         |$LN19@Render2@5|

; 764  :         {
; 765  :             if (pCurrData>=pCurrDataEnd)

  01188	e59d2028	 ldr         r2, [sp, #0x28]
  0118c	e59d3030	 ldr         r3, [sp, #0x30]
  01190	e1520003	 cmp         r2, r3
  01194	3a000001	 bcc         |$LN18@Render2@5|
  01198	ea0000eb	 b           |$LN17@Render2@5|

; 766  :             {
; 767  :                 goto Exit;

  0119c	ea0000ea	 b           |$Exit$35478|
  011a0		 |$LN18@Render2@5|

; 768  :             }
; 769  : 
; 770  :             CurrPos += BaseRate;

  011a0	e59d203c	 ldr         r2, [sp, #0x3C]
  011a4	e59d302c	 ldr         r3, [sp, #0x2C]
  011a8	e0823003	 add         r3, r2, r3
  011ac	e58d303c	 str         r3, [sp, #0x3C]

; 771  : 
; 772  :             for (i=0;i<2;i++)

  011b0	e3a03000	 mov         r3, #0
  011b4	e58d3004	 str         r3, [sp, #4]
  011b8	ea000002	 b           |$LN16@Render2@5|
  011bc		 |$LN15@Render2@5|
  011bc	e59d3004	 ldr         r3, [sp, #4]
  011c0	e2833001	 add         r3, r3, #1
  011c4	e58d3004	 str         r3, [sp, #4]
  011c8		 |$LN16@Render2@5|
  011c8	e59d3004	 ldr         r3, [sp, #4]
  011cc	e3530002	 cmp         r3, #2
  011d0	aa000013	 bge         |$LN14@Render2@5|

; 773  :             {
; 774  :                 PrevSamp[i]=CurrSamp[i];

  011d4	e59d1004	 ldr         r1, [sp, #4]
  011d8	e3a03004	 mov         r3, #4
  011dc	e0020391	 mul         r2, r1, r3
  011e0	e28d3010	 add         r3, sp, #0x10
  011e4	e0830002	 add         r0, r3, r2
  011e8	e59d1004	 ldr         r1, [sp, #4]
  011ec	e3a03004	 mov         r3, #4
  011f0	e0020391	 mul         r2, r1, r3
  011f4	e28d3020	 add         r3, sp, #0x20
  011f8	e0832002	 add         r2, r3, r2
  011fc	e5903000	 ldr         r3, [r0]
  01200	e5823000	 str         r3, [r2]

; 775  :                 CurrSamp[i]=0;

  01204	e59d1004	 ldr         r1, [sp, #4]
  01208	e3a03004	 mov         r3, #4
  0120c	e0020391	 mul         r2, r1, r3
  01210	e28d3010	 add         r3, sp, #0x10
  01214	e0832002	 add         r2, r3, r2
  01218	e3a03000	 mov         r3, #0
  0121c	e5823000	 str         r3, [r2]

; 776  :             }

  01220	eaffffe5	 b           |$LN15@Render2@5|
  01224		 |$LN14@Render2@5|

; 777  : 
; 778  : 
; 779  :             for (i=0;i<nChannels;i++)

  01224	e3a03000	 mov         r3, #0
  01228	e58d3004	 str         r3, [sp, #4]
  0122c	ea000002	 b           |$LN13@Render2@5|
  01230		 |$LN12@Render2@5|
  01230	e59d3004	 ldr         r3, [sp, #4]
  01234	e2833001	 add         r3, r3, #1
  01238	e58d3004	 str         r3, [sp, #4]
  0123c		 |$LN13@Render2@5|
  0123c	e59d2004	 ldr         r2, [sp, #4]
  01240	e59d3008	 ldr         r3, [sp, #8]
  01244	e1520003	 cmp         r2, r3
  01248	aa000016	 bge         |$LN11@Render2@5|

; 780  :             {
; 781  :                 PPCM_SAMPLE pSampleSrc = (PPCM_SAMPLE)pCurrData;

  0124c	e59d3028	 ldr         r3, [sp, #0x28]
  01250	e58d3044	 str         r3, [sp, #0x44]

; 782  :                 CurrSamp[i&1] += (LONG)pSampleSrc->m16.sample;

  01254	e59d3004	 ldr         r3, [sp, #4]
  01258	e2031001	 and         r1, r3, #1
  0125c	e3a03004	 mov         r3, #4
  01260	e0020391	 mul         r2, r1, r3
  01264	e28d3010	 add         r3, sp, #0x10
  01268	e0831002	 add         r1, r3, r2
  0126c	e59d3044	 ldr         r3, [sp, #0x44]
  01270	e1d320f0	 ldrsh       r2, [r3]
  01274	e5913000	 ldr         r3, [r1]
  01278	e0830002	 add         r0, r3, r2
  0127c	e59d3004	 ldr         r3, [sp, #4]
  01280	e2031001	 and         r1, r3, #1
  01284	e3a03004	 mov         r3, #4
  01288	e0020391	 mul         r2, r1, r3
  0128c	e28d3010	 add         r3, sp, #0x10
  01290	e0833002	 add         r3, r3, r2
  01294	e5830000	 str         r0, [r3]

; 783  :                 pCurrData+=2;

  01298	e59d3028	 ldr         r3, [sp, #0x28]
  0129c	e2833002	 add         r3, r3, #2
  012a0	e58d3028	 str         r3, [sp, #0x28]

; 784  :             }

  012a4	eaffffe1	 b           |$LN12@Render2@5|
  012a8		 |$LN11@Render2@5|

; 785  :         }

  012a8	eaffffb3	 b           |$LN20@Render2@5|
  012ac		 |$LN19@Render2@5|

; 786  : 
; 787  :         // Calculate ratio between samples as a 17.15 fraction
; 788  :         // (Only use 15 bits to avoid overflow on next multiply)
; 789  :         LONG Ratio;
; 790  :         Ratio = (CurrPos * BaseRateInv)>>17;

  012ac	e59d203c	 ldr         r2, [sp, #0x3C]
  012b0	e59d300c	 ldr         r3, [sp, #0xC]
  012b4	e0030392	 mul         r3, r2, r3
  012b8	e1a038a3	 mov         r3, r3, lsr #17
  012bc	e58d3040	 str         r3, [sp, #0x40]

; 791  : 
; 792  :         for (i=0;i<2;i++)

  012c0	e3a03000	 mov         r3, #0
  012c4	e58d3004	 str         r3, [sp, #4]
  012c8	ea000002	 b           |$LN10@Render2@5|
  012cc		 |$LN9@Render2@5|
  012cc	e59d3004	 ldr         r3, [sp, #4]
  012d0	e2833001	 add         r3, r3, #1
  012d4	e58d3004	 str         r3, [sp, #4]
  012d8		 |$LN10@Render2@5|
  012d8	e59d3004	 ldr         r3, [sp, #4]
  012dc	e3530002	 cmp         r3, #2
  012e0	aa000091	 bge         |$LN8@Render2@5|

; 793  :         {
; 794  :             // Calc difference between samples. Note OutSamp0 is a 17-bit signed number now.
; 795  :             OutSamp[i] = PrevSamp[i] - CurrSamp[i];

  012e4	e59d1004	 ldr         r1, [sp, #4]
  012e8	e3a03004	 mov         r3, #4
  012ec	e0020391	 mul         r2, r1, r3
  012f0	e28d3020	 add         r3, sp, #0x20
  012f4	e0830002	 add         r0, r3, r2
  012f8	e59d1004	 ldr         r1, [sp, #4]
  012fc	e3a03004	 mov         r3, #4
  01300	e0020391	 mul         r2, r1, r3
  01304	e28d3010	 add         r3, sp, #0x10
  01308	e0833002	 add         r3, r3, r2
  0130c	e5902000	 ldr         r2, [r0]
  01310	e5933000	 ldr         r3, [r3]
  01314	e0420003	 sub         r0, r2, r3
  01318	e59d1004	 ldr         r1, [sp, #4]
  0131c	e3a03004	 mov         r3, #4
  01320	e0020391	 mul         r2, r1, r3
  01324	e28d3018	 add         r3, sp, #0x18
  01328	e0833002	 add         r3, r3, r2
  0132c	e5830000	 str         r0, [r3]

; 796  : 
; 797  :             // Now interpolate
; 798  :             OutSamp[i] = (OutSamp[i] * Ratio) >> 15;

  01330	e59d1004	 ldr         r1, [sp, #4]
  01334	e3a03004	 mov         r3, #4
  01338	e0020391	 mul         r2, r1, r3
  0133c	e28d3018	 add         r3, sp, #0x18
  01340	e0833002	 add         r3, r3, r2
  01344	e5932000	 ldr         r2, [r3]
  01348	e59d3040	 ldr         r3, [sp, #0x40]
  0134c	e0030392	 mul         r3, r2, r3
  01350	e1a007c3	 mov         r0, r3, asr #15
  01354	e59d1004	 ldr         r1, [sp, #4]
  01358	e3a03004	 mov         r3, #4
  0135c	e0020391	 mul         r2, r1, r3
  01360	e28d3018	 add         r3, sp, #0x18
  01364	e0833002	 add         r3, r3, r2
  01368	e5830000	 str         r0, [r3]

; 799  : 
; 800  :             // Add to previous number
; 801  :             OutSamp[i] += CurrSamp[i];

  0136c	e59d1004	 ldr         r1, [sp, #4]
  01370	e3a03004	 mov         r3, #4
  01374	e0020391	 mul         r2, r1, r3
  01378	e28d3018	 add         r3, sp, #0x18
  0137c	e0830002	 add         r0, r3, r2
  01380	e59d1004	 ldr         r1, [sp, #4]
  01384	e3a03004	 mov         r3, #4
  01388	e0020391	 mul         r2, r1, r3
  0138c	e28d3010	 add         r3, sp, #0x10
  01390	e0833002	 add         r3, r3, r2
  01394	e5902000	 ldr         r2, [r0]
  01398	e5933000	 ldr         r3, [r3]
  0139c	e0820003	 add         r0, r2, r3
  013a0	e59d1004	 ldr         r1, [sp, #4]
  013a4	e3a03004	 mov         r3, #4
  013a8	e0020391	 mul         r2, r1, r3
  013ac	e28d3018	 add         r3, sp, #0x18
  013b0	e0833002	 add         r3, r3, r2
  013b4	e5830000	 str         r0, [r3]

; 802  : 
; 803  :             // Gain
; 804  :             OutSamp[i] = (OutSamp[i] * fxpGain[i]) >> VOLSHIFT;

  013b8	e59d1004	 ldr         r1, [sp, #4]
  013bc	e3a03004	 mov         r3, #4
  013c0	e0020391	 mul         r2, r1, r3
  013c4	e28d3018	 add         r3, sp, #0x18
  013c8	e0830002	 add         r0, r3, r2
  013cc	e59d1004	 ldr         r1, [sp, #4]
  013d0	e3a03004	 mov         r3, #4
  013d4	e0020391	 mul         r2, r1, r3
  013d8	e28d3034	 add         r3, sp, #0x34
  013dc	e0833002	 add         r3, r3, r2
  013e0	e5902000	 ldr         r2, [r0]
  013e4	e5933000	 ldr         r3, [r3]
  013e8	e0030392	 mul         r3, r2, r3
  013ec	e1a00843	 mov         r0, r3, asr #16
  013f0	e59d1004	 ldr         r1, [sp, #4]
  013f4	e3a03004	 mov         r3, #4
  013f8	e0020391	 mul         r2, r1, r3
  013fc	e28d3018	 add         r3, sp, #0x18
  01400	e0833002	 add         r3, r3, r2
  01404	e5830000	 str         r0, [r3]

; 805  :             // DEBUGMSG(1, (TEXT("PrevSamp0=0x%x, CurrSamp0=0x%x, CurrT=0x%x, OutSamp0=0x%x\r\n"), PrevSamp0,CurrSamp0,CurrT,OutSamp0));
; 806  : 
; 807  :             if (pBuffer < pBufferLast)

  01408	e59d2060	 ldr         r2, [sp, #0x60]
  0140c	e59d3068	 ldr         r3, [sp, #0x68]
  01410	e1520003	 cmp         r2, r3
  01414	2a000035	 bcs         |$LN7@Render2@5|

; 808  :             {
; 809  :                 OutSamp[i] += ((HWSAMPLE *)pBuffer)[i];

  01418	e59d1004	 ldr         r1, [sp, #4]
  0141c	e3a03004	 mov         r3, #4
  01420	e0020391	 mul         r2, r1, r3
  01424	e28d3018	 add         r3, sp, #0x18
  01428	e0830002	 add         r0, r3, r2
  0142c	e59d1004	 ldr         r1, [sp, #4]
  01430	e3a03002	 mov         r3, #2
  01434	e0020391	 mul         r2, r1, r3
  01438	e59d3060	 ldr         r3, [sp, #0x60]
  0143c	e0833002	 add         r3, r3, r2
  01440	e1d320f0	 ldrsh       r2, [r3]
  01444	e5903000	 ldr         r3, [r0]
  01448	e0830002	 add         r0, r3, r2
  0144c	e59d1004	 ldr         r1, [sp, #4]
  01450	e3a03004	 mov         r3, #4
  01454	e0020391	 mul         r2, r1, r3
  01458	e28d3018	 add         r3, sp, #0x18
  0145c	e0833002	 add         r3, r3, r2
  01460	e5830000	 str         r0, [r3]

; 810  :     #if USE_MIX_SATURATE
; 811  :                 // Handle saturation
; 812  :                 if (OutSamp[i]>AUDIO_SAMPLE_MAX)

  01464	e59d1004	 ldr         r1, [sp, #4]
  01468	e3a03004	 mov         r3, #4
  0146c	e0020391	 mul         r2, r1, r3
  01470	e28d3018	 add         r3, sp, #0x18
  01474	e0833002	 add         r3, r3, r2
  01478	e5932000	 ldr         r2, [r3]
  0147c	e3a03c7f	 mov         r3, #0x7F, 24
  01480	e38330ff	 orr         r3, r3, #0xFF
  01484	e1520003	 cmp         r2, r3
  01488	da000008	 ble         |$LN6@Render2@5|

; 813  :                 {
; 814  :                     OutSamp[i]=AUDIO_SAMPLE_MAX;

  0148c	e59d1004	 ldr         r1, [sp, #4]
  01490	e3a03004	 mov         r3, #4
  01494	e0020391	 mul         r2, r1, r3
  01498	e28d3018	 add         r3, sp, #0x18
  0149c	e0832002	 add         r2, r3, r2
  014a0	e3a03c7f	 mov         r3, #0x7F, 24
  014a4	e38330ff	 orr         r3, r3, #0xFF
  014a8	e5823000	 str         r3, [r2]
  014ac	ea00000f	 b           |$LN5@Render2@5|
  014b0		 |$LN6@Render2@5|

; 815  :                 }
; 816  :                 else if (OutSamp[i]<AUDIO_SAMPLE_MIN)

  014b0	e59d1004	 ldr         r1, [sp, #4]
  014b4	e3a03004	 mov         r3, #4
  014b8	e0020391	 mul         r2, r1, r3
  014bc	e28d3018	 add         r3, sp, #0x18
  014c0	e0833002	 add         r3, r3, r2
  014c4	e5933000	 ldr         r3, [r3]
  014c8	e3730902	 cmn         r3, #2, 18
  014cc	aa000007	 bge         |$LN4@Render2@5|

; 817  :                 {
; 818  :                     OutSamp[i]=AUDIO_SAMPLE_MIN;

  014d0	e59d1004	 ldr         r1, [sp, #4]
  014d4	e3a03004	 mov         r3, #4
  014d8	e0020391	 mul         r2, r1, r3
  014dc	e28d3018	 add         r3, sp, #0x18
  014e0	e0832002	 add         r2, r3, r2
  014e4	e3e030ff	 mvn         r3, #0xFF
  014e8	e1a03383	 mov         r3, r3, lsl #7
  014ec	e5823000	 str         r3, [r2]
  014f0		 |$LN4@Render2@5|
  014f0		 |$LN5@Render2@5|
  014f0		 |$LN7@Render2@5|

; 819  :                 }
; 820  :     #endif
; 821  :             }
; 822  :             ((HWSAMPLE *)pBuffer)[i] = (HWSAMPLE)OutSamp[i];

  014f0	e59d1004	 ldr         r1, [sp, #4]
  014f4	e3a03004	 mov         r3, #4
  014f8	e0020391	 mul         r2, r1, r3
  014fc	e28d3018	 add         r3, sp, #0x18
  01500	e0833002	 add         r3, r3, r2
  01504	e5933000	 ldr         r3, [r3]
  01508	e1a00803	 mov         r0, r3, lsl #16
  0150c	e1a00840	 mov         r0, r0, asr #16
  01510	e59d1004	 ldr         r1, [sp, #4]
  01514	e3a03002	 mov         r3, #2
  01518	e0020391	 mul         r2, r1, r3
  0151c	e59d3060	 ldr         r3, [sp, #0x60]
  01520	e0833002	 add         r3, r3, r2
  01524	e1c300b0	 strh        r0, [r3]

; 823  :         }

  01528	eaffff67	 b           |$LN9@Render2@5|
  0152c		 |$LN8@Render2@5|

; 824  : 
; 825  :         pBuffer += 2*sizeof(HWSAMPLE);

  0152c	e59d3060	 ldr         r3, [sp, #0x60]
  01530	e2833004	 add         r3, r3, #4
  01534	e58d3060	 str         r3, [sp, #0x60]

; 826  : 
; 827  :         CurrPos -= ClientRate;

  01538	e59d203c	 ldr         r2, [sp, #0x3C]
  0153c	e59d3000	 ldr         r3, [sp]
  01540	e0423003	 sub         r3, r2, r3
  01544	e58d303c	 str         r3, [sp, #0x3C]
  01548	eaffff07	 b           |$LN22@Render2@5|
  0154c		 |$LN21@Render2@5|
  0154c		 |$LN17@Render2@5|
  0154c		 |$Exit$35478|

; 828  :     }
; 829  : 
; 830  :     Exit:
; 831  :     m_dwByteCount += (pCurrData - m_lpCurrData);

  0154c	e59d305c	 ldr         r3, [sp, #0x5C]
  01550	e283104c	 add         r1, r3, #0x4C
  01554	e59d305c	 ldr         r3, [sp, #0x5C]
  01558	e2833044	 add         r3, r3, #0x44
  0155c	e59d2028	 ldr         r2, [sp, #0x28]
  01560	e5933000	 ldr         r3, [r3]
  01564	e0422003	 sub         r2, r2, r3
  01568	e5913000	 ldr         r3, [r1]
  0156c	e0832002	 add         r2, r3, r2
  01570	e59d305c	 ldr         r3, [sp, #0x5C]
  01574	e283304c	 add         r3, r3, #0x4C
  01578	e5832000	 str         r2, [r3]

; 832  :     m_lpCurrData = pCurrData;

  0157c	e59d305c	 ldr         r3, [sp, #0x5C]
  01580	e2832044	 add         r2, r3, #0x44
  01584	e59d3028	 ldr         r3, [sp, #0x28]
  01588	e5823000	 str         r3, [r2]

; 833  :     m_CurrPos = CurrPos;

  0158c	e59d305c	 ldr         r3, [sp, #0x5C]
  01590	e2832088	 add         r2, r3, #0x88
  01594	e59d303c	 ldr         r3, [sp, #0x3C]
  01598	e5823000	 str         r3, [r2]

; 834  :     for (i=0;i<2;i++)

  0159c	e3a03000	 mov         r3, #0
  015a0	e58d3004	 str         r3, [sp, #4]
  015a4	ea000002	 b           |$LN3@Render2@5|
  015a8		 |$LN2@Render2@5|
  015a8	e59d3004	 ldr         r3, [sp, #4]
  015ac	e2833001	 add         r3, r3, #1
  015b0	e58d3004	 str         r3, [sp, #4]
  015b4		 |$LN3@Render2@5|
  015b4	e59d3004	 ldr         r3, [sp, #4]
  015b8	e3530002	 cmp         r3, #2
  015bc	aa00001a	 bge         |$LN1@Render2@5|

; 835  :     {
; 836  :         m_PrevSamp[i] = PrevSamp[i];

  015c0	e59d1004	 ldr         r1, [sp, #4]
  015c4	e3a03004	 mov         r3, #4
  015c8	e0020391	 mul         r2, r1, r3
  015cc	e28d3020	 add         r3, sp, #0x20
  015d0	e0830002	 add         r0, r3, r2
  015d4	e59d305c	 ldr         r3, [sp, #0x5C]
  015d8	e2831078	 add         r1, r3, #0x78
  015dc	e59d2004	 ldr         r2, [sp, #4]
  015e0	e3a03004	 mov         r3, #4
  015e4	e0030392	 mul         r3, r2, r3
  015e8	e0812003	 add         r2, r1, r3
  015ec	e5903000	 ldr         r3, [r0]
  015f0	e5823000	 str         r3, [r2]

; 837  :         m_CurrSamp[i] = CurrSamp[i];

  015f4	e59d1004	 ldr         r1, [sp, #4]
  015f8	e3a03004	 mov         r3, #4
  015fc	e0020391	 mul         r2, r1, r3
  01600	e28d3010	 add         r3, sp, #0x10
  01604	e0830002	 add         r0, r3, r2
  01608	e59d305c	 ldr         r3, [sp, #0x5C]
  0160c	e2831080	 add         r1, r3, #0x80
  01610	e59d2004	 ldr         r2, [sp, #4]
  01614	e3a03004	 mov         r3, #4
  01618	e0030392	 mul         r3, r2, r3
  0161c	e0812003	 add         r2, r1, r3
  01620	e5903000	 ldr         r3, [r0]
  01624	e5823000	 str         r3, [r2]

; 838  :     }

  01628	eaffffde	 b           |$LN2@Render2@5|
  0162c		 |$LN1@Render2@5|

; 839  : 
; 840  :     return pBuffer;

  0162c	e59d3060	 ldr         r3, [sp, #0x60]
  01630	e58d3048	 str         r3, [sp, #0x48]

; 841  : }

  01634	e59d0048	 ldr         r0, [sp, #0x48]
  01638	e28dd054	 add         sp, sp, #0x54
  0163c	e89d6000	 ldmia       sp, {sp, lr}
  01640	e12fff1e	 bx          lr
  01644		 |$M35573|

			 ENDP  ; |?Render2@OutputStreamContextMC@@UAAPAEPAE00PAUTRANSFER_STATUS@@@Z|, OutputStreamContextMC::Render2

	EXPORT	|?Render2@OutputStreamContextEncodedSPDIF@@UAAPAEPAE00PAUTRANSFER_STATUS@@@Z| ; OutputStreamContextEncodedSPDIF::Render2
	IMPORT	|memcpy|

  00040			 AREA	 |.pdata|, PDATA
|$T35583| DCD	|$LN7@Render2@6|
	DCD	0x40004304
; Function compile flags: /Odtp

  01644			 AREA	 |.text|, CODE, ARM

  01644		 |?Render2@OutputStreamContextEncodedSPDIF@@UAAPAEPAE00PAUTRANSFER_STATUS@@@Z| PROC ; OutputStreamContextEncodedSPDIF::Render2

; 844  : {

  01644		 |$LN7@Render2@6|
  01644	e1a0c00d	 mov         r12, sp
  01648	e92d000f	 stmdb       sp!, {r0 - r3}
  0164c	e92d5000	 stmdb       sp!, {r12, lr}
  01650	e24dd014	 sub         sp, sp, #0x14
  01654		 |$M35580|

; 845  :     DWORD dwSrcBytes = m_lpCurrDataEnd - m_lpCurrData;

  01654	e59d301c	 ldr         r3, [sp, #0x1C]
  01658	e2832048	 add         r2, r3, #0x48
  0165c	e59d301c	 ldr         r3, [sp, #0x1C]
  01660	e2833044	 add         r3, r3, #0x44
  01664	e5922000	 ldr         r2, [r2]
  01668	e5933000	 ldr         r3, [r3]
  0166c	e0423003	 sub         r3, r2, r3
  01670	e58d3008	 str         r3, [sp, #8]

; 846  :     DWORD dwDstBytes = pBufferEnd - pBuffer;

  01674	e59d2024	 ldr         r2, [sp, #0x24]
  01678	e59d3020	 ldr         r3, [sp, #0x20]
  0167c	e0423003	 sub         r3, r2, r3
  01680	e58d3000	 str         r3, [sp]

; 847  :     DWORD dwBytesToCopy = min(dwSrcBytes,dwDstBytes);

  01684	e59d2008	 ldr         r2, [sp, #8]
  01688	e59d3000	 ldr         r3, [sp]
  0168c	e1520003	 cmp         r2, r3
  01690	2a000002	 bcs         |$LN3@Render2@6|
  01694	e59d3008	 ldr         r3, [sp, #8]
  01698	e58d3010	 str         r3, [sp, #0x10]
  0169c	ea000001	 b           |$LN4@Render2@6|
  016a0		 |$LN3@Render2@6|
  016a0	e59d3000	 ldr         r3, [sp]
  016a4	e58d3010	 str         r3, [sp, #0x10]
  016a8		 |$LN4@Render2@6|
  016a8	e59d3010	 ldr         r3, [sp, #0x10]
  016ac	e58d3004	 str         r3, [sp, #4]

; 848  : 
; 849  :     memcpy(pBuffer,m_lpCurrData,dwBytesToCopy);

  016b0	e59d2004	 ldr         r2, [sp, #4]
  016b4	e59d301c	 ldr         r3, [sp, #0x1C]
  016b8	e2833044	 add         r3, r3, #0x44
  016bc	e5931000	 ldr         r1, [r3]
  016c0	e59d0020	 ldr         r0, [sp, #0x20]
  016c4	eb000000	 bl          memcpy

; 850  : 
; 851  :     m_dwByteCount += dwBytesToCopy;

  016c8	e59d301c	 ldr         r3, [sp, #0x1C]
  016cc	e283304c	 add         r3, r3, #0x4C
  016d0	e5932000	 ldr         r2, [r3]
  016d4	e59d3004	 ldr         r3, [sp, #4]
  016d8	e0822003	 add         r2, r2, r3
  016dc	e59d301c	 ldr         r3, [sp, #0x1C]
  016e0	e283304c	 add         r3, r3, #0x4C
  016e4	e5832000	 str         r2, [r3]

; 852  :     m_lpCurrData += dwBytesToCopy;

  016e8	e59d301c	 ldr         r3, [sp, #0x1C]
  016ec	e2833044	 add         r3, r3, #0x44
  016f0	e5932000	 ldr         r2, [r3]
  016f4	e59d3004	 ldr         r3, [sp, #4]
  016f8	e0822003	 add         r2, r2, r3
  016fc	e59d301c	 ldr         r3, [sp, #0x1C]
  01700	e2833044	 add         r3, r3, #0x44
  01704	e5832000	 str         r2, [r3]

; 853  : 
; 854  :     pBufferLast = pBuffer+dwBytesToCopy;

  01708	e59d2020	 ldr         r2, [sp, #0x20]
  0170c	e59d3004	 ldr         r3, [sp, #4]
  01710	e0823003	 add         r3, r2, r3
  01714	e58d3028	 str         r3, [sp, #0x28]

; 855  : 
; 856  :     // Send a note to hardware that the current buffer has SPDIF compressed data
; 857  :     pTransferStatus->Encoded = TRUE;

  01718	e59d302c	 ldr         r3, [sp, #0x2C]
  0171c	e2832008	 add         r2, r3, #8
  01720	e3a03001	 mov         r3, #1
  01724	e5823000	 str         r3, [r2]

; 858  : 
; 859  :     // Force other streams to mute their outputs for this DMA buffer
; 860  :     pTransferStatus->Mute = TRUE;

  01728	e59d302c	 ldr         r3, [sp, #0x2C]
  0172c	e2832004	 add         r2, r3, #4
  01730	e3a03001	 mov         r3, #1
  01734	e5823000	 str         r3, [r2]

; 861  : 
; 862  :     return pBufferLast;

  01738	e59d3028	 ldr         r3, [sp, #0x28]
  0173c	e58d300c	 str         r3, [sp, #0xC]

; 863  : }

  01740	e59d000c	 ldr         r0, [sp, #0xC]
  01744	e28dd014	 add         sp, sp, #0x14
  01748	e89d6000	 ldmia       sp, {sp, lr}
  0174c	e12fff1e	 bx          lr
  01750		 |$M35581|

			 ENDP  ; |?Render2@OutputStreamContextEncodedSPDIF@@UAAPAEPAE00PAUTRANSFER_STATUS@@@Z|, OutputStreamContextEncodedSPDIF::Render2

	EXPORT	|?IsExclusive@OutputStreamContextEncodedSPDIF@@UAAHXZ| ; OutputStreamContextEncodedSPDIF::IsExclusive

  00048			 AREA	 |.pdata|, PDATA
|$T35589| DCD	|$LN5@IsExclusiv|
	DCD	0x40000a04
; Function compile flags: /Odtp

  01750			 AREA	 |.text|, CODE, ARM

  01750		 |?IsExclusive@OutputStreamContextEncodedSPDIF@@UAAHXZ| PROC ; OutputStreamContextEncodedSPDIF::IsExclusive

; 866  : {

  01750		 |$LN5@IsExclusiv|
  01750	e1a0c00d	 mov         r12, sp
  01754	e92d0001	 stmdb       sp!, {r0}
  01758	e92d5000	 stmdb       sp!, {r12, lr}
  0175c	e24dd004	 sub         sp, sp, #4
  01760		 |$M35586|

; 867  :     return TRUE;

  01760	e3a03001	 mov         r3, #1
  01764	e58d3000	 str         r3, [sp]

; 868  : }

  01768	e59d0000	 ldr         r0, [sp]
  0176c	e28dd004	 add         sp, sp, #4
  01770	e89d6000	 ldmia       sp, {sp, lr}
  01774	e12fff1e	 bx          lr
  01778		 |$M35587|

			 ENDP  ; |?IsExclusive@OutputStreamContextEncodedSPDIF@@UAAHXZ|, OutputStreamContextEncodedSPDIF::IsExclusive

	EXPORT	|?SetRate@OutputStreamContextEncodedSPDIF@@UAAKK@Z| ; OutputStreamContextEncodedSPDIF::SetRate

  00050			 AREA	 |.pdata|, PDATA
|$T35597| DCD	|$LN7@SetRate|
	DCD	0x40001204
; Function compile flags: /Odtp

  01778			 AREA	 |.text|, CODE, ARM

  01778		 |?SetRate@OutputStreamContextEncodedSPDIF@@UAAKK@Z| PROC ; OutputStreamContextEncodedSPDIF::SetRate

; 872  : {

  01778		 |$LN7@SetRate|
  01778	e1a0c00d	 mov         r12, sp
  0177c	e92d0003	 stmdb       sp!, {r0, r1}
  01780	e92d5000	 stmdb       sp!, {r12, lr}
  01784	e24dd008	 sub         sp, sp, #8
  01788		 |$M35594|

; 873  :     return (dwMultiplier == 0x10000) ? MMSYSERR_NOERROR : MMSYSERR_NOTSUPPORTED ;

  01788	e59d3014	 ldr         r3, [sp, #0x14]
  0178c	e3530801	 cmp         r3, #1, 16
  01790	1a000002	 bne         |$LN3@SetRate|
  01794	e3a03000	 mov         r3, #0
  01798	e58d3004	 str         r3, [sp, #4]
  0179c	ea000001	 b           |$LN4@SetRate|
  017a0		 |$LN3@SetRate|
  017a0	e3a03008	 mov         r3, #8
  017a4	e58d3004	 str         r3, [sp, #4]
  017a8		 |$LN4@SetRate|
  017a8	e59d3004	 ldr         r3, [sp, #4]
  017ac	e58d3000	 str         r3, [sp]

; 874  : }

  017b0	e59d0000	 ldr         r0, [sp]
  017b4	e28dd008	 add         sp, sp, #8
  017b8	e89d6000	 ldmia       sp, {sp, lr}
  017bc	e12fff1e	 bx          lr
  017c0		 |$M35595|

			 ENDP  ; |?SetRate@OutputStreamContextEncodedSPDIF@@UAAKK@Z|, OutputStreamContextEncodedSPDIF::SetRate

	END
