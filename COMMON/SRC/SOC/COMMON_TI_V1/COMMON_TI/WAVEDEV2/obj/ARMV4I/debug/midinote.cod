; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\WAVEDEV2\midinote.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|?SineTable@CMidiNote@@0QBFB| [ DATA ]	; CMidiNote::SineTable

  00000			 AREA	 |.rdata|, DATA, READONLY
|?SineTable@CMidiNote@@0QBFB| DCW 0x0			; CMidiNote::SineTable
	DCW	0x324
	DCW	0x647
	DCW	0x96a
	DCW	0xc8b
	DCW	0xfab
	DCW	0x12c7
	DCW	0x15e1
	DCW	0x18f8
	DCW	0x1c0b
	DCW	0x1f19
	DCW	0x2223
	DCW	0x2527
	DCW	0x2826
	DCW	0x2b1e
	DCW	0x2e10
	DCW	0x30fb
	DCW	0x33de
	DCW	0x36b9
	DCW	0x398c
	DCW	0x3c56
	DCW	0x3f16
	DCW	0x41cd
	DCW	0x447a
	DCW	0x471c
	DCW	0x49b3
	DCW	0x4c3f
	DCW	0x4ebf
	DCW	0x5133
	DCW	0x539a
	DCW	0x55f4
	DCW	0x5842
	DCW	0x5a81
	DCW	0x5cb3
	DCW	0x5ed6
	DCW	0x60eb
	DCW	0x62f1
	DCW	0x64e7
	DCW	0x66ce
	DCW	0x68a5
	DCW	0x6a6c
	DCW	0x6c23
	DCW	0x6dc9
	DCW	0x6f5e
	DCW	0x70e1
	DCW	0x7254
	DCW	0x73b5
	DCW	0x7503
	DCW	0x7640
	DCW	0x776b
	DCW	0x7883
	DCW	0x7989
	DCW	0x7a7c
	DCW	0x7b5c
	DCW	0x7c29
	DCW	0x7ce2
	DCW	0x7d89
	DCW	0x7e1c
	DCW	0x7e9c
	DCW	0x7f08
	DCW	0x7f61
	DCW	0x7fa6
	DCW	0x7fd7
	DCW	0x7ff5
	DCW	0x7fff
	DCW	0x7ff5
	DCW	0x7fd7
	DCW	0x7fa6
	DCW	0x7f61
	DCW	0x7f08
	DCW	0x7e9c
	DCW	0x7e1c
	DCW	0x7d89
	DCW	0x7ce2
	DCW	0x7c29
	DCW	0x7b5c
	DCW	0x7a7c
	DCW	0x7989
	DCW	0x7883
	DCW	0x776b
	DCW	0x7640
	DCW	0x7503
	DCW	0x73b5
	DCW	0x7254
	DCW	0x70e1
	DCW	0x6f5e
	DCW	0x6dc9
	DCW	0x6c23
	DCW	0x6a6c
	DCW	0x68a5
	DCW	0x66ce
	DCW	0x64e7
	DCW	0x62f1
	DCW	0x60eb
	DCW	0x5ed6
	DCW	0x5cb3
	DCW	0x5a81
	DCW	0x5842
	DCW	0x55f4
	DCW	0x539a
	DCW	0x5133
	DCW	0x4ebf
	DCW	0x4c3f
	DCW	0x49b3
	DCW	0x471c
	DCW	0x447a
	DCW	0x41cd
	DCW	0x3f16
	DCW	0x3c56
	DCW	0x398c
	DCW	0x36b9
	DCW	0x33de
	DCW	0x30fb
	DCW	0x2e10
	DCW	0x2b1e
	DCW	0x2826
	DCW	0x2527
	DCW	0x2223
	DCW	0x1f19
	DCW	0x1c0b
	DCW	0x18f8
	DCW	0x15e1
	DCW	0x12c7
	DCW	0xfab
	DCW	0xc8b
	DCW	0x96a
	DCW	0x647
	DCW	0x324
	DCW	0x0
	DCW	0xfcdc
	DCW	0xf9b9
	DCW	0xf696
	DCW	0xf375
	DCW	0xf055
	DCW	0xed39
	DCW	0xea1f
	DCW	0xe708
	DCW	0xe3f5
	DCW	0xe0e7
	DCW	0xdddd
	DCW	0xdad9
	DCW	0xd7da
	DCW	0xd4e2
	DCW	0xd1f0
	DCW	0xcf05
	DCW	0xcc22
	DCW	0xc947
	DCW	0xc674
	DCW	0xc3aa
	DCW	0xc0ea
	DCW	0xbe33
	DCW	0xbb86
	DCW	0xb8e4
	DCW	0xb64d
	DCW	0xb3c1
	DCW	0xb141
	DCW	0xaecd
	DCW	0xac66
	DCW	0xaa0c
	DCW	0xa7be
	DCW	0xa57f
	DCW	0xa34d
	DCW	0xa12a
	DCW	0x9f15
	DCW	0x9d0f
	DCW	0x9b19
	DCW	0x9932
	DCW	0x975b
	DCW	0x9594
	DCW	0x93dd
	DCW	0x9237
	DCW	0x90a2
	DCW	0x8f1f
	DCW	0x8dac
	DCW	0x8c4b
	DCW	0x8afd
	DCW	0x89c0
	DCW	0x8895
	DCW	0x877d
	DCW	0x8677
	DCW	0x8584
	DCW	0x84a4
	DCW	0x83d7
	DCW	0x831e
	DCW	0x8277
	DCW	0x81e4
	DCW	0x8164
	DCW	0x80f8
	DCW	0x809f
	DCW	0x805a
	DCW	0x8029
	DCW	0x800b
	DCW	0x8001
	DCW	0x800b
	DCW	0x8029
	DCW	0x805a
	DCW	0x809f
	DCW	0x80f8
	DCW	0x8164
	DCW	0x81e4
	DCW	0x8277
	DCW	0x831e
	DCW	0x83d7
	DCW	0x84a4
	DCW	0x8584
	DCW	0x8677
	DCW	0x877d
	DCW	0x8895
	DCW	0x89c0
	DCW	0x8afd
	DCW	0x8c4b
	DCW	0x8dac
	DCW	0x8f1f
	DCW	0x90a2
	DCW	0x9237
	DCW	0x93dd
	DCW	0x9594
	DCW	0x975b
	DCW	0x9932
	DCW	0x9b19
	DCW	0x9d0f
	DCW	0x9f15
	DCW	0xa12a
	DCW	0xa34d
	DCW	0xa57f
	DCW	0xa7be
	DCW	0xaa0c
	DCW	0xac66
	DCW	0xaecd
	DCW	0xb141
	DCW	0xb3c1
	DCW	0xb64d
	DCW	0xb8e4
	DCW	0xbb86
	DCW	0xbe33
	DCW	0xc0ea
	DCW	0xc3aa
	DCW	0xc674
	DCW	0xc947
	DCW	0xcc22
	DCW	0xcf05
	DCW	0xd1f0
	DCW	0xd4e2
	DCW	0xd7da
	DCW	0xdad9
	DCW	0xdddd
	DCW	0xe0e7
	DCW	0xe3f5
	DCW	0xe708
	DCW	0xea1f
	DCW	0xed39
	DCW	0xf055
	DCW	0xf375
	DCW	0xf696
	DCW	0xf9b9
	DCW	0xfcdc
	DCW	0x0
	EXPORT	|?GainChange@CMidiNote@@QAAXXZ|		; CMidiNote::GainChange
	IMPORT	|?MapNoteGain@CMidiStream@@QAAKKK@Z|	; CMidiStream::MapNoteGain

  00000			 AREA	 |.pdata|, PDATA
|$T35344| DCD	|$LN8@GainChange|
	DCD	0x40002204
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\wavedev2\midinote.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GainChange@CMidiNote@@QAAXXZ| PROC	; CMidiNote::GainChange

; 293  : {

  00000		 |$LN8@GainChange|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd008	 sub         sp, sp, #8
  00010		 |$M35341|

; 294  :     // We keep separate volumes for both channels
; 295  :     for (int i=0; i<2; i++)

  00010	e3a03000	 mov         r3, #0
  00014	e58d3000	 str         r3, [sp]
  00018	ea000002	 b           |$LN3@GainChange|
  0001c		 |$LN2@GainChange|
  0001c	e59d3000	 ldr         r3, [sp]
  00020	e2833001	 add         r3, r3, #1
  00024	e58d3000	 str         r3, [sp]
  00028		 |$LN3@GainChange|
  00028	e59d3000	 ldr         r3, [sp]
  0002c	e3530002	 cmp         r3, #2
  00030	aa000011	 bge         |$LN1@GainChange|

; 296  :     {
; 297  : #if (MONO_GAIN)
; 298  :         m_fxpGain[i] = m_pMidiStream->MapNoteGain(m_dwGain,0);
; 299  : #else
; 300  :         m_fxpGain[i] = m_pMidiStream->MapNoteGain(m_dwGain,i);

  00034	e59d2000	 ldr         r2, [sp]
  00038	e59d3010	 ldr         r3, [sp, #0x10]
  0003c	e2833020	 add         r3, r3, #0x20
  00040	e5931000	 ldr         r1, [r3]
  00044	e59d3010	 ldr         r3, [sp, #0x10]
  00048	e2833008	 add         r3, r3, #8
  0004c	e5930000	 ldr         r0, [r3]
  00050	eb000000	 bl          |?MapNoteGain@CMidiStream@@QAAKKK@Z|
  00054	e58d0004	 str         r0, [sp, #4]
  00058	e59d3010	 ldr         r3, [sp, #0x10]
  0005c	e2831024	 add         r1, r3, #0x24
  00060	e59d2000	 ldr         r2, [sp]
  00064	e3a03004	 mov         r3, #4
  00068	e0030392	 mul         r3, r2, r3
  0006c	e0812003	 add         r2, r1, r3
  00070	e59d3004	 ldr         r3, [sp, #4]
  00074	e5823000	 str         r3, [r2]
  00078	eaffffe7	 b           |$LN2@GainChange|
  0007c		 |$LN1@GainChange|

; 301  : #endif
; 302  :     }
; 303  : }

  0007c	e28dd008	 add         sp, sp, #8
  00080	e89d6000	 ldmia       sp, {sp, lr}
  00084	e12fff1e	 bx          lr
  00088		 |$M35342|

			 ENDP  ; |?GainChange@CMidiNote@@QAAXXZ|, CMidiNote::GainChange

	EXPORT	|?ResetBaseInfo@CMidiNote@@QAAXXZ|	; CMidiNote::ResetBaseInfo
	IMPORT	|?GetDeltaFromNote@CMidiStream@@QAAKK@Z| ; CMidiStream::GetDeltaFromNote
	IMPORT	|?GetDeltaFromFreq@CMidiStream@@QAAKK@Z| ; CMidiStream::GetDeltaFromFreq

  00008			 AREA	 |.pdata|, PDATA
|$T35349| DCD	|$LN7@ResetBaseI|
	DCD	0x40002504
; Function compile flags: /Odtp

  00088			 AREA	 |.text|, CODE, ARM

  00088		 |?ResetBaseInfo@CMidiNote@@QAAXXZ| PROC ; CMidiNote::ResetBaseInfo

; 307  : {

  00088		 |$LN7@ResetBaseI|
  00088	e1a0c00d	 mov         r12, sp
  0008c	e92d0001	 stmdb       sp!, {r0}
  00090	e92d5000	 stmdb       sp!, {r12, lr}
  00094	e24dd008	 sub         sp, sp, #8
  00098		 |$M35346|

; 308  :     if (m_Channel==FREQCHANNEL)

  00098	e59d3010	 ldr         r3, [sp, #0x10]
  0009c	e2833014	 add         r3, r3, #0x14
  000a0	e5933000	 ldr         r3, [r3]
  000a4	e3530010	 cmp         r3, #0x10
  000a8	1a00000c	 bne         |$LN2@ResetBaseI|

; 309  :     {
; 310  :         m_IndexDelta = m_pMidiStream->GetDeltaFromFreq(m_Note);

  000ac	e59d3010	 ldr         r3, [sp, #0x10]
  000b0	e283300c	 add         r3, r3, #0xC
  000b4	e5931000	 ldr         r1, [r3]
  000b8	e59d3010	 ldr         r3, [sp, #0x10]
  000bc	e2833008	 add         r3, r3, #8
  000c0	e5930000	 ldr         r0, [r3]
  000c4	eb000000	 bl          |?GetDeltaFromFreq@CMidiStream@@QAAKK@Z|
  000c8	e58d0000	 str         r0, [sp]
  000cc	e59d3010	 ldr         r3, [sp, #0x10]
  000d0	e283201c	 add         r2, r3, #0x1C
  000d4	e59d3000	 ldr         r3, [sp]
  000d8	e5823000	 str         r3, [r2]

; 311  :     }
; 312  :     else

  000dc	ea00000b	 b           |$LN1@ResetBaseI|
  000e0		 |$LN2@ResetBaseI|

; 313  :     {
; 314  :         m_IndexDelta = m_pMidiStream->GetDeltaFromNote(m_Note);

  000e0	e59d3010	 ldr         r3, [sp, #0x10]
  000e4	e283300c	 add         r3, r3, #0xC
  000e8	e5931000	 ldr         r1, [r3]
  000ec	e59d3010	 ldr         r3, [sp, #0x10]
  000f0	e2833008	 add         r3, r3, #8
  000f4	e5930000	 ldr         r0, [r3]
  000f8	eb000000	 bl          |?GetDeltaFromNote@CMidiStream@@QAAKK@Z|
  000fc	e58d0004	 str         r0, [sp, #4]
  00100	e59d3010	 ldr         r3, [sp, #0x10]
  00104	e283201c	 add         r2, r3, #0x1C
  00108	e59d3004	 ldr         r3, [sp, #4]
  0010c	e5823000	 str         r3, [r2]
  00110		 |$LN1@ResetBaseI|

; 315  :     }
; 316  : 
; 317  :     return;
; 318  : }

  00110	e28dd008	 add         sp, sp, #8
  00114	e89d6000	 ldmia       sp, {sp, lr}
  00118	e12fff1e	 bx          lr
  0011c		 |$M35347|

			 ENDP  ; |?ResetBaseInfo@CMidiNote@@QAAXXZ|, CMidiNote::ResetBaseInfo

	EXPORT	|?SetVelocity@CMidiNote@@QAAXI@Z|	; CMidiNote::SetVelocity
	EXPORT	|?NoteOn@CMidiNote@@QAAJPAVCMidiStream@@III@Z| ; CMidiNote::NoteOn

  00010			 AREA	 |.pdata|, PDATA
|$T35355| DCD	|$LN5@NoteOn|
	DCD	0x40001f04
; Function compile flags: /Odtp

  0011c			 AREA	 |.text|, CODE, ARM

  0011c		 |?NoteOn@CMidiNote@@QAAJPAVCMidiStream@@III@Z| PROC ; CMidiNote::NoteOn

; 321  : {

  0011c		 |$LN5@NoteOn|
  0011c	e1a0c00d	 mov         r12, sp
  00120	e92d000f	 stmdb       sp!, {r0 - r3}
  00124	e92d5000	 stmdb       sp!, {r12, lr}
  00128	e24dd004	 sub         sp, sp, #4
  0012c		 |$M35352|

; 322  :     // Save params
; 323  :     m_pMidiStream = pMidiStream;

  0012c	e59d300c	 ldr         r3, [sp, #0xC]
  00130	e2832008	 add         r2, r3, #8
  00134	e59d3010	 ldr         r3, [sp, #0x10]
  00138	e5823000	 str         r3, [r2]

; 324  :     m_Note     = Note;

  0013c	e59d300c	 ldr         r3, [sp, #0xC]
  00140	e283200c	 add         r2, r3, #0xC
  00144	e59d3014	 ldr         r3, [sp, #0x14]
  00148	e5823000	 str         r3, [r2]

; 325  :     m_Channel  = Channel;

  0014c	e59d300c	 ldr         r3, [sp, #0xC]
  00150	e2832014	 add         r2, r3, #0x14
  00154	e59d301c	 ldr         r3, [sp, #0x1C]
  00158	e5823000	 str         r3, [r2]

; 326  : 
; 327  :     // Init pitch
; 328  :     m_Index = 0;

  0015c	e59d300c	 ldr         r3, [sp, #0xC]
  00160	e2832018	 add         r2, r3, #0x18
  00164	e3a03000	 mov         r3, #0
  00168	e5823000	 str         r3, [r2]

; 329  : 
; 330  :     // Set sample rate
; 331  :     ResetBaseInfo();

  0016c	e59d000c	 ldr         r0, [sp, #0xC]
  00170	eb000000	 bl          |?ResetBaseInfo@CMidiNote@@QAAXXZ|

; 332  : 
; 333  :     // Set volume (velocity)
; 334  :     SetVelocity(Velocity);

  00174	e59d1018	 ldr         r1, [sp, #0x18]
  00178	e59d000c	 ldr         r0, [sp, #0xC]
  0017c	eb000000	 bl          |?SetVelocity@CMidiNote@@QAAXI@Z|

; 335  : 
; 336  :     return S_OK;

  00180	e3a03000	 mov         r3, #0
  00184	e58d3000	 str         r3, [sp]

; 337  : }

  00188	e59d0000	 ldr         r0, [sp]
  0018c	e28dd004	 add         sp, sp, #4
  00190	e89d6000	 ldmia       sp, {sp, lr}
  00194	e12fff1e	 bx          lr
  00198		 |$M35353|

			 ENDP  ; |?NoteOn@CMidiNote@@QAAJPAVCMidiStream@@III@Z|, CMidiNote::NoteOn

	EXPORT	|??_C@_1JM@CHBKJEIO@?$AAC?$AAM?$AAi?$AAd?$AAi?$AAN?$AAo?$AAt?$AAe?$AA?3?$AA?3?$AAN?$AAo?$AAt?$AAe?$AAO?$AAf?$AAf?$AA?0?$AA?5?$AAm?$AA_?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx@| [ DATA ] ; `string'
	EXPORT	|?NoteOff@CMidiNote@@QAAJI@Z|		; CMidiNote::NoteOff
	IMPORT	|NKDbgPrintfW|
	IMPORT	|__rt_udiv|

  00018			 AREA	 |.pdata|, PDATA
|$T35364| DCD	|$LN9@NoteOff|
	DCD	0x40003704

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JM@CHBKJEIO@?$AAC?$AAM?$AAi?$AAd?$AAi?$AAN?$AAo?$AAt?$AAe?$AA?3?$AA?3?$AAN?$AAo?$AAt?$AAe?$AAO?$AAf?$AAf?$AA?0?$AA?5?$AAm?$AA_?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx@| DCB "C"
	DCB	0x0, "M", 0x0, "i", 0x0, "d", 0x0, "i", 0x0, "N", 0x0, "o"
	DCB	0x0, "t", 0x0, "e", 0x0, ":", 0x0, ":", 0x0, "N", 0x0, "o"
	DCB	0x0, "t", 0x0, "e", 0x0, "O", 0x0, "f", 0x0, "f", 0x0, ","
	DCB	0x0, " ", 0x0, "m", 0x0, "_", 0x0, "I", 0x0, "n", 0x0, "d"
	DCB	0x0, "e", 0x0, "x", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "m"
	DCB	0x0, "_", 0x0, "I", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "x"
	DCB	0x0, "D", 0x0, "e", 0x0, "l", 0x0, "t", 0x0, "a", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x"
	DCB	0x0, ",", 0x0, " ", 0x0, "m", 0x0, "_", 0x0, "d", 0x0, "w"
	DCB	0x0, "B", 0x0, "y", 0x0, "t", 0x0, "e", 0x0, "s", 0x0, "L"
	DCB	0x0, "e", 0x0, "f", 0x0, "t", 0x0, " ", 0x0, "=", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  00198			 AREA	 |.text|, CODE, ARM

  00198		 |?NoteOff@CMidiNote@@QAAJI@Z| PROC	; CMidiNote::NoteOff

; 340  : {

  00198		 |$LN9@NoteOff|
  00198	e1a0c00d	 mov         r12, sp
  0019c	e92d0003	 stmdb       sp!, {r0, r1}
  001a0	e92d5000	 stmdb       sp!, {r12, lr}
  001a4	e24dd00c	 sub         sp, sp, #0xC
  001a8		 |$M35361|

; 341  : 	UNREFERENCED_PARAMETER(Velocity);
; 342  : 
; 343  :     // Calculate the number of samples left before we cross a 0 boundary at the middle or end of the table
; 344  :     DWORD SamplesLeft;
; 345  :     if (m_IndexDelta)

  001a8	e59d3014	 ldr         r3, [sp, #0x14]
  001ac	e283301c	 add         r3, r3, #0x1C
  001b0	e5933000	 ldr         r3, [r3]
  001b4	e3530000	 cmp         r3, #0
  001b8	0a00000c	 beq         |$LN2@NoteOff|

; 346  :         {
; 347  :         SamplesLeft = ( ((0-m_Index)&0x7FFFFFFF) /m_IndexDelta) + 1;

  001bc	e59d3014	 ldr         r3, [sp, #0x14]
  001c0	e2833018	 add         r3, r3, #0x18
  001c4	e5933000	 ldr         r3, [r3]
  001c8	e2632000	 rsb         r2, r3, #0
  001cc	e3e03102	 mvn         r3, #2, 2
  001d0	e0021003	 and         r1, r2, r3
  001d4	e59d3014	 ldr         r3, [sp, #0x14]
  001d8	e283301c	 add         r3, r3, #0x1C
  001dc	e5930000	 ldr         r0, [r3]
  001e0	eb000000	 bl          __rt_udiv
  001e4	e2803001	 add         r3, r0, #1
  001e8	e58d3000	 str         r3, [sp]

; 348  :         }
; 349  :     else

  001ec	ea000001	 b           |$LN1@NoteOff|
  001f0		 |$LN2@NoteOff|

; 350  :         {
; 351  :         SamplesLeft=0;

  001f0	e3a03000	 mov         r3, #0
  001f4	e58d3000	 str         r3, [sp]
  001f8		 |$LN1@NoteOff|

; 352  :         }
; 353  : 
; 354  :     m_dwBytesLeft = SamplesLeft * sizeof(HWSAMPLE) * OUTCHANNELS;

  001f8	e59d2000	 ldr         r2, [sp]
  001fc	e3a03002	 mov         r3, #2
  00200	e0010392	 mul         r1, r2, r3
  00204	e3a03002	 mov         r3, #2
  00208	e0020391	 mul         r2, r1, r3
  0020c	e59d3014	 ldr         r3, [sp, #0x14]
  00210	e283302c	 add         r3, r3, #0x2C
  00214	e5832000	 str         r2, [r3]

; 355  :     DEBUGMSG(1, (TEXT("CMidiNote::NoteOff, m_Index = 0x%x, m_IndexDelta = 0x%x, m_dwBytesLeft = %d\r\n"),m_Index,m_IndexDelta,m_dwBytesLeft));

  00218	e59d3014	 ldr         r3, [sp, #0x14]
  0021c	e283302c	 add         r3, r3, #0x2C
  00220	e5933000	 ldr         r3, [r3]
  00224	e59d2014	 ldr         r2, [sp, #0x14]
  00228	e282201c	 add         r2, r2, #0x1C
  0022c	e5922000	 ldr         r2, [r2]
  00230	e59d1014	 ldr         r1, [sp, #0x14]
  00234	e2811018	 add         r1, r1, #0x18
  00238	e5911000	 ldr         r1, [r1]
  0023c	e59f002c	 ldr         r0, [pc, #0x2C]
  00240	eb000000	 bl          NKDbgPrintfW
  00244	e3a03001	 mov         r3, #1
  00248	e58d3008	 str         r3, [sp, #8]
  0024c	ea000001	 b           |$LN6@NoteOff|
  00250	e3a03000	 mov         r3, #0
  00254	e58d3008	 str         r3, [sp, #8]
  00258		 |$LN6@NoteOff|

; 356  :     // m_pMidiStream->NoteDone(this);
; 357  :     return S_OK;

  00258	e3a03000	 mov         r3, #0
  0025c	e58d3004	 str         r3, [sp, #4]

; 358  : }

  00260	e59d0004	 ldr         r0, [sp, #4]
  00264	e28dd00c	 add         sp, sp, #0xC
  00268	e89d6000	 ldmia       sp, {sp, lr}
  0026c	e12fff1e	 bx          lr
  00270		 |$LN10@NoteOff|
  00270		 |$LN11@NoteOff|
  00270	00000000	 DCD         |??_C@_1JM@CHBKJEIO@?$AAC?$AAM?$AAi?$AAd?$AAi?$AAN?$AAo?$AAt?$AAe?$AA?3?$AA?3?$AAN?$AAo?$AAt?$AAe?$AAO?$AAf?$AAf?$AA?0?$AA?5?$AAm?$AA_?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx@|
  00274		 |$M35362|

			 ENDP  ; |?NoteOff@CMidiNote@@QAAJI@Z|, CMidiNote::NoteOff

	EXPORT	|??_C@_1GO@GPNNNFCM@?$AAC?$AAM?$AAi?$AAd?$AAi?$AAN?$AAo?$AAt?$AAe?$AA?3?$AA?3?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AA?0?$AA?5?$AAL?$AAa?$AAs?$AAt?$AA?5?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AAa?$AAf@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HC@ICNNALDK@?$AAC?$AAM?$AAi?$AAd?$AAi?$AAN?$AAo?$AAt?$AAe?$AA?3?$AA?3?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AA?0?$AA?5?$AAN?$AAo?$AAt?$AAe?$AA?5?$AAi?$AAn?$AA?5?$AAr?$AAe?$AAl?$AAe?$AAa@| [ DATA ] ; `string'
	EXPORT	|?Render2@CMidiNote@@QAAPAEPAE00PAUTRANSFER_STATUS@@@Z| ; CMidiNote::Render2
	EXPORT	|?Render@CMidiNote@@QAAPAEPAE00PAUTRANSFER_STATUS@@@Z| ; CMidiNote::Render
	IMPORT	|?NoteDone@CMidiStream@@QAAXPAVCMidiNote@@@Z| ; CMidiStream::NoteDone

  00020			 AREA	 |.pdata|, PDATA
|$T35378| DCD	|$LN13@Render|
	DCD	0x40005904

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GO@GPNNNFCM@?$AAC?$AAM?$AAi?$AAd?$AAi?$AAN?$AAo?$AAt?$AAe?$AA?3?$AA?3?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AA?0?$AA?5?$AAL?$AAa?$AAs?$AAt?$AA?5?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AAa?$AAf@| DCB "C"
	DCB	0x0, "M", 0x0, "i", 0x0, "d", 0x0, "i", 0x0, "N", 0x0, "o"
	DCB	0x0, "t", 0x0, "e", 0x0, ":", 0x0, ":", 0x0, "R", 0x0, "e"
	DCB	0x0, "n", 0x0, "d", 0x0, "e", 0x0, "r", 0x0, ",", 0x0, " "
	DCB	0x0, "L", 0x0, "a", 0x0, "s", 0x0, "t", 0x0, " ", 0x0, "i"
	DCB	0x0, "n", 0x0, "d", 0x0, "e", 0x0, "x", 0x0, " ", 0x0, "a"
	DCB	0x0, "f", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, "n"
	DCB	0x0, "o", 0x0, "t", 0x0, "e", 0x0, " ", 0x0, "d", 0x0, "o"
	DCB	0x0, "n", 0x0, "e", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HC@ICNNALDK@?$AAC?$AAM?$AAi?$AAd?$AAi?$AAN?$AAo?$AAt?$AAe?$AA?3?$AA?3?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AA?0?$AA?5?$AAN?$AAo?$AAt?$AAe?$AA?5?$AAi?$AAn?$AA?5?$AAr?$AAe?$AAl?$AAe?$AAa@| DCB "C"
	DCB	0x0, "M", 0x0, "i", 0x0, "d", 0x0, "i", 0x0, "N", 0x0, "o"
	DCB	0x0, "t", 0x0, "e", 0x0, ":", 0x0, ":", 0x0, "R", 0x0, "e"
	DCB	0x0, "n", 0x0, "d", 0x0, "e", 0x0, "r", 0x0, ",", 0x0, " "
	DCB	0x0, "N", 0x0, "o", 0x0, "t", 0x0, "e", 0x0, " ", 0x0, "i"
	DCB	0x0, "n", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "l", 0x0, "e"
	DCB	0x0, "a", 0x0, "s", 0x0, "e", 0x0, ",", 0x0, " ", 0x0, "m"
	DCB	0x0, "_", 0x0, "d", 0x0, "w", 0x0, "B", 0x0, "y", 0x0, "t"
	DCB	0x0, "e", 0x0, "s", 0x0, "L", 0x0, "e", 0x0, "f", 0x0, "t"
	DCB	0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  00274			 AREA	 |.text|, CODE, ARM

  00274		 |?Render@CMidiNote@@QAAPAEPAE00PAUTRANSFER_STATUS@@@Z| PROC ; CMidiNote::Render

; 361  : {

  00274		 |$LN13@Render|
  00274	e1a0c00d	 mov         r12, sp
  00278	e92d000f	 stmdb       sp!, {r0 - r3}
  0027c	e92d5000	 stmdb       sp!, {r12, lr}
  00280	e24dd028	 sub         sp, sp, #0x28
  00284		 |$M35375|

; 362  :     DWORD BytesLeft = m_dwBytesLeft;

  00284	e59d3030	 ldr         r3, [sp, #0x30]
  00288	e283302c	 add         r3, r3, #0x2C
  0028c	e5933000	 ldr         r3, [r3]
  00290	e58d3008	 str         r3, [sp, #8]

; 363  : 
; 364  :     // Handle common case first
; 365  :     if (BytesLeft==(DWORD)-1)

  00294	e59d3008	 ldr         r3, [sp, #8]
  00298	e3730001	 cmn         r3, #1
  0029c	1a00000a	 bne         |$LN4@Render|

; 366  :     {
; 367  :         // Call real inner loop
; 368  :         return Render2(pBuffer,pBufferEnd,pBufferLast,pTransferStatus);

  002a0	e59d3040	 ldr         r3, [sp, #0x40]
  002a4	e58d3000	 str         r3, [sp]
  002a8	e59d303c	 ldr         r3, [sp, #0x3C]
  002ac	e59d2038	 ldr         r2, [sp, #0x38]
  002b0	e59d1034	 ldr         r1, [sp, #0x34]
  002b4	e59d0030	 ldr         r0, [sp, #0x30]
  002b8	eb000000	 bl          |?Render2@CMidiNote@@QAAPAEPAE00PAUTRANSFER_STATUS@@@Z|
  002bc	e58d0018	 str         r0, [sp, #0x18]
  002c0	e59d3018	 ldr         r3, [sp, #0x18]
  002c4	e58d3010	 str         r3, [sp, #0x10]
  002c8	ea00003c	 b           |$LN5@Render|
  002cc		 |$LN4@Render|

; 369  :     }
; 370  : 
; 371  :     DEBUGMSG(1, (TEXT("CMidiNote::Render, Note in release, m_dwBytesLeft = %d\r\n"),BytesLeft));

  002cc	e59d1008	 ldr         r1, [sp, #8]
  002d0	e59f00fc	 ldr         r0, [pc, #0xFC]
  002d4	eb000000	 bl          NKDbgPrintfW
  002d8	e3a03001	 mov         r3, #1
  002dc	e58d301c	 str         r3, [sp, #0x1C]
  002e0	ea000001	 b           |$LN8@Render|
  002e4	e3a03000	 mov         r3, #0
  002e8	e58d301c	 str         r3, [sp, #0x1C]
  002ec		 |$LN8@Render|

; 372  : 
; 373  :     DWORD BytesThisBuf = (pBufferEnd-pBuffer);

  002ec	e59d2038	 ldr         r2, [sp, #0x38]
  002f0	e59d3034	 ldr         r3, [sp, #0x34]
  002f4	e0423003	 sub         r3, r2, r3
  002f8	e58d3004	 str         r3, [sp, #4]

; 374  :     if (BytesLeft > BytesThisBuf)

  002fc	e59d2008	 ldr         r2, [sp, #8]
  00300	e59d3004	 ldr         r3, [sp, #4]
  00304	e1520003	 cmp         r2, r3
  00308	9a000004	 bls         |$LN3@Render|

; 375  :     {
; 376  :         // If we can't end during this buffer, just remember where we were
; 377  :         BytesLeft-=BytesThisBuf;

  0030c	e59d2008	 ldr         r2, [sp, #8]
  00310	e59d3004	 ldr         r3, [sp, #4]
  00314	e0423003	 sub         r3, r2, r3
  00318	e58d3008	 str         r3, [sp, #8]

; 378  :     }
; 379  :     else

  0031c	ea000005	 b           |$LN2@Render|
  00320		 |$LN3@Render|

; 380  :     {
; 381  :         // Ok, we end during this buffer. Update pBufferEnd to force the renderer to stop on a 0 crossing.
; 382  :         pBufferEnd = pBuffer + BytesLeft;

  00320	e59d2034	 ldr         r2, [sp, #0x34]
  00324	e59d3008	 ldr         r3, [sp, #8]
  00328	e0823003	 add         r3, r2, r3
  0032c	e58d3038	 str         r3, [sp, #0x38]

; 383  :         BytesLeft=0;

  00330	e3a03000	 mov         r3, #0
  00334	e58d3008	 str         r3, [sp, #8]
  00338		 |$LN2@Render|

; 384  :     }
; 385  : 
; 386  :     m_dwBytesLeft = BytesLeft;

  00338	e59d3030	 ldr         r3, [sp, #0x30]
  0033c	e283202c	 add         r2, r3, #0x2C
  00340	e59d3008	 ldr         r3, [sp, #8]
  00344	e5823000	 str         r3, [r2]

; 387  : 
; 388  :     // Call real inner loop
; 389  :     pBufferLast = Render2(pBuffer,pBufferEnd,pBufferLast,pTransferStatus);

  00348	e59d3040	 ldr         r3, [sp, #0x40]
  0034c	e58d3000	 str         r3, [sp]
  00350	e59d303c	 ldr         r3, [sp, #0x3C]
  00354	e59d2038	 ldr         r2, [sp, #0x38]
  00358	e59d1034	 ldr         r1, [sp, #0x34]
  0035c	e59d0030	 ldr         r0, [sp, #0x30]
  00360	eb000000	 bl          |?Render2@CMidiNote@@QAAPAEPAE00PAUTRANSFER_STATUS@@@Z|
  00364	e58d0020	 str         r0, [sp, #0x20]
  00368	e59d3020	 ldr         r3, [sp, #0x20]
  0036c	e58d303c	 str         r3, [sp, #0x3C]

; 390  : 
; 391  :     if (BytesLeft==0)

  00370	e59d3008	 ldr         r3, [sp, #8]
  00374	e3530000	 cmp         r3, #0
  00378	1a00000e	 bne         |$LN1@Render|

; 392  :     {
; 393  :         // Time to end the note.
; 394  :         DEBUGMSG(1, (TEXT("CMidiNote::Render, Last index after note done = 0x%x\r\n"),m_Index));

  0037c	e59d3030	 ldr         r3, [sp, #0x30]
  00380	e2833018	 add         r3, r3, #0x18
  00384	e5931000	 ldr         r1, [r3]
  00388	e59f0040	 ldr         r0, [pc, #0x40]
  0038c	eb000000	 bl          NKDbgPrintfW
  00390	e3a03001	 mov         r3, #1
  00394	e58d3024	 str         r3, [sp, #0x24]
  00398	ea000001	 b           |$LN10@Render|
  0039c	e3a03000	 mov         r3, #0
  003a0	e58d3024	 str         r3, [sp, #0x24]
  003a4		 |$LN10@Render|

; 395  :         m_pMidiStream->NoteDone(this);

  003a4	e59d1030	 ldr         r1, [sp, #0x30]
  003a8	e59d3030	 ldr         r3, [sp, #0x30]
  003ac	e2833008	 add         r3, r3, #8
  003b0	e5930000	 ldr         r0, [r3]
  003b4	eb000000	 bl          |?NoteDone@CMidiStream@@QAAXPAVCMidiNote@@@Z|
  003b8		 |$LN1@Render|

; 396  :     }
; 397  : 
; 398  :     return pBufferLast;

  003b8	e59d303c	 ldr         r3, [sp, #0x3C]
  003bc	e58d3010	 str         r3, [sp, #0x10]
  003c0		 |$LN5@Render|

; 399  : }

  003c0	e59d0010	 ldr         r0, [sp, #0x10]
  003c4	e28dd028	 add         sp, sp, #0x28
  003c8	e89d6000	 ldmia       sp, {sp, lr}
  003cc	e12fff1e	 bx          lr
  003d0		 |$LN14@Render|
  003d0		 |$LN15@Render|
  003d0	00000000	 DCD         |??_C@_1GO@GPNNNFCM@?$AAC?$AAM?$AAi?$AAd?$AAi?$AAN?$AAo?$AAt?$AAe?$AA?3?$AA?3?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AA?0?$AA?5?$AAL?$AAa?$AAs?$AAt?$AA?5?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AAa?$AAf@|
  003d4		 |$LN16@Render|
  003d4	00000000	 DCD         |??_C@_1HC@ICNNALDK@?$AAC?$AAM?$AAi?$AAd?$AAi?$AAN?$AAo?$AAt?$AAe?$AA?3?$AA?3?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AA?0?$AA?5?$AAN?$AAo?$AAt?$AAe?$AA?5?$AAi?$AAn?$AA?5?$AAr?$AAe?$AAl?$AAe?$AAa@|
  003d8		 |$M35376|

			 ENDP  ; |?Render@CMidiNote@@QAAPAEPAE00PAUTRANSFER_STATUS@@@Z|, CMidiNote::Render


  00028			 AREA	 |.pdata|, PDATA
|$T35387| DCD	|$LN16@Render2|
	DCD	0x40008504
; Function compile flags: /Odtp

  003d8			 AREA	 |.text|, CODE, ARM

  003d8		 |?Render2@CMidiNote@@QAAPAEPAE00PAUTRANSFER_STATUS@@@Z| PROC ; CMidiNote::Render2

; 403  : {

  003d8		 |$LN16@Render2|
  003d8	e1a0c00d	 mov         r12, sp
  003dc	e92d000f	 stmdb       sp!, {r0 - r3}
  003e0	e92d5000	 stmdb       sp!, {r12, lr}
  003e4	e24dd024	 sub         sp, sp, #0x24
  003e8		 |$M35384|

; 404  :     // Cache values so compiler won't worry about aliasing
; 405  :     UINT32 Index            = m_Index;

  003e8	e59d302c	 ldr         r3, [sp, #0x2C]
  003ec	e2833018	 add         r3, r3, #0x18
  003f0	e5933000	 ldr         r3, [r3]
  003f4	e58d3000	 str         r3, [sp]

; 406  :     UINT32 IndexDelta       = m_IndexDelta;

  003f8	e59d302c	 ldr         r3, [sp, #0x2C]
  003fc	e283301c	 add         r3, r3, #0x1C
  00400	e5933000	 ldr         r3, [r3]
  00404	e58d3008	 str         r3, [sp, #8]

; 407  :     const INT16 * pSineTable = SineTable;

  00408	e59f31d8	 ldr         r3, [pc, #0x1D8]
  0040c	e58d3004	 str         r3, [sp, #4]

; 408  :     LONG fxpGain[2];
; 409  : 
; 410  :     if (pTransferStatus->Mute)

  00410	e59d303c	 ldr         r3, [sp, #0x3C]
  00414	e2833004	 add         r3, r3, #4
  00418	e5933000	 ldr         r3, [r3]
  0041c	e3530000	 cmp         r3, #0
  00420	0a000004	 beq         |$LN11@Render2|

; 411  :     {
; 412  :         fxpGain[0] = 0;

  00424	e3a03000	 mov         r3, #0
  00428	e58d300c	 str         r3, [sp, #0xC]

; 413  :         fxpGain[1] = 0;

  0042c	e3a03000	 mov         r3, #0
  00430	e58d3010	 str         r3, [sp, #0x10]

; 414  :     }
; 415  :     else

  00434	ea000007	 b           |$LN10@Render2|
  00438		 |$LN11@Render2|

; 416  :     {
; 417  :         fxpGain[0] = m_fxpGain[0];

  00438	e59d302c	 ldr         r3, [sp, #0x2C]
  0043c	e2833024	 add         r3, r3, #0x24
  00440	e5933000	 ldr         r3, [r3]
  00444	e58d300c	 str         r3, [sp, #0xC]

; 418  :         fxpGain[1] = m_fxpGain[1];

  00448	e59d302c	 ldr         r3, [sp, #0x2C]
  0044c	e2833028	 add         r3, r3, #0x28
  00450	e5933000	 ldr         r3, [r3]
  00454	e58d3010	 str         r3, [sp, #0x10]
  00458		 |$LN10@Render2|
  00458		 |$LN9@Render2|

; 419  :     }
; 420  : 
; 421  :     while (pBuffer < pBufferEnd)

  00458	e59d2030	 ldr         r2, [sp, #0x30]
  0045c	e59d3034	 ldr         r3, [sp, #0x34]
  00460	e1520003	 cmp         r2, r3
  00464	2a000055	 bcs         |$LN8@Render2|

; 422  :     {
; 423  :         // Index is in 8.24 format, where the top 8 bits index into the sine table and
; 424  :         // the lower 24 bits represent the fraction of where we sit between two adjacent
; 425  :         // samples, which we can use if we're doing linear interpolation
; 426  :         // I chose 8.24 format so that wrap around at the top of the table happens
; 427  :         // automatically without the need to do any ANDing.
; 428  : 
; 429  :         // Get an index into the sine table and look up the sample.
; 430  :         UINT32 TableIndex = Index>>24;

  00468	e59d3000	 ldr         r3, [sp]
  0046c	e1a03c23	 mov         r3, r3, lsr #24
  00470	e58d301c	 str         r3, [sp, #0x1C]

; 431  :         INT32 OutSamp0 = pSineTable[TableIndex];

  00474	e59d101c	 ldr         r1, [sp, #0x1C]
  00478	e3a03002	 mov         r3, #2
  0047c	e0020391	 mul         r2, r1, r3
  00480	e59d3004	 ldr         r3, [sp, #4]
  00484	e0833002	 add         r3, r3, r2
  00488	e1d330f0	 ldrsh       r3, [r3]
  0048c	e58d3014	 str         r3, [sp, #0x14]

; 432  : 
; 433  : #if MIDI_OPTIMIZE_LINEAR_INTERPOLATE
; 434  :         // If we're doing linear interpolation, get the next sample also. Note that I don't
; 435  :         // need to worry about wrap around at the top of the table because the sine table has
; 436  :         // an extra value tacked onto the end to handle this special case.
; 437  :         INT32 NextSamp = pSineTable[TableIndex+1];
; 438  : 
; 439  :         // Now do the interpolation, adjusting the index to be in 24.8 format and throwing away
; 440  :         // the integer part (e.g. interpolate 256 points between samples).
; 441  :         OutSamp0 += ( (NextSamp - OutSamp0) * ((Index>>16)&0x00FF) ) >> 8;
; 442  : #endif
; 443  : 
; 444  :         // Increment the index to move to the next sample
; 445  :         // and keep within the valid range
; 446  :         Index += IndexDelta;

  00490	e59d2000	 ldr         r2, [sp]
  00494	e59d3008	 ldr         r3, [sp, #8]
  00498	e0823003	 add         r3, r2, r3
  0049c	e58d3000	 str         r3, [sp]

; 447  : 
; 448  : #if (OUTCHANNELS==2)
; 449  :         INT32 OutSamp1;
; 450  :         OutSamp1=OutSamp0;

  004a0	e59d3014	 ldr         r3, [sp, #0x14]
  004a4	e58d3018	 str         r3, [sp, #0x18]

; 451  : 
; 452  :         // Volume!
; 453  :         OutSamp0 = (OutSamp0 * fxpGain[0]) >> VOLSHIFT;

  004a8	e59d2014	 ldr         r2, [sp, #0x14]
  004ac	e59d300c	 ldr         r3, [sp, #0xC]
  004b0	e0030392	 mul         r3, r2, r3
  004b4	e1a03843	 mov         r3, r3, asr #16
  004b8	e58d3014	 str         r3, [sp, #0x14]

; 454  :         OutSamp1 = (OutSamp1 * fxpGain[1]) >> VOLSHIFT;

  004bc	e59d2018	 ldr         r2, [sp, #0x18]
  004c0	e59d3010	 ldr         r3, [sp, #0x10]
  004c4	e0030392	 mul         r3, r2, r3
  004c8	e1a03843	 mov         r3, r3, asr #16
  004cc	e58d3018	 str         r3, [sp, #0x18]

; 455  : 
; 456  :         if (pBuffer < pBufferLast)

  004d0	e59d2030	 ldr         r2, [sp, #0x30]
  004d4	e59d3038	 ldr         r3, [sp, #0x38]
  004d8	e1520003	 cmp         r2, r3
  004dc	2a000028	 bcs         |$LN7@Render2|

; 457  :         {
; 458  :             OutSamp0 += ((HWSAMPLE *)pBuffer)[0];

  004e0	e59d3030	 ldr         r3, [sp, #0x30]
  004e4	e1d320f0	 ldrsh       r2, [r3]
  004e8	e59d3014	 ldr         r3, [sp, #0x14]
  004ec	e0833002	 add         r3, r3, r2
  004f0	e58d3014	 str         r3, [sp, #0x14]

; 459  :             OutSamp1 += ((HWSAMPLE *)pBuffer)[1];

  004f4	e59d3030	 ldr         r3, [sp, #0x30]
  004f8	e2833002	 add         r3, r3, #2
  004fc	e1d320f0	 ldrsh       r2, [r3]
  00500	e59d3018	 ldr         r3, [sp, #0x18]
  00504	e0833002	 add         r3, r3, r2
  00508	e58d3018	 str         r3, [sp, #0x18]

; 460  : 
; 461  : #if USE_MIX_SATURATE
; 462  :             // Handle saturation
; 463  :             if (OutSamp0>AUDIO_SAMPLE_MAX)

  0050c	e59d2014	 ldr         r2, [sp, #0x14]
  00510	e3a03c7f	 mov         r3, #0x7F, 24
  00514	e38330ff	 orr         r3, r3, #0xFF
  00518	e1520003	 cmp         r2, r3
  0051c	da000003	 ble         |$LN6@Render2|

; 464  :             {
; 465  :                 OutSamp0=AUDIO_SAMPLE_MAX;

  00520	e3a03c7f	 mov         r3, #0x7F, 24
  00524	e38330ff	 orr         r3, r3, #0xFF
  00528	e58d3014	 str         r3, [sp, #0x14]
  0052c	ea000005	 b           |$LN5@Render2|
  00530		 |$LN6@Render2|

; 466  :             }
; 467  :             else if (OutSamp0<AUDIO_SAMPLE_MIN)

  00530	e59d3014	 ldr         r3, [sp, #0x14]
  00534	e3730902	 cmn         r3, #2, 18
  00538	aa000002	 bge         |$LN4@Render2|

; 468  :             {
; 469  :                 OutSamp0=AUDIO_SAMPLE_MIN;

  0053c	e3e030ff	 mvn         r3, #0xFF
  00540	e1a03383	 mov         r3, r3, lsl #7
  00544	e58d3014	 str         r3, [sp, #0x14]
  00548		 |$LN4@Render2|
  00548		 |$LN5@Render2|

; 470  :             }
; 471  :             if (OutSamp1>AUDIO_SAMPLE_MAX)

  00548	e59d2018	 ldr         r2, [sp, #0x18]
  0054c	e3a03c7f	 mov         r3, #0x7F, 24
  00550	e38330ff	 orr         r3, r3, #0xFF
  00554	e1520003	 cmp         r2, r3
  00558	da000003	 ble         |$LN3@Render2|

; 472  :             {
; 473  :                 OutSamp1=AUDIO_SAMPLE_MAX;

  0055c	e3a03c7f	 mov         r3, #0x7F, 24
  00560	e38330ff	 orr         r3, r3, #0xFF
  00564	e58d3018	 str         r3, [sp, #0x18]
  00568	ea000005	 b           |$LN2@Render2|
  0056c		 |$LN3@Render2|

; 474  :             }
; 475  :             else if (OutSamp1<AUDIO_SAMPLE_MIN)

  0056c	e59d3018	 ldr         r3, [sp, #0x18]
  00570	e3730902	 cmn         r3, #2, 18
  00574	aa000002	 bge         |$LN1@Render2|

; 476  :             {
; 477  :                 OutSamp1=AUDIO_SAMPLE_MIN;

  00578	e3e030ff	 mvn         r3, #0xFF
  0057c	e1a03383	 mov         r3, r3, lsl #7
  00580	e58d3018	 str         r3, [sp, #0x18]
  00584		 |$LN1@Render2|
  00584		 |$LN2@Render2|
  00584		 |$LN7@Render2|

; 478  :             }
; 479  : #endif
; 480  :         }
; 481  :         ((HWSAMPLE *)pBuffer)[0] = (HWSAMPLE)OutSamp0;

  00584	e59d3014	 ldr         r3, [sp, #0x14]
  00588	e1a02803	 mov         r2, r3, lsl #16
  0058c	e1a02842	 mov         r2, r2, asr #16
  00590	e59d3030	 ldr         r3, [sp, #0x30]
  00594	e1c320b0	 strh        r2, [r3]

; 482  :         ((HWSAMPLE *)pBuffer)[1] = (HWSAMPLE)OutSamp1;

  00598	e59d3018	 ldr         r3, [sp, #0x18]
  0059c	e1a02803	 mov         r2, r3, lsl #16
  005a0	e1a02842	 mov         r2, r2, asr #16
  005a4	e59d3030	 ldr         r3, [sp, #0x30]
  005a8	e2833002	 add         r3, r3, #2
  005ac	e1c320b0	 strh        r2, [r3]

; 483  :         pBuffer += 2*sizeof(HWSAMPLE);

  005b0	e59d3030	 ldr         r3, [sp, #0x30]
  005b4	e2833004	 add         r3, r3, #4
  005b8	e58d3030	 str         r3, [sp, #0x30]

; 484  : #else
; 485  :         // Volume!
; 486  :         OutSamp0 = (OutSamp0 * fxpGain[0]) >> VOLSHIFT;
; 487  : 
; 488  :         if (pBuffer<pBufferLast)
; 489  :         {
; 490  :             // Store/sum to the output buffer
; 491  :             OutSamp0 += *(HWSAMPLE *)pBuffer;
; 492  : 
; 493  : #if USE_MIX_SATURATE
; 494  :             // Handle saturation
; 495  :             if (OutSamp0>AUDIO_SAMPLE_MAX)
; 496  :             {
; 497  :                 OutSamp0=AUDIO_SAMPLE_MAX;
; 498  :             }
; 499  :             else if (OutSamp0<AUDIO_SAMPLE_MIN)
; 500  :             {
; 501  :                 OutSamp0=AUDIO_SAMPLE_MIN;
; 502  :             }
; 503  : #endif
; 504  :         }
; 505  :         ((HWSAMPLE *)pBuffer)[0] = (HWSAMPLE)OutSamp0;
; 506  :         pBuffer+=sizeof(HWSAMPLE);
; 507  : #endif
; 508  :     }

  005bc	eaffffa5	 b           |$LN9@Render2|
  005c0		 |$LN8@Render2|

; 509  : 
; 510  :     // Save cached settings that might have changed in the inner loop
; 511  :     m_Index = Index;

  005c0	e59d302c	 ldr         r3, [sp, #0x2C]
  005c4	e2832018	 add         r2, r3, #0x18
  005c8	e59d3000	 ldr         r3, [sp]
  005cc	e5823000	 str         r3, [r2]

; 512  : 
; 513  :     return pBuffer;

  005d0	e59d3030	 ldr         r3, [sp, #0x30]
  005d4	e58d3020	 str         r3, [sp, #0x20]

; 514  : }

  005d8	e59d0020	 ldr         r0, [sp, #0x20]
  005dc	e28dd024	 add         sp, sp, #0x24
  005e0	e89d6000	 ldmia       sp, {sp, lr}
  005e4	e12fff1e	 bx          lr
  005e8		 |$LN17@Render2|
  005e8		 |$LN18@Render2|
  005e8	00000000	 DCD         |?SineTable@CMidiNote@@0QBFB|
  005ec		 |$M35385|

			 ENDP  ; |?Render2@CMidiNote@@QAAPAEPAE00PAUTRANSFER_STATUS@@@Z|, CMidiNote::Render2

	EXPORT	|?NoteVal@CMidiNote@@QAAIXZ|		; CMidiNote::NoteVal

  00030			 AREA	 |.pdata|, PDATA
|$T35395| DCD	|$LN5@NoteVal|
	DCD	0x40000c04
; Function compile flags: /Odtp

  005ec			 AREA	 |.text|, CODE, ARM

  005ec		 |?NoteVal@CMidiNote@@QAAIXZ| PROC	; CMidiNote::NoteVal

; 517  : {

  005ec		 |$LN5@NoteVal|
  005ec	e1a0c00d	 mov         r12, sp
  005f0	e92d0001	 stmdb       sp!, {r0}
  005f4	e92d5000	 stmdb       sp!, {r12, lr}
  005f8	e24dd004	 sub         sp, sp, #4
  005fc		 |$M35392|

; 518  :     return m_Note;

  005fc	e59d300c	 ldr         r3, [sp, #0xC]
  00600	e283300c	 add         r3, r3, #0xC
  00604	e5933000	 ldr         r3, [r3]
  00608	e58d3000	 str         r3, [sp]

; 519  : }

  0060c	e59d0000	 ldr         r0, [sp]
  00610	e28dd004	 add         sp, sp, #4
  00614	e89d6000	 ldmia       sp, {sp, lr}
  00618	e12fff1e	 bx          lr
  0061c		 |$M35393|

			 ENDP  ; |?NoteVal@CMidiNote@@QAAIXZ|, CMidiNote::NoteVal

	EXPORT	|?NoteChannel@CMidiNote@@QAAIXZ|	; CMidiNote::NoteChannel

  00038			 AREA	 |.pdata|, PDATA
|$T35401| DCD	|$LN5@NoteChanne|
	DCD	0x40000c04
; Function compile flags: /Odtp

  0061c			 AREA	 |.text|, CODE, ARM

  0061c		 |?NoteChannel@CMidiNote@@QAAIXZ| PROC	; CMidiNote::NoteChannel

; 522  : {

  0061c		 |$LN5@NoteChanne|
  0061c	e1a0c00d	 mov         r12, sp
  00620	e92d0001	 stmdb       sp!, {r0}
  00624	e92d5000	 stmdb       sp!, {r12, lr}
  00628	e24dd004	 sub         sp, sp, #4
  0062c		 |$M35398|

; 523  :     return m_Channel;

  0062c	e59d300c	 ldr         r3, [sp, #0xC]
  00630	e2833014	 add         r3, r3, #0x14
  00634	e5933000	 ldr         r3, [r3]
  00638	e58d3000	 str         r3, [sp]

; 524  : }

  0063c	e59d0000	 ldr         r0, [sp]
  00640	e28dd004	 add         sp, sp, #4
  00644	e89d6000	 ldmia       sp, {sp, lr}
  00648	e12fff1e	 bx          lr
  0064c		 |$M35399|

			 ENDP  ; |?NoteChannel@CMidiNote@@QAAIXZ|, CMidiNote::NoteChannel


  00040			 AREA	 |.pdata|, PDATA
|$T35406| DCD	|$LN5@SetVelocit|
	DCD	0x40001403
; Function compile flags: /Odtp

  0064c			 AREA	 |.text|, CODE, ARM

  0064c		 |?SetVelocity@CMidiNote@@QAAXI@Z| PROC	; CMidiNote::SetVelocity

; 527  : {

  0064c		 |$LN5@SetVelocit|
  0064c	e1a0c00d	 mov         r12, sp
  00650	e92d0003	 stmdb       sp!, {r0, r1}
  00654	e92d5000	 stmdb       sp!, {r12, lr}
  00658		 |$M35403|

; 528  :     // Reset the bytes left value here. This ensures that if a note is going away we bring it back.
; 529  :     m_dwBytesLeft = (DWORD)-1;

  00658	e59d3008	 ldr         r3, [sp, #8]
  0065c	e283202c	 add         r2, r3, #0x2C
  00660	e3e03000	 mvn         r3, #0
  00664	e5823000	 str         r3, [r2]

; 530  : 
; 531  :     // Velocity is a 7-bit value in MIDI
; 532  :     m_Velocity = Velocity;

  00668	e59d3008	 ldr         r3, [sp, #8]
  0066c	e2832010	 add         r2, r3, #0x10
  00670	e59d300c	 ldr         r3, [sp, #0xC]
  00674	e5823000	 str         r3, [r2]

; 533  : 
; 534  :     // Convert to a 16-bit value
; 535  :     m_dwGain   = (Velocity<<9);

  00678	e59d300c	 ldr         r3, [sp, #0xC]
  0067c	e1a02483	 mov         r2, r3, lsl #9
  00680	e59d3008	 ldr         r3, [sp, #8]
  00684	e2833020	 add         r3, r3, #0x20
  00688	e5832000	 str         r2, [r3]

; 536  :     GainChange();

  0068c	e59d0008	 ldr         r0, [sp, #8]
  00690	eb000000	 bl          |?GainChange@CMidiNote@@QAAXXZ|

; 537  : }

  00694	e89d6000	 ldmia       sp, {sp, lr}
  00698	e12fff1e	 bx          lr
  0069c		 |$M35404|

			 ENDP  ; |?SetVelocity@CMidiNote@@QAAXI@Z|, CMidiNote::SetVelocity

	END
