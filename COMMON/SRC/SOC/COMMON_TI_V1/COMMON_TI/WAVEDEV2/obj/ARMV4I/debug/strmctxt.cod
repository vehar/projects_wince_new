; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\WAVEDEV2\strmctxt.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.rdata|, DATA, READONLY
|GainMap| DCW	0xf1ad
	DCW	0xe429
	DCW	0xd765
	DCW	0xcb59
	DCW	0xbff9
	DCW	0xb53b
	DCW	0xab18
	DCW	0xa186
	DCW	0x987d
	DCW	0x8ff5
	DCW	0x87e8
	DCW	0x804d
	DCW	0x7920
	DCW	0x7259
	DCW	0x6bf4
	DCW	0x65ea
	DCW	0x6036
	DCW	0x5ad5
	DCW	0x55c0
	DCW	0x50f4
	DCW	0x4c6d
	DCW	0x4826
	DCW	0x441d
	DCW	0x404d
	DCW	0x3cb5
	DCW	0x394f
	DCW	0x361a
	DCW	0x3314
	DCW	0x3038
	DCW	0x2d86
	DCW	0x2afa
	DCW	0x2892
	DCW	0x264d
	DCW	0x2429
	DCW	0x2223
	DCW	0x203a
	DCW	0x1e6c
	DCW	0x1cb9
	DCW	0x1b1d
	DCW	0x1999
	DCW	0x182a
	DCW	0x16d0
	DCW	0x158a
	DCW	0x1455
	DCW	0x1332
	DCW	0x121f
	DCW	0x111c
	DCW	0x1027
	DCW	0xf3f
	DCW	0xe65
	DCW	0xd97
	DCW	0xcd4
	DCW	0xc1c
	DCW	0xb6f
	DCW	0xacb
	DCW	0xa31
	DCW	0x99f
	DCW	0x915
	DCW	0x893
	DCW	0x818
	DCW	0x7a4
	DCW	0x737
	DCW	0x6cf
	DCW	0x66e
	DCW	0x612
	DCW	0x5bb
	DCW	0x569
	DCW	0x51b
	DCW	0x4d2
	DCW	0x48d
	DCW	0x44c
	DCW	0x40e
	DCW	0x3d4
	DCW	0x39d
	DCW	0x369
	DCW	0x339
	DCW	0x30a
	DCW	0x2df
	DCW	0x2b6
	DCW	0x28f
	DCW	0x26a
	DCW	0x248
	DCW	0x227
	DCW	0x208
	DCW	0x1eb
	DCW	0x1cf
	DCW	0x1b6
	DCW	0x19d
	DCW	0x186
	DCW	0x170
	DCW	0x15b
	DCW	0x148
	DCW	0x136
	DCW	0x124
	DCW	0x114
	DCW	0x104
	DCW	0xf6
	DCW	0xe8
	DCW	0xdb
	DCW	0xcf
	DCW	0xc3
	DCW	0xb8
	DCW	0xae
	DCW	0xa4
	DCW	0x9b
	DCW	0x92
	DCW	0x8a
	DCW	0x82
	DCW	0x7b
	DCW	0x74
	DCW	0x6e
	DCW	0x67
	DCW	0x62
	DCW	0x5c
	DCW	0x57
	DCW	0x52
	DCW	0x4d
	DCW	0x49
	DCW	0x45
	DCW	0x41
	DCW	0x3d
	DCW	0x3a
	DCW	0x37
	DCW	0x34
	DCW	0x31
	DCW	0x2e
	DCW	0x2b
	DCW	0x29
	DCW	0x27
	DCW	0x24
	DCW	0x22
	DCW	0x20
	DCW	0x1f
	DCW	0x1d
	DCW	0x1b
	DCW	0x1a
	DCW	0x18
	DCW	0x17
	DCW	0x15
	DCW	0x14
	DCW	0x13
	DCW	0x12
	DCW	0x11
	DCW	0x10
	DCW	0xf
	DCW	0xe
	DCW	0xd
	DCW	0xd
	DCW	0xc
	DCW	0xb
	DCW	0xb
	DCW	0xa
	DCW	0x9
	DCW	0x9
	DCW	0x8
	DCW	0x8
	DCW	0x7
	DCW	0x7
	DCW	0x6
	DCW	0x6
	DCW	0x6
	DCW	0x5
	DCW	0x5
	DCW	0x5
	DCW	0x4
	DCW	0x4
	DCW	0x4
	DCW	0x4
	DCW	0x3
	DCW	0x3
	DCW	0x3
	DCW	0x3
	DCW	0x3
	DCW	0x2
	DCW	0x2
	DCW	0x2
	DCW	0x2
	DCW	0x2
	DCW	0x2
	DCW	0x2
	DCW	0x1
	DCW	0x1
	DCW	0x1
	DCW	0x1
	DCW	0x1
	DCW	0x1
	DCW	0x1
	DCW	0x1
	DCW	0x1
	DCW	0x1
	DCW	0x1
	DCW	0x1
	DCW	0x0
	DCW	0x0
	DCW	0x0
	DCW	0x0
	DCW	0x0
	DCW	0x0
	DCW	0x0
	DCW	0x0
	EXPORT	|??_7StreamContext@@6B@| [ DATA ]	; StreamContext::`vftable'
	EXPORT	|??0StreamContext@@QAA@XZ|		; StreamContext::StreamContext
	EXPORT	|?Open@StreamContext@@UAAKPAVDeviceContext@@PAUwaveopendesc_tag@@K@Z| ; StreamContext::Open
	EXPORT	|?Close@StreamContext@@UAAKXZ|		; StreamContext::Close
	EXPORT	|?GetPos@StreamContext@@UAAKPAUmmtime_tag@@@Z| ; StreamContext::GetPos
	EXPORT	|?Run@StreamContext@@UAAKXZ|		; StreamContext::Run
	EXPORT	|?Stop@StreamContext@@UAAKXZ|		; StreamContext::Stop
	EXPORT	|?Reset@StreamContext@@UAAKXZ|		; StreamContext::Reset
	EXPORT	|?DoCallbackReturnBuffer@StreamContext@@UAAXPAUwavehdr_tag@@@Z| ; StreamContext::DoCallbackReturnBuffer
	EXPORT	|?DoCallbackStreamOpened@StreamContext@@UAAXXZ| ; StreamContext::DoCallbackStreamOpened
	EXPORT	|?DoCallbackStreamClosed@StreamContext@@UAAXXZ| ; StreamContext::DoCallbackStreamClosed
	EXPORT	|?QueueBuffer@StreamContext@@UAAKPAUwavehdr_tag@@@Z| ; StreamContext::QueueBuffer
	EXPORT	|?GainChange@StreamContext@@UAAXXZ|	; StreamContext::GainChange
	EXPORT	|?IsExclusive@StreamContext@@UAAHXZ|	; StreamContext::IsExclusive
	IMPORT	|??_EStreamContext@@UAAPAXI@Z|, WEAK |??_GStreamContext@@UAAPAXI@Z| ; StreamContext::`vector deleting destructor', StreamContext::`scalar deleting destructor'
	IMPORT	|_purecall|

  00000			 AREA	 |.pdata|, PDATA
|$T35510| DCD	|$LN5@StreamCont|
	DCD	0x40000e04
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\wavedev2\strmctxt.cpp

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_7StreamContext@@6B@| DCD |??_EStreamContext@@UAAPAXI@Z| ; StreamContext::`vftable'
	DCD	|?Open@StreamContext@@UAAKPAVDeviceContext@@PAUwaveopendesc_tag@@K@Z|
	DCD	|?Close@StreamContext@@UAAKXZ|
	DCD	|?GetPos@StreamContext@@UAAKPAUmmtime_tag@@@Z|
	DCD	|?Run@StreamContext@@UAAKXZ|
	DCD	|?Stop@StreamContext@@UAAKXZ|
	DCD	|?Reset@StreamContext@@UAAKXZ|
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|?DoCallbackReturnBuffer@StreamContext@@UAAXPAUwavehdr_tag@@@Z|
	DCD	|?DoCallbackStreamOpened@StreamContext@@UAAXXZ|
	DCD	|?DoCallbackStreamClosed@StreamContext@@UAAXXZ|
	DCD	|?QueueBuffer@StreamContext@@UAAKPAUwavehdr_tag@@@Z|
	DCD	|?GainChange@StreamContext@@UAAXXZ|
	DCD	|?IsExclusive@StreamContext@@UAAHXZ|
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0StreamContext@@QAA@XZ| PROC	; StreamContext::StreamContext

; 39   : {

  00000		 |$LN5@StreamCont|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M35507|
  00010	e59f201c	 ldr         r2, [pc, #0x1C]
  00014	e59d300c	 ldr         r3, [sp, #0xC]
  00018	e5832000	 str         r2, [r3]

; 40   : };

  0001c	e59d300c	 ldr         r3, [sp, #0xC]
  00020	e58d3000	 str         r3, [sp]
  00024	e59d0000	 ldr         r0, [sp]
  00028	e28dd004	 add         sp, sp, #4
  0002c	e89d6000	 ldmia       sp, {sp, lr}
  00030	e12fff1e	 bx          lr
  00034		 |$LN6@StreamCont|
  00034		 |$LN7@StreamCont|
  00034	00000000	 DCD         |??_7StreamContext@@6B@|
  00038		 |$M35508|

			 ENDP  ; |??0StreamContext@@QAA@XZ|, StreamContext::StreamContext

	EXPORT	|??1StreamContext@@UAA@XZ|		; StreamContext::~StreamContext
	IMPORT	|??3@YAXPAX@Z|				; operator delete

  00000			 AREA	 |.pdata|, PDATA
|$T35518| DCD	|$LN6@scalar|
	DCD	0x40001104
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??_GStreamContext@@UAAPAXI@Z| PROC	; StreamContext::`scalar deleting destructor'
  00000		 |$LN6@scalar|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M35515|
  00010	e59d000c	 ldr         r0, [sp, #0xC]
  00014	eb000000	 bl          |??1StreamContext@@UAA@XZ|
  00018	e59d3010	 ldr         r3, [sp, #0x10]
  0001c	e3130001	 tst         r3, #1
  00020	0a000001	 beq         |$LN1@scalar|
  00024	e59d000c	 ldr         r0, [sp, #0xC]
  00028	eb000000	 bl          |??3@YAXPAX@Z|
  0002c		 |$LN1@scalar|
  0002c	e59d300c	 ldr         r3, [sp, #0xC]
  00030	e58d3000	 str         r3, [sp]
  00034	e59d0000	 ldr         r0, [sp]
  00038	e28dd004	 add         sp, sp, #4
  0003c	e89d6000	 ldmia       sp, {sp, lr}
  00040	e12fff1e	 bx          lr
  00044		 |$M35516|

			 ENDP  ; |??_GStreamContext@@UAAPAXI@Z|, StreamContext::`scalar deleting destructor'


  00008			 AREA	 |.pdata|, PDATA
|$T35525| DCD	|$LN5@StreamCont@2|
	DCD	0x40000903
; Function compile flags: /Odtp

  00038			 AREA	 |.text|, CODE, ARM

  00038		 |??1StreamContext@@UAA@XZ| PROC	; StreamContext::~StreamContext

; 43   : {

  00038		 |$LN5@StreamCont@2|
  00038	e1a0c00d	 mov         r12, sp
  0003c	e92d0001	 stmdb       sp!, {r0}
  00040	e92d5000	 stmdb       sp!, {r12, lr}
  00044		 |$M35522|
  00044	e59f200c	 ldr         r2, [pc, #0xC]
  00048	e59d3008	 ldr         r3, [sp, #8]
  0004c	e5832000	 str         r2, [r3]

; 44   : };

  00050	e89d6000	 ldmia       sp, {sp, lr}
  00054	e12fff1e	 bx          lr
  00058		 |$LN6@StreamCont@2|
  00058		 |$LN7@StreamCont@2|
  00058	00000000	 DCD         |??_7StreamContext@@6B@|
  0005c		 |$M35523|

			 ENDP  ; |??1StreamContext@@UAA@XZ|, StreamContext::~StreamContext

	EXPORT	|?StillPlaying@StreamContext@@QAAHXZ|	; StreamContext::StillPlaying

  00010			 AREA	 |.pdata|, PDATA
|$T35535| DCD	|$LN7@StillPlayi|
	DCD	0x40001404
; Function compile flags: /Odtp

  0005c			 AREA	 |.text|, CODE, ARM

  0005c		 |?StillPlaying@StreamContext@@QAAHXZ| PROC ; StreamContext::StillPlaying

; 47   : {

  0005c		 |$LN7@StillPlayi|
  0005c	e1a0c00d	 mov         r12, sp
  00060	e92d0001	 stmdb       sp!, {r0}
  00064	e92d5000	 stmdb       sp!, {r12, lr}
  00068	e24dd008	 sub         sp, sp, #8
  0006c		 |$M35532|

; 48   :     return (m_lpWaveHdrHead!=NULL);

  0006c	e59d3010	 ldr         r3, [sp, #0x10]
  00070	e2833038	 add         r3, r3, #0x38
  00074	e5933000	 ldr         r3, [r3]
  00078	e3530000	 cmp         r3, #0
  0007c	0a000002	 beq         |$LN3@StillPlayi|
  00080	e3a03001	 mov         r3, #1
  00084	e58d3004	 str         r3, [sp, #4]
  00088	ea000001	 b           |$LN4@StillPlayi|
  0008c		 |$LN3@StillPlayi|
  0008c	e3a03000	 mov         r3, #0
  00090	e58d3004	 str         r3, [sp, #4]
  00094		 |$LN4@StillPlayi|
  00094	e59d3004	 ldr         r3, [sp, #4]
  00098	e58d3000	 str         r3, [sp]

; 49   : }

  0009c	e59d0000	 ldr         r0, [sp]
  000a0	e28dd008	 add         sp, sp, #8
  000a4	e89d6000	 ldmia       sp, {sp, lr}
  000a8	e12fff1e	 bx          lr
  000ac		 |$M35533|

			 ENDP  ; |?StillPlaying@StreamContext@@QAAHXZ|, StreamContext::StillPlaying

	EXPORT	|?GetByteCount@StreamContext@@QAAKXZ|	; StreamContext::GetByteCount

  00018			 AREA	 |.pdata|, PDATA
|$T35541| DCD	|$LN5@GetByteCou|
	DCD	0x40000c04
; Function compile flags: /Odtp

  000ac			 AREA	 |.text|, CODE, ARM

  000ac		 |?GetByteCount@StreamContext@@QAAKXZ| PROC ; StreamContext::GetByteCount

; 52   : {

  000ac		 |$LN5@GetByteCou|
  000ac	e1a0c00d	 mov         r12, sp
  000b0	e92d0001	 stmdb       sp!, {r0}
  000b4	e92d5000	 stmdb       sp!, {r12, lr}
  000b8	e24dd004	 sub         sp, sp, #4
  000bc		 |$M35538|

; 53   :     return m_dwByteCount;

  000bc	e59d300c	 ldr         r3, [sp, #0xC]
  000c0	e283304c	 add         r3, r3, #0x4C
  000c4	e5933000	 ldr         r3, [r3]
  000c8	e58d3000	 str         r3, [sp]

; 54   : }

  000cc	e59d0000	 ldr         r0, [sp]
  000d0	e28dd004	 add         sp, sp, #4
  000d4	e89d6000	 ldmia       sp, {sp, lr}
  000d8	e12fff1e	 bx          lr
  000dc		 |$M35539|

			 ENDP  ; |?GetByteCount@StreamContext@@QAAKXZ|, StreamContext::GetByteCount

	EXPORT	|?GetWaveFormat@StreamContext@@QAAPAUtWAVEFORMATEX@@XZ| ; StreamContext::GetWaveFormat

  00020			 AREA	 |.pdata|, PDATA
|$T35547| DCD	|$LN5@GetWaveFor|
	DCD	0x40000b04
; Function compile flags: /Odtp

  000dc			 AREA	 |.text|, CODE, ARM

  000dc		 |?GetWaveFormat@StreamContext@@QAAPAUtWAVEFORMATEX@@XZ| PROC ; StreamContext::GetWaveFormat

; 57   : {

  000dc		 |$LN5@GetWaveFor|
  000dc	e1a0c00d	 mov         r12, sp
  000e0	e92d0001	 stmdb       sp!, {r0}
  000e4	e92d5000	 stmdb       sp!, {r12, lr}
  000e8	e24dd004	 sub         sp, sp, #4
  000ec		 |$M35544|

; 58   :     return &m_WaveFormat;

  000ec	e59d300c	 ldr         r3, [sp, #0xC]
  000f0	e2833024	 add         r3, r3, #0x24
  000f4	e58d3000	 str         r3, [sp]

; 59   : }

  000f8	e59d0000	 ldr         r0, [sp]
  000fc	e28dd004	 add         sp, sp, #4
  00100	e89d6000	 ldmia       sp, {sp, lr}
  00104	e12fff1e	 bx          lr
  00108		 |$M35545|

			 ENDP  ; |?GetWaveFormat@StreamContext@@QAAPAUtWAVEFORMATEX@@XZ|, StreamContext::GetWaveFormat

	EXPORT	|?GetDeviceContext@StreamContext@@QAAPAVDeviceContext@@XZ| ; StreamContext::GetDeviceContext

  00028			 AREA	 |.pdata|, PDATA
|$T35553| DCD	|$LN5@GetDeviceC|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00108			 AREA	 |.text|, CODE, ARM

  00108		 |?GetDeviceContext@StreamContext@@QAAPAVDeviceContext@@XZ| PROC ; StreamContext::GetDeviceContext

; 62   : {

  00108		 |$LN5@GetDeviceC|
  00108	e1a0c00d	 mov         r12, sp
  0010c	e92d0001	 stmdb       sp!, {r0}
  00110	e92d5000	 stmdb       sp!, {r12, lr}
  00114	e24dd004	 sub         sp, sp, #4
  00118		 |$M35550|

; 63   :     return m_pDeviceContext;

  00118	e59d300c	 ldr         r3, [sp, #0xC]
  0011c	e2833050	 add         r3, r3, #0x50
  00120	e5933000	 ldr         r3, [r3]
  00124	e58d3000	 str         r3, [sp]

; 64   : }

  00128	e59d0000	 ldr         r0, [sp]
  0012c	e28dd004	 add         sp, sp, #4
  00130	e89d6000	 ldmia       sp, {sp, lr}
  00134	e12fff1e	 bx          lr
  00138		 |$M35551|

			 ENDP  ; |?GetDeviceContext@StreamContext@@QAAPAVDeviceContext@@XZ|, StreamContext::GetDeviceContext

	EXPORT	|?DoDriverCallback@StreamContext@@QAAXIKK@Z| ; StreamContext::DoDriverCallback

  00030			 AREA	 |.pdata|, PDATA
|$T35559| DCD	|$LN5@DoDriverCa|
	DCD	0x40001604
; Function compile flags: /Odtp

  00138			 AREA	 |.text|, CODE, ARM

  00138		 |?DoDriverCallback@StreamContext@@QAAXIKK@Z| PROC ; StreamContext::DoDriverCallback

; 67   : {

  00138		 |$LN5@DoDriverCa|
  00138	e1a0c00d	 mov         r12, sp
  0013c	e92d000f	 stmdb       sp!, {r0 - r3}
  00140	e92d5010	 stmdb       sp!, {r4, r12, lr}
  00144	e24dd008	 sub         sp, sp, #8
  00148		 |$M35556|

; 68   :     m_pfnCallback(m_hWave,msg,m_dwInstance,dwParam1,dwParam2);

  00148	e59d3020	 ldr         r3, [sp, #0x20]
  0014c	e58d3000	 str         r3, [sp]
  00150	e59d301c	 ldr         r3, [sp, #0x1C]
  00154	e59d2014	 ldr         r2, [sp, #0x14]
  00158	e2822020	 add         r2, r2, #0x20
  0015c	e5922000	 ldr         r2, [r2]
  00160	e59d1018	 ldr         r1, [sp, #0x18]
  00164	e59d0014	 ldr         r0, [sp, #0x14]
  00168	e2800018	 add         r0, r0, #0x18
  0016c	e5900000	 ldr         r0, [r0]
  00170	e59de014	 ldr         lr, [sp, #0x14]
  00174	e28ee01c	 add         lr, lr, #0x1C
  00178	e59e4000	 ldr         r4, [lr]
  0017c	e1a0e00f	 mov         lr, pc
  00180	e12fff14	 bx          r4

; 69   : }

  00184	e28dd008	 add         sp, sp, #8
  00188	e89d6010	 ldmia       sp, {r4, sp, lr}
  0018c	e12fff1e	 bx          lr
  00190		 |$M35557|

			 ENDP  ; |?DoDriverCallback@StreamContext@@QAAXIKK@Z|, StreamContext::DoDriverCallback


  00038			 AREA	 |.pdata|, PDATA
|$T35564| DCD	|$LN5@DoCallback|
	DCD	0x40000b03
; Function compile flags: /Odtp

  00190			 AREA	 |.text|, CODE, ARM

  00190		 |?DoCallbackReturnBuffer@StreamContext@@UAAXPAUwavehdr_tag@@@Z| PROC ; StreamContext::DoCallbackReturnBuffer

; 72   : {

  00190		 |$LN5@DoCallback|
  00190	e1a0c00d	 mov         r12, sp
  00194	e92d0003	 stmdb       sp!, {r0, r1}
  00198	e92d5000	 stmdb       sp!, {r12, lr}
  0019c		 |$M35561|

; 73   :     DoDriverCallback(WOM_DONE,(DWORD)lpHdr,0);

  0019c	e3a03000	 mov         r3, #0
  001a0	e59d200c	 ldr         r2, [sp, #0xC]
  001a4	e3a01c03	 mov         r1, #3, 24
  001a8	e38110bd	 orr         r1, r1, #0xBD
  001ac	e59d0008	 ldr         r0, [sp, #8]
  001b0	eb000000	 bl          |?DoDriverCallback@StreamContext@@QAAXIKK@Z|

; 74   : }

  001b4	e89d6000	 ldmia       sp, {sp, lr}
  001b8	e12fff1e	 bx          lr
  001bc		 |$M35562|

			 ENDP  ; |?DoCallbackReturnBuffer@StreamContext@@UAAXPAUwavehdr_tag@@@Z|, StreamContext::DoCallbackReturnBuffer


  00040			 AREA	 |.pdata|, PDATA
|$T35569| DCD	|$LN5@DoCallback@2|
	DCD	0x40000b03
; Function compile flags: /Odtp

  001bc			 AREA	 |.text|, CODE, ARM

  001bc		 |?DoCallbackStreamOpened@StreamContext@@UAAXXZ| PROC ; StreamContext::DoCallbackStreamOpened

; 77   : {

  001bc		 |$LN5@DoCallback@2|
  001bc	e1a0c00d	 mov         r12, sp
  001c0	e92d0001	 stmdb       sp!, {r0}
  001c4	e92d5000	 stmdb       sp!, {r12, lr}
  001c8		 |$M35566|

; 78   :     DoDriverCallback(WOM_OPEN,0,0);

  001c8	e3a03000	 mov         r3, #0
  001cc	e3a02000	 mov         r2, #0
  001d0	e3a01c03	 mov         r1, #3, 24
  001d4	e38110bb	 orr         r1, r1, #0xBB
  001d8	e59d0008	 ldr         r0, [sp, #8]
  001dc	eb000000	 bl          |?DoDriverCallback@StreamContext@@QAAXIKK@Z|

; 79   : }

  001e0	e89d6000	 ldmia       sp, {sp, lr}
  001e4	e12fff1e	 bx          lr
  001e8		 |$M35567|

			 ENDP  ; |?DoCallbackStreamOpened@StreamContext@@UAAXXZ|, StreamContext::DoCallbackStreamOpened


  00048			 AREA	 |.pdata|, PDATA
|$T35574| DCD	|$LN5@DoCallback@3|
	DCD	0x40000a03
; Function compile flags: /Odtp

  001e8			 AREA	 |.text|, CODE, ARM

  001e8		 |?DoCallbackStreamClosed@StreamContext@@UAAXXZ| PROC ; StreamContext::DoCallbackStreamClosed

; 82   : {

  001e8		 |$LN5@DoCallback@3|
  001e8	e1a0c00d	 mov         r12, sp
  001ec	e92d0001	 stmdb       sp!, {r0}
  001f0	e92d5000	 stmdb       sp!, {r12, lr}
  001f4		 |$M35571|

; 83   :     DoDriverCallback(WOM_CLOSE,0,0);

  001f4	e3a03000	 mov         r3, #0
  001f8	e3a02000	 mov         r2, #0
  001fc	e3a01fef	 mov         r1, #0xEF, 30
  00200	e59d0008	 ldr         r0, [sp, #8]
  00204	eb000000	 bl          |?DoDriverCallback@StreamContext@@QAAXIKK@Z|

; 84   : }

  00208	e89d6000	 ldmia       sp, {sp, lr}
  0020c	e12fff1e	 bx          lr
  00210		 |$M35572|

			 ENDP  ; |?DoCallbackStreamClosed@StreamContext@@UAAXXZ|, StreamContext::DoCallbackStreamClosed

	EXPORT	|?ReturnBuffer@StreamContext@@QAAXPAUwavehdr_tag@@@Z| ; StreamContext::ReturnBuffer

  00050			 AREA	 |.pdata|, PDATA
|$T35579| DCD	|$LN5@ReturnBuff|
	DCD	0x40001c03
; Function compile flags: /Odtp

  00210			 AREA	 |.text|, CODE, ARM

  00210		 |?ReturnBuffer@StreamContext@@QAAXPAUwavehdr_tag@@@Z| PROC ; StreamContext::ReturnBuffer

; 88   : {

  00210		 |$LN5@ReturnBuff|
  00210	e1a0c00d	 mov         r12, sp
  00214	e92d0003	 stmdb       sp!, {r0, r1}
  00218	e92d5000	 stmdb       sp!, {r12, lr}
  0021c		 |$M35576|

; 89   :     lpHdr->dwFlags &= ~WHDR_INQUEUE;

  0021c	e59d300c	 ldr         r3, [sp, #0xC]
  00220	e2833010	 add         r3, r3, #0x10
  00224	e5932000	 ldr         r2, [r3]
  00228	e3e03010	 mvn         r3, #0x10
  0022c	e0022003	 and         r2, r2, r3
  00230	e59d300c	 ldr         r3, [sp, #0xC]
  00234	e2833010	 add         r3, r3, #0x10
  00238	e5832000	 str         r2, [r3]

; 90   :     lpHdr->dwFlags |= WHDR_DONE;

  0023c	e59d300c	 ldr         r3, [sp, #0xC]
  00240	e2833010	 add         r3, r3, #0x10
  00244	e5933000	 ldr         r3, [r3]
  00248	e3832001	 orr         r2, r3, #1
  0024c	e59d300c	 ldr         r3, [sp, #0xC]
  00250	e2833010	 add         r3, r3, #0x10
  00254	e5832000	 str         r2, [r3]

; 91   :     DoCallbackReturnBuffer(lpHdr);

  00258	e59d100c	 ldr         r1, [sp, #0xC]
  0025c	e59d3008	 ldr         r3, [sp, #8]
  00260	e5933000	 ldr         r3, [r3]
  00264	e2833024	 add         r3, r3, #0x24
  00268	e59d0008	 ldr         r0, [sp, #8]
  0026c	e5933000	 ldr         r3, [r3]
  00270	e1a0e00f	 mov         lr, pc
  00274	e12fff13	 bx          r3

; 92   : }

  00278	e89d6000	 ldmia       sp, {sp, lr}
  0027c	e12fff1e	 bx          lr
  00280		 |$M35577|

			 ENDP  ; |?ReturnBuffer@StreamContext@@QAAXPAUwavehdr_tag@@@Z|, StreamContext::ReturnBuffer

	EXPORT	|?GetGain@StreamContext@@QAAKXZ|	; StreamContext::GetGain

  00058			 AREA	 |.pdata|, PDATA
|$T35585| DCD	|$LN5@GetGain|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00280			 AREA	 |.text|, CODE, ARM

  00280		 |?GetGain@StreamContext@@QAAKXZ| PROC	; StreamContext::GetGain

; 95   : {

  00280		 |$LN5@GetGain|
  00280	e1a0c00d	 mov         r12, sp
  00284	e92d0001	 stmdb       sp!, {r0}
  00288	e92d5000	 stmdb       sp!, {r12, lr}
  0028c	e24dd004	 sub         sp, sp, #4
  00290		 |$M35582|

; 96   :     return m_dwGain;

  00290	e59d300c	 ldr         r3, [sp, #0xC]
  00294	e2833058	 add         r3, r3, #0x58
  00298	e5933000	 ldr         r3, [r3]
  0029c	e58d3000	 str         r3, [sp]

; 97   : }

  002a0	e59d0000	 ldr         r0, [sp]
  002a4	e28dd004	 add         sp, sp, #4
  002a8	e89d6000	 ldmia       sp, {sp, lr}
  002ac	e12fff1e	 bx          lr
  002b0		 |$M35583|

			 ENDP  ; |?GetGain@StreamContext@@QAAKXZ|, StreamContext::GetGain

	EXPORT	|?SetGain@StreamContext@@QAAKK@Z|	; StreamContext::SetGain

  00060			 AREA	 |.pdata|, PDATA
|$T35591| DCD	|$LN5@SetGain|
	DCD	0x40001504
; Function compile flags: /Odtp

  002b0			 AREA	 |.text|, CODE, ARM

  002b0		 |?SetGain@StreamContext@@QAAKK@Z| PROC	; StreamContext::SetGain

; 100  : {

  002b0		 |$LN5@SetGain|
  002b0	e1a0c00d	 mov         r12, sp
  002b4	e92d0003	 stmdb       sp!, {r0, r1}
  002b8	e92d5000	 stmdb       sp!, {r12, lr}
  002bc	e24dd004	 sub         sp, sp, #4
  002c0		 |$M35588|

; 101  :     m_dwGain = dwGain;

  002c0	e59d300c	 ldr         r3, [sp, #0xC]
  002c4	e2832058	 add         r2, r3, #0x58
  002c8	e59d3010	 ldr         r3, [sp, #0x10]
  002cc	e5823000	 str         r3, [r2]

; 102  :     GainChange();

  002d0	e59d300c	 ldr         r3, [sp, #0xC]
  002d4	e5933000	 ldr         r3, [r3]
  002d8	e2833034	 add         r3, r3, #0x34
  002dc	e59d000c	 ldr         r0, [sp, #0xC]
  002e0	e5933000	 ldr         r3, [r3]
  002e4	e1a0e00f	 mov         lr, pc
  002e8	e12fff13	 bx          r3

; 103  :     return MMSYSERR_NOERROR;

  002ec	e3a03000	 mov         r3, #0
  002f0	e58d3000	 str         r3, [sp]

; 104  : }

  002f4	e59d0000	 ldr         r0, [sp]
  002f8	e28dd004	 add         sp, sp, #4
  002fc	e89d6000	 ldmia       sp, {sp, lr}
  00300	e12fff1e	 bx          lr
  00304		 |$M35589|

			 ENDP  ; |?SetGain@StreamContext@@QAAKK@Z|, StreamContext::SetGain

	EXPORT	|?SetSecondaryGainClass@StreamContext@@QAAKK@Z| ; StreamContext::SetSecondaryGainClass

  00068			 AREA	 |.pdata|, PDATA
|$T35597| DCD	|$LN6@SetSeconda|
	DCD	0x40001b04
; Function compile flags: /Odtp

  00304			 AREA	 |.text|, CODE, ARM

  00304		 |?SetSecondaryGainClass@StreamContext@@QAAKK@Z| PROC ; StreamContext::SetSecondaryGainClass

; 107  : {

  00304		 |$LN6@SetSeconda|
  00304	e1a0c00d	 mov         r12, sp
  00308	e92d0003	 stmdb       sp!, {r0, r1}
  0030c	e92d5000	 stmdb       sp!, {r12, lr}
  00310	e24dd004	 sub         sp, sp, #4
  00314		 |$M35594|

; 108  :     if (GainClass>=SECONDARYGAINCLASSMAX)

  00314	e59d3010	 ldr         r3, [sp, #0x10]
  00318	e3530004	 cmp         r3, #4
  0031c	3a000002	 bcc         |$LN1@SetSeconda|

; 109  :     {
; 110  :         return MMSYSERR_ERROR;

  00320	e3a03001	 mov         r3, #1
  00324	e58d3000	 str         r3, [sp]
  00328	ea00000c	 b           |$LN2@SetSeconda|
  0032c		 |$LN1@SetSeconda|

; 111  :     }
; 112  :     m_SecondaryGainClass=GainClass;

  0032c	e59d300c	 ldr         r3, [sp, #0xC]
  00330	e283205c	 add         r2, r3, #0x5C
  00334	e59d3010	 ldr         r3, [sp, #0x10]
  00338	e5823000	 str         r3, [r2]

; 113  :     GainChange();

  0033c	e59d300c	 ldr         r3, [sp, #0xC]
  00340	e5933000	 ldr         r3, [r3]
  00344	e2833034	 add         r3, r3, #0x34
  00348	e59d000c	 ldr         r0, [sp, #0xC]
  0034c	e5933000	 ldr         r3, [r3]
  00350	e1a0e00f	 mov         lr, pc
  00354	e12fff13	 bx          r3

; 114  :     return MMSYSERR_NOERROR;

  00358	e3a03000	 mov         r3, #0
  0035c	e58d3000	 str         r3, [sp]
  00360		 |$LN2@SetSeconda|

; 115  : }

  00360	e59d0000	 ldr         r0, [sp]
  00364	e28dd004	 add         sp, sp, #4
  00368	e89d6000	 ldmia       sp, {sp, lr}
  0036c	e12fff1e	 bx          lr
  00370		 |$M35595|

			 ENDP  ; |?SetSecondaryGainClass@StreamContext@@QAAKK@Z|, StreamContext::SetSecondaryGainClass

	EXPORT	|?MapGain@StreamContext@@QAAKKK@Z|	; StreamContext::MapGain

  00070			 AREA	 |.pdata|, PDATA
|$T35602| DCD	|$LN8@GainChange|
	DCD	0x40002004
; Function compile flags: /Odtp

  00370			 AREA	 |.text|, CODE, ARM

  00370		 |?GainChange@StreamContext@@UAAXXZ| PROC ; StreamContext::GainChange

; 118  : {

  00370		 |$LN8@GainChange|
  00370	e1a0c00d	 mov         r12, sp
  00374	e92d0001	 stmdb       sp!, {r0}
  00378	e92d5000	 stmdb       sp!, {r12, lr}
  0037c	e24dd008	 sub         sp, sp, #8
  00380		 |$M35599|

; 119  :     for (int i=0; i<2; i++)

  00380	e3a03000	 mov         r3, #0
  00384	e58d3000	 str         r3, [sp]
  00388	ea000002	 b           |$LN3@GainChange|
  0038c		 |$LN2@GainChange|
  0038c	e59d3000	 ldr         r3, [sp]
  00390	e2833001	 add         r3, r3, #1
  00394	e58d3000	 str         r3, [sp]
  00398		 |$LN3@GainChange|
  00398	e59d3000	 ldr         r3, [sp]
  0039c	e3530002	 cmp         r3, #2
  003a0	aa00000f	 bge         |$LN1@GainChange|

; 120  :     {
; 121  : #if (MONO_GAIN)
; 122  :         m_fxpGain[i] = MapGain(m_dwGain,0);
; 123  : #else
; 124  :         m_fxpGain[i] = MapGain(m_dwGain,i);

  003a4	e59d2000	 ldr         r2, [sp]
  003a8	e59d3010	 ldr         r3, [sp, #0x10]
  003ac	e2833058	 add         r3, r3, #0x58
  003b0	e5931000	 ldr         r1, [r3]
  003b4	e59d0010	 ldr         r0, [sp, #0x10]
  003b8	eb000000	 bl          |?MapGain@StreamContext@@QAAKKK@Z|
  003bc	e58d0004	 str         r0, [sp, #4]
  003c0	e59d3010	 ldr         r3, [sp, #0x10]
  003c4	e2831060	 add         r1, r3, #0x60
  003c8	e59d2000	 ldr         r2, [sp]
  003cc	e3a03004	 mov         r3, #4
  003d0	e0030392	 mul         r3, r2, r3
  003d4	e0812003	 add         r2, r1, r3
  003d8	e59d3004	 ldr         r3, [sp, #4]
  003dc	e5823000	 str         r3, [r2]
  003e0	eaffffe9	 b           |$LN2@GainChange|
  003e4		 |$LN1@GainChange|

; 125  : #endif
; 126  :     }
; 127  : }

  003e4	e28dd008	 add         sp, sp, #8
  003e8	e89d6000	 ldmia       sp, {sp, lr}
  003ec	e12fff1e	 bx          lr
  003f0		 |$M35600|

			 ENDP  ; |?GainChange@StreamContext@@UAAXXZ|, StreamContext::GainChange


  00078			 AREA	 |.pdata|, PDATA
|$T35608| DCD	|$LN5@IsExclusiv|
	DCD	0x40000a04
; Function compile flags: /Odtp

  003f0			 AREA	 |.text|, CODE, ARM

  003f0		 |?IsExclusive@StreamContext@@UAAHXZ| PROC ; StreamContext::IsExclusive

; 130  : {

  003f0		 |$LN5@IsExclusiv|
  003f0	e1a0c00d	 mov         r12, sp
  003f4	e92d0001	 stmdb       sp!, {r0}
  003f8	e92d5000	 stmdb       sp!, {r12, lr}
  003fc	e24dd004	 sub         sp, sp, #4
  00400		 |$M35605|

; 131  :     return FALSE;

  00400	e3a03000	 mov         r3, #0
  00404	e58d3000	 str         r3, [sp]

; 132  : }

  00408	e59d0000	 ldr         r0, [sp]
  0040c	e28dd004	 add         sp, sp, #4
  00410	e89d6000	 ldmia       sp, {sp, lr}
  00414	e12fff1e	 bx          lr
  00418		 |$M35606|

			 ENDP  ; |?IsExclusive@StreamContext@@UAAHXZ|, StreamContext::IsExclusive

	IMPORT	|?GetDefaultStreamGain@DeviceContext@@QAAKXZ| ; DeviceContext::GetDefaultStreamGain
	IMPORT	|memcpy|

  00080			 AREA	 |.pdata|, PDATA
|$T35614| DCD	|$LN9@Open|
	DCD	0x4000b604
; Function compile flags: /Odtp

  00418			 AREA	 |.text|, CODE, ARM

  00418		 |?Open@StreamContext@@UAAKPAVDeviceContext@@PAUwaveopendesc_tag@@K@Z| PROC ; StreamContext::Open

; 135  : {

  00418		 |$LN9@Open|
  00418	e1a0c00d	 mov         r12, sp
  0041c	e92d000f	 stmdb       sp!, {r0 - r3}
  00420	e92d5000	 stmdb       sp!, {r12, lr}
  00424	e24dd018	 sub         sp, sp, #0x18
  00428		 |$M35611|

; 136  :     DWORD mmRet = MMSYSERR_NOERROR;

  00428	e3a03000	 mov         r3, #0
  0042c	e58d3004	 str         r3, [sp, #4]

; 137  : 
; 138  :     m_RefCount = 1;

  00430	e59d3020	 ldr         r3, [sp, #0x20]
  00434	e283200c	 add         r2, r3, #0xC
  00438	e3a03001	 mov         r3, #1
  0043c	e5823000	 str         r3, [r2]

; 139  :     m_pDeviceContext = pDeviceContext;

  00440	e59d3020	 ldr         r3, [sp, #0x20]
  00444	e2832050	 add         r2, r3, #0x50
  00448	e59d3024	 ldr         r3, [sp, #0x24]
  0044c	e5823000	 str         r3, [r2]

; 140  :     m_pfnCallback = (DRVCALLBACK *)lpWOD->dwCallback;

  00450	e59d3028	 ldr         r3, [sp, #0x28]
  00454	e2830008	 add         r0, r3, #8
  00458	e59d3020	 ldr         r3, [sp, #0x20]
  0045c	e283101c	 add         r1, r3, #0x1C
  00460	e1d030d3	 ldrsb       r3, [r0, #3]
  00464	e1a02403	 mov         r2, r3, lsl #8
  00468	e5d03002	 ldrb        r3, [r0, #2]
  0046c	e1833002	 orr         r3, r3, r2
  00470	e1a02403	 mov         r2, r3, lsl #8
  00474	e5d03001	 ldrb        r3, [r0, #1]
  00478	e1833002	 orr         r3, r3, r2
  0047c	e1a02403	 mov         r2, r3, lsl #8
  00480	e5d03000	 ldrb        r3, [r0]
  00484	e1833002	 orr         r3, r3, r2
  00488	e5813000	 str         r3, [r1]

; 141  :     m_dwInstance  = lpWOD->dwInstance;

  0048c	e59d3028	 ldr         r3, [sp, #0x28]
  00490	e283000c	 add         r0, r3, #0xC
  00494	e59d3020	 ldr         r3, [sp, #0x20]
  00498	e2831020	 add         r1, r3, #0x20
  0049c	e5d03003	 ldrb        r3, [r0, #3]
  004a0	e1a02403	 mov         r2, r3, lsl #8
  004a4	e5d03002	 ldrb        r3, [r0, #2]
  004a8	e1833002	 orr         r3, r3, r2
  004ac	e1a02403	 mov         r2, r3, lsl #8
  004b0	e5d03001	 ldrb        r3, [r0, #1]
  004b4	e1833002	 orr         r3, r3, r2
  004b8	e1a02403	 mov         r2, r3, lsl #8
  004bc	e5d03000	 ldrb        r3, [r0]
  004c0	e1833002	 orr         r3, r3, r2
  004c4	e5813000	 str         r3, [r1]

; 142  :     m_hWave       = lpWOD->hWave;

  004c8	e59d3020	 ldr         r3, [sp, #0x20]
  004cc	e2830018	 add         r0, r3, #0x18
  004d0	e59d1028	 ldr         r1, [sp, #0x28]
  004d4	e1d130d3	 ldrsb       r3, [r1, #3]
  004d8	e1a02403	 mov         r2, r3, lsl #8
  004dc	e5d13002	 ldrb        r3, [r1, #2]
  004e0	e1833002	 orr         r3, r3, r2
  004e4	e1a02403	 mov         r2, r3, lsl #8
  004e8	e5d13001	 ldrb        r3, [r1, #1]
  004ec	e1833002	 orr         r3, r3, r2
  004f0	e1a02403	 mov         r2, r3, lsl #8
  004f4	e5d13000	 ldrb        r3, [r1]
  004f8	e1833002	 orr         r3, r3, r2
  004fc	e5803000	 str         r3, [r0]

; 143  :     m_dwFlags     = dwFlags;

  00500	e59d3020	 ldr         r3, [sp, #0x20]
  00504	e2832014	 add         r2, r3, #0x14
  00508	e59d302c	 ldr         r3, [sp, #0x2C]
  0050c	e5823000	 str         r3, [r2]

; 144  :     m_bRunning    = FALSE;

  00510	e59d3020	 ldr         r3, [sp, #0x20]
  00514	e2832010	 add         r2, r3, #0x10
  00518	e3a03000	 mov         r3, #0
  0051c	e5823000	 str         r3, [r2]

; 145  :     m_bForceSpeaker = FALSE;

  00520	e59d3020	 ldr         r3, [sp, #0x20]
  00524	e2832068	 add         r2, r3, #0x68
  00528	e3a03000	 mov         r3, #0
  0052c	e5823000	 str         r3, [r2]

; 146  : 
; 147  :     // If it's a PCMWAVEFORMAT struct, it's smaller than a WAVEFORMATEX struct (it doesn't have the cbSize field),
; 148  :     // so don't copy too much or we risk a fault if the structure is located on the end of a page.
; 149  :     // All other non-PCM wave formats share the WAVEFORMATEX base structure
; 150  :     // Note: I don't keep around anything after the cbSize of the WAVEFORMATEX struct so that I don't need to
; 151  :     // worry about allocating additional space. If we need to keep this info around in the future, we can either
; 152  :     // allocate it dynamically here, or keep the information in any derived format-specific classes.
; 153  :     DWORD dwSize;
; 154  :     WAVEFORMATEX *pwfx = lpWOD->lpFormat;

  00530	e59d3028	 ldr         r3, [sp, #0x28]
  00534	e2831004	 add         r1, r3, #4
  00538	e1d130d3	 ldrsb       r3, [r1, #3]
  0053c	e1a02403	 mov         r2, r3, lsl #8
  00540	e5d13002	 ldrb        r3, [r1, #2]
  00544	e1833002	 orr         r3, r3, r2
  00548	e1a02403	 mov         r2, r3, lsl #8
  0054c	e5d13001	 ldrb        r3, [r1, #1]
  00550	e1833002	 orr         r3, r3, r2
  00554	e1a02403	 mov         r2, r3, lsl #8
  00558	e5d13000	 ldrb        r3, [r1]
  0055c	e1833002	 orr         r3, r3, r2
  00560	e58d3008	 str         r3, [sp, #8]

; 155  :     if (pwfx->wFormatTag == WAVE_FORMAT_PCM)

  00564	e59d1008	 ldr         r1, [sp, #8]
  00568	e5d13001	 ldrb        r3, [r1, #1]
  0056c	e1a03403	 mov         r3, r3, lsl #8
  00570	e1a02803	 mov         r2, r3, lsl #16
  00574	e1a02822	 mov         r2, r2, lsr #16
  00578	e5d13000	 ldrb        r3, [r1]
  0057c	e1833002	 orr         r3, r3, r2
  00580	e3530001	 cmp         r3, #1
  00584	1a000008	 bne         |$LN4@Open|

; 156  :     {
; 157  :         dwSize = sizeof(PCMWAVEFORMAT);

  00588	e3a03010	 mov         r3, #0x10
  0058c	e58d3000	 str         r3, [sp]

; 158  :         m_WaveFormat.cbSize = 0;

  00590	e59d3020	 ldr         r3, [sp, #0x20]
  00594	e2832034	 add         r2, r3, #0x34
  00598	e3a03000	 mov         r3, #0
  0059c	e5c23000	 strb        r3, [r2]
  005a0	e1a03423	 mov         r3, r3, lsr #8
  005a4	e5c23001	 strb        r3, [r2, #1]

; 159  :     }
; 160  :     else

  005a8	ea000001	 b           |$LN3@Open|
  005ac		 |$LN4@Open|

; 161  :     {
; 162  :         dwSize = sizeof(WAVEFORMATEX);

  005ac	e3a03012	 mov         r3, #0x12
  005b0	e58d3000	 str         r3, [sp]
  005b4		 |$LN3@Open|

; 163  :     }
; 164  : 
; 165  :     memcpy(&m_WaveFormat,pwfx,dwSize);

  005b4	e59d2000	 ldr         r2, [sp]
  005b8	e59d1008	 ldr         r1, [sp, #8]
  005bc	e59d3020	 ldr         r3, [sp, #0x20]
  005c0	e2830024	 add         r0, r3, #0x24
  005c4	eb000000	 bl          memcpy

; 166  : 
; 167  :     m_lpWaveHdrHead    = NULL;

  005c8	e59d3020	 ldr         r3, [sp, #0x20]
  005cc	e2832038	 add         r2, r3, #0x38
  005d0	e3a03000	 mov         r3, #0
  005d4	e5823000	 str         r3, [r2]

; 168  :     m_lpWaveHdrTail    = NULL;

  005d8	e59d3020	 ldr         r3, [sp, #0x20]
  005dc	e2832040	 add         r2, r3, #0x40
  005e0	e3a03000	 mov         r3, #0
  005e4	e5823000	 str         r3, [r2]

; 169  :     m_lpWaveHdrCurrent = NULL;

  005e8	e59d3020	 ldr         r3, [sp, #0x20]
  005ec	e283203c	 add         r2, r3, #0x3C
  005f0	e3a03000	 mov         r3, #0
  005f4	e5823000	 str         r3, [r2]

; 170  :     m_lpCurrData       = NULL;

  005f8	e59d3020	 ldr         r3, [sp, #0x20]
  005fc	e2832044	 add         r2, r3, #0x44
  00600	e3a03000	 mov         r3, #0
  00604	e5823000	 str         r3, [r2]

; 171  :     m_lpCurrDataEnd    = NULL;

  00608	e59d3020	 ldr         r3, [sp, #0x20]
  0060c	e2832048	 add         r2, r3, #0x48
  00610	e3a03000	 mov         r3, #0
  00614	e5823000	 str         r3, [r2]

; 172  :     m_dwByteCount      = 0;

  00618	e59d3020	 ldr         r3, [sp, #0x20]
  0061c	e283204c	 add         r2, r3, #0x4C
  00620	e3a03000	 mov         r3, #0
  00624	e5823000	 str         r3, [r2]

; 173  :     m_dwLoopCount = 0;

  00628	e59d3020	 ldr         r3, [sp, #0x20]
  0062c	e2832054	 add         r2, r3, #0x54
  00630	e3a03000	 mov         r3, #0
  00634	e5823000	 str         r3, [r2]

; 174  : 
; 175  :     m_SecondaryGainClass=0;

  00638	e59d3020	 ldr         r3, [sp, #0x20]
  0063c	e283205c	 add         r2, r3, #0x5C
  00640	e3a03000	 mov         r3, #0
  00644	e5823000	 str         r3, [r2]

; 176  :     SetGain(pDeviceContext->GetDefaultStreamGain()); // Set gain to default value

  00648	e59d0024	 ldr         r0, [sp, #0x24]
  0064c	eb000000	 bl          |?GetDefaultStreamGain@DeviceContext@@QAAKXZ|
  00650	e58d0010	 str         r0, [sp, #0x10]
  00654	e59d1010	 ldr         r1, [sp, #0x10]
  00658	e59d0020	 ldr         r0, [sp, #0x20]
  0065c	eb000000	 bl          |?SetGain@StreamContext@@QAAKK@Z|

; 177  : 
; 178  :     ResetBaseInfo(); // Set base sample rate if needed

  00660	e59d3020	 ldr         r3, [sp, #0x20]
  00664	e5933000	 ldr         r3, [r3]
  00668	e2833020	 add         r3, r3, #0x20
  0066c	e59d0020	 ldr         r0, [sp, #0x20]
  00670	e5933000	 ldr         r3, [r3]
  00674	e1a0e00f	 mov         lr, pc
  00678	e12fff13	 bx          r3

; 179  : 
; 180  :     // DEBUGMSG(1, (TEXT("Opening stream 0x%x\r\n"),this));
; 181  : 
; 182  :     // Add stream to list. This will start playback.
; 183  : 
; 184  :     mmRet = pDeviceContext->NewStream(this);

  0067c	e59d1020	 ldr         r1, [sp, #0x20]
  00680	e59d3024	 ldr         r3, [sp, #0x24]
  00684	e5933000	 ldr         r3, [r3]
  00688	e2833004	 add         r3, r3, #4
  0068c	e59d0024	 ldr         r0, [sp, #0x24]
  00690	e5933000	 ldr         r3, [r3]
  00694	e1a0e00f	 mov         lr, pc
  00698	e12fff13	 bx          r3
  0069c	e58d0014	 str         r0, [sp, #0x14]
  006a0	e59d3014	 ldr         r3, [sp, #0x14]
  006a4	e58d3004	 str         r3, [sp, #4]

; 185  :     if (mmRet != MMSYSERR_NOERROR)

  006a8	e59d3004	 ldr         r3, [sp, #4]
  006ac	e3530000	 cmp         r3, #0
  006b0	0a000001	 beq         |$LN2@Open|
  006b4	ea000007	 b           |$LN1@Open|

; 186  :     {
; 187  :         goto Exit;

  006b8	ea000006	 b           |$Exit$35316|
  006bc		 |$LN2@Open|

; 188  :     }
; 189  : 
; 190  :     DoCallbackStreamOpened();

  006bc	e59d3020	 ldr         r3, [sp, #0x20]
  006c0	e5933000	 ldr         r3, [r3]
  006c4	e2833028	 add         r3, r3, #0x28
  006c8	e59d0020	 ldr         r0, [sp, #0x20]
  006cc	e5933000	 ldr         r3, [r3]
  006d0	e1a0e00f	 mov         lr, pc
  006d4	e12fff13	 bx          r3
  006d8		 |$LN1@Open|
  006d8		 |$Exit$35316|

; 191  : 
; 192  : Exit:
; 193  :     return mmRet;

  006d8	e59d3004	 ldr         r3, [sp, #4]
  006dc	e58d300c	 str         r3, [sp, #0xC]

; 194  : }

  006e0	e59d000c	 ldr         r0, [sp, #0xC]
  006e4	e28dd018	 add         sp, sp, #0x18
  006e8	e89d6000	 ldmia       sp, {sp, lr}
  006ec	e12fff1e	 bx          lr
  006f0		 |$M35612|

			 ENDP  ; |?Open@StreamContext@@UAAKPAVDeviceContext@@PAUwaveopendesc_tag@@K@Z|, StreamContext::Open

	EXPORT	|?ForceSpeaker@StreamContext@@QAAKH@Z|	; StreamContext::ForceSpeaker

  00088			 AREA	 |.pdata|, PDATA
|$T35620| DCD	|$LN6@Close|
	DCD	0x40001d04
; Function compile flags: /Odtp

  006f0			 AREA	 |.text|, CODE, ARM

  006f0		 |?Close@StreamContext@@UAAKXZ| PROC	; StreamContext::Close

; 197  : {

  006f0		 |$LN6@Close|
  006f0	e1a0c00d	 mov         r12, sp
  006f4	e92d0001	 stmdb       sp!, {r0}
  006f8	e92d5000	 stmdb       sp!, {r12, lr}
  006fc	e24dd008	 sub         sp, sp, #8
  00700		 |$M35617|

; 198  :     if (StillPlaying())

  00700	e59d0010	 ldr         r0, [sp, #0x10]
  00704	eb000000	 bl          |?StillPlaying@StreamContext@@QAAHXZ|
  00708	e58d0004	 str         r0, [sp, #4]
  0070c	e59d3004	 ldr         r3, [sp, #4]
  00710	e3530000	 cmp         r3, #0
  00714	0a000002	 beq         |$LN1@Close|

; 199  :     {
; 200  :         return WAVERR_STILLPLAYING;

  00718	e3a03021	 mov         r3, #0x21
  0071c	e58d3000	 str         r3, [sp]
  00720	ea00000b	 b           |$LN2@Close|
  00724		 |$LN1@Close|

; 201  :     }
; 202  : 
; 203  :     // Be sure to turn off speaker if we turned it on.
; 204  :     ForceSpeaker(FALSE);

  00724	e3a01000	 mov         r1, #0
  00728	e59d0010	 ldr         r0, [sp, #0x10]
  0072c	eb000000	 bl          |?ForceSpeaker@StreamContext@@QAAKH@Z|

; 205  : 
; 206  :     // DEBUGMSG(1, (TEXT("Closing stream 0x%x\r\n"),this));
; 207  :     DoCallbackStreamClosed();

  00730	e59d3010	 ldr         r3, [sp, #0x10]
  00734	e5933000	 ldr         r3, [r3]
  00738	e283302c	 add         r3, r3, #0x2C
  0073c	e59d0010	 ldr         r0, [sp, #0x10]
  00740	e5933000	 ldr         r3, [r3]
  00744	e1a0e00f	 mov         lr, pc
  00748	e12fff13	 bx          r3

; 208  : 
; 209  :     return MMSYSERR_NOERROR;

  0074c	e3a03000	 mov         r3, #0
  00750	e58d3000	 str         r3, [sp]
  00754		 |$LN2@Close|

; 210  : }

  00754	e59d0000	 ldr         r0, [sp]
  00758	e28dd008	 add         sp, sp, #8
  0075c	e89d6000	 ldmia       sp, {sp, lr}
  00760	e12fff1e	 bx          lr
  00764		 |$M35618|

			 ENDP  ; |?Close@StreamContext@@UAAKXZ|, StreamContext::Close

	EXPORT	|?AddRef@StreamContext@@QAAJXZ|		; StreamContext::AddRef

  00090			 AREA	 |.pdata|, PDATA
|$T35626| DCD	|$LN5@AddRef|
	DCD	0x40001504
; Function compile flags: /Odtp

  00764			 AREA	 |.text|, CODE, ARM

  00764		 |?AddRef@StreamContext@@QAAJXZ| PROC	; StreamContext::AddRef

; 214  : {

  00764		 |$LN5@AddRef|
  00764	e1a0c00d	 mov         r12, sp
  00768	e92d0001	 stmdb       sp!, {r0}
  0076c	e92d5000	 stmdb       sp!, {r12, lr}
  00770	e24dd008	 sub         sp, sp, #8
  00774		 |$M35623|

; 215  :     LONG RefCount = ++m_RefCount;

  00774	e59d3010	 ldr         r3, [sp, #0x10]
  00778	e283300c	 add         r3, r3, #0xC
  0077c	e5933000	 ldr         r3, [r3]
  00780	e2832001	 add         r2, r3, #1
  00784	e59d3010	 ldr         r3, [sp, #0x10]
  00788	e283300c	 add         r3, r3, #0xC
  0078c	e5832000	 str         r2, [r3]
  00790	e59d3010	 ldr         r3, [sp, #0x10]
  00794	e283300c	 add         r3, r3, #0xC
  00798	e5933000	 ldr         r3, [r3]
  0079c	e58d3000	 str         r3, [sp]

; 216  : //    DEBUGMSG(1, (TEXT("AddRef stream 0x%x, RefCount=%d\r\n"),this,RefCount));
; 217  :     return RefCount;

  007a0	e59d3000	 ldr         r3, [sp]
  007a4	e58d3004	 str         r3, [sp, #4]

; 218  : }

  007a8	e59d0004	 ldr         r0, [sp, #4]
  007ac	e28dd008	 add         sp, sp, #8
  007b0	e89d6000	 ldmia       sp, {sp, lr}
  007b4	e12fff1e	 bx          lr
  007b8		 |$M35624|

			 ENDP  ; |?AddRef@StreamContext@@QAAJXZ|, StreamContext::AddRef

	EXPORT	|?Release@StreamContext@@QAAJXZ|	; StreamContext::Release
	IMPORT	|?DeleteStream@DeviceContext@@QAAXPAVStreamContext@@@Z| ; DeviceContext::DeleteStream

  00098			 AREA	 |.pdata|, PDATA
|$T35636| DCD	|$LN8@Release|
	DCD	0x40003104
; Function compile flags: /Odtp

  007b8			 AREA	 |.text|, CODE, ARM

  007b8		 |?Release@StreamContext@@QAAJXZ| PROC	; StreamContext::Release

; 222  : {

  007b8		 |$LN8@Release|
  007b8	e1a0c00d	 mov         r12, sp
  007bc	e92d0001	 stmdb       sp!, {r0}
  007c0	e92d5000	 stmdb       sp!, {r12, lr}
  007c4	e24dd018	 sub         sp, sp, #0x18
  007c8		 |$M35633|

; 223  :     LONG RefCount = --m_RefCount;

  007c8	e59d3020	 ldr         r3, [sp, #0x20]
  007cc	e283300c	 add         r3, r3, #0xC
  007d0	e5933000	 ldr         r3, [r3]
  007d4	e2432001	 sub         r2, r3, #1
  007d8	e59d3020	 ldr         r3, [sp, #0x20]
  007dc	e283300c	 add         r3, r3, #0xC
  007e0	e5832000	 str         r2, [r3]
  007e4	e59d3020	 ldr         r3, [sp, #0x20]
  007e8	e283300c	 add         r3, r3, #0xC
  007ec	e5933000	 ldr         r3, [r3]
  007f0	e58d3000	 str         r3, [sp]

; 224  : 
; 225  : //    DEBUGMSG(1, (TEXT("Releasing stream 0x%x, RefCount=%d\r\n"),this,RefCount));
; 226  :     if (RefCount==0)

  007f4	e59d3000	 ldr         r3, [sp]
  007f8	e3530000	 cmp         r3, #0
  007fc	1a000018	 bne         |$LN1@Release|

; 227  :     {
; 228  :         // DEBUGMSG(1, (TEXT("Deleting stream 0x%x\r\n"),this));
; 229  :         // Only remove stream from list when all refcounts are gone.
; 230  :         m_pDeviceContext->DeleteStream(this);

  00800	e59d1020	 ldr         r1, [sp, #0x20]
  00804	e59d3020	 ldr         r3, [sp, #0x20]
  00808	e2833050	 add         r3, r3, #0x50
  0080c	e5930000	 ldr         r0, [r3]
  00810	eb000000	 bl          |?DeleteStream@DeviceContext@@QAAXPAVStreamContext@@@Z|

; 231  :         delete this;

  00814	e59d3020	 ldr         r3, [sp, #0x20]
  00818	e58d3008	 str         r3, [sp, #8]
  0081c	e59d3008	 ldr         r3, [sp, #8]
  00820	e58d3004	 str         r3, [sp, #4]
  00824	e59d3004	 ldr         r3, [sp, #4]
  00828	e3530000	 cmp         r3, #0
  0082c	0a00000a	 beq         |$LN4@Release|
  00830	e3a01001	 mov         r1, #1
  00834	e59d3004	 ldr         r3, [sp, #4]
  00838	e5933000	 ldr         r3, [r3]
  0083c	e59d0004	 ldr         r0, [sp, #4]
  00840	e5933000	 ldr         r3, [r3]
  00844	e1a0e00f	 mov         lr, pc
  00848	e12fff13	 bx          r3
  0084c	e58d0010	 str         r0, [sp, #0x10]
  00850	e59d3010	 ldr         r3, [sp, #0x10]
  00854	e58d3014	 str         r3, [sp, #0x14]
  00858	ea000001	 b           |$LN5@Release|
  0085c		 |$LN4@Release|
  0085c	e3a03000	 mov         r3, #0
  00860	e58d3014	 str         r3, [sp, #0x14]
  00864		 |$LN5@Release|
  00864		 |$LN1@Release|

; 232  :     }
; 233  :     return RefCount;

  00864	e59d3000	 ldr         r3, [sp]
  00868	e58d300c	 str         r3, [sp, #0xC]

; 234  : }

  0086c	e59d000c	 ldr         r0, [sp, #0xC]
  00870	e28dd018	 add         sp, sp, #0x18
  00874	e89d6000	 ldmia       sp, {sp, lr}
  00878	e12fff1e	 bx          lr
  0087c		 |$M35634|

			 ENDP  ; |?Release@StreamContext@@QAAJXZ|, StreamContext::Release


  000a0			 AREA	 |.pdata|, PDATA
|$T35642| DCD	|$LN11@QueueBuffe|
	DCD	0x40007004
; Function compile flags: /Odtp

  0087c			 AREA	 |.text|, CODE, ARM

  0087c		 |?QueueBuffer@StreamContext@@UAAKPAUwavehdr_tag@@@Z| PROC ; StreamContext::QueueBuffer

; 237  : {

  0087c		 |$LN11@QueueBuffe|
  0087c	e1a0c00d	 mov         r12, sp
  00880	e92d0003	 stmdb       sp!, {r0, r1}
  00884	e92d5000	 stmdb       sp!, {r12, lr}
  00888	e24dd004	 sub         sp, sp, #4
  0088c		 |$M35639|

; 238  :     if (!(lpWaveHdr->dwFlags & WHDR_PREPARED))

  0088c	e59d3010	 ldr         r3, [sp, #0x10]
  00890	e2833010	 add         r3, r3, #0x10
  00894	e5933000	 ldr         r3, [r3]
  00898	e3130002	 tst         r3, #2
  0089c	1a000002	 bne         |$LN6@QueueBuffe|

; 239  :     {
; 240  :         return WAVERR_UNPREPARED;

  008a0	e3a03022	 mov         r3, #0x22
  008a4	e58d3000	 str         r3, [sp]
  008a8	ea00005f	 b           |$LN7@QueueBuffe|
  008ac		 |$LN6@QueueBuffe|

; 241  :     }
; 242  : 
; 243  :     lpWaveHdr->dwFlags |= WHDR_INQUEUE;

  008ac	e59d3010	 ldr         r3, [sp, #0x10]
  008b0	e2833010	 add         r3, r3, #0x10
  008b4	e5933000	 ldr         r3, [r3]
  008b8	e3832010	 orr         r2, r3, #0x10
  008bc	e59d3010	 ldr         r3, [sp, #0x10]
  008c0	e2833010	 add         r3, r3, #0x10
  008c4	e5832000	 str         r2, [r3]

; 244  :     lpWaveHdr->dwFlags &= ~WHDR_DONE;

  008c8	e59d3010	 ldr         r3, [sp, #0x10]
  008cc	e2833010	 add         r3, r3, #0x10
  008d0	e5932000	 ldr         r2, [r3]
  008d4	e3e03001	 mvn         r3, #1
  008d8	e0022003	 and         r2, r2, r3
  008dc	e59d3010	 ldr         r3, [sp, #0x10]
  008e0	e2833010	 add         r3, r3, #0x10
  008e4	e5832000	 str         r2, [r3]

; 245  :     lpWaveHdr->lpNext=NULL;

  008e8	e59d3010	 ldr         r3, [sp, #0x10]
  008ec	e2832018	 add         r2, r3, #0x18
  008f0	e3a03000	 mov         r3, #0
  008f4	e5823000	 str         r3, [r2]

; 246  :     lpWaveHdr->dwBytesRecorded=0;

  008f8	e59d3010	 ldr         r3, [sp, #0x10]
  008fc	e2832008	 add         r2, r3, #8
  00900	e3a03000	 mov         r3, #0
  00904	e5823000	 str         r3, [r2]

; 247  : 
; 248  :     if (!m_lpWaveHdrHead)

  00908	e59d300c	 ldr         r3, [sp, #0xC]
  0090c	e2833038	 add         r3, r3, #0x38
  00910	e5933000	 ldr         r3, [r3]
  00914	e3530000	 cmp         r3, #0
  00918	1a000004	 bne         |$LN5@QueueBuffe|

; 249  :     {
; 250  :         m_lpWaveHdrHead = lpWaveHdr;

  0091c	e59d300c	 ldr         r3, [sp, #0xC]
  00920	e2832038	 add         r2, r3, #0x38
  00924	e59d3010	 ldr         r3, [sp, #0x10]
  00928	e5823000	 str         r3, [r2]

; 251  :     }
; 252  :     else

  0092c	ea000005	 b           |$LN4@QueueBuffe|
  00930		 |$LN5@QueueBuffe|

; 253  :     {
; 254  :         m_lpWaveHdrTail->lpNext=lpWaveHdr;

  00930	e59d300c	 ldr         r3, [sp, #0xC]
  00934	e2833040	 add         r3, r3, #0x40
  00938	e5933000	 ldr         r3, [r3]
  0093c	e2832018	 add         r2, r3, #0x18
  00940	e59d3010	 ldr         r3, [sp, #0x10]
  00944	e5823000	 str         r3, [r2]
  00948		 |$LN4@QueueBuffe|

; 255  :     }
; 256  : 
; 257  :     m_lpWaveHdrTail=lpWaveHdr;

  00948	e59d300c	 ldr         r3, [sp, #0xC]
  0094c	e2832040	 add         r2, r3, #0x40
  00950	e59d3010	 ldr         r3, [sp, #0x10]
  00954	e5823000	 str         r3, [r2]

; 258  : 
; 259  :     // Note: Even if head & tail are valid, current may be NULL if we're in the middle of
; 260  :     // a loop and ran out of data. So, we need to check specifically against current to
; 261  :     // decide if we need to initialize it.
; 262  :     if (!m_lpWaveHdrCurrent)

  00958	e59d300c	 ldr         r3, [sp, #0xC]
  0095c	e283303c	 add         r3, r3, #0x3C
  00960	e5933000	 ldr         r3, [r3]
  00964	e3530000	 cmp         r3, #0
  00968	1a00001c	 bne         |$LN3@QueueBuffe|

; 263  :     {
; 264  :         m_lpWaveHdrCurrent = lpWaveHdr;

  0096c	e59d300c	 ldr         r3, [sp, #0xC]
  00970	e283203c	 add         r2, r3, #0x3C
  00974	e59d3010	 ldr         r3, [sp, #0x10]
  00978	e5823000	 str         r3, [r2]

; 265  :         m_lpCurrData    = (PBYTE)lpWaveHdr->lpData;

  0097c	e59d300c	 ldr         r3, [sp, #0xC]
  00980	e2832044	 add         r2, r3, #0x44
  00984	e59d3010	 ldr         r3, [sp, #0x10]
  00988	e5933000	 ldr         r3, [r3]
  0098c	e5823000	 str         r3, [r2]

; 266  :         m_lpCurrDataEnd = (PBYTE)lpWaveHdr->lpData + lpWaveHdr->dwBufferLength;

  00990	e59d3010	 ldr         r3, [sp, #0x10]
  00994	e2831004	 add         r1, r3, #4
  00998	e59d3010	 ldr         r3, [sp, #0x10]
  0099c	e5932000	 ldr         r2, [r3]
  009a0	e5913000	 ldr         r3, [r1]
  009a4	e0822003	 add         r2, r2, r3
  009a8	e59d300c	 ldr         r3, [sp, #0xC]
  009ac	e2833048	 add         r3, r3, #0x48
  009b0	e5832000	 str         r2, [r3]

; 267  :         if (lpWaveHdr->dwFlags & WHDR_BEGINLOOP)    // if this is the start of a loop block

  009b4	e59d3010	 ldr         r3, [sp, #0x10]
  009b8	e2833010	 add         r3, r3, #0x10
  009bc	e5933000	 ldr         r3, [r3]
  009c0	e3130004	 tst         r3, #4
  009c4	0a000005	 beq         |$LN2@QueueBuffe|

; 268  :         {
; 269  :             m_dwLoopCount = lpWaveHdr->dwLoops;     // save # of loops

  009c8	e59d3010	 ldr         r3, [sp, #0x10]
  009cc	e2831014	 add         r1, r3, #0x14
  009d0	e59d300c	 ldr         r3, [sp, #0xC]
  009d4	e2832054	 add         r2, r3, #0x54
  009d8	e5913000	 ldr         r3, [r1]
  009dc	e5823000	 str         r3, [r2]
  009e0		 |$LN2@QueueBuffe|
  009e0		 |$LN3@QueueBuffe|

; 270  :         }
; 271  :     }
; 272  : 
; 273  :     if (m_bRunning)

  009e0	e59d300c	 ldr         r3, [sp, #0xC]
  009e4	e2833010	 add         r3, r3, #0x10
  009e8	e5933000	 ldr         r3, [r3]
  009ec	e3530000	 cmp         r3, #0
  009f0	0a00000b	 beq         |$LN1@QueueBuffe|

; 274  :     {
; 275  :         m_pDeviceContext->StreamReadyToRender(this);

  009f4	e59d100c	 ldr         r1, [sp, #0xC]
  009f8	e59d300c	 ldr         r3, [sp, #0xC]
  009fc	e2833050	 add         r3, r3, #0x50
  00a00	e5932000	 ldr         r2, [r3]
  00a04	e59d300c	 ldr         r3, [sp, #0xC]
  00a08	e2833050	 add         r3, r3, #0x50
  00a0c	e5930000	 ldr         r0, [r3]
  00a10	e5923000	 ldr         r3, [r2]
  00a14	e2833010	 add         r3, r3, #0x10
  00a18	e5933000	 ldr         r3, [r3]
  00a1c	e1a0e00f	 mov         lr, pc
  00a20	e12fff13	 bx          r3
  00a24		 |$LN1@QueueBuffe|

; 276  :     }
; 277  : 
; 278  :     return MMSYSERR_NOERROR;

  00a24	e3a03000	 mov         r3, #0
  00a28	e58d3000	 str         r3, [sp]
  00a2c		 |$LN7@QueueBuffe|

; 279  : }

  00a2c	e59d0000	 ldr         r0, [sp]
  00a30	e28dd004	 add         sp, sp, #4
  00a34	e89d6000	 ldmia       sp, {sp, lr}
  00a38	e12fff1e	 bx          lr
  00a3c		 |$M35640|

			 ENDP  ; |?QueueBuffer@StreamContext@@UAAKPAUwavehdr_tag@@@Z|, StreamContext::QueueBuffer

	EXPORT	|?GetNextBuffer@StreamContext@@QAAPAEXZ| ; StreamContext::GetNextBuffer

  000a8			 AREA	 |.pdata|, PDATA
|$T35648| DCD	|$LN17@GetNextBuf|
	DCD	0x40007804
; Function compile flags: /Odtp

  00a3c			 AREA	 |.text|, CODE, ARM

  00a3c		 |?GetNextBuffer@StreamContext@@QAAPAEXZ| PROC ; StreamContext::GetNextBuffer

; 294  : {

  00a3c		 |$LN17@GetNextBuf|
  00a3c	e1a0c00d	 mov         r12, sp
  00a40	e92d0001	 stmdb       sp!, {r0}
  00a44	e92d5000	 stmdb       sp!, {r12, lr}
  00a48	e24dd00c	 sub         sp, sp, #0xC
  00a4c		 |$M35645|

; 295  :     LPWAVEHDR lpOldHdr;
; 296  :     LPWAVEHDR lpNewHdr;
; 297  :  
; 298  :     // Get a pointer to the current buffer which is now done being processed
; 299  :     lpOldHdr=m_lpWaveHdrCurrent;

  00a4c	e59d3014	 ldr         r3, [sp, #0x14]
  00a50	e283303c	 add         r3, r3, #0x3C
  00a54	e5933000	 ldr         r3, [r3]
  00a58	e58d3000	 str         r3, [sp]

; 300  : 
; 301  :     if (!lpOldHdr)

  00a5c	e59d3000	 ldr         r3, [sp]
  00a60	e3530000	 cmp         r3, #0
  00a64	1a000002	 bne         |$LN12@GetNextBuf|

; 302  :     {
; 303  :         return NULL;

  00a68	e3a03000	 mov         r3, #0
  00a6c	e58d3008	 str         r3, [sp, #8]
  00a70	ea000065	 b           |$LN13@GetNextBuf|
  00a74		 |$LN12@GetNextBuf|

; 304  :     }
; 305  : 
; 306  :     // Are we in a loop
; 307  :     // Note: a loopcount of 1 means we're not really in a loop
; 308  :     if (m_dwLoopCount>1)

  00a74	e59d3014	 ldr         r3, [sp, #0x14]
  00a78	e2833054	 add         r3, r3, #0x54
  00a7c	e5933000	 ldr         r3, [r3]
  00a80	e3530001	 cmp         r3, #1
  00a84	9a00001c	 bls         |$LN11@GetNextBuf|

; 309  :     {
; 310  :         // We're in a loop!
; 311  :         if (lpOldHdr->dwFlags & WHDR_ENDLOOP)

  00a88	e59d3000	 ldr         r3, [sp]
  00a8c	e2833010	 add         r3, r3, #0x10
  00a90	e5933000	 ldr         r3, [r3]
  00a94	e3130008	 tst         r3, #8
  00a98	0a000010	 beq         |$LN10@GetNextBuf|

; 312  :         {
; 313  :            // In loop, last buffer
; 314  :             // If dwLoopCount was set to INFINITE, loop forever
; 315  :             // (Note: this is not explicitly in the wave driver API spec)
; 316  :             if (m_dwLoopCount!=INFINITE)

  00a9c	e59d3014	 ldr         r3, [sp, #0x14]
  00aa0	e2833054	 add         r3, r3, #0x54
  00aa4	e5933000	 ldr         r3, [r3]
  00aa8	e3730001	 cmn         r3, #1
  00aac	0a000006	 beq         |$LN9@GetNextBuf|

; 317  :             {
; 318  :            m_dwLoopCount--;                    // decrement loop count

  00ab0	e59d3014	 ldr         r3, [sp, #0x14]
  00ab4	e2833054	 add         r3, r3, #0x54
  00ab8	e5933000	 ldr         r3, [r3]
  00abc	e2432001	 sub         r2, r3, #1
  00ac0	e59d3014	 ldr         r3, [sp, #0x14]
  00ac4	e2833054	 add         r3, r3, #0x54
  00ac8	e5832000	 str         r2, [r3]
  00acc		 |$LN9@GetNextBuf|

; 319  :             }
; 320  :            lpNewHdr=m_lpWaveHdrHead;           // go back to start of loop

  00acc	e59d3014	 ldr         r3, [sp, #0x14]
  00ad0	e2833038	 add         r3, r3, #0x38
  00ad4	e5933000	 ldr         r3, [r3]
  00ad8	e58d3004	 str         r3, [sp, #4]

; 321  :         }
; 322  :         else

  00adc	ea000003	 b           |$LN8@GetNextBuf|
  00ae0		 |$LN10@GetNextBuf|

; 323  :         {
; 324  :            // In loop, intermediate buffer
; 325  :            lpNewHdr=lpOldHdr->lpNext;          // just go to next buffer in loop block

  00ae0	e59d3000	 ldr         r3, [sp]
  00ae4	e2833018	 add         r3, r3, #0x18
  00ae8	e5933000	 ldr         r3, [r3]
  00aec	e58d3004	 str         r3, [sp, #4]
  00af0		 |$LN8@GetNextBuf|

; 326  :         }
; 327  : 
; 328  :         lpOldHdr=NULL;

  00af0	e3a03000	 mov         r3, #0
  00af4	e58d3000	 str         r3, [sp]

; 329  :     }
; 330  :     else

  00af8	ea00001a	 b           |$LN7@GetNextBuf|
  00afc		 |$LN11@GetNextBuf|

; 331  :     {
; 332  :         // Not in a loop; return old buffer and get new buffer
; 333  :         lpNewHdr=lpOldHdr->lpNext;

  00afc	e59d3000	 ldr         r3, [sp]
  00b00	e2833018	 add         r3, r3, #0x18
  00b04	e5933000	 ldr         r3, [r3]
  00b08	e58d3004	 str         r3, [sp, #4]

; 334  : 
; 335  :         m_lpWaveHdrHead = lpNewHdr;           // reset list head

  00b0c	e59d3014	 ldr         r3, [sp, #0x14]
  00b10	e2832038	 add         r2, r3, #0x38
  00b14	e59d3004	 ldr         r3, [sp, #4]
  00b18	e5823000	 str         r3, [r2]

; 336  :         if (!lpNewHdr)

  00b1c	e59d3004	 ldr         r3, [sp, #4]
  00b20	e3530000	 cmp         r3, #0
  00b24	1a000004	 bne         |$LN6@GetNextBuf|

; 337  :         {
; 338  :             m_lpWaveHdrTail=NULL;             // no new buffer, reset tail to NULL

  00b28	e59d3014	 ldr         r3, [sp, #0x14]
  00b2c	e2832040	 add         r2, r3, #0x40
  00b30	e3a03000	 mov         r3, #0
  00b34	e5823000	 str         r3, [r2]
  00b38	ea00000a	 b           |$LN5@GetNextBuf|
  00b3c		 |$LN6@GetNextBuf|

; 339  :         }
; 340  :         else if (lpNewHdr->dwFlags & WHDR_BEGINLOOP)    // if new buffer is start of a loop block

  00b3c	e59d3004	 ldr         r3, [sp, #4]
  00b40	e2833010	 add         r3, r3, #0x10
  00b44	e5933000	 ldr         r3, [r3]
  00b48	e3130004	 tst         r3, #4
  00b4c	0a000005	 beq         |$LN4@GetNextBuf|

; 341  :         {
; 342  :             m_dwLoopCount=lpNewHdr->dwLoops;  // save # of loops

  00b50	e59d3004	 ldr         r3, [sp, #4]
  00b54	e2831014	 add         r1, r3, #0x14
  00b58	e59d3014	 ldr         r3, [sp, #0x14]
  00b5c	e2832054	 add         r2, r3, #0x54
  00b60	e5913000	 ldr         r3, [r1]
  00b64	e5823000	 str         r3, [r2]
  00b68		 |$LN4@GetNextBuf|
  00b68		 |$LN5@GetNextBuf|
  00b68		 |$LN7@GetNextBuf|

; 343  :         }
; 344  :     }
; 345  : 
; 346  :     m_lpWaveHdrCurrent=lpNewHdr;              // save current buffer pointer

  00b68	e59d3014	 ldr         r3, [sp, #0x14]
  00b6c	e283203c	 add         r2, r3, #0x3C
  00b70	e59d3004	 ldr         r3, [sp, #4]
  00b74	e5823000	 str         r3, [r2]

; 347  : 
; 348  :     if (lpNewHdr)

  00b78	e59d3004	 ldr         r3, [sp, #4]
  00b7c	e3530000	 cmp         r3, #0
  00b80	0a00000f	 beq         |$LN3@GetNextBuf|

; 349  :     {
; 350  :         m_lpCurrData    = (PBYTE)lpNewHdr->lpData;  // reinitialize data pointer

  00b84	e59d3014	 ldr         r3, [sp, #0x14]
  00b88	e2832044	 add         r2, r3, #0x44
  00b8c	e59d3004	 ldr         r3, [sp, #4]
  00b90	e5933000	 ldr         r3, [r3]
  00b94	e5823000	 str         r3, [r2]

; 351  :         m_lpCurrDataEnd = m_lpCurrData + lpNewHdr->dwBufferLength;

  00b98	e59d3014	 ldr         r3, [sp, #0x14]
  00b9c	e2832044	 add         r2, r3, #0x44
  00ba0	e59d3004	 ldr         r3, [sp, #4]
  00ba4	e2833004	 add         r3, r3, #4
  00ba8	e5922000	 ldr         r2, [r2]
  00bac	e5933000	 ldr         r3, [r3]
  00bb0	e0822003	 add         r2, r2, r3
  00bb4	e59d3014	 ldr         r3, [sp, #0x14]
  00bb8	e2833048	 add         r3, r3, #0x48
  00bbc	e5832000	 str         r2, [r3]

; 352  :     }
; 353  :     else

  00bc0	ea000007	 b           |$LN2@GetNextBuf|
  00bc4		 |$LN3@GetNextBuf|

; 354  :     {
; 355  :         m_lpCurrData  = NULL;

  00bc4	e59d3014	 ldr         r3, [sp, #0x14]
  00bc8	e2832044	 add         r2, r3, #0x44
  00bcc	e3a03000	 mov         r3, #0
  00bd0	e5823000	 str         r3, [r2]

; 356  :         m_lpCurrDataEnd = NULL;

  00bd4	e59d3014	 ldr         r3, [sp, #0x14]
  00bd8	e2832048	 add         r2, r3, #0x48
  00bdc	e3a03000	 mov         r3, #0
  00be0	e5823000	 str         r3, [r2]
  00be4		 |$LN2@GetNextBuf|

; 357  :     }
; 358  : 
; 359  :     // Return the old buffer
; 360  :     // This may cause the stream to be destroyed, so make sure that any calls to this function
; 361  :     // are within an AddRef/Release block
; 362  :     if (lpOldHdr)

  00be4	e59d3000	 ldr         r3, [sp]
  00be8	e3530000	 cmp         r3, #0
  00bec	0a000002	 beq         |$LN1@GetNextBuf|

; 363  :     {
; 364  :         ReturnBuffer(lpOldHdr);

  00bf0	e59d1000	 ldr         r1, [sp]
  00bf4	e59d0014	 ldr         r0, [sp, #0x14]
  00bf8	eb000000	 bl          |?ReturnBuffer@StreamContext@@QAAXPAUwavehdr_tag@@@Z|
  00bfc		 |$LN1@GetNextBuf|

; 365  :     }
; 366  : 
; 367  :     return m_lpCurrData;

  00bfc	e59d3014	 ldr         r3, [sp, #0x14]
  00c00	e2833044	 add         r3, r3, #0x44
  00c04	e5933000	 ldr         r3, [r3]
  00c08	e58d3008	 str         r3, [sp, #8]
  00c0c		 |$LN13@GetNextBuf|

; 368  : }

  00c0c	e59d0008	 ldr         r0, [sp, #8]
  00c10	e28dd00c	 add         sp, sp, #0xC
  00c14	e89d6000	 ldmia       sp, {sp, lr}
  00c18	e12fff1e	 bx          lr
  00c1c		 |$M35646|

			 ENDP  ; |?GetNextBuffer@StreamContext@@QAAPAEXZ|, StreamContext::GetNextBuffer

	EXPORT	|?BreakLoop@StreamContext@@QAAKXZ|	; StreamContext::BreakLoop

  000b0			 AREA	 |.pdata|, PDATA
|$T35654| DCD	|$LN9@BreakLoop|
	DCD	0x40003604
; Function compile flags: /Odtp

  00c1c			 AREA	 |.text|, CODE, ARM

  00c1c		 |?BreakLoop@StreamContext@@QAAKXZ| PROC ; StreamContext::BreakLoop

; 372  : {

  00c1c		 |$LN9@BreakLoop|
  00c1c	e1a0c00d	 mov         r12, sp
  00c20	e92d0001	 stmdb       sp!, {r0}
  00c24	e92d5000	 stmdb       sp!, {r12, lr}
  00c28	e24dd008	 sub         sp, sp, #8
  00c2c		 |$M35651|

; 373  :     AddRef();

  00c2c	e59d0010	 ldr         r0, [sp, #0x10]
  00c30	eb000000	 bl          |?AddRef@StreamContext@@QAAJXZ|

; 374  : 
; 375  :     if (m_dwLoopCount>0)

  00c34	e59d3010	 ldr         r3, [sp, #0x10]
  00c38	e2833054	 add         r3, r3, #0x54
  00c3c	e5933000	 ldr         r3, [r3]
  00c40	e3530000	 cmp         r3, #0
  00c44	9a000022	 bls         |$LN4@BreakLoop|

; 376  :     {
; 377  :         m_dwLoopCount = 0;

  00c48	e59d3010	 ldr         r3, [sp, #0x10]
  00c4c	e2832054	 add         r2, r3, #0x54
  00c50	e3a03000	 mov         r3, #0
  00c54	e5823000	 str         r3, [r2]
  00c58		 |$LN3@BreakLoop|

; 378  : 
; 379  :         LPWAVEHDR lpHdr;
; 380  :         while (m_lpWaveHdrHead!=m_lpWaveHdrCurrent)

  00c58	e59d3010	 ldr         r3, [sp, #0x10]
  00c5c	e2832038	 add         r2, r3, #0x38
  00c60	e59d3010	 ldr         r3, [sp, #0x10]
  00c64	e283303c	 add         r3, r3, #0x3C
  00c68	e5922000	 ldr         r2, [r2]
  00c6c	e5933000	 ldr         r3, [r3]
  00c70	e1520003	 cmp         r2, r3
  00c74	0a000016	 beq         |$LN2@BreakLoop|

; 381  :         {
; 382  :             lpHdr = m_lpWaveHdrHead;

  00c78	e59d3010	 ldr         r3, [sp, #0x10]
  00c7c	e2833038	 add         r3, r3, #0x38
  00c80	e5933000	 ldr         r3, [r3]
  00c84	e58d3000	 str         r3, [sp]

; 383  :             m_lpWaveHdrHead = lpHdr->lpNext;

  00c88	e59d3000	 ldr         r3, [sp]
  00c8c	e2831018	 add         r1, r3, #0x18
  00c90	e59d3010	 ldr         r3, [sp, #0x10]
  00c94	e2832038	 add         r2, r3, #0x38
  00c98	e5913000	 ldr         r3, [r1]
  00c9c	e5823000	 str         r3, [r2]

; 384  :             if (m_lpWaveHdrHead==NULL)

  00ca0	e59d3010	 ldr         r3, [sp, #0x10]
  00ca4	e2833038	 add         r3, r3, #0x38
  00ca8	e5933000	 ldr         r3, [r3]
  00cac	e3530000	 cmp         r3, #0
  00cb0	1a000003	 bne         |$LN1@BreakLoop|

; 385  :             {
; 386  :                 m_lpWaveHdrTail=NULL;

  00cb4	e59d3010	 ldr         r3, [sp, #0x10]
  00cb8	e2832040	 add         r2, r3, #0x40
  00cbc	e3a03000	 mov         r3, #0
  00cc0	e5823000	 str         r3, [r2]
  00cc4		 |$LN1@BreakLoop|

; 387  :             }
; 388  :             ReturnBuffer(lpHdr);

  00cc4	e59d1000	 ldr         r1, [sp]
  00cc8	e59d0010	 ldr         r0, [sp, #0x10]
  00ccc	eb000000	 bl          |?ReturnBuffer@StreamContext@@QAAXPAUwavehdr_tag@@@Z|

; 389  :         }

  00cd0	eaffffe0	 b           |$LN3@BreakLoop|
  00cd4		 |$LN2@BreakLoop|
  00cd4		 |$LN4@BreakLoop|

; 390  :     }
; 391  : 
; 392  :     Release();

  00cd4	e59d0010	 ldr         r0, [sp, #0x10]
  00cd8	eb000000	 bl          |?Release@StreamContext@@QAAJXZ|

; 393  : 
; 394  :     return MMSYSERR_NOERROR;

  00cdc	e3a03000	 mov         r3, #0
  00ce0	e58d3004	 str         r3, [sp, #4]

; 395  : }

  00ce4	e59d0004	 ldr         r0, [sp, #4]
  00ce8	e28dd008	 add         sp, sp, #8
  00cec	e89d6000	 ldmia       sp, {sp, lr}
  00cf0	e12fff1e	 bx          lr
  00cf4		 |$M35652|

			 ENDP  ; |?BreakLoop@StreamContext@@QAAKXZ|, StreamContext::BreakLoop

	IMPORT	|?GetSecondaryGainLimit@DeviceContext@@QAAKK@Z| ; DeviceContext::GetSecondaryGainLimit
	IMPORT	|?GetGain@DeviceContext@@QAAKXZ|	; DeviceContext::GetGain

  000b8			 AREA	 |.pdata|, PDATA
|$T35660| DCD	|$LN16@MapGain|
	DCD	0x40008504
; Function compile flags: /Odtp

  00cf4			 AREA	 |.text|, CODE, ARM

  00cf4		 |?MapGain@StreamContext@@QAAKKK@Z| PROC ; StreamContext::MapGain

; 631  : {

  00cf4		 |$LN16@MapGain|
  00cf4	e1a0c00d	 mov         r12, sp
  00cf8	e92d0007	 stmdb       sp!, {r0 - r2}
  00cfc	e92d5000	 stmdb       sp!, {r12, lr}
  00d00	e24dd028	 sub         sp, sp, #0x28
  00d04		 |$M35657|

; 632  :     // Get correct stream gain based on channel
; 633  :     if (Channel==1)

  00d04	e59d3038	 ldr         r3, [sp, #0x38]
  00d08	e3530001	 cmp         r3, #1
  00d0c	1a000002	 bne         |$LN11@MapGain|

; 634  :     {
; 635  :         StreamGain >>= 16;

  00d10	e59d3034	 ldr         r3, [sp, #0x34]
  00d14	e1a03823	 mov         r3, r3, lsr #16
  00d18	e58d3034	 str         r3, [sp, #0x34]
  00d1c		 |$LN11@MapGain|

; 636  :     }
; 637  :     StreamGain &= 0xFFFF;

  00d1c	e59d2034	 ldr         r2, [sp, #0x34]
  00d20	e3a03cff	 mov         r3, #0xFF, 24
  00d24	e38330ff	 orr         r3, r3, #0xFF
  00d28	e0023003	 and         r3, r2, r3
  00d2c	e58d3034	 str         r3, [sp, #0x34]

; 638  : 
; 639  :     // Get Device gain
; 640  :     DWORD DeviceGain;
; 641  :     if (m_SecondaryGainClass >= SECONDARYDEVICEGAINCLASSMAX)

  00d30	e59d3030	 ldr         r3, [sp, #0x30]
  00d34	e283305c	 add         r3, r3, #0x5C
  00d38	e5933000	 ldr         r3, [r3]
  00d3c	e3530002	 cmp         r3, #2
  00d40	3a000003	 bcc         |$LN10@MapGain|

; 642  :     {
; 643  :         DeviceGain = 0xFFFF;

  00d44	e3a03cff	 mov         r3, #0xFF, 24
  00d48	e38330ff	 orr         r3, r3, #0xFF
  00d4c	e58d3008	 str         r3, [sp, #8]

; 644  :     }
; 645  :     else

  00d50	ea000011	 b           |$LN9@MapGain|
  00d54		 |$LN10@MapGain|

; 646  :     {
; 647  :         // Apply device gain
; 648  :         DeviceGain = m_pDeviceContext->GetGain();

  00d54	e59d3030	 ldr         r3, [sp, #0x30]
  00d58	e2833050	 add         r3, r3, #0x50
  00d5c	e5930000	 ldr         r0, [r3]
  00d60	eb000000	 bl          |?GetGain@DeviceContext@@QAAKXZ|
  00d64	e58d0020	 str         r0, [sp, #0x20]
  00d68	e59d3020	 ldr         r3, [sp, #0x20]
  00d6c	e58d3008	 str         r3, [sp, #8]

; 649  :         if (Channel==1)

  00d70	e59d3038	 ldr         r3, [sp, #0x38]
  00d74	e3530001	 cmp         r3, #1
  00d78	1a000002	 bne         |$LN8@MapGain|

; 650  :         {
; 651  :             DeviceGain >>= 16;

  00d7c	e59d3008	 ldr         r3, [sp, #8]
  00d80	e1a03823	 mov         r3, r3, lsr #16
  00d84	e58d3008	 str         r3, [sp, #8]
  00d88		 |$LN8@MapGain|

; 652  :         }
; 653  :         DeviceGain &= 0xFFFF;

  00d88	e59d2008	 ldr         r2, [sp, #8]
  00d8c	e3a03cff	 mov         r3, #0xFF, 24
  00d90	e38330ff	 orr         r3, r3, #0xFF
  00d94	e0023003	 and         r3, r2, r3
  00d98	e58d3008	 str         r3, [sp, #8]
  00d9c		 |$LN9@MapGain|

; 654  :     }
; 655  : 
; 656  :     // Get Secondary gain
; 657  :     DWORD SecondaryGain;
; 658  :     SecondaryGain = m_pDeviceContext->GetSecondaryGainLimit(m_SecondaryGainClass);

  00d9c	e59d3030	 ldr         r3, [sp, #0x30]
  00da0	e283305c	 add         r3, r3, #0x5C
  00da4	e5931000	 ldr         r1, [r3]
  00da8	e59d3030	 ldr         r3, [sp, #0x30]
  00dac	e2833050	 add         r3, r3, #0x50
  00db0	e5930000	 ldr         r0, [r3]
  00db4	eb000000	 bl          |?GetSecondaryGainLimit@DeviceContext@@QAAKK@Z|
  00db8	e58d0024	 str         r0, [sp, #0x24]
  00dbc	e59d3024	 ldr         r3, [sp, #0x24]
  00dc0	e58d3004	 str         r3, [sp, #4]

; 659  :     SecondaryGain &= 0xFFFF; // For now, only use lowest 16 bits for both channels

  00dc4	e59d2004	 ldr         r2, [sp, #4]
  00dc8	e3a03cff	 mov         r3, #0xFF, 24
  00dcc	e38330ff	 orr         r3, r3, #0xFF
  00dd0	e0023003	 and         r3, r2, r3
  00dd4	e58d3004	 str         r3, [sp, #4]

; 660  : 
; 661  :     DWORD fGainMultiplier;
; 662  : 
; 663  :     // Special handling- if any gain is totally 0, mute the output
; 664  :     if ((StreamGain==0) || (DeviceGain==0) || (SecondaryGain==0))

  00dd8	e59d3034	 ldr         r3, [sp, #0x34]
  00ddc	e3530000	 cmp         r3, #0
  00de0	0a000005	 beq         |$LN6@MapGain|
  00de4	e59d3008	 ldr         r3, [sp, #8]
  00de8	e3530000	 cmp         r3, #0
  00dec	0a000002	 beq         |$LN6@MapGain|
  00df0	e59d3004	 ldr         r3, [sp, #4]
  00df4	e3530000	 cmp         r3, #0
  00df8	1a000002	 bne         |$LN7@MapGain|
  00dfc		 |$LN6@MapGain|

; 665  :     {
; 666  :         fGainMultiplier = 0;

  00dfc	e3a03000	 mov         r3, #0
  00e00	e58d3000	 str         r3, [sp]

; 667  :     }
; 668  :     else

  00e04	ea000038	 b           |$LN5@MapGain|
  00e08		 |$LN7@MapGain|

; 669  :     {
; 670  :         // Now calculate attenuation of each in dB using appropriate ranges
; 671  : 
; 672  :         // Stream volume is normalized to the range from 0 to -100 dB
; 673  :         // Device and secondary gain are normalized from 0 to -35 dB
; 674  :         // These can be modified in hwctxt.h
; 675  : 
; 676  :         DWORD dBAttenStream, dBAttenDevice, dBAttenSecondary, dBAttenTotal;
; 677  : 
; 678  :         dBAttenStream    = ((0xFFFF - StreamGain)    * STREAM_ATTEN_MAX);

  00e08	e59d2034	 ldr         r2, [sp, #0x34]
  00e0c	e3a03cff	 mov         r3, #0xFF, 24
  00e10	e38330ff	 orr         r3, r3, #0xFF
  00e14	e0622003	 rsb         r2, r2, r3
  00e18	e3a03064	 mov         r3, #0x64
  00e1c	e0030392	 mul         r3, r2, r3
  00e20	e58d3018	 str         r3, [sp, #0x18]

; 679  :         dBAttenDevice    = ((0xFFFF - DeviceGain)    * DEVICE_ATTEN_MAX );

  00e24	e59d2008	 ldr         r2, [sp, #8]
  00e28	e3a03cff	 mov         r3, #0xFF, 24
  00e2c	e38330ff	 orr         r3, r3, #0xFF
  00e30	e0622003	 rsb         r2, r2, r3
  00e34	e3a03023	 mov         r3, #0x23
  00e38	e0030392	 mul         r3, r2, r3
  00e3c	e58d3014	 str         r3, [sp, #0x14]

; 680  :         dBAttenSecondary = ((0xFFFF - SecondaryGain) * CLASS_ATTEN_MAX );

  00e40	e59d2004	 ldr         r2, [sp, #4]
  00e44	e3a03cff	 mov         r3, #0xFF, 24
  00e48	e38330ff	 orr         r3, r3, #0xFF
  00e4c	e0622003	 rsb         r2, r2, r3
  00e50	e3a03023	 mov         r3, #0x23
  00e54	e0030392	 mul         r3, r2, r3
  00e58	e58d3010	 str         r3, [sp, #0x10]

; 681  : 
; 682  :         // Add together
; 683  :         dBAttenTotal = dBAttenStream + dBAttenDevice + dBAttenSecondary;

  00e5c	e59d2018	 ldr         r2, [sp, #0x18]
  00e60	e59d3014	 ldr         r3, [sp, #0x14]
  00e64	e0822003	 add         r2, r2, r3
  00e68	e59d3010	 ldr         r3, [sp, #0x10]
  00e6c	e0823003	 add         r3, r2, r3
  00e70	e58d300c	 str         r3, [sp, #0xC]

; 684  : 
; 685  :         // Multiply result by 2 for .5 dB steps in the table
; 686  :         dBAttenTotal *= 2;

  00e74	e59d200c	 ldr         r2, [sp, #0xC]
  00e78	e3a03002	 mov         r3, #2
  00e7c	e0030392	 mul         r3, r2, r3
  00e80	e58d300c	 str         r3, [sp, #0xC]

; 687  : 
; 688  :         // Round up to account for rounding errors in lower 16 bits
; 689  :         dBAttenTotal += 0x8000;

  00e84	e59d300c	 ldr         r3, [sp, #0xC]
  00e88	e2833902	 add         r3, r3, #2, 18
  00e8c	e58d300c	 str         r3, [sp, #0xC]

; 690  : 
; 691  :         // Now shift back to the lowest 16 bits to get an index into the table
; 692  :         dBAttenTotal >>= 16;

  00e90	e59d300c	 ldr         r3, [sp, #0xC]
  00e94	e1a03823	 mov         r3, r3, lsr #16
  00e98	e58d300c	 str         r3, [sp, #0xC]

; 693  : 
; 694  :         // dBAttenTotal should range from 0 to something like 340 (if all terms were close to 0)
; 695  : 
; 696  :         // Special case 0 as totally muted. The table starts at -.5dB, rather than 0dB, since
; 697  :         // 0dB would take more than the 16-bits we allowed per entry.
; 698  :         if (dBAttenTotal==0)

  00e9c	e59d300c	 ldr         r3, [sp, #0xC]
  00ea0	e3530000	 cmp         r3, #0
  00ea4	1a000002	 bne         |$LN4@MapGain|

; 699  :         {
; 700  :             fGainMultiplier = 0x10000;

  00ea8	e3a03801	 mov         r3, #1, 16
  00eac	e58d3000	 str         r3, [sp]
  00eb0	ea00000d	 b           |$LN3@MapGain|
  00eb4		 |$LN4@MapGain|

; 701  :         }
; 702  :         else if (dBAttenTotal>200)

  00eb4	e59d300c	 ldr         r3, [sp, #0xC]
  00eb8	e35300c8	 cmp         r3, #0xC8
  00ebc	9a000002	 bls         |$LN2@MapGain|

; 703  :         {
; 704  :             fGainMultiplier = 0;

  00ec0	e3a03000	 mov         r3, #0
  00ec4	e58d3000	 str         r3, [sp]

; 705  :         }
; 706  :         else

  00ec8	ea000007	 b           |$LN1@MapGain|
  00ecc		 |$LN2@MapGain|

; 707  :         {
; 708  :             fGainMultiplier = (DWORD)GainMap[dBAttenTotal-1];

  00ecc	e59d300c	 ldr         r3, [sp, #0xC]
  00ed0	e2431001	 sub         r1, r3, #1
  00ed4	e3a03002	 mov         r3, #2
  00ed8	e0020391	 mul         r2, r1, r3
  00edc	e59f3020	 ldr         r3, [pc, #0x20]
  00ee0	e0833002	 add         r3, r3, r2
  00ee4	e1d330b0	 ldrh        r3, [r3]
  00ee8	e58d3000	 str         r3, [sp]
  00eec		 |$LN1@MapGain|
  00eec		 |$LN3@MapGain|
  00eec		 |$LN5@MapGain|

; 709  :         }
; 710  :     }
; 711  : 
; 712  :     return fGainMultiplier;

  00eec	e59d3000	 ldr         r3, [sp]
  00ef0	e58d301c	 str         r3, [sp, #0x1C]

; 713  : }

  00ef4	e59d001c	 ldr         r0, [sp, #0x1C]
  00ef8	e28dd028	 add         sp, sp, #0x28
  00efc	e89d6000	 ldmia       sp, {sp, lr}
  00f00	e12fff1e	 bx          lr
  00f04		 |$LN17@MapGain|
  00f04		 |$LN18@MapGain|
  00f04	00000000	 DCD         |GainMap|
  00f08		 |$M35658|

			 ENDP  ; |?MapGain@StreamContext@@QAAKKK@Z|, StreamContext::MapGain

	IMPORT	|__rt_udiv|

  000c0			 AREA	 |.pdata|, PDATA
|$T35669| DCD	|$LN12@GetPos|
	DCD	0x40008d04
; Function compile flags: /Odtp

  00f08			 AREA	 |.text|, CODE, ARM

  00f08		 |?GetPos@StreamContext@@UAAKPAUmmtime_tag@@@Z| PROC ; StreamContext::GetPos

; 716  : {

  00f08		 |$LN12@GetPos|
  00f08	e1a0c00d	 mov         r12, sp
  00f0c	e92d0003	 stmdb       sp!, {r0, r1}
  00f10	e92d5010	 stmdb       sp!, {r4, r12, lr}
  00f14	e24dd008	 sub         sp, sp, #8
  00f18		 |$M35666|

; 717  :     switch (pmmt->wType)

  00f18	e59d1018	 ldr         r1, [sp, #0x18]
  00f1c	e5d13003	 ldrb        r3, [r1, #3]
  00f20	e1a02403	 mov         r2, r3, lsl #8
  00f24	e5d13002	 ldrb        r3, [r1, #2]
  00f28	e1833002	 orr         r3, r3, r2
  00f2c	e1a02403	 mov         r2, r3, lsl #8
  00f30	e5d13001	 ldrb        r3, [r1, #1]
  00f34	e1833002	 orr         r3, r3, r2
  00f38	e1a02403	 mov         r2, r3, lsl #8
  00f3c	e5d13000	 ldrb        r3, [r1]
  00f40	e1833002	 orr         r3, r3, r2
  00f44	e58d3004	 str         r3, [sp, #4]
  00f48	e59d3004	 ldr         r3, [sp, #4]
  00f4c	e3530001	 cmp         r3, #1
  00f50	0a00002c	 beq         |$LN4@GetPos|
  00f54	e59d3004	 ldr         r3, [sp, #4]
  00f58	e3530002	 cmp         r3, #2
  00f5c	0a000003	 beq         |$LN5@GetPos|
  00f60	e59d3004	 ldr         r3, [sp, #4]
  00f64	e3530004	 cmp         r3, #4
  00f68	0a00005f	 beq         |$LN1@GetPos|
  00f6c	ea000053	 b           |$LN2@GetPos|
  00f70		 |$LN5@GetPos|

; 718  :     {
; 719  : 
; 720  :     case TIME_SAMPLES:
; 721  :         pmmt->u.sample = (m_dwByteCount * 8) /
; 722  :                          (m_WaveFormat.nChannels * m_WaveFormat.wBitsPerSample);

  00f70	e59d3014	 ldr         r3, [sp, #0x14]
  00f74	e283304c	 add         r3, r3, #0x4C
  00f78	e5932000	 ldr         r2, [r3]
  00f7c	e3a03008	 mov         r3, #8
  00f80	e0040392	 mul         r4, r2, r3
  00f84	e59d3014	 ldr         r3, [sp, #0x14]
  00f88	e2831026	 add         r1, r3, #0x26
  00f8c	e5d13001	 ldrb        r3, [r1, #1]
  00f90	e1a03403	 mov         r3, r3, lsl #8
  00f94	e1a02803	 mov         r2, r3, lsl #16
  00f98	e1a02822	 mov         r2, r2, lsr #16
  00f9c	e5d13000	 ldrb        r3, [r1]
  00fa0	e1833002	 orr         r3, r3, r2
  00fa4	e1a0e003	 mov         lr, r3
  00fa8	e59d3014	 ldr         r3, [sp, #0x14]
  00fac	e2831032	 add         r1, r3, #0x32
  00fb0	e5d13001	 ldrb        r3, [r1, #1]
  00fb4	e1a03403	 mov         r3, r3, lsl #8
  00fb8	e1a02803	 mov         r2, r3, lsl #16
  00fbc	e1a02822	 mov         r2, r2, lsr #16
  00fc0	e5d13000	 ldrb        r3, [r1]
  00fc4	e1833002	 orr         r3, r3, r2
  00fc8	e000039e	 mul         r0, lr, r3
  00fcc	e1a01004	 mov         r1, r4
  00fd0	eb000000	 bl          __rt_udiv
  00fd4	e59d3018	 ldr         r3, [sp, #0x18]
  00fd8	e2831004	 add         r1, r3, #4
  00fdc	e1a03000	 mov         r3, r0
  00fe0	e5c13000	 strb        r3, [r1]
  00fe4	e1a02423	 mov         r2, r3, lsr #8
  00fe8	e1a03002	 mov         r3, r2
  00fec	e5c13001	 strb        r3, [r1, #1]
  00ff0	e1a02422	 mov         r2, r2, lsr #8
  00ff4	e1a03002	 mov         r3, r2
  00ff8	e5c13002	 strb        r3, [r1, #2]
  00ffc	e1a03422	 mov         r3, r2, lsr #8
  01000	e5c13003	 strb        r3, [r1, #3]

; 723  :         break;

  01004	ea000046	 b           |$LN6@GetPos|
  01008		 |$LN4@GetPos|

; 724  : 
; 725  :     case TIME_MS:
; 726  :         if (m_WaveFormat.nAvgBytesPerSec != 0)

  01008	e59d3014	 ldr         r3, [sp, #0x14]
  0100c	e283102c	 add         r1, r3, #0x2C
  01010	e5d13003	 ldrb        r3, [r1, #3]
  01014	e1a02403	 mov         r2, r3, lsl #8
  01018	e5d13002	 ldrb        r3, [r1, #2]
  0101c	e1833002	 orr         r3, r3, r2
  01020	e1a02403	 mov         r2, r3, lsl #8
  01024	e5d13001	 ldrb        r3, [r1, #1]
  01028	e1833002	 orr         r3, r3, r2
  0102c	e1a02403	 mov         r2, r3, lsl #8
  01030	e5d13000	 ldrb        r3, [r1]
  01034	e1833002	 orr         r3, r3, r2
  01038	e3530000	 cmp         r3, #0
  0103c	0a00001f	 beq         |$LN3@GetPos|

; 727  :         {
; 728  :             pmmt->u.ms = (m_dwByteCount * 1000) / m_WaveFormat.nAvgBytesPerSec;

  01040	e59d3014	 ldr         r3, [sp, #0x14]
  01044	e283304c	 add         r3, r3, #0x4C
  01048	e5932000	 ldr         r2, [r3]
  0104c	e3a03ffa	 mov         r3, #0xFA, 30
  01050	e00e0392	 mul         lr, r2, r3
  01054	e59d3014	 ldr         r3, [sp, #0x14]
  01058	e283102c	 add         r1, r3, #0x2C
  0105c	e5d13003	 ldrb        r3, [r1, #3]
  01060	e1a02403	 mov         r2, r3, lsl #8
  01064	e5d13002	 ldrb        r3, [r1, #2]
  01068	e1833002	 orr         r3, r3, r2
  0106c	e1a02403	 mov         r2, r3, lsl #8
  01070	e5d13001	 ldrb        r3, [r1, #1]
  01074	e1833002	 orr         r3, r3, r2
  01078	e1a02403	 mov         r2, r3, lsl #8
  0107c	e5d13000	 ldrb        r3, [r1]
  01080	e1830002	 orr         r0, r3, r2
  01084	e1a0100e	 mov         r1, lr
  01088	eb000000	 bl          __rt_udiv
  0108c	e59d3018	 ldr         r3, [sp, #0x18]
  01090	e2831004	 add         r1, r3, #4
  01094	e1a03000	 mov         r3, r0
  01098	e5c13000	 strb        r3, [r1]
  0109c	e1a02423	 mov         r2, r3, lsr #8
  010a0	e1a03002	 mov         r3, r2
  010a4	e5c13001	 strb        r3, [r1, #1]
  010a8	e1a02422	 mov         r2, r2, lsr #8
  010ac	e1a03002	 mov         r3, r2
  010b0	e5c13002	 strb        r3, [r1, #2]
  010b4	e1a03422	 mov         r3, r2, lsr #8
  010b8	e5c13003	 strb        r3, [r1, #3]

; 729  :             break;

  010bc	ea000018	 b           |$LN6@GetPos|
  010c0		 |$LN3@GetPos|
  010c0		 |$LN2@GetPos|

; 730  :         }
; 731  :         // If we don't know avg bytes per sec, fall through to TIME_BYTES
; 732  : 
; 733  :     default:
; 734  :         // Anything else, return TIME_BYTES instead.
; 735  :         pmmt->wType = TIME_BYTES;

  010c0	e59d1018	 ldr         r1, [sp, #0x18]
  010c4	e3a03004	 mov         r3, #4
  010c8	e5c13000	 strb        r3, [r1]
  010cc	e1a02423	 mov         r2, r3, lsr #8
  010d0	e1a03002	 mov         r3, r2
  010d4	e5c13001	 strb        r3, [r1, #1]
  010d8	e1a02422	 mov         r2, r2, lsr #8
  010dc	e1a03002	 mov         r3, r2
  010e0	e5c13002	 strb        r3, [r1, #2]
  010e4	e1a03422	 mov         r3, r2, lsr #8
  010e8	e5c13003	 strb        r3, [r1, #3]
  010ec		 |$LN1@GetPos|

; 736  : 
; 737  :         // Fall through to TIME_BYTES
; 738  :     case TIME_BYTES:
; 739  :         pmmt->u.cb = m_dwByteCount;

  010ec	e59d3014	 ldr         r3, [sp, #0x14]
  010f0	e283204c	 add         r2, r3, #0x4C
  010f4	e59d3018	 ldr         r3, [sp, #0x18]
  010f8	e2831004	 add         r1, r3, #4
  010fc	e5923000	 ldr         r3, [r2]
  01100	e5c13000	 strb        r3, [r1]
  01104	e1a02423	 mov         r2, r3, lsr #8
  01108	e1a03002	 mov         r3, r2
  0110c	e5c13001	 strb        r3, [r1, #1]
  01110	e1a02422	 mov         r2, r2, lsr #8
  01114	e1a03002	 mov         r3, r2
  01118	e5c13002	 strb        r3, [r1, #2]
  0111c	e1a03422	 mov         r3, r2, lsr #8
  01120	e5c13003	 strb        r3, [r1, #3]
  01124		 |$LN6@GetPos|

; 740  :     }
; 741  : 
; 742  :     return MMSYSERR_NOERROR;

  01124	e3a03000	 mov         r3, #0
  01128	e58d3000	 str         r3, [sp]

; 743  : }

  0112c	e59d0000	 ldr         r0, [sp]
  01130	e28dd008	 add         sp, sp, #8
  01134	e89d6010	 ldmia       sp, {r4, sp, lr}
  01138	e12fff1e	 bx          lr
  0113c		 |$M35667|

			 ENDP  ; |?GetPos@StreamContext@@UAAKPAUmmtime_tag@@@Z|, StreamContext::GetPos

	EXPORT	|?Open@WaveStreamContext@@UAAKPAVDeviceContext@@PAUwaveopendesc_tag@@K@Z| ; WaveStreamContext::Open

  000c8			 AREA	 |.pdata|, PDATA
|$T35675| DCD	|$LN16@Open@2|
	DCD	0x40008904
; Function compile flags: /Odtp

  0113c			 AREA	 |.text|, CODE, ARM

  0113c		 |?Open@WaveStreamContext@@UAAKPAVDeviceContext@@PAUwaveopendesc_tag@@K@Z| PROC ; WaveStreamContext::Open

; 746  : {

  0113c		 |$LN16@Open@2|
  0113c	e1a0c00d	 mov         r12, sp
  01140	e92d000f	 stmdb       sp!, {r0 - r3}
  01144	e92d5000	 stmdb       sp!, {r12, lr}
  01148	e24dd014	 sub         sp, sp, #0x14
  0114c		 |$M35672|

; 747  :     DWORD mmRet = MMSYSERR_ERROR;

  0114c	e3a03001	 mov         r3, #1
  01150	e58d3004	 str         r3, [sp, #4]

; 748  : 
; 749  :     WAVEFORMATEX *pwfx = lpWOD->lpFormat;

  01154	e59d3024	 ldr         r3, [sp, #0x24]
  01158	e2831004	 add         r1, r3, #4
  0115c	e1d130d3	 ldrsb       r3, [r1, #3]
  01160	e1a02403	 mov         r2, r3, lsl #8
  01164	e5d13002	 ldrb        r3, [r1, #2]
  01168	e1833002	 orr         r3, r3, r2
  0116c	e1a02403	 mov         r2, r3, lsl #8
  01170	e5d13001	 ldrb        r3, [r1, #1]
  01174	e1833002	 orr         r3, r3, r2
  01178	e1a02403	 mov         r2, r3, lsl #8
  0117c	e5d13000	 ldrb        r3, [r1]
  01180	e1833002	 orr         r3, r3, r2
  01184	e58d3008	 str         r3, [sp, #8]

; 750  : 
; 751  :     if (pwfx->wBitsPerSample == 8)

  01188	e59d3008	 ldr         r3, [sp, #8]
  0118c	e283100e	 add         r1, r3, #0xE
  01190	e5d13001	 ldrb        r3, [r1, #1]
  01194	e1a03403	 mov         r3, r3, lsl #8
  01198	e1a02803	 mov         r2, r3, lsl #16
  0119c	e1a02822	 mov         r2, r2, lsr #16
  011a0	e5d13000	 ldrb        r3, [r1]
  011a4	e1833002	 orr         r3, r3, r2
  011a8	e3530008	 cmp         r3, #8
  011ac	1a00001b	 bne         |$LN11@Open@2|

; 752  :     {
; 753  :         if (pwfx->nChannels == 1)

  011b0	e59d3008	 ldr         r3, [sp, #8]
  011b4	e2831002	 add         r1, r3, #2
  011b8	e5d13001	 ldrb        r3, [r1, #1]
  011bc	e1a03403	 mov         r3, r3, lsl #8
  011c0	e1a02803	 mov         r2, r3, lsl #16
  011c4	e1a02822	 mov         r2, r2, lsr #16
  011c8	e5d13000	 ldrb        r3, [r1]
  011cc	e1833002	 orr         r3, r3, r2
  011d0	e3530001	 cmp         r3, #1
  011d4	1a000008	 bne         |$LN10@Open@2|

; 754  :         {
; 755  :             m_SampleType = PCM_TYPE_M8;

  011d8	e59d301c	 ldr         r3, [sp, #0x1C]
  011dc	e283206c	 add         r2, r3, #0x6C
  011e0	e3a03000	 mov         r3, #0
  011e4	e5823000	 str         r3, [r2]

; 756  :             m_SampleSize = 1;

  011e8	e59d301c	 ldr         r3, [sp, #0x1C]
  011ec	e2832070	 add         r2, r3, #0x70
  011f0	e3a03001	 mov         r3, #1
  011f4	e5823000	 str         r3, [r2]

; 757  :         }
; 758  :         else

  011f8	ea000007	 b           |$LN9@Open@2|
  011fc		 |$LN10@Open@2|

; 759  :         {
; 760  :             m_SampleType = PCM_TYPE_S8;

  011fc	e59d301c	 ldr         r3, [sp, #0x1C]
  01200	e283206c	 add         r2, r3, #0x6C
  01204	e3a03002	 mov         r3, #2
  01208	e5823000	 str         r3, [r2]

; 761  :             m_SampleSize = 2;

  0120c	e59d301c	 ldr         r3, [sp, #0x1C]
  01210	e2832070	 add         r2, r3, #0x70
  01214	e3a03002	 mov         r3, #2
  01218	e5823000	 str         r3, [r2]
  0121c		 |$LN9@Open@2|

; 762  :         }
; 763  :     }
; 764  :     else

  0121c	ea00001a	 b           |$LN8@Open@2|
  01220		 |$LN11@Open@2|

; 765  :     {
; 766  :         if (pwfx->nChannels == 1)

  01220	e59d3008	 ldr         r3, [sp, #8]
  01224	e2831002	 add         r1, r3, #2
  01228	e5d13001	 ldrb        r3, [r1, #1]
  0122c	e1a03403	 mov         r3, r3, lsl #8
  01230	e1a02803	 mov         r2, r3, lsl #16
  01234	e1a02822	 mov         r2, r2, lsr #16
  01238	e5d13000	 ldrb        r3, [r1]
  0123c	e1833002	 orr         r3, r3, r2
  01240	e3530001	 cmp         r3, #1
  01244	1a000008	 bne         |$LN7@Open@2|

; 767  :         {
; 768  :             m_SampleType = PCM_TYPE_M16;

  01248	e59d301c	 ldr         r3, [sp, #0x1C]
  0124c	e283206c	 add         r2, r3, #0x6C
  01250	e3a03001	 mov         r3, #1
  01254	e5823000	 str         r3, [r2]

; 769  :             m_SampleSize = 2;

  01258	e59d301c	 ldr         r3, [sp, #0x1C]
  0125c	e2832070	 add         r2, r3, #0x70
  01260	e3a03002	 mov         r3, #2
  01264	e5823000	 str         r3, [r2]

; 770  :         }
; 771  :         else

  01268	ea000007	 b           |$LN6@Open@2|
  0126c		 |$LN7@Open@2|

; 772  :         {
; 773  :             m_SampleType = PCM_TYPE_S16;

  0126c	e59d301c	 ldr         r3, [sp, #0x1C]
  01270	e283206c	 add         r2, r3, #0x6C
  01274	e3a03003	 mov         r3, #3
  01278	e5823000	 str         r3, [r2]

; 774  :             m_SampleSize = 4;

  0127c	e59d301c	 ldr         r3, [sp, #0x1C]
  01280	e2832070	 add         r2, r3, #0x70
  01284	e3a03004	 mov         r3, #4
  01288	e5823000	 str         r3, [r2]
  0128c		 |$LN6@Open@2|
  0128c		 |$LN8@Open@2|

; 775  :         }
; 776  :     }
; 777  : 
; 778  :     int i;
; 779  :     for (i=0;i<MAXCHANNELS;i++)

  0128c	e3a03000	 mov         r3, #0
  01290	e58d3000	 str         r3, [sp]
  01294	ea000002	 b           |$LN5@Open@2|
  01298		 |$LN4@Open@2|
  01298	e59d3000	 ldr         r3, [sp]
  0129c	e2833001	 add         r3, r3, #1
  012a0	e58d3000	 str         r3, [sp]
  012a4		 |$LN5@Open@2|
  012a4	e59d3000	 ldr         r3, [sp]
  012a8	e3530002	 cmp         r3, #2
  012ac	aa000010	 bge         |$LN3@Open@2|

; 780  :     {
; 781  :         m_PrevSamp[i] = 0;

  012b0	e59d301c	 ldr         r3, [sp, #0x1C]
  012b4	e2831078	 add         r1, r3, #0x78
  012b8	e59d2000	 ldr         r2, [sp]
  012bc	e3a03004	 mov         r3, #4
  012c0	e0030392	 mul         r3, r2, r3
  012c4	e0812003	 add         r2, r1, r3
  012c8	e3a03000	 mov         r3, #0
  012cc	e5823000	 str         r3, [r2]

; 782  :         m_CurrSamp[i] = 0;

  012d0	e59d301c	 ldr         r3, [sp, #0x1C]
  012d4	e2831080	 add         r1, r3, #0x80
  012d8	e59d2000	 ldr         r2, [sp]
  012dc	e3a03004	 mov         r3, #4
  012e0	e0030392	 mul         r3, r2, r3
  012e4	e0812003	 add         r2, r1, r3
  012e8	e3a03000	 mov         r3, #0
  012ec	e5823000	 str         r3, [r2]

; 783  :     }

  012f0	eaffffe8	 b           |$LN4@Open@2|
  012f4		 |$LN3@Open@2|

; 784  : 
; 785  :     mmRet = StreamContext::Open(pDeviceContext,lpWOD,dwFlags);

  012f4	e59d3028	 ldr         r3, [sp, #0x28]
  012f8	e59d2024	 ldr         r2, [sp, #0x24]
  012fc	e59d1020	 ldr         r1, [sp, #0x20]
  01300	e59d001c	 ldr         r0, [sp, #0x1C]
  01304	eb000000	 bl          |?Open@StreamContext@@UAAKPAVDeviceContext@@PAUwaveopendesc_tag@@K@Z|
  01308	e58d0010	 str         r0, [sp, #0x10]
  0130c	e59d3010	 ldr         r3, [sp, #0x10]
  01310	e58d3004	 str         r3, [sp, #4]

; 786  :     if (mmRet != MMSYSERR_NOERROR)

  01314	e59d3004	 ldr         r3, [sp, #4]
  01318	e3530000	 cmp         r3, #0
  0131c	0a000001	 beq         |$LN2@Open@2|
  01320	ea000008	 b           |$LN1@Open@2|

; 787  :     {
; 788  :         goto Exit;

  01324	ea000007	 b           |$Exit$35429|
  01328		 |$LN2@Open@2|

; 789  :     }
; 790  : 
; 791  :     // Set initial sample rate
; 792  :     SetRate(0x10000);

  01328	e3a01801	 mov         r1, #1, 16
  0132c	e59d301c	 ldr         r3, [sp, #0x1C]
  01330	e5933000	 ldr         r3, [r3]
  01334	e283303c	 add         r3, r3, #0x3C
  01338	e59d001c	 ldr         r0, [sp, #0x1C]
  0133c	e5933000	 ldr         r3, [r3]
  01340	e1a0e00f	 mov         lr, pc
  01344	e12fff13	 bx          r3
  01348		 |$LN1@Open@2|
  01348		 |$Exit$35429|

; 793  : 
; 794  : Exit:
; 795  :     return mmRet;

  01348	e59d3004	 ldr         r3, [sp, #4]
  0134c	e58d300c	 str         r3, [sp, #0xC]

; 796  : }

  01350	e59d000c	 ldr         r0, [sp, #0xC]
  01354	e28dd014	 add         sp, sp, #0x14
  01358	e89d6000	 ldmia       sp, {sp, lr}
  0135c	e12fff1e	 bx          lr
  01360		 |$M35673|

			 ENDP  ; |?Open@WaveStreamContext@@UAAKPAVDeviceContext@@PAUwaveopendesc_tag@@K@Z|, WaveStreamContext::Open

	EXPORT	|?GetRate@WaveStreamContext@@QAAKPAK@Z|	; WaveStreamContext::GetRate

  000d0			 AREA	 |.pdata|, PDATA
|$T35681| DCD	|$LN5@GetRate|
	DCD	0x40000f04
; Function compile flags: /Odtp

  01360			 AREA	 |.text|, CODE, ARM

  01360		 |?GetRate@WaveStreamContext@@QAAKPAK@Z| PROC ; WaveStreamContext::GetRate

; 799  : {

  01360		 |$LN5@GetRate|
  01360	e1a0c00d	 mov         r12, sp
  01364	e92d0003	 stmdb       sp!, {r0, r1}
  01368	e92d5000	 stmdb       sp!, {r12, lr}
  0136c	e24dd004	 sub         sp, sp, #4
  01370		 |$M35678|

; 800  :     *pdwMultiplier = m_dwMultiplier;

  01370	e59d300c	 ldr         r3, [sp, #0xC]
  01374	e2833074	 add         r3, r3, #0x74
  01378	e5932000	 ldr         r2, [r3]
  0137c	e59d3010	 ldr         r3, [sp, #0x10]
  01380	e5832000	 str         r2, [r3]

; 801  :     return MMSYSERR_NOERROR;

  01384	e3a03000	 mov         r3, #0
  01388	e58d3000	 str         r3, [sp]

; 802  : }

  0138c	e59d0000	 ldr         r0, [sp]
  01390	e28dd004	 add         sp, sp, #4
  01394	e89d6000	 ldmia       sp, {sp, lr}
  01398	e12fff1e	 bx          lr
  0139c		 |$M35679|

			 ENDP  ; |?GetRate@WaveStreamContext@@QAAKPAK@Z|, WaveStreamContext::GetRate


  000d8			 AREA	 |.pdata|, PDATA
|$T35687| DCD	|$LN6@Run|
	DCD	0x40001f04
; Function compile flags: /Odtp

  0139c			 AREA	 |.text|, CODE, ARM

  0139c		 |?Run@StreamContext@@UAAKXZ| PROC	; StreamContext::Run

; 805  : {

  0139c		 |$LN6@Run|
  0139c	e1a0c00d	 mov         r12, sp
  013a0	e92d0001	 stmdb       sp!, {r0}
  013a4	e92d5000	 stmdb       sp!, {r12, lr}
  013a8	e24dd004	 sub         sp, sp, #4
  013ac		 |$M35684|

; 806  :     m_bRunning=TRUE;

  013ac	e59d300c	 ldr         r3, [sp, #0xC]
  013b0	e2832010	 add         r2, r3, #0x10
  013b4	e3a03001	 mov         r3, #1
  013b8	e5823000	 str         r3, [r2]

; 807  :     if (m_lpCurrData)

  013bc	e59d300c	 ldr         r3, [sp, #0xC]
  013c0	e2833044	 add         r3, r3, #0x44
  013c4	e5933000	 ldr         r3, [r3]
  013c8	e3530000	 cmp         r3, #0
  013cc	0a00000b	 beq         |$LN1@Run|

; 808  :     {
; 809  :         m_pDeviceContext->StreamReadyToRender(this);

  013d0	e59d100c	 ldr         r1, [sp, #0xC]
  013d4	e59d300c	 ldr         r3, [sp, #0xC]
  013d8	e2833050	 add         r3, r3, #0x50
  013dc	e5932000	 ldr         r2, [r3]
  013e0	e59d300c	 ldr         r3, [sp, #0xC]
  013e4	e2833050	 add         r3, r3, #0x50
  013e8	e5930000	 ldr         r0, [r3]
  013ec	e5923000	 ldr         r3, [r2]
  013f0	e2833010	 add         r3, r3, #0x10
  013f4	e5933000	 ldr         r3, [r3]
  013f8	e1a0e00f	 mov         lr, pc
  013fc	e12fff13	 bx          r3
  01400		 |$LN1@Run|

; 810  :     }
; 811  : 
; 812  :     return MMSYSERR_NOERROR;

  01400	e3a03000	 mov         r3, #0
  01404	e58d3000	 str         r3, [sp]

; 813  : }

  01408	e59d0000	 ldr         r0, [sp]
  0140c	e28dd004	 add         sp, sp, #4
  01410	e89d6000	 ldmia       sp, {sp, lr}
  01414	e12fff1e	 bx          lr
  01418		 |$M35685|

			 ENDP  ; |?Run@StreamContext@@UAAKXZ|, StreamContext::Run


  000e0			 AREA	 |.pdata|, PDATA
|$T35693| DCD	|$LN5@Stop|
	DCD	0x40000e04
; Function compile flags: /Odtp

  01418			 AREA	 |.text|, CODE, ARM

  01418		 |?Stop@StreamContext@@UAAKXZ| PROC	; StreamContext::Stop

; 816  : {

  01418		 |$LN5@Stop|
  01418	e1a0c00d	 mov         r12, sp
  0141c	e92d0001	 stmdb       sp!, {r0}
  01420	e92d5000	 stmdb       sp!, {r12, lr}
  01424	e24dd004	 sub         sp, sp, #4
  01428		 |$M35690|

; 817  :     m_bRunning=FALSE;

  01428	e59d300c	 ldr         r3, [sp, #0xC]
  0142c	e2832010	 add         r2, r3, #0x10
  01430	e3a03000	 mov         r3, #0
  01434	e5823000	 str         r3, [r2]

; 818  :     return MMSYSERR_NOERROR;

  01438	e3a03000	 mov         r3, #0
  0143c	e58d3000	 str         r3, [sp]

; 819  : }

  01440	e59d0000	 ldr         r0, [sp]
  01444	e28dd004	 add         sp, sp, #4
  01448	e89d6000	 ldmia       sp, {sp, lr}
  0144c	e12fff1e	 bx          lr
  01450		 |$M35691|

			 ENDP  ; |?Stop@StreamContext@@UAAKXZ|, StreamContext::Stop


  000e8			 AREA	 |.pdata|, PDATA
|$T35699| DCD	|$LN8@Reset|
	DCD	0x40004504
; Function compile flags: /Odtp

  01450			 AREA	 |.text|, CODE, ARM

  01450		 |?Reset@StreamContext@@UAAKXZ| PROC	; StreamContext::Reset

; 822  : {

  01450		 |$LN8@Reset|
  01450	e1a0c00d	 mov         r12, sp
  01454	e92d0001	 stmdb       sp!, {r0}
  01458	e92d5000	 stmdb       sp!, {r12, lr}
  0145c	e24dd008	 sub         sp, sp, #8
  01460		 |$M35696|

; 823  :     AddRef();

  01460	e59d0010	 ldr         r0, [sp, #0x10]
  01464	eb000000	 bl          |?AddRef@StreamContext@@QAAJXZ|

; 824  : 
; 825  :     // Stop stream for now.
; 826  :     Stop();

  01468	e59d3010	 ldr         r3, [sp, #0x10]
  0146c	e5933000	 ldr         r3, [r3]
  01470	e2833014	 add         r3, r3, #0x14
  01474	e59d0010	 ldr         r0, [sp, #0x10]
  01478	e5933000	 ldr         r3, [r3]
  0147c	e1a0e00f	 mov         lr, pc
  01480	e12fff13	 bx          r3

; 827  : 
; 828  :     m_lpWaveHdrCurrent  = NULL;

  01484	e59d3010	 ldr         r3, [sp, #0x10]
  01488	e283203c	 add         r2, r3, #0x3C
  0148c	e3a03000	 mov         r3, #0
  01490	e5823000	 str         r3, [r2]

; 829  :     m_lpCurrData       = NULL;

  01494	e59d3010	 ldr         r3, [sp, #0x10]
  01498	e2832044	 add         r2, r3, #0x44
  0149c	e3a03000	 mov         r3, #0
  014a0	e5823000	 str         r3, [r2]

; 830  :     m_lpCurrDataEnd    = NULL;

  014a4	e59d3010	 ldr         r3, [sp, #0x10]
  014a8	e2832048	 add         r2, r3, #0x48
  014ac	e3a03000	 mov         r3, #0
  014b0	e5823000	 str         r3, [r2]

; 831  :     m_dwByteCount      = 0;

  014b4	e59d3010	 ldr         r3, [sp, #0x10]
  014b8	e283204c	 add         r2, r3, #0x4C
  014bc	e3a03000	 mov         r3, #0
  014c0	e5823000	 str         r3, [r2]

; 832  :     m_dwLoopCount      = 0;

  014c4	e59d3010	 ldr         r3, [sp, #0x10]
  014c8	e2832054	 add         r2, r3, #0x54
  014cc	e3a03000	 mov         r3, #0
  014d0	e5823000	 str         r3, [r2]
  014d4		 |$LN3@Reset|

; 833  : 
; 834  :     LPWAVEHDR lpHdr;
; 835  :     while (m_lpWaveHdrHead)

  014d4	e59d3010	 ldr         r3, [sp, #0x10]
  014d8	e2833038	 add         r3, r3, #0x38
  014dc	e5933000	 ldr         r3, [r3]
  014e0	e3530000	 cmp         r3, #0
  014e4	0a000016	 beq         |$LN2@Reset|

; 836  :     {
; 837  :         lpHdr = m_lpWaveHdrHead;

  014e8	e59d3010	 ldr         r3, [sp, #0x10]
  014ec	e2833038	 add         r3, r3, #0x38
  014f0	e5933000	 ldr         r3, [r3]
  014f4	e58d3000	 str         r3, [sp]

; 838  :         m_lpWaveHdrHead = lpHdr->lpNext;

  014f8	e59d3000	 ldr         r3, [sp]
  014fc	e2831018	 add         r1, r3, #0x18
  01500	e59d3010	 ldr         r3, [sp, #0x10]
  01504	e2832038	 add         r2, r3, #0x38
  01508	e5913000	 ldr         r3, [r1]
  0150c	e5823000	 str         r3, [r2]

; 839  :         if (m_lpWaveHdrHead==NULL)

  01510	e59d3010	 ldr         r3, [sp, #0x10]
  01514	e2833038	 add         r3, r3, #0x38
  01518	e5933000	 ldr         r3, [r3]
  0151c	e3530000	 cmp         r3, #0
  01520	1a000003	 bne         |$LN1@Reset|

; 840  :         {
; 841  :             m_lpWaveHdrTail=NULL;

  01524	e59d3010	 ldr         r3, [sp, #0x10]
  01528	e2832040	 add         r2, r3, #0x40
  0152c	e3a03000	 mov         r3, #0
  01530	e5823000	 str         r3, [r2]
  01534		 |$LN1@Reset|

; 842  :         }
; 843  :         ReturnBuffer(lpHdr);

  01534	e59d1000	 ldr         r1, [sp]
  01538	e59d0010	 ldr         r0, [sp, #0x10]
  0153c	eb000000	 bl          |?ReturnBuffer@StreamContext@@QAAXPAUwavehdr_tag@@@Z|

; 844  :     }

  01540	eaffffe3	 b           |$LN3@Reset|
  01544		 |$LN2@Reset|

; 845  : 
; 846  :     Release();

  01544	e59d0010	 ldr         r0, [sp, #0x10]
  01548	eb000000	 bl          |?Release@StreamContext@@QAAJXZ|

; 847  : 
; 848  :     return MMSYSERR_NOERROR;

  0154c	e3a03000	 mov         r3, #0
  01550	e58d3004	 str         r3, [sp, #4]

; 849  : }

  01554	e59d0004	 ldr         r0, [sp, #4]
  01558	e28dd008	 add         sp, sp, #8
  0155c	e89d6000	 ldmia       sp, {sp, lr}
  01560	e12fff1e	 bx          lr
  01564		 |$M35697|

			 ENDP  ; |?Reset@StreamContext@@UAAKXZ|, StreamContext::Reset

	IMPORT	|?ForceSpeaker@HardwareContext@@QAAKH@Z| ; HardwareContext::ForceSpeaker
	IMPORT	|?g_pHWContext@@3PAVHardwareContext@@A|	; g_pHWContext

  000f0			 AREA	 |.pdata|, PDATA
|$T35707| DCD	|$LN8@ForceSpeak|
	DCD	0x40002704
; Function compile flags: /Odtp

  01564			 AREA	 |.text|, CODE, ARM

  01564		 |?ForceSpeaker@StreamContext@@QAAKH@Z| PROC ; StreamContext::ForceSpeaker

; 859  : {

  01564		 |$LN8@ForceSpeak|
  01564	e1a0c00d	 mov         r12, sp
  01568	e92d0003	 stmdb       sp!, {r0, r1}
  0156c	e92d5000	 stmdb       sp!, {r12, lr}
  01570	e24dd00c	 sub         sp, sp, #0xC
  01574		 |$M35704|

; 860  :     // Normalize to 0 or 1
; 861  :     bForceSpeaker = (bForceSpeaker!=0);

  01574	e59d3018	 ldr         r3, [sp, #0x18]
  01578	e3530000	 cmp         r3, #0
  0157c	0a000002	 beq         |$LN4@ForceSpeak|
  01580	e3a03001	 mov         r3, #1
  01584	e58d3004	 str         r3, [sp, #4]
  01588	ea000001	 b           |$LN5@ForceSpeak|
  0158c		 |$LN4@ForceSpeak|
  0158c	e3a03000	 mov         r3, #0
  01590	e58d3004	 str         r3, [sp, #4]
  01594		 |$LN5@ForceSpeak|
  01594	e59d3004	 ldr         r3, [sp, #4]
  01598	e58d3018	 str         r3, [sp, #0x18]

; 862  :     if (bForceSpeaker==m_bForceSpeaker)

  0159c	e59d3014	 ldr         r3, [sp, #0x14]
  015a0	e2833068	 add         r3, r3, #0x68
  015a4	e59d2018	 ldr         r2, [sp, #0x18]
  015a8	e5933000	 ldr         r3, [r3]
  015ac	e1520003	 cmp         r2, r3
  015b0	1a000002	 bne         |$LN1@ForceSpeak|

; 863  :     {
; 864  :         return MMSYSERR_NOERROR;

  015b4	e3a03000	 mov         r3, #0
  015b8	e58d3000	 str         r3, [sp]
  015bc	ea00000a	 b           |$LN2@ForceSpeak|
  015c0		 |$LN1@ForceSpeak|

; 865  :     }
; 866  :     m_bForceSpeaker = bForceSpeaker;

  015c0	e59d3014	 ldr         r3, [sp, #0x14]
  015c4	e2832068	 add         r2, r3, #0x68
  015c8	e59d3018	 ldr         r3, [sp, #0x18]
  015cc	e5823000	 str         r3, [r2]

; 867  :     return g_pHWContext->ForceSpeaker(bForceSpeaker);

  015d0	e59d1018	 ldr         r1, [sp, #0x18]
  015d4	e59f3020	 ldr         r3, [pc, #0x20]
  015d8	e5930000	 ldr         r0, [r3]
  015dc	eb000000	 bl          |?ForceSpeaker@HardwareContext@@QAAKH@Z|
  015e0	e58d0008	 str         r0, [sp, #8]
  015e4	e59d3008	 ldr         r3, [sp, #8]
  015e8	e58d3000	 str         r3, [sp]
  015ec		 |$LN2@ForceSpeak|

; 868  : }

  015ec	e59d0000	 ldr         r0, [sp]
  015f0	e28dd00c	 add         sp, sp, #0xC
  015f4	e89d6000	 ldmia       sp, {sp, lr}
  015f8	e12fff1e	 bx          lr
  015fc		 |$LN9@ForceSpeak|
  015fc		 |$LN10@ForceSpeak|
  015fc	00000000	 DCD         |?g_pHWContext@@3PAVHardwareContext@@A|
  01600		 |$M35705|

			 ENDP  ; |?ForceSpeaker@StreamContext@@QAAKH@Z|, StreamContext::ForceSpeaker

	EXPORT	|?SetRate@WaveStreamContext@@UAAKK@Z|	; WaveStreamContext::SetRate
	IMPORT	|__rt_sdiv64by64|

  000f8			 AREA	 |.pdata|, PDATA
|$T35716| DCD	|$LN5@SetRate|
	DCD	0x40004604
; Function compile flags: /Odtp

  01600			 AREA	 |.text|, CODE, ARM

  01600		 |?SetRate@WaveStreamContext@@UAAKK@Z| PROC ; WaveStreamContext::SetRate

; 871  : {

  01600		 |$LN5@SetRate|
  01600	e1a0c00d	 mov         r12, sp
  01604	e92d0003	 stmdb       sp!, {r0, r1}
  01608	e92d5000	 stmdb       sp!, {r12, lr}
  0160c	e24dd018	 sub         sp, sp, #0x18
  01610		 |$M35713|

; 872  :     m_dwMultiplier = dwMultiplier;

  01610	e59d3020	 ldr         r3, [sp, #0x20]
  01614	e2832074	 add         r2, r3, #0x74
  01618	e59d3024	 ldr         r3, [sp, #0x24]
  0161c	e5823000	 str         r3, [r2]

; 873  : 
; 874  :     UINT64 ClientRate;
; 875  : 
; 876  :     // Init with sample rate of source data
; 877  :     ClientRate = m_WaveFormat.nSamplesPerSec;

  01620	e59d3020	 ldr         r3, [sp, #0x20]
  01624	e2831028	 add         r1, r3, #0x28
  01628	e5d13003	 ldrb        r3, [r1, #3]
  0162c	e1a02403	 mov         r2, r3, lsl #8
  01630	e5d13002	 ldrb        r3, [r1, #2]
  01634	e1833002	 orr         r3, r3, r2
  01638	e1a02403	 mov         r2, r3, lsl #8
  0163c	e5d13001	 ldrb        r3, [r1, #1]
  01640	e1833002	 orr         r3, r3, r2
  01644	e1a02403	 mov         r2, r3, lsl #8
  01648	e5d13000	 ldrb        r3, [r1]
  0164c	e1833002	 orr         r3, r3, r2
  01650	e58d3000	 str         r3, [sp]
  01654	e3a03000	 mov         r3, #0
  01658	e58d3004	 str         r3, [sp, #4]

; 878  : 
; 879  :     // Multiply by 16.16 rate multiplier.
; 880  :     ClientRate *= m_dwMultiplier;

  0165c	e59d3020	 ldr         r3, [sp, #0x20]
  01660	e2833074	 add         r3, r3, #0x74
  01664	e5931000	 ldr         r1, [r3]
  01668	e59d3000	 ldr         r3, [sp]
  0166c	e59d2004	 ldr         r2, [sp, #4]
  01670	e58d300c	 str         r3, [sp, #0xC]
  01674	e58d1010	 str         r1, [sp, #0x10]
  01678	e59d3010	 ldr         r3, [sp, #0x10]
  0167c	e0000392	 mul         r0, r2, r3
  01680	e59d100c	 ldr         r1, [sp, #0xC]
  01684	e59d3010	 ldr         r3, [sp, #0x10]
  01688	e0832391	 umull       r2, r3, r1, r3
  0168c	e0803003	 add         r3, r0, r3
  01690	e58d2000	 str         r2, [sp]
  01694	e58d3004	 str         r3, [sp, #4]

; 881  : 
; 882  :     // Now shift up to 32.32 to maintain accuracy for the coming divide
; 883  :     // Result is 48.16 resulting sample rate of source data.
; 884  :     ClientRate >>= 16;

  01698	e59d2000	 ldr         r2, [sp]
  0169c	e59d3004	 ldr         r3, [sp, #4]
  016a0	e58d3014	 str         r3, [sp, #0x14]
  016a4	e1a02822	 mov         r2, r2, lsr #16
  016a8	e59d3014	 ldr         r3, [sp, #0x14]
  016ac	e1a03803	 mov         r3, r3, lsl #16
  016b0	e1832002	 orr         r2, r3, r2
  016b4	e59d3014	 ldr         r3, [sp, #0x14]
  016b8	e1a03823	 mov         r3, r3, lsr #16
  016bc	e58d2000	 str         r2, [sp]
  016c0	e58d3004	 str         r3, [sp, #4]

; 885  : 
; 886  :     m_ClientRate = (DWORD)ClientRate;

  016c4	e59d2000	 ldr         r2, [sp]
  016c8	e59d3020	 ldr         r3, [sp, #0x20]
  016cc	e283308c	 add         r3, r3, #0x8C
  016d0	e5832000	 str         r2, [r3]

; 887  : 
; 888  :     m_ClientRateInv = ((UINT32)(((1i64<<32)/m_ClientRate)));

  016d4	e59d3020	 ldr         r3, [sp, #0x20]
  016d8	e283308c	 add         r3, r3, #0x8C
  016dc	e5932000	 ldr         r2, [r3]
  016e0	e3a00000	 mov         r0, #0
  016e4	e3a01001	 mov         r1, #1
  016e8	e3a03000	 mov         r3, #0
  016ec	eb000000	 bl          __rt_sdiv64by64
  016f0	e1a02000	 mov         r2, r0
  016f4	e59d3020	 ldr         r3, [sp, #0x20]
  016f8	e2833090	 add         r3, r3, #0x90
  016fc	e5832000	 str         r2, [r3]

; 889  : 
; 890  :     return MMSYSERR_NOERROR;

  01700	e3a03000	 mov         r3, #0
  01704	e58d3008	 str         r3, [sp, #8]

; 891  : }

  01708	e59d0008	 ldr         r0, [sp, #8]
  0170c	e28dd018	 add         sp, sp, #0x18
  01710	e89d6000	 ldmia       sp, {sp, lr}
  01714	e12fff1e	 bx          lr
  01718		 |$M35714|

			 ENDP  ; |?SetRate@WaveStreamContext@@UAAKK@Z|, WaveStreamContext::SetRate

	EXPORT	|??_C@_1GI@EBFCCJC@?$AAE?$AAX?$AAC?$AAE?$AAP?$AAT?$AAI?$AAO?$AAN?$AA?5?$AAI?$AAN?$AA?5?$AAI?$AAS?$AAT?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAs?$AAt?$AAr?$AAe?$AAa?$AAm?$AA?5?$AA0?$AAx?$AA?$CF?$AAx@| [ DATA ] ; `string'
	EXPORT	|?Render@WaveStreamContext@@UAAPAEPAE00PAUTRANSFER_STATUS@@@Z| ; WaveStreamContext::Render
	IMPORT	|NKDbgPrintfW|
	IMPORT	|__C_specific_handler|

  00100			 AREA	 |.pdata|, PDATA
|$T35736| DCD	|$LN24@Render|
	DCD	0xc0005105
|$T35738| DCD	|$LN14@Render|
	DCD	0x40000602

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GI@EBFCCJC@?$AAE?$AAX?$AAC?$AAE?$AAP?$AAT?$AAI?$AAO?$AAN?$AA?5?$AAI?$AAN?$AA?5?$AAI?$AAS?$AAT?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAs?$AAt?$AAr?$AAe?$AAa?$AAm?$AA?5?$AA0?$AAx?$AA?$CF?$AAx@| DCB "E"
	DCB	0x0, "X", 0x0, "C", 0x0, "E", 0x0, "P", 0x0, "T", 0x0, "I"
	DCB	0x0, "O", 0x0, "N", 0x0, " ", 0x0, "I", 0x0, "N", 0x0, " "
	DCB	0x0, "I", 0x0, "S", 0x0, "T", 0x0, " ", 0x0, "f", 0x0, "o"
	DCB	0x0, "r", 0x0, " ", 0x0, "s", 0x0, "t", 0x0, "r", 0x0, "e"
	DCB	0x0, "a", 0x0, "m", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "x", 0x0, ",", 0x0, " ", 0x0, "b", 0x0, "u", 0x0, "f"
	DCB	0x0, "f", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "x", 0x0, "!", 0x0, "!", 0x0, "!", 0x0, "!"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.xdata|, DATA
|$T35734| DCD	0x1
	DCD	|$LN18@Render|
	DCD	|$LN19@Render|
	DCD	|$LN14@Render|
	DCD	|$LN15@Render|
; Function compile flags: /Odtp

  01718			 AREA	 |.text|, CODE, ARM

  01718	00000000	 DCD         |__C_specific_handler|
  0171c	00000000	 DCD         |$T35734|

  01720		 |?Render@WaveStreamContext@@UAAPAEPAE00PAUTRANSFER_STATUS@@@Z| PROC ; WaveStreamContext::Render

; 897  : {

  01720		 |$LN24@Render|
  01720	e1a0c00d	 mov         r12, sp
  01724	e92d000f	 stmdb       sp!, {r0 - r3}
  01728	e92d5810	 stmdb       sp!, {r4, r11, r12, lr}
  0172c	e28db010	 add         r11, sp, #0x10
  01730	e24dd018	 sub         sp, sp, #0x18
  01734		 |$LN22@Render|

; 898  :     if (!m_bRunning || !m_lpCurrData)

  01734	e59b3000	 ldr         r3, [r11]
  01738	e2833010	 add         r3, r3, #0x10
  0173c	e5933000	 ldr         r3, [r3]
  01740	e3530000	 cmp         r3, #0
  01744	0a000004	 beq         |$LN7@Render|
  01748	e59b3000	 ldr         r3, [r11]
  0174c	e2833044	 add         r3, r3, #0x44
  01750	e5933000	 ldr         r3, [r3]
  01754	e3530000	 cmp         r3, #0
  01758	1a000002	 bne         |$LN8@Render|
  0175c		 |$LN7@Render|

; 899  :     {
; 900  :         return pBuffer;

  0175c	e59b3004	 ldr         r3, [r11, #4]
  01760	e50b3024	 str         r3, [r11, #-0x24]
  01764	ea00003a	 b           |$LN9@Render|
  01768		 |$LN8@Render|
  01768		 |$LN6@Render|

; 901  :     }
; 902  : 
; 903  :     while (pBuffer < pBufferEnd)

  01768	e59b2004	 ldr         r2, [r11, #4]
  0176c	e59b3008	 ldr         r3, [r11, #8]
  01770	e1520003	 cmp         r2, r3
  01774	2a000034	 bcs         |$LN5@Render|
  01778		 |$LN4@Render|

; 904  :     {
; 905  :         while (m_lpCurrData>=m_lpCurrDataEnd)

  01778	e59b3000	 ldr         r3, [r11]
  0177c	e2832044	 add         r2, r3, #0x44
  01780	e59b3000	 ldr         r3, [r11]
  01784	e2833048	 add         r3, r3, #0x48
  01788	e5922000	 ldr         r2, [r2]
  0178c	e5933000	 ldr         r3, [r3]
  01790	e1520003	 cmp         r2, r3
  01794	3a000009	 bcc         |$LN3@Render|

; 906  :         {
; 907  :             if (!GetNextBuffer())

  01798	e59b0000	 ldr         r0, [r11]
  0179c	eb000000	 bl          |?GetNextBuffer@StreamContext@@QAAPAEXZ|
  017a0	e50b001c	 str         r0, [r11, #-0x1C]
  017a4	e51b301c	 ldr         r3, [r11, #-0x1C]
  017a8	e3530000	 cmp         r3, #0
  017ac	1a000002	 bne         |$LN2@Render|

; 908  :             {
; 909  :                 return pBuffer;

  017b0	e59b3004	 ldr         r3, [r11, #4]
  017b4	e50b3024	 str         r3, [r11, #-0x24]
  017b8	ea000025	 b           |$LN9@Render|
  017bc		 |$LN2@Render|

; 910  :             }
; 911  :         }

  017bc	eaffffed	 b           |$LN4@Render|
  017c0		 |$LN3@Render|
  017c0		 |$LN18@Render|

; 912  : 
; 913  :         _try
; 914  :         {
; 915  : 
; 916  :             pBuffer = Render2(pBuffer, pBufferEnd, pBufferLast, pTransferStatus);

  017c0	e59b3010	 ldr         r3, [r11, #0x10]
  017c4	e58d3000	 str         r3, [sp]
  017c8	e59b300c	 ldr         r3, [r11, #0xC]
  017cc	e59b2008	 ldr         r2, [r11, #8]
  017d0	e59b1004	 ldr         r1, [r11, #4]
  017d4	e59b0000	 ldr         r0, [r11]
  017d8	e5900000	 ldr         r0, [r0]
  017dc	e280e040	 add         lr, r0, #0x40
  017e0	e59b0000	 ldr         r0, [r11]
  017e4	e59e4000	 ldr         r4, [lr]
  017e8	e1a0e00f	 mov         lr, pc
  017ec	e12fff14	 bx          r4
  017f0	e50b0018	 str         r0, [r11, #-0x18]
  017f4	e51b3018	 ldr         r3, [r11, #-0x18]
  017f8	e58b3004	 str         r3, [r11, #4]
  017fc		 |$LN19@Render|

; 917  :         }

  017fc	ea000011	 b           |$LN20@Render|
  01800		 |$LN15@Render|

; 919  :         {
; 920  :             RETAILMSG(1, (TEXT("EXCEPTION IN IST for stream 0x%x, buffer 0x%x!!!!\r\n"), this, m_lpCurrData));

  01800	e59b3000	 ldr         r3, [r11]
  01804	e2833044	 add         r3, r3, #0x44
  01808	e5932000	 ldr         r2, [r3]
  0180c	e59b1000	 ldr         r1, [r11]
  01810	e59f0060	 ldr         r0, [pc, #0x60]
  01814	eb000000	 bl          NKDbgPrintfW
  01818	e3a03001	 mov         r3, #1
  0181c	e50b3014	 str         r3, [r11, #-0x14]
  01820	ea000001	 b           |$LN12@Render|
  01824	e3a03000	 mov         r3, #0
  01828	e50b3014	 str         r3, [r11, #-0x14]
  0182c		 |$LN12@Render|

; 921  :             m_lpCurrData=m_lpCurrDataEnd; // Pretend we finished reading the application buffer

  0182c	e59b3000	 ldr         r3, [r11]
  01830	e2831048	 add         r1, r3, #0x48
  01834	e59b3000	 ldr         r3, [r11]
  01838	e2832044	 add         r2, r3, #0x44
  0183c	e5913000	 ldr         r3, [r1]
  01840	e5823000	 str         r3, [r2]
  01844	eaffffff	 b           |$LN20@Render|
  01848		 |$LN20@Render|

; 922  :         }
; 923  :     }

  01848	eaffffc6	 b           |$LN6@Render|
  0184c		 |$LN5@Render|

; 924  : 
; 925  :     return pBuffer;

  0184c	e59b3004	 ldr         r3, [r11, #4]
  01850	e50b3024	 str         r3, [r11, #-0x24]
  01854		 |$LN9@Render|
  01854		 |$LN13@Render|

; 926  : }

  01854	e51b0024	 ldr         r0, [r11, #-0x24]
  01858	e24bd010	 sub         sp, r11, #0x10
  0185c	e89d6810	 ldmia       sp, {r4, r11, sp, lr}
  01860	e12fff1e	 bx          lr

			 ENDP  ; |?Render@WaveStreamContext@@UAAPAEPAE00PAUTRANSFER_STATUS@@@Z|, WaveStreamContext::Render

  01864		 |$LN14@Render|
  01864		 |$LN23@Render|

; 918  :         _except (EXCEPTION_EXECUTE_HANDLER)

  01864	e52de004	 str         lr, [sp, #-4]!
  01868	e24dd004	 sub         sp, sp, #4
  0186c		 |$LN17@Render|
  0186c		 |$LN26@Render|
  0186c	e3a00001	 mov         r0, #1
  01870		 |$LN16@Render|
  01870	e28dd004	 add         sp, sp, #4
  01874	e49df004	 ldr         pc, [sp], #4
  01878		 |$LN28@Render|
  01878		 |$LN29@Render|
  01878	00000000	 DCD         |??_C@_1GI@EBFCCJC@?$AAE?$AAX?$AAC?$AAE?$AAP?$AAT?$AAI?$AAO?$AAN?$AA?5?$AAI?$AAN?$AA?5?$AAI?$AAS?$AAT?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAs?$AAt?$AAr?$AAe?$AAa?$AAm?$AA?5?$AA0?$AAx?$AA?$CF?$AAx@|
  0187c		 |$LN27@Render|
  0187c		 |$LN25@Render|
	EXPORT	|?ClearBuffer@StreamContext@@SAXPAE0@Z|	; StreamContext::ClearBuffer
	IMPORT	|memset|

  00110			 AREA	 |.pdata|, PDATA
|$T35747| DCD	|$LN5@ClearBuffe|
	DCD	0x40000b03
; Function compile flags: /Odtp

  0187c			 AREA	 |.text|, CODE, ARM

  0187c		 |?ClearBuffer@StreamContext@@SAXPAE0@Z| PROC ; StreamContext::ClearBuffer

; 929  : {

  0187c		 |$LN5@ClearBuffe|
  0187c	e1a0c00d	 mov         r12, sp
  01880	e92d0003	 stmdb       sp!, {r0, r1}
  01884	e92d5000	 stmdb       sp!, {r12, lr}
  01888		 |$M35744|

; 930  :     memset(pStart,0,pEnd-pStart);

  01888	e59d200c	 ldr         r2, [sp, #0xC]
  0188c	e59d3008	 ldr         r3, [sp, #8]
  01890	e0422003	 sub         r2, r2, r3
  01894	e3a01000	 mov         r1, #0
  01898	e59d0008	 ldr         r0, [sp, #8]
  0189c	eb000000	 bl          memset

; 931  : }

  018a0	e89d6000	 ldmia       sp, {sp, lr}
  018a4	e12fff1e	 bx          lr
  018a8		 |$M35745|

			 ENDP  ; |?ClearBuffer@StreamContext@@SAXPAE0@Z|, StreamContext::ClearBuffer

	EXPORT	|?GetProperty@StreamContext@@QAAKPAUtag_WAVEPROPINFO@@@Z| ; StreamContext::GetProperty
	IMPORT	|?GetProperty@DeviceContext@@QAAKPAUtag_WAVEPROPINFO@@@Z| ; DeviceContext::GetProperty

  00118			 AREA	 |.pdata|, PDATA
|$T35753| DCD	|$LN5@GetPropert|
	DCD	0x40001004
; Function compile flags: /Odtp

  018a8			 AREA	 |.text|, CODE, ARM

  018a8		 |?GetProperty@StreamContext@@QAAKPAUtag_WAVEPROPINFO@@@Z| PROC ; StreamContext::GetProperty

; 934  : {

  018a8		 |$LN5@GetPropert|
  018a8	e1a0c00d	 mov         r12, sp
  018ac	e92d0003	 stmdb       sp!, {r0, r1}
  018b0	e92d5000	 stmdb       sp!, {r12, lr}
  018b4	e24dd008	 sub         sp, sp, #8
  018b8		 |$M35750|

; 935  :     // For anything we don't recognize, pass it on to the device context.
; 936  :     return m_pDeviceContext->GetProperty(pPropInfo);

  018b8	e59d1014	 ldr         r1, [sp, #0x14]
  018bc	e59d3010	 ldr         r3, [sp, #0x10]
  018c0	e2833050	 add         r3, r3, #0x50
  018c4	e5930000	 ldr         r0, [r3]
  018c8	eb000000	 bl          |?GetProperty@DeviceContext@@QAAKPAUtag_WAVEPROPINFO@@@Z|
  018cc	e58d0004	 str         r0, [sp, #4]
  018d0	e59d3004	 ldr         r3, [sp, #4]
  018d4	e58d3000	 str         r3, [sp]

; 937  : }

  018d8	e59d0000	 ldr         r0, [sp]
  018dc	e28dd008	 add         sp, sp, #8
  018e0	e89d6000	 ldmia       sp, {sp, lr}
  018e4	e12fff1e	 bx          lr
  018e8		 |$M35751|

			 ENDP  ; |?GetProperty@StreamContext@@QAAKPAUtag_WAVEPROPINFO@@@Z|, StreamContext::GetProperty

	EXPORT	|?SetProperty@StreamContext@@QAAKPAUtag_WAVEPROPINFO@@@Z| ; StreamContext::SetProperty
	IMPORT	|?SetProperty@DeviceContext@@QAAKPAUtag_WAVEPROPINFO@@@Z| ; DeviceContext::SetProperty

  00120			 AREA	 |.pdata|, PDATA
|$T35759| DCD	|$LN5@SetPropert|
	DCD	0x40001004
; Function compile flags: /Odtp

  018e8			 AREA	 |.text|, CODE, ARM

  018e8		 |?SetProperty@StreamContext@@QAAKPAUtag_WAVEPROPINFO@@@Z| PROC ; StreamContext::SetProperty

; 940  : {

  018e8		 |$LN5@SetPropert|
  018e8	e1a0c00d	 mov         r12, sp
  018ec	e92d0003	 stmdb       sp!, {r0, r1}
  018f0	e92d5000	 stmdb       sp!, {r12, lr}
  018f4	e24dd008	 sub         sp, sp, #8
  018f8		 |$M35756|

; 941  :     // For anything we don't recognize, pass it on to the device context.
; 942  :     return m_pDeviceContext->SetProperty(pPropInfo);

  018f8	e59d1014	 ldr         r1, [sp, #0x14]
  018fc	e59d3010	 ldr         r3, [sp, #0x10]
  01900	e2833050	 add         r3, r3, #0x50
  01904	e5930000	 ldr         r0, [r3]
  01908	eb000000	 bl          |?SetProperty@DeviceContext@@QAAKPAUtag_WAVEPROPINFO@@@Z|
  0190c	e58d0004	 str         r0, [sp, #4]
  01910	e59d3004	 ldr         r3, [sp, #4]
  01914	e58d3000	 str         r3, [sp]

; 943  : }

  01918	e59d0000	 ldr         r0, [sp]
  0191c	e28dd008	 add         sp, sp, #8
  01920	e89d6000	 ldmia       sp, {sp, lr}
  01924	e12fff1e	 bx          lr
  01928		 |$M35757|

			 ENDP  ; |?SetProperty@StreamContext@@QAAKPAUtag_WAVEPROPINFO@@@Z|, StreamContext::SetProperty

	END
