; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\BOOT\CPGMAC\cpgmac.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.data|, DATA
	 COMMON	|dmaBuffer|, 0x4

	 COMMON	|emac_rx_desc|, 0x4

	 COMMON	|startOfCPPIArea|, 0x4

	 COMMON	|active_phy_addr|, 0x1

	 COMMON	|emac_tx_desc|, 0x4


  00000			 AREA	 |.bss|, NOINIT
|emac_rx_active_head| % 0x4
|emac_rx_active_tail| % 0x4

  00000			 AREA	 |.data|, DATA
|?emac_rx_queue_active@?1??EMACGetFrame@@9@9| DCD 0x1	; `EMACGetFrame'::`2'::emac_rx_queue_active

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|EMACEnableInts|

  00008			 AREA	 |.bss|, NOINIT
|g_pEmacSys| %	0x4

  00000			 AREA	 |.pdata|, PDATA
|$T43680| DCD	|$LN5@EMACEnable|
	DCD	0x40000700
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\boot\cpgmac\cpgmac.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |EMACEnableInts| PROC

; 42   : {

  00000		 |$LN5@EMACEnable|
  00000		 |$M43677|

; 43   :     g_pEmacSys->C0RXEN = 0x01;

  00000	e59f3010	 ldr         r3, [pc, #0x10]
  00004	e5933000	 ldr         r3, [r3]
  00008	e2832014	 add         r2, r3, #0x14
  0000c	e3a03001	 mov         r3, #1
  00010	e5823000	 str         r3, [r2]

; 44   : }

  00014	e12fff1e	 bx          lr
  00018		 |$LN6@EMACEnable|
  00018		 |$LN7@EMACEnable|
  00018	00000000	 DCD         |g_pEmacSys|
  0001c		 |$M43678|

			 ENDP  ; |EMACEnableInts|

	EXPORT	|EMACDisableInts|

  00008			 AREA	 |.pdata|, PDATA
|$T43687| DCD	|$LN5@EMACDisabl|
	DCD	0x40001600
; Function compile flags: /Odtp

  0001c			 AREA	 |.text|, CODE, ARM

  0001c		 |EMACDisableInts| PROC

; 47   : {

  0001c		 |$LN5@EMACDisabl|
  0001c		 |$M43684|

; 48   :     g_pEmacSys->C0RXTHRESHEN = 0x0;

  0001c	e59f304c	 ldr         r3, [pc, #0x4C]
  00020	e5933000	 ldr         r3, [r3]
  00024	e2832010	 add         r2, r3, #0x10
  00028	e3a03000	 mov         r3, #0
  0002c	e5823000	 str         r3, [r2]

; 49   :     g_pEmacSys->C0RXEN = 0x0;

  00030	e59f3038	 ldr         r3, [pc, #0x38]
  00034	e5933000	 ldr         r3, [r3]
  00038	e2832014	 add         r2, r3, #0x14
  0003c	e3a03000	 mov         r3, #0
  00040	e5823000	 str         r3, [r2]

; 50   :     g_pEmacSys->C0TXEN = 0x0;

  00044	e59f3024	 ldr         r3, [pc, #0x24]
  00048	e5933000	 ldr         r3, [r3]
  0004c	e2832018	 add         r2, r3, #0x18
  00050	e3a03000	 mov         r3, #0
  00054	e5823000	 str         r3, [r2]

; 51   :     g_pEmacSys->C0MISCEN = 0x0;

  00058	e59f3010	 ldr         r3, [pc, #0x10]
  0005c	e5933000	 ldr         r3, [r3]
  00060	e283201c	 add         r2, r3, #0x1C
  00064	e3a03000	 mov         r3, #0
  00068	e5823000	 str         r3, [r2]

; 52   : }

  0006c	e12fff1e	 bx          lr
  00070		 |$LN6@EMACDisabl|
  00070		 |$LN7@EMACDisabl|
  00070	00000000	 DCD         |g_pEmacSys|
  00074		 |$M43685|

			 ENDP  ; |EMACDisableInts|

	EXPORT	|EMACMulticastList|

  00010			 AREA	 |.pdata|, PDATA
|$T43695| DCD	|$LN5@EMACMultic|
	DCD	0x40000a04
; Function compile flags: /Odtp

  00074			 AREA	 |.text|, CODE, ARM

  00074		 |EMACMulticastList| PROC

; 55   : {

  00074		 |$LN5@EMACMultic|
  00074	e1a0c00d	 mov         r12, sp
  00078	e92d0003	 stmdb       sp!, {r0, r1}
  0007c	e92d5000	 stmdb       sp!, {r12, lr}
  00080	e24dd004	 sub         sp, sp, #4
  00084		 |$M43692|

; 56   :     // Not supported	 
; 57   :     UNREFERENCED_PARAMETER(pAddresses);
; 58   :     UNREFERENCED_PARAMETER(count);
; 59   :     return FALSE;

  00084	e3a03000	 mov         r3, #0
  00088	e58d3000	 str         r3, [sp]

; 60   : }

  0008c	e59d0000	 ldr         r0, [sp]
  00090	e28dd004	 add         sp, sp, #4
  00094	e89d6000	 ldmia       sp, {sp, lr}
  00098	e12fff1e	 bx          lr
  0009c		 |$M43693|

			 ENDP  ; |EMACMulticastList|

	EXPORT	|EMACCurrentPacketFilter|

  00018			 AREA	 |.pdata|, PDATA
|$T43700| DCD	|$LN5@EMACCurren|
	DCD	0x40000503
; Function compile flags: /Odtp

  0009c			 AREA	 |.text|, CODE, ARM

  0009c		 |EMACCurrentPacketFilter| PROC

; 63   : {

  0009c		 |$LN5@EMACCurren|
  0009c	e1a0c00d	 mov         r12, sp
  000a0	e92d0001	 stmdb       sp!, {r0}
  000a4	e92d5000	 stmdb       sp!, {r12, lr}
  000a8		 |$M43697|

; 64   :     // Not supported
; 65   :     UNREFERENCED_PARAMETER(filter);
; 66   : }

  000a8	e89d6000	 ldmia       sp, {sp, lr}
  000ac	e12fff1e	 bx          lr
  000b0		 |$M43698|

			 ENDP  ; |EMACCurrentPacketFilter|

	EXPORT	|PhyReadReg|

  0000c			 AREA	 |.bss|, NOINIT
|g_pMdio| %	0x4

  00020			 AREA	 |.pdata|, PDATA
|$T43706| DCD	|$LN10@PhyReadReg|
	DCD	0x40003604
; Function compile flags: /Odtp

  000b0			 AREA	 |.text|, CODE, ARM

  000b0		 |PhyReadReg| PROC

; 72   : {

  000b0		 |$LN10@PhyReadReg|
  000b0	e1a0c00d	 mov         r12, sp
  000b4	e92d0007	 stmdb       sp!, {r0 - r2}
  000b8	e92d5000	 stmdb       sp!, {r12, lr}
  000bc	e24dd008	 sub         sp, sp, #8
  000c0		 |$M43703|
  000c0		 |$LN5@PhyReadReg|

; 73   :     int	tmp;
; 74   : 
; 75   :     // Wait for MDIO to be ready
; 76   :     while (g_pMdio->USERACCESS0 & MDIO_USERACCESS0_GO);

  000c0	e59f30bc	 ldr         r3, [pc, #0xBC]
  000c4	e5933000	 ldr         r3, [r3]
  000c8	e2833080	 add         r3, r3, #0x80
  000cc	e5933000	 ldr         r3, [r3]
  000d0	e3130102	 tst         r3, #2, 2
  000d4	0a000000	 beq         |$LN4@PhyReadReg|
  000d8	eafffff8	 b           |$LN5@PhyReadReg|
  000dc		 |$LN4@PhyReadReg|

; 77   : 
; 78   :     g_pMdio->USERACCESS0 = MDIO_USERACCESS0_GO |
; 79   :         MDIO_USERACCESS0_WRITE_READ |
; 80   :         ((reg_num & 0x1f) << 21) |
; 81   :         ((phy_addr & 0x1f) << 16);

  000dc	e5dd3014	 ldrb        r3, [sp, #0x14]
  000e0	e203301f	 and         r3, r3, #0x1F
  000e4	e1a03a83	 mov         r3, r3, lsl #21
  000e8	e3832102	 orr         r2, r3, #2, 2
  000ec	e5dd3010	 ldrb        r3, [sp, #0x10]
  000f0	e203301f	 and         r3, r3, #0x1F
  000f4	e1a03803	 mov         r3, r3, lsl #16
  000f8	e1822003	 orr         r2, r2, r3
  000fc	e59f3080	 ldr         r3, [pc, #0x80]
  00100	e5933000	 ldr         r3, [r3]
  00104	e2833080	 add         r3, r3, #0x80
  00108	e5832000	 str         r2, [r3]
  0010c		 |$LN3@PhyReadReg|

; 82   : 
; 83   :     // Wait for command to complete
; 84   :     while ((tmp = g_pMdio->USERACCESS0) & MDIO_USERACCESS0_GO);

  0010c	e59f3070	 ldr         r3, [pc, #0x70]
  00110	e5933000	 ldr         r3, [r3]
  00114	e2833080	 add         r3, r3, #0x80
  00118	e5933000	 ldr         r3, [r3]
  0011c	e58d3000	 str         r3, [sp]
  00120	e59d3000	 ldr         r3, [sp]
  00124	e3130102	 tst         r3, #2, 2
  00128	0a000000	 beq         |$LN2@PhyReadReg|
  0012c	eafffff6	 b           |$LN3@PhyReadReg|
  00130		 |$LN2@PhyReadReg|

; 85   : 
; 86   :     if (tmp & MDIO_USERACCESS0_ACK) {

  00130	e59d3000	 ldr         r3, [sp]
  00134	e3130202	 tst         r3, #2, 4
  00138	0a000007	 beq         |$LN1@PhyReadReg|

; 87   :         *data = (UINT16) tmp;

  0013c	e59d3000	 ldr         r3, [sp]
  00140	e1a02803	 mov         r2, r3, lsl #16
  00144	e1a02822	 mov         r2, r2, lsr #16
  00148	e59d3018	 ldr         r3, [sp, #0x18]
  0014c	e1c320b0	 strh        r2, [r3]

; 88   :         return TRUE;

  00150	e3a03001	 mov         r3, #1
  00154	e58d3004	 str         r3, [sp, #4]
  00158	ea000005	 b           |$LN6@PhyReadReg|
  0015c		 |$LN1@PhyReadReg|

; 89   :     }
; 90   : 
; 91   :     *data = (UINT16) -1;

  0015c	e59d2018	 ldr         r2, [sp, #0x18]
  00160	e3a03cff	 mov         r3, #0xFF, 24
  00164	e38330ff	 orr         r3, r3, #0xFF
  00168	e1c230b0	 strh        r3, [r2]

; 92   :     return FALSE;

  0016c	e3a03000	 mov         r3, #0
  00170	e58d3004	 str         r3, [sp, #4]
  00174		 |$LN6@PhyReadReg|

; 93   : }

  00174	e59d0004	 ldr         r0, [sp, #4]
  00178	e28dd008	 add         sp, sp, #8
  0017c	e89d6000	 ldmia       sp, {sp, lr}
  00180	e12fff1e	 bx          lr
  00184		 |$LN11@PhyReadReg|
  00184		 |$LN12@PhyReadReg|
  00184	00000000	 DCD         |g_pMdio|
  00188		 |$M43704|

			 ENDP  ; |PhyReadReg|

	EXPORT	|PhyWriteReg|

  00028			 AREA	 |.pdata|, PDATA
|$T43714| DCD	|$LN9@PhyWriteRe|
	DCD	0x40002b04
; Function compile flags: /Odtp

  00188			 AREA	 |.text|, CODE, ARM

  00188		 |PhyWriteReg| PROC

; 97   : {

  00188		 |$LN9@PhyWriteRe|
  00188	e1a0c00d	 mov         r12, sp
  0018c	e92d0007	 stmdb       sp!, {r0 - r2}
  00190	e92d5000	 stmdb       sp!, {r12, lr}
  00194	e24dd004	 sub         sp, sp, #4
  00198		 |$M43711|
  00198		 |$LN4@PhyWriteRe|

; 98   : 
; 99   :     // Wait for MDIO to be ready
; 100  :     while (g_pMdio->USERACCESS0 & MDIO_USERACCESS0_GO);

  00198	e59f3090	 ldr         r3, [pc, #0x90]
  0019c	e5933000	 ldr         r3, [r3]
  001a0	e2833080	 add         r3, r3, #0x80
  001a4	e5933000	 ldr         r3, [r3]
  001a8	e3130102	 tst         r3, #2, 2
  001ac	0a000000	 beq         |$LN3@PhyWriteRe|
  001b0	eafffff8	 b           |$LN4@PhyWriteRe|
  001b4		 |$LN3@PhyWriteRe|

; 101  : 
; 102  :     g_pMdio->USERACCESS0 = MDIO_USERACCESS0_GO |
; 103  :         MDIO_USERACCESS0_WRITE_WRITE |
; 104  :         ((reg_num & 0x1f) << 21) |
; 105  :         ((phy_addr & 0x1f) << 16) |
; 106  :         (data & 0xffff);

  001b4	e5dd3010	 ldrb        r3, [sp, #0x10]
  001b8	e203301f	 and         r3, r3, #0x1F
  001bc	e1a03a83	 mov         r3, r3, lsl #21
  001c0	e3832103	 orr         r2, r3, #3, 2
  001c4	e5dd300c	 ldrb        r3, [sp, #0xC]
  001c8	e203301f	 and         r3, r3, #0x1F
  001cc	e1a03803	 mov         r3, r3, lsl #16
  001d0	e1821003	 orr         r1, r2, r3
  001d4	e1dd31b4	 ldrh        r3, [sp, #0x14]
  001d8	e1a02003	 mov         r2, r3
  001dc	e3a03cff	 mov         r3, #0xFF, 24
  001e0	e38330ff	 orr         r3, r3, #0xFF
  001e4	e0023003	 and         r3, r2, r3
  001e8	e1812003	 orr         r2, r1, r3
  001ec	e59f303c	 ldr         r3, [pc, #0x3C]
  001f0	e5933000	 ldr         r3, [r3]
  001f4	e2833080	 add         r3, r3, #0x80
  001f8	e5832000	 str         r2, [r3]
  001fc		 |$LN2@PhyWriteRe|

; 107  : 
; 108  :     // Wait for command to complete
; 109  :     while (g_pMdio->USERACCESS0 & MDIO_USERACCESS0_GO);

  001fc	e59f302c	 ldr         r3, [pc, #0x2C]
  00200	e5933000	 ldr         r3, [r3]
  00204	e2833080	 add         r3, r3, #0x80
  00208	e5933000	 ldr         r3, [r3]
  0020c	e3130102	 tst         r3, #2, 2
  00210	0a000000	 beq         |$LN1@PhyWriteRe|
  00214	eafffff8	 b           |$LN2@PhyWriteRe|
  00218		 |$LN1@PhyWriteRe|

; 110  : 
; 111  :     return TRUE;

  00218	e3a03001	 mov         r3, #1
  0021c	e58d3000	 str         r3, [sp]

; 112  : }

  00220	e59d0000	 ldr         r0, [sp]
  00224	e28dd004	 add         sp, sp, #4
  00228	e89d6000	 ldmia       sp, {sp, lr}
  0022c	e12fff1e	 bx          lr
  00230		 |$LN10@PhyWriteRe|
  00230		 |$LN11@PhyWriteRe|
  00230	00000000	 DCD         |g_pMdio|
  00234		 |$M43712|

			 ENDP  ; |PhyWriteReg|

	EXPORT	|EnableMDIO|

  00030			 AREA	 |.pdata|, PDATA
|$T43721| DCD	|$LN8@EnableMDIO|
	DCD	0x40001c01
; Function compile flags: /Odtp

  00234			 AREA	 |.text|, CODE, ARM

  00234		 |EnableMDIO| PROC

; 183  : {

  00234		 |$LN8@EnableMDIO|
  00234	e24dd004	 sub         sp, sp, #4
  00238		 |$M43718|

; 184  :     UINT32 clkdiv;
; 185  :     clkdiv = (EMAC_MDIO_BUS_FREQ / EMAC_MDIO_CLOCK_FREQ) - 1;

  00238	e3a03c01	 mov         r3, #1, 24
  0023c	e383304b	 orr         r3, r3, #0x4B
  00240	e58d3000	 str         r3, [sp]

; 186  :     if (clkdiv > 0xFF)

  00244	e59d3000	 ldr         r3, [sp]
  00248	e35300ff	 cmp         r3, #0xFF
  0024c	9a000001	 bls         |$LN3@EnableMDIO|

; 187  :     {
; 188  :         clkdiv = 0xFF;

  00250	e3a030ff	 mov         r3, #0xFF
  00254	e58d3000	 str         r3, [sp]
  00258		 |$LN3@EnableMDIO|

; 189  :     }
; 190  :     g_pMdio->CONTROL = (clkdiv & 0xff) |
; 191  :         MDIO_CONTROL_ENABLE |
; 192  :         MDIO_CONTROL_FAULT |
; 193  :         MDIO_CONTROL_FAULTEN;

  00258	e59d3000	 ldr         r3, [sp]
  0025c	e20330ff	 and         r3, r3, #0xFF
  00260	e3833101	 orr         r3, r3, #1, 2
  00264	e3833702	 orr         r3, r3, #2, 14
  00268	e3832701	 orr         r2, r3, #1, 14
  0026c	e59f302c	 ldr         r3, [pc, #0x2C]
  00270	e5933000	 ldr         r3, [r3]
  00274	e2833004	 add         r3, r3, #4
  00278	e5832000	 str         r2, [r3]
  0027c		 |$LN2@EnableMDIO|

; 194  : 
; 195  :     while (g_pMdio->CONTROL & MDIO_CONTROL_IDLE) ;

  0027c	e59f301c	 ldr         r3, [pc, #0x1C]
  00280	e5933000	 ldr         r3, [r3]
  00284	e2833004	 add         r3, r3, #4
  00288	e5933000	 ldr         r3, [r3]
  0028c	e3130102	 tst         r3, #2, 2
  00290	0a000000	 beq         |$LN1@EnableMDIO|
  00294	eafffff8	 b           |$LN2@EnableMDIO|
  00298		 |$LN1@EnableMDIO|

; 196  : }

  00298	e28dd004	 add         sp, sp, #4
  0029c	e12fff1e	 bx          lr
  002a0		 |$LN9@EnableMDIO|
  002a0		 |$LN10@EnableMDIO|
  002a0	00000000	 DCD         |g_pMdio|
  002a4		 |$M43719|

			 ENDP  ; |EnableMDIO|

	EXPORT	|??_C@_1DA@HMCKPEPE@?$AAN?$AAo?$AA?5?$AAE?$AAT?$AAH?$AA?5?$AAP?$AAH?$AAY?$AA?5?$AAd?$AAe?$AAt?$AAe?$AAc?$AAt?$AAe?$AAd?$AA?$CB?$AA?$CB?$AA?$CB?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|PhyInit|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|OALStall|
	IMPORT	|_CountLeadingZeros|

  00038			 AREA	 |.pdata|, PDATA
|$T43730| DCD	|$LN10@PhyInit|
	DCD	0x40003202

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@HMCKPEPE@?$AAN?$AAo?$AA?5?$AAE?$AAT?$AAH?$AA?5?$AAP?$AAH?$AAY?$AA?5?$AAd?$AAe?$AAt?$AAe?$AAc?$AAt?$AAe?$AAd?$AA?$CB?$AA?$CB?$AA?$CB?$AA?6?$AA?$AA@| DCB "N"
	DCB	0x0, "o", 0x0, " ", 0x0, "E", 0x0, "T", 0x0, "H", 0x0, " "
	DCB	0x0, "P", 0x0, "H", 0x0, "Y", 0x0, " ", 0x0, "d", 0x0, "e"
	DCB	0x0, "t", 0x0, "e", 0x0, "c", 0x0, "t", 0x0, "e", 0x0, "d"
	DCB	0x0, "!", 0x0, "!", 0x0, "!", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  002a4			 AREA	 |.text|, CODE, ARM

  002a4		 |PhyInit| PROC

; 198  : {

  002a4		 |$LN10@PhyInit|
  002a4	e52de004	 str         lr, [sp, #-4]!
  002a8	e24dd010	 sub         sp, sp, #0x10
  002ac		 |$M43727|

; 199  : 
; 200  :     UINT32 i;
; 201  :     UINT8 phyAddr = (UINT8)-1;

  002ac	e3a030ff	 mov         r3, #0xFF
  002b0	e5cd3004	 strb        r3, [sp, #4]

; 202  :     //Initialize MDIO
; 203  :     EnableMDIO();

  002b4	eb000000	 bl          EnableMDIO

; 204  : 
; 205  :     for (i = 0; i < 256; i++) {

  002b8	e3a03000	 mov         r3, #0
  002bc	e58d3000	 str         r3, [sp]
  002c0	ea000002	 b           |$LN5@PhyInit|
  002c4		 |$LN4@PhyInit|
  002c4	e59d3000	 ldr         r3, [sp]
  002c8	e2833001	 add         r3, r3, #1
  002cc	e58d3000	 str         r3, [sp]
  002d0		 |$LN5@PhyInit|
  002d0	e59d3000	 ldr         r3, [sp]
  002d4	e3530c01	 cmp         r3, #1, 24
  002d8	2a000009	 bcs         |$LN3@PhyInit|

; 206  :         if (g_pMdio->ALIVE)

  002dc	e59f3080	 ldr         r3, [pc, #0x80]
  002e0	e5933000	 ldr         r3, [r3]
  002e4	e2833008	 add         r3, r3, #8
  002e8	e5933000	 ldr         r3, [r3]
  002ec	e3530000	 cmp         r3, #0
  002f0	0a000000	 beq         |$LN2@PhyInit|

; 207  :             break;

  002f4	ea000002	 b           |$LN3@PhyInit|
  002f8		 |$LN2@PhyInit|

; 208  :         OALStall(10);

  002f8	e3a0000a	 mov         r0, #0xA
  002fc	eb000000	 bl          OALStall

; 209  :     }

  00300	eaffffef	 b           |$LN4@PhyInit|
  00304		 |$LN3@PhyInit|

; 210  : 
; 211  :     if (i >= 256) {

  00304	e59d3000	 ldr         r3, [sp]
  00308	e3530c01	 cmp         r3, #1, 24
  0030c	3a000004	 bcc         |$LN1@PhyInit|

; 212  :         RETAILMSG(1, (L"No ETH PHY detected!!!\n"));

  00310	e59f0050	 ldr         r0, [pc, #0x50]
  00314	eb000000	 bl          NKDbgPrintfW

; 213  :         return  (UINT8) -1;

  00318	e3a030ff	 mov         r3, #0xFF
  0031c	e5cd3008	 strb        r3, [sp, #8]
  00320	ea00000b	 b           |$LN6@PhyInit|
  00324		 |$LN1@PhyInit|

; 214  :     }
; 215  :     phyAddr = (UINT8) (31 - _CountLeadingZeros(g_pMdio->ALIVE));

  00324	e59f3038	 ldr         r3, [pc, #0x38]
  00328	e5933000	 ldr         r3, [r3]
  0032c	e2833008	 add         r3, r3, #8
  00330	e5930000	 ldr         r0, [r3]
  00334	eb000000	 bl          _CountLeadingZeros
  00338	e58d000c	 str         r0, [sp, #0xC]
  0033c	e59d300c	 ldr         r3, [sp, #0xC]
  00340	e263301f	 rsb         r3, r3, #0x1F
  00344	e20330ff	 and         r3, r3, #0xFF
  00348	e5cd3004	 strb        r3, [sp, #4]

; 216  : 
; 217  :     return phyAddr;

  0034c	e5dd3004	 ldrb        r3, [sp, #4]
  00350	e5cd3008	 strb        r3, [sp, #8]
  00354		 |$LN6@PhyInit|

; 218  : }

  00354	e5dd0008	 ldrb        r0, [sp, #8]
  00358	e28dd010	 add         sp, sp, #0x10
  0035c	e49de004	 ldr         lr, [sp], #4
  00360	e12fff1e	 bx          lr
  00364		 |$LN11@PhyInit|
  00364		 |$LN12@PhyInit|
  00364	00000000	 DCD         |g_pMdio|
  00368		 |$LN13@PhyInit|
  00368	00000000	 DCD         |??_C@_1DA@HMCKPEPE@?$AAN?$AAo?$AA?5?$AAE?$AAT?$AAH?$AA?5?$AAP?$AAH?$AAY?$AA?5?$AAd?$AAe?$AAt?$AAe?$AAc?$AAt?$AAe?$AAd?$AA?$CB?$AA?$CB?$AA?$CB?$AA?6?$AA?$AA@|
  0036c		 |$M43728|

			 ENDP  ; |PhyInit|

	EXPORT	|PhyReadIds|

  00040			 AREA	 |.pdata|, PDATA
|$T43739| DCD	|$LN7@PhyReadIds|
	DCD	0x40002402
; Function compile flags: /Odtp

  0036c			 AREA	 |.text|, CODE, ARM

  0036c		 |PhyReadIds| PROC

; 221  : {

  0036c		 |$LN7@PhyReadIds|
  0036c	e52de004	 str         lr, [sp, #-4]!
  00370	e24dd010	 sub         sp, sp, #0x10
  00374		 |$M43736|

; 222  :     UINT16 id1;
; 223  :     UINT16 id2;
; 224  :     if (!PhyReadReg(active_phy_addr, PHY_PHYIDR1, &id1)) 

  00374	e28d2002	 add         r2, sp, #2
  00378	e3a01002	 mov         r1, #2
  0037c	e59f3074	 ldr         r3, [pc, #0x74]
  00380	e5d30000	 ldrb        r0, [r3]
  00384	eb000000	 bl          PhyReadReg
  00388	e58d0008	 str         r0, [sp, #8]
  0038c	e59d3008	 ldr         r3, [sp, #8]
  00390	e3530000	 cmp         r3, #0
  00394	1a000002	 bne         |$LN2@PhyReadIds|

; 225  :     {
; 226  :         return 0;

  00398	e3a03000	 mov         r3, #0
  0039c	e58d3004	 str         r3, [sp, #4]
  003a0	ea000010	 b           |$LN3@PhyReadIds|
  003a4		 |$LN2@PhyReadIds|

; 227  :     }
; 228  :     if (!PhyReadReg(active_phy_addr, PHY_PHYIDR2, &id2)) 

  003a4	e28d2000	 add         r2, sp, #0
  003a8	e3a01003	 mov         r1, #3
  003ac	e59f3044	 ldr         r3, [pc, #0x44]
  003b0	e5d30000	 ldrb        r0, [r3]
  003b4	eb000000	 bl          PhyReadReg
  003b8	e58d000c	 str         r0, [sp, #0xC]
  003bc	e59d300c	 ldr         r3, [sp, #0xC]
  003c0	e3530000	 cmp         r3, #0
  003c4	1a000002	 bne         |$LN1@PhyReadIds|

; 229  :     {
; 230  :         return 0;

  003c8	e3a03000	 mov         r3, #0
  003cc	e58d3004	 str         r3, [sp, #4]
  003d0	ea000004	 b           |$LN3@PhyReadIds|
  003d4		 |$LN1@PhyReadIds|

; 231  :     }
; 232  :     return (id1 << 16) | id2;

  003d4	e1dd30b2	 ldrh        r3, [sp, #2]
  003d8	e1a02803	 mov         r2, r3, lsl #16
  003dc	e1dd30b0	 ldrh        r3, [sp]
  003e0	e1823003	 orr         r3, r2, r3
  003e4	e58d3004	 str         r3, [sp, #4]
  003e8		 |$LN3@PhyReadIds|

; 233  : }

  003e8	e59d0004	 ldr         r0, [sp, #4]
  003ec	e28dd010	 add         sp, sp, #0x10
  003f0	e49de004	 ldr         lr, [sp], #4
  003f4	e12fff1e	 bx          lr
  003f8		 |$LN8@PhyReadIds|
  003f8		 |$LN9@PhyReadIds|
  003f8	00000000	 DCD         |active_phy_addr|
  003fc		 |$M43737|

			 ENDP  ; |PhyReadIds|

	EXPORT	|PhySoftReset|

  00048			 AREA	 |.pdata|, PDATA
|$T43746| DCD	|$LN8@PhySoftRes|
	DCD	0x40001302
; Function compile flags: /Odtp

  003fc			 AREA	 |.text|, CODE, ARM

  003fc		 |PhySoftReset| PROC

; 236  : {

  003fc		 |$LN8@PhySoftRes|
  003fc	e52de004	 str         lr, [sp, #-4]!
  00400	e24dd004	 sub         sp, sp, #4
  00404		 |$M43743|

; 237  :     UINT16 tmp;
; 238  :     PhyWriteReg(active_phy_addr, PHY_BMCR, (1 << 15));

  00404	e3a02902	 mov         r2, #2, 18
  00408	e3a01000	 mov         r1, #0
  0040c	e59f3030	 ldr         r3, [pc, #0x30]
  00410	e5d30000	 ldrb        r0, [r3]
  00414	eb000000	 bl          PhyWriteReg
  00418		 |$LN3@PhySoftRes|

; 239  :     do
; 240  :     {
; 241  :         PhyReadReg(active_phy_addr, PHY_BMCR , &tmp);

  00418	e28d2000	 add         r2, sp, #0
  0041c	e3a01000	 mov         r1, #0
  00420	e59f301c	 ldr         r3, [pc, #0x1C]
  00424	e5d30000	 ldrb        r0, [r3]
  00428	eb000000	 bl          PhyReadReg

; 242  : 
; 243  :     }while (tmp & (1 << 15));	

  0042c	e1dd30b0	 ldrh        r3, [sp]
  00430	e3130902	 tst         r3, #2, 18
  00434	1afffff7	 bne         |$LN3@PhySoftRes|

; 244  : }

  00438	e28dd004	 add         sp, sp, #4
  0043c	e49de004	 ldr         lr, [sp], #4
  00440	e12fff1e	 bx          lr
  00444		 |$LN9@PhySoftRes|
  00444		 |$LN10@PhySoftRes|
  00444	00000000	 DCD         |active_phy_addr|
  00448		 |$M43744|

			 ENDP  ; |PhySoftReset|

	EXPORT	|??_C@_1DM@HDLLGNPK@?$AAL?$AAi?$AAn?$AAk?$AA?5?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?9?$AAd?$AAu?$AAp?$AAl?$AAe?$AAx?$AA?5?$AA?$CF?$AAd?$AA?5?$AAM?$AAB?$AAi?$AAt?$AAs?$AA?1?$AAs?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_19OMCCBHAG@?$AAH?$AAa?$AAl?$AAf?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_19GFKHPIAA@?$AAF?$AAu?$AAl?$AAl?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GG@POIKKPOP@?$AAA?$AAu?$AAt?$AAo?$AAn?$AAe?$AAg?$AAo?$AAc?$AAi?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?4?$AA?5?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?5?$AAt?$AAh@| [ DATA ] ; `string'
	EXPORT	|EMACInit|
	IMPORT	|OALVAtoPA|
	IMPORT	|OALPAtoVA|
	IMPORT	|memset|

  00010			 AREA	 |.bss|, NOINIT
|g_pEmacMod| %	0x4

  00050			 AREA	 |.pdata|, PDATA
|$T43765| DCD	|$LN47@EMACInit|
	DCD	0x40023804

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@HDLLGNPK@?$AAL?$AAi?$AAn?$AAk?$AA?5?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?9?$AAd?$AAu?$AAp?$AAl?$AAe?$AAx?$AA?5?$AA?$CF?$AAd?$AA?5?$AAM?$AAB?$AAi?$AAt?$AAs?$AA?1?$AAs?$AA?$AN?$AA?6?$AA?$AA@| DCB "L"
	DCB	0x0, "i", 0x0, "n", 0x0, "k", 0x0, " ", 0x0, ":", 0x0, " "
	DCB	0x0, "%", 0x0, "s", 0x0, "-", 0x0, "d", 0x0, "u", 0x0, "p"
	DCB	0x0, "l", 0x0, "e", 0x0, "x", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, " ", 0x0, "M", 0x0, "B", 0x0, "i", 0x0, "t", 0x0, "s"
	DCB	0x0, "/", 0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_19OMCCBHAG@?$AAH?$AAa?$AAl?$AAf?$AA?$AA@| DCB "H", 0x0, "a", 0x0, "l"
	DCB	0x0, "f", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_19GFKHPIAA@?$AAF?$AAu?$AAl?$AAl?$AA?$AA@| DCB "F", 0x0, "u", 0x0, "l"
	DCB	0x0, "l", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GG@POIKKPOP@?$AAA?$AAu?$AAt?$AAo?$AAn?$AAe?$AAg?$AAo?$AAc?$AAi?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?4?$AA?5?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?5?$AAt?$AAh@| DCB "A"
	DCB	0x0, "u", 0x0, "t", 0x0, "o", 0x0, "n", 0x0, "e", 0x0, "g"
	DCB	0x0, "o", 0x0, "c", 0x0, "i", 0x0, "a", 0x0, "t", 0x0, "i"
	DCB	0x0, "o", 0x0, "n", 0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, "d", 0x0, ".", 0x0, " ", 0x0, "C"
	DCB	0x0, "h", 0x0, "e", 0x0, "c", 0x0, "k", 0x0, " ", 0x0, "t"
	DCB	0x0, "h", 0x0, "e", 0x0, " ", 0x0, "e", 0x0, "t", 0x0, "h"
	DCB	0x0, "e", 0x0, "r", 0x0, "n", 0x0, "e", 0x0, "t", 0x0, " "
	DCB	0x0, "c", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  00448			 AREA	 |.text|, CODE, ARM

  00448		 |EMACInit| PROC

; 355  : {

  00448		 |$LN47@EMACInit|
  00448	e1a0c00d	 mov         r12, sp
  0044c	e92d0007	 stmdb       sp!, {r0 - r2}
  00450	e92d5000	 stmdb       sp!, {r12, lr}
  00454	e24dd05c	 sub         sp, sp, #0x5C
  00458		 |$M43762|

; 356  :     DWORD phyID;
; 357  :     REG32* addr;
; 358  :     int i;
; 359  :     BYTE* byteMac = (BYTE*) mac;

  00458	e59d306c	 ldr         r3, [sp, #0x6C]
  0045c	e58d3000	 str         r3, [sp]

; 360  :     DWORD oldMac[2];
; 361  :     EMAC_DESC* rx_desc;
; 362  :     DWORD speed;
; 363  :     BOOL fullduplex;
; 364  : 
; 365  :     UNREFERENCED_PARAMETER(offset);
; 366  : 
; 367  :     if ((DWORD) pAddress < 0x80000000)

  00460	e59d3064	 ldr         r3, [sp, #0x64]
  00464	e3530102	 cmp         r3, #2, 2
  00468	2a000005	 bcs         |$LN32@EMACInit|

; 368  :     {
; 369  :         pAddress = OALPAtoUA((DWORD)pAddress);

  0046c	e3a01000	 mov         r1, #0
  00470	e59d0064	 ldr         r0, [sp, #0x64]
  00474	eb000000	 bl          OALPAtoVA
  00478	e58d0028	 str         r0, [sp, #0x28]
  0047c	e59d3028	 ldr         r3, [sp, #0x28]
  00480	e58d3064	 str         r3, [sp, #0x64]
  00484		 |$LN32@EMACInit|

; 370  :     }
; 371  : 
; 372  :     g_pEmacMod	= (EMAC_MODULE_REGS *)	(pAddress + 0x10000);

  00484	e59d3064	 ldr         r3, [sp, #0x64]
  00488	e2832801	 add         r2, r3, #1, 16
  0048c	e59f385c	 ldr         r3, [pc, #0x85C]
  00490	e5832000	 str         r2, [r3]

; 373  :     g_pMdio		= (EMAC_MDIO_REGS *)	(pAddress + 0x30000);

  00494	e59d3064	 ldr         r3, [sp, #0x64]
  00498	e2832803	 add         r2, r3, #3, 16
  0049c	e59f3880	 ldr         r3, [pc, #0x880]
  004a0	e5832000	 str         r2, [r3]

; 374  :     g_pEmacSys	= (EMAC_SUBSYS_REGS *)	(pAddress);

  004a4	e59d2064	 ldr         r2, [sp, #0x64]
  004a8	e59f3868	 ldr         r3, [pc, #0x868]
  004ac	e5832000	 str         r2, [r3]

; 375  :     startOfCPPIArea = (pAddress + 0x20000);

  004b0	e59d3064	 ldr         r3, [sp, #0x64]
  004b4	e2832802	 add         r2, r3, #2, 16
  004b8	e59f3834	 ldr         r3, [pc, #0x834]
  004bc	e5832000	 str         r2, [r3]

; 376  :     emac_rx_desc = (EMAC_DESC*)	(startOfCPPIArea);

  004c0	e59f382c	 ldr         r3, [pc, #0x82C]
  004c4	e5932000	 ldr         r2, [r3]
  004c8	e59f3828	 ldr         r3, [pc, #0x828]
  004cc	e5832000	 str         r2, [r3]

; 377  :     emac_tx_desc = (EMAC_DESC*)	(startOfCPPIArea + sizeof(EMAC_DESC)*EMAC_MAX_RX_BUFFERS);

  004d0	e59f381c	 ldr         r3, [pc, #0x81C]
  004d4	e5933000	 ldr         r3, [r3]
  004d8	e2832080	 add         r2, r3, #0x80
  004dc	e59f383c	 ldr         r3, [pc, #0x83C]
  004e0	e5832000	 str         r2, [r3]

; 378  :     memset(startOfCPPIArea,0,8*1024);

  004e4	e3a02a02	 mov         r2, #2, 20
  004e8	e3a01000	 mov         r1, #0
  004ec	e59f3800	 ldr         r3, [pc, #0x800]
  004f0	e5930000	 ldr         r0, [r3]
  004f4	eb000000	 bl          memset

; 379  : 
; 380  :     g_pEmacMod->MACINDEX = 0;

  004f8	e59f37f0	 ldr         r3, [pc, #0x7F0]
  004fc	e5933000	 ldr         r3, [r3]
  00500	e2833c05	 add         r3, r3, #5, 24
  00504	e2832008	 add         r2, r3, #8
  00508	e3a03000	 mov         r3, #0
  0050c	e5823000	 str         r3, [r2]

; 381  :     oldMac[0] = g_pEmacMod->MACSRCADDRLO;

  00510	e59f37d8	 ldr         r3, [pc, #0x7D8]
  00514	e5933000	 ldr         r3, [r3]
  00518	e2833e1d	 add         r3, r3, #0x1D, 28
  0051c	e5933000	 ldr         r3, [r3]
  00520	e58d300c	 str         r3, [sp, #0xC]

; 382  :     oldMac[1] = g_pEmacMod->MACSRCADDRHI;

  00524	e59f37c4	 ldr         r3, [pc, #0x7C4]
  00528	e5933000	 ldr         r3, [r3]
  0052c	e2833f75	 add         r3, r3, #0x75, 30
  00530	e5933000	 ldr         r3, [r3]
  00534	e58d3010	 str         r3, [sp, #0x10]

; 383  : 
; 384  :     if ((oldMac[0]!=0)||(oldMac[1]!=0))

  00538	e59d300c	 ldr         r3, [sp, #0xC]
  0053c	e3530000	 cmp         r3, #0
  00540	1a000002	 bne         |$LN30@EMACInit|
  00544	e59d3010	 ldr         r3, [sp, #0x10]
  00548	e3530000	 cmp         r3, #0
  0054c	0a000020	 beq         |$LN31@EMACInit|
  00550		 |$LN30@EMACInit|

; 385  :     {
; 386  :         byteMac[0]=(BYTE) (oldMac[1] >> 0);

  00550	e59d3010	 ldr         r3, [sp, #0x10]
  00554	e20320ff	 and         r2, r3, #0xFF
  00558	e59d3000	 ldr         r3, [sp]
  0055c	e5c32000	 strb        r2, [r3]

; 387  :         byteMac[1]=(BYTE) (oldMac[1] >> 8);

  00560	e59d3010	 ldr         r3, [sp, #0x10]
  00564	e1a03423	 mov         r3, r3, lsr #8
  00568	e20320ff	 and         r2, r3, #0xFF
  0056c	e59d3000	 ldr         r3, [sp]
  00570	e2833001	 add         r3, r3, #1
  00574	e5c32000	 strb        r2, [r3]

; 388  :         byteMac[2]=(BYTE) (oldMac[1] >> 16);

  00578	e59d3010	 ldr         r3, [sp, #0x10]
  0057c	e1a03823	 mov         r3, r3, lsr #16
  00580	e20320ff	 and         r2, r3, #0xFF
  00584	e59d3000	 ldr         r3, [sp]
  00588	e2833002	 add         r3, r3, #2
  0058c	e5c32000	 strb        r2, [r3]

; 389  :         byteMac[3]=(BYTE) (oldMac[1] >> 24);

  00590	e59d3010	 ldr         r3, [sp, #0x10]
  00594	e1a03c23	 mov         r3, r3, lsr #24
  00598	e20320ff	 and         r2, r3, #0xFF
  0059c	e59d3000	 ldr         r3, [sp]
  005a0	e2833003	 add         r3, r3, #3
  005a4	e5c32000	 strb        r2, [r3]

; 390  :         byteMac[4]=(BYTE) (oldMac[0] >> 0);

  005a8	e59d300c	 ldr         r3, [sp, #0xC]
  005ac	e20320ff	 and         r2, r3, #0xFF
  005b0	e59d3000	 ldr         r3, [sp]
  005b4	e2833004	 add         r3, r3, #4
  005b8	e5c32000	 strb        r2, [r3]

; 391  :         byteMac[5]=(BYTE) (oldMac[0] >> 8);

  005bc	e59d300c	 ldr         r3, [sp, #0xC]
  005c0	e1a03423	 mov         r3, r3, lsr #8
  005c4	e20320ff	 and         r2, r3, #0xFF
  005c8	e59d3000	 ldr         r3, [sp]
  005cc	e2833005	 add         r3, r3, #5
  005d0	e5c32000	 strb        r2, [r3]
  005d4		 |$LN31@EMACInit|

; 392  :     }
; 393  : 
; 394  :     active_phy_addr = PhyInit();

  005d4	eb000000	 bl          PhyInit
  005d8	e5cd002c	 strb        r0, [sp, #0x2C]
  005dc	e5dd202c	 ldrb        r2, [sp, #0x2C]
  005e0	e59f3734	 ldr         r3, [pc, #0x734]
  005e4	e5c32000	 strb        r2, [r3]

; 395  :     if (active_phy_addr == -1)

  005e8	e59f372c	 ldr         r3, [pc, #0x72C]
  005ec	e5d33000	 ldrb        r3, [r3]
  005f0	e3730001	 cmn         r3, #1
  005f4	1a000002	 bne         |$LN29@EMACInit|

; 396  :     {
; 397  :         return FALSE;

  005f8	e3a03000	 mov         r3, #0
  005fc	e58d3024	 str         r3, [sp, #0x24]
  00600	ea0001b6	 b           |$LN33@EMACInit|
  00604		 |$LN29@EMACInit|

; 398  :     }
; 399  :     phyID = PhyReadIds();

  00604	eb000000	 bl          PhyReadIds
  00608	e58d0030	 str         r0, [sp, #0x30]
  0060c	e59d3030	 ldr         r3, [sp, #0x30]
  00610	e58d3014	 str         r3, [sp, #0x14]

; 400  : 
; 401  :     switch (phyID) {
; 402  :         default:
; 403  :             break;
; 404  :     }
; 405  : 
; 406  :     if (LinkIsOK() == FALSE)

  00614	eb000000	 bl          LinkIsOK
  00618	e58d0034	 str         r0, [sp, #0x34]
  0061c	e59d3034	 ldr         r3, [sp, #0x34]
  00620	e3530000	 cmp         r3, #0
  00624	1a000000	 bne         |$LN25@EMACInit|

; 407  :     {
; 408  :         /* Soft reset the PHY */
; 409  :         PhySoftReset();

  00628	eb000000	 bl          PhySoftReset
  0062c		 |$LN25@EMACInit|

; 410  :     }
; 411  : 
; 412  :     /* Reset EMAC module and disable interrupts in wrapper */
; 413  :     g_pEmacMod->SOFTRESET = 1;

  0062c	e59f36bc	 ldr         r3, [pc, #0x6BC]
  00630	e5933000	 ldr         r3, [r3]
  00634	e2832f5d	 add         r2, r3, #0x5D, 30
  00638	e3a03001	 mov         r3, #1
  0063c	e5823000	 str         r3, [r2]
  00640		 |$LN24@EMACInit|

; 414  :     while (g_pEmacMod->SOFTRESET != 0);

  00640	e59f36a8	 ldr         r3, [pc, #0x6A8]
  00644	e5933000	 ldr         r3, [r3]
  00648	e2833f5d	 add         r3, r3, #0x5D, 30
  0064c	e5933000	 ldr         r3, [r3]
  00650	e3530000	 cmp         r3, #0
  00654	0a000000	 beq         |$LN23@EMACInit|
  00658	eafffff8	 b           |$LN24@EMACInit|
  0065c		 |$LN23@EMACInit|

; 415  :     g_pEmacSys->SOFTRESET = 1;

  0065c	e59f36b4	 ldr         r3, [pc, #0x6B4]
  00660	e5933000	 ldr         r3, [r3]
  00664	e2832004	 add         r2, r3, #4
  00668	e3a03001	 mov         r3, #1
  0066c	e5823000	 str         r3, [r2]
  00670		 |$LN22@EMACInit|

; 416  :     while (g_pEmacSys->SOFTRESET != 0);

  00670	e59f36a0	 ldr         r3, [pc, #0x6A0]
  00674	e5933000	 ldr         r3, [r3]
  00678	e2833004	 add         r3, r3, #4
  0067c	e5933000	 ldr         r3, [r3]
  00680	e3530000	 cmp         r3, #0
  00684	0a000000	 beq         |$LN21@EMACInit|
  00688	eafffff8	 b           |$LN22@EMACInit|
  0068c		 |$LN21@EMACInit|

; 417  : 
; 418  :     g_pEmacSys->C0RXEN = g_pEmacSys->C1RXEN = g_pEmacSys->C2RXEN = 0;

  0068c	e59f3684	 ldr         r3, [pc, #0x684]
  00690	e5933000	 ldr         r3, [r3]
  00694	e2832034	 add         r2, r3, #0x34
  00698	e3a03000	 mov         r3, #0
  0069c	e5823000	 str         r3, [r2]
  006a0	e59f3670	 ldr         r3, [pc, #0x670]
  006a4	e5933000	 ldr         r3, [r3]
  006a8	e2832024	 add         r2, r3, #0x24
  006ac	e3a03000	 mov         r3, #0
  006b0	e5823000	 str         r3, [r2]
  006b4	e59f365c	 ldr         r3, [pc, #0x65C]
  006b8	e5933000	 ldr         r3, [r3]
  006bc	e2832014	 add         r2, r3, #0x14
  006c0	e3a03000	 mov         r3, #0
  006c4	e5823000	 str         r3, [r2]

; 419  :     g_pEmacSys->C0TXEN = g_pEmacSys->C1TXEN = g_pEmacSys->C2TXEN = 0;

  006c8	e59f3648	 ldr         r3, [pc, #0x648]
  006cc	e5933000	 ldr         r3, [r3]
  006d0	e2832038	 add         r2, r3, #0x38
  006d4	e3a03000	 mov         r3, #0
  006d8	e5823000	 str         r3, [r2]
  006dc	e59f3634	 ldr         r3, [pc, #0x634]
  006e0	e5933000	 ldr         r3, [r3]
  006e4	e2832028	 add         r2, r3, #0x28
  006e8	e3a03000	 mov         r3, #0
  006ec	e5823000	 str         r3, [r2]
  006f0	e59f3620	 ldr         r3, [pc, #0x620]
  006f4	e5933000	 ldr         r3, [r3]
  006f8	e2832018	 add         r2, r3, #0x18
  006fc	e3a03000	 mov         r3, #0
  00700	e5823000	 str         r3, [r2]

; 420  :     g_pEmacSys->C0MISCEN = g_pEmacSys->C1MISCEN = g_pEmacSys->C2MISCEN = 0;

  00704	e59f360c	 ldr         r3, [pc, #0x60C]
  00708	e5933000	 ldr         r3, [r3]
  0070c	e283203c	 add         r2, r3, #0x3C
  00710	e3a03000	 mov         r3, #0
  00714	e5823000	 str         r3, [r2]
  00718	e59f35f8	 ldr         r3, [pc, #0x5F8]
  0071c	e5933000	 ldr         r3, [r3]
  00720	e283202c	 add         r2, r3, #0x2C
  00724	e3a03000	 mov         r3, #0
  00728	e5823000	 str         r3, [r2]
  0072c	e59f35e4	 ldr         r3, [pc, #0x5E4]
  00730	e5933000	 ldr         r3, [r3]
  00734	e283201c	 add         r2, r3, #0x1C
  00738	e3a03000	 mov         r3, #0
  0073c	e5823000	 str         r3, [r2]

; 421  : 
; 422  :     g_pEmacMod->TXCONTROL = 0x01;

  00740	e59f35a8	 ldr         r3, [pc, #0x5A8]
  00744	e5933000	 ldr         r3, [r3]
  00748	e2832004	 add         r2, r3, #4
  0074c	e3a03001	 mov         r3, #1
  00750	e5823000	 str         r3, [r2]

; 423  :     g_pEmacMod->RXCONTROL = 0x01;

  00754	e59f3594	 ldr         r3, [pc, #0x594]
  00758	e5933000	 ldr         r3, [r3]
  0075c	e2832014	 add         r2, r3, #0x14
  00760	e3a03001	 mov         r3, #1
  00764	e5823000	 str         r3, [r2]

; 424  : 
; 425  :     /* Set MAC Addresses & Init multicast Hash to 0 (disable any multicast receive) */
; 426  :     /* Using channel 0 only - other channels are disabled */
; 427  :     for (i = 0; i < 8; i++) {

  00768	e3a03000	 mov         r3, #0
  0076c	e58d3004	 str         r3, [sp, #4]
  00770	ea000002	 b           |$LN20@EMACInit|
  00774		 |$LN19@EMACInit|
  00774	e59d3004	 ldr         r3, [sp, #4]
  00778	e2833001	 add         r3, r3, #1
  0077c	e58d3004	 str         r3, [sp, #4]
  00780		 |$LN20@EMACInit|
  00780	e59d3004	 ldr         r3, [sp, #4]
  00784	e3530008	 cmp         r3, #8
  00788	aa00002a	 bge         |$LN18@EMACInit|

; 428  :         g_pEmacMod->MACINDEX = i;

  0078c	e59f355c	 ldr         r3, [pc, #0x55C]
  00790	e5933000	 ldr         r3, [r3]
  00794	e2833c05	 add         r3, r3, #5, 24
  00798	e2832008	 add         r2, r3, #8
  0079c	e59d3004	 ldr         r3, [sp, #4]
  007a0	e5823000	 str         r3, [r2]

; 429  :         g_pEmacMod->MACADDRLO =	(byteMac[5] << 8) |(byteMac[4] << 0) | (1 << 19) | (1 << 20); /* bits 8-0 */;

  007a4	e59d3000	 ldr         r3, [sp]
  007a8	e2833005	 add         r3, r3, #5
  007ac	e5d33000	 ldrb        r3, [r3]
  007b0	e1a02403	 mov         r2, r3, lsl #8
  007b4	e59d3000	 ldr         r3, [sp]
  007b8	e2833004	 add         r3, r3, #4
  007bc	e5d33000	 ldrb        r3, [r3]
  007c0	e1823003	 orr         r3, r2, r3
  007c4	e3833702	 orr         r3, r3, #2, 14
  007c8	e3832601	 orr         r2, r3, #1, 12
  007cc	e59f351c	 ldr         r3, [pc, #0x51C]
  007d0	e5933000	 ldr         r3, [r3]
  007d4	e2833c05	 add         r3, r3, #5, 24
  007d8	e5832000	 str         r2, [r3]

; 430  :         g_pEmacMod->MACADDRHI = (byteMac[3] << 24) |(byteMac[2] << 16) | 
; 431  :             (byteMac[1] << 8)  |(byteMac[0] << 0);

  007dc	e59d3000	 ldr         r3, [sp]
  007e0	e2833003	 add         r3, r3, #3
  007e4	e5d33000	 ldrb        r3, [r3]
  007e8	e1a02c03	 mov         r2, r3, lsl #24
  007ec	e59d3000	 ldr         r3, [sp]
  007f0	e2833002	 add         r3, r3, #2
  007f4	e5d33000	 ldrb        r3, [r3]
  007f8	e1a03803	 mov         r3, r3, lsl #16
  007fc	e1822003	 orr         r2, r2, r3
  00800	e59d3000	 ldr         r3, [sp]
  00804	e2833001	 add         r3, r3, #1
  00808	e5d33000	 ldrb        r3, [r3]
  0080c	e1a03403	 mov         r3, r3, lsl #8
  00810	e1822003	 orr         r2, r2, r3
  00814	e59d3000	 ldr         r3, [sp]
  00818	e5d33000	 ldrb        r3, [r3]
  0081c	e1822003	 orr         r2, r2, r3
  00820	e59f34c8	 ldr         r3, [pc, #0x4C8]
  00824	e5933000	 ldr         r3, [r3]
  00828	e2833c05	 add         r3, r3, #5, 24
  0082c	e2833004	 add         r3, r3, #4
  00830	e5832000	 str         r2, [r3]

; 432  :     }

  00834	eaffffce	 b           |$LN19@EMACInit|
  00838		 |$LN18@EMACInit|

; 433  : 
; 434  :     g_pEmacMod->MACHASH1 = 0;

  00838	e59f34b0	 ldr         r3, [pc, #0x4B0]
  0083c	e5933000	 ldr         r3, [r3]
  00840	e2832f76	 add         r2, r3, #0x76, 30
  00844	e3a03000	 mov         r3, #0
  00848	e5823000	 str         r3, [r2]

; 435  :     g_pEmacMod->MACHASH2 = 0;

  0084c	e59f349c	 ldr         r3, [pc, #0x49C]
  00850	e5933000	 ldr         r3, [r3]
  00854	e2832f77	 add         r2, r3, #0x77, 30
  00858	e3a03000	 mov         r3, #0
  0085c	e5823000	 str         r3, [r2]

; 436  : 
; 437  :     /* Set source MAC address - REQUIRED for pause frames */
; 438  :     g_pEmacMod->MACSRCADDRLO=	(byteMac[5] << 8) |(byteMac[4] << 0);

  00860	e59d3000	 ldr         r3, [sp]
  00864	e2833005	 add         r3, r3, #5
  00868	e5d33000	 ldrb        r3, [r3]
  0086c	e1a02403	 mov         r2, r3, lsl #8
  00870	e59d3000	 ldr         r3, [sp]
  00874	e2833004	 add         r3, r3, #4
  00878	e5d33000	 ldrb        r3, [r3]
  0087c	e1822003	 orr         r2, r2, r3
  00880	e59f3468	 ldr         r3, [pc, #0x468]
  00884	e5933000	 ldr         r3, [r3]
  00888	e2833e1d	 add         r3, r3, #0x1D, 28
  0088c	e5832000	 str         r2, [r3]

; 439  :     g_pEmacMod->MACSRCADDRHI = (byteMac[3] << 24) |(byteMac[2] << 16) | 
; 440  :         (byteMac[1] << 8)  |(byteMac[0] << 0);

  00890	e59d3000	 ldr         r3, [sp]
  00894	e2833003	 add         r3, r3, #3
  00898	e5d33000	 ldrb        r3, [r3]
  0089c	e1a02c03	 mov         r2, r3, lsl #24
  008a0	e59d3000	 ldr         r3, [sp]
  008a4	e2833002	 add         r3, r3, #2
  008a8	e5d33000	 ldrb        r3, [r3]
  008ac	e1a03803	 mov         r3, r3, lsl #16
  008b0	e1822003	 orr         r2, r2, r3
  008b4	e59d3000	 ldr         r3, [sp]
  008b8	e2833001	 add         r3, r3, #1
  008bc	e5d33000	 ldrb        r3, [r3]
  008c0	e1a03403	 mov         r3, r3, lsl #8
  008c4	e1822003	 orr         r2, r2, r3
  008c8	e59d3000	 ldr         r3, [sp]
  008cc	e5d33000	 ldrb        r3, [r3]
  008d0	e1822003	 orr         r2, r2, r3
  008d4	e59f3414	 ldr         r3, [pc, #0x414]
  008d8	e5933000	 ldr         r3, [r3]
  008dc	e2833f75	 add         r3, r3, #0x75, 30
  008e0	e5832000	 str         r2, [r3]

; 441  : 
; 442  : 
; 443  :     /* Set DMA 8 TX / 8 RX Head pointers to 0 */
; 444  :     addr = &g_pEmacMod->TX0HDP;

  008e4	e59f3404	 ldr         r3, [pc, #0x404]
  008e8	e5933000	 ldr         r3, [r3]
  008ec	e2833c06	 add         r3, r3, #6, 24
  008f0	e58d3020	 str         r3, [sp, #0x20]

; 445  :     for(i = 0; i < 16; i++)

  008f4	e3a03000	 mov         r3, #0
  008f8	e58d3004	 str         r3, [sp, #4]
  008fc	ea000002	 b           |$LN17@EMACInit|
  00900		 |$LN16@EMACInit|
  00900	e59d3004	 ldr         r3, [sp, #4]
  00904	e2833001	 add         r3, r3, #1
  00908	e58d3004	 str         r3, [sp, #4]
  0090c		 |$LN17@EMACInit|
  0090c	e59d3004	 ldr         r3, [sp, #4]
  00910	e3530010	 cmp         r3, #0x10
  00914	aa000006	 bge         |$LN15@EMACInit|

; 446  :         *addr++ = 0;

  00918	e59d2020	 ldr         r2, [sp, #0x20]
  0091c	e3a03000	 mov         r3, #0
  00920	e5823000	 str         r3, [r2]
  00924	e59d3020	 ldr         r3, [sp, #0x20]
  00928	e2833004	 add         r3, r3, #4
  0092c	e58d3020	 str         r3, [sp, #0x20]
  00930	eafffff2	 b           |$LN16@EMACInit|
  00934		 |$LN15@EMACInit|

; 447  : 
; 448  :     addr = &g_pEmacMod->RX0HDP;

  00934	e59f33b4	 ldr         r3, [pc, #0x3B4]
  00938	e5933000	 ldr         r3, [r3]
  0093c	e2833e62	 add         r3, r3, #0x62, 28
  00940	e58d3020	 str         r3, [sp, #0x20]

; 449  :     for(i = 0; i < 16; i++)

  00944	e3a03000	 mov         r3, #0
  00948	e58d3004	 str         r3, [sp, #4]
  0094c	ea000002	 b           |$LN14@EMACInit|
  00950		 |$LN13@EMACInit|
  00950	e59d3004	 ldr         r3, [sp, #4]
  00954	e2833001	 add         r3, r3, #1
  00958	e58d3004	 str         r3, [sp, #4]
  0095c		 |$LN14@EMACInit|
  0095c	e59d3004	 ldr         r3, [sp, #4]
  00960	e3530010	 cmp         r3, #0x10
  00964	aa000006	 bge         |$LN12@EMACInit|

; 450  :         *addr++ = 0;

  00968	e59d2020	 ldr         r2, [sp, #0x20]
  0096c	e3a03000	 mov         r3, #0
  00970	e5823000	 str         r3, [r2]
  00974	e59d3020	 ldr         r3, [sp, #0x20]
  00978	e2833004	 add         r3, r3, #4
  0097c	e58d3020	 str         r3, [sp, #0x20]
  00980	eafffff2	 b           |$LN13@EMACInit|
  00984		 |$LN12@EMACInit|

; 451  : 
; 452  :     /* Clear Statistics (do this before setting MacControl register) */
; 453  :     addr = &g_pEmacMod->RXGOODFRAMES;

  00984	e59f3364	 ldr         r3, [pc, #0x364]
  00988	e5933000	 ldr         r3, [r3]
  0098c	e2833c02	 add         r3, r3, #2, 24
  00990	e58d3020	 str         r3, [sp, #0x20]

; 454  :     for(i = 0; i < EMAC_STATS_REGS; i++)

  00994	e3a03000	 mov         r3, #0
  00998	e58d3004	 str         r3, [sp, #4]
  0099c	ea000002	 b           |$LN11@EMACInit|
  009a0		 |$LN10@EMACInit|
  009a0	e59d3004	 ldr         r3, [sp, #4]
  009a4	e2833001	 add         r3, r3, #1
  009a8	e58d3004	 str         r3, [sp, #4]
  009ac		 |$LN11@EMACInit|
  009ac	e59d3004	 ldr         r3, [sp, #4]
  009b0	e3530024	 cmp         r3, #0x24
  009b4	aa000006	 bge         |$LN9@EMACInit|

; 455  :         *addr++ = 0;

  009b8	e59d2020	 ldr         r2, [sp, #0x20]
  009bc	e3a03000	 mov         r3, #0
  009c0	e5823000	 str         r3, [r2]
  009c4	e59d3020	 ldr         r3, [sp, #0x20]
  009c8	e2833004	 add         r3, r3, #4
  009cc	e58d3020	 str         r3, [sp, #0x20]
  009d0	eafffff2	 b           |$LN10@EMACInit|
  009d4		 |$LN9@EMACInit|

; 456  : 
; 457  :     g_pEmacMod->MACHASH1 = 0;

  009d4	e59f3314	 ldr         r3, [pc, #0x314]
  009d8	e5933000	 ldr         r3, [r3]
  009dc	e2832f76	 add         r2, r3, #0x76, 30
  009e0	e3a03000	 mov         r3, #0
  009e4	e5823000	 str         r3, [r2]

; 458  :     g_pEmacMod->MACHASH2 = 0;

  009e8	e59f3300	 ldr         r3, [pc, #0x300]
  009ec	e5933000	 ldr         r3, [r3]
  009f0	e2832f77	 add         r2, r3, #0x77, 30
  009f4	e3a03000	 mov         r3, #0
  009f8	e5823000	 str         r3, [r2]

; 459  : 
; 460  : 
; 461  : 
; 462  :     /* Create RX queue and set receive process in place */
; 463  :     rx_desc = emac_rx_desc;

  009fc	e59f32f4	 ldr         r3, [pc, #0x2F4]
  00a00	e5933000	 ldr         r3, [r3]
  00a04	e58d3018	 str         r3, [sp, #0x18]

; 464  :     emac_rx_active_head = emac_rx_desc;

  00a08	e59f32e8	 ldr         r3, [pc, #0x2E8]
  00a0c	e5932000	 ldr         r2, [r3]
  00a10	e59f32fc	 ldr         r3, [pc, #0x2FC]
  00a14	e5832000	 str         r2, [r3]

; 465  :     for (i = 0; i < EMAC_MAX_RX_BUFFERS; i++) {

  00a18	e3a03000	 mov         r3, #0
  00a1c	e58d3004	 str         r3, [sp, #4]
  00a20	ea000002	 b           |$LN8@EMACInit|
  00a24		 |$LN7@EMACInit|
  00a24	e59d3004	 ldr         r3, [sp, #4]
  00a28	e2833001	 add         r3, r3, #1
  00a2c	e58d3004	 str         r3, [sp, #4]
  00a30		 |$LN8@EMACInit|
  00a30	e59d3004	 ldr         r3, [sp, #4]
  00a34	e3530008	 cmp         r3, #8
  00a38	aa000034	 bge         |$LN6@EMACInit|

; 466  :         if (i != (EMAC_MAX_RX_BUFFERS -1))

  00a3c	e59d3004	 ldr         r3, [sp, #4]
  00a40	e3530007	 cmp         r3, #7
  00a44	0a000012	 beq         |$LN5@EMACInit|

; 467  :         {
; 468  :             rx_desc->next = BD_TO_HW( (UINT32)(rx_desc + 1) );

  00a48	e59d3018	 ldr         r3, [sp, #0x18]
  00a4c	e2933010	 adds        r3, r3, #0x10
  00a50	1a000002	 bne         |$LN35@EMACInit|
  00a54	e3a03000	 mov         r3, #0
  00a58	e58d3038	 str         r3, [sp, #0x38]
  00a5c	ea000008	 b           |$LN36@EMACInit|
  00a60		 |$LN35@EMACInit|
  00a60	e59d3018	 ldr         r3, [sp, #0x18]
  00a64	e2832010	 add         r2, r3, #0x10
  00a68	e59f3284	 ldr         r3, [pc, #0x284]
  00a6c	e5933000	 ldr         r3, [r3]
  00a70	e0422003	 sub         r2, r2, r3
  00a74	e3a0361e	 mov         r3, #0x1E, 12
  00a78	e3833802	 orr         r3, r3, #2, 16
  00a7c	e0823003	 add         r3, r2, r3
  00a80	e58d3038	 str         r3, [sp, #0x38]
  00a84		 |$LN36@EMACInit|
  00a84	e59d2038	 ldr         r2, [sp, #0x38]
  00a88	e59d3018	 ldr         r3, [sp, #0x18]
  00a8c	e5832000	 str         r2, [r3]

; 469  :         }
; 470  :         else

  00a90	ea000005	 b           |$LN4@EMACInit|
  00a94		 |$LN5@EMACInit|

; 471  :         {
; 472  :             emac_rx_active_tail = rx_desc;

  00a94	e59d2018	 ldr         r2, [sp, #0x18]
  00a98	e59f3270	 ldr         r3, [pc, #0x270]
  00a9c	e5832000	 str         r2, [r3]

; 473  :             /* Set the last descriptor's "next" parameter to 0 to end the RX desc list */
; 474  :             rx_desc->next = 0;

  00aa0	e59d2018	 ldr         r2, [sp, #0x18]
  00aa4	e3a03000	 mov         r3, #0
  00aa8	e5823000	 str         r3, [r2]
  00aac		 |$LN4@EMACInit|

; 475  :         }
; 476  :         rx_desc->buffer = OALVAtoPA(dmaBuffer + (i * (EMAC_MAX_ETHERNET_PKT_SIZE + EMAC_PKT_ALIGN)));

  00aac	e59d1004	 ldr         r1, [sp, #4]
  00ab0	e3a03c06	 mov         r3, #6, 24
  00ab4	e0020391	 mul         r2, r1, r3
  00ab8	e59f324c	 ldr         r3, [pc, #0x24C]
  00abc	e5933000	 ldr         r3, [r3]
  00ac0	e0830002	 add         r0, r3, r2
  00ac4	eb000000	 bl          OALVAtoPA
  00ac8	e58d003c	 str         r0, [sp, #0x3C]
  00acc	e59d3018	 ldr         r3, [sp, #0x18]
  00ad0	e2832004	 add         r2, r3, #4
  00ad4	e59d303c	 ldr         r3, [sp, #0x3C]
  00ad8	e5823000	 str         r3, [r2]

; 477  :         rx_desc->BufOffLen = EMAC_MAX_ETHERNET_PKT_SIZE;

  00adc	e59d3018	 ldr         r3, [sp, #0x18]
  00ae0	e2832008	 add         r2, r3, #8
  00ae4	e3a03c05	 mov         r3, #5, 24
  00ae8	e38330ea	 orr         r3, r3, #0xEA
  00aec	e5823000	 str         r3, [r2]

; 478  :         rx_desc->PktFlgLen = EMAC_DSC_FLAG_OWNER;

  00af0	e59d3018	 ldr         r3, [sp, #0x18]
  00af4	e283200c	 add         r2, r3, #0xC
  00af8	e3a03202	 mov         r3, #2, 4
  00afc	e5823000	 str         r3, [r2]

; 479  :         rx_desc++;

  00b00	e59d3018	 ldr         r3, [sp, #0x18]
  00b04	e2833010	 add         r3, r3, #0x10
  00b08	e58d3018	 str         r3, [sp, #0x18]

; 480  :     }

  00b0c	eaffffc4	 b           |$LN7@EMACInit|
  00b10		 |$LN6@EMACInit|

; 481  : 
; 482  : 
; 483  : 
; 484  :     /* Enable TX/RX */
; 485  :     g_pEmacMod->RXMAXLEN = EMAC_MAX_ETHERNET_PKT_SIZE;

  00b10	e59f31d8	 ldr         r3, [pc, #0x1D8]
  00b14	e5933000	 ldr         r3, [r3]
  00b18	e2832f43	 add         r2, r3, #0x43, 30
  00b1c	e3a03c05	 mov         r3, #5, 24
  00b20	e38330ea	 orr         r3, r3, #0xEA
  00b24	e5823000	 str         r3, [r2]

; 486  :     g_pEmacMod->RXBUFFEROFFSET = 0;

  00b28	e59f31c0	 ldr         r3, [pc, #0x1C0]
  00b2c	e5933000	 ldr         r3, [r3]
  00b30	e2832e11	 add         r2, r3, #0x11, 28
  00b34	e3a03000	 mov         r3, #0
  00b38	e5823000	 str         r3, [r2]

; 487  : 
; 488  :     /* No fancy configs - Use this for promiscous for debug - EMAC_RXMBPENABLE_RXCAFEN_ENABLE */
; 489  :     g_pEmacMod->RXMBPENABLE = EMAC_RXMBPENABLE_RXBROADEN;

  00b3c	e59f31ac	 ldr         r3, [pc, #0x1AC]
  00b40	e5933000	 ldr         r3, [r3]
  00b44	e2832c01	 add         r2, r3, #1, 24
  00b48	e3a03a02	 mov         r3, #2, 20
  00b4c	e5823000	 str         r3, [r2]

; 490  : 
; 491  :     /* Enable ch 0 only */
; 492  :     g_pEmacMod->RXUNICASTSET = 0x01;

  00b50	e59f3198	 ldr         r3, [pc, #0x198]
  00b54	e5933000	 ldr         r3, [r3]
  00b58	e2832f41	 add         r2, r3, #0x41, 30
  00b5c	e3a03001	 mov         r3, #1
  00b60	e5823000	 str         r3, [r2]

; 493  : 
; 494  :     /* Clear all unused RX channel interrupts */
; 495  :     g_pEmacMod->RXINTMASKCLEAR = 0xFF;

  00b64	e59f3184	 ldr         r3, [pc, #0x184]
  00b68	e5933000	 ldr         r3, [r3]
  00b6c	e28320ac	 add         r2, r3, #0xAC
  00b70	e3a030ff	 mov         r3, #0xFF
  00b74	e5823000	 str         r3, [r2]

; 496  : 
; 497  :     /* Enable the Rx channel interrupt mask registers.
; 498  :      * Setting channel0   RX channel interrupts
; 499  :      */
; 500  :     g_pEmacMod->RXINTMASKSET = 0x1;

  00b78	e59f3170	 ldr         r3, [pc, #0x170]
  00b7c	e5933000	 ldr         r3, [r3]
  00b80	e28320a8	 add         r2, r3, #0xA8
  00b84	e3a03001	 mov         r3, #1
  00b88	e5823000	 str         r3, [r2]

; 501  : 
; 502  :     /* Enable MII interface and Full duplex mode */
; 503  : 
; 504  :     EnableMDIO();

  00b8c	eb000000	 bl          EnableMDIO

; 505  :     if (LinkIsOK() == FALSE)

  00b90	eb000000	 bl          LinkIsOK
  00b94	e58d0040	 str         r0, [sp, #0x40]
  00b98	e59d3040	 ldr         r3, [sp, #0x40]
  00b9c	e3530000	 cmp         r3, #0
  00ba0	1a000009	 bne         |$LN3@EMACInit|

; 506  :     {
; 507  :         /* Init MDIO & get link state */
; 508  :         if (!PhyAutoNegociate())

  00ba4	eb000000	 bl          PhyAutoNegociate
  00ba8	e58d0044	 str         r0, [sp, #0x44]
  00bac	e59d3044	 ldr         r3, [sp, #0x44]
  00bb0	e3530000	 cmp         r3, #0
  00bb4	1a000004	 bne         |$LN2@EMACInit|

; 509  :         {
; 510  :             RETAILMSG(1,(TEXT("Autonegociation failed. Check the ethernet cable\r\n")));

  00bb8	e59f0148	 ldr         r0, [pc, #0x148]
  00bbc	eb000000	 bl          NKDbgPrintfW

; 511  :             return FALSE;

  00bc0	e3a03000	 mov         r3, #0
  00bc4	e58d3024	 str         r3, [sp, #0x24]
  00bc8	ea000044	 b           |$LN33@EMACInit|
  00bcc		 |$LN2@EMACInit|
  00bcc		 |$LN3@EMACInit|

; 512  :         }
; 513  :     }
; 514  : 
; 515  :     if (GetLinkStatus(&speed,&fullduplex) == FALSE)

  00bcc	e28d101c	 add         r1, sp, #0x1C
  00bd0	e28d0008	 add         r0, sp, #8
  00bd4	eb000000	 bl          GetLinkStatus
  00bd8	e58d0048	 str         r0, [sp, #0x48]
  00bdc	e59d3048	 ldr         r3, [sp, #0x48]
  00be0	e3530000	 cmp         r3, #0
  00be4	1a000002	 bne         |$LN1@EMACInit|

; 516  :     {
; 517  :         return FALSE;

  00be8	e3a03000	 mov         r3, #0
  00bec	e58d3024	 str         r3, [sp, #0x24]
  00bf0	ea00003a	 b           |$LN33@EMACInit|
  00bf4		 |$LN1@EMACInit|

; 518  :     }
; 519  :     g_pEmacMod->MACCONTROL = EMAC_MACCONTROL_MIIEN_ENABLE |
; 520  :         (fullduplex ? EMAC_MACCONTROL_FULLDUPLEX_ENABLE : 0) |
; 521  :         ((speed == SPEED_100MBPS) ? EMAC_MACCONTROL_RMII_SPEED : 0);

  00bf4	e59d301c	 ldr         r3, [sp, #0x1C]
  00bf8	e3530000	 cmp         r3, #0
  00bfc	0a000002	 beq         |$LN37@EMACInit|
  00c00	e3a03001	 mov         r3, #1
  00c04	e58d304c	 str         r3, [sp, #0x4C]
  00c08	ea000001	 b           |$LN38@EMACInit|
  00c0c		 |$LN37@EMACInit|
  00c0c	e3a03000	 mov         r3, #0
  00c10	e58d304c	 str         r3, [sp, #0x4C]
  00c14		 |$LN38@EMACInit|
  00c14	e59d3008	 ldr         r3, [sp, #8]
  00c18	e3530064	 cmp         r3, #0x64
  00c1c	1a000002	 bne         |$LN39@EMACInit|
  00c20	e3a03902	 mov         r3, #2, 18
  00c24	e58d3050	 str         r3, [sp, #0x50]
  00c28	ea000001	 b           |$LN40@EMACInit|
  00c2c		 |$LN39@EMACInit|
  00c2c	e3a03000	 mov         r3, #0
  00c30	e58d3050	 str         r3, [sp, #0x50]
  00c34		 |$LN40@EMACInit|
  00c34	e59d304c	 ldr         r3, [sp, #0x4C]
  00c38	e3832020	 orr         r2, r3, #0x20
  00c3c	e59d3050	 ldr         r3, [sp, #0x50]
  00c40	e1822003	 orr         r2, r2, r3
  00c44	e59f30a4	 ldr         r3, [pc, #0xA4]
  00c48	e5933000	 ldr         r3, [r3]
  00c4c	e2833e16	 add         r3, r3, #0x16, 28
  00c50	e5832000	 str         r2, [r3]

; 522  : 
; 523  :     RETAILMSG(1,(TEXT("Link : %s-duplex %d MBits/s\r\n"),fullduplex?L"Full":L"Half",speed));

  00c54	e59d301c	 ldr         r3, [sp, #0x1C]
  00c58	e3530000	 cmp         r3, #0
  00c5c	0a000002	 beq         |$LN41@EMACInit|
  00c60	e59f309c	 ldr         r3, [pc, #0x9C]
  00c64	e58d3054	 str         r3, [sp, #0x54]
  00c68	ea000001	 b           |$LN42@EMACInit|
  00c6c		 |$LN41@EMACInit|
  00c6c	e59f308c	 ldr         r3, [pc, #0x8C]
  00c70	e58d3054	 str         r3, [sp, #0x54]
  00c74		 |$LN42@EMACInit|
  00c74	e59d2008	 ldr         r2, [sp, #8]
  00c78	e59d1054	 ldr         r1, [sp, #0x54]
  00c7c	e59f0078	 ldr         r0, [pc, #0x78]
  00c80	eb000000	 bl          NKDbgPrintfW

; 524  : 
; 525  :     /* Start receive process */
; 526  :     g_pEmacMod->RX0HDP = BD_TO_HW((UINT32)emac_rx_desc);

  00c84	e59f306c	 ldr         r3, [pc, #0x6C]
  00c88	e5933000	 ldr         r3, [r3]
  00c8c	e3530000	 cmp         r3, #0
  00c90	1a000002	 bne         |$LN43@EMACInit|
  00c94	e3a03000	 mov         r3, #0
  00c98	e58d3058	 str         r3, [sp, #0x58]
  00c9c	ea000008	 b           |$LN44@EMACInit|
  00ca0		 |$LN43@EMACInit|
  00ca0	e59f3050	 ldr         r3, [pc, #0x50]
  00ca4	e5932000	 ldr         r2, [r3]
  00ca8	e59f3044	 ldr         r3, [pc, #0x44]
  00cac	e5933000	 ldr         r3, [r3]
  00cb0	e0422003	 sub         r2, r2, r3
  00cb4	e3a0361e	 mov         r3, #0x1E, 12
  00cb8	e3833802	 orr         r3, r3, #2, 16
  00cbc	e0823003	 add         r3, r2, r3
  00cc0	e58d3058	 str         r3, [sp, #0x58]
  00cc4		 |$LN44@EMACInit|
  00cc4	e59f3024	 ldr         r3, [pc, #0x24]
  00cc8	e5933000	 ldr         r3, [r3]
  00ccc	e2832e62	 add         r2, r3, #0x62, 28
  00cd0	e59d3058	 ldr         r3, [sp, #0x58]
  00cd4	e5823000	 str         r3, [r2]

; 527  : 
; 528  : 
; 529  :     return TRUE;

  00cd8	e3a03001	 mov         r3, #1
  00cdc	e58d3024	 str         r3, [sp, #0x24]
  00ce0		 |$LN33@EMACInit|

; 530  : }

  00ce0	e59d0024	 ldr         r0, [sp, #0x24]
  00ce4	e28dd05c	 add         sp, sp, #0x5C
  00ce8	e89d6000	 ldmia       sp, {sp, lr}
  00cec	e12fff1e	 bx          lr
  00cf0		 |$LN48@EMACInit|
  00cf0		 |$LN49@EMACInit|
  00cf0	00000000	 DCD         |g_pEmacMod|
  00cf4		 |$LN50@EMACInit|
  00cf4	00000000	 DCD         |startOfCPPIArea|
  00cf8		 |$LN51@EMACInit|
  00cf8	00000000	 DCD         |emac_rx_desc|
  00cfc		 |$LN52@EMACInit|
  00cfc	00000000	 DCD         |??_C@_1DM@HDLLGNPK@?$AAL?$AAi?$AAn?$AAk?$AA?5?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?9?$AAd?$AAu?$AAp?$AAl?$AAe?$AAx?$AA?5?$AA?$CF?$AAd?$AA?5?$AAM?$AAB?$AAi?$AAt?$AAs?$AA?1?$AAs?$AA?$AN?$AA?6?$AA?$AA@|
  00d00		 |$LN53@EMACInit|
  00d00	00000000	 DCD         |??_C@_19OMCCBHAG@?$AAH?$AAa?$AAl?$AAf?$AA?$AA@|
  00d04		 |$LN54@EMACInit|
  00d04	00000000	 DCD         |??_C@_19GFKHPIAA@?$AAF?$AAu?$AAl?$AAl?$AA?$AA@|
  00d08		 |$LN55@EMACInit|
  00d08	00000000	 DCD         |??_C@_1GG@POIKKPOP@?$AAA?$AAu?$AAt?$AAo?$AAn?$AAe?$AAg?$AAo?$AAc?$AAi?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?4?$AA?5?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?5?$AAt?$AAh@|
  00d0c		 |$LN56@EMACInit|
  00d0c	00000000	 DCD         |dmaBuffer|
  00d10		 |$LN57@EMACInit|
  00d10	00000000	 DCD         |emac_rx_active_tail|
  00d14		 |$LN58@EMACInit|
  00d14	00000000	 DCD         |emac_rx_active_head|
  00d18		 |$LN59@EMACInit|
  00d18	00000000	 DCD         |g_pEmacSys|
  00d1c		 |$LN60@EMACInit|
  00d1c	00000000	 DCD         |active_phy_addr|
  00d20		 |$LN61@EMACInit|
  00d20	00000000	 DCD         |emac_tx_desc|
  00d24		 |$LN62@EMACInit|
  00d24	00000000	 DCD         |g_pMdio|
  00d28		 |$M43763|

			 ENDP  ; |EMACInit|


  00058			 AREA	 |.pdata|, PDATA
|$T43786| DCD	|$LN6@LinkIsOK|
	DCD	0x40001802
; Function compile flags: /Odtp

  00d28			 AREA	 |.text|, CODE, ARM

  00d28		 |LinkIsOK| PROC

; 248  : {

  00d28		 |$LN6@LinkIsOK|
  00d28	e52de004	 str         lr, [sp, #-4]!
  00d2c	e24dd00c	 sub         sp, sp, #0xC
  00d30		 |$M43783|

; 249  :     UINT16	tmp;
; 250  : 
; 251  :     if (PhyReadReg(active_phy_addr, PHY_BMSR, &tmp) && (tmp & 0x04)) 

  00d30	e28d2000	 add         r2, sp, #0
  00d34	e3a01001	 mov         r1, #1
  00d38	e59f3044	 ldr         r3, [pc, #0x44]
  00d3c	e5d30000	 ldrb        r0, [r3]
  00d40	eb000000	 bl          PhyReadReg
  00d44	e58d0008	 str         r0, [sp, #8]
  00d48	e59d3008	 ldr         r3, [sp, #8]
  00d4c	e3530000	 cmp         r3, #0
  00d50	0a000005	 beq         |$LN1@LinkIsOK|
  00d54	e1dd30b0	 ldrh        r3, [sp]
  00d58	e3130004	 tst         r3, #4
  00d5c	0a000002	 beq         |$LN1@LinkIsOK|

; 252  :     {
; 253  :         return TRUE;

  00d60	e3a03001	 mov         r3, #1
  00d64	e58d3004	 str         r3, [sp, #4]
  00d68	ea000001	 b           |$LN2@LinkIsOK|
  00d6c		 |$LN1@LinkIsOK|

; 254  :     }
; 255  : 
; 256  :     return FALSE;

  00d6c	e3a03000	 mov         r3, #0
  00d70	e58d3004	 str         r3, [sp, #4]
  00d74		 |$LN2@LinkIsOK|

; 257  : }

  00d74	e59d0004	 ldr         r0, [sp, #4]
  00d78	e28dd00c	 add         sp, sp, #0xC
  00d7c	e49de004	 ldr         lr, [sp], #4
  00d80	e12fff1e	 bx          lr
  00d84		 |$LN7@LinkIsOK|
  00d84		 |$LN8@LinkIsOK|
  00d84	00000000	 DCD         |active_phy_addr|
  00d88		 |$M43784|

			 ENDP  ; |LinkIsOK|


  00060			 AREA	 |.pdata|, PDATA
|$T43794| DCD	|$LN13@GetLinkSta|
	DCD	0x40003904
; Function compile flags: /Odtp

  00d88			 AREA	 |.text|, CODE, ARM

  00d88		 |GetLinkStatus| PROC

; 260  : {

  00d88		 |$LN13@GetLinkSta|
  00d88	e1a0c00d	 mov         r12, sp
  00d8c	e92d0003	 stmdb       sp!, {r0, r1}
  00d90	e92d5000	 stmdb       sp!, {r12, lr}
  00d94	e24dd010	 sub         sp, sp, #0x10
  00d98		 |$M43791|

; 261  :     UINT16	anlpar;
; 262  : 
; 263  :     if (LinkIsOK() == FALSE)

  00d98	eb000000	 bl          LinkIsOK
  00d9c	e58d0008	 str         r0, [sp, #8]
  00da0	e59d3008	 ldr         r3, [sp, #8]
  00da4	e3530000	 cmp         r3, #0
  00da8	1a000002	 bne         |$LN8@GetLinkSta|

; 264  :         return FALSE;

  00dac	e3a03000	 mov         r3, #0
  00db0	e58d3004	 str         r3, [sp, #4]
  00db4	ea000027	 b           |$LN9@GetLinkSta|
  00db8		 |$LN8@GetLinkSta|

; 265  : 
; 266  :     if (PhyReadReg(active_phy_addr,PHY_ANLPAR,&anlpar) == FALSE)

  00db8	e28d2000	 add         r2, sp, #0
  00dbc	e3a01005	 mov         r1, #5
  00dc0	e59f30a0	 ldr         r3, [pc, #0xA0]
  00dc4	e5d30000	 ldrb        r0, [r3]
  00dc8	eb000000	 bl          PhyReadReg
  00dcc	e58d000c	 str         r0, [sp, #0xC]
  00dd0	e59d300c	 ldr         r3, [sp, #0xC]
  00dd4	e3530000	 cmp         r3, #0
  00dd8	1a000002	 bne         |$LN7@GetLinkSta|

; 267  :         return FALSE;

  00ddc	e3a03000	 mov         r3, #0
  00de0	e58d3004	 str         r3, [sp, #4]
  00de4	ea00001b	 b           |$LN9@GetLinkSta|
  00de8		 |$LN7@GetLinkSta|

; 268  : 
; 269  :     if (pFullDuplex)

  00de8	e59d301c	 ldr         r3, [sp, #0x1C]
  00dec	e3530000	 cmp         r3, #0
  00df0	0a000009	 beq         |$LN6@GetLinkSta|

; 270  :     {
; 271  :         if (anlpar & (GEN_PHY_ANEG_100DUP | GEN_PHY_ANEG_10DUP ) ) 

  00df4	e1dd30b0	 ldrh        r3, [sp]
  00df8	e3130d05	 tst         r3, #5, 26
  00dfc	0a000003	 beq         |$LN5@GetLinkSta|

; 272  :         {
; 273  :             *pFullDuplex = TRUE;			

  00e00	e59d201c	 ldr         r2, [sp, #0x1C]
  00e04	e3a03001	 mov         r3, #1
  00e08	e5823000	 str         r3, [r2]

; 274  :         } 
; 275  :         else 

  00e0c	ea000002	 b           |$LN4@GetLinkSta|
  00e10		 |$LN5@GetLinkSta|

; 276  :         {
; 277  :             *pFullDuplex = FALSE;

  00e10	e59d201c	 ldr         r2, [sp, #0x1C]
  00e14	e3a03000	 mov         r3, #0
  00e18	e5823000	 str         r3, [r2]
  00e1c		 |$LN4@GetLinkSta|
  00e1c		 |$LN6@GetLinkSta|

; 278  :         }
; 279  :     }
; 280  : 
; 281  :     if (pSpeed)

  00e1c	e59d3018	 ldr         r3, [sp, #0x18]
  00e20	e3530000	 cmp         r3, #0
  00e24	0a000009	 beq         |$LN3@GetLinkSta|

; 282  :     {
; 283  :         if (anlpar & (GEN_PHY_ANEG_100DUP | GEN_PHY_ANEG_100TX ) ) 

  00e28	e1dd30b0	 ldrh        r3, [sp]
  00e2c	e3130d06	 tst         r3, #6, 26
  00e30	0a000003	 beq         |$LN2@GetLinkSta|

; 284  :         {
; 285  :             *pSpeed = SPEED_100MBPS;

  00e34	e59d2018	 ldr         r2, [sp, #0x18]
  00e38	e3a03064	 mov         r3, #0x64
  00e3c	e5823000	 str         r3, [r2]

; 286  : 
; 287  :         } else 

  00e40	ea000002	 b           |$LN1@GetLinkSta|
  00e44		 |$LN2@GetLinkSta|

; 288  :         {
; 289  :             *pSpeed = SPEED_10MBPS;

  00e44	e59d2018	 ldr         r2, [sp, #0x18]
  00e48	e3a0300a	 mov         r3, #0xA
  00e4c	e5823000	 str         r3, [r2]
  00e50		 |$LN1@GetLinkSta|
  00e50		 |$LN3@GetLinkSta|

; 290  :         }
; 291  :     }
; 292  :     return TRUE;

  00e50	e3a03001	 mov         r3, #1
  00e54	e58d3004	 str         r3, [sp, #4]
  00e58		 |$LN9@GetLinkSta|

; 293  : }

  00e58	e59d0004	 ldr         r0, [sp, #4]
  00e5c	e28dd010	 add         sp, sp, #0x10
  00e60	e89d6000	 ldmia       sp, {sp, lr}
  00e64	e12fff1e	 bx          lr
  00e68		 |$LN14@GetLinkSta|
  00e68		 |$LN15@GetLinkSta|
  00e68	00000000	 DCD         |active_phy_addr|
  00e6c		 |$M43792|

			 ENDP  ; |GetLinkStatus|


  00068			 AREA	 |.pdata|, PDATA
|$T43802| DCD	|$LN13@PhyAutoNeg|
	DCD	0x40008902
; Function compile flags: /Odtp

  00e6c			 AREA	 |.text|, CODE, ARM

  00e6c		 |PhyAutoNegociate| PROC

; 297  : {

  00e6c		 |$LN13@PhyAutoNeg|
  00e6c	e52de004	 str         lr, [sp, #-4]!
  00e70	e24dd020	 sub         sp, sp, #0x20
  00e74		 |$M43799|

; 298  :     UINT16	tmp,val;
; 299  :     unsigned long cntr =0;

  00e74	e3a03000	 mov         r3, #0
  00e78	e58d3004	 str         r3, [sp, #4]

; 300  :     if (!PhyReadReg(active_phy_addr, PHY_BMCR, &tmp))

  00e7c	e28d2000	 add         r2, sp, #0
  00e80	e3a01000	 mov         r1, #0
  00e84	e59f3200	 ldr         r3, [pc, #0x200]
  00e88	e5d30000	 ldrb        r0, [r3]
  00e8c	eb000000	 bl          PhyReadReg
  00e90	e58d0010	 str         r0, [sp, #0x10]
  00e94	e59d3010	 ldr         r3, [sp, #0x10]
  00e98	e3530000	 cmp         r3, #0
  00e9c	1a000002	 bne         |$LN8@PhyAutoNeg|

; 301  :     {
; 302  :         return(0);

  00ea0	e3a03000	 mov         r3, #0
  00ea4	e58d300c	 str         r3, [sp, #0xC]
  00ea8	ea000073	 b           |$LN9@PhyAutoNeg|
  00eac		 |$LN8@PhyAutoNeg|

; 303  :     }
; 304  : 
; 305  :     val = tmp | GEN_PHY_CTRL_DUP | GEN_PHY_CTRL_ENA_ANEG | GEN_PHY_CTRL_SPD_SEL ;

  00eac	e1dd30b0	 ldrh        r3, [sp]
  00eb0	e3833c01	 orr         r3, r3, #1, 24
  00eb4	e3833a01	 orr         r3, r3, #1, 20
  00eb8	e3833a02	 orr         r3, r3, #2, 20
  00ebc	e1a03803	 mov         r3, r3, lsl #16
  00ec0	e1a03823	 mov         r3, r3, lsr #16
  00ec4	e1cd30b8	 strh        r3, [sp, #8]

; 306  :     PhyWriteReg(active_phy_addr, PHY_BMCR, val);

  00ec8	e1dd20b8	 ldrh        r2, [sp, #8]
  00ecc	e3a01000	 mov         r1, #0
  00ed0	e59f31b4	 ldr         r3, [pc, #0x1B4]
  00ed4	e5d30000	 ldrb        r0, [r3]
  00ed8	eb000000	 bl          PhyWriteReg

; 307  :     PhyReadReg(active_phy_addr, PHY_BMCR, &val);

  00edc	e28d2008	 add         r2, sp, #8
  00ee0	e3a01000	 mov         r1, #0
  00ee4	e59f31a0	 ldr         r3, [pc, #0x1A0]
  00ee8	e5d30000	 ldrb        r0, [r3]
  00eec	eb000000	 bl          PhyReadReg

; 308  : 
; 309  :     PhyReadReg(active_phy_addr,PHY_ANAR, &val);

  00ef0	e28d2008	 add         r2, sp, #8
  00ef4	e3a01004	 mov         r1, #4
  00ef8	e59f318c	 ldr         r3, [pc, #0x18C]
  00efc	e5d30000	 ldrb        r0, [r3]
  00f00	eb000000	 bl          PhyReadReg

; 310  :     val |= ( GEN_PHY_ANEG_100DUP | GEN_PHY_ANEG_100TX | GEN_PHY_ANEG_10DUP | GEN_PHY_ANEG_10TX );

  00f04	e1dd30b8	 ldrh        r3, [sp, #8]
  00f08	e3833e1e	 orr         r3, r3, #0x1E, 28
  00f0c	e1a03803	 mov         r3, r3, lsl #16
  00f10	e1a03823	 mov         r3, r3, lsr #16
  00f14	e1cd30b8	 strh        r3, [sp, #8]

; 311  :     PhyWriteReg(active_phy_addr, PHY_ANAR, val);

  00f18	e1dd20b8	 ldrh        r2, [sp, #8]
  00f1c	e3a01004	 mov         r1, #4
  00f20	e59f3164	 ldr         r3, [pc, #0x164]
  00f24	e5d30000	 ldrb        r0, [r3]
  00f28	eb000000	 bl          PhyWriteReg

; 312  :     PhyReadReg(active_phy_addr,PHY_ANAR, &val);

  00f2c	e28d2008	 add         r2, sp, #8
  00f30	e3a01004	 mov         r1, #4
  00f34	e59f3150	 ldr         r3, [pc, #0x150]
  00f38	e5d30000	 ldrb        r0, [r3]
  00f3c	eb000000	 bl          PhyReadReg

; 313  : 
; 314  : 
; 315  :     PhyReadReg(active_phy_addr, PHY_BMCR, &tmp);

  00f40	e28d2000	 add         r2, sp, #0
  00f44	e3a01000	 mov         r1, #0
  00f48	e59f313c	 ldr         r3, [pc, #0x13C]
  00f4c	e5d30000	 ldrb        r0, [r3]
  00f50	eb000000	 bl          PhyReadReg

; 316  : 
; 317  :     /* Restart Auto_negotiation  */
; 318  :     tmp |= PHY_BMCR_RST_NEG;

  00f54	e1dd30b0	 ldrh        r3, [sp]
  00f58	e3833c02	 orr         r3, r3, #2, 24
  00f5c	e1a03803	 mov         r3, r3, lsl #16
  00f60	e1a03823	 mov         r3, r3, lsr #16
  00f64	e1cd30b0	 strh        r3, [sp]

; 319  :     PhyWriteReg(active_phy_addr, PHY_BMCR, tmp);

  00f68	e1dd20b0	 ldrh        r2, [sp]
  00f6c	e3a01000	 mov         r1, #0
  00f70	e59f3114	 ldr         r3, [pc, #0x114]
  00f74	e5d30000	 ldrb        r0, [r3]
  00f78	eb000000	 bl          PhyWriteReg
  00f7c		 |$LN7@PhyAutoNeg|

; 320  : 
; 321  :     /*check AutoNegotiate complete */
; 322  :     do{
; 323  :         OALStall(10000);

  00f7c	e3a00c27	 mov         r0, #0x27, 24
  00f80	e3800010	 orr         r0, r0, #0x10
  00f84	eb000000	 bl          OALStall

; 324  :         cntr++;

  00f88	e59d3004	 ldr         r3, [sp, #4]
  00f8c	e2833001	 add         r3, r3, #1
  00f90	e58d3004	 str         r3, [sp, #4]

; 325  : 
; 326  :         if (PhyReadReg(active_phy_addr, PHY_BMSR, &tmp)){

  00f94	e28d2000	 add         r2, sp, #0
  00f98	e3a01001	 mov         r1, #1
  00f9c	e59f30e8	 ldr         r3, [pc, #0xE8]
  00fa0	e5d30000	 ldrb        r0, [r3]
  00fa4	eb000000	 bl          PhyReadReg
  00fa8	e58d0014	 str         r0, [sp, #0x14]
  00fac	e59d3014	 ldr         r3, [sp, #0x14]
  00fb0	e3530000	 cmp         r3, #0
  00fb4	0a000003	 beq         |$LN4@PhyAutoNeg|

; 327  :             if(tmp & PHY_BMSR_AUTN_COMP)

  00fb8	e1dd30b0	 ldrh        r3, [sp]
  00fbc	e3130020	 tst         r3, #0x20
  00fc0	0a000000	 beq         |$LN3@PhyAutoNeg|

; 328  :             {
; 329  :                 //autoneg complete
; 330  :                 break;

  00fc4	ea000002	 b           |$LN5@PhyAutoNeg|
  00fc8		 |$LN3@PhyAutoNeg|
  00fc8		 |$LN4@PhyAutoNeg|

; 331  :             }
; 332  :         }
; 333  :     }while(cntr < 200 );

  00fc8	e59d3004	 ldr         r3, [sp, #4]
  00fcc	e35300c8	 cmp         r3, #0xC8
  00fd0	3affffe9	 bcc         |$LN7@PhyAutoNeg|
  00fd4		 |$LN5@PhyAutoNeg|

; 334  : 
; 335  :     if (!PhyReadReg(active_phy_addr, PHY_BMSR, &tmp))

  00fd4	e28d2000	 add         r2, sp, #0
  00fd8	e3a01001	 mov         r1, #1
  00fdc	e59f30a8	 ldr         r3, [pc, #0xA8]
  00fe0	e5d30000	 ldrb        r0, [r3]
  00fe4	eb000000	 bl          PhyReadReg
  00fe8	e58d0018	 str         r0, [sp, #0x18]
  00fec	e59d3018	 ldr         r3, [sp, #0x18]
  00ff0	e3530000	 cmp         r3, #0
  00ff4	1a000002	 bne         |$LN2@PhyAutoNeg|

; 336  :         return(0);

  00ff8	e3a03000	 mov         r3, #0
  00ffc	e58d300c	 str         r3, [sp, #0xC]
  01000	ea00001d	 b           |$LN9@PhyAutoNeg|
  01004		 |$LN2@PhyAutoNeg|

; 337  : 
; 338  :     PhyReadReg(active_phy_addr,PHY_BMCR,&val);

  01004	e28d2008	 add         r2, sp, #8
  01008	e3a01000	 mov         r1, #0
  0100c	e59f3078	 ldr         r3, [pc, #0x78]
  01010	e5d30000	 ldrb        r0, [r3]
  01014	eb000000	 bl          PhyReadReg

; 339  : 
; 340  :     PhyReadReg(active_phy_addr,PHY_ANAR,&val);

  01018	e28d2008	 add         r2, sp, #8
  0101c	e3a01004	 mov         r1, #4
  01020	e59f3064	 ldr         r3, [pc, #0x64]
  01024	e5d30000	 ldrb        r0, [r3]
  01028	eb000000	 bl          PhyReadReg

; 341  : 
; 342  :     PhyReadReg(active_phy_addr,PHY_ANLPAR,&val);

  0102c	e28d2008	 add         r2, sp, #8
  01030	e3a01005	 mov         r1, #5
  01034	e59f3050	 ldr         r3, [pc, #0x50]
  01038	e5d30000	 ldrb        r0, [r3]
  0103c	eb000000	 bl          PhyReadReg

; 343  : 
; 344  :     PhyReadReg(active_phy_addr,PHY_ANER,&val);

  01040	e28d2008	 add         r2, sp, #8
  01044	e3a01006	 mov         r1, #6
  01048	e59f303c	 ldr         r3, [pc, #0x3C]
  0104c	e5d30000	 ldrb        r0, [r3]
  01050	eb000000	 bl          PhyReadReg

; 345  : 
; 346  : 
; 347  :     if (!(tmp & PHY_BMSR_AUTN_COMP))

  01054	e1dd30b0	 ldrh        r3, [sp]
  01058	e3130020	 tst         r3, #0x20
  0105c	1a000002	 bne         |$LN1@PhyAutoNeg|

; 348  :         return(0);

  01060	e3a03000	 mov         r3, #0
  01064	e58d300c	 str         r3, [sp, #0xC]
  01068	ea000003	 b           |$LN9@PhyAutoNeg|
  0106c		 |$LN1@PhyAutoNeg|

; 349  : 
; 350  :     return(LinkIsOK());

  0106c	eb000000	 bl          LinkIsOK
  01070	e58d001c	 str         r0, [sp, #0x1C]
  01074	e59d301c	 ldr         r3, [sp, #0x1C]
  01078	e58d300c	 str         r3, [sp, #0xC]
  0107c		 |$LN9@PhyAutoNeg|

; 351  : }

  0107c	e59d000c	 ldr         r0, [sp, #0xC]
  01080	e28dd020	 add         sp, sp, #0x20
  01084	e49de004	 ldr         lr, [sp], #4
  01088	e12fff1e	 bx          lr
  0108c		 |$LN14@PhyAutoNeg|
  0108c		 |$LN15@PhyAutoNeg|
  0108c	00000000	 DCD         |active_phy_addr|
  01090		 |$M43800|

			 ENDP  ; |PhyAutoNegociate|

	EXPORT	|??_C@_1CC@OLKAILJK@?$AAP?$AAk?$AAt?$AAF?$AAl?$AAg?$AAL?$AAe?$AAn?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CC@PFGBJBME@?$AAB?$AAu?$AAf?$AAO?$AAf?$AAf?$AAL?$AAe?$AAn?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BM@JIDBHF@?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BI@OEMIKODG@?$AAn?$AAe?$AAx?$AAt?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CE@GEFIDPNM@?$AAd?$AAe?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AAo?$AAr?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|DumpDesc|

  00070			 AREA	 |.pdata|, PDATA
|$T43809| DCD	|$LN5@DumpDesc|
	DCD	0x40002003

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CC@OLKAILJK@?$AAP?$AAk?$AAt?$AAF?$AAl?$AAg?$AAL?$AAe?$AAn?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "P"
	DCB	0x0, "k", 0x0, "t", 0x0, "F", 0x0, "l", 0x0, "g", 0x0, "L"
	DCB	0x0, "e", 0x0, "n", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CC@PFGBJBME@?$AAB?$AAu?$AAf?$AAO?$AAf?$AAf?$AAL?$AAe?$AAn?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "B"
	DCB	0x0, "u", 0x0, "f", 0x0, "O", 0x0, "f", 0x0, "f", 0x0, "L"
	DCB	0x0, "e", 0x0, "n", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@JIDBHF@?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "b"
	DCB	0x0, "u", 0x0, "f", 0x0, "f", 0x0, "e", 0x0, "r", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BI@OEMIKODG@?$AAn?$AAe?$AAx?$AAt?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "n"
	DCB	0x0, "e", 0x0, "x", 0x0, "t", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@GEFIDPNM@?$AAd?$AAe?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AAo?$AAr?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "d"
	DCB	0x0, "e", 0x0, "s", 0x0, "c", 0x0, "r", 0x0, "i", 0x0, "p"
	DCB	0x0, "t", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  01090			 AREA	 |.text|, CODE, ARM

  01090		 |DumpDesc| PROC

; 533  : {

  01090		 |$LN5@DumpDesc|
  01090	e1a0c00d	 mov         r12, sp
  01094	e92d0001	 stmdb       sp!, {r0}
  01098	e92d5000	 stmdb       sp!, {r12, lr}
  0109c		 |$M43806|

; 534  : 	UNREFERENCED_PARAMETER(pDdesc);
; 535  : 
; 536  :     RETAILMSG(1,(TEXT("descriptor 0x%x\r\n"),pDdesc));

  0109c	e59d1008	 ldr         r1, [sp, #8]
  010a0	e59f0064	 ldr         r0, [pc, #0x64]
  010a4	eb000000	 bl          NKDbgPrintfW

; 537  :     RETAILMSG(1,(TEXT("next 0x%x\r\n"),pDdesc->next));

  010a8	e59d3008	 ldr         r3, [sp, #8]
  010ac	e5931000	 ldr         r1, [r3]
  010b0	e59f0050	 ldr         r0, [pc, #0x50]
  010b4	eb000000	 bl          NKDbgPrintfW

; 538  :     RETAILMSG(1,(TEXT("buffer 0x%x\r\n"),pDdesc->buffer));

  010b8	e59d3008	 ldr         r3, [sp, #8]
  010bc	e2833004	 add         r3, r3, #4
  010c0	e5931000	 ldr         r1, [r3]
  010c4	e59f0038	 ldr         r0, [pc, #0x38]
  010c8	eb000000	 bl          NKDbgPrintfW

; 539  :     RETAILMSG(1,(TEXT("BufOffLen 0x%x\r\n"),pDdesc->BufOffLen));

  010cc	e59d3008	 ldr         r3, [sp, #8]
  010d0	e2833008	 add         r3, r3, #8
  010d4	e5931000	 ldr         r1, [r3]
  010d8	e59f0020	 ldr         r0, [pc, #0x20]
  010dc	eb000000	 bl          NKDbgPrintfW

; 540  :     RETAILMSG(1,(TEXT("PktFlgLen 0x%x\r\n"),pDdesc->PktFlgLen));

  010e0	e59d3008	 ldr         r3, [sp, #8]
  010e4	e283300c	 add         r3, r3, #0xC
  010e8	e5931000	 ldr         r1, [r3]
  010ec	e59f0008	 ldr         r0, [pc, #8]
  010f0	eb000000	 bl          NKDbgPrintfW

; 541  : }

  010f4	e89d6000	 ldmia       sp, {sp, lr}
  010f8	e12fff1e	 bx          lr
  010fc		 |$LN6@DumpDesc|
  010fc		 |$LN7@DumpDesc|
  010fc	00000000	 DCD         |??_C@_1CC@OLKAILJK@?$AAP?$AAk?$AAt?$AAF?$AAl?$AAg?$AAL?$AAe?$AAn?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  01100		 |$LN8@DumpDesc|
  01100	00000000	 DCD         |??_C@_1CC@PFGBJBME@?$AAB?$AAu?$AAf?$AAO?$AAf?$AAf?$AAL?$AAe?$AAn?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  01104		 |$LN9@DumpDesc|
  01104	00000000	 DCD         |??_C@_1BM@JIDBHF@?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  01108		 |$LN10@DumpDesc|
  01108	00000000	 DCD         |??_C@_1BI@OEMIKODG@?$AAn?$AAe?$AAx?$AAt?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  0110c		 |$LN11@DumpDesc|
  0110c	00000000	 DCD         |??_C@_1CE@GEFIDPNM@?$AAd?$AAe?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AAo?$AAr?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  01110		 |$M43807|

			 ENDP  ; |DumpDesc|

	EXPORT	|EMACSendFrame|
	IMPORT	|memcpy|

  00078			 AREA	 |.pdata|, PDATA
|$T43824| DCD	|$LN10@EMACSendFr|
	DCD	0x40005b04
; Function compile flags: /Odtp

  01110			 AREA	 |.text|, CODE, ARM

  01110		 |EMACSendFrame| PROC

; 543  : {

  01110		 |$LN10@EMACSendFr|
  01110	e1a0c00d	 mov         r12, sp
  01114	e92d0003	 stmdb       sp!, {r0, r1}
  01118	e92d5000	 stmdb       sp!, {r12, lr}
  0111c	e24dd014	 sub         sp, sp, #0x14
  01120		 |$M43821|

; 544  :     int tx_send_loop = 0;

  01120	e3a03000	 mov         r3, #0
  01124	e58d3000	 str         r3, [sp]

; 545  :     UCHAR* buffer = (dmaBuffer + (EMAC_MAX_RX_BUFFERS * (EMAC_MAX_ETHERNET_PKT_SIZE + EMAC_PKT_ALIGN)));

  01128	e59f3148	 ldr         r3, [pc, #0x148]
  0112c	e5933000	 ldr         r3, [r3]
  01130	e2833a03	 add         r3, r3, #3, 20
  01134	e58d3004	 str         r3, [sp, #4]

; 546  :     //	RETAILMSG(1,(TEXT("sending %d bytes (0x%x)(0x%x)\r\n"),length,src_buffer,OALVAtoPA((UINT8 *) src_buffer)));
; 547  : 
; 548  :     /* Check packet size and if < EMAC_MIN_ETHERNET_PKT_SIZE, pad it up */
; 549  :     if (length < EMAC_MIN_ETHERNET_PKT_SIZE) 

  01138	e59d3020	 ldr         r3, [sp, #0x20]
  0113c	e353003c	 cmp         r3, #0x3C
  01140	2a000001	 bcs         |$LN3@EMACSendFr|

; 550  :     {
; 551  :         length = EMAC_MIN_ETHERNET_PKT_SIZE;

  01144	e3a0303c	 mov         r3, #0x3C
  01148	e58d3020	 str         r3, [sp, #0x20]
  0114c		 |$LN3@EMACSendFr|

; 552  :     }
; 553  : 
; 554  :     memcpy(buffer,src_buffer,length);

  0114c	e59d2020	 ldr         r2, [sp, #0x20]
  01150	e59d101c	 ldr         r1, [sp, #0x1C]
  01154	e59d0004	 ldr         r0, [sp, #4]
  01158	eb000000	 bl          memcpy

; 555  :     /* Populate the TX descriptor */
; 556  :     emac_tx_desc->next = 0;

  0115c	e59f3110	 ldr         r3, [pc, #0x110]
  01160	e5932000	 ldr         r2, [r3]
  01164	e3a03000	 mov         r3, #0
  01168	e5823000	 str         r3, [r2]

; 557  :     emac_tx_desc->buffer = OALVAtoPA((UINT8 *) buffer);

  0116c	e59d0004	 ldr         r0, [sp, #4]
  01170	eb000000	 bl          OALVAtoPA
  01174	e58d000c	 str         r0, [sp, #0xC]
  01178	e59f30f4	 ldr         r3, [pc, #0xF4]
  0117c	e5933000	 ldr         r3, [r3]
  01180	e2832004	 add         r2, r3, #4
  01184	e59d300c	 ldr         r3, [sp, #0xC]
  01188	e5823000	 str         r3, [r2]

; 558  :     emac_tx_desc->BufOffLen = (length & 0xffff);

  0118c	e59d2020	 ldr         r2, [sp, #0x20]
  01190	e3a03cff	 mov         r3, #0xFF, 24
  01194	e38330ff	 orr         r3, r3, #0xFF
  01198	e0022003	 and         r2, r2, r3
  0119c	e59f30d0	 ldr         r3, [pc, #0xD0]
  011a0	e5933000	 ldr         r3, [r3]
  011a4	e2833008	 add         r3, r3, #8
  011a8	e5832000	 str         r2, [r3]

; 559  :     emac_tx_desc->PktFlgLen = ((length & 0xffff) |
; 560  :         EMAC_DSC_FLAG_SOP |
; 561  :         EMAC_DSC_FLAG_OWNER |
; 562  :         EMAC_DSC_FLAG_EOP);

  011ac	e59d2020	 ldr         r2, [sp, #0x20]
  011b0	e3a03cff	 mov         r3, #0xFF, 24
  011b4	e38330ff	 orr         r3, r3, #0xFF
  011b8	e0023003	 and         r3, r2, r3
  011bc	e3833102	 orr         r3, r3, #2, 2
  011c0	e3833202	 orr         r3, r3, #2, 4
  011c4	e3832101	 orr         r2, r3, #1, 2
  011c8	e59f30a4	 ldr         r3, [pc, #0xA4]
  011cc	e5933000	 ldr         r3, [r3]
  011d0	e283300c	 add         r3, r3, #0xC
  011d4	e5832000	 str         r2, [r3]

; 563  : 
; 564  :     //	DumpDesc(emac_tx_desc);
; 565  : 
; 566  : 
; 567  :     /* Send the packet */
; 568  :     g_pEmacMod->TX0HDP = BD_TO_HW((unsigned int) emac_tx_desc);

  011d8	e59f3094	 ldr         r3, [pc, #0x94]
  011dc	e5933000	 ldr         r3, [r3]
  011e0	e3530000	 cmp         r3, #0
  011e4	1a000002	 bne         |$LN6@EMACSendFr|
  011e8	e3a03000	 mov         r3, #0
  011ec	e58d3010	 str         r3, [sp, #0x10]
  011f0	ea000008	 b           |$LN7@EMACSendFr|
  011f4		 |$LN6@EMACSendFr|
  011f4	e59f3078	 ldr         r3, [pc, #0x78]
  011f8	e5932000	 ldr         r2, [r3]
  011fc	e59f306c	 ldr         r3, [pc, #0x6C]
  01200	e5933000	 ldr         r3, [r3]
  01204	e0422003	 sub         r2, r2, r3
  01208	e3a0361e	 mov         r3, #0x1E, 12
  0120c	e3833802	 orr         r3, r3, #2, 16
  01210	e0823003	 add         r3, r2, r3
  01214	e58d3010	 str         r3, [sp, #0x10]
  01218		 |$LN7@EMACSendFr|
  01218	e59f304c	 ldr         r3, [pc, #0x4C]
  0121c	e5933000	 ldr         r3, [r3]
  01220	e2832c06	 add         r2, r3, #6, 24
  01224	e59d3010	 ldr         r3, [sp, #0x10]
  01228	e5823000	 str         r3, [r2]
  0122c		 |$LN2@EMACSendFr|

; 569  : 
; 570  :     /* Wait for packet to complete or link down */
; 571  :     while (!(g_pEmacMod->TXINTSTATRAW & 0x01))

  0122c	e59f3038	 ldr         r3, [pc, #0x38]
  01230	e5933000	 ldr         r3, [r3]
  01234	e2833080	 add         r3, r3, #0x80
  01238	e5933000	 ldr         r3, [r3]
  0123c	e3130001	 tst         r3, #1
  01240	1a000003	 bne         |$LN1@EMACSendFr|

; 572  :     {
; 573  :         tx_send_loop++;

  01244	e59d3000	 ldr         r3, [sp]
  01248	e2833001	 add         r3, r3, #1
  0124c	e58d3000	 str         r3, [sp]

; 574  :     }

  01250	eafffff5	 b           |$LN2@EMACSendFr|
  01254		 |$LN1@EMACSendFr|

; 575  : 
; 576  :     return 0;

  01254	e3a03000	 mov         r3, #0
  01258	e1cd30b8	 strh        r3, [sp, #8]

; 577  : }

  0125c	e1dd00b8	 ldrh        r0, [sp, #8]
  01260	e28dd014	 add         sp, sp, #0x14
  01264	e89d6000	 ldmia       sp, {sp, lr}
  01268	e12fff1e	 bx          lr
  0126c		 |$LN11@EMACSendFr|
  0126c		 |$LN12@EMACSendFr|
  0126c	00000000	 DCD         |g_pEmacMod|
  01270		 |$LN13@EMACSendFr|
  01270	00000000	 DCD         |startOfCPPIArea|
  01274		 |$LN14@EMACSendFr|
  01274	00000000	 DCD         |emac_tx_desc|
  01278		 |$LN15@EMACSendFr|
  01278	00000000	 DCD         |dmaBuffer|
  0127c		 |$M43822|

			 ENDP  ; |EMACSendFrame|

	EXPORT	|??_C@_1EK@JONNMNMN@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAe?$AAm?$AAa?$AAc?$AA_?$AAr?$AAc?$AAv?$AA_?$AAp?$AAk?$AAt?$AA?3?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAi?$AAn?$AA?5?$AAp?$AAa?$AAc@| [ DATA ] ; `string'
	EXPORT	|EMACGetFrame|
	IMPORT	|SocAckInterrupt|

  00080			 AREA	 |.pdata|, PDATA
|$T43847| DCD	|$LN27@EMACGetFra|
	DCD	0x40010004

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EK@JONNMNMN@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAe?$AAm?$AAa?$AAc?$AA_?$AAr?$AAc?$AAv?$AA_?$AAp?$AAk?$AAt?$AA?3?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAi?$AAn?$AA?5?$AAp?$AAa?$AAc@| DCB "W"
	DCB	0x0, "A", 0x0, "R", 0x0, "N", 0x0, ":", 0x0, " ", 0x0, "e"
	DCB	0x0, "m", 0x0, "a", 0x0, "c", 0x0, "_", 0x0, "r", 0x0, "c"
	DCB	0x0, "v", 0x0, "_", 0x0, "p", 0x0, "k", 0x0, "t", 0x0, ":"
	DCB	0x0, " ", 0x0, "E", 0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r"
	DCB	0x0, " ", 0x0, "i", 0x0, "n", 0x0, " ", 0x0, "p", 0x0, "a"
	DCB	0x0, "c", 0x0, "k", 0x0, "e", 0x0, "t", 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Odtp

  0127c			 AREA	 |.text|, CODE, ARM

  0127c		 |EMACGetFrame| PROC

; 580  : {

  0127c		 |$LN27@EMACGetFra|
  0127c	e1a0c00d	 mov         r12, sp
  01280	e92d0003	 stmdb       sp!, {r0, r1}
  01284	e92d5000	 stmdb       sp!, {r12, lr}
  01288	e24dd034	 sub         sp, sp, #0x34
  0128c		 |$M43844|

; 581  :     EMAC_DESC *rx_curr_desc;
; 582  :     EMAC_DESC *curr_desc;
; 583  :     EMAC_DESC *tail_desc;
; 584  :     int status, ret = -1;

  0128c	e3e03000	 mvn         r3, #0
  01290	e58d3008	 str         r3, [sp, #8]

; 585  :     static int			emac_rx_queue_active = 1;
; 586  : 
; 587  : 
; 588  :     *length = 0;

  01294	e59d2040	 ldr         r2, [sp, #0x40]
  01298	e3a03000	 mov         r3, #0
  0129c	e1c230b0	 strh        r3, [r2]

; 589  :     rx_curr_desc = emac_rx_active_head;

  012a0	e59f33cc	 ldr         r3, [pc, #0x3CC]
  012a4	e5933000	 ldr         r3, [r3]
  012a8	e58d3004	 str         r3, [sp, #4]

; 590  :     status = rx_curr_desc->PktFlgLen;

  012ac	e59d3004	 ldr         r3, [sp, #4]
  012b0	e283300c	 add         r3, r3, #0xC
  012b4	e5933000	 ldr         r3, [r3]
  012b8	e58d3010	 str         r3, [sp, #0x10]

; 591  :     if ((rx_curr_desc) && ((status & EMAC_DSC_FLAG_OWNER) == 0)) 

  012bc	e59d3004	 ldr         r3, [sp, #4]
  012c0	e3530000	 cmp         r3, #0
  012c4	0a0000d8	 beq         |$LN10@EMACGetFra|
  012c8	e59d3010	 ldr         r3, [sp, #0x10]
  012cc	e3130202	 tst         r3, #2, 4
  012d0	1a0000d5	 bne         |$LN10@EMACGetFra|

; 592  :     {
; 593  :         if (status & EMAC_DSC_RX_ERROR_FRAME) 

  012d4	e59d3010	 ldr         r3, [sp, #0x10]
  012d8	e31307ff	 tst         r3, #0xFF, 14
  012dc	0a000002	 beq         |$LN9@EMACGetFra|

; 594  :         {
; 595  :             /* Error in packet - discard it and requeue desc */
; 596  :             RETAILMSG (1, (L"WARN: emac_rcv_pkt: Error in packet\n"));

  012e0	e59f0390	 ldr         r0, [pc, #0x390]
  012e4	eb000000	 bl          NKDbgPrintfW

; 597  :         } else 

  012e8	ea00001b	 b           |$LN8@EMACGetFra|
  012ec		 |$LN9@EMACGetFra|

; 598  :         {
; 599  :             ret = rx_curr_desc->BufOffLen & 0xffff;

  012ec	e59d3004	 ldr         r3, [sp, #4]
  012f0	e2833008	 add         r3, r3, #8
  012f4	e5932000	 ldr         r2, [r3]
  012f8	e3a03cff	 mov         r3, #0xFF, 24
  012fc	e38330ff	 orr         r3, r3, #0xFF
  01300	e0023003	 and         r3, r2, r3
  01304	e58d3008	 str         r3, [sp, #8]

; 600  :             // packet is good...copy to input buffer.
; 601  :             *length = (USHORT)(rx_curr_desc->BufOffLen & 0xffff);

  01308	e59d3004	 ldr         r3, [sp, #4]
  0130c	e2833008	 add         r3, r3, #8
  01310	e5932000	 ldr         r2, [r3]
  01314	e3a03cff	 mov         r3, #0xFF, 24
  01318	e38330ff	 orr         r3, r3, #0xFF
  0131c	e0023003	 and         r3, r2, r3
  01320	e1a02803	 mov         r2, r3, lsl #16
  01324	e1a02822	 mov         r2, r2, lsr #16
  01328	e59d3040	 ldr         r3, [sp, #0x40]
  0132c	e1c320b0	 strh        r2, [r3]

; 602  :             memcpy(dest_buffer, OALPAtoUA(rx_curr_desc->buffer), *length);

  01330	e3a01000	 mov         r1, #0
  01334	e59d3004	 ldr         r3, [sp, #4]
  01338	e2833004	 add         r3, r3, #4
  0133c	e5930000	 ldr         r0, [r3]
  01340	eb000000	 bl          OALPAtoVA
  01344	e58d0018	 str         r0, [sp, #0x18]
  01348	e59d3040	 ldr         r3, [sp, #0x40]
  0134c	e1d320b0	 ldrh        r2, [r3]
  01350	e59d1018	 ldr         r1, [sp, #0x18]
  01354	e59d003c	 ldr         r0, [sp, #0x3C]
  01358	eb000000	 bl          memcpy
  0135c		 |$LN8@EMACGetFra|

; 603  :             //RETAILMSG(1,(TEXT("received 1 frame : %d  bytes\r\n"), *length));
; 604  :             //			dumpPacket(dest_buffer, *length);
; 605  :         }
; 606  : 
; 607  :         /* Ack received packet descriptor */
; 608  :         g_pEmacMod->RX0CP = BD_TO_HW((unsigned int) rx_curr_desc);

  0135c	e59d3004	 ldr         r3, [sp, #4]
  01360	e3530000	 cmp         r3, #0
  01364	1a000002	 bne         |$LN13@EMACGetFra|
  01368	e3a03000	 mov         r3, #0
  0136c	e58d301c	 str         r3, [sp, #0x1C]
  01370	ea000007	 b           |$LN14@EMACGetFra|
  01374		 |$LN13@EMACGetFra|
  01374	e59d2004	 ldr         r2, [sp, #4]
  01378	e59f32e8	 ldr         r3, [pc, #0x2E8]
  0137c	e5933000	 ldr         r3, [r3]
  01380	e0422003	 sub         r2, r2, r3
  01384	e3a0361e	 mov         r3, #0x1E, 12
  01388	e3833802	 orr         r3, r3, #2, 16
  0138c	e0823003	 add         r3, r2, r3
  01390	e58d301c	 str         r3, [sp, #0x1C]
  01394		 |$LN14@EMACGetFra|
  01394	e59f32c8	 ldr         r3, [pc, #0x2C8]
  01398	e5933000	 ldr         r3, [r3]
  0139c	e2832e66	 add         r2, r3, #0x66, 28
  013a0	e59d301c	 ldr         r3, [sp, #0x1C]
  013a4	e5823000	 str         r3, [r2]

; 609  :         curr_desc = rx_curr_desc;

  013a8	e59d3004	 ldr         r3, [sp, #4]
  013ac	e58d3000	 str         r3, [sp]

; 610  :         emac_rx_active_head =
; 611  :             (EMAC_DESC *) (HW_TO_BD(rx_curr_desc->next));

  013b0	e59d3004	 ldr         r3, [sp, #4]
  013b4	e5933000	 ldr         r3, [r3]
  013b8	e3530000	 cmp         r3, #0
  013bc	1a000002	 bne         |$LN15@EMACGetFra|
  013c0	e3a03000	 mov         r3, #0
  013c4	e58d3020	 str         r3, [sp, #0x20]
  013c8	ea000008	 b           |$LN16@EMACGetFra|
  013cc		 |$LN15@EMACGetFra|
  013cc	e59d3004	 ldr         r3, [sp, #4]
  013d0	e5932000	 ldr         r2, [r3]
  013d4	e3a0361e	 mov         r3, #0x1E, 12
  013d8	e3833802	 orr         r3, r3, #2, 16
  013dc	e0422003	 sub         r2, r2, r3
  013e0	e59f3280	 ldr         r3, [pc, #0x280]
  013e4	e5933000	 ldr         r3, [r3]
  013e8	e0833002	 add         r3, r3, r2
  013ec	e58d3020	 str         r3, [sp, #0x20]
  013f0		 |$LN16@EMACGetFra|
  013f0	e59d2020	 ldr         r2, [sp, #0x20]
  013f4	e59f3278	 ldr         r3, [pc, #0x278]
  013f8	e5832000	 str         r2, [r3]

; 612  : 
; 613  : 
; 614  :         if (status & EMAC_DSC_FLAG_EOQ) 

  013fc	e59d3010	 ldr         r3, [sp, #0x10]
  01400	e3130201	 tst         r3, #1, 4
  01404	0a00001c	 beq         |$LN7@EMACGetFra|

; 615  :         {
; 616  :             if (emac_rx_active_head) 

  01408	e59f3264	 ldr         r3, [pc, #0x264]
  0140c	e5933000	 ldr         r3, [r3]
  01410	e3530000	 cmp         r3, #0
  01414	0a000015	 beq         |$LN6@EMACGetFra|

; 617  :             {
; 618  :                 g_pEmacMod->RX0HDP =
; 619  :                     BD_TO_HW((unsigned int) emac_rx_active_head);

  01418	e59f3254	 ldr         r3, [pc, #0x254]
  0141c	e5933000	 ldr         r3, [r3]
  01420	e3530000	 cmp         r3, #0
  01424	1a000002	 bne         |$LN17@EMACGetFra|
  01428	e3a03000	 mov         r3, #0
  0142c	e58d3024	 str         r3, [sp, #0x24]
  01430	ea000008	 b           |$LN18@EMACGetFra|
  01434		 |$LN17@EMACGetFra|
  01434	e59f3238	 ldr         r3, [pc, #0x238]
  01438	e5932000	 ldr         r2, [r3]
  0143c	e59f3224	 ldr         r3, [pc, #0x224]
  01440	e5933000	 ldr         r3, [r3]
  01444	e0422003	 sub         r2, r2, r3
  01448	e3a0361e	 mov         r3, #0x1E, 12
  0144c	e3833802	 orr         r3, r3, #2, 16
  01450	e0823003	 add         r3, r2, r3
  01454	e58d3024	 str         r3, [sp, #0x24]
  01458		 |$LN18@EMACGetFra|
  01458	e59f3204	 ldr         r3, [pc, #0x204]
  0145c	e5933000	 ldr         r3, [r3]
  01460	e2832e62	 add         r2, r3, #0x62, 28
  01464	e59d3024	 ldr         r3, [sp, #0x24]
  01468	e5823000	 str         r3, [r2]

; 620  :             } 
; 621  :             else 

  0146c	ea000002	 b           |$LN5@EMACGetFra|
  01470		 |$LN6@EMACGetFra|

; 622  :             {
; 623  :                 emac_rx_queue_active = 0;

  01470	e59f21f8	 ldr         r2, [pc, #0x1F8]
  01474	e3a03000	 mov         r3, #0
  01478	e5823000	 str         r3, [r2]
  0147c		 |$LN5@EMACGetFra|
  0147c		 |$LN7@EMACGetFra|

; 624  :             }
; 625  :         }
; 626  : 
; 627  :         /* Recycle RX descriptor */
; 628  :         rx_curr_desc->BufOffLen = EMAC_MAX_ETHERNET_PKT_SIZE;

  0147c	e59d3004	 ldr         r3, [sp, #4]
  01480	e2832008	 add         r2, r3, #8
  01484	e3a03c05	 mov         r3, #5, 24
  01488	e38330ea	 orr         r3, r3, #0xEA
  0148c	e5823000	 str         r3, [r2]

; 629  :         rx_curr_desc->PktFlgLen = EMAC_DSC_FLAG_OWNER;

  01490	e59d3004	 ldr         r3, [sp, #4]
  01494	e283200c	 add         r2, r3, #0xC
  01498	e3a03202	 mov         r3, #2, 4
  0149c	e5823000	 str         r3, [r2]

; 630  :         rx_curr_desc->next = 0;

  014a0	e59d2004	 ldr         r2, [sp, #4]
  014a4	e3a03000	 mov         r3, #0
  014a8	e5823000	 str         r3, [r2]

; 631  : 
; 632  :         if (emac_rx_active_head == 0) 

  014ac	e59f31c0	 ldr         r3, [pc, #0x1C0]
  014b0	e5933000	 ldr         r3, [r3]
  014b4	e3530000	 cmp         r3, #0
  014b8	1a000022	 bne         |$LN4@EMACGetFra|

; 633  :         {
; 634  :             emac_rx_active_head = curr_desc;

  014bc	e59d2000	 ldr         r2, [sp]
  014c0	e59f31ac	 ldr         r3, [pc, #0x1AC]
  014c4	e5832000	 str         r2, [r3]

; 635  :             emac_rx_active_tail = curr_desc;

  014c8	e59d2000	 ldr         r2, [sp]
  014cc	e59f3198	 ldr         r3, [pc, #0x198]
  014d0	e5832000	 str         r2, [r3]

; 636  :             if (emac_rx_queue_active == 0) 

  014d4	e59f3194	 ldr         r3, [pc, #0x194]
  014d8	e5933000	 ldr         r3, [r3]
  014dc	e3530000	 cmp         r3, #0
  014e0	1a000017	 bne         |$LN3@EMACGetFra|

; 637  :             {
; 638  :                 g_pEmacMod->RX0HDP =
; 639  :                     BD_TO_HW((unsigned int) emac_rx_active_head);

  014e4	e59f3188	 ldr         r3, [pc, #0x188]
  014e8	e5933000	 ldr         r3, [r3]
  014ec	e3530000	 cmp         r3, #0
  014f0	1a000002	 bne         |$LN19@EMACGetFra|
  014f4	e3a03000	 mov         r3, #0
  014f8	e58d3028	 str         r3, [sp, #0x28]
  014fc	ea000008	 b           |$LN20@EMACGetFra|
  01500		 |$LN19@EMACGetFra|
  01500	e59f316c	 ldr         r3, [pc, #0x16C]
  01504	e5932000	 ldr         r2, [r3]
  01508	e59f3158	 ldr         r3, [pc, #0x158]
  0150c	e5933000	 ldr         r3, [r3]
  01510	e0422003	 sub         r2, r2, r3
  01514	e3a0361e	 mov         r3, #0x1E, 12
  01518	e3833802	 orr         r3, r3, #2, 16
  0151c	e0823003	 add         r3, r2, r3
  01520	e58d3028	 str         r3, [sp, #0x28]
  01524		 |$LN20@EMACGetFra|
  01524	e59f3138	 ldr         r3, [pc, #0x138]
  01528	e5933000	 ldr         r3, [r3]
  0152c	e2832e62	 add         r2, r3, #0x62, 28
  01530	e59d3028	 ldr         r3, [sp, #0x28]
  01534	e5823000	 str         r3, [r2]

; 640  :                 emac_rx_queue_active = 1;

  01538	e59f2130	 ldr         r2, [pc, #0x130]
  0153c	e3a03001	 mov         r3, #1
  01540	e5823000	 str         r3, [r2]
  01544		 |$LN3@EMACGetFra|

; 641  :             }
; 642  :         } 
; 643  :         else 

  01544	ea000038	 b           |$LN2@EMACGetFra|
  01548		 |$LN4@EMACGetFra|

; 644  :         {
; 645  :             tail_desc = emac_rx_active_tail;

  01548	e59f311c	 ldr         r3, [pc, #0x11C]
  0154c	e5933000	 ldr         r3, [r3]
  01550	e58d300c	 str         r3, [sp, #0xC]

; 646  :             emac_rx_active_tail = curr_desc;

  01554	e59d2000	 ldr         r2, [sp]
  01558	e59f310c	 ldr         r3, [pc, #0x10C]
  0155c	e5832000	 str         r2, [r3]

; 647  :             tail_desc->next = BD_TO_HW((unsigned int) curr_desc);

  01560	e59d3000	 ldr         r3, [sp]
  01564	e3530000	 cmp         r3, #0
  01568	1a000002	 bne         |$LN21@EMACGetFra|
  0156c	e3a03000	 mov         r3, #0
  01570	e58d302c	 str         r3, [sp, #0x2C]
  01574	ea000007	 b           |$LN22@EMACGetFra|
  01578		 |$LN21@EMACGetFra|
  01578	e59d2000	 ldr         r2, [sp]
  0157c	e59f30e4	 ldr         r3, [pc, #0xE4]
  01580	e5933000	 ldr         r3, [r3]
  01584	e0422003	 sub         r2, r2, r3
  01588	e3a0361e	 mov         r3, #0x1E, 12
  0158c	e3833802	 orr         r3, r3, #2, 16
  01590	e0823003	 add         r3, r2, r3
  01594	e58d302c	 str         r3, [sp, #0x2C]
  01598		 |$LN22@EMACGetFra|
  01598	e59d202c	 ldr         r2, [sp, #0x2C]
  0159c	e59d300c	 ldr         r3, [sp, #0xC]
  015a0	e5832000	 str         r2, [r3]

; 648  :             status = tail_desc->PktFlgLen;

  015a4	e59d300c	 ldr         r3, [sp, #0xC]
  015a8	e283300c	 add         r3, r3, #0xC
  015ac	e5933000	 ldr         r3, [r3]
  015b0	e58d3010	 str         r3, [sp, #0x10]

; 649  :             if (status & EMAC_DSC_FLAG_EOQ) 

  015b4	e59d3010	 ldr         r3, [sp, #0x10]
  015b8	e3130201	 tst         r3, #1, 4
  015bc	0a00001a	 beq         |$LN1@EMACGetFra|

; 650  :             {
; 651  :                 status &= ~EMAC_DSC_FLAG_EOQ;

  015c0	e59d2010	 ldr         r2, [sp, #0x10]
  015c4	e3e03201	 mvn         r3, #1, 4
  015c8	e0023003	 and         r3, r2, r3
  015cc	e58d3010	 str         r3, [sp, #0x10]

; 652  :                 tail_desc->PktFlgLen = status;

  015d0	e59d300c	 ldr         r3, [sp, #0xC]
  015d4	e283200c	 add         r2, r3, #0xC
  015d8	e59d3010	 ldr         r3, [sp, #0x10]
  015dc	e5823000	 str         r3, [r2]

; 653  :                 g_pEmacMod->RX0HDP = BD_TO_HW((unsigned int) curr_desc);

  015e0	e59d3000	 ldr         r3, [sp]
  015e4	e3530000	 cmp         r3, #0
  015e8	1a000002	 bne         |$LN23@EMACGetFra|
  015ec	e3a03000	 mov         r3, #0
  015f0	e58d3030	 str         r3, [sp, #0x30]
  015f4	ea000007	 b           |$LN24@EMACGetFra|
  015f8		 |$LN23@EMACGetFra|
  015f8	e59d2000	 ldr         r2, [sp]
  015fc	e59f3064	 ldr         r3, [pc, #0x64]
  01600	e5933000	 ldr         r3, [r3]
  01604	e0422003	 sub         r2, r2, r3
  01608	e3a0361e	 mov         r3, #0x1E, 12
  0160c	e3833802	 orr         r3, r3, #2, 16
  01610	e0823003	 add         r3, r2, r3
  01614	e58d3030	 str         r3, [sp, #0x30]
  01618		 |$LN24@EMACGetFra|
  01618	e59f3044	 ldr         r3, [pc, #0x44]
  0161c	e5933000	 ldr         r3, [r3]
  01620	e2832e62	 add         r2, r3, #0x62, 28
  01624	e59d3030	 ldr         r3, [sp, #0x30]
  01628	e5823000	 str         r3, [r2]
  0162c		 |$LN1@EMACGetFra|
  0162c		 |$LN2@EMACGetFra|
  0162c		 |$LN10@EMACGetFra|

; 654  :             }
; 655  :         }
; 656  :     }
; 657  : 
; 658  : 	SocAckInterrupt(0xF);

  0162c	e3a0000f	 mov         r0, #0xF
  01630	eb000000	 bl          SocAckInterrupt

; 659  : 	g_pEmacMod->MACEOIVECTOR = 0x1;

  01634	e59f3028	 ldr         r3, [pc, #0x28]
  01638	e5933000	 ldr         r3, [r3]
  0163c	e2832094	 add         r2, r3, #0x94
  01640	e3a03001	 mov         r3, #1
  01644	e5823000	 str         r3, [r2]

; 660  : 
; 661  :     return  *length;

  01648	e59d3040	 ldr         r3, [sp, #0x40]
  0164c	e1d330b0	 ldrh        r3, [r3]
  01650	e1cd31b4	 strh        r3, [sp, #0x14]

; 662  : }

  01654	e1dd01b4	 ldrh        r0, [sp, #0x14]
  01658	e28dd034	 add         sp, sp, #0x34
  0165c	e89d6000	 ldmia       sp, {sp, lr}
  01660	e12fff1e	 bx          lr
  01664		 |$LN28@EMACGetFra|
  01664		 |$LN29@EMACGetFra|
  01664	00000000	 DCD         |g_pEmacMod|
  01668		 |$LN30@EMACGetFra|
  01668	00000000	 DCD         |startOfCPPIArea|
  0166c		 |$LN31@EMACGetFra|
  0166c	00000000	 DCD         |emac_rx_active_tail|
  01670		 |$LN32@EMACGetFra|
  01670	00000000	 DCD         |?emac_rx_queue_active@?1??EMACGetFrame@@9@9|
  01674		 |$LN33@EMACGetFra|
  01674	00000000	 DCD         |emac_rx_active_head|
  01678		 |$LN34@EMACGetFra|
  01678	00000000	 DCD         |??_C@_1EK@JONNMNMN@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAe?$AAm?$AAa?$AAc?$AA_?$AAr?$AAc?$AAv?$AA_?$AAp?$AAk?$AAt?$AA?3?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAi?$AAn?$AA?5?$AAp?$AAa?$AAc@|
  0167c		 |$M43845|

			 ENDP  ; |EMACGetFrame|

	EXPORT	|EMACInitDMABuffer|

  00088			 AREA	 |.pdata|, PDATA
|$T43860| DCD	|$LN6@EMACInitDM|
	DCD	0x40001404
; Function compile flags: /Odtp

  0167c			 AREA	 |.text|, CODE, ARM

  0167c		 |EMACInitDMABuffer| PROC

; 667  : {

  0167c		 |$LN6@EMACInitDM|
  0167c	e1a0c00d	 mov         r12, sp
  01680	e92d0003	 stmdb       sp!, {r0, r1}
  01684	e92d5000	 stmdb       sp!, {r12, lr}
  01688	e24dd004	 sub         sp, sp, #4
  0168c		 |$M43857|

; 668  :     dmaBuffer = (UINT8*) address;

  0168c	e59d200c	 ldr         r2, [sp, #0xC]
  01690	e59f3030	 ldr         r3, [pc, #0x30]
  01694	e5832000	 str         r2, [r3]

; 669  :     if (size < ((EMAC_MAX_RX_BUFFERS + EMAC_MAX_TX_BUFFERS) * (EMAC_MAX_ETHERNET_PKT_SIZE + EMAC_PKT_ALIGN)))

  01698	e59d3010	 ldr         r3, [sp, #0x10]
  0169c	e3530c36	 cmp         r3, #0x36, 24
  016a0	2a000002	 bcs         |$LN1@EMACInitDM|

; 670  :     {
; 671  :         return FALSE;

  016a4	e3a03000	 mov         r3, #0
  016a8	e58d3000	 str         r3, [sp]
  016ac	ea000001	 b           |$LN2@EMACInitDM|
  016b0		 |$LN1@EMACInitDM|

; 672  :     }
; 673  :     return TRUE;

  016b0	e3a03001	 mov         r3, #1
  016b4	e58d3000	 str         r3, [sp]
  016b8		 |$LN2@EMACInitDM|

; 674  : }

  016b8	e59d0000	 ldr         r0, [sp]
  016bc	e28dd004	 add         sp, sp, #4
  016c0	e89d6000	 ldmia       sp, {sp, lr}
  016c4	e12fff1e	 bx          lr
  016c8		 |$LN7@EMACInitDM|
  016c8		 |$LN8@EMACInitDM|
  016c8	00000000	 DCD         |dmaBuffer|
  016cc		 |$M43858|

			 ENDP  ; |EMACInitDMABuffer|

	END
