; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\BOOT\FLASHSTORE\flashstore.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|??_C@_1EE@DLLAKNKJ@?$AA?9?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HC@FKJBCKDO@?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAO?$AAp?$AAe?$AAn?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?5?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?1?$AAs?$AAe?$AAc?$AAt@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GC@LGNOEKEA@?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAO?$AAp?$AAe?$AAn?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?5?$AAb?$AAl?$AAo?$AAc?$AAk?$AAs?$AA?0?$AA?5?$AA?$CF?$AAd@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GK@DBMLJPHK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAO?$AAp?$AAe?$AAn?$AA?3?$AA?5?$AAF?$AAM?$AAD?$AA_?$AAG?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GE@JPMDHDDC@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAO?$AAp?$AAe?$AAn?$AA?3?$AA?5?$AAF?$AAM?$AAD?$AA_?$AAI?$AAn@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DK@MODMACFL@?$AA?$CL?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|OALFlashStoreOpen|
	IMPORT	|FMD_GetBlockStatus|
	IMPORT	|FMD_GetInfo|
	IMPORT	|FMD_Init|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|dpCurSettings|
	IMPORT	|__security_cookie|
	IMPORT	|__GSHandlerCheck|
	IMPORT	|__security_check_cookie|

  00000			 AREA	 |.bss|, NOINIT
|?flashContext@?1??OALFlashStoreOpen@@9@9| % 0xae4	; `OALFlashStoreOpen'::`2'::flashContext

  00000			 AREA	 |.pdata|, PDATA
|$T44900| DCD	|$LN24@OALFlashSt|
	DCD	0xc000b804
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\boot\flashstore\flashstore.c

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EE@DLLAKNKJ@?$AA?9?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "F", 0x0, "l", 0x0, "a"
	DCB	0x0, "s", 0x0, "h", 0x0, "S", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, "e", 0x0, "O", 0x0, "p", 0x0, "e", 0x0, "n", 0x0, "("
	DCB	0x0, "r", 0x0, "c", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HC@FKJBCKDO@?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAO?$AAp?$AAe?$AAn?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?5?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?1?$AAs?$AAe?$AAc?$AAt@| DCB "O"
	DCB	0x0, "A", 0x0, "L", 0x0, "F", 0x0, "l", 0x0, "a", 0x0, "s"
	DCB	0x0, "h", 0x0, "S", 0x0, "t", 0x0, "o", 0x0, "r", 0x0, "e"
	DCB	0x0, "O", 0x0, "p", 0x0, "e", 0x0, "n", 0x0, ":", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, " ", 0x0, "b", 0x0, "y", 0x0, "t"
	DCB	0x0, "e", 0x0, "s", 0x0, "/", 0x0, "s", 0x0, "e", 0x0, "c"
	DCB	0x0, "t", 0x0, "o", 0x0, "r", 0x0, ",", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "s", 0x0, "e"
	DCB	0x0, "r", 0x0, "v", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "b"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, "s", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GC@LGNOEKEA@?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAO?$AAp?$AAe?$AAn?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?5?$AAb?$AAl?$AAo?$AAc?$AAk?$AAs?$AA?0?$AA?5?$AA?$CF?$AAd@| DCB "O"
	DCB	0x0, "A", 0x0, "L", 0x0, "F", 0x0, "l", 0x0, "a", 0x0, "s"
	DCB	0x0, "h", 0x0, "S", 0x0, "t", 0x0, "o", 0x0, "r", 0x0, "e"
	DCB	0x0, "O", 0x0, "p", 0x0, "e", 0x0, "n", 0x0, ":", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, " ", 0x0, "b", 0x0, "l", 0x0, "o"
	DCB	0x0, "c", 0x0, "k", 0x0, "s", 0x0, ",", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, " ", 0x0, "s", 0x0, "e", 0x0, "c", 0x0, "t"
	DCB	0x0, "o", 0x0, "r", 0x0, "s", 0x0, "/", 0x0, "b", 0x0, "l"
	DCB	0x0, "o", 0x0, "c", 0x0, "k", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GK@DBMLJPHK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAO?$AAp?$AAe?$AAn?$AA?3?$AA?5?$AAF?$AAM?$AAD?$AA_?$AAG?$AAe@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "F", 0x0, "l", 0x0, "a"
	DCB	0x0, "s", 0x0, "h", 0x0, "S", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, "e", 0x0, "O", 0x0, "p", 0x0, "e", 0x0, "n", 0x0, ":"
	DCB	0x0, " ", 0x0, "F", 0x0, "M", 0x0, "D", 0x0, "_", 0x0, "G"
	DCB	0x0, "e", 0x0, "t", 0x0, "I", 0x0, "n", 0x0, "f", 0x0, "o"
	DCB	0x0, " ", 0x0, "c", 0x0, "a", 0x0, "l", 0x0, "l", 0x0, " "
	DCB	0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, "!", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GE@JPMDHDDC@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAO?$AAp?$AAe?$AAn?$AA?3?$AA?5?$AAF?$AAM?$AAD?$AA_?$AAI?$AAn@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "F", 0x0, "l", 0x0, "a"
	DCB	0x0, "s", 0x0, "h", 0x0, "S", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, "e", 0x0, "O", 0x0, "p", 0x0, "e", 0x0, "n", 0x0, ":"
	DCB	0x0, " ", 0x0, "F", 0x0, "M", 0x0, "D", 0x0, "_", 0x0, "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, " ", 0x0, "c", 0x0, "a"
	DCB	0x0, "l", 0x0, "l", 0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, "d", 0x0, "!", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DK@MODMACFL@?$AA?$CL?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "F", 0x0, "l", 0x0, "a"
	DCB	0x0, "s", 0x0, "h", 0x0, "S", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, "e", 0x0, "O", 0x0, "p", 0x0, "e", 0x0, "n", 0x0, "("
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x"
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.xdata|, DATA
|$T44896| DCD	0xffffffc8
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T44896|

  00008		 |OALFlashStoreOpen| PROC

; 76   : {

  00008		 |$LN24@OALFlashSt|
  00008	e1a0c00d	 mov         r12, sp
  0000c	e92d0001	 stmdb       sp!, {r0}
  00010	e92d5000	 stmdb       sp!, {r12, lr}
  00014	e24ddff2	 sub         sp, sp, #0xF2, 30
  00018		 |$M44897|
  00018	e59f32c4	 ldr         r3, [pc, #0x2C4]
  0001c	e5933000	 ldr         r3, [r3]
  00020	e58d339c	 str         r3, [sp, #0x39C]

; 77   :     static OAL_FLASH_CONTEXT flashContext;
; 78   :     HANDLE hFlash = NULL;

  00024	e3a03000	 mov         r3, #0
  00028	e58d3398	 str         r3, [sp, #0x398]

; 79   :     PCI_REG_INFO regInfo;
; 80   :     FlashInfo flashInfo;
; 81   :     ULONG block;
; 82   :     DWORD status;
; 83   : 
; 84   :     OALMSG(OAL_FLASH&&OAL_FUNC, (L"+OALFlashStoreOpen(0x%08x)\r\n", address));

  0002c	e59f3294	 ldr         r3, [pc, #0x294]
  00030	e5933440	 ldr         r3, [r3, #0x440]
  00034	e3130a02	 tst         r3, #2, 20
  00038	0a000009	 beq         |$LN9@OALFlashSt|
  0003c	e59f3284	 ldr         r3, [pc, #0x284]
  00040	e5933440	 ldr         r3, [r3, #0x440]
  00044	e3130004	 tst         r3, #4
  00048	0a000005	 beq         |$LN9@OALFlashSt|
  0004c	e59d13d0	 ldr         r1, [sp, #0x3D0]
  00050	e59f0288	 ldr         r0, [pc, #0x288]
  00054	eb000000	 bl          NKDbgPrintfW
  00058	e3a03001	 mov         r3, #1
  0005c	e58d33a4	 str         r3, [sp, #0x3A4]
  00060	ea000001	 b           |$LN10@OALFlashSt|
  00064		 |$LN9@OALFlashSt|
  00064	e3a03000	 mov         r3, #0
  00068	e58d33a4	 str         r3, [sp, #0x3A4]
  0006c		 |$LN10@OALFlashSt|

; 85   : 
; 86   :     // Open FMD to access NAND
; 87   :     
; 88   :     regInfo.MemBase.Reg[0] = address;

  0006c	e59d33d0	 ldr         r3, [sp, #0x3D0]
  00070	e58d3320	 str         r3, [sp, #0x320]

; 89   :     flashContext.pFmd = FMD_Init(NULL, &regInfo, NULL);

  00074	e3a02000	 mov         r2, #0
  00078	e28d1010	 add         r1, sp, #0x10
  0007c	e3a00000	 mov         r0, #0
  00080	eb000000	 bl          FMD_Init
  00084	e58d03a8	 str         r0, [sp, #0x3A8]
  00088	e59d23a8	 ldr         r2, [sp, #0x3A8]
  0008c	e59f3238	 ldr         r3, [pc, #0x238]
  00090	e5832000	 str         r2, [r3]

; 90   :     if (flashContext.pFmd == NULL)

  00094	e59f3230	 ldr         r3, [pc, #0x230]
  00098	e5933000	 ldr         r3, [r3]
  0009c	e3530000	 cmp         r3, #0
  000a0	1a00000b	 bne         |$LN6@OALFlashSt|

; 91   :         {
; 92   :         OALMSG(OAL_ERROR, (L"ERROR: OALFlashStoreOpen: "
; 93   :             L"FMD_Init call failed!\r\n"
; 94   :             ));

  000a4	e59f321c	 ldr         r3, [pc, #0x21C]
  000a8	e5933440	 ldr         r3, [r3, #0x440]
  000ac	e3130001	 tst         r3, #1
  000b0	0a000004	 beq         |$LN11@OALFlashSt|
  000b4	e59f0220	 ldr         r0, [pc, #0x220]
  000b8	eb000000	 bl          NKDbgPrintfW
  000bc	e3a03001	 mov         r3, #1
  000c0	e58d33ac	 str         r3, [sp, #0x3AC]
  000c4	ea000001	 b           |$LN12@OALFlashSt|
  000c8		 |$LN11@OALFlashSt|
  000c8	e3a03000	 mov         r3, #0
  000cc	e58d33ac	 str         r3, [sp, #0x3AC]
  000d0		 |$LN12@OALFlashSt|

; 95   :         goto cleanUp;

  000d0	ea000063	 b           |$cleanUp$44457|
  000d4		 |$LN6@OALFlashSt|

; 96   :         }
; 97   : 
; 98   :     // Get flash info
; 99   :     if (!FMD_GetInfo(&flashInfo))

  000d4	e28d0000	 add         r0, sp, #0
  000d8	eb000000	 bl          FMD_GetInfo
  000dc	e58d03b0	 str         r0, [sp, #0x3B0]
  000e0	e59d33b0	 ldr         r3, [sp, #0x3B0]
  000e4	e3530000	 cmp         r3, #0
  000e8	1a00000b	 bne         |$LN5@OALFlashSt|

; 100  :         {
; 101  :         OALMSG(OAL_ERROR, (L"ERROR: OALFlashStoreOpen: "
; 102  :             L"FMD_GetInfo call failed!\r\n"
; 103  :             ));

  000ec	e59f31d4	 ldr         r3, [pc, #0x1D4]
  000f0	e5933440	 ldr         r3, [r3, #0x440]
  000f4	e3130001	 tst         r3, #1
  000f8	0a000004	 beq         |$LN13@OALFlashSt|
  000fc	e59f01d4	 ldr         r0, [pc, #0x1D4]
  00100	eb000000	 bl          NKDbgPrintfW
  00104	e3a03001	 mov         r3, #1
  00108	e58d33b4	 str         r3, [sp, #0x3B4]
  0010c	ea000001	 b           |$LN14@OALFlashSt|
  00110		 |$LN13@OALFlashSt|
  00110	e3a03000	 mov         r3, #0
  00114	e58d33b4	 str         r3, [sp, #0x3B4]
  00118		 |$LN14@OALFlashSt|

; 104  :         goto cleanUp;

  00118	ea000051	 b           |$cleanUp$44457|
  0011c		 |$LN5@OALFlashSt|

; 105  :         }
; 106  :     flashContext.sectorSize = flashInfo.wDataBytesPerSector;

  0011c	e1dd20be	 ldrh        r2, [sp, #0xE]
  00120	e59f31a4	 ldr         r3, [pc, #0x1A4]
  00124	e5832004	 str         r2, [r3, #4]

; 107  :     flashContext.sectorsPerBlock = flashInfo.wSectorsPerBlock;

  00128	e1dd20bc	 ldrh        r2, [sp, #0xC]
  0012c	e59f3198	 ldr         r3, [pc, #0x198]
  00130	e5832008	 str         r2, [r3, #8]

; 108  :     flashContext.blocksOnFlash = flashInfo.dwNumBlocks;

  00134	e59d2004	 ldr         r2, [sp, #4]
  00138	e59f318c	 ldr         r3, [pc, #0x18C]
  0013c	e583200c	 str         r2, [r3, #0xC]

; 109  :     flashContext.blockPos = 0;

  00140	e59f2184	 ldr         r2, [pc, #0x184]
  00144	e3a03000	 mov         r3, #0
  00148	e5823014	 str         r3, [r2, #0x14]

; 110  :     flashContext.badBlocksAtPos = 0;

  0014c	e59f2178	 ldr         r2, [pc, #0x178]
  00150	e3a03000	 mov         r3, #0
  00154	e5823018	 str         r3, [r2, #0x18]

; 111  :     flashContext.reservedBlocks = 0;

  00158	e59f216c	 ldr         r2, [pc, #0x16C]
  0015c	e3a03000	 mov         r3, #0
  00160	e5823010	 str         r3, [r2, #0x10]

; 112  : 
; 113  :     // Get number of reserved blocks
; 114  :     block = 0;

  00164	e3a03000	 mov         r3, #0
  00168	e58d3394	 str         r3, [sp, #0x394]
  0016c		 |$LN21@OALFlashSt|
  0016c		 |$LN4@OALFlashSt|

; 115  :     while (block < flashContext.blocksOnFlash)

  0016c	e59d2394	 ldr         r2, [sp, #0x394]
  00170	e59f3154	 ldr         r3, [pc, #0x154]
  00174	e593300c	 ldr         r3, [r3, #0xC]
  00178	e1520003	 cmp         r2, r3
  0017c	2a000018	 bcs         |$LN3@OALFlashSt|

; 116  :         {
; 117  :         status = FMD_GetBlockStatus(block);

  00180	e59d0394	 ldr         r0, [sp, #0x394]
  00184	eb000000	 bl          FMD_GetBlockStatus
  00188	e58d03b8	 str         r0, [sp, #0x3B8]
  0018c	e59d33b8	 ldr         r3, [sp, #0x3B8]
  00190	e58d3390	 str         r3, [sp, #0x390]

; 118  :         if ((status & BLOCK_STATUS_BAD) != 0)

  00194	e59d3390	 ldr         r3, [sp, #0x390]
  00198	e3130002	 tst         r3, #2
  0019c	0a000003	 beq         |$LN2@OALFlashSt|

; 119  :             {
; 120  :             block++;

  001a0	e59d3394	 ldr         r3, [sp, #0x394]
  001a4	e2833001	 add         r3, r3, #1
  001a8	e58d3394	 str         r3, [sp, #0x394]

; 121  :             continue;

  001ac	eaffffee	 b           |$LN4@OALFlashSt|
  001b0		 |$LN2@OALFlashSt|

; 122  :             }
; 123  :         if ((status & BLOCK_STATUS_RESERVED) == 0) break;

  001b0	e59d3390	 ldr         r3, [sp, #0x390]
  001b4	e3130008	 tst         r3, #8
  001b8	1a000000	 bne         |$LN1@OALFlashSt|
  001bc	ea000008	 b           |$LN3@OALFlashSt|
  001c0		 |$LN1@OALFlashSt|

; 124  :         flashContext.reservedBlocks++;

  001c0	e59f3104	 ldr         r3, [pc, #0x104]
  001c4	e5933010	 ldr         r3, [r3, #0x10]
  001c8	e2832001	 add         r2, r3, #1
  001cc	e59f30f8	 ldr         r3, [pc, #0xF8]
  001d0	e5832010	 str         r2, [r3, #0x10]

; 125  :         block++;

  001d4	e59d3394	 ldr         r3, [sp, #0x394]
  001d8	e2833001	 add         r3, r3, #1
  001dc	e58d3394	 str         r3, [sp, #0x394]

; 126  :         }

  001e0	eaffffe1	 b           |$LN21@OALFlashSt|
  001e4		 |$LN3@OALFlashSt|

; 127  : 
; 128  :     OALMSG(OAL_INFO, (L"OALFlashStoreOpen: "
; 129  :         L"%d blocks, %d sectors/block\r\n",
; 130  :         flashContext.blocksOnFlash, flashContext.sectorsPerBlock
; 131  :         ));

  001e4	e59f30dc	 ldr         r3, [pc, #0xDC]
  001e8	e5933440	 ldr         r3, [r3, #0x440]
  001ec	e3130008	 tst         r3, #8
  001f0	0a000008	 beq         |$LN15@OALFlashSt|
  001f4	e59f30d0	 ldr         r3, [pc, #0xD0]
  001f8	e5932008	 ldr         r2, [r3, #8]
  001fc	e59f30c8	 ldr         r3, [pc, #0xC8]
  00200	e593100c	 ldr         r1, [r3, #0xC]
  00204	e59f00c8	 ldr         r0, [pc, #0xC8]
  00208	eb000000	 bl          NKDbgPrintfW
  0020c	e3a03001	 mov         r3, #1
  00210	e58d33bc	 str         r3, [sp, #0x3BC]
  00214	ea000001	 b           |$LN16@OALFlashSt|
  00218		 |$LN15@OALFlashSt|
  00218	e3a03000	 mov         r3, #0
  0021c	e58d33bc	 str         r3, [sp, #0x3BC]
  00220		 |$LN16@OALFlashSt|

; 132  :     OALMSG(OAL_INFO, (L"OALFlashStoreOpen: "
; 133  :         L"%d bytes/sector, %d reserved blocks\r\n",
; 134  :         flashContext.sectorSize, flashContext.reservedBlocks
; 135  :         ));

  00220	e59f30a0	 ldr         r3, [pc, #0xA0]
  00224	e5933440	 ldr         r3, [r3, #0x440]
  00228	e3130008	 tst         r3, #8
  0022c	0a000008	 beq         |$LN17@OALFlashSt|
  00230	e59f3094	 ldr         r3, [pc, #0x94]
  00234	e5932010	 ldr         r2, [r3, #0x10]
  00238	e59f308c	 ldr         r3, [pc, #0x8C]
  0023c	e5931004	 ldr         r1, [r3, #4]
  00240	e59f0088	 ldr         r0, [pc, #0x88]
  00244	eb000000	 bl          NKDbgPrintfW
  00248	e3a03001	 mov         r3, #1
  0024c	e58d33c0	 str         r3, [sp, #0x3C0]
  00250	ea000001	 b           |$LN18@OALFlashSt|
  00254		 |$LN17@OALFlashSt|
  00254	e3a03000	 mov         r3, #0
  00258	e58d33c0	 str         r3, [sp, #0x3C0]
  0025c		 |$LN18@OALFlashSt|

; 136  : 
; 137  :     // Done
; 138  :     hFlash = &flashContext;

  0025c	e59f3068	 ldr         r3, [pc, #0x68]
  00260	e58d3398	 str         r3, [sp, #0x398]
  00264		 |$cleanUp$44457|

; 139  : 
; 140  : cleanUp:
; 141  :     OALMSG(OAL_FLASH&&OAL_FUNC, (
; 142  :         L"-OALFlashStoreOpen(rc = 0x%08x)\r\n", hFlash
; 143  :         ));

  00264	e59f305c	 ldr         r3, [pc, #0x5C]
  00268	e5933440	 ldr         r3, [r3, #0x440]
  0026c	e3130a02	 tst         r3, #2, 20
  00270	0a000009	 beq         |$LN19@OALFlashSt|
  00274	e59f304c	 ldr         r3, [pc, #0x4C]
  00278	e5933440	 ldr         r3, [r3, #0x440]
  0027c	e3130004	 tst         r3, #4
  00280	0a000005	 beq         |$LN19@OALFlashSt|
  00284	e59d1398	 ldr         r1, [sp, #0x398]
  00288	e59f0034	 ldr         r0, [pc, #0x34]
  0028c	eb000000	 bl          NKDbgPrintfW
  00290	e3a03001	 mov         r3, #1
  00294	e58d33c4	 str         r3, [sp, #0x3C4]
  00298	ea000001	 b           |$LN20@OALFlashSt|
  0029c		 |$LN19@OALFlashSt|
  0029c	e3a03000	 mov         r3, #0
  002a0	e58d33c4	 str         r3, [sp, #0x3C4]
  002a4		 |$LN20@OALFlashSt|

; 144  :     return hFlash;

  002a4	e59d039c	 ldr         r0, [sp, #0x39C]
  002a8	eb000000	 bl          __security_check_cookie
  002ac	e59d3398	 ldr         r3, [sp, #0x398]
  002b0	e58d33a0	 str         r3, [sp, #0x3A0]

; 145  : }

  002b4	e59d03a0	 ldr         r0, [sp, #0x3A0]
  002b8	e28ddff2	 add         sp, sp, #0xF2, 30
  002bc	e89d6000	 ldmia       sp, {sp, lr}
  002c0	e12fff1e	 bx          lr
  002c4		 |$LN25@OALFlashSt|
  002c4		 |$LN26@OALFlashSt|
  002c4	00000000	 DCD         |??_C@_1EE@DLLAKNKJ@?$AA?9?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN@|
  002c8		 |$LN27@OALFlashSt|
  002c8	00000000	 DCD         |dpCurSettings|
  002cc		 |$LN28@OALFlashSt|
  002cc	00000000	 DCD         |?flashContext@?1??OALFlashStoreOpen@@9@9|
  002d0		 |$LN29@OALFlashSt|
  002d0	00000000	 DCD         |??_C@_1HC@FKJBCKDO@?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAO?$AAp?$AAe?$AAn?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?5?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?1?$AAs?$AAe?$AAc?$AAt@|
  002d4		 |$LN30@OALFlashSt|
  002d4	00000000	 DCD         |??_C@_1GC@LGNOEKEA@?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAO?$AAp?$AAe?$AAn?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?5?$AAb?$AAl?$AAo?$AAc?$AAk?$AAs?$AA?0?$AA?5?$AA?$CF?$AAd@|
  002d8		 |$LN31@OALFlashSt|
  002d8	00000000	 DCD         |??_C@_1GK@DBMLJPHK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAO?$AAp?$AAe?$AAn?$AA?3?$AA?5?$AAF?$AAM?$AAD?$AA_?$AAG?$AAe@|
  002dc		 |$LN32@OALFlashSt|
  002dc	00000000	 DCD         |??_C@_1GE@JPMDHDDC@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAO?$AAp?$AAe?$AAn?$AA?3?$AA?5?$AAF?$AAM?$AAD?$AA_?$AAI?$AAn@|
  002e0		 |$LN33@OALFlashSt|
  002e0	00000000	 DCD         |??_C@_1DK@MODMACFL@?$AA?$CL?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  002e4		 |$LN34@OALFlashSt|
  002e4	00000000	 DCD         |__security_cookie|
  002e8		 |$M44898|

			 ENDP  ; |OALFlashStoreOpen|

	EXPORT	|??_C@_1DO@DHDNAGME@?$AA?9?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1JG@BJDMMIFN@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd@| [ DATA ] ; `string'
	EXPORT	|??_C@_1KE@CHNFEMEO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAC?$AAo?$AAr?$AAr?$AAu@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HO@CIDFMKMH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IE@BDHDNOD@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DE@JONHLDDF@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAS?$AAk?$AAi?$AAp?$AA?5?$AAb?$AAa?$AAd?$AA?5?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HO@FLMJGLLL@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAR?$AAu?$AAn?$AA?5?$AAo@| [ DATA ] ; `string'
	EXPORT	|??_C@_1KK@LPEKIKDN@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1LA@OCBPILJB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAR?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAF?$AAl?$AAa?$AAs?$AAh?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1KG@OCIIDMHN@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAF?$AAl?$AAa?$AAs?$AAh@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HM@NGCJEILF@?$AA?$CL?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0@| [ DATA ] ; `string'
	EXPORT	|OALFlashStoreWrite|
	IMPORT	|FMD_WriteSector|
	IMPORT	|memset|
	IMPORT	|FMD_SetBlockStatus|
	IMPORT	|FMD_EraseBlock|
	IMPORT	|__rt_udiv|

  00008			 AREA	 |.pdata|, PDATA
|$T44945| DCD	|$LN54@OALFlashSt@2|
	DCD	0x4001cc04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@DHDNAGME@?$AA?9?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "F", 0x0, "l", 0x0, "a"
	DCB	0x0, "s", 0x0, "h", 0x0, "S", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, "e", 0x0, "W", 0x0, "r", 0x0, "i", 0x0, "t", 0x0, "e"
	DCB	0x0, "(", 0x0, "r", 0x0, "c", 0x0, " ", 0x0, "=", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JG@BJDMMIFN@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd@| DCB "W"
	DCB	0x0, "A", 0x0, "R", 0x0, "N", 0x0, ":", 0x0, " ", 0x0, "O"
	DCB	0x0, "A", 0x0, "L", 0x0, "F", 0x0, "l", 0x0, "a", 0x0, "s"
	DCB	0x0, "h", 0x0, "S", 0x0, "t", 0x0, "o", 0x0, "r", 0x0, "e"
	DCB	0x0, "W", 0x0, "r", 0x0, "i", 0x0, "t", 0x0, "e", 0x0, ":"
	DCB	0x0, " ", 0x0, "F", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e"
	DCB	0x0, "d", 0x0, " ", 0x0, "w", 0x0, "r", 0x0, "i", 0x0, "t"
	DCB	0x0, "e", 0x0, " ", 0x0, "s", 0x0, "e", 0x0, "c", 0x0, "t"
	DCB	0x0, "o", 0x0, "r", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, " "
	DCB	0x0, "(", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, "s", 0x0, "e"
	DCB	0x0, "c", 0x0, "t", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "i"
	DCB	0x0, "n", 0x0, " ", 0x0, "b", 0x0, "l", 0x0, "o", 0x0, "c"
	DCB	0x0, "k", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KE@CHNFEMEO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAC?$AAo?$AAr?$AAr?$AAu@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "F", 0x0, "l", 0x0, "a"
	DCB	0x0, "s", 0x0, "h", 0x0, "S", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, "e", 0x0, "W", 0x0, "r", 0x0, "i", 0x0, "t", 0x0, "e"
	DCB	0x0, ":", 0x0, " ", 0x0, "C", 0x0, "o", 0x0, "r", 0x0, "r"
	DCB	0x0, "u", 0x0, "p", 0x0, "t", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "d", 0x0, "a", 0x0, "t", 0x0, "a", 0x0, ",", 0x0, " "
	DCB	0x0, "s", 0x0, "e", 0x0, "c", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, " ", 0x0, "i", 0x0, "n", 0x0, "f", 0x0, "o", 0x0, " "
	DCB	0x0, "c", 0x0, "a", 0x0, "n", 0x0, "'", 0x0, "t", 0x0, " "
	DCB	0x0, "h", 0x0, "a", 0x0, "v", 0x0, "e", 0x0, " ", 0x0, "s"
	DCB	0x0, "e", 0x0, "t", 0x0, " ", 0x0, "b", 0x0, "a", 0x0, "d"
	DCB	0x0, " ", 0x0, "b", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HO@CIDFMKMH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "F", 0x0, "l", 0x0, "a"
	DCB	0x0, "s", 0x0, "h", 0x0, "S", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, "e", 0x0, "W", 0x0, "r", 0x0, "i", 0x0, "t", 0x0, "e"
	DCB	0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a", 0x0, "i", 0x0, "l"
	DCB	0x0, "e", 0x0, "d", 0x0, " ", 0x0, "s", 0x0, "e", 0x0, "t"
	DCB	0x0, " ", 0x0, "b", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, "s", 0x0, "t"
	DCB	0x0, "a", 0x0, "t", 0x0, "u", 0x0, "s", 0x0, " ", 0x0, "a"
	DCB	0x0, "s", 0x0, " ", 0x0, "b", 0x0, "a", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IE@BDHDNOD@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd@| DCB "W"
	DCB	0x0, "A", 0x0, "R", 0x0, "N", 0x0, ":", 0x0, " ", 0x0, "O"
	DCB	0x0, "A", 0x0, "L", 0x0, "F", 0x0, "l", 0x0, "a", 0x0, "s"
	DCB	0x0, "h", 0x0, "S", 0x0, "t", 0x0, "o", 0x0, "r", 0x0, "e"
	DCB	0x0, "W", 0x0, "r", 0x0, "i", 0x0, "t", 0x0, "e", 0x0, ":"
	DCB	0x0, " ", 0x0, "F", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e"
	DCB	0x0, "d", 0x0, " ", 0x0, "e", 0x0, "r", 0x0, "a", 0x0, "s"
	DCB	0x0, "e", 0x0, " ", 0x0, "b", 0x0, "l", 0x0, "o", 0x0, "c"
	DCB	0x0, "k", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " "
	DCB	0x0, "m", 0x0, "a", 0x0, "r", 0x0, "k", 0x0, " ", 0x0, "i"
	DCB	0x0, "t", 0x0, " ", 0x0, "a", 0x0, "s", 0x0, " ", 0x0, "b"
	DCB	0x0, "a", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DE@JONHLDDF@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAS?$AAk?$AAi?$AAp?$AA?5?$AAb?$AAa?$AAd?$AA?5?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "W"
	DCB	0x0, "A", 0x0, "R", 0x0, "N", 0x0, ":", 0x0, " ", 0x0, "S"
	DCB	0x0, "k", 0x0, "i", 0x0, "p", 0x0, " ", 0x0, "b", 0x0, "a"
	DCB	0x0, "d", 0x0, " ", 0x0, "b", 0x0, "l", 0x0, "o", 0x0, "c"
	DCB	0x0, "k", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HO@FLMJGLLL@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAR?$AAu?$AAn?$AA?5?$AAo@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "F", 0x0, "l", 0x0, "a"
	DCB	0x0, "s", 0x0, "h", 0x0, "S", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, "e", 0x0, "W", 0x0, "r", 0x0, "i", 0x0, "t", 0x0, "e"
	DCB	0x0, ":", 0x0, " ", 0x0, "R", 0x0, "u", 0x0, "n", 0x0, " "
	DCB	0x0, "o", 0x0, "u", 0x0, "t", 0x0, " ", 0x0, "o", 0x0, "f"
	DCB	0x0, " ", 0x0, "b", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k"
	DCB	0x0, "s", 0x0, " ", 0x0, "o", 0x0, "n", 0x0, " ", 0x0, "f"
	DCB	0x0, "l", 0x0, "a", 0x0, "s", 0x0, "h", 0x0, " ", 0x0, "m"
	DCB	0x0, "e", 0x0, "m", 0x0, "o", 0x0, "r", 0x0, "y", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KK@LPEKIKDN@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "F", 0x0, "l", 0x0, "a"
	DCB	0x0, "s", 0x0, "h", 0x0, "S", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, "e", 0x0, "W", 0x0, "r", 0x0, "i", 0x0, "t", 0x0, "e"
	DCB	0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a", 0x0, "i", 0x0, "l"
	DCB	0x0, "e", 0x0, "d", 0x0, " ", 0x0, "s", 0x0, "e", 0x0, "e"
	DCB	0x0, "k", 0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "b"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, " ", 0x0, "(", 0x0, "a", 0x0, "d", 0x0, "d"
	DCB	0x0, "r", 0x0, "e", 0x0, "s", 0x0, "s", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ","
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, "b", 0x0, "a"
	DCB	0x0, "d", 0x0, " ", 0x0, "b", 0x0, "l", 0x0, "o", 0x0, "c"
	DCB	0x0, "k", 0x0, "s", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1LA@OCBPILJB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAR?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAF?$AAl?$AAa?$AAs?$AAh?$AA?5@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "F", 0x0, "l", 0x0, "a"
	DCB	0x0, "s", 0x0, "h", 0x0, "S", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, "e", 0x0, "R", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, ":"
	DCB	0x0, " ", 0x0, "F", 0x0, "l", 0x0, "a", 0x0, "s", 0x0, "h"
	DCB	0x0, " ", 0x0, "r", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, " "
	DCB	0x0, "s", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, " ", 0x0, "m"
	DCB	0x0, "u", 0x0, "s", 0x0, "t", 0x0, " ", 0x0, "b", 0x0, "e"
	DCB	0x0, " ", 0x0, "m", 0x0, "u", 0x0, "l", 0x0, "t", 0x0, "i"
	DCB	0x0, "p", 0x0, "l", 0x0, "e", 0x0, " ", 0x0, "o", 0x0, "f"
	DCB	0x0, " ", 0x0, "s", 0x0, "e", 0x0, "c", 0x0, "t", 0x0, "o"
	DCB	0x0, "r", 0x0, " ", 0x0, "s", 0x0, "i", 0x0, "z", 0x0, "e"
	DCB	0x0, " ", 0x0, "(", 0x0, "o", 0x0, "f", 0x0, "f", 0x0, "s"
	DCB	0x0, "e", 0x0, "t", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KG@OCIIDMHN@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAF?$AAl?$AAa?$AAs?$AAh@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "F", 0x0, "l", 0x0, "a"
	DCB	0x0, "s", 0x0, "h", 0x0, "S", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, "e", 0x0, "W", 0x0, "r", 0x0, "i", 0x0, "t", 0x0, "e"
	DCB	0x0, ":", 0x0, " ", 0x0, "F", 0x0, "l", 0x0, "a", 0x0, "s"
	DCB	0x0, "h", 0x0, " ", 0x0, "w", 0x0, "r", 0x0, "i", 0x0, "t"
	DCB	0x0, "e", 0x0, " ", 0x0, "m", 0x0, "u", 0x0, "s", 0x0, "t"
	DCB	0x0, " ", 0x0, "s", 0x0, "t", 0x0, "a", 0x0, "r", 0x0, "t"
	DCB	0x0, " ", 0x0, "o", 0x0, "n", 0x0, " ", 0x0, "s", 0x0, "e"
	DCB	0x0, "c", 0x0, "t", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "b"
	DCB	0x0, "o", 0x0, "u", 0x0, "n", 0x0, "d", 0x0, "a", 0x0, "r"
	DCB	0x0, "y", 0x0, " ", 0x0, "(", 0x0, "o", 0x0, "f", 0x0, "f"
	DCB	0x0, "s", 0x0, "e", 0x0, "t", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HM@NGCJEILF@?$AA?$CL?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "F", 0x0, "l", 0x0, "a"
	DCB	0x0, "s", 0x0, "h", 0x0, "S", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, "e", 0x0, "W", 0x0, "r", 0x0, "i", 0x0, "t", 0x0, "e"
	DCB	0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "x", 0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "8", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ","
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "x", 0x0, ",", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ","
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  002e8			 AREA	 |.text|, CODE, ARM

  002e8		 |OALFlashStoreWrite| PROC

; 158  : {

  002e8		 |$LN54@OALFlashSt@2|
  002e8	e1a0c00d	 mov         r12, sp
  002ec	e92d000f	 stmdb       sp!, {r0 - r3}
  002f0	e92d5000	 stmdb       sp!, {r12, lr}
  002f4	e24dd094	 sub         sp, sp, #0x94
  002f8		 |$M44942|

; 159  :     BOOL rc = FALSE;

  002f8	e3a03000	 mov         r3, #0
  002fc	e58d3014	 str         r3, [sp, #0x14]

; 160  :     OAL_FLASH_CONTEXT *pFlash = hFlash;

  00300	e59d309c	 ldr         r3, [sp, #0x9C]
  00304	e58d3020	 str         r3, [sp, #0x20]

; 161  :     ULONG offset, sector, block;
; 162  :     ULONG sectorInBlock, sectorDataSize;
; 163  :     ULONG startSector, startBlock;
; 164  :     SectorInfo sectorInfo, *pSectorInfo;
; 165  :     ULONG retry;
; 166  : 
; 167  : 
; 168  :     OALMSG(OAL_FLASH&&OAL_FUNC, (
; 169  :         L"+OALFlashStoreWrite(0x%08x, 0x%08x, 0x%08x, 0x%08x, %d, %d)\r\n",
; 170  :         hFlash, start, pData, dataSize, includeSectorInfo, offsetReservedBlocks
; 171  :         ));

  00308	e59f36dc	 ldr         r3, [pc, #0x6DC]
  0030c	e5933440	 ldr         r3, [r3, #0x440]
  00310	e3130a02	 tst         r3, #2, 20
  00314	0a000011	 beq         |$LN27@OALFlashSt@2|
  00318	e59f36cc	 ldr         r3, [pc, #0x6CC]
  0031c	e5933440	 ldr         r3, [r3, #0x440]
  00320	e3130004	 tst         r3, #4
  00324	0a00000d	 beq         |$LN27@OALFlashSt@2|
  00328	e59d30b0	 ldr         r3, [sp, #0xB0]
  0032c	e58d3008	 str         r3, [sp, #8]
  00330	e59d30ac	 ldr         r3, [sp, #0xAC]
  00334	e58d3004	 str         r3, [sp, #4]
  00338	e59d30a8	 ldr         r3, [sp, #0xA8]
  0033c	e58d3000	 str         r3, [sp]
  00340	e59d30a4	 ldr         r3, [sp, #0xA4]
  00344	e59d20a0	 ldr         r2, [sp, #0xA0]
  00348	e59d109c	 ldr         r1, [sp, #0x9C]
  0034c	e59f06c0	 ldr         r0, [pc, #0x6C0]
  00350	eb000000	 bl          NKDbgPrintfW
  00354	e3a03001	 mov         r3, #1
  00358	e58d3050	 str         r3, [sp, #0x50]
  0035c	ea000001	 b           |$LN28@OALFlashSt@2|
  00360		 |$LN27@OALFlashSt@2|
  00360	e3a03000	 mov         r3, #0
  00364	e58d3050	 str         r3, [sp, #0x50]
  00368		 |$LN28@OALFlashSt@2|

; 172  : 
; 173  :     sectorDataSize = pFlash->sectorSize;

  00368	e59d3020	 ldr         r3, [sp, #0x20]
  0036c	e2833004	 add         r3, r3, #4
  00370	e5933000	 ldr         r3, [r3]
  00374	e58d3010	 str         r3, [sp, #0x10]

; 174  :     if (includeSectorInfo) sectorDataSize += sizeof(SectorInfo);

  00378	e59d30ac	 ldr         r3, [sp, #0xAC]
  0037c	e3530000	 cmp         r3, #0
  00380	0a000002	 beq         |$LN24@OALFlashSt@2|
  00384	e59d3010	 ldr         r3, [sp, #0x10]
  00388	e2833008	 add         r3, r3, #8
  0038c	e58d3010	 str         r3, [sp, #0x10]
  00390		 |$LN24@OALFlashSt@2|

; 175  : 
; 176  :     // First get socket start block number
; 177  :     startSector = start/pFlash->sectorSize;

  00390	e59d3020	 ldr         r3, [sp, #0x20]
  00394	e2833004	 add         r3, r3, #4
  00398	e59d10a0	 ldr         r1, [sp, #0xA0]
  0039c	e5930000	 ldr         r0, [r3]
  003a0	eb000000	 bl          __rt_udiv
  003a4	e58d000c	 str         r0, [sp, #0xC]

; 178  :     startBlock = startSector/pFlash->sectorsPerBlock;

  003a8	e59d3020	 ldr         r3, [sp, #0x20]
  003ac	e2833008	 add         r3, r3, #8
  003b0	e59d100c	 ldr         r1, [sp, #0xC]
  003b4	e5930000	 ldr         r0, [r3]
  003b8	eb000000	 bl          __rt_udiv
  003bc	e58d0038	 str         r0, [sp, #0x38]

; 179  : 
; 180  :     // We support only write on sector boundary...
; 181  :     offset = start - startSector * pFlash->sectorSize;

  003c0	e59d3020	 ldr         r3, [sp, #0x20]
  003c4	e2833004	 add         r3, r3, #4
  003c8	e59d100c	 ldr         r1, [sp, #0xC]
  003cc	e5933000	 ldr         r3, [r3]
  003d0	e0020391	 mul         r2, r1, r3
  003d4	e59d30a0	 ldr         r3, [sp, #0xA0]
  003d8	e0433002	 sub         r3, r3, r2
  003dc	e58d3018	 str         r3, [sp, #0x18]

; 182  :     if (offset > 0)

  003e0	e59d3018	 ldr         r3, [sp, #0x18]
  003e4	e3530000	 cmp         r3, #0
  003e8	9a00000c	 bls         |$LN23@OALFlashSt@2|

; 183  :         {
; 184  :         OALMSG(OAL_ERROR, (L"ERROR: OALFlashStoreWrite: "
; 185  :             L"Flash write must start on sector boundary (offset %d)\r\n",
; 186  :             offset
; 187  :             ));

  003ec	e59f35f8	 ldr         r3, [pc, #0x5F8]
  003f0	e5933440	 ldr         r3, [r3, #0x440]
  003f4	e3130001	 tst         r3, #1
  003f8	0a000005	 beq         |$LN29@OALFlashSt@2|
  003fc	e59d1018	 ldr         r1, [sp, #0x18]
  00400	e59f0608	 ldr         r0, [pc, #0x608]
  00404	eb000000	 bl          NKDbgPrintfW
  00408	e3a03001	 mov         r3, #1
  0040c	e58d3054	 str         r3, [sp, #0x54]
  00410	ea000001	 b           |$LN30@OALFlashSt@2|
  00414		 |$LN29@OALFlashSt@2|
  00414	e3a03000	 mov         r3, #0
  00418	e58d3054	 str         r3, [sp, #0x54]
  0041c		 |$LN30@OALFlashSt@2|

; 188  :         goto cleanUp;

  0041c	ea00015b	 b           |$cleanUp$44504|
  00420		 |$LN23@OALFlashSt@2|

; 189  :         }
; 190  : 
; 191  :     // And only full sectors
; 192  :     offset = dataSize - (dataSize/sectorDataSize) * sectorDataSize;

  00420	e59d10a8	 ldr         r1, [sp, #0xA8]
  00424	e59d0010	 ldr         r0, [sp, #0x10]
  00428	eb000000	 bl          __rt_udiv
  0042c	e59d3010	 ldr         r3, [sp, #0x10]
  00430	e0020390	 mul         r2, r0, r3
  00434	e59d30a8	 ldr         r3, [sp, #0xA8]
  00438	e0433002	 sub         r3, r3, r2
  0043c	e58d3018	 str         r3, [sp, #0x18]

; 193  :     if (offset > 0)

  00440	e59d3018	 ldr         r3, [sp, #0x18]
  00444	e3530000	 cmp         r3, #0
  00448	9a00000c	 bls         |$LN22@OALFlashSt@2|

; 194  :         {
; 195  :         OALMSG(OAL_ERROR, (L"ERROR: OALFlashStoreRead: "
; 196  :             L"Flash read size must be multiple of sector size (offset %d)\r\n",
; 197  :             offset
; 198  :             ));

  0044c	e59f3598	 ldr         r3, [pc, #0x598]
  00450	e5933440	 ldr         r3, [r3, #0x440]
  00454	e3130001	 tst         r3, #1
  00458	0a000005	 beq         |$LN31@OALFlashSt@2|
  0045c	e59d1018	 ldr         r1, [sp, #0x18]
  00460	e59f05a4	 ldr         r0, [pc, #0x5A4]
  00464	eb000000	 bl          NKDbgPrintfW
  00468	e3a03001	 mov         r3, #1
  0046c	e58d3058	 str         r3, [sp, #0x58]
  00470	ea000001	 b           |$LN32@OALFlashSt@2|
  00474		 |$LN31@OALFlashSt@2|
  00474	e3a03000	 mov         r3, #0
  00478	e58d3058	 str         r3, [sp, #0x58]
  0047c		 |$LN32@OALFlashSt@2|

; 199  :         goto cleanUp;

  0047c	ea000143	 b           |$cleanUp$44504|
  00480		 |$LN22@OALFlashSt@2|

; 200  :         }
; 201  : 
; 202  :     // Offset reserved blocks if required
; 203  :     if (offsetReservedBlocks)

  00480	e59d30b0	 ldr         r3, [sp, #0xB0]
  00484	e3530000	 cmp         r3, #0
  00488	0a00000f	 beq         |$LN21@OALFlashSt@2|

; 204  :         {
; 205  :         startBlock +=  pFlash->reservedBlocks;

  0048c	e59d3020	 ldr         r3, [sp, #0x20]
  00490	e2833010	 add         r3, r3, #0x10
  00494	e59d2038	 ldr         r2, [sp, #0x38]
  00498	e5933000	 ldr         r3, [r3]
  0049c	e0823003	 add         r3, r2, r3
  004a0	e58d3038	 str         r3, [sp, #0x38]

; 206  :         startSector += pFlash->reservedBlocks * pFlash->sectorsPerBlock;

  004a4	e59d3020	 ldr         r3, [sp, #0x20]
  004a8	e2832010	 add         r2, r3, #0x10
  004ac	e59d3020	 ldr         r3, [sp, #0x20]
  004b0	e2833008	 add         r3, r3, #8
  004b4	e5921000	 ldr         r1, [r2]
  004b8	e5933000	 ldr         r3, [r3]
  004bc	e0020391	 mul         r2, r1, r3
  004c0	e59d300c	 ldr         r3, [sp, #0xC]
  004c4	e0833002	 add         r3, r3, r2
  004c8	e58d300c	 str         r3, [sp, #0xC]
  004cc		 |$LN21@OALFlashSt@2|

; 207  :         }
; 208  : 
; 209  :     // Seek to start block
; 210  :     if (!SeekToBlock(pFlash, startBlock))

  004cc	e59d1038	 ldr         r1, [sp, #0x38]
  004d0	e59d0020	 ldr         r0, [sp, #0x20]
  004d4	eb000000	 bl          SeekToBlock
  004d8	e58d005c	 str         r0, [sp, #0x5C]
  004dc	e59d305c	 ldr         r3, [sp, #0x5C]
  004e0	e3530000	 cmp         r3, #0
  004e4	1a000010	 bne         |$LN20@OALFlashSt@2|

; 211  :         {
; 212  :         OALMSG(OAL_ERROR, (L"ERROR: OALFlashStoreWrite: "
; 213  :             L"Failed seek to block %d (address 0x%08x, %d bad blocks)\r\n",
; 214  :             startBlock, start, pFlash->badBlocksAtPos
; 215  :             ));

  004e8	e59f34fc	 ldr         r3, [pc, #0x4FC]
  004ec	e5933440	 ldr         r3, [r3, #0x440]
  004f0	e3130001	 tst         r3, #1
  004f4	0a000009	 beq         |$LN33@OALFlashSt@2|
  004f8	e59d3020	 ldr         r3, [sp, #0x20]
  004fc	e2833018	 add         r3, r3, #0x18
  00500	e5933000	 ldr         r3, [r3]
  00504	e59d20a0	 ldr         r2, [sp, #0xA0]
  00508	e59d1038	 ldr         r1, [sp, #0x38]
  0050c	e59f04f4	 ldr         r0, [pc, #0x4F4]
  00510	eb000000	 bl          NKDbgPrintfW
  00514	e3a03001	 mov         r3, #1
  00518	e58d3060	 str         r3, [sp, #0x60]
  0051c	ea000001	 b           |$LN34@OALFlashSt@2|
  00520		 |$LN33@OALFlashSt@2|
  00520	e3a03000	 mov         r3, #0
  00524	e58d3060	 str         r3, [sp, #0x60]
  00528		 |$LN34@OALFlashSt@2|

; 216  :         goto cleanUp;

  00528	ea000118	 b           |$cleanUp$44504|
  0052c		 |$LN20@OALFlashSt@2|

; 217  :         }
; 218  : 
; 219  :     // Start write to flash
; 220  :     offset = 0;

  0052c	e3a03000	 mov         r3, #0
  00530	e58d3018	 str         r3, [sp, #0x18]

; 221  :     sector = startSector + pFlash->badBlocksAtPos * pFlash->sectorsPerBlock;

  00534	e59d3020	 ldr         r3, [sp, #0x20]
  00538	e2832018	 add         r2, r3, #0x18
  0053c	e59d3020	 ldr         r3, [sp, #0x20]
  00540	e2833008	 add         r3, r3, #8
  00544	e5921000	 ldr         r1, [r2]
  00548	e5933000	 ldr         r3, [r3]
  0054c	e0020391	 mul         r2, r1, r3
  00550	e59d300c	 ldr         r3, [sp, #0xC]
  00554	e0833002	 add         r3, r3, r2
  00558	e58d3028	 str         r3, [sp, #0x28]

; 222  :     block = startBlock + pFlash->badBlocksAtPos;

  0055c	e59d3020	 ldr         r3, [sp, #0x20]
  00560	e2833018	 add         r3, r3, #0x18
  00564	e59d2038	 ldr         r2, [sp, #0x38]
  00568	e5933000	 ldr         r3, [r3]
  0056c	e0823003	 add         r3, r2, r3
  00570	e58d303c	 str         r3, [sp, #0x3C]

; 223  :     sectorInBlock = sector - block * pFlash->sectorsPerBlock;

  00574	e59d3020	 ldr         r3, [sp, #0x20]
  00578	e2833008	 add         r3, r3, #8
  0057c	e59d103c	 ldr         r1, [sp, #0x3C]
  00580	e5933000	 ldr         r3, [r3]
  00584	e0020391	 mul         r2, r1, r3
  00588	e59d3028	 ldr         r3, [sp, #0x28]
  0058c	e0433002	 sub         r3, r3, r2
  00590	e58d3034	 str         r3, [sp, #0x34]
  00594		 |$LN51@OALFlashSt@2|
  00594		 |$LN50@OALFlashSt@2|
  00594		 |$LN49@OALFlashSt@2|
  00594		 |$LN19@OALFlashSt@2|

; 224  :     while (offset < dataSize)

  00594	e59d2018	 ldr         r2, [sp, #0x18]
  00598	e59d30a8	 ldr         r3, [sp, #0xA8]
  0059c	e1520003	 cmp         r2, r3
  005a0	2a0000f8	 bcs         |$LN18@OALFlashSt@2|

; 225  :         {
; 226  :         // If it is first sector in block, check and erase block
; 227  :         if (sectorInBlock == 0)

  005a4	e59d3034	 ldr         r3, [sp, #0x34]
  005a8	e3530000	 cmp         r3, #0
  005ac	1a000077	 bne         |$LN17@OALFlashSt@2|

; 228  :             {
; 229  :             // First check if block exists
; 230  :             if (block >= pFlash->blocksOnFlash)

  005b0	e59d3020	 ldr         r3, [sp, #0x20]
  005b4	e283300c	 add         r3, r3, #0xC
  005b8	e59d203c	 ldr         r2, [sp, #0x3C]
  005bc	e5933000	 ldr         r3, [r3]
  005c0	e1520003	 cmp         r2, r3
  005c4	3a00000b	 bcc         |$LN16@OALFlashSt@2|

; 231  :                 {
; 232  :                 OALMSG(OAL_ERROR, (L"ERROR: OALFlashStoreWrite: "
; 233  :                     L"Run out of blocks on flash memory\r\n"
; 234  :                     ));

  005c8	e59f341c	 ldr         r3, [pc, #0x41C]
  005cc	e5933440	 ldr         r3, [r3, #0x440]
  005d0	e3130001	 tst         r3, #1
  005d4	0a000004	 beq         |$LN35@OALFlashSt@2|
  005d8	e59f0424	 ldr         r0, [pc, #0x424]
  005dc	eb000000	 bl          NKDbgPrintfW
  005e0	e3a03001	 mov         r3, #1
  005e4	e58d3064	 str         r3, [sp, #0x64]
  005e8	ea000001	 b           |$LN36@OALFlashSt@2|
  005ec		 |$LN35@OALFlashSt@2|
  005ec	e3a03000	 mov         r3, #0
  005f0	e58d3064	 str         r3, [sp, #0x64]
  005f4		 |$LN36@OALFlashSt@2|

; 235  :                 goto cleanUp;

  005f4	ea0000e5	 b           |$cleanUp$44504|
  005f8		 |$LN16@OALFlashSt@2|

; 236  :                 }
; 237  :             // Skip block if it is marked as bad
; 238  :             if ((FMD_GetBlockStatus(block) & BLOCK_STATUS_BAD) != 0)

  005f8	e59d003c	 ldr         r0, [sp, #0x3C]
  005fc	eb000000	 bl          FMD_GetBlockStatus
  00600	e58d0068	 str         r0, [sp, #0x68]
  00604	e59d3068	 ldr         r3, [sp, #0x68]
  00608	e3130002	 tst         r3, #2
  0060c	0a00001c	 beq         |$LN15@OALFlashSt@2|

; 239  :                 {
; 240  :                 OALMSG(OAL_WARN, (L"WARN: "
; 241  :                     L"Skip bad block %d\r\n", block
; 242  :                     ));

  00610	e59f33d4	 ldr         r3, [pc, #0x3D4]
  00614	e5933440	 ldr         r3, [r3, #0x440]
  00618	e3130002	 tst         r3, #2
  0061c	0a000005	 beq         |$LN37@OALFlashSt@2|
  00620	e59d103c	 ldr         r1, [sp, #0x3C]
  00624	e59f03d4	 ldr         r0, [pc, #0x3D4]
  00628	eb000000	 bl          NKDbgPrintfW
  0062c	e3a03001	 mov         r3, #1
  00630	e58d306c	 str         r3, [sp, #0x6C]
  00634	ea000001	 b           |$LN38@OALFlashSt@2|
  00638		 |$LN37@OALFlashSt@2|
  00638	e3a03000	 mov         r3, #0
  0063c	e58d306c	 str         r3, [sp, #0x6C]
  00640		 |$LN38@OALFlashSt@2|

; 243  :                 block++;

  00640	e59d303c	 ldr         r3, [sp, #0x3C]
  00644	e2833001	 add         r3, r3, #1
  00648	e58d303c	 str         r3, [sp, #0x3C]

; 244  :                 pFlash->badBlocksAtPos++;

  0064c	e59d3020	 ldr         r3, [sp, #0x20]
  00650	e2833018	 add         r3, r3, #0x18
  00654	e5933000	 ldr         r3, [r3]
  00658	e2832001	 add         r2, r3, #1
  0065c	e59d3020	 ldr         r3, [sp, #0x20]
  00660	e2833018	 add         r3, r3, #0x18
  00664	e5832000	 str         r2, [r3]

; 245  :                 sector += pFlash->sectorsPerBlock;

  00668	e59d3020	 ldr         r3, [sp, #0x20]
  0066c	e2833008	 add         r3, r3, #8
  00670	e59d2028	 ldr         r2, [sp, #0x28]
  00674	e5933000	 ldr         r3, [r3]
  00678	e0823003	 add         r3, r2, r3
  0067c	e58d3028	 str         r3, [sp, #0x28]

; 246  :                 continue;

  00680	eaffffc3	 b           |$LN19@OALFlashSt@2|
  00684		 |$LN15@OALFlashSt@2|

; 247  :                 }
; 248  :             // Erase block
; 249  :             retry = 4;

  00684	e3a03004	 mov         r3, #4
  00688	e58d3024	 str         r3, [sp, #0x24]
  0068c		 |$LN14@OALFlashSt@2|

; 250  :             do
; 251  :                 {
; 252  :                 if (FMD_EraseBlock(block)) break;

  0068c	e59d003c	 ldr         r0, [sp, #0x3C]
  00690	eb000000	 bl          FMD_EraseBlock
  00694	e58d0070	 str         r0, [sp, #0x70]
  00698	e59d3070	 ldr         r3, [sp, #0x70]
  0069c	e3530000	 cmp         r3, #0
  006a0	0a000000	 beq         |$LN11@OALFlashSt@2|
  006a4	ea000005	 b           |$LN12@OALFlashSt@2|
  006a8		 |$LN11@OALFlashSt@2|

; 253  :                 }
; 254  :             while (--retry > 0);

  006a8	e59d3024	 ldr         r3, [sp, #0x24]
  006ac	e2433001	 sub         r3, r3, #1
  006b0	e58d3024	 str         r3, [sp, #0x24]
  006b4	e59d3024	 ldr         r3, [sp, #0x24]
  006b8	e3530000	 cmp         r3, #0
  006bc	8afffff2	 bhi         |$LN14@OALFlashSt@2|
  006c0		 |$LN12@OALFlashSt@2|

; 255  :             // If erase failed
; 256  :             if (retry == 0)

  006c0	e59d3024	 ldr         r3, [sp, #0x24]
  006c4	e3530000	 cmp         r3, #0
  006c8	1a000030	 bne         |$LN10@OALFlashSt@2|

; 257  :                 {
; 258  :                 OALMSG(OAL_WARN, (L"WARN: OALFlashStoreWrite: "
; 259  :                     L"Failed erase block %d, mark it as bad\r\n", block
; 260  :                     ));

  006cc	e59f3318	 ldr         r3, [pc, #0x318]
  006d0	e5933440	 ldr         r3, [r3, #0x440]
  006d4	e3130002	 tst         r3, #2
  006d8	0a000005	 beq         |$LN39@OALFlashSt@2|
  006dc	e59d103c	 ldr         r1, [sp, #0x3C]
  006e0	e59f0314	 ldr         r0, [pc, #0x314]
  006e4	eb000000	 bl          NKDbgPrintfW
  006e8	e3a03001	 mov         r3, #1
  006ec	e58d3074	 str         r3, [sp, #0x74]
  006f0	ea000001	 b           |$LN40@OALFlashSt@2|
  006f4		 |$LN39@OALFlashSt@2|
  006f4	e3a03000	 mov         r3, #0
  006f8	e58d3074	 str         r3, [sp, #0x74]
  006fc		 |$LN40@OALFlashSt@2|

; 261  :                 if (!FMD_SetBlockStatus(block, BLOCK_STATUS_BAD))

  006fc	e3a01002	 mov         r1, #2
  00700	e59d003c	 ldr         r0, [sp, #0x3C]
  00704	eb000000	 bl          FMD_SetBlockStatus
  00708	e58d0078	 str         r0, [sp, #0x78]
  0070c	e59d3078	 ldr         r3, [sp, #0x78]
  00710	e3530000	 cmp         r3, #0
  00714	1a00000c	 bne         |$LN9@OALFlashSt@2|

; 262  :                     {
; 263  :                     OALMSG(OAL_ERROR, (L"ERROR: OALFlashStoreWrite: "
; 264  :                         L"Failed set block %d status as bad\r\n", block
; 265  :                         ));

  00718	e59f32cc	 ldr         r3, [pc, #0x2CC]
  0071c	e5933440	 ldr         r3, [r3, #0x440]
  00720	e3130001	 tst         r3, #1
  00724	0a000005	 beq         |$LN41@OALFlashSt@2|
  00728	e59d103c	 ldr         r1, [sp, #0x3C]
  0072c	e59f02c4	 ldr         r0, [pc, #0x2C4]
  00730	eb000000	 bl          NKDbgPrintfW
  00734	e3a03001	 mov         r3, #1
  00738	e58d307c	 str         r3, [sp, #0x7C]
  0073c	ea000001	 b           |$LN42@OALFlashSt@2|
  00740		 |$LN41@OALFlashSt@2|
  00740	e3a03000	 mov         r3, #0
  00744	e58d307c	 str         r3, [sp, #0x7C]
  00748		 |$LN42@OALFlashSt@2|

; 266  :                     goto cleanUp;

  00748	ea000090	 b           |$cleanUp$44504|
  0074c		 |$LN9@OALFlashSt@2|

; 267  :                     }
; 268  :                 block++;

  0074c	e59d303c	 ldr         r3, [sp, #0x3C]
  00750	e2833001	 add         r3, r3, #1
  00754	e58d303c	 str         r3, [sp, #0x3C]

; 269  :                 pFlash->badBlocksAtPos++;

  00758	e59d3020	 ldr         r3, [sp, #0x20]
  0075c	e2833018	 add         r3, r3, #0x18
  00760	e5933000	 ldr         r3, [r3]
  00764	e2832001	 add         r2, r3, #1
  00768	e59d3020	 ldr         r3, [sp, #0x20]
  0076c	e2833018	 add         r3, r3, #0x18
  00770	e5832000	 str         r2, [r3]

; 270  :                 sector += pFlash->sectorsPerBlock;

  00774	e59d3020	 ldr         r3, [sp, #0x20]
  00778	e2833008	 add         r3, r3, #8
  0077c	e59d2028	 ldr         r2, [sp, #0x28]
  00780	e5933000	 ldr         r3, [r3]
  00784	e0823003	 add         r3, r2, r3
  00788	e58d3028	 str         r3, [sp, #0x28]

; 271  :                 continue;

  0078c	eaffff80	 b           |$LN49@OALFlashSt@2|
  00790		 |$LN10@OALFlashSt@2|
  00790		 |$LN17@OALFlashSt@2|

; 272  :                 }
; 273  :             }
; 274  : 
; 275  :         // Prepare sector info
; 276  :         if (includeSectorInfo)

  00790	e59d30ac	 ldr         r3, [sp, #0xAC]
  00794	e3530000	 cmp         r3, #0
  00798	0a000019	 beq         |$LN8@OALFlashSt@2|

; 277  :             {
; 278  :             pSectorInfo = (SectorInfo*)(pData + offset + pFlash->sectorSize);

  0079c	e59d20a4	 ldr         r2, [sp, #0xA4]
  007a0	e59d3018	 ldr         r3, [sp, #0x18]
  007a4	e0822003	 add         r2, r2, r3
  007a8	e59d3020	 ldr         r3, [sp, #0x20]
  007ac	e2833004	 add         r3, r3, #4
  007b0	e5933000	 ldr         r3, [r3]
  007b4	e0823003	 add         r3, r2, r3
  007b8	e58d301c	 str         r3, [sp, #0x1C]

; 279  :             if (pSectorInfo->bBadBlock != 0xFF)

  007bc	e59d301c	 ldr         r3, [sp, #0x1C]
  007c0	e2833005	 add         r3, r3, #5
  007c4	e5d33000	 ldrb        r3, [r3]
  007c8	e35300ff	 cmp         r3, #0xFF
  007cc	0a00000b	 beq         |$LN7@OALFlashSt@2|

; 280  :                 {
; 281  :                 OALMSG(OAL_ERROR, (L"ERROR: OALFlashStoreWrite: "
; 282  :                     L"Corrupted data, sector info can't have set bad block\r\n"
; 283  :                     ));

  007d0	e59f3214	 ldr         r3, [pc, #0x214]
  007d4	e5933440	 ldr         r3, [r3, #0x440]
  007d8	e3130001	 tst         r3, #1
  007dc	0a000004	 beq         |$LN43@OALFlashSt@2|
  007e0	e59f020c	 ldr         r0, [pc, #0x20C]
  007e4	eb000000	 bl          NKDbgPrintfW
  007e8	e3a03001	 mov         r3, #1
  007ec	e58d3080	 str         r3, [sp, #0x80]
  007f0	ea000001	 b           |$LN44@OALFlashSt@2|
  007f4		 |$LN43@OALFlashSt@2|
  007f4	e3a03000	 mov         r3, #0
  007f8	e58d3080	 str         r3, [sp, #0x80]
  007fc		 |$LN44@OALFlashSt@2|

; 284  :                 goto cleanUp;

  007fc	ea000063	 b           |$cleanUp$44504|
  00800		 |$LN7@OALFlashSt@2|

; 285  :                 }
; 286  :             }
; 287  :         else

  00800	ea00000a	 b           |$LN6@OALFlashSt@2|
  00804		 |$LN8@OALFlashSt@2|

; 288  :             {
; 289  :             memset(&sectorInfo, 0xFF, sizeof(sectorInfo));

  00804	e3a02008	 mov         r2, #8
  00808	e3a010ff	 mov         r1, #0xFF
  0080c	e28d002c	 add         r0, sp, #0x2C
  00810	eb000000	 bl          memset

; 290  :             if (!offsetReservedBlocks) sectorInfo.bOEMReserved = (BYTE)

  00814	e59d30b0	 ldr         r3, [sp, #0xB0]
  00818	e3530000	 cmp         r3, #0
  0081c	1a000001	 bne         |$LN5@OALFlashSt@2|

; 291  :                 ~(OEM_BLOCK_RESERVED|OEM_BLOCK_READONLY);

  00820	e3a030fc	 mov         r3, #0xFC
  00824	e5cd3030	 strb        r3, [sp, #0x30]
  00828		 |$LN5@OALFlashSt@2|

; 292  :             pSectorInfo = &sectorInfo;

  00828	e28d302c	 add         r3, sp, #0x2C
  0082c	e58d301c	 str         r3, [sp, #0x1C]
  00830		 |$LN6@OALFlashSt@2|

; 293  :             }
; 294  : 
; 295  :         // Write sector only if it isn't empty
; 296  :         if (!IsSectorEmpty(pData + offset, pFlash->sectorSize, pSectorInfo))

  00830	e59d201c	 ldr         r2, [sp, #0x1C]
  00834	e59d3020	 ldr         r3, [sp, #0x20]
  00838	e2833004	 add         r3, r3, #4
  0083c	e5931000	 ldr         r1, [r3]
  00840	e59d00a4	 ldr         r0, [sp, #0xA4]
  00844	e59d3018	 ldr         r3, [sp, #0x18]
  00848	e0800003	 add         r0, r0, r3
  0084c	eb000000	 bl          IsSectorEmpty
  00850	e58d0084	 str         r0, [sp, #0x84]
  00854	e59d3084	 ldr         r3, [sp, #0x84]
  00858	e3530000	 cmp         r3, #0
  0085c	1a00002c	 bne         |$LN4@OALFlashSt@2|

; 297  :             {
; 298  :             // Write sector
; 299  :             if (!FMD_WriteSector(sector, pData + offset, pSectorInfo, 1))

  00860	e3a03001	 mov         r3, #1
  00864	e59d201c	 ldr         r2, [sp, #0x1C]
  00868	e59d00a4	 ldr         r0, [sp, #0xA4]
  0086c	e59d1018	 ldr         r1, [sp, #0x18]
  00870	e0801001	 add         r1, r0, r1
  00874	e59d0028	 ldr         r0, [sp, #0x28]
  00878	eb000000	 bl          FMD_WriteSector
  0087c	e58d0088	 str         r0, [sp, #0x88]
  00880	e59d3088	 ldr         r3, [sp, #0x88]
  00884	e3530000	 cmp         r3, #0
  00888	1a000021	 bne         |$LN3@OALFlashSt@2|

; 300  :                 {
; 301  :                 OALMSG(OAL_WARN, (L"WARN: OALFlashStoreWrite: "
; 302  :                     L"Failed write sector %d (%d sector in block %d)\r\n",
; 303  :                     sector, sectorInBlock, block
; 304  :                     ));

  0088c	e59f3158	 ldr         r3, [pc, #0x158]
  00890	e5933440	 ldr         r3, [r3, #0x440]
  00894	e3130002	 tst         r3, #2
  00898	0a000007	 beq         |$LN45@OALFlashSt@2|
  0089c	e59d303c	 ldr         r3, [sp, #0x3C]
  008a0	e59d2034	 ldr         r2, [sp, #0x34]
  008a4	e59d1028	 ldr         r1, [sp, #0x28]
  008a8	e59f0140	 ldr         r0, [pc, #0x140]
  008ac	eb000000	 bl          NKDbgPrintfW
  008b0	e3a03001	 mov         r3, #1
  008b4	e58d308c	 str         r3, [sp, #0x8C]
  008b8	ea000001	 b           |$LN46@OALFlashSt@2|
  008bc		 |$LN45@OALFlashSt@2|
  008bc	e3a03000	 mov         r3, #0
  008c0	e58d308c	 str         r3, [sp, #0x8C]
  008c4		 |$LN46@OALFlashSt@2|

; 305  :                 // Try erase block and write again
; 306  :                 if (offset >= (sectorInBlock * sectorDataSize))

  008c4	e59d1034	 ldr         r1, [sp, #0x34]
  008c8	e59d3010	 ldr         r3, [sp, #0x10]
  008cc	e0020391	 mul         r2, r1, r3
  008d0	e59d3018	 ldr         r3, [sp, #0x18]
  008d4	e1530002	 cmp         r3, r2
  008d8	3a00000c	 bcc         |$LN2@OALFlashSt@2|

; 307  :                     {
; 308  :                     offset -= (sectorInBlock * sectorDataSize);

  008dc	e59d1034	 ldr         r1, [sp, #0x34]
  008e0	e59d3010	 ldr         r3, [sp, #0x10]
  008e4	e0020391	 mul         r2, r1, r3
  008e8	e59d3018	 ldr         r3, [sp, #0x18]
  008ec	e0433002	 sub         r3, r3, r2
  008f0	e58d3018	 str         r3, [sp, #0x18]

; 309  :                     sector -= sectorInBlock;

  008f4	e59d2028	 ldr         r2, [sp, #0x28]
  008f8	e59d3034	 ldr         r3, [sp, #0x34]
  008fc	e0423003	 sub         r3, r2, r3
  00900	e58d3028	 str         r3, [sp, #0x28]

; 310  :                     sectorInBlock = 0;

  00904	e3a03000	 mov         r3, #0
  00908	e58d3034	 str         r3, [sp, #0x34]

; 311  :                     continue;

  0090c	eaffff20	 b           |$LN50@OALFlashSt@2|
  00910		 |$LN2@OALFlashSt@2|

; 312  :                     }
; 313  :                 // If we get there we can't recover
; 314  :                 goto cleanUp;

  00910	ea00001e	 b           |$cleanUp$44504|
  00914		 |$LN3@OALFlashSt@2|
  00914		 |$LN4@OALFlashSt@2|

; 315  :                 }
; 316  :             }
; 317  : 
; 318  :         // Move to next sector
; 319  :         sector++;

  00914	e59d3028	 ldr         r3, [sp, #0x28]
  00918	e2833001	 add         r3, r3, #1
  0091c	e58d3028	 str         r3, [sp, #0x28]

; 320  :         sectorInBlock++;

  00920	e59d3034	 ldr         r3, [sp, #0x34]
  00924	e2833001	 add         r3, r3, #1
  00928	e58d3034	 str         r3, [sp, #0x34]

; 321  :         if (sectorInBlock  >= pFlash->sectorsPerBlock)

  0092c	e59d3020	 ldr         r3, [sp, #0x20]
  00930	e2833008	 add         r3, r3, #8
  00934	e59d2034	 ldr         r2, [sp, #0x34]
  00938	e5933000	 ldr         r3, [r3]
  0093c	e1520003	 cmp         r2, r3
  00940	3a00000b	 bcc         |$LN1@OALFlashSt@2|

; 322  :             {
; 323  :             block++;

  00944	e59d303c	 ldr         r3, [sp, #0x3C]
  00948	e2833001	 add         r3, r3, #1
  0094c	e58d303c	 str         r3, [sp, #0x3C]

; 324  :             pFlash->blockPos++;

  00950	e59d3020	 ldr         r3, [sp, #0x20]
  00954	e2833014	 add         r3, r3, #0x14
  00958	e5933000	 ldr         r3, [r3]
  0095c	e2832001	 add         r2, r3, #1
  00960	e59d3020	 ldr         r3, [sp, #0x20]
  00964	e2833014	 add         r3, r3, #0x14
  00968	e5832000	 str         r2, [r3]

; 325  :             sectorInBlock = 0;

  0096c	e3a03000	 mov         r3, #0
  00970	e58d3034	 str         r3, [sp, #0x34]
  00974		 |$LN1@OALFlashSt@2|

; 326  :             }
; 327  :         offset += sectorDataSize;

  00974	e59d2018	 ldr         r2, [sp, #0x18]
  00978	e59d3010	 ldr         r3, [sp, #0x10]
  0097c	e0823003	 add         r3, r2, r3
  00980	e58d3018	 str         r3, [sp, #0x18]

; 328  :         }

  00984	eaffff02	 b           |$LN51@OALFlashSt@2|
  00988		 |$LN18@OALFlashSt@2|

; 329  : 
; 330  :     // Done
; 331  :     rc = TRUE;

  00988	e3a03001	 mov         r3, #1
  0098c	e58d3014	 str         r3, [sp, #0x14]
  00990		 |$cleanUp$44504|

; 332  : 
; 333  : cleanUp:
; 334  :     OALMSG(OAL_FLASH&&OAL_FUNC, (L"-OALFlashStoreWrite(rc = %d)\r\n", rc));

  00990	e59f3054	 ldr         r3, [pc, #0x54]
  00994	e5933440	 ldr         r3, [r3, #0x440]
  00998	e3130a02	 tst         r3, #2, 20
  0099c	0a000009	 beq         |$LN47@OALFlashSt@2|
  009a0	e59f3044	 ldr         r3, [pc, #0x44]
  009a4	e5933440	 ldr         r3, [r3, #0x440]
  009a8	e3130004	 tst         r3, #4
  009ac	0a000005	 beq         |$LN47@OALFlashSt@2|
  009b0	e59d1014	 ldr         r1, [sp, #0x14]
  009b4	e59f002c	 ldr         r0, [pc, #0x2C]
  009b8	eb000000	 bl          NKDbgPrintfW
  009bc	e3a03001	 mov         r3, #1
  009c0	e58d3090	 str         r3, [sp, #0x90]
  009c4	ea000001	 b           |$LN48@OALFlashSt@2|
  009c8		 |$LN47@OALFlashSt@2|
  009c8	e3a03000	 mov         r3, #0
  009cc	e58d3090	 str         r3, [sp, #0x90]
  009d0		 |$LN48@OALFlashSt@2|

; 335  :     return rc;

  009d0	e59d3014	 ldr         r3, [sp, #0x14]
  009d4	e58d304c	 str         r3, [sp, #0x4C]

; 336  : }

  009d8	e59d004c	 ldr         r0, [sp, #0x4C]
  009dc	e28dd094	 add         sp, sp, #0x94
  009e0	e89d6000	 ldmia       sp, {sp, lr}
  009e4	e12fff1e	 bx          lr
  009e8		 |$LN55@OALFlashSt@2|
  009e8		 |$LN56@OALFlashSt@2|
  009e8	00000000	 DCD         |??_C@_1DO@DHDNAGME@?$AA?9?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  009ec		 |$LN57@OALFlashSt@2|
  009ec	00000000	 DCD         |dpCurSettings|
  009f0		 |$LN58@OALFlashSt@2|
  009f0	00000000	 DCD         |??_C@_1JG@BJDMMIFN@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd@|
  009f4		 |$LN59@OALFlashSt@2|
  009f4	00000000	 DCD         |??_C@_1KE@CHNFEMEO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAC?$AAo?$AAr?$AAr?$AAu@|
  009f8		 |$LN60@OALFlashSt@2|
  009f8	00000000	 DCD         |??_C@_1HO@CIDFMKMH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe@|
  009fc		 |$LN61@OALFlashSt@2|
  009fc	00000000	 DCD         |??_C@_1IE@BDHDNOD@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd@|
  00a00		 |$LN62@OALFlashSt@2|
  00a00	00000000	 DCD         |??_C@_1DE@JONHLDDF@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAS?$AAk?$AAi?$AAp?$AA?5?$AAb?$AAa?$AAd?$AA?5?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  00a04		 |$LN63@OALFlashSt@2|
  00a04	00000000	 DCD         |??_C@_1HO@FLMJGLLL@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAR?$AAu?$AAn?$AA?5?$AAo@|
  00a08		 |$LN64@OALFlashSt@2|
  00a08	00000000	 DCD         |??_C@_1KK@LPEKIKDN@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe@|
  00a0c		 |$LN65@OALFlashSt@2|
  00a0c	00000000	 DCD         |??_C@_1LA@OCBPILJB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAR?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAF?$AAl?$AAa?$AAs?$AAh?$AA?5@|
  00a10		 |$LN66@OALFlashSt@2|
  00a10	00000000	 DCD         |??_C@_1KG@OCIIDMHN@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAF?$AAl?$AAa?$AAs?$AAh@|
  00a14		 |$LN67@OALFlashSt@2|
  00a14	00000000	 DCD         |??_C@_1HM@NGCJEILF@?$AA?$CL?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0@|
  00a18		 |$M44943|

			 ENDP  ; |OALFlashStoreWrite|

	EXPORT	|??_C@_1DM@KJHIDCKC@?$AA?9?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAR?$AAe?$AAa?$AAd?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1JE@BGBADADK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAR?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HM@LNEGDDBN@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAR?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAR?$AAu?$AAn?$AA?5?$AAo?$AAu@| [ DATA ] ; `string'
	EXPORT	|??_C@_1KI@BBPBIBEF@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAR?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd@| [ DATA ] ; `string'
	EXPORT	|??_C@_1KC@GLMKKJJO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAR?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAF?$AAl?$AAa?$AAs?$AAh?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HK@HAFKLFGC@?$AA?$CL?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAR?$AAe?$AAa?$AAd?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8@| [ DATA ] ; `string'
	EXPORT	|OALFlashStoreRead|
	IMPORT	|FMD_ReadSector|

  00010			 AREA	 |.pdata|, PDATA
|$T44984| DCD	|$LN40@OALFlashSt@3|
	DCD	0x40015904

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@KJHIDCKC@?$AA?9?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAR?$AAe?$AAa?$AAd?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "F", 0x0, "l", 0x0, "a"
	DCB	0x0, "s", 0x0, "h", 0x0, "S", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, "e", 0x0, "R", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, "("
	DCB	0x0, "r", 0x0, "c", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JE@BGBADADK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAR?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "F", 0x0, "l", 0x0, "a"
	DCB	0x0, "s", 0x0, "h", 0x0, "S", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, "e", 0x0, "R", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, ":"
	DCB	0x0, " ", 0x0, "F", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e"
	DCB	0x0, "d", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "a", 0x0, "d"
	DCB	0x0, " ", 0x0, "s", 0x0, "e", 0x0, "c", 0x0, "t", 0x0, "o"
	DCB	0x0, "r", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, "("
	DCB	0x0, "%", 0x0, "d", 0x0, " ", 0x0, "s", 0x0, "e", 0x0, "c"
	DCB	0x0, "t", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "i", 0x0, "n"
	DCB	0x0, " ", 0x0, "b", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HM@LNEGDDBN@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAR?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAR?$AAu?$AAn?$AA?5?$AAo?$AAu@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "F", 0x0, "l", 0x0, "a"
	DCB	0x0, "s", 0x0, "h", 0x0, "S", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, "e", 0x0, "R", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, ":"
	DCB	0x0, " ", 0x0, "R", 0x0, "u", 0x0, "n", 0x0, " ", 0x0, "o"
	DCB	0x0, "u", 0x0, "t", 0x0, " ", 0x0, "o", 0x0, "f", 0x0, " "
	DCB	0x0, "b", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, "s"
	DCB	0x0, " ", 0x0, "o", 0x0, "n", 0x0, " ", 0x0, "f", 0x0, "l"
	DCB	0x0, "a", 0x0, "s", 0x0, "h", 0x0, " ", 0x0, "m", 0x0, "e"
	DCB	0x0, "m", 0x0, "o", 0x0, "r", 0x0, "y", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KI@BBPBIBEF@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAR?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "F", 0x0, "l", 0x0, "a"
	DCB	0x0, "s", 0x0, "h", 0x0, "S", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, "e", 0x0, "R", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, ":"
	DCB	0x0, " ", 0x0, "F", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e"
	DCB	0x0, "d", 0x0, " ", 0x0, "s", 0x0, "e", 0x0, "e", 0x0, "k"
	DCB	0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "b", 0x0, "l"
	DCB	0x0, "o", 0x0, "c", 0x0, "k", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, " ", 0x0, "(", 0x0, "a", 0x0, "d", 0x0, "d", 0x0, "r"
	DCB	0x0, "e", 0x0, "s", 0x0, "s", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ",", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, " ", 0x0, "b", 0x0, "a", 0x0, "d"
	DCB	0x0, " ", 0x0, "b", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k"
	DCB	0x0, "s", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KC@GLMKKJJO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAR?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAF?$AAl?$AAa?$AAs?$AAh?$AA?5@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "F", 0x0, "l", 0x0, "a"
	DCB	0x0, "s", 0x0, "h", 0x0, "S", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, "e", 0x0, "R", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, ":"
	DCB	0x0, " ", 0x0, "F", 0x0, "l", 0x0, "a", 0x0, "s", 0x0, "h"
	DCB	0x0, " ", 0x0, "r", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, " "
	DCB	0x0, "m", 0x0, "u", 0x0, "s", 0x0, "t", 0x0, " ", 0x0, "s"
	DCB	0x0, "t", 0x0, "a", 0x0, "r", 0x0, "t", 0x0, " ", 0x0, "o"
	DCB	0x0, "n", 0x0, " ", 0x0, "s", 0x0, "e", 0x0, "c", 0x0, "t"
	DCB	0x0, "o", 0x0, "r", 0x0, " ", 0x0, "b", 0x0, "o", 0x0, "u"
	DCB	0x0, "n", 0x0, "d", 0x0, "a", 0x0, "r", 0x0, "y", 0x0, " "
	DCB	0x0, "(", 0x0, "o", 0x0, "f", 0x0, "f", 0x0, "s", 0x0, "e"
	DCB	0x0, "t", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HK@HAFKLFGC@?$AA?$CL?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAR?$AAe?$AAa?$AAd?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "F", 0x0, "l", 0x0, "a"
	DCB	0x0, "s", 0x0, "h", 0x0, "S", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, "e", 0x0, "R", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, "("
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x"
	DCB	0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ",", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x"
	DCB	0x0, ",", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Odtp

  00a18			 AREA	 |.text|, CODE, ARM

  00a18		 |OALFlashStoreRead| PROC

; 349  : {

  00a18		 |$LN40@OALFlashSt@3|
  00a18	e1a0c00d	 mov         r12, sp
  00a1c	e92d000f	 stmdb       sp!, {r0 - r3}
  00a20	e92d5000	 stmdb       sp!, {r12, lr}
  00a24	e24dd07c	 sub         sp, sp, #0x7C
  00a28		 |$M44981|

; 350  :     BOOL rc = FALSE;

  00a28	e3a03000	 mov         r3, #0
  00a2c	e58d3014	 str         r3, [sp, #0x14]

; 351  :     OAL_FLASH_CONTEXT *pFlash = hFlash;

  00a30	e59d3084	 ldr         r3, [sp, #0x84]
  00a34	e58d3020	 str         r3, [sp, #0x20]

; 352  :     ULONG offset, sector, block;
; 353  :     ULONG sectorInBlock, sectorDataSize;
; 354  :     ULONG startSector, startBlock;
; 355  :     SectorInfo sectorInfo, *pSectorInfo;
; 356  :     ULONG retry;
; 357  : 
; 358  : 
; 359  :     OALMSG(OAL_FLASH&&OAL_FUNC, (
; 360  :         L"+OALFlashStoreRead(0x%08x, 0x%08x, 0x%08x, 0x%08x, %d, %d)\r\n",
; 361  :         hFlash, start, pData, dataSize, includeSectorInfo, offsetReservedBlocks
; 362  :         ));

  00a38	e59f351c	 ldr         r3, [pc, #0x51C]
  00a3c	e5933440	 ldr         r3, [r3, #0x440]
  00a40	e3130a02	 tst         r3, #2, 20
  00a44	0a000011	 beq         |$LN21@OALFlashSt@3|
  00a48	e59f350c	 ldr         r3, [pc, #0x50C]
  00a4c	e5933440	 ldr         r3, [r3, #0x440]
  00a50	e3130004	 tst         r3, #4
  00a54	0a00000d	 beq         |$LN21@OALFlashSt@3|
  00a58	e59d3098	 ldr         r3, [sp, #0x98]
  00a5c	e58d3008	 str         r3, [sp, #8]
  00a60	e59d3094	 ldr         r3, [sp, #0x94]
  00a64	e58d3004	 str         r3, [sp, #4]
  00a68	e59d3090	 ldr         r3, [sp, #0x90]
  00a6c	e58d3000	 str         r3, [sp]
  00a70	e59d308c	 ldr         r3, [sp, #0x8C]
  00a74	e59d2088	 ldr         r2, [sp, #0x88]
  00a78	e59d1084	 ldr         r1, [sp, #0x84]
  00a7c	e59f04f4	 ldr         r0, [pc, #0x4F4]
  00a80	eb000000	 bl          NKDbgPrintfW
  00a84	e3a03001	 mov         r3, #1
  00a88	e58d3050	 str         r3, [sp, #0x50]
  00a8c	ea000001	 b           |$LN22@OALFlashSt@3|
  00a90		 |$LN21@OALFlashSt@3|
  00a90	e3a03000	 mov         r3, #0
  00a94	e58d3050	 str         r3, [sp, #0x50]
  00a98		 |$LN22@OALFlashSt@3|

; 363  : 
; 364  :     sectorDataSize = pFlash->sectorSize;

  00a98	e59d3020	 ldr         r3, [sp, #0x20]
  00a9c	e2833004	 add         r3, r3, #4
  00aa0	e5933000	 ldr         r3, [r3]
  00aa4	e58d3010	 str         r3, [sp, #0x10]

; 365  :     if (includeSectorInfo) sectorDataSize += sizeof(SectorInfo);

  00aa8	e59d3094	 ldr         r3, [sp, #0x94]
  00aac	e3530000	 cmp         r3, #0
  00ab0	0a000002	 beq         |$LN18@OALFlashSt@3|
  00ab4	e59d3010	 ldr         r3, [sp, #0x10]
  00ab8	e2833008	 add         r3, r3, #8
  00abc	e58d3010	 str         r3, [sp, #0x10]
  00ac0		 |$LN18@OALFlashSt@3|

; 366  : 
; 367  :     // First get socket start block number
; 368  :     startSector = start/pFlash->sectorSize;

  00ac0	e59d3020	 ldr         r3, [sp, #0x20]
  00ac4	e2833004	 add         r3, r3, #4
  00ac8	e59d1088	 ldr         r1, [sp, #0x88]
  00acc	e5930000	 ldr         r0, [r3]
  00ad0	eb000000	 bl          __rt_udiv
  00ad4	e58d000c	 str         r0, [sp, #0xC]

; 369  :     startBlock = startSector/pFlash->sectorsPerBlock;

  00ad8	e59d3020	 ldr         r3, [sp, #0x20]
  00adc	e2833008	 add         r3, r3, #8
  00ae0	e59d100c	 ldr         r1, [sp, #0xC]
  00ae4	e5930000	 ldr         r0, [r3]
  00ae8	eb000000	 bl          __rt_udiv
  00aec	e58d0038	 str         r0, [sp, #0x38]

; 370  : 
; 371  :     // We support only read on sector boundary...
; 372  :     offset = start - startSector * pFlash->sectorSize;

  00af0	e59d3020	 ldr         r3, [sp, #0x20]
  00af4	e2833004	 add         r3, r3, #4
  00af8	e59d100c	 ldr         r1, [sp, #0xC]
  00afc	e5933000	 ldr         r3, [r3]
  00b00	e0020391	 mul         r2, r1, r3
  00b04	e59d3088	 ldr         r3, [sp, #0x88]
  00b08	e0433002	 sub         r3, r3, r2
  00b0c	e58d3018	 str         r3, [sp, #0x18]

; 373  :     if (offset > 0)

  00b10	e59d3018	 ldr         r3, [sp, #0x18]
  00b14	e3530000	 cmp         r3, #0
  00b18	9a00000c	 bls         |$LN17@OALFlashSt@3|

; 374  :         {
; 375  :         OALMSG(OAL_ERROR, (L"ERROR: OALFlashStoreRead: "
; 376  :             L"Flash read must start on sector boundary (offset %d)\r\n",
; 377  :             offset
; 378  :             ));

  00b1c	e59f3438	 ldr         r3, [pc, #0x438]
  00b20	e5933440	 ldr         r3, [r3, #0x440]
  00b24	e3130001	 tst         r3, #1
  00b28	0a000005	 beq         |$LN23@OALFlashSt@3|
  00b2c	e59d1018	 ldr         r1, [sp, #0x18]
  00b30	e59f043c	 ldr         r0, [pc, #0x43C]
  00b34	eb000000	 bl          NKDbgPrintfW
  00b38	e3a03001	 mov         r3, #1
  00b3c	e58d3054	 str         r3, [sp, #0x54]
  00b40	ea000001	 b           |$LN24@OALFlashSt@3|
  00b44		 |$LN23@OALFlashSt@3|
  00b44	e3a03000	 mov         r3, #0
  00b48	e58d3054	 str         r3, [sp, #0x54]
  00b4c		 |$LN24@OALFlashSt@3|

; 379  :         goto cleanUp;

  00b4c	ea0000eb	 b           |$cleanUp$44580|
  00b50		 |$LN17@OALFlashSt@3|

; 380  :         }
; 381  : 
; 382  :     // And only full sectors
; 383  :     offset = dataSize - (dataSize/sectorDataSize) * sectorDataSize;

  00b50	e59d1090	 ldr         r1, [sp, #0x90]
  00b54	e59d0010	 ldr         r0, [sp, #0x10]
  00b58	eb000000	 bl          __rt_udiv
  00b5c	e59d3010	 ldr         r3, [sp, #0x10]
  00b60	e0020390	 mul         r2, r0, r3
  00b64	e59d3090	 ldr         r3, [sp, #0x90]
  00b68	e0433002	 sub         r3, r3, r2
  00b6c	e58d3018	 str         r3, [sp, #0x18]

; 384  :     if (offset > 0)

  00b70	e59d3018	 ldr         r3, [sp, #0x18]
  00b74	e3530000	 cmp         r3, #0
  00b78	9a00000c	 bls         |$LN16@OALFlashSt@3|

; 385  :         {
; 386  :         OALMSG(OAL_ERROR, (L"ERROR: OALFlashStoreRead: "
; 387  :             L"Flash read size must be multiple of sector size (offset %d)\r\n",
; 388  :             offset
; 389  :             ));

  00b7c	e59f33d8	 ldr         r3, [pc, #0x3D8]
  00b80	e5933440	 ldr         r3, [r3, #0x440]
  00b84	e3130001	 tst         r3, #1
  00b88	0a000005	 beq         |$LN25@OALFlashSt@3|
  00b8c	e59d1018	 ldr         r1, [sp, #0x18]
  00b90	e59f03d8	 ldr         r0, [pc, #0x3D8]
  00b94	eb000000	 bl          NKDbgPrintfW
  00b98	e3a03001	 mov         r3, #1
  00b9c	e58d3058	 str         r3, [sp, #0x58]
  00ba0	ea000001	 b           |$LN26@OALFlashSt@3|
  00ba4		 |$LN25@OALFlashSt@3|
  00ba4	e3a03000	 mov         r3, #0
  00ba8	e58d3058	 str         r3, [sp, #0x58]
  00bac		 |$LN26@OALFlashSt@3|

; 390  :         goto cleanUp;

  00bac	ea0000d3	 b           |$cleanUp$44580|
  00bb0		 |$LN16@OALFlashSt@3|

; 391  :         }
; 392  : 
; 393  :     // Offset reserved blocks if required
; 394  :     if (offsetReservedBlocks)

  00bb0	e59d3098	 ldr         r3, [sp, #0x98]
  00bb4	e3530000	 cmp         r3, #0
  00bb8	0a00000f	 beq         |$LN15@OALFlashSt@3|

; 395  :         {
; 396  :         startBlock +=  pFlash->reservedBlocks;

  00bbc	e59d3020	 ldr         r3, [sp, #0x20]
  00bc0	e2833010	 add         r3, r3, #0x10
  00bc4	e59d2038	 ldr         r2, [sp, #0x38]
  00bc8	e5933000	 ldr         r3, [r3]
  00bcc	e0823003	 add         r3, r2, r3
  00bd0	e58d3038	 str         r3, [sp, #0x38]

; 397  :         startSector += pFlash->reservedBlocks * pFlash->sectorsPerBlock;

  00bd4	e59d3020	 ldr         r3, [sp, #0x20]
  00bd8	e2832010	 add         r2, r3, #0x10
  00bdc	e59d3020	 ldr         r3, [sp, #0x20]
  00be0	e2833008	 add         r3, r3, #8
  00be4	e5921000	 ldr         r1, [r2]
  00be8	e5933000	 ldr         r3, [r3]
  00bec	e0020391	 mul         r2, r1, r3
  00bf0	e59d300c	 ldr         r3, [sp, #0xC]
  00bf4	e0833002	 add         r3, r3, r2
  00bf8	e58d300c	 str         r3, [sp, #0xC]
  00bfc		 |$LN15@OALFlashSt@3|

; 398  :         }
; 399  : 
; 400  :     // Seek to start block
; 401  :     if (!SeekToBlock(pFlash, startBlock))

  00bfc	e59d1038	 ldr         r1, [sp, #0x38]
  00c00	e59d0020	 ldr         r0, [sp, #0x20]
  00c04	eb000000	 bl          SeekToBlock
  00c08	e58d005c	 str         r0, [sp, #0x5C]
  00c0c	e59d305c	 ldr         r3, [sp, #0x5C]
  00c10	e3530000	 cmp         r3, #0
  00c14	1a000010	 bne         |$LN14@OALFlashSt@3|

; 402  :         {
; 403  :         OALMSG(OAL_ERROR, (L"ERROR: OALFlashStoreRead: "
; 404  :             L"Failed seek to block %d (address 0x%08x, %d bad blocks)\r\n",
; 405  :             startBlock, start, pFlash->badBlocksAtPos
; 406  :             ));

  00c18	e59f333c	 ldr         r3, [pc, #0x33C]
  00c1c	e5933440	 ldr         r3, [r3, #0x440]
  00c20	e3130001	 tst         r3, #1
  00c24	0a000009	 beq         |$LN27@OALFlashSt@3|
  00c28	e59d3020	 ldr         r3, [sp, #0x20]
  00c2c	e2833018	 add         r3, r3, #0x18
  00c30	e5933000	 ldr         r3, [r3]
  00c34	e59d2088	 ldr         r2, [sp, #0x88]
  00c38	e59d1038	 ldr         r1, [sp, #0x38]
  00c3c	e59f0328	 ldr         r0, [pc, #0x328]
  00c40	eb000000	 bl          NKDbgPrintfW
  00c44	e3a03001	 mov         r3, #1
  00c48	e58d3060	 str         r3, [sp, #0x60]
  00c4c	ea000001	 b           |$LN28@OALFlashSt@3|
  00c50		 |$LN27@OALFlashSt@3|
  00c50	e3a03000	 mov         r3, #0
  00c54	e58d3060	 str         r3, [sp, #0x60]
  00c58		 |$LN28@OALFlashSt@3|

; 407  :         goto cleanUp;

  00c58	ea0000a8	 b           |$cleanUp$44580|
  00c5c		 |$LN14@OALFlashSt@3|

; 408  :         }
; 409  : 
; 410  : 
; 411  :     // Start read
; 412  :     offset = 0;

  00c5c	e3a03000	 mov         r3, #0
  00c60	e58d3018	 str         r3, [sp, #0x18]

; 413  :     sector = startSector + pFlash->badBlocksAtPos * pFlash->sectorsPerBlock;

  00c64	e59d3020	 ldr         r3, [sp, #0x20]
  00c68	e2832018	 add         r2, r3, #0x18
  00c6c	e59d3020	 ldr         r3, [sp, #0x20]
  00c70	e2833008	 add         r3, r3, #8
  00c74	e5921000	 ldr         r1, [r2]
  00c78	e5933000	 ldr         r3, [r3]
  00c7c	e0020391	 mul         r2, r1, r3
  00c80	e59d300c	 ldr         r3, [sp, #0xC]
  00c84	e0833002	 add         r3, r3, r2
  00c88	e58d3028	 str         r3, [sp, #0x28]

; 414  :     block = startBlock + pFlash->badBlocksAtPos;

  00c8c	e59d3020	 ldr         r3, [sp, #0x20]
  00c90	e2833018	 add         r3, r3, #0x18
  00c94	e59d2038	 ldr         r2, [sp, #0x38]
  00c98	e5933000	 ldr         r3, [r3]
  00c9c	e0823003	 add         r3, r2, r3
  00ca0	e58d303c	 str         r3, [sp, #0x3C]

; 415  :     sectorInBlock = sector - block * pFlash->sectorsPerBlock;

  00ca4	e59d3020	 ldr         r3, [sp, #0x20]
  00ca8	e2833008	 add         r3, r3, #8
  00cac	e59d103c	 ldr         r1, [sp, #0x3C]
  00cb0	e5933000	 ldr         r3, [r3]
  00cb4	e0020391	 mul         r2, r1, r3
  00cb8	e59d3028	 ldr         r3, [sp, #0x28]
  00cbc	e0433002	 sub         r3, r3, r2
  00cc0	e58d3034	 str         r3, [sp, #0x34]
  00cc4		 |$LN37@OALFlashSt@3|
  00cc4		 |$LN13@OALFlashSt@3|

; 416  :     while (offset < dataSize)

  00cc4	e59d2018	 ldr         r2, [sp, #0x18]
  00cc8	e59d3090	 ldr         r3, [sp, #0x90]
  00ccc	e1520003	 cmp         r2, r3
  00cd0	2a000088	 bcs         |$LN12@OALFlashSt@3|

; 417  :         {
; 418  :         // If it is first sector in block, check and erase block
; 419  :         if (sectorInBlock == 0)

  00cd4	e59d3034	 ldr         r3, [sp, #0x34]
  00cd8	e3530000	 cmp         r3, #0
  00cdc	1a000034	 bne         |$LN11@OALFlashSt@3|

; 420  :             {
; 421  :             // First check if block exists
; 422  :             if (block >= pFlash->blocksOnFlash)

  00ce0	e59d3020	 ldr         r3, [sp, #0x20]
  00ce4	e283300c	 add         r3, r3, #0xC
  00ce8	e59d203c	 ldr         r2, [sp, #0x3C]
  00cec	e5933000	 ldr         r3, [r3]
  00cf0	e1520003	 cmp         r2, r3
  00cf4	3a00000b	 bcc         |$LN10@OALFlashSt@3|

; 423  :                 {
; 424  :                 OALMSG(OAL_ERROR, (L"ERROR: OALFlashStoreRead: "
; 425  :                     L"Run out of blocks on flash memory\r\n"
; 426  :                     ));

  00cf8	e59f325c	 ldr         r3, [pc, #0x25C]
  00cfc	e5933440	 ldr         r3, [r3, #0x440]
  00d00	e3130001	 tst         r3, #1
  00d04	0a000004	 beq         |$LN29@OALFlashSt@3|
  00d08	e59f0258	 ldr         r0, [pc, #0x258]
  00d0c	eb000000	 bl          NKDbgPrintfW
  00d10	e3a03001	 mov         r3, #1
  00d14	e58d3064	 str         r3, [sp, #0x64]
  00d18	ea000001	 b           |$LN30@OALFlashSt@3|
  00d1c		 |$LN29@OALFlashSt@3|
  00d1c	e3a03000	 mov         r3, #0
  00d20	e58d3064	 str         r3, [sp, #0x64]
  00d24		 |$LN30@OALFlashSt@3|

; 427  :                 goto cleanUp;

  00d24	ea000075	 b           |$cleanUp$44580|
  00d28		 |$LN10@OALFlashSt@3|

; 428  :                 }
; 429  :             // Skip block if it is marked as bad
; 430  :             if ((FMD_GetBlockStatus(block) & BLOCK_STATUS_BAD) != 0)

  00d28	e59d003c	 ldr         r0, [sp, #0x3C]
  00d2c	eb000000	 bl          FMD_GetBlockStatus
  00d30	e58d0068	 str         r0, [sp, #0x68]
  00d34	e59d3068	 ldr         r3, [sp, #0x68]
  00d38	e3130002	 tst         r3, #2
  00d3c	0a00001c	 beq         |$LN9@OALFlashSt@3|

; 431  :                 {
; 432  :                 OALMSG(OAL_WARN, (L"WARN: "
; 433  :                     L"Skip bad block %d\r\n", block
; 434  :                     ));

  00d40	e59f3214	 ldr         r3, [pc, #0x214]
  00d44	e5933440	 ldr         r3, [r3, #0x440]
  00d48	e3130002	 tst         r3, #2
  00d4c	0a000005	 beq         |$LN31@OALFlashSt@3|
  00d50	e59d103c	 ldr         r1, [sp, #0x3C]
  00d54	e59f0208	 ldr         r0, [pc, #0x208]
  00d58	eb000000	 bl          NKDbgPrintfW
  00d5c	e3a03001	 mov         r3, #1
  00d60	e58d306c	 str         r3, [sp, #0x6C]
  00d64	ea000001	 b           |$LN32@OALFlashSt@3|
  00d68		 |$LN31@OALFlashSt@3|
  00d68	e3a03000	 mov         r3, #0
  00d6c	e58d306c	 str         r3, [sp, #0x6C]
  00d70		 |$LN32@OALFlashSt@3|

; 435  :                 block++;

  00d70	e59d303c	 ldr         r3, [sp, #0x3C]
  00d74	e2833001	 add         r3, r3, #1
  00d78	e58d303c	 str         r3, [sp, #0x3C]

; 436  :                 pFlash->badBlocksAtPos++;

  00d7c	e59d3020	 ldr         r3, [sp, #0x20]
  00d80	e2833018	 add         r3, r3, #0x18
  00d84	e5933000	 ldr         r3, [r3]
  00d88	e2832001	 add         r2, r3, #1
  00d8c	e59d3020	 ldr         r3, [sp, #0x20]
  00d90	e2833018	 add         r3, r3, #0x18
  00d94	e5832000	 str         r2, [r3]

; 437  :                 sector += pFlash->sectorsPerBlock;

  00d98	e59d3020	 ldr         r3, [sp, #0x20]
  00d9c	e2833008	 add         r3, r3, #8
  00da0	e59d2028	 ldr         r2, [sp, #0x28]
  00da4	e5933000	 ldr         r3, [r3]
  00da8	e0823003	 add         r3, r2, r3
  00dac	e58d3028	 str         r3, [sp, #0x28]

; 438  :                 continue;

  00db0	eaffffc3	 b           |$LN13@OALFlashSt@3|
  00db4		 |$LN9@OALFlashSt@3|
  00db4		 |$LN11@OALFlashSt@3|

; 439  :                 }
; 440  :             }
; 441  : 
; 442  :         // Prepare sector info location
; 443  :         if (includeSectorInfo)

  00db4	e59d3094	 ldr         r3, [sp, #0x94]
  00db8	e3530000	 cmp         r3, #0
  00dbc	0a000008	 beq         |$LN8@OALFlashSt@3|

; 444  :             {
; 445  :             pSectorInfo = (SectorInfo*)(pData + offset + pFlash->sectorSize);

  00dc0	e59d208c	 ldr         r2, [sp, #0x8C]
  00dc4	e59d3018	 ldr         r3, [sp, #0x18]
  00dc8	e0822003	 add         r2, r2, r3
  00dcc	e59d3020	 ldr         r3, [sp, #0x20]
  00dd0	e2833004	 add         r3, r3, #4
  00dd4	e5933000	 ldr         r3, [r3]
  00dd8	e0823003	 add         r3, r2, r3
  00ddc	e58d301c	 str         r3, [sp, #0x1C]

; 446  :             }
; 447  :         else

  00de0	ea000001	 b           |$LN7@OALFlashSt@3|
  00de4		 |$LN8@OALFlashSt@3|

; 448  :             {
; 449  :             pSectorInfo = &sectorInfo;

  00de4	e28d302c	 add         r3, sp, #0x2C
  00de8	e58d301c	 str         r3, [sp, #0x1C]
  00dec		 |$LN7@OALFlashSt@3|

; 450  :             }
; 451  : 
; 452  :         // Read sector
; 453  :         retry = 4;

  00dec	e3a03004	 mov         r3, #4
  00df0	e58d3024	 str         r3, [sp, #0x24]
  00df4		 |$LN6@OALFlashSt@3|

; 454  :         do
; 455  :             {
; 456  :             if (FMD_ReadSector(sector, pData + offset, pSectorInfo, 1)) break;

  00df4	e3a03001	 mov         r3, #1
  00df8	e59d201c	 ldr         r2, [sp, #0x1C]
  00dfc	e59d008c	 ldr         r0, [sp, #0x8C]
  00e00	e59d1018	 ldr         r1, [sp, #0x18]
  00e04	e0801001	 add         r1, r0, r1
  00e08	e59d0028	 ldr         r0, [sp, #0x28]
  00e0c	eb000000	 bl          FMD_ReadSector
  00e10	e58d0070	 str         r0, [sp, #0x70]
  00e14	e59d3070	 ldr         r3, [sp, #0x70]
  00e18	e3530000	 cmp         r3, #0
  00e1c	0a000000	 beq         |$LN3@OALFlashSt@3|
  00e20	ea000005	 b           |$LN4@OALFlashSt@3|
  00e24		 |$LN3@OALFlashSt@3|

; 457  :             }
; 458  :         while (--retry > 0);

  00e24	e59d3024	 ldr         r3, [sp, #0x24]
  00e28	e2433001	 sub         r3, r3, #1
  00e2c	e58d3024	 str         r3, [sp, #0x24]
  00e30	e59d3024	 ldr         r3, [sp, #0x24]
  00e34	e3530000	 cmp         r3, #0
  00e38	8affffed	 bhi         |$LN6@OALFlashSt@3|
  00e3c		 |$LN4@OALFlashSt@3|

; 459  : 
; 460  :         // If read failed, exit...
; 461  :         if (retry == 0)

  00e3c	e59d3024	 ldr         r3, [sp, #0x24]
  00e40	e3530000	 cmp         r3, #0
  00e44	1a00000e	 bne         |$LN2@OALFlashSt@3|

; 462  :             {
; 463  :             OALMSG(OAL_ERROR, (L"ERROR: OALFlashStoreRead: "
; 464  :                 L"Failed read sector %d (%d sector in block %d)\r\n",
; 465  :                 sector, sectorInBlock, block
; 466  :                 ));

  00e48	e59f310c	 ldr         r3, [pc, #0x10C]
  00e4c	e5933440	 ldr         r3, [r3, #0x440]
  00e50	e3130001	 tst         r3, #1
  00e54	0a000007	 beq         |$LN33@OALFlashSt@3|
  00e58	e59d303c	 ldr         r3, [sp, #0x3C]
  00e5c	e59d2034	 ldr         r2, [sp, #0x34]
  00e60	e59d1028	 ldr         r1, [sp, #0x28]
  00e64	e59f00f4	 ldr         r0, [pc, #0xF4]
  00e68	eb000000	 bl          NKDbgPrintfW
  00e6c	e3a03001	 mov         r3, #1
  00e70	e58d3074	 str         r3, [sp, #0x74]
  00e74	ea000001	 b           |$LN34@OALFlashSt@3|
  00e78		 |$LN33@OALFlashSt@3|
  00e78	e3a03000	 mov         r3, #0
  00e7c	e58d3074	 str         r3, [sp, #0x74]
  00e80		 |$LN34@OALFlashSt@3|

; 467  :             goto cleanUp;

  00e80	ea00001e	 b           |$cleanUp$44580|
  00e84		 |$LN2@OALFlashSt@3|

; 468  :             }
; 469  : 
; 470  :         // Move to next sector
; 471  :         sector++;

  00e84	e59d3028	 ldr         r3, [sp, #0x28]
  00e88	e2833001	 add         r3, r3, #1
  00e8c	e58d3028	 str         r3, [sp, #0x28]

; 472  :         sectorInBlock++;

  00e90	e59d3034	 ldr         r3, [sp, #0x34]
  00e94	e2833001	 add         r3, r3, #1
  00e98	e58d3034	 str         r3, [sp, #0x34]

; 473  :         if (sectorInBlock  >= pFlash->sectorsPerBlock)

  00e9c	e59d3020	 ldr         r3, [sp, #0x20]
  00ea0	e2833008	 add         r3, r3, #8
  00ea4	e59d2034	 ldr         r2, [sp, #0x34]
  00ea8	e5933000	 ldr         r3, [r3]
  00eac	e1520003	 cmp         r2, r3
  00eb0	3a00000b	 bcc         |$LN1@OALFlashSt@3|

; 474  :             {
; 475  :             block++;

  00eb4	e59d303c	 ldr         r3, [sp, #0x3C]
  00eb8	e2833001	 add         r3, r3, #1
  00ebc	e58d303c	 str         r3, [sp, #0x3C]

; 476  :             pFlash->blockPos++;

  00ec0	e59d3020	 ldr         r3, [sp, #0x20]
  00ec4	e2833014	 add         r3, r3, #0x14
  00ec8	e5933000	 ldr         r3, [r3]
  00ecc	e2832001	 add         r2, r3, #1
  00ed0	e59d3020	 ldr         r3, [sp, #0x20]
  00ed4	e2833014	 add         r3, r3, #0x14
  00ed8	e5832000	 str         r2, [r3]

; 477  :             sectorInBlock = 0;

  00edc	e3a03000	 mov         r3, #0
  00ee0	e58d3034	 str         r3, [sp, #0x34]
  00ee4		 |$LN1@OALFlashSt@3|

; 478  :             }
; 479  :         offset += sectorDataSize;

  00ee4	e59d2018	 ldr         r2, [sp, #0x18]
  00ee8	e59d3010	 ldr         r3, [sp, #0x10]
  00eec	e0823003	 add         r3, r2, r3
  00ef0	e58d3018	 str         r3, [sp, #0x18]

; 480  :         }

  00ef4	eaffff72	 b           |$LN37@OALFlashSt@3|
  00ef8		 |$LN12@OALFlashSt@3|

; 481  : 
; 482  :     // Done
; 483  :     rc = TRUE;

  00ef8	e3a03001	 mov         r3, #1
  00efc	e58d3014	 str         r3, [sp, #0x14]
  00f00		 |$cleanUp$44580|

; 484  : 
; 485  : cleanUp:
; 486  :     OALMSG(OAL_FLASH&&OAL_FUNC, (L"-OALFlashStoreRead(rc = %d)\r\n", rc));

  00f00	e59f3054	 ldr         r3, [pc, #0x54]
  00f04	e5933440	 ldr         r3, [r3, #0x440]
  00f08	e3130a02	 tst         r3, #2, 20
  00f0c	0a000009	 beq         |$LN35@OALFlashSt@3|
  00f10	e59f3044	 ldr         r3, [pc, #0x44]
  00f14	e5933440	 ldr         r3, [r3, #0x440]
  00f18	e3130004	 tst         r3, #4
  00f1c	0a000005	 beq         |$LN35@OALFlashSt@3|
  00f20	e59d1014	 ldr         r1, [sp, #0x14]
  00f24	e59f002c	 ldr         r0, [pc, #0x2C]
  00f28	eb000000	 bl          NKDbgPrintfW
  00f2c	e3a03001	 mov         r3, #1
  00f30	e58d3078	 str         r3, [sp, #0x78]
  00f34	ea000001	 b           |$LN36@OALFlashSt@3|
  00f38		 |$LN35@OALFlashSt@3|
  00f38	e3a03000	 mov         r3, #0
  00f3c	e58d3078	 str         r3, [sp, #0x78]
  00f40		 |$LN36@OALFlashSt@3|

; 487  :     return rc;

  00f40	e59d3014	 ldr         r3, [sp, #0x14]
  00f44	e58d304c	 str         r3, [sp, #0x4C]

; 488  : }

  00f48	e59d004c	 ldr         r0, [sp, #0x4C]
  00f4c	e28dd07c	 add         sp, sp, #0x7C
  00f50	e89d6000	 ldmia       sp, {sp, lr}
  00f54	e12fff1e	 bx          lr
  00f58		 |$LN41@OALFlashSt@3|
  00f58		 |$LN42@OALFlashSt@3|
  00f58	00000000	 DCD         |??_C@_1DM@KJHIDCKC@?$AA?9?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAR?$AAe?$AAa?$AAd?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00f5c		 |$LN43@OALFlashSt@3|
  00f5c	00000000	 DCD         |dpCurSettings|
  00f60		 |$LN44@OALFlashSt@3|
  00f60	00000000	 DCD         |??_C@_1JE@BGBADADK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAR?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd@|
  00f64		 |$LN45@OALFlashSt@3|
  00f64	00000000	 DCD         |??_C@_1DE@JONHLDDF@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAS?$AAk?$AAi?$AAp?$AA?5?$AAb?$AAa?$AAd?$AA?5?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  00f68		 |$LN46@OALFlashSt@3|
  00f68	00000000	 DCD         |??_C@_1HM@LNEGDDBN@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAR?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAR?$AAu?$AAn?$AA?5?$AAo?$AAu@|
  00f6c		 |$LN47@OALFlashSt@3|
  00f6c	00000000	 DCD         |??_C@_1KI@BBPBIBEF@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAR?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd@|
  00f70		 |$LN48@OALFlashSt@3|
  00f70	00000000	 DCD         |??_C@_1LA@OCBPILJB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAR?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAF?$AAl?$AAa?$AAs?$AAh?$AA?5@|
  00f74		 |$LN49@OALFlashSt@3|
  00f74	00000000	 DCD         |??_C@_1KC@GLMKKJJO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAR?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAF?$AAl?$AAa?$AAs?$AAh?$AA?5@|
  00f78		 |$LN50@OALFlashSt@3|
  00f78	00000000	 DCD         |??_C@_1HK@HAFKLFGC@?$AA?$CL?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAR?$AAe?$AAa?$AAd?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8@|
  00f7c		 |$M44982|

			 ENDP  ; |OALFlashStoreRead|

	EXPORT	|??_C@_1DO@GHPAFAFJ@?$AA?9?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAE?$AAr?$AAa?$AAs?$AAe?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HO@HCGPHIPI@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAE?$AAr?$AAa?$AAs?$AAe?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IE@DFIGNOEA@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAE?$AAr?$AAa?$AAs?$AAe?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FM@COEEAOKJ@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAE?$AAr?$AAa?$AAs?$AAe?$AA?3?$AA?5?$AAS?$AAk?$AAi?$AAp?$AA?5?$AAb@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GE@CGLPBIPN@?$AA?$CL?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAE?$AAr?$AAa?$AAs?$AAe?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0@| [ DATA ] ; `string'
	EXPORT	|OALFlashStoreErase|

  00018			 AREA	 |.pdata|, PDATA
|$T45013| DCD	|$LN30@OALFlashSt@4|
	DCD	0x4000fc04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@GHPAFAFJ@?$AA?9?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAE?$AAr?$AAa?$AAs?$AAe?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "F", 0x0, "l", 0x0, "a"
	DCB	0x0, "s", 0x0, "h", 0x0, "S", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, "e", 0x0, "E", 0x0, "r", 0x0, "a", 0x0, "s", 0x0, "e"
	DCB	0x0, "(", 0x0, "r", 0x0, "c", 0x0, " ", 0x0, "=", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HO@HCGPHIPI@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAE?$AAr?$AAa?$AAs?$AAe?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "F", 0x0, "l", 0x0, "a"
	DCB	0x0, "s", 0x0, "h", 0x0, "S", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, "e", 0x0, "E", 0x0, "r", 0x0, "a", 0x0, "s", 0x0, "e"
	DCB	0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a", 0x0, "i", 0x0, "l"
	DCB	0x0, "e", 0x0, "d", 0x0, " ", 0x0, "s", 0x0, "e", 0x0, "t"
	DCB	0x0, " ", 0x0, "b", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, "s", 0x0, "t"
	DCB	0x0, "a", 0x0, "t", 0x0, "u", 0x0, "s", 0x0, " ", 0x0, "a"
	DCB	0x0, "s", 0x0, " ", 0x0, "b", 0x0, "a", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IE@DFIGNOEA@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAE?$AAr?$AAa?$AAs?$AAe?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd@| DCB "W"
	DCB	0x0, "A", 0x0, "R", 0x0, "N", 0x0, ":", 0x0, " ", 0x0, "O"
	DCB	0x0, "A", 0x0, "L", 0x0, "F", 0x0, "l", 0x0, "a", 0x0, "s"
	DCB	0x0, "h", 0x0, "S", 0x0, "t", 0x0, "o", 0x0, "r", 0x0, "e"
	DCB	0x0, "E", 0x0, "r", 0x0, "a", 0x0, "s", 0x0, "e", 0x0, ":"
	DCB	0x0, " ", 0x0, "F", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e"
	DCB	0x0, "d", 0x0, " ", 0x0, "e", 0x0, "r", 0x0, "a", 0x0, "s"
	DCB	0x0, "e", 0x0, " ", 0x0, "b", 0x0, "l", 0x0, "o", 0x0, "c"
	DCB	0x0, "k", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " "
	DCB	0x0, "m", 0x0, "a", 0x0, "r", 0x0, "k", 0x0, " ", 0x0, "i"
	DCB	0x0, "t", 0x0, " ", 0x0, "a", 0x0, "s", 0x0, " ", 0x0, "b"
	DCB	0x0, "a", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FM@COEEAOKJ@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAE?$AAr?$AAa?$AAs?$AAe?$AA?3?$AA?5?$AAS?$AAk?$AAi?$AAp?$AA?5?$AAb@| DCB "W"
	DCB	0x0, "A", 0x0, "R", 0x0, "N", 0x0, ":", 0x0, " ", 0x0, "O"
	DCB	0x0, "A", 0x0, "L", 0x0, "F", 0x0, "l", 0x0, "a", 0x0, "s"
	DCB	0x0, "h", 0x0, "S", 0x0, "t", 0x0, "o", 0x0, "r", 0x0, "e"
	DCB	0x0, "E", 0x0, "r", 0x0, "a", 0x0, "s", 0x0, "e", 0x0, ":"
	DCB	0x0, " ", 0x0, "S", 0x0, "k", 0x0, "i", 0x0, "p", 0x0, " "
	DCB	0x0, "b", 0x0, "a", 0x0, "d", 0x0, " ", 0x0, "b", 0x0, "l"
	DCB	0x0, "o", 0x0, "c", 0x0, "k", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GE@CGLPBIPN@?$AA?$CL?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAE?$AAr?$AAa?$AAs?$AAe?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "F", 0x0, "l", 0x0, "a"
	DCB	0x0, "s", 0x0, "h", 0x0, "S", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, "e", 0x0, "E", 0x0, "r", 0x0, "a", 0x0, "s", 0x0, "e"
	DCB	0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "x", 0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "8", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ","
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  00f7c			 AREA	 |.text|, CODE, ARM

  00f7c		 |OALFlashStoreErase| PROC

; 499  : {

  00f7c		 |$LN30@OALFlashSt@4|
  00f7c	e1a0c00d	 mov         r12, sp
  00f80	e92d000f	 stmdb       sp!, {r0 - r3}
  00f84	e92d5000	 stmdb       sp!, {r12, lr}
  00f88	e24dd04c	 sub         sp, sp, #0x4C
  00f8c		 |$M45010|

; 500  :     BOOL rc = FALSE;

  00f8c	e3a03000	 mov         r3, #0
  00f90	e58d3008	 str         r3, [sp, #8]

; 501  :     OAL_FLASH_CONTEXT *pFlash = hFlash;

  00f94	e59d3054	 ldr         r3, [sp, #0x54]
  00f98	e58d3010	 str         r3, [sp, #0x10]

; 502  :     ULONG sector, block, count, offset;
; 503  :     ULONG retry;
; 504  : 
; 505  : 
; 506  :     OALMSG(OAL_FLASH&&OAL_FUNC, (
; 507  :         L"+OALFlashStoreErase(0x%08x, 0x%08x, 0x%08x, %d)\r\n",
; 508  :         hFlash, start, size, offsetReservedBlocks
; 509  :         ));

  00f9c	e59f33b4	 ldr         r3, [pc, #0x3B4]
  00fa0	e5933440	 ldr         r3, [r3, #0x440]
  00fa4	e3130a02	 tst         r3, #2, 20
  00fa8	0a00000d	 beq         |$LN16@OALFlashSt@4|
  00fac	e59f33a4	 ldr         r3, [pc, #0x3A4]
  00fb0	e5933440	 ldr         r3, [r3, #0x440]
  00fb4	e3130004	 tst         r3, #4
  00fb8	0a000009	 beq         |$LN16@OALFlashSt@4|
  00fbc	e59d3060	 ldr         r3, [sp, #0x60]
  00fc0	e58d3000	 str         r3, [sp]
  00fc4	e59d305c	 ldr         r3, [sp, #0x5C]
  00fc8	e59d2058	 ldr         r2, [sp, #0x58]
  00fcc	e59d1054	 ldr         r1, [sp, #0x54]
  00fd0	e59f0390	 ldr         r0, [pc, #0x390]
  00fd4	eb000000	 bl          NKDbgPrintfW
  00fd8	e3a03001	 mov         r3, #1
  00fdc	e58d3028	 str         r3, [sp, #0x28]
  00fe0	ea000001	 b           |$LN17@OALFlashSt@4|
  00fe4		 |$LN16@OALFlashSt@4|
  00fe4	e3a03000	 mov         r3, #0
  00fe8	e58d3028	 str         r3, [sp, #0x28]
  00fec		 |$LN17@OALFlashSt@4|

; 510  : 
; 511  :     // First get socket start block number
; 512  :     sector = (start + pFlash->sectorSize - 1)/pFlash->sectorSize;

  00fec	e59d3010	 ldr         r3, [sp, #0x10]
  00ff0	e2833004	 add         r3, r3, #4
  00ff4	e59d2058	 ldr         r2, [sp, #0x58]
  00ff8	e5933000	 ldr         r3, [r3]
  00ffc	e0823003	 add         r3, r2, r3
  01000	e2431001	 sub         r1, r3, #1
  01004	e59d3010	 ldr         r3, [sp, #0x10]
  01008	e2833004	 add         r3, r3, #4
  0100c	e5930000	 ldr         r0, [r3]
  01010	eb000000	 bl          __rt_udiv
  01014	e58d0018	 str         r0, [sp, #0x18]

; 513  :     block = (sector + pFlash->sectorsPerBlock - 1)/pFlash->sectorsPerBlock;

  01018	e59d3010	 ldr         r3, [sp, #0x10]
  0101c	e2833008	 add         r3, r3, #8
  01020	e59d2018	 ldr         r2, [sp, #0x18]
  01024	e5933000	 ldr         r3, [r3]
  01028	e0823003	 add         r3, r2, r3
  0102c	e2431001	 sub         r1, r3, #1
  01030	e59d3010	 ldr         r3, [sp, #0x10]
  01034	e2833008	 add         r3, r3, #8
  01038	e5930000	 ldr         r0, [r3]
  0103c	eb000000	 bl          __rt_udiv
  01040	e58d001c	 str         r0, [sp, #0x1C]

; 514  : 
; 515  :     // Offset reserved blocks
; 516  :     if (offsetReservedBlocks) block += pFlash->reservedBlocks;

  01044	e59d3060	 ldr         r3, [sp, #0x60]
  01048	e3530000	 cmp         r3, #0
  0104c	0a000005	 beq         |$LN13@OALFlashSt@4|
  01050	e59d3010	 ldr         r3, [sp, #0x10]
  01054	e2833010	 add         r3, r3, #0x10
  01058	e59d201c	 ldr         r2, [sp, #0x1C]
  0105c	e5933000	 ldr         r3, [r3]
  01060	e0823003	 add         r3, r2, r3
  01064	e58d301c	 str         r3, [sp, #0x1C]
  01068		 |$LN13@OALFlashSt@4|

; 517  : 
; 518  :     // Find number of blocks to erase
; 519  :     if (size == -1)

  01068	e59d305c	 ldr         r3, [sp, #0x5C]
  0106c	e3730001	 cmn         r3, #1
  01070	1a000006	 bne         |$LN12@OALFlashSt@4|

; 520  :         {
; 521  :         count = pFlash->blocksOnFlash - block;

  01074	e59d3010	 ldr         r3, [sp, #0x10]
  01078	e283300c	 add         r3, r3, #0xC
  0107c	e5932000	 ldr         r2, [r3]
  01080	e59d301c	 ldr         r3, [sp, #0x1C]
  01084	e0423003	 sub         r3, r2, r3
  01088	e58d3004	 str         r3, [sp, #4]

; 522  :         }
; 523  :     else

  0108c	ea000019	 b           |$LN11@OALFlashSt@4|
  01090		 |$LN12@OALFlashSt@4|

; 524  :         {
; 525  :         offset = block * pFlash->sectorsPerBlock * pFlash->sectorSize - start;

  01090	e59d3010	 ldr         r3, [sp, #0x10]
  01094	e2833008	 add         r3, r3, #8
  01098	e59d201c	 ldr         r2, [sp, #0x1C]
  0109c	e5933000	 ldr         r3, [r3]
  010a0	e0010392	 mul         r1, r2, r3
  010a4	e59d3010	 ldr         r3, [sp, #0x10]
  010a8	e2833004	 add         r3, r3, #4
  010ac	e5933000	 ldr         r3, [r3]
  010b0	e0020391	 mul         r2, r1, r3
  010b4	e59d3058	 ldr         r3, [sp, #0x58]
  010b8	e0423003	 sub         r3, r2, r3
  010bc	e58d300c	 str         r3, [sp, #0xC]

; 526  :         size -= offset;

  010c0	e59d205c	 ldr         r2, [sp, #0x5C]
  010c4	e59d300c	 ldr         r3, [sp, #0xC]
  010c8	e0423003	 sub         r3, r2, r3
  010cc	e58d305c	 str         r3, [sp, #0x5C]

; 527  :         count = size/(pFlash->sectorsPerBlock * pFlash->sectorSize);

  010d0	e59d3010	 ldr         r3, [sp, #0x10]
  010d4	e2832008	 add         r2, r3, #8
  010d8	e59d3010	 ldr         r3, [sp, #0x10]
  010dc	e2833004	 add         r3, r3, #4
  010e0	e5922000	 ldr         r2, [r2]
  010e4	e5933000	 ldr         r3, [r3]
  010e8	e0000392	 mul         r0, r2, r3
  010ec	e59d105c	 ldr         r1, [sp, #0x5C]
  010f0	eb000000	 bl          __rt_udiv
  010f4	e58d0004	 str         r0, [sp, #4]
  010f8		 |$LN11@OALFlashSt@4|

; 528  :         }
; 529  : 
; 530  :     if (!SeekToBlock(pFlash, block)) goto cleanUp;

  010f8	e59d101c	 ldr         r1, [sp, #0x1C]
  010fc	e59d0010	 ldr         r0, [sp, #0x10]
  01100	eb000000	 bl          SeekToBlock
  01104	e58d002c	 str         r0, [sp, #0x2C]
  01108	e59d302c	 ldr         r3, [sp, #0x2C]
  0110c	e3530000	 cmp         r3, #0
  01110	1a000000	 bne         |$LN10@OALFlashSt@4|
  01114	ea000078	 b           |$cleanUp$44631|
  01118		 |$LN10@OALFlashSt@4|

; 531  : 
; 532  :     // Compensate for bad blocks
; 533  :     block += pFlash->badBlocksAtPos;

  01118	e59d3010	 ldr         r3, [sp, #0x10]
  0111c	e2833018	 add         r3, r3, #0x18
  01120	e59d201c	 ldr         r2, [sp, #0x1C]
  01124	e5933000	 ldr         r3, [r3]
  01128	e0823003	 add         r3, r2, r3
  0112c	e58d301c	 str         r3, [sp, #0x1C]
  01130		 |$LN27@OALFlashSt@4|
  01130		 |$LN26@OALFlashSt@4|
  01130		 |$LN9@OALFlashSt@4|

; 534  :     while ((count > 0) && (block < pFlash->blocksOnFlash))

  01130	e59d3004	 ldr         r3, [sp, #4]
  01134	e3530000	 cmp         r3, #0
  01138	9a00006d	 bls         |$LN8@OALFlashSt@4|
  0113c	e59d3010	 ldr         r3, [sp, #0x10]
  01140	e283300c	 add         r3, r3, #0xC
  01144	e59d201c	 ldr         r2, [sp, #0x1C]
  01148	e5933000	 ldr         r3, [r3]
  0114c	e1520003	 cmp         r2, r3
  01150	2a000067	 bcs         |$LN8@OALFlashSt@4|

; 535  :         {
; 536  : 
; 537  :         // Skip block if it is marked as bad
; 538  :         if ((FMD_GetBlockStatus(block) & BLOCK_STATUS_BAD) != 0)

  01154	e59d001c	 ldr         r0, [sp, #0x1C]
  01158	eb000000	 bl          FMD_GetBlockStatus
  0115c	e58d0030	 str         r0, [sp, #0x30]
  01160	e59d3030	 ldr         r3, [sp, #0x30]
  01164	e3130002	 tst         r3, #2
  01168	0a000016	 beq         |$LN7@OALFlashSt@4|

; 539  :             {
; 540  :             OALMSG(OAL_WARN, (L"WARN: OALFlashStoreErase: "
; 541  :                 L"Skip bad block %d\r\n", block
; 542  :                 ));

  0116c	e59f31e4	 ldr         r3, [pc, #0x1E4]
  01170	e5933440	 ldr         r3, [r3, #0x440]
  01174	e3130002	 tst         r3, #2
  01178	0a000005	 beq         |$LN18@OALFlashSt@4|
  0117c	e59d101c	 ldr         r1, [sp, #0x1C]
  01180	e59f01dc	 ldr         r0, [pc, #0x1DC]
  01184	eb000000	 bl          NKDbgPrintfW
  01188	e3a03001	 mov         r3, #1
  0118c	e58d3034	 str         r3, [sp, #0x34]
  01190	ea000001	 b           |$LN19@OALFlashSt@4|
  01194		 |$LN18@OALFlashSt@4|
  01194	e3a03000	 mov         r3, #0
  01198	e58d3034	 str         r3, [sp, #0x34]
  0119c		 |$LN19@OALFlashSt@4|

; 543  :             block++;

  0119c	e59d301c	 ldr         r3, [sp, #0x1C]
  011a0	e2833001	 add         r3, r3, #1
  011a4	e58d301c	 str         r3, [sp, #0x1C]

; 544  :             pFlash->badBlocksAtPos++;

  011a8	e59d3010	 ldr         r3, [sp, #0x10]
  011ac	e2833018	 add         r3, r3, #0x18
  011b0	e5933000	 ldr         r3, [r3]
  011b4	e2832001	 add         r2, r3, #1
  011b8	e59d3010	 ldr         r3, [sp, #0x10]
  011bc	e2833018	 add         r3, r3, #0x18
  011c0	e5832000	 str         r2, [r3]

; 545  :             continue;

  011c4	eaffffd9	 b           |$LN9@OALFlashSt@4|
  011c8		 |$LN7@OALFlashSt@4|

; 546  :             }
; 547  : 
; 548  :         // Erase block
; 549  :         retry = 4;

  011c8	e3a03004	 mov         r3, #4
  011cc	e58d3014	 str         r3, [sp, #0x14]
  011d0		 |$LN6@OALFlashSt@4|

; 550  :         do
; 551  :             {
; 552  :             if (FMD_EraseBlock(block)) break;

  011d0	e59d001c	 ldr         r0, [sp, #0x1C]
  011d4	eb000000	 bl          FMD_EraseBlock
  011d8	e58d0038	 str         r0, [sp, #0x38]
  011dc	e59d3038	 ldr         r3, [sp, #0x38]
  011e0	e3530000	 cmp         r3, #0
  011e4	0a000000	 beq         |$LN3@OALFlashSt@4|
  011e8	ea000005	 b           |$LN4@OALFlashSt@4|
  011ec		 |$LN3@OALFlashSt@4|

; 553  :             }
; 554  :         while (--retry > 0);

  011ec	e59d3014	 ldr         r3, [sp, #0x14]
  011f0	e2433001	 sub         r3, r3, #1
  011f4	e58d3014	 str         r3, [sp, #0x14]
  011f8	e59d3014	 ldr         r3, [sp, #0x14]
  011fc	e3530000	 cmp         r3, #0
  01200	8afffff2	 bhi         |$LN6@OALFlashSt@4|
  01204		 |$LN4@OALFlashSt@4|

; 555  : 
; 556  :         // If erase failed
; 557  :         if (retry == 0)

  01204	e59d3014	 ldr         r3, [sp, #0x14]
  01208	e3530000	 cmp         r3, #0
  0120c	1a00002a	 bne         |$LN2@OALFlashSt@4|

; 558  :             {
; 559  :             OALMSG(OAL_WARN, (L"WARN: OALFlashStoreErase: "
; 560  :                 L"Failed erase block %d, mark it as bad\r\n", block
; 561  :                 ));

  01210	e59f3140	 ldr         r3, [pc, #0x140]
  01214	e5933440	 ldr         r3, [r3, #0x440]
  01218	e3130002	 tst         r3, #2
  0121c	0a000005	 beq         |$LN20@OALFlashSt@4|
  01220	e59d101c	 ldr         r1, [sp, #0x1C]
  01224	e59f0134	 ldr         r0, [pc, #0x134]
  01228	eb000000	 bl          NKDbgPrintfW
  0122c	e3a03001	 mov         r3, #1
  01230	e58d303c	 str         r3, [sp, #0x3C]
  01234	ea000001	 b           |$LN21@OALFlashSt@4|
  01238		 |$LN20@OALFlashSt@4|
  01238	e3a03000	 mov         r3, #0
  0123c	e58d303c	 str         r3, [sp, #0x3C]
  01240		 |$LN21@OALFlashSt@4|

; 562  :             if (!FMD_SetBlockStatus(block, BLOCK_STATUS_BAD))

  01240	e3a01002	 mov         r1, #2
  01244	e59d001c	 ldr         r0, [sp, #0x1C]
  01248	eb000000	 bl          FMD_SetBlockStatus
  0124c	e58d0040	 str         r0, [sp, #0x40]
  01250	e59d3040	 ldr         r3, [sp, #0x40]
  01254	e3530000	 cmp         r3, #0
  01258	1a00000c	 bne         |$LN1@OALFlashSt@4|

; 563  :                 {
; 564  :                 OALMSG(OAL_ERROR, (L"ERROR: OALFlashStoreErase: "
; 565  :                     L"Failed set block %d status as bad\r\n", block
; 566  :                     ));

  0125c	e59f30f4	 ldr         r3, [pc, #0xF4]
  01260	e5933440	 ldr         r3, [r3, #0x440]
  01264	e3130001	 tst         r3, #1
  01268	0a000005	 beq         |$LN22@OALFlashSt@4|
  0126c	e59d101c	 ldr         r1, [sp, #0x1C]
  01270	e59f00e4	 ldr         r0, [pc, #0xE4]
  01274	eb000000	 bl          NKDbgPrintfW
  01278	e3a03001	 mov         r3, #1
  0127c	e58d3044	 str         r3, [sp, #0x44]
  01280	ea000001	 b           |$LN23@OALFlashSt@4|
  01284		 |$LN22@OALFlashSt@4|
  01284	e3a03000	 mov         r3, #0
  01288	e58d3044	 str         r3, [sp, #0x44]
  0128c		 |$LN23@OALFlashSt@4|

; 567  :                 goto cleanUp;

  0128c	ea00001a	 b           |$cleanUp$44631|
  01290		 |$LN1@OALFlashSt@4|

; 568  :                 }
; 569  :             block++;

  01290	e59d301c	 ldr         r3, [sp, #0x1C]
  01294	e2833001	 add         r3, r3, #1
  01298	e58d301c	 str         r3, [sp, #0x1C]

; 570  :             pFlash->badBlocksAtPos++;

  0129c	e59d3010	 ldr         r3, [sp, #0x10]
  012a0	e2833018	 add         r3, r3, #0x18
  012a4	e5933000	 ldr         r3, [r3]
  012a8	e2832001	 add         r2, r3, #1
  012ac	e59d3010	 ldr         r3, [sp, #0x10]
  012b0	e2833018	 add         r3, r3, #0x18
  012b4	e5832000	 str         r2, [r3]

; 571  :             continue;

  012b8	eaffff9c	 b           |$LN26@OALFlashSt@4|
  012bc		 |$LN2@OALFlashSt@4|

; 572  :             }
; 573  : 
; 574  :         // Move to next block
; 575  :         count--;

  012bc	e59d3004	 ldr         r3, [sp, #4]
  012c0	e2433001	 sub         r3, r3, #1
  012c4	e58d3004	 str         r3, [sp, #4]

; 576  :         block++;

  012c8	e59d301c	 ldr         r3, [sp, #0x1C]
  012cc	e2833001	 add         r3, r3, #1
  012d0	e58d301c	 str         r3, [sp, #0x1C]

; 577  :         pFlash->blockPos++;

  012d4	e59d3010	 ldr         r3, [sp, #0x10]
  012d8	e2833014	 add         r3, r3, #0x14
  012dc	e5933000	 ldr         r3, [r3]
  012e0	e2832001	 add         r2, r3, #1
  012e4	e59d3010	 ldr         r3, [sp, #0x10]
  012e8	e2833014	 add         r3, r3, #0x14
  012ec	e5832000	 str         r2, [r3]

; 578  :         }

  012f0	eaffff8e	 b           |$LN27@OALFlashSt@4|
  012f4		 |$LN8@OALFlashSt@4|

; 579  : 
; 580  :     // Done
; 581  :     rc = TRUE;

  012f4	e3a03001	 mov         r3, #1
  012f8	e58d3008	 str         r3, [sp, #8]
  012fc		 |$cleanUp$44631|

; 582  : 
; 583  : cleanUp:
; 584  :     OALMSG(OAL_FLASH&&OAL_FUNC, (L"-OALFlashStoreErase(rc = %d)\r\n", rc));

  012fc	e59f3054	 ldr         r3, [pc, #0x54]
  01300	e5933440	 ldr         r3, [r3, #0x440]
  01304	e3130a02	 tst         r3, #2, 20
  01308	0a000009	 beq         |$LN24@OALFlashSt@4|
  0130c	e59f3044	 ldr         r3, [pc, #0x44]
  01310	e5933440	 ldr         r3, [r3, #0x440]
  01314	e3130004	 tst         r3, #4
  01318	0a000005	 beq         |$LN24@OALFlashSt@4|
  0131c	e59d1008	 ldr         r1, [sp, #8]
  01320	e59f002c	 ldr         r0, [pc, #0x2C]
  01324	eb000000	 bl          NKDbgPrintfW
  01328	e3a03001	 mov         r3, #1
  0132c	e58d3048	 str         r3, [sp, #0x48]
  01330	ea000001	 b           |$LN25@OALFlashSt@4|
  01334		 |$LN24@OALFlashSt@4|
  01334	e3a03000	 mov         r3, #0
  01338	e58d3048	 str         r3, [sp, #0x48]
  0133c		 |$LN25@OALFlashSt@4|

; 585  :     return rc;

  0133c	e59d3008	 ldr         r3, [sp, #8]
  01340	e58d3024	 str         r3, [sp, #0x24]

; 586  : }

  01344	e59d0024	 ldr         r0, [sp, #0x24]
  01348	e28dd04c	 add         sp, sp, #0x4C
  0134c	e89d6000	 ldmia       sp, {sp, lr}
  01350	e12fff1e	 bx          lr
  01354		 |$LN31@OALFlashSt@4|
  01354		 |$LN32@OALFlashSt@4|
  01354	00000000	 DCD         |??_C@_1DO@GHPAFAFJ@?$AA?9?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAE?$AAr?$AAa?$AAs?$AAe?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  01358		 |$LN33@OALFlashSt@4|
  01358	00000000	 DCD         |dpCurSettings|
  0135c		 |$LN34@OALFlashSt@4|
  0135c	00000000	 DCD         |??_C@_1HO@HCGPHIPI@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAE?$AAr?$AAa?$AAs?$AAe?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe@|
  01360		 |$LN35@OALFlashSt@4|
  01360	00000000	 DCD         |??_C@_1IE@DFIGNOEA@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAE?$AAr?$AAa?$AAs?$AAe?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd@|
  01364		 |$LN36@OALFlashSt@4|
  01364	00000000	 DCD         |??_C@_1FM@COEEAOKJ@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAE?$AAr?$AAa?$AAs?$AAe?$AA?3?$AA?5?$AAS?$AAk?$AAi?$AAp?$AA?5?$AAb@|
  01368		 |$LN37@OALFlashSt@4|
  01368	00000000	 DCD         |??_C@_1GE@CGLPBIPN@?$AA?$CL?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAE?$AAr?$AAa?$AAs?$AAe?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0@|
  0136c		 |$M45011|

			 ENDP  ; |OALFlashStoreErase|

	EXPORT	|??_C@_1EM@DFFPJPPN@?$AA?9?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AAe?$AAd?$AAR?$AAe?$AAa?$AAd?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HC@PIJOJJGP@?$AA?$CL?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AAe?$AAd?$AAR?$AAe?$AAa?$AAd?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8@| [ DATA ] ; `string'
	EXPORT	|OALFlashStoreBufferedRead|
	IMPORT	|memcpy|

  00020			 AREA	 |.pdata|, PDATA
|$T45035| DCD	|$LN14@OALFlashSt@5|
	DCD	0x40008404

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EM@DFFPJPPN@?$AA?9?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AAe?$AAd?$AAR?$AAe?$AAa?$AAd?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "F", 0x0, "l", 0x0, "a"
	DCB	0x0, "s", 0x0, "h", 0x0, "S", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, "e", 0x0, "B", 0x0, "u", 0x0, "f", 0x0, "f", 0x0, "e"
	DCB	0x0, "r", 0x0, "e", 0x0, "d", 0x0, "R", 0x0, "e", 0x0, "a"
	DCB	0x0, "d", 0x0, "(", 0x0, "r", 0x0, "c", 0x0, " ", 0x0, "="
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HC@PIJOJJGP@?$AA?$CL?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AAe?$AAd?$AAR?$AAe?$AAa?$AAd?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "F", 0x0, "l", 0x0, "a"
	DCB	0x0, "s", 0x0, "h", 0x0, "S", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, "e", 0x0, "B", 0x0, "u", 0x0, "f", 0x0, "f", 0x0, "e"
	DCB	0x0, "r", 0x0, "e", 0x0, "d", 0x0, "R", 0x0, "e", 0x0, "a"
	DCB	0x0, "d", 0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ",", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x"
	DCB	0x0, ",", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  0136c			 AREA	 |.text|, CODE, ARM

  0136c		 |OALFlashStoreBufferedRead| PROC

; 598  : {

  0136c		 |$LN14@OALFlashSt@5|
  0136c	e1a0c00d	 mov         r12, sp
  01370	e92d000f	 stmdb       sp!, {r0 - r3}
  01374	e92d5000	 stmdb       sp!, {r12, lr}
  01378	e24dd038	 sub         sp, sp, #0x38
  0137c		 |$M45032|

; 599  :     BOOL rc = FALSE;

  0137c	e3a03000	 mov         r3, #0
  01380	e58d3008	 str         r3, [sp, #8]

; 600  :     OAL_FLASH_CONTEXT *pFlash = hFlash;

  01384	e59d3040	 ldr         r3, [sp, #0x40]
  01388	e58d3010	 str         r3, [sp, #0x10]

; 601  :     ULONG offset, copySize;
; 602  : 
; 603  : 
; 604  :     OALMSG(OAL_FLASH&&OAL_FUNC, (
; 605  :         L"+OALFlashStoreBufferedRead(0x%08x, 0x%08x, 0x%08x, %d)\r\n",
; 606  :         hFlash, start, size, offsetReservedBlocks
; 607  :         ));

  0138c	e59f31e0	 ldr         r3, [pc, #0x1E0]
  01390	e5933440	 ldr         r3, [r3, #0x440]
  01394	e3130a02	 tst         r3, #2, 20
  01398	0a00000d	 beq         |$LN6@OALFlashSt@5|
  0139c	e59f31d0	 ldr         r3, [pc, #0x1D0]
  013a0	e5933440	 ldr         r3, [r3, #0x440]
  013a4	e3130004	 tst         r3, #4
  013a8	0a000009	 beq         |$LN6@OALFlashSt@5|
  013ac	e59d3050	 ldr         r3, [sp, #0x50]
  013b0	e58d3000	 str         r3, [sp]
  013b4	e59d304c	 ldr         r3, [sp, #0x4C]
  013b8	e59d2044	 ldr         r2, [sp, #0x44]
  013bc	e59d1040	 ldr         r1, [sp, #0x40]
  013c0	e59f01b0	 ldr         r0, [pc, #0x1B0]
  013c4	eb000000	 bl          NKDbgPrintfW
  013c8	e3a03001	 mov         r3, #1
  013cc	e58d3028	 str         r3, [sp, #0x28]
  013d0	ea000001	 b           |$LN7@OALFlashSt@5|
  013d4		 |$LN6@OALFlashSt@5|
  013d4	e3a03000	 mov         r3, #0
  013d8	e58d3028	 str         r3, [sp, #0x28]
  013dc		 |$LN7@OALFlashSt@5|

; 608  : 
; 609  :     //  Calculate offset into starting block
; 610  :     offset = start - (start / pFlash->sectorSize) * pFlash->sectorSize;

  013dc	e59d3010	 ldr         r3, [sp, #0x10]
  013e0	e2833004	 add         r3, r3, #4
  013e4	e59d1044	 ldr         r1, [sp, #0x44]
  013e8	e5930000	 ldr         r0, [r3]
  013ec	eb000000	 bl          __rt_udiv
  013f0	e59d3010	 ldr         r3, [sp, #0x10]
  013f4	e2833004	 add         r3, r3, #4
  013f8	e5933000	 ldr         r3, [r3]
  013fc	e0020390	 mul         r2, r0, r3
  01400	e59d3044	 ldr         r3, [sp, #0x44]
  01404	e0433002	 sub         r3, r3, r2
  01408	e58d300c	 str         r3, [sp, #0xC]
  0140c		 |$LN3@OALFlashSt@5|

; 611  : 
; 612  :     //  Read data from flash without sector boundary and size restrictions
; 613  :     while( size > 0 )

  0140c	e59d304c	 ldr         r3, [sp, #0x4C]
  01410	e3530000	 cmp         r3, #0
  01414	9a00003d	 bls         |$LN2@OALFlashSt@5|

; 614  :     {
; 615  :         //  Read whole sector into temp buffer
; 616  :         rc = OALFlashStoreRead(
; 617  :             hFlash, start - offset, pFlash->sectorBuffer, pFlash->sectorSize,
; 618  :             FALSE, offsetReservedBlocks
; 619  :             );

  01418	e59d3050	 ldr         r3, [sp, #0x50]
  0141c	e58d3004	 str         r3, [sp, #4]
  01420	e3a03000	 mov         r3, #0
  01424	e58d3000	 str         r3, [sp]
  01428	e59d3010	 ldr         r3, [sp, #0x10]
  0142c	e2833004	 add         r3, r3, #4
  01430	e5933000	 ldr         r3, [r3]
  01434	e59d2010	 ldr         r2, [sp, #0x10]
  01438	e2822fb9	 add         r2, r2, #0xB9, 30
  0143c	e59d0044	 ldr         r0, [sp, #0x44]
  01440	e59d100c	 ldr         r1, [sp, #0xC]
  01444	e0401001	 sub         r1, r0, r1
  01448	e59d0040	 ldr         r0, [sp, #0x40]
  0144c	eb000000	 bl          OALFlashStoreRead
  01450	e58d002c	 str         r0, [sp, #0x2C]
  01454	e59d302c	 ldr         r3, [sp, #0x2C]
  01458	e58d3008	 str         r3, [sp, #8]

; 620  :         if (!rc)

  0145c	e59d3008	 ldr         r3, [sp, #8]
  01460	e3530000	 cmp         r3, #0
  01464	1a000000	 bne         |$LN1@OALFlashSt@5|

; 621  :             {
; 622  :             goto cleanUp;

  01468	ea00002a	 b           |$cleanUp$44671|
  0146c		 |$LN1@OALFlashSt@5|

; 623  :             }
; 624  :         
; 625  :         // Determine amount to copy
; 626  :         copySize = (size > pFlash->sectorSize - offset) ? pFlash->sectorSize - offset : size;

  0146c	e59d3010	 ldr         r3, [sp, #0x10]
  01470	e2833004	 add         r3, r3, #4
  01474	e5932000	 ldr         r2, [r3]
  01478	e59d300c	 ldr         r3, [sp, #0xC]
  0147c	e0422003	 sub         r2, r2, r3
  01480	e59d304c	 ldr         r3, [sp, #0x4C]
  01484	e1530002	 cmp         r3, r2
  01488	9a000006	 bls         |$LN8@OALFlashSt@5|
  0148c	e59d3010	 ldr         r3, [sp, #0x10]
  01490	e2833004	 add         r3, r3, #4
  01494	e5932000	 ldr         r2, [r3]
  01498	e59d300c	 ldr         r3, [sp, #0xC]
  0149c	e0423003	 sub         r3, r2, r3
  014a0	e58d3030	 str         r3, [sp, #0x30]
  014a4	ea000001	 b           |$LN9@OALFlashSt@5|
  014a8		 |$LN8@OALFlashSt@5|
  014a8	e59d304c	 ldr         r3, [sp, #0x4C]
  014ac	e58d3030	 str         r3, [sp, #0x30]
  014b0		 |$LN9@OALFlashSt@5|
  014b0	e59d3030	 ldr         r3, [sp, #0x30]
  014b4	e58d3014	 str         r3, [sp, #0x14]

; 627  : 
; 628  :         // Copy data to given address
; 629  :         memcpy(
; 630  :             pData, pFlash->sectorBuffer + offset, copySize
; 631  :             );

  014b8	e59d2014	 ldr         r2, [sp, #0x14]
  014bc	e59d3010	 ldr         r3, [sp, #0x10]
  014c0	e2831fb9	 add         r1, r3, #0xB9, 30
  014c4	e59d300c	 ldr         r3, [sp, #0xC]
  014c8	e0811003	 add         r1, r1, r3
  014cc	e59d0048	 ldr         r0, [sp, #0x48]
  014d0	eb000000	 bl          memcpy

; 632  : 
; 633  :         // Shift pointers
; 634  :         pData += copySize;

  014d4	e59d2048	 ldr         r2, [sp, #0x48]
  014d8	e59d3014	 ldr         r3, [sp, #0x14]
  014dc	e0823003	 add         r3, r2, r3
  014e0	e58d3048	 str         r3, [sp, #0x48]

; 635  :         start += copySize;

  014e4	e59d2044	 ldr         r2, [sp, #0x44]
  014e8	e59d3014	 ldr         r3, [sp, #0x14]
  014ec	e0823003	 add         r3, r2, r3
  014f0	e58d3044	 str         r3, [sp, #0x44]

; 636  :         size  -= copySize;

  014f4	e59d204c	 ldr         r2, [sp, #0x4C]
  014f8	e59d3014	 ldr         r3, [sp, #0x14]
  014fc	e0423003	 sub         r3, r2, r3
  01500	e58d304c	 str         r3, [sp, #0x4C]

; 637  :         offset = 0;

  01504	e3a03000	 mov         r3, #0
  01508	e58d300c	 str         r3, [sp, #0xC]

; 638  :     }

  0150c	eaffffbe	 b           |$LN3@OALFlashSt@5|
  01510		 |$LN2@OALFlashSt@5|

; 639  : 
; 640  :     // Done
; 641  :     rc = TRUE;

  01510	e3a03001	 mov         r3, #1
  01514	e58d3008	 str         r3, [sp, #8]
  01518		 |$cleanUp$44671|

; 642  :     
; 643  : cleanUp:
; 644  :     OALMSG(OAL_FLASH&&OAL_FUNC, (L"-OALFlashStoreBufferedRead(rc = %d)\r\n", rc));

  01518	e59f3054	 ldr         r3, [pc, #0x54]
  0151c	e5933440	 ldr         r3, [r3, #0x440]
  01520	e3130a02	 tst         r3, #2, 20
  01524	0a000009	 beq         |$LN10@OALFlashSt@5|
  01528	e59f3044	 ldr         r3, [pc, #0x44]
  0152c	e5933440	 ldr         r3, [r3, #0x440]
  01530	e3130004	 tst         r3, #4
  01534	0a000005	 beq         |$LN10@OALFlashSt@5|
  01538	e59d1008	 ldr         r1, [sp, #8]
  0153c	e59f002c	 ldr         r0, [pc, #0x2C]
  01540	eb000000	 bl          NKDbgPrintfW
  01544	e3a03001	 mov         r3, #1
  01548	e58d3034	 str         r3, [sp, #0x34]
  0154c	ea000001	 b           |$LN11@OALFlashSt@5|
  01550		 |$LN10@OALFlashSt@5|
  01550	e3a03000	 mov         r3, #0
  01554	e58d3034	 str         r3, [sp, #0x34]
  01558		 |$LN11@OALFlashSt@5|

; 645  :     return rc;

  01558	e59d3008	 ldr         r3, [sp, #8]
  0155c	e58d3024	 str         r3, [sp, #0x24]

; 646  : }

  01560	e59d0024	 ldr         r0, [sp, #0x24]
  01564	e28dd038	 add         sp, sp, #0x38
  01568	e89d6000	 ldmia       sp, {sp, lr}
  0156c	e12fff1e	 bx          lr
  01570		 |$LN15@OALFlashSt@5|
  01570		 |$LN16@OALFlashSt@5|
  01570	00000000	 DCD         |??_C@_1EM@DFFPJPPN@?$AA?9?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AAe?$AAd?$AAR?$AAe?$AAa?$AAd?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5@|
  01574		 |$LN17@OALFlashSt@5|
  01574	00000000	 DCD         |dpCurSettings|
  01578		 |$LN18@OALFlashSt@5|
  01578	00000000	 DCD         |??_C@_1HC@PIJOJJGP@?$AA?$CL?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AAe?$AAd?$AAR?$AAe?$AAa?$AAd?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8@|
  0157c		 |$M45033|

			 ENDP  ; |OALFlashStoreBufferedRead|

	EXPORT	|OALFlashStoreReadFromReservedRegion|
	IMPORT	|strcmp|

  00028			 AREA	 |.pdata|, PDATA
|$T45051| DCD	|$LN19@OALFlashSt@6|
	DCD	0x4000ff04
; Function compile flags: /Odtp

  0157c			 AREA	 |.text|, CODE, ARM

  0157c		 |OALFlashStoreReadFromReservedRegion| PROC

; 658  : {

  0157c		 |$LN19@OALFlashSt@6|
  0157c	e1a0c00d	 mov         r12, sp
  01580	e92d000f	 stmdb       sp!, {r0 - r3}
  01584	e92d5000	 stmdb       sp!, {r12, lr}
  01588	e24dd04c	 sub         sp, sp, #0x4C
  0158c		 |$M45048|

; 659  :     BOOL rc = FALSE;

  0158c	e3a03000	 mov         r3, #0
  01590	e58d3008	 str         r3, [sp, #8]

; 660  :     OAL_FLASH_CONTEXT *pFlash = hFlash;

  01594	e59d3054	 ldr         r3, [sp, #0x54]
  01598	e58d3018	 str         r3, [sp, #0x18]

; 661  :     ULONG regionSize, offset, ix;
; 662  : 
; 663  : 
; 664  :     // Try build layout info if there are no reserved regions yet...
; 665  :     if ((pFlash->reservedRegions == 0) && !BuildLayoutInfo(hFlash))

  0159c	e59d3018	 ldr         r3, [sp, #0x18]
  015a0	e283301c	 add         r3, r3, #0x1C
  015a4	e5933000	 ldr         r3, [r3]
  015a8	e3530000	 cmp         r3, #0
  015ac	1a000006	 bne         |$LN14@OALFlashSt@6|
  015b0	e59d0054	 ldr         r0, [sp, #0x54]
  015b4	eb000000	 bl          BuildLayoutInfo
  015b8	e58d0038	 str         r0, [sp, #0x38]
  015bc	e59d3038	 ldr         r3, [sp, #0x38]
  015c0	e3530000	 cmp         r3, #0
  015c4	1a000000	 bne         |$LN14@OALFlashSt@6|

; 666  :         {
; 667  :         goto cleanUp;

  015c8	ea0000e4	 b           |$cleanUp$44691|
  015cc		 |$LN14@OALFlashSt@6|

; 668  :         }
; 669  : 
; 670  :     // Find reserved region with given name
; 671  :     for (ix = 0; ix < pFlash->reservedRegions; ix++)

  015cc	e3a03000	 mov         r3, #0
  015d0	e58d300c	 str         r3, [sp, #0xC]
  015d4	ea000002	 b           |$LN13@OALFlashSt@6|
  015d8		 |$LN12@OALFlashSt@6|
  015d8	e59d300c	 ldr         r3, [sp, #0xC]
  015dc	e2833001	 add         r3, r3, #1
  015e0	e58d300c	 str         r3, [sp, #0xC]
  015e4		 |$LN13@OALFlashSt@6|
  015e4	e59d3018	 ldr         r3, [sp, #0x18]
  015e8	e283301c	 add         r3, r3, #0x1C
  015ec	e59d200c	 ldr         r2, [sp, #0xC]
  015f0	e5933000	 ldr         r3, [r3]
  015f4	e1520003	 cmp         r2, r3
  015f8	2a00000d	 bcs         |$LN11@OALFlashSt@6|

; 672  :         {
; 673  :         if (strcmp(name, pFlash->reservedRegion[ix].szName) == 0) break;

  015fc	e59d3018	 ldr         r3, [sp, #0x18]
  01600	e2831020	 add         r1, r3, #0x20
  01604	e59d200c	 ldr         r2, [sp, #0xC]
  01608	e3a03010	 mov         r3, #0x10
  0160c	e0030392	 mul         r3, r2, r3
  01610	e0811003	 add         r1, r1, r3
  01614	e59d0058	 ldr         r0, [sp, #0x58]
  01618	eb000000	 bl          strcmp
  0161c	e58d003c	 str         r0, [sp, #0x3C]
  01620	e59d303c	 ldr         r3, [sp, #0x3C]
  01624	e3530000	 cmp         r3, #0
  01628	1a000000	 bne         |$LN10@OALFlashSt@6|
  0162c	ea000000	 b           |$LN11@OALFlashSt@6|
  01630		 |$LN10@OALFlashSt@6|

; 674  :         }

  01630	eaffffe8	 b           |$LN12@OALFlashSt@6|
  01634		 |$LN11@OALFlashSt@6|

; 675  : 
; 676  :     // If there isn't one we are done
; 677  :     if (ix >= pFlash->reservedRegions) goto cleanUp;

  01634	e59d3018	 ldr         r3, [sp, #0x18]
  01638	e283301c	 add         r3, r3, #0x1C
  0163c	e59d200c	 ldr         r2, [sp, #0xC]
  01640	e5933000	 ldr         r3, [r3]
  01644	e1520003	 cmp         r2, r3
  01648	3a000000	 bcc         |$LN9@OALFlashSt@6|
  0164c	ea0000c3	 b           |$cleanUp$44691|
  01650		 |$LN9@OALFlashSt@6|

; 678  : 
; 679  :     // Get reserved partition size
; 680  :     regionSize =  pFlash->reservedRegion[ix].dwNumBlocks;

  01650	e59d3018	 ldr         r3, [sp, #0x18]
  01654	e2831020	 add         r1, r3, #0x20
  01658	e59d200c	 ldr         r2, [sp, #0xC]
  0165c	e3a03010	 mov         r3, #0x10
  01660	e0030392	 mul         r3, r2, r3
  01664	e0813003	 add         r3, r1, r3
  01668	e283300c	 add         r3, r3, #0xC
  0166c	e5933000	 ldr         r3, [r3]
  01670	e58d3014	 str         r3, [sp, #0x14]

; 681  :     regionSize *= pFlash->sectorsPerBlock * pFlash->sectorSize;

  01674	e59d3018	 ldr         r3, [sp, #0x18]
  01678	e2832008	 add         r2, r3, #8
  0167c	e59d3018	 ldr         r3, [sp, #0x18]
  01680	e2833004	 add         r3, r3, #4
  01684	e5922000	 ldr         r2, [r2]
  01688	e5933000	 ldr         r3, [r3]
  0168c	e0030392	 mul         r3, r2, r3
  01690	e59d2014	 ldr         r2, [sp, #0x14]
  01694	e0030392	 mul         r3, r2, r3
  01698	e58d3014	 str         r3, [sp, #0x14]

; 682  : 
; 683  :     // Check if there is enough space for request
; 684  :     if ((start >= regionSize) || ((regionSize - start) < size))

  0169c	e59d205c	 ldr         r2, [sp, #0x5C]
  016a0	e59d3014	 ldr         r3, [sp, #0x14]
  016a4	e1520003	 cmp         r2, r3
  016a8	2a000005	 bcs         |$LN7@OALFlashSt@6|
  016ac	e59d2014	 ldr         r2, [sp, #0x14]
  016b0	e59d305c	 ldr         r3, [sp, #0x5C]
  016b4	e0422003	 sub         r2, r2, r3
  016b8	e59d3064	 ldr         r3, [sp, #0x64]
  016bc	e1520003	 cmp         r2, r3
  016c0	2a000000	 bcs         |$LN8@OALFlashSt@6|
  016c4		 |$LN7@OALFlashSt@6|

; 685  :         {
; 686  :         goto cleanUp;

  016c4	ea0000a5	 b           |$cleanUp$44691|
  016c8		 |$LN8@OALFlashSt@6|

; 687  :         }
; 688  : 
; 689  :     // Calculate read start
; 690  :     offset  = pFlash->reservedRegion[ix].dwStartBlock;

  016c8	e59d3018	 ldr         r3, [sp, #0x18]
  016cc	e2831020	 add         r1, r3, #0x20
  016d0	e59d200c	 ldr         r2, [sp, #0xC]
  016d4	e3a03010	 mov         r3, #0x10
  016d8	e0030392	 mul         r3, r2, r3
  016dc	e0813003	 add         r3, r1, r3
  016e0	e2833008	 add         r3, r3, #8
  016e4	e5933000	 ldr         r3, [r3]
  016e8	e58d3010	 str         r3, [sp, #0x10]

; 691  :     offset *= pFlash->sectorsPerBlock * pFlash->sectorSize;

  016ec	e59d3018	 ldr         r3, [sp, #0x18]
  016f0	e2832008	 add         r2, r3, #8
  016f4	e59d3018	 ldr         r3, [sp, #0x18]
  016f8	e2833004	 add         r3, r3, #4
  016fc	e5922000	 ldr         r2, [r2]
  01700	e5933000	 ldr         r3, [r3]
  01704	e0030392	 mul         r3, r2, r3
  01708	e59d2010	 ldr         r2, [sp, #0x10]
  0170c	e0030392	 mul         r3, r2, r3
  01710	e58d3010	 str         r3, [sp, #0x10]

; 692  :     start += offset;

  01714	e59d205c	 ldr         r2, [sp, #0x5C]
  01718	e59d3010	 ldr         r3, [sp, #0x10]
  0171c	e0823003	 add         r3, r2, r3
  01720	e58d305c	 str         r3, [sp, #0x5C]

; 693  : 
; 694  :     // Read partial sector
; 695  :     offset = start - (start / pFlash->sectorSize) * pFlash->sectorSize;

  01724	e59d3018	 ldr         r3, [sp, #0x18]
  01728	e2833004	 add         r3, r3, #4
  0172c	e59d105c	 ldr         r1, [sp, #0x5C]
  01730	e5930000	 ldr         r0, [r3]
  01734	eb000000	 bl          __rt_udiv
  01738	e59d3018	 ldr         r3, [sp, #0x18]
  0173c	e2833004	 add         r3, r3, #4
  01740	e5933000	 ldr         r3, [r3]
  01744	e0020390	 mul         r2, r0, r3
  01748	e59d305c	 ldr         r3, [sp, #0x5C]
  0174c	e0433002	 sub         r3, r3, r2
  01750	e58d3010	 str         r3, [sp, #0x10]

; 696  :     if (offset > 0)

  01754	e59d3010	 ldr         r3, [sp, #0x10]
  01758	e3530000	 cmp         r3, #0
  0175c	9a000037	 bls         |$LN6@OALFlashSt@6|

; 697  :         {
; 698  :         rc = OALFlashStoreRead(
; 699  :             hFlash, start - offset, pFlash->sectorBuffer, pFlash->sectorSize,
; 700  :             FALSE, TRUE
; 701  :             );

  01760	e3a03001	 mov         r3, #1
  01764	e58d3004	 str         r3, [sp, #4]
  01768	e3a03000	 mov         r3, #0
  0176c	e58d3000	 str         r3, [sp]
  01770	e59d3018	 ldr         r3, [sp, #0x18]
  01774	e2833004	 add         r3, r3, #4
  01778	e5933000	 ldr         r3, [r3]
  0177c	e59d2018	 ldr         r2, [sp, #0x18]
  01780	e2822fb9	 add         r2, r2, #0xB9, 30
  01784	e59d005c	 ldr         r0, [sp, #0x5C]
  01788	e59d1010	 ldr         r1, [sp, #0x10]
  0178c	e0401001	 sub         r1, r0, r1
  01790	e59d0054	 ldr         r0, [sp, #0x54]
  01794	eb000000	 bl          OALFlashStoreRead
  01798	e58d0040	 str         r0, [sp, #0x40]
  0179c	e59d3040	 ldr         r3, [sp, #0x40]
  017a0	e58d3008	 str         r3, [sp, #8]

; 702  :         if (!rc)

  017a4	e59d3008	 ldr         r3, [sp, #8]
  017a8	e3530000	 cmp         r3, #0
  017ac	1a000000	 bne         |$LN5@OALFlashSt@6|

; 703  :             {
; 704  :             goto cleanUp;

  017b0	ea00006a	 b           |$cleanUp$44691|
  017b4		 |$LN5@OALFlashSt@6|

; 705  :             }
; 706  :         // Copy data
; 707  :         memcpy(
; 708  :             pData, pFlash->sectorBuffer + offset, pFlash->sectorSize - offset
; 709  :             );

  017b4	e59d3018	 ldr         r3, [sp, #0x18]
  017b8	e2833004	 add         r3, r3, #4
  017bc	e5932000	 ldr         r2, [r3]
  017c0	e59d3010	 ldr         r3, [sp, #0x10]
  017c4	e0422003	 sub         r2, r2, r3
  017c8	e59d3018	 ldr         r3, [sp, #0x18]
  017cc	e2831fb9	 add         r1, r3, #0xB9, 30
  017d0	e59d3010	 ldr         r3, [sp, #0x10]
  017d4	e0811003	 add         r1, r1, r3
  017d8	e59d0060	 ldr         r0, [sp, #0x60]
  017dc	eb000000	 bl          memcpy

; 710  :         // Shift pointers
; 711  :         pData += pFlash->sectorSize - offset;

  017e0	e59d3018	 ldr         r3, [sp, #0x18]
  017e4	e2833004	 add         r3, r3, #4
  017e8	e5932000	 ldr         r2, [r3]
  017ec	e59d3010	 ldr         r3, [sp, #0x10]
  017f0	e0422003	 sub         r2, r2, r3
  017f4	e59d3060	 ldr         r3, [sp, #0x60]
  017f8	e0833002	 add         r3, r3, r2
  017fc	e58d3060	 str         r3, [sp, #0x60]

; 712  :         start += pFlash->sectorSize - offset;

  01800	e59d3018	 ldr         r3, [sp, #0x18]
  01804	e2833004	 add         r3, r3, #4
  01808	e5932000	 ldr         r2, [r3]
  0180c	e59d3010	 ldr         r3, [sp, #0x10]
  01810	e0422003	 sub         r2, r2, r3
  01814	e59d305c	 ldr         r3, [sp, #0x5C]
  01818	e0833002	 add         r3, r3, r2
  0181c	e58d305c	 str         r3, [sp, #0x5C]

; 713  :         size -= pFlash->sectorSize - offset;

  01820	e59d3018	 ldr         r3, [sp, #0x18]
  01824	e2833004	 add         r3, r3, #4
  01828	e5932000	 ldr         r2, [r3]
  0182c	e59d3010	 ldr         r3, [sp, #0x10]
  01830	e0422003	 sub         r2, r2, r3
  01834	e59d3064	 ldr         r3, [sp, #0x64]
  01838	e0433002	 sub         r3, r3, r2
  0183c	e58d3064	 str         r3, [sp, #0x64]
  01840		 |$LN6@OALFlashSt@6|

; 714  :         }
; 715  : 
; 716  :     // Calculate last partial sector
; 717  :     offset = size - (size / pFlash->sectorSize) * pFlash->sectorSize;

  01840	e59d3018	 ldr         r3, [sp, #0x18]
  01844	e2833004	 add         r3, r3, #4
  01848	e59d1064	 ldr         r1, [sp, #0x64]
  0184c	e5930000	 ldr         r0, [r3]
  01850	eb000000	 bl          __rt_udiv
  01854	e59d3018	 ldr         r3, [sp, #0x18]
  01858	e2833004	 add         r3, r3, #4
  0185c	e5933000	 ldr         r3, [r3]
  01860	e0020390	 mul         r2, r0, r3
  01864	e59d3064	 ldr         r3, [sp, #0x64]
  01868	e0433002	 sub         r3, r3, r2
  0186c	e58d3010	 str         r3, [sp, #0x10]

; 718  :     if (offset > 0) size -= offset;

  01870	e59d3010	 ldr         r3, [sp, #0x10]
  01874	e3530000	 cmp         r3, #0
  01878	9a000003	 bls         |$LN4@OALFlashSt@6|
  0187c	e59d2064	 ldr         r2, [sp, #0x64]
  01880	e59d3010	 ldr         r3, [sp, #0x10]
  01884	e0423003	 sub         r3, r2, r3
  01888	e58d3064	 str         r3, [sp, #0x64]
  0188c		 |$LN4@OALFlashSt@6|

; 719  :     
; 720  :     // Read data
; 721  :     rc = OALFlashStoreRead(hFlash, start, pData, size, FALSE, TRUE);

  0188c	e3a03001	 mov         r3, #1
  01890	e58d3004	 str         r3, [sp, #4]
  01894	e3a03000	 mov         r3, #0
  01898	e58d3000	 str         r3, [sp]
  0189c	e59d3064	 ldr         r3, [sp, #0x64]
  018a0	e59d2060	 ldr         r2, [sp, #0x60]
  018a4	e59d105c	 ldr         r1, [sp, #0x5C]
  018a8	e59d0054	 ldr         r0, [sp, #0x54]
  018ac	eb000000	 bl          OALFlashStoreRead
  018b0	e58d0044	 str         r0, [sp, #0x44]
  018b4	e59d3044	 ldr         r3, [sp, #0x44]
  018b8	e58d3008	 str         r3, [sp, #8]

; 722  :     if (!rc)

  018bc	e59d3008	 ldr         r3, [sp, #8]
  018c0	e3530000	 cmp         r3, #0
  018c4	1a000000	 bne         |$LN3@OALFlashSt@6|

; 723  :         {
; 724  :         goto cleanUp;

  018c8	ea000024	 b           |$cleanUp$44691|
  018cc		 |$LN3@OALFlashSt@6|

; 725  :         }
; 726  : 
; 727  :     // Read partial sector
; 728  :     if (offset > 0)

  018cc	e59d3010	 ldr         r3, [sp, #0x10]
  018d0	e3530000	 cmp         r3, #0
  018d4	9a00001f	 bls         |$LN2@OALFlashSt@6|

; 729  :         {
; 730  :         // Shift pointers
; 731  :         pData += size;

  018d8	e59d2060	 ldr         r2, [sp, #0x60]
  018dc	e59d3064	 ldr         r3, [sp, #0x64]
  018e0	e0823003	 add         r3, r2, r3
  018e4	e58d3060	 str         r3, [sp, #0x60]

; 732  :         start += size;

  018e8	e59d205c	 ldr         r2, [sp, #0x5C]
  018ec	e59d3064	 ldr         r3, [sp, #0x64]
  018f0	e0823003	 add         r3, r2, r3
  018f4	e58d305c	 str         r3, [sp, #0x5C]

; 733  :         // Read last sector
; 734  :         rc = OALFlashStoreRead(
; 735  :             hFlash, start, pFlash->sectorBuffer, pFlash->sectorSize, FALSE, TRUE
; 736  :             );

  018f8	e3a03001	 mov         r3, #1
  018fc	e58d3004	 str         r3, [sp, #4]
  01900	e3a03000	 mov         r3, #0
  01904	e58d3000	 str         r3, [sp]
  01908	e59d3018	 ldr         r3, [sp, #0x18]
  0190c	e2833004	 add         r3, r3, #4
  01910	e5933000	 ldr         r3, [r3]
  01914	e59d2018	 ldr         r2, [sp, #0x18]
  01918	e2822fb9	 add         r2, r2, #0xB9, 30
  0191c	e59d105c	 ldr         r1, [sp, #0x5C]
  01920	e59d0054	 ldr         r0, [sp, #0x54]
  01924	eb000000	 bl          OALFlashStoreRead
  01928	e58d0048	 str         r0, [sp, #0x48]
  0192c	e59d3048	 ldr         r3, [sp, #0x48]
  01930	e58d3008	 str         r3, [sp, #8]

; 737  :         if (!rc)

  01934	e59d3008	 ldr         r3, [sp, #8]
  01938	e3530000	 cmp         r3, #0
  0193c	1a000000	 bne         |$LN1@OALFlashSt@6|

; 738  :             {
; 739  :             goto cleanUp;

  01940	ea000006	 b           |$cleanUp$44691|
  01944		 |$LN1@OALFlashSt@6|

; 740  :             }
; 741  :         // Copy data
; 742  :         memcpy(pData, pFlash->sectorBuffer, offset);

  01944	e59d2010	 ldr         r2, [sp, #0x10]
  01948	e59d3018	 ldr         r3, [sp, #0x18]
  0194c	e2831fb9	 add         r1, r3, #0xB9, 30
  01950	e59d0060	 ldr         r0, [sp, #0x60]
  01954	eb000000	 bl          memcpy
  01958		 |$LN2@OALFlashSt@6|

; 743  :         }
; 744  : 
; 745  :     // Done
; 746  :     rc = TRUE;

  01958	e3a03001	 mov         r3, #1
  0195c	e58d3008	 str         r3, [sp, #8]
  01960		 |$cleanUp$44691|

; 747  :     
; 748  : cleanUp:
; 749  :     return rc;

  01960	e59d3008	 ldr         r3, [sp, #8]
  01964	e58d3034	 str         r3, [sp, #0x34]

; 750  : }

  01968	e59d0034	 ldr         r0, [sp, #0x34]
  0196c	e28dd04c	 add         sp, sp, #0x4C
  01970	e89d6000	 ldmia       sp, {sp, lr}
  01974	e12fff1e	 bx          lr
  01978		 |$M45049|

			 ENDP  ; |OALFlashStoreReadFromReservedRegion|

	EXPORT	|OALFlashStoreWriteToReservedRegion|

  00030			 AREA	 |.pdata|, PDATA
|$T45061| DCD	|$LN18@OALFlashSt@7|
	DCD	0x4000c704
; Function compile flags: /Odtp

  01978			 AREA	 |.text|, CODE, ARM

  01978		 |OALFlashStoreWriteToReservedRegion| PROC

; 762  : {

  01978		 |$LN18@OALFlashSt@7|
  01978	e1a0c00d	 mov         r12, sp
  0197c	e92d000f	 stmdb       sp!, {r0 - r3}
  01980	e92d5000	 stmdb       sp!, {r12, lr}
  01984	e24dd040	 sub         sp, sp, #0x40
  01988		 |$M45058|

; 763  :     BOOL rc = FALSE;

  01988	e3a03000	 mov         r3, #0
  0198c	e58d3008	 str         r3, [sp, #8]

; 764  :     OAL_FLASH_CONTEXT *pFlash = hFlash;

  01990	e59d3048	 ldr         r3, [sp, #0x48]
  01994	e58d3018	 str         r3, [sp, #0x18]

; 765  :     ULONG regionSize, offset, ix;
; 766  : 
; 767  : 
; 768  :     // Start must be sector aligned
; 769  :     if ((start % pFlash->sectorSize) != 0)

  01998	e59d3018	 ldr         r3, [sp, #0x18]
  0199c	e2833004	 add         r3, r3, #4
  019a0	e59d1050	 ldr         r1, [sp, #0x50]
  019a4	e5930000	 ldr         r0, [r3]
  019a8	eb000000	 bl          __rt_udiv
  019ac	e3510000	 cmp         r1, #0
  019b0	0a000000	 beq         |$LN13@OALFlashSt@7|

; 770  :         {
; 771  :         goto cleanUp;

  019b4	ea0000b0	 b           |$cleanUp$44722|
  019b8		 |$LN13@OALFlashSt@7|

; 772  :         }
; 773  : 
; 774  :     // Try build layout info if there are no reserved regions yet...
; 775  :     if ((pFlash->reservedRegions == 0) && !BuildLayoutInfo(hFlash))

  019b8	e59d3018	 ldr         r3, [sp, #0x18]
  019bc	e283301c	 add         r3, r3, #0x1C
  019c0	e5933000	 ldr         r3, [r3]
  019c4	e3530000	 cmp         r3, #0
  019c8	1a000006	 bne         |$LN12@OALFlashSt@7|
  019cc	e59d0048	 ldr         r0, [sp, #0x48]
  019d0	eb000000	 bl          BuildLayoutInfo
  019d4	e58d0030	 str         r0, [sp, #0x30]
  019d8	e59d3030	 ldr         r3, [sp, #0x30]
  019dc	e3530000	 cmp         r3, #0
  019e0	1a000000	 bne         |$LN12@OALFlashSt@7|

; 776  :         {
; 777  :         goto cleanUp;

  019e4	ea0000a4	 b           |$cleanUp$44722|
  019e8		 |$LN12@OALFlashSt@7|

; 778  :         }
; 779  : 
; 780  :     // Find reserved region with given name
; 781  :     for (ix = 0; ix < pFlash->reservedRegions; ix++)

  019e8	e3a03000	 mov         r3, #0
  019ec	e58d300c	 str         r3, [sp, #0xC]
  019f0	ea000002	 b           |$LN11@OALFlashSt@7|
  019f4		 |$LN10@OALFlashSt@7|
  019f4	e59d300c	 ldr         r3, [sp, #0xC]
  019f8	e2833001	 add         r3, r3, #1
  019fc	e58d300c	 str         r3, [sp, #0xC]
  01a00		 |$LN11@OALFlashSt@7|
  01a00	e59d3018	 ldr         r3, [sp, #0x18]
  01a04	e283301c	 add         r3, r3, #0x1C
  01a08	e59d200c	 ldr         r2, [sp, #0xC]
  01a0c	e5933000	 ldr         r3, [r3]
  01a10	e1520003	 cmp         r2, r3
  01a14	2a00000d	 bcs         |$LN9@OALFlashSt@7|

; 782  :         {
; 783  :         if (strcmp(name, pFlash->reservedRegion[ix].szName) == 0) break;

  01a18	e59d3018	 ldr         r3, [sp, #0x18]
  01a1c	e2831020	 add         r1, r3, #0x20
  01a20	e59d200c	 ldr         r2, [sp, #0xC]
  01a24	e3a03010	 mov         r3, #0x10
  01a28	e0030392	 mul         r3, r2, r3
  01a2c	e0811003	 add         r1, r1, r3
  01a30	e59d004c	 ldr         r0, [sp, #0x4C]
  01a34	eb000000	 bl          strcmp
  01a38	e58d0034	 str         r0, [sp, #0x34]
  01a3c	e59d3034	 ldr         r3, [sp, #0x34]
  01a40	e3530000	 cmp         r3, #0
  01a44	1a000000	 bne         |$LN8@OALFlashSt@7|
  01a48	ea000000	 b           |$LN9@OALFlashSt@7|
  01a4c		 |$LN8@OALFlashSt@7|

; 784  :         }

  01a4c	eaffffe8	 b           |$LN10@OALFlashSt@7|
  01a50		 |$LN9@OALFlashSt@7|

; 785  : 
; 786  :     // If there isn't one we are done
; 787  :     if (ix >= pFlash->reservedRegions) goto cleanUp;

  01a50	e59d3018	 ldr         r3, [sp, #0x18]
  01a54	e283301c	 add         r3, r3, #0x1C
  01a58	e59d200c	 ldr         r2, [sp, #0xC]
  01a5c	e5933000	 ldr         r3, [r3]
  01a60	e1520003	 cmp         r2, r3
  01a64	3a000000	 bcc         |$LN7@OALFlashSt@7|
  01a68	ea000083	 b           |$cleanUp$44722|
  01a6c		 |$LN7@OALFlashSt@7|

; 788  : 
; 789  :     // Get reserved partition size
; 790  :     regionSize =  pFlash->reservedRegion[ix].dwNumBlocks;

  01a6c	e59d3018	 ldr         r3, [sp, #0x18]
  01a70	e2831020	 add         r1, r3, #0x20
  01a74	e59d200c	 ldr         r2, [sp, #0xC]
  01a78	e3a03010	 mov         r3, #0x10
  01a7c	e0030392	 mul         r3, r2, r3
  01a80	e0813003	 add         r3, r1, r3
  01a84	e283300c	 add         r3, r3, #0xC
  01a88	e5933000	 ldr         r3, [r3]
  01a8c	e58d3014	 str         r3, [sp, #0x14]

; 791  :     regionSize *= pFlash->sectorsPerBlock * pFlash->sectorSize;

  01a90	e59d3018	 ldr         r3, [sp, #0x18]
  01a94	e2832008	 add         r2, r3, #8
  01a98	e59d3018	 ldr         r3, [sp, #0x18]
  01a9c	e2833004	 add         r3, r3, #4
  01aa0	e5922000	 ldr         r2, [r2]
  01aa4	e5933000	 ldr         r3, [r3]
  01aa8	e0030392	 mul         r3, r2, r3
  01aac	e59d2014	 ldr         r2, [sp, #0x14]
  01ab0	e0030392	 mul         r3, r2, r3
  01ab4	e58d3014	 str         r3, [sp, #0x14]

; 792  : 
; 793  :     // Check if there is enough space for request
; 794  :     if ((start >= regionSize) || ((regionSize - start) < size))

  01ab8	e59d2050	 ldr         r2, [sp, #0x50]
  01abc	e59d3014	 ldr         r3, [sp, #0x14]
  01ac0	e1520003	 cmp         r2, r3
  01ac4	2a000005	 bcs         |$LN5@OALFlashSt@7|
  01ac8	e59d2014	 ldr         r2, [sp, #0x14]
  01acc	e59d3050	 ldr         r3, [sp, #0x50]
  01ad0	e0422003	 sub         r2, r2, r3
  01ad4	e59d3058	 ldr         r3, [sp, #0x58]
  01ad8	e1520003	 cmp         r2, r3
  01adc	2a000000	 bcs         |$LN6@OALFlashSt@7|
  01ae0		 |$LN5@OALFlashSt@7|

; 795  :         {
; 796  :         goto cleanUp;

  01ae0	ea000065	 b           |$cleanUp$44722|
  01ae4		 |$LN6@OALFlashSt@7|

; 797  :         }
; 798  : 
; 799  :     // Calculate read start
; 800  :     offset  = pFlash->reservedRegion[ix].dwStartBlock;

  01ae4	e59d3018	 ldr         r3, [sp, #0x18]
  01ae8	e2831020	 add         r1, r3, #0x20
  01aec	e59d200c	 ldr         r2, [sp, #0xC]
  01af0	e3a03010	 mov         r3, #0x10
  01af4	e0030392	 mul         r3, r2, r3
  01af8	e0813003	 add         r3, r1, r3
  01afc	e2833008	 add         r3, r3, #8
  01b00	e5933000	 ldr         r3, [r3]
  01b04	e58d3010	 str         r3, [sp, #0x10]

; 801  :     offset *= pFlash->sectorsPerBlock * pFlash->sectorSize;

  01b08	e59d3018	 ldr         r3, [sp, #0x18]
  01b0c	e2832008	 add         r2, r3, #8
  01b10	e59d3018	 ldr         r3, [sp, #0x18]
  01b14	e2833004	 add         r3, r3, #4
  01b18	e5922000	 ldr         r2, [r2]
  01b1c	e5933000	 ldr         r3, [r3]
  01b20	e0030392	 mul         r3, r2, r3
  01b24	e59d2010	 ldr         r2, [sp, #0x10]
  01b28	e0030392	 mul         r3, r2, r3
  01b2c	e58d3010	 str         r3, [sp, #0x10]

; 802  :     start += offset;

  01b30	e59d2050	 ldr         r2, [sp, #0x50]
  01b34	e59d3010	 ldr         r3, [sp, #0x10]
  01b38	e0823003	 add         r3, r2, r3
  01b3c	e58d3050	 str         r3, [sp, #0x50]

; 803  : 
; 804  :     // Calculate last partial sector
; 805  :     offset = size - (size / pFlash->sectorSize) * pFlash->sectorSize;

  01b40	e59d3018	 ldr         r3, [sp, #0x18]
  01b44	e2833004	 add         r3, r3, #4
  01b48	e59d1058	 ldr         r1, [sp, #0x58]
  01b4c	e5930000	 ldr         r0, [r3]
  01b50	eb000000	 bl          __rt_udiv
  01b54	e59d3018	 ldr         r3, [sp, #0x18]
  01b58	e2833004	 add         r3, r3, #4
  01b5c	e5933000	 ldr         r3, [r3]
  01b60	e0020390	 mul         r2, r0, r3
  01b64	e59d3058	 ldr         r3, [sp, #0x58]
  01b68	e0433002	 sub         r3, r3, r2
  01b6c	e58d3010	 str         r3, [sp, #0x10]

; 806  :     if (offset > 0) size -= offset;

  01b70	e59d3010	 ldr         r3, [sp, #0x10]
  01b74	e3530000	 cmp         r3, #0
  01b78	9a000003	 bls         |$LN4@OALFlashSt@7|
  01b7c	e59d2058	 ldr         r2, [sp, #0x58]
  01b80	e59d3010	 ldr         r3, [sp, #0x10]
  01b84	e0423003	 sub         r3, r2, r3
  01b88	e58d3058	 str         r3, [sp, #0x58]
  01b8c		 |$LN4@OALFlashSt@7|

; 807  : 
; 808  :     // Read data
; 809  :     rc = OALFlashStoreWrite(hFlash, start, pData, size, FALSE, TRUE);

  01b8c	e3a03001	 mov         r3, #1
  01b90	e58d3004	 str         r3, [sp, #4]
  01b94	e3a03000	 mov         r3, #0
  01b98	e58d3000	 str         r3, [sp]
  01b9c	e59d3058	 ldr         r3, [sp, #0x58]
  01ba0	e59d2054	 ldr         r2, [sp, #0x54]
  01ba4	e59d1050	 ldr         r1, [sp, #0x50]
  01ba8	e59d0048	 ldr         r0, [sp, #0x48]
  01bac	eb000000	 bl          OALFlashStoreWrite
  01bb0	e58d0038	 str         r0, [sp, #0x38]
  01bb4	e59d3038	 ldr         r3, [sp, #0x38]
  01bb8	e58d3008	 str         r3, [sp, #8]

; 810  :     if (!rc)

  01bbc	e59d3008	 ldr         r3, [sp, #8]
  01bc0	e3530000	 cmp         r3, #0
  01bc4	1a000000	 bne         |$LN3@OALFlashSt@7|

; 811  :         {
; 812  :         goto cleanUp;

  01bc8	ea00002b	 b           |$cleanUp$44722|
  01bcc		 |$LN3@OALFlashSt@7|

; 813  :         }
; 814  : 
; 815  :     // Write partial sector
; 816  :     if (offset > 0)

  01bcc	e59d3010	 ldr         r3, [sp, #0x10]
  01bd0	e3530000	 cmp         r3, #0
  01bd4	9a000026	 bls         |$LN2@OALFlashSt@7|

; 817  :         {
; 818  :         // Shift pointers
; 819  :         pData += size;

  01bd8	e59d2054	 ldr         r2, [sp, #0x54]
  01bdc	e59d3058	 ldr         r3, [sp, #0x58]
  01be0	e0823003	 add         r3, r2, r3
  01be4	e58d3054	 str         r3, [sp, #0x54]

; 820  :         start += size;

  01be8	e59d2050	 ldr         r2, [sp, #0x50]
  01bec	e59d3058	 ldr         r3, [sp, #0x58]
  01bf0	e0823003	 add         r3, r2, r3
  01bf4	e58d3050	 str         r3, [sp, #0x50]

; 821  :         // Fill buffer
; 822  :         memset(pFlash->sectorBuffer, 0xFF, pFlash->sectorSize);

  01bf8	e59d3018	 ldr         r3, [sp, #0x18]
  01bfc	e2833004	 add         r3, r3, #4
  01c00	e5932000	 ldr         r2, [r3]
  01c04	e3a010ff	 mov         r1, #0xFF
  01c08	e59d3018	 ldr         r3, [sp, #0x18]
  01c0c	e2830fb9	 add         r0, r3, #0xB9, 30
  01c10	eb000000	 bl          memset

; 823  :         memcpy(pFlash->sectorBuffer, pData, offset);

  01c14	e59d2010	 ldr         r2, [sp, #0x10]
  01c18	e59d1054	 ldr         r1, [sp, #0x54]
  01c1c	e59d3018	 ldr         r3, [sp, #0x18]
  01c20	e2830fb9	 add         r0, r3, #0xB9, 30
  01c24	eb000000	 bl          memcpy

; 824  :         // Write last sector
; 825  :         rc = OALFlashStoreWrite(
; 826  :             hFlash, start, pFlash->sectorBuffer, pFlash->sectorSize, FALSE, TRUE
; 827  :             );

  01c28	e3a03001	 mov         r3, #1
  01c2c	e58d3004	 str         r3, [sp, #4]
  01c30	e3a03000	 mov         r3, #0
  01c34	e58d3000	 str         r3, [sp]
  01c38	e59d3018	 ldr         r3, [sp, #0x18]
  01c3c	e2833004	 add         r3, r3, #4
  01c40	e5933000	 ldr         r3, [r3]
  01c44	e59d2018	 ldr         r2, [sp, #0x18]
  01c48	e2822fb9	 add         r2, r2, #0xB9, 30
  01c4c	e59d1050	 ldr         r1, [sp, #0x50]
  01c50	e59d0048	 ldr         r0, [sp, #0x48]
  01c54	eb000000	 bl          OALFlashStoreWrite
  01c58	e58d003c	 str         r0, [sp, #0x3C]
  01c5c	e59d303c	 ldr         r3, [sp, #0x3C]
  01c60	e58d3008	 str         r3, [sp, #8]

; 828  :         if (!rc)

  01c64	e59d3008	 ldr         r3, [sp, #8]
  01c68	e3530000	 cmp         r3, #0
  01c6c	1a000000	 bne         |$LN1@OALFlashSt@7|

; 829  :             {
; 830  :             goto cleanUp;

  01c70	ea000001	 b           |$cleanUp$44722|
  01c74		 |$LN1@OALFlashSt@7|
  01c74		 |$LN2@OALFlashSt@7|

; 831  :             }
; 832  :         }
; 833  : 
; 834  :     // Done
; 835  :     rc = TRUE;

  01c74	e3a03001	 mov         r3, #1
  01c78	e58d3008	 str         r3, [sp, #8]
  01c7c		 |$cleanUp$44722|

; 836  : 
; 837  : cleanUp:
; 838  :     return rc;

  01c7c	e59d3008	 ldr         r3, [sp, #8]
  01c80	e58d302c	 str         r3, [sp, #0x2C]

; 839  : }

  01c84	e59d002c	 ldr         r0, [sp, #0x2C]
  01c88	e28dd040	 add         sp, sp, #0x40
  01c8c	e89d6000	 ldmia       sp, {sp, lr}
  01c90	e12fff1e	 bx          lr
  01c94		 |$M45059|

			 ENDP  ; |OALFlashStoreWriteToReservedRegion|

	EXPORT	|OALFlashStoreBlockSize|

  00038			 AREA	 |.pdata|, PDATA
|$T45067| DCD	|$LN5@OALFlashSt@8|
	DCD	0x40001204
; Function compile flags: /Odtp

  01c94			 AREA	 |.text|, CODE, ARM

  01c94		 |OALFlashStoreBlockSize| PROC

; 847  : {

  01c94		 |$LN5@OALFlashSt@8|
  01c94	e1a0c00d	 mov         r12, sp
  01c98	e92d0001	 stmdb       sp!, {r0}
  01c9c	e92d5000	 stmdb       sp!, {r12, lr}
  01ca0	e24dd008	 sub         sp, sp, #8
  01ca4		 |$M45064|

; 848  :     OAL_FLASH_CONTEXT *pFlash = hFlash;

  01ca4	e59d3010	 ldr         r3, [sp, #0x10]
  01ca8	e58d3000	 str         r3, [sp]

; 849  :     return pFlash->sectorsPerBlock * pFlash->sectorSize;

  01cac	e59d3000	 ldr         r3, [sp]
  01cb0	e2832008	 add         r2, r3, #8
  01cb4	e59d3000	 ldr         r3, [sp]
  01cb8	e2833004	 add         r3, r3, #4
  01cbc	e5922000	 ldr         r2, [r2]
  01cc0	e5933000	 ldr         r3, [r3]
  01cc4	e0030392	 mul         r3, r2, r3
  01cc8	e58d3004	 str         r3, [sp, #4]

; 850  : }

  01ccc	e59d0004	 ldr         r0, [sp, #4]
  01cd0	e28dd008	 add         sp, sp, #8
  01cd4	e89d6000	 ldmia       sp, {sp, lr}
  01cd8	e12fff1e	 bx          lr
  01cdc		 |$M45065|

			 ENDP  ; |OALFlashStoreBlockSize|

	EXPORT	|OALFlashStoreSectorSize|

  00040			 AREA	 |.pdata|, PDATA
|$T45073| DCD	|$LN5@OALFlashSt@9|
	DCD	0x40000e04
; Function compile flags: /Odtp

  01cdc			 AREA	 |.text|, CODE, ARM

  01cdc		 |OALFlashStoreSectorSize| PROC

; 855  : {

  01cdc		 |$LN5@OALFlashSt@9|
  01cdc	e1a0c00d	 mov         r12, sp
  01ce0	e92d0001	 stmdb       sp!, {r0}
  01ce4	e92d5000	 stmdb       sp!, {r12, lr}
  01ce8	e24dd008	 sub         sp, sp, #8
  01cec		 |$M45070|

; 856  :     OAL_FLASH_CONTEXT *pFlash = hFlash;

  01cec	e59d3010	 ldr         r3, [sp, #0x10]
  01cf0	e58d3000	 str         r3, [sp]

; 857  :     return pFlash->sectorSize;

  01cf4	e59d3000	 ldr         r3, [sp]
  01cf8	e2833004	 add         r3, r3, #4
  01cfc	e5933000	 ldr         r3, [r3]
  01d00	e58d3004	 str         r3, [sp, #4]

; 858  : }

  01d04	e59d0004	 ldr         r0, [sp, #4]
  01d08	e28dd008	 add         sp, sp, #8
  01d0c	e89d6000	 ldmia       sp, {sp, lr}
  01d10	e12fff1e	 bx          lr
  01d14		 |$M45071|

			 ENDP  ; |OALFlashStoreSectorSize|

	EXPORT	|OALFlashStoreClose|
	IMPORT	|FMD_Deinit|

  00048			 AREA	 |.pdata|, PDATA
|$T45078| DCD	|$LN6@OALFlashSt@10|
	DCD	0x40001304
; Function compile flags: /Odtp

  01d14			 AREA	 |.text|, CODE, ARM

  01d14		 |OALFlashStoreClose| PROC

; 866  : {

  01d14		 |$LN6@OALFlashSt@10|
  01d14	e1a0c00d	 mov         r12, sp
  01d18	e92d0001	 stmdb       sp!, {r0}
  01d1c	e92d5000	 stmdb       sp!, {r12, lr}
  01d20	e24dd004	 sub         sp, sp, #4
  01d24		 |$M45075|

; 867  :     OAL_FLASH_CONTEXT *pFlash = hFlash;

  01d24	e59d300c	 ldr         r3, [sp, #0xC]
  01d28	e58d3000	 str         r3, [sp]

; 868  : 
; 869  :     if (pFlash->pFmd != NULL)

  01d2c	e59d3000	 ldr         r3, [sp]
  01d30	e5933000	 ldr         r3, [r3]
  01d34	e3530000	 cmp         r3, #0
  01d38	0a000005	 beq         |$LN1@OALFlashSt@10|

; 870  :         {
; 871  :         FMD_Deinit(pFlash->pFmd);

  01d3c	e59d3000	 ldr         r3, [sp]
  01d40	e5930000	 ldr         r0, [r3]
  01d44	eb000000	 bl          FMD_Deinit

; 872  :         pFlash->pFmd = NULL;

  01d48	e59d2000	 ldr         r2, [sp]
  01d4c	e3a03000	 mov         r3, #0
  01d50	e5823000	 str         r3, [r2]
  01d54		 |$LN1@OALFlashSt@10|

; 873  :         }
; 874  : }

  01d54	e28dd004	 add         sp, sp, #4
  01d58	e89d6000	 ldmia       sp, {sp, lr}
  01d5c	e12fff1e	 bx          lr
  01d60		 |$M45076|

			 ENDP  ; |OALFlashStoreClose|


  00050			 AREA	 |.pdata|, PDATA
|$T45087| DCD	|$LN13@SeekToBloc|
	DCD	0x40006304
; Function compile flags: /Odtp

  01d60			 AREA	 |.text|, CODE, ARM

  01d60		 |SeekToBlock| PROC

; 884  : {

  01d60		 |$LN13@SeekToBloc|
  01d60	e1a0c00d	 mov         r12, sp
  01d64	e92d0003	 stmdb       sp!, {r0, r1}
  01d68	e92d5000	 stmdb       sp!, {r12, lr}
  01d6c	e24dd01c	 sub         sp, sp, #0x1C
  01d70		 |$M45084|

; 885  :     BOOL rc = FALSE;

  01d70	e3a03000	 mov         r3, #0
  01d74	e58d3004	 str         r3, [sp, #4]

; 886  :     OAL_FLASH_CONTEXT *pFlash = hFlash;

  01d78	e59d3024	 ldr         r3, [sp, #0x24]
  01d7c	e58d300c	 str         r3, [sp, #0xC]

; 887  :     ULONG blockPos, badBlocks;
; 888  : 
; 889  :     if (block < pFlash->blockPos)

  01d80	e59d300c	 ldr         r3, [sp, #0xC]
  01d84	e2833014	 add         r3, r3, #0x14
  01d88	e59d2028	 ldr         r2, [sp, #0x28]
  01d8c	e5933000	 ldr         r3, [r3]
  01d90	e1520003	 cmp         r2, r3
  01d94	2a000007	 bcs         |$LN5@SeekToBloc|

; 890  :         {
; 891  :         pFlash->blockPos = 0;

  01d98	e59d300c	 ldr         r3, [sp, #0xC]
  01d9c	e2832014	 add         r2, r3, #0x14
  01da0	e3a03000	 mov         r3, #0
  01da4	e5823000	 str         r3, [r2]

; 892  :         pFlash->badBlocksAtPos = 0;

  01da8	e59d300c	 ldr         r3, [sp, #0xC]
  01dac	e2832018	 add         r2, r3, #0x18
  01db0	e3a03000	 mov         r3, #0
  01db4	e5823000	 str         r3, [r2]
  01db8		 |$LN5@SeekToBloc|

; 893  :         }
; 894  : 
; 895  :     blockPos = pFlash->blockPos;

  01db8	e59d300c	 ldr         r3, [sp, #0xC]
  01dbc	e2833014	 add         r3, r3, #0x14
  01dc0	e5933000	 ldr         r3, [r3]
  01dc4	e58d3008	 str         r3, [sp, #8]

; 896  :     badBlocks = pFlash->badBlocksAtPos;

  01dc8	e59d300c	 ldr         r3, [sp, #0xC]
  01dcc	e2833018	 add         r3, r3, #0x18
  01dd0	e5933000	 ldr         r3, [r3]
  01dd4	e58d3000	 str         r3, [sp]
  01dd8		 |$LN10@SeekToBloc|
  01dd8		 |$LN4@SeekToBloc|

; 897  :     while (blockPos < block)

  01dd8	e59d2008	 ldr         r2, [sp, #8]
  01ddc	e59d3028	 ldr         r3, [sp, #0x28]
  01de0	e1520003	 cmp         r2, r3
  01de4	2a00002e	 bcs         |$LN3@SeekToBloc|

; 898  :         {
; 899  :         // Check if we don't run out of flash
; 900  :         if ((blockPos + badBlocks) >= pFlash->blocksOnFlash)

  01de8	e59d2008	 ldr         r2, [sp, #8]
  01dec	e59d3000	 ldr         r3, [sp]
  01df0	e0822003	 add         r2, r2, r3
  01df4	e59d300c	 ldr         r3, [sp, #0xC]
  01df8	e283300c	 add         r3, r3, #0xC
  01dfc	e5933000	 ldr         r3, [r3]
  01e00	e1520003	 cmp         r2, r3
  01e04	3a000008	 bcc         |$LN2@SeekToBloc|

; 901  :             {
; 902  :             pFlash->blockPos = blockPos;

  01e08	e59d300c	 ldr         r3, [sp, #0xC]
  01e0c	e2832014	 add         r2, r3, #0x14
  01e10	e59d3008	 ldr         r3, [sp, #8]
  01e14	e5823000	 str         r3, [r2]

; 903  :             pFlash->badBlocksAtPos = badBlocks;

  01e18	e59d300c	 ldr         r3, [sp, #0xC]
  01e1c	e2832018	 add         r2, r3, #0x18
  01e20	e59d3000	 ldr         r3, [sp]
  01e24	e5823000	 str         r3, [r2]

; 904  :             goto cleanUp;

  01e28	ea000027	 b           |$cleanUp$44764|
  01e2c		 |$LN2@SeekToBloc|

; 905  :             }
; 906  :         // If block is marked as bad, add bad blocks and try next one
; 907  :         if ((FMD_GetBlockStatus(blockPos + badBlocks) & BLOCK_STATUS_BAD) != 0)

  01e2c	e59d2008	 ldr         r2, [sp, #8]
  01e30	e59d3000	 ldr         r3, [sp]
  01e34	e0820003	 add         r0, r2, r3
  01e38	eb000000	 bl          FMD_GetBlockStatus
  01e3c	e58d0014	 str         r0, [sp, #0x14]
  01e40	e59d3014	 ldr         r3, [sp, #0x14]
  01e44	e3130002	 tst         r3, #2
  01e48	0a000011	 beq         |$LN1@SeekToBloc|

; 908  :             {
; 909  :             OALMSG(OAL_WARN, (L"WARN: "
; 910  :                 L"Skip bad block %d\r\n", blockPos + badBlocks
; 911  :                 ));

  01e4c	e59f3094	 ldr         r3, [pc, #0x94]
  01e50	e5933440	 ldr         r3, [r3, #0x440]
  01e54	e3130002	 tst         r3, #2
  01e58	0a000007	 beq         |$LN8@SeekToBloc|
  01e5c	e59d2008	 ldr         r2, [sp, #8]
  01e60	e59d3000	 ldr         r3, [sp]
  01e64	e0821003	 add         r1, r2, r3
  01e68	e59f0074	 ldr         r0, [pc, #0x74]
  01e6c	eb000000	 bl          NKDbgPrintfW
  01e70	e3a03001	 mov         r3, #1
  01e74	e58d3018	 str         r3, [sp, #0x18]
  01e78	ea000001	 b           |$LN9@SeekToBloc|
  01e7c		 |$LN8@SeekToBloc|
  01e7c	e3a03000	 mov         r3, #0
  01e80	e58d3018	 str         r3, [sp, #0x18]
  01e84		 |$LN9@SeekToBloc|

; 912  :             badBlocks++;

  01e84	e59d3000	 ldr         r3, [sp]
  01e88	e2833001	 add         r3, r3, #1
  01e8c	e58d3000	 str         r3, [sp]

; 913  :             continue;

  01e90	eaffffd0	 b           |$LN4@SeekToBloc|
  01e94		 |$LN1@SeekToBloc|

; 914  :             }
; 915  :         blockPos++;

  01e94	e59d3008	 ldr         r3, [sp, #8]
  01e98	e2833001	 add         r3, r3, #1
  01e9c	e58d3008	 str         r3, [sp, #8]

; 916  :         }

  01ea0	eaffffcc	 b           |$LN10@SeekToBloc|
  01ea4		 |$LN3@SeekToBloc|

; 917  : 
; 918  :     // Done
; 919  :     pFlash->blockPos = blockPos;

  01ea4	e59d300c	 ldr         r3, [sp, #0xC]
  01ea8	e2832014	 add         r2, r3, #0x14
  01eac	e59d3008	 ldr         r3, [sp, #8]
  01eb0	e5823000	 str         r3, [r2]

; 920  :     pFlash->badBlocksAtPos = badBlocks;

  01eb4	e59d300c	 ldr         r3, [sp, #0xC]
  01eb8	e2832018	 add         r2, r3, #0x18
  01ebc	e59d3000	 ldr         r3, [sp]
  01ec0	e5823000	 str         r3, [r2]

; 921  :     rc = TRUE;

  01ec4	e3a03001	 mov         r3, #1
  01ec8	e58d3004	 str         r3, [sp, #4]
  01ecc		 |$cleanUp$44764|

; 922  : 
; 923  : cleanUp:
; 924  :     return rc;

  01ecc	e59d3004	 ldr         r3, [sp, #4]
  01ed0	e58d3010	 str         r3, [sp, #0x10]

; 925  : }

  01ed4	e59d0010	 ldr         r0, [sp, #0x10]
  01ed8	e28dd01c	 add         sp, sp, #0x1C
  01edc	e89d6000	 ldmia       sp, {sp, lr}
  01ee0	e12fff1e	 bx          lr
  01ee4		 |$LN14@SeekToBloc|
  01ee4		 |$LN15@SeekToBloc|
  01ee4	00000000	 DCD         |??_C@_1DE@JONHLDDF@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAS?$AAk?$AAi?$AAp?$AA?5?$AAb?$AAa?$AAd?$AA?5?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  01ee8		 |$LN16@SeekToBloc|
  01ee8	00000000	 DCD         |dpCurSettings|
  01eec		 |$M45085|

			 ENDP  ; |SeekToBlock|


  00058			 AREA	 |.pdata|, PDATA
|$T45096| DCD	|$LN12@IsSectorEm|
	DCD	0x40003404
; Function compile flags: /Odtp

  01eec			 AREA	 |.text|, CODE, ARM

  01eec		 |IsSectorEmpty| PROC

; 936  : {

  01eec		 |$LN12@IsSectorEm|
  01eec	e1a0c00d	 mov         r12, sp
  01ef0	e92d0007	 stmdb       sp!, {r0 - r2}
  01ef4	e92d5000	 stmdb       sp!, {r12, lr}
  01ef8	e24dd00c	 sub         sp, sp, #0xC
  01efc		 |$M45093|

; 937  :     BOOL rc = FALSE;

  01efc	e3a03000	 mov         r3, #0
  01f00	e58d3000	 str         r3, [sp]

; 938  :     ULONG idx;
; 939  : 
; 940  :     if (pSectorInfo->dwReserved1 != 0xFFFFFFFF) goto cleanUp;

  01f04	e59d301c	 ldr         r3, [sp, #0x1C]
  01f08	e5933000	 ldr         r3, [r3]
  01f0c	e3730001	 cmn         r3, #1
  01f10	0a000000	 beq         |$LN7@IsSectorEm|
  01f14	ea000022	 b           |$cleanUp$44777|
  01f18		 |$LN7@IsSectorEm|

; 941  :     if (pSectorInfo->wReserved2 != 0xFFFF) goto cleanUp;

  01f18	e59d301c	 ldr         r3, [sp, #0x1C]
  01f1c	e2833006	 add         r3, r3, #6
  01f20	e1d330b0	 ldrh        r3, [r3]
  01f24	e1a02003	 mov         r2, r3
  01f28	e3a03cff	 mov         r3, #0xFF, 24
  01f2c	e38330ff	 orr         r3, r3, #0xFF
  01f30	e1520003	 cmp         r2, r3
  01f34	0a000000	 beq         |$LN6@IsSectorEm|
  01f38	ea000019	 b           |$cleanUp$44777|
  01f3c		 |$LN6@IsSectorEm|

; 942  :     if (pSectorInfo->bOEMReserved != 0xFF) goto cleanUp;

  01f3c	e59d301c	 ldr         r3, [sp, #0x1C]
  01f40	e2833004	 add         r3, r3, #4
  01f44	e5d33000	 ldrb        r3, [r3]
  01f48	e35300ff	 cmp         r3, #0xFF
  01f4c	0a000000	 beq         |$LN5@IsSectorEm|
  01f50	ea000013	 b           |$cleanUp$44777|
  01f54		 |$LN5@IsSectorEm|

; 943  : 
; 944  :     for (idx = 0; idx < sectorSize; idx++)

  01f54	e3a03000	 mov         r3, #0
  01f58	e58d3004	 str         r3, [sp, #4]
  01f5c	ea000002	 b           |$LN4@IsSectorEm|
  01f60		 |$LN3@IsSectorEm|
  01f60	e59d3004	 ldr         r3, [sp, #4]
  01f64	e2833001	 add         r3, r3, #1
  01f68	e58d3004	 str         r3, [sp, #4]
  01f6c		 |$LN4@IsSectorEm|
  01f6c	e59d2004	 ldr         r2, [sp, #4]
  01f70	e59d3018	 ldr         r3, [sp, #0x18]
  01f74	e1520003	 cmp         r2, r3
  01f78	2a000007	 bcs         |$LN2@IsSectorEm|

; 945  :         {
; 946  :         if (pData[idx] != 0xFF) goto cleanUp;

  01f7c	e59d2014	 ldr         r2, [sp, #0x14]
  01f80	e59d3004	 ldr         r3, [sp, #4]
  01f84	e0823003	 add         r3, r2, r3
  01f88	e5d33000	 ldrb        r3, [r3]
  01f8c	e35300ff	 cmp         r3, #0xFF
  01f90	0a000000	 beq         |$LN1@IsSectorEm|
  01f94	ea000002	 b           |$cleanUp$44777|
  01f98		 |$LN1@IsSectorEm|

; 947  :         }

  01f98	eafffff0	 b           |$LN3@IsSectorEm|
  01f9c		 |$LN2@IsSectorEm|

; 948  : 
; 949  :     rc = TRUE;

  01f9c	e3a03001	 mov         r3, #1
  01fa0	e58d3000	 str         r3, [sp]
  01fa4		 |$cleanUp$44777|

; 950  : 
; 951  : cleanUp:
; 952  :     return rc;

  01fa4	e59d3000	 ldr         r3, [sp]
  01fa8	e58d3008	 str         r3, [sp, #8]

; 953  : }

  01fac	e59d0008	 ldr         r0, [sp, #8]
  01fb0	e28dd00c	 add         sp, sp, #0xC
  01fb4	e89d6000	 ldmia       sp, {sp, lr}
  01fb8	e12fff1e	 bx          lr
  01fbc		 |$M45094|

			 ENDP  ; |IsSectorEmpty|

	EXPORT	|??_C@_1KM@MOFGEBEH@?$AA?5?$AA?5?$AA?5?$AA?5?$AAT?$AAy?$AAp?$AAe?$AA?$DN?$AA?$CF?$AAd?$AA?0?$AA?5?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?$DN?$AA0?$AAx?$AA?$CF?$AAx?$AA?0?$AA?5?$AAN?$AAu?$AAm?$AAP?$AA?$DN?$AA0?$AAx@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DK@FBKBGCAF@?$AAF?$AAl?$AAa?$AAs?$AAh?$AA?5?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAs?$AA?5?$AA?$CF?$AAu?$AA?5?$AAr?$AAe?$AAg?$AAi?$AAo?$AAn?$AAs?$AA?3?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FC@IDNHMBKN@?$AA?5?$AA?5?$AA?5?$AA?5?$AAN?$AAa?$AAm?$AAe?$AA?$DN?$AA?$CF?$AAs?$AA?0?$AA?5?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?5?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?$DN?$AA?$CF?$AAu?$AA?0?$AA?5?$AAB?$AAl?$AAo@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EM@LIDNJIDD@?$AAF?$AAl?$AAa?$AAs?$AAh?$AA?5?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAs?$AA?5?$AA?$CF?$AAu?$AA?5?$AAr?$AAe?$AAs?$AAe?$AAr?$AAv?$AAe?$AAd?$AA?5?$AAr?$AAe?$AAg?$AAi?$AAo@| [ DATA ] ; `string'
	EXPORT	|??_C@_08GODGKFDB@MSFLSH50?$AA@| [ DATA ] ; `string'
	IMPORT	|memcmp|

  00060			 AREA	 |.pdata|, PDATA
|$T45112| DCD	|$LN28@BuildLayou|
	DCD	0x40015c04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KM@MOFGEBEH@?$AA?5?$AA?5?$AA?5?$AA?5?$AAT?$AAy?$AAp?$AAe?$AA?$DN?$AA?$CF?$AAd?$AA?0?$AA?5?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?$DN?$AA0?$AAx?$AA?$CF?$AAx?$AA?0?$AA?5?$AAN?$AAu?$AAm?$AAP?$AA?$DN?$AA0?$AAx@| DCB " "
	DCB	0x0, " ", 0x0, " ", 0x0, " ", 0x0, "T", 0x0, "y", 0x0, "p"
	DCB	0x0, "e", 0x0, "=", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " "
	DCB	0x0, "S", 0x0, "t", 0x0, "a", 0x0, "r", 0x0, "t", 0x0, "="
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, ",", 0x0, " "
	DCB	0x0, "N", 0x0, "u", 0x0, "m", 0x0, "P", 0x0, "=", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "N"
	DCB	0x0, "u", 0x0, "m", 0x0, "L", 0x0, "=", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "S", 0x0, "e"
	DCB	0x0, "c", 0x0, "/", 0x0, "B", 0x0, "l", 0x0, "k", 0x0, "="
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, ",", 0x0, " "
	DCB	0x0, "B", 0x0, "/", 0x0, "B", 0x0, "l", 0x0, "k", 0x0, "="
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, ",", 0x0, " "
	DCB	0x0, "C", 0x0, "o", 0x0, "m", 0x0, "p", 0x0, "a", 0x0, "c"
	DCB	0x0, "t", 0x0, "=", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DK@FBKBGCAF@?$AAF?$AAl?$AAa?$AAs?$AAh?$AA?5?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAs?$AA?5?$AA?$CF?$AAu?$AA?5?$AAr?$AAe?$AAg?$AAi?$AAo?$AAn?$AAs?$AA?3?$AA?$AN?$AA?6?$AA?$AA@| DCB "F"
	DCB	0x0, "l", 0x0, "a", 0x0, "s", 0x0, "h", 0x0, " ", 0x0, "c"
	DCB	0x0, "o", 0x0, "n", 0x0, "t", 0x0, "a", 0x0, "i", 0x0, "n"
	DCB	0x0, "s", 0x0, " ", 0x0, "%", 0x0, "u", 0x0, " ", 0x0, "r"
	DCB	0x0, "e", 0x0, "g", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, "s"
	DCB	0x0, ":", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FC@IDNHMBKN@?$AA?5?$AA?5?$AA?5?$AA?5?$AAN?$AAa?$AAm?$AAe?$AA?$DN?$AA?$CF?$AAs?$AA?0?$AA?5?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?5?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?$DN?$AA?$CF?$AAu?$AA?0?$AA?5?$AAB?$AAl?$AAo@| DCB " "
	DCB	0x0, " ", 0x0, " ", 0x0, " ", 0x0, "N", 0x0, "a", 0x0, "m"
	DCB	0x0, "e", 0x0, "=", 0x0, "%", 0x0, "s", 0x0, ",", 0x0, " "
	DCB	0x0, "S", 0x0, "t", 0x0, "a", 0x0, "r", 0x0, "t", 0x0, " "
	DCB	0x0, "b", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, "="
	DCB	0x0, "%", 0x0, "u", 0x0, ",", 0x0, " ", 0x0, "B", 0x0, "l"
	DCB	0x0, "o", 0x0, "c", 0x0, "k", 0x0, "s", 0x0, "=", 0x0, "%"
	DCB	0x0, "u", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EM@LIDNJIDD@?$AAF?$AAl?$AAa?$AAs?$AAh?$AA?5?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAs?$AA?5?$AA?$CF?$AAu?$AA?5?$AAr?$AAe?$AAs?$AAe?$AAr?$AAv?$AAe?$AAd?$AA?5?$AAr?$AAe?$AAg?$AAi?$AAo@| DCB "F"
	DCB	0x0, "l", 0x0, "a", 0x0, "s", 0x0, "h", 0x0, " ", 0x0, "c"
	DCB	0x0, "o", 0x0, "n", 0x0, "t", 0x0, "a", 0x0, "i", 0x0, "n"
	DCB	0x0, "s", 0x0, " ", 0x0, "%", 0x0, "u", 0x0, " ", 0x0, "r"
	DCB	0x0, "e", 0x0, "s", 0x0, "e", 0x0, "r", 0x0, "v", 0x0, "e"
	DCB	0x0, "d", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "g", 0x0, "i"
	DCB	0x0, "o", 0x0, "n", 0x0, "s", 0x0, ":", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_08GODGKFDB@MSFLSH50?$AA@| DCB "MSFLSH50", 0x0	; `string'
; Function compile flags: /Odtp

  01fbc			 AREA	 |.text|, CODE, ARM

  01fbc		 |BuildLayoutInfo| PROC

; 962  : {

  01fbc		 |$LN28@BuildLayou|
  01fbc	e1a0c00d	 mov         r12, sp
  01fc0	e92d0001	 stmdb       sp!, {r0}
  01fc4	e92d5000	 stmdb       sp!, {r12, lr}
  01fc8	e24dd060	 sub         sp, sp, #0x60
  01fcc		 |$M45109|

; 963  :     BOOL rc = FALSE;

  01fcc	e3a03000	 mov         r3, #0
  01fd0	e58d3014	 str         r3, [sp, #0x14]

; 964  :     OAL_FLASH_CONTEXT *pFlash = hFlash;

  01fd4	e59d3068	 ldr         r3, [sp, #0x68]
  01fd8	e58d301c	 str         r3, [sp, #0x1C]

; 965  :     SectorInfo sectorInfo;
; 966  :     FlashLayoutSector *pSector;
; 967  :     ULONG block, sector, sectorInBlock;
; 968  :     ULONG mbrSector;
; 969  :     ULONG ix;
; 970  : 
; 971  : 
; 972  :     // First check if we support this flash
; 973  :     if (pFlash->sectorSize > sizeof(pFlash->sectorBuffer))

  01fdc	e59d301c	 ldr         r3, [sp, #0x1C]
  01fe0	e2833004	 add         r3, r3, #4
  01fe4	e5933000	 ldr         r3, [r3]
  01fe8	e3530b02	 cmp         r3, #2, 22
  01fec	9a000000	 bls         |$LN17@BuildLayou|

; 974  :         {
; 975  :         goto cleanUp;

  01ff0	ea000140	 b           |$cleanUp$44797|
  01ff4		 |$LN17@BuildLayou|

; 976  :         }
; 977  : 
; 978  :     // Seek to first unreserved block
; 979  :     SeekToBlock(hFlash, pFlash->reservedBlocks);

  01ff4	e59d301c	 ldr         r3, [sp, #0x1C]
  01ff8	e2833010	 add         r3, r3, #0x10
  01ffc	e5931000	 ldr         r1, [r3]
  02000	e59d0068	 ldr         r0, [sp, #0x68]
  02004	eb000000	 bl          SeekToBlock

; 980  : 
; 981  :     // Parse flash memory
; 982  :     block = pFlash->blockPos + pFlash->badBlocksAtPos;

  02008	e59d301c	 ldr         r3, [sp, #0x1C]
  0200c	e2832014	 add         r2, r3, #0x14
  02010	e59d301c	 ldr         r3, [sp, #0x1C]
  02014	e2833018	 add         r3, r3, #0x18
  02018	e5922000	 ldr         r2, [r2]
  0201c	e5933000	 ldr         r3, [r3]
  02020	e0823003	 add         r3, r2, r3
  02024	e58d3034	 str         r3, [sp, #0x34]

; 983  :     sector = block * pFlash->sectorsPerBlock;

  02028	e59d301c	 ldr         r3, [sp, #0x1C]
  0202c	e2833008	 add         r3, r3, #8
  02030	e59d2034	 ldr         r2, [sp, #0x34]
  02034	e5933000	 ldr         r3, [r3]
  02038	e0030392	 mul         r3, r2, r3
  0203c	e58d3024	 str         r3, [sp, #0x24]

; 984  :     mbrSector = (ULONG) -1;

  02040	e3e03000	 mvn         r3, #0
  02044	e58d3020	 str         r3, [sp, #0x20]

; 985  :     sectorInBlock = 0;

  02048	e3a03000	 mov         r3, #0
  0204c	e58d3028	 str         r3, [sp, #0x28]
  02050		 |$LN25@BuildLayou|
  02050		 |$LN16@BuildLayou|

; 986  :     while (block < pFlash->blocksOnFlash)

  02050	e59d301c	 ldr         r3, [sp, #0x1C]
  02054	e283300c	 add         r3, r3, #0xC
  02058	e59d2034	 ldr         r2, [sp, #0x34]
  0205c	e5933000	 ldr         r3, [r3]
  02060	e1520003	 cmp         r2, r3
  02064	2a00006d	 bcs         |$LN15@BuildLayou|

; 987  :         {
; 988  :         // If we are at beginning of block, check if it isn't bad
; 989  :         if (sectorInBlock == 0)

  02068	e59d3028	 ldr         r3, [sp, #0x28]
  0206c	e3530000	 cmp         r3, #0
  02070	1a000022	 bne         |$LN14@BuildLayou|

; 990  :             {
; 991  :             // Skip block if it is marked as bad
; 992  :             if ((FMD_GetBlockStatus(block) & BLOCK_STATUS_BAD) != 0)

  02074	e59d0034	 ldr         r0, [sp, #0x34]
  02078	eb000000	 bl          FMD_GetBlockStatus
  0207c	e58d004c	 str         r0, [sp, #0x4C]
  02080	e59d304c	 ldr         r3, [sp, #0x4C]
  02084	e3130002	 tst         r3, #2
  02088	0a00001c	 beq         |$LN13@BuildLayou|

; 993  :                 {
; 994  :                 OALMSG(OAL_WARN, (L"WARN: "
; 995  :                     L"Skip bad block %d\r\n", block
; 996  :                     ));

  0208c	e59f3494	 ldr         r3, [pc, #0x494]
  02090	e5933440	 ldr         r3, [r3, #0x440]
  02094	e3130002	 tst         r3, #2
  02098	0a000005	 beq         |$LN20@BuildLayou|
  0209c	e59d1034	 ldr         r1, [sp, #0x34]
  020a0	e59f047c	 ldr         r0, [pc, #0x47C]
  020a4	eb000000	 bl          NKDbgPrintfW
  020a8	e3a03001	 mov         r3, #1
  020ac	e58d3050	 str         r3, [sp, #0x50]
  020b0	ea000001	 b           |$LN21@BuildLayou|
  020b4		 |$LN20@BuildLayou|
  020b4	e3a03000	 mov         r3, #0
  020b8	e58d3050	 str         r3, [sp, #0x50]
  020bc		 |$LN21@BuildLayou|

; 997  :                 block++;

  020bc	e59d3034	 ldr         r3, [sp, #0x34]
  020c0	e2833001	 add         r3, r3, #1
  020c4	e58d3034	 str         r3, [sp, #0x34]

; 998  :                 pFlash->badBlocksAtPos++;

  020c8	e59d301c	 ldr         r3, [sp, #0x1C]
  020cc	e2833018	 add         r3, r3, #0x18
  020d0	e5933000	 ldr         r3, [r3]
  020d4	e2832001	 add         r2, r3, #1
  020d8	e59d301c	 ldr         r3, [sp, #0x1C]
  020dc	e2833018	 add         r3, r3, #0x18
  020e0	e5832000	 str         r2, [r3]

; 999  :                 sector += pFlash->sectorsPerBlock;

  020e4	e59d301c	 ldr         r3, [sp, #0x1C]
  020e8	e2833008	 add         r3, r3, #8
  020ec	e59d2024	 ldr         r2, [sp, #0x24]
  020f0	e5933000	 ldr         r3, [r3]
  020f4	e0823003	 add         r3, r2, r3
  020f8	e58d3024	 str         r3, [sp, #0x24]

; 1000 :                 continue;

  020fc	eaffffd3	 b           |$LN16@BuildLayou|
  02100		 |$LN13@BuildLayou|
  02100		 |$LN14@BuildLayou|

; 1001 :                 }
; 1002 :             }
; 1003 : 
; 1004 :         // Read sector
; 1005 :         if (!FMD_ReadSector(sector, pFlash->sectorBuffer, &sectorInfo, 1))

  02100	e3a03001	 mov         r3, #1
  02104	e28d202c	 add         r2, sp, #0x2C
  02108	e59d101c	 ldr         r1, [sp, #0x1C]
  0210c	e2811fb9	 add         r1, r1, #0xB9, 30
  02110	e59d0024	 ldr         r0, [sp, #0x24]
  02114	eb000000	 bl          FMD_ReadSector
  02118	e58d0054	 str         r0, [sp, #0x54]

; 1006 :             {
; 1007 :             }
; 1008 : 
; 1009 :         // Did we found both (MBR + FLS)?
; 1010 :         if ((mbrSector != -1) && IS_VALID_FLS(pFlash->sectorBuffer)) break;

  0211c	e59d3020	 ldr         r3, [sp, #0x20]
  02120	e3730001	 cmn         r3, #1
  02124	0a000009	 beq         |$LN11@BuildLayou|
  02128	e3a02008	 mov         r2, #8
  0212c	e59f13ec	 ldr         r1, [pc, #0x3EC]
  02130	e59d301c	 ldr         r3, [sp, #0x1C]
  02134	e2830fb9	 add         r0, r3, #0xB9, 30
  02138	eb000000	 bl          memcmp
  0213c	e58d0058	 str         r0, [sp, #0x58]
  02140	e59d3058	 ldr         r3, [sp, #0x58]
  02144	e3530000	 cmp         r3, #0
  02148	1a000000	 bne         |$LN11@BuildLayou|
  0214c	ea000033	 b           |$LN15@BuildLayou|
  02150		 |$LN11@BuildLayou|

; 1011 : 
; 1012 :         // Check for MBR in sector...
; 1013 :         mbrSector = IS_VALID_BOOTSEC(pFlash->sectorBuffer) ? sector : -1;

  02150	e59d301c	 ldr         r3, [sp, #0x1C]
  02154	e2833b01	 add         r3, r3, #1, 22
  02158	e28330e4	 add         r3, r3, #0xE4
  0215c	e2433002	 sub         r3, r3, #2
  02160	e1d330b0	 ldrh        r3, [r3]
  02164	e1a02003	 mov         r2, r3
  02168	e3a03caa	 mov         r3, #0xAA, 24
  0216c	e3833055	 orr         r3, r3, #0x55
  02170	e1520003	 cmp         r2, r3
  02174	1a00000c	 bne         |$LN23@BuildLayou|
  02178	e59d301c	 ldr         r3, [sp, #0x1C]
  0217c	e2833fb9	 add         r3, r3, #0xB9, 30
  02180	e5d33000	 ldrb        r3, [r3]
  02184	e35300eb	 cmp         r3, #0xEB
  02188	0a000004	 beq         |$LN22@BuildLayou|
  0218c	e59d301c	 ldr         r3, [sp, #0x1C]
  02190	e2833fb9	 add         r3, r3, #0xB9, 30
  02194	e5d33000	 ldrb        r3, [r3]
  02198	e35300e9	 cmp         r3, #0xE9
  0219c	1a000002	 bne         |$LN23@BuildLayou|
  021a0		 |$LN22@BuildLayou|
  021a0	e59d3024	 ldr         r3, [sp, #0x24]
  021a4	e58d305c	 str         r3, [sp, #0x5C]
  021a8	ea000001	 b           |$LN24@BuildLayou|
  021ac		 |$LN23@BuildLayou|
  021ac	e3e03000	 mvn         r3, #0
  021b0	e58d305c	 str         r3, [sp, #0x5C]
  021b4		 |$LN24@BuildLayou|
  021b4	e59d305c	 ldr         r3, [sp, #0x5C]
  021b8	e58d3020	 str         r3, [sp, #0x20]

; 1014 : 
; 1015 :         // Move to next sector
; 1016 :         sector++;

  021bc	e59d3024	 ldr         r3, [sp, #0x24]
  021c0	e2833001	 add         r3, r3, #1
  021c4	e58d3024	 str         r3, [sp, #0x24]

; 1017 :         sectorInBlock++;

  021c8	e59d3028	 ldr         r3, [sp, #0x28]
  021cc	e2833001	 add         r3, r3, #1
  021d0	e58d3028	 str         r3, [sp, #0x28]

; 1018 :         if (sectorInBlock  >= pFlash->sectorsPerBlock)

  021d4	e59d301c	 ldr         r3, [sp, #0x1C]
  021d8	e2833008	 add         r3, r3, #8
  021dc	e59d2028	 ldr         r2, [sp, #0x28]
  021e0	e5933000	 ldr         r3, [r3]
  021e4	e1520003	 cmp         r2, r3
  021e8	3a00000b	 bcc         |$LN10@BuildLayou|

; 1019 :             {
; 1020 :             block++;

  021ec	e59d3034	 ldr         r3, [sp, #0x34]
  021f0	e2833001	 add         r3, r3, #1
  021f4	e58d3034	 str         r3, [sp, #0x34]

; 1021 :             pFlash->blockPos++;

  021f8	e59d301c	 ldr         r3, [sp, #0x1C]
  021fc	e2833014	 add         r3, r3, #0x14
  02200	e5933000	 ldr         r3, [r3]
  02204	e2832001	 add         r2, r3, #1
  02208	e59d301c	 ldr         r3, [sp, #0x1C]
  0220c	e2833014	 add         r3, r3, #0x14
  02210	e5832000	 str         r2, [r3]

; 1022 :             sectorInBlock = 0;

  02214	e3a03000	 mov         r3, #0
  02218	e58d3028	 str         r3, [sp, #0x28]
  0221c		 |$LN10@BuildLayou|

; 1023 :             }
; 1024 :         }

  0221c	eaffff8b	 b           |$LN25@BuildLayou|
  02220		 |$LN15@BuildLayou|

; 1025 : 
; 1026 :     // If we parse all flash without success, fail
; 1027 :     if (mbrSector == -1) goto cleanUp;

  02220	e59d3020	 ldr         r3, [sp, #0x20]
  02224	e3730001	 cmn         r3, #1
  02228	1a000000	 bne         |$LN9@BuildLayou|
  0222c	ea0000b1	 b           |$cleanUp$44797|
  02230		 |$LN9@BuildLayou|

; 1028 : 
; 1029 :     // At this moment there is flash layout in buffer
; 1030 :     pSector = (FlashLayoutSector *)pFlash->sectorBuffer;

  02230	e59d301c	 ldr         r3, [sp, #0x1C]
  02234	e2833fb9	 add         r3, r3, #0xB9, 30
  02238	e58d3010	 str         r3, [sp, #0x10]

; 1031 : 
; 1032 :     // Get and check number of reserved regions
; 1033 :     pFlash->reservedRegions = pSector->cbReservedEntries/sizeof(ReservedEntry);

  0223c	e59d3010	 ldr         r3, [sp, #0x10]
  02240	e2833008	 add         r3, r3, #8
  02244	e5931000	 ldr         r1, [r3]
  02248	e3a00010	 mov         r0, #0x10
  0224c	eb000000	 bl          __rt_udiv
  02250	e59d301c	 ldr         r3, [sp, #0x1C]
  02254	e283301c	 add         r3, r3, #0x1C
  02258	e5830000	 str         r0, [r3]

; 1034 :     if (pFlash->reservedRegions > dimof(pFlash->reservedRegion)) goto cleanUp;

  0225c	e59d301c	 ldr         r3, [sp, #0x1C]
  02260	e283301c	 add         r3, r3, #0x1C
  02264	e5933000	 ldr         r3, [r3]
  02268	e3530010	 cmp         r3, #0x10
  0226c	9a000000	 bls         |$LN8@BuildLayou|
  02270	ea0000a0	 b           |$cleanUp$44797|
  02274		 |$LN8@BuildLayou|

; 1035 : 
; 1036 :     // Copy reserved regions info
; 1037 :     memcpy(
; 1038 :         pFlash->reservedRegion, (ReservedEntry*)&pSector[1],
; 1039 :         pFlash->reservedRegions * sizeof(ReservedEntry)
; 1040 :         );

  02274	e59d301c	 ldr         r3, [sp, #0x1C]
  02278	e283301c	 add         r3, r3, #0x1C
  0227c	e5931000	 ldr         r1, [r3]
  02280	e3a03010	 mov         r3, #0x10
  02284	e0020391	 mul         r2, r1, r3
  02288	e59d3010	 ldr         r3, [sp, #0x10]
  0228c	e2831010	 add         r1, r3, #0x10
  02290	e59d301c	 ldr         r3, [sp, #0x1C]
  02294	e2830020	 add         r0, r3, #0x20
  02298	eb000000	 bl          memcpy

; 1041 : 
; 1042 :     // Get and check number of regions
; 1043 :     pFlash->regions = pSector->cbRegionEntries/sizeof(FlashRegion);

  0229c	e59d3010	 ldr         r3, [sp, #0x10]
  022a0	e283300c	 add         r3, r3, #0xC
  022a4	e5931000	 ldr         r1, [r3]
  022a8	e3a0001c	 mov         r0, #0x1C
  022ac	eb000000	 bl          __rt_udiv
  022b0	e59d301c	 ldr         r3, [sp, #0x1C]
  022b4	e2833e12	 add         r3, r3, #0x12, 28
  022b8	e5830000	 str         r0, [r3]

; 1044 :     if (pFlash->regions > dimof(pFlash->region)) goto cleanUp;

  022bc	e59d301c	 ldr         r3, [sp, #0x1C]
  022c0	e2833e12	 add         r3, r3, #0x12, 28
  022c4	e5933000	 ldr         r3, [r3]
  022c8	e3530010	 cmp         r3, #0x10
  022cc	9a000000	 bls         |$LN7@BuildLayou|
  022d0	ea000088	 b           |$cleanUp$44797|
  022d4		 |$LN7@BuildLayou|

; 1045 : 
; 1046 :     // Copy regions info
; 1047 :     memcpy(
; 1048 :         pFlash->region, (UCHAR *)&pSector[1] + pSector->cbReservedEntries,
; 1049 :         pFlash->regions * sizeof(FlashRegion)
; 1050 :         );

  022d4	e59d301c	 ldr         r3, [sp, #0x1C]
  022d8	e2833e12	 add         r3, r3, #0x12, 28
  022dc	e5931000	 ldr         r1, [r3]
  022e0	e3a0301c	 mov         r3, #0x1C
  022e4	e0020391	 mul         r2, r1, r3
  022e8	e59d3010	 ldr         r3, [sp, #0x10]
  022ec	e2831010	 add         r1, r3, #0x10
  022f0	e59d3010	 ldr         r3, [sp, #0x10]
  022f4	e2833008	 add         r3, r3, #8
  022f8	e5933000	 ldr         r3, [r3]
  022fc	e0811003	 add         r1, r1, r3
  02300	e59d301c	 ldr         r3, [sp, #0x1C]
  02304	e2830f49	 add         r0, r3, #0x49, 30
  02308	eb000000	 bl          memcpy

; 1051 : 
; 1052 :     // print flash regions to debug output
; 1053 :     OALMSG(OAL_LOG_INFO, (
; 1054 :         L"Flash contains %u reserved regions:\r\n", pFlash->reservedRegions
; 1055 :         ));

  0230c	e59d301c	 ldr         r3, [sp, #0x1C]
  02310	e283301c	 add         r3, r3, #0x1C
  02314	e5931000	 ldr         r1, [r3]
  02318	e59f01fc	 ldr         r0, [pc, #0x1FC]
  0231c	eb000000	 bl          NKDbgPrintfW

; 1056 :     for (ix = 0; ix < pFlash->reservedRegions; ix++)

  02320	e3a03000	 mov         r3, #0
  02324	e58d3018	 str         r3, [sp, #0x18]
  02328	ea000002	 b           |$LN6@BuildLayou|
  0232c		 |$LN5@BuildLayou|
  0232c	e59d3018	 ldr         r3, [sp, #0x18]
  02330	e2833001	 add         r3, r3, #1
  02334	e58d3018	 str         r3, [sp, #0x18]
  02338		 |$LN6@BuildLayou|
  02338	e59d301c	 ldr         r3, [sp, #0x1C]
  0233c	e283301c	 add         r3, r3, #0x1C
  02340	e59d2018	 ldr         r2, [sp, #0x18]
  02344	e5933000	 ldr         r3, [r3]
  02348	e1520003	 cmp         r2, r3
  0234c	2a000018	 bcs         |$LN4@BuildLayou|

; 1057 :         {
; 1058 :         OALMSG(OAL_LOG_INFO, (
; 1059 :             L"    Name=%s, Start block=%u, Blocks=%u\r\n",
; 1060 :             pFlash->reservedRegion[ix].szName,
; 1061 :             pFlash->reservedRegion[ix].dwStartBlock,
; 1062 :             pFlash->reservedRegion[ix].dwNumBlocks
; 1063 :             ));

  02350	e59d301c	 ldr         r3, [sp, #0x1C]
  02354	e2831020	 add         r1, r3, #0x20
  02358	e59d2018	 ldr         r2, [sp, #0x18]
  0235c	e3a03010	 mov         r3, #0x10
  02360	e0030392	 mul         r3, r2, r3
  02364	e0813003	 add         r3, r1, r3
  02368	e283300c	 add         r3, r3, #0xC
  0236c	e5933000	 ldr         r3, [r3]
  02370	e59d201c	 ldr         r2, [sp, #0x1C]
  02374	e2820020	 add         r0, r2, #0x20
  02378	e59d1018	 ldr         r1, [sp, #0x18]
  0237c	e3a02010	 mov         r2, #0x10
  02380	e0020291	 mul         r2, r1, r2
  02384	e0802002	 add         r2, r0, r2
  02388	e2822008	 add         r2, r2, #8
  0238c	e5922000	 ldr         r2, [r2]
  02390	e59d101c	 ldr         r1, [sp, #0x1C]
  02394	e281e020	 add         lr, r1, #0x20
  02398	e59d0018	 ldr         r0, [sp, #0x18]
  0239c	e3a01010	 mov         r1, #0x10
  023a0	e0010190	 mul         r1, r0, r1
  023a4	e08e1001	 add         r1, lr, r1
  023a8	e59f0168	 ldr         r0, [pc, #0x168]
  023ac	eb000000	 bl          NKDbgPrintfW

; 1064 :         }

  023b0	eaffffdd	 b           |$LN5@BuildLayou|
  023b4		 |$LN4@BuildLayou|

; 1065 : 
; 1066 :     OALMSG(OAL_LOG_INFO, (
; 1067 :         L"Flash contains %u regions:\r\n", pFlash->regions
; 1068 :         ));

  023b4	e59d301c	 ldr         r3, [sp, #0x1C]
  023b8	e2833e12	 add         r3, r3, #0x12, 28
  023bc	e5931000	 ldr         r1, [r3]
  023c0	e59f014c	 ldr         r0, [pc, #0x14C]
  023c4	eb000000	 bl          NKDbgPrintfW

; 1069 :     for (ix = 0; ix < pFlash->regions; ix++)

  023c8	e3a03000	 mov         r3, #0
  023cc	e58d3018	 str         r3, [sp, #0x18]
  023d0	ea000002	 b           |$LN3@BuildLayou|
  023d4		 |$LN2@BuildLayou|
  023d4	e59d3018	 ldr         r3, [sp, #0x18]
  023d8	e2833001	 add         r3, r3, #1
  023dc	e58d3018	 str         r3, [sp, #0x18]
  023e0		 |$LN3@BuildLayou|
  023e0	e59d301c	 ldr         r3, [sp, #0x1C]
  023e4	e2833e12	 add         r3, r3, #0x12, 28
  023e8	e59d2018	 ldr         r2, [sp, #0x18]
  023ec	e5933000	 ldr         r3, [r3]
  023f0	e1520003	 cmp         r2, r3
  023f4	2a00003d	 bcs         |$LN1@BuildLayou|

; 1070 :         {
; 1071 :         OALMSG(OAL_LOG_INFO, (
; 1072 :             L"    Type=%d, Start=0x%x, NumP=0x%x, NumL=0x%x, Sec/Blk=0x%x, "
; 1073 :             L"B/Blk=0x%x, Compact=%d\r\n",
; 1074 :             pFlash->region[ix].regionType,
; 1075 :             pFlash->region[ix].dwStartPhysBlock,
; 1076 :             pFlash->region[ix].dwNumPhysBlocks,
; 1077 :             pFlash->region[ix].dwNumLogicalBlocks,
; 1078 :             pFlash->region[ix].dwSectorsPerBlock,
; 1079 :             pFlash->region[ix].dwBytesPerBlock,
; 1080 :             pFlash->region[ix].dwCompactBlocks
; 1081 :             ));

  023f8	e59d301c	 ldr         r3, [sp, #0x1C]
  023fc	e2831f49	 add         r1, r3, #0x49, 30
  02400	e59d2018	 ldr         r2, [sp, #0x18]
  02404	e3a0301c	 mov         r3, #0x1C
  02408	e0030392	 mul         r3, r2, r3
  0240c	e0813003	 add         r3, r1, r3
  02410	e2833018	 add         r3, r3, #0x18
  02414	e5933000	 ldr         r3, [r3]
  02418	e58d300c	 str         r3, [sp, #0xC]
  0241c	e59d301c	 ldr         r3, [sp, #0x1C]
  02420	e2831f49	 add         r1, r3, #0x49, 30
  02424	e59d2018	 ldr         r2, [sp, #0x18]
  02428	e3a0301c	 mov         r3, #0x1C
  0242c	e0030392	 mul         r3, r2, r3
  02430	e0813003	 add         r3, r1, r3
  02434	e2833014	 add         r3, r3, #0x14
  02438	e5933000	 ldr         r3, [r3]
  0243c	e58d3008	 str         r3, [sp, #8]
  02440	e59d301c	 ldr         r3, [sp, #0x1C]
  02444	e2831f49	 add         r1, r3, #0x49, 30
  02448	e59d2018	 ldr         r2, [sp, #0x18]
  0244c	e3a0301c	 mov         r3, #0x1C
  02450	e0030392	 mul         r3, r2, r3
  02454	e0813003	 add         r3, r1, r3
  02458	e2833010	 add         r3, r3, #0x10
  0245c	e5933000	 ldr         r3, [r3]
  02460	e58d3004	 str         r3, [sp, #4]
  02464	e59d301c	 ldr         r3, [sp, #0x1C]
  02468	e2831f49	 add         r1, r3, #0x49, 30
  0246c	e59d2018	 ldr         r2, [sp, #0x18]
  02470	e3a0301c	 mov         r3, #0x1C
  02474	e0030392	 mul         r3, r2, r3
  02478	e0813003	 add         r3, r1, r3
  0247c	e283300c	 add         r3, r3, #0xC
  02480	e5933000	 ldr         r3, [r3]
  02484	e58d3000	 str         r3, [sp]
  02488	e59d301c	 ldr         r3, [sp, #0x1C]
  0248c	e2831f49	 add         r1, r3, #0x49, 30
  02490	e59d2018	 ldr         r2, [sp, #0x18]
  02494	e3a0301c	 mov         r3, #0x1C
  02498	e0030392	 mul         r3, r2, r3
  0249c	e0813003	 add         r3, r1, r3
  024a0	e2833008	 add         r3, r3, #8
  024a4	e5933000	 ldr         r3, [r3]
  024a8	e59d201c	 ldr         r2, [sp, #0x1C]
  024ac	e2820f49	 add         r0, r2, #0x49, 30
  024b0	e59d1018	 ldr         r1, [sp, #0x18]
  024b4	e3a0201c	 mov         r2, #0x1C
  024b8	e0020291	 mul         r2, r1, r2
  024bc	e0802002	 add         r2, r0, r2
  024c0	e2822004	 add         r2, r2, #4
  024c4	e5922000	 ldr         r2, [r2]
  024c8	e59d101c	 ldr         r1, [sp, #0x1C]
  024cc	e281ef49	 add         lr, r1, #0x49, 30
  024d0	e59d0018	 ldr         r0, [sp, #0x18]
  024d4	e3a0101c	 mov         r1, #0x1C
  024d8	e0010190	 mul         r1, r0, r1
  024dc	e08e1001	 add         r1, lr, r1
  024e0	e5911000	 ldr         r1, [r1]
  024e4	e59f0024	 ldr         r0, [pc, #0x24]
  024e8	eb000000	 bl          NKDbgPrintfW

; 1082 :         }

  024ec	eaffffb8	 b           |$LN2@BuildLayou|
  024f0		 |$LN1@BuildLayou|

; 1083 : 
; 1084 :     rc = TRUE;

  024f0	e3a03001	 mov         r3, #1
  024f4	e58d3014	 str         r3, [sp, #0x14]
  024f8		 |$cleanUp$44797|

; 1085 : 
; 1086 : cleanUp:
; 1087 :     return rc;

  024f8	e59d3014	 ldr         r3, [sp, #0x14]
  024fc	e58d3048	 str         r3, [sp, #0x48]

; 1088 : }

  02500	e59d0048	 ldr         r0, [sp, #0x48]
  02504	e28dd060	 add         sp, sp, #0x60
  02508	e89d6000	 ldmia       sp, {sp, lr}
  0250c	e12fff1e	 bx          lr
  02510		 |$LN29@BuildLayou|
  02510		 |$LN30@BuildLayou|
  02510	00000000	 DCD         |??_C@_1KM@MOFGEBEH@?$AA?5?$AA?5?$AA?5?$AA?5?$AAT?$AAy?$AAp?$AAe?$AA?$DN?$AA?$CF?$AAd?$AA?0?$AA?5?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?$DN?$AA0?$AAx?$AA?$CF?$AAx?$AA?0?$AA?5?$AAN?$AAu?$AAm?$AAP?$AA?$DN?$AA0?$AAx@|
  02514		 |$LN31@BuildLayou|
  02514	00000000	 DCD         |??_C@_1DK@FBKBGCAF@?$AAF?$AAl?$AAa?$AAs?$AAh?$AA?5?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAs?$AA?5?$AA?$CF?$AAu?$AA?5?$AAr?$AAe?$AAg?$AAi?$AAo?$AAn?$AAs?$AA?3?$AA?$AN?$AA?6?$AA?$AA@|
  02518		 |$LN32@BuildLayou|
  02518	00000000	 DCD         |??_C@_1FC@IDNHMBKN@?$AA?5?$AA?5?$AA?5?$AA?5?$AAN?$AAa?$AAm?$AAe?$AA?$DN?$AA?$CF?$AAs?$AA?0?$AA?5?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?5?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?$DN?$AA?$CF?$AAu?$AA?0?$AA?5?$AAB?$AAl?$AAo@|
  0251c		 |$LN33@BuildLayou|
  0251c	00000000	 DCD         |??_C@_1EM@LIDNJIDD@?$AAF?$AAl?$AAa?$AAs?$AAh?$AA?5?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAs?$AA?5?$AA?$CF?$AAu?$AA?5?$AAr?$AAe?$AAs?$AAe?$AAr?$AAv?$AAe?$AAd?$AA?5?$AAr?$AAe?$AAg?$AAi?$AAo@|
  02520		 |$LN34@BuildLayou|
  02520	00000000	 DCD         |??_C@_08GODGKFDB@MSFLSH50?$AA@|
  02524		 |$LN35@BuildLayou|
  02524	00000000	 DCD         |??_C@_1DE@JONHLDDF@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAS?$AAk?$AAi?$AAp?$AA?5?$AAb?$AAa?$AAd?$AA?5?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  02528		 |$LN36@BuildLayou|
  02528	00000000	 DCD         |dpCurSettings|
  0252c		 |$M45110|

			 ENDP  ; |BuildLayoutInfo|

	END
