; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\BOOT\SDHC\sdhc.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|gwaCMD| [ DATA ]

  00000			 AREA	 |.data|, DATA
	 COMMON	|m_dwMaxClockRate|, 0x4

	 COMMON	|szHexBuf|, 0x400

	 COMMON	|m_TransferClass|, 0x2

	 COMMON	|m_dwMemBase|, 0x4

	 COMMON	|m_pbRegisters|, 0x4

	 COMMON	|m_hTWL|, 0x4

	 COMMON	|m_dwSDIOCard|, 0x4

	 COMMON	|m_usMaxBlockLen|, 0x2

	 COMMON	|g_hGPIO|, 0x4

	 COMMON	|m_dwSDIOPriority|, 0x4

	 COMMON	|m_dwMemLen|, 0x4

	 COMMON	|m_dwControllerSysIntr|, 0x4

	 COMMON	|m_wDTOTimeout|, 0x2

	 COMMON	|m_fCardInitialized|, 0x4

	 COMMON	|m_fAppCmdMode|, 0x4

	 COMMON	|m_LastCommand|, 0x4

	 COMMON	|m_fInitialized|, 0x4

	 COMMON	|m_dwMaxTimeout|, 0x4

	 COMMON	|m_dwCDPriority|, 0x4

	 COMMON	|m_fCardPresent|, 0x4

	 COMMON	|m_wCTOTimeout|, 0x2

	 COMMON	|m_dwSlot|, 0x4

	 COMMON	|m_fCardInserted|, 0x4

	 COMMON	|m_fMMCMode|, 0x4

	 COMMON	|m_dwCPURev|, 0x4

	 COMMON	|m_fFirstTime|, 0x4


  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
|gwaCMD| DCB	0x1
	DCB	0x0
	DCB	0x0
	%	1
	DCD	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x1
	%	1
	DCD	0x120000
	DCB	0x1
	DCB	0x0
	DCB	0x1
	%	1
	DCD	0x90000
	DCB	0x1
	DCB	0x0
	DCB	0x1
	%	1
	DCD	0x20000
	DCB	0x1
	DCB	0x0
	DCB	0x0
	%	1
	DCD	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x0
	%	1
	DCD	0x20000
	DCB	0x0
	DCB	0x1
	DCB	0x0
	%	1
	DCD	0x30000
	DCB	0x1
	DCB	0x0
	DCB	0x0
	%	1
	DCD	0x20000
	DCB	0x1
	DCB	0x0
	DCB	0x0
	%	1
	DCD	0x20000
	DCB	0x1
	DCB	0x0
	DCB	0x0
	%	1
	DCD	0x10000
	DCB	0x1
	DCB	0x0
	DCB	0x0
	%	1
	DCD	0x10000
	DCB	0x0
	DCB	0x0
	DCB	0x1
	%	1
	DCD	0x220010
	DCB	0x1
	DCB	0x0
	DCB	0x0
	%	1
	DCD	0xc30000
	DCB	0x1
	DCB	0x1
	DCB	0x0
	%	1
	DCD	0x20000
	DCB	0x0
	DCB	0x0
	DCB	0x0
	%	1
	DCD	0x0
	DCB	0x1
	DCB	0x0
	DCB	0x0
	%	1
	DCD	0x0
	DCB	0x1
	DCB	0x0
	DCB	0x0
	%	1
	DCD	0x1a0000
	DCB	0x1
	DCB	0x1
	DCB	0x0
	%	1
	DCD	0x220032
	DCB	0x1
	DCB	0x1
	DCB	0x0
	%	1
	DCD	0x220032
	DCB	0x0
	DCB	0x1
	DCB	0x0
	%	1
	DCD	0x0
	DCB	0x0
	DCB	0x1
	DCB	0x1
	%	1
	DCD	0x230000
	DCB	0x0
	DCB	0x1
	DCB	0x0
	%	1
	DCD	0x0
	DCB	0x0
	DCB	0x1
	DCB	0x0
	%	1
	DCD	0x20010
	DCB	0x0
	DCB	0x1
	DCB	0x0
	%	1
	DCD	0x0
	DCB	0x1
	DCB	0x1
	DCB	0x0
	%	1
	DCD	0x220022
	DCB	0x1
	DCB	0x1
	DCB	0x0
	%	1
	DCD	0x220022
	DCB	0x0
	DCB	0x1
	DCB	0x0
	%	1
	DCD	0x20000
	DCB	0x1
	DCB	0x0
	DCB	0x0
	%	1
	DCD	0x20000
	DCB	0x1
	DCB	0x0
	DCB	0x0
	%	1
	DCD	0x30000
	DCB	0x1
	DCB	0x0
	DCB	0x0
	%	1
	DCD	0x30000
	DCB	0x1
	DCB	0x0
	DCB	0x0
	%	1
	DCD	0x20010
	DCB	0x0
	DCB	0x0
	DCB	0x0
	%	1
	DCD	0x0
	DCB	0x1
	DCB	0x0
	DCB	0x0
	%	1
	DCD	0x0
	DCB	0x1
	DCB	0x0
	DCB	0x0
	%	1
	DCD	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	%	1
	DCD	0x0
	DCB	0x1
	DCB	0x0
	DCB	0x0
	%	1
	DCD	0x20000
	DCB	0x1
	DCB	0x0
	DCB	0x0
	%	1
	DCD	0x20000
	DCB	0x0
	DCB	0x0
	DCB	0x0
	%	1
	DCD	0x0
	DCB	0x1
	DCB	0x1
	DCB	0x0
	%	1
	DCD	0x30000
	DCB	0x0
	DCB	0x1
	DCB	0x0
	%	1
	DCD	0x20000
	DCB	0x1
	DCB	0x1
	DCB	0x1
	%	1
	DCD	0x20000
	DCB	0x0
	DCB	0x1
	DCB	0x0
	%	1
	DCD	0x20000
	DCB	0x1
	DCB	0x1
	DCB	0x0
	%	1
	DCD	0x20000
	DCB	0x0
	DCB	0x1
	DCB	0x0
	%	1
	DCD	0x0
	DCB	0x0
	DCB	0x1
	DCB	0x0
	%	1
	DCD	0x0
	DCB	0x0
	DCB	0x1
	DCB	0x0
	%	1
	DCD	0x0
	DCB	0x0
	DCB	0x1
	DCB	0x0
	%	1
	DCD	0x0
	DCB	0x0
	DCB	0x1
	DCB	0x0
	%	1
	DCD	0x0
	DCB	0x0
	DCB	0x1
	DCB	0x0
	%	1
	DCD	0x0
	DCB	0x0
	DCB	0x1
	DCB	0x0
	%	1
	DCD	0x0
	DCB	0x0
	DCB	0x1
	DCB	0x0
	%	1
	DCD	0x0
	DCB	0x0
	DCB	0x1
	DCB	0x0
	%	1
	DCD	0x220000
	DCB	0x2
	DCB	0x0
	DCB	0x0
	%	1
	DCD	0x20000
	DCB	0x2
	DCB	0x0
	DCB	0x0
	%	1
	DCD	0x220000
	DCB	0x0
	DCB	0x0
	DCB	0x0
	%	1
	DCD	0x0
	DCB	0x1
	DCB	0x0
	DCB	0x0
	%	1
	DCD	0x20000
	DCB	0x1
	DCB	0x0
	DCB	0x0
	%	1
	DCD	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	%	1
	DCD	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	%	1
	DCD	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	%	1
	DCD	0x20000
	DCB	0x0
	DCB	0x0
	DCB	0x0
	%	1
	DCD	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	%	1
	DCD	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	%	1
	DCD	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	%	1
	DCD	0x0
	EXPORT	|SdhcCardDetect|
	IMPORT	|GPIOGetBit|
	IMPORT	|BSPGetSDHCCardDetect|

  00000			 AREA	 |.pdata|, PDATA
|$T44672| DCD	|$LN10@SdhcCardDe|
	DCD	0x40002202
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\boot\sdhc\sdhc.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SdhcCardDetect| PROC

; 201  : {

  00000		 |$LN10@SdhcCardDe|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004	e24dd010	 sub         sp, sp, #0x10
  00008		 |$M44669|

; 202  :     DWORD pinState=1;

  00008	e3a03001	 mov         r3, #1
  0000c	e58d3000	 str         r3, [sp]

; 203  : 
; 204  :     switch (m_dwSlot)

  00010	e59f306c	 ldr         r3, [pc, #0x6C]
  00014	e5933000	 ldr         r3, [r3]
  00018	e3530001	 cmp         r3, #1
  0001c	0a000000	 beq         |$LN3@SdhcCardDe|
  00020	ea000009	 b           |$LN4@SdhcCardDe|
  00024		 |$LN3@SdhcCardDe|

; 205  :     {
; 206  :         case MMCSLOT_1:
; 207  :                pinState = GPIOGetBit(g_hGPIO,BSPGetSDHCCardDetect(MMCSLOT_1));

  00024	e3a00001	 mov         r0, #1
  00028	eb000000	 bl          BSPGetSDHCCardDetect
  0002c	e58d0008	 str         r0, [sp, #8]
  00030	e59d1008	 ldr         r1, [sp, #8]
  00034	e59f3044	 ldr         r3, [pc, #0x44]
  00038	e5930000	 ldr         r0, [r3]
  0003c	eb000000	 bl          GPIOGetBit
  00040	e58d000c	 str         r0, [sp, #0xC]
  00044	e59d300c	 ldr         r3, [sp, #0xC]
  00048	e58d3000	 str         r3, [sp]
  0004c		 |$LN4@SdhcCardDe|

; 208  :             break;
; 209  : 
; 210  : #if 0   
; 211  :         // MMCSLOT_2 not supported
; 212  :         case MMCSLOT_2:
; 213  :             OALTritonRead(m_hTWL, TWL_GPIODATAIN1, &regval);
; 214  :             regval &= (1<<1);   //GPIO.1
; 215  :             break;
; 216  : #endif
; 217  :     }
; 218  : 
; 219  :     // card detect is active low
; 220  :     if (pinState) 

  0004c	e59d3000	 ldr         r3, [sp]
  00050	e3530000	 cmp         r3, #0
  00054	0a000003	 beq         |$LN2@SdhcCardDe|

; 221  :         return FALSE;

  00058	e3a03000	 mov         r3, #0
  0005c	e58d3004	 str         r3, [sp, #4]
  00060	ea000002	 b           |$LN6@SdhcCardDe|

; 222  :     else 

  00064	ea000001	 b           |$LN1@SdhcCardDe|
  00068		 |$LN2@SdhcCardDe|

; 223  :         return TRUE;

  00068	e3a03001	 mov         r3, #1
  0006c	e58d3004	 str         r3, [sp, #4]
  00070		 |$LN1@SdhcCardDe|
  00070		 |$LN6@SdhcCardDe|

; 224  : }

  00070	e59d0004	 ldr         r0, [sp, #4]
  00074	e28dd010	 add         sp, sp, #0x10
  00078	e49de004	 ldr         lr, [sp], #4
  0007c	e12fff1e	 bx          lr
  00080		 |$LN11@SdhcCardDe|
  00080		 |$LN12@SdhcCardDe|
  00080	00000000	 DCD         |g_hGPIO|
  00084		 |$LN13@SdhcCardDe|
  00084	00000000	 DCD         |m_dwSlot|
  00088		 |$M44670|

			 ENDP  ; |SdhcCardDetect|

	EXPORT	|SdhcSetInterface|

  00008			 AREA	 |.pdata|, PDATA
|$T44680| DCD	|$LN7@SdhcSetInt|
	DCD	0x40002103
; Function compile flags: /Odtp

  00088			 AREA	 |.text|, CODE, ARM

  00088		 |SdhcSetInterface| PROC

; 449  : {

  00088		 |$LN7@SdhcSetInt|
  00088	e1a0c00d	 mov         r12, sp
  0008c	e92d0001	 stmdb       sp!, {r0}
  00090	e92d5000	 stmdb       sp!, {r12, lr}
  00094		 |$M44677|

; 450  :     UpdateSystemClock(TRUE);

  00094	e3a00001	 mov         r0, #1
  00098	eb000000	 bl          UpdateSystemClock

; 451  :     if (SD_INTERFACE_SD_4BIT == mode)

  0009c	e59d3008	 ldr         r3, [sp, #8]
  000a0	e3530001	 cmp         r3, #1
  000a4	1a000009	 bne         |$LN2@SdhcSetInt|

; 452  :     {
; 453  :         OALMSGX(OAL_INFO, (TEXT("SDHC: 4 bit mode\r\n")));
; 454  :         SETREG32(&m_pbRegisters->MMCHS_HCTL, MMCHS_HCTL_DTW);

  000a8	e59f3058	 ldr         r3, [pc, #0x58]
  000ac	e5933000	 ldr         r3, [r3]
  000b0	e2833f4a	 add         r3, r3, #0x4A, 30
  000b4	e5933000	 ldr         r3, [r3]
  000b8	e3832002	 orr         r2, r3, #2
  000bc	e59f3044	 ldr         r3, [pc, #0x44]
  000c0	e5933000	 ldr         r3, [r3]
  000c4	e2833f4a	 add         r3, r3, #0x4A, 30
  000c8	e5832000	 str         r2, [r3]

; 455  :         //OALMSGX(OAL_INFO, (TEXT("SdhcSetInterface MMCHS_HCTL value = %X\r\n"), m_pbRegisters->MMCHS_HCTL ));
; 456  :     }
; 457  :     else

  000cc	ea000009	 b           |$LN1@SdhcSetInt|
  000d0		 |$LN2@SdhcSetInt|

; 458  :     {
; 459  :         OALMSGX(OAL_INFO, (TEXT("SDHC: 1 bit mode\r\n")));
; 460  :         CLRREG32(&m_pbRegisters->MMCHS_HCTL, MMCHS_HCTL_DTW);

  000d0	e59f3030	 ldr         r3, [pc, #0x30]
  000d4	e5933000	 ldr         r3, [r3]
  000d8	e2833f4a	 add         r3, r3, #0x4A, 30
  000dc	e5932000	 ldr         r2, [r3]
  000e0	e3e03002	 mvn         r3, #2
  000e4	e0022003	 and         r2, r2, r3
  000e8	e59f3018	 ldr         r3, [pc, #0x18]
  000ec	e5933000	 ldr         r3, [r3]
  000f0	e2833f4a	 add         r3, r3, #0x4A, 30
  000f4	e5832000	 str         r2, [r3]
  000f8		 |$LN1@SdhcSetInt|

; 461  :         //OALMSGX(OAL_INFO, (TEXT("SdhcSetInterface MMCHS_HCTL value = %X\r\n"), m_pbRegisters->MMCHS_HCTL ));
; 462  :     }
; 463  : 
; 464  :     // ??? SdhcSetClockRate(&pInterface->ClockRate);
; 465  :     UpdateSystemClock(FALSE);

  000f8	e3a00000	 mov         r0, #0
  000fc	eb000000	 bl          UpdateSystemClock

; 466  : }

  00100	e89d6000	 ldmia       sp, {sp, lr}
  00104	e12fff1e	 bx          lr
  00108		 |$LN8@SdhcSetInt|
  00108		 |$LN9@SdhcSetInt|
  00108	00000000	 DCD         |m_pbRegisters|
  0010c		 |$M44678|

			 ENDP  ; |SdhcSetInterface|

	EXPORT	|SdhcSetClockRate|
	IMPORT	|__rt_udiv|

  00010			 AREA	 |.pdata|, PDATA
|$T44688| DCD	|$LN11@SdhcSetClo|
	DCD	0x40008f04
; Function compile flags: /Odtp

  0010c			 AREA	 |.text|, CODE, ARM

  0010c		 |SdhcSetClockRate| PROC

; 484  : {

  0010c		 |$LN11@SdhcSetClo|
  0010c	e1a0c00d	 mov         r12, sp
  00110	e92d0001	 stmdb       sp!, {r0}
  00114	e92d5000	 stmdb       sp!, {r12, lr}
  00118	e24dd010	 sub         sp, sp, #0x10
  0011c		 |$M44685|

; 485  :     DWORD dwTimeout = 500;

  0011c	e3a03f7d	 mov         r3, #0x7D, 30
  00120	e58d300c	 str         r3, [sp, #0xC]

; 486  :     INT32 dwRegValue;
; 487  :     DWORD dwDiv;
; 488  :     DWORD dwClockRate = *pdwRate;

  00124	e59d3018	 ldr         r3, [sp, #0x18]
  00128	e5933000	 ldr         r3, [r3]
  0012c	e58d3000	 str         r3, [sp]

; 489  : 
; 490  :     OALMSGX(OAL_FUNC, (TEXT("SdhcSetClockRate %d\r\n"), *pdwRate));
; 491  : 
; 492  :     if (dwClockRate > m_dwMaxClockRate)

  00130	e59d2000	 ldr         r2, [sp]
  00134	e59f3208	 ldr         r3, [pc, #0x208]
  00138	e5933000	 ldr         r3, [r3]
  0013c	e1520003	 cmp         r2, r3
  00140	9a000002	 bls         |$LN6@SdhcSetClo|

; 493  :         dwClockRate = m_dwMaxClockRate;

  00144	e59f31f8	 ldr         r3, [pc, #0x1F8]
  00148	e5933000	 ldr         r3, [r3]
  0014c	e58d3000	 str         r3, [sp]
  00150		 |$LN6@SdhcSetClo|

; 494  : 
; 495  :     // calculate the register value
; 496  :     dwDiv = (DWORD)((MMCSD_CLOCK_INPUT + dwClockRate - 1) / dwClockRate);

  00150	e59d2000	 ldr         r2, [sp]
  00154	e59f31e0	 ldr         r3, [pc, #0x1E0]
  00158	e0823003	 add         r3, r2, r3
  0015c	e2431001	 sub         r1, r3, #1
  00160	e59d0000	 ldr         r0, [sp]
  00164	eb000000	 bl          __rt_udiv
  00168	e58d0004	 str         r0, [sp, #4]

; 497  : 
; 498  :     //OALMSGX(OAL_INFO, (TEXT("actual wDiv = 0x%x  requested:0x%x"), dwDiv, *pdwRate));
; 499  :     // Only 10 bits available for the divider, so mmc base clock / 1024 is minimum.
; 500  :     if ( dwDiv > 0x03FF )

  0016c	e59d2004	 ldr         r2, [sp, #4]
  00170	e3a03c03	 mov         r3, #3, 24
  00174	e38330ff	 orr         r3, r3, #0xFF
  00178	e1520003	 cmp         r2, r3
  0017c	9a000002	 bls         |$LN5@SdhcSetClo|

; 501  :         dwDiv = 0x03FF;

  00180	e3a03c03	 mov         r3, #3, 24
  00184	e38330ff	 orr         r3, r3, #0xFF
  00188	e58d3004	 str         r3, [sp, #4]
  0018c		 |$LN5@SdhcSetClo|

; 502  : 
; 503  :     //OALMSGX(OAL_INFO, (TEXT("dwDiv = 0x%x 0x%x"), dwDiv, *pdwRate));
; 504  : 
; 505  :     // Program the divisor, but leave the rest of the register alone.
; 506  :     dwRegValue = INREG32(&m_pbRegisters->MMCHS_SYSCTL);

  0018c	e59f31ac	 ldr         r3, [pc, #0x1AC]
  00190	e5933000	 ldr         r3, [r3]
  00194	e2833f4b	 add         r3, r3, #0x4B, 30
  00198	e5933000	 ldr         r3, [r3]
  0019c	e58d3008	 str         r3, [sp, #8]

; 507  : 
; 508  :     dwRegValue = (dwRegValue & ~MMCHS_SYSCTL_CLKD_MASK) | MMCHS_SYSCTL_CLKD(dwDiv);

  001a0	e59d2008	 ldr         r2, [sp, #8]
  001a4	e3e03cff	 mvn         r3, #0xFF, 24
  001a8	e22330c0	 eor         r3, r3, #0xC0
  001ac	e0022003	 and         r2, r2, r3
  001b0	e59d3004	 ldr         r3, [sp, #4]
  001b4	e1a03303	 mov         r3, r3, lsl #6
  001b8	e1823003	 orr         r3, r2, r3
  001bc	e58d3008	 str         r3, [sp, #8]

; 509  :     dwRegValue = (dwRegValue & ~MMCHS_SYSCTL_DTO_MASK) | MMCHS_SYSCTL_DTO(0x0e); // DTO

  001c0	e59d2008	 ldr         r2, [sp, #8]
  001c4	e3e0380f	 mvn         r3, #0xF, 16
  001c8	e0023003	 and         r3, r2, r3
  001cc	e383380e	 orr         r3, r3, #0xE, 16
  001d0	e58d3008	 str         r3, [sp, #8]

; 510  :     dwRegValue &= ~MMCHS_SYSCTL_CEN;

  001d4	e59d2008	 ldr         r2, [sp, #8]
  001d8	e3e03004	 mvn         r3, #4
  001dc	e0023003	 and         r3, r2, r3
  001e0	e58d3008	 str         r3, [sp, #8]

; 511  :     dwRegValue &= ~MMCHS_SYSCTL_ICE;

  001e4	e59d2008	 ldr         r2, [sp, #8]
  001e8	e3e03001	 mvn         r3, #1
  001ec	e0023003	 and         r3, r2, r3
  001f0	e58d3008	 str         r3, [sp, #8]

; 512  : 
; 513  :     CLRREG32(&m_pbRegisters->MMCHS_SYSCTL, MMCHS_SYSCTL_CEN);

  001f4	e59f3144	 ldr         r3, [pc, #0x144]
  001f8	e5933000	 ldr         r3, [r3]
  001fc	e2833f4b	 add         r3, r3, #0x4B, 30
  00200	e5932000	 ldr         r2, [r3]
  00204	e3e03004	 mvn         r3, #4
  00208	e0022003	 and         r2, r2, r3
  0020c	e59f312c	 ldr         r3, [pc, #0x12C]
  00210	e5933000	 ldr         r3, [r3]
  00214	e2833f4b	 add         r3, r3, #0x4B, 30
  00218	e5832000	 str         r2, [r3]

; 514  : 
; 515  :     OUTREG32(&m_pbRegisters->MMCHS_SYSCTL, dwRegValue);

  0021c	e59f311c	 ldr         r3, [pc, #0x11C]
  00220	e5933000	 ldr         r3, [r3]
  00224	e2832f4b	 add         r2, r3, #0x4B, 30
  00228	e59d3008	 ldr         r3, [sp, #8]
  0022c	e5823000	 str         r3, [r2]

; 516  : 
; 517  :     SETREG32(&m_pbRegisters->MMCHS_SYSCTL, MMCHS_SYSCTL_ICE); // enable internal clock

  00230	e59f3108	 ldr         r3, [pc, #0x108]
  00234	e5933000	 ldr         r3, [r3]
  00238	e2833f4b	 add         r3, r3, #0x4B, 30
  0023c	e5933000	 ldr         r3, [r3]
  00240	e3832001	 orr         r2, r3, #1
  00244	e59f30f4	 ldr         r3, [pc, #0xF4]
  00248	e5933000	 ldr         r3, [r3]
  0024c	e2833f4b	 add         r3, r3, #0x4B, 30
  00250	e5832000	 str         r2, [r3]

; 518  : 
; 519  :     dwTimeout = 500;

  00254	e3a03f7d	 mov         r3, #0x7D, 30
  00258	e58d300c	 str         r3, [sp, #0xC]
  0025c		 |$LN4@SdhcSetClo|

; 520  :     while (((INREG32(&m_pbRegisters->MMCHS_SYSCTL) & MMCHS_SYSCTL_ICS) != MMCHS_SYSCTL_ICS) && (dwTimeout>0))

  0025c	e59f30dc	 ldr         r3, [pc, #0xDC]
  00260	e5933000	 ldr         r3, [r3]
  00264	e2833f4b	 add         r3, r3, #0x4B, 30
  00268	e5933000	 ldr         r3, [r3]
  0026c	e2033002	 and         r3, r3, #2
  00270	e3530002	 cmp         r3, #2
  00274	0a000006	 beq         |$LN3@SdhcSetClo|
  00278	e59d300c	 ldr         r3, [sp, #0xC]
  0027c	e3530000	 cmp         r3, #0
  00280	9a000003	 bls         |$LN3@SdhcSetClo|

; 521  :     {
; 522  :         dwTimeout--;

  00284	e59d300c	 ldr         r3, [sp, #0xC]
  00288	e2433001	 sub         r3, r3, #1
  0028c	e58d300c	 str         r3, [sp, #0xC]

; 523  :     }

  00290	eafffff1	 b           |$LN4@SdhcSetClo|
  00294		 |$LN3@SdhcSetClo|

; 524  : 
; 525  :     SETREG32(&m_pbRegisters->MMCHS_SYSCTL, MMCHS_SYSCTL_CEN);

  00294	e59f30a4	 ldr         r3, [pc, #0xA4]
  00298	e5933000	 ldr         r3, [r3]
  0029c	e2833f4b	 add         r3, r3, #0x4B, 30
  002a0	e5933000	 ldr         r3, [r3]
  002a4	e3832004	 orr         r2, r3, #4
  002a8	e59f3090	 ldr         r3, [pc, #0x90]
  002ac	e5933000	 ldr         r3, [r3]
  002b0	e2833f4b	 add         r3, r3, #0x4B, 30
  002b4	e5832000	 str         r2, [r3]

; 526  :     SETREG32(&m_pbRegisters->MMCHS_HCTL, MMCHS_HCTL_SDBP); // power up the card

  002b8	e59f3080	 ldr         r3, [pc, #0x80]
  002bc	e5933000	 ldr         r3, [r3]
  002c0	e2833f4a	 add         r3, r3, #0x4A, 30
  002c4	e5933000	 ldr         r3, [r3]
  002c8	e3832c01	 orr         r2, r3, #1, 24
  002cc	e59f306c	 ldr         r3, [pc, #0x6C]
  002d0	e5933000	 ldr         r3, [r3]
  002d4	e2833f4a	 add         r3, r3, #0x4A, 30
  002d8	e5832000	 str         r2, [r3]

; 527  : 
; 528  :     dwTimeout = 500;

  002dc	e3a03f7d	 mov         r3, #0x7D, 30
  002e0	e58d300c	 str         r3, [sp, #0xC]
  002e4		 |$LN2@SdhcSetClo|

; 529  :     while (((INREG32(&m_pbRegisters->MMCHS_SYSCTL) & MMCHS_SYSCTL_CEN) != MMCHS_SYSCTL_CEN) && (dwTimeout>0))

  002e4	e59f3054	 ldr         r3, [pc, #0x54]
  002e8	e5933000	 ldr         r3, [r3]
  002ec	e2833f4b	 add         r3, r3, #0x4B, 30
  002f0	e5933000	 ldr         r3, [r3]
  002f4	e2033004	 and         r3, r3, #4
  002f8	e3530004	 cmp         r3, #4
  002fc	0a000006	 beq         |$LN1@SdhcSetClo|
  00300	e59d300c	 ldr         r3, [sp, #0xC]
  00304	e3530000	 cmp         r3, #0
  00308	9a000003	 bls         |$LN1@SdhcSetClo|

; 530  :     {
; 531  :         dwTimeout--;

  0030c	e59d300c	 ldr         r3, [sp, #0xC]
  00310	e2433001	 sub         r3, r3, #1
  00314	e58d300c	 str         r3, [sp, #0xC]

; 532  :     }

  00318	eafffff1	 b           |$LN2@SdhcSetClo|
  0031c		 |$LN1@SdhcSetClo|

; 533  : 
; 534  :     *pdwRate = MMCSD_CLOCK_INPUT / dwDiv;

  0031c	e59d0004	 ldr         r0, [sp, #4]
  00320	e59f1014	 ldr         r1, [pc, #0x14]
  00324	eb000000	 bl          __rt_udiv
  00328	e59d3018	 ldr         r3, [sp, #0x18]
  0032c	e5830000	 str         r0, [r3]

; 535  :     OALMSGX(OAL_FUNC, (TEXT("SDHC: clock = %d\r\n"), *pdwRate));
; 536  : }

  00330	e28dd010	 add         sp, sp, #0x10
  00334	e89d6000	 ldmia       sp, {sp, lr}
  00338	e12fff1e	 bx          lr
  0033c		 |$LN12@SdhcSetClo|
  0033c		 |$LN13@SdhcSetClo|
  0033c	05b8d800	 DCD         0x5b8d800
  00340		 |$LN14@SdhcSetClo|
  00340	00000000	 DCD         |m_pbRegisters|
  00344		 |$LN15@SdhcSetClo|
  00344	00000000	 DCD         |m_dwMaxClockRate|
  00348		 |$M44686|

			 ENDP  ; |SdhcSetClockRate|


  00018			 AREA	 |.pdata|, PDATA
|$T44698| DCD	|$LN6@UpdateSyst|
	DCD	0x40001304
; Function compile flags: /Odtp

  00348			 AREA	 |.text|, CODE, ARM

  00348		 |UpdateSystemClock| PROC

; 619  : {

  00348		 |$LN6@UpdateSyst|
  00348	e1a0c00d	 mov         r12, sp
  0034c	e92d0001	 stmdb       sp!, {r0}
  00350	e92d5000	 stmdb       sp!, {r12, lr}
  00354	e24dd004	 sub         sp, sp, #4
  00358		 |$M44695|

; 620  :     //OALMSGX(OAL_FUNC, (L"+UpdateSystemClock()\r\n"));
; 621  :     if (enable)

  00358	e59d300c	 ldr         r3, [sp, #0xC]
  0035c	e3530000	 cmp         r3, #0
  00360	0a000004	 beq         |$LN1@UpdateSyst|

; 622  :     {
; 623  :         // enable autoidle, disable wakeup, enable smart-idle, ClockActivity (interface and functional clocks may be switched off)
; 624  :         OUTREG32(&m_pbRegisters->MMCHS_SYSCONFIG, MMCHS_SYSCONFIG_AUTOIDLE | MMCHS_SYSCONFIG_SIDLEMODE(SIDLE_IGNORE));

  00364	e59f3024	 ldr         r3, [pc, #0x24]
  00368	e5933000	 ldr         r3, [r3]
  0036c	e2832010	 add         r2, r3, #0x10
  00370	e3a03009	 mov         r3, #9
  00374	e5823000	 str         r3, [r2]
  00378		 |$LN1@UpdateSyst|

; 625  :     }
; 626  : 
; 627  :     return TRUE;

  00378	e3a03001	 mov         r3, #1
  0037c	e58d3000	 str         r3, [sp]

; 628  : }

  00380	e59d0000	 ldr         r0, [sp]
  00384	e28dd004	 add         sp, sp, #4
  00388	e89d6000	 ldmia       sp, {sp, lr}
  0038c	e12fff1e	 bx          lr
  00390		 |$LN7@UpdateSyst|
  00390		 |$LN8@UpdateSyst|
  00390	00000000	 DCD         |m_pbRegisters|
  00394		 |$M44696|

			 ENDP  ; |UpdateSystemClock|

	EXPORT	|SdhcHandleInsertion|

  00020			 AREA	 |.pdata|, PDATA
|$T44705| DCD	|$LN8@SdhcHandle|
	DCD	0x40003902
; Function compile flags: /Odtp

  00394			 AREA	 |.text|, CODE, ARM

  00394		 |SdhcHandleInsertion| PROC

; 785  : {

  00394		 |$LN8@SdhcHandle|
  00394	e52de004	 str         lr, [sp, #-4]!
  00398	e24dd008	 sub         sp, sp, #8
  0039c		 |$M44702|

; 786  :     DWORD dwClockRate = SD_DEFAULT_CARD_ID_CLOCK_RATE;

  0039c	e3a03b61	 mov         r3, #0x61, 22
  003a0	e3833e2a	 orr         r3, r3, #0x2A, 28
  003a4	e58d3000	 str         r3, [sp]

; 787  :     DWORD dwTimeout;
; 788  : 
; 789  :     m_fCardPresent = TRUE;

  003a8	e59f20c4	 ldr         r2, [pc, #0xC4]
  003ac	e3a03001	 mov         r3, #1
  003b0	e5823000	 str         r3, [r2]

; 790  :     m_dwSDIOCard = 0;

  003b4	e59f20b4	 ldr         r2, [pc, #0xB4]
  003b8	e3a03000	 mov         r3, #0
  003bc	e5823000	 str         r3, [r2]

; 791  : 
; 792  :     OALMSGX(OAL_INFO, (TEXT("HandleInsertion\r\n")));
; 793  : 
; 794  :     // Card power handled by PMIC and card_detect signal turn power to the card on
; 795  :     //??? TurnCardPowerOn();
; 796  : 
; 797  :     SystemClockOn();

  003c0	eb000000	 bl          SystemClockOn

; 798  : 
; 799  :     MmcReset(SOFT_RESET_ALL);

  003c4	e3a00401	 mov         r0, #1, 8
  003c8	eb000000	 bl          MmcReset

; 800  : 
; 801  :     // Check for debounce stable
; 802  :     dwTimeout = 5000;

  003cc	e3a03c13	 mov         r3, #0x13, 24
  003d0	e3833088	 orr         r3, r3, #0x88
  003d4	e58d3004	 str         r3, [sp, #4]
  003d8		 |$LN3@SdhcHandle|

; 803  :     while (((INREG32(&m_pbRegisters->MMCHS_PSTATE) & 0x00020000)!= 0x00020000) && (dwTimeout>0))

  003d8	e59f308c	 ldr         r3, [pc, #0x8C]
  003dc	e5933000	 ldr         r3, [r3]
  003e0	e2833f49	 add         r3, r3, #0x49, 30
  003e4	e5933000	 ldr         r3, [r3]
  003e8	e2033802	 and         r3, r3, #2, 16
  003ec	e3530802	 cmp         r3, #2, 16
  003f0	0a000006	 beq         |$LN2@SdhcHandle|
  003f4	e59d3004	 ldr         r3, [sp, #4]
  003f8	e3530000	 cmp         r3, #0
  003fc	9a000003	 bls         |$LN2@SdhcHandle|

; 804  :     {
; 805  :         dwTimeout--;

  00400	e59d3004	 ldr         r3, [sp, #4]
  00404	e2433001	 sub         r3, r3, #1
  00408	e58d3004	 str         r3, [sp, #4]

; 806  :     }

  0040c	eafffff1	 b           |$LN3@SdhcHandle|
  00410		 |$LN2@SdhcHandle|

; 807  : 
; 808  :     OUTREG32(&m_pbRegisters->MMCHS_CON, 0x01 << 7); // CDP

  00410	e59f3054	 ldr         r3, [pc, #0x54]
  00414	e5933000	 ldr         r3, [r3]
  00418	e283202c	 add         r2, r3, #0x2C
  0041c	e3a03080	 mov         r3, #0x80
  00420	e5823000	 str         r3, [r2]

; 809  : 
; 810  :     SetSDVSVoltage();

  00424	eb000000	 bl          SetSDVSVoltage

; 811  : 
; 812  :     SdhcSetClockRate(&dwClockRate);

  00428	e28d0000	 add         r0, sp, #0
  0042c	eb000000	 bl          SdhcSetClockRate

; 813  : #ifndef MMCHS1_LOW_VOLTAGE
; 814  :     if (m_dwSlot == MMCSLOT_1 && m_dwCPURev == 3)

  00430	e59f3030	 ldr         r3, [pc, #0x30]
  00434	e5933000	 ldr         r3, [r3]
  00438	e3530001	 cmp         r3, #1
  0043c	1a000004	 bne         |$LN1@SdhcHandle|
  00440	e59f301c	 ldr         r3, [pc, #0x1C]
  00444	e5933000	 ldr         r3, [r3]
  00448	e3530003	 cmp         r3, #3
  0044c	1a000000	 bne         |$LN1@SdhcHandle|

; 815  :     {
; 816  :         SendInitSequence();

  00450	eb000000	 bl          SendInitSequence
  00454		 |$LN1@SdhcHandle|

; 817  :     }
; 818  : #endif
; 819  :     EnableSDHCInterrupts();

  00454	eb000000	 bl          EnableSDHCInterrupts

; 820  : 
; 821  :     // indicate device arrival
; 822  :     //IndicateSlotStateChange(DeviceInserted);
; 823  : }

  00458	e28dd008	 add         sp, sp, #8
  0045c	e49de004	 ldr         lr, [sp], #4
  00460	e12fff1e	 bx          lr
  00464		 |$LN9@SdhcHandle|
  00464		 |$LN10@SdhcHandle|
  00464	00000000	 DCD         |m_dwCPURev|
  00468		 |$LN11@SdhcHandle|
  00468	00000000	 DCD         |m_dwSlot|
  0046c		 |$LN12@SdhcHandle|
  0046c	00000000	 DCD         |m_pbRegisters|
  00470		 |$LN13@SdhcHandle|
  00470	00000000	 DCD         |m_dwSDIOCard|
  00474		 |$LN14@SdhcHandle|
  00474	00000000	 DCD         |m_fCardPresent|
  00478		 |$M44703|

			 ENDP  ; |SdhcHandleInsertion|


  00028			 AREA	 |.pdata|, PDATA
|$T44716| DCD	|$LN5@SystemCloc|
	DCD	0x40000100
; Function compile flags: /Odtp

  00478			 AREA	 |.text|, CODE, ARM

  00478		 |SystemClockOn| PROC

; 192  : {

  00478		 |$LN5@SystemCloc|
  00478		 |$M44713|

; 193  : }

  00478	e12fff1e	 bx          lr
  0047c		 |$M44714|

			 ENDP  ; |SystemClockOn|

	EXPORT	|??_C@_1CI@EBIAGFPN@?$AAM?$AAM?$AAC?$AA?5?$AAR?$AAe?$AAs?$AAe?$AAt?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|NKDbgPrintfW|
	IMPORT	|dpCurSettings|
	IMPORT	|OALGetTickCount|

  00030			 AREA	 |.pdata|, PDATA
|$T44729| DCD	|$LN17@MmcReset|
	DCD	0x40006704

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@EBIAGFPN@?$AAM?$AAM?$AAC?$AA?5?$AAR?$AAe?$AAs?$AAe?$AAt?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$AN?$AA?6?$AA?$AA@| DCB "M"
	DCB	0x0, "M", 0x0, "C", 0x0, " ", 0x0, "R", 0x0, "e", 0x0, "s"
	DCB	0x0, "e", 0x0, "t", 0x0, " ", 0x0, "t", 0x0, "i", 0x0, "m"
	DCB	0x0, "e", 0x0, "o", 0x0, "u", 0x0, "t", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  0047c			 AREA	 |.text|, CODE, ARM

  0047c		 |MmcReset| PROC

; 410  : {

  0047c		 |$LN17@MmcReset|
  0047c	e1a0c00d	 mov         r12, sp
  00480	e92d0001	 stmdb       sp!, {r0}
  00484	e92d5000	 stmdb       sp!, {r12, lr}
  00488	e24dd028	 sub         sp, sp, #0x28
  0048c		 |$M44726|

; 411  :     DWORD               dwCurrentTickCount;
; 412  :     DWORD               dwTimeout;
; 413  :     DWORD               dwCountStart;
; 414  :     BOOL                fTimeoutOverflow = FALSE;

  0048c	e3a03000	 mov         r3, #0
  00490	e58d3000	 str         r3, [sp]

; 415  : 
; 416  :     OALMSGX(1, (TEXT("MMC Reset\r\n")));
; 417  : 
; 418  :     dwResetBits &= (MMCHS_SYSCTL_SRA | MMCHS_SYSCTL_SRC | MMCHS_SYSCTL_SRD);

  00494	e59d3030	 ldr         r3, [sp, #0x30]
  00498	e2033407	 and         r3, r3, #7, 8
  0049c	e58d3030	 str         r3, [sp, #0x30]

; 419  : 
; 420  :     // Reset the controller
; 421  :     SETREG32(&m_pbRegisters->MMCHS_SYSCTL, dwResetBits);

  004a0	e59f3160	 ldr         r3, [pc, #0x160]
  004a4	e5933000	 ldr         r3, [r3]
  004a8	e2833f4b	 add         r3, r3, #0x4B, 30
  004ac	e5932000	 ldr         r2, [r3]
  004b0	e59d3030	 ldr         r3, [sp, #0x30]
  004b4	e1822003	 orr         r2, r2, r3
  004b8	e59f3148	 ldr         r3, [pc, #0x148]
  004bc	e5933000	 ldr         r3, [r3]
  004c0	e2833f4b	 add         r3, r3, #0x4B, 30
  004c4	e5832000	 str         r2, [r3]

; 422  : 
; 423  :     // calculate timeout conditions
; 424  :     dwCountStart = OALGetTickCount();

  004c8	eb000000	 bl          OALGetTickCount
  004cc	e58d0010	 str         r0, [sp, #0x10]
  004d0	e59d3010	 ldr         r3, [sp, #0x10]
  004d4	e58d3004	 str         r3, [sp, #4]

; 425  : 
; 426  :     dwTimeout = dwCountStart + m_dwMaxTimeout;

  004d8	e59d2004	 ldr         r2, [sp, #4]
  004dc	e59f3130	 ldr         r3, [pc, #0x130]
  004e0	e5933000	 ldr         r3, [r3]
  004e4	e0823003	 add         r3, r2, r3
  004e8	e58d300c	 str         r3, [sp, #0xC]

; 427  :     if ( dwTimeout < dwCountStart )

  004ec	e59d200c	 ldr         r2, [sp, #0xC]
  004f0	e59d3004	 ldr         r3, [sp, #4]
  004f4	e1520003	 cmp         r2, r3
  004f8	2a000001	 bcs         |$LN4@MmcReset|

; 428  :         fTimeoutOverflow = TRUE;

  004fc	e3a03001	 mov         r3, #1
  00500	e58d3000	 str         r3, [sp]
  00504		 |$LN4@MmcReset|
  00504		 |$LN3@MmcReset|

; 429  : 
; 430  :     // Verify that reset has completed.
; 431  :     while ((INREG32(&m_pbRegisters->MMCHS_SYSCTL) & dwResetBits))

  00504	e59f30fc	 ldr         r3, [pc, #0xFC]
  00508	e5933000	 ldr         r3, [r3]
  0050c	e2833f4b	 add         r3, r3, #0x4B, 30
  00510	e5932000	 ldr         r2, [r3]
  00514	e59d3030	 ldr         r3, [sp, #0x30]
  00518	e1120003	 tst         r2, r3
  0051c	0a000031	 beq         |$LN2@MmcReset|

; 432  :     {
; 433  :         // check for a timeout
; 434  :         dwCurrentTickCount = OALGetTickCount();

  00520	eb000000	 bl          OALGetTickCount
  00524	e58d0014	 str         r0, [sp, #0x14]
  00528	e59d3014	 ldr         r3, [sp, #0x14]
  0052c	e58d3008	 str         r3, [sp, #8]

; 435  :         if ( fTimeoutOverflow ? ( dwTimeout < dwCurrentTickCount && dwCurrentTickCount < dwCountStart )
; 436  :             : ( dwTimeout < dwCurrentTickCount ) )

  00530	e59d3000	 ldr         r3, [sp]
  00534	e3530000	 cmp         r3, #0
  00538	0a00000f	 beq         |$LN11@MmcReset|
  0053c	e59d200c	 ldr         r2, [sp, #0xC]
  00540	e59d3008	 ldr         r3, [sp, #8]
  00544	e1520003	 cmp         r2, r3
  00548	2a000006	 bcs         |$LN7@MmcReset|
  0054c	e59d2008	 ldr         r2, [sp, #8]
  00550	e59d3004	 ldr         r3, [sp, #4]
  00554	e1520003	 cmp         r2, r3
  00558	2a000002	 bcs         |$LN7@MmcReset|
  0055c	e3a03001	 mov         r3, #1
  00560	e58d3018	 str         r3, [sp, #0x18]
  00564	ea000001	 b           |$LN10@MmcReset|
  00568		 |$LN7@MmcReset|
  00568	e3a03000	 mov         r3, #0
  0056c	e58d3018	 str         r3, [sp, #0x18]
  00570		 |$LN10@MmcReset|
  00570	e59d3018	 ldr         r3, [sp, #0x18]
  00574	e58d301c	 str         r3, [sp, #0x1C]
  00578	ea00000a	 b           |$LN12@MmcReset|
  0057c		 |$LN11@MmcReset|
  0057c	e59d200c	 ldr         r2, [sp, #0xC]
  00580	e59d3008	 ldr         r3, [sp, #8]
  00584	e1520003	 cmp         r2, r3
  00588	2a000002	 bcs         |$LN8@MmcReset|
  0058c	e3a03001	 mov         r3, #1
  00590	e58d3020	 str         r3, [sp, #0x20]
  00594	ea000001	 b           |$LN9@MmcReset|
  00598		 |$LN8@MmcReset|
  00598	e3a03000	 mov         r3, #0
  0059c	e58d3020	 str         r3, [sp, #0x20]
  005a0		 |$LN9@MmcReset|
  005a0	e59d3020	 ldr         r3, [sp, #0x20]
  005a4	e58d301c	 str         r3, [sp, #0x1C]
  005a8		 |$LN12@MmcReset|
  005a8	e59d301c	 ldr         r3, [sp, #0x1C]
  005ac	e3530000	 cmp         r3, #0
  005b0	0a00000b	 beq         |$LN1@MmcReset|

; 437  :         {
; 438  :             OALMSG(OAL_ERROR, (TEXT("MMC Reset timeout\r\n")));

  005b4	e59f3054	 ldr         r3, [pc, #0x54]
  005b8	e5933440	 ldr         r3, [r3, #0x440]
  005bc	e3130001	 tst         r3, #1
  005c0	0a000004	 beq         |$LN13@MmcReset|
  005c4	e59f0040	 ldr         r0, [pc, #0x40]
  005c8	eb000000	 bl          NKDbgPrintfW
  005cc	e3a03001	 mov         r3, #1
  005d0	e58d3024	 str         r3, [sp, #0x24]
  005d4	ea000001	 b           |$LN14@MmcReset|
  005d8		 |$LN13@MmcReset|
  005d8	e3a03000	 mov         r3, #0
  005dc	e58d3024	 str         r3, [sp, #0x24]
  005e0		 |$LN14@MmcReset|

; 439  :             break;

  005e0	ea000000	 b           |$LN2@MmcReset|
  005e4		 |$LN1@MmcReset|

; 440  :         }
; 441  :     }

  005e4	eaffffc6	 b           |$LN3@MmcReset|
  005e8		 |$LN2@MmcReset|

; 442  :     // enable autoidle, disable wakeup, enable smart-idle, ClockActivity (interface and functional clocks may be switched off)
; 443  :     OUTREG32(&m_pbRegisters->MMCHS_SYSCONFIG, MMCHS_SYSCONFIG_AUTOIDLE | MMCHS_SYSCONFIG_SIDLEMODE(SIDLE_SMART));

  005e8	e59f3018	 ldr         r3, [pc, #0x18]
  005ec	e5933000	 ldr         r3, [r3]
  005f0	e2832010	 add         r2, r3, #0x10
  005f4	e3a03011	 mov         r3, #0x11
  005f8	e5823000	 str         r3, [r2]

; 444  : }

  005fc	e28dd028	 add         sp, sp, #0x28
  00600	e89d6000	 ldmia       sp, {sp, lr}
  00604	e12fff1e	 bx          lr
  00608		 |$LN18@MmcReset|
  00608		 |$LN19@MmcReset|
  00608	00000000	 DCD         |m_pbRegisters|
  0060c		 |$LN20@MmcReset|
  0060c	00000000	 DCD         |??_C@_1CI@EBIAGFPN@?$AAM?$AAM?$AAC?$AA?5?$AAR?$AAe?$AAs?$AAe?$AAt?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$AN?$AA?6?$AA?$AA@|
  00610		 |$LN21@MmcReset|
  00610	00000000	 DCD         |dpCurSettings|
  00614		 |$LN22@MmcReset|
  00614	00000000	 DCD         |m_dwMaxTimeout|
  00618		 |$M44727|

			 ENDP  ; |MmcReset|


  00038			 AREA	 |.pdata|, PDATA
|$T44739| DCD	|$LN5@EnableSDHC|
	DCD	0x40000e00
; Function compile flags: /Odtp

  00618			 AREA	 |.text|, CODE, ARM

  00618		 |EnableSDHCInterrupts| PROC

; 470  : {

  00618		 |$LN5@EnableSDHC|
  00618		 |$M44736|

; 471  :     OUTREG32(&m_pbRegisters->MMCHS_ISE, MMC_INT_EN_MASK);

  00618	e59f302c	 ldr         r3, [pc, #0x2C]
  0061c	e5933000	 ldr         r3, [r3]
  00620	e2832f4e	 add         r2, r3, #0x4E, 30
  00624	e3a03833	 mov         r3, #0x33, 16
  00628	e3833033	 orr         r3, r3, #0x33
  0062c	e5823000	 str         r3, [r2]

; 472  :     OUTREG32(&m_pbRegisters->MMCHS_IE,  MMC_INT_EN_MASK);

  00630	e59f3014	 ldr         r3, [pc, #0x14]
  00634	e5933000	 ldr         r3, [r3]
  00638	e2832f4d	 add         r2, r3, #0x4D, 30
  0063c	e3a03833	 mov         r3, #0x33, 16
  00640	e3833033	 orr         r3, r3, #0x33
  00644	e5823000	 str         r3, [r2]

; 473  : }

  00648	e12fff1e	 bx          lr
  0064c		 |$LN6@EnableSDHC|
  0064c		 |$LN7@EnableSDHC|
  0064c	00000000	 DCD         |m_pbRegisters|
  00650		 |$M44737|

			 ENDP  ; |EnableSDHCInterrupts|

	EXPORT	|??_C@_1CI@DLLABNKH@?$AAS?$AAD?$AAH?$AAC?$AA?5?$AAb?$AAa?$AAd?$AA?5?$AAs?$AAl?$AAo?$AAt?$AA?5?$AAn?$AAu?$AAm?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00040			 AREA	 |.pdata|, PDATA
|$T44748| DCD	|$LN23@SetSDVSVol|
	DCD	0x40008502

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@DLLABNKH@?$AAS?$AAD?$AAH?$AAC?$AA?5?$AAb?$AAa?$AAd?$AA?5?$AAs?$AAl?$AAo?$AAt?$AA?5?$AAn?$AAu?$AAm?$AA?$AN?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "D", 0x0, "H", 0x0, "C", 0x0, " ", 0x0, "b", 0x0, "a"
	DCB	0x0, "d", 0x0, " ", 0x0, "s", 0x0, "l", 0x0, "o", 0x0, "t"
	DCB	0x0, " ", 0x0, "n", 0x0, "u", 0x0, "m", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  00650			 AREA	 |.text|, CODE, ARM

  00650		 |SetSDVSVoltage| PROC

; 539  : {

  00650		 |$LN23@SetSDVSVol|
  00650	e52de004	 str         lr, [sp, #-4]!
  00654	e24dd00c	 sub         sp, sp, #0xC
  00658		 |$M44745|

; 540  :     UINT32 val1, val2;
; 541  : 
; 542  :     if ( m_dwSlot == MMCSLOT_1 )

  00658	e59f3200	 ldr         r3, [pc, #0x200]
  0065c	e5933000	 ldr         r3, [r3]
  00660	e3530001	 cmp         r3, #1
  00664	1a000033	 bne         |$LN16@SetSDVSVol|

; 543  :     {
; 544  :         if (m_dwCPURev == 1) // ES 1.0

  00668	e59f31ec	 ldr         r3, [pc, #0x1EC]
  0066c	e5933000	 ldr         r3, [r3]
  00670	e3530001	 cmp         r3, #1
  00674	1a000004	 bne         |$LN15@SetSDVSVol|

; 545  :         {
; 546  :           val1 = MMCHS_CAPA_VS30;

  00678	e3a03402	 mov         r3, #2, 8
  0067c	e58d3004	 str         r3, [sp, #4]

; 547  :           val2 = MMCHS_HCTL_SDVS_3V0;

  00680	e3a03b03	 mov         r3, #3, 22
  00684	e58d3000	 str         r3, [sp]
  00688	ea000015	 b           |$LN14@SetSDVSVol|
  0068c		 |$LN15@SetSDVSVol|

; 548  :         }
; 549  :         else if (m_dwCPURev == 2) // ES 2.0

  0068c	e59f31c8	 ldr         r3, [pc, #0x1C8]
  00690	e5933000	 ldr         r3, [r3]
  00694	e3530002	 cmp         r3, #2
  00698	1a000004	 bne         |$LN13@SetSDVSVol|

; 550  :         {
; 551  :           val1 = MMCHS_CAPA_VS18;

  0069c	e3a03301	 mov         r3, #1, 6
  006a0	e58d3004	 str         r3, [sp, #4]

; 552  :           val2 = MMCHS_HCTL_SDVS_1V8;

  006a4	e3a03c0a	 mov         r3, #0xA, 24
  006a8	e58d3000	 str         r3, [sp]
  006ac	ea00000c	 b           |$LN12@SetSDVSVol|
  006b0		 |$LN13@SetSDVSVol|

; 553  :         }
; 554  :         else if (m_dwCPURev == 3) // ES 2.1

  006b0	e59f31a4	 ldr         r3, [pc, #0x1A4]
  006b4	e5933000	 ldr         r3, [r3]
  006b8	e3530003	 cmp         r3, #3
  006bc	1a000004	 bne         |$LN11@SetSDVSVol|

; 555  :         {
; 556  : #ifdef MMCHS1_LOW_VOLTAGE
; 557  :           val1 = MMCHS_CAPA_VS18;
; 558  :           val2 = MMCHS_HCTL_SDVS_1V8;
; 559  : #else
; 560  :           val1 = MMCHS_CAPA_VS30;

  006c0	e3a03402	 mov         r3, #2, 8
  006c4	e58d3004	 str         r3, [sp, #4]

; 561  :           val2 = MMCHS_HCTL_SDVS_3V0;

  006c8	e3a03b03	 mov         r3, #3, 22
  006cc	e58d3000	 str         r3, [sp]

; 562  : #endif
; 563  :         }
; 564  :         else

  006d0	ea000003	 b           |$LN10@SetSDVSVol|
  006d4		 |$LN11@SetSDVSVol|

; 565  :         {
; 566  :           val1 = MMCHS_CAPA_VS30;

  006d4	e3a03402	 mov         r3, #2, 8
  006d8	e58d3004	 str         r3, [sp, #4]

; 567  :           val2 = MMCHS_HCTL_SDVS_3V0;

  006dc	e3a03b03	 mov         r3, #3, 22
  006e0	e58d3000	 str         r3, [sp]
  006e4		 |$LN10@SetSDVSVol|
  006e4		 |$LN12@SetSDVSVol|
  006e4		 |$LN14@SetSDVSVol|

; 568  :         }
; 569  : 
; 570  :         SETREG32(&m_pbRegisters->MMCHS_CAPA, val1);

  006e4	e59f316c	 ldr         r3, [pc, #0x16C]
  006e8	e5933000	 ldr         r3, [r3]
  006ec	e2833d05	 add         r3, r3, #5, 26
  006f0	e5932000	 ldr         r2, [r3]
  006f4	e59d3004	 ldr         r3, [sp, #4]
  006f8	e1822003	 orr         r2, r2, r3
  006fc	e59f3154	 ldr         r3, [pc, #0x154]
  00700	e5933000	 ldr         r3, [r3]
  00704	e2833d05	 add         r3, r3, #5, 26
  00708	e5832000	 str         r2, [r3]

; 571  :         SETREG32(&m_pbRegisters->MMCHS_HCTL, val2);

  0070c	e59f3144	 ldr         r3, [pc, #0x144]
  00710	e5933000	 ldr         r3, [r3]
  00714	e2833f4a	 add         r3, r3, #0x4A, 30
  00718	e5932000	 ldr         r2, [r3]
  0071c	e59d3000	 ldr         r3, [sp]
  00720	e1822003	 orr         r2, r2, r3
  00724	e59f312c	 ldr         r3, [pc, #0x12C]
  00728	e5933000	 ldr         r3, [r3]
  0072c	e2833f4a	 add         r3, r3, #0x4A, 30
  00730	e5832000	 str         r2, [r3]
  00734	ea000042	 b           |$LN9@SetSDVSVol|
  00738		 |$LN16@SetSDVSVol|

; 572  :     }
; 573  :     else if (m_dwSlot == MMCSLOT_2)

  00738	e59f3120	 ldr         r3, [pc, #0x120]
  0073c	e5933000	 ldr         r3, [r3]
  00740	e3530002	 cmp         r3, #2
  00744	1a000033	 bne         |$LN8@SetSDVSVol|

; 574  :     {
; 575  :         if (m_dwCPURev == 1) // ES 1.0

  00748	e59f310c	 ldr         r3, [pc, #0x10C]
  0074c	e5933000	 ldr         r3, [r3]
  00750	e3530001	 cmp         r3, #1
  00754	1a000004	 bne         |$LN7@SetSDVSVol|

; 576  :         {
; 577  :           val1 = MMCHS_CAPA_VS18;

  00758	e3a03301	 mov         r3, #1, 6
  0075c	e58d3004	 str         r3, [sp, #4]

; 578  :           val2 = MMCHS_HCTL_SDVS_1V8;

  00760	e3a03c0a	 mov         r3, #0xA, 24
  00764	e58d3000	 str         r3, [sp]
  00768	ea000015	 b           |$LN6@SetSDVSVol|
  0076c		 |$LN7@SetSDVSVol|

; 579  :         }
; 580  :         else if (m_dwCPURev == 2) // ES 2.0

  0076c	e59f30e8	 ldr         r3, [pc, #0xE8]
  00770	e5933000	 ldr         r3, [r3]
  00774	e3530002	 cmp         r3, #2
  00778	1a000004	 bne         |$LN5@SetSDVSVol|

; 581  :         {
; 582  :           val1 = MMCHS_CAPA_VS18;

  0077c	e3a03301	 mov         r3, #1, 6
  00780	e58d3004	 str         r3, [sp, #4]

; 583  :           val2 = MMCHS_HCTL_SDVS_1V8;

  00784	e3a03c0a	 mov         r3, #0xA, 24
  00788	e58d3000	 str         r3, [sp]
  0078c	ea00000c	 b           |$LN4@SetSDVSVol|
  00790		 |$LN5@SetSDVSVol|

; 584  :         }
; 585  :         else if (m_dwCPURev == 3) // ES 2.1

  00790	e59f30c4	 ldr         r3, [pc, #0xC4]
  00794	e5933000	 ldr         r3, [r3]
  00798	e3530003	 cmp         r3, #3
  0079c	1a000004	 bne         |$LN3@SetSDVSVol|

; 586  :         {
; 587  : #ifdef MMCHS2_LOW_VOLTAGE
; 588  :           val1 = MMCHS_CAPA_VS18;
; 589  :           val2 = MMCHS_HCTL_SDVS_1V8;
; 590  : #else
; 591  :           val1 = MMCHS_CAPA_VS30;

  007a0	e3a03402	 mov         r3, #2, 8
  007a4	e58d3004	 str         r3, [sp, #4]

; 592  :           val2 = MMCHS_HCTL_SDVS_3V0;

  007a8	e3a03b03	 mov         r3, #3, 22
  007ac	e58d3000	 str         r3, [sp]

; 593  : #endif
; 594  :         }
; 595  :         else

  007b0	ea000003	 b           |$LN2@SetSDVSVol|
  007b4		 |$LN3@SetSDVSVol|

; 596  :         {
; 597  :           val1 = MMCHS_CAPA_VS18;

  007b4	e3a03301	 mov         r3, #1, 6
  007b8	e58d3004	 str         r3, [sp, #4]

; 598  :           val2 = MMCHS_HCTL_SDVS_1V8;

  007bc	e3a03c0a	 mov         r3, #0xA, 24
  007c0	e58d3000	 str         r3, [sp]
  007c4		 |$LN2@SetSDVSVol|
  007c4		 |$LN4@SetSDVSVol|
  007c4		 |$LN6@SetSDVSVol|

; 599  :         }
; 600  :         SETREG32(&m_pbRegisters->MMCHS_CAPA, val1);

  007c4	e59f308c	 ldr         r3, [pc, #0x8C]
  007c8	e5933000	 ldr         r3, [r3]
  007cc	e2833d05	 add         r3, r3, #5, 26
  007d0	e5932000	 ldr         r2, [r3]
  007d4	e59d3004	 ldr         r3, [sp, #4]
  007d8	e1822003	 orr         r2, r2, r3
  007dc	e59f3074	 ldr         r3, [pc, #0x74]
  007e0	e5933000	 ldr         r3, [r3]
  007e4	e2833d05	 add         r3, r3, #5, 26
  007e8	e5832000	 str         r2, [r3]

; 601  :         SETREG32(&m_pbRegisters->MMCHS_HCTL, val2);

  007ec	e59f3064	 ldr         r3, [pc, #0x64]
  007f0	e5933000	 ldr         r3, [r3]
  007f4	e2833f4a	 add         r3, r3, #0x4A, 30
  007f8	e5932000	 ldr         r2, [r3]
  007fc	e59d3000	 ldr         r3, [sp]
  00800	e1822003	 orr         r2, r2, r3
  00804	e59f304c	 ldr         r3, [pc, #0x4C]
  00808	e5933000	 ldr         r3, [r3]
  0080c	e2833f4a	 add         r3, r3, #0x4A, 30
  00810	e5832000	 str         r2, [r3]

; 602  :     }
; 603  :     else

  00814	ea00000a	 b           |$LN1@SetSDVSVol|
  00818		 |$LN8@SetSDVSVol|

; 604  :     {
; 605  :         OALMSG(OAL_ERROR, (L"SDHC bad slot num\r\n"));

  00818	e59f3034	 ldr         r3, [pc, #0x34]
  0081c	e5933440	 ldr         r3, [r3, #0x440]
  00820	e3130001	 tst         r3, #1
  00824	0a000004	 beq         |$LN19@SetSDVSVol|
  00828	e59f0020	 ldr         r0, [pc, #0x20]
  0082c	eb000000	 bl          NKDbgPrintfW
  00830	e3a03001	 mov         r3, #1
  00834	e58d3008	 str         r3, [sp, #8]
  00838	ea000001	 b           |$LN20@SetSDVSVol|
  0083c		 |$LN19@SetSDVSVol|
  0083c	e3a03000	 mov         r3, #0
  00840	e58d3008	 str         r3, [sp, #8]
  00844		 |$LN20@SetSDVSVol|
  00844		 |$LN1@SetSDVSVol|
  00844		 |$LN9@SetSDVSVol|

; 606  :         return;
; 607  :     }
; 608  : }

  00844	e28dd00c	 add         sp, sp, #0xC
  00848	e49de004	 ldr         lr, [sp], #4
  0084c	e12fff1e	 bx          lr
  00850		 |$LN24@SetSDVSVol|
  00850		 |$LN25@SetSDVSVol|
  00850	00000000	 DCD         |??_C@_1CI@DLLABNKH@?$AAS?$AAD?$AAH?$AAC?$AA?5?$AAb?$AAa?$AAd?$AA?5?$AAs?$AAl?$AAo?$AAt?$AA?5?$AAn?$AAu?$AAm?$AA?$AN?$AA?6?$AA?$AA@|
  00854		 |$LN26@SetSDVSVol|
  00854	00000000	 DCD         |dpCurSettings|
  00858		 |$LN27@SetSDVSVol|
  00858	00000000	 DCD         |m_pbRegisters|
  0085c		 |$LN28@SetSDVSVol|
  0085c	00000000	 DCD         |m_dwCPURev|
  00860		 |$LN29@SetSDVSVol|
  00860	00000000	 DCD         |m_dwSlot|
  00864		 |$M44746|

			 ENDP  ; |SetSDVSVoltage|


  00048			 AREA	 |.pdata|, PDATA
|$T44759| DCD	|$LN8@SendInitSe|
	DCD	0x40003002
; Function compile flags: /Odtp

  00864			 AREA	 |.text|, CODE, ARM

  00864		 |SendInitSequence| PROC

; 669  : {

  00864		 |$LN8@SendInitSe|
  00864	e52de004	 str         lr, [sp, #-4]!
  00868	e24dd004	 sub         sp, sp, #4
  0086c		 |$M44756|

; 670  :     DWORD dwCount;
; 671  : 
; 672  :     OUTREG32(&m_pbRegisters->MMCHS_IE,  0xFFFFFEFF);

  0086c	e59f30ac	 ldr         r3, [pc, #0xAC]
  00870	e5933000	 ldr         r3, [r3]
  00874	e2832f4d	 add         r2, r3, #0x4D, 30
  00878	e3e03c01	 mvn         r3, #1, 24
  0087c	e5823000	 str         r3, [r2]

; 673  :     SETREG32(&m_pbRegisters->MMCHS_CON, MMCHS_CON_INIT);

  00880	e59f3098	 ldr         r3, [pc, #0x98]
  00884	e5933000	 ldr         r3, [r3]
  00888	e283302c	 add         r3, r3, #0x2C
  0088c	e5933000	 ldr         r3, [r3]
  00890	e3832002	 orr         r2, r3, #2
  00894	e59f3084	 ldr         r3, [pc, #0x84]
  00898	e5933000	 ldr         r3, [r3]
  0089c	e283302c	 add         r3, r3, #0x2C
  008a0	e5832000	 str         r2, [r3]

; 674  : 
; 675  :     for (dwCount = 0; dwCount < 10; dwCount ++)

  008a4	e3a03000	 mov         r3, #0
  008a8	e58d3000	 str         r3, [sp]
  008ac	ea000002	 b           |$LN3@SendInitSe|
  008b0		 |$LN2@SendInitSe|
  008b0	e59d3000	 ldr         r3, [sp]
  008b4	e2833001	 add         r3, r3, #1
  008b8	e58d3000	 str         r3, [sp]
  008bc		 |$LN3@SendInitSe|
  008bc	e59d3000	 ldr         r3, [sp]
  008c0	e353000a	 cmp         r3, #0xA
  008c4	2a000003	 bcs         |$LN1@SendInitSe|

; 676  :     {
; 677  :         SendCmdNoResp(SD_CMD_GO_IDLE_STATE, 0xFFFFFFFF);

  008c8	e3e01000	 mvn         r1, #0
  008cc	e3a00000	 mov         r0, #0
  008d0	eb000000	 bl          SendCmdNoResp

; 678  :     }

  008d4	eafffff5	 b           |$LN2@SendInitSe|
  008d8		 |$LN1@SendInitSe|

; 679  :     OUTREG32(&m_pbRegisters->MMCHS_STAT, 0xFFFFFFFF);

  008d8	e59f3040	 ldr         r3, [pc, #0x40]
  008dc	e5933000	 ldr         r3, [r3]
  008e0	e2832e13	 add         r2, r3, #0x13, 28
  008e4	e3e03000	 mvn         r3, #0
  008e8	e5823000	 str         r3, [r2]

; 680  :     CLRREG32(&m_pbRegisters->MMCHS_CON, MMCHS_CON_INIT);

  008ec	e59f302c	 ldr         r3, [pc, #0x2C]
  008f0	e5933000	 ldr         r3, [r3]
  008f4	e283302c	 add         r3, r3, #0x2C
  008f8	e5932000	 ldr         r2, [r3]
  008fc	e3e03002	 mvn         r3, #2
  00900	e0022003	 and         r2, r2, r3
  00904	e59f3014	 ldr         r3, [pc, #0x14]
  00908	e5933000	 ldr         r3, [r3]
  0090c	e283302c	 add         r3, r3, #0x2C
  00910	e5832000	 str         r2, [r3]

; 681  : }

  00914	e28dd004	 add         sp, sp, #4
  00918	e49de004	 ldr         lr, [sp], #4
  0091c	e12fff1e	 bx          lr
  00920		 |$LN9@SendInitSe|
  00920		 |$LN10@SendInitSe|
  00920	00000000	 DCD         |m_pbRegisters|
  00924		 |$M44757|

			 ENDP  ; |SendInitSequence|


  00050			 AREA	 |.pdata|, PDATA
|$T44767| DCD	|$LN10@SendCmdNoR|
	DCD	0x40005704
; Function compile flags: /Odtp

  00924			 AREA	 |.text|, CODE, ARM

  00924		 |SendCmdNoResp| PROC

; 632  : {

  00924		 |$LN10@SendCmdNoR|
  00924	e1a0c00d	 mov         r12, sp
  00928	e92d0003	 stmdb       sp!, {r0, r1}
  0092c	e92d5000	 stmdb       sp!, {r12, lr}
  00930	e24dd010	 sub         sp, sp, #0x10
  00934		 |$M44764|

; 633  :     DWORD MMC_CMD;
; 634  :     DWORD dwVal;
; 635  :     DWORD dwTimeout;
; 636  : 
; 637  :     OUTREG32(&m_pbRegisters->MMCHS_STAT, 0xFFFFFFFF);

  00934	e59f313c	 ldr         r3, [pc, #0x13C]
  00938	e5933000	 ldr         r3, [r3]
  0093c	e2832e13	 add         r2, r3, #0x13, 28
  00940	e3e03000	 mvn         r3, #0
  00944	e5823000	 str         r3, [r2]

; 638  :     dwTimeout = 80000;

  00948	e3a03b4e	 mov         r3, #0x4E, 22
  0094c	e3833080	 orr         r3, r3, #0x80
  00950	e58d3008	 str         r3, [sp, #8]
  00954		 |$LN5@SendCmdNoR|

; 639  :     while (((INREG32(&m_pbRegisters->MMCHS_PSTATE) & MMCHS_PSTAT_CMDI)) && (dwTimeout>0))

  00954	e59f311c	 ldr         r3, [pc, #0x11C]
  00958	e5933000	 ldr         r3, [r3]
  0095c	e2833f49	 add         r3, r3, #0x49, 30
  00960	e5933000	 ldr         r3, [r3]
  00964	e3130001	 tst         r3, #1
  00968	0a000006	 beq         |$LN4@SendCmdNoR|
  0096c	e59d3008	 ldr         r3, [sp, #8]
  00970	e3530000	 cmp         r3, #0
  00974	9a000003	 bls         |$LN4@SendCmdNoR|

; 640  :     {
; 641  :         dwTimeout--;

  00978	e59d3008	 ldr         r3, [sp, #8]
  0097c	e2433001	 sub         r3, r3, #1
  00980	e58d3008	 str         r3, [sp, #8]

; 642  :     }

  00984	eafffff2	 b           |$LN5@SendCmdNoR|
  00988		 |$LN4@SendCmdNoR|

; 643  : 
; 644  :     MMC_CMD = MMCHS_INDX(cmd);

  00988	e59d3018	 ldr         r3, [sp, #0x18]
  0098c	e1a03c03	 mov         r3, r3, lsl #24
  00990	e58d3004	 str         r3, [sp, #4]

; 645  :     MMC_CMD |= gwaCMD[cmd].flags;

  00994	e59d1018	 ldr         r1, [sp, #0x18]
  00998	e3a03008	 mov         r3, #8
  0099c	e0020391	 mul         r2, r1, r3
  009a0	e59f30d4	 ldr         r3, [pc, #0xD4]
  009a4	e0833002	 add         r3, r3, r2
  009a8	e2833004	 add         r3, r3, #4
  009ac	e59d2004	 ldr         r2, [sp, #4]
  009b0	e5933000	 ldr         r3, [r3]
  009b4	e1823003	 orr         r3, r2, r3
  009b8	e58d3004	 str         r3, [sp, #4]

; 646  : 
; 647  :     // Program the argument into the argument registers
; 648  :     OUTREG32(&m_pbRegisters->MMCHS_ARG, arg);

  009bc	e59f30b4	 ldr         r3, [pc, #0xB4]
  009c0	e5933000	 ldr         r3, [r3]
  009c4	e2832f42	 add         r2, r3, #0x42, 30
  009c8	e59d301c	 ldr         r3, [sp, #0x1C]
  009cc	e5823000	 str         r3, [r2]

; 649  :     // Issue the command.
; 650  :     OUTREG32(&m_pbRegisters->MMCHS_CMD, MMC_CMD);

  009d0	e59f30a0	 ldr         r3, [pc, #0xA0]
  009d4	e5933000	 ldr         r3, [r3]
  009d8	e2832f43	 add         r2, r3, #0x43, 30
  009dc	e59d3004	 ldr         r3, [sp, #4]
  009e0	e5823000	 str         r3, [r2]

; 651  : 
; 652  :     dwTimeout = 5000;

  009e4	e3a03c13	 mov         r3, #0x13, 24
  009e8	e3833088	 orr         r3, r3, #0x88
  009ec	e58d3008	 str         r3, [sp, #8]
  009f0		 |$LN3@SendCmdNoR|

; 653  :     while (dwTimeout > 0)

  009f0	e59d3008	 ldr         r3, [sp, #8]
  009f4	e3530000	 cmp         r3, #0
  009f8	9a00000e	 bls         |$LN2@SendCmdNoR|

; 654  :     {
; 655  :         dwTimeout --;

  009fc	e59d3008	 ldr         r3, [sp, #8]
  00a00	e2433001	 sub         r3, r3, #1
  00a04	e58d3008	 str         r3, [sp, #8]

; 656  :         dwVal = INREG32(&m_pbRegisters->MMCHS_STAT);

  00a08	e59f3068	 ldr         r3, [pc, #0x68]
  00a0c	e5933000	 ldr         r3, [r3]
  00a10	e2833e13	 add         r3, r3, #0x13, 28
  00a14	e5933000	 ldr         r3, [r3]
  00a18	e58d3000	 str         r3, [sp]

; 657  :         if (dwVal & (MMCHS_STAT_CC | MMCHS_STAT_CTO | MMCHS_STAT_CERR)) 

  00a1c	e59d2000	 ldr         r2, [sp]
  00a20	e3a03211	 mov         r3, #0x11, 4
  00a24	e3833801	 orr         r3, r3, #1, 16
  00a28	e1120003	 tst         r2, r3
  00a2c	0a000000	 beq         |$LN1@SendCmdNoR|

; 658  :             break;

  00a30	ea000000	 b           |$LN2@SendCmdNoR|
  00a34		 |$LN1@SendCmdNoR|

; 659  :     }

  00a34	eaffffed	 b           |$LN3@SendCmdNoR|
  00a38		 |$LN2@SendCmdNoR|

; 660  : 
; 661  :     dwVal = INREG32(&m_pbRegisters->MMCHS_STAT);

  00a38	e59f3038	 ldr         r3, [pc, #0x38]
  00a3c	e5933000	 ldr         r3, [r3]
  00a40	e2833e13	 add         r3, r3, #0x13, 28
  00a44	e5933000	 ldr         r3, [r3]
  00a48	e58d3000	 str         r3, [sp]

; 662  :     OUTREG32(&m_pbRegisters->MMCHS_STAT, dwVal);

  00a4c	e59f3024	 ldr         r3, [pc, #0x24]
  00a50	e5933000	 ldr         r3, [r3]
  00a54	e2832e13	 add         r2, r3, #0x13, 28
  00a58	e59d3000	 ldr         r3, [sp]
  00a5c	e5823000	 str         r3, [r2]

; 663  :     // always return 0 if no response needed
; 664  :     return SD_API_STATUS_SUCCESS;

  00a60	e3a03000	 mov         r3, #0
  00a64	e58d300c	 str         r3, [sp, #0xC]

; 665  : }

  00a68	e59d000c	 ldr         r0, [sp, #0xC]
  00a6c	e28dd010	 add         sp, sp, #0x10
  00a70	e89d6000	 ldmia       sp, {sp, lr}
  00a74	e12fff1e	 bx          lr
  00a78		 |$LN11@SendCmdNoR|
  00a78		 |$LN12@SendCmdNoR|
  00a78	00000000	 DCD         |m_pbRegisters|
  00a7c		 |$LN13@SendCmdNoR|
  00a7c	00000000	 DCD         |gwaCMD|
  00a80		 |$M44765|

			 ENDP  ; |SendCmdNoResp|

	EXPORT	|DumpRegisters|

  00058			 AREA	 |.pdata|, PDATA
|$T44775| DCD	|$LN5@DumpRegist|
	DCD	0x40000100
; Function compile flags: /Odtp

  00a80			 AREA	 |.text|, CODE, ARM

  00a80		 |DumpRegisters| PROC

; 829  : {

  00a80		 |$LN5@DumpRegist|
  00a80		 |$M44772|

; 830  :     OALMSGX(OAL_INFO, (TEXT("+DumpStdHCRegs-------------------------\r\n")));
; 831  :     OALMSGX(OAL_INFO, (TEXT("MMCHS_CMD 0x%X \r\n"), INREG32(&m_pbRegisters->MMCHS_CMD)    ));
; 832  :     OALMSGX(OAL_INFO, (TEXT("MMCHS_ARG 0x%X \r\n"), INREG32(&m_pbRegisters->MMCHS_ARG)  ));
; 833  :     OALMSGX(OAL_INFO, (TEXT("MMCHS_CON  0x%X \r\n"), INREG32(&m_pbRegisters->MMCHS_CON)   ));
; 834  :     OALMSGX(OAL_INFO, (TEXT("MMCHS_PWCNT  0x%X \r\n"), INREG32(&m_pbRegisters->MMCHS_PWCNT)   ));
; 835  :     OALMSGX(OAL_INFO, (TEXT("MMCHS_STAT 0x%X \r\n"), INREG32(&m_pbRegisters->MMCHS_STAT)  ));
; 836  :     OALMSGX(OAL_INFO, (TEXT("MMCHS_PSTATE 0x%X \r\n"), INREG32(&m_pbRegisters->MMCHS_PSTATE)  ));
; 837  :     OALMSGX(OAL_INFO, (TEXT("MMCHS_IE 0x%X \r\n"), INREG32(&m_pbRegisters->MMCHS_IE)  ));
; 838  :     OALMSGX(OAL_INFO, (TEXT("MMCHS_ISE 0x%X \r\n"), INREG32(&m_pbRegisters->MMCHS_ISE)  ));
; 839  :     OALMSGX(OAL_INFO, (TEXT("MMCHS_BLK 0x%X \r\n"), INREG32(&m_pbRegisters->MMCHS_BLK)  ));
; 840  :     OALMSGX(OAL_INFO, (TEXT("MMCHS_REV 0x%X \r\n"), INREG32(&m_pbRegisters->MMCHS_REV)    ));
; 841  :     OALMSGX(OAL_INFO, (TEXT("MMCHS_RSP10 0x%X \r\n"), INREG32(&m_pbRegisters->MMCHS_RSP10)  ));
; 842  :     OALMSGX(OAL_INFO, (TEXT("MMCHS_RSP32 0x%X \r\n"), INREG32(&m_pbRegisters->MMCHS_RSP32)  ));
; 843  :     OALMSGX(OAL_INFO, (TEXT("MMCHS_RSP54 0x%X \r\n"), INREG32(&m_pbRegisters->MMCHS_RSP54)  ));
; 844  :     OALMSGX(OAL_INFO, (TEXT("MMCHS_RSP76 0x%X \r\n"), INREG32(&m_pbRegisters->MMCHS_RSP76)  ));
; 845  :     OALMSGX(OAL_INFO, (TEXT("MMCHS_HCTL 0x%X \r\n"), INREG32(&m_pbRegisters->MMCHS_HCTL)  ));
; 846  :     OALMSGX(OAL_INFO, (TEXT("MMCHS_SYSCTL 0x%X \r\n"), INREG32(&m_pbRegisters->MMCHS_SYSCTL)  ));
; 847  :     OALMSGX(OAL_INFO, (TEXT("MMCHS_SYSCONFIG 0x%X \r\n"), INREG32(&m_pbRegisters->MMCHS_SYSCONFIG) ));
; 848  :     OALMSGX(OAL_INFO, (TEXT("MMCHS_CAPA 0x%X \r\n"), INREG32(&m_pbRegisters->MMCHS_CAPA) ));
; 849  :     OALMSGX(OAL_INFO, (TEXT("MMCHS_CUR_CAPA 0x%X \r\n"), INREG32(&m_pbRegisters->MMCHS_CUR_CAPA) ));
; 850  :     OALMSGX(OAL_INFO, (TEXT("-DumpStdHCRegs-------------------------\r\n")));
; 851  : }

  00a80	e12fff1e	 bx          lr
  00a84		 |$M44773|

			 ENDP  ; |DumpRegisters|

	EXPORT	|SdhcControllerIstThread|

  00060			 AREA	 |.pdata|, PDATA
|$T44781| DCD	|$LN6@SdhcContro|
	DCD	0x40002204
; Function compile flags: /Odtp

  00a84			 AREA	 |.text|, CODE, ARM

  00a84		 |SdhcControllerIstThread| PROC

; 864  : {

  00a84		 |$LN6@SdhcContro|
  00a84	e1a0c00d	 mov         r12, sp
  00a88	e92d0001	 stmdb       sp!, {r0}
  00a8c	e92d5000	 stmdb       sp!, {r12, lr}
  00a90	e24dd014	 sub         sp, sp, #0x14
  00a94		 |$M44778|

; 865  :     DWORD dwStat;
; 866  :     SD_API_STATUS Status = SD_API_STATUS_PENDING;

  00a94	e3a03001	 mov         r3, #1
  00a98	e58d3004	 str         r3, [sp, #4]

; 867  :     
; 868  :     // ???
; 869  :     //UpdateSystemClock(TRUE);
; 870  : 
; 871  :     // check for interrupt pending
; 872  :     dwStat = Read_MMC_STAT();

  00a9c	eb000000	 bl          Read_MMC_STAT
  00aa0	e58d000c	 str         r0, [sp, #0xC]
  00aa4	e59d300c	 ldr         r3, [sp, #0xC]
  00aa8	e58d3000	 str         r3, [sp]

; 873  :     dwStat &= INREG32(&m_pbRegisters->MMCHS_IE);

  00aac	e59f3054	 ldr         r3, [pc, #0x54]
  00ab0	e5933000	 ldr         r3, [r3]
  00ab4	e2833f4d	 add         r3, r3, #0x4D, 30
  00ab8	e5932000	 ldr         r2, [r3]
  00abc	e59d3000	 ldr         r3, [sp]
  00ac0	e0033002	 and         r3, r3, r2
  00ac4	e58d3000	 str         r3, [sp]

; 874  :     if ( dwStat & (MMCHS_STAT_CC|MMCHS_STAT_CERR|MMCHS_STAT_CCRC|MMCHS_STAT_CTO|MMCHS_STAT_DTO|MMCHS_STAT_DCRC) )

  00ac8	e59d2000	 ldr         r2, [sp]
  00acc	e3a03211	 mov         r3, #0x11, 4
  00ad0	e3833833	 orr         r3, r3, #0x33, 16
  00ad4	e1120003	 tst         r2, r3
  00ad8	0a000004	 beq         |$LN1@SdhcContro|

; 875  :     {
; 876  :         Status = CommandCompleteHandler(pRequest);

  00adc	e59d001c	 ldr         r0, [sp, #0x1C]
  00ae0	eb000000	 bl          CommandCompleteHandler
  00ae4	e58d0010	 str         r0, [sp, #0x10]
  00ae8	e59d3010	 ldr         r3, [sp, #0x10]
  00aec	e58d3004	 str         r3, [sp, #4]
  00af0		 |$LN1@SdhcContro|

; 877  :     }
; 878  : 
; 879  :     return Status;

  00af0	e59d3004	 ldr         r3, [sp, #4]
  00af4	e58d3008	 str         r3, [sp, #8]

; 880  : }

  00af8	e59d0008	 ldr         r0, [sp, #8]
  00afc	e28dd014	 add         sp, sp, #0x14
  00b00	e89d6000	 ldmia       sp, {sp, lr}
  00b04	e12fff1e	 bx          lr
  00b08		 |$LN7@SdhcContro|
  00b08		 |$LN8@SdhcContro|
  00b08	00000000	 DCD         |m_pbRegisters|
  00b0c		 |$M44779|

			 ENDP  ; |SdhcControllerIstThread|


  00068			 AREA	 |.pdata|, PDATA
|$T44789| DCD	|$LN5@Read_MMC_S|
	DCD	0x40000c01
; Function compile flags: /Odtp

  00b0c			 AREA	 |.text|, CODE, ARM

  00b0c		 |Read_MMC_STAT| PROC

; 392  : {

  00b0c		 |$LN5@Read_MMC_S|
  00b0c	e24dd008	 sub         sp, sp, #8
  00b10		 |$M44786|

; 393  :     DWORD dwVal;
; 394  :     dwVal = INREG32(&m_pbRegisters->MMCHS_STAT);

  00b10	e59f3020	 ldr         r3, [pc, #0x20]
  00b14	e5933000	 ldr         r3, [r3]
  00b18	e2833e13	 add         r3, r3, #0x13, 28
  00b1c	e5933000	 ldr         r3, [r3]
  00b20	e58d3000	 str         r3, [sp]

; 395  :     return dwVal;

  00b24	e59d3000	 ldr         r3, [sp]
  00b28	e58d3004	 str         r3, [sp, #4]

; 396  : }

  00b2c	e59d0004	 ldr         r0, [sp, #4]
  00b30	e28dd008	 add         sp, sp, #8
  00b34	e12fff1e	 bx          lr
  00b38		 |$LN6@Read_MMC_S|
  00b38		 |$LN7@Read_MMC_S|
  00b38	00000000	 DCD         |m_pbRegisters|
  00b3c		 |$M44787|

			 ENDP  ; |Read_MMC_STAT|

	EXPORT	|SdhcInitialize|

  00070			 AREA	 |.pdata|, PDATA
|$T44797| DCD	|$LN5@SdhcInitia|
	DCD	0x40001102
; Function compile flags: /Odtp

  00b3c			 AREA	 |.text|, CODE, ARM

  00b3c		 |SdhcInitialize| PROC

; 891  : {

  00b3c		 |$LN5@SdhcInitia|
  00b3c	e52de004	 str         lr, [sp, #-4]!
  00b40	e24dd008	 sub         sp, sp, #8
  00b44		 |$M44794|

; 892  :     SD_API_STATUS status = SD_API_STATUS_INSUFFICIENT_RESOURCES; // intermediate status

  00b44	e3a0313b	 mov         r3, #0x3B, 2
  00b48	e58d3000	 str         r3, [sp]

; 893  : 
; 894  :     OALMSGX(1, (TEXT("SDHC init\r\n")));
; 895  : 
; 896  :     SdhcControllerInit();

  00b4c	eb000000	 bl          SdhcControllerInit

; 897  : 
; 898  :     m_fInitialized = TRUE;

  00b50	e59f2024	 ldr         r2, [pc, #0x24]
  00b54	e3a03001	 mov         r3, #1
  00b58	e5823000	 str         r3, [r2]

; 899  : 
; 900  :     status = SD_API_STATUS_SUCCESS;

  00b5c	e3a03000	 mov         r3, #0
  00b60	e58d3000	 str         r3, [sp]

; 901  : 
; 902  :     return status;

  00b64	e59d3000	 ldr         r3, [sp]
  00b68	e58d3004	 str         r3, [sp, #4]

; 903  : }

  00b6c	e59d0004	 ldr         r0, [sp, #4]
  00b70	e28dd008	 add         sp, sp, #8
  00b74	e49de004	 ldr         lr, [sp], #4
  00b78	e12fff1e	 bx          lr
  00b7c		 |$LN6@SdhcInitia|
  00b7c		 |$LN7@SdhcInitia|
  00b7c	00000000	 DCD         |m_fInitialized|
  00b80		 |$M44795|

			 ENDP  ; |SdhcInitialize|

	IMPORT	|OALStall|
	IMPORT	|SocSdhcDevconf|
	IMPORT	|OALGetSiliconIdCode|

  00078			 AREA	 |.pdata|, PDATA
|$T44804| DCD	|$LN5@SdhcContro@2|
	DCD	0x40005002
; Function compile flags: /Odtp

  00b80			 AREA	 |.text|, CODE, ARM

  00b80		 |SdhcControllerInit| PROC

; 338  : {

  00b80		 |$LN5@SdhcContro@2|
  00b80	e52de004	 str         lr, [sp, #-4]!
  00b84	e24dd00c	 sub         sp, sp, #0xC
  00b88		 |$M44801|

; 339  :     DWORD dwClockRate;
; 340  :     DWORD dwIDVal;
; 341  : 
; 342  :     m_fFirstTime = TRUE;

  00b88	e59f212c	 ldr         r2, [pc, #0x12C]
  00b8c	e3a03001	 mov         r3, #1
  00b90	e5823000	 str         r3, [r2]

; 343  :     m_fAppCmdMode = FALSE;

  00b94	e59f211c	 ldr         r2, [pc, #0x11C]
  00b98	e3a03000	 mov         r3, #0
  00b9c	e5823000	 str         r3, [r2]

; 344  : 
; 345  :     m_pbRegisters = NULL;

  00ba0	e59f210c	 ldr         r2, [pc, #0x10C]
  00ba4	e3a03000	 mov         r3, #0
  00ba8	e5823000	 str         r3, [r2]

; 346  :     m_fCardPresent = FALSE;

  00bac	e59f20fc	 ldr         r2, [pc, #0xFC]
  00bb0	e3a03000	 mov         r3, #0
  00bb4	e5823000	 str         r3, [r2]

; 347  : 
; 348  :     m_dwMaxTimeout = DEFAULT_TIMEOUT_VALUE;

  00bb8	e59f20ec	 ldr         r2, [pc, #0xEC]
  00bbc	e3a03c27	 mov         r3, #0x27, 24
  00bc0	e3833010	 orr         r3, r3, #0x10
  00bc4	e5823000	 str         r3, [r2]

; 349  :     m_fMMCMode = FALSE;

  00bc8	e59f20d8	 ldr         r2, [pc, #0xD8]
  00bcc	e3a03000	 mov         r3, #0
  00bd0	e5823000	 str         r3, [r2]

; 350  : 
; 351  :     m_dwSlot = MMCSLOT_1;

  00bd4	e59f20bc	 ldr         r2, [pc, #0xBC]
  00bd8	e3a03001	 mov         r3, #1
  00bdc	e5823000	 str         r3, [r2]

; 352  :     m_dwSDIOCard = 0;

  00be0	e59f20ac	 ldr         r2, [pc, #0xAC]
  00be4	e3a03000	 mov         r3, #0
  00be8	e5823000	 str         r3, [r2]

; 353  : 
; 354  :     // initialize dvfs variables
; 355  :     m_fCardInitialized = FALSE;

  00bec	e59f20b0	 ldr         r2, [pc, #0xB0]
  00bf0	e3a03000	 mov         r3, #0
  00bf4	e5823000	 str         r3, [r2]

; 356  :     m_TransferClass = 0;

  00bf8	e59f20a0	 ldr         r2, [pc, #0xA0]
  00bfc	e3a03000	 mov         r3, #0
  00c00	e1c230b0	 strh        r3, [r2]

; 357  : 
; 358  :     dwIDVal = OALGetSiliconIdCode();        

  00c04	eb000000	 bl          OALGetSiliconIdCode
  00c08	e58d0008	 str         r0, [sp, #8]
  00c0c	e59d3008	 ldr         r3, [sp, #8]
  00c10	e58d3000	 str         r3, [sp]

; 359  :     m_dwCPURev = (dwIDVal >> 28) + 1;

  00c14	e59d3000	 ldr         r3, [sp]
  00c18	e1a03e23	 mov         r3, r3, lsr #28
  00c1c	e2832001	 add         r2, r3, #1
  00c20	e59f3074	 ldr         r3, [pc, #0x74]
  00c24	e5832000	 str         r2, [r3]

; 360  :     //OALMSG(1, (TEXT("cpu_rev: %d \r\n"), m_dwCPURev));
; 361  : 
; 362  : #if 0
; 363  :     //35xx-ES1.0  Sil errata fix
; 364  :     BusIoControl(m_hParentBus, IOCTL_BUS_REQUEST_CLOCK, &id, sizeof(id), NULL, 0, NULL, NULL);
; 365  : #endif
; 366  : 
; 367  :     InitializeHardware(m_dwSlot);

  00c28	e59f3068	 ldr         r3, [pc, #0x68]
  00c2c	e5930000	 ldr         r0, [r3]
  00c30	eb000000	 bl          InitializeHardware

; 368  : 
; 369  :     // turn power and system clocks on
; 370  :     SocSdhcDevconf(m_dwSlot);

  00c34	e59f305c	 ldr         r3, [pc, #0x5C]
  00c38	e5930000	 ldr         r0, [r3]
  00c3c	eb000000	 bl          SocSdhcDevconf

; 371  : 
; 372  :     SystemClockOn();

  00c40	eb000000	 bl          SystemClockOn

; 373  : 
; 374  :     dwClockRate = MMCSD_CLOCK_INIT;

  00c44	e3a03a61	 mov         r3, #0x61, 20
  00c48	e3833d2a	 orr         r3, r3, #0x2A, 26
  00c4c	e58d3004	 str         r3, [sp, #4]

; 375  :     SdhcSetClockRate(&dwClockRate);

  00c50	e28d0004	 add         r0, sp, #4
  00c54	eb000000	 bl          SdhcSetClockRate

; 376  :     
; 377  :     // use 1 bit MMC mode
; 378  :     SdhcSetInterface(SD_INTERFACE_SD_MMC_1BIT);

  00c58	e3a00000	 mov         r0, #0
  00c5c	eb000000	 bl          SdhcSetInterface

; 379  : 
; 380  :     // Initialize the slot
; 381  :     MmcReset(SOFT_RESET_ALL);

  00c60	e3a00401	 mov         r0, #1, 8
  00c64	eb000000	 bl          MmcReset

; 382  :     OALStall(10 * 1000); // Allow time for card to power down after a device reset

  00c68	e3a00c27	 mov         r0, #0x27, 24
  00c6c	e3800010	 orr         r0, r0, #0x10
  00c70	eb000000	 bl          OALStall

; 383  : #ifdef DEBUG
; 384  :     DumpRegisters();

  00c74	eb000000	 bl          DumpRegisters

; 385  : #endif
; 386  :     EnableSDHCInterrupts();

  00c78	eb000000	 bl          EnableSDHCInterrupts

; 387  : 
; 388  :     m_dwSDIOCard = 0;

  00c7c	e59f2010	 ldr         r2, [pc, #0x10]
  00c80	e3a03000	 mov         r3, #0
  00c84	e5823000	 str         r3, [r2]

; 389  : }

  00c88	e28dd00c	 add         sp, sp, #0xC
  00c8c	e49de004	 ldr         lr, [sp], #4
  00c90	e12fff1e	 bx          lr
  00c94		 |$LN6@SdhcContro@2|
  00c94		 |$LN7@SdhcContro@2|
  00c94	00000000	 DCD         |m_dwSDIOCard|
  00c98		 |$LN8@SdhcContro@2|
  00c98	00000000	 DCD         |m_dwSlot|
  00c9c		 |$LN9@SdhcContro@2|
  00c9c	00000000	 DCD         |m_dwCPURev|
  00ca0		 |$LN10@SdhcContro@2|
  00ca0	00000000	 DCD         |m_TransferClass|
  00ca4		 |$LN11@SdhcContro@2|
  00ca4	00000000	 DCD         |m_fCardInitialized|
  00ca8		 |$LN12@SdhcContro@2|
  00ca8	00000000	 DCD         |m_fMMCMode|
  00cac		 |$LN13@SdhcContro@2|
  00cac	00000000	 DCD         |m_dwMaxTimeout|
  00cb0		 |$LN14@SdhcContro@2|
  00cb0	00000000	 DCD         |m_fCardPresent|
  00cb4		 |$LN15@SdhcContro@2|
  00cb4	00000000	 DCD         |m_pbRegisters|
  00cb8		 |$LN16@SdhcContro@2|
  00cb8	00000000	 DCD         |m_fAppCmdMode|
  00cbc		 |$LN17@SdhcContro@2|
  00cbc	00000000	 DCD         |m_fFirstTime|
  00cc0		 |$M44802|

			 ENDP  ; |SdhcControllerInit|

	EXPORT	|??_C@_1DA@PKLOKBNI@?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAH?$AAW?$AA?3?$AA?5?$AAT?$AAI?$AAM?$AAE?$AAO?$AAU?$AAT?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DE@ELDDFPEJ@?$AAI?$AAn?$AAi?$AAt?$AA?5?$AAH?$AAW?$AA?3?$AA?5?$AAc?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?5?$AAR?$AAS?$AAT?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|OALPAtoVA|
	IMPORT	|GetAddressByDevice|
	IMPORT	|SOCGetSDHCDeviceBySlot|

  00080			 AREA	 |.pdata|, PDATA
|$T44830| DCD	|$LN17@Initialize|
	DCD	0x40007804

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@PKLOKBNI@?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAH?$AAW?$AA?3?$AA?5?$AAT?$AAI?$AAM?$AAE?$AAO?$AAU?$AAT?$AA?$AN?$AA?6?$AA?$AA@| DCB "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a", 0x0, "l"
	DCB	0x0, "i", 0x0, "z", 0x0, "e", 0x0, "H", 0x0, "W", 0x0, ":"
	DCB	0x0, " ", 0x0, "T", 0x0, "I", 0x0, "M", 0x0, "E", 0x0, "O"
	DCB	0x0, "U", 0x0, "T", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DE@ELDDFPEJ@?$AAI?$AAn?$AAi?$AAt?$AA?5?$AAH?$AAW?$AA?3?$AA?5?$AAc?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?5?$AAR?$AAS?$AAT?$AA?$AN?$AA?6?$AA?$AA@| DCB "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, " ", 0x0, "H", 0x0, "W"
	DCB	0x0, ":", 0x0, " ", 0x0, "c", 0x0, "o", 0x0, "n", 0x0, "t"
	DCB	0x0, "r", 0x0, "o", 0x0, "l", 0x0, "l", 0x0, "e", 0x0, "r"
	DCB	0x0, " ", 0x0, "R", 0x0, "S", 0x0, "T", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  00cc0			 AREA	 |.text|, CODE, ARM

  00cc0		 |InitializeHardware| PROC

; 276  : {

  00cc0		 |$LN17@Initialize|
  00cc0	e1a0c00d	 mov         r12, sp
  00cc4	e92d0001	 stmdb       sp!, {r0}
  00cc8	e92d5000	 stmdb       sp!, {r12, lr}
  00ccc	e24dd038	 sub         sp, sp, #0x38
  00cd0		 |$M44827|

; 277  :     DWORD               dwCurrentTickCount;
; 278  :     DWORD               dwTimeout;
; 279  :     DWORD               dwCountStart;
; 280  :     BOOL                fTimeoutOverflow = FALSE;

  00cd0	e3a03000	 mov         r3, #0
  00cd4	e58d3000	 str         r3, [sp]

; 281  : 
; 282  :     m_dwMaxClockRate = 20000000;

  00cd8	e59f21bc	 ldr         r2, [pc, #0x1BC]
  00cdc	e59f31b4	 ldr         r3, [pc, #0x1B4]
  00ce0	e5823000	 str         r3, [r2]

; 283  : 
; 284  :     m_pbRegisters = OALPAtoUA(GetAddressByDevice(SOCGetSDHCDeviceBySlot(Slot)));

  00ce4	e59d0040	 ldr         r0, [sp, #0x40]
  00ce8	eb000000	 bl          SOCGetSDHCDeviceBySlot
  00cec	e58d0014	 str         r0, [sp, #0x14]
  00cf0	e59d0014	 ldr         r0, [sp, #0x14]
  00cf4	eb000000	 bl          GetAddressByDevice
  00cf8	e58d0018	 str         r0, [sp, #0x18]
  00cfc	e3a01000	 mov         r1, #0
  00d00	e59d0018	 ldr         r0, [sp, #0x18]
  00d04	eb000000	 bl          OALPAtoVA
  00d08	e58d001c	 str         r0, [sp, #0x1C]
  00d0c	e59d201c	 ldr         r2, [sp, #0x1C]
  00d10	e59f3174	 ldr         r3, [pc, #0x174]
  00d14	e5832000	 str         r2, [r3]

; 285  :         
; 286  :     // Reset the controller
; 287  :     OALMSG(1, (TEXT("Init HW: controller RST\r\n")));

  00d18	e59f0174	 ldr         r0, [pc, #0x174]
  00d1c	eb000000	 bl          NKDbgPrintfW

; 288  :     OUTREG32(&m_pbRegisters->MMCHS_SYSCONFIG, MMCHS_SYSCONFIG_SOFTRESET);

  00d20	e59f3164	 ldr         r3, [pc, #0x164]
  00d24	e5933000	 ldr         r3, [r3]
  00d28	e2832010	 add         r2, r3, #0x10
  00d2c	e3a03002	 mov         r3, #2
  00d30	e5823000	 str         r3, [r2]

; 289  : 
; 290  :     // calculate timeout conditions
; 291  :     dwCountStart = OALGetTickCount();

  00d34	eb000000	 bl          OALGetTickCount
  00d38	e58d0020	 str         r0, [sp, #0x20]
  00d3c	e59d3020	 ldr         r3, [sp, #0x20]
  00d40	e58d3004	 str         r3, [sp, #4]

; 292  :     dwTimeout = dwCountStart + m_dwMaxTimeout;

  00d44	e59d2004	 ldr         r2, [sp, #4]
  00d48	e59f3140	 ldr         r3, [pc, #0x140]
  00d4c	e5933000	 ldr         r3, [r3]
  00d50	e0823003	 add         r3, r2, r3
  00d54	e58d300c	 str         r3, [sp, #0xC]

; 293  :     if ( dwTimeout < dwCountStart )

  00d58	e59d200c	 ldr         r2, [sp, #0xC]
  00d5c	e59d3004	 ldr         r3, [sp, #4]
  00d60	e1520003	 cmp         r2, r3
  00d64	2a000001	 bcs         |$LN4@Initialize|

; 294  :         fTimeoutOverflow = TRUE;

  00d68	e3a03001	 mov         r3, #1
  00d6c	e58d3000	 str         r3, [sp]
  00d70		 |$LN4@Initialize|
  00d70		 |$LN3@Initialize|

; 295  : 
; 296  :     // Verify that reset has completed.
; 297  :     while (!(INREG32(&m_pbRegisters->MMCHS_SYSSTATUS) & MMCHS_SYSSTATUS_RESETDONE))

  00d70	e59f3114	 ldr         r3, [pc, #0x114]
  00d74	e5933000	 ldr         r3, [r3]
  00d78	e2833014	 add         r3, r3, #0x14
  00d7c	e5933000	 ldr         r3, [r3]
  00d80	e3130001	 tst         r3, #1
  00d84	1a000037	 bne         |$LN2@Initialize|

; 298  :     {
; 299  :         OALMSGX(1, (TEXT("Init HW: MMCHS_SYSSTATUS = 0x%X\r\n"), INREG32(&m_pbRegisters->MMCHS_SYSSTATUS)));
; 300  : 
; 301  :         // check for a timeout
; 302  :         dwCurrentTickCount = OALGetTickCount();

  00d88	eb000000	 bl          OALGetTickCount
  00d8c	e58d0024	 str         r0, [sp, #0x24]
  00d90	e59d3024	 ldr         r3, [sp, #0x24]
  00d94	e58d3008	 str         r3, [sp, #8]

; 303  :         if ( fTimeoutOverflow ? ( dwTimeout < dwCurrentTickCount && dwCurrentTickCount < dwCountStart )
; 304  :             : ( dwTimeout < dwCurrentTickCount || dwCurrentTickCount < dwCountStart ) )

  00d98	e59d3000	 ldr         r3, [sp]
  00d9c	e3530000	 cmp         r3, #0
  00da0	0a00000f	 beq         |$LN11@Initialize|
  00da4	e59d200c	 ldr         r2, [sp, #0xC]
  00da8	e59d3008	 ldr         r3, [sp, #8]
  00dac	e1520003	 cmp         r2, r3
  00db0	2a000006	 bcs         |$LN7@Initialize|
  00db4	e59d2008	 ldr         r2, [sp, #8]
  00db8	e59d3004	 ldr         r3, [sp, #4]
  00dbc	e1520003	 cmp         r2, r3
  00dc0	2a000002	 bcs         |$LN7@Initialize|
  00dc4	e3a03001	 mov         r3, #1
  00dc8	e58d3028	 str         r3, [sp, #0x28]
  00dcc	ea000001	 b           |$LN10@Initialize|
  00dd0		 |$LN7@Initialize|
  00dd0	e3a03000	 mov         r3, #0
  00dd4	e58d3028	 str         r3, [sp, #0x28]
  00dd8		 |$LN10@Initialize|
  00dd8	e59d3028	 ldr         r3, [sp, #0x28]
  00ddc	e58d302c	 str         r3, [sp, #0x2C]
  00de0	ea00000e	 b           |$LN12@Initialize|
  00de4		 |$LN11@Initialize|
  00de4	e59d200c	 ldr         r2, [sp, #0xC]
  00de8	e59d3008	 ldr         r3, [sp, #8]
  00dec	e1520003	 cmp         r2, r3
  00df0	3a000006	 bcc         |$LN8@Initialize|
  00df4	e59d2008	 ldr         r2, [sp, #8]
  00df8	e59d3004	 ldr         r3, [sp, #4]
  00dfc	e1520003	 cmp         r2, r3
  00e00	3a000002	 bcc         |$LN8@Initialize|
  00e04	e3a03000	 mov         r3, #0
  00e08	e58d3030	 str         r3, [sp, #0x30]
  00e0c	ea000001	 b           |$LN9@Initialize|
  00e10		 |$LN8@Initialize|
  00e10	e3a03001	 mov         r3, #1
  00e14	e58d3030	 str         r3, [sp, #0x30]
  00e18		 |$LN9@Initialize|
  00e18	e59d3030	 ldr         r3, [sp, #0x30]
  00e1c	e58d302c	 str         r3, [sp, #0x2C]
  00e20		 |$LN12@Initialize|
  00e20	e59d302c	 ldr         r3, [sp, #0x2C]
  00e24	e3530000	 cmp         r3, #0
  00e28	0a00000d	 beq         |$LN1@Initialize|

; 305  :         {
; 306  :             OALMSG(OAL_ERROR, (TEXT("InitializeHW: TIMEOUT\r\n")));

  00e2c	e59f3054	 ldr         r3, [pc, #0x54]
  00e30	e5933440	 ldr         r3, [r3, #0x440]
  00e34	e3130001	 tst         r3, #1
  00e38	0a000004	 beq         |$LN13@Initialize|
  00e3c	e59f0040	 ldr         r0, [pc, #0x40]
  00e40	eb000000	 bl          NKDbgPrintfW
  00e44	e3a03001	 mov         r3, #1
  00e48	e58d3034	 str         r3, [sp, #0x34]
  00e4c	ea000001	 b           |$LN14@Initialize|
  00e50		 |$LN13@Initialize|
  00e50	e3a03000	 mov         r3, #0
  00e54	e58d3034	 str         r3, [sp, #0x34]
  00e58		 |$LN14@Initialize|

; 307  :             return FALSE;

  00e58	e3a03000	 mov         r3, #0
  00e5c	e58d3010	 str         r3, [sp, #0x10]
  00e60	ea000003	 b           |$LN5@Initialize|
  00e64		 |$LN1@Initialize|

; 308  :         }
; 309  :     }

  00e64	eaffffc1	 b           |$LN3@Initialize|
  00e68		 |$LN2@Initialize|

; 310  :     InitializeT2GPIO();

  00e68	eb000000	 bl          InitializeT2GPIO

; 311  :     return TRUE;

  00e6c	e3a03001	 mov         r3, #1
  00e70	e58d3010	 str         r3, [sp, #0x10]
  00e74		 |$LN5@Initialize|

; 312  : }

  00e74	e59d0010	 ldr         r0, [sp, #0x10]
  00e78	e28dd038	 add         sp, sp, #0x38
  00e7c	e89d6000	 ldmia       sp, {sp, lr}
  00e80	e12fff1e	 bx          lr
  00e84		 |$LN18@Initialize|
  00e84		 |$LN19@Initialize|
  00e84	00000000	 DCD         |??_C@_1DA@PKLOKBNI@?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAH?$AAW?$AA?3?$AA?5?$AAT?$AAI?$AAM?$AAE?$AAO?$AAU?$AAT?$AA?$AN?$AA?6?$AA?$AA@|
  00e88		 |$LN20@Initialize|
  00e88	00000000	 DCD         |dpCurSettings|
  00e8c		 |$LN21@Initialize|
  00e8c	00000000	 DCD         |m_pbRegisters|
  00e90		 |$LN22@Initialize|
  00e90	00000000	 DCD         |m_dwMaxTimeout|
  00e94		 |$LN23@Initialize|
  00e94	00000000	 DCD         |??_C@_1DE@ELDDFPEJ@?$AAI?$AAn?$AAi?$AAt?$AA?5?$AAH?$AAW?$AA?3?$AA?5?$AAc?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?5?$AAR?$AAS?$AAT?$AA?$AN?$AA?6?$AA?$AA@|
  00e98		 |$LN24@Initialize|
  00e98	01312d00	 DCD         0x1312d00
  00e9c		 |$LN25@Initialize|
  00e9c	00000000	 DCD         |m_dwMaxClockRate|
  00ea0		 |$M44828|

			 ENDP  ; |InitializeHardware|

	IMPORT	|GPIOPullup|
	IMPORT	|GPIOSetMode|
	IMPORT	|GPIOOpen|

  00088			 AREA	 |.pdata|, PDATA
|$T44844| DCD	|$LN8@Initialize@2|
	DCD	0x40002402
; Function compile flags: /Odtp

  00ea0			 AREA	 |.text|, CODE, ARM

  00ea0		 |InitializeT2GPIO| PROC

; 227  : {    

  00ea0		 |$LN8@Initialize@2|
  00ea0	e52de004	 str         lr, [sp, #-4]!
  00ea4	e24dd010	 sub         sp, sp, #0x10
  00ea8		 |$M44841|

; 228  :     g_hGPIO = GPIOOpen();

  00ea8	eb000000	 bl          GPIOOpen
  00eac	e58d0004	 str         r0, [sp, #4]
  00eb0	e59d2004	 ldr         r2, [sp, #4]
  00eb4	e59f306c	 ldr         r3, [pc, #0x6C]
  00eb8	e5832000	 str         r2, [r3]

; 229  : 
; 230  :     // configure card detect GPIO
; 231  :     switch (m_dwSlot)

  00ebc	e59f3068	 ldr         r3, [pc, #0x68]
  00ec0	e5933000	 ldr         r3, [r3]
  00ec4	e3530001	 cmp         r3, #1
  00ec8	0a000000	 beq         |$LN1@Initialize@2|
  00ecc	ea00000f	 b           |$LN2@Initialize@2|
  00ed0		 |$LN1@Initialize@2|

; 232  :     {
; 233  :         case MMCSLOT_1:
; 234  : 
; 235  :             // Configure GPIO for card detect
; 236  :             GPIOSetMode(g_hGPIO, BSPGetSDHCCardDetect(MMCSLOT_1),GPIO_DIR_INPUT|GPIO_DEBOUNCE_ENABLE);

  00ed0	e3a00001	 mov         r0, #1
  00ed4	eb000000	 bl          BSPGetSDHCCardDetect
  00ed8	e58d0008	 str         r0, [sp, #8]
  00edc	e3a02021	 mov         r2, #0x21
  00ee0	e59d1008	 ldr         r1, [sp, #8]
  00ee4	e59f303c	 ldr         r3, [pc, #0x3C]
  00ee8	e5930000	 ldr         r0, [r3]
  00eec	eb000000	 bl          GPIOSetMode

; 237  :             GPIOPullup(g_hGPIO, BSPGetSDHCCardDetect(MMCSLOT_1),GPIO_PULLUP_ENABLE);

  00ef0	e3a00001	 mov         r0, #1
  00ef4	eb000000	 bl          BSPGetSDHCCardDetect
  00ef8	e58d000c	 str         r0, [sp, #0xC]
  00efc	e3a02001	 mov         r2, #1
  00f00	e59d100c	 ldr         r1, [sp, #0xC]
  00f04	e59f301c	 ldr         r3, [pc, #0x1C]
  00f08	e5930000	 ldr         r0, [r3]
  00f0c	eb000000	 bl          GPIOPullup
  00f10		 |$LN2@Initialize@2|

; 238  :    
; 239  :             // Configure GPIO card detect as input with both edge interrupts
; 240  :             // GPIOSetMode(m_hGPIO, MMC1_GPIO_CARDDET, GPIO_DIR_INPUT | GPIO_INT_LOW_HIGH | GPIO_INT_HIGH_LOW);
; 241  :             //  m_dwCDIntrId = TWL_INTR_GPIO_0;
; 242  :             break;
; 243  : 
; 244  : #if 0   
; 245  :         // MMCSLOT_2 not supported
; 246  :         case MMCSLOT_2:
; 247  :             // Configure GPIO for card detect
; 248  :             OALTritonRead(m_hTWL, TWL_GPIO_CTRL, &regval);
; 249  :             regval |= T2_GPIO_MODULE_ENABLE_MASK;
; 250  :             OALTritonWrite(m_hTWL, TWL_GPIO_CTRL, regval);
; 251  : 
; 252  :             // Configure GPIO card detect pullup / pulldown
; 253  :             OALTritonRead(m_hTWL, TWL_GPIOPUPDCTR1, &regval);
; 254  :             regval &= MMC2_GPIO_CARDDET_PU_PD_MASK;
; 255  :             regval |= MMC2_GPIO_CARDDET_PU;
; 256  :             OALTritonWrite(m_hTWL, TWL_GPIOPUPDCTR1, regval);
; 257  : 
; 258  :             // Configure GPIO card detect debounce
; 259  :             OALTritonRead(m_hTWL, TWL_GPIO_DEBEN1, &regval);
; 260  :             regval |= MMC2_GPIO_CARDDET_DEB;
; 261  :             OALTritonWrite(m_hTWL, TWL_GPIO_DEBEN1, regval);
; 262  : 
; 263  :             // Configure GPIO card as input with both edge interrupts
; 264  :             GPIOSetMode(m_hGPIO, MMC2_GPIO_CARDDET, GPIO_DIR_INPUT | GPIO_INT_LOW_HIGH | GPIO_INT_HIGH_LOW);
; 265  : 
; 266  :             m_dwCDIntrId = TWL_INTR_GPIO_1;
; 267  : 
; 268  :             break;
; 269  : #endif
; 270  :     }
; 271  : 
; 272  :    return TRUE;

  00f10	e3a03001	 mov         r3, #1
  00f14	e58d3000	 str         r3, [sp]

; 273  : }

  00f18	e59d0000	 ldr         r0, [sp]
  00f1c	e28dd010	 add         sp, sp, #0x10
  00f20	e49de004	 ldr         lr, [sp], #4
  00f24	e12fff1e	 bx          lr
  00f28		 |$LN9@Initialize@2|
  00f28		 |$LN10@Initialize@2|
  00f28	00000000	 DCD         |g_hGPIO|
  00f2c		 |$LN11@Initialize@2|
  00f2c	00000000	 DCD         |m_dwSlot|
  00f30		 |$M44842|

			 ENDP  ; |InitializeT2GPIO|

	EXPORT	|??_C@_1HA@EMKAPAB@?$AAS?$AAD?$AAH?$AAC?$AAD?$AAB?$AAu?$AAs?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?$CI?$AA?$CJ?$AA?5?$AA?9?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr@| [ DATA ] ; `string'
	EXPORT	|SdhcBusRequestHandler|

  00090			 AREA	 |.pdata|, PDATA
|$T44855| DCD	|$LN8@SdhcBusReq|
	DCD	0x40002504

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HA@EMKAPAB@?$AAS?$AAD?$AAH?$AAC?$AAD?$AAB?$AAu?$AAs?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?$CI?$AA?$CJ?$AA?5?$AA?9?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr@| DCB "S"
	DCB	0x0, "D", 0x0, "H", 0x0, "C", 0x0, "D", 0x0, "B", 0x0, "u"
	DCB	0x0, "s", 0x0, "R", 0x0, "e", 0x0, "q", 0x0, "u", 0x0, "e"
	DCB	0x0, "s", 0x0, "t", 0x0, "H", 0x0, "a", 0x0, "n", 0x0, "d"
	DCB	0x0, "l", 0x0, "e", 0x0, "r", 0x0, "(", 0x0, ")", 0x0, " "
	DCB	0x0, "-", 0x0, " ", 0x0, "E", 0x0, "r", 0x0, "r", 0x0, "o"
	DCB	0x0, "r", 0x0, " ", 0x0, "s", 0x0, "e", 0x0, "n", 0x0, "d"
	DCB	0x0, "i", 0x0, "n", 0x0, "g", 0x0, " ", 0x0, "c", 0x0, "o"
	DCB	0x0, "m", 0x0, "m", 0x0, "a", 0x0, "n", 0x0, "d", 0x0, ":"
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  00f30			 AREA	 |.text|, CODE, ARM

  00f30		 |SdhcBusRequestHandler| PROC

; 917  : {

  00f30		 |$LN8@SdhcBusReq|
  00f30	e1a0c00d	 mov         r12, sp
  00f34	e92d0001	 stmdb       sp!, {r0}
  00f38	e92d5000	 stmdb       sp!, {r12, lr}
  00f3c	e24dd010	 sub         sp, sp, #0x10
  00f40		 |$M44852|

; 918  :     SD_API_STATUS   status;
; 919  : 
; 920  :     OALMSGX(OAL_IO, (TEXT("SDHCBusRequestHandler - CMD::[%d]\r\n"), pRequest->CommandCode));
; 921  : 
; 922  :     status = SendCommand(pRequest);

  00f40	e59d0018	 ldr         r0, [sp, #0x18]
  00f44	eb000000	 bl          SendCommand
  00f48	e58d0008	 str         r0, [sp, #8]
  00f4c	e59d3008	 ldr         r3, [sp, #8]
  00f50	e58d3000	 str         r3, [sp]

; 923  : 
; 924  :     if (!SD_API_SUCCESS(status))

  00f54	e59d3000	 ldr         r3, [sp]
  00f58	e3530000	 cmp         r3, #0
  00f5c	aa00000e	 bge         |$LN1@SdhcBusReq|

; 925  :     {
; 926  :         DEBUGMSG(OAL_ERROR, (TEXT("SDHCDBusRequestHandler() - Error sending command:0x%x\r\n"), pRequest->CommandCode));

  00f60	e59f3058	 ldr         r3, [pc, #0x58]
  00f64	e5933440	 ldr         r3, [r3, #0x440]
  00f68	e3130001	 tst         r3, #1
  00f6c	0a000007	 beq         |$LN4@SdhcBusReq|
  00f70	e59d3018	 ldr         r3, [sp, #0x18]
  00f74	e2833014	 add         r3, r3, #0x14
  00f78	e5d31000	 ldrb        r1, [r3]
  00f7c	e59f0038	 ldr         r0, [pc, #0x38]
  00f80	eb000000	 bl          NKDbgPrintfW
  00f84	e3a03001	 mov         r3, #1
  00f88	e58d300c	 str         r3, [sp, #0xC]
  00f8c	ea000001	 b           |$LN5@SdhcBusReq|
  00f90		 |$LN4@SdhcBusReq|
  00f90	e3a03000	 mov         r3, #0
  00f94	e58d300c	 str         r3, [sp, #0xC]
  00f98		 |$LN5@SdhcBusReq|

; 927  :         goto cleanUp;      

  00f98	ea000001	 b           |$cleanUp$44427|
  00f9c		 |$LN1@SdhcBusReq|

; 928  :     }
; 929  : 
; 930  :     // we will handle the command response interrupt on another thread
; 931  :     status = SD_API_STATUS_PENDING;

  00f9c	e3a03001	 mov         r3, #1
  00fa0	e58d3000	 str         r3, [sp]
  00fa4		 |$cleanUp$44427|

; 932  : 
; 933  : cleanUp:
; 934  : 
; 935  :     return status;

  00fa4	e59d3000	 ldr         r3, [sp]
  00fa8	e58d3004	 str         r3, [sp, #4]

; 936  : }

  00fac	e59d0004	 ldr         r0, [sp, #4]
  00fb0	e28dd010	 add         sp, sp, #0x10
  00fb4	e89d6000	 ldmia       sp, {sp, lr}
  00fb8	e12fff1e	 bx          lr
  00fbc		 |$LN9@SdhcBusReq|
  00fbc		 |$LN10@SdhcBusReq|
  00fbc	00000000	 DCD         |??_C@_1HA@EMKAPAB@?$AAS?$AAD?$AAH?$AAC?$AAD?$AAB?$AAu?$AAs?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?$CI?$AA?$CJ?$AA?5?$AA?9?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr@|
  00fc0		 |$LN11@SdhcBusReq|
  00fc0	00000000	 DCD         |dpCurSettings|
  00fc4		 |$M44853|

			 ENDP  ; |SdhcBusRequestHandler|


  00098			 AREA	 |.pdata|, PDATA
|$T44864| DCD	|$LN20@SendComman|
	DCD	0x4000a304
; Function compile flags: /Odtp

  00fc4			 AREA	 |.text|, CODE, ARM

  00fc4		 |SendCommand| PROC

; 685  : {

  00fc4		 |$LN20@SendComman|
  00fc4	e1a0c00d	 mov         r12, sp
  00fc8	e92d0001	 stmdb       sp!, {r0}
  00fcc	e92d5000	 stmdb       sp!, {r12, lr}
  00fd0	e24dd01c	 sub         sp, sp, #0x1C
  00fd4		 |$M44861|

; 686  :     DWORD MMC_CMD;
; 687  :     DWORD dwTimeout;
; 688  :     DWORD Cmd = pRequest->CommandCode;

  00fd4	e59d3024	 ldr         r3, [sp, #0x24]
  00fd8	e2833014	 add         r3, r3, #0x14
  00fdc	e5d33000	 ldrb        r3, [r3]
  00fe0	e58d3010	 str         r3, [sp, #0x10]

; 689  :     DWORD Arg = pRequest->CommandArgument;

  00fe4	e59d3024	 ldr         r3, [sp, #0x24]
  00fe8	e2833018	 add         r3, r3, #0x18
  00fec	e5933000	 ldr         r3, [r3]
  00ff0	e58d3000	 str         r3, [sp]

; 690  :     UINT16 respType = pRequest->CommandResponse.ResponseType;

  00ff4	e59d3024	 ldr         r3, [sp, #0x24]
  00ff8	e283301c	 add         r3, r3, #0x1C
  00ffc	e5933000	 ldr         r3, [r3]
  01000	e1a03803	 mov         r3, r3, lsl #16
  01004	e1a03823	 mov         r3, r3, lsr #16
  01008	e1cd30bc	 strh        r3, [sp, #0xC]

; 691  :     DWORD dwRegVal;
; 692  : 
; 693  :     m_TransferClass = pRequest->TransferClass;

  0100c	e59d3024	 ldr         r3, [sp, #0x24]
  01010	e2833010	 add         r3, r3, #0x10
  01014	e5933000	 ldr         r3, [r3]
  01018	e1a02803	 mov         r2, r3, lsl #16
  0101c	e1a02822	 mov         r2, r2, lsr #16
  01020	e59f321c	 ldr         r3, [pc, #0x21C]
  01024	e1c320b0	 strh        r2, [r3]

; 694  : 
; 695  :     OALMSGX(OAL_IO, (TEXT("SendCommand() - Cmd = 0x%x Arg = 0x%x respType = 0x%x m_TransferClass = 0x%x\r\n"),
; 696  :         Cmd, Arg, respType, m_TransferClass));
; 697  : 
; 698  :     if ((Cmd == SD_CMD_IO_RW_EXTENDED) || (Cmd == SD_CMD_IO_RW_DIRECT))

  01028	e59d3010	 ldr         r3, [sp, #0x10]
  0102c	e3530035	 cmp         r3, #0x35
  01030	0a000002	 beq         |$LN14@SendComman|
  01034	e59d3010	 ldr         r3, [sp, #0x10]
  01038	e3530034	 cmp         r3, #0x34
  0103c	1a000003	 bne         |$LN15@SendComman|
  01040		 |$LN14@SendComman|

; 699  :     {
; 700  :         m_dwSDIOCard = 1;

  01040	e59f2204	 ldr         r2, [pc, #0x204]
  01044	e3a03001	 mov         r3, #1
  01048	e5823000	 str         r3, [r2]
  0104c	ea000008	 b           |$LN13@SendComman|
  01050		 |$LN15@SendComman|

; 701  :     } 
; 702  :     else if ((Cmd == SD_CMD_MMC_SEND_OPCOND) || (Cmd == SD_CMD_GO_IDLE_STATE))

  01050	e59d3010	 ldr         r3, [sp, #0x10]
  01054	e3530001	 cmp         r3, #1
  01058	0a000002	 beq         |$LN11@SendComman|
  0105c	e59d3010	 ldr         r3, [sp, #0x10]
  01060	e3530000	 cmp         r3, #0
  01064	1a000002	 bne         |$LN12@SendComman|
  01068		 |$LN11@SendComman|

; 703  :     {
; 704  :         m_dwSDIOCard = 0;

  01068	e59f21dc	 ldr         r2, [pc, #0x1DC]
  0106c	e3a03000	 mov         r3, #0
  01070	e5823000	 str         r3, [r2]
  01074		 |$LN12@SendComman|
  01074		 |$LN13@SendComman|

; 705  :     }
; 706  : 
; 707  :     if ( m_TransferClass == SD_READ || m_TransferClass == SD_WRITE )
; 708  :     {
; 709  :         OALMSGX(OAL_IO, (TEXT("SendCommand RW (Cmd=0x%X, Arg=0x%x, RespType=0x%X, Data=0x%x <%dx%d>) starts\r\n"),
; 710  :             Cmd, Arg, respType, (m_TransferClass==SD_COMMAND)?FALSE:TRUE, pRequest->NumBlocks, pRequest->BlockSize ) );
; 711  :     }
; 712  :     else
; 713  :     {
; 714  :         OALMSGX(OAL_IO, (TEXT("SendCommand (Cmd=0x%X, Arg=0x%x, RespType=0x%X, Data=0x%x) starts\r\n"),
; 715  :             Cmd, Arg, respType, (m_TransferClass==SD_COMMAND)?FALSE:TRUE) );
; 716  :     }
; 717  : 
; 718  :     // turn the clock on
; 719  :     UpdateSystemClock(TRUE);

  01074	e3a00001	 mov         r0, #1
  01078	eb000000	 bl          UpdateSystemClock

; 720  : 
; 721  :     Write_MMC_STAT(0xFFFFFFFF);

  0107c	e3e00000	 mvn         r0, #0
  01080	eb000000	 bl          Write_MMC_STAT

; 722  :     dwTimeout = 2000;

  01084	e3a03e7d	 mov         r3, #0x7D, 28
  01088	e58d3014	 str         r3, [sp, #0x14]
  0108c		 |$LN7@SendComman|

; 723  :     while (((INREG32(&m_pbRegisters->MMCHS_PSTATE) & MMCHS_PSTAT_CMDI)) && (dwTimeout>0))

  0108c	e59f31a8	 ldr         r3, [pc, #0x1A8]
  01090	e5933000	 ldr         r3, [r3]
  01094	e2833f49	 add         r3, r3, #0x49, 30
  01098	e5933000	 ldr         r3, [r3]
  0109c	e3130001	 tst         r3, #1
  010a0	0a000006	 beq         |$LN6@SendComman|
  010a4	e59d3014	 ldr         r3, [sp, #0x14]
  010a8	e3530000	 cmp         r3, #0
  010ac	9a000003	 bls         |$LN6@SendComman|

; 724  :     {
; 725  :         dwTimeout--;

  010b0	e59d3014	 ldr         r3, [sp, #0x14]
  010b4	e2433001	 sub         r3, r3, #1
  010b8	e58d3014	 str         r3, [sp, #0x14]

; 726  :     }

  010bc	eafffff2	 b           |$LN7@SendComman|
  010c0		 |$LN6@SendComman|

; 727  :     MMC_CMD = MMCHS_INDX(Cmd);

  010c0	e59d3010	 ldr         r3, [sp, #0x10]
  010c4	e1a03c03	 mov         r3, r3, lsl #24
  010c8	e58d3008	 str         r3, [sp, #8]

; 728  : 
; 729  :     MMC_CMD |= gwaCMD[Cmd].flags;

  010cc	e59d1010	 ldr         r1, [sp, #0x10]
  010d0	e3a03008	 mov         r3, #8
  010d4	e0020391	 mul         r2, r1, r3
  010d8	e59f3168	 ldr         r3, [pc, #0x168]
  010dc	e0833002	 add         r3, r3, r2
  010e0	e2833004	 add         r3, r3, #4
  010e4	e59d2008	 ldr         r2, [sp, #8]
  010e8	e5933000	 ldr         r3, [r3]
  010ec	e1823003	 orr         r3, r2, r3
  010f0	e58d3008	 str         r3, [sp, #8]

; 730  :     if ((Cmd == SD_CMD_SELECT_DESELECT_CARD) && (respType == NoResponse))

  010f4	e59d3010	 ldr         r3, [sp, #0x10]
  010f8	e3530007	 cmp         r3, #7
  010fc	1a000008	 bne         |$LN5@SendComman|
  01100	e1dd30bc	 ldrh        r3, [sp, #0xC]
  01104	e3530000	 cmp         r3, #0
  01108	1a000005	 bne         |$LN5@SendComman|

; 731  :     {
; 732  :         MMC_CMD &= ~MMCHS_RSP_MASK;

  0110c	e59d2008	 ldr         r2, [sp, #8]
  01110	e3e03803	 mvn         r3, #3, 16
  01114	e0023003	 and         r3, r2, r3
  01118	e58d3008	 str         r3, [sp, #8]

; 733  :         MMC_CMD |= MMCHS_RSP_NONE;

  0111c	e59d3008	 ldr         r3, [sp, #8]
  01120	e58d3008	 str         r3, [sp, #8]
  01124		 |$LN5@SendComman|

; 734  :     }
; 735  : 
; 736  :     MMC_CMD &= ~MMCHS_CMD_DE;

  01124	e59d2008	 ldr         r2, [sp, #8]
  01128	e3e03001	 mvn         r3, #1
  0112c	e0023003	 and         r3, r2, r3
  01130	e58d3008	 str         r3, [sp, #8]

; 737  : 
; 738  :     if (Cmd == SD_CMD_IO_RW_EXTENDED)

  01134	e59d3010	 ldr         r3, [sp, #0x10]
  01138	e3530035	 cmp         r3, #0x35
  0113c	1a000007	 bne         |$LN4@SendComman|

; 739  :     {
; 740  :         if (pRequest->NumBlocks > 1)

  01140	e59d3024	 ldr         r3, [sp, #0x24]
  01144	e283303c	 add         r3, r3, #0x3C
  01148	e5933000	 ldr         r3, [r3]
  0114c	e3530001	 cmp         r3, #1
  01150	9a000002	 bls         |$LN3@SendComman|

; 741  :         {
; 742  :            MMC_CMD |= MMCHS_CMD_MSBS | MMCHS_CMD_BCE;

  01154	e59d3008	 ldr         r3, [sp, #8]
  01158	e3833022	 orr         r3, r3, #0x22
  0115c	e58d3008	 str         r3, [sp, #8]
  01160		 |$LN3@SendComman|
  01160		 |$LN4@SendComman|

; 743  :         }
; 744  :     }
; 745  : 
; 746  :     if ( m_TransferClass == SD_READ )

  01160	e59f30dc	 ldr         r3, [pc, #0xDC]
  01164	e1d330b0	 ldrh        r3, [r3]
  01168	e3530000	 cmp         r3, #0
  0116c	1a000018	 bne         |$LN2@SendComman|

; 747  :     {
; 748  :         MMC_CMD |= MMCHS_CMD_DDIR;

  01170	e59d3008	 ldr         r3, [sp, #8]
  01174	e3833010	 orr         r3, r3, #0x10
  01178	e58d3008	 str         r3, [sp, #8]

; 749  : 
; 750  :         dwRegVal = (DWORD)(pRequest->BlockSize & 0xFFFF);

  0117c	e59d3024	 ldr         r3, [sp, #0x24]
  01180	e2833040	 add         r3, r3, #0x40
  01184	e5932000	 ldr         r2, [r3]
  01188	e3a03cff	 mov         r3, #0xFF, 24
  0118c	e38330ff	 orr         r3, r3, #0xFF
  01190	e0023003	 and         r3, r2, r3
  01194	e58d3004	 str         r3, [sp, #4]

; 751  :         dwRegVal += ((DWORD)(pRequest->NumBlocks & 0xFFFF)) << 16;

  01198	e59d3024	 ldr         r3, [sp, #0x24]
  0119c	e283303c	 add         r3, r3, #0x3C
  011a0	e5932000	 ldr         r2, [r3]
  011a4	e3a03cff	 mov         r3, #0xFF, 24
  011a8	e38330ff	 orr         r3, r3, #0xFF
  011ac	e0023003	 and         r3, r2, r3
  011b0	e1a02803	 mov         r2, r3, lsl #16
  011b4	e59d3004	 ldr         r3, [sp, #4]
  011b8	e0833002	 add         r3, r3, r2
  011bc	e58d3004	 str         r3, [sp, #4]

; 752  :         OALMSGX(OAL_IO, (TEXT("SendCommand() - BlockSize = %d, NumBlocks = %d, MMCHS_BLK = 0x%x\n"), pRequest->BlockSize, pRequest->NumBlocks, dwRegVal));
; 753  :         OUTREG32(&m_pbRegisters->MMCHS_BLK, dwRegVal);

  011c0	e59f3074	 ldr         r3, [pc, #0x74]
  011c4	e5933000	 ldr         r3, [r3]
  011c8	e2832f41	 add         r2, r3, #0x41, 30
  011cc	e59d3004	 ldr         r3, [sp, #4]
  011d0	e5823000	 str         r3, [r2]
  011d4		 |$LN2@SendComman|

; 754  :         OALMSGX(OAL_IO, (TEXT("SendCommand() - read back MMCHS_BLK = 0x%x\n"), INREG32(&m_pbRegisters->MMCHS_BLK)));
; 755  :     }
; 756  : #if 0
; 757  :     else if ( m_TransferClass == SD_WRITE )
; 758  :     {
; 759  :         MMC_CMD &= ~MMCHS_CMD_DDIR;
; 760  : 
; 761  :         dwRegVal = (DWORD)(pRequest->BlockSize & 0xFFFF);
; 762  :         dwRegVal += ((DWORD)(pRequest->NumBlocks & 0xFFFF)) << 16;
; 763  :         OUTREG32(&m_pbRegisters->MMCHS_BLK, dwRegVal);
; 764  :     }
; 765  : #endif
; 766  :     //check for card initialization is done.
; 767  :     if (!m_fCardInitialized && (Cmd == SD_CMD_READ_SINGLE_BLOCK))

  011d4	e59f3064	 ldr         r3, [pc, #0x64]
  011d8	e5933000	 ldr         r3, [r3]
  011dc	e3530000	 cmp         r3, #0
  011e0	1a000005	 bne         |$LN1@SendComman|
  011e4	e59d3010	 ldr         r3, [sp, #0x10]
  011e8	e3530011	 cmp         r3, #0x11
  011ec	1a000002	 bne         |$LN1@SendComman|

; 768  :         m_fCardInitialized = TRUE;

  011f0	e59f2048	 ldr         r2, [pc, #0x48]
  011f4	e3a03001	 mov         r3, #1
  011f8	e5823000	 str         r3, [r2]
  011fc		 |$LN1@SendComman|

; 769  : 
; 770  :     // Program the argument into the argument registers
; 771  :     OUTREG32(&m_pbRegisters->MMCHS_ARG, Arg);

  011fc	e59f3038	 ldr         r3, [pc, #0x38]
  01200	e5933000	 ldr         r3, [r3]
  01204	e2832f42	 add         r2, r3, #0x42, 30
  01208	e59d3000	 ldr         r3, [sp]
  0120c	e5823000	 str         r3, [r2]

; 772  : 
; 773  :     OALMSGX(OAL_IO, (TEXT("SendCommand() - registers:Command = 0x%x, MMCHS_ARG = 0x%x\n"), MMC_CMD, INREG32(&m_pbRegisters->MMCHS_ARG)));
; 774  : 
; 775  :     // Issue the command.
; 776  :     OUTREG32(&m_pbRegisters->MMCHS_CMD, MMC_CMD);

  01210	e59f3024	 ldr         r3, [pc, #0x24]
  01214	e5933000	 ldr         r3, [r3]
  01218	e2832f43	 add         r2, r3, #0x43, 30
  0121c	e59d3008	 ldr         r3, [sp, #8]
  01220	e5823000	 str         r3, [r2]

; 777  : 
; 778  :     return SD_API_STATUS_SUCCESS;

  01224	e3a03000	 mov         r3, #0
  01228	e58d3018	 str         r3, [sp, #0x18]

; 779  : }

  0122c	e59d0018	 ldr         r0, [sp, #0x18]
  01230	e28dd01c	 add         sp, sp, #0x1C
  01234	e89d6000	 ldmia       sp, {sp, lr}
  01238	e12fff1e	 bx          lr
  0123c		 |$LN21@SendComman|
  0123c		 |$LN22@SendComman|
  0123c	00000000	 DCD         |m_pbRegisters|
  01240		 |$LN23@SendComman|
  01240	00000000	 DCD         |m_fCardInitialized|
  01244		 |$LN24@SendComman|
  01244	00000000	 DCD         |m_TransferClass|
  01248		 |$LN25@SendComman|
  01248	00000000	 DCD         |gwaCMD|
  0124c		 |$LN26@SendComman|
  0124c	00000000	 DCD         |m_dwSDIOCard|
  01250		 |$M44862|

			 ENDP  ; |SendCommand|


  000a0			 AREA	 |.pdata|, PDATA
|$T44875| DCD	|$LN5@Write_MMC_|
	DCD	0x40000b03
; Function compile flags: /Odtp

  01250			 AREA	 |.text|, CODE, ARM

  01250		 |Write_MMC_STAT| PROC

; 399  : {

  01250		 |$LN5@Write_MMC_|
  01250	e1a0c00d	 mov         r12, sp
  01254	e92d0001	 stmdb       sp!, {r0}
  01258	e92d5000	 stmdb       sp!, {r12, lr}
  0125c		 |$M44872|

; 400  :     OUTREG32(&m_pbRegisters->MMCHS_STAT, dwVal);

  0125c	e59f3014	 ldr         r3, [pc, #0x14]
  01260	e5933000	 ldr         r3, [r3]
  01264	e2832e13	 add         r2, r3, #0x13, 28
  01268	e59d3008	 ldr         r3, [sp, #8]
  0126c	e5823000	 str         r3, [r2]

; 401  : }

  01270	e89d6000	 ldmia       sp, {sp, lr}
  01274	e12fff1e	 bx          lr
  01278		 |$LN6@Write_MMC_|
  01278		 |$LN7@Write_MMC_|
  01278	00000000	 DCD         |m_pbRegisters|
  0127c		 |$M44873|

			 ENDP  ; |Write_MMC_STAT|

	EXPORT	|??_C@_1EG@HOIABLIC@?$AAS?$AAD?$AAH?$AAC?$AA?3?$AA?5?$AAS?$AAD?$AAI?$AAP?$AAo?$AAl?$AAl?$AAi?$AAn?$AAg?$AAR?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AA?$CI?$AA?$CJ?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GA@HNKHACLA@?$AAS?$AAD?$AAH?$AAC?$AA?3?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAg?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAr?$AAe?$AAs?$AAp?$AAo?$AAn?$AAs?$AAe?$AA?5?$AAf?$AAo?$AAr@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EM@JOOFMKFB@?$AAS?$AAD?$AAH?$AAC?$AA?3?$AA?5?$AAc?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AA?5?$AAr?$AAe?$AAs?$AAp?$AAo?$AAn?$AAs?$AAe?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?5?$AAC@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EO@LNFDCIBN@?$AAS?$AAD?$AAH?$AAC?$AA?3?$AA?5?$AAc?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AA?5?$AAr?$AAe?$AAs?$AAp?$AAo?$AAn?$AAs?$AAe?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?5?$AAD@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EM@PLCIGAJB@?$AAS?$AAD?$AAH?$AAC?$AA?3?$AA?5?$AAc?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AA?5?$AAr?$AAe?$AAs?$AAp?$AAo?$AAn?$AAs?$AAe?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?5?$AAD@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DG@OHDKIEBD@?$AAS?$AAD?$AAH?$AAC?$AA?3?$AA?5?$AAc?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AA?5?$AAC?$AAR?$AAC?$AA?5?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DG@MBAMAGDP@?$AAS?$AAD?$AAH?$AAC?$AA?3?$AA?5?$AAC?$AAa?$AAr?$AAd?$AA?5?$AAB?$AAU?$AAS?$AAY?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CM@GCMKJBGI@?$AAS?$AAD?$AAH?$AAC?$AA?3?$AA?5?$AAC?$AAa?$AAr?$AAd?$AA?5?$AAr?$AAe?$AAm?$AAo?$AAv?$AAe?$AAd?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|__rt_sdiv|

  000a8			 AREA	 |.pdata|, PDATA
|$T44906| DCD	|$LN61@CommandCom|
	DCD	0x4001f804

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EG@HOIABLIC@?$AAS?$AAD?$AAH?$AAC?$AA?3?$AA?5?$AAS?$AAD?$AAI?$AAP?$AAo?$AAl?$AAl?$AAi?$AAn?$AAg?$AAR?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AA?$CI?$AA?$CJ?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd@| DCB "S"
	DCB	0x0, "D", 0x0, "H", 0x0, "C", 0x0, ":", 0x0, " ", 0x0, "S"
	DCB	0x0, "D", 0x0, "I", 0x0, "P", 0x0, "o", 0x0, "l", 0x0, "l"
	DCB	0x0, "i", 0x0, "n", 0x0, "g", 0x0, "R", 0x0, "e", 0x0, "c"
	DCB	0x0, "e", 0x0, "i", 0x0, "v", 0x0, "e", 0x0, "(", 0x0, ")"
	DCB	0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e"
	DCB	0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GA@HNKHACLA@?$AAS?$AAD?$AAH?$AAC?$AA?3?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAg?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAr?$AAe?$AAs?$AAp?$AAo?$AAn?$AAs?$AAe?$AA?5?$AAf?$AAo?$AAr@| DCB "S"
	DCB	0x0, "D", 0x0, "H", 0x0, "C", 0x0, ":", 0x0, " ", 0x0, "E"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "g"
	DCB	0x0, "e", 0x0, "t", 0x0, "t", 0x0, "i", 0x0, "n", 0x0, "g"
	DCB	0x0, " ", 0x0, "r", 0x0, "e", 0x0, "s", 0x0, "p", 0x0, "o"
	DCB	0x0, "n", 0x0, "s", 0x0, "e", 0x0, " ", 0x0, "f", 0x0, "o"
	DCB	0x0, "r", 0x0, " ", 0x0, "c", 0x0, "o", 0x0, "m", 0x0, "m"
	DCB	0x0, "a", 0x0, "n", 0x0, "d", 0x0, ":", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EM@JOOFMKFB@?$AAS?$AAD?$AAH?$AAC?$AA?3?$AA?5?$AAc?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AA?5?$AAr?$AAe?$AAs?$AAp?$AAo?$AAn?$AAs?$AAe?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?5?$AAC@| DCB "S"
	DCB	0x0, "D", 0x0, "H", 0x0, "C", 0x0, ":", 0x0, " ", 0x0, "c"
	DCB	0x0, "o", 0x0, "m", 0x0, "m", 0x0, "a", 0x0, "n", 0x0, "d"
	DCB	0x0, " ", 0x0, "r", 0x0, "e", 0x0, "s", 0x0, "p", 0x0, "o"
	DCB	0x0, "n", 0x0, "s", 0x0, "e", 0x0, " ", 0x0, "t", 0x0, "i"
	DCB	0x0, "m", 0x0, "e", 0x0, "o", 0x0, "u", 0x0, "t", 0x0, " "
	DCB	0x0, "C", 0x0, "T", 0x0, "O", 0x0, "!", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EO@LNFDCIBN@?$AAS?$AAD?$AAH?$AAC?$AA?3?$AA?5?$AAc?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AA?5?$AAr?$AAe?$AAs?$AAp?$AAo?$AAn?$AAs?$AAe?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?5?$AAD@| DCB "S"
	DCB	0x0, "D", 0x0, "H", 0x0, "C", 0x0, ":", 0x0, " ", 0x0, "c"
	DCB	0x0, "o", 0x0, "m", 0x0, "m", 0x0, "a", 0x0, "n", 0x0, "d"
	DCB	0x0, " ", 0x0, "r", 0x0, "e", 0x0, "s", 0x0, "p", 0x0, "o"
	DCB	0x0, "n", 0x0, "s", 0x0, "e", 0x0, " ", 0x0, "t", 0x0, "i"
	DCB	0x0, "m", 0x0, "e", 0x0, "o", 0x0, "u", 0x0, "t", 0x0, " "
	DCB	0x0, "D", 0x0, "C", 0x0, "R", 0x0, "C", 0x0, "!", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EM@PLCIGAJB@?$AAS?$AAD?$AAH?$AAC?$AA?3?$AA?5?$AAc?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AA?5?$AAr?$AAe?$AAs?$AAp?$AAo?$AAn?$AAs?$AAe?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?5?$AAD@| DCB "S"
	DCB	0x0, "D", 0x0, "H", 0x0, "C", 0x0, ":", 0x0, " ", 0x0, "c"
	DCB	0x0, "o", 0x0, "m", 0x0, "m", 0x0, "a", 0x0, "n", 0x0, "d"
	DCB	0x0, " ", 0x0, "r", 0x0, "e", 0x0, "s", 0x0, "p", 0x0, "o"
	DCB	0x0, "n", 0x0, "s", 0x0, "e", 0x0, " ", 0x0, "t", 0x0, "i"
	DCB	0x0, "m", 0x0, "e", 0x0, "o", 0x0, "u", 0x0, "t", 0x0, " "
	DCB	0x0, "D", 0x0, "T", 0x0, "O", 0x0, "!", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DG@OHDKIEBD@?$AAS?$AAD?$AAH?$AAC?$AA?3?$AA?5?$AAc?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AA?5?$AAC?$AAR?$AAC?$AA?5?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "D", 0x0, "H", 0x0, "C", 0x0, ":", 0x0, " ", 0x0, "c"
	DCB	0x0, "o", 0x0, "m", 0x0, "m", 0x0, "a", 0x0, "n", 0x0, "d"
	DCB	0x0, " ", 0x0, "C", 0x0, "R", 0x0, "C", 0x0, " ", 0x0, "e"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, "!", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DG@MBAMAGDP@?$AAS?$AAD?$AAH?$AAC?$AA?3?$AA?5?$AAC?$AAa?$AAr?$AAd?$AA?5?$AAB?$AAU?$AAS?$AAY?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "D", 0x0, "H", 0x0, "C", 0x0, ":", 0x0, " ", 0x0, "C"
	DCB	0x0, "a", 0x0, "r", 0x0, "d", 0x0, " ", 0x0, "B", 0x0, "U"
	DCB	0x0, "S", 0x0, "Y", 0x0, " ", 0x0, "t", 0x0, "i", 0x0, "m"
	DCB	0x0, "e", 0x0, "o", 0x0, "u", 0x0, "t", 0x0, "!", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@GCMKJBGI@?$AAS?$AAD?$AAH?$AAC?$AA?3?$AA?5?$AAC?$AAa?$AAr?$AAd?$AA?5?$AAr?$AAe?$AAm?$AAo?$AAv?$AAe?$AAd?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "D", 0x0, "H", 0x0, "C", 0x0, ":", 0x0, " ", 0x0, "C"
	DCB	0x0, "a", 0x0, "r", 0x0, "d", 0x0, " ", 0x0, "r", 0x0, "e"
	DCB	0x0, "m", 0x0, "o", 0x0, "v", 0x0, "e", 0x0, "d", 0x0, "!"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  0127c			 AREA	 |.text|, CODE, ARM

  0127c		 |CommandCompleteHandler| PROC

; 943  : {

  0127c		 |$LN61@CommandCom|
  0127c	e1a0c00d	 mov         r12, sp
  01280	e92d0001	 stmdb       sp!, {r0}
  01284	e92d5000	 stmdb       sp!, {r12, lr}
  01288	e24dd080	 sub         sp, sp, #0x80
  0128c		 |$M44903|

; 944  :     DWORD               dwCurrentTickCount;
; 945  :     DWORD               dwTimeout;
; 946  :     DWORD               dwCountStart;
; 947  :     BOOL                fTimeoutOverflow = FALSE;

  0128c	e3a03000	 mov         r3, #0
  01290	e58d3008	 str         r3, [sp, #8]

; 948  :     SD_API_STATUS       status = SD_API_STATUS_PENDING;

  01294	e3a03001	 mov         r3, #1
  01298	e58d3018	 str         r3, [sp, #0x18]

; 949  :     DWORD MMC_STAT;
; 950  :     DWORD MmcPstateRegValue;
; 951  :     DWORD MmcStatBits;
; 952  : 
; 953  :     OALMSGX(OAL_FUNC, (TEXT("SDHC CommandCompleteHandler\r\n")));
; 954  : 
; 955  :     MMC_STAT = Read_MMC_STAT();

  0129c	eb000000	 bl          Read_MMC_STAT
  012a0	e58d0030	 str         r0, [sp, #0x30]
  012a4	e59d3030	 ldr         r3, [sp, #0x30]
  012a8	e58d300c	 str         r3, [sp, #0xC]

; 956  :     MmcPstateRegValue = INREG32(&m_pbRegisters->MMCHS_PSTATE);

  012ac	e59f37a0	 ldr         r3, [pc, #0x7A0]
  012b0	e5933000	 ldr         r3, [r3]
  012b4	e2833f49	 add         r3, r3, #0x49, 30
  012b8	e5933000	 ldr         r3, [r3]
  012bc	e58d3004	 str         r3, [sp, #4]

; 957  : 
; 958  :     if ( MmcPstateRegValue & MMCHS_PSTAT_DATI )

  012c0	e59d3004	 ldr         r3, [sp, #4]
  012c4	e3130002	 tst         r3, #2
  012c8	0a000074	 beq         |$LN34@CommandCom|

; 959  :     {
; 960  :         if ( pRequest->CommandResponse.ResponseType == ResponseR1b )

  012cc	e59d3088	 ldr         r3, [sp, #0x88]
  012d0	e283301c	 add         r3, r3, #0x1C
  012d4	e5933000	 ldr         r3, [r3]
  012d8	e3530002	 cmp         r3, #2
  012dc	1a00006f	 bne         |$LN33@CommandCom|

; 961  :         {
; 962  :             OALMSGX(OAL_WARN, (TEXT("SDHC: Card busy after command\r\n")));
; 963  :             // calculate timeout conditions
; 964  :             dwCountStart = OALGetTickCount();

  012e0	eb000000	 bl          OALGetTickCount
  012e4	e58d0034	 str         r0, [sp, #0x34]
  012e8	e59d3034	 ldr         r3, [sp, #0x34]
  012ec	e58d3010	 str         r3, [sp, #0x10]

; 965  :             dwTimeout = dwCountStart + m_dwMaxTimeout;

  012f0	e59d2010	 ldr         r2, [sp, #0x10]
  012f4	e59f375c	 ldr         r3, [pc, #0x75C]
  012f8	e5933000	 ldr         r3, [r3]
  012fc	e0823003	 add         r3, r2, r3
  01300	e58d301c	 str         r3, [sp, #0x1C]

; 966  :             if ( dwTimeout < dwCountStart )

  01304	e59d201c	 ldr         r2, [sp, #0x1C]
  01308	e59d3010	 ldr         r3, [sp, #0x10]
  0130c	e1520003	 cmp         r2, r3
  01310	2a000001	 bcs         |$LN32@CommandCom|

; 967  :                 fTimeoutOverflow = TRUE;

  01314	e3a03001	 mov         r3, #1
  01318	e58d3008	 str         r3, [sp, #8]
  0131c		 |$LN32@CommandCom|

; 968  : 
; 969  :             MMC_STAT = Read_MMC_STAT();

  0131c	eb000000	 bl          Read_MMC_STAT
  01320	e58d0038	 str         r0, [sp, #0x38]
  01324	e59d3038	 ldr         r3, [sp, #0x38]
  01328	e58d300c	 str         r3, [sp, #0xC]

; 970  :             MmcPstateRegValue = INREG32(&m_pbRegisters->MMCHS_PSTATE);

  0132c	e59f3720	 ldr         r3, [pc, #0x720]
  01330	e5933000	 ldr         r3, [r3]
  01334	e2833f49	 add         r3, r3, #0x49, 30
  01338	e5933000	 ldr         r3, [r3]
  0133c	e58d3004	 str         r3, [sp, #4]
  01340		 |$LN31@CommandCom|

; 971  : 
; 972  :             while ( (MmcPstateRegValue & MMCHS_PSTAT_DATI) && !( MMC_STAT & ( MMCHS_STAT_CCRC | MMCHS_STAT_CTO | MMCHS_STAT_DCRC | MMCHS_STAT_DTO )) )

  01340	e59d3004	 ldr         r3, [sp, #4]
  01344	e3130002	 tst         r3, #2
  01348	0a000054	 beq         |$LN30@CommandCom|
  0134c	e59d300c	 ldr         r3, [sp, #0xC]
  01350	e3130833	 tst         r3, #0x33, 16
  01354	1a000051	 bne         |$LN30@CommandCom|

; 973  :             {
; 974  :                 OALStall(2 * 1000);

  01358	e3a00e7d	 mov         r0, #0x7D, 28
  0135c	eb000000	 bl          OALStall

; 975  : 
; 976  :                 MMC_STAT = Read_MMC_STAT();

  01360	eb000000	 bl          Read_MMC_STAT
  01364	e58d003c	 str         r0, [sp, #0x3C]
  01368	e59d303c	 ldr         r3, [sp, #0x3C]
  0136c	e58d300c	 str         r3, [sp, #0xC]

; 977  :                 MmcPstateRegValue = INREG32(&m_pbRegisters->MMCHS_PSTATE);

  01370	e59f36dc	 ldr         r3, [pc, #0x6DC]
  01374	e5933000	 ldr         r3, [r3]
  01378	e2833f49	 add         r3, r3, #0x49, 30
  0137c	e5933000	 ldr         r3, [r3]
  01380	e58d3004	 str         r3, [sp, #4]

; 978  : 
; 979  :                 // check for card ejection
; 980  :                 if ( !SdhcCardDetect() )

  01384	eb000000	 bl          SdhcCardDetect
  01388	e58d0040	 str         r0, [sp, #0x40]
  0138c	e59d3040	 ldr         r3, [sp, #0x40]
  01390	e3530000	 cmp         r3, #0
  01394	1a00000d	 bne         |$LN29@CommandCom|

; 981  :                 {
; 982  :                     OALMSG(OAL_ERROR, (TEXT("SDHC: Card removed!\r\n")));

  01398	e59f3694	 ldr         r3, [pc, #0x694]
  0139c	e5933440	 ldr         r3, [r3, #0x440]
  013a0	e3130001	 tst         r3, #1
  013a4	0a000004	 beq         |$LN37@CommandCom|
  013a8	e59f06a0	 ldr         r0, [pc, #0x6A0]
  013ac	eb000000	 bl          NKDbgPrintfW
  013b0	e3a03001	 mov         r3, #1
  013b4	e58d3044	 str         r3, [sp, #0x44]
  013b8	ea000001	 b           |$LN38@CommandCom|
  013bc		 |$LN37@CommandCom|
  013bc	e3a03000	 mov         r3, #0
  013c0	e58d3044	 str         r3, [sp, #0x44]
  013c4		 |$LN38@CommandCom|

; 983  :                     status = SD_API_STATUS_DEVICE_REMOVED;

  013c4	e3a03147	 mov         r3, #0x47, 2
  013c8	e58d3018	 str         r3, [sp, #0x18]

; 984  :                     goto TRANSFER_DONE;

  013cc	ea000169	 b           |$TRANSFER_DONE$44454|
  013d0		 |$LN29@CommandCom|

; 985  :                 }
; 986  : 
; 987  :                 // check for a timeout
; 988  :                 dwCurrentTickCount = OALGetTickCount();

  013d0	eb000000	 bl          OALGetTickCount
  013d4	e58d0048	 str         r0, [sp, #0x48]
  013d8	e59d3048	 ldr         r3, [sp, #0x48]
  013dc	e58d3014	 str         r3, [sp, #0x14]

; 989  :                 if ( fTimeoutOverflow ? ( dwTimeout < dwCurrentTickCount && dwCurrentTickCount < dwCountStart )
; 990  :                     : ( dwTimeout < dwCurrentTickCount ) )

  013e0	e59d3008	 ldr         r3, [sp, #8]
  013e4	e3530000	 cmp         r3, #0
  013e8	0a00000f	 beq         |$LN43@CommandCom|
  013ec	e59d201c	 ldr         r2, [sp, #0x1C]
  013f0	e59d3014	 ldr         r3, [sp, #0x14]
  013f4	e1520003	 cmp         r2, r3
  013f8	2a000006	 bcs         |$LN39@CommandCom|
  013fc	e59d2014	 ldr         r2, [sp, #0x14]
  01400	e59d3010	 ldr         r3, [sp, #0x10]
  01404	e1520003	 cmp         r2, r3
  01408	2a000002	 bcs         |$LN39@CommandCom|
  0140c	e3a03001	 mov         r3, #1
  01410	e58d304c	 str         r3, [sp, #0x4C]
  01414	ea000001	 b           |$LN42@CommandCom|
  01418		 |$LN39@CommandCom|
  01418	e3a03000	 mov         r3, #0
  0141c	e58d304c	 str         r3, [sp, #0x4C]
  01420		 |$LN42@CommandCom|
  01420	e59d304c	 ldr         r3, [sp, #0x4C]
  01424	e58d3050	 str         r3, [sp, #0x50]
  01428	ea00000a	 b           |$LN44@CommandCom|
  0142c		 |$LN43@CommandCom|
  0142c	e59d201c	 ldr         r2, [sp, #0x1C]
  01430	e59d3014	 ldr         r3, [sp, #0x14]
  01434	e1520003	 cmp         r2, r3
  01438	2a000002	 bcs         |$LN40@CommandCom|
  0143c	e3a03001	 mov         r3, #1
  01440	e58d3054	 str         r3, [sp, #0x54]
  01444	ea000001	 b           |$LN41@CommandCom|
  01448		 |$LN40@CommandCom|
  01448	e3a03000	 mov         r3, #0
  0144c	e58d3054	 str         r3, [sp, #0x54]
  01450		 |$LN41@CommandCom|
  01450	e59d3054	 ldr         r3, [sp, #0x54]
  01454	e58d3050	 str         r3, [sp, #0x50]
  01458		 |$LN44@CommandCom|
  01458	e59d3050	 ldr         r3, [sp, #0x50]
  0145c	e3530000	 cmp         r3, #0
  01460	0a00000d	 beq         |$LN28@CommandCom|

; 991  :                 {
; 992  :                     OALMSG(OAL_ERROR, (TEXT("SDHC: Card BUSY timeout!\r\n")));

  01464	e59f35c8	 ldr         r3, [pc, #0x5C8]
  01468	e5933440	 ldr         r3, [r3, #0x440]
  0146c	e3130001	 tst         r3, #1
  01470	0a000004	 beq         |$LN45@CommandCom|
  01474	e59f05d0	 ldr         r0, [pc, #0x5D0]
  01478	eb000000	 bl          NKDbgPrintfW
  0147c	e3a03001	 mov         r3, #1
  01480	e58d3058	 str         r3, [sp, #0x58]
  01484	ea000001	 b           |$LN46@CommandCom|
  01488		 |$LN45@CommandCom|
  01488	e3a03000	 mov         r3, #0
  0148c	e58d3058	 str         r3, [sp, #0x58]
  01490		 |$LN46@CommandCom|

; 993  :                     status = SD_API_STATUS_RESPONSE_TIMEOUT;

  01490	e3a03153	 mov         r3, #0x53, 2
  01494	e58d3018	 str         r3, [sp, #0x18]

; 994  :                     goto TRANSFER_DONE;

  01498	ea000136	 b           |$TRANSFER_DONE$44454|
  0149c		 |$LN28@CommandCom|

; 995  :                 }
; 996  :             }

  0149c	eaffffa7	 b           |$LN31@CommandCom|
  014a0		 |$LN30@CommandCom|
  014a0		 |$LN33@CommandCom|
  014a0		 |$LN34@CommandCom|

; 997  : 
; 998  :             //OALMSG(OAL_WARN, (TEXT("Card exited busy state.\r\n")));
; 999  :         }
; 1000 :     }
; 1001 : 
; 1002 :     MmcStatBits = 0;

  014a0	e3a03000	 mov         r3, #0
  014a4	e58d3000	 str         r3, [sp]

; 1003 : 
; 1004 :     if ( MMC_STAT & MMCHS_STAT_CCRC ) // command CRC error

  014a8	e59d300c	 ldr         r3, [sp, #0xC]
  014ac	e3130802	 tst         r3, #2, 16
  014b0	0a00000f	 beq         |$LN27@CommandCom|

; 1005 :     {
; 1006 :         status = SD_API_STATUS_CRC_ERROR;

  014b4	e3a03137	 mov         r3, #0x37, 2
  014b8	e58d3018	 str         r3, [sp, #0x18]

; 1007 :         MmcStatBits |= MMCHS_STAT_CCRC;

  014bc	e59d3000	 ldr         r3, [sp]
  014c0	e3833802	 orr         r3, r3, #2, 16
  014c4	e58d3000	 str         r3, [sp]

; 1008 :         OALMSG(OAL_ERROR, (TEXT("SDHC: command CRC error!\r\n")));

  014c8	e59f3564	 ldr         r3, [pc, #0x564]
  014cc	e5933440	 ldr         r3, [r3, #0x440]
  014d0	e3130001	 tst         r3, #1
  014d4	0a000004	 beq         |$LN47@CommandCom|
  014d8	e59f0568	 ldr         r0, [pc, #0x568]
  014dc	eb000000	 bl          NKDbgPrintfW
  014e0	e3a03001	 mov         r3, #1
  014e4	e58d305c	 str         r3, [sp, #0x5C]
  014e8	ea000001	 b           |$LN48@CommandCom|
  014ec		 |$LN47@CommandCom|
  014ec	e3a03000	 mov         r3, #0
  014f0	e58d305c	 str         r3, [sp, #0x5C]
  014f4		 |$LN48@CommandCom|
  014f4		 |$LN27@CommandCom|

; 1009 :     }
; 1010 :     if ( MMC_STAT & MMCHS_STAT_DTO ) // data timeout

  014f4	e59d300c	 ldr         r3, [sp, #0xC]
  014f8	e3130601	 tst         r3, #1, 12
  014fc	0a00000f	 beq         |$LN26@CommandCom|

; 1011 :     {
; 1012 :         status = SD_API_STATUS_RESPONSE_TIMEOUT;

  01500	e3a03153	 mov         r3, #0x53, 2
  01504	e58d3018	 str         r3, [sp, #0x18]

; 1013 :         MmcStatBits |= MMCHS_STAT_DTO;

  01508	e59d3000	 ldr         r3, [sp]
  0150c	e3833601	 orr         r3, r3, #1, 12
  01510	e58d3000	 str         r3, [sp]

; 1014 :         OALMSG(OAL_ERROR, (TEXT("SDHC: command response timeout DTO!\r\n")));

  01514	e59f3518	 ldr         r3, [pc, #0x518]
  01518	e5933440	 ldr         r3, [r3, #0x440]
  0151c	e3130001	 tst         r3, #1
  01520	0a000004	 beq         |$LN49@CommandCom|
  01524	e59f0518	 ldr         r0, [pc, #0x518]
  01528	eb000000	 bl          NKDbgPrintfW
  0152c	e3a03001	 mov         r3, #1
  01530	e58d3060	 str         r3, [sp, #0x60]
  01534	ea000001	 b           |$LN50@CommandCom|
  01538		 |$LN49@CommandCom|
  01538	e3a03000	 mov         r3, #0
  0153c	e58d3060	 str         r3, [sp, #0x60]
  01540		 |$LN50@CommandCom|
  01540		 |$LN26@CommandCom|

; 1015 :     }
; 1016 :     if ( MMC_STAT & MMCHS_STAT_DCRC ) // data CRC error

  01540	e59d300c	 ldr         r3, [sp, #0xC]
  01544	e3130602	 tst         r3, #2, 12
  01548	0a00000f	 beq         |$LN25@CommandCom|

; 1017 :     {
; 1018 :         status = SD_API_STATUS_RESPONSE_TIMEOUT;

  0154c	e3a03153	 mov         r3, #0x53, 2
  01550	e58d3018	 str         r3, [sp, #0x18]

; 1019 :         MmcStatBits |= MMCHS_STAT_DCRC;

  01554	e59d3000	 ldr         r3, [sp]
  01558	e3833602	 orr         r3, r3, #2, 12
  0155c	e58d3000	 str         r3, [sp]

; 1020 :         OALMSG(OAL_ERROR, (TEXT("SDHC: command response timeout DCRC!\r\n")));

  01560	e59f34cc	 ldr         r3, [pc, #0x4CC]
  01564	e5933440	 ldr         r3, [r3, #0x440]
  01568	e3130001	 tst         r3, #1
  0156c	0a000004	 beq         |$LN51@CommandCom|
  01570	e59f04c8	 ldr         r0, [pc, #0x4C8]
  01574	eb000000	 bl          NKDbgPrintfW
  01578	e3a03001	 mov         r3, #1
  0157c	e58d3064	 str         r3, [sp, #0x64]
  01580	ea000001	 b           |$LN52@CommandCom|
  01584		 |$LN51@CommandCom|
  01584	e3a03000	 mov         r3, #0
  01588	e58d3064	 str         r3, [sp, #0x64]
  0158c		 |$LN52@CommandCom|
  0158c		 |$LN25@CommandCom|

; 1021 :     }
; 1022 :     if ( MMC_STAT & MMCHS_STAT_CTO ) // command response timeout

  0158c	e59d300c	 ldr         r3, [sp, #0xC]
  01590	e3130801	 tst         r3, #1, 16
  01594	0a00000f	 beq         |$LN24@CommandCom|

; 1023 :     {
; 1024 :         status = SD_API_STATUS_RESPONSE_TIMEOUT;

  01598	e3a03153	 mov         r3, #0x53, 2
  0159c	e58d3018	 str         r3, [sp, #0x18]

; 1025 :         MmcStatBits |= MMCHS_STAT_CTO;

  015a0	e59d3000	 ldr         r3, [sp]
  015a4	e3833801	 orr         r3, r3, #1, 16
  015a8	e58d3000	 str         r3, [sp]

; 1026 :         OALMSG(OAL_ERROR, (TEXT("SDHC: command response timeout CTO!\r\n")));

  015ac	e59f3480	 ldr         r3, [pc, #0x480]
  015b0	e5933440	 ldr         r3, [r3, #0x440]
  015b4	e3130001	 tst         r3, #1
  015b8	0a000004	 beq         |$LN53@CommandCom|
  015bc	e59f0478	 ldr         r0, [pc, #0x478]
  015c0	eb000000	 bl          NKDbgPrintfW
  015c4	e3a03001	 mov         r3, #1
  015c8	e58d3068	 str         r3, [sp, #0x68]
  015cc	ea000001	 b           |$LN54@CommandCom|
  015d0		 |$LN53@CommandCom|
  015d0	e3a03000	 mov         r3, #0
  015d4	e58d3068	 str         r3, [sp, #0x68]
  015d8		 |$LN54@CommandCom|
  015d8		 |$LN24@CommandCom|

; 1027 :     }
; 1028 :     if ( MmcStatBits ) 

  015d8	e59d3000	 ldr         r3, [sp]
  015dc	e3530000	 cmp         r3, #0
  015e0	0a000002	 beq         |$LN23@CommandCom|

; 1029 :     {
; 1030 :         // clear the status error bits
; 1031 :         Write_MMC_STAT(MmcStatBits);

  015e4	e59d0000	 ldr         r0, [sp]
  015e8	eb000000	 bl          Write_MMC_STAT

; 1032 :         goto TRANSFER_DONE;

  015ec	ea0000e1	 b           |$TRANSFER_DONE$44454|
  015f0		 |$LN23@CommandCom|

; 1033 :     }
; 1034 : 
; 1035 :     // get the response information
; 1036 :     if (pRequest->CommandResponse.ResponseType == NoResponse)

  015f0	e59d3088	 ldr         r3, [sp, #0x88]
  015f4	e283301c	 add         r3, r3, #0x1C
  015f8	e5933000	 ldr         r3, [r3]
  015fc	e3530000	 cmp         r3, #0
  01600	1a000003	 bne         |$LN22@CommandCom|

; 1037 :     {
; 1038 :         OALMSGX(OAL_IO, (TEXT("SDHC: no response (none expected)\r\n")));
; 1039 :         status = SD_API_STATUS_SUCCESS;

  01604	e3a03000	 mov         r3, #0
  01608	e58d3018	 str         r3, [sp, #0x18]

; 1040 :         goto TRANSFER_DONE;

  0160c	ea0000d9	 b           |$TRANSFER_DONE$44454|

; 1041 :     }
; 1042 :     else

  01610	ea000016	 b           |$LN21@CommandCom|
  01614		 |$LN22@CommandCom|

; 1043 :     {
; 1044 :         status =  GetCommandResponse(pRequest);

  01614	e59d0088	 ldr         r0, [sp, #0x88]
  01618	eb000000	 bl          GetCommandResponse
  0161c	e58d006c	 str         r0, [sp, #0x6C]
  01620	e59d306c	 ldr         r3, [sp, #0x6C]
  01624	e58d3018	 str         r3, [sp, #0x18]

; 1045 :         if (!SD_API_SUCCESS(status))

  01628	e59d3018	 ldr         r3, [sp, #0x18]
  0162c	e3530000	 cmp         r3, #0
  01630	aa00000e	 bge         |$LN20@CommandCom|

; 1046 :         {
; 1047 :             OALMSG(OAL_ERROR, (TEXT("SDHC: Error getting response for command:0x%x\r\n"), pRequest->CommandCode));

  01634	e59f33f8	 ldr         r3, [pc, #0x3F8]
  01638	e5933440	 ldr         r3, [r3, #0x440]
  0163c	e3130001	 tst         r3, #1
  01640	0a000007	 beq         |$LN55@CommandCom|
  01644	e59d3088	 ldr         r3, [sp, #0x88]
  01648	e2833014	 add         r3, r3, #0x14
  0164c	e5d31000	 ldrb        r1, [r3]
  01650	e59f03e0	 ldr         r0, [pc, #0x3E0]
  01654	eb000000	 bl          NKDbgPrintfW
  01658	e3a03001	 mov         r3, #1
  0165c	e58d3070	 str         r3, [sp, #0x70]
  01660	ea000001	 b           |$LN56@CommandCom|
  01664		 |$LN55@CommandCom|
  01664	e3a03000	 mov         r3, #0
  01668	e58d3070	 str         r3, [sp, #0x70]
  0166c		 |$LN56@CommandCom|

; 1048 :             goto TRANSFER_DONE;     

  0166c	ea0000c1	 b           |$TRANSFER_DONE$44454|
  01670		 |$LN20@CommandCom|
  01670		 |$LN21@CommandCom|

; 1049 :         }
; 1050 :     }
; 1051 : 
; 1052 :     if (SD_COMMAND != pRequest->TransferClass) // data transfer

  01670	e59d3088	 ldr         r3, [sp, #0x88]
  01674	e2833010	 add         r3, r3, #0x10
  01678	e5933000	 ldr         r3, [r3]
  0167c	e3530002	 cmp         r3, #2
  01680	0a0000bc	 beq         |$LN19@CommandCom|

; 1053 :     {
; 1054 :         DWORD cbTransfer = TRANSFER_SIZE(pRequest);

  01684	e59d3088	 ldr         r3, [sp, #0x88]
  01688	e2832040	 add         r2, r3, #0x40
  0168c	e59d3088	 ldr         r3, [sp, #0x88]
  01690	e283303c	 add         r3, r3, #0x3C
  01694	e5922000	 ldr         r2, [r2]
  01698	e5933000	 ldr         r3, [r3]
  0169c	e0030392	 mul         r3, r2, r3
  016a0	e58d3020	 str         r3, [sp, #0x20]

; 1055 :         BOOL     fRet;
; 1056 : 
; 1057 :         switch (pRequest->TransferClass)

  016a4	e59d3088	 ldr         r3, [sp, #0x88]
  016a8	e2833010	 add         r3, r3, #0x10
  016ac	e5933000	 ldr         r3, [r3]
  016b0	e3530000	 cmp         r3, #0
  016b4	0a000000	 beq         |$LN16@CommandCom|
  016b8	ea0000a5	 b           |$LN17@CommandCom|
  016bc		 |$LN16@CommandCom|

; 1058 :         {
; 1059 :         case SD_READ:
; 1060 :             fRet = SDIPollingReceive(pRequest->pBlockBuffer, cbTransfer);

  016bc	e59d1020	 ldr         r1, [sp, #0x20]
  016c0	e59d3088	 ldr         r3, [sp, #0x88]
  016c4	e2833048	 add         r3, r3, #0x48
  016c8	e5930000	 ldr         r0, [r3]
  016cc	eb000000	 bl          SDIPollingReceive
  016d0	e58d0074	 str         r0, [sp, #0x74]
  016d4	e59d3074	 ldr         r3, [sp, #0x74]
  016d8	e58d3024	 str         r3, [sp, #0x24]

; 1061 :             if (!fRet)

  016dc	e59d3024	 ldr         r3, [sp, #0x24]
  016e0	e3530000	 cmp         r3, #0
  016e4	1a00000e	 bne         |$LN15@CommandCom|

; 1062 :             {
; 1063 :                 OALMSG(OAL_ERROR, (TEXT("SDHC: SDIPollingReceive() failed\r\n")));

  016e8	e59f3344	 ldr         r3, [pc, #0x344]
  016ec	e5933440	 ldr         r3, [r3, #0x440]
  016f0	e3130001	 tst         r3, #1
  016f4	0a000004	 beq         |$LN57@CommandCom|
  016f8	e59f0330	 ldr         r0, [pc, #0x330]
  016fc	eb000000	 bl          NKDbgPrintfW
  01700	e3a03001	 mov         r3, #1
  01704	e58d3078	 str         r3, [sp, #0x78]
  01708	ea000001	 b           |$LN58@CommandCom|
  0170c		 |$LN57@CommandCom|
  0170c	e3a03000	 mov         r3, #0
  01710	e58d3078	 str         r3, [sp, #0x78]
  01714		 |$LN58@CommandCom|

; 1064 :                 status = SD_API_STATUS_DATA_ERROR;

  01714	e3a03133	 mov         r3, #0x33, 2
  01718	e58d3018	 str         r3, [sp, #0x18]

; 1065 :                 goto TRANSFER_DONE;

  0171c	ea000095	 b           |$TRANSFER_DONE$44454|

; 1066 :             }
; 1067 :             else

  01720	ea00008b	 b           |$LN14@CommandCom|
  01724		 |$LN15@CommandCom|

; 1068 :             {
; 1069 : #ifdef DEBUG
; 1070 :                 DWORD dwTemp = 0;

  01724	e3a03000	 mov         r3, #0
  01728	e58d3028	 str         r3, [sp, #0x28]
  0172c		 |$LN13@CommandCom|

; 1071 :                 while ( dwTemp < cbTransfer && (dwTemp < (HEXBUFSIZE / 2 - 1) ) )

  0172c	e59d2028	 ldr         r2, [sp, #0x28]
  01730	e59d3020	 ldr         r3, [sp, #0x20]
  01734	e1520003	 cmp         r2, r3
  01738	2a00007e	 bcs         |$LN12@CommandCom|
  0173c	e59d2028	 ldr         r2, [sp, #0x28]
  01740	e3a03c01	 mov         r3, #1, 24
  01744	e38330ff	 orr         r3, r3, #0xFF
  01748	e1520003	 cmp         r2, r3
  0174c	2a000079	 bcs         |$LN12@CommandCom|

; 1072 :                 {
; 1073 :                     szHexBuf[dwTemp*2] = pRequest->pBlockBuffer[dwTemp] / 16;

  01750	e59d3088	 ldr         r3, [sp, #0x88]
  01754	e2833048	 add         r3, r3, #0x48
  01758	e5932000	 ldr         r2, [r3]
  0175c	e59d3028	 ldr         r3, [sp, #0x28]
  01760	e0823003	 add         r3, r2, r3
  01764	e5d33000	 ldrb        r3, [r3]
  01768	e1a01003	 mov         r1, r3
  0176c	e3a00010	 mov         r0, #0x10
  01770	eb000000	 bl          __rt_sdiv
  01774	e59d1028	 ldr         r1, [sp, #0x28]
  01778	e3a03002	 mov         r3, #2
  0177c	e0020391	 mul         r2, r1, r3
  01780	e59f32a4	 ldr         r3, [pc, #0x2A4]
  01784	e0832002	 add         r2, r3, r2
  01788	e1a03c00	 mov         r3, r0, lsl #24
  0178c	e1a03c43	 mov         r3, r3, asr #24
  01790	e5c23000	 strb        r3, [r2]

; 1074 :                     szHexBuf[dwTemp*2+1] = pRequest->pBlockBuffer[dwTemp] % 16;

  01794	e59d3088	 ldr         r3, [sp, #0x88]
  01798	e2833048	 add         r3, r3, #0x48
  0179c	e5932000	 ldr         r2, [r3]
  017a0	e59d3028	 ldr         r3, [sp, #0x28]
  017a4	e0823003	 add         r3, r2, r3
  017a8	e5d33000	 ldrb        r3, [r3]
  017ac	e1a01003	 mov         r1, r3
  017b0	e3a00010	 mov         r0, #0x10
  017b4	eb000000	 bl          __rt_sdiv
  017b8	e59d2028	 ldr         r2, [sp, #0x28]
  017bc	e3a03002	 mov         r3, #2
  017c0	e0030392	 mul         r3, r2, r3
  017c4	e2832001	 add         r2, r3, #1
  017c8	e59f325c	 ldr         r3, [pc, #0x25C]
  017cc	e0832002	 add         r2, r3, r2
  017d0	e1a03c01	 mov         r3, r1, lsl #24
  017d4	e1a03c43	 mov         r3, r3, asr #24
  017d8	e5c23000	 strb        r3, [r2]

; 1075 : 
; 1076 :                     if ( szHexBuf[dwTemp*2] < 10 )

  017dc	e59d1028	 ldr         r1, [sp, #0x28]
  017e0	e3a03002	 mov         r3, #2
  017e4	e0020391	 mul         r2, r1, r3
  017e8	e59f323c	 ldr         r3, [pc, #0x23C]
  017ec	e0833002	 add         r3, r3, r2
  017f0	e1d330d0	 ldrsb       r3, [r3]
  017f4	e353000a	 cmp         r3, #0xA
  017f8	aa00000f	 bge         |$LN11@CommandCom|

; 1077 :                         szHexBuf[dwTemp*2] += '0';

  017fc	e59d1028	 ldr         r1, [sp, #0x28]
  01800	e3a03002	 mov         r3, #2
  01804	e0020391	 mul         r2, r1, r3
  01808	e59f321c	 ldr         r3, [pc, #0x21C]
  0180c	e0833002	 add         r3, r3, r2
  01810	e1d330d0	 ldrsb       r3, [r3]
  01814	e2830030	 add         r0, r3, #0x30
  01818	e59d1028	 ldr         r1, [sp, #0x28]
  0181c	e3a03002	 mov         r3, #2
  01820	e0020391	 mul         r2, r1, r3
  01824	e59f3200	 ldr         r3, [pc, #0x200]
  01828	e0832002	 add         r2, r3, r2
  0182c	e1a03c00	 mov         r3, r0, lsl #24
  01830	e1a03c43	 mov         r3, r3, asr #24
  01834	e5c23000	 strb        r3, [r2]

; 1078 :                     else

  01838	ea00000e	 b           |$LN10@CommandCom|
  0183c		 |$LN11@CommandCom|

; 1079 :                         szHexBuf[dwTemp*2] += 'a' - 10;

  0183c	e59d1028	 ldr         r1, [sp, #0x28]
  01840	e3a03002	 mov         r3, #2
  01844	e0020391	 mul         r2, r1, r3
  01848	e59f31dc	 ldr         r3, [pc, #0x1DC]
  0184c	e0833002	 add         r3, r3, r2
  01850	e1d330d0	 ldrsb       r3, [r3]
  01854	e2830057	 add         r0, r3, #0x57
  01858	e59d1028	 ldr         r1, [sp, #0x28]
  0185c	e3a03002	 mov         r3, #2
  01860	e0020391	 mul         r2, r1, r3
  01864	e59f31c0	 ldr         r3, [pc, #0x1C0]
  01868	e0832002	 add         r2, r3, r2
  0186c	e1a03c00	 mov         r3, r0, lsl #24
  01870	e1a03c43	 mov         r3, r3, asr #24
  01874	e5c23000	 strb        r3, [r2]
  01878		 |$LN10@CommandCom|

; 1080 : 
; 1081 :                     if ( szHexBuf[dwTemp*2+1] < 10 )

  01878	e59d2028	 ldr         r2, [sp, #0x28]
  0187c	e3a03002	 mov         r3, #2
  01880	e0030392	 mul         r3, r2, r3
  01884	e2832001	 add         r2, r3, #1
  01888	e59f319c	 ldr         r3, [pc, #0x19C]
  0188c	e0833002	 add         r3, r3, r2
  01890	e1d330d0	 ldrsb       r3, [r3]
  01894	e353000a	 cmp         r3, #0xA
  01898	aa000011	 bge         |$LN9@CommandCom|

; 1082 :                         szHexBuf[dwTemp*2+1] += '0';

  0189c	e59d2028	 ldr         r2, [sp, #0x28]
  018a0	e3a03002	 mov         r3, #2
  018a4	e0030392	 mul         r3, r2, r3
  018a8	e2832001	 add         r2, r3, #1
  018ac	e59f3178	 ldr         r3, [pc, #0x178]
  018b0	e0833002	 add         r3, r3, r2
  018b4	e1d330d0	 ldrsb       r3, [r3]
  018b8	e2831030	 add         r1, r3, #0x30
  018bc	e59d2028	 ldr         r2, [sp, #0x28]
  018c0	e3a03002	 mov         r3, #2
  018c4	e0030392	 mul         r3, r2, r3
  018c8	e2832001	 add         r2, r3, #1
  018cc	e59f3158	 ldr         r3, [pc, #0x158]
  018d0	e0832002	 add         r2, r3, r2
  018d4	e1a03c01	 mov         r3, r1, lsl #24
  018d8	e1a03c43	 mov         r3, r3, asr #24
  018dc	e5c23000	 strb        r3, [r2]

; 1083 :                     else

  018e0	ea000010	 b           |$LN8@CommandCom|
  018e4		 |$LN9@CommandCom|

; 1084 :                         szHexBuf[dwTemp*2+1] += 'a' - 10;

  018e4	e59d2028	 ldr         r2, [sp, #0x28]
  018e8	e3a03002	 mov         r3, #2
  018ec	e0030392	 mul         r3, r2, r3
  018f0	e2832001	 add         r2, r3, #1
  018f4	e59f3130	 ldr         r3, [pc, #0x130]
  018f8	e0833002	 add         r3, r3, r2
  018fc	e1d330d0	 ldrsb       r3, [r3]
  01900	e2831057	 add         r1, r3, #0x57
  01904	e59d2028	 ldr         r2, [sp, #0x28]
  01908	e3a03002	 mov         r3, #2
  0190c	e0030392	 mul         r3, r2, r3
  01910	e2832001	 add         r2, r3, #1
  01914	e59f3110	 ldr         r3, [pc, #0x110]
  01918	e0832002	 add         r2, r3, r2
  0191c	e1a03c01	 mov         r3, r1, lsl #24
  01920	e1a03c43	 mov         r3, r3, asr #24
  01924	e5c23000	 strb        r3, [r2]
  01928		 |$LN8@CommandCom|

; 1085 : 
; 1086 :                     dwTemp++;

  01928	e59d3028	 ldr         r3, [sp, #0x28]
  0192c	e2833001	 add         r3, r3, #1
  01930	e58d3028	 str         r3, [sp, #0x28]

; 1087 :                 }

  01934	eaffff7c	 b           |$LN13@CommandCom|
  01938		 |$LN12@CommandCom|

; 1088 :                 szHexBuf[dwTemp*2] = 0;

  01938	e59d1028	 ldr         r1, [sp, #0x28]
  0193c	e3a03002	 mov         r3, #2
  01940	e0020391	 mul         r2, r1, r3
  01944	e59f30e0	 ldr         r3, [pc, #0xE0]
  01948	e0832002	 add         r2, r3, r2
  0194c	e3a03000	 mov         r3, #0
  01950	e5c23000	 strb        r3, [r2]
  01954		 |$LN14@CommandCom|
  01954		 |$LN17@CommandCom|

; 1089 :                 OALMSGX(OAL_IO, (TEXT("PollingReceive succesfully received %d bytes\r\n  {%S}\r\n"), cbTransfer, szHexBuf));
; 1090 : #endif
; 1091 :             }
; 1092 :             break;
; 1093 : 
; 1094 : #if 0
; 1095 :         case SD_WRITE:
; 1096 :             {
; 1097 : #ifdef DEBUG
; 1098 :                 DWORD dwTemp = 0;
; 1099 :                 while ( dwTemp < cbTransfer && (dwTemp < (HEXBUFSIZE / 2 - 1) ) )
; 1100 :                 {
; 1101 :                     szHexBuf[dwTemp*2] = pRequest->pBlockBuffer[dwTemp] / 16;
; 1102 :                     szHexBuf[dwTemp*2+1] = pRequest->pBlockBuffer[dwTemp] % 16;
; 1103 : 
; 1104 :                     if ( szHexBuf[dwTemp*2] < 10 )
; 1105 :                         szHexBuf[dwTemp*2] += '0';
; 1106 :                     else
; 1107 :                         szHexBuf[dwTemp*2] += 'a' - 10;
; 1108 : 
; 1109 :                     if ( szHexBuf[dwTemp*2+1] < 10 )
; 1110 :                         szHexBuf[dwTemp*2+1] += '0';
; 1111 :                     else
; 1112 :                         szHexBuf[dwTemp*2+1] += 'a' - 10;
; 1113 : 
; 1114 :                     dwTemp++;
; 1115 :                 }
; 1116 :                 szHexBuf[dwTemp*2] = 0;
; 1117 : #endif
; 1118 :             }
; 1119 : 
; 1120 :             fRet = SDIPollingTransmit(pRequest->pBlockBuffer, cbTransfer);
; 1121 :             if ( !fRet )
; 1122 :             {
; 1123 :                 OALMSG(OAL_ERROR, (TEXT("SDHC: SDIPollingTransmit() failed\r\n")));
; 1124 : #ifdef DEBUG
; 1125 :                 OALMSGX(OAL_IO, (TEXT("PollingTransmit failed to send %d bytes\r\n  {%S}\r\n"), cbTransfer, szHexBuf ));
; 1126 : #endif
; 1127 :                 status = SD_API_STATUS_DATA_ERROR;
; 1128 :                 goto TRANSFER_DONE;
; 1129 :             }
; 1130 : #ifdef DEBUG
; 1131 :             else
; 1132 :             {
; 1133 :                 OALMSGX(OAL_IO, (TEXT("PollingTransmit succesfully sent %d bytes\r\n  {%S}\r\n"), cbTransfer, szHexBuf ));
; 1134 :             }
; 1135 : #endif
; 1136 :             break;
; 1137 : #endif
; 1138 :         }
; 1139 : 
; 1140 :         if (!m_fCardPresent)

  01954	e59f30cc	 ldr         r3, [pc, #0xCC]
  01958	e5933000	 ldr         r3, [r3]
  0195c	e3530000	 cmp         r3, #0
  01960	1a000002	 bne         |$LN7@CommandCom|

; 1141 :             status = SD_API_STATUS_DEVICE_REMOVED;

  01964	e3a03147	 mov         r3, #0x47, 2
  01968	e58d3018	 str         r3, [sp, #0x18]

; 1142 :         else

  0196c	ea000001	 b           |$LN6@CommandCom|
  01970		 |$LN7@CommandCom|

; 1143 :             status = SD_API_STATUS_SUCCESS;

  01970	e3a03000	 mov         r3, #0
  01974	e58d3018	 str         r3, [sp, #0x18]
  01978		 |$LN6@CommandCom|
  01978		 |$LN19@CommandCom|
  01978		 |$TRANSFER_DONE$44454|

; 1144 :     }
; 1145 : 
; 1146 : TRANSFER_DONE:
; 1147 : 
; 1148 :     if ( status == SD_API_STATUS_SUCCESS )

  01978	e59d3018	 ldr         r3, [sp, #0x18]
  0197c	e3530000	 cmp         r3, #0
  01980	1a00001a	 bne         |$LN5@CommandCom|

; 1149 :     {
; 1150 :         if ( m_fAppCmdMode )

  01984	e59f3098	 ldr         r3, [pc, #0x98]
  01988	e5933000	 ldr         r3, [r3]
  0198c	e3530000	 cmp         r3, #0
  01990	0a000003	 beq         |$LN4@CommandCom|

; 1151 :         {
; 1152 :             m_fAppCmdMode = FALSE;

  01994	e59f2088	 ldr         r2, [pc, #0x88]
  01998	e3a03000	 mov         r3, #0
  0199c	e5823000	 str         r3, [r2]
  019a0	ea00000a	 b           |$LN3@CommandCom|
  019a4		 |$LN4@CommandCom|

; 1153 :             OALMSGX(OAL_IO, (TEXT("SDHC: go to Standard Command Mode\r\n")));
; 1154 :         }
; 1155 :         else if ( pRequest && pRequest->CommandCode == 55 )

  019a4	e59d3088	 ldr         r3, [sp, #0x88]
  019a8	e3530000	 cmp         r3, #0
  019ac	0a000007	 beq         |$LN2@CommandCom|
  019b0	e59d3088	 ldr         r3, [sp, #0x88]
  019b4	e2833014	 add         r3, r3, #0x14
  019b8	e5d33000	 ldrb        r3, [r3]
  019bc	e3530037	 cmp         r3, #0x37
  019c0	1a000002	 bne         |$LN2@CommandCom|

; 1156 :         {
; 1157 :             m_fAppCmdMode = TRUE;

  019c4	e59f2058	 ldr         r2, [pc, #0x58]
  019c8	e3a03001	 mov         r3, #1
  019cc	e5823000	 str         r3, [r2]
  019d0		 |$LN2@CommandCom|
  019d0		 |$LN3@CommandCom|

; 1158 :             OALMSGX(OAL_IO, (TEXT("SDHC: go to Application Specific Command Mode\r\n")));
; 1159 :         }
; 1160 : 
; 1161 :         if ( pRequest->CommandCode == SD_CMD_MMC_SEND_OPCOND )

  019d0	e59d3088	 ldr         r3, [sp, #0x88]
  019d4	e2833014	 add         r3, r3, #0x14
  019d8	e5d33000	 ldrb        r3, [r3]
  019dc	e3530001	 cmp         r3, #1
  019e0	1a000002	 bne         |$LN1@CommandCom|

; 1162 :         {
; 1163 :             OALMSGX(OAL_IO, (TEXT("SDHC: Card is MMC\r\n") ) );
; 1164 :             m_fMMCMode = TRUE;

  019e4	e59f2034	 ldr         r2, [pc, #0x34]
  019e8	e3a03001	 mov         r3, #1
  019ec	e5823000	 str         r3, [r2]
  019f0		 |$LN1@CommandCom|
  019f0		 |$LN5@CommandCom|

; 1165 :         }
; 1166 :     }
; 1167 : 
; 1168 :     // Clear the MMC_STAT register
; 1169 :     MMC_STAT = Read_MMC_STAT();

  019f0	eb000000	 bl          Read_MMC_STAT
  019f4	e58d007c	 str         r0, [sp, #0x7C]
  019f8	e59d307c	 ldr         r3, [sp, #0x7C]
  019fc	e58d300c	 str         r3, [sp, #0xC]

; 1170 :     Write_MMC_STAT(MMC_STAT); 

  01a00	e59d000c	 ldr         r0, [sp, #0xC]
  01a04	eb000000	 bl          Write_MMC_STAT

; 1171 :     //UpdateSystemClock(FALSE);
; 1172 : 
; 1173 :     return status;

  01a08	e59d3018	 ldr         r3, [sp, #0x18]
  01a0c	e58d302c	 str         r3, [sp, #0x2C]

; 1174 : }

  01a10	e59d002c	 ldr         r0, [sp, #0x2C]
  01a14	e28dd080	 add         sp, sp, #0x80
  01a18	e89d6000	 ldmia       sp, {sp, lr}
  01a1c	e12fff1e	 bx          lr
  01a20		 |$LN62@CommandCom|
  01a20		 |$LN63@CommandCom|
  01a20	00000000	 DCD         |m_fMMCMode|
  01a24		 |$LN64@CommandCom|
  01a24	00000000	 DCD         |m_fAppCmdMode|
  01a28		 |$LN65@CommandCom|
  01a28	00000000	 DCD         |m_fCardPresent|
  01a2c		 |$LN66@CommandCom|
  01a2c	00000000	 DCD         |szHexBuf|
  01a30		 |$LN67@CommandCom|
  01a30	00000000	 DCD         |??_C@_1EG@HOIABLIC@?$AAS?$AAD?$AAH?$AAC?$AA?3?$AA?5?$AAS?$AAD?$AAI?$AAP?$AAo?$AAl?$AAl?$AAi?$AAn?$AAg?$AAR?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AA?$CI?$AA?$CJ?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd@|
  01a34		 |$LN68@CommandCom|
  01a34	00000000	 DCD         |dpCurSettings|
  01a38		 |$LN69@CommandCom|
  01a38	00000000	 DCD         |??_C@_1GA@HNKHACLA@?$AAS?$AAD?$AAH?$AAC?$AA?3?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAg?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAr?$AAe?$AAs?$AAp?$AAo?$AAn?$AAs?$AAe?$AA?5?$AAf?$AAo?$AAr@|
  01a3c		 |$LN70@CommandCom|
  01a3c	00000000	 DCD         |??_C@_1EM@JOOFMKFB@?$AAS?$AAD?$AAH?$AAC?$AA?3?$AA?5?$AAc?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AA?5?$AAr?$AAe?$AAs?$AAp?$AAo?$AAn?$AAs?$AAe?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?5?$AAC@|
  01a40		 |$LN71@CommandCom|
  01a40	00000000	 DCD         |??_C@_1EO@LNFDCIBN@?$AAS?$AAD?$AAH?$AAC?$AA?3?$AA?5?$AAc?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AA?5?$AAr?$AAe?$AAs?$AAp?$AAo?$AAn?$AAs?$AAe?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?5?$AAD@|
  01a44		 |$LN72@CommandCom|
  01a44	00000000	 DCD         |??_C@_1EM@PLCIGAJB@?$AAS?$AAD?$AAH?$AAC?$AA?3?$AA?5?$AAc?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AA?5?$AAr?$AAe?$AAs?$AAp?$AAo?$AAn?$AAs?$AAe?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?5?$AAD@|
  01a48		 |$LN73@CommandCom|
  01a48	00000000	 DCD         |??_C@_1DG@OHDKIEBD@?$AAS?$AAD?$AAH?$AAC?$AA?3?$AA?5?$AAc?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AA?5?$AAC?$AAR?$AAC?$AA?5?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@|
  01a4c		 |$LN74@CommandCom|
  01a4c	00000000	 DCD         |??_C@_1DG@MBAMAGDP@?$AAS?$AAD?$AAH?$AAC?$AA?3?$AA?5?$AAC?$AAa?$AAr?$AAd?$AA?5?$AAB?$AAU?$AAS?$AAY?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@|
  01a50		 |$LN75@CommandCom|
  01a50	00000000	 DCD         |??_C@_1CM@GCMKJBGI@?$AAS?$AAD?$AAH?$AAC?$AA?3?$AA?5?$AAC?$AAa?$AAr?$AAd?$AA?5?$AAr?$AAe?$AAm?$AAo?$AAv?$AAe?$AAd?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@|
  01a54		 |$LN76@CommandCom|
  01a54	00000000	 DCD         |m_pbRegisters|
  01a58		 |$LN77@CommandCom|
  01a58	00000000	 DCD         |m_dwMaxTimeout|
  01a5c		 |$M44904|

			 ENDP  ; |CommandCompleteHandler|

	EXPORT	|SdhcSetSlotPowerState|

  000b0			 AREA	 |.pdata|, PDATA
|$T44927| DCD	|$LN7@SdhcSetSlo|
	DCD	0x40000b03
; Function compile flags: /Odtp

  01a5c			 AREA	 |.text|, CODE, ARM

  01a5c		 |SdhcSetSlotPowerState| PROC

; 1177 : {

  01a5c		 |$LN7@SdhcSetSlo|
  01a5c	e1a0c00d	 mov         r12, sp
  01a60	e92d0001	 stmdb       sp!, {r0}
  01a64	e92d5000	 stmdb       sp!, {r12, lr}
  01a68		 |$M44924|

; 1178 :     if (state < D3)

  01a68	e59d3008	 ldr         r3, [sp, #8]
  01a6c	e3530003	 cmp         r3, #3
  01a70	aa000001	 bge         |$LN2@SdhcSetSlo|

; 1179 :     {
; 1180 :         SystemClockOn();

  01a74	eb000000	 bl          SystemClockOn

; 1181 :     }
; 1182 :     else

  01a78	ea000000	 b           |$LN1@SdhcSetSlo|
  01a7c		 |$LN2@SdhcSetSlo|

; 1183 :     {
; 1184 :         SystemClockOff();

  01a7c	eb000000	 bl          SystemClockOff
  01a80		 |$LN1@SdhcSetSlo|

; 1185 :     }
; 1186 : }

  01a80	e89d6000	 ldmia       sp, {sp, lr}
  01a84	e12fff1e	 bx          lr
  01a88		 |$M44925|

			 ENDP  ; |SdhcSetSlotPowerState|


  000b8			 AREA	 |.pdata|, PDATA
|$T44932| DCD	|$LN5@SystemCloc@2|
	DCD	0x40000100
; Function compile flags: /Odtp

  01a88			 AREA	 |.text|, CODE, ARM

  01a88		 |SystemClockOff| PROC

; 196  : {

  01a88		 |$LN5@SystemCloc@2|
  01a88		 |$M44929|

; 197  : }

  01a88	e12fff1e	 bx          lr
  01a8c		 |$M44930|

			 ENDP  ; |SystemClockOff|

	EXPORT	|??_C@_1GK@EBPKPBPE@?$AAG?$AAe?$AAt?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAR?$AAe?$AAs?$AAp?$AAo?$AAn?$AAs?$AAe?$AA?$CI?$AA?$CJ?$AA?5?$AA?9?$AA?5?$AAU?$AAn?$AAr?$AAe?$AAc?$AAo?$AAg?$AAn?$AAi@| [ DATA ] ; `string'

  000c0			 AREA	 |.pdata|, PDATA
|$T44951| DCD	|$LN27@GetCommand|
	DCD	0x40012104

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GK@EBPKPBPE@?$AAG?$AAe?$AAt?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAR?$AAe?$AAs?$AAp?$AAo?$AAn?$AAs?$AAe?$AA?$CI?$AA?$CJ?$AA?5?$AA?9?$AA?5?$AAU?$AAn?$AAr?$AAe?$AAc?$AAo?$AAg?$AAn?$AAi@| DCB "G"
	DCB	0x0, "e", 0x0, "t", 0x0, "C", 0x0, "o", 0x0, "m", 0x0, "m"
	DCB	0x0, "a", 0x0, "n", 0x0, "d", 0x0, "R", 0x0, "e", 0x0, "s"
	DCB	0x0, "p", 0x0, "o", 0x0, "n", 0x0, "s", 0x0, "e", 0x0, "("
	DCB	0x0, ")", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "U", 0x0, "n"
	DCB	0x0, "r", 0x0, "e", 0x0, "c", 0x0, "o", 0x0, "g", 0x0, "n"
	DCB	0x0, "i", 0x0, "z", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "r"
	DCB	0x0, "e", 0x0, "s", 0x0, "p", 0x0, "o", 0x0, "n", 0x0, "s"
	DCB	0x0, "e", 0x0, " ", 0x0, "t", 0x0, "y", 0x0, "p", 0x0, "e"
	DCB	0x0, "!", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  01a8c			 AREA	 |.text|, CODE, ARM

  01a8c		 |GetCommandResponse| PROC

; 1195 : {

  01a8c		 |$LN27@GetCommand|
  01a8c	e1a0c00d	 mov         r12, sp
  01a90	e92d0001	 stmdb       sp!, {r0}
  01a94	e92d5000	 stmdb       sp!, {r12, lr}
  01a98	e24dd01c	 sub         sp, sp, #0x1C
  01a9c		 |$M44948|

; 1196 :     DWORD  dwRegVal;
; 1197 :     PUCHAR  respBuff;       // response buffer
; 1198 :     DWORD dwRSP;
; 1199 : 
; 1200 :     dwRegVal = Read_MMC_STAT();

  01a9c	eb000000	 bl          Read_MMC_STAT
  01aa0	e58d0010	 str         r0, [sp, #0x10]
  01aa4	e59d3010	 ldr         r3, [sp, #0x10]
  01aa8	e58d3004	 str         r3, [sp, #4]

; 1201 : 
; 1202 :     OALMSGX(OAL_IO, (TEXT("SDHC: MMC_STAT = 0x%X.\r\n"), dwRegVal));
; 1203 : 
; 1204 : 
; 1205 :     if ( dwRegVal & (MMCHS_STAT_CC | MMCHS_STAT_CERR | MMCHS_STAT_CCRC))

  01aac	e59d2004	 ldr         r2, [sp, #4]
  01ab0	e3a03211	 mov         r3, #0x11, 4
  01ab4	e3833802	 orr         r3, r3, #2, 16
  01ab8	e1120003	 tst         r2, r3
  01abc	0a00010a	 beq         |$LN9@GetCommand|

; 1206 :     {
; 1207 :         respBuff = pRequest->CommandResponse.ResponseBuffer;

  01ac0	e59d3024	 ldr         r3, [sp, #0x24]
  01ac4	e2833020	 add         r3, r3, #0x20
  01ac8	e58d3008	 str         r3, [sp, #8]

; 1208 : 
; 1209 :         switch (pRequest->CommandResponse.ResponseType)

  01acc	e59d3024	 ldr         r3, [sp, #0x24]
  01ad0	e283301c	 add         r3, r3, #0x1C
  01ad4	e5933000	 ldr         r3, [r3]
  01ad8	e58d3014	 str         r3, [sp, #0x14]
  01adc	e59d3014	 ldr         r3, [sp, #0x14]
  01ae0	e3530008	 cmp         r3, #8
  01ae4	8a0000f5	 bhi         |$LN1@GetCommand|
  01ae8	e59d2014	 ldr         r2, [sp, #0x14]
  01aec	e1a03102	 mov         r3, r2, lsl #2
  01af0	e083300f	 add         r3, r3, pc
  01af4	e5933004	 ldr         r3, [r3, #4]
  01af8	e08ff003	 add         pc, pc, r3
  01afc		 |$LN15@GetCommand|
  01afc		 |$LN14@GetCommand|
  01afc		 |$LN16@GetCommand|
  01afc	00000020	 DCD         0x20
  01b00		 |$LN17@GetCommand|
  01b00	00000024	 DCD         0x24
  01b04		 |$LN18@GetCommand|
  01b04	00000024	 DCD         0x24
  01b08		 |$LN19@GetCommand|
  01b08	000001f0	 DCD         0x1f0
  01b0c		 |$LN20@GetCommand|
  01b0c	000000c0	 DCD         0xc0
  01b10		 |$LN21@GetCommand|
  01b10	000000c0	 DCD         0xc0
  01b14		 |$LN22@GetCommand|
  01b14	00000154	 DCD         0x154
  01b18		 |$LN23@GetCommand|
  01b18	00000154	 DCD         0x154
  01b1c		 |$LN24@GetCommand|
  01b1c	000000c0	 DCD         0xc0
  01b20		 |$LN6@GetCommand|

; 1210 :         {
; 1211 :             case NoResponse:
; 1212 :                 break;

  01b20	ea0000f1	 b           |$LN7@GetCommand|
  01b24		 |$LN5@GetCommand|

; 1213 : 
; 1214 :             case ResponseR1:
; 1215 :             case ResponseR1b:
; 1216 :                 //--- SHORT RESPONSE (48 bits total)---
; 1217 :                 // Format: { START_BIT(1) | TRANSMISSION_BIT(1) | COMMAND_INDEX(6) | CARD_STATUS(32) | CRC7(7) | END_BIT(1) }
; 1218 :                 // NOTE: START_BIT and TRANSMISSION_BIT = 0, END_BIT = 1
; 1219 :                 //
; 1220 :                 // Dummy byte needed by calling function.
; 1221 :                 *respBuff = (BYTE)(START_BIT | TRANSMISSION_BIT | pRequest->CommandCode);

  01b24	e59d3024	 ldr         r3, [sp, #0x24]
  01b28	e2833014	 add         r3, r3, #0x14
  01b2c	e5d32000	 ldrb        r2, [r3]
  01b30	e59d3008	 ldr         r3, [sp, #8]
  01b34	e5c32000	 strb        r2, [r3]

; 1222 : 
; 1223 :                 dwRSP = INREG32(&m_pbRegisters->MMCHS_RSP10);

  01b38	e59f33cc	 ldr         r3, [pc, #0x3CC]
  01b3c	e5933000	 ldr         r3, [r3]
  01b40	e2833e11	 add         r3, r3, #0x11, 28
  01b44	e5933000	 ldr         r3, [r3]
  01b48	e58d3000	 str         r3, [sp]

; 1224 : 
; 1225 :                 *(respBuff + 1) = (BYTE)(dwRSP & 0xFF);

  01b4c	e59d3000	 ldr         r3, [sp]
  01b50	e20330ff	 and         r3, r3, #0xFF
  01b54	e20320ff	 and         r2, r3, #0xFF
  01b58	e59d3008	 ldr         r3, [sp, #8]
  01b5c	e2833001	 add         r3, r3, #1
  01b60	e5c32000	 strb        r2, [r3]

; 1226 :                 *(respBuff + 2) = (BYTE)(dwRSP >> 8);

  01b64	e59d3000	 ldr         r3, [sp]
  01b68	e1a03423	 mov         r3, r3, lsr #8
  01b6c	e20320ff	 and         r2, r3, #0xFF
  01b70	e59d3008	 ldr         r3, [sp, #8]
  01b74	e2833002	 add         r3, r3, #2
  01b78	e5c32000	 strb        r2, [r3]

; 1227 :                 *(respBuff + 3) = (BYTE)(dwRSP >> 16);

  01b7c	e59d3000	 ldr         r3, [sp]
  01b80	e1a03823	 mov         r3, r3, lsr #16
  01b84	e20320ff	 and         r2, r3, #0xFF
  01b88	e59d3008	 ldr         r3, [sp, #8]
  01b8c	e2833003	 add         r3, r3, #3
  01b90	e5c32000	 strb        r2, [r3]

; 1228 :                 *(respBuff + 4) = (BYTE)(dwRSP >> 24);

  01b94	e59d3000	 ldr         r3, [sp]
  01b98	e1a03c23	 mov         r3, r3, lsr #24
  01b9c	e20320ff	 and         r2, r3, #0xFF
  01ba0	e59d3008	 ldr         r3, [sp, #8]
  01ba4	e2833004	 add         r3, r3, #4
  01ba8	e5c32000	 strb        r2, [r3]

; 1229 : 
; 1230 : 
; 1231 :                 *(respBuff + 5) = (BYTE)(END_RESERVED | END_BIT);

  01bac	e59d3008	 ldr         r3, [sp, #8]
  01bb0	e2832005	 add         r2, r3, #5
  01bb4	e3a030ff	 mov         r3, #0xFF
  01bb8	e5c23000	 strb        r3, [r2]

; 1232 : 
; 1233 :                 OALMSGX(OAL_IO, (TEXT("GetCommandResponse() - R1 R1b : 0x%x 0x%x 0x%x 0x%x 0x%x 0x%x \r\n"), *(respBuff + 0),
; 1234 :                     *(respBuff + 1), *(respBuff + 2), *(respBuff + 3), *(respBuff + 4), *(respBuff + 5)));
; 1235 :                 OALMSGX(OAL_IO, (TEXT("GetCmdResponse returned [%x %x %x %x %x]\r\n"),
; 1236 :                     respBuff[0], respBuff[1], respBuff[2], respBuff[3], respBuff[4], respBuff[5] ));
; 1237 :                 break;

  01bbc	ea0000ca	 b           |$LN7@GetCommand|
  01bc0		 |$LN4@GetCommand|

; 1238 : 
; 1239 :             case ResponseR3:
; 1240 :             case ResponseR4:
; 1241 :             case ResponseR7:
; 1242 :                 OALMSGX(OAL_IO, (TEXT("ResponseR3 ResponseR4\r\n")));
; 1243 :                 //--- SHORT RESPONSE (48 bits total)---
; 1244 :                 // Format: { START_BIT(1) | TRANSMISSION_BIT(1) | RESERVED(6) | CARD_STATUS(32) | RESERVED(7) | END_BIT(1) }
; 1245 :                 //
; 1246 :                 *respBuff = (BYTE)(START_BIT | TRANSMISSION_BIT | START_RESERVED);

  01bc0	e59d2008	 ldr         r2, [sp, #8]
  01bc4	e3a0303f	 mov         r3, #0x3F
  01bc8	e5c23000	 strb        r3, [r2]

; 1247 : 
; 1248 :                 dwRSP = INREG32(&m_pbRegisters->MMCHS_RSP10);

  01bcc	e59f3338	 ldr         r3, [pc, #0x338]
  01bd0	e5933000	 ldr         r3, [r3]
  01bd4	e2833e11	 add         r3, r3, #0x11, 28
  01bd8	e5933000	 ldr         r3, [r3]
  01bdc	e58d3000	 str         r3, [sp]

; 1249 : 
; 1250 :                 *(respBuff + 1) = (BYTE)(dwRSP & 0xFF);

  01be0	e59d3000	 ldr         r3, [sp]
  01be4	e20330ff	 and         r3, r3, #0xFF
  01be8	e20320ff	 and         r2, r3, #0xFF
  01bec	e59d3008	 ldr         r3, [sp, #8]
  01bf0	e2833001	 add         r3, r3, #1
  01bf4	e5c32000	 strb        r2, [r3]

; 1251 :                 *(respBuff + 2) = (BYTE)(dwRSP >> 8);

  01bf8	e59d3000	 ldr         r3, [sp]
  01bfc	e1a03423	 mov         r3, r3, lsr #8
  01c00	e20320ff	 and         r2, r3, #0xFF
  01c04	e59d3008	 ldr         r3, [sp, #8]
  01c08	e2833002	 add         r3, r3, #2
  01c0c	e5c32000	 strb        r2, [r3]

; 1252 :                 *(respBuff + 3) = (BYTE)(dwRSP >> 16);

  01c10	e59d3000	 ldr         r3, [sp]
  01c14	e1a03823	 mov         r3, r3, lsr #16
  01c18	e20320ff	 and         r2, r3, #0xFF
  01c1c	e59d3008	 ldr         r3, [sp, #8]
  01c20	e2833003	 add         r3, r3, #3
  01c24	e5c32000	 strb        r2, [r3]

; 1253 :                 *(respBuff + 4) = (BYTE)(dwRSP >> 24);

  01c28	e59d3000	 ldr         r3, [sp]
  01c2c	e1a03c23	 mov         r3, r3, lsr #24
  01c30	e20320ff	 and         r2, r3, #0xFF
  01c34	e59d3008	 ldr         r3, [sp, #8]
  01c38	e2833004	 add         r3, r3, #4
  01c3c	e5c32000	 strb        r2, [r3]

; 1254 : 
; 1255 :                 *(respBuff + 5) = (BYTE)(END_RESERVED | END_BIT);

  01c40	e59d3008	 ldr         r3, [sp, #8]
  01c44	e2832005	 add         r2, r3, #5
  01c48	e3a030ff	 mov         r3, #0xFF
  01c4c	e5c23000	 strb        r3, [r2]

; 1256 : 
; 1257 :                 OALMSGX(OAL_IO, (TEXT("GetCmdResponse returned [%x %x %x %x %x]\r\n"),
; 1258 :                     respBuff[0], respBuff[1], respBuff[2], respBuff[3], respBuff[4], respBuff[5] ));
; 1259 :                 break;

  01c50	ea0000a5	 b           |$LN7@GetCommand|
  01c54		 |$LN3@GetCommand|

; 1260 : 
; 1261 :             case ResponseR5:
; 1262 :             case ResponseR6:
; 1263 :                 OALMSGX(OAL_IO, (TEXT("ResponseR5 ResponseR6\r\n")));
; 1264 :                 //--- SHORT RESPONSE (48 bits total)---
; 1265 :                 // Format: { START_BIT(1) | TRANSMISSION_BIT(1) | COMMAND_INDEX(6) | RCA(16) | CARD_STATUS(16) | CRC7(7) | END_BIT(1) }
; 1266 :                 //
; 1267 :                 *respBuff = (BYTE)(START_BIT | TRANSMISSION_BIT | pRequest->CommandCode);

  01c54	e59d3024	 ldr         r3, [sp, #0x24]
  01c58	e2833014	 add         r3, r3, #0x14
  01c5c	e5d32000	 ldrb        r2, [r3]
  01c60	e59d3008	 ldr         r3, [sp, #8]
  01c64	e5c32000	 strb        r2, [r3]

; 1268 : 
; 1269 :                 dwRSP = INREG32(&m_pbRegisters->MMCHS_RSP10);

  01c68	e59f329c	 ldr         r3, [pc, #0x29C]
  01c6c	e5933000	 ldr         r3, [r3]
  01c70	e2833e11	 add         r3, r3, #0x11, 28
  01c74	e5933000	 ldr         r3, [r3]
  01c78	e58d3000	 str         r3, [sp]

; 1270 : 
; 1271 :                 *(respBuff + 1) = (BYTE)(dwRSP & 0xFF);

  01c7c	e59d3000	 ldr         r3, [sp]
  01c80	e20330ff	 and         r3, r3, #0xFF
  01c84	e20320ff	 and         r2, r3, #0xFF
  01c88	e59d3008	 ldr         r3, [sp, #8]
  01c8c	e2833001	 add         r3, r3, #1
  01c90	e5c32000	 strb        r2, [r3]

; 1272 :                 *(respBuff + 2) = (BYTE)(dwRSP >> 8);

  01c94	e59d3000	 ldr         r3, [sp]
  01c98	e1a03423	 mov         r3, r3, lsr #8
  01c9c	e20320ff	 and         r2, r3, #0xFF
  01ca0	e59d3008	 ldr         r3, [sp, #8]
  01ca4	e2833002	 add         r3, r3, #2
  01ca8	e5c32000	 strb        r2, [r3]

; 1273 :                 *(respBuff + 3) = (BYTE)(dwRSP >> 16);

  01cac	e59d3000	 ldr         r3, [sp]
  01cb0	e1a03823	 mov         r3, r3, lsr #16
  01cb4	e20320ff	 and         r2, r3, #0xFF
  01cb8	e59d3008	 ldr         r3, [sp, #8]
  01cbc	e2833003	 add         r3, r3, #3
  01cc0	e5c32000	 strb        r2, [r3]

; 1274 :                 *(respBuff + 4) = (BYTE)(dwRSP >> 24);

  01cc4	e59d3000	 ldr         r3, [sp]
  01cc8	e1a03c23	 mov         r3, r3, lsr #24
  01ccc	e20320ff	 and         r2, r3, #0xFF
  01cd0	e59d3008	 ldr         r3, [sp, #8]
  01cd4	e2833004	 add         r3, r3, #4
  01cd8	e5c32000	 strb        r2, [r3]

; 1275 : 
; 1276 :                 *(respBuff + 5) = (BYTE)(END_BIT);

  01cdc	e59d3008	 ldr         r3, [sp, #8]
  01ce0	e2832005	 add         r2, r3, #5
  01ce4	e3a03001	 mov         r3, #1
  01ce8	e5c23000	 strb        r3, [r2]

; 1277 : 
; 1278 :                 OALMSGX(OAL_IO, (TEXT("GetCommandResponse() - R5 R6 : 0x%x 0x%x 0x%x 0x%x 0x%x 0x%x \r\n"), *(respBuff + 0),
; 1279 :                     *(respBuff + 1), *(respBuff + 2), *(respBuff + 3), *(respBuff + 4), *(respBuff + 5)));
; 1280 : 
; 1281 :                 OALMSGX(OAL_IO, (TEXT("GetCmdResponse returned [%x %x %x %x %x]\r\n"),
; 1282 :                     respBuff[0], respBuff[1], respBuff[2], respBuff[3], respBuff[4], respBuff[5] ));
; 1283 :                 break;

  01cec	ea00007e	 b           |$LN7@GetCommand|
  01cf0		 |$LN2@GetCommand|

; 1284 : 
; 1285 :             case ResponseR2:
; 1286 :                 dwRSP = INREG32(&m_pbRegisters->MMCHS_RSP10);

  01cf0	e59f3214	 ldr         r3, [pc, #0x214]
  01cf4	e5933000	 ldr         r3, [r3]
  01cf8	e2833e11	 add         r3, r3, #0x11, 28
  01cfc	e5933000	 ldr         r3, [r3]
  01d00	e58d3000	 str         r3, [sp]

; 1287 : 
; 1288 :                 *(respBuff + 0) = (BYTE)(dwRSP & 0xFF);

  01d04	e59d3000	 ldr         r3, [sp]
  01d08	e20330ff	 and         r3, r3, #0xFF
  01d0c	e20320ff	 and         r2, r3, #0xFF
  01d10	e59d3008	 ldr         r3, [sp, #8]
  01d14	e5c32000	 strb        r2, [r3]

; 1289 :                 *(respBuff + 1) = (BYTE)(dwRSP >> 8);

  01d18	e59d3000	 ldr         r3, [sp]
  01d1c	e1a03423	 mov         r3, r3, lsr #8
  01d20	e20320ff	 and         r2, r3, #0xFF
  01d24	e59d3008	 ldr         r3, [sp, #8]
  01d28	e2833001	 add         r3, r3, #1
  01d2c	e5c32000	 strb        r2, [r3]

; 1290 :                 *(respBuff + 2) = (BYTE)(dwRSP >> 16);

  01d30	e59d3000	 ldr         r3, [sp]
  01d34	e1a03823	 mov         r3, r3, lsr #16
  01d38	e20320ff	 and         r2, r3, #0xFF
  01d3c	e59d3008	 ldr         r3, [sp, #8]
  01d40	e2833002	 add         r3, r3, #2
  01d44	e5c32000	 strb        r2, [r3]

; 1291 :                 *(respBuff + 3) = (BYTE)(dwRSP >> 24);

  01d48	e59d3000	 ldr         r3, [sp]
  01d4c	e1a03c23	 mov         r3, r3, lsr #24
  01d50	e20320ff	 and         r2, r3, #0xFF
  01d54	e59d3008	 ldr         r3, [sp, #8]
  01d58	e2833003	 add         r3, r3, #3
  01d5c	e5c32000	 strb        r2, [r3]

; 1292 : 
; 1293 :                 dwRSP = INREG32(&m_pbRegisters->MMCHS_RSP32);

  01d60	e59f31a4	 ldr         r3, [pc, #0x1A4]
  01d64	e5933000	 ldr         r3, [r3]
  01d68	e2833f45	 add         r3, r3, #0x45, 30
  01d6c	e5933000	 ldr         r3, [r3]
  01d70	e58d3000	 str         r3, [sp]

; 1294 : 
; 1295 :                 *(respBuff + 4) = (BYTE)(dwRSP & 0xFF);

  01d74	e59d3000	 ldr         r3, [sp]
  01d78	e20330ff	 and         r3, r3, #0xFF
  01d7c	e20320ff	 and         r2, r3, #0xFF
  01d80	e59d3008	 ldr         r3, [sp, #8]
  01d84	e2833004	 add         r3, r3, #4
  01d88	e5c32000	 strb        r2, [r3]

; 1296 :                 *(respBuff + 5) = (BYTE)(dwRSP >> 8);

  01d8c	e59d3000	 ldr         r3, [sp]
  01d90	e1a03423	 mov         r3, r3, lsr #8
  01d94	e20320ff	 and         r2, r3, #0xFF
  01d98	e59d3008	 ldr         r3, [sp, #8]
  01d9c	e2833005	 add         r3, r3, #5
  01da0	e5c32000	 strb        r2, [r3]

; 1297 :                 *(respBuff + 6) = (BYTE)(dwRSP >> 16);

  01da4	e59d3000	 ldr         r3, [sp]
  01da8	e1a03823	 mov         r3, r3, lsr #16
  01dac	e20320ff	 and         r2, r3, #0xFF
  01db0	e59d3008	 ldr         r3, [sp, #8]
  01db4	e2833006	 add         r3, r3, #6
  01db8	e5c32000	 strb        r2, [r3]

; 1298 :                 *(respBuff + 7) = (BYTE)(dwRSP >> 24);

  01dbc	e59d3000	 ldr         r3, [sp]
  01dc0	e1a03c23	 mov         r3, r3, lsr #24
  01dc4	e20320ff	 and         r2, r3, #0xFF
  01dc8	e59d3008	 ldr         r3, [sp, #8]
  01dcc	e2833007	 add         r3, r3, #7
  01dd0	e5c32000	 strb        r2, [r3]

; 1299 : 
; 1300 :                 dwRSP = INREG32(&m_pbRegisters->MMCHS_RSP54);

  01dd4	e59f3130	 ldr         r3, [pc, #0x130]
  01dd8	e5933000	 ldr         r3, [r3]
  01ddc	e2833f46	 add         r3, r3, #0x46, 30
  01de0	e5933000	 ldr         r3, [r3]
  01de4	e58d3000	 str         r3, [sp]

; 1301 : 
; 1302 :                 *(respBuff + 8) = (BYTE)(dwRSP & 0xFF);

  01de8	e59d3000	 ldr         r3, [sp]
  01dec	e20330ff	 and         r3, r3, #0xFF
  01df0	e20320ff	 and         r2, r3, #0xFF
  01df4	e59d3008	 ldr         r3, [sp, #8]
  01df8	e2833008	 add         r3, r3, #8
  01dfc	e5c32000	 strb        r2, [r3]

; 1303 :                 *(respBuff + 9) = (BYTE)(dwRSP >> 8);

  01e00	e59d3000	 ldr         r3, [sp]
  01e04	e1a03423	 mov         r3, r3, lsr #8
  01e08	e20320ff	 and         r2, r3, #0xFF
  01e0c	e59d3008	 ldr         r3, [sp, #8]
  01e10	e2833009	 add         r3, r3, #9
  01e14	e5c32000	 strb        r2, [r3]

; 1304 :                 *(respBuff + 10) = (BYTE)(dwRSP >> 16);

  01e18	e59d3000	 ldr         r3, [sp]
  01e1c	e1a03823	 mov         r3, r3, lsr #16
  01e20	e20320ff	 and         r2, r3, #0xFF
  01e24	e59d3008	 ldr         r3, [sp, #8]
  01e28	e283300a	 add         r3, r3, #0xA
  01e2c	e5c32000	 strb        r2, [r3]

; 1305 :                 *(respBuff + 11) = (BYTE)(dwRSP >> 24);

  01e30	e59d3000	 ldr         r3, [sp]
  01e34	e1a03c23	 mov         r3, r3, lsr #24
  01e38	e20320ff	 and         r2, r3, #0xFF
  01e3c	e59d3008	 ldr         r3, [sp, #8]
  01e40	e283300b	 add         r3, r3, #0xB
  01e44	e5c32000	 strb        r2, [r3]

; 1306 : 
; 1307 : 
; 1308 :                 dwRSP = INREG32(&m_pbRegisters->MMCHS_RSP76);

  01e48	e59f30bc	 ldr         r3, [pc, #0xBC]
  01e4c	e5933000	 ldr         r3, [r3]
  01e50	e2833f47	 add         r3, r3, #0x47, 30
  01e54	e5933000	 ldr         r3, [r3]
  01e58	e58d3000	 str         r3, [sp]

; 1309 : 
; 1310 :                 *(respBuff + 12) = (BYTE)(dwRSP & 0xFF);

  01e5c	e59d3000	 ldr         r3, [sp]
  01e60	e20330ff	 and         r3, r3, #0xFF
  01e64	e20320ff	 and         r2, r3, #0xFF
  01e68	e59d3008	 ldr         r3, [sp, #8]
  01e6c	e283300c	 add         r3, r3, #0xC
  01e70	e5c32000	 strb        r2, [r3]

; 1311 :                 *(respBuff + 13) = (BYTE)(dwRSP >> 8);

  01e74	e59d3000	 ldr         r3, [sp]
  01e78	e1a03423	 mov         r3, r3, lsr #8
  01e7c	e20320ff	 and         r2, r3, #0xFF
  01e80	e59d3008	 ldr         r3, [sp, #8]
  01e84	e283300d	 add         r3, r3, #0xD
  01e88	e5c32000	 strb        r2, [r3]

; 1312 :                 *(respBuff + 14) = (BYTE)(dwRSP >> 16);

  01e8c	e59d3000	 ldr         r3, [sp]
  01e90	e1a03823	 mov         r3, r3, lsr #16
  01e94	e20320ff	 and         r2, r3, #0xFF
  01e98	e59d3008	 ldr         r3, [sp, #8]
  01e9c	e283300e	 add         r3, r3, #0xE
  01ea0	e5c32000	 strb        r2, [r3]

; 1313 :                 *(respBuff + 15) = (BYTE)(dwRSP >> 24);

  01ea4	e59d3000	 ldr         r3, [sp]
  01ea8	e1a03c23	 mov         r3, r3, lsr #24
  01eac	e20320ff	 and         r2, r3, #0xFF
  01eb0	e59d3008	 ldr         r3, [sp, #8]
  01eb4	e283300f	 add         r3, r3, #0xF
  01eb8	e5c32000	 strb        r2, [r3]

; 1314 : 
; 1315 :                 OALMSGX(OAL_IO, (TEXT("GetCmdResponse returned [%x %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x]\r\n"),
; 1316 :                     respBuff[0], respBuff[1], respBuff[2], respBuff[3], respBuff[4], respBuff[5], respBuff[6], respBuff[7],
; 1317 :                     respBuff[8], respBuff[9], respBuff[10], respBuff[11], respBuff[12], respBuff[13], respBuff[14], respBuff[15]));
; 1318 :                 break;

  01ebc	ea00000a	 b           |$LN7@GetCommand|
  01ec0		 |$LN1@GetCommand|

; 1319 : 
; 1320 :             default:
; 1321 :                 OALMSG(OAL_ERROR, (TEXT("GetCommandResponse() - Unrecognized response type!\r\n")));

  01ec0	e59f3040	 ldr         r3, [pc, #0x40]
  01ec4	e5933440	 ldr         r3, [r3, #0x440]
  01ec8	e3130001	 tst         r3, #1
  01ecc	0a000004	 beq         |$LN12@GetCommand|
  01ed0	e59f002c	 ldr         r0, [pc, #0x2C]
  01ed4	eb000000	 bl          NKDbgPrintfW
  01ed8	e3a03001	 mov         r3, #1
  01edc	e58d3018	 str         r3, [sp, #0x18]
  01ee0	ea000001	 b           |$LN13@GetCommand|
  01ee4		 |$LN12@GetCommand|
  01ee4	e3a03000	 mov         r3, #0
  01ee8	e58d3018	 str         r3, [sp, #0x18]
  01eec		 |$LN13@GetCommand|
  01eec		 |$LN7@GetCommand|
  01eec		 |$LN9@GetCommand|

; 1322 :                 break;
; 1323 :         }
; 1324 :     }
; 1325 :     return SD_API_STATUS_SUCCESS;

  01eec	e3a03000	 mov         r3, #0
  01ef0	e58d300c	 str         r3, [sp, #0xC]

; 1326 : }

  01ef4	e59d000c	 ldr         r0, [sp, #0xC]
  01ef8	e28dd01c	 add         sp, sp, #0x1C
  01efc	e89d6000	 ldmia       sp, {sp, lr}
  01f00	e12fff1e	 bx          lr
  01f04		 |$LN28@GetCommand|
  01f04		 |$LN29@GetCommand|
  01f04	00000000	 DCD         |??_C@_1GK@EBPKPBPE@?$AAG?$AAe?$AAt?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAR?$AAe?$AAs?$AAp?$AAo?$AAn?$AAs?$AAe?$AA?$CI?$AA?$CJ?$AA?5?$AA?9?$AA?5?$AAU?$AAn?$AAr?$AAe?$AAc?$AAo?$AAg?$AAn?$AAi@|
  01f08		 |$LN30@GetCommand|
  01f08	00000000	 DCD         |dpCurSettings|
  01f0c		 |$LN31@GetCommand|
  01f0c	00000000	 DCD         |m_pbRegisters|
  01f10		 |$M44949|

			 ENDP  ; |GetCommandResponse|

	EXPORT	|??_C@_1DM@FAHGNIG@?$AAS?$AAD?$AAI?$AAP?$AAo?$AAl?$AAl?$AAi?$AAn?$AAg?$AAR?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AA?3?$AA?5?$AAT?$AAI?$AAM?$AAE?$AAO?$AAU?$AAT?$AA3?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DM@EHCCGKPL@?$AAS?$AAD?$AAI?$AAP?$AAo?$AAl?$AAl?$AAi?$AAn?$AAg?$AAR?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AA?3?$AA?5?$AAT?$AAI?$AAM?$AAE?$AAO?$AAU?$AAT?$AA1?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DM@ILIIGKGF@?$AAS?$AAD?$AAI?$AAP?$AAo?$AAl?$AAl?$AAi?$AAn?$AAg?$AAR?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AA?3?$AA?5?$AAT?$AAI?$AAM?$AAE?$AAO?$AAU?$AAT?$AA0?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  000c8			 AREA	 |.pdata|, PDATA
|$T44985| DCD	|$LN56@SDIPolling|
	DCD	0x40017804

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@FAHGNIG@?$AAS?$AAD?$AAI?$AAP?$AAo?$AAl?$AAl?$AAi?$AAn?$AAg?$AAR?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AA?3?$AA?5?$AAT?$AAI?$AAM?$AAE?$AAO?$AAU?$AAT?$AA3?$AA?$AN?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "D", 0x0, "I", 0x0, "P", 0x0, "o", 0x0, "l", 0x0, "l"
	DCB	0x0, "i", 0x0, "n", 0x0, "g", 0x0, "R", 0x0, "e", 0x0, "c"
	DCB	0x0, "e", 0x0, "i", 0x0, "v", 0x0, "e", 0x0, ":", 0x0, " "
	DCB	0x0, "T", 0x0, "I", 0x0, "M", 0x0, "E", 0x0, "O", 0x0, "U"
	DCB	0x0, "T", 0x0, "3", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@EHCCGKPL@?$AAS?$AAD?$AAI?$AAP?$AAo?$AAl?$AAl?$AAi?$AAn?$AAg?$AAR?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AA?3?$AA?5?$AAT?$AAI?$AAM?$AAE?$AAO?$AAU?$AAT?$AA1?$AA?$AN?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "D", 0x0, "I", 0x0, "P", 0x0, "o", 0x0, "l", 0x0, "l"
	DCB	0x0, "i", 0x0, "n", 0x0, "g", 0x0, "R", 0x0, "e", 0x0, "c"
	DCB	0x0, "e", 0x0, "i", 0x0, "v", 0x0, "e", 0x0, ":", 0x0, " "
	DCB	0x0, "T", 0x0, "I", 0x0, "M", 0x0, "E", 0x0, "O", 0x0, "U"
	DCB	0x0, "T", 0x0, "1", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@ILIIGKGF@?$AAS?$AAD?$AAI?$AAP?$AAo?$AAl?$AAl?$AAi?$AAn?$AAg?$AAR?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AA?3?$AA?5?$AAT?$AAI?$AAM?$AAE?$AAO?$AAU?$AAT?$AA0?$AA?$AN?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "D", 0x0, "I", 0x0, "P", 0x0, "o", 0x0, "l", 0x0, "l"
	DCB	0x0, "i", 0x0, "n", 0x0, "g", 0x0, "R", 0x0, "e", 0x0, "c"
	DCB	0x0, "e", 0x0, "i", 0x0, "v", 0x0, "e", 0x0, ":", 0x0, " "
	DCB	0x0, "T", 0x0, "I", 0x0, "M", 0x0, "E", 0x0, "O", 0x0, "U"
	DCB	0x0, "T", 0x0, "0", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  01f10			 AREA	 |.text|, CODE, ARM

  01f10		 |SDIPollingReceive| PROC

; 1334 : {

  01f10		 |$LN56@SDIPolling|
  01f10	e1a0c00d	 mov         r12, sp
  01f14	e92d0003	 stmdb       sp!, {r0, r1}
  01f18	e92d5000	 stmdb       sp!, {r12, lr}
  01f1c	e24dd090	 sub         sp, sp, #0x90
  01f20		 |$M44982|

; 1335 :     DWORD fifoSizeW, blockLengthW; // Almost Full level and block length
; 1336 :     DWORD dwCount1, dwCount2;
; 1337 :     DWORD MMC_STAT;
; 1338 :     DWORD MmcPstateRegValue;
; 1339 :     //DWORD *pbuf = (DWORD *) pBuff;
; 1340 :     DWORD __unaligned *pbuf2 = (DWORD *) pBuff;

  01f20	e59d3098	 ldr         r3, [sp, #0x98]
  01f24	e58d3020	 str         r3, [sp, #0x20]

; 1341 :     DWORD dwCurrentTickCount;
; 1342 :     DWORD dwTimeout;
; 1343 :     DWORD dwCountStart;
; 1344 :     BOOL fTimeoutOverflow = FALSE;

  01f28	e3a03000	 mov         r3, #0
  01f2c	e58d3004	 str         r3, [sp, #4]

; 1345 : 
; 1346 :     OALMSGX(OAL_IO, (TEXT("SDIPollingReceive(0x%x, %d)\r\n"), pBuff, dwLen));
; 1347 :     //check the parameters
; 1348 : 
; 1349 :     OALMSGX(OAL_IO, (TEXT("SDIPollingReceive reading MMC_STAT\r\n")));
; 1350 :     MMC_STAT = Read_MMC_STAT();

  01f30	eb000000	 bl          Read_MMC_STAT
  01f34	e58d0030	 str         r0, [sp, #0x30]
  01f38	e59d3030	 ldr         r3, [sp, #0x30]
  01f3c	e58d3018	 str         r3, [sp, #0x18]

; 1351 :     OALMSGX(OAL_IO, (TEXT("SDIPollingReceive reading MMCHS_PSTATE\r\n")));
; 1352 :     MmcPstateRegValue = INREG32(&m_pbRegisters->MMCHS_PSTATE);

  01f40	e59f3598	 ldr         r3, [pc, #0x598]
  01f44	e5933000	 ldr         r3, [r3]
  01f48	e2833f49	 add         r3, r3, #0x49, 30
  01f4c	e5933000	 ldr         r3, [r3]
  01f50	e58d3008	 str         r3, [sp, #8]

; 1353 : 
; 1354 :     // calculate timeout conditions
; 1355 :     OALMSGX(OAL_IO, (TEXT("SDIPollingReceive OALGetTickCount\r\n")));
; 1356 :     dwCountStart = OALGetTickCount();

  01f54	eb000000	 bl          OALGetTickCount
  01f58	e58d0034	 str         r0, [sp, #0x34]
  01f5c	e59d3034	 ldr         r3, [sp, #0x34]
  01f60	e58d3014	 str         r3, [sp, #0x14]

; 1357 :     dwTimeout = dwCountStart + m_dwMaxTimeout;

  01f64	e59d2014	 ldr         r2, [sp, #0x14]
  01f68	e59f356c	 ldr         r3, [pc, #0x56C]
  01f6c	e5933000	 ldr         r3, [r3]
  01f70	e0823003	 add         r3, r2, r3
  01f74	e58d3024	 str         r3, [sp, #0x24]

; 1358 :     if ( dwTimeout < dwCountStart )

  01f78	e59d2024	 ldr         r2, [sp, #0x24]
  01f7c	e59d3014	 ldr         r3, [sp, #0x14]
  01f80	e1520003	 cmp         r2, r3
  01f84	2a000001	 bcs         |$LN27@SDIPolling|

; 1359 :         fTimeoutOverflow = TRUE;

  01f88	e3a03001	 mov         r3, #1
  01f8c	e58d3004	 str         r3, [sp, #4]
  01f90		 |$LN27@SDIPolling|

; 1360 : 
; 1361 :     if (dwLen % MMC_BLOCK_SIZE || m_dwSDIOCard)

  01f90	e59d109c	 ldr         r1, [sp, #0x9C]
  01f94	e3a00c02	 mov         r0, #2, 24
  01f98	eb000000	 bl          __rt_udiv
  01f9c	e3510000	 cmp         r1, #0
  01fa0	1a000003	 bne         |$LN25@SDIPolling|
  01fa4	e59f3540	 ldr         r3, [pc, #0x540]
  01fa8	e5933000	 ldr         r3, [r3]
  01fac	e3530000	 cmp         r3, #0
  01fb0	0a000066	 beq         |$LN26@SDIPolling|
  01fb4		 |$LN25@SDIPolling|
  01fb4		 |$LN24@SDIPolling|

; 1362 :     {
; 1363 :         while ((Read_MMC_STAT() & MMCHS_STAT_BRR) != MMCHS_STAT_BRR)

  01fb4	eb000000	 bl          Read_MMC_STAT
  01fb8	e58d0038	 str         r0, [sp, #0x38]
  01fbc	e59d3038	 ldr         r3, [sp, #0x38]
  01fc0	e2033020	 and         r3, r3, #0x20
  01fc4	e3530020	 cmp         r3, #0x20
  01fc8	0a000035	 beq         |$LN23@SDIPolling|

; 1364 :         {
; 1365 :            // check for a timeout
; 1366 :            dwCurrentTickCount = OALGetTickCount();

  01fcc	eb000000	 bl          OALGetTickCount
  01fd0	e58d003c	 str         r0, [sp, #0x3C]
  01fd4	e59d303c	 ldr         r3, [sp, #0x3C]
  01fd8	e58d301c	 str         r3, [sp, #0x1C]

; 1367 :            if ( fTimeoutOverflow ? ( dwTimeout < dwCurrentTickCount && dwCurrentTickCount < dwCountStart )
; 1368 :              : ( dwTimeout < dwCurrentTickCount || dwCurrentTickCount < dwCountStart ) )

  01fdc	e59d3004	 ldr         r3, [sp, #4]
  01fe0	e3530000	 cmp         r3, #0
  01fe4	0a00000f	 beq         |$LN34@SDIPolling|
  01fe8	e59d2024	 ldr         r2, [sp, #0x24]
  01fec	e59d301c	 ldr         r3, [sp, #0x1C]
  01ff0	e1520003	 cmp         r2, r3
  01ff4	2a000006	 bcs         |$LN30@SDIPolling|
  01ff8	e59d201c	 ldr         r2, [sp, #0x1C]
  01ffc	e59d3014	 ldr         r3, [sp, #0x14]
  02000	e1520003	 cmp         r2, r3
  02004	2a000002	 bcs         |$LN30@SDIPolling|
  02008	e3a03001	 mov         r3, #1
  0200c	e58d3040	 str         r3, [sp, #0x40]
  02010	ea000001	 b           |$LN33@SDIPolling|
  02014		 |$LN30@SDIPolling|
  02014	e3a03000	 mov         r3, #0
  02018	e58d3040	 str         r3, [sp, #0x40]
  0201c		 |$LN33@SDIPolling|
  0201c	e59d3040	 ldr         r3, [sp, #0x40]
  02020	e58d3044	 str         r3, [sp, #0x44]
  02024	ea00000e	 b           |$LN35@SDIPolling|
  02028		 |$LN34@SDIPolling|
  02028	e59d2024	 ldr         r2, [sp, #0x24]
  0202c	e59d301c	 ldr         r3, [sp, #0x1C]
  02030	e1520003	 cmp         r2, r3
  02034	3a000006	 bcc         |$LN31@SDIPolling|
  02038	e59d201c	 ldr         r2, [sp, #0x1C]
  0203c	e59d3014	 ldr         r3, [sp, #0x14]
  02040	e1520003	 cmp         r2, r3
  02044	3a000002	 bcc         |$LN31@SDIPolling|
  02048	e3a03000	 mov         r3, #0
  0204c	e58d3048	 str         r3, [sp, #0x48]
  02050	ea000001	 b           |$LN32@SDIPolling|
  02054		 |$LN31@SDIPolling|
  02054	e3a03001	 mov         r3, #1
  02058	e58d3048	 str         r3, [sp, #0x48]
  0205c		 |$LN32@SDIPolling|
  0205c	e59d3048	 ldr         r3, [sp, #0x48]
  02060	e58d3044	 str         r3, [sp, #0x44]
  02064		 |$LN35@SDIPolling|
  02064	e59d3044	 ldr         r3, [sp, #0x44]
  02068	e3530000	 cmp         r3, #0
  0206c	0a00000b	 beq         |$LN22@SDIPolling|

; 1369 :            {
; 1370 :               OALMSG(OAL_ERROR, (TEXT("SDIPollingReceive: TIMEOUT0\r\n")));

  02070	e59f3460	 ldr         r3, [pc, #0x460]
  02074	e5933440	 ldr         r3, [r3, #0x440]
  02078	e3130001	 tst         r3, #1
  0207c	0a000004	 beq         |$LN36@SDIPolling|
  02080	e59f0460	 ldr         r0, [pc, #0x460]
  02084	eb000000	 bl          NKDbgPrintfW
  02088	e3a03001	 mov         r3, #1
  0208c	e58d304c	 str         r3, [sp, #0x4C]
  02090	ea000001	 b           |$LN37@SDIPolling|
  02094		 |$LN36@SDIPolling|
  02094	e3a03000	 mov         r3, #0
  02098	e58d304c	 str         r3, [sp, #0x4C]
  0209c		 |$LN37@SDIPolling|

; 1371 :               goto READ_ERROR;

  0209c	ea000106	 b           |$READ_ERROR$44608|
  020a0		 |$LN22@SDIPolling|

; 1372 :            }
; 1373 :         }

  020a0	eaffffc3	 b           |$LN24@SDIPolling|
  020a4		 |$LN23@SDIPolling|

; 1374 :         Set_MMC_STAT(MMCHS_STAT_BRR);

  020a4	e3a00020	 mov         r0, #0x20
  020a8	eb000000	 bl          Set_MMC_STAT

; 1375 :         fifoSizeW = dwLen / sizeof(DWORD);

  020ac	e59d109c	 ldr         r1, [sp, #0x9C]
  020b0	e3a00004	 mov         r0, #4
  020b4	eb000000	 bl          __rt_udiv
  020b8	e58d0000	 str         r0, [sp]

; 1376 :         if (dwLen % sizeof(DWORD)) fifoSizeW++;

  020bc	e59d109c	 ldr         r1, [sp, #0x9C]
  020c0	e3a00004	 mov         r0, #4
  020c4	eb000000	 bl          __rt_udiv
  020c8	e3510000	 cmp         r1, #0
  020cc	0a000002	 beq         |$LN21@SDIPolling|
  020d0	e59d3000	 ldr         r3, [sp]
  020d4	e2833001	 add         r3, r3, #1
  020d8	e58d3000	 str         r3, [sp]
  020dc		 |$LN21@SDIPolling|

; 1377 :         for (dwCount2 = 0; dwCount2 < fifoSizeW; dwCount2++)

  020dc	e3a03000	 mov         r3, #0
  020e0	e58d300c	 str         r3, [sp, #0xC]
  020e4	ea000002	 b           |$LN20@SDIPolling|
  020e8		 |$LN19@SDIPolling|
  020e8	e59d300c	 ldr         r3, [sp, #0xC]
  020ec	e2833001	 add         r3, r3, #1
  020f0	e58d300c	 str         r3, [sp, #0xC]
  020f4		 |$LN20@SDIPolling|
  020f4	e59d200c	 ldr         r2, [sp, #0xC]
  020f8	e59d3000	 ldr         r3, [sp]
  020fc	e1520003	 cmp         r2, r3
  02100	2a000011	 bcs         |$LN18@SDIPolling|

; 1378 :         {
; 1379 :             *pbuf2 = INREG32(&m_pbRegisters->MMCHS_DATA);

  02104	e59f33d4	 ldr         r3, [pc, #0x3D4]
  02108	e5933000	 ldr         r3, [r3]
  0210c	e2833e12	 add         r3, r3, #0x12, 28
  02110	e5933000	 ldr         r3, [r3]
  02114	e59d1020	 ldr         r1, [sp, #0x20]
  02118	e5c13000	 strb        r3, [r1]
  0211c	e1a02423	 mov         r2, r3, lsr #8
  02120	e1a03002	 mov         r3, r2
  02124	e5c13001	 strb        r3, [r1, #1]
  02128	e1a02422	 mov         r2, r2, lsr #8
  0212c	e1a03002	 mov         r3, r2
  02130	e5c13002	 strb        r3, [r1, #2]
  02134	e1a03422	 mov         r3, r2, lsr #8
  02138	e5c13003	 strb        r3, [r1, #3]

; 1380 :             pbuf2++;

  0213c	e59d3020	 ldr         r3, [sp, #0x20]
  02140	e2833004	 add         r3, r3, #4
  02144	e58d3020	 str         r3, [sp, #0x20]

; 1381 :         }

  02148	eaffffe6	 b           |$LN19@SDIPolling|
  0214c		 |$LN18@SDIPolling|

; 1382 :     } 
; 1383 :     else

  0214c	ea000072	 b           |$LN17@SDIPolling|
  02150		 |$LN26@SDIPolling|

; 1384 :     {
; 1385 :       OALMSGX(OAL_IO, (TEXT("SDIPollingReceive ready to read data\r\n")));
; 1386 :       fifoSizeW = INREG32(&m_pbRegisters->MMCHS_BLK) & 0xFFFF;

  02150	e59f3388	 ldr         r3, [pc, #0x388]
  02154	e5933000	 ldr         r3, [r3]
  02158	e2833f41	 add         r3, r3, #0x41, 30
  0215c	e5932000	 ldr         r2, [r3]
  02160	e3a03cff	 mov         r3, #0xFF, 24
  02164	e38330ff	 orr         r3, r3, #0xFF
  02168	e0023003	 and         r3, r2, r3
  0216c	e58d3000	 str         r3, [sp]

; 1387 :       OALMSGX(OAL_IO, (TEXT("SDIPollingReceive fifoSizeW %d\r\n"), fifoSizeW));
; 1388 :       blockLengthW = dwLen / fifoSizeW;

  02170	e59d109c	 ldr         r1, [sp, #0x9C]
  02174	e59d0000	 ldr         r0, [sp]
  02178	eb000000	 bl          __rt_udiv
  0217c	e58d0010	 str         r0, [sp, #0x10]

; 1389 :       OALMSGX(OAL_IO, (TEXT("SDIPollingReceive blockLengthW %d\r\n"), blockLengthW));
; 1390 :       for (dwCount1 = 0; dwCount1 < blockLengthW; dwCount1++)

  02180	e3a03000	 mov         r3, #0
  02184	e58d3028	 str         r3, [sp, #0x28]
  02188	ea000002	 b           |$LN16@SDIPolling|
  0218c		 |$LN15@SDIPolling|
  0218c	e59d3028	 ldr         r3, [sp, #0x28]
  02190	e2833001	 add         r3, r3, #1
  02194	e58d3028	 str         r3, [sp, #0x28]
  02198		 |$LN16@SDIPolling|
  02198	e59d2028	 ldr         r2, [sp, #0x28]
  0219c	e59d3010	 ldr         r3, [sp, #0x10]
  021a0	e1520003	 cmp         r2, r3
  021a4	2a00005c	 bcs         |$LN14@SDIPolling|
  021a8		 |$LN13@SDIPolling|

; 1391 :       {
; 1392 :         OALMSGX(OAL_IO, (TEXT("SDIPollingReceive set MMCHS_STAT BBR\r\n")));
; 1393 :         // Wait for Block ready for read
; 1394 :         while ((Read_MMC_STAT() & MMCHS_STAT_BRR) != MMCHS_STAT_BRR)

  021a8	eb000000	 bl          Read_MMC_STAT
  021ac	e58d0050	 str         r0, [sp, #0x50]
  021b0	e59d3050	 ldr         r3, [sp, #0x50]
  021b4	e2033020	 and         r3, r3, #0x20
  021b8	e3530020	 cmp         r3, #0x20
  021bc	0a000035	 beq         |$LN12@SDIPolling|

; 1395 :         {
; 1396 :           // check for a timeout
; 1397 :           dwCurrentTickCount = OALGetTickCount();

  021c0	eb000000	 bl          OALGetTickCount
  021c4	e58d0054	 str         r0, [sp, #0x54]
  021c8	e59d3054	 ldr         r3, [sp, #0x54]
  021cc	e58d301c	 str         r3, [sp, #0x1C]

; 1398 :           if ( fTimeoutOverflow ? ( dwTimeout < dwCurrentTickCount && dwCurrentTickCount < dwCountStart )
; 1399 :             : ( dwTimeout < dwCurrentTickCount || dwCurrentTickCount < dwCountStart ) )

  021d0	e59d3004	 ldr         r3, [sp, #4]
  021d4	e3530000	 cmp         r3, #0
  021d8	0a00000f	 beq         |$LN42@SDIPolling|
  021dc	e59d2024	 ldr         r2, [sp, #0x24]
  021e0	e59d301c	 ldr         r3, [sp, #0x1C]
  021e4	e1520003	 cmp         r2, r3
  021e8	2a000006	 bcs         |$LN38@SDIPolling|
  021ec	e59d201c	 ldr         r2, [sp, #0x1C]
  021f0	e59d3014	 ldr         r3, [sp, #0x14]
  021f4	e1520003	 cmp         r2, r3
  021f8	2a000002	 bcs         |$LN38@SDIPolling|
  021fc	e3a03001	 mov         r3, #1
  02200	e58d3058	 str         r3, [sp, #0x58]
  02204	ea000001	 b           |$LN41@SDIPolling|
  02208		 |$LN38@SDIPolling|
  02208	e3a03000	 mov         r3, #0
  0220c	e58d3058	 str         r3, [sp, #0x58]
  02210		 |$LN41@SDIPolling|
  02210	e59d3058	 ldr         r3, [sp, #0x58]
  02214	e58d305c	 str         r3, [sp, #0x5C]
  02218	ea00000e	 b           |$LN43@SDIPolling|
  0221c		 |$LN42@SDIPolling|
  0221c	e59d2024	 ldr         r2, [sp, #0x24]
  02220	e59d301c	 ldr         r3, [sp, #0x1C]
  02224	e1520003	 cmp         r2, r3
  02228	3a000006	 bcc         |$LN39@SDIPolling|
  0222c	e59d201c	 ldr         r2, [sp, #0x1C]
  02230	e59d3014	 ldr         r3, [sp, #0x14]
  02234	e1520003	 cmp         r2, r3
  02238	3a000002	 bcc         |$LN39@SDIPolling|
  0223c	e3a03000	 mov         r3, #0
  02240	e58d3060	 str         r3, [sp, #0x60]
  02244	ea000001	 b           |$LN40@SDIPolling|
  02248		 |$LN39@SDIPolling|
  02248	e3a03001	 mov         r3, #1
  0224c	e58d3060	 str         r3, [sp, #0x60]
  02250		 |$LN40@SDIPolling|
  02250	e59d3060	 ldr         r3, [sp, #0x60]
  02254	e58d305c	 str         r3, [sp, #0x5C]
  02258		 |$LN43@SDIPolling|
  02258	e59d305c	 ldr         r3, [sp, #0x5C]
  0225c	e3530000	 cmp         r3, #0
  02260	0a00000b	 beq         |$LN11@SDIPolling|

; 1400 :           {
; 1401 :             OALMSG(OAL_ERROR, (TEXT("SDIPollingReceive: TIMEOUT1\r\n")));

  02264	e59f326c	 ldr         r3, [pc, #0x26C]
  02268	e5933440	 ldr         r3, [r3, #0x440]
  0226c	e3130001	 tst         r3, #1
  02270	0a000004	 beq         |$LN44@SDIPolling|
  02274	e59f0268	 ldr         r0, [pc, #0x268]
  02278	eb000000	 bl          NKDbgPrintfW
  0227c	e3a03001	 mov         r3, #1
  02280	e58d3064	 str         r3, [sp, #0x64]
  02284	ea000001	 b           |$LN45@SDIPolling|
  02288		 |$LN44@SDIPolling|
  02288	e3a03000	 mov         r3, #0
  0228c	e58d3064	 str         r3, [sp, #0x64]
  02290		 |$LN45@SDIPolling|

; 1402 :             goto READ_ERROR;

  02290	ea000089	 b           |$READ_ERROR$44608|
  02294		 |$LN11@SDIPolling|

; 1403 :           }
; 1404 :         }

  02294	eaffffc3	 b           |$LN13@SDIPolling|
  02298		 |$LN12@SDIPolling|

; 1405 :         Set_MMC_STAT(MMCHS_STAT_BRR);

  02298	e3a00020	 mov         r0, #0x20
  0229c	eb000000	 bl          Set_MMC_STAT

; 1406 : 
; 1407 :         // Get all data from DATA register and write in user buffer
; 1408 :         OALMSGX(OAL_IO, (TEXT("SDIPollingReceive reading data 2\r\n")));
; 1409 :         for (dwCount2 = 0; dwCount2 < (fifoSizeW/sizeof(DWORD)); dwCount2++)

  022a0	e3a03000	 mov         r3, #0
  022a4	e58d300c	 str         r3, [sp, #0xC]
  022a8	ea000002	 b           |$LN10@SDIPolling|
  022ac		 |$LN9@SDIPolling|
  022ac	e59d300c	 ldr         r3, [sp, #0xC]
  022b0	e2833001	 add         r3, r3, #1
  022b4	e58d300c	 str         r3, [sp, #0xC]
  022b8		 |$LN10@SDIPolling|
  022b8	e59d1000	 ldr         r1, [sp]
  022bc	e3a00004	 mov         r0, #4
  022c0	eb000000	 bl          __rt_udiv
  022c4	e59d300c	 ldr         r3, [sp, #0xC]
  022c8	e1530000	 cmp         r3, r0
  022cc	2a000011	 bcs         |$LN8@SDIPolling|

; 1410 :         {
; 1411 :             *pbuf2 = INREG32(&m_pbRegisters->MMCHS_DATA) ;

  022d0	e59f3208	 ldr         r3, [pc, #0x208]
  022d4	e5933000	 ldr         r3, [r3]
  022d8	e2833e12	 add         r3, r3, #0x12, 28
  022dc	e5933000	 ldr         r3, [r3]
  022e0	e59d1020	 ldr         r1, [sp, #0x20]
  022e4	e5c13000	 strb        r3, [r1]
  022e8	e1a02423	 mov         r2, r3, lsr #8
  022ec	e1a03002	 mov         r3, r2
  022f0	e5c13001	 strb        r3, [r1, #1]
  022f4	e1a02422	 mov         r2, r2, lsr #8
  022f8	e1a03002	 mov         r3, r2
  022fc	e5c13002	 strb        r3, [r1, #2]
  02300	e1a03422	 mov         r3, r2, lsr #8
  02304	e5c13003	 strb        r3, [r1, #3]

; 1412 :             pbuf2++;

  02308	e59d3020	 ldr         r3, [sp, #0x20]
  0230c	e2833004	 add         r3, r3, #4
  02310	e58d3020	 str         r3, [sp, #0x20]

; 1413 :         }

  02314	eaffffe4	 b           |$LN9@SDIPolling|
  02318		 |$LN8@SDIPolling|

; 1414 :       }

  02318	eaffff9b	 b           |$LN15@SDIPolling|
  0231c		 |$LN14@SDIPolling|
  0231c		 |$LN17@SDIPolling|

; 1415 :     }
; 1416 :     // recalculate timeout conditions
; 1417 :     dwCountStart = OALGetTickCount();

  0231c	eb000000	 bl          OALGetTickCount
  02320	e58d0068	 str         r0, [sp, #0x68]
  02324	e59d3068	 ldr         r3, [sp, #0x68]
  02328	e58d3014	 str         r3, [sp, #0x14]

; 1418 :     dwTimeout = dwCountStart + m_dwMaxTimeout;

  0232c	e59d2014	 ldr         r2, [sp, #0x14]
  02330	e59f31a4	 ldr         r3, [pc, #0x1A4]
  02334	e5933000	 ldr         r3, [r3]
  02338	e0823003	 add         r3, r2, r3
  0233c	e58d3024	 str         r3, [sp, #0x24]

; 1419 :     if ( dwTimeout < dwCountStart )

  02340	e59d2024	 ldr         r2, [sp, #0x24]
  02344	e59d3014	 ldr         r3, [sp, #0x14]
  02348	e1520003	 cmp         r2, r3
  0234c	2a000002	 bcs         |$LN7@SDIPolling|

; 1420 :         fTimeoutOverflow = TRUE;

  02350	e3a03001	 mov         r3, #1
  02354	e58d3004	 str         r3, [sp, #4]

; 1421 :     else

  02358	ea000001	 b           |$LN6@SDIPolling|
  0235c		 |$LN7@SDIPolling|

; 1422 :         fTimeoutOverflow = FALSE;

  0235c	e3a03000	 mov         r3, #0
  02360	e58d3004	 str         r3, [sp, #4]
  02364		 |$LN6@SDIPolling|
  02364		 |$LN5@SDIPolling|

; 1423 : 
; 1424 :     while (((Read_MMC_STAT()&MMCHS_STAT_TC) != MMCHS_STAT_TC))

  02364	eb000000	 bl          Read_MMC_STAT
  02368	e58d006c	 str         r0, [sp, #0x6C]
  0236c	e59d306c	 ldr         r3, [sp, #0x6C]
  02370	e2033002	 and         r3, r3, #2
  02374	e3530002	 cmp         r3, #2
  02378	0a000035	 beq         |$LN4@SDIPolling|

; 1425 :     {
; 1426 :         // check for a timeout
; 1427 :         dwCurrentTickCount = OALGetTickCount();

  0237c	eb000000	 bl          OALGetTickCount
  02380	e58d0070	 str         r0, [sp, #0x70]
  02384	e59d3070	 ldr         r3, [sp, #0x70]
  02388	e58d301c	 str         r3, [sp, #0x1C]

; 1428 :         if ( fTimeoutOverflow ? ( dwTimeout < dwCurrentTickCount && dwCurrentTickCount < dwCountStart )
; 1429 :            : ( dwTimeout < dwCurrentTickCount || dwCurrentTickCount < dwCountStart ) )

  0238c	e59d3004	 ldr         r3, [sp, #4]
  02390	e3530000	 cmp         r3, #0
  02394	0a00000f	 beq         |$LN50@SDIPolling|
  02398	e59d2024	 ldr         r2, [sp, #0x24]
  0239c	e59d301c	 ldr         r3, [sp, #0x1C]
  023a0	e1520003	 cmp         r2, r3
  023a4	2a000006	 bcs         |$LN46@SDIPolling|
  023a8	e59d201c	 ldr         r2, [sp, #0x1C]
  023ac	e59d3014	 ldr         r3, [sp, #0x14]
  023b0	e1520003	 cmp         r2, r3
  023b4	2a000002	 bcs         |$LN46@SDIPolling|
  023b8	e3a03001	 mov         r3, #1
  023bc	e58d3074	 str         r3, [sp, #0x74]
  023c0	ea000001	 b           |$LN49@SDIPolling|
  023c4		 |$LN46@SDIPolling|
  023c4	e3a03000	 mov         r3, #0
  023c8	e58d3074	 str         r3, [sp, #0x74]
  023cc		 |$LN49@SDIPolling|
  023cc	e59d3074	 ldr         r3, [sp, #0x74]
  023d0	e58d3078	 str         r3, [sp, #0x78]
  023d4	ea00000e	 b           |$LN51@SDIPolling|
  023d8		 |$LN50@SDIPolling|
  023d8	e59d2024	 ldr         r2, [sp, #0x24]
  023dc	e59d301c	 ldr         r3, [sp, #0x1C]
  023e0	e1520003	 cmp         r2, r3
  023e4	3a000006	 bcc         |$LN47@SDIPolling|
  023e8	e59d201c	 ldr         r2, [sp, #0x1C]
  023ec	e59d3014	 ldr         r3, [sp, #0x14]
  023f0	e1520003	 cmp         r2, r3
  023f4	3a000002	 bcc         |$LN47@SDIPolling|
  023f8	e3a03000	 mov         r3, #0
  023fc	e58d307c	 str         r3, [sp, #0x7C]
  02400	ea000001	 b           |$LN48@SDIPolling|
  02404		 |$LN47@SDIPolling|
  02404	e3a03001	 mov         r3, #1
  02408	e58d307c	 str         r3, [sp, #0x7C]
  0240c		 |$LN48@SDIPolling|
  0240c	e59d307c	 ldr         r3, [sp, #0x7C]
  02410	e58d3078	 str         r3, [sp, #0x78]
  02414		 |$LN51@SDIPolling|
  02414	e59d3078	 ldr         r3, [sp, #0x78]
  02418	e3530000	 cmp         r3, #0
  0241c	0a00000b	 beq         |$LN3@SDIPolling|

; 1430 :         {
; 1431 :             OALMSG(OAL_ERROR, (TEXT("SDIPollingReceive: TIMEOUT3\r\n")));

  02420	e59f30b0	 ldr         r3, [pc, #0xB0]
  02424	e5933440	 ldr         r3, [r3, #0x440]
  02428	e3130001	 tst         r3, #1
  0242c	0a000004	 beq         |$LN52@SDIPolling|
  02430	e59f009c	 ldr         r0, [pc, #0x9C]
  02434	eb000000	 bl          NKDbgPrintfW
  02438	e3a03001	 mov         r3, #1
  0243c	e58d3080	 str         r3, [sp, #0x80]
  02440	ea000001	 b           |$LN53@SDIPolling|
  02444		 |$LN52@SDIPolling|
  02444	e3a03000	 mov         r3, #0
  02448	e58d3080	 str         r3, [sp, #0x80]
  0244c		 |$LN53@SDIPolling|

; 1432 :             goto READ_ERROR;

  0244c	ea00001a	 b           |$READ_ERROR$44608|
  02450		 |$LN3@SDIPolling|

; 1433 :         }
; 1434 :     }

  02450	eaffffc3	 b           |$LN5@SDIPolling|
  02454		 |$LN4@SDIPolling|

; 1435 : 
; 1436 :     Set_MMC_STAT(MMCHS_STAT_TC);

  02454	e3a00002	 mov         r0, #2
  02458	eb000000	 bl          Set_MMC_STAT

; 1437 :     // Check if there is no CRC error
; 1438 :     if (!(Read_MMC_STAT() & MMCHS_STAT_DCRC))

  0245c	eb000000	 bl          Read_MMC_STAT
  02460	e58d0084	 str         r0, [sp, #0x84]
  02464	e59d3084	 ldr         r3, [sp, #0x84]
  02468	e3130602	 tst         r3, #2, 12
  0246c	1a000009	 bne         |$LN2@SDIPolling|

; 1439 :     {
; 1440 :         MMC_STAT = Read_MMC_STAT();

  02470	eb000000	 bl          Read_MMC_STAT
  02474	e58d0088	 str         r0, [sp, #0x88]
  02478	e59d3088	 ldr         r3, [sp, #0x88]
  0247c	e58d3018	 str         r3, [sp, #0x18]

; 1441 :         Write_MMC_STAT(MMC_STAT);

  02480	e59d0018	 ldr         r0, [sp, #0x18]
  02484	eb000000	 bl          Write_MMC_STAT

; 1442 :         return TRUE;

  02488	e3a03001	 mov         r3, #1
  0248c	e58d302c	 str         r3, [sp, #0x2C]
  02490	ea00000b	 b           |$LN28@SDIPolling|

; 1443 :     }
; 1444 :     else

  02494	ea000008	 b           |$LN1@SDIPolling|
  02498		 |$LN2@SDIPolling|

; 1445 :     {
; 1446 :         MMC_STAT = Read_MMC_STAT();

  02498	eb000000	 bl          Read_MMC_STAT
  0249c	e58d008c	 str         r0, [sp, #0x8C]
  024a0	e59d308c	 ldr         r3, [sp, #0x8C]
  024a4	e58d3018	 str         r3, [sp, #0x18]

; 1447 :         Write_MMC_STAT(MMC_STAT);

  024a8	e59d0018	 ldr         r0, [sp, #0x18]
  024ac	eb000000	 bl          Write_MMC_STAT

; 1448 :         return FALSE;

  024b0	e3a03000	 mov         r3, #0
  024b4	e58d302c	 str         r3, [sp, #0x2C]
  024b8	ea000001	 b           |$LN28@SDIPolling|
  024bc		 |$LN1@SDIPolling|
  024bc		 |$READ_ERROR$44608|

; 1449 :     }
; 1450 : 
; 1451 : 
; 1452 : READ_ERROR:
; 1453 : 
; 1454 :     OALMSGX(OAL_IO, (TEXT("SDIPollingReceive error\r\n")));
; 1455 :     return FALSE;

  024bc	e3a03000	 mov         r3, #0
  024c0	e58d302c	 str         r3, [sp, #0x2C]
  024c4		 |$LN28@SDIPolling|

; 1456 : }

  024c4	e59d002c	 ldr         r0, [sp, #0x2C]
  024c8	e28dd090	 add         sp, sp, #0x90
  024cc	e89d6000	 ldmia       sp, {sp, lr}
  024d0	e12fff1e	 bx          lr
  024d4		 |$LN57@SDIPolling|
  024d4		 |$LN58@SDIPolling|
  024d4	00000000	 DCD         |??_C@_1DM@FAHGNIG@?$AAS?$AAD?$AAI?$AAP?$AAo?$AAl?$AAl?$AAi?$AAn?$AAg?$AAR?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AA?3?$AA?5?$AAT?$AAI?$AAM?$AAE?$AAO?$AAU?$AAT?$AA3?$AA?$AN?$AA?6?$AA?$AA@|
  024d8		 |$LN59@SDIPolling|
  024d8	00000000	 DCD         |dpCurSettings|
  024dc		 |$LN60@SDIPolling|
  024dc	00000000	 DCD         |m_dwMaxTimeout|
  024e0		 |$LN61@SDIPolling|
  024e0	00000000	 DCD         |m_pbRegisters|
  024e4		 |$LN62@SDIPolling|
  024e4	00000000	 DCD         |??_C@_1DM@EHCCGKPL@?$AAS?$AAD?$AAI?$AAP?$AAo?$AAl?$AAl?$AAi?$AAn?$AAg?$AAR?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AA?3?$AA?5?$AAT?$AAI?$AAM?$AAE?$AAO?$AAU?$AAT?$AA1?$AA?$AN?$AA?6?$AA?$AA@|
  024e8		 |$LN63@SDIPolling|
  024e8	00000000	 DCD         |??_C@_1DM@ILIIGKGF@?$AAS?$AAD?$AAI?$AAP?$AAo?$AAl?$AAl?$AAi?$AAn?$AAg?$AAR?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AA?3?$AA?5?$AAT?$AAI?$AAM?$AAE?$AAO?$AAU?$AAT?$AA0?$AA?$AN?$AA?6?$AA?$AA@|
  024ec		 |$LN64@SDIPolling|
  024ec	00000000	 DCD         |m_dwSDIOCard|
  024f0		 |$M44983|

			 ENDP  ; |SDIPollingReceive|


  000d0			 AREA	 |.pdata|, PDATA
|$T44998| DCD	|$LN5@Set_MMC_ST|
	DCD	0x40001003
; Function compile flags: /Odtp

  024f0			 AREA	 |.text|, CODE, ARM

  024f0		 |Set_MMC_STAT| PROC

; 404  : {

  024f0		 |$LN5@Set_MMC_ST|
  024f0	e1a0c00d	 mov         r12, sp
  024f4	e92d0001	 stmdb       sp!, {r0}
  024f8	e92d5000	 stmdb       sp!, {r12, lr}
  024fc		 |$M44995|

; 405  :     SETREG32(&m_pbRegisters->MMCHS_STAT, dwVal);

  024fc	e59f3028	 ldr         r3, [pc, #0x28]
  02500	e5933000	 ldr         r3, [r3]
  02504	e2833e13	 add         r3, r3, #0x13, 28
  02508	e5932000	 ldr         r2, [r3]
  0250c	e59d3008	 ldr         r3, [sp, #8]
  02510	e1822003	 orr         r2, r2, r3
  02514	e59f3010	 ldr         r3, [pc, #0x10]
  02518	e5933000	 ldr         r3, [r3]
  0251c	e2833e13	 add         r3, r3, #0x13, 28
  02520	e5832000	 str         r2, [r3]

; 406  : }

  02524	e89d6000	 ldmia       sp, {sp, lr}
  02528	e12fff1e	 bx          lr
  0252c		 |$LN6@Set_MMC_ST|
  0252c		 |$LN7@Set_MMC_ST|
  0252c	00000000	 DCD         |m_pbRegisters|
  02530		 |$M44996|

			 ENDP  ; |Set_MMC_STAT|

	END
