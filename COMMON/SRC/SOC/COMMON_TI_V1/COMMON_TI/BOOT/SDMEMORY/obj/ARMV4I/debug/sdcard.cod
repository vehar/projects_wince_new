; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\BOOT\SDMEMORY\sdcard.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.data|, DATA
	 COMMON	|Disk|, 0x38

	 COMMON	|fileio_ops|, 0x14

	 COMMON	|Request|, 0x60

	 COMMON	|pFile|, 0x4

	 COMMON	|File|, 0x224

	 COMMON	|MMCcmd|, 0x6c


  00000			 AREA	 |.bss|, NOINIT
|bFileIoInit| %	0x4
|bAlternateCommandMode| % 0x4
|?CurrentSpeed@?1??MMCSetTranSpeed@@9@9| % 0x4		; `MMCSetTranSpeed'::`2'::CurrentSpeed

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
|CommandToResponse| DCB 0x0
	DCB	0x3
	DCB	0x2
	DCB	0x1
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x1
	DCB	0x3
	DCB	0x2
	DCB	0x2
	DCB	0x1
	DCB	0x1
	DCB	0x1
	DCB	0x0
	DCB	0x0
	DCB	0x1
	DCB	0x1
	DCB	0x1
	DCB	0x0
	DCB	0x1
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x1
	DCB	0x1
	DCB	0x1
	DCB	0x1
	DCB	0x1
	DCB	0x1
	DCB	0x1
	DCB	0x0
	DCB	0x1
	DCB	0x1
	DCB	0x1
	DCB	0x1
	DCB	0x1
	DCB	0x1
	DCB	0x1
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x1
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x1
	DCB	0x1
	%	3
|CommandToTransferClass| DCB 0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x2
	DCB	0x2
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x1
	DCB	0x1
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	%	3
|AlternateCommandToResponse| DCB 0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x1
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x1
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x1
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x1
	DCB	0x1
	DCB	0x0
	DCB	0x1
	DCB	0x1
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x1
	DCB	0x0
	DCB	0x0
	DCB	0x3
	DCB	0x1
	DCB	0x1
	DCB	0x1
	DCB	0x1
	DCB	0x1
	DCB	0x1
	DCB	0x1
	DCB	0x0
	DCB	0x0
	DCB	0x1
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	%	3
|AlternateCommandToTransferClass| DCB 0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	EXPORT	|INTF_MMCSendCommand|
	IMPORT	|SdhcBusRequestHandler|

  00000			 AREA	 |.pdata|, PDATA
|$T44991| DCD	|$LN36@INTF_MMCSe|
	DCD	0x40010204
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\boot\sdmemory\sdcard.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |INTF_MMCSendCommand| PROC

; 116  : {

  00000		 |$LN36@INTF_MMCSe|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd03c	 sub         sp, sp, #0x3C
  00010		 |$M44988|

; 117  :     // ignore init flag, init clocks are requested by card insert...
; 118  :     UNREFERENCED_PARAMETER(init);
; 119  : 
; 120  :     Request.CommandCode = pMMC_command->command;

  00010	e59d3044	 ldr         r3, [sp, #0x44]
  00014	e2833004	 add         r3, r3, #4
  00018	e5d32000	 ldrb        r2, [r3]
  0001c	e59f33cc	 ldr         r3, [pc, #0x3CC]
  00020	e5c32014	 strb        r2, [r3, #0x14]

; 121  :     Request.CommandArgument = pMMC_command->argument;

  00024	e59d3044	 ldr         r3, [sp, #0x44]
  00028	e2833008	 add         r3, r3, #8
  0002c	e5932000	 ldr         r2, [r3]
  00030	e59f33b8	 ldr         r3, [pc, #0x3B8]
  00034	e5832018	 str         r2, [r3, #0x18]

; 122  :     Request.BlockSize = pMMC_command->block_len;

  00038	e59d3044	 ldr         r3, [sp, #0x44]
  0003c	e2833010	 add         r3, r3, #0x10
  00040	e5932000	 ldr         r2, [r3]
  00044	e59f33a4	 ldr         r3, [pc, #0x3A4]
  00048	e5832040	 str         r2, [r3, #0x40]

; 123  :     Request.NumBlocks = pMMC_command->num_blocks;

  0004c	e59d3044	 ldr         r3, [sp, #0x44]
  00050	e283300c	 add         r3, r3, #0xC
  00054	e5932000	 ldr         r2, [r3]
  00058	e59f3390	 ldr         r3, [pc, #0x390]
  0005c	e583203c	 str         r2, [r3, #0x3C]

; 124  :     Request.HCParam = 0;

  00060	e59f2388	 ldr         r2, [pc, #0x388]
  00064	e3a03000	 mov         r3, #0
  00068	e5823044	 str         r3, [r2, #0x44]

; 125  : 
; 126  :     if (bAlternateCommandMode)

  0006c	e59f3390	 ldr         r3, [pc, #0x390]
  00070	e5933000	 ldr         r3, [r3]
  00074	e3530000	 cmp         r3, #0
  00078	0a000054	 beq         |$LN7@INTF_MMCSe|

; 127  :     {
; 128  :         Request.CommandResponse.ResponseType = CONVERT_RESPONSE_TYPE(AlternateCommandToResponse[Request.CommandCode]);

  0007c	e59f336c	 ldr         r3, [pc, #0x36C]
  00080	e5d33014	 ldrb        r3, [r3, #0x14]
  00084	e1a02003	 mov         r2, r3
  00088	e59f3370	 ldr         r3, [pc, #0x370]
  0008c	e0833002	 add         r3, r3, r2
  00090	e5d33000	 ldrb        r3, [r3]
  00094	e3530000	 cmp         r3, #0
  00098	1a000002	 bne         |$LN16@INTF_MMCSe|
  0009c	e3a03000	 mov         r3, #0
  000a0	e58d3004	 str         r3, [sp, #4]
  000a4	ea000028	 b           |$LN17@INTF_MMCSe|
  000a8		 |$LN16@INTF_MMCSe|
  000a8	e59f3340	 ldr         r3, [pc, #0x340]
  000ac	e5d33014	 ldrb        r3, [r3, #0x14]
  000b0	e1a02003	 mov         r2, r3
  000b4	e59f3344	 ldr         r3, [pc, #0x344]
  000b8	e0833002	 add         r3, r3, r2
  000bc	e5d33000	 ldrb        r3, [r3]
  000c0	e3530001	 cmp         r3, #1
  000c4	1a000002	 bne         |$LN14@INTF_MMCSe|
  000c8	e3a03001	 mov         r3, #1
  000cc	e58d3008	 str         r3, [sp, #8]
  000d0	ea00001b	 b           |$LN15@INTF_MMCSe|
  000d4		 |$LN14@INTF_MMCSe|
  000d4	e59f3314	 ldr         r3, [pc, #0x314]
  000d8	e5d33014	 ldrb        r3, [r3, #0x14]
  000dc	e1a02003	 mov         r2, r3
  000e0	e59f3318	 ldr         r3, [pc, #0x318]
  000e4	e0833002	 add         r3, r3, r2
  000e8	e5d33000	 ldrb        r3, [r3]
  000ec	e3530002	 cmp         r3, #2
  000f0	1a000002	 bne         |$LN12@INTF_MMCSe|
  000f4	e3a03003	 mov         r3, #3
  000f8	e58d300c	 str         r3, [sp, #0xC]
  000fc	ea00000e	 b           |$LN13@INTF_MMCSe|
  00100		 |$LN12@INTF_MMCSe|
  00100	e59f32e8	 ldr         r3, [pc, #0x2E8]
  00104	e5d33014	 ldrb        r3, [r3, #0x14]
  00108	e1a02003	 mov         r2, r3
  0010c	e59f32ec	 ldr         r3, [pc, #0x2EC]
  00110	e0833002	 add         r3, r3, r2
  00114	e5d33000	 ldrb        r3, [r3]
  00118	e3530003	 cmp         r3, #3
  0011c	1a000002	 bne         |$LN10@INTF_MMCSe|
  00120	e3a03004	 mov         r3, #4
  00124	e58d3010	 str         r3, [sp, #0x10]
  00128	ea000001	 b           |$LN11@INTF_MMCSe|
  0012c		 |$LN10@INTF_MMCSe|
  0012c	e3a03000	 mov         r3, #0
  00130	e58d3010	 str         r3, [sp, #0x10]
  00134		 |$LN11@INTF_MMCSe|
  00134	e59d3010	 ldr         r3, [sp, #0x10]
  00138	e58d300c	 str         r3, [sp, #0xC]
  0013c		 |$LN13@INTF_MMCSe|
  0013c	e59d300c	 ldr         r3, [sp, #0xC]
  00140	e58d3008	 str         r3, [sp, #8]
  00144		 |$LN15@INTF_MMCSe|
  00144	e59d3008	 ldr         r3, [sp, #8]
  00148	e58d3004	 str         r3, [sp, #4]
  0014c		 |$LN17@INTF_MMCSe|
  0014c	e59d2004	 ldr         r2, [sp, #4]
  00150	e59f3298	 ldr         r3, [pc, #0x298]
  00154	e583201c	 str         r2, [r3, #0x1C]

; 129  :         Request.TransferClass = CONVERT_TC(AlternateCommandToTransferClass[Request.CommandCode]);

  00158	e59f3290	 ldr         r3, [pc, #0x290]
  0015c	e5d33014	 ldrb        r3, [r3, #0x14]
  00160	e1a02003	 mov         r2, r3
  00164	e59f3290	 ldr         r3, [pc, #0x290]
  00168	e0833002	 add         r3, r3, r2
  0016c	e5d33000	 ldrb        r3, [r3]
  00170	e3530000	 cmp         r3, #0
  00174	1a000002	 bne         |$LN20@INTF_MMCSe|
  00178	e3a03002	 mov         r3, #2
  0017c	e58d3014	 str         r3, [sp, #0x14]
  00180	ea00000e	 b           |$LN21@INTF_MMCSe|
  00184		 |$LN20@INTF_MMCSe|
  00184	e59f3264	 ldr         r3, [pc, #0x264]
  00188	e5d33014	 ldrb        r3, [r3, #0x14]
  0018c	e1a02003	 mov         r2, r3
  00190	e59f3264	 ldr         r3, [pc, #0x264]
  00194	e0833002	 add         r3, r3, r2
  00198	e5d33000	 ldrb        r3, [r3]
  0019c	e3530002	 cmp         r3, #2
  001a0	1a000002	 bne         |$LN18@INTF_MMCSe|
  001a4	e3a03000	 mov         r3, #0
  001a8	e58d3018	 str         r3, [sp, #0x18]
  001ac	ea000001	 b           |$LN19@INTF_MMCSe|
  001b0		 |$LN18@INTF_MMCSe|
  001b0	e3a03001	 mov         r3, #1
  001b4	e58d3018	 str         r3, [sp, #0x18]
  001b8		 |$LN19@INTF_MMCSe|
  001b8	e59d3018	 ldr         r3, [sp, #0x18]
  001bc	e58d3014	 str         r3, [sp, #0x14]
  001c0		 |$LN21@INTF_MMCSe|
  001c0	e59d2014	 ldr         r2, [sp, #0x14]
  001c4	e59f3224	 ldr         r3, [pc, #0x224]
  001c8	e5832010	 str         r2, [r3, #0x10]

; 130  :     }
; 131  :     else

  001cc	ea000053	 b           |$LN6@INTF_MMCSe|
  001d0		 |$LN7@INTF_MMCSe|

; 132  :     {
; 133  :         Request.CommandResponse.ResponseType = CONVERT_RESPONSE_TYPE(CommandToResponse[Request.CommandCode]);

  001d0	e59f3218	 ldr         r3, [pc, #0x218]
  001d4	e5d33014	 ldrb        r3, [r3, #0x14]
  001d8	e1a02003	 mov         r2, r3
  001dc	e59f3214	 ldr         r3, [pc, #0x214]
  001e0	e0833002	 add         r3, r3, r2
  001e4	e5d33000	 ldrb        r3, [r3]
  001e8	e3530000	 cmp         r3, #0
  001ec	1a000002	 bne         |$LN28@INTF_MMCSe|
  001f0	e3a03000	 mov         r3, #0
  001f4	e58d301c	 str         r3, [sp, #0x1C]
  001f8	ea000028	 b           |$LN29@INTF_MMCSe|
  001fc		 |$LN28@INTF_MMCSe|
  001fc	e59f31ec	 ldr         r3, [pc, #0x1EC]
  00200	e5d33014	 ldrb        r3, [r3, #0x14]
  00204	e1a02003	 mov         r2, r3
  00208	e59f31e8	 ldr         r3, [pc, #0x1E8]
  0020c	e0833002	 add         r3, r3, r2
  00210	e5d33000	 ldrb        r3, [r3]
  00214	e3530001	 cmp         r3, #1
  00218	1a000002	 bne         |$LN26@INTF_MMCSe|
  0021c	e3a03001	 mov         r3, #1
  00220	e58d3020	 str         r3, [sp, #0x20]
  00224	ea00001b	 b           |$LN27@INTF_MMCSe|
  00228		 |$LN26@INTF_MMCSe|
  00228	e59f31c0	 ldr         r3, [pc, #0x1C0]
  0022c	e5d33014	 ldrb        r3, [r3, #0x14]
  00230	e1a02003	 mov         r2, r3
  00234	e59f31bc	 ldr         r3, [pc, #0x1BC]
  00238	e0833002	 add         r3, r3, r2
  0023c	e5d33000	 ldrb        r3, [r3]
  00240	e3530002	 cmp         r3, #2
  00244	1a000002	 bne         |$LN24@INTF_MMCSe|
  00248	e3a03003	 mov         r3, #3
  0024c	e58d3024	 str         r3, [sp, #0x24]
  00250	ea00000e	 b           |$LN25@INTF_MMCSe|
  00254		 |$LN24@INTF_MMCSe|
  00254	e59f3194	 ldr         r3, [pc, #0x194]
  00258	e5d33014	 ldrb        r3, [r3, #0x14]
  0025c	e1a02003	 mov         r2, r3
  00260	e59f3190	 ldr         r3, [pc, #0x190]
  00264	e0833002	 add         r3, r3, r2
  00268	e5d33000	 ldrb        r3, [r3]
  0026c	e3530003	 cmp         r3, #3
  00270	1a000002	 bne         |$LN22@INTF_MMCSe|
  00274	e3a03004	 mov         r3, #4
  00278	e58d3028	 str         r3, [sp, #0x28]
  0027c	ea000001	 b           |$LN23@INTF_MMCSe|
  00280		 |$LN22@INTF_MMCSe|
  00280	e3a03000	 mov         r3, #0
  00284	e58d3028	 str         r3, [sp, #0x28]
  00288		 |$LN23@INTF_MMCSe|
  00288	e59d3028	 ldr         r3, [sp, #0x28]
  0028c	e58d3024	 str         r3, [sp, #0x24]
  00290		 |$LN25@INTF_MMCSe|
  00290	e59d3024	 ldr         r3, [sp, #0x24]
  00294	e58d3020	 str         r3, [sp, #0x20]
  00298		 |$LN27@INTF_MMCSe|
  00298	e59d3020	 ldr         r3, [sp, #0x20]
  0029c	e58d301c	 str         r3, [sp, #0x1C]
  002a0		 |$LN29@INTF_MMCSe|
  002a0	e59d201c	 ldr         r2, [sp, #0x1C]
  002a4	e59f3144	 ldr         r3, [pc, #0x144]
  002a8	e583201c	 str         r2, [r3, #0x1C]

; 134  :         Request.TransferClass = CONVERT_TC(CommandToTransferClass[Request.CommandCode]);

  002ac	e59f313c	 ldr         r3, [pc, #0x13C]
  002b0	e5d33014	 ldrb        r3, [r3, #0x14]
  002b4	e1a02003	 mov         r2, r3
  002b8	e59f3134	 ldr         r3, [pc, #0x134]
  002bc	e0833002	 add         r3, r3, r2
  002c0	e5d33000	 ldrb        r3, [r3]
  002c4	e3530000	 cmp         r3, #0
  002c8	1a000002	 bne         |$LN32@INTF_MMCSe|
  002cc	e3a03002	 mov         r3, #2
  002d0	e58d302c	 str         r3, [sp, #0x2C]
  002d4	ea00000e	 b           |$LN33@INTF_MMCSe|
  002d8		 |$LN32@INTF_MMCSe|
  002d8	e59f3110	 ldr         r3, [pc, #0x110]
  002dc	e5d33014	 ldrb        r3, [r3, #0x14]
  002e0	e1a02003	 mov         r2, r3
  002e4	e59f3108	 ldr         r3, [pc, #0x108]
  002e8	e0833002	 add         r3, r3, r2
  002ec	e5d33000	 ldrb        r3, [r3]
  002f0	e3530002	 cmp         r3, #2
  002f4	1a000002	 bne         |$LN30@INTF_MMCSe|
  002f8	e3a03000	 mov         r3, #0
  002fc	e58d3030	 str         r3, [sp, #0x30]
  00300	ea000001	 b           |$LN31@INTF_MMCSe|
  00304		 |$LN30@INTF_MMCSe|
  00304	e3a03001	 mov         r3, #1
  00308	e58d3030	 str         r3, [sp, #0x30]
  0030c		 |$LN31@INTF_MMCSe|
  0030c	e59d3030	 ldr         r3, [sp, #0x30]
  00310	e58d302c	 str         r3, [sp, #0x2C]
  00314		 |$LN33@INTF_MMCSe|
  00314	e59d202c	 ldr         r2, [sp, #0x2C]
  00318	e59f30d0	 ldr         r3, [pc, #0xD0]
  0031c	e5832010	 str         r2, [r3, #0x10]
  00320		 |$LN6@INTF_MMCSe|

; 135  :     }
; 136  : 
; 137  :     // check for commands with R1b response
; 138  :     if (Request.CommandResponse.ResponseType == ResponseR1)

  00320	e59f30c8	 ldr         r3, [pc, #0xC8]
  00324	e593301c	 ldr         r3, [r3, #0x1C]
  00328	e3530001	 cmp         r3, #1
  0032c	1a000012	 bne         |$LN5@INTF_MMCSe|

; 139  :         if (Request.CommandCode == 12 || Request.CommandCode == 28 || Request.CommandCode == 29 || Request.CommandCode == 38)

  00330	e59f30b8	 ldr         r3, [pc, #0xB8]
  00334	e5d33014	 ldrb        r3, [r3, #0x14]
  00338	e353000c	 cmp         r3, #0xC
  0033c	0a00000b	 beq         |$LN3@INTF_MMCSe|
  00340	e59f30a8	 ldr         r3, [pc, #0xA8]
  00344	e5d33014	 ldrb        r3, [r3, #0x14]
  00348	e353001c	 cmp         r3, #0x1C
  0034c	0a000007	 beq         |$LN3@INTF_MMCSe|
  00350	e59f3098	 ldr         r3, [pc, #0x98]
  00354	e5d33014	 ldrb        r3, [r3, #0x14]
  00358	e353001d	 cmp         r3, #0x1D
  0035c	0a000003	 beq         |$LN3@INTF_MMCSe|
  00360	e59f3088	 ldr         r3, [pc, #0x88]
  00364	e5d33014	 ldrb        r3, [r3, #0x14]
  00368	e3530026	 cmp         r3, #0x26
  0036c	1a000002	 bne         |$LN4@INTF_MMCSe|
  00370		 |$LN3@INTF_MMCSe|

; 140  :             Request.CommandResponse.ResponseType = ResponseR1b;

  00370	e59f2078	 ldr         r2, [pc, #0x78]
  00374	e3a03002	 mov         r3, #2
  00378	e582301c	 str         r3, [r2, #0x1C]
  0037c		 |$LN4@INTF_MMCSe|
  0037c		 |$LN5@INTF_MMCSe|

; 141  :     
; 142  :     Request.pBlockBuffer = pMMC_command->pBuffer;

  0037c	e59d3044	 ldr         r3, [sp, #0x44]
  00380	e2833034	 add         r3, r3, #0x34
  00384	e5932000	 ldr         r2, [r3]
  00388	e59f3060	 ldr         r3, [pc, #0x60]
  0038c	e5832048	 str         r2, [r3, #0x48]

; 143  : 
; 144  :     // send command
; 145  :     if (!SD_API_SUCCESS(SdhcBusRequestHandler(&Request)))

  00390	e59f0058	 ldr         r0, [pc, #0x58]
  00394	eb000000	 bl          SdhcBusRequestHandler
  00398	e58d0034	 str         r0, [sp, #0x34]
  0039c	e59d3034	 ldr         r3, [sp, #0x34]
  003a0	e3530000	 cmp         r3, #0
  003a4	aa000002	 bge         |$LN2@INTF_MMCSe|

; 146  :         return 1;

  003a8	e3a03001	 mov         r3, #1
  003ac	e58d3000	 str         r3, [sp]
  003b0	ea00000a	 b           |$LN8@INTF_MMCSe|
  003b4		 |$LN2@INTF_MMCSe|

; 147  : 
; 148  :     // wait for command done, check result code
; 149  :     if (!SD_API_SUCCESS(WaitForCommandResult(&Request)))

  003b4	e59f0034	 ldr         r0, [pc, #0x34]
  003b8	eb000000	 bl          WaitForCommandResult
  003bc	e58d0038	 str         r0, [sp, #0x38]
  003c0	e59d3038	 ldr         r3, [sp, #0x38]
  003c4	e3530000	 cmp         r3, #0
  003c8	aa000002	 bge         |$LN1@INTF_MMCSe|

; 150  :         return 1;

  003cc	e3a03001	 mov         r3, #1
  003d0	e58d3000	 str         r3, [sp]
  003d4	ea000001	 b           |$LN8@INTF_MMCSe|
  003d8		 |$LN1@INTF_MMCSe|

; 151  : 
; 152  :     return 0;

  003d8	e3a03000	 mov         r3, #0
  003dc	e58d3000	 str         r3, [sp]
  003e0		 |$LN8@INTF_MMCSe|

; 153  : }

  003e0	e59d0000	 ldr         r0, [sp]
  003e4	e28dd03c	 add         sp, sp, #0x3C
  003e8	e89d6000	 ldmia       sp, {sp, lr}
  003ec	e12fff1e	 bx          lr
  003f0		 |$LN37@INTF_MMCSe|
  003f0		 |$LN38@INTF_MMCSe|
  003f0	00000000	 DCD         |Request|
  003f4		 |$LN39@INTF_MMCSe|
  003f4	00000000	 DCD         |CommandToTransferClass|
  003f8		 |$LN40@INTF_MMCSe|
  003f8	00000000	 DCD         |CommandToResponse|
  003fc		 |$LN41@INTF_MMCSe|
  003fc	00000000	 DCD         |AlternateCommandToTransferClass|
  00400		 |$LN42@INTF_MMCSe|
  00400	00000000	 DCD         |AlternateCommandToResponse|
  00404		 |$LN43@INTF_MMCSe|
  00404	00000000	 DCD         |bAlternateCommandMode|
  00408		 |$M44989|

			 ENDP  ; |INTF_MMCSendCommand|

	IMPORT	|SdhcControllerIstThread|

  00008			 AREA	 |.pdata|, PDATA
|$T45004| DCD	|$LN7@WaitForCom|
	DCD	0x40001504
; Function compile flags: /Odtp

  00408			 AREA	 |.text|, CODE, ARM

  00408		 |WaitForCommandResult| PROC

; 86   : {

  00408		 |$LN7@WaitForCom|
  00408	e1a0c00d	 mov         r12, sp
  0040c	e92d0001	 stmdb       sp!, {r0}
  00410	e92d5000	 stmdb       sp!, {r12, lr}
  00414	e24dd00c	 sub         sp, sp, #0xC
  00418		 |$M45001|

; 87   :     SD_API_STATUS ResultCode = SD_API_STATUS_PENDING;

  00418	e3a03001	 mov         r3, #1
  0041c	e58d3000	 str         r3, [sp]
  00420		 |$LN2@WaitForCom|

; 88   : 
; 89   :     while (ResultCode == SD_API_STATUS_PENDING)

  00420	e59d3000	 ldr         r3, [sp]
  00424	e3530001	 cmp         r3, #1
  00428	1a000005	 bne         |$LN1@WaitForCom|

; 90   :     {
; 91   :         ResultCode = SdhcControllerIstThread(pRequest);

  0042c	e59d0014	 ldr         r0, [sp, #0x14]
  00430	eb000000	 bl          SdhcControllerIstThread
  00434	e58d0008	 str         r0, [sp, #8]
  00438	e59d3008	 ldr         r3, [sp, #8]
  0043c	e58d3000	 str         r3, [sp]

; 92   :     }

  00440	eafffff6	 b           |$LN2@WaitForCom|
  00444		 |$LN1@WaitForCom|

; 93   : 
; 94   :     return ResultCode;

  00444	e59d3000	 ldr         r3, [sp]
  00448	e58d3004	 str         r3, [sp, #4]

; 95   : }

  0044c	e59d0004	 ldr         r0, [sp, #4]
  00450	e28dd00c	 add         sp, sp, #0xC
  00454	e89d6000	 ldmia       sp, {sp, lr}
  00458	e12fff1e	 bx          lr
  0045c		 |$M45002|

			 ENDP  ; |WaitForCommandResult|

	EXPORT	|INTF_MMCReadResponse|
	IMPORT	|memset|

  00010			 AREA	 |.pdata|, PDATA
|$T45010| DCD	|$LN40@INTF_MMCRe|
	DCD	0x40056e04
; Function compile flags: /Odtp

  0045c			 AREA	 |.text|, CODE, ARM

  0045c		 |INTF_MMCReadResponse| PROC

; 156  : {

  0045c		 |$LN40@INTF_MMCRe|
  0045c	e1a0c00d	 mov         r12, sp
  00460	e92d0001	 stmdb       sp!, {r0}
  00464	e92d5000	 stmdb       sp!, {r12, lr}
  00468	e24dd008	 sub         sp, sp, #8
  0046c		 |$M45007|

; 157  :     int i;
; 158  : 
; 159  :     // change response byte order from SDHC to match format expected by MMC/bootloader driver
; 160  :     //  response[0] = Request.CommandResponse.ResponseBuffer[MSB]
; 161  :     //  response[1] = Request.CommandResponse.ResponseBuffer[MSB-1]
; 162  :     //  response[2] = Request.CommandResponse.ResponseBuffer[MSB-2]
; 163  :     //  response[1] = Request.CommandResponse.ResponseBuffer[MSB-3]
; 164  :     //  etc. 
; 165  : 
; 166  :     memset(pMMC_command->response, 0, 17);

  0046c	e3a02011	 mov         r2, #0x11
  00470	e3a01000	 mov         r1, #0
  00474	e59d3010	 ldr         r3, [sp, #0x10]
  00478	e2830020	 add         r0, r3, #0x20
  0047c	eb000000	 bl          memset

; 167  : 
; 168  :     if (NoResponse != Request.CommandResponse.ResponseType) 

  00480	e59f30cc	 ldr         r3, [pc, #0xCC]
  00484	e593301c	 ldr         r3, [r3, #0x1C]
  00488	e3530000	 cmp         r3, #0
  0048c	0a000031	 beq         |$LN35@INTF_MMCRe|

; 169  :     {
; 170  :         if (ResponseR2 == Request.CommandResponse.ResponseType)

  00490	e59f30bc	 ldr         r3, [pc, #0xBC]
  00494	e593301c	 ldr         r3, [r3, #0x1C]
  00498	e3530003	 cmp         r3, #3
  0049c	1a000015	 bne         |$LN34@INTF_MMCRe|

; 171  :         {
; 172  :             // 17 byte response
; 173  :             for (i = 0; i < 17; i++)

  004a0	e3a03000	 mov         r3, #0
  004a4	e58d3000	 str         r3, [sp]
  004a8	ea000002	 b           |$LN33@INTF_MMCRe|
  004ac		 |$LN32@INTF_MMCRe|
  004ac	e59d3000	 ldr         r3, [sp]
  004b0	e2833001	 add         r3, r3, #1
  004b4	e58d3000	 str         r3, [sp]
  004b8		 |$LN33@INTF_MMCRe|
  004b8	e59d3000	 ldr         r3, [sp]
  004bc	e3530011	 cmp         r3, #0x11
  004c0	aa00000b	 bge         |$LN31@INTF_MMCRe|

; 174  :             {
; 175  :                 pMMC_command->response[i] = Request.CommandResponse.ResponseBuffer[16 - i];

  004c4	e59d3000	 ldr         r3, [sp]
  004c8	e2632010	 rsb         r2, r3, #0x10
  004cc	e59f307c	 ldr         r3, [pc, #0x7C]
  004d0	e2833020	 add         r3, r3, #0x20
  004d4	e0831002	 add         r1, r3, r2
  004d8	e59d3010	 ldr         r3, [sp, #0x10]
  004dc	e2832020	 add         r2, r3, #0x20
  004e0	e59d3000	 ldr         r3, [sp]
  004e4	e0822003	 add         r2, r2, r3
  004e8	e5d13000	 ldrb        r3, [r1]
  004ec	e5c23000	 strb        r3, [r2]

; 176  :             }

  004f0	eaffffed	 b           |$LN32@INTF_MMCRe|
  004f4		 |$LN31@INTF_MMCRe|

; 177  :         }
; 178  :         else

  004f4	ea000017	 b           |$LN30@INTF_MMCRe|
  004f8		 |$LN34@INTF_MMCRe|

; 179  :         {
; 180  :             // 6 byte response
; 181  :             for (i = 0; i < 6; i++)

  004f8	e3a03000	 mov         r3, #0
  004fc	e58d3000	 str         r3, [sp]
  00500	ea000002	 b           |$LN29@INTF_MMCRe|
  00504		 |$LN28@INTF_MMCRe|
  00504	e59d3000	 ldr         r3, [sp]
  00508	e2833001	 add         r3, r3, #1
  0050c	e58d3000	 str         r3, [sp]
  00510		 |$LN29@INTF_MMCRe|
  00510	e59d3000	 ldr         r3, [sp]
  00514	e3530006	 cmp         r3, #6
  00518	aa00000e	 bge         |$LN27@INTF_MMCRe|

; 182  :             {
; 183  :                 pMMC_command->response[i] = Request.CommandResponse.ResponseBuffer[5 - i];

  0051c	e59d3000	 ldr         r3, [sp]
  00520	e2632005	 rsb         r2, r3, #5
  00524	e59f3020	 ldr         r3, [pc, #0x20]
  00528	e2833020	 add         r3, r3, #0x20
  0052c	e0831002	 add         r1, r3, r2
  00530	e59d3010	 ldr         r3, [sp, #0x10]
  00534	e2832020	 add         r2, r3, #0x20
  00538	e59d3000	 ldr         r3, [sp]
  0053c	e0822003	 add         r2, r2, r3
  00540	e5d13000	 ldrb        r3, [r1]
  00544	e5c23000	 strb        r3, [r2]

; 184  :             }

  00548	eaffffed	 b           |$LN28@INTF_MMCRe|
  0054c		 |$LN44@INTF_MMCRe|
  0054c		 |$LN45@INTF_MMCRe|
  0054c	00000000	 DCD         |Request|
  00550		 |$LN46@INTF_MMCRe|
  00550	00000000	 DCD         |Request|
  00554		 |$LN47@INTF_MMCRe|
  00554	00000000	 DCD         |Request|
  00558		 |$LN27@INTF_MMCRe|
  00558		 |$LN30@INTF_MMCRe|
  00558		 |$LN35@INTF_MMCRe|

; 185  :         }
; 186  :     }
; 187  : 
; 188  :     // for some commands parse the response
; 189  :     if (pMMC_command->command == SEND_CSD)

  00558	e59d3010	 ldr         r3, [sp, #0x10]
  0055c	e2833004	 add         r3, r3, #4
  00560	e5d33000	 ldrb        r3, [r3]
  00564	e3530009	 cmp         r3, #9
  00568	1a0003eb	 bne         |$LN26@INTF_MMCRe|

; 190  :     {
; 191  :         if (pMMC_command->card_type == CARDTYPE_SD || pMMC_command->card_type == CARDTYPE_SDHC)

  0056c	e59d3010	 ldr         r3, [sp, #0x10]
  00570	e5933000	 ldr         r3, [r3]
  00574	e3530002	 cmp         r3, #2
  00578	0a000003	 beq         |$LN24@INTF_MMCRe|
  0057c	e59d3010	 ldr         r3, [sp, #0x10]
  00580	e5933000	 ldr         r3, [r3]
  00584	e3530003	 cmp         r3, #3
  00588	1a0001f9	 bne         |$LN25@INTF_MMCRe|
  0058c		 |$LN24@INTF_MMCRe|

; 192  :         {
; 193  :             pMMC_command->csd.sd_csd.sdcsd_struct = (pMMC_command->response[1] >> 6) & 0x3;

  0058c	e59d3010	 ldr         r3, [sp, #0x10]
  00590	e2833021	 add         r3, r3, #0x21
  00594	e5d33000	 ldrb        r3, [r3]
  00598	e1a03343	 mov         r3, r3, asr #6
  0059c	e2031003	 and         r1, r3, #3
  005a0	e59d3010	 ldr         r3, [sp, #0x10]
  005a4	e2833050	 add         r3, r3, #0x50
  005a8	e5932000	 ldr         r2, [r3]
  005ac	e3e03003	 mvn         r3, #3
  005b0	e0022003	 and         r2, r2, r3
  005b4	e2013003	 and         r3, r1, #3
  005b8	e1822003	 orr         r2, r2, r3
  005bc	e59d3010	 ldr         r3, [sp, #0x10]
  005c0	e2833050	 add         r3, r3, #0x50
  005c4	e5832000	 str         r2, [r3]

; 194  :             pMMC_command->csd.sd_csd.sdtacc = pMMC_command->response[2];

  005c8	e59d3010	 ldr         r3, [sp, #0x10]
  005cc	e2831022	 add         r1, r3, #0x22
  005d0	e59d3010	 ldr         r3, [sp, #0x10]
  005d4	e2832054	 add         r2, r3, #0x54
  005d8	e5d13000	 ldrb        r3, [r1]
  005dc	e5c23000	 strb        r3, [r2]

; 195  :             pMMC_command->csd.sd_csd.sdnsac = pMMC_command->response[3];

  005e0	e59d3010	 ldr         r3, [sp, #0x10]
  005e4	e2831023	 add         r1, r3, #0x23
  005e8	e59d3010	 ldr         r3, [sp, #0x10]
  005ec	e2832055	 add         r2, r3, #0x55
  005f0	e5d13000	 ldrb        r3, [r1]
  005f4	e5c23000	 strb        r3, [r2]

; 196  :             pMMC_command->csd.sd_csd.sdtr_speed = pMMC_command->response[4];

  005f8	e59d3010	 ldr         r3, [sp, #0x10]
  005fc	e2831024	 add         r1, r3, #0x24
  00600	e59d3010	 ldr         r3, [sp, #0x10]
  00604	e2832056	 add         r2, r3, #0x56
  00608	e5d13000	 ldrb        r3, [r1]
  0060c	e5c23000	 strb        r3, [r2]

; 197  :             pMMC_command->csd.sd_csd.sdccc = (pMMC_command->response[5] << 4) | ((pMMC_command->response[6] >> 4) & 0xF);

  00610	e59d3010	 ldr         r3, [sp, #0x10]
  00614	e2833025	 add         r3, r3, #0x25
  00618	e5d33000	 ldrb        r3, [r3]
  0061c	e1a02203	 mov         r2, r3, lsl #4
  00620	e59d3010	 ldr         r3, [sp, #0x10]
  00624	e2833026	 add         r3, r3, #0x26
  00628	e5d33000	 ldrb        r3, [r3]
  0062c	e1a03243	 mov         r3, r3, asr #4
  00630	e203300f	 and         r3, r3, #0xF
  00634	e1821003	 orr         r1, r2, r3
  00638	e59d3010	 ldr         r3, [sp, #0x10]
  0063c	e2833058	 add         r3, r3, #0x58
  00640	e5932000	 ldr         r2, [r3]
  00644	e3e03c0f	 mvn         r3, #0xF, 24
  00648	e22330ff	 eor         r3, r3, #0xFF
  0064c	e0022003	 and         r2, r2, r3
  00650	e3a03c0f	 mov         r3, #0xF, 24
  00654	e38330ff	 orr         r3, r3, #0xFF
  00658	e0013003	 and         r3, r1, r3
  0065c	e1822003	 orr         r2, r2, r3
  00660	e59d3010	 ldr         r3, [sp, #0x10]
  00664	e2833058	 add         r3, r3, #0x58
  00668	e5832000	 str         r2, [r3]

; 198  :             pMMC_command->csd.sd_csd.sdrd_bl_len = pMMC_command->response[6] & 0xF;

  0066c	e59d3010	 ldr         r3, [sp, #0x10]
  00670	e2833026	 add         r3, r3, #0x26
  00674	e5d33000	 ldrb        r3, [r3]
  00678	e203100f	 and         r1, r3, #0xF
  0067c	e59d3010	 ldr         r3, [sp, #0x10]
  00680	e2833058	 add         r3, r3, #0x58
  00684	e5932000	 ldr         r2, [r3]
  00688	e3e03a0f	 mvn         r3, #0xF, 20
  0068c	e0022003	 and         r2, r2, r3
  00690	e201300f	 and         r3, r1, #0xF
  00694	e1a03603	 mov         r3, r3, lsl #12
  00698	e1822003	 orr         r2, r2, r3
  0069c	e59d3010	 ldr         r3, [sp, #0x10]
  006a0	e2833058	 add         r3, r3, #0x58
  006a4	e5832000	 str         r2, [r3]

; 199  :             pMMC_command->csd.sd_csd.sdrd_bl_part = (pMMC_command->response[7] >> 7) & 0x1;

  006a8	e59d3010	 ldr         r3, [sp, #0x10]
  006ac	e2833027	 add         r3, r3, #0x27
  006b0	e5d33000	 ldrb        r3, [r3]
  006b4	e1a033c3	 mov         r3, r3, asr #7
  006b8	e2031001	 and         r1, r3, #1
  006bc	e59d3010	 ldr         r3, [sp, #0x10]
  006c0	e2833058	 add         r3, r3, #0x58
  006c4	e5932000	 ldr         r2, [r3]
  006c8	e3e03801	 mvn         r3, #1, 16
  006cc	e0022003	 and         r2, r2, r3
  006d0	e2013001	 and         r3, r1, #1
  006d4	e1a03803	 mov         r3, r3, lsl #16
  006d8	e1822003	 orr         r2, r2, r3
  006dc	e59d3010	 ldr         r3, [sp, #0x10]
  006e0	e2833058	 add         r3, r3, #0x58
  006e4	e5832000	 str         r2, [r3]

; 200  :             pMMC_command->csd.sd_csd.sdwr_bl_msalign = (pMMC_command->response[7] >> 6) & 0x1;

  006e8	e59d3010	 ldr         r3, [sp, #0x10]
  006ec	e2833027	 add         r3, r3, #0x27
  006f0	e5d33000	 ldrb        r3, [r3]
  006f4	e1a03343	 mov         r3, r3, asr #6
  006f8	e2031001	 and         r1, r3, #1
  006fc	e59d3010	 ldr         r3, [sp, #0x10]
  00700	e2833058	 add         r3, r3, #0x58
  00704	e5932000	 ldr         r2, [r3]
  00708	e3e03802	 mvn         r3, #2, 16
  0070c	e0022003	 and         r2, r2, r3
  00710	e2013001	 and         r3, r1, #1
  00714	e1a03883	 mov         r3, r3, lsl #17
  00718	e1822003	 orr         r2, r2, r3
  0071c	e59d3010	 ldr         r3, [sp, #0x10]
  00720	e2833058	 add         r3, r3, #0x58
  00724	e5832000	 str         r2, [r3]

; 201  :             pMMC_command->csd.sd_csd.sddsr_imp = (pMMC_command->response[7] >> 5) & 0x1;

  00728	e59d3010	 ldr         r3, [sp, #0x10]
  0072c	e2833027	 add         r3, r3, #0x27
  00730	e5d33000	 ldrb        r3, [r3]
  00734	e1a032c3	 mov         r3, r3, asr #5
  00738	e2031001	 and         r1, r3, #1
  0073c	e59d3010	 ldr         r3, [sp, #0x10]
  00740	e2833058	 add         r3, r3, #0x58
  00744	e5932000	 ldr         r2, [r3]
  00748	e3e03702	 mvn         r3, #2, 14
  0074c	e0022003	 and         r2, r2, r3
  00750	e2013001	 and         r3, r1, #1
  00754	e1a03983	 mov         r3, r3, lsl #19
  00758	e1822003	 orr         r2, r2, r3
  0075c	e59d3010	 ldr         r3, [sp, #0x10]
  00760	e2833058	 add         r3, r3, #0x58
  00764	e5832000	 str         r2, [r3]

; 202  :             if (pMMC_command->card_type == CARDTYPE_SDHC)

  00768	e59d3010	 ldr         r3, [sp, #0x10]
  0076c	e5933000	 ldr         r3, [r3]
  00770	e3530003	 cmp         r3, #3
  00774	1a000039	 bne         |$LN23@INTF_MMCRe|

; 203  :             {
; 204  :                 pMMC_command->csd.sd_csd.sdhcc_size = ((pMMC_command->response[8] & 0x3f) << 16) |
; 205  :                     (pMMC_command->response[9] << 8) | (pMMC_command->response[10]);

  00778	e59d3010	 ldr         r3, [sp, #0x10]
  0077c	e2833028	 add         r3, r3, #0x28
  00780	e5d33000	 ldrb        r3, [r3]
  00784	e203303f	 and         r3, r3, #0x3F
  00788	e1a02803	 mov         r2, r3, lsl #16
  0078c	e59d3010	 ldr         r3, [sp, #0x10]
  00790	e2833029	 add         r3, r3, #0x29
  00794	e5d33000	 ldrb        r3, [r3]
  00798	e1a03403	 mov         r3, r3, lsl #8
  0079c	e1822003	 orr         r2, r2, r3
  007a0	e59d3010	 ldr         r3, [sp, #0x10]
  007a4	e283302a	 add         r3, r3, #0x2A
  007a8	e5d33000	 ldrb        r3, [r3]
  007ac	e1822003	 orr         r2, r2, r3
  007b0	e59d3010	 ldr         r3, [sp, #0x10]
  007b4	e2833068	 add         r3, r3, #0x68
  007b8	e5832000	 str         r2, [r3]

; 206  : 
; 207  :                 pMMC_command->csd.sd_csd.sdvdd_r_min = 0;

  007bc	e59d3010	 ldr         r3, [sp, #0x10]
  007c0	e283305c	 add         r3, r3, #0x5C
  007c4	e5932000	 ldr         r2, [r3]
  007c8	e3e03007	 mvn         r3, #7
  007cc	e0022003	 and         r2, r2, r3
  007d0	e59d3010	 ldr         r3, [sp, #0x10]
  007d4	e283305c	 add         r3, r3, #0x5C
  007d8	e5832000	 str         r2, [r3]

; 208  :                 pMMC_command->csd.sd_csd.sdvdd_r_max = 0;

  007dc	e59d3010	 ldr         r3, [sp, #0x10]
  007e0	e283305c	 add         r3, r3, #0x5C
  007e4	e5932000	 ldr         r2, [r3]
  007e8	e3e03038	 mvn         r3, #0x38
  007ec	e0022003	 and         r2, r2, r3
  007f0	e59d3010	 ldr         r3, [sp, #0x10]
  007f4	e283305c	 add         r3, r3, #0x5C
  007f8	e5832000	 str         r2, [r3]

; 209  :                 pMMC_command->csd.sd_csd.sdvdd_w_min = 0;

  007fc	e59d3010	 ldr         r3, [sp, #0x10]
  00800	e283305c	 add         r3, r3, #0x5C
  00804	e5932000	 ldr         r2, [r3]
  00808	e3e03d07	 mvn         r3, #7, 26
  0080c	e0022003	 and         r2, r2, r3
  00810	e59d3010	 ldr         r3, [sp, #0x10]
  00814	e283305c	 add         r3, r3, #0x5C
  00818	e5832000	 str         r2, [r3]

; 210  :                 pMMC_command->csd.sd_csd.sdvdd_w_max = 0;

  0081c	e59d3010	 ldr         r3, [sp, #0x10]
  00820	e283305c	 add         r3, r3, #0x5C
  00824	e5932000	 ldr         r2, [r3]
  00828	e3e03c0e	 mvn         r3, #0xE, 24
  0082c	e0022003	 and         r2, r2, r3
  00830	e59d3010	 ldr         r3, [sp, #0x10]
  00834	e283305c	 add         r3, r3, #0x5C
  00838	e5832000	 str         r2, [r3]

; 211  :                 pMMC_command->csd.sd_csd.sdc_size_mult = 0;

  0083c	e59d3010	 ldr         r3, [sp, #0x10]
  00840	e283305c	 add         r3, r3, #0x5C
  00844	e5932000	 ldr         r2, [r3]
  00848	e3e03a07	 mvn         r3, #7, 20
  0084c	e0022003	 and         r2, r2, r3
  00850	e59d3010	 ldr         r3, [sp, #0x10]
  00854	e283305c	 add         r3, r3, #0x5C
  00858	e5832000	 str         r2, [r3]

; 212  :             }
; 213  :             else

  0085c	ea000071	 b           |$LN22@INTF_MMCRe|
  00860		 |$LN23@INTF_MMCRe|

; 214  :             {
; 215  :                 pMMC_command->csd.sd_csd.sdc_size = ((pMMC_command->response[7] & 0x3)<<10) |
; 216  :                     (pMMC_command->response[8]<<2) | ((pMMC_command->response[9]>>6)  & 0x3);

  00860	e59d3010	 ldr         r3, [sp, #0x10]
  00864	e2833027	 add         r3, r3, #0x27
  00868	e5d33000	 ldrb        r3, [r3]
  0086c	e2033003	 and         r3, r3, #3
  00870	e1a02503	 mov         r2, r3, lsl #10
  00874	e59d3010	 ldr         r3, [sp, #0x10]
  00878	e2833028	 add         r3, r3, #0x28
  0087c	e5d33000	 ldrb        r3, [r3]
  00880	e1a03103	 mov         r3, r3, lsl #2
  00884	e1822003	 orr         r2, r2, r3
  00888	e59d3010	 ldr         r3, [sp, #0x10]
  0088c	e2833029	 add         r3, r3, #0x29
  00890	e5d33000	 ldrb        r3, [r3]
  00894	e1a03343	 mov         r3, r3, asr #6
  00898	e2033003	 and         r3, r3, #3
  0089c	e1821003	 orr         r1, r2, r3
  008a0	e59d3010	 ldr         r3, [sp, #0x10]
  008a4	e2833058	 add         r3, r3, #0x58
  008a8	e5932000	 ldr         r2, [r3]
  008ac	e3e034ff	 mvn         r3, #0xFF, 8
  008b0	e223360f	 eor         r3, r3, #0xF, 12
  008b4	e0022003	 and         r2, r2, r3
  008b8	e3a03c0f	 mov         r3, #0xF, 24
  008bc	e38330ff	 orr         r3, r3, #0xFF
  008c0	e0013003	 and         r3, r1, r3
  008c4	e1a03a03	 mov         r3, r3, lsl #20
  008c8	e1822003	 orr         r2, r2, r3
  008cc	e59d3010	 ldr         r3, [sp, #0x10]
  008d0	e2833058	 add         r3, r3, #0x58
  008d4	e5832000	 str         r2, [r3]

; 217  :                 pMMC_command->csd.sd_csd.sdvdd_r_min = (pMMC_command->response[9] >> 3) & 0x7;

  008d8	e59d3010	 ldr         r3, [sp, #0x10]
  008dc	e2833029	 add         r3, r3, #0x29
  008e0	e5d33000	 ldrb        r3, [r3]
  008e4	e1a031c3	 mov         r3, r3, asr #3
  008e8	e2031007	 and         r1, r3, #7
  008ec	e59d3010	 ldr         r3, [sp, #0x10]
  008f0	e283305c	 add         r3, r3, #0x5C
  008f4	e5932000	 ldr         r2, [r3]
  008f8	e3e03007	 mvn         r3, #7
  008fc	e0022003	 and         r2, r2, r3
  00900	e2013007	 and         r3, r1, #7
  00904	e1822003	 orr         r2, r2, r3
  00908	e59d3010	 ldr         r3, [sp, #0x10]
  0090c	e283305c	 add         r3, r3, #0x5C
  00910	e5832000	 str         r2, [r3]

; 218  :                 pMMC_command->csd.sd_csd.sdvdd_r_max = pMMC_command->response[9] & 0x7;

  00914	e59d3010	 ldr         r3, [sp, #0x10]
  00918	e2833029	 add         r3, r3, #0x29
  0091c	e5d33000	 ldrb        r3, [r3]
  00920	e2031007	 and         r1, r3, #7
  00924	e59d3010	 ldr         r3, [sp, #0x10]
  00928	e283305c	 add         r3, r3, #0x5C
  0092c	e5932000	 ldr         r2, [r3]
  00930	e3e03038	 mvn         r3, #0x38
  00934	e0022003	 and         r2, r2, r3
  00938	e2013007	 and         r3, r1, #7
  0093c	e1a03183	 mov         r3, r3, lsl #3
  00940	e1822003	 orr         r2, r2, r3
  00944	e59d3010	 ldr         r3, [sp, #0x10]
  00948	e283305c	 add         r3, r3, #0x5C
  0094c	e5832000	 str         r2, [r3]

; 219  :                 pMMC_command->csd.sd_csd.sdvdd_w_min = (pMMC_command->response[9] >> 5) & 0x7;

  00950	e59d3010	 ldr         r3, [sp, #0x10]
  00954	e2833029	 add         r3, r3, #0x29
  00958	e5d33000	 ldrb        r3, [r3]
  0095c	e1a032c3	 mov         r3, r3, asr #5
  00960	e2031007	 and         r1, r3, #7
  00964	e59d3010	 ldr         r3, [sp, #0x10]
  00968	e283305c	 add         r3, r3, #0x5C
  0096c	e5932000	 ldr         r2, [r3]
  00970	e3e03d07	 mvn         r3, #7, 26
  00974	e0022003	 and         r2, r2, r3
  00978	e2013007	 and         r3, r1, #7
  0097c	e1a03303	 mov         r3, r3, lsl #6
  00980	e1822003	 orr         r2, r2, r3
  00984	e59d3010	 ldr         r3, [sp, #0x10]
  00988	e283305c	 add         r3, r3, #0x5C
  0098c	e5832000	 str         r2, [r3]

; 220  :                 pMMC_command->csd.sd_csd.sdvdd_w_max = (pMMC_command->response[10] >> 2) & 0x7;

  00990	e59d3010	 ldr         r3, [sp, #0x10]
  00994	e283302a	 add         r3, r3, #0x2A
  00998	e5d33000	 ldrb        r3, [r3]
  0099c	e1a03143	 mov         r3, r3, asr #2
  009a0	e2031007	 and         r1, r3, #7
  009a4	e59d3010	 ldr         r3, [sp, #0x10]
  009a8	e283305c	 add         r3, r3, #0x5C
  009ac	e5932000	 ldr         r2, [r3]
  009b0	e3e03c0e	 mvn         r3, #0xE, 24
  009b4	e0022003	 and         r2, r2, r3
  009b8	e2013007	 and         r3, r1, #7
  009bc	e1a03483	 mov         r3, r3, lsl #9
  009c0	e1822003	 orr         r2, r2, r3
  009c4	e59d3010	 ldr         r3, [sp, #0x10]
  009c8	e283305c	 add         r3, r3, #0x5C
  009cc	e5832000	 str         r2, [r3]

; 221  :                 pMMC_command->csd.sd_csd.sdc_size_mult = (pMMC_command->response[10] & 0x3) << 1 |
; 222  :                     ((pMMC_command->response[11] >> 7) & 0x1);

  009d0	e59d3010	 ldr         r3, [sp, #0x10]
  009d4	e283302a	 add         r3, r3, #0x2A
  009d8	e5d33000	 ldrb        r3, [r3]
  009dc	e2033003	 and         r3, r3, #3
  009e0	e1a02083	 mov         r2, r3, lsl #1
  009e4	e59d3010	 ldr         r3, [sp, #0x10]
  009e8	e283302b	 add         r3, r3, #0x2B
  009ec	e5d33000	 ldrb        r3, [r3]
  009f0	e1a033c3	 mov         r3, r3, asr #7
  009f4	e2033001	 and         r3, r3, #1
  009f8	e1821003	 orr         r1, r2, r3
  009fc	e59d3010	 ldr         r3, [sp, #0x10]
  00a00	e283305c	 add         r3, r3, #0x5C
  00a04	e5932000	 ldr         r2, [r3]
  00a08	e3e03a07	 mvn         r3, #7, 20
  00a0c	e0022003	 and         r2, r2, r3
  00a10	e2013007	 and         r3, r1, #7
  00a14	e1a03603	 mov         r3, r3, lsl #12
  00a18	e1822003	 orr         r2, r2, r3
  00a1c	e59d3010	 ldr         r3, [sp, #0x10]
  00a20	e283305c	 add         r3, r3, #0x5C
  00a24	e5832000	 str         r2, [r3]
  00a28		 |$LN22@INTF_MMCRe|

; 223  :             }
; 224  :             pMMC_command->csd.sd_csd.sderase_bk_en = (pMMC_command->response[11] >> 6) & 0x1;

  00a28	e59d3010	 ldr         r3, [sp, #0x10]
  00a2c	e283302b	 add         r3, r3, #0x2B
  00a30	e5d33000	 ldrb        r3, [r3]
  00a34	e1a03343	 mov         r3, r3, asr #6
  00a38	e2031001	 and         r1, r3, #1
  00a3c	e59d3010	 ldr         r3, [sp, #0x10]
  00a40	e283305c	 add         r3, r3, #0x5C
  00a44	e5932000	 ldr         r2, [r3]
  00a48	e3e03902	 mvn         r3, #2, 18
  00a4c	e0022003	 and         r2, r2, r3
  00a50	e2013001	 and         r3, r1, #1
  00a54	e1a03783	 mov         r3, r3, lsl #15
  00a58	e1822003	 orr         r2, r2, r3
  00a5c	e59d3010	 ldr         r3, [sp, #0x10]
  00a60	e283305c	 add         r3, r3, #0x5C
  00a64	e5832000	 str         r2, [r3]

; 225  :             pMMC_command->csd.sd_csd.sdsector_size = ((pMMC_command->response[11] << 1) & 0x7E) | ((pMMC_command->response[12] >> 7) & 0x1);

  00a68	e59d3010	 ldr         r3, [sp, #0x10]
  00a6c	e283302b	 add         r3, r3, #0x2B
  00a70	e5d33000	 ldrb        r3, [r3]
  00a74	e1a03083	 mov         r3, r3, lsl #1
  00a78	e203207e	 and         r2, r3, #0x7E
  00a7c	e59d3010	 ldr         r3, [sp, #0x10]
  00a80	e283302c	 add         r3, r3, #0x2C
  00a84	e5d33000	 ldrb        r3, [r3]
  00a88	e1a033c3	 mov         r3, r3, asr #7
  00a8c	e2033001	 and         r3, r3, #1
  00a90	e1821003	 orr         r1, r2, r3
  00a94	e59d3010	 ldr         r3, [sp, #0x10]
  00a98	e283305c	 add         r3, r3, #0x5C
  00a9c	e5932000	 ldr         r2, [r3]
  00aa0	e3e0387f	 mvn         r3, #0x7F, 16
  00aa4	e0022003	 and         r2, r2, r3
  00aa8	e201307f	 and         r3, r1, #0x7F
  00aac	e1a03803	 mov         r3, r3, lsl #16
  00ab0	e1822003	 orr         r2, r2, r3
  00ab4	e59d3010	 ldr         r3, [sp, #0x10]
  00ab8	e283305c	 add         r3, r3, #0x5C
  00abc	e5832000	 str         r2, [r3]

; 226  :             pMMC_command->csd.sd_csd.sderase_grp_size = pMMC_command->response[12] & 0x7F;

  00ac0	e59d3010	 ldr         r3, [sp, #0x10]
  00ac4	e283302c	 add         r3, r3, #0x2C
  00ac8	e5d33000	 ldrb        r3, [r3]
  00acc	e203107f	 and         r1, r3, #0x7F
  00ad0	e59d3010	 ldr         r3, [sp, #0x10]
  00ad4	e283305c	 add         r3, r3, #0x5C
  00ad8	e5932000	 ldr         r2, [r3]
  00adc	e3e035fe	 mvn         r3, #0xFE, 10
  00ae0	e0022003	 and         r2, r2, r3
  00ae4	e201307f	 and         r3, r1, #0x7F
  00ae8	e1a03b83	 mov         r3, r3, lsl #23
  00aec	e1822003	 orr         r2, r2, r3
  00af0	e59d3010	 ldr         r3, [sp, #0x10]
  00af4	e283305c	 add         r3, r3, #0x5C
  00af8	e5832000	 str         r2, [r3]

; 227  :             pMMC_command->csd.sd_csd.sdwp_grp_en = (pMMC_command->response[13] >> 7) & 0x1;

  00afc	e59d3010	 ldr         r3, [sp, #0x10]
  00b00	e283302d	 add         r3, r3, #0x2D
  00b04	e5d33000	 ldrb        r3, [r3]
  00b08	e1a033c3	 mov         r3, r3, asr #7
  00b0c	e2031001	 and         r1, r3, #1
  00b10	e59d3010	 ldr         r3, [sp, #0x10]
  00b14	e283305c	 add         r3, r3, #0x5C
  00b18	e5932000	 ldr         r2, [r3]
  00b1c	e3e03101	 mvn         r3, #1, 2
  00b20	e0022003	 and         r2, r2, r3
  00b24	e2013001	 and         r3, r1, #1
  00b28	e1a03f03	 mov         r3, r3, lsl #30
  00b2c	e1822003	 orr         r2, r2, r3
  00b30	e59d3010	 ldr         r3, [sp, #0x10]
  00b34	e283305c	 add         r3, r3, #0x5C
  00b38	e5832000	 str         r2, [r3]

; 228  :             pMMC_command->csd.sd_csd.sdr2w_factor = (pMMC_command->response[13] >> 2) & 0x7;

  00b3c	e59d3010	 ldr         r3, [sp, #0x10]
  00b40	e283302d	 add         r3, r3, #0x2D
  00b44	e5d33000	 ldrb        r3, [r3]
  00b48	e1a03143	 mov         r3, r3, asr #2
  00b4c	e2031007	 and         r1, r3, #7
  00b50	e59d3010	 ldr         r3, [sp, #0x10]
  00b54	e2833060	 add         r3, r3, #0x60
  00b58	e5932000	 ldr         r2, [r3]
  00b5c	e3e03007	 mvn         r3, #7
  00b60	e0022003	 and         r2, r2, r3
  00b64	e2013007	 and         r3, r1, #7
  00b68	e1822003	 orr         r2, r2, r3
  00b6c	e59d3010	 ldr         r3, [sp, #0x10]
  00b70	e2833060	 add         r3, r3, #0x60
  00b74	e5832000	 str         r2, [r3]

; 229  :             pMMC_command->csd.sd_csd.sdwr_blk_len = ((pMMC_command->response[13] & 0x3) << 2) | ((pMMC_command->response[14] >> 6) & 0x3);

  00b78	e59d3010	 ldr         r3, [sp, #0x10]
  00b7c	e283302d	 add         r3, r3, #0x2D
  00b80	e5d33000	 ldrb        r3, [r3]
  00b84	e2033003	 and         r3, r3, #3
  00b88	e1a02103	 mov         r2, r3, lsl #2
  00b8c	e59d3010	 ldr         r3, [sp, #0x10]
  00b90	e283302e	 add         r3, r3, #0x2E
  00b94	e5d33000	 ldrb        r3, [r3]
  00b98	e1a03343	 mov         r3, r3, asr #6
  00b9c	e2033003	 and         r3, r3, #3
  00ba0	e1821003	 orr         r1, r2, r3
  00ba4	e59d3010	 ldr         r3, [sp, #0x10]
  00ba8	e2833060	 add         r3, r3, #0x60
  00bac	e5932000	 ldr         r2, [r3]
  00bb0	e3e03078	 mvn         r3, #0x78
  00bb4	e0022003	 and         r2, r2, r3
  00bb8	e201300f	 and         r3, r1, #0xF
  00bbc	e1a03183	 mov         r3, r3, lsl #3
  00bc0	e1822003	 orr         r2, r2, r3
  00bc4	e59d3010	 ldr         r3, [sp, #0x10]
  00bc8	e2833060	 add         r3, r3, #0x60
  00bcc	e5832000	 str         r2, [r3]

; 230  :             pMMC_command->csd.sd_csd.sdwr_blk_part = (pMMC_command->response[14] >> 5) & 0x1;

  00bd0	e59d3010	 ldr         r3, [sp, #0x10]
  00bd4	e283302e	 add         r3, r3, #0x2E
  00bd8	e5d33000	 ldrb        r3, [r3]
  00bdc	e1a032c3	 mov         r3, r3, asr #5
  00be0	e2031001	 and         r1, r3, #1
  00be4	e59d3010	 ldr         r3, [sp, #0x10]
  00be8	e2833060	 add         r3, r3, #0x60
  00bec	e5932000	 ldr         r2, [r3]
  00bf0	e3e03080	 mvn         r3, #0x80
  00bf4	e0022003	 and         r2, r2, r3
  00bf8	e2013001	 and         r3, r1, #1
  00bfc	e1a03383	 mov         r3, r3, lsl #7
  00c00	e1822003	 orr         r2, r2, r3
  00c04	e59d3010	 ldr         r3, [sp, #0x10]
  00c08	e2833060	 add         r3, r3, #0x60
  00c0c	e5832000	 str         r2, [r3]

; 231  :             pMMC_command->csd.sd_csd.sdfile_fmt_grp = (pMMC_command->response[15] >> 7) & 0x1;

  00c10	e59d3010	 ldr         r3, [sp, #0x10]
  00c14	e283302f	 add         r3, r3, #0x2F
  00c18	e5d33000	 ldrb        r3, [r3]
  00c1c	e1a033c3	 mov         r3, r3, asr #7
  00c20	e2031001	 and         r1, r3, #1
  00c24	e59d3010	 ldr         r3, [sp, #0x10]
  00c28	e2833060	 add         r3, r3, #0x60
  00c2c	e5932000	 ldr         r2, [r3]
  00c30	e3e03a02	 mvn         r3, #2, 20
  00c34	e0022003	 and         r2, r2, r3
  00c38	e2013001	 and         r3, r1, #1
  00c3c	e1a03683	 mov         r3, r3, lsl #13
  00c40	e1822003	 orr         r2, r2, r3
  00c44	e59d3010	 ldr         r3, [sp, #0x10]
  00c48	e2833060	 add         r3, r3, #0x60
  00c4c	e5832000	 str         r2, [r3]

; 232  :             pMMC_command->csd.sd_csd.sdcopy = (pMMC_command->response[15] >> 6) & 0x1;

  00c50	e59d3010	 ldr         r3, [sp, #0x10]
  00c54	e283302f	 add         r3, r3, #0x2F
  00c58	e5d33000	 ldrb        r3, [r3]
  00c5c	e1a03343	 mov         r3, r3, asr #6
  00c60	e2031001	 and         r1, r3, #1
  00c64	e59d3010	 ldr         r3, [sp, #0x10]
  00c68	e2833060	 add         r3, r3, #0x60
  00c6c	e5932000	 ldr         r2, [r3]
  00c70	e3e03901	 mvn         r3, #1, 18
  00c74	e0022003	 and         r2, r2, r3
  00c78	e2013001	 and         r3, r1, #1
  00c7c	e1a03703	 mov         r3, r3, lsl #14
  00c80	e1822003	 orr         r2, r2, r3
  00c84	e59d3010	 ldr         r3, [sp, #0x10]
  00c88	e2833060	 add         r3, r3, #0x60
  00c8c	e5832000	 str         r2, [r3]

; 233  :             pMMC_command->csd.sd_csd.sdperm_wr_prot = (pMMC_command->response[15] >> 5) & 0x1;

  00c90	e59d3010	 ldr         r3, [sp, #0x10]
  00c94	e283302f	 add         r3, r3, #0x2F
  00c98	e5d33000	 ldrb        r3, [r3]
  00c9c	e1a032c3	 mov         r3, r3, asr #5
  00ca0	e2031001	 and         r1, r3, #1
  00ca4	e59d3010	 ldr         r3, [sp, #0x10]
  00ca8	e2833060	 add         r3, r3, #0x60
  00cac	e5932000	 ldr         r2, [r3]
  00cb0	e3e03902	 mvn         r3, #2, 18
  00cb4	e0022003	 and         r2, r2, r3
  00cb8	e2013001	 and         r3, r1, #1
  00cbc	e1a03783	 mov         r3, r3, lsl #15
  00cc0	e1822003	 orr         r2, r2, r3
  00cc4	e59d3010	 ldr         r3, [sp, #0x10]
  00cc8	e2833060	 add         r3, r3, #0x60
  00ccc	e5832000	 str         r2, [r3]

; 234  :             pMMC_command->csd.sd_csd.sdtmp_wr_prot = (pMMC_command->response[15] >> 4) & 0x1;

  00cd0	e59d3010	 ldr         r3, [sp, #0x10]
  00cd4	e283302f	 add         r3, r3, #0x2F
  00cd8	e5d33000	 ldrb        r3, [r3]
  00cdc	e1a03243	 mov         r3, r3, asr #4
  00ce0	e2031001	 and         r1, r3, #1
  00ce4	e59d3010	 ldr         r3, [sp, #0x10]
  00ce8	e2833060	 add         r3, r3, #0x60
  00cec	e5932000	 ldr         r2, [r3]
  00cf0	e3e03801	 mvn         r3, #1, 16
  00cf4	e0022003	 and         r2, r2, r3
  00cf8	e2013001	 and         r3, r1, #1
  00cfc	e1a03803	 mov         r3, r3, lsl #16
  00d00	e1822003	 orr         r2, r2, r3
  00d04	e59d3010	 ldr         r3, [sp, #0x10]
  00d08	e2833060	 add         r3, r3, #0x60
  00d0c	e5832000	 str         r2, [r3]

; 235  :             pMMC_command->csd.sd_csd.sdfile_fmt = (pMMC_command->response[15] >> 2) & 0x3;

  00d10	e59d3010	 ldr         r3, [sp, #0x10]
  00d14	e283302f	 add         r3, r3, #0x2F
  00d18	e5d33000	 ldrb        r3, [r3]
  00d1c	e1a03143	 mov         r3, r3, asr #2
  00d20	e2031003	 and         r1, r3, #3
  00d24	e59d3010	 ldr         r3, [sp, #0x10]
  00d28	e2833060	 add         r3, r3, #0x60
  00d2c	e5932000	 ldr         r2, [r3]
  00d30	e3e03806	 mvn         r3, #6, 16
  00d34	e0022003	 and         r2, r2, r3
  00d38	e2013003	 and         r3, r1, #3
  00d3c	e1a03883	 mov         r3, r3, lsl #17
  00d40	e1822003	 orr         r2, r2, r3
  00d44	e59d3010	 ldr         r3, [sp, #0x10]
  00d48	e2833060	 add         r3, r3, #0x60
  00d4c	e5832000	 str         r2, [r3]

; 236  :             pMMC_command->csd.sd_csd.sdcrc = 0;  //no computed crc provided

  00d50	e59d3010	 ldr         r3, [sp, #0x10]
  00d54	e2832064	 add         r2, r3, #0x64
  00d58	e3a03000	 mov         r3, #0
  00d5c	e5c23000	 strb        r3, [r2]

; 237  :             pMMC_command->crc = 0;

  00d60	e59d3010	 ldr         r3, [sp, #0x10]
  00d64	e2832031	 add         r2, r3, #0x31
  00d68	e3a03000	 mov         r3, #0
  00d6c	e5c23000	 strb        r3, [r2]

; 238  :         }
; 239  :         else

  00d70	ea0001e9	 b           |$LN21@INTF_MMCRe|
  00d74		 |$LN25@INTF_MMCRe|

; 240  :         {
; 241  :             pMMC_command->csd.mmc_csd.csd_struct = (pMMC_command->response[1] >> 6) & 0x3;

  00d74	e59d3010	 ldr         r3, [sp, #0x10]
  00d78	e2833021	 add         r3, r3, #0x21
  00d7c	e5d33000	 ldrb        r3, [r3]
  00d80	e1a03343	 mov         r3, r3, asr #6
  00d84	e2031003	 and         r1, r3, #3
  00d88	e59d3010	 ldr         r3, [sp, #0x10]
  00d8c	e2833050	 add         r3, r3, #0x50
  00d90	e5932000	 ldr         r2, [r3]
  00d94	e3e03003	 mvn         r3, #3
  00d98	e0022003	 and         r2, r2, r3
  00d9c	e2013003	 and         r3, r1, #3
  00da0	e1822003	 orr         r2, r2, r3
  00da4	e59d3010	 ldr         r3, [sp, #0x10]
  00da8	e2833050	 add         r3, r3, #0x50
  00dac	e5832000	 str         r2, [r3]

; 242  :             pMMC_command->csd.mmc_csd.spec_vers = (pMMC_command->response[1] >> 2) & 0xF;

  00db0	e59d3010	 ldr         r3, [sp, #0x10]
  00db4	e2833021	 add         r3, r3, #0x21
  00db8	e5d33000	 ldrb        r3, [r3]
  00dbc	e1a03143	 mov         r3, r3, asr #2
  00dc0	e203100f	 and         r1, r3, #0xF
  00dc4	e59d3010	 ldr         r3, [sp, #0x10]
  00dc8	e2833050	 add         r3, r3, #0x50
  00dcc	e5932000	 ldr         r2, [r3]
  00dd0	e3e0303c	 mvn         r3, #0x3C
  00dd4	e0022003	 and         r2, r2, r3
  00dd8	e201300f	 and         r3, r1, #0xF
  00ddc	e1a03103	 mov         r3, r3, lsl #2
  00de0	e1822003	 orr         r2, r2, r3
  00de4	e59d3010	 ldr         r3, [sp, #0x10]
  00de8	e2833050	 add         r3, r3, #0x50
  00dec	e5832000	 str         r2, [r3]

; 243  :             pMMC_command->csd.mmc_csd.tacc = pMMC_command->response[2];

  00df0	e59d3010	 ldr         r3, [sp, #0x10]
  00df4	e2831022	 add         r1, r3, #0x22
  00df8	e59d3010	 ldr         r3, [sp, #0x10]
  00dfc	e2832054	 add         r2, r3, #0x54
  00e00	e5d13000	 ldrb        r3, [r1]
  00e04	e5c23000	 strb        r3, [r2]

; 244  :             pMMC_command->csd.mmc_csd.nsac = pMMC_command->response[3];

  00e08	e59d3010	 ldr         r3, [sp, #0x10]
  00e0c	e2831023	 add         r1, r3, #0x23
  00e10	e59d3010	 ldr         r3, [sp, #0x10]
  00e14	e2832055	 add         r2, r3, #0x55
  00e18	e5d13000	 ldrb        r3, [r1]
  00e1c	e5c23000	 strb        r3, [r2]

; 245  :             pMMC_command->csd.mmc_csd.tr_speed = pMMC_command->response[4];

  00e20	e59d3010	 ldr         r3, [sp, #0x10]
  00e24	e2831024	 add         r1, r3, #0x24
  00e28	e59d3010	 ldr         r3, [sp, #0x10]
  00e2c	e2832056	 add         r2, r3, #0x56
  00e30	e5d13000	 ldrb        r3, [r1]
  00e34	e5c23000	 strb        r3, [r2]

; 246  :             pMMC_command->csd.mmc_csd.ccc = (pMMC_command->response[5] << 4) | ((pMMC_command->response[6] >> 4) & 0xF);

  00e38	e59d3010	 ldr         r3, [sp, #0x10]
  00e3c	e2833025	 add         r3, r3, #0x25
  00e40	e5d33000	 ldrb        r3, [r3]
  00e44	e1a02203	 mov         r2, r3, lsl #4
  00e48	e59d3010	 ldr         r3, [sp, #0x10]
  00e4c	e2833026	 add         r3, r3, #0x26
  00e50	e5d33000	 ldrb        r3, [r3]
  00e54	e1a03243	 mov         r3, r3, asr #4
  00e58	e203300f	 and         r3, r3, #0xF
  00e5c	e1821003	 orr         r1, r2, r3
  00e60	e59d3010	 ldr         r3, [sp, #0x10]
  00e64	e2833058	 add         r3, r3, #0x58
  00e68	e5932000	 ldr         r2, [r3]
  00e6c	e3e03c0f	 mvn         r3, #0xF, 24
  00e70	e22330ff	 eor         r3, r3, #0xFF
  00e74	e0022003	 and         r2, r2, r3
  00e78	e3a03c0f	 mov         r3, #0xF, 24
  00e7c	e38330ff	 orr         r3, r3, #0xFF
  00e80	e0013003	 and         r3, r1, r3
  00e84	e1822003	 orr         r2, r2, r3
  00e88	e59d3010	 ldr         r3, [sp, #0x10]
  00e8c	e2833058	 add         r3, r3, #0x58
  00e90	e5832000	 str         r2, [r3]

; 247  :             pMMC_command->csd.mmc_csd.rd_bl_len = pMMC_command->response[6] & 0xF;

  00e94	e59d3010	 ldr         r3, [sp, #0x10]
  00e98	e2833026	 add         r3, r3, #0x26
  00e9c	e5d33000	 ldrb        r3, [r3]
  00ea0	e203100f	 and         r1, r3, #0xF
  00ea4	e59d3010	 ldr         r3, [sp, #0x10]
  00ea8	e2833058	 add         r3, r3, #0x58
  00eac	e5932000	 ldr         r2, [r3]
  00eb0	e3e03a0f	 mvn         r3, #0xF, 20
  00eb4	e0022003	 and         r2, r2, r3
  00eb8	e201300f	 and         r3, r1, #0xF
  00ebc	e1a03603	 mov         r3, r3, lsl #12
  00ec0	e1822003	 orr         r2, r2, r3
  00ec4	e59d3010	 ldr         r3, [sp, #0x10]
  00ec8	e2833058	 add         r3, r3, #0x58
  00ecc	e5832000	 str         r2, [r3]

; 248  :             pMMC_command->csd.mmc_csd.c_size = ((pMMC_command->response[7] & 0x3)<<10) | (pMMC_command->response[8]<<2) | ((pMMC_command->response[9]>>6)  & 0x3);

  00ed0	e59d3010	 ldr         r3, [sp, #0x10]
  00ed4	e2833027	 add         r3, r3, #0x27
  00ed8	e5d33000	 ldrb        r3, [r3]
  00edc	e2033003	 and         r3, r3, #3
  00ee0	e1a02503	 mov         r2, r3, lsl #10
  00ee4	e59d3010	 ldr         r3, [sp, #0x10]
  00ee8	e2833028	 add         r3, r3, #0x28
  00eec	e5d33000	 ldrb        r3, [r3]
  00ef0	e1a03103	 mov         r3, r3, lsl #2
  00ef4	e1822003	 orr         r2, r2, r3
  00ef8	e59d3010	 ldr         r3, [sp, #0x10]
  00efc	e2833029	 add         r3, r3, #0x29
  00f00	e5d33000	 ldrb        r3, [r3]
  00f04	e1a03343	 mov         r3, r3, asr #6
  00f08	e2033003	 and         r3, r3, #3
  00f0c	e1821003	 orr         r1, r2, r3
  00f10	e59d3010	 ldr         r3, [sp, #0x10]
  00f14	e2833058	 add         r3, r3, #0x58
  00f18	e5932000	 ldr         r2, [r3]
  00f1c	e3e034ff	 mvn         r3, #0xFF, 8
  00f20	e223360f	 eor         r3, r3, #0xF, 12
  00f24	e0022003	 and         r2, r2, r3
  00f28	e3a03c0f	 mov         r3, #0xF, 24
  00f2c	e38330ff	 orr         r3, r3, #0xFF
  00f30	e0013003	 and         r3, r1, r3
  00f34	e1a03a03	 mov         r3, r3, lsl #20
  00f38	e1822003	 orr         r2, r2, r3
  00f3c	e59d3010	 ldr         r3, [sp, #0x10]
  00f40	e2833058	 add         r3, r3, #0x58
  00f44	e5832000	 str         r2, [r3]

; 249  :             pMMC_command->csd.mmc_csd.rd_bl_part = (pMMC_command->response[7] >> 7) & 0x1;

  00f48	e59d3010	 ldr         r3, [sp, #0x10]
  00f4c	e2833027	 add         r3, r3, #0x27
  00f50	e5d33000	 ldrb        r3, [r3]
  00f54	e1a033c3	 mov         r3, r3, asr #7
  00f58	e2031001	 and         r1, r3, #1
  00f5c	e59d3010	 ldr         r3, [sp, #0x10]
  00f60	e2833058	 add         r3, r3, #0x58
  00f64	e5932000	 ldr         r2, [r3]
  00f68	e3e03801	 mvn         r3, #1, 16
  00f6c	e0022003	 and         r2, r2, r3
  00f70	e2013001	 and         r3, r1, #1
  00f74	e1a03803	 mov         r3, r3, lsl #16
  00f78	e1822003	 orr         r2, r2, r3
  00f7c	e59d3010	 ldr         r3, [sp, #0x10]
  00f80	e2833058	 add         r3, r3, #0x58
  00f84	e5832000	 str         r2, [r3]

; 250  :             pMMC_command->csd.mmc_csd.wr_bl_msalign = (pMMC_command->response[7] >> 6) & 0x1;

  00f88	e59d3010	 ldr         r3, [sp, #0x10]
  00f8c	e2833027	 add         r3, r3, #0x27
  00f90	e5d33000	 ldrb        r3, [r3]
  00f94	e1a03343	 mov         r3, r3, asr #6
  00f98	e2031001	 and         r1, r3, #1
  00f9c	e59d3010	 ldr         r3, [sp, #0x10]
  00fa0	e2833058	 add         r3, r3, #0x58
  00fa4	e5932000	 ldr         r2, [r3]
  00fa8	e3e03802	 mvn         r3, #2, 16
  00fac	e0022003	 and         r2, r2, r3
  00fb0	e2013001	 and         r3, r1, #1
  00fb4	e1a03883	 mov         r3, r3, lsl #17
  00fb8	e1822003	 orr         r2, r2, r3
  00fbc	e59d3010	 ldr         r3, [sp, #0x10]
  00fc0	e2833058	 add         r3, r3, #0x58
  00fc4	e5832000	 str         r2, [r3]

; 251  :             pMMC_command->csd.mmc_csd.dsr_imp = (pMMC_command->response[7] >> 5) & 0x1;

  00fc8	e59d3010	 ldr         r3, [sp, #0x10]
  00fcc	e2833027	 add         r3, r3, #0x27
  00fd0	e5d33000	 ldrb        r3, [r3]
  00fd4	e1a032c3	 mov         r3, r3, asr #5
  00fd8	e2031001	 and         r1, r3, #1
  00fdc	e59d3010	 ldr         r3, [sp, #0x10]
  00fe0	e2833058	 add         r3, r3, #0x58
  00fe4	e5932000	 ldr         r2, [r3]
  00fe8	e3e03702	 mvn         r3, #2, 14
  00fec	e0022003	 and         r2, r2, r3
  00ff0	e2013001	 and         r3, r1, #1
  00ff4	e1a03983	 mov         r3, r3, lsl #19
  00ff8	e1822003	 orr         r2, r2, r3
  00ffc	e59d3010	 ldr         r3, [sp, #0x10]
  01000	e2833058	 add         r3, r3, #0x58
  01004	e5832000	 str         r2, [r3]

; 252  :             pMMC_command->csd.mmc_csd.vdd_r_min = (pMMC_command->response[9] >> 3) & 0x7;

  01008	e59d3010	 ldr         r3, [sp, #0x10]
  0100c	e2833029	 add         r3, r3, #0x29
  01010	e5d33000	 ldrb        r3, [r3]
  01014	e1a031c3	 mov         r3, r3, asr #3
  01018	e2031007	 and         r1, r3, #7
  0101c	e59d3010	 ldr         r3, [sp, #0x10]
  01020	e283305c	 add         r3, r3, #0x5C
  01024	e5932000	 ldr         r2, [r3]
  01028	e3e03007	 mvn         r3, #7
  0102c	e0022003	 and         r2, r2, r3
  01030	e2013007	 and         r3, r1, #7
  01034	e1822003	 orr         r2, r2, r3
  01038	e59d3010	 ldr         r3, [sp, #0x10]
  0103c	e283305c	 add         r3, r3, #0x5C
  01040	e5832000	 str         r2, [r3]

; 253  :             pMMC_command->csd.mmc_csd.vdd_r_max = pMMC_command->response[9] & 0x7;

  01044	e59d3010	 ldr         r3, [sp, #0x10]
  01048	e2833029	 add         r3, r3, #0x29
  0104c	e5d33000	 ldrb        r3, [r3]
  01050	e2031007	 and         r1, r3, #7
  01054	e59d3010	 ldr         r3, [sp, #0x10]
  01058	e283305c	 add         r3, r3, #0x5C
  0105c	e5932000	 ldr         r2, [r3]
  01060	e3e03038	 mvn         r3, #0x38
  01064	e0022003	 and         r2, r2, r3
  01068	e2013007	 and         r3, r1, #7
  0106c	e1a03183	 mov         r3, r3, lsl #3
  01070	e1822003	 orr         r2, r2, r3
  01074	e59d3010	 ldr         r3, [sp, #0x10]
  01078	e283305c	 add         r3, r3, #0x5C
  0107c	e5832000	 str         r2, [r3]

; 254  :             pMMC_command->csd.mmc_csd.vdd_w_min = (pMMC_command->response[10] >> 5) & 0x7;

  01080	e59d3010	 ldr         r3, [sp, #0x10]
  01084	e283302a	 add         r3, r3, #0x2A
  01088	e5d33000	 ldrb        r3, [r3]
  0108c	e1a032c3	 mov         r3, r3, asr #5
  01090	e2031007	 and         r1, r3, #7
  01094	e59d3010	 ldr         r3, [sp, #0x10]
  01098	e283305c	 add         r3, r3, #0x5C
  0109c	e5932000	 ldr         r2, [r3]
  010a0	e3e03d07	 mvn         r3, #7, 26
  010a4	e0022003	 and         r2, r2, r3
  010a8	e2013007	 and         r3, r1, #7
  010ac	e1a03303	 mov         r3, r3, lsl #6
  010b0	e1822003	 orr         r2, r2, r3
  010b4	e59d3010	 ldr         r3, [sp, #0x10]
  010b8	e283305c	 add         r3, r3, #0x5C
  010bc	e5832000	 str         r2, [r3]

; 255  :             pMMC_command->csd.mmc_csd.vdd_w_max = (pMMC_command->response[10] >> 2) & 0x7;

  010c0	e59d3010	 ldr         r3, [sp, #0x10]
  010c4	e283302a	 add         r3, r3, #0x2A
  010c8	e5d33000	 ldrb        r3, [r3]
  010cc	e1a03143	 mov         r3, r3, asr #2
  010d0	e2031007	 and         r1, r3, #7
  010d4	e59d3010	 ldr         r3, [sp, #0x10]
  010d8	e283305c	 add         r3, r3, #0x5C
  010dc	e5932000	 ldr         r2, [r3]
  010e0	e3e03c0e	 mvn         r3, #0xE, 24
  010e4	e0022003	 and         r2, r2, r3
  010e8	e2013007	 and         r3, r1, #7
  010ec	e1a03483	 mov         r3, r3, lsl #9
  010f0	e1822003	 orr         r2, r2, r3
  010f4	e59d3010	 ldr         r3, [sp, #0x10]
  010f8	e283305c	 add         r3, r3, #0x5C
  010fc	e5832000	 str         r2, [r3]

; 256  :             pMMC_command->csd.mmc_csd.c_size_mult = (pMMC_command->response[10] & 0x3) << 1 | ((pMMC_command->response[11] >> 7) & 0x1);

  01100	e59d3010	 ldr         r3, [sp, #0x10]
  01104	e283302a	 add         r3, r3, #0x2A
  01108	e5d33000	 ldrb        r3, [r3]
  0110c	e2033003	 and         r3, r3, #3
  01110	e1a02083	 mov         r2, r3, lsl #1
  01114	e59d3010	 ldr         r3, [sp, #0x10]
  01118	e283302b	 add         r3, r3, #0x2B
  0111c	e5d33000	 ldrb        r3, [r3]
  01120	e1a033c3	 mov         r3, r3, asr #7
  01124	e2033001	 and         r3, r3, #1
  01128	e1821003	 orr         r1, r2, r3
  0112c	e59d3010	 ldr         r3, [sp, #0x10]
  01130	e283305c	 add         r3, r3, #0x5C
  01134	e5932000	 ldr         r2, [r3]
  01138	e3e03a07	 mvn         r3, #7, 20
  0113c	e0022003	 and         r2, r2, r3
  01140	e2013007	 and         r3, r1, #7
  01144	e1a03603	 mov         r3, r3, lsl #12
  01148	e1822003	 orr         r2, r2, r3
  0114c	e59d3010	 ldr         r3, [sp, #0x10]
  01150	e283305c	 add         r3, r3, #0x5C
  01154	e5832000	 str         r2, [r3]

; 257  :             pMMC_command->csd.mmc_csd.sector_size = (pMMC_command->response[11] >> 2) & 0x1F;

  01158	e59d3010	 ldr         r3, [sp, #0x10]
  0115c	e283302b	 add         r3, r3, #0x2B
  01160	e5d33000	 ldrb        r3, [r3]
  01164	e1a03143	 mov         r3, r3, asr #2
  01168	e203101f	 and         r1, r3, #0x1F
  0116c	e59d3010	 ldr         r3, [sp, #0x10]
  01170	e283305c	 add         r3, r3, #0x5C
  01174	e5932000	 ldr         r2, [r3]
  01178	e3e0393e	 mvn         r3, #0x3E, 18
  0117c	e0022003	 and         r2, r2, r3
  01180	e201301f	 and         r3, r1, #0x1F
  01184	e1a03783	 mov         r3, r3, lsl #15
  01188	e1822003	 orr         r2, r2, r3
  0118c	e59d3010	 ldr         r3, [sp, #0x10]
  01190	e283305c	 add         r3, r3, #0x5C
  01194	e5832000	 str         r2, [r3]

; 258  :             pMMC_command->csd.mmc_csd.erase_grp_size = ((pMMC_command->response[11] & 0x3) << 3) | ((pMMC_command->response[12] >> 5) & 0x7);

  01198	e59d3010	 ldr         r3, [sp, #0x10]
  0119c	e283302b	 add         r3, r3, #0x2B
  011a0	e5d33000	 ldrb        r3, [r3]
  011a4	e2033003	 and         r3, r3, #3
  011a8	e1a02183	 mov         r2, r3, lsl #3
  011ac	e59d3010	 ldr         r3, [sp, #0x10]
  011b0	e283302c	 add         r3, r3, #0x2C
  011b4	e5d33000	 ldrb        r3, [r3]
  011b8	e1a032c3	 mov         r3, r3, asr #5
  011bc	e2033007	 and         r3, r3, #7
  011c0	e1821003	 orr         r1, r2, r3
  011c4	e59d3010	 ldr         r3, [sp, #0x10]
  011c8	e283305c	 add         r3, r3, #0x5C
  011cc	e5932000	 ldr         r2, [r3]
  011d0	e3e0361f	 mvn         r3, #0x1F, 12
  011d4	e0022003	 and         r2, r2, r3
  011d8	e201301f	 and         r3, r1, #0x1F
  011dc	e1a03a03	 mov         r3, r3, lsl #20
  011e0	e1822003	 orr         r2, r2, r3
  011e4	e59d3010	 ldr         r3, [sp, #0x10]
  011e8	e283305c	 add         r3, r3, #0x5C
  011ec	e5832000	 str         r2, [r3]

; 259  :             pMMC_command->csd.mmc_csd.wp_grp_size = pMMC_command->response[12] & 0x1F;

  011f0	e59d3010	 ldr         r3, [sp, #0x10]
  011f4	e283302c	 add         r3, r3, #0x2C
  011f8	e5d33000	 ldrb        r3, [r3]
  011fc	e203101f	 and         r1, r3, #0x1F
  01200	e59d3010	 ldr         r3, [sp, #0x10]
  01204	e283305c	 add         r3, r3, #0x5C
  01208	e5932000	 ldr         r2, [r3]
  0120c	e3e0343e	 mvn         r3, #0x3E, 8
  01210	e0022003	 and         r2, r2, r3
  01214	e201301f	 and         r3, r1, #0x1F
  01218	e1a03c83	 mov         r3, r3, lsl #25
  0121c	e1822003	 orr         r2, r2, r3
  01220	e59d3010	 ldr         r3, [sp, #0x10]
  01224	e283305c	 add         r3, r3, #0x5C
  01228	e5832000	 str         r2, [r3]

; 260  :             pMMC_command->csd.mmc_csd.wp_grp_en = (pMMC_command->response[13] >> 7) & 0x1;

  0122c	e59d3010	 ldr         r3, [sp, #0x10]
  01230	e283302d	 add         r3, r3, #0x2D
  01234	e5d33000	 ldrb        r3, [r3]
  01238	e1a033c3	 mov         r3, r3, asr #7
  0123c	e2031001	 and         r1, r3, #1
  01240	e59d3010	 ldr         r3, [sp, #0x10]
  01244	e283305c	 add         r3, r3, #0x5C
  01248	e5932000	 ldr         r2, [r3]
  0124c	e3e03101	 mvn         r3, #1, 2
  01250	e0022003	 and         r2, r2, r3
  01254	e2013001	 and         r3, r1, #1
  01258	e1a03f03	 mov         r3, r3, lsl #30
  0125c	e1822003	 orr         r2, r2, r3
  01260	e59d3010	 ldr         r3, [sp, #0x10]
  01264	e283305c	 add         r3, r3, #0x5C
  01268	e5832000	 str         r2, [r3]

; 261  :             pMMC_command->csd.mmc_csd.default_ecc = (pMMC_command->response[13] >> 5) & 0x3;

  0126c	e59d3010	 ldr         r3, [sp, #0x10]
  01270	e283302d	 add         r3, r3, #0x2D
  01274	e5d33000	 ldrb        r3, [r3]
  01278	e1a032c3	 mov         r3, r3, asr #5
  0127c	e2031003	 and         r1, r3, #3
  01280	e59d3010	 ldr         r3, [sp, #0x10]
  01284	e2833060	 add         r3, r3, #0x60
  01288	e5932000	 ldr         r2, [r3]
  0128c	e3e03003	 mvn         r3, #3
  01290	e0022003	 and         r2, r2, r3
  01294	e2013003	 and         r3, r1, #3
  01298	e1822003	 orr         r2, r2, r3
  0129c	e59d3010	 ldr         r3, [sp, #0x10]
  012a0	e2833060	 add         r3, r3, #0x60
  012a4	e5832000	 str         r2, [r3]

; 262  :             pMMC_command->csd.mmc_csd.r2w_factor = (pMMC_command->response[13] >> 2) & 0x7;

  012a8	e59d3010	 ldr         r3, [sp, #0x10]
  012ac	e283302d	 add         r3, r3, #0x2D
  012b0	e5d33000	 ldrb        r3, [r3]
  012b4	e1a03143	 mov         r3, r3, asr #2
  012b8	e2031007	 and         r1, r3, #7
  012bc	e59d3010	 ldr         r3, [sp, #0x10]
  012c0	e2833060	 add         r3, r3, #0x60
  012c4	e5932000	 ldr         r2, [r3]
  012c8	e3e0301c	 mvn         r3, #0x1C
  012cc	e0022003	 and         r2, r2, r3
  012d0	e2013007	 and         r3, r1, #7
  012d4	e1a03103	 mov         r3, r3, lsl #2
  012d8	e1822003	 orr         r2, r2, r3
  012dc	e59d3010	 ldr         r3, [sp, #0x10]
  012e0	e2833060	 add         r3, r3, #0x60
  012e4	e5832000	 str         r2, [r3]

; 263  :             pMMC_command->csd.mmc_csd.wr_blk_len = ((pMMC_command->response[13] & 0x3) << 2) | ((pMMC_command->response[14] >> 6) & 0x3);

  012e8	e59d3010	 ldr         r3, [sp, #0x10]
  012ec	e283302d	 add         r3, r3, #0x2D
  012f0	e5d33000	 ldrb        r3, [r3]
  012f4	e2033003	 and         r3, r3, #3
  012f8	e1a02103	 mov         r2, r3, lsl #2
  012fc	e59d3010	 ldr         r3, [sp, #0x10]
  01300	e283302e	 add         r3, r3, #0x2E
  01304	e5d33000	 ldrb        r3, [r3]
  01308	e1a03343	 mov         r3, r3, asr #6
  0130c	e2033003	 and         r3, r3, #3
  01310	e1821003	 orr         r1, r2, r3
  01314	e59d3010	 ldr         r3, [sp, #0x10]
  01318	e2833060	 add         r3, r3, #0x60
  0131c	e5932000	 ldr         r2, [r3]
  01320	e3e03e1e	 mvn         r3, #0x1E, 28
  01324	e0022003	 and         r2, r2, r3
  01328	e201300f	 and         r3, r1, #0xF
  0132c	e1a03283	 mov         r3, r3, lsl #5
  01330	e1822003	 orr         r2, r2, r3
  01334	e59d3010	 ldr         r3, [sp, #0x10]
  01338	e2833060	 add         r3, r3, #0x60
  0133c	e5832000	 str         r2, [r3]

; 264  :             pMMC_command->csd.mmc_csd.wr_blk_part = (pMMC_command->response[14] >> 5) & 0x1;

  01340	e59d3010	 ldr         r3, [sp, #0x10]
  01344	e283302e	 add         r3, r3, #0x2E
  01348	e5d33000	 ldrb        r3, [r3]
  0134c	e1a032c3	 mov         r3, r3, asr #5
  01350	e2031001	 and         r1, r3, #1
  01354	e59d3010	 ldr         r3, [sp, #0x10]
  01358	e2833060	 add         r3, r3, #0x60
  0135c	e5932000	 ldr         r2, [r3]
  01360	e3e03c02	 mvn         r3, #2, 24
  01364	e0022003	 and         r2, r2, r3
  01368	e2013001	 and         r3, r1, #1
  0136c	e1a03483	 mov         r3, r3, lsl #9
  01370	e1822003	 orr         r2, r2, r3
  01374	e59d3010	 ldr         r3, [sp, #0x10]
  01378	e2833060	 add         r3, r3, #0x60
  0137c	e5832000	 str         r2, [r3]

; 265  :             pMMC_command->csd.mmc_csd.file_fmt_grp = (pMMC_command->response[15] >> 7) & 0x1;

  01380	e59d3010	 ldr         r3, [sp, #0x10]
  01384	e283302f	 add         r3, r3, #0x2F
  01388	e5d33000	 ldrb        r3, [r3]
  0138c	e1a033c3	 mov         r3, r3, asr #7
  01390	e2031001	 and         r1, r3, #1
  01394	e59d3010	 ldr         r3, [sp, #0x10]
  01398	e2833060	 add         r3, r3, #0x60
  0139c	e5932000	 ldr         r2, [r3]
  013a0	e3e03b01	 mvn         r3, #1, 22
  013a4	e0022003	 and         r2, r2, r3
  013a8	e2013001	 and         r3, r1, #1
  013ac	e1a03503	 mov         r3, r3, lsl #10
  013b0	e1822003	 orr         r2, r2, r3
  013b4	e59d3010	 ldr         r3, [sp, #0x10]
  013b8	e2833060	 add         r3, r3, #0x60
  013bc	e5832000	 str         r2, [r3]

; 266  :             pMMC_command->csd.mmc_csd.copy = (pMMC_command->response[15] >> 6) & 0x1;

  013c0	e59d3010	 ldr         r3, [sp, #0x10]
  013c4	e283302f	 add         r3, r3, #0x2F
  013c8	e5d33000	 ldrb        r3, [r3]
  013cc	e1a03343	 mov         r3, r3, asr #6
  013d0	e2031001	 and         r1, r3, #1
  013d4	e59d3010	 ldr         r3, [sp, #0x10]
  013d8	e2833060	 add         r3, r3, #0x60
  013dc	e5932000	 ldr         r2, [r3]
  013e0	e3e03b02	 mvn         r3, #2, 22
  013e4	e0022003	 and         r2, r2, r3
  013e8	e2013001	 and         r3, r1, #1
  013ec	e1a03583	 mov         r3, r3, lsl #11
  013f0	e1822003	 orr         r2, r2, r3
  013f4	e59d3010	 ldr         r3, [sp, #0x10]
  013f8	e2833060	 add         r3, r3, #0x60
  013fc	e5832000	 str         r2, [r3]

; 267  :             pMMC_command->csd.mmc_csd.perm_wr_prot = (pMMC_command->response[15] >> 5) & 0x1;

  01400	e59d3010	 ldr         r3, [sp, #0x10]
  01404	e283302f	 add         r3, r3, #0x2F
  01408	e5d33000	 ldrb        r3, [r3]
  0140c	e1a032c3	 mov         r3, r3, asr #5
  01410	e2031001	 and         r1, r3, #1
  01414	e59d3010	 ldr         r3, [sp, #0x10]
  01418	e2833060	 add         r3, r3, #0x60
  0141c	e5932000	 ldr         r2, [r3]
  01420	e3e03a01	 mvn         r3, #1, 20
  01424	e0022003	 and         r2, r2, r3
  01428	e2013001	 and         r3, r1, #1
  0142c	e1a03603	 mov         r3, r3, lsl #12
  01430	e1822003	 orr         r2, r2, r3
  01434	e59d3010	 ldr         r3, [sp, #0x10]
  01438	e2833060	 add         r3, r3, #0x60
  0143c	e5832000	 str         r2, [r3]

; 268  :             pMMC_command->csd.mmc_csd.tmp_wr_prot = (pMMC_command->response[15] >> 4) & 0x1;

  01440	e59d3010	 ldr         r3, [sp, #0x10]
  01444	e283302f	 add         r3, r3, #0x2F
  01448	e5d33000	 ldrb        r3, [r3]
  0144c	e1a03243	 mov         r3, r3, asr #4
  01450	e2031001	 and         r1, r3, #1
  01454	e59d3010	 ldr         r3, [sp, #0x10]
  01458	e2833060	 add         r3, r3, #0x60
  0145c	e5932000	 ldr         r2, [r3]
  01460	e3e03a02	 mvn         r3, #2, 20
  01464	e0022003	 and         r2, r2, r3
  01468	e2013001	 and         r3, r1, #1
  0146c	e1a03683	 mov         r3, r3, lsl #13
  01470	e1822003	 orr         r2, r2, r3
  01474	e59d3010	 ldr         r3, [sp, #0x10]
  01478	e2833060	 add         r3, r3, #0x60
  0147c	e5832000	 str         r2, [r3]

; 269  :             pMMC_command->csd.mmc_csd.file_fmt = (pMMC_command->response[15] >> 2) & 0x3;

  01480	e59d3010	 ldr         r3, [sp, #0x10]
  01484	e283302f	 add         r3, r3, #0x2F
  01488	e5d33000	 ldrb        r3, [r3]
  0148c	e1a03143	 mov         r3, r3, asr #2
  01490	e2031003	 and         r1, r3, #3
  01494	e59d3010	 ldr         r3, [sp, #0x10]
  01498	e2833060	 add         r3, r3, #0x60
  0149c	e5932000	 ldr         r2, [r3]
  014a0	e3e03903	 mvn         r3, #3, 18
  014a4	e0022003	 and         r2, r2, r3
  014a8	e2013003	 and         r3, r1, #3
  014ac	e1a03703	 mov         r3, r3, lsl #14
  014b0	e1822003	 orr         r2, r2, r3
  014b4	e59d3010	 ldr         r3, [sp, #0x10]
  014b8	e2833060	 add         r3, r3, #0x60
  014bc	e5832000	 str         r2, [r3]

; 270  :             pMMC_command->csd.mmc_csd.ecc = pMMC_command->response[15] & 0x3;

  014c0	e59d3010	 ldr         r3, [sp, #0x10]
  014c4	e283302f	 add         r3, r3, #0x2F
  014c8	e5d33000	 ldrb        r3, [r3]
  014cc	e2031003	 and         r1, r3, #3
  014d0	e59d3010	 ldr         r3, [sp, #0x10]
  014d4	e2833060	 add         r3, r3, #0x60
  014d8	e5932000	 ldr         r2, [r3]
  014dc	e3e03803	 mvn         r3, #3, 16
  014e0	e0022003	 and         r2, r2, r3
  014e4	e2013003	 and         r3, r1, #3
  014e8	e1a03803	 mov         r3, r3, lsl #16
  014ec	e1822003	 orr         r2, r2, r3
  014f0	e59d3010	 ldr         r3, [sp, #0x10]
  014f4	e2833060	 add         r3, r3, #0x60
  014f8	e5832000	 str         r2, [r3]

; 271  :             pMMC_command->csd.mmc_csd.crc = 0;

  014fc	e59d3010	 ldr         r3, [sp, #0x10]
  01500	e2832064	 add         r2, r3, #0x64
  01504	e3a03000	 mov         r3, #0
  01508	e5c23000	 strb        r3, [r2]

; 272  :             pMMC_command->crc = 0;

  0150c	e59d3010	 ldr         r3, [sp, #0x10]
  01510	e2832031	 add         r2, r3, #0x31
  01514	e3a03000	 mov         r3, #0
  01518	e5c23000	 strb        r3, [r2]
  0151c		 |$LN21@INTF_MMCRe|
  0151c		 |$LN26@INTF_MMCRe|

; 273  :         }
; 274  :     }
; 275  :     
; 276  :     if (pMMC_command->command == SEND_CID)

  0151c	e59d3010	 ldr         r3, [sp, #0x10]
  01520	e2833004	 add         r3, r3, #4
  01524	e5d33000	 ldrb        r3, [r3]
  01528	e353000a	 cmp         r3, #0xA
  0152c	1a0000ba	 bne         |$LN20@INTF_MMCRe|

; 277  :     {
; 278  :         if (pMMC_command->card_type == CARDTYPE_SD || pMMC_command->card_type == CARDTYPE_SDHC)

  01530	e59d3010	 ldr         r3, [sp, #0x10]
  01534	e5933000	 ldr         r3, [r3]
  01538	e3530002	 cmp         r3, #2
  0153c	0a000003	 beq         |$LN18@INTF_MMCRe|
  01540	e59d3010	 ldr         r3, [sp, #0x10]
  01544	e5933000	 ldr         r3, [r3]
  01548	e3530003	 cmp         r3, #3
  0154c	1a000061	 bne         |$LN19@INTF_MMCRe|
  01550		 |$LN18@INTF_MMCRe|

; 279  :         {
; 280  :             pMMC_command->cid.sd_cid.sdmid = pMMC_command->response[1];

  01550	e59d3010	 ldr         r3, [sp, #0x10]
  01554	e2831021	 add         r1, r3, #0x21
  01558	e59d3010	 ldr         r3, [sp, #0x10]
  0155c	e2832038	 add         r2, r3, #0x38
  01560	e5d13000	 ldrb        r3, [r1]
  01564	e5c23000	 strb        r3, [r2]

; 281  :             pMMC_command->cid.sd_cid.sdoid = (pMMC_command->response[2] << 8) |
; 282  :                 pMMC_command->response[3];

  01568	e59d3010	 ldr         r3, [sp, #0x10]
  0156c	e2833022	 add         r3, r3, #0x22
  01570	e5d33000	 ldrb        r3, [r3]
  01574	e1a02403	 mov         r2, r3, lsl #8
  01578	e59d3010	 ldr         r3, [sp, #0x10]
  0157c	e2833023	 add         r3, r3, #0x23
  01580	e5d33000	 ldrb        r3, [r3]
  01584	e1821003	 orr         r1, r2, r3
  01588	e59d3010	 ldr         r3, [sp, #0x10]
  0158c	e283203a	 add         r2, r3, #0x3A
  01590	e1a03801	 mov         r3, r1, lsl #16
  01594	e1a03823	 mov         r3, r3, lsr #16
  01598	e1c230b0	 strh        r3, [r2]

; 283  :             for (i=0;i<5; i++)

  0159c	e3a03000	 mov         r3, #0
  015a0	e58d3000	 str         r3, [sp]
  015a4	ea000002	 b           |$LN17@INTF_MMCRe|
  015a8		 |$LN16@INTF_MMCRe|
  015a8	e59d3000	 ldr         r3, [sp]
  015ac	e2833001	 add         r3, r3, #1
  015b0	e58d3000	 str         r3, [sp]
  015b4		 |$LN17@INTF_MMCRe|
  015b4	e59d3000	 ldr         r3, [sp]
  015b8	e3530005	 cmp         r3, #5
  015bc	aa00000b	 bge         |$LN15@INTF_MMCRe|

; 284  :                 pMMC_command->cid.sd_cid.sdpnm[i] = pMMC_command->response[4+i];

  015c0	e59d3010	 ldr         r3, [sp, #0x10]
  015c4	e2832020	 add         r2, r3, #0x20
  015c8	e59d3000	 ldr         r3, [sp]
  015cc	e2833004	 add         r3, r3, #4
  015d0	e0821003	 add         r1, r2, r3
  015d4	e59d3010	 ldr         r3, [sp, #0x10]
  015d8	e283203c	 add         r2, r3, #0x3C
  015dc	e59d3000	 ldr         r3, [sp]
  015e0	e0822003	 add         r2, r2, r3
  015e4	e5d13000	 ldrb        r3, [r1]
  015e8	e5c23000	 strb        r3, [r2]
  015ec	eaffffed	 b           |$LN16@INTF_MMCRe|
  015f0		 |$LN15@INTF_MMCRe|

; 285  :             pMMC_command->cid.sd_cid.sdprv = pMMC_command->response[9];

  015f0	e59d3010	 ldr         r3, [sp, #0x10]
  015f4	e2831029	 add         r1, r3, #0x29
  015f8	e59d3010	 ldr         r3, [sp, #0x10]
  015fc	e2832042	 add         r2, r3, #0x42
  01600	e5d13000	 ldrb        r3, [r1]
  01604	e5c23000	 strb        r3, [r2]

; 286  :             pMMC_command->cid.sd_cid.sdpsn = (pMMC_command->response[10]<<24) |
; 287  :                 (pMMC_command->response[11]<<16) | (pMMC_command->response[12]<<8) |
; 288  :                  pMMC_command->response[13];

  01608	e59d3010	 ldr         r3, [sp, #0x10]
  0160c	e283302a	 add         r3, r3, #0x2A
  01610	e5d33000	 ldrb        r3, [r3]
  01614	e1a02c03	 mov         r2, r3, lsl #24
  01618	e59d3010	 ldr         r3, [sp, #0x10]
  0161c	e283302b	 add         r3, r3, #0x2B
  01620	e5d33000	 ldrb        r3, [r3]
  01624	e1a03803	 mov         r3, r3, lsl #16
  01628	e1822003	 orr         r2, r2, r3
  0162c	e59d3010	 ldr         r3, [sp, #0x10]
  01630	e283302c	 add         r3, r3, #0x2C
  01634	e5d33000	 ldrb        r3, [r3]
  01638	e1a03403	 mov         r3, r3, lsl #8
  0163c	e1822003	 orr         r2, r2, r3
  01640	e59d3010	 ldr         r3, [sp, #0x10]
  01644	e283302d	 add         r3, r3, #0x2D
  01648	e5d33000	 ldrb        r3, [r3]
  0164c	e1822003	 orr         r2, r2, r3
  01650	e59d3010	 ldr         r3, [sp, #0x10]
  01654	e2833044	 add         r3, r3, #0x44
  01658	e5832000	 str         r2, [r3]

; 289  :             pMMC_command->cid.sd_cid.sdmdt = ((pMMC_command->response[14] & 0xF) << 8) |
; 290  :                 pMMC_command->response[15];

  0165c	e59d3010	 ldr         r3, [sp, #0x10]
  01660	e283302e	 add         r3, r3, #0x2E
  01664	e5d33000	 ldrb        r3, [r3]
  01668	e203300f	 and         r3, r3, #0xF
  0166c	e1a02403	 mov         r2, r3, lsl #8
  01670	e59d3010	 ldr         r3, [sp, #0x10]
  01674	e283302f	 add         r3, r3, #0x2F
  01678	e5d33000	 ldrb        r3, [r3]
  0167c	e1821003	 orr         r1, r2, r3
  01680	e59d3010	 ldr         r3, [sp, #0x10]
  01684	e2833048	 add         r3, r3, #0x48
  01688	e5932000	 ldr         r2, [r3]
  0168c	e3e03c0f	 mvn         r3, #0xF, 24
  01690	e22330ff	 eor         r3, r3, #0xFF
  01694	e0022003	 and         r2, r2, r3
  01698	e3a03c0f	 mov         r3, #0xF, 24
  0169c	e38330ff	 orr         r3, r3, #0xFF
  016a0	e0013003	 and         r3, r1, r3
  016a4	e1822003	 orr         r2, r2, r3
  016a8	e59d3010	 ldr         r3, [sp, #0x10]
  016ac	e2833048	 add         r3, r3, #0x48
  016b0	e5832000	 str         r2, [r3]

; 291  :             // pMMC_command->cid.sd_cid.sdcrc = pMMC_command->response[16];
; 292  :             pMMC_command->cid.sd_cid.sdcrc = 0;

  016b4	e59d3010	 ldr         r3, [sp, #0x10]
  016b8	e283204c	 add         r2, r3, #0x4C
  016bc	e3a03000	 mov         r3, #0
  016c0	e5c23000	 strb        r3, [r2]

; 293  :             pMMC_command->crc = 0;

  016c4	e59d3010	 ldr         r3, [sp, #0x10]
  016c8	e2832031	 add         r2, r3, #0x31
  016cc	e3a03000	 mov         r3, #0
  016d0	e5c23000	 strb        r3, [r2]

; 294  :         }
; 295  :         else

  016d4	ea000050	 b           |$LN14@INTF_MMCRe|
  016d8		 |$LN19@INTF_MMCRe|

; 296  :         {
; 297  :             pMMC_command->cid.mmc_cid.mid = pMMC_command->response[1];

  016d8	e59d3010	 ldr         r3, [sp, #0x10]
  016dc	e2831021	 add         r1, r3, #0x21
  016e0	e59d3010	 ldr         r3, [sp, #0x10]
  016e4	e2832038	 add         r2, r3, #0x38
  016e8	e5d13000	 ldrb        r3, [r1]
  016ec	e5c23000	 strb        r3, [r2]

; 298  :             pMMC_command->cid.mmc_cid.oid = (pMMC_command->response[2] << 8) |
; 299  :                 pMMC_command->response[3];

  016f0	e59d3010	 ldr         r3, [sp, #0x10]
  016f4	e2833022	 add         r3, r3, #0x22
  016f8	e5d33000	 ldrb        r3, [r3]
  016fc	e1a02403	 mov         r2, r3, lsl #8
  01700	e59d3010	 ldr         r3, [sp, #0x10]
  01704	e2833023	 add         r3, r3, #0x23
  01708	e5d33000	 ldrb        r3, [r3]
  0170c	e1821003	 orr         r1, r2, r3
  01710	e59d3010	 ldr         r3, [sp, #0x10]
  01714	e283203a	 add         r2, r3, #0x3A
  01718	e1a03801	 mov         r3, r1, lsl #16
  0171c	e1a03823	 mov         r3, r3, lsr #16
  01720	e1c230b0	 strh        r3, [r2]

; 300  :             for (i=0; i<6; i++)

  01724	e3a03000	 mov         r3, #0
  01728	e58d3000	 str         r3, [sp]
  0172c	ea000002	 b           |$LN13@INTF_MMCRe|
  01730		 |$LN12@INTF_MMCRe|
  01730	e59d3000	 ldr         r3, [sp]
  01734	e2833001	 add         r3, r3, #1
  01738	e58d3000	 str         r3, [sp]
  0173c		 |$LN13@INTF_MMCRe|
  0173c	e59d3000	 ldr         r3, [sp]
  01740	e3530006	 cmp         r3, #6
  01744	aa00000b	 bge         |$LN11@INTF_MMCRe|

; 301  :                 pMMC_command->cid.mmc_cid.pnm[i] = pMMC_command->response[4+i];

  01748	e59d3010	 ldr         r3, [sp, #0x10]
  0174c	e2832020	 add         r2, r3, #0x20
  01750	e59d3000	 ldr         r3, [sp]
  01754	e2833004	 add         r3, r3, #4
  01758	e0821003	 add         r1, r2, r3
  0175c	e59d3010	 ldr         r3, [sp, #0x10]
  01760	e283203c	 add         r2, r3, #0x3C
  01764	e59d3000	 ldr         r3, [sp]
  01768	e0822003	 add         r2, r2, r3
  0176c	e5d13000	 ldrb        r3, [r1]
  01770	e5c23000	 strb        r3, [r2]
  01774	eaffffed	 b           |$LN12@INTF_MMCRe|
  01778		 |$LN11@INTF_MMCRe|

; 302  :             pMMC_command->cid.mmc_cid.prv = pMMC_command->response[10];

  01778	e59d3010	 ldr         r3, [sp, #0x10]
  0177c	e283102a	 add         r1, r3, #0x2A
  01780	e59d3010	 ldr         r3, [sp, #0x10]
  01784	e2832044	 add         r2, r3, #0x44
  01788	e5d13000	 ldrb        r3, [r1]
  0178c	e5c23000	 strb        r3, [r2]

; 303  :             pMMC_command->cid.mmc_cid.psn = (pMMC_command->response[11]<<24) |
; 304  :                 (pMMC_command->response[12]<<16) | (pMMC_command->response[13]<<8) |
; 305  :                  pMMC_command->response[14];

  01790	e59d3010	 ldr         r3, [sp, #0x10]
  01794	e283302b	 add         r3, r3, #0x2B
  01798	e5d33000	 ldrb        r3, [r3]
  0179c	e1a02c03	 mov         r2, r3, lsl #24
  017a0	e59d3010	 ldr         r3, [sp, #0x10]
  017a4	e283302c	 add         r3, r3, #0x2C
  017a8	e5d33000	 ldrb        r3, [r3]
  017ac	e1a03803	 mov         r3, r3, lsl #16
  017b0	e1822003	 orr         r2, r2, r3
  017b4	e59d3010	 ldr         r3, [sp, #0x10]
  017b8	e283302d	 add         r3, r3, #0x2D
  017bc	e5d33000	 ldrb        r3, [r3]
  017c0	e1a03403	 mov         r3, r3, lsl #8
  017c4	e1822003	 orr         r2, r2, r3
  017c8	e59d3010	 ldr         r3, [sp, #0x10]
  017cc	e283302e	 add         r3, r3, #0x2E
  017d0	e5d33000	 ldrb        r3, [r3]
  017d4	e1822003	 orr         r2, r2, r3
  017d8	e59d3010	 ldr         r3, [sp, #0x10]
  017dc	e2833048	 add         r3, r3, #0x48
  017e0	e5832000	 str         r2, [r3]

; 306  :             pMMC_command->cid.mmc_cid.mdt = pMMC_command->response[15];

  017e4	e59d3010	 ldr         r3, [sp, #0x10]
  017e8	e283102f	 add         r1, r3, #0x2F
  017ec	e59d3010	 ldr         r3, [sp, #0x10]
  017f0	e283204c	 add         r2, r3, #0x4C
  017f4	e5d13000	 ldrb        r3, [r1]
  017f8	e5c23000	 strb        r3, [r2]

; 307  :             // pMMC_command->cid.mmc_cid.crc = pMMC_command->response[16];
; 308  :             pMMC_command->cid.mmc_cid.crc = 0;

  017fc	e59d3010	 ldr         r3, [sp, #0x10]
  01800	e283204d	 add         r2, r3, #0x4D
  01804	e3a03000	 mov         r3, #0
  01808	e5c23000	 strb        r3, [r2]

; 309  :             pMMC_command->crc = 0;

  0180c	e59d3010	 ldr         r3, [sp, #0x10]
  01810	e2832031	 add         r2, r3, #0x31
  01814	e3a03000	 mov         r3, #0
  01818	e5c23000	 strb        r3, [r2]
  0181c		 |$LN14@INTF_MMCRe|
  0181c		 |$LN20@INTF_MMCRe|

; 310  :         }
; 311  :     }
; 312  :         
; 313  :     // format status register if needed
; 314  :     if ((pMMC_command->card_type == CARDTYPE_SD || pMMC_command->card_type == CARDTYPE_SDHC) && pMMC_command->command == SEND_RELATIVE_ADDRESS)

  0181c	e59d3010	 ldr         r3, [sp, #0x10]
  01820	e5933000	 ldr         r3, [r3]
  01824	e3530002	 cmp         r3, #2
  01828	0a000003	 beq         |$LN9@INTF_MMCRe|
  0182c	e59d3010	 ldr         r3, [sp, #0x10]
  01830	e5933000	 ldr         r3, [r3]
  01834	e3530003	 cmp         r3, #3
  01838	1a000018	 bne         |$LN10@INTF_MMCRe|
  0183c		 |$LN9@INTF_MMCRe|
  0183c	e59d3010	 ldr         r3, [sp, #0x10]
  01840	e2833004	 add         r3, r3, #4
  01844	e5d33000	 ldrb        r3, [r3]
  01848	e3530003	 cmp         r3, #3
  0184c	1a000013	 bne         |$LN10@INTF_MMCRe|

; 315  :     {
; 316  :         pMMC_command->relative_address = (pMMC_command->response[1] << 8) |
; 317  :                                          (pMMC_command->response[2]);

  01850	e59d3010	 ldr         r3, [sp, #0x10]
  01854	e2833021	 add         r3, r3, #0x21
  01858	e5d33000	 ldrb        r3, [r3]
  0185c	e1a02403	 mov         r2, r3, lsl #8
  01860	e59d3010	 ldr         r3, [sp, #0x10]
  01864	e2833022	 add         r3, r3, #0x22
  01868	e5d33000	 ldrb        r3, [r3]
  0186c	e1822003	 orr         r2, r2, r3
  01870	e59d3010	 ldr         r3, [sp, #0x10]
  01874	e283301c	 add         r3, r3, #0x1C
  01878	e5832000	 str         r2, [r3]

; 318  :         pMMC_command->status = 0;

  0187c	e59d3010	 ldr         r3, [sp, #0x10]
  01880	e2832014	 add         r2, r3, #0x14
  01884	e3a03000	 mov         r3, #0
  01888	e5823000	 str         r3, [r2]

; 319  :         pMMC_command->ocr = 0;

  0188c	e59d3010	 ldr         r3, [sp, #0x10]
  01890	e2832018	 add         r2, r3, #0x18
  01894	e3a03000	 mov         r3, #0
  01898	e5823000	 str         r3, [r2]
  0189c	ea000049	 b           |$LN8@INTF_MMCRe|
  018a0		 |$LN10@INTF_MMCRe|

; 320  :     }
; 321  :     else if (Request.CommandResponse.ResponseType == ResponseR1 || Request.CommandResponse.ResponseType == ResponseR1b)

  018a0	e59f3168	 ldr         r3, [pc, #0x168]
  018a4	e593301c	 ldr         r3, [r3, #0x1C]
  018a8	e3530001	 cmp         r3, #1
  018ac	0a000003	 beq         |$LN6@INTF_MMCRe|
  018b0	e59f3158	 ldr         r3, [pc, #0x158]
  018b4	e593301c	 ldr         r3, [r3, #0x1C]
  018b8	e3530002	 cmp         r3, #2
  018bc	1a00001a	 bne         |$LN7@INTF_MMCRe|
  018c0		 |$LN6@INTF_MMCRe|

; 322  :     {
; 323  :         pMMC_command->status = (pMMC_command->response[4]) |
; 324  :                                (pMMC_command->response[3] << 8) |
; 325  :                                (pMMC_command->response[2] << 16) |
; 326  :                                (pMMC_command->response[1] << 24);

  018c0	e59d3010	 ldr         r3, [sp, #0x10]
  018c4	e2833024	 add         r3, r3, #0x24
  018c8	e5d33000	 ldrb        r3, [r3]
  018cc	e1a02003	 mov         r2, r3
  018d0	e59d3010	 ldr         r3, [sp, #0x10]
  018d4	e2833023	 add         r3, r3, #0x23
  018d8	e5d33000	 ldrb        r3, [r3]
  018dc	e1a03403	 mov         r3, r3, lsl #8
  018e0	e1822003	 orr         r2, r2, r3
  018e4	e59d3010	 ldr         r3, [sp, #0x10]
  018e8	e2833022	 add         r3, r3, #0x22
  018ec	e5d33000	 ldrb        r3, [r3]
  018f0	e1a03803	 mov         r3, r3, lsl #16
  018f4	e1822003	 orr         r2, r2, r3
  018f8	e59d3010	 ldr         r3, [sp, #0x10]
  018fc	e2833021	 add         r3, r3, #0x21
  01900	e5d33000	 ldrb        r3, [r3]
  01904	e1a03c03	 mov         r3, r3, lsl #24
  01908	e1822003	 orr         r2, r2, r3
  0190c	e59d3010	 ldr         r3, [sp, #0x10]
  01910	e2833014	 add         r3, r3, #0x14
  01914	e5832000	 str         r2, [r3]

; 327  :         pMMC_command->ocr = 0;

  01918	e59d3010	 ldr         r3, [sp, #0x10]
  0191c	e2832018	 add         r2, r3, #0x18
  01920	e3a03000	 mov         r3, #0
  01924	e5823000	 str         r3, [r2]
  01928	ea000026	 b           |$LN5@INTF_MMCRe|
  0192c		 |$LN7@INTF_MMCRe|

; 328  : 
; 329  :         /*
; 330  :         // This test fails for command 18 which reports 16...
; 331  :         if (pMMC_command->command != (pMMC_command->response[0] & 0x3f))
; 332  :         {
; 333  :             OALMSG(OAL_ERROR, (TEXT("MMC: command in response %d != command %d\r\n"), pMMC_command->response[0], pMMC_command->command));
; 334  :         }
; 335  :         */
; 336  :     }
; 337  :     else if (Request.CommandResponse.ResponseType == ResponseR3)

  0192c	e59f30dc	 ldr         r3, [pc, #0xDC]
  01930	e593301c	 ldr         r3, [r3, #0x1C]
  01934	e3530004	 cmp         r3, #4
  01938	1a00001a	 bne         |$LN4@INTF_MMCRe|

; 338  :     {
; 339  :         pMMC_command->status = 0;

  0193c	e59d3010	 ldr         r3, [sp, #0x10]
  01940	e2832014	 add         r2, r3, #0x14
  01944	e3a03000	 mov         r3, #0
  01948	e5823000	 str         r3, [r2]

; 340  :         pMMC_command->ocr = (pMMC_command->response[4]) |
; 341  :                             (pMMC_command->response[3] << 8) |
; 342  :                             (pMMC_command->response[2] << 16) |
; 343  :                             (pMMC_command->response[1] << 24);

  0194c	e59d3010	 ldr         r3, [sp, #0x10]
  01950	e2833024	 add         r3, r3, #0x24
  01954	e5d33000	 ldrb        r3, [r3]
  01958	e1a02003	 mov         r2, r3
  0195c	e59d3010	 ldr         r3, [sp, #0x10]
  01960	e2833023	 add         r3, r3, #0x23
  01964	e5d33000	 ldrb        r3, [r3]
  01968	e1a03403	 mov         r3, r3, lsl #8
  0196c	e1822003	 orr         r2, r2, r3
  01970	e59d3010	 ldr         r3, [sp, #0x10]
  01974	e2833022	 add         r3, r3, #0x22
  01978	e5d33000	 ldrb        r3, [r3]
  0197c	e1a03803	 mov         r3, r3, lsl #16
  01980	e1822003	 orr         r2, r2, r3
  01984	e59d3010	 ldr         r3, [sp, #0x10]
  01988	e2833021	 add         r3, r3, #0x21
  0198c	e5d33000	 ldrb        r3, [r3]
  01990	e1a03c03	 mov         r3, r3, lsl #24
  01994	e1822003	 orr         r2, r2, r3
  01998	e59d3010	 ldr         r3, [sp, #0x10]
  0199c	e2833018	 add         r3, r3, #0x18
  019a0	e5832000	 str         r2, [r3]

; 344  :     }
; 345  :     else

  019a4	ea000007	 b           |$LN3@INTF_MMCRe|
  019a8		 |$LN4@INTF_MMCRe|

; 346  :     {
; 347  :         pMMC_command->status = 0;

  019a8	e59d3010	 ldr         r3, [sp, #0x10]
  019ac	e2832014	 add         r2, r3, #0x14
  019b0	e3a03000	 mov         r3, #0
  019b4	e5823000	 str         r3, [r2]

; 348  :         pMMC_command->ocr = 0;

  019b8	e59d3010	 ldr         r3, [sp, #0x10]
  019bc	e2832018	 add         r2, r3, #0x18
  019c0	e3a03000	 mov         r3, #0
  019c4	e5823000	 str         r3, [r2]
  019c8		 |$LN3@INTF_MMCRe|
  019c8		 |$LN5@INTF_MMCRe|
  019c8		 |$LN8@INTF_MMCRe|

; 349  :     }
; 350  : 
; 351  :     // check for alternate command mode entry
; 352  :     if (Request.CommandCode == APP_CMD)

  019c8	e59f3040	 ldr         r3, [pc, #0x40]
  019cc	e5d33014	 ldrb        r3, [r3, #0x14]
  019d0	e3530037	 cmp         r3, #0x37
  019d4	1a000003	 bne         |$LN2@INTF_MMCRe|

; 353  :         bAlternateCommandMode = TRUE;

  019d8	e59f202c	 ldr         r2, [pc, #0x2C]
  019dc	e3a03001	 mov         r3, #1
  019e0	e5823000	 str         r3, [r2]

; 354  :     else

  019e4	ea000002	 b           |$LN1@INTF_MMCRe|
  019e8		 |$LN2@INTF_MMCRe|

; 355  :         bAlternateCommandMode = FALSE;

  019e8	e59f201c	 ldr         r2, [pc, #0x1C]
  019ec	e3a03000	 mov         r3, #0
  019f0	e5823000	 str         r3, [r2]
  019f4		 |$LN1@INTF_MMCRe|

; 356  : 
; 357  :     return 0;

  019f4	e3a03000	 mov         r3, #0
  019f8	e58d3004	 str         r3, [sp, #4]

; 358  : }

  019fc	e59d0004	 ldr         r0, [sp, #4]
  01a00	e28dd008	 add         sp, sp, #8
  01a04	e89d6000	 ldmia       sp, {sp, lr}
  01a08	e12fff1e	 bx          lr
  01a0c		 |$LN41@INTF_MMCRe|
  01a0c		 |$LN42@INTF_MMCRe|
  01a0c	00000000	 DCD         |bAlternateCommandMode|
  01a10		 |$LN43@INTF_MMCRe|
  01a10	00000000	 DCD         |Request|
  01a14		 |$M45008|

			 ENDP  ; |INTF_MMCReadResponse|

	EXPORT	|??_C@_1FK@KLGDBING@?$AAS?$AAD?$AAC?$AAA?$AAR?$AAD?$AA?3?$AA?5?$AAr?$AAe?$AAq?$AAe?$AAs?$AAt?$AAe?$AAd?$AA?5?$AAs?$AAp?$AAe?$AAe?$AAd?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AAa?$AAc?$AAt?$AAu?$AAa@| [ DATA ] ; `string'
	EXPORT	|MMCSetTranSpeed|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|SdhcSetClockRate|

  00018			 AREA	 |.pdata|, PDATA
|$T45023| DCD	|$LN6@MMCSetTran|
	DCD	0x40001c04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FK@KLGDBING@?$AAS?$AAD?$AAC?$AAA?$AAR?$AAD?$AA?3?$AA?5?$AAr?$AAe?$AAq?$AAe?$AAs?$AAt?$AAe?$AAd?$AA?5?$AAs?$AAp?$AAe?$AAe?$AAd?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AAa?$AAc?$AAt?$AAu?$AAa@| DCB "S"
	DCB	0x0, "D", 0x0, "C", 0x0, "A", 0x0, "R", 0x0, "D", 0x0, ":"
	DCB	0x0, " ", 0x0, "r", 0x0, "e", 0x0, "q", 0x0, "e", 0x0, "s"
	DCB	0x0, "t", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "s", 0x0, "p"
	DCB	0x0, "e", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, ",", 0x0, " ", 0x0, "a", 0x0, "c", 0x0, "t", 0x0, "u"
	DCB	0x0, "a", 0x0, "l", 0x0, " ", 0x0, "s", 0x0, "p", 0x0, "e"
	DCB	0x0, "e", 0x0, "d", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  01a14			 AREA	 |.text|, CODE, ARM

  01a14		 |MMCSetTranSpeed| PROC

; 367  : {

  01a14		 |$LN6@MMCSetTran|
  01a14	e1a0c00d	 mov         r12, sp
  01a18	e92d0001	 stmdb       sp!, {r0}
  01a1c	e92d5000	 stmdb       sp!, {r12, lr}
  01a20	e24dd008	 sub         sp, sp, #8
  01a24		 |$M45020|

; 368  :     static DWORD CurrentSpeed = 0;
; 369  :     DWORD ActualSpeed = speed;

  01a24	e59d3010	 ldr         r3, [sp, #0x10]
  01a28	e58d3000	 str         r3, [sp]

; 370  : 
; 371  :     if (CurrentSpeed != speed)

  01a2c	e59f3048	 ldr         r3, [pc, #0x48]
  01a30	e5932000	 ldr         r2, [r3]
  01a34	e59d3010	 ldr         r3, [sp, #0x10]
  01a38	e1520003	 cmp         r2, r3
  01a3c	0a000008	 beq         |$LN1@MMCSetTran|

; 372  : 	{
; 373  :         SdhcSetClockRate(&ActualSpeed);

  01a40	e28d0000	 add         r0, sp, #0
  01a44	eb000000	 bl          SdhcSetClockRate

; 374  : 	    OALMSG(1, (TEXT("SDCARD: reqested speed %d, actual speed %d\r\n"), speed, ActualSpeed));

  01a48	e59d2000	 ldr         r2, [sp]
  01a4c	e59d1010	 ldr         r1, [sp, #0x10]
  01a50	e59f0028	 ldr         r0, [pc, #0x28]
  01a54	eb000000	 bl          NKDbgPrintfW

; 375  :         CurrentSpeed = speed;

  01a58	e59d2010	 ldr         r2, [sp, #0x10]
  01a5c	e59f3018	 ldr         r3, [pc, #0x18]
  01a60	e5832000	 str         r2, [r3]
  01a64		 |$LN1@MMCSetTran|

; 376  :     }		
; 377  :     return ActualSpeed;

  01a64	e59d3000	 ldr         r3, [sp]
  01a68	e58d3004	 str         r3, [sp, #4]

; 378  : }

  01a6c	e59d0004	 ldr         r0, [sp, #4]
  01a70	e28dd008	 add         sp, sp, #8
  01a74	e89d6000	 ldmia       sp, {sp, lr}
  01a78	e12fff1e	 bx          lr
  01a7c		 |$LN7@MMCSetTran|
  01a7c		 |$LN8@MMCSetTran|
  01a7c	00000000	 DCD         |?CurrentSpeed@?1??MMCSetTranSpeed@@9@9|
  01a80		 |$LN9@MMCSetTran|
  01a80	00000000	 DCD         |??_C@_1FK@KLGDBING@?$AAS?$AAD?$AAC?$AAA?$AAR?$AAD?$AA?3?$AA?5?$AAr?$AAe?$AAq?$AAe?$AAs?$AAt?$AAe?$AAd?$AA?5?$AAs?$AAp?$AAe?$AAe?$AAd?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AAa?$AAc?$AAt?$AAu?$AAa@|
  01a84		 |$M45021|

			 ENDP  ; |MMCSetTranSpeed|

	EXPORT	|MMCCommandResponse|
	EXPORT	|MMCSetBlockLen|

  00020			 AREA	 |.pdata|, PDATA
|$T45032| DCD	|$LN6@MMCSetBloc|
	DCD	0x40002a04
; Function compile flags: /Odtp

  01a84			 AREA	 |.text|, CODE, ARM

  01a84		 |MMCSetBlockLen| PROC

; 381  : {

  01a84		 |$LN6@MMCSetBloc|
  01a84	e1a0c00d	 mov         r12, sp
  01a88	e92d0001	 stmdb       sp!, {r0}
  01a8c	e92d5000	 stmdb       sp!, {r12, lr}
  01a90	e24dd008	 sub         sp, sp, #8
  01a94		 |$M45029|

; 382  :     MMCcmd.card_type = pDisk->d_CardType;

  01a94	e59d3010	 ldr         r3, [sp, #0x10]
  01a98	e2833010	 add         r3, r3, #0x10
  01a9c	e5932000	 ldr         r2, [r3]
  01aa0	e59f3080	 ldr         r3, [pc, #0x80]
  01aa4	e5832000	 str         r2, [r3]

; 383  :     MMCcmd.command = SET_BLOCKLEN;

  01aa8	e59f2078	 ldr         r2, [pc, #0x78]
  01aac	e3a03010	 mov         r3, #0x10
  01ab0	e5c23004	 strb        r3, [r2, #4]

; 384  :     MMCcmd.num_blocks = 1;

  01ab4	e59f206c	 ldr         r2, [pc, #0x6C]
  01ab8	e3a03001	 mov         r3, #1
  01abc	e582300c	 str         r3, [r2, #0xC]

; 385  :     MMCcmd.block_len = pDisk->d_DiskInfo.di_bytes_per_sect;

  01ac0	e59d3010	 ldr         r3, [sp, #0x10]
  01ac4	e283301c	 add         r3, r3, #0x1C
  01ac8	e5932000	 ldr         r2, [r3]
  01acc	e59f3054	 ldr         r3, [pc, #0x54]
  01ad0	e5832010	 str         r2, [r3, #0x10]

; 386  :     MMCcmd.argument = pDisk->d_DiskInfo.di_bytes_per_sect;

  01ad4	e59d3010	 ldr         r3, [sp, #0x10]
  01ad8	e283301c	 add         r3, r3, #0x1C
  01adc	e5932000	 ldr         r2, [r3]
  01ae0	e59f3040	 ldr         r3, [pc, #0x40]
  01ae4	e5832008	 str         r2, [r3, #8]

; 387  : 
; 388  :     OALMSGX(OAL_FUNC, (TEXT("SET_BLOCKLEN\r\n")));
; 389  :     if (MMCCommandResponse(&MMCcmd, 0))

  01ae8	e3a01000	 mov         r1, #0
  01aec	e59f0034	 ldr         r0, [pc, #0x34]
  01af0	eb000000	 bl          MMCCommandResponse
  01af4	e58d0004	 str         r0, [sp, #4]
  01af8	e59d3004	 ldr         r3, [sp, #4]
  01afc	e3530000	 cmp         r3, #0
  01b00	0a000002	 beq         |$LN1@MMCSetBloc|

; 390  :     {
; 391  :         OALMSGX(OAL_FUNC, (TEXT("MMCCommandResponse SET_BLOCKLEN error!\r\n")));
; 392  :         return 1;

  01b04	e3a03001	 mov         r3, #1
  01b08	e58d3000	 str         r3, [sp]
  01b0c	ea000001	 b           |$LN2@MMCSetBloc|
  01b10		 |$LN1@MMCSetBloc|

; 393  :     }
; 394  :     return 0;

  01b10	e3a03000	 mov         r3, #0
  01b14	e58d3000	 str         r3, [sp]
  01b18		 |$LN2@MMCSetBloc|

; 395  : }

  01b18	e59d0000	 ldr         r0, [sp]
  01b1c	e28dd008	 add         sp, sp, #8
  01b20	e89d6000	 ldmia       sp, {sp, lr}
  01b24	e12fff1e	 bx          lr
  01b28		 |$LN7@MMCSetBloc|
  01b28		 |$LN8@MMCSetBloc|
  01b28	00000000	 DCD         |MMCcmd|
  01b2c		 |$M45030|

			 ENDP  ; |MMCSetBlockLen|

	EXPORT	|UTIL_csd_get_sectorsize|

  00028			 AREA	 |.pdata|, PDATA
|$T45040| DCD	|$LN7@UTIL_csd_g|
	DCD	0x40001e04
; Function compile flags: /Odtp

  01b2c			 AREA	 |.text|, CODE, ARM

  01b2c		 |UTIL_csd_get_sectorsize| PROC

; 402  : {

  01b2c		 |$LN7@UTIL_csd_g|
  01b2c	e1a0c00d	 mov         r12, sp
  01b30	e92d0001	 stmdb       sp!, {r0}
  01b34	e92d5000	 stmdb       sp!, {r12, lr}
  01b38	e24dd004	 sub         sp, sp, #4
  01b3c		 |$M45037|

; 403  :     if (pMMCcmd->card_type == CARDTYPE_MMC)

  01b3c	e59d300c	 ldr         r3, [sp, #0xC]
  01b40	e5933000	 ldr         r3, [r3]
  01b44	e3530001	 cmp         r3, #1
  01b48	1a000009	 bne         |$LN2@UTIL_csd_g|

; 404  :         return 1 << pMMCcmd->csd.mmc_csd.rd_bl_len;

  01b4c	e59d300c	 ldr         r3, [sp, #0xC]
  01b50	e2833058	 add         r3, r3, #0x58
  01b54	e5933000	 ldr         r3, [r3]
  01b58	e1a03803	 mov         r3, r3, lsl #16
  01b5c	e1a02e23	 mov         r2, r3, lsr #28
  01b60	e3a03001	 mov         r3, #1
  01b64	e1a03213	 mov         r3, r3, lsl r2
  01b68	e58d3000	 str         r3, [sp]
  01b6c	ea000008	 b           |$LN3@UTIL_csd_g|

; 405  :     else

  01b70	ea000007	 b           |$LN1@UTIL_csd_g|
  01b74		 |$LN2@UTIL_csd_g|

; 406  :         return 1 << pMMCcmd->csd.sd_csd.sdrd_bl_len;

  01b74	e59d300c	 ldr         r3, [sp, #0xC]
  01b78	e2833058	 add         r3, r3, #0x58
  01b7c	e5933000	 ldr         r3, [r3]
  01b80	e1a03803	 mov         r3, r3, lsl #16
  01b84	e1a02e23	 mov         r2, r3, lsr #28
  01b88	e3a03001	 mov         r3, #1
  01b8c	e1a03213	 mov         r3, r3, lsl r2
  01b90	e58d3000	 str         r3, [sp]
  01b94		 |$LN1@UTIL_csd_g|
  01b94		 |$LN3@UTIL_csd_g|

; 407  : }

  01b94	e59d0000	 ldr         r0, [sp]
  01b98	e28dd004	 add         sp, sp, #4
  01b9c	e89d6000	 ldmia       sp, {sp, lr}
  01ba0	e12fff1e	 bx          lr
  01ba4		 |$M45038|

			 ENDP  ; |UTIL_csd_get_sectorsize|

	EXPORT	|UTIL_csd_get_devicesize|

  00030			 AREA	 |.pdata|, PDATA
|$T45046| DCD	|$LN21@UTIL_csd_g@2|
	DCD	0x4000a004
; Function compile flags: /Odtp

  01ba4			 AREA	 |.text|, CODE, ARM

  01ba4		 |UTIL_csd_get_devicesize| PROC

; 411  : {

  01ba4		 |$LN21@UTIL_csd_g@2|
  01ba4	e1a0c00d	 mov         r12, sp
  01ba8	e92d0001	 stmdb       sp!, {r0}
  01bac	e92d5000	 stmdb       sp!, {r12, lr}
  01bb0	e24dd018	 sub         sp, sp, #0x18
  01bb4		 |$M45043|

; 412  :     if (pMMCcmd->card_type == CARDTYPE_MMC)

  01bb4	e59d3020	 ldr         r3, [sp, #0x20]
  01bb8	e5933000	 ldr         r3, [r3]
  01bbc	e3530001	 cmp         r3, #1
  01bc0	1a000033	 bne         |$LN16@UTIL_csd_g@2|

; 413  :     {
; 414  :         if (UTIL_csd_get_sectorsize(pMMCcmd) == 512)

  01bc4	e59d0020	 ldr         r0, [sp, #0x20]
  01bc8	eb000000	 bl          UTIL_csd_get_sectorsize
  01bcc	e58d0004	 str         r0, [sp, #4]
  01bd0	e59d3004	 ldr         r3, [sp, #4]
  01bd4	e3530c02	 cmp         r3, #2, 24
  01bd8	1a000010	 bne         |$LN15@UTIL_csd_g@2|

; 415  :             return (pMMCcmd->csd.mmc_csd.c_size  + 1) * (1 << (pMMCcmd->csd.mmc_csd.c_size_mult  + 2));

  01bdc	e59d3020	 ldr         r3, [sp, #0x20]
  01be0	e2833058	 add         r3, r3, #0x58
  01be4	e5933000	 ldr         r3, [r3]
  01be8	e1a03a23	 mov         r3, r3, lsr #20
  01bec	e2831001	 add         r1, r3, #1
  01bf0	e59d3020	 ldr         r3, [sp, #0x20]
  01bf4	e283305c	 add         r3, r3, #0x5C
  01bf8	e5933000	 ldr         r3, [r3]
  01bfc	e1a03883	 mov         r3, r3, lsl #17
  01c00	e1a03ea3	 mov         r3, r3, lsr #29
  01c04	e2832002	 add         r2, r3, #2
  01c08	e3a03001	 mov         r3, #1
  01c0c	e1a03213	 mov         r3, r3, lsl r2
  01c10	e0030391	 mul         r3, r1, r3
  01c14	e58d3000	 str         r3, [sp]
  01c18	ea00007d	 b           |$LN17@UTIL_csd_g@2|
  01c1c	ea00001b	 b           |$LN14@UTIL_csd_g@2|
  01c20		 |$LN15@UTIL_csd_g@2|

; 416  :         else if (UTIL_csd_get_sectorsize(pMMCcmd) == 1024)

  01c20	e59d0020	 ldr         r0, [sp, #0x20]
  01c24	eb000000	 bl          UTIL_csd_get_sectorsize
  01c28	e58d0008	 str         r0, [sp, #8]
  01c2c	e59d3008	 ldr         r3, [sp, #8]
  01c30	e3530b01	 cmp         r3, #1, 22
  01c34	1a000012	 bne         |$LN13@UTIL_csd_g@2|

; 417  :             return 2 * (pMMCcmd->csd.mmc_csd.c_size  + 1) * (1 << (pMMCcmd->csd.mmc_csd.c_size_mult  + 2));

  01c38	e59d3020	 ldr         r3, [sp, #0x20]
  01c3c	e2833058	 add         r3, r3, #0x58
  01c40	e5933000	 ldr         r3, [r3]
  01c44	e1a03a23	 mov         r3, r3, lsr #20
  01c48	e2832001	 add         r2, r3, #1
  01c4c	e3a03002	 mov         r3, #2
  01c50	e0010392	 mul         r1, r2, r3
  01c54	e59d3020	 ldr         r3, [sp, #0x20]
  01c58	e283305c	 add         r3, r3, #0x5C
  01c5c	e5933000	 ldr         r3, [r3]
  01c60	e1a03883	 mov         r3, r3, lsl #17
  01c64	e1a03ea3	 mov         r3, r3, lsr #29
  01c68	e2832002	 add         r2, r3, #2
  01c6c	e3a03001	 mov         r3, #1
  01c70	e1a03213	 mov         r3, r3, lsl r2
  01c74	e0030391	 mul         r3, r1, r3
  01c78	e58d3000	 str         r3, [sp]
  01c7c	ea000064	 b           |$LN17@UTIL_csd_g@2|

; 418  :         else

  01c80	ea000002	 b           |$LN12@UTIL_csd_g@2|
  01c84		 |$LN13@UTIL_csd_g@2|

; 419  :             return 0;

  01c84	e3a03000	 mov         r3, #0
  01c88	e58d3000	 str         r3, [sp]
  01c8c	ea000060	 b           |$LN17@UTIL_csd_g@2|
  01c90		 |$LN12@UTIL_csd_g@2|
  01c90		 |$LN14@UTIL_csd_g@2|

; 420  :     }
; 421  :     else if (pMMCcmd->card_type == CARDTYPE_SD)

  01c90	ea00005f	 b           |$LN11@UTIL_csd_g@2|
  01c94		 |$LN16@UTIL_csd_g@2|
  01c94	e59d3020	 ldr         r3, [sp, #0x20]
  01c98	e5933000	 ldr         r3, [r3]
  01c9c	e3530002	 cmp         r3, #2
  01ca0	1a00004c	 bne         |$LN10@UTIL_csd_g@2|

; 422  :     {
; 423  :         if (UTIL_csd_get_sectorsize(pMMCcmd) == 512)

  01ca4	e59d0020	 ldr         r0, [sp, #0x20]
  01ca8	eb000000	 bl          UTIL_csd_get_sectorsize
  01cac	e58d000c	 str         r0, [sp, #0xC]
  01cb0	e59d300c	 ldr         r3, [sp, #0xC]
  01cb4	e3530c02	 cmp         r3, #2, 24
  01cb8	1a000010	 bne         |$LN9@UTIL_csd_g@2|

; 424  :             return (pMMCcmd->csd.sd_csd.sdc_size + 1) * (1 << (pMMCcmd->csd.sd_csd.sdc_size_mult + 2));

  01cbc	e59d3020	 ldr         r3, [sp, #0x20]
  01cc0	e2833058	 add         r3, r3, #0x58
  01cc4	e5933000	 ldr         r3, [r3]
  01cc8	e1a03a23	 mov         r3, r3, lsr #20
  01ccc	e2831001	 add         r1, r3, #1
  01cd0	e59d3020	 ldr         r3, [sp, #0x20]
  01cd4	e283305c	 add         r3, r3, #0x5C
  01cd8	e5933000	 ldr         r3, [r3]
  01cdc	e1a03883	 mov         r3, r3, lsl #17
  01ce0	e1a03ea3	 mov         r3, r3, lsr #29
  01ce4	e2832002	 add         r2, r3, #2
  01ce8	e3a03001	 mov         r3, #1
  01cec	e1a03213	 mov         r3, r3, lsl r2
  01cf0	e0030391	 mul         r3, r1, r3
  01cf4	e58d3000	 str         r3, [sp]
  01cf8	ea000045	 b           |$LN17@UTIL_csd_g@2|
  01cfc	ea000034	 b           |$LN8@UTIL_csd_g@2|
  01d00		 |$LN9@UTIL_csd_g@2|

; 425  :         else if (UTIL_csd_get_sectorsize(pMMCcmd) == 1024)

  01d00	e59d0020	 ldr         r0, [sp, #0x20]
  01d04	eb000000	 bl          UTIL_csd_get_sectorsize
  01d08	e58d0010	 str         r0, [sp, #0x10]
  01d0c	e59d3010	 ldr         r3, [sp, #0x10]
  01d10	e3530b01	 cmp         r3, #1, 22
  01d14	1a000012	 bne         |$LN7@UTIL_csd_g@2|

; 426  :             return 2 * (pMMCcmd->csd.sd_csd.sdc_size + 1) * (1 << (pMMCcmd->csd.sd_csd.sdc_size_mult + 2));

  01d18	e59d3020	 ldr         r3, [sp, #0x20]
  01d1c	e2833058	 add         r3, r3, #0x58
  01d20	e5933000	 ldr         r3, [r3]
  01d24	e1a03a23	 mov         r3, r3, lsr #20
  01d28	e2832001	 add         r2, r3, #1
  01d2c	e3a03002	 mov         r3, #2
  01d30	e0010392	 mul         r1, r2, r3
  01d34	e59d3020	 ldr         r3, [sp, #0x20]
  01d38	e283305c	 add         r3, r3, #0x5C
  01d3c	e5933000	 ldr         r3, [r3]
  01d40	e1a03883	 mov         r3, r3, lsl #17
  01d44	e1a03ea3	 mov         r3, r3, lsr #29
  01d48	e2832002	 add         r2, r3, #2
  01d4c	e3a03001	 mov         r3, #1
  01d50	e1a03213	 mov         r3, r3, lsl r2
  01d54	e0030391	 mul         r3, r1, r3
  01d58	e58d3000	 str         r3, [sp]
  01d5c	ea00002c	 b           |$LN17@UTIL_csd_g@2|
  01d60	ea00001b	 b           |$LN6@UTIL_csd_g@2|
  01d64		 |$LN7@UTIL_csd_g@2|

; 427  :         else if (UTIL_csd_get_sectorsize(pMMCcmd) == 2048)

  01d64	e59d0020	 ldr         r0, [sp, #0x20]
  01d68	eb000000	 bl          UTIL_csd_get_sectorsize
  01d6c	e58d0014	 str         r0, [sp, #0x14]
  01d70	e59d3014	 ldr         r3, [sp, #0x14]
  01d74	e3530b02	 cmp         r3, #2, 22
  01d78	1a000012	 bne         |$LN5@UTIL_csd_g@2|

; 428  :             return 4 * (pMMCcmd->csd.sd_csd.sdc_size + 1) * (1 << (pMMCcmd->csd.sd_csd.sdc_size_mult + 2));

  01d7c	e59d3020	 ldr         r3, [sp, #0x20]
  01d80	e2833058	 add         r3, r3, #0x58
  01d84	e5933000	 ldr         r3, [r3]
  01d88	e1a03a23	 mov         r3, r3, lsr #20
  01d8c	e2832001	 add         r2, r3, #1
  01d90	e3a03004	 mov         r3, #4
  01d94	e0010392	 mul         r1, r2, r3
  01d98	e59d3020	 ldr         r3, [sp, #0x20]
  01d9c	e283305c	 add         r3, r3, #0x5C
  01da0	e5933000	 ldr         r3, [r3]
  01da4	e1a03883	 mov         r3, r3, lsl #17
  01da8	e1a03ea3	 mov         r3, r3, lsr #29
  01dac	e2832002	 add         r2, r3, #2
  01db0	e3a03001	 mov         r3, #1
  01db4	e1a03213	 mov         r3, r3, lsl r2
  01db8	e0030391	 mul         r3, r1, r3
  01dbc	e58d3000	 str         r3, [sp]
  01dc0	ea000013	 b           |$LN17@UTIL_csd_g@2|

; 429  :         else

  01dc4	ea000002	 b           |$LN4@UTIL_csd_g@2|
  01dc8		 |$LN5@UTIL_csd_g@2|

; 430  :             return 0;

  01dc8	e3a03000	 mov         r3, #0
  01dcc	e58d3000	 str         r3, [sp]
  01dd0	ea00000f	 b           |$LN17@UTIL_csd_g@2|
  01dd4		 |$LN4@UTIL_csd_g@2|
  01dd4		 |$LN6@UTIL_csd_g@2|
  01dd4		 |$LN8@UTIL_csd_g@2|

; 431  :     }
; 432  :     else if (pMMCcmd->card_type == CARDTYPE_SDHC)

  01dd4	ea00000e	 b           |$LN3@UTIL_csd_g@2|
  01dd8		 |$LN10@UTIL_csd_g@2|
  01dd8	e59d3020	 ldr         r3, [sp, #0x20]
  01ddc	e5933000	 ldr         r3, [r3]
  01de0	e3530003	 cmp         r3, #3
  01de4	1a000008	 bne         |$LN2@UTIL_csd_g@2|

; 433  :     {
; 434  :         // for SDHC, c_size is in 512K units, we want it in 512 byte sectors
; 435  :         return (pMMCcmd->csd.sd_csd.sdhcc_size + 1) * 1024;

  01de8	e59d3020	 ldr         r3, [sp, #0x20]
  01dec	e2833068	 add         r3, r3, #0x68
  01df0	e5933000	 ldr         r3, [r3]
  01df4	e2832001	 add         r2, r3, #1
  01df8	e3a03b01	 mov         r3, #1, 22
  01dfc	e0030392	 mul         r3, r2, r3
  01e00	e58d3000	 str         r3, [sp]
  01e04	ea000002	 b           |$LN17@UTIL_csd_g@2|

; 436  :     }
; 437  :     else

  01e08	ea000001	 b           |$LN1@UTIL_csd_g@2|
  01e0c		 |$LN2@UTIL_csd_g@2|

; 438  :         return 0;

  01e0c	e3a03000	 mov         r3, #0
  01e10	e58d3000	 str         r3, [sp]
  01e14		 |$LN1@UTIL_csd_g@2|
  01e14		 |$LN3@UTIL_csd_g@2|
  01e14		 |$LN11@UTIL_csd_g@2|
  01e14		 |$LN17@UTIL_csd_g@2|

; 439  : }

  01e14	e59d0000	 ldr         r0, [sp]
  01e18	e28dd018	 add         sp, sp, #0x18
  01e1c	e89d6000	 ldmia       sp, {sp, lr}
  01e20	e12fff1e	 bx          lr
  01e24		 |$M45044|

			 ENDP  ; |UTIL_csd_get_devicesize|

	EXPORT	|UTIL_csd_get_tran_speed|
	IMPORT	|__rt_udiv|

  00038			 AREA	 |.pdata|, PDATA
|$T45080| DCD	|$LN57@UTIL_csd_g@3|
	DCD	0x40009304
; Function compile flags: /Odtp

  01e24			 AREA	 |.text|, CODE, ARM

  01e24		 |UTIL_csd_get_tran_speed| PROC

; 442  : {

  01e24		 |$LN57@UTIL_csd_g@3|
  01e24	e1a0c00d	 mov         r12, sp
  01e28	e92d0001	 stmdb       sp!, {r0}
  01e2c	e92d5000	 stmdb       sp!, {r12, lr}
  01e30	e24dd020	 sub         sp, sp, #0x20
  01e34		 |$M45077|

; 443  :     unsigned int temp, mant, exp;
; 444  : 
; 445  :     temp = (unsigned int)(pMMCcmd->card_type == CARDTYPE_MMC) ? pMMCcmd->csd.mmc_csd.tr_speed : pMMCcmd->csd.sd_csd.sdtr_speed;

  01e34	e59d3028	 ldr         r3, [sp, #0x28]
  01e38	e5933000	 ldr         r3, [r3]
  01e3c	e3530001	 cmp         r3, #1
  01e40	1a000002	 bne         |$LN28@UTIL_csd_g@3|
  01e44	e3a03001	 mov         r3, #1
  01e48	e58d3010	 str         r3, [sp, #0x10]
  01e4c	ea000001	 b           |$LN29@UTIL_csd_g@3|
  01e50		 |$LN28@UTIL_csd_g@3|
  01e50	e3a03000	 mov         r3, #0
  01e54	e58d3010	 str         r3, [sp, #0x10]
  01e58		 |$LN29@UTIL_csd_g@3|
  01e58	e59d3010	 ldr         r3, [sp, #0x10]
  01e5c	e3530000	 cmp         r3, #0
  01e60	0a000004	 beq         |$LN30@UTIL_csd_g@3|
  01e64	e59d3028	 ldr         r3, [sp, #0x28]
  01e68	e2833056	 add         r3, r3, #0x56
  01e6c	e5d33000	 ldrb        r3, [r3]
  01e70	e58d3014	 str         r3, [sp, #0x14]
  01e74	ea000003	 b           |$LN31@UTIL_csd_g@3|
  01e78		 |$LN30@UTIL_csd_g@3|
  01e78	e59d3028	 ldr         r3, [sp, #0x28]
  01e7c	e2833056	 add         r3, r3, #0x56
  01e80	e5d33000	 ldrb        r3, [r3]
  01e84	e58d3014	 str         r3, [sp, #0x14]
  01e88		 |$LN31@UTIL_csd_g@3|
  01e88	e59d3014	 ldr         r3, [sp, #0x14]
  01e8c	e58d3004	 str         r3, [sp, #4]

; 446  : 
; 447  :     /* get exponent factor */
; 448  :     switch(temp & 0x7)

  01e90	e59d3004	 ldr         r3, [sp, #4]
  01e94	e2033007	 and         r3, r3, #7
  01e98	e58d3018	 str         r3, [sp, #0x18]
  01e9c	e59d3018	 ldr         r3, [sp, #0x18]
  01ea0	e3530003	 cmp         r3, #3
  01ea4	8a000016	 bhi         |$LN19@UTIL_csd_g@3|
  01ea8	e59d2018	 ldr         r2, [sp, #0x18]
  01eac	e1a03102	 mov         r3, r2, lsl #2
  01eb0	e083300f	 add         r3, r3, pc
  01eb4	e5933004	 ldr         r3, [r3, #4]
  01eb8	e08ff003	 add         pc, pc, r3
  01ebc		 |$LN33@UTIL_csd_g@3|
  01ebc		 |$LN32@UTIL_csd_g@3|
  01ebc		 |$LN34@UTIL_csd_g@3|
  01ebc	0000000c	 DCD         0xc
  01ec0		 |$LN35@UTIL_csd_g@3|
  01ec0	0000001c	 DCD         0x1c
  01ec4		 |$LN36@UTIL_csd_g@3|
  01ec4	0000002c	 DCD         0x2c
  01ec8		 |$LN37@UTIL_csd_g@3|
  01ec8	00000038	 DCD         0x38
  01ecc		 |$LN23@UTIL_csd_g@3|

; 449  :     {
; 450  :         case 0:
; 451  :             exp = 100000;       // 100khz

  01ecc	e3a03b61	 mov         r3, #0x61, 22
  01ed0	e3833e2a	 orr         r3, r3, #0x2A, 28
  01ed4	e58d3000	 str         r3, [sp]

; 452  :             break;

  01ed8	ea00000b	 b           |$LN24@UTIL_csd_g@3|
  01edc		 |$LN22@UTIL_csd_g@3|

; 453  :         case 1:
; 454  :             exp = 1000000;      // 1MHz

  01edc	e3a0393d	 mov         r3, #0x3D, 18
  01ee0	e3833d09	 orr         r3, r3, #9, 26
  01ee4	e58d3000	 str         r3, [sp]

; 455  :             break;

  01ee8	ea000007	 b           |$LN24@UTIL_csd_g@3|
  01eec		 |$LN21@UTIL_csd_g@3|

; 456  :         case 2:
; 457  :             exp = 10000000;     // 10MHz

  01eec	e59f3178	 ldr         r3, [pc, #0x178]
  01ef0	e58d3000	 str         r3, [sp]

; 458  :             break;

  01ef4	ea000004	 b           |$LN24@UTIL_csd_g@3|
  01ef8		 |$LN20@UTIL_csd_g@3|

; 459  :         case 3:
; 460  :             exp = 100000000;    // 100MHz

  01ef8	e59f3168	 ldr         r3, [pc, #0x168]
  01efc	e58d3000	 str         r3, [sp]

; 461  :             break;

  01f00	ea000001	 b           |$LN24@UTIL_csd_g@3|
  01f04		 |$LN19@UTIL_csd_g@3|

; 462  :         default:
; 463  :             exp = 0;

  01f04	e3a03000	 mov         r3, #0
  01f08	e58d3000	 str         r3, [sp]
  01f0c		 |$LN24@UTIL_csd_g@3|

; 464  :     }
; 465  : 
; 466  :     /* get mantissa factor (10x so we can use integer math) */
; 467  :     switch((temp >> 3) & 0xf)

  01f0c	e59d3004	 ldr         r3, [sp, #4]
  01f10	e1a03c83	 mov         r3, r3, lsl #25
  01f14	e1a03e23	 mov         r3, r3, lsr #28
  01f18	e58d301c	 str         r3, [sp, #0x1C]
  01f1c	e59d301c	 ldr         r3, [sp, #0x1C]
  01f20	e2433001	 sub         r3, r3, #1
  01f24	e58d301c	 str         r3, [sp, #0x1C]
  01f28	e59d301c	 ldr         r3, [sp, #0x1C]
  01f2c	e353000e	 cmp         r3, #0xE
  01f30	8a000040	 bhi         |$LN1@UTIL_csd_g@3|
  01f34	e59d201c	 ldr         r2, [sp, #0x1C]
  01f38	e1a03102	 mov         r3, r2, lsl #2
  01f3c	e083300f	 add         r3, r3, pc
  01f40	e5933004	 ldr         r3, [r3, #4]
  01f44	e08ff003	 add         pc, pc, r3
  01f48		 |$LN39@UTIL_csd_g@3|
  01f48		 |$LN38@UTIL_csd_g@3|
  01f48		 |$LN40@UTIL_csd_g@3|
  01f48	00000038	 DCD         0x38
  01f4c		 |$LN41@UTIL_csd_g@3|
  01f4c	00000044	 DCD         0x44
  01f50		 |$LN42@UTIL_csd_g@3|
  01f50	00000050	 DCD         0x50
  01f54		 |$LN43@UTIL_csd_g@3|
  01f54	0000005c	 DCD         0x5c
  01f58		 |$LN44@UTIL_csd_g@3|
  01f58	00000068	 DCD         0x68
  01f5c		 |$LN45@UTIL_csd_g@3|
  01f5c	00000074	 DCD         0x74
  01f60		 |$LN46@UTIL_csd_g@3|
  01f60	00000080	 DCD         0x80
  01f64		 |$LN47@UTIL_csd_g@3|
  01f64	0000008c	 DCD         0x8c
  01f68		 |$LN48@UTIL_csd_g@3|
  01f68	00000098	 DCD         0x98
  01f6c		 |$LN49@UTIL_csd_g@3|
  01f6c	000000a4	 DCD         0xa4
  01f70		 |$LN50@UTIL_csd_g@3|
  01f70	000000b0	 DCD         0xb0
  01f74		 |$LN51@UTIL_csd_g@3|
  01f74	000000bc	 DCD         0xbc
  01f78		 |$LN52@UTIL_csd_g@3|
  01f78	000000c8	 DCD         0xc8
  01f7c		 |$LN53@UTIL_csd_g@3|
  01f7c	000000d4	 DCD         0xd4
  01f80		 |$LN54@UTIL_csd_g@3|
  01f80	000000e0	 DCD         0xe0
  01f84		 |$LN16@UTIL_csd_g@3|

; 468  :     {
; 469  :             case 1:
; 470  :                 mant = 10;      // 1.0

  01f84	e3a0300a	 mov         r3, #0xA
  01f88	e58d3008	 str         r3, [sp, #8]

; 471  :                 break;

  01f8c	ea00002b	 b           |$LN17@UTIL_csd_g@3|
  01f90		 |$LN15@UTIL_csd_g@3|

; 472  :             case 2:
; 473  :                 mant = 12;      // 1.2

  01f90	e3a0300c	 mov         r3, #0xC
  01f94	e58d3008	 str         r3, [sp, #8]

; 474  :                 break;

  01f98	ea000028	 b           |$LN17@UTIL_csd_g@3|
  01f9c		 |$LN14@UTIL_csd_g@3|

; 475  :             case 3:
; 476  :                 mant = 13;      // 1.3

  01f9c	e3a0300d	 mov         r3, #0xD
  01fa0	e58d3008	 str         r3, [sp, #8]

; 477  :                 break;

  01fa4	ea000025	 b           |$LN17@UTIL_csd_g@3|
  01fa8		 |$LN13@UTIL_csd_g@3|

; 478  :             case 4:
; 479  :                 mant = 15;      // 1.5

  01fa8	e3a0300f	 mov         r3, #0xF
  01fac	e58d3008	 str         r3, [sp, #8]

; 480  :                 break;

  01fb0	ea000022	 b           |$LN17@UTIL_csd_g@3|
  01fb4		 |$LN12@UTIL_csd_g@3|

; 481  :             case 5:
; 482  :                 mant = 20;      // 2.0

  01fb4	e3a03014	 mov         r3, #0x14
  01fb8	e58d3008	 str         r3, [sp, #8]

; 483  :                 break;

  01fbc	ea00001f	 b           |$LN17@UTIL_csd_g@3|
  01fc0		 |$LN11@UTIL_csd_g@3|

; 484  :             case 6:
; 485  :                 mant = 25;      // 2.5

  01fc0	e3a03019	 mov         r3, #0x19
  01fc4	e58d3008	 str         r3, [sp, #8]

; 486  :                 break;

  01fc8	ea00001c	 b           |$LN17@UTIL_csd_g@3|
  01fcc		 |$LN10@UTIL_csd_g@3|

; 487  :             case 7:
; 488  :                 mant = 30;      // 3.0

  01fcc	e3a0301e	 mov         r3, #0x1E
  01fd0	e58d3008	 str         r3, [sp, #8]

; 489  :                 break;

  01fd4	ea000019	 b           |$LN17@UTIL_csd_g@3|
  01fd8		 |$LN9@UTIL_csd_g@3|

; 490  :             case 8:
; 491  :                 mant = 35;      // 3.5

  01fd8	e3a03023	 mov         r3, #0x23
  01fdc	e58d3008	 str         r3, [sp, #8]

; 492  :                 break;

  01fe0	ea000016	 b           |$LN17@UTIL_csd_g@3|
  01fe4		 |$LN8@UTIL_csd_g@3|

; 493  :             case 9:
; 494  :                 mant = 40;      // 4.0

  01fe4	e3a03028	 mov         r3, #0x28
  01fe8	e58d3008	 str         r3, [sp, #8]

; 495  :                 break;

  01fec	ea000013	 b           |$LN17@UTIL_csd_g@3|
  01ff0		 |$LN7@UTIL_csd_g@3|

; 496  :             case 0xa:
; 497  :                 mant = 45;      // 4.5

  01ff0	e3a0302d	 mov         r3, #0x2D
  01ff4	e58d3008	 str         r3, [sp, #8]

; 498  :                 break;

  01ff8	ea000010	 b           |$LN17@UTIL_csd_g@3|
  01ffc		 |$LN6@UTIL_csd_g@3|

; 499  :             case 0xb:
; 500  :                 mant = 50;      // 5.0

  01ffc	e3a03032	 mov         r3, #0x32
  02000	e58d3008	 str         r3, [sp, #8]

; 501  :                 break;

  02004	ea00000d	 b           |$LN17@UTIL_csd_g@3|
  02008		 |$LN5@UTIL_csd_g@3|

; 502  :             case 0xc:
; 503  :                 mant = 55;      // 5.5

  02008	e3a03037	 mov         r3, #0x37
  0200c	e58d3008	 str         r3, [sp, #8]

; 504  :                 break;

  02010	ea00000a	 b           |$LN17@UTIL_csd_g@3|
  02014		 |$LN4@UTIL_csd_g@3|

; 505  :             case 0xd:
; 506  :                 mant = 60;      // 6.0

  02014	e3a0303c	 mov         r3, #0x3C
  02018	e58d3008	 str         r3, [sp, #8]

; 507  :                 break;

  0201c	ea000007	 b           |$LN17@UTIL_csd_g@3|
  02020		 |$LN3@UTIL_csd_g@3|

; 508  :             case 0xe:
; 509  :                 mant = 70;      // 7.0

  02020	e3a03046	 mov         r3, #0x46
  02024	e58d3008	 str         r3, [sp, #8]

; 510  :                 break;

  02028	ea000004	 b           |$LN17@UTIL_csd_g@3|
  0202c		 |$LN2@UTIL_csd_g@3|

; 511  :             case 0xf:
; 512  :                 mant = 80;      // 8.0

  0202c	e3a03050	 mov         r3, #0x50
  02030	e58d3008	 str         r3, [sp, #8]

; 513  :                 break;

  02034	ea000001	 b           |$LN17@UTIL_csd_g@3|
  02038		 |$LN1@UTIL_csd_g@3|

; 514  :             default:
; 515  :                 mant = 0;

  02038	e3a03000	 mov         r3, #0
  0203c	e58d3008	 str         r3, [sp, #8]
  02040		 |$LN17@UTIL_csd_g@3|

; 516  :     }
; 517  : 
; 518  :     return (exp * mant)/10;

  02040	e59d2000	 ldr         r2, [sp]
  02044	e59d3008	 ldr         r3, [sp, #8]
  02048	e0010392	 mul         r1, r2, r3
  0204c	e3a0000a	 mov         r0, #0xA
  02050	eb000000	 bl          __rt_udiv
  02054	e58d000c	 str         r0, [sp, #0xC]

; 519  : }

  02058	e59d000c	 ldr         r0, [sp, #0xC]
  0205c	e28dd020	 add         sp, sp, #0x20
  02060	e89d6000	 ldmia       sp, {sp, lr}
  02064	e12fff1e	 bx          lr
  02068		 |$LN58@UTIL_csd_g@3|
  02068		 |$LN59@UTIL_csd_g@3|
  02068	05f5e100	 DCD         0x5f5e100
  0206c		 |$LN60@UTIL_csd_g@3|
  0206c	00989680	 DCD         0x989680
  02070		 |$M45078|

			 ENDP  ; |UTIL_csd_get_tran_speed|

	EXPORT	|MMCSetMMCState|

  00040			 AREA	 |.pdata|, PDATA
|$T45088| DCD	|$LN5@MMCSetMMCS|
	DCD	0x40000903
; Function compile flags: /Odtp

  02070			 AREA	 |.text|, CODE, ARM

  02070		 |MMCSetMMCState| PROC

; 522  : {

  02070		 |$LN5@MMCSetMMCS|
  02070	e1a0c00d	 mov         r12, sp
  02074	e92d0003	 stmdb       sp!, {r0, r1}
  02078	e92d5000	 stmdb       sp!, {r12, lr}
  0207c		 |$M45085|

; 523  :     pDisk->d_MMCState = state;

  0207c	e59d3008	 ldr         r3, [sp, #8]
  02080	e283200c	 add         r2, r3, #0xC
  02084	e59d300c	 ldr         r3, [sp, #0xC]
  02088	e5823000	 str         r3, [r2]

; 524  : }

  0208c	e89d6000	 ldmia       sp, {sp, lr}
  02090	e12fff1e	 bx          lr
  02094		 |$M45086|

			 ENDP  ; |MMCSetMMCState|

	EXPORT	|??_C@_1FE@BCNJBLJK@?$AAS?$AAD?$AAM?$AAe?$AAm?$AA?3?$AA?5?$AAc?$AAa?$AAr?$AAd?$AA?5?$AAr?$AAd?$AAy?$AA?5?$AAb?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?0?$AA?5?$AAs?$AAt?$AAa?$AAt?$AAu?$AAs@| [ DATA ] ; `string'
	EXPORT	|MMCWaitForReady|
	IMPORT	|OALStall|
	IMPORT	|dpCurSettings|
	IMPORT	|OALGetTickCount|

  00048			 AREA	 |.pdata|, PDATA
|$T45096| DCD	|$LN15@MMCWaitFor|
	DCD	0x40006f04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FE@BCNJBLJK@?$AAS?$AAD?$AAM?$AAe?$AAm?$AA?3?$AA?5?$AAc?$AAa?$AAr?$AAd?$AA?5?$AAr?$AAd?$AAy?$AA?5?$AAb?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?0?$AA?5?$AAs?$AAt?$AAa?$AAt?$AAu?$AAs@| DCB "S"
	DCB	0x0, "D", 0x0, "M", 0x0, "e", 0x0, "m", 0x0, ":", 0x0, " "
	DCB	0x0, "c", 0x0, "a", 0x0, "r", 0x0, "d", 0x0, " ", 0x0, "r"
	DCB	0x0, "d", 0x0, "y", 0x0, " ", 0x0, "b", 0x0, "T", 0x0, "i"
	DCB	0x0, "m", 0x0, "e", 0x0, "o", 0x0, "u", 0x0, "t", 0x0, ","
	DCB	0x0, " ", 0x0, "s", 0x0, "t", 0x0, "a", 0x0, "t", 0x0, "u"
	DCB	0x0, "s", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "X", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  02094			 AREA	 |.text|, CODE, ARM

  02094		 |MMCWaitForReady| PROC

; 527  : {

  02094		 |$LN15@MMCWaitFor|
  02094	e1a0c00d	 mov         r12, sp
  02098	e92d0001	 stmdb       sp!, {r0}
  0209c	e92d5000	 stmdb       sp!, {r12, lr}
  020a0	e24dd024	 sub         sp, sp, #0x24
  020a4		 |$M45093|

; 528  :     UINT32 StartTime;
; 529  :     int card_state;
; 530  :     int bTimeout;
; 531  : 
; 532  :     MMCcmd.card_type = pDisk->d_CardType;

  020a4	e59d302c	 ldr         r3, [sp, #0x2C]
  020a8	e2833010	 add         r3, r3, #0x10
  020ac	e5932000	 ldr         r2, [r3]
  020b0	e59f318c	 ldr         r3, [pc, #0x18C]
  020b4	e5832000	 str         r2, [r3]

; 533  :     MMCcmd.command = SEND_STATUS;

  020b8	e59f2184	 ldr         r2, [pc, #0x184]
  020bc	e3a0300d	 mov         r3, #0xD
  020c0	e5c23004	 strb        r3, [r2, #4]

; 534  :     MMCcmd.argument = (pDisk->d_RelAddress)<<16;

  020c4	e59d302c	 ldr         r3, [sp, #0x2C]
  020c8	e2833014	 add         r3, r3, #0x14
  020cc	e5933000	 ldr         r3, [r3]
  020d0	e1a02803	 mov         r2, r3, lsl #16
  020d4	e59f3168	 ldr         r3, [pc, #0x168]
  020d8	e5832008	 str         r2, [r3, #8]

; 535  :     MMCcmd.num_blocks = 1;

  020dc	e59f2160	 ldr         r2, [pc, #0x160]
  020e0	e3a03001	 mov         r3, #1
  020e4	e582300c	 str         r3, [r2, #0xC]

; 536  :     MMCcmd.block_len = 512;

  020e8	e59f2154	 ldr         r2, [pc, #0x154]
  020ec	e3a03c02	 mov         r3, #2, 24
  020f0	e5823010	 str         r3, [r2, #0x10]

; 537  : 
; 538  :     OALMSGX(OAL_FUNC, (TEXT("SEND_STATUS\r\n")));
; 539  :     if (MMCCommandResponse(&MMCcmd, 0)) 

  020f4	e3a01000	 mov         r1, #0
  020f8	e59f0144	 ldr         r0, [pc, #0x144]
  020fc	eb000000	 bl          MMCCommandResponse
  02100	e58d0010	 str         r0, [sp, #0x10]
  02104	e59d3010	 ldr         r3, [sp, #0x10]
  02108	e3530000	 cmp         r3, #0
  0210c	0a000002	 beq         |$LN8@MMCWaitFor|

; 540  :         return 1;

  02110	e3a03001	 mov         r3, #1
  02114	e58d300c	 str         r3, [sp, #0xC]
  02118	ea000045	 b           |$LN9@MMCWaitFor|
  0211c		 |$LN8@MMCWaitFor|

; 541  : 
; 542  :     StartTime = OALGetTickCount();

  0211c	eb000000	 bl          OALGetTickCount
  02120	e58d0014	 str         r0, [sp, #0x14]
  02124	e59d3014	 ldr         r3, [sp, #0x14]
  02128	e58d3008	 str         r3, [sp, #8]

; 543  :     card_state = MMC_STATUS_STATE(MMCcmd.status);

  0212c	e59f3110	 ldr         r3, [pc, #0x110]
  02130	e5933014	 ldr         r3, [r3, #0x14]
  02134	e1a03983	 mov         r3, r3, lsl #19
  02138	e1a03e23	 mov         r3, r3, lsr #28
  0213c	e58d3004	 str         r3, [sp, #4]

; 544  :     bTimeout = FALSE;

  02140	e3a03000	 mov         r3, #0
  02144	e58d3000	 str         r3, [sp]
  02148		 |$LN7@MMCWaitFor|

; 545  : 
; 546  :     // make sure the card is ready to accept data and we are in the proper
; 547  :     // state.  If an error occured on the last transaction, the card might still
; 548  :     // be in the prg state, etc.
; 549  :         
; 550  :     while ( (!(MMC_STATUS_READY(MMCcmd.status))) ||
; 551  :            ( (card_state != MMC_STATUS_STATE_STBY) && (card_state != MMC_STATUS_STATE_TRAN) )   
; 552  :          )

  02148	e59f30f4	 ldr         r3, [pc, #0xF4]
  0214c	e5933014	 ldr         r3, [r3, #0x14]
  02150	e3130c01	 tst         r3, #1, 24
  02154	0a000005	 beq         |$LN5@MMCWaitFor|
  02158	e59d3004	 ldr         r3, [sp, #4]
  0215c	e3530003	 cmp         r3, #3
  02160	0a000031	 beq         |$LN6@MMCWaitFor|
  02164	e59d3004	 ldr         r3, [sp, #4]
  02168	e3530004	 cmp         r3, #4
  0216c	0a00002e	 beq         |$LN6@MMCWaitFor|
  02170		 |$LN5@MMCWaitFor|

; 553  :     {
; 554  :         if (bTimeout)

  02170	e59d3000	 ldr         r3, [sp]
  02174	e3530000	 cmp         r3, #0
  02178	0a00000f	 beq         |$LN4@MMCWaitFor|

; 555  :         {
; 556  :             OALMSG(OAL_ERROR, (TEXT("SDMem: card rdy bTimeout, status = 0x%X\r\n"), MMCcmd.status));

  0217c	e59f30c8	 ldr         r3, [pc, #0xC8]
  02180	e5933440	 ldr         r3, [r3, #0x440]
  02184	e3130001	 tst         r3, #1
  02188	0a000006	 beq         |$LN11@MMCWaitFor|
  0218c	e59f30b0	 ldr         r3, [pc, #0xB0]
  02190	e5931014	 ldr         r1, [r3, #0x14]
  02194	e59f00ac	 ldr         r0, [pc, #0xAC]
  02198	eb000000	 bl          NKDbgPrintfW
  0219c	e3a03001	 mov         r3, #1
  021a0	e58d3018	 str         r3, [sp, #0x18]
  021a4	ea000001	 b           |$LN12@MMCWaitFor|
  021a8		 |$LN11@MMCWaitFor|
  021a8	e3a03000	 mov         r3, #0
  021ac	e58d3018	 str         r3, [sp, #0x18]
  021b0		 |$LN12@MMCWaitFor|

; 557  :             return 1;

  021b0	e3a03001	 mov         r3, #1
  021b4	e58d300c	 str         r3, [sp, #0xC]
  021b8	ea00001d	 b           |$LN9@MMCWaitFor|
  021bc		 |$LN4@MMCWaitFor|

; 558  :         }
; 559  : 
; 560  :         if ( (card_state != MMC_STATUS_STATE_STBY) && (card_state != MMC_STATUS_STATE_TRAN) )
; 561  :         {
; 562  :             OALMSGX(OAL_FUNC, (TEXT("SDMem: wait for card state = %i\r\n"), card_state));
; 563  :             OALMSGX(OAL_FUNC, (TEXT("SDMem: MMCcmd.status = 0x%X\r\n"), MMCcmd.status));
; 564  :         }
; 565  :         
; 566  :         OALMSGX(OAL_FUNC, (TEXT("SEND_STATUS\r\n")));
; 567  :         if (MMCCommandResponse(&MMCcmd, 0)) 

  021bc	e3a01000	 mov         r1, #0
  021c0	e59f007c	 ldr         r0, [pc, #0x7C]
  021c4	eb000000	 bl          MMCCommandResponse
  021c8	e58d001c	 str         r0, [sp, #0x1C]
  021cc	e59d301c	 ldr         r3, [sp, #0x1C]
  021d0	e3530000	 cmp         r3, #0
  021d4	0a000002	 beq         |$LN2@MMCWaitFor|

; 568  :             return 1;

  021d8	e3a03001	 mov         r3, #1
  021dc	e58d300c	 str         r3, [sp, #0xC]
  021e0	ea000013	 b           |$LN9@MMCWaitFor|
  021e4		 |$LN2@MMCWaitFor|

; 569  : 
; 570  :         card_state = MMC_STATUS_STATE(MMCcmd.status);

  021e4	e59f3058	 ldr         r3, [pc, #0x58]
  021e8	e5933014	 ldr         r3, [r3, #0x14]
  021ec	e1a03983	 mov         r3, r3, lsl #19
  021f0	e1a03e23	 mov         r3, r3, lsr #28
  021f4	e58d3004	 str         r3, [sp, #4]

; 571  : 
; 572  :         if (OALGetTickCount() - StartTime > 1000)

  021f8	eb000000	 bl          OALGetTickCount
  021fc	e58d0020	 str         r0, [sp, #0x20]
  02200	e59d2020	 ldr         r2, [sp, #0x20]
  02204	e59d3008	 ldr         r3, [sp, #8]
  02208	e0423003	 sub         r3, r2, r3
  0220c	e3530ffa	 cmp         r3, #0xFA, 30
  02210	9a000001	 bls         |$LN1@MMCWaitFor|

; 573  :             bTimeout = TRUE;

  02214	e3a03001	 mov         r3, #1
  02218	e58d3000	 str         r3, [sp]
  0221c		 |$LN1@MMCWaitFor|

; 574  : 
; 575  :         OALStall(10 * 1000);

  0221c	e3a00c27	 mov         r0, #0x27, 24
  02220	e3800010	 orr         r0, r0, #0x10
  02224	eb000000	 bl          OALStall

; 576  :     }

  02228	eaffffc6	 b           |$LN7@MMCWaitFor|
  0222c		 |$LN6@MMCWaitFor|

; 577  :     
; 578  :     return 0;

  0222c	e3a03000	 mov         r3, #0
  02230	e58d300c	 str         r3, [sp, #0xC]
  02234		 |$LN9@MMCWaitFor|

; 579  : }

  02234	e59d000c	 ldr         r0, [sp, #0xC]
  02238	e28dd024	 add         sp, sp, #0x24
  0223c	e89d6000	 ldmia       sp, {sp, lr}
  02240	e12fff1e	 bx          lr
  02244		 |$LN16@MMCWaitFor|
  02244		 |$LN17@MMCWaitFor|
  02244	00000000	 DCD         |MMCcmd|
  02248		 |$LN18@MMCWaitFor|
  02248	00000000	 DCD         |??_C@_1FE@BCNJBLJK@?$AAS?$AAD?$AAM?$AAe?$AAm?$AA?3?$AA?5?$AAc?$AAa?$AAr?$AAd?$AA?5?$AAr?$AAd?$AAy?$AA?5?$AAb?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?0?$AA?5?$AAs?$AAt?$AAa?$AAt?$AAu?$AAs@|
  0224c		 |$LN19@MMCWaitFor|
  0224c	00000000	 DCD         |dpCurSettings|
  02250		 |$M45094|

			 ENDP  ; |MMCWaitForReady|

	EXPORT	|??_C@_1DG@LHNGMEJK@?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAm?$AAu?$AAl?$AAt?$AAi?$AA?5?$AAs?$AAe?$AAc?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IM@NDHBECDO@?$AAM?$AAM?$AAC?$AAR?$AAe?$AAa?$AAd?$AAM?$AAu?$AAl?$AAt?$AAi?$AAS?$AAe?$AAc?$AAt?$AAo?$AAr?$AAs?$AA?3?$AA?5?$AAM?$AAM?$AAC?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAR@| [ DATA ] ; `string'
	EXPORT	|??_C@_1JA@ILPGFCNI@?$AAM?$AAM?$AAC?$AAR?$AAe?$AAa?$AAd?$AAM?$AAu?$AAl?$AAt?$AAi?$AAS?$AAe?$AAc?$AAt?$AAo?$AAr?$AAs?$AA?3?$AA?5?$AAM?$AAM?$AAC?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAR@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FK@HAPCNFMM@?$AAM?$AAM?$AAC?$AAR?$AAe?$AAa?$AAd?$AAM?$AAu?$AAl?$AAt?$AAi?$AAS?$AAe?$AAc?$AAt?$AAo?$AAr?$AAs?$AA?3?$AA?5?$AAM?$AAM?$AAC?$AAW?$AAa?$AAi?$AAt?$AAF?$AAo?$AAr?$AAR@| [ DATA ] ; `string'
	EXPORT	|MMCReadMultiSectors|

  00050			 AREA	 |.pdata|, PDATA
|$T45114| DCD	|$LN21@MMCReadMul|
	DCD	0x4000a204

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DG@LHNGMEJK@?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAm?$AAu?$AAl?$AAt?$AAi?$AA?5?$AAs?$AAe?$AAc?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?$AN?$AA?6?$AA?$AA@| DCB "r"
	DCB	0x0, "e", 0x0, "a", 0x0, "d", 0x0, " ", 0x0, "m", 0x0, "u"
	DCB	0x0, "l", 0x0, "t", 0x0, "i", 0x0, " ", 0x0, "s", 0x0, "e"
	DCB	0x0, "c", 0x0, "t", 0x0, "o", 0x0, "r", 0x0, "s", 0x0, " "
	DCB	0x0, "e", 0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IM@NDHBECDO@?$AAM?$AAM?$AAC?$AAR?$AAe?$AAa?$AAd?$AAM?$AAu?$AAl?$AAt?$AAi?$AAS?$AAe?$AAc?$AAt?$AAo?$AAr?$AAs?$AA?3?$AA?5?$AAM?$AAM?$AAC?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAR@| DCB "M"
	DCB	0x0, "M", 0x0, "C", 0x0, "R", 0x0, "e", 0x0, "a", 0x0, "d"
	DCB	0x0, "M", 0x0, "u", 0x0, "l", 0x0, "t", 0x0, "i", 0x0, "S"
	DCB	0x0, "e", 0x0, "c", 0x0, "t", 0x0, "o", 0x0, "r", 0x0, "s"
	DCB	0x0, ":", 0x0, " ", 0x0, "M", 0x0, "M", 0x0, "C", 0x0, "C"
	DCB	0x0, "o", 0x0, "m", 0x0, "m", 0x0, "a", 0x0, "n", 0x0, "d"
	DCB	0x0, "R", 0x0, "e", 0x0, "s", 0x0, "p", 0x0, "o", 0x0, "n"
	DCB	0x0, "s", 0x0, "e", 0x0, " ", 0x0, "e", 0x0, "r", 0x0, "r"
	DCB	0x0, "o", 0x0, "r", 0x0, " ", 0x0, "o", 0x0, "n", 0x0, " "
	DCB	0x0, "S", 0x0, "T", 0x0, "O", 0x0, "P", 0x0, "_", 0x0, "T"
	DCB	0x0, "R", 0x0, "A", 0x0, "N", 0x0, "S", 0x0, "M", 0x0, "I"
	DCB	0x0, "S", 0x0, "S", 0x0, "I", 0x0, "O", 0x0, "N", 0x0, "!"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JA@ILPGFCNI@?$AAM?$AAM?$AAC?$AAR?$AAe?$AAa?$AAd?$AAM?$AAu?$AAl?$AAt?$AAi?$AAS?$AAe?$AAc?$AAt?$AAo?$AAr?$AAs?$AA?3?$AA?5?$AAM?$AAM?$AAC?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAR@| DCB "M"
	DCB	0x0, "M", 0x0, "C", 0x0, "R", 0x0, "e", 0x0, "a", 0x0, "d"
	DCB	0x0, "M", 0x0, "u", 0x0, "l", 0x0, "t", 0x0, "i", 0x0, "S"
	DCB	0x0, "e", 0x0, "c", 0x0, "t", 0x0, "o", 0x0, "r", 0x0, "s"
	DCB	0x0, ":", 0x0, " ", 0x0, "M", 0x0, "M", 0x0, "C", 0x0, "C"
	DCB	0x0, "o", 0x0, "m", 0x0, "m", 0x0, "a", 0x0, "n", 0x0, "d"
	DCB	0x0, "R", 0x0, "e", 0x0, "s", 0x0, "p", 0x0, "o", 0x0, "n"
	DCB	0x0, "s", 0x0, "e", 0x0, " ", 0x0, "e", 0x0, "r", 0x0, "r"
	DCB	0x0, "o", 0x0, "r", 0x0, " ", 0x0, "o", 0x0, "n", 0x0, " "
	DCB	0x0, "R", 0x0, "E", 0x0, "A", 0x0, "D", 0x0, "_", 0x0, "M"
	DCB	0x0, "U", 0x0, "L", 0x0, "T", 0x0, "I", 0x0, "P", 0x0, "L"
	DCB	0x0, "E", 0x0, "_", 0x0, "B", 0x0, "L", 0x0, "O", 0x0, "C"
	DCB	0x0, "K", 0x0, "!", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FK@HAPCNFMM@?$AAM?$AAM?$AAC?$AAR?$AAe?$AAa?$AAd?$AAM?$AAu?$AAl?$AAt?$AAi?$AAS?$AAe?$AAc?$AAt?$AAo?$AAr?$AAs?$AA?3?$AA?5?$AAM?$AAM?$AAC?$AAW?$AAa?$AAi?$AAt?$AAF?$AAo?$AAr?$AAR@| DCB "M"
	DCB	0x0, "M", 0x0, "C", 0x0, "R", 0x0, "e", 0x0, "a", 0x0, "d"
	DCB	0x0, "M", 0x0, "u", 0x0, "l", 0x0, "t", 0x0, "i", 0x0, "S"
	DCB	0x0, "e", 0x0, "c", 0x0, "t", 0x0, "o", 0x0, "r", 0x0, "s"
	DCB	0x0, ":", 0x0, " ", 0x0, "M", 0x0, "M", 0x0, "C", 0x0, "W"
	DCB	0x0, "a", 0x0, "i", 0x0, "t", 0x0, "F", 0x0, "o", 0x0, "r"
	DCB	0x0, "R", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, "y", 0x0, " "
	DCB	0x0, "e", 0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  02250			 AREA	 |.text|, CODE, ARM

  02250		 |MMCReadMultiSectors| PROC

; 583  : {

  02250		 |$LN21@MMCReadMul|
  02250	e1a0c00d	 mov         r12, sp
  02254	e92d000f	 stmdb       sp!, {r0 - r3}
  02258	e92d5000	 stmdb       sp!, {r12, lr}
  0225c	e24dd024	 sub         sp, sp, #0x24
  02260		 |$M45111|

; 584  :     DWORD Status;
; 585  : 
; 586  :     // Make sure we don't access beyond end of disk
; 587  :     if ((LogicalSector + numSectors) >= pDisk->d_DiskInfo.di_total_sectors)

  02260	e1dd23b8	 ldrh        r2, [sp, #0x38]
  02264	e59d3030	 ldr         r3, [sp, #0x30]
  02268	e0832002	 add         r2, r3, r2
  0226c	e59d302c	 ldr         r3, [sp, #0x2C]
  02270	e2833018	 add         r3, r3, #0x18
  02274	e5933000	 ldr         r3, [r3]
  02278	e1520003	 cmp         r2, r3
  0227c	3a000002	 bcc         |$LN8@MMCReadMul|

; 588  :     {
; 589  :         Status = ERROR_INVALID_PARAMETER;

  02280	e3a03057	 mov         r3, #0x57
  02284	e58d3000	 str         r3, [sp]

; 590  :         OALMSGX(OAL_FUNC, (TEXT("MMCReadMultiSectorsExit: ERROR_INVALID_PARAMETER\r\n")));
; 591  :         goto MMCReadMultiSectorsExit;

  02288	ea000078	 b           |$MMCReadMultiSectorsExit$44603|
  0228c		 |$LN8@MMCReadMul|

; 592  :     }
; 593  :     
; 594  :     if (pDisk->d_DiskCardState != STATE_OPENED && pDisk->d_DiskCardState != STATE_CLOSED)

  0228c	e59d302c	 ldr         r3, [sp, #0x2C]
  02290	e2833008	 add         r3, r3, #8
  02294	e5933000	 ldr         r3, [r3]
  02298	e3530003	 cmp         r3, #3
  0229c	0a000007	 beq         |$LN7@MMCReadMul|
  022a0	e59d302c	 ldr         r3, [sp, #0x2C]
  022a4	e2833008	 add         r3, r3, #8
  022a8	e5933000	 ldr         r3, [r3]
  022ac	e3530002	 cmp         r3, #2
  022b0	0a000002	 beq         |$LN7@MMCReadMul|

; 595  :     {
; 596  :         Status = MMCREAD_FAILURE;

  022b4	e3a03001	 mov         r3, #1
  022b8	e58d3000	 str         r3, [sp]

; 597  :         OALMSGX(OAL_FUNC, (TEXT("MMCReadMultiSectorsExit: incorrect disk state\r\n")));
; 598  :         goto MMCReadMultiSectorsExit;

  022bc	ea00006b	 b           |$MMCReadMultiSectorsExit$44603|
  022c0		 |$LN7@MMCReadMul|

; 599  :     }
; 600  : 
; 601  :     if (MMCWaitForReady(pDisk))

  022c0	e59d002c	 ldr         r0, [sp, #0x2C]
  022c4	eb000000	 bl          MMCWaitForReady
  022c8	e58d0008	 str         r0, [sp, #8]
  022cc	e59d3008	 ldr         r3, [sp, #8]
  022d0	e3530000	 cmp         r3, #0
  022d4	0a00000d	 beq         |$LN6@MMCReadMul|

; 602  :     {
; 603  :         Status = MMCREAD_FAILURE;

  022d8	e3a03001	 mov         r3, #1
  022dc	e58d3000	 str         r3, [sp]

; 604  :         OALMSG(OAL_ERROR, (TEXT("MMCReadMultiSectors: MMCWaitForReady error\r\n")));

  022e0	e59f31dc	 ldr         r3, [pc, #0x1DC]
  022e4	e5933440	 ldr         r3, [r3, #0x440]
  022e8	e3130001	 tst         r3, #1
  022ec	0a000004	 beq         |$LN11@MMCReadMul|
  022f0	e59f01dc	 ldr         r0, [pc, #0x1DC]
  022f4	eb000000	 bl          NKDbgPrintfW
  022f8	e3a03001	 mov         r3, #1
  022fc	e58d300c	 str         r3, [sp, #0xC]
  02300	ea000001	 b           |$LN12@MMCReadMul|
  02304		 |$LN11@MMCReadMul|
  02304	e3a03000	 mov         r3, #0
  02308	e58d300c	 str         r3, [sp, #0xC]
  0230c		 |$LN12@MMCReadMul|

; 605  :         goto MMCReadMultiSectorsExit;

  0230c	ea000057	 b           |$MMCReadMultiSectorsExit$44603|
  02310		 |$LN6@MMCReadMul|

; 606  :     }
; 607  : 
; 608  :     // build command
; 609  :     MMCcmd.command = READ_MULTIPLE_BLOCK;

  02310	e59f21b4	 ldr         r2, [pc, #0x1B4]
  02314	e3a03012	 mov         r3, #0x12
  02318	e5c23004	 strb        r3, [r2, #4]

; 610  :     MMCcmd.num_blocks = numSectors;

  0231c	e1dd23b8	 ldrh        r2, [sp, #0x38]
  02320	e59f31a4	 ldr         r3, [pc, #0x1A4]
  02324	e583200c	 str         r2, [r3, #0xC]

; 611  :     MMCcmd.block_len = pDisk->d_DiskInfo.di_bytes_per_sect;

  02328	e59d302c	 ldr         r3, [sp, #0x2C]
  0232c	e283301c	 add         r3, r3, #0x1C
  02330	e5932000	 ldr         r2, [r3]
  02334	e59f3190	 ldr         r3, [pc, #0x190]
  02338	e5832010	 str         r2, [r3, #0x10]

; 612  :     MMCcmd.pBuffer = pBuffer;

  0233c	e59d2034	 ldr         r2, [sp, #0x34]
  02340	e59f3184	 ldr         r3, [pc, #0x184]
  02344	e5832034	 str         r2, [r3, #0x34]

; 613  :     
; 614  :     // starting address
; 615  :     if (MMCcmd.card_type == CARDTYPE_SDHC)

  02348	e59f317c	 ldr         r3, [pc, #0x17C]
  0234c	e5933000	 ldr         r3, [r3]
  02350	e3530003	 cmp         r3, #3
  02354	1a000003	 bne         |$LN5@MMCReadMul|

; 616  :         MMCcmd.argument = LogicalSector;

  02358	e59d2030	 ldr         r2, [sp, #0x30]
  0235c	e59f3168	 ldr         r3, [pc, #0x168]
  02360	e5832008	 str         r2, [r3, #8]

; 617  :     else

  02364	ea000006	 b           |$LN4@MMCReadMul|
  02368		 |$LN5@MMCReadMul|

; 618  :         MMCcmd.argument = LogicalSector * pDisk->d_DiskInfo.di_bytes_per_sect;

  02368	e59d302c	 ldr         r3, [sp, #0x2C]
  0236c	e283301c	 add         r3, r3, #0x1C
  02370	e59d1030	 ldr         r1, [sp, #0x30]
  02374	e5933000	 ldr         r3, [r3]
  02378	e0020391	 mul         r2, r1, r3
  0237c	e59f3148	 ldr         r3, [pc, #0x148]
  02380	e5832008	 str         r2, [r3, #8]
  02384		 |$LN4@MMCReadMul|

; 619  : 
; 620  :     OALMSGX(OAL_FUNC, (TEXT("READ_MULTIPLE_BLOCK\r\n")));
; 621  :     if (MMCCommandResponse(&MMCcmd, 0))

  02384	e3a01000	 mov         r1, #0
  02388	e59f013c	 ldr         r0, [pc, #0x13C]
  0238c	eb000000	 bl          MMCCommandResponse
  02390	e58d0010	 str         r0, [sp, #0x10]
  02394	e59d3010	 ldr         r3, [sp, #0x10]
  02398	e3530000	 cmp         r3, #0
  0239c	0a00000d	 beq         |$LN3@MMCReadMul|

; 622  :     {
; 623  :         Status = MMCREAD_FAILURE;

  023a0	e3a03001	 mov         r3, #1
  023a4	e58d3000	 str         r3, [sp]

; 624  :         OALMSG(OAL_ERROR, (TEXT("MMCReadMultiSectors: MMCCommandResponse error on READ_MULTIPLE_BLOCK!\r\n")));

  023a8	e59f3114	 ldr         r3, [pc, #0x114]
  023ac	e5933440	 ldr         r3, [r3, #0x440]
  023b0	e3130001	 tst         r3, #1
  023b4	0a000004	 beq         |$LN13@MMCReadMul|
  023b8	e59f0110	 ldr         r0, [pc, #0x110]
  023bc	eb000000	 bl          NKDbgPrintfW
  023c0	e3a03001	 mov         r3, #1
  023c4	e58d3014	 str         r3, [sp, #0x14]
  023c8	ea000001	 b           |$LN14@MMCReadMul|
  023cc		 |$LN13@MMCReadMul|
  023cc	e3a03000	 mov         r3, #0
  023d0	e58d3014	 str         r3, [sp, #0x14]
  023d4		 |$LN14@MMCReadMul|

; 625  :         goto MMCReadMultiSectorsExit;

  023d4	ea000025	 b           |$MMCReadMultiSectorsExit$44603|
  023d8		 |$LN3@MMCReadMul|

; 626  :     }
; 627  : 
; 628  :     // send STOP_TRANSMISSION
; 629  :     MMCcmd.command = STOP_TRANSMISSION;

  023d8	e59f20ec	 ldr         r2, [pc, #0xEC]
  023dc	e3a0300c	 mov         r3, #0xC
  023e0	e5c23004	 strb        r3, [r2, #4]

; 630  :     MMCcmd.argument = 0;

  023e4	e59f20e0	 ldr         r2, [pc, #0xE0]
  023e8	e3a03000	 mov         r3, #0
  023ec	e5823008	 str         r3, [r2, #8]

; 631  :     MMCcmd.num_blocks = 0;

  023f0	e59f20d4	 ldr         r2, [pc, #0xD4]
  023f4	e3a03000	 mov         r3, #0
  023f8	e582300c	 str         r3, [r2, #0xC]

; 632  :     MMCcmd.block_len = 0;

  023fc	e59f20c8	 ldr         r2, [pc, #0xC8]
  02400	e3a03000	 mov         r3, #0
  02404	e5823010	 str         r3, [r2, #0x10]

; 633  :     MMCcmd.pBuffer = 0;

  02408	e59f20bc	 ldr         r2, [pc, #0xBC]
  0240c	e3a03000	 mov         r3, #0
  02410	e5823034	 str         r3, [r2, #0x34]

; 634  :     if (MMCCommandResponse(&MMCcmd, 0))

  02414	e3a01000	 mov         r1, #0
  02418	e59f00ac	 ldr         r0, [pc, #0xAC]
  0241c	eb000000	 bl          MMCCommandResponse
  02420	e58d0018	 str         r0, [sp, #0x18]
  02424	e59d3018	 ldr         r3, [sp, #0x18]
  02428	e3530000	 cmp         r3, #0
  0242c	0a00000d	 beq         |$LN2@MMCReadMul|

; 635  :     {
; 636  :         Status = MMCREAD_FAILURE;

  02430	e3a03001	 mov         r3, #1
  02434	e58d3000	 str         r3, [sp]

; 637  :         OALMSG(OAL_ERROR, (TEXT("MMCReadMultiSectors: MMCCommandResponse error on STOP_TRANSMISSION!\r\n")));

  02438	e59f3084	 ldr         r3, [pc, #0x84]
  0243c	e5933440	 ldr         r3, [r3, #0x440]
  02440	e3130001	 tst         r3, #1
  02444	0a000004	 beq         |$LN15@MMCReadMul|
  02448	e59f0078	 ldr         r0, [pc, #0x78]
  0244c	eb000000	 bl          NKDbgPrintfW
  02450	e3a03001	 mov         r3, #1
  02454	e58d301c	 str         r3, [sp, #0x1C]
  02458	ea000001	 b           |$LN16@MMCReadMul|
  0245c		 |$LN15@MMCReadMul|
  0245c	e3a03000	 mov         r3, #0
  02460	e58d301c	 str         r3, [sp, #0x1C]
  02464		 |$LN16@MMCReadMul|

; 638  :         goto MMCReadMultiSectorsExit;

  02464	ea000001	 b           |$MMCReadMultiSectorsExit$44603|
  02468		 |$LN2@MMCReadMul|

; 639  :     }
; 640  : 
; 641  :     Status = MMCREAD_SUCCESS;

  02468	e3a03000	 mov         r3, #0
  0246c	e58d3000	 str         r3, [sp]
  02470		 |$MMCReadMultiSectorsExit$44603|

; 642  : 
; 643  : MMCReadMultiSectorsExit:
; 644  :     
; 645  :     if (Status != MMCREAD_SUCCESS)

  02470	e59d3000	 ldr         r3, [sp]
  02474	e3530000	 cmp         r3, #0
  02478	0a00000a	 beq         |$LN1@MMCReadMul|

; 646  :     {
; 647  :         OALMSG(OAL_ERROR, (TEXT("read multi sectors error\r\n")));

  0247c	e59f3040	 ldr         r3, [pc, #0x40]
  02480	e5933440	 ldr         r3, [r3, #0x440]
  02484	e3130001	 tst         r3, #1
  02488	0a000004	 beq         |$LN17@MMCReadMul|
  0248c	e59f002c	 ldr         r0, [pc, #0x2C]
  02490	eb000000	 bl          NKDbgPrintfW
  02494	e3a03001	 mov         r3, #1
  02498	e58d3020	 str         r3, [sp, #0x20]
  0249c	ea000001	 b           |$LN18@MMCReadMul|
  024a0		 |$LN17@MMCReadMul|
  024a0	e3a03000	 mov         r3, #0
  024a4	e58d3020	 str         r3, [sp, #0x20]
  024a8		 |$LN18@MMCReadMul|
  024a8		 |$LN1@MMCReadMul|

; 648  : 
; 649  :         //MMCcmd.command = SELECT_DESELECT_CARD;
; 650  :         // zero deselects all cards
; 651  :         //MMCcmd.argument = 0;
; 652  :         //OALMSGX(OAL_FUNC, (TEXT("SELECT_DESELECT_CARD\r\n")));
; 653  :         //MMCCommandResponse(&MMCcmd, 0);
; 654  :     }
; 655  : 
; 656  :     return Status;

  024a8	e59d3000	 ldr         r3, [sp]
  024ac	e58d3004	 str         r3, [sp, #4]

; 657  : }

  024b0	e59d0004	 ldr         r0, [sp, #4]
  024b4	e28dd024	 add         sp, sp, #0x24
  024b8	e89d6000	 ldmia       sp, {sp, lr}
  024bc	e12fff1e	 bx          lr
  024c0		 |$LN22@MMCReadMul|
  024c0		 |$LN23@MMCReadMul|
  024c0	00000000	 DCD         |??_C@_1DG@LHNGMEJK@?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAm?$AAu?$AAl?$AAt?$AAi?$AA?5?$AAs?$AAe?$AAc?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?$AN?$AA?6?$AA?$AA@|
  024c4		 |$LN24@MMCReadMul|
  024c4	00000000	 DCD         |dpCurSettings|
  024c8		 |$LN25@MMCReadMul|
  024c8	00000000	 DCD         |??_C@_1IM@NDHBECDO@?$AAM?$AAM?$AAC?$AAR?$AAe?$AAa?$AAd?$AAM?$AAu?$AAl?$AAt?$AAi?$AAS?$AAe?$AAc?$AAt?$AAo?$AAr?$AAs?$AA?3?$AA?5?$AAM?$AAM?$AAC?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAR@|
  024cc		 |$LN26@MMCReadMul|
  024cc	00000000	 DCD         |MMCcmd|
  024d0		 |$LN27@MMCReadMul|
  024d0	00000000	 DCD         |??_C@_1JA@ILPGFCNI@?$AAM?$AAM?$AAC?$AAR?$AAe?$AAa?$AAd?$AAM?$AAu?$AAl?$AAt?$AAi?$AAS?$AAe?$AAc?$AAt?$AAo?$AAr?$AAs?$AA?3?$AA?5?$AAM?$AAM?$AAC?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAR@|
  024d4		 |$LN28@MMCReadMul|
  024d4	00000000	 DCD         |??_C@_1FK@HAPCNFMM@?$AAM?$AAM?$AAC?$AAR?$AAe?$AAa?$AAd?$AAM?$AAu?$AAl?$AAt?$AAi?$AAS?$AAe?$AAc?$AAt?$AAo?$AAr?$AAs?$AA?3?$AA?5?$AAM?$AAM?$AAC?$AAW?$AAa?$AAi?$AAt?$AAF?$AAo?$AAr?$AAR@|
  024d8		 |$M45112|

			 ENDP  ; |MMCReadMultiSectors|

	EXPORT	|??_C@_1BK@GAKJANPH@?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HE@HOGFNIBK@?$AAM?$AAM?$AAC?$AAR?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAM?$AAM?$AAC?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAR?$AAe?$AAs?$AAp?$AAo?$AAn?$AAs?$AAe?$AA?5?$AAe?$AAr?$AAr?$AAo@| [ DATA ] ; `string'
	EXPORT	|MMCRead|

  00058			 AREA	 |.pdata|, PDATA
|$T45131| DCD	|$LN16@MMCRead|
	DCD	0x40006f04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BK@GAKJANPH@?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?$AN?$AA?6?$AA?$AA@| DCB "r"
	DCB	0x0, "e", 0x0, "a", 0x0, "d", 0x0, " ", 0x0, "e", 0x0, "r"
	DCB	0x0, "r", 0x0, "o", 0x0, "r", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HE@HOGFNIBK@?$AAM?$AAM?$AAC?$AAR?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAM?$AAM?$AAC?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAR?$AAe?$AAs?$AAp?$AAo?$AAn?$AAs?$AAe?$AA?5?$AAe?$AAr?$AAr?$AAo@| DCB "M"
	DCB	0x0, "M", 0x0, "C", 0x0, "R", 0x0, "e", 0x0, "a", 0x0, "d"
	DCB	0x0, ":", 0x0, " ", 0x0, "M", 0x0, "M", 0x0, "C", 0x0, "C"
	DCB	0x0, "o", 0x0, "m", 0x0, "m", 0x0, "a", 0x0, "n", 0x0, "d"
	DCB	0x0, "R", 0x0, "e", 0x0, "s", 0x0, "p", 0x0, "o", 0x0, "n"
	DCB	0x0, "s", 0x0, "e", 0x0, " ", 0x0, "e", 0x0, "r", 0x0, "r"
	DCB	0x0, "o", 0x0, "r", 0x0, " ", 0x0, "o", 0x0, "n", 0x0, " "
	DCB	0x0, "R", 0x0, "E", 0x0, "A", 0x0, "D", 0x0, "_", 0x0, "S"
	DCB	0x0, "I", 0x0, "N", 0x0, "G", 0x0, "L", 0x0, "E", 0x0, "_"
	DCB	0x0, "B", 0x0, "L", 0x0, "O", 0x0, "C", 0x0, "K", 0x0, "!"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  024d8			 AREA	 |.text|, CODE, ARM

  024d8		 |MMCRead| PROC

; 661  : {

  024d8		 |$LN16@MMCRead|
  024d8	e1a0c00d	 mov         r12, sp
  024dc	e92d0007	 stmdb       sp!, {r0 - r2}
  024e0	e92d5000	 stmdb       sp!, {r12, lr}
  024e4	e24dd018	 sub         sp, sp, #0x18
  024e8		 |$M45128|

; 662  :     DWORD Status;
; 663  : 
; 664  :     // Make sure we don't access beyond end of disk
; 665  :     if (LogicalSector >= pDisk->d_DiskInfo.di_total_sectors)

  024e8	e59d3020	 ldr         r3, [sp, #0x20]
  024ec	e2833018	 add         r3, r3, #0x18
  024f0	e59d2024	 ldr         r2, [sp, #0x24]
  024f4	e5933000	 ldr         r3, [r3]
  024f8	e1520003	 cmp         r2, r3
  024fc	3a000002	 bcc         |$LN7@MMCRead|

; 666  :     {
; 667  :         Status = ERROR_INVALID_PARAMETER;

  02500	e3a03057	 mov         r3, #0x57
  02504	e58d3000	 str         r3, [sp]

; 668  :         OALMSGX(OAL_FUNC, (TEXT("DoDiskIO: ERROR_INVALID_PARAMETER\r\n")));
; 669  :         goto MMCReadExit;

  02508	ea000049	 b           |$MMCReadExit$44629|
  0250c		 |$LN7@MMCRead|

; 670  :     }
; 671  :     
; 672  :     if (pDisk->d_DiskCardState != STATE_OPENED && pDisk->d_DiskCardState != STATE_CLOSED)

  0250c	e59d3020	 ldr         r3, [sp, #0x20]
  02510	e2833008	 add         r3, r3, #8
  02514	e5933000	 ldr         r3, [r3]
  02518	e3530003	 cmp         r3, #3
  0251c	0a000007	 beq         |$LN6@MMCRead|
  02520	e59d3020	 ldr         r3, [sp, #0x20]
  02524	e2833008	 add         r3, r3, #8
  02528	e5933000	 ldr         r3, [r3]
  0252c	e3530002	 cmp         r3, #2
  02530	0a000002	 beq         |$LN6@MMCRead|

; 673  :     {
; 674  :         Status = MMCREAD_FAILURE;

  02534	e3a03001	 mov         r3, #1
  02538	e58d3000	 str         r3, [sp]

; 675  :         OALMSGX(OAL_FUNC, (TEXT("DoDiskIO: incorrect disk state\r\n")));
; 676  :         goto MMCReadExit;

  0253c	ea00003c	 b           |$MMCReadExit$44629|
  02540		 |$LN6@MMCRead|

; 677  :     }
; 678  : 
; 679  :     if (MMCWaitForReady(pDisk))

  02540	e59d0020	 ldr         r0, [sp, #0x20]
  02544	eb000000	 bl          MMCWaitForReady
  02548	e58d0008	 str         r0, [sp, #8]
  0254c	e59d3008	 ldr         r3, [sp, #8]
  02550	e3530000	 cmp         r3, #0
  02554	0a000002	 beq         |$LN5@MMCRead|

; 680  :     {
; 681  :         Status = MMCREAD_FAILURE;

  02558	e3a03001	 mov         r3, #1
  0255c	e58d3000	 str         r3, [sp]

; 682  :         goto MMCReadExit;

  02560	ea000033	 b           |$MMCReadExit$44629|
  02564		 |$LN5@MMCRead|

; 683  :     }
; 684  : 
; 685  :     // build command
; 686  :     MMCcmd.command = READ_SINGLE_BLOCK;

  02564	e59f2124	 ldr         r2, [pc, #0x124]
  02568	e3a03011	 mov         r3, #0x11
  0256c	e5c23004	 strb        r3, [r2, #4]

; 687  :     MMCcmd.num_blocks = 1;

  02570	e59f2118	 ldr         r2, [pc, #0x118]
  02574	e3a03001	 mov         r3, #1
  02578	e582300c	 str         r3, [r2, #0xC]

; 688  :     MMCcmd.block_len = pDisk->d_DiskInfo.di_bytes_per_sect;

  0257c	e59d3020	 ldr         r3, [sp, #0x20]
  02580	e283301c	 add         r3, r3, #0x1C
  02584	e5932000	 ldr         r2, [r3]
  02588	e59f3100	 ldr         r3, [pc, #0x100]
  0258c	e5832010	 str         r2, [r3, #0x10]

; 689  :     MMCcmd.pBuffer = pSectorBuffer;

  02590	e59d2028	 ldr         r2, [sp, #0x28]
  02594	e59f30f4	 ldr         r3, [pc, #0xF4]
  02598	e5832034	 str         r2, [r3, #0x34]

; 690  :     
; 691  :     // starting address
; 692  :     if (MMCcmd.card_type == CARDTYPE_SDHC)

  0259c	e59f30ec	 ldr         r3, [pc, #0xEC]
  025a0	e5933000	 ldr         r3, [r3]
  025a4	e3530003	 cmp         r3, #3
  025a8	1a000003	 bne         |$LN4@MMCRead|

; 693  :         MMCcmd.argument = LogicalSector;

  025ac	e59d2024	 ldr         r2, [sp, #0x24]
  025b0	e59f30d8	 ldr         r3, [pc, #0xD8]
  025b4	e5832008	 str         r2, [r3, #8]

; 694  :     else

  025b8	ea000006	 b           |$LN3@MMCRead|
  025bc		 |$LN4@MMCRead|

; 695  :         MMCcmd.argument = LogicalSector * pDisk->d_DiskInfo.di_bytes_per_sect;

  025bc	e59d3020	 ldr         r3, [sp, #0x20]
  025c0	e283301c	 add         r3, r3, #0x1C
  025c4	e59d1024	 ldr         r1, [sp, #0x24]
  025c8	e5933000	 ldr         r3, [r3]
  025cc	e0020391	 mul         r2, r1, r3
  025d0	e59f30b8	 ldr         r3, [pc, #0xB8]
  025d4	e5832008	 str         r2, [r3, #8]
  025d8		 |$LN3@MMCRead|

; 696  : 
; 697  :     OALMSGX(OAL_FUNC, (TEXT("READ_SINGLE_BLOCK\r\n")));
; 698  :     if (MMCCommandResponse(&MMCcmd, 0))

  025d8	e3a01000	 mov         r1, #0
  025dc	e59f00ac	 ldr         r0, [pc, #0xAC]
  025e0	eb000000	 bl          MMCCommandResponse
  025e4	e58d000c	 str         r0, [sp, #0xC]
  025e8	e59d300c	 ldr         r3, [sp, #0xC]
  025ec	e3530000	 cmp         r3, #0
  025f0	0a00000d	 beq         |$LN2@MMCRead|

; 699  :     {
; 700  :         Status = MMCREAD_FAILURE;

  025f4	e3a03001	 mov         r3, #1
  025f8	e58d3000	 str         r3, [sp]

; 701  :         OALMSG(OAL_ERROR, (TEXT("MMCRead: MMCCommandResponse error on READ_SINGLE_BLOCK!\r\n")));

  025fc	e59f3084	 ldr         r3, [pc, #0x84]
  02600	e5933440	 ldr         r3, [r3, #0x440]
  02604	e3130001	 tst         r3, #1
  02608	0a000004	 beq         |$LN10@MMCRead|
  0260c	e59f0078	 ldr         r0, [pc, #0x78]
  02610	eb000000	 bl          NKDbgPrintfW
  02614	e3a03001	 mov         r3, #1
  02618	e58d3010	 str         r3, [sp, #0x10]
  0261c	ea000001	 b           |$LN11@MMCRead|
  02620		 |$LN10@MMCRead|
  02620	e3a03000	 mov         r3, #0
  02624	e58d3010	 str         r3, [sp, #0x10]
  02628		 |$LN11@MMCRead|

; 702  :         goto MMCReadExit;

  02628	ea000001	 b           |$MMCReadExit$44629|
  0262c		 |$LN2@MMCRead|

; 703  :     }
; 704  : 
; 705  :     Status = MMCREAD_SUCCESS;

  0262c	e3a03000	 mov         r3, #0
  02630	e58d3000	 str         r3, [sp]
  02634		 |$MMCReadExit$44629|

; 706  : 
; 707  : MMCReadExit:
; 708  :     
; 709  :     if (Status != MMCREAD_SUCCESS)

  02634	e59d3000	 ldr         r3, [sp]
  02638	e3530000	 cmp         r3, #0
  0263c	0a00000a	 beq         |$LN1@MMCRead|

; 710  :     {
; 711  :         OALMSG(OAL_ERROR, (TEXT("read error\r\n")));

  02640	e59f3040	 ldr         r3, [pc, #0x40]
  02644	e5933440	 ldr         r3, [r3, #0x440]
  02648	e3130001	 tst         r3, #1
  0264c	0a000004	 beq         |$LN12@MMCRead|
  02650	e59f002c	 ldr         r0, [pc, #0x2C]
  02654	eb000000	 bl          NKDbgPrintfW
  02658	e3a03001	 mov         r3, #1
  0265c	e58d3014	 str         r3, [sp, #0x14]
  02660	ea000001	 b           |$LN13@MMCRead|
  02664		 |$LN12@MMCRead|
  02664	e3a03000	 mov         r3, #0
  02668	e58d3014	 str         r3, [sp, #0x14]
  0266c		 |$LN13@MMCRead|
  0266c		 |$LN1@MMCRead|

; 712  : 
; 713  :         //MMCcmd.command = SELECT_DESELECT_CARD;
; 714  :         // zero deselects all cards
; 715  :         //MMCcmd.argument = 0;
; 716  :         //OALMSGX(OAL_FUNC, (TEXT("SELECT_DESELECT_CARD\r\n")));
; 717  :         //MMCCommandResponse(&MMCcmd, 0);
; 718  :     }
; 719  : 
; 720  :     return Status;

  0266c	e59d3000	 ldr         r3, [sp]
  02670	e58d3004	 str         r3, [sp, #4]

; 721  : }

  02674	e59d0004	 ldr         r0, [sp, #4]
  02678	e28dd018	 add         sp, sp, #0x18
  0267c	e89d6000	 ldmia       sp, {sp, lr}
  02680	e12fff1e	 bx          lr
  02684		 |$LN17@MMCRead|
  02684		 |$LN18@MMCRead|
  02684	00000000	 DCD         |??_C@_1BK@GAKJANPH@?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?$AN?$AA?6?$AA?$AA@|
  02688		 |$LN19@MMCRead|
  02688	00000000	 DCD         |dpCurSettings|
  0268c		 |$LN20@MMCRead|
  0268c	00000000	 DCD         |??_C@_1HE@HOGFNIBK@?$AAM?$AAM?$AAC?$AAR?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAM?$AAM?$AAC?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAR?$AAe?$AAs?$AAp?$AAo?$AAn?$AAs?$AAe?$AA?5?$AAe?$AAr?$AAr?$AAo@|
  02690		 |$LN21@MMCRead|
  02690	00000000	 DCD         |MMCcmd|
  02694		 |$M45129|

			 ENDP  ; |MMCRead|

	EXPORT	|??_C@_1GK@CDAMFDEK@?$AAM?$AAM?$AAC?$AA?3?$AA?5?$AAu?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAs?$AAe?$AAt?$AA?5?$AAw?$AAi?$AAd?$AAe?$AA?5?$AAb?$AAu?$AAs?$AA?5?$AAm?$AAo?$AAd?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CC@BECOMKMK@?$AAA?$AAP?$AAP?$AA_?$AAC?$AAM?$AAD?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EK@FDKGIIKM@?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAM?$AAM?$AAC?$AAS?$AAe?$AAt?$AAB?$AAl?$AAo?$AAc?$AAk?$AAL?$AAe?$AAn?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1KA@GCFNELEL@?$AAM?$AAM?$AAC?$AAS?$AAe?$AAl?$AAe?$AAc?$AAt?$AAC?$AAa?$AAr?$AAd?$AA?3?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?5?$AAw?$AAa?$AAi?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAf@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GE@FEOFGONO@?$AAM?$AAM?$AAC?$AAS?$AAe?$AAl?$AAe?$AAc?$AAt?$AAC?$AAa?$AAr?$AAd?$AA?3?$AA?5?$AAp?$AAo?$AAl?$AAl?$AA?5?$AAs?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?5?$AAe?$AAr?$AAr?$AAo?$AAr@| [ DATA ] ; `string'
	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|MMCSelectCard|
	IMPORT	|SdhcSetInterface|
	IMPORT	|__security_cookie|
	IMPORT	|__GSHandlerCheck|
	IMPORT	|__security_check_cookie|

  00060			 AREA	 |.pdata|, PDATA
|$T45157| DCD	|$LN32@MMCSelectC|
	DCD	0xc0010804

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GK@CDAMFDEK@?$AAM?$AAM?$AAC?$AA?3?$AA?5?$AAu?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAs?$AAe?$AAt?$AA?5?$AAw?$AAi?$AAd?$AAe?$AA?5?$AAb?$AAu?$AAs?$AA?5?$AAm?$AAo?$AAd?$AAe@| DCB "M"
	DCB	0x0, "M", 0x0, "C", 0x0, ":", 0x0, " ", 0x0, "u", 0x0, "n"
	DCB	0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, " ", 0x0, "t"
	DCB	0x0, "o", 0x0, " ", 0x0, "s", 0x0, "e", 0x0, "t", 0x0, " "
	DCB	0x0, "w", 0x0, "i", 0x0, "d", 0x0, "e", 0x0, " ", 0x0, "b"
	DCB	0x0, "u", 0x0, "s", 0x0, " ", 0x0, "m", 0x0, "o", 0x0, "d"
	DCB	0x0, "e", 0x0, " ", 0x0, "f", 0x0, "o", 0x0, "r", 0x0, " "
	DCB	0x0, "S", 0x0, "D", 0x0, "/", 0x0, "S", 0x0, "D", 0x0, "H"
	DCB	0x0, "C", 0x0, " ", 0x0, "c", 0x0, "a", 0x0, "r", 0x0, "d"
	DCB	0x0, ".", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CC@BECOMKMK@?$AAA?$AAP?$AAP?$AA_?$AAC?$AAM?$AAD?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "A"
	DCB	0x0, "P", 0x0, "P", 0x0, "_", 0x0, "C", 0x0, "M", 0x0, "D"
	DCB	0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e"
	DCB	0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EK@FDKGIIKM@?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAM?$AAM?$AAC?$AAS?$AAe?$AAt?$AAB?$AAl?$AAo?$AAc?$AAk?$AAL?$AAe?$AAn?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe@| DCB "S"
	DCB	0x0, "D", 0x0, "C", 0x0, "a", 0x0, "r", 0x0, "d", 0x0, "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "M"
	DCB	0x0, "M", 0x0, "C", 0x0, "S", 0x0, "e", 0x0, "t", 0x0, "B"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, "L", 0x0, "e"
	DCB	0x0, "n", 0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l"
	DCB	0x0, "e", 0x0, "d", 0x0, "!", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KA@GCFNELEL@?$AAM?$AAM?$AAC?$AAS?$AAe?$AAl?$AAe?$AAc?$AAt?$AAC?$AAa?$AAr?$AAd?$AA?3?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?5?$AAw?$AAa?$AAi?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAf@| DCB "M"
	DCB	0x0, "M", 0x0, "C", 0x0, "S", 0x0, "e", 0x0, "l", 0x0, "e"
	DCB	0x0, "c", 0x0, "t", 0x0, "C", 0x0, "a", 0x0, "r", 0x0, "d"
	DCB	0x0, ":", 0x0, " ", 0x0, "t", 0x0, "i", 0x0, "m", 0x0, "e"
	DCB	0x0, "o", 0x0, "u", 0x0, "t", 0x0, " ", 0x0, "w", 0x0, "a"
	DCB	0x0, "i", 0x0, "t", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, " "
	DCB	0x0, "f", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "c", 0x0, "a"
	DCB	0x0, "r", 0x0, "d", 0x0, " ", 0x0, "t", 0x0, "o", 0x0, " "
	DCB	0x0, "g", 0x0, "e", 0x0, "t", 0x0, " ", 0x0, "i", 0x0, "n"
	DCB	0x0, "t", 0x0, "o", 0x0, " ", 0x0, "t", 0x0, "r", 0x0, "a"
	DCB	0x0, "n", 0x0, " ", 0x0, "s", 0x0, "t", 0x0, "a", 0x0, "t"
	DCB	0x0, "e", 0x0, ",", 0x0, " ", 0x0, "s", 0x0, "t", 0x0, "a"
	DCB	0x0, "t", 0x0, "u", 0x0, "s", 0x0, " ", 0x0, "=", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "X", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GE@FEOFGONO@?$AAM?$AAM?$AAC?$AAS?$AAe?$AAl?$AAe?$AAc?$AAt?$AAC?$AAa?$AAr?$AAd?$AA?3?$AA?5?$AAp?$AAo?$AAl?$AAl?$AA?5?$AAs?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?5?$AAe?$AAr?$AAr?$AAo?$AAr@| DCB "M"
	DCB	0x0, "M", 0x0, "C", 0x0, "S", 0x0, "e", 0x0, "l", 0x0, "e"
	DCB	0x0, "c", 0x0, "t", 0x0, "C", 0x0, "a", 0x0, "r", 0x0, "d"
	DCB	0x0, ":", 0x0, " ", 0x0, "p", 0x0, "o", 0x0, "l", 0x0, "l"
	DCB	0x0, " ", 0x0, "s", 0x0, "t", 0x0, "a", 0x0, "t", 0x0, "u"
	DCB	0x0, "s", 0x0, " ", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "o"
	DCB	0x0, "r", 0x0, ",", 0x0, " ", 0x0, "s", 0x0, "t", 0x0, "a"
	DCB	0x0, "t", 0x0, "u", 0x0, "s", 0x0, " ", 0x0, "=", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "X", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.xdata|, DATA
|$T45153| DCD	0xffffffb4
; Function compile flags: /Odtp

  02694			 AREA	 |.text|, CODE, ARM

  02694	00000000	 DCD         |__GSHandlerCheck|
  02698	00000000	 DCD         |$T45153|

  0269c		 |MMCSelectCard| PROC

; 724  : {

  0269c		 |$LN32@MMCSelectC|
  0269c	e1a0c00d	 mov         r12, sp
  026a0	e92d0001	 stmdb       sp!, {r0}
  026a4	e92d5000	 stmdb       sp!, {r12, lr}
  026a8	e24dd050	 sub         sp, sp, #0x50
  026ac		 |$M45154|
  026ac	e59f3404	 ldr         r3, [pc, #0x404]
  026b0	e5933000	 ldr         r3, [r3]
  026b4	e58d3010	 str         r3, [sp, #0x10]

; 725  :     UINT32 StartTime;
; 726  :     int bTimeout;
; 727  : 
; 728  :     StartTime = OALGetTickCount();

  026b8	eb000000	 bl          OALGetTickCount
  026bc	e58d0018	 str         r0, [sp, #0x18]
  026c0	e59d3018	 ldr         r3, [sp, #0x18]
  026c4	e58d3004	 str         r3, [sp, #4]

; 729  :     MMCcmd.card_type = pDisk->d_CardType;

  026c8	e59d3058	 ldr         r3, [sp, #0x58]
  026cc	e2833010	 add         r3, r3, #0x10
  026d0	e5932000	 ldr         r2, [r3]
  026d4	e59f33c8	 ldr         r3, [pc, #0x3C8]
  026d8	e5832000	 str         r2, [r3]

; 730  :     
; 731  :     bTimeout = FALSE;

  026dc	e3a03000	 mov         r3, #0
  026e0	e58d3000	 str         r3, [sp]
  026e4		 |$LN17@MMCSelectC|

; 732  :     for(;;)
; 733  :     {
; 734  : 
; 735  :         if (OALGetTickCount() - StartTime > 1000)

  026e4	eb000000	 bl          OALGetTickCount
  026e8	e58d001c	 str         r0, [sp, #0x1C]
  026ec	e59d201c	 ldr         r2, [sp, #0x1C]
  026f0	e59d3004	 ldr         r3, [sp, #4]
  026f4	e0423003	 sub         r3, r2, r3
  026f8	e3530ffa	 cmp         r3, #0xFA, 30
  026fc	9a000001	 bls         |$LN15@MMCSelectC|

; 736  :             bTimeout = TRUE;

  02700	e3a03001	 mov         r3, #1
  02704	e58d3000	 str         r3, [sp]
  02708		 |$LN15@MMCSelectC|

; 737  : 
; 738  :         MMCcmd.command = SEND_STATUS;

  02708	e59f2394	 ldr         r2, [pc, #0x394]
  0270c	e3a0300d	 mov         r3, #0xD
  02710	e5c23004	 strb        r3, [r2, #4]

; 739  :         MMCcmd.argument = (pDisk->d_RelAddress)<<16;

  02714	e59d3058	 ldr         r3, [sp, #0x58]
  02718	e2833014	 add         r3, r3, #0x14
  0271c	e5933000	 ldr         r3, [r3]
  02720	e1a02803	 mov         r2, r3, lsl #16
  02724	e59f3378	 ldr         r3, [pc, #0x378]
  02728	e5832008	 str         r2, [r3, #8]

; 740  :         MMCcmd.num_blocks = 1;

  0272c	e59f2370	 ldr         r2, [pc, #0x370]
  02730	e3a03001	 mov         r3, #1
  02734	e582300c	 str         r3, [r2, #0xC]

; 741  :         MMCcmd.block_len = 512;

  02738	e59f2364	 ldr         r2, [pc, #0x364]
  0273c	e3a03c02	 mov         r3, #2, 24
  02740	e5823010	 str         r3, [r2, #0x10]

; 742  :         OALMSGX(OAL_FUNC, (TEXT("SEND_STATUS\r\n")));
; 743  :         if (MMCCommandResponse(&MMCcmd, 0)) 

  02744	e3a01000	 mov         r1, #0
  02748	e59f0354	 ldr         r0, [pc, #0x354]
  0274c	eb000000	 bl          MMCCommandResponse
  02750	e58d0020	 str         r0, [sp, #0x20]
  02754	e59d3020	 ldr         r3, [sp, #0x20]
  02758	e3530000	 cmp         r3, #0
  0275c	0a000000	 beq         |$LN14@MMCSelectC|

; 744  :             goto select_card_error;

  02760	ea0000c5	 b           |$select_card_error$44650|
  02764		 |$LN14@MMCSelectC|

; 745  : 
; 746  :         if (MMC_STATUS_POLL_ERROR(MMCcmd.status))

  02764	e59f3338	 ldr         r3, [pc, #0x338]
  02768	e5932014	 ldr         r2, [r3, #0x14]
  0276c	e3a03311	 mov         r3, #0x11, 6
  02770	e383397a	 orr         r3, r3, #0x7A, 18
  02774	e1120003	 tst         r2, r3
  02778	0a00000d	 beq         |$LN13@MMCSelectC|

; 747  :         {
; 748  :             OALMSG(OAL_ERROR, (TEXT("MMCSelectCard: poll status error, status = 0x%X\r\n"), MMCcmd.status));

  0277c	e59f331c	 ldr         r3, [pc, #0x31C]
  02780	e5933440	 ldr         r3, [r3, #0x440]
  02784	e3130001	 tst         r3, #1
  02788	0a000006	 beq         |$LN20@MMCSelectC|
  0278c	e59f3310	 ldr         r3, [pc, #0x310]
  02790	e5931014	 ldr         r1, [r3, #0x14]
  02794	e59f0318	 ldr         r0, [pc, #0x318]
  02798	eb000000	 bl          NKDbgPrintfW
  0279c	e3a03001	 mov         r3, #1
  027a0	e58d3024	 str         r3, [sp, #0x24]
  027a4	ea000001	 b           |$LN21@MMCSelectC|
  027a8		 |$LN20@MMCSelectC|
  027a8	e3a03000	 mov         r3, #0
  027ac	e58d3024	 str         r3, [sp, #0x24]
  027b0		 |$LN21@MMCSelectC|

; 749  :             goto select_card_error;

  027b0	ea0000b1	 b           |$select_card_error$44650|
  027b4		 |$LN13@MMCSelectC|

; 750  :         }
; 751  : 
; 752  :         if ( MMC_STATUS_STATE(MMCcmd.status) == MMC_STATUS_STATE_TRAN )

  027b4	e59f32e8	 ldr         r3, [pc, #0x2E8]
  027b8	e5933014	 ldr         r3, [r3, #0x14]
  027bc	e1a03983	 mov         r3, r3, lsl #19
  027c0	e1a03e23	 mov         r3, r3, lsr #28
  027c4	e3530004	 cmp         r3, #4
  027c8	1a000000	 bne         |$LN12@MMCSelectC|

; 753  :             break;

  027cc	ea000022	 b           |$LN16@MMCSelectC|
  027d0		 |$LN12@MMCSelectC|

; 754  : 
; 755  :         OALMSGX(OAL_FUNC, (TEXT("MMCSelectCard: not in tran state, status = 0x%X\r\n"), MMCcmd.status));
; 756  : 
; 757  :         // try to get card into transfer state  
; 758  :         // this should only have to happen once per card insertion
; 759  :         MMCcmd.command = SELECT_DESELECT_CARD;

  027d0	e59f22cc	 ldr         r2, [pc, #0x2CC]
  027d4	e3a03007	 mov         r3, #7
  027d8	e5c23004	 strb        r3, [r2, #4]

; 760  :         MMCcmd.argument = (pDisk->d_RelAddress) << 16;

  027dc	e59d3058	 ldr         r3, [sp, #0x58]
  027e0	e2833014	 add         r3, r3, #0x14
  027e4	e5933000	 ldr         r3, [r3]
  027e8	e1a02803	 mov         r2, r3, lsl #16
  027ec	e59f32b0	 ldr         r3, [pc, #0x2B0]
  027f0	e5832008	 str         r2, [r3, #8]

; 761  : 
; 762  :         OALMSGX(OAL_FUNC, (TEXT("SELECT_DESELECT_CARD\r\n")));
; 763  :         if ( MMCCommandResponse(&MMCcmd, 0) )

  027f4	e3a01000	 mov         r1, #0
  027f8	e59f02a4	 ldr         r0, [pc, #0x2A4]
  027fc	eb000000	 bl          MMCCommandResponse
  02800	e58d0028	 str         r0, [sp, #0x28]
  02804	e59d3028	 ldr         r3, [sp, #0x28]
  02808	e3530000	 cmp         r3, #0
  0280c	0a000000	 beq         |$LN11@MMCSelectC|

; 764  :             goto select_card_error;

  02810	ea000099	 b           |$select_card_error$44650|
  02814		 |$LN11@MMCSelectC|

; 765  : 
; 766  :         // check for bTimeout
; 767  :         if (bTimeout)

  02814	e59d3000	 ldr         r3, [sp]
  02818	e3530000	 cmp         r3, #0
  0281c	0a00000d	 beq         |$LN10@MMCSelectC|

; 768  :         {
; 769  :             OALMSG(OAL_ERROR, (TEXT("MMCSelectCard: timeout waiting for card to get into tran state, status = 0x%X\r\n"), MMCcmd.status));

  02820	e59f3278	 ldr         r3, [pc, #0x278]
  02824	e5933440	 ldr         r3, [r3, #0x440]
  02828	e3130001	 tst         r3, #1
  0282c	0a000006	 beq         |$LN22@MMCSelectC|
  02830	e59f326c	 ldr         r3, [pc, #0x26C]
  02834	e5931014	 ldr         r1, [r3, #0x14]
  02838	e59f0270	 ldr         r0, [pc, #0x270]
  0283c	eb000000	 bl          NKDbgPrintfW
  02840	e3a03001	 mov         r3, #1
  02844	e58d302c	 str         r3, [sp, #0x2C]
  02848	ea000001	 b           |$LN23@MMCSelectC|
  0284c		 |$LN22@MMCSelectC|
  0284c	e3a03000	 mov         r3, #0
  02850	e58d302c	 str         r3, [sp, #0x2C]
  02854		 |$LN23@MMCSelectC|

; 770  :             goto select_card_error;

  02854	ea000088	 b           |$select_card_error$44650|
  02858		 |$LN10@MMCSelectC|

; 771  :         }
; 772  :     }

  02858	eaffffa1	 b           |$LN17@MMCSelectC|
  0285c		 |$LN16@MMCSelectC|

; 773  : 
; 774  :     if (MMCSetBlockLen(pDisk))

  0285c	e59d0058	 ldr         r0, [sp, #0x58]
  02860	eb000000	 bl          MMCSetBlockLen
  02864	e58d0030	 str         r0, [sp, #0x30]
  02868	e59d3030	 ldr         r3, [sp, #0x30]
  0286c	e3530000	 cmp         r3, #0
  02870	0a00000b	 beq         |$LN9@MMCSelectC|

; 775  : 	{
; 776  :         OALMSG(OAL_ERROR, (L"SDCardInit: MMCSetBlockLen failed!\r\n"));

  02874	e59f3224	 ldr         r3, [pc, #0x224]
  02878	e5933440	 ldr         r3, [r3, #0x440]
  0287c	e3130001	 tst         r3, #1
  02880	0a000004	 beq         |$LN24@MMCSelectC|
  02884	e59f0220	 ldr         r0, [pc, #0x220]
  02888	eb000000	 bl          NKDbgPrintfW
  0288c	e3a03001	 mov         r3, #1
  02890	e58d3034	 str         r3, [sp, #0x34]
  02894	ea000001	 b           |$LN25@MMCSelectC|
  02898		 |$LN24@MMCSelectC|
  02898	e3a03000	 mov         r3, #0
  0289c	e58d3034	 str         r3, [sp, #0x34]
  028a0		 |$LN25@MMCSelectC|

; 777  :         goto select_card_error;

  028a0	ea000075	 b           |$select_card_error$44650|
  028a4		 |$LN9@MMCSelectC|

; 778  : 	}
; 779  : 
; 780  : #if ENABLE_4_BIT_MODE
; 781  : 
; 782  :     if (pDisk->d_CardType == CARDTYPE_SD || pDisk->d_CardType == CARDTYPE_SDHC)

  028a4	e59d3058	 ldr         r3, [sp, #0x58]
  028a8	e2833010	 add         r3, r3, #0x10
  028ac	e5933000	 ldr         r3, [r3]
  028b0	e3530002	 cmp         r3, #2
  028b4	0a000004	 beq         |$LN7@MMCSelectC|
  028b8	e59d3058	 ldr         r3, [sp, #0x58]
  028bc	e2833010	 add         r3, r3, #0x10
  028c0	e5933000	 ldr         r3, [r3]
  028c4	e3530003	 cmp         r3, #3
  028c8	1a000033	 bne         |$LN8@MMCSelectC|
  028cc		 |$LN7@MMCSelectC|

; 783  :     {
; 784  :         BYTE scr[8];
; 785  : 
; 786  :         MMCcmd.command = APP_CMD;

  028cc	e59f21d0	 ldr         r2, [pc, #0x1D0]
  028d0	e3a03037	 mov         r3, #0x37
  028d4	e5c23004	 strb        r3, [r2, #4]

; 787  :         MMCcmd.argument = (pDisk->d_RelAddress) << 16;

  028d8	e59d3058	 ldr         r3, [sp, #0x58]
  028dc	e2833014	 add         r3, r3, #0x14
  028e0	e5933000	 ldr         r3, [r3]
  028e4	e1a02803	 mov         r2, r3, lsl #16
  028e8	e59f31b4	 ldr         r3, [pc, #0x1B4]
  028ec	e5832008	 str         r2, [r3, #8]

; 788  :         OALMSGX(OAL_FUNC, (TEXT("APP_CMD\r\n")));
; 789  :         if (MMCCommandResponse(&MMCcmd, 0) )

  028f0	e3a01000	 mov         r1, #0
  028f4	e59f01a8	 ldr         r0, [pc, #0x1A8]
  028f8	eb000000	 bl          MMCCommandResponse
  028fc	e58d0038	 str         r0, [sp, #0x38]
  02900	e59d3038	 ldr         r3, [sp, #0x38]
  02904	e3530000	 cmp         r3, #0
  02908	0a000000	 beq         |$LN6@MMCSelectC|

; 790  :         {
; 791  :             //OALMSG(OAL_ERROR, (TEXT("APP_CMD failed\r\n")));
; 792  :             goto Detect4BitCardDone;

  0290c	ea000022	 b           |$Detect4BitCardDone$44666|
  02910		 |$LN6@MMCSelectC|

; 793  :         }
; 794  : 
; 795  :         // SEND_SCR - send configuration register
; 796  :         MMCcmd.command = SEND_SCR;

  02910	e59f218c	 ldr         r2, [pc, #0x18C]
  02914	e3a03033	 mov         r3, #0x33
  02918	e5c23004	 strb        r3, [r2, #4]

; 797  :         MMCcmd.argument = 0;

  0291c	e59f2180	 ldr         r2, [pc, #0x180]
  02920	e3a03000	 mov         r3, #0
  02924	e5823008	 str         r3, [r2, #8]

; 798  :         MMCcmd.num_blocks = 1;

  02928	e59f2174	 ldr         r2, [pc, #0x174]
  0292c	e3a03001	 mov         r3, #1
  02930	e582300c	 str         r3, [r2, #0xC]

; 799  :         MMCcmd.block_len = 8;

  02934	e59f2168	 ldr         r2, [pc, #0x168]
  02938	e3a03008	 mov         r3, #8
  0293c	e5823010	 str         r3, [r2, #0x10]

; 800  :         MMCcmd.pBuffer = scr;

  02940	e28d2008	 add         r2, sp, #8
  02944	e59f3158	 ldr         r3, [pc, #0x158]
  02948	e5832034	 str         r2, [r3, #0x34]

; 801  :         if (MMCCommandResponse(&MMCcmd, 0) )

  0294c	e3a01000	 mov         r1, #0
  02950	e59f014c	 ldr         r0, [pc, #0x14C]
  02954	eb000000	 bl          MMCCommandResponse
  02958	e58d003c	 str         r0, [sp, #0x3C]
  0295c	e59d303c	 ldr         r3, [sp, #0x3C]
  02960	e3530000	 cmp         r3, #0
  02964	0a000000	 beq         |$LN5@MMCSelectC|

; 802  :         {
; 803  :             //OALMSG(OAL_ERROR, (TEXT("SEND_SCR failed\r\n")));
; 804  :             goto Detect4BitCardDone;

  02968	ea00000b	 b           |$Detect4BitCardDone$44666|
  0296c		 |$LN5@MMCSelectC|

; 805  :         }
; 806  : 
; 807  :         // most significant byte arrives first at scr[0]
; 808  : 		// scr[1] has bits 55:48, bit 50 is set for 4 bit capable card
; 809  :         pDisk->d_Supports4Bit = scr[1] & 0x04 ? TRUE : FALSE;

  0296c	e5dd3009	 ldrb        r3, [sp, #9]
  02970	e3130004	 tst         r3, #4
  02974	0a000002	 beq         |$LN26@MMCSelectC|
  02978	e3a03001	 mov         r3, #1
  0297c	e58d3040	 str         r3, [sp, #0x40]
  02980	ea000001	 b           |$LN27@MMCSelectC|
  02984		 |$LN26@MMCSelectC|
  02984	e3a03000	 mov         r3, #0
  02988	e58d3040	 str         r3, [sp, #0x40]
  0298c		 |$LN27@MMCSelectC|
  0298c	e59d3058	 ldr         r3, [sp, #0x58]
  02990	e2832034	 add         r2, r3, #0x34
  02994	e59d3040	 ldr         r3, [sp, #0x40]
  02998	e5823000	 str         r3, [r2]
  0299c		 |$LN8@MMCSelectC|
  0299c		 |$Detect4BitCardDone$44666|

; 810  :     }
; 811  : 
; 812  : Detect4BitCardDone:
; 813  : 
; 814  :     if (pDisk->d_Supports4Bit)

  0299c	e59d3058	 ldr         r3, [sp, #0x58]
  029a0	e2833034	 add         r3, r3, #0x34
  029a4	e5933000	 ldr         r3, [r3]
  029a8	e3530000	 cmp         r3, #0
  029ac	0a00002d	 beq         |$LN4@MMCSelectC|

; 815  :     {
; 816  :         OALMSGX(OAL_FUNC, (TEXT("SDCARD: 4 bit mode\r\n")));
; 817  : 
; 818  :         MMCcmd.command = APP_CMD;

  029b0	e59f20ec	 ldr         r2, [pc, #0xEC]
  029b4	e3a03037	 mov         r3, #0x37
  029b8	e5c23004	 strb        r3, [r2, #4]

; 819  :         MMCcmd.argument = (pDisk->d_RelAddress) << 16;

  029bc	e59d3058	 ldr         r3, [sp, #0x58]
  029c0	e2833014	 add         r3, r3, #0x14
  029c4	e5933000	 ldr         r3, [r3]
  029c8	e1a02803	 mov         r2, r3, lsl #16
  029cc	e59f30d0	 ldr         r3, [pc, #0xD0]
  029d0	e5832008	 str         r2, [r3, #8]

; 820  :         OALMSGX(OAL_FUNC, (TEXT("APP_CMD\r\n")));
; 821  :         if (MMCCommandResponse(&MMCcmd, 0) )

  029d4	e3a01000	 mov         r1, #0
  029d8	e59f00c4	 ldr         r0, [pc, #0xC4]
  029dc	eb000000	 bl          MMCCommandResponse
  029e0	e58d0044	 str         r0, [sp, #0x44]
  029e4	e59d3044	 ldr         r3, [sp, #0x44]
  029e8	e3530000	 cmp         r3, #0
  029ec	0a000002	 beq         |$LN3@MMCSelectC|

; 822  :         {
; 823  :             OALMSG(1, (TEXT("APP_CMD failed\r\n")));

  029f0	e59f00b0	 ldr         r0, [pc, #0xB0]
  029f4	eb000000	 bl          NKDbgPrintfW

; 824  :             goto select_card_error;

  029f8	ea00001f	 b           |$select_card_error$44650|
  029fc		 |$LN3@MMCSelectC|

; 825  :         }
; 826  : 
; 827  :         MMCcmd.command = SET_BUS_WIDTH;

  029fc	e59f20a0	 ldr         r2, [pc, #0xA0]
  02a00	e3a03006	 mov         r3, #6
  02a04	e5c23004	 strb        r3, [r2, #4]

; 828  :         MMCcmd.argument = 0x2;

  02a08	e59f2094	 ldr         r2, [pc, #0x94]
  02a0c	e3a03002	 mov         r3, #2
  02a10	e5823008	 str         r3, [r2, #8]

; 829  :         OALMSGX(OAL_FUNC, (TEXT("SET_BUS_WIDTH\r\n")));
; 830  :         if (MMCCommandResponse(&MMCcmd, 0))

  02a14	e3a01000	 mov         r1, #0
  02a18	e59f0084	 ldr         r0, [pc, #0x84]
  02a1c	eb000000	 bl          MMCCommandResponse
  02a20	e58d0048	 str         r0, [sp, #0x48]
  02a24	e59d3048	 ldr         r3, [sp, #0x48]
  02a28	e3530000	 cmp         r3, #0
  02a2c	0a00000b	 beq         |$LN2@MMCSelectC|

; 831  :         {
; 832  :             OALMSG(OAL_WARN, (TEXT("MMC: unable to set wide bus mode for SD/SDHC card.\r\n")));

  02a30	e59f3068	 ldr         r3, [pc, #0x68]
  02a34	e5933440	 ldr         r3, [r3, #0x440]
  02a38	e3130002	 tst         r3, #2
  02a3c	0a000004	 beq         |$LN28@MMCSelectC|
  02a40	e59f0054	 ldr         r0, [pc, #0x54]
  02a44	eb000000	 bl          NKDbgPrintfW
  02a48	e3a03001	 mov         r3, #1
  02a4c	e58d304c	 str         r3, [sp, #0x4C]
  02a50	ea000001	 b           |$LN29@MMCSelectC|
  02a54		 |$LN28@MMCSelectC|
  02a54	e3a03000	 mov         r3, #0
  02a58	e58d304c	 str         r3, [sp, #0x4C]
  02a5c		 |$LN29@MMCSelectC|

; 833  :             //goto select_card_error;
; 834  :         }
; 835  :         else

  02a5c	ea000001	 b           |$LN1@MMCSelectC|
  02a60		 |$LN2@MMCSelectC|

; 836  :         {
; 837  :             OALMSGX(OAL_INFO, (TEXT("Using 4 bit mode\r\n")));
; 838  :             SdhcSetInterface(SD_INTERFACE_SD_4BIT);

  02a60	e3a00001	 mov         r0, #1
  02a64	eb000000	 bl          SdhcSetInterface
  02a68		 |$LN1@MMCSelectC|
  02a68		 |$LN4@MMCSelectC|

; 839  :         }
; 840  :     }
; 841  : #endif
; 842  : 
; 843  :     return 0;

  02a68	e59d0010	 ldr         r0, [sp, #0x10]
  02a6c	eb000000	 bl          __security_check_cookie
  02a70	e3a03000	 mov         r3, #0
  02a74	e58d3014	 str         r3, [sp, #0x14]
  02a78	ea000003	 b           |$LN18@MMCSelectC|
  02a7c		 |$select_card_error$44650|

; 844  :         
; 845  : select_card_error:
; 846  :     return 1;

  02a7c	e59d0010	 ldr         r0, [sp, #0x10]
  02a80	eb000000	 bl          __security_check_cookie
  02a84	e3a03001	 mov         r3, #1
  02a88	e58d3014	 str         r3, [sp, #0x14]
  02a8c		 |$LN18@MMCSelectC|

; 847  : }

  02a8c	e59d0014	 ldr         r0, [sp, #0x14]
  02a90	e28dd050	 add         sp, sp, #0x50
  02a94	e89d6000	 ldmia       sp, {sp, lr}
  02a98	e12fff1e	 bx          lr
  02a9c		 |$LN33@MMCSelectC|
  02a9c		 |$LN34@MMCSelectC|
  02a9c	00000000	 DCD         |??_C@_1GK@CDAMFDEK@?$AAM?$AAM?$AAC?$AA?3?$AA?5?$AAu?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAs?$AAe?$AAt?$AA?5?$AAw?$AAi?$AAd?$AAe?$AA?5?$AAb?$AAu?$AAs?$AA?5?$AAm?$AAo?$AAd?$AAe@|
  02aa0		 |$LN35@MMCSelectC|
  02aa0	00000000	 DCD         |dpCurSettings|
  02aa4		 |$LN36@MMCSelectC|
  02aa4	00000000	 DCD         |MMCcmd|
  02aa8		 |$LN37@MMCSelectC|
  02aa8	00000000	 DCD         |??_C@_1CC@BECOMKMK@?$AAA?$AAP?$AAP?$AA_?$AAC?$AAM?$AAD?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  02aac		 |$LN38@MMCSelectC|
  02aac	00000000	 DCD         |??_C@_1EK@FDKGIIKM@?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAM?$AAM?$AAC?$AAS?$AAe?$AAt?$AAB?$AAl?$AAo?$AAc?$AAk?$AAL?$AAe?$AAn?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe@|
  02ab0		 |$LN39@MMCSelectC|
  02ab0	00000000	 DCD         |??_C@_1KA@GCFNELEL@?$AAM?$AAM?$AAC?$AAS?$AAe?$AAl?$AAe?$AAc?$AAt?$AAC?$AAa?$AAr?$AAd?$AA?3?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?5?$AAw?$AAa?$AAi?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAf@|
  02ab4		 |$LN40@MMCSelectC|
  02ab4	00000000	 DCD         |??_C@_1GE@FEOFGONO@?$AAM?$AAM?$AAC?$AAS?$AAe?$AAl?$AAe?$AAc?$AAt?$AAC?$AAa?$AAr?$AAd?$AA?3?$AA?5?$AAp?$AAo?$AAl?$AAl?$AA?5?$AAs?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?5?$AAe?$AAr?$AAr?$AAo?$AAr@|
  02ab8		 |$LN41@MMCSelectC|
  02ab8	00000000	 DCD         |__security_cookie|
  02abc		 |$M45155|

			 ENDP  ; |MMCSelectCard|

	EXPORT	|??_C@_1JO@JCBKFGLI@?$AAM?$AAM?$AAC?$AAI?$AAs?$AAs?$AAu?$AAe?$AAI?$AAd?$AAe?$AAn?$AAt?$AAi?$AAf?$AAy?$AA?3?$AA?5?$AAb?$AAu?$AAs?$AAy?$AA?5?$AAb?$AAi?$AAt?$AA?5?$AAn?$AAe?$AAv?$AAe?$AAr@| [ DATA ] ; `string'
	EXPORT	|??_C@_1KE@BIOPJCPI@?$AAM?$AAM?$AAC?$AAI?$AAs?$AAs?$AAu?$AAe?$AAI?$AAd?$AAe?$AAn?$AAt?$AAi?$AAf?$AAy?$AA?3?$AA?5?$AAb?$AAu?$AAs?$AAy?$AA?5?$AAb?$AAi?$AAt?$AA?5?$AAn?$AAe?$AAv?$AAe?$AAr@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FK@HAIGBMKL@?$AAM?$AAM?$AAC?$AAI?$AAs?$AAs?$AAu?$AAe?$AAI?$AAd?$AAe?$AAn?$AAt?$AAi?$AAf?$AAy?$AA?3?$AA?5?$AAM?$AAM?$AAC?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAR?$AAe?$AAs?$AAp@| [ DATA ] ; `string'
	EXPORT	|MMCIssueIdentify|

  00068			 AREA	 |.pdata|, PDATA
|$T45178| DCD	|$LN43@MMCIssueId|
	DCD	0x4001bc04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JO@JCBKFGLI@?$AAM?$AAM?$AAC?$AAI?$AAs?$AAs?$AAu?$AAe?$AAI?$AAd?$AAe?$AAn?$AAt?$AAi?$AAf?$AAy?$AA?3?$AA?5?$AAb?$AAu?$AAs?$AAy?$AA?5?$AAb?$AAi?$AAt?$AA?5?$AAn?$AAe?$AAv?$AAe?$AAr@| DCB "M"
	DCB	0x0, "M", 0x0, "C", 0x0, "I", 0x0, "s", 0x0, "s", 0x0, "u"
	DCB	0x0, "e", 0x0, "I", 0x0, "d", 0x0, "e", 0x0, "n", 0x0, "t"
	DCB	0x0, "i", 0x0, "f", 0x0, "y", 0x0, ":", 0x0, " ", 0x0, "b"
	DCB	0x0, "u", 0x0, "s", 0x0, "y", 0x0, " ", 0x0, "b", 0x0, "i"
	DCB	0x0, "t", 0x0, " ", 0x0, "n", 0x0, "e", 0x0, "v", 0x0, "e"
	DCB	0x0, "r", 0x0, " ", 0x0, "d", 0x0, "e", 0x0, "a", 0x0, "c"
	DCB	0x0, "t", 0x0, "i", 0x0, "v", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, "d", 0x0, " ", 0x0, "-", 0x0, "-", 0x0, " ", 0x0, "p"
	DCB	0x0, "r", 0x0, "o", 0x0, "b", 0x0, "a", 0x0, "b", 0x0, "l"
	DCB	0x0, "y", 0x0, " ", 0x0, "n", 0x0, "o", 0x0, " ", 0x0, "c"
	DCB	0x0, "a", 0x0, "r", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "o"
	DCB	0x0, "c", 0x0, "r", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "X", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KE@BIOPJCPI@?$AAM?$AAM?$AAC?$AAI?$AAs?$AAs?$AAu?$AAe?$AAI?$AAd?$AAe?$AAn?$AAt?$AAi?$AAf?$AAy?$AA?3?$AA?5?$AAb?$AAu?$AAs?$AAy?$AA?5?$AAb?$AAi?$AAt?$AA?5?$AAn?$AAe?$AAv?$AAe?$AAr@| DCB "M"
	DCB	0x0, "M", 0x0, "C", 0x0, "I", 0x0, "s", 0x0, "s", 0x0, "u"
	DCB	0x0, "e", 0x0, "I", 0x0, "d", 0x0, "e", 0x0, "n", 0x0, "t"
	DCB	0x0, "i", 0x0, "f", 0x0, "y", 0x0, ":", 0x0, " ", 0x0, "b"
	DCB	0x0, "u", 0x0, "s", 0x0, "y", 0x0, " ", 0x0, "b", 0x0, "i"
	DCB	0x0, "t", 0x0, " ", 0x0, "n", 0x0, "e", 0x0, "v", 0x0, "e"
	DCB	0x0, "r", 0x0, " ", 0x0, "d", 0x0, "e", 0x0, "a", 0x0, "c"
	DCB	0x0, "t", 0x0, "i", 0x0, "v", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, "d", 0x0, " ", 0x0, "-", 0x0, "-", 0x0, " ", 0x0, "n"
	DCB	0x0, "o", 0x0, " ", 0x0, "s", 0x0, "d", 0x0, " ", 0x0, "c"
	DCB	0x0, "a", 0x0, "r", 0x0, "d", 0x0, " ", 0x0, "d", 0x0, "e"
	DCB	0x0, "t", 0x0, "e", 0x0, "c", 0x0, "t", 0x0, "e", 0x0, "d"
	DCB	0x0, ",", 0x0, " ", 0x0, "o", 0x0, "c", 0x0, "r", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "X"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FK@HAIGBMKL@?$AAM?$AAM?$AAC?$AAI?$AAs?$AAs?$AAu?$AAe?$AAI?$AAd?$AAe?$AAn?$AAt?$AAi?$AAf?$AAy?$AA?3?$AA?5?$AAM?$AAM?$AAC?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAR?$AAe?$AAs?$AAp@| DCB "M"
	DCB	0x0, "M", 0x0, "C", 0x0, "I", 0x0, "s", 0x0, "s", 0x0, "u"
	DCB	0x0, "e", 0x0, "I", 0x0, "d", 0x0, "e", 0x0, "n", 0x0, "t"
	DCB	0x0, "i", 0x0, "f", 0x0, "y", 0x0, ":", 0x0, " ", 0x0, "M"
	DCB	0x0, "M", 0x0, "C", 0x0, "C", 0x0, "o", 0x0, "m", 0x0, "m"
	DCB	0x0, "a", 0x0, "n", 0x0, "d", 0x0, "R", 0x0, "e", 0x0, "s"
	DCB	0x0, "p", 0x0, "o", 0x0, "n", 0x0, "s", 0x0, "e", 0x0, " "
	DCB	0x0, "E", 0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  02abc			 AREA	 |.text|, CODE, ARM

  02abc		 |MMCIssueIdentify| PROC

; 850  : {

  02abc		 |$LN43@MMCIssueId|
  02abc	e1a0c00d	 mov         r12, sp
  02ac0	e92d0001	 stmdb       sp!, {r0}
  02ac4	e92d5000	 stmdb       sp!, {r12, lr}
  02ac8	e24dd064	 sub         sp, sp, #0x64
  02acc		 |$M45175|

; 851  :     BOOL bCommandFailed;
; 852  :     UINT32 StartTime;
; 853  :     int bTimeout;
; 854  :     BOOL bCardSupportsSD2 = FALSE;

  02acc	e3a03000	 mov         r3, #0
  02ad0	e58d3008	 str         r3, [sp, #8]

; 855  :     
; 856  :     OALMSGX(OAL_FUNC, (TEXT("MMCIssueIdentify: MMCIssueIdentify \r\n")));
; 857  : 
; 858  :     MMCSetTranSpeed(1000000);  // set clock to reasonable rate

  02ad4	e3a0093d	 mov         r0, #0x3D, 18
  02ad8	e3800d09	 orr         r0, r0, #9, 26
  02adc	eb000000	 bl          MMCSetTranSpeed

; 859  : 
; 860  :     // CMD1: SEND_OP_COND - send operating conditions
; 861  :     // result is wire or of all cards
; 862  :     MMCcmd.command = GO_IDLE_STATE;

  02ae0	e59f26b0	 ldr         r2, [pc, #0x6B0]
  02ae4	e3a03000	 mov         r3, #0
  02ae8	e5c23004	 strb        r3, [r2, #4]

; 863  :     MMCcmd.argument = 0;

  02aec	e59f26a4	 ldr         r2, [pc, #0x6A4]
  02af0	e3a03000	 mov         r3, #0
  02af4	e5823008	 str         r3, [r2, #8]

; 864  :     MMCcmd.num_blocks = 1;

  02af8	e59f2698	 ldr         r2, [pc, #0x698]
  02afc	e3a03001	 mov         r3, #1
  02b00	e582300c	 str         r3, [r2, #0xC]

; 865  :     MMCcmd.block_len = 512;

  02b04	e59f268c	 ldr         r2, [pc, #0x68C]
  02b08	e3a03c02	 mov         r3, #2, 24
  02b0c	e5823010	 str         r3, [r2, #0x10]

; 866  :     MMCcmd.card_type = CARDTYPE_MMC;

  02b10	e59f2680	 ldr         r2, [pc, #0x680]
  02b14	e3a03001	 mov         r3, #1
  02b18	e5823000	 str         r3, [r2]

; 867  :     
; 868  :     OALMSGX(OAL_FUNC, (TEXT("GO_IDLE_STATE\r\n")));
; 869  :     if ( MMCCommandResponse(&MMCcmd, 1) )

  02b1c	e3a01001	 mov         r1, #1
  02b20	e59f0670	 ldr         r0, [pc, #0x670]
  02b24	eb000000	 bl          MMCCommandResponse
  02b28	e58d0014	 str         r0, [sp, #0x14]
  02b2c	e59d3014	 ldr         r3, [sp, #0x14]
  02b30	e3530000	 cmp         r3, #0
  02b34	0a00000b	 beq         |$LN32@MMCIssueId|

; 870  :     {
; 871  :         OALMSG(OAL_ERROR, (TEXT("MMCIssueIdentify: MMCCommandResponse Error\r\n")));

  02b38	e59f3660	 ldr         r3, [pc, #0x660]
  02b3c	e5933440	 ldr         r3, [r3, #0x440]
  02b40	e3130001	 tst         r3, #1
  02b44	0a000004	 beq         |$LN35@MMCIssueId|
  02b48	e59f0658	 ldr         r0, [pc, #0x658]
  02b4c	eb000000	 bl          NKDbgPrintfW
  02b50	e3a03001	 mov         r3, #1
  02b54	e58d3018	 str         r3, [sp, #0x18]
  02b58	ea000001	 b           |$LN36@MMCIssueId|
  02b5c		 |$LN35@MMCIssueId|
  02b5c	e3a03000	 mov         r3, #0
  02b60	e58d3018	 str         r3, [sp, #0x18]
  02b64		 |$LN36@MMCIssueId|

; 872  :         goto command_error;

  02b64	ea000185	 b           |$command_error$44687|
  02b68		 |$LN32@MMCIssueId|

; 873  :     }
; 874  : 
; 875  :     OALStall(1 * 1000);

  02b68	e3a00ffa	 mov         r0, #0xFA, 30
  02b6c	eb000000	 bl          OALStall

; 876  : 
; 877  :     OALMSGX(OAL_FUNC, (TEXT("GO_IDLE_STATE\r\n")));
; 878  :     MMCCommandResponse(&MMCcmd, 0);

  02b70	e3a01000	 mov         r1, #0
  02b74	e59f061c	 ldr         r0, [pc, #0x61C]
  02b78	eb000000	 bl          MMCCommandResponse

; 879  : 
; 880  :     MMCcmd.ocr = 0;

  02b7c	e59f2614	 ldr         r2, [pc, #0x614]
  02b80	e3a03000	 mov         r3, #0
  02b84	e5823018	 str         r3, [r2, #0x18]

; 881  :     MMCcmd.card_type = CARDTYPE_SD;     // must be set during detection of SD card

  02b88	e59f2608	 ldr         r2, [pc, #0x608]
  02b8c	e3a03002	 mov         r3, #2
  02b90	e5823000	 str         r3, [r2]

; 882  : 
; 883  :     OALStall(1 * 1000);

  02b94	e3a00ffa	 mov         r0, #0xFA, 30
  02b98	eb000000	 bl          OALStall

; 884  : 
; 885  :     StartTime = OALGetTickCount();

  02b9c	eb000000	 bl          OALGetTickCount
  02ba0	e58d001c	 str         r0, [sp, #0x1C]
  02ba4	e59d301c	 ldr         r3, [sp, #0x1C]
  02ba8	e58d300c	 str         r3, [sp, #0xC]

; 886  :     bTimeout = FALSE;

  02bac	e3a03000	 mov         r3, #0
  02bb0	e58d3004	 str         r3, [sp, #4]

; 887  : 
; 888  :     // SD 2.0 spec requires CMD8 before ACMD41
; 889  :     MMCcmd.command = SD_SEND_IF_COND;

  02bb4	e59f25dc	 ldr         r2, [pc, #0x5DC]
  02bb8	e3a03008	 mov         r3, #8
  02bbc	e5c23004	 strb        r3, [r2, #4]

; 890  : 
; 891  :     // specify VSH = 2.7-3.6V (bit 8), check pattern = 0xaa (bits 7:0)
; 892  :     MMCcmd.argument = 0x000001aa;

  02bc0	e59f25d0	 ldr         r2, [pc, #0x5D0]
  02bc4	e3a03c01	 mov         r3, #1, 24
  02bc8	e38330aa	 orr         r3, r3, #0xAA
  02bcc	e5823008	 str         r3, [r2, #8]

; 893  : 
; 894  :     OALMSGX(OAL_FUNC, (TEXT("SD_SEND_IF_COND\r\n")));
; 895  :     if ( MMCCommandResponse(&MMCcmd, 0) )

  02bd0	e3a01000	 mov         r1, #0
  02bd4	e59f05bc	 ldr         r0, [pc, #0x5BC]
  02bd8	eb000000	 bl          MMCCommandResponse
  02bdc	e58d0020	 str         r0, [sp, #0x20]
  02be0	e59d3020	 ldr         r3, [sp, #0x20]
  02be4	e3530000	 cmp         r3, #0
  02be8	0a000009	 beq         |$LN31@MMCIssueId|

; 896  :     {
; 897  :         // CMD8 failed, not SD 2.00 card
; 898  :         MMCcmd.command = GO_IDLE_STATE;

  02bec	e59f25a4	 ldr         r2, [pc, #0x5A4]
  02bf0	e3a03000	 mov         r3, #0
  02bf4	e5c23004	 strb        r3, [r2, #4]

; 899  :         MMCcmd.argument = 0;

  02bf8	e59f2598	 ldr         r2, [pc, #0x598]
  02bfc	e3a03000	 mov         r3, #0
  02c00	e5823008	 str         r3, [r2, #8]

; 900  :         OALMSGX(OAL_FUNC, (TEXT("GO_IDLE_STATE\r\n")));
; 901  :         MMCCommandResponse(&MMCcmd, 0);

  02c04	e3a01000	 mov         r1, #0
  02c08	e59f0588	 ldr         r0, [pc, #0x588]
  02c0c	eb000000	 bl          MMCCommandResponse

; 902  :     }
; 903  :     else

  02c10	ea000001	 b           |$LN30@MMCIssueId|
  02c14		 |$LN31@MMCIssueId|

; 904  :     {
; 905  :         // Need to verify voltage support and check pattern
; 906  :         bCardSupportsSD2 = TRUE;

  02c14	e3a03001	 mov         r3, #1
  02c18	e58d3008	 str         r3, [sp, #8]
  02c1c		 |$LN30@MMCIssueId|
  02c1c		 |$LN29@MMCIssueId|

; 907  :     }
; 908  :     
; 909  :     // SD spec says timeout for ACMD41 should be 1 second
; 910  :     for(;;)
; 911  :     {
; 912  :         if (OALGetTickCount() - StartTime > 1000)

  02c1c	eb000000	 bl          OALGetTickCount
  02c20	e58d0024	 str         r0, [sp, #0x24]
  02c24	e59d2024	 ldr         r2, [sp, #0x24]
  02c28	e59d300c	 ldr         r3, [sp, #0xC]
  02c2c	e0423003	 sub         r3, r2, r3
  02c30	e3530ffa	 cmp         r3, #0xFA, 30
  02c34	9a000001	 bls         |$LN27@MMCIssueId|

; 913  :             bTimeout = TRUE;

  02c38	e3a03001	 mov         r3, #1
  02c3c	e58d3004	 str         r3, [sp, #4]
  02c40		 |$LN27@MMCIssueId|

; 914  : 
; 915  :         MMCcmd.command = APP_CMD;

  02c40	e59f2550	 ldr         r2, [pc, #0x550]
  02c44	e3a03037	 mov         r3, #0x37
  02c48	e5c23004	 strb        r3, [r2, #4]

; 916  :         MMCcmd.argument = (pDisk->d_RelAddress) << 16;

  02c4c	e59d306c	 ldr         r3, [sp, #0x6C]
  02c50	e2833014	 add         r3, r3, #0x14
  02c54	e5933000	 ldr         r3, [r3]
  02c58	e1a02803	 mov         r2, r3, lsl #16
  02c5c	e59f3534	 ldr         r3, [pc, #0x534]
  02c60	e5832008	 str         r2, [r3, #8]

; 917  : 
; 918  :         OALMSGX(OAL_FUNC, (TEXT("APP_CMD\r\n")));
; 919  :         if ( MMCCommandResponse(&MMCcmd, 0) )

  02c64	e3a01000	 mov         r1, #0
  02c68	e59f0528	 ldr         r0, [pc, #0x528]
  02c6c	eb000000	 bl          MMCCommandResponse
  02c70	e58d0028	 str         r0, [sp, #0x28]
  02c74	e59d3028	 ldr         r3, [sp, #0x28]
  02c78	e3530000	 cmp         r3, #0
  02c7c	0a000000	 beq         |$LN26@MMCIssueId|

; 920  :             goto sd_det_error;

  02c80	ea000049	 b           |$sd_det_error$44695|
  02c84		 |$LN26@MMCIssueId|

; 921  : 
; 922  :         OALStall(1 * 1000);

  02c84	e3a00ffa	 mov         r0, #0xFA, 30
  02c88	eb000000	 bl          OALStall

; 923  : 
; 924  :         MMCcmd.command = SD_SEND_OP_CODE;

  02c8c	e59f2504	 ldr         r2, [pc, #0x504]
  02c90	e3a03029	 mov         r3, #0x29
  02c94	e5c23004	 strb        r3, [r2, #4]

; 925  :         if (bCardSupportsSD2)

  02c98	e59d3008	 ldr         r3, [sp, #8]
  02c9c	e3530000	 cmp         r3, #0
  02ca0	0a000004	 beq         |$LN25@MMCIssueId|

; 926  :         {
; 927  :             // specify 3.3V, HC
; 928  :             MMCcmd.argument = 0x40200000;

  02ca4	e59f24ec	 ldr         r2, [pc, #0x4EC]
  02ca8	e3a03101	 mov         r3, #1, 2
  02cac	e3833602	 orr         r3, r3, #2, 12
  02cb0	e5823008	 str         r3, [r2, #8]

; 929  :         }
; 930  :         else

  02cb4	ea000002	 b           |$LN24@MMCIssueId|
  02cb8		 |$LN25@MMCIssueId|

; 931  :         {
; 932  :             // specify 3.3V
; 933  :             MMCcmd.argument = 0x00200000;

  02cb8	e59f24d8	 ldr         r2, [pc, #0x4D8]
  02cbc	e3a03602	 mov         r3, #2, 12
  02cc0	e5823008	 str         r3, [r2, #8]
  02cc4		 |$LN24@MMCIssueId|

; 934  :         }
; 935  : 
; 936  :         OALMSGX(OAL_FUNC, (TEXT("SD_SEND_OP_CODE\r\n")));
; 937  :         if ( MMCCommandResponse(&MMCcmd, 0) )

  02cc4	e3a01000	 mov         r1, #0
  02cc8	e59f04c8	 ldr         r0, [pc, #0x4C8]
  02ccc	eb000000	 bl          MMCCommandResponse
  02cd0	e58d002c	 str         r0, [sp, #0x2C]
  02cd4	e59d302c	 ldr         r3, [sp, #0x2C]
  02cd8	e3530000	 cmp         r3, #0
  02cdc	0a000000	 beq         |$LN23@MMCIssueId|

; 938  :             goto sd_det_error;

  02ce0	ea000031	 b           |$sd_det_error$44695|
  02ce4		 |$LN23@MMCIssueId|

; 939  : 
; 940  :         if ( (!(MMC_OCR_BUSY(MMCcmd.ocr))) || bTimeout)

  02ce4	e59f34ac	 ldr         r3, [pc, #0x4AC]
  02ce8	e5933018	 ldr         r3, [r3, #0x18]
  02cec	e3130102	 tst         r3, #2, 2
  02cf0	1a000002	 bne         |$LN21@MMCIssueId|
  02cf4	e59d3004	 ldr         r3, [sp, #4]
  02cf8	e3530000	 cmp         r3, #0
  02cfc	0a000000	 beq         |$LN22@MMCIssueId|
  02d00		 |$LN21@MMCIssueId|

; 941  :             break;

  02d00	ea000003	 b           |$LN28@MMCIssueId|
  02d04		 |$LN22@MMCIssueId|

; 942  : 
; 943  :         OALStall(100 * 1000);

  02d04	e3a00b61	 mov         r0, #0x61, 22
  02d08	e3800e2a	 orr         r0, r0, #0x2A, 28
  02d0c	eb000000	 bl          OALStall

; 944  :     }

  02d10	eaffffc1	 b           |$LN29@MMCIssueId|
  02d14		 |$LN28@MMCIssueId|

; 945  : 
; 946  :     // No card or not an sd one...
; 947  :     if ( MMC_OCR_BUSY(MMCcmd.ocr) )

  02d14	e59f347c	 ldr         r3, [pc, #0x47C]
  02d18	e5933018	 ldr         r3, [r3, #0x18]
  02d1c	e3130102	 tst         r3, #2, 2
  02d20	1a00000d	 bne         |$LN20@MMCIssueId|

; 948  :     {
; 949  :         OALMSG(OAL_ERROR, (TEXT("MMCIssueIdentify: busy bit never deactivated -- no sd card detected, ocr = 0x%X\r\n"), MMCcmd.ocr));

  02d24	e59f3474	 ldr         r3, [pc, #0x474]
  02d28	e5933440	 ldr         r3, [r3, #0x440]
  02d2c	e3130001	 tst         r3, #1
  02d30	0a000006	 beq         |$LN37@MMCIssueId|
  02d34	e59f345c	 ldr         r3, [pc, #0x45C]
  02d38	e5931018	 ldr         r1, [r3, #0x18]
  02d3c	e59f0460	 ldr         r0, [pc, #0x460]
  02d40	eb000000	 bl          NKDbgPrintfW
  02d44	e3a03001	 mov         r3, #1
  02d48	e58d3030	 str         r3, [sp, #0x30]
  02d4c	ea000001	 b           |$LN38@MMCIssueId|
  02d50		 |$LN37@MMCIssueId|
  02d50	e3a03000	 mov         r3, #0
  02d54	e58d3030	 str         r3, [sp, #0x30]
  02d58		 |$LN38@MMCIssueId|

; 950  :         goto sd_det_error;

  02d58	ea000013	 b           |$sd_det_error$44695|
  02d5c		 |$LN20@MMCIssueId|

; 951  :     }
; 952  :     
; 953  :     // check for high capacity SD memory card, OCR bit 30 == 1: high capacity card
; 954  :     if (bCardSupportsSD2 && (MMCcmd.ocr & (1 << 30)))

  02d5c	e59d3008	 ldr         r3, [sp, #8]
  02d60	e3530000	 cmp         r3, #0
  02d64	0a00000b	 beq         |$LN19@MMCIssueId|
  02d68	e59f3428	 ldr         r3, [pc, #0x428]
  02d6c	e5933018	 ldr         r3, [r3, #0x18]
  02d70	e3130101	 tst         r3, #1, 2
  02d74	0a000007	 beq         |$LN19@MMCIssueId|

; 955  :     {
; 956  :         MMCcmd.card_type = CARDTYPE_SDHC;

  02d78	e59f2418	 ldr         r2, [pc, #0x418]
  02d7c	e3a03003	 mov         r3, #3
  02d80	e5823000	 str         r3, [r2]

; 957  :         pDisk->d_CardType = CARDTYPE_SDHC;

  02d84	e59d306c	 ldr         r3, [sp, #0x6C]
  02d88	e2832010	 add         r2, r3, #0x10
  02d8c	e3a03003	 mov         r3, #3
  02d90	e5823000	 str         r3, [r2]

; 958  :     }
; 959  :     else

  02d94	ea000003	 b           |$LN18@MMCIssueId|
  02d98		 |$LN19@MMCIssueId|

; 960  :     {
; 961  :         pDisk->d_CardType = CARDTYPE_SD;

  02d98	e59d306c	 ldr         r3, [sp, #0x6C]
  02d9c	e2832010	 add         r2, r3, #0x10
  02da0	e3a03002	 mov         r3, #2
  02da4	e5823000	 str         r3, [r2]
  02da8		 |$LN18@MMCIssueId|

; 962  :     }
; 963  :     
; 964  :     OALMSGX(OAL_INFO, (TEXT("MMCIssueIdentify: SD%s card detected\r\n"), MMCcmd.card_type == CARDTYPE_SDHC ? TEXT(" HC") : TEXT("")));
; 965  :     goto found_card;

  02da8	ea00006a	 b           |$found_card$44706|
  02dac		 |$sd_det_error$44695|

; 966  :     
; 967  : sd_det_error:
; 968  :     MMCcmd.command = GO_IDLE_STATE;

  02dac	e59f23e4	 ldr         r2, [pc, #0x3E4]
  02db0	e3a03000	 mov         r3, #0
  02db4	e5c23004	 strb        r3, [r2, #4]

; 969  :     MMCcmd.argument = 0;

  02db8	e59f23d8	 ldr         r2, [pc, #0x3D8]
  02dbc	e3a03000	 mov         r3, #0
  02dc0	e5823008	 str         r3, [r2, #8]

; 970  :     MMCcmd.num_blocks = 1;

  02dc4	e59f23cc	 ldr         r2, [pc, #0x3CC]
  02dc8	e3a03001	 mov         r3, #1
  02dcc	e582300c	 str         r3, [r2, #0xC]

; 971  :     MMCcmd.block_len = 512;

  02dd0	e59f23c0	 ldr         r2, [pc, #0x3C0]
  02dd4	e3a03c02	 mov         r3, #2, 24
  02dd8	e5823010	 str         r3, [r2, #0x10]

; 972  :     MMCcmd.card_type = CARDTYPE_MMC;

  02ddc	e59f23b4	 ldr         r2, [pc, #0x3B4]
  02de0	e3a03001	 mov         r3, #1
  02de4	e5823000	 str         r3, [r2]

; 973  : 
; 974  :     OALMSGX(OAL_FUNC, (TEXT("GO_IDLE_STATE\r\n")));
; 975  :     if ( MMCCommandResponse(&MMCcmd, 1) )

  02de8	e3a01001	 mov         r1, #1
  02dec	e59f03a4	 ldr         r0, [pc, #0x3A4]
  02df0	eb000000	 bl          MMCCommandResponse
  02df4	e58d0034	 str         r0, [sp, #0x34]
  02df8	e59d3034	 ldr         r3, [sp, #0x34]
  02dfc	e3530000	 cmp         r3, #0
  02e00	0a000000	 beq         |$LN17@MMCIssueId|

; 976  :         goto command_error;

  02e04	ea0000dd	 b           |$command_error$44687|
  02e08		 |$LN17@MMCIssueId|

; 977  : 
; 978  :     OALStall(1 * 1000);

  02e08	e3a00ffa	 mov         r0, #0xFA, 30
  02e0c	eb000000	 bl          OALStall

; 979  : 
; 980  :     OALMSGX(OAL_FUNC, (TEXT("GO_IDLE_STATE\r\n")));
; 981  :     MMCCommandResponse(&MMCcmd, 0);

  02e10	e3a01000	 mov         r1, #0
  02e14	e59f037c	 ldr         r0, [pc, #0x37C]
  02e18	eb000000	 bl          MMCCommandResponse

; 982  :     
; 983  :     StartTime = OALGetTickCount();

  02e1c	eb000000	 bl          OALGetTickCount
  02e20	e58d0038	 str         r0, [sp, #0x38]
  02e24	e59d3038	 ldr         r3, [sp, #0x38]
  02e28	e58d300c	 str         r3, [sp, #0xC]

; 984  :     bTimeout = FALSE;

  02e2c	e3a03000	 mov         r3, #0
  02e30	e58d3004	 str         r3, [sp, #4]

; 985  :     MMCcmd.ocr = 0;

  02e34	e59f235c	 ldr         r2, [pc, #0x35C]
  02e38	e3a03000	 mov         r3, #0
  02e3c	e5823018	 str         r3, [r2, #0x18]
  02e40		 |$LN16@MMCIssueId|

; 986  : 
; 987  :     for(;;)
; 988  :     {
; 989  :         if (OALGetTickCount() - StartTime > 1000)

  02e40	eb000000	 bl          OALGetTickCount
  02e44	e58d003c	 str         r0, [sp, #0x3C]
  02e48	e59d203c	 ldr         r2, [sp, #0x3C]
  02e4c	e59d300c	 ldr         r3, [sp, #0xC]
  02e50	e0423003	 sub         r3, r2, r3
  02e54	e3530ffa	 cmp         r3, #0xFA, 30
  02e58	9a000001	 bls         |$LN14@MMCIssueId|

; 990  :             bTimeout = TRUE;

  02e5c	e3a03001	 mov         r3, #1
  02e60	e58d3004	 str         r3, [sp, #4]
  02e64		 |$LN14@MMCIssueId|

; 991  : 
; 992  :         MMCcmd.command = SEND_OP_COND;

  02e64	e59f232c	 ldr         r2, [pc, #0x32C]
  02e68	e3a03001	 mov         r3, #1
  02e6c	e5c23004	 strb        r3, [r2, #4]

; 993  :         MMCcmd.argument = 0x00200000;

  02e70	e59f2320	 ldr         r2, [pc, #0x320]
  02e74	e3a03602	 mov         r3, #2, 12
  02e78	e5823008	 str         r3, [r2, #8]

; 994  :         OALMSGX(OAL_FUNC, (TEXT("SEND_OP_COND\r\n")));
; 995  :         bCommandFailed = MMCCommandResponse(&MMCcmd, 0);

  02e7c	e3a01000	 mov         r1, #0
  02e80	e59f0310	 ldr         r0, [pc, #0x310]
  02e84	eb000000	 bl          MMCCommandResponse
  02e88	e58d0040	 str         r0, [sp, #0x40]
  02e8c	e59d3040	 ldr         r3, [sp, #0x40]
  02e90	e58d3000	 str         r3, [sp]

; 996  : 
; 997  :         if (bTimeout || !(MMC_OCR_BUSY(MMCcmd.ocr)) || bCommandFailed)

  02e94	e59d3004	 ldr         r3, [sp, #4]
  02e98	e3530000	 cmp         r3, #0
  02e9c	1a000006	 bne         |$LN12@MMCIssueId|
  02ea0	e59f32f0	 ldr         r3, [pc, #0x2F0]
  02ea4	e5933018	 ldr         r3, [r3, #0x18]
  02ea8	e3130102	 tst         r3, #2, 2
  02eac	1a000002	 bne         |$LN12@MMCIssueId|
  02eb0	e59d3000	 ldr         r3, [sp]
  02eb4	e3530000	 cmp         r3, #0
  02eb8	0a000000	 beq         |$LN13@MMCIssueId|
  02ebc		 |$LN12@MMCIssueId|

; 998  :             break;

  02ebc	ea000000	 b           |$LN15@MMCIssueId|
  02ec0		 |$LN13@MMCIssueId|

; 999  :     }

  02ec0	eaffffde	 b           |$LN16@MMCIssueId|
  02ec4		 |$LN15@MMCIssueId|

; 1000 : 
; 1001 :     if ( !bCommandFailed && !(MMC_OCR_BUSY(MMCcmd.ocr)) )

  02ec4	e59d3000	 ldr         r3, [sp]
  02ec8	e3530000	 cmp         r3, #0
  02ecc	1a00000b	 bne         |$LN11@MMCIssueId|
  02ed0	e59f32c0	 ldr         r3, [pc, #0x2C0]
  02ed4	e5933018	 ldr         r3, [r3, #0x18]
  02ed8	e3130102	 tst         r3, #2, 2
  02edc	0a000007	 beq         |$LN11@MMCIssueId|

; 1002 :     {
; 1003 :         OALMSGX(OAL_INFO, (TEXT("MMCIssueIdentify: MMC card detected\r\n")));
; 1004 :         pDisk->d_CardType = CARDTYPE_MMC;

  02ee0	e59d306c	 ldr         r3, [sp, #0x6C]
  02ee4	e2832010	 add         r2, r3, #0x10
  02ee8	e3a03001	 mov         r3, #1
  02eec	e5823000	 str         r3, [r2]

; 1005 :         pDisk->d_RelAddress = 1;

  02ef0	e59d306c	 ldr         r3, [sp, #0x6C]
  02ef4	e2832014	 add         r2, r3, #0x14
  02ef8	e3a03001	 mov         r3, #1
  02efc	e5823000	 str         r3, [r2]
  02f00		 |$LN11@MMCIssueId|

; 1006 :     }
; 1007 : 
; 1008 :     OALStall(1 * 1000);

  02f00	e3a00ffa	 mov         r0, #0xFA, 30
  02f04	eb000000	 bl          OALStall

; 1009 : 
; 1010 :     if ( MMC_OCR_BUSY(MMCcmd.ocr) )

  02f08	e59f3288	 ldr         r3, [pc, #0x288]
  02f0c	e5933018	 ldr         r3, [r3, #0x18]
  02f10	e3130102	 tst         r3, #2, 2
  02f14	1a00000f	 bne         |$LN10@MMCIssueId|

; 1011 :     {
; 1012 :         OALMSG(OAL_ERROR, (TEXT("MMCIssueIdentify: busy bit never deactivated -- probably no card, ocr = 0x%X\r\n"), MMCcmd.ocr));

  02f18	e59f3280	 ldr         r3, [pc, #0x280]
  02f1c	e5933440	 ldr         r3, [r3, #0x440]
  02f20	e3130001	 tst         r3, #1
  02f24	0a000006	 beq         |$LN39@MMCIssueId|
  02f28	e59f3268	 ldr         r3, [pc, #0x268]
  02f2c	e5931018	 ldr         r1, [r3, #0x18]
  02f30	e59f0264	 ldr         r0, [pc, #0x264]
  02f34	eb000000	 bl          NKDbgPrintfW
  02f38	e3a03001	 mov         r3, #1
  02f3c	e58d3044	 str         r3, [sp, #0x44]
  02f40	ea000001	 b           |$LN40@MMCIssueId|
  02f44		 |$LN39@MMCIssueId|
  02f44	e3a03000	 mov         r3, #0
  02f48	e58d3044	 str         r3, [sp, #0x44]
  02f4c		 |$LN40@MMCIssueId|

; 1013 :         return FALSE;

  02f4c	e3a03000	 mov         r3, #0
  02f50	e58d3010	 str         r3, [sp, #0x10]
  02f54	ea00008b	 b           |$LN33@MMCIssueId|
  02f58		 |$LN10@MMCIssueId|
  02f58		 |$found_card$44706|

; 1014 :     }
; 1015 :     
; 1016 : found_card:
; 1017 :     
; 1018 :     MMCSetMMCState(pDisk, MMC_STATE_READY);

  02f58	e3a01001	 mov         r1, #1
  02f5c	e59d006c	 ldr         r0, [sp, #0x6C]
  02f60	eb000000	 bl          MMCSetMMCState

; 1019 : 
; 1020 :     // CMD2: ALL_SEND_CID - all cards send CID data
; 1021 :     MMCcmd.command = ALL_SEND_CID;

  02f64	e59f222c	 ldr         r2, [pc, #0x22C]
  02f68	e3a03002	 mov         r3, #2
  02f6c	e5c23004	 strb        r3, [r2, #4]

; 1022 :     MMCcmd.argument = 0;

  02f70	e59f2220	 ldr         r2, [pc, #0x220]
  02f74	e3a03000	 mov         r3, #0
  02f78	e5823008	 str         r3, [r2, #8]

; 1023 : 
; 1024 :     OALMSGX(OAL_FUNC, (TEXT("ALL_SEND_CID\r\n")));
; 1025 :     if ( MMCCommandResponse(&MMCcmd, 0) )

  02f7c	e3a01000	 mov         r1, #0
  02f80	e59f0210	 ldr         r0, [pc, #0x210]
  02f84	eb000000	 bl          MMCCommandResponse
  02f88	e58d0048	 str         r0, [sp, #0x48]
  02f8c	e59d3048	 ldr         r3, [sp, #0x48]
  02f90	e3530000	 cmp         r3, #0
  02f94	0a000000	 beq         |$LN9@MMCIssueId|

; 1026 :         goto command_error;

  02f98	ea000078	 b           |$command_error$44687|
  02f9c		 |$LN9@MMCIssueId|

; 1027 : 
; 1028 :     MMCSetMMCState(pDisk, MMC_STATE_IDENT);

  02f9c	e3a01002	 mov         r1, #2
  02fa0	e59d006c	 ldr         r0, [sp, #0x6C]
  02fa4	eb000000	 bl          MMCSetMMCState

; 1029 : 
; 1030 :     /*
; 1031 :      * CMD3: SET_RELATIVE_ADDR - set relative address
; 1032 :      * relative address should probably be interface number
; 1033 :      *
; 1034 :      * note: this command is SEND_RELATIVE_ADDRESS for SD cards
; 1035 :      */
; 1036 : 
; 1037 :     MMCcmd.card_type = pDisk->d_CardType;

  02fa8	e59d306c	 ldr         r3, [sp, #0x6C]
  02fac	e2833010	 add         r3, r3, #0x10
  02fb0	e5932000	 ldr         r2, [r3]
  02fb4	e59f31dc	 ldr         r3, [pc, #0x1DC]
  02fb8	e5832000	 str         r2, [r3]

; 1038 : 
; 1039 :     if (pDisk->d_CardType == CARDTYPE_MMC)

  02fbc	e59d306c	 ldr         r3, [sp, #0x6C]
  02fc0	e2833010	 add         r3, r3, #0x10
  02fc4	e5933000	 ldr         r3, [r3]
  02fc8	e3530001	 cmp         r3, #1
  02fcc	1a000014	 bne         |$LN8@MMCIssueId|

; 1040 :     {
; 1041 :         MMCcmd.command = SET_RELATIVE_ADDR;

  02fd0	e59f21c0	 ldr         r2, [pc, #0x1C0]
  02fd4	e3a03003	 mov         r3, #3
  02fd8	e5c23004	 strb        r3, [r2, #4]

; 1042 :         MMCcmd.argument = (pDisk->d_RelAddress) << 16;

  02fdc	e59d306c	 ldr         r3, [sp, #0x6C]
  02fe0	e2833014	 add         r3, r3, #0x14
  02fe4	e5933000	 ldr         r3, [r3]
  02fe8	e1a02803	 mov         r2, r3, lsl #16
  02fec	e59f31a4	 ldr         r3, [pc, #0x1A4]
  02ff0	e5832008	 str         r2, [r3, #8]

; 1043 : 
; 1044 :         OALMSGX(OAL_FUNC, (TEXT("SET_RELATIVE_ADDR\r\n")));
; 1045 :         if ( MMCCommandResponse(&MMCcmd, 0) )

  02ff4	e3a01000	 mov         r1, #0
  02ff8	e59f0198	 ldr         r0, [pc, #0x198]
  02ffc	eb000000	 bl          MMCCommandResponse
  03000	e58d004c	 str         r0, [sp, #0x4C]
  03004	e59d304c	 ldr         r3, [sp, #0x4C]
  03008	e3530000	 cmp         r3, #0
  0300c	0a000000	 beq         |$LN7@MMCIssueId|

; 1046 :             goto command_error;

  03010	ea00005a	 b           |$command_error$44687|
  03014		 |$LN7@MMCIssueId|

; 1047 : 
; 1048 :         MMCSetMMCState(pDisk, MMC_STATE_STBY);

  03014	e3a01003	 mov         r1, #3
  03018	e59d006c	 ldr         r0, [sp, #0x6C]
  0301c	eb000000	 bl          MMCSetMMCState
  03020	ea00001f	 b           |$LN6@MMCIssueId|
  03024		 |$LN8@MMCIssueId|

; 1049 :     }
; 1050 :     else if (pDisk->d_CardType == CARDTYPE_SD || pDisk->d_CardType == CARDTYPE_SDHC)

  03024	e59d306c	 ldr         r3, [sp, #0x6C]
  03028	e2833010	 add         r3, r3, #0x10
  0302c	e5933000	 ldr         r3, [r3]
  03030	e3530002	 cmp         r3, #2
  03034	0a000004	 beq         |$LN4@MMCIssueId|
  03038	e59d306c	 ldr         r3, [sp, #0x6C]
  0303c	e2833010	 add         r3, r3, #0x10
  03040	e5933000	 ldr         r3, [r3]
  03044	e3530003	 cmp         r3, #3
  03048	1a000015	 bne         |$LN5@MMCIssueId|
  0304c		 |$LN4@MMCIssueId|

; 1051 :     {
; 1052 :         MMCcmd.command = SEND_RELATIVE_ADDRESS;

  0304c	e59f2144	 ldr         r2, [pc, #0x144]
  03050	e3a03003	 mov         r3, #3
  03054	e5c23004	 strb        r3, [r2, #4]

; 1053 :         MMCcmd.argument = 0;

  03058	e59f2138	 ldr         r2, [pc, #0x138]
  0305c	e3a03000	 mov         r3, #0
  03060	e5823008	 str         r3, [r2, #8]

; 1054 : 
; 1055 :         OALMSGX(OAL_FUNC, (TEXT("SET_RELATIVE_ADDR\r\n")));
; 1056 :         if ( MMCCommandResponse(&MMCcmd, 0) )

  03064	e3a01000	 mov         r1, #0
  03068	e59f0128	 ldr         r0, [pc, #0x128]
  0306c	eb000000	 bl          MMCCommandResponse
  03070	e58d0050	 str         r0, [sp, #0x50]
  03074	e59d3050	 ldr         r3, [sp, #0x50]
  03078	e3530000	 cmp         r3, #0
  0307c	0a000000	 beq         |$LN3@MMCIssueId|

; 1057 :             goto command_error;

  03080	ea00003e	 b           |$command_error$44687|
  03084		 |$LN3@MMCIssueId|

; 1058 : 
; 1059 :         pDisk->d_RelAddress = MMCcmd.relative_address;

  03084	e59d306c	 ldr         r3, [sp, #0x6C]
  03088	e2832014	 add         r2, r3, #0x14
  0308c	e59f3104	 ldr         r3, [pc, #0x104]
  03090	e593301c	 ldr         r3, [r3, #0x1C]
  03094	e5823000	 str         r3, [r2]

; 1060 :         OALMSGX(OAL_INFO, (TEXT("SD card relative address is %d\r\n"), pDisk->d_RelAddress));
; 1061 : 
; 1062 :         MMCSetMMCState(pDisk, MMC_STATE_STBY);

  03098	e3a01003	 mov         r1, #3
  0309c	e59d006c	 ldr         r0, [sp, #0x6C]
  030a0	eb000000	 bl          MMCSetMMCState
  030a4		 |$LN5@MMCIssueId|
  030a4		 |$LN6@MMCIssueId|

; 1063 :     }
; 1064 : 
; 1065 :     /*
; 1066 :      * CMD10: SEND_CID - send card identification
; 1067 :      */
; 1068 :     MMCcmd.command = SEND_CID;

  030a4	e59f20ec	 ldr         r2, [pc, #0xEC]
  030a8	e3a0300a	 mov         r3, #0xA
  030ac	e5c23004	 strb        r3, [r2, #4]

; 1069 :     MMCcmd.argument = (pDisk->d_RelAddress) << 16;

  030b0	e59d306c	 ldr         r3, [sp, #0x6C]
  030b4	e2833014	 add         r3, r3, #0x14
  030b8	e5933000	 ldr         r3, [r3]
  030bc	e1a02803	 mov         r2, r3, lsl #16
  030c0	e59f30d0	 ldr         r3, [pc, #0xD0]
  030c4	e5832008	 str         r2, [r3, #8]

; 1070 : 
; 1071 :     OALMSGX(OAL_FUNC, (TEXT("SEND_CID\r\n")));
; 1072 :     if ( MMCCommandResponse(&MMCcmd, 0) )

  030c8	e3a01000	 mov         r1, #0
  030cc	e59f00c4	 ldr         r0, [pc, #0xC4]
  030d0	eb000000	 bl          MMCCommandResponse
  030d4	e58d0054	 str         r0, [sp, #0x54]
  030d8	e59d3054	 ldr         r3, [sp, #0x54]
  030dc	e3530000	 cmp         r3, #0
  030e0	0a000000	 beq         |$LN2@MMCIssueId|

; 1073 :         goto command_error;

  030e4	ea000025	 b           |$command_error$44687|
  030e8		 |$LN2@MMCIssueId|

; 1074 : 
; 1075 :     #if 0
; 1076 :     #ifdef DEBUG
; 1077 :         OALMSGX(OAL_INFO, (TEXT("MMCIssueIdentify: DUMP CID\r\n")));
; 1078 :         if (pDisk->d_CardType == CARDTYPE_SD || pDisk->d_CardType == CARDTYPE_SDHC)
; 1079 :         {
; 1080 :             char temp[10];
; 1081 :             //dump sd cid
; 1082 :             OALMSGX(OAL_INFO, (TEXT("SD: Mfr id: %d\r\n"), MMCcmd.cid.sd_cid.sdmid));
; 1083 :             UTIL_sd_cid_get_name(&MMCcmd, temp);
; 1084 :             OALMSGX(OAL_INFO, (TEXT("SD: Product name: %s\r\n"), temp));
; 1085 :             OALMSGX(OAL_INFO, (TEXT("SD: Serial number: 0x%X\r\n"), MMCcmd.cid.sd_cid.sdpsn));
; 1086 :         }
; 1087 :         else
; 1088 :         {
; 1089 :             char temp[10];
; 1090 :             // default to mmc
; 1091 :             OALMSGX(OAL_INFO, (TEXT("MMC: Mfr id: %d\r\n"), MMCcmd.cid.mmc_cid.mid));
; 1092 :             UTIL_mmc_cid_get_name(&MMCcmd, temp);
; 1093 :             OALMSGX(OAL_INFO, (TEXT("MMC: Product name: %s\r\n"), temp));
; 1094 :             OALMSGX(OAL_INFO, (TEXT("MMC: Serial number: 0x%X\r\n"), MMCcmd.cid.mmc_cid.psn));
; 1095 :         }
; 1096 :     #endif
; 1097 :     #endif
; 1098 :         
; 1099 :     /*
; 1100 :      * CMD9: SEND_CSD - send card specific data
; 1101 :      */
; 1102 :     MMCcmd.command = SEND_CSD;

  030e8	e59f20a8	 ldr         r2, [pc, #0xA8]
  030ec	e3a03009	 mov         r3, #9
  030f0	e5c23004	 strb        r3, [r2, #4]

; 1103 :     MMCcmd.argument = (pDisk->d_RelAddress) << 16;

  030f4	e59d306c	 ldr         r3, [sp, #0x6C]
  030f8	e2833014	 add         r3, r3, #0x14
  030fc	e5933000	 ldr         r3, [r3]
  03100	e1a02803	 mov         r2, r3, lsl #16
  03104	e59f308c	 ldr         r3, [pc, #0x8C]
  03108	e5832008	 str         r2, [r3, #8]

; 1104 : 
; 1105 :     OALMSGX(OAL_FUNC, (TEXT("SEND_CSD\r\n")));
; 1106 :     if ( MMCCommandResponse(&MMCcmd, 0) )

  0310c	e3a01000	 mov         r1, #0
  03110	e59f0080	 ldr         r0, [pc, #0x80]
  03114	eb000000	 bl          MMCCommandResponse
  03118	e58d0058	 str         r0, [sp, #0x58]
  0311c	e59d3058	 ldr         r3, [sp, #0x58]
  03120	e3530000	 cmp         r3, #0
  03124	0a000000	 beq         |$LN1@MMCIssueId|

; 1107 :         goto command_error;

  03128	ea000014	 b           |$command_error$44687|
  0312c		 |$LN1@MMCIssueId|

; 1108 : 
; 1109 :     OALMSGX(OAL_INFO, (TEXT("MMCIssueIdentify: CSD\r\n")));
; 1110 :     OALMSGX(OAL_INFO, (TEXT("reported block size = %d\r\n"), UTIL_csd_get_sectorsize(&MMCcmd)));
; 1111 :     OALMSGX(1, (TEXT("Card size is = %u 512 byte sectors\r\n"), UTIL_csd_get_devicesize(&MMCcmd)));
; 1112 :     OALMSGX(OAL_INFO, (TEXT("max clock freq = %d\r\n"), UTIL_csd_get_tran_speed(&MMCcmd)));
; 1113 : 
; 1114 :     // set up data in DiskInfo data structure
; 1115 :     //pDisk->d_DiskInfo.di_bytes_per_sect = UTIL_csd_get_sectorsize(&MMCcmd);
; 1116 :     // some SD (not SDHC) cards will report 1024 or 2048 byte sectors, this is only to 
; 1117 :     // allow >1GB capacity to be reported, bootloader FAT file system only supports 512 byte sectors.
; 1118 :     pDisk->d_DiskInfo.di_bytes_per_sect = 512;

  0312c	e59d306c	 ldr         r3, [sp, #0x6C]
  03130	e283201c	 add         r2, r3, #0x1C
  03134	e3a03c02	 mov         r3, #2, 24
  03138	e5823000	 str         r3, [r2]

; 1119 :     pDisk->d_DiskInfo.di_total_sectors = UTIL_csd_get_devicesize(&MMCcmd);

  0313c	e59f0054	 ldr         r0, [pc, #0x54]
  03140	eb000000	 bl          UTIL_csd_get_devicesize
  03144	e58d005c	 str         r0, [sp, #0x5C]
  03148	e59d306c	 ldr         r3, [sp, #0x6C]
  0314c	e2832018	 add         r2, r3, #0x18
  03150	e59d305c	 ldr         r3, [sp, #0x5C]
  03154	e5823000	 str         r3, [r2]

; 1120 : 
; 1121 :     pDisk->MaxClkFreq = UTIL_csd_get_tran_speed(&MMCcmd);

  03158	e59f0038	 ldr         r0, [pc, #0x38]
  0315c	eb000000	 bl          UTIL_csd_get_tran_speed
  03160	e58d0060	 str         r0, [sp, #0x60]
  03164	e59d306c	 ldr         r3, [sp, #0x6C]
  03168	e2832030	 add         r2, r3, #0x30
  0316c	e59d3060	 ldr         r3, [sp, #0x60]
  03170	e5823000	 str         r3, [r2]

; 1122 : 
; 1123 :     OALMSGX(OAL_INFO, (TEXT("identification complete\r\n")));
; 1124 :     return TRUE;

  03174	e3a03001	 mov         r3, #1
  03178	e58d3010	 str         r3, [sp, #0x10]
  0317c	ea000001	 b           |$LN33@MMCIssueId|
  03180		 |$command_error$44687|

; 1125 : 
; 1126 : command_error:
; 1127 :     OALMSGX(OAL_INFO, (TEXT("MMC: identification error\r\n")));
; 1128 :     return FALSE;

  03180	e3a03000	 mov         r3, #0
  03184	e58d3010	 str         r3, [sp, #0x10]
  03188		 |$LN33@MMCIssueId|

; 1129 : }

  03188	e59d0010	 ldr         r0, [sp, #0x10]
  0318c	e28dd064	 add         sp, sp, #0x64
  03190	e89d6000	 ldmia       sp, {sp, lr}
  03194	e12fff1e	 bx          lr
  03198		 |$LN44@MMCIssueId|
  03198		 |$LN45@MMCIssueId|
  03198	00000000	 DCD         |MMCcmd|
  0319c		 |$LN46@MMCIssueId|
  0319c	00000000	 DCD         |??_C@_1JO@JCBKFGLI@?$AAM?$AAM?$AAC?$AAI?$AAs?$AAs?$AAu?$AAe?$AAI?$AAd?$AAe?$AAn?$AAt?$AAi?$AAf?$AAy?$AA?3?$AA?5?$AAb?$AAu?$AAs?$AAy?$AA?5?$AAb?$AAi?$AAt?$AA?5?$AAn?$AAe?$AAv?$AAe?$AAr@|
  031a0		 |$LN47@MMCIssueId|
  031a0	00000000	 DCD         |dpCurSettings|
  031a4		 |$LN48@MMCIssueId|
  031a4	00000000	 DCD         |??_C@_1KE@BIOPJCPI@?$AAM?$AAM?$AAC?$AAI?$AAs?$AAs?$AAu?$AAe?$AAI?$AAd?$AAe?$AAn?$AAt?$AAi?$AAf?$AAy?$AA?3?$AA?5?$AAb?$AAu?$AAs?$AAy?$AA?5?$AAb?$AAi?$AAt?$AA?5?$AAn?$AAe?$AAv?$AAe?$AAr@|
  031a8		 |$LN49@MMCIssueId|
  031a8	00000000	 DCD         |??_C@_1FK@HAIGBMKL@?$AAM?$AAM?$AAC?$AAI?$AAs?$AAs?$AAu?$AAe?$AAI?$AAd?$AAe?$AAn?$AAt?$AAi?$AAf?$AAy?$AA?3?$AA?5?$AAM?$AAM?$AAC?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAR?$AAe?$AAs?$AAp@|
  031ac		 |$M45176|

			 ENDP  ; |MMCIssueIdentify|

	EXPORT	|??_C@_1GE@IHFMNDC@?$AAM?$AAM?$AAC?$AA?3?$AA?3?$AAM?$AAM?$AAC?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAR?$AAe?$AAs?$AAp?$AAo?$AAn?$AAs?$AAe?$AA?3?$AA?5?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IM@IDDFJJFI@?$AAM?$AAM?$AAC?$AA?3?$AA?3?$AAM?$AAM?$AAC?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAR?$AAe?$AAs?$AAp?$AAo?$AAn?$AAs?$AAe?$AA?3?$AA?5?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HM@GLHKNEKG@?$AAM?$AAM?$AAC?$AA?3?$AA?3?$AAM?$AAM?$AAC?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAR?$AAe?$AAs?$AAp?$AAo?$AAn?$AAs?$AAe?$AA?3?$AA?5?$AAM?$AAM?$AAC?$AAS?$AAe?$AAn?$AAd@| [ DATA ] ; `string'

  00070			 AREA	 |.pdata|, PDATA
|$T45196| DCD	|$LN13@MMCCommand|
	DCD	0x40005104

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GE@IHFMNDC@?$AAM?$AAM?$AAC?$AA?3?$AA?3?$AAM?$AAM?$AAC?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAR?$AAe?$AAs?$AAp?$AAo?$AAn?$AAs?$AAe?$AA?3?$AA?5?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd@| DCB "M"
	DCB	0x0, "M", 0x0, "C", 0x0, ":", 0x0, ":", 0x0, "M", 0x0, "M"
	DCB	0x0, "C", 0x0, "C", 0x0, "o", 0x0, "m", 0x0, "m", 0x0, "a"
	DCB	0x0, "n", 0x0, "d", 0x0, "R", 0x0, "e", 0x0, "s", 0x0, "p"
	DCB	0x0, "o", 0x0, "n", 0x0, "s", 0x0, "e", 0x0, ":", 0x0, " "
	DCB	0x0, "C", 0x0, "o", 0x0, "m", 0x0, "m", 0x0, "a", 0x0, "n"
	DCB	0x0, "d", 0x0, " ", 0x0, "R", 0x0, "e", 0x0, "s", 0x0, "p"
	DCB	0x0, "o", 0x0, "n", 0x0, "s", 0x0, "e", 0x0, " ", 0x0, "E"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IM@IDDFJJFI@?$AAM?$AAM?$AAC?$AA?3?$AA?3?$AAM?$AAM?$AAC?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAR?$AAe?$AAs?$AAp?$AAo?$AAn?$AAs?$AAe?$AA?3?$AA?5?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd@| DCB "M"
	DCB	0x0, "M", 0x0, "C", 0x0, ":", 0x0, ":", 0x0, "M", 0x0, "M"
	DCB	0x0, "C", 0x0, "C", 0x0, "o", 0x0, "m", 0x0, "m", 0x0, "a"
	DCB	0x0, "n", 0x0, "d", 0x0, "R", 0x0, "e", 0x0, "s", 0x0, "p"
	DCB	0x0, "o", 0x0, "n", 0x0, "s", 0x0, "e", 0x0, ":", 0x0, " "
	DCB	0x0, "C", 0x0, "o", 0x0, "m", 0x0, "m", 0x0, "a", 0x0, "n"
	DCB	0x0, "d", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, ":", 0x0, " ", 0x0, "R", 0x0, "e", 0x0, "s", 0x0, "p"
	DCB	0x0, "o", 0x0, "n", 0x0, "s", 0x0, "e", 0x0, " ", 0x0, "S"
	DCB	0x0, "t", 0x0, "a", 0x0, "t", 0x0, "u", 0x0, "s", 0x0, " "
	DCB	0x0, "E", 0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HM@GLHKNEKG@?$AAM?$AAM?$AAC?$AA?3?$AA?3?$AAM?$AAM?$AAC?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAR?$AAe?$AAs?$AAp?$AAo?$AAn?$AAs?$AAe?$AA?3?$AA?5?$AAM?$AAM?$AAC?$AAS?$AAe?$AAn?$AAd@| DCB "M"
	DCB	0x0, "M", 0x0, "C", 0x0, ":", 0x0, ":", 0x0, "M", 0x0, "M"
	DCB	0x0, "C", 0x0, "C", 0x0, "o", 0x0, "m", 0x0, "m", 0x0, "a"
	DCB	0x0, "n", 0x0, "d", 0x0, "R", 0x0, "e", 0x0, "s", 0x0, "p"
	DCB	0x0, "o", 0x0, "n", 0x0, "s", 0x0, "e", 0x0, ":", 0x0, " "
	DCB	0x0, "M", 0x0, "M", 0x0, "C", 0x0, "S", 0x0, "e", 0x0, "n"
	DCB	0x0, "d", 0x0, "C", 0x0, "o", 0x0, "m", 0x0, "m", 0x0, "a"
	DCB	0x0, "n", 0x0, "d", 0x0, " ", 0x0, "e", 0x0, "r", 0x0, "r"
	DCB	0x0, "o", 0x0, "r", 0x0, ",", 0x0, " ", 0x0, "c", 0x0, "o"
	DCB	0x0, "m", 0x0, "m", 0x0, "a", 0x0, "n", 0x0, "d", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  031ac			 AREA	 |.text|, CODE, ARM

  031ac		 |MMCCommandResponse| PROC

; 1133 : {

  031ac		 |$LN13@MMCCommand|
  031ac	e1a0c00d	 mov         r12, sp
  031b0	e92d0003	 stmdb       sp!, {r0, r1}
  031b4	e92d5000	 stmdb       sp!, {r12, lr}
  031b8	e24dd014	 sub         sp, sp, #0x14
  031bc		 |$M45193|

; 1134 :     if ( INTF_MMCSendCommand(pMMCcmd, init) )

  031bc	e59d1020	 ldr         r1, [sp, #0x20]
  031c0	e59d001c	 ldr         r0, [sp, #0x1C]
  031c4	eb000000	 bl          INTF_MMCSendCommand
  031c8	e58d0004	 str         r0, [sp, #4]
  031cc	e59d3004	 ldr         r3, [sp, #4]
  031d0	e3530000	 cmp         r3, #0
  031d4	0a000011	 beq         |$LN2@MMCCommand|

; 1135 :     {
; 1136 :         OALMSG(OAL_ERROR, (TEXT("MMC::MMCCommandResponse: MMCSendCommand error, command = %d\r\n"), pMMCcmd->command));

  031d8	e59f3100	 ldr         r3, [pc, #0x100]
  031dc	e5933440	 ldr         r3, [r3, #0x440]
  031e0	e3130001	 tst         r3, #1
  031e4	0a000007	 beq         |$LN5@MMCCommand|
  031e8	e59d301c	 ldr         r3, [sp, #0x1C]
  031ec	e2833004	 add         r3, r3, #4
  031f0	e5d31000	 ldrb        r1, [r3]
  031f4	e59f00f0	 ldr         r0, [pc, #0xF0]
  031f8	eb000000	 bl          NKDbgPrintfW
  031fc	e3a03001	 mov         r3, #1
  03200	e58d3008	 str         r3, [sp, #8]
  03204	ea000001	 b           |$LN6@MMCCommand|
  03208		 |$LN5@MMCCommand|
  03208	e3a03000	 mov         r3, #0
  0320c	e58d3008	 str         r3, [sp, #8]
  03210		 |$LN6@MMCCommand|

; 1137 :         bAlternateCommandMode = FALSE;

  03210	e59f20d0	 ldr         r2, [pc, #0xD0]
  03214	e3a03000	 mov         r3, #0
  03218	e5823000	 str         r3, [r2]

; 1138 :         goto CommandResponseError;

  0321c	ea00001d	 b           |$CommandResponseError$44735|
  03220		 |$LN2@MMCCommand|

; 1139 :     }
; 1140 : 
; 1141 :     INTF_MMCReadResponse(pMMCcmd);

  03220	e59d001c	 ldr         r0, [sp, #0x1C]
  03224	eb000000	 bl          INTF_MMCReadResponse

; 1142 : 
; 1143 :     // check response for errors
; 1144 :     if ( MMC_STATUS_CMD_ERROR(pMMCcmd->status) )

  03228	e59d301c	 ldr         r3, [sp, #0x1C]
  0322c	e2833014	 add         r3, r3, #0x14
  03230	e5932000	 ldr         r2, [r3]
  03234	e3a03a12	 mov         r3, #0x12, 20
  03238	e24337ca	 sub         r3, r3, #0xCA, 14
  0323c	e1120003	 tst         r2, r3
  03240	0a000011	 beq         |$LN1@MMCCommand|

; 1145 :     {
; 1146 :         OALMSG(OAL_ERROR,(TEXT("MMC::MMCCommandResponse: Command = %d: Response Status Error = 0x%x\r\n"), pMMCcmd->command, pMMCcmd->status));

  03244	e59f3094	 ldr         r3, [pc, #0x94]
  03248	e5933440	 ldr         r3, [r3, #0x440]
  0324c	e3130001	 tst         r3, #1
  03250	0a00000a	 beq         |$LN7@MMCCommand|
  03254	e59d301c	 ldr         r3, [sp, #0x1C]
  03258	e2833014	 add         r3, r3, #0x14
  0325c	e5932000	 ldr         r2, [r3]
  03260	e59d301c	 ldr         r3, [sp, #0x1C]
  03264	e2833004	 add         r3, r3, #4
  03268	e5d31000	 ldrb        r1, [r3]
  0326c	e59f0070	 ldr         r0, [pc, #0x70]
  03270	eb000000	 bl          NKDbgPrintfW
  03274	e3a03001	 mov         r3, #1
  03278	e58d300c	 str         r3, [sp, #0xC]
  0327c	ea000001	 b           |$LN8@MMCCommand|
  03280		 |$LN7@MMCCommand|
  03280	e3a03000	 mov         r3, #0
  03284	e58d300c	 str         r3, [sp, #0xC]
  03288		 |$LN8@MMCCommand|

; 1147 :         goto CommandResponseError;

  03288	ea000002	 b           |$CommandResponseError$44735|
  0328c		 |$LN1@MMCCommand|

; 1148 :     }
; 1149 : 
; 1150 :     return 0;

  0328c	e3a03000	 mov         r3, #0
  03290	e58d3000	 str         r3, [sp]
  03294	ea00000c	 b           |$LN3@MMCCommand|
  03298		 |$CommandResponseError$44735|

; 1151 : 
; 1152 : CommandResponseError:
; 1153 : 
; 1154 :     OALMSG(OAL_ERROR, (TEXT("MMC::MMCCommandResponse: Command Response Error\r\n")));

  03298	e59f3040	 ldr         r3, [pc, #0x40]
  0329c	e5933440	 ldr         r3, [r3, #0x440]
  032a0	e3130001	 tst         r3, #1
  032a4	0a000004	 beq         |$LN9@MMCCommand|
  032a8	e59f002c	 ldr         r0, [pc, #0x2C]
  032ac	eb000000	 bl          NKDbgPrintfW
  032b0	e3a03001	 mov         r3, #1
  032b4	e58d3010	 str         r3, [sp, #0x10]
  032b8	ea000001	 b           |$LN10@MMCCommand|
  032bc		 |$LN9@MMCCommand|
  032bc	e3a03000	 mov         r3, #0
  032c0	e58d3010	 str         r3, [sp, #0x10]
  032c4		 |$LN10@MMCCommand|

; 1155 :     return 1;

  032c4	e3a03001	 mov         r3, #1
  032c8	e58d3000	 str         r3, [sp]
  032cc		 |$LN3@MMCCommand|

; 1156 : }

  032cc	e59d0000	 ldr         r0, [sp]
  032d0	e28dd014	 add         sp, sp, #0x14
  032d4	e89d6000	 ldmia       sp, {sp, lr}
  032d8	e12fff1e	 bx          lr
  032dc		 |$LN14@MMCCommand|
  032dc		 |$LN15@MMCCommand|
  032dc	00000000	 DCD         |??_C@_1GE@IHFMNDC@?$AAM?$AAM?$AAC?$AA?3?$AA?3?$AAM?$AAM?$AAC?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAR?$AAe?$AAs?$AAp?$AAo?$AAn?$AAs?$AAe?$AA?3?$AA?5?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd@|
  032e0		 |$LN16@MMCCommand|
  032e0	00000000	 DCD         |dpCurSettings|
  032e4		 |$LN17@MMCCommand|
  032e4	00000000	 DCD         |??_C@_1IM@IDDFJJFI@?$AAM?$AAM?$AAC?$AA?3?$AA?3?$AAM?$AAM?$AAC?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAR?$AAe?$AAs?$AAp?$AAo?$AAn?$AAs?$AAe?$AA?3?$AA?5?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd@|
  032e8		 |$LN18@MMCCommand|
  032e8	00000000	 DCD         |bAlternateCommandMode|
  032ec		 |$LN19@MMCCommand|
  032ec	00000000	 DCD         |??_C@_1HM@GLHKNEKG@?$AAM?$AAM?$AAC?$AA?3?$AA?3?$AAM?$AAM?$AAC?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAR?$AAe?$AAs?$AAp?$AAo?$AAn?$AAs?$AAe?$AA?3?$AA?5?$AAM?$AAM?$AAC?$AAS?$AAe?$AAn?$AAd@|
  032f0		 |$M45194|

			 ENDP  ; |MMCCommandResponse|

	EXPORT	|MMCCardDetect|
	IMPORT	|SdhcHandleInsertion|
	IMPORT	|SdhcCardDetect|

  00078			 AREA	 |.pdata|, PDATA
|$T45208| DCD	|$LN8@MMCCardDet|
	DCD	0x40002104
; Function compile flags: /Odtp

  032f0			 AREA	 |.text|, CODE, ARM

  032f0		 |MMCCardDetect| PROC

; 1168 : {

  032f0		 |$LN8@MMCCardDet|
  032f0	e1a0c00d	 mov         r12, sp
  032f4	e92d0001	 stmdb       sp!, {r0}
  032f8	e92d5000	 stmdb       sp!, {r12, lr}
  032fc	e24dd010	 sub         sp, sp, #0x10
  03300		 |$M45205|

; 1169 : #if 1
; 1170 :     // check GPIO to detect card
; 1171 :         BOOL card_present;
; 1172 : 
; 1173 :         // check if card is preset in connector
; 1174 :         card_present = SdhcCardDetect();

  03300	eb000000	 bl          SdhcCardDetect
  03304	e58d0008	 str         r0, [sp, #8]
  03308	e59d3008	 ldr         r3, [sp, #8]
  0330c	e58d3000	 str         r3, [sp]

; 1175 :         if (!card_present)

  03310	e59d3000	 ldr         r3, [sp]
  03314	e3530000	 cmp         r3, #0
  03318	1a000003	 bne         |$LN3@MMCCardDet|

; 1176 :         {
; 1177 :             return FALSE;

  0331c	e3a03000	 mov         r3, #0
  03320	e58d3004	 str         r3, [sp, #4]
  03324	ea00000e	 b           |$LN4@MMCCardDet|

; 1178 :         }
; 1179 :         else

  03328	ea00000d	 b           |$LN2@MMCCardDet|
  0332c		 |$LN3@MMCCardDet|

; 1180 :         {
; 1181 :             if (pDisk->d_MMCState == MMC_STATE_IDLE)

  0332c	e59d3018	 ldr         r3, [sp, #0x18]
  03330	e283300c	 add         r3, r3, #0xC
  03334	e5933000	 ldr         r3, [r3]
  03338	e3530000	 cmp         r3, #0
  0333c	1a000006	 bne         |$LN1@MMCCardDet|

; 1182 :             {
; 1183 :                 // card present so handle card entry actions
; 1184 :                 SdhcHandleInsertion();

  03340	eb000000	 bl          SdhcHandleInsertion

; 1185 :                 return MMCIssueIdentify(pDisk);

  03344	e59d0018	 ldr         r0, [sp, #0x18]
  03348	eb000000	 bl          MMCIssueIdentify
  0334c	e58d000c	 str         r0, [sp, #0xC]
  03350	e59d300c	 ldr         r3, [sp, #0xC]
  03354	e58d3004	 str         r3, [sp, #4]
  03358	ea000001	 b           |$LN4@MMCCardDet|
  0335c		 |$LN1@MMCCardDet|

; 1186 :             }
; 1187 :             return TRUE;

  0335c	e3a03001	 mov         r3, #1
  03360	e58d3004	 str         r3, [sp, #4]
  03364		 |$LN2@MMCCardDet|
  03364		 |$LN4@MMCCardDet|

; 1188 :         }
; 1189 : #else
; 1190 :     // send status command to detect card
; 1191 :         int result;
; 1192 : 
; 1193 :         if (pDisk->d_MMCState == MMC_STATE_IDLE)
; 1194 :         {
; 1195 :             result = MMCIssueIdentify(pDisk);
; 1196 :             if (result)
; 1197 :             {
; 1198 :                 SdhcHandleInsertion();
; 1199 :                 return result;
; 1200 :             }
; 1201 :         }
; 1202 :         else
; 1203 :         {
; 1204 :             MMCcmd.card_type = pDisk->d_CardType;
; 1205 :             MMCcmd.command = SEND_STATUS;
; 1206 :             MMCcmd.argument = (pDisk->d_RelAddress)<<16;
; 1207 :             MMCcmd.num_blocks = 1;
; 1208 :             MMCcmd.block_len = 512;
; 1209 :             result = (MMCCommandResponse(&MMCcmd, 0));
; 1210 :             if (result)
; 1211 :             {
; 1212 :                 MMCSetMMCState(pDisk, MMC_STATE_IDLE);
; 1213 :                 return FALSE;
; 1214 :             }
; 1215 :             else return TRUE;
; 1216 :         }
; 1217 :     return FALSE;
; 1218 : #endif
; 1219 : }

  03364	e59d0004	 ldr         r0, [sp, #4]
  03368	e28dd010	 add         sp, sp, #0x10
  0336c	e89d6000	 ldmia       sp, {sp, lr}
  03370	e12fff1e	 bx          lr
  03374		 |$M45206|

			 ENDP  ; |MMCCardDetect|

	EXPORT	|MMCInitDisk|
	IMPORT	|SdhcInitialize|

  00080			 AREA	 |.pdata|, PDATA
|$T45214| DCD	|$LN6@MMCInitDis|
	DCD	0x40002a04
; Function compile flags: /Odtp

  03374			 AREA	 |.text|, CODE, ARM

  03374		 |MMCInitDisk| PROC

; 1226 : {

  03374		 |$LN6@MMCInitDis|
  03374	e1a0c00d	 mov         r12, sp
  03378	e92d0001	 stmdb       sp!, {r0}
  0337c	e92d5000	 stmdb       sp!, {r12, lr}
  03380	e24dd008	 sub         sp, sp, #8
  03384		 |$M45211|

; 1227 : 
; 1228 :     OALMSGX(OAL_INFO, (TEXT("MMCInitDisk\r\n")));
; 1229 : 
; 1230 :     // default is for all IDE devices to support 16 bit data transfers (older drives don't support 8 bit transfers)
; 1231 : 
; 1232 :     if (SdhcInitialize() == FALSE)

  03384	eb000000	 bl          SdhcInitialize
  03388	e58d0004	 str         r0, [sp, #4]
  0338c	e59d3004	 ldr         r3, [sp, #4]
  03390	e3530000	 cmp         r3, #0
  03394	1a000002	 bne         |$LN1@MMCInitDis|

; 1233 :         return FALSE;

  03398	e3a03000	 mov         r3, #0
  0339c	e58d3000	 str         r3, [sp]
  033a0	ea000019	 b           |$LN2@MMCInitDis|
  033a4		 |$LN1@MMCInitDis|

; 1234 : 
; 1235 :     pDisk->d_DiskInfo.di_total_sectors = 0;

  033a4	e59d3010	 ldr         r3, [sp, #0x10]
  033a8	e2832018	 add         r2, r3, #0x18
  033ac	e3a03000	 mov         r3, #0
  033b0	e5823000	 str         r3, [r2]

; 1236 :     pDisk->d_DiskInfo.di_bytes_per_sect = 512;

  033b4	e59d3010	 ldr         r3, [sp, #0x10]
  033b8	e283201c	 add         r2, r3, #0x1C
  033bc	e3a03c02	 mov         r3, #2, 24
  033c0	e5823000	 str         r3, [r2]

; 1237 :     pDisk->d_DiskInfo.di_cylinders = 0;

  033c4	e59d3010	 ldr         r3, [sp, #0x10]
  033c8	e2832020	 add         r2, r3, #0x20
  033cc	e3a03000	 mov         r3, #0
  033d0	e5823000	 str         r3, [r2]

; 1238 :     pDisk->d_DiskInfo.di_heads = 0;

  033d4	e59d3010	 ldr         r3, [sp, #0x10]
  033d8	e2832024	 add         r2, r3, #0x24
  033dc	e3a03000	 mov         r3, #0
  033e0	e5823000	 str         r3, [r2]

; 1239 :     pDisk->d_DiskInfo.di_sectors = 0;

  033e4	e59d3010	 ldr         r3, [sp, #0x10]
  033e8	e2832028	 add         r2, r3, #0x28
  033ec	e3a03000	 mov         r3, #0
  033f0	e5823000	 str         r3, [r2]

; 1240 :     pDisk->d_Supports4Bit = FALSE;

  033f4	e59d3010	 ldr         r3, [sp, #0x10]
  033f8	e2832034	 add         r2, r3, #0x34
  033fc	e3a03000	 mov         r3, #0
  03400	e5823000	 str         r3, [r2]

; 1241 :     //pDisk->d_DiskInfo.di_flags = DISK_INFO_FLAG_CHS_UNCERTAIN |   DISK_INFO_FLAG_MBR;
; 1242 : 
; 1243 :     // move to removable thread
; 1244 :     //if (MMCIssueIdentify(pDisk) == FALSE)
; 1245 :     //{
; 1246 :     //  return 2;
; 1247 :     //}
; 1248 : 
; 1249 :     return TRUE;

  03404	e3a03001	 mov         r3, #1
  03408	e58d3000	 str         r3, [sp]
  0340c		 |$LN2@MMCInitDis|

; 1250 : 
; 1251 : }   // Initdisk

  0340c	e59d0000	 ldr         r0, [sp]
  03410	e28dd008	 add         sp, sp, #8
  03414	e89d6000	 ldmia       sp, {sp, lr}
  03418	e12fff1e	 bx          lr
  0341c		 |$M45212|

			 ENDP  ; |MMCInitDisk|

	EXPORT	|??_C@_1EI@DCCPDMOI@?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAM?$AAM?$AAC?$AAS?$AAe?$AAl?$AAe?$AAc?$AAt?$AAC?$AAa?$AAr?$AAd?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EM@FDPFBDGI@?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAM?$AAM?$AAC?$AAW?$AAa?$AAi?$AAt?$AAF?$AAo?$AAr?$AAR?$AAe?$AAa?$AAd?$AAy?$AA?5?$AAf?$AAa?$AAi?$AAl@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DM@BFOJJFFG@?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAN?$AAo?$AA?5?$AAm?$AAe?$AAd?$AAi?$AAa?$AA?5?$AAf?$AAo?$AAu?$AAn?$AAd?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EE@PJJAIGOH@?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAM?$AAM?$AAC?$AAI?$AAn?$AAi?$AAt?$AAD?$AAi?$AAs?$AAk?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$CB?$AA?$AN@| [ DATA ] ; `string'
	EXPORT	|SDCardInit|

  00088			 AREA	 |.pdata|, PDATA
|$T45228| DCD	|$LN17@SDCardInit|
	DCD	0x40006f04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EI@DCCPDMOI@?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAM?$AAM?$AAC?$AAS?$AAe?$AAl?$AAe?$AAc?$AAt?$AAC?$AAa?$AAr?$AAd?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd@| DCB "S"
	DCB	0x0, "D", 0x0, "C", 0x0, "a", 0x0, "r", 0x0, "d", 0x0, "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "M"
	DCB	0x0, "M", 0x0, "C", 0x0, "S", 0x0, "e", 0x0, "l", 0x0, "e"
	DCB	0x0, "c", 0x0, "t", 0x0, "C", 0x0, "a", 0x0, "r", 0x0, "d"
	DCB	0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e"
	DCB	0x0, "d", 0x0, "!", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EM@FDPFBDGI@?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAM?$AAM?$AAC?$AAW?$AAa?$AAi?$AAt?$AAF?$AAo?$AAr?$AAR?$AAe?$AAa?$AAd?$AAy?$AA?5?$AAf?$AAa?$AAi?$AAl@| DCB "S"
	DCB	0x0, "D", 0x0, "C", 0x0, "a", 0x0, "r", 0x0, "d", 0x0, "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "M"
	DCB	0x0, "M", 0x0, "C", 0x0, "W", 0x0, "a", 0x0, "i", 0x0, "t"
	DCB	0x0, "F", 0x0, "o", 0x0, "r", 0x0, "R", 0x0, "e", 0x0, "a"
	DCB	0x0, "d", 0x0, "y", 0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, "d", 0x0, "!", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@BFOJJFFG@?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAN?$AAo?$AA?5?$AAm?$AAe?$AAd?$AAi?$AAa?$AA?5?$AAf?$AAo?$AAu?$AAn?$AAd?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "D", 0x0, "C", 0x0, "a", 0x0, "r", 0x0, "d", 0x0, "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "N"
	DCB	0x0, "o", 0x0, " ", 0x0, "m", 0x0, "e", 0x0, "d", 0x0, "i"
	DCB	0x0, "a", 0x0, " ", 0x0, "f", 0x0, "o", 0x0, "u", 0x0, "n"
	DCB	0x0, "d", 0x0, "!", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EE@PJJAIGOH@?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAM?$AAM?$AAC?$AAI?$AAn?$AAi?$AAt?$AAD?$AAi?$AAs?$AAk?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$CB?$AA?$AN@| DCB "S"
	DCB	0x0, "D", 0x0, "C", 0x0, "a", 0x0, "r", 0x0, "d", 0x0, "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "M"
	DCB	0x0, "M", 0x0, "C", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t"
	DCB	0x0, "D", 0x0, "i", 0x0, "s", 0x0, "k", 0x0, " ", 0x0, "f"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, "!"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  0341c			 AREA	 |.text|, CODE, ARM

  0341c		 |SDCardInit| PROC

; 1263 : {

  0341c		 |$LN17@SDCardInit|
  0341c	e1a0c00d	 mov         r12, sp
  03420	e92d0001	 stmdb       sp!, {r0}
  03424	e92d5000	 stmdb       sp!, {r12, lr}
  03428	e24dd024	 sub         sp, sp, #0x24
  0342c		 |$M45225|

; 1264 :     OALMSGX(OAL_INFO, (L"SDCardInit: Init device ...\r\n"));
; 1265 : 
; 1266 :     pDisk->d_MMCState = MMC_STATE_IDLE;

  0342c	e59d302c	 ldr         r3, [sp, #0x2C]
  03430	e283200c	 add         r2, r3, #0xC
  03434	e3a03000	 mov         r3, #0
  03438	e5823000	 str         r3, [r2]

; 1267 : 
; 1268 :     pDisk->d_DiskCardState = STATE_INITING;

  0343c	e59d302c	 ldr         r3, [sp, #0x2C]
  03440	e2832008	 add         r2, r3, #8
  03444	e3a03001	 mov         r3, #1
  03448	e5823000	 str         r3, [r2]

; 1269 : 
; 1270 :     if (MMCInitDisk(pDisk))

  0344c	e59d002c	 ldr         r0, [sp, #0x2C]
  03450	eb000000	 bl          MMCInitDisk
  03454	e58d0004	 str         r0, [sp, #4]
  03458	e59d3004	 ldr         r3, [sp, #4]
  0345c	e3530000	 cmp         r3, #0
  03460	0a00000d	 beq         |$LN4@SDCardInit|

; 1271 :     {
; 1272 :         OALMSG(OAL_ERROR, (L"SDCardInit: MMCInitDisk failed!\r\n"));

  03464	e59f315c	 ldr         r3, [pc, #0x15C]
  03468	e5933440	 ldr         r3, [r3, #0x440]
  0346c	e3130001	 tst         r3, #1
  03470	0a000004	 beq         |$LN7@SDCardInit|
  03474	e59f0158	 ldr         r0, [pc, #0x158]
  03478	eb000000	 bl          NKDbgPrintfW
  0347c	e3a03001	 mov         r3, #1
  03480	e58d3008	 str         r3, [sp, #8]
  03484	ea000001	 b           |$LN8@SDCardInit|
  03488		 |$LN7@SDCardInit|
  03488	e3a03000	 mov         r3, #0
  0348c	e58d3008	 str         r3, [sp, #8]
  03490		 |$LN8@SDCardInit|

; 1273 :         return DL_MMC_ERROR;

  03490	e3e03000	 mvn         r3, #0
  03494	e58d3000	 str         r3, [sp]
  03498	ea000045	 b           |$LN5@SDCardInit|
  0349c		 |$LN4@SDCardInit|

; 1274 :     }
; 1275 : 
; 1276 :     if (MMCCardDetect(pDisk) == FALSE) {

  0349c	e59d002c	 ldr         r0, [sp, #0x2C]
  034a0	eb000000	 bl          MMCCardDetect
  034a4	e58d000c	 str         r0, [sp, #0xC]
  034a8	e59d300c	 ldr         r3, [sp, #0xC]
  034ac	e3530000	 cmp         r3, #0
  034b0	1a00000d	 bne         |$LN3@SDCardInit|

; 1277 :         OALMSG(OAL_ERROR, (L"SDCardInit: No media found!\r\n"));

  034b4	e59f310c	 ldr         r3, [pc, #0x10C]
  034b8	e5933440	 ldr         r3, [r3, #0x440]
  034bc	e3130001	 tst         r3, #1
  034c0	0a000004	 beq         |$LN9@SDCardInit|
  034c4	e59f0104	 ldr         r0, [pc, #0x104]
  034c8	eb000000	 bl          NKDbgPrintfW
  034cc	e3a03001	 mov         r3, #1
  034d0	e58d3010	 str         r3, [sp, #0x10]
  034d4	ea000001	 b           |$LN10@SDCardInit|
  034d8		 |$LN9@SDCardInit|
  034d8	e3a03000	 mov         r3, #0
  034dc	e58d3010	 str         r3, [sp, #0x10]
  034e0		 |$LN10@SDCardInit|

; 1278 :         return DL_MMC_ERROR;

  034e0	e3e03000	 mvn         r3, #0
  034e4	e58d3000	 str         r3, [sp]
  034e8	ea000031	 b           |$LN5@SDCardInit|
  034ec		 |$LN3@SDCardInit|

; 1279 :     }
; 1280 : 
; 1281 :     pDisk->d_DiskCardState = STATE_OPENED;

  034ec	e59d302c	 ldr         r3, [sp, #0x2C]
  034f0	e2832008	 add         r2, r3, #8
  034f4	e3a03003	 mov         r3, #3
  034f8	e5823000	 str         r3, [r2]

; 1282 : 
; 1283 :     if (MMCWaitForReady(pDisk))

  034fc	e59d002c	 ldr         r0, [sp, #0x2C]
  03500	eb000000	 bl          MMCWaitForReady
  03504	e58d0014	 str         r0, [sp, #0x14]
  03508	e59d3014	 ldr         r3, [sp, #0x14]
  0350c	e3530000	 cmp         r3, #0
  03510	0a00000d	 beq         |$LN2@SDCardInit|

; 1284 :     {
; 1285 :         OALMSG(OAL_ERROR, (L"SDCardInit: MMCWaitForReady failed!\r\n"));

  03514	e59f30ac	 ldr         r3, [pc, #0xAC]
  03518	e5933440	 ldr         r3, [r3, #0x440]
  0351c	e3130001	 tst         r3, #1
  03520	0a000004	 beq         |$LN11@SDCardInit|
  03524	e59f00a0	 ldr         r0, [pc, #0xA0]
  03528	eb000000	 bl          NKDbgPrintfW
  0352c	e3a03001	 mov         r3, #1
  03530	e58d3018	 str         r3, [sp, #0x18]
  03534	ea000001	 b           |$LN12@SDCardInit|
  03538		 |$LN11@SDCardInit|
  03538	e3a03000	 mov         r3, #0
  0353c	e58d3018	 str         r3, [sp, #0x18]
  03540		 |$LN12@SDCardInit|

; 1286 :         return DL_MMC_ERROR;

  03540	e3e03000	 mvn         r3, #0
  03544	e58d3000	 str         r3, [sp]
  03548	ea000019	 b           |$LN5@SDCardInit|
  0354c		 |$LN2@SDCardInit|

; 1287 :     }
; 1288 :     
; 1289 :     if (MMCSelectCard(pDisk))

  0354c	e59d002c	 ldr         r0, [sp, #0x2C]
  03550	eb000000	 bl          MMCSelectCard
  03554	e58d001c	 str         r0, [sp, #0x1C]
  03558	e59d301c	 ldr         r3, [sp, #0x1C]
  0355c	e3530000	 cmp         r3, #0
  03560	0a00000d	 beq         |$LN1@SDCardInit|

; 1290 :     {
; 1291 :         OALMSG(OAL_ERROR, (L"SDCardInit: MMCSelectCard failed!\r\n"));

  03564	e59f305c	 ldr         r3, [pc, #0x5C]
  03568	e5933440	 ldr         r3, [r3, #0x440]
  0356c	e3130001	 tst         r3, #1
  03570	0a000004	 beq         |$LN13@SDCardInit|
  03574	e59f0048	 ldr         r0, [pc, #0x48]
  03578	eb000000	 bl          NKDbgPrintfW
  0357c	e3a03001	 mov         r3, #1
  03580	e58d3020	 str         r3, [sp, #0x20]
  03584	ea000001	 b           |$LN14@SDCardInit|
  03588		 |$LN13@SDCardInit|
  03588	e3a03000	 mov         r3, #0
  0358c	e58d3020	 str         r3, [sp, #0x20]
  03590		 |$LN14@SDCardInit|

; 1292 :         return DL_MMC_ERROR;

  03590	e3e03000	 mvn         r3, #0
  03594	e58d3000	 str         r3, [sp]
  03598	ea000005	 b           |$LN5@SDCardInit|
  0359c		 |$LN1@SDCardInit|

; 1293 :     }       
; 1294 : 
; 1295 :     MMCSetTranSpeed(pDisk->MaxClkFreq);

  0359c	e59d302c	 ldr         r3, [sp, #0x2C]
  035a0	e2833030	 add         r3, r3, #0x30
  035a4	e5930000	 ldr         r0, [r3]
  035a8	eb000000	 bl          MMCSetTranSpeed

; 1296 : 
; 1297 :     return DL_SUCCESS;  

  035ac	e3a03000	 mov         r3, #0
  035b0	e58d3000	 str         r3, [sp]
  035b4		 |$LN5@SDCardInit|

; 1298 : }

  035b4	e59d0000	 ldr         r0, [sp]
  035b8	e28dd024	 add         sp, sp, #0x24
  035bc	e89d6000	 ldmia       sp, {sp, lr}
  035c0	e12fff1e	 bx          lr
  035c4		 |$LN18@SDCardInit|
  035c4		 |$LN19@SDCardInit|
  035c4	00000000	 DCD         |??_C@_1EI@DCCPDMOI@?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAM?$AAM?$AAC?$AAS?$AAe?$AAl?$AAe?$AAc?$AAt?$AAC?$AAa?$AAr?$AAd?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd@|
  035c8		 |$LN20@SDCardInit|
  035c8	00000000	 DCD         |dpCurSettings|
  035cc		 |$LN21@SDCardInit|
  035cc	00000000	 DCD         |??_C@_1EM@FDPFBDGI@?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAM?$AAM?$AAC?$AAW?$AAa?$AAi?$AAt?$AAF?$AAo?$AAr?$AAR?$AAe?$AAa?$AAd?$AAy?$AA?5?$AAf?$AAa?$AAi?$AAl@|
  035d0		 |$LN22@SDCardInit|
  035d0	00000000	 DCD         |??_C@_1DM@BFOJJFFG@?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAN?$AAo?$AA?5?$AAm?$AAe?$AAd?$AAi?$AAa?$AA?5?$AAf?$AAo?$AAu?$AAn?$AAd?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@|
  035d4		 |$LN23@SDCardInit|
  035d4	00000000	 DCD         |??_C@_1EE@PJJAIGOH@?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAM?$AAM?$AAC?$AAI?$AAn?$AAi?$AAt?$AAD?$AAi?$AAs?$AAk?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$CB?$AA?$AN@|
  035d8		 |$M45226|

			 ENDP  ; |SDCardInit|

	EXPORT	|SDCardIdentify|

  00090			 AREA	 |.pdata|, PDATA
|$T45240| DCD	|$LN5@SDCardIden|
	DCD	0x40000a04
; Function compile flags: /Odtp

  035d8			 AREA	 |.text|, CODE, ARM

  035d8		 |SDCardIdentify| PROC

; 1305 : {

  035d8		 |$LN5@SDCardIden|
  035d8	e1a0c00d	 mov         r12, sp
  035dc	e92d0003	 stmdb       sp!, {r0, r1}
  035e0	e92d5000	 stmdb       sp!, {r12, lr}
  035e4	e24dd004	 sub         sp, sp, #4
  035e8		 |$M45237|

; 1306 :     UNREFERENCED_PARAMETER(pSector);
; 1307 :     UNREFERENCED_PARAMETER(pDisk);
; 1308 :     OALMSGX(OAL_INFO, (L"SDCardIdentify: Identify device ...\r\n"));
; 1309 :     
; 1310 :     return DL_SUCCESS;

  035e8	e3a03000	 mov         r3, #0
  035ec	e58d3000	 str         r3, [sp]

; 1311 : }

  035f0	e59d0000	 ldr         r0, [sp]
  035f4	e28dd004	 add         sp, sp, #4
  035f8	e89d6000	 ldmia       sp, {sp, lr}
  035fc	e12fff1e	 bx          lr
  03600		 |$M45238|

			 ENDP  ; |SDCardIdentify|

	EXPORT	|??_C@_1GI@CBFICDBE@?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAR?$AAe?$AAa?$AAd?$AAS?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?3?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAr?$AAe?$AAa?$AAd?$AAi?$AAn?$AAg?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HE@MOOOFOKP@?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAR?$AAe?$AAa?$AAd?$AAS?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?3?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAr?$AAe?$AAa?$AAd?$AAi?$AAn?$AAg?$AA?5@| [ DATA ] ; `string'
	EXPORT	|SDCardReadSector|

  00098			 AREA	 |.pdata|, PDATA
|$T45250| DCD	|$LN16@SDCardRead|
	DCD	0x40004304

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GI@CBFICDBE@?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAR?$AAe?$AAa?$AAd?$AAS?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?3?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAr?$AAe?$AAa?$AAd?$AAi?$AAn?$AAg?$AA?5@| DCB "S"
	DCB	0x0, "D", 0x0, "C", 0x0, "a", 0x0, "r", 0x0, "d", 0x0, "R"
	DCB	0x0, "e", 0x0, "a", 0x0, "d", 0x0, "S", 0x0, "e", 0x0, "c"
	DCB	0x0, "t", 0x0, "o", 0x0, "r", 0x0, ":", 0x0, " ", 0x0, "E"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "r"
	DCB	0x0, "e", 0x0, "a", 0x0, "d", 0x0, "i", 0x0, "n", 0x0, "g"
	DCB	0x0, " ", 0x0, "f", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "!"
	DCB	0x0, " ", 0x0, "(", 0x0, "s", 0x0, "e", 0x0, "c", 0x0, "t"
	DCB	0x0, "o", 0x0, "r", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HE@MOOOFOKP@?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAR?$AAe?$AAa?$AAd?$AAS?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?3?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAr?$AAe?$AAa?$AAd?$AAi?$AAn?$AAg?$AA?5@| DCB "S"
	DCB	0x0, "D", 0x0, "C", 0x0, "a", 0x0, "r", 0x0, "d", 0x0, "R"
	DCB	0x0, "e", 0x0, "a", 0x0, "d", 0x0, "S", 0x0, "e", 0x0, "c"
	DCB	0x0, "t", 0x0, "o", 0x0, "r", 0x0, ":", 0x0, " ", 0x0, "E"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "r"
	DCB	0x0, "e", 0x0, "a", 0x0, "d", 0x0, "i", 0x0, "n", 0x0, "g"
	DCB	0x0, " ", 0x0, "f", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, ","
	DCB	0x0, " ", 0x0, "r", 0x0, "e", 0x0, "t", 0x0, "r", 0x0, "y"
	DCB	0x0, " ", 0x0, "(", 0x0, "s", 0x0, "e", 0x0, "c", 0x0, "t"
	DCB	0x0, "o", 0x0, "r", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  03600			 AREA	 |.text|, CODE, ARM

  03600		 |SDCardReadSector| PROC

; 1318 : {

  03600		 |$LN16@SDCardRead|
  03600	e1a0c00d	 mov         r12, sp
  03604	e92d0007	 stmdb       sp!, {r0 - r2}
  03608	e92d5000	 stmdb       sp!, {r12, lr}
  0360c	e24dd018	 sub         sp, sp, #0x18
  03610		 |$M45247|

; 1319 :     int retry = 2;      //allow 3 attempts to read sector correctly

  03610	e3a03002	 mov         r3, #2
  03614	e58d3004	 str         r3, [sp, #4]
  03618		 |$LN7@SDCardRead|

; 1320 :     DWORD Status;
; 1321 :     
; 1322 :     OALMSGX(OAL_FUNC, (L"SDCardReadSector %d\r\n", LogicalSector));
; 1323 : 
; 1324 :     do
; 1325 :     {
; 1326 :         Status = MMCRead(pDisk, LogicalSector, pSector);

  03618	e59d2028	 ldr         r2, [sp, #0x28]
  0361c	e59d1024	 ldr         r1, [sp, #0x24]
  03620	e59d0020	 ldr         r0, [sp, #0x20]
  03624	eb000000	 bl          MMCRead
  03628	e58d000c	 str         r0, [sp, #0xC]
  0362c	e59d300c	 ldr         r3, [sp, #0xC]
  03630	e58d3000	 str         r3, [sp]

; 1327 :         if (Status != MMCREAD_SUCCESS)

  03634	e59d3000	 ldr         r3, [sp]
  03638	e3530000	 cmp         r3, #0
  0363c	0a00000e	 beq         |$LN4@SDCardRead|

; 1328 :         {
; 1329 :             if (retry > 0)

  03640	e59d3004	 ldr         r3, [sp, #4]
  03644	e3530000	 cmp         r3, #0
  03648	da00000b	 ble         |$LN3@SDCardRead|

; 1330 :                 OALMSG(OAL_ERROR, (L"SDCardReadSector: Error reading file, retry (sector %d)\r\n", LogicalSector));

  0364c	e59f30b0	 ldr         r3, [pc, #0xB0]
  03650	e5933440	 ldr         r3, [r3, #0x440]
  03654	e3130001	 tst         r3, #1
  03658	0a000005	 beq         |$LN10@SDCardRead|
  0365c	e59d1024	 ldr         r1, [sp, #0x24]
  03660	e59f00a0	 ldr         r0, [pc, #0xA0]
  03664	eb000000	 bl          NKDbgPrintfW
  03668	e3a03001	 mov         r3, #1
  0366c	e58d3010	 str         r3, [sp, #0x10]
  03670	ea000001	 b           |$LN11@SDCardRead|
  03674		 |$LN10@SDCardRead|
  03674	e3a03000	 mov         r3, #0
  03678	e58d3010	 str         r3, [sp, #0x10]
  0367c		 |$LN11@SDCardRead|
  0367c		 |$LN3@SDCardRead|
  0367c		 |$LN4@SDCardRead|

; 1331 :         }
; 1332 :     } 
; 1333 :     while (Status != MMCREAD_SUCCESS && retry--);

  0367c	e59d3000	 ldr         r3, [sp]
  03680	e3530000	 cmp         r3, #0
  03684	0a000005	 beq         |$LN2@SDCardRead|
  03688	e59d3004	 ldr         r3, [sp, #4]
  0368c	e3530000	 cmp         r3, #0
  03690	e59d3004	 ldr         r3, [sp, #4]
  03694	e2433001	 sub         r3, r3, #1
  03698	e58d3004	 str         r3, [sp, #4]
  0369c	1affffdd	 bne         |$LN7@SDCardRead|
  036a0		 |$LN2@SDCardRead|

; 1334 :     
; 1335 :     if (Status != MMCREAD_SUCCESS)

  036a0	e59d3000	 ldr         r3, [sp]
  036a4	e3530000	 cmp         r3, #0
  036a8	0a00000e	 beq         |$LN1@SDCardRead|

; 1336 :     {
; 1337 :         OALMSG(OAL_ERROR, (L"SDCardReadSector: Error reading file! (sector %d)\r\n", LogicalSector));

  036ac	e59f3050	 ldr         r3, [pc, #0x50]
  036b0	e5933440	 ldr         r3, [r3, #0x440]
  036b4	e3130001	 tst         r3, #1
  036b8	0a000005	 beq         |$LN12@SDCardRead|
  036bc	e59d1024	 ldr         r1, [sp, #0x24]
  036c0	e59f0038	 ldr         r0, [pc, #0x38]
  036c4	eb000000	 bl          NKDbgPrintfW
  036c8	e3a03001	 mov         r3, #1
  036cc	e58d3014	 str         r3, [sp, #0x14]
  036d0	ea000001	 b           |$LN13@SDCardRead|
  036d4		 |$LN12@SDCardRead|
  036d4	e3a03000	 mov         r3, #0
  036d8	e58d3014	 str         r3, [sp, #0x14]
  036dc		 |$LN13@SDCardRead|

; 1338 :         return DL_MMC_ERROR;

  036dc	e3e03000	 mvn         r3, #0
  036e0	e58d3008	 str         r3, [sp, #8]
  036e4	ea000001	 b           |$LN8@SDCardRead|
  036e8		 |$LN1@SDCardRead|

; 1339 :     }
; 1340 : 
; 1341 :     return DL_SUCCESS;

  036e8	e3a03000	 mov         r3, #0
  036ec	e58d3008	 str         r3, [sp, #8]
  036f0		 |$LN8@SDCardRead|

; 1342 : }

  036f0	e59d0008	 ldr         r0, [sp, #8]
  036f4	e28dd018	 add         sp, sp, #0x18
  036f8	e89d6000	 ldmia       sp, {sp, lr}
  036fc	e12fff1e	 bx          lr
  03700		 |$LN17@SDCardRead|
  03700		 |$LN18@SDCardRead|
  03700	00000000	 DCD         |??_C@_1GI@CBFICDBE@?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAR?$AAe?$AAa?$AAd?$AAS?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?3?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAr?$AAe?$AAa?$AAd?$AAi?$AAn?$AAg?$AA?5@|
  03704		 |$LN19@SDCardRead|
  03704	00000000	 DCD         |dpCurSettings|
  03708		 |$LN20@SDCardRead|
  03708	00000000	 DCD         |??_C@_1HE@MOOOFOKP@?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAR?$AAe?$AAa?$AAd?$AAS?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?3?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAr?$AAe?$AAa?$AAd?$AAi?$AAn?$AAg?$AA?5@|
  0370c		 |$M45248|

			 ENDP  ; |SDCardReadSector|

	EXPORT	|??_C@_1IM@HCIKFOHM@?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAR?$AAe?$AAa?$AAd?$AAM?$AAu?$AAl?$AAt?$AAi?$AAS?$AAe?$AAc?$AAt?$AAo?$AAr?$AAs?$AA?3?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAr?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IA@BMANGLND@?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAR?$AAe?$AAa?$AAd?$AAM?$AAu?$AAl?$AAt?$AAi?$AAS?$AAe?$AAc?$AAt?$AAo?$AAr?$AAs?$AA?3?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAr?$AAe@| [ DATA ] ; `string'
	EXPORT	|SDCardReadMultiSectors|

  000a0			 AREA	 |.pdata|, PDATA
|$T45264| DCD	|$LN16@SDCardRead@2|
	DCD	0x40004504

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IM@HCIKFOHM@?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAR?$AAe?$AAa?$AAd?$AAM?$AAu?$AAl?$AAt?$AAi?$AAS?$AAe?$AAc?$AAt?$AAo?$AAr?$AAs?$AA?3?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAr?$AAe@| DCB "S"
	DCB	0x0, "D", 0x0, "C", 0x0, "a", 0x0, "r", 0x0, "d", 0x0, "R"
	DCB	0x0, "e", 0x0, "a", 0x0, "d", 0x0, "M", 0x0, "u", 0x0, "l"
	DCB	0x0, "t", 0x0, "i", 0x0, "S", 0x0, "e", 0x0, "c", 0x0, "t"
	DCB	0x0, "o", 0x0, "r", 0x0, "s", 0x0, ":", 0x0, " ", 0x0, "E"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "r"
	DCB	0x0, "e", 0x0, "a", 0x0, "d", 0x0, "i", 0x0, "n", 0x0, "g"
	DCB	0x0, " ", 0x0, "f", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "!"
	DCB	0x0, " ", 0x0, "(", 0x0, "s", 0x0, "e", 0x0, "c", 0x0, "t"
	DCB	0x0, "o", 0x0, "r", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ","
	DCB	0x0, " ", 0x0, "n", 0x0, "u", 0x0, "m", 0x0, " ", 0x0, "s"
	DCB	0x0, "e", 0x0, "c", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IA@BMANGLND@?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAR?$AAe?$AAa?$AAd?$AAM?$AAu?$AAl?$AAt?$AAi?$AAS?$AAe?$AAc?$AAt?$AAo?$AAr?$AAs?$AA?3?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAr?$AAe@| DCB "S"
	DCB	0x0, "D", 0x0, "C", 0x0, "a", 0x0, "r", 0x0, "d", 0x0, "R"
	DCB	0x0, "e", 0x0, "a", 0x0, "d", 0x0, "M", 0x0, "u", 0x0, "l"
	DCB	0x0, "t", 0x0, "i", 0x0, "S", 0x0, "e", 0x0, "c", 0x0, "t"
	DCB	0x0, "o", 0x0, "r", 0x0, "s", 0x0, ":", 0x0, " ", 0x0, "E"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "r"
	DCB	0x0, "e", 0x0, "a", 0x0, "d", 0x0, "i", 0x0, "n", 0x0, "g"
	DCB	0x0, " ", 0x0, "f", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, ","
	DCB	0x0, " ", 0x0, "r", 0x0, "e", 0x0, "t", 0x0, "r", 0x0, "y"
	DCB	0x0, " ", 0x0, "(", 0x0, "s", 0x0, "e", 0x0, "c", 0x0, "t"
	DCB	0x0, "o", 0x0, "r", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  0370c			 AREA	 |.text|, CODE, ARM

  0370c		 |SDCardReadMultiSectors| PROC

; 1349 : {

  0370c		 |$LN16@SDCardRead@2|
  0370c	e1a0c00d	 mov         r12, sp
  03710	e92d000f	 stmdb       sp!, {r0 - r3}
  03714	e92d5000	 stmdb       sp!, {r12, lr}
  03718	e24dd018	 sub         sp, sp, #0x18
  0371c		 |$M45261|

; 1350 :     int retry = 0;      //allow 3 attempts to read sector correctly

  0371c	e3a03000	 mov         r3, #0
  03720	e58d3004	 str         r3, [sp, #4]
  03724		 |$LN7@SDCardRead@2|

; 1351 :     DWORD Status;
; 1352 :     
; 1353 :     OALMSGX(OAL_FUNC, (L"SDCardReadMultiSectors %d, num sec %d\r\n", LogicalSector, numSectors));
; 1354 : 
; 1355 :     do
; 1356 :     {
; 1357 :         Status = MMCReadMultiSectors((DISK *)pDisk, LogicalSector, pBuffer, numSectors);

  03724	e1dd32bc	 ldrh        r3, [sp, #0x2C]
  03728	e59d2028	 ldr         r2, [sp, #0x28]
  0372c	e59d1024	 ldr         r1, [sp, #0x24]
  03730	e59d0020	 ldr         r0, [sp, #0x20]
  03734	eb000000	 bl          MMCReadMultiSectors
  03738	e58d000c	 str         r0, [sp, #0xC]
  0373c	e59d300c	 ldr         r3, [sp, #0xC]
  03740	e58d3000	 str         r3, [sp]

; 1358 :         if (Status != MMCREAD_SUCCESS)

  03744	e59d3000	 ldr         r3, [sp]
  03748	e3530000	 cmp         r3, #0
  0374c	0a00000e	 beq         |$LN4@SDCardRead@2|

; 1359 :         {
; 1360 :             if (retry > 0)

  03750	e59d3004	 ldr         r3, [sp, #4]
  03754	e3530000	 cmp         r3, #0
  03758	da00000b	 ble         |$LN3@SDCardRead@2|

; 1361 :                 OALMSG(OAL_ERROR, (L"SDCardReadMultiSectors: Error reading file, retry (sector %d)\r\n", LogicalSector));

  0375c	e59f30b4	 ldr         r3, [pc, #0xB4]
  03760	e5933440	 ldr         r3, [r3, #0x440]
  03764	e3130001	 tst         r3, #1
  03768	0a000005	 beq         |$LN10@SDCardRead@2|
  0376c	e59d1024	 ldr         r1, [sp, #0x24]
  03770	e59f00a4	 ldr         r0, [pc, #0xA4]
  03774	eb000000	 bl          NKDbgPrintfW
  03778	e3a03001	 mov         r3, #1
  0377c	e58d3010	 str         r3, [sp, #0x10]
  03780	ea000001	 b           |$LN11@SDCardRead@2|
  03784		 |$LN10@SDCardRead@2|
  03784	e3a03000	 mov         r3, #0
  03788	e58d3010	 str         r3, [sp, #0x10]
  0378c		 |$LN11@SDCardRead@2|
  0378c		 |$LN3@SDCardRead@2|
  0378c		 |$LN4@SDCardRead@2|

; 1362 :         }
; 1363 :     } 
; 1364 :     while (Status != MMCREAD_SUCCESS && retry--);

  0378c	e59d3000	 ldr         r3, [sp]
  03790	e3530000	 cmp         r3, #0
  03794	0a000005	 beq         |$LN2@SDCardRead@2|
  03798	e59d3004	 ldr         r3, [sp, #4]
  0379c	e3530000	 cmp         r3, #0
  037a0	e59d3004	 ldr         r3, [sp, #4]
  037a4	e2433001	 sub         r3, r3, #1
  037a8	e58d3004	 str         r3, [sp, #4]
  037ac	1affffdc	 bne         |$LN7@SDCardRead@2|
  037b0		 |$LN2@SDCardRead@2|

; 1365 :     
; 1366 :     if (Status != MMCREAD_SUCCESS)

  037b0	e59d3000	 ldr         r3, [sp]
  037b4	e3530000	 cmp         r3, #0
  037b8	0a00000f	 beq         |$LN1@SDCardRead@2|

; 1367 :     {
; 1368 :         OALMSG(OAL_ERROR, (L"SDCardReadMultiSectors: Error reading file! (sector %d, num sec %d)\r\n", LogicalSector, numSectors));

  037bc	e59f3054	 ldr         r3, [pc, #0x54]
  037c0	e5933440	 ldr         r3, [r3, #0x440]
  037c4	e3130001	 tst         r3, #1
  037c8	0a000006	 beq         |$LN12@SDCardRead@2|
  037cc	e1dd22bc	 ldrh        r2, [sp, #0x2C]
  037d0	e59d1024	 ldr         r1, [sp, #0x24]
  037d4	e59f0038	 ldr         r0, [pc, #0x38]
  037d8	eb000000	 bl          NKDbgPrintfW
  037dc	e3a03001	 mov         r3, #1
  037e0	e58d3014	 str         r3, [sp, #0x14]
  037e4	ea000001	 b           |$LN13@SDCardRead@2|
  037e8		 |$LN12@SDCardRead@2|
  037e8	e3a03000	 mov         r3, #0
  037ec	e58d3014	 str         r3, [sp, #0x14]
  037f0		 |$LN13@SDCardRead@2|

; 1369 :         return DL_MMC_ERROR;

  037f0	e3e03000	 mvn         r3, #0
  037f4	e58d3008	 str         r3, [sp, #8]
  037f8	ea000001	 b           |$LN8@SDCardRead@2|
  037fc		 |$LN1@SDCardRead@2|

; 1370 :     }
; 1371 : 
; 1372 :     return DL_SUCCESS;

  037fc	e3a03000	 mov         r3, #0
  03800	e58d3008	 str         r3, [sp, #8]
  03804		 |$LN8@SDCardRead@2|

; 1373 : }

  03804	e59d0008	 ldr         r0, [sp, #8]
  03808	e28dd018	 add         sp, sp, #0x18
  0380c	e89d6000	 ldmia       sp, {sp, lr}
  03810	e12fff1e	 bx          lr
  03814		 |$LN17@SDCardRead@2|
  03814		 |$LN18@SDCardRead@2|
  03814	00000000	 DCD         |??_C@_1IM@HCIKFOHM@?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAR?$AAe?$AAa?$AAd?$AAM?$AAu?$AAl?$AAt?$AAi?$AAS?$AAe?$AAc?$AAt?$AAo?$AAr?$AAs?$AA?3?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAr?$AAe@|
  03818		 |$LN19@SDCardRead@2|
  03818	00000000	 DCD         |dpCurSettings|
  0381c		 |$LN20@SDCardRead@2|
  0381c	00000000	 DCD         |??_C@_1IA@BMANGLND@?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAR?$AAe?$AAa?$AAd?$AAM?$AAu?$AAl?$AAt?$AAi?$AAS?$AAe?$AAc?$AAt?$AAo?$AAr?$AAs?$AA?3?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAr?$AAe@|
  03820		 |$M45262|

			 ENDP  ; |SDCardReadMultiSectors|

	EXPORT	|??_C@_1EM@KMLGLOML@?$AAB?$AAL?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAD?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AA?3?$AA?5?$AA?5?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5?$AAf@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FA@PHKOKPHG@?$AAB?$AAL?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAD?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AA?3?$AA?5?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAi?$AAo?$AA?5?$AAi?$AAn?$AAi?$AAt?$AA?5?$AAf@| [ DATA ] ; `string'
	EXPORT	|BLSDCardDownload|
	IMPORT	|FileIoOpen|
	IMPORT	|FileNameToDirEntry|
	IMPORT	|FileIoInit|

  000a8			 AREA	 |.pdata|, PDATA
|$T45278| DCD	|$LN12@BLSDCardDo|
	DCD	0x40006004

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EM@KMLGLOML@?$AAB?$AAL?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAD?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AA?3?$AA?5?$AA?5?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5?$AAf@| DCB "B"
	DCB	0x0, "L", 0x0, "S", 0x0, "D", 0x0, "C", 0x0, "a", 0x0, "r"
	DCB	0x0, "d", 0x0, "D", 0x0, "o", 0x0, "w", 0x0, "n", 0x0, "l"
	DCB	0x0, "o", 0x0, "a", 0x0, "d", 0x0, ":", 0x0, " ", 0x0, " "
	DCB	0x0, "c", 0x0, "a", 0x0, "n", 0x0, "n", 0x0, "o", 0x0, "t"
	DCB	0x0, " ", 0x0, "o", 0x0, "p", 0x0, "e", 0x0, "n", 0x0, " "
	DCB	0x0, "f", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FA@PHKOKPHG@?$AAB?$AAL?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAD?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AA?3?$AA?5?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAi?$AAo?$AA?5?$AAi?$AAn?$AAi?$AAt?$AA?5?$AAf@| DCB "B"
	DCB	0x0, "L", 0x0, "S", 0x0, "D", 0x0, "C", 0x0, "a", 0x0, "r"
	DCB	0x0, "d", 0x0, "D", 0x0, "o", 0x0, "w", 0x0, "n", 0x0, "l"
	DCB	0x0, "o", 0x0, "a", 0x0, "d", 0x0, ":", 0x0, " ", 0x0, " "
	DCB	0x0, "f", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "i", 0x0, "o"
	DCB	0x0, " ", 0x0, "i", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, " "
	DCB	0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  03820			 AREA	 |.text|, CODE, ARM

  03820		 |BLSDCardDownload| PROC

; 1387 : {

  03820		 |$LN12@BLSDCardDo|
  03820	e1a0c00d	 mov         r12, sp
  03824	e92d0001	 stmdb       sp!, {r0}
  03828	e92d5000	 stmdb       sp!, {r12, lr}
  0382c	e24dd014	 sub         sp, sp, #0x14
  03830		 |$M45275|

; 1388 :     // This function is called after MMC/SD image download is selected in menu or config
; 1389 :     pFile = &File;

  03830	e59f2164	 ldr         r2, [pc, #0x164]
  03834	e59f3140	 ldr         r3, [pc, #0x140]
  03838	e5832000	 str         r2, [r3]

; 1390 : 
; 1391 :     OALMSGX(OAL_INFO, (L"BLSDCardDownload: Filename %s\r\n", filename));
; 1392 : 
; 1393 : 	if (!bFileIoInit)

  0383c	e59f313c	 ldr         r3, [pc, #0x13C]
  03840	e5933000	 ldr         r3, [r3]
  03844	e3530000	 cmp         r3, #0
  03848	1a000025	 bne         |$LN3@BLSDCardDo|

; 1394 : 	{
; 1395 : 		// set up data structure used by file system driver
; 1396 : 		fileio_ops.init        = &SDCardInit;

  0384c	e59f2144	 ldr         r2, [pc, #0x144]
  03850	e59f3120	 ldr         r3, [pc, #0x120]
  03854	e5832000	 str         r2, [r3]

; 1397 : 		fileio_ops.identify    = &SDCardIdentify;

  03858	e59f2134	 ldr         r2, [pc, #0x134]
  0385c	e59f3114	 ldr         r3, [pc, #0x114]
  03860	e5832004	 str         r2, [r3, #4]

; 1398 : 		fileio_ops.read_sector = &SDCardReadSector;

  03864	e59f2124	 ldr         r2, [pc, #0x124]
  03868	e59f3108	 ldr         r3, [pc, #0x108]
  0386c	e5832008	 str         r2, [r3, #8]

; 1399 : 		fileio_ops.read_multi_sectors = &SDCardReadMultiSectors;

  03870	e59f2114	 ldr         r2, [pc, #0x114]
  03874	e59f30fc	 ldr         r3, [pc, #0xFC]
  03878	e583200c	 str         r2, [r3, #0xC]

; 1400 : 		fileio_ops.drive_info  = (PVOID)&Disk;

  0387c	e59f2104	 ldr         r2, [pc, #0x104]
  03880	e59f30f0	 ldr         r3, [pc, #0xF0]
  03884	e5832010	 str         r2, [r3, #0x10]

; 1401 : 
; 1402 : 		// initialize file system driver
; 1403 : 		if (FileIoInit(&fileio_ops) != FILEIO_STATUS_OK)

  03888	e59f00e8	 ldr         r0, [pc, #0xE8]
  0388c	eb000000	 bl          FileIoInit
  03890	e58d0004	 str         r0, [sp, #4]
  03894	e59d3004	 ldr         r3, [sp, #4]
  03898	e3530000	 cmp         r3, #0
  0389c	0a00000d	 beq         |$LN2@BLSDCardDo|

; 1404 : 		{
; 1405 : 			OALMSG(OAL_ERROR, (L"BLSDCardDownload:  fileio init failed\r\n"));

  038a0	e59f30cc	 ldr         r3, [pc, #0xCC]
  038a4	e5933440	 ldr         r3, [r3, #0x440]
  038a8	e3130001	 tst         r3, #1
  038ac	0a000004	 beq         |$LN6@BLSDCardDo|
  038b0	e59f00cc	 ldr         r0, [pc, #0xCC]
  038b4	eb000000	 bl          NKDbgPrintfW
  038b8	e3a03001	 mov         r3, #1
  038bc	e58d3008	 str         r3, [sp, #8]
  038c0	ea000001	 b           |$LN7@BLSDCardDo|
  038c4		 |$LN6@BLSDCardDo|
  038c4	e3a03000	 mov         r3, #0
  038c8	e58d3008	 str         r3, [sp, #8]
  038cc		 |$LN7@BLSDCardDo|

; 1406 : 			return (UINT32) BL_ERROR;

  038cc	e3e03000	 mvn         r3, #0
  038d0	e58d3000	 str         r3, [sp]
  038d4	ea000021	 b           |$LN4@BLSDCardDo|
  038d8		 |$LN2@BLSDCardDo|

; 1407 : 		}
; 1408 : 
; 1409 : 		bFileIoInit = TRUE;

  038d8	e59f20a0	 ldr         r2, [pc, #0xA0]
  038dc	e3a03001	 mov         r3, #1
  038e0	e5823000	 str         r3, [r2]
  038e4		 |$LN3@BLSDCardDo|

; 1410 : 	}
; 1411 : 
; 1412 :     // fill in file name (8.3 format)
; 1413 :     FileNameToDirEntry(filename, pFile->name, pFile->extension);

  038e4	e59f3090	 ldr         r3, [pc, #0x90]
  038e8	e5933000	 ldr         r3, [r3]
  038ec	e2832009	 add         r2, r3, #9
  038f0	e59f3084	 ldr         r3, [pc, #0x84]
  038f4	e5931000	 ldr         r1, [r3]
  038f8	e59d001c	 ldr         r0, [sp, #0x1C]
  038fc	eb000000	 bl          FileNameToDirEntry

; 1414 : 
; 1415 :     // try to open file specified by pConfig->filename, return BL_ERROR on failure
; 1416 :     if (FileIoOpen(&fileio_ops, pFile) != FILEIO_STATUS_OK)

  03900	e59f3074	 ldr         r3, [pc, #0x74]
  03904	e5931000	 ldr         r1, [r3]
  03908	e59f0068	 ldr         r0, [pc, #0x68]
  0390c	eb000000	 bl          FileIoOpen
  03910	e58d000c	 str         r0, [sp, #0xC]
  03914	e59d300c	 ldr         r3, [sp, #0xC]
  03918	e3530000	 cmp         r3, #0
  0391c	0a00000d	 beq         |$LN1@BLSDCardDo|

; 1417 :     {
; 1418 :         OALMSG(OAL_ERROR, (L"BLSDCardDownload:  cannot open file\r\n"));

  03920	e59f304c	 ldr         r3, [pc, #0x4C]
  03924	e5933440	 ldr         r3, [r3, #0x440]
  03928	e3130001	 tst         r3, #1
  0392c	0a000004	 beq         |$LN8@BLSDCardDo|
  03930	e59f0038	 ldr         r0, [pc, #0x38]
  03934	eb000000	 bl          NKDbgPrintfW
  03938	e3a03001	 mov         r3, #1
  0393c	e58d3010	 str         r3, [sp, #0x10]
  03940	ea000001	 b           |$LN9@BLSDCardDo|
  03944		 |$LN8@BLSDCardDo|
  03944	e3a03000	 mov         r3, #0
  03948	e58d3010	 str         r3, [sp, #0x10]
  0394c		 |$LN9@BLSDCardDo|

; 1419 :         return (UINT32) BL_ERROR;

  0394c	e3e03000	 mvn         r3, #0
  03950	e58d3000	 str         r3, [sp]
  03954	ea000001	 b           |$LN4@BLSDCardDo|
  03958		 |$LN1@BLSDCardDo|

; 1420 :     }
; 1421 : 
; 1422 :     // return BL_DOWNLOAD, BootloaderMain will then call OEMReadData
; 1423 :     // (which calls BLSDCardReadData) to get image data.
; 1424 :     return BL_DOWNLOAD;

  03958	e3a03000	 mov         r3, #0
  0395c	e58d3000	 str         r3, [sp]
  03960		 |$LN4@BLSDCardDo|

; 1425 : }

  03960	e59d0000	 ldr         r0, [sp]
  03964	e28dd014	 add         sp, sp, #0x14
  03968	e89d6000	 ldmia       sp, {sp, lr}
  0396c	e12fff1e	 bx          lr
  03970		 |$LN13@BLSDCardDo|
  03970		 |$LN14@BLSDCardDo|
  03970	00000000	 DCD         |??_C@_1EM@KMLGLOML@?$AAB?$AAL?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAD?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AA?3?$AA?5?$AA?5?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5?$AAf@|
  03974		 |$LN15@BLSDCardDo|
  03974	00000000	 DCD         |dpCurSettings|
  03978		 |$LN16@BLSDCardDo|
  03978	00000000	 DCD         |fileio_ops|
  0397c		 |$LN17@BLSDCardDo|
  0397c	00000000	 DCD         |pFile|
  03980		 |$LN18@BLSDCardDo|
  03980	00000000	 DCD         |bFileIoInit|
  03984		 |$LN19@BLSDCardDo|
  03984	00000000	 DCD         |??_C@_1FA@PHKOKPHG@?$AAB?$AAL?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAD?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AA?3?$AA?5?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAi?$AAo?$AA?5?$AAi?$AAn?$AAi?$AAt?$AA?5?$AAf@|
  03988		 |$LN20@BLSDCardDo|
  03988	00000000	 DCD         |Disk|
  0398c		 |$LN21@BLSDCardDo|
  0398c	00000000	 DCD         |SDCardReadMultiSectors|
  03990		 |$LN22@BLSDCardDo|
  03990	00000000	 DCD         |SDCardReadSector|
  03994		 |$LN23@BLSDCardDo|
  03994	00000000	 DCD         |SDCardIdentify|
  03998		 |$LN24@BLSDCardDo|
  03998	00000000	 DCD         |SDCardInit|
  0399c		 |$LN25@BLSDCardDo|
  0399c	00000000	 DCD         |File|
  039a0		 |$M45276|

			 ENDP  ; |BLSDCardDownload|

	EXPORT	|BLSDCardReadData|
	IMPORT	|FileIoRead|

  000b0			 AREA	 |.pdata|, PDATA
|$T45297| DCD	|$LN7@BLSDCardRe|
	DCD	0x40001a04
; Function compile flags: /Odtp

  039a0			 AREA	 |.text|, CODE, ARM

  039a0		 |BLSDCardReadData| PROC

; 1435 : {

  039a0		 |$LN7@BLSDCardRe|
  039a0	e1a0c00d	 mov         r12, sp
  039a4	e92d0003	 stmdb       sp!, {r0, r1}
  039a8	e92d5000	 stmdb       sp!, {r12, lr}
  039ac	e24dd008	 sub         sp, sp, #8
  039b0		 |$M45294|

; 1436 :     // called to read data from MMC/SD card as stream data, not as block data
; 1437 : 
; 1438 :     OALMSGX(OAL_FUNC, (L"BLSDCardReadData: address 0x%x, %d bytes\r\n", pData, size));
; 1439 : 
; 1440 :     //g_eboot.readSize = size;
; 1441 :     //g_eboot.pReadBuffer = pData;
; 1442 : 
; 1443 :     if (FileIoRead(&fileio_ops, pFile, (PVOID)pData, size) != FILEIO_STATUS_OK)

  039b0	e59d3010	 ldr         r3, [sp, #0x10]
  039b4	e59d2014	 ldr         r2, [sp, #0x14]
  039b8	e59f1044	 ldr         r1, [pc, #0x44]
  039bc	e5911000	 ldr         r1, [r1]
  039c0	e59f0038	 ldr         r0, [pc, #0x38]
  039c4	eb000000	 bl          FileIoRead
  039c8	e58d0004	 str         r0, [sp, #4]
  039cc	e59d3004	 ldr         r3, [sp, #4]
  039d0	e3530000	 cmp         r3, #0
  039d4	0a000003	 beq         |$LN2@BLSDCardRe|

; 1444 :         return FALSE;

  039d8	e3a03000	 mov         r3, #0
  039dc	e58d3000	 str         r3, [sp]
  039e0	ea000002	 b           |$LN3@BLSDCardRe|

; 1445 :     else

  039e4	ea000001	 b           |$LN1@BLSDCardRe|
  039e8		 |$LN2@BLSDCardRe|

; 1446 :         return TRUE;

  039e8	e3a03001	 mov         r3, #1
  039ec	e58d3000	 str         r3, [sp]
  039f0		 |$LN1@BLSDCardRe|
  039f0		 |$LN3@BLSDCardRe|

; 1447 : }

  039f0	e59d0000	 ldr         r0, [sp]
  039f4	e28dd008	 add         sp, sp, #8
  039f8	e89d6000	 ldmia       sp, {sp, lr}
  039fc	e12fff1e	 bx          lr
  03a00		 |$LN8@BLSDCardRe|
  03a00		 |$LN9@BLSDCardRe|
  03a00	00000000	 DCD         |fileio_ops|
  03a04		 |$LN10@BLSDCardRe|
  03a04	00000000	 DCD         |pFile|
  03a08		 |$M45295|

			 ENDP  ; |BLSDCardReadData|

	EXPORT	|??_C@_1FK@BIPBBPFB@?$AAB?$AAL?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAR?$AAe?$AAa?$AAd?$AAL?$AAo?$AAg?$AAo?$AA?3?$AA?5?$AA?5?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAf@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FA@EHAPGJGJ@?$AA?5?$AA?$CK?$AA?$CK?$AAB?$AAL?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAT?$AAo?$AAF?$AAl?$AAa?$AAs?$AAh?$AA?3?$AA?5?$AA?5?$AAC?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAo?$AAp?$AAe?$AAn@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EO@MDFFFBD@?$AAB?$AAL?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAT?$AAo?$AAF?$AAl?$AAa?$AAs?$AAh?$AA?3?$AA?5?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAi?$AAo?$AA?5?$AAi?$AAn?$AAi?$AAt?$AA?5?$AAf?$AAa@| [ DATA ] ; `string'
	EXPORT	|BLSDCardToFlash|

  000b8			 AREA	 |.pdata|, PDATA
|$T45312| DCD	|$LN15@BLSDCardTo|
	DCD	0x40007904

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FK@BIPBBPFB@?$AAB?$AAL?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAR?$AAe?$AAa?$AAd?$AAL?$AAo?$AAg?$AAo?$AA?3?$AA?5?$AA?5?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAf@| DCB "B"
	DCB	0x0, "L", 0x0, "S", 0x0, "D", 0x0, "C", 0x0, "a", 0x0, "r"
	DCB	0x0, "d", 0x0, "R", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, "L"
	DCB	0x0, "o", 0x0, "g", 0x0, "o", 0x0, ":", 0x0, " ", 0x0, " "
	DCB	0x0, "c", 0x0, "a", 0x0, "n", 0x0, "n", 0x0, "o", 0x0, "t"
	DCB	0x0, " ", 0x0, "r", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, " "
	DCB	0x0, "f", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, " ", 0x0, "h"
	DCB	0x0, "e", 0x0, "a", 0x0, "d", 0x0, "e", 0x0, "r", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FA@EHAPGJGJ@?$AA?5?$AA?$CK?$AA?$CK?$AAB?$AAL?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAT?$AAo?$AAF?$AAl?$AAa?$AAs?$AAh?$AA?3?$AA?5?$AA?5?$AAC?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAo?$AAp?$AAe?$AAn@| DCB " "
	DCB	0x0, "*", 0x0, "*", 0x0, "B", 0x0, "L", 0x0, "S", 0x0, "D"
	DCB	0x0, "C", 0x0, "a", 0x0, "r", 0x0, "d", 0x0, "T", 0x0, "o"
	DCB	0x0, "F", 0x0, "l", 0x0, "a", 0x0, "s", 0x0, "h", 0x0, ":"
	DCB	0x0, " ", 0x0, " ", 0x0, "C", 0x0, "a", 0x0, "n", 0x0, "n"
	DCB	0x0, "o", 0x0, "t", 0x0, " ", 0x0, "o", 0x0, "p", 0x0, "e"
	DCB	0x0, "n", 0x0, " ", 0x0, "f", 0x0, "i", 0x0, "l", 0x0, "e"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EO@MDFFFBD@?$AAB?$AAL?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAT?$AAo?$AAF?$AAl?$AAa?$AAs?$AAh?$AA?3?$AA?5?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAi?$AAo?$AA?5?$AAi?$AAn?$AAi?$AAt?$AA?5?$AAf?$AAa@| DCB "B"
	DCB	0x0, "L", 0x0, "S", 0x0, "D", 0x0, "C", 0x0, "a", 0x0, "r"
	DCB	0x0, "d", 0x0, "T", 0x0, "o", 0x0, "F", 0x0, "l", 0x0, "a"
	DCB	0x0, "s", 0x0, "h", 0x0, ":", 0x0, " ", 0x0, " ", 0x0, "f"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "i", 0x0, "o", 0x0, " "
	DCB	0x0, "i", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, " ", 0x0, "f"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  03a08			 AREA	 |.text|, CODE, ARM

  03a08		 |BLSDCardToFlash| PROC

; 1456 : {

  03a08		 |$LN15@BLSDCardTo|
  03a08	e1a0c00d	 mov         r12, sp
  03a0c	e92d0007	 stmdb       sp!, {r0 - r2}
  03a10	e92d5000	 stmdb       sp!, {r12, lr}
  03a14	e24dd01c	 sub         sp, sp, #0x1C
  03a18		 |$M45309|

; 1457 : 	// This function is called after MMC/SD image download is selected in menu or config
; 1458 : 	pFile = &File;

  03a18	e59f21c8	 ldr         r2, [pc, #0x1C8]
  03a1c	e59f31a0	 ldr         r3, [pc, #0x1A0]
  03a20	e5832000	 str         r2, [r3]

; 1459 :     //FILEHANDLE logoFile(pFile);
; 1460 : 	/*WORD	   wSignature = 0;
; 1461 : 	DWORD	   dwOffset = 0;
; 1462 : 	BYTE*	   pTmpBuf = NULL;
; 1463 : 	DWORD	   dwCursor = 0;*/
; 1464 : 
; 1465 : 	OALMSGX(OAL_INFO, (L" **BLSDCardToFlash: Filename %s\r\n", filename));
; 1466 : 	//?? OAL_INFo, Ray  13-09-11
; 1467 : 
; 1468 : 	if (!bFileIoInit)

  03a24	e59f31a0	 ldr         r3, [pc, #0x1A0]
  03a28	e5933000	 ldr         r3, [r3]
  03a2c	e3530000	 cmp         r3, #0
  03a30	1a000025	 bne         |$LN4@BLSDCardTo|

; 1469 : 	{
; 1470 : 		// set up data structure used by file system driver
; 1471 : 		fileio_ops.init         = &SDCardInit;

  03a34	e59f21a8	 ldr         r2, [pc, #0x1A8]
  03a38	e59f3180	 ldr         r3, [pc, #0x180]
  03a3c	e5832000	 str         r2, [r3]

; 1472 : 		fileio_ops.identify     = &SDCardIdentify;

  03a40	e59f2198	 ldr         r2, [pc, #0x198]
  03a44	e59f3174	 ldr         r3, [pc, #0x174]
  03a48	e5832004	 str         r2, [r3, #4]

; 1473 :         fileio_ops.read_sector  = &SDCardReadSector;

  03a4c	e59f2188	 ldr         r2, [pc, #0x188]
  03a50	e59f3168	 ldr         r3, [pc, #0x168]
  03a54	e5832008	 str         r2, [r3, #8]

; 1474 :         fileio_ops.read_multi_sectors = &SDCardReadMultiSectors;

  03a58	e59f2178	 ldr         r2, [pc, #0x178]
  03a5c	e59f315c	 ldr         r3, [pc, #0x15C]
  03a60	e583200c	 str         r2, [r3, #0xC]

; 1475 : 	    fileio_ops.drive_info   = (PVOID)&Disk;

  03a64	e59f2168	 ldr         r2, [pc, #0x168]
  03a68	e59f3150	 ldr         r3, [pc, #0x150]
  03a6c	e5832010	 str         r2, [r3, #0x10]

; 1476 : 	
; 1477 :         // initialize file system driver
; 1478 :         if(FileIoInit(&fileio_ops) != FILEIO_STATUS_OK)

  03a70	e59f0148	 ldr         r0, [pc, #0x148]
  03a74	eb000000	 bl          FileIoInit
  03a78	e58d0004	 str         r0, [sp, #4]
  03a7c	e59d3004	 ldr         r3, [sp, #4]
  03a80	e3530000	 cmp         r3, #0
  03a84	0a00000d	 beq         |$LN3@BLSDCardTo|

; 1479 :         {
; 1480 : 		    OALMSG(OAL_ERROR, (L"BLSDCardToFlash:  fileio init failed\r\n"));

  03a88	e59f312c	 ldr         r3, [pc, #0x12C]
  03a8c	e5933440	 ldr         r3, [r3, #0x440]
  03a90	e3130001	 tst         r3, #1
  03a94	0a000004	 beq         |$LN7@BLSDCardTo|
  03a98	e59f0130	 ldr         r0, [pc, #0x130]
  03a9c	eb000000	 bl          NKDbgPrintfW
  03aa0	e3a03001	 mov         r3, #1
  03aa4	e58d3008	 str         r3, [sp, #8]
  03aa8	ea000001	 b           |$LN8@BLSDCardTo|
  03aac		 |$LN7@BLSDCardTo|
  03aac	e3a03000	 mov         r3, #0
  03ab0	e58d3008	 str         r3, [sp, #8]
  03ab4		 |$LN8@BLSDCardTo|

; 1481 :             return FALSE;

  03ab4	e3a03000	 mov         r3, #0
  03ab8	e58d3000	 str         r3, [sp]
  03abc	ea000039	 b           |$LN5@BLSDCardTo|
  03ac0		 |$LN3@BLSDCardTo|

; 1482 :         }
; 1483 :         
; 1484 :         bFileIoInit = TRUE;

  03ac0	e59f2104	 ldr         r2, [pc, #0x104]
  03ac4	e3a03001	 mov         r3, #1
  03ac8	e5823000	 str         r3, [r2]
  03acc		 |$LN4@BLSDCardTo|

; 1485 : 	}
; 1486 : 
; 1487 :     // fill in file name (8.3 format)
; 1488 :     FileNameToDirEntry(filename, pFile->name, pFile->extension);

  03acc	e59f30f0	 ldr         r3, [pc, #0xF0]
  03ad0	e5933000	 ldr         r3, [r3]
  03ad4	e2832009	 add         r2, r3, #9
  03ad8	e59f30e4	 ldr         r3, [pc, #0xE4]
  03adc	e5931000	 ldr         r1, [r3]
  03ae0	e59d0024	 ldr         r0, [sp, #0x24]
  03ae4	eb000000	 bl          FileNameToDirEntry

; 1489 : 
; 1490 :     // try to open file specified by pConfig->filename, return FALSE on failure
; 1491 :     if (FileIoOpen(&fileio_ops, pFile) != FILEIO_STATUS_OK)

  03ae8	e59f30d4	 ldr         r3, [pc, #0xD4]
  03aec	e5931000	 ldr         r1, [r3]
  03af0	e59f00c8	 ldr         r0, [pc, #0xC8]
  03af4	eb000000	 bl          FileIoOpen
  03af8	e58d000c	 str         r0, [sp, #0xC]
  03afc	e59d300c	 ldr         r3, [sp, #0xC]
  03b00	e3530000	 cmp         r3, #0
  03b04	0a00000d	 beq         |$LN2@BLSDCardTo|

; 1492 :     {
; 1493 :         OALMSG(OAL_ERROR, (L" **BLSDCardToFlash:  Cannot open file\r\n"));

  03b08	e59f30ac	 ldr         r3, [pc, #0xAC]
  03b0c	e5933440	 ldr         r3, [r3, #0x440]
  03b10	e3130001	 tst         r3, #1
  03b14	0a000004	 beq         |$LN9@BLSDCardTo|
  03b18	e59f00a8	 ldr         r0, [pc, #0xA8]
  03b1c	eb000000	 bl          NKDbgPrintfW
  03b20	e3a03001	 mov         r3, #1
  03b24	e58d3010	 str         r3, [sp, #0x10]
  03b28	ea000001	 b           |$LN10@BLSDCardTo|
  03b2c		 |$LN9@BLSDCardTo|
  03b2c	e3a03000	 mov         r3, #0
  03b30	e58d3010	 str         r3, [sp, #0x10]
  03b34		 |$LN10@BLSDCardTo|

; 1494 :         return FALSE;

  03b34	e3a03000	 mov         r3, #0
  03b38	e58d3000	 str         r3, [sp]
  03b3c	ea000019	 b           |$LN5@BLSDCardTo|
  03b40		 |$LN2@BLSDCardTo|

; 1495 :     }
; 1496 : 
; 1497 : 
; 1498 :     //Read data, Ray 13-09-17 //XX
; 1499 :     if (FileIoRead(&fileio_ops, pFile, (PVOID)pData, size) != FILEIO_STATUS_OK)

  03b40	e59d302c	 ldr         r3, [sp, #0x2C]
  03b44	e59d2028	 ldr         r2, [sp, #0x28]
  03b48	e59f1074	 ldr         r1, [pc, #0x74]
  03b4c	e5911000	 ldr         r1, [r1]
  03b50	e59f0068	 ldr         r0, [pc, #0x68]
  03b54	eb000000	 bl          FileIoRead
  03b58	e58d0014	 str         r0, [sp, #0x14]
  03b5c	e59d3014	 ldr         r3, [sp, #0x14]
  03b60	e3530000	 cmp         r3, #0
  03b64	0a00000d	 beq         |$LN1@BLSDCardTo|

; 1500 : 	{
; 1501 :         OALMSG(OAL_ERROR, (L"BLSDCardReadLogo:  cannot read file header\r\n"));

  03b68	e59f304c	 ldr         r3, [pc, #0x4C]
  03b6c	e5933440	 ldr         r3, [r3, #0x440]
  03b70	e3130001	 tst         r3, #1
  03b74	0a000004	 beq         |$LN11@BLSDCardTo|
  03b78	e59f0038	 ldr         r0, [pc, #0x38]
  03b7c	eb000000	 bl          NKDbgPrintfW
  03b80	e3a03001	 mov         r3, #1
  03b84	e58d3018	 str         r3, [sp, #0x18]
  03b88	ea000001	 b           |$LN12@BLSDCardTo|
  03b8c		 |$LN11@BLSDCardTo|
  03b8c	e3a03000	 mov         r3, #0
  03b90	e58d3018	 str         r3, [sp, #0x18]
  03b94		 |$LN12@BLSDCardTo|

; 1502 :         return FALSE;

  03b94	e3a03000	 mov         r3, #0
  03b98	e58d3000	 str         r3, [sp]
  03b9c	ea000001	 b           |$LN5@BLSDCardTo|
  03ba0		 |$LN1@BLSDCardTo|

; 1503 : 	}
; 1504 : 
; 1505 :     // return TRUE, File will Reading
; 1506 :     return TRUE;

  03ba0	e3a03001	 mov         r3, #1
  03ba4	e58d3000	 str         r3, [sp]
  03ba8		 |$LN5@BLSDCardTo|

; 1507 : }

  03ba8	e59d0000	 ldr         r0, [sp]
  03bac	e28dd01c	 add         sp, sp, #0x1C
  03bb0	e89d6000	 ldmia       sp, {sp, lr}
  03bb4	e12fff1e	 bx          lr
  03bb8		 |$LN16@BLSDCardTo|
  03bb8		 |$LN17@BLSDCardTo|
  03bb8	00000000	 DCD         |??_C@_1FK@BIPBBPFB@?$AAB?$AAL?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAR?$AAe?$AAa?$AAd?$AAL?$AAo?$AAg?$AAo?$AA?3?$AA?5?$AA?5?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAf@|
  03bbc		 |$LN18@BLSDCardTo|
  03bbc	00000000	 DCD         |dpCurSettings|
  03bc0		 |$LN19@BLSDCardTo|
  03bc0	00000000	 DCD         |fileio_ops|
  03bc4		 |$LN20@BLSDCardTo|
  03bc4	00000000	 DCD         |pFile|
  03bc8		 |$LN21@BLSDCardTo|
  03bc8	00000000	 DCD         |??_C@_1FA@EHAPGJGJ@?$AA?5?$AA?$CK?$AA?$CK?$AAB?$AAL?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAT?$AAo?$AAF?$AAl?$AAa?$AAs?$AAh?$AA?3?$AA?5?$AA?5?$AAC?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAo?$AAp?$AAe?$AAn@|
  03bcc		 |$LN22@BLSDCardTo|
  03bcc	00000000	 DCD         |bFileIoInit|
  03bd0		 |$LN23@BLSDCardTo|
  03bd0	00000000	 DCD         |??_C@_1EO@MDFFFBD@?$AAB?$AAL?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAT?$AAo?$AAF?$AAl?$AAa?$AAs?$AAh?$AA?3?$AA?5?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAi?$AAo?$AA?5?$AAi?$AAn?$AAi?$AAt?$AA?5?$AAf?$AAa@|
  03bd4		 |$LN24@BLSDCardTo|
  03bd4	00000000	 DCD         |Disk|
  03bd8		 |$LN25@BLSDCardTo|
  03bd8	00000000	 DCD         |SDCardReadMultiSectors|
  03bdc		 |$LN26@BLSDCardTo|
  03bdc	00000000	 DCD         |SDCardReadSector|
  03be0		 |$LN27@BLSDCardTo|
  03be0	00000000	 DCD         |SDCardIdentify|
  03be4		 |$LN28@BLSDCardTo|
  03be4	00000000	 DCD         |SDCardInit|
  03be8		 |$LN29@BLSDCardTo|
  03be8	00000000	 DCD         |File|
  03bec		 |$M45310|

			 ENDP  ; |BLSDCardToFlash|

	EXPORT	|??_C@_1EM@GBAEOFJC@?$AAB?$AAL?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAR?$AAe?$AAa?$AAd?$AAL?$AAo?$AAg?$AAo?$AA?3?$AA?5?$AA?5?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAf@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GG@GHEKKBGL@?$AAB?$AAL?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAR?$AAe?$AAa?$AAd?$AAL?$AAo?$AAg?$AAo?$AA?3?$AA?5?$AA?5?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAp@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FI@KCFLKPBN@?$AAB?$AAL?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAR?$AAe?$AAa?$AAd?$AAL?$AAo?$AAg?$AAo?$AA?3?$AA?5?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GA@CPLCDHMI@?$AAB?$AAL?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAR?$AAe?$AAa?$AAd?$AAL?$AAo?$AAg?$AAo?$AA?3?$AA?5?$AA?5?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAf@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EI@GHBAGNOC@?$AAB?$AAL?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAR?$AAe?$AAa?$AAd?$AAL?$AAo?$AAg?$AAo?$AA?3?$AA?5?$AA?5?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5?$AA?$CF@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FA@JKDIHGIH@?$AAB?$AAL?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAR?$AAe?$AAa?$AAd?$AAL?$AAo?$AAg?$AAo?$AA?3?$AA?5?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAi?$AAo?$AA?5?$AAi?$AAn?$AAi?$AAt?$AA?5?$AAf@| [ DATA ] ; `string'
	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|BLSDCardReadLogo|
	IMPORT	|OALLocalFree|
	IMPORT	|OALLocalAlloc|

  000c0			 AREA	 |.pdata|, PDATA
|$T45350| DCD	|$LN30@BLSDCardRe@2|
	DCD	0xc0012504

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EM@GBAEOFJC@?$AAB?$AAL?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAR?$AAe?$AAa?$AAd?$AAL?$AAo?$AAg?$AAo?$AA?3?$AA?5?$AA?5?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAf@| DCB "B"
	DCB	0x0, "L", 0x0, "S", 0x0, "D", 0x0, "C", 0x0, "a", 0x0, "r"
	DCB	0x0, "d", 0x0, "R", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, "L"
	DCB	0x0, "o", 0x0, "g", 0x0, "o", 0x0, ":", 0x0, " ", 0x0, " "
	DCB	0x0, "c", 0x0, "a", 0x0, "n", 0x0, "n", 0x0, "o", 0x0, "t"
	DCB	0x0, " ", 0x0, "r", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, " "
	DCB	0x0, "f", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GG@GHEKKBGL@?$AAB?$AAL?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAR?$AAe?$AAa?$AAd?$AAL?$AAo?$AAg?$AAo?$AA?3?$AA?5?$AA?5?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAp@| DCB "B"
	DCB	0x0, "L", 0x0, "S", 0x0, "D", 0x0, "C", 0x0, "a", 0x0, "r"
	DCB	0x0, "d", 0x0, "R", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, "L"
	DCB	0x0, "o", 0x0, "g", 0x0, "o", 0x0, ":", 0x0, " ", 0x0, " "
	DCB	0x0, "c", 0x0, "a", 0x0, "n", 0x0, "n", 0x0, "o", 0x0, "t"
	DCB	0x0, " ", 0x0, "r", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, " "
	DCB	0x0, "p", 0x0, "i", 0x0, "x", 0x0, "e", 0x0, "l", 0x0, " "
	DCB	0x0, "d", 0x0, "a", 0x0, "t", 0x0, "a", 0x0, " ", 0x0, "o"
	DCB	0x0, "f", 0x0, "f", 0x0, "s", 0x0, "e", 0x0, "t", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FI@KCFLKPBN@?$AAB?$AAL?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAR?$AAe?$AAa?$AAd?$AAL?$AAo?$AAg?$AAo?$AA?3?$AA?5?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5@| DCB "B"
	DCB	0x0, "L", 0x0, "S", 0x0, "D", 0x0, "C", 0x0, "a", 0x0, "r"
	DCB	0x0, "d", 0x0, "R", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, "L"
	DCB	0x0, "o", 0x0, "g", 0x0, "o", 0x0, ":", 0x0, " ", 0x0, " "
	DCB	0x0, "I", 0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i"
	DCB	0x0, "d", 0x0, " ", 0x0, "f", 0x0, "i", 0x0, "l", 0x0, "e"
	DCB	0x0, " ", 0x0, "s", 0x0, "i", 0x0, "g", 0x0, "n", 0x0, "a"
	DCB	0x0, "t", 0x0, "u", 0x0, "r", 0x0, "e", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GA@CPLCDHMI@?$AAB?$AAL?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAR?$AAe?$AAa?$AAd?$AAL?$AAo?$AAg?$AAo?$AA?3?$AA?5?$AA?5?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAf@| DCB "B"
	DCB	0x0, "L", 0x0, "S", 0x0, "D", 0x0, "C", 0x0, "a", 0x0, "r"
	DCB	0x0, "d", 0x0, "R", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, "L"
	DCB	0x0, "o", 0x0, "g", 0x0, "o", 0x0, ":", 0x0, " ", 0x0, " "
	DCB	0x0, "c", 0x0, "a", 0x0, "n", 0x0, "n", 0x0, "o", 0x0, "t"
	DCB	0x0, " ", 0x0, "r", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, " "
	DCB	0x0, "f", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, " ", 0x0, "s"
	DCB	0x0, "i", 0x0, "g", 0x0, "n", 0x0, "a", 0x0, "t", 0x0, "u"
	DCB	0x0, "r", 0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EI@GHBAGNOC@?$AAB?$AAL?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAR?$AAe?$AAa?$AAd?$AAL?$AAo?$AAg?$AAo?$AA?3?$AA?5?$AA?5?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5?$AA?$CF@| DCB "B"
	DCB	0x0, "L", 0x0, "S", 0x0, "D", 0x0, "C", 0x0, "a", 0x0, "r"
	DCB	0x0, "d", 0x0, "R", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, "L"
	DCB	0x0, "o", 0x0, "g", 0x0, "o", 0x0, ":", 0x0, " ", 0x0, " "
	DCB	0x0, "c", 0x0, "a", 0x0, "n", 0x0, "n", 0x0, "o", 0x0, "t"
	DCB	0x0, " ", 0x0, "o", 0x0, "p", 0x0, "e", 0x0, "n", 0x0, " "
	DCB	0x0, "%", 0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FA@JKDIHGIH@?$AAB?$AAL?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAR?$AAe?$AAa?$AAd?$AAL?$AAo?$AAg?$AAo?$AA?3?$AA?5?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAi?$AAo?$AA?5?$AAi?$AAn?$AAi?$AAt?$AA?5?$AAf@| DCB "B"
	DCB	0x0, "L", 0x0, "S", 0x0, "D", 0x0, "C", 0x0, "a", 0x0, "r"
	DCB	0x0, "d", 0x0, "R", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, "L"
	DCB	0x0, "o", 0x0, "g", 0x0, "o", 0x0, ":", 0x0, " ", 0x0, " "
	DCB	0x0, "f", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "i", 0x0, "o"
	DCB	0x0, " ", 0x0, "i", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, " "
	DCB	0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00004			 AREA	 |.xdata|, DATA
|$T45346| DCD	0xffffffa0
; Function compile flags: /Odtp

  03bec			 AREA	 |.text|, CODE, ARM

  03bec	00000000	 DCD         |__GSHandlerCheck|
  03bf0	00000000	 DCD         |$T45346|

  03bf4		 |BLSDCardReadLogo| PROC

; 1517 : {

  03bf4		 |$LN30@BLSDCardRe@2|
  03bf4	e1a0c00d	 mov         r12, sp
  03bf8	e92d0007	 stmdb       sp!, {r0 - r2}
  03bfc	e92d5000	 stmdb       sp!, {r12, lr}
  03c00	e24ddd0a	 sub         sp, sp, #0xA, 26
  03c04		 |$M45347|
  03c04	e59f3478	 ldr         r3, [pc, #0x478]
  03c08	e5933000	 ldr         r3, [r3]
  03c0c	e58d3234	 str         r3, [sp, #0x234]

; 1518 : 	FILEHANDLE logoFile;
; 1519 : 	WORD	   wSignature = 0;

  03c10	e3a03000	 mov         r3, #0
  03c14	e28dcc02	 add         r12, sp, #2, 24
  03c18	e1cc32bc	 strh        r3, [r12, #0x2C]

; 1520 : 	DWORD	   dwOffset = 0;

  03c1c	e3a03000	 mov         r3, #0
  03c20	e58d3224	 str         r3, [sp, #0x224]

; 1521 : 	BYTE*	   pTmpBuf = NULL;

  03c24	e3a03000	 mov         r3, #0
  03c28	e58d3230	 str         r3, [sp, #0x230]

; 1522 : 	DWORD	   dwCursor = 0;

  03c2c	e3a03000	 mov         r3, #0
  03c30	e58d3228	 str         r3, [sp, #0x228]

; 1523 : 
; 1524 : 	if (!bFileIoInit)

  03c34	e59f342c	 ldr         r3, [pc, #0x42C]
  03c38	e5933000	 ldr         r3, [r3]
  03c3c	e3530000	 cmp         r3, #0
  03c40	1a000027	 bne         |$LN9@BLSDCardRe@2|

; 1525 : 	{
; 1526 : 		// set up data structure used by file system driver
; 1527 : 		fileio_ops.init         = &SDCardInit;

  03c44	e59f2434	 ldr         r2, [pc, #0x434]
  03c48	e59f3400	 ldr         r3, [pc, #0x400]
  03c4c	e5832000	 str         r2, [r3]

; 1528 : 		fileio_ops.identify     = &SDCardIdentify;

  03c50	e59f2424	 ldr         r2, [pc, #0x424]
  03c54	e59f33f4	 ldr         r3, [pc, #0x3F4]
  03c58	e5832004	 str         r2, [r3, #4]

; 1529 : 		fileio_ops.read_sector  = &SDCardReadSector;

  03c5c	e59f2414	 ldr         r2, [pc, #0x414]
  03c60	e59f33e8	 ldr         r3, [pc, #0x3E8]
  03c64	e5832008	 str         r2, [r3, #8]

; 1530 : 		fileio_ops.read_multi_sectors = &SDCardReadMultiSectors;

  03c68	e59f2404	 ldr         r2, [pc, #0x404]
  03c6c	e59f33dc	 ldr         r3, [pc, #0x3DC]
  03c70	e583200c	 str         r2, [r3, #0xC]

; 1531 : 		fileio_ops.drive_info   = (PVOID)&Disk;

  03c74	e59f23f4	 ldr         r2, [pc, #0x3F4]
  03c78	e59f33d0	 ldr         r3, [pc, #0x3D0]
  03c7c	e5832010	 str         r2, [r3, #0x10]

; 1532 : 
; 1533 : 		// initialize file system driver
; 1534 : 		if (FileIoInit(&fileio_ops) != FILEIO_STATUS_OK)

  03c80	e59f03c8	 ldr         r0, [pc, #0x3C8]
  03c84	eb000000	 bl          FileIoInit
  03c88	e58d023c	 str         r0, [sp, #0x23C]
  03c8c	e59d323c	 ldr         r3, [sp, #0x23C]
  03c90	e3530000	 cmp         r3, #0
  03c94	0a00000f	 beq         |$LN8@BLSDCardRe@2|

; 1535 : 		{
; 1536 : 			OALMSG(OAL_ERROR, (L"BLSDCardReadLogo:  fileio init failed\r\n"));

  03c98	e59f33ac	 ldr         r3, [pc, #0x3AC]
  03c9c	e5933440	 ldr         r3, [r3, #0x440]
  03ca0	e3130001	 tst         r3, #1
  03ca4	0a000004	 beq         |$LN12@BLSDCardRe@2|
  03ca8	e59f03bc	 ldr         r0, [pc, #0x3BC]
  03cac	eb000000	 bl          NKDbgPrintfW
  03cb0	e3a03001	 mov         r3, #1
  03cb4	e58d3240	 str         r3, [sp, #0x240]
  03cb8	ea000001	 b           |$LN13@BLSDCardRe@2|
  03cbc		 |$LN12@BLSDCardRe@2|
  03cbc	e3a03000	 mov         r3, #0
  03cc0	e58d3240	 str         r3, [sp, #0x240]
  03cc4		 |$LN13@BLSDCardRe@2|

; 1537 : 			return FALSE;

  03cc4	e59d0234	 ldr         r0, [sp, #0x234]
  03cc8	eb000000	 bl          __security_check_cookie
  03ccc	e3a03000	 mov         r3, #0
  03cd0	e58d3238	 str         r3, [sp, #0x238]
  03cd4	ea0000d7	 b           |$LN10@BLSDCardRe@2|
  03cd8		 |$LN8@BLSDCardRe@2|

; 1538 : 		}
; 1539 : 
; 1540 :         bFileIoInit = TRUE;

  03cd8	e59f2388	 ldr         r2, [pc, #0x388]
  03cdc	e3a03001	 mov         r3, #1
  03ce0	e5823000	 str         r3, [r2]
  03ce4		 |$LN9@BLSDCardRe@2|

; 1541 : 	}
; 1542 : 
; 1543 :     // fill in file name (8.3 format)
; 1544 :     FileNameToDirEntry(filename, logoFile.name, logoFile.extension);

  03ce4	e28d2009	 add         r2, sp, #9
  03ce8	e28d1000	 add         r1, sp, #0
  03cec	e59d0288	 ldr         r0, [sp, #0x288]
  03cf0	eb000000	 bl          FileNameToDirEntry

; 1545 : 	
; 1546 :     // try to open file specified by pConfig->filename, return BL_ERROR on failure
; 1547 :     if (FileIoOpen(&fileio_ops, &logoFile) != FILEIO_STATUS_OK)

  03cf4	e28d1000	 add         r1, sp, #0
  03cf8	e59f0350	 ldr         r0, [pc, #0x350]
  03cfc	eb000000	 bl          FileIoOpen
  03d00	e58d0244	 str         r0, [sp, #0x244]
  03d04	e59d3244	 ldr         r3, [sp, #0x244]
  03d08	e3530000	 cmp         r3, #0
  03d0c	0a000010	 beq         |$LN7@BLSDCardRe@2|

; 1548 :     {
; 1549 :         OALMSG(OAL_ERROR, (L"BLSDCardReadLogo:  cannot open %s\r\n", filename));

  03d10	e59f3334	 ldr         r3, [pc, #0x334]
  03d14	e5933440	 ldr         r3, [r3, #0x440]
  03d18	e3130001	 tst         r3, #1
  03d1c	0a000005	 beq         |$LN14@BLSDCardRe@2|
  03d20	e59d1288	 ldr         r1, [sp, #0x288]
  03d24	e59f0338	 ldr         r0, [pc, #0x338]
  03d28	eb000000	 bl          NKDbgPrintfW
  03d2c	e3a03001	 mov         r3, #1
  03d30	e58d3248	 str         r3, [sp, #0x248]
  03d34	ea000001	 b           |$LN15@BLSDCardRe@2|
  03d38		 |$LN14@BLSDCardRe@2|
  03d38	e3a03000	 mov         r3, #0
  03d3c	e58d3248	 str         r3, [sp, #0x248]
  03d40		 |$LN15@BLSDCardRe@2|

; 1550 :         return FALSE;

  03d40	e59d0234	 ldr         r0, [sp, #0x234]
  03d44	eb000000	 bl          __security_check_cookie
  03d48	e3a03000	 mov         r3, #0
  03d4c	e58d3238	 str         r3, [sp, #0x238]
  03d50	ea0000b8	 b           |$LN10@BLSDCardRe@2|
  03d54		 |$LN7@BLSDCardRe@2|

; 1551 :     }
; 1552 : 
; 1553 : 	// Read signature
; 1554 :     if (FileIoRead(&fileio_ops, &logoFile, (PVOID)&wSignature, sizeof(wSignature)) != FILEIO_STATUS_OK)

  03d54	e3a03002	 mov         r3, #2
  03d58	e28d2f8b	 add         r2, sp, #0x8B, 30
  03d5c	e28d1000	 add         r1, sp, #0
  03d60	e59f02e8	 ldr         r0, [pc, #0x2E8]
  03d64	eb000000	 bl          FileIoRead
  03d68	e58d024c	 str         r0, [sp, #0x24C]
  03d6c	e59d324c	 ldr         r3, [sp, #0x24C]
  03d70	e3530000	 cmp         r3, #0
  03d74	0a00000f	 beq         |$LN6@BLSDCardRe@2|

; 1555 : 	{
; 1556 :         OALMSG(OAL_ERROR, (L"BLSDCardReadLogo:  cannot read file signature\r\n"));

  03d78	e59f32cc	 ldr         r3, [pc, #0x2CC]
  03d7c	e5933440	 ldr         r3, [r3, #0x440]
  03d80	e3130001	 tst         r3, #1
  03d84	0a000004	 beq         |$LN16@BLSDCardRe@2|
  03d88	e59f02d0	 ldr         r0, [pc, #0x2D0]
  03d8c	eb000000	 bl          NKDbgPrintfW
  03d90	e3a03001	 mov         r3, #1
  03d94	e58d3250	 str         r3, [sp, #0x250]
  03d98	ea000001	 b           |$LN17@BLSDCardRe@2|
  03d9c		 |$LN16@BLSDCardRe@2|
  03d9c	e3a03000	 mov         r3, #0
  03da0	e58d3250	 str         r3, [sp, #0x250]
  03da4		 |$LN17@BLSDCardRe@2|

; 1557 :         return FALSE;

  03da4	e59d0234	 ldr         r0, [sp, #0x234]
  03da8	eb000000	 bl          __security_check_cookie
  03dac	e3a03000	 mov         r3, #0
  03db0	e58d3238	 str         r3, [sp, #0x238]
  03db4	ea00009f	 b           |$LN10@BLSDCardRe@2|
  03db8		 |$LN6@BLSDCardRe@2|

; 1558 : 	}
; 1559 : 
; 1560 : 	dwCursor += sizeof(wSignature);

  03db8	e59d3228	 ldr         r3, [sp, #0x228]
  03dbc	e2833002	 add         r3, r3, #2
  03dc0	e58d3228	 str         r3, [sp, #0x228]

; 1561 : 
; 1562 :     if( wSignature != 0x4D42 )  

  03dc4	e28d3c02	 add         r3, sp, #2, 24
  03dc8	e1d332bc	 ldrh        r3, [r3, #0x2C]
  03dcc	e1a02003	 mov         r2, r3
  03dd0	e3a03c4d	 mov         r3, #0x4D, 24
  03dd4	e3833042	 orr         r3, r3, #0x42
  03dd8	e1520003	 cmp         r2, r3
  03ddc	0a00000f	 beq         |$LN5@BLSDCardRe@2|

; 1563 :     {
; 1564 :         OALMSG(OAL_ERROR, (L"BLSDCardReadLogo:  Invalid file signature\r\n"));

  03de0	e59f3264	 ldr         r3, [pc, #0x264]
  03de4	e5933440	 ldr         r3, [r3, #0x440]
  03de8	e3130001	 tst         r3, #1
  03dec	0a000004	 beq         |$LN18@BLSDCardRe@2|
  03df0	e59f0264	 ldr         r0, [pc, #0x264]
  03df4	eb000000	 bl          NKDbgPrintfW
  03df8	e3a03001	 mov         r3, #1
  03dfc	e58d3254	 str         r3, [sp, #0x254]
  03e00	ea000001	 b           |$LN19@BLSDCardRe@2|
  03e04		 |$LN18@BLSDCardRe@2|
  03e04	e3a03000	 mov         r3, #0
  03e08	e58d3254	 str         r3, [sp, #0x254]
  03e0c		 |$LN19@BLSDCardRe@2|

; 1565 :         return FALSE;

  03e0c	e59d0234	 ldr         r0, [sp, #0x234]
  03e10	eb000000	 bl          __security_check_cookie
  03e14	e3a03000	 mov         r3, #0
  03e18	e58d3238	 str         r3, [sp, #0x238]
  03e1c	ea000085	 b           |$LN10@BLSDCardRe@2|
  03e20		 |$LN5@BLSDCardRe@2|

; 1566 : 	}
; 1567 : 
; 1568 : 	// Read dummy data
; 1569 : 	pTmpBuf = (BYTE*)OALLocalAlloc(0, 2*sizeof(DWORD));

  03e20	e3a01008	 mov         r1, #8
  03e24	e3a00000	 mov         r0, #0
  03e28	eb000000	 bl          OALLocalAlloc
  03e2c	e58d0258	 str         r0, [sp, #0x258]
  03e30	e59d3258	 ldr         r3, [sp, #0x258]
  03e34	e58d3230	 str         r3, [sp, #0x230]

; 1570 :     if (FileIoRead(&fileio_ops, &logoFile, (PVOID)pTmpBuf, 2*sizeof(DWORD)) != FILEIO_STATUS_OK)

  03e38	e3a03008	 mov         r3, #8
  03e3c	e59d2230	 ldr         r2, [sp, #0x230]
  03e40	e28d1000	 add         r1, sp, #0
  03e44	e59f0204	 ldr         r0, [pc, #0x204]
  03e48	eb000000	 bl          FileIoRead
  03e4c	e58d025c	 str         r0, [sp, #0x25C]
  03e50	e59d325c	 ldr         r3, [sp, #0x25C]
  03e54	e3530000	 cmp         r3, #0
  03e58	0a000011	 beq         |$LN4@BLSDCardRe@2|

; 1571 : 	{
; 1572 :         OALMSG(OAL_ERROR, (L"BLSDCardReadLogo:  cannot read file header\r\n"));

  03e5c	e59f31e8	 ldr         r3, [pc, #0x1E8]
  03e60	e5933440	 ldr         r3, [r3, #0x440]
  03e64	e3130001	 tst         r3, #1
  03e68	0a000004	 beq         |$LN20@BLSDCardRe@2|
  03e6c	e59f01d4	 ldr         r0, [pc, #0x1D4]
  03e70	eb000000	 bl          NKDbgPrintfW
  03e74	e3a03001	 mov         r3, #1
  03e78	e58d3260	 str         r3, [sp, #0x260]
  03e7c	ea000001	 b           |$LN21@BLSDCardRe@2|
  03e80		 |$LN20@BLSDCardRe@2|
  03e80	e3a03000	 mov         r3, #0
  03e84	e58d3260	 str         r3, [sp, #0x260]
  03e88		 |$LN21@BLSDCardRe@2|

; 1573 : 		OALLocalFree((HLOCAL)pTmpBuf);

  03e88	e59d0230	 ldr         r0, [sp, #0x230]
  03e8c	eb000000	 bl          OALLocalFree

; 1574 :         return FALSE;

  03e90	e59d0234	 ldr         r0, [sp, #0x234]
  03e94	eb000000	 bl          __security_check_cookie
  03e98	e3a03000	 mov         r3, #0
  03e9c	e58d3238	 str         r3, [sp, #0x238]
  03ea0	ea000064	 b           |$LN10@BLSDCardRe@2|
  03ea4		 |$LN4@BLSDCardRe@2|

; 1575 : 	}
; 1576 : 
; 1577 : 	OALLocalFree((HLOCAL)pTmpBuf);

  03ea4	e59d0230	 ldr         r0, [sp, #0x230]
  03ea8	eb000000	 bl          OALLocalFree

; 1578 : 	dwCursor += 2*sizeof(DWORD);

  03eac	e59d3228	 ldr         r3, [sp, #0x228]
  03eb0	e2833008	 add         r3, r3, #8
  03eb4	e58d3228	 str         r3, [sp, #0x228]

; 1579 : 
; 1580 : 	// Read pixel data offset
; 1581 :     if (FileIoRead(&fileio_ops, &logoFile, (PVOID)&dwOffset, sizeof(dwOffset)) != FILEIO_STATUS_OK)

  03eb8	e3a03004	 mov         r3, #4
  03ebc	e28d2f89	 add         r2, sp, #0x89, 30
  03ec0	e28d1000	 add         r1, sp, #0
  03ec4	e59f0184	 ldr         r0, [pc, #0x184]
  03ec8	eb000000	 bl          FileIoRead
  03ecc	e58d0264	 str         r0, [sp, #0x264]
  03ed0	e59d3264	 ldr         r3, [sp, #0x264]
  03ed4	e3530000	 cmp         r3, #0
  03ed8	0a00000f	 beq         |$LN3@BLSDCardRe@2|

; 1582 : 	{
; 1583 :         OALMSG(OAL_ERROR, (L"BLSDCardReadLogo:  cannot read pixel data offset\r\n"));

  03edc	e59f3168	 ldr         r3, [pc, #0x168]
  03ee0	e5933440	 ldr         r3, [r3, #0x440]
  03ee4	e3130001	 tst         r3, #1
  03ee8	0a000004	 beq         |$LN22@BLSDCardRe@2|
  03eec	e59f0164	 ldr         r0, [pc, #0x164]
  03ef0	eb000000	 bl          NKDbgPrintfW
  03ef4	e3a03001	 mov         r3, #1
  03ef8	e58d3268	 str         r3, [sp, #0x268]
  03efc	ea000001	 b           |$LN23@BLSDCardRe@2|
  03f00		 |$LN22@BLSDCardRe@2|
  03f00	e3a03000	 mov         r3, #0
  03f04	e58d3268	 str         r3, [sp, #0x268]
  03f08		 |$LN23@BLSDCardRe@2|

; 1584 :         return FALSE;

  03f08	e59d0234	 ldr         r0, [sp, #0x234]
  03f0c	eb000000	 bl          __security_check_cookie
  03f10	e3a03000	 mov         r3, #0
  03f14	e58d3238	 str         r3, [sp, #0x238]
  03f18	ea000046	 b           |$LN10@BLSDCardRe@2|
  03f1c		 |$LN3@BLSDCardRe@2|

; 1585 : 	}
; 1586 : 
; 1587 : 	dwCursor += sizeof(dwOffset);

  03f1c	e59d3228	 ldr         r3, [sp, #0x228]
  03f20	e2833004	 add         r3, r3, #4
  03f24	e58d3228	 str         r3, [sp, #0x228]

; 1588 : 
; 1589 : 	// Read dummy data before pixel data offset
; 1590 : 	pTmpBuf = (BYTE*)OALLocalAlloc(0, dwOffset - dwCursor);

  03f28	e59d2224	 ldr         r2, [sp, #0x224]
  03f2c	e59d3228	 ldr         r3, [sp, #0x228]
  03f30	e0421003	 sub         r1, r2, r3
  03f34	e3a00000	 mov         r0, #0
  03f38	eb000000	 bl          OALLocalAlloc
  03f3c	e58d026c	 str         r0, [sp, #0x26C]
  03f40	e59d326c	 ldr         r3, [sp, #0x26C]
  03f44	e58d3230	 str         r3, [sp, #0x230]

; 1591 :     if (FileIoRead(&fileio_ops, &logoFile, (PVOID)pTmpBuf, dwOffset - dwCursor) != FILEIO_STATUS_OK)

  03f48	e59d2224	 ldr         r2, [sp, #0x224]
  03f4c	e59d3228	 ldr         r3, [sp, #0x228]
  03f50	e0423003	 sub         r3, r2, r3
  03f54	e59d2230	 ldr         r2, [sp, #0x230]
  03f58	e28d1000	 add         r1, sp, #0
  03f5c	e59f00ec	 ldr         r0, [pc, #0xEC]
  03f60	eb000000	 bl          FileIoRead
  03f64	e58d0270	 str         r0, [sp, #0x270]
  03f68	e59d3270	 ldr         r3, [sp, #0x270]
  03f6c	e3530000	 cmp         r3, #0
  03f70	0a000011	 beq         |$LN2@BLSDCardRe@2|

; 1592 : 	{
; 1593 :         OALMSG(OAL_ERROR, (L"BLSDCardReadLogo:  cannot read file\r\n"));

  03f74	e59f30d0	 ldr         r3, [pc, #0xD0]
  03f78	e5933440	 ldr         r3, [r3, #0x440]
  03f7c	e3130001	 tst         r3, #1
  03f80	0a000004	 beq         |$LN24@BLSDCardRe@2|
  03f84	e59f00c8	 ldr         r0, [pc, #0xC8]
  03f88	eb000000	 bl          NKDbgPrintfW
  03f8c	e3a03001	 mov         r3, #1
  03f90	e58d3274	 str         r3, [sp, #0x274]
  03f94	ea000001	 b           |$LN25@BLSDCardRe@2|
  03f98		 |$LN24@BLSDCardRe@2|
  03f98	e3a03000	 mov         r3, #0
  03f9c	e58d3274	 str         r3, [sp, #0x274]
  03fa0		 |$LN25@BLSDCardRe@2|

; 1594 : 		OALLocalFree((HLOCAL)pTmpBuf);

  03fa0	e59d0230	 ldr         r0, [sp, #0x230]
  03fa4	eb000000	 bl          OALLocalFree

; 1595 :         return FALSE;

  03fa8	e59d0234	 ldr         r0, [sp, #0x234]
  03fac	eb000000	 bl          __security_check_cookie
  03fb0	e3a03000	 mov         r3, #0
  03fb4	e58d3238	 str         r3, [sp, #0x238]
  03fb8	ea00001e	 b           |$LN10@BLSDCardRe@2|
  03fbc		 |$LN2@BLSDCardRe@2|

; 1596 : 	}
; 1597 : 
; 1598 : 	OALLocalFree((HLOCAL)pTmpBuf);

  03fbc	e59d0230	 ldr         r0, [sp, #0x230]
  03fc0	eb000000	 bl          OALLocalFree

; 1599 : 
; 1600 : 	// Read pixel data
; 1601 :     if (FileIoRead(&fileio_ops, &logoFile, (PVOID)pData, size) != FILEIO_STATUS_OK)

  03fc4	e59d3290	 ldr         r3, [sp, #0x290]
  03fc8	e59d228c	 ldr         r2, [sp, #0x28C]
  03fcc	e28d1000	 add         r1, sp, #0
  03fd0	e59f0078	 ldr         r0, [pc, #0x78]
  03fd4	eb000000	 bl          FileIoRead
  03fd8	e58d0278	 str         r0, [sp, #0x278]
  03fdc	e59d3278	 ldr         r3, [sp, #0x278]
  03fe0	e3530000	 cmp         r3, #0
  03fe4	0a00000f	 beq         |$LN1@BLSDCardRe@2|

; 1602 : 	{
; 1603 :         OALMSG(OAL_ERROR, (L"BLSDCardReadLogo:  cannot read file header\r\n"));

  03fe8	e59f305c	 ldr         r3, [pc, #0x5C]
  03fec	e5933440	 ldr         r3, [r3, #0x440]
  03ff0	e3130001	 tst         r3, #1
  03ff4	0a000004	 beq         |$LN26@BLSDCardRe@2|
  03ff8	e59f0048	 ldr         r0, [pc, #0x48]
  03ffc	eb000000	 bl          NKDbgPrintfW
  04000	e3a03001	 mov         r3, #1
  04004	e58d327c	 str         r3, [sp, #0x27C]
  04008	ea000001	 b           |$LN27@BLSDCardRe@2|
  0400c		 |$LN26@BLSDCardRe@2|
  0400c	e3a03000	 mov         r3, #0
  04010	e58d327c	 str         r3, [sp, #0x27C]
  04014		 |$LN27@BLSDCardRe@2|

; 1604 :         return FALSE;

  04014	e59d0234	 ldr         r0, [sp, #0x234]
  04018	eb000000	 bl          __security_check_cookie
  0401c	e3a03000	 mov         r3, #0
  04020	e58d3238	 str         r3, [sp, #0x238]
  04024	ea000003	 b           |$LN10@BLSDCardRe@2|
  04028		 |$LN1@BLSDCardRe@2|

; 1605 : 	}
; 1606 : 
; 1607 : 	return TRUE;

  04028	e59d0234	 ldr         r0, [sp, #0x234]
  0402c	eb000000	 bl          __security_check_cookie
  04030	e3a03001	 mov         r3, #1
  04034	e58d3238	 str         r3, [sp, #0x238]
  04038		 |$LN10@BLSDCardRe@2|

; 1608 : }

  04038	e59d0238	 ldr         r0, [sp, #0x238]
  0403c	e28ddd0a	 add         sp, sp, #0xA, 26
  04040	e89d6000	 ldmia       sp, {sp, lr}
  04044	e12fff1e	 bx          lr
  04048		 |$LN31@BLSDCardRe@2|
  04048		 |$LN32@BLSDCardRe@2|
  04048	00000000	 DCD         |??_C@_1FK@BIPBBPFB@?$AAB?$AAL?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAR?$AAe?$AAa?$AAd?$AAL?$AAo?$AAg?$AAo?$AA?3?$AA?5?$AA?5?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAf@|
  0404c		 |$LN33@BLSDCardRe@2|
  0404c	00000000	 DCD         |dpCurSettings|
  04050		 |$LN34@BLSDCardRe@2|
  04050	00000000	 DCD         |fileio_ops|
  04054		 |$LN35@BLSDCardRe@2|
  04054	00000000	 DCD         |??_C@_1EM@GBAEOFJC@?$AAB?$AAL?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAR?$AAe?$AAa?$AAd?$AAL?$AAo?$AAg?$AAo?$AA?3?$AA?5?$AA?5?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAf@|
  04058		 |$LN36@BLSDCardRe@2|
  04058	00000000	 DCD         |??_C@_1GG@GHEKKBGL@?$AAB?$AAL?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAR?$AAe?$AAa?$AAd?$AAL?$AAo?$AAg?$AAo?$AA?3?$AA?5?$AA?5?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAp@|
  0405c		 |$LN37@BLSDCardRe@2|
  0405c	00000000	 DCD         |??_C@_1FI@KCFLKPBN@?$AAB?$AAL?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAR?$AAe?$AAa?$AAd?$AAL?$AAo?$AAg?$AAo?$AA?3?$AA?5?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5@|
  04060		 |$LN38@BLSDCardRe@2|
  04060	00000000	 DCD         |??_C@_1GA@CPLCDHMI@?$AAB?$AAL?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAR?$AAe?$AAa?$AAd?$AAL?$AAo?$AAg?$AAo?$AA?3?$AA?5?$AA?5?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAf@|
  04064		 |$LN39@BLSDCardRe@2|
  04064	00000000	 DCD         |??_C@_1EI@GHBAGNOC@?$AAB?$AAL?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAR?$AAe?$AAa?$AAd?$AAL?$AAo?$AAg?$AAo?$AA?3?$AA?5?$AA?5?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5?$AA?$CF@|
  04068		 |$LN40@BLSDCardRe@2|
  04068	00000000	 DCD         |bFileIoInit|
  0406c		 |$LN41@BLSDCardRe@2|
  0406c	00000000	 DCD         |??_C@_1FA@JKDIHGIH@?$AAB?$AAL?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAR?$AAe?$AAa?$AAd?$AAL?$AAo?$AAg?$AAo?$AA?3?$AA?5?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAi?$AAo?$AA?5?$AAi?$AAn?$AAi?$AAt?$AA?5?$AAf@|
  04070		 |$LN42@BLSDCardRe@2|
  04070	00000000	 DCD         |Disk|
  04074		 |$LN43@BLSDCardRe@2|
  04074	00000000	 DCD         |SDCardReadMultiSectors|
  04078		 |$LN44@BLSDCardRe@2|
  04078	00000000	 DCD         |SDCardReadSector|
  0407c		 |$LN45@BLSDCardRe@2|
  0407c	00000000	 DCD         |SDCardIdentify|
  04080		 |$LN46@BLSDCardRe@2|
  04080	00000000	 DCD         |SDCardInit|
  04084		 |$LN47@BLSDCardRe@2|
  04084	00000000	 DCD         |__security_cookie|
  04088		 |$M45348|

			 ENDP  ; |BLSDCardReadLogo|

	END
