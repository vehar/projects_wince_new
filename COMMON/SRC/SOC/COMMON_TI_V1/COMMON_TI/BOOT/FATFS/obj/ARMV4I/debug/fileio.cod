; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\BOOT\FATFS\fileio.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.data|, DATA
	 COMMON	|ExtendedPartionBaseSector|, 0x4


  00000			 AREA	 |.bss|, NOINIT
|FatBufferSectorNumber| % 0x4

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|??_C@_03NDEAONJP@?5?5?5?$AA@| [ DATA ]	; `string'
	EXPORT	|??_C@_08GGFKNFHG@?5?5?5?5?5?5?5?5?$AA@| [ DATA ] ; `string'
	EXPORT	|FileNameToDirEntry|
	IMPORT	|toupper|
	IMPORT	|strcpy|

  00000			 AREA	 |.pdata|, PDATA
|$T43522| DCD	|$LN16@FileNameTo|
	DCD	0x40007004
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\boot\fatfs\fileio.c

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_03NDEAONJP@?5?5?5?$AA@| DCB "   ", 0x0		; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_08GGFKNFHG@?5?5?5?5?5?5?5?5?$AA@| DCB "        ", 0x0 ; `string'
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |FileNameToDirEntry| PROC

; 523  : {

  00000		 |$LN16@FileNameTo|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0007	 stmdb       sp!, {r0 - r2}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd014	 sub         sp, sp, #0x14
  00010		 |$M43519|

; 524  :     int i, j;
; 525  : 
; 526  :     // fill name and extension with blanks
; 527  :     strcpy(pName, "        ");

  00010	e59f11a4	 ldr         r1, [pc, #0x1A4]
  00014	e59d0020	 ldr         r0, [sp, #0x20]
  00018	eb000000	 bl          strcpy

; 528  :     strcpy(pExtension, "   ");

  0001c	e59f1194	 ldr         r1, [pc, #0x194]
  00020	e59d0024	 ldr         r0, [sp, #0x24]
  00024	eb000000	 bl          strcpy

; 529  : 
; 530  :     //OALMSG(1, (L"FileNameToDirEntry: \""));
; 531  : 
; 532  :     // copy name
; 533  :     for (i = 0; i < 8; i++)

  00028	e3a03000	 mov         r3, #0
  0002c	e58d3000	 str         r3, [sp]
  00030	ea000002	 b           |$LN11@FileNameTo|
  00034		 |$LN10@FileNameTo|
  00034	e59d3000	 ldr         r3, [sp]
  00038	e2833001	 add         r3, r3, #1
  0003c	e58d3000	 str         r3, [sp]
  00040		 |$LN11@FileNameTo|
  00040	e59d3000	 ldr         r3, [sp]
  00044	e3530008	 cmp         r3, #8
  00048	aa000023	 bge         |$LN9@FileNameTo|

; 534  :     {
; 535  :         if (pFileName[i] && pFileName[i] != L'.')

  0004c	e59d1000	 ldr         r1, [sp]
  00050	e3a03002	 mov         r3, #2
  00054	e0020391	 mul         r2, r1, r3
  00058	e59d301c	 ldr         r3, [sp, #0x1C]
  0005c	e0833002	 add         r3, r3, r2
  00060	e1d330b0	 ldrh        r3, [r3]
  00064	e3530000	 cmp         r3, #0
  00068	0a000019	 beq         |$LN8@FileNameTo|
  0006c	e59d1000	 ldr         r1, [sp]
  00070	e3a03002	 mov         r3, #2
  00074	e0020391	 mul         r2, r1, r3
  00078	e59d301c	 ldr         r3, [sp, #0x1C]
  0007c	e0833002	 add         r3, r3, r2
  00080	e1d330b0	 ldrh        r3, [r3]
  00084	e353002e	 cmp         r3, #0x2E
  00088	0a000011	 beq         |$LN8@FileNameTo|

; 536  :         {
; 537  :             pName[i] = (CHAR) toupper((CHAR)(pFileName[i]));

  0008c	e59d1000	 ldr         r1, [sp]
  00090	e3a03002	 mov         r3, #2
  00094	e0020391	 mul         r2, r1, r3
  00098	e59d301c	 ldr         r3, [sp, #0x1C]
  0009c	e0833002	 add         r3, r3, r2
  000a0	e1d330b0	 ldrh        r3, [r3]
  000a4	e1a00c03	 mov         r0, r3, lsl #24
  000a8	e1a00c40	 mov         r0, r0, asr #24
  000ac	eb000000	 bl          toupper
  000b0	e58d0008	 str         r0, [sp, #8]
  000b4	e59d3008	 ldr         r3, [sp, #8]
  000b8	e1a01c03	 mov         r1, r3, lsl #24
  000bc	e1a01c41	 mov         r1, r1, asr #24
  000c0	e59d2020	 ldr         r2, [sp, #0x20]
  000c4	e59d3000	 ldr         r3, [sp]
  000c8	e0823003	 add         r3, r2, r3
  000cc	e5c31000	 strb        r1, [r3]

; 538  :             //OALMSG(1, (L"%c", (CHAR)(pName[i])));
; 539  :         }
; 540  :         else

  000d0	ea000000	 b           |$LN7@FileNameTo|
  000d4		 |$LN8@FileNameTo|

; 541  :             break;

  000d4	ea000000	 b           |$LN9@FileNameTo|
  000d8		 |$LN7@FileNameTo|

; 542  :     }

  000d8	eaffffd5	 b           |$LN10@FileNameTo|
  000dc		 |$LN9@FileNameTo|

; 543  : 
; 544  :     //OALMSG(1, (L"."));
; 545  : 
; 546  :     // check for extension
; 547  :     if (pFileName[i] == L'.')

  000dc	e59d1000	 ldr         r1, [sp]
  000e0	e3a03002	 mov         r3, #2
  000e4	e0020391	 mul         r2, r1, r3
  000e8	e59d301c	 ldr         r3, [sp, #0x1C]
  000ec	e0833002	 add         r3, r3, r2
  000f0	e1d330b0	 ldrh        r3, [r3]
  000f4	e353002e	 cmp         r3, #0x2E
  000f8	1a00002b	 bne         |$LN6@FileNameTo|

; 548  :     {
; 549  :         // skip period
; 550  :         i++;

  000fc	e59d3000	 ldr         r3, [sp]
  00100	e2833001	 add         r3, r3, #1
  00104	e58d3000	 str         r3, [sp]

; 551  :         // copy extension
; 552  :         for (j = 0; j < 3; j++)

  00108	e3a03000	 mov         r3, #0
  0010c	e58d3004	 str         r3, [sp, #4]
  00110	ea000002	 b           |$LN5@FileNameTo|
  00114		 |$LN4@FileNameTo|
  00114	e59d3004	 ldr         r3, [sp, #4]
  00118	e2833001	 add         r3, r3, #1
  0011c	e58d3004	 str         r3, [sp, #4]
  00120		 |$LN5@FileNameTo|
  00120	e59d3004	 ldr         r3, [sp, #4]
  00124	e3530003	 cmp         r3, #3
  00128	aa00001f	 bge         |$LN3@FileNameTo|

; 553  :         {
; 554  :             if (pFileName[i])

  0012c	e59d1000	 ldr         r1, [sp]
  00130	e3a03002	 mov         r3, #2
  00134	e0020391	 mul         r2, r1, r3
  00138	e59d301c	 ldr         r3, [sp, #0x1C]
  0013c	e0833002	 add         r3, r3, r2
  00140	e1d330b0	 ldrh        r3, [r3]
  00144	e3530000	 cmp         r3, #0
  00148	0a000015	 beq         |$LN2@FileNameTo|

; 555  :             {
; 556  :                 pExtension[j] = (CHAR)toupper((BYTE)(pFileName[i++]));

  0014c	e59d1000	 ldr         r1, [sp]
  00150	e3a03002	 mov         r3, #2
  00154	e0020391	 mul         r2, r1, r3
  00158	e59d301c	 ldr         r3, [sp, #0x1C]
  0015c	e0833002	 add         r3, r3, r2
  00160	e1d330b0	 ldrh        r3, [r3]
  00164	e20330ff	 and         r3, r3, #0xFF
  00168	e58d300c	 str         r3, [sp, #0xC]
  0016c	e59d000c	 ldr         r0, [sp, #0xC]
  00170	eb000000	 bl          toupper
  00174	e58d0010	 str         r0, [sp, #0x10]
  00178	e59d3010	 ldr         r3, [sp, #0x10]
  0017c	e1a01c03	 mov         r1, r3, lsl #24
  00180	e1a01c41	 mov         r1, r1, asr #24
  00184	e59d2024	 ldr         r2, [sp, #0x24]
  00188	e59d3004	 ldr         r3, [sp, #4]
  0018c	e0823003	 add         r3, r2, r3
  00190	e5c31000	 strb        r1, [r3]
  00194	e59d3000	 ldr         r3, [sp]
  00198	e2833001	 add         r3, r3, #1
  0019c	e58d3000	 str         r3, [sp]

; 557  :                 //OALMSG(1, (L"%c", (CHAR)(pExtension[j])));
; 558  :             }
; 559  :             else

  001a0	ea000000	 b           |$LN1@FileNameTo|
  001a4		 |$LN2@FileNameTo|

; 560  :                 break;

  001a4	ea000000	 b           |$LN3@FileNameTo|
  001a8		 |$LN1@FileNameTo|

; 561  :         }

  001a8	eaffffd9	 b           |$LN4@FileNameTo|
  001ac		 |$LN3@FileNameTo|
  001ac		 |$LN6@FileNameTo|

; 562  :     }
; 563  : 
; 564  :     //OALMSG(1, (L"\"\r\n"));
; 565  : }

  001ac	e28dd014	 add         sp, sp, #0x14
  001b0	e89d6000	 ldmia       sp, {sp, lr}
  001b4	e12fff1e	 bx          lr
  001b8		 |$LN17@FileNameTo|
  001b8		 |$LN18@FileNameTo|
  001b8	00000000	 DCD         |??_C@_03NDEAONJP@?5?5?5?$AA@|
  001bc		 |$LN19@FileNameTo|
  001bc	00000000	 DCD         |??_C@_08GGFKNFHG@?5?5?5?5?5?5?5?5?$AA@|
  001c0		 |$M43520|

			 ENDP  ; |FileNameToDirEntry|

	EXPORT	|??_C@_1FE@DFDOCJPP@?$AAB?$AAO?$AAO?$AAT?$AAL?$AAO?$AAA?$AAD?$AAE?$AAR?$AA?3?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA_?$AAs?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AA?$CF?$AAu?$AA?5?$AA?$CI?$AAM?$AAB?$AAR?$AA?$CJ@| [ DATA ] ; `string'
	EXPORT	|??_C@_1KM@EGIJIJI@?$AAB?$AAO?$AAO?$AAT?$AAL?$AAO?$AAA?$AAD?$AAE?$AAR?$AA?3?$AA?5?$AAA?$AAc?$AAt?$AAi?$AAv?$AAe?$AA?5?$AAp?$AAa?$AAr?$AAt?$AAi?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAt?$AAy?$AAp@| [ DATA ] ; `string'
	EXPORT	|??_C@_1JK@MABLLHJL@?$AAB?$AAO?$AAO?$AAT?$AAL?$AAO?$AAA?$AAD?$AAE?$AAR?$AA?3?$AA?5?$AAP?$AAa?$AAr?$AAt?$AAi?$AAt?$AAi?$AAo?$AAn?$AAT?$AAa?$AAb?$AAl?$AAe?$AA?$FL?$AA?$CF?$AAd?$AA?$FN?$AA?5?$AAF@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FC@MLDGMMAI@?$AAB?$AAO?$AAO?$AAT?$AAL?$AAO?$AAA?$AAD?$AAE?$AAR?$AA?3?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA_?$AAs?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AA?$CF?$AAu?$AA?5?$AA?$CI?$AAP?$AAT?$AA?$CJ?$AA?5@| [ DATA ] ; `string'
	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|FileIoInit|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|dpCurSettings|
	IMPORT	|__security_cookie|
	IMPORT	|__GSHandlerCheck|
	IMPORT	|__rt_sdiv|
	IMPORT	|__rt_udiv|
	IMPORT	|__security_check_cookie|

  00004			 AREA	 |.bss|, NOINIT
|FilesysInfo| %	0x48

  00008			 AREA	 |.pdata|, PDATA
|$T43565| DCD	|$LN64@FileIoInit|
	DCD	0xc0020404

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FE@DFDOCJPP@?$AAB?$AAO?$AAO?$AAT?$AAL?$AAO?$AAA?$AAD?$AAE?$AAR?$AA?3?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA_?$AAs?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AA?$CF?$AAu?$AA?5?$AA?$CI?$AAM?$AAB?$AAR?$AA?$CJ@| DCB "B"
	DCB	0x0, "O", 0x0, "O", 0x0, "T", 0x0, "L", 0x0, "O", 0x0, "A"
	DCB	0x0, "D", 0x0, "E", 0x0, "R", 0x0, ":", 0x0, " ", 0x0, "r"
	DCB	0x0, "e", 0x0, "a", 0x0, "d", 0x0, "_", 0x0, "s", 0x0, "e"
	DCB	0x0, "c", 0x0, "t", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "%"
	DCB	0x0, "u", 0x0, " ", 0x0, "(", 0x0, "M", 0x0, "B", 0x0, "R"
	DCB	0x0, ")", 0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l"
	DCB	0x0, "e", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KM@EGIJIJI@?$AAB?$AAO?$AAO?$AAT?$AAL?$AAO?$AAA?$AAD?$AAE?$AAR?$AA?3?$AA?5?$AAA?$AAc?$AAt?$AAi?$AAv?$AAe?$AA?5?$AAp?$AAa?$AAr?$AAt?$AAi?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAt?$AAy?$AAp@| DCB "B"
	DCB	0x0, "O", 0x0, "O", 0x0, "T", 0x0, "L", 0x0, "O", 0x0, "A"
	DCB	0x0, "D", 0x0, "E", 0x0, "R", 0x0, ":", 0x0, " ", 0x0, "A"
	DCB	0x0, "c", 0x0, "t", 0x0, "i", 0x0, "v", 0x0, "e", 0x0, " "
	DCB	0x0, "p", 0x0, "a", 0x0, "r", 0x0, "t", 0x0, "i", 0x0, "t"
	DCB	0x0, "i", 0x0, "o", 0x0, "n", 0x0, " ", 0x0, "t", 0x0, "y"
	DCB	0x0, "p", 0x0, "e", 0x0, " ", 0x0, "i", 0x0, "s", 0x0, " "
	DCB	0x0, "E", 0x0, "X", 0x0, "T", 0x0, "E", 0x0, "N", 0x0, "D"
	DCB	0x0, "E", 0x0, "D", 0x0, " ", 0x0, "D", 0x0, "O", 0x0, "S"
	DCB	0x0, ",", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "a", 0x0, "d"
	DCB	0x0, "i", 0x0, "n", 0x0, "g", 0x0, " ", 0x0, "e", 0x0, "x"
	DCB	0x0, "t", 0x0, "e", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "p", 0x0, "a", 0x0, "r", 0x0, "t", 0x0, "i"
	DCB	0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, " ", 0x0, "t"
	DCB	0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JK@MABLLHJL@?$AAB?$AAO?$AAO?$AAT?$AAL?$AAO?$AAA?$AAD?$AAE?$AAR?$AA?3?$AA?5?$AAP?$AAa?$AAr?$AAt?$AAi?$AAt?$AAi?$AAo?$AAn?$AAT?$AAa?$AAb?$AAl?$AAe?$AA?$FL?$AA?$CF?$AAd?$AA?$FN?$AA?5?$AAF@| DCB "B"
	DCB	0x0, "O", 0x0, "O", 0x0, "T", 0x0, "L", 0x0, "O", 0x0, "A"
	DCB	0x0, "D", 0x0, "E", 0x0, "R", 0x0, ":", 0x0, " ", 0x0, "P"
	DCB	0x0, "a", 0x0, "r", 0x0, "t", 0x0, "i", 0x0, "t", 0x0, "i"
	DCB	0x0, "o", 0x0, "n", 0x0, "T", 0x0, "a", 0x0, "b", 0x0, "l"
	DCB	0x0, "e", 0x0, "[", 0x0, "%", 0x0, "d", 0x0, "]", 0x0, " "
	DCB	0x0, "F", 0x0, "l", 0x0, "a", 0x0, "g", 0x0, ":", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "T"
	DCB	0x0, "y", 0x0, "p", 0x0, "e", 0x0, ":", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "S", 0x0, "t"
	DCB	0x0, "a", 0x0, "r", 0x0, "t", 0x0, ":", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "X", 0x0, ",", 0x0, " ", 0x0, "S", 0x0, "i"
	DCB	0x0, "z", 0x0, "e", 0x0, ":", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "X", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FC@MLDGMMAI@?$AAB?$AAO?$AAO?$AAT?$AAL?$AAO?$AAA?$AAD?$AAE?$AAR?$AA?3?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA_?$AAs?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AA?$CF?$AAu?$AA?5?$AA?$CI?$AAP?$AAT?$AA?$CJ?$AA?5@| DCB "B"
	DCB	0x0, "O", 0x0, "O", 0x0, "T", 0x0, "L", 0x0, "O", 0x0, "A"
	DCB	0x0, "D", 0x0, "E", 0x0, "R", 0x0, ":", 0x0, " ", 0x0, "r"
	DCB	0x0, "e", 0x0, "a", 0x0, "d", 0x0, "_", 0x0, "s", 0x0, "e"
	DCB	0x0, "c", 0x0, "t", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "%"
	DCB	0x0, "u", 0x0, " ", 0x0, "(", 0x0, "P", 0x0, "T", 0x0, ")"
	DCB	0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e"
	DCB	0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.xdata|, DATA
|$T43561| DCD	0xffffffbc
; Function compile flags: /Odtp

  001c0			 AREA	 |.text|, CODE, ARM

  001c0	00000000	 DCD         |__GSHandlerCheck|
  001c4	00000000	 DCD         |$T43561|

  001c8		 |FileIoInit| PROC

; 579  : {

  001c8		 |$LN64@FileIoInit|
  001c8	e1a0c00d	 mov         r12, sp
  001cc	e92d0001	 stmdb       sp!, {r0}
  001d0	e92d5000	 stmdb       sp!, {r12, lr}
  001d4	e24ddf97	 sub         sp, sp, #0x97, 30
  001d8		 |$M43562|
  001d8	e59f37f4	 ldr         r3, [pc, #0x7F4]
  001dc	e5933000	 ldr         r3, [r3]
  001e0	e58d3224	 str         r3, [sp, #0x224]

; 580  :     UINT16 Sector[SECTOR_SIZE/2];
; 581  :     UINT8 * pSector = (UINT8 *)Sector;

  001e4	e28d3018	 add         r3, sp, #0x18
  001e8	e58d300c	 str         r3, [sp, #0xC]

; 582  :     int status;
; 583  :     int i;
; 584  :     UINT32 boot_sector          = 0;

  001ec	e3a03000	 mov         r3, #0
  001f0	e58d321c	 str         r3, [sp, #0x21C]

; 585  :     UCHAR partition_type        = 0;

  001f4	e3a03000	 mov         r3, #0
  001f8	e5cd3010	 strb        r3, [sp, #0x10]

; 586  :     int ExtendedPartitionDepth  = 0;

  001fc	e3a03000	 mov         r3, #0
  00200	e58d3218	 str         r3, [sp, #0x218]

; 587  :     int PartitionTableEntryCount = 4;

  00204	e3a03004	 mov         r3, #4
  00208	e58d3008	 str         r3, [sp, #8]

; 588  :         
; 589  :     // initialize device driver
; 590  :     #if BOOTLOADER_DEBUG_DISPLAY_CALLS
; 591  :         OALMSG(OAL_INFO, (L"BOOTLOADER: FileIoInit() calling init.\r\n"));
; 592  :     #endif
; 593  : 
; 594  :     // assume no extented partion, no offset
; 595  :     ExtendedPartionBaseSector = 0;

  0020c	e59f27ac	 ldr         r2, [pc, #0x7AC]
  00210	e3a03000	 mov         r3, #0
  00214	e5823000	 str         r3, [r2]

; 596  : 
; 597  :     if ((status = pfileio_ops->init(pfileio_ops->drive_info)) != ATA_STATUS_OK)

  00218	e59d3264	 ldr         r3, [sp, #0x264]
  0021c	e2833010	 add         r3, r3, #0x10
  00220	e5930000	 ldr         r0, [r3]
  00224	e59d3264	 ldr         r3, [sp, #0x264]
  00228	e5933000	 ldr         r3, [r3]
  0022c	e1a0e00f	 mov         lr, pc
  00230	e12fff13	 bx          r3
  00234	e58d0234	 str         r0, [sp, #0x234]
  00238	e59d3234	 ldr         r3, [sp, #0x234]
  0023c	e58d3220	 str         r3, [sp, #0x220]
  00240	e59d3220	 ldr         r3, [sp, #0x220]
  00244	e3530000	 cmp         r3, #0
  00248	0a000004	 beq         |$LN34@FileIoInit|

; 598  :         return FILEIO_STATUS_INIT_FAILED;

  0024c	e59d0224	 ldr         r0, [sp, #0x224]
  00250	eb000000	 bl          __security_check_cookie
  00254	e3a03001	 mov         r3, #1
  00258	e58d3228	 str         r3, [sp, #0x228]
  0025c	ea0001d1	 b           |$LN35@FileIoInit|
  00260		 |$LN34@FileIoInit|

; 599  : 
; 600  :     // the identify drive command is optional, used only to display information for debugging
; 601  :     //if (pfileio_ops->identify && pfileio_ops->identify(pfileio_ops->drive_info, pSector) != ATA_STATUS_OK)
; 602  :     //  return FILEIO_STATUS_INIT_FAILED;
; 603  :     if (pfileio_ops->identify)

  00260	e59d3264	 ldr         r3, [sp, #0x264]
  00264	e2833004	 add         r3, r3, #4
  00268	e5933000	 ldr         r3, [r3]
  0026c	e3530000	 cmp         r3, #0
  00270	0a000008	 beq         |$LN33@FileIoInit|

; 604  :         pfileio_ops->identify(pfileio_ops->drive_info, pSector);

  00274	e59d100c	 ldr         r1, [sp, #0xC]
  00278	e59d3264	 ldr         r3, [sp, #0x264]
  0027c	e2833010	 add         r3, r3, #0x10
  00280	e5930000	 ldr         r0, [r3]
  00284	e59d3264	 ldr         r3, [sp, #0x264]
  00288	e2833004	 add         r3, r3, #4
  0028c	e5933000	 ldr         r3, [r3]
  00290	e1a0e00f	 mov         lr, pc
  00294	e12fff13	 bx          r3
  00298		 |$LN33@FileIoInit|
  00298		 |$CheckPartitionTable$43340|

; 605  : 
; 606  :     #if BOOTLOADER_DEBUG_DISPLAY_CALLS
; 607  :         OALMSG(OAL_INFO, (L"BOOTLOADER: FileIoInit() calling read_sector to get partition table\r\n"));
; 608  :     #endif
; 609  : 
; 610  : CheckPartitionTable:
; 611  : 
; 612  :     // read in candidate partition table sector
; 613  :     if (pfileio_ops->read_sector(pfileio_ops->drive_info, boot_sector + ExtendedPartionBaseSector, pSector) != ATA_STATUS_OK)

  00298	e59d200c	 ldr         r2, [sp, #0xC]
  0029c	e59d121c	 ldr         r1, [sp, #0x21C]
  002a0	e59f3718	 ldr         r3, [pc, #0x718]
  002a4	e5933000	 ldr         r3, [r3]
  002a8	e0811003	 add         r1, r1, r3
  002ac	e59d3264	 ldr         r3, [sp, #0x264]
  002b0	e2833010	 add         r3, r3, #0x10
  002b4	e5930000	 ldr         r0, [r3]
  002b8	e59d3264	 ldr         r3, [sp, #0x264]
  002bc	e2833008	 add         r3, r3, #8
  002c0	e5933000	 ldr         r3, [r3]
  002c4	e1a0e00f	 mov         lr, pc
  002c8	e12fff13	 bx          r3
  002cc	e58d0238	 str         r0, [sp, #0x238]
  002d0	e59d3238	 ldr         r3, [sp, #0x238]
  002d4	e3530000	 cmp         r3, #0
  002d8	0a000013	 beq         |$LN32@FileIoInit|

; 614  :     {
; 615  :         #if BOOTLOADER_DEBUG_DISPLAY_ERRORS
; 616  :             OALMSG(OAL_INFO, (L"BOOTLOADER: read_sector %u (PT) failed\r\n", boot_sector + ExtendedPartionBaseSector));

  002dc	e59f36e0	 ldr         r3, [pc, #0x6E0]
  002e0	e5933440	 ldr         r3, [r3, #0x440]
  002e4	e3130008	 tst         r3, #8
  002e8	0a000008	 beq         |$LN37@FileIoInit|
  002ec	e59d221c	 ldr         r2, [sp, #0x21C]
  002f0	e59f36c8	 ldr         r3, [pc, #0x6C8]
  002f4	e5933000	 ldr         r3, [r3]
  002f8	e0821003	 add         r1, r2, r3
  002fc	e59f06cc	 ldr         r0, [pc, #0x6CC]
  00300	eb000000	 bl          NKDbgPrintfW
  00304	e3a03001	 mov         r3, #1
  00308	e58d323c	 str         r3, [sp, #0x23C]
  0030c	ea000001	 b           |$LN38@FileIoInit|
  00310		 |$LN37@FileIoInit|
  00310	e3a03000	 mov         r3, #0
  00314	e58d323c	 str         r3, [sp, #0x23C]
  00318		 |$LN38@FileIoInit|

; 617  :         #endif
; 618  :         return FILEIO_STATUS_INIT_FAILED;

  00318	e59d0224	 ldr         r0, [sp, #0x224]
  0031c	eb000000	 bl          __security_check_cookie
  00320	e3a03001	 mov         r3, #1
  00324	e58d3228	 str         r3, [sp, #0x228]
  00328	ea00019e	 b           |$LN35@FileIoInit|
  0032c		 |$LN32@FileIoInit|

; 619  :     }
; 620  : 
; 621  :     #if BOOTLOADER_DEBUG_DUMP_SECTOR_ZERO || BOOTLOADER_DEBUG_DUMP_ALL_SECTORS
; 622  :         DumpData((unsigned char *)pSector, 512);
; 623  :     #endif
; 624  :         
; 625  :     // check for valid BPB (Bios Parameter Block) in sector zero (old DOS disk organization, no partition table)
; 626  :     //if ( (*pSector == 0xe9 || *pSector == 0xeb) && (((PBOOT_SECTOR)pSector)->bpb.bytes_per_sector == 512) )
; 627  :     //if ( (*pSector == 0xe9 || *pSector == 0xeb) && ((BYTE_STRUCT_2_READ(((PBOOT_SECTOR)pSector)->bpb.bytes_per_sector)) == 512) )
; 628  :     if (   
; 629  :         (*pSector == 0xe9 || *pSector == 0xeb) &&
; 630  :         ((BYTE_STRUCT_2_READ(((PBOOT_SECTOR)pSector)->bpb.bytes_per_sector)) == 512) &&
; 631  :         ByteIsPowerOfTwo(((PBOOT_SECTOR)pSector)->bpb.sectors_per_cluster) &&
; 632  :         (((PBOOT_SECTOR)pSector)->bpb.media_descriptor == 0xf8)
; 633  :     )

  0032c	e59d300c	 ldr         r3, [sp, #0xC]
  00330	e5d33000	 ldrb        r3, [r3]
  00334	e35300e9	 cmp         r3, #0xE9
  00338	0a000003	 beq         |$LN30@FileIoInit|
  0033c	e59d300c	 ldr         r3, [sp, #0xC]
  00340	e5d33000	 ldrb        r3, [r3]
  00344	e35300eb	 cmp         r3, #0xEB
  00348	1a00002b	 bne         |$LN31@FileIoInit|
  0034c		 |$LN30@FileIoInit|
  0034c	e59d300c	 ldr         r3, [sp, #0xC]
  00350	e283300b	 add         r3, r3, #0xB
  00354	e5d33000	 ldrb        r3, [r3]
  00358	e1a02003	 mov         r2, r3
  0035c	e59d300c	 ldr         r3, [sp, #0xC]
  00360	e283300c	 add         r3, r3, #0xC
  00364	e5d33000	 ldrb        r3, [r3]
  00368	e1a03403	 mov         r3, r3, lsl #8
  0036c	e1823003	 orr         r3, r2, r3
  00370	e3530c02	 cmp         r3, #2, 24
  00374	1a000020	 bne         |$LN31@FileIoInit|
  00378	e59d300c	 ldr         r3, [sp, #0xC]
  0037c	e283300d	 add         r3, r3, #0xD
  00380	e5d30000	 ldrb        r0, [r3]
  00384	eb000000	 bl          ByteIsPowerOfTwo
  00388	e58d0240	 str         r0, [sp, #0x240]
  0038c	e59d3240	 ldr         r3, [sp, #0x240]
  00390	e3530000	 cmp         r3, #0
  00394	0a000018	 beq         |$LN31@FileIoInit|
  00398	e59d300c	 ldr         r3, [sp, #0xC]
  0039c	e2833015	 add         r3, r3, #0x15
  003a0	e5d33000	 ldrb        r3, [r3]
  003a4	e35300f8	 cmp         r3, #0xF8
  003a8	1a000013	 bne         |$LN31@FileIoInit|

; 634  :     {
; 635  :         boot_sector = 0;

  003ac	e3a03000	 mov         r3, #0
  003b0	e58d321c	 str         r3, [sp, #0x21C]

; 636  : 
; 637  :         if ( (BYTE_STRUCT_2_READ(((PBOOT_SECTOR)pSector)->bpb.sectors_per_fat)) == 0)

  003b4	e59d300c	 ldr         r3, [sp, #0xC]
  003b8	e2833016	 add         r3, r3, #0x16
  003bc	e5d33000	 ldrb        r3, [r3]
  003c0	e1a02003	 mov         r2, r3
  003c4	e59d300c	 ldr         r3, [sp, #0xC]
  003c8	e2833017	 add         r3, r3, #0x17
  003cc	e5d33000	 ldrb        r3, [r3]
  003d0	e1a03403	 mov         r3, r3, lsl #8
  003d4	e1923003	 orrs        r3, r2, r3
  003d8	1a000003	 bne         |$LN29@FileIoInit|

; 638  :         {
; 639  :             // assume FAT32 for now...
; 640  :             FilesysInfo.FatType = FAT_TYPE_FAT32;

  003dc	e59f25d4	 ldr         r2, [pc, #0x5D4]
  003e0	e3a03003	 mov         r3, #3
  003e4	e5823044	 str         r3, [r2, #0x44]

; 641  :             #if BOOTLOADER_DEBUG_DISPLAY_BPB
; 642  :                 OALMSG(OAL_INFO, (L"BOOTLOADER: Found BPB in sector zero, assuming FAT32 with no partition table\r\n"));
; 643  :             #endif
; 644  :         }
; 645  :         else

  003e8	ea000002	 b           |$LN28@FileIoInit|
  003ec		 |$LN29@FileIoInit|

; 646  :         {
; 647  :             // assume FAT16 for now...
; 648  :             FilesysInfo.FatType = FAT_TYPE_FAT16;

  003ec	e59f25c4	 ldr         r2, [pc, #0x5C4]
  003f0	e3a03002	 mov         r3, #2
  003f4	e5823044	 str         r3, [r2, #0x44]
  003f8		 |$LN28@FileIoInit|

; 649  :             #if BOOTLOADER_DEBUG_DISPLAY_BPB
; 650  :                 OALMSG(OAL_INFO, (L"BOOTLOADER: Found BPB in sector zero, assuming FAT16 with no partition table\r\n"));
; 651  :             #endif
; 652  :         }
; 653  :         goto NoPartitionTable;

  003f8	ea0000fd	 b           |$NoPartitionTable$43354|
  003fc		 |$LN31@FileIoInit|

; 654  :     }
; 655  : 
; 656  :     // assume that sector 0 contains a partition table
; 657  :     #if BOOTLOADER_DEBUG_DISPLAY_PARTITION_TABLE
; 658  :         for (i = 0; i < PartitionTableEntryCount; i++)

  003fc	e3a03000	 mov         r3, #0
  00400	e58d3014	 str         r3, [sp, #0x14]
  00404	ea000002	 b           |$LN27@FileIoInit|
  00408		 |$LN26@FileIoInit|
  00408	e59d3014	 ldr         r3, [sp, #0x14]
  0040c	e2833001	 add         r3, r3, #1
  00410	e58d3014	 str         r3, [sp, #0x14]
  00414		 |$LN27@FileIoInit|
  00414	e59d2014	 ldr         r2, [sp, #0x14]
  00418	e59d3008	 ldr         r3, [sp, #8]
  0041c	e1520003	 cmp         r2, r3
  00420	aa000043	 bge         |$LN25@FileIoInit|

; 659  :         {
; 660  :             OALMSG(OAL_INFO, (L"BOOTLOADER: PartitionTable[%d] Flag:0x%x, Type:0x%x, Start:0x%X, Size:0x%X\r\n", 
; 661  :                 i,
; 662  :                 ((PPARTITION_TABLE)pSector)->Entry[i].ActivePartitionFlag, 
; 663  :                 ((PPARTITION_TABLE)pSector)->Entry[i].PartitionType, 
; 664  :                 ((PPARTITION_TABLE)pSector)->Entry[i].PartitionStartLBA, 
; 665  :                 ((PPARTITION_TABLE)pSector)->Entry[i].PartitionSize));

  00424	e59f3598	 ldr         r3, [pc, #0x598]
  00428	e5933440	 ldr         r3, [r3, #0x440]
  0042c	e3130008	 tst         r3, #8
  00430	0a00003c	 beq         |$LN39@FileIoInit|
  00434	e59d300c	 ldr         r3, [sp, #0xC]
  00438	e2833c01	 add         r3, r3, #1, 24
  0043c	e28310be	 add         r1, r3, #0xBE
  00440	e59d2014	 ldr         r2, [sp, #0x14]
  00444	e3a03010	 mov         r3, #0x10
  00448	e0030392	 mul         r3, r2, r3
  0044c	e0813003	 add         r3, r1, r3
  00450	e283100c	 add         r1, r3, #0xC
  00454	e5d13003	 ldrb        r3, [r1, #3]
  00458	e1a02403	 mov         r2, r3, lsl #8
  0045c	e5d13002	 ldrb        r3, [r1, #2]
  00460	e1833002	 orr         r3, r3, r2
  00464	e1a02403	 mov         r2, r3, lsl #8
  00468	e5d13001	 ldrb        r3, [r1, #1]
  0046c	e1833002	 orr         r3, r3, r2
  00470	e1a02403	 mov         r2, r3, lsl #8
  00474	e5d13000	 ldrb        r3, [r1]
  00478	e1833002	 orr         r3, r3, r2
  0047c	e58d3004	 str         r3, [sp, #4]
  00480	e59d300c	 ldr         r3, [sp, #0xC]
  00484	e2833c01	 add         r3, r3, #1, 24
  00488	e28310be	 add         r1, r3, #0xBE
  0048c	e59d2014	 ldr         r2, [sp, #0x14]
  00490	e3a03010	 mov         r3, #0x10
  00494	e0030392	 mul         r3, r2, r3
  00498	e0813003	 add         r3, r1, r3
  0049c	e2831008	 add         r1, r3, #8
  004a0	e5d13003	 ldrb        r3, [r1, #3]
  004a4	e1a02403	 mov         r2, r3, lsl #8
  004a8	e5d13002	 ldrb        r3, [r1, #2]
  004ac	e1833002	 orr         r3, r3, r2
  004b0	e1a02403	 mov         r2, r3, lsl #8
  004b4	e5d13001	 ldrb        r3, [r1, #1]
  004b8	e1833002	 orr         r3, r3, r2
  004bc	e1a02403	 mov         r2, r3, lsl #8
  004c0	e5d13000	 ldrb        r3, [r1]
  004c4	e1833002	 orr         r3, r3, r2
  004c8	e58d3000	 str         r3, [sp]
  004cc	e59d300c	 ldr         r3, [sp, #0xC]
  004d0	e2833c01	 add         r3, r3, #1, 24
  004d4	e28310be	 add         r1, r3, #0xBE
  004d8	e59d2014	 ldr         r2, [sp, #0x14]
  004dc	e3a03010	 mov         r3, #0x10
  004e0	e0030392	 mul         r3, r2, r3
  004e4	e0813003	 add         r3, r1, r3
  004e8	e2833004	 add         r3, r3, #4
  004ec	e5d33000	 ldrb        r3, [r3]
  004f0	e59d200c	 ldr         r2, [sp, #0xC]
  004f4	e2822c01	 add         r2, r2, #1, 24
  004f8	e28200be	 add         r0, r2, #0xBE
  004fc	e59d1014	 ldr         r1, [sp, #0x14]
  00500	e3a02010	 mov         r2, #0x10
  00504	e0020291	 mul         r2, r1, r2
  00508	e0802002	 add         r2, r0, r2
  0050c	e5d22000	 ldrb        r2, [r2]
  00510	e59d1014	 ldr         r1, [sp, #0x14]
  00514	e59f04b0	 ldr         r0, [pc, #0x4B0]
  00518	eb000000	 bl          NKDbgPrintfW
  0051c	e3a03001	 mov         r3, #1
  00520	e58d3244	 str         r3, [sp, #0x244]
  00524	ea000001	 b           |$LN40@FileIoInit|
  00528		 |$LN39@FileIoInit|
  00528	e3a03000	 mov         r3, #0
  0052c	e58d3244	 str         r3, [sp, #0x244]
  00530		 |$LN40@FileIoInit|

; 666  :         }

  00530	eaffffb4	 b           |$LN26@FileIoInit|
  00534		 |$LN25@FileIoInit|

; 667  :     #endif
; 668  : 
; 669  :     // search the partition table for the active partition
; 670  :     for (i = 0; i < PartitionTableEntryCount; i++)

  00534	e3a03000	 mov         r3, #0
  00538	e58d3014	 str         r3, [sp, #0x14]
  0053c	ea000002	 b           |$LN24@FileIoInit|
  00540		 |$LN23@FileIoInit|
  00540	e59d3014	 ldr         r3, [sp, #0x14]
  00544	e2833001	 add         r3, r3, #1
  00548	e58d3014	 str         r3, [sp, #0x14]
  0054c		 |$LN24@FileIoInit|
  0054c	e59d2014	 ldr         r2, [sp, #0x14]
  00550	e59d3008	 ldr         r3, [sp, #8]
  00554	e1520003	 cmp         r2, r3
  00558	aa000033	 bge         |$LN22@FileIoInit|

; 671  :     {
; 672  :         if (((PPARTITION_TABLE)pSector)->Entry[i].ActivePartitionFlag == 0x80 || ((PPARTITION_TABLE)pSector)->Entry[i].PartitionType != 0x00)

  0055c	e59d300c	 ldr         r3, [sp, #0xC]
  00560	e2833c01	 add         r3, r3, #1, 24
  00564	e28310be	 add         r1, r3, #0xBE
  00568	e59d2014	 ldr         r2, [sp, #0x14]
  0056c	e3a03010	 mov         r3, #0x10
  00570	e0030392	 mul         r3, r2, r3
  00574	e0813003	 add         r3, r1, r3
  00578	e5d33000	 ldrb        r3, [r3]
  0057c	e3530080	 cmp         r3, #0x80
  00580	0a00000a	 beq         |$LN20@FileIoInit|
  00584	e59d300c	 ldr         r3, [sp, #0xC]
  00588	e2833c01	 add         r3, r3, #1, 24
  0058c	e28310be	 add         r1, r3, #0xBE
  00590	e59d2014	 ldr         r2, [sp, #0x14]
  00594	e3a03010	 mov         r3, #0x10
  00598	e0030392	 mul         r3, r2, r3
  0059c	e0813003	 add         r3, r1, r3
  005a0	e2833004	 add         r3, r3, #4
  005a4	e5d33000	 ldrb        r3, [r3]
  005a8	e3530000	 cmp         r3, #0
  005ac	0a00001d	 beq         |$LN21@FileIoInit|
  005b0		 |$LN20@FileIoInit|

; 673  :         {
; 674  :             boot_sector = ((PPARTITION_TABLE)pSector)->Entry[i].PartitionStartLBA;

  005b0	e59d300c	 ldr         r3, [sp, #0xC]
  005b4	e2833c01	 add         r3, r3, #1, 24
  005b8	e28310be	 add         r1, r3, #0xBE
  005bc	e59d2014	 ldr         r2, [sp, #0x14]
  005c0	e3a03010	 mov         r3, #0x10
  005c4	e0030392	 mul         r3, r2, r3
  005c8	e0813003	 add         r3, r1, r3
  005cc	e2831008	 add         r1, r3, #8
  005d0	e5d13003	 ldrb        r3, [r1, #3]
  005d4	e1a02403	 mov         r2, r3, lsl #8
  005d8	e5d13002	 ldrb        r3, [r1, #2]
  005dc	e1833002	 orr         r3, r3, r2
  005e0	e1a02403	 mov         r2, r3, lsl #8
  005e4	e5d13001	 ldrb        r3, [r1, #1]
  005e8	e1833002	 orr         r3, r3, r2
  005ec	e1a02403	 mov         r2, r3, lsl #8
  005f0	e5d13000	 ldrb        r3, [r1]
  005f4	e1833002	 orr         r3, r3, r2
  005f8	e58d321c	 str         r3, [sp, #0x21C]

; 675  :             partition_type = ((PPARTITION_TABLE)pSector)->Entry[i].PartitionType;

  005fc	e59d300c	 ldr         r3, [sp, #0xC]
  00600	e2833c01	 add         r3, r3, #1, 24
  00604	e28310be	 add         r1, r3, #0xBE
  00608	e59d2014	 ldr         r2, [sp, #0x14]
  0060c	e3a03010	 mov         r3, #0x10
  00610	e0030392	 mul         r3, r2, r3
  00614	e0813003	 add         r3, r1, r3
  00618	e2833004	 add         r3, r3, #4
  0061c	e5d33000	 ldrb        r3, [r3]
  00620	e5cd3010	 strb        r3, [sp, #0x10]

; 676  :             break;

  00624	ea000000	 b           |$LN22@FileIoInit|
  00628		 |$LN21@FileIoInit|

; 677  :         }
; 678  :     }

  00628	eaffffc4	 b           |$LN23@FileIoInit|
  0062c		 |$LN22@FileIoInit|

; 679  :     if (i == PartitionTableEntryCount)

  0062c	e59d2014	 ldr         r2, [sp, #0x14]
  00630	e59d3008	 ldr         r3, [sp, #8]
  00634	e1520003	 cmp         r2, r3
  00638	1a000004	 bne         |$LN19@FileIoInit|

; 680  :     {
; 681  :         #if BOOTLOADER_DEBUG_DISPLAY_CALLS
; 682  :             OALMSG(OAL_INFO, (L"BOOTLOADER: FileIoInit() no active partition found\r\n"));
; 683  :         #endif
; 684  : 
; 685  :         return FILEIO_STATUS_INIT_FAILED;

  0063c	e59d0224	 ldr         r0, [sp, #0x224]
  00640	eb000000	 bl          __security_check_cookie
  00644	e3a03001	 mov         r3, #1
  00648	e58d3228	 str         r3, [sp, #0x228]
  0064c	ea0000d5	 b           |$LN35@FileIoInit|
  00650		 |$LN19@FileIoInit|

; 686  :     }
; 687  : 
; 688  :     #if BOOTLOADER_DEBUG_DISPLAY_CALLS
; 689  :         OALMSG(OAL_INFO, (L"BOOTLOADER: trying partition %d\r\n", i));
; 690  :     #endif
; 691  : 
; 692  :     // check partition type
; 693  :     switch (partition_type)

  00650	e5dd3010	 ldrb        r3, [sp, #0x10]
  00654	e58d3248	 str         r3, [sp, #0x248]
  00658	e59d3248	 ldr         r3, [sp, #0x248]
  0065c	e2433001	 sub         r3, r3, #1
  00660	e58d3248	 str         r3, [sp, #0x248]
  00664	e59d3248	 ldr         r3, [sp, #0x248]
  00668	e353000e	 cmp         r3, #0xE
  0066c	8a000036	 bhi         |$LN12@FileIoInit|
  00670	e59d2248	 ldr         r2, [sp, #0x248]
  00674	e1a03102	 mov         r3, r2, lsl #2
  00678	e083300f	 add         r3, r3, pc
  0067c	e5933004	 ldr         r3, [r3, #4]
  00680	e08ff003	 add         pc, pc, r3
  00684		 |$LN46@FileIoInit|
  00684		 |$LN45@FileIoInit|
  00684		 |$LN47@FileIoInit|
  00684	00000038	 DCD         0x38
  00688		 |$LN48@FileIoInit|
  00688	000000c4	 DCD         0xc4
  0068c		 |$LN49@FileIoInit|
  0068c	000000c4	 DCD         0xc4
  00690		 |$LN50@FileIoInit|
  00690	00000048	 DCD         0x48
  00694		 |$LN51@FileIoInit|
  00694	00000068	 DCD         0x68
  00698		 |$LN52@FileIoInit|
  00698	00000048	 DCD         0x48
  0069c		 |$LN53@FileIoInit|
  0069c	000000c4	 DCD         0xc4
  006a0		 |$LN54@FileIoInit|
  006a0	000000c4	 DCD         0xc4
  006a4		 |$LN55@FileIoInit|
  006a4	000000c4	 DCD         0xc4
  006a8		 |$LN56@FileIoInit|
  006a8	000000c4	 DCD         0xc4
  006ac		 |$LN57@FileIoInit|
  006ac	00000058	 DCD         0x58
  006b0		 |$LN58@FileIoInit|
  006b0	00000058	 DCD         0x58
  006b4		 |$LN59@FileIoInit|
  006b4	000000c4	 DCD         0xc4
  006b8		 |$LN60@FileIoInit|
  006b8	00000048	 DCD         0x48
  006bc		 |$LN61@FileIoInit|
  006bc	00000068	 DCD         0x68
  006c0		 |$LN16@FileIoInit|

; 694  :     {
; 695  :         #if BOOTLOADER_SUPPORTS_FAT12
; 696  :         case 0x01:
; 697  :             #if BOOTLOADER_DEBUG_DISPLAY_BPB
; 698  :                 OALMSG(OAL_INFO, (L"BOOTLOADER: Active partition type is FAT12\r\n"));
; 699  :             #endif
; 700  :             FilesysInfo.FatType = FAT_TYPE_FAT12;

  006c0	e59f22f0	 ldr         r2, [pc, #0x2F0]
  006c4	e3a03001	 mov         r3, #1
  006c8	e5823044	 str         r3, [r2, #0x44]

; 701  :             break;

  006cc	ea000023	 b           |$LN17@FileIoInit|
  006d0		 |$LN15@FileIoInit|

; 702  :         #endif
; 703  :         
; 704  :         #if BOOTLOADER_SUPPORTS_FAT16
; 705  :         case 0x04:
; 706  :         case 0x06:
; 707  :         case 0x0e:
; 708  :             #if BOOTLOADER_DEBUG_DISPLAY_BPB
; 709  :                 OALMSG(OAL_INFO, (L"BOOTLOADER: Active partition type is FAT16\r\n"));
; 710  :             #endif
; 711  :             FilesysInfo.FatType = FAT_TYPE_FAT16;

  006d0	e59f22e0	 ldr         r2, [pc, #0x2E0]
  006d4	e3a03002	 mov         r3, #2
  006d8	e5823044	 str         r3, [r2, #0x44]

; 712  :             break;

  006dc	ea00001f	 b           |$LN17@FileIoInit|
  006e0		 |$LN14@FileIoInit|

; 713  :         #endif
; 714  : 
; 715  :         #if BOOTLOADER_SUPPORTS_FAT32
; 716  :         case 0x0b:
; 717  :         case 0x0c:
; 718  :             #if BOOTLOADER_DEBUG_DISPLAY_BPB
; 719  :                 OALMSG(OAL_INFO, (L"BOOTLOADER: Active partition type is FAT32\r\n"));
; 720  :             #endif
; 721  :             FilesysInfo.FatType = FAT_TYPE_FAT32;

  006e0	e59f22d0	 ldr         r2, [pc, #0x2D0]
  006e4	e3a03003	 mov         r3, #3
  006e8	e5823044	 str         r3, [r2, #0x44]

; 722  :             break;

  006ec	ea00001b	 b           |$LN17@FileIoInit|
  006f0		 |$LN13@FileIoInit|

; 723  :         #endif
; 724  : 
; 725  :         case 0x05:
; 726  :         case 0x0f:
; 727  :             #if BOOTLOADER_DEBUG_DISPLAY_PARTITION_TABLE
; 728  :                 OALMSG(OAL_INFO, (L"BOOTLOADER: Active partition type is EXTENDED DOS, reading extended partition table\r\n"));

  006f0	e59f32cc	 ldr         r3, [pc, #0x2CC]
  006f4	e5933440	 ldr         r3, [r3, #0x440]
  006f8	e3130008	 tst         r3, #8
  006fc	0a000004	 beq         |$LN41@FileIoInit|
  00700	e59f02c0	 ldr         r0, [pc, #0x2C0]
  00704	eb000000	 bl          NKDbgPrintfW
  00708	e3a03001	 mov         r3, #1
  0070c	e58d324c	 str         r3, [sp, #0x24C]
  00710	ea000001	 b           |$LN42@FileIoInit|
  00714		 |$LN41@FileIoInit|
  00714	e3a03000	 mov         r3, #0
  00718	e58d324c	 str         r3, [sp, #0x24C]
  0071c		 |$LN42@FileIoInit|

; 729  :             #endif
; 730  :             ExtendedPartitionDepth++;

  0071c	e59d3218	 ldr         r3, [sp, #0x218]
  00720	e2833001	 add         r3, r3, #1
  00724	e58d3218	 str         r3, [sp, #0x218]

; 731  :             PartitionTableEntryCount = 2;

  00728	e3a03002	 mov         r3, #2
  0072c	e58d3008	 str         r3, [sp, #8]

; 732  :             ExtendedPartionBaseSector = boot_sector;

  00730	e59d221c	 ldr         r2, [sp, #0x21C]
  00734	e59f3284	 ldr         r3, [pc, #0x284]
  00738	e5832000	 str         r2, [r3]

; 733  :             // sector addressing now is relative to partition table sector
; 734  :             boot_sector = 0;

  0073c	e3a03000	 mov         r3, #0
  00740	e58d321c	 str         r3, [sp, #0x21C]

; 735  :             goto CheckPartitionTable;

  00744	eafffed3	 b           |$CheckPartitionTable$43340|

; 736  :             break;

  00748	ea000004	 b           |$LN17@FileIoInit|
  0074c		 |$LN12@FileIoInit|

; 737  : 
; 738  :         default:
; 739  :             #if BOOTLOADER_DEBUG_DISPLAY_BPB
; 740  :                 OALMSG(OAL_INFO, (L"BOOTLOADER: Active partition type is not supported (0x%x)\r\n", partition_type));
; 741  :             #endif
; 742  :             return FILEIO_STATUS_INIT_FAILED;

  0074c	e59d0224	 ldr         r0, [sp, #0x224]
  00750	eb000000	 bl          __security_check_cookie
  00754	e3a03001	 mov         r3, #1
  00758	e58d3228	 str         r3, [sp, #0x228]
  0075c	ea000091	 b           |$LN35@FileIoInit|
  00760		 |$LN17@FileIoInit|

; 743  :             break;
; 744  :     }                   
; 745  : 
; 746  :     #if BOOTLOADER_DEBUG_DISPLAY_CALLS
; 747  :         OALMSG(OAL_INFO, (L"BOOTLOADER: FileIoInit() calling read_sector to read MBR for active partition\r\n"));
; 748  :     #endif
; 749  : 
; 750  :     // read in the master boot record (MBR), fill in the BPB
; 751  :     if (pfileio_ops->read_sector(pfileio_ops->drive_info, boot_sector + ExtendedPartionBaseSector, pSector) != ATA_STATUS_OK)

  00760	e59d200c	 ldr         r2, [sp, #0xC]
  00764	e59d121c	 ldr         r1, [sp, #0x21C]
  00768	e59f3250	 ldr         r3, [pc, #0x250]
  0076c	e5933000	 ldr         r3, [r3]
  00770	e0811003	 add         r1, r1, r3
  00774	e59d3264	 ldr         r3, [sp, #0x264]
  00778	e2833010	 add         r3, r3, #0x10
  0077c	e5930000	 ldr         r0, [r3]
  00780	e59d3264	 ldr         r3, [sp, #0x264]
  00784	e2833008	 add         r3, r3, #8
  00788	e5933000	 ldr         r3, [r3]
  0078c	e1a0e00f	 mov         lr, pc
  00790	e12fff13	 bx          r3
  00794	e58d0250	 str         r0, [sp, #0x250]
  00798	e59d3250	 ldr         r3, [sp, #0x250]
  0079c	e3530000	 cmp         r3, #0
  007a0	0a000013	 beq         |$LN11@FileIoInit|

; 752  :     {
; 753  :         #if BOOTLOADER_DEBUG_DISPLAY_ERRORS
; 754  :             OALMSG(OAL_INFO, (L"BOOTLOADER: read_sector %u (MBR) failed\r\n", boot_sector + ExtendedPartionBaseSector));

  007a4	e59f3218	 ldr         r3, [pc, #0x218]
  007a8	e5933440	 ldr         r3, [r3, #0x440]
  007ac	e3130008	 tst         r3, #8
  007b0	0a000008	 beq         |$LN43@FileIoInit|
  007b4	e59d221c	 ldr         r2, [sp, #0x21C]
  007b8	e59f3200	 ldr         r3, [pc, #0x200]
  007bc	e5933000	 ldr         r3, [r3]
  007c0	e0821003	 add         r1, r2, r3
  007c4	e59f01f0	 ldr         r0, [pc, #0x1F0]
  007c8	eb000000	 bl          NKDbgPrintfW
  007cc	e3a03001	 mov         r3, #1
  007d0	e58d3254	 str         r3, [sp, #0x254]
  007d4	ea000001	 b           |$LN44@FileIoInit|
  007d8		 |$LN43@FileIoInit|
  007d8	e3a03000	 mov         r3, #0
  007dc	e58d3254	 str         r3, [sp, #0x254]
  007e0		 |$LN44@FileIoInit|

; 755  :         #endif
; 756  :         return FILEIO_STATUS_INIT_FAILED;

  007e0	e59d0224	 ldr         r0, [sp, #0x224]
  007e4	eb000000	 bl          __security_check_cookie
  007e8	e3a03001	 mov         r3, #1
  007ec	e58d3228	 str         r3, [sp, #0x228]
  007f0	ea00006c	 b           |$LN35@FileIoInit|
  007f4		 |$LN11@FileIoInit|
  007f4		 |$NoPartitionTable$43354|

; 757  :     }
; 758  :     
; 759  : NoPartitionTable:
; 760  : 
; 761  :     #if BOOTLOADER_DEBUG_DISPLAY_CALLS
; 762  :         OALMSG(OAL_INFO, (L"BOOTLOADER: FileIoInit() copying BPB into FilesysInfo structure.\r\n"));
; 763  :     #endif
; 764  :     // copy bpb info from sector buffer to bpb
; 765  :     //FilesysInfo.BiosParameterBlock = ((BOOT_SECTOR *)pSector)->bpb;
; 766  :     BpbCopy(&FilesysInfo.BiosParameterBlock, &((BOOT_SECTOR *)pSector)->bpb);

  007f4	e59d300c	 ldr         r3, [sp, #0xC]
  007f8	e283100b	 add         r1, r3, #0xB
  007fc	e59f01b4	 ldr         r0, [pc, #0x1B4]
  00800	eb000000	 bl          BpbCopy

; 767  : 
; 768  :     #if BOOTLOADER_DEBUG_DISPLAY_BPB
; 769  :         OALMSG(OAL_INFO, (L"BOOTLOADER: boot sector BPB for valid partition\r\n"));
; 770  :         OALMSG(OAL_INFO, (L"BOOTLOADER: sector size:     %X\r\n", FilesysInfo.BiosParameterBlock.bytes_per_sector));
; 771  :         OALMSG(OAL_INFO, (L"BOOTLOADER: sec/cluster:     %X\r\n", FilesysInfo.BiosParameterBlock.sectors_per_cluster));
; 772  :         OALMSG(OAL_INFO, (L"BOOTLOADER: rsvd sectors:    %X\r\n", FilesysInfo.BiosParameterBlock.reserved_sectors));
; 773  :         OALMSG(OAL_INFO, (L"BOOTLOADER: # FATs:          %X\r\n", FilesysInfo.BiosParameterBlock.number_of_fats));
; 774  :         OALMSG(OAL_INFO, (L"BOOTLOADER: media descipt:   %X\r\n", FilesysInfo.BiosParameterBlock.media_descriptor));
; 775  :         OALMSG(OAL_INFO, (L"BOOTLOADER: sec/track        %X\r\n", FilesysInfo.BiosParameterBlock.sectors_per_track));
; 776  :         OALMSG(OAL_INFO, (L"BOOTLOADER: # heads          %X\r\n", FilesysInfo.BiosParameterBlock.number_of_heads));
; 777  : 
; 778  :         #if BOOTLOADER_SUPPORTS_FAT32
; 779  :         if (FilesysInfo.FatType != FAT_TYPE_FAT32)
; 780  :         {
; 781  :         #endif
; 782  :             OALMSG(OAL_INFO, (L"BOOTLOADER: # root dir ent:  %X\r\n", FilesysInfo.BiosParameterBlock.number_of_root_directory_entries));
; 783  :             OALMSG(OAL_INFO, (L"BOOTLOADER: sec/fat:         %X\r\n", FilesysInfo.BiosParameterBlock.sectors_per_fat));
; 784  : 
; 785  :             #if BOOTLOADER_SUPPORTS_EBPB || BOOTLOADER_SUPPORTS_FAT32
; 786  :             if (FilesysInfo.BiosParameterBlock.total_sectors == 0)
; 787  :             {
; 788  :                 OALMSG(OAL_INFO, (L"BOOTLOADER: total sectors:   %X\r\n", FilesysInfo.BiosParameterBlock.big_total_sectors));
; 789  :                 OALMSG(OAL_INFO, (L"BOOTLOADER: # hidden sec:    %X\r\n", (UINT32) FilesysInfo.BiosParameterBlock.number_of_hidden_sectors_high << 16 || (UINT32) FilesysInfo.BiosParameterBlock.number_of_hidden_sectors));
; 790  :             }
; 791  :             else
; 792  :             #endif
; 793  :             {
; 794  :                 OALMSG(OAL_INFO, (L"BOOTLOADER: total sectors:   %X\r\n", FilesysInfo.BiosParameterBlock.total_sectors));
; 795  :                 OALMSG(OAL_INFO, (L"BOOTLOADER: # hidden sec:    %X\r\n", FilesysInfo.BiosParameterBlock.number_of_hidden_sectors));
; 796  :             }
; 797  :         #if BOOTLOADER_SUPPORTS_FAT32
; 798  :         }
; 799  :         else
; 800  :         {
; 801  :             OALMSG(OAL_INFO, (L"BOOTLOADER: root dir str cl: %X\r\n", FilesysInfo.BiosParameterBlock.root_dir_starting_cluster));
; 802  :             OALMSG(OAL_INFO, (L"BOOTLOADER: b# total sectors:%X\r\n", FilesysInfo.BiosParameterBlock.big_total_sectors));
; 803  :             OALMSG(OAL_INFO, (L"BOOTLOADER: b# sec/fat:      %X\r\n", FilesysInfo.BiosParameterBlock.big_sectors_per_fat));
; 804  :             OALMSG(OAL_INFO, (L"BOOTLOADER: b# hidden sec:   %X\r\n", (UINT32) FilesysInfo.BiosParameterBlock.number_of_hidden_sectors_high << 16 || (UINT32) FilesysInfo.BiosParameterBlock.number_of_hidden_sectors));
; 805  :         }
; 806  :         #endif
; 807  :     #endif
; 808  : 
; 809  :     #if BOOTLOADER_SUPPORTS_SPECIAL_FAT12_CHECK
; 810  :         // switch to FAT12 if total number of clusters is too small (under 4096)
; 811  :         
; 812  :         // divide by zero check
; 813  :         if (FilesysInfo.BiosParameterBlock.sectors_per_cluster == 0)

  00804	e59f31ac	 ldr         r3, [pc, #0x1AC]
  00808	e5d33002	 ldrb        r3, [r3, #2]
  0080c	e3530000	 cmp         r3, #0
  00810	1a000004	 bne         |$LN10@FileIoInit|

; 814  :         {
; 815  :             #if BOOTLOADER_DEBUG_DISPLAY_BPB
; 816  :                 OALMSG(OAL_INFO, (L"BOOTLOADER: ERROR - sectors_per_cluster is 0!!\r\n"));
; 817  :             #endif
; 818  :             return FILEIO_STATUS_INIT_FAILED;

  00814	e59d0224	 ldr         r0, [sp, #0x224]
  00818	eb000000	 bl          __security_check_cookie
  0081c	e3a03001	 mov         r3, #1
  00820	e58d3228	 str         r3, [sp, #0x228]
  00824	ea00005f	 b           |$LN35@FileIoInit|
  00828		 |$LN10@FileIoInit|

; 819  :         }
; 820  : 
; 821  :         // check for partition type override due to small number of sectors
; 822  :         if (FilesysInfo.BiosParameterBlock.total_sectors == 0)

  00828	e59f3188	 ldr         r3, [pc, #0x188]
  0082c	e1d330ba	 ldrh        r3, [r3, #0xA]
  00830	e3530000	 cmp         r3, #0
  00834	1a00000c	 bne         |$LN9@FileIoInit|

; 823  :         {
; 824  :             if ((FilesysInfo.BiosParameterBlock.big_total_sectors / FilesysInfo.BiosParameterBlock.sectors_per_cluster) <= 4087)

  00838	e59f3178	 ldr         r3, [pc, #0x178]
  0083c	e5d30002	 ldrb        r0, [r3, #2]
  00840	e59f3170	 ldr         r3, [pc, #0x170]
  00844	e5931018	 ldr         r1, [r3, #0x18]
  00848	eb000000	 bl          __rt_udiv
  0084c	e3a03c0f	 mov         r3, #0xF, 24
  00850	e38330f7	 orr         r3, r3, #0xF7
  00854	e1500003	 cmp         r0, r3
  00858	8a000002	 bhi         |$LN8@FileIoInit|

; 825  :             {
; 826  :                 #if BOOTLOADER_DEBUG_DISPLAY_BPB
; 827  :                     OALMSG(OAL_INFO, (L"BOOTLOADER: Disk has under 4096 clusters, switching to FAT12\r\n"));
; 828  :                 #endif
; 829  :                 FilesysInfo.FatType = FAT_TYPE_FAT12;

  0085c	e59f2154	 ldr         r2, [pc, #0x154]
  00860	e3a03001	 mov         r3, #1
  00864	e5823044	 str         r3, [r2, #0x44]
  00868		 |$LN8@FileIoInit|

; 830  :             }
; 831  :         }
; 832  :         else            

  00868	ea00000d	 b           |$LN7@FileIoInit|
  0086c		 |$LN9@FileIoInit|

; 833  :         {
; 834  :             if ((FilesysInfo.BiosParameterBlock.total_sectors / FilesysInfo.BiosParameterBlock.sectors_per_cluster) <= 4087)

  0086c	e59f3144	 ldr         r3, [pc, #0x144]
  00870	e1d330ba	 ldrh        r3, [r3, #0xA]
  00874	e1a01003	 mov         r1, r3
  00878	e59f3138	 ldr         r3, [pc, #0x138]
  0087c	e5d33002	 ldrb        r3, [r3, #2]
  00880	e1a00003	 mov         r0, r3
  00884	eb000000	 bl          __rt_sdiv
  00888	e3a03c0f	 mov         r3, #0xF, 24
  0088c	e38330f7	 orr         r3, r3, #0xF7
  00890	e1500003	 cmp         r0, r3
  00894	ca000002	 bgt         |$LN6@FileIoInit|

; 835  :             {
; 836  :                 #if BOOTLOADER_DEBUG_DISPLAY_BPB
; 837  :                     OALMSG(OAL_INFO, (L"BOOTLOADER: Disk has under 4096 clusters, switching to FAT12\r\n"));
; 838  :                 #endif
; 839  :                 FilesysInfo.FatType = FAT_TYPE_FAT12;

  00898	e59f2118	 ldr         r2, [pc, #0x118]
  0089c	e3a03001	 mov         r3, #1
  008a0	e5823044	 str         r3, [r2, #0x44]
  008a4		 |$LN6@FileIoInit|
  008a4		 |$LN7@FileIoInit|

; 840  :             }
; 841  :         }
; 842  : 
; 843  :     #endif
; 844  : 
; 845  :     // sanity check - sector size
; 846  :     if (FilesysInfo.BiosParameterBlock.bytes_per_sector != SECTOR_SIZE)

  008a4	e59f310c	 ldr         r3, [pc, #0x10C]
  008a8	e1d330b0	 ldrh        r3, [r3]
  008ac	e3530c02	 cmp         r3, #2, 24
  008b0	0a000004	 beq         |$LN5@FileIoInit|

; 847  :     {
; 848  :         return FILEIO_STATUS_INIT_FAILED;

  008b4	e59d0224	 ldr         r0, [sp, #0x224]
  008b8	eb000000	 bl          __security_check_cookie
  008bc	e3a03001	 mov         r3, #1
  008c0	e58d3228	 str         r3, [sp, #0x228]
  008c4	ea000037	 b           |$LN35@FileIoInit|
  008c8		 |$LN5@FileIoInit|

; 849  :     }
; 850  : 
; 851  :     #if BOOTLOADER_DEBUG_DISPLAY_CALLS
; 852  :         OALMSG(OAL_INFO, (L"BOOTLOADER: FileIoInit() initializing data structures.\r\n"));
; 853  :     #endif
; 854  :     FilesysInfo.partition_start = boot_sector;

  008c8	e59d221c	 ldr         r2, [sp, #0x21C]
  008cc	e59f30e4	 ldr         r3, [pc, #0xE4]
  008d0	e5832038	 str         r2, [r3, #0x38]

; 855  : 
; 856  :     switch (FilesysInfo.FatType)

  008d4	e59f30dc	 ldr         r3, [pc, #0xDC]
  008d8	e5933044	 ldr         r3, [r3, #0x44]
  008dc	e58d3258	 str         r3, [sp, #0x258]
  008e0	e59d3258	 ldr         r3, [sp, #0x258]
  008e4	e3530000	 cmp         r3, #0
  008e8	9a00002a	 bls         |$LN3@FileIoInit|
  008ec	e59d3258	 ldr         r3, [sp, #0x258]
  008f0	e3530002	 cmp         r3, #2
  008f4	9a000003	 bls         |$LN2@FileIoInit|
  008f8	e59d3258	 ldr         r3, [sp, #0x258]
  008fc	e3530003	 cmp         r3, #3
  00900	0a000016	 beq         |$LN1@FileIoInit|
  00904	ea000023	 b           |$LN3@FileIoInit|
  00908		 |$LN2@FileIoInit|

; 857  :     {
; 858  :         #if BOOTLOADER_SUPPORTS_FAT12 || BOOTLOADER_SUPPORTS_FAT16
; 859  :         case FAT_TYPE_FAT12:
; 860  :         case FAT_TYPE_FAT16:
; 861  :             // compute root directory starting sector
; 862  :             FilesysInfo.root_directory_start = 
; 863  :                 FilesysInfo.BiosParameterBlock.reserved_sectors + 
; 864  :                 (FilesysInfo.BiosParameterBlock.number_of_fats * FilesysInfo.BiosParameterBlock.sectors_per_fat);

  00908	e59f30a8	 ldr         r3, [pc, #0xA8]
  0090c	e1d330b4	 ldrh        r3, [r3, #4]
  00910	e1a01003	 mov         r1, r3
  00914	e59f309c	 ldr         r3, [pc, #0x9C]
  00918	e5d33006	 ldrb        r3, [r3, #6]
  0091c	e1a02003	 mov         r2, r3
  00920	e59f3090	 ldr         r3, [pc, #0x90]
  00924	e1d330be	 ldrh        r3, [r3, #0xE]
  00928	e0030392	 mul         r3, r2, r3
  0092c	e0812003	 add         r2, r1, r3
  00930	e59f3080	 ldr         r3, [pc, #0x80]
  00934	e583203c	 str         r2, [r3, #0x3C]

; 865  : 
; 866  :             // compute file data area starting sector
; 867  :             FilesysInfo.file_data_area_start = 
; 868  :                 FilesysInfo.root_directory_start + 
; 869  :                 (FilesysInfo.BiosParameterBlock.number_of_root_directory_entries / (SECTOR_SIZE/sizeof(DIRECTORY_ENTRY)) );

  00938	e59f3078	 ldr         r3, [pc, #0x78]
  0093c	e1d310b8	 ldrh        r1, [r3, #8]
  00940	e3a00010	 mov         r0, #0x10
  00944	eb000000	 bl          __rt_udiv
  00948	e59f3068	 ldr         r3, [pc, #0x68]
  0094c	e593303c	 ldr         r3, [r3, #0x3C]
  00950	e0832000	 add         r2, r3, r0
  00954	e59f305c	 ldr         r3, [pc, #0x5C]
  00958	e5832040	 str         r2, [r3, #0x40]

; 870  : 
; 871  :             //FilesysInfo.number_of_hidden_sectors = FilesysInfo.BiosParameterBlock.number_of_hidden_sectors;
; 872  :             //FilesysInfo.total_sectors = FilesysInfo.BiosParameterBlock.total_sectors;
; 873  :             //FilesysInfo.sectors_per_fat = FilesysInfo.BiosParameterBlock.sectors_per_fat;
; 874  : 
; 875  :             break;

  0095c	ea00000d	 b           |$LN3@FileIoInit|
  00960		 |$LN1@FileIoInit|

; 876  :         #endif
; 877  :         
; 878  :         #if BOOTLOADER_SUPPORTS_FAT32
; 879  :         case FAT_TYPE_FAT32:
; 880  :             // compute file data area starting sector (first sector after FATs and reserved sectors)
; 881  :             FilesysInfo.file_data_area_start = 
; 882  :                 FilesysInfo.BiosParameterBlock.reserved_sectors + 
; 883  :                (FilesysInfo.BiosParameterBlock.number_of_fats * FilesysInfo.BiosParameterBlock.big_sectors_per_fat);

  00960	e59f3050	 ldr         r3, [pc, #0x50]
  00964	e1d310b4	 ldrh        r1, [r3, #4]
  00968	e59f3048	 ldr         r3, [pc, #0x48]
  0096c	e5d32006	 ldrb        r2, [r3, #6]
  00970	e59f3040	 ldr         r3, [pc, #0x40]
  00974	e593301c	 ldr         r3, [r3, #0x1C]
  00978	e0030392	 mul         r3, r2, r3
  0097c	e0812003	 add         r2, r1, r3
  00980	e59f3030	 ldr         r3, [pc, #0x30]
  00984	e5832040	 str         r2, [r3, #0x40]

; 884  : 
; 885  :             // save root directory starting cluster
; 886  :             FilesysInfo.root_directory_start = FilesysInfo.BiosParameterBlock.root_dir_starting_cluster;

  00988	e59f3028	 ldr         r3, [pc, #0x28]
  0098c	e5932024	 ldr         r2, [r3, #0x24]
  00990	e59f3020	 ldr         r3, [pc, #0x20]
  00994	e583203c	 str         r2, [r3, #0x3C]
  00998		 |$LN3@FileIoInit|

; 887  : 
; 888  :             break;
; 889  :         #endif
; 890  :     }
; 891  : 
; 892  :     return FILEIO_STATUS_OK;

  00998	e59d0224	 ldr         r0, [sp, #0x224]
  0099c	eb000000	 bl          __security_check_cookie
  009a0	e3a03000	 mov         r3, #0
  009a4	e58d3228	 str         r3, [sp, #0x228]
  009a8		 |$LN35@FileIoInit|

; 893  : }

  009a8	e59d0228	 ldr         r0, [sp, #0x228]
  009ac	e28ddf97	 add         sp, sp, #0x97, 30
  009b0	e89d6000	 ldmia       sp, {sp, lr}
  009b4	e12fff1e	 bx          lr
  009b8		 |$LN65@FileIoInit|
  009b8		 |$LN66@FileIoInit|
  009b8	00000000	 DCD         |FilesysInfo|
  009bc		 |$LN67@FileIoInit|
  009bc	00000000	 DCD         |??_C@_1FE@DFDOCJPP@?$AAB?$AAO?$AAO?$AAT?$AAL?$AAO?$AAA?$AAD?$AAE?$AAR?$AA?3?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA_?$AAs?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AA?$CF?$AAu?$AA?5?$AA?$CI?$AAM?$AAB?$AAR?$AA?$CJ@|
  009c0		 |$LN68@FileIoInit|
  009c0	00000000	 DCD         |ExtendedPartionBaseSector|
  009c4		 |$LN69@FileIoInit|
  009c4	00000000	 DCD         |dpCurSettings|
  009c8		 |$LN70@FileIoInit|
  009c8	00000000	 DCD         |??_C@_1KM@EGIJIJI@?$AAB?$AAO?$AAO?$AAT?$AAL?$AAO?$AAA?$AAD?$AAE?$AAR?$AA?3?$AA?5?$AAA?$AAc?$AAt?$AAi?$AAv?$AAe?$AA?5?$AAp?$AAa?$AAr?$AAt?$AAi?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAt?$AAy?$AAp@|
  009cc		 |$LN71@FileIoInit|
  009cc	00000000	 DCD         |??_C@_1JK@MABLLHJL@?$AAB?$AAO?$AAO?$AAT?$AAL?$AAO?$AAA?$AAD?$AAE?$AAR?$AA?3?$AA?5?$AAP?$AAa?$AAr?$AAt?$AAi?$AAt?$AAi?$AAo?$AAn?$AAT?$AAa?$AAb?$AAl?$AAe?$AA?$FL?$AA?$CF?$AAd?$AA?$FN?$AA?5?$AAF@|
  009d0		 |$LN72@FileIoInit|
  009d0	00000000	 DCD         |??_C@_1FC@MLDGMMAI@?$AAB?$AAO?$AAO?$AAT?$AAL?$AAO?$AAA?$AAD?$AAE?$AAR?$AA?3?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA_?$AAs?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AA?$CF?$AAu?$AA?5?$AA?$CI?$AAP?$AAT?$AA?$CJ?$AA?5@|
  009d4		 |$LN73@FileIoInit|
  009d4	00000000	 DCD         |__security_cookie|
  009d8		 |$M43563|

			 ENDP  ; |FileIoInit|

	IMPORT	|memcpy|

  00010			 AREA	 |.pdata|, PDATA
|$T43579| DCD	|$LN5@BpbCopy|
	DCD	0x40007b03
; Function compile flags: /Odtp

  009d8			 AREA	 |.text|, CODE, ARM

  009d8		 |BpbCopy| PROC

; 86   : {

  009d8		 |$LN5@BpbCopy|
  009d8	e1a0c00d	 mov         r12, sp
  009dc	e92d0003	 stmdb       sp!, {r0, r1}
  009e0	e92d5000	 stmdb       sp!, {r12, lr}
  009e4		 |$M43576|

; 87   :     memcpy(&bpb->bytes_per_sector, &bpbPacked->bytes_per_sector, sizeof(bpb->bytes_per_sector));

  009e4	e3a02002	 mov         r2, #2
  009e8	e59d100c	 ldr         r1, [sp, #0xC]
  009ec	e59d0008	 ldr         r0, [sp, #8]
  009f0	eb000000	 bl          memcpy

; 88   :     memcpy(&bpb->sectors_per_cluster, &bpbPacked->sectors_per_cluster, sizeof(bpb->sectors_per_cluster));

  009f4	e3a02001	 mov         r2, #1
  009f8	e59d300c	 ldr         r3, [sp, #0xC]
  009fc	e2831002	 add         r1, r3, #2
  00a00	e59d3008	 ldr         r3, [sp, #8]
  00a04	e2830002	 add         r0, r3, #2
  00a08	eb000000	 bl          memcpy

; 89   :     memcpy(&bpb->reserved_sectors, &bpbPacked->reserved_sectors, sizeof(bpb->reserved_sectors));

  00a0c	e3a02002	 mov         r2, #2
  00a10	e59d300c	 ldr         r3, [sp, #0xC]
  00a14	e2831003	 add         r1, r3, #3
  00a18	e59d3008	 ldr         r3, [sp, #8]
  00a1c	e2830004	 add         r0, r3, #4
  00a20	eb000000	 bl          memcpy

; 90   :     memcpy(&bpb->number_of_fats, &bpbPacked->number_of_fats, sizeof(bpb->number_of_fats));

  00a24	e3a02001	 mov         r2, #1
  00a28	e59d300c	 ldr         r3, [sp, #0xC]
  00a2c	e2831005	 add         r1, r3, #5
  00a30	e59d3008	 ldr         r3, [sp, #8]
  00a34	e2830006	 add         r0, r3, #6
  00a38	eb000000	 bl          memcpy

; 91   :     memcpy(&bpb->number_of_root_directory_entries, &bpbPacked->number_of_root_directory_entries, sizeof(bpb->number_of_root_directory_entries));

  00a3c	e3a02002	 mov         r2, #2
  00a40	e59d300c	 ldr         r3, [sp, #0xC]
  00a44	e2831006	 add         r1, r3, #6
  00a48	e59d3008	 ldr         r3, [sp, #8]
  00a4c	e2830008	 add         r0, r3, #8
  00a50	eb000000	 bl          memcpy

; 92   :     memcpy(&bpb->total_sectors, &bpbPacked->total_sectors, sizeof(bpb->total_sectors));

  00a54	e3a02002	 mov         r2, #2
  00a58	e59d300c	 ldr         r3, [sp, #0xC]
  00a5c	e2831008	 add         r1, r3, #8
  00a60	e59d3008	 ldr         r3, [sp, #8]
  00a64	e283000a	 add         r0, r3, #0xA
  00a68	eb000000	 bl          memcpy

; 93   :     memcpy(&bpb->media_descriptor, &bpbPacked->media_descriptor, sizeof(bpb->media_descriptor));

  00a6c	e3a02001	 mov         r2, #1
  00a70	e59d300c	 ldr         r3, [sp, #0xC]
  00a74	e283100a	 add         r1, r3, #0xA
  00a78	e59d3008	 ldr         r3, [sp, #8]
  00a7c	e283000c	 add         r0, r3, #0xC
  00a80	eb000000	 bl          memcpy

; 94   :     memcpy(&bpb->sectors_per_fat, &bpbPacked->sectors_per_fat, sizeof(bpb->sectors_per_fat));

  00a84	e3a02002	 mov         r2, #2
  00a88	e59d300c	 ldr         r3, [sp, #0xC]
  00a8c	e283100b	 add         r1, r3, #0xB
  00a90	e59d3008	 ldr         r3, [sp, #8]
  00a94	e283000e	 add         r0, r3, #0xE
  00a98	eb000000	 bl          memcpy

; 95   :     memcpy(&bpb->sectors_per_track, &bpbPacked->sectors_per_track, sizeof(bpb->sectors_per_track));

  00a9c	e3a02002	 mov         r2, #2
  00aa0	e59d300c	 ldr         r3, [sp, #0xC]
  00aa4	e283100d	 add         r1, r3, #0xD
  00aa8	e59d3008	 ldr         r3, [sp, #8]
  00aac	e2830010	 add         r0, r3, #0x10
  00ab0	eb000000	 bl          memcpy

; 96   :     memcpy(&bpb->number_of_heads, &bpbPacked->number_of_heads, sizeof(bpb->number_of_heads));

  00ab4	e3a02002	 mov         r2, #2
  00ab8	e59d300c	 ldr         r3, [sp, #0xC]
  00abc	e283100f	 add         r1, r3, #0xF
  00ac0	e59d3008	 ldr         r3, [sp, #8]
  00ac4	e2830012	 add         r0, r3, #0x12
  00ac8	eb000000	 bl          memcpy

; 97   :     memcpy(&bpb->number_of_hidden_sectors, &bpbPacked->number_of_hidden_sectors, sizeof(bpb->number_of_hidden_sectors));

  00acc	e3a02002	 mov         r2, #2
  00ad0	e59d300c	 ldr         r3, [sp, #0xC]
  00ad4	e2831011	 add         r1, r3, #0x11
  00ad8	e59d3008	 ldr         r3, [sp, #8]
  00adc	e2830014	 add         r0, r3, #0x14
  00ae0	eb000000	 bl          memcpy

; 98   :     memcpy(&bpb->number_of_hidden_sectors_high, &bpbPacked->number_of_hidden_sectors_high, sizeof(bpb->number_of_hidden_sectors_high));

  00ae4	e3a02002	 mov         r2, #2
  00ae8	e59d300c	 ldr         r3, [sp, #0xC]
  00aec	e2831013	 add         r1, r3, #0x13
  00af0	e59d3008	 ldr         r3, [sp, #8]
  00af4	e2830016	 add         r0, r3, #0x16
  00af8	eb000000	 bl          memcpy

; 99   :     memcpy(&bpb->big_total_sectors, &bpbPacked->big_total_sectors, sizeof(bpb->big_total_sectors));

  00afc	e3a02004	 mov         r2, #4
  00b00	e59d300c	 ldr         r3, [sp, #0xC]
  00b04	e2831015	 add         r1, r3, #0x15
  00b08	e59d3008	 ldr         r3, [sp, #8]
  00b0c	e2830018	 add         r0, r3, #0x18
  00b10	eb000000	 bl          memcpy

; 100  :     memcpy(&bpb->big_sectors_per_fat, &bpbPacked->big_sectors_per_fat, sizeof(bpb->big_sectors_per_fat));

  00b14	e3a02004	 mov         r2, #4
  00b18	e59d300c	 ldr         r3, [sp, #0xC]
  00b1c	e2831019	 add         r1, r3, #0x19
  00b20	e59d3008	 ldr         r3, [sp, #8]
  00b24	e283001c	 add         r0, r3, #0x1C
  00b28	eb000000	 bl          memcpy

; 101  :     memcpy(&bpb->ext_flags, &bpbPacked->ext_flags, sizeof(bpb->ext_flags));

  00b2c	e3a02002	 mov         r2, #2
  00b30	e59d300c	 ldr         r3, [sp, #0xC]
  00b34	e283101d	 add         r1, r3, #0x1D
  00b38	e59d3008	 ldr         r3, [sp, #8]
  00b3c	e2830020	 add         r0, r3, #0x20
  00b40	eb000000	 bl          memcpy

; 102  :     memcpy(&bpb->fs_version, &bpbPacked->fs_version, sizeof(bpb->fs_version));

  00b44	e3a02002	 mov         r2, #2
  00b48	e59d300c	 ldr         r3, [sp, #0xC]
  00b4c	e283101f	 add         r1, r3, #0x1F
  00b50	e59d3008	 ldr         r3, [sp, #8]
  00b54	e2830022	 add         r0, r3, #0x22
  00b58	eb000000	 bl          memcpy

; 103  :     memcpy(&bpb->root_dir_starting_cluster, &bpbPacked->root_dir_starting_cluster, sizeof(bpb->root_dir_starting_cluster));

  00b5c	e3a02004	 mov         r2, #4
  00b60	e59d300c	 ldr         r3, [sp, #0xC]
  00b64	e2831021	 add         r1, r3, #0x21
  00b68	e59d3008	 ldr         r3, [sp, #8]
  00b6c	e2830024	 add         r0, r3, #0x24
  00b70	eb000000	 bl          memcpy

; 104  :     memcpy(&bpb->fs_info_sector, &bpbPacked->fs_info_sector, sizeof(bpb->fs_info_sector));

  00b74	e3a02002	 mov         r2, #2
  00b78	e59d300c	 ldr         r3, [sp, #0xC]
  00b7c	e2831025	 add         r1, r3, #0x25
  00b80	e59d3008	 ldr         r3, [sp, #8]
  00b84	e2830028	 add         r0, r3, #0x28
  00b88	eb000000	 bl          memcpy

; 105  :     memcpy(&bpb->backup_boot_sector, &bpbPacked->backup_boot_sector, sizeof(bpb->backup_boot_sector));

  00b8c	e3a02002	 mov         r2, #2
  00b90	e59d300c	 ldr         r3, [sp, #0xC]
  00b94	e2831027	 add         r1, r3, #0x27
  00b98	e59d3008	 ldr         r3, [sp, #8]
  00b9c	e283002a	 add         r0, r3, #0x2A
  00ba0	eb000000	 bl          memcpy

; 106  :     memcpy(&bpb->reserved, &bpbPacked->reserved, sizeof(bpb->reserved));

  00ba4	e3a0200c	 mov         r2, #0xC
  00ba8	e59d300c	 ldr         r3, [sp, #0xC]
  00bac	e2831029	 add         r1, r3, #0x29
  00bb0	e59d3008	 ldr         r3, [sp, #8]
  00bb4	e283002c	 add         r0, r3, #0x2C
  00bb8	eb000000	 bl          memcpy

; 107  : }

  00bbc	e89d6000	 ldmia       sp, {sp, lr}
  00bc0	e12fff1e	 bx          lr
  00bc4		 |$M43577|

			 ENDP  ; |BpbCopy|


  00018			 AREA	 |.pdata|, PDATA
|$T43587| DCD	|$LN7@ByteIsPowe|
	DCD	0x40002a04
; Function compile flags: /Odtp

  00bc4			 AREA	 |.text|, CODE, ARM

  00bc4		 |ByteIsPowerOfTwo| PROC

; 145  : {

  00bc4		 |$LN7@ByteIsPowe|
  00bc4	e1a0c00d	 mov         r12, sp
  00bc8	e92d0001	 stmdb       sp!, {r0}
  00bcc	e92d5000	 stmdb       sp!, {r12, lr}
  00bd0	e24dd008	 sub         sp, sp, #8
  00bd4		 |$M43584|

; 146  :     return ( b == 1 || b == 2 || b == 4 || b == 8 || b == 16 || b == 32 || b == 64 || b == 128 || b == 256 );

  00bd4	e5dd3010	 ldrb        r3, [sp, #0x10]
  00bd8	e3530001	 cmp         r3, #1
  00bdc	0a00001a	 beq         |$LN3@ByteIsPowe|
  00be0	e5dd3010	 ldrb        r3, [sp, #0x10]
  00be4	e3530002	 cmp         r3, #2
  00be8	0a000017	 beq         |$LN3@ByteIsPowe|
  00bec	e5dd3010	 ldrb        r3, [sp, #0x10]
  00bf0	e3530004	 cmp         r3, #4
  00bf4	0a000014	 beq         |$LN3@ByteIsPowe|
  00bf8	e5dd3010	 ldrb        r3, [sp, #0x10]
  00bfc	e3530008	 cmp         r3, #8
  00c00	0a000011	 beq         |$LN3@ByteIsPowe|
  00c04	e5dd3010	 ldrb        r3, [sp, #0x10]
  00c08	e3530010	 cmp         r3, #0x10
  00c0c	0a00000e	 beq         |$LN3@ByteIsPowe|
  00c10	e5dd3010	 ldrb        r3, [sp, #0x10]
  00c14	e3530020	 cmp         r3, #0x20
  00c18	0a00000b	 beq         |$LN3@ByteIsPowe|
  00c1c	e5dd3010	 ldrb        r3, [sp, #0x10]
  00c20	e3530040	 cmp         r3, #0x40
  00c24	0a000008	 beq         |$LN3@ByteIsPowe|
  00c28	e5dd3010	 ldrb        r3, [sp, #0x10]
  00c2c	e3530080	 cmp         r3, #0x80
  00c30	0a000005	 beq         |$LN3@ByteIsPowe|
  00c34	e5dd3010	 ldrb        r3, [sp, #0x10]
  00c38	e3530c01	 cmp         r3, #1, 24
  00c3c	0a000002	 beq         |$LN3@ByteIsPowe|
  00c40	e3a03000	 mov         r3, #0
  00c44	e58d3004	 str         r3, [sp, #4]
  00c48	ea000001	 b           |$LN4@ByteIsPowe|
  00c4c		 |$LN3@ByteIsPowe|
  00c4c	e3a03001	 mov         r3, #1
  00c50	e58d3004	 str         r3, [sp, #4]
  00c54		 |$LN4@ByteIsPowe|
  00c54	e59d3004	 ldr         r3, [sp, #4]
  00c58	e58d3000	 str         r3, [sp]

; 147  : }

  00c5c	e59d0000	 ldr         r0, [sp]
  00c60	e28dd008	 add         sp, sp, #8
  00c64	e89d6000	 ldmia       sp, {sp, lr}
  00c68	e12fff1e	 bx          lr
  00c6c		 |$M43585|

			 ENDP  ; |ByteIsPowerOfTwo|

	EXPORT	|??_C@_1FO@GGOJJBEI@?$AAB?$AAO?$AAO?$AAT?$AAL?$AAO?$AAA?$AAD?$AAE?$AAR?$AA?3?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA_?$AAs?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AA?$CF?$AAu?$AA?5?$AA?$CI?$AAn?$AAe?$AAx?$AAt@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FE@JOFKPMEO@?$AAB?$AAO?$AAO?$AAT?$AAL?$AAO?$AAA?$AAD?$AAE?$AAR?$AA?3?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA_?$AAs?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AA?$CF?$AAu?$AA?5?$AA?$CI?$AAD?$AAI?$AAR?$AA?$CJ@| [ DATA ] ; `string'
	EXPORT	|FileIoOpen|

  00020			 AREA	 |.pdata|, PDATA
|$T43601| DCD	|$LN47@FileIoOpen|
	DCD	0x40018104

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FO@GGOJJBEI@?$AAB?$AAO?$AAO?$AAT?$AAL?$AAO?$AAA?$AAD?$AAE?$AAR?$AA?3?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA_?$AAs?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AA?$CF?$AAu?$AA?5?$AA?$CI?$AAn?$AAe?$AAx?$AAt@| DCB "B"
	DCB	0x0, "O", 0x0, "O", 0x0, "T", 0x0, "L", 0x0, "O", 0x0, "A"
	DCB	0x0, "D", 0x0, "E", 0x0, "R", 0x0, ":", 0x0, " ", 0x0, "r"
	DCB	0x0, "e", 0x0, "a", 0x0, "d", 0x0, "_", 0x0, "s", 0x0, "e"
	DCB	0x0, "c", 0x0, "t", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "%"
	DCB	0x0, "u", 0x0, " ", 0x0, "(", 0x0, "n", 0x0, "e", 0x0, "x"
	DCB	0x0, "t", 0x0, " ", 0x0, "D", 0x0, "I", 0x0, "R", 0x0, ")"
	DCB	0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e"
	DCB	0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FE@JOFKPMEO@?$AAB?$AAO?$AAO?$AAT?$AAL?$AAO?$AAA?$AAD?$AAE?$AAR?$AA?3?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA_?$AAs?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AA?$CF?$AAu?$AA?5?$AA?$CI?$AAD?$AAI?$AAR?$AA?$CJ@| DCB "B"
	DCB	0x0, "O", 0x0, "O", 0x0, "T", 0x0, "L", 0x0, "O", 0x0, "A"
	DCB	0x0, "D", 0x0, "E", 0x0, "R", 0x0, ":", 0x0, " ", 0x0, "r"
	DCB	0x0, "e", 0x0, "a", 0x0, "d", 0x0, "_", 0x0, "s", 0x0, "e"
	DCB	0x0, "c", 0x0, "t", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "%"
	DCB	0x0, "u", 0x0, " ", 0x0, "(", 0x0, "D", 0x0, "I", 0x0, "R"
	DCB	0x0, ")", 0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l"
	DCB	0x0, "e", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  00c6c			 AREA	 |.text|, CODE, ARM

  00c6c		 |FileIoOpen| PROC

; 907  : {

  00c6c		 |$LN47@FileIoOpen|
  00c6c	e1a0c00d	 mov         r12, sp
  00c70	e92d0003	 stmdb       sp!, {r0, r1}
  00c74	e92d5000	 stmdb       sp!, {r12, lr}
  00c78	e24dd04c	 sub         sp, sp, #0x4C
  00c7c		 |$M43598|

; 908  :     UINT32 sector_number = 0;

  00c7c	e3a03000	 mov         r3, #0
  00c80	e58d3008	 str         r3, [sp, #8]

; 909  :     int status;
; 910  :     int entry;
; 911  :     int i;
; 912  :     UINT16 DirEntryCount = 0;

  00c84	e3a03000	 mov         r3, #0
  00c88	e1cd30b0	 strh        r3, [sp]

; 913  :     void * pSector = &pFile->buffer;

  00c8c	e59d3058	 ldr         r3, [sp, #0x58]
  00c90	e2833024	 add         r3, r3, #0x24
  00c94	e58d3004	 str         r3, [sp, #4]

; 914  : 
; 915  :     switch (FilesysInfo.FatType)

  00c98	e59f35c4	 ldr         r3, [pc, #0x5C4]
  00c9c	e5933044	 ldr         r3, [r3, #0x44]
  00ca0	e58d3024	 str         r3, [sp, #0x24]
  00ca4	e59d3024	 ldr         r3, [sp, #0x24]
  00ca8	e3530000	 cmp         r3, #0
  00cac	9a000054	 bls         |$LN33@FileIoOpen|
  00cb0	e59d3024	 ldr         r3, [sp, #0x24]
  00cb4	e3530002	 cmp         r3, #2
  00cb8	9a000003	 bls         |$LN32@FileIoOpen|
  00cbc	e59d3024	 ldr         r3, [sp, #0x24]
  00cc0	e3530003	 cmp         r3, #3
  00cc4	0a00002f	 beq         |$LN30@FileIoOpen|
  00cc8	ea00004d	 b           |$LN33@FileIoOpen|
  00ccc		 |$LN32@FileIoOpen|

; 916  :     {
; 917  :         #if BOOTLOADER_SUPPORTS_FAT12 || BOOTLOADER_SUPPORTS_FAT16
; 918  :         case FAT_TYPE_FAT12:
; 919  :         case FAT_TYPE_FAT16:
; 920  :             // starting sector of directory
; 921  :             sector_number = FilesysInfo.root_directory_start;

  00ccc	e59f3590	 ldr         r3, [pc, #0x590]
  00cd0	e593303c	 ldr         r3, [r3, #0x3C]
  00cd4	e58d3008	 str         r3, [sp, #8]

; 922  : 
; 923  :             // read directory sector
; 924  :             if ((status = pfileio_ops->read_sector(pfileio_ops->drive_info, (FilesysInfo.partition_start + sector_number) + ExtendedPartionBaseSector, pSector)) != ATA_STATUS_OK)

  00cd8	e59d2004	 ldr         r2, [sp, #4]
  00cdc	e59f3580	 ldr         r3, [pc, #0x580]
  00ce0	e5931038	 ldr         r1, [r3, #0x38]
  00ce4	e59d3008	 ldr         r3, [sp, #8]
  00ce8	e0811003	 add         r1, r1, r3
  00cec	e59f356c	 ldr         r3, [pc, #0x56C]
  00cf0	e5933000	 ldr         r3, [r3]
  00cf4	e0811003	 add         r1, r1, r3
  00cf8	e59d3054	 ldr         r3, [sp, #0x54]
  00cfc	e2833010	 add         r3, r3, #0x10
  00d00	e5930000	 ldr         r0, [r3]
  00d04	e59d3054	 ldr         r3, [sp, #0x54]
  00d08	e2833008	 add         r3, r3, #8
  00d0c	e5933000	 ldr         r3, [r3]
  00d10	e1a0e00f	 mov         lr, pc
  00d14	e12fff13	 bx          r3
  00d18	e58d0028	 str         r0, [sp, #0x28]
  00d1c	e59d3028	 ldr         r3, [sp, #0x28]
  00d20	e58d3010	 str         r3, [sp, #0x10]
  00d24	e59d3010	 ldr         r3, [sp, #0x10]
  00d28	e3530000	 cmp         r3, #0
  00d2c	0a000014	 beq         |$LN31@FileIoOpen|

; 925  :             {
; 926  :                 #if BOOTLOADER_DEBUG_DISPLAY_ERRORS
; 927  :                     OALMSG(OAL_INFO, (L"BOOTLOADER: read_sector %u (DIR) failed\r\n", (FilesysInfo.partition_start + sector_number) + ExtendedPartionBaseSector));

  00d30	e59f3530	 ldr         r3, [pc, #0x530]
  00d34	e5933440	 ldr         r3, [r3, #0x440]
  00d38	e3130008	 tst         r3, #8
  00d3c	0a00000b	 beq         |$LN37@FileIoOpen|
  00d40	e59f351c	 ldr         r3, [pc, #0x51C]
  00d44	e5932038	 ldr         r2, [r3, #0x38]
  00d48	e59d3008	 ldr         r3, [sp, #8]
  00d4c	e0822003	 add         r2, r2, r3
  00d50	e59f3508	 ldr         r3, [pc, #0x508]
  00d54	e5933000	 ldr         r3, [r3]
  00d58	e0821003	 add         r1, r2, r3
  00d5c	e59f0508	 ldr         r0, [pc, #0x508]
  00d60	eb000000	 bl          NKDbgPrintfW
  00d64	e3a03001	 mov         r3, #1
  00d68	e58d302c	 str         r3, [sp, #0x2C]
  00d6c	ea000001	 b           |$LN38@FileIoOpen|
  00d70		 |$LN37@FileIoOpen|
  00d70	e3a03000	 mov         r3, #0
  00d74	e58d302c	 str         r3, [sp, #0x2C]
  00d78		 |$LN38@FileIoOpen|

; 928  :                 #endif
; 929  :                 return FILEIO_STATUS_OPEN_FAILED;

  00d78	e3a03002	 mov         r3, #2
  00d7c	e58d3020	 str         r3, [sp, #0x20]
  00d80	ea000131	 b           |$LN35@FileIoOpen|
  00d84		 |$LN31@FileIoOpen|

; 930  :             }
; 931  : 
; 932  :             break;

  00d84	ea00001e	 b           |$LN33@FileIoOpen|
  00d88		 |$LN30@FileIoOpen|

; 933  :         #endif
; 934  : 
; 935  :         #if BOOTLOADER_SUPPORTS_FAT32
; 936  :         case FAT_TYPE_FAT32:
; 937  :             // setup to read first directory sector
; 938  :             pFile->current_cluster = FilesysInfo.root_directory_start;

  00d88	e59d3058	 ldr         r3, [sp, #0x58]
  00d8c	e2832018	 add         r2, r3, #0x18
  00d90	e59f34cc	 ldr         r3, [pc, #0x4CC]
  00d94	e593303c	 ldr         r3, [r3, #0x3C]
  00d98	e5823000	 str         r3, [r2]

; 939  :             pFile->current_sector_in_cluster = 0;

  00d9c	e59d3058	 ldr         r3, [sp, #0x58]
  00da0	e283201c	 add         r2, r3, #0x1C
  00da4	e3a03000	 mov         r3, #0
  00da8	e1c230b0	 strh        r3, [r2]

; 940  :             pFile->current_sector = 0;

  00dac	e59d3058	 ldr         r3, [sp, #0x58]
  00db0	e2832014	 add         r2, r3, #0x14
  00db4	e3a03000	 mov         r3, #0
  00db8	e5823000	 str         r3, [r2]

; 941  :             pFile->bytes_in_buffer = 0;

  00dbc	e59d3058	 ldr         r3, [sp, #0x58]
  00dc0	e2832020	 add         r2, r3, #0x20
  00dc4	e3a03000	 mov         r3, #0
  00dc8	e5823000	 str         r3, [r2]

; 942  : 
; 943  :             if ((status = FileIoReadNextSectors(pfileio_ops, pFile, pSector, 1)) != FILEIO_STATUS_OK)

  00dcc	e3a03001	 mov         r3, #1
  00dd0	e59d2004	 ldr         r2, [sp, #4]
  00dd4	e59d1058	 ldr         r1, [sp, #0x58]
  00dd8	e59d0054	 ldr         r0, [sp, #0x54]
  00ddc	eb000000	 bl          FileIoReadNextSectors
  00de0	e58d0030	 str         r0, [sp, #0x30]
  00de4	e59d3030	 ldr         r3, [sp, #0x30]
  00de8	e58d3010	 str         r3, [sp, #0x10]
  00dec	e59d3010	 ldr         r3, [sp, #0x10]
  00df0	e3530000	 cmp         r3, #0
  00df4	0a000002	 beq         |$LN29@FileIoOpen|

; 944  :                 return FILEIO_STATUS_OPEN_FAILED;

  00df8	e3a03002	 mov         r3, #2
  00dfc	e58d3020	 str         r3, [sp, #0x20]
  00e00	ea000111	 b           |$LN35@FileIoOpen|
  00e04		 |$LN29@FileIoOpen|
  00e04		 |$LN33@FileIoOpen|
  00e04		 |$LN28@FileIoOpen|

; 945  :             
; 946  :             break;
; 947  :         #endif
; 948  :     }
; 949  : 
; 950  :     // scan the entire root directory looking for the file
; 951  :     for ( ; ; )
; 952  :     {
; 953  :         // check each directory entry in the sector
; 954  :         #if BOOTLOADER_SUPPORTS_FAT32
; 955  :         for (entry = 0; (entry < SECTOR_SIZE/sizeof(DIRECTORY_ENTRY)) && (FilesysInfo.FatType == FAT_TYPE_FAT32 ? 1 : (DirEntryCount < FilesysInfo.BiosParameterBlock.number_of_root_directory_entries)); entry++)

  00e04	e3a03000	 mov         r3, #0
  00e08	e58d3014	 str         r3, [sp, #0x14]
  00e0c	ea000002	 b           |$LN26@FileIoOpen|
  00e10		 |$LN25@FileIoOpen|
  00e10	e59d3014	 ldr         r3, [sp, #0x14]
  00e14	e2833001	 add         r3, r3, #1
  00e18	e58d3014	 str         r3, [sp, #0x14]
  00e1c		 |$LN26@FileIoOpen|
  00e1c	e59d3014	 ldr         r3, [sp, #0x14]
  00e20	e3530010	 cmp         r3, #0x10
  00e24	2a0000b5	 bcs         |$LN24@FileIoOpen|
  00e28	e59f3434	 ldr         r3, [pc, #0x434]
  00e2c	e5933044	 ldr         r3, [r3, #0x44]
  00e30	e3530003	 cmp         r3, #3
  00e34	1a000002	 bne         |$LN41@FileIoOpen|
  00e38	e3a03001	 mov         r3, #1
  00e3c	e58d3034	 str         r3, [sp, #0x34]
  00e40	ea00000c	 b           |$LN42@FileIoOpen|
  00e44		 |$LN41@FileIoOpen|
  00e44	e1dd30b0	 ldrh        r3, [sp]
  00e48	e1a02003	 mov         r2, r3
  00e4c	e59f3410	 ldr         r3, [pc, #0x410]
  00e50	e1d330b8	 ldrh        r3, [r3, #8]
  00e54	e1520003	 cmp         r2, r3
  00e58	aa000002	 bge         |$LN39@FileIoOpen|
  00e5c	e3a03001	 mov         r3, #1
  00e60	e58d3038	 str         r3, [sp, #0x38]
  00e64	ea000001	 b           |$LN40@FileIoOpen|
  00e68		 |$LN39@FileIoOpen|
  00e68	e3a03000	 mov         r3, #0
  00e6c	e58d3038	 str         r3, [sp, #0x38]
  00e70		 |$LN40@FileIoOpen|
  00e70	e59d3038	 ldr         r3, [sp, #0x38]
  00e74	e58d3034	 str         r3, [sp, #0x34]
  00e78		 |$LN42@FileIoOpen|
  00e78	e59d3034	 ldr         r3, [sp, #0x34]
  00e7c	e3530000	 cmp         r3, #0
  00e80	0a00009e	 beq         |$LN24@FileIoOpen|

; 956  :         #else
; 957  :         for (entry = 0; (entry < SECTOR_SIZE/sizeof(DIRECTORY_ENTRY)) && (DirEntryCount < FilesysInfo.BiosParameterBlock.number_of_root_directory_entries); entry++)
; 958  :         #endif      
; 959  :         {
; 960  :             UINT8 * pName = (((DIRECTORY_ENTRY *)pSector) + entry)->filename;

  00e84	e59d1014	 ldr         r1, [sp, #0x14]
  00e88	e3a03020	 mov         r3, #0x20
  00e8c	e0020391	 mul         r2, r1, r3
  00e90	e59d3004	 ldr         r3, [sp, #4]
  00e94	e0833002	 add         r3, r3, r2
  00e98	e58d3018	 str         r3, [sp, #0x18]

; 961  :             UINT8 Attribute = (((DIRECTORY_ENTRY *)pSector) + entry)->attribute;

  00e9c	e59d1014	 ldr         r1, [sp, #0x14]
  00ea0	e3a03020	 mov         r3, #0x20
  00ea4	e0020391	 mul         r2, r1, r3
  00ea8	e59d3004	 ldr         r3, [sp, #4]
  00eac	e0833002	 add         r3, r3, r2
  00eb0	e283300b	 add         r3, r3, #0xB
  00eb4	e5d33000	 ldrb        r3, [r3]
  00eb8	e5cd301c	 strb        r3, [sp, #0x1C]

; 962  :             
; 963  :             // bump count of total directory entries scanned
; 964  :             DirEntryCount++;

  00ebc	e1dd30b0	 ldrh        r3, [sp]
  00ec0	e2833001	 add         r3, r3, #1
  00ec4	e1a03803	 mov         r3, r3, lsl #16
  00ec8	e1a03823	 mov         r3, r3, lsr #16
  00ecc	e1cd30b0	 strh        r3, [sp]

; 965  : 
; 966  :             // skip long file names, subdirectories and volume lable
; 967  :             if (/* Attribute == 0x0f || */ (Attribute & 0x18))

  00ed0	e5dd301c	 ldrb        r3, [sp, #0x1C]
  00ed4	e3130018	 tst         r3, #0x18
  00ed8	0a000000	 beq         |$LN23@FileIoOpen|

; 968  :                 continue;

  00edc	eaffffcb	 b           |$LN25@FileIoOpen|
  00ee0		 |$LN23@FileIoOpen|

; 969  : 
; 970  :             // skip special directory entries
; 971  :             if (pName[0] == 0x00 || pName[0] == 0xe5)

  00ee0	e59d3018	 ldr         r3, [sp, #0x18]
  00ee4	e5d33000	 ldrb        r3, [r3]
  00ee8	e3530000	 cmp         r3, #0
  00eec	0a000003	 beq         |$LN21@FileIoOpen|
  00ef0	e59d3018	 ldr         r3, [sp, #0x18]
  00ef4	e5d33000	 ldrb        r3, [r3]
  00ef8	e35300e5	 cmp         r3, #0xE5
  00efc	1a000000	 bne         |$LN22@FileIoOpen|
  00f00		 |$LN21@FileIoOpen|

; 972  :                 continue;

  00f00	eaffffc2	 b           |$LN25@FileIoOpen|
  00f04		 |$LN22@FileIoOpen|

; 973  :             
; 974  :             if (pName[0] == 0x05)

  00f04	e59d3018	 ldr         r3, [sp, #0x18]
  00f08	e5d33000	 ldrb        r3, [r3]
  00f0c	e3530005	 cmp         r3, #5
  00f10	1a000002	 bne         |$LN20@FileIoOpen|

; 975  :                 pName[0] = 0xe5;

  00f14	e59d2018	 ldr         r2, [sp, #0x18]
  00f18	e3a030e5	 mov         r3, #0xE5
  00f1c	e5c23000	 strb        r3, [r2]
  00f20		 |$LN20@FileIoOpen|

; 976  :                 
; 977  :             #if BOOTLOADER_DEBUG_DISPLAY_DIRECTORY_ENTRIES
; 978  :                 OALMSG(OAL_INFO, (L"  Directory Entry #%d: <%c%c%c%c%c%c%c%c %c%c%c> ", DirEntryCount, pName[0], pName[1], pName[2], pName[3], pName[4], pName[5], pName[6], pName[7], pExtension[0], pExtension[1], pExtension[2]));
; 979  :             #endif
; 980  : 
; 981  :             // compare name
; 982  :             for (i = 0; i < 8; i++)

  00f20	e3a03000	 mov         r3, #0
  00f24	e58d300c	 str         r3, [sp, #0xC]
  00f28	ea000002	 b           |$LN19@FileIoOpen|
  00f2c		 |$LN18@FileIoOpen|
  00f2c	e59d300c	 ldr         r3, [sp, #0xC]
  00f30	e2833001	 add         r3, r3, #1
  00f34	e58d300c	 str         r3, [sp, #0xC]
  00f38		 |$LN19@FileIoOpen|
  00f38	e59d300c	 ldr         r3, [sp, #0xC]
  00f3c	e3530008	 cmp         r3, #8
  00f40	aa000010	 bge         |$LN17@FileIoOpen|

; 983  :             {
; 984  :                 if ((((DIRECTORY_ENTRY *)pSector) + entry)->filename[i] != pFile->name[i])

  00f44	e59d1014	 ldr         r1, [sp, #0x14]
  00f48	e3a03020	 mov         r3, #0x20
  00f4c	e0020391	 mul         r2, r1, r3
  00f50	e59d3004	 ldr         r3, [sp, #4]
  00f54	e0832002	 add         r2, r3, r2
  00f58	e59d300c	 ldr         r3, [sp, #0xC]
  00f5c	e0823003	 add         r3, r2, r3
  00f60	e5d33000	 ldrb        r3, [r3]
  00f64	e1a01003	 mov         r1, r3
  00f68	e59d2058	 ldr         r2, [sp, #0x58]
  00f6c	e59d300c	 ldr         r3, [sp, #0xC]
  00f70	e0823003	 add         r3, r2, r3
  00f74	e1d330d0	 ldrsb       r3, [r3]
  00f78	e1510003	 cmp         r1, r3
  00f7c	0a000000	 beq         |$LN16@FileIoOpen|

; 985  :                     break;

  00f80	ea000000	 b           |$LN17@FileIoOpen|
  00f84		 |$LN16@FileIoOpen|

; 986  :             }

  00f84	eaffffe8	 b           |$LN18@FileIoOpen|
  00f88		 |$LN17@FileIoOpen|

; 987  :             if (i == 8)

  00f88	e59d300c	 ldr         r3, [sp, #0xC]
  00f8c	e3530008	 cmp         r3, #8
  00f90	1a000059	 bne         |$LN15@FileIoOpen|

; 988  :             {
; 989  :                 // compare extension
; 990  :                 for (i = 0; i < 3; i++) 

  00f94	e3a03000	 mov         r3, #0
  00f98	e58d300c	 str         r3, [sp, #0xC]
  00f9c	ea000002	 b           |$LN14@FileIoOpen|
  00fa0		 |$LN13@FileIoOpen|
  00fa0	e59d300c	 ldr         r3, [sp, #0xC]
  00fa4	e2833001	 add         r3, r3, #1
  00fa8	e58d300c	 str         r3, [sp, #0xC]
  00fac		 |$LN14@FileIoOpen|
  00fac	e59d300c	 ldr         r3, [sp, #0xC]
  00fb0	e3530003	 cmp         r3, #3
  00fb4	aa000012	 bge         |$LN12@FileIoOpen|

; 991  :                 {
; 992  :                     if ((((DIRECTORY_ENTRY *)pSector) + entry)->extension[i] != pFile->extension[i])

  00fb8	e59d1014	 ldr         r1, [sp, #0x14]
  00fbc	e3a03020	 mov         r3, #0x20
  00fc0	e0020391	 mul         r2, r1, r3
  00fc4	e59d3004	 ldr         r3, [sp, #4]
  00fc8	e0833002	 add         r3, r3, r2
  00fcc	e2832008	 add         r2, r3, #8
  00fd0	e59d300c	 ldr         r3, [sp, #0xC]
  00fd4	e0823003	 add         r3, r2, r3
  00fd8	e5d33000	 ldrb        r3, [r3]
  00fdc	e1a01003	 mov         r1, r3
  00fe0	e59d3058	 ldr         r3, [sp, #0x58]
  00fe4	e2832009	 add         r2, r3, #9
  00fe8	e59d300c	 ldr         r3, [sp, #0xC]
  00fec	e0823003	 add         r3, r2, r3
  00ff0	e1d330d0	 ldrsb       r3, [r3]
  00ff4	e1510003	 cmp         r1, r3
  00ff8	0a000000	 beq         |$LN11@FileIoOpen|

; 993  :                         break;

  00ffc	ea000000	 b           |$LN12@FileIoOpen|
  01000		 |$LN11@FileIoOpen|

; 994  :                 }

  01000	eaffffe6	 b           |$LN13@FileIoOpen|
  01004		 |$LN12@FileIoOpen|

; 995  :                 if (i == 3) 

  01004	e59d300c	 ldr         r3, [sp, #0xC]
  01008	e3530003	 cmp         r3, #3
  0100c	1a00003a	 bne         |$LN10@FileIoOpen|

; 996  :                 {
; 997  :                     // save starting cluster information
; 998  :                     
; 999  :                     #if BOOTLOADER_SUPPORTS_FAT32
; 1000 :                     if (FilesysInfo.FatType == FAT_TYPE_FAT32)

  01010	e59f324c	 ldr         r3, [pc, #0x24C]
  01014	e5933044	 ldr         r3, [r3, #0x44]
  01018	e3530003	 cmp         r3, #3
  0101c	1a000013	 bne         |$LN9@FileIoOpen|

; 1001 :                         pFile->current_cluster = ((UINT32)((((DIRECTORY_ENTRY *)pSector) + entry)->starting_cluster)) | (((UINT32)((((DIRECTORY_ENTRY *)pSector) + entry)->starting_cluster_high)) << 16);

  01020	e59d1014	 ldr         r1, [sp, #0x14]
  01024	e3a03020	 mov         r3, #0x20
  01028	e0020391	 mul         r2, r1, r3
  0102c	e59d3004	 ldr         r3, [sp, #4]
  01030	e0833002	 add         r3, r3, r2
  01034	e283301a	 add         r3, r3, #0x1A
  01038	e1d300b0	 ldrh        r0, [r3]
  0103c	e59d1014	 ldr         r1, [sp, #0x14]
  01040	e3a03020	 mov         r3, #0x20
  01044	e0020391	 mul         r2, r1, r3
  01048	e59d3004	 ldr         r3, [sp, #4]
  0104c	e0833002	 add         r3, r3, r2
  01050	e2833014	 add         r3, r3, #0x14
  01054	e1d330b0	 ldrh        r3, [r3]
  01058	e1a03803	 mov         r3, r3, lsl #16
  0105c	e1802003	 orr         r2, r0, r3
  01060	e59d3058	 ldr         r3, [sp, #0x58]
  01064	e2833018	 add         r3, r3, #0x18
  01068	e5832000	 str         r2, [r3]

; 1002 :                     else

  0106c	ea000009	 b           |$LN8@FileIoOpen|
  01070		 |$LN9@FileIoOpen|

; 1003 :                     #endif
; 1004 :                         pFile->current_cluster = (((DIRECTORY_ENTRY *)pSector) + entry)->starting_cluster;

  01070	e59d1014	 ldr         r1, [sp, #0x14]
  01074	e3a03020	 mov         r3, #0x20
  01078	e0020391	 mul         r2, r1, r3
  0107c	e59d3004	 ldr         r3, [sp, #4]
  01080	e0833002	 add         r3, r3, r2
  01084	e283101a	 add         r1, r3, #0x1A
  01088	e59d3058	 ldr         r3, [sp, #0x58]
  0108c	e2832018	 add         r2, r3, #0x18
  01090	e1d130b0	 ldrh        r3, [r1]
  01094	e5823000	 str         r3, [r2]
  01098		 |$LN8@FileIoOpen|

; 1005 :                     pFile->current_sector_in_cluster = 0;

  01098	e59d3058	 ldr         r3, [sp, #0x58]
  0109c	e283201c	 add         r2, r3, #0x1C
  010a0	e3a03000	 mov         r3, #0
  010a4	e1c230b0	 strh        r3, [r2]

; 1006 :                     pFile->file_size = (((DIRECTORY_ENTRY *)pSector) + entry)->file_size;

  010a8	e59d1014	 ldr         r1, [sp, #0x14]
  010ac	e3a03020	 mov         r3, #0x20
  010b0	e0020391	 mul         r2, r1, r3
  010b4	e59d3004	 ldr         r3, [sp, #4]
  010b8	e0833002	 add         r3, r3, r2
  010bc	e283101c	 add         r1, r3, #0x1C
  010c0	e59d3058	 ldr         r3, [sp, #0x58]
  010c4	e2832010	 add         r2, r3, #0x10
  010c8	e5913000	 ldr         r3, [r1]
  010cc	e5823000	 str         r3, [r2]

; 1007 :                     // initialize other stuff in File handle
; 1008 :                     pFile->current_sector = 0;

  010d0	e59d3058	 ldr         r3, [sp, #0x58]
  010d4	e2832014	 add         r2, r3, #0x14
  010d8	e3a03000	 mov         r3, #0
  010dc	e5823000	 str         r3, [r2]

; 1009 :                     pFile->bytes_in_buffer = 0;

  010e0	e59d3058	 ldr         r3, [sp, #0x58]
  010e4	e2832020	 add         r2, r3, #0x20
  010e8	e3a03000	 mov         r3, #0
  010ec	e5823000	 str         r3, [r2]

; 1010 :                     #if BOOTLOADER_DEBUG_DISPLAY_DIRECTORY_ENTRIES
; 1011 :                         OALMSG(OAL_INFO, (L"Found file, starting cluster = %x, file size = %X\r\n", pFile->current_cluster, pFile->file_size));
; 1012 :                     #endif
; 1013 :                     return FILEIO_STATUS_OK;

  010f0	e3a03000	 mov         r3, #0
  010f4	e58d3020	 str         r3, [sp, #0x20]
  010f8	ea000053	 b           |$LN35@FileIoOpen|
  010fc		 |$LN10@FileIoOpen|
  010fc		 |$LN15@FileIoOpen|

; 1014 :                 }
; 1015 :             }
; 1016 :             #if BOOTLOADER_DEBUG_DISPLAY_DIRECTORY_ENTRIES
; 1017 :                 OALMSG(OAL_INFO, (L"\r\n"));
; 1018 :             #endif
; 1019 :         }                

  010fc	eaffff43	 b           |$LN25@FileIoOpen|
  01100		 |$LN24@FileIoOpen|

; 1020 : 
; 1021 :         switch (FilesysInfo.FatType)

  01100	e59f315c	 ldr         r3, [pc, #0x15C]
  01104	e5933044	 ldr         r3, [r3, #0x44]
  01108	e58d303c	 str         r3, [sp, #0x3C]
  0110c	e59d303c	 ldr         r3, [sp, #0x3C]
  01110	e3530000	 cmp         r3, #0
  01114	9a00004b	 bls         |$LN6@FileIoOpen|
  01118	e59d303c	 ldr         r3, [sp, #0x3C]
  0111c	e3530002	 cmp         r3, #2
  01120	9a000003	 bls         |$LN5@FileIoOpen|
  01124	e59d303c	 ldr         r3, [sp, #0x3C]
  01128	e3530003	 cmp         r3, #3
  0112c	0a000037	 beq         |$LN2@FileIoOpen|
  01130	ea000044	 b           |$LN6@FileIoOpen|
  01134		 |$LN5@FileIoOpen|

; 1022 :         {
; 1023 :             #if BOOTLOADER_SUPPORTS_FAT12 || BOOTLOADER_SUPPORTS_FAT16
; 1024 :             case FAT_TYPE_FAT12:
; 1025 :             case FAT_TYPE_FAT16:
; 1026 :                 // point to next sector
; 1027 :                 sector_number++;

  01134	e59d3008	 ldr         r3, [sp, #8]
  01138	e2833001	 add         r3, r3, #1
  0113c	e58d3008	 str         r3, [sp, #8]

; 1028 : 
; 1029 :                 #if BOOTLOADER_DEBUG_DISPLAY_DIRECTORY_ENTRIES
; 1030 :                     OALMSG(OAL_INFO, (L"Next directory sector %d, file data area start %d\r\n", sector_number, FilesysInfo.file_data_area_start));
; 1031 :                 #endif
; 1032 : 
; 1033 :                 // check for end of directory
; 1034 :                 if (sector_number >= FilesysInfo.file_data_area_start)

  01140	e59d2008	 ldr         r2, [sp, #8]
  01144	e59f3118	 ldr         r3, [pc, #0x118]
  01148	e5933040	 ldr         r3, [r3, #0x40]
  0114c	e1520003	 cmp         r2, r3
  01150	3a000002	 bcc         |$LN4@FileIoOpen|

; 1035 :                     return FILEIO_STATUS_OPEN_FAILED;

  01154	e3a03002	 mov         r3, #2
  01158	e58d3020	 str         r3, [sp, #0x20]
  0115c	ea00003a	 b           |$LN35@FileIoOpen|
  01160		 |$LN4@FileIoOpen|

; 1036 : 
; 1037 :                 // read next directory sector
; 1038 :                 if ((status = pfileio_ops->read_sector(pfileio_ops->drive_info, (FilesysInfo.partition_start + sector_number) + ExtendedPartionBaseSector, pSector)) != ATA_STATUS_OK)

  01160	e59d2004	 ldr         r2, [sp, #4]
  01164	e59f30f8	 ldr         r3, [pc, #0xF8]
  01168	e5931038	 ldr         r1, [r3, #0x38]
  0116c	e59d3008	 ldr         r3, [sp, #8]
  01170	e0811003	 add         r1, r1, r3
  01174	e59f30e4	 ldr         r3, [pc, #0xE4]
  01178	e5933000	 ldr         r3, [r3]
  0117c	e0811003	 add         r1, r1, r3
  01180	e59d3054	 ldr         r3, [sp, #0x54]
  01184	e2833010	 add         r3, r3, #0x10
  01188	e5930000	 ldr         r0, [r3]
  0118c	e59d3054	 ldr         r3, [sp, #0x54]
  01190	e2833008	 add         r3, r3, #8
  01194	e5933000	 ldr         r3, [r3]
  01198	e1a0e00f	 mov         lr, pc
  0119c	e12fff13	 bx          r3
  011a0	e58d0040	 str         r0, [sp, #0x40]
  011a4	e59d3040	 ldr         r3, [sp, #0x40]
  011a8	e58d3010	 str         r3, [sp, #0x10]
  011ac	e59d3010	 ldr         r3, [sp, #0x10]
  011b0	e3530000	 cmp         r3, #0
  011b4	0a000014	 beq         |$LN3@FileIoOpen|

; 1039 :                 {
; 1040 :                     #if BOOTLOADER_DEBUG_DISPLAY_ERRORS
; 1041 :                         OALMSG(OAL_INFO, (L"BOOTLOADER: read_sector %u (next DIR) failed\r\n", (FilesysInfo.partition_start + sector_number) + ExtendedPartionBaseSector));

  011b8	e59f30a8	 ldr         r3, [pc, #0xA8]
  011bc	e5933440	 ldr         r3, [r3, #0x440]
  011c0	e3130008	 tst         r3, #8
  011c4	0a00000b	 beq         |$LN43@FileIoOpen|
  011c8	e59f3094	 ldr         r3, [pc, #0x94]
  011cc	e5932038	 ldr         r2, [r3, #0x38]
  011d0	e59d3008	 ldr         r3, [sp, #8]
  011d4	e0822003	 add         r2, r2, r3
  011d8	e59f3080	 ldr         r3, [pc, #0x80]
  011dc	e5933000	 ldr         r3, [r3]
  011e0	e0821003	 add         r1, r2, r3
  011e4	e59f0070	 ldr         r0, [pc, #0x70]
  011e8	eb000000	 bl          NKDbgPrintfW
  011ec	e3a03001	 mov         r3, #1
  011f0	e58d3044	 str         r3, [sp, #0x44]
  011f4	ea000001	 b           |$LN44@FileIoOpen|
  011f8		 |$LN43@FileIoOpen|
  011f8	e3a03000	 mov         r3, #0
  011fc	e58d3044	 str         r3, [sp, #0x44]
  01200		 |$LN44@FileIoOpen|

; 1042 :                     #endif
; 1043 :                     return FILEIO_STATUS_OPEN_FAILED;

  01200	e3a03002	 mov         r3, #2
  01204	e58d3020	 str         r3, [sp, #0x20]
  01208	ea00000f	 b           |$LN35@FileIoOpen|
  0120c		 |$LN3@FileIoOpen|

; 1044 :                 }
; 1045 : 
; 1046 :                 break;

  0120c	ea00000d	 b           |$LN6@FileIoOpen|
  01210		 |$LN2@FileIoOpen|

; 1047 :             #endif
; 1048 : 
; 1049 :             #if BOOTLOADER_SUPPORTS_FAT32
; 1050 :             case FAT_TYPE_FAT32:
; 1051 :                 // try to read the next directory sector
; 1052 :                 if ((status = FileIoReadNextSectors(pfileio_ops, pFile, pSector, 1)) != FILEIO_STATUS_OK)

  01210	e3a03001	 mov         r3, #1
  01214	e59d2004	 ldr         r2, [sp, #4]
  01218	e59d1058	 ldr         r1, [sp, #0x58]
  0121c	e59d0054	 ldr         r0, [sp, #0x54]
  01220	eb000000	 bl          FileIoReadNextSectors
  01224	e58d0048	 str         r0, [sp, #0x48]
  01228	e59d3048	 ldr         r3, [sp, #0x48]
  0122c	e58d3010	 str         r3, [sp, #0x10]
  01230	e59d3010	 ldr         r3, [sp, #0x10]
  01234	e3530000	 cmp         r3, #0
  01238	0a000002	 beq         |$LN1@FileIoOpen|

; 1053 :                     return FILEIO_STATUS_OPEN_FAILED;

  0123c	e3a03002	 mov         r3, #2
  01240	e58d3020	 str         r3, [sp, #0x20]
  01244	ea000000	 b           |$LN35@FileIoOpen|
  01248		 |$LN1@FileIoOpen|
  01248		 |$LN6@FileIoOpen|

; 1054 : 
; 1055 :                 break;
; 1056 :             #endif
; 1057 :         }
; 1058 :     }

  01248	eafffeed	 b           |$LN28@FileIoOpen|
  0124c		 |$LN35@FileIoOpen|

; 1059 : }

  0124c	e59d0020	 ldr         r0, [sp, #0x20]
  01250	e28dd04c	 add         sp, sp, #0x4C
  01254	e89d6000	 ldmia       sp, {sp, lr}
  01258	e12fff1e	 bx          lr
  0125c		 |$LN48@FileIoOpen|
  0125c		 |$LN49@FileIoOpen|
  0125c	00000000	 DCD         |??_C@_1FO@GGOJJBEI@?$AAB?$AAO?$AAO?$AAT?$AAL?$AAO?$AAA?$AAD?$AAE?$AAR?$AA?3?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA_?$AAs?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AA?$CF?$AAu?$AA?5?$AA?$CI?$AAn?$AAe?$AAx?$AAt@|
  01260		 |$LN50@FileIoOpen|
  01260	00000000	 DCD         |ExtendedPartionBaseSector|
  01264		 |$LN51@FileIoOpen|
  01264	00000000	 DCD         |FilesysInfo|
  01268		 |$LN52@FileIoOpen|
  01268	00000000	 DCD         |dpCurSettings|
  0126c		 |$LN53@FileIoOpen|
  0126c	00000000	 DCD         |??_C@_1FE@JOFKPMEO@?$AAB?$AAO?$AAO?$AAT?$AAL?$AAO?$AAA?$AAD?$AAE?$AAR?$AA?3?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA_?$AAs?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AA?$CF?$AAu?$AA?5?$AA?$CI?$AAD?$AAI?$AAR?$AA?$CJ@|
  01270		 |$M43599|

			 ENDP  ; |FileIoOpen|

	EXPORT	|??_C@_1MI@EPEPDNAK@?$AAB?$AAL?$AA?3?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAI?$AAo?$AAR?$AAe?$AAa?$AAd?$AAN?$AAe?$AAx?$AAt?$AAS?$AAe?$AAc?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd@| [ DATA ] ; `string'
	EXPORT	|??_C@_1LK@LIJDAIGO@?$AAB?$AAO?$AAO?$AAT?$AAL?$AAO?$AAA?$AAD?$AAE?$AAR?$AA?3?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAI?$AAo?$AAR?$AAe?$AAa?$AAd?$AAN?$AAe?$AAx?$AAt?$AAS?$AAe?$AAc?$AAt?$AAo?$AAr@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FE@HICFHJJI@?$AAB?$AAO?$AAO?$AAT?$AAL?$AAO?$AAA?$AAD?$AAE?$AAR?$AA?3?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA_?$AAs?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AA?$CF?$AAu?$AA?5?$AA?$CI?$AAF?$AAA?$AAT?$AA?$CJ@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IO@PGHKICBM@?$AAB?$AAO?$AAO?$AAT?$AAL?$AAO?$AAA?$AAD?$AAE?$AAR?$AA?3?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAI?$AAo?$AAR?$AAe?$AAa?$AAd?$AAN?$AAe?$AAx?$AAt?$AAS?$AAe?$AAc?$AAt?$AAo?$AAr@| [ DATA ] ; `string'
	EXPORT	|??_C@_1JE@KBLAIMOL@?$AAB?$AAO?$AAO?$AAT?$AAL?$AAO?$AAA?$AAD?$AAE?$AAR?$AA?3?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAI?$AAo?$AAR?$AAe?$AAa?$AAd?$AAN?$AAe?$AAx?$AAt?$AAS?$AAe?$AAc?$AAt?$AAo?$AAr@| [ DATA ] ; `string'

  0004c			 AREA	 |.bss|, NOINIT
|FatBuffer| %	0x200

  00028			 AREA	 |.pdata|, PDATA
|$T43628| DCD	|$LN64@FileIoRead|
	DCD	0x40030004

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1MI@EPEPDNAK@?$AAB?$AAL?$AA?3?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAI?$AAo?$AAR?$AAe?$AAa?$AAd?$AAN?$AAe?$AAx?$AAt?$AAS?$AAe?$AAc?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd@| DCB "B"
	DCB	0x0, "L", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "i", 0x0, "l"
	DCB	0x0, "e", 0x0, "I", 0x0, "o", 0x0, "R", 0x0, "e", 0x0, "a"
	DCB	0x0, "d", 0x0, "N", 0x0, "e", 0x0, "x", 0x0, "t", 0x0, "S"
	DCB	0x0, "e", 0x0, "c", 0x0, "t", 0x0, "o", 0x0, "r", 0x0, "s"
	DCB	0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e"
	DCB	0x0, "d", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "a", 0x0, "d"
	DCB	0x0, "i", 0x0, "n", 0x0, "g", 0x0, ":", 0x0, " ", 0x0, "L"
	DCB	0x0, "B", 0x0, "A", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "x", 0x0, ",", 0x0, " ", 0x0, "c", 0x0, "l", 0x0, "u"
	DCB	0x0, "s", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "s"
	DCB	0x0, "e", 0x0, "c", 0x0, " ", 0x0, "i", 0x0, "n", 0x0, " "
	DCB	0x0, "c", 0x0, "l", 0x0, "u", 0x0, "s", 0x0, "t", 0x0, "e"
	DCB	0x0, "r", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x"
	DCB	0x0, ",", 0x0, " ", 0x0, "n", 0x0, "u", 0x0, "m", 0x0, " "
	DCB	0x0, "s", 0x0, "e", 0x0, "c", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1LK@LIJDAIGO@?$AAB?$AAO?$AAO?$AAT?$AAL?$AAO?$AAA?$AAD?$AAE?$AAR?$AA?3?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAI?$AAo?$AAR?$AAe?$AAa?$AAd?$AAN?$AAe?$AAx?$AAt?$AAS?$AAe?$AAc?$AAt?$AAo?$AAr@| DCB "B"
	DCB	0x0, "O", 0x0, "O", 0x0, "T", 0x0, "L", 0x0, "O", 0x0, "A"
	DCB	0x0, "D", 0x0, "E", 0x0, "R", 0x0, ":", 0x0, " ", 0x0, "F"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "I", 0x0, "o", 0x0, "R"
	DCB	0x0, "e", 0x0, "a", 0x0, "d", 0x0, "N", 0x0, "e", 0x0, "x"
	DCB	0x0, "t", 0x0, "S", 0x0, "e", 0x0, "c", 0x0, "t", 0x0, "o"
	DCB	0x0, "r", 0x0, "s", 0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "r", 0x0, "e"
	DCB	0x0, "a", 0x0, "d", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, " "
	DCB	0x0, "F", 0x0, "A", 0x0, "T", 0x0, ":", 0x0, " ", 0x0, "L"
	DCB	0x0, "B", 0x0, "A", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "x", 0x0, " ", 0x0, "(", 0x0, "c", 0x0, "l", 0x0, "u"
	DCB	0x0, "s", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "s"
	DCB	0x0, "e", 0x0, "c", 0x0, "t", 0x0, "o", 0x0, "r", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FE@HICFHJJI@?$AAB?$AAO?$AAO?$AAT?$AAL?$AAO?$AAA?$AAD?$AAE?$AAR?$AA?3?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA_?$AAs?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AA?$CF?$AAu?$AA?5?$AA?$CI?$AAF?$AAA?$AAT?$AA?$CJ@| DCB "B"
	DCB	0x0, "O", 0x0, "O", 0x0, "T", 0x0, "L", 0x0, "O", 0x0, "A"
	DCB	0x0, "D", 0x0, "E", 0x0, "R", 0x0, ":", 0x0, " ", 0x0, "r"
	DCB	0x0, "e", 0x0, "a", 0x0, "d", 0x0, "_", 0x0, "s", 0x0, "e"
	DCB	0x0, "c", 0x0, "t", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "%"
	DCB	0x0, "u", 0x0, " ", 0x0, "(", 0x0, "F", 0x0, "A", 0x0, "T"
	DCB	0x0, ")", 0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l"
	DCB	0x0, "e", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IO@PGHKICBM@?$AAB?$AAO?$AAO?$AAT?$AAL?$AAO?$AAA?$AAD?$AAE?$AAR?$AA?3?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAI?$AAo?$AAR?$AAe?$AAa?$AAd?$AAN?$AAe?$AAx?$AAt?$AAS?$AAe?$AAc?$AAt?$AAo?$AAr@| DCB "B"
	DCB	0x0, "O", 0x0, "O", 0x0, "T", 0x0, "L", 0x0, "O", 0x0, "A"
	DCB	0x0, "D", 0x0, "E", 0x0, "R", 0x0, ":", 0x0, " ", 0x0, "F"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "I", 0x0, "o", 0x0, "R"
	DCB	0x0, "e", 0x0, "a", 0x0, "d", 0x0, "N", 0x0, "e", 0x0, "x"
	DCB	0x0, "t", 0x0, "S", 0x0, "e", 0x0, "c", 0x0, "t", 0x0, "o"
	DCB	0x0, "r", 0x0, "s", 0x0, "(", 0x0, ")", 0x0, " ", 0x0, "c"
	DCB	0x0, "a", 0x0, "l", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "w", 0x0, "i", 0x0, "t", 0x0, "h", 0x0, " ", 0x0, "c"
	DCB	0x0, "u", 0x0, "r", 0x0, "r", 0x0, "e", 0x0, "n", 0x0, "t"
	DCB	0x0, "_", 0x0, "c", 0x0, "l", 0x0, "u", 0x0, "s", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, " ", 0x0, "<", 0x0, " ", 0x0, "2"
	DCB	0x0, "!", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JE@KBLAIMOL@?$AAB?$AAO?$AAO?$AAT?$AAL?$AAO?$AAA?$AAD?$AAE?$AAR?$AA?3?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAI?$AAo?$AAR?$AAe?$AAa?$AAd?$AAN?$AAe?$AAx?$AAt?$AAS?$AAe?$AAc?$AAt?$AAo?$AAr@| DCB "B"
	DCB	0x0, "O", 0x0, "O", 0x0, "T", 0x0, "L", 0x0, "O", 0x0, "A"
	DCB	0x0, "D", 0x0, "E", 0x0, "R", 0x0, ":", 0x0, " ", 0x0, "F"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "I", 0x0, "o", 0x0, "R"
	DCB	0x0, "e", 0x0, "a", 0x0, "d", 0x0, "N", 0x0, "e", 0x0, "x"
	DCB	0x0, "t", 0x0, "S", 0x0, "e", 0x0, "c", 0x0, "t", 0x0, "o"
	DCB	0x0, "r", 0x0, "s", 0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "i"
	DCB	0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d"
	DCB	0x0, "e", 0x0, " ", 0x0, "c", 0x0, "u", 0x0, "r", 0x0, "r"
	DCB	0x0, "e", 0x0, "n", 0x0, "t", 0x0, "_", 0x0, "c", 0x0, "l"
	DCB	0x0, "u", 0x0, "s", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  01270			 AREA	 |.text|, CODE, ARM

  01270		 |FileIoReadNextSectors| PROC

; 164  : {

  01270		 |$LN64@FileIoRead|
  01270	e1a0c00d	 mov         r12, sp
  01274	e92d000f	 stmdb       sp!, {r0 - r3}
  01278	e92d5010	 stmdb       sp!, {r4, r12, lr}
  0127c	e24dd058	 sub         sp, sp, #0x58
  01280		 |$M43625|

; 165  :     UINT32 SectorNumber;
; 166  :     UINT16 FatOffsetInSector, FatSectorNumber;
; 167  :     #if BOOTLOADER_SUPPORTS_FAT12
; 168  :         UINT16 FatOffsetInByte;
; 169  :     #endif
; 170  : 
; 171  :     int status;
; 172  : 
; 173  :     if (numSectors == 0)

  01280	e1dd37b0	 ldrh        r3, [sp, #0x70]
  01284	e3530000	 cmp         r3, #0
  01288	1a000002	 bne         |$LN45@FileIoRead|

; 174  :         return FILEIO_STATUS_OK;  // done by default

  0128c	e3a03000	 mov         r3, #0
  01290	e58d3014	 str         r3, [sp, #0x14]
  01294	ea0002e7	 b           |$LN46@FileIoRead|
  01298		 |$LN45@FileIoRead|

; 175  : 
; 176  :     // check if is this an attempt to read past the end of the file
; 177  :     if (pFile->current_sector_in_cluster == CURRENT_SECTOR_EOF_VALUE)

  01298	e59d3068	 ldr         r3, [sp, #0x68]
  0129c	e283301c	 add         r3, r3, #0x1C
  012a0	e1d330b0	 ldrh        r3, [r3]
  012a4	e1a02003	 mov         r2, r3
  012a8	e3a03cff	 mov         r3, #0xFF, 24
  012ac	e38330ff	 orr         r3, r3, #0xFF
  012b0	e1520003	 cmp         r2, r3
  012b4	1a000002	 bne         |$LN44@FileIoRead|

; 178  :     {
; 179  :         #if BOOTLOADER_DEBUG_DISPLAY_CALLS
; 180  :             OALMSG(OAL_INFO, (L"BOOTLOADER: FileIoReadNextSectors EOF\r\n"));
; 181  :         #endif
; 182  :         return FILEIO_STATUS_READ_EOF;

  012b8	e3a03004	 mov         r3, #4
  012bc	e58d3014	 str         r3, [sp, #0x14]
  012c0	ea0002dc	 b           |$LN46@FileIoRead|
  012c4		 |$LN44@FileIoRead|

; 183  :     }
; 184  :         
; 185  :     // check for invalid current_cluster
; 186  :     switch (FilesysInfo.FatType)

  012c4	e59f3b84	 ldr         r3, [pc, #0xB84]
  012c8	e5933044	 ldr         r3, [r3, #0x44]
  012cc	e58d301c	 str         r3, [sp, #0x1C]
  012d0	e59d301c	 ldr         r3, [sp, #0x1C]
  012d4	e3530001	 cmp         r3, #1
  012d8	0a000006	 beq         |$LN41@FileIoRead|
  012dc	e59d301c	 ldr         r3, [sp, #0x1C]
  012e0	e3530002	 cmp         r3, #2
  012e4	0a00001a	 beq         |$LN38@FileIoRead|
  012e8	e59d301c	 ldr         r3, [sp, #0x1C]
  012ec	e3530003	 cmp         r3, #3
  012f0	0a00002e	 beq         |$LN35@FileIoRead|
  012f4	ea00004f	 b           |$LN42@FileIoRead|
  012f8		 |$LN41@FileIoRead|

; 187  :     {
; 188  :         #if BOOTLOADER_SUPPORTS_FAT12
; 189  :         case FAT_TYPE_FAT12:
; 190  :             if (pFile->current_cluster < FAT12_CLUSTER_NEXT_START || (pFile->current_cluster > FAT12_CLUSTER_NEXT_END && pFile->current_cluster < FAT12_CLUSTER_LAST_START))

  012f8	e59d3068	 ldr         r3, [sp, #0x68]
  012fc	e2833018	 add         r3, r3, #0x18
  01300	e5933000	 ldr         r3, [r3]
  01304	e3530001	 cmp         r3, #1
  01308	3a00000d	 bcc         |$LN39@FileIoRead|
  0130c	e59d3068	 ldr         r3, [sp, #0x68]
  01310	e2833018	 add         r3, r3, #0x18
  01314	e5932000	 ldr         r2, [r3]
  01318	e3a03c0f	 mov         r3, #0xF, 24
  0131c	e38330ef	 orr         r3, r3, #0xEF
  01320	e1520003	 cmp         r2, r3
  01324	9a000009	 bls         |$LN40@FileIoRead|
  01328	e59d3068	 ldr         r3, [sp, #0x68]
  0132c	e2833018	 add         r3, r3, #0x18
  01330	e5932000	 ldr         r2, [r3]
  01334	e3a03c0f	 mov         r3, #0xF, 24
  01338	e38330f8	 orr         r3, r3, #0xF8
  0133c	e1520003	 cmp         r2, r3
  01340	2a000002	 bcs         |$LN40@FileIoRead|
  01344		 |$LN39@FileIoRead|

; 191  :                 return FILEIO_STATUS_READ_FAILED;

  01344	e3a03003	 mov         r3, #3
  01348	e58d3014	 str         r3, [sp, #0x14]
  0134c	ea0002b9	 b           |$LN46@FileIoRead|
  01350		 |$LN40@FileIoRead|

; 192  :             break;

  01350	ea000038	 b           |$LN42@FileIoRead|
  01354		 |$LN38@FileIoRead|

; 193  :         #endif
; 194  : 
; 195  :         #if BOOTLOADER_SUPPORTS_FAT16
; 196  :         case FAT_TYPE_FAT16:
; 197  :             if (pFile->current_cluster < FAT16_CLUSTER_NEXT_START || (pFile->current_cluster > FAT16_CLUSTER_NEXT_END && pFile->current_cluster < FAT16_CLUSTER_LAST_START))

  01354	e59d3068	 ldr         r3, [sp, #0x68]
  01358	e2833018	 add         r3, r3, #0x18
  0135c	e5933000	 ldr         r3, [r3]
  01360	e3530001	 cmp         r3, #1
  01364	3a00000d	 bcc         |$LN36@FileIoRead|
  01368	e59d3068	 ldr         r3, [sp, #0x68]
  0136c	e2833018	 add         r3, r3, #0x18
  01370	e5932000	 ldr         r2, [r3]
  01374	e3a03cff	 mov         r3, #0xFF, 24
  01378	e38330ef	 orr         r3, r3, #0xEF
  0137c	e1520003	 cmp         r2, r3
  01380	9a000009	 bls         |$LN37@FileIoRead|
  01384	e59d3068	 ldr         r3, [sp, #0x68]
  01388	e2833018	 add         r3, r3, #0x18
  0138c	e5932000	 ldr         r2, [r3]
  01390	e3a03cff	 mov         r3, #0xFF, 24
  01394	e38330f8	 orr         r3, r3, #0xF8
  01398	e1520003	 cmp         r2, r3
  0139c	2a000002	 bcs         |$LN37@FileIoRead|
  013a0		 |$LN36@FileIoRead|

; 198  :                 return FILEIO_STATUS_READ_FAILED;

  013a0	e3a03003	 mov         r3, #3
  013a4	e58d3014	 str         r3, [sp, #0x14]
  013a8	ea0002a2	 b           |$LN46@FileIoRead|
  013ac		 |$LN37@FileIoRead|

; 199  :             break;

  013ac	ea000021	 b           |$LN42@FileIoRead|
  013b0		 |$LN35@FileIoRead|

; 200  :         #endif
; 201  : 
; 202  :         #if BOOTLOADER_SUPPORTS_FAT32
; 203  :         case FAT_TYPE_FAT32:
; 204  :             if (pFile->current_cluster < FAT32_CLUSTER_NEXT_START || (pFile->current_cluster > FAT32_CLUSTER_NEXT_END && pFile->current_cluster < FAT32_CLUSTER_LAST_START))

  013b0	e59d3068	 ldr         r3, [sp, #0x68]
  013b4	e2833018	 add         r3, r3, #0x18
  013b8	e5933000	 ldr         r3, [r3]
  013bc	e3530001	 cmp         r3, #1
  013c0	3a00000b	 bcc         |$LN33@FileIoRead|
  013c4	e59d3068	 ldr         r3, [sp, #0x68]
  013c8	e2833018	 add         r3, r3, #0x18
  013cc	e5932000	 ldr         r2, [r3]
  013d0	e3e0320f	 mvn         r3, #0xF, 4
  013d4	e2233010	 eor         r3, r3, #0x10
  013d8	e1520003	 cmp         r2, r3
  013dc	9a000015	 bls         |$LN34@FileIoRead|
  013e0	e59d3068	 ldr         r3, [sp, #0x68]
  013e4	e2833018	 add         r3, r3, #0x18
  013e8	e5933000	 ldr         r3, [r3]
  013ec	e373028f	 cmn         r3, #0x8F, 4
  013f0	2a000010	 bcs         |$LN34@FileIoRead|
  013f4		 |$LN33@FileIoRead|

; 205  :             {
; 206  :                 #if BOOTLOADER_DEBUG_DISPLAY_ERRORS
; 207  :                     OALMSG(OAL_INFO, (L"BOOTLOADER: FileIoReadNextSectors failed, invalide current_cluster 0x%x\r\n", pFile->current_cluster));

  013f4	e59f3a58	 ldr         r3, [pc, #0xA58]
  013f8	e5933440	 ldr         r3, [r3, #0x440]
  013fc	e3130008	 tst         r3, #8
  01400	0a000007	 beq         |$LN48@FileIoRead|
  01404	e59d3068	 ldr         r3, [sp, #0x68]
  01408	e2833018	 add         r3, r3, #0x18
  0140c	e5931000	 ldr         r1, [r3]
  01410	e59f0a54	 ldr         r0, [pc, #0xA54]
  01414	eb000000	 bl          NKDbgPrintfW
  01418	e3a03001	 mov         r3, #1
  0141c	e58d3020	 str         r3, [sp, #0x20]
  01420	ea000001	 b           |$LN49@FileIoRead|
  01424		 |$LN48@FileIoRead|
  01424	e3a03000	 mov         r3, #0
  01428	e58d3020	 str         r3, [sp, #0x20]
  0142c		 |$LN49@FileIoRead|

; 208  :                 #endif
; 209  :                 return FILEIO_STATUS_READ_FAILED;

  0142c	e3a03003	 mov         r3, #3
  01430	e58d3014	 str         r3, [sp, #0x14]
  01434	ea00027f	 b           |$LN46@FileIoRead|
  01438		 |$LN34@FileIoRead|
  01438		 |$LN42@FileIoRead|

; 210  :             }
; 211  :             break;
; 212  :         #endif
; 213  :     }
; 214  : 
; 215  :     // calculate the sector number, used to read sector later
; 216  :     // file data area starting sector
; 217  :     SectorNumber = FilesysInfo.file_data_area_start;

  01438	e59f3a10	 ldr         r3, [pc, #0xA10]
  0143c	e5933040	 ldr         r3, [r3, #0x40]
  01440	e58d3008	 str         r3, [sp, #8]

; 218  :     // plus first sector of current cluster 
; 219  :     // Note: first 2 fat entries are reserved, making first cluster in file area = 2
; 220  :     // ??? The reserved fat entry stuff is poorly documented, this code may be wrong
; 221  :     #if BOOTLOADER_DEBUG_DISPLAY_ERRORS
; 222  :         if (pFile->current_cluster < 2)

  01444	e59d3068	 ldr         r3, [sp, #0x68]
  01448	e2833018	 add         r3, r3, #0x18
  0144c	e5933000	 ldr         r3, [r3]
  01450	e3530002	 cmp         r3, #2
  01454	2a00000a	 bcs         |$LN32@FileIoRead|

; 223  :             OALMSG(OAL_INFO, (L"BOOTLOADER: FileIoReadNextSectors() called with current_cluster < 2!\r\n"));

  01458	e59f39f4	 ldr         r3, [pc, #0x9F4]
  0145c	e5933440	 ldr         r3, [r3, #0x440]
  01460	e3130008	 tst         r3, #8
  01464	0a000004	 beq         |$LN50@FileIoRead|
  01468	e59f09f8	 ldr         r0, [pc, #0x9F8]
  0146c	eb000000	 bl          NKDbgPrintfW
  01470	e3a03001	 mov         r3, #1
  01474	e58d3024	 str         r3, [sp, #0x24]
  01478	ea000001	 b           |$LN51@FileIoRead|
  0147c		 |$LN50@FileIoRead|
  0147c	e3a03000	 mov         r3, #0
  01480	e58d3024	 str         r3, [sp, #0x24]
  01484		 |$LN51@FileIoRead|
  01484		 |$LN32@FileIoRead|

; 224  :     #endif
; 225  :     SectorNumber += (pFile->current_cluster - 2) * (FilesysInfo.BiosParameterBlock.sectors_per_cluster);

  01484	e59d3068	 ldr         r3, [sp, #0x68]
  01488	e2833018	 add         r3, r3, #0x18
  0148c	e5933000	 ldr         r3, [r3]
  01490	e2431002	 sub         r1, r3, #2
  01494	e59f39b4	 ldr         r3, [pc, #0x9B4]
  01498	e5d33002	 ldrb        r3, [r3, #2]
  0149c	e0020391	 mul         r2, r1, r3
  014a0	e59d3008	 ldr         r3, [sp, #8]
  014a4	e0833002	 add         r3, r3, r2
  014a8	e58d3008	 str         r3, [sp, #8]

; 226  :     // plus sector offset within cluster
; 227  :     SectorNumber += pFile->current_sector_in_cluster;

  014ac	e59d3068	 ldr         r3, [sp, #0x68]
  014b0	e283301c	 add         r3, r3, #0x1C
  014b4	e1d320b0	 ldrh        r2, [r3]
  014b8	e59d3008	 ldr         r3, [sp, #8]
  014bc	e0833002	 add         r3, r3, r2
  014c0	e58d3008	 str         r3, [sp, #8]

; 228  : 
; 229  :     // increment current_sector_in_cluster and check if this reads the last sector in the cluster
; 230  :     pFile->current_sector_in_cluster = pFile->current_sector_in_cluster + numSectors;

  014c4	e59d3068	 ldr         r3, [sp, #0x68]
  014c8	e283301c	 add         r3, r3, #0x1C
  014cc	e1d330b0	 ldrh        r3, [r3]
  014d0	e1a02003	 mov         r2, r3
  014d4	e1dd37b0	 ldrh        r3, [sp, #0x70]
  014d8	e0821003	 add         r1, r2, r3
  014dc	e59d3068	 ldr         r3, [sp, #0x68]
  014e0	e283201c	 add         r2, r3, #0x1C
  014e4	e1a03801	 mov         r3, r1, lsl #16
  014e8	e1a03823	 mov         r3, r3, lsr #16
  014ec	e1c230b0	 strh        r3, [r2]

; 231  :     if (pFile->current_sector_in_cluster >= (FilesysInfo.BiosParameterBlock.sectors_per_cluster))

  014f0	e59d3068	 ldr         r3, [sp, #0x68]
  014f4	e283301c	 add         r3, r3, #0x1C
  014f8	e1d330b0	 ldrh        r3, [r3]
  014fc	e1a02003	 mov         r2, r3
  01500	e59f3948	 ldr         r3, [pc, #0x948]
  01504	e5d33002	 ldrb        r3, [r3, #2]
  01508	e1520003	 cmp         r2, r3
  0150c	ba0001f3	 blt         |$LN31@FileIoRead|

; 232  :     {
; 233  :         // the current read reads the last sector in the current cluster, 
; 234  :         // get the next cluster number from the FAT
; 235  :         switch (FilesysInfo.FatType)

  01510	e59f3938	 ldr         r3, [pc, #0x938]
  01514	e5933044	 ldr         r3, [r3, #0x44]
  01518	e58d3028	 str         r3, [sp, #0x28]
  0151c	e59d3028	 ldr         r3, [sp, #0x28]
  01520	e3530001	 cmp         r3, #1
  01524	0a000006	 beq         |$LN28@FileIoRead|
  01528	e59d3028	 ldr         r3, [sp, #0x28]
  0152c	e3530002	 cmp         r3, #2
  01530	0a0000f3	 beq         |$LN15@FileIoRead|
  01534	e59d3028	 ldr         r3, [sp, #0x28]
  01538	e3530003	 cmp         r3, #3
  0153c	0a00016a	 beq         |$LN9@FileIoRead|
  01540	ea0001e6	 b           |$LN29@FileIoRead|
  01544		 |$LN28@FileIoRead|

; 236  :         {
; 237  :             #if BOOTLOADER_SUPPORTS_FAT12
; 238  :             case FAT_TYPE_FAT12:
; 239  :                 if (pFile->current_cluster >= FAT12_CLUSTER_LAST_START)

  01544	e59d3068	 ldr         r3, [sp, #0x68]
  01548	e2833018	 add         r3, r3, #0x18
  0154c	e5932000	 ldr         r2, [r3]
  01550	e3a03c0f	 mov         r3, #0xF, 24
  01554	e38330f8	 orr         r3, r3, #0xF8
  01558	e1520003	 cmp         r2, r3
  0155c	3a000005	 bcc         |$LN27@FileIoRead|

; 240  :                 {
; 241  :                     pFile->current_sector_in_cluster = CURRENT_SECTOR_EOF_VALUE;

  01560	e59d3068	 ldr         r3, [sp, #0x68]
  01564	e283201c	 add         r2, r3, #0x1C
  01568	e3a03cff	 mov         r3, #0xFF, 24
  0156c	e38330ff	 orr         r3, r3, #0xFF
  01570	e1c230b0	 strh        r3, [r2]

; 242  :                 }
; 243  :                 else

  01574	ea0000e1	 b           |$LN26@FileIoRead|
  01578		 |$LN27@FileIoRead|

; 244  :                 {
; 245  :                     //   FatOffsetInByte is 0 if fat entry starts on byte boundary, 1 if in mid-byte
; 246  :                     //   FatOffsetInSector is a byte pointer to byte containing first part of 12 bit fat entry
; 247  :                     FatOffsetInByte = (UINT16) (pFile->current_cluster & 1);

  01578	e59d3068	 ldr         r3, [sp, #0x68]
  0157c	e2833018	 add         r3, r3, #0x18
  01580	e5933000	 ldr         r3, [r3]
  01584	e2033001	 and         r3, r3, #1
  01588	e1a03803	 mov         r3, r3, lsl #16
  0158c	e1a03823	 mov         r3, r3, lsr #16
  01590	e1cd30b6	 strh        r3, [sp, #6]

; 248  :                     FatOffsetInSector = (UINT16) (((pFile->current_cluster * 3) / 2) % SECTOR_SIZE);

  01594	e59d3068	 ldr         r3, [sp, #0x68]
  01598	e2833018	 add         r3, r3, #0x18
  0159c	e5932000	 ldr         r2, [r3]
  015a0	e3a03003	 mov         r3, #3
  015a4	e0010392	 mul         r1, r2, r3
  015a8	e3a00002	 mov         r0, #2
  015ac	eb000000	 bl          __rt_udiv
  015b0	e1a01000	 mov         r1, r0
  015b4	e3a00c02	 mov         r0, #2, 24
  015b8	eb000000	 bl          __rt_udiv
  015bc	e1a03801	 mov         r3, r1, lsl #16
  015c0	e1a03823	 mov         r3, r3, lsr #16
  015c4	e1cd31b0	 strh        r3, [sp, #0x10]

; 249  :                     FatSectorNumber = (UINT16) (((pFile->current_cluster * 3) / 2) / SECTOR_SIZE);

  015c8	e59d3068	 ldr         r3, [sp, #0x68]
  015cc	e2833018	 add         r3, r3, #0x18
  015d0	e5932000	 ldr         r2, [r3]
  015d4	e3a03003	 mov         r3, #3
  015d8	e0010392	 mul         r1, r2, r3
  015dc	e3a00002	 mov         r0, #2
  015e0	eb000000	 bl          __rt_udiv
  015e4	e1a01000	 mov         r1, r0
  015e8	e3a00c02	 mov         r0, #2, 24
  015ec	eb000000	 bl          __rt_udiv
  015f0	e1a03800	 mov         r3, r0, lsl #16
  015f4	e1a03823	 mov         r3, r3, lsr #16
  015f8	e1cd30b4	 strh        r3, [sp, #4]

; 250  : 
; 251  :                     #if FILEIO_USE_FAT_SECTOR_BUFFER
; 252  :                         // if not already contained in FatBuffer, read sector containing next fat entry.
; 253  :                         // FatSectorNumber is an offset from the start of the partition + reserved area
; 254  :                         if (FatBufferSectorNumber != FilesysInfo.partition_start + FatSectorNumber + FilesysInfo.BiosParameterBlock.reserved_sectors)

  015fc	e1dd20b4	 ldrh        r2, [sp, #4]
  01600	e59f3848	 ldr         r3, [pc, #0x848]
  01604	e5933038	 ldr         r3, [r3, #0x38]
  01608	e0832002	 add         r2, r3, r2
  0160c	e59f383c	 ldr         r3, [pc, #0x83C]
  01610	e1d330b4	 ldrh        r3, [r3, #4]
  01614	e0822003	 add         r2, r2, r3
  01618	e59f383c	 ldr         r3, [pc, #0x83C]
  0161c	e5933000	 ldr         r3, [r3]
  01620	e1530002	 cmp         r3, r2
  01624	0a000030	 beq         |$LN25@FileIoRead|

; 255  :                         {
; 256  :                             FatBufferSectorNumber = FilesysInfo.partition_start + FatSectorNumber + FilesysInfo.BiosParameterBlock.reserved_sectors;

  01628	e1dd20b4	 ldrh        r2, [sp, #4]
  0162c	e59f381c	 ldr         r3, [pc, #0x81C]
  01630	e5933038	 ldr         r3, [r3, #0x38]
  01634	e0832002	 add         r2, r3, r2
  01638	e59f3810	 ldr         r3, [pc, #0x810]
  0163c	e1d330b4	 ldrh        r3, [r3, #4]
  01640	e0822003	 add         r2, r2, r3
  01644	e59f3810	 ldr         r3, [pc, #0x810]
  01648	e5832000	 str         r2, [r3]

; 257  :                             if (pfileio_ops->read_sector(pfileio_ops->drive_info, FatBufferSectorNumber + ExtendedPartionBaseSector, FatBuffer) != ATA_STATUS_OK)

  0164c	e59f2804	 ldr         r2, [pc, #0x804]
  01650	e59f3804	 ldr         r3, [pc, #0x804]
  01654	e5931000	 ldr         r1, [r3]
  01658	e59f37ec	 ldr         r3, [pc, #0x7EC]
  0165c	e5933000	 ldr         r3, [r3]
  01660	e0811003	 add         r1, r1, r3
  01664	e59d3064	 ldr         r3, [sp, #0x64]
  01668	e2833010	 add         r3, r3, #0x10
  0166c	e5930000	 ldr         r0, [r3]
  01670	e59d3064	 ldr         r3, [sp, #0x64]
  01674	e2833008	 add         r3, r3, #8
  01678	e5933000	 ldr         r3, [r3]
  0167c	e1a0e00f	 mov         lr, pc
  01680	e12fff13	 bx          r3
  01684	e58d002c	 str         r0, [sp, #0x2C]
  01688	e59d302c	 ldr         r3, [sp, #0x2C]
  0168c	e3530000	 cmp         r3, #0
  01690	0a000015	 beq         |$LN24@FileIoRead|

; 258  :                             {
; 259  :                                 #if BOOTLOADER_DEBUG_DISPLAY_ERRORS
; 260  :                                     OALMSG(OAL_INFO, (L"BOOTLOADER: read_sector %u (FAT) failed\r\n", FatBufferSectorNumber + ExtendedPartionBaseSector));

  01694	e59f37b8	 ldr         r3, [pc, #0x7B8]
  01698	e5933440	 ldr         r3, [r3, #0x440]
  0169c	e3130008	 tst         r3, #8
  016a0	0a000009	 beq         |$LN52@FileIoRead|
  016a4	e59f37b0	 ldr         r3, [pc, #0x7B0]
  016a8	e5932000	 ldr         r2, [r3]
  016ac	e59f3798	 ldr         r3, [pc, #0x798]
  016b0	e5933000	 ldr         r3, [r3]
  016b4	e0821003	 add         r1, r2, r3
  016b8	e59f07a4	 ldr         r0, [pc, #0x7A4]
  016bc	eb000000	 bl          NKDbgPrintfW
  016c0	e3a03001	 mov         r3, #1
  016c4	e58d3030	 str         r3, [sp, #0x30]
  016c8	ea000001	 b           |$LN53@FileIoRead|
  016cc		 |$LN52@FileIoRead|
  016cc	e3a03000	 mov         r3, #0
  016d0	e58d3030	 str         r3, [sp, #0x30]
  016d4		 |$LN53@FileIoRead|

; 261  :                                 #endif
; 262  :                                 FatBufferSectorNumber = 0;

  016d4	e59f2780	 ldr         r2, [pc, #0x780]
  016d8	e3a03000	 mov         r3, #0
  016dc	e5823000	 str         r3, [r2]

; 263  :                                 return FILEIO_STATUS_READ_FAILED;

  016e0	e3a03003	 mov         r3, #3
  016e4	e58d3014	 str         r3, [sp, #0x14]
  016e8	ea0001d2	 b           |$LN46@FileIoRead|
  016ec		 |$LN24@FileIoRead|
  016ec		 |$LN25@FileIoRead|

; 264  :                             }
; 265  :                         }
; 266  :                         // build current fat index from two bytes (which may be in different sectors)
; 267  :                         // get data from first byte of containing current FAT entry
; 268  :                         if (FatOffsetInByte)

  016ec	e1dd30b6	 ldrh        r3, [sp, #6]
  016f0	e3530000	 cmp         r3, #0
  016f4	0a00000a	 beq         |$LN23@FileIoRead|

; 269  :                             pFile->current_cluster = (*(((UINT8 *)FatBuffer) + FatOffsetInSector) >> 4) & 0xf;  // lower 4 bits of 12 from upper half of byte

  016f8	e1dd31b0	 ldrh        r3, [sp, #0x10]
  016fc	e1a02003	 mov         r2, r3
  01700	e59f3750	 ldr         r3, [pc, #0x750]
  01704	e0833002	 add         r3, r3, r2
  01708	e5d33000	 ldrb        r3, [r3]
  0170c	e1a03243	 mov         r3, r3, asr #4
  01710	e203200f	 and         r2, r3, #0xF
  01714	e59d3068	 ldr         r3, [sp, #0x68]
  01718	e2833018	 add         r3, r3, #0x18
  0171c	e5832000	 str         r2, [r3]

; 270  :                         else

  01720	ea000007	 b           |$LN22@FileIoRead|
  01724		 |$LN23@FileIoRead|

; 271  :                             pFile->current_cluster = *(((UINT8 *)FatBuffer) + FatOffsetInSector);   // lower 8 bits of 12 from entire byte

  01724	e1dd31b0	 ldrh        r3, [sp, #0x10]
  01728	e1a02003	 mov         r2, r3
  0172c	e59f3724	 ldr         r3, [pc, #0x724]
  01730	e0831002	 add         r1, r3, r2
  01734	e59d3068	 ldr         r3, [sp, #0x68]
  01738	e2832018	 add         r2, r3, #0x18
  0173c	e5d13000	 ldrb        r3, [r1]
  01740	e5823000	 str         r3, [r2]
  01744		 |$LN22@FileIoRead|

; 272  :                     #else
; 273  :                         // read sector containing (at least the beginning of) the next fat entry
; 274  :                         if (pfileio_ops->read_sector(pfileio_ops->drive_info, (FilesysInfo.partition_start + FatSectorNumber + FilesysInfo.BiosParameterBlock.reserved_sectors) + ExtendedPartionBaseSector, pBuffer) != ATA_STATUS_OK)
; 275  :                         {
; 276  :                             #if BOOTLOADER_DEBUG_DISPLAY_ERRORS
; 277  :                                 OALMSG(OAL_INFO, (L"BOOTLOADER: read_sector %u (FAT) failed\r\n", (FilesysInfo.partition_start + FatSectorNumber + FilesysInfo.BiosParameterBlock.reserved_sectors) + ExtendedPartionBaseSector));
; 278  :                             #endif
; 279  :                             return FILEIO_STATUS_READ_FAILED;
; 280  :                         }
; 281  : 
; 282  :                         // build current fat index from two bytes (which may be in different sectors)
; 283  :                         // get data from first byte of containing current FAT entry
; 284  :                         if (FatOffsetInByte)
; 285  :                             pFile->current_cluster = (*(((UINT8 *)pBuffer) + FatOffsetInSector) >> 4) & 0xf;    // lower 4 bits of 12 from upper half of byte
; 286  :                         else
; 287  :                             pFile->current_cluster = *(((UINT8 *)pBuffer) + FatOffsetInSector); // lower 8 bits of 12 from entire byte
; 288  :                     #endif
; 289  : 
; 290  :                     // get data from second byte of FAT12 entry, first check if fat entry spans sector
; 291  :                     if (FatOffsetInSector == 511)

  01744	e1dd31b0	 ldrh        r3, [sp, #0x10]
  01748	e1a02003	 mov         r2, r3
  0174c	e3a03c01	 mov         r3, #1, 24
  01750	e38330ff	 orr         r3, r3, #0xFF
  01754	e1520003	 cmp         r2, r3
  01758	1a000034	 bne         |$LN21@FileIoRead|

; 292  :                     {
; 293  :                         // second byte spans sector, read next sector, reset offset
; 294  :                         #if FILEIO_USE_FAT_SECTOR_BUFFER
; 295  :                             FatBufferSectorNumber = FilesysInfo.partition_start + FatSectorNumber + FilesysInfo.BiosParameterBlock.reserved_sectors + 1;

  0175c	e1dd20b4	 ldrh        r2, [sp, #4]
  01760	e59f36e8	 ldr         r3, [pc, #0x6E8]
  01764	e5933038	 ldr         r3, [r3, #0x38]
  01768	e0832002	 add         r2, r3, r2
  0176c	e59f36dc	 ldr         r3, [pc, #0x6DC]
  01770	e1d330b4	 ldrh        r3, [r3, #4]
  01774	e0823003	 add         r3, r2, r3
  01778	e2832001	 add         r2, r3, #1
  0177c	e59f36d8	 ldr         r3, [pc, #0x6D8]
  01780	e5832000	 str         r2, [r3]

; 296  :                             if (pfileio_ops->read_sector(pfileio_ops->drive_info, FatBufferSectorNumber + ExtendedPartionBaseSector, FatBuffer) != ATA_STATUS_OK)

  01784	e59f26cc	 ldr         r2, [pc, #0x6CC]
  01788	e59f36cc	 ldr         r3, [pc, #0x6CC]
  0178c	e5931000	 ldr         r1, [r3]
  01790	e59f36b4	 ldr         r3, [pc, #0x6B4]
  01794	e5933000	 ldr         r3, [r3]
  01798	e0811003	 add         r1, r1, r3
  0179c	e59d3064	 ldr         r3, [sp, #0x64]
  017a0	e2833010	 add         r3, r3, #0x10
  017a4	e5930000	 ldr         r0, [r3]
  017a8	e59d3064	 ldr         r3, [sp, #0x64]
  017ac	e2833008	 add         r3, r3, #8
  017b0	e5933000	 ldr         r3, [r3]
  017b4	e1a0e00f	 mov         lr, pc
  017b8	e12fff13	 bx          r3
  017bc	e58d0034	 str         r0, [sp, #0x34]
  017c0	e59d3034	 ldr         r3, [sp, #0x34]
  017c4	e3530000	 cmp         r3, #0
  017c8	0a000015	 beq         |$LN20@FileIoRead|

; 297  :                             {
; 298  :                                 #if BOOTLOADER_DEBUG_DISPLAY_ERRORS
; 299  :                                     OALMSG(OAL_INFO, (L"BOOTLOADER: read_sector %u (FAT) failed\r\n", FatBufferSectorNumber + ExtendedPartionBaseSector));

  017cc	e59f3680	 ldr         r3, [pc, #0x680]
  017d0	e5933440	 ldr         r3, [r3, #0x440]
  017d4	e3130008	 tst         r3, #8
  017d8	0a000009	 beq         |$LN54@FileIoRead|
  017dc	e59f3678	 ldr         r3, [pc, #0x678]
  017e0	e5932000	 ldr         r2, [r3]
  017e4	e59f3660	 ldr         r3, [pc, #0x660]
  017e8	e5933000	 ldr         r3, [r3]
  017ec	e0821003	 add         r1, r2, r3
  017f0	e59f066c	 ldr         r0, [pc, #0x66C]
  017f4	eb000000	 bl          NKDbgPrintfW
  017f8	e3a03001	 mov         r3, #1
  017fc	e58d3038	 str         r3, [sp, #0x38]
  01800	ea000001	 b           |$LN55@FileIoRead|
  01804		 |$LN54@FileIoRead|
  01804	e3a03000	 mov         r3, #0
  01808	e58d3038	 str         r3, [sp, #0x38]
  0180c		 |$LN55@FileIoRead|

; 300  :                                 #endif
; 301  :                                 FatBufferSectorNumber = 0;

  0180c	e59f2648	 ldr         r2, [pc, #0x648]
  01810	e3a03000	 mov         r3, #0
  01814	e5823000	 str         r3, [r2]

; 302  :                                 return FILEIO_STATUS_READ_FAILED;

  01818	e3a03003	 mov         r3, #3
  0181c	e58d3014	 str         r3, [sp, #0x14]
  01820	ea000184	 b           |$LN46@FileIoRead|
  01824		 |$LN20@FileIoRead|

; 303  :                             }
; 304  :                         #else
; 305  :                             if (pfileio_ops->read_sector(pfileio_ops->drive_info, (FilesysInfo.partition_start + FatSectorNumber + FilesysInfo.BiosParameterBlock.reserved_sectors + 1) + ExtendedPartionBaseSector, pBuffer) != ATA_STATUS_OK)
; 306  :                             {
; 307  :                                 #if BOOTLOADER_DEBUG_DISPLAY_ERRORS
; 308  :                                     OALMSG(OAL_INFO, (L"BOOTLOADER: read_sector %u (FAT) failed\r\n", (FilesysInfo.partition_start + FatSectorNumber + FilesysInfo.BiosParameterBlock.reserved_sectors + 1) + ExtendedPartionBaseSector));
; 309  :                                 #endif
; 310  :                                 return FILEIO_STATUS_READ_FAILED;
; 311  :                             }
; 312  :                         #endif
; 313  :                         FatOffsetInSector = 0;

  01824	e3a03000	 mov         r3, #0
  01828	e1cd31b0	 strh        r3, [sp, #0x10]

; 314  :                     }
; 315  :                     else

  0182c	ea000004	 b           |$LN19@FileIoRead|
  01830		 |$LN21@FileIoRead|

; 316  :                     {
; 317  :                         // second byte is in current sector, just increment offset
; 318  :                         FatOffsetInSector += 1;

  01830	e1dd31b0	 ldrh        r3, [sp, #0x10]
  01834	e2833001	 add         r3, r3, #1
  01838	e1a03803	 mov         r3, r3, lsl #16
  0183c	e1a03823	 mov         r3, r3, lsr #16
  01840	e1cd31b0	 strh        r3, [sp, #0x10]
  01844		 |$LN19@FileIoRead|

; 319  :                     }
; 320  : 
; 321  :                     //  build remainder of current fat index from the next byte
; 322  :                     #if FILEIO_USE_FAT_SECTOR_BUFFER
; 323  :                         if (FatOffsetInByte)

  01844	e1dd30b6	 ldrh        r3, [sp, #6]
  01848	e3530000	 cmp         r3, #0
  0184c	0a00000d	 beq         |$LN18@FileIoRead|

; 324  :                             pFile->current_cluster |= *(((UINT8 *)FatBuffer) + FatOffsetInSector) << 4;         // upper 8 of 12 from entire byte

  01850	e59d3068	 ldr         r3, [sp, #0x68]
  01854	e2831018	 add         r1, r3, #0x18
  01858	e1dd31b0	 ldrh        r3, [sp, #0x10]
  0185c	e1a02003	 mov         r2, r3
  01860	e59f35f0	 ldr         r3, [pc, #0x5F0]
  01864	e0833002	 add         r3, r3, r2
  01868	e5d33000	 ldrb        r3, [r3]
  0186c	e1a02203	 mov         r2, r3, lsl #4
  01870	e5913000	 ldr         r3, [r1]
  01874	e1832002	 orr         r2, r3, r2
  01878	e59d3068	 ldr         r3, [sp, #0x68]
  0187c	e2833018	 add         r3, r3, #0x18
  01880	e5832000	 str         r2, [r3]

; 325  :                         else

  01884	ea00000d	 b           |$LN17@FileIoRead|
  01888		 |$LN18@FileIoRead|

; 326  :                             pFile->current_cluster |= (*(((UINT8 *)FatBuffer) + FatOffsetInSector) & 0xf) << 8; // upper 4 of 12 from lower half of byte

  01888	e59d3068	 ldr         r3, [sp, #0x68]
  0188c	e2831018	 add         r1, r3, #0x18
  01890	e1dd31b0	 ldrh        r3, [sp, #0x10]
  01894	e1a02003	 mov         r2, r3
  01898	e59f35b8	 ldr         r3, [pc, #0x5B8]
  0189c	e0833002	 add         r3, r3, r2
  018a0	e5d33000	 ldrb        r3, [r3]
  018a4	e203300f	 and         r3, r3, #0xF
  018a8	e1a02403	 mov         r2, r3, lsl #8
  018ac	e5913000	 ldr         r3, [r1]
  018b0	e1832002	 orr         r2, r3, r2
  018b4	e59d3068	 ldr         r3, [sp, #0x68]
  018b8	e2833018	 add         r3, r3, #0x18
  018bc	e5832000	 str         r2, [r3]
  018c0		 |$LN17@FileIoRead|

; 327  :                     #else
; 328  :                         if (FatOffsetInByte)
; 329  :                             pFile->current_cluster |= *(((UINT8 *)pBuffer) + FatOffsetInSector) << 4;           // upper 8 of 12 from entire byte
; 330  :                         else
; 331  :                             pFile->current_cluster |= (*(((UINT8 *)pBuffer) + FatOffsetInSector) & 0xf) << 8;   // upper 4 of 12 from lower half of byte
; 332  :                     #endif
; 333  :                     //  reset current_sector_in_cluster
; 334  :                     pFile->current_sector_in_cluster = 0;

  018c0	e59d3068	 ldr         r3, [sp, #0x68]
  018c4	e283201c	 add         r2, r3, #0x1C
  018c8	e3a03000	 mov         r3, #0
  018cc	e1c230b0	 strh        r3, [r2]

; 335  : 
; 336  :                     // check to see if this was the last cluster, set flag so next read returns EOF
; 337  :                     if (pFile->current_cluster >= FAT12_CLUSTER_LAST_START)

  018d0	e59d3068	 ldr         r3, [sp, #0x68]
  018d4	e2833018	 add         r3, r3, #0x18
  018d8	e5932000	 ldr         r2, [r3]
  018dc	e3a03c0f	 mov         r3, #0xF, 24
  018e0	e38330f8	 orr         r3, r3, #0xF8
  018e4	e1520003	 cmp         r2, r3
  018e8	3a000004	 bcc         |$LN16@FileIoRead|

; 338  :                     {
; 339  :                         pFile->current_sector_in_cluster = CURRENT_SECTOR_EOF_VALUE;

  018ec	e59d3068	 ldr         r3, [sp, #0x68]
  018f0	e283201c	 add         r2, r3, #0x1C
  018f4	e3a03cff	 mov         r3, #0xFF, 24
  018f8	e38330ff	 orr         r3, r3, #0xFF
  018fc	e1c230b0	 strh        r3, [r2]
  01900		 |$LN16@FileIoRead|
  01900		 |$LN26@FileIoRead|

; 340  :                     }
; 341  :                 }
; 342  :                 break;

  01900	ea0000f6	 b           |$LN29@FileIoRead|
  01904		 |$LN15@FileIoRead|

; 343  :             #endif
; 344  : 
; 345  :             #if BOOTLOADER_SUPPORTS_FAT16
; 346  :             case FAT_TYPE_FAT16:
; 347  :                 // check to see if this was the last cluster, set flag so next read returns EOF
; 348  :                 if (pFile->current_cluster >= FAT16_CLUSTER_LAST_START)

  01904	e59d3068	 ldr         r3, [sp, #0x68]
  01908	e2833018	 add         r3, r3, #0x18
  0190c	e5932000	 ldr         r2, [r3]
  01910	e3a03cff	 mov         r3, #0xFF, 24
  01914	e38330f8	 orr         r3, r3, #0xF8
  01918	e1520003	 cmp         r2, r3
  0191c	3a000005	 bcc         |$LN14@FileIoRead|

; 349  :                 {
; 350  :                     pFile->current_sector_in_cluster = CURRENT_SECTOR_EOF_VALUE;

  01920	e59d3068	 ldr         r3, [sp, #0x68]
  01924	e283201c	 add         r2, r3, #0x1C
  01928	e3a03cff	 mov         r3, #0xFF, 24
  0192c	e38330ff	 orr         r3, r3, #0xFF
  01930	e1c230b0	 strh        r3, [r2]

; 351  :                 }
; 352  :                 else

  01934	ea00006b	 b           |$LN13@FileIoRead|
  01938		 |$LN14@FileIoRead|

; 353  :                 {           
; 354  :                     FatOffsetInSector = (UINT16) ((pFile->current_cluster * 2) % SECTOR_SIZE);

  01938	e59d3068	 ldr         r3, [sp, #0x68]
  0193c	e2833018	 add         r3, r3, #0x18
  01940	e5932000	 ldr         r2, [r3]
  01944	e3a03002	 mov         r3, #2
  01948	e0010392	 mul         r1, r2, r3
  0194c	e3a00c02	 mov         r0, #2, 24
  01950	eb000000	 bl          __rt_udiv
  01954	e1a03801	 mov         r3, r1, lsl #16
  01958	e1a03823	 mov         r3, r3, lsr #16
  0195c	e1cd31b0	 strh        r3, [sp, #0x10]

; 355  :                     FatSectorNumber = (UINT16) ((pFile->current_cluster * 2) / SECTOR_SIZE);

  01960	e59d3068	 ldr         r3, [sp, #0x68]
  01964	e2833018	 add         r3, r3, #0x18
  01968	e5932000	 ldr         r2, [r3]
  0196c	e3a03002	 mov         r3, #2
  01970	e0010392	 mul         r1, r2, r3
  01974	e3a00c02	 mov         r0, #2, 24
  01978	eb000000	 bl          __rt_udiv
  0197c	e1a03800	 mov         r3, r0, lsl #16
  01980	e1a03823	 mov         r3, r3, lsr #16
  01984	e1cd30b4	 strh        r3, [sp, #4]

; 356  : 
; 357  :                     #if FILEIO_USE_FAT_SECTOR_BUFFER
; 358  :                         // if not already contained in FatBuffer,
; 359  :                         // read sector containing next fat entry, FatSectorNumber is an
; 360  :                         // offset from the start of the partition + reserved area
; 361  :                         if (FatBufferSectorNumber != FilesysInfo.partition_start + FatSectorNumber + FilesysInfo.BiosParameterBlock.reserved_sectors)

  01988	e1dd20b4	 ldrh        r2, [sp, #4]
  0198c	e59f34bc	 ldr         r3, [pc, #0x4BC]
  01990	e5933038	 ldr         r3, [r3, #0x38]
  01994	e0832002	 add         r2, r3, r2
  01998	e59f34b0	 ldr         r3, [pc, #0x4B0]
  0199c	e1d330b4	 ldrh        r3, [r3, #4]
  019a0	e0822003	 add         r2, r2, r3
  019a4	e59f34b0	 ldr         r3, [pc, #0x4B0]
  019a8	e5933000	 ldr         r3, [r3]
  019ac	e1530002	 cmp         r3, r2
  019b0	0a000030	 beq         |$LN12@FileIoRead|

; 362  :                         {
; 363  :                             FatBufferSectorNumber = FilesysInfo.partition_start + FatSectorNumber + FilesysInfo.BiosParameterBlock.reserved_sectors;

  019b4	e1dd20b4	 ldrh        r2, [sp, #4]
  019b8	e59f3490	 ldr         r3, [pc, #0x490]
  019bc	e5933038	 ldr         r3, [r3, #0x38]
  019c0	e0832002	 add         r2, r3, r2
  019c4	e59f3484	 ldr         r3, [pc, #0x484]
  019c8	e1d330b4	 ldrh        r3, [r3, #4]
  019cc	e0822003	 add         r2, r2, r3
  019d0	e59f3484	 ldr         r3, [pc, #0x484]
  019d4	e5832000	 str         r2, [r3]

; 364  :                             if (pfileio_ops->read_sector(pfileio_ops->drive_info, FatBufferSectorNumber + ExtendedPartionBaseSector, FatBuffer) != ATA_STATUS_OK)

  019d8	e59f2478	 ldr         r2, [pc, #0x478]
  019dc	e59f3478	 ldr         r3, [pc, #0x478]
  019e0	e5931000	 ldr         r1, [r3]
  019e4	e59f3460	 ldr         r3, [pc, #0x460]
  019e8	e5933000	 ldr         r3, [r3]
  019ec	e0811003	 add         r1, r1, r3
  019f0	e59d3064	 ldr         r3, [sp, #0x64]
  019f4	e2833010	 add         r3, r3, #0x10
  019f8	e5930000	 ldr         r0, [r3]
  019fc	e59d3064	 ldr         r3, [sp, #0x64]
  01a00	e2833008	 add         r3, r3, #8
  01a04	e5933000	 ldr         r3, [r3]
  01a08	e1a0e00f	 mov         lr, pc
  01a0c	e12fff13	 bx          r3
  01a10	e58d003c	 str         r0, [sp, #0x3C]
  01a14	e59d303c	 ldr         r3, [sp, #0x3C]
  01a18	e3530000	 cmp         r3, #0
  01a1c	0a000015	 beq         |$LN11@FileIoRead|

; 365  :                             {
; 366  :                                 #if BOOTLOADER_DEBUG_DISPLAY_ERRORS
; 367  :                                     OALMSG(OAL_INFO, (L"BOOTLOADER: read_sector %u (FAT) failed\r\n", FatBufferSectorNumber + ExtendedPartionBaseSector));

  01a20	e59f342c	 ldr         r3, [pc, #0x42C]
  01a24	e5933440	 ldr         r3, [r3, #0x440]
  01a28	e3130008	 tst         r3, #8
  01a2c	0a000009	 beq         |$LN56@FileIoRead|
  01a30	e59f3424	 ldr         r3, [pc, #0x424]
  01a34	e5932000	 ldr         r2, [r3]
  01a38	e59f340c	 ldr         r3, [pc, #0x40C]
  01a3c	e5933000	 ldr         r3, [r3]
  01a40	e0821003	 add         r1, r2, r3
  01a44	e59f0418	 ldr         r0, [pc, #0x418]
  01a48	eb000000	 bl          NKDbgPrintfW
  01a4c	e3a03001	 mov         r3, #1
  01a50	e58d3040	 str         r3, [sp, #0x40]
  01a54	ea000001	 b           |$LN57@FileIoRead|
  01a58		 |$LN56@FileIoRead|
  01a58	e3a03000	 mov         r3, #0
  01a5c	e58d3040	 str         r3, [sp, #0x40]
  01a60		 |$LN57@FileIoRead|

; 368  :                                 #endif
; 369  :                                 FatBufferSectorNumber = 0;

  01a60	e59f23f4	 ldr         r2, [pc, #0x3F4]
  01a64	e3a03000	 mov         r3, #0
  01a68	e5823000	 str         r3, [r2]

; 370  :                                 return FILEIO_STATUS_READ_FAILED;

  01a6c	e3a03003	 mov         r3, #3
  01a70	e58d3014	 str         r3, [sp, #0x14]
  01a74	ea0000ef	 b           |$LN46@FileIoRead|
  01a78		 |$LN11@FileIoRead|
  01a78		 |$LN12@FileIoRead|

; 371  :                             }
; 372  :                         }
; 373  :                         //  update current fat index
; 374  :                         pFile->current_cluster = *(((UINT16 *)FatBuffer) + (FatOffsetInSector/2));

  01a78	e1dd31b0	 ldrh        r3, [sp, #0x10]
  01a7c	e1a01003	 mov         r1, r3
  01a80	e3a00002	 mov         r0, #2
  01a84	eb000000	 bl          __rt_sdiv
  01a88	e3a03002	 mov         r3, #2
  01a8c	e0020390	 mul         r2, r0, r3
  01a90	e59f33c0	 ldr         r3, [pc, #0x3C0]
  01a94	e0831002	 add         r1, r3, r2
  01a98	e59d3068	 ldr         r3, [sp, #0x68]
  01a9c	e2832018	 add         r2, r3, #0x18
  01aa0	e1d130b0	 ldrh        r3, [r1]
  01aa4	e5823000	 str         r3, [r2]

; 375  :                     #else
; 376  :                         // read sector containing next fat entry, FatSectorNumber is an
; 377  :                         // offset from the start of the partition + reserved area
; 378  :                         if (pfileio_ops->read_sector(pfileio_ops->drive_info, (FilesysInfo.partition_start + FatSectorNumber + FilesysInfo.BiosParameterBlock.reserved_sectors) + ExtendedPartionBaseSector, pBuffer) != ATA_STATUS_OK)
; 379  :                         {
; 380  :                             #if BOOTLOADER_DEBUG_DISPLAY_ERRORS
; 381  :                                 OALMSG(OAL_INFO, (L"BOOTLOADER: read_sector %u (FAT) failed\r\n", (FilesysInfo.partition_start + FatSectorNumber + FilesysInfo.BiosParameterBlock.reserved_sectors) + ExtendedPartionBaseSector));
; 382  :                             #endif
; 383  :                             return FILEIO_STATUS_READ_FAILED;
; 384  :                         }
; 385  :                         //  update current fat index
; 386  :                         pFile->current_cluster = *(((UINT16 *)pBuffer) + (FatOffsetInSector/2));
; 387  :                     #endif
; 388  :                     //  reset current_sector_in_cluster
; 389  :                     pFile->current_sector_in_cluster = 0;

  01aa8	e59d3068	 ldr         r3, [sp, #0x68]
  01aac	e283201c	 add         r2, r3, #0x1C
  01ab0	e3a03000	 mov         r3, #0
  01ab4	e1c230b0	 strh        r3, [r2]

; 390  : 
; 391  :                     // check to see if this was the last cluster, set flag so next read returns EOF
; 392  :                     if (pFile->current_cluster >= FAT16_CLUSTER_LAST_START)

  01ab8	e59d3068	 ldr         r3, [sp, #0x68]
  01abc	e2833018	 add         r3, r3, #0x18
  01ac0	e5932000	 ldr         r2, [r3]
  01ac4	e3a03cff	 mov         r3, #0xFF, 24
  01ac8	e38330f8	 orr         r3, r3, #0xF8
  01acc	e1520003	 cmp         r2, r3
  01ad0	3a000004	 bcc         |$LN10@FileIoRead|

; 393  :                     {
; 394  :                         pFile->current_sector_in_cluster = CURRENT_SECTOR_EOF_VALUE;

  01ad4	e59d3068	 ldr         r3, [sp, #0x68]
  01ad8	e283201c	 add         r2, r3, #0x1C
  01adc	e3a03cff	 mov         r3, #0xFF, 24
  01ae0	e38330ff	 orr         r3, r3, #0xFF
  01ae4	e1c230b0	 strh        r3, [r2]
  01ae8		 |$LN10@FileIoRead|
  01ae8		 |$LN13@FileIoRead|

; 395  :                     }
; 396  :                 }
; 397  :                 break;

  01ae8	ea00007c	 b           |$LN29@FileIoRead|
  01aec		 |$LN9@FileIoRead|

; 398  : 
; 399  :             #endif
; 400  : 
; 401  :             #if BOOTLOADER_SUPPORTS_FAT32
; 402  :             case FAT_TYPE_FAT32:
; 403  :                 // check to see if this was the last cluster, set flag so next read returns EOF
; 404  :                 if (pFile->current_cluster >= FAT32_CLUSTER_LAST_START)

  01aec	e59d3068	 ldr         r3, [sp, #0x68]
  01af0	e2833018	 add         r3, r3, #0x18
  01af4	e5933000	 ldr         r3, [r3]
  01af8	e373028f	 cmn         r3, #0x8F, 4
  01afc	3a000005	 bcc         |$LN8@FileIoRead|

; 405  :                 {
; 406  :                     pFile->current_sector_in_cluster = CURRENT_SECTOR_EOF_VALUE;

  01b00	e59d3068	 ldr         r3, [sp, #0x68]
  01b04	e283201c	 add         r2, r3, #0x1C
  01b08	e3a03cff	 mov         r3, #0xFF, 24
  01b0c	e38330ff	 orr         r3, r3, #0xFF
  01b10	e1c230b0	 strh        r3, [r2]

; 407  :                 }
; 408  :                 else

  01b14	ea000071	 b           |$LN7@FileIoRead|
  01b18		 |$LN8@FileIoRead|

; 409  :                 {           
; 410  :                     FatOffsetInSector = (UINT16) ((pFile->current_cluster * 4) % SECTOR_SIZE);

  01b18	e59d3068	 ldr         r3, [sp, #0x68]
  01b1c	e2833018	 add         r3, r3, #0x18
  01b20	e5932000	 ldr         r2, [r3]
  01b24	e3a03004	 mov         r3, #4
  01b28	e0010392	 mul         r1, r2, r3
  01b2c	e3a00c02	 mov         r0, #2, 24
  01b30	eb000000	 bl          __rt_udiv
  01b34	e1a03801	 mov         r3, r1, lsl #16
  01b38	e1a03823	 mov         r3, r3, lsr #16
  01b3c	e1cd31b0	 strh        r3, [sp, #0x10]

; 411  :                     FatSectorNumber = (UINT16) ((pFile->current_cluster * 4) / SECTOR_SIZE);

  01b40	e59d3068	 ldr         r3, [sp, #0x68]
  01b44	e2833018	 add         r3, r3, #0x18
  01b48	e5932000	 ldr         r2, [r3]
  01b4c	e3a03004	 mov         r3, #4
  01b50	e0010392	 mul         r1, r2, r3
  01b54	e3a00c02	 mov         r0, #2, 24
  01b58	eb000000	 bl          __rt_udiv
  01b5c	e1a03800	 mov         r3, r0, lsl #16
  01b60	e1a03823	 mov         r3, r3, lsr #16
  01b64	e1cd30b4	 strh        r3, [sp, #4]

; 412  : 
; 413  :                     #if FILEIO_USE_FAT_SECTOR_BUFFER
; 414  :                         // if not already contained in FatBuffer,
; 415  :                         // read sector containing next fat entry, FatSectorNumber is an
; 416  :                         // offset from the start of the partition + reserved area
; 417  :                         if (FatBufferSectorNumber != FilesysInfo.partition_start + FatSectorNumber + FilesysInfo.BiosParameterBlock.reserved_sectors)

  01b68	e1dd20b4	 ldrh        r2, [sp, #4]
  01b6c	e59f32dc	 ldr         r3, [pc, #0x2DC]
  01b70	e5933038	 ldr         r3, [r3, #0x38]
  01b74	e0832002	 add         r2, r3, r2
  01b78	e59f32d0	 ldr         r3, [pc, #0x2D0]
  01b7c	e1d330b4	 ldrh        r3, [r3, #4]
  01b80	e0822003	 add         r2, r2, r3
  01b84	e59f32d0	 ldr         r3, [pc, #0x2D0]
  01b88	e5933000	 ldr         r3, [r3]
  01b8c	e1530002	 cmp         r3, r2
  01b90	0a000036	 beq         |$LN6@FileIoRead|

; 418  :                         {
; 419  :                             FatBufferSectorNumber = FilesysInfo.partition_start + FatSectorNumber + FilesysInfo.BiosParameterBlock.reserved_sectors;

  01b94	e1dd20b4	 ldrh        r2, [sp, #4]
  01b98	e59f32b0	 ldr         r3, [pc, #0x2B0]
  01b9c	e5933038	 ldr         r3, [r3, #0x38]
  01ba0	e0832002	 add         r2, r3, r2
  01ba4	e59f32a4	 ldr         r3, [pc, #0x2A4]
  01ba8	e1d330b4	 ldrh        r3, [r3, #4]
  01bac	e0822003	 add         r2, r2, r3
  01bb0	e59f32a4	 ldr         r3, [pc, #0x2A4]
  01bb4	e5832000	 str         r2, [r3]

; 420  :                             if (pfileio_ops->read_sector(pfileio_ops->drive_info, FatBufferSectorNumber + ExtendedPartionBaseSector, FatBuffer) != ATA_STATUS_OK)

  01bb8	e59f2298	 ldr         r2, [pc, #0x298]
  01bbc	e59f3298	 ldr         r3, [pc, #0x298]
  01bc0	e5931000	 ldr         r1, [r3]
  01bc4	e59f3280	 ldr         r3, [pc, #0x280]
  01bc8	e5933000	 ldr         r3, [r3]
  01bcc	e0811003	 add         r1, r1, r3
  01bd0	e59d3064	 ldr         r3, [sp, #0x64]
  01bd4	e2833010	 add         r3, r3, #0x10
  01bd8	e5930000	 ldr         r0, [r3]
  01bdc	e59d3064	 ldr         r3, [sp, #0x64]
  01be0	e2833008	 add         r3, r3, #8
  01be4	e5933000	 ldr         r3, [r3]
  01be8	e1a0e00f	 mov         lr, pc
  01bec	e12fff13	 bx          r3
  01bf0	e58d0044	 str         r0, [sp, #0x44]
  01bf4	e59d3044	 ldr         r3, [sp, #0x44]
  01bf8	e3530000	 cmp         r3, #0
  01bfc	0a00001b	 beq         |$LN5@FileIoRead|

; 421  :                             {
; 422  :                                 #if BOOTLOADER_DEBUG_DISPLAY_ERRORS
; 423  :                                     OALMSG(OAL_INFO, 
; 424  :                                         (L"BOOTLOADER: FileIoReadNextSectors failed reading FAT: LBA 0x%x (cluster 0x%x, sector 0x%x)\r\n",
; 425  :                                         FatBufferSectorNumber + ExtendedPartionBaseSector, 
; 426  :                                         pFile->current_cluster, 
; 427  :                                         pFile->current_sector_in_cluster)
; 428  :                                           );

  01c00	e59f324c	 ldr         r3, [pc, #0x24C]
  01c04	e5933440	 ldr         r3, [r3, #0x440]
  01c08	e3130008	 tst         r3, #8
  01c0c	0a00000f	 beq         |$LN58@FileIoRead|
  01c10	e59d3068	 ldr         r3, [sp, #0x68]
  01c14	e283301c	 add         r3, r3, #0x1C
  01c18	e1d330b0	 ldrh        r3, [r3]
  01c1c	e59d2068	 ldr         r2, [sp, #0x68]
  01c20	e2822018	 add         r2, r2, #0x18
  01c24	e5922000	 ldr         r2, [r2]
  01c28	e59f122c	 ldr         r1, [pc, #0x22C]
  01c2c	e5910000	 ldr         r0, [r1]
  01c30	e59f1214	 ldr         r1, [pc, #0x214]
  01c34	e5911000	 ldr         r1, [r1]
  01c38	e0801001	 add         r1, r0, r1
  01c3c	e59f021c	 ldr         r0, [pc, #0x21C]
  01c40	eb000000	 bl          NKDbgPrintfW
  01c44	e3a03001	 mov         r3, #1
  01c48	e58d3048	 str         r3, [sp, #0x48]
  01c4c	ea000001	 b           |$LN59@FileIoRead|
  01c50		 |$LN58@FileIoRead|
  01c50	e3a03000	 mov         r3, #0
  01c54	e58d3048	 str         r3, [sp, #0x48]
  01c58		 |$LN59@FileIoRead|

; 429  :                                 #endif
; 430  :                                 FatBufferSectorNumber = 0;

  01c58	e59f21fc	 ldr         r2, [pc, #0x1FC]
  01c5c	e3a03000	 mov         r3, #0
  01c60	e5823000	 str         r3, [r2]

; 431  :                                 return FILEIO_STATUS_READ_FAILED;

  01c64	e3a03003	 mov         r3, #3
  01c68	e58d3014	 str         r3, [sp, #0x14]
  01c6c	ea000071	 b           |$LN46@FileIoRead|
  01c70		 |$LN5@FileIoRead|
  01c70		 |$LN6@FileIoRead|

; 432  :                             }
; 433  :                         }
; 434  :                         //  update current fat index
; 435  :                         pFile->current_cluster = (*(((UINT32 *)FatBuffer) + (FatOffsetInSector/4))) & FAT32_CLUSTER_MASK;

  01c70	e1dd31b0	 ldrh        r3, [sp, #0x10]
  01c74	e1a01003	 mov         r1, r3
  01c78	e3a00004	 mov         r0, #4
  01c7c	eb000000	 bl          __rt_sdiv
  01c80	e3a03004	 mov         r3, #4
  01c84	e0020390	 mul         r2, r0, r3
  01c88	e59f31c8	 ldr         r3, [pc, #0x1C8]
  01c8c	e0833002	 add         r3, r3, r2
  01c90	e5932000	 ldr         r2, [r3]
  01c94	e3e0320f	 mvn         r3, #0xF, 4
  01c98	e0022003	 and         r2, r2, r3
  01c9c	e59d3068	 ldr         r3, [sp, #0x68]
  01ca0	e2833018	 add         r3, r3, #0x18
  01ca4	e5832000	 str         r2, [r3]

; 436  :                     #else
; 437  :                         // read sector containing next fat entry, FatSectorNumber is an
; 438  :                         // offset from the start of the partition + reserved area
; 439  :                         if (pfileio_ops->read_sector(pfileio_ops->drive_info, 
; 440  :                                                      (FilesysInfo.partition_start + FatSectorNumber + 
; 441  :                                                       FilesysInfo.BiosParameterBlock.reserved_sectors) + 
; 442  :                                                       ExtendedPartionBaseSector, 
; 443  :                                                      pBuffer
; 444  :                                                     )
; 445  :                                        != ATA_STATUS_OK
; 446  :                            )
; 447  :                         {
; 448  :                             #if BOOTLOADER_DEBUG_DISPLAY_ERRORS
; 449  :                                 OALMSG(OAL_INFO, (L"BOOTLOADER: read_sector %u (FAT) failed\r\n", 
; 450  :                                          (FilesysInfo.partition_start + FatSectorNumber + 
; 451  :                                           FilesysInfo.BiosParameterBlock.reserved_sectors) + 
; 452  :                                           ExtendedPartionBaseSector)
; 453  :                                       );
; 454  :                             #endif
; 455  :                             return FILEIO_STATUS_READ_FAILED;
; 456  :                         }
; 457  : 
; 458  :                         //  update current fat index
; 459  :                         pFile->current_cluster = *(((UINT32 *)pBuffer) + (FatOffsetInSector/4)) & FAT32_CLUSTER_MASK;
; 460  :                     #endif
; 461  :                     //  reset current_sector_in_cluster
; 462  :                     pFile->current_sector_in_cluster = 0;

  01ca8	e59d3068	 ldr         r3, [sp, #0x68]
  01cac	e283201c	 add         r2, r3, #0x1C
  01cb0	e3a03000	 mov         r3, #0
  01cb4	e1c230b0	 strh        r3, [r2]

; 463  : 
; 464  :                     if (pFile->current_cluster >= FAT32_CLUSTER_LAST_START)

  01cb8	e59d3068	 ldr         r3, [sp, #0x68]
  01cbc	e2833018	 add         r3, r3, #0x18
  01cc0	e5933000	 ldr         r3, [r3]
  01cc4	e373028f	 cmn         r3, #0x8F, 4
  01cc8	3a000004	 bcc         |$LN4@FileIoRead|

; 465  :                     {
; 466  :                         // no more clusters, signal end of file or directory
; 467  :                         pFile->current_sector_in_cluster = CURRENT_SECTOR_EOF_VALUE;

  01ccc	e59d3068	 ldr         r3, [sp, #0x68]
  01cd0	e283201c	 add         r2, r3, #0x1C
  01cd4	e3a03cff	 mov         r3, #0xFF, 24
  01cd8	e38330ff	 orr         r3, r3, #0xFF
  01cdc	e1c230b0	 strh        r3, [r2]
  01ce0		 |$LN4@FileIoRead|
  01ce0		 |$LN7@FileIoRead|
  01ce0		 |$LN29@FileIoRead|
  01ce0		 |$LN31@FileIoRead|

; 468  :                     }
; 469  :                 }
; 470  :                 break;
; 471  :             #endif
; 472  :         }
; 473  :     }
; 474  : 
; 475  :     if (numSectors > 1)

  01ce0	e1dd37b0	 ldrh        r3, [sp, #0x70]
  01ce4	e3530001	 cmp         r3, #1
  01ce8	da000014	 ble         |$LN3@FileIoRead|

; 476  :     {
; 477  :         status = pfileio_ops->read_multi_sectors(
; 478  :                              pfileio_ops->drive_info, 
; 479  :                              (FilesysInfo.partition_start + SectorNumber) + 
; 480  :                                  ExtendedPartionBaseSector, 
; 481  :                              pBuffer,
; 482  :                              numSectors);

  01cec	e1dd37b0	 ldrh        r3, [sp, #0x70]
  01cf0	e59d206c	 ldr         r2, [sp, #0x6C]
  01cf4	e59f1154	 ldr         r1, [pc, #0x154]
  01cf8	e5910038	 ldr         r0, [r1, #0x38]
  01cfc	e59d1008	 ldr         r1, [sp, #8]
  01d00	e0800001	 add         r0, r0, r1
  01d04	e59f1140	 ldr         r1, [pc, #0x140]
  01d08	e5911000	 ldr         r1, [r1]
  01d0c	e0801001	 add         r1, r0, r1
  01d10	e59d0064	 ldr         r0, [sp, #0x64]
  01d14	e2800010	 add         r0, r0, #0x10
  01d18	e5900000	 ldr         r0, [r0]
  01d1c	e59de064	 ldr         lr, [sp, #0x64]
  01d20	e28ee00c	 add         lr, lr, #0xC
  01d24	e59e4000	 ldr         r4, [lr]
  01d28	e1a0e00f	 mov         lr, pc
  01d2c	e12fff14	 bx          r4
  01d30	e58d004c	 str         r0, [sp, #0x4C]
  01d34	e59d304c	 ldr         r3, [sp, #0x4C]
  01d38	e58d300c	 str         r3, [sp, #0xC]

; 483  :     }
; 484  :     else

  01d3c	ea000012	 b           |$LN2@FileIoRead|
  01d40		 |$LN3@FileIoRead|

; 485  :     {
; 486  :         status = pfileio_ops->read_sector(
; 487  :                              pfileio_ops->drive_info, 
; 488  :                              (FilesysInfo.partition_start + SectorNumber) + 
; 489  :                                  ExtendedPartionBaseSector, 
; 490  :                              pBuffer);

  01d40	e59d206c	 ldr         r2, [sp, #0x6C]
  01d44	e59f3104	 ldr         r3, [pc, #0x104]
  01d48	e5931038	 ldr         r1, [r3, #0x38]
  01d4c	e59d3008	 ldr         r3, [sp, #8]
  01d50	e0811003	 add         r1, r1, r3
  01d54	e59f30f0	 ldr         r3, [pc, #0xF0]
  01d58	e5933000	 ldr         r3, [r3]
  01d5c	e0811003	 add         r1, r1, r3
  01d60	e59d3064	 ldr         r3, [sp, #0x64]
  01d64	e2833010	 add         r3, r3, #0x10
  01d68	e5930000	 ldr         r0, [r3]
  01d6c	e59d3064	 ldr         r3, [sp, #0x64]
  01d70	e2833008	 add         r3, r3, #8
  01d74	e5933000	 ldr         r3, [r3]
  01d78	e1a0e00f	 mov         lr, pc
  01d7c	e12fff13	 bx          r3
  01d80	e58d0050	 str         r0, [sp, #0x50]
  01d84	e59d3050	 ldr         r3, [sp, #0x50]
  01d88	e58d300c	 str         r3, [sp, #0xC]
  01d8c		 |$LN2@FileIoRead|

; 491  :     }
; 492  : 
; 493  :     // read the requested sector
; 494  :     if (status != ATA_STATUS_OK)

  01d8c	e59d300c	 ldr         r3, [sp, #0xC]
  01d90	e3530000	 cmp         r3, #0
  01d94	0a00001d	 beq         |$LN1@FileIoRead|

; 495  :     {
; 496  :         #if BOOTLOADER_DEBUG_DISPLAY_ERRORS
; 497  :             OALMSG(OAL_INFO, 
; 498  :               (L"BL: FileIoReadNextSectors failed reading: LBA 0x%x, cluster 0x%x, sec in cluster 0x%x, num sec %d\r\n", 
; 499  :                (FilesysInfo.partition_start + SectorNumber) + ExtendedPartionBaseSector, 
; 500  :                pFile->current_cluster - 2, 
; 501  :                pFile->current_sector_in_cluster,
; 502  :                numSectors
; 503  :               ));

  01d98	e59f30b4	 ldr         r3, [pc, #0xB4]
  01d9c	e5933440	 ldr         r3, [r3, #0x440]
  01da0	e3130008	 tst         r3, #8
  01da4	0a000014	 beq         |$LN60@FileIoRead|
  01da8	e1dd37b0	 ldrh        r3, [sp, #0x70]
  01dac	e58d3000	 str         r3, [sp]
  01db0	e59d3068	 ldr         r3, [sp, #0x68]
  01db4	e283301c	 add         r3, r3, #0x1C
  01db8	e1d330b0	 ldrh        r3, [r3]
  01dbc	e59d2068	 ldr         r2, [sp, #0x68]
  01dc0	e2822018	 add         r2, r2, #0x18
  01dc4	e5922000	 ldr         r2, [r2]
  01dc8	e2422002	 sub         r2, r2, #2
  01dcc	e59f107c	 ldr         r1, [pc, #0x7C]
  01dd0	e5910038	 ldr         r0, [r1, #0x38]
  01dd4	e59d1008	 ldr         r1, [sp, #8]
  01dd8	e0800001	 add         r0, r0, r1
  01ddc	e59f1068	 ldr         r1, [pc, #0x68]
  01de0	e5911000	 ldr         r1, [r1]
  01de4	e0801001	 add         r1, r0, r1
  01de8	e59f0058	 ldr         r0, [pc, #0x58]
  01dec	eb000000	 bl          NKDbgPrintfW
  01df0	e3a03001	 mov         r3, #1
  01df4	e58d3054	 str         r3, [sp, #0x54]
  01df8	ea000001	 b           |$LN61@FileIoRead|
  01dfc		 |$LN60@FileIoRead|
  01dfc	e3a03000	 mov         r3, #0
  01e00	e58d3054	 str         r3, [sp, #0x54]
  01e04		 |$LN61@FileIoRead|

; 504  :         #endif
; 505  :         return FILEIO_STATUS_READ_FAILED;

  01e04	e3a03003	 mov         r3, #3
  01e08	e58d3014	 str         r3, [sp, #0x14]
  01e0c	ea000009	 b           |$LN46@FileIoRead|
  01e10		 |$LN1@FileIoRead|

; 506  :     }
; 507  : 
; 508  :     // update sector count
; 509  :     pFile->current_sector += numSectors;

  01e10	e59d3068	 ldr         r3, [sp, #0x68]
  01e14	e2833014	 add         r3, r3, #0x14
  01e18	e1dd27b0	 ldrh        r2, [sp, #0x70]
  01e1c	e5933000	 ldr         r3, [r3]
  01e20	e0832002	 add         r2, r3, r2
  01e24	e59d3068	 ldr         r3, [sp, #0x68]
  01e28	e2833014	 add         r3, r3, #0x14
  01e2c	e5832000	 str         r2, [r3]

; 510  :     
; 511  :     return FILEIO_STATUS_OK;

  01e30	e3a03000	 mov         r3, #0
  01e34	e58d3014	 str         r3, [sp, #0x14]
  01e38		 |$LN46@FileIoRead|

; 512  : } // FileIoReadNextSectors  

  01e38	e59d0014	 ldr         r0, [sp, #0x14]
  01e3c	e28dd058	 add         sp, sp, #0x58
  01e40	e89d6010	 ldmia       sp, {r4, sp, lr}
  01e44	e12fff1e	 bx          lr
  01e48		 |$LN65@FileIoRead|
  01e48		 |$LN66@FileIoRead|
  01e48	00000000	 DCD         |??_C@_1MI@EPEPDNAK@?$AAB?$AAL?$AA?3?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAI?$AAo?$AAR?$AAe?$AAa?$AAd?$AAN?$AAe?$AAx?$AAt?$AAS?$AAe?$AAc?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd@|
  01e4c		 |$LN67@FileIoRead|
  01e4c	00000000	 DCD         |ExtendedPartionBaseSector|
  01e50		 |$LN68@FileIoRead|
  01e50	00000000	 DCD         |FilesysInfo|
  01e54		 |$LN69@FileIoRead|
  01e54	00000000	 DCD         |dpCurSettings|
  01e58		 |$LN70@FileIoRead|
  01e58	00000000	 DCD         |FatBuffer|
  01e5c		 |$LN71@FileIoRead|
  01e5c	00000000	 DCD         |FatBufferSectorNumber|
  01e60		 |$LN72@FileIoRead|
  01e60	00000000	 DCD         |??_C@_1LK@LIJDAIGO@?$AAB?$AAO?$AAO?$AAT?$AAL?$AAO?$AAA?$AAD?$AAE?$AAR?$AA?3?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAI?$AAo?$AAR?$AAe?$AAa?$AAd?$AAN?$AAe?$AAx?$AAt?$AAS?$AAe?$AAc?$AAt?$AAo?$AAr@|
  01e64		 |$LN73@FileIoRead|
  01e64	00000000	 DCD         |??_C@_1FE@HICFHJJI@?$AAB?$AAO?$AAO?$AAT?$AAL?$AAO?$AAA?$AAD?$AAE?$AAR?$AA?3?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA_?$AAs?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AA?$CF?$AAu?$AA?5?$AA?$CI?$AAF?$AAA?$AAT?$AA?$CJ@|
  01e68		 |$LN74@FileIoRead|
  01e68	00000000	 DCD         |??_C@_1IO@PGHKICBM@?$AAB?$AAO?$AAO?$AAT?$AAL?$AAO?$AAA?$AAD?$AAE?$AAR?$AA?3?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAI?$AAo?$AAR?$AAe?$AAa?$AAd?$AAN?$AAe?$AAx?$AAt?$AAS?$AAe?$AAc?$AAt?$AAo?$AAr@|
  01e6c		 |$LN75@FileIoRead|
  01e6c	00000000	 DCD         |??_C@_1JE@KBLAIMOL@?$AAB?$AAO?$AAO?$AAT?$AAL?$AAO?$AAA?$AAD?$AAE?$AAR?$AA?3?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAI?$AAo?$AAR?$AAe?$AAa?$AAd?$AAN?$AAe?$AAx?$AAt?$AAS?$AAe?$AAc?$AAt?$AAo?$AAr@|
  01e70		 |$M43626|

			 ENDP  ; |FileIoReadNextSectors|

	EXPORT	|FileIoRead|

  00030			 AREA	 |.pdata|, PDATA
|$T43645| DCD	|$LN17@FileIoRead@2|
	DCD	0x40009904
; Function compile flags: /Odtp

  01e70			 AREA	 |.text|, CODE, ARM

  01e70		 |FileIoRead| PROC

; 1080 : {

  01e70		 |$LN17@FileIoRead@2|
  01e70	e1a0c00d	 mov         r12, sp
  01e74	e92d000f	 stmdb       sp!, {r0 - r3}
  01e78	e92d5000	 stmdb       sp!, {r12, lr}
  01e7c	e24dd01c	 sub         sp, sp, #0x1C
  01e80		 |$M43642|

; 1081 :     int status;
; 1082 :     UINT8 * s;
; 1083 :     UINT32 numSectorsToRead = 0;

  01e80	e3a03000	 mov         r3, #0
  01e84	e58d3008	 str         r3, [sp, #8]
  01e88		 |$LN12@FileIoRead@2|

; 1084 :             
; 1085 :     while (Count)

  01e88	e59d3030	 ldr         r3, [sp, #0x30]
  01e8c	e3530000	 cmp         r3, #0
  01e90	0a000088	 beq         |$LN11@FileIoRead@2|

; 1086 :     {
; 1087 :         // create pointer to start of valid data in buffer
; 1088 :         s = pFile->buffer + (SECTOR_SIZE - pFile->bytes_in_buffer); 

  01e94	e59d3028	 ldr         r3, [sp, #0x28]
  01e98	e2832024	 add         r2, r3, #0x24
  01e9c	e59d3028	 ldr         r3, [sp, #0x28]
  01ea0	e2833020	 add         r3, r3, #0x20
  01ea4	e5933000	 ldr         r3, [r3]
  01ea8	e2633c02	 rsb         r3, r3, #2, 24
  01eac	e0823003	 add         r3, r2, r3
  01eb0	e58d3000	 str         r3, [sp]
  01eb4		 |$LN10@FileIoRead@2|

; 1089 :             // 512 + (512 - pFile->bytes_in_buffer)
; 1090 : 
; 1091 :         // if any bytes are in the buffer copy them to destination
; 1092 :         while (Count && pFile->bytes_in_buffer)

  01eb4	e59d3030	 ldr         r3, [sp, #0x30]
  01eb8	e3530000	 cmp         r3, #0
  01ebc	0a000019	 beq         |$LN9@FileIoRead@2|
  01ec0	e59d3028	 ldr         r3, [sp, #0x28]
  01ec4	e2833020	 add         r3, r3, #0x20
  01ec8	e5933000	 ldr         r3, [r3]
  01ecc	e3530000	 cmp         r3, #0
  01ed0	0a000014	 beq         |$LN9@FileIoRead@2|

; 1093 :         {
; 1094 :             *pDest = *s;

  01ed4	e59d3000	 ldr         r3, [sp]
  01ed8	e5d32000	 ldrb        r2, [r3]
  01edc	e59d302c	 ldr         r3, [sp, #0x2C]
  01ee0	e5c32000	 strb        r2, [r3]

; 1095 :              pDest++;

  01ee4	e59d302c	 ldr         r3, [sp, #0x2C]
  01ee8	e2833001	 add         r3, r3, #1
  01eec	e58d302c	 str         r3, [sp, #0x2C]

; 1096 :              s++;

  01ef0	e59d3000	 ldr         r3, [sp]
  01ef4	e2833001	 add         r3, r3, #1
  01ef8	e58d3000	 str         r3, [sp]

; 1097 :              Count--;

  01efc	e59d3030	 ldr         r3, [sp, #0x30]
  01f00	e2433001	 sub         r3, r3, #1
  01f04	e58d3030	 str         r3, [sp, #0x30]

; 1098 :              pFile->bytes_in_buffer--;

  01f08	e59d3028	 ldr         r3, [sp, #0x28]
  01f0c	e2833020	 add         r3, r3, #0x20
  01f10	e5933000	 ldr         r3, [r3]
  01f14	e2432001	 sub         r2, r3, #1
  01f18	e59d3028	 ldr         r3, [sp, #0x28]
  01f1c	e2833020	 add         r3, r3, #0x20
  01f20	e5832000	 str         r2, [r3]

; 1099 :         }

  01f24	eaffffe2	 b           |$LN10@FileIoRead@2|
  01f28		 |$LN9@FileIoRead@2|
  01f28		 |$LN8@FileIoRead@2|

; 1100 : 
; 1101 :         // Note: After the above while loop, the read is sector aligned
; 1102 : 
; 1103 :         // if Count is at least one sector size then read sector directly into caller's buffer
; 1104 :         while (Count >= SECTOR_SIZE)

  01f28	e59d3030	 ldr         r3, [sp, #0x30]
  01f2c	e3530c02	 cmp         r3, #2, 24
  01f30	3a000049	 bcc         |$LN7@FileIoRead@2|

; 1105 :         {
; 1106 :             if (Count < 2*SECTOR_SIZE)

  01f34	e59d3030	 ldr         r3, [sp, #0x30]
  01f38	e3530b01	 cmp         r3, #1, 22
  01f3c	2a000014	 bcs         |$LN6@FileIoRead@2|

; 1107 :             {
; 1108 :                 // can only read SINGLE sector
; 1109 :                 if ((status = FileIoReadNextSectors(pfileio_ops, pFile, pDest, 1)) != FILEIO_STATUS_OK)

  01f40	e3a03001	 mov         r3, #1
  01f44	e59d202c	 ldr         r2, [sp, #0x2C]
  01f48	e59d1028	 ldr         r1, [sp, #0x28]
  01f4c	e59d0024	 ldr         r0, [sp, #0x24]
  01f50	eb000000	 bl          FileIoReadNextSectors
  01f54	e58d0010	 str         r0, [sp, #0x10]
  01f58	e59d3010	 ldr         r3, [sp, #0x10]
  01f5c	e58d3004	 str         r3, [sp, #4]
  01f60	e59d3004	 ldr         r3, [sp, #4]
  01f64	e3530000	 cmp         r3, #0
  01f68	0a000002	 beq         |$LN5@FileIoRead@2|

; 1110 :                     return status;

  01f6c	e59d3004	 ldr         r3, [sp, #4]
  01f70	e58d300c	 str         r3, [sp, #0xC]
  01f74	ea000051	 b           |$LN13@FileIoRead@2|
  01f78		 |$LN5@FileIoRead@2|

; 1111 :     
; 1112 :                 pDest += SECTOR_SIZE;

  01f78	e59d302c	 ldr         r3, [sp, #0x2C]
  01f7c	e2833c02	 add         r3, r3, #2, 24
  01f80	e58d302c	 str         r3, [sp, #0x2C]

; 1113 :                 Count -= SECTOR_SIZE;

  01f84	e59d3030	 ldr         r3, [sp, #0x30]
  01f88	e2433c02	 sub         r3, r3, #2, 24
  01f8c	e58d3030	 str         r3, [sp, #0x30]

; 1114 :     
; 1115 :                 break;

  01f90	ea000031	 b           |$LN7@FileIoRead@2|
  01f94		 |$LN6@FileIoRead@2|

; 1116 :             }
; 1117 : 
; 1118 :             // Condition for multi sector read is met 
; 1119 :             // read sectors in the cluster
; 1120 :             numSectorsToRead = Count/SECTOR_SIZE;  // number of sectors to read

  01f94	e59d1030	 ldr         r1, [sp, #0x30]
  01f98	e3a00c02	 mov         r0, #2, 24
  01f9c	eb000000	 bl          __rt_udiv
  01fa0	e58d0008	 str         r0, [sp, #8]

; 1121 : 
; 1122 :             // make sure numSectorsToRead is within the current cluster's limit
; 1123 :             // number of sectors remain in cluster to be read
; 1124 :             if (numSectorsToRead + pFile->current_sector_in_cluster > FilesysInfo.BiosParameterBlock.sectors_per_cluster)

  01fa4	e59d3028	 ldr         r3, [sp, #0x28]
  01fa8	e283301c	 add         r3, r3, #0x1C
  01fac	e1d320b0	 ldrh        r2, [r3]
  01fb0	e59d3008	 ldr         r3, [sp, #8]
  01fb4	e0832002	 add         r2, r3, r2
  01fb8	e59f3110	 ldr         r3, [pc, #0x110]
  01fbc	e5d33002	 ldrb        r3, [r3, #2]
  01fc0	e1520003	 cmp         r2, r3
  01fc4	9a000007	 bls         |$LN4@FileIoRead@2|

; 1125 :             {
; 1126 :                 // TODO: what if this is the last cluster of the file.
; 1127 :                 //       in that case, the cluster may be partially filled.
; 1128 :                 //Read all the remaining sectors in the cluster
; 1129 :                 numSectorsToRead = (FilesysInfo.BiosParameterBlock.sectors_per_cluster - pFile->current_sector_in_cluster);

  01fc8	e59f3100	 ldr         r3, [pc, #0x100]
  01fcc	e5d33002	 ldrb        r3, [r3, #2]
  01fd0	e1a02003	 mov         r2, r3
  01fd4	e59d3028	 ldr         r3, [sp, #0x28]
  01fd8	e283301c	 add         r3, r3, #0x1C
  01fdc	e1d330b0	 ldrh        r3, [r3]
  01fe0	e0423003	 sub         r3, r2, r3
  01fe4	e58d3008	 str         r3, [sp, #8]
  01fe8		 |$LN4@FileIoRead@2|

; 1130 :             }
; 1131 : 
; 1132 :             status = FileIoReadNextSectors(pfileio_ops, pFile, pDest, (UINT16)numSectorsToRead);

  01fe8	e59d3008	 ldr         r3, [sp, #8]
  01fec	e1a03803	 mov         r3, r3, lsl #16
  01ff0	e1a03823	 mov         r3, r3, lsr #16
  01ff4	e59d202c	 ldr         r2, [sp, #0x2C]
  01ff8	e59d1028	 ldr         r1, [sp, #0x28]
  01ffc	e59d0024	 ldr         r0, [sp, #0x24]
  02000	eb000000	 bl          FileIoReadNextSectors
  02004	e58d0014	 str         r0, [sp, #0x14]
  02008	e59d3014	 ldr         r3, [sp, #0x14]
  0200c	e58d3004	 str         r3, [sp, #4]

; 1133 :             if (status != FILEIO_STATUS_OK)

  02010	e59d3004	 ldr         r3, [sp, #4]
  02014	e3530000	 cmp         r3, #0
  02018	0a000002	 beq         |$LN3@FileIoRead@2|

; 1134 :                 return status;

  0201c	e59d3004	 ldr         r3, [sp, #4]
  02020	e58d300c	 str         r3, [sp, #0xC]
  02024	ea000025	 b           |$LN13@FileIoRead@2|
  02028		 |$LN3@FileIoRead@2|

; 1135 : 
; 1136 :             pDest += (SECTOR_SIZE * numSectorsToRead);

  02028	e59d1008	 ldr         r1, [sp, #8]
  0202c	e3a03c02	 mov         r3, #2, 24
  02030	e0020391	 mul         r2, r1, r3
  02034	e59d302c	 ldr         r3, [sp, #0x2C]
  02038	e0833002	 add         r3, r3, r2
  0203c	e58d302c	 str         r3, [sp, #0x2C]

; 1137 :             Count -= (SECTOR_SIZE * numSectorsToRead);

  02040	e59d1008	 ldr         r1, [sp, #8]
  02044	e3a03c02	 mov         r3, #2, 24
  02048	e0020391	 mul         r2, r1, r3
  0204c	e59d3030	 ldr         r3, [sp, #0x30]
  02050	e0433002	 sub         r3, r3, r2
  02054	e58d3030	 str         r3, [sp, #0x30]

; 1138 :         }

  02058	eaffffb2	 b           |$LN8@FileIoRead@2|
  0205c		 |$LN7@FileIoRead@2|

; 1139 : 
; 1140 :         // if Count is not zero, read a sector into the file structure sector buffer
; 1141 :         if (Count)

  0205c	e59d3030	 ldr         r3, [sp, #0x30]
  02060	e3530000	 cmp         r3, #0
  02064	0a000012	 beq         |$LN2@FileIoRead@2|

; 1142 :         {
; 1143 :             if ((status = FileIoReadNextSectors(pfileio_ops, pFile, pFile->buffer, 1)) != FILEIO_STATUS_OK)

  02068	e3a03001	 mov         r3, #1
  0206c	e59d2028	 ldr         r2, [sp, #0x28]
  02070	e2822024	 add         r2, r2, #0x24
  02074	e59d1028	 ldr         r1, [sp, #0x28]
  02078	e59d0024	 ldr         r0, [sp, #0x24]
  0207c	eb000000	 bl          FileIoReadNextSectors
  02080	e58d0018	 str         r0, [sp, #0x18]
  02084	e59d3018	 ldr         r3, [sp, #0x18]
  02088	e58d3004	 str         r3, [sp, #4]
  0208c	e59d3004	 ldr         r3, [sp, #4]
  02090	e3530000	 cmp         r3, #0
  02094	0a000002	 beq         |$LN1@FileIoRead@2|

; 1144 :                 return status;

  02098	e59d3004	 ldr         r3, [sp, #4]
  0209c	e58d300c	 str         r3, [sp, #0xC]
  020a0	ea000006	 b           |$LN13@FileIoRead@2|
  020a4		 |$LN1@FileIoRead@2|

; 1145 :             pFile->bytes_in_buffer = SECTOR_SIZE;

  020a4	e59d3028	 ldr         r3, [sp, #0x28]
  020a8	e2832020	 add         r2, r3, #0x20
  020ac	e3a03c02	 mov         r3, #2, 24
  020b0	e5823000	 str         r3, [r2]
  020b4		 |$LN2@FileIoRead@2|

; 1146 :         }
; 1147 :     }

  020b4	eaffff73	 b           |$LN12@FileIoRead@2|
  020b8		 |$LN11@FileIoRead@2|

; 1148 :     return FILEIO_STATUS_OK;

  020b8	e3a03000	 mov         r3, #0
  020bc	e58d300c	 str         r3, [sp, #0xC]
  020c0		 |$LN13@FileIoRead@2|

; 1149 : }

  020c0	e59d000c	 ldr         r0, [sp, #0xC]
  020c4	e28dd01c	 add         sp, sp, #0x1C
  020c8	e89d6000	 ldmia       sp, {sp, lr}
  020cc	e12fff1e	 bx          lr
  020d0		 |$LN18@FileIoRead@2|
  020d0		 |$LN19@FileIoRead@2|
  020d0	00000000	 DCD         |FilesysInfo|
  020d4		 |$M43643|

			 ENDP  ; |FileIoRead|

	END
