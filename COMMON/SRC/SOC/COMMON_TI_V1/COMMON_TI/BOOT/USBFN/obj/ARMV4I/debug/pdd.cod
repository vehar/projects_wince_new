; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\BOOT\USBFN\pdd.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.data|, DATA
	 COMMON	|dpCurSettings|, 0x444

	 COMMON	|g_usbfnpdd|, 0x180


  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|DumpUSBRegisters|
	EXPORT	|??_C@_1DA@DEOJCLGI@?$AAO?$AAT?$AAG?$AA_?$AAR?$AAe?$AAv?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DA@CHHHKPND@?$AAO?$AAT?$AAG?$AA_?$AAF?$AAO?$AAR?$AAC?$AAE?$AAS?$AAT?$AAD?$AAB?$AAY?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DA@OENGJMCI@?$AAO?$AAT?$AAG?$AA_?$AAI?$AAN?$AAT?$AAE?$AAR?$AAF?$AAS?$AAE?$AAL?$AA?5?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DA@GEBFFKAL@?$AAO?$AAT?$AAG?$AA_?$AAS?$AAY?$AAS?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA?5?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DA@CABDIMAB@?$AAO?$AAT?$AAG?$AA_?$AAS?$AAY?$AAS?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA?5?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DA@DMGANBPN@?$AAO?$AAT?$AAG?$AA_?$AAS?$AAI?$AAM?$AAE?$AAN?$AAA?$AAB?$AAL?$AAE?$AA?5?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DA@IOAOHBNJ@?$AAF?$AAA?$AAd?$AAd?$AAr?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DA@EGGCJLAM@?$AAD?$AAe?$AAv?$AAC?$AAt?$AAl?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DA@LNNNDCLE@?$AAI?$AAn?$AAt?$AAr?$AAR?$AAx?$AAE?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DA@OIKEFDKE@?$AAI?$AAn?$AAt?$AAr?$AAT?$AAx?$AAE?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DA@DKPCLIME@?$AAI?$AAn?$AAt?$AAr?$AAU?$AAS?$AAB?$AAE?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DA@BEKHFDOA@?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DA@DDJNBFOK@?$AAR?$AAx?$AAF?$AAI?$AAF?$AAO?$AAs?$AAz?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DA@CGHLAJLF@?$AAR?$AAx?$AAF?$AAI?$AAF?$AAO?$AAa?$AAd?$AAd?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DA@LODJHPCC@?$AAT?$AAx?$AAF?$AAI?$AAF?$AAO?$AAs?$AAz?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DA@KLNPGDHN@?$AAT?$AAx?$AAF?$AAI?$AAF?$AAO?$AAa?$AAd?$AAd?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|NKDbgPrintfW|

  00000			 AREA	 |.pdata|, PDATA
|$T46958| DCD	|$LN5@DumpUSBReg|
	DCD	0x40004501
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\boot\usbfn\pdd.c

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@DEOJCLGI@?$AAO?$AAT?$AAG?$AA_?$AAR?$AAe?$AAv?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "O"
	DCB	0x0, "T", 0x0, "G", 0x0, "_", 0x0, "R", 0x0, "e", 0x0, "v"
	DCB	0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@CHHHKPND@?$AAO?$AAT?$AAG?$AA_?$AAF?$AAO?$AAR?$AAC?$AAE?$AAS?$AAT?$AAD?$AAB?$AAY?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "O"
	DCB	0x0, "T", 0x0, "G", 0x0, "_", 0x0, "F", 0x0, "O", 0x0, "R"
	DCB	0x0, "C", 0x0, "E", 0x0, "S", 0x0, "T", 0x0, "D", 0x0, "B"
	DCB	0x0, "Y", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@OENGJMCI@?$AAO?$AAT?$AAG?$AA_?$AAI?$AAN?$AAT?$AAE?$AAR?$AAF?$AAS?$AAE?$AAL?$AA?5?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "O"
	DCB	0x0, "T", 0x0, "G", 0x0, "_", 0x0, "I", 0x0, "N", 0x0, "T"
	DCB	0x0, "E", 0x0, "R", 0x0, "F", 0x0, "S", 0x0, "E", 0x0, "L"
	DCB	0x0, " ", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@GEBFFKAL@?$AAO?$AAT?$AAG?$AA_?$AAS?$AAY?$AAS?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA?5?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "O"
	DCB	0x0, "T", 0x0, "G", 0x0, "_", 0x0, "S", 0x0, "Y", 0x0, "S"
	DCB	0x0, "C", 0x0, "O", 0x0, "N", 0x0, "F", 0x0, "I", 0x0, "G"
	DCB	0x0, " ", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@CABDIMAB@?$AAO?$AAT?$AAG?$AA_?$AAS?$AAY?$AAS?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA?5?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "O"
	DCB	0x0, "T", 0x0, "G", 0x0, "_", 0x0, "S", 0x0, "Y", 0x0, "S"
	DCB	0x0, "S", 0x0, "T", 0x0, "A", 0x0, "T", 0x0, "U", 0x0, "S"
	DCB	0x0, " ", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@DMGANBPN@?$AAO?$AAT?$AAG?$AA_?$AAS?$AAI?$AAM?$AAE?$AAN?$AAA?$AAB?$AAL?$AAE?$AA?5?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "O"
	DCB	0x0, "T", 0x0, "G", 0x0, "_", 0x0, "S", 0x0, "I", 0x0, "M"
	DCB	0x0, "E", 0x0, "N", 0x0, "A", 0x0, "B", 0x0, "L", 0x0, "E"
	DCB	0x0, " ", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@IOAOHBNJ@?$AAF?$AAA?$AAd?$AAd?$AAr?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "F"
	DCB	0x0, "A", 0x0, "d", 0x0, "d", 0x0, "r", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@EGGCJLAM@?$AAD?$AAe?$AAv?$AAC?$AAt?$AAl?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "D"
	DCB	0x0, "e", 0x0, "v", 0x0, "C", 0x0, "t", 0x0, "l", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@LNNNDCLE@?$AAI?$AAn?$AAt?$AAr?$AAR?$AAx?$AAE?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "I"
	DCB	0x0, "n", 0x0, "t", 0x0, "r", 0x0, "R", 0x0, "x", 0x0, "E"
	DCB	0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@OIKEFDKE@?$AAI?$AAn?$AAt?$AAr?$AAT?$AAx?$AAE?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "I"
	DCB	0x0, "n", 0x0, "t", 0x0, "r", 0x0, "T", 0x0, "x", 0x0, "E"
	DCB	0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@DKPCLIME@?$AAI?$AAn?$AAt?$AAr?$AAU?$AAS?$AAB?$AAE?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "I"
	DCB	0x0, "n", 0x0, "t", 0x0, "r", 0x0, "U", 0x0, "S", 0x0, "B"
	DCB	0x0, "E", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@BEKHFDOA@?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "P"
	DCB	0x0, "o", 0x0, "w", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@DDJNBFOK@?$AAR?$AAx?$AAF?$AAI?$AAF?$AAO?$AAs?$AAz?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "R"
	DCB	0x0, "x", 0x0, "F", 0x0, "I", 0x0, "F", 0x0, "O", 0x0, "s"
	DCB	0x0, "z", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@CGHLAJLF@?$AAR?$AAx?$AAF?$AAI?$AAF?$AAO?$AAa?$AAd?$AAd?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "R"
	DCB	0x0, "x", 0x0, "F", 0x0, "I", 0x0, "F", 0x0, "O", 0x0, "a"
	DCB	0x0, "d", 0x0, "d", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@LODJHPCC@?$AAT?$AAx?$AAF?$AAI?$AAF?$AAO?$AAs?$AAz?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "T"
	DCB	0x0, "x", 0x0, "F", 0x0, "I", 0x0, "F", 0x0, "O", 0x0, "s"
	DCB	0x0, "z", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@KLNPGDHN@?$AAT?$AAx?$AAF?$AAI?$AAF?$AAO?$AAa?$AAd?$AAd?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "T"
	DCB	0x0, "x", 0x0, "F", 0x0, "I", 0x0, "F", 0x0, "O", 0x0, "a"
	DCB	0x0, "d", 0x0, "d", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DumpUSBRegisters| PROC

; 145  : {

  00000		 |$LN5@DumpUSBReg|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M46955|
  00004	e1a05001	 mov         r5, r1
  00008	e1a04000	 mov         r4, r0

; 146  : 	UNREFERENCED_PARAMETER(pOtg);
; 147  : 	UNREFERENCED_PARAMETER(pGen);
; 148  : 
; 149  : 	OALMSG(TRUE, (TEXT("OTG_Rev        = 0x%x\r\n"), INREG32(&pOtg->OTG_Rev)));

  0000c	e5941000	 ldr         r1, [r4]
  00010	e59f00f8	 ldr         r0, [pc, #0xF8]
  00014	eb000000	 bl          NKDbgPrintfW

; 150  : 	OALMSG(TRUE, (TEXT("OTG_FORCESTDBY = 0x%x\r\n"), INREG32(&pOtg->OTG_FORCESTDBY)));

  00018	e5941014	 ldr         r1, [r4, #0x14]
  0001c	e59f00e8	 ldr         r0, [pc, #0xE8]
  00020	eb000000	 bl          NKDbgPrintfW

; 151  : 	OALMSG(TRUE, (TEXT("OTG_INTERFSEL  = 0x%x\r\n"), INREG32(&pOtg->OTG_INTERFSEL)));

  00024	e594100c	 ldr         r1, [r4, #0xC]
  00028	e59f00d8	 ldr         r0, [pc, #0xD8]
  0002c	eb000000	 bl          NKDbgPrintfW

; 152  : 	OALMSG(TRUE, (TEXT("OTG_SYSCONFIG  = 0x%x\r\n"), INREG32(&pOtg->OTG_SYSCONFIG)));

  00030	e5941004	 ldr         r1, [r4, #4]
  00034	e59f00c8	 ldr         r0, [pc, #0xC8]
  00038	eb000000	 bl          NKDbgPrintfW

; 153  : 	OALMSG(TRUE, (TEXT("OTG_SYSSTATUS  = 0x%x\r\n"), INREG32(&pOtg->OTG_SYSSTATUS)));

  0003c	e5941008	 ldr         r1, [r4, #8]
  00040	e59f00b8	 ldr         r0, [pc, #0xB8]
  00044	eb000000	 bl          NKDbgPrintfW

; 154  : 	OALMSG(TRUE, (TEXT("OTG_SIMENABLE  = 0x%x\r\n"), INREG32(&pOtg->OTG_SIMENABLE)));

  00048	e5941010	 ldr         r1, [r4, #0x10]
  0004c	e59f00a8	 ldr         r0, [pc, #0xA8]
  00050	eb000000	 bl          NKDbgPrintfW

; 155  : 	OALMSG(TRUE, (TEXT("FAddr          = 0x%x\r\n"), INREG8(&pGen->FAddr)));

  00054	e5d51000	 ldrb        r1, [r5]
  00058	e59f0098	 ldr         r0, [pc, #0x98]
  0005c	eb000000	 bl          NKDbgPrintfW

; 156  : 	OALMSG(TRUE, (TEXT("DevCtl         = 0x%x\r\n"), INREG8(&pGen->DevCtl)));

  00060	e5d51060	 ldrb        r1, [r5, #0x60]
  00064	e59f0088	 ldr         r0, [pc, #0x88]
  00068	eb000000	 bl          NKDbgPrintfW

; 157  : 	OALMSG(TRUE, (TEXT("IntrRxE        = 0x%x\r\n"), INREG16(&pGen->IntrRxE)));

  0006c	e1d510b8	 ldrh        r1, [r5, #8]
  00070	e59f0078	 ldr         r0, [pc, #0x78]
  00074	eb000000	 bl          NKDbgPrintfW

; 158  : 	OALMSG(TRUE, (TEXT("IntrTxE        = 0x%x\r\n"), INREG16(&pGen->IntrTxE)));

  00078	e1d510b6	 ldrh        r1, [r5, #6]
  0007c	e59f0068	 ldr         r0, [pc, #0x68]
  00080	eb000000	 bl          NKDbgPrintfW

; 159  : 	OALMSG(TRUE, (TEXT("IntrUSBE       = 0x%x\r\n"), INREG8(&pGen->IntrUSBE)));

  00084	e5d5100b	 ldrb        r1, [r5, #0xB]
  00088	e59f0058	 ldr         r0, [pc, #0x58]
  0008c	eb000000	 bl          NKDbgPrintfW

; 160  : 	OALMSG(TRUE, (TEXT("Power          = 0x%x\r\n"), INREG8(&pGen->Power)));

  00090	e5d51001	 ldrb        r1, [r5, #1]
  00094	e59f0048	 ldr         r0, [pc, #0x48]
  00098	eb000000	 bl          NKDbgPrintfW

; 161  : 	OALMSG(TRUE, (TEXT("RxFIFOsz       = 0x%x\r\n"), INREG8(&pGen->RxFIFOsz)));

  0009c	e5d51063	 ldrb        r1, [r5, #0x63]
  000a0	e59f0038	 ldr         r0, [pc, #0x38]
  000a4	eb000000	 bl          NKDbgPrintfW

; 162  : 	OALMSG(TRUE, (TEXT("RxFIFOadd      = 0x%x\r\n"), INREG16(&pGen->RxFIFOadd)));

  000a8	e1d516b6	 ldrh        r1, [r5, #0x66]
  000ac	e59f0028	 ldr         r0, [pc, #0x28]
  000b0	eb000000	 bl          NKDbgPrintfW

; 163  : 	OALMSG(TRUE, (TEXT("TxFIFOsz       = 0x%x\r\n"), INREG8(&pGen->TxFIFOsz)));

  000b4	e5d51062	 ldrb        r1, [r5, #0x62]
  000b8	e59f0018	 ldr         r0, [pc, #0x18]
  000bc	eb000000	 bl          NKDbgPrintfW

; 164  : 	OALMSG(TRUE, (TEXT("TxFIFOadd      = 0x%x\r\n"), INREG16(&pGen->TxFIFOadd)));

  000c0	e1d516b4	 ldrh        r1, [r5, #0x64]
  000c4	e59f0008	 ldr         r0, [pc, #8]
  000c8	eb000000	 bl          NKDbgPrintfW

; 165  : }

  000cc	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  000d0	e12fff1e	 bx          lr
  000d4		 |$LN6@DumpUSBReg|
  000d4		 |$LN7@DumpUSBReg|
  000d4	00000000	 DCD         |??_C@_1DA@KLNPGDHN@?$AAT?$AAx?$AAF?$AAI?$AAF?$AAO?$AAa?$AAd?$AAd?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  000d8		 |$LN8@DumpUSBReg|
  000d8	00000000	 DCD         |??_C@_1DA@LODJHPCC@?$AAT?$AAx?$AAF?$AAI?$AAF?$AAO?$AAs?$AAz?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  000dc		 |$LN9@DumpUSBReg|
  000dc	00000000	 DCD         |??_C@_1DA@CGHLAJLF@?$AAR?$AAx?$AAF?$AAI?$AAF?$AAO?$AAa?$AAd?$AAd?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  000e0		 |$LN10@DumpUSBReg|
  000e0	00000000	 DCD         |??_C@_1DA@DDJNBFOK@?$AAR?$AAx?$AAF?$AAI?$AAF?$AAO?$AAs?$AAz?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  000e4		 |$LN11@DumpUSBReg|
  000e4	00000000	 DCD         |??_C@_1DA@BEKHFDOA@?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  000e8		 |$LN12@DumpUSBReg|
  000e8	00000000	 DCD         |??_C@_1DA@DKPCLIME@?$AAI?$AAn?$AAt?$AAr?$AAU?$AAS?$AAB?$AAE?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  000ec		 |$LN13@DumpUSBReg|
  000ec	00000000	 DCD         |??_C@_1DA@OIKEFDKE@?$AAI?$AAn?$AAt?$AAr?$AAT?$AAx?$AAE?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  000f0		 |$LN14@DumpUSBReg|
  000f0	00000000	 DCD         |??_C@_1DA@LNNNDCLE@?$AAI?$AAn?$AAt?$AAr?$AAR?$AAx?$AAE?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  000f4		 |$LN15@DumpUSBReg|
  000f4	00000000	 DCD         |??_C@_1DA@EGGCJLAM@?$AAD?$AAe?$AAv?$AAC?$AAt?$AAl?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  000f8		 |$LN16@DumpUSBReg|
  000f8	00000000	 DCD         |??_C@_1DA@IOAOHBNJ@?$AAF?$AAA?$AAd?$AAd?$AAr?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  000fc		 |$LN17@DumpUSBReg|
  000fc	00000000	 DCD         |??_C@_1DA@DMGANBPN@?$AAO?$AAT?$AAG?$AA_?$AAS?$AAI?$AAM?$AAE?$AAN?$AAA?$AAB?$AAL?$AAE?$AA?5?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  00100		 |$LN18@DumpUSBReg|
  00100	00000000	 DCD         |??_C@_1DA@CABDIMAB@?$AAO?$AAT?$AAG?$AA_?$AAS?$AAY?$AAS?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA?5?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  00104		 |$LN19@DumpUSBReg|
  00104	00000000	 DCD         |??_C@_1DA@GEBFFKAL@?$AAO?$AAT?$AAG?$AA_?$AAS?$AAY?$AAS?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA?5?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  00108		 |$LN20@DumpUSBReg|
  00108	00000000	 DCD         |??_C@_1DA@OENGJMCI@?$AAO?$AAT?$AAG?$AA_?$AAI?$AAN?$AAT?$AAE?$AAR?$AAF?$AAS?$AAE?$AAL?$AA?5?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  0010c		 |$LN21@DumpUSBReg|
  0010c	00000000	 DCD         |??_C@_1DA@CHHHKPND@?$AAO?$AAT?$AAG?$AA_?$AAF?$AAO?$AAR?$AAC?$AAE?$AAS?$AAT?$AAD?$AAB?$AAY?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  00110		 |$LN22@DumpUSBReg|
  00110	00000000	 DCD         |??_C@_1DA@DEOJCLGI@?$AAO?$AAT?$AAG?$AA_?$AAR?$AAe?$AAv?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  00114		 |$M46956|

			 ENDP  ; |DumpUSBRegisters|

	EXPORT	|ReadFIFO|
	EXPORT	|??_C@_1CK@CPIFLPMI@?$AAu?$AAn?$AAa?$AAl?$AAi?$AAg?$AAn?$AAe?$AAd?$AA?5?$AAr?$AAe?$AAa?$AAd?$AAf?$AAi?$AAf?$AAo?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00008			 AREA	 |.pdata|, PDATA
|$T47002| DCD	|$LN24@ReadFIFO|
	DCD	0x40002a01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CK@CPIFLPMI@?$AAu?$AAn?$AAa?$AAl?$AAi?$AAg?$AAn?$AAe?$AAd?$AA?5?$AAr?$AAe?$AAa?$AAd?$AAf?$AAi?$AAf?$AAo?$AA?$AN?$AA?6?$AA?$AA@| DCB "u"
	DCB	0x0, "n", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "g", 0x0, "n"
	DCB	0x0, "e", 0x0, "d", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "a"
	DCB	0x0, "d", 0x0, "f", 0x0, "i", 0x0, "f", 0x0, "o", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Ogtp

  00114			 AREA	 |.text|, CODE, ARM

  00114		 |ReadFIFO| PROC

; 169  : {

  00114		 |$LN24@ReadFIFO|
  00114	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00118		 |$M46999|
  00118	e1a04002	 mov         r4, r2

; 170  :     DWORD total  = size / 4;
; 171  :     DWORD remain = size % 4;
; 172  :     DWORD i		 = 0;
; 173  :     PCSP_MUSB_GEN_REGS pGenRegs = pPdd->pUsbGenRegs;
; 174  :     
; 175  :     DWORD* pDword = (DWORD*)pData;
; 176  :     DWORD* pFifoBase = (DWORD*) &pGenRegs->fifo[endpoint];

  0011c	e5900010	 ldr         r0, [r0, #0x10]

; 177  : 
; 178  :     volatile ULONG *pReg = (volatile ULONG*)pFifoBase;

  00120	e2811008	 add         r1, r1, #8
  00124	e1a05123	 mov         r5, r3, lsr #2
  00128	e0807101	 add         r7, r0, r1, lsl #2
  0012c	e2036003	 and         r6, r3, #3

; 179  : 
; 180  :     if (((DWORD)pDword) & 0x1)

  00130	e3140001	 tst         r4, #1
  00134	0a00000f	 beq         |$LN11@ReadFIFO|

; 181  :     {
; 182  :         __unaligned DWORD* pUnalignedDword = (DWORD*)pDword;
; 183  :         RETAILMSG(1,(TEXT("unaligned readfifo\r\n")));

  00138	e59f0078	 ldr         r0, [pc, #0x78]
  0013c	eb000000	 bl          NKDbgPrintfW

; 184  :         // this is NOT 16-bit aligned
; 185  :         for (i = 0; i < total; i++)

  00140	e3550000	 cmp         r5, #0
  00144	0a000011	 beq         |$LN4@ReadFIFO|
  00148		 |$LL10@ReadFIFO|

; 186  :         {
; 187  :             *pUnalignedDword++ = INREG32(pReg);

  00148	e5970000	 ldr         r0, [r7]
  0014c	e2555001	 subs        r5, r5, #1
  00150	e1a03420	 mov         r3, r0, lsr #8
  00154	e1a02820	 mov         r2, r0, lsr #16
  00158	e1a01c20	 mov         r1, r0, lsr #24
  0015c	e5c43001	 strb        r3, [r4, #1]
  00160	e5c42002	 strb        r2, [r4, #2]
  00164	e5c41003	 strb        r1, [r4, #3]
  00168	e5c40000	 strb        r0, [r4]
  0016c	e2844004	 add         r4, r4, #4
  00170	1afffff4	 bne         |$LL10@ReadFIFO|

; 188  :         }
; 189  : #pragma warning(push)
; 190  : #pragma warning(disable:4090)
; 191  :         pDword = pUnalignedDword;
; 192  : #pragma warning(pop)
; 193  :     }
; 194  :     else

  00174	ea000005	 b           |$LN4@ReadFIFO|
  00178		 |$LN11@ReadFIFO|

; 195  :     {
; 196  :         // this is 16-bit aligned. 32 bits access are allowed
; 197  :         for (i = 0; i < total; i++)

  00178	e3550000	 cmp         r5, #0
  0017c	0a000003	 beq         |$LN4@ReadFIFO|
  00180		 |$LL6@ReadFIFO|

; 198  :         {
; 199  :             *pDword++ = INREG32(pReg);

  00180	e5973000	 ldr         r3, [r7]
  00184	e2555001	 subs        r5, r5, #1
  00188	e4843004	 str         r3, [r4], #4
  0018c	1afffffb	 bne         |$LL6@ReadFIFO|
  00190		 |$LN4@ReadFIFO|

; 200  :         }        
; 201  :     }
; 202  : 
; 203  :     // Set the pByte equal to the last bytes of data being transferred
; 204  :     if (remain != 0)

  00190	e3560000	 cmp         r6, #0
  00194	0a000004	 beq         |$LN21@ReadFIFO|

; 205  :     {
; 206  :         UCHAR* pUCHAR = (UCHAR*) pDword;
; 207  :         DWORD dwTemp = INREG32(pReg);

  00198	e5973000	 ldr         r3, [r7]
  0019c		 |$LL2@ReadFIFO|

; 208  :         
; 209  :         while (remain--)
; 210  :         {
; 211  :             *pUCHAR++ = (UCHAR) (dwTemp & 0xFF);

  0019c	e4c43001	 strb        r3, [r4], #1

; 212  :             dwTemp>>=8;

  001a0	e1a03423	 mov         r3, r3, lsr #8
  001a4	e2566001	 subs        r6, r6, #1
  001a8	1afffffb	 bne         |$LL2@ReadFIFO|
  001ac		 |$LN21@ReadFIFO|

; 213  :         }
; 214  :     }
; 215  : /*
; 216  :     RETAILMSG(1,(TEXT("Read fifo\r\n")));
; 217  :     memdump((UCHAR*)pData,(USHORT)size,0);
; 218  :     RETAILMSG(1,(TEXT("\r\n")));
; 219  : */
; 220  :     return TRUE;

  001ac	e3a00001	 mov         r0, #1

; 221  : }

  001b0	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  001b4	e12fff1e	 bx          lr
  001b8		 |$LN25@ReadFIFO|
  001b8		 |$LN26@ReadFIFO|
  001b8	00000000	 DCD         |??_C@_1CK@CPIFLPMI@?$AAu?$AAn?$AAa?$AAl?$AAi?$AAg?$AAn?$AAe?$AAd?$AA?5?$AAr?$AAe?$AAa?$AAd?$AAf?$AAi?$AAf?$AAo?$AA?$AN?$AA?6?$AA?$AA@|
  001bc		 |$M47000|

			 ENDP  ; |ReadFIFO|

	EXPORT	|WriteFIFO|
	EXPORT	|??_C@_1BK@BIFEAHLP@?$AA?9?$AAW?$AAr?$AAi?$AAt?$AAe?$AAF?$AAI?$AAF?$AAO?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DC@GIDDBHNC@?$AA?$CL?$AAW?$AAr?$AAi?$AAt?$AAe?$AAF?$AAI?$AAF?$AAO?$AA?3?$AA?5?$AAs?$AAi?$AAz?$AAe?$AA?$CI?$AA0?$AAx?$AA?$CF?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00010			 AREA	 |.pdata|, PDATA
|$T47032| DCD	|$LN29@WriteFIFO|
	DCD	0x40003901

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BK@BIFEAHLP@?$AA?9?$AAW?$AAr?$AAi?$AAt?$AAe?$AAF?$AAI?$AAF?$AAO?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "W", 0x0, "r", 0x0, "i", 0x0, "t", 0x0, "e", 0x0, "F"
	DCB	0x0, "I", 0x0, "F", 0x0, "O", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DC@GIDDBHNC@?$AA?$CL?$AAW?$AAr?$AAi?$AAt?$AAe?$AAF?$AAI?$AAF?$AAO?$AA?3?$AA?5?$AAs?$AAi?$AAz?$AAe?$AA?$CI?$AA0?$AAx?$AA?$CF?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "W", 0x0, "r", 0x0, "i", 0x0, "t", 0x0, "e", 0x0, "F"
	DCB	0x0, "I", 0x0, "F", 0x0, "O", 0x0, ":", 0x0, " ", 0x0, "s"
	DCB	0x0, "i", 0x0, "z", 0x0, "e", 0x0, "(", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "x", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Ogtp

  001bc			 AREA	 |.text|, CODE, ARM

  001bc		 |WriteFIFO| PROC

; 225  : {

  001bc		 |$LN29@WriteFIFO|
  001bc	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  001c0		 |$M47029|
  001c0	e1a04003	 mov         r4, r3
  001c4	e1a05002	 mov         r5, r2
  001c8	e1a07001	 mov         r7, r1

; 226  :     PCSP_MUSB_GEN_REGS pGenRegs = pPdd->pUsbGenRegs;
; 227  :     DWORD totalTx;
; 228  :     DWORD i;
; 229  :     BOOL rc = TRUE;
; 230  :     
; 231  :     OALMSG(OAL_ETHER&&OAL_FUNC, (TEXT("+WriteFIFO: size(0x%x)\r\n"), size));

  001cc	e59f60c8	 ldr         r6, [pc, #0xC8]
  001d0	e5908010	 ldr         r8, [r0, #0x10]
  001d4	e5960440	 ldr         r0, [r6, #0x440]
  001d8	e3100a02	 tst         r0, #2, 20
  001dc	0a000004	 beq         |$LN15@WriteFIFO|
  001e0	e3100004	 tst         r0, #4
  001e4	0a000002	 beq         |$LN15@WriteFIFO|
  001e8	e59f00a8	 ldr         r0, [pc, #0xA8]
  001ec	e1a01004	 mov         r1, r4
  001f0	eb000000	 bl          NKDbgPrintfW
  001f4		 |$LN15@WriteFIFO|

; 232  : 
; 233  :     // Zero-length data transferred
; 234  :     if (size == 0)

  001f4	e3540000	 cmp         r4, #0
  001f8	0a00001d	 beq         |$ErrorReturn$45841|

; 235  :         goto ErrorReturn;
; 236  : 
; 237  :     // Note - transfers to/from FIFO must have consistent width to maintain
; 238  :     // alignment.  The last few writes can be smaller to account for remaining bytes.
; 239  :     // NOTE - pointers passed to this function are not guaranteed to be aligned!
; 240  :     
; 241  :     // Write DWORDs if possible
; 242  :     if (((UINT32)pData & 0x3) == 0)

  001fc	e3150003	 tst         r5, #3
  00200	1a000008	 bne         |$LN8@WriteFIFO|

; 243  :     {
; 244  :         totalTx = size / 4;

  00204	e1b02124	 movs        r2, r4, lsr #2

; 245  :         for (i=0; i<totalTx; i++)

  00208	0a000006	 beq         |$LN8@WriteFIFO|
  0020c	e2873008	 add         r3, r7, #8
  00210	e0881103	 add         r1, r8, r3, lsl #2
  00214		 |$LL10@WriteFIFO|

; 246  :         {
; 247  :             OUTREG32(&pGenRegs->fifo[endpoint], (*(UINT32*)pData));        

  00214	e4953004	 ldr         r3, [r5], #4

; 248  :             ((UINT32*)pData)++;
; 249  :             size -= 4;

  00218	e2444004	 sub         r4, r4, #4
  0021c	e2522001	 subs        r2, r2, #1
  00220	e5813000	 str         r3, [r1]
  00224	1afffffa	 bne         |$LL10@WriteFIFO|
  00228		 |$LN8@WriteFIFO|

; 250  :         }
; 251  :     }
; 252  :     
; 253  :     // Write WORDS if possible
; 254  :     if (((UINT32)pData & 0x1) == 0)

  00228	e3150001	 tst         r5, #1
  0022c	1a000008	 bne         |$LN4@WriteFIFO|

; 255  :     {
; 256  :         totalTx = size / 2;

  00230	e1b020a4	 movs        r2, r4, lsr #1

; 257  :         for (i=0; i<totalTx; i++)

  00234	0a000006	 beq         |$LN4@WriteFIFO|
  00238	e2873008	 add         r3, r7, #8
  0023c	e0881103	 add         r1, r8, r3, lsl #2
  00240		 |$LL6@WriteFIFO|

; 258  :         {
; 259  :             OUTREG16(&pGenRegs->fifo[endpoint], (*(UINT16*)pData));        

  00240	e0d530b2	 ldrh        r3, [r5], #2

; 260  :             ((UINT16*)pData)++;
; 261  :             size -= 2;

  00244	e2444002	 sub         r4, r4, #2
  00248	e2522001	 subs        r2, r2, #1
  0024c	e1c130b0	 strh        r3, [r1]
  00250	1afffffa	 bne         |$LL6@WriteFIFO|
  00254		 |$LN4@WriteFIFO|

; 262  :         }
; 263  :     }
; 264  :     
; 265  :     // Write remaining bytes
; 266  :     totalTx = size;
; 267  :     for (i=0; i<totalTx; i++)

  00254	e3540000	 cmp         r4, #0
  00258	0a000005	 beq         |$ErrorReturn$45841|
  0025c	e2873008	 add         r3, r7, #8
  00260	e0882103	 add         r2, r8, r3, lsl #2
  00264		 |$LL3@WriteFIFO|

; 268  :     {
; 269  :         OUTREG8(&pGenRegs->fifo[endpoint], (*(UINT8*)pData));        

  00264	e4d53001	 ldrb        r3, [r5], #1
  00268	e2544001	 subs        r4, r4, #1
  0026c	e5c23000	 strb        r3, [r2]
  00270	1afffffb	 bne         |$LL3@WriteFIFO|
  00274		 |$ErrorReturn$45841|

; 226  :     PCSP_MUSB_GEN_REGS pGenRegs = pPdd->pUsbGenRegs;
; 227  :     DWORD totalTx;
; 228  :     DWORD i;
; 229  :     BOOL rc = TRUE;
; 230  :     
; 231  :     OALMSG(OAL_ETHER&&OAL_FUNC, (TEXT("+WriteFIFO: size(0x%x)\r\n"), size));

  00274	e5963440	 ldr         r3, [r6, #0x440]

; 270  :         ((UINT8*)pData)++;
; 271  :         size -= 1;
; 272  :     }
; 273  : 
; 274  : ErrorReturn:
; 275  :     OALMSG(OAL_ETHER&&OAL_FUNC, (TEXT("-WriteFIFO\r\n")));

  00278	e3130a02	 tst         r3, #2, 20
  0027c	13130004	 tstne       r3, #4
  00280	159f000c	 ldrne       r0, [pc, #0xC]
  00284	1b000000	 blne        NKDbgPrintfW

; 276  :     return rc;       

  00288	e3a00001	 mov         r0, #1

; 277  : }

  0028c	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  00290	e12fff1e	 bx          lr
  00294		 |$LN30@WriteFIFO|
  00294		 |$LN31@WriteFIFO|
  00294	00000000	 DCD         |??_C@_1BK@BIFEAHLP@?$AA?9?$AAW?$AAr?$AAi?$AAt?$AAe?$AAF?$AAI?$AAF?$AAO?$AA?$AN?$AA?6?$AA?$AA@|
  00298		 |$LN32@WriteFIFO|
  00298	00000000	 DCD         |??_C@_1DC@GIDDBHNC@?$AA?$CL?$AAW?$AAr?$AAi?$AAt?$AAe?$AAF?$AAI?$AAF?$AAO?$AA?3?$AA?5?$AAs?$AAi?$AAz?$AAe?$AA?$CI?$AA0?$AAx?$AA?$CF?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  0029c		 |$LN33@WriteFIFO|
  0029c	00000000	 DCD         |dpCurSettings|
  002a0		 |$M47030|

			 ENDP  ; |WriteFIFO|

	EXPORT	|GetUniqueDeviceID|
	EXPORT	|??_C@_1DG@LHNIEBLN@?$AA?$CL?$AAU?$AAS?$AAB?$AAF?$AAN?$AA?3?$AA?3?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAI?$AAD?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|OALPAtoVA|
	IMPORT	|SOCGetIDCodeAddress|

  00018			 AREA	 |.pdata|, PDATA
|$T47051| DCD	|$LN9@GetUniqueD|
	DCD	0x40001101

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DG@LHNIEBLN@?$AA?$CL?$AAU?$AAS?$AAB?$AAF?$AAN?$AA?3?$AA?3?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAI?$AAD?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "U", 0x0, "S", 0x0, "B", 0x0, "F", 0x0, "N", 0x0, ":"
	DCB	0x0, ":", 0x0, "D", 0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c"
	DCB	0x0, "e", 0x0, " ", 0x0, "I", 0x0, "D", 0x0, " ", 0x0, "="
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Ogtp

  002a0			 AREA	 |.text|, CODE, ARM

  002a0		 |GetUniqueDeviceID| PROC

; 602  : {

  002a0		 |$LN9@GetUniqueD|
  002a0	e52de004	 str         lr, [sp, #-4]!
  002a4		 |$M47048|

; 603  :     DWORD code;
; 604  :     DWORD *pDieId = (DWORD *)OALPAtoUA(SOCGetIDCodeAddress());

  002a4	eb000000	 bl          SOCGetIDCodeAddress
  002a8	e3a01000	 mov         r1, #0
  002ac	eb000000	 bl          OALPAtoVA

; 605  : 
; 606  :     // Create unique part of name from SoC ID
; 607  :     code  = INREG32(pDieId);
; 608  : 
; 609  :     OALMSG(OAL_ETHER&&OAL_FUNC, (L"+USBFN::Device ID = 0x%x\r\n", code));

  002b0	e59f3028	 ldr         r3, [pc, #0x28]
  002b4	e5901000	 ldr         r1, [r0]
  002b8	e5933440	 ldr         r3, [r3, #0x440]
  002bc	e3130a02	 tst         r3, #2, 20
  002c0	13130004	 tstne       r3, #4
  002c4	159f0010	 ldrne       r0, [pc, #0x10]
  002c8	1b000000	 blne        NKDbgPrintfW

; 610  : 
; 611  :     return 0x0B5D902F;  // hardcoded id

  002cc	e59f0004	 ldr         r0, [pc, #4]

; 612  : }

  002d0	e49de004	 ldr         lr, [sp], #4
  002d4	e12fff1e	 bx          lr
  002d8		 |$LN10@GetUniqueD|
  002d8		 |$LN11@GetUniqueD|
  002d8	0b5d902f	 DCD         0xb5d902f
  002dc		 |$LN12@GetUniqueD|
  002dc	00000000	 DCD         |??_C@_1DG@LHNIEBLN@?$AA?$CL?$AAU?$AAS?$AAB?$AAF?$AAN?$AA?3?$AA?3?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAI?$AAD?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  002e0		 |$LN13@GetUniqueD|
  002e0	00000000	 DCD         |dpCurSettings|
  002e4		 |$M47049|

			 ENDP  ; |GetUniqueDeviceID|

	EXPORT	|Device_Disconnect|
	EXPORT	|??_C@_1CI@LOFKLMPA@?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA_?$AAD?$AAi?$AAs?$AAc?$AAo?$AAn?$AAn?$AAe?$AAc?$AAt?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00020			 AREA	 |.pdata|, PDATA
|$T47065| DCD	|$LN7@Device_Dis|
	DCD	0x40001601

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@LOFKLMPA@?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA_?$AAD?$AAi?$AAs?$AAc?$AAo?$AAn?$AAn?$AAe?$AAc?$AAt?$AA?$AN?$AA?6?$AA?$AA@| DCB "D"
	DCB	0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "_"
	DCB	0x0, "D", 0x0, "i", 0x0, "s", 0x0, "c", 0x0, "o", 0x0, "n"
	DCB	0x0, "n", 0x0, "e", 0x0, "c", 0x0, "t", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Ogtp

  002e4			 AREA	 |.text|, CODE, ARM

  002e4		 |Device_Disconnect| PROC

; 631  : {

  002e4		 |$LN7@Device_Dis|
  002e4	e92d4010	 stmdb       sp!, {r4, lr}
  002e8		 |$M47062|
  002e8	e1a04000	 mov         r4, r0

; 632  :     OALMSG(OAL_ETHER&&OAL_FUNC, (L"Device_Disconnect\r\n"));

  002ec	e59f3044	 ldr         r3, [pc, #0x44]
  002f0	e5933440	 ldr         r3, [r3, #0x440]
  002f4	e3130a02	 tst         r3, #2, 20
  002f8	13130004	 tstne       r3, #4
  002fc	159f0030	 ldrne       r0, [pc, #0x30]
  00300	1b000000	 blne        NKDbgPrintfW

; 633  : 
; 634  :     // We are not configured anymore
; 635  :     // Let MDD process change
; 636  :     pPdd->pfnNotify(pPdd->pMddContext, UFN_MSG_BUS_EVENTS, UFN_DETACH);

  00304	e5940000	 ldr         r0, [r4]
  00308	e5943004	 ldr         r3, [r4, #4]
  0030c	e3a02000	 mov         r2, #0
  00310	e3a01001	 mov         r1, #1
  00314	e1a0e00f	 mov         lr, pc
  00318	e12fff13	 bx          r3

; 637  :     pPdd->devState &= ~MUSB_DEVSTAT_ATT;

  0031c	e5943018	 ldr         r3, [r4, #0x18]

; 638  :     
; 639  :     return ERROR_SUCCESS;

  00320	e3a00000	 mov         r0, #0
  00324	e3c33001	 bic         r3, r3, #1
  00328	e5843018	 str         r3, [r4, #0x18]

; 640  : }

  0032c	e8bd4010	 ldmia       sp!, {r4, lr}
  00330	e12fff1e	 bx          lr
  00334		 |$LN8@Device_Dis|
  00334		 |$LN9@Device_Dis|
  00334	00000000	 DCD         |??_C@_1CI@LOFKLMPA@?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA_?$AAD?$AAi?$AAs?$AAc?$AAo?$AAn?$AAn?$AAe?$AAc?$AAt?$AA?$AN?$AA?6?$AA?$AA@|
  00338		 |$LN10@Device_Dis|
  00338	00000000	 DCD         |dpCurSettings|
  0033c		 |$M47063|

			 ENDP  ; |Device_Disconnect|

	EXPORT	|Device_ResetIRQ|
	EXPORT	|??_C@_1CG@NFOBHLAH@?$AA?9?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA_?$AAR?$AAe?$AAs?$AAe?$AAt?$AAI?$AAR?$AAQ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CA@HBMBLNHB@?$AAB?$AAS?$AA_?$AAF?$AAU?$AAL?$AAL?$AA_?$AAS?$AAP?$AAE?$AAE?$AAD?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CA@BBIAPALJ@?$AAB?$AAS?$AA_?$AAH?$AAI?$AAG?$AAH?$AA_?$AAS?$AAP?$AAE?$AAE?$AAD?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CG@EODBHLMJ@?$AA?$CL?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA_?$AAR?$AAe?$AAs?$AAe?$AAt?$AAI?$AAR?$AAQ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00028			 AREA	 |.pdata|, PDATA
|$T47089| DCD	|$LN19@Device_Res|
	DCD	0x40005201

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CG@NFOBHLAH@?$AA?9?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA_?$AAR?$AAe?$AAs?$AAe?$AAt?$AAI?$AAR?$AAQ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "D", 0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e"
	DCB	0x0, "_", 0x0, "R", 0x0, "e", 0x0, "s", 0x0, "e", 0x0, "t"
	DCB	0x0, "I", 0x0, "R", 0x0, "Q", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CA@HBMBLNHB@?$AAB?$AAS?$AA_?$AAF?$AAU?$AAL?$AAL?$AA_?$AAS?$AAP?$AAE?$AAE?$AAD?$AA?$AN?$AA?6?$AA?$AA@| DCB "B"
	DCB	0x0, "S", 0x0, "_", 0x0, "F", 0x0, "U", 0x0, "L", 0x0, "L"
	DCB	0x0, "_", 0x0, "S", 0x0, "P", 0x0, "E", 0x0, "E", 0x0, "D"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CA@BBIAPALJ@?$AAB?$AAS?$AA_?$AAH?$AAI?$AAG?$AAH?$AA_?$AAS?$AAP?$AAE?$AAE?$AAD?$AA?$AN?$AA?6?$AA?$AA@| DCB "B"
	DCB	0x0, "S", 0x0, "_", 0x0, "H", 0x0, "I", 0x0, "G", 0x0, "H"
	DCB	0x0, "_", 0x0, "S", 0x0, "P", 0x0, "E", 0x0, "E", 0x0, "D"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CG@EODBHLMJ@?$AA?$CL?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA_?$AAR?$AAe?$AAs?$AAe?$AAt?$AAI?$AAR?$AAQ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "D", 0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e"
	DCB	0x0, "_", 0x0, "R", 0x0, "e", 0x0, "s", 0x0, "e", 0x0, "t"
	DCB	0x0, "I", 0x0, "R", 0x0, "Q", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Ogtp

  0033c			 AREA	 |.text|, CODE, ARM

  0033c		 |Device_ResetIRQ| PROC

; 660  : {

  0033c		 |$LN19@Device_Res|
  0033c	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00340		 |$M47086|
  00340	e1a05000	 mov         r5, r0

; 661  :     PCSP_MUSB_GEN_REGS pGenRegs = pPdd->pUsbGenRegs;
; 662  :     
; 663  :     OALMSG(OAL_ETHER&&OAL_FUNC, (TEXT("+Device_ResetIRQ\r\n")));

  00344	e59f6134	 ldr         r6, [pc, #0x134]
  00348	e5957010	 ldr         r7, [r5, #0x10]
  0034c	e5963440	 ldr         r3, [r6, #0x440]
  00350	e3130a02	 tst         r3, #2, 20
  00354	13130004	 tstne       r3, #4
  00358	159f011c	 ldrne       r0, [pc, #0x11C]
  0035c	1b000000	 blne        NKDbgPrintfW

; 664  :     
; 665  :     // initialize Endpoint0 setup state 
; 666  :     pPdd->ep0State = EP0_ST_SETUP;
; 667  :     
; 668  :     pPdd->intr_rx_data_avail = 0;
; 669  :     
; 670  :     if ((pPdd->devState & MUSB_DEVSTAT_ATT) == 0)

  00360	e5953018	 ldr         r3, [r5, #0x18]
  00364	e3a02000	 mov         r2, #0

; 671  :     {
; 672  :         // MUSB doesn't generate an attach interrrupt.  Interpret bus reset event as attach.
; 673  :         pPdd->devState |= MUSB_DEVSTAT_ATT | MUSB_DEVSTAT_USB_RESET;
; 674  :         pPdd->pfnNotify(pPdd->pMddContext, UFN_MSG_BUS_EVENTS, UFN_DETACH);

  00368	e5950000	 ldr         r0, [r5]
  0036c	e3130001	 tst         r3, #1
  00370	e5852178	 str         r2, [r5, #0x178]
  00374	e585217c	 str         r2, [r5, #0x17C]
  00378	e3a01001	 mov         r1, #1
  0037c	1a00002f	 bne         |$LN4@Device_Res|
  00380	e3833021	 orr         r3, r3, #0x21
  00384	e5954004	 ldr         r4, [r5, #4]
  00388	e5853018	 str         r3, [r5, #0x18]
  0038c	e3a02000	 mov         r2, #0
  00390	e1a0e00f	 mov         lr, pc
  00394	e12fff14	 bx          r4

; 675  :         pPdd->pfnNotify(pPdd->pMddContext, UFN_MSG_BUS_EVENTS, UFN_ATTACH);

  00398	e5950000	 ldr         r0, [r5]
  0039c	e5953004	 ldr         r3, [r5, #4]
  003a0	e3a02001	 mov         r2, #1
  003a4	e3a01001	 mov         r1, #1
  003a8	e1a0e00f	 mov         lr, pc
  003ac	e12fff13	 bx          r3

; 676  :         if (INREG8(&pGenRegs->Power) & POWER_HSMODE)

  003b0	e5d73001	 ldrb        r3, [r7, #1]
  003b4	e3130010	 tst         r3, #0x10

; 677  :         {
; 678  : 		    OALMSG(OAL_ETHER, (TEXT("BS_HIGH_SPEED\r\n")));

  003b8	e5963440	 ldr         r3, [r6, #0x440]
  003bc	0a00000f	 beq         |$LN3@Device_Res|
  003c0	e3130a02	 tst         r3, #2, 20
  003c4	159f00ac	 ldrne       r0, [pc, #0xAC]
  003c8	1b000000	 blne        NKDbgPrintfW

; 679  :             pPdd->pfnNotify(pPdd->pMddContext, UFN_MSG_BUS_SPEED, BS_HIGH_SPEED);

  003cc	e5950000	 ldr         r0, [r5]
  003d0	e5953004	 ldr         r3, [r5, #4]
  003d4	e3a02002	 mov         r2, #2
  003d8	e3a01003	 mov         r1, #3
  003dc	e1a0e00f	 mov         lr, pc
  003e0	e12fff13	 bx          r3

; 685  :         }           
; 686  :         // Tell MDD about reset...
; 687  :         pPdd->pfnNotify(pPdd->pMddContext, UFN_MSG_BUS_EVENTS, UFN_RESET);

  003e4	e5950000	 ldr         r0, [r5]
  003e8	e5953004	 ldr         r3, [r5, #4]
  003ec	e3a02002	 mov         r2, #2
  003f0	e3a01001	 mov         r1, #1
  003f4	e1a0e00f	 mov         lr, pc
  003f8	e12fff13	 bx          r3

; 688  :     }
; 689  :     else

  003fc	ea000013	 b           |$LN1@Device_Res|
  00400		 |$LN3@Device_Res|

; 680  :         }
; 681  :         else
; 682  :         {
; 683  : 		    OALMSG(OAL_ETHER, (TEXT("BS_FULL_SPEED\r\n")));

  00400	e3130a02	 tst         r3, #2, 20
  00404	159f0068	 ldrne       r0, [pc, #0x68]
  00408	1b000000	 blne        NKDbgPrintfW

; 684  :             pPdd->pfnNotify(pPdd->pMddContext, UFN_MSG_BUS_SPEED, BS_FULL_SPEED);

  0040c	e5950000	 ldr         r0, [r5]
  00410	e5953004	 ldr         r3, [r5, #4]
  00414	e3a02001	 mov         r2, #1
  00418	e3a01003	 mov         r1, #3
  0041c	e1a0e00f	 mov         lr, pc
  00420	e12fff13	 bx          r3

; 685  :         }           
; 686  :         // Tell MDD about reset...
; 687  :         pPdd->pfnNotify(pPdd->pMddContext, UFN_MSG_BUS_EVENTS, UFN_RESET);

  00424	e5950000	 ldr         r0, [r5]
  00428	e5953004	 ldr         r3, [r5, #4]
  0042c	e3a02002	 mov         r2, #2
  00430	e3a01001	 mov         r1, #1
  00434	e1a0e00f	 mov         lr, pc
  00438	e12fff13	 bx          r3

; 688  :     }
; 689  :     else

  0043c	ea000003	 b           |$LN1@Device_Res|
  00440		 |$LN4@Device_Res|

; 690  :         pPdd->pfnNotify(pPdd->pMddContext, UFN_MSG_BUS_EVENTS, UFN_RESET);

  00440	e5953004	 ldr         r3, [r5, #4]
  00444	e3a02002	 mov         r2, #2
  00448	e1a0e00f	 mov         lr, pc
  0044c	e12fff13	 bx          r3
  00450		 |$LN1@Device_Res|

; 691  : 
; 692  :     OALMSG(OAL_ETHER&&OAL_FUNC, (TEXT("-Device_ResetIRQ\r\n")));

  00450	e5963440	 ldr         r3, [r6, #0x440]
  00454	e3130a02	 tst         r3, #2, 20
  00458	13130004	 tstne       r3, #4
  0045c	159f000c	 ldrne       r0, [pc, #0xC]
  00460	1b000000	 blne        NKDbgPrintfW

; 693  :     return ERROR_SUCCESS;

  00464	e3a00000	 mov         r0, #0

; 694  : }

  00468	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  0046c	e12fff1e	 bx          lr
  00470		 |$LN20@Device_Res|
  00470		 |$LN21@Device_Res|
  00470	00000000	 DCD         |??_C@_1CG@NFOBHLAH@?$AA?9?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA_?$AAR?$AAe?$AAs?$AAe?$AAt?$AAI?$AAR?$AAQ?$AA?$AN?$AA?6?$AA?$AA@|
  00474		 |$LN22@Device_Res|
  00474	00000000	 DCD         |??_C@_1CA@HBMBLNHB@?$AAB?$AAS?$AA_?$AAF?$AAU?$AAL?$AAL?$AA_?$AAS?$AAP?$AAE?$AAE?$AAD?$AA?$AN?$AA?6?$AA?$AA@|
  00478		 |$LN23@Device_Res|
  00478	00000000	 DCD         |??_C@_1CA@BBIAPALJ@?$AAB?$AAS?$AA_?$AAH?$AAI?$AAG?$AAH?$AA_?$AAS?$AAP?$AAE?$AAE?$AAD?$AA?$AN?$AA?6?$AA?$AA@|
  0047c		 |$LN24@Device_Res|
  0047c	00000000	 DCD         |??_C@_1CG@EODBHLMJ@?$AA?$CL?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA_?$AAR?$AAe?$AAs?$AAe?$AAt?$AAI?$AAR?$AAQ?$AA?$AN?$AA?6?$AA?$AA@|
  00480		 |$LN25@Device_Res|
  00480	00000000	 DCD         |dpCurSettings|
  00484		 |$M47087|

			 ENDP  ; |Device_ResetIRQ|

	EXPORT	|Device_ProcessEP0|
	EXPORT	|??_C@_1CK@PHELNBKD@?$AA?9?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA_?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAE?$AAP?$AA0?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BG@BNAGFJMA@?$AAS?$AAT?$AA_?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FA@LBDLDOFO@?$AA2?$AA?4?$AA?5?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA_?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAE?$AAP?$AA0?$AA?5?$AAS?$AAe?$AAt?$AA?5?$AAT?$AAx?$AAP?$AAk?$AAt?$AAR?$AAd@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HE@CCMNMCIH@?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA_?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AA0?$AA?3?$AA?5?$AAf?$AAi?$AAn?$AAa?$AAl?$AA?5?$AAc?$AAo?$AAp?$AAy?$AA?5?$AAN?$AAo?$AAt?$AAi@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IK@IEONPHHN@?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA_?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAE?$AAP?$AA0?$AA?3?$AA?5?$AAE?$AAP?$AA0?$AA_?$AAS?$AAT?$AA_?$AAD?$AAA?$AAT?$AAA?$AA_?$AAT@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HK@JEKPKAL@?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA_?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAE?$AAP?$AA0?$AA?3?$AA?5?$AA?5?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAE?$AAP?$AA0?$AA_?$AAS?$AAT@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GE@CGEACPAE@?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA_?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAE?$AAP?$AA0?$AA?3?$AA?5?$AAE?$AAP?$AA0?$AA_?$AAS?$AAT?$AA_?$AAD?$AAA?$AAT?$AAA?$AA_?$AAR@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HK@NCIOKFCA@?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA_?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAE?$AAP?$AA0?$AA?3?$AA?5?$AA?5?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAE?$AAP?$AA0?$AA_?$AAS?$AAT@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EE@LDJOACEP@?$AAE?$AAP?$AA0?$AA_?$AAS?$AAT?$AA_?$AAS?$AAE?$AAT?$AAU?$AAP?$AA?5?$AAr?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AAs?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EA@FFLGMHM@?$AAE?$AAP?$AA0?$AA_?$AAS?$AAT?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAI?$AAN?$AA?5?$AA?$DN?$AA?$DO?$AA?5?$AAE?$AAP?$AA0?$AA?5?$AAS?$AAE?$AAT?$AAU?$AAP?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BM@CMOKIKNH@?$AAC?$AAS?$AAR?$AA0?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CA@HLDCJJFC@?$AAS?$AAe?$AAt?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BG@GEGFJNAH@?$AAS?$AAe?$AAt?$AAu?$AAp?$AAE?$AAn?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BA@CNFNHGLF@?$AAS?$AAt?$AAa?$AAl?$AAl?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GK@GDOLHGDC@?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AAr?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AA?5?$AAw?$AAi?$AAt?$AAh?$AA?5?$AAC?$AAS?$AAR?$AA0?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CK@IHDMMHEF@?$AA?$CL?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA_?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAE?$AAP?$AA0?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00030			 AREA	 |.pdata|, PDATA
|$T47170| DCD	|$LN78@Device_Pro|
	DCD	0x40012402

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CK@PHELNBKD@?$AA?9?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA_?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAE?$AAP?$AA0?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "D", 0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e"
	DCB	0x0, "_", 0x0, "P", 0x0, "r", 0x0, "o", 0x0, "c", 0x0, "e"
	DCB	0x0, "s", 0x0, "s", 0x0, "E", 0x0, "P", 0x0, "0", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BG@BNAGFJMA@?$AAS?$AAT?$AA_?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$AN?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "T", 0x0, "_", 0x0, "E", 0x0, "R", 0x0, "R", 0x0, "O"
	DCB	0x0, "R", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FA@LBDLDOFO@?$AA2?$AA?4?$AA?5?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA_?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAE?$AAP?$AA0?$AA?5?$AAS?$AAe?$AAt?$AA?5?$AAT?$AAx?$AAP?$AAk?$AAt?$AAR?$AAd@| DCB "2"
	DCB	0x0, ".", 0x0, " ", 0x0, "D", 0x0, "e", 0x0, "v", 0x0, "i"
	DCB	0x0, "c", 0x0, "e", 0x0, "_", 0x0, "P", 0x0, "r", 0x0, "o"
	DCB	0x0, "c", 0x0, "e", 0x0, "s", 0x0, "s", 0x0, "E", 0x0, "P"
	DCB	0x0, "0", 0x0, " ", 0x0, "S", 0x0, "e", 0x0, "t", 0x0, " "
	DCB	0x0, "T", 0x0, "x", 0x0, "P", 0x0, "k", 0x0, "t", 0x0, "R"
	DCB	0x0, "d", 0x0, "y", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "0"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HE@CCMNMCIH@?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA_?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AA0?$AA?3?$AA?5?$AAf?$AAi?$AAn?$AAa?$AAl?$AA?5?$AAc?$AAo?$AAp?$AAy?$AA?5?$AAN?$AAo?$AAt?$AAi@| DCB "D"
	DCB	0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "_"
	DCB	0x0, "P", 0x0, "r", 0x0, "o", 0x0, "c", 0x0, "e", 0x0, "s"
	DCB	0x0, "s", 0x0, "0", 0x0, ":", 0x0, " ", 0x0, "f", 0x0, "i"
	DCB	0x0, "n", 0x0, "a", 0x0, "l", 0x0, " ", 0x0, "c", 0x0, "o"
	DCB	0x0, "p", 0x0, "y", 0x0, " ", 0x0, "N", 0x0, "o", 0x0, "t"
	DCB	0x0, "i", 0x0, "f", 0x0, "y", 0x0, " ", 0x0, "-", 0x0, " "
	DCB	0x0, "t", 0x0, "r", 0x0, "a", 0x0, "n", 0x0, "s", 0x0, "f"
	DCB	0x0, "e", 0x0, "r", 0x0, " ", 0x0, "c", 0x0, "o", 0x0, "m"
	DCB	0x0, "p", 0x0, "l", 0x0, "e", 0x0, "t", 0x0, "e", 0x0, "d"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IK@IEONPHHN@?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA_?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAE?$AAP?$AA0?$AA?3?$AA?5?$AAE?$AAP?$AA0?$AA_?$AAS?$AAT?$AA_?$AAD?$AAA?$AAT?$AAA?$AA_?$AAT@| DCB "D"
	DCB	0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "_"
	DCB	0x0, "P", 0x0, "r", 0x0, "o", 0x0, "c", 0x0, "e", 0x0, "s"
	DCB	0x0, "s", 0x0, "E", 0x0, "P", 0x0, "0", 0x0, ":", 0x0, " "
	DCB	0x0, "E", 0x0, "P", 0x0, "0", 0x0, "_", 0x0, "S", 0x0, "T"
	DCB	0x0, "_", 0x0, "D", 0x0, "A", 0x0, "T", 0x0, "A", 0x0, "_"
	DCB	0x0, "T", 0x0, "X", 0x0, " ", 0x0, "b", 0x0, "y", 0x0, "t"
	DCB	0x0, "e", 0x0, "s", 0x0, "_", 0x0, "l", 0x0, "e", 0x0, "f"
	DCB	0x0, "t", 0x0, "_", 0x0, "t", 0x0, "o", 0x0, "_", 0x0, "s"
	DCB	0x0, "e", 0x0, "n", 0x0, "d", 0x0, "=", 0x0, "%", 0x0, "d"
	DCB	0x0, " ", 0x0, "s", 0x0, "e", 0x0, "n", 0x0, "d", 0x0, "i"
	DCB	0x0, "n", 0x0, "g", 0x0, "=", 0x0, "%", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HK@JEKPKAL@?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA_?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAE?$AAP?$AA0?$AA?3?$AA?5?$AA?5?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAE?$AAP?$AA0?$AA_?$AAS?$AAT@| DCB "D"
	DCB	0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "_"
	DCB	0x0, "P", 0x0, "r", 0x0, "o", 0x0, "c", 0x0, "e", 0x0, "s"
	DCB	0x0, "s", 0x0, "E", 0x0, "P", 0x0, "0", 0x0, ":", 0x0, " "
	DCB	0x0, " ", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r"
	DCB	0x0, " ", 0x0, "E", 0x0, "P", 0x0, "0", 0x0, "_", 0x0, "S"
	DCB	0x0, "T", 0x0, "_", 0x0, "D", 0x0, "A", 0x0, "T", 0x0, "A"
	DCB	0x0, "_", 0x0, "T", 0x0, "X", 0x0, " ", 0x0, "p", 0x0, "T"
	DCB	0x0, "r", 0x0, "a", 0x0, "n", 0x0, "s", 0x0, "f", 0x0, "e"
	DCB	0x0, "r", 0x0, " ", 0x0, "i", 0x0, "s", 0x0, " ", 0x0, "N"
	DCB	0x0, "U", 0x0, "L", 0x0, "L", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GE@CGEACPAE@?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA_?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAE?$AAP?$AA0?$AA?3?$AA?5?$AAE?$AAP?$AA0?$AA_?$AAS?$AAT?$AA_?$AAD?$AAA?$AAT?$AAA?$AA_?$AAR@| DCB "D"
	DCB	0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "_"
	DCB	0x0, "P", 0x0, "r", 0x0, "o", 0x0, "c", 0x0, "e", 0x0, "s"
	DCB	0x0, "s", 0x0, "E", 0x0, "P", 0x0, "0", 0x0, ":", 0x0, " "
	DCB	0x0, "E", 0x0, "P", 0x0, "0", 0x0, "_", 0x0, "S", 0x0, "T"
	DCB	0x0, "_", 0x0, "D", 0x0, "A", 0x0, "T", 0x0, "A", 0x0, "_"
	DCB	0x0, "R", 0x0, "X", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "c"
	DCB	0x0, "e", 0x0, "i", 0x0, "v", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "d", 0x0, "a", 0x0, "t", 0x0, "a", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HK@NCIOKFCA@?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA_?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAE?$AAP?$AA0?$AA?3?$AA?5?$AA?5?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAE?$AAP?$AA0?$AA_?$AAS?$AAT@| DCB "D"
	DCB	0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "_"
	DCB	0x0, "P", 0x0, "r", 0x0, "o", 0x0, "c", 0x0, "e", 0x0, "s"
	DCB	0x0, "s", 0x0, "E", 0x0, "P", 0x0, "0", 0x0, ":", 0x0, " "
	DCB	0x0, " ", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r"
	DCB	0x0, " ", 0x0, "E", 0x0, "P", 0x0, "0", 0x0, "_", 0x0, "S"
	DCB	0x0, "T", 0x0, "_", 0x0, "D", 0x0, "A", 0x0, "T", 0x0, "A"
	DCB	0x0, "_", 0x0, "R", 0x0, "X", 0x0, " ", 0x0, "p", 0x0, "T"
	DCB	0x0, "r", 0x0, "a", 0x0, "n", 0x0, "s", 0x0, "f", 0x0, "e"
	DCB	0x0, "r", 0x0, " ", 0x0, "i", 0x0, "s", 0x0, " ", 0x0, "N"
	DCB	0x0, "U", 0x0, "L", 0x0, "L", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EE@LDJOACEP@?$AAE?$AAP?$AA0?$AA_?$AAS?$AAT?$AA_?$AAS?$AAE?$AAT?$AAU?$AAP?$AA?5?$AAr?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AAs?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN@| DCB "E"
	DCB	0x0, "P", 0x0, "0", 0x0, "_", 0x0, "S", 0x0, "T", 0x0, "_"
	DCB	0x0, "S", 0x0, "E", 0x0, "T", 0x0, "U", 0x0, "P", 0x0, " "
	DCB	0x0, "r", 0x0, "e", 0x0, "c", 0x0, "e", 0x0, "i", 0x0, "v"
	DCB	0x0, "e", 0x0, "s", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "x", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@FFLGMHM@?$AAE?$AAP?$AA0?$AA_?$AAS?$AAT?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAI?$AAN?$AA?5?$AA?$DN?$AA?$DO?$AA?5?$AAE?$AAP?$AA0?$AA?5?$AAS?$AAE?$AAT?$AAU?$AAP?$AA?$AN?$AA?6?$AA?$AA@| DCB "E"
	DCB	0x0, "P", 0x0, "0", 0x0, "_", 0x0, "S", 0x0, "T", 0x0, "_"
	DCB	0x0, "S", 0x0, "T", 0x0, "A", 0x0, "T", 0x0, "U", 0x0, "S"
	DCB	0x0, "_", 0x0, "I", 0x0, "N", 0x0, " ", 0x0, "=", 0x0, ">"
	DCB	0x0, " ", 0x0, "E", 0x0, "P", 0x0, "0", 0x0, " ", 0x0, "S"
	DCB	0x0, "E", 0x0, "T", 0x0, "U", 0x0, "P", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@CMOKIKNH@?$AAC?$AAS?$AAR?$AA0?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "C"
	DCB	0x0, "S", 0x0, "R", 0x0, "0", 0x0, " ", 0x0, "=", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CA@HLDCJJFC@?$AAS?$AAe?$AAt?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "e", 0x0, "t", 0x0, "A", 0x0, "d", 0x0, "d", 0x0, "r"
	DCB	0x0, "e", 0x0, "s", 0x0, "s", 0x0, "=", 0x0, "%", 0x0, "d"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BG@GEGFJNAH@?$AAS?$AAe?$AAt?$AAu?$AAp?$AAE?$AAn?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "e", 0x0, "t", 0x0, "u", 0x0, "p", 0x0, "E", 0x0, "n"
	DCB	0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@CNFNHGLF@?$AAS?$AAt?$AAa?$AAl?$AAl?$AA?$AN?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "t", 0x0, "a", 0x0, "l", 0x0, "l", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GK@GDOLHGDC@?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AAr?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AA?5?$AAw?$AAi?$AAt?$AAh?$AA?5?$AAC?$AAS?$AAR?$AA0?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx@| DCB "I"
	DCB	0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u"
	DCB	0x0, "p", 0x0, "t", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "c"
	DCB	0x0, "e", 0x0, "i", 0x0, "v", 0x0, "e", 0x0, " ", 0x0, "w"
	DCB	0x0, "i", 0x0, "t", 0x0, "h", 0x0, " ", 0x0, "C", 0x0, "S"
	DCB	0x0, "R", 0x0, "0", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "r"
	DCB	0x0, "x", 0x0, "c", 0x0, "o", 0x0, "u", 0x0, "n", 0x0, "t"
	DCB	0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CK@IHDMMHEF@?$AA?$CL?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA_?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAE?$AAP?$AA0?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "D", 0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e"
	DCB	0x0, "_", 0x0, "P", 0x0, "r", 0x0, "o", 0x0, "c", 0x0, "e"
	DCB	0x0, "s", 0x0, "s", 0x0, "E", 0x0, "P", 0x0, "0", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Ogtp

  00484			 AREA	 |.text|, CODE, ARM

  00484		 |Device_ProcessEP0| PROC

; 714  : {

  00484		 |$LN78@Device_Pro|
  00484	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00488	e24dd008	 sub         sp, sp, #8
  0048c		 |$M47167|
  0048c	e1a04000	 mov         r4, r0

; 715  :     PCSP_MUSB_GEN_REGS pGenRegs = pPdd->pUsbGenRegs;
; 716  :     PCSP_MUSB_CSR_REGS pCsrRegs = pPdd->pUsbCsrRegs;
; 717  :     UINT16 csr0Val;
; 718  :     UINT16 rxcount;
; 719  :     DWORD data[2];
; 720  :     
; 721  :     OALMSG(OAL_ETHER&&OAL_FUNC, (L"+Device_ProcessEP0\r\n"));

  00490	e59f5478	 ldr         r5, [pc, #0x478]
  00494	e5948010	 ldr         r8, [r4, #0x10]
  00498	e594700c	 ldr         r7, [r4, #0xC]
  0049c	e5952440	 ldr         r2, [r5, #0x440]
  004a0	e3120a02	 tst         r2, #2, 20
  004a4	0a000004	 beq         |$LN27@Device_Pro|
  004a8	e3120004	 tst         r2, #4
  004ac	0a000002	 beq         |$LN27@Device_Pro|
  004b0	e59f0454	 ldr         r0, [pc, #0x454]
  004b4	eb000000	 bl          NKDbgPrintfW
  004b8	e5952440	 ldr         r2, [r5, #0x440]
  004bc		 |$LN27@Device_Pro|

; 722  : 
; 723  :     csr0Val = INREG16(&pCsrRegs->ep[EP0].CSR.CSR0);

  004bc	e1d760b2	 ldrh        r6, [r7, #2]

; 724  :     rxcount = INREG16(&pCsrRegs->ep[EP0].Count.Count0);

  004c0	e1d7a0b8	 ldrh        r10, [r7, #8]

; 725  :     OALMSG(OAL_ETHER&&OAL_FUNC, (TEXT("Interrupt receive with CSR0 = 0x%x, rxcount = 0x%x\r\n"), csr0Val, rxcount));

  004c4	e3120a02	 tst         r2, #2, 20
  004c8	0a000006	 beq         |$LN29@Device_Pro|
  004cc	e3120004	 tst         r2, #4
  004d0	0a000004	 beq         |$LN29@Device_Pro|
  004d4	e59f042c	 ldr         r0, [pc, #0x42C]
  004d8	e1a0200a	 mov         r2, r10
  004dc	e1a01006	 mov         r1, r6
  004e0	eb000000	 bl          NKDbgPrintfW
  004e4	e5952440	 ldr         r2, [r5, #0x440]
  004e8		 |$LN29@Device_Pro|

; 726  :     
; 727  :     if (csr0Val & CSR0_P_SENTSTALL)

  004e8	e3a03cff	 mov         r3, #0xFF, 24
  004ec	e38390fb	 orr         r9, r3, #0xFB
  004f0	e3a0b000	 mov         r11, #0
  004f4	e3160004	 tst         r6, #4
  004f8	0a000009	 beq         |$LN24@Device_Pro|

; 728  :     {
; 729  :         // MUSB finished sending STALL 
; 730  :         // clear SENTSTALL 
; 731  :         OALMSG(OAL_ETHER&&OAL_FUNC, (TEXT("Stall\r\n")));

  004fc	e3120a02	 tst         r2, #2, 20
  00500	13120004	 tstne       r2, #4
  00504	159f03f8	 ldrne       r0, [pc, #0x3F8]
  00508	1b000000	 blne        NKDbgPrintfW

; 732  :         CLRREG16(&pCsrRegs->ep[EP0].CSR.CSR0, CSR0_P_SENTSTALL);

  0050c	e1d730b2	 ldrh        r3, [r7, #2]
  00510	e0033009	 and         r3, r3, r9
  00514	e1c730b2	 strh        r3, [r7, #2]

; 733  :         pPdd->ep0State = EP0_ST_SETUP;

  00518	e584b178	 str         r11, [r4, #0x178]

; 734  :         csr0Val = INREG16(&pCsrRegs->ep[EP0].CSR.CSR0);

  0051c	e1d760b2	 ldrh        r6, [r7, #2]
  00520	e5952440	 ldr         r2, [r5, #0x440]
  00524		 |$LN24@Device_Pro|

; 735  :     }
; 736  :     
; 737  :     if (csr0Val & CSR0_P_SETUPEND)

  00524	e3160010	 tst         r6, #0x10
  00528	0a000022	 beq         |$LN37@Device_Pro|

; 738  :     {
; 739  :         /* setup request ended "early" */
; 740  :         // clear SETUPEND 
; 741  :         OALMSG(OAL_ETHER&&OAL_FUNC, (TEXT("SetupEnd\r\n")));

  0052c	e3120a02	 tst         r2, #2, 20
  00530	0a000004	 beq         |$LN33@Device_Pro|
  00534	e3120004	 tst         r2, #4
  00538	0a000002	 beq         |$LN33@Device_Pro|
  0053c	e59f03bc	 ldr         r0, [pc, #0x3BC]
  00540	eb000000	 bl          NKDbgPrintfW
  00544	e5952440	 ldr         r2, [r5, #0x440]
  00548		 |$LN33@Device_Pro|

; 742  :         if (pPdd->bSetAddress)

  00548	e5943170	 ldr         r3, [r4, #0x170]
  0054c	e3530000	 cmp         r3, #0
  00550	0a000009	 beq         |$LN22@Device_Pro|

; 743  :         {
; 744  :             OALMSG(OAL_ETHER&&OAL_FUNC, (L"SetAddress=%d\r\n", pPdd->ucAddress));

  00554	e3120a02	 tst         r2, #2, 20
  00558	0a000004	 beq         |$LN35@Device_Pro|
  0055c	e3120004	 tst         r2, #4
  00560	0a000002	 beq         |$LN35@Device_Pro|
  00564	e5d4116c	 ldrb        r1, [r4, #0x16C]
  00568	e59f0388	 ldr         r0, [pc, #0x388]
  0056c	eb000000	 bl          NKDbgPrintfW
  00570		 |$LN35@Device_Pro|

; 745  :             OUTREG8(&pGenRegs->FAddr, pPdd->ucAddress); 

  00570	e5d4316c	 ldrb        r3, [r4, #0x16C]
  00574	e5c83000	 strb        r3, [r8]

; 746  :             pPdd->bSetAddress = FALSE;

  00578	e584b170	 str         r11, [r4, #0x170]
  0057c		 |$LN22@Device_Pro|

; 747  :         }
; 748  :         
; 749  :         SETREG16(&pCsrRegs->ep[EP0].CSR.CSR0, CSR0_P_SERVICEDSETUPEND);

  0057c	e1d730b2	 ldrh        r3, [r7, #2]

; 750  :         pPdd->ep0State = EP0_ST_SETUP;
; 751  :         csr0Val = INREG16(&pCsrRegs->ep[EP0].CSR.CSR0);
; 752  :         OALMSG(OAL_ETHER&&OAL_FUNC, (TEXT("CSR0 = 0x%x\r\n"), csr0Val));
; 753  :     }
; 754  :     
; 755  :     switch (pPdd->ep0State)

  00580	e1a0100b	 mov         r1, r11
  00584	e3833080	 orr         r3, r3, #0x80
  00588	e1c730b2	 strh        r3, [r7, #2]
  0058c	e584b178	 str         r11, [r4, #0x178]
  00590	e5952440	 ldr         r2, [r5, #0x440]
  00594	e1d760b2	 ldrh        r6, [r7, #2]
  00598	e3120a02	 tst         r2, #2, 20
  0059c	0a000008	 beq         |$LN61@Device_Pro|
  005a0	e3120004	 tst         r2, #4
  005a4	0a000006	 beq         |$LN61@Device_Pro|
  005a8	e59f034c	 ldr         r0, [pc, #0x34C]
  005ac	e1a01006	 mov         r1, r6
  005b0	eb000000	 bl          NKDbgPrintfW
  005b4	e5952440	 ldr         r2, [r5, #0x440]
  005b8		 |$LN37@Device_Pro|
  005b8	e5941178	 ldr         r1, [r4, #0x178]
  005bc	e3510006	 cmp         r1, #6
  005c0	8a0000ba	 bhi         |$LN2@Device_Pro|
  005c4		 |$LN61@Device_Pro|
  005c4	e1a03081	 mov         r3, r1, lsl #1
  005c8	e083300f	 add         r3, r3, pc
  005cc	e1d330b4	 ldrh        r3, [r3, #4]
  005d0	e08ff003	 add         pc, pc, r3
  005d4		 |$LN68@Device_Pro|
  005d4		 |$LN67@Device_Pro|
  005d4		 |$LN69@Device_Pro|
  005d4	005c		 DCW         0x5c
  005d6		 |$LN70@Device_Pro|
  005d6	00bc		 DCW         0xbc
  005d8		 |$LN71@Device_Pro|
  005d8	000c		 DCW         0xc
  005da		 |$LN72@Device_Pro|
  005da	02d8		 DCW         0x2d8
  005dc		 |$LN73@Device_Pro|
  005dc	00cc		 DCW         0xcc
  005de		 |$LN74@Device_Pro|
  005de	01a4		 DCW         0x1a4
  005e0		 |$LN75@Device_Pro|
  005e0	02ac		 DCW         0x2ac
  005e2		 |$LN97@Device_Pro|

; 912  : }

  005e2	02ac		 DCW         0x2ac
  005e4		 |$LN19@Device_Pro|

; 756  :     {
; 757  :         case EP0_ST_STATUS_IN:
; 758  :             // dummy state in processEP0
; 759  :             if (pPdd->bSetAddress)

  005e4	e5943170	 ldr         r3, [r4, #0x170]
  005e8	e3530000	 cmp         r3, #0
  005ec	0a00000a	 beq         |$LN18@Device_Pro|

; 760  :             {
; 761  :                 OALMSG(OAL_ETHER&&OAL_FUNC, (L"SetAddress=%d\r\n", pPdd->ucAddress));

  005f0	e3120a02	 tst         r2, #2, 20
  005f4	0a000004	 beq         |$LN39@Device_Pro|
  005f8	e3120004	 tst         r2, #4
  005fc	0a000002	 beq         |$LN39@Device_Pro|
  00600	e5d4116c	 ldrb        r1, [r4, #0x16C]
  00604	e59f02ec	 ldr         r0, [pc, #0x2EC]
  00608	eb000000	 bl          NKDbgPrintfW
  0060c		 |$LN39@Device_Pro|

; 762  :                 OUTREG8(&pGenRegs->FAddr, pPdd->ucAddress); 

  0060c	e5d4316c	 ldrb        r3, [r4, #0x16C]
  00610	e5c83000	 strb        r3, [r8]

; 763  :                 pPdd->bSetAddress = FALSE;

  00614	e584b170	 str         r11, [r4, #0x170]
  00618	e5952440	 ldr         r2, [r5, #0x440]
  0061c		 |$LN18@Device_Pro|

; 764  :             }
; 765  :             OALMSG(OAL_ETHER&&OAL_FUNC, (TEXT("EP0_ST_STATUS_IN => EP0 SETUP\r\n")));

  0061c	e3120a02	 tst         r2, #2, 20
  00620	13120004	 tstne       r2, #4
  00624	159f02c8	 ldrne       r0, [pc, #0x2C8]
  00628	1b000000	 blne        NKDbgPrintfW

; 766  :             pPdd->ep0State = EP0_ST_SETUP;

  0062c	e584b178	 str         r11, [r4, #0x178]
  00630	e5952440	 ldr         r2, [r5, #0x440]
  00634		 |$LN17@Device_Pro|

; 767  :             
; 768  :             // if received packet while in EP0_ST_STATUS_IN, continue process SETUP packet.
; 769  :         case EP0_ST_SETUP:
; 770  :             if (rxcount < 8)

  00634	e35a0008	 cmp         r10, #8
  00638	3a00009c	 bcc         |$LN2@Device_Pro|

; 771  :                 break;
; 772  :             if (!(csr0Val & CSR0_P_RXPKTRDY))

  0063c	e3160001	 tst         r6, #1
  00640	0a00009a	 beq         |$LN2@Device_Pro|

; 773  :                 break;        
; 774  :             data[0] = INREG32(&pGenRegs->fifo[EP0]);

  00644	e5981020	 ldr         r1, [r8, #0x20]

; 775  :             data[1] = INREG32(&pGenRegs->fifo[EP0]);        
; 776  :             OALMSG(OAL_ETHER&&OAL_FUNC, (L"EP0_ST_SETUP receives 0x%x 0x%x\r\n", data[0], data[1]));

  00648	e3120a02	 tst         r2, #2, 20
  0064c	e58d1000	 str         r1, [sp]
  00650	e5983020	 ldr         r3, [r8, #0x20]
  00654	e58d3004	 str         r3, [sp, #4]
  00658	0a000004	 beq         |$LN43@Device_Pro|
  0065c	e3120004	 tst         r2, #4
  00660	0a000002	 beq         |$LN43@Device_Pro|
  00664	e59f0284	 ldr         r0, [pc, #0x284]
  00668	e1a02003	 mov         r2, r3
  0066c	eb000000	 bl          NKDbgPrintfW
  00670		 |$LN43@Device_Pro|

; 777  : 
; 778  :             pPdd->ep0State = EP0_ST_SETUP_PROCESSED;
; 779  :             pPdd->pfnNotify(pPdd->pMddContext, UFN_MSG_SETUP_PACKET, (DWORD)data);        

  00670	e3a06001	 mov         r6, #1
  00674	e5940000	 ldr         r0, [r4]
  00678	e5943004	 ldr         r3, [r4, #4]
  0067c	e5846178	 str         r6, [r4, #0x178]
  00680	e28d2000	 add         r2, sp, #0
  00684	e3a01004	 mov         r1, #4
  00688	e1a0e00f	 mov         lr, pc
  0068c	e12fff13	 bx          r3

; 780  :             break;

  00690	ea000085	 b           |$LN65@Device_Pro|
  00694		 |$LN14@Device_Pro|

; 781  :             
; 782  :         case EP0_ST_SETUP_PROCESSED:
; 783  :             pPdd->intr_rx_data_avail |=(1 << EP0);

  00694	e594317c	 ldr         r3, [r4, #0x17C]
  00698	e3833001	 orr         r3, r3, #1
  0069c	e584317c	 str         r3, [r4, #0x17C]

; 784  :             break;

  006a0	ea000081	 b           |$LN65@Device_Pro|
  006a4		 |$LN13@Device_Pro|

; 785  :             
; 786  :         case EP0_ST_DATA_RX:
; 787  :             if (!(csr0Val & CSR0_P_RXPKTRDY))

  006a4	e3160001	 tst         r6, #1
  006a8	0a000080	 beq         |$LN2@Device_Pro|

; 788  :                 break;
; 789  :             
; 790  :             if (pPdd->ep[EP0].pTransfer == NULL) 

  006ac	e5943038	 ldr         r3, [r4, #0x38]
  006b0	e3530000	 cmp         r3, #0
  006b4	1a00000a	 bne         |$LN11@Device_Pro|

; 791  :             {
; 792  :                 // set intr_rxdata_avail and when IssueTransfer() is called retrieve data
; 793  :                 //          from FIFO and set CSR0 ServicedRxPkt bit and check for end of packet to set CSR0 DATAEND bit.
; 794  :                 pPdd->intr_rx_data_avail |=(1 << EP0);

  006b8	e594317c	 ldr         r3, [r4, #0x17C]
  006bc	e3833001	 orr         r3, r3, #1
  006c0	e584317c	 str         r3, [r4, #0x17C]

; 795  :                 OALMSG(OAL_ETHER&&OAL_FUNC, (L"Device_ProcessEP0:  error EP0_ST_DATA_RX pTransfer is NULL\r\n"));

  006c4	e5952440	 ldr         r2, [r5, #0x440]
  006c8	e3120a02	 tst         r2, #2, 20
  006cc	0a000077	 beq         |$LN2@Device_Pro|
  006d0	e3120004	 tst         r2, #4
  006d4	0a000075	 beq         |$LN2@Device_Pro|
  006d8	e59f020c	 ldr         r0, [pc, #0x20C]
  006dc	eb000000	 bl          NKDbgPrintfW

; 796  :                 break;

  006e0	ea000071	 b           |$LN65@Device_Pro|
  006e4		 |$LN11@Device_Pro|

; 797  :             }
; 798  :             
; 799  :             {
; 800  :                 USBFN_EP *pEP = &pPdd->ep[EP0];
; 801  :                 STransfer *pTransfer = pEP->pTransfer;

  006e4	e5946038	 ldr         r6, [r4, #0x38]

; 802  :                 UCHAR *pBuffer;            
; 803  :                 DWORD space, remain, maxSize;
; 804  :                 
; 805  :                 pBuffer =(UCHAR*)pTransfer->pvBuffer + pTransfer->cbTransferred;               
; 806  :                 space = pTransfer->cbBuffer - pTransfer->cbTransferred;
; 807  :                 // Get maxPacketSize
; 808  :                 maxSize = pPdd->ep[EP0].maxPacketSize;
; 809  :                 
; 810  :                 {
; 811  :                     USHORT dwFlag = CSR0_P_SERVICEDRXPKTRDY;
; 812  :                     remain = rxcount;
; 813  :                     
; 814  :                     ReadFIFO(pPdd, (UCHAR)EP0, pBuffer, (DWORD)rxcount);

  006e8	e1d492bc	 ldrh        r9, [r4, #0x2C]
  006ec	e1a0300a	 mov         r3, r10
  006f0	e596e010	 ldr         lr, [r6, #0x10]
  006f4	e5962004	 ldr         r2, [r6, #4]
  006f8	e3a01000	 mov         r1, #0
  006fc	e1a00004	 mov         r0, r4
  00700	e08e2002	 add         r2, lr, r2
  00704	e3a08040	 mov         r8, #0x40
  00708	eb000000	 bl          ReadFIFO

; 815  :                     
; 816  :                     OALMSG(OAL_ETHER&&OAL_FUNC, (L"Device_ProcessEP0: EP0_ST_DATA_RX received data\r\n"));                    

  0070c	e5953440	 ldr         r3, [r5, #0x440]
  00710	e3130a02	 tst         r3, #2, 20
  00714	13130004	 tstne       r3, #4
  00718	159f01c8	 ldrne       r0, [pc, #0x1C8]
  0071c	1b000000	 blne        NKDbgPrintfW

; 817  :                     
; 818  :                     // We transfered some data
; 819  :                     pTransfer->cbTransferred += rxcount;

  00720	e5963010	 ldr         r3, [r6, #0x10]

; 820  :                     
; 821  :                     // Is this end of transfer?
; 822  :                     if (rxcount < maxSize)

  00724	e15a0009	 cmp         r10, r9
  00728	e08a3003	 add         r3, r10, r3
  0072c	e5863010	 str         r3, [r6, #0x10]
  00730	2a00000a	 bcs         |$LN10@Device_Pro|

; 823  :                     {
; 824  :                         // received last block
; 825  :                         pTransfer->dwUsbError = UFN_NO_ERROR;
; 826  :                         pPdd->ep0State = EP0_ST_STATUS_IN;

  00734	e3a03002	 mov         r3, #2
  00738	e586b014	 str         r11, [r6, #0x14]
  0073c	e5843178	 str         r3, [r4, #0x178]

; 827  :                         pEP->pTransfer = NULL;

  00740	e584b038	 str         r11, [r4, #0x38]

; 828  :                         pPdd->pfnNotify(
; 829  :                             pPdd->pMddContext, UFN_MSG_TRANSFER_COMPLETE, (DWORD)pTransfer);

  00744	e5940000	 ldr         r0, [r4]
  00748	e5943004	 ldr         r3, [r4, #4]
  0074c	e1a02006	 mov         r2, r6
  00750	e3a01064	 mov         r1, #0x64
  00754	e1a0e00f	 mov         lr, pc
  00758	e12fff13	 bx          r3

; 830  :                         dwFlag |= CSR0_P_DATAEND;

  0075c	e3a08048	 mov         r8, #0x48
  00760		 |$LN10@Device_Pro|

; 831  :                     }
; 832  :                     SETREG16(&pCsrRegs->ep[EP0].CSR.CSR0, dwFlag);

  00760	e1d730b2	 ldrh        r3, [r7, #2]

; 833  :                 }
; 834  :                 
; 835  :                 // clear intr_rx_data_avail EP0 bit
; 836  :                 pPdd->intr_rx_data_avail &= ~(1 << EP0);            

  00764	e1833008	 orr         r3, r3, r8
  00768	e1c730b2	 strh        r3, [r7, #2]
  0076c	e594317c	 ldr         r3, [r4, #0x17C]
  00770	e3c33001	 bic         r3, r3, #1
  00774	e584317c	 str         r3, [r4, #0x17C]

; 837  :             }
; 838  :             break;

  00778	ea00004b	 b           |$LN65@Device_Pro|
  0077c		 |$LN9@Device_Pro|

; 839  :             
; 840  :         case EP0_ST_DATA_TX:
; 841  :             if (csr0Val & CSR0_P_TXPKTRDY)

  0077c	e3160002	 tst         r6, #2
  00780	1a00004a	 bne         |$LN2@Device_Pro|

; 842  :                 break;
; 843  :             
; 844  :             {
; 845  :                 USBFN_EP *pEP = &pPdd->ep[EP0];
; 846  :                 STransfer *pTransfer = pEP->pTransfer;

  00784	e5943038	 ldr         r3, [r4, #0x38]
  00788	e1b06003	 movs        r6, r3

; 847  :                 UCHAR *pBuffer;
; 848  :                 DWORD space, txcount;
; 849  :                 
; 850  :                 if (pTransfer == NULL) 

  0078c	1a000006	 bne         |$LN7@Device_Pro|

; 851  :                 {
; 852  :                     OALMSG(OAL_ETHER&&OAL_FUNC, (L"Device_ProcessEP0:  error EP0_ST_DATA_TX pTransfer is NULL\r\n"));

  00790	e3120a02	 tst         r2, #2, 20
  00794	0a000045	 beq         |$LN2@Device_Pro|
  00798	e3120004	 tst         r2, #4
  0079c	0a000043	 beq         |$LN2@Device_Pro|
  007a0	e59f013c	 ldr         r0, [pc, #0x13C]
  007a4	eb000000	 bl          NKDbgPrintfW

; 853  :                     break;

  007a8	ea00003f	 b           |$LN65@Device_Pro|
  007ac		 |$LN7@Device_Pro|

; 854  :                 }
; 855  :                 
; 856  :                 {
; 857  :                     DWORD dwFlag = 0;
; 858  :                     pBuffer =(UCHAR*)pTransfer->pvBuffer + pTransfer->cbTransferred;

  007ac	e5969010	 ldr         r9, [r6, #0x10]

; 859  :                     space = pTransfer->cbBuffer - pTransfer->cbTransferred;

  007b0	e596300c	 ldr         r3, [r6, #0xC]

; 860  :                     
; 861  :                     
; 862  :                     // How many bytes we can send just now?
; 863  :                     txcount = pEP->maxPacketSize;

  007b4	e1d482bc	 ldrh        r8, [r4, #0x2C]
  007b8	e596a004	 ldr         r10, [r6, #4]
  007bc	e0431009	 sub         r1, r3, r9

; 864  :                     if (txcount > space)

  007c0	e1580001	 cmp         r8, r1

; 865  :                         txcount = space;

  007c4	81a08001	 movhi       r8, r1

; 866  :                     
; 867  :                     OALMSG(OAL_ETHER&&OAL_FUNC, (L"Device_ProcessEP0: EP0_ST_DATA_TX bytes_left_to_send=%d sending=%d\r\n", space, txcount));

  007c8	e3120a02	 tst         r2, #2, 20
  007cc	0a000004	 beq         |$LN51@Device_Pro|
  007d0	e3120004	 tst         r2, #4
  007d4	0a000002	 beq         |$LN51@Device_Pro|
  007d8	e59f0100	 ldr         r0, [pc, #0x100]
  007dc	e1a02008	 mov         r2, r8
  007e0	eb000000	 bl          NKDbgPrintfW
  007e4		 |$LN51@Device_Pro|

; 868  :                     
; 869  :                     // Write data to FIFO
; 870  :                     WriteFIFO(pPdd, EP0, pBuffer, txcount);

  007e4	e1a03008	 mov         r3, r8
  007e8	e089200a	 add         r2, r9, r10
  007ec	e3a01000	 mov         r1, #0
  007f0	e1a00004	 mov         r0, r4
  007f4	eb000000	 bl          WriteFIFO

; 871  :                     
; 872  :                     // We transfered some data
; 873  :                     pTransfer->cbTransferred += txcount;

  007f8	e5963010	 ldr         r3, [r6, #0x10]

; 874  :                     dwFlag = CSR0_P_TXPKTRDY;               
; 875  :                     
; 876  :                     if (pTransfer->cbTransferred == pTransfer->cbBuffer)

  007fc	e596100c	 ldr         r1, [r6, #0xC]
  00800	e3a09002	 mov         r9, #2
  00804	e0833008	 add         r3, r3, r8
  00808	e5863010	 str         r3, [r6, #0x10]
  0080c	e1530001	 cmp         r3, r1
  00810	1a000013	 bne         |$LN64@Device_Pro|

; 877  :                     {
; 878  :                         pPdd->ep0State = EP0_ST_STATUS_OUT;

  00814	e3a03003	 mov         r3, #3
  00818	e5843178	 str         r3, [r4, #0x178]

; 879  :                         pEP->pTransfer = NULL;

  0081c	e584b038	 str         r11, [r4, #0x38]

; 880  :                         pTransfer->dwUsbError = UFN_NO_ERROR;

  00820	e586b014	 str         r11, [r6, #0x14]

; 881  :                         pPdd->pfnNotify(pPdd->pMddContext, UFN_MSG_TRANSFER_COMPLETE, (DWORD)pTransfer);   

  00824	e5940000	 ldr         r0, [r4]
  00828	e5943004	 ldr         r3, [r4, #4]
  0082c	e1a02006	 mov         r2, r6
  00830	e3a01064	 mov         r1, #0x64
  00834	e1a0e00f	 mov         lr, pc
  00838	e12fff13	 bx          r3

; 882  :                         OALMSG(OAL_ETHER&&OAL_FUNC, (TEXT("Device_Process0: final copy Notify - transfer completed\r\n")));

  0083c	e5953440	 ldr         r3, [r5, #0x440]
  00840	e3130a02	 tst         r3, #2, 20
  00844	0a000004	 beq         |$LN53@Device_Pro|
  00848	e3130004	 tst         r3, #4
  0084c	0a000002	 beq         |$LN53@Device_Pro|
  00850	e59f0084	 ldr         r0, [pc, #0x84]
  00854	eb000000	 bl          NKDbgPrintfW
  00858	e5953440	 ldr         r3, [r5, #0x440]
  0085c		 |$LN53@Device_Pro|

; 883  :                         dwFlag |= CSR0_P_DATAEND;

  0085c	e3a0900a	 mov         r9, #0xA
  00860	ea000000	 b           |$LN5@Device_Pro|
  00864		 |$LN64@Device_Pro|
  00864	e5953440	 ldr         r3, [r5, #0x440]
  00868		 |$LN5@Device_Pro|

; 884  :                     }       
; 885  :                     
; 886  :                     OALMSG(OAL_ETHER&&OAL_FUNC, (TEXT("2. Device_ProcessEP0 Set TxPktRdy - 0\r\n")));

  00868	e3130a02	 tst         r3, #2, 20
  0086c	13130004	 tstne       r3, #4
  00870	159f0060	 ldrne       r0, [pc, #0x60]
  00874	1b000000	 blne        NKDbgPrintfW

; 887  :                     SETREG16(&pCsrRegs->ep[EP0].CSR.CSR0, dwFlag);

  00878	e1d730b2	 ldrh        r3, [r7, #2]
  0087c	e1833009	 orr         r3, r3, r9

; 888  :                 }
; 889  :             }
; 890  :             break;            

  00880	ea000008	 b           |$LN66@Device_Pro|
  00884		 |$LN3@Device_Pro|

; 891  :             
; 892  :         case EP0_ST_STATUS_OUT:
; 893  :             // dummy state in processEP0
; 894  :             break;
; 895  :             
; 896  :         case EP0_ST_ERROR:
; 897  :             if (csr0Val & CSR0_P_SENTSTALL)

  00884	e3160004	 tst         r6, #4
  00888	0a000008	 beq         |$LN2@Device_Pro|

; 898  :             {
; 899  :                 OALMSG(OAL_ETHER&&OAL_FUNC, (TEXT("ST_ERROR\r\n")));

  0088c	e3120a02	 tst         r2, #2, 20
  00890	13120004	 tstne       r2, #4
  00894	159f0038	 ldrne       r0, [pc, #0x38]
  00898	1b000000	 blne        NKDbgPrintfW

; 900  :                 pPdd->ep0State = EP0_ST_SETUP;

  0089c	e584b178	 str         r11, [r4, #0x178]

; 901  :                 CLRREG16(&pCsrRegs->ep[EP0].CSR.CSR0, CSR0_P_SENTSTALL);

  008a0	e1d730b2	 ldrh        r3, [r7, #2]
  008a4	e0033009	 and         r3, r3, r9
  008a8		 |$LN66@Device_Pro|
  008a8	e1c730b2	 strh        r3, [r7, #2]
  008ac		 |$LN65@Device_Pro|
  008ac	e5952440	 ldr         r2, [r5, #0x440]
  008b0		 |$LN2@Device_Pro|

; 902  :             }
; 903  :             break;
; 904  :             
; 905  :         default:
; 906  :             break;
; 907  :         }
; 908  :         
; 909  :         OALMSG(OAL_ETHER&&OAL_FUNC, (L"-Device_ProcessEP0\r\n"));

  008b0	e3120a02	 tst         r2, #2, 20
  008b4	13120004	 tstne       r2, #4
  008b8	159f0010	 ldrne       r0, [pc, #0x10]
  008bc	1b000000	 blne        NKDbgPrintfW

; 910  :         
; 911  :         return ERROR_SUCCESS;

  008c0	e3a00000	 mov         r0, #0

; 912  : }

  008c4	e28dd008	 add         sp, sp, #8
  008c8	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  008cc	e12fff1e	 bx          lr
  008d0		 |$LN79@Device_Pro|
  008d0		 |$LN80@Device_Pro|
  008d0	00000000	 DCD         |??_C@_1CK@PHELNBKD@?$AA?9?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA_?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAE?$AAP?$AA0?$AA?$AN?$AA?6?$AA?$AA@|
  008d4		 |$LN81@Device_Pro|
  008d4	00000000	 DCD         |??_C@_1BG@BNAGFJMA@?$AAS?$AAT?$AA_?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$AN?$AA?6?$AA?$AA@|
  008d8		 |$LN82@Device_Pro|
  008d8	00000000	 DCD         |??_C@_1FA@LBDLDOFO@?$AA2?$AA?4?$AA?5?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA_?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAE?$AAP?$AA0?$AA?5?$AAS?$AAe?$AAt?$AA?5?$AAT?$AAx?$AAP?$AAk?$AAt?$AAR?$AAd@|
  008dc		 |$LN83@Device_Pro|
  008dc	00000000	 DCD         |??_C@_1HE@CCMNMCIH@?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA_?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AA0?$AA?3?$AA?5?$AAf?$AAi?$AAn?$AAa?$AAl?$AA?5?$AAc?$AAo?$AAp?$AAy?$AA?5?$AAN?$AAo?$AAt?$AAi@|
  008e0		 |$LN84@Device_Pro|
  008e0	00000000	 DCD         |??_C@_1IK@IEONPHHN@?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA_?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAE?$AAP?$AA0?$AA?3?$AA?5?$AAE?$AAP?$AA0?$AA_?$AAS?$AAT?$AA_?$AAD?$AAA?$AAT?$AAA?$AA_?$AAT@|
  008e4		 |$LN85@Device_Pro|
  008e4	00000000	 DCD         |??_C@_1HK@JEKPKAL@?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA_?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAE?$AAP?$AA0?$AA?3?$AA?5?$AA?5?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAE?$AAP?$AA0?$AA_?$AAS?$AAT@|
  008e8		 |$LN86@Device_Pro|
  008e8	00000000	 DCD         |??_C@_1GE@CGEACPAE@?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA_?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAE?$AAP?$AA0?$AA?3?$AA?5?$AAE?$AAP?$AA0?$AA_?$AAS?$AAT?$AA_?$AAD?$AAA?$AAT?$AAA?$AA_?$AAR@|
  008ec		 |$LN87@Device_Pro|
  008ec	00000000	 DCD         |??_C@_1HK@NCIOKFCA@?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA_?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAE?$AAP?$AA0?$AA?3?$AA?5?$AA?5?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAE?$AAP?$AA0?$AA_?$AAS?$AAT@|
  008f0		 |$LN88@Device_Pro|
  008f0	00000000	 DCD         |??_C@_1EE@LDJOACEP@?$AAE?$AAP?$AA0?$AA_?$AAS?$AAT?$AA_?$AAS?$AAE?$AAT?$AAU?$AAP?$AA?5?$AAr?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AAs?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN@|
  008f4		 |$LN89@Device_Pro|
  008f4	00000000	 DCD         |??_C@_1EA@FFLGMHM@?$AAE?$AAP?$AA0?$AA_?$AAS?$AAT?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAI?$AAN?$AA?5?$AA?$DN?$AA?$DO?$AA?5?$AAE?$AAP?$AA0?$AA?5?$AAS?$AAE?$AAT?$AAU?$AAP?$AA?$AN?$AA?6?$AA?$AA@|
  008f8		 |$LN90@Device_Pro|
  008f8	00000000	 DCD         |??_C@_1CA@HLDCJJFC@?$AAS?$AAe?$AAt?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  008fc		 |$LN91@Device_Pro|
  008fc	00000000	 DCD         |??_C@_1BM@CMOKIKNH@?$AAC?$AAS?$AAR?$AA0?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  00900		 |$LN92@Device_Pro|
  00900	00000000	 DCD         |??_C@_1BG@GEGFJNAH@?$AAS?$AAe?$AAt?$AAu?$AAp?$AAE?$AAn?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  00904		 |$LN93@Device_Pro|
  00904	00000000	 DCD         |??_C@_1BA@CNFNHGLF@?$AAS?$AAt?$AAa?$AAl?$AAl?$AA?$AN?$AA?6?$AA?$AA@|
  00908		 |$LN94@Device_Pro|
  00908	00000000	 DCD         |??_C@_1GK@GDOLHGDC@?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AAr?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AA?5?$AAw?$AAi?$AAt?$AAh?$AA?5?$AAC?$AAS?$AAR?$AA0?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx@|
  0090c		 |$LN95@Device_Pro|
  0090c	00000000	 DCD         |??_C@_1CK@IHDMMHEF@?$AA?$CL?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA_?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAE?$AAP?$AA0?$AA?$AN?$AA?6?$AA?$AA@|
  00910		 |$LN96@Device_Pro|
  00910	00000000	 DCD         |dpCurSettings|
  00914		 |$M47168|

			 ENDP  ; |Device_ProcessEP0|

	EXPORT	|Device_ProcessEPx_RX|
	EXPORT	|??_C@_1DA@IKAAHPOB@?$AA?9?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA_?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAE?$AAP?$AAx?$AA_?$AAR?$AAX?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HE@CCBEIKEM@?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA_?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAE?$AAP?$AAx?$AA_?$AAR?$AAX?$AA?3?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAp?$AAf?$AAn?$AAN?$AAo@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FO@DJGBGNGE@?$AA?$CB?$AA?$CB?$AA?$CB?$AA?5?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA_?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAE?$AAP?$AAx?$AA_?$AAR?$AAX?$AA?3?$AA?5?$AA?5?$AAp?$AAT?$AAr?$AAa?$AAn@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BE@PIBDKLHF@?$AAO?$AAv?$AAe?$AAr?$AAr?$AAu?$AAn?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EK@IMFCNEOO@?$AA?$CL?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA_?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAE?$AAP?$AAx?$AA_?$AAR?$AAX?$AA?3?$AA?5?$AAe?$AAn?$AAd?$AAp?$AAo?$AAi?$AAn?$AAt?$AA?$DN@| [ DATA ] ; `string'

  00038			 AREA	 |.pdata|, PDATA
|$T47220| DCD	|$LN28@Device_Pro@2|
	DCD	0x40008501

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@IKAAHPOB@?$AA?9?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA_?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAE?$AAP?$AAx?$AA_?$AAR?$AAX?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "D", 0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e"
	DCB	0x0, "_", 0x0, "P", 0x0, "r", 0x0, "o", 0x0, "c", 0x0, "e"
	DCB	0x0, "s", 0x0, "s", 0x0, "E", 0x0, "P", 0x0, "x", 0x0, "_"
	DCB	0x0, "R", 0x0, "X", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HE@CCBEIKEM@?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA_?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAE?$AAP?$AAx?$AA_?$AAR?$AAX?$AA?3?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAp?$AAf?$AAn?$AAN?$AAo@| DCB "D"
	DCB	0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "_"
	DCB	0x0, "P", 0x0, "r", 0x0, "o", 0x0, "c", 0x0, "e", 0x0, "s"
	DCB	0x0, "s", 0x0, "E", 0x0, "P", 0x0, "x", 0x0, "_", 0x0, "R"
	DCB	0x0, "X", 0x0, ":", 0x0, " ", 0x0, "c", 0x0, "a", 0x0, "l"
	DCB	0x0, "l", 0x0, " ", 0x0, "p", 0x0, "f", 0x0, "n", 0x0, "N"
	DCB	0x0, "o", 0x0, "t", 0x0, "i", 0x0, "f", 0x0, "y", 0x0, " "
	DCB	0x0, "C", 0x0, "O", 0x0, "M", 0x0, "P", 0x0, "L", 0x0, "E"
	DCB	0x0, "T", 0x0, "E", 0x0, " ", 0x0, "e", 0x0, "n", 0x0, "d"
	DCB	0x0, "p", 0x0, ":", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, "+"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FO@DJGBGNGE@?$AA?$CB?$AA?$CB?$AA?$CB?$AA?5?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA_?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAE?$AAP?$AAx?$AA_?$AAR?$AAX?$AA?3?$AA?5?$AA?5?$AAp?$AAT?$AAr?$AAa?$AAn@| DCB "!"
	DCB	0x0, "!", 0x0, "!", 0x0, " ", 0x0, "D", 0x0, "e", 0x0, "v"
	DCB	0x0, "i", 0x0, "c", 0x0, "e", 0x0, "_", 0x0, "P", 0x0, "r"
	DCB	0x0, "o", 0x0, "c", 0x0, "e", 0x0, "s", 0x0, "s", 0x0, "E"
	DCB	0x0, "P", 0x0, "x", 0x0, "_", 0x0, "R", 0x0, "X", 0x0, ":"
	DCB	0x0, " ", 0x0, " ", 0x0, "p", 0x0, "T", 0x0, "r", 0x0, "a"
	DCB	0x0, "n", 0x0, "s", 0x0, "f", 0x0, "e", 0x0, "r", 0x0, " "
	DCB	0x0, "i", 0x0, "s", 0x0, " ", 0x0, "N", 0x0, "U", 0x0, "L"
	DCB	0x0, "L", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BE@PIBDKLHF@?$AAO?$AAv?$AAe?$AAr?$AAr?$AAu?$AAn?$AA?$AN?$AA?6?$AA?$AA@| DCB "O"
	DCB	0x0, "v", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "n"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EK@IMFCNEOO@?$AA?$CL?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA_?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAE?$AAP?$AAx?$AA_?$AAR?$AAX?$AA?3?$AA?5?$AAe?$AAn?$AAd?$AAp?$AAo?$AAi?$AAn?$AAt?$AA?$DN@| DCB "+"
	DCB	0x0, "D", 0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e"
	DCB	0x0, "_", 0x0, "P", 0x0, "r", 0x0, "o", 0x0, "c", 0x0, "e"
	DCB	0x0, "s", 0x0, "s", 0x0, "E", 0x0, "P", 0x0, "x", 0x0, "_"
	DCB	0x0, "R", 0x0, "X", 0x0, ":", 0x0, " ", 0x0, "e", 0x0, "n"
	DCB	0x0, "d", 0x0, "p", 0x0, "o", 0x0, "i", 0x0, "n", 0x0, "t"
	DCB	0x0, "=", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Ogtp

  00914			 AREA	 |.text|, CODE, ARM

  00914		 |Device_ProcessEPx_RX| PROC

; 936  : {

  00914		 |$LN28@Device_Pro@2|
  00914	e92d47f0	 stmdb       sp!, {r4 - r10, lr}
  00918		 |$M47217|
  00918	e1a07001	 mov         r7, r1
  0091c	e1a04000	 mov         r4, r0

; 937  :     PCSP_MUSB_CSR_REGS pCsrRegs = pPdd->pUsbCsrRegs;
; 938  :     UINT16 csrVal;
; 939  :     USBFN_EP *pEP = &pPdd->ep[endpoint];
; 940  :     UINT16 rxcount;
; 941  :     STransfer *pTransfer = pEP->pTransfer;
; 942  :     
; 943  :     OALMSG(OAL_ETHER&&OAL_FUNC, (L"+Device_ProcessEPx_RX: endpoint=%d\r\n", endpoint));

  00920	e59f51fc	 ldr         r5, [pc, #0x1FC]
  00924	e0873107	 add         r3, r7, r7, lsl #2
  00928	e0849103	 add         r9, r4, r3, lsl #2
  0092c	e5953440	 ldr         r3, [r5, #0x440]
  00930	e594600c	 ldr         r6, [r4, #0xC]
  00934	e5998038	 ldr         r8, [r9, #0x38]
  00938	e3130a02	 tst         r3, #2, 20
  0093c	0a000004	 beq         |$LN11@Device_Pro@2|
  00940	e3130004	 tst         r3, #4
  00944	0a000002	 beq         |$LN11@Device_Pro@2|
  00948	e59f01d0	 ldr         r0, [pc, #0x1D0]
  0094c	eb000000	 bl          NKDbgPrintfW
  00950	e5953440	 ldr         r3, [r5, #0x440]
  00954		 |$LN11@Device_Pro@2|

; 944  :     csrVal = INREG16(&pCsrRegs->ep[endpoint].RxCSR);

  00954	e0866207	 add         r6, r6, r7, lsl #4
  00958	e1d620b6	 ldrh        r2, [r6, #6]

; 945  :     
; 946  :     if (csrVal & RXCSR_P_SENTSTALL)

  0095c	e3120040	 tst         r2, #0x40
  00960	0a00000a	 beq         |$LN8@Device_Pro@2|

; 947  :     {
; 948  :         // MUSB finished sending STALL 
; 949  :         // clear SENTSTALL 
; 950  :         OALMSG(OAL_ETHER&&OAL_FUNC, (TEXT("Stall\r\n")));

  00964	e3130a02	 tst         r3, #2, 20
  00968	13130004	 tstne       r3, #4
  0096c	159f01a8	 ldrne       r0, [pc, #0x1A8]
  00970	1b000000	 blne        NKDbgPrintfW

; 951  :         CLRREG16(&pCsrRegs->ep[endpoint].RxCSR, RXCSR_P_SENTSTALL);

  00974	e1d620b6	 ldrh        r2, [r6, #6]
  00978	e3a03cff	 mov         r3, #0xFF, 24
  0097c	e38330bf	 orr         r3, r3, #0xBF
  00980	e0023003	 and         r3, r2, r3
  00984	e1c630b6	 strh        r3, [r6, #6]

; 952  :         csrVal = INREG16(&pCsrRegs->ep[endpoint].RxCSR);

  00988	e1d620b6	 ldrh        r2, [r6, #6]
  0098c	e5953440	 ldr         r3, [r5, #0x440]
  00990		 |$LN8@Device_Pro@2|

; 953  :     }
; 954  :     
; 955  :     if (csrVal & RXCSR_P_OVERRUN)

  00990	e3120004	 tst         r2, #4
  00994	0a000018	 beq         |$LN7@Device_Pro@2|

; 956  :     {
; 957  :         // clear OVERRUN 
; 958  :         OALMSG(OAL_ERROR, (TEXT("Overrun\r\n")));

  00998	e3130001	 tst         r3, #1
  0099c	159f0174	 ldrne       r0, [pc, #0x174]
  009a0	1b000000	 blne        NKDbgPrintfW

; 959  :         CLRREG16(&pCsrRegs->ep[endpoint].RxCSR, RXCSR_P_OVERRUN);

  009a4	e1d610b6	 ldrh        r1, [r6, #6]
  009a8	e3a03cff	 mov         r3, #0xFF, 24
  009ac	e38330fb	 orr         r3, r3, #0xFB
  009b0	e0013003	 and         r3, r1, r3
  009b4	e1c630b6	 strh        r3, [r6, #6]

; 960  :         if (pTransfer != NULL)

  009b8	e3580000	 cmp         r8, #0
  009bc	0a000009	 beq         |$LN6@Device_Pro@2|

; 961  :         {
; 962  :            pTransfer->dwUsbError = UFN_CLIENT_BUFFER_ERROR;

  009c0	e3a03f41	 mov         r3, #0x41, 30
  009c4	e5883014	 str         r3, [r8, #0x14]

; 963  :            pEP->pTransfer = NULL;

  009c8	e3a03000	 mov         r3, #0
  009cc	e5893038	 str         r3, [r9, #0x38]

; 964  :            pPdd->pfnNotify(
; 965  :                pPdd->pMddContext, UFN_MSG_TRANSFER_COMPLETE, (DWORD)pTransfer);

  009d0	e5940000	 ldr         r0, [r4]
  009d4	e5943004	 ldr         r3, [r4, #4]
  009d8	e1a02008	 mov         r2, r8
  009dc	e3a01064	 mov         r1, #0x64
  009e0	e1a0e00f	 mov         lr, pc
  009e4	e12fff13	 bx          r3
  009e8		 |$LN6@Device_Pro@2|

; 966  :         }
; 967  :         
; 968  :         pPdd->intr_rx_data_avail &=(1 << endpoint);

  009e8	e594317c	 ldr         r3, [r4, #0x17C]
  009ec	e3a02001	 mov         r2, #1
  009f0	e0033712	 and         r3, r3, r2, lsl r7
  009f4	e584317c	 str         r3, [r4, #0x17C]

; 969  :         goto cleanUp;

  009f8	ea00003b	 b           |$LN25@Device_Pro@2|
  009fc		 |$LN7@Device_Pro@2|

; 970  :     }
; 971  :     
; 972  :     if (!(csrVal & RXCSR_P_RXPKTRDY))

  009fc	e3120001	 tst         r2, #1
  00a00	0a00003a	 beq         |$cleanUp$46208|

; 973  :         goto cleanUp;      
; 974  :     
; 975  :     if (pTransfer == NULL) 

  00a04	e3580000	 cmp         r8, #0
  00a08	1a000009	 bne         |$LN4@Device_Pro@2|

; 976  :     {
; 977  :         pPdd->intr_rx_data_avail |=(1 << endpoint);

  00a0c	e594317c	 ldr         r3, [r4, #0x17C]
  00a10	e3a02001	 mov         r2, #1
  00a14	e1833712	 orr         r3, r3, r2, lsl r7
  00a18	e584317c	 str         r3, [r4, #0x17C]

; 978  :         OALMSG(OAL_ERROR, (L"!!! Device_ProcessEPx_RX:  pTransfer is NULL\r\n"));

  00a1c	e5953440	 ldr         r3, [r5, #0x440]
  00a20	e3130001	 tst         r3, #1
  00a24	0a000031	 beq         |$cleanUp$46208|
  00a28	e59f00e4	 ldr         r0, [pc, #0xE4]
  00a2c	eb000000	 bl          NKDbgPrintfW

; 979  :         goto cleanUp;

  00a30	ea00002d	 b           |$LN25@Device_Pro@2|
  00a34		 |$LN4@Device_Pro@2|

; 980  :     }
; 981  :     
; 982  :     rxcount = INREG16(&pCsrRegs->ep[endpoint].Count.RxCount);
; 983  :     
; 984  :     {
; 985  :         UCHAR *pBuffer; 
; 986  :         
; 987  :         pBuffer =(UCHAR*)pTransfer->pvBuffer + pTransfer->cbTransferred;            

  00a34	e5980010	 ldr         r0, [r8, #0x10]
  00a38	e5982004	 ldr         r2, [r8, #4]
  00a3c	e1d6a0b8	 ldrh        r10, [r6, #8]

; 988  :         ReadFIFO(pPdd, (UCHAR)endpoint, pBuffer, (DWORD)rxcount);

  00a40	e20710ff	 and         r1, r7, #0xFF
  00a44	e0802002	 add         r2, r0, r2
  00a48	e1a00004	 mov         r0, r4
  00a4c	e1a0300a	 mov         r3, r10
  00a50	eb000000	 bl          ReadFIFO

; 989  :         
; 990  :         // clear intr_rx_data_avail EP bit
; 991  :         pPdd->intr_rx_data_avail &= ~(1 << endpoint);           

  00a54	e594317c	 ldr         r3, [r4, #0x17C]
  00a58	e3a02001	 mov         r2, #1
  00a5c	e1c33712	 bic         r3, r3, r2, lsl r7
  00a60	e584317c	 str         r3, [r4, #0x17C]

; 992  :         
; 993  :         // We transfered some data
; 994  :         pTransfer->cbTransferred += rxcount;

  00a64	e5983010	 ldr         r3, [r8, #0x10]
  00a68	e083200a	 add         r2, r3, r10
  00a6c	e5882010	 str         r2, [r8, #0x10]

; 995  :         
; 996  :         // Is this end of transfer?
; 997  :         // I guess the system doesn't send out the zero-length packet from host.
; 998  :         if ((rxcount < pPdd->ep[endpoint].maxPacketSize) ||(rxcount == 0) || (pTransfer->cbTransferred == pTransfer->cbBuffer))

  00a70	e1d932bc	 ldrh        r3, [r9, #0x2C]
  00a74	e15a0003	 cmp         r10, r3
  00a78	3a00000a	 bcc         |$LN2@Device_Pro@2|
  00a7c	e35a0000	 cmp         r10, #0
  00a80	0a000008	 beq         |$LN2@Device_Pro@2|
  00a84	e598300c	 ldr         r3, [r8, #0xC]
  00a88	e1520003	 cmp         r2, r3
  00a8c	0a000005	 beq         |$LN2@Device_Pro@2|

; 1009 :             //OALMSG(OAL_ETHER&&OAL_FUNC, (L"Device_ProcessEPx_RX: call pfnNotify COMPLETE -\r\n"));              
; 1010 :         }
; 1011 :         else
; 1012 :             CLRREG16(&pCsrRegs->ep[endpoint].RxCSR, RXCSR_P_RXPKTRDY);

  00a90	e1d620b6	 ldrh        r2, [r6, #6]
  00a94	e3a03cff	 mov         r3, #0xFF, 24
  00a98	e38330fe	 orr         r3, r3, #0xFE
  00a9c	e0023003	 and         r3, r2, r3
  00aa0	e1c630b6	 strh        r3, [r6, #6]
  00aa4	ea000010	 b           |$LN25@Device_Pro@2|
  00aa8		 |$LN2@Device_Pro@2|

; 999  :         {
; 1000 :             // received last block
; 1001 :             OALMSG(OAL_ETHER&&OAL_FUNC, (L"Device_ProcessEPx_RX: call pfnNotify COMPLETE endp:%d +\r\n", endpoint));  

  00aa8	e5953440	 ldr         r3, [r5, #0x440]
  00aac	e3130a02	 tst         r3, #2, 20
  00ab0	0a000004	 beq         |$LN19@Device_Pro@2|
  00ab4	e3130004	 tst         r3, #4
  00ab8	0a000002	 beq         |$LN19@Device_Pro@2|
  00abc	e59f004c	 ldr         r0, [pc, #0x4C]
  00ac0	e1a01007	 mov         r1, r7
  00ac4	eb000000	 bl          NKDbgPrintfW
  00ac8		 |$LN19@Device_Pro@2|

; 1002 :             pTransfer->dwUsbError = UFN_NO_ERROR;            

  00ac8	e3a03000	 mov         r3, #0
  00acc	e5883014	 str         r3, [r8, #0x14]

; 1003 :             pEP->pTransfer = NULL;

  00ad0	e5893038	 str         r3, [r9, #0x38]

; 1004 :             //memdump((uchar *)pTransfer->pvBuffer, (unsigned short) pTransfer->cbTransferred, 0);
; 1005 :             // Don't clear RXCSR_P_PXPKTRDY here, let the next time it start to do that.
; 1006 : 
; 1007 :             pPdd->pfnNotify(
; 1008 :                 pPdd->pMddContext, UFN_MSG_TRANSFER_COMPLETE, (DWORD)pTransfer);

  00ad4	e5940000	 ldr         r0, [r4]
  00ad8	e5943004	 ldr         r3, [r4, #4]
  00adc	e1a02008	 mov         r2, r8
  00ae0	e3a01064	 mov         r1, #0x64
  00ae4	e1a0e00f	 mov         lr, pc
  00ae8	e12fff13	 bx          r3
  00aec		 |$LN25@Device_Pro@2|
  00aec	e5953440	 ldr         r3, [r5, #0x440]
  00af0		 |$cleanUp$46208|

; 1013 :     }
; 1014 :     
; 1015 : cleanUp:
; 1016 : 
; 1017 :     OALMSG(OAL_ETHER&&OAL_FUNC, (L"-Device_ProcessEPx_RX\r\n"));

  00af0	e3130a02	 tst         r3, #2, 20
  00af4	13130004	 tstne       r3, #4
  00af8	159f000c	 ldrne       r0, [pc, #0xC]
  00afc	1b000000	 blne        NKDbgPrintfW

; 1018 :     
; 1019 :     return ERROR_SUCCESS;

  00b00	e3a00000	 mov         r0, #0

; 1020 : }

  00b04	e8bd47f0	 ldmia       sp!, {r4 - r10, lr}
  00b08	e12fff1e	 bx          lr
  00b0c		 |$LN29@Device_Pro@2|
  00b0c		 |$LN30@Device_Pro@2|
  00b0c	00000000	 DCD         |??_C@_1DA@IKAAHPOB@?$AA?9?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA_?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAE?$AAP?$AAx?$AA_?$AAR?$AAX?$AA?$AN?$AA?6?$AA?$AA@|
  00b10		 |$LN31@Device_Pro@2|
  00b10	00000000	 DCD         |??_C@_1HE@CCBEIKEM@?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA_?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAE?$AAP?$AAx?$AA_?$AAR?$AAX?$AA?3?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAp?$AAf?$AAn?$AAN?$AAo@|
  00b14		 |$LN32@Device_Pro@2|
  00b14	00000000	 DCD         |??_C@_1FO@DJGBGNGE@?$AA?$CB?$AA?$CB?$AA?$CB?$AA?5?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA_?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAE?$AAP?$AAx?$AA_?$AAR?$AAX?$AA?3?$AA?5?$AA?5?$AAp?$AAT?$AAr?$AAa?$AAn@|
  00b18		 |$LN33@Device_Pro@2|
  00b18	00000000	 DCD         |??_C@_1BE@PIBDKLHF@?$AAO?$AAv?$AAe?$AAr?$AAr?$AAu?$AAn?$AA?$AN?$AA?6?$AA?$AA@|
  00b1c		 |$LN34@Device_Pro@2|
  00b1c	00000000	 DCD         |??_C@_1BA@CNFNHGLF@?$AAS?$AAt?$AAa?$AAl?$AAl?$AA?$AN?$AA?6?$AA?$AA@|
  00b20		 |$LN35@Device_Pro@2|
  00b20	00000000	 DCD         |??_C@_1EK@IMFCNEOO@?$AA?$CL?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA_?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAE?$AAP?$AAx?$AA_?$AAR?$AAX?$AA?3?$AA?5?$AAe?$AAn?$AAd?$AAp?$AAo?$AAi?$AAn?$AAt?$AA?$DN@|
  00b24		 |$LN36@Device_Pro@2|
  00b24	00000000	 DCD         |dpCurSettings|
  00b28		 |$M47218|

			 ENDP  ; |Device_ProcessEPx_RX|

	EXPORT	|Device_ProcessEPx_TX|
	EXPORT	|??_C@_1DA@IHBOAPKG@?$AA?9?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA_?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAE?$AAP?$AAx?$AA_?$AAT?$AAX?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HC@IGCMDKEF@?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA_?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAE?$AAP?$AAx?$AA_?$AAT?$AAX?$AA?3?$AA?5?$AAb?$AAy?$AAt?$AAe?$AAs?$AA_?$AAl?$AAe?$AAf?$AAt@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FG@FBIKOCJK@?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA_?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAE?$AAP?$AAx?$AA_?$AAT?$AAX?$AA?3?$AA?5?$AA?5?$AAp?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CG@GONGKHD@?$AAT?$AAX?$AAC?$AAS?$AAR?$AA_?$AAP?$AA_?$AAT?$AAX?$AAP?$AAK?$AAT?$AAR?$AAD?$AAY?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BG@CDDDEDII@?$AAU?$AAn?$AAd?$AAe?$AAr?$AAr?$AAu?$AAn?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EK@EFJCCDBC@?$AA?$CL?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA_?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAE?$AAP?$AAx?$AA_?$AAT?$AAX?$AA?3?$AA?5?$AAe?$AAn?$AAd?$AAp?$AAo?$AAi?$AAn?$AAt?$AA?$DN@| [ DATA ] ; `string'
	IMPORT	|__rt_udiv|

  00040			 AREA	 |.pdata|, PDATA
|$T47264| DCD	|$LN31@Device_Pro@3|
	DCD	0x40008202

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@IHBOAPKG@?$AA?9?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA_?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAE?$AAP?$AAx?$AA_?$AAT?$AAX?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "D", 0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e"
	DCB	0x0, "_", 0x0, "P", 0x0, "r", 0x0, "o", 0x0, "c", 0x0, "e"
	DCB	0x0, "s", 0x0, "s", 0x0, "E", 0x0, "P", 0x0, "x", 0x0, "_"
	DCB	0x0, "T", 0x0, "X", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HC@IGCMDKEF@?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA_?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAE?$AAP?$AAx?$AA_?$AAT?$AAX?$AA?3?$AA?5?$AAb?$AAy?$AAt?$AAe?$AAs?$AA_?$AAl?$AAe?$AAf?$AAt@| DCB "D"
	DCB	0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "_"
	DCB	0x0, "P", 0x0, "r", 0x0, "o", 0x0, "c", 0x0, "e", 0x0, "s"
	DCB	0x0, "s", 0x0, "E", 0x0, "P", 0x0, "x", 0x0, "_", 0x0, "T"
	DCB	0x0, "X", 0x0, ":", 0x0, " ", 0x0, "b", 0x0, "y", 0x0, "t"
	DCB	0x0, "e", 0x0, "s", 0x0, "_", 0x0, "l", 0x0, "e", 0x0, "f"
	DCB	0x0, "t", 0x0, "_", 0x0, "t", 0x0, "o", 0x0, "_", 0x0, "s"
	DCB	0x0, "e", 0x0, "n", 0x0, "d", 0x0, "=", 0x0, "%", 0x0, "d"
	DCB	0x0, " ", 0x0, "s", 0x0, "e", 0x0, "n", 0x0, "d", 0x0, "i"
	DCB	0x0, "n", 0x0, "g", 0x0, "=", 0x0, "%", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FG@FBIKOCJK@?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA_?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAE?$AAP?$AAx?$AA_?$AAT?$AAX?$AA?3?$AA?5?$AA?5?$AAp?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr@| DCB "D"
	DCB	0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "_"
	DCB	0x0, "P", 0x0, "r", 0x0, "o", 0x0, "c", 0x0, "e", 0x0, "s"
	DCB	0x0, "s", 0x0, "E", 0x0, "P", 0x0, "x", 0x0, "_", 0x0, "T"
	DCB	0x0, "X", 0x0, ":", 0x0, " ", 0x0, " ", 0x0, "p", 0x0, "T"
	DCB	0x0, "r", 0x0, "a", 0x0, "n", 0x0, "s", 0x0, "f", 0x0, "e"
	DCB	0x0, "r", 0x0, " ", 0x0, "i", 0x0, "s", 0x0, " ", 0x0, "N"
	DCB	0x0, "U", 0x0, "L", 0x0, "L", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CG@GONGKHD@?$AAT?$AAX?$AAC?$AAS?$AAR?$AA_?$AAP?$AA_?$AAT?$AAX?$AAP?$AAK?$AAT?$AAR?$AAD?$AAY?$AA?$AN?$AA?6?$AA?$AA@| DCB "T"
	DCB	0x0, "X", 0x0, "C", 0x0, "S", 0x0, "R", 0x0, "_", 0x0, "P"
	DCB	0x0, "_", 0x0, "T", 0x0, "X", 0x0, "P", 0x0, "K", 0x0, "T"
	DCB	0x0, "R", 0x0, "D", 0x0, "Y", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BG@CDDDEDII@?$AAU?$AAn?$AAd?$AAe?$AAr?$AAr?$AAu?$AAn?$AA?$AN?$AA?6?$AA?$AA@| DCB "U"
	DCB	0x0, "n", 0x0, "d", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u"
	DCB	0x0, "n", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EK@EFJCCDBC@?$AA?$CL?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA_?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAE?$AAP?$AAx?$AA_?$AAT?$AAX?$AA?3?$AA?5?$AAe?$AAn?$AAd?$AAp?$AAo?$AAi?$AAn?$AAt?$AA?$DN@| DCB "+"
	DCB	0x0, "D", 0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e"
	DCB	0x0, "_", 0x0, "P", 0x0, "r", 0x0, "o", 0x0, "c", 0x0, "e"
	DCB	0x0, "s", 0x0, "s", 0x0, "E", 0x0, "P", 0x0, "x", 0x0, "_"
	DCB	0x0, "T", 0x0, "X", 0x0, ":", 0x0, " ", 0x0, "e", 0x0, "n"
	DCB	0x0, "d", 0x0, "p", 0x0, "o", 0x0, "i", 0x0, "n", 0x0, "t"
	DCB	0x0, "=", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Ogtp

  00b28			 AREA	 |.text|, CODE, ARM

  00b28		 |Device_ProcessEPx_TX| PROC

; 1042 : {

  00b28		 |$LN31@Device_Pro@3|
  00b28	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00b2c	e24dd004	 sub         sp, sp, #4
  00b30		 |$M47261|
  00b30	e1a09001	 mov         r9, r1
  00b34	e1a0b000	 mov         r11, r0

; 1043 :     PCSP_MUSB_CSR_REGS pCsrRegs = pPdd->pUsbCsrRegs;
; 1044 :     USBFN_EP *pEP = &pPdd->ep[endpoint];
; 1045 :     STransfer *pTransfer = pEP->pTransfer;
; 1046 :     UINT16 csrVal;
; 1047 :     
; 1048 :     OALMSG(OAL_ETHER&&OAL_FUNC, (L"+Device_ProcessEPx_TX: endpoint=%d\r\n", endpoint));

  00b38	e59f41ec	 ldr         r4, [pc, #0x1EC]
  00b3c	e0893109	 add         r3, r9, r9, lsl #2
  00b40	e08b8103	 add         r8, r11, r3, lsl #2
  00b44	e5942440	 ldr         r2, [r4, #0x440]
  00b48	e59b500c	 ldr         r5, [r11, #0xC]
  00b4c	e5987038	 ldr         r7, [r8, #0x38]
  00b50	e3120a02	 tst         r2, #2, 20
  00b54	0a000004	 beq         |$LN12@Device_Pro@3|
  00b58	e3120004	 tst         r2, #4
  00b5c	0a000002	 beq         |$LN12@Device_Pro@3|
  00b60	e59f01c0	 ldr         r0, [pc, #0x1C0]
  00b64	eb000000	 bl          NKDbgPrintfW
  00b68	e5942440	 ldr         r2, [r4, #0x440]
  00b6c		 |$LN12@Device_Pro@3|

; 1049 :     csrVal = INREG16(&pCsrRegs->ep[endpoint].CSR.TxCSR);

  00b6c	e0855209	 add         r5, r5, r9, lsl #4
  00b70	e1d560b2	 ldrh        r6, [r5, #2]

; 1050 :     
; 1051 :     if (csrVal & TXCSR_P_SENTSTALL)

  00b74	e3160020	 tst         r6, #0x20
  00b78	0a00000a	 beq         |$LN9@Device_Pro@3|

; 1052 :     {
; 1053 :         // MUSB finished sending STALL 
; 1054 :         // clear SENTSTALL 
; 1055 :         OALMSG(OAL_ETHER&&OAL_FUNC, (TEXT("Stall\r\n")));

  00b7c	e3120a02	 tst         r2, #2, 20
  00b80	13120004	 tstne       r2, #4
  00b84	159f0198	 ldrne       r0, [pc, #0x198]
  00b88	1b000000	 blne        NKDbgPrintfW

; 1056 :         CLRREG16(&pCsrRegs->ep[endpoint].CSR.TxCSR, TXCSR_P_SENTSTALL);

  00b8c	e1d520b2	 ldrh        r2, [r5, #2]
  00b90	e3a03cff	 mov         r3, #0xFF, 24
  00b94	e38330df	 orr         r3, r3, #0xDF
  00b98	e0023003	 and         r3, r2, r3
  00b9c	e1c530b2	 strh        r3, [r5, #2]

; 1057 :         csrVal = INREG16(&pCsrRegs->ep[endpoint].CSR.TxCSR);

  00ba0	e1d560b2	 ldrh        r6, [r5, #2]
  00ba4	e5942440	 ldr         r2, [r4, #0x440]
  00ba8		 |$LN9@Device_Pro@3|

; 1058 :     }
; 1059 :     
; 1060 :     if (csrVal & TXCSR_P_UNDERRUN)

  00ba8	e3160004	 tst         r6, #4
  00bac	0a000009	 beq         |$LN8@Device_Pro@3|

; 1061 :     {
; 1062 :         // clear UNDERRUN 
; 1063 :         OALMSG(OAL_ETHER&&OAL_FUNC, (TEXT("Underrun\r\n")));

  00bb0	e3120a02	 tst         r2, #2, 20
  00bb4	13120004	 tstne       r2, #4
  00bb8	159f0160	 ldrne       r0, [pc, #0x160]
  00bbc	1b000000	 blne        NKDbgPrintfW

; 1064 :         CLRREG16(&pCsrRegs->ep[endpoint].CSR.TxCSR, TXCSR_P_UNDERRUN);

  00bc0	e1d520b2	 ldrh        r2, [r5, #2]
  00bc4	e3a03cff	 mov         r3, #0xFF, 24
  00bc8	e38330fb	 orr         r3, r3, #0xFB
  00bcc	e0023003	 and         r3, r2, r3
  00bd0	e1c530b2	 strh        r3, [r5, #2]
  00bd4	e5942440	 ldr         r2, [r4, #0x440]
  00bd8		 |$LN8@Device_Pro@3|

; 1065 :     }
; 1066 :     
; 1067 :     // check if finished sending packet (TXPKTRDY bit clear when finished)
; 1068 :     if (csrVal & TXCSR_P_TXPKTRDY) 

  00bd8	e3160001	 tst         r6, #1
  00bdc	0a000006	 beq         |$LN7@Device_Pro@3|

; 1069 :     {
; 1070 :         OALMSG(OAL_ETHER&&OAL_FUNC, (TEXT("TXCSR_P_TXPKTRDY\r\n")));

  00be0	e3120a02	 tst         r2, #2, 20
  00be4	0a000041	 beq         |$cleanUp$46259|
  00be8	e3120004	 tst         r2, #4
  00bec	0a00003f	 beq         |$cleanUp$46259|
  00bf0	e59f0124	 ldr         r0, [pc, #0x124]
  00bf4	eb000000	 bl          NKDbgPrintfW

; 1071 :         goto cleanUp;      

  00bf8	ea00003b	 b           |$LN28@Device_Pro@3|
  00bfc		 |$LN7@Device_Pro@3|

; 1072 :     }
; 1073 :     
; 1074 :     if (pTransfer == NULL) 

  00bfc	e3570000	 cmp         r7, #0
  00c00	1a000004	 bne         |$LN6@Device_Pro@3|

; 1075 :     {
; 1076 :         OALMSG(OAL_ERROR, (L"Device_ProcessEPx_TX:  pTransfer is NULL\r\n"));

  00c04	e3120001	 tst         r2, #1
  00c08	0a000038	 beq         |$cleanUp$46259|
  00c0c	e59f0104	 ldr         r0, [pc, #0x104]
  00c10	eb000000	 bl          NKDbgPrintfW

; 1077 :         goto cleanUp;

  00c14	ea000034	 b           |$LN28@Device_Pro@3|
  00c18		 |$LN6@Device_Pro@3|

; 1078 :     }
; 1079 :     
; 1080 :     {
; 1081 :         UCHAR *pBuffer;     
; 1082 :         DWORD space, txcount;
; 1083 :         
; 1084 :         pBuffer =(UCHAR*)pTransfer->pvBuffer + pTransfer->cbTransferred;

  00c18	e597a010	 ldr         r10, [r7, #0x10]

; 1085 :         space = pTransfer->cbBuffer - pTransfer->cbTransferred;

  00c1c	e597300c	 ldr         r3, [r7, #0xC]

; 1086 :         
; 1087 :         
; 1088 :         // How many bytes we can send just now?
; 1089 :         txcount = pEP->maxPacketSize;

  00c20	e1d862bc	 ldrh        r6, [r8, #0x2C]
  00c24	e5970004	 ldr         r0, [r7, #4]
  00c28	e043100a	 sub         r1, r3, r10

; 1090 :         if (txcount > space)

  00c2c	e1560001	 cmp         r6, r1

; 1091 :             txcount = space;

  00c30	81a06001	 movhi       r6, r1

; 1092 :         
; 1093 :         OALMSG(OAL_ETHER&&OAL_FUNC, (L"Device_ProcessEPx_TX: bytes_left_to_send=%d sending=%d\r\n", space, txcount));

  00c34	e3120a02	 tst         r2, #2, 20
  00c38	e58d0000	 str         r0, [sp]
  00c3c	0a000005	 beq         |$LN22@Device_Pro@3|
  00c40	e3120004	 tst         r2, #4
  00c44	0a000003	 beq         |$LN22@Device_Pro@3|
  00c48	e59f00c4	 ldr         r0, [pc, #0xC4]
  00c4c	e1a02006	 mov         r2, r6
  00c50	eb000000	 bl          NKDbgPrintfW
  00c54	e59d0000	 ldr         r0, [sp]
  00c58		 |$LN22@Device_Pro@3|

; 1094 :         
; 1095 :         if (txcount)

  00c58	e3560000	 cmp         r6, #0
  00c5c	0a00000b	 beq         |$LN4@Device_Pro@3|

; 1096 :         {
; 1097 :             // Write data to FIFO
; 1098 :             WriteFIFO(pPdd, (UCHAR) endpoint, pBuffer, txcount);

  00c60	e080200a	 add         r2, r0, r10
  00c64	e1a0000b	 mov         r0, r11
  00c68	e1a03006	 mov         r3, r6
  00c6c	e20910ff	 and         r1, r9, #0xFF
  00c70	eb000000	 bl          WriteFIFO

; 1099 :             
; 1100 :             // We transfered some data
; 1101 :             pTransfer->cbTransferred += txcount;

  00c74	e5973010	 ldr         r3, [r7, #0x10]
  00c78	e0833006	 add         r3, r3, r6
  00c7c	e5873010	 str         r3, [r7, #0x10]

; 1102 :             SETREG16(&pCsrRegs->ep[endpoint].CSR.TxCSR, TXCSR_P_TXPKTRDY);

  00c80	e1d530b2	 ldrh        r3, [r5, #2]
  00c84	e3833001	 orr         r3, r3, #1
  00c88	e1c530b2	 strh        r3, [r5, #2]
  00c8c	ea000016	 b           |$LN28@Device_Pro@3|
  00c90		 |$LN4@Device_Pro@3|

; 1103 :             //OALMSG(OAL_ETHER&&OAL_FUNC, (L"EPX_TX sent %d bytes\r\n", txcount));  
; 1104 :         }
; 1105 :         
; 1106 :         else if (((pTransfer->cbTransferred % pEP->maxPacketSize) == 0) && !pEP->bZeroLengthSent)

  00c90	e1d802bc	 ldrh        r0, [r8, #0x2C]
  00c94	e5971010	 ldr         r1, [r7, #0x10]
  00c98	eb000000	 bl          __rt_udiv
  00c9c	e3510000	 cmp         r1, #0
  00ca0	1a000008	 bne         |$LN2@Device_Pro@3|
  00ca4	e598303c	 ldr         r3, [r8, #0x3C]
  00ca8	e3530000	 cmp         r3, #0
  00cac	1a000005	 bne         |$LN2@Device_Pro@3|

; 1107 :         {
; 1108 :             // send zero-length end of packet
; 1109 :             SETREG16(&pCsrRegs->ep[endpoint].CSR.TxCSR, TXCSR_P_TXPKTRDY);

  00cb0	e1d530b2	 ldrh        r3, [r5, #2]

; 1110 :             pEP->bZeroLengthSent = TRUE;

  00cb4	e3a02001	 mov         r2, #1
  00cb8	e3833001	 orr         r3, r3, #1
  00cbc	e1c530b2	 strh        r3, [r5, #2]
  00cc0	e588203c	 str         r2, [r8, #0x3C]

; 1111 :         }
; 1112 :         else

  00cc4	ea000008	 b           |$LN28@Device_Pro@3|
  00cc8		 |$LN2@Device_Pro@3|

; 1113 :         {
; 1114 :             // ACK_COMPLETE
; 1115 :             //OALMSG(OAL_ETHER&&OAL_FUNC, (L"Device_ProcessEPx_TX: call pfnNotify COMPLETE endp:%d +\r\n", endpoint));  
; 1116 : 
; 1117 :             pEP->pTransfer = NULL;

  00cc8	e3a03000	 mov         r3, #0
  00ccc	e5883038	 str         r3, [r8, #0x38]

; 1118 :             pTransfer->dwUsbError = UFN_NO_ERROR;

  00cd0	e5873014	 str         r3, [r7, #0x14]

; 1119 : 
; 1120 :             pPdd->pfnNotify(pPdd->pMddContext, UFN_MSG_TRANSFER_COMPLETE, (DWORD)pTransfer);   

  00cd4	e59b0000	 ldr         r0, [r11]
  00cd8	e59b3004	 ldr         r3, [r11, #4]
  00cdc	e1a02007	 mov         r2, r7
  00ce0	e3a01064	 mov         r1, #0x64
  00ce4	e1a0e00f	 mov         lr, pc
  00ce8	e12fff13	 bx          r3
  00cec		 |$LN28@Device_Pro@3|
  00cec	e5942440	 ldr         r2, [r4, #0x440]
  00cf0		 |$cleanUp$46259|

; 1121 :             //OALMSG(OAL_ETHER&&OAL_FUNC, (L"Device_ProcessEPx_TX: call pfnNotify COMPLETE -\r\n"));  
; 1122 :             //OALMSG(OAL_ETHER&&OAL_FUNC, (TEXT("Device_ProcessEPx_TX: ACK_COMPLETE\r\n")));
; 1123 :         }       
; 1124 :     }
; 1125 :     
; 1126 : cleanUp:    
; 1127 : 
; 1128 :     OALMSG(OAL_ETHER&&OAL_FUNC, (L"-Device_ProcessEPx_TX\r\n"));

  00cf0	e3120a02	 tst         r2, #2, 20
  00cf4	13120004	 tstne       r2, #4
  00cf8	159f0010	 ldrne       r0, [pc, #0x10]
  00cfc	1b000000	 blne        NKDbgPrintfW

; 1129 :     
; 1130 :     return ERROR_SUCCESS;

  00d00	e3a00000	 mov         r0, #0

; 1131 : }

  00d04	e28dd004	 add         sp, sp, #4
  00d08	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00d0c	e12fff1e	 bx          lr
  00d10		 |$LN32@Device_Pro@3|
  00d10		 |$LN33@Device_Pro@3|
  00d10	00000000	 DCD         |??_C@_1DA@IHBOAPKG@?$AA?9?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA_?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAE?$AAP?$AAx?$AA_?$AAT?$AAX?$AA?$AN?$AA?6?$AA?$AA@|
  00d14		 |$LN34@Device_Pro@3|
  00d14	00000000	 DCD         |??_C@_1HC@IGCMDKEF@?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA_?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAE?$AAP?$AAx?$AA_?$AAT?$AAX?$AA?3?$AA?5?$AAb?$AAy?$AAt?$AAe?$AAs?$AA_?$AAl?$AAe?$AAf?$AAt@|
  00d18		 |$LN35@Device_Pro@3|
  00d18	00000000	 DCD         |??_C@_1FG@FBIKOCJK@?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA_?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAE?$AAP?$AAx?$AA_?$AAT?$AAX?$AA?3?$AA?5?$AA?5?$AAp?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr@|
  00d1c		 |$LN36@Device_Pro@3|
  00d1c	00000000	 DCD         |??_C@_1CG@GONGKHD@?$AAT?$AAX?$AAC?$AAS?$AAR?$AA_?$AAP?$AA_?$AAT?$AAX?$AAP?$AAK?$AAT?$AAR?$AAD?$AAY?$AA?$AN?$AA?6?$AA?$AA@|
  00d20		 |$LN37@Device_Pro@3|
  00d20	00000000	 DCD         |??_C@_1BG@CDDDEDII@?$AAU?$AAn?$AAd?$AAe?$AAr?$AAr?$AAu?$AAn?$AA?$AN?$AA?6?$AA?$AA@|
  00d24		 |$LN38@Device_Pro@3|
  00d24	00000000	 DCD         |??_C@_1BA@CNFNHGLF@?$AAS?$AAt?$AAa?$AAl?$AAl?$AA?$AN?$AA?6?$AA?$AA@|
  00d28		 |$LN39@Device_Pro@3|
  00d28	00000000	 DCD         |??_C@_1EK@EFJCCDBC@?$AA?$CL?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA_?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAE?$AAP?$AAx?$AA_?$AAT?$AAX?$AA?3?$AA?5?$AAe?$AAn?$AAd?$AAp?$AAo?$AAi?$AAn?$AAt?$AA?$DN@|
  00d2c		 |$LN40@Device_Pro@3|
  00d2c	00000000	 DCD         |dpCurSettings|
  00d30		 |$M47262|

			 ENDP  ; |Device_ProcessEPx_TX|

	EXPORT	|InterruptThread|
	EXPORT	|??_C@_1LE@ICJADCP@?$AAU?$AAs?$AAb?$AAF?$AAn?$AAP?$AAd?$AAd?$AA?$CB?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr@| [ DATA ] ; `string'

  00048			 AREA	 |.pdata|, PDATA
|$T47297| DCD	|$LN28@InterruptT|
	DCD	0x40004a01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1LE@ICJADCP@?$AAU?$AAs?$AAb?$AAF?$AAn?$AAP?$AAd?$AAd?$AA?$CB?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr@| DCB "U"
	DCB	0x0, "s", 0x0, "b", 0x0, "F", 0x0, "n", 0x0, "P", 0x0, "d"
	DCB	0x0, "d", 0x0, "!", 0x0, "I", 0x0, "n", 0x0, "t", 0x0, "e"
	DCB	0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t", 0x0, "T"
	DCB	0x0, "h", 0x0, "r", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, ":"
	DCB	0x0, " ", 0x0, "I", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r"
	DCB	0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t", 0x0, "s", 0x0, " "
	DCB	0x0, "-", 0x0, ">", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "x", 0x0, " ", 0x0, "(", 0x0, "i", 0x0, "n", 0x0, "t"
	DCB	0x0, "r", 0x0, "_", 0x0, "u", 0x0, "s", 0x0, "b", 0x0, ")"
	DCB	0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x"
	DCB	0x0, " ", 0x0, "(", 0x0, "i", 0x0, "n", 0x0, "t", 0x0, "r"
	DCB	0x0, "_", 0x0, "t", 0x0, "x", 0x0, ")", 0x0, ",", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, " ", 0x0, "("
	DCB	0x0, "i", 0x0, "n", 0x0, "t", 0x0, "r", 0x0, "_", 0x0, "r"
	DCB	0x0, "x", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogtp

  00d30			 AREA	 |.text|, CODE, ARM

  00d30		 |InterruptThread| PROC

; 1141 : {

  00d30		 |$LN28@InterruptT|
  00d30	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00d34		 |$M47294|
  00d34	e1a08000	 mov         r8, r0

; 1142 :     USBFN_PDD *pPdd = pPddContext;
; 1143 :     PCSP_MUSB_GEN_REGS pGenRegs = pPdd->pUsbGenRegs;

  00d38	e598a010	 ldr         r10, [r8, #0x10]
  00d3c	e59fb110	 ldr         r11, [pc, #0x110]
  00d40		 |$LL14@InterruptT|
  00d40	e59b3440	 ldr         r3, [r11, #0x440]

; 1144 :     DWORD intr_usb, intr_tx, intr_rx;
; 1145 :     int i;
; 1146 :     
; 1147 : 	for(;;) 
; 1148 : 	{
; 1149 :         BOOL fInterrupt = FALSE;
; 1150 :     
; 1151 :         // Get interrupt source
; 1152 :         // Note that these bits are cleared on read
; 1153 :         intr_usb = INREG8(&pGenRegs->IntrUSB);

  00d44	e5da900a	 ldrb        r9, [r10, #0xA]

; 1154 :         intr_tx  = INREG16(&pGenRegs->IntrTx);

  00d48	e1da70b2	 ldrh        r7, [r10, #2]

; 1155 :         intr_rx  = INREG16(&pGenRegs->IntrRx);
; 1156 :        
; 1157 :         OALMSG(OAL_ETHER&&OAL_FUNC, (
; 1158 :             L"UsbFnPdd!InterruptThread: Interrupts -> 0x%x (intr_usb), 0x%x (intr_tx), 0x%x (intr_rx)\r\n", intr_usb, intr_tx, intr_rx));

  00d4c	e1da60b4	 ldrh        r6, [r10, #4]
  00d50	e3130a02	 tst         r3, #2, 20
  00d54	e3a04000	 mov         r4, #0
  00d58	0a000006	 beq         |$LN17@InterruptT|
  00d5c	e3130004	 tst         r3, #4
  00d60	0a000004	 beq         |$LN17@InterruptT|
  00d64	e59f00e4	 ldr         r0, [pc, #0xE4]
  00d68	e1a03006	 mov         r3, r6
  00d6c	e1a02007	 mov         r2, r7
  00d70	e1a01009	 mov         r1, r9
  00d74	eb000000	 bl          NKDbgPrintfW
  00d78		 |$LN17@InterruptT|

; 1159 : 
; 1160 :         // See MUSBMHDRC spec page 46
; 1161 :         // 1. Handle Reset interrupts (also does attach)
; 1162 :         if (intr_usb & INTRUSB_RESET)

  00d78	e2195004	 ands        r5, r9, #4
  00d7c	0a000003	 beq         |$LN12@InterruptT|

; 1163 :         {
; 1164 :             Device_ResetIRQ(pPdd);

  00d80	e1a00008	 mov         r0, r8
  00d84	eb000000	 bl          Device_ResetIRQ

; 1165 :             intr_usb &= INTRUSB_RESET;

  00d88	e1a09005	 mov         r9, r5

; 1166 :             fInterrupt = TRUE;

  00d8c	e3a04001	 mov         r4, #1
  00d90		 |$LN12@InterruptT|

; 1167 :         }
; 1168 :         
; 1169 :         // 2. Handle Endpoint 0 interrupt
; 1170 :         if (intr_tx & INTR_EP(0))

  00d90	e3170001	 tst         r7, #1
  00d94	0a000003	 beq         |$LN11@InterruptT|

; 1171 :         {
; 1172 :             Device_ProcessEP0(pPdd);

  00d98	e1a00008	 mov         r0, r8
  00d9c	eb000000	 bl          Device_ProcessEP0

; 1173 :             intr_tx &= ~INTR_EP(0);

  00da0	e3c77001	 bic         r7, r7, #1

; 1174 :             fInterrupt = TRUE;

  00da4	e3a04001	 mov         r4, #1
  00da8		 |$LN11@InterruptT|

; 1175 :         }
; 1176 :         
; 1177 :         // 3. Handle RX Endpoint interrupt
; 1178 :         if (intr_rx)

  00da8	e3560000	 cmp         r6, #0
  00dac	0a00000d	 beq         |$LN10@InterruptT|

; 1179 :         {
; 1180 :             i = 1;

  00db0	e3a04001	 mov         r4, #1
  00db4	e3a03001	 mov         r3, #1
  00db8		 |$LL9@InterruptT|

; 1181 :             while (i <= 15)
; 1182 :             {
; 1183 :                 if (intr_rx & INTR_EP(i))

  00db8	e1a05413	 mov         r5, r3, lsl r4
  00dbc	e1150006	 tst         r5, r6
  00dc0	0a000004	 beq         |$LN7@InterruptT|

; 1184 :                 {
; 1185 :                     Device_ProcessEPx_RX(pPdd, i);

  00dc4	e1a01004	 mov         r1, r4
  00dc8	e1a00008	 mov         r0, r8
  00dcc	eb000000	 bl          Device_ProcessEPx_RX

; 1186 :                     intr_rx &= ~INTR_EP(i);

  00dd0	e1c66005	 bic         r6, r6, r5
  00dd4	e3a03001	 mov         r3, #1
  00dd8		 |$LN7@InterruptT|

; 1187 :                 }
; 1188 :                 i++;

  00dd8	e2844001	 add         r4, r4, #1
  00ddc	e354000f	 cmp         r4, #0xF
  00de0	dafffff4	 ble         |$LL9@InterruptT|

; 1189 :             }
; 1190 :             fInterrupt = TRUE;

  00de4	e3a04001	 mov         r4, #1
  00de8		 |$LN10@InterruptT|

; 1191 :         }
; 1192 :         
; 1193 :         // 4. Handle TX Endpoint interrupt
; 1194 :         if (intr_tx)

  00de8	e3570000	 cmp         r7, #0
  00dec	0a00000d	 beq         |$LN6@InterruptT|

; 1195 :         {
; 1196 :             i = 1;

  00df0	e3a04001	 mov         r4, #1
  00df4	e3a03001	 mov         r3, #1
  00df8		 |$LL5@InterruptT|

; 1197 :             while (i <= 15)
; 1198 :             {
; 1199 :                 if (intr_tx & INTR_EP(i))

  00df8	e1a05413	 mov         r5, r3, lsl r4
  00dfc	e1150007	 tst         r5, r7
  00e00	0a000004	 beq         |$LN3@InterruptT|

; 1200 :                 {
; 1201 :                     Device_ProcessEPx_TX(pPdd, i);

  00e04	e1a01004	 mov         r1, r4
  00e08	e1a00008	 mov         r0, r8
  00e0c	eb000000	 bl          Device_ProcessEPx_TX

; 1202 :                     intr_tx &= ~INTR_EP(i);

  00e10	e1c77005	 bic         r7, r7, r5
  00e14	e3a03001	 mov         r3, #1
  00e18		 |$LN3@InterruptT|

; 1203 :                 }
; 1204 :                 i++;

  00e18	e2844001	 add         r4, r4, #1
  00e1c	e354000f	 cmp         r4, #0xF
  00e20	dafffff4	 ble         |$LL5@InterruptT|

; 1205 :             }
; 1206 :             fInterrupt = TRUE;

  00e24	e3a04001	 mov         r4, #1
  00e28		 |$LN6@InterruptT|

; 1207 :         }
; 1208 :         
; 1209 :         // 5. Handle Disconnect
; 1210 :         if (intr_usb & INTRUSB_DISCONN)

  00e28	e3190020	 tst         r9, #0x20
  00e2c	0a000002	 beq         |$LN2@InterruptT|

; 1211 :         {
; 1212 :             Device_Disconnect(pPdd);

  00e30	e1a00008	 mov         r0, r8
  00e34	eb000000	 bl          Device_Disconnect

; 1213 :             intr_usb &= INTRUSB_DISCONN;
; 1214 :             fInterrupt = TRUE;
; 1215 :         }
; 1216 :         
; 1217 :         if( !fInterrupt )

  00e38	eaffffc0	 b           |$LL14@InterruptT|
  00e3c		 |$LN2@InterruptT|
  00e3c	e3540000	 cmp         r4, #0
  00e40	1affffbe	 bne         |$LL14@InterruptT|

; 1218 :         {
; 1219 :             break;
; 1220 :         }
; 1221 :     }
; 1222 :    return ERROR_SUCCESS;

  00e44	e3a00000	 mov         r0, #0

; 1223 : }

  00e48	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00e4c	e12fff1e	 bx          lr
  00e50		 |$LN29@InterruptT|
  00e50		 |$LN30@InterruptT|
  00e50	00000000	 DCD         |??_C@_1LE@ICJADCP@?$AAU?$AAs?$AAb?$AAF?$AAn?$AAP?$AAd?$AAd?$AA?$CB?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr@|
  00e54		 |$LN31@InterruptT|
  00e54	00000000	 DCD         |dpCurSettings|
  00e58		 |$M47295|

			 ENDP  ; |InterruptThread|

	EXPORT	|UfnPdd_IssueTransfer|
	EXPORT	|??_C@_1DA@NCOAFPN@?$AA?9?$AAU?$AAf?$AAn?$AAP?$AAd?$AAd?$AA_?$AAI?$AAs?$AAs?$AAu?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GC@NGNENNDF@?$AAU?$AAf?$AAn?$AAP?$AAd?$AAd?$AA_?$AAI?$AAs?$AAs?$AAu?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AA?3?$AA?5?$AA?5?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAp?$AAT?$AAr@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DA@IAIKGPDF@?$AA?$CL?$AAU?$AAf?$AAn?$AAP?$AAd?$AAd?$AA_?$AAI?$AAs?$AAs?$AAu?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00050			 AREA	 |.pdata|, PDATA
|$T47326| DCD	|$LN22@UfnPdd_Iss|
	DCD	0x40004801

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@NCOAFPN@?$AA?9?$AAU?$AAf?$AAn?$AAP?$AAd?$AAd?$AA_?$AAI?$AAs?$AAs?$AAu?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "U", 0x0, "f", 0x0, "n", 0x0, "P", 0x0, "d", 0x0, "d"
	DCB	0x0, "_", 0x0, "I", 0x0, "s", 0x0, "s", 0x0, "u", 0x0, "e"
	DCB	0x0, "T", 0x0, "r", 0x0, "a", 0x0, "n", 0x0, "s", 0x0, "f"
	DCB	0x0, "e", 0x0, "r", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GC@NGNENNDF@?$AAU?$AAf?$AAn?$AAP?$AAd?$AAd?$AA_?$AAI?$AAs?$AAs?$AAu?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AA?3?$AA?5?$AA?5?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAp?$AAT?$AAr@| DCB "U"
	DCB	0x0, "f", 0x0, "n", 0x0, "P", 0x0, "d", 0x0, "d", 0x0, "_"
	DCB	0x0, "I", 0x0, "s", 0x0, "s", 0x0, "u", 0x0, "e", 0x0, "T"
	DCB	0x0, "r", 0x0, "a", 0x0, "n", 0x0, "s", 0x0, "f", 0x0, "e"
	DCB	0x0, "r", 0x0, ":", 0x0, " ", 0x0, " ", 0x0, "e", 0x0, "r"
	DCB	0x0, "r", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "p", 0x0, "T"
	DCB	0x0, "r", 0x0, "a", 0x0, "n", 0x0, "s", 0x0, "f", 0x0, "e"
	DCB	0x0, "r", 0x0, " ", 0x0, "i", 0x0, "s", 0x0, " ", 0x0, "N"
	DCB	0x0, "U", 0x0, "L", 0x0, "L", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@IAIKGPDF@?$AA?$CL?$AAU?$AAf?$AAn?$AAP?$AAd?$AAd?$AA_?$AAI?$AAs?$AAs?$AAu?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "U", 0x0, "f", 0x0, "n", 0x0, "P", 0x0, "d", 0x0, "d"
	DCB	0x0, "_", 0x0, "I", 0x0, "s", 0x0, "s", 0x0, "u", 0x0, "e"
	DCB	0x0, "T", 0x0, "r", 0x0, "a", 0x0, "n", 0x0, "s", 0x0, "f"
	DCB	0x0, "e", 0x0, "r", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogtp

  00e58			 AREA	 |.text|, CODE, ARM

  00e58		 |UfnPdd_IssueTransfer| PROC

; 1249 : {

  00e58		 |$LN22@UfnPdd_Iss|
  00e58	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00e5c		 |$M47323|
  00e5c	e1a05002	 mov         r5, r2
  00e60	e1a07001	 mov         r7, r1
  00e64	e1a08000	 mov         r8, r0

; 1250 :     DWORD rc = ERROR_INVALID_PARAMETER;
; 1251 :     USBFN_PDD *pPdd = pPddContext;
; 1252 :     PCSP_MUSB_CSR_REGS pCsrRegs = pPdd->pUsbCsrRegs;
; 1253 :     
; 1254 :     
; 1255 :     OALMSG(OAL_ETHER&&OAL_FUNC, (L"+UfnPdd_IssueTransfer\r\n"));

  00e68	e59f6104	 ldr         r6, [pc, #0x104]
  00e6c	e598900c	 ldr         r9, [r8, #0xC]
  00e70	e3a04057	 mov         r4, #0x57
  00e74	e5963440	 ldr         r3, [r6, #0x440]
  00e78	e3130a02	 tst         r3, #2, 20
  00e7c	0a000004	 beq         |$LN8@UfnPdd_Iss|
  00e80	e3130004	 tst         r3, #4
  00e84	0a000002	 beq         |$LN8@UfnPdd_Iss|
  00e88	e59f00e0	 ldr         r0, [pc, #0xE0]
  00e8c	eb000000	 bl          NKDbgPrintfW
  00e90	e5963440	 ldr         r3, [r6, #0x440]
  00e94		 |$LN8@UfnPdd_Iss|

; 1256 :     
; 1257 :     if (pTransfer == NULL) 

  00e94	e3550000	 cmp         r5, #0
  00e98	1a000004	 bne         |$LN5@UfnPdd_Iss|

; 1258 :     {
; 1259 :         OALMSG(OAL_ETHER, (L"UfnPdd_IssueTransfer:  error pTransfer is NULL\r\n"));

  00e9c	e3130a02	 tst         r3, #2, 20
  00ea0	0a000029	 beq         |$ErrorReturn$46336|
  00ea4	e59f00c0	 ldr         r0, [pc, #0xC0]
  00ea8	eb000000	 bl          NKDbgPrintfW

; 1260 :         goto ErrorReturn;

  00eac	ea000025	 b           |$LN18@UfnPdd_Iss|
  00eb0		 |$LN5@UfnPdd_Iss|

; 1261 :     }    
; 1262 :     
; 1263 :     // Save transfer for interrupt thread
; 1264 : //    ASSERT(pPdd->ep[endpoint].pTransfer == NULL);
; 1265 :     pPdd->ep[endpoint].pTransfer = pTransfer;

  00eb0	e0873107	 add         r3, r7, r7, lsl #2
  00eb4	e0882103	 add         r2, r8, r3, lsl #2
  00eb8	e5825038	 str         r5, [r2, #0x38]

; 1266 :     
; 1267 :     // If transfer buffer is NULL length must be zero
; 1268 :     if (pTransfer->pvBuffer == NULL)

  00ebc	e5953004	 ldr         r3, [r5, #4]
  00ec0	e3a0e000	 mov         lr, #0
  00ec4	e3530000	 cmp         r3, #0

; 1269 :         pTransfer->cbBuffer = 0;

  00ec8	0585e00c	 streq       lr, [r5, #0xC]

; 1270 :     
; 1271 : //    OALMSG(OAL_ETHER&&OAL_FUNC, (TEXT("IssueTransfer: ep(%d), length(%d), (%s) max packet(%d)\r\n"), 
; 1272 : //OALMSG(1, (TEXT("IssueTransfer: ep(%d), length(%d), (%s) \r\n"), 
; 1273 : //        endpoint, pTransfer->cbBuffer, (TRANSFER_IS_IN(pTransfer)? TEXT("IN"): TEXT("OUT"))));
; 1274 : //    DEBUGCHK(pTransfer->dwUsbError == UFN_NOT_COMPLETE_ERROR);
; 1275 :     
; 1276 :     if ((endpoint == 0) &&(pPdd->ep0State == EP0_ST_SETUP_PROCESSED))

  00ecc	e3570000	 cmp         r7, #0
  00ed0	1a000005	 bne         |$LN3@UfnPdd_Iss|
  00ed4	e5983178	 ldr         r3, [r8, #0x178]
  00ed8	e3530001	 cmp         r3, #1
  00edc	1a000002	 bne         |$LN3@UfnPdd_Iss|

; 1277 :     {
; 1278 :         SETREG16(&pCsrRegs->ep[endpoint].CSR.CSR0, CSR0_P_SERVICEDRXPKTRDY);

  00ee0	e1d930b2	 ldrh        r3, [r9, #2]
  00ee4	e3833040	 orr         r3, r3, #0x40
  00ee8	e1c930b2	 strh        r3, [r9, #2]
  00eec		 |$LN3@UfnPdd_Iss|

; 1279 :     }
; 1280 :     
; 1281 :     // Depending on direction
; 1282 :     if (TRANSFER_IS_IN(pTransfer))

  00eec	e5953000	 ldr         r3, [r5]
  00ef0	e3130080	 tst         r3, #0x80
  00ef4	0a00000e	 beq         |$LN2@UfnPdd_Iss|

; 1283 :     {
; 1284 :         pPdd->ep[endpoint].zeroLength =(pTransfer->cbBuffer == 0);

  00ef8	e595300c	 ldr         r3, [r5, #0xC]
  00efc	e3530000	 cmp         r3, #0
  00f00	1a000005	 bne         |$LN12@UfnPdd_Iss|
  00f04	e3a03001	 mov         r3, #1

; 1285 :         rc = ContinueTxTransfer(pPdd, endpoint);

  00f08	e1a01007	 mov         r1, r7
  00f0c	e1a00008	 mov         r0, r8
  00f10	e5823034	 str         r3, [r2, #0x34]
  00f14	eb000000	 bl          ContinueTxTransfer

; 1286 :     }
; 1287 :     else

  00f18	ea000009	 b           |$LN19@UfnPdd_Iss|
  00f1c		 |$LN12@UfnPdd_Iss|

; 1283 :     {
; 1284 :         pPdd->ep[endpoint].zeroLength =(pTransfer->cbBuffer == 0);

  00f1c	e3a03000	 mov         r3, #0

; 1285 :         rc = ContinueTxTransfer(pPdd, endpoint);

  00f20	e1a01007	 mov         r1, r7
  00f24	e1a00008	 mov         r0, r8
  00f28	e5823034	 str         r3, [r2, #0x34]
  00f2c	eb000000	 bl          ContinueTxTransfer

; 1286 :     }
; 1287 :     else

  00f30	ea000003	 b           |$LN19@UfnPdd_Iss|
  00f34		 |$LN2@UfnPdd_Iss|

; 1288 :     {
; 1289 :         pPdd->ep[endpoint].zeroLength = FALSE;
; 1290 :         rc = StartRxTransfer(pPdd, endpoint);

  00f34	e1a01007	 mov         r1, r7
  00f38	e1a00008	 mov         r0, r8
  00f3c	e582e034	 str         lr, [r2, #0x34]
  00f40	eb000000	 bl          StartRxTransfer
  00f44		 |$LN19@UfnPdd_Iss|
  00f44	e1a04000	 mov         r4, r0
  00f48		 |$LN18@UfnPdd_Iss|
  00f48	e5963440	 ldr         r3, [r6, #0x440]
  00f4c		 |$ErrorReturn$46336|

; 1291 :     }
; 1292 :     
; 1293 : ErrorReturn:
; 1294 :     OALMSG(OAL_ETHER&&OAL_FUNC, (L"-UfnPdd_IssueTransfer\r\n"));

  00f4c	e3130a02	 tst         r3, #2, 20
  00f50	13130004	 tstne       r3, #4
  00f54	159f000c	 ldrne       r0, [pc, #0xC]
  00f58	1b000000	 blne        NKDbgPrintfW

; 1295 :     return rc;
; 1296 :     
; 1297 :     //    return ERROR_SUCCESS;
; 1298 : }

  00f5c	e1a00004	 mov         r0, r4
  00f60	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  00f64	e12fff1e	 bx          lr
  00f68		 |$LN23@UfnPdd_Iss|
  00f68		 |$LN24@UfnPdd_Iss|
  00f68	00000000	 DCD         |??_C@_1DA@NCOAFPN@?$AA?9?$AAU?$AAf?$AAn?$AAP?$AAd?$AAd?$AA_?$AAI?$AAs?$AAs?$AAu?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@|
  00f6c		 |$LN25@UfnPdd_Iss|
  00f6c	00000000	 DCD         |??_C@_1GC@NGNENNDF@?$AAU?$AAf?$AAn?$AAP?$AAd?$AAd?$AA_?$AAI?$AAs?$AAs?$AAu?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AA?3?$AA?5?$AA?5?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAp?$AAT?$AAr@|
  00f70		 |$LN26@UfnPdd_Iss|
  00f70	00000000	 DCD         |??_C@_1DA@IAIKGPDF@?$AA?$CL?$AAU?$AAf?$AAn?$AAP?$AAd?$AAd?$AA_?$AAI?$AAs?$AAs?$AAu?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@|
  00f74		 |$LN27@UfnPdd_Iss|
  00f74	00000000	 DCD         |dpCurSettings|
  00f78		 |$M47324|

			 ENDP  ; |UfnPdd_IssueTransfer|

	EXPORT	|??_C@_1DO@OPAMNHLJ@?$AA?9?$AAU?$AAs?$AAb?$AAF?$AAn?$AAP?$AAd?$AAd?$AA?$CB?$AAC?$AAo?$AAn?$AAt?$AAi?$AAn?$AAu?$AAe?$AAT?$AAx?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FM@OBLLBJJA@?$AAS?$AAe?$AAt?$AA?5?$AAO?$AAU?$AAT?$AA?5?$AAM?$AAs?$AAg?$AA?5?$AA?$DN?$AA?$DO?$AA?5?$AAe?$AAp?$AA0?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?5?$AA?$DN?$AA?5?$AAE?$AAP?$AA0?$AA_?$AAS?$AAT@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BM@LMLHKPJF@?$AAD?$AAA?$AAT?$AAA?$AAE?$AAN?$AAD?$AA?5?$AAa?$AAd?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CK@EOKGALAH@?$AAT?$AAx?$AA?5?$AAp?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?5?$AAs?$AAi?$AAz?$AAe?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GE@JLPAIEOM@?$AAE?$AAP?$AA0?$AA_?$AAS?$AAT?$AA_?$AAD?$AAA?$AAT?$AAA?$AA_?$AAT?$AAX?$AA?5?$AAs?$AAp?$AAa?$AAc?$AAe?$AA_?$AAl?$AAe?$AAf?$AAt?$AA_?$AAt?$AAo?$AA_?$AAs?$AAe?$AAn@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CK@HGADPGKD@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DG@GAFCGMNC@?$AAW?$AAr?$AAi?$AAt?$AAe?$AAF?$AAI?$AAF?$AAO?$AA?5?$AAE?$AAP?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DC@IJMAINHK@?$AAT?$AAX?$AAP?$AAK?$AAT?$AAR?$AAd?$AAy?$AA?5?$AAb?$AAi?$AAt?$AA?5?$AAi?$AAs?$AA?5?$AAs?$AAe?$AAt?$AA?5?$AA?4?$AA?4?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FM@NNMILMFN@?$AAe?$AAn?$AAd?$AAp?$AAo?$AAi?$AAn?$AAt?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?5?$AAc?$AAb?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?5?$AAc?$AAb?$AAT?$AAr?$AAa?$AAn@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DG@KJCFCKAI@?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?$CB?$AA?5?$AAp?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AA?5?$AAi?$AAs?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1II@PBHEPHNB@?$AA?$CL?$AAU?$AAs?$AAb?$AAF?$AAn?$AAP?$AAd?$AAd?$AA?$CB?$AAC?$AAo?$AAn?$AAt?$AAi?$AAn?$AAu?$AAe?$AAT?$AAx?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AA?3?$AA?5?$AAE?$AAP@| [ DATA ] ; `string'

  00058			 AREA	 |.pdata|, PDATA
|$T47388| DCD	|$LN55@ContinueTx|
	DCD	0x4000d302

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@OPAMNHLJ@?$AA?9?$AAU?$AAs?$AAb?$AAF?$AAn?$AAP?$AAd?$AAd?$AA?$CB?$AAC?$AAo?$AAn?$AAt?$AAi?$AAn?$AAu?$AAe?$AAT?$AAx?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "U", 0x0, "s", 0x0, "b", 0x0, "F", 0x0, "n", 0x0, "P"
	DCB	0x0, "d", 0x0, "d", 0x0, "!", 0x0, "C", 0x0, "o", 0x0, "n"
	DCB	0x0, "t", 0x0, "i", 0x0, "n", 0x0, "u", 0x0, "e", 0x0, "T"
	DCB	0x0, "x", 0x0, "T", 0x0, "r", 0x0, "a", 0x0, "n", 0x0, "s"
	DCB	0x0, "f", 0x0, "e", 0x0, "r", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FM@OBLLBJJA@?$AAS?$AAe?$AAt?$AA?5?$AAO?$AAU?$AAT?$AA?5?$AAM?$AAs?$AAg?$AA?5?$AA?$DN?$AA?$DO?$AA?5?$AAe?$AAp?$AA0?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?5?$AA?$DN?$AA?5?$AAE?$AAP?$AA0?$AA_?$AAS?$AAT@| DCB "S"
	DCB	0x0, "e", 0x0, "t", 0x0, " ", 0x0, "O", 0x0, "U", 0x0, "T"
	DCB	0x0, " ", 0x0, "M", 0x0, "s", 0x0, "g", 0x0, " ", 0x0, "="
	DCB	0x0, ">", 0x0, " ", 0x0, "e", 0x0, "p", 0x0, "0", 0x0, "S"
	DCB	0x0, "t", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, " ", 0x0, "="
	DCB	0x0, " ", 0x0, "E", 0x0, "P", 0x0, "0", 0x0, "_", 0x0, "S"
	DCB	0x0, "T", 0x0, "_", 0x0, "S", 0x0, "T", 0x0, "A", 0x0, "T"
	DCB	0x0, "U", 0x0, "S", 0x0, "_", 0x0, "O", 0x0, "U", 0x0, "T"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@LMLHKPJF@?$AAD?$AAA?$AAT?$AAA?$AAE?$AAN?$AAD?$AA?5?$AAa?$AAd?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "D"
	DCB	0x0, "A", 0x0, "T", 0x0, "A", 0x0, "E", 0x0, "N", 0x0, "D"
	DCB	0x0, " ", 0x0, "a", 0x0, "d", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CK@EOKGALAH@?$AAT?$AAx?$AA?5?$AAp?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?5?$AAs?$AAi?$AAz?$AAe?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "T"
	DCB	0x0, "x", 0x0, " ", 0x0, "p", 0x0, "a", 0x0, "c", 0x0, "k"
	DCB	0x0, "e", 0x0, "t", 0x0, " ", 0x0, "s", 0x0, "i", 0x0, "z"
	DCB	0x0, "e", 0x0, ":", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GE@JLPAIEOM@?$AAE?$AAP?$AA0?$AA_?$AAS?$AAT?$AA_?$AAD?$AAA?$AAT?$AAA?$AA_?$AAT?$AAX?$AA?5?$AAs?$AAp?$AAa?$AAc?$AAe?$AA_?$AAl?$AAe?$AAf?$AAt?$AA_?$AAt?$AAo?$AA_?$AAs?$AAe?$AAn@| DCB "E"
	DCB	0x0, "P", 0x0, "0", 0x0, "_", 0x0, "S", 0x0, "T", 0x0, "_"
	DCB	0x0, "D", 0x0, "A", 0x0, "T", 0x0, "A", 0x0, "_", 0x0, "T"
	DCB	0x0, "X", 0x0, " ", 0x0, "s", 0x0, "p", 0x0, "a", 0x0, "c"
	DCB	0x0, "e", 0x0, "_", 0x0, "l", 0x0, "e", 0x0, "f", 0x0, "t"
	DCB	0x0, "_", 0x0, "t", 0x0, "o", 0x0, "_", 0x0, "s", 0x0, "e"
	DCB	0x0, "n", 0x0, "d", 0x0, "=", 0x0, "%", 0x0, "d", 0x0, " "
	DCB	0x0, "t", 0x0, "x", 0x0, "c", 0x0, "o", 0x0, "u", 0x0, "n"
	DCB	0x0, "t", 0x0, "=", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CK@HGADPGKD@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "I"
	DCB	0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d"
	DCB	0x0, " ", 0x0, "S", 0x0, "t", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DG@GAFCGMNC@?$AAW?$AAr?$AAi?$AAt?$AAe?$AAF?$AAI?$AAF?$AAO?$AA?5?$AAE?$AAP?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "W"
	DCB	0x0, "r", 0x0, "i", 0x0, "t", 0x0, "e", 0x0, "F", 0x0, "I"
	DCB	0x0, "F", 0x0, "O", 0x0, " ", 0x0, "E", 0x0, "P", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "S", 0x0, "i"
	DCB	0x0, "z", 0x0, "e", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DC@IJMAINHK@?$AAT?$AAX?$AAP?$AAK?$AAT?$AAR?$AAd?$AAy?$AA?5?$AAb?$AAi?$AAt?$AA?5?$AAi?$AAs?$AA?5?$AAs?$AAe?$AAt?$AA?5?$AA?4?$AA?4?$AA?$AN?$AA?6?$AA?$AA@| DCB "T"
	DCB	0x0, "X", 0x0, "P", 0x0, "K", 0x0, "T", 0x0, "R", 0x0, "d"
	DCB	0x0, "y", 0x0, " ", 0x0, "b", 0x0, "i", 0x0, "t", 0x0, " "
	DCB	0x0, "i", 0x0, "s", 0x0, " ", 0x0, "s", 0x0, "e", 0x0, "t"
	DCB	0x0, " ", 0x0, ".", 0x0, ".", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FM@NNMILMFN@?$AAe?$AAn?$AAd?$AAp?$AAo?$AAi?$AAn?$AAt?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?5?$AAc?$AAb?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?5?$AAc?$AAb?$AAT?$AAr?$AAa?$AAn@| DCB "e"
	DCB	0x0, "n", 0x0, "d", 0x0, "p", 0x0, "o", 0x0, "i", 0x0, "n"
	DCB	0x0, "t", 0x0, "(", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, " "
	DCB	0x0, "c", 0x0, "b", 0x0, "B", 0x0, "u", 0x0, "f", 0x0, "f"
	DCB	0x0, "e", 0x0, "r", 0x0, "(", 0x0, "%", 0x0, "d", 0x0, ")"
	DCB	0x0, " ", 0x0, "c", 0x0, "b", 0x0, "T", 0x0, "r", 0x0, "a"
	DCB	0x0, "n", 0x0, "s", 0x0, "f", 0x0, "e", 0x0, "r", 0x0, "r"
	DCB	0x0, "e", 0x0, "d", 0x0, "(", 0x0, "%", 0x0, "d", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DG@KJCFCKAI@?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?$CB?$AA?5?$AAp?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AA?5?$AAi?$AAs?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AN?$AA?6?$AA?$AA@| DCB "E"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, "!", 0x0, " "
	DCB	0x0, "p", 0x0, "T", 0x0, "r", 0x0, "a", 0x0, "n", 0x0, "s"
	DCB	0x0, "f", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, "i", 0x0, "s"
	DCB	0x0, " ", 0x0, "N", 0x0, "U", 0x0, "L", 0x0, "L", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1II@PBHEPHNB@?$AA?$CL?$AAU?$AAs?$AAb?$AAF?$AAn?$AAP?$AAd?$AAd?$AA?$CB?$AAC?$AAo?$AAn?$AAt?$AAi?$AAn?$AAu?$AAe?$AAT?$AAx?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AA?3?$AA?5?$AAE?$AAP@| DCB "+"
	DCB	0x0, "U", 0x0, "s", 0x0, "b", 0x0, "F", 0x0, "n", 0x0, "P"
	DCB	0x0, "d", 0x0, "d", 0x0, "!", 0x0, "C", 0x0, "o", 0x0, "n"
	DCB	0x0, "t", 0x0, "i", 0x0, "n", 0x0, "u", 0x0, "e", 0x0, "T"
	DCB	0x0, "x", 0x0, "T", 0x0, "r", 0x0, "a", 0x0, "n", 0x0, "s"
	DCB	0x0, "f", 0x0, "e", 0x0, "r", 0x0, ":", 0x0, " ", 0x0, "E"
	DCB	0x0, "P", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, "p"
	DCB	0x0, "T", 0x0, "r", 0x0, "a", 0x0, "n", 0x0, "s", 0x0, "f"
	DCB	0x0, "e", 0x0, "r", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "8", 0x0, "x", 0x0, " ", 0x0, "(", 0x0, "%"
	DCB	0x0, "d", 0x0, ",", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ","
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Ogtp

  00f78			 AREA	 |.text|, CODE, ARM

  00f78		 |ContinueTxTransfer| PROC

; 290  : {

  00f78		 |$LN55@ContinueTx|
  00f78	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00f7c	e24dd010	 sub         sp, sp, #0x10
  00f80		 |$M47385|
  00f80	e1a07001	 mov         r7, r1
  00f84	e1a09000	 mov         r9, r0

; 291  :     DWORD rc = ERROR_INVALID_PARAMETER;
; 292  :     USBFN_EP *pEP = &pPdd->ep[endpoint];
; 293  :     PCSP_MUSB_CSR_REGS pCsrRegs = pPdd->pUsbCsrRegs;
; 294  :     STransfer *pTransfer = pEP->pTransfer;
; 295  :     DWORD space, txcount;
; 296  :     UCHAR *pBuffer;
; 297  :     DWORD dwFlag;
; 298  :     
; 299  :     OALMSG(OAL_ETHER&&OAL_FUNC, (L"+UsbFnPdd!ContinueTxTransfer: "
; 300  :         L"EP %d pTransfer 0x%08x (%d, %d, %d)\r\n",
; 301  :         endpoint, pTransfer, pTransfer != NULL ? pTransfer->cbBuffer : 0,
; 302  :         pTransfer != NULL ? pTransfer->cbTransferred : 0,
; 303  :         pTransfer != NULL ? pTransfer->dwUsbError : -1
; 304  :         ));

  00f88	e59f4330	 ldr         r4, [pc, #0x330]
  00f8c	e0873107	 add         r3, r7, r7, lsl #2
  00f90	e089a103	 add         r10, r9, r3, lsl #2
  00f94	e5943440	 ldr         r3, [r4, #0x440]
  00f98	e599b00c	 ldr         r11, [r9, #0xC]
  00f9c	e59a5038	 ldr         r5, [r10, #0x38]
  00fa0	e3130a02	 tst         r3, #2, 20
  00fa4	e3a06057	 mov         r6, #0x57
  00fa8	0a000011	 beq         |$LN16@ContinueTx|
  00fac	e3130004	 tst         r3, #4
  00fb0	0a00000f	 beq         |$LN16@ContinueTx|
  00fb4	e3550000	 cmp         r5, #0
  00fb8	0a000003	 beq         |$LN17@ContinueTx|
  00fbc	e595e014	 ldr         lr, [r5, #0x14]
  00fc0	e5958010	 ldr         r8, [r5, #0x10]
  00fc4	e595300c	 ldr         r3, [r5, #0xC]
  00fc8	ea000002	 b           |$LN22@ContinueTx|
  00fcc		 |$LN17@ContinueTx|
  00fcc	e3e0e000	 mvn         lr, #0
  00fd0	e3a08000	 mov         r8, #0
  00fd4	e3a03000	 mov         r3, #0
  00fd8		 |$LN22@ContinueTx|
  00fd8	e59f02dc	 ldr         r0, [pc, #0x2DC]
  00fdc	e1a02005	 mov         r2, r5
  00fe0	e1a01007	 mov         r1, r7
  00fe4	e58de004	 str         lr, [sp, #4]
  00fe8	e58d8000	 str         r8, [sp]
  00fec	eb000000	 bl          NKDbgPrintfW
  00ff0	e5943440	 ldr         r3, [r4, #0x440]
  00ff4		 |$LN16@ContinueTx|

; 305  : 
; 306  :     if (pTransfer == NULL) 

  00ff4	e3550000	 cmp         r5, #0
  00ff8	1a000004	 bne         |$LN13@ContinueTx|

; 307  :     {
; 308  :         OALMSG(OAL_ERROR, (L"Error! pTransfer is NULL\r\n"));

  00ffc	e3130001	 tst         r3, #1
  01000	0a00009b	 beq         |$CleanUp$45892|
  01004	e59f02ac	 ldr         r0, [pc, #0x2AC]
  01008	eb000000	 bl          NKDbgPrintfW

; 309  :         goto CleanUp;

  0100c	ea000097	 b           |$LN52@ContinueTx|
  01010		 |$LN13@ContinueTx|

; 310  :     }    
; 311  :       
; 312  :     {
; 313  :        
; 314  :         pBuffer =(UCHAR*)pTransfer->pvBuffer + pTransfer->cbTransferred;

  01010	e5958010	 ldr         r8, [r5, #0x10]
  01014	e5952004	 ldr         r2, [r5, #4]

; 315  :         space = pTransfer->cbBuffer - pTransfer->cbTransferred;

  01018	e595e00c	 ldr         lr, [r5, #0xC]
  0101c	e58d8008	 str         r8, [sp, #8]
  01020	e58d200c	 str         r2, [sp, #0xC]

; 316  :                 
; 317  :         if (endpoint != 0)

  01024	e04e1008	 sub         r1, lr, r8
  01028	e3570000	 cmp         r7, #0
  0102c	0a00002d	 beq         |$LN12@ContinueTx|

; 318  :         {
; 319  :             if (INREG16(&pCsrRegs->ep[endpoint].CSR.TxCSR) & TXCSR_P_TXPKTRDY)

  01030	e08b8207	 add         r8, r11, r7, lsl #4
  01034	e1d820b2	 ldrh        r2, [r8, #2]
  01038	e3120001	 tst         r2, #1
  0103c	0a000010	 beq         |$LN11@ContinueTx|

; 320  :             {
; 321  :                 OALMSG(OAL_ETHER&&OAL_FUNC, (TEXT("endpoint(%d) cbBuffer(%d) cbTransferred(%d)\r\n"), endpoint, pTransfer->cbBuffer, pTransfer->cbTransferred));

  01040	e3130a02	 tst         r3, #2, 20
  01044	0a000007	 beq         |$LN26@ContinueTx|
  01048	e3130004	 tst         r3, #4
  0104c	0a000005	 beq         |$LN26@ContinueTx|
  01050	e59f0254	 ldr         r0, [pc, #0x254]
  01054	e59d3008	 ldr         r3, [sp, #8]
  01058	e1a0200e	 mov         r2, lr
  0105c	e1a01007	 mov         r1, r7
  01060	eb000000	 bl          NKDbgPrintfW
  01064	e5943440	 ldr         r3, [r4, #0x440]
  01068		 |$LN26@ContinueTx|

; 322  :                 OALMSG(OAL_ETHER&&OAL_FUNC, (TEXT("TXPKTRdy bit is set ..\r\n")));

  01068	e3130a02	 tst         r3, #2, 20
  0106c	0a000080	 beq         |$CleanUp$45892|
  01070	e3130004	 tst         r3, #4
  01074	0a00007e	 beq         |$CleanUp$45892|
  01078	e59f0228	 ldr         r0, [pc, #0x228]
  0107c	eb000000	 bl          NKDbgPrintfW

; 323  :                 
; 324  :                 goto CleanUp;

  01080	ea00007a	 b           |$LN52@ContinueTx|
  01084		 |$LN11@ContinueTx|

; 325  :             }
; 326  :             else
; 327  :             {
; 328  :                 // How many bytes we can send just now?
; 329  :                 txcount = pEP->maxPacketSize;

  01084	e1da62bc	 ldrh        r6, [r10, #0x2C]

; 330  :                 if (txcount > space)

  01088	e1560001	 cmp         r6, r1

; 331  :                     txcount = space;

  0108c	81a06001	 movhi       r6, r1

; 332  :                 
; 333  :                 OALMSG(OAL_ETHER&&OAL_FUNC, (TEXT("WriteFIFO EP %d, Size %d\r\n"), endpoint, txcount));

  01090	e3130a02	 tst         r3, #2, 20
  01094	0a000005	 beq         |$LN30@ContinueTx|
  01098	e3130004	 tst         r3, #4
  0109c	0a000003	 beq         |$LN30@ContinueTx|
  010a0	e59f020c	 ldr         r0, [pc, #0x20C]
  010a4	e1a02006	 mov         r2, r6
  010a8	e1a01007	 mov         r1, r7
  010ac	eb000000	 bl          NKDbgPrintfW
  010b0		 |$LN30@ContinueTx|

; 334  :                 //memdump((uchar *)pBuffer, (unsigned short)txcount, 0);
; 335  :                 // Write data to FIFO
; 336  :                 WriteFIFO(pPdd, (UCHAR) endpoint, pBuffer, txcount);

  010b0	e59d2008	 ldr         r2, [sp, #8]
  010b4	e59d100c	 ldr         r1, [sp, #0xC]
  010b8	e1a03006	 mov         r3, r6
  010bc	e1a00009	 mov         r0, r9
  010c0	e0812002	 add         r2, r1, r2
  010c4	e20710ff	 and         r1, r7, #0xFF
  010c8	eb000000	 bl          WriteFIFO

; 337  :                 
; 338  :                 // We transfered some data
; 339  :                 pTransfer->cbTransferred += txcount;                

  010cc	e5953010	 ldr         r3, [r5, #0x10]
  010d0	e0833006	 add         r3, r3, r6
  010d4	e5853010	 str         r3, [r5, #0x10]

; 340  :                 SETREG16(&pCsrRegs->ep[endpoint].CSR.TxCSR, TXCSR_P_TXPKTRDY);

  010d8	e1d830b2	 ldrh        r3, [r8, #2]
  010dc	e3833001	 orr         r3, r3, #1
  010e0	e1c830b2	 strh        r3, [r8, #2]

; 341  :             } 
; 342  :         }
; 343  :         else // endpoint == 0

  010e4	ea000060	 b           |$LN4@ContinueTx|
  010e8		 |$LN12@ContinueTx|

; 344  :         {
; 345  :             // Zero endpoint: Zero length padding needed
; 346  :             // if last packet is maxPacketSize.
; 347  :             pEP->zeroLength =
; 348  :                 (space == pEP->maxPacketSize) &&
; 349  :                 (pPdd->setupCount > pTransfer->cbBuffer);

  010e8	e1da32bc	 ldrh        r3, [r10, #0x2C]
  010ec	e1510003	 cmp         r1, r3
  010f0	1a000003	 bne         |$LN32@ContinueTx|
  010f4	e1d932b4	 ldrh        r3, [r9, #0x24]
  010f8	e153000e	 cmp         r3, lr
  010fc	83a03001	 movhi       r3, #1
  01100	8a000000	 bhi         |$LN33@ContinueTx|
  01104		 |$LN32@ContinueTx|
  01104	e3a03000	 mov         r3, #0
  01108		 |$LN33@ContinueTx|
  01108	e58a3034	 str         r3, [r10, #0x34]

; 350  :             
; 351  :             if (pPdd->ep0State != EP0_ST_SETUP_PROCESSED)

  0110c	e5992178	 ldr         r2, [r9, #0x178]
  01110	e3520001	 cmp         r2, #1
  01114	0a000006	 beq         |$LN7@ContinueTx|

; 352  :             {
; 353  :                 OALMSG(OAL_ERROR, (TEXT("Invalid State = %d\r\n"), pPdd->ep0State));

  01118	e5943440	 ldr         r3, [r4, #0x440]
  0111c	e3130001	 tst         r3, #1
  01120	0a000053	 beq         |$CleanUp$45892|
  01124	e59f0184	 ldr         r0, [pc, #0x184]
  01128	e1a01002	 mov         r1, r2
  0112c	eb000000	 bl          NKDbgPrintfW

; 354  :                 goto CleanUp;

  01130	ea00004e	 b           |$LN52@ContinueTx|
  01134		 |$LN7@ContinueTx|

; 355  :             }
; 356  :             else
; 357  :             {
; 358  :                 pPdd->ep0State = EP0_ST_DATA_TX;

  01134	e3a03005	 mov         r3, #5
  01138	e5893178	 str         r3, [r9, #0x178]

; 359  :                 if (INREG16(&pCsrRegs->ep[endpoint].CSR.CSR0) & CSR0_P_TXPKTRDY)

  0113c	e1db30b2	 ldrh        r3, [r11, #2]
  01140	e3130002	 tst         r3, #2
  01144	0a00000d	 beq         |$LN5@ContinueTx|

; 360  :                 {
; 361  :                     OALMSG(OAL_ERROR, (TEXT("endpoint(%d) cbBuffer(%d) cbTransferred(%d)\r\n"), endpoint, pTransfer->cbBuffer, pTransfer->cbTransferred));

  01148	e5943440	 ldr         r3, [r4, #0x440]
  0114c	e3130001	 tst         r3, #1
  01150	0a000005	 beq         |$LN36@ContinueTx|
  01154	e5953010	 ldr         r3, [r5, #0x10]
  01158	e595200c	 ldr         r2, [r5, #0xC]
  0115c	e59f0148	 ldr         r0, [pc, #0x148]
  01160	e3a01000	 mov         r1, #0
  01164	eb000000	 bl          NKDbgPrintfW
  01168	e5943440	 ldr         r3, [r4, #0x440]
  0116c		 |$LN36@ContinueTx|

; 362  :                     OALMSG(OAL_ERROR, (TEXT("TXPKTRdy bit is set ..\r\n")));

  0116c	e3130001	 tst         r3, #1
  01170	0a00003f	 beq         |$CleanUp$45892|
  01174	e59f012c	 ldr         r0, [pc, #0x12C]
  01178	eb000000	 bl          NKDbgPrintfW

; 363  :                     goto CleanUp;

  0117c	ea00003b	 b           |$LN52@ContinueTx|
  01180		 |$LN5@ContinueTx|

; 364  :                 }
; 365  :                 else
; 366  :                 {
; 367  :                     // How many bytes we can send just now?
; 368  :                     txcount = pEP->maxPacketSize;

  01180	e1da62bc	 ldrh        r6, [r10, #0x2C]

; 369  :                     if (txcount > space)
; 370  :                         txcount = space;
; 371  :                     
; 372  :                     OALMSG(OAL_ETHER&&OAL_FUNC, (L"EP0_ST_DATA_TX space_left_to_send=%d txcount=%d\r\n", space, txcount));

  01184	e5943440	 ldr         r3, [r4, #0x440]
  01188	e1560001	 cmp         r6, r1
  0118c	81a06001	 movhi       r6, r1
  01190	e3130a02	 tst         r3, #2, 20
  01194	0a000004	 beq         |$LN40@ContinueTx|
  01198	e3130004	 tst         r3, #4
  0119c	0a000002	 beq         |$LN40@ContinueTx|
  011a0	e59f00fc	 ldr         r0, [pc, #0xFC]
  011a4	e1a02006	 mov         r2, r6
  011a8	eb000000	 bl          NKDbgPrintfW
  011ac		 |$LN40@ContinueTx|

; 373  :                     
; 374  :                     // Write data to FIFO
; 375  :                     WriteFIFO(pPdd, EP0, pBuffer, txcount);

  011ac	e59d100c	 ldr         r1, [sp, #0xC]
  011b0	e1a03006	 mov         r3, r6
  011b4	e1a00009	 mov         r0, r9
  011b8	e0812008	 add         r2, r1, r8
  011bc	e3a01000	 mov         r1, #0
  011c0	eb000000	 bl          WriteFIFO

; 376  :                     
; 377  :                     // We transfered some data
; 378  :                     pTransfer->cbTransferred += txcount;

  011c4	e5953010	 ldr         r3, [r5, #0x10]
  011c8	e0833006	 add         r3, r3, r6
  011cc	e5853010	 str         r3, [r5, #0x10]

; 379  :                     
; 380  :                     OALMSG(OAL_ETHER&&OAL_FUNC, (L"Tx packet size: %d\r\n",
; 381  :                         pTransfer->cbBuffer
; 382  :                         ));

  011d0	e5941440	 ldr         r1, [r4, #0x440]
  011d4	e3110a02	 tst         r1, #2, 20
  011d8	0a000005	 beq         |$LN42@ContinueTx|
  011dc	e3110004	 tst         r1, #4
  011e0	0a000003	 beq         |$LN42@ContinueTx|
  011e4	e595100c	 ldr         r1, [r5, #0xC]
  011e8	e59f00b0	 ldr         r0, [pc, #0xB0]
  011ec	eb000000	 bl          NKDbgPrintfW
  011f0	e5941440	 ldr         r1, [r4, #0x440]
  011f4		 |$LN42@ContinueTx|

; 383  :                                         
; 384  :                     if (pTransfer->cbTransferred == pTransfer->cbBuffer)

  011f4	e5952010	 ldr         r2, [r5, #0x10]
  011f8	e595300c	 ldr         r3, [r5, #0xC]
  011fc	e1520003	 cmp         r2, r3
  01200	1a000015	 bne         |$LN2@ContinueTx|

; 385  :                     {
; 386  :                         OALMSG(OAL_ETHER&&OAL_FUNC, (TEXT("DATAEND add\r\n")));

  01204	e3110a02	 tst         r1, #2, 20
  01208	13110004	 tstne       r1, #4
  0120c	159f0088	 ldrne       r0, [pc, #0x88]
  01210	1b000000	 blne        NKDbgPrintfW

; 387  :                         pPdd->ep0State = EP0_ST_STATUS_OUT;

  01214	e3a03003	 mov         r3, #3
  01218	e5893178	 str         r3, [r9, #0x178]

; 388  :                         OALMSG(OAL_ETHER&&OAL_FUNC, (TEXT("Set OUT Msg => ep0State = EP0_ST_STATUS_OUT\r\n")));

  0121c	e5943440	 ldr         r3, [r4, #0x440]
  01220	e3130a02	 tst         r3, #2, 20
  01224	13130004	 tstne       r3, #4
  01228	159f0068	 ldrne       r0, [pc, #0x68]
  0122c	1b000000	 blne        NKDbgPrintfW

; 389  :                         dwFlag = CSR0_P_TXPKTRDY | CSR0_P_DATAEND;
; 390  :                         pEP->pTransfer = NULL;

  01230	e3a03000	 mov         r3, #0
  01234	e58a3038	 str         r3, [r10, #0x38]

; 391  :                         pTransfer->dwUsbError = UFN_NO_ERROR;

  01238	e5853014	 str         r3, [r5, #0x14]

; 392  :                         pPdd->pfnNotify(pPdd->pMddContext, UFN_MSG_TRANSFER_COMPLETE, (DWORD)pTransfer);   

  0123c	e5990000	 ldr         r0, [r9]
  01240	e5993004	 ldr         r3, [r9, #4]
  01244	e1a02005	 mov         r2, r5
  01248	e3a0500a	 mov         r5, #0xA
  0124c	e3a01064	 mov         r1, #0x64
  01250	e1a0e00f	 mov         lr, pc
  01254	e12fff13	 bx          r3

; 393  :                     }
; 394  :                     else

  01258	ea000000	 b           |$LN1@ContinueTx|
  0125c		 |$LN2@ContinueTx|

; 395  :                         dwFlag = CSR0_P_TXPKTRDY;

  0125c	e3a05002	 mov         r5, #2
  01260		 |$LN1@ContinueTx|

; 396  :                     SETREG16(&pCsrRegs->ep[endpoint].CSR.CSR0, dwFlag);                    

  01260	e1db30b2	 ldrh        r3, [r11, #2]
  01264	e1833005	 orr         r3, r3, r5
  01268	e1cb30b2	 strh        r3, [r11, #2]
  0126c		 |$LN4@ContinueTx|

; 397  :                 }                
; 398  :             }
; 399  :         } // if (endpoint != 0)
; 400  :     }
; 401  :     
; 402  :     rc = ERROR_SUCCESS;

  0126c	e3a06000	 mov         r6, #0
  01270		 |$LN52@ContinueTx|
  01270	e5943440	 ldr         r3, [r4, #0x440]
  01274		 |$CleanUp$45892|

; 403  :     
; 404  : CleanUp:
; 405  :     
; 406  :     OALMSG(OAL_ETHER&&OAL_FUNC, (L"-UsbFnPdd!ContinueTxTransfer\r\n"));

  01274	e3130a02	 tst         r3, #2, 20
  01278	13130004	 tstne       r3, #4
  0127c	159f0010	 ldrne       r0, [pc, #0x10]
  01280	1b000000	 blne        NKDbgPrintfW

; 407  :     return rc;
; 408  : }

  01284	e1a00006	 mov         r0, r6
  01288	e28dd010	 add         sp, sp, #0x10
  0128c	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  01290	e12fff1e	 bx          lr
  01294		 |$LN56@ContinueTx|
  01294		 |$LN57@ContinueTx|
  01294	00000000	 DCD         |??_C@_1DO@OPAMNHLJ@?$AA?9?$AAU?$AAs?$AAb?$AAF?$AAn?$AAP?$AAd?$AAd?$AA?$CB?$AAC?$AAo?$AAn?$AAt?$AAi?$AAn?$AAu?$AAe?$AAT?$AAx?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@|
  01298		 |$LN58@ContinueTx|
  01298	00000000	 DCD         |??_C@_1FM@OBLLBJJA@?$AAS?$AAe?$AAt?$AA?5?$AAO?$AAU?$AAT?$AA?5?$AAM?$AAs?$AAg?$AA?5?$AA?$DN?$AA?$DO?$AA?5?$AAe?$AAp?$AA0?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?5?$AA?$DN?$AA?5?$AAE?$AAP?$AA0?$AA_?$AAS?$AAT@|
  0129c		 |$LN59@ContinueTx|
  0129c	00000000	 DCD         |??_C@_1BM@LMLHKPJF@?$AAD?$AAA?$AAT?$AAA?$AAE?$AAN?$AAD?$AA?5?$AAa?$AAd?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  012a0		 |$LN60@ContinueTx|
  012a0	00000000	 DCD         |??_C@_1CK@EOKGALAH@?$AAT?$AAx?$AA?5?$AAp?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?5?$AAs?$AAi?$AAz?$AAe?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  012a4		 |$LN61@ContinueTx|
  012a4	00000000	 DCD         |??_C@_1GE@JLPAIEOM@?$AAE?$AAP?$AA0?$AA_?$AAS?$AAT?$AA_?$AAD?$AAA?$AAT?$AAA?$AA_?$AAT?$AAX?$AA?5?$AAs?$AAp?$AAa?$AAc?$AAe?$AA_?$AAl?$AAe?$AAf?$AAt?$AA_?$AAt?$AAo?$AA_?$AAs?$AAe?$AAn@|
  012a8		 |$LN62@ContinueTx|
  012a8	00000000	 DCD         |??_C@_1DC@IJMAINHK@?$AAT?$AAX?$AAP?$AAK?$AAT?$AAR?$AAd?$AAy?$AA?5?$AAb?$AAi?$AAt?$AA?5?$AAi?$AAs?$AA?5?$AAs?$AAe?$AAt?$AA?5?$AA?4?$AA?4?$AA?$AN?$AA?6?$AA?$AA@|
  012ac		 |$LN63@ContinueTx|
  012ac	00000000	 DCD         |??_C@_1FM@NNMILMFN@?$AAe?$AAn?$AAd?$AAp?$AAo?$AAi?$AAn?$AAt?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?5?$AAc?$AAb?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?5?$AAc?$AAb?$AAT?$AAr?$AAa?$AAn@|
  012b0		 |$LN64@ContinueTx|
  012b0	00000000	 DCD         |??_C@_1CK@HGADPGKD@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  012b4		 |$LN65@ContinueTx|
  012b4	00000000	 DCD         |??_C@_1DG@GAFCGMNC@?$AAW?$AAr?$AAi?$AAt?$AAe?$AAF?$AAI?$AAF?$AAO?$AA?5?$AAE?$AAP?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  012b8		 |$LN66@ContinueTx|
  012b8	00000000	 DCD         |??_C@_1DG@KJCFCKAI@?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?$CB?$AA?5?$AAp?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AA?5?$AAi?$AAs?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AN?$AA?6?$AA?$AA@|
  012bc		 |$LN67@ContinueTx|
  012bc	00000000	 DCD         |??_C@_1II@PBHEPHNB@?$AA?$CL?$AAU?$AAs?$AAb?$AAF?$AAn?$AAP?$AAd?$AAd?$AA?$CB?$AAC?$AAo?$AAn?$AAt?$AAi?$AAn?$AAu?$AAe?$AAT?$AAx?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AA?3?$AA?5?$AAE?$AAP@|
  012c0		 |$LN68@ContinueTx|
  012c0	00000000	 DCD         |dpCurSettings|
  012c4		 |$M47386|

			 ENDP  ; |ContinueTxTransfer|

	EXPORT	|??_C@_1CG@BNGOCLAM@?$AA?9?$AAS?$AAt?$AAa?$AAr?$AAt?$AAR?$AAx?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EM@HPHMIFBK@?$AAE?$AAP?$AA?5?$AA?$CF?$AAd?$AA?5?$AAI?$AAs?$AAs?$AAu?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AA?$CI?$AAO?$AAU?$AAT?$AA?$CJ?$AA?5?$AAR?$AAx?$AAC?$AAS?$AAR?$AA?$DN?$AA0@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EC@GEEDPLJM@?$AAA?$AAC?$AAK?$AA?3?$AA?5?$AAS?$AAt?$AAa?$AAr?$AAt?$AAR?$AAx?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAE?$AAP?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BI@PDCFGEL@?$AAR?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AAd?$AA?3?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FI@DIOGIKJI@?$AAS?$AAt?$AAa?$AAr?$AAt?$AAR?$AAx?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AA?3?$AA?5?$AA?5?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAp?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IA@FHPKIPM@?$AAU?$AAs?$AAb?$AAF?$AAn?$AAP?$AAd?$AAd?$AA?$CB?$AAS?$AAt?$AAa?$AAr?$AAt?$AAR?$AAx?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AA?3?$AA?5?$AAE?$AAP?$AA?5?$AA?$CF?$AAd?$AA?5@| [ DATA ] ; `string'

  00060			 AREA	 |.pdata|, PDATA
|$T47443| DCD	|$LN38@StartRxTra|
	DCD	0x4000c502

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CG@BNGOCLAM@?$AA?9?$AAS?$AAt?$AAa?$AAr?$AAt?$AAR?$AAx?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "S", 0x0, "t", 0x0, "a", 0x0, "r", 0x0, "t", 0x0, "R"
	DCB	0x0, "x", 0x0, "T", 0x0, "r", 0x0, "a", 0x0, "n", 0x0, "s"
	DCB	0x0, "f", 0x0, "e", 0x0, "r", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EM@HPHMIFBK@?$AAE?$AAP?$AA?5?$AA?$CF?$AAd?$AA?5?$AAI?$AAs?$AAs?$AAu?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AA?$CI?$AAO?$AAU?$AAT?$AA?$CJ?$AA?5?$AAR?$AAx?$AAC?$AAS?$AAR?$AA?$DN?$AA0@| DCB "E"
	DCB	0x0, "P", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, "I"
	DCB	0x0, "s", 0x0, "s", 0x0, "u", 0x0, "e", 0x0, "T", 0x0, "r"
	DCB	0x0, "a", 0x0, "n", 0x0, "s", 0x0, "f", 0x0, "e", 0x0, "r"
	DCB	0x0, "(", 0x0, "O", 0x0, "U", 0x0, "T", 0x0, ")", 0x0, " "
	DCB	0x0, "R", 0x0, "x", 0x0, "C", 0x0, "S", 0x0, "R", 0x0, "="
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EC@GEEDPLJM@?$AAA?$AAC?$AAK?$AA?3?$AA?5?$AAS?$AAt?$AAa?$AAr?$AAt?$AAR?$AAx?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAE?$AAP?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6@| DCB "A"
	DCB	0x0, "C", 0x0, "K", 0x0, ":", 0x0, " ", 0x0, "S", 0x0, "t"
	DCB	0x0, "a", 0x0, "r", 0x0, "t", 0x0, "R", 0x0, "x", 0x0, "T"
	DCB	0x0, "r", 0x0, "a", 0x0, "n", 0x0, "s", 0x0, "f", 0x0, "e"
	DCB	0x0, "r", 0x0, " ", 0x0, "f", 0x0, "o", 0x0, "r", 0x0, " "
	DCB	0x0, "E", 0x0, "P", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BI@PDCFGEL@?$AAR?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AAd?$AA?3?$AA?$AN?$AA?6?$AA?$AA@| DCB "R"
	DCB	0x0, "e", 0x0, "c", 0x0, "e", 0x0, "i", 0x0, "v", 0x0, "e"
	DCB	0x0, "d", 0x0, ":", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FI@DIOGIKJI@?$AAS?$AAt?$AAa?$AAr?$AAt?$AAR?$AAx?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AA?3?$AA?5?$AA?5?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAp?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe@| DCB "S"
	DCB	0x0, "t", 0x0, "a", 0x0, "r", 0x0, "t", 0x0, "R", 0x0, "x"
	DCB	0x0, "T", 0x0, "r", 0x0, "a", 0x0, "n", 0x0, "s", 0x0, "f"
	DCB	0x0, "e", 0x0, "r", 0x0, ":", 0x0, " ", 0x0, " ", 0x0, "e"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "p"
	DCB	0x0, "T", 0x0, "r", 0x0, "a", 0x0, "n", 0x0, "s", 0x0, "f"
	DCB	0x0, "e", 0x0, "r", 0x0, " ", 0x0, "i", 0x0, "s", 0x0, " "
	DCB	0x0, "N", 0x0, "U", 0x0, "L", 0x0, "L", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IA@FHPKIPM@?$AAU?$AAs?$AAb?$AAF?$AAn?$AAP?$AAd?$AAd?$AA?$CB?$AAS?$AAt?$AAa?$AAr?$AAt?$AAR?$AAx?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AA?3?$AA?5?$AAE?$AAP?$AA?5?$AA?$CF?$AAd?$AA?5@| DCB "U"
	DCB	0x0, "s", 0x0, "b", 0x0, "F", 0x0, "n", 0x0, "P", 0x0, "d"
	DCB	0x0, "d", 0x0, "!", 0x0, "S", 0x0, "t", 0x0, "a", 0x0, "r"
	DCB	0x0, "t", 0x0, "R", 0x0, "x", 0x0, "T", 0x0, "r", 0x0, "a"
	DCB	0x0, "n", 0x0, "s", 0x0, "f", 0x0, "e", 0x0, "r", 0x0, ":"
	DCB	0x0, " ", 0x0, "E", 0x0, "P", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, " ", 0x0, "p", 0x0, "T", 0x0, "r", 0x0, "a", 0x0, "n"
	DCB	0x0, "s", 0x0, "f", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, " "
	DCB	0x0, "(", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, ",", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Ogtp

  012c4			 AREA	 |.text|, CODE, ARM

  012c4		 |StartRxTransfer| PROC

; 417  : {

  012c4		 |$LN38@StartRxTra|
  012c4	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  012c8	e24dd014	 sub         sp, sp, #0x14
  012cc		 |$M47440|
  012cc	e1a07001	 mov         r7, r1
  012d0	e1a06000	 mov         r6, r0

; 418  :     DWORD rc = ERROR_INVALID_PARAMETER;
; 419  :     USBFN_EP *pEP = &pPdd->ep[endpoint];
; 420  :     STransfer *pTransfer = pEP->pTransfer;
; 421  :     PCSP_MUSB_CSR_REGS pCsrRegs = pPdd->pUsbCsrRegs;
; 422  :     BOOL bNotifyDataReady = FALSE;
; 423  :     
; 424  :     OALMSG(OAL_ETHER&&OAL_FUNC, (L"UsbFnPdd!StartRxTransfer: "
; 425  :         L"EP %d pTransfer 0x%08x (%d, %d, %d)\r\n",
; 426  :         endpoint, pTransfer, pTransfer != NULL ? pTransfer->cbBuffer : 0,
; 427  :         pTransfer != NULL ? pTransfer->cbTransferred : 0,
; 428  :         pTransfer != NULL ? pTransfer->dwUsbError : -1
; 429  :         ));

  012d4	e59f82e8	 ldr         r8, [pc, #0x2E8]
  012d8	e0873107	 add         r3, r7, r7, lsl #2
  012dc	e086b103	 add         r11, r6, r3, lsl #2
  012e0	e5982440	 ldr         r2, [r8, #0x440]
  012e4	e59b5038	 ldr         r5, [r11, #0x38]
  012e8	e596a00c	 ldr         r10, [r6, #0xC]
  012ec	e3120a02	 tst         r2, #2, 20
  012f0	e58db008	 str         r11, [sp, #8]
  012f4	e3a09000	 mov         r9, #0
  012f8	0a000011	 beq         |$LN15@StartRxTra|
  012fc	e3120004	 tst         r2, #4
  01300	0a00000f	 beq         |$LN15@StartRxTra|
  01304	e3550000	 cmp         r5, #0
  01308	0a000003	 beq         |$LN16@StartRxTra|
  0130c	e595e014	 ldr         lr, [r5, #0x14]
  01310	e5954010	 ldr         r4, [r5, #0x10]
  01314	e595300c	 ldr         r3, [r5, #0xC]
  01318	ea000002	 b           |$LN21@StartRxTra|
  0131c		 |$LN16@StartRxTra|
  0131c	e3e0e000	 mvn         lr, #0
  01320	e3a04000	 mov         r4, #0
  01324	e3a03000	 mov         r3, #0
  01328		 |$LN21@StartRxTra|
  01328	e59f02a4	 ldr         r0, [pc, #0x2A4]
  0132c	e1a02005	 mov         r2, r5
  01330	e1a01007	 mov         r1, r7
  01334	e58de004	 str         lr, [sp, #4]
  01338	e58d4000	 str         r4, [sp]
  0133c	eb000000	 bl          NKDbgPrintfW
  01340	e5982440	 ldr         r2, [r8, #0x440]
  01344		 |$LN15@StartRxTra|

; 430  : 
; 431  :     if (pTransfer == NULL) 

  01344	e3550000	 cmp         r5, #0
  01348	1a000006	 bne         |$LN12@StartRxTra|

; 432  :     {
; 433  :         OALMSG(OAL_ERROR, (L"StartRxTransfer:  error pTransfer is NULL\r\n"));

  0134c	e3120001	 tst         r2, #1
  01350	159f0278	 ldrne       r0, [pc, #0x278]
  01354	1b000000	 blne        NKDbgPrintfW

; 434  :         return ERROR_INVALID_PARAMETER;

  01358	e3a00057	 mov         r0, #0x57

; 553  : }

  0135c	e28dd014	 add         sp, sp, #0x14
  01360	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  01364	e12fff1e	 bx          lr
  01368		 |$LN12@StartRxTra|

; 435  :     }    
; 436  :     
; 437  :     if (endpoint != 0)

  01368	e3570000	 cmp         r7, #0
  0136c	0a000050	 beq         |$LN11@StartRxTra|

; 438  :     {
; 439  :         if (pPdd->intr_rx_data_avail &(1 << endpoint))

  01370	e596317c	 ldr         r3, [r6, #0x17C]
  01374	e3a02001	 mov         r2, #1
  01378	e1a0b712	 mov         r11, r2, lsl r7
  0137c	e11b0003	 tst         r11, r3
  01380	0a00003b	 beq         |$LN10@StartRxTra|

; 440  :         {
; 441  :             // rx FIFO has data.
; 442  :             UCHAR *pBuffer;            
; 443  :             DWORD space, maxSize;
; 444  :             WORD rxcount;
; 445  :             
; 446  :             rxcount = INREG16(&pCsrRegs->ep[endpoint].Count.RxCount);

  01384	e08a3207	 add         r3, r10, r7, lsl #4

; 447  :             
; 448  :             pBuffer =(UCHAR*)pTransfer->pvBuffer + pTransfer->cbTransferred;               
; 449  :             space = pTransfer->cbBuffer - pTransfer->cbTransferred;
; 450  :             // Get maxPacketSize
; 451  :             maxSize = pPdd->ep[endpoint].maxPacketSize;
; 452  :             
; 453  :             {
; 454  :                 USHORT dwFlag = RXCSR_P_RXPKTRDY;
; 455  :                 
; 456  :                 ReadFIFO(pPdd, (UCHAR)endpoint, pBuffer, (DWORD)rxcount);

  01388	e59da008	 ldr         r10, [sp, #8]
  0138c	e5954010	 ldr         r4, [r5, #0x10]
  01390	e5952004	 ldr         r2, [r5, #4]
  01394	e1da82bc	 ldrh        r8, [r10, #0x2C]
  01398	e595e00c	 ldr         lr, [r5, #0xC]
  0139c	e58d3010	 str         r3, [sp, #0x10]
  013a0	e1d330b8	 ldrh        r3, [r3, #8]
  013a4	e0822004	 add         r2, r2, r4
  013a8	e20710ff	 and         r1, r7, #0xFF
  013ac	e1a00006	 mov         r0, r6
  013b0	e58d8008	 str         r8, [sp, #8]
  013b4	e58d300c	 str         r3, [sp, #0xC]
  013b8	e04e4004	 sub         r4, lr, r4
  013bc	eb000000	 bl          ReadFIFO

; 457  :                 OALMSG(OAL_ETHER&&OAL_FUNC, (L"Received:\r\n"));

  013c0	e59f81fc	 ldr         r8, [pc, #0x1FC]
  013c4	e5983440	 ldr         r3, [r8, #0x440]
  013c8	e3130a02	 tst         r3, #2, 20
  013cc	13130004	 tstne       r3, #4
  013d0	159f01e8	 ldrne       r0, [pc, #0x1E8]
  013d4	1b000000	 blne        NKDbgPrintfW

; 458  :                 
; 459  :                 // We transfered some data
; 460  :                 pTransfer->cbTransferred = pTransfer->cbBuffer - space;

  013d8	e595300c	 ldr         r3, [r5, #0xC]

; 461  :                 
; 462  :                 // Is this end of transfer?
; 463  :                 if (rxcount < maxSize)

  013dc	e59d200c	 ldr         r2, [sp, #0xC]
  013e0	e59d0008	 ldr         r0, [sp, #8]
  013e4	e0433004	 sub         r3, r3, r4
  013e8	e5853010	 str         r3, [r5, #0x10]
  013ec	e3a01000	 mov         r1, #0
  013f0	e1520000	 cmp         r2, r0
  013f4	2a000002	 bcs         |$LN9@StartRxTra|

; 464  :                 {
; 465  :                     // received last block
; 466  :                     pTransfer->dwUsbError = UFN_NO_ERROR;

  013f8	e5851014	 str         r1, [r5, #0x14]

; 467  :                     bNotifyDataReady = TRUE;

  013fc	e3a09001	 mov         r9, #1

; 468  :                     // Don't clear the RxPktRdy until it is ready to further received
; 469  :                 }
; 470  :                 else

  01400	ea000005	 b           |$LN8@StartRxTra|
  01404		 |$LN9@StartRxTra|

; 471  :                     CLRREG16(&pCsrRegs->ep[endpoint].RxCSR, dwFlag);

  01404	e59d0010	 ldr         r0, [sp, #0x10]
  01408	e3a03cff	 mov         r3, #0xFF, 24
  0140c	e38330fe	 orr         r3, r3, #0xFE
  01410	e1d020b6	 ldrh        r2, [r0, #6]
  01414	e0023003	 and         r3, r2, r3
  01418	e1c030b6	 strh        r3, [r0, #6]
  0141c		 |$LN8@StartRxTra|

; 472  :             }
; 473  :             
; 474  :             // clear intr_rx_data_avail EP0 bit
; 475  :             pPdd->intr_rx_data_avail &= ~(1 << endpoint);           

  0141c	e596317c	 ldr         r3, [r6, #0x17C]

; 476  :             
; 477  :             if (bNotifyDataReady)

  01420	e3590000	 cmp         r9, #0
  01424	e1c3300b	 bic         r3, r3, r11
  01428	e586317c	 str         r3, [r6, #0x17C]
  0142c	0a000059	 beq         |$LN35@StartRxTra|

; 478  :             {
; 479  :                 pEP->pTransfer = NULL;

  01430	e58a1038	 str         r1, [r10, #0x38]

; 480  :                 pTransfer->dwUsbError = UFN_NO_ERROR;

  01434	e5851014	 str         r1, [r5, #0x14]

; 481  :                 OALMSG(OAL_ETHER&&OAL_FUNC, (TEXT("ACK: StartRxTransfer for EP %d\r\n"), endpoint));

  01438	e5983440	 ldr         r3, [r8, #0x440]
  0143c	e3130a02	 tst         r3, #2, 20
  01440	0a000004	 beq         |$LN27@StartRxTra|
  01444	e3130004	 tst         r3, #4
  01448	0a000002	 beq         |$LN27@StartRxTra|
  0144c	e59f0178	 ldr         r0, [pc, #0x178]
  01450	e1a01007	 mov         r1, r7
  01454	eb000000	 bl          NKDbgPrintfW
  01458		 |$LN27@StartRxTra|

; 482  :                 pPdd->pfnNotify(
; 483  :                     pPdd->pMddContext, UFN_MSG_TRANSFER_COMPLETE, (DWORD)pTransfer);

  01458	e5960000	 ldr         r0, [r6]
  0145c	e5963004	 ldr         r3, [r6, #4]
  01460	e1a02005	 mov         r2, r5
  01464	e3a01064	 mov         r1, #0x64
  01468	e1a0e00f	 mov         lr, pc
  0146c	e12fff13	 bx          r3

; 484  :             }
; 485  :         }
; 486  :         else

  01470	ea000048	 b           |$LN35@StartRxTra|
  01474		 |$LN10@StartRxTra|

; 487  :         {
; 488  :             CLRREG16(&pCsrRegs->ep[endpoint].RxCSR, RXCSR_P_RXPKTRDY);

  01474	e08a1207	 add         r1, r10, r7, lsl #4
  01478	e1d120b6	 ldrh        r2, [r1, #6]
  0147c	e3a03cff	 mov         r3, #0xFF, 24
  01480	e38330fe	 orr         r3, r3, #0xFE
  01484	e0023003	 and         r3, r2, r3
  01488	e1c130b6	 strh        r3, [r1, #6]

; 489  :             OALMSG(OAL_ETHER&&OAL_FUNC, (TEXT("EP %d IssueTransfer(OUT) RxCSR=0x%x\r\n"), endpoint, INREG16(&pCsrRegs->ep[endpoint].RxCSR)));

  0148c	e5982440	 ldr         r2, [r8, #0x440]
  01490	e3120a02	 tst         r2, #2, 20
  01494	0a000040	 beq         |$LN1@StartRxTra|
  01498	e3120004	 tst         r2, #4
  0149c	0a00003e	 beq         |$LN1@StartRxTra|
  014a0	e1d120b6	 ldrh        r2, [r1, #6]
  014a4	e59f011c	 ldr         r0, [pc, #0x11C]
  014a8	e1a01007	 mov         r1, r7
  014ac	eb000000	 bl          NKDbgPrintfW

; 490  :         }
; 491  :     }
; 492  :     else // if (endpoint != 0)

  014b0	ea000038	 b           |$LN35@StartRxTra|
  014b4		 |$LN11@StartRxTra|

; 493  :     {
; 494  :         if (pPdd->ep0State == EP0_ST_SETUP_PROCESSED)

  014b4	e5963178	 ldr         r3, [r6, #0x178]
  014b8	e3530001	 cmp         r3, #1
  014bc	1a000036	 bne         |$LN1@StartRxTra|

; 495  :         {
; 496  :             pPdd->ep0State = EP0_ST_DATA_RX;
; 497  :             
; 498  :             if (pPdd->intr_rx_data_avail &(1 << EP0))

  014c0	e596317c	 ldr         r3, [r6, #0x17C]
  014c4	e3a02004	 mov         r2, #4
  014c8	e5862178	 str         r2, [r6, #0x178]
  014cc	e3130001	 tst         r3, #1
  014d0	0a000030	 beq         |$LN35@StartRxTra|

; 499  :             {
; 500  :                 // rx FIFO has data.
; 501  :                 UCHAR *pBuffer;            
; 502  :                 DWORD space, maxSize;
; 503  :                 USHORT rxcount;
; 504  :                 
; 505  :                 rxcount = INREG8(&pCsrRegs->ep[EP0].Count.Count0);
; 506  :                 
; 507  :                 pBuffer =(UCHAR*)pTransfer->pvBuffer + pTransfer->cbTransferred;               
; 508  :                 space = pTransfer->cbBuffer - pTransfer->cbTransferred;

  014d4	e5954010	 ldr         r4, [r5, #0x10]
  014d8	e595e00c	 ldr         lr, [r5, #0xC]
  014dc	e5da7008	 ldrb        r7, [r10, #8]
  014e0	e5952004	 ldr         r2, [r5, #4]

; 509  :                 // Get maxPacketSize
; 510  :                 maxSize = pPdd->ep[EP0].maxPacketSize;
; 511  :                 
; 512  :                 {
; 513  :                     USHORT dwFlag = CSR0_P_SERVICEDRXPKTRDY;
; 514  :                     
; 515  :                     ReadFIFO(pPdd, (UCHAR)endpoint, pBuffer, (DWORD)rxcount);

  014e4	e1d682bc	 ldrh        r8, [r6, #0x2C]
  014e8	e04ee004	 sub         lr, lr, r4
  014ec	e1a03007	 mov         r3, r7
  014f0	e0822004	 add         r2, r2, r4
  014f4	e3a01000	 mov         r1, #0
  014f8	e1a00006	 mov         r0, r6
  014fc	e58de00c	 str         lr, [sp, #0xC]
  01500	e58d8010	 str         r8, [sp, #0x10]
  01504	e3a04040	 mov         r4, #0x40
  01508	eb000000	 bl          ReadFIFO

; 516  :                     OALMSG(OAL_ETHER&&OAL_FUNC, (L"Received:\r\n"));

  0150c	e59f80b0	 ldr         r8, [pc, #0xB0]
  01510	e5983440	 ldr         r3, [r8, #0x440]
  01514	e3130a02	 tst         r3, #2, 20
  01518	13130004	 tstne       r3, #4
  0151c	159f009c	 ldrne       r0, [pc, #0x9C]
  01520	1b000000	 blne        NKDbgPrintfW

; 517  :                     //memdump((UCHAR *)pBuffer, (USHORT)rxcount, 0);
; 518  :                     
; 519  :                     // We transfered some data
; 520  :                     pTransfer->cbTransferred = pTransfer->cbBuffer - space;
; 521  :                     
; 522  :                     // Is this end of transfer?
; 523  :                     if (rxcount < maxSize)

  01524	e59d2010	 ldr         r2, [sp, #0x10]
  01528	e595300c	 ldr         r3, [r5, #0xC]
  0152c	e3a01000	 mov         r1, #0
  01530	e1570002	 cmp         r7, r2
  01534	e59d200c	 ldr         r2, [sp, #0xC]
  01538	e0433002	 sub         r3, r3, r2
  0153c	e5853010	 str         r3, [r5, #0x10]
  01540	2a000004	 bcs         |$LN2@StartRxTra|

; 524  :                     {
; 525  :                         // received last block
; 526  :                         pTransfer->dwUsbError = UFN_NO_ERROR;
; 527  :                         pPdd->ep0State = EP0_ST_STATUS_IN;

  01544	e3a03002	 mov         r3, #2
  01548	e5851014	 str         r1, [r5, #0x14]
  0154c	e5863178	 str         r3, [r6, #0x178]

; 528  :                         bNotifyDataReady = TRUE;

  01550	e3a09001	 mov         r9, #1

; 529  :                         dwFlag |= CSR0_P_DATAEND;

  01554	e3a04048	 mov         r4, #0x48
  01558		 |$LN2@StartRxTra|

; 530  :                     }
; 531  :                     SETREG16(&pCsrRegs->ep[EP0].CSR.CSR0, dwFlag);

  01558	e1da30b2	 ldrh        r3, [r10, #2]

; 532  :                 }
; 533  : 
; 534  :                 // clear intr_rx_data_avail EP0 bit
; 535  :                 pPdd->intr_rx_data_avail &= ~(1 << EP0);            
; 536  :                 
; 537  :                 if (bNotifyDataReady)

  0155c	e3590000	 cmp         r9, #0
  01560	e1833004	 orr         r3, r3, r4
  01564	e1ca30b2	 strh        r3, [r10, #2]
  01568	e596317c	 ldr         r3, [r6, #0x17C]
  0156c	e3c33001	 bic         r3, r3, #1
  01570	e586317c	 str         r3, [r6, #0x17C]
  01574	0a000007	 beq         |$LN35@StartRxTra|

; 538  :                 {
; 539  :                     pEP->pTransfer = NULL;

  01578	e58b1038	 str         r1, [r11, #0x38]

; 540  :                     pTransfer->dwUsbError = UFN_NO_ERROR;

  0157c	e5851014	 str         r1, [r5, #0x14]

; 541  :                     pPdd->pfnNotify(
; 542  :                         pPdd->pMddContext, UFN_MSG_TRANSFER_COMPLETE, (DWORD)pTransfer);

  01580	e5960000	 ldr         r0, [r6]
  01584	e5963004	 ldr         r3, [r6, #4]
  01588	e3a01064	 mov         r1, #0x64
  0158c	e1a02005	 mov         r2, r5
  01590	e1a0e00f	 mov         lr, pc
  01594	e12fff13	 bx          r3
  01598		 |$LN35@StartRxTra|
  01598	e5982440	 ldr         r2, [r8, #0x440]
  0159c		 |$LN1@StartRxTra|

; 543  :                 }
; 544  :             }
; 545  :         }
; 546  :     }       
; 547  :     
; 548  :     rc = ERROR_SUCCESS;
; 549  :     
; 550  :     OALMSG(OAL_ETHER&&OAL_FUNC, (L"-StartRxTransfer\r\n"));

  0159c	e3120a02	 tst         r2, #2, 20
  015a0	13120004	 tstne       r2, #4
  015a4	159f0010	 ldrne       r0, [pc, #0x10]
  015a8	1b000000	 blne        NKDbgPrintfW

; 551  :     
; 552  :     return rc;

  015ac	e3a00000	 mov         r0, #0

; 553  : }

  015b0	e28dd014	 add         sp, sp, #0x14
  015b4	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  015b8	e12fff1e	 bx          lr
  015bc		 |$LN39@StartRxTra|
  015bc		 |$LN40@StartRxTra|
  015bc	00000000	 DCD         |??_C@_1CG@BNGOCLAM@?$AA?9?$AAS?$AAt?$AAa?$AAr?$AAt?$AAR?$AAx?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@|
  015c0		 |$LN41@StartRxTra|
  015c0	00000000	 DCD         |??_C@_1BI@PDCFGEL@?$AAR?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AAd?$AA?3?$AA?$AN?$AA?6?$AA?$AA@|
  015c4		 |$LN42@StartRxTra|
  015c4	00000000	 DCD         |dpCurSettings|
  015c8		 |$LN43@StartRxTra|
  015c8	00000000	 DCD         |??_C@_1EM@HPHMIFBK@?$AAE?$AAP?$AA?5?$AA?$CF?$AAd?$AA?5?$AAI?$AAs?$AAs?$AAu?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AA?$CI?$AAO?$AAU?$AAT?$AA?$CJ?$AA?5?$AAR?$AAx?$AAC?$AAS?$AAR?$AA?$DN?$AA0@|
  015cc		 |$LN44@StartRxTra|
  015cc	00000000	 DCD         |??_C@_1EC@GEEDPLJM@?$AAA?$AAC?$AAK?$AA?3?$AA?5?$AAS?$AAt?$AAa?$AAr?$AAt?$AAR?$AAx?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAE?$AAP?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6@|
  015d0		 |$LN45@StartRxTra|
  015d0	00000000	 DCD         |??_C@_1FI@DIOGIKJI@?$AAS?$AAt?$AAa?$AAr?$AAt?$AAR?$AAx?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AA?3?$AA?5?$AA?5?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAp?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe@|
  015d4		 |$LN46@StartRxTra|
  015d4	00000000	 DCD         |??_C@_1IA@FHPKIPM@?$AAU?$AAs?$AAb?$AAF?$AAn?$AAP?$AAd?$AAd?$AA?$CB?$AAS?$AAt?$AAa?$AAr?$AAt?$AAR?$AAx?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AA?3?$AA?5?$AAE?$AAP?$AA?5?$AA?$CF?$AAd?$AA?5@|
  015d8		 |$M47441|

			 ENDP  ; |StartRxTransfer|

	EXPORT	|UfnPdd_AbortTransfer|
	EXPORT	|??_C@_1EC@JLHOICLC@?$AAU?$AAf?$AAn?$AAP?$AAd?$AAd?$AA_?$AAA?$AAb?$AAo?$AAr?$AAt?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAE?$AAP?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DK@IJNOMNLM@?$AAU?$AAf?$AAn?$AAP?$AAd?$AAd?$AA_?$AAA?$AAb?$AAo?$AAr?$AAt?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AA?5?$AAe?$AAp?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00068			 AREA	 |.pdata|, PDATA
|$T47468| DCD	|$LN15@UfnPdd_Abo|
	DCD	0x40003b01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EC@JLHOICLC@?$AAU?$AAf?$AAn?$AAP?$AAd?$AAd?$AA_?$AAA?$AAb?$AAo?$AAr?$AAt?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAE?$AAP?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6@| DCB "U"
	DCB	0x0, "f", 0x0, "n", 0x0, "P", 0x0, "d", 0x0, "d", 0x0, "_"
	DCB	0x0, "A", 0x0, "b", 0x0, "o", 0x0, "r", 0x0, "t", 0x0, "T"
	DCB	0x0, "r", 0x0, "a", 0x0, "n", 0x0, "s", 0x0, "f", 0x0, "e"
	DCB	0x0, "r", 0x0, " ", 0x0, "f", 0x0, "o", 0x0, "r", 0x0, " "
	DCB	0x0, "E", 0x0, "P", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DK@IJNOMNLM@?$AAU?$AAf?$AAn?$AAP?$AAd?$AAd?$AA_?$AAA?$AAb?$AAo?$AAr?$AAt?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AA?5?$AAe?$AAp?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "U"
	DCB	0x0, "f", 0x0, "n", 0x0, "P", 0x0, "d", 0x0, "d", 0x0, "_"
	DCB	0x0, "A", 0x0, "b", 0x0, "o", 0x0, "r", 0x0, "t", 0x0, "T"
	DCB	0x0, "r", 0x0, "a", 0x0, "n", 0x0, "s", 0x0, "f", 0x0, "e"
	DCB	0x0, "r", 0x0, " ", 0x0, "e", 0x0, "p", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogtp

  015d8			 AREA	 |.text|, CODE, ARM

  015d8		 |UfnPdd_AbortTransfer| PROC

; 1325 : {

  015d8		 |$LN15@UfnPdd_Abo|
  015d8	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  015dc		 |$M47465|
  015dc	e1a07002	 mov         r7, r2
  015e0	e1a04001	 mov         r4, r1
  015e4	e1a06000	 mov         r6, r0

; 1326 :     USBFN_PDD *pPdd = pPddContext;
; 1327 :     PCSP_MUSB_CSR_REGS pCsrRegs = pPdd->pUsbCsrRegs;
; 1328 :     
; 1329 :     OALMSG(OAL_ETHER&&OAL_FUNC, (L"UfnPdd_AbortTransfer ep %d\r\n", endpoint));

  015e8	e59f80d0	 ldr         r8, [pc, #0xD0]
  015ec	e596500c	 ldr         r5, [r6, #0xC]
  015f0	e5983440	 ldr         r3, [r8, #0x440]
  015f4	e3130a02	 tst         r3, #2, 20
  015f8	13130004	 tstne       r3, #4
  015fc	159f00b8	 ldrne       r0, [pc, #0xB8]
  01600	1b000000	 blne        NKDbgPrintfW

; 1330 :     
; 1331 :     if (endpoint == 0)

  01604	e3540000	 cmp         r4, #0
  01608	1a000003	 bne         |$LN5@UfnPdd_Abo|

; 1332 :     {
; 1333 :         SETREG16(&pCsrRegs->ep[endpoint].CSR.CSR0, CSR0_P_FLUSHFIFO);

  0160c	e1d530b2	 ldrh        r3, [r5, #2]
  01610	e3833c01	 orr         r3, r3, #1, 24
  01614	e1c530b2	 strh        r3, [r5, #2]

; 1334 :     }
; 1335 :     else

  01618	ea00000c	 b           |$LN2@UfnPdd_Abo|
  0161c		 |$LN5@UfnPdd_Abo|

; 1336 :     {
; 1337 :         USBFN_EP *pEP = &pPdd->ep[endpoint];
; 1338 :         
; 1339 :         if (pEP->dirRx)

  0161c	e0843104	 add         r3, r4, r4, lsl #2
  01620	e0863103	 add         r3, r6, r3, lsl #2
  01624	e5933030	 ldr         r3, [r3, #0x30]

; 1340 :             SETREG16(&pCsrRegs->ep[endpoint].RxCSR, RXCSR_P_FLUSHFIFO);        

  01628	e0852204	 add         r2, r5, r4, lsl #4
  0162c	e3530000	 cmp         r3, #0
  01630	0a000003	 beq         |$LN3@UfnPdd_Abo|
  01634	e1d230b6	 ldrh        r3, [r2, #6]
  01638	e3833010	 orr         r3, r3, #0x10
  0163c	e1c230b6	 strh        r3, [r2, #6]

; 1341 :         else

  01640	ea000002	 b           |$LN2@UfnPdd_Abo|
  01644		 |$LN3@UfnPdd_Abo|

; 1342 :             SETREG16(&pCsrRegs->ep[endpoint].CSR.TxCSR, TXCSR_P_FLUSHFIFO);        

  01644	e1d230b2	 ldrh        r3, [r2, #2]
  01648	e3833008	 orr         r3, r3, #8
  0164c	e1c230b2	 strh        r3, [r2, #2]
  01650		 |$LN2@UfnPdd_Abo|

; 1343 :     }
; 1344 :      
; 1345 :     // Finish transfer
; 1346 :     pPdd->ep[endpoint].pTransfer = NULL;

  01650	e0843104	 add         r3, r4, r4, lsl #2
  01654	e0863103	 add         r3, r6, r3, lsl #2
  01658	e3a02000	 mov         r2, #0
  0165c	e5832038	 str         r2, [r3, #0x38]

; 1347 :     if (pTransfer != NULL)

  01660	e3570000	 cmp         r7, #0
  01664	0a000010	 beq         |$LN12@UfnPdd_Abo|
  01668	e3a03c01	 mov         r3, #1, 24

; 1348 :     {
; 1349 :         pTransfer->dwUsbError = UFN_CANCELED_ERROR;

  0166c	e3833001	 orr         r3, r3, #1
  01670	e5873014	 str         r3, [r7, #0x14]

; 1350 :         OALMSG(OAL_ETHER&&OAL_FUNC, (TEXT("UfnPdd_AbortTransfer for EP %d\r\n"), endpoint));

  01674	e5983440	 ldr         r3, [r8, #0x440]
  01678	e3130a02	 tst         r3, #2, 20
  0167c	0a000004	 beq         |$LN10@UfnPdd_Abo|
  01680	e3130004	 tst         r3, #4
  01684	0a000002	 beq         |$LN10@UfnPdd_Abo|
  01688	e59f0028	 ldr         r0, [pc, #0x28]
  0168c	e1a01004	 mov         r1, r4
  01690	eb000000	 bl          NKDbgPrintfW
  01694		 |$LN10@UfnPdd_Abo|

; 1351 :         pPdd->pfnNotify(
; 1352 :            pPdd->pMddContext, UFN_MSG_TRANSFER_COMPLETE, (DWORD)pTransfer
; 1353 :            );

  01694	e5960000	 ldr         r0, [r6]
  01698	e5963004	 ldr         r3, [r6, #4]
  0169c	e1a02007	 mov         r2, r7
  016a0	e3a01064	 mov         r1, #0x64
  016a4	e1a0e00f	 mov         lr, pc
  016a8	e12fff13	 bx          r3
  016ac		 |$LN12@UfnPdd_Abo|

; 1354 :     }
; 1355 :     
; 1356 :     
; 1357 :     // Done
; 1358 :     return ERROR_SUCCESS;

  016ac	e3a00000	 mov         r0, #0

; 1359 : }

  016b0	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  016b4	e12fff1e	 bx          lr
  016b8		 |$LN16@UfnPdd_Abo|
  016b8		 |$LN17@UfnPdd_Abo|
  016b8	00000000	 DCD         |??_C@_1EC@JLHOICLC@?$AAU?$AAf?$AAn?$AAP?$AAd?$AAd?$AA_?$AAA?$AAb?$AAo?$AAr?$AAt?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAE?$AAP?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6@|
  016bc		 |$LN18@UfnPdd_Abo|
  016bc	00000000	 DCD         |??_C@_1DK@IJNOMNLM@?$AAU?$AAf?$AAn?$AAP?$AAd?$AAd?$AA_?$AAA?$AAb?$AAo?$AAr?$AAt?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AA?5?$AAe?$AAp?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  016c0		 |$LN19@UfnPdd_Abo|
  016c0	00000000	 DCD         |dpCurSettings|
  016c4		 |$M47466|

			 ENDP  ; |UfnPdd_AbortTransfer|

	EXPORT	|UfnPdd_StallEndpoint|
	EXPORT	|??_C@_1CO@FFFEIOGH@?$AAU?$AAf?$AAn?$AAP?$AAd?$AAd?$AA_?$AAS?$AAt?$AAa?$AAl?$AAl?$AAE?$AAn?$AAd?$AAp?$AAo?$AAi?$AAn?$AAt?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00070			 AREA	 |.pdata|, PDATA
|$T47488| DCD	|$LN12@UfnPdd_Sta|
	DCD	0x40002501

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@FFFEIOGH@?$AAU?$AAf?$AAn?$AAP?$AAd?$AAd?$AA_?$AAS?$AAt?$AAa?$AAl?$AAl?$AAE?$AAn?$AAd?$AAp?$AAo?$AAi?$AAn?$AAt?$AA?$AN?$AA?6?$AA?$AA@| DCB "U"
	DCB	0x0, "f", 0x0, "n", 0x0, "P", 0x0, "d", 0x0, "d", 0x0, "_"
	DCB	0x0, "S", 0x0, "t", 0x0, "a", 0x0, "l", 0x0, "l", 0x0, "E"
	DCB	0x0, "n", 0x0, "d", 0x0, "p", 0x0, "o", 0x0, "i", 0x0, "n"
	DCB	0x0, "t", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogtp

  016c4			 AREA	 |.text|, CODE, ARM

  016c4		 |UfnPdd_StallEndpoint| PROC

; 1382 : {

  016c4		 |$LN12@UfnPdd_Sta|
  016c4	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  016c8		 |$M47485|
  016c8	e1a05001	 mov         r5, r1

; 1383 :     USBFN_PDD *pPdd = pPddContext;
; 1384 :     USBFN_EP *pEP = &pPdd->ep[endpoint];
; 1385 :     PCSP_MUSB_CSR_REGS pCsrRegs = pPdd->pUsbCsrRegs;
; 1386 :     
; 1387 :     OALMSG(OAL_ETHER&&OAL_FUNC, (L"UfnPdd_StallEndpoint\r\n"));

  016cc	e59f2080	 ldr         r2, [pc, #0x80]
  016d0	e0853105	 add         r3, r5, r5, lsl #2
  016d4	e0806103	 add         r6, r0, r3, lsl #2
  016d8	e5923440	 ldr         r3, [r2, #0x440]
  016dc	e590400c	 ldr         r4, [r0, #0xC]
  016e0	e3130a02	 tst         r3, #2, 20
  016e4	13130004	 tstne       r3, #4
  016e8	159f0060	 ldrne       r0, [pc, #0x60]
  016ec	1b000000	 blne        NKDbgPrintfW

; 1388 :     
; 1389 :     if (endpoint == 0)

  016f0	e3550000	 cmp         r5, #0
  016f4	1a000005	 bne         |$LN4@UfnPdd_Sta|

; 1390 :     {
; 1391 :         // Stall next EP0 transaction
; 1392 :         SETREG16(&pCsrRegs->ep[endpoint].CSR.CSR0, CSR0_P_SENDSTALL);        

  016f8	e1d430b2	 ldrh        r3, [r4, #2]

; 1402 :         
; 1403 :     }
; 1404 :     
; 1405 :     // Done
; 1406 :     return ERROR_SUCCESS;

  016fc	e3a00000	 mov         r0, #0
  01700	e3833020	 orr         r3, r3, #0x20
  01704	e1c430b2	 strh        r3, [r4, #2]

; 1407 : }

  01708	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  0170c	e12fff1e	 bx          lr
  01710		 |$LN4@UfnPdd_Sta|

; 1393 :     }
; 1394 :     else
; 1395 :     {
; 1396 :         
; 1397 :         // stall end point
; 1398 :         if (pEP->dirRx)

  01710	e5963030	 ldr         r3, [r6, #0x30]

; 1399 :             SETREG16(&pCsrRegs->ep[endpoint].RxCSR, RXCSR_P_SENDSTALL);        

  01714	e0842205	 add         r2, r4, r5, lsl #4
  01718	e3530000	 cmp         r3, #0
  0171c	0a000005	 beq         |$LN2@UfnPdd_Sta|
  01720	e1d230b6	 ldrh        r3, [r2, #6]

; 1402 :         
; 1403 :     }
; 1404 :     
; 1405 :     // Done
; 1406 :     return ERROR_SUCCESS;

  01724	e3a00000	 mov         r0, #0
  01728	e3833020	 orr         r3, r3, #0x20
  0172c	e1c230b6	 strh        r3, [r2, #6]

; 1407 : }

  01730	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  01734	e12fff1e	 bx          lr
  01738		 |$LN2@UfnPdd_Sta|

; 1400 :         else
; 1401 :             SETREG16(&pCsrRegs->ep[endpoint].CSR.TxCSR, TXCSR_P_SENDSTALL);        

  01738	e1d230b2	 ldrh        r3, [r2, #2]

; 1402 :         
; 1403 :     }
; 1404 :     
; 1405 :     // Done
; 1406 :     return ERROR_SUCCESS;

  0173c	e3a00000	 mov         r0, #0
  01740	e3833010	 orr         r3, r3, #0x10
  01744	e1c230b2	 strh        r3, [r2, #2]

; 1407 : }

  01748	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  0174c	e12fff1e	 bx          lr
  01750		 |$LN13@UfnPdd_Sta|
  01750		 |$LN14@UfnPdd_Sta|
  01750	00000000	 DCD         |??_C@_1CO@FFFEIOGH@?$AAU?$AAf?$AAn?$AAP?$AAd?$AAd?$AA_?$AAS?$AAt?$AAa?$AAl?$AAl?$AAE?$AAn?$AAd?$AAp?$AAo?$AAi?$AAn?$AAt?$AA?$AN?$AA?6?$AA?$AA@|
  01754		 |$LN15@UfnPdd_Sta|
  01754	00000000	 DCD         |dpCurSettings|
  01758		 |$M47486|

			 ENDP  ; |UfnPdd_StallEndpoint|

	EXPORT	|UfnPdd_ClearEndpointStall|
	EXPORT	|??_C@_1EM@DEDHGOEH@?$AAU?$AAf?$AAn?$AAP?$AAd?$AAd?$AA_?$AAC?$AAl?$AAe?$AAa?$AAr?$AAE?$AAn?$AAd?$AAp?$AAo?$AAi?$AAn?$AAt?$AAS?$AAt?$AAa?$AAl?$AAl?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAE?$AAP@| [ DATA ] ; `string'

  00078			 AREA	 |.pdata|, PDATA
|$T47507| DCD	|$LN12@UfnPdd_Cle|
	DCD	0x40002a01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EM@DEDHGOEH@?$AAU?$AAf?$AAn?$AAP?$AAd?$AAd?$AA_?$AAC?$AAl?$AAe?$AAa?$AAr?$AAE?$AAn?$AAd?$AAp?$AAo?$AAi?$AAn?$AAt?$AAS?$AAt?$AAa?$AAl?$AAl?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAE?$AAP@| DCB "U"
	DCB	0x0, "f", 0x0, "n", 0x0, "P", 0x0, "d", 0x0, "d", 0x0, "_"
	DCB	0x0, "C", 0x0, "l", 0x0, "e", 0x0, "a", 0x0, "r", 0x0, "E"
	DCB	0x0, "n", 0x0, "d", 0x0, "p", 0x0, "o", 0x0, "i", 0x0, "n"
	DCB	0x0, "t", 0x0, "S", 0x0, "t", 0x0, "a", 0x0, "l", 0x0, "l"
	DCB	0x0, " ", 0x0, "f", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "E"
	DCB	0x0, "P", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Ogtp

  01758			 AREA	 |.text|, CODE, ARM

  01758		 |UfnPdd_ClearEndpointStall| PROC

; 1431 : {

  01758		 |$LN12@UfnPdd_Cle|
  01758	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  0175c		 |$M47504|
  0175c	e1a04001	 mov         r4, r1

; 1432 :     USBFN_PDD *pPdd = pPddContext;
; 1433 :     USBFN_EP *pEP = &pPdd->ep[endpoint];
; 1434 :     PCSP_MUSB_CSR_REGS pCsrRegs = pPdd->pUsbCsrRegs;
; 1435 :     
; 1436 :     OALMSG(OAL_ETHER&&OAL_FUNC, (L"UfnPdd_ClearEndpointStall for EP %d\r\n", endpoint));

  01760	e59f2094	 ldr         r2, [pc, #0x94]
  01764	e0843104	 add         r3, r4, r4, lsl #2
  01768	e0806103	 add         r6, r0, r3, lsl #2
  0176c	e5923440	 ldr         r3, [r2, #0x440]
  01770	e590500c	 ldr         r5, [r0, #0xC]
  01774	e3130a02	 tst         r3, #2, 20
  01778	13130004	 tstne       r3, #4
  0177c	159f0074	 ldrne       r0, [pc, #0x74]
  01780	1b000000	 blne        NKDbgPrintfW

; 1437 :     
; 1438 :     if (endpoint == 0)

  01784	e3540000	 cmp         r4, #0
  01788	1a000007	 bne         |$LN4@UfnPdd_Cle|

; 1439 :     {
; 1440 :         CLRREG16(&pCsrRegs->ep[endpoint].CSR.CSR0, CSR0_P_SENTSTALL | CSR0_P_SENDSTALL);        

  0178c	e1d520b2	 ldrh        r2, [r5, #2]
  01790	e3a03cff	 mov         r3, #0xFF, 24
  01794	e38330db	 orr         r3, r3, #0xDB
  01798	e0023003	 and         r3, r2, r3
  0179c	e1c530b2	 strh        r3, [r5, #2]

; 1453 :         }
; 1454 :         
; 1455 :     }
; 1456 :     
; 1457 :     return ERROR_SUCCESS;

  017a0	e3a00000	 mov         r0, #0

; 1458 : }

  017a4	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  017a8	e12fff1e	 bx          lr
  017ac		 |$LN4@UfnPdd_Cle|

; 1441 :     }
; 1442 :     else
; 1443 :     {
; 1444 :         
; 1445 :         // stall end point
; 1446 :         if (pEP->dirRx)

  017ac	e5963030	 ldr         r3, [r6, #0x30]

; 1447 :         {
; 1448 :             CLRREG16(&pCsrRegs->ep[endpoint].RxCSR, RXCSR_P_SENTSTALL | RXCSR_P_SENDSTALL);        

  017b0	e0851204	 add         r1, r5, r4, lsl #4
  017b4	e3530000	 cmp         r3, #0
  017b8	e3a03cff	 mov         r3, #0xFF, 24
  017bc	0a000006	 beq         |$LN2@UfnPdd_Cle|
  017c0	e1d120b6	 ldrh        r2, [r1, #6]
  017c4	e383309f	 orr         r3, r3, #0x9F

; 1453 :         }
; 1454 :         
; 1455 :     }
; 1456 :     
; 1457 :     return ERROR_SUCCESS;

  017c8	e3a00000	 mov         r0, #0
  017cc	e0023003	 and         r3, r2, r3
  017d0	e1c130b6	 strh        r3, [r1, #6]

; 1458 : }

  017d4	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  017d8	e12fff1e	 bx          lr
  017dc		 |$LN2@UfnPdd_Cle|

; 1449 :         }
; 1450 :         else
; 1451 :         {
; 1452 :             CLRREG16(&pCsrRegs->ep[endpoint].CSR.TxCSR, TXCSR_P_SENTSTALL | TXCSR_P_SENDSTALL);        

  017dc	e1d120b2	 ldrh        r2, [r1, #2]
  017e0	e38330cf	 orr         r3, r3, #0xCF

; 1453 :         }
; 1454 :         
; 1455 :     }
; 1456 :     
; 1457 :     return ERROR_SUCCESS;

  017e4	e3a00000	 mov         r0, #0
  017e8	e0023003	 and         r3, r2, r3
  017ec	e1c130b2	 strh        r3, [r1, #2]

; 1458 : }

  017f0	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  017f4	e12fff1e	 bx          lr
  017f8		 |$LN13@UfnPdd_Cle|
  017f8		 |$LN14@UfnPdd_Cle|
  017f8	00000000	 DCD         |??_C@_1EM@DEDHGOEH@?$AAU?$AAf?$AAn?$AAP?$AAd?$AAd?$AA_?$AAC?$AAl?$AAe?$AAa?$AAr?$AAE?$AAn?$AAd?$AAp?$AAo?$AAi?$AAn?$AAt?$AAS?$AAt?$AAa?$AAl?$AAl?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAE?$AAP@|
  017fc		 |$LN15@UfnPdd_Cle|
  017fc	00000000	 DCD         |dpCurSettings|
  01800		 |$M47505|

			 ENDP  ; |UfnPdd_ClearEndpointStall|

	EXPORT	|UfnPdd_IsEndpointHalted|
	EXPORT	|??_C@_1DE@ECDCBICE@?$AAU?$AAf?$AAn?$AAP?$AAd?$AAd?$AA_?$AAI?$AAs?$AAE?$AAn?$AAd?$AAp?$AAo?$AAi?$AAn?$AAt?$AAH?$AAa?$AAl?$AAt?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00080			 AREA	 |.pdata|, PDATA
|$T47527| DCD	|$LN12@UfnPdd_IsE|
	DCD	0x40002601

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DE@ECDCBICE@?$AAU?$AAf?$AAn?$AAP?$AAd?$AAd?$AA_?$AAI?$AAs?$AAE?$AAn?$AAd?$AAp?$AAo?$AAi?$AAn?$AAt?$AAH?$AAa?$AAl?$AAt?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "U"
	DCB	0x0, "f", 0x0, "n", 0x0, "P", 0x0, "d", 0x0, "d", 0x0, "_"
	DCB	0x0, "I", 0x0, "s", 0x0, "E", 0x0, "n", 0x0, "d", 0x0, "p"
	DCB	0x0, "o", 0x0, "i", 0x0, "n", 0x0, "t", 0x0, "H", 0x0, "a"
	DCB	0x0, "l", 0x0, "t", 0x0, "e", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Ogtp

  01800			 AREA	 |.text|, CODE, ARM

  01800		 |UfnPdd_IsEndpointHalted| PROC

; 1480 : {

  01800		 |$LN12@UfnPdd_IsE|
  01800	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  01804		 |$M47524|
  01804	e1a05002	 mov         r5, r2
  01808	e1a04001	 mov         r4, r1

; 1481 :    
; 1482 :     USBFN_PDD *pPdd = pPddContext;
; 1483 :     USBFN_EP *pEP = &pPdd->ep[endpoint];
; 1484 :     PCSP_MUSB_CSR_REGS pCsrRegs = pPdd->pUsbCsrRegs;
; 1485 :     
; 1486 :     OALMSG(OAL_ETHER&&OAL_FUNC, (L"UfnPdd_IsEndpointHalted\r\n"));

  0180c	e59fe080	 ldr         lr, [pc, #0x80]
  01810	e0843104	 add         r3, r4, r4, lsl #2
  01814	e0807103	 add         r7, r0, r3, lsl #2
  01818	e59e3440	 ldr         r3, [lr, #0x440]
  0181c	e590600c	 ldr         r6, [r0, #0xC]
  01820	e3130a02	 tst         r3, #2, 20
  01824	13130004	 tstne       r3, #4
  01828	159f0060	 ldrne       r0, [pc, #0x60]
  0182c	1b000000	 blne        NKDbgPrintfW

; 1487 :         
; 1488 :     if (endpoint == 0)

  01830	e3540000	 cmp         r4, #0
  01834	1a000005	 bne         |$LN4@UfnPdd_IsE|

; 1489 :     {
; 1490 :         // CSR0_P_SENDSTALL is documented as selfclearing, this might not be sufficient
; 1491 :         *pHalted = INREG16(&pCsrRegs->ep[endpoint].CSR.CSR0) & CSR0_P_SENDSTALL;

  01838	e1d630b2	 ldrh        r3, [r6, #2]

; 1503 :         }
; 1504 :     }
; 1505 :         
; 1506 :     // Done
; 1507 :     return ERROR_SUCCESS;

  0183c	e3a00000	 mov         r0, #0
  01840	e2033020	 and         r3, r3, #0x20
  01844	e5853000	 str         r3, [r5]

; 1508 : }

  01848	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  0184c	e12fff1e	 bx          lr
  01850		 |$LN4@UfnPdd_IsE|

; 1492 :     }
; 1493 :     else
; 1494 :     {
; 1495 :         // stall end point
; 1496 :         if (pEP->dirRx)

  01850	e5973030	 ldr         r3, [r7, #0x30]
  01854	e3530000	 cmp         r3, #0

; 1497 :         {
; 1498 :             *pHalted = INREG16(&pCsrRegs->ep[endpoint].RxCSR) & RXCSR_P_SENDSTALL;

  01858	e0863204	 add         r3, r6, r4, lsl #4
  0185c	0a000005	 beq         |$LN2@UfnPdd_IsE|
  01860	e1d330b6	 ldrh        r3, [r3, #6]

; 1503 :         }
; 1504 :     }
; 1505 :         
; 1506 :     // Done
; 1507 :     return ERROR_SUCCESS;

  01864	e3a00000	 mov         r0, #0
  01868	e2033020	 and         r3, r3, #0x20
  0186c	e5853000	 str         r3, [r5]

; 1508 : }

  01870	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  01874	e12fff1e	 bx          lr
  01878		 |$LN2@UfnPdd_IsE|

; 1499 :         }
; 1500 :         else
; 1501 :         {
; 1502 :             *pHalted = INREG16(&pCsrRegs->ep[endpoint].CSR.TxCSR) & TXCSR_P_SENDSTALL;

  01878	e1d330b2	 ldrh        r3, [r3, #2]

; 1503 :         }
; 1504 :     }
; 1505 :         
; 1506 :     // Done
; 1507 :     return ERROR_SUCCESS;

  0187c	e3a00000	 mov         r0, #0
  01880	e2033010	 and         r3, r3, #0x10
  01884	e5853000	 str         r3, [r5]

; 1508 : }

  01888	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  0188c	e12fff1e	 bx          lr
  01890		 |$LN13@UfnPdd_IsE|
  01890		 |$LN14@UfnPdd_IsE|
  01890	00000000	 DCD         |??_C@_1DE@ECDCBICE@?$AAU?$AAf?$AAn?$AAP?$AAd?$AAd?$AA_?$AAI?$AAs?$AAE?$AAn?$AAd?$AAp?$AAo?$AAi?$AAn?$AAt?$AAH?$AAa?$AAl?$AAt?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  01894		 |$LN15@UfnPdd_IsE|
  01894	00000000	 DCD         |dpCurSettings|
  01898		 |$M47525|

			 ENDP  ; |UfnPdd_IsEndpointHalted|

	EXPORT	|UfnPdd_SendControlStatusHandshake|
	EXPORT	|??_C@_1EK@FBCADDCM@?$AA?9?$AAU?$AAf?$AAn?$AAP?$AAd?$AAd?$AA_?$AAS?$AAe?$AAn?$AAd?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AAH?$AAa?$AAn?$AAd?$AAs?$AAh?$AAa@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IC@BLPLCJAE@?$AA?7?$AA?$CB?$AA?$CB?$AA?$CB?$AA?5?$AAU?$AAf?$AAn?$AAP?$AAd?$AAd?$AA_?$AAS?$AAe?$AAn?$AAd?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AAH?$AAa?$AAn@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EK@IJELKIMG@?$AA?7?$AAE?$AAP?$AA0?$AA_?$AAS?$AAT?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAO?$AAU?$AAT?$AA?5?$AA?$DN?$AA?$DO?$AA?5?$AAE?$AAP?$AA0?$AA_?$AAS?$AAT?$AA_?$AAS?$AAE?$AAT@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FM@CCEMDGJE@?$AA?7?$AAE?$AAP?$AA0?$AA_?$AAS?$AAT?$AA_?$AAS?$AAE?$AAT?$AAU?$AAP?$AA_?$AAP?$AAR?$AAO?$AAC?$AAE?$AAS?$AAS?$AAE?$AAD?$AA?5?$AA?$DN?$AA?$DO?$AA?5?$AAE?$AAP?$AA0?$AA_?$AAS@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EK@GPBDHODF@?$AA?$CL?$AAU?$AAf?$AAn?$AAP?$AAd?$AAd?$AA_?$AAS?$AAe?$AAn?$AAd?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AAH?$AAa?$AAn?$AAd?$AAs?$AAh?$AAa@| [ DATA ] ; `string'

  00088			 AREA	 |.pdata|, PDATA
|$T47556| DCD	|$LN22@UfnPdd_Sen|
	DCD	0x40004201

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EK@FBCADDCM@?$AA?9?$AAU?$AAf?$AAn?$AAP?$AAd?$AAd?$AA_?$AAS?$AAe?$AAn?$AAd?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AAH?$AAa?$AAn?$AAd?$AAs?$AAh?$AAa@| DCB "-"
	DCB	0x0, "U", 0x0, "f", 0x0, "n", 0x0, "P", 0x0, "d", 0x0, "d"
	DCB	0x0, "_", 0x0, "S", 0x0, "e", 0x0, "n", 0x0, "d", 0x0, "C"
	DCB	0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o", 0x0, "l"
	DCB	0x0, "S", 0x0, "t", 0x0, "a", 0x0, "t", 0x0, "u", 0x0, "s"
	DCB	0x0, "H", 0x0, "a", 0x0, "n", 0x0, "d", 0x0, "s", 0x0, "h"
	DCB	0x0, "a", 0x0, "k", 0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IC@BLPLCJAE@?$AA?7?$AA?$CB?$AA?$CB?$AA?$CB?$AA?5?$AAU?$AAf?$AAn?$AAP?$AAd?$AAd?$AA_?$AAS?$AAe?$AAn?$AAd?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AAH?$AAa?$AAn@| DCB 0x9
	DCB	0x0, "!", 0x0, "!", 0x0, "!", 0x0, " ", 0x0, "U", 0x0, "f"
	DCB	0x0, "n", 0x0, "P", 0x0, "d", 0x0, "d", 0x0, "_", 0x0, "S"
	DCB	0x0, "e", 0x0, "n", 0x0, "d", 0x0, "C", 0x0, "o", 0x0, "n"
	DCB	0x0, "t", 0x0, "r", 0x0, "o", 0x0, "l", 0x0, "S", 0x0, "t"
	DCB	0x0, "a", 0x0, "t", 0x0, "u", 0x0, "s", 0x0, "H", 0x0, "a"
	DCB	0x0, "n", 0x0, "d", 0x0, "s", 0x0, "h", 0x0, "a", 0x0, "k"
	DCB	0x0, "e", 0x0, " ", 0x0, "c", 0x0, "a", 0x0, "l", 0x0, "l"
	DCB	0x0, "e", 0x0, "d", 0x0, " ", 0x0, "w", 0x0, "i", 0x0, "t"
	DCB	0x0, "h", 0x0, " ", 0x0, "e", 0x0, "n", 0x0, "d", 0x0, "p"
	DCB	0x0, "o", 0x0, "i", 0x0, "n", 0x0, "t", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EK@IJELKIMG@?$AA?7?$AAE?$AAP?$AA0?$AA_?$AAS?$AAT?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAO?$AAU?$AAT?$AA?5?$AA?$DN?$AA?$DO?$AA?5?$AAE?$AAP?$AA0?$AA_?$AAS?$AAT?$AA_?$AAS?$AAE?$AAT@| DCB 0x9
	DCB	0x0, "E", 0x0, "P", 0x0, "0", 0x0, "_", 0x0, "S", 0x0, "T"
	DCB	0x0, "_", 0x0, "S", 0x0, "T", 0x0, "A", 0x0, "T", 0x0, "U"
	DCB	0x0, "S", 0x0, "_", 0x0, "O", 0x0, "U", 0x0, "T", 0x0, " "
	DCB	0x0, "=", 0x0, ">", 0x0, " ", 0x0, "E", 0x0, "P", 0x0, "0"
	DCB	0x0, "_", 0x0, "S", 0x0, "T", 0x0, "_", 0x0, "S", 0x0, "E"
	DCB	0x0, "T", 0x0, "U", 0x0, "P", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FM@CCEMDGJE@?$AA?7?$AAE?$AAP?$AA0?$AA_?$AAS?$AAT?$AA_?$AAS?$AAE?$AAT?$AAU?$AAP?$AA_?$AAP?$AAR?$AAO?$AAC?$AAE?$AAS?$AAS?$AAE?$AAD?$AA?5?$AA?$DN?$AA?$DO?$AA?5?$AAE?$AAP?$AA0?$AA_?$AAS@| DCB 0x9
	DCB	0x0, "E", 0x0, "P", 0x0, "0", 0x0, "_", 0x0, "S", 0x0, "T"
	DCB	0x0, "_", 0x0, "S", 0x0, "E", 0x0, "T", 0x0, "U", 0x0, "P"
	DCB	0x0, "_", 0x0, "P", 0x0, "R", 0x0, "O", 0x0, "C", 0x0, "E"
	DCB	0x0, "S", 0x0, "S", 0x0, "E", 0x0, "D", 0x0, " ", 0x0, "="
	DCB	0x0, ">", 0x0, " ", 0x0, "E", 0x0, "P", 0x0, "0", 0x0, "_"
	DCB	0x0, "S", 0x0, "T", 0x0, "_", 0x0, "S", 0x0, "T", 0x0, "A"
	DCB	0x0, "T", 0x0, "U", 0x0, "S", 0x0, "_", 0x0, "I", 0x0, "N"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EK@GPBDHODF@?$AA?$CL?$AAU?$AAf?$AAn?$AAP?$AAd?$AAd?$AA_?$AAS?$AAe?$AAn?$AAd?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AAH?$AAa?$AAn?$AAd?$AAs?$AAh?$AAa@| DCB "+"
	DCB	0x0, "U", 0x0, "f", 0x0, "n", 0x0, "P", 0x0, "d", 0x0, "d"
	DCB	0x0, "_", 0x0, "S", 0x0, "e", 0x0, "n", 0x0, "d", 0x0, "C"
	DCB	0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o", 0x0, "l"
	DCB	0x0, "S", 0x0, "t", 0x0, "a", 0x0, "t", 0x0, "u", 0x0, "s"
	DCB	0x0, "H", 0x0, "a", 0x0, "n", 0x0, "d", 0x0, "s", 0x0, "h"
	DCB	0x0, "a", 0x0, "k", 0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Ogtp

  01898			 AREA	 |.text|, CODE, ARM

  01898		 |UfnPdd_SendControlStatusHandshake| PROC

; 1532 : {

  01898		 |$LN22@UfnPdd_Sen|
  01898	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  0189c		 |$M47553|
  0189c	e1a07001	 mov         r7, r1
  018a0	e1a06000	 mov         r6, r0

; 1533 :     DWORD rc = ERROR_INVALID_PARAMETER;
; 1534 :     USBFN_PDD *pPdd = pPddContext;
; 1535 :     PCSP_MUSB_CSR_REGS pCsrRegs = pPdd->pUsbCsrRegs;
; 1536 :     
; 1537 :     OALMSG(OAL_ETHER&&OAL_FUNC, (L"+UfnPdd_SendControlStatusHandshake\r\n"));

  018a4	e59f50f0	 ldr         r5, [pc, #0xF0]
  018a8	e596800c	 ldr         r8, [r6, #0xC]
  018ac	e3a04057	 mov         r4, #0x57
  018b0	e5953440	 ldr         r3, [r5, #0x440]
  018b4	e3130a02	 tst         r3, #2, 20
  018b8	0a000004	 beq         |$LN7@UfnPdd_Sen|
  018bc	e3130004	 tst         r3, #4
  018c0	0a000002	 beq         |$LN7@UfnPdd_Sen|
  018c4	e59f00cc	 ldr         r0, [pc, #0xCC]
  018c8	eb000000	 bl          NKDbgPrintfW
  018cc	e5953440	 ldr         r3, [r5, #0x440]
  018d0		 |$LN7@UfnPdd_Sen|

; 1538 :     
; 1539 :     if (endpoint == 0)

  018d0	e3570000	 cmp         r7, #0
  018d4	1a00001c	 bne         |$LN4@UfnPdd_Sen|

; 1540 :     {
; 1541 :         if (pPdd->ep0State == EP0_ST_SETUP_PROCESSED)

  018d8	e5962178	 ldr         r2, [r6, #0x178]
  018dc	e3520001	 cmp         r2, #1
  018e0	1a00000e	 bne         |$LN3@UfnPdd_Sen|

; 1542 :         {
; 1543 :             OALMSG(OAL_ETHER&&OAL_FUNC, (TEXT("\tEP0_ST_SETUP_PROCESSED => EP0_ST_STATUS_IN\r\n")));

  018e4	e3130a02	 tst         r3, #2, 20
  018e8	13130004	 tstne       r3, #4
  018ec	159f00a0	 ldrne       r0, [pc, #0xA0]
  018f0	1b000000	 blne        NKDbgPrintfW

; 1544 :             SETREG16(&pCsrRegs->ep[endpoint].CSR.CSR0, CSR0_P_SERVICEDRXPKTRDY | CSR0_P_DATAEND);        

  018f4	e1d830b2	 ldrh        r3, [r8, #2]

; 1545 :             // Send zero byte to ack
; 1546 :             SETREG16(&pCsrRegs->ep[endpoint].CSR.CSR0, CSR0_P_TXPKTRDY);
; 1547 :             pPdd->ep0State = EP0_ST_STATUS_IN;

  018f8	e3a02002	 mov         r2, #2

; 1554 :         }
; 1555 :         
; 1556 :         rc = ERROR_SUCCESS;

  018fc	e3a04000	 mov         r4, #0
  01900	e3833048	 orr         r3, r3, #0x48
  01904	e1c830b2	 strh        r3, [r8, #2]
  01908	e1d830b2	 ldrh        r3, [r8, #2]
  0190c	e3833002	 orr         r3, r3, #2
  01910	e1c830b2	 strh        r3, [r8, #2]
  01914	e5862178	 str         r2, [r6, #0x178]
  01918	e5953440	 ldr         r3, [r5, #0x440]

; 1557 :     }
; 1558 :     else

  0191c	ea000012	 b           |$LN13@UfnPdd_Sen|
  01920		 |$LN3@UfnPdd_Sen|

; 1548 :         }
; 1549 :         
; 1550 :         if (pPdd->ep0State == EP0_ST_STATUS_OUT)

  01920	e3520003	 cmp         r2, #3
  01924	1a000006	 bne         |$LN2@UfnPdd_Sen|

; 1551 :         {
; 1552 :             OALMSG(OAL_ETHER&&OAL_FUNC, (L"\tEP0_ST_STATUS_OUT => EP0_ST_SETUP\r\n"));

  01928	e3130a02	 tst         r3, #2, 20
  0192c	13130004	 tstne       r3, #4
  01930	159f0058	 ldrne       r0, [pc, #0x58]
  01934	1b000000	 blne        NKDbgPrintfW

; 1553 :             pPdd->ep0State = EP0_ST_SETUP;

  01938	e3a03000	 mov         r3, #0
  0193c	e5863178	 str         r3, [r6, #0x178]
  01940	e5953440	 ldr         r3, [r5, #0x440]
  01944		 |$LN2@UfnPdd_Sen|

; 1554 :         }
; 1555 :         
; 1556 :         rc = ERROR_SUCCESS;

  01944	e3a04000	 mov         r4, #0

; 1557 :     }
; 1558 :     else

  01948	ea000007	 b           |$LN13@UfnPdd_Sen|
  0194c		 |$LN4@UfnPdd_Sen|

; 1559 :         OALMSG(OAL_ETHER&&OAL_FUNC, (L"\t!!! UfnPdd_SendControlStatusHandshake called with endpoint %d\r\n", endpoint));

  0194c	e3130a02	 tst         r3, #2, 20
  01950	0a000005	 beq         |$LN13@UfnPdd_Sen|
  01954	e3130004	 tst         r3, #4
  01958	0a000003	 beq         |$LN13@UfnPdd_Sen|
  0195c	e59f0028	 ldr         r0, [pc, #0x28]
  01960	e1a01007	 mov         r1, r7
  01964	eb000000	 bl          NKDbgPrintfW
  01968	e5953440	 ldr         r3, [r5, #0x440]
  0196c		 |$LN13@UfnPdd_Sen|

; 1560 :     
; 1561 :     OALMSG(OAL_ETHER&&OAL_FUNC, (L"-UfnPdd_SendControlStatusHandshake\r\n"));

  0196c	e3130a02	 tst         r3, #2, 20
  01970	13130004	 tstne       r3, #4
  01974	159f000c	 ldrne       r0, [pc, #0xC]
  01978	1b000000	 blne        NKDbgPrintfW

; 1562 :     
; 1563 :     return rc;
; 1564 : }

  0197c	e1a00004	 mov         r0, r4
  01980	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  01984	e12fff1e	 bx          lr
  01988		 |$LN23@UfnPdd_Sen|
  01988		 |$LN24@UfnPdd_Sen|
  01988	00000000	 DCD         |??_C@_1EK@FBCADDCM@?$AA?9?$AAU?$AAf?$AAn?$AAP?$AAd?$AAd?$AA_?$AAS?$AAe?$AAn?$AAd?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AAH?$AAa?$AAn?$AAd?$AAs?$AAh?$AAa@|
  0198c		 |$LN25@UfnPdd_Sen|
  0198c	00000000	 DCD         |??_C@_1IC@BLPLCJAE@?$AA?7?$AA?$CB?$AA?$CB?$AA?$CB?$AA?5?$AAU?$AAf?$AAn?$AAP?$AAd?$AAd?$AA_?$AAS?$AAe?$AAn?$AAd?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AAH?$AAa?$AAn@|
  01990		 |$LN26@UfnPdd_Sen|
  01990	00000000	 DCD         |??_C@_1EK@IJELKIMG@?$AA?7?$AAE?$AAP?$AA0?$AA_?$AAS?$AAT?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAO?$AAU?$AAT?$AA?5?$AA?$DN?$AA?$DO?$AA?5?$AAE?$AAP?$AA0?$AA_?$AAS?$AAT?$AA_?$AAS?$AAE?$AAT@|
  01994		 |$LN27@UfnPdd_Sen|
  01994	00000000	 DCD         |??_C@_1FM@CCEMDGJE@?$AA?7?$AAE?$AAP?$AA0?$AA_?$AAS?$AAT?$AA_?$AAS?$AAE?$AAT?$AAU?$AAP?$AA_?$AAP?$AAR?$AAO?$AAC?$AAE?$AAS?$AAS?$AAE?$AAD?$AA?5?$AA?$DN?$AA?$DO?$AA?5?$AAE?$AAP?$AA0?$AA_?$AAS@|
  01998		 |$LN28@UfnPdd_Sen|
  01998	00000000	 DCD         |??_C@_1EK@GPBDHODF@?$AA?$CL?$AAU?$AAf?$AAn?$AAP?$AAd?$AAd?$AA_?$AAS?$AAe?$AAn?$AAd?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AAH?$AAa?$AAn?$AAd?$AAs?$AAh?$AAa@|
  0199c		 |$LN29@UfnPdd_Sen|
  0199c	00000000	 DCD         |dpCurSettings|
  019a0		 |$M47554|

			 ENDP  ; |UfnPdd_SendControlStatusHandshake|

	EXPORT	|UfnPdd_InitiateRemoteWakeup|
	EXPORT	|??_C@_1EA@KNMJPPBI@?$AAU?$AAs?$AAb?$AAF?$AAn?$AAP?$AAd?$AAd?$AA_?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAt?$AAe?$AAR?$AAe?$AAm?$AAo?$AAt?$AAe?$AAW?$AAa?$AAk?$AAe?$AAu?$AAp?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00090			 AREA	 |.pdata|, PDATA
|$T47576| DCD	|$LN9@UfnPdd_Ini|
	DCD	0x40000c01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@KNMJPPBI@?$AAU?$AAs?$AAb?$AAF?$AAn?$AAP?$AAd?$AAd?$AA_?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAt?$AAe?$AAR?$AAe?$AAm?$AAo?$AAt?$AAe?$AAW?$AAa?$AAk?$AAe?$AAu?$AAp?$AA?$AN?$AA?6?$AA?$AA@| DCB "U"
	DCB	0x0, "s", 0x0, "b", 0x0, "F", 0x0, "n", 0x0, "P", 0x0, "d"
	DCB	0x0, "d", 0x0, "_", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t"
	DCB	0x0, "i", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, "R", 0x0, "e"
	DCB	0x0, "m", 0x0, "o", 0x0, "t", 0x0, "e", 0x0, "W", 0x0, "a"
	DCB	0x0, "k", 0x0, "e", 0x0, "u", 0x0, "p", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Ogtp

  019a0			 AREA	 |.text|, CODE, ARM

  019a0		 |UfnPdd_InitiateRemoteWakeup| PROC

; 1571 : {

  019a0		 |$LN9@UfnPdd_Ini|
  019a0	e52de004	 str         lr, [sp, #-4]!
  019a4		 |$M47573|

; 1572 : 	UNREFERENCED_PARAMETER(pPddContext);
; 1573 : 
; 1574 :     OALMSG(OAL_ETHER&&OAL_FUNC, (L"UsbFnPdd_InitiateRemoteWakeup\r\n"));

  019a4	e59f3020	 ldr         r3, [pc, #0x20]
  019a8	e5933440	 ldr         r3, [r3, #0x440]
  019ac	e3130a02	 tst         r3, #2, 20
  019b0	13130004	 tstne       r3, #4
  019b4	159f000c	 ldrne       r0, [pc, #0xC]
  019b8	1b000000	 blne        NKDbgPrintfW

; 1575 : 
; 1576 :     return ERROR_SUCCESS;

  019bc	e3a00000	 mov         r0, #0

; 1577 : }

  019c0	e49de004	 ldr         lr, [sp], #4
  019c4	e12fff1e	 bx          lr
  019c8		 |$LN10@UfnPdd_Ini|
  019c8		 |$LN11@UfnPdd_Ini|
  019c8	00000000	 DCD         |??_C@_1EA@KNMJPPBI@?$AAU?$AAs?$AAb?$AAF?$AAn?$AAP?$AAd?$AAd?$AA_?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAt?$AAe?$AAR?$AAe?$AAm?$AAo?$AAt?$AAe?$AAW?$AAa?$AAk?$AAe?$AAu?$AAp?$AA?$AN?$AA?6?$AA?$AA@|
  019cc		 |$LN12@UfnPdd_Ini|
  019cc	00000000	 DCD         |dpCurSettings|
  019d0		 |$M47574|

			 ENDP  ; |UfnPdd_InitiateRemoteWakeup|

	EXPORT	|UfnPdd_PowerDown|
	EXPORT	|??_C@_1FG@KMPMJHMD@?$AAS?$AAt?$AAa?$AAr?$AAt?$AAU?$AAS?$AAB?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAd?$AAi?$AAs?$AAa?$AAb?$AAl@| [ DATA ] ; `string'
	IMPORT	|EnableUSBClocks|

  00098			 AREA	 |.pdata|, PDATA
|$T47586| DCD	|$LN8@UfnPdd_Pow|
	DCD	0x40000e01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FG@KMPMJHMD@?$AAS?$AAt?$AAa?$AAr?$AAt?$AAU?$AAS?$AAB?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAd?$AAi?$AAs?$AAa?$AAb?$AAl@| DCB "S"
	DCB	0x0, "t", 0x0, "a", 0x0, "r", 0x0, "t", 0x0, "U", 0x0, "S"
	DCB	0x0, "B", 0x0, "C", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k"
	DCB	0x0, " ", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "t", 0x0, "o"
	DCB	0x0, " ", 0x0, "d", 0x0, "i", 0x0, "s", 0x0, "a", 0x0, "b"
	DCB	0x0, "l", 0x0, "e", 0x0, " ", 0x0, "c", 0x0, "l", 0x0, "o"
	DCB	0x0, "c", 0x0, "k", 0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Ogtp

  019d0			 AREA	 |.text|, CODE, ARM

  019d0		 |UfnPdd_PowerDown| PROC

; 1584 : {

  019d0		 |$LN8@UfnPdd_Pow|
  019d0	e52de004	 str         lr, [sp, #-4]!
  019d4		 |$M47583|

; 1585 : 	UNREFERENCED_PARAMETER(pPddContext);
; 1586 : 
; 1587 : 	if (!EnableUSBClocks(FALSE))

  019d4	e3a00000	 mov         r0, #0
  019d8	eb000000	 bl          EnableUSBClocks
  019dc	e3500000	 cmp         r0, #0
  019e0	1a000004	 bne         |$LN4@UfnPdd_Pow|

; 1588 : 	{
; 1589 : 		OALMSG(OAL_ETHER, (TEXT("StartUSBClock : Failed to disable clocks\r\n")));

  019e4	e59f3018	 ldr         r3, [pc, #0x18]
  019e8	e5933440	 ldr         r3, [r3, #0x440]
  019ec	e3130a02	 tst         r3, #2, 20
  019f0	159f0008	 ldrne       r0, [pc, #8]
  019f4	1b000000	 blne        NKDbgPrintfW
  019f8		 |$LN4@UfnPdd_Pow|

; 1590 : 	}
; 1591 : }

  019f8	e49de004	 ldr         lr, [sp], #4
  019fc	e12fff1e	 bx          lr
  01a00		 |$LN9@UfnPdd_Pow|
  01a00		 |$LN10@UfnPdd_Pow|
  01a00	00000000	 DCD         |??_C@_1FG@KMPMJHMD@?$AAS?$AAt?$AAa?$AAr?$AAt?$AAU?$AAS?$AAB?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAd?$AAi?$AAs?$AAa?$AAb?$AAl@|
  01a04		 |$LN11@UfnPdd_Pow|
  01a04	00000000	 DCD         |dpCurSettings|
  01a08		 |$M47584|

			 ENDP  ; |UfnPdd_PowerDown|

	EXPORT	|UfnPdd_PowerUp|
	EXPORT	|??_C@_1FE@IACJAPMH@?$AAS?$AAt?$AAa?$AAr?$AAt?$AAU?$AAS?$AAB?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAe?$AAn?$AAa?$AAb?$AAl?$AAe@| [ DATA ] ; `string'

  000a0			 AREA	 |.pdata|, PDATA
|$T47596| DCD	|$LN8@UfnPdd_Pow@2|
	DCD	0x40000e01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FE@IACJAPMH@?$AAS?$AAt?$AAa?$AAr?$AAt?$AAU?$AAS?$AAB?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAe?$AAn?$AAa?$AAb?$AAl?$AAe@| DCB "S"
	DCB	0x0, "t", 0x0, "a", 0x0, "r", 0x0, "t", 0x0, "U", 0x0, "S"
	DCB	0x0, "B", 0x0, "C", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k"
	DCB	0x0, " ", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "t", 0x0, "o"
	DCB	0x0, " ", 0x0, "e", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l"
	DCB	0x0, "e", 0x0, " ", 0x0, "c", 0x0, "l", 0x0, "o", 0x0, "c"
	DCB	0x0, "k", 0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogtp

  01a08			 AREA	 |.text|, CODE, ARM

  01a08		 |UfnPdd_PowerUp| PROC

; 1598 : {

  01a08		 |$LN8@UfnPdd_Pow@2|
  01a08	e52de004	 str         lr, [sp, #-4]!
  01a0c		 |$M47593|

; 1599 : 	UNREFERENCED_PARAMETER(pPddContext);
; 1600 : 
; 1601 : 	if (!EnableUSBClocks(TRUE))

  01a0c	e3a00001	 mov         r0, #1
  01a10	eb000000	 bl          EnableUSBClocks
  01a14	e3500000	 cmp         r0, #0
  01a18	1a000004	 bne         |$LN4@UfnPdd_Pow@2|

; 1602 : 	{
; 1603 : 		OALMSG(OAL_ETHER, (TEXT("StartUSBClock : Failed to enable clocks\r\n")));

  01a1c	e59f3018	 ldr         r3, [pc, #0x18]
  01a20	e5933440	 ldr         r3, [r3, #0x440]
  01a24	e3130a02	 tst         r3, #2, 20
  01a28	159f0008	 ldrne       r0, [pc, #8]
  01a2c	1b000000	 blne        NKDbgPrintfW
  01a30		 |$LN4@UfnPdd_Pow@2|

; 1604 : 	}
; 1605 : }

  01a30	e49de004	 ldr         lr, [sp], #4
  01a34	e12fff1e	 bx          lr
  01a38		 |$LN9@UfnPdd_Pow@2|
  01a38		 |$LN10@UfnPdd_Pow@2|
  01a38	00000000	 DCD         |??_C@_1FE@IACJAPMH@?$AAS?$AAt?$AAa?$AAr?$AAt?$AAU?$AAS?$AAB?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAe?$AAn?$AAa?$AAb?$AAl?$AAe@|
  01a3c		 |$LN11@UfnPdd_Pow@2|
  01a3c	00000000	 DCD         |dpCurSettings|
  01a40		 |$M47594|

			 ENDP  ; |UfnPdd_PowerUp|

	EXPORT	|UfnPdd_IOControl|

  000a8			 AREA	 |.pdata|, PDATA
|$T47610| DCD	|$LN13@UfnPdd_IOC|
	DCD	0x40001400
; Function compile flags: /Ogtp

  01a40			 AREA	 |.text|, CODE, ARM

  01a40		 |UfnPdd_IOControl| PROC

; 1614 : ) {

  01a40		 |$LN13@UfnPdd_IOC|
  01a40		 |$M47607|
  01a40	e3a03822	 mov         r3, #0x22, 16

; 1615 :     DWORD rc = ERROR_INVALID_PARAMETER;
; 1616 :     UFN_PDD_INFO *pInfo;
; 1617 : 
; 1618 : 	UNREFERENCED_PARAMETER(pPddContext);
; 1619 : 	UNREFERENCED_PARAMETER(pOutSize);
; 1620 : 	UNREFERENCED_PARAMETER(inSize);
; 1621 : 	UNREFERENCED_PARAMETER(pInBuffer);
; 1622 : 
; 1623 :     switch (code) {

  01a44	e3833f65	 orr         r3, r3, #0x65, 30
  01a48	e1520003	 cmp         r2, r3
  01a4c	e3a00057	 mov         r0, #0x57
  01a50	1a00000d	 bne         |$LN3@UfnPdd_IOC|

; 1624 :     case IOCTL_UFN_GET_PDD_INFO:
; 1625 :         if (source != BUS_IOCTL) break;

  01a54	e3510000	 cmp         r1, #0
  01a58	1a00000b	 bne         |$LN3@UfnPdd_IOC|

; 1626 :         if (pOutBuffer == NULL || outSize < sizeof(UFN_PDD_INFO)) break;

  01a5c	e59d2004	 ldr         r2, [sp, #4]
  01a60	e3520000	 cmp         r2, #0
  01a64	0a000008	 beq         |$LN3@UfnPdd_IOC|
  01a68	e59d3008	 ldr         r3, [sp, #8]
  01a6c	e353000c	 cmp         r3, #0xC
  01a70	3a000005	 bcc         |$LN3@UfnPdd_IOC|

; 1627 :         pInfo = (UFN_PDD_INFO*)pOutBuffer;
; 1628 :         pInfo->InterfaceType = Internal;
; 1629 :         pInfo->BusNumber = 0;
; 1630 :         pInfo->dwAlignment = sizeof(DWORD);

  01a74	e3a03004	 mov         r3, #4
  01a78	e3a01000	 mov         r1, #0
  01a7c	e5823008	 str         r3, [r2, #8]
  01a80	e5821000	 str         r1, [r2]
  01a84	e5821004	 str         r1, [r2, #4]

; 1631 :         rc = ERROR_SUCCESS;

  01a88	e3a00000	 mov         r0, #0
  01a8c		 |$LN3@UfnPdd_IOC|

; 1632 :         break;
; 1633 :     case IOCTL_BUS_GET_POWER_STATE:
; 1634 :         break;
; 1635 : 
; 1636 :     case IOCTL_BUS_SET_POWER_STATE:
; 1637 :         break;
; 1638 :     }
; 1639 :     
; 1640 :     return rc;
; 1641 : }

  01a8c	e12fff1e	 bx          lr
  01a90		 |$M47608|

			 ENDP  ; |UfnPdd_IOControl|

	EXPORT	|UfnPdd_Deinit|

  000b0			 AREA	 |.pdata|, PDATA
|$T47620| DCD	|$LN9@UfnPdd_Dei|
	DCD	0x40000c00
; Function compile flags: /Ogtp

  01a90			 AREA	 |.text|, CODE, ARM

  01a90		 |UfnPdd_Deinit| PROC

; 1648 : {

  01a90		 |$LN9@UfnPdd_Dei|
  01a90		 |$M47617|

; 1649 :     USBFN_PDD *pPdd = pPddContext;
; 1650 : 
; 1651 :     // Unmap USB controller registers
; 1652 :     if (pPdd->pUsbGenRegs != NULL) {

  01a90	e5903010	 ldr         r3, [r0, #0x10]
  01a94	e3a02000	 mov         r2, #0
  01a98	e3530000	 cmp         r3, #0

; 1653 :         pPdd->pUsbGenRegs = NULL;
; 1654 :     }
; 1655 :     
; 1656 :     if (pPdd->pUsbCsrRegs != NULL) {

  01a9c	e590300c	 ldr         r3, [r0, #0xC]
  01aa0	15802010	 strne       r2, [r0, #0x10]
  01aa4	e3530000	 cmp         r3, #0

; 1657 :         pPdd->pUsbCsrRegs = NULL;
; 1658 :     }
; 1659 : 
; 1660 :     if (pPdd->pUsbOtgRegs != NULL) {

  01aa8	e5903008	 ldr         r3, [r0, #8]
  01aac	1580200c	 strne       r2, [r0, #0xC]
  01ab0	e3530000	 cmp         r3, #0

; 1661 :         pPdd->pUsbOtgRegs = NULL;

  01ab4	15802008	 strne       r2, [r0, #8]

; 1662 :     }
; 1663 : 
; 1664 :     // Done
; 1665 :     return ERROR_SUCCESS;

  01ab8	e3a00000	 mov         r0, #0

; 1666 : }

  01abc	e12fff1e	 bx          lr
  01ac0		 |$M47618|

			 ENDP  ; |UfnPdd_Deinit|

	EXPORT	|UfnPdd_DeregisterDevice|

  000b8			 AREA	 |.pdata|, PDATA
|$T47627| DCD	|$LN5@UfnPdd_Der|
	DCD	0x40000200
; Function compile flags: /Ogtp

  01ac0			 AREA	 |.text|, CODE, ARM

  01ac0		 |UfnPdd_DeregisterDevice| PROC

; 1675 : {

  01ac0		 |$LN5@UfnPdd_Der|
  01ac0		 |$M47624|

; 1676 :     // Should shut down the endpoint...
; 1677 :     // This function is not currently called
; 1678 : 
; 1679 : 	UNREFERENCED_PARAMETER(pPddContext);
; 1680 : 
; 1681 :     return ERROR_SUCCESS;

  01ac0	e3a00000	 mov         r0, #0

; 1682 : }

  01ac4	e12fff1e	 bx          lr
  01ac8		 |$M47625|

			 ENDP  ; |UfnPdd_DeregisterDevice|

	EXPORT	|UfnPdd_Stop|
	EXPORT	|??_C@_1BM@ELBPNMDN@?$AAU?$AAf?$AAn?$AAP?$AAd?$AAd?$AA_?$AAS?$AAt?$AAo?$AAp?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|DisconnectHardware|

  000c0			 AREA	 |.pdata|, PDATA
|$T47637| DCD	|$LN8@UfnPdd_Sto|
	DCD	0x40001a01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@ELBPNMDN@?$AAU?$AAf?$AAn?$AAP?$AAd?$AAd?$AA_?$AAS?$AAt?$AAo?$AAp?$AA?$AN?$AA?6?$AA?$AA@| DCB "U"
	DCB	0x0, "f", 0x0, "n", 0x0, "P", 0x0, "d", 0x0, "d", 0x0, "_"
	DCB	0x0, "S", 0x0, "t", 0x0, "o", 0x0, "p", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Ogtp

  01ac8			 AREA	 |.text|, CODE, ARM

  01ac8		 |UfnPdd_Stop| PROC

; 1693 : {

  01ac8		 |$LN8@UfnPdd_Sto|
  01ac8	e92d4010	 stmdb       sp!, {r4, lr}
  01acc		 |$M47634|
  01acc	e1a04000	 mov         r4, r0

; 1694 :     USBFN_PDD *pPdd = pPddContext;
; 1695 : 
; 1696 :     OALMSG(OAL_ETHER&&OAL_FUNC, (L"UfnPdd_Stop\r\n"));

  01ad0	e59f3054	 ldr         r3, [pc, #0x54]
  01ad4	e5933440	 ldr         r3, [r3, #0x440]
  01ad8	e3130a02	 tst         r3, #2, 20
  01adc	13130004	 tstne       r3, #4
  01ae0	159f0040	 ldrne       r0, [pc, #0x40]
  01ae4	1b000000	 blne        NKDbgPrintfW

; 1697 : 
; 1698 :     // Disconnect hardware
; 1699 :     if ((INREG8(&pPdd->pUsbGenRegs->DevCtl) & DEVCTL_SESSION) == DEVCTL_SESSION)

  01ae8	e5942010	 ldr         r2, [r4, #0x10]
  01aec	e5d23060	 ldrb        r3, [r2, #0x60]
  01af0	e2033001	 and         r3, r3, #1
  01af4	e3530001	 cmp         r3, #1
  01af8	1a000002	 bne         |$LN1@UfnPdd_Sto|

; 1700 :         CLRREG8(&pPdd->pUsbGenRegs->DevCtl, DEVCTL_SESSION);

  01afc	e5d23060	 ldrb        r3, [r2, #0x60]
  01b00	e20330fe	 and         r3, r3, #0xFE
  01b04	e5c23060	 strb        r3, [r2, #0x60]
  01b08		 |$LN1@UfnPdd_Sto|

; 1701 :     CLRREG8(&pPdd->pUsbGenRegs->Power, POWER_SOFTCONN);        

  01b08	e5942010	 ldr         r2, [r4, #0x10]
  01b0c	e5d23001	 ldrb        r3, [r2, #1]
  01b10	e20330bf	 and         r3, r3, #0xBF
  01b14	e5c23001	 strb        r3, [r2, #1]

; 1702 :     DisconnectHardware();

  01b18	eb000000	 bl          DisconnectHardware

; 1703 : 
; 1704 :     // Done
; 1705 :     return ERROR_SUCCESS;

  01b1c	e3a00000	 mov         r0, #0

; 1706 : }

  01b20	e8bd4010	 ldmia       sp!, {r4, lr}
  01b24	e12fff1e	 bx          lr
  01b28		 |$LN9@UfnPdd_Sto|
  01b28		 |$LN10@UfnPdd_Sto|
  01b28	00000000	 DCD         |??_C@_1BM@ELBPNMDN@?$AAU?$AAf?$AAn?$AAP?$AAd?$AAd?$AA_?$AAS?$AAt?$AAo?$AAp?$AA?$AN?$AA?6?$AA?$AA@|
  01b2c		 |$LN11@UfnPdd_Sto|
  01b2c	00000000	 DCD         |dpCurSettings|
  01b30		 |$M47635|

			 ENDP  ; |UfnPdd_Stop|

	EXPORT	|UfnPdd_DeinitEndpoint|

  000c8			 AREA	 |.pdata|, PDATA
|$T47647| DCD	|$LN5@UfnPdd_Dei@2|
	DCD	0x40000200
; Function compile flags: /Ogtp

  01b30			 AREA	 |.text|, CODE, ARM

  01b30		 |UfnPdd_DeinitEndpoint| PROC

; 1715 : {

  01b30		 |$LN5@UfnPdd_Dei@2|
  01b30		 |$M47644|

; 1716 : 	UNREFERENCED_PARAMETER(pPddContext);
; 1717 : 	UNREFERENCED_PARAMETER(endPoint);
; 1718 : 
; 1719 :     // This function is not currently called
; 1720 :     return ERROR_SUCCESS;

  01b30	e3a00000	 mov         r0, #0

; 1721 : }

  01b34	e12fff1e	 bx          lr
  01b38		 |$M47645|

			 ENDP  ; |UfnPdd_DeinitEndpoint|

	EXPORT	|UfnPdd_InitEndpoint|

  000d0			 AREA	 |.pdata|, PDATA
|$T47654| DCD	|$LN5@UfnPdd_Ini@2|
	DCD	0x40000200
; Function compile flags: /Ogtp

  01b38			 AREA	 |.text|, CODE, ARM

  01b38		 |UfnPdd_InitEndpoint| PROC

; 1763 : {

  01b38		 |$LN5@UfnPdd_Ini@2|
  01b38		 |$M47651|

; 1764 : 	UNREFERENCED_PARAMETER(pPddContext);
; 1765 : 	UNREFERENCED_PARAMETER(endpoint);
; 1766 : 	UNREFERENCED_PARAMETER(speed);
; 1767 : 	UNREFERENCED_PARAMETER(pEPDesc);
; 1768 : 	UNREFERENCED_PARAMETER(pReserved);
; 1769 : 	UNREFERENCED_PARAMETER(configValue);
; 1770 : 	UNREFERENCED_PARAMETER(interfaceNumber);
; 1771 : 	UNREFERENCED_PARAMETER(alternateSetting);
; 1772 : 
; 1773 :     return ERROR_SUCCESS;

  01b38	e3a00000	 mov         r0, #0

; 1774 : }

  01b3c	e12fff1e	 bx          lr
  01b40		 |$M47652|

			 ENDP  ; |UfnPdd_InitEndpoint|

	EXPORT	|UfnPdd_SetAddress|
	EXPORT	|??_C@_1DE@EDFIEPML@?$AAU?$AAf?$AAn?$AAP?$AAd?$AAd?$AA_?$AAS?$AAe?$AAt?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?3?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  000d8			 AREA	 |.pdata|, PDATA
|$T47665| DCD	|$LN7@UfnPdd_Set|
	DCD	0x40001101

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DE@EDFIEPML@?$AAU?$AAf?$AAn?$AAP?$AAd?$AAd?$AA_?$AAS?$AAe?$AAt?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?3?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "U"
	DCB	0x0, "f", 0x0, "n", 0x0, "P", 0x0, "d", 0x0, "d", 0x0, "_"
	DCB	0x0, "S", 0x0, "e", 0x0, "t", 0x0, "A", 0x0, "d", 0x0, "d"
	DCB	0x0, "r", 0x0, "e", 0x0, "s", 0x0, "s", 0x0, ":", 0x0, " "
	DCB	0x0, "(", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Ogtp

  01b40			 AREA	 |.text|, CODE, ARM

  01b40		 |UfnPdd_SetAddress| PROC

; 1799 : {

  01b40		 |$LN7@UfnPdd_Set|
  01b40	e92d4030	 stmdb       sp!, {r4, r5, lr}
  01b44		 |$M47662|
  01b44	e1a04001	 mov         r4, r1
  01b48	e1a05000	 mov         r5, r0

; 1800 :     USBFN_PDD *pPdd = pPddContext;
; 1801 :     OALMSG(OAL_ETHER&&OAL_FUNC, (L"UfnPdd_SetAddress: (%d)\r\n", address));

  01b4c	e59f302c	 ldr         r3, [pc, #0x2C]
  01b50	e5933440	 ldr         r3, [r3, #0x440]
  01b54	e3130a02	 tst         r3, #2, 20
  01b58	13130004	 tstne       r3, #4
  01b5c	159f0018	 ldrne       r0, [pc, #0x18]
  01b60	1b000000	 blne        NKDbgPrintfW

; 1802 :     
; 1803 :     pPdd->bSetAddress = TRUE;

  01b64	e3a03001	 mov         r3, #1
  01b68	e5853170	 str         r3, [r5, #0x170]

; 1804 :     pPdd->ucAddress = address;

  01b6c	e5c5416c	 strb        r4, [r5, #0x16C]

; 1805 :     
; 1806 :     return ERROR_SUCCESS;

  01b70	e3a00000	 mov         r0, #0

; 1807 : }

  01b74	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  01b78	e12fff1e	 bx          lr
  01b7c		 |$LN8@UfnPdd_Set|
  01b7c		 |$LN9@UfnPdd_Set|
  01b7c	00000000	 DCD         |??_C@_1DE@EDFIEPML@?$AAU?$AAf?$AAn?$AAP?$AAd?$AAd?$AA_?$AAS?$AAe?$AAt?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?3?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  01b80		 |$LN10@UfnPdd_Set|
  01b80	00000000	 DCD         |dpCurSettings|
  01b84		 |$M47663|

			 ENDP  ; |UfnPdd_SetAddress|

	EXPORT	|UfnPdd_Start|
	EXPORT	|??_C@_1DA@KAOBCNKD@?$AA?$CL?$AAU?$AAS?$AAB?$AAF?$AAN?$AA?3?$AA?3?$AA?5?$AAU?$AAf?$AAn?$AAP?$AAd?$AAd?$AA_?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|ConnectHardware|
	IMPORT	|OALStall|

  000e0			 AREA	 |.pdata|, PDATA
|$T47678| DCD	|$LN8@UfnPdd_Sta@2|
	DCD	0x40003101

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@KAOBCNKD@?$AA?$CL?$AAU?$AAS?$AAB?$AAF?$AAN?$AA?3?$AA?3?$AA?5?$AAU?$AAf?$AAn?$AAP?$AAd?$AAd?$AA_?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "U", 0x0, "S", 0x0, "B", 0x0, "F", 0x0, "N", 0x0, ":"
	DCB	0x0, ":", 0x0, " ", 0x0, "U", 0x0, "f", 0x0, "n", 0x0, "P"
	DCB	0x0, "d", 0x0, "d", 0x0, "_", 0x0, "S", 0x0, "t", 0x0, "a"
	DCB	0x0, "r", 0x0, "t", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogtp

  01b84			 AREA	 |.text|, CODE, ARM

  01b84		 |UfnPdd_Start| PROC

; 1817 : {

  01b84		 |$LN8@UfnPdd_Sta@2|
  01b84	e92d4030	 stmdb       sp!, {r4, r5, lr}
  01b88		 |$M47675|
  01b88	e1a04000	 mov         r4, r0

; 1818 :     USBFN_PDD *pPdd = pPddContext;
; 1819 : 
; 1820 :     OALMSG(OAL_ETHER&&OAL_FUNC, (L"+USBFN:: UfnPdd_Start\r\n"));

  01b8c	e59f30b0	 ldr         r3, [pc, #0xB0]
  01b90	e5933440	 ldr         r3, [r3, #0x440]
  01b94	e3130a02	 tst         r3, #2, 20
  01b98	13130004	 tstne       r3, #4
  01b9c	159f009c	 ldrne       r0, [pc, #0x9C]
  01ba0	1b000000	 blne        NKDbgPrintfW

; 1821 : 
; 1822 :     // Disconnect hardware
; 1823 :     if ((INREG8(&pPdd->pUsbGenRegs->DevCtl) & DEVCTL_SESSION) == DEVCTL_SESSION)

  01ba4	e5942010	 ldr         r2, [r4, #0x10]
  01ba8	e5d23060	 ldrb        r3, [r2, #0x60]
  01bac	e2033001	 and         r3, r3, #1
  01bb0	e3530001	 cmp         r3, #1
  01bb4	1a000002	 bne         |$LN1@UfnPdd_Sta@2|

; 1824 :         CLRREG8(&pPdd->pUsbGenRegs->DevCtl, DEVCTL_SESSION);

  01bb8	e5d23060	 ldrb        r3, [r2, #0x60]
  01bbc	e20330fe	 and         r3, r3, #0xFE
  01bc0	e5c23060	 strb        r3, [r2, #0x60]
  01bc4		 |$LN1@UfnPdd_Sta@2|

; 1825 : 
; 1826 :     CLRREG8(&pPdd->pUsbGenRegs->Power, POWER_SOFTCONN);        

  01bc4	e5942010	 ldr         r2, [r4, #0x10]
  01bc8	e5d23001	 ldrb        r3, [r2, #1]
  01bcc	e20330bf	 and         r3, r3, #0xBF
  01bd0	e5c23001	 strb        r3, [r2, #1]

; 1827 :     DisconnectHardware();

  01bd4	eb000000	 bl          DisconnectHardware

; 1828 : 
; 1829 :     // Wait for while
; 1830 :     OALStall(10000);

  01bd8	e3a05c27	 mov         r5, #0x27, 24
  01bdc	e3850010	 orr         r0, r5, #0x10
  01be0	eb000000	 bl          OALStall

; 1831 : 
; 1832 : 	ConnectHardware();

  01be4	eb000000	 bl          ConnectHardware

; 1833 : 
; 1834 :     OUTREG8(&pPdd->pUsbGenRegs->IntrUSBE, 0);

  01be8	e5943010	 ldr         r3, [r4, #0x10]
  01bec	e3a01000	 mov         r1, #0

; 1835 : 	OUTREG16(&pPdd->pUsbGenRegs->IntrRxE, 0xFFFC);

  01bf0	e3a02cff	 mov         r2, #0xFF, 24
  01bf4	e5c3100b	 strb        r1, [r3, #0xB]
  01bf8	e5943010	 ldr         r3, [r4, #0x10]
  01bfc	e38220fc	 orr         r2, r2, #0xFC

; 1836 : 	OUTREG16(&pPdd->pUsbGenRegs->IntrTxE, 0xFFFC);
; 1837 : 	OUTREG8(&pPdd->pUsbGenRegs->Testmode, 0);
; 1838 :     OUTREG8(&pPdd->pUsbGenRegs->FAddr, 0); 
; 1839 : 
; 1840 :     // Wait for while
; 1841 :     OALStall(10000);

  01c00	e3850010	 orr         r0, r5, #0x10
  01c04	e1c320b8	 strh        r2, [r3, #8]
  01c08	e5943010	 ldr         r3, [r4, #0x10]
  01c0c	e1c320b6	 strh        r2, [r3, #6]
  01c10	e5943010	 ldr         r3, [r4, #0x10]
  01c14	e5c3100f	 strb        r1, [r3, #0xF]
  01c18	e5943010	 ldr         r3, [r4, #0x10]
  01c1c	e5c31000	 strb        r1, [r3]
  01c20	eb000000	 bl          OALStall

; 1842 : 
; 1843 :     // Attach device to bus
; 1844 : 	SETREG8(&pPdd->pUsbGenRegs->DevCtl, DEVCTL_SESSION);

  01c24	e5942010	 ldr         r2, [r4, #0x10]

; 1845 : 
; 1846 :     // Done
; 1847 :     return ERROR_SUCCESS;

  01c28	e3a00000	 mov         r0, #0
  01c2c	e5d23060	 ldrb        r3, [r2, #0x60]
  01c30	e3833001	 orr         r3, r3, #1
  01c34	e5c23060	 strb        r3, [r2, #0x60]

; 1848 : }

  01c38	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  01c3c	e12fff1e	 bx          lr
  01c40		 |$LN9@UfnPdd_Sta@2|
  01c40		 |$LN10@UfnPdd_Sta@2|
  01c40	00000000	 DCD         |??_C@_1DA@KAOBCNKD@?$AA?$CL?$AAU?$AAS?$AAB?$AAF?$AAN?$AA?3?$AA?3?$AA?5?$AAU?$AAf?$AAn?$AAP?$AAd?$AAd?$AA_?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?$AN?$AA?6?$AA?$AA@|
  01c44		 |$LN11@UfnPdd_Sta@2|
  01c44	00000000	 DCD         |dpCurSettings|
  01c48		 |$M47676|

			 ENDP  ; |UfnPdd_Start|

	EXPORT	|UfnPdd_RegisterDevice|
	EXPORT	|??_C@_1HI@CEIMIMOL@?$AAU?$AAf?$AAn?$AAP?$AAd?$AAd?$AA_?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?3?$AA?5?$AAU?$AAn?$AAs?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DE@BDGEJFPP@?$AAU?$AAs?$AAb?$AAF?$AAn?$AAP?$AAd?$AAd?$AA_?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  000e8			 AREA	 |.pdata|, PDATA
|$T47722| DCD	|$LN48@UfnPdd_Reg|
	DCD	0x4000d202

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HI@CEIMIMOL@?$AAU?$AAf?$AAn?$AAP?$AAd?$AAd?$AA_?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?3?$AA?5?$AAU?$AAn?$AAs?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt@| DCB "U"
	DCB	0x0, "f", 0x0, "n", 0x0, "P", 0x0, "d", 0x0, "d", 0x0, "_"
	DCB	0x0, "R", 0x0, "e", 0x0, "g", 0x0, "i", 0x0, "s", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "D", 0x0, "e", 0x0, "v", 0x0, "i"
	DCB	0x0, "c", 0x0, "e", 0x0, ":", 0x0, " ", 0x0, "U", 0x0, "n"
	DCB	0x0, "s", 0x0, "u", 0x0, "p", 0x0, "p", 0x0, "o", 0x0, "r"
	DCB	0x0, "t", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "e", 0x0, "n"
	DCB	0x0, "d", 0x0, "p", 0x0, "o", 0x0, "i", 0x0, "n", 0x0, "t"
	DCB	0x0, " ", 0x0, "T", 0x0, "r", 0x0, "a", 0x0, "n", 0x0, "s"
	DCB	0x0, "f", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, "t", 0x0, "y"
	DCB	0x0, "p", 0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DE@BDGEJFPP@?$AAU?$AAs?$AAb?$AAF?$AAn?$AAP?$AAd?$AAd?$AA_?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?$AN?$AA?6?$AA?$AA@| DCB "U"
	DCB	0x0, "s", 0x0, "b", 0x0, "F", 0x0, "n", 0x0, "P", 0x0, "d"
	DCB	0x0, "d", 0x0, "_", 0x0, "R", 0x0, "e", 0x0, "g", 0x0, "i"
	DCB	0x0, "s", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "D", 0x0, "e"
	DCB	0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Ogtp

  01c48			 AREA	 |.text|, CODE, ARM

  01c48		 |UfnPdd_RegisterDevice| PROC

; 1885 : {

  01c48		 |$LN48@UfnPdd_Reg|
  01c48	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  01c4c	e24dd014	 sub         sp, sp, #0x14
  01c50		 |$M47719|
  01c50	e1a0e000	 mov         lr, r0
  01c54	e58de000	 str         lr, [sp]

; 1886 :     // NOTE: InitEndpoints is not called in this implementation.  All configuration must
; 1887 :     // be done in this function.  Only the full speed configuration is used.
; 1888 :         
; 1889 :     USBFN_PDD *pPdd = pPddContext;
; 1890 :     PCSP_MUSB_GEN_REGS pGenRegs = pPdd->pUsbGenRegs;
; 1891 :     PCSP_MUSB_CSR_REGS pCsrRegs = pPdd->pUsbCsrRegs;
; 1892 :     UFN_INTERFACE *pIFC;
; 1893 :     UFN_ENDPOINT *pEP;
; 1894 :     DWORD endpoint;
; 1895 :     DWORD ifc, epx;
; 1896 :     
; 1897 : 	UNREFERENCED_PARAMETER(stringSets);
; 1898 : 	UNREFERENCED_PARAMETER(pStringSets);
; 1899 : 	UNREFERENCED_PARAMETER(pFullSpeedConfigDesc);
; 1900 : 	UNREFERENCED_PARAMETER(pHighSpeedConfigDesc);
; 1901 : 	UNREFERENCED_PARAMETER(pHighSpeedConfig);
; 1902 : 	UNREFERENCED_PARAMETER(pHighSpeedDeviceDesc);
; 1903 : 
; 1904 :     OALMSG(OAL_ETHER&&OAL_FUNC, (L"UsbFnPdd_RegisterDevice\r\n"));

  01c58	e59e300c	 ldr         r3, [lr, #0xC]
  01c5c	e59f2324	 ldr         r2, [pc, #0x324]
  01c60	e59e8010	 ldr         r8, [lr, #0x10]
  01c64	e58d300c	 str         r3, [sp, #0xC]
  01c68	e5923440	 ldr         r3, [r2, #0x440]
  01c6c	e3130a02	 tst         r3, #2, 20
  01c70	0a000004	 beq         |$LN27@UfnPdd_Reg|
  01c74	e3130004	 tst         r3, #4
  01c78	0a000002	 beq         |$LN27@UfnPdd_Reg|
  01c7c	e59f0308	 ldr         r0, [pc, #0x308]
  01c80	eb000000	 bl          NKDbgPrintfW

; 1959 :                 break;

  01c84	e59de000	 ldr         lr, [sp]
  01c88		 |$LN27@UfnPdd_Reg|
  01c88	e59d103c	 ldr         r1, [sp, #0x3C]
  01c8c	e3a0b000	 mov         r11, #0
  01c90	e58db004	 str         r11, [sp, #4]
  01c94	e5d1300b	 ldrb        r3, [r1, #0xB]
  01c98	e3130020	 tst         r3, #0x20
  01c9c	e59d3038	 ldr         r3, [sp, #0x38]
  01ca0	13a02001	 movne       r2, #1
  01ca4	03a02000	 moveq       r2, #0
  01ca8	e58e201c	 str         r2, [lr, #0x1C]
  01cac	e5d33007	 ldrb        r3, [r3, #7]
  01cb0	e3a02000	 mov         r2, #0
  01cb4	e1ce32bc	 strh        r3, [lr, #0x2C]
  01cb8	e3a03004	 mov         r3, #4
  01cbc	e5c8200e	 strb        r2, [r8, #0xE]
  01cc0	e5c83063	 strb        r3, [r8, #0x63]
  01cc4	e1c826b6	 strh        r2, [r8, #0x66]
  01cc8	e5c83062	 strb        r3, [r8, #0x62]
  01ccc	e3a03020	 mov         r3, #0x20
  01cd0	e1c836b4	 strh        r3, [r8, #0x64]
  01cd4	e5d13008	 ldrb        r3, [r1, #8]
  01cd8	e3530000	 cmp         r3, #0
  01cdc	0a00004e	 beq         |$LN22@UfnPdd_Reg|
  01ce0	e3a0a000	 mov         r10, #0
  01ce4	e58da008	 str         r10, [sp, #8]
  01ce8		 |$LL24@UfnPdd_Reg|
  01ce8	e5913018	 ldr         r3, [r1, #0x18]
  01cec	e3a06000	 mov         r6, #0
  01cf0	e08a9003	 add         r9, r10, r3
  01cf4	e5d93008	 ldrb        r3, [r9, #8]
  01cf8	e3530000	 cmp         r3, #0
  01cfc	0a00003f	 beq         |$LN23@UfnPdd_Reg|
  01d00	e59db00c	 ldr         r11, [sp, #0xC]
  01d04	e59fa27c	 ldr         r10, [pc, #0x27C]
  01d08	e3a04000	 mov         r4, #0
  01d0c		 |$LL21@UfnPdd_Reg|
  01d0c	e5993018	 ldr         r3, [r9, #0x18]
  01d10	e0830004	 add         r0, r3, r4
  01d14	e5d03006	 ldrb        r3, [r0, #6]
  01d18	e3130080	 tst         r3, #0x80
  01d1c	1a00002f	 bne         |$LN20@UfnPdd_Reg|
  01d20	e5d01008	 ldrb        r1, [r0, #8]
  01d24	e5d02009	 ldrb        r2, [r0, #9]
  01d28	e203500f	 and         r5, r3, #0xF
  01d2c	e0853105	 add         r3, r5, r5, lsl #2
  01d30	e08e7103	 add         r7, lr, r3, lsl #2
  01d34	e1813402	 orr         r3, r1, r2, lsl #8
  01d38	e1c732bc	 strh        r3, [r7, #0x2C]
  01d3c	e3a03001	 mov         r3, #1
  01d40	e5873030	 str         r3, [r7, #0x30]
  01d44	e1c850be	 strh        r5, [r8, #0xE]
  01d48	e5d03007	 ldrb        r3, [r0, #7]
  01d4c	e2033003	 and         r3, r3, #3
  01d50	e3530002	 cmp         r3, #2
  01d54	0a000015	 beq         |$LN14@UfnPdd_Reg|

; 1905 :     
; 1906 :     // Remember self powered flag
; 1907 :     pPdd->selfPowered =(pFullSpeedConfig->Descriptor.bmAttributes & 0x20) != 0;
; 1908 :     
; 1909 :     pPdd->ep[EP0].maxPacketSize = pFullSpeedDeviceDesc->bMaxPacketSize0;
; 1910 :     
; 1911 :     // Configure EP0
; 1912 :     OUTREG8(&pGenRegs->Index, 0);  /* select endpoint to access FIFO registers */
; 1913 :     
; 1914 :     OUTREG8(&pGenRegs->RxFIFOsz, MUSB_FIFOSZ_128_BYTE);
; 1915 :     OUTREG16(&pGenRegs->RxFIFOadd, 0);
; 1916 :     
; 1917 :     OUTREG8(&pGenRegs->TxFIFOsz, MUSB_FIFOSZ_128_BYTE);
; 1918 :     OUTREG16(&pGenRegs->TxFIFOadd, 256/8);
; 1919 :                 
; 1920 :     OALMSG(USBFN_DEBUG, (L"Setup endpoint\r\n"));   
; 1921 :     OALMSG(USBFN_DEBUG, (L"RxFIFOsz=%d\r\n", INREG8(&pGenRegs->RxFIFOsz)));
; 1922 :     OALMSG(USBFN_DEBUG, (L"RxFIFOadd=%d\r\n", INREG16(&pGenRegs->RxFIFOadd)));
; 1923 : 
; 1924 :     // Configure Rx EPs
; 1925 :     for (ifc = 0; ifc < pFullSpeedConfig->Descriptor.bNumInterfaces; ifc++)
; 1926 :     {
; 1927 :         // For each endpoint in interface
; 1928 :         pIFC = &pFullSpeedConfig->pInterfaces[ifc];
; 1929 :         for (epx = 0; epx < pIFC->Descriptor.bNumEndpoints; epx++)
; 1930 :         {
; 1931 :             pEP = &pIFC->pEndpoints[epx];
; 1932 :             // If it is Tx EP skip it
; 1933 :             if ((pEP->Descriptor.bEndpointAddress & 0x80) != 0)
; 1934 :                 continue;
; 1935 :             // Get EP address
; 1936 :             endpoint = pEP->Descriptor.bEndpointAddress & 0x0F;
; 1937 :             // Save max packet size & direction
; 1938 :             pPdd->ep[endpoint].maxPacketSize = pEP->Descriptor.wMaxPacketSize;
; 1939 :             pPdd->ep[endpoint].dirRx = TRUE;
; 1940 :             
; 1941 :             OUTREG16(&pGenRegs->Index, endpoint);  /* select endpoint to access FIFO registers */
; 1942 :             
; 1943 :             // configure endpoint based on type
; 1944 :             switch(pEP->Descriptor.bmAttributes & 0x03)

  01d58	e3530003	 cmp         r3, #3
  01d5c	0a000005	 beq         |$LN15@UfnPdd_Reg|

; 1967 :                 
; 1968 :                 OALMSG(USBFN_DEBUG, (L"RxFIFOsz=%d\r\n", INREG8(&pGenRegs->RxFIFOsz)));
; 1969 :                 OALMSG(USBFN_DEBUG, (L"RxFIFOadd=%d\r\n", INREG16(&pGenRegs->RxFIFOadd)));
; 1970 :                 break;
; 1971 :             case EP_TYPE_CTRL:
; 1972 :             case EP_TYPE_ISOCH:
; 1973 :             default:
; 1974 :                 OALMSG(OAL_ERROR, (L"UfnPdd_RegisterDevice: Unsupported endpoint Transfer type\r\n"));

  01d60	e59a3440	 ldr         r3, [r10, #0x440]
  01d64	e3130001	 tst         r3, #1
  01d68	0a00001c	 beq         |$LN20@UfnPdd_Reg|
  01d6c	e59f0210	 ldr         r0, [pc, #0x210]
  01d70	eb000000	 bl          NKDbgPrintfW

; 1975 :                 break;

  01d74	ea000018	 b           |$LN44@UfnPdd_Reg|
  01d78		 |$LN15@UfnPdd_Reg|

; 1945 :             {
; 1946 :             case EP_TYPE_INTERRUPT:
; 1947 :                 OALMSG(USBFN_DEBUG, (L"Interrupt endpoint\r\n"));
; 1948 :                 OUTREG8(&pGenRegs->RxFIFOsz, MUSB_FIFOSZ_512_BYTE);

  01d78	e3a03006	 mov         r3, #6
  01d7c	e5c83063	 strb        r3, [r8, #0x63]

; 1949 :                 OUTREG16(&pGenRegs->RxFIFOadd, CalcFIFOAddr(endpoint,pPdd->ep[endpoint].dirRx));

  01d80	e5971030	 ldr         r1, [r7, #0x30]
  01d84	e1a00005	 mov         r0, r5
  01d88	eb000000	 bl          CalcFIFOAddr
  01d8c	e1c806b6	 strh        r0, [r8, #0x66]

; 1950 :                 OUTREG16(&pCsrRegs->ep[endpoint].RxMaxP, pPdd->ep[endpoint].maxPacketSize);

  01d90	e1d732bc	 ldrh        r3, [r7, #0x2C]
  01d94	e08b2205	 add         r2, r11, r5, lsl #4
  01d98	e1c230b4	 strh        r3, [r2, #4]

; 1951 :                 OUTREG16(&pCsrRegs->ep[endpoint].RxCSR, RXCSR_P_FLUSHFIFO | RXCSR_P_CLRDATATOG);

  01d9c	e3a03090	 mov         r3, #0x90
  01da0	e1c230b6	 strh        r3, [r2, #6]

; 1952 :                 
; 1953 :                 OALMSG(USBFN_DEBUG, (L"RxFIFOsz=%d\r\n", INREG8(&pGenRegs->RxFIFOsz)));
; 1954 :                 OALMSG(USBFN_DEBUG, (L"RxFIFOadd=%d\r\n", INREG16(&pGenRegs->RxFIFOadd)));
; 1955 :                 
; 1956 :                 // Doesn't support PING in high speed mode
; 1957 :                 // doesn't hurt to set in any speed mode
; 1958 :                 SETREG16(&pCsrRegs->ep[endpoint].RxCSR, RXCSR_P_DISNYET);

  01da4	e1d230b6	 ldrh        r3, [r2, #6]
  01da8	e3833a01	 orr         r3, r3, #1, 20

; 1959 :                 break;

  01dac	ea000009	 b           |$LN45@UfnPdd_Reg|
  01db0		 |$LN14@UfnPdd_Reg|

; 1960 :                 
; 1961 :             case EP_TYPE_BULK:
; 1962 :                 OALMSG(USBFN_DEBUG, (L"Bulk endpoint\r\n"));
; 1963 :                 OUTREG8(&pGenRegs->RxFIFOsz, MUSB_FIFOSZ_512_BYTE);

  01db0	e3a03006	 mov         r3, #6
  01db4	e5c83063	 strb        r3, [r8, #0x63]

; 1964 :                 OUTREG16(&pGenRegs->RxFIFOadd, CalcFIFOAddr(endpoint,pPdd->ep[endpoint].dirRx));

  01db8	e5971030	 ldr         r1, [r7, #0x30]
  01dbc	e1a00005	 mov         r0, r5
  01dc0	eb000000	 bl          CalcFIFOAddr
  01dc4	e1c806b6	 strh        r0, [r8, #0x66]

; 1965 :                 OUTREG16(&pCsrRegs->ep[endpoint].RxMaxP, pPdd->ep[endpoint].maxPacketSize);

  01dc8	e1d732bc	 ldrh        r3, [r7, #0x2C]
  01dcc	e08b2205	 add         r2, r11, r5, lsl #4
  01dd0	e1c230b4	 strh        r3, [r2, #4]

; 1966 :                 OUTREG16(&pCsrRegs->ep[endpoint].RxCSR, RXCSR_P_FLUSHFIFO | RXCSR_P_CLRDATATOG);

  01dd4	e3a03090	 mov         r3, #0x90
  01dd8		 |$LN45@UfnPdd_Reg|
  01dd8	e1c230b6	 strh        r3, [r2, #6]
  01ddc		 |$LN44@UfnPdd_Reg|

; 1976 :             }
; 1977 :         }
; 1978 :     }
; 1979 :     
; 1980 :     // Configure Tx EPs
; 1981 :     for (ifc = 0; ifc < pFullSpeedConfig->Descriptor.bNumInterfaces; ifc++)

  01ddc	e59de000	 ldr         lr, [sp]

; 1966 :                 OUTREG16(&pCsrRegs->ep[endpoint].RxCSR, RXCSR_P_FLUSHFIFO | RXCSR_P_CLRDATATOG);

  01de0		 |$LN20@UfnPdd_Reg|
  01de0	e5d93008	 ldrb        r3, [r9, #8]
  01de4	e2866001	 add         r6, r6, #1
  01de8	e2844014	 add         r4, r4, #0x14
  01dec	e1560003	 cmp         r6, r3
  01df0	3affffc5	 bcc         |$LL21@UfnPdd_Reg|
  01df4	e59da008	 ldr         r10, [sp, #8]
  01df8	e59db004	 ldr         r11, [sp, #4]
  01dfc	e59d103c	 ldr         r1, [sp, #0x3C]
  01e00		 |$LN23@UfnPdd_Reg|
  01e00	e5d13008	 ldrb        r3, [r1, #8]
  01e04	e28bb001	 add         r11, r11, #1
  01e08	e28aa01c	 add         r10, r10, #0x1C
  01e0c	e15b0003	 cmp         r11, r3
  01e10	e58db004	 str         r11, [sp, #4]
  01e14	e58da008	 str         r10, [sp, #8]
  01e18	3affffb2	 bcc         |$LL24@UfnPdd_Reg|
  01e1c		 |$LN22@UfnPdd_Reg|

; 1976 :             }
; 1977 :         }
; 1978 :     }
; 1979 :     
; 1980 :     // Configure Tx EPs
; 1981 :     for (ifc = 0; ifc < pFullSpeedConfig->Descriptor.bNumInterfaces; ifc++)

  01e1c	e5d13008	 ldrb        r3, [r1, #8]
  01e20	e3a0a000	 mov         r10, #0
  01e24	e58da008	 str         r10, [sp, #8]
  01e28	e3530000	 cmp         r3, #0
  01e2c	0a000050	 beq         |$LN43@UfnPdd_Reg|
  01e30	e3a03b02	 mov         r3, #2, 22
  01e34	e3833048	 orr         r3, r3, #0x48
  01e38	e3a0b000	 mov         r11, #0
  01e3c	e58d3010	 str         r3, [sp, #0x10]
  01e40	e58db004	 str         r11, [sp, #4]
  01e44		 |$LL12@UfnPdd_Reg|

; 1982 :     {
; 1983 :         // For each endpoint in interface
; 1984 :         pIFC = &pFullSpeedConfig->pInterfaces[ifc];

  01e44	e5913018	 ldr         r3, [r1, #0x18]

; 1985 :         for (epx = 0; epx < pIFC->Descriptor.bNumEndpoints; epx++)

  01e48	e3a07000	 mov         r7, #0
  01e4c	e08b9003	 add         r9, r11, r3
  01e50	e5d93008	 ldrb        r3, [r9, #8]
  01e54	e3530000	 cmp         r3, #0
  01e58	0a00003d	 beq         |$LN11@UfnPdd_Reg|
  01e5c	e59da010	 ldr         r10, [sp, #0x10]
  01e60	e59db00c	 ldr         r11, [sp, #0xC]
  01e64	e3a06000	 mov         r6, #0
  01e68		 |$LL9@UfnPdd_Reg|

; 1986 :         {
; 1987 :             pEP = &pIFC->pEndpoints[epx];

  01e68	e5993018	 ldr         r3, [r9, #0x18]
  01e6c	e0830006	 add         r0, r3, r6

; 1988 :             // If it is Rx EP skip it
; 1989 :             if ((pEP->Descriptor.bEndpointAddress & 0x80) == 0)

  01e70	e5d03006	 ldrb        r3, [r0, #6]
  01e74	e3130080	 tst         r3, #0x80
  01e78	0a00002c	 beq         |$LN8@UfnPdd_Reg|

; 1990 :                 continue;
; 1991 :             // Get EP address
; 1992 :             endpoint = pEP->Descriptor.bEndpointAddress & 0x0F;
; 1993 :             // Save max packet size & direction
; 1994 :             pPdd->ep[endpoint].maxPacketSize = pEP->Descriptor.wMaxPacketSize;

  01e7c	e5d01008	 ldrb        r1, [r0, #8]
  01e80	e5d02009	 ldrb        r2, [r0, #9]
  01e84	e203400f	 and         r4, r3, #0xF
  01e88	e0843104	 add         r3, r4, r4, lsl #2
  01e8c	e08e5103	 add         r5, lr, r3, lsl #2
  01e90	e1813402	 orr         r3, r1, r2, lsl #8

; 1995 :             pPdd->ep[endpoint].dirRx = FALSE;

  01e94	e3a02000	 mov         r2, #0
  01e98	e5852030	 str         r2, [r5, #0x30]
  01e9c	e1c532bc	 strh        r3, [r5, #0x2C]

; 1996 :             
; 1997 :             OUTREG16(&pGenRegs->Index, endpoint);  /* select endpoint to access rxFIFOxx registers */

  01ea0	e1c840be	 strh        r4, [r8, #0xE]

; 1998 :             
; 1999 :             // configure endpoint based on type
; 2000 :             switch(pEP->Descriptor.bmAttributes & 0x03)

  01ea4	e5d03007	 ldrb        r3, [r0, #7]
  01ea8	e2033003	 and         r3, r3, #3
  01eac	e3530002	 cmp         r3, #2
  01eb0	0a000013	 beq         |$LN2@UfnPdd_Reg|
  01eb4	e3530003	 cmp         r3, #3
  01eb8	0a000006	 beq         |$LN3@UfnPdd_Reg|

; 2018 :                 
; 2019 :                 OALMSG(USBFN_DEBUG, (L"TxFIFOsz=%d\r\n", INREG8(&pGenRegs->TxFIFOsz)));
; 2020 :                 OALMSG(USBFN_DEBUG, (L"TxFIFOadd=%d\r\n", INREG16(&pGenRegs->TxFIFOadd)));
; 2021 :                 break;
; 2022 :             case EP_TYPE_CTRL:
; 2023 :             case EP_TYPE_ISOCH:
; 2024 :             default:
; 2025 :                 OALMSG(OAL_ERROR, (L"UfnPdd_RegisterDevice: Unsupported endpoint Transfer type\r\n"));

  01ebc	e59f30c4	 ldr         r3, [pc, #0xC4]
  01ec0	e5933440	 ldr         r3, [r3, #0x440]
  01ec4	e3130001	 tst         r3, #1
  01ec8	0a000018	 beq         |$LN8@UfnPdd_Reg|
  01ecc	e59f00b0	 ldr         r0, [pc, #0xB0]
  01ed0	eb000000	 bl          NKDbgPrintfW

; 2026 :                 break;

  01ed4	ea000015	 b           |$LN8@UfnPdd_Reg|
  01ed8		 |$LN3@UfnPdd_Reg|

; 2001 :             {
; 2002 :             case EP_TYPE_INTERRUPT:
; 2003 :                 OALMSG(USBFN_DEBUG, (L"Interrupt endpoint\r\n"));
; 2004 :                 OUTREG8(&pGenRegs->TxFIFOsz, MUSB_FIFOSZ_512_BYTE);

  01ed8	e3a03006	 mov         r3, #6
  01edc	e5c83062	 strb        r3, [r8, #0x62]

; 2005 :                 OUTREG16(&pGenRegs->TxFIFOadd, CalcFIFOAddr(endpoint,pPdd->ep[endpoint].dirRx));

  01ee0	e5951030	 ldr         r1, [r5, #0x30]
  01ee4	e1a00004	 mov         r0, r4
  01ee8	eb000000	 bl          CalcFIFOAddr
  01eec	e1c806b4	 strh        r0, [r8, #0x64]

; 2006 :                 OUTREG16(&pCsrRegs->ep[endpoint].TxMaxP, pPdd->ep[endpoint].maxPacketSize);

  01ef0	e1d532bc	 ldrh        r3, [r5, #0x2C]
  01ef4	e08b2204	 add         r2, r11, r4, lsl #4
  01ef8	e1c230b0	 strh        r3, [r2]

; 2007 :                 OUTREG16(&pCsrRegs->ep[endpoint].CSR.TxCSR, TXCSR_P_FLUSHFIFO | TXCSR_P_CLRDATATOG | TXCSR_P_FRCDATATOG);

  01efc	e1c2a0b2	 strh        r10, [r2, #2]

; 2008 :                 
; 2009 :                 OALMSG(USBFN_DEBUG, (L"TxFIFOsz=%d\r\n", INREG8(&pGenRegs->TxFIFOsz)));
; 2010 :                 OALMSG(USBFN_DEBUG, (L"TxFIFOadd=%d\r\n", INREG16(&pGenRegs->TxFIFOadd)));
; 2011 :                 break;

  01f00	ea00000a	 b           |$LN8@UfnPdd_Reg|
  01f04		 |$LN2@UfnPdd_Reg|

; 2012 :             case EP_TYPE_BULK:
; 2013 :                 OALMSG(USBFN_DEBUG, (L"Bulk endpoint\r\n"));
; 2014 :                 OUTREG8(&pGenRegs->TxFIFOsz, MUSB_FIFOSZ_512_BYTE);

  01f04	e3a03006	 mov         r3, #6
  01f08	e5c83062	 strb        r3, [r8, #0x62]

; 2015 :                 OUTREG16(&pGenRegs->TxFIFOadd, CalcFIFOAddr(endpoint,pPdd->ep[endpoint].dirRx));

  01f0c	e5951030	 ldr         r1, [r5, #0x30]
  01f10	e1a00004	 mov         r0, r4
  01f14	eb000000	 bl          CalcFIFOAddr
  01f18	e1c806b4	 strh        r0, [r8, #0x64]

; 2016 :                 OUTREG16(&pCsrRegs->ep[endpoint].TxMaxP, pPdd->ep[endpoint].maxPacketSize);

  01f1c	e1d532bc	 ldrh        r3, [r5, #0x2C]
  01f20	e08b2204	 add         r2, r11, r4, lsl #4
  01f24	e1c230b0	 strh        r3, [r2]

; 2017 :                 OUTREG16(&pCsrRegs->ep[endpoint].CSR.TxCSR, TXCSR_P_FLUSHFIFO | TXCSR_P_CLRDATATOG);

  01f28	e3a03048	 mov         r3, #0x48
  01f2c	e1c230b2	 strh        r3, [r2, #2]
  01f30		 |$LN8@UfnPdd_Reg|
  01f30	e5d93008	 ldrb        r3, [r9, #8]
  01f34	e2877001	 add         r7, r7, #1
  01f38	e59de000	 ldr         lr, [sp]
  01f3c	e1570003	 cmp         r7, r3
  01f40	e2866014	 add         r6, r6, #0x14
  01f44	3affffc7	 bcc         |$LL9@UfnPdd_Reg|
  01f48	e59da008	 ldr         r10, [sp, #8]
  01f4c	e59db004	 ldr         r11, [sp, #4]
  01f50	e59d103c	 ldr         r1, [sp, #0x3C]
  01f54		 |$LN11@UfnPdd_Reg|
  01f54	e5d13008	 ldrb        r3, [r1, #8]
  01f58	e28aa001	 add         r10, r10, #1
  01f5c	e28bb01c	 add         r11, r11, #0x1C
  01f60	e59de000	 ldr         lr, [sp]
  01f64	e15a0003	 cmp         r10, r3
  01f68	e58da008	 str         r10, [sp, #8]
  01f6c	e58db004	 str         r11, [sp, #4]
  01f70	3affffb3	 bcc         |$LL12@UfnPdd_Reg|
  01f74		 |$LN43@UfnPdd_Reg|

; 2027 :             }
; 2028 :         }
; 2029 :     }
; 2030 : 
; 2031 :     // Done
; 2032 :     return ERROR_SUCCESS;

  01f74	e3a00000	 mov         r0, #0

; 2033 : }

  01f78	e28dd014	 add         sp, sp, #0x14
  01f7c	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  01f80	e12fff1e	 bx          lr
  01f84		 |$LN49@UfnPdd_Reg|
  01f84		 |$LN50@UfnPdd_Reg|
  01f84	00000000	 DCD         |??_C@_1HI@CEIMIMOL@?$AAU?$AAf?$AAn?$AAP?$AAd?$AAd?$AA_?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?3?$AA?5?$AAU?$AAn?$AAs?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt@|
  01f88		 |$LN51@UfnPdd_Reg|
  01f88	00000000	 DCD         |dpCurSettings|
  01f8c		 |$LN52@UfnPdd_Reg|
  01f8c	00000000	 DCD         |??_C@_1DE@BDGEJFPP@?$AAU?$AAs?$AAb?$AAF?$AAn?$AAP?$AAd?$AAd?$AA_?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?$AN?$AA?6?$AA?$AA@|
  01f90		 |$M47720|

			 ENDP  ; |UfnPdd_RegisterDevice|


  000f0			 AREA	 |.pdata|, PDATA
|$T47739| DCD	|$LN7@CalcFIFOAd|
	DCD	0x40000400
; Function compile flags: /Ogtp

  01f90			 AREA	 |.text|, CODE, ARM

  01f90		 |CalcFIFOAddr| PROC

; 556  : {

  01f90		 |$LN7@CalcFIFOAd|
  01f90		 |$M47736|
  01f90	e3510000	 cmp         r1, #0

; 557  :     UINT fifoAddr;
; 558  : 
; 559  :     fifoAddr =  endpoint *(1024/8);

  01f94	e1a00380	 mov         r0, r0, lsl #7

; 560  : 
; 561  :     if (bRxDir)
; 562  :        fifoAddr +=512/8;

  01f98	12800040	 addne       r0, r0, #0x40

; 563  : 
; 564  :     return fifoAddr;
; 565  : }

  01f9c	e12fff1e	 bx          lr
  01fa0		 |$M47737|

			 ENDP  ; |CalcFIFOAddr|

	EXPORT	|UfnPdd_IsEndpointSupportable|

  000f8			 AREA	 |.pdata|, PDATA
|$T47750| DCD	|$LN7@UfnPdd_IsE@2|
	DCD	0x40000800
; Function compile flags: /Ogtp

  01fa0			 AREA	 |.text|, CODE, ARM

  01fa0		 |UfnPdd_IsEndpointSupportable| PROC

; 2065 : ) {

  01fa0		 |$LN7@UfnPdd_IsE@2|
  01fa0		 |$M47747|
  01fa0	e3510000	 cmp         r1, #0

; 2066 : 	UNREFERENCED_PARAMETER(pPddContext);
; 2067 : 	UNREFERENCED_PARAMETER(alternateSetting);
; 2068 : 	UNREFERENCED_PARAMETER(interfaceNumber);
; 2069 : 	UNREFERENCED_PARAMETER(configurationValue);
; 2070 : 	UNREFERENCED_PARAMETER(speed);
; 2071 : 
; 2072 :     // Update maximal packet size for EP0
; 2073 :     if (endPoint == 0) {
; 2074 : //        DEBUGCHK(pEPDesc->wMaxPacketSize <= 64);
; 2075 : //        DEBUGCHK(pEPDesc->bmAttributes == USB_ENDPOINT_TYPE_CONTROL);
; 2076 :         pEPDesc->wMaxPacketSize = 64;
; 2077 : 
; 2078 :     }
; 2079 : 
; 2080 :     // Done
; 2081 :     return ERROR_SUCCESS;

  01fa4	e3a00000	 mov         r0, #0
  01fa8	1a000003	 bne         |$LN1@UfnPdd_IsE@2|
  01fac	e3a02040	 mov         r2, #0x40
  01fb0	e3a01000	 mov         r1, #0
  01fb4	e5c32004	 strb        r2, [r3, #4]
  01fb8	e5c31005	 strb        r1, [r3, #5]
  01fbc		 |$LN1@UfnPdd_IsE@2|

; 2082 : }

  01fbc	e12fff1e	 bx          lr
  01fc0		 |$M47748|

			 ENDP  ; |UfnPdd_IsEndpointSupportable|

	EXPORT	|UfnPdd_IsConfigurationSupportable|
	EXPORT	|??_C@_1EI@OOOAJGFK@?$AAU?$AAf?$AAn?$AAP?$AAd?$AAd?$AA_?$AAI?$AAs?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAa?$AAt?$AAi?$AAo?$AAn?$AAS?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAa?$AAb?$AAl@| [ DATA ] ; `string'

  00100			 AREA	 |.pdata|, PDATA
|$T47777| DCD	|$LN24@UfnPdd_IsC|
	DCD	0x40003d01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EI@OOOAJGFK@?$AAU?$AAf?$AAn?$AAP?$AAd?$AAd?$AA_?$AAI?$AAs?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAa?$AAt?$AAi?$AAo?$AAn?$AAS?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAa?$AAb?$AAl@| DCB "U"
	DCB	0x0, "f", 0x0, "n", 0x0, "P", 0x0, "d", 0x0, "d", 0x0, "_"
	DCB	0x0, "I", 0x0, "s", 0x0, "C", 0x0, "o", 0x0, "n", 0x0, "f"
	DCB	0x0, "i", 0x0, "g", 0x0, "u", 0x0, "r", 0x0, "a", 0x0, "t"
	DCB	0x0, "i", 0x0, "o", 0x0, "n", 0x0, "S", 0x0, "u", 0x0, "p"
	DCB	0x0, "p", 0x0, "o", 0x0, "r", 0x0, "t", 0x0, "a", 0x0, "b"
	DCB	0x0, "l", 0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogtp

  01fc0			 AREA	 |.text|, CODE, ARM

  01fc0		 |UfnPdd_IsConfigurationSupportable| PROC

; 2114 : {

  01fc0		 |$LN24@UfnPdd_IsC|
  01fc0	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  01fc4		 |$M47774|
  01fc4	e1a05002	 mov         r5, r2

; 2115 :     DWORD rc = ERROR_INVALID_PARAMETER;
; 2116 :     UFN_INTERFACE *pIFC;
; 2117 :     UFN_ENDPOINT *pEP;
; 2118 :     WORD ifc, epx, count;
; 2119 :     WORD size;
; 2120 : 
; 2121 : 	UNREFERENCED_PARAMETER(pPddContext);
; 2122 : 	UNREFERENCED_PARAMETER(speed);
; 2123 : 
; 2124 :     OALMSG(OAL_ETHER&&OAL_FUNC, (L"UfnPdd_IsConfigurationSupportable\r\n"));

  01fc8	e59f30e0	 ldr         r3, [pc, #0xE0]
  01fcc	e5933440	 ldr         r3, [r3, #0x440]
  01fd0	e3130a02	 tst         r3, #2, 20
  01fd4	13130004	 tstne       r3, #4
  01fd8	159f00cc	 ldrne       r0, [pc, #0xCC]
  01fdc	1b000000	 blne        NKDbgPrintfW

; 2125 :     
; 2126 :     // Clear number of end points
; 2127 :     count = 0;
; 2128 :     
; 2129 :     // For each interface in configuration
; 2130 :     for (ifc = 0; ifc < pConfig->Descriptor.bNumInterfaces; ifc++)

  01fe0	e5d53008	 ldrb        r3, [r5, #8]
  01fe4	e3a06000	 mov         r6, #0
  01fe8	e3a04000	 mov         r4, #0
  01fec	e3530000	 cmp         r3, #0
  01ff0	0a000025	 beq         |$LN8@UfnPdd_IsC|
  01ff4	e3a0701c	 mov         r7, #0x1C
  01ff8		 |$LL10@UfnPdd_IsC|

; 2131 :     {
; 2132 :         // For each endpoint in interface
; 2133 :         pIFC = &pConfig->pInterfaces[ifc];

  01ff8	e5953018	 ldr         r3, [r5, #0x18]

; 2134 :         for (epx = 0; epx < pIFC->Descriptor.bNumEndpoints; epx++)

  01ffc	e3a0e000	 mov         lr, #0
  02000	e0203794	 mla         r0, r4, r7, r3
  02004	e5d03008	 ldrb        r3, [r0, #8]
  02008	e3530000	 cmp         r3, #0
  0200c	0a000014	 beq         |$LN5@UfnPdd_IsC|
  02010		 |$LL7@UfnPdd_IsC|

; 2135 :         {
; 2136 :             pEP = &pIFC->pEndpoints[epx];

  02010	e5902018	 ldr         r2, [r0, #0x18]
  02014	e08e310e	 add         r3, lr, lr, lsl #2
  02018	e0821103	 add         r1, r2, r3, lsl #2

; 2137 :             
; 2138 :             if (pEP->Descriptor.wMaxPacketSize > MAX_EPX_PKTSIZE) 

  0201c	e5d12008	 ldrb        r2, [r1, #8]
  02020	e5d13009	 ldrb        r3, [r1, #9]
  02024	e1822403	 orr         r2, r2, r3, lsl #8

; 2139 :             {
; 2140 :                 size = MAX_EPX_PKTSIZE;
; 2141 :             }
; 2142 :             else
; 2143 :             {
; 2144 :                 size = pEP->Descriptor.wMaxPacketSize;
; 2145 :             }
; 2146 :             
; 2147 :             
; 2148 :             // Is it ISO end point?
; 2149 :             if ((pEP->Descriptor.bmAttributes & 0x03) == 0x01)

  02028	e5d13007	 ldrb        r3, [r1, #7]
  0202c	e3520b01	 cmp         r2, #1, 22
  02030	83a02b01	 movhi       r2, #1, 22
  02034	e2033003	 and         r3, r3, #3
  02038	e3530001	 cmp         r3, #1
  0203c	0a000017	 beq         |$LN20@UfnPdd_IsC|

; 2150 :             {
; 2151 :                 // Actual driver doesn't support ISO endpoints
; 2152 :                 goto cleanUp;
; 2153 :             }
; 2154 :             // Update EP size
; 2155 :             pEP->Descriptor.wMaxPacketSize = size;

  02040	e1a03422	 mov         r3, r2, lsr #8
  02044	e5c13009	 strb        r3, [r1, #9]
  02048	e28e3001	 add         r3, lr, #1
  0204c	e5c12008	 strb        r2, [r1, #8]
  02050	e5d02008	 ldrb        r2, [r0, #8]
  02054	e1a0e803	 mov         lr, r3, lsl #16
  02058	e1a0e82e	 mov         lr, lr, lsr #16
  0205c	e15e0002	 cmp         lr, r2
  02060	3affffea	 bcc         |$LL7@UfnPdd_IsC|
  02064		 |$LN5@UfnPdd_IsC|

; 2156 :         }
; 2157 :         // Add number of end points to total count
; 2158 :         count = count + pIFC->Descriptor.bNumEndpoints;

  02064	e5d02008	 ldrb        r2, [r0, #8]
  02068	e5d51008	 ldrb        r1, [r5, #8]
  0206c	e2843001	 add         r3, r4, #1
  02070	e0822006	 add         r2, r2, r6
  02074	e1a04803	 mov         r4, r3, lsl #16
  02078	e1a06802	 mov         r6, r2, lsl #16
  0207c	e1a04824	 mov         r4, r4, lsr #16
  02080	e1a06826	 mov         r6, r6, lsr #16
  02084	e1540001	 cmp         r4, r1
  02088	3affffda	 bcc         |$LL10@UfnPdd_IsC|
  0208c		 |$LN8@UfnPdd_IsC|

; 2159 :     }
; 2160 :     
; 2161 :     // Can we support this configuration?
; 2162 :     if (count < USBD_EP_COUNT)

  0208c	e3560010	 cmp         r6, #0x10
  02090	2a000002	 bcs         |$LN20@UfnPdd_IsC|

; 2163 :         rc = ERROR_SUCCESS;

  02094	e3a00000	 mov         r0, #0

; 2164 :     
; 2165 : cleanUp:
; 2166 :     return rc;
; 2167 : }

  02098	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  0209c	e12fff1e	 bx          lr
  020a0		 |$LN20@UfnPdd_IsC|
  020a0	e3a00057	 mov         r0, #0x57
  020a4		 |$cleanUp$46801|
  020a4	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  020a8	e12fff1e	 bx          lr
  020ac		 |$LN25@UfnPdd_IsC|
  020ac		 |$LN26@UfnPdd_IsC|
  020ac	00000000	 DCD         |??_C@_1EI@OOOAJGFK@?$AAU?$AAf?$AAn?$AAP?$AAd?$AAd?$AA_?$AAI?$AAs?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAa?$AAt?$AAi?$AAo?$AAn?$AAS?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAa?$AAb?$AAl@|
  020b0		 |$LN27@UfnPdd_IsC|
  020b0	00000000	 DCD         |dpCurSettings|
  020b4		 |$M47775|

			 ENDP  ; |UfnPdd_IsConfigurationSupportable|

	EXPORT	|UfnPdd_Init|
	EXPORT	|??_C@_1CI@PLGKOIKJ@?$AA?9?$AAU?$AAS?$AAB?$AAF?$AAN?$AA?3?$AA?3?$AA?5?$AAP?$AAD?$AAD?$AA?5?$AAI?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HE@JFIJHLAK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAf?$AAn?$AAP?$AAd?$AAd?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?5?$AAr@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@KOBDIJLJ@?$AA?$CL?$AAU?$AAS?$AAB?$AAF?$AAN?$AA?3?$AA?3?$AA?5?$AAP?$AAD?$AAD?$AA?5?$AAI?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|SOCGetUSBOTGAddress|
	IMPORT	|memset|

  00108			 AREA	 |.pdata|, PDATA
|$T47805| DCD	|$LN21@UfnPdd_Ini@3|
	DCD	0x40009302

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@PLGKOIKJ@?$AA?9?$AAU?$AAS?$AAB?$AAF?$AAN?$AA?3?$AA?3?$AA?5?$AAP?$AAD?$AAD?$AA?5?$AAI?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "U", 0x0, "S", 0x0, "B", 0x0, "F", 0x0, "N", 0x0, ":"
	DCB	0x0, ":", 0x0, " ", 0x0, "P", 0x0, "D", 0x0, "D", 0x0, " "
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HE@JFIJHLAK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAf?$AAn?$AAP?$AAd?$AAd?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?5?$AAr@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "U", 0x0, "f", 0x0, "n", 0x0, "P", 0x0, "d", 0x0, "d"
	DCB	0x0, "_", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, ":"
	DCB	0x0, " ", 0x0, "C", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r"
	DCB	0x0, "o", 0x0, "l", 0x0, "l", 0x0, "e", 0x0, "r", 0x0, " "
	DCB	0x0, "r", 0x0, "e", 0x0, "g", 0x0, "i", 0x0, "s", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "s", 0x0, " ", 0x0, "m", 0x0, "a"
	DCB	0x0, "p", 0x0, "p", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, " "
	DCB	0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@KOBDIJLJ@?$AA?$CL?$AAU?$AAS?$AAB?$AAF?$AAN?$AA?3?$AA?3?$AA?5?$AAP?$AAD?$AAD?$AA?5?$AAI?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "U", 0x0, "S", 0x0, "B", 0x0, "F", 0x0, "N", 0x0, ":"
	DCB	0x0, ":", 0x0, " ", 0x0, "P", 0x0, "D", 0x0, "D", 0x0, " "
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Ogtp

  020b4			 AREA	 |.text|, CODE, ARM

  020b4		 |UfnPdd_Init| PROC

; 2180 : {

  020b4		 |$LN21@UfnPdd_Ini@3|
  020b4	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  020b8	e24dd00c	 sub         sp, sp, #0xC
  020bc		 |$M47802|
  020bc	e58d3000	 str         r3, [sp]
  020c0	e1a03001	 mov         r3, r1
  020c4	e58d3004	 str         r3, [sp, #4]
  020c8	e58d2008	 str         r2, [sp, #8]

; 2181 :     DWORD rc;
; 2182 :     USBFN_PDD *pPdd;
; 2183 : 
; 2184 : 	UNREFERENCED_PARAMETER(szActiveKey);
; 2185 : 
; 2186 :     OALMSG(OAL_ETHER&&OAL_FUNC, (L"+USBFN:: PDD Init\r\n"));

  020cc	e59f41d0	 ldr         r4, [pc, #0x1D0]
  020d0	e5940440	 ldr         r0, [r4, #0x440]
  020d4	e3100a02	 tst         r0, #2, 20
  020d8	13100004	 tstne       r0, #4
  020dc	159f0218	 ldrne       r0, [pc, #0x218]
  020e0	1b000000	 blne        NKDbgPrintfW

; 2187 :     
; 2188 :     rc = ERROR_INVALID_PARAMETER;
; 2189 :     
; 2190 :     // Allocate and initialize the OHCD object.
; 2191 :     pPdd = &g_usbfnpdd;
; 2192 : 
; 2193 :     if (pPdd == NULL) goto clean;
; 2194 : 
; 2195 :     // Clear the allocated object.
; 2196 :     memset(pPdd, 0, sizeof(USBFN_PDD));

  020e4	e59f61b4	 ldr         r6, [pc, #0x1B4]
  020e8	e3a02d06	 mov         r2, #6, 26
  020ec	e3a01000	 mov         r1, #0
  020f0	e1a00006	 mov         r0, r6
  020f4	e3a05057	 mov         r5, #0x57
  020f8	eb000000	 bl          memset

; 2197 : 
; 2198 :     // Map the USB registers
; 2199 :     pPdd->pUsbGenRegs = (PCSP_MUSB_GEN_REGS)OALPAtoUA( SOCGetUSBOTGAddress() + OMAP_MUSB_GEN_OFFSET );

  020fc	eb000000	 bl          SOCGetUSBOTGAddress
  02100	e3a01000	 mov         r1, #0
  02104	eb000000	 bl          OALPAtoVA
  02108	e3500000	 cmp         r0, #0
  0210c	e5860010	 str         r0, [r6, #0x10]

; 2200 :     if (pPdd->pUsbGenRegs == NULL) {

  02110	1a000005	 bne         |$LN3@UfnPdd_Ini@3|

; 2201 :         OALMSG(OAL_ERROR, (
; 2202 :             L"ERROR: UfnPdd_Init: Controller registers mapping failed\r\n"
; 2203 :         ));

  02114	e5943440	 ldr         r3, [r4, #0x440]
  02118	e3130001	 tst         r3, #1
  0211c	0a000055	 beq         |$clean$46818|
  02120	e59f01d0	 ldr         r0, [pc, #0x1D0]
  02124	eb000000	 bl          NKDbgPrintfW

; 2204 :         goto clean;

  02128	ea000052	 b           |$clean$46818|
  0212c		 |$LN3@UfnPdd_Ini@3|

; 2205 :     }
; 2206 :     
; 2207 :     pPdd->pUsbCsrRegs = (PCSP_MUSB_CSR_REGS)OALPAtoUA( SOCGetUSBOTGAddress() + OMAP_MUSB_CSR_OFFSET );

  0212c	eb000000	 bl          SOCGetUSBOTGAddress
  02130	e2800c01	 add         r0, r0, #1, 24
  02134	e3a01000	 mov         r1, #0
  02138	eb000000	 bl          OALPAtoVA
  0213c	e3500000	 cmp         r0, #0
  02140	e586000c	 str         r0, [r6, #0xC]

; 2208 :     if (pPdd->pUsbCsrRegs == NULL) {

  02144	1a000005	 bne         |$LN2@UfnPdd_Ini@3|
  02148	e5943440	 ldr         r3, [r4, #0x440]

; 2209 :         OALMSG(OAL_ERROR, (
; 2210 :             L"ERROR: UfnPdd_Init: Controller registers mapping failed\r\n"
; 2211 :         ));

  0214c	e3130001	 tst         r3, #1
  02150	0a000048	 beq         |$clean$46818|
  02154	e59f019c	 ldr         r0, [pc, #0x19C]
  02158	eb000000	 bl          NKDbgPrintfW

; 2212 :         goto clean;

  0215c	ea000045	 b           |$clean$46818|
  02160		 |$LN2@UfnPdd_Ini@3|

; 2213 :     }
; 2214 :     
; 2215 :     pPdd->pUsbOtgRegs = (PCSP_MUSB_OTG_REGS)OALPAtoUA( SOCGetUSBOTGAddress() + OMAP_MUSB_OTG_OFFSET );

  02160	eb000000	 bl          SOCGetUSBOTGAddress
  02164	e2800b01	 add         r0, r0, #1, 22
  02168	e3a01000	 mov         r1, #0
  0216c	eb000000	 bl          OALPAtoVA
  02170	e3500000	 cmp         r0, #0
  02174	e5860008	 str         r0, [r6, #8]

; 2216 :     if (pPdd->pUsbOtgRegs == NULL) {

  02178	1a000005	 bne         |$LN1@UfnPdd_Ini@3|
  0217c	e5943440	 ldr         r3, [r4, #0x440]

; 2217 :         OALMSG(OAL_ERROR, (
; 2218 :             L"ERROR: UfnPdd_Init: Controller registers mapping failed\r\n"
; 2219 :         ));

  02180	e3130001	 tst         r3, #1
  02184	0a00003b	 beq         |$clean$46818|
  02188	e59f0168	 ldr         r0, [pc, #0x168]
  0218c	eb000000	 bl          NKDbgPrintfW

; 2220 :         goto clean;

  02190	ea000038	 b           |$clean$46818|
  02194		 |$LN1@UfnPdd_Ini@3|

; 2221 :     }
; 2222 :     
; 2223 :     pPdd->devState = 0;

  02194	e3a03000	 mov         r3, #0

; 2224 :     
; 2225 :     // Enable USBHS clocks
; 2226 :     StartUSBClock(pPdd);

  02198	e1a00006	 mov         r0, r6
  0219c	e5863018	 str         r3, [r6, #0x18]
  021a0	eb000000	 bl          StartUSBClock

; 2227 :     
; 2228 :     // Set PDD interface
; 2229 :     pPddIfc->dwVersion = UFN_PDD_INTERFACE_VERSION;
; 2230 :     pPddIfc->dwCapabilities = UFN_PDD_CAPS_SUPPORTS_FULL_SPEED;
; 2231 :     pPddIfc->dwEndpointCount = USBD_EP_COUNT;
; 2232 :     pPddIfc->pvPddContext = pPdd;
; 2233 :     pPddIfc->pfnDeinit = UfnPdd_Deinit;
; 2234 :     pPddIfc->pfnIsConfigurationSupportable = UfnPdd_IsConfigurationSupportable;
; 2235 :     pPddIfc->pfnIsEndpointSupportable = UfnPdd_IsEndpointSupportable;
; 2236 :     pPddIfc->pfnInitEndpoint = UfnPdd_InitEndpoint;
; 2237 :     pPddIfc->pfnRegisterDevice = UfnPdd_RegisterDevice;
; 2238 :     pPddIfc->pfnDeregisterDevice = UfnPdd_DeregisterDevice;
; 2239 :     pPddIfc->pfnStart = UfnPdd_Start;
; 2240 :     pPddIfc->pfnStop = UfnPdd_Stop;
; 2241 :     pPddIfc->pfnIssueTransfer = UfnPdd_IssueTransfer;
; 2242 :     pPddIfc->pfnAbortTransfer = UfnPdd_AbortTransfer;
; 2243 :     pPddIfc->pfnDeinitEndpoint = UfnPdd_DeinitEndpoint;
; 2244 :     pPddIfc->pfnStallEndpoint = UfnPdd_StallEndpoint;
; 2245 :     pPddIfc->pfnClearEndpointStall = UfnPdd_ClearEndpointStall;
; 2246 :     pPddIfc->pfnSendControlStatusHandshake = UfnPdd_SendControlStatusHandshake;
; 2247 :     pPddIfc->pfnSetAddress = UfnPdd_SetAddress;
; 2248 :     pPddIfc->pfnIsEndpointHalted = UfnPdd_IsEndpointHalted;
; 2249 :     pPddIfc->pfnInitiateRemoteWakeup = UfnPdd_InitiateRemoteWakeup;
; 2250 :     pPddIfc->pfnPowerDown = UfnPdd_PowerDown;
; 2251 :     pPddIfc->pfnPowerUp = UfnPdd_PowerUp;
; 2252 :     pPddIfc->pfnIOControl = UfnPdd_IOControl;

  021a4	e59f3148	 ldr         r3, [pc, #0x148]
  021a8	e59d2000	 ldr         r2, [sp]
  021ac	e59f113c	 ldr         r1, [pc, #0x13C]
  021b0	e59f0134	 ldr         r0, [pc, #0x134]
  021b4	e5823010	 str         r3, [r2, #0x10]
  021b8	e59f2128	 ldr         r2, [pc, #0x128]
  021bc	e59d3000	 ldr         r3, [sp]
  021c0	e59fe11c	 ldr         lr, [pc, #0x11C]
  021c4	e59f4114	 ldr         r4, [pc, #0x114]
  021c8	e5832014	 str         r2, [r3, #0x14]
  021cc	e1a02003	 mov         r2, r3
  021d0	e59f3104	 ldr         r3, [pc, #0x104]
  021d4	e59f50fc	 ldr         r5, [pc, #0xFC]
  021d8	e59f60f4	 ldr         r6, [pc, #0xF4]
  021dc	e5823044	 str         r3, [r2, #0x44]
  021e0	e59f30e8	 ldr         r3, [pc, #0xE8]
  021e4	e59f70e0	 ldr         r7, [pc, #0xE0]
  021e8	e59f80d8	 ldr         r8, [pc, #0xD8]
  021ec	e5823048	 str         r3, [r2, #0x48]
  021f0	e59f30cc	 ldr         r3, [pc, #0xCC]
  021f4	e59f90c4	 ldr         r9, [pc, #0xC4]
  021f8	e59fa0bc	 ldr         r10, [pc, #0xBC]
  021fc	e582304c	 str         r3, [r2, #0x4C]
  02200	e59f30b0	 ldr         r3, [pc, #0xB0]
  02204	e59fb0a8	 ldr         r11, [pc, #0xA8]
  02208	e5821018	 str         r1, [r2, #0x18]
  0220c	e5823050	 str         r3, [r2, #0x50]
  02210	e59f3098	 ldr         r3, [pc, #0x98]
  02214	e282c01c	 add         r12, r2, #0x1C
  02218	e88c4001	 stmia       r12, {r0, lr}
  0221c	e5823054	 str         r3, [r2, #0x54]
  02220	e59f3084	 ldr         r3, [pc, #0x84]
  02224	e282c024	 add         r12, r2, #0x24
  02228	e88c0ff0	 stmia       r12, {r4 - r11}

; 2253 : 
; 2254 :     // Save MDD context & notify function
; 2255 :     pPdd->pMddContext = pMddContext;
; 2256 :     pPdd->pfnNotify = pMddIfc->pfnNotify;
; 2257 : 
; 2258 :     // Done
; 2259 :     rc = ERROR_SUCCESS;

  0222c	e3a05000	 mov         r5, #0
  02230	e5823058	 str         r3, [r2, #0x58]
  02234	e59f306c	 ldr         r3, [pc, #0x6C]
  02238	e59f4064	 ldr         r4, [pc, #0x64]
  0223c	e582305c	 str         r3, [r2, #0x5C]
  02240	e3a03806	 mov         r3, #6, 16
  02244	e5823000	 str         r3, [r2]
  02248	e3a03001	 mov         r3, #1
  0224c	e5823004	 str         r3, [r2, #4]
  02250	e3a03010	 mov         r3, #0x10
  02254	e5823008	 str         r3, [r2, #8]
  02258	e59f2040	 ldr         r2, [pc, #0x40]
  0225c	e59d3000	 ldr         r3, [sp]
  02260	e583200c	 str         r2, [r3, #0xC]
  02264	e59d3004	 ldr         r3, [sp, #4]
  02268	e5823000	 str         r3, [r2]
  0226c	e59d3008	 ldr         r3, [sp, #8]
  02270	e5933004	 ldr         r3, [r3, #4]
  02274	e5823004	 str         r3, [r2, #4]
  02278		 |$clean$46818|
  02278	e5943440	 ldr         r3, [r4, #0x440]

; 2260 : clean:
; 2261 :     OALMSG(OAL_ETHER&&OAL_FUNC, (L"-USBFN:: PDD Init\r\n"));

  0227c	e3130a02	 tst         r3, #2, 20
  02280	13130004	 tstne       r3, #4
  02284	159f0010	 ldrne       r0, [pc, #0x10]
  02288	1b000000	 blne        NKDbgPrintfW

; 2262 :     return rc;
; 2263 : }

  0228c	e1a00005	 mov         r0, r5
  02290	e28dd00c	 add         sp, sp, #0xC
  02294	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  02298	e12fff1e	 bx          lr
  0229c		 |$LN22@UfnPdd_Ini@3|
  0229c		 |$LN23@UfnPdd_Ini@3|
  0229c	00000000	 DCD         |??_C@_1CI@PLGKOIKJ@?$AA?9?$AAU?$AAS?$AAB?$AAF?$AAN?$AA?3?$AA?3?$AA?5?$AAP?$AAD?$AAD?$AA?5?$AAI?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@|
  022a0		 |$LN24@UfnPdd_Ini@3|
  022a0	00000000	 DCD         |g_usbfnpdd|
  022a4		 |$LN25@UfnPdd_Ini@3|
  022a4	00000000	 DCD         |dpCurSettings|
  022a8		 |$LN26@UfnPdd_Ini@3|
  022a8	00000000	 DCD         |UfnPdd_IOControl|
  022ac		 |$LN27@UfnPdd_Ini@3|
  022ac	00000000	 DCD         |UfnPdd_PowerUp|
  022b0		 |$LN28@UfnPdd_Ini@3|
  022b0	00000000	 DCD         |UfnPdd_PowerDown|
  022b4		 |$LN29@UfnPdd_Ini@3|
  022b4	00000000	 DCD         |UfnPdd_ClearEndpointStall|
  022b8		 |$LN30@UfnPdd_Ini@3|
  022b8	00000000	 DCD         |UfnPdd_InitiateRemoteWakeup|
  022bc		 |$LN31@UfnPdd_Ini@3|
  022bc	00000000	 DCD         |UfnPdd_StallEndpoint|
  022c0		 |$LN32@UfnPdd_Ini@3|
  022c0	00000000	 DCD         |UfnPdd_DeinitEndpoint|
  022c4		 |$LN33@UfnPdd_Ini@3|
  022c4	00000000	 DCD         |UfnPdd_IsEndpointHalted|
  022c8		 |$LN34@UfnPdd_Ini@3|
  022c8	00000000	 DCD         |UfnPdd_AbortTransfer|
  022cc		 |$LN35@UfnPdd_Ini@3|
  022cc	00000000	 DCD         |UfnPdd_IssueTransfer|
  022d0		 |$LN36@UfnPdd_Ini@3|
  022d0	00000000	 DCD         |UfnPdd_SetAddress|
  022d4		 |$LN37@UfnPdd_Ini@3|
  022d4	00000000	 DCD         |UfnPdd_Stop|
  022d8		 |$LN38@UfnPdd_Ini@3|
  022d8	00000000	 DCD         |UfnPdd_Start|
  022dc		 |$LN39@UfnPdd_Ini@3|
  022dc	00000000	 DCD         |UfnPdd_SendControlStatusHandshake|
  022e0		 |$LN40@UfnPdd_Ini@3|
  022e0	00000000	 DCD         |UfnPdd_DeregisterDevice|
  022e4		 |$LN41@UfnPdd_Ini@3|
  022e4	00000000	 DCD         |UfnPdd_RegisterDevice|
  022e8		 |$LN42@UfnPdd_Ini@3|
  022e8	00000000	 DCD         |UfnPdd_IsConfigurationSupportable|
  022ec		 |$LN43@UfnPdd_Ini@3|
  022ec	00000000	 DCD         |UfnPdd_InitEndpoint|
  022f0		 |$LN44@UfnPdd_Ini@3|
  022f0	00000000	 DCD         |UfnPdd_IsEndpointSupportable|
  022f4		 |$LN45@UfnPdd_Ini@3|
  022f4	00000000	 DCD         |UfnPdd_Deinit|
  022f8		 |$LN46@UfnPdd_Ini@3|
  022f8	00000000	 DCD         |??_C@_1HE@JFIJHLAK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAf?$AAn?$AAP?$AAd?$AAd?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?5?$AAr@|
  022fc		 |$LN47@UfnPdd_Ini@3|
  022fc	00000000	 DCD         |??_C@_1CI@KOBDIJLJ@?$AA?$CL?$AAU?$AAS?$AAB?$AAF?$AAN?$AA?3?$AA?3?$AA?5?$AAP?$AAD?$AAD?$AA?5?$AAI?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@|
  02300		 |$M47803|

			 ENDP  ; |UfnPdd_Init|

	EXPORT	|??_C@_1CA@CNHBOOBH@?$AAS?$AAt?$AAa?$AAr?$AAt?$AAU?$AAS?$AAB?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|ResetHardware|

  00110			 AREA	 |.pdata|, PDATA
|$T47842| DCD	|$LN10@StartUSBCl|
	DCD	0x40001801

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CA@CNHBOOBH@?$AAS?$AAt?$AAa?$AAr?$AAt?$AAU?$AAS?$AAB?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?$AN?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "t", 0x0, "a", 0x0, "r", 0x0, "t", 0x0, "U", 0x0, "S"
	DCB	0x0, "B", 0x0, "C", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Ogtp

  02300			 AREA	 |.text|, CODE, ARM

  02300		 |StartUSBClock| PROC

; 576  : {

  02300		 |$LN10@StartUSBCl|
  02300	e92d4030	 stmdb       sp!, {r4, r5, lr}
  02304		 |$M47839|

; 577  :     PCSP_MUSB_GEN_REGS pGen = pPdd->pUsbGenRegs;
; 578  : 
; 579  : 	UNREFERENCED_PARAMETER(pPdd);
; 580  : 
; 581  : 	OALMSG(OAL_ETHER&&OAL_FUNC, (TEXT("StartUSBClock\r\n")));

  02304	e59f5050	 ldr         r5, [pc, #0x50]
  02308	e5904010	 ldr         r4, [r0, #0x10]
  0230c	e5953440	 ldr         r3, [r5, #0x440]
  02310	e3130a02	 tst         r3, #2, 20
  02314	13130004	 tstne       r3, #4
  02318	159f0038	 ldrne       r0, [pc, #0x38]
  0231c	1b000000	 blne        NKDbgPrintfW

; 582  : 
; 583  : 	if (!EnableUSBClocks(TRUE))

  02320	e3a00001	 mov         r0, #1
  02324	eb000000	 bl          EnableUSBClocks
  02328	e3500000	 cmp         r0, #0
  0232c	1a000003	 bne         |$LN6@StartUSBCl|

; 584  : 	{
; 585  : 		OALMSG(OAL_ETHER, (TEXT("StartUSBClock : Failed to enable clocks\r\n")));

  02330	e5953440	 ldr         r3, [r5, #0x440]
  02334	e3130a02	 tst         r3, #2, 20
  02338	159f0014	 ldrne       r0, [pc, #0x14]
  0233c	1b000000	 blne        NKDbgPrintfW
  02340		 |$LN6@StartUSBCl|

; 586  : 	}
; 587  : 	
; 588  : 	// Reset the hardware
; 589  : 	ResetHardware();

  02340	eb000000	 bl          ResetHardware

; 590  : 
; 591  : 	OUTREG8(&pGen->Power, POWER_HSENABLE); 

  02344	e3a03020	 mov         r3, #0x20
  02348	e5c43001	 strb        r3, [r4, #1]

; 592  : 
; 593  :     return;
; 594  : }

  0234c	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  02350	e12fff1e	 bx          lr
  02354		 |$LN11@StartUSBCl|
  02354		 |$LN12@StartUSBCl|
  02354	00000000	 DCD         |??_C@_1FE@IACJAPMH@?$AAS?$AAt?$AAa?$AAr?$AAt?$AAU?$AAS?$AAB?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAe?$AAn?$AAa?$AAb?$AAl?$AAe@|
  02358		 |$LN13@StartUSBCl|
  02358	00000000	 DCD         |??_C@_1CA@CNHBOOBH@?$AAS?$AAt?$AAa?$AAr?$AAt?$AAU?$AAS?$AAB?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?$AN?$AA?6?$AA?$AA@|
  0235c		 |$LN14@StartUSBCl|
  0235c	00000000	 DCD         |dpCurSettings|
  02360		 |$M47840|

			 ENDP  ; |StartUSBClock|

	EXPORT	|UfnPdd_DllEntry|

  00118			 AREA	 |.pdata|, PDATA
|$T47853| DCD	|$LN5@UfnPdd_Dll|
	DCD	0x40000200
; Function compile flags: /Ogtp

  02360			 AREA	 |.text|, CODE, ARM

  02360		 |UfnPdd_DllEntry| PROC

; 2269 : ) {

  02360		 |$LN5@UfnPdd_Dll|
  02360		 |$M47850|

; 2270 : 	UNREFERENCED_PARAMETER(hDllHandle);
; 2271 : 	UNREFERENCED_PARAMETER(reason);
; 2272 : 	UNREFERENCED_PARAMETER(pReserved);
; 2273 : 
; 2274 :     return TRUE;

  02360	e3a00001	 mov         r0, #1

; 2275 : }

  02364	e12fff1e	 bx          lr
  02368		 |$M47851|

			 ENDP  ; |UfnPdd_DllEntry|

	END
