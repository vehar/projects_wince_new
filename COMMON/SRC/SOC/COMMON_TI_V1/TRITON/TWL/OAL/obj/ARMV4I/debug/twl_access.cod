; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\TRITON\TWL\OAL\twl_access.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.bss|, NOINIT
|?Device@?1??TWLOpen@@9@9| % 0x24			; `TWLOpen'::`2'::Device

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|??_C@_1FK@EPIGKDEC@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AAO?$AAp?$AAe?$AAn?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5?$AAI?$AA2?$AAC?$AA?5@| [ DATA ] ; `string'
	EXPORT	|TWLOpen|
	IMPORT	|I2CSetSlaveAddress|
	IMPORT	|BSPGetTritonSlaveAddress|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|I2COpen|
	IMPORT	|BSPGetTritonBusID|

  00000			 AREA	 |.pdata|, PDATA
|$T44064| DCD	|$LN7@TWLOpen|
	DCD	0x40003002
; File c:\wince600\platform\common\src\soc\common_ti_v1\triton\twl\oal\twl_access.c

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FK@EPIGKDEC@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AAO?$AAp?$AAe?$AAn?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5?$AAI?$AA2?$AAC?$AA?5@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "T", 0x0, "W", 0x0, "L", 0x0, "O", 0x0, "p", 0x0, "e"
	DCB	0x0, "n", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "o", 0x0, "p"
	DCB	0x0, "e", 0x0, "n", 0x0, " ", 0x0, "I", 0x0, "2", 0x0, "C"
	DCB	0x0, " ", 0x0, "b", 0x0, "u", 0x0, "s", 0x0, " ", 0x0, "d"
	DCB	0x0, "r", 0x0, "i", 0x0, "v", 0x0, "e", 0x0, "r", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |TWLOpen| PROC

; 35   : {

  00000		 |$LN7@TWLOpen|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004	e24dd010	 sub         sp, sp, #0x10
  00008		 |$M44061|

; 36   :     static  Device_t Device = {NULL,0,FALSE,0};     
; 37   : 
; 38   :     // Open i2c bus
; 39   :     if (Device.refCount == 0)

  00008	e59f30a8	 ldr         r3, [pc, #0xA8]
  0000c	e5933004	 ldr         r3, [r3, #4]
  00010	e3530000	 cmp         r3, #0
  00014	1a00001c	 bne         |$LN2@TWLOpen|

; 40   :     {
; 41   :         Device.hI2C = I2COpen(BSPGetTritonBusID());

  00018	eb000000	 bl          BSPGetTritonBusID
  0001c	e58d0004	 str         r0, [sp, #4]
  00020	e59d0004	 ldr         r0, [sp, #4]
  00024	eb000000	 bl          I2COpen
  00028	e58d0008	 str         r0, [sp, #8]
  0002c	e59d2008	 ldr         r2, [sp, #8]
  00030	e59f3080	 ldr         r3, [pc, #0x80]
  00034	e5832000	 str         r2, [r3]

; 42   :         if (Device.hI2C == NULL)

  00038	e59f3078	 ldr         r3, [pc, #0x78]
  0003c	e5933000	 ldr         r3, [r3]
  00040	e3530000	 cmp         r3, #0
  00044	1a000004	 bne         |$LN1@TWLOpen|

; 43   :         {
; 44   :             DEBUGMSG(ZONE_ERROR, (L"ERROR: TWLOpen: "
; 45   :                 L"Failed open I2C bus driver\r\n"
; 46   :             ));

  00048	e59f006c	 ldr         r0, [pc, #0x6C]
  0004c	eb000000	 bl          NKDbgPrintfW

; 47   :             return NULL;

  00050	e3a03000	 mov         r3, #0
  00054	e58d3000	 str         r3, [sp]
  00058	ea000012	 b           |$LN3@TWLOpen|
  0005c		 |$LN1@TWLOpen|

; 48   :         }
; 49   :         
; 50   :         Device.slaveAddress = BSPGetTritonSlaveAddress();

  0005c	eb000000	 bl          BSPGetTritonSlaveAddress
  00060	e1a03800	 mov         r3, r0, lsl #16
  00064	e1a03823	 mov         r3, r3, lsr #16
  00068	e1cd30bc	 strh        r3, [sp, #0xC]
  0006c	e1dd20bc	 ldrh        r2, [sp, #0xC]
  00070	e59f3040	 ldr         r3, [pc, #0x40]
  00074	e1c320bc	 strh        r2, [r3, #0xC]

; 51   :         I2CSetSlaveAddress(Device.hI2C, Device.slaveAddress);  

  00078	e59f3038	 ldr         r3, [pc, #0x38]
  0007c	e1d310bc	 ldrh        r1, [r3, #0xC]
  00080	e59f3030	 ldr         r3, [pc, #0x30]
  00084	e5930000	 ldr         r0, [r3]
  00088	eb000000	 bl          I2CSetSlaveAddress
  0008c		 |$LN2@TWLOpen|

; 52   :     }
; 53   :     Device.refCount++;

  0008c	e59f3024	 ldr         r3, [pc, #0x24]
  00090	e5933004	 ldr         r3, [r3, #4]
  00094	e2832001	 add         r2, r3, #1
  00098	e59f3018	 ldr         r3, [pc, #0x18]
  0009c	e5832004	 str         r2, [r3, #4]

; 54   :     return &Device;

  000a0	e59f3010	 ldr         r3, [pc, #0x10]
  000a4	e58d3000	 str         r3, [sp]
  000a8		 |$LN3@TWLOpen|

; 55   : }

  000a8	e59d0000	 ldr         r0, [sp]
  000ac	e28dd010	 add         sp, sp, #0x10
  000b0	e49de004	 ldr         lr, [sp], #4
  000b4	e12fff1e	 bx          lr
  000b8		 |$LN8@TWLOpen|
  000b8		 |$LN9@TWLOpen|
  000b8	00000000	 DCD         |?Device@?1??TWLOpen@@9@9|
  000bc		 |$LN10@TWLOpen|
  000bc	00000000	 DCD         |??_C@_1FK@EPIGKDEC@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AAO?$AAp?$AAe?$AAn?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5?$AAI?$AA2?$AAC?$AA?5@|
  000c0		 |$M44062|

			 ENDP  ; |TWLOpen|

	EXPORT	|TWLClose|
	IMPORT	|I2CClose|

  00008			 AREA	 |.pdata|, PDATA
|$T44072| DCD	|$LN7@TWLClose|
	DCD	0x40001f04
; Function compile flags: /Odtp

  000c0			 AREA	 |.text|, CODE, ARM

  000c0		 |TWLClose| PROC

; 61   : {

  000c0		 |$LN7@TWLClose|
  000c0	e1a0c00d	 mov         r12, sp
  000c4	e92d0001	 stmdb       sp!, {r0}
  000c8	e92d5000	 stmdb       sp!, {r12, lr}
  000cc	e24dd004	 sub         sp, sp, #4
  000d0		 |$M44069|

; 62   :     Device_t * pDevice = (Device_t *) hContext;

  000d0	e59d300c	 ldr         r3, [sp, #0xC]
  000d4	e58d3000	 str         r3, [sp]

; 63   :     pDevice->refCount--;

  000d8	e59d3000	 ldr         r3, [sp]
  000dc	e2833004	 add         r3, r3, #4
  000e0	e5933000	 ldr         r3, [r3]
  000e4	e2432001	 sub         r2, r3, #1
  000e8	e59d3000	 ldr         r3, [sp]
  000ec	e2833004	 add         r3, r3, #4
  000f0	e5832000	 str         r2, [r3]

; 64   :     if (pDevice->refCount == 0)

  000f4	e59d3000	 ldr         r3, [sp]
  000f8	e2833004	 add         r3, r3, #4
  000fc	e5933000	 ldr         r3, [r3]
  00100	e3530000	 cmp         r3, #0
  00104	1a000009	 bne         |$LN2@TWLClose|

; 65   :     {
; 66   :         if (pDevice->hI2C) 

  00108	e59d3000	 ldr         r3, [sp]
  0010c	e5933000	 ldr         r3, [r3]
  00110	e3530000	 cmp         r3, #0
  00114	0a000005	 beq         |$LN1@TWLClose|

; 67   :         {
; 68   :             I2CClose(pDevice->hI2C);

  00118	e59d3000	 ldr         r3, [sp]
  0011c	e5930000	 ldr         r0, [r3]
  00120	eb000000	 bl          I2CClose

; 69   :             pDevice->hI2C = 0;

  00124	e59d2000	 ldr         r2, [sp]
  00128	e3a03000	 mov         r3, #0
  0012c	e5823000	 str         r3, [r2]
  00130		 |$LN1@TWLClose|
  00130		 |$LN2@TWLClose|

; 70   :         }
; 71   :     }
; 72   :     
; 73   : }

  00130	e28dd004	 add         sp, sp, #4
  00134	e89d6000	 ldmia       sp, {sp, lr}
  00138	e12fff1e	 bx          lr
  0013c		 |$M44070|

			 ENDP  ; |TWLClose|

	EXPORT	|TWLReadRegs|
	IMPORT	|LeaveCriticalSection|
	IMPORT	|I2CRead|
	IMPORT	|EnterCriticalSection|

  00010			 AREA	 |.pdata|, PDATA
|$T44078| DCD	|$LN9@TWLReadReg|
	DCD	0x40004e04
; Function compile flags: /Odtp

  0013c			 AREA	 |.text|, CODE, ARM

  0013c		 |TWLReadRegs| PROC

; 88   : {

  0013c		 |$LN9@TWLReadReg|
  0013c	e1a0c00d	 mov         r12, sp
  00140	e92d000f	 stmdb       sp!, {r0 - r3}
  00144	e92d5000	 stmdb       sp!, {r12, lr}
  00148	e24dd014	 sub         sp, sp, #0x14
  0014c		 |$M44075|

; 89   :     BOOL rc = FALSE;   

  0014c	e3a03000	 mov         r3, #0
  00150	e58d3004	 str         r3, [sp, #4]

; 90   :     
; 91   :     Device_t * pDevice = (Device_t *) hContext;

  00154	e59d301c	 ldr         r3, [sp, #0x1C]
  00158	e58d3000	 str         r3, [sp]

; 92   : 
; 93   :     if (pDevice->csInitialized) EnterCriticalSection(&pDevice->cs);

  0015c	e59d3000	 ldr         r3, [sp]
  00160	e2833008	 add         r3, r3, #8
  00164	e5933000	 ldr         r3, [r3]
  00168	e3530000	 cmp         r3, #0
  0016c	0a000002	 beq         |$LN4@TWLReadReg|
  00170	e59d3000	 ldr         r3, [sp]
  00174	e2830010	 add         r0, r3, #0x10
  00178	eb000000	 bl          EnterCriticalSection
  0017c		 |$LN4@TWLReadReg|

; 94   :     // set slave address if necessary
; 95   :     if (pDevice->slaveAddress != HIWORD(address))

  0017c	e59d3000	 ldr         r3, [sp]
  00180	e283300c	 add         r3, r3, #0xC
  00184	e1d330b0	 ldrh        r3, [r3]
  00188	e1a02003	 mov         r2, r3
  0018c	e59d3020	 ldr         r3, [sp, #0x20]
  00190	e1a03823	 mov         r3, r3, lsr #16
  00194	e1a03803	 mov         r3, r3, lsl #16
  00198	e1a03823	 mov         r3, r3, lsr #16
  0019c	e1520003	 cmp         r2, r3
  001a0	0a000016	 beq         |$LN3@TWLReadReg|

; 96   :         {
; 97   :         I2CSetSlaveAddress(pDevice->hI2C, BSPGetTritonSlaveAddress() | HIWORD(address));

  001a4	eb000000	 bl          BSPGetTritonSlaveAddress
  001a8	e1a03800	 mov         r3, r0, lsl #16
  001ac	e1a03823	 mov         r3, r3, lsr #16
  001b0	e1cd30bc	 strh        r3, [sp, #0xC]
  001b4	e1dd30bc	 ldrh        r3, [sp, #0xC]
  001b8	e1a02003	 mov         r2, r3
  001bc	e59d3020	 ldr         r3, [sp, #0x20]
  001c0	e1a03823	 mov         r3, r3, lsr #16
  001c4	e1a03803	 mov         r3, r3, lsl #16
  001c8	e1a03823	 mov         r3, r3, lsr #16
  001cc	e1823003	 orr         r3, r2, r3
  001d0	e1a01803	 mov         r1, r3, lsl #16
  001d4	e1a01821	 mov         r1, r1, lsr #16
  001d8	e59d3000	 ldr         r3, [sp]
  001dc	e5930000	 ldr         r0, [r3]
  001e0	eb000000	 bl          I2CSetSlaveAddress

; 98   :         pDevice->slaveAddress = HIWORD(address);

  001e4	e59d3020	 ldr         r3, [sp, #0x20]
  001e8	e1a03823	 mov         r3, r3, lsr #16
  001ec	e1a02803	 mov         r2, r3, lsl #16
  001f0	e1a02822	 mov         r2, r2, lsr #16
  001f4	e59d3000	 ldr         r3, [sp]
  001f8	e283300c	 add         r3, r3, #0xC
  001fc	e1c320b0	 strh        r2, [r3]
  00200		 |$LN3@TWLReadReg|

; 99   :         }
; 100  : 
; 101  :     if (I2CRead(pDevice->hI2C, (UCHAR)address, pBuffer, size) != size)

  00200	e59d3028	 ldr         r3, [sp, #0x28]
  00204	e59d2024	 ldr         r2, [sp, #0x24]
  00208	e59d1020	 ldr         r1, [sp, #0x20]
  0020c	e20110ff	 and         r1, r1, #0xFF
  00210	e59d0000	 ldr         r0, [sp]
  00214	e5900000	 ldr         r0, [r0]
  00218	eb000000	 bl          I2CRead
  0021c	e58d0010	 str         r0, [sp, #0x10]
  00220	e59d2010	 ldr         r2, [sp, #0x10]
  00224	e59d3028	 ldr         r3, [sp, #0x28]
  00228	e1520003	 cmp         r2, r3
  0022c	0a000000	 beq         |$LN2@TWLReadReg|

; 102  :         {
; 103  :         goto cleanUp;

  00230	ea000001	 b           |$cleanUp$43997|
  00234		 |$LN2@TWLReadReg|

; 104  :         }
; 105  :     
; 106  :     // We succceded
; 107  :     rc = TRUE;

  00234	e3a03001	 mov         r3, #1
  00238	e58d3004	 str         r3, [sp, #4]
  0023c		 |$cleanUp$43997|

; 108  : 
; 109  : 
; 110  : cleanUp:    
; 111  :     if (pDevice->csInitialized) LeaveCriticalSection(&pDevice->cs);

  0023c	e59d3000	 ldr         r3, [sp]
  00240	e2833008	 add         r3, r3, #8
  00244	e5933000	 ldr         r3, [r3]
  00248	e3530000	 cmp         r3, #0
  0024c	0a000002	 beq         |$LN1@TWLReadReg|
  00250	e59d3000	 ldr         r3, [sp]
  00254	e2830010	 add         r0, r3, #0x10
  00258	eb000000	 bl          LeaveCriticalSection
  0025c		 |$LN1@TWLReadReg|

; 112  : 
; 113  :     //if (rc)
; 114  :     //{
; 115  :     //    RETAILMSG(1,(TEXT("Triton ReadRegs @0x%x = 0x%x\r\n"),address,*(UCHAR*)pBuffer));
; 116  :     //}
; 117  :     //else
; 118  :     //{
; 119  :     //    RETAILMSG(1,(TEXT("Triton ReadRegs @0x%x failed\r\n"),address));
; 120  :     //}
; 121  :     return rc;

  0025c	e59d3004	 ldr         r3, [sp, #4]
  00260	e58d3008	 str         r3, [sp, #8]

; 122  : }

  00264	e59d0008	 ldr         r0, [sp, #8]
  00268	e28dd014	 add         sp, sp, #0x14
  0026c	e89d6000	 ldmia       sp, {sp, lr}
  00270	e12fff1e	 bx          lr
  00274		 |$M44076|

			 ENDP  ; |TWLReadRegs|

	EXPORT	|TWLWriteRegs|
	IMPORT	|I2CWrite|

  00018			 AREA	 |.pdata|, PDATA
|$T44084| DCD	|$LN9@TWLWriteRe|
	DCD	0x40004e04
; Function compile flags: /Odtp

  00274			 AREA	 |.text|, CODE, ARM

  00274		 |TWLWriteRegs| PROC

; 138  : {

  00274		 |$LN9@TWLWriteRe|
  00274	e1a0c00d	 mov         r12, sp
  00278	e92d000f	 stmdb       sp!, {r0 - r3}
  0027c	e92d5000	 stmdb       sp!, {r12, lr}
  00280	e24dd014	 sub         sp, sp, #0x14
  00284		 |$M44081|

; 139  :     BOOL rc = FALSE;

  00284	e3a03000	 mov         r3, #0
  00288	e58d3004	 str         r3, [sp, #4]

; 140  :     
; 141  :     Device_t * pDevice = (Device_t *) hContext;

  0028c	e59d301c	 ldr         r3, [sp, #0x1C]
  00290	e58d3000	 str         r3, [sp]

; 142  :     
; 143  : //    RETAILMSG(1,(TEXT("Triton WriteRegs @0x%x = 0x%x\r\n"),address,*(UCHAR*)pBuffer));   
; 144  :  
; 145  :     if (pDevice->csInitialized) EnterCriticalSection(&pDevice->cs);

  00294	e59d3000	 ldr         r3, [sp]
  00298	e2833008	 add         r3, r3, #8
  0029c	e5933000	 ldr         r3, [r3]
  002a0	e3530000	 cmp         r3, #0
  002a4	0a000002	 beq         |$LN4@TWLWriteRe|
  002a8	e59d3000	 ldr         r3, [sp]
  002ac	e2830010	 add         r0, r3, #0x10
  002b0	eb000000	 bl          EnterCriticalSection
  002b4		 |$LN4@TWLWriteRe|

; 146  : 
; 147  :     // set slave address if necessary
; 148  :     if (pDevice->slaveAddress != HIWORD(address))

  002b4	e59d3000	 ldr         r3, [sp]
  002b8	e283300c	 add         r3, r3, #0xC
  002bc	e1d330b0	 ldrh        r3, [r3]
  002c0	e1a02003	 mov         r2, r3
  002c4	e59d3020	 ldr         r3, [sp, #0x20]
  002c8	e1a03823	 mov         r3, r3, lsr #16
  002cc	e1a03803	 mov         r3, r3, lsl #16
  002d0	e1a03823	 mov         r3, r3, lsr #16
  002d4	e1520003	 cmp         r2, r3
  002d8	0a000016	 beq         |$LN3@TWLWriteRe|

; 149  :         {
; 150  :         I2CSetSlaveAddress(pDevice->hI2C, BSPGetTritonSlaveAddress() | HIWORD(address));

  002dc	eb000000	 bl          BSPGetTritonSlaveAddress
  002e0	e1a03800	 mov         r3, r0, lsl #16
  002e4	e1a03823	 mov         r3, r3, lsr #16
  002e8	e1cd30bc	 strh        r3, [sp, #0xC]
  002ec	e1dd30bc	 ldrh        r3, [sp, #0xC]
  002f0	e1a02003	 mov         r2, r3
  002f4	e59d3020	 ldr         r3, [sp, #0x20]
  002f8	e1a03823	 mov         r3, r3, lsr #16
  002fc	e1a03803	 mov         r3, r3, lsl #16
  00300	e1a03823	 mov         r3, r3, lsr #16
  00304	e1823003	 orr         r3, r2, r3
  00308	e1a01803	 mov         r1, r3, lsl #16
  0030c	e1a01821	 mov         r1, r1, lsr #16
  00310	e59d3000	 ldr         r3, [sp]
  00314	e5930000	 ldr         r0, [r3]
  00318	eb000000	 bl          I2CSetSlaveAddress

; 151  :         pDevice->slaveAddress = HIWORD(address);

  0031c	e59d3020	 ldr         r3, [sp, #0x20]
  00320	e1a03823	 mov         r3, r3, lsr #16
  00324	e1a02803	 mov         r2, r3, lsl #16
  00328	e1a02822	 mov         r2, r2, lsr #16
  0032c	e59d3000	 ldr         r3, [sp]
  00330	e283300c	 add         r3, r3, #0xC
  00334	e1c320b0	 strh        r2, [r3]
  00338		 |$LN3@TWLWriteRe|

; 152  :         }
; 153  : 
; 154  :     if (I2CWrite(pDevice->hI2C, (UCHAR)address, pBuffer, size) != size)

  00338	e59d3028	 ldr         r3, [sp, #0x28]
  0033c	e59d2024	 ldr         r2, [sp, #0x24]
  00340	e59d1020	 ldr         r1, [sp, #0x20]
  00344	e20110ff	 and         r1, r1, #0xFF
  00348	e59d0000	 ldr         r0, [sp]
  0034c	e5900000	 ldr         r0, [r0]
  00350	eb000000	 bl          I2CWrite
  00354	e58d0010	 str         r0, [sp, #0x10]
  00358	e59d2010	 ldr         r2, [sp, #0x10]
  0035c	e59d3028	 ldr         r3, [sp, #0x28]
  00360	e1520003	 cmp         r2, r3
  00364	0a000000	 beq         |$LN2@TWLWriteRe|

; 155  :         {
; 156  :         goto cleanUp;

  00368	ea000001	 b           |$cleanUp$44021|
  0036c		 |$LN2@TWLWriteRe|

; 157  :         }   
; 158  : 
; 159  :     // We succceded
; 160  :     rc = TRUE;

  0036c	e3a03001	 mov         r3, #1
  00370	e58d3004	 str         r3, [sp, #4]
  00374		 |$cleanUp$44021|

; 161  : 
; 162  : cleanUp:  
; 163  :     if (pDevice->csInitialized) LeaveCriticalSection(&pDevice->cs);

  00374	e59d3000	 ldr         r3, [sp]
  00378	e2833008	 add         r3, r3, #8
  0037c	e5933000	 ldr         r3, [r3]
  00380	e3530000	 cmp         r3, #0
  00384	0a000002	 beq         |$LN1@TWLWriteRe|
  00388	e59d3000	 ldr         r3, [sp]
  0038c	e2830010	 add         r0, r3, #0x10
  00390	eb000000	 bl          LeaveCriticalSection
  00394		 |$LN1@TWLWriteRe|

; 164  :     
; 165  :  /*   
; 166  :     if (!rc)
; 167  :     {
; 168  :         RETAILMSG(1,(TEXT("Triton WriteRegs @0x%x failed\r\n"),address));
; 169  :     }
; 170  :  */   
; 171  :     return rc;

  00394	e59d3004	 ldr         r3, [sp, #4]
  00398	e58d3008	 str         r3, [sp, #8]

; 172  : }

  0039c	e59d0008	 ldr         r0, [sp, #8]
  003a0	e28dd014	 add         sp, sp, #0x14
  003a4	e89d6000	 ldmia       sp, {sp, lr}
  003a8	e12fff1e	 bx          lr
  003ac		 |$M44082|

			 ENDP  ; |TWLWriteRegs|

	EXPORT	|TWLSetValue|

  00020			 AREA	 |.pdata|, PDATA
|$T44090| DCD	|$LN10@TWLSetValu|
	DCD	0x40006204
; Function compile flags: /Odtp

  003ac			 AREA	 |.text|, CODE, ARM

  003ac		 |TWLSetValue| PROC

; 181  : {

  003ac		 |$LN10@TWLSetValu|
  003ac	e1a0c00d	 mov         r12, sp
  003b0	e92d000f	 stmdb       sp!, {r0 - r3}
  003b4	e92d5000	 stmdb       sp!, {r12, lr}
  003b8	e24dd01c	 sub         sp, sp, #0x1C
  003bc		 |$M44087|

; 182  :     UCHAR regval;
; 183  :     BOOL rc = FALSE;

  003bc	e3a03000	 mov         r3, #0
  003c0	e58d3004	 str         r3, [sp, #4]

; 184  :     
; 185  :     Device_t * pDevice = (Device_t *) hContext;

  003c4	e59d3024	 ldr         r3, [sp, #0x24]
  003c8	e58d3000	 str         r3, [sp]

; 186  : 
; 187  :     if (pDevice->csInitialized) EnterCriticalSection(&pDevice->cs);

  003cc	e59d3000	 ldr         r3, [sp]
  003d0	e2833008	 add         r3, r3, #8
  003d4	e5933000	 ldr         r3, [r3]
  003d8	e3530000	 cmp         r3, #0
  003dc	0a000002	 beq         |$LN5@TWLSetValu|
  003e0	e59d3000	 ldr         r3, [sp]
  003e4	e2830010	 add         r0, r3, #0x10
  003e8	eb000000	 bl          EnterCriticalSection
  003ec		 |$LN5@TWLSetValu|

; 188  : 
; 189  :     // set slave address if necessary
; 190  :     if (pDevice->slaveAddress != HIWORD(address))

  003ec	e59d3000	 ldr         r3, [sp]
  003f0	e283300c	 add         r3, r3, #0xC
  003f4	e1d330b0	 ldrh        r3, [r3]
  003f8	e1a02003	 mov         r2, r3
  003fc	e59d3028	 ldr         r3, [sp, #0x28]
  00400	e1a03823	 mov         r3, r3, lsr #16
  00404	e1a03803	 mov         r3, r3, lsl #16
  00408	e1a03823	 mov         r3, r3, lsr #16
  0040c	e1520003	 cmp         r2, r3
  00410	0a000016	 beq         |$LN4@TWLSetValu|

; 191  :         {
; 192  :         I2CSetSlaveAddress(pDevice->hI2C, BSPGetTritonSlaveAddress() | HIWORD(address));

  00414	eb000000	 bl          BSPGetTritonSlaveAddress
  00418	e1a03800	 mov         r3, r0, lsl #16
  0041c	e1a03823	 mov         r3, r3, lsr #16
  00420	e1cd31b0	 strh        r3, [sp, #0x10]
  00424	e1dd31b0	 ldrh        r3, [sp, #0x10]
  00428	e1a02003	 mov         r2, r3
  0042c	e59d3028	 ldr         r3, [sp, #0x28]
  00430	e1a03823	 mov         r3, r3, lsr #16
  00434	e1a03803	 mov         r3, r3, lsl #16
  00438	e1a03823	 mov         r3, r3, lsr #16
  0043c	e1823003	 orr         r3, r2, r3
  00440	e1a01803	 mov         r1, r3, lsl #16
  00444	e1a01821	 mov         r1, r1, lsr #16
  00448	e59d3000	 ldr         r3, [sp]
  0044c	e5930000	 ldr         r0, [r3]
  00450	eb000000	 bl          I2CSetSlaveAddress

; 193  :         pDevice->slaveAddress = HIWORD(address);

  00454	e59d3028	 ldr         r3, [sp, #0x28]
  00458	e1a03823	 mov         r3, r3, lsr #16
  0045c	e1a02803	 mov         r2, r3, lsl #16
  00460	e1a02822	 mov         r2, r2, lsr #16
  00464	e59d3000	 ldr         r3, [sp]
  00468	e283300c	 add         r3, r3, #0xC
  0046c	e1c320b0	 strh        r2, [r3]
  00470		 |$LN4@TWLSetValu|

; 194  :         }
; 195  : 
; 196  :     if (I2CRead(pDevice->hI2C, (UCHAR)address, &regval, sizeof(regval)) != sizeof(regval))

  00470	e3a03001	 mov         r3, #1
  00474	e28d2008	 add         r2, sp, #8
  00478	e59d1028	 ldr         r1, [sp, #0x28]
  0047c	e20110ff	 and         r1, r1, #0xFF
  00480	e59d0000	 ldr         r0, [sp]
  00484	e5900000	 ldr         r0, [r0]
  00488	eb000000	 bl          I2CRead
  0048c	e58d0014	 str         r0, [sp, #0x14]
  00490	e59d3014	 ldr         r3, [sp, #0x14]
  00494	e3530001	 cmp         r3, #1
  00498	0a000000	 beq         |$LN3@TWLSetValu|

; 197  :         {
; 198  :         goto cleanUp;

  0049c	ea000016	 b           |$cleanUp$44046|
  004a0		 |$LN3@TWLSetValu|

; 199  :         }   
; 200  : 
; 201  :         regval = (regval & ~mask) | value;

  004a0	e5dd3008	 ldrb        r3, [sp, #8]
  004a4	e1a02003	 mov         r2, r3
  004a8	e5dd3030	 ldrb        r3, [sp, #0x30]
  004ac	e1e03003	 mvn         r3, r3
  004b0	e0022003	 and         r2, r2, r3
  004b4	e5dd302c	 ldrb        r3, [sp, #0x2C]
  004b8	e1823003	 orr         r3, r2, r3
  004bc	e20330ff	 and         r3, r3, #0xFF
  004c0	e5cd3008	 strb        r3, [sp, #8]

; 202  : 
; 203  :     if (I2CWrite(pDevice->hI2C, (UCHAR)address, &regval, sizeof(regval)) != sizeof(regval))

  004c4	e3a03001	 mov         r3, #1
  004c8	e28d2008	 add         r2, sp, #8
  004cc	e59d1028	 ldr         r1, [sp, #0x28]
  004d0	e20110ff	 and         r1, r1, #0xFF
  004d4	e59d0000	 ldr         r0, [sp]
  004d8	e5900000	 ldr         r0, [r0]
  004dc	eb000000	 bl          I2CWrite
  004e0	e58d0018	 str         r0, [sp, #0x18]
  004e4	e59d3018	 ldr         r3, [sp, #0x18]
  004e8	e3530001	 cmp         r3, #1
  004ec	0a000000	 beq         |$LN2@TWLSetValu|

; 204  :         {
; 205  :         goto cleanUp;

  004f0	ea000001	 b           |$cleanUp$44046|
  004f4		 |$LN2@TWLSetValu|

; 206  :         }   
; 207  : 
; 208  :     // We succceded
; 209  :     rc = TRUE;

  004f4	e3a03001	 mov         r3, #1
  004f8	e58d3004	 str         r3, [sp, #4]
  004fc		 |$cleanUp$44046|

; 210  : 
; 211  : cleanUp:  
; 212  :     if (pDevice->csInitialized) LeaveCriticalSection(&pDevice->cs);

  004fc	e59d3000	 ldr         r3, [sp]
  00500	e2833008	 add         r3, r3, #8
  00504	e5933000	 ldr         r3, [r3]
  00508	e3530000	 cmp         r3, #0
  0050c	0a000002	 beq         |$LN1@TWLSetValu|
  00510	e59d3000	 ldr         r3, [sp]
  00514	e2830010	 add         r0, r3, #0x10
  00518	eb000000	 bl          LeaveCriticalSection
  0051c		 |$LN1@TWLSetValu|

; 213  :   
; 214  :     return rc;    

  0051c	e59d3004	 ldr         r3, [sp, #4]
  00520	e58d300c	 str         r3, [sp, #0xC]

; 215  : }

  00524	e59d000c	 ldr         r0, [sp, #0xC]
  00528	e28dd01c	 add         sp, sp, #0x1C
  0052c	e89d6000	 ldmia       sp, {sp, lr}
  00530	e12fff1e	 bx          lr
  00534		 |$M44088|

			 ENDP  ; |TWLSetValue|

	END
