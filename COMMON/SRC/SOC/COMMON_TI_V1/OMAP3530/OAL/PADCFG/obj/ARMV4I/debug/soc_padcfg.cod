; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\OMAP3530\OAL\PADCFG\soc_padcfg.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.bss|, NOINIT
|g_pPadCfg| %	0x4
|g_pWkupPadCfg| % 0x4

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|SOCSetPadConfig|

  00000			 AREA	 |.pdata|, PDATA
|$T45657| DCD	|$LN13@SOCSetPadC|
	DCD	0x40005704
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\oal\padcfg\soc_padcfg.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SOCSetPadConfig| PROC

; 35   : {

  00000		 |$LN13@SOCSetPadC|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd014	 sub         sp, sp, #0x14
  00010		 |$M45654|

; 36   :     UINT16 hwcfg = 0;

  00010	e3a03000	 mov         r3, #0
  00014	e1cd30b0	 strh        r3, [sp]

; 37   : 
; 38   :     MapPadRegisters();

  00018	eb000000	 bl          MapPadRegisters

; 39   : 
; 40   :     
; 41   :     //Translate config to CONTROL_PADCONF_X format
; 42   :     hwcfg |= (cfg & INPUT_ENABLED)          ?   INPUT_ENABLE : 0;

  0001c	e1dd32b0	 ldrh        r3, [sp, #0x20]
  00020	e3130001	 tst         r3, #1
  00024	0a000002	 beq         |$LN5@SOCSetPadC|
  00028	e3a03c01	 mov         r3, #1, 24
  0002c	e58d3008	 str         r3, [sp, #8]
  00030	ea000001	 b           |$LN6@SOCSetPadC|
  00034		 |$LN5@SOCSetPadC|
  00034	e3a03000	 mov         r3, #0
  00038	e58d3008	 str         r3, [sp, #8]
  0003c		 |$LN6@SOCSetPadC|
  0003c	e1dd30b0	 ldrh        r3, [sp]
  00040	e1a02003	 mov         r2, r3
  00044	e59d3008	 ldr         r3, [sp, #8]
  00048	e1823003	 orr         r3, r2, r3
  0004c	e1a03803	 mov         r3, r3, lsl #16
  00050	e1a03823	 mov         r3, r3, lsr #16
  00054	e1cd30b0	 strh        r3, [sp]

; 43   :     hwcfg |= (cfg & PULL_RESISTOR_ENABLED)  ?   (cfg & PULLUP_RESISTOR) ? PULL_UP : PULL_DOWN : 0;    

  00058	e1dd32b0	 ldrh        r3, [sp, #0x20]
  0005c	e3130002	 tst         r3, #2
  00060	0a00000a	 beq         |$LN9@SOCSetPadC|
  00064	e1dd32b0	 ldrh        r3, [sp, #0x20]
  00068	e3130004	 tst         r3, #4
  0006c	0a000002	 beq         |$LN7@SOCSetPadC|
  00070	e3a03018	 mov         r3, #0x18
  00074	e58d300c	 str         r3, [sp, #0xC]
  00078	ea000001	 b           |$LN8@SOCSetPadC|
  0007c		 |$LN7@SOCSetPadC|
  0007c	e3a03008	 mov         r3, #8
  00080	e58d300c	 str         r3, [sp, #0xC]
  00084		 |$LN8@SOCSetPadC|
  00084	e59d300c	 ldr         r3, [sp, #0xC]
  00088	e58d3010	 str         r3, [sp, #0x10]
  0008c	ea000001	 b           |$LN10@SOCSetPadC|
  00090		 |$LN9@SOCSetPadC|
  00090	e3a03000	 mov         r3, #0
  00094	e58d3010	 str         r3, [sp, #0x10]
  00098		 |$LN10@SOCSetPadC|
  00098	e1dd30b0	 ldrh        r3, [sp]
  0009c	e1a02003	 mov         r2, r3
  000a0	e59d3010	 ldr         r3, [sp, #0x10]
  000a4	e1823003	 orr         r3, r2, r3
  000a8	e1a03803	 mov         r3, r3, lsl #16
  000ac	e1a03823	 mov         r3, r3, lsr #16
  000b0	e1cd30b0	 strh        r3, [sp]

; 44   :     hwcfg |= ((cfg >> 3) & 0x7) << 0;

  000b4	e1dd32b0	 ldrh        r3, [sp, #0x20]
  000b8	e1a031c3	 mov         r3, r3, asr #3
  000bc	e2032007	 and         r2, r3, #7
  000c0	e1dd30b0	 ldrh        r3, [sp]
  000c4	e1833002	 orr         r3, r3, r2
  000c8	e1a03803	 mov         r3, r3, lsl #16
  000cc	e1a03823	 mov         r3, r3, lsr #16
  000d0	e1cd30b0	 strh        r3, [sp]

; 45   :     
; 46   :     //write CONTROL_PADCONF_X. don't worry about the offset it has been checked by upper layers
; 47   :     if (padId < FIRST_WKUP_PAD_INDEX)

  000d4	e1dd21bc	 ldrh        r2, [sp, #0x1C]
  000d8	e3a03c05	 mov         r3, #5, 24
  000dc	e3833016	 orr         r3, r3, #0x16
  000e0	e1520003	 cmp         r2, r3
  000e4	2a000009	 bcs         |$LN2@SOCSetPadC|

; 48   :     {
; 49   :         OUTREG16(&g_pPadCfg[padId],hwcfg);   

  000e8	e1dd31bc	 ldrh        r3, [sp, #0x1C]
  000ec	e1a01003	 mov         r1, r3
  000f0	e3a03002	 mov         r3, #2
  000f4	e0020391	 mul         r2, r1, r3
  000f8	e59f3058	 ldr         r3, [pc, #0x58]
  000fc	e5933000	 ldr         r3, [r3]
  00100	e0832002	 add         r2, r3, r2
  00104	e1dd30b0	 ldrh        r3, [sp]
  00108	e1c230b0	 strh        r3, [r2]

; 50   :     }
; 51   :     else

  0010c	ea00000a	 b           |$LN1@SOCSetPadC|
  00110		 |$LN2@SOCSetPadC|

; 52   :     {
; 53   :         OUTREG16(&g_pWkupPadCfg[padId-FIRST_WKUP_PAD_INDEX],hwcfg);  

  00110	e1dd21bc	 ldrh        r2, [sp, #0x1C]
  00114	e3a03c05	 mov         r3, #5, 24
  00118	e3833016	 orr         r3, r3, #0x16
  0011c	e0421003	 sub         r1, r2, r3
  00120	e3a03002	 mov         r3, #2
  00124	e0020391	 mul         r2, r1, r3
  00128	e59f3024	 ldr         r3, [pc, #0x24]
  0012c	e5933000	 ldr         r3, [r3]
  00130	e0832002	 add         r2, r3, r2
  00134	e1dd30b0	 ldrh        r3, [sp]
  00138	e1c230b0	 strh        r3, [r2]
  0013c		 |$LN1@SOCSetPadC|

; 54   :     }
; 55   : 
; 56   :     return TRUE;

  0013c	e3a03001	 mov         r3, #1
  00140	e58d3004	 str         r3, [sp, #4]

; 57   : }

  00144	e59d0004	 ldr         r0, [sp, #4]
  00148	e28dd014	 add         sp, sp, #0x14
  0014c	e89d6000	 ldmia       sp, {sp, lr}
  00150	e12fff1e	 bx          lr
  00154		 |$LN14@SOCSetPadC|
  00154		 |$LN15@SOCSetPadC|
  00154	00000000	 DCD         |g_pWkupPadCfg|
  00158		 |$LN16@SOCSetPadC|
  00158	00000000	 DCD         |g_pPadCfg|
  0015c		 |$M45655|

			 ENDP  ; |SOCSetPadConfig|

	IMPORT	|OALPAtoVA|

  00008			 AREA	 |.pdata|, PDATA
|$T45665| DCD	|$LN7@MapPadRegi|
	DCD	0x40001f02
; Function compile flags: /Odtp

  0015c			 AREA	 |.text|, CODE, ARM

  0015c		 |MapPadRegisters| PROC

; 22   : {

  0015c		 |$LN7@MapPadRegi|
  0015c	e52de004	 str         lr, [sp, #-4]!
  00160	e24dd008	 sub         sp, sp, #8
  00164		 |$M45662|

; 23   :     if (g_pPadCfg == NULL)

  00164	e59f3064	 ldr         r3, [pc, #0x64]
  00168	e5933000	 ldr         r3, [r3]
  0016c	e3530000	 cmp         r3, #0
  00170	1a000006	 bne         |$LN2@MapPadRegi|

; 24   :     {
; 25   :         g_pPadCfg = OALPAtoUA(OMAP_SYSC_PADCONFS_REGS_PA);

  00174	e3a01000	 mov         r1, #0
  00178	e59f0054	 ldr         r0, [pc, #0x54]
  0017c	eb000000	 bl          OALPAtoVA
  00180	e58d0000	 str         r0, [sp]
  00184	e59d2000	 ldr         r2, [sp]
  00188	e59f3040	 ldr         r3, [pc, #0x40]
  0018c	e5832000	 str         r2, [r3]
  00190		 |$LN2@MapPadRegi|

; 26   :     }
; 27   :     
; 28   :     if (g_pWkupPadCfg == NULL)

  00190	e59f3034	 ldr         r3, [pc, #0x34]
  00194	e5933000	 ldr         r3, [r3]
  00198	e3530000	 cmp         r3, #0
  0019c	1a000007	 bne         |$LN1@MapPadRegi|

; 29   :     {
; 30   :         g_pWkupPadCfg = OALPAtoUA(OMAP_SYSC_PADCONFS_WKUP_REGS_PA);

  001a0	e3a01000	 mov         r1, #0
  001a4	e3a00312	 mov         r0, #0x12, 6
  001a8	e3800c2a	 orr         r0, r0, #0x2A, 24
  001ac	eb000000	 bl          OALPAtoVA
  001b0	e58d0004	 str         r0, [sp, #4]
  001b4	e59d2004	 ldr         r2, [sp, #4]
  001b8	e59f300c	 ldr         r3, [pc, #0xC]
  001bc	e5832000	 str         r2, [r3]
  001c0		 |$LN1@MapPadRegi|

; 31   :     }
; 32   : }

  001c0	e28dd008	 add         sp, sp, #8
  001c4	e49de004	 ldr         lr, [sp], #4
  001c8	e12fff1e	 bx          lr
  001cc		 |$LN8@MapPadRegi|
  001cc		 |$LN9@MapPadRegi|
  001cc	00000000	 DCD         |g_pWkupPadCfg|
  001d0		 |$LN10@MapPadRegi|
  001d0	00000000	 DCD         |g_pPadCfg|
  001d4		 |$LN11@MapPadRegi|
  001d4	48002030	 DCD         0x48002030
  001d8		 |$M45663|

			 ENDP  ; |MapPadRegisters|

	EXPORT	|SOCGetPadConfig|

  00010			 AREA	 |.pdata|, PDATA
|$T45677| DCD	|$LN14@SOCGetPadC|
	DCD	0x40005e04
; Function compile flags: /Odtp

  001d8			 AREA	 |.text|, CODE, ARM

  001d8		 |SOCGetPadConfig| PROC

; 59   : {

  001d8		 |$LN14@SOCGetPadC|
  001d8	e1a0c00d	 mov         r12, sp
  001dc	e92d0003	 stmdb       sp!, {r0, r1}
  001e0	e92d5000	 stmdb       sp!, {r12, lr}
  001e4	e24dd010	 sub         sp, sp, #0x10
  001e8		 |$M45674|

; 60   :     UINT16 hwcfg;
; 61   :     UINT16 cfg = 0;    

  001e8	e3a03000	 mov         r3, #0
  001ec	e1cd30b2	 strh        r3, [sp, #2]

; 62   : 
; 63   :     MapPadRegisters();

  001f0	eb000000	 bl          MapPadRegisters

; 64   : 
; 65   :     //read CONTROL_PADCONF_X. don't worry about the offset it has been checked by upper layers
; 66   :     if (padId < FIRST_WKUP_PAD_INDEX)

  001f4	e1dd21b8	 ldrh        r2, [sp, #0x18]
  001f8	e3a03c05	 mov         r3, #5, 24
  001fc	e3833016	 orr         r3, r3, #0x16
  00200	e1520003	 cmp         r2, r3
  00204	2a000009	 bcs         |$LN7@SOCGetPadC|

; 67   :     {
; 68   :         hwcfg = INREG16(&g_pPadCfg[padId]);   

  00208	e1dd31b8	 ldrh        r3, [sp, #0x18]
  0020c	e1a01003	 mov         r1, r3
  00210	e3a03002	 mov         r3, #2
  00214	e0020391	 mul         r2, r1, r3
  00218	e59f312c	 ldr         r3, [pc, #0x12C]
  0021c	e5933000	 ldr         r3, [r3]
  00220	e0833002	 add         r3, r3, r2
  00224	e1d330b0	 ldrh        r3, [r3]
  00228	e1cd30b0	 strh        r3, [sp]

; 69   :     }
; 70   :     else

  0022c	ea00000a	 b           |$LN6@SOCGetPadC|
  00230		 |$LN7@SOCGetPadC|

; 71   :     {
; 72   :         hwcfg = INREG16(&g_pWkupPadCfg[padId-FIRST_WKUP_PAD_INDEX]);  

  00230	e1dd21b8	 ldrh        r2, [sp, #0x18]
  00234	e3a03c05	 mov         r3, #5, 24
  00238	e3833016	 orr         r3, r3, #0x16
  0023c	e0421003	 sub         r1, r2, r3
  00240	e3a03002	 mov         r3, #2
  00244	e0020391	 mul         r2, r1, r3
  00248	e59f30f8	 ldr         r3, [pc, #0xF8]
  0024c	e5933000	 ldr         r3, [r3]
  00250	e0833002	 add         r3, r3, r2
  00254	e1d330b0	 ldrh        r3, [r3]
  00258	e1cd30b0	 strh        r3, [sp]
  0025c		 |$LN6@SOCGetPadC|

; 73   :     }
; 74   :     //Translate CONTROL_PADCONF_X format to the API format
; 75   :     cfg |= (hwcfg & INPUT_ENABLE) ? INPUT_ENABLED : 0;

  0025c	e1dd30b0	 ldrh        r3, [sp]
  00260	e3130c01	 tst         r3, #1, 24
  00264	0a000002	 beq         |$LN10@SOCGetPadC|
  00268	e3a03001	 mov         r3, #1
  0026c	e58d3008	 str         r3, [sp, #8]
  00270	ea000001	 b           |$LN11@SOCGetPadC|
  00274		 |$LN10@SOCGetPadC|
  00274	e3a03000	 mov         r3, #0
  00278	e58d3008	 str         r3, [sp, #8]
  0027c		 |$LN11@SOCGetPadC|
  0027c	e1dd30b2	 ldrh        r3, [sp, #2]
  00280	e1a02003	 mov         r2, r3
  00284	e59d3008	 ldr         r3, [sp, #8]
  00288	e1823003	 orr         r3, r2, r3
  0028c	e1a03803	 mov         r3, r3, lsl #16
  00290	e1a03823	 mov         r3, r3, lsr #16
  00294	e1cd30b2	 strh        r3, [sp, #2]

; 76   : 
; 77   :     switch (hwcfg & PULL_UP)

  00298	e1dd30b0	 ldrh        r3, [sp]
  0029c	e2033018	 and         r3, r3, #0x18
  002a0	e58d300c	 str         r3, [sp, #0xC]
  002a4	e59d300c	 ldr         r3, [sp, #0xC]
  002a8	e3530000	 cmp         r3, #0
  002ac	0a000012	 beq         |$LN1@SOCGetPadC|
  002b0	e59d300c	 ldr         r3, [sp, #0xC]
  002b4	e3530008	 cmp         r3, #8
  002b8	0a000009	 beq         |$LN2@SOCGetPadC|
  002bc	e59d300c	 ldr         r3, [sp, #0xC]
  002c0	e3530018	 cmp         r3, #0x18
  002c4	0a000000	 beq         |$LN3@SOCGetPadC|
  002c8	ea00000d	 b           |$LN4@SOCGetPadC|
  002cc		 |$LN3@SOCGetPadC|

; 78   :     {
; 79   :     case PULL_UP:
; 80   :         cfg |= PULL_RESISTOR_ENABLED | PULLUP_RESISTOR;

  002cc	e1dd30b2	 ldrh        r3, [sp, #2]
  002d0	e3833006	 orr         r3, r3, #6
  002d4	e1a03803	 mov         r3, r3, lsl #16
  002d8	e1a03823	 mov         r3, r3, lsr #16
  002dc	e1cd30b2	 strh        r3, [sp, #2]

; 81   :         break;

  002e0	ea000007	 b           |$LN4@SOCGetPadC|
  002e4		 |$LN2@SOCGetPadC|

; 82   :     case PULL_DOWN:
; 83   :         cfg |= PULL_RESISTOR_ENABLED | PULLDOWN_RESISTOR;

  002e4	e1dd30b2	 ldrh        r3, [sp, #2]
  002e8	e3833002	 orr         r3, r3, #2
  002ec	e1a03803	 mov         r3, r3, lsl #16
  002f0	e1a03823	 mov         r3, r3, lsr #16
  002f4	e1cd30b2	 strh        r3, [sp, #2]

; 84   :         break;

  002f8	ea000001	 b           |$LN4@SOCGetPadC|
  002fc		 |$LN1@SOCGetPadC|

; 85   :     case PULL_INACTIVE:
; 86   :         cfg |= PULL_RESISTOR_DISABLED;

  002fc	e1dd30b2	 ldrh        r3, [sp, #2]
  00300	e1cd30b2	 strh        r3, [sp, #2]
  00304		 |$LN4@SOCGetPadC|

; 87   :         break;
; 88   :     }
; 89   : 
; 90   :     cfg |= ((hwcfg >> 0) & 0x7) << 3;

  00304	e1dd30b0	 ldrh        r3, [sp]
  00308	e2033007	 and         r3, r3, #7
  0030c	e1a02183	 mov         r2, r3, lsl #3
  00310	e1dd30b2	 ldrh        r3, [sp, #2]
  00314	e1833002	 orr         r3, r3, r2
  00318	e1a03803	 mov         r3, r3, lsl #16
  0031c	e1a03823	 mov         r3, r3, lsr #16
  00320	e1cd30b2	 strh        r3, [sp, #2]

; 91   : 
; 92   :     *pCfg = cfg;

  00324	e1dd20b2	 ldrh        r2, [sp, #2]
  00328	e59d301c	 ldr         r3, [sp, #0x1C]
  0032c	e1c320b0	 strh        r2, [r3]

; 93   : 
; 94   :     return TRUE;

  00330	e3a03001	 mov         r3, #1
  00334	e58d3004	 str         r3, [sp, #4]

; 95   : }

  00338	e59d0004	 ldr         r0, [sp, #4]
  0033c	e28dd010	 add         sp, sp, #0x10
  00340	e89d6000	 ldmia       sp, {sp, lr}
  00344	e12fff1e	 bx          lr
  00348		 |$LN15@SOCGetPadC|
  00348		 |$LN16@SOCGetPadC|
  00348	00000000	 DCD         |g_pWkupPadCfg|
  0034c		 |$LN17@SOCGetPadC|
  0034c	00000000	 DCD         |g_pPadCfg|
  00350		 |$M45675|

			 ENDP  ; |SOCGetPadConfig|

	END
