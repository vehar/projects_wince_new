; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\OMAP3530\OAL\POWER\power.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|??_C@_1EA@LOAJIJJI@?$AA?9?$AAO?$AAE?$AAM?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAP?$AAe?$AAn?$AAd?$AAi?$AAn?$AAg?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DG@KCFEDALK@?$AA?$CL?$AAO?$AAE?$AAM?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAP?$AAe?$AAn?$AAd?$AAi?$AAn?$AAg?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|OEMInterruptPending|
	IMPORT	|OALIntrIsIrqPending|
	IMPORT	|OALIntrTranslateSysIntr|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|dpCurSettings|

  00000			 AREA	 |.pdata|, PDATA
|$T47327| DCD	|$LN13@OEMInterru|
	DCD	0x40004f04
; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\oal\power\power.c

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@LOAJIJJI@?$AA?9?$AAO?$AAE?$AAM?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAP?$AAe?$AAn?$AAd?$AAi?$AAn?$AAg?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t"
	DCB	0x0, "P", 0x0, "e", 0x0, "n", 0x0, "d", 0x0, "i", 0x0, "n"
	DCB	0x0, "g", 0x0, "(", 0x0, "r", 0x0, "c", 0x0, " ", 0x0, "="
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DG@KCFEDALK@?$AA?$CL?$AAO?$AAE?$AAM?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAP?$AAe?$AAn?$AAd?$AAi?$AAn?$AAg?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t"
	DCB	0x0, "P", 0x0, "e", 0x0, "n", 0x0, "d", 0x0, "i", 0x0, "n"
	DCB	0x0, "g", 0x0, "(", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMInterruptPending| PROC

; 73   : {

  00000		 |$LN13@OEMInterru|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd024	 sub         sp, sp, #0x24
  00010		 |$M47324|

; 74   :     BOOL pending = FALSE;

  00010	e3a03000	 mov         r3, #0
  00014	e58d3008	 str         r3, [sp, #8]

; 75   :     const UINT32 *pIrqs;
; 76   :     UINT32 ix, count;
; 77   : 
; 78   :     OALMSG(OAL_INTR&&OAL_VERBOSE, (
; 79   :         L"+OEMInterruptPending(%d)\r\n", sysIntr
; 80   :         ));

  00018	e59f3114	 ldr         r3, [pc, #0x114]
  0001c	e5933440	 ldr         r3, [r3, #0x440]
  00020	e3130901	 tst         r3, #1, 18
  00024	0a000009	 beq         |$LN7@OEMInterru|
  00028	e59f3104	 ldr         r3, [pc, #0x104]
  0002c	e5933440	 ldr         r3, [r3, #0x440]
  00030	e3130902	 tst         r3, #2, 18
  00034	0a000005	 beq         |$LN7@OEMInterru|
  00038	e59d102c	 ldr         r1, [sp, #0x2C]
  0003c	e59f00f4	 ldr         r0, [pc, #0xF4]
  00040	eb000000	 bl          NKDbgPrintfW
  00044	e3a03001	 mov         r3, #1
  00048	e58d3014	 str         r3, [sp, #0x14]
  0004c	ea000001	 b           |$LN8@OEMInterru|
  00050		 |$LN7@OEMInterru|
  00050	e3a03000	 mov         r3, #0
  00054	e58d3014	 str         r3, [sp, #0x14]
  00058		 |$LN8@OEMInterru|

; 81   : 
; 82   :     if (OALIntrTranslateSysIntr(sysIntr, &count, &pIrqs))

  00058	e28d200c	 add         r2, sp, #0xC
  0005c	e28d1000	 add         r1, sp, #0
  00060	e59d002c	 ldr         r0, [sp, #0x2C]
  00064	eb000000	 bl          OALIntrTranslateSysIntr
  00068	e58d0018	 str         r0, [sp, #0x18]
  0006c	e59d3018	 ldr         r3, [sp, #0x18]
  00070	e3530000	 cmp         r3, #0
  00074	0a000017	 beq         |$LN4@OEMInterru|

; 83   :         {
; 84   :         for (ix = 0; ix < count && !pending; ix++)

  00078	e3a03000	 mov         r3, #0
  0007c	e58d3004	 str         r3, [sp, #4]
  00080	ea000002	 b           |$LN3@OEMInterru|
  00084		 |$LN2@OEMInterru|
  00084	e59d3004	 ldr         r3, [sp, #4]
  00088	e2833001	 add         r3, r3, #1
  0008c	e58d3004	 str         r3, [sp, #4]
  00090		 |$LN3@OEMInterru|
  00090	e59d2004	 ldr         r2, [sp, #4]
  00094	e59d3000	 ldr         r3, [sp]
  00098	e1520003	 cmp         r2, r3
  0009c	2a00000d	 bcs         |$LN1@OEMInterru|
  000a0	e59d3008	 ldr         r3, [sp, #8]
  000a4	e3530000	 cmp         r3, #0
  000a8	1a00000a	 bne         |$LN1@OEMInterru|

; 85   :             {
; 86   :             pending = OALIntrIsIrqPending(pIrqs[ix]);

  000ac	e59d1004	 ldr         r1, [sp, #4]
  000b0	e3a03004	 mov         r3, #4
  000b4	e0020391	 mul         r2, r1, r3
  000b8	e59d300c	 ldr         r3, [sp, #0xC]
  000bc	e0833002	 add         r3, r3, r2
  000c0	e5930000	 ldr         r0, [r3]
  000c4	eb000000	 bl          OALIntrIsIrqPending
  000c8	e58d001c	 str         r0, [sp, #0x1C]
  000cc	e59d301c	 ldr         r3, [sp, #0x1C]
  000d0	e58d3008	 str         r3, [sp, #8]

; 87   :             }            

  000d4	eaffffea	 b           |$LN2@OEMInterru|
  000d8		 |$LN1@OEMInterru|
  000d8		 |$LN4@OEMInterru|

; 88   :         }
; 89   :         
; 90   :     OALMSG(OAL_INTR&&OAL_VERBOSE, (
; 91   :         L"-OEMInterruptPending(rc = %d)\r\n", pending
; 92   :         ));

  000d8	e59f3054	 ldr         r3, [pc, #0x54]
  000dc	e5933440	 ldr         r3, [r3, #0x440]
  000e0	e3130901	 tst         r3, #1, 18
  000e4	0a000009	 beq         |$LN9@OEMInterru|
  000e8	e59f3044	 ldr         r3, [pc, #0x44]
  000ec	e5933440	 ldr         r3, [r3, #0x440]
  000f0	e3130902	 tst         r3, #2, 18
  000f4	0a000005	 beq         |$LN9@OEMInterru|
  000f8	e59d1008	 ldr         r1, [sp, #8]
  000fc	e59f002c	 ldr         r0, [pc, #0x2C]
  00100	eb000000	 bl          NKDbgPrintfW
  00104	e3a03001	 mov         r3, #1
  00108	e58d3020	 str         r3, [sp, #0x20]
  0010c	ea000001	 b           |$LN10@OEMInterru|
  00110		 |$LN9@OEMInterru|
  00110	e3a03000	 mov         r3, #0
  00114	e58d3020	 str         r3, [sp, #0x20]
  00118		 |$LN10@OEMInterru|

; 93   :     return pending;

  00118	e59d3008	 ldr         r3, [sp, #8]
  0011c	e58d3010	 str         r3, [sp, #0x10]

; 94   : }

  00120	e59d0010	 ldr         r0, [sp, #0x10]
  00124	e28dd024	 add         sp, sp, #0x24
  00128	e89d6000	 ldmia       sp, {sp, lr}
  0012c	e12fff1e	 bx          lr
  00130		 |$LN14@OEMInterru|
  00130		 |$LN15@OEMInterru|
  00130	00000000	 DCD         |??_C@_1EA@LOAJIJJI@?$AA?9?$AAO?$AAE?$AAM?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAP?$AAe?$AAn?$AAd?$AAi?$AAn?$AAg?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00134		 |$LN16@OEMInterru|
  00134	00000000	 DCD         |dpCurSettings|
  00138		 |$LN17@OEMInterru|
  00138	00000000	 DCD         |??_C@_1DG@KCFEDALK@?$AA?$CL?$AAO?$AAE?$AAM?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAP?$AAe?$AAn?$AAd?$AAi?$AAn?$AAg?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  0013c		 |$M47325|

			 ENDP  ; |OEMInterruptPending|

	EXPORT	|??_C@_1DG@KDDHMOEO@?$AA?$AN?$AA?6?$AAW?$AAa?$AAk?$AAe?$AA?5?$AAd?$AAu?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAS?$AAY?$AAS?$AAI?$AAN?$AAT?$AAR?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BO@GGDDDJNF@?$AA?5?$AA?5?$AAS?$AAY?$AAS?$AAI?$AAN?$AAT?$AAR?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DA@OKMJBLLN@?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAd?$AA?5?$AAw?$AAa?$AAk?$AAe?$AA?5?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AAs?$AA?3?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|OEMPowerOff|
	IMPORT	|DumpPrcmRegsSnapshot|
	IMPORT	|PrcmDumpSavedRefCounts|
	IMPORT	|OALWakeupLatency_DumpSnapshot|
	IMPORT	|g_PrcmDebugSuspendResume|
	IMPORT	|OALContextRestorePerfTimer|
	IMPORT	|OALIoCtlHalRtcTime|
	IMPORT	|BSPPowerOn|
	IMPORT	|g_oalWakeSource|
	IMPORT	|PrcmSuspend|
	IMPORT	|OEMInterruptEnable|
	IMPORT	|OALPowerWakeSource|
	IMPORT	|OEMEnableIOPadWakeup|
	IMPORT	|BSPGetGpioIrq|
	IMPORT	|OALIntrEnableIrqs|
	IMPORT	|g_pIntr|
	IMPORT	|BSPPowerOff|
	IMPORT	|EnableDeviceClocks|
	IMPORT	|BSPGetGPTPerfDevice|
	IMPORT	|OALContextSavePerfTimer|
	IMPORT	|KITLIoctl|
	IMPORT	|OALWatchdogEnable|
	IMPORT	|INTERRUPTS_ENABLE|

  00008			 AREA	 |.pdata|, PDATA
|$T47342| DCD	|$LN37@OEMPowerOf|
	DCD	0x4001a202

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DG@KDDHMOEO@?$AA?$AN?$AA?6?$AAW?$AAa?$AAk?$AAe?$AA?5?$AAd?$AAu?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAS?$AAY?$AAS?$AAI?$AAN?$AAT?$AAR?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB 0xd
	DCB	0x0, 0xa, 0x0, "W", 0x0, "a", 0x0, "k", 0x0, "e", 0x0, " "
	DCB	0x0, "d", 0x0, "u", 0x0, "e", 0x0, " ", 0x0, "t", 0x0, "o"
	DCB	0x0, " ", 0x0, "S", 0x0, "Y", 0x0, "S", 0x0, "I", 0x0, "N"
	DCB	0x0, "T", 0x0, "R", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@GGDDDJNF@?$AA?5?$AA?5?$AAS?$AAY?$AAS?$AAI?$AAN?$AAT?$AAR?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB " "
	DCB	0x0, " ", 0x0, "S", 0x0, "Y", 0x0, "S", 0x0, "I", 0x0, "N"
	DCB	0x0, "T", 0x0, "R", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@OKMJBLLN@?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAd?$AA?5?$AAw?$AAa?$AAk?$AAe?$AA?5?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AAs?$AA?3?$AA?$AN?$AA?6?$AA?$AA@| DCB "E"
	DCB	0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "w", 0x0, "a", 0x0, "k", 0x0, "e", 0x0, " "
	DCB	0x0, "s", 0x0, "o", 0x0, "u", 0x0, "r", 0x0, "c", 0x0, "e"
	DCB	0x0, "s", 0x0, ":", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  0013c			 AREA	 |.text|, CODE, ARM

  0013c		 |OEMPowerOff| PROC

; 105  : {

  0013c		 |$LN37@OEMPowerOf|
  0013c	e52de004	 str         lr, [sp, #-4]!
  00140	e24dd080	 sub         sp, sp, #0x80
  00144		 |$M47339|

; 106  :     DWORD i;
; 107  :     UINT32 sysIntr;
; 108  :     UINT intr[3];
; 109  :     BOOL bPowerOn;
; 110  :     BOOL bPrevIntrState;
; 111  :     UINT irq = 0;

  00144	e3a03000	 mov         r3, #0
  00148	e58d3018	 str         r3, [sp, #0x18]

; 112  :     UINT32 mask = 0;

  0014c	e3a03000	 mov         r3, #0
  00150	e58d3014	 str         r3, [sp, #0x14]

; 113  : 	
; 114  :     // disable interrupts (note: this should not be needed)
; 115  :     bPrevIntrState = INTERRUPTS_ENABLE(FALSE);

  00154	e3a00000	 mov         r0, #0
  00158	eb000000	 bl          INTERRUPTS_ENABLE
  0015c	e58d0054	 str         r0, [sp, #0x54]
  00160	e59d3054	 ldr         r3, [sp, #0x54]
  00164	e58d301c	 str         r3, [sp, #0x1C]

; 116  : 
; 117  :     // UNDONE: verify if this is still necessary
; 118  :     // Disable hardware watchdog
; 119  :     OALWatchdogEnable(FALSE);

  00168	e3a00000	 mov         r0, #0
  0016c	eb000000	 bl          OALWatchdogEnable

; 120  :     
; 121  :     // Make sure that KITL is powered off
; 122  :     bPowerOn = FALSE;

  00170	e3a03000	 mov         r3, #0
  00174	e58d3008	 str         r3, [sp, #8]

; 123  :     KITLIoctl(IOCTL_KITL_POWER_CALL, &bPowerOn, sizeof(bPowerOn), NULL, 0, NULL);    

  00178	e3a03000	 mov         r3, #0
  0017c	e58d3004	 str         r3, [sp, #4]
  00180	e3a03000	 mov         r3, #0
  00184	e58d3000	 str         r3, [sp]
  00188	e3a03000	 mov         r3, #0
  0018c	e3a02004	 mov         r2, #4
  00190	e28d1008	 add         r1, sp, #8
  00194	e59f0620	 ldr         r0, [pc, #0x620]
  00198	eb000000	 bl          KITLIoctl

; 124  : 
; 125  : 	
; 126  :     //Save Perf Timer
; 127  :     OALContextSavePerfTimer();

  0019c	eb000000	 bl          OALContextSavePerfTimer

; 128  :     // Disable GPTimer2 (used for high perf/monte carlo profiling)
; 129  :     EnableDeviceClocks(BSPGetGPTPerfDevice(), FALSE);

  001a0	eb000000	 bl          BSPGetGPTPerfDevice
  001a4	e58d0058	 str         r0, [sp, #0x58]
  001a8	e3a01000	 mov         r1, #0
  001ac	e59d0058	 ldr         r0, [sp, #0x58]
  001b0	eb000000	 bl          EnableDeviceClocks

; 130  : 
; 131  :     // Give chance to do board specific stuff
; 132  :     BSPPowerOff();

  001b4	eb000000	 bl          BSPPowerOff

; 133  : 
; 134  :     //----------------------------------------------
; 135  :     // capture all enabled interrupts and disable interrupts
; 136  :     intr[0] = INREG32(&g_pIntr->pICLRegs->INTC_MIR0);

  001b8	e59f3600	 ldr         r3, [pc, #0x600]
  001bc	e5933000	 ldr         r3, [r3]
  001c0	e5933000	 ldr         r3, [r3]
  001c4	e2833084	 add         r3, r3, #0x84
  001c8	e5933000	 ldr         r3, [r3]
  001cc	e58d3020	 str         r3, [sp, #0x20]

; 137  :     intr[1] = INREG32(&g_pIntr->pICLRegs->INTC_MIR1);

  001d0	e59f35e8	 ldr         r3, [pc, #0x5E8]
  001d4	e5933000	 ldr         r3, [r3]
  001d8	e5933000	 ldr         r3, [r3]
  001dc	e28330a4	 add         r3, r3, #0xA4
  001e0	e5933000	 ldr         r3, [r3]
  001e4	e58d3024	 str         r3, [sp, #0x24]

; 138  :     intr[2] = INREG32(&g_pIntr->pICLRegs->INTC_MIR2);

  001e8	e59f35d0	 ldr         r3, [pc, #0x5D0]
  001ec	e5933000	 ldr         r3, [r3]
  001f0	e5933000	 ldr         r3, [r3]
  001f4	e28330c4	 add         r3, r3, #0xC4
  001f8	e5933000	 ldr         r3, [r3]
  001fc	e58d3028	 str         r3, [sp, #0x28]

; 139  : 
; 140  :     OUTREG32(&g_pIntr->pICLRegs->INTC_MIR_SET0, OMAP_MPUIC_MASKALL);

  00200	e59f35b8	 ldr         r3, [pc, #0x5B8]
  00204	e5933000	 ldr         r3, [r3]
  00208	e5933000	 ldr         r3, [r3]
  0020c	e283208c	 add         r2, r3, #0x8C
  00210	e3e03000	 mvn         r3, #0
  00214	e5823000	 str         r3, [r2]

; 141  :     OUTREG32(&g_pIntr->pICLRegs->INTC_MIR_SET1, OMAP_MPUIC_MASKALL);

  00218	e59f35a0	 ldr         r3, [pc, #0x5A0]
  0021c	e5933000	 ldr         r3, [r3]
  00220	e5933000	 ldr         r3, [r3]
  00224	e28320ac	 add         r2, r3, #0xAC
  00228	e3e03000	 mvn         r3, #0
  0022c	e5823000	 str         r3, [r2]

; 142  :     OUTREG32(&g_pIntr->pICLRegs->INTC_MIR_SET2, OMAP_MPUIC_MASKALL);

  00230	e59f3588	 ldr         r3, [pc, #0x588]
  00234	e5933000	 ldr         r3, [r3]
  00238	e5933000	 ldr         r3, [r3]
  0023c	e28320cc	 add         r2, r3, #0xCC
  00240	e3e03000	 mvn         r3, #0
  00244	e5823000	 str         r3, [r2]

; 143  : 
; 144  :     //----------------------------------------------
; 145  :     // Context Save/Restore       
; 146  : 	// Save state then mask all GPIO interrupts
; 147  : 	for (i=0; i<g_pIntr->nbGpioBank; i++)

  00248	e3a03000	 mov         r3, #0
  0024c	e58d3010	 str         r3, [sp, #0x10]
  00250	ea000002	 b           |$LN32@OEMPowerOf|
  00254		 |$LN31@OEMPowerOf|
  00254	e59d3010	 ldr         r3, [sp, #0x10]
  00258	e2833001	 add         r3, r3, #1
  0025c	e58d3010	 str         r3, [sp, #0x10]
  00260		 |$LN32@OEMPowerOf|
  00260	e59f3558	 ldr         r3, [pc, #0x558]
  00264	e5933000	 ldr         r3, [r3]
  00268	e2833004	 add         r3, r3, #4
  0026c	e59d2010	 ldr         r2, [sp, #0x10]
  00270	e5933000	 ldr         r3, [r3]
  00274	e1520003	 cmp         r2, r3
  00278	2a000029	 bcs         |$LN30@OEMPowerOf|

; 148  :     {
; 149  : 		INTR_GPIO_CTXT* pCurrGpioCtxt = &g_pIntr->pGpioCtxt[i];

  0027c	e59f353c	 ldr         r3, [pc, #0x53C]
  00280	e5933000	 ldr         r3, [r3]
  00284	e2830008	 add         r0, r3, #8
  00288	e59d1010	 ldr         r1, [sp, #0x10]
  0028c	e3a03020	 mov         r3, #0x20
  00290	e0020391	 mul         r2, r1, r3
  00294	e5903000	 ldr         r3, [r0]
  00298	e0833002	 add         r3, r3, r2
  0029c	e58d302c	 str         r3, [sp, #0x2C]

; 150  : 
; 151  : 		// Save current state
; 152  : 		pCurrGpioCtxt->restoreCtxt.IRQENABLE1 = INREG32(&pCurrGpioCtxt->pRegs->IRQENABLE1);

  002a0	e59d302c	 ldr         r3, [sp, #0x2C]
  002a4	e283300c	 add         r3, r3, #0xC
  002a8	e5933000	 ldr         r3, [r3]
  002ac	e283101c	 add         r1, r3, #0x1C
  002b0	e59d302c	 ldr         r3, [sp, #0x2C]
  002b4	e2832014	 add         r2, r3, #0x14
  002b8	e5913000	 ldr         r3, [r1]
  002bc	e5823000	 str         r3, [r2]

; 153  : 		pCurrGpioCtxt->restoreCtxt.WAKEUPENABLE = INREG32(&pCurrGpioCtxt->pRegs->WAKEUPENABLE);

  002c0	e59d302c	 ldr         r3, [sp, #0x2C]
  002c4	e283300c	 add         r3, r3, #0xC
  002c8	e5933000	 ldr         r3, [r3]
  002cc	e2831020	 add         r1, r3, #0x20
  002d0	e59d302c	 ldr         r3, [sp, #0x2C]
  002d4	e2832018	 add         r2, r3, #0x18
  002d8	e5913000	 ldr         r3, [r1]
  002dc	e5823000	 str         r3, [r2]

; 154  : 
; 155  : 		// Disable all GPIO interrupts in the bank
; 156  :         OUTREG32(&pCurrGpioCtxt->pRegs->IRQENABLE1, 0);

  002e0	e59d302c	 ldr         r3, [sp, #0x2C]
  002e4	e283300c	 add         r3, r3, #0xC
  002e8	e5933000	 ldr         r3, [r3]
  002ec	e283201c	 add         r2, r3, #0x1C
  002f0	e3a03000	 mov         r3, #0
  002f4	e5823000	 str         r3, [r2]

; 157  :         OUTREG32(&pCurrGpioCtxt->pRegs->WAKEUPENABLE, 0);

  002f8	e59d302c	 ldr         r3, [sp, #0x2C]
  002fc	e283300c	 add         r3, r3, #0xC
  00300	e5933000	 ldr         r3, [r3]
  00304	e2832020	 add         r2, r3, #0x20
  00308	e3a03000	 mov         r3, #0
  0030c	e5823000	 str         r3, [r2]

; 158  : 
; 159  : 		OALIntrEnableIrqs(1,&pCurrGpioCtxt->bank_irq);

  00310	e59d302c	 ldr         r3, [sp, #0x2C]
  00314	e2831008	 add         r1, r3, #8
  00318	e3a00001	 mov         r0, #1
  0031c	eb000000	 bl          OALIntrEnableIrqs

; 160  : 
; 161  : 	}

  00320	eaffffcb	 b           |$LN31@OEMPowerOf|
  00324		 |$LN30@OEMPowerOf|

; 162  : 
; 163  :     //----------------------------------------------
; 164  :     // Clear all enabled IO PAD wakeups for GPIOs
; 165  :     for (i = 0; i < g_pIntr->nbGpioBank; ++i) 

  00324	e3a03000	 mov         r3, #0
  00328	e58d3010	 str         r3, [sp, #0x10]
  0032c	ea000002	 b           |$LN29@OEMPowerOf|
  00330		 |$LN28@OEMPowerOf|
  00330	e59d3010	 ldr         r3, [sp, #0x10]
  00334	e2833001	 add         r3, r3, #1
  00338	e58d3010	 str         r3, [sp, #0x10]
  0033c		 |$LN29@OEMPowerOf|
  0033c	e59f347c	 ldr         r3, [pc, #0x47C]
  00340	e5933000	 ldr         r3, [r3]
  00344	e2833004	 add         r3, r3, #4
  00348	e59d2010	 ldr         r2, [sp, #0x10]
  0034c	e5933000	 ldr         r3, [r3]
  00350	e1520003	 cmp         r2, r3
  00354	2a00002b	 bcs         |$LN27@OEMPowerOf|

; 166  :     {
; 167  : 		INTR_GPIO_CTXT* pCurrGpioCtxt = &g_pIntr->pGpioCtxt[i];

  00358	e59f3460	 ldr         r3, [pc, #0x460]
  0035c	e5933000	 ldr         r3, [r3]
  00360	e2830008	 add         r0, r3, #8
  00364	e59d1010	 ldr         r1, [sp, #0x10]
  00368	e3a03020	 mov         r3, #0x20
  0036c	e0020391	 mul         r2, r1, r3
  00370	e5903000	 ldr         r3, [r0]
  00374	e0833002	 add         r3, r3, r2
  00378	e58d3030	 str         r3, [sp, #0x30]

; 168  : 
; 169  :         irq = BSPGetGpioIrq(0) + (i * 32);

  0037c	e3a00000	 mov         r0, #0
  00380	eb000000	 bl          BSPGetGpioIrq
  00384	e58d005c	 str         r0, [sp, #0x5C]
  00388	e59d1010	 ldr         r1, [sp, #0x10]
  0038c	e3a03020	 mov         r3, #0x20
  00390	e0020391	 mul         r2, r1, r3
  00394	e59d305c	 ldr         r3, [sp, #0x5C]
  00398	e0833002	 add         r3, r3, r2
  0039c	e58d3018	 str         r3, [sp, #0x18]

; 170  :         mask = pCurrGpioCtxt->restoreCtxt.WAKEUPENABLE;

  003a0	e59d3030	 ldr         r3, [sp, #0x30]
  003a4	e2833018	 add         r3, r3, #0x18
  003a8	e5933000	 ldr         r3, [r3]
  003ac	e58d3014	 str         r3, [sp, #0x14]
  003b0		 |$LN26@OEMPowerOf|

; 171  :         while (mask != 0)

  003b0	e59d3014	 ldr         r3, [sp, #0x14]
  003b4	e3530000	 cmp         r3, #0
  003b8	0a000011	 beq         |$LN25@OEMPowerOf|

; 172  :         {
; 173  :             // If a GPIO was wakeup enabled, then clear the wakeup
; 174  :             if (mask & 0x1)

  003bc	e59d3014	 ldr         r3, [sp, #0x14]
  003c0	e3130001	 tst         r3, #1
  003c4	0a000007	 beq         |$LN24@OEMPowerOf|

; 175  :             {
; 176  :                 OEMEnableIOPadWakeup((irq - BSPGetGpioIrq(0)), FALSE);

  003c8	e3a00000	 mov         r0, #0
  003cc	eb000000	 bl          BSPGetGpioIrq
  003d0	e58d0060	 str         r0, [sp, #0x60]
  003d4	e3a01000	 mov         r1, #0
  003d8	e59d2018	 ldr         r2, [sp, #0x18]
  003dc	e59d3060	 ldr         r3, [sp, #0x60]
  003e0	e0420003	 sub         r0, r2, r3
  003e4	eb000000	 bl          OEMEnableIOPadWakeup
  003e8		 |$LN24@OEMPowerOf|

; 177  :             }
; 178  :             
; 179  :             irq++;

  003e8	e59d3018	 ldr         r3, [sp, #0x18]
  003ec	e2833001	 add         r3, r3, #1
  003f0	e58d3018	 str         r3, [sp, #0x18]

; 180  :             mask >>= 1;    

  003f4	e59d3014	 ldr         r3, [sp, #0x14]
  003f8	e1a030a3	 mov         r3, r3, lsr #1
  003fc	e58d3014	 str         r3, [sp, #0x14]

; 181  :         }

  00400	eaffffea	 b           |$LN26@OEMPowerOf|
  00404		 |$LN25@OEMPowerOf|

; 182  :     }

  00404	eaffffc9	 b           |$LN28@OEMPowerOf|
  00408		 |$LN27@OEMPowerOf|

; 183  : 
; 184  :     //----------------------------------------------
; 185  :     // Enable wake sources interrupts
; 186  :     for (sysIntr = SYSINTR_DEVICES; sysIntr < SYSINTR_MAXIMUM; sysIntr++)

  00408	e3a03008	 mov         r3, #8
  0040c	e58d300c	 str         r3, [sp, #0xC]
  00410	ea000002	 b           |$LN23@OEMPowerOf|
  00414		 |$LN22@OEMPowerOf|
  00414	e59d300c	 ldr         r3, [sp, #0xC]
  00418	e2833001	 add         r3, r3, #1
  0041c	e58d300c	 str         r3, [sp, #0xC]
  00420		 |$LN23@OEMPowerOf|
  00420	e59d300c	 ldr         r3, [sp, #0xC]
  00424	e3530048	 cmp         r3, #0x48
  00428	2a00000b	 bcs         |$LN21@OEMPowerOf|

; 187  :         {
; 188  :         // Skip if sysIntr isn't allowed as wake source
; 189  :         if (!OALPowerWakeSource(sysIntr)) 

  0042c	e59d000c	 ldr         r0, [sp, #0xC]
  00430	eb000000	 bl          OALPowerWakeSource
  00434	e58d0064	 str         r0, [sp, #0x64]
  00438	e59d3064	 ldr         r3, [sp, #0x64]
  0043c	e3530000	 cmp         r3, #0
  00440	1a000000	 bne         |$LN20@OEMPowerOf|

; 190  : 		    continue;

  00444	eafffff2	 b           |$LN22@OEMPowerOf|
  00448		 |$LN20@OEMPowerOf|

; 191  : 
; 192  :         // Enable it as interrupt
; 193  :         OEMInterruptEnable(sysIntr, NULL, 0);

  00448	e3a02000	 mov         r2, #0
  0044c	e3a01000	 mov         r1, #0
  00450	e59d000c	 ldr         r0, [sp, #0xC]
  00454	eb000000	 bl          OEMInterruptEnable

; 194  :         }

  00458	eaffffed	 b           |$LN22@OEMPowerOf|
  0045c		 |$LN21@OEMPowerOf|

; 195  : 
; 196  :     // enter full retention
; 197  :     PrcmSuspend();

  0045c	eb000000	 bl          PrcmSuspend

; 198  :     
; 199  :     //----------------------------------------------
; 200  :     // Find wakeup source
; 201  :     for (sysIntr = SYSINTR_DEVICES; sysIntr < SYSINTR_MAXIMUM; sysIntr++)

  00460	e3a03008	 mov         r3, #8
  00464	e58d300c	 str         r3, [sp, #0xC]
  00468	ea000002	 b           |$LN19@OEMPowerOf|
  0046c		 |$LN18@OEMPowerOf|
  0046c	e59d300c	 ldr         r3, [sp, #0xC]
  00470	e2833001	 add         r3, r3, #1
  00474	e58d300c	 str         r3, [sp, #0xC]
  00478		 |$LN19@OEMPowerOf|
  00478	e59d300c	 ldr         r3, [sp, #0xC]
  0047c	e3530048	 cmp         r3, #0x48
  00480	2a000011	 bcs         |$LN17@OEMPowerOf|

; 202  :         {            
; 203  :         // Skip if sysIntr isn't allowed as wake source
; 204  :         if (!OALPowerWakeSource(sysIntr)) 

  00484	e59d000c	 ldr         r0, [sp, #0xC]
  00488	eb000000	 bl          OALPowerWakeSource
  0048c	e58d0068	 str         r0, [sp, #0x68]
  00490	e59d3068	 ldr         r3, [sp, #0x68]
  00494	e3530000	 cmp         r3, #0
  00498	1a000000	 bne         |$LN16@OEMPowerOf|

; 205  : 		    continue;

  0049c	eafffff2	 b           |$LN18@OEMPowerOf|
  004a0		 |$LN16@OEMPowerOf|

; 206  : 
; 207  :         // When this sysIntr is pending we find wake source
; 208  :         if (OEMInterruptPending(sysIntr))

  004a0	e59d000c	 ldr         r0, [sp, #0xC]
  004a4	eb000000	 bl          OEMInterruptPending
  004a8	e58d006c	 str         r0, [sp, #0x6C]
  004ac	e59d306c	 ldr         r3, [sp, #0x6C]
  004b0	e3530000	 cmp         r3, #0
  004b4	0a000003	 beq         |$LN15@OEMPowerOf|

; 209  :             {
; 210  :             g_oalWakeSource = sysIntr;

  004b8	e59d200c	 ldr         r2, [sp, #0xC]
  004bc	e59f32e8	 ldr         r3, [pc, #0x2E8]
  004c0	e5832000	 str         r2, [r3]

; 211  :             break;

  004c4	ea000000	 b           |$LN17@OEMPowerOf|
  004c8		 |$LN15@OEMPowerOf|

; 212  :             }
; 213  :         }

  004c8	eaffffe7	 b           |$LN18@OEMPowerOf|
  004cc		 |$LN17@OEMPowerOf|

; 214  :   
; 215  :     //----------------------------------------------
; 216  :     // Context Save/Restore
; 217  :     // Put GPIO interrupt state back to the way it was before suspend
; 218  :     for (i=0; i<g_pIntr->nbGpioBank; i++)

  004cc	e3a03000	 mov         r3, #0
  004d0	e58d3010	 str         r3, [sp, #0x10]
  004d4	ea000002	 b           |$LN14@OEMPowerOf|
  004d8		 |$LN13@OEMPowerOf|
  004d8	e59d3010	 ldr         r3, [sp, #0x10]
  004dc	e2833001	 add         r3, r3, #1
  004e0	e58d3010	 str         r3, [sp, #0x10]
  004e4		 |$LN14@OEMPowerOf|
  004e4	e59f32d4	 ldr         r3, [pc, #0x2D4]
  004e8	e5933000	 ldr         r3, [r3]
  004ec	e2833004	 add         r3, r3, #4
  004f0	e59d2010	 ldr         r2, [sp, #0x10]
  004f4	e5933000	 ldr         r3, [r3]
  004f8	e1520003	 cmp         r2, r3
  004fc	2a000019	 bcs         |$LN12@OEMPowerOf|

; 219  :     {
; 220  : 		INTR_GPIO_CTXT* pCurrGpioCtxt = &g_pIntr->pGpioCtxt[i];		

  00500	e59f32b8	 ldr         r3, [pc, #0x2B8]
  00504	e5933000	 ldr         r3, [r3]
  00508	e2830008	 add         r0, r3, #8
  0050c	e59d1010	 ldr         r1, [sp, #0x10]
  00510	e3a03020	 mov         r3, #0x20
  00514	e0020391	 mul         r2, r1, r3
  00518	e5903000	 ldr         r3, [r0]
  0051c	e0833002	 add         r3, r3, r2
  00520	e58d3034	 str         r3, [sp, #0x34]

; 221  : 
; 222  :         // Write registers with the previously saved values
; 223  :         OUTREG32(&pCurrGpioCtxt->pRegs->IRQENABLE1, pCurrGpioCtxt->restoreCtxt.IRQENABLE1);

  00524	e59d3034	 ldr         r3, [sp, #0x34]
  00528	e2831014	 add         r1, r3, #0x14
  0052c	e59d3034	 ldr         r3, [sp, #0x34]
  00530	e283300c	 add         r3, r3, #0xC
  00534	e5933000	 ldr         r3, [r3]
  00538	e283201c	 add         r2, r3, #0x1C
  0053c	e5913000	 ldr         r3, [r1]
  00540	e5823000	 str         r3, [r2]

; 224  :         OUTREG32(&pCurrGpioCtxt->pRegs->WAKEUPENABLE, pCurrGpioCtxt->restoreCtxt.WAKEUPENABLE);

  00544	e59d3034	 ldr         r3, [sp, #0x34]
  00548	e2831018	 add         r1, r3, #0x18
  0054c	e59d3034	 ldr         r3, [sp, #0x34]
  00550	e283300c	 add         r3, r3, #0xC
  00554	e5933000	 ldr         r3, [r3]
  00558	e2832020	 add         r2, r3, #0x20
  0055c	e5913000	 ldr         r3, [r1]
  00560	e5823000	 str         r3, [r2]

; 225  : 
; 226  :     }

  00564	eaffffdb	 b           |$LN13@OEMPowerOf|
  00568		 |$LN12@OEMPowerOf|

; 227  : 
; 228  :     //-------------------------------------------------------
; 229  :     // Enable all previously enabled IO PAD wakeups for GPIOs
; 230  :     for (i = 0; i < g_pIntr->nbGpioBank; ++i) 

  00568	e3a03000	 mov         r3, #0
  0056c	e58d3010	 str         r3, [sp, #0x10]
  00570	ea000002	 b           |$LN11@OEMPowerOf|
  00574		 |$LN10@OEMPowerOf|
  00574	e59d3010	 ldr         r3, [sp, #0x10]
  00578	e2833001	 add         r3, r3, #1
  0057c	e58d3010	 str         r3, [sp, #0x10]
  00580		 |$LN11@OEMPowerOf|
  00580	e59f3238	 ldr         r3, [pc, #0x238]
  00584	e5933000	 ldr         r3, [r3]
  00588	e2833004	 add         r3, r3, #4
  0058c	e59d2010	 ldr         r2, [sp, #0x10]
  00590	e5933000	 ldr         r3, [r3]
  00594	e1520003	 cmp         r2, r3
  00598	2a00002b	 bcs         |$LN9@OEMPowerOf|

; 231  :     {
; 232  : 		INTR_GPIO_CTXT* pCurrGpioCtxt = &g_pIntr->pGpioCtxt[i];

  0059c	e59f321c	 ldr         r3, [pc, #0x21C]
  005a0	e5933000	 ldr         r3, [r3]
  005a4	e2830008	 add         r0, r3, #8
  005a8	e59d1010	 ldr         r1, [sp, #0x10]
  005ac	e3a03020	 mov         r3, #0x20
  005b0	e0020391	 mul         r2, r1, r3
  005b4	e5903000	 ldr         r3, [r0]
  005b8	e0833002	 add         r3, r3, r2
  005bc	e58d3038	 str         r3, [sp, #0x38]

; 233  : 
; 234  :         irq = BSPGetGpioIrq(0) + (i * 32);

  005c0	e3a00000	 mov         r0, #0
  005c4	eb000000	 bl          BSPGetGpioIrq
  005c8	e58d0070	 str         r0, [sp, #0x70]
  005cc	e59d1010	 ldr         r1, [sp, #0x10]
  005d0	e3a03020	 mov         r3, #0x20
  005d4	e0020391	 mul         r2, r1, r3
  005d8	e59d3070	 ldr         r3, [sp, #0x70]
  005dc	e0833002	 add         r3, r3, r2
  005e0	e58d3018	 str         r3, [sp, #0x18]

; 235  :         mask = pCurrGpioCtxt->restoreCtxt.WAKEUPENABLE;

  005e4	e59d3038	 ldr         r3, [sp, #0x38]
  005e8	e2833018	 add         r3, r3, #0x18
  005ec	e5933000	 ldr         r3, [r3]
  005f0	e58d3014	 str         r3, [sp, #0x14]
  005f4		 |$LN8@OEMPowerOf|

; 236  :         while (mask != 0)

  005f4	e59d3014	 ldr         r3, [sp, #0x14]
  005f8	e3530000	 cmp         r3, #0
  005fc	0a000011	 beq         |$LN7@OEMPowerOf|

; 237  :         {
; 238  :             // If a GPIO was wakeup enabled, then clear the wakeup
; 239  :             if (mask & 0x1)

  00600	e59d3014	 ldr         r3, [sp, #0x14]
  00604	e3130001	 tst         r3, #1
  00608	0a000007	 beq         |$LN6@OEMPowerOf|

; 240  :             {
; 241  :                 OEMEnableIOPadWakeup((irq - BSPGetGpioIrq(0)), TRUE);

  0060c	e3a00000	 mov         r0, #0
  00610	eb000000	 bl          BSPGetGpioIrq
  00614	e58d0074	 str         r0, [sp, #0x74]
  00618	e3a01001	 mov         r1, #1
  0061c	e59d2018	 ldr         r2, [sp, #0x18]
  00620	e59d3074	 ldr         r3, [sp, #0x74]
  00624	e0420003	 sub         r0, r2, r3
  00628	eb000000	 bl          OEMEnableIOPadWakeup
  0062c		 |$LN6@OEMPowerOf|

; 242  :             }
; 243  :             
; 244  :             irq++;

  0062c	e59d3018	 ldr         r3, [sp, #0x18]
  00630	e2833001	 add         r3, r3, #1
  00634	e58d3018	 str         r3, [sp, #0x18]

; 245  :             mask >>= 1;    

  00638	e59d3014	 ldr         r3, [sp, #0x14]
  0063c	e1a030a3	 mov         r3, r3, lsr #1
  00640	e58d3014	 str         r3, [sp, #0x14]

; 246  :         }

  00644	eaffffea	 b           |$LN8@OEMPowerOf|
  00648		 |$LN7@OEMPowerOf|

; 247  :     }

  00648	eaffffc9	 b           |$LN10@OEMPowerOf|
  0064c		 |$LN9@OEMPowerOf|

; 248  : 
; 249  :     //----------------------------------------------
; 250  :     // Re-enable interrupts    
; 251  :     OUTREG32(&g_pIntr->pICLRegs->INTC_MIR_CLEAR0, ~intr[0]);

  0064c	e59d3020	 ldr         r3, [sp, #0x20]
  00650	e1e02003	 mvn         r2, r3
  00654	e59f3164	 ldr         r3, [pc, #0x164]
  00658	e5933000	 ldr         r3, [r3]
  0065c	e5933000	 ldr         r3, [r3]
  00660	e2833088	 add         r3, r3, #0x88
  00664	e5832000	 str         r2, [r3]

; 252  :     OUTREG32(&g_pIntr->pICLRegs->INTC_MIR_CLEAR1, ~intr[1]);

  00668	e59d3024	 ldr         r3, [sp, #0x24]
  0066c	e1e02003	 mvn         r2, r3
  00670	e59f3148	 ldr         r3, [pc, #0x148]
  00674	e5933000	 ldr         r3, [r3]
  00678	e5933000	 ldr         r3, [r3]
  0067c	e28330a8	 add         r3, r3, #0xA8
  00680	e5832000	 str         r2, [r3]

; 253  :     OUTREG32(&g_pIntr->pICLRegs->INTC_MIR_CLEAR2, ~intr[2]);  

  00684	e59d3028	 ldr         r3, [sp, #0x28]
  00688	e1e02003	 mvn         r2, r3
  0068c	e59f312c	 ldr         r3, [pc, #0x12C]
  00690	e5933000	 ldr         r3, [r3]
  00694	e5933000	 ldr         r3, [r3]
  00698	e28330c8	 add         r3, r3, #0xC8
  0069c	e5832000	 str         r2, [r3]

; 254  :     
; 255  :     //----------------------------------------------
; 256  :     // Do board specific stuff    
; 257  :     BSPPowerOn();   

  006a0	eb000000	 bl          BSPPowerOn

; 258  :         
; 259  :     //Sync to Hardware RTC after suspend\resume
; 260  :     OALIoCtlHalRtcTime( 0,  NULL, 0, NULL, 0, NULL);    

  006a4	e3a03000	 mov         r3, #0
  006a8	e58d3004	 str         r3, [sp, #4]
  006ac	e3a03000	 mov         r3, #0
  006b0	e58d3000	 str         r3, [sp]
  006b4	e3a03000	 mov         r3, #0
  006b8	e3a02000	 mov         r2, #0
  006bc	e3a01000	 mov         r1, #0
  006c0	e3a00000	 mov         r0, #0
  006c4	eb000000	 bl          OALIoCtlHalRtcTime

; 261  : 
; 262  :     // Enable GPTimer (used for high perf/monte carlo profiling)
; 263  :     EnableDeviceClocks(BSPGetGPTPerfDevice(), TRUE);	

  006c8	eb000000	 bl          BSPGetGPTPerfDevice
  006cc	e58d0078	 str         r0, [sp, #0x78]
  006d0	e3a01001	 mov         r1, #1
  006d4	e59d0078	 ldr         r0, [sp, #0x78]
  006d8	eb000000	 bl          EnableDeviceClocks

; 264  :     //Restore Perf Timer
; 265  :     OALContextRestorePerfTimer();

  006dc	eb000000	 bl          OALContextRestorePerfTimer

; 266  : 		
; 267  :     // Reinitialize KITL
; 268  :     bPowerOn = TRUE;

  006e0	e3a03001	 mov         r3, #1
  006e4	e58d3008	 str         r3, [sp, #8]

; 269  :     KITLIoctl(IOCTL_KITL_POWER_CALL, &bPowerOn, sizeof(bPowerOn), NULL, 0, NULL);    

  006e8	e3a03000	 mov         r3, #0
  006ec	e58d3004	 str         r3, [sp, #4]
  006f0	e3a03000	 mov         r3, #0
  006f4	e58d3000	 str         r3, [sp]
  006f8	e3a03000	 mov         r3, #0
  006fc	e3a02004	 mov         r2, #4
  00700	e28d1008	 add         r1, sp, #8
  00704	e59f00b0	 ldr         r0, [pc, #0xB0]
  00708	eb000000	 bl          KITLIoctl

; 270  :     
; 271  :     // Enable hardware watchdog
; 272  :     OALWatchdogEnable(TRUE);

  0070c	e3a00001	 mov         r0, #1
  00710	eb000000	 bl          OALWatchdogEnable

; 273  : 	
; 274  : #ifndef SHIP_BUILD
; 275  :     if (g_PrcmDebugSuspendResume)

  00714	e59f309c	 ldr         r3, [pc, #0x9C]
  00718	e5933000	 ldr         r3, [r3]
  0071c	e3530000	 cmp         r3, #0
  00720	0a00001b	 beq         |$LN5@OEMPowerOf|

; 276  : 	{
; 277  :         OALMSG(1, (L"Enabled wake sources:\r\n"));

  00724	e59f0088	 ldr         r0, [pc, #0x88]
  00728	eb000000	 bl          NKDbgPrintfW

; 278  :         for (sysIntr = SYSINTR_FIRMWARE; sysIntr < SYSINTR_MAXIMUM; sysIntr++)

  0072c	e3a03010	 mov         r3, #0x10
  00730	e58d300c	 str         r3, [sp, #0xC]
  00734	ea000002	 b           |$LN4@OEMPowerOf|
  00738		 |$LN3@OEMPowerOf|
  00738	e59d300c	 ldr         r3, [sp, #0xC]
  0073c	e2833001	 add         r3, r3, #1
  00740	e58d300c	 str         r3, [sp, #0xC]
  00744		 |$LN4@OEMPowerOf|
  00744	e59d300c	 ldr         r3, [sp, #0xC]
  00748	e3530048	 cmp         r3, #0x48
  0074c	2a000009	 bcs         |$LN2@OEMPowerOf|

; 279  :         {
; 280  :             if (OALPowerWakeSource(sysIntr)) 

  00750	e59d000c	 ldr         r0, [sp, #0xC]
  00754	eb000000	 bl          OALPowerWakeSource
  00758	e58d007c	 str         r0, [sp, #0x7C]
  0075c	e59d307c	 ldr         r3, [sp, #0x7C]
  00760	e3530000	 cmp         r3, #0
  00764	0a000002	 beq         |$LN1@OEMPowerOf|

; 281  :                 OALMSG(1, (L"  SYSINTR %d\r\n", sysIntr));

  00768	e59d100c	 ldr         r1, [sp, #0xC]
  0076c	e59f003c	 ldr         r0, [pc, #0x3C]
  00770	eb000000	 bl          NKDbgPrintfW
  00774		 |$LN1@OEMPowerOf|

; 282  :         }

  00774	eaffffef	 b           |$LN3@OEMPowerOf|
  00778		 |$LN2@OEMPowerOf|

; 283  : 
; 284  :     	OALMSG(1, (L"\r\nWake due to SYSINTR %d\r\n", g_oalWakeSource));

  00778	e59f302c	 ldr         r3, [pc, #0x2C]
  0077c	e5931000	 ldr         r1, [r3]
  00780	e59f0020	 ldr         r0, [pc, #0x20]
  00784	eb000000	 bl          NKDbgPrintfW

; 285  :         OALWakeupLatency_DumpSnapshot();

  00788	eb000000	 bl          OALWakeupLatency_DumpSnapshot

; 286  :         PrcmDumpSavedRefCounts();

  0078c	eb000000	 bl          PrcmDumpSavedRefCounts

; 287  :         DumpPrcmRegsSnapshot();

  00790	eb000000	 bl          DumpPrcmRegsSnapshot
  00794		 |$LN5@OEMPowerOf|

; 288  :     }
; 289  : #endif
; 290  : 
; 291  :     // restore interrupts
; 292  :     INTERRUPTS_ENABLE(bPrevIntrState);

  00794	e59d001c	 ldr         r0, [sp, #0x1C]
  00798	eb000000	 bl          INTERRUPTS_ENABLE

; 293  : }

  0079c	e28dd080	 add         sp, sp, #0x80
  007a0	e49de004	 ldr         lr, [sp], #4
  007a4	e12fff1e	 bx          lr
  007a8		 |$LN38@OEMPowerOf|
  007a8		 |$LN39@OEMPowerOf|
  007a8	00000000	 DCD         |??_C@_1DG@KDDHMOEO@?$AA?$AN?$AA?6?$AAW?$AAa?$AAk?$AAe?$AA?5?$AAd?$AAu?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAS?$AAY?$AAS?$AAI?$AAN?$AAT?$AAR?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  007ac		 |$LN40@OEMPowerOf|
  007ac	00000000	 DCD         |g_oalWakeSource|
  007b0		 |$LN41@OEMPowerOf|
  007b0	00000000	 DCD         |??_C@_1BO@GGDDDJNF@?$AA?5?$AA?5?$AAS?$AAY?$AAS?$AAI?$AAN?$AAT?$AAR?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  007b4		 |$LN42@OEMPowerOf|
  007b4	00000000	 DCD         |??_C@_1DA@OKMJBLLN@?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAd?$AA?5?$AAw?$AAa?$AAk?$AAe?$AA?5?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AAs?$AA?3?$AA?$AN?$AA?6?$AA?$AA@|
  007b8		 |$LN43@OEMPowerOf|
  007b8	00000000	 DCD         |g_PrcmDebugSuspendResume|
  007bc		 |$LN44@OEMPowerOf|
  007bc	01010144	 DCD         0x1010144
  007c0		 |$LN45@OEMPowerOf|
  007c0	00000000	 DCD         |g_pIntr|
  007c4		 |$M47340|

			 ENDP  ; |OEMPowerOff|

	END
