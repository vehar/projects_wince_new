; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\OMAP3530\OAL\PRCM\prcm_domain.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|_CoreClockDomain| [ DATA ]
	EXPORT	|_PeripheralClockDomain| [ DATA ]
	EXPORT	|_UsbHostClockDomain| [ DATA ]
	EXPORT	|_EmulationClockDomain| [ DATA ]
	EXPORT	|_MpuClockDomain| [ DATA ]
	EXPORT	|_DssClockDomain| [ DATA ]
	EXPORT	|_NeonClockDomain| [ DATA ]
	EXPORT	|_Iva2ClockDomain| [ DATA ]
	EXPORT	|_CameraClockDomain| [ DATA ]
	EXPORT	|_SgxClockDomain| [ DATA ]
	EXPORT	|_WakeupPowerDomain| [ DATA ]
	EXPORT	|_CorePowerDomain| [ DATA ]
	EXPORT	|_PeripheralPowerDomain| [ DATA ]
	EXPORT	|_UsbHostPowerDomain| [ DATA ]
	EXPORT	|_MpuPowerDomain| [ DATA ]
	EXPORT	|_DssPowerDomain| [ DATA ]
	EXPORT	|_NeonPowerDomain| [ DATA ]
	EXPORT	|_Iva2PowerDomain| [ DATA ]
	EXPORT	|_CameraPowerDomain| [ DATA ]
	EXPORT	|_SgxPowerDomain| [ DATA ]
	EXPORT	|s_DomainTable| [ DATA ]

  00000			 AREA	 |.data|, DATA
|_CoreClockDomain| DCD 0x3
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x1
	DCD	0x0
	DCD	0x2
	DCD	0xb
	DCD	0x0
	DCD	0x4
|_PeripheralClockDomain| DCD 0x1
	DCD	0x2
	DCD	0x0
	DCD	0x0
|_UsbHostClockDomain| DCD 0x1
	DCD	0x3
	DCD	0x0
	DCD	0x0
|_EmulationClockDomain| DCD 0x1
	DCD	0x4
	DCD	0x0
	DCD	0x0
|_MpuClockDomain| DCD 0x1
	DCD	0x5
	DCD	0x0
	DCD	0x0
|_DssClockDomain| DCD 0x1
	DCD	0x6
	DCD	0x0
	DCD	0x0
|_NeonClockDomain| DCD 0x1
	DCD	0x7
	DCD	0x0
	DCD	0x0
|_Iva2ClockDomain| DCD 0x1
	DCD	0x8
	DCD	0x0
	DCD	0x0
|_CameraClockDomain| DCD 0x1
	DCD	0x9
	DCD	0x0
	DCD	0x0
|_SgxClockDomain| DCD 0x1
	DCD	0xa
	DCD	0x0
	DCD	0x0
|_WakeupPowerDomain| DCD 0x3
	DCD	0x4
	DCD	0x0
	DCD	0x0
|_CorePowerDomain| DCD 0x3
	DCD	0x4
	DCD	0x0
	DCD	0x0
|_PeripheralPowerDomain| DCD 0x3
	DCD	0x4
	DCD	0x0
	DCD	0x17
|_UsbHostPowerDomain| DCD 0x3
	DCD	0x4
	DCD	0x0
	DCD	0x17
|_MpuPowerDomain| DCD 0x3
	DCD	0x4
	DCD	0x0
	DCD	0xa5
|_DssPowerDomain| DCD 0x3
	DCD	0x4
	DCD	0x0
	DCD	0x16
|_NeonPowerDomain| DCD 0x3
	DCD	0x4
	DCD	0x0
	DCD	0x2
|_Iva2PowerDomain| DCD 0x3
	DCD	0x4
	DCD	0x0
	DCD	0xb3
|_CameraPowerDomain| DCD 0x3
	DCD	0x4
	DCD	0x0
	DCD	0x16
|_SgxPowerDomain| DCD 0x3
	DCD	0x4
	DCD	0x0
	DCD	0x16
|s_DomainTable| DCD 0x0
	DCD	0x0
	DCD	|_WakeupPowerDomain|
	DCD	0x0
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x0
	DCD	0xc
	DCD	|_CorePowerDomain|
	DCD	|_CoreClockDomain|
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x0
	DCD	0xf
	DCD	|_PeripheralPowerDomain|
	DCD	|_PeripheralClockDomain|
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x0
	DCD	0xf
	DCD	|_UsbHostPowerDomain|
	DCD	|_UsbHostClockDomain|
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x0
	DCD	0x8
	DCD	0x0
	DCD	|_EmulationClockDomain|
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x0
	DCD	0xd
	DCD	|_MpuPowerDomain|
	DCD	|_MpuClockDomain|
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x0
	DCD	0xf
	DCD	|_DssPowerDomain|
	DCD	|_DssClockDomain|
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x0
	DCD	0xd
	DCD	|_NeonPowerDomain|
	DCD	|_NeonClockDomain|
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x0
	DCD	0xd
	DCD	|_Iva2PowerDomain|
	DCD	|_Iva2ClockDomain|
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x0
	DCD	0xf
	DCD	|_CameraPowerDomain|
	DCD	|_CameraClockDomain|
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x0
	DCD	0xf
	DCD	|_SgxPowerDomain|
	DCD	|_SgxClockDomain|
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|Unlock|
	EXPORT	|Lock|
	EXPORT	|PrcmDomainSetPowerStateInternal|
	IMPORT	|OALWakeupLatency_UpdateDomainState|

  00000			 AREA	 |.pdata|, PDATA
|$T47388| DCD	|$LN9@PrcmDomain|
	DCD	0x40004804
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\oal\prcm\prcm_domain.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PrcmDomainSetPowerStateInternal| PROC

; 495  : {

  00000		 |$LN9@PrcmDomain|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d000f	 stmdb       sp!, {r0 - r3}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd010	 sub         sp, sp, #0x10
  00010		 |$M47385|

; 496  :     BOOL rc = FALSE;

  00010	e3a03000	 mov         r3, #0
  00014	e58d3000	 str         r3, [sp]

; 497  :     PowerDomainState_t *pDomainState;
; 498  :     
; 499  :     if (powerDomain >= POWERDOMAIN_COUNT) goto cleanUp;

  00018	e59d3018	 ldr         r3, [sp, #0x18]
  0001c	e353000d	 cmp         r3, #0xD
  00020	3a000000	 bcc         |$LN4@PrcmDomain|
  00024	ea000036	 b           |$cleanUp$47059|
  00028		 |$LN4@PrcmDomain|

; 500  :     if ((s_DomainTable[powerDomain].ffValidationMask & DOMAIN_UPDATE_POWERSTATE) == 0) goto cleanUp;

  00028	e59d1018	 ldr         r1, [sp, #0x18]
  0002c	e3a0301c	 mov         r3, #0x1C
  00030	e0020391	 mul         r2, r1, r3
  00034	e59f30e0	 ldr         r3, [pc, #0xE0]
  00038	e0833002	 add         r3, r3, r2
  0003c	e2833004	 add         r3, r3, #4
  00040	e5933000	 ldr         r3, [r3]
  00044	e3130004	 tst         r3, #4
  00048	1a000000	 bne         |$LN3@PrcmDomain|
  0004c	ea00002c	 b           |$cleanUp$47059|
  00050		 |$LN3@PrcmDomain|

; 501  : 
; 502  :     // update internal state information 
; 503  :     pDomainState = s_DomainTable[powerDomain].pDomainState;

  00050	e59d1018	 ldr         r1, [sp, #0x18]
  00054	e3a0301c	 mov         r3, #0x1C
  00058	e0020391	 mul         r2, r1, r3
  0005c	e59f30b8	 ldr         r3, [pc, #0xB8]
  00060	e0833002	 add         r3, r3, r2
  00064	e2833008	 add         r3, r3, #8
  00068	e5933000	 ldr         r3, [r3]
  0006c	e58d3004	 str         r3, [sp, #4]

; 504  :     if (pDomainState == NULL) goto cleanUp;

  00070	e59d3004	 ldr         r3, [sp, #4]
  00074	e3530000	 cmp         r3, #0
  00078	1a000000	 bne         |$LN2@PrcmDomain|
  0007c	ea000020	 b           |$cleanUp$47059|
  00080		 |$LN2@PrcmDomain|

; 505  :     
; 506  :     // POWERSTATE_OFF                      0
; 507  :     // POWERSTATE_RETENTION                1
; 508  :     // POWERSTATE_INACTIVE                 2
; 509  :     // POWERSTATE_ON                       3
; 510  : 
; 511  :     // LOGICRETSTATE_LOGICOFF_DOMAINRET    1
; 512  :     // LOGICRETSTATE_LOGICRET_DOMAINRET    4
; 513  : 
; 514  :     //OALMSG(1, (L"Domain %d -> P%d L%d\r\n", powerDomain, powerState, logicState));
; 515  : 
; 516  :     Lock(Mutex_Domain);

  00080	e3a00002	 mov         r0, #2
  00084	eb000000	 bl          Lock

; 517  :     powerState &= POWERSTATE_MASK;

  00088	e59d301c	 ldr         r3, [sp, #0x1C]
  0008c	e2033003	 and         r3, r3, #3
  00090	e58d301c	 str         r3, [sp, #0x1C]

; 518  :     powerState >>= POWERSTATE_SHIFT;

  00094	e59d301c	 ldr         r3, [sp, #0x1C]
  00098	e58d301c	 str         r3, [sp, #0x1C]

; 519  :     pDomainState->powerState = powerState;

  0009c	e59d201c	 ldr         r2, [sp, #0x1C]
  000a0	e59d3004	 ldr         r3, [sp, #4]
  000a4	e5832000	 str         r2, [r3]

; 520  :     pDomainState->logicState = logicState & LOGICRETSTATE;

  000a8	e59d3020	 ldr         r3, [sp, #0x20]
  000ac	e2032004	 and         r2, r3, #4
  000b0	e59d3004	 ldr         r3, [sp, #4]
  000b4	e2833004	 add         r3, r3, #4
  000b8	e5832000	 str         r2, [r3]

; 521  :     rc = _PrcmDomainHwUpdate(powerDomain, DOMAIN_UPDATE_POWERSTATE);

  000bc	e3a01004	 mov         r1, #4
  000c0	e59d0018	 ldr         r0, [sp, #0x18]
  000c4	eb000000	 bl          _PrcmDomainHwUpdate
  000c8	e58d000c	 str         r0, [sp, #0xC]
  000cc	e59d300c	 ldr         r3, [sp, #0xC]
  000d0	e58d3000	 str         r3, [sp]

; 522  : 
; 523  :     // check if we need to notify of a power state change
; 524  :     if (bNotify == TRUE)

  000d4	e59d3024	 ldr         r3, [sp, #0x24]
  000d8	e3530001	 cmp         r3, #1
  000dc	1a000006	 bne         |$LN1@PrcmDomain|

; 525  :         {
; 526  :         // update latency information
; 527  :         OALWakeupLatency_UpdateDomainState(powerDomain, 
; 528  :             pDomainState->powerState, 
; 529  :             pDomainState->logicState
; 530  :             );

  000e0	e59d3004	 ldr         r3, [sp, #4]
  000e4	e2833004	 add         r3, r3, #4
  000e8	e5932000	 ldr         r2, [r3]
  000ec	e59d3004	 ldr         r3, [sp, #4]
  000f0	e5931000	 ldr         r1, [r3]
  000f4	e59d0018	 ldr         r0, [sp, #0x18]
  000f8	eb000000	 bl          OALWakeupLatency_UpdateDomainState
  000fc		 |$LN1@PrcmDomain|

; 531  :         }
; 532  :     Unlock(Mutex_Domain);

  000fc	e3a00002	 mov         r0, #2
  00100	eb000000	 bl          Unlock
  00104		 |$cleanUp$47059|

; 533  :     
; 534  : cleanUp:    
; 535  :     
; 536  :     return rc;

  00104	e59d3000	 ldr         r3, [sp]
  00108	e58d3008	 str         r3, [sp, #8]

; 537  : }

  0010c	e59d0008	 ldr         r0, [sp, #8]
  00110	e28dd010	 add         sp, sp, #0x10
  00114	e89d6000	 ldmia       sp, {sp, lr}
  00118	e12fff1e	 bx          lr
  0011c		 |$LN10@PrcmDomain|
  0011c		 |$LN11@PrcmDomain|
  0011c	00000000	 DCD         |s_DomainTable|
  00120		 |$M47386|

			 ENDP  ; |PrcmDomainSetPowerStateInternal|

	IMPORT	|EnterCriticalSection|
	IMPORT	|g_rgPrcmMutex|
	IMPORT	|g_bSingleThreaded|
	IMPORT	|g_PrcmPostInit|
; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\oal\prcm\prcm_priv.h

  00000			 AREA	 |.pdata|, PDATA
|$T47395| DCD	|$LN6@Lock|
	DCD	0x40001603
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Lock|	 PROC

; 266  : {

  00000		 |$LN6@Lock|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M47392|

; 267  :     if (g_PrcmPostInit && !g_bSingleThreaded) 

  0000c	e59f3040	 ldr         r3, [pc, #0x40]
  00010	e5933000	 ldr         r3, [r3]
  00014	e3530000	 cmp         r3, #0
  00018	0a000009	 beq         |$LN1@Lock|
  0001c	e59f302c	 ldr         r3, [pc, #0x2C]
  00020	e5933000	 ldr         r3, [r3]
  00024	e3530000	 cmp         r3, #0
  00028	1a000005	 bne         |$LN1@Lock|

; 268  :         {
; 269  :         EnterCriticalSection(&g_rgPrcmMutex[mutexId]);

  0002c	e59d1008	 ldr         r1, [sp, #8]
  00030	e3a03014	 mov         r3, #0x14
  00034	e0020391	 mul         r2, r1, r3
  00038	e59f300c	 ldr         r3, [pc, #0xC]
  0003c	e0830002	 add         r0, r3, r2
  00040	eb000000	 bl          EnterCriticalSection
  00044		 |$LN1@Lock|

; 270  :         }
; 271  : }

  00044	e89d6000	 ldmia       sp, {sp, lr}
  00048	e12fff1e	 bx          lr
  0004c		 |$LN7@Lock|
  0004c		 |$LN8@Lock|
  0004c	00000000	 DCD         |g_rgPrcmMutex|
  00050		 |$LN9@Lock|
  00050	00000000	 DCD         |g_bSingleThreaded|
  00054		 |$LN10@Lock|
  00054	00000000	 DCD         |g_PrcmPostInit|
  00058		 |$M47393|

			 ENDP  ; |Lock|

	IMPORT	|LeaveCriticalSection|

  00000			 AREA	 |.pdata|, PDATA
|$T47406| DCD	|$LN6@Unlock|
	DCD	0x40001603
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Unlock| PROC

; 277  : {

  00000		 |$LN6@Unlock|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M47403|

; 278  :     if (g_PrcmPostInit && !g_bSingleThreaded)

  0000c	e59f3040	 ldr         r3, [pc, #0x40]
  00010	e5933000	 ldr         r3, [r3]
  00014	e3530000	 cmp         r3, #0
  00018	0a000009	 beq         |$LN1@Unlock|
  0001c	e59f302c	 ldr         r3, [pc, #0x2C]
  00020	e5933000	 ldr         r3, [r3]
  00024	e3530000	 cmp         r3, #0
  00028	1a000005	 bne         |$LN1@Unlock|

; 279  :         {
; 280  :         LeaveCriticalSection(&g_rgPrcmMutex[mutexId]);

  0002c	e59d1008	 ldr         r1, [sp, #8]
  00030	e3a03014	 mov         r3, #0x14
  00034	e0020391	 mul         r2, r1, r3
  00038	e59f300c	 ldr         r3, [pc, #0xC]
  0003c	e0830002	 add         r0, r3, r2
  00040	eb000000	 bl          LeaveCriticalSection
  00044		 |$LN1@Unlock|

; 281  :         }
; 282  : }

  00044	e89d6000	 ldmia       sp, {sp, lr}
  00048	e12fff1e	 bx          lr
  0004c		 |$LN7@Unlock|
  0004c		 |$LN8@Unlock|
  0004c	00000000	 DCD         |g_rgPrcmMutex|
  00050		 |$LN9@Unlock|
  00050	00000000	 DCD         |g_bSingleThreaded|
  00054		 |$LN10@Unlock|
  00054	00000000	 DCD         |g_PrcmPostInit|
  00058		 |$M47404|

			 ENDP  ; |Unlock|

	IMPORT	|g_pPrcmRestore|
	IMPORT	|GetPrmRegisterSet|
	IMPORT	|GetCmRegisterSet|

  00008			 AREA	 |.pdata|, PDATA
|$T47418| DCD	|$LN17@PrcmDomain@2|
	DCD	0x4000b604
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\oal\prcm\prcm_domain.c

  00120			 AREA	 |.text|, CODE, ARM

  00120		 |_PrcmDomainHwUpdate| PROC

; 412  : {

  00120		 |$LN17@PrcmDomain@2|
  00120	e1a0c00d	 mov         r12, sp
  00124	e92d0003	 stmdb       sp!, {r0, r1}
  00128	e92d5000	 stmdb       sp!, {r12, lr}
  0012c	e24dd034	 sub         sp, sp, #0x34
  00130		 |$M47415|

; 413  :     BOOL rc = TRUE;

  00130	e3a03001	 mov         r3, #1
  00134	e58d3008	 str         r3, [sp, #8]

; 414  :     UINT pm_wkdep;
; 415  :     UINT pm_pwstctrl;
; 416  :     UINT cm_sleepdep;
; 417  :     UINT cm_clkstctrl;   
; 418  :     OMAP_CM_REGS   *pCmRegs;
; 419  :     OMAP_PRM_REGS  *pPrmRegs;
; 420  :     ClockDomainInfo_t  *pClockStates;    
; 421  :     PowerDomainState_t *pDomainState;
; 422  :     
; 423  :     // update the following hw registers
; 424  :     // PM_WKDEP_xxx
; 425  :     // CM_SLEEPDEP_xxx
; 426  :     // PM_PWSTCTRL_xxx.POWERSTATE
; 427  :     // CM_CLKSTCTRL_xxx
; 428  : 
; 429  :     pCmRegs = GetCmRegisterSet(powerDomain);

  00138	e59d003c	 ldr         r0, [sp, #0x3C]
  0013c	eb000000	 bl          GetCmRegisterSet
  00140	e58d002c	 str         r0, [sp, #0x2C]
  00144	e59d302c	 ldr         r3, [sp, #0x2C]
  00148	e58d301c	 str         r3, [sp, #0x1C]

; 430  :     pPrmRegs = GetPrmRegisterSet(powerDomain);

  0014c	e59d003c	 ldr         r0, [sp, #0x3C]
  00150	eb000000	 bl          GetPrmRegisterSet
  00154	e58d0030	 str         r0, [sp, #0x30]
  00158	e59d3030	 ldr         r3, [sp, #0x30]
  0015c	e58d3018	 str         r3, [sp, #0x18]

; 431  :     pClockStates = s_DomainTable[powerDomain].pClockStates;

  00160	e59d103c	 ldr         r1, [sp, #0x3C]
  00164	e3a0301c	 mov         r3, #0x1C
  00168	e0020391	 mul         r2, r1, r3
  0016c	e59f3280	 ldr         r3, [pc, #0x280]
  00170	e0833002	 add         r3, r3, r2
  00174	e283300c	 add         r3, r3, #0xC
  00178	e5933000	 ldr         r3, [r3]
  0017c	e58d3000	 str         r3, [sp]

; 432  :     pDomainState = s_DomainTable[powerDomain].pDomainState;

  00180	e59d103c	 ldr         r1, [sp, #0x3C]
  00184	e3a0301c	 mov         r3, #0x1C
  00188	e0020391	 mul         r2, r1, r3
  0018c	e59f3260	 ldr         r3, [pc, #0x260]
  00190	e0833002	 add         r3, r3, r2
  00194	e2833008	 add         r3, r3, #8
  00198	e5933000	 ldr         r3, [r3]
  0019c	e58d3014	 str         r3, [sp, #0x14]

; 433  :         
; 434  :     if (pDomainState != NULL)

  001a0	e59d3014	 ldr         r3, [sp, #0x14]
  001a4	e3530000	 cmp         r3, #0
  001a8	0a00003d	 beq         |$LN12@PrcmDomain@2|

; 435  :         {
; 436  :         if (ffMask & DOMAIN_UPDATE_WKUPDEP)

  001ac	e59d3040	 ldr         r3, [sp, #0x40]
  001b0	e3130001	 tst         r3, #1
  001b4	0a00000f	 beq         |$LN11@PrcmDomain@2|

; 437  :             {
; 438  :             pm_wkdep = INREG32(&pPrmRegs->PM_WKDEP_xxx) & ~WKDEP_MASK;

  001b8	e59d3018	 ldr         r3, [sp, #0x18]
  001bc	e28330c8	 add         r3, r3, #0xC8
  001c0	e5932000	 ldr         r2, [r3]
  001c4	e3e030ff	 mvn         r3, #0xFF
  001c8	e0023003	 and         r3, r2, r3
  001cc	e58d3010	 str         r3, [sp, #0x10]

; 439  :             pm_wkdep |= pDomainState->wakeDependency << WKDEP_SHIFT;

  001d0	e59d3014	 ldr         r3, [sp, #0x14]
  001d4	e283300c	 add         r3, r3, #0xC
  001d8	e59d2010	 ldr         r2, [sp, #0x10]
  001dc	e5933000	 ldr         r3, [r3]
  001e0	e1823003	 orr         r3, r2, r3
  001e4	e58d3010	 str         r3, [sp, #0x10]

; 440  :             OUTREG32(&pPrmRegs->PM_WKDEP_xxx, pm_wkdep);

  001e8	e59d3018	 ldr         r3, [sp, #0x18]
  001ec	e28320c8	 add         r2, r3, #0xC8
  001f0	e59d3010	 ldr         r3, [sp, #0x10]
  001f4	e5823000	 str         r3, [r2]
  001f8		 |$LN11@PrcmDomain@2|

; 441  :             }
; 442  : 
; 443  :         if (ffMask & DOMAIN_UPDATE_SLEEPDEP)

  001f8	e59d3040	 ldr         r3, [sp, #0x40]
  001fc	e3130002	 tst         r3, #2
  00200	0a00000f	 beq         |$LN10@PrcmDomain@2|

; 444  :             {
; 445  :             cm_sleepdep = INREG32(&pCmRegs->CM_SLEEPDEP_xxx) & ~SLEEPDEP_MASK;

  00204	e59d301c	 ldr         r3, [sp, #0x1C]
  00208	e2833044	 add         r3, r3, #0x44
  0020c	e5932000	 ldr         r2, [r3]
  00210	e3e030ff	 mvn         r3, #0xFF
  00214	e0023003	 and         r3, r2, r3
  00218	e58d300c	 str         r3, [sp, #0xC]

; 446  :             cm_sleepdep |= pDomainState->sleepDependency << SLEEPDEP_SHIFT;

  0021c	e59d3014	 ldr         r3, [sp, #0x14]
  00220	e2833008	 add         r3, r3, #8
  00224	e59d200c	 ldr         r2, [sp, #0xC]
  00228	e5933000	 ldr         r3, [r3]
  0022c	e1823003	 orr         r3, r2, r3
  00230	e58d300c	 str         r3, [sp, #0xC]

; 447  :             OUTREG32(&pCmRegs->CM_SLEEPDEP_xxx, cm_sleepdep);

  00234	e59d301c	 ldr         r3, [sp, #0x1C]
  00238	e2832044	 add         r2, r3, #0x44
  0023c	e59d300c	 ldr         r3, [sp, #0xC]
  00240	e5823000	 str         r3, [r2]
  00244		 |$LN10@PrcmDomain@2|

; 448  :             }
; 449  : 
; 450  :         if (ffMask & DOMAIN_UPDATE_POWERSTATE)

  00244	e59d3040	 ldr         r3, [sp, #0x40]
  00248	e3130004	 tst         r3, #4
  0024c	0a000014	 beq         |$LN9@PrcmDomain@2|

; 451  :             {
; 452  :             pm_pwstctrl = INREG32(&pPrmRegs->PM_PWSTCTRL_xxx) & ~(POWERSTATE_MASK | LOGICRETSTATE_MASK);

  00250	e59d3018	 ldr         r3, [sp, #0x18]
  00254	e28330e0	 add         r3, r3, #0xE0
  00258	e5932000	 ldr         r2, [r3]
  0025c	e3e03007	 mvn         r3, #7
  00260	e0023003	 and         r3, r2, r3
  00264	e58d3004	 str         r3, [sp, #4]

; 453  :             pm_pwstctrl |= pDomainState->powerState << POWERSTATE_SHIFT;

  00268	e59d2004	 ldr         r2, [sp, #4]
  0026c	e59d3014	 ldr         r3, [sp, #0x14]
  00270	e5933000	 ldr         r3, [r3]
  00274	e1823003	 orr         r3, r2, r3
  00278	e58d3004	 str         r3, [sp, #4]

; 454  :             pm_pwstctrl |= pDomainState->logicState;

  0027c	e59d3014	 ldr         r3, [sp, #0x14]
  00280	e2833004	 add         r3, r3, #4
  00284	e59d2004	 ldr         r2, [sp, #4]
  00288	e5933000	 ldr         r3, [r3]
  0028c	e1823003	 orr         r3, r2, r3
  00290	e58d3004	 str         r3, [sp, #4]

; 455  :             OUTREG32(&pPrmRegs->PM_PWSTCTRL_xxx, pm_pwstctrl);

  00294	e59d3018	 ldr         r3, [sp, #0x18]
  00298	e28320e0	 add         r2, r3, #0xE0
  0029c	e59d3004	 ldr         r3, [sp, #4]
  002a0	e5823000	 str         r3, [r2]
  002a4		 |$LN9@PrcmDomain@2|
  002a4		 |$LN12@PrcmDomain@2|

; 456  :             }
; 457  :         }
; 458  : 
; 459  :     if (pClockStates != NULL)

  002a4	e59d3000	 ldr         r3, [sp]
  002a8	e3530000	 cmp         r3, #0
  002ac	0a000049	 beq         |$LN8@PrcmDomain@2|

; 460  :         {
; 461  :         if (ffMask & DOMAIN_UPDATE_CLOCKSTATE)

  002b0	e59d3040	 ldr         r3, [sp, #0x40]
  002b4	e3130008	 tst         r3, #8
  002b8	0a000046	 beq         |$LN7@PrcmDomain@2|

; 462  :             {
; 463  :             UINT i;
; 464  :             cm_clkstctrl = INREG32(&pCmRegs->CM_CLKSTCTRL_xxx);

  002bc	e59d301c	 ldr         r3, [sp, #0x1C]
  002c0	e2833048	 add         r3, r3, #0x48
  002c4	e5933000	 ldr         r3, [r3]
  002c8	e58d3020	 str         r3, [sp, #0x20]

; 465  :             for (i = 0; i < pClockStates->count; ++i)

  002cc	e3a03000	 mov         r3, #0
  002d0	e58d3024	 str         r3, [sp, #0x24]
  002d4	ea000002	 b           |$LN6@PrcmDomain@2|
  002d8		 |$LN5@PrcmDomain@2|
  002d8	e59d3024	 ldr         r3, [sp, #0x24]
  002dc	e2833001	 add         r3, r3, #1
  002e0	e58d3024	 str         r3, [sp, #0x24]
  002e4		 |$LN6@PrcmDomain@2|
  002e4	e59d2024	 ldr         r2, [sp, #0x24]
  002e8	e59d3000	 ldr         r3, [sp]
  002ec	e5933000	 ldr         r3, [r3]
  002f0	e1520003	 cmp         r2, r3
  002f4	2a000022	 bcs         |$LN4@PrcmDomain@2|

; 466  :                 {
; 467  :                 cm_clkstctrl &= ~(CLKSTCTRL_MASK << pClockStates->rgClockDomains[i].clockShift);

  002f8	e59d3000	 ldr         r3, [sp]
  002fc	e2831004	 add         r1, r3, #4
  00300	e59d2024	 ldr         r2, [sp, #0x24]
  00304	e3a0300c	 mov         r3, #0xC
  00308	e0030392	 mul         r3, r2, r3
  0030c	e0813003	 add         r3, r1, r3
  00310	e2833008	 add         r3, r3, #8
  00314	e5932000	 ldr         r2, [r3]
  00318	e3a03003	 mov         r3, #3
  0031c	e1a03213	 mov         r3, r3, lsl r2
  00320	e1e02003	 mvn         r2, r3
  00324	e59d3020	 ldr         r3, [sp, #0x20]
  00328	e0033002	 and         r3, r3, r2
  0032c	e58d3020	 str         r3, [sp, #0x20]

; 468  :                 cm_clkstctrl |= (pClockStates->rgClockDomains[i].clockState << pClockStates->rgClockDomains[i].clockShift) << CLKSTCTRL_SHIFT;

  00330	e59d3000	 ldr         r3, [sp]
  00334	e2831004	 add         r1, r3, #4
  00338	e59d2024	 ldr         r2, [sp, #0x24]
  0033c	e3a0300c	 mov         r3, #0xC
  00340	e0030392	 mul         r3, r2, r3
  00344	e0813003	 add         r3, r1, r3
  00348	e2830004	 add         r0, r3, #4
  0034c	e59d3000	 ldr         r3, [sp]
  00350	e2831004	 add         r1, r3, #4
  00354	e59d2024	 ldr         r2, [sp, #0x24]
  00358	e3a0300c	 mov         r3, #0xC
  0035c	e0030392	 mul         r3, r2, r3
  00360	e0813003	 add         r3, r1, r3
  00364	e2833008	 add         r3, r3, #8
  00368	e5902000	 ldr         r2, [r0]
  0036c	e5933000	 ldr         r3, [r3]
  00370	e1a02312	 mov         r2, r2, lsl r3
  00374	e59d3020	 ldr         r3, [sp, #0x20]
  00378	e1833002	 orr         r3, r3, r2
  0037c	e58d3020	 str         r3, [sp, #0x20]

; 469  :                 }

  00380	eaffffd4	 b           |$LN5@PrcmDomain@2|
  00384		 |$LN4@PrcmDomain@2|

; 470  :             OUTREG32(&pCmRegs->CM_CLKSTCTRL_xxx, cm_clkstctrl);

  00384	e59d301c	 ldr         r3, [sp, #0x1C]
  00388	e2832048	 add         r2, r3, #0x48
  0038c	e59d3020	 ldr         r3, [sp, #0x20]
  00390	e5823000	 str         r3, [r2]

; 471  : 
; 472  :             // save context
; 473  :             if (powerDomain == POWERDOMAIN_MPU)

  00394	e59d303c	 ldr         r3, [sp, #0x3C]
  00398	e3530005	 cmp         r3, #5
  0039c	1a000005	 bne         |$LN3@PrcmDomain@2|

; 474  :                 {
; 475  :                 OUTREG32(&g_pPrcmRestore->CM_CLKSTCTRL_MPU, cm_clkstctrl);

  003a0	e59f3048	 ldr         r3, [pc, #0x48]
  003a4	e5933000	 ldr         r3, [r3]
  003a8	e2832038	 add         r2, r3, #0x38
  003ac	e59d3020	 ldr         r3, [sp, #0x20]
  003b0	e5823000	 str         r3, [r2]
  003b4	ea000007	 b           |$LN2@PrcmDomain@2|
  003b8		 |$LN3@PrcmDomain@2|

; 476  :                 }
; 477  :             else if (powerDomain == POWERDOMAIN_CORE)

  003b8	e59d303c	 ldr         r3, [sp, #0x3C]
  003bc	e3530001	 cmp         r3, #1
  003c0	1a000004	 bne         |$LN1@PrcmDomain@2|

; 478  :                 {
; 479  :                 OUTREG32(&g_pPrcmRestore->CM_CLKSTCTRL_CORE, cm_clkstctrl);

  003c4	e59f3024	 ldr         r3, [pc, #0x24]
  003c8	e5933000	 ldr         r3, [r3]
  003cc	e283203c	 add         r2, r3, #0x3C
  003d0	e59d3020	 ldr         r3, [sp, #0x20]
  003d4	e5823000	 str         r3, [r2]
  003d8		 |$LN1@PrcmDomain@2|
  003d8		 |$LN2@PrcmDomain@2|
  003d8		 |$LN7@PrcmDomain@2|
  003d8		 |$LN8@PrcmDomain@2|

; 480  :                 }
; 481  :             }
; 482  :         }
; 483  :     
; 484  :     return rc;

  003d8	e59d3008	 ldr         r3, [sp, #8]
  003dc	e58d3028	 str         r3, [sp, #0x28]

; 485  : }

  003e0	e59d0028	 ldr         r0, [sp, #0x28]
  003e4	e28dd034	 add         sp, sp, #0x34
  003e8	e89d6000	 ldmia       sp, {sp, lr}
  003ec	e12fff1e	 bx          lr
  003f0		 |$LN18@PrcmDomain@2|
  003f0		 |$LN19@PrcmDomain@2|
  003f0	00000000	 DCD         |g_pPrcmRestore|
  003f4		 |$LN20@PrcmDomain@2|
  003f4	00000000	 DCD         |s_DomainTable|
  003f8		 |$M47416|

			 ENDP  ; |_PrcmDomainHwUpdate|

	EXPORT	|DomainGetDeviceContextState|

  00010			 AREA	 |.pdata|, PDATA
|$T47429| DCD	|$LN10@DomainGetD|
	DCD	0x40006e04
; Function compile flags: /Odtp

  003f8			 AREA	 |.text|, CODE, ARM

  003f8		 |DomainGetDeviceContextState| PROC

; 546  : {

  003f8		 |$LN10@DomainGetD|
  003f8	e1a0c00d	 mov         r12, sp
  003fc	e92d0007	 stmdb       sp!, {r0 - r2}
  00400	e92d5000	 stmdb       sp!, {r12, lr}
  00404	e24dd018	 sub         sp, sp, #0x18
  00408		 |$M47426|

; 547  :     int idx;
; 548  :     BOOL rc;
; 549  :     OMAP_PRM_REGS *pPrmRegs;
; 550  :     
; 551  :     // Get array index 
; 552  :     idx = pInfo->offset - cm_offset(CM_ICLKEN1_xxx);

  00408	e59d3024	 ldr         r3, [sp, #0x24]
  0040c	e2833008	 add         r3, r3, #8
  00410	e5933000	 ldr         r3, [r3]
  00414	e2433010	 sub         r3, r3, #0x10
  00418	e58d3004	 str         r3, [sp, #4]

; 553  :     Lock(Mutex_Domain);

  0041c	e3a00002	 mov         r0, #2
  00420	eb000000	 bl          Lock

; 554  :     
; 555  :     // get current power state of domain
; 556  :     pPrmRegs = GetPrmRegisterSet(powerDomain);

  00424	e59d0020	 ldr         r0, [sp, #0x20]
  00428	eb000000	 bl          GetPrmRegisterSet
  0042c	e58d0010	 str         r0, [sp, #0x10]
  00430	e59d3010	 ldr         r3, [sp, #0x10]
  00434	e58d3008	 str         r3, [sp, #8]

; 557  :     if ((INREG32(&pPrmRegs->PM_PWSTST_xxx) & POWERSTATE_MASK) == POWERSTATE_OFF)

  00438	e59d3008	 ldr         r3, [sp, #8]
  0043c	e28330e4	 add         r3, r3, #0xE4
  00440	e5933000	 ldr         r3, [r3]
  00444	e3130003	 tst         r3, #3
  00448	1a00001a	 bne         |$LN3@DomainGetD|

; 558  :         {
; 559  :         // domain is off
; 560  :         
; 561  :         // clear device context table for power domain
; 562  :         s_DomainTable[powerDomain].rgDeviceContextState[0] = 0;

  0044c	e59d1020	 ldr         r1, [sp, #0x20]
  00450	e3a0301c	 mov         r3, #0x1C
  00454	e0020391	 mul         r2, r1, r3
  00458	e59f314c	 ldr         r3, [pc, #0x14C]
  0045c	e0833002	 add         r3, r3, r2
  00460	e2832010	 add         r2, r3, #0x10
  00464	e3a03000	 mov         r3, #0
  00468	e5823000	 str         r3, [r2]

; 563  :         s_DomainTable[powerDomain].rgDeviceContextState[1] = 0;

  0046c	e59d1020	 ldr         r1, [sp, #0x20]
  00470	e3a0301c	 mov         r3, #0x1C
  00474	e0020391	 mul         r2, r1, r3
  00478	e59f312c	 ldr         r3, [pc, #0x12C]
  0047c	e0833002	 add         r3, r3, r2
  00480	e2832014	 add         r2, r3, #0x14
  00484	e3a03000	 mov         r3, #0
  00488	e5823000	 str         r3, [r2]

; 564  :         s_DomainTable[powerDomain].rgDeviceContextState[2] = 0;

  0048c	e59d1020	 ldr         r1, [sp, #0x20]
  00490	e3a0301c	 mov         r3, #0x1C
  00494	e0020391	 mul         r2, r1, r3
  00498	e59f310c	 ldr         r3, [pc, #0x10C]
  0049c	e0833002	 add         r3, r3, r2
  004a0	e2832018	 add         r2, r3, #0x18
  004a4	e3a03000	 mov         r3, #0
  004a8	e5823000	 str         r3, [r2]

; 565  :         rc = 0;

  004ac	e3a03000	 mov         r3, #0
  004b0	e58d3000	 str         r3, [sp]

; 566  :         }
; 567  :     else

  004b4	ea00000f	 b           |$LN2@DomainGetD|
  004b8		 |$LN3@DomainGetD|

; 568  :         {
; 569  :         // get device context state
; 570  :         rc = s_DomainTable[powerDomain].rgDeviceContextState[idx] & pInfo->mask;

  004b8	e59d1020	 ldr         r1, [sp, #0x20]
  004bc	e3a0301c	 mov         r3, #0x1C
  004c0	e0020391	 mul         r2, r1, r3
  004c4	e59f30e0	 ldr         r3, [pc, #0xE0]
  004c8	e0833002	 add         r3, r3, r2
  004cc	e2831010	 add         r1, r3, #0x10
  004d0	e59d2004	 ldr         r2, [sp, #4]
  004d4	e3a03004	 mov         r3, #4
  004d8	e0030392	 mul         r3, r2, r3
  004dc	e0812003	 add         r2, r1, r3
  004e0	e59d3024	 ldr         r3, [sp, #0x24]
  004e4	e2833004	 add         r3, r3, #4
  004e8	e5922000	 ldr         r2, [r2]
  004ec	e5933000	 ldr         r3, [r3]
  004f0	e0023003	 and         r3, r2, r3
  004f4	e58d3000	 str         r3, [sp]
  004f8		 |$LN2@DomainGetD|

; 571  :         }
; 572  : 
; 573  :     // update device context state
; 574  :     if (bSet == TRUE)

  004f8	e59d3028	 ldr         r3, [sp, #0x28]
  004fc	e3530001	 cmp         r3, #1
  00500	1a000019	 bne         |$LN1@DomainGetD|

; 575  :         {
; 576  :         s_DomainTable[powerDomain].rgDeviceContextState[idx] |= pInfo->mask;        

  00504	e59d1020	 ldr         r1, [sp, #0x20]
  00508	e3a0301c	 mov         r3, #0x1C
  0050c	e0020391	 mul         r2, r1, r3
  00510	e59f3094	 ldr         r3, [pc, #0x94]
  00514	e0833002	 add         r3, r3, r2
  00518	e2831010	 add         r1, r3, #0x10
  0051c	e59d2004	 ldr         r2, [sp, #4]
  00520	e3a03004	 mov         r3, #4
  00524	e0030392	 mul         r3, r2, r3
  00528	e0812003	 add         r2, r1, r3
  0052c	e59d3024	 ldr         r3, [sp, #0x24]
  00530	e2833004	 add         r3, r3, #4
  00534	e5922000	 ldr         r2, [r2]
  00538	e5933000	 ldr         r3, [r3]
  0053c	e182e003	 orr         lr, r2, r3
  00540	e59d2004	 ldr         r2, [sp, #4]
  00544	e3a03004	 mov         r3, #4
  00548	e0000392	 mul         r0, r2, r3
  0054c	e59d1020	 ldr         r1, [sp, #0x20]
  00550	e3a0301c	 mov         r3, #0x1C
  00554	e0020391	 mul         r2, r1, r3
  00558	e59f304c	 ldr         r3, [pc, #0x4C]
  0055c	e0833002	 add         r3, r3, r2
  00560	e2833010	 add         r3, r3, #0x10
  00564	e0833000	 add         r3, r3, r0
  00568	e583e000	 str         lr, [r3]
  0056c		 |$LN1@DomainGetD|

; 577  :         }
; 578  :     Unlock(Mutex_Domain);

  0056c	e3a00002	 mov         r0, #2
  00570	eb000000	 bl          Unlock

; 579  :     
; 580  :     return rc != 0;

  00574	e59d3000	 ldr         r3, [sp]
  00578	e3530000	 cmp         r3, #0
  0057c	0a000002	 beq         |$LN6@DomainGetD|
  00580	e3a03001	 mov         r3, #1
  00584	e58d3014	 str         r3, [sp, #0x14]
  00588	ea000001	 b           |$LN7@DomainGetD|
  0058c		 |$LN6@DomainGetD|
  0058c	e3a03000	 mov         r3, #0
  00590	e58d3014	 str         r3, [sp, #0x14]
  00594		 |$LN7@DomainGetD|
  00594	e59d3014	 ldr         r3, [sp, #0x14]
  00598	e58d300c	 str         r3, [sp, #0xC]

; 581  : }

  0059c	e59d000c	 ldr         r0, [sp, #0xC]
  005a0	e28dd018	 add         sp, sp, #0x18
  005a4	e89d6000	 ldmia       sp, {sp, lr}
  005a8	e12fff1e	 bx          lr
  005ac		 |$LN11@DomainGetD|
  005ac		 |$LN12@DomainGetD|
  005ac	00000000	 DCD         |s_DomainTable|
  005b0		 |$M47427|

			 ENDP  ; |DomainGetDeviceContextState|

	EXPORT	|??_C@_1DC@PHJGNBDE@?$AA?9?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CM@KJPIEGMJ@?$AA?$CL?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|DomainInitialize|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|dpCurSettings|

  00018			 AREA	 |.pdata|, PDATA
|$T47441| DCD	|$LN16@DomainInit|
	DCD	0x40008902

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DC@PHJGNBDE@?$AA?9?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "D", 0x0, "o", 0x0, "m", 0x0, "a", 0x0, "i", 0x0, "n"
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a"
	DCB	0x0, "l", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, "(", 0x0, ")"
	DCB	0x0, "=", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@KJPIEGMJ@?$AA?$CL?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "D", 0x0, "o", 0x0, "m", 0x0, "a", 0x0, "i", 0x0, "n"
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a"
	DCB	0x0, "l", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, "(", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  005b0			 AREA	 |.text|, CODE, ARM

  005b0		 |DomainInitialize| PROC

; 586  : {

  005b0		 |$LN16@DomainInit|
  005b0	e92d4010	 stmdb       sp!, {r4, lr}
  005b4	e24dd034	 sub         sp, sp, #0x34
  005b8		 |$M47438|

; 587  :     UINT            i;
; 588  :     BOOL            rc = TRUE;

  005b8	e3a03001	 mov         r3, #1
  005bc	e58d3004	 str         r3, [sp, #4]

; 589  :     UINT            cm_clkstctrl;
; 590  :     UINT            pm_pwstctrl;
; 591  :     UINT            pm_wkdep;
; 592  :     UINT            cm_sleepdep;
; 593  :     OMAP_CM_REGS   *pCmRegs;
; 594  :     OMAP_PRM_REGS  *pPrmRegs;
; 595  :     
; 596  :     
; 597  :     OALMSG(OAL_FUNC, (L"+DomainInitialize()\r\n"));

  005c0	e59f3200	 ldr         r3, [pc, #0x200]
  005c4	e5933440	 ldr         r3, [r3, #0x440]
  005c8	e3130004	 tst         r3, #4
  005cc	0a000004	 beq         |$LN10@DomainInit|
  005d0	e59f01f8	 ldr         r0, [pc, #0x1F8]
  005d4	eb000000	 bl          NKDbgPrintfW
  005d8	e3a03001	 mov         r3, #1
  005dc	e58d3024	 str         r3, [sp, #0x24]
  005e0	ea000001	 b           |$LN11@DomainInit|
  005e4		 |$LN10@DomainInit|
  005e4	e3a03000	 mov         r3, #0
  005e8	e58d3024	 str         r3, [sp, #0x24]
  005ec		 |$LN11@DomainInit|

; 598  : 
; 599  :     for (i = 0; i < POWERDOMAIN_COUNT; ++i)

  005ec	e3a03000	 mov         r3, #0
  005f0	e58d3008	 str         r3, [sp, #8]
  005f4	ea000002	 b           |$LN7@DomainInit|
  005f8		 |$LN6@DomainInit|
  005f8	e59d3008	 ldr         r3, [sp, #8]
  005fc	e2833001	 add         r3, r3, #1
  00600	e58d3008	 str         r3, [sp, #8]
  00604		 |$LN7@DomainInit|
  00604	e59d3008	 ldr         r3, [sp, #8]
  00608	e353000d	 cmp         r3, #0xD
  0060c	2a00005a	 bcs         |$LN5@DomainInit|

; 600  :         {        
; 601  :         pCmRegs = GetCmRegisterSet(i);

  00610	e59d0008	 ldr         r0, [sp, #8]
  00614	eb000000	 bl          GetCmRegisterSet
  00618	e58d0028	 str         r0, [sp, #0x28]
  0061c	e59d3028	 ldr         r3, [sp, #0x28]
  00620	e58d3018	 str         r3, [sp, #0x18]

; 602  :         pPrmRegs = GetPrmRegisterSet(i);

  00624	e59d0008	 ldr         r0, [sp, #8]
  00628	eb000000	 bl          GetPrmRegisterSet
  0062c	e58d002c	 str         r0, [sp, #0x2C]
  00630	e59d302c	 ldr         r3, [sp, #0x2C]
  00634	e58d3014	 str         r3, [sp, #0x14]

; 603  : 
; 604  :         pm_wkdep = 0;

  00638	e3a03000	 mov         r3, #0
  0063c	e58d3010	 str         r3, [sp, #0x10]

; 605  :         if (s_DomainTable[i].ffValidationMask & DOMAIN_UPDATE_WKUPDEP)

  00640	e59d1008	 ldr         r1, [sp, #8]
  00644	e3a0301c	 mov         r3, #0x1C
  00648	e0020391	 mul         r2, r1, r3
  0064c	e59f3178	 ldr         r3, [pc, #0x178]
  00650	e0833002	 add         r3, r3, r2
  00654	e2833004	 add         r3, r3, #4
  00658	e5933000	 ldr         r3, [r3]
  0065c	e3130001	 tst         r3, #1
  00660	0a000003	 beq         |$LN4@DomainInit|

; 606  :             {
; 607  :             pm_wkdep = INREG32(&pPrmRegs->PM_WKDEP_xxx);

  00664	e59d3014	 ldr         r3, [sp, #0x14]
  00668	e28330c8	 add         r3, r3, #0xC8
  0066c	e5933000	 ldr         r3, [r3]
  00670	e58d3010	 str         r3, [sp, #0x10]
  00674		 |$LN4@DomainInit|

; 608  :             }
; 609  : 
; 610  :         cm_sleepdep = 0;

  00674	e3a03000	 mov         r3, #0
  00678	e58d300c	 str         r3, [sp, #0xC]

; 611  :         if (s_DomainTable[i].ffValidationMask & DOMAIN_UPDATE_SLEEPDEP)

  0067c	e59d1008	 ldr         r1, [sp, #8]
  00680	e3a0301c	 mov         r3, #0x1C
  00684	e0020391	 mul         r2, r1, r3
  00688	e59f313c	 ldr         r3, [pc, #0x13C]
  0068c	e0833002	 add         r3, r3, r2
  00690	e2833004	 add         r3, r3, #4
  00694	e5933000	 ldr         r3, [r3]
  00698	e3130002	 tst         r3, #2
  0069c	0a000003	 beq         |$LN3@DomainInit|

; 612  :             {
; 613  :             cm_sleepdep = INREG32(&pCmRegs->CM_SLEEPDEP_xxx);

  006a0	e59d3018	 ldr         r3, [sp, #0x18]
  006a4	e2833044	 add         r3, r3, #0x44
  006a8	e5933000	 ldr         r3, [r3]
  006ac	e58d300c	 str         r3, [sp, #0xC]
  006b0		 |$LN3@DomainInit|

; 614  :             }
; 615  : 
; 616  :         pm_pwstctrl = 0;

  006b0	e3a03000	 mov         r3, #0
  006b4	e58d3000	 str         r3, [sp]

; 617  :         cm_clkstctrl = 0;

  006b8	e3a03000	 mov         r3, #0
  006bc	e58d301c	 str         r3, [sp, #0x1C]

; 618  :         if (s_DomainTable[i].ffValidationMask & DOMAIN_UPDATE_POWERSTATE)

  006c0	e59d1008	 ldr         r1, [sp, #8]
  006c4	e3a0301c	 mov         r3, #0x1C
  006c8	e0020391	 mul         r2, r1, r3
  006cc	e59f30f8	 ldr         r3, [pc, #0xF8]
  006d0	e0833002	 add         r3, r3, r2
  006d4	e2833004	 add         r3, r3, #4
  006d8	e5933000	 ldr         r3, [r3]
  006dc	e3130004	 tst         r3, #4
  006e0	0a000003	 beq         |$LN2@DomainInit|

; 619  :             {
; 620  :             pm_pwstctrl = INREG32(&pPrmRegs->PM_PWSTCTRL_xxx);

  006e4	e59d3014	 ldr         r3, [sp, #0x14]
  006e8	e28330e0	 add         r3, r3, #0xE0
  006ec	e5933000	 ldr         r3, [r3]
  006f0	e58d3000	 str         r3, [sp]
  006f4		 |$LN2@DomainInit|

; 621  :             }
; 622  : 
; 623  :         if (s_DomainTable[i].ffValidationMask & DOMAIN_UPDATE_CLOCKSTATE)

  006f4	e59d1008	 ldr         r1, [sp, #8]
  006f8	e3a0301c	 mov         r3, #0x1C
  006fc	e0020391	 mul         r2, r1, r3
  00700	e59f30c4	 ldr         r3, [pc, #0xC4]
  00704	e0833002	 add         r3, r3, r2
  00708	e2833004	 add         r3, r3, #4
  0070c	e5933000	 ldr         r3, [r3]
  00710	e3130008	 tst         r3, #8
  00714	0a000003	 beq         |$LN1@DomainInit|

; 624  :             {
; 625  :             cm_clkstctrl = INREG32(&pCmRegs->CM_CLKSTCTRL_xxx);

  00718	e59d3018	 ldr         r3, [sp, #0x18]
  0071c	e2833048	 add         r3, r3, #0x48
  00720	e5933000	 ldr         r3, [r3]
  00724	e58d301c	 str         r3, [sp, #0x1C]
  00728		 |$LN1@DomainInit|

; 626  :             }
; 627  : 
; 628  :         _DomainInitialize(s_DomainTable[i].pDomainState, 
; 629  :             pm_pwstctrl, pm_wkdep, cm_sleepdep
; 630  :             );

  00728	e59d300c	 ldr         r3, [sp, #0xC]
  0072c	e59d2010	 ldr         r2, [sp, #0x10]
  00730	e59d1000	 ldr         r1, [sp]
  00734	e59d4008	 ldr         r4, [sp, #8]
  00738	e3a0001c	 mov         r0, #0x1C
  0073c	e00e0094	 mul         lr, r4, r0
  00740	e59f0084	 ldr         r0, [pc, #0x84]
  00744	e080000e	 add         r0, r0, lr
  00748	e2800008	 add         r0, r0, #8
  0074c	e5900000	 ldr         r0, [r0]
  00750	eb000000	 bl          _DomainInitialize

; 631  : 
; 632  :         _PrcmDomainClockInitialize(s_DomainTable[i].pClockStates, 
; 633  :             cm_clkstctrl
; 634  :             );

  00754	e59d101c	 ldr         r1, [sp, #0x1C]
  00758	e59d0008	 ldr         r0, [sp, #8]
  0075c	e3a0301c	 mov         r3, #0x1C
  00760	e0020390	 mul         r2, r0, r3
  00764	e59f3060	 ldr         r3, [pc, #0x60]
  00768	e0833002	 add         r3, r3, r2
  0076c	e283300c	 add         r3, r3, #0xC
  00770	e5930000	 ldr         r0, [r3]
  00774	eb000000	 bl          _PrcmDomainClockInitialize

; 635  :         }

  00778	eaffff9e	 b           |$LN6@DomainInit|
  0077c		 |$LN5@DomainInit|

; 636  : 
; 637  : 
; 638  :     OALMSG(OAL_FUNC, (L"-DomainInitialize()=%d\r\n", rc));

  0077c	e59f3044	 ldr         r3, [pc, #0x44]
  00780	e5933440	 ldr         r3, [r3, #0x440]
  00784	e3130004	 tst         r3, #4
  00788	0a000005	 beq         |$LN12@DomainInit|
  0078c	e59d1004	 ldr         r1, [sp, #4]
  00790	e59f002c	 ldr         r0, [pc, #0x2C]
  00794	eb000000	 bl          NKDbgPrintfW
  00798	e3a03001	 mov         r3, #1
  0079c	e58d3030	 str         r3, [sp, #0x30]
  007a0	ea000001	 b           |$LN13@DomainInit|
  007a4		 |$LN12@DomainInit|
  007a4	e3a03000	 mov         r3, #0
  007a8	e58d3030	 str         r3, [sp, #0x30]
  007ac		 |$LN13@DomainInit|

; 639  :     return rc;    

  007ac	e59d3004	 ldr         r3, [sp, #4]
  007b0	e58d3020	 str         r3, [sp, #0x20]

; 640  : }

  007b4	e59d0020	 ldr         r0, [sp, #0x20]
  007b8	e28dd034	 add         sp, sp, #0x34
  007bc	e8bd4010	 ldmia       sp!, {r4, lr}
  007c0	e12fff1e	 bx          lr
  007c4		 |$LN17@DomainInit|
  007c4		 |$LN18@DomainInit|
  007c4	00000000	 DCD         |??_C@_1DC@PHJGNBDE@?$AA?9?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  007c8		 |$LN19@DomainInit|
  007c8	00000000	 DCD         |dpCurSettings|
  007cc		 |$LN20@DomainInit|
  007cc	00000000	 DCD         |s_DomainTable|
  007d0		 |$LN21@DomainInit|
  007d0	00000000	 DCD         |??_C@_1CM@KJPIEGMJ@?$AA?$CL?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  007d4		 |$M47439|

			 ENDP  ; |DomainInitialize|

	EXPORT	|??_C@_1DE@IEBANBBC@?$AA?9?$AA_?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1LI@HACPIACF@?$AA?$CL?$AA_?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$CI?$AAp?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8@| [ DATA ] ; `string'

  00020			 AREA	 |.pdata|, PDATA
|$T47456| DCD	|$LN10@DomainInit@2|
	DCD	0x40003b04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DE@IEBANBBC@?$AA?9?$AA_?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "_", 0x0, "D", 0x0, "o", 0x0, "m", 0x0, "a", 0x0, "i"
	DCB	0x0, "n", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i"
	DCB	0x0, "a", 0x0, "l", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, "("
	DCB	0x0, ")", 0x0, "=", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1LI@HACPIACF@?$AA?$CL?$AA_?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$CI?$AAp?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8@| DCB "+"
	DCB	0x0, "_", 0x0, "D", 0x0, "o", 0x0, "m", 0x0, "a", 0x0, "i"
	DCB	0x0, "n", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i"
	DCB	0x0, "a", 0x0, "l", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, "("
	DCB	0x0, "p", 0x0, "D", 0x0, "o", 0x0, "m", 0x0, "a", 0x0, "i"
	DCB	0x0, "n", 0x0, "=", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "X", 0x0, ",", 0x0, " ", 0x0, "p", 0x0, "m"
	DCB	0x0, "_", 0x0, "p", 0x0, "w", 0x0, "s", 0x0, "t", 0x0, "c"
	DCB	0x0, "t", 0x0, "r", 0x0, "l", 0x0, "=", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, "p", 0x0, "m"
	DCB	0x0, "_", 0x0, "w", 0x0, "k", 0x0, "d", 0x0, "e", 0x0, "p"
	DCB	0x0, "=", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "X", 0x0, ",", 0x0, " ", 0x0, "c", 0x0, "m", 0x0, "_"
	DCB	0x0, "s", 0x0, "l", 0x0, "e", 0x0, "e", 0x0, "p", 0x0, "d"
	DCB	0x0, "e", 0x0, "p", 0x0, "=", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "8", 0x0, "X", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  007d4			 AREA	 |.text|, CODE, ARM

  007d4		 |_DomainInitialize| PROC

; 285  : {

  007d4		 |$LN10@DomainInit@2|
  007d4	e1a0c00d	 mov         r12, sp
  007d8	e92d000f	 stmdb       sp!, {r0 - r3}
  007dc	e92d5000	 stmdb       sp!, {r12, lr}
  007e0	e24dd010	 sub         sp, sp, #0x10
  007e4		 |$M47453|

; 286  :     BOOL rc = TRUE;

  007e4	e3a03001	 mov         r3, #1
  007e8	e58d3000	 str         r3, [sp]

; 287  :     OALMSG(OAL_FUNC, (L"+_DomainInitialize("
; 288  :         L"pDomain=0x%08X, pm_pwstctrl=0x%08X"
; 289  :         L"pm_wkdep=0x%08X, cm_sleepdep=0x%08X)\r\n", 
; 290  :         pDomain, pm_pwstctrl, cm_sleepdep)
; 291  :         );

  007ec	e59f30c4	 ldr         r3, [pc, #0xC4]
  007f0	e5933440	 ldr         r3, [r3, #0x440]
  007f4	e3130004	 tst         r3, #4
  007f8	0a000007	 beq         |$LN4@DomainInit@2|
  007fc	e59d3024	 ldr         r3, [sp, #0x24]
  00800	e59d201c	 ldr         r2, [sp, #0x1C]
  00804	e59d1018	 ldr         r1, [sp, #0x18]
  00808	e59f00ac	 ldr         r0, [pc, #0xAC]
  0080c	eb000000	 bl          NKDbgPrintfW
  00810	e3a03001	 mov         r3, #1
  00814	e58d3008	 str         r3, [sp, #8]
  00818	ea000001	 b           |$LN5@DomainInit@2|
  0081c		 |$LN4@DomainInit@2|
  0081c	e3a03000	 mov         r3, #0
  00820	e58d3008	 str         r3, [sp, #8]
  00824		 |$LN5@DomainInit@2|

; 292  : 
; 293  :     // all values are normalized and then cached in SDRAM
; 294  :     if (pDomain == NULL) goto cleanUp;

  00824	e59d3018	 ldr         r3, [sp, #0x18]
  00828	e3530000	 cmp         r3, #0
  0082c	1a000000	 bne         |$LN1@DomainInit@2|
  00830	ea00000d	 b           |$cleanUp$46949|
  00834		 |$LN1@DomainInit@2|

; 295  :     
; 296  :     // domain power state
; 297  :     pDomain->powerState = (pm_pwstctrl & POWERSTATE_MASK) >> POWERSTATE_SHIFT;

  00834	e59d301c	 ldr         r3, [sp, #0x1C]
  00838	e2032003	 and         r2, r3, #3
  0083c	e59d3018	 ldr         r3, [sp, #0x18]
  00840	e5832000	 str         r2, [r3]

; 298  : 
; 299  :     // wake and sleep dependencies
; 300  :     pDomain->wakeDependency = (pm_wkdep & WKDEP_MASK) >> WKDEP_SHIFT;

  00844	e59d3020	 ldr         r3, [sp, #0x20]
  00848	e20320ff	 and         r2, r3, #0xFF
  0084c	e59d3018	 ldr         r3, [sp, #0x18]
  00850	e283300c	 add         r3, r3, #0xC
  00854	e5832000	 str         r2, [r3]

; 301  :     pDomain->sleepDependency = (cm_sleepdep & SLEEPDEP_MASK) >> SLEEPDEP_SHIFT;

  00858	e59d3024	 ldr         r3, [sp, #0x24]
  0085c	e20320ff	 and         r2, r3, #0xFF
  00860	e59d3018	 ldr         r3, [sp, #0x18]
  00864	e2833008	 add         r3, r3, #8
  00868	e5832000	 str         r2, [r3]
  0086c		 |$cleanUp$46949|

; 302  : 
; 303  : cleanUp:
; 304  :     OALMSG(OAL_FUNC, (L"-_DomainInitialize()=%d\r\n", rc));

  0086c	e59f3044	 ldr         r3, [pc, #0x44]
  00870	e5933440	 ldr         r3, [r3, #0x440]
  00874	e3130004	 tst         r3, #4
  00878	0a000005	 beq         |$LN6@DomainInit@2|
  0087c	e59d1000	 ldr         r1, [sp]
  00880	e59f002c	 ldr         r0, [pc, #0x2C]
  00884	eb000000	 bl          NKDbgPrintfW
  00888	e3a03001	 mov         r3, #1
  0088c	e58d300c	 str         r3, [sp, #0xC]
  00890	ea000001	 b           |$LN7@DomainInit@2|
  00894		 |$LN6@DomainInit@2|
  00894	e3a03000	 mov         r3, #0
  00898	e58d300c	 str         r3, [sp, #0xC]
  0089c		 |$LN7@DomainInit@2|

; 305  :     return rc;    

  0089c	e59d3000	 ldr         r3, [sp]
  008a0	e58d3004	 str         r3, [sp, #4]

; 306  : }

  008a4	e59d0004	 ldr         r0, [sp, #4]
  008a8	e28dd010	 add         sp, sp, #0x10
  008ac	e89d6000	 ldmia       sp, {sp, lr}
  008b0	e12fff1e	 bx          lr
  008b4		 |$LN11@DomainInit@2|
  008b4		 |$LN12@DomainInit@2|
  008b4	00000000	 DCD         |??_C@_1DE@IEBANBBC@?$AA?9?$AA_?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  008b8		 |$LN13@DomainInit@2|
  008b8	00000000	 DCD         |dpCurSettings|
  008bc		 |$LN14@DomainInit@2|
  008bc	00000000	 DCD         |??_C@_1LI@HACPIACF@?$AA?$CL?$AA_?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$CI?$AAp?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8@|
  008c0		 |$M47454|

			 ENDP  ; |_DomainInitialize|

	EXPORT	|??_C@_1EG@MJBAHCAP@?$AA?9?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAC?$AAl?$AAo?$AAc?$AAk?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IO@GHDCOMKL@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAC?$AAl?$AAo?$AAc?$AAk?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$CI?$AAp?$AAC?$AAl?$AAo@| [ DATA ] ; `string'

  00028			 AREA	 |.pdata|, PDATA
|$T47470| DCD	|$LN13@PrcmDomain@3|
	DCD	0x40004d04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EG@MJBAHCAP@?$AA?9?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAC?$AAl?$AAo?$AAc?$AAk?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd@| DCB "-"
	DCB	0x0, "_", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D"
	DCB	0x0, "o", 0x0, "m", 0x0, "a", 0x0, "i", 0x0, "n", 0x0, "C"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a", 0x0, "l", 0x0, "i"
	DCB	0x0, "z", 0x0, "e", 0x0, "(", 0x0, ")", 0x0, "=", 0x0, "%"
	DCB	0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IO@GHDCOMKL@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAC?$AAl?$AAo?$AAc?$AAk?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$CI?$AAp?$AAC?$AAl?$AAo@| DCB "+"
	DCB	0x0, "_", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D"
	DCB	0x0, "o", 0x0, "m", 0x0, "a", 0x0, "i", 0x0, "n", 0x0, "C"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a", 0x0, "l", 0x0, "i"
	DCB	0x0, "z", 0x0, "e", 0x0, "(", 0x0, "p", 0x0, "C", 0x0, "l"
	DCB	0x0, "o", 0x0, "c", 0x0, "k", 0x0, "S", 0x0, "t", 0x0, "a"
	DCB	0x0, "t", 0x0, "e", 0x0, "s", 0x0, "=", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, ",", 0x0, " "
	DCB	0x0, "c", 0x0, "m", 0x0, "_", 0x0, "c", 0x0, "l", 0x0, "k"
	DCB	0x0, "s", 0x0, "t", 0x0, "c", 0x0, "t", 0x0, "r", 0x0, "l"
	DCB	0x0, "=", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "X", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  008c0			 AREA	 |.text|, CODE, ARM

  008c0		 |_PrcmDomainClockInitialize| PROC

; 382  : {

  008c0		 |$LN13@PrcmDomain@3|
  008c0	e1a0c00d	 mov         r12, sp
  008c4	e92d0003	 stmdb       sp!, {r0, r1}
  008c8	e92d5000	 stmdb       sp!, {r12, lr}
  008cc	e24dd018	 sub         sp, sp, #0x18
  008d0		 |$M47467|

; 383  :     UINT i;
; 384  :     UINT temp;
; 385  :     BOOL rc = TRUE;

  008d0	e3a03001	 mov         r3, #1
  008d4	e58d3000	 str         r3, [sp]

; 386  :     OALMSG(OAL_FUNC, (L"+_PrcmDomainClockInitialize("
; 387  :         L"pClockStates=0x%08X, cm_clkstctrl=0x%08X\r\n", 
; 388  :         pClockStates,  cm_clkstctrl)
; 389  :         );

  008d8	e59f310c	 ldr         r3, [pc, #0x10C]
  008dc	e5933440	 ldr         r3, [r3, #0x440]
  008e0	e3130004	 tst         r3, #4
  008e4	0a000006	 beq         |$LN7@PrcmDomain@3|
  008e8	e59d2024	 ldr         r2, [sp, #0x24]
  008ec	e59d1020	 ldr         r1, [sp, #0x20]
  008f0	e59f00f8	 ldr         r0, [pc, #0xF8]
  008f4	eb000000	 bl          NKDbgPrintfW
  008f8	e3a03001	 mov         r3, #1
  008fc	e58d3010	 str         r3, [sp, #0x10]
  00900	ea000001	 b           |$LN8@PrcmDomain@3|
  00904		 |$LN7@PrcmDomain@3|
  00904	e3a03000	 mov         r3, #0
  00908	e58d3010	 str         r3, [sp, #0x10]
  0090c		 |$LN8@PrcmDomain@3|

; 390  : 
; 391  :     // all values are normalized and then cached in SDRAM
; 392  :     if (pClockStates == NULL) goto cleanUp;

  0090c	e59d3020	 ldr         r3, [sp, #0x20]
  00910	e3530000	 cmp         r3, #0
  00914	1a000000	 bne         |$LN4@PrcmDomain@3|
  00918	ea000020	 b           |$cleanUp$46995|
  0091c		 |$LN4@PrcmDomain@3|

; 393  : 
; 394  :     for (i = 0; i < pClockStates->count; ++i)

  0091c	e3a03000	 mov         r3, #0
  00920	e58d3004	 str         r3, [sp, #4]
  00924	ea000002	 b           |$LN3@PrcmDomain@3|
  00928		 |$LN2@PrcmDomain@3|
  00928	e59d3004	 ldr         r3, [sp, #4]
  0092c	e2833001	 add         r3, r3, #1
  00930	e58d3004	 str         r3, [sp, #4]
  00934		 |$LN3@PrcmDomain@3|
  00934	e59d2004	 ldr         r2, [sp, #4]
  00938	e59d3020	 ldr         r3, [sp, #0x20]
  0093c	e5933000	 ldr         r3, [r3]
  00940	e1520003	 cmp         r2, r3
  00944	2a000015	 bcs         |$LN1@PrcmDomain@3|

; 395  :         {  
; 396  :         temp = cm_clkstctrl >> pClockStates->rgClockDomains[i].clockShift;        

  00948	e59d3020	 ldr         r3, [sp, #0x20]
  0094c	e2831004	 add         r1, r3, #4
  00950	e59d2004	 ldr         r2, [sp, #4]
  00954	e3a0300c	 mov         r3, #0xC
  00958	e0030392	 mul         r3, r2, r3
  0095c	e0813003	 add         r3, r1, r3
  00960	e2833008	 add         r3, r3, #8
  00964	e59d2024	 ldr         r2, [sp, #0x24]
  00968	e5933000	 ldr         r3, [r3]
  0096c	e1a03332	 mov         r3, r2, lsr r3
  00970	e58d3008	 str         r3, [sp, #8]

; 397  :         pClockStates->rgClockDomains[i].clockState = (temp & CLKSTCTRL_MASK) >> CLKSTCTRL_SHIFT; 

  00974	e59d3008	 ldr         r3, [sp, #8]
  00978	e2030003	 and         r0, r3, #3
  0097c	e59d3020	 ldr         r3, [sp, #0x20]
  00980	e2831004	 add         r1, r3, #4
  00984	e59d2004	 ldr         r2, [sp, #4]
  00988	e3a0300c	 mov         r3, #0xC
  0098c	e0030392	 mul         r3, r2, r3
  00990	e0813003	 add         r3, r1, r3
  00994	e2833004	 add         r3, r3, #4
  00998	e5830000	 str         r0, [r3]

; 398  :         }

  0099c	eaffffe1	 b           |$LN2@PrcmDomain@3|
  009a0		 |$LN1@PrcmDomain@3|
  009a0		 |$cleanUp$46995|

; 399  :     
; 400  : cleanUp:
; 401  :     OALMSG(OAL_FUNC, (L"-_PrcmDomainClockInitialize()=%d\r\n", rc));

  009a0	e59f3044	 ldr         r3, [pc, #0x44]
  009a4	e5933440	 ldr         r3, [r3, #0x440]
  009a8	e3130004	 tst         r3, #4
  009ac	0a000005	 beq         |$LN9@PrcmDomain@3|
  009b0	e59d1000	 ldr         r1, [sp]
  009b4	e59f002c	 ldr         r0, [pc, #0x2C]
  009b8	eb000000	 bl          NKDbgPrintfW
  009bc	e3a03001	 mov         r3, #1
  009c0	e58d3014	 str         r3, [sp, #0x14]
  009c4	ea000001	 b           |$LN10@PrcmDomain@3|
  009c8		 |$LN9@PrcmDomain@3|
  009c8	e3a03000	 mov         r3, #0
  009cc	e58d3014	 str         r3, [sp, #0x14]
  009d0		 |$LN10@PrcmDomain@3|

; 402  :     return rc;    

  009d0	e59d3000	 ldr         r3, [sp]
  009d4	e58d300c	 str         r3, [sp, #0xC]

; 403  : }

  009d8	e59d000c	 ldr         r0, [sp, #0xC]
  009dc	e28dd018	 add         sp, sp, #0x18
  009e0	e89d6000	 ldmia       sp, {sp, lr}
  009e4	e12fff1e	 bx          lr
  009e8		 |$LN14@PrcmDomain@3|
  009e8		 |$LN15@PrcmDomain@3|
  009e8	00000000	 DCD         |??_C@_1EG@MJBAHCAP@?$AA?9?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAC?$AAl?$AAo?$AAc?$AAk?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd@|
  009ec		 |$LN16@PrcmDomain@3|
  009ec	00000000	 DCD         |dpCurSettings|
  009f0		 |$LN17@PrcmDomain@3|
  009f0	00000000	 DCD         |??_C@_1IO@GHDCOMKL@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAC?$AAl?$AAo?$AAc?$AAk?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$CI?$AAp?$AAC?$AAl?$AAo@|
  009f4		 |$M47468|

			 ENDP  ; |_PrcmDomainClockInitialize|

	EXPORT	|PrcmRestoreDomain|

  00030			 AREA	 |.pdata|, PDATA
|$T47480| DCD	|$LN9@PrcmRestor|
	DCD	0x40006804
; Function compile flags: /Odtp

  009f4			 AREA	 |.text|, CODE, ARM

  009f4		 |PrcmRestoreDomain| PROC

; 650  : {

  009f4		 |$LN9@PrcmRestor|
  009f4	e1a0c00d	 mov         r12, sp
  009f8	e92d0001	 stmdb       sp!, {r0}
  009fc	e92d5000	 stmdb       sp!, {r12, lr}
  00a00	e24dd02c	 sub         sp, sp, #0x2C
  00a04		 |$M47477|

; 651  :     UINT i;
; 652  :     BOOL rc = TRUE;

  00a04	e3a03001	 mov         r3, #1
  00a08	e58d3004	 str         r3, [sp, #4]

; 653  :     UINT cm_sleepdep;
; 654  :     UINT cm_clkstctrl;   
; 655  :     OMAP_CM_REGS   *pCmRegs;
; 656  :     OMAP_PRM_REGS  *pPrmRegs;
; 657  :     ClockDomainInfo_t  *pClockStates;    
; 658  :     PowerDomainState_t *pDomainState;
; 659  :     
; 660  :     // initialize variables
; 661  :     pCmRegs = GetCmRegisterSet(powerDomain);

  00a0c	e59d0034	 ldr         r0, [sp, #0x34]
  00a10	eb000000	 bl          GetCmRegisterSet
  00a14	e58d0024	 str         r0, [sp, #0x24]
  00a18	e59d3024	 ldr         r3, [sp, #0x24]
  00a1c	e58d3018	 str         r3, [sp, #0x18]

; 662  :     pPrmRegs = GetPrmRegisterSet(powerDomain);

  00a20	e59d0034	 ldr         r0, [sp, #0x34]
  00a24	eb000000	 bl          GetPrmRegisterSet
  00a28	e58d0028	 str         r0, [sp, #0x28]
  00a2c	e59d3028	 ldr         r3, [sp, #0x28]
  00a30	e58d3014	 str         r3, [sp, #0x14]

; 663  :     pClockStates = s_DomainTable[powerDomain].pClockStates;

  00a34	e59d1034	 ldr         r1, [sp, #0x34]
  00a38	e3a0301c	 mov         r3, #0x1C
  00a3c	e0020391	 mul         r2, r1, r3
  00a40	e59f3148	 ldr         r3, [pc, #0x148]
  00a44	e0833002	 add         r3, r3, r2
  00a48	e283300c	 add         r3, r3, #0xC
  00a4c	e5933000	 ldr         r3, [r3]
  00a50	e58d3000	 str         r3, [sp]

; 664  :     pDomainState = s_DomainTable[powerDomain].pDomainState;

  00a54	e59d1034	 ldr         r1, [sp, #0x34]
  00a58	e3a0301c	 mov         r3, #0x1C
  00a5c	e0020391	 mul         r2, r1, r3
  00a60	e59f3128	 ldr         r3, [pc, #0x128]
  00a64	e0833002	 add         r3, r3, r2
  00a68	e2833008	 add         r3, r3, #8
  00a6c	e5933000	 ldr         r3, [r3]
  00a70	e58d3010	 str         r3, [sp, #0x10]

; 665  :         
; 666  :     // restore clk src dividers
; 667  :     _DomainClockRestore(powerDomain);

  00a74	e59d0034	 ldr         r0, [sp, #0x34]
  00a78	eb000000	 bl          _DomainClockRestore

; 668  : 
; 669  :     if (s_DomainTable[powerDomain].ffValidationMask & DOMAIN_UPDATE_SLEEPDEP)

  00a7c	e59d1034	 ldr         r1, [sp, #0x34]
  00a80	e3a0301c	 mov         r3, #0x1C
  00a84	e0020391	 mul         r2, r1, r3
  00a88	e59f3100	 ldr         r3, [pc, #0x100]
  00a8c	e0833002	 add         r3, r3, r2
  00a90	e2833004	 add         r3, r3, #4
  00a94	e5933000	 ldr         r3, [r3]
  00a98	e3130002	 tst         r3, #2
  00a9c	0a00000f	 beq         |$LN4@PrcmRestor|

; 670  :         {
; 671  :         // restore sleep dependencies
; 672  :         cm_sleepdep = INREG32(&pCmRegs->CM_SLEEPDEP_xxx) & ~SLEEPDEP_MASK;

  00aa0	e59d3018	 ldr         r3, [sp, #0x18]
  00aa4	e2833044	 add         r3, r3, #0x44
  00aa8	e5932000	 ldr         r2, [r3]
  00aac	e3e030ff	 mvn         r3, #0xFF
  00ab0	e0023003	 and         r3, r2, r3
  00ab4	e58d300c	 str         r3, [sp, #0xC]

; 673  :         cm_sleepdep |= pDomainState->sleepDependency << SLEEPDEP_SHIFT;

  00ab8	e59d3010	 ldr         r3, [sp, #0x10]
  00abc	e2833008	 add         r3, r3, #8
  00ac0	e59d200c	 ldr         r2, [sp, #0xC]
  00ac4	e5933000	 ldr         r3, [r3]
  00ac8	e1823003	 orr         r3, r2, r3
  00acc	e58d300c	 str         r3, [sp, #0xC]

; 674  :         OUTREG32(&pCmRegs->CM_SLEEPDEP_xxx, cm_sleepdep);

  00ad0	e59d3018	 ldr         r3, [sp, #0x18]
  00ad4	e2832044	 add         r2, r3, #0x44
  00ad8	e59d300c	 ldr         r3, [sp, #0xC]
  00adc	e5823000	 str         r3, [r2]
  00ae0		 |$LN4@PrcmRestor|

; 675  :         }
; 676  : 
; 677  :     // restore clock state
; 678  :     cm_clkstctrl = 0;

  00ae0	e3a03000	 mov         r3, #0
  00ae4	e58d301c	 str         r3, [sp, #0x1C]

; 679  :     for (i = 0; i < pClockStates->count; ++i)

  00ae8	e3a03000	 mov         r3, #0
  00aec	e58d3008	 str         r3, [sp, #8]
  00af0	ea000002	 b           |$LN3@PrcmRestor|
  00af4		 |$LN2@PrcmRestor|
  00af4	e59d3008	 ldr         r3, [sp, #8]
  00af8	e2833001	 add         r3, r3, #1
  00afc	e58d3008	 str         r3, [sp, #8]
  00b00		 |$LN3@PrcmRestor|
  00b00	e59d2008	 ldr         r2, [sp, #8]
  00b04	e59d3000	 ldr         r3, [sp]
  00b08	e5933000	 ldr         r3, [r3]
  00b0c	e1520003	 cmp         r2, r3
  00b10	2a000014	 bcs         |$LN1@PrcmRestor|

; 680  :         {
; 681  :         cm_clkstctrl |= (pClockStates->rgClockDomains[i].clockState << pClockStates->rgClockDomains[i].clockShift) << CLKSTCTRL_SHIFT;

  00b14	e59d3000	 ldr         r3, [sp]
  00b18	e2831004	 add         r1, r3, #4
  00b1c	e59d2008	 ldr         r2, [sp, #8]
  00b20	e3a0300c	 mov         r3, #0xC
  00b24	e0030392	 mul         r3, r2, r3
  00b28	e0813003	 add         r3, r1, r3
  00b2c	e2830004	 add         r0, r3, #4
  00b30	e59d3000	 ldr         r3, [sp]
  00b34	e2831004	 add         r1, r3, #4
  00b38	e59d2008	 ldr         r2, [sp, #8]
  00b3c	e3a0300c	 mov         r3, #0xC
  00b40	e0030392	 mul         r3, r2, r3
  00b44	e0813003	 add         r3, r1, r3
  00b48	e2833008	 add         r3, r3, #8
  00b4c	e5902000	 ldr         r2, [r0]
  00b50	e5933000	 ldr         r3, [r3]
  00b54	e1a02312	 mov         r2, r2, lsl r3
  00b58	e59d301c	 ldr         r3, [sp, #0x1C]
  00b5c	e1833002	 orr         r3, r3, r2
  00b60	e58d301c	 str         r3, [sp, #0x1C]

; 682  :         }

  00b64	eaffffe2	 b           |$LN2@PrcmRestor|
  00b68		 |$LN1@PrcmRestor|

; 683  :     OUTREG32(&pCmRegs->CM_CLKSTCTRL_xxx, cm_clkstctrl);

  00b68	e59d3018	 ldr         r3, [sp, #0x18]
  00b6c	e2832048	 add         r2, r3, #0x48
  00b70	e59d301c	 ldr         r3, [sp, #0x1C]
  00b74	e5823000	 str         r3, [r2]

; 684  : 
; 685  :     return rc;

  00b78	e59d3004	 ldr         r3, [sp, #4]
  00b7c	e58d3020	 str         r3, [sp, #0x20]

; 686  : }

  00b80	e59d0020	 ldr         r0, [sp, #0x20]
  00b84	e28dd02c	 add         sp, sp, #0x2C
  00b88	e89d6000	 ldmia       sp, {sp, lr}
  00b8c	e12fff1e	 bx          lr
  00b90		 |$LN10@PrcmRestor|
  00b90		 |$LN11@PrcmRestor|
  00b90	00000000	 DCD         |s_DomainTable|
  00b94		 |$M47478|

			 ENDP  ; |PrcmRestoreDomain|

	IMPORT	|PrcmClockRestoreDpllState|
	IMPORT	|g_pPrcmCm|
	IMPORT	|s_SrcClockTable|

  00038			 AREA	 |.pdata|, PDATA
|$T47515| DCD	|$LN43@DomainCloc|
	DCD	0x4000de04
; Function compile flags: /Odtp

  00b94			 AREA	 |.text|, CODE, ARM

  00b94		 |_DomainClockRestore| PROC

; 314  : {

  00b94		 |$LN43@DomainCloc|
  00b94	e1a0c00d	 mov         r12, sp
  00b98	e92d0001	 stmdb       sp!, {r0}
  00b9c	e92d5000	 stmdb       sp!, {r12, lr}
  00ba0	e24dd038	 sub         sp, sp, #0x38
  00ba4		 |$M47512|

; 315  :     UINT i;
; 316  :     UINT val;
; 317  :     UINT parentClock;
; 318  :     SrcClockDivisorTable_t *pDivisors;
; 319  : 
; 320  :     extern SrcClockMap s_SrcClockTable;
; 321  : 
; 322  :     switch (powerDomain)

  00ba4	e59d3040	 ldr         r3, [sp, #0x40]
  00ba8	e58d3014	 str         r3, [sp, #0x14]
  00bac	e59d3014	 ldr         r3, [sp, #0x14]
  00bb0	e2433002	 sub         r3, r3, #2
  00bb4	e58d3014	 str         r3, [sp, #0x14]
  00bb8	e59d3014	 ldr         r3, [sp, #0x14]
  00bbc	e3530008	 cmp         r3, #8
  00bc0	8a0000c9	 bhi         |$LN10@DomainCloc|
  00bc4	e59d2014	 ldr         r2, [sp, #0x14]
  00bc8	e1a03102	 mov         r3, r2, lsl #2
  00bcc	e083300f	 add         r3, r3, pc
  00bd0	e5933004	 ldr         r3, [r3, #4]
  00bd4	e08ff003	 add         pc, pc, r3
  00bd8		 |$LN31@DomainCloc|
  00bd8		 |$LN30@DomainCloc|
  00bd8		 |$LN32@DomainCloc|
  00bd8	00000020	 DCD         0x20
  00bdc		 |$LN33@DomainCloc|
  00bdc	00000310	 DCD         0x310
  00be0		 |$LN34@DomainCloc|
  00be0	00000310	 DCD         0x310
  00be4		 |$LN35@DomainCloc|
  00be4	00000310	 DCD         0x310
  00be8		 |$LN36@DomainCloc|
  00be8	000001d8	 DCD         0x1d8
  00bec		 |$LN37@DomainCloc|
  00bec	00000310	 DCD         0x310
  00bf0		 |$LN38@DomainCloc|
  00bf0	00000308	 DCD         0x308
  00bf4		 |$LN39@DomainCloc|
  00bf4	00000224	 DCD         0x224
  00bf8		 |$LN40@DomainCloc|
  00bf8	00000254	 DCD         0x254
  00bfc		 |$LN9@DomainCloc|

; 323  :         {
; 324  :         case POWERDOMAIN_PERIPHERAL:
; 325  :             // build mask
; 326  :             val = s_SrcClockTable[kGPT2_ALWON_FCLK].parentClk == kSYS_CLK ? CLKSEL_GPT2 : 0;

  00bfc	e59f3304	 ldr         r3, [pc, #0x304]
  00c00	e59335dc	 ldr         r3, [r3, #0x5DC]
  00c04	e353000c	 cmp         r3, #0xC
  00c08	1a000002	 bne         |$LN14@DomainCloc|
  00c0c	e3a03001	 mov         r3, #1
  00c10	e58d3018	 str         r3, [sp, #0x18]
  00c14	ea000001	 b           |$LN15@DomainCloc|
  00c18		 |$LN14@DomainCloc|
  00c18	e3a03000	 mov         r3, #0
  00c1c	e58d3018	 str         r3, [sp, #0x18]
  00c20		 |$LN15@DomainCloc|
  00c20	e59d3018	 ldr         r3, [sp, #0x18]
  00c24	e58d3008	 str         r3, [sp, #8]

; 327  :             val |= s_SrcClockTable[kGPT3_ALWON_FCLK].parentClk == kSYS_CLK ? CLKSEL_GPT3 : 0;

  00c28	e59f32d8	 ldr         r3, [pc, #0x2D8]
  00c2c	e59335f0	 ldr         r3, [r3, #0x5F0]
  00c30	e353000c	 cmp         r3, #0xC
  00c34	1a000002	 bne         |$LN16@DomainCloc|
  00c38	e3a03002	 mov         r3, #2
  00c3c	e58d301c	 str         r3, [sp, #0x1C]
  00c40	ea000001	 b           |$LN17@DomainCloc|
  00c44		 |$LN16@DomainCloc|
  00c44	e3a03000	 mov         r3, #0
  00c48	e58d301c	 str         r3, [sp, #0x1C]
  00c4c		 |$LN17@DomainCloc|
  00c4c	e59d2008	 ldr         r2, [sp, #8]
  00c50	e59d301c	 ldr         r3, [sp, #0x1C]
  00c54	e1823003	 orr         r3, r2, r3
  00c58	e58d3008	 str         r3, [sp, #8]

; 328  :             val |= s_SrcClockTable[kGPT4_ALWON_FCLK].parentClk == kSYS_CLK ? CLKSEL_GPT4 : 0;

  00c5c	e59f32a4	 ldr         r3, [pc, #0x2A4]
  00c60	e5933604	 ldr         r3, [r3, #0x604]
  00c64	e353000c	 cmp         r3, #0xC
  00c68	1a000002	 bne         |$LN18@DomainCloc|
  00c6c	e3a03004	 mov         r3, #4
  00c70	e58d3020	 str         r3, [sp, #0x20]
  00c74	ea000001	 b           |$LN19@DomainCloc|
  00c78		 |$LN18@DomainCloc|
  00c78	e3a03000	 mov         r3, #0
  00c7c	e58d3020	 str         r3, [sp, #0x20]
  00c80		 |$LN19@DomainCloc|
  00c80	e59d2008	 ldr         r2, [sp, #8]
  00c84	e59d3020	 ldr         r3, [sp, #0x20]
  00c88	e1823003	 orr         r3, r2, r3
  00c8c	e58d3008	 str         r3, [sp, #8]

; 329  :             val |= s_SrcClockTable[kGPT5_ALWON_FCLK].parentClk == kSYS_CLK ? CLKSEL_GPT5 : 0;

  00c90	e59f3270	 ldr         r3, [pc, #0x270]
  00c94	e5933618	 ldr         r3, [r3, #0x618]
  00c98	e353000c	 cmp         r3, #0xC
  00c9c	1a000002	 bne         |$LN20@DomainCloc|
  00ca0	e3a03008	 mov         r3, #8
  00ca4	e58d3024	 str         r3, [sp, #0x24]
  00ca8	ea000001	 b           |$LN21@DomainCloc|
  00cac		 |$LN20@DomainCloc|
  00cac	e3a03000	 mov         r3, #0
  00cb0	e58d3024	 str         r3, [sp, #0x24]
  00cb4		 |$LN21@DomainCloc|
  00cb4	e59d2008	 ldr         r2, [sp, #8]
  00cb8	e59d3024	 ldr         r3, [sp, #0x24]
  00cbc	e1823003	 orr         r3, r2, r3
  00cc0	e58d3008	 str         r3, [sp, #8]

; 330  :             val |= s_SrcClockTable[kGPT6_ALWON_FCLK].parentClk == kSYS_CLK ? CLKSEL_GPT6 : 0;

  00cc4	e59f323c	 ldr         r3, [pc, #0x23C]
  00cc8	e593362c	 ldr         r3, [r3, #0x62C]
  00ccc	e353000c	 cmp         r3, #0xC
  00cd0	1a000002	 bne         |$LN22@DomainCloc|
  00cd4	e3a03010	 mov         r3, #0x10
  00cd8	e58d3028	 str         r3, [sp, #0x28]
  00cdc	ea000001	 b           |$LN23@DomainCloc|
  00ce0		 |$LN22@DomainCloc|
  00ce0	e3a03000	 mov         r3, #0
  00ce4	e58d3028	 str         r3, [sp, #0x28]
  00ce8		 |$LN23@DomainCloc|
  00ce8	e59d2008	 ldr         r2, [sp, #8]
  00cec	e59d3028	 ldr         r3, [sp, #0x28]
  00cf0	e1823003	 orr         r3, r2, r3
  00cf4	e58d3008	 str         r3, [sp, #8]

; 331  :             val |= s_SrcClockTable[kGPT7_ALWON_FCLK].parentClk == kSYS_CLK ? CLKSEL_GPT7 : 0;

  00cf8	e59f3208	 ldr         r3, [pc, #0x208]
  00cfc	e5933640	 ldr         r3, [r3, #0x640]
  00d00	e353000c	 cmp         r3, #0xC
  00d04	1a000002	 bne         |$LN24@DomainCloc|
  00d08	e3a03020	 mov         r3, #0x20
  00d0c	e58d302c	 str         r3, [sp, #0x2C]
  00d10	ea000001	 b           |$LN25@DomainCloc|
  00d14		 |$LN24@DomainCloc|
  00d14	e3a03000	 mov         r3, #0
  00d18	e58d302c	 str         r3, [sp, #0x2C]
  00d1c		 |$LN25@DomainCloc|
  00d1c	e59d2008	 ldr         r2, [sp, #8]
  00d20	e59d302c	 ldr         r3, [sp, #0x2C]
  00d24	e1823003	 orr         r3, r2, r3
  00d28	e58d3008	 str         r3, [sp, #8]

; 332  :             val |= s_SrcClockTable[kGPT8_ALWON_FCLK].parentClk == kSYS_CLK ? CLKSEL_GPT8 : 0;

  00d2c	e59f31d4	 ldr         r3, [pc, #0x1D4]
  00d30	e5933654	 ldr         r3, [r3, #0x654]
  00d34	e353000c	 cmp         r3, #0xC
  00d38	1a000002	 bne         |$LN26@DomainCloc|
  00d3c	e3a03040	 mov         r3, #0x40
  00d40	e58d3030	 str         r3, [sp, #0x30]
  00d44	ea000001	 b           |$LN27@DomainCloc|
  00d48		 |$LN26@DomainCloc|
  00d48	e3a03000	 mov         r3, #0
  00d4c	e58d3030	 str         r3, [sp, #0x30]
  00d50		 |$LN27@DomainCloc|
  00d50	e59d2008	 ldr         r2, [sp, #8]
  00d54	e59d3030	 ldr         r3, [sp, #0x30]
  00d58	e1823003	 orr         r3, r2, r3
  00d5c	e58d3008	 str         r3, [sp, #8]

; 333  :             val |= s_SrcClockTable[kGPT9_ALWON_FCLK].parentClk == kSYS_CLK ? CLKSEL_GPT9 : 0;

  00d60	e59f31a0	 ldr         r3, [pc, #0x1A0]
  00d64	e5933668	 ldr         r3, [r3, #0x668]
  00d68	e353000c	 cmp         r3, #0xC
  00d6c	1a000002	 bne         |$LN28@DomainCloc|
  00d70	e3a03080	 mov         r3, #0x80
  00d74	e58d3034	 str         r3, [sp, #0x34]
  00d78	ea000001	 b           |$LN29@DomainCloc|
  00d7c		 |$LN28@DomainCloc|
  00d7c	e3a03000	 mov         r3, #0
  00d80	e58d3034	 str         r3, [sp, #0x34]
  00d84		 |$LN29@DomainCloc|
  00d84	e59d2008	 ldr         r2, [sp, #8]
  00d88	e59d3034	 ldr         r3, [sp, #0x34]
  00d8c	e1823003	 orr         r3, r2, r3
  00d90	e58d3008	 str         r3, [sp, #8]

; 334  :             OUTREG32(&g_pPrcmCm->pOMAP_PER_CM->CM_CLKSEL_PER, val);

  00d94	e59f3168	 ldr         r3, [pc, #0x168]
  00d98	e5933000	 ldr         r3, [r3]
  00d9c	e2833008	 add         r3, r3, #8
  00da0	e5933000	 ldr         r3, [r3]
  00da4	e2832040	 add         r2, r3, #0x40
  00da8	e59d3008	 ldr         r3, [sp, #8]
  00dac	e5823000	 str         r3, [r2]

; 335  :             break;

  00db0	ea00004d	 b           |$LN10@DomainCloc|
  00db4		 |$LN8@DomainCloc|

; 336  : 
; 337  :         case POWERDOMAIN_DSS:
; 338  :             // write to hw
; 339  :             OUTREG32(&g_pPrcmCm->pOMAP_DSS_CM->CM_CLKSEL_DSS,
; 340  :                 CLKSEL_DSS1(s_SrcClockTable[kDSS1_ALWON_FCLK].pDivisors->SourceClock[0].divisor) |
; 341  :                 CLKSEL_TV(s_SrcClockTable[k54M_FCLK].pDivisors->SourceClock[0].divisor));

  00db4	e59f314c	 ldr         r3, [pc, #0x14C]
  00db8	e5933098	 ldr         r3, [r3, #0x98]
  00dbc	e2833008	 add         r3, r3, #8
  00dc0	e5933000	 ldr         r3, [r3]
  00dc4	e203201f	 and         r2, r3, #0x1F
  00dc8	e59f3138	 ldr         r3, [pc, #0x138]
  00dcc	e59335ac	 ldr         r3, [r3, #0x5AC]
  00dd0	e2833008	 add         r3, r3, #8
  00dd4	e5933000	 ldr         r3, [r3]
  00dd8	e203301f	 and         r3, r3, #0x1F
  00ddc	e1a03403	 mov         r3, r3, lsl #8
  00de0	e1822003	 orr         r2, r2, r3
  00de4	e59f3118	 ldr         r3, [pc, #0x118]
  00de8	e5933000	 ldr         r3, [r3]
  00dec	e2833018	 add         r3, r3, #0x18
  00df0	e5933000	 ldr         r3, [r3]
  00df4	e2833040	 add         r3, r3, #0x40
  00df8	e5832000	 str         r2, [r3]

; 342  :             break;

  00dfc	ea00003a	 b           |$LN10@DomainCloc|
  00e00		 |$LN7@DomainCloc|

; 343  :  
; 344  :         case POWERDOMAIN_CAMERA:
; 345  :             // write to hw
; 346  :             OUTREG32(&g_pPrcmCm->pOMAP_CAM_CM->CM_CLKSEL_CAM, 
; 347  :                 CLKSEL_CAM(s_SrcClockTable[kCAM_MCLK].pDivisors->SourceClock[0].divisor)
; 348  :                 );

  00e00	e59f3100	 ldr         r3, [pc, #0x100]
  00e04	e59330ac	 ldr         r3, [r3, #0xAC]
  00e08	e2833008	 add         r3, r3, #8
  00e0c	e5933000	 ldr         r3, [r3]
  00e10	e203201f	 and         r2, r3, #0x1F
  00e14	e59f30e8	 ldr         r3, [pc, #0xE8]
  00e18	e5933000	 ldr         r3, [r3]
  00e1c	e2833024	 add         r3, r3, #0x24
  00e20	e5933000	 ldr         r3, [r3]
  00e24	e2833040	 add         r3, r3, #0x40
  00e28	e5832000	 str         r2, [r3]

; 349  :             break;

  00e2c	ea00002e	 b           |$LN10@DomainCloc|
  00e30		 |$LN6@DomainCloc|

; 350  : 
; 351  :         case POWERDOMAIN_SGX:
; 352  :             // verify parent clock is valid       
; 353  :             pDivisors = s_SrcClockTable[kSGX_FCLK].pDivisors;

  00e30	e59f30d0	 ldr         r3, [pc, #0xD0]
  00e34	e59335c0	 ldr         r3, [r3, #0x5C0]
  00e38	e58d3004	 str         r3, [sp, #4]

; 354  :             parentClock = s_SrcClockTable[kSGX_FCLK].parentClk;

  00e3c	e59f30c4	 ldr         r3, [pc, #0xC4]
  00e40	e59335b4	 ldr         r3, [r3, #0x5B4]
  00e44	e58d300c	 str         r3, [sp, #0xC]

; 355  :             for (i = 0; i < pDivisors->count; ++i)

  00e48	e3a03000	 mov         r3, #0
  00e4c	e58d3000	 str         r3, [sp]
  00e50	ea000002	 b           |$LN5@DomainCloc|
  00e54		 |$LN4@DomainCloc|
  00e54	e59d3000	 ldr         r3, [sp]
  00e58	e2833001	 add         r3, r3, #1
  00e5c	e58d3000	 str         r3, [sp]
  00e60		 |$LN5@DomainCloc|
  00e60	e59d2000	 ldr         r2, [sp]
  00e64	e59d3004	 ldr         r3, [sp, #4]
  00e68	e5933000	 ldr         r3, [r3]
  00e6c	e1520003	 cmp         r2, r3
  00e70	2a00001a	 bcs         |$LN3@DomainCloc|

; 356  :                 {
; 357  :                 if (parentClock == pDivisors->SourceClock[i].id)

  00e74	e59d3004	 ldr         r3, [sp, #4]
  00e78	e2831004	 add         r1, r3, #4
  00e7c	e59d2000	 ldr         r2, [sp]
  00e80	e3a03008	 mov         r3, #8
  00e84	e0030392	 mul         r3, r2, r3
  00e88	e0813003	 add         r3, r1, r3
  00e8c	e59d200c	 ldr         r2, [sp, #0xC]
  00e90	e5933000	 ldr         r3, [r3]
  00e94	e1520003	 cmp         r2, r3
  00e98	1a00000f	 bne         |$LN2@DomainCloc|

; 358  :                     {
; 359  :                     // write to hw
; 360  :                     OUTREG32(&g_pPrcmCm->pOMAP_SGX_CM->CM_CLKSEL_SGX, 
; 361  :                         CLKSEL_SGX(pDivisors->SourceClock[i].divisor)
; 362  :                         );

  00e9c	e59d3004	 ldr         r3, [sp, #4]
  00ea0	e2831004	 add         r1, r3, #4
  00ea4	e59d2000	 ldr         r2, [sp]
  00ea8	e3a03008	 mov         r3, #8
  00eac	e0030392	 mul         r3, r2, r3
  00eb0	e0813003	 add         r3, r1, r3
  00eb4	e2833004	 add         r3, r3, #4
  00eb8	e5933000	 ldr         r3, [r3]
  00ebc	e2032007	 and         r2, r3, #7
  00ec0	e59f303c	 ldr         r3, [pc, #0x3C]
  00ec4	e5933000	 ldr         r3, [r3]
  00ec8	e2833028	 add         r3, r3, #0x28
  00ecc	e5933000	 ldr         r3, [r3]
  00ed0	e2833040	 add         r3, r3, #0x40
  00ed4	e5832000	 str         r2, [r3]

; 363  :                     break;

  00ed8	ea000000	 b           |$LN3@DomainCloc|
  00edc		 |$LN2@DomainCloc|

; 364  :                     }
; 365  :                 }

  00edc	eaffffdc	 b           |$LN4@DomainCloc|
  00ee0		 |$LN3@DomainCloc|

; 366  :             break;

  00ee0	ea000001	 b           |$LN10@DomainCloc|
  00ee4		 |$LN1@DomainCloc|

; 367  :         case POWERDOMAIN_IVA2:
; 368  :             PrcmClockRestoreDpllState(kDPLL2);

  00ee4	e3a00001	 mov         r0, #1
  00ee8	eb000000	 bl          PrcmClockRestoreDpllState
  00eec		 |$LN10@DomainCloc|

; 369  :            break;
; 370  :         }
; 371  : 
; 372  :     return TRUE;

  00eec	e3a03001	 mov         r3, #1
  00ef0	e58d3010	 str         r3, [sp, #0x10]

; 373  : }

  00ef4	e59d0010	 ldr         r0, [sp, #0x10]
  00ef8	e28dd038	 add         sp, sp, #0x38
  00efc	e89d6000	 ldmia       sp, {sp, lr}
  00f00	e12fff1e	 bx          lr
  00f04		 |$LN44@DomainCloc|
  00f04		 |$LN45@DomainCloc|
  00f04	00000000	 DCD         |g_pPrcmCm|
  00f08		 |$LN46@DomainCloc|
  00f08	00000000	 DCD         |s_SrcClockTable|
  00f0c		 |$M47513|

			 ENDP  ; |_DomainClockRestore|

	EXPORT	|??_C@_1EM@KMAAEICN@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAW?$AAa?$AAk?$AAe?$AAu?$AAp?$AAD?$AAe?$AAp?$AAe?$AAn?$AAd?$AAe?$AAn?$AAc?$AAy?$AA?$CI?$AA?$CJ@| [ DATA ] ; `string'
	EXPORT	|??_C@_1KE@GFMBGEDA@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAW?$AAa?$AAk?$AAe?$AAu?$AAp?$AAD?$AAe?$AAp?$AAe?$AAn?$AAd?$AAe?$AAn?$AAc?$AAy?$AA?$CI?$AAp@| [ DATA ] ; `string'
	EXPORT	|PrcmDomainSetWakeupDependency|

  00040			 AREA	 |.pdata|, PDATA
|$T47528| DCD	|$LN16@PrcmDomain@4|
	DCD	0x40007104

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EM@KMAAEICN@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAW?$AAa?$AAk?$AAe?$AAu?$AAp?$AAD?$AAe?$AAp?$AAe?$AAn?$AAd?$AAe?$AAn?$AAc?$AAy?$AA?$CI?$AA?$CJ@| DCB "-"
	DCB	0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D", 0x0, "o"
	DCB	0x0, "m", 0x0, "a", 0x0, "i", 0x0, "n", 0x0, "S", 0x0, "e"
	DCB	0x0, "t", 0x0, "W", 0x0, "a", 0x0, "k", 0x0, "e", 0x0, "u"
	DCB	0x0, "p", 0x0, "D", 0x0, "e", 0x0, "p", 0x0, "e", 0x0, "n"
	DCB	0x0, "d", 0x0, "e", 0x0, "n", 0x0, "c", 0x0, "y", 0x0, "("
	DCB	0x0, ")", 0x0, "=", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KE@GFMBGEDA@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAW?$AAa?$AAk?$AAe?$AAu?$AAp?$AAD?$AAe?$AAp?$AAe?$AAn?$AAd?$AAe?$AAn?$AAc?$AAy?$AA?$CI?$AAp@| DCB "+"
	DCB	0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D", 0x0, "o"
	DCB	0x0, "m", 0x0, "a", 0x0, "i", 0x0, "n", 0x0, "S", 0x0, "e"
	DCB	0x0, "t", 0x0, "W", 0x0, "a", 0x0, "k", 0x0, "e", 0x0, "u"
	DCB	0x0, "p", 0x0, "D", 0x0, "e", 0x0, "p", 0x0, "e", 0x0, "n"
	DCB	0x0, "d", 0x0, "e", 0x0, "n", 0x0, "c", 0x0, "y", 0x0, "("
	DCB	0x0, "p", 0x0, "o", 0x0, "w", 0x0, "e", 0x0, "r", 0x0, "D"
	DCB	0x0, "o", 0x0, "m", 0x0, "a", 0x0, "i", 0x0, "n", 0x0, "="
	DCB	0x0, "%", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "f", 0x0, "f"
	DCB	0x0, "D", 0x0, "e", 0x0, "p", 0x0, "e", 0x0, "n", 0x0, "d"
	DCB	0x0, "e", 0x0, "n", 0x0, "c", 0x0, "y", 0x0, "=", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, ","
	DCB	0x0, " ", 0x0, "b", 0x0, "E", 0x0, "n", 0x0, "a", 0x0, "b"
	DCB	0x0, "l", 0x0, "e", 0x0, "=", 0x0, "%", 0x0, "d", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  00f0c			 AREA	 |.text|, CODE, ARM

  00f0c		 |PrcmDomainSetWakeupDependency| PROC

; 695  : {

  00f0c		 |$LN16@PrcmDomain@4|
  00f0c	e1a0c00d	 mov         r12, sp
  00f10	e92d0007	 stmdb       sp!, {r0 - r2}
  00f14	e92d5000	 stmdb       sp!, {r12, lr}
  00f18	e24dd018	 sub         sp, sp, #0x18
  00f1c		 |$M47525|

; 696  :     BOOL rc = FALSE;

  00f1c	e3a03000	 mov         r3, #0
  00f20	e58d3000	 str         r3, [sp]

; 697  :     PowerDomainState_t *pDomainState;
; 698  :     if (!g_bSingleThreaded)

  00f24	e59f3198	 ldr         r3, [pc, #0x198]
  00f28	e5933000	 ldr         r3, [r3]
  00f2c	e3530000	 cmp         r3, #0
  00f30	1a00000d	 bne         |$LN7@PrcmDomain@4|

; 699  :         OALMSG(OAL_FUNC, (L"+PrcmDomainSetWakeupDependency"
; 700  :             L"(powerDomain=%d, ffDependency=0x%08X, bEnable=%d)\r\n", 
; 701  :             powerDomain, ffDependency, bEnable));

  00f34	e59f3184	 ldr         r3, [pc, #0x184]
  00f38	e5933440	 ldr         r3, [r3, #0x440]
  00f3c	e3130004	 tst         r3, #4
  00f40	0a000007	 beq         |$LN10@PrcmDomain@4|
  00f44	e59d3028	 ldr         r3, [sp, #0x28]
  00f48	e59d2024	 ldr         r2, [sp, #0x24]
  00f4c	e59d1020	 ldr         r1, [sp, #0x20]
  00f50	e59f0174	 ldr         r0, [pc, #0x174]
  00f54	eb000000	 bl          NKDbgPrintfW
  00f58	e3a03001	 mov         r3, #1
  00f5c	e58d300c	 str         r3, [sp, #0xC]
  00f60	ea000001	 b           |$LN11@PrcmDomain@4|
  00f64		 |$LN10@PrcmDomain@4|
  00f64	e3a03000	 mov         r3, #0
  00f68	e58d300c	 str         r3, [sp, #0xC]
  00f6c		 |$LN11@PrcmDomain@4|
  00f6c		 |$LN7@PrcmDomain@4|

; 702  :     
; 703  :     if (powerDomain >= POWERDOMAIN_COUNT) goto cleanUp;

  00f6c	e59d3020	 ldr         r3, [sp, #0x20]
  00f70	e353000d	 cmp         r3, #0xD
  00f74	3a000000	 bcc         |$LN6@PrcmDomain@4|
  00f78	ea000039	 b           |$cleanUp$47137|
  00f7c		 |$LN6@PrcmDomain@4|

; 704  :     if ((s_DomainTable[powerDomain].ffValidationMask & DOMAIN_UPDATE_WKUPDEP) == 0) goto cleanUp;

  00f7c	e59d1020	 ldr         r1, [sp, #0x20]
  00f80	e3a0301c	 mov         r3, #0x1C
  00f84	e0020391	 mul         r2, r1, r3
  00f88	e59f3138	 ldr         r3, [pc, #0x138]
  00f8c	e0833002	 add         r3, r3, r2
  00f90	e2833004	 add         r3, r3, #4
  00f94	e5933000	 ldr         r3, [r3]
  00f98	e3130001	 tst         r3, #1
  00f9c	1a000000	 bne         |$LN5@PrcmDomain@4|
  00fa0	ea00002f	 b           |$cleanUp$47137|
  00fa4		 |$LN5@PrcmDomain@4|

; 705  : 
; 706  :     // update internal state information 
; 707  :     pDomainState = s_DomainTable[powerDomain].pDomainState;

  00fa4	e59d1020	 ldr         r1, [sp, #0x20]
  00fa8	e3a0301c	 mov         r3, #0x1C
  00fac	e0020391	 mul         r2, r1, r3
  00fb0	e59f3110	 ldr         r3, [pc, #0x110]
  00fb4	e0833002	 add         r3, r3, r2
  00fb8	e2833008	 add         r3, r3, #8
  00fbc	e5933000	 ldr         r3, [r3]
  00fc0	e58d3004	 str         r3, [sp, #4]

; 708  :     if (pDomainState == NULL) goto cleanUp;

  00fc4	e59d3004	 ldr         r3, [sp, #4]
  00fc8	e3530000	 cmp         r3, #0
  00fcc	1a000000	 bne         |$LN4@PrcmDomain@4|
  00fd0	ea000023	 b           |$cleanUp$47137|
  00fd4		 |$LN4@PrcmDomain@4|

; 709  : 
; 710  :     Lock(Mutex_Domain);

  00fd4	e3a00002	 mov         r0, #2
  00fd8	eb000000	 bl          Lock

; 711  :     ffDependency &= WKDEP_MASK;

  00fdc	e59d3024	 ldr         r3, [sp, #0x24]
  00fe0	e20330ff	 and         r3, r3, #0xFF
  00fe4	e58d3024	 str         r3, [sp, #0x24]

; 712  :     ffDependency >>= WKDEP_SHIFT;

  00fe8	e59d3024	 ldr         r3, [sp, #0x24]
  00fec	e58d3024	 str         r3, [sp, #0x24]

; 713  :     if (bEnable != FALSE)

  00ff0	e59d3028	 ldr         r3, [sp, #0x28]
  00ff4	e3530000	 cmp         r3, #0
  00ff8	0a000008	 beq         |$LN3@PrcmDomain@4|

; 714  :         {
; 715  :         pDomainState->wakeDependency |= ffDependency; 

  00ffc	e59d3004	 ldr         r3, [sp, #4]
  01000	e283300c	 add         r3, r3, #0xC
  01004	e5932000	 ldr         r2, [r3]
  01008	e59d3024	 ldr         r3, [sp, #0x24]
  0100c	e1822003	 orr         r2, r2, r3
  01010	e59d3004	 ldr         r3, [sp, #4]
  01014	e283300c	 add         r3, r3, #0xC
  01018	e5832000	 str         r2, [r3]

; 716  :         }
; 717  :     else

  0101c	ea000008	 b           |$LN2@PrcmDomain@4|
  01020		 |$LN3@PrcmDomain@4|

; 718  :         {
; 719  :         pDomainState->wakeDependency &= ~ffDependency; 

  01020	e59d3004	 ldr         r3, [sp, #4]
  01024	e283100c	 add         r1, r3, #0xC
  01028	e59d3024	 ldr         r3, [sp, #0x24]
  0102c	e1e02003	 mvn         r2, r3
  01030	e5913000	 ldr         r3, [r1]
  01034	e0032002	 and         r2, r3, r2
  01038	e59d3004	 ldr         r3, [sp, #4]
  0103c	e283300c	 add         r3, r3, #0xC
  01040	e5832000	 str         r2, [r3]
  01044		 |$LN2@PrcmDomain@4|

; 720  :         }
; 721  : 
; 722  :     rc = _PrcmDomainHwUpdate(powerDomain, DOMAIN_UPDATE_WKUPDEP);

  01044	e3a01001	 mov         r1, #1
  01048	e59d0020	 ldr         r0, [sp, #0x20]
  0104c	eb000000	 bl          _PrcmDomainHwUpdate
  01050	e58d0010	 str         r0, [sp, #0x10]
  01054	e59d3010	 ldr         r3, [sp, #0x10]
  01058	e58d3000	 str         r3, [sp]

; 723  :     Unlock(Mutex_Domain);

  0105c	e3a00002	 mov         r0, #2
  01060	eb000000	 bl          Unlock
  01064		 |$cleanUp$47137|

; 724  :     
; 725  : cleanUp:        
; 726  :     if (!g_bSingleThreaded)

  01064	e59f3058	 ldr         r3, [pc, #0x58]
  01068	e5933000	 ldr         r3, [r3]
  0106c	e3530000	 cmp         r3, #0
  01070	1a00000b	 bne         |$LN1@PrcmDomain@4|

; 727  :         OALMSG(OAL_FUNC, (L"-PrcmDomainSetWakeupDependency()=%d\r\n", rc));

  01074	e59f3044	 ldr         r3, [pc, #0x44]
  01078	e5933440	 ldr         r3, [r3, #0x440]
  0107c	e3130004	 tst         r3, #4
  01080	0a000005	 beq         |$LN12@PrcmDomain@4|
  01084	e59d1000	 ldr         r1, [sp]
  01088	e59f002c	 ldr         r0, [pc, #0x2C]
  0108c	eb000000	 bl          NKDbgPrintfW
  01090	e3a03001	 mov         r3, #1
  01094	e58d3014	 str         r3, [sp, #0x14]
  01098	ea000001	 b           |$LN13@PrcmDomain@4|
  0109c		 |$LN12@PrcmDomain@4|
  0109c	e3a03000	 mov         r3, #0
  010a0	e58d3014	 str         r3, [sp, #0x14]
  010a4		 |$LN13@PrcmDomain@4|
  010a4		 |$LN1@PrcmDomain@4|

; 728  :     return rc;

  010a4	e59d3000	 ldr         r3, [sp]
  010a8	e58d3008	 str         r3, [sp, #8]

; 729  : }

  010ac	e59d0008	 ldr         r0, [sp, #8]
  010b0	e28dd018	 add         sp, sp, #0x18
  010b4	e89d6000	 ldmia       sp, {sp, lr}
  010b8	e12fff1e	 bx          lr
  010bc		 |$LN17@PrcmDomain@4|
  010bc		 |$LN18@PrcmDomain@4|
  010bc	00000000	 DCD         |??_C@_1EM@KMAAEICN@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAW?$AAa?$AAk?$AAe?$AAu?$AAp?$AAD?$AAe?$AAp?$AAe?$AAn?$AAd?$AAe?$AAn?$AAc?$AAy?$AA?$CI?$AA?$CJ@|
  010c0		 |$LN19@PrcmDomain@4|
  010c0	00000000	 DCD         |dpCurSettings|
  010c4		 |$LN20@PrcmDomain@4|
  010c4	00000000	 DCD         |g_bSingleThreaded|
  010c8		 |$LN21@PrcmDomain@4|
  010c8	00000000	 DCD         |s_DomainTable|
  010cc		 |$LN22@PrcmDomain@4|
  010cc	00000000	 DCD         |??_C@_1KE@GFMBGEDA@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAW?$AAa?$AAk?$AAe?$AAu?$AAp?$AAD?$AAe?$AAp?$AAe?$AAn?$AAd?$AAe?$AAn?$AAc?$AAy?$AA?$CI?$AAp@|
  010d0		 |$M47526|

			 ENDP  ; |PrcmDomainSetWakeupDependency|

	EXPORT	|??_C@_1EK@HCAJMEHB@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAS?$AAl?$AAe?$AAe?$AAp?$AAD?$AAe?$AAp?$AAe?$AAn?$AAd?$AAe?$AAn?$AAc?$AAy?$AA?$CI?$AA?$CJ?$AA?$DN@| [ DATA ] ; `string'
	EXPORT	|??_C@_1KC@MCEKLACC@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAS?$AAl?$AAe?$AAe?$AAp?$AAD?$AAe?$AAp?$AAe?$AAn?$AAd?$AAe?$AAn?$AAc?$AAy?$AA?$CI?$AAp?$AAo@| [ DATA ] ; `string'
	EXPORT	|PrcmDomainSetSleepDependency|

  00048			 AREA	 |.pdata|, PDATA
|$T47544| DCD	|$LN14@PrcmDomain@5|
	DCD	0x40006804

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EK@HCAJMEHB@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAS?$AAl?$AAe?$AAe?$AAp?$AAD?$AAe?$AAp?$AAe?$AAn?$AAd?$AAe?$AAn?$AAc?$AAy?$AA?$CI?$AA?$CJ?$AA?$DN@| DCB "-"
	DCB	0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D", 0x0, "o"
	DCB	0x0, "m", 0x0, "a", 0x0, "i", 0x0, "n", 0x0, "S", 0x0, "e"
	DCB	0x0, "t", 0x0, "S", 0x0, "l", 0x0, "e", 0x0, "e", 0x0, "p"
	DCB	0x0, "D", 0x0, "e", 0x0, "p", 0x0, "e", 0x0, "n", 0x0, "d"
	DCB	0x0, "e", 0x0, "n", 0x0, "c", 0x0, "y", 0x0, "(", 0x0, ")"
	DCB	0x0, "=", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KC@MCEKLACC@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAS?$AAl?$AAe?$AAe?$AAp?$AAD?$AAe?$AAp?$AAe?$AAn?$AAd?$AAe?$AAn?$AAc?$AAy?$AA?$CI?$AAp?$AAo@| DCB "+"
	DCB	0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D", 0x0, "o"
	DCB	0x0, "m", 0x0, "a", 0x0, "i", 0x0, "n", 0x0, "S", 0x0, "e"
	DCB	0x0, "t", 0x0, "S", 0x0, "l", 0x0, "e", 0x0, "e", 0x0, "p"
	DCB	0x0, "D", 0x0, "e", 0x0, "p", 0x0, "e", 0x0, "n", 0x0, "d"
	DCB	0x0, "e", 0x0, "n", 0x0, "c", 0x0, "y", 0x0, "(", 0x0, "p"
	DCB	0x0, "o", 0x0, "w", 0x0, "e", 0x0, "r", 0x0, "D", 0x0, "o"
	DCB	0x0, "m", 0x0, "a", 0x0, "i", 0x0, "n", 0x0, "=", 0x0, "%"
	DCB	0x0, "d", 0x0, ",", 0x0, " ", 0x0, "f", 0x0, "f", 0x0, "D"
	DCB	0x0, "e", 0x0, "p", 0x0, "e", 0x0, "n", 0x0, "d", 0x0, "e"
	DCB	0x0, "n", 0x0, "c", 0x0, "y", 0x0, "=", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, ",", 0x0, " "
	DCB	0x0, "b", 0x0, "E", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l"
	DCB	0x0, "e", 0x0, "=", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  010d0			 AREA	 |.text|, CODE, ARM

  010d0		 |PrcmDomainSetSleepDependency| PROC

; 738  : {

  010d0		 |$LN14@PrcmDomain@5|
  010d0	e1a0c00d	 mov         r12, sp
  010d4	e92d0007	 stmdb       sp!, {r0 - r2}
  010d8	e92d5000	 stmdb       sp!, {r12, lr}
  010dc	e24dd018	 sub         sp, sp, #0x18
  010e0		 |$M47541|

; 739  :     BOOL rc = FALSE;

  010e0	e3a03000	 mov         r3, #0
  010e4	e58d3000	 str         r3, [sp]

; 740  :     PowerDomainState_t *pDomainState;
; 741  :     OALMSG(OAL_FUNC, (L"+PrcmDomainSetSleepDependency"
; 742  :         L"(powerDomain=%d, ffDependency=0x%08X, bEnable=%d)\r\n", 
; 743  :         powerDomain, ffDependency, bEnable));

  010e8	e59f3174	 ldr         r3, [pc, #0x174]
  010ec	e5933440	 ldr         r3, [r3, #0x440]
  010f0	e3130004	 tst         r3, #4
  010f4	0a000007	 beq         |$LN8@PrcmDomain@5|
  010f8	e59d3028	 ldr         r3, [sp, #0x28]
  010fc	e59d2024	 ldr         r2, [sp, #0x24]
  01100	e59d1020	 ldr         r1, [sp, #0x20]
  01104	e59f0160	 ldr         r0, [pc, #0x160]
  01108	eb000000	 bl          NKDbgPrintfW
  0110c	e3a03001	 mov         r3, #1
  01110	e58d300c	 str         r3, [sp, #0xC]
  01114	ea000001	 b           |$LN9@PrcmDomain@5|
  01118		 |$LN8@PrcmDomain@5|
  01118	e3a03000	 mov         r3, #0
  0111c	e58d300c	 str         r3, [sp, #0xC]
  01120		 |$LN9@PrcmDomain@5|

; 744  :     
; 745  :     if (powerDomain >= POWERDOMAIN_COUNT) goto cleanUp;

  01120	e59d3020	 ldr         r3, [sp, #0x20]
  01124	e353000d	 cmp         r3, #0xD
  01128	3a000000	 bcc         |$LN5@PrcmDomain@5|
  0112c	ea000039	 b           |$cleanUp$47158|
  01130		 |$LN5@PrcmDomain@5|

; 746  :     if ((s_DomainTable[powerDomain].ffValidationMask & DOMAIN_UPDATE_SLEEPDEP) == 0) goto cleanUp;

  01130	e59d1020	 ldr         r1, [sp, #0x20]
  01134	e3a0301c	 mov         r3, #0x1C
  01138	e0020391	 mul         r2, r1, r3
  0113c	e59f3124	 ldr         r3, [pc, #0x124]
  01140	e0833002	 add         r3, r3, r2
  01144	e2833004	 add         r3, r3, #4
  01148	e5933000	 ldr         r3, [r3]
  0114c	e3130002	 tst         r3, #2
  01150	1a000000	 bne         |$LN4@PrcmDomain@5|
  01154	ea00002f	 b           |$cleanUp$47158|
  01158		 |$LN4@PrcmDomain@5|

; 747  : 
; 748  :     // update internal state information 
; 749  :     pDomainState = s_DomainTable[powerDomain].pDomainState;

  01158	e59d1020	 ldr         r1, [sp, #0x20]
  0115c	e3a0301c	 mov         r3, #0x1C
  01160	e0020391	 mul         r2, r1, r3
  01164	e59f30fc	 ldr         r3, [pc, #0xFC]
  01168	e0833002	 add         r3, r3, r2
  0116c	e2833008	 add         r3, r3, #8
  01170	e5933000	 ldr         r3, [r3]
  01174	e58d3004	 str         r3, [sp, #4]

; 750  :     if (pDomainState == NULL) goto cleanUp;

  01178	e59d3004	 ldr         r3, [sp, #4]
  0117c	e3530000	 cmp         r3, #0
  01180	1a000000	 bne         |$LN3@PrcmDomain@5|
  01184	ea000023	 b           |$cleanUp$47158|
  01188		 |$LN3@PrcmDomain@5|

; 751  :     
; 752  :     Lock(Mutex_Domain);

  01188	e3a00002	 mov         r0, #2
  0118c	eb000000	 bl          Lock

; 753  :     ffDependency &= SLEEPDEP_MASK;

  01190	e59d3024	 ldr         r3, [sp, #0x24]
  01194	e20330ff	 and         r3, r3, #0xFF
  01198	e58d3024	 str         r3, [sp, #0x24]

; 754  :     ffDependency >>= SLEEPDEP_SHIFT;

  0119c	e59d3024	 ldr         r3, [sp, #0x24]
  011a0	e58d3024	 str         r3, [sp, #0x24]

; 755  :     if (bEnable != FALSE)

  011a4	e59d3028	 ldr         r3, [sp, #0x28]
  011a8	e3530000	 cmp         r3, #0
  011ac	0a000008	 beq         |$LN2@PrcmDomain@5|

; 756  :         {
; 757  :         pDomainState->sleepDependency |= ffDependency; 

  011b0	e59d3004	 ldr         r3, [sp, #4]
  011b4	e2833008	 add         r3, r3, #8
  011b8	e5932000	 ldr         r2, [r3]
  011bc	e59d3024	 ldr         r3, [sp, #0x24]
  011c0	e1822003	 orr         r2, r2, r3
  011c4	e59d3004	 ldr         r3, [sp, #4]
  011c8	e2833008	 add         r3, r3, #8
  011cc	e5832000	 str         r2, [r3]

; 758  :         }
; 759  :     else

  011d0	ea000008	 b           |$LN1@PrcmDomain@5|
  011d4		 |$LN2@PrcmDomain@5|

; 760  :         {
; 761  :         pDomainState->sleepDependency &= ~ffDependency; 

  011d4	e59d3004	 ldr         r3, [sp, #4]
  011d8	e2831008	 add         r1, r3, #8
  011dc	e59d3024	 ldr         r3, [sp, #0x24]
  011e0	e1e02003	 mvn         r2, r3
  011e4	e5913000	 ldr         r3, [r1]
  011e8	e0032002	 and         r2, r3, r2
  011ec	e59d3004	 ldr         r3, [sp, #4]
  011f0	e2833008	 add         r3, r3, #8
  011f4	e5832000	 str         r2, [r3]
  011f8		 |$LN1@PrcmDomain@5|

; 762  :         }
; 763  : 
; 764  :     rc = _PrcmDomainHwUpdate(powerDomain, DOMAIN_UPDATE_SLEEPDEP);

  011f8	e3a01002	 mov         r1, #2
  011fc	e59d0020	 ldr         r0, [sp, #0x20]
  01200	eb000000	 bl          _PrcmDomainHwUpdate
  01204	e58d0010	 str         r0, [sp, #0x10]
  01208	e59d3010	 ldr         r3, [sp, #0x10]
  0120c	e58d3000	 str         r3, [sp]

; 765  :     Unlock(Mutex_Domain);

  01210	e3a00002	 mov         r0, #2
  01214	eb000000	 bl          Unlock
  01218		 |$cleanUp$47158|

; 766  :     
; 767  : cleanUp:        
; 768  :     OALMSG(OAL_FUNC, (L"-PrcmDomainSetSleepDependency()=%d\r\n", rc));

  01218	e59f3044	 ldr         r3, [pc, #0x44]
  0121c	e5933440	 ldr         r3, [r3, #0x440]
  01220	e3130004	 tst         r3, #4
  01224	0a000005	 beq         |$LN10@PrcmDomain@5|
  01228	e59d1000	 ldr         r1, [sp]
  0122c	e59f002c	 ldr         r0, [pc, #0x2C]
  01230	eb000000	 bl          NKDbgPrintfW
  01234	e3a03001	 mov         r3, #1
  01238	e58d3014	 str         r3, [sp, #0x14]
  0123c	ea000001	 b           |$LN11@PrcmDomain@5|
  01240		 |$LN10@PrcmDomain@5|
  01240	e3a03000	 mov         r3, #0
  01244	e58d3014	 str         r3, [sp, #0x14]
  01248		 |$LN11@PrcmDomain@5|

; 769  :     return rc;

  01248	e59d3000	 ldr         r3, [sp]
  0124c	e58d3008	 str         r3, [sp, #8]

; 770  : }

  01250	e59d0008	 ldr         r0, [sp, #8]
  01254	e28dd018	 add         sp, sp, #0x18
  01258	e89d6000	 ldmia       sp, {sp, lr}
  0125c	e12fff1e	 bx          lr
  01260		 |$LN15@PrcmDomain@5|
  01260		 |$LN16@PrcmDomain@5|
  01260	00000000	 DCD         |??_C@_1EK@HCAJMEHB@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAS?$AAl?$AAe?$AAe?$AAp?$AAD?$AAe?$AAp?$AAe?$AAn?$AAd?$AAe?$AAn?$AAc?$AAy?$AA?$CI?$AA?$CJ?$AA?$DN@|
  01264		 |$LN17@PrcmDomain@5|
  01264	00000000	 DCD         |dpCurSettings|
  01268		 |$LN18@PrcmDomain@5|
  01268	00000000	 DCD         |s_DomainTable|
  0126c		 |$LN19@PrcmDomain@5|
  0126c	00000000	 DCD         |??_C@_1KC@MCEKLACC@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAS?$AAl?$AAe?$AAe?$AAp?$AAD?$AAe?$AAp?$AAe?$AAn?$AAd?$AAe?$AAn?$AAc?$AAy?$AA?$CI?$AAp?$AAo@|
  01270		 |$M47542|

			 ENDP  ; |PrcmDomainSetSleepDependency|

	EXPORT	|??_C@_1EA@IIPEHBKG@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAP?$AAo?$AAw?$AAe?$AAr?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HM@KLIMMIKC@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAP?$AAo?$AAw?$AAe?$AAr?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AAp?$AAo?$AAw?$AAe?$AAr?$AAD?$AAo@| [ DATA ] ; `string'
	EXPORT	|PrcmDomainSetPowerState|
	IMPORT	|OALGetTickCount|

  00050			 AREA	 |.pdata|, PDATA
|$T47559| DCD	|$LN14@PrcmDomain@6|
	DCD	0x40009e04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@IIPEHBKG@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAP?$AAo?$AAw?$AAe?$AAr?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D", 0x0, "o"
	DCB	0x0, "m", 0x0, "a", 0x0, "i", 0x0, "n", 0x0, "S", 0x0, "e"
	DCB	0x0, "t", 0x0, "P", 0x0, "o", 0x0, "w", 0x0, "e", 0x0, "r"
	DCB	0x0, "S", 0x0, "t", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, "("
	DCB	0x0, ")", 0x0, "=", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HM@KLIMMIKC@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAP?$AAo?$AAw?$AAe?$AAr?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AAp?$AAo?$AAw?$AAe?$AAr?$AAD?$AAo@| DCB "+"
	DCB	0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D", 0x0, "o"
	DCB	0x0, "m", 0x0, "a", 0x0, "i", 0x0, "n", 0x0, "S", 0x0, "e"
	DCB	0x0, "t", 0x0, "P", 0x0, "o", 0x0, "w", 0x0, "e", 0x0, "r"
	DCB	0x0, "S", 0x0, "t", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, "("
	DCB	0x0, "p", 0x0, "o", 0x0, "w", 0x0, "e", 0x0, "r", 0x0, "D"
	DCB	0x0, "o", 0x0, "m", 0x0, "a", 0x0, "i", 0x0, "n", 0x0, "="
	DCB	0x0, "%", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "p", 0x0, "o"
	DCB	0x0, "w", 0x0, "e", 0x0, "r", 0x0, "S", 0x0, "t", 0x0, "a"
	DCB	0x0, "t", 0x0, "e", 0x0, "=", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "8", 0x0, "X", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  01270			 AREA	 |.text|, CODE, ARM

  01270		 |PrcmDomainSetPowerState| PROC

; 779  : {

  01270		 |$LN14@PrcmDomain@6|
  01270	e1a0c00d	 mov         r12, sp
  01274	e92d0007	 stmdb       sp!, {r0 - r2}
  01278	e92d5000	 stmdb       sp!, {r12, lr}
  0127c	e24dd030	 sub         sp, sp, #0x30
  01280		 |$M47556|

; 780  :     BOOL rc;
; 781  :     UINT temp;
; 782  :     UINT clockState = CLKSTCTRL_DISABLED;

  01280	e3a03000	 mov         r3, #0
  01284	e58d3004	 str         r3, [sp, #4]

; 783  :     UINT oldPowerState = (UINT)-1;

  01288	e3e03000	 mvn         r3, #0
  0128c	e58d300c	 str         r3, [sp, #0xC]

; 784  :     OMAP_CM_REGS *pCmRegs;
; 785  :     
; 786  :     OALMSG(OAL_FUNC, (L"+PrcmDomainSetPowerState"
; 787  :         L"(powerDomain=%d, powerState=0x%08X)\r\n", 
; 788  :         powerDomain, powerState));

  01290	e59f3244	 ldr         r3, [pc, #0x244]
  01294	e5933440	 ldr         r3, [r3, #0x440]
  01298	e3130004	 tst         r3, #4
  0129c	0a000006	 beq         |$LN8@PrcmDomain@6|
  012a0	e59d203c	 ldr         r2, [sp, #0x3C]
  012a4	e59d1038	 ldr         r1, [sp, #0x38]
  012a8	e59f0234	 ldr         r0, [pc, #0x234]
  012ac	eb000000	 bl          NKDbgPrintfW
  012b0	e3a03001	 mov         r3, #1
  012b4	e58d3018	 str         r3, [sp, #0x18]
  012b8	ea000001	 b           |$LN9@PrcmDomain@6|
  012bc		 |$LN8@PrcmDomain@6|
  012bc	e3a03000	 mov         r3, #0
  012c0	e58d3018	 str         r3, [sp, #0x18]
  012c4		 |$LN9@PrcmDomain@6|

; 789  :     
; 790  :     // get old power states to check if power domain needs a sw wakeup
; 791  :     if (s_DomainTable[powerDomain].pClockStates != NULL)

  012c4	e59d1038	 ldr         r1, [sp, #0x38]
  012c8	e3a0301c	 mov         r3, #0x1C
  012cc	e0020391	 mul         r2, r1, r3
  012d0	e59f3208	 ldr         r3, [pc, #0x208]
  012d4	e0833002	 add         r3, r3, r2
  012d8	e283300c	 add         r3, r3, #0xC
  012dc	e5933000	 ldr         r3, [r3]
  012e0	e3530000	 cmp         r3, #0
  012e4	0a000009	 beq         |$LN5@PrcmDomain@6|

; 792  :         {
; 793  :         clockState = s_DomainTable[powerDomain].pClockStates->rgClockDomains[0].clockState;

  012e8	e59d1038	 ldr         r1, [sp, #0x38]
  012ec	e3a0301c	 mov         r3, #0x1C
  012f0	e0020391	 mul         r2, r1, r3
  012f4	e59f31e4	 ldr         r3, [pc, #0x1E4]
  012f8	e0833002	 add         r3, r3, r2
  012fc	e283300c	 add         r3, r3, #0xC
  01300	e5933000	 ldr         r3, [r3]
  01304	e2833008	 add         r3, r3, #8
  01308	e5933000	 ldr         r3, [r3]
  0130c	e58d3004	 str         r3, [sp, #4]
  01310		 |$LN5@PrcmDomain@6|

; 794  :         }
; 795  : 
; 796  :     if (s_DomainTable[powerDomain].pDomainState != NULL)

  01310	e59d1038	 ldr         r1, [sp, #0x38]
  01314	e3a0301c	 mov         r3, #0x1C
  01318	e0020391	 mul         r2, r1, r3
  0131c	e59f31bc	 ldr         r3, [pc, #0x1BC]
  01320	e0833002	 add         r3, r3, r2
  01324	e2833008	 add         r3, r3, #8
  01328	e5933000	 ldr         r3, [r3]
  0132c	e3530000	 cmp         r3, #0
  01330	0a000008	 beq         |$LN4@PrcmDomain@6|

; 797  :         {
; 798  :         oldPowerState = s_DomainTable[powerDomain].pDomainState->powerState;

  01334	e59d1038	 ldr         r1, [sp, #0x38]
  01338	e3a0301c	 mov         r3, #0x1C
  0133c	e0020391	 mul         r2, r1, r3
  01340	e59f3198	 ldr         r3, [pc, #0x198]
  01344	e0833002	 add         r3, r3, r2
  01348	e2833008	 add         r3, r3, #8
  0134c	e5933000	 ldr         r3, [r3]
  01350	e5933000	 ldr         r3, [r3]
  01354	e58d300c	 str         r3, [sp, #0xC]
  01358		 |$LN4@PrcmDomain@6|

; 799  :         }
; 800  :     
; 801  :     rc = PrcmDomainSetPowerStateInternal(powerDomain, powerState, logicState, TRUE);

  01358	e3a03001	 mov         r3, #1
  0135c	e59d2040	 ldr         r2, [sp, #0x40]
  01360	e59d103c	 ldr         r1, [sp, #0x3C]
  01364	e59d0038	 ldr         r0, [sp, #0x38]
  01368	eb000000	 bl          PrcmDomainSetPowerStateInternal
  0136c	e58d001c	 str         r0, [sp, #0x1C]
  01370	e59d301c	 ldr         r3, [sp, #0x1C]
  01374	e58d3000	 str         r3, [sp]

; 802  :     
; 803  :     // force a sleep to sleep transition through software since it
; 804  :     // isn't supported in hardware
; 805  :     if (oldPowerState != -1 && clockState == CLKSTCTRL_AUTOMATIC &&        
; 806  :         s_DomainTable[powerDomain].refCount == 0 && oldPowerState != powerState)

  01378	e59d300c	 ldr         r3, [sp, #0xC]
  0137c	e3730001	 cmn         r3, #1
  01380	0a000042	 beq         |$LN3@PrcmDomain@6|
  01384	e59d3004	 ldr         r3, [sp, #4]
  01388	e3530003	 cmp         r3, #3
  0138c	1a00003f	 bne         |$LN3@PrcmDomain@6|
  01390	e59d1038	 ldr         r1, [sp, #0x38]
  01394	e3a0301c	 mov         r3, #0x1C
  01398	e0020391	 mul         r2, r1, r3
  0139c	e59f313c	 ldr         r3, [pc, #0x13C]
  013a0	e0833002	 add         r3, r3, r2
  013a4	e5933000	 ldr         r3, [r3]
  013a8	e3530000	 cmp         r3, #0
  013ac	1a000037	 bne         |$LN3@PrcmDomain@6|
  013b0	e59d200c	 ldr         r2, [sp, #0xC]
  013b4	e59d303c	 ldr         r3, [sp, #0x3C]
  013b8	e1520003	 cmp         r2, r3
  013bc	0a000033	 beq         |$LN3@PrcmDomain@6|

; 807  :         {        
; 808  :         pCmRegs = GetCmRegisterSet(powerDomain);

  013c0	e59d0038	 ldr         r0, [sp, #0x38]
  013c4	eb000000	 bl          GetCmRegisterSet
  013c8	e58d0020	 str         r0, [sp, #0x20]
  013cc	e59d3020	 ldr         r3, [sp, #0x20]
  013d0	e58d3010	 str         r3, [sp, #0x10]

; 809  :     
; 810  :         // force sw wake-up of power domain
; 811  :         temp = INREG32(&pCmRegs->CM_CLKSTCTRL_xxx);

  013d4	e59d3010	 ldr         r3, [sp, #0x10]
  013d8	e2833048	 add         r3, r3, #0x48
  013dc	e5933000	 ldr         r3, [r3]
  013e0	e58d3008	 str         r3, [sp, #8]

; 812  :         temp &= ~CLKSTCTRL_MASK;

  013e4	e59d2008	 ldr         r2, [sp, #8]
  013e8	e3e03003	 mvn         r3, #3
  013ec	e0023003	 and         r3, r2, r3
  013f0	e58d3008	 str         r3, [sp, #8]

; 813  :         temp |= CLKSTCTRL_WAKEUP;

  013f4	e59d3008	 ldr         r3, [sp, #8]
  013f8	e3833002	 orr         r3, r3, #2
  013fc	e58d3008	 str         r3, [sp, #8]

; 814  :         OUTREG32(&pCmRegs->CM_CLKSTCTRL_xxx, temp);

  01400	e59d3010	 ldr         r3, [sp, #0x10]
  01404	e2832048	 add         r2, r3, #0x48
  01408	e59d3008	 ldr         r3, [sp, #8]
  0140c	e5823000	 str         r3, [r2]

; 815  : 
; 816  :         // wait for clock to be activated
; 817  :         temp = OALGetTickCount() + 1;

  01410	eb000000	 bl          OALGetTickCount
  01414	e58d0024	 str         r0, [sp, #0x24]
  01418	e59d3024	 ldr         r3, [sp, #0x24]
  0141c	e2833001	 add         r3, r3, #1
  01420	e58d3008	 str         r3, [sp, #8]
  01424		 |$LN2@PrcmDomain@6|

; 818  :         while (INREG32(&pCmRegs->CM_CLKSTST_xxx) == 0 && temp > OALGetTickCount());

  01424	e59d3010	 ldr         r3, [sp, #0x10]
  01428	e283304c	 add         r3, r3, #0x4C
  0142c	e5933000	 ldr         r3, [r3]
  01430	e3530000	 cmp         r3, #0
  01434	1a000006	 bne         |$LN1@PrcmDomain@6|
  01438	eb000000	 bl          OALGetTickCount
  0143c	e58d0028	 str         r0, [sp, #0x28]
  01440	e59d2008	 ldr         r2, [sp, #8]
  01444	e59d3028	 ldr         r3, [sp, #0x28]
  01448	e1520003	 cmp         r2, r3
  0144c	9a000000	 bls         |$LN1@PrcmDomain@6|
  01450	eafffff3	 b           |$LN2@PrcmDomain@6|
  01454		 |$LN1@PrcmDomain@6|

; 819  : 
; 820  :         // put clock back to automatic mode
; 821  :         temp = INREG32(&pCmRegs->CM_CLKSTCTRL_xxx);

  01454	e59d3010	 ldr         r3, [sp, #0x10]
  01458	e2833048	 add         r3, r3, #0x48
  0145c	e5933000	 ldr         r3, [r3]
  01460	e58d3008	 str         r3, [sp, #8]

; 822  :         temp &= ~CLKSTCTRL_MASK;

  01464	e59d2008	 ldr         r2, [sp, #8]
  01468	e3e03003	 mvn         r3, #3
  0146c	e0023003	 and         r3, r2, r3
  01470	e58d3008	 str         r3, [sp, #8]

; 823  :         temp |= CLKSTCTRL_AUTOMATIC;

  01474	e59d3008	 ldr         r3, [sp, #8]
  01478	e3833003	 orr         r3, r3, #3
  0147c	e58d3008	 str         r3, [sp, #8]

; 824  :         OUTREG32(&pCmRegs->CM_CLKSTCTRL_xxx, temp);

  01480	e59d3010	 ldr         r3, [sp, #0x10]
  01484	e2832048	 add         r2, r3, #0x48
  01488	e59d3008	 ldr         r3, [sp, #8]
  0148c	e5823000	 str         r3, [r2]
  01490		 |$LN3@PrcmDomain@6|

; 825  :         }
; 826  :     
; 827  :     OALMSG(OAL_FUNC, (L"+PrcmDomainSetPowerState()=%d\r\n", rc));

  01490	e59f3044	 ldr         r3, [pc, #0x44]
  01494	e5933440	 ldr         r3, [r3, #0x440]
  01498	e3130004	 tst         r3, #4
  0149c	0a000005	 beq         |$LN10@PrcmDomain@6|
  014a0	e59d1000	 ldr         r1, [sp]
  014a4	e59f002c	 ldr         r0, [pc, #0x2C]
  014a8	eb000000	 bl          NKDbgPrintfW
  014ac	e3a03001	 mov         r3, #1
  014b0	e58d302c	 str         r3, [sp, #0x2C]
  014b4	ea000001	 b           |$LN11@PrcmDomain@6|
  014b8		 |$LN10@PrcmDomain@6|
  014b8	e3a03000	 mov         r3, #0
  014bc	e58d302c	 str         r3, [sp, #0x2C]
  014c0		 |$LN11@PrcmDomain@6|

; 828  :     return rc;

  014c0	e59d3000	 ldr         r3, [sp]
  014c4	e58d3014	 str         r3, [sp, #0x14]

; 829  : }

  014c8	e59d0014	 ldr         r0, [sp, #0x14]
  014cc	e28dd030	 add         sp, sp, #0x30
  014d0	e89d6000	 ldmia       sp, {sp, lr}
  014d4	e12fff1e	 bx          lr
  014d8		 |$LN15@PrcmDomain@6|
  014d8		 |$LN16@PrcmDomain@6|
  014d8	00000000	 DCD         |??_C@_1EA@IIPEHBKG@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAP?$AAo?$AAw?$AAe?$AAr?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  014dc		 |$LN17@PrcmDomain@6|
  014dc	00000000	 DCD         |dpCurSettings|
  014e0		 |$LN18@PrcmDomain@6|
  014e0	00000000	 DCD         |s_DomainTable|
  014e4		 |$LN19@PrcmDomain@6|
  014e4	00000000	 DCD         |??_C@_1HM@KLIMMIKC@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAP?$AAo?$AAw?$AAe?$AAr?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AAp?$AAo?$AAw?$AAe?$AAr?$AAD?$AAo@|
  014e8		 |$M47557|

			 ENDP  ; |PrcmDomainSetPowerState|

	EXPORT	|??_C@_1EA@JEMFKOAK@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAC?$AAl?$AAo?$AAc?$AAk?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1JM@MEHAOEAE@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAC?$AAl?$AAo?$AAc?$AAk?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AAp?$AAo?$AAw?$AAe?$AAr?$AAD?$AAo@| [ DATA ] ; `string'
	EXPORT	|PrcmDomainSetClockState|

  00058			 AREA	 |.pdata|, PDATA
|$T47574| DCD	|$LN18@PrcmDomain@7|
	DCD	0x40007b04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@JEMFKOAK@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAC?$AAl?$AAo?$AAc?$AAk?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D", 0x0, "o"
	DCB	0x0, "m", 0x0, "a", 0x0, "i", 0x0, "n", 0x0, "S", 0x0, "e"
	DCB	0x0, "t", 0x0, "C", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k"
	DCB	0x0, "S", 0x0, "t", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, "("
	DCB	0x0, ")", 0x0, "=", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JM@MEHAOEAE@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAC?$AAl?$AAo?$AAc?$AAk?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AAp?$AAo?$AAw?$AAe?$AAr?$AAD?$AAo@| DCB "+"
	DCB	0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D", 0x0, "o"
	DCB	0x0, "m", 0x0, "a", 0x0, "i", 0x0, "n", 0x0, "S", 0x0, "e"
	DCB	0x0, "t", 0x0, "C", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k"
	DCB	0x0, "S", 0x0, "t", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, "("
	DCB	0x0, "p", 0x0, "o", 0x0, "w", 0x0, "e", 0x0, "r", 0x0, "D"
	DCB	0x0, "o", 0x0, "m", 0x0, "a", 0x0, "i", 0x0, "n", 0x0, "="
	DCB	0x0, "%", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "c", 0x0, "l"
	DCB	0x0, "o", 0x0, "c", 0x0, "k", 0x0, "D", 0x0, "o", 0x0, "m"
	DCB	0x0, "a", 0x0, "i", 0x0, "n", 0x0, "=", 0x0, "%", 0x0, "d"
	DCB	0x0, ",", 0x0, " ", 0x0, "c", 0x0, "l", 0x0, "o", 0x0, "c"
	DCB	0x0, "k", 0x0, "S", 0x0, "t", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, "=", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "X", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  014e8			 AREA	 |.text|, CODE, ARM

  014e8		 |PrcmDomainSetClockState| PROC

; 838  : {

  014e8		 |$LN18@PrcmDomain@7|
  014e8	e1a0c00d	 mov         r12, sp
  014ec	e92d0007	 stmdb       sp!, {r0 - r2}
  014f0	e92d5000	 stmdb       sp!, {r12, lr}
  014f4	e24dd018	 sub         sp, sp, #0x18
  014f8		 |$M47571|

; 839  :     UINT i;
; 840  :     BOOL rc = FALSE;

  014f8	e3a03000	 mov         r3, #0
  014fc	e58d3004	 str         r3, [sp, #4]

; 841  :     ClockDomainInfo_t *pClockStates;
; 842  :     if (!g_bSingleThreaded)

  01500	e59f31c0	 ldr         r3, [pc, #0x1C0]
  01504	e5933000	 ldr         r3, [r3]
  01508	e3530000	 cmp         r3, #0
  0150c	1a00000d	 bne         |$LN9@PrcmDomain@7|

; 843  :         OALMSG(OAL_FUNC, (L"+PrcmDomainSetClockState"
; 844  :             L"(powerDomain=%d, clockDomain=%d, clockState=0x%08X)\r\n", 
; 845  :             powerDomain, clockDomain, clockState));

  01510	e59f31ac	 ldr         r3, [pc, #0x1AC]
  01514	e5933440	 ldr         r3, [r3, #0x440]
  01518	e3130004	 tst         r3, #4
  0151c	0a000007	 beq         |$LN12@PrcmDomain@7|
  01520	e59d3028	 ldr         r3, [sp, #0x28]
  01524	e59d2024	 ldr         r2, [sp, #0x24]
  01528	e59d1020	 ldr         r1, [sp, #0x20]
  0152c	e59f019c	 ldr         r0, [pc, #0x19C]
  01530	eb000000	 bl          NKDbgPrintfW
  01534	e3a03001	 mov         r3, #1
  01538	e58d3010	 str         r3, [sp, #0x10]
  0153c	ea000001	 b           |$LN13@PrcmDomain@7|
  01540		 |$LN12@PrcmDomain@7|
  01540	e3a03000	 mov         r3, #0
  01544	e58d3010	 str         r3, [sp, #0x10]
  01548		 |$LN13@PrcmDomain@7|
  01548		 |$LN9@PrcmDomain@7|

; 846  : 
; 847  :     if (powerDomain >= POWERDOMAIN_COUNT) goto cleanUp;

  01548	e59d3020	 ldr         r3, [sp, #0x20]
  0154c	e353000d	 cmp         r3, #0xD
  01550	3a000000	 bcc         |$LN8@PrcmDomain@7|
  01554	ea000043	 b           |$cleanUp$47212|
  01558		 |$LN8@PrcmDomain@7|

; 848  :     if ((s_DomainTable[powerDomain].ffValidationMask & DOMAIN_UPDATE_CLOCKSTATE) == 0) goto cleanUp;

  01558	e59d1020	 ldr         r1, [sp, #0x20]
  0155c	e3a0301c	 mov         r3, #0x1C
  01560	e0020391	 mul         r2, r1, r3
  01564	e59f3160	 ldr         r3, [pc, #0x160]
  01568	e0833002	 add         r3, r3, r2
  0156c	e2833004	 add         r3, r3, #4
  01570	e5933000	 ldr         r3, [r3]
  01574	e3130008	 tst         r3, #8
  01578	1a000000	 bne         |$LN7@PrcmDomain@7|
  0157c	ea000039	 b           |$cleanUp$47212|
  01580		 |$LN7@PrcmDomain@7|

; 849  : 
; 850  :     // update internal state information 
; 851  :     pClockStates = s_DomainTable[powerDomain].pClockStates;

  01580	e59d1020	 ldr         r1, [sp, #0x20]
  01584	e3a0301c	 mov         r3, #0x1C
  01588	e0020391	 mul         r2, r1, r3
  0158c	e59f3138	 ldr         r3, [pc, #0x138]
  01590	e0833002	 add         r3, r3, r2
  01594	e283300c	 add         r3, r3, #0xC
  01598	e5933000	 ldr         r3, [r3]
  0159c	e58d3000	 str         r3, [sp]

; 852  :     if (pClockStates == NULL) goto cleanUp;

  015a0	e59d3000	 ldr         r3, [sp]
  015a4	e3530000	 cmp         r3, #0
  015a8	1a000000	 bne         |$LN6@PrcmDomain@7|
  015ac	ea00002d	 b           |$cleanUp$47212|
  015b0		 |$LN6@PrcmDomain@7|

; 853  : 
; 854  :     Lock(Mutex_Domain);

  015b0	e3a00002	 mov         r0, #2
  015b4	eb000000	 bl          Lock

; 855  :     for (i = 0; i < pClockStates->count; ++i)

  015b8	e3a03000	 mov         r3, #0
  015bc	e58d3008	 str         r3, [sp, #8]
  015c0	ea000002	 b           |$LN5@PrcmDomain@7|
  015c4		 |$LN4@PrcmDomain@7|
  015c4	e59d3008	 ldr         r3, [sp, #8]
  015c8	e2833001	 add         r3, r3, #1
  015cc	e58d3008	 str         r3, [sp, #8]
  015d0		 |$LN5@PrcmDomain@7|
  015d0	e59d2008	 ldr         r2, [sp, #8]
  015d4	e59d3000	 ldr         r3, [sp]
  015d8	e5933000	 ldr         r3, [r3]
  015dc	e1520003	 cmp         r2, r3
  015e0	2a00001c	 bcs         |$LN3@PrcmDomain@7|

; 856  :         {
; 857  :         if (pClockStates->rgClockDomains[i].clockDomain == (ClockDomain_e) clockDomain)

  015e4	e59d3000	 ldr         r3, [sp]
  015e8	e2831004	 add         r1, r3, #4
  015ec	e59d2008	 ldr         r2, [sp, #8]
  015f0	e3a0300c	 mov         r3, #0xC
  015f4	e0030392	 mul         r3, r2, r3
  015f8	e0813003	 add         r3, r1, r3
  015fc	e5932000	 ldr         r2, [r3]
  01600	e59d3024	 ldr         r3, [sp, #0x24]
  01604	e1520003	 cmp         r2, r3
  01608	1a000011	 bne         |$LN2@PrcmDomain@7|

; 858  :             {
; 859  :             clockState &= CLKSTCTRL_MASK;

  0160c	e59d3028	 ldr         r3, [sp, #0x28]
  01610	e2033003	 and         r3, r3, #3
  01614	e58d3028	 str         r3, [sp, #0x28]

; 860  :             clockState >>= CLKSTCTRL_SHIFT;

  01618	e59d3028	 ldr         r3, [sp, #0x28]
  0161c	e58d3028	 str         r3, [sp, #0x28]

; 861  :             pClockStates->rgClockDomains[i].clockState = clockState;

  01620	e59d3000	 ldr         r3, [sp]
  01624	e2831004	 add         r1, r3, #4
  01628	e59d2008	 ldr         r2, [sp, #8]
  0162c	e3a0300c	 mov         r3, #0xC
  01630	e0030392	 mul         r3, r2, r3
  01634	e0813003	 add         r3, r1, r3
  01638	e2832004	 add         r2, r3, #4
  0163c	e59d3028	 ldr         r3, [sp, #0x28]
  01640	e5823000	 str         r3, [r2]

; 862  :             _PrcmDomainHwUpdate(powerDomain, DOMAIN_UPDATE_CLOCKSTATE);

  01644	e3a01008	 mov         r1, #8
  01648	e59d0020	 ldr         r0, [sp, #0x20]
  0164c	eb000000	 bl          _PrcmDomainHwUpdate

; 863  :             break;

  01650	ea000000	 b           |$LN3@PrcmDomain@7|
  01654		 |$LN2@PrcmDomain@7|

; 864  :             }
; 865  :         }    

  01654	eaffffda	 b           |$LN4@PrcmDomain@7|
  01658		 |$LN3@PrcmDomain@7|

; 866  :     Unlock(Mutex_Domain);

  01658	e3a00002	 mov         r0, #2
  0165c	eb000000	 bl          Unlock

; 867  :     rc = TRUE;

  01660	e3a03001	 mov         r3, #1
  01664	e58d3004	 str         r3, [sp, #4]
  01668		 |$cleanUp$47212|

; 868  :     
; 869  : cleanUp:        
; 870  :     if (!g_bSingleThreaded)

  01668	e59f3058	 ldr         r3, [pc, #0x58]
  0166c	e5933000	 ldr         r3, [r3]
  01670	e3530000	 cmp         r3, #0
  01674	1a00000b	 bne         |$LN1@PrcmDomain@7|

; 871  :         OALMSG(OAL_FUNC, (L"-PrcmDomainSetClockState()=%d\r\n", rc));

  01678	e59f3044	 ldr         r3, [pc, #0x44]
  0167c	e5933440	 ldr         r3, [r3, #0x440]
  01680	e3130004	 tst         r3, #4
  01684	0a000005	 beq         |$LN14@PrcmDomain@7|
  01688	e59d1004	 ldr         r1, [sp, #4]
  0168c	e59f002c	 ldr         r0, [pc, #0x2C]
  01690	eb000000	 bl          NKDbgPrintfW
  01694	e3a03001	 mov         r3, #1
  01698	e58d3014	 str         r3, [sp, #0x14]
  0169c	ea000001	 b           |$LN15@PrcmDomain@7|
  016a0		 |$LN14@PrcmDomain@7|
  016a0	e3a03000	 mov         r3, #0
  016a4	e58d3014	 str         r3, [sp, #0x14]
  016a8		 |$LN15@PrcmDomain@7|
  016a8		 |$LN1@PrcmDomain@7|

; 872  :     return rc;

  016a8	e59d3004	 ldr         r3, [sp, #4]
  016ac	e58d300c	 str         r3, [sp, #0xC]

; 873  : }

  016b0	e59d000c	 ldr         r0, [sp, #0xC]
  016b4	e28dd018	 add         sp, sp, #0x18
  016b8	e89d6000	 ldmia       sp, {sp, lr}
  016bc	e12fff1e	 bx          lr
  016c0		 |$LN19@PrcmDomain@7|
  016c0		 |$LN20@PrcmDomain@7|
  016c0	00000000	 DCD         |??_C@_1EA@JEMFKOAK@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAC?$AAl?$AAo?$AAc?$AAk?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  016c4		 |$LN21@PrcmDomain@7|
  016c4	00000000	 DCD         |dpCurSettings|
  016c8		 |$LN22@PrcmDomain@7|
  016c8	00000000	 DCD         |g_bSingleThreaded|
  016cc		 |$LN23@PrcmDomain@7|
  016cc	00000000	 DCD         |s_DomainTable|
  016d0		 |$LN24@PrcmDomain@7|
  016d0	00000000	 DCD         |??_C@_1JM@MEHAOEAE@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAC?$AAl?$AAo?$AAc?$AAk?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AAp?$AAo?$AAw?$AAe?$AAr?$AAD?$AAo@|
  016d4		 |$M47572|

			 ENDP  ; |PrcmDomainSetClockState|

	EXPORT	|PrcmDomainSetClockStateKernel|

  00060			 AREA	 |.pdata|, PDATA
|$T47586| DCD	|$LN12@PrcmDomain@8|
	DCD	0x40005104
; Function compile flags: /Odtp

  016d4			 AREA	 |.text|, CODE, ARM

  016d4		 |PrcmDomainSetClockStateKernel| PROC

; 885  : {

  016d4		 |$LN12@PrcmDomain@8|
  016d4	e1a0c00d	 mov         r12, sp
  016d8	e92d0007	 stmdb       sp!, {r0 - r2}
  016dc	e92d5000	 stmdb       sp!, {r12, lr}
  016e0	e24dd010	 sub         sp, sp, #0x10
  016e4		 |$M47583|

; 886  :     UINT i;
; 887  :     BOOL rc = FALSE;

  016e4	e3a03000	 mov         r3, #0
  016e8	e58d3004	 str         r3, [sp, #4]

; 888  :     ClockDomainInfo_t *pClockStates;
; 889  : 
; 890  :     if (powerDomain >= POWERDOMAIN_COUNT) goto cleanUp;

  016ec	e59d3018	 ldr         r3, [sp, #0x18]
  016f0	e353000d	 cmp         r3, #0xD
  016f4	3a000000	 bcc         |$LN7@PrcmDomain@8|
  016f8	ea00003f	 b           |$cleanUp$47235|
  016fc		 |$LN7@PrcmDomain@8|

; 891  :     if ((s_DomainTable[powerDomain].ffValidationMask & DOMAIN_UPDATE_CLOCKSTATE) == 0) goto cleanUp;

  016fc	e59d1018	 ldr         r1, [sp, #0x18]
  01700	e3a0301c	 mov         r3, #0x1C
  01704	e0020391	 mul         r2, r1, r3
  01708	e59f3104	 ldr         r3, [pc, #0x104]
  0170c	e0833002	 add         r3, r3, r2
  01710	e2833004	 add         r3, r3, #4
  01714	e5933000	 ldr         r3, [r3]
  01718	e3130008	 tst         r3, #8
  0171c	1a000000	 bne         |$LN6@PrcmDomain@8|
  01720	ea000035	 b           |$cleanUp$47235|
  01724		 |$LN6@PrcmDomain@8|

; 892  : 
; 893  :     // update internal state information 
; 894  :     pClockStates = s_DomainTable[powerDomain].pClockStates;

  01724	e59d1018	 ldr         r1, [sp, #0x18]
  01728	e3a0301c	 mov         r3, #0x1C
  0172c	e0020391	 mul         r2, r1, r3
  01730	e59f30dc	 ldr         r3, [pc, #0xDC]
  01734	e0833002	 add         r3, r3, r2
  01738	e283300c	 add         r3, r3, #0xC
  0173c	e5933000	 ldr         r3, [r3]
  01740	e58d3000	 str         r3, [sp]

; 895  :     if (pClockStates == NULL) goto cleanUp;

  01744	e59d3000	 ldr         r3, [sp]
  01748	e3530000	 cmp         r3, #0
  0174c	1a000000	 bne         |$LN5@PrcmDomain@8|
  01750	ea000029	 b           |$cleanUp$47235|
  01754		 |$LN5@PrcmDomain@8|

; 896  : 
; 897  :     for (i = 0; i < pClockStates->count; ++i)

  01754	e3a03000	 mov         r3, #0
  01758	e58d3008	 str         r3, [sp, #8]
  0175c	ea000002	 b           |$LN4@PrcmDomain@8|
  01760		 |$LN3@PrcmDomain@8|
  01760	e59d3008	 ldr         r3, [sp, #8]
  01764	e2833001	 add         r3, r3, #1
  01768	e58d3008	 str         r3, [sp, #8]
  0176c		 |$LN4@PrcmDomain@8|
  0176c	e59d2008	 ldr         r2, [sp, #8]
  01770	e59d3000	 ldr         r3, [sp]
  01774	e5933000	 ldr         r3, [r3]
  01778	e1520003	 cmp         r2, r3
  0177c	2a00001c	 bcs         |$LN2@PrcmDomain@8|

; 898  :         {
; 899  :         if (pClockStates->rgClockDomains[i].clockDomain == (ClockDomain_e) clockDomain)

  01780	e59d3000	 ldr         r3, [sp]
  01784	e2831004	 add         r1, r3, #4
  01788	e59d2008	 ldr         r2, [sp, #8]
  0178c	e3a0300c	 mov         r3, #0xC
  01790	e0030392	 mul         r3, r2, r3
  01794	e0813003	 add         r3, r1, r3
  01798	e5932000	 ldr         r2, [r3]
  0179c	e59d301c	 ldr         r3, [sp, #0x1C]
  017a0	e1520003	 cmp         r2, r3
  017a4	1a000011	 bne         |$LN1@PrcmDomain@8|

; 900  :             {
; 901  :             clockState &= CLKSTCTRL_MASK;

  017a8	e59d3020	 ldr         r3, [sp, #0x20]
  017ac	e2033003	 and         r3, r3, #3
  017b0	e58d3020	 str         r3, [sp, #0x20]

; 902  :             clockState >>= CLKSTCTRL_SHIFT;

  017b4	e59d3020	 ldr         r3, [sp, #0x20]
  017b8	e58d3020	 str         r3, [sp, #0x20]

; 903  :             pClockStates->rgClockDomains[i].clockState = clockState;

  017bc	e59d3000	 ldr         r3, [sp]
  017c0	e2831004	 add         r1, r3, #4
  017c4	e59d2008	 ldr         r2, [sp, #8]
  017c8	e3a0300c	 mov         r3, #0xC
  017cc	e0030392	 mul         r3, r2, r3
  017d0	e0813003	 add         r3, r1, r3
  017d4	e2832004	 add         r2, r3, #4
  017d8	e59d3020	 ldr         r3, [sp, #0x20]
  017dc	e5823000	 str         r3, [r2]

; 904  :             _PrcmDomainHwUpdate(powerDomain, DOMAIN_UPDATE_CLOCKSTATE);

  017e0	e3a01008	 mov         r1, #8
  017e4	e59d0018	 ldr         r0, [sp, #0x18]
  017e8	eb000000	 bl          _PrcmDomainHwUpdate

; 905  :             break;

  017ec	ea000000	 b           |$LN2@PrcmDomain@8|
  017f0		 |$LN1@PrcmDomain@8|

; 906  :             }
; 907  :         }    

  017f0	eaffffda	 b           |$LN3@PrcmDomain@8|
  017f4		 |$LN2@PrcmDomain@8|

; 908  :     rc = TRUE;

  017f4	e3a03001	 mov         r3, #1
  017f8	e58d3004	 str         r3, [sp, #4]
  017fc		 |$cleanUp$47235|

; 909  :     
; 910  : cleanUp:        
; 911  :     return rc;

  017fc	e59d3004	 ldr         r3, [sp, #4]
  01800	e58d300c	 str         r3, [sp, #0xC]

; 912  : }

  01804	e59d000c	 ldr         r0, [sp, #0xC]
  01808	e28dd010	 add         sp, sp, #0x10
  0180c	e89d6000	 ldmia       sp, {sp, lr}
  01810	e12fff1e	 bx          lr
  01814		 |$LN13@PrcmDomain@8|
  01814		 |$LN14@PrcmDomain@8|
  01814	00000000	 DCD         |s_DomainTable|
  01818		 |$M47584|

			 ENDP  ; |PrcmDomainSetClockStateKernel|

	EXPORT	|??_C@_1EC@GMFKPCKF@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAM?$AAe?$AAm?$AAo?$AAr?$AAy?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6@| [ DATA ] ; `string'
	EXPORT	|??_C@_1LA@DDOCINBK@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAM?$AAe?$AAm?$AAo?$AAr?$AAy?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AAp?$AAo?$AAw?$AAe?$AAr?$AAD@| [ DATA ] ; `string'
	EXPORT	|PrcmDomainSetMemoryState|

  00068			 AREA	 |.pdata|, PDATA
|$T47598| DCD	|$LN11@PrcmDomain@9|
	DCD	0x40005a04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EC@GMFKPCKF@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAM?$AAe?$AAm?$AAo?$AAr?$AAy?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6@| DCB "-"
	DCB	0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D", 0x0, "o"
	DCB	0x0, "m", 0x0, "a", 0x0, "i", 0x0, "n", 0x0, "S", 0x0, "e"
	DCB	0x0, "t", 0x0, "M", 0x0, "e", 0x0, "m", 0x0, "o", 0x0, "r"
	DCB	0x0, "y", 0x0, "S", 0x0, "t", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, "(", 0x0, ")", 0x0, "=", 0x0, "%", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1LA@DDOCINBK@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAM?$AAe?$AAm?$AAo?$AAr?$AAy?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AAp?$AAo?$AAw?$AAe?$AAr?$AAD@| DCB "+"
	DCB	0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D", 0x0, "o"
	DCB	0x0, "m", 0x0, "a", 0x0, "i", 0x0, "n", 0x0, "S", 0x0, "e"
	DCB	0x0, "t", 0x0, "M", 0x0, "e", 0x0, "m", 0x0, "o", 0x0, "r"
	DCB	0x0, "y", 0x0, "S", 0x0, "t", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, "(", 0x0, "p", 0x0, "o", 0x0, "w", 0x0, "e", 0x0, "r"
	DCB	0x0, "D", 0x0, "o", 0x0, "m", 0x0, "a", 0x0, "i", 0x0, "n"
	DCB	0x0, "=", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "m"
	DCB	0x0, "e", 0x0, "m", 0x0, "o", 0x0, "r", 0x0, "y", 0x0, "S"
	DCB	0x0, "t", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, "=", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, ","
	DCB	0x0, " ", 0x0, "m", 0x0, "e", 0x0, "m", 0x0, "o", 0x0, "r"
	DCB	0x0, "y", 0x0, "S", 0x0, "t", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, "M", 0x0, "a", 0x0, "s", 0x0, "k", 0x0, "=", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  01818			 AREA	 |.text|, CODE, ARM

  01818		 |PrcmDomainSetMemoryState| PROC

; 921  : {

  01818		 |$LN11@PrcmDomain@9|
  01818	e1a0c00d	 mov         r12, sp
  0181c	e92d0007	 stmdb       sp!, {r0 - r2}
  01820	e92d5000	 stmdb       sp!, {r12, lr}
  01824	e24dd01c	 sub         sp, sp, #0x1C
  01828		 |$M47595|

; 922  :     UINT val;    
; 923  :     BOOL rc = FALSE;

  01828	e3a03000	 mov         r3, #0
  0182c	e58d3000	 str         r3, [sp]

; 924  :     OMAP_PRM_REGS *pPrmRegs;
; 925  :     OALMSG(OAL_FUNC, (L"+PrcmDomainSetMemoryState"
; 926  :         L"(powerDomain=%d, memoryState=0x%08X, memoryStateMask=0x%08X)\r\n", 
; 927  :         powerDomain, memoryState, memoryStateMask));

  01830	e59f313c	 ldr         r3, [pc, #0x13C]
  01834	e5933440	 ldr         r3, [r3, #0x440]
  01838	e3130004	 tst         r3, #4
  0183c	0a000007	 beq         |$LN5@PrcmDomain@9|
  01840	e59d302c	 ldr         r3, [sp, #0x2C]
  01844	e59d2028	 ldr         r2, [sp, #0x28]
  01848	e59d1024	 ldr         r1, [sp, #0x24]
  0184c	e59f0128	 ldr         r0, [pc, #0x128]
  01850	eb000000	 bl          NKDbgPrintfW
  01854	e3a03001	 mov         r3, #1
  01858	e58d3010	 str         r3, [sp, #0x10]
  0185c	ea000001	 b           |$LN6@PrcmDomain@9|
  01860		 |$LN5@PrcmDomain@9|
  01860	e3a03000	 mov         r3, #0
  01864	e58d3010	 str         r3, [sp, #0x10]
  01868		 |$LN6@PrcmDomain@9|

; 928  : 
; 929  :     pPrmRegs = GetPrmRegisterSet(powerDomain);

  01868	e59d0024	 ldr         r0, [sp, #0x24]
  0186c	eb000000	 bl          GetPrmRegisterSet
  01870	e58d0014	 str         r0, [sp, #0x14]
  01874	e59d3014	 ldr         r3, [sp, #0x14]
  01878	e58d3008	 str         r3, [sp, #8]

; 930  :     if (pPrmRegs == NULL) goto cleanUp;

  0187c	e59d3008	 ldr         r3, [sp, #8]
  01880	e3530000	 cmp         r3, #0
  01884	1a000000	 bne         |$LN2@PrcmDomain@9|
  01888	ea000026	 b           |$cleanUp$47258|
  0188c		 |$LN2@PrcmDomain@9|

; 931  : 
; 932  :     Lock(Mutex_Domain);

  0188c	e3a00002	 mov         r0, #2
  01890	eb000000	 bl          Lock

; 933  :     // update cached logic state
; 934  :     if (memoryStateMask & LOGICRETSTATE)

  01894	e59d302c	 ldr         r3, [sp, #0x2C]
  01898	e3130004	 tst         r3, #4
  0189c	0a00000a	 beq         |$LN1@PrcmDomain@9|

; 935  :         {
; 936  :         s_DomainTable[powerDomain].pDomainState->logicState = memoryState & LOGICRETSTATE_MASK;

  018a0	e59d3028	 ldr         r3, [sp, #0x28]
  018a4	e2030004	 and         r0, r3, #4
  018a8	e59d1024	 ldr         r1, [sp, #0x24]
  018ac	e3a0301c	 mov         r3, #0x1C
  018b0	e0020391	 mul         r2, r1, r3
  018b4	e59f30bc	 ldr         r3, [pc, #0xBC]
  018b8	e0833002	 add         r3, r3, r2
  018bc	e2833008	 add         r3, r3, #8
  018c0	e5933000	 ldr         r3, [r3]
  018c4	e2833004	 add         r3, r3, #4
  018c8	e5830000	 str         r0, [r3]
  018cc		 |$LN1@PrcmDomain@9|

; 937  :         }
; 938  :     
; 939  :     memoryState &= memoryStateMask;

  018cc	e59d2028	 ldr         r2, [sp, #0x28]
  018d0	e59d302c	 ldr         r3, [sp, #0x2C]
  018d4	e0023003	 and         r3, r2, r3
  018d8	e58d3028	 str         r3, [sp, #0x28]

; 940  :     val = INREG32(&pPrmRegs->PM_PWSTCTRL_xxx) & ~memoryStateMask;

  018dc	e59d3008	 ldr         r3, [sp, #8]
  018e0	e28310e0	 add         r1, r3, #0xE0
  018e4	e59d302c	 ldr         r3, [sp, #0x2C]
  018e8	e1e02003	 mvn         r2, r3
  018ec	e5913000	 ldr         r3, [r1]
  018f0	e0033002	 and         r3, r3, r2
  018f4	e58d3004	 str         r3, [sp, #4]

; 941  :     val |= memoryState;

  018f8	e59d2004	 ldr         r2, [sp, #4]
  018fc	e59d3028	 ldr         r3, [sp, #0x28]
  01900	e1823003	 orr         r3, r2, r3
  01904	e58d3004	 str         r3, [sp, #4]

; 942  :     OUTREG32(&pPrmRegs->PM_PWSTCTRL_xxx, val);

  01908	e59d3008	 ldr         r3, [sp, #8]
  0190c	e28320e0	 add         r2, r3, #0xE0
  01910	e59d3004	 ldr         r3, [sp, #4]
  01914	e5823000	 str         r3, [r2]

; 943  :     Unlock(Mutex_Domain);

  01918	e3a00002	 mov         r0, #2
  0191c	eb000000	 bl          Unlock

; 944  :     
; 945  :     rc = TRUE;

  01920	e3a03001	 mov         r3, #1
  01924	e58d3000	 str         r3, [sp]
  01928		 |$cleanUp$47258|

; 946  :     
; 947  : cleanUp:        
; 948  :     OALMSG(OAL_FUNC, (L"-PrcmDomainSetMemoryState()=%d\r\n", rc));

  01928	e59f3044	 ldr         r3, [pc, #0x44]
  0192c	e5933440	 ldr         r3, [r3, #0x440]
  01930	e3130004	 tst         r3, #4
  01934	0a000005	 beq         |$LN7@PrcmDomain@9|
  01938	e59d1000	 ldr         r1, [sp]
  0193c	e59f002c	 ldr         r0, [pc, #0x2C]
  01940	eb000000	 bl          NKDbgPrintfW
  01944	e3a03001	 mov         r3, #1
  01948	e58d3018	 str         r3, [sp, #0x18]
  0194c	ea000001	 b           |$LN8@PrcmDomain@9|
  01950		 |$LN7@PrcmDomain@9|
  01950	e3a03000	 mov         r3, #0
  01954	e58d3018	 str         r3, [sp, #0x18]
  01958		 |$LN8@PrcmDomain@9|

; 949  :     return rc;

  01958	e59d3000	 ldr         r3, [sp]
  0195c	e58d300c	 str         r3, [sp, #0xC]

; 950  : }

  01960	e59d000c	 ldr         r0, [sp, #0xC]
  01964	e28dd01c	 add         sp, sp, #0x1C
  01968	e89d6000	 ldmia       sp, {sp, lr}
  0196c	e12fff1e	 bx          lr
  01970		 |$LN12@PrcmDomain@9|
  01970		 |$LN13@PrcmDomain@9|
  01970	00000000	 DCD         |??_C@_1EC@GMFKPCKF@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAM?$AAe?$AAm?$AAo?$AAr?$AAy?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6@|
  01974		 |$LN14@PrcmDomain@9|
  01974	00000000	 DCD         |dpCurSettings|
  01978		 |$LN15@PrcmDomain@9|
  01978	00000000	 DCD         |s_DomainTable|
  0197c		 |$LN16@PrcmDomain@9|
  0197c	00000000	 DCD         |??_C@_1LA@DDOCINBK@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAM?$AAe?$AAm?$AAo?$AAr?$AAy?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AAp?$AAo?$AAw?$AAe?$AAr?$AAD@|
  01980		 |$M47596|

			 ENDP  ; |PrcmDomainSetMemoryState|

	EXPORT	|PrcmDomainClearWakeupStatus|

  00070			 AREA	 |.pdata|, PDATA
|$T47609| DCD	|$LN7@PrcmDomain@10|
	DCD	0x40002a04
; Function compile flags: /Odtp

  01980			 AREA	 |.text|, CODE, ARM

  01980		 |PrcmDomainClearWakeupStatus| PROC

; 962  : {

  01980		 |$LN7@PrcmDomain@10|
  01980	e1a0c00d	 mov         r12, sp
  01984	e92d0001	 stmdb       sp!, {r0}
  01988	e92d5000	 stmdb       sp!, {r12, lr}
  0198c	e24dd014	 sub         sp, sp, #0x14
  01990		 |$M47606|

; 963  :     UINT val;    
; 964  :     BOOL rc = FALSE;

  01990	e3a03000	 mov         r3, #0
  01994	e58d3000	 str         r3, [sp]

; 965  :     OMAP_PRM_REGS *pPrmRegs;
; 966  :     //OALMSG(OAL_FUNC, (L"+PrcmDomainClearWakeupStatus"
; 967  :     //    L"(powerDomain=%d)\r\n", 
; 968  :     //    powerDomain)
; 969  :     //    );
; 970  : 
; 971  :     pPrmRegs = GetPrmRegisterSet(powerDomain);

  01998	e59d001c	 ldr         r0, [sp, #0x1C]
  0199c	eb000000	 bl          GetPrmRegisterSet
  019a0	e58d0010	 str         r0, [sp, #0x10]
  019a4	e59d3010	 ldr         r3, [sp, #0x10]
  019a8	e58d3008	 str         r3, [sp, #8]

; 972  :     if (pPrmRegs == NULL) goto cleanUp;

  019ac	e59d3008	 ldr         r3, [sp, #8]
  019b0	e3530000	 cmp         r3, #0
  019b4	1a000000	 bne         |$LN2@PrcmDomain@10|
  019b8	ea000014	 b           |$cleanUp$47273|
  019bc		 |$LN2@PrcmDomain@10|

; 973  : 
; 974  :     // This routine should only be called during system boot-up or
; 975  :     // from OEMIdle, OEMPowerOff.  Hence, serialization within this routine
; 976  :     // should not be performed.
; 977  : 
; 978  :     val = INREG32(&pPrmRegs->PM_WKST_xxx);

  019bc	e59d3008	 ldr         r3, [sp, #8]
  019c0	e28330b0	 add         r3, r3, #0xB0
  019c4	e5933000	 ldr         r3, [r3]
  019c8	e58d3004	 str         r3, [sp, #4]

; 979  :     OUTREG32(&pPrmRegs->PM_WKST_xxx, val);

  019cc	e59d3008	 ldr         r3, [sp, #8]
  019d0	e28320b0	 add         r2, r3, #0xB0
  019d4	e59d3004	 ldr         r3, [sp, #4]
  019d8	e5823000	 str         r3, [r2]

; 980  :     if (powerDomain == POWERDOMAIN_CORE) 

  019dc	e59d301c	 ldr         r3, [sp, #0x1C]
  019e0	e3530001	 cmp         r3, #1
  019e4	1a000007	 bne         |$LN1@PrcmDomain@10|

; 981  :         {
; 982  :         val = INREG32(&pPrmRegs->PM_WKST3_xxx);

  019e8	e59d3008	 ldr         r3, [sp, #8]
  019ec	e28330b8	 add         r3, r3, #0xB8
  019f0	e5933000	 ldr         r3, [r3]
  019f4	e58d3004	 str         r3, [sp, #4]

; 983  :         OUTREG32(&pPrmRegs->PM_WKST3_xxx, val);

  019f8	e59d3008	 ldr         r3, [sp, #8]
  019fc	e28320b8	 add         r2, r3, #0xB8
  01a00	e59d3004	 ldr         r3, [sp, #4]
  01a04	e5823000	 str         r3, [r2]
  01a08		 |$LN1@PrcmDomain@10|

; 984  :         }
; 985  :     
; 986  :     rc = TRUE;

  01a08	e3a03001	 mov         r3, #1
  01a0c	e58d3000	 str         r3, [sp]
  01a10		 |$cleanUp$47273|

; 987  :     
; 988  : cleanUp:        
; 989  :     //OALMSG(OAL_FUNC, (L"-PrcmDomainClearWakeupStatus()=%d\r\n", rc));
; 990  :     return rc;

  01a10	e59d3000	 ldr         r3, [sp]
  01a14	e58d300c	 str         r3, [sp, #0xC]

; 991  : }

  01a18	e59d000c	 ldr         r0, [sp, #0xC]
  01a1c	e28dd014	 add         sp, sp, #0x14
  01a20	e89d6000	 ldmia       sp, {sp, lr}
  01a24	e12fff1e	 bx          lr
  01a28		 |$M47607|

			 ENDP  ; |PrcmDomainClearWakeupStatus|

	EXPORT	|PrcmDomainUpdateRefCount|
	IMPORT	|InterlockedDecrement|
	IMPORT	|InterlockedIncrement|

  00078			 AREA	 |.pdata|, PDATA
|$T47614| DCD	|$LN7@PrcmDomain@11|
	DCD	0x40001603
; Function compile flags: /Odtp

  01a28			 AREA	 |.text|, CODE, ARM

  01a28		 |PrcmDomainUpdateRefCount| PROC

; 999  : {    

  01a28		 |$LN7@PrcmDomain@11|
  01a28	e1a0c00d	 mov         r12, sp
  01a2c	e92d0003	 stmdb       sp!, {r0, r1}
  01a30	e92d5000	 stmdb       sp!, {r12, lr}
  01a34		 |$M47611|

; 1000 :     // update refcount
; 1001 :     if (bEnable)

  01a34	e59d300c	 ldr         r3, [sp, #0xC]
  01a38	e3530000	 cmp         r3, #0
  01a3c	0a000006	 beq         |$LN2@PrcmDomain@11|

; 1002 :         {
; 1003 :         InterlockedIncrement((LONG*)&s_DomainTable[powerDomain].refCount);

  01a40	e59d1008	 ldr         r1, [sp, #8]
  01a44	e3a0301c	 mov         r3, #0x1C
  01a48	e0020391	 mul         r2, r1, r3
  01a4c	e59f3028	 ldr         r3, [pc, #0x28]
  01a50	e0830002	 add         r0, r3, r2
  01a54	eb000000	 bl          InterlockedIncrement

; 1004 :         }
; 1005 :     else

  01a58	ea000005	 b           |$LN1@PrcmDomain@11|
  01a5c		 |$LN2@PrcmDomain@11|

; 1006 :         {
; 1007 :         InterlockedDecrement((LONG*)&s_DomainTable[powerDomain].refCount);

  01a5c	e59d1008	 ldr         r1, [sp, #8]
  01a60	e3a0301c	 mov         r3, #0x1C
  01a64	e0020391	 mul         r2, r1, r3
  01a68	e59f300c	 ldr         r3, [pc, #0xC]
  01a6c	e0830002	 add         r0, r3, r2
  01a70	eb000000	 bl          InterlockedDecrement
  01a74		 |$LN1@PrcmDomain@11|

; 1008 :         }
; 1009 : }

  01a74	e89d6000	 ldmia       sp, {sp, lr}
  01a78	e12fff1e	 bx          lr
  01a7c		 |$LN8@PrcmDomain@11|
  01a7c		 |$LN9@PrcmDomain@11|
  01a7c	00000000	 DCD         |s_DomainTable|
  01a80		 |$M47612|

			 ENDP  ; |PrcmDomainUpdateRefCount|

	EXPORT	|PrcmProcessPostMpuWakeup|
	IMPORT	|g_pPrcmPrm|

  00080			 AREA	 |.pdata|, PDATA
|$T47621| DCD	|$LN13@PrcmProces|
	DCD	0x4000d001
; Function compile flags: /Odtp

  01a80			 AREA	 |.text|, CODE, ARM

  01a80		 |PrcmProcessPostMpuWakeup| PROC

; 1014 : {

  01a80		 |$LN13@PrcmProces|
  01a80	e24dd004	 sub         sp, sp, #4
  01a84		 |$M47618|

; 1015 :     // NOTE:
; 1016 :     //  This routine should only be called in OEMIdle where IRQ's are disabled
; 1017 :     //
; 1018 :     DWORD val;
; 1019 : 
; 1020 :     // core
; 1021 :     OUTREG32(&g_pPrcmPrm->pOMAP_CORE_PRM->PM_WKST1_CORE,
; 1022 :         INREG32(&g_pPrcmPrm->pOMAP_CORE_PRM->PM_WKST1_CORE)
; 1023 :         );

  01a84	e59f3330	 ldr         r3, [pc, #0x330]
  01a88	e5933000	 ldr         r3, [r3]
  01a8c	e2833004	 add         r3, r3, #4
  01a90	e5933000	 ldr         r3, [r3]
  01a94	e28330b0	 add         r3, r3, #0xB0
  01a98	e5932000	 ldr         r2, [r3]
  01a9c	e59f3318	 ldr         r3, [pc, #0x318]
  01aa0	e5933000	 ldr         r3, [r3]
  01aa4	e2833004	 add         r3, r3, #4
  01aa8	e5933000	 ldr         r3, [r3]
  01aac	e28330b0	 add         r3, r3, #0xB0
  01ab0	e5832000	 str         r2, [r3]

; 1024 : 
; 1025 :     OUTREG32(&g_pPrcmPrm->pOMAP_CORE_PRM->PM_WKST3_CORE,
; 1026 :         INREG32(&g_pPrcmPrm->pOMAP_CORE_PRM->PM_WKST3_CORE)
; 1027 :         );

  01ab4	e59f3300	 ldr         r3, [pc, #0x300]
  01ab8	e5933000	 ldr         r3, [r3]
  01abc	e2833004	 add         r3, r3, #4
  01ac0	e5933000	 ldr         r3, [r3]
  01ac4	e28330b8	 add         r3, r3, #0xB8
  01ac8	e5932000	 ldr         r2, [r3]
  01acc	e59f32e8	 ldr         r3, [pc, #0x2E8]
  01ad0	e5933000	 ldr         r3, [r3]
  01ad4	e2833004	 add         r3, r3, #4
  01ad8	e5933000	 ldr         r3, [r3]
  01adc	e28330b8	 add         r3, r3, #0xB8
  01ae0	e5832000	 str         r2, [r3]

; 1028 : 
; 1029 :     // peripheral
; 1030 :     OUTREG32(&g_pPrcmPrm->pOMAP_PER_PRM->PM_WKST_PER,
; 1031 :         INREG32(&g_pPrcmPrm->pOMAP_PER_PRM->PM_WKST_PER)
; 1032 :         );

  01ae4	e59f32d0	 ldr         r3, [pc, #0x2D0]
  01ae8	e5933000	 ldr         r3, [r3]
  01aec	e2833008	 add         r3, r3, #8
  01af0	e5933000	 ldr         r3, [r3]
  01af4	e28330b0	 add         r3, r3, #0xB0
  01af8	e5932000	 ldr         r2, [r3]
  01afc	e59f32b8	 ldr         r3, [pc, #0x2B8]
  01b00	e5933000	 ldr         r3, [r3]
  01b04	e2833008	 add         r3, r3, #8
  01b08	e5933000	 ldr         r3, [r3]
  01b0c	e28330b0	 add         r3, r3, #0xB0
  01b10	e5832000	 str         r2, [r3]

; 1033 : 
; 1034 :     // usbhost
; 1035 :     OUTREG32(&g_pPrcmPrm->pOMAP_USBHOST_PRM->PM_WKST_USBHOST,
; 1036 :         INREG32(&g_pPrcmPrm->pOMAP_USBHOST_PRM->PM_WKST_USBHOST)
; 1037 :         );

  01b14	e59f32a0	 ldr         r3, [pc, #0x2A0]
  01b18	e5933000	 ldr         r3, [r3]
  01b1c	e283300c	 add         r3, r3, #0xC
  01b20	e5933000	 ldr         r3, [r3]
  01b24	e28330b0	 add         r3, r3, #0xB0
  01b28	e5932000	 ldr         r2, [r3]
  01b2c	e59f3288	 ldr         r3, [pc, #0x288]
  01b30	e5933000	 ldr         r3, [r3]
  01b34	e283300c	 add         r3, r3, #0xC
  01b38	e5933000	 ldr         r3, [r3]
  01b3c	e28330b0	 add         r3, r3, #0xB0
  01b40	e5832000	 str         r2, [r3]

; 1038 : 
; 1039 :     // clear irq status for mpu
; 1040 :     val = INREG32(&g_pPrcmPrm->pOMAP_OCP_SYSTEM_PRM->PRM_IRQSTATUS_MPU);

  01b44	e59f3270	 ldr         r3, [pc, #0x270]
  01b48	e5933000	 ldr         r3, [r3]
  01b4c	e2833030	 add         r3, r3, #0x30
  01b50	e5933000	 ldr         r3, [r3]
  01b54	e2833018	 add         r3, r3, #0x18
  01b58	e5933000	 ldr         r3, [r3]
  01b5c	e58d3000	 str         r3, [sp]

; 1041 :     OUTREG32(&g_pPrcmPrm->pOMAP_OCP_SYSTEM_PRM->PRM_IRQSTATUS_MPU, 
; 1042 :         val & PRM_IRQENABLE_WKUP_EN
; 1043 :         );

  01b60	e59d3000	 ldr         r3, [sp]
  01b64	e2032001	 and         r2, r3, #1
  01b68	e59f324c	 ldr         r3, [pc, #0x24C]
  01b6c	e5933000	 ldr         r3, [r3]
  01b70	e2833030	 add         r3, r3, #0x30
  01b74	e5933000	 ldr         r3, [r3]
  01b78	e2833018	 add         r3, r3, #0x18
  01b7c	e5832000	 str         r2, [r3]

; 1044 : 
; 1045 :     // clear device context state table
; 1046 : 
; 1047 :     // core
; 1048 :     val = INREG32(&g_pPrcmPrm->pOMAP_CORE_PRM->PM_PREPWSTST_CORE);

  01b80	e59f3234	 ldr         r3, [pc, #0x234]
  01b84	e5933000	 ldr         r3, [r3]
  01b88	e2833004	 add         r3, r3, #4
  01b8c	e5933000	 ldr         r3, [r3]
  01b90	e28330e8	 add         r3, r3, #0xE8
  01b94	e5933000	 ldr         r3, [r3]
  01b98	e58d3000	 str         r3, [sp]

; 1049 :     if (((val & POWERSTATE_MASK) == POWERSTATE_OFF) || \
; 1050 :         (((val & POWERSTATE_MASK) == POWERSTATE_RETENTION) && \
; 1051 :          ((val & LOGICRETSTATE_MASK) == LOGICRETSTATE_LOGICOFF_DOMAINRET)))

  01b9c	e59d3000	 ldr         r3, [sp]
  01ba0	e3130003	 tst         r3, #3
  01ba4	0a000006	 beq         |$LN7@PrcmProces|
  01ba8	e59d3000	 ldr         r3, [sp]
  01bac	e2033003	 and         r3, r3, #3
  01bb0	e3530001	 cmp         r3, #1
  01bb4	1a00000b	 bne         |$LN8@PrcmProces|
  01bb8	e59d3000	 ldr         r3, [sp]
  01bbc	e3130004	 tst         r3, #4
  01bc0	1a000008	 bne         |$LN8@PrcmProces|
  01bc4		 |$LN7@PrcmProces|

; 1052 :         {
; 1053 :         // clear domain device context state
; 1054 :         s_DomainTable[POWERDOMAIN_CORE].rgDeviceContextState[0] = 0;

  01bc4	e59f21ec	 ldr         r2, [pc, #0x1EC]
  01bc8	e3a03000	 mov         r3, #0
  01bcc	e582302c	 str         r3, [r2, #0x2C]

; 1055 :         s_DomainTable[POWERDOMAIN_CORE].rgDeviceContextState[1] = 0;

  01bd0	e59f21e0	 ldr         r2, [pc, #0x1E0]
  01bd4	e3a03000	 mov         r3, #0
  01bd8	e5823030	 str         r3, [r2, #0x30]

; 1056 :         s_DomainTable[POWERDOMAIN_CORE].rgDeviceContextState[2] = 0;

  01bdc	e59f21d4	 ldr         r2, [pc, #0x1D4]
  01be0	e3a03000	 mov         r3, #0
  01be4	e5823034	 str         r3, [r2, #0x34]
  01be8		 |$LN8@PrcmProces|

; 1057 :         }
; 1058 : 
; 1059 :     // peripheral
; 1060 :     val = INREG32(&g_pPrcmPrm->pOMAP_PER_PRM->PM_PREPWSTST_PER);

  01be8	e59f31cc	 ldr         r3, [pc, #0x1CC]
  01bec	e5933000	 ldr         r3, [r3]
  01bf0	e2833008	 add         r3, r3, #8
  01bf4	e5933000	 ldr         r3, [r3]
  01bf8	e28330e8	 add         r3, r3, #0xE8
  01bfc	e5933000	 ldr         r3, [r3]
  01c00	e58d3000	 str         r3, [sp]

; 1061 :     if ((val & POWERSTATE_MASK) == POWERSTATE_OFF)

  01c04	e59d3000	 ldr         r3, [sp]
  01c08	e3130003	 tst         r3, #3
  01c0c	1a000008	 bne         |$LN6@PrcmProces|

; 1062 :         {
; 1063 :         // clear domain device context state
; 1064 :         s_DomainTable[POWERDOMAIN_PERIPHERAL].rgDeviceContextState[0] = 0;

  01c10	e59f21a0	 ldr         r2, [pc, #0x1A0]
  01c14	e3a03000	 mov         r3, #0
  01c18	e5823048	 str         r3, [r2, #0x48]

; 1065 :         s_DomainTable[POWERDOMAIN_PERIPHERAL].rgDeviceContextState[1] = 0;

  01c1c	e59f2194	 ldr         r2, [pc, #0x194]
  01c20	e3a03000	 mov         r3, #0
  01c24	e582304c	 str         r3, [r2, #0x4C]

; 1066 :         s_DomainTable[POWERDOMAIN_PERIPHERAL].rgDeviceContextState[2] = 0;

  01c28	e59f2188	 ldr         r2, [pc, #0x188]
  01c2c	e3a03000	 mov         r3, #0
  01c30	e5823050	 str         r3, [r2, #0x50]
  01c34		 |$LN6@PrcmProces|

; 1067 :         }
; 1068 : 
; 1069 :     // dss
; 1070 :     val = INREG32(&g_pPrcmPrm->pOMAP_DSS_PRM->PM_PREPWSTST_DSS);

  01c34	e59f3180	 ldr         r3, [pc, #0x180]
  01c38	e5933000	 ldr         r3, [r3]
  01c3c	e2833018	 add         r3, r3, #0x18
  01c40	e5933000	 ldr         r3, [r3]
  01c44	e28330e8	 add         r3, r3, #0xE8
  01c48	e5933000	 ldr         r3, [r3]
  01c4c	e58d3000	 str         r3, [sp]

; 1071 :     if ((val & POWERSTATE_MASK) == POWERSTATE_OFF)

  01c50	e59d3000	 ldr         r3, [sp]
  01c54	e3130003	 tst         r3, #3
  01c58	1a000008	 bne         |$LN5@PrcmProces|

; 1072 :         {
; 1073 :         // clear domain device context state
; 1074 :         s_DomainTable[POWERDOMAIN_DSS].rgDeviceContextState[0] = 0;

  01c5c	e59f2154	 ldr         r2, [pc, #0x154]
  01c60	e3a03000	 mov         r3, #0
  01c64	e58230b8	 str         r3, [r2, #0xB8]

; 1075 :         s_DomainTable[POWERDOMAIN_DSS].rgDeviceContextState[1] = 0;

  01c68	e59f2148	 ldr         r2, [pc, #0x148]
  01c6c	e3a03000	 mov         r3, #0
  01c70	e58230bc	 str         r3, [r2, #0xBC]

; 1076 :         s_DomainTable[POWERDOMAIN_DSS].rgDeviceContextState[2] = 0;

  01c74	e59f213c	 ldr         r2, [pc, #0x13C]
  01c78	e3a03000	 mov         r3, #0
  01c7c	e58230c0	 str         r3, [r2, #0xC0]
  01c80		 |$LN5@PrcmProces|

; 1077 :         }
; 1078 : 
; 1079 :     // usbhost
; 1080 :     val = INREG32(&g_pPrcmPrm->pOMAP_USBHOST_PRM->PM_PREPWSTST_USBHOST);

  01c80	e59f3134	 ldr         r3, [pc, #0x134]
  01c84	e5933000	 ldr         r3, [r3]
  01c88	e283300c	 add         r3, r3, #0xC
  01c8c	e5933000	 ldr         r3, [r3]
  01c90	e28330e8	 add         r3, r3, #0xE8
  01c94	e5933000	 ldr         r3, [r3]
  01c98	e58d3000	 str         r3, [sp]

; 1081 :     if ((val & POWERSTATE_MASK) == POWERSTATE_OFF)

  01c9c	e59d3000	 ldr         r3, [sp]
  01ca0	e3130003	 tst         r3, #3
  01ca4	1a000008	 bne         |$LN4@PrcmProces|

; 1082 :         {
; 1083 :         // clear domain device context state
; 1084 :         s_DomainTable[POWERDOMAIN_USBHOST].rgDeviceContextState[0] = 0;

  01ca8	e59f2108	 ldr         r2, [pc, #0x108]
  01cac	e3a03000	 mov         r3, #0
  01cb0	e5823064	 str         r3, [r2, #0x64]

; 1085 :         s_DomainTable[POWERDOMAIN_USBHOST].rgDeviceContextState[1] = 0;

  01cb4	e59f20fc	 ldr         r2, [pc, #0xFC]
  01cb8	e3a03000	 mov         r3, #0
  01cbc	e5823068	 str         r3, [r2, #0x68]

; 1086 :         s_DomainTable[POWERDOMAIN_USBHOST].rgDeviceContextState[2] = 0;

  01cc0	e59f20f0	 ldr         r2, [pc, #0xF0]
  01cc4	e3a03000	 mov         r3, #0
  01cc8	e582306c	 str         r3, [r2, #0x6C]
  01ccc		 |$LN4@PrcmProces|

; 1087 :         }
; 1088 : 
; 1089 :     // camera
; 1090 :     val = INREG32(&g_pPrcmPrm->pOMAP_CAM_PRM->PM_PREPWSTST_CAM);

  01ccc	e59f30e8	 ldr         r3, [pc, #0xE8]
  01cd0	e5933000	 ldr         r3, [r3]
  01cd4	e2833024	 add         r3, r3, #0x24
  01cd8	e5933000	 ldr         r3, [r3]
  01cdc	e28330e8	 add         r3, r3, #0xE8
  01ce0	e5933000	 ldr         r3, [r3]
  01ce4	e58d3000	 str         r3, [sp]

; 1091 :     if ((val & POWERSTATE_MASK) == POWERSTATE_OFF)

  01ce8	e59d3000	 ldr         r3, [sp]
  01cec	e3130003	 tst         r3, #3
  01cf0	1a000008	 bne         |$LN3@PrcmProces|

; 1092 :         {
; 1093 :         // clear domain device context state
; 1094 :         s_DomainTable[POWERDOMAIN_CAMERA].rgDeviceContextState[0] = 0;

  01cf4	e59f20bc	 ldr         r2, [pc, #0xBC]
  01cf8	e3a03000	 mov         r3, #0
  01cfc	e582310c	 str         r3, [r2, #0x10C]

; 1095 :         s_DomainTable[POWERDOMAIN_CAMERA].rgDeviceContextState[1] = 0;

  01d00	e59f20b0	 ldr         r2, [pc, #0xB0]
  01d04	e3a03000	 mov         r3, #0
  01d08	e5823110	 str         r3, [r2, #0x110]

; 1096 :         s_DomainTable[POWERDOMAIN_CAMERA].rgDeviceContextState[2] = 0;

  01d0c	e59f20a4	 ldr         r2, [pc, #0xA4]
  01d10	e3a03000	 mov         r3, #0
  01d14	e5823114	 str         r3, [r2, #0x114]
  01d18		 |$LN3@PrcmProces|

; 1097 :         }
; 1098 : 
; 1099 :     // sgx
; 1100 :     val = INREG32(&g_pPrcmPrm->pOMAP_SGX_PRM->PM_PREPWSTST_SGX);

  01d18	e59f309c	 ldr         r3, [pc, #0x9C]
  01d1c	e5933000	 ldr         r3, [r3]
  01d20	e2833028	 add         r3, r3, #0x28
  01d24	e5933000	 ldr         r3, [r3]
  01d28	e28330e8	 add         r3, r3, #0xE8
  01d2c	e5933000	 ldr         r3, [r3]
  01d30	e58d3000	 str         r3, [sp]

; 1101 :     if ((val & POWERSTATE_MASK) == POWERSTATE_OFF)

  01d34	e59d3000	 ldr         r3, [sp]
  01d38	e3130003	 tst         r3, #3
  01d3c	1a000008	 bne         |$LN2@PrcmProces|

; 1102 :         {
; 1103 :         // clear domain device context state
; 1104 :         s_DomainTable[POWERDOMAIN_SGX].rgDeviceContextState[0] = 0;

  01d40	e59f2070	 ldr         r2, [pc, #0x70]
  01d44	e3a03000	 mov         r3, #0
  01d48	e5823128	 str         r3, [r2, #0x128]

; 1105 :         s_DomainTable[POWERDOMAIN_SGX].rgDeviceContextState[1] = 0;

  01d4c	e59f2064	 ldr         r2, [pc, #0x64]
  01d50	e3a03000	 mov         r3, #0
  01d54	e582312c	 str         r3, [r2, #0x12C]

; 1106 :         s_DomainTable[POWERDOMAIN_SGX].rgDeviceContextState[2] = 0;

  01d58	e59f2058	 ldr         r2, [pc, #0x58]
  01d5c	e3a03000	 mov         r3, #0
  01d60	e5823130	 str         r3, [r2, #0x130]
  01d64		 |$LN2@PrcmProces|

; 1107 :         }
; 1108 : 
; 1109 :     // IVA2
; 1110 :     val = INREG32(&g_pPrcmPrm->pOMAP_IVA2_PRM->PM_PREPWSTST_IVA2);

  01d64	e59f3050	 ldr         r3, [pc, #0x50]
  01d68	e5933000	 ldr         r3, [r3]
  01d6c	e2833020	 add         r3, r3, #0x20
  01d70	e5933000	 ldr         r3, [r3]
  01d74	e28330e8	 add         r3, r3, #0xE8
  01d78	e5933000	 ldr         r3, [r3]
  01d7c	e58d3000	 str         r3, [sp]

; 1111 :     if ((val & POWERSTATE_MASK) == POWERSTATE_OFF)

  01d80	e59d3000	 ldr         r3, [sp]
  01d84	e3130003	 tst         r3, #3
  01d88	1a000008	 bne         |$LN1@PrcmProces|

; 1112 :         {
; 1113 :         // clear domain device context state
; 1114 :         s_DomainTable[POWERDOMAIN_IVA2].rgDeviceContextState[0] = 0;

  01d8c	e59f2024	 ldr         r2, [pc, #0x24]
  01d90	e3a03000	 mov         r3, #0
  01d94	e58230f0	 str         r3, [r2, #0xF0]

; 1115 :         s_DomainTable[POWERDOMAIN_IVA2].rgDeviceContextState[1] = 0;

  01d98	e59f2018	 ldr         r2, [pc, #0x18]
  01d9c	e3a03000	 mov         r3, #0
  01da0	e58230f4	 str         r3, [r2, #0xF4]

; 1116 :         s_DomainTable[POWERDOMAIN_IVA2].rgDeviceContextState[2] = 0;

  01da4	e59f200c	 ldr         r2, [pc, #0xC]
  01da8	e3a03000	 mov         r3, #0
  01dac	e58230f8	 str         r3, [r2, #0xF8]
  01db0		 |$LN1@PrcmProces|

; 1117 :         }
; 1118 : 
; 1119 : }

  01db0	e28dd004	 add         sp, sp, #4
  01db4	e12fff1e	 bx          lr
  01db8		 |$LN14@PrcmProces|
  01db8		 |$LN15@PrcmProces|
  01db8	00000000	 DCD         |s_DomainTable|
  01dbc		 |$LN16@PrcmProces|
  01dbc	00000000	 DCD         |g_pPrcmPrm|
  01dc0		 |$M47619|

			 ENDP  ; |PrcmProcessPostMpuWakeup|

	EXPORT	|PrcmDomainClearReset|

  00088			 AREA	 |.pdata|, PDATA
|$T47629| DCD	|$LN5@PrcmDomain@12|
	DCD	0x40007a00
; Function compile flags: /Odtp

  01dc0			 AREA	 |.text|, CODE, ARM

  01dc0		 |PrcmDomainClearReset| PROC

; 1124 : {

  01dc0		 |$LN5@PrcmDomain@12|
  01dc0		 |$M47626|

; 1125 :     // Clear the Resest states
; 1126 :     OUTREG32(&g_pPrcmPrm->pOMAP_CORE_PRM->RM_RSTST_CORE, 
; 1127 :             INREG32(&g_pPrcmPrm->pOMAP_CORE_PRM->RM_RSTST_CORE)); 

  01dc0	e59f31dc	 ldr         r3, [pc, #0x1DC]
  01dc4	e5933000	 ldr         r3, [r3]
  01dc8	e2833004	 add         r3, r3, #4
  01dcc	e5933000	 ldr         r3, [r3]
  01dd0	e2833058	 add         r3, r3, #0x58
  01dd4	e5932000	 ldr         r2, [r3]
  01dd8	e59f31c4	 ldr         r3, [pc, #0x1C4]
  01ddc	e5933000	 ldr         r3, [r3]
  01de0	e2833004	 add         r3, r3, #4
  01de4	e5933000	 ldr         r3, [r3]
  01de8	e2833058	 add         r3, r3, #0x58
  01dec	e5832000	 str         r2, [r3]

; 1128 : 
; 1129 :     OUTREG32(&g_pPrcmPrm->pOMAP_MPU_PRM->RM_RSTST_MPU, 
; 1130 :             INREG32(&g_pPrcmPrm->pOMAP_MPU_PRM->RM_RSTST_MPU)); 

  01df0	e59f31ac	 ldr         r3, [pc, #0x1AC]
  01df4	e5933000	 ldr         r3, [r3]
  01df8	e2833014	 add         r3, r3, #0x14
  01dfc	e5933000	 ldr         r3, [r3]
  01e00	e2833058	 add         r3, r3, #0x58
  01e04	e5932000	 ldr         r2, [r3]
  01e08	e59f3194	 ldr         r3, [pc, #0x194]
  01e0c	e5933000	 ldr         r3, [r3]
  01e10	e2833014	 add         r3, r3, #0x14
  01e14	e5933000	 ldr         r3, [r3]
  01e18	e2833058	 add         r3, r3, #0x58
  01e1c	e5832000	 str         r2, [r3]

; 1131 : 
; 1132 :     OUTREG32(&g_pPrcmPrm->pOMAP_EMU_PRM->RM_RSTST_EMU, 
; 1133 :             INREG32(&g_pPrcmPrm->pOMAP_EMU_PRM->RM_RSTST_EMU)); 

  01e20	e59f317c	 ldr         r3, [pc, #0x17C]
  01e24	e5933000	 ldr         r3, [r3]
  01e28	e2833010	 add         r3, r3, #0x10
  01e2c	e5933000	 ldr         r3, [r3]
  01e30	e2833058	 add         r3, r3, #0x58
  01e34	e5932000	 ldr         r2, [r3]
  01e38	e59f3164	 ldr         r3, [pc, #0x164]
  01e3c	e5933000	 ldr         r3, [r3]
  01e40	e2833010	 add         r3, r3, #0x10
  01e44	e5933000	 ldr         r3, [r3]
  01e48	e2833058	 add         r3, r3, #0x58
  01e4c	e5832000	 str         r2, [r3]

; 1134 : 
; 1135 :     OUTREG32(&g_pPrcmPrm->pOMAP_PER_PRM->RM_RSTST_PER,
; 1136 :             INREG32(&g_pPrcmPrm->pOMAP_PER_PRM->RM_RSTST_PER)); 

  01e50	e59f314c	 ldr         r3, [pc, #0x14C]
  01e54	e5933000	 ldr         r3, [r3]
  01e58	e2833008	 add         r3, r3, #8
  01e5c	e5933000	 ldr         r3, [r3]
  01e60	e2833058	 add         r3, r3, #0x58
  01e64	e5932000	 ldr         r2, [r3]
  01e68	e59f3134	 ldr         r3, [pc, #0x134]
  01e6c	e5933000	 ldr         r3, [r3]
  01e70	e2833008	 add         r3, r3, #8
  01e74	e5933000	 ldr         r3, [r3]
  01e78	e2833058	 add         r3, r3, #0x58
  01e7c	e5832000	 str         r2, [r3]

; 1137 : 
; 1138 :     OUTREG32(&g_pPrcmPrm->pOMAP_IVA2_PRM->RM_RSTST_IVA2,
; 1139 :             INREG32(&g_pPrcmPrm->pOMAP_IVA2_PRM->RM_RSTST_IVA2)); 

  01e80	e59f311c	 ldr         r3, [pc, #0x11C]
  01e84	e5933000	 ldr         r3, [r3]
  01e88	e2833020	 add         r3, r3, #0x20
  01e8c	e5933000	 ldr         r3, [r3]
  01e90	e2833058	 add         r3, r3, #0x58
  01e94	e5932000	 ldr         r2, [r3]
  01e98	e59f3104	 ldr         r3, [pc, #0x104]
  01e9c	e5933000	 ldr         r3, [r3]
  01ea0	e2833020	 add         r3, r3, #0x20
  01ea4	e5933000	 ldr         r3, [r3]
  01ea8	e2833058	 add         r3, r3, #0x58
  01eac	e5832000	 str         r2, [r3]

; 1140 : 
; 1141 :     OUTREG32(&g_pPrcmPrm->pOMAP_SGX_PRM->RM_RSTST_SGX,
; 1142 :             INREG32(&g_pPrcmPrm->pOMAP_SGX_PRM->RM_RSTST_SGX)); 

  01eb0	e59f30ec	 ldr         r3, [pc, #0xEC]
  01eb4	e5933000	 ldr         r3, [r3]
  01eb8	e2833028	 add         r3, r3, #0x28
  01ebc	e5933000	 ldr         r3, [r3]
  01ec0	e2833058	 add         r3, r3, #0x58
  01ec4	e5932000	 ldr         r2, [r3]
  01ec8	e59f30d4	 ldr         r3, [pc, #0xD4]
  01ecc	e5933000	 ldr         r3, [r3]
  01ed0	e2833028	 add         r3, r3, #0x28
  01ed4	e5933000	 ldr         r3, [r3]
  01ed8	e2833058	 add         r3, r3, #0x58
  01edc	e5832000	 str         r2, [r3]

; 1143 : 
; 1144 :     OUTREG32(&g_pPrcmPrm->pOMAP_DSS_PRM->RM_RSTST_DSS,
; 1145 :             INREG32(&g_pPrcmPrm->pOMAP_DSS_PRM->RM_RSTST_DSS)); 

  01ee0	e59f30bc	 ldr         r3, [pc, #0xBC]
  01ee4	e5933000	 ldr         r3, [r3]
  01ee8	e2833018	 add         r3, r3, #0x18
  01eec	e5933000	 ldr         r3, [r3]
  01ef0	e2833058	 add         r3, r3, #0x58
  01ef4	e5932000	 ldr         r2, [r3]
  01ef8	e59f30a4	 ldr         r3, [pc, #0xA4]
  01efc	e5933000	 ldr         r3, [r3]
  01f00	e2833018	 add         r3, r3, #0x18
  01f04	e5933000	 ldr         r3, [r3]
  01f08	e2833058	 add         r3, r3, #0x58
  01f0c	e5832000	 str         r2, [r3]

; 1146 : 
; 1147 :     OUTREG32(&g_pPrcmPrm->pOMAP_CAM_PRM->RM_RSTST_CAM,
; 1148 :             INREG32(&g_pPrcmPrm->pOMAP_CAM_PRM->RM_RSTST_CAM)); 

  01f10	e59f308c	 ldr         r3, [pc, #0x8C]
  01f14	e5933000	 ldr         r3, [r3]
  01f18	e2833024	 add         r3, r3, #0x24
  01f1c	e5933000	 ldr         r3, [r3]
  01f20	e2833058	 add         r3, r3, #0x58
  01f24	e5932000	 ldr         r2, [r3]
  01f28	e59f3074	 ldr         r3, [pc, #0x74]
  01f2c	e5933000	 ldr         r3, [r3]
  01f30	e2833024	 add         r3, r3, #0x24
  01f34	e5933000	 ldr         r3, [r3]
  01f38	e2833058	 add         r3, r3, #0x58
  01f3c	e5832000	 str         r2, [r3]

; 1149 : 
; 1150 :     OUTREG32(&g_pPrcmPrm->pOMAP_NEON_PRM->RM_RSTST_NEON,
; 1151 :             INREG32(&g_pPrcmPrm->pOMAP_NEON_PRM->RM_RSTST_NEON)); 

  01f40	e59f305c	 ldr         r3, [pc, #0x5C]
  01f44	e5933000	 ldr         r3, [r3]
  01f48	e283301c	 add         r3, r3, #0x1C
  01f4c	e5933000	 ldr         r3, [r3]
  01f50	e2833058	 add         r3, r3, #0x58
  01f54	e5932000	 ldr         r2, [r3]
  01f58	e59f3044	 ldr         r3, [pc, #0x44]
  01f5c	e5933000	 ldr         r3, [r3]
  01f60	e283301c	 add         r3, r3, #0x1C
  01f64	e5933000	 ldr         r3, [r3]
  01f68	e2833058	 add         r3, r3, #0x58
  01f6c	e5832000	 str         r2, [r3]

; 1152 : 
; 1153 :     OUTREG32(&g_pPrcmPrm->pOMAP_USBHOST_PRM->RM_RSTST_USBHOST,
; 1154 :             INREG32(&g_pPrcmPrm->pOMAP_USBHOST_PRM->RM_RSTST_USBHOST)); 

  01f70	e59f302c	 ldr         r3, [pc, #0x2C]
  01f74	e5933000	 ldr         r3, [r3]
  01f78	e283300c	 add         r3, r3, #0xC
  01f7c	e5933000	 ldr         r3, [r3]
  01f80	e2833058	 add         r3, r3, #0x58
  01f84	e5932000	 ldr         r2, [r3]
  01f88	e59f3014	 ldr         r3, [pc, #0x14]
  01f8c	e5933000	 ldr         r3, [r3]
  01f90	e283300c	 add         r3, r3, #0xC
  01f94	e5933000	 ldr         r3, [r3]
  01f98	e2833058	 add         r3, r3, #0x58
  01f9c	e5832000	 str         r2, [r3]

; 1155 : }

  01fa0	e12fff1e	 bx          lr
  01fa4		 |$LN6@PrcmDomain@12|
  01fa4		 |$LN7@PrcmDomain@12|
  01fa4	00000000	 DCD         |g_pPrcmPrm|
  01fa8		 |$M47627|

			 ENDP  ; |PrcmDomainClearReset|

	END
