; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\OMAP3530\OAL\PRCM\prcm_volt.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|PrcmVoltSetControlMode|
	IMPORT	|g_pPrcmPrm|

  00000			 AREA	 |.pdata|, PDATA
|$T47324| DCD	|$LN5@PrcmVoltSe|
	DCD	0x40002104
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\oal\prcm\prcm_volt.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PrcmVoltSetControlMode| PROC

; 31   : {

  00000		 |$LN5@PrcmVoltSe|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M47321|

; 32   :     UINT val;
; 33   :     
; 34   :     voltCtrlMode &= voltCtrlMask;

  00010	e59d200c	 ldr         r2, [sp, #0xC]
  00014	e59d3010	 ldr         r3, [sp, #0x10]
  00018	e0023003	 and         r3, r2, r3
  0001c	e58d300c	 str         r3, [sp, #0xC]

; 35   :     val = INREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VOLTCTRL) & ~voltCtrlMask;

  00020	e59f3058	 ldr         r3, [pc, #0x58]
  00024	e5933000	 ldr         r3, [r3]
  00028	e283302c	 add         r3, r3, #0x2C
  0002c	e5933000	 ldr         r3, [r3]
  00030	e2831060	 add         r1, r3, #0x60
  00034	e59d3010	 ldr         r3, [sp, #0x10]
  00038	e1e02003	 mvn         r2, r3
  0003c	e5913000	 ldr         r3, [r1]
  00040	e0033002	 and         r3, r3, r2
  00044	e58d3000	 str         r3, [sp]

; 36   :     val |= voltCtrlMode;

  00048	e59d2000	 ldr         r2, [sp]
  0004c	e59d300c	 ldr         r3, [sp, #0xC]
  00050	e1823003	 orr         r3, r2, r3
  00054	e58d3000	 str         r3, [sp]

; 37   :     OUTREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VOLTCTRL, val);

  00058	e59f3020	 ldr         r3, [pc, #0x20]
  0005c	e5933000	 ldr         r3, [r3]
  00060	e283302c	 add         r3, r3, #0x2C
  00064	e5933000	 ldr         r3, [r3]
  00068	e2832060	 add         r2, r3, #0x60
  0006c	e59d3000	 ldr         r3, [sp]
  00070	e5823000	 str         r3, [r2]

; 38   : }

  00074	e28dd004	 add         sp, sp, #4
  00078	e89d6000	 ldmia       sp, {sp, lr}
  0007c	e12fff1e	 bx          lr
  00080		 |$LN6@PrcmVoltSe|
  00080		 |$LN7@PrcmVoltSe|
  00080	00000000	 DCD         |g_pPrcmPrm|
  00084		 |$M47322|

			 ENDP  ; |PrcmVoltSetControlMode|

	EXPORT	|PrcmVoltSetControlPolarity|

  00008			 AREA	 |.pdata|, PDATA
|$T47331| DCD	|$LN5@PrcmVoltSe@2|
	DCD	0x40002104
; Function compile flags: /Odtp

  00084			 AREA	 |.text|, CODE, ARM

  00084		 |PrcmVoltSetControlPolarity| PROC

; 46   : {    

  00084		 |$LN5@PrcmVoltSe@2|
  00084	e1a0c00d	 mov         r12, sp
  00088	e92d0003	 stmdb       sp!, {r0, r1}
  0008c	e92d5000	 stmdb       sp!, {r12, lr}
  00090	e24dd004	 sub         sp, sp, #4
  00094		 |$M47328|

; 47   :     UINT val;
; 48   :     
; 49   :     polMode &= polModeMask;

  00094	e59d200c	 ldr         r2, [sp, #0xC]
  00098	e59d3010	 ldr         r3, [sp, #0x10]
  0009c	e0023003	 and         r3, r2, r3
  000a0	e58d300c	 str         r3, [sp, #0xC]

; 50   :     val = INREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_POLCTRL) & ~polModeMask;

  000a4	e59f3058	 ldr         r3, [pc, #0x58]
  000a8	e5933000	 ldr         r3, [r3]
  000ac	e283302c	 add         r3, r3, #0x2C
  000b0	e5933000	 ldr         r3, [r3]
  000b4	e283109c	 add         r1, r3, #0x9C
  000b8	e59d3010	 ldr         r3, [sp, #0x10]
  000bc	e1e02003	 mvn         r2, r3
  000c0	e5913000	 ldr         r3, [r1]
  000c4	e0033002	 and         r3, r3, r2
  000c8	e58d3000	 str         r3, [sp]

; 51   :     val |= polMode;

  000cc	e59d2000	 ldr         r2, [sp]
  000d0	e59d300c	 ldr         r3, [sp, #0xC]
  000d4	e1823003	 orr         r3, r2, r3
  000d8	e58d3000	 str         r3, [sp]

; 52   :     OUTREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_POLCTRL, val);

  000dc	e59f3020	 ldr         r3, [pc, #0x20]
  000e0	e5933000	 ldr         r3, [r3]
  000e4	e283302c	 add         r3, r3, #0x2C
  000e8	e5933000	 ldr         r3, [r3]
  000ec	e283209c	 add         r2, r3, #0x9C
  000f0	e59d3000	 ldr         r3, [sp]
  000f4	e5823000	 str         r3, [r2]

; 53   : }

  000f8	e28dd004	 add         sp, sp, #4
  000fc	e89d6000	 ldmia       sp, {sp, lr}
  00100	e12fff1e	 bx          lr
  00104		 |$LN6@PrcmVoltSe@2|
  00104		 |$LN7@PrcmVoltSe@2|
  00104	00000000	 DCD         |g_pPrcmPrm|
  00108		 |$M47329|

			 ENDP  ; |PrcmVoltSetControlPolarity|

	EXPORT	|PrcmVoltSetAutoControl|

  00010			 AREA	 |.pdata|, PDATA
|$T47338| DCD	|$LN5@PrcmVoltSe@3|
	DCD	0x40002104
; Function compile flags: /Odtp

  00108			 AREA	 |.text|, CODE, ARM

  00108		 |PrcmVoltSetAutoControl| PROC

; 61   : {    

  00108		 |$LN5@PrcmVoltSe@3|
  00108	e1a0c00d	 mov         r12, sp
  0010c	e92d0003	 stmdb       sp!, {r0, r1}
  00110	e92d5000	 stmdb       sp!, {r12, lr}
  00114	e24dd004	 sub         sp, sp, #4
  00118		 |$M47335|

; 62   :     UINT val;
; 63   :     
; 64   :     autoCtrlMode &= autoCtrlMask;

  00118	e59d200c	 ldr         r2, [sp, #0xC]
  0011c	e59d3010	 ldr         r3, [sp, #0x10]
  00120	e0023003	 and         r3, r2, r3
  00124	e58d300c	 str         r3, [sp, #0xC]

; 65   :     val = INREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VOLTCTRL) & ~autoCtrlMask;

  00128	e59f3058	 ldr         r3, [pc, #0x58]
  0012c	e5933000	 ldr         r3, [r3]
  00130	e283302c	 add         r3, r3, #0x2C
  00134	e5933000	 ldr         r3, [r3]
  00138	e2831060	 add         r1, r3, #0x60
  0013c	e59d3010	 ldr         r3, [sp, #0x10]
  00140	e1e02003	 mvn         r2, r3
  00144	e5913000	 ldr         r3, [r1]
  00148	e0033002	 and         r3, r3, r2
  0014c	e58d3000	 str         r3, [sp]

; 66   :     val |= autoCtrlMode;

  00150	e59d2000	 ldr         r2, [sp]
  00154	e59d300c	 ldr         r3, [sp, #0xC]
  00158	e1823003	 orr         r3, r2, r3
  0015c	e58d3000	 str         r3, [sp]

; 67   :     OUTREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VOLTCTRL, val);

  00160	e59f3020	 ldr         r3, [pc, #0x20]
  00164	e5933000	 ldr         r3, [r3]
  00168	e283302c	 add         r3, r3, #0x2C
  0016c	e5933000	 ldr         r3, [r3]
  00170	e2832060	 add         r2, r3, #0x60
  00174	e59d3000	 ldr         r3, [sp]
  00178	e5823000	 str         r3, [r2]

; 68   : }

  0017c	e28dd004	 add         sp, sp, #4
  00180	e89d6000	 ldmia       sp, {sp, lr}
  00184	e12fff1e	 bx          lr
  00188		 |$LN6@PrcmVoltSe@3|
  00188		 |$LN7@PrcmVoltSe@3|
  00188	00000000	 DCD         |g_pPrcmPrm|
  0018c		 |$M47336|

			 ENDP  ; |PrcmVoltSetAutoControl|

	EXPORT	|PrcmVoltI2cInitialize|

  00018			 AREA	 |.pdata|, PDATA
|$T47349| DCD	|$LN13@PrcmVoltI2|
	DCD	0x4000dc04
; Function compile flags: /Odtp

  0018c			 AREA	 |.text|, CODE, ARM

  0018c		 |PrcmVoltI2cInitialize| PROC

; 79   : {

  0018c		 |$LN13@PrcmVoltI2|
  0018c	e1a0c00d	 mov         r12, sp
  00190	e92d000f	 stmdb       sp!, {r0 - r3}
  00194	e92d5000	 stmdb       sp!, {r12, lr}
  00198	e24dd010	 sub         sp, sp, #0x10
  0019c		 |$M47346|

; 80   :     UINT    val;
; 81   :     
; 82   :     switch (vp)

  0019c	e59d3018	 ldr         r3, [sp, #0x18]
  001a0	e58d3004	 str         r3, [sp, #4]
  001a4	e59d3004	 ldr         r3, [sp, #4]
  001a8	e3530000	 cmp         r3, #0
  001ac	0a000003	 beq         |$LN2@PrcmVoltI2|
  001b0	e59d3004	 ldr         r3, [sp, #4]
  001b4	e3530001	 cmp         r3, #1
  001b8	0a000065	 beq         |$LN1@PrcmVoltI2|
  001bc	ea0000ca	 b           |$LN3@PrcmVoltI2|
  001c0		 |$LN2@PrcmVoltI2|

; 83   :         {
; 84   :         case kVoltageProcessor1:
; 85   :             // set slave address
; 86   :             val = INREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VC_SMPS_SA);

  001c0	e59f3330	 ldr         r3, [pc, #0x330]
  001c4	e5933000	 ldr         r3, [r3]
  001c8	e283302c	 add         r3, r3, #0x2C
  001cc	e5933000	 ldr         r3, [r3]
  001d0	e2833020	 add         r3, r3, #0x20
  001d4	e5933000	 ldr         r3, [r3]
  001d8	e58d3000	 str         r3, [sp]

; 87   :             val &= ~SMPS_SA0_MASK;

  001dc	e59d2000	 ldr         r2, [sp]
  001e0	e3e0307f	 mvn         r3, #0x7F
  001e4	e0023003	 and         r3, r2, r3
  001e8	e58d3000	 str         r3, [sp]

; 88   :             val |= ((slaveAddr << SMPS_SA0_SHIFT) & SMPS_SA0_MASK);

  001ec	e5dd301c	 ldrb        r3, [sp, #0x1C]
  001f0	e203207f	 and         r2, r3, #0x7F
  001f4	e59d3000	 ldr         r3, [sp]
  001f8	e1833002	 orr         r3, r3, r2
  001fc	e58d3000	 str         r3, [sp]

; 89   :             OUTREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VC_SMPS_SA, val);

  00200	e59f32f0	 ldr         r3, [pc, #0x2F0]
  00204	e5933000	 ldr         r3, [r3]
  00208	e283302c	 add         r3, r3, #0x2C
  0020c	e5933000	 ldr         r3, [r3]
  00210	e2832020	 add         r2, r3, #0x20
  00214	e59d3000	 ldr         r3, [sp]
  00218	e5823000	 str         r3, [r2]

; 90   : 
; 91   :             // set voltage register address
; 92   :             val = INREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VC_SMPS_VOL_RA);

  0021c	e59f32d4	 ldr         r3, [pc, #0x2D4]
  00220	e5933000	 ldr         r3, [r3]
  00224	e283302c	 add         r3, r3, #0x2C
  00228	e5933000	 ldr         r3, [r3]
  0022c	e2833024	 add         r3, r3, #0x24
  00230	e5933000	 ldr         r3, [r3]
  00234	e58d3000	 str         r3, [sp]

; 93   :             val &= ~SMPS_VOLRA0_MASK;

  00238	e59d2000	 ldr         r2, [sp]
  0023c	e3e030ff	 mvn         r3, #0xFF
  00240	e0023003	 and         r3, r2, r3
  00244	e58d3000	 str         r3, [sp]

; 94   :             val |= ((voltAddr << SMPS_VOLRA0_SHIFT) & SMPS_VOLRA0_MASK);

  00248	e5dd3024	 ldrb        r3, [sp, #0x24]
  0024c	e20320ff	 and         r2, r3, #0xFF
  00250	e59d3000	 ldr         r3, [sp]
  00254	e1833002	 orr         r3, r3, r2
  00258	e58d3000	 str         r3, [sp]

; 95   :             OUTREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VC_SMPS_VOL_RA, val);

  0025c	e59f3294	 ldr         r3, [pc, #0x294]
  00260	e5933000	 ldr         r3, [r3]
  00264	e283302c	 add         r3, r3, #0x2C
  00268	e5933000	 ldr         r3, [r3]
  0026c	e2832024	 add         r2, r3, #0x24
  00270	e59d3000	 ldr         r3, [sp]
  00274	e5823000	 str         r3, [r2]

; 96   : 
; 97   :             // set cmd register address
; 98   :             val = INREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VC_SMPS_CMD_RA);

  00278	e59f3278	 ldr         r3, [pc, #0x278]
  0027c	e5933000	 ldr         r3, [r3]
  00280	e283302c	 add         r3, r3, #0x2C
  00284	e5933000	 ldr         r3, [r3]
  00288	e2833028	 add         r3, r3, #0x28
  0028c	e5933000	 ldr         r3, [r3]
  00290	e58d3000	 str         r3, [sp]

; 99   :             val &= ~SMPS_CMDRA0_MASK;

  00294	e59d2000	 ldr         r2, [sp]
  00298	e3e030ff	 mvn         r3, #0xFF
  0029c	e0023003	 and         r3, r2, r3
  002a0	e58d3000	 str         r3, [sp]

; 100  :             val |= ((cmdAddr << SMPS_CMDRA0_SHIFT) & SMPS_CMDRA0_MASK);

  002a4	e5dd3020	 ldrb        r3, [sp, #0x20]
  002a8	e20320ff	 and         r2, r3, #0xFF
  002ac	e59d3000	 ldr         r3, [sp]
  002b0	e1833002	 orr         r3, r3, r2
  002b4	e58d3000	 str         r3, [sp]

; 101  :             OUTREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VC_SMPS_CMD_RA, val);

  002b8	e59f3238	 ldr         r3, [pc, #0x238]
  002bc	e5933000	 ldr         r3, [r3]
  002c0	e283302c	 add         r3, r3, #0x2C
  002c4	e5933000	 ldr         r3, [r3]
  002c8	e2832028	 add         r2, r3, #0x28
  002cc	e59d3000	 ldr         r3, [sp]
  002d0	e5823000	 str         r3, [r2]

; 102  : 
; 103  :             // set mux for voltage control register address            
; 104  :             val = INREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VC_CH_CONF);            

  002d4	e59f321c	 ldr         r3, [pc, #0x21C]
  002d8	e5933000	 ldr         r3, [r3]
  002dc	e283302c	 add         r3, r3, #0x2C
  002e0	e5933000	 ldr         r3, [r3]
  002e4	e2833034	 add         r3, r3, #0x34
  002e8	e5933000	 ldr         r3, [r3]
  002ec	e58d3000	 str         r3, [sp]

; 105  :             val &= ~(SMPS_SA0 | SMPS_RAV0 | SMPS_RAC0 | SMPS_CMD0);

  002f0	e59d2000	 ldr         r2, [sp]
  002f4	e3e03017	 mvn         r3, #0x17
  002f8	e0023003	 and         r3, r2, r3
  002fc	e58d3000	 str         r3, [sp]

; 106  :             val = (bUseCmdAddr != FALSE) ? val | SMPS_RACEN0 : val & ~SMPS_RACEN0;

  00300	e59d3028	 ldr         r3, [sp, #0x28]
  00304	e3530000	 cmp         r3, #0
  00308	0a000003	 beq         |$LN7@PrcmVoltI2|
  0030c	e59d3000	 ldr         r3, [sp]
  00310	e3833008	 orr         r3, r3, #8
  00314	e58d3008	 str         r3, [sp, #8]
  00318	ea000003	 b           |$LN8@PrcmVoltI2|
  0031c		 |$LN7@PrcmVoltI2|
  0031c	e59d2000	 ldr         r2, [sp]
  00320	e3e03008	 mvn         r3, #8
  00324	e0023003	 and         r3, r2, r3
  00328	e58d3008	 str         r3, [sp, #8]
  0032c		 |$LN8@PrcmVoltI2|
  0032c	e59d3008	 ldr         r3, [sp, #8]
  00330	e58d3000	 str         r3, [sp]

; 107  :             OUTREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VC_CH_CONF, val);   

  00334	e59f31bc	 ldr         r3, [pc, #0x1BC]
  00338	e5933000	 ldr         r3, [r3]
  0033c	e283302c	 add         r3, r3, #0x2C
  00340	e5933000	 ldr         r3, [r3]
  00344	e2832034	 add         r2, r3, #0x34
  00348	e59d3000	 ldr         r3, [sp]
  0034c	e5823000	 str         r3, [r2]

; 108  :             break;

  00350	ea000065	 b           |$LN3@PrcmVoltI2|
  00354		 |$LN1@PrcmVoltI2|

; 109  : 
; 110  :         case kVoltageProcessor2:
; 111  :             // set slave address
; 112  :             val = INREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VC_SMPS_SA);

  00354	e59f319c	 ldr         r3, [pc, #0x19C]
  00358	e5933000	 ldr         r3, [r3]
  0035c	e283302c	 add         r3, r3, #0x2C
  00360	e5933000	 ldr         r3, [r3]
  00364	e2833020	 add         r3, r3, #0x20
  00368	e5933000	 ldr         r3, [r3]
  0036c	e58d3000	 str         r3, [sp]

; 113  :             val &= ~SMPS_SA1_MASK;

  00370	e59d2000	 ldr         r2, [sp]
  00374	e3e0387f	 mvn         r3, #0x7F, 16
  00378	e0023003	 and         r3, r2, r3
  0037c	e58d3000	 str         r3, [sp]

; 114  :             val |= ((slaveAddr << SMPS_SA1_SHIFT) & SMPS_SA1_MASK);

  00380	e5dd301c	 ldrb        r3, [sp, #0x1C]
  00384	e1a03803	 mov         r3, r3, lsl #16
  00388	e203287f	 and         r2, r3, #0x7F, 16
  0038c	e59d3000	 ldr         r3, [sp]
  00390	e1833002	 orr         r3, r3, r2
  00394	e58d3000	 str         r3, [sp]

; 115  :             OUTREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VC_SMPS_SA, val);

  00398	e59f3158	 ldr         r3, [pc, #0x158]
  0039c	e5933000	 ldr         r3, [r3]
  003a0	e283302c	 add         r3, r3, #0x2C
  003a4	e5933000	 ldr         r3, [r3]
  003a8	e2832020	 add         r2, r3, #0x20
  003ac	e59d3000	 ldr         r3, [sp]
  003b0	e5823000	 str         r3, [r2]

; 116  : 
; 117  :             // set voltage register address
; 118  :             val = INREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VC_SMPS_VOL_RA);

  003b4	e59f313c	 ldr         r3, [pc, #0x13C]
  003b8	e5933000	 ldr         r3, [r3]
  003bc	e283302c	 add         r3, r3, #0x2C
  003c0	e5933000	 ldr         r3, [r3]
  003c4	e2833024	 add         r3, r3, #0x24
  003c8	e5933000	 ldr         r3, [r3]
  003cc	e58d3000	 str         r3, [sp]

; 119  :             val &= ~SMPS_VOLRA1_MASK;

  003d0	e59d2000	 ldr         r2, [sp]
  003d4	e3e038ff	 mvn         r3, #0xFF, 16
  003d8	e0023003	 and         r3, r2, r3
  003dc	e58d3000	 str         r3, [sp]

; 120  :             val |= ((voltAddr << SMPS_VOLRA1_SHIFT) & SMPS_VOLRA1_MASK);

  003e0	e5dd3024	 ldrb        r3, [sp, #0x24]
  003e4	e1a03803	 mov         r3, r3, lsl #16
  003e8	e20328ff	 and         r2, r3, #0xFF, 16
  003ec	e59d3000	 ldr         r3, [sp]
  003f0	e1833002	 orr         r3, r3, r2
  003f4	e58d3000	 str         r3, [sp]

; 121  :             OUTREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VC_SMPS_VOL_RA, val);

  003f8	e59f30f8	 ldr         r3, [pc, #0xF8]
  003fc	e5933000	 ldr         r3, [r3]
  00400	e283302c	 add         r3, r3, #0x2C
  00404	e5933000	 ldr         r3, [r3]
  00408	e2832024	 add         r2, r3, #0x24
  0040c	e59d3000	 ldr         r3, [sp]
  00410	e5823000	 str         r3, [r2]

; 122  : 
; 123  :             // set cmd register address
; 124  :             val = INREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VC_SMPS_CMD_RA);

  00414	e59f30dc	 ldr         r3, [pc, #0xDC]
  00418	e5933000	 ldr         r3, [r3]
  0041c	e283302c	 add         r3, r3, #0x2C
  00420	e5933000	 ldr         r3, [r3]
  00424	e2833028	 add         r3, r3, #0x28
  00428	e5933000	 ldr         r3, [r3]
  0042c	e58d3000	 str         r3, [sp]

; 125  :             val &= ~SMPS_CMDRA1_MASK;

  00430	e59d2000	 ldr         r2, [sp]
  00434	e3e038ff	 mvn         r3, #0xFF, 16
  00438	e0023003	 and         r3, r2, r3
  0043c	e58d3000	 str         r3, [sp]

; 126  :             val |= ((cmdAddr << SMPS_CMDRA1_SHIFT) & SMPS_CMDRA1_MASK);

  00440	e5dd3020	 ldrb        r3, [sp, #0x20]
  00444	e1a03803	 mov         r3, r3, lsl #16
  00448	e20328ff	 and         r2, r3, #0xFF, 16
  0044c	e59d3000	 ldr         r3, [sp]
  00450	e1833002	 orr         r3, r3, r2
  00454	e58d3000	 str         r3, [sp]

; 127  :             OUTREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VC_SMPS_CMD_RA, val);

  00458	e59f3098	 ldr         r3, [pc, #0x98]
  0045c	e5933000	 ldr         r3, [r3]
  00460	e283302c	 add         r3, r3, #0x2C
  00464	e5933000	 ldr         r3, [r3]
  00468	e2832028	 add         r2, r3, #0x28
  0046c	e59d3000	 ldr         r3, [sp]
  00470	e5823000	 str         r3, [r2]

; 128  : 
; 129  :             // set mux for voltage control register address            
; 130  :             val = INREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VC_CH_CONF);            

  00474	e59f307c	 ldr         r3, [pc, #0x7C]
  00478	e5933000	 ldr         r3, [r3]
  0047c	e283302c	 add         r3, r3, #0x2C
  00480	e5933000	 ldr         r3, [r3]
  00484	e2833034	 add         r3, r3, #0x34
  00488	e5933000	 ldr         r3, [r3]
  0048c	e58d3000	 str         r3, [sp]

; 131  :             val |= (SMPS_SA1 | SMPS_RAV1 | SMPS_RAC1 | SMPS_CMD1);

  00490	e59d3000	 ldr         r3, [sp]
  00494	e3833817	 orr         r3, r3, #0x17, 16
  00498	e58d3000	 str         r3, [sp]

; 132  :             val = (bUseCmdAddr != FALSE) ? val | SMPS_RACEN1 : val & ~SMPS_RACEN1;

  0049c	e59d3028	 ldr         r3, [sp, #0x28]
  004a0	e3530000	 cmp         r3, #0
  004a4	0a000003	 beq         |$LN9@PrcmVoltI2|
  004a8	e59d3000	 ldr         r3, [sp]
  004ac	e3833702	 orr         r3, r3, #2, 14
  004b0	e58d300c	 str         r3, [sp, #0xC]
  004b4	ea000003	 b           |$LN10@PrcmVoltI2|
  004b8		 |$LN9@PrcmVoltI2|
  004b8	e59d2000	 ldr         r2, [sp]
  004bc	e3e03702	 mvn         r3, #2, 14
  004c0	e0023003	 and         r3, r2, r3
  004c4	e58d300c	 str         r3, [sp, #0xC]
  004c8		 |$LN10@PrcmVoltI2|
  004c8	e59d300c	 ldr         r3, [sp, #0xC]
  004cc	e58d3000	 str         r3, [sp]

; 133  :             OUTREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VC_CH_CONF, val);

  004d0	e59f3020	 ldr         r3, [pc, #0x20]
  004d4	e5933000	 ldr         r3, [r3]
  004d8	e283302c	 add         r3, r3, #0x2C
  004dc	e5933000	 ldr         r3, [r3]
  004e0	e2832034	 add         r2, r3, #0x34
  004e4	e59d3000	 ldr         r3, [sp]
  004e8	e5823000	 str         r3, [r2]
  004ec		 |$LN3@PrcmVoltI2|

; 134  :             break;
; 135  :         }
; 136  : }

  004ec	e28dd010	 add         sp, sp, #0x10
  004f0	e89d6000	 ldmia       sp, {sp, lr}
  004f4	e12fff1e	 bx          lr
  004f8		 |$LN14@PrcmVoltI2|
  004f8		 |$LN15@PrcmVoltI2|
  004f8	00000000	 DCD         |g_pPrcmPrm|
  004fc		 |$M47347|

			 ENDP  ; |PrcmVoltI2cInitialize|

	EXPORT	|PrcmVoltI2cSetHighSpeedMode|

  00020			 AREA	 |.pdata|, PDATA
|$T47356| DCD	|$LN7@PrcmVoltI2@2|
	DCD	0x40002b04
; Function compile flags: /Odtp

  004fc			 AREA	 |.text|, CODE, ARM

  004fc		 |PrcmVoltI2cSetHighSpeedMode| PROC

; 145  : {

  004fc		 |$LN7@PrcmVoltI2@2|
  004fc	e1a0c00d	 mov         r12, sp
  00500	e92d0007	 stmdb       sp!, {r0 - r2}
  00504	e92d5000	 stmdb       sp!, {r12, lr}
  00508	e24dd004	 sub         sp, sp, #4
  0050c		 |$M47353|

; 146  :     UINT    val;
; 147  : 
; 148  :     val = INREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VC_I2C_CFG);

  0050c	e59f3090	 ldr         r3, [pc, #0x90]
  00510	e5933000	 ldr         r3, [r3]
  00514	e283302c	 add         r3, r3, #0x2C
  00518	e5933000	 ldr         r3, [r3]
  0051c	e2833038	 add         r3, r3, #0x38
  00520	e5933000	 ldr         r3, [r3]
  00524	e58d3000	 str         r3, [sp]

; 149  : 
; 150  :     // build up value
; 151  :     val &= ~(SMPS_HSEN | SMPS_SREN | SMPS_MCODE_MASK);

  00528	e59d2000	 ldr         r2, [sp]
  0052c	e3e0301f	 mvn         r3, #0x1F
  00530	e0023003	 and         r3, r2, r3
  00534	e58d3000	 str         r3, [sp]

; 152  :     if (bHSMode != FALSE) val |= SMPS_HSEN;

  00538	e59d300c	 ldr         r3, [sp, #0xC]
  0053c	e3530000	 cmp         r3, #0
  00540	0a000002	 beq         |$LN2@PrcmVoltI2@2|
  00544	e59d3000	 ldr         r3, [sp]
  00548	e3833010	 orr         r3, r3, #0x10
  0054c	e58d3000	 str         r3, [sp]
  00550		 |$LN2@PrcmVoltI2@2|

; 153  :     if (bRepeatStartMode != FALSE) val |= SMPS_SREN;

  00550	e59d3010	 ldr         r3, [sp, #0x10]
  00554	e3530000	 cmp         r3, #0
  00558	0a000002	 beq         |$LN1@PrcmVoltI2@2|
  0055c	e59d3000	 ldr         r3, [sp]
  00560	e3833008	 orr         r3, r3, #8
  00564	e58d3000	 str         r3, [sp]
  00568		 |$LN1@PrcmVoltI2@2|

; 154  :     val |= ((mcode & SMPS_MCODE_MASK) << SMPS_MCODE_SHIFT);

  00568	e5dd3014	 ldrb        r3, [sp, #0x14]
  0056c	e2032007	 and         r2, r3, #7
  00570	e59d3000	 ldr         r3, [sp]
  00574	e1833002	 orr         r3, r3, r2
  00578	e58d3000	 str         r3, [sp]

; 155  : 
; 156  :     // write-up result
; 157  :     OUTREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VC_I2C_CFG, val);

  0057c	e59f3020	 ldr         r3, [pc, #0x20]
  00580	e5933000	 ldr         r3, [r3]
  00584	e283302c	 add         r3, r3, #0x2C
  00588	e5933000	 ldr         r3, [r3]
  0058c	e2832038	 add         r2, r3, #0x38
  00590	e59d3000	 ldr         r3, [sp]
  00594	e5823000	 str         r3, [r2]

; 158  : }

  00598	e28dd004	 add         sp, sp, #4
  0059c	e89d6000	 ldmia       sp, {sp, lr}
  005a0	e12fff1e	 bx          lr
  005a4		 |$LN8@PrcmVoltI2@2|
  005a4		 |$LN9@PrcmVoltI2@2|
  005a4	00000000	 DCD         |g_pPrcmPrm|
  005a8		 |$M47354|

			 ENDP  ; |PrcmVoltI2cSetHighSpeedMode|

	EXPORT	|PrcmVoltInitializeVoltageLevels|

  00028			 AREA	 |.pdata|, PDATA
|$T47363| DCD	|$LN9@PrcmVoltIn|
	DCD	0x40003104
; Function compile flags: /Odtp

  005a8			 AREA	 |.text|, CODE, ARM

  005a8		 |PrcmVoltInitializeVoltageLevels| PROC

; 169  : {

  005a8		 |$LN9@PrcmVoltIn|
  005a8	e1a0c00d	 mov         r12, sp
  005ac	e92d000f	 stmdb       sp!, {r0 - r3}
  005b0	e92d5000	 stmdb       sp!, {r12, lr}
  005b4	e24dd008	 sub         sp, sp, #8
  005b8		 |$M47360|

; 170  :     UINT    val;
; 171  : 
; 172  :     val = (vddOn << SMPS_ON_SHIFT);

  005b8	e59d3014	 ldr         r3, [sp, #0x14]
  005bc	e1a03c03	 mov         r3, r3, lsl #24
  005c0	e58d3000	 str         r3, [sp]

; 173  :     val |= (vddOnLP << SMPS_ONLP_SHIFT);

  005c4	e59d3018	 ldr         r3, [sp, #0x18]
  005c8	e1a02803	 mov         r2, r3, lsl #16
  005cc	e59d3000	 ldr         r3, [sp]
  005d0	e1833002	 orr         r3, r3, r2
  005d4	e58d3000	 str         r3, [sp]

; 174  :     val |= (vddRetention << SMPS_RET_SHIFT);

  005d8	e59d301c	 ldr         r3, [sp, #0x1C]
  005dc	e1a02403	 mov         r2, r3, lsl #8
  005e0	e59d3000	 ldr         r3, [sp]
  005e4	e1833002	 orr         r3, r3, r2
  005e8	e58d3000	 str         r3, [sp]

; 175  :     val |= (vddOff << SMPS_OFF_SHIFT);

  005ec	e59d2000	 ldr         r2, [sp]
  005f0	e59d3020	 ldr         r3, [sp, #0x20]
  005f4	e1823003	 orr         r3, r2, r3
  005f8	e58d3000	 str         r3, [sp]

; 176  :     
; 177  :     switch (vp)

  005fc	e59d3010	 ldr         r3, [sp, #0x10]
  00600	e58d3004	 str         r3, [sp, #4]
  00604	e59d3004	 ldr         r3, [sp, #4]
  00608	e3530000	 cmp         r3, #0
  0060c	0a000003	 beq         |$LN2@PrcmVoltIn|
  00610	e59d3004	 ldr         r3, [sp, #4]
  00614	e3530001	 cmp         r3, #1
  00618	0a000008	 beq         |$LN1@PrcmVoltIn|
  0061c	ea00000e	 b           |$LN3@PrcmVoltIn|
  00620		 |$LN2@PrcmVoltIn|

; 178  :         {
; 179  :         case kVoltageProcessor1:
; 180  :             OUTREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VC_CMD_VAL_0, val);

  00620	e59f3040	 ldr         r3, [pc, #0x40]
  00624	e5933000	 ldr         r3, [r3]
  00628	e283302c	 add         r3, r3, #0x2C
  0062c	e5933000	 ldr         r3, [r3]
  00630	e283202c	 add         r2, r3, #0x2C
  00634	e59d3000	 ldr         r3, [sp]
  00638	e5823000	 str         r3, [r2]

; 181  :             break;

  0063c	ea000006	 b           |$LN3@PrcmVoltIn|
  00640		 |$LN1@PrcmVoltIn|

; 182  : 
; 183  :         case kVoltageProcessor2:
; 184  :             OUTREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VC_CMD_VAL_1, val);

  00640	e59f3020	 ldr         r3, [pc, #0x20]
  00644	e5933000	 ldr         r3, [r3]
  00648	e283302c	 add         r3, r3, #0x2C
  0064c	e5933000	 ldr         r3, [r3]
  00650	e2832030	 add         r2, r3, #0x30
  00654	e59d3000	 ldr         r3, [sp]
  00658	e5823000	 str         r3, [r2]
  0065c		 |$LN3@PrcmVoltIn|

; 185  :             break;
; 186  :         }
; 187  : }

  0065c	e28dd008	 add         sp, sp, #8
  00660	e89d6000	 ldmia       sp, {sp, lr}
  00664	e12fff1e	 bx          lr
  00668		 |$LN10@PrcmVoltIn|
  00668		 |$LN11@PrcmVoltIn|
  00668	00000000	 DCD         |g_pPrcmPrm|
  0066c		 |$M47361|

			 ENDP  ; |PrcmVoltInitializeVoltageLevels|

	EXPORT	|PrcmVoltSetErrorConfiguration|

  00030			 AREA	 |.pdata|, PDATA
|$T47370| DCD	|$LN9@PrcmVoltSe@4|
	DCD	0x40005004
; Function compile flags: /Odtp

  0066c			 AREA	 |.text|, CODE, ARM

  0066c		 |PrcmVoltSetErrorConfiguration| PROC

; 196  : {

  0066c		 |$LN9@PrcmVoltSe@4|
  0066c	e1a0c00d	 mov         r12, sp
  00670	e92d0007	 stmdb       sp!, {r0 - r2}
  00674	e92d5000	 stmdb       sp!, {r12, lr}
  00678	e24dd008	 sub         sp, sp, #8
  0067c		 |$M47367|

; 197  :     UINT val;
; 198  : 
; 199  :     switch (vp)

  0067c	e59d3010	 ldr         r3, [sp, #0x10]
  00680	e58d3004	 str         r3, [sp, #4]
  00684	e59d3004	 ldr         r3, [sp, #4]
  00688	e3530000	 cmp         r3, #0
  0068c	0a000003	 beq         |$LN2@PrcmVoltSe@4|
  00690	e59d3004	 ldr         r3, [sp, #4]
  00694	e3530001	 cmp         r3, #1
  00698	0a000020	 beq         |$LN1@PrcmVoltSe@4|
  0069c	ea00003e	 b           |$LN3@PrcmVoltSe@4|
  006a0		 |$LN2@PrcmVoltSe@4|

; 200  :         {
; 201  :         case kVoltageProcessor1:
; 202  :             val = INREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VP1_CONFIG);

  006a0	e59f3100	 ldr         r3, [pc, #0x100]
  006a4	e5933000	 ldr         r3, [r3]
  006a8	e283302c	 add         r3, r3, #0x2C
  006ac	e5933000	 ldr         r3, [r3]
  006b0	e28330b0	 add         r3, r3, #0xB0
  006b4	e5933000	 ldr         r3, [r3]
  006b8	e58d3000	 str         r3, [sp]

; 203  :             val &= ~(SMPS_ERROROFFSET_MASK | SMPS_ERRORGAIN_MASK);

  006bc	e59d2000	 ldr         r2, [sp]
  006c0	e3a03cff	 mov         r3, #0xFF, 24
  006c4	e38330ff	 orr         r3, r3, #0xFF
  006c8	e0023003	 and         r3, r2, r3
  006cc	e58d3000	 str         r3, [sp]

; 204  :             val |= ((errorGain << SMPS_ERRORGAIN_SHIFT) & SMPS_ERRORGAIN_MASK);

  006d0	e59d3018	 ldr         r3, [sp, #0x18]
  006d4	e1a03803	 mov         r3, r3, lsl #16
  006d8	e20328ff	 and         r2, r3, #0xFF, 16
  006dc	e59d3000	 ldr         r3, [sp]
  006e0	e1833002	 orr         r3, r3, r2
  006e4	e58d3000	 str         r3, [sp]

; 205  :             val |= ((errorOffset << SMPS_ERROROFFSET_SHIFT) & SMPS_ERROROFFSET_MASK);

  006e8	e59d3014	 ldr         r3, [sp, #0x14]
  006ec	e1a03c03	 mov         r3, r3, lsl #24
  006f0	e20324ff	 and         r2, r3, #0xFF, 8
  006f4	e59d3000	 ldr         r3, [sp]
  006f8	e1833002	 orr         r3, r3, r2
  006fc	e58d3000	 str         r3, [sp]

; 206  :             OUTREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VP1_CONFIG, val);

  00700	e59f30a0	 ldr         r3, [pc, #0xA0]
  00704	e5933000	 ldr         r3, [r3]
  00708	e283302c	 add         r3, r3, #0x2C
  0070c	e5933000	 ldr         r3, [r3]
  00710	e28320b0	 add         r2, r3, #0xB0
  00714	e59d3000	 ldr         r3, [sp]
  00718	e5823000	 str         r3, [r2]

; 207  :             break;

  0071c	ea00001e	 b           |$LN3@PrcmVoltSe@4|
  00720		 |$LN1@PrcmVoltSe@4|

; 208  : 
; 209  :         case kVoltageProcessor2:
; 210  :             val = INREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VP2_CONFIG);

  00720	e59f3080	 ldr         r3, [pc, #0x80]
  00724	e5933000	 ldr         r3, [r3]
  00728	e283302c	 add         r3, r3, #0x2C
  0072c	e5933000	 ldr         r3, [r3]
  00730	e28330d0	 add         r3, r3, #0xD0
  00734	e5933000	 ldr         r3, [r3]
  00738	e58d3000	 str         r3, [sp]

; 211  :             val &= ~(SMPS_ERROROFFSET_MASK | SMPS_ERRORGAIN_MASK);

  0073c	e59d2000	 ldr         r2, [sp]
  00740	e3a03cff	 mov         r3, #0xFF, 24
  00744	e38330ff	 orr         r3, r3, #0xFF
  00748	e0023003	 and         r3, r2, r3
  0074c	e58d3000	 str         r3, [sp]

; 212  :             val |= ((errorGain << SMPS_ERRORGAIN_SHIFT) & SMPS_ERRORGAIN_MASK);

  00750	e59d3018	 ldr         r3, [sp, #0x18]
  00754	e1a03803	 mov         r3, r3, lsl #16
  00758	e20328ff	 and         r2, r3, #0xFF, 16
  0075c	e59d3000	 ldr         r3, [sp]
  00760	e1833002	 orr         r3, r3, r2
  00764	e58d3000	 str         r3, [sp]

; 213  :             val |= ((errorOffset << SMPS_ERROROFFSET_SHIFT) & SMPS_ERROROFFSET_MASK);

  00768	e59d3014	 ldr         r3, [sp, #0x14]
  0076c	e1a03c03	 mov         r3, r3, lsl #24
  00770	e20324ff	 and         r2, r3, #0xFF, 8
  00774	e59d3000	 ldr         r3, [sp]
  00778	e1833002	 orr         r3, r3, r2
  0077c	e58d3000	 str         r3, [sp]

; 214  :             OUTREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VP2_CONFIG, val);

  00780	e59f3020	 ldr         r3, [pc, #0x20]
  00784	e5933000	 ldr         r3, [r3]
  00788	e283302c	 add         r3, r3, #0x2C
  0078c	e5933000	 ldr         r3, [r3]
  00790	e28320d0	 add         r2, r3, #0xD0
  00794	e59d3000	 ldr         r3, [sp]
  00798	e5823000	 str         r3, [r2]
  0079c		 |$LN3@PrcmVoltSe@4|

; 215  :             break;
; 216  :         }    
; 217  : }

  0079c	e28dd008	 add         sp, sp, #8
  007a0	e89d6000	 ldmia       sp, {sp, lr}
  007a4	e12fff1e	 bx          lr
  007a8		 |$LN10@PrcmVoltSe@4|
  007a8		 |$LN11@PrcmVoltSe@4|
  007a8	00000000	 DCD         |g_pPrcmPrm|
  007ac		 |$M47368|

			 ENDP  ; |PrcmVoltSetErrorConfiguration|

	EXPORT	|PrcmVoltSetSlewRange|

  00038			 AREA	 |.pdata|, PDATA
|$T47377| DCD	|$LN9@PrcmVoltSe@5|
	DCD	0x40005a04
; Function compile flags: /Odtp

  007ac			 AREA	 |.text|, CODE, ARM

  007ac		 |PrcmVoltSetSlewRange| PROC

; 228  : {

  007ac		 |$LN9@PrcmVoltSe@5|
  007ac	e1a0c00d	 mov         r12, sp
  007b0	e92d000f	 stmdb       sp!, {r0 - r3}
  007b4	e92d5000	 stmdb       sp!, {r12, lr}
  007b8	e24dd008	 sub         sp, sp, #8
  007bc		 |$M47374|

; 229  :     UINT val;
; 230  : 
; 231  :     switch (vp)

  007bc	e59d3010	 ldr         r3, [sp, #0x10]
  007c0	e58d3004	 str         r3, [sp, #4]
  007c4	e59d3004	 ldr         r3, [sp, #4]
  007c8	e3530000	 cmp         r3, #0
  007cc	0a000003	 beq         |$LN2@PrcmVoltSe@5|
  007d0	e59d3004	 ldr         r3, [sp, #4]
  007d4	e3530001	 cmp         r3, #1
  007d8	0a000025	 beq         |$LN1@PrcmVoltSe@5|
  007dc	ea000048	 b           |$LN3@PrcmVoltSe@5|
  007e0		 |$LN2@PrcmVoltSe@5|

; 232  :         {
; 233  :         case kVoltageProcessor1:
; 234  :             // update min slew values            
; 235  :             val = (minVStep << SMPS_VSTEPMIN_SHIFT) & SMPS_VSTEPMIN_MASK;

  007e0	e59d3014	 ldr         r3, [sp, #0x14]
  007e4	e20330ff	 and         r3, r3, #0xFF
  007e8	e58d3000	 str         r3, [sp]

; 236  :             val |= (minWaitTime << SMPS_SMPSWAITTIMEMIN_SHIFT) & SMPS_SMPSWAITTIMEMIN_MASK; 

  007ec	e59d3018	 ldr         r3, [sp, #0x18]
  007f0	e1a02403	 mov         r2, r3, lsl #8
  007f4	e3e034ff	 mvn         r3, #0xFF, 8
  007f8	e22330ff	 eor         r3, r3, #0xFF
  007fc	e0022003	 and         r2, r2, r3
  00800	e59d3000	 ldr         r3, [sp]
  00804	e1833002	 orr         r3, r3, r2
  00808	e58d3000	 str         r3, [sp]

; 237  :             OUTREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VP1_VSTEPMIN, val);

  0080c	e59f30fc	 ldr         r3, [pc, #0xFC]
  00810	e5933000	 ldr         r3, [r3]
  00814	e283302c	 add         r3, r3, #0x2C
  00818	e5933000	 ldr         r3, [r3]
  0081c	e28320b4	 add         r2, r3, #0xB4
  00820	e59d3000	 ldr         r3, [sp]
  00824	e5823000	 str         r3, [r2]

; 238  : 
; 239  :             // update max slew values
; 240  :             val = (maxVStep << SMPS_VSTEPMAX_SHIFT) & SMPS_VSTEPMAX_MASK;

  00828	e59d301c	 ldr         r3, [sp, #0x1C]
  0082c	e20330ff	 and         r3, r3, #0xFF
  00830	e58d3000	 str         r3, [sp]

; 241  :             val |= (maxWaitTime << SMPS_SMPSWAITTIMEMAX_SHIFT) & SMPS_SMPSWAITTIMEMAX_MASK; 

  00834	e59d3020	 ldr         r3, [sp, #0x20]
  00838	e1a02403	 mov         r2, r3, lsl #8
  0083c	e3e034ff	 mvn         r3, #0xFF, 8
  00840	e22330ff	 eor         r3, r3, #0xFF
  00844	e0022003	 and         r2, r2, r3
  00848	e59d3000	 ldr         r3, [sp]
  0084c	e1833002	 orr         r3, r3, r2
  00850	e58d3000	 str         r3, [sp]

; 242  :             OUTREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VP1_VSTEPMAX, val);

  00854	e59f30b4	 ldr         r3, [pc, #0xB4]
  00858	e5933000	 ldr         r3, [r3]
  0085c	e283302c	 add         r3, r3, #0x2C
  00860	e5933000	 ldr         r3, [r3]
  00864	e28320b8	 add         r2, r3, #0xB8
  00868	e59d3000	 ldr         r3, [sp]
  0086c	e5823000	 str         r3, [r2]

; 243  :             break;

  00870	ea000023	 b           |$LN3@PrcmVoltSe@5|
  00874		 |$LN1@PrcmVoltSe@5|

; 244  : 
; 245  :         case kVoltageProcessor2:
; 246  :             // update min slew values            
; 247  :             val = (minVStep << SMPS_VSTEPMIN_SHIFT) & SMPS_VSTEPMIN_MASK;

  00874	e59d3014	 ldr         r3, [sp, #0x14]
  00878	e20330ff	 and         r3, r3, #0xFF
  0087c	e58d3000	 str         r3, [sp]

; 248  :             val |= (minWaitTime << SMPS_SMPSWAITTIMEMIN_SHIFT) & SMPS_SMPSWAITTIMEMIN_MASK; 

  00880	e59d3018	 ldr         r3, [sp, #0x18]
  00884	e1a02403	 mov         r2, r3, lsl #8
  00888	e3e034ff	 mvn         r3, #0xFF, 8
  0088c	e22330ff	 eor         r3, r3, #0xFF
  00890	e0022003	 and         r2, r2, r3
  00894	e59d3000	 ldr         r3, [sp]
  00898	e1833002	 orr         r3, r3, r2
  0089c	e58d3000	 str         r3, [sp]

; 249  :             OUTREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VP2_VSTEPMIN, val);

  008a0	e59f3068	 ldr         r3, [pc, #0x68]
  008a4	e5933000	 ldr         r3, [r3]
  008a8	e283302c	 add         r3, r3, #0x2C
  008ac	e5933000	 ldr         r3, [r3]
  008b0	e28320d4	 add         r2, r3, #0xD4
  008b4	e59d3000	 ldr         r3, [sp]
  008b8	e5823000	 str         r3, [r2]

; 250  : 
; 251  :             // update max slew values
; 252  :             val = (maxVStep << SMPS_VSTEPMAX_SHIFT) & SMPS_VSTEPMAX_MASK;

  008bc	e59d301c	 ldr         r3, [sp, #0x1C]
  008c0	e20330ff	 and         r3, r3, #0xFF
  008c4	e58d3000	 str         r3, [sp]

; 253  :             val |= (maxWaitTime << SMPS_SMPSWAITTIMEMAX_SHIFT) & SMPS_SMPSWAITTIMEMAX_MASK; 

  008c8	e59d3020	 ldr         r3, [sp, #0x20]
  008cc	e1a02403	 mov         r2, r3, lsl #8
  008d0	e3e034ff	 mvn         r3, #0xFF, 8
  008d4	e22330ff	 eor         r3, r3, #0xFF
  008d8	e0022003	 and         r2, r2, r3
  008dc	e59d3000	 ldr         r3, [sp]
  008e0	e1833002	 orr         r3, r3, r2
  008e4	e58d3000	 str         r3, [sp]

; 254  :             OUTREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VP2_VSTEPMAX, val);

  008e8	e59f3020	 ldr         r3, [pc, #0x20]
  008ec	e5933000	 ldr         r3, [r3]
  008f0	e283302c	 add         r3, r3, #0x2C
  008f4	e5933000	 ldr         r3, [r3]
  008f8	e28320d8	 add         r2, r3, #0xD8
  008fc	e59d3000	 ldr         r3, [sp]
  00900	e5823000	 str         r3, [r2]
  00904		 |$LN3@PrcmVoltSe@5|

; 255  :             break;
; 256  :         }  
; 257  : }

  00904	e28dd008	 add         sp, sp, #8
  00908	e89d6000	 ldmia       sp, {sp, lr}
  0090c	e12fff1e	 bx          lr
  00910		 |$LN10@PrcmVoltSe@5|
  00910		 |$LN11@PrcmVoltSe@5|
  00910	00000000	 DCD         |g_pPrcmPrm|
  00914		 |$M47375|

			 ENDP  ; |PrcmVoltSetSlewRange|

	EXPORT	|PrcmVoltSetLimits|

  00040			 AREA	 |.pdata|, PDATA
|$T47384| DCD	|$LN9@PrcmVoltSe@6|
	DCD	0x40004204
; Function compile flags: /Odtp

  00914			 AREA	 |.text|, CODE, ARM

  00914		 |PrcmVoltSetLimits| PROC

; 267  : {

  00914		 |$LN9@PrcmVoltSe@6|
  00914	e1a0c00d	 mov         r12, sp
  00918	e92d000f	 stmdb       sp!, {r0 - r3}
  0091c	e92d5000	 stmdb       sp!, {r12, lr}
  00920	e24dd008	 sub         sp, sp, #8
  00924		 |$M47381|

; 268  :     UINT val;
; 269  : 
; 270  :     switch (vp)

  00924	e59d3010	 ldr         r3, [sp, #0x10]
  00928	e58d3004	 str         r3, [sp, #4]
  0092c	e59d3004	 ldr         r3, [sp, #4]
  00930	e3530000	 cmp         r3, #0
  00934	0a000003	 beq         |$LN2@PrcmVoltSe@6|
  00938	e59d3004	 ldr         r3, [sp, #4]
  0093c	e3530001	 cmp         r3, #1
  00940	0a000019	 beq         |$LN1@PrcmVoltSe@6|
  00944	ea000030	 b           |$LN3@PrcmVoltSe@6|
  00948		 |$LN2@PrcmVoltSe@6|

; 271  :         {
; 272  :         case kVoltageProcessor1:            
; 273  :             val = (maxVolt << SMPS_VDDMAX_SHIFT) & SMPS_VDDMAX_MASK;

  00948	e59d3018	 ldr         r3, [sp, #0x18]
  0094c	e1a03c03	 mov         r3, r3, lsl #24
  00950	e20334ff	 and         r3, r3, #0xFF, 8
  00954	e58d3000	 str         r3, [sp]

; 274  :             val |= (minVolt << SMPS_VDDMIN_SHIFT) & SMPS_VDDMIN_MASK;

  00958	e59d3014	 ldr         r3, [sp, #0x14]
  0095c	e1a03803	 mov         r3, r3, lsl #16
  00960	e20328ff	 and         r2, r3, #0xFF, 16
  00964	e59d3000	 ldr         r3, [sp]
  00968	e1833002	 orr         r3, r3, r2
  0096c	e58d3000	 str         r3, [sp]

; 275  :             val |= (timeOut << SMPS_TIMEOUT_SHIFT) & SMPS_TIMEOUT_MASK;

  00970	e59d201c	 ldr         r2, [sp, #0x1C]
  00974	e3a03cff	 mov         r3, #0xFF, 24
  00978	e38330ff	 orr         r3, r3, #0xFF
  0097c	e0022003	 and         r2, r2, r3
  00980	e59d3000	 ldr         r3, [sp]
  00984	e1833002	 orr         r3, r3, r2
  00988	e58d3000	 str         r3, [sp]

; 276  :             OUTREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VP1_VLIMITTO, val);

  0098c	e59f3084	 ldr         r3, [pc, #0x84]
  00990	e5933000	 ldr         r3, [r3]
  00994	e283302c	 add         r3, r3, #0x2C
  00998	e5933000	 ldr         r3, [r3]
  0099c	e28320bc	 add         r2, r3, #0xBC
  009a0	e59d3000	 ldr         r3, [sp]
  009a4	e5823000	 str         r3, [r2]

; 277  :             break;

  009a8	ea000017	 b           |$LN3@PrcmVoltSe@6|
  009ac		 |$LN1@PrcmVoltSe@6|

; 278  : 
; 279  :         case kVoltageProcessor2:          
; 280  :             val = (maxVolt << SMPS_VDDMAX_SHIFT) & SMPS_VDDMAX_MASK;

  009ac	e59d3018	 ldr         r3, [sp, #0x18]
  009b0	e1a03c03	 mov         r3, r3, lsl #24
  009b4	e20334ff	 and         r3, r3, #0xFF, 8
  009b8	e58d3000	 str         r3, [sp]

; 281  :             val |= (minVolt << SMPS_VDDMIN_SHIFT) & SMPS_VDDMIN_MASK;

  009bc	e59d3014	 ldr         r3, [sp, #0x14]
  009c0	e1a03803	 mov         r3, r3, lsl #16
  009c4	e20328ff	 and         r2, r3, #0xFF, 16
  009c8	e59d3000	 ldr         r3, [sp]
  009cc	e1833002	 orr         r3, r3, r2
  009d0	e58d3000	 str         r3, [sp]

; 282  :             val |= (timeOut << SMPS_TIMEOUT_SHIFT) & SMPS_TIMEOUT_MASK;

  009d4	e59d201c	 ldr         r2, [sp, #0x1C]
  009d8	e3a03cff	 mov         r3, #0xFF, 24
  009dc	e38330ff	 orr         r3, r3, #0xFF
  009e0	e0022003	 and         r2, r2, r3
  009e4	e59d3000	 ldr         r3, [sp]
  009e8	e1833002	 orr         r3, r3, r2
  009ec	e58d3000	 str         r3, [sp]

; 283  :             OUTREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VP2_VLIMITTO, val);

  009f0	e59f3020	 ldr         r3, [pc, #0x20]
  009f4	e5933000	 ldr         r3, [r3]
  009f8	e283302c	 add         r3, r3, #0x2C
  009fc	e5933000	 ldr         r3, [r3]
  00a00	e28320dc	 add         r2, r3, #0xDC
  00a04	e59d3000	 ldr         r3, [sp]
  00a08	e5823000	 str         r3, [r2]
  00a0c		 |$LN3@PrcmVoltSe@6|

; 284  :             break;
; 285  :         }  
; 286  : }

  00a0c	e28dd008	 add         sp, sp, #8
  00a10	e89d6000	 ldmia       sp, {sp, lr}
  00a14	e12fff1e	 bx          lr
  00a18		 |$LN10@PrcmVoltSe@6|
  00a18		 |$LN11@PrcmVoltSe@6|
  00a18	00000000	 DCD         |g_pPrcmPrm|
  00a1c		 |$M47382|

			 ENDP  ; |PrcmVoltSetLimits|

	EXPORT	|PrcmVoltSetVoltageLevel|

  00048			 AREA	 |.pdata|, PDATA
|$T47392| DCD	|$LN17@PrcmVoltSe@7|
	DCD	0x40006304
; Function compile flags: /Odtp

  00a1c			 AREA	 |.text|, CODE, ARM

  00a1c		 |PrcmVoltSetVoltageLevel| PROC

; 295  : {

  00a1c		 |$LN17@PrcmVoltSe@7|
  00a1c	e1a0c00d	 mov         r12, sp
  00a20	e92d0007	 stmdb       sp!, {r0 - r2}
  00a24	e92d5000	 stmdb       sp!, {r12, lr}
  00a28	e24dd010	 sub         sp, sp, #0x10
  00a2c		 |$M47389|

; 296  :     UINT    val;
; 297  :     volatile unsigned int *pPRM_VC_CMD_VAL;
; 298  : 
; 299  :     // get register to modify
; 300  :     switch (vp)

  00a2c	e59d3018	 ldr         r3, [sp, #0x18]
  00a30	e58d3008	 str         r3, [sp, #8]
  00a34	e59d3008	 ldr         r3, [sp, #8]
  00a38	e3530000	 cmp         r3, #0
  00a3c	0a000003	 beq         |$LN9@PrcmVoltSe@7|
  00a40	e59d3008	 ldr         r3, [sp, #8]
  00a44	e3530001	 cmp         r3, #1
  00a48	0a000007	 beq         |$LN8@PrcmVoltSe@7|
  00a4c	ea00000d	 b           |$LN7@PrcmVoltSe@7|
  00a50		 |$LN9@PrcmVoltSe@7|

; 301  :         {
; 302  :         case kVoltageProcessor1:
; 303  :             pPRM_VC_CMD_VAL = &g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VC_CMD_VAL_0;

  00a50	e59f314c	 ldr         r3, [pc, #0x14C]
  00a54	e5933000	 ldr         r3, [r3]
  00a58	e283302c	 add         r3, r3, #0x2C
  00a5c	e5933000	 ldr         r3, [r3]
  00a60	e283302c	 add         r3, r3, #0x2C
  00a64	e58d3000	 str         r3, [sp]

; 304  :             break;

  00a68	ea000007	 b           |$LN10@PrcmVoltSe@7|
  00a6c		 |$LN8@PrcmVoltSe@7|

; 305  : 
; 306  :         case kVoltageProcessor2:
; 307  :             pPRM_VC_CMD_VAL = &g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VC_CMD_VAL_1;

  00a6c	e59f3130	 ldr         r3, [pc, #0x130]
  00a70	e5933000	 ldr         r3, [r3]
  00a74	e283302c	 add         r3, r3, #0x2C
  00a78	e5933000	 ldr         r3, [r3]
  00a7c	e2833030	 add         r3, r3, #0x30
  00a80	e58d3000	 str         r3, [sp]

; 308  :             break;

  00a84	ea000000	 b           |$LN10@PrcmVoltSe@7|
  00a88		 |$LN7@PrcmVoltSe@7|

; 309  : 
; 310  :         default:
; 311  :             return;

  00a88	ea000042	 b           |$LN12@PrcmVoltSe@7|
  00a8c		 |$LN10@PrcmVoltSe@7|

; 312  :         }
; 313  : 
; 314  :     // update register with appropriate voltage level
; 315  :     val = INREG32(pPRM_VC_CMD_VAL);

  00a8c	e59d3000	 ldr         r3, [sp]
  00a90	e5933000	 ldr         r3, [r3]
  00a94	e58d3004	 str         r3, [sp, #4]

; 316  :     switch (mask)

  00a98	e59d3020	 ldr         r3, [sp, #0x20]
  00a9c	e58d300c	 str         r3, [sp, #0xC]
  00aa0	e59d300c	 ldr         r3, [sp, #0xC]
  00aa4	e35308ff	 cmp         r3, #0xFF, 16
  00aa8	8a000009	 bhi         |$LN14@PrcmVoltSe@7|
  00aac	e59d300c	 ldr         r3, [sp, #0xC]
  00ab0	e35308ff	 cmp         r3, #0xFF, 16
  00ab4	0a000015	 beq         |$LN3@PrcmVoltSe@7|
  00ab8	e59d300c	 ldr         r3, [sp, #0xC]
  00abc	e35300ff	 cmp         r3, #0xFF
  00ac0	0a000028	 beq         |$LN1@PrcmVoltSe@7|
  00ac4	e59d300c	 ldr         r3, [sp, #0xC]
  00ac8	e3530cff	 cmp         r3, #0xFF, 24
  00acc	0a00001a	 beq         |$LN2@PrcmVoltSe@7|
  00ad0	ea00002d	 b           |$LN5@PrcmVoltSe@7|
  00ad4		 |$LN14@PrcmVoltSe@7|
  00ad4	e59d300c	 ldr         r3, [sp, #0xC]
  00ad8	e35304ff	 cmp         r3, #0xFF, 8
  00adc	0a000000	 beq         |$LN4@PrcmVoltSe@7|
  00ae0	ea000029	 b           |$LN5@PrcmVoltSe@7|
  00ae4		 |$LN4@PrcmVoltSe@7|

; 317  :         {
; 318  :         case SMPS_ON_MASK:
; 319  :             val &= ~SMPS_ON_MASK;

  00ae4	e59d2004	 ldr         r2, [sp, #4]
  00ae8	e3e034ff	 mvn         r3, #0xFF, 8
  00aec	e0023003	 and         r3, r2, r3
  00af0	e58d3004	 str         r3, [sp, #4]

; 320  :             val |= ((vdd << SMPS_ON_SHIFT) & SMPS_ON_MASK);

  00af4	e59d301c	 ldr         r3, [sp, #0x1C]
  00af8	e1a03c03	 mov         r3, r3, lsl #24
  00afc	e20324ff	 and         r2, r3, #0xFF, 8
  00b00	e59d3004	 ldr         r3, [sp, #4]
  00b04	e1833002	 orr         r3, r3, r2
  00b08	e58d3004	 str         r3, [sp, #4]

; 321  :             break;

  00b0c	ea00001e	 b           |$LN5@PrcmVoltSe@7|
  00b10		 |$LN3@PrcmVoltSe@7|

; 322  : 
; 323  :         case SMPS_ONLP_MASK:
; 324  :             val &= ~SMPS_ONLP_MASK;

  00b10	e59d2004	 ldr         r2, [sp, #4]
  00b14	e3e038ff	 mvn         r3, #0xFF, 16
  00b18	e0023003	 and         r3, r2, r3
  00b1c	e58d3004	 str         r3, [sp, #4]

; 325  :             val |= ((vdd << SMPS_ONLP_SHIFT) & SMPS_ONLP_MASK);

  00b20	e59d301c	 ldr         r3, [sp, #0x1C]
  00b24	e1a03803	 mov         r3, r3, lsl #16
  00b28	e20328ff	 and         r2, r3, #0xFF, 16
  00b2c	e59d3004	 ldr         r3, [sp, #4]
  00b30	e1833002	 orr         r3, r3, r2
  00b34	e58d3004	 str         r3, [sp, #4]

; 326  :             break;

  00b38	ea000013	 b           |$LN5@PrcmVoltSe@7|
  00b3c		 |$LN2@PrcmVoltSe@7|

; 327  : 
; 328  :         case SMPS_RET_MASK:
; 329  :             val &= ~SMPS_RET_MASK;

  00b3c	e59d2004	 ldr         r2, [sp, #4]
  00b40	e3e03cff	 mvn         r3, #0xFF, 24
  00b44	e0023003	 and         r3, r2, r3
  00b48	e58d3004	 str         r3, [sp, #4]

; 330  :             val |= ((vdd << SMPS_RET_SHIFT) & SMPS_RET_MASK);

  00b4c	e59d301c	 ldr         r3, [sp, #0x1C]
  00b50	e1a03403	 mov         r3, r3, lsl #8
  00b54	e2032cff	 and         r2, r3, #0xFF, 24
  00b58	e59d3004	 ldr         r3, [sp, #4]
  00b5c	e1833002	 orr         r3, r3, r2
  00b60	e58d3004	 str         r3, [sp, #4]

; 331  :             break;

  00b64	ea000008	 b           |$LN5@PrcmVoltSe@7|
  00b68		 |$LN1@PrcmVoltSe@7|

; 332  : 
; 333  :         case SMPS_OFF_MASK:
; 334  :             val &= ~SMPS_OFF_MASK;

  00b68	e59d2004	 ldr         r2, [sp, #4]
  00b6c	e3e030ff	 mvn         r3, #0xFF
  00b70	e0023003	 and         r3, r2, r3
  00b74	e58d3004	 str         r3, [sp, #4]

; 335  :             val |= ((vdd << SMPS_OFF_SHIFT) & SMPS_OFF_MASK);

  00b78	e59d301c	 ldr         r3, [sp, #0x1C]
  00b7c	e20320ff	 and         r2, r3, #0xFF
  00b80	e59d3004	 ldr         r3, [sp, #4]
  00b84	e1833002	 orr         r3, r3, r2
  00b88	e58d3004	 str         r3, [sp, #4]
  00b8c		 |$LN5@PrcmVoltSe@7|

; 336  :             break;
; 337  :         }
; 338  : 
; 339  :     OUTREG32(pPRM_VC_CMD_VAL, val);

  00b8c	e59d2004	 ldr         r2, [sp, #4]
  00b90	e59d3000	 ldr         r3, [sp]
  00b94	e5832000	 str         r2, [r3]
  00b98		 |$LN12@PrcmVoltSe@7|

; 340  : }

  00b98	e28dd010	 add         sp, sp, #0x10
  00b9c	e89d6000	 ldmia       sp, {sp, lr}
  00ba0	e12fff1e	 bx          lr
  00ba4		 |$LN18@PrcmVoltSe@7|
  00ba4		 |$LN19@PrcmVoltSe@7|
  00ba4	00000000	 DCD         |g_pPrcmPrm|
  00ba8		 |$M47390|

			 ENDP  ; |PrcmVoltSetVoltageLevel|

	EXPORT	|PrcmVoltSetInitVddLevel|

  00050			 AREA	 |.pdata|, PDATA
|$T47399| DCD	|$LN9@PrcmVoltSe@8|
	DCD	0x40004204
; Function compile flags: /Odtp

  00ba8			 AREA	 |.text|, CODE, ARM

  00ba8		 |PrcmVoltSetInitVddLevel| PROC

; 348  : {

  00ba8		 |$LN9@PrcmVoltSe@8|
  00ba8	e1a0c00d	 mov         r12, sp
  00bac	e92d0003	 stmdb       sp!, {r0, r1}
  00bb0	e92d5000	 stmdb       sp!, {r12, lr}
  00bb4	e24dd008	 sub         sp, sp, #8
  00bb8		 |$M47396|

; 349  :     UINT val;
; 350  : 
; 351  :     switch (vp)

  00bb8	e59d3010	 ldr         r3, [sp, #0x10]
  00bbc	e58d3004	 str         r3, [sp, #4]
  00bc0	e59d3004	 ldr         r3, [sp, #4]
  00bc4	e3530000	 cmp         r3, #0
  00bc8	0a000003	 beq         |$LN2@PrcmVoltSe@8|
  00bcc	e59d3004	 ldr         r3, [sp, #4]
  00bd0	e3530001	 cmp         r3, #1
  00bd4	0a000019	 beq         |$LN1@PrcmVoltSe@8|
  00bd8	ea000030	 b           |$LN3@PrcmVoltSe@8|
  00bdc		 |$LN2@PrcmVoltSe@8|

; 352  :         {
; 353  :         case kVoltageProcessor1:
; 354  :             val = INREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VP1_CONFIG);

  00bdc	e59f30c8	 ldr         r3, [pc, #0xC8]
  00be0	e5933000	 ldr         r3, [r3]
  00be4	e283302c	 add         r3, r3, #0x2C
  00be8	e5933000	 ldr         r3, [r3]
  00bec	e28330b0	 add         r3, r3, #0xB0
  00bf0	e5933000	 ldr         r3, [r3]
  00bf4	e58d3000	 str         r3, [sp]

; 355  :             val &= ~SMPS_INITVOLTAGE_MASK;

  00bf8	e59d2000	 ldr         r2, [sp]
  00bfc	e3e03cff	 mvn         r3, #0xFF, 24
  00c00	e0023003	 and         r3, r2, r3
  00c04	e58d3000	 str         r3, [sp]

; 356  :             val |= ((initVolt << SMPS_INITVOLTAGE_SHIFT) & SMPS_INITVOLTAGE_MASK);

  00c08	e59d3014	 ldr         r3, [sp, #0x14]
  00c0c	e1a03403	 mov         r3, r3, lsl #8
  00c10	e2032cff	 and         r2, r3, #0xFF, 24
  00c14	e59d3000	 ldr         r3, [sp]
  00c18	e1833002	 orr         r3, r3, r2
  00c1c	e58d3000	 str         r3, [sp]

; 357  :             OUTREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VP1_CONFIG, val);

  00c20	e59f3084	 ldr         r3, [pc, #0x84]
  00c24	e5933000	 ldr         r3, [r3]
  00c28	e283302c	 add         r3, r3, #0x2C
  00c2c	e5933000	 ldr         r3, [r3]
  00c30	e28320b0	 add         r2, r3, #0xB0
  00c34	e59d3000	 ldr         r3, [sp]
  00c38	e5823000	 str         r3, [r2]

; 358  :             break;

  00c3c	ea000017	 b           |$LN3@PrcmVoltSe@8|
  00c40		 |$LN1@PrcmVoltSe@8|

; 359  : 
; 360  :         case kVoltageProcessor2:
; 361  :             val = INREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VP2_CONFIG);

  00c40	e59f3064	 ldr         r3, [pc, #0x64]
  00c44	e5933000	 ldr         r3, [r3]
  00c48	e283302c	 add         r3, r3, #0x2C
  00c4c	e5933000	 ldr         r3, [r3]
  00c50	e28330d0	 add         r3, r3, #0xD0
  00c54	e5933000	 ldr         r3, [r3]
  00c58	e58d3000	 str         r3, [sp]

; 362  :             val &= ~SMPS_INITVOLTAGE_MASK;

  00c5c	e59d2000	 ldr         r2, [sp]
  00c60	e3e03cff	 mvn         r3, #0xFF, 24
  00c64	e0023003	 and         r3, r2, r3
  00c68	e58d3000	 str         r3, [sp]

; 363  :             val |= ((initVolt << SMPS_INITVOLTAGE_SHIFT) & SMPS_INITVOLTAGE_MASK);

  00c6c	e59d3014	 ldr         r3, [sp, #0x14]
  00c70	e1a03403	 mov         r3, r3, lsl #8
  00c74	e2032cff	 and         r2, r3, #0xFF, 24
  00c78	e59d3000	 ldr         r3, [sp]
  00c7c	e1833002	 orr         r3, r3, r2
  00c80	e58d3000	 str         r3, [sp]

; 364  :             OUTREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VP2_CONFIG, val);

  00c84	e59f3020	 ldr         r3, [pc, #0x20]
  00c88	e5933000	 ldr         r3, [r3]
  00c8c	e283302c	 add         r3, r3, #0x2C
  00c90	e5933000	 ldr         r3, [r3]
  00c94	e28320d0	 add         r2, r3, #0xD0
  00c98	e59d3000	 ldr         r3, [sp]
  00c9c	e5823000	 str         r3, [r2]
  00ca0		 |$LN3@PrcmVoltSe@8|

; 365  :             break;
; 366  :         }
; 367  : }

  00ca0	e28dd008	 add         sp, sp, #8
  00ca4	e89d6000	 ldmia       sp, {sp, lr}
  00ca8	e12fff1e	 bx          lr
  00cac		 |$LN10@PrcmVoltSe@8|
  00cac		 |$LN11@PrcmVoltSe@8|
  00cac	00000000	 DCD         |g_pPrcmPrm|
  00cb0		 |$M47397|

			 ENDP  ; |PrcmVoltSetInitVddLevel|

	EXPORT	|PrcmVoltEnableTimeout|

  00058			 AREA	 |.pdata|, PDATA
|$T47406| DCD	|$LN13@PrcmVoltEn|
	DCD	0x40005004
; Function compile flags: /Odtp

  00cb0			 AREA	 |.text|, CODE, ARM

  00cb0		 |PrcmVoltEnableTimeout| PROC

; 375  : {

  00cb0		 |$LN13@PrcmVoltEn|
  00cb0	e1a0c00d	 mov         r12, sp
  00cb4	e92d0003	 stmdb       sp!, {r0, r1}
  00cb8	e92d5000	 stmdb       sp!, {r12, lr}
  00cbc	e24dd004	 sub         sp, sp, #4
  00cc0		 |$M47403|

; 376  :     switch (vp)

  00cc0	e59d300c	 ldr         r3, [sp, #0xC]
  00cc4	e58d3000	 str         r3, [sp]
  00cc8	e59d3000	 ldr         r3, [sp]
  00ccc	e3530000	 cmp         r3, #0
  00cd0	0a000003	 beq         |$LN6@PrcmVoltEn|
  00cd4	e59d3000	 ldr         r3, [sp]
  00cd8	e3530001	 cmp         r3, #1
  00cdc	0a000020	 beq         |$LN3@PrcmVoltEn|
  00ce0	ea00003e	 b           |$LN7@PrcmVoltEn|
  00ce4		 |$LN6@PrcmVoltEn|

; 377  :         {
; 378  :         case kVoltageProcessor1:
; 379  :             if (bEnable != FALSE)

  00ce4	e59d3010	 ldr         r3, [sp, #0x10]
  00ce8	e3530000	 cmp         r3, #0
  00cec	0a00000d	 beq         |$LN5@PrcmVoltEn|

; 380  :                 {
; 381  :                 SETREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VP1_CONFIG, SMPS_TIMEOUTEN);

  00cf0	e59f30f4	 ldr         r3, [pc, #0xF4]
  00cf4	e5933000	 ldr         r3, [r3]
  00cf8	e283302c	 add         r3, r3, #0x2C
  00cfc	e5933000	 ldr         r3, [r3]
  00d00	e28330b0	 add         r3, r3, #0xB0
  00d04	e5933000	 ldr         r3, [r3]
  00d08	e3832008	 orr         r2, r3, #8
  00d0c	e59f30d8	 ldr         r3, [pc, #0xD8]
  00d10	e5933000	 ldr         r3, [r3]
  00d14	e283302c	 add         r3, r3, #0x2C
  00d18	e5933000	 ldr         r3, [r3]
  00d1c	e28330b0	 add         r3, r3, #0xB0
  00d20	e5832000	 str         r2, [r3]

; 382  :                 }
; 383  :             else

  00d24	ea00000d	 b           |$LN4@PrcmVoltEn|
  00d28		 |$LN5@PrcmVoltEn|

; 384  :                 {
; 385  :                 CLRREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VP1_CONFIG, SMPS_TIMEOUTEN);

  00d28	e59f30bc	 ldr         r3, [pc, #0xBC]
  00d2c	e5933000	 ldr         r3, [r3]
  00d30	e283302c	 add         r3, r3, #0x2C
  00d34	e5933000	 ldr         r3, [r3]
  00d38	e28330b0	 add         r3, r3, #0xB0
  00d3c	e5932000	 ldr         r2, [r3]
  00d40	e3e03008	 mvn         r3, #8
  00d44	e0022003	 and         r2, r2, r3
  00d48	e59f309c	 ldr         r3, [pc, #0x9C]
  00d4c	e5933000	 ldr         r3, [r3]
  00d50	e283302c	 add         r3, r3, #0x2C
  00d54	e5933000	 ldr         r3, [r3]
  00d58	e28330b0	 add         r3, r3, #0xB0
  00d5c	e5832000	 str         r2, [r3]
  00d60		 |$LN4@PrcmVoltEn|

; 386  :                 }
; 387  :             break;

  00d60	ea00001e	 b           |$LN7@PrcmVoltEn|
  00d64		 |$LN3@PrcmVoltEn|

; 388  : 
; 389  :         case kVoltageProcessor2:
; 390  :             if (bEnable != FALSE)

  00d64	e59d3010	 ldr         r3, [sp, #0x10]
  00d68	e3530000	 cmp         r3, #0
  00d6c	0a00000d	 beq         |$LN2@PrcmVoltEn|

; 391  :                 {
; 392  :                 SETREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VP2_CONFIG, SMPS_TIMEOUTEN);

  00d70	e59f3074	 ldr         r3, [pc, #0x74]
  00d74	e5933000	 ldr         r3, [r3]
  00d78	e283302c	 add         r3, r3, #0x2C
  00d7c	e5933000	 ldr         r3, [r3]
  00d80	e28330d0	 add         r3, r3, #0xD0
  00d84	e5933000	 ldr         r3, [r3]
  00d88	e3832008	 orr         r2, r3, #8
  00d8c	e59f3058	 ldr         r3, [pc, #0x58]
  00d90	e5933000	 ldr         r3, [r3]
  00d94	e283302c	 add         r3, r3, #0x2C
  00d98	e5933000	 ldr         r3, [r3]
  00d9c	e28330d0	 add         r3, r3, #0xD0
  00da0	e5832000	 str         r2, [r3]

; 393  :                 }
; 394  :             else

  00da4	ea00000d	 b           |$LN1@PrcmVoltEn|
  00da8		 |$LN2@PrcmVoltEn|

; 395  :                 {
; 396  :                 CLRREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VP2_CONFIG, SMPS_TIMEOUTEN);

  00da8	e59f303c	 ldr         r3, [pc, #0x3C]
  00dac	e5933000	 ldr         r3, [r3]
  00db0	e283302c	 add         r3, r3, #0x2C
  00db4	e5933000	 ldr         r3, [r3]
  00db8	e28330d0	 add         r3, r3, #0xD0
  00dbc	e5932000	 ldr         r2, [r3]
  00dc0	e3e03008	 mvn         r3, #8
  00dc4	e0022003	 and         r2, r2, r3
  00dc8	e59f301c	 ldr         r3, [pc, #0x1C]
  00dcc	e5933000	 ldr         r3, [r3]
  00dd0	e283302c	 add         r3, r3, #0x2C
  00dd4	e5933000	 ldr         r3, [r3]
  00dd8	e28330d0	 add         r3, r3, #0xD0
  00ddc	e5832000	 str         r2, [r3]
  00de0		 |$LN1@PrcmVoltEn|
  00de0		 |$LN7@PrcmVoltEn|

; 397  :                 }
; 398  :             break;
; 399  :         } 
; 400  : }

  00de0	e28dd004	 add         sp, sp, #4
  00de4	e89d6000	 ldmia       sp, {sp, lr}
  00de8	e12fff1e	 bx          lr
  00dec		 |$LN14@PrcmVoltEn|
  00dec		 |$LN15@PrcmVoltEn|
  00dec	00000000	 DCD         |g_pPrcmPrm|
  00df0		 |$M47404|

			 ENDP  ; |PrcmVoltEnableTimeout|

	EXPORT	|PrcmVoltEnableVp|

  00060			 AREA	 |.pdata|, PDATA
|$T47413| DCD	|$LN13@PrcmVoltEn@2|
	DCD	0x40005004
; Function compile flags: /Odtp

  00df0			 AREA	 |.text|, CODE, ARM

  00df0		 |PrcmVoltEnableVp| PROC

; 408  : {

  00df0		 |$LN13@PrcmVoltEn@2|
  00df0	e1a0c00d	 mov         r12, sp
  00df4	e92d0003	 stmdb       sp!, {r0, r1}
  00df8	e92d5000	 stmdb       sp!, {r12, lr}
  00dfc	e24dd004	 sub         sp, sp, #4
  00e00		 |$M47410|

; 409  :     switch (vp)

  00e00	e59d300c	 ldr         r3, [sp, #0xC]
  00e04	e58d3000	 str         r3, [sp]
  00e08	e59d3000	 ldr         r3, [sp]
  00e0c	e3530000	 cmp         r3, #0
  00e10	0a000003	 beq         |$LN6@PrcmVoltEn@2|
  00e14	e59d3000	 ldr         r3, [sp]
  00e18	e3530001	 cmp         r3, #1
  00e1c	0a000020	 beq         |$LN3@PrcmVoltEn@2|
  00e20	ea00003e	 b           |$LN7@PrcmVoltEn@2|
  00e24		 |$LN6@PrcmVoltEn@2|

; 410  :         {
; 411  :         case kVoltageProcessor1:
; 412  :             if (bEnable != FALSE)

  00e24	e59d3010	 ldr         r3, [sp, #0x10]
  00e28	e3530000	 cmp         r3, #0
  00e2c	0a00000d	 beq         |$LN5@PrcmVoltEn@2|

; 413  :                 {
; 414  :                 SETREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VP1_CONFIG, SMPS_VPENABLE);

  00e30	e59f30f4	 ldr         r3, [pc, #0xF4]
  00e34	e5933000	 ldr         r3, [r3]
  00e38	e283302c	 add         r3, r3, #0x2C
  00e3c	e5933000	 ldr         r3, [r3]
  00e40	e28330b0	 add         r3, r3, #0xB0
  00e44	e5933000	 ldr         r3, [r3]
  00e48	e3832001	 orr         r2, r3, #1
  00e4c	e59f30d8	 ldr         r3, [pc, #0xD8]
  00e50	e5933000	 ldr         r3, [r3]
  00e54	e283302c	 add         r3, r3, #0x2C
  00e58	e5933000	 ldr         r3, [r3]
  00e5c	e28330b0	 add         r3, r3, #0xB0
  00e60	e5832000	 str         r2, [r3]

; 415  :                 }
; 416  :             else

  00e64	ea00000d	 b           |$LN4@PrcmVoltEn@2|
  00e68		 |$LN5@PrcmVoltEn@2|

; 417  :                 {
; 418  :                 CLRREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VP1_CONFIG, SMPS_VPENABLE);

  00e68	e59f30bc	 ldr         r3, [pc, #0xBC]
  00e6c	e5933000	 ldr         r3, [r3]
  00e70	e283302c	 add         r3, r3, #0x2C
  00e74	e5933000	 ldr         r3, [r3]
  00e78	e28330b0	 add         r3, r3, #0xB0
  00e7c	e5932000	 ldr         r2, [r3]
  00e80	e3e03001	 mvn         r3, #1
  00e84	e0022003	 and         r2, r2, r3
  00e88	e59f309c	 ldr         r3, [pc, #0x9C]
  00e8c	e5933000	 ldr         r3, [r3]
  00e90	e283302c	 add         r3, r3, #0x2C
  00e94	e5933000	 ldr         r3, [r3]
  00e98	e28330b0	 add         r3, r3, #0xB0
  00e9c	e5832000	 str         r2, [r3]
  00ea0		 |$LN4@PrcmVoltEn@2|

; 419  :                 }
; 420  :             break;

  00ea0	ea00001e	 b           |$LN7@PrcmVoltEn@2|
  00ea4		 |$LN3@PrcmVoltEn@2|

; 421  : 
; 422  :         case kVoltageProcessor2:
; 423  :             if (bEnable != FALSE)

  00ea4	e59d3010	 ldr         r3, [sp, #0x10]
  00ea8	e3530000	 cmp         r3, #0
  00eac	0a00000d	 beq         |$LN2@PrcmVoltEn@2|

; 424  :                 {
; 425  :                 SETREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VP2_CONFIG, SMPS_VPENABLE);

  00eb0	e59f3074	 ldr         r3, [pc, #0x74]
  00eb4	e5933000	 ldr         r3, [r3]
  00eb8	e283302c	 add         r3, r3, #0x2C
  00ebc	e5933000	 ldr         r3, [r3]
  00ec0	e28330d0	 add         r3, r3, #0xD0
  00ec4	e5933000	 ldr         r3, [r3]
  00ec8	e3832001	 orr         r2, r3, #1
  00ecc	e59f3058	 ldr         r3, [pc, #0x58]
  00ed0	e5933000	 ldr         r3, [r3]
  00ed4	e283302c	 add         r3, r3, #0x2C
  00ed8	e5933000	 ldr         r3, [r3]
  00edc	e28330d0	 add         r3, r3, #0xD0
  00ee0	e5832000	 str         r2, [r3]

; 426  :                 }
; 427  :             else

  00ee4	ea00000d	 b           |$LN1@PrcmVoltEn@2|
  00ee8		 |$LN2@PrcmVoltEn@2|

; 428  :                 {
; 429  :                 CLRREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VP2_CONFIG, SMPS_VPENABLE);

  00ee8	e59f303c	 ldr         r3, [pc, #0x3C]
  00eec	e5933000	 ldr         r3, [r3]
  00ef0	e283302c	 add         r3, r3, #0x2C
  00ef4	e5933000	 ldr         r3, [r3]
  00ef8	e28330d0	 add         r3, r3, #0xD0
  00efc	e5932000	 ldr         r2, [r3]
  00f00	e3e03001	 mvn         r3, #1
  00f04	e0022003	 and         r2, r2, r3
  00f08	e59f301c	 ldr         r3, [pc, #0x1C]
  00f0c	e5933000	 ldr         r3, [r3]
  00f10	e283302c	 add         r3, r3, #0x2C
  00f14	e5933000	 ldr         r3, [r3]
  00f18	e28330d0	 add         r3, r3, #0xD0
  00f1c	e5832000	 str         r2, [r3]
  00f20		 |$LN1@PrcmVoltEn@2|
  00f20		 |$LN7@PrcmVoltEn@2|

; 430  :                 }
; 431  :             break;
; 432  :         }  
; 433  : }

  00f20	e28dd004	 add         sp, sp, #4
  00f24	e89d6000	 ldmia       sp, {sp, lr}
  00f28	e12fff1e	 bx          lr
  00f2c		 |$LN14@PrcmVoltEn@2|
  00f2c		 |$LN15@PrcmVoltEn@2|
  00f2c	00000000	 DCD         |g_pPrcmPrm|
  00f30		 |$M47411|

			 ENDP  ; |PrcmVoltEnableVp|

	EXPORT	|PrcmVoltFlushVoltageLevels|

  00068			 AREA	 |.pdata|, PDATA
|$T47420| DCD	|$LN10@PrcmVoltFl|
	DCD	0x40004804
; Function compile flags: /Odtp

  00f30			 AREA	 |.text|, CODE, ARM

  00f30		 |PrcmVoltFlushVoltageLevels| PROC

; 440  : {

  00f30		 |$LN10@PrcmVoltFl|
  00f30	e1a0c00d	 mov         r12, sp
  00f34	e92d0001	 stmdb       sp!, {r0}
  00f38	e92d5000	 stmdb       sp!, {r12, lr}
  00f3c	e24dd004	 sub         sp, sp, #4
  00f40		 |$M47417|

; 441  :     switch (vp)

  00f40	e59d300c	 ldr         r3, [sp, #0xC]
  00f44	e58d3000	 str         r3, [sp]
  00f48	e59d3000	 ldr         r3, [sp]
  00f4c	e3530000	 cmp         r3, #0
  00f50	0a000003	 beq         |$LN3@PrcmVoltFl|
  00f54	e59d3000	 ldr         r3, [sp]
  00f58	e3530001	 cmp         r3, #1
  00f5c	0a00001c	 beq         |$LN2@PrcmVoltFl|
  00f60	ea000036	 b           |$LN1@PrcmVoltFl|
  00f64		 |$LN3@PrcmVoltFl|

; 442  :         {
; 443  :         case kVoltageProcessor1:
; 444  :             SETREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VP1_CONFIG, SMPS_INITVDD | SMPS_FORCEUPDATE);

  00f64	e59f30e0	 ldr         r3, [pc, #0xE0]
  00f68	e5933000	 ldr         r3, [r3]
  00f6c	e283302c	 add         r3, r3, #0x2C
  00f70	e5933000	 ldr         r3, [r3]
  00f74	e28330b0	 add         r3, r3, #0xB0
  00f78	e5933000	 ldr         r3, [r3]
  00f7c	e3832006	 orr         r2, r3, #6
  00f80	e59f30c4	 ldr         r3, [pc, #0xC4]
  00f84	e5933000	 ldr         r3, [r3]
  00f88	e283302c	 add         r3, r3, #0x2C
  00f8c	e5933000	 ldr         r3, [r3]
  00f90	e28330b0	 add         r3, r3, #0xB0
  00f94	e5832000	 str         r2, [r3]

; 445  :             CLRREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VP1_CONFIG, SMPS_INITVDD | SMPS_FORCEUPDATE);

  00f98	e59f30ac	 ldr         r3, [pc, #0xAC]
  00f9c	e5933000	 ldr         r3, [r3]
  00fa0	e283302c	 add         r3, r3, #0x2C
  00fa4	e5933000	 ldr         r3, [r3]
  00fa8	e28330b0	 add         r3, r3, #0xB0
  00fac	e5932000	 ldr         r2, [r3]
  00fb0	e3e03006	 mvn         r3, #6
  00fb4	e0022003	 and         r2, r2, r3
  00fb8	e59f308c	 ldr         r3, [pc, #0x8C]
  00fbc	e5933000	 ldr         r3, [r3]
  00fc0	e283302c	 add         r3, r3, #0x2C
  00fc4	e5933000	 ldr         r3, [r3]
  00fc8	e28330b0	 add         r3, r3, #0xB0
  00fcc	e5832000	 str         r2, [r3]

; 446  :             break;

  00fd0	ea00001a	 b           |$LN4@PrcmVoltFl|
  00fd4		 |$LN2@PrcmVoltFl|

; 447  : 
; 448  :         case kVoltageProcessor2:
; 449  :             SETREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VP2_CONFIG, SMPS_INITVDD | SMPS_FORCEUPDATE);

  00fd4	e59f3070	 ldr         r3, [pc, #0x70]
  00fd8	e5933000	 ldr         r3, [r3]
  00fdc	e283302c	 add         r3, r3, #0x2C
  00fe0	e5933000	 ldr         r3, [r3]
  00fe4	e28330d0	 add         r3, r3, #0xD0
  00fe8	e5933000	 ldr         r3, [r3]
  00fec	e3832006	 orr         r2, r3, #6
  00ff0	e59f3054	 ldr         r3, [pc, #0x54]
  00ff4	e5933000	 ldr         r3, [r3]
  00ff8	e283302c	 add         r3, r3, #0x2C
  00ffc	e5933000	 ldr         r3, [r3]
  01000	e28330d0	 add         r3, r3, #0xD0
  01004	e5832000	 str         r2, [r3]

; 450  :             CLRREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VP2_CONFIG, SMPS_INITVDD | SMPS_FORCEUPDATE);

  01008	e59f303c	 ldr         r3, [pc, #0x3C]
  0100c	e5933000	 ldr         r3, [r3]
  01010	e283302c	 add         r3, r3, #0x2C
  01014	e5933000	 ldr         r3, [r3]
  01018	e28330d0	 add         r3, r3, #0xD0
  0101c	e5932000	 ldr         r2, [r3]
  01020	e3e03006	 mvn         r3, #6
  01024	e0022003	 and         r2, r2, r3
  01028	e59f301c	 ldr         r3, [pc, #0x1C]
  0102c	e5933000	 ldr         r3, [r3]
  01030	e283302c	 add         r3, r3, #0x2C
  01034	e5933000	 ldr         r3, [r3]
  01038	e28330d0	 add         r3, r3, #0xD0
  0103c	e5832000	 str         r2, [r3]
  01040		 |$LN1@PrcmVoltFl|
  01040		 |$LN4@PrcmVoltFl|

; 451  :             break;
; 452  : 
; 453  :         default:
; 454  :             return;
; 455  :         }
; 456  : }

  01040	e28dd004	 add         sp, sp, #4
  01044	e89d6000	 ldmia       sp, {sp, lr}
  01048	e12fff1e	 bx          lr
  0104c		 |$LN11@PrcmVoltFl|
  0104c		 |$LN12@PrcmVoltFl|
  0104c	00000000	 DCD         |g_pPrcmPrm|
  01050		 |$M47418|

			 ENDP  ; |PrcmVoltFlushVoltageLevels|

	EXPORT	|PrcmVoltIdleCheck|

  00070			 AREA	 |.pdata|, PDATA
|$T47428| DCD	|$LN11@PrcmVoltId|
	DCD	0x40002c04
; Function compile flags: /Odtp

  01050			 AREA	 |.text|, CODE, ARM

  01050		 |PrcmVoltIdleCheck| PROC

; 463  : {

  01050		 |$LN11@PrcmVoltId|
  01050	e1a0c00d	 mov         r12, sp
  01054	e92d0001	 stmdb       sp!, {r0}
  01058	e92d5000	 stmdb       sp!, {r12, lr}
  0105c	e24dd010	 sub         sp, sp, #0x10
  01060		 |$M47425|

; 464  :     UINT vpStatus;
; 465  :     BOOL rc = FALSE;

  01060	e3a03000	 mov         r3, #0
  01064	e58d3004	 str         r3, [sp, #4]

; 466  : 
; 467  :     switch (vp)

  01068	e59d3018	 ldr         r3, [sp, #0x18]
  0106c	e58d300c	 str         r3, [sp, #0xC]
  01070	e59d300c	 ldr         r3, [sp, #0xC]
  01074	e3530000	 cmp         r3, #0
  01078	0a000003	 beq         |$LN4@PrcmVoltId|
  0107c	e59d300c	 ldr         r3, [sp, #0xC]
  01080	e3530001	 cmp         r3, #1
  01084	0a000008	 beq         |$LN3@PrcmVoltId|
  01088	ea00000f	 b           |$LN2@PrcmVoltId|
  0108c		 |$LN4@PrcmVoltId|

; 468  :         {
; 469  :         case kVoltageProcessor1:
; 470  :             vpStatus = INREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VP1_STATUS);

  0108c	e59f3068	 ldr         r3, [pc, #0x68]
  01090	e5933000	 ldr         r3, [r3]
  01094	e283302c	 add         r3, r3, #0x2C
  01098	e5933000	 ldr         r3, [r3]
  0109c	e28330c4	 add         r3, r3, #0xC4
  010a0	e5933000	 ldr         r3, [r3]
  010a4	e58d3000	 str         r3, [sp]

; 471  :             break;

  010a8	ea000008	 b           |$LN5@PrcmVoltId|
  010ac		 |$LN3@PrcmVoltId|

; 472  : 
; 473  :         case kVoltageProcessor2:
; 474  :             vpStatus = INREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VP2_STATUS);

  010ac	e59f3048	 ldr         r3, [pc, #0x48]
  010b0	e5933000	 ldr         r3, [r3]
  010b4	e283302c	 add         r3, r3, #0x2C
  010b8	e5933000	 ldr         r3, [r3]
  010bc	e28330e4	 add         r3, r3, #0xE4
  010c0	e5933000	 ldr         r3, [r3]
  010c4	e58d3000	 str         r3, [sp]

; 475  :             break;

  010c8	ea000000	 b           |$LN5@PrcmVoltId|
  010cc		 |$LN2@PrcmVoltId|

; 476  : 
; 477  :         default:
; 478  :             goto cleanUp;

  010cc	ea000004	 b           |$cleanUp$47244|
  010d0		 |$LN5@PrcmVoltId|

; 479  :          }
; 480  : 
; 481  :     if (vpStatus & SMPS_VPINIDLE)

  010d0	e59d3000	 ldr         r3, [sp]
  010d4	e3130001	 tst         r3, #1
  010d8	0a000001	 beq         |$LN1@PrcmVoltId|

; 482  :         {
; 483  :         rc = TRUE;

  010dc	e3a03001	 mov         r3, #1
  010e0	e58d3004	 str         r3, [sp, #4]
  010e4		 |$LN1@PrcmVoltId|
  010e4		 |$cleanUp$47244|

; 484  :         }
; 485  : 
; 486  : cleanUp:
; 487  :     return rc;

  010e4	e59d3004	 ldr         r3, [sp, #4]
  010e8	e58d3008	 str         r3, [sp, #8]

; 488  : }

  010ec	e59d0008	 ldr         r0, [sp, #8]
  010f0	e28dd010	 add         sp, sp, #0x10
  010f4	e89d6000	 ldmia       sp, {sp, lr}
  010f8	e12fff1e	 bx          lr
  010fc		 |$LN12@PrcmVoltId|
  010fc		 |$LN13@PrcmVoltId|
  010fc	00000000	 DCD         |g_pPrcmPrm|
  01100		 |$M47426|

			 ENDP  ; |PrcmVoltIdleCheck|

	EXPORT	|PrcmVoltGetVoltageRampDelay|

  00078			 AREA	 |.pdata|, PDATA
|$T47436| DCD	|$LN10@PrcmVoltGe|
	DCD	0x40005904
; Function compile flags: /Odtp

  01100			 AREA	 |.text|, CODE, ARM

  01100		 |PrcmVoltGetVoltageRampDelay| PROC

; 495  : {

  01100		 |$LN10@PrcmVoltGe|
  01100	e1a0c00d	 mov         r12, sp
  01104	e92d0001	 stmdb       sp!, {r0}
  01108	e92d5000	 stmdb       sp!, {r12, lr}
  0110c	e24dd014	 sub         sp, sp, #0x14
  01110		 |$M47433|

; 496  :     UINT curVoltSteps = 0;

  01110	e3a03000	 mov         r3, #0
  01114	e58d3004	 str         r3, [sp, #4]

; 497  :     UINT newVoltSteps = 0;

  01118	e3a03000	 mov         r3, #0
  0111c	e58d3000	 str         r3, [sp]

; 498  :     UINT delay = 0;

  01120	e3a03000	 mov         r3, #0
  01124	e58d3008	 str         r3, [sp, #8]

; 499  : 
; 500  :     switch (vp)

  01128	e59d301c	 ldr         r3, [sp, #0x1C]
  0112c	e58d3010	 str         r3, [sp, #0x10]
  01130	e59d3010	 ldr         r3, [sp, #0x10]
  01134	e3530000	 cmp         r3, #0
  01138	0a000003	 beq         |$LN3@PrcmVoltGe|
  0113c	e59d3010	 ldr         r3, [sp, #0x10]
  01140	e3530001	 cmp         r3, #1
  01144	0a00001a	 beq         |$LN2@PrcmVoltGe|
  01148	ea000032	 b           |$LN4@PrcmVoltGe|
  0114c		 |$LN3@PrcmVoltGe|

; 501  :         {
; 502  :         case kVoltageProcessor1:
; 503  :             curVoltSteps = INREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VP1_VOLTAGE);

  0114c	e59f310c	 ldr         r3, [pc, #0x10C]
  01150	e5933000	 ldr         r3, [r3]
  01154	e283302c	 add         r3, r3, #0x2C
  01158	e5933000	 ldr         r3, [r3]
  0115c	e28330c0	 add         r3, r3, #0xC0
  01160	e5933000	 ldr         r3, [r3]
  01164	e58d3004	 str         r3, [sp, #4]

; 504  :             curVoltSteps &= SMPS_VOLTAGE_MASK;

  01168	e59d3004	 ldr         r3, [sp, #4]
  0116c	e20330ff	 and         r3, r3, #0xFF
  01170	e58d3004	 str         r3, [sp, #4]

; 505  :             curVoltSteps >>= SMPS_VOLTAGE_SHIFT;

  01174	e59d3004	 ldr         r3, [sp, #4]
  01178	e58d3004	 str         r3, [sp, #4]

; 506  :             
; 507  :             newVoltSteps = INREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VP1_CONFIG);

  0117c	e59f30dc	 ldr         r3, [pc, #0xDC]
  01180	e5933000	 ldr         r3, [r3]
  01184	e283302c	 add         r3, r3, #0x2C
  01188	e5933000	 ldr         r3, [r3]
  0118c	e28330b0	 add         r3, r3, #0xB0
  01190	e5933000	 ldr         r3, [r3]
  01194	e58d3000	 str         r3, [sp]

; 508  :             newVoltSteps &= SMPS_INITVOLTAGE_MASK;

  01198	e59d3000	 ldr         r3, [sp]
  0119c	e2033cff	 and         r3, r3, #0xFF, 24
  011a0	e58d3000	 str         r3, [sp]

; 509  :             newVoltSteps >>= SMPS_INITVOLTAGE_SHIFT;

  011a4	e59d3000	 ldr         r3, [sp]
  011a8	e1a03423	 mov         r3, r3, lsr #8
  011ac	e58d3000	 str         r3, [sp]

; 510  :             break;

  011b0	ea000018	 b           |$LN4@PrcmVoltGe|
  011b4		 |$LN2@PrcmVoltGe|

; 511  : 
; 512  :         case kVoltageProcessor2:
; 513  :             curVoltSteps = INREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VP2_VOLTAGE);

  011b4	e59f30a4	 ldr         r3, [pc, #0xA4]
  011b8	e5933000	 ldr         r3, [r3]
  011bc	e283302c	 add         r3, r3, #0x2C
  011c0	e5933000	 ldr         r3, [r3]
  011c4	e28330e0	 add         r3, r3, #0xE0
  011c8	e5933000	 ldr         r3, [r3]
  011cc	e58d3004	 str         r3, [sp, #4]

; 514  :             curVoltSteps &= SMPS_VOLTAGE_MASK;

  011d0	e59d3004	 ldr         r3, [sp, #4]
  011d4	e20330ff	 and         r3, r3, #0xFF
  011d8	e58d3004	 str         r3, [sp, #4]

; 515  :             curVoltSteps >>= SMPS_VOLTAGE_SHIFT;

  011dc	e59d3004	 ldr         r3, [sp, #4]
  011e0	e58d3004	 str         r3, [sp, #4]

; 516  : 
; 517  :             newVoltSteps = INREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VP2_CONFIG);

  011e4	e59f3074	 ldr         r3, [pc, #0x74]
  011e8	e5933000	 ldr         r3, [r3]
  011ec	e283302c	 add         r3, r3, #0x2C
  011f0	e5933000	 ldr         r3, [r3]
  011f4	e28330d0	 add         r3, r3, #0xD0
  011f8	e5933000	 ldr         r3, [r3]
  011fc	e58d3000	 str         r3, [sp]

; 518  :             newVoltSteps &= SMPS_INITVOLTAGE_MASK;

  01200	e59d3000	 ldr         r3, [sp]
  01204	e2033cff	 and         r3, r3, #0xFF, 24
  01208	e58d3000	 str         r3, [sp]

; 519  :             newVoltSteps >>= SMPS_INITVOLTAGE_SHIFT;

  0120c	e59d3000	 ldr         r3, [sp]
  01210	e1a03423	 mov         r3, r3, lsr #8
  01214	e58d3000	 str         r3, [sp]
  01218		 |$LN4@PrcmVoltGe|

; 520  :             break;
; 521  :         }
; 522  : 
; 523  :     if (newVoltSteps < curVoltSteps)

  01218	e59d2000	 ldr         r2, [sp]
  0121c	e59d3004	 ldr         r3, [sp, #4]
  01220	e1520003	 cmp         r2, r3
  01224	2a000000	 bcs         |$LN1@PrcmVoltGe|

; 524  :         {
; 525  :         goto cleanUp;

  01228	ea000006	 b           |$cleanUp$47263|
  0122c		 |$LN1@PrcmVoltGe|

; 526  :         }
; 527  : 
; 528  :     // delay = DeltaVDD / Slew Rate
; 529  :     // deltaVDD = steps * 12.5mV , Slew Rate - 4 mv/us
; 530  :     // To avoid floting point operation, formula used - (steps*25)/(slewrate*2)
; 531  :     delay = ((newVoltSteps-curVoltSteps)*25)>>3;

  0122c	e59d2000	 ldr         r2, [sp]
  01230	e59d3004	 ldr         r3, [sp, #4]
  01234	e0422003	 sub         r2, r2, r3
  01238	e3a03019	 mov         r3, #0x19
  0123c	e0030392	 mul         r3, r2, r3
  01240	e1a031a3	 mov         r3, r3, lsr #3
  01244	e58d3008	 str         r3, [sp, #8]
  01248		 |$cleanUp$47263|

; 532  :     
; 533  : cleanUp:
; 534  :     return delay;

  01248	e59d3008	 ldr         r3, [sp, #8]
  0124c	e58d300c	 str         r3, [sp, #0xC]

; 535  : }

  01250	e59d000c	 ldr         r0, [sp, #0xC]
  01254	e28dd014	 add         sp, sp, #0x14
  01258	e89d6000	 ldmia       sp, {sp, lr}
  0125c	e12fff1e	 bx          lr
  01260		 |$LN11@PrcmVoltGe|
  01260		 |$LN12@PrcmVoltGe|
  01260	00000000	 DCD         |g_pPrcmPrm|
  01264		 |$M47434|

			 ENDP  ; |PrcmVoltGetVoltageRampDelay|

	EXPORT	|PrcmVoltScaleVoltageABB|
	IMPORT	|OALTimerGetCount|
	IMPORT	|PrcmClockGetClockRate|
	IMPORT	|__rt_udiv|

  00080			 AREA	 |.pdata|, PDATA
|$T47445| DCD	|$LN17@PrcmVoltSc|
	DCD	0x4000d104
; Function compile flags: /Odtp

  01264			 AREA	 |.text|, CODE, ARM

  01264		 |PrcmVoltScaleVoltageABB| PROC

; 553  : {

  01264		 |$LN17@PrcmVoltSc|
  01264	e1a0c00d	 mov         r12, sp
  01268	e92d0001	 stmdb       sp!, {r0}
  0126c	e92d5000	 stmdb       sp!, {r12, lr}
  01270	e24dd02c	 sub         sp, sp, #0x2C
  01274		 |$M47442|

; 554  : 	UINT32 sr2en_enabled;
; 555  : 	UINT32 timeout;
; 556  : 	int sr2_wtcnt_value;
; 557  :     UINT32 regVal =0;

  01274	e3a03000	 mov         r3, #0
  01278	e58d3010	 str         r3, [sp, #0x10]

; 558  :     UINT32 tcrr;
; 559  : 
; 560  : 	/* calculate SR2_WTCNT_VALUE settling time */
; 561  : 	sr2_wtcnt_value = (ABB_MAX_SETTLING_TIME * (PrcmClockGetClockRate(SYS_CLK)) / 8);

  0127c	e3a00000	 mov         r0, #0
  01280	eb000000	 bl          PrcmClockGetClockRate
  01284	e58d0018	 str         r0, [sp, #0x18]
  01288	e59d2018	 ldr         r2, [sp, #0x18]
  0128c	e3a0301e	 mov         r3, #0x1E
  01290	e0010392	 mul         r1, r2, r3
  01294	e3a00008	 mov         r0, #8
  01298	eb000000	 bl          __rt_udiv
  0129c	e58d0008	 str         r0, [sp, #8]

; 562  : 
; 563  : 	/* has SR2EN been enabled previously? */
; 564  : 	sr2en_enabled = INREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_LDO_ABB_CTRL) & SMPS_SR2EN;

  012a0	e59f32fc	 ldr         r3, [pc, #0x2FC]
  012a4	e5933000	 ldr         r3, [r3]
  012a8	e283302c	 add         r3, r3, #0x2C
  012ac	e5933000	 ldr         r3, [r3]
  012b0	e28330f4	 add         r3, r3, #0xF4
  012b4	e5933000	 ldr         r3, [r3]
  012b8	e2033001	 and         r3, r3, #1
  012bc	e58d3004	 str         r3, [sp, #4]

; 565  : 
; 566  :     // enable voltage processor
; 567  :     PrcmVoltEnableVp(kVDD1, TRUE);

  012c0	e3a01001	 mov         r1, #1
  012c4	e3a00000	 mov         r0, #0
  012c8	eb000000	 bl          PrcmVoltEnableVp

; 568  : 
; 569  : 	/* select fast, nominal or slow OPP for ABB ldo */
; 570  : 	if (target_opp_no >= ABB_FAST_OPP_VAL) {

  012cc	e59d3034	 ldr         r3, [sp, #0x34]
  012d0	e3530004	 cmp         r3, #4
  012d4	3a000023	 bcc         |$LN12@PrcmVoltSc|

; 571  :         
; 572  : 		/* program for fast opp - enable FBB */
; 573  :         regVal = INREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_LDO_ABB_SETUP);

  012d8	e59f32c4	 ldr         r3, [pc, #0x2C4]
  012dc	e5933000	 ldr         r3, [r3]
  012e0	e283302c	 add         r3, r3, #0x2C
  012e4	e5933000	 ldr         r3, [r3]
  012e8	e28330f0	 add         r3, r3, #0xF0
  012ec	e5933000	 ldr         r3, [r3]
  012f0	e58d3010	 str         r3, [sp, #0x10]

; 574  :         regVal = (regVal & ~(SMPS_OPP_SEL_MASK)) | (ABB_FAST_OPP << SMPS_OPP_SEL_SHIFT);

  012f4	e59d2010	 ldr         r2, [sp, #0x10]
  012f8	e3e03003	 mvn         r3, #3
  012fc	e0023003	 and         r3, r2, r3
  01300	e3833001	 orr         r3, r3, #1
  01304	e58d3010	 str         r3, [sp, #0x10]

; 575  :         OUTREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_LDO_ABB_SETUP,regVal);

  01308	e59f3294	 ldr         r3, [pc, #0x294]
  0130c	e5933000	 ldr         r3, [r3]
  01310	e283302c	 add         r3, r3, #0x2C
  01314	e5933000	 ldr         r3, [r3]
  01318	e28320f0	 add         r2, r3, #0xF0
  0131c	e59d3010	 ldr         r3, [sp, #0x10]
  01320	e5823000	 str         r3, [r2]

; 576  :         
; 577  : 		/* enable the ABB ldo if not done already */
; 578  : 		if (!sr2en_enabled)

  01324	e59d3004	 ldr         r3, [sp, #4]
  01328	e3530000	 cmp         r3, #0
  0132c	1a00000c	 bne         |$LN11@PrcmVoltSc|

; 579  : 			SETREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_LDO_ABB_CTRL,SMPS_SR2EN);

  01330	e59f326c	 ldr         r3, [pc, #0x26C]
  01334	e5933000	 ldr         r3, [r3]
  01338	e283302c	 add         r3, r3, #0x2C
  0133c	e5933000	 ldr         r3, [r3]
  01340	e28330f4	 add         r3, r3, #0xF4
  01344	e5933000	 ldr         r3, [r3]
  01348	e3832001	 orr         r2, r3, #1
  0134c	e59f3250	 ldr         r3, [pc, #0x250]
  01350	e5933000	 ldr         r3, [r3]
  01354	e283302c	 add         r3, r3, #0x2C
  01358	e5933000	 ldr         r3, [r3]
  0135c	e28330f4	 add         r3, r3, #0xF4
  01360	e5832000	 str         r2, [r3]
  01364		 |$LN11@PrcmVoltSc|

; 580  :         
; 581  : 	} else if (sr2en_enabled) {

  01364	ea000017	 b           |$LN10@PrcmVoltSc|
  01368		 |$LN12@PrcmVoltSc|
  01368	e59d3004	 ldr         r3, [sp, #4]
  0136c	e3530000	 cmp         r3, #0
  01370	0a000013	 beq         |$LN9@PrcmVoltSc|

; 582  : 	
; 583  : 		/* program for nominal opp - bypass ABB ldo */        
; 584  :         regVal = INREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_LDO_ABB_SETUP);

  01374	e59f3228	 ldr         r3, [pc, #0x228]
  01378	e5933000	 ldr         r3, [r3]
  0137c	e283302c	 add         r3, r3, #0x2C
  01380	e5933000	 ldr         r3, [r3]
  01384	e28330f0	 add         r3, r3, #0xF0
  01388	e5933000	 ldr         r3, [r3]
  0138c	e58d3010	 str         r3, [sp, #0x10]

; 585  :         regVal = (regVal & ~(SMPS_OPP_SEL_MASK)) | (ABB_NOMINAL_OPP << SMPS_OPP_SEL_SHIFT);

  01390	e59d2010	 ldr         r2, [sp, #0x10]
  01394	e3e03003	 mvn         r3, #3
  01398	e0023003	 and         r3, r2, r3
  0139c	e3833002	 orr         r3, r3, #2
  013a0	e58d3010	 str         r3, [sp, #0x10]

; 586  :         OUTREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_LDO_ABB_SETUP,regVal);

  013a4	e59f31f8	 ldr         r3, [pc, #0x1F8]
  013a8	e5933000	 ldr         r3, [r3]
  013ac	e283302c	 add         r3, r3, #0x2C
  013b0	e5933000	 ldr         r3, [r3]
  013b4	e28320f0	 add         r2, r3, #0xF0
  013b8	e59d3010	 ldr         r3, [sp, #0x10]
  013bc	e5823000	 str         r3, [r2]

; 587  :         
; 588  : 	} else {

  013c0	ea000000	 b           |$LN8@PrcmVoltSc|
  013c4		 |$LN9@PrcmVoltSc|

; 589  : 	
; 590  : 		/* nothing to do here yet... might enable RBB here someday */
; 591  : 		goto cleanUp;

  013c4	ea00006d	 b           |$cleanUp$47287|
  013c8		 |$LN8@PrcmVoltSc|
  013c8		 |$LN10@PrcmVoltSc|

; 592  :         
; 593  : 	}
; 594  : 
; 595  : 	/* set ACTIVE_FBB_SEL for all 45nm silicon */
; 596  :     SETREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_LDO_ABB_CTRL,SMPS_ACTIVE_FBB_SEL);

  013c8	e59f31d4	 ldr         r3, [pc, #0x1D4]
  013cc	e5933000	 ldr         r3, [r3]
  013d0	e283302c	 add         r3, r3, #0x2C
  013d4	e5933000	 ldr         r3, [r3]
  013d8	e28330f4	 add         r3, r3, #0xF4
  013dc	e5933000	 ldr         r3, [r3]
  013e0	e3832004	 orr         r2, r3, #4
  013e4	e59f31b8	 ldr         r3, [pc, #0x1B8]
  013e8	e5933000	 ldr         r3, [r3]
  013ec	e283302c	 add         r3, r3, #0x2C
  013f0	e5933000	 ldr         r3, [r3]
  013f4	e28330f4	 add         r3, r3, #0xF4
  013f8	e5832000	 str         r2, [r3]

; 597  : 
; 598  : 	/* program settling time of 30us for ABB ldo transition */
; 599  :     regVal = INREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_LDO_ABB_CTRL);

  013fc	e59f31a0	 ldr         r3, [pc, #0x1A0]
  01400	e5933000	 ldr         r3, [r3]
  01404	e283302c	 add         r3, r3, #0x2C
  01408	e5933000	 ldr         r3, [r3]
  0140c	e28330f4	 add         r3, r3, #0xF4
  01410	e5933000	 ldr         r3, [r3]
  01414	e58d3010	 str         r3, [sp, #0x10]

; 600  :     regVal = (regVal & ~(SMPS_SR2_WTCNT_VALUE_MASK)) | (sr2_wtcnt_value << SMPS_SR2_WTCNT_VALUE_SHIFT);

  01418	e59d2010	 ldr         r2, [sp, #0x10]
  0141c	e3e03cff	 mvn         r3, #0xFF, 24
  01420	e0022003	 and         r2, r2, r3
  01424	e59d3008	 ldr         r3, [sp, #8]
  01428	e1a03403	 mov         r3, r3, lsl #8
  0142c	e1823003	 orr         r3, r2, r3
  01430	e58d3010	 str         r3, [sp, #0x10]

; 601  :     OUTREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_LDO_ABB_CTRL,regVal);

  01434	e59f3168	 ldr         r3, [pc, #0x168]
  01438	e5933000	 ldr         r3, [r3]
  0143c	e283302c	 add         r3, r3, #0x2C
  01440	e5933000	 ldr         r3, [r3]
  01444	e28320f4	 add         r2, r3, #0xF4
  01448	e59d3010	 ldr         r3, [sp, #0x10]
  0144c	e5823000	 str         r3, [r2]

; 602  :     
; 603  : 	/* clear ABB ldo interrupt status */    
; 604  :     OUTREG32(&g_pPrcmPrm->pOMAP_OCP_SYSTEM_PRM->PRM_IRQSTATUS_MPU, PRM_IRQENABLE_ABB_LDO_TRANXDONE_ST);

  01450	e59f314c	 ldr         r3, [pc, #0x14C]
  01454	e5933000	 ldr         r3, [r3]
  01458	e2833030	 add         r3, r3, #0x30
  0145c	e5933000	 ldr         r3, [r3]
  01460	e2832018	 add         r2, r3, #0x18
  01464	e3a03301	 mov         r3, #1, 6
  01468	e5823000	 str         r3, [r2]

; 605  :     	
; 606  : 	/* enable ABB LDO OPP change */
; 607  :     SETREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_LDO_ABB_SETUP,SMPS_OPP_CHANGE);

  0146c	e59f3130	 ldr         r3, [pc, #0x130]
  01470	e5933000	 ldr         r3, [r3]
  01474	e283302c	 add         r3, r3, #0x2C
  01478	e5933000	 ldr         r3, [r3]
  0147c	e28330f0	 add         r3, r3, #0xF0
  01480	e5933000	 ldr         r3, [r3]
  01484	e3832004	 orr         r2, r3, #4
  01488	e59f3114	 ldr         r3, [pc, #0x114]
  0148c	e5933000	 ldr         r3, [r3]
  01490	e283302c	 add         r3, r3, #0x2C
  01494	e5933000	 ldr         r3, [r3]
  01498	e28330f0	 add         r3, r3, #0xF0
  0149c	e5832000	 str         r2, [r3]

; 608  : 
; 609  : 	
; 610  : 	/* wait until OPP change completes */
; 611  :     timeout=tcrr=OALTimerGetCount();

  014a0	eb000000	 bl          OALTimerGetCount
  014a4	e58d001c	 str         r0, [sp, #0x1C]
  014a8	e59d301c	 ldr         r3, [sp, #0x1C]
  014ac	e58d3000	 str         r3, [sp]
  014b0	e59d3000	 ldr         r3, [sp]
  014b4	e58d300c	 str         r3, [sp, #0xC]
  014b8		 |$LN7@PrcmVoltSc|

; 612  :     while (((INREG32(&g_pPrcmPrm->pOMAP_OCP_SYSTEM_PRM->PRM_IRQSTATUS_MPU) & 
; 613  : 			    PRM_IRQENABLE_ABB_LDO_TRANXDONE_ST) == 0) &&
; 614  :         ((timeout - tcrr) < ABB_MAX_SETTLING_TIME_IN_TICKS))

  014b8	e59f30e4	 ldr         r3, [pc, #0xE4]
  014bc	e5933000	 ldr         r3, [r3]
  014c0	e2833030	 add         r3, r3, #0x30
  014c4	e5933000	 ldr         r3, [r3]
  014c8	e2833018	 add         r3, r3, #0x18
  014cc	e5933000	 ldr         r3, [r3]
  014d0	e3130301	 tst         r3, #1, 6
  014d4	1a000009	 bne         |$LN6@PrcmVoltSc|
  014d8	e59d200c	 ldr         r2, [sp, #0xC]
  014dc	e59d3000	 ldr         r3, [sp]
  014e0	e0423003	 sub         r3, r2, r3
  014e4	e353000a	 cmp         r3, #0xA
  014e8	2a000004	 bcs         |$LN6@PrcmVoltSc|

; 615  :     {
; 616  :         timeout=OALTimerGetCount();        

  014ec	eb000000	 bl          OALTimerGetCount
  014f0	e58d0020	 str         r0, [sp, #0x20]
  014f4	e59d3020	 ldr         r3, [sp, #0x20]
  014f8	e58d300c	 str         r3, [sp, #0xC]

; 617  :     }

  014fc	eaffffed	 b           |$LN7@PrcmVoltSc|
  01500		 |$LN6@PrcmVoltSc|

; 618  : 
; 619  : 	if (timeout >= tcrr+ABB_MAX_SETTLING_TIME_IN_TICKS)
; 620  : 		RETAILMSG(0,(L"ABB: TRANXDONE timed out waiting for OPP change\r\n"));
; 621  :     
; 622  :     timeout=tcrr=OALTimerGetCount();

  01500	eb000000	 bl          OALTimerGetCount
  01504	e58d0024	 str         r0, [sp, #0x24]
  01508	e59d3024	 ldr         r3, [sp, #0x24]
  0150c	e58d3000	 str         r3, [sp]
  01510	e59d3000	 ldr         r3, [sp]
  01514	e58d300c	 str         r3, [sp, #0xC]
  01518		 |$LN4@PrcmVoltSc|

; 623  : 	
; 624  : 	/* Clear all pending TRANXDONE interrupts/status */
; 625  : 	while ((timeout - tcrr) < ABB_MAX_SETTLING_TIME_IN_TICKS) {

  01518	e59d200c	 ldr         r2, [sp, #0xC]
  0151c	e59d3000	 ldr         r3, [sp]
  01520	e0423003	 sub         r3, r2, r3
  01524	e353000a	 cmp         r3, #0xA
  01528	2a000014	 bcs         |$LN3@PrcmVoltSc|

; 626  : 		OUTREG32(&g_pPrcmPrm->pOMAP_OCP_SYSTEM_PRM->PRM_IRQSTATUS_MPU, PRM_IRQENABLE_ABB_LDO_TRANXDONE_ST);

  0152c	e59f3070	 ldr         r3, [pc, #0x70]
  01530	e5933000	 ldr         r3, [r3]
  01534	e2833030	 add         r3, r3, #0x30
  01538	e5933000	 ldr         r3, [r3]
  0153c	e2832018	 add         r2, r3, #0x18
  01540	e3a03301	 mov         r3, #1, 6
  01544	e5823000	 str         r3, [r2]

; 627  : 		if (!(INREG32(&g_pPrcmPrm->pOMAP_OCP_SYSTEM_PRM->PRM_IRQSTATUS_MPU) & 
; 628  : 			    PRM_IRQENABLE_ABB_LDO_TRANXDONE_ST))

  01548	e59f3054	 ldr         r3, [pc, #0x54]
  0154c	e5933000	 ldr         r3, [r3]
  01550	e2833030	 add         r3, r3, #0x30
  01554	e5933000	 ldr         r3, [r3]
  01558	e2833018	 add         r3, r3, #0x18
  0155c	e5933000	 ldr         r3, [r3]
  01560	e3130301	 tst         r3, #1, 6
  01564	1a000000	 bne         |$LN2@PrcmVoltSc|

; 629  : 			break;

  01568	ea000004	 b           |$LN3@PrcmVoltSc|
  0156c		 |$LN2@PrcmVoltSc|

; 630  : 
; 631  : 		timeout=OALTimerGetCount();  

  0156c	eb000000	 bl          OALTimerGetCount
  01570	e58d0028	 str         r0, [sp, #0x28]
  01574	e59d3028	 ldr         r3, [sp, #0x28]
  01578	e58d300c	 str         r3, [sp, #0xC]

; 632  : 	}

  0157c	eaffffe5	 b           |$LN4@PrcmVoltSc|
  01580		 |$LN3@PrcmVoltSc|
  01580		 |$cleanUp$47287|

; 633  : 	if (timeout >= tcrr+ABB_MAX_SETTLING_TIME_IN_TICKS)
; 634  : 		RETAILMSG(0,(L"ABB: TRANXDONE timed out trying to clear status\n"));
; 635  : 
; 636  : cleanUp:
; 637  :     // disable the voltage processor sub-chip
; 638  :     PrcmVoltEnableVp(kVDD1, FALSE);

  01580	e3a01000	 mov         r1, #0
  01584	e3a00000	 mov         r0, #0
  01588	eb000000	 bl          PrcmVoltEnableVp

; 639  : 	return 0;

  0158c	e3a03000	 mov         r3, #0
  01590	e58d3014	 str         r3, [sp, #0x14]

; 640  : }

  01594	e59d0014	 ldr         r0, [sp, #0x14]
  01598	e28dd02c	 add         sp, sp, #0x2C
  0159c	e89d6000	 ldmia       sp, {sp, lr}
  015a0	e12fff1e	 bx          lr
  015a4		 |$LN18@PrcmVoltSc|
  015a4		 |$LN19@PrcmVoltSc|
  015a4	00000000	 DCD         |g_pPrcmPrm|
  015a8		 |$M47443|

			 ENDP  ; |PrcmVoltScaleVoltageABB|

	END
