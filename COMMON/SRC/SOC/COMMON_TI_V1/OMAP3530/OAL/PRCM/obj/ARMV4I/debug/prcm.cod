; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\OMAP3530\OAL\PRCM\prcm.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|g_pSysCtrlGenReg| [ DATA ]
	EXPORT	|g_PrcmPostInit| [ DATA ]
	EXPORT	|g_bSingleThreaded| [ DATA ]
	EXPORT	|g_pCPUInfo| [ DATA ]
	EXPORT	|fnCpuStart| [ DATA ]
	EXPORT	|fnOALCPUIdle| [ DATA ]
	EXPORT	|fnOALUpdateCoreFreq| [ DATA ]
	EXPORT	|fnOALCPUWarmReset| [ DATA ]

  00000			 AREA	 |.data|, DATA
	 COMMON	|prevGpioIClkState|, 0x4

	 COMMON	|prevGpioFClkState|, 0x4

	 COMMON	|g_pPrcmPrm|, 0x4

	 COMMON	|g_rgPrcmMutex|, 0x78

	 COMMON	|g_pPrcmCm|, 0x4

	 COMMON	|VfpNeonSave|, 0x108


  00000			 AREA	 |.bss|, NOINIT
|g_pSysCtrlGenReg| % 0x4
|g_PrcmPostInit| % 0x4
|g_bSingleThreaded| % 0x4
|g_pCPUInfo| %	0x4
|fnCpuStart| %	0x4
|fnOALCPUIdle| % 0x4
|fnOALUpdateCoreFreq| % 0x4
|fnOALCPUWarmReset| % 0x4

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|IS_IOPAD_EVENT_PENDING|
	IMPORT	|g_pIntr|

  00000			 AREA	 |.pdata|, PDATA
|$T47481| DCD	|$LN8@IS_IOPAD_E|
	DCD	0x40002601
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\oal\prcm\prcm.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |IS_IOPAD_EVENT_PENDING| PROC

; 57   : {

  00000		 |$LN8@IS_IOPAD_E|
  00000	e24dd00c	 sub         sp, sp, #0xC
  00004		 |$M47478|

; 58   :     BOOL dwVal = 0;

  00004	e3a03000	 mov         r3, #0
  00008	e58d3000	 str         r3, [sp]

; 59   :     DWORD i = 0;

  0000c	e3a03000	 mov         r3, #0
  00010	e58d3004	 str         r3, [sp, #4]

; 60   : 
; 61   :     for (i=0;i<g_pIntr->nbGpioBank;i++)

  00014	e3a03000	 mov         r3, #0
  00018	e58d3004	 str         r3, [sp, #4]
  0001c	ea000002	 b           |$LN3@IS_IOPAD_E|
  00020		 |$LN2@IS_IOPAD_E|
  00020	e59d3004	 ldr         r3, [sp, #4]
  00024	e2833001	 add         r3, r3, #1
  00028	e58d3004	 str         r3, [sp, #4]
  0002c		 |$LN3@IS_IOPAD_E|
  0002c	e59f3060	 ldr         r3, [pc, #0x60]
  00030	e5933000	 ldr         r3, [r3]
  00034	e2833004	 add         r3, r3, #4
  00038	e59d2004	 ldr         r2, [sp, #4]
  0003c	e5933000	 ldr         r3, [r3]
  00040	e1520003	 cmp         r2, r3
  00044	2a00000d	 bcs         |$LN1@IS_IOPAD_E|

; 62   :     {    
; 63   :         dwVal |= g_pIntr->pGpioCtxt[i].padWakeupEvent;

  00048	e59f3044	 ldr         r3, [pc, #0x44]
  0004c	e5933000	 ldr         r3, [r3]
  00050	e2830008	 add         r0, r3, #8
  00054	e59d1004	 ldr         r1, [sp, #4]
  00058	e3a03020	 mov         r3, #0x20
  0005c	e0020391	 mul         r2, r1, r3
  00060	e5903000	 ldr         r3, [r0]
  00064	e0833002	 add         r3, r3, r2
  00068	e283301c	 add         r3, r3, #0x1C
  0006c	e59d2000	 ldr         r2, [sp]
  00070	e5933000	 ldr         r3, [r3]
  00074	e1823003	 orr         r3, r2, r3
  00078	e58d3000	 str         r3, [sp]

; 64   :     }

  0007c	eaffffe7	 b           |$LN2@IS_IOPAD_E|
  00080		 |$LN1@IS_IOPAD_E|

; 65   : 
; 66   :     return dwVal;

  00080	e59d3000	 ldr         r3, [sp]
  00084	e58d3008	 str         r3, [sp, #8]

; 67   : }

  00088	e59d0008	 ldr         r0, [sp, #8]
  0008c	e28dd00c	 add         sp, sp, #0xC
  00090	e12fff1e	 bx          lr
  00094		 |$LN9@IS_IOPAD_E|
  00094		 |$LN10@IS_IOPAD_E|
  00094	00000000	 DCD         |g_pIntr|
  00098		 |$M47479|

			 ENDP  ; |IS_IOPAD_EVENT_PENDING|

	EXPORT	|PrcmInitializePrevPowerState|

  00020			 AREA	 |.bss|, NOINIT
|prevChipState| % 0x4
|prevPerState| % 0x4
|prevMpuState| % 0x4
|prevCoreState| % 0x4
|wakeStatus| %	0x4

  00008			 AREA	 |.pdata|, PDATA
|$T47488| DCD	|$LN5@PrcmInitia|
	DCD	0x40004e00
; Function compile flags: /Odtp

  00098			 AREA	 |.text|, CODE, ARM

  00098		 |PrcmInitializePrevPowerState| PROC

; 222  : {

  00098		 |$LN5@PrcmInitia|
  00098		 |$M47485|

; 223  :     wakeStatus = 0;

  00098	e59f212c	 ldr         r2, [pc, #0x12C]
  0009c	e3a03000	 mov         r3, #0
  000a0	e5823000	 str         r3, [r2]

; 224  :     prevCoreState = 0;

  000a4	e59f211c	 ldr         r2, [pc, #0x11C]
  000a8	e3a03000	 mov         r3, #0
  000ac	e5823000	 str         r3, [r2]

; 225  :     prevMpuState = 0;

  000b0	e59f210c	 ldr         r2, [pc, #0x10C]
  000b4	e3a03000	 mov         r3, #0
  000b8	e5823000	 str         r3, [r2]

; 226  :     prevPerState = 0;

  000bc	e59f20fc	 ldr         r2, [pc, #0xFC]
  000c0	e3a03000	 mov         r3, #0
  000c4	e5823000	 str         r3, [r2]

; 227  :     prevChipState = 0;

  000c8	e59f20ec	 ldr         r2, [pc, #0xEC]
  000cc	e3a03000	 mov         r3, #0
  000d0	e5823000	 str         r3, [r2]

; 228  : 
; 229  :     OUTREG32(&g_pPrcmPrm->pOMAP_CORE_PRM->PM_PREPWSTST_CORE, 0);

  000d4	e59f30dc	 ldr         r3, [pc, #0xDC]
  000d8	e5933000	 ldr         r3, [r3]
  000dc	e2833004	 add         r3, r3, #4
  000e0	e5933000	 ldr         r3, [r3]
  000e4	e28320e8	 add         r2, r3, #0xE8
  000e8	e3a03000	 mov         r3, #0
  000ec	e5823000	 str         r3, [r2]

; 230  :     OUTREG32(&g_pPrcmPrm->pOMAP_MPU_PRM->PM_PREPWSTST_MPU, 0);

  000f0	e59f30c0	 ldr         r3, [pc, #0xC0]
  000f4	e5933000	 ldr         r3, [r3]
  000f8	e2833014	 add         r3, r3, #0x14
  000fc	e5933000	 ldr         r3, [r3]
  00100	e28320e8	 add         r2, r3, #0xE8
  00104	e3a03000	 mov         r3, #0
  00108	e5823000	 str         r3, [r2]

; 231  :     OUTREG32(&g_pPrcmPrm->pOMAP_PER_PRM->PM_PREPWSTST_PER, 0);

  0010c	e59f30a4	 ldr         r3, [pc, #0xA4]
  00110	e5933000	 ldr         r3, [r3]
  00114	e2833008	 add         r3, r3, #8
  00118	e5933000	 ldr         r3, [r3]
  0011c	e28320e8	 add         r2, r3, #0xE8
  00120	e3a03000	 mov         r3, #0
  00124	e5823000	 str         r3, [r2]

; 232  :     OUTREG32(&g_pPrcmPrm->pOMAP_CAM_PRM->PM_PREPWSTST_CAM, 0);

  00128	e59f3088	 ldr         r3, [pc, #0x88]
  0012c	e5933000	 ldr         r3, [r3]
  00130	e2833024	 add         r3, r3, #0x24
  00134	e5933000	 ldr         r3, [r3]
  00138	e28320e8	 add         r2, r3, #0xE8
  0013c	e3a03000	 mov         r3, #0
  00140	e5823000	 str         r3, [r2]

; 233  :     OUTREG32(&g_pPrcmPrm->pOMAP_USBHOST_PRM->PM_PREPWSTST_USBHOST, 0);

  00144	e59f306c	 ldr         r3, [pc, #0x6C]
  00148	e5933000	 ldr         r3, [r3]
  0014c	e283300c	 add         r3, r3, #0xC
  00150	e5933000	 ldr         r3, [r3]
  00154	e28320e8	 add         r2, r3, #0xE8
  00158	e3a03000	 mov         r3, #0
  0015c	e5823000	 str         r3, [r2]

; 234  :     OUTREG32(&g_pPrcmPrm->pOMAP_SGX_PRM->PM_PREPWSTST_SGX, 0);

  00160	e59f3050	 ldr         r3, [pc, #0x50]
  00164	e5933000	 ldr         r3, [r3]
  00168	e2833028	 add         r3, r3, #0x28
  0016c	e5933000	 ldr         r3, [r3]
  00170	e28320e8	 add         r2, r3, #0xE8
  00174	e3a03000	 mov         r3, #0
  00178	e5823000	 str         r3, [r2]

; 235  :     OUTREG32(&g_pPrcmPrm->pOMAP_IVA2_PRM->PM_PREPWSTST_IVA2, 0);

  0017c	e59f3034	 ldr         r3, [pc, #0x34]
  00180	e5933000	 ldr         r3, [r3]
  00184	e2833020	 add         r3, r3, #0x20
  00188	e5933000	 ldr         r3, [r3]
  0018c	e28320e8	 add         r2, r3, #0xE8
  00190	e3a03000	 mov         r3, #0
  00194	e5823000	 str         r3, [r2]

; 236  :     OUTREG32(&g_pPrcmPrm->pOMAP_DSS_PRM->PM_PREPWSTST_DSS, 0);

  00198	e59f3018	 ldr         r3, [pc, #0x18]
  0019c	e5933000	 ldr         r3, [r3]
  001a0	e2833018	 add         r3, r3, #0x18
  001a4	e5933000	 ldr         r3, [r3]
  001a8	e28320e8	 add         r2, r3, #0xE8
  001ac	e3a03000	 mov         r3, #0
  001b0	e5823000	 str         r3, [r2]

; 237  : }

  001b4	e12fff1e	 bx          lr
  001b8		 |$LN6@PrcmInitia|
  001b8		 |$LN7@PrcmInitia|
  001b8	00000000	 DCD         |g_pPrcmPrm|
  001bc		 |$LN8@PrcmInitia|
  001bc	00000000	 DCD         |prevChipState|
  001c0		 |$LN9@PrcmInitia|
  001c0	00000000	 DCD         |prevPerState|
  001c4		 |$LN10@PrcmInitia|
  001c4	00000000	 DCD         |prevMpuState|
  001c8		 |$LN11@PrcmInitia|
  001c8	00000000	 DCD         |prevCoreState|
  001cc		 |$LN12@PrcmInitia|
  001cc	00000000	 DCD         |wakeStatus|
  001d0		 |$M47486|

			 ENDP  ; |PrcmInitializePrevPowerState|

	EXPORT	|PrcmProfilePrevPowerState|
	IMPORT	|OEMWriteDebugLED|
	IMPORT	|OmapProfilerMark|
	IMPORT	|OALTimerGetReg|
	IMPORT	|g_pTimerRegs|

  00010			 AREA	 |.pdata|, PDATA
|$T47500| DCD	|$LN16@PrcmProfil|
	DCD	0x4000b304
; Function compile flags: /Odtp

  001d0			 AREA	 |.text|, CODE, ARM

  001d0		 |PrcmProfilePrevPowerState| PROC

; 244  : {

  001d0		 |$LN16@PrcmProfil|
  001d0	e1a0c00d	 mov         r12, sp
  001d4	e92d0003	 stmdb       sp!, {r0, r1}
  001d8	e92d5000	 stmdb       sp!, {r12, lr}
  001dc	e24dd008	 sub         sp, sp, #8
  001e0		 |$M47497|

; 245  : 	UNREFERENCED_PARAMETER(wakeup_delay);
; 246  : 	UNREFERENCED_PARAMETER(timer_val);
; 247  : 
; 248  :     // capture chip state
; 249  :     prevChipState = prevCoreState | prevMpuState | prevPerState;

  001e0	e59f329c	 ldr         r3, [pc, #0x29C]
  001e4	e5932000	 ldr         r2, [r3]
  001e8	e59f3298	 ldr         r3, [pc, #0x298]
  001ec	e5933000	 ldr         r3, [r3]
  001f0	e1822003	 orr         r2, r2, r3
  001f4	e59f329c	 ldr         r3, [pc, #0x29C]
  001f8	e5933000	 ldr         r3, [r3]
  001fc	e1822003	 orr         r2, r2, r3
  00200	e59f3278	 ldr         r3, [pc, #0x278]
  00204	e5832000	 str         r2, [r3]

; 250  :     prevChipState |= INREG32(&g_pPrcmPrm->pOMAP_CAM_PRM->PM_PREPWSTST_CAM);

  00208	e59f3284	 ldr         r3, [pc, #0x284]
  0020c	e5933000	 ldr         r3, [r3]
  00210	e2833024	 add         r3, r3, #0x24
  00214	e5933000	 ldr         r3, [r3]
  00218	e28330e8	 add         r3, r3, #0xE8
  0021c	e5932000	 ldr         r2, [r3]
  00220	e59f3258	 ldr         r3, [pc, #0x258]
  00224	e5933000	 ldr         r3, [r3]
  00228	e1832002	 orr         r2, r3, r2
  0022c	e59f324c	 ldr         r3, [pc, #0x24C]
  00230	e5832000	 str         r2, [r3]

; 251  :     prevChipState |= INREG32(&g_pPrcmPrm->pOMAP_USBHOST_PRM->PM_PREPWSTST_USBHOST);

  00234	e59f3258	 ldr         r3, [pc, #0x258]
  00238	e5933000	 ldr         r3, [r3]
  0023c	e283300c	 add         r3, r3, #0xC
  00240	e5933000	 ldr         r3, [r3]
  00244	e28330e8	 add         r3, r3, #0xE8
  00248	e5932000	 ldr         r2, [r3]
  0024c	e59f322c	 ldr         r3, [pc, #0x22C]
  00250	e5933000	 ldr         r3, [r3]
  00254	e1832002	 orr         r2, r3, r2
  00258	e59f3220	 ldr         r3, [pc, #0x220]
  0025c	e5832000	 str         r2, [r3]

; 252  :     prevChipState |= INREG32(&g_pPrcmPrm->pOMAP_SGX_PRM->PM_PREPWSTST_SGX);

  00260	e59f322c	 ldr         r3, [pc, #0x22C]
  00264	e5933000	 ldr         r3, [r3]
  00268	e2833028	 add         r3, r3, #0x28
  0026c	e5933000	 ldr         r3, [r3]
  00270	e28330e8	 add         r3, r3, #0xE8
  00274	e5932000	 ldr         r2, [r3]
  00278	e59f3200	 ldr         r3, [pc, #0x200]
  0027c	e5933000	 ldr         r3, [r3]
  00280	e1832002	 orr         r2, r3, r2
  00284	e59f31f4	 ldr         r3, [pc, #0x1F4]
  00288	e5832000	 str         r2, [r3]

; 253  :     prevChipState |= INREG32(&g_pPrcmPrm->pOMAP_IVA2_PRM->PM_PREPWSTST_IVA2);

  0028c	e59f3200	 ldr         r3, [pc, #0x200]
  00290	e5933000	 ldr         r3, [r3]
  00294	e2833020	 add         r3, r3, #0x20
  00298	e5933000	 ldr         r3, [r3]
  0029c	e28330e8	 add         r3, r3, #0xE8
  002a0	e5932000	 ldr         r2, [r3]
  002a4	e59f31d4	 ldr         r3, [pc, #0x1D4]
  002a8	e5933000	 ldr         r3, [r3]
  002ac	e1832002	 orr         r2, r3, r2
  002b0	e59f31c8	 ldr         r3, [pc, #0x1C8]
  002b4	e5832000	 str         r2, [r3]

; 254  :     prevChipState |= INREG32(&g_pPrcmPrm->pOMAP_DSS_PRM->PM_PREPWSTST_DSS);

  002b8	e59f31d4	 ldr         r3, [pc, #0x1D4]
  002bc	e5933000	 ldr         r3, [r3]
  002c0	e2833018	 add         r3, r3, #0x18
  002c4	e5933000	 ldr         r3, [r3]
  002c8	e28330e8	 add         r3, r3, #0xE8
  002cc	e5932000	 ldr         r2, [r3]
  002d0	e59f31a8	 ldr         r3, [pc, #0x1A8]
  002d4	e5933000	 ldr         r3, [r3]
  002d8	e1832002	 orr         r2, r3, r2
  002dc	e59f319c	 ldr         r3, [pc, #0x19C]
  002e0	e5832000	 str         r2, [r3]

; 255  : 
; 256  :     // profile some data
; 257  :     if ((wakeStatus & CM_IDLEST_ST_GPT1) == CM_IDLEST_ST_GPT1)

  002e4	e59f31a4	 ldr         r3, [pc, #0x1A4]
  002e8	e5933000	 ldr         r3, [r3]
  002ec	e2033001	 and         r3, r3, #1
  002f0	e3530001	 cmp         r3, #1
  002f4	1a000052	 bne         |$LN11@PrcmProfil|

; 258  :         {
; 259  :         OMAP_PROFILE_MARK(PROFILE_WAKEUP_TIMER_MATCH, OALTimerGetReg(&g_pTimerRegs->TMAR));

  002f8	e59f318c	 ldr         r3, [pc, #0x18C]
  002fc	e5933000	 ldr         r3, [r3]
  00300	e2830038	 add         r0, r3, #0x38
  00304	eb000000	 bl          OALTimerGetReg
  00308	e58d0000	 str         r0, [sp]
  0030c	e59d1000	 ldr         r1, [sp]
  00310	e3a00002	 mov         r0, #2
  00314	eb000000	 bl          OmapProfilerMark

; 260  :         OMAP_PROFILE_MARK(PROFILE_WAKEUP_TIMER_MATCH_ORIGINAL, (OALTimerGetReg(&g_pTimerRegs->TMAR) + wakeup_delay));

  00318	e59f316c	 ldr         r3, [pc, #0x16C]
  0031c	e5933000	 ldr         r3, [r3]
  00320	e2830038	 add         r0, r3, #0x38
  00324	eb000000	 bl          OALTimerGetReg
  00328	e58d0004	 str         r0, [sp, #4]
  0032c	e59d2004	 ldr         r2, [sp, #4]
  00330	e59d3014	 ldr         r3, [sp, #0x14]
  00334	e0821003	 add         r1, r2, r3
  00338	e3a00003	 mov         r0, #3
  0033c	eb000000	 bl          OmapProfilerMark

; 261  : 
; 262  :         // Profile wake-up latencies
; 263  :         if ((prevChipState & POWERSTATE_MASK) == POWERSTATE_OFF)

  00340	e59f3138	 ldr         r3, [pc, #0x138]
  00344	e5933000	 ldr         r3, [r3]
  00348	e3130003	 tst         r3, #3
  0034c	1a000006	 bne         |$LN10@PrcmProfil|

; 264  :             {
; 265  :             OMAP_PROFILE_MARK(PROFILE_WAKEUP_LATENCY_CHIP_OFF, timer_val);

  00350	e59d1010	 ldr         r1, [sp, #0x10]
  00354	e3a00004	 mov         r0, #4
  00358	eb000000	 bl          OmapProfilerMark

; 266  :             OMAP_PROFILE_MARK(PROFILE_WAKEUP_TIMER_CHIP_OFF, timer_val);

  0035c	e59d1010	 ldr         r1, [sp, #0x10]
  00360	e3a0000a	 mov         r0, #0xA
  00364	eb000000	 bl          OmapProfilerMark
  00368	ea000035	 b           |$LN9@PrcmProfil|
  0036c		 |$LN10@PrcmProfil|

; 267  :             }
; 268  :         else if ((prevChipState & POWERSTATE_MASK) == POWERSTATE_RETENTION)

  0036c	e59f310c	 ldr         r3, [pc, #0x10C]
  00370	e5933000	 ldr         r3, [r3]
  00374	e2033003	 and         r3, r3, #3
  00378	e3530001	 cmp         r3, #1
  0037c	1a000012	 bne         |$LN8@PrcmProfil|

; 269  :             {
; 270  :             if ((prevCoreState & LOGICRETSTATE_LOGICRET_DOMAINRET) == LOGICRETSTATE_LOGICRET_DOMAINRET)

  00380	e59f30fc	 ldr         r3, [pc, #0xFC]
  00384	e5933000	 ldr         r3, [r3]
  00388	e2033004	 and         r3, r3, #4
  0038c	e3530004	 cmp         r3, #4
  00390	1a000006	 bne         |$LN7@PrcmProfil|

; 271  :                 {
; 272  :                 OMAP_PROFILE_MARK(PROFILE_WAKEUP_LATENCY_CHIP_CSWR, timer_val);

  00394	e59d1010	 ldr         r1, [sp, #0x10]
  00398	e3a00006	 mov         r0, #6
  0039c	eb000000	 bl          OmapProfilerMark

; 273  :                 OMAP_PROFILE_MARK(PROFILE_WAKEUP_TIMER_CHIP_CSWR, timer_val);

  003a0	e59d1010	 ldr         r1, [sp, #0x10]
  003a4	e3a0000c	 mov         r0, #0xC
  003a8	eb000000	 bl          OmapProfilerMark

; 274  :                 }
; 275  :             else

  003ac	ea000005	 b           |$LN6@PrcmProfil|
  003b0		 |$LN7@PrcmProfil|

; 276  :                 {
; 277  :                 OMAP_PROFILE_MARK(PROFILE_WAKEUP_LATENCY_CHIP_OSWR, timer_val);

  003b0	e59d1010	 ldr         r1, [sp, #0x10]
  003b4	e3a00005	 mov         r0, #5
  003b8	eb000000	 bl          OmapProfilerMark

; 278  :                 OMAP_PROFILE_MARK(PROFILE_WAKEUP_TIMER_CHIP_OSWR, timer_val);

  003bc	e59d1010	 ldr         r1, [sp, #0x10]
  003c0	e3a0000b	 mov         r0, #0xB
  003c4	eb000000	 bl          OmapProfilerMark
  003c8		 |$LN6@PrcmProfil|

; 279  :                 }

  003c8	ea00001d	 b           |$LN5@PrcmProfil|
  003cc		 |$LN8@PrcmProfil|

; 280  :             }
; 281  :         else if ((prevCoreState & POWERSTATE_MASK) == POWERSTATE_RETENTION)

  003cc	e59f30b0	 ldr         r3, [pc, #0xB0]
  003d0	e5933000	 ldr         r3, [r3]
  003d4	e2033003	 and         r3, r3, #3
  003d8	e3530001	 cmp         r3, #1
  003dc	1a000006	 bne         |$LN4@PrcmProfil|

; 282  :             {
; 283  :             OMAP_PROFILE_MARK(PROFILE_WAKEUP_LATENCY_CORE_CSWR, timer_val);

  003e0	e59d1010	 ldr         r1, [sp, #0x10]
  003e4	e3a00007	 mov         r0, #7
  003e8	eb000000	 bl          OmapProfilerMark

; 284  :             OMAP_PROFILE_MARK(PROFILE_WAKEUP_TIMER_CORE_CSWR, timer_val);

  003ec	e59d1010	 ldr         r1, [sp, #0x10]
  003f0	e3a0000d	 mov         r0, #0xD
  003f4	eb000000	 bl          OmapProfilerMark
  003f8	ea000011	 b           |$LN3@PrcmProfil|
  003fc		 |$LN4@PrcmProfil|

; 285  :             }
; 286  :         else if ((prevMpuState & POWERSTATE_MASK) == POWERSTATE_RETENTION)

  003fc	e59f3084	 ldr         r3, [pc, #0x84]
  00400	e5933000	 ldr         r3, [r3]
  00404	e2033003	 and         r3, r3, #3
  00408	e3530001	 cmp         r3, #1
  0040c	1a000006	 bne         |$LN2@PrcmProfil|

; 287  :             {
; 288  :             OMAP_PROFILE_MARK(PROFILE_WAKEUP_LATENCY_CORE_INACTIVE, timer_val);

  00410	e59d1010	 ldr         r1, [sp, #0x10]
  00414	e3a00008	 mov         r0, #8
  00418	eb000000	 bl          OmapProfilerMark

; 289  :             OMAP_PROFILE_MARK(PROFILE_WAKEUP_TIMER_CORE_INACTIVE, timer_val);

  0041c	e59d1010	 ldr         r1, [sp, #0x10]
  00420	e3a0000e	 mov         r0, #0xE
  00424	eb000000	 bl          OmapProfilerMark

; 290  :             }
; 291  :         else

  00428	ea000005	 b           |$LN1@PrcmProfil|
  0042c		 |$LN2@PrcmProfil|

; 292  :             {
; 293  :             OMAP_PROFILE_MARK(PROFILE_WAKEUP_LATENCY_MPU_INACTIVE, timer_val);

  0042c	e59d1010	 ldr         r1, [sp, #0x10]
  00430	e3a00009	 mov         r0, #9
  00434	eb000000	 bl          OmapProfilerMark

; 294  :             OMAP_PROFILE_MARK(PROFILE_WAKEUP_TIMER_MPU_INACTIVE, timer_val);

  00438	e59d1010	 ldr         r1, [sp, #0x10]
  0043c	e3a0000f	 mov         r0, #0xF
  00440	eb000000	 bl          OmapProfilerMark
  00444		 |$LN1@PrcmProfil|
  00444		 |$LN3@PrcmProfil|
  00444		 |$LN5@PrcmProfil|
  00444		 |$LN9@PrcmProfil|
  00444		 |$LN11@PrcmProfil|

; 295  :             }
; 296  :         }
; 297  : 
; 298  :     OALLED(LED_IDX_MPU_PREV_STATE, prevMpuState);

  00444	e59f303c	 ldr         r3, [pc, #0x3C]
  00448	e5931000	 ldr         r1, [r3]
  0044c	e3a00018	 mov         r0, #0x18
  00450	eb000000	 bl          OEMWriteDebugLED

; 299  :     OALLED(LED_IDX_CORE_PREV_STATE, prevCoreState);

  00454	e59f3028	 ldr         r3, [pc, #0x28]
  00458	e5931000	 ldr         r1, [r3]
  0045c	e3a0001a	 mov         r0, #0x1A
  00460	eb000000	 bl          OEMWriteDebugLED

; 300  :     OALLED(LED_IDX_CHIP_PREV_STATE, prevChipState);

  00464	e59f3014	 ldr         r3, [pc, #0x14]
  00468	e5931000	 ldr         r1, [r3]
  0046c	e3a0001b	 mov         r0, #0x1B
  00470	eb000000	 bl          OEMWriteDebugLED

; 301  : }

  00474	e28dd008	 add         sp, sp, #8
  00478	e89d6000	 ldmia       sp, {sp, lr}
  0047c	e12fff1e	 bx          lr
  00480		 |$LN17@PrcmProfil|
  00480		 |$LN18@PrcmProfil|
  00480	00000000	 DCD         |prevChipState|
  00484		 |$LN19@PrcmProfil|
  00484	00000000	 DCD         |prevCoreState|
  00488		 |$LN20@PrcmProfil|
  00488	00000000	 DCD         |prevMpuState|
  0048c		 |$LN21@PrcmProfil|
  0048c	00000000	 DCD         |g_pTimerRegs|
  00490		 |$LN22@PrcmProfil|
  00490	00000000	 DCD         |wakeStatus|
  00494		 |$LN23@PrcmProfil|
  00494	00000000	 DCD         |g_pPrcmPrm|
  00498		 |$LN24@PrcmProfil|
  00498	00000000	 DCD         |prevPerState|
  0049c		 |$M47498|

			 ENDP  ; |PrcmProfilePrevPowerState|

	EXPORT	|PrcmCapturePrevPowerState|
	IMPORT	|OALContextRestore|

  00018			 AREA	 |.pdata|, PDATA
|$T47513| DCD	|$LN5@PrcmCaptur|
	DCD	0x40002e01
; Function compile flags: /Odtp

  0049c			 AREA	 |.text|, CODE, ARM

  0049c		 |PrcmCapturePrevPowerState| PROC

; 306  : {

  0049c		 |$LN5@PrcmCaptur|
  0049c	e52de004	 str         lr, [sp, #-4]!
  004a0		 |$M47510|

; 307  :     // capture previous power state and clear it
; 308  :     wakeStatus = INREG32(&g_pPrcmPrm->pOMAP_WKUP_PRM->PM_WKST_WKUP);

  004a0	e59f30a4	 ldr         r3, [pc, #0xA4]
  004a4	e5933000	 ldr         r3, [r3]
  004a8	e5933000	 ldr         r3, [r3]
  004ac	e28330b0	 add         r3, r3, #0xB0
  004b0	e5932000	 ldr         r2, [r3]
  004b4	e59f3094	 ldr         r3, [pc, #0x94]
  004b8	e5832000	 str         r2, [r3]

; 309  :     prevCoreState = INREG32(&g_pPrcmPrm->pOMAP_CORE_PRM->PM_PREPWSTST_CORE);

  004bc	e59f3088	 ldr         r3, [pc, #0x88]
  004c0	e5933000	 ldr         r3, [r3]
  004c4	e2833004	 add         r3, r3, #4
  004c8	e5933000	 ldr         r3, [r3]
  004cc	e28330e8	 add         r3, r3, #0xE8
  004d0	e5932000	 ldr         r2, [r3]
  004d4	e59f3068	 ldr         r3, [pc, #0x68]
  004d8	e5832000	 str         r2, [r3]

; 310  :     prevMpuState = INREG32(&g_pPrcmPrm->pOMAP_MPU_PRM->PM_PREPWSTST_MPU);

  004dc	e59f3068	 ldr         r3, [pc, #0x68]
  004e0	e5933000	 ldr         r3, [r3]
  004e4	e2833014	 add         r3, r3, #0x14
  004e8	e5933000	 ldr         r3, [r3]
  004ec	e28330e8	 add         r3, r3, #0xE8
  004f0	e5932000	 ldr         r2, [r3]
  004f4	e59f3044	 ldr         r3, [pc, #0x44]
  004f8	e5832000	 str         r2, [r3]

; 311  :     prevPerState = INREG32(&g_pPrcmPrm->pOMAP_PER_PRM->PM_PREPWSTST_PER);

  004fc	e59f3048	 ldr         r3, [pc, #0x48]
  00500	e5933000	 ldr         r3, [r3]
  00504	e2833008	 add         r3, r3, #8
  00508	e5933000	 ldr         r3, [r3]
  0050c	e28330e8	 add         r3, r3, #0xE8
  00510	e5932000	 ldr         r2, [r3]
  00514	e59f302c	 ldr         r3, [pc, #0x2C]
  00518	e5832000	 str         r2, [r3]

; 312  : 
; 313  :     // Restore the System Context
; 314  :     OALContextRestore(prevMpuState, prevCoreState, prevPerState);

  0051c	e59f3024	 ldr         r3, [pc, #0x24]
  00520	e5932000	 ldr         r2, [r3]
  00524	e59f3018	 ldr         r3, [pc, #0x18]
  00528	e5931000	 ldr         r1, [r3]
  0052c	e59f300c	 ldr         r3, [pc, #0xC]
  00530	e5930000	 ldr         r0, [r3]
  00534	eb000000	 bl          OALContextRestore

; 315  : }

  00538	e49de004	 ldr         lr, [sp], #4
  0053c	e12fff1e	 bx          lr
  00540		 |$LN6@PrcmCaptur|
  00540		 |$LN7@PrcmCaptur|
  00540	00000000	 DCD         |prevMpuState|
  00544		 |$LN8@PrcmCaptur|
  00544	00000000	 DCD         |prevCoreState|
  00548		 |$LN9@PrcmCaptur|
  00548	00000000	 DCD         |prevPerState|
  0054c		 |$LN10@PrcmCaptur|
  0054c	00000000	 DCD         |g_pPrcmPrm|
  00550		 |$LN11@PrcmCaptur|
  00550	00000000	 DCD         |wakeStatus|
  00554		 |$M47511|

			 ENDP  ; |PrcmCapturePrevPowerState|

	EXPORT	|GetCmRegisterSet|

  00020			 AREA	 |.pdata|, PDATA
|$T47538| DCD	|$LN31@GetCmRegis|
	DCD	0x40006104
; Function compile flags: /Odtp

  00554			 AREA	 |.text|, CODE, ARM

  00554		 |GetCmRegisterSet| PROC

; 323  : {

  00554		 |$LN31@GetCmRegis|
  00554	e1a0c00d	 mov         r12, sp
  00558	e92d0001	 stmdb       sp!, {r0}
  0055c	e92d5000	 stmdb       sp!, {r12, lr}
  00560	e24dd008	 sub         sp, sp, #8
  00564		 |$M47535|

; 324  :     switch (powerDomain)

  00564	e59d3010	 ldr         r3, [sp, #0x10]
  00568	e58d3004	 str         r3, [sp, #4]
  0056c	e59d3004	 ldr         r3, [sp, #4]
  00570	e353000a	 cmp         r3, #0xA
  00574	8a000050	 bhi         |$LN12@GetCmRegis|
  00578	e59d2004	 ldr         r2, [sp, #4]
  0057c	e1a03102	 mov         r3, r2, lsl #2
  00580	e083300f	 add         r3, r3, pc
  00584	e5933004	 ldr         r3, [r3, #4]
  00588	e08ff003	 add         pc, pc, r3
  0058c		 |$LN17@GetCmRegis|
  0058c		 |$LN16@GetCmRegis|
  0058c		 |$LN18@GetCmRegis|
  0058c	00000028	 DCD         0x28
  00590		 |$LN19@GetCmRegis|
  00590	0000003c	 DCD         0x3c
  00594		 |$LN20@GetCmRegis|
  00594	00000054	 DCD         0x54
  00598		 |$LN21@GetCmRegis|
  00598	0000006c	 DCD         0x6c
  0059c		 |$LN22@GetCmRegis|
  0059c	00000084	 DCD         0x84
  005a0		 |$LN23@GetCmRegis|
  005a0	0000009c	 DCD         0x9c
  005a4		 |$LN24@GetCmRegis|
  005a4	000000b4	 DCD         0xb4
  005a8		 |$LN25@GetCmRegis|
  005a8	000000cc	 DCD         0xcc
  005ac		 |$LN26@GetCmRegis|
  005ac	000000e4	 DCD         0xe4
  005b0		 |$LN27@GetCmRegis|
  005b0	000000fc	 DCD         0xfc
  005b4		 |$LN28@GetCmRegis|
  005b4	00000114	 DCD         0x114
  005b8		 |$LN11@GetCmRegis|

; 325  :         {
; 326  :         case POWERDOMAIN_WAKEUP:
; 327  :             return (OMAP_CM_REGS*)g_pPrcmCm->pOMAP_WKUP_CM;

  005b8	e59f3114	 ldr         r3, [pc, #0x114]
  005bc	e5933000	 ldr         r3, [r3]
  005c0	e5933000	 ldr         r3, [r3]
  005c4	e58d3000	 str         r3, [sp]
  005c8	ea00003d	 b           |$LN14@GetCmRegis|
  005cc		 |$LN10@GetCmRegis|

; 328  : 
; 329  :         case POWERDOMAIN_CORE:
; 330  :             return (OMAP_CM_REGS*)g_pPrcmCm->pOMAP_CORE_CM;

  005cc	e59f3100	 ldr         r3, [pc, #0x100]
  005d0	e5933000	 ldr         r3, [r3]
  005d4	e2833004	 add         r3, r3, #4
  005d8	e5933000	 ldr         r3, [r3]
  005dc	e58d3000	 str         r3, [sp]
  005e0	ea000037	 b           |$LN14@GetCmRegis|
  005e4		 |$LN9@GetCmRegis|

; 331  : 
; 332  :         case POWERDOMAIN_PERIPHERAL:
; 333  :             return (OMAP_CM_REGS*)g_pPrcmCm->pOMAP_PER_CM;

  005e4	e59f30e8	 ldr         r3, [pc, #0xE8]
  005e8	e5933000	 ldr         r3, [r3]
  005ec	e2833008	 add         r3, r3, #8
  005f0	e5933000	 ldr         r3, [r3]
  005f4	e58d3000	 str         r3, [sp]
  005f8	ea000031	 b           |$LN14@GetCmRegis|
  005fc		 |$LN8@GetCmRegis|

; 334  : 
; 335  :         case POWERDOMAIN_USBHOST:
; 336  :             return (OMAP_CM_REGS*)g_pPrcmCm->pOMAP_USBHOST_CM;

  005fc	e59f30d0	 ldr         r3, [pc, #0xD0]
  00600	e5933000	 ldr         r3, [r3]
  00604	e283300c	 add         r3, r3, #0xC
  00608	e5933000	 ldr         r3, [r3]
  0060c	e58d3000	 str         r3, [sp]
  00610	ea00002b	 b           |$LN14@GetCmRegis|
  00614		 |$LN7@GetCmRegis|

; 337  : 
; 338  :         case POWERDOMAIN_EMULATION:
; 339  :             return (OMAP_CM_REGS*)g_pPrcmCm->pOMAP_EMU_CM;

  00614	e59f30b8	 ldr         r3, [pc, #0xB8]
  00618	e5933000	 ldr         r3, [r3]
  0061c	e2833010	 add         r3, r3, #0x10
  00620	e5933000	 ldr         r3, [r3]
  00624	e58d3000	 str         r3, [sp]
  00628	ea000025	 b           |$LN14@GetCmRegis|
  0062c		 |$LN6@GetCmRegis|

; 340  : 
; 341  :         case POWERDOMAIN_MPU:
; 342  :             return (OMAP_CM_REGS*)g_pPrcmCm->pOMAP_MPU_CM;

  0062c	e59f30a0	 ldr         r3, [pc, #0xA0]
  00630	e5933000	 ldr         r3, [r3]
  00634	e2833014	 add         r3, r3, #0x14
  00638	e5933000	 ldr         r3, [r3]
  0063c	e58d3000	 str         r3, [sp]
  00640	ea00001f	 b           |$LN14@GetCmRegis|
  00644		 |$LN5@GetCmRegis|

; 343  : 
; 344  :         case POWERDOMAIN_DSS:
; 345  :             return (OMAP_CM_REGS*)g_pPrcmCm->pOMAP_DSS_CM;

  00644	e59f3088	 ldr         r3, [pc, #0x88]
  00648	e5933000	 ldr         r3, [r3]
  0064c	e2833018	 add         r3, r3, #0x18
  00650	e5933000	 ldr         r3, [r3]
  00654	e58d3000	 str         r3, [sp]
  00658	ea000019	 b           |$LN14@GetCmRegis|
  0065c		 |$LN4@GetCmRegis|

; 346  : 
; 347  :         case POWERDOMAIN_NEON:
; 348  :             return (OMAP_CM_REGS*)g_pPrcmCm->pOMAP_NEON_CM;

  0065c	e59f3070	 ldr         r3, [pc, #0x70]
  00660	e5933000	 ldr         r3, [r3]
  00664	e283301c	 add         r3, r3, #0x1C
  00668	e5933000	 ldr         r3, [r3]
  0066c	e58d3000	 str         r3, [sp]
  00670	ea000013	 b           |$LN14@GetCmRegis|
  00674		 |$LN3@GetCmRegis|

; 349  : 
; 350  :         case POWERDOMAIN_IVA2:
; 351  :             return (OMAP_CM_REGS*)g_pPrcmCm->pOMAP_IVA2_CM;

  00674	e59f3058	 ldr         r3, [pc, #0x58]
  00678	e5933000	 ldr         r3, [r3]
  0067c	e2833020	 add         r3, r3, #0x20
  00680	e5933000	 ldr         r3, [r3]
  00684	e58d3000	 str         r3, [sp]
  00688	ea00000d	 b           |$LN14@GetCmRegis|
  0068c		 |$LN2@GetCmRegis|

; 352  : 
; 353  :         case POWERDOMAIN_CAMERA:
; 354  :             return (OMAP_CM_REGS*)g_pPrcmCm->pOMAP_CAM_CM;

  0068c	e59f3040	 ldr         r3, [pc, #0x40]
  00690	e5933000	 ldr         r3, [r3]
  00694	e2833024	 add         r3, r3, #0x24
  00698	e5933000	 ldr         r3, [r3]
  0069c	e58d3000	 str         r3, [sp]
  006a0	ea000007	 b           |$LN14@GetCmRegis|
  006a4		 |$LN1@GetCmRegis|

; 355  : 
; 356  :         case POWERDOMAIN_SGX:
; 357  :             return (OMAP_CM_REGS*)g_pPrcmCm->pOMAP_SGX_CM;

  006a4	e59f3028	 ldr         r3, [pc, #0x28]
  006a8	e5933000	 ldr         r3, [r3]
  006ac	e2833028	 add         r3, r3, #0x28
  006b0	e5933000	 ldr         r3, [r3]
  006b4	e58d3000	 str         r3, [sp]
  006b8	ea000001	 b           |$LN14@GetCmRegis|
  006bc		 |$LN12@GetCmRegis|

; 358  :         }
; 359  : 
; 360  :     return NULL;

  006bc	e3a03000	 mov         r3, #0
  006c0	e58d3000	 str         r3, [sp]
  006c4		 |$LN14@GetCmRegis|

; 361  : }

  006c4	e59d0000	 ldr         r0, [sp]
  006c8	e28dd008	 add         sp, sp, #8
  006cc	e89d6000	 ldmia       sp, {sp, lr}
  006d0	e12fff1e	 bx          lr
  006d4		 |$LN32@GetCmRegis|
  006d4		 |$LN33@GetCmRegis|
  006d4	00000000	 DCD         |g_pPrcmCm|
  006d8		 |$M47536|

			 ENDP  ; |GetCmRegisterSet|

	EXPORT	|GetPrmRegisterSet|

  00028			 AREA	 |.pdata|, PDATA
|$T47559| DCD	|$LN31@GetPrmRegi|
	DCD	0x40006104
; Function compile flags: /Odtp

  006d8			 AREA	 |.text|, CODE, ARM

  006d8		 |GetPrmRegisterSet| PROC

; 368  : {

  006d8		 |$LN31@GetPrmRegi|
  006d8	e1a0c00d	 mov         r12, sp
  006dc	e92d0001	 stmdb       sp!, {r0}
  006e0	e92d5000	 stmdb       sp!, {r12, lr}
  006e4	e24dd008	 sub         sp, sp, #8
  006e8		 |$M47556|

; 369  :     switch (powerDomain)

  006e8	e59d3010	 ldr         r3, [sp, #0x10]
  006ec	e58d3004	 str         r3, [sp, #4]
  006f0	e59d3004	 ldr         r3, [sp, #4]
  006f4	e353000a	 cmp         r3, #0xA
  006f8	8a000050	 bhi         |$LN12@GetPrmRegi|
  006fc	e59d2004	 ldr         r2, [sp, #4]
  00700	e1a03102	 mov         r3, r2, lsl #2
  00704	e083300f	 add         r3, r3, pc
  00708	e5933004	 ldr         r3, [r3, #4]
  0070c	e08ff003	 add         pc, pc, r3
  00710		 |$LN17@GetPrmRegi|
  00710		 |$LN16@GetPrmRegi|
  00710		 |$LN18@GetPrmRegi|
  00710	00000028	 DCD         0x28
  00714		 |$LN19@GetPrmRegi|
  00714	0000003c	 DCD         0x3c
  00718		 |$LN20@GetPrmRegi|
  00718	00000054	 DCD         0x54
  0071c		 |$LN21@GetPrmRegi|
  0071c	0000006c	 DCD         0x6c
  00720		 |$LN22@GetPrmRegi|
  00720	00000084	 DCD         0x84
  00724		 |$LN23@GetPrmRegi|
  00724	0000009c	 DCD         0x9c
  00728		 |$LN24@GetPrmRegi|
  00728	000000b4	 DCD         0xb4
  0072c		 |$LN25@GetPrmRegi|
  0072c	000000cc	 DCD         0xcc
  00730		 |$LN26@GetPrmRegi|
  00730	000000e4	 DCD         0xe4
  00734		 |$LN27@GetPrmRegi|
  00734	000000fc	 DCD         0xfc
  00738		 |$LN28@GetPrmRegi|
  00738	00000114	 DCD         0x114
  0073c		 |$LN11@GetPrmRegi|

; 370  :         {
; 371  :         case POWERDOMAIN_WAKEUP:
; 372  :             return (OMAP_PRM_REGS*)g_pPrcmPrm->pOMAP_WKUP_PRM;

  0073c	e59f3114	 ldr         r3, [pc, #0x114]
  00740	e5933000	 ldr         r3, [r3]
  00744	e5933000	 ldr         r3, [r3]
  00748	e58d3000	 str         r3, [sp]
  0074c	ea00003d	 b           |$LN14@GetPrmRegi|
  00750		 |$LN10@GetPrmRegi|

; 373  : 
; 374  :         case POWERDOMAIN_CORE:
; 375  :             return (OMAP_PRM_REGS*)g_pPrcmPrm->pOMAP_CORE_PRM;

  00750	e59f3100	 ldr         r3, [pc, #0x100]
  00754	e5933000	 ldr         r3, [r3]
  00758	e2833004	 add         r3, r3, #4
  0075c	e5933000	 ldr         r3, [r3]
  00760	e58d3000	 str         r3, [sp]
  00764	ea000037	 b           |$LN14@GetPrmRegi|
  00768		 |$LN9@GetPrmRegi|

; 376  : 
; 377  :         case POWERDOMAIN_PERIPHERAL:
; 378  :             return (OMAP_PRM_REGS*)g_pPrcmPrm->pOMAP_PER_PRM;

  00768	e59f30e8	 ldr         r3, [pc, #0xE8]
  0076c	e5933000	 ldr         r3, [r3]
  00770	e2833008	 add         r3, r3, #8
  00774	e5933000	 ldr         r3, [r3]
  00778	e58d3000	 str         r3, [sp]
  0077c	ea000031	 b           |$LN14@GetPrmRegi|
  00780		 |$LN8@GetPrmRegi|

; 379  : 
; 380  :         case POWERDOMAIN_USBHOST:
; 381  :             return (OMAP_PRM_REGS*)g_pPrcmPrm->pOMAP_USBHOST_PRM;

  00780	e59f30d0	 ldr         r3, [pc, #0xD0]
  00784	e5933000	 ldr         r3, [r3]
  00788	e283300c	 add         r3, r3, #0xC
  0078c	e5933000	 ldr         r3, [r3]
  00790	e58d3000	 str         r3, [sp]
  00794	ea00002b	 b           |$LN14@GetPrmRegi|
  00798		 |$LN7@GetPrmRegi|

; 382  : 
; 383  :         case POWERDOMAIN_EMULATION:
; 384  :             return (OMAP_PRM_REGS*)g_pPrcmPrm->pOMAP_EMU_PRM;

  00798	e59f30b8	 ldr         r3, [pc, #0xB8]
  0079c	e5933000	 ldr         r3, [r3]
  007a0	e2833010	 add         r3, r3, #0x10
  007a4	e5933000	 ldr         r3, [r3]
  007a8	e58d3000	 str         r3, [sp]
  007ac	ea000025	 b           |$LN14@GetPrmRegi|
  007b0		 |$LN6@GetPrmRegi|

; 385  : 
; 386  :         case POWERDOMAIN_MPU:
; 387  :             return (OMAP_PRM_REGS*)g_pPrcmPrm->pOMAP_MPU_PRM;

  007b0	e59f30a0	 ldr         r3, [pc, #0xA0]
  007b4	e5933000	 ldr         r3, [r3]
  007b8	e2833014	 add         r3, r3, #0x14
  007bc	e5933000	 ldr         r3, [r3]
  007c0	e58d3000	 str         r3, [sp]
  007c4	ea00001f	 b           |$LN14@GetPrmRegi|
  007c8		 |$LN5@GetPrmRegi|

; 388  : 
; 389  :         case POWERDOMAIN_DSS:
; 390  :             return (OMAP_PRM_REGS*)g_pPrcmPrm->pOMAP_DSS_PRM;

  007c8	e59f3088	 ldr         r3, [pc, #0x88]
  007cc	e5933000	 ldr         r3, [r3]
  007d0	e2833018	 add         r3, r3, #0x18
  007d4	e5933000	 ldr         r3, [r3]
  007d8	e58d3000	 str         r3, [sp]
  007dc	ea000019	 b           |$LN14@GetPrmRegi|
  007e0		 |$LN4@GetPrmRegi|

; 391  : 
; 392  :         case POWERDOMAIN_NEON:
; 393  :             return (OMAP_PRM_REGS*)g_pPrcmPrm->pOMAP_NEON_PRM;

  007e0	e59f3070	 ldr         r3, [pc, #0x70]
  007e4	e5933000	 ldr         r3, [r3]
  007e8	e283301c	 add         r3, r3, #0x1C
  007ec	e5933000	 ldr         r3, [r3]
  007f0	e58d3000	 str         r3, [sp]
  007f4	ea000013	 b           |$LN14@GetPrmRegi|
  007f8		 |$LN3@GetPrmRegi|

; 394  : 
; 395  :         case POWERDOMAIN_IVA2:
; 396  :             return (OMAP_PRM_REGS*)g_pPrcmPrm->pOMAP_IVA2_PRM;

  007f8	e59f3058	 ldr         r3, [pc, #0x58]
  007fc	e5933000	 ldr         r3, [r3]
  00800	e2833020	 add         r3, r3, #0x20
  00804	e5933000	 ldr         r3, [r3]
  00808	e58d3000	 str         r3, [sp]
  0080c	ea00000d	 b           |$LN14@GetPrmRegi|
  00810		 |$LN2@GetPrmRegi|

; 397  : 
; 398  :         case POWERDOMAIN_CAMERA:
; 399  :             return (OMAP_PRM_REGS*)g_pPrcmPrm->pOMAP_CAM_PRM;

  00810	e59f3040	 ldr         r3, [pc, #0x40]
  00814	e5933000	 ldr         r3, [r3]
  00818	e2833024	 add         r3, r3, #0x24
  0081c	e5933000	 ldr         r3, [r3]
  00820	e58d3000	 str         r3, [sp]
  00824	ea000007	 b           |$LN14@GetPrmRegi|
  00828		 |$LN1@GetPrmRegi|

; 400  : 
; 401  :         case POWERDOMAIN_SGX:
; 402  :             return (OMAP_PRM_REGS*)g_pPrcmPrm->pOMAP_SGX_PRM;

  00828	e59f3028	 ldr         r3, [pc, #0x28]
  0082c	e5933000	 ldr         r3, [r3]
  00830	e2833028	 add         r3, r3, #0x28
  00834	e5933000	 ldr         r3, [r3]
  00838	e58d3000	 str         r3, [sp]
  0083c	ea000001	 b           |$LN14@GetPrmRegi|
  00840		 |$LN12@GetPrmRegi|

; 403  :         }
; 404  : 
; 405  :     return NULL;

  00840	e3a03000	 mov         r3, #0
  00844	e58d3000	 str         r3, [sp]
  00848		 |$LN14@GetPrmRegi|

; 406  : }

  00848	e59d0000	 ldr         r0, [sp]
  0084c	e28dd008	 add         sp, sp, #8
  00850	e89d6000	 ldmia       sp, {sp, lr}
  00854	e12fff1e	 bx          lr
  00858		 |$LN32@GetPrmRegi|
  00858		 |$LN33@GetPrmRegi|
  00858	00000000	 DCD         |g_pPrcmPrm|
  0085c		 |$M47557|

			 ENDP  ; |GetPrmRegisterSet|

	EXPORT	|Unlock|
	EXPORT	|Lock|
	EXPORT	|PrcmInterruptEnable|

  00030			 AREA	 |.pdata|, PDATA
|$T47569| DCD	|$LN7@PrcmInterr|
	DCD	0x40002c04
; Function compile flags: /Odtp

  0085c			 AREA	 |.text|, CODE, ARM

  0085c		 |PrcmInterruptEnable| PROC

; 414  : {

  0085c		 |$LN7@PrcmInterr|
  0085c	e1a0c00d	 mov         r12, sp
  00860	e92d0003	 stmdb       sp!, {r0, r1}
  00864	e92d5000	 stmdb       sp!, {r12, lr}
  00868	e24dd00c	 sub         sp, sp, #0xC
  0086c		 |$M47566|

; 415  :     UINT val;
; 416  :     Lock(Mutex_Intr);

  0086c	e3a00005	 mov         r0, #5
  00870	eb000000	 bl          Lock

; 417  : 
; 418  :     // enable/disable prcm interrupts
; 419  :     val = INREG32(&g_pPrcmPrm->pOMAP_OCP_SYSTEM_PRM->PRM_IRQENABLE_MPU);

  00874	e59f308c	 ldr         r3, [pc, #0x8C]
  00878	e5933000	 ldr         r3, [r3]
  0087c	e2833030	 add         r3, r3, #0x30
  00880	e5933000	 ldr         r3, [r3]
  00884	e283301c	 add         r3, r3, #0x1C
  00888	e5933000	 ldr         r3, [r3]
  0088c	e58d3000	 str         r3, [sp]

; 420  :     val = (bEnable != FALSE) ? (val | mask) : (val & ~mask);

  00890	e59d3018	 ldr         r3, [sp, #0x18]
  00894	e3530000	 cmp         r3, #0
  00898	0a000004	 beq         |$LN3@PrcmInterr|
  0089c	e59d2000	 ldr         r2, [sp]
  008a0	e59d3014	 ldr         r3, [sp, #0x14]
  008a4	e1823003	 orr         r3, r2, r3
  008a8	e58d3008	 str         r3, [sp, #8]
  008ac	ea000004	 b           |$LN4@PrcmInterr|
  008b0		 |$LN3@PrcmInterr|
  008b0	e59d3014	 ldr         r3, [sp, #0x14]
  008b4	e1e02003	 mvn         r2, r3
  008b8	e59d3000	 ldr         r3, [sp]
  008bc	e0033002	 and         r3, r3, r2
  008c0	e58d3008	 str         r3, [sp, #8]
  008c4		 |$LN4@PrcmInterr|
  008c4	e59d3008	 ldr         r3, [sp, #8]
  008c8	e58d3000	 str         r3, [sp]

; 421  :     OUTREG32(&g_pPrcmPrm->pOMAP_OCP_SYSTEM_PRM->PRM_IRQENABLE_MPU, val);

  008cc	e59f3034	 ldr         r3, [pc, #0x34]
  008d0	e5933000	 ldr         r3, [r3]
  008d4	e2833030	 add         r3, r3, #0x30
  008d8	e5933000	 ldr         r3, [r3]
  008dc	e283201c	 add         r2, r3, #0x1C
  008e0	e59d3000	 ldr         r3, [sp]
  008e4	e5823000	 str         r3, [r2]

; 422  : 
; 423  :     Unlock(Mutex_Intr);

  008e8	e3a00005	 mov         r0, #5
  008ec	eb000000	 bl          Unlock

; 424  :     return val;

  008f0	e59d3000	 ldr         r3, [sp]
  008f4	e58d3004	 str         r3, [sp, #4]

; 425  : }

  008f8	e59d0004	 ldr         r0, [sp, #4]
  008fc	e28dd00c	 add         sp, sp, #0xC
  00900	e89d6000	 ldmia       sp, {sp, lr}
  00904	e12fff1e	 bx          lr
  00908		 |$LN8@PrcmInterr|
  00908		 |$LN9@PrcmInterr|
  00908	00000000	 DCD         |g_pPrcmPrm|
  0090c		 |$M47567|

			 ENDP  ; |PrcmInterruptEnable|

	IMPORT	|EnterCriticalSection|
; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\oal\prcm\prcm_priv.h

  00000			 AREA	 |.pdata|, PDATA
|$T47576| DCD	|$LN6@Lock|
	DCD	0x40001603
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Lock|	 PROC

; 266  : {

  00000		 |$LN6@Lock|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M47573|

; 267  :     if (g_PrcmPostInit && !g_bSingleThreaded) 

  0000c	e59f3040	 ldr         r3, [pc, #0x40]
  00010	e5933000	 ldr         r3, [r3]
  00014	e3530000	 cmp         r3, #0
  00018	0a000009	 beq         |$LN1@Lock|
  0001c	e59f302c	 ldr         r3, [pc, #0x2C]
  00020	e5933000	 ldr         r3, [r3]
  00024	e3530000	 cmp         r3, #0
  00028	1a000005	 bne         |$LN1@Lock|

; 268  :         {
; 269  :         EnterCriticalSection(&g_rgPrcmMutex[mutexId]);

  0002c	e59d1008	 ldr         r1, [sp, #8]
  00030	e3a03014	 mov         r3, #0x14
  00034	e0020391	 mul         r2, r1, r3
  00038	e59f300c	 ldr         r3, [pc, #0xC]
  0003c	e0830002	 add         r0, r3, r2
  00040	eb000000	 bl          EnterCriticalSection
  00044		 |$LN1@Lock|

; 270  :         }
; 271  : }

  00044	e89d6000	 ldmia       sp, {sp, lr}
  00048	e12fff1e	 bx          lr
  0004c		 |$LN7@Lock|
  0004c		 |$LN8@Lock|
  0004c	00000000	 DCD         |g_rgPrcmMutex|
  00050		 |$LN9@Lock|
  00050	00000000	 DCD         |g_bSingleThreaded|
  00054		 |$LN10@Lock|
  00054	00000000	 DCD         |g_PrcmPostInit|
  00058		 |$M47574|

			 ENDP  ; |Lock|

	IMPORT	|LeaveCriticalSection|

  00000			 AREA	 |.pdata|, PDATA
|$T47587| DCD	|$LN6@Unlock|
	DCD	0x40001603
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Unlock| PROC

; 277  : {

  00000		 |$LN6@Unlock|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M47584|

; 278  :     if (g_PrcmPostInit && !g_bSingleThreaded)

  0000c	e59f3040	 ldr         r3, [pc, #0x40]
  00010	e5933000	 ldr         r3, [r3]
  00014	e3530000	 cmp         r3, #0
  00018	0a000009	 beq         |$LN1@Unlock|
  0001c	e59f302c	 ldr         r3, [pc, #0x2C]
  00020	e5933000	 ldr         r3, [r3]
  00024	e3530000	 cmp         r3, #0
  00028	1a000005	 bne         |$LN1@Unlock|

; 279  :         {
; 280  :         LeaveCriticalSection(&g_rgPrcmMutex[mutexId]);

  0002c	e59d1008	 ldr         r1, [sp, #8]
  00030	e3a03014	 mov         r3, #0x14
  00034	e0020391	 mul         r2, r1, r3
  00038	e59f300c	 ldr         r3, [pc, #0xC]
  0003c	e0830002	 add         r0, r3, r2
  00040	eb000000	 bl          LeaveCriticalSection
  00044		 |$LN1@Unlock|

; 281  :         }
; 282  : }

  00044	e89d6000	 ldmia       sp, {sp, lr}
  00048	e12fff1e	 bx          lr
  0004c		 |$LN7@Unlock|
  0004c		 |$LN8@Unlock|
  0004c	00000000	 DCD         |g_rgPrcmMutex|
  00050		 |$LN9@Unlock|
  00050	00000000	 DCD         |g_bSingleThreaded|
  00054		 |$LN10@Unlock|
  00054	00000000	 DCD         |g_PrcmPostInit|
  00058		 |$M47585|

			 ENDP  ; |Unlock|

	EXPORT	|PrcmInterruptClearStatus|

  00038			 AREA	 |.pdata|, PDATA
|$T47599| DCD	|$LN5@PrcmInterr@2|
	DCD	0x40002604
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\oal\prcm\prcm.c

  0090c			 AREA	 |.text|, CODE, ARM

  0090c		 |PrcmInterruptClearStatus| PROC

; 432  : {

  0090c		 |$LN5@PrcmInterr@2|
  0090c	e1a0c00d	 mov         r12, sp
  00910	e92d0001	 stmdb       sp!, {r0}
  00914	e92d5000	 stmdb       sp!, {r12, lr}
  00918	e24dd008	 sub         sp, sp, #8
  0091c		 |$M47596|

; 433  :     UINT val;
; 434  : 
; 435  :     // This routine should only be called during system boot-up or
; 436  :     // from OEMIdle.  Hence, serialization within this routine
; 437  :     // should not be performed.
; 438  : 
; 439  :     // clear prcm interrupt status
; 440  :     val = INREG32(&g_pPrcmPrm->pOMAP_OCP_SYSTEM_PRM->PRM_IRQSTATUS_MPU);

  0091c	e59f307c	 ldr         r3, [pc, #0x7C]
  00920	e5933000	 ldr         r3, [r3]
  00924	e2833030	 add         r3, r3, #0x30
  00928	e5933000	 ldr         r3, [r3]
  0092c	e2833018	 add         r3, r3, #0x18
  00930	e5933000	 ldr         r3, [r3]
  00934	e58d3000	 str         r3, [sp]

; 441  :     OUTREG32(&g_pPrcmPrm->pOMAP_OCP_SYSTEM_PRM->PRM_IRQSTATUS_MPU, val & mask);

  00938	e59d2000	 ldr         r2, [sp]
  0093c	e59d3010	 ldr         r3, [sp, #0x10]
  00940	e0022003	 and         r2, r2, r3
  00944	e59f3054	 ldr         r3, [pc, #0x54]
  00948	e5933000	 ldr         r3, [r3]
  0094c	e2833030	 add         r3, r3, #0x30
  00950	e5933000	 ldr         r3, [r3]
  00954	e2833018	 add         r3, r3, #0x18
  00958	e5832000	 str         r2, [r3]

; 442  : 
; 443  :     // wakeup
; 444  :     OUTREG32(&g_pPrcmPrm->pOMAP_WKUP_PRM->PM_WKST_WKUP,
; 445  :         INREG32(&g_pPrcmPrm->pOMAP_WKUP_PRM->PM_WKST_WKUP) | CM_CLKEN_IO
; 446  :         );

  0095c	e59f303c	 ldr         r3, [pc, #0x3C]
  00960	e5933000	 ldr         r3, [r3]
  00964	e5933000	 ldr         r3, [r3]
  00968	e28330b0	 add         r3, r3, #0xB0
  0096c	e5933000	 ldr         r3, [r3]
  00970	e3832c01	 orr         r2, r3, #1, 24
  00974	e59f3024	 ldr         r3, [pc, #0x24]
  00978	e5933000	 ldr         r3, [r3]
  0097c	e5933000	 ldr         r3, [r3]
  00980	e28330b0	 add         r3, r3, #0xB0
  00984	e5832000	 str         r2, [r3]

; 447  : 
; 448  :     // return the status prior to clearing the status
; 449  :     return val;

  00988	e59d3000	 ldr         r3, [sp]
  0098c	e58d3004	 str         r3, [sp, #4]

; 450  : }

  00990	e59d0004	 ldr         r0, [sp, #4]
  00994	e28dd008	 add         sp, sp, #8
  00998	e89d6000	 ldmia       sp, {sp, lr}
  0099c	e12fff1e	 bx          lr
  009a0		 |$LN6@PrcmInterr@2|
  009a0		 |$LN7@PrcmInterr@2|
  009a0	00000000	 DCD         |g_pPrcmPrm|
  009a4		 |$M47597|

			 ENDP  ; |PrcmInterruptClearStatus|

	EXPORT	|PrcmInterruptProcess|

  00040			 AREA	 |.pdata|, PDATA
|$T47607| DCD	|$LN15@PrcmInterr@3|
	DCD	0x40007704
; Function compile flags: /Odtp

  009a4			 AREA	 |.text|, CODE, ARM

  009a4		 |PrcmInterruptProcess| PROC

; 457  : {

  009a4		 |$LN15@PrcmInterr@3|
  009a4	e1a0c00d	 mov         r12, sp
  009a8	e92d0001	 stmdb       sp!, {r0}
  009ac	e92d5000	 stmdb       sp!, {r12, lr}
  009b0	e24dd024	 sub         sp, sp, #0x24
  009b4		 |$M47604|

; 458  :     UINT val;
; 459  :     UINT32 gpioMask;
; 460  :     UINT32 *pStatus;
; 461  :     UINT8 gpioGroup;
; 462  :     UINT irq;
; 463  :     UINT sysIntr = SYSINTR_NOP;

  009b4	e3a03000	 mov         r3, #0
  009b8	e58d3000	 str         r3, [sp]

; 464  : 
; 465  :     // This routine should only be called during system boot-up or
; 466  :     // from OEMIdle.  Hence, serialization within this routine
; 467  :     // should not be performed.
; 468  : 
; 469  :     // clear prcm interrupt status
; 470  :     val = INREG32(&g_pPrcmPrm->pOMAP_OCP_SYSTEM_PRM->PRM_IRQSTATUS_MPU);

  009bc	e59f31b4	 ldr         r3, [pc, #0x1B4]
  009c0	e5933000	 ldr         r3, [r3]
  009c4	e2833030	 add         r3, r3, #0x30
  009c8	e5933000	 ldr         r3, [r3]
  009cc	e2833018	 add         r3, r3, #0x18
  009d0	e5933000	 ldr         r3, [r3]
  009d4	e58d3008	 str         r3, [sp, #8]

; 471  : 
; 472  :     if (val & PRM_IRQENABLE_IO_EN)

  009d8	e59d3008	 ldr         r3, [sp, #8]
  009dc	e3130c02	 tst         r3, #2, 24
  009e0	0a000045	 beq         |$LN10@PrcmInterr@3|

; 473  :         {
; 474  :         // Check if there is a GPIO IO pad event occured and return the
; 475  :         // corresponding IRQ number.
; 476  : 
; 477  :         if (IS_IOPAD_EVENT_PENDING())// || TODO ADD

  009e4	eb000000	 bl          IS_IOPAD_EVENT_PENDING
  009e8	e58d001c	 str         r0, [sp, #0x1C]
  009ec	e59d301c	 ldr         r3, [sp, #0x1C]
  009f0	e3530000	 cmp         r3, #0
  009f4	0a000040	 beq         |$LN9@PrcmInterr@3|

; 478  :                                      //OEMGetIOPadWakeupStatus(s_rgPadWakeupEvents))
; 479  :             {
; 480  :                 // Process the events
; 481  :                 for (gpioGroup = 1; gpioGroup < g_pIntr->nbGpioBank; gpioGroup++)

  009f8	e3a03001	 mov         r3, #1
  009fc	e5cd3014	 strb        r3, [sp, #0x14]
  00a00	ea000003	 b           |$LN8@PrcmInterr@3|
  00a04		 |$LN7@PrcmInterr@3|
  00a04	e5dd3014	 ldrb        r3, [sp, #0x14]
  00a08	e2833001	 add         r3, r3, #1
  00a0c	e20330ff	 and         r3, r3, #0xFF
  00a10	e5cd3014	 strb        r3, [sp, #0x14]
  00a14		 |$LN8@PrcmInterr@3|
  00a14	e5dd2014	 ldrb        r2, [sp, #0x14]
  00a18	e59f315c	 ldr         r3, [pc, #0x15C]
  00a1c	e5933000	 ldr         r3, [r3]
  00a20	e2833004	 add         r3, r3, #4
  00a24	e5933000	 ldr         r3, [r3]
  00a28	e1520003	 cmp         r2, r3
  00a2c	2a000032	 bcs         |$LN6@PrcmInterr@3|

; 482  :                 {
; 483  :                     irq = g_pIntr->pGpioCtxt[gpioGroup].irq_start;//IRQ_GPIO_0 + (gpioGroup * 32);

  00a30	e59f3144	 ldr         r3, [pc, #0x144]
  00a34	e5933000	 ldr         r3, [r3]
  00a38	e2830008	 add         r0, r3, #8
  00a3c	e5dd3014	 ldrb        r3, [sp, #0x14]
  00a40	e1a01003	 mov         r1, r3
  00a44	e3a03020	 mov         r3, #0x20
  00a48	e0020391	 mul         r2, r1, r3
  00a4c	e5903000	 ldr         r3, [r0]
  00a50	e0833002	 add         r3, r3, r2
  00a54	e5933000	 ldr         r3, [r3]
  00a58	e58d3004	 str         r3, [sp, #4]

; 484  :                     pStatus = &g_pIntr->pGpioCtxt[gpioGroup].padWakeupEvent;//&(s_rgPadWakeupEvents[gpioGroup]);

  00a5c	e59f3118	 ldr         r3, [pc, #0x118]
  00a60	e5933000	 ldr         r3, [r3]
  00a64	e2830008	 add         r0, r3, #8
  00a68	e5dd3014	 ldrb        r3, [sp, #0x14]
  00a6c	e1a01003	 mov         r1, r3
  00a70	e3a03020	 mov         r3, #0x20
  00a74	e0020391	 mul         r2, r1, r3
  00a78	e5903000	 ldr         r3, [r0]
  00a7c	e0833002	 add         r3, r3, r2
  00a80	e283301c	 add         r3, r3, #0x1C
  00a84	e58d300c	 str         r3, [sp, #0xC]

; 485  : 
; 486  :                     for (gpioMask = 1; gpioMask != 0; gpioMask <<= 1, irq++)

  00a88	e3a03001	 mov         r3, #1
  00a8c	e58d3010	 str         r3, [sp, #0x10]
  00a90	ea000005	 b           |$LN5@PrcmInterr@3|
  00a94		 |$LN4@PrcmInterr@3|
  00a94	e59d3010	 ldr         r3, [sp, #0x10]
  00a98	e1a03083	 mov         r3, r3, lsl #1
  00a9c	e58d3010	 str         r3, [sp, #0x10]
  00aa0	e59d3004	 ldr         r3, [sp, #4]
  00aa4	e2833001	 add         r3, r3, #1
  00aa8	e58d3004	 str         r3, [sp, #4]
  00aac		 |$LN5@PrcmInterr@3|
  00aac	e59d3010	 ldr         r3, [sp, #0x10]
  00ab0	e3530000	 cmp         r3, #0
  00ab4	0a00000f	 beq         |$LN3@PrcmInterr@3|

; 487  :                     {
; 488  :                         if ((gpioMask & *pStatus) != 0)

  00ab8	e59d2010	 ldr         r2, [sp, #0x10]
  00abc	e59d300c	 ldr         r3, [sp, #0xC]
  00ac0	e5933000	 ldr         r3, [r3]
  00ac4	e1120003	 tst         r2, r3
  00ac8	0a000009	 beq         |$LN2@PrcmInterr@3|

; 489  :                         {
; 490  :                             *pStatus &= ~gpioMask;

  00acc	e59d3010	 ldr         r3, [sp, #0x10]
  00ad0	e1e02003	 mvn         r2, r3
  00ad4	e59d300c	 ldr         r3, [sp, #0xC]
  00ad8	e5933000	 ldr         r3, [r3]
  00adc	e0032002	 and         r2, r3, r2
  00ae0	e59d300c	 ldr         r3, [sp, #0xC]
  00ae4	e5832000	 str         r2, [r3]

; 491  :                             sysIntr = irq;

  00ae8	e59d3004	 ldr         r3, [sp, #4]
  00aec	e58d3000	 str         r3, [sp]

; 492  :                             goto IOPadIntrProcessDone;

  00af0	ea000001	 b           |$IOPadIntrProcessDone$47139|
  00af4		 |$LN2@PrcmInterr@3|

; 493  :                         }
; 494  :                     }

  00af4	eaffffe6	 b           |$LN4@PrcmInterr@3|
  00af8		 |$LN3@PrcmInterr@3|

; 495  :                 }

  00af8	eaffffc1	 b           |$LN7@PrcmInterr@3|
  00afc		 |$LN6@PrcmInterr@3|
  00afc		 |$LN9@PrcmInterr@3|
  00afc		 |$LN10@PrcmInterr@3|
  00afc		 |$IOPadIntrProcessDone$47139|

; 496  :             }
; 497  :         }
; 498  : 
; 499  : IOPadIntrProcessDone:
; 500  : 
; 501  :     if (IS_IOPAD_EVENT_PENDING() == FALSE)

  00afc	eb000000	 bl          IS_IOPAD_EVENT_PENDING
  00b00	e58d0020	 str         r0, [sp, #0x20]
  00b04	e59d3020	 ldr         r3, [sp, #0x20]
  00b08	e3530000	 cmp         r3, #0
  00b0c	1a000013	 bne         |$LN1@PrcmInterr@3|

; 502  :     {
; 503  :         OUTREG32(&g_pPrcmPrm->pOMAP_OCP_SYSTEM_PRM->PRM_IRQSTATUS_MPU, val & mask);

  00b10	e59d2008	 ldr         r2, [sp, #8]
  00b14	e59d302c	 ldr         r3, [sp, #0x2C]
  00b18	e0022003	 and         r2, r2, r3
  00b1c	e59f3054	 ldr         r3, [pc, #0x54]
  00b20	e5933000	 ldr         r3, [r3]
  00b24	e2833030	 add         r3, r3, #0x30
  00b28	e5933000	 ldr         r3, [r3]
  00b2c	e2833018	 add         r3, r3, #0x18
  00b30	e5832000	 str         r2, [r3]

; 504  : 
; 505  :         OUTREG32(&g_pPrcmPrm->pOMAP_WKUP_PRM->PM_WKST_WKUP,
; 506  :             INREG32(&g_pPrcmPrm->pOMAP_WKUP_PRM->PM_WKST_WKUP) | CM_CLKEN_IO
; 507  :             );

  00b34	e59f303c	 ldr         r3, [pc, #0x3C]
  00b38	e5933000	 ldr         r3, [r3]
  00b3c	e5933000	 ldr         r3, [r3]
  00b40	e28330b0	 add         r3, r3, #0xB0
  00b44	e5933000	 ldr         r3, [r3]
  00b48	e3832c01	 orr         r2, r3, #1, 24
  00b4c	e59f3024	 ldr         r3, [pc, #0x24]
  00b50	e5933000	 ldr         r3, [r3]
  00b54	e5933000	 ldr         r3, [r3]
  00b58	e28330b0	 add         r3, r3, #0xB0
  00b5c	e5832000	 str         r2, [r3]
  00b60		 |$LN1@PrcmInterr@3|

; 508  :     }
; 509  : 
; 510  :     // return the status prior to clearing the status
; 511  :     return sysIntr;

  00b60	e59d3000	 ldr         r3, [sp]
  00b64	e58d3018	 str         r3, [sp, #0x18]

; 512  : }

  00b68	e59d0018	 ldr         r0, [sp, #0x18]
  00b6c	e28dd024	 add         sp, sp, #0x24
  00b70	e89d6000	 ldmia       sp, {sp, lr}
  00b74	e12fff1e	 bx          lr
  00b78		 |$LN16@PrcmInterr@3|
  00b78		 |$LN17@PrcmInterr@3|
  00b78	00000000	 DCD         |g_pPrcmPrm|
  00b7c		 |$LN18@PrcmInterr@3|
  00b7c	00000000	 DCD         |g_pIntr|
  00b80		 |$M47605|

			 ENDP  ; |PrcmInterruptProcess|

	EXPORT	|??_C@_1CG@CDLGGGJO@?$AA?9?$AAO?$AAA?$AAL?$AAS?$AAR?$AAA?$AAM?$AAF?$AAn?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CG@LIGGGGFA@?$AA?$CL?$AAO?$AAA?$AAL?$AAS?$AAR?$AAA?$AAM?$AAF?$AAn?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|OALSRAMFnInit|
	IMPORT	|OEMCacheRangeFlush|
	IMPORT	|memcpy|
	IMPORT	|OALCPUEnd|
	IMPORT	|OALVAtoPA|
	IMPORT	|OALInvalidateTlb|
	IMPORT	|OALCPUWarmReset|
	IMPORT	|OALUpdateCoreFreq|
	IMPORT	|OALCPUStart|
	IMPORT	|OALCPUIdle|
	IMPORT	|dwOEMHighSecurity|
	IMPORT	|g_pSDRCRegs|
	IMPORT	|dwOEMMPUContextRestore|
	IMPORT	|OALPAtoVA|
	IMPORT	|dwOEMSRAMStartOffset|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|dpCurSettings|

  00048			 AREA	 |.pdata|, PDATA
|$T47620| DCD	|$LN9@OALSRAMFnI|
	DCD	0x4000d402

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CG@CDLGGGJO@?$AA?9?$AAO?$AAA?$AAL?$AAS?$AAR?$AAA?$AAM?$AAF?$AAn?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "S", 0x0, "R", 0x0, "A"
	DCB	0x0, "M", 0x0, "F", 0x0, "n", 0x0, "I", 0x0, "n", 0x0, "i"
	DCB	0x0, "t", 0x0, "(", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CG@LIGGGGFA@?$AA?$CL?$AAO?$AAA?$AAL?$AAS?$AAR?$AAA?$AAM?$AAF?$AAn?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "S", 0x0, "R", 0x0, "A"
	DCB	0x0, "M", 0x0, "F", 0x0, "n", 0x0, "I", 0x0, "n", 0x0, "i"
	DCB	0x0, "t", 0x0, "(", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Odtp

  00b80			 AREA	 |.text|, CODE, ARM

  00b80		 |OALSRAMFnInit| PROC

; 538  : {

  00b80		 |$LN9@OALSRAMFnI|
  00b80	e52de004	 str         lr, [sp, #-4]!
  00b84	e24dd020	 sub         sp, sp, #0x20
  00b88		 |$M47617|

; 539  :     pInvalidateTlb  fnInvalidateTlb;
; 540  : 
; 541  :     OALMSG(OAL_FUNC, (L"+OALSRAMFnInit()\r\n"));

  00b88	e59f32f0	 ldr         r3, [pc, #0x2F0]
  00b8c	e5933440	 ldr         r3, [r3, #0x440]
  00b90	e3130004	 tst         r3, #4
  00b94	0a000004	 beq         |$LN3@OALSRAMFnI|
  00b98	e59f032c	 ldr         r0, [pc, #0x32C]
  00b9c	eb000000	 bl          NKDbgPrintfW
  00ba0	e3a03001	 mov         r3, #1
  00ba4	e58d3008	 str         r3, [sp, #8]
  00ba8	ea000001	 b           |$LN4@OALSRAMFnI|
  00bac		 |$LN3@OALSRAMFnI|
  00bac	e3a03000	 mov         r3, #0
  00bb0	e58d3008	 str         r3, [sp, #8]
  00bb4		 |$LN4@OALSRAMFnI|

; 542  : 
; 543  : #pragma warning (push)
; 544  : #pragma warning (disable:4152) //disable warning that prevents using function pointers as data pointers
; 545  : 
; 546  :     // get reference to SRAM
; 547  :     fnCpuStart = OALPAtoVA(OMAP_SRAM_PA + dwOEMSRAMStartOffset, FALSE);

  00bb4	e3a01000	 mov         r1, #0
  00bb8	e59f3308	 ldr         r3, [pc, #0x308]
  00bbc	e5932000	 ldr         r2, [r3]
  00bc0	e3a03101	 mov         r3, #1, 2
  00bc4	e3833602	 orr         r3, r3, #2, 12
  00bc8	e0820003	 add         r0, r2, r3
  00bcc	eb000000	 bl          OALPAtoVA
  00bd0	e58d000c	 str         r0, [sp, #0xC]
  00bd4	e59d200c	 ldr         r2, [sp, #0xC]
  00bd8	e59f32a4	 ldr         r3, [pc, #0x2A4]
  00bdc	e5832000	 str         r2, [r3]

; 548  : 
; 549  :     // initialize cpu idle data structure
; 550  :     g_pCPUInfo = (CPU_INFO*)OALPAtoVA(dwOEMMPUContextRestore, FALSE);

  00be0	e3a01000	 mov         r1, #0
  00be4	e59f32c8	 ldr         r3, [pc, #0x2C8]
  00be8	e5930000	 ldr         r0, [r3]
  00bec	eb000000	 bl          OALPAtoVA
  00bf0	e58d0010	 str         r0, [sp, #0x10]
  00bf4	e59d2010	 ldr         r2, [sp, #0x10]
  00bf8	e59f3298	 ldr         r3, [pc, #0x298]
  00bfc	e5832000	 str         r2, [r3]

; 551  :     g_pCPUInfo->SDRC_REGS = (UINT)g_pSDRCRegs;

  00c00	e59f32bc	 ldr         r3, [pc, #0x2BC]
  00c04	e5932000	 ldr         r2, [r3]
  00c08	e59f3288	 ldr         r3, [pc, #0x288]
  00c0c	e5933000	 ldr         r3, [r3]
  00c10	e5832000	 str         r2, [r3]

; 552  :     g_pCPUInfo->MPU_CM_REGS = (UINT)g_pPrcmCm->pOMAP_MPU_CM;

  00c14	e59f329c	 ldr         r3, [pc, #0x29C]
  00c18	e5933000	 ldr         r3, [r3]
  00c1c	e2831014	 add         r1, r3, #0x14
  00c20	e59f3270	 ldr         r3, [pc, #0x270]
  00c24	e5933000	 ldr         r3, [r3]
  00c28	e2832004	 add         r2, r3, #4
  00c2c	e5913000	 ldr         r3, [r1]
  00c30	e5823000	 str         r3, [r2]

; 553  :     g_pCPUInfo->CORE_CM_REGS = (UINT)g_pPrcmCm->pOMAP_CORE_CM;

  00c34	e59f327c	 ldr         r3, [pc, #0x27C]
  00c38	e5933000	 ldr         r3, [r3]
  00c3c	e2831004	 add         r1, r3, #4
  00c40	e59f3250	 ldr         r3, [pc, #0x250]
  00c44	e5933000	 ldr         r3, [r3]
  00c48	e2832008	 add         r2, r3, #8
  00c4c	e5913000	 ldr         r3, [r1]
  00c50	e5823000	 str         r3, [r2]

; 554  :     g_pCPUInfo->MPU_PRM_REGS = (UINT)g_pPrcmPrm->pOMAP_MPU_PRM;

  00c54	e59f3264	 ldr         r3, [pc, #0x264]
  00c58	e5933000	 ldr         r3, [r3]
  00c5c	e2831014	 add         r1, r3, #0x14
  00c60	e59f3230	 ldr         r3, [pc, #0x230]
  00c64	e5933000	 ldr         r3, [r3]
  00c68	e2832014	 add         r2, r3, #0x14
  00c6c	e5913000	 ldr         r3, [r1]
  00c70	e5823000	 str         r3, [r2]

; 555  :     g_pCPUInfo->CORE_PRM_REGS = (UINT)g_pPrcmPrm->pOMAP_CORE_PRM;

  00c74	e59f3244	 ldr         r3, [pc, #0x244]
  00c78	e5933000	 ldr         r3, [r3]
  00c7c	e2831004	 add         r1, r3, #4
  00c80	e59f3210	 ldr         r3, [pc, #0x210]
  00c84	e5933000	 ldr         r3, [r3]
  00c88	e2832018	 add         r2, r3, #0x18
  00c8c	e5913000	 ldr         r3, [r1]
  00c90	e5823000	 str         r3, [r2]

; 556  : 	g_pCPUInfo->GLOBAL_PRM_REGS = (UINT)g_pPrcmPrm->pOMAP_GLOBAL_PRM;

  00c94	e59f3224	 ldr         r3, [pc, #0x224]
  00c98	e5933000	 ldr         r3, [r3]
  00c9c	e283102c	 add         r1, r3, #0x2C
  00ca0	e59f31f0	 ldr         r3, [pc, #0x1F0]
  00ca4	e5933000	 ldr         r3, [r3]
  00ca8	e283201c	 add         r2, r3, #0x1C
  00cac	e5913000	 ldr         r3, [r1]
  00cb0	e5823000	 str         r3, [r2]

; 557  :     g_pCPUInfo->GPTIMER_REGS = (UINT)g_pTimerRegs;

  00cb4	e59f31dc	 ldr         r3, [pc, #0x1DC]
  00cb8	e5933000	 ldr         r3, [r3]
  00cbc	e2832010	 add         r2, r3, #0x10
  00cc0	e59f31f4	 ldr         r3, [pc, #0x1F4]
  00cc4	e5933000	 ldr         r3, [r3]
  00cc8	e5823000	 str         r3, [r2]

; 558  :     g_pCPUInfo->CLOCK_CTRL_CM_REGS = (UINT)g_pPrcmCm->pOMAP_CLOCK_CONTROL_CM;

  00ccc	e59f31e4	 ldr         r3, [pc, #0x1E4]
  00cd0	e5933000	 ldr         r3, [r3]
  00cd4	e2831034	 add         r1, r3, #0x34
  00cd8	e59f31b8	 ldr         r3, [pc, #0x1B8]
  00cdc	e5933000	 ldr         r3, [r3]
  00ce0	e283200c	 add         r2, r3, #0xC
  00ce4	e5913000	 ldr         r3, [r1]
  00ce8	e5823000	 str         r3, [r2]

; 559  :     g_pCPUInfo->MPU_CONTEXT_VA = (UINT)g_pCPUInfo + sizeof(CPU_INFO);

  00cec	e59f31a4	 ldr         r3, [pc, #0x1A4]
  00cf0	e5933000	 ldr         r3, [r3]
  00cf4	e283204c	 add         r2, r3, #0x4C
  00cf8	e59f3198	 ldr         r3, [pc, #0x198]
  00cfc	e5933000	 ldr         r3, [r3]
  00d00	e2833024	 add         r3, r3, #0x24
  00d04	e5832000	 str         r2, [r3]

; 560  :     g_pCPUInfo->MPU_CONTEXT_PA = (UINT)dwOEMMPUContextRestore + sizeof(CPU_INFO);

  00d08	e59f31a4	 ldr         r3, [pc, #0x1A4]
  00d0c	e5933000	 ldr         r3, [r3]
  00d10	e283204c	 add         r2, r3, #0x4C
  00d14	e59f317c	 ldr         r3, [pc, #0x17C]
  00d18	e5933000	 ldr         r3, [r3]
  00d1c	e2833020	 add         r3, r3, #0x20
  00d20	e5832000	 str         r2, [r3]

; 561  :     g_pCPUInfo->OMAP_DEVICE_TYPE = dwOEMHighSecurity;

  00d24	e59f316c	 ldr         r3, [pc, #0x16C]
  00d28	e5933000	 ldr         r3, [r3]
  00d2c	e2832034	 add         r2, r3, #0x34
  00d30	e59f3178	 ldr         r3, [pc, #0x178]
  00d34	e5933000	 ldr         r3, [r3]
  00d38	e5823000	 str         r3, [r2]

; 562  : 
; 563  :     // Populate fnOALCPUIdle function pointer with SRAM address of
; 564  :     // OALCPUIdle function.
; 565  :     fnOALCPUIdle = (pCPUIdle)((UINT)fnCpuStart + 
; 566  :                                 ((UINT)OALCPUIdle - (UINT)OALCPUStart)); 

  00d3c	e59f2168	 ldr         r2, [pc, #0x168]
  00d40	e59f3140	 ldr         r3, [pc, #0x140]
  00d44	e0422003	 sub         r2, r2, r3
  00d48	e59f3134	 ldr         r3, [pc, #0x134]
  00d4c	e5933000	 ldr         r3, [r3]
  00d50	e0832002	 add         r2, r3, r2
  00d54	e59f3138	 ldr         r3, [pc, #0x138]
  00d58	e5832000	 str         r2, [r3]

; 567  :     
; 568  :     fnOALUpdateCoreFreq = (pOALUpdateCoreFreq)((UINT)fnCpuStart +
; 569  :                                 ((UINT)OALUpdateCoreFreq - (UINT)OALCPUStart));

  00d5c	e59f2144	 ldr         r2, [pc, #0x144]
  00d60	e59f3120	 ldr         r3, [pc, #0x120]
  00d64	e0422003	 sub         r2, r2, r3
  00d68	e59f3114	 ldr         r3, [pc, #0x114]
  00d6c	e5933000	 ldr         r3, [r3]
  00d70	e0832002	 add         r2, r3, r2
  00d74	e59f3128	 ldr         r3, [pc, #0x128]
  00d78	e5832000	 str         r2, [r3]

; 570  : 
; 571  : 	fnOALCPUWarmReset = (pCPUWarmReset)((UINT)fnCpuStart +
; 572  :                                 ((UINT)OALCPUWarmReset - (UINT)OALCPUStart));

  00d7c	e59f211c	 ldr         r2, [pc, #0x11C]
  00d80	e59f3100	 ldr         r3, [pc, #0x100]
  00d84	e0422003	 sub         r2, r2, r3
  00d88	e59f30f4	 ldr         r3, [pc, #0xF4]
  00d8c	e5933000	 ldr         r3, [r3]
  00d90	e0832002	 add         r2, r3, r2
  00d94	e59f30f4	 ldr         r3, [pc, #0xF4]
  00d98	e5832000	 str         r2, [r3]

; 573  : 
; 574  :     // Populate fnTlbValidate function pointer with SDRAM address of
; 575  :     // OALInvalidateTlb function which will be called by restore.s 
; 576  :     // after mpu restore.
; 577  :     fnInvalidateTlb = OALPAtoVA(OALVAtoPA(OALInvalidateTlb), FALSE);

  00d9c	e59f00f8	 ldr         r0, [pc, #0xF8]
  00da0	eb000000	 bl          OALVAtoPA
  00da4	e58d0014	 str         r0, [sp, #0x14]
  00da8	e3a01000	 mov         r1, #0
  00dac	e59d0014	 ldr         r0, [sp, #0x14]
  00db0	eb000000	 bl          OALPAtoVA
  00db4	e58d0018	 str         r0, [sp, #0x18]
  00db8	e59d3018	 ldr         r3, [sp, #0x18]
  00dbc	e58d3000	 str         r3, [sp]

; 578  : 
; 579  :     // update the TLB Inv addr in cpuInfo
; 580  :     g_pCPUInfo->TLB_INV_FUNC_ADDR = (UINT)fnInvalidateTlb;

  00dc0	e59f30d0	 ldr         r3, [pc, #0xD0]
  00dc4	e5933000	 ldr         r3, [r3]
  00dc8	e2832030	 add         r2, r3, #0x30
  00dcc	e59d3000	 ldr         r3, [sp]
  00dd0	e5823000	 str         r3, [r2]

; 581  : 
; 582  :     // Kernel marks all uncached adress as "no execute", we need to clear
; 583  :     // it here since we're going to run some routines from non-cached memory
; 584  :     ClearXNBit(fnCpuStart);

  00dd4	e59f30a8	 ldr         r3, [pc, #0xA8]
  00dd8	e5930000	 ldr         r0, [r3]
  00ddc	eb000000	 bl          ClearXNBit

; 585  :     ClearXNBit(fnOALCPUIdle);

  00de0	e59f30ac	 ldr         r3, [pc, #0xAC]
  00de4	e5930000	 ldr         r0, [r3]
  00de8	eb000000	 bl          ClearXNBit

; 586  :     ClearXNBit(fnInvalidateTlb);

  00dec	e59d0000	 ldr         r0, [sp]
  00df0	eb000000	 bl          ClearXNBit

; 587  : 	ClearXNBit(fnOALCPUWarmReset);

  00df4	e59f3094	 ldr         r3, [pc, #0x94]
  00df8	e5930000	 ldr         r0, [r3]
  00dfc	eb000000	 bl          ClearXNBit

; 588  : 
; 589  :     // We assume OALCPUStart code is *always* the first function in the
; 590  :     // group of routines which get copied to SRAM and OALCPULast is last
; 591  :     memcpy(fnCpuStart, OALCPUStart, (UINT)OALCPUEnd - (UINT)OALCPUStart);

  00e00	e59f2084	 ldr         r2, [pc, #0x84]
  00e04	e59f307c	 ldr         r3, [pc, #0x7C]
  00e08	e0422003	 sub         r2, r2, r3
  00e0c	e59f1074	 ldr         r1, [pc, #0x74]
  00e10	e59f306c	 ldr         r3, [pc, #0x6C]
  00e14	e5930000	 ldr         r0, [r3]
  00e18	eb000000	 bl          memcpy

; 592  : 
; 593  :     //  Flush the cache to ensure idle code is in SRAM
; 594  :     OEMCacheRangeFlush( fnCpuStart, (UINT)OALCPUEnd - (UINT)OALCPUStart, CACHE_SYNC_ALL );

  00e1c	e3a0207f	 mov         r2, #0x7F
  00e20	e59f1064	 ldr         r1, [pc, #0x64]
  00e24	e59f305c	 ldr         r3, [pc, #0x5C]
  00e28	e0411003	 sub         r1, r1, r3
  00e2c	e59f3050	 ldr         r3, [pc, #0x50]
  00e30	e5930000	 ldr         r0, [r3]
  00e34	eb000000	 bl          OEMCacheRangeFlush

; 595  : 
; 596  : #pragma warning (pop)
; 597  : 
; 598  :     OALMSG(OAL_FUNC, (L"-OALSRAMFnInit()\r\n"));

  00e38	e59f3040	 ldr         r3, [pc, #0x40]
  00e3c	e5933440	 ldr         r3, [r3, #0x440]
  00e40	e3130004	 tst         r3, #4
  00e44	0a000004	 beq         |$LN5@OALSRAMFnI|
  00e48	e59f002c	 ldr         r0, [pc, #0x2C]
  00e4c	eb000000	 bl          NKDbgPrintfW
  00e50	e3a03001	 mov         r3, #1
  00e54	e58d301c	 str         r3, [sp, #0x1C]
  00e58	ea000001	 b           |$LN6@OALSRAMFnI|
  00e5c		 |$LN5@OALSRAMFnI|
  00e5c	e3a03000	 mov         r3, #0
  00e60	e58d301c	 str         r3, [sp, #0x1C]
  00e64		 |$LN6@OALSRAMFnI|

; 599  : 
; 600  :     return TRUE;

  00e64	e3a03001	 mov         r3, #1
  00e68	e58d3004	 str         r3, [sp, #4]

; 601  : }

  00e6c	e59d0004	 ldr         r0, [sp, #4]
  00e70	e28dd020	 add         sp, sp, #0x20
  00e74	e49de004	 ldr         lr, [sp], #4
  00e78	e12fff1e	 bx          lr
  00e7c		 |$LN10@OALSRAMFnI|
  00e7c		 |$LN11@OALSRAMFnI|
  00e7c	00000000	 DCD         |??_C@_1CG@CDLGGGJO@?$AA?9?$AAO?$AAA?$AAL?$AAS?$AAR?$AAA?$AAM?$AAF?$AAn?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00e80		 |$LN12@OALSRAMFnI|
  00e80	00000000	 DCD         |dpCurSettings|
  00e84		 |$LN13@OALSRAMFnI|
  00e84	00000000	 DCD         |fnCpuStart|
  00e88		 |$LN14@OALSRAMFnI|
  00e88	00000000	 DCD         |OALCPUStart|
  00e8c		 |$LN15@OALSRAMFnI|
  00e8c	00000000	 DCD         |OALCPUEnd|
  00e90		 |$LN16@OALSRAMFnI|
  00e90	00000000	 DCD         |fnOALCPUWarmReset|
  00e94		 |$LN17@OALSRAMFnI|
  00e94	00000000	 DCD         |fnOALCPUIdle|
  00e98		 |$LN18@OALSRAMFnI|
  00e98	00000000	 DCD         |g_pCPUInfo|
  00e9c		 |$LN19@OALSRAMFnI|
  00e9c	00000000	 DCD         |OALInvalidateTlb|
  00ea0		 |$LN20@OALSRAMFnI|
  00ea0	00000000	 DCD         |OALCPUWarmReset|
  00ea4		 |$LN21@OALSRAMFnI|
  00ea4	00000000	 DCD         |fnOALUpdateCoreFreq|
  00ea8		 |$LN22@OALSRAMFnI|
  00ea8	00000000	 DCD         |OALUpdateCoreFreq|
  00eac		 |$LN23@OALSRAMFnI|
  00eac	00000000	 DCD         |OALCPUIdle|
  00eb0		 |$LN24@OALSRAMFnI|
  00eb0	00000000	 DCD         |dwOEMHighSecurity|
  00eb4		 |$LN25@OALSRAMFnI|
  00eb4	00000000	 DCD         |dwOEMMPUContextRestore|
  00eb8		 |$LN26@OALSRAMFnI|
  00eb8	00000000	 DCD         |g_pPrcmCm|
  00ebc		 |$LN27@OALSRAMFnI|
  00ebc	00000000	 DCD         |g_pTimerRegs|
  00ec0		 |$LN28@OALSRAMFnI|
  00ec0	00000000	 DCD         |g_pPrcmPrm|
  00ec4		 |$LN29@OALSRAMFnI|
  00ec4	00000000	 DCD         |g_pSDRCRegs|
  00ec8		 |$LN30@OALSRAMFnI|
  00ec8	00000000	 DCD         |dwOEMSRAMStartOffset|
  00ecc		 |$LN31@OALSRAMFnI|
  00ecc	00000000	 DCD         |??_C@_1CG@LIGGGGFA@?$AA?$CL?$AAO?$AAA?$AAL?$AAS?$AAR?$AAA?$AAM?$AAF?$AAn?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00ed0		 |$M47618|

			 ENDP  ; |OALSRAMFnInit|

	IMPORT	|OALGetTTBR|

  00050			 AREA	 |.pdata|, PDATA
|$T47647| DCD	|$LN5@ClearXNBit|
	DCD	0x40002304
; Function compile flags: /Odtp

  00ed0			 AREA	 |.text|, CODE, ARM

  00ed0		 |ClearXNBit| PROC

; 520  : {

  00ed0		 |$LN5@ClearXNBit|
  00ed0	e1a0c00d	 mov         r12, sp
  00ed4	e92d0001	 stmdb       sp!, {r0}
  00ed8	e92d5000	 stmdb       sp!, {r12, lr}
  00edc	e24dd014	 sub         sp, sp, #0x14
  00ee0		 |$M47644|

; 521  :     const UINT ARM_L1_NO_EXECUTE = 0x00000010;

  00ee0	e3a03010	 mov         r3, #0x10
  00ee4	e58d3004	 str         r3, [sp, #4]

; 522  : 
; 523  :     DWORD   idxL1MMU = ((DWORD)pvAddr) >> 20;

  00ee8	e59d301c	 ldr         r3, [sp, #0x1C]
  00eec	e1a03a23	 mov         r3, r3, lsr #20
  00ef0	e58d3000	 str         r3, [sp]

; 524  :     DWORD  *pL1MMUTbl = (DWORD*)OALPAtoVA(OALGetTTBR(), FALSE);

  00ef4	eb000000	 bl          OALGetTTBR
  00ef8	e58d000c	 str         r0, [sp, #0xC]
  00efc	e3a01000	 mov         r1, #0
  00f00	e59d000c	 ldr         r0, [sp, #0xC]
  00f04	eb000000	 bl          OALPAtoVA
  00f08	e58d0010	 str         r0, [sp, #0x10]
  00f0c	e59d3010	 ldr         r3, [sp, #0x10]
  00f10	e58d3008	 str         r3, [sp, #8]

; 525  : 
; 526  :     pL1MMUTbl[idxL1MMU] &= ~ARM_L1_NO_EXECUTE;

  00f14	e59d1000	 ldr         r1, [sp]
  00f18	e3a03004	 mov         r3, #4
  00f1c	e0020391	 mul         r2, r1, r3
  00f20	e59d3008	 ldr         r3, [sp, #8]
  00f24	e0831002	 add         r1, r3, r2
  00f28	e59d3004	 ldr         r3, [sp, #4]
  00f2c	e1e02003	 mvn         r2, r3
  00f30	e5913000	 ldr         r3, [r1]
  00f34	e0030002	 and         r0, r3, r2
  00f38	e59d1000	 ldr         r1, [sp]
  00f3c	e3a03004	 mov         r3, #4
  00f40	e0020391	 mul         r2, r1, r3
  00f44	e59d3008	 ldr         r3, [sp, #8]
  00f48	e0833002	 add         r3, r3, r2
  00f4c	e5830000	 str         r0, [r3]

; 527  : }

  00f50	e28dd014	 add         sp, sp, #0x14
  00f54	e89d6000	 ldmia       sp, {sp, lr}
  00f58	e12fff1e	 bx          lr
  00f5c		 |$M47645|

			 ENDP  ; |ClearXNBit|

	EXPORT	|OALSDRCRefreshCounter|

  00058			 AREA	 |.pdata|, PDATA
|$T47652| DCD	|$LN5@OALSDRCRef|
	DCD	0x40001003
; Function compile flags: /Odtp

  00f5c			 AREA	 |.text|, CODE, ARM

  00f5c		 |OALSDRCRefreshCounter| PROC

; 614  : {

  00f5c		 |$LN5@OALSDRCRef|
  00f5c	e1a0c00d	 mov         r12, sp
  00f60	e92d0003	 stmdb       sp!, {r0, r1}
  00f64	e92d5000	 stmdb       sp!, {r12, lr}
  00f68		 |$M47649|

; 615  :     g_pCPUInfo->SDRC_HIGH_RFR_FREQ = highFreq;

  00f68	e59f3028	 ldr         r3, [pc, #0x28]
  00f6c	e5933000	 ldr         r3, [r3]
  00f70	e2832028	 add         r2, r3, #0x28
  00f74	e59d3008	 ldr         r3, [sp, #8]
  00f78	e5823000	 str         r3, [r2]

; 616  :     g_pCPUInfo->SDRC_LOW_RFR_FREQ = lowFreq;

  00f7c	e59f3014	 ldr         r3, [pc, #0x14]
  00f80	e5933000	 ldr         r3, [r3]
  00f84	e283202c	 add         r2, r3, #0x2C
  00f88	e59d300c	 ldr         r3, [sp, #0xC]
  00f8c	e5823000	 str         r3, [r2]

; 617  : }

  00f90	e89d6000	 ldmia       sp, {sp, lr}
  00f94	e12fff1e	 bx          lr
  00f98		 |$LN6@OALSDRCRef|
  00f98		 |$LN7@OALSDRCRef|
  00f98	00000000	 DCD         |g_pCPUInfo|
  00f9c		 |$M47650|

			 ENDP  ; |OALSDRCRefreshCounter|

	EXPORT	|OALSavePrcmContext|
	IMPORT	|g_pPrcmRestore|

  00060			 AREA	 |.pdata|, PDATA
|$T47659| DCD	|$LN6@OALSavePrc|
	DCD	0x40009700
; Function compile flags: /Odtp

  00f9c			 AREA	 |.text|, CODE, ARM

  00f9c		 |OALSavePrcmContext| PROC

; 627  : {

  00f9c		 |$LN6@OALSavePrc|
  00f9c		 |$M47656|

; 628  :     // check for valid pointers
; 629  :     if (g_pPrcmRestore == NULL) return;

  00f9c	e59f3248	 ldr         r3, [pc, #0x248]
  00fa0	e5933000	 ldr         r3, [r3]
  00fa4	e3530000	 cmp         r3, #0
  00fa8	1a000000	 bne         |$LN1@OALSavePrc|
  00fac	ea00008d	 b           |$LN2@OALSavePrc|
  00fb0		 |$LN1@OALSavePrc|

; 630  : 
; 631  :     // save prcm restore registers
; 632  : 
; 633  :     OUTREG32(&g_pPrcmRestore->PRM_CLKSRC_CTRL,
; 634  :         INREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_CLKSRC_CTRL)
; 635  :         );

  00fb0	e59f323c	 ldr         r3, [pc, #0x23C]
  00fb4	e5933000	 ldr         r3, [r3]
  00fb8	e283302c	 add         r3, r3, #0x2C
  00fbc	e5933000	 ldr         r3, [r3]
  00fc0	e2833070	 add         r3, r3, #0x70
  00fc4	e5932000	 ldr         r2, [r3]
  00fc8	e59f321c	 ldr         r3, [pc, #0x21C]
  00fcc	e5933000	 ldr         r3, [r3]
  00fd0	e5832000	 str         r2, [r3]

; 636  : 
; 637  :     OUTREG32(&g_pPrcmRestore->PRM_CLKSEL,
; 638  :         INREG32(&g_pPrcmPrm->pOMAP_CLOCK_CONTROL_PRM->PRM_CLKSEL)
; 639  :         );

  00fd4	e59f3218	 ldr         r3, [pc, #0x218]
  00fd8	e5933000	 ldr         r3, [r3]
  00fdc	e2833034	 add         r3, r3, #0x34
  00fe0	e5933000	 ldr         r3, [r3]
  00fe4	e2833040	 add         r3, r3, #0x40
  00fe8	e5932000	 ldr         r2, [r3]
  00fec	e59f31f8	 ldr         r3, [pc, #0x1F8]
  00ff0	e5933000	 ldr         r3, [r3]
  00ff4	e2833004	 add         r3, r3, #4
  00ff8	e5832000	 str         r2, [r3]

; 640  : 
; 641  :     OUTREG32(&g_pPrcmRestore->CM_CLKSEL_CORE,
; 642  :         INREG32(&g_pPrcmCm->pOMAP_CORE_CM->CM_CLKSEL_CORE)
; 643  :         );

  00ffc	e59f31ec	 ldr         r3, [pc, #0x1EC]
  01000	e5933000	 ldr         r3, [r3]
  01004	e2833004	 add         r3, r3, #4
  01008	e5933000	 ldr         r3, [r3]
  0100c	e2833040	 add         r3, r3, #0x40
  01010	e5932000	 ldr         r2, [r3]
  01014	e59f31d0	 ldr         r3, [pc, #0x1D0]
  01018	e5933000	 ldr         r3, [r3]
  0101c	e2833008	 add         r3, r3, #8
  01020	e5832000	 str         r2, [r3]

; 644  : 
; 645  :     OUTREG32(&g_pPrcmRestore->CM_CLKSEL_WKUP,
; 646  :         INREG32(&g_pPrcmCm->pOMAP_WKUP_CM->CM_CLKSEL_WKUP)
; 647  :         );

  01024	e59f31c4	 ldr         r3, [pc, #0x1C4]
  01028	e5933000	 ldr         r3, [r3]
  0102c	e5933000	 ldr         r3, [r3]
  01030	e2833040	 add         r3, r3, #0x40
  01034	e5932000	 ldr         r2, [r3]
  01038	e59f31ac	 ldr         r3, [pc, #0x1AC]
  0103c	e5933000	 ldr         r3, [r3]
  01040	e283300c	 add         r3, r3, #0xC
  01044	e5832000	 str         r2, [r3]

; 648  : 
; 649  :     OUTREG32(&g_pPrcmRestore->CM_CLKEN_PLL,
; 650  :         INREG32(&g_pPrcmCm->pOMAP_CLOCK_CONTROL_CM->CM_CLKEN_PLL)
; 651  :         );

  01048	e59f31a0	 ldr         r3, [pc, #0x1A0]
  0104c	e5933000	 ldr         r3, [r3]
  01050	e2833034	 add         r3, r3, #0x34
  01054	e5933000	 ldr         r3, [r3]
  01058	e5932000	 ldr         r2, [r3]
  0105c	e59f3188	 ldr         r3, [pc, #0x188]
  01060	e5933000	 ldr         r3, [r3]
  01064	e2833010	 add         r3, r3, #0x10
  01068	e5832000	 str         r2, [r3]

; 652  : 
; 653  :     //  ROM code polls for 23ms waiting for DPLL4 to lock and if autoidle is stored
; 654  :     //  then DPLL4 goes into bypass and the poll times out. This poll should not be there
; 655  :     //  in ROM code for a wake up reset, it is only needed for power on or warm reset.
; 656  : 
; 657  :     //  To avoid romcode 23ms delay clear auto idle setting in scratchpad register.
; 658  :     //  It is restored in  OALContextRestore function in oem_pm.c
; 659  :     OUTREG32(&g_pPrcmRestore->CM_AUTOIDLE_PLL, 0x0);

  0106c	e59f3178	 ldr         r3, [pc, #0x178]
  01070	e5933000	 ldr         r3, [r3]
  01074	e2832014	 add         r2, r3, #0x14
  01078	e3a03000	 mov         r3, #0
  0107c	e5823000	 str         r3, [r2]

; 660  : 
; 661  :     OUTREG32(&g_pPrcmRestore->CM_CLKSEL1_PLL,
; 662  :         INREG32(&g_pPrcmCm->pOMAP_CLOCK_CONTROL_CM->CM_CLKSEL1_PLL)
; 663  :         );

  01080	e59f3168	 ldr         r3, [pc, #0x168]
  01084	e5933000	 ldr         r3, [r3]
  01088	e2833034	 add         r3, r3, #0x34
  0108c	e5933000	 ldr         r3, [r3]
  01090	e2833040	 add         r3, r3, #0x40
  01094	e5932000	 ldr         r2, [r3]
  01098	e59f314c	 ldr         r3, [pc, #0x14C]
  0109c	e5933000	 ldr         r3, [r3]
  010a0	e2833018	 add         r3, r3, #0x18
  010a4	e5832000	 str         r2, [r3]

; 664  : 
; 665  :     OUTREG32(&g_pPrcmRestore->CM_CLKSEL2_PLL,
; 666  :         INREG32(&g_pPrcmCm->pOMAP_CLOCK_CONTROL_CM->CM_CLKSEL2_PLL)
; 667  :         );

  010a8	e59f3140	 ldr         r3, [pc, #0x140]
  010ac	e5933000	 ldr         r3, [r3]
  010b0	e2833034	 add         r3, r3, #0x34
  010b4	e5933000	 ldr         r3, [r3]
  010b8	e2833044	 add         r3, r3, #0x44
  010bc	e5932000	 ldr         r2, [r3]
  010c0	e59f3124	 ldr         r3, [pc, #0x124]
  010c4	e5933000	 ldr         r3, [r3]
  010c8	e283301c	 add         r3, r3, #0x1C
  010cc	e5832000	 str         r2, [r3]

; 668  : 
; 669  :     OUTREG32(&g_pPrcmRestore->CM_CLKSEL3_PLL,
; 670  :         INREG32(&g_pPrcmCm->pOMAP_CLOCK_CONTROL_CM->CM_CLKSEL3_PLL)
; 671  :         );

  010d0	e59f3118	 ldr         r3, [pc, #0x118]
  010d4	e5933000	 ldr         r3, [r3]
  010d8	e2833034	 add         r3, r3, #0x34
  010dc	e5933000	 ldr         r3, [r3]
  010e0	e2833048	 add         r3, r3, #0x48
  010e4	e5932000	 ldr         r2, [r3]
  010e8	e59f30fc	 ldr         r3, [pc, #0xFC]
  010ec	e5933000	 ldr         r3, [r3]
  010f0	e2833020	 add         r3, r3, #0x20
  010f4	e5832000	 str         r2, [r3]

; 672  : 
; 673  :     OUTREG32(&g_pPrcmRestore->CM_CLKEN_PLL_MPU,
; 674  :         INREG32(&g_pPrcmCm->pOMAP_MPU_CM->CM_CLKEN_PLL_MPU)
; 675  :         );

  010f8	e59f30f0	 ldr         r3, [pc, #0xF0]
  010fc	e5933000	 ldr         r3, [r3]
  01100	e2833014	 add         r3, r3, #0x14
  01104	e5933000	 ldr         r3, [r3]
  01108	e2833004	 add         r3, r3, #4
  0110c	e5932000	 ldr         r2, [r3]
  01110	e59f30d4	 ldr         r3, [pc, #0xD4]
  01114	e5933000	 ldr         r3, [r3]
  01118	e2833024	 add         r3, r3, #0x24
  0111c	e5832000	 str         r2, [r3]

; 676  : 
; 677  :     OUTREG32(&g_pPrcmRestore->CM_AUTOIDLE_PLL_MPU,
; 678  :         INREG32(&g_pPrcmCm->pOMAP_MPU_CM->CM_AUTOIDLE_PLL_MPU)
; 679  :         );

  01120	e59f30c8	 ldr         r3, [pc, #0xC8]
  01124	e5933000	 ldr         r3, [r3]
  01128	e2833014	 add         r3, r3, #0x14
  0112c	e5933000	 ldr         r3, [r3]
  01130	e2833034	 add         r3, r3, #0x34
  01134	e5932000	 ldr         r2, [r3]
  01138	e59f30ac	 ldr         r3, [pc, #0xAC]
  0113c	e5933000	 ldr         r3, [r3]
  01140	e2833028	 add         r3, r3, #0x28
  01144	e5832000	 str         r2, [r3]

; 680  : 
; 681  :     OUTREG32(&g_pPrcmRestore->CM_CLKSEL1_PLL_MPU,
; 682  :         INREG32(&g_pPrcmCm->pOMAP_MPU_CM->CM_CLKSEL1_PLL_MPU)
; 683  :         );

  01148	e59f30a0	 ldr         r3, [pc, #0xA0]
  0114c	e5933000	 ldr         r3, [r3]
  01150	e2833014	 add         r3, r3, #0x14
  01154	e5933000	 ldr         r3, [r3]
  01158	e2833040	 add         r3, r3, #0x40
  0115c	e5932000	 ldr         r2, [r3]
  01160	e59f3084	 ldr         r3, [pc, #0x84]
  01164	e5933000	 ldr         r3, [r3]
  01168	e283302c	 add         r3, r3, #0x2C
  0116c	e5832000	 str         r2, [r3]

; 684  : 
; 685  :     OUTREG32(&g_pPrcmRestore->CM_CLKSEL2_PLL_MPU,
; 686  :         INREG32(&g_pPrcmCm->pOMAP_MPU_CM->CM_CLKSEL2_PLL_MPU)
; 687  :         );

  01170	e59f3078	 ldr         r3, [pc, #0x78]
  01174	e5933000	 ldr         r3, [r3]
  01178	e2833014	 add         r3, r3, #0x14
  0117c	e5933000	 ldr         r3, [r3]
  01180	e2833044	 add         r3, r3, #0x44
  01184	e5932000	 ldr         r2, [r3]
  01188	e59f305c	 ldr         r3, [pc, #0x5C]
  0118c	e5933000	 ldr         r3, [r3]
  01190	e2833030	 add         r3, r3, #0x30
  01194	e5832000	 str         r2, [r3]

; 688  : 
; 689  :     OUTREG32(&g_pPrcmRestore->CM_CLKSTCTRL_MPU,
; 690  :         INREG32(&g_pPrcmCm->pOMAP_MPU_CM->CM_CLKSTCTRL_MPU)
; 691  :         );

  01198	e59f3050	 ldr         r3, [pc, #0x50]
  0119c	e5933000	 ldr         r3, [r3]
  011a0	e2833014	 add         r3, r3, #0x14
  011a4	e5933000	 ldr         r3, [r3]
  011a8	e2833048	 add         r3, r3, #0x48
  011ac	e5932000	 ldr         r2, [r3]
  011b0	e59f3034	 ldr         r3, [pc, #0x34]
  011b4	e5933000	 ldr         r3, [r3]
  011b8	e2833038	 add         r3, r3, #0x38
  011bc	e5832000	 str         r2, [r3]

; 692  : 
; 693  :     OUTREG32(&g_pPrcmRestore->CM_CLKSTCTRL_CORE,
; 694  :         INREG32(&g_pPrcmCm->pOMAP_CORE_CM->CM_CLKSTCTRL_CORE)
; 695  :         );

  011c0	e59f3028	 ldr         r3, [pc, #0x28]
  011c4	e5933000	 ldr         r3, [r3]
  011c8	e2833004	 add         r3, r3, #4
  011cc	e5933000	 ldr         r3, [r3]
  011d0	e2833048	 add         r3, r3, #0x48
  011d4	e5932000	 ldr         r2, [r3]
  011d8	e59f300c	 ldr         r3, [pc, #0xC]
  011dc	e5933000	 ldr         r3, [r3]
  011e0	e283303c	 add         r3, r3, #0x3C
  011e4	e5832000	 str         r2, [r3]
  011e8		 |$LN2@OALSavePrc|

; 696  : }

  011e8	e12fff1e	 bx          lr
  011ec		 |$LN7@OALSavePrc|
  011ec		 |$LN8@OALSavePrc|
  011ec	00000000	 DCD         |g_pPrcmRestore|
  011f0		 |$LN9@OALSavePrc|
  011f0	00000000	 DCD         |g_pPrcmCm|
  011f4		 |$LN10@OALSavePrc|
  011f4	00000000	 DCD         |g_pPrcmPrm|
  011f8		 |$M47657|

			 ENDP  ; |OALSavePrcmContext|

	EXPORT	|OALSaveSdrcContext|
	IMPORT	|g_pSdrcRestore|

  00068			 AREA	 |.pdata|, PDATA
|$T47668| DCD	|$LN6@OALSaveSdr|
	DCD	0x4000c300
; Function compile flags: /Odtp

  011f8			 AREA	 |.text|, CODE, ARM

  011f8		 |OALSaveSdrcContext| PROC

; 706  : {

  011f8		 |$LN6@OALSaveSdr|
  011f8		 |$M47665|

; 707  :     // check for valid pointers
; 708  :     if (g_pSdrcRestore == NULL) return;

  011f8	e59f32fc	 ldr         r3, [pc, #0x2FC]
  011fc	e5933000	 ldr         r3, [r3]
  01200	e3530000	 cmp         r3, #0
  01204	1a000000	 bne         |$LN1@OALSaveSdr|
  01208	ea0000ba	 b           |$LN2@OALSaveSdr|
  0120c		 |$LN1@OALSaveSdr|

; 709  : 
; 710  :     OUTREG16(&g_pSdrcRestore->SYSCONFIG,
; 711  :         (UINT16)INREG32(&g_pSDRCRegs->SDRC_SYSCONFIG)
; 712  :         );

  0120c	e59f32ec	 ldr         r3, [pc, #0x2EC]
  01210	e5933000	 ldr         r3, [r3]
  01214	e2833010	 add         r3, r3, #0x10
  01218	e5933000	 ldr         r3, [r3]
  0121c	e1a02803	 mov         r2, r3, lsl #16
  01220	e1a02822	 mov         r2, r2, lsr #16
  01224	e59f32d0	 ldr         r3, [pc, #0x2D0]
  01228	e5933000	 ldr         r3, [r3]
  0122c	e1c320b0	 strh        r2, [r3]

; 713  : 
; 714  :     OUTREG16(&g_pSdrcRestore->CS_CFG,
; 715  :         (UINT16)INREG32(&g_pSDRCRegs->SDRC_CS_CFG)
; 716  :         );

  01230	e59f32c8	 ldr         r3, [pc, #0x2C8]
  01234	e5933000	 ldr         r3, [r3]
  01238	e2833040	 add         r3, r3, #0x40
  0123c	e5933000	 ldr         r3, [r3]
  01240	e1a02803	 mov         r2, r3, lsl #16
  01244	e1a02822	 mov         r2, r2, lsr #16
  01248	e59f32ac	 ldr         r3, [pc, #0x2AC]
  0124c	e5933000	 ldr         r3, [r3]
  01250	e2833002	 add         r3, r3, #2
  01254	e1c320b0	 strh        r2, [r3]

; 717  : 
; 718  :     OUTREG16(&g_pSdrcRestore->SHARING,
; 719  :         (UINT16)INREG32(&g_pSDRCRegs->SDRC_SHARING)
; 720  :         );

  01258	e59f32a0	 ldr         r3, [pc, #0x2A0]
  0125c	e5933000	 ldr         r3, [r3]
  01260	e2833044	 add         r3, r3, #0x44
  01264	e5933000	 ldr         r3, [r3]
  01268	e1a02803	 mov         r2, r3, lsl #16
  0126c	e1a02822	 mov         r2, r2, lsr #16
  01270	e59f3284	 ldr         r3, [pc, #0x284]
  01274	e5933000	 ldr         r3, [r3]
  01278	e2833004	 add         r3, r3, #4
  0127c	e1c320b0	 strh        r2, [r3]

; 721  : 
; 722  :     OUTREG16(&g_pSdrcRestore->ERR_TYPE,
; 723  :         (UINT16)INREG32(&g_pSDRCRegs->SDRC_ERR_TYPE)
; 724  :         );

  01280	e59f3278	 ldr         r3, [pc, #0x278]
  01284	e5933000	 ldr         r3, [r3]
  01288	e283304c	 add         r3, r3, #0x4C
  0128c	e5933000	 ldr         r3, [r3]
  01290	e1a02803	 mov         r2, r3, lsl #16
  01294	e1a02822	 mov         r2, r2, lsr #16
  01298	e59f325c	 ldr         r3, [pc, #0x25C]
  0129c	e5933000	 ldr         r3, [r3]
  012a0	e2833006	 add         r3, r3, #6
  012a4	e1c320b0	 strh        r2, [r3]

; 725  : 
; 726  :     OUTREG32(&g_pSdrcRestore->DLLA_CTRL,
; 727  :         INREG32(&g_pSDRCRegs->SDRC_DLLA_CTRL)
; 728  :         );

  012a8	e59f3250	 ldr         r3, [pc, #0x250]
  012ac	e5933000	 ldr         r3, [r3]
  012b0	e2833060	 add         r3, r3, #0x60
  012b4	e5932000	 ldr         r2, [r3]
  012b8	e59f323c	 ldr         r3, [pc, #0x23C]
  012bc	e5933000	 ldr         r3, [r3]
  012c0	e2833008	 add         r3, r3, #8
  012c4	e5832000	 str         r2, [r3]

; 729  : 
; 730  :     OUTREG32(&g_pSdrcRestore->DLLB_CTRL,
; 731  :         INREG32(&g_pSDRCRegs->SDRC_DLLB_CTRL)
; 732  :         );

  012c8	e59f3230	 ldr         r3, [pc, #0x230]
  012cc	e5933000	 ldr         r3, [r3]
  012d0	e2833068	 add         r3, r3, #0x68
  012d4	e5932000	 ldr         r2, [r3]
  012d8	e59f321c	 ldr         r3, [pc, #0x21C]
  012dc	e5933000	 ldr         r3, [r3]
  012e0	e283300c	 add         r3, r3, #0xC
  012e4	e5832000	 str         r2, [r3]

; 733  : 
; 734  :     OUTREG32(&g_pSdrcRestore->POWER,
; 735  :         INREG32(&g_pSDRCRegs->SDRC_POWER)
; 736  :         );

  012e8	e59f3210	 ldr         r3, [pc, #0x210]
  012ec	e5933000	 ldr         r3, [r3]
  012f0	e2833070	 add         r3, r3, #0x70
  012f4	e5932000	 ldr         r2, [r3]
  012f8	e59f31fc	 ldr         r3, [pc, #0x1FC]
  012fc	e5933000	 ldr         r3, [r3]
  01300	e2833010	 add         r3, r3, #0x10
  01304	e5832000	 str         r2, [r3]

; 737  : 
; 738  :     OUTREG32(&g_pSdrcRestore->MCFG_0,
; 739  :         INREG32(&g_pSDRCRegs->SDRC_MCFG_0)
; 740  :         );

  01308	e59f31f0	 ldr         r3, [pc, #0x1F0]
  0130c	e5933000	 ldr         r3, [r3]
  01310	e2833080	 add         r3, r3, #0x80
  01314	e5932000	 ldr         r2, [r3]
  01318	e59f31dc	 ldr         r3, [pc, #0x1DC]
  0131c	e5933000	 ldr         r3, [r3]
  01320	e2833018	 add         r3, r3, #0x18
  01324	e5832000	 str         r2, [r3]

; 741  : 
; 742  :     OUTREG16(&g_pSdrcRestore->MR_0,
; 743  :         (UINT16)INREG32(&g_pSDRCRegs->SDRC_MR_0)
; 744  :         );

  01328	e59f31d0	 ldr         r3, [pc, #0x1D0]
  0132c	e5933000	 ldr         r3, [r3]
  01330	e2833084	 add         r3, r3, #0x84
  01334	e5933000	 ldr         r3, [r3]
  01338	e1a02803	 mov         r2, r3, lsl #16
  0133c	e1a02822	 mov         r2, r2, lsr #16
  01340	e59f31b4	 ldr         r3, [pc, #0x1B4]
  01344	e5933000	 ldr         r3, [r3]
  01348	e283301c	 add         r3, r3, #0x1C
  0134c	e1c320b0	 strh        r2, [r3]

; 745  : 
; 746  :     OUTREG32(&g_pSdrcRestore->ACTIM_CTRLA_0,
; 747  :         INREG32(&g_pSDRCRegs->SDRC_ACTIM_CTRLA_0)
; 748  :         );

  01350	e59f31a8	 ldr         r3, [pc, #0x1A8]
  01354	e5933000	 ldr         r3, [r3]
  01358	e283309c	 add         r3, r3, #0x9C
  0135c	e5932000	 ldr         r2, [r3]
  01360	e59f3194	 ldr         r3, [pc, #0x194]
  01364	e5933000	 ldr         r3, [r3]
  01368	e2833024	 add         r3, r3, #0x24
  0136c	e5832000	 str         r2, [r3]

; 749  : 
; 750  :     OUTREG32(&g_pSdrcRestore->ACTIM_CTRLB_0,
; 751  :         INREG32(&g_pSDRCRegs->SDRC_ACTIM_CTRLB_0)
; 752  :         );

  01370	e59f3188	 ldr         r3, [pc, #0x188]
  01374	e5933000	 ldr         r3, [r3]
  01378	e28330a0	 add         r3, r3, #0xA0
  0137c	e5932000	 ldr         r2, [r3]
  01380	e59f3174	 ldr         r3, [pc, #0x174]
  01384	e5933000	 ldr         r3, [r3]
  01388	e2833028	 add         r3, r3, #0x28
  0138c	e5832000	 str         r2, [r3]

; 753  : 
; 754  :     OUTREG32(&g_pSdrcRestore->RFR_CTRL_0,
; 755  :         INREG32(&g_pSDRCRegs->SDRC_RFR_CTRL_0)
; 756  :         );

  01390	e59f3168	 ldr         r3, [pc, #0x168]
  01394	e5933000	 ldr         r3, [r3]
  01398	e28330a4	 add         r3, r3, #0xA4
  0139c	e5932000	 ldr         r2, [r3]
  013a0	e59f3154	 ldr         r3, [pc, #0x154]
  013a4	e5933000	 ldr         r3, [r3]
  013a8	e283302c	 add         r3, r3, #0x2C
  013ac	e5832000	 str         r2, [r3]

; 757  : 
; 758  :     OUTREG32(&g_pSdrcRestore->MCFG_1,
; 759  :         INREG32(&g_pSDRCRegs->SDRC_MCFG_1)
; 760  :         );

  013b0	e59f3148	 ldr         r3, [pc, #0x148]
  013b4	e5933000	 ldr         r3, [r3]
  013b8	e28330b0	 add         r3, r3, #0xB0
  013bc	e5932000	 ldr         r2, [r3]
  013c0	e59f3134	 ldr         r3, [pc, #0x134]
  013c4	e5933000	 ldr         r3, [r3]
  013c8	e2833034	 add         r3, r3, #0x34
  013cc	e5832000	 str         r2, [r3]

; 761  : 
; 762  :     OUTREG16(&g_pSdrcRestore->MR_1,
; 763  :         INREG32(&g_pSDRCRegs->SDRC_MR_1)
; 764  :         );

  013d0	e59f3128	 ldr         r3, [pc, #0x128]
  013d4	e5933000	 ldr         r3, [r3]
  013d8	e28330b4	 add         r3, r3, #0xB4
  013dc	e5933000	 ldr         r3, [r3]
  013e0	e1a02803	 mov         r2, r3, lsl #16
  013e4	e1a02822	 mov         r2, r2, lsr #16
  013e8	e59f310c	 ldr         r3, [pc, #0x10C]
  013ec	e5933000	 ldr         r3, [r3]
  013f0	e2833038	 add         r3, r3, #0x38
  013f4	e1c320b0	 strh        r2, [r3]

; 765  : 
; 766  :     OUTREG32(&g_pSdrcRestore->ACTIM_CTRLA_1,
; 767  :         INREG32(&g_pSDRCRegs->SDRC_ACTIM_CTRLA_1)
; 768  :         );

  013f8	e59f3100	 ldr         r3, [pc, #0x100]
  013fc	e5933000	 ldr         r3, [r3]
  01400	e28330c4	 add         r3, r3, #0xC4
  01404	e5932000	 ldr         r2, [r3]
  01408	e59f30ec	 ldr         r3, [pc, #0xEC]
  0140c	e5933000	 ldr         r3, [r3]
  01410	e2833040	 add         r3, r3, #0x40
  01414	e5832000	 str         r2, [r3]

; 769  : 
; 770  :     OUTREG32(&g_pSdrcRestore->ACTIM_CTRLB_1,
; 771  :         INREG32(&g_pSDRCRegs->SDRC_ACTIM_CTRLB_1)
; 772  :         );

  01418	e59f30e0	 ldr         r3, [pc, #0xE0]
  0141c	e5933000	 ldr         r3, [r3]
  01420	e28330c8	 add         r3, r3, #0xC8
  01424	e5932000	 ldr         r2, [r3]
  01428	e59f30cc	 ldr         r3, [pc, #0xCC]
  0142c	e5933000	 ldr         r3, [r3]
  01430	e2833044	 add         r3, r3, #0x44
  01434	e5832000	 str         r2, [r3]

; 773  : 
; 774  :     OUTREG32(&g_pSdrcRestore->RFR_CTRL_1,
; 775  :         INREG32(&g_pSDRCRegs->SDRC_RFR_CTRL_1)
; 776  :         );

  01438	e59f30c0	 ldr         r3, [pc, #0xC0]
  0143c	e5933000	 ldr         r3, [r3]
  01440	e28330d4	 add         r3, r3, #0xD4
  01444	e5932000	 ldr         r2, [r3]
  01448	e59f30ac	 ldr         r3, [pc, #0xAC]
  0144c	e5933000	 ldr         r3, [r3]
  01450	e2833048	 add         r3, r3, #0x48
  01454	e5832000	 str         r2, [r3]

; 777  : 
; 778  :     OUTREG16(&g_pSdrcRestore->EMR1_0, 0);

  01458	e59f309c	 ldr         r3, [pc, #0x9C]
  0145c	e5933000	 ldr         r3, [r3]
  01460	e283201e	 add         r2, r3, #0x1E
  01464	e3a03000	 mov         r3, #0
  01468	e1c230b0	 strh        r3, [r2]

; 779  :     OUTREG16(&g_pSdrcRestore->EMR2_0, 0);

  0146c	e59f3088	 ldr         r3, [pc, #0x88]
  01470	e5933000	 ldr         r3, [r3]
  01474	e2832020	 add         r2, r3, #0x20
  01478	e3a03000	 mov         r3, #0
  0147c	e1c230b0	 strh        r3, [r2]

; 780  :     OUTREG16(&g_pSdrcRestore->EMR3_0, 0);

  01480	e59f3074	 ldr         r3, [pc, #0x74]
  01484	e5933000	 ldr         r3, [r3]
  01488	e2832022	 add         r2, r3, #0x22
  0148c	e3a03000	 mov         r3, #0
  01490	e1c230b0	 strh        r3, [r2]

; 781  :     OUTREG16(&g_pSdrcRestore->EMR1_1, 0);

  01494	e59f3060	 ldr         r3, [pc, #0x60]
  01498	e5933000	 ldr         r3, [r3]
  0149c	e283203a	 add         r2, r3, #0x3A
  014a0	e3a03000	 mov         r3, #0
  014a4	e1c230b0	 strh        r3, [r2]

; 782  :     OUTREG16(&g_pSdrcRestore->EMR2_1, 0);

  014a8	e59f304c	 ldr         r3, [pc, #0x4C]
  014ac	e5933000	 ldr         r3, [r3]
  014b0	e283203c	 add         r2, r3, #0x3C
  014b4	e3a03000	 mov         r3, #0
  014b8	e1c230b0	 strh        r3, [r2]

; 783  :     OUTREG16(&g_pSdrcRestore->EMR3_1, 0);

  014bc	e59f3038	 ldr         r3, [pc, #0x38]
  014c0	e5933000	 ldr         r3, [r3]
  014c4	e283203e	 add         r2, r3, #0x3E
  014c8	e3a03000	 mov         r3, #0
  014cc	e1c230b0	 strh        r3, [r2]

; 784  :     OUTREG16(&g_pSdrcRestore->DCDL_1_CTRL, 0);

  014d0	e59f3024	 ldr         r3, [pc, #0x24]
  014d4	e5933000	 ldr         r3, [r3]
  014d8	e283204c	 add         r2, r3, #0x4C
  014dc	e3a03000	 mov         r3, #0
  014e0	e1c230b0	 strh        r3, [r2]

; 785  :     OUTREG16(&g_pSdrcRestore->DCDL_2_CTRL, 0);

  014e4	e59f3010	 ldr         r3, [pc, #0x10]
  014e8	e5933000	 ldr         r3, [r3]
  014ec	e283204e	 add         r2, r3, #0x4E
  014f0	e3a03000	 mov         r3, #0
  014f4	e1c230b0	 strh        r3, [r2]
  014f8		 |$LN2@OALSaveSdr|

; 786  : }

  014f8	e12fff1e	 bx          lr
  014fc		 |$LN7@OALSaveSdr|
  014fc		 |$LN8@OALSaveSdr|
  014fc	00000000	 DCD         |g_pSdrcRestore|
  01500		 |$LN9@OALSaveSdr|
  01500	00000000	 DCD         |g_pSDRCRegs|
  01504		 |$M47666|

			 ENDP  ; |OALSaveSdrcContext|

	EXPORT	|??_C@_1BM@IGMJLLMF@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BM@IDHFLFIL@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|PrcmInit|
	IMPORT	|DeviceInitialize|
	IMPORT	|ClockInitialize|
	IMPORT	|DomainInitialize|
	IMPORT	|ResetInitialize|

  00070			 AREA	 |.pdata|, PDATA
|$T47680| DCD	|$LN9@PrcmInit|
	DCD	0x40002f04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@IGMJLLMF@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, "(", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@IDHFLFIL@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, "(", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  01504			 AREA	 |.text|, CODE, ARM

  01504		 |PrcmInit| PROC

; 798  : {

  01504		 |$LN9@PrcmInit|
  01504	e1a0c00d	 mov         r12, sp
  01508	e92d0001	 stmdb       sp!, {r0}
  0150c	e92d5000	 stmdb       sp!, {r12, lr}
  01510	e24dd008	 sub         sp, sp, #8
  01514		 |$M47677|

; 799  :     OALMSG(OAL_FUNC, (L"+PrcmInit()\r\n"));

  01514	e59f3094	 ldr         r3, [pc, #0x94]
  01518	e5933440	 ldr         r3, [r3, #0x440]
  0151c	e3130004	 tst         r3, #4
  01520	0a000004	 beq         |$LN3@PrcmInit|
  01524	e59f0090	 ldr         r0, [pc, #0x90]
  01528	eb000000	 bl          NKDbgPrintfW
  0152c	e3a03001	 mov         r3, #1
  01530	e58d3000	 str         r3, [sp]
  01534	ea000001	 b           |$LN4@PrcmInit|
  01538		 |$LN3@PrcmInit|
  01538	e3a03000	 mov         r3, #0
  0153c	e58d3000	 str         r3, [sp]
  01540		 |$LN4@PrcmInit|

; 800  : 
; 801  :     // initialize global pointer to the PRCM registers
; 802  :     g_pPrcmPrm  = pInfo->pPrcmPrm;

  01540	e59d3010	 ldr         r3, [sp, #0x10]
  01544	e5932000	 ldr         r2, [r3]
  01548	e59f3068	 ldr         r3, [pc, #0x68]
  0154c	e5832000	 str         r2, [r3]

; 803  :     g_pPrcmCm   = pInfo->pPrcmCm;

  01550	e59d3010	 ldr         r3, [sp, #0x10]
  01554	e2833004	 add         r3, r3, #4
  01558	e5932000	 ldr         r2, [r3]
  0155c	e59f3050	 ldr         r3, [pc, #0x50]
  01560	e5832000	 str         r2, [r3]

; 804  : 
; 805  :     // initialize all internal data structures
; 806  :     ResetInitialize();

  01564	eb000000	 bl          ResetInitialize

; 807  :     DomainInitialize();

  01568	eb000000	 bl          DomainInitialize

; 808  :     ClockInitialize();

  0156c	eb000000	 bl          ClockInitialize

; 809  :     DeviceInitialize();

  01570	eb000000	 bl          DeviceInitialize

; 810  : 
; 811  :     OALMSG(OAL_FUNC, (L"-PrcmInit()\r\n"));

  01574	e59f3034	 ldr         r3, [pc, #0x34]
  01578	e5933440	 ldr         r3, [r3, #0x440]
  0157c	e3130004	 tst         r3, #4
  01580	0a000004	 beq         |$LN5@PrcmInit|
  01584	e59f0020	 ldr         r0, [pc, #0x20]
  01588	eb000000	 bl          NKDbgPrintfW
  0158c	e3a03001	 mov         r3, #1
  01590	e58d3004	 str         r3, [sp, #4]
  01594	ea000001	 b           |$LN6@PrcmInit|
  01598		 |$LN5@PrcmInit|
  01598	e3a03000	 mov         r3, #0
  0159c	e58d3004	 str         r3, [sp, #4]
  015a0		 |$LN6@PrcmInit|

; 812  : }

  015a0	e28dd008	 add         sp, sp, #8
  015a4	e89d6000	 ldmia       sp, {sp, lr}
  015a8	e12fff1e	 bx          lr
  015ac		 |$LN10@PrcmInit|
  015ac		 |$LN11@PrcmInit|
  015ac	00000000	 DCD         |??_C@_1BM@IGMJLLMF@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  015b0		 |$LN12@PrcmInit|
  015b0	00000000	 DCD         |dpCurSettings|
  015b4		 |$LN13@PrcmInit|
  015b4	00000000	 DCD         |g_pPrcmCm|
  015b8		 |$LN14@PrcmInit|
  015b8	00000000	 DCD         |g_pPrcmPrm|
  015bc		 |$LN15@PrcmInit|
  015bc	00000000	 DCD         |??_C@_1BM@IDHFLFIL@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  015c0		 |$M47678|

			 ENDP  ; |PrcmInit|

	EXPORT	|??_C@_1CE@FFFGKDPH@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAP?$AAo?$AAs?$AAt?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CE@JMJGFEAL@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAP?$AAo?$AAs?$AAt?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|PrcmPostInit|
	IMPORT	|InitializeCriticalSection|

  00078			 AREA	 |.pdata|, PDATA
|$T47695| DCD	|$LN12@PrcmPostIn|
	DCD	0x40003302

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@FFFGKDPH@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAP?$AAo?$AAs?$AAt?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "P", 0x0, "o"
	DCB	0x0, "s", 0x0, "t", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t"
	DCB	0x0, "(", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@JMJGFEAL@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAP?$AAo?$AAs?$AAt?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "P", 0x0, "o"
	DCB	0x0, "s", 0x0, "t", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t"
	DCB	0x0, "(", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  015c0			 AREA	 |.text|, CODE, ARM

  015c0		 |PrcmPostInit| PROC

; 822  : {

  015c0		 |$LN12@PrcmPostIn|
  015c0	e52de004	 str         lr, [sp, #-4]!
  015c4	e24dd00c	 sub         sp, sp, #0xC
  015c8		 |$M47692|

; 823  :     int i;
; 824  :     OALMSG(OAL_FUNC, (L"+PrcmPostInit()\r\n"));

  015c8	e59f30ac	 ldr         r3, [pc, #0xAC]
  015cc	e5933440	 ldr         r3, [r3, #0x440]
  015d0	e3130004	 tst         r3, #4
  015d4	0a000004	 beq         |$LN6@PrcmPostIn|
  015d8	e59f00a8	 ldr         r0, [pc, #0xA8]
  015dc	eb000000	 bl          NKDbgPrintfW
  015e0	e3a03001	 mov         r3, #1
  015e4	e58d3004	 str         r3, [sp, #4]
  015e8	ea000001	 b           |$LN7@PrcmPostIn|
  015ec		 |$LN6@PrcmPostIn|
  015ec	e3a03000	 mov         r3, #0
  015f0	e58d3004	 str         r3, [sp, #4]
  015f4		 |$LN7@PrcmPostIn|

; 825  : 
; 826  :     // initialize synchronization objects
; 827  :     for (i = 0; i < Mutex_Count; ++i)

  015f4	e3a03000	 mov         r3, #0
  015f8	e58d3000	 str         r3, [sp]
  015fc	ea000002	 b           |$LN3@PrcmPostIn|
  01600		 |$LN2@PrcmPostIn|
  01600	e59d3000	 ldr         r3, [sp]
  01604	e2833001	 add         r3, r3, #1
  01608	e58d3000	 str         r3, [sp]
  0160c		 |$LN3@PrcmPostIn|
  0160c	e59d3000	 ldr         r3, [sp]
  01610	e3530006	 cmp         r3, #6
  01614	aa000006	 bge         |$LN1@PrcmPostIn|

; 828  :         {
; 829  :         InitializeCriticalSection(&g_rgPrcmMutex[i]);

  01618	e59d1000	 ldr         r1, [sp]
  0161c	e3a03014	 mov         r3, #0x14
  01620	e0020391	 mul         r2, r1, r3
  01624	e59f3058	 ldr         r3, [pc, #0x58]
  01628	e0830002	 add         r0, r3, r2
  0162c	eb000000	 bl          InitializeCriticalSection

; 830  :         }

  01630	eafffff2	 b           |$LN2@PrcmPostIn|
  01634		 |$LN1@PrcmPostIn|

; 831  : 
; 832  :     // update flag indicating PRCM library is fully initialized
; 833  :     g_PrcmPostInit = TRUE;

  01634	e59f2044	 ldr         r2, [pc, #0x44]
  01638	e3a03001	 mov         r3, #1
  0163c	e5823000	 str         r3, [r2]

; 834  : 
; 835  :     OALMSG(OAL_FUNC, (L"-PrcmPostInit()\r\n"));

  01640	e59f3034	 ldr         r3, [pc, #0x34]
  01644	e5933440	 ldr         r3, [r3, #0x440]
  01648	e3130004	 tst         r3, #4
  0164c	0a000004	 beq         |$LN8@PrcmPostIn|
  01650	e59f0020	 ldr         r0, [pc, #0x20]
  01654	eb000000	 bl          NKDbgPrintfW
  01658	e3a03001	 mov         r3, #1
  0165c	e58d3008	 str         r3, [sp, #8]
  01660	ea000001	 b           |$LN9@PrcmPostIn|
  01664		 |$LN8@PrcmPostIn|
  01664	e3a03000	 mov         r3, #0
  01668	e58d3008	 str         r3, [sp, #8]
  0166c		 |$LN9@PrcmPostIn|

; 836  : };

  0166c	e28dd00c	 add         sp, sp, #0xC
  01670	e49de004	 ldr         lr, [sp], #4
  01674	e12fff1e	 bx          lr
  01678		 |$LN13@PrcmPostIn|
  01678		 |$LN14@PrcmPostIn|
  01678	00000000	 DCD         |??_C@_1CE@FFFGKDPH@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAP?$AAo?$AAs?$AAt?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  0167c		 |$LN15@PrcmPostIn|
  0167c	00000000	 DCD         |dpCurSettings|
  01680		 |$LN16@PrcmPostIn|
  01680	00000000	 DCD         |g_PrcmPostInit|
  01684		 |$LN17@PrcmPostIn|
  01684	00000000	 DCD         |g_rgPrcmMutex|
  01688		 |$LN18@PrcmPostIn|
  01688	00000000	 DCD         |??_C@_1CE@JMJGFEAL@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAP?$AAo?$AAs?$AAt?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  0168c		 |$M47693|

			 ENDP  ; |PrcmPostInit|

	EXPORT	|PrcmContextRestoreInit|
	IMPORT	|OALCPURestoreContext|
	IMPORT	|g_pContextRestore|

  00080			 AREA	 |.pdata|, PDATA
|$T47706| DCD	|$LN8@PrcmContex|
	DCD	0x40005802
; Function compile flags: /Odtp

  0168c			 AREA	 |.text|, CODE, ARM

  0168c		 |PrcmContextRestoreInit| PROC

; 846  : {

  0168c		 |$LN8@PrcmContex|
  0168c	e52de004	 str         lr, [sp, #-4]!
  01690	e24dd004	 sub         sp, sp, #4
  01694		 |$M47703|

; 847  :     // store the oem context restore address
; 848  :     if (g_pContextRestore == NULL) return;

  01694	e59f3138	 ldr         r3, [pc, #0x138]
  01698	e5933000	 ldr         r3, [r3]
  0169c	e3530000	 cmp         r3, #0
  016a0	1a000000	 bne         |$LN3@PrcmContex|
  016a4	ea000047	 b           |$LN4@PrcmContex|
  016a8		 |$LN3@PrcmContex|

; 849  : 
; 850  :     OUTREG32(&g_pContextRestore->BOOT_CONFIG_ADDR, 0);

  016a8	e59f3124	 ldr         r3, [pc, #0x124]
  016ac	e5932000	 ldr         r2, [r3]
  016b0	e3a03000	 mov         r3, #0
  016b4	e5823000	 str         r3, [r2]

; 851  : #pragma warning (push)
; 852  : #pragma warning (disable:4152) //disable warning that prevents using function pointers as data pointers
; 853  :     OUTREG32(&g_pContextRestore->PUBLIC_RESTORE_ADDR, OALVAtoPA(OALCPURestoreContext));

  016b8	e59f0128	 ldr         r0, [pc, #0x128]
  016bc	eb000000	 bl          OALVAtoPA
  016c0	e58d0000	 str         r0, [sp]
  016c4	e59f3108	 ldr         r3, [pc, #0x108]
  016c8	e5933000	 ldr         r3, [r3]
  016cc	e2832004	 add         r2, r3, #4
  016d0	e59d3000	 ldr         r3, [sp]
  016d4	e5823000	 str         r3, [r2]

; 854  : #pragma warning (pop)
; 855  : 
; 856  :     OUTREG32(&g_pContextRestore->SECURE_SRAM_RESTORE_ADDR, 0);

  016d8	e59f30f4	 ldr         r3, [pc, #0xF4]
  016dc	e5933000	 ldr         r3, [r3]
  016e0	e2832008	 add         r2, r3, #8
  016e4	e3a03000	 mov         r3, #0
  016e8	e5823000	 str         r3, [r2]

; 857  :     OUTREG32(&g_pContextRestore->SDRC_MODULE_SEMAPHORE, 0);

  016ec	e59f30e0	 ldr         r3, [pc, #0xE0]
  016f0	e5933000	 ldr         r3, [r3]
  016f4	e283200c	 add         r2, r3, #0xC
  016f8	e3a03000	 mov         r3, #0
  016fc	e5823000	 str         r3, [r2]

; 858  :     OUTREG32(&g_pContextRestore->OEM_CPU_INFO_DATA_PA, dwOEMMPUContextRestore);

  01700	e59f30dc	 ldr         r3, [pc, #0xDC]
  01704	e5932000	 ldr         r2, [r3]
  01708	e59f30c4	 ldr         r3, [pc, #0xC4]
  0170c	e5933000	 ldr         r3, [r3]
  01710	e283301c	 add         r3, r3, #0x1C
  01714	e5832000	 str         r2, [r3]

; 859  :     OUTREG32(&g_pContextRestore->OEM_CPU_INFO_DATA_VA, g_pCPUInfo);

  01718	e59f30b4	 ldr         r3, [pc, #0xB4]
  0171c	e5933000	 ldr         r3, [r3]
  01720	e2832020	 add         r2, r3, #0x20
  01724	e59f30b4	 ldr         r3, [pc, #0xB4]
  01728	e5933000	 ldr         r3, [r3]
  0172c	e5823000	 str         r3, [r2]

; 860  :     OUTREG32(&g_pContextRestore->PRCM_BLOCK_OFFSET, 0);

  01730	e59f309c	 ldr         r3, [pc, #0x9C]
  01734	e5933000	 ldr         r3, [r3]
  01738	e2832010	 add         r2, r3, #0x10
  0173c	e3a03000	 mov         r3, #0
  01740	e5823000	 str         r3, [r2]

; 861  :     OUTREG32(&g_pContextRestore->SDRC_BLOCK_OFFSET, 0);

  01744	e59f3088	 ldr         r3, [pc, #0x88]
  01748	e5933000	 ldr         r3, [r3]
  0174c	e2832014	 add         r2, r3, #0x14
  01750	e3a03000	 mov         r3, #0
  01754	e5823000	 str         r3, [r2]

; 862  : 
; 863  :     if (g_pPrcmRestore != NULL)

  01758	e59f307c	 ldr         r3, [pc, #0x7C]
  0175c	e5933000	 ldr         r3, [r3]
  01760	e3530000	 cmp         r3, #0
  01764	0a000009	 beq         |$LN2@PrcmContex|

; 864  :         {
; 865  :         OUTREG32(&g_pContextRestore->PRCM_BLOCK_OFFSET,
; 866  :             (UINT)g_pPrcmRestore - (UINT)g_pContextRestore
; 867  :             );

  01768	e59f306c	 ldr         r3, [pc, #0x6C]
  0176c	e5932000	 ldr         r2, [r3]
  01770	e59f305c	 ldr         r3, [pc, #0x5C]
  01774	e5933000	 ldr         r3, [r3]
  01778	e0422003	 sub         r2, r2, r3
  0177c	e59f3050	 ldr         r3, [pc, #0x50]
  01780	e5933000	 ldr         r3, [r3]
  01784	e2833010	 add         r3, r3, #0x10
  01788	e5832000	 str         r2, [r3]

; 868  :         OALSavePrcmContext();

  0178c	eb000000	 bl          OALSavePrcmContext
  01790		 |$LN2@PrcmContex|

; 869  :         }
; 870  : 
; 871  :     if (g_pSdrcRestore != NULL)

  01790	e59f3040	 ldr         r3, [pc, #0x40]
  01794	e5933000	 ldr         r3, [r3]
  01798	e3530000	 cmp         r3, #0
  0179c	0a000009	 beq         |$LN1@PrcmContex|

; 872  :         {
; 873  :         OUTREG32(&g_pContextRestore->SDRC_BLOCK_OFFSET,
; 874  :             (UINT)g_pSdrcRestore - (UINT)g_pContextRestore
; 875  :             );

  017a0	e59f3030	 ldr         r3, [pc, #0x30]
  017a4	e5932000	 ldr         r2, [r3]
  017a8	e59f3024	 ldr         r3, [pc, #0x24]
  017ac	e5933000	 ldr         r3, [r3]
  017b0	e0422003	 sub         r2, r2, r3
  017b4	e59f3018	 ldr         r3, [pc, #0x18]
  017b8	e5933000	 ldr         r3, [r3]
  017bc	e2833014	 add         r3, r3, #0x14
  017c0	e5832000	 str         r2, [r3]

; 876  :         OALSaveSdrcContext();

  017c4	eb000000	 bl          OALSaveSdrcContext
  017c8		 |$LN1@PrcmContex|
  017c8		 |$LN4@PrcmContex|

; 877  :         }
; 878  : }

  017c8	e28dd004	 add         sp, sp, #4
  017cc	e49de004	 ldr         lr, [sp], #4
  017d0	e12fff1e	 bx          lr
  017d4		 |$LN9@PrcmContex|
  017d4		 |$LN10@PrcmContex|
  017d4	00000000	 DCD         |g_pContextRestore|
  017d8		 |$LN11@PrcmContex|
  017d8	00000000	 DCD         |g_pSdrcRestore|
  017dc		 |$LN12@PrcmContex|
  017dc	00000000	 DCD         |g_pPrcmRestore|
  017e0		 |$LN13@PrcmContex|
  017e0	00000000	 DCD         |g_pCPUInfo|
  017e4		 |$LN14@PrcmContex|
  017e4	00000000	 DCD         |dwOEMMPUContextRestore|
  017e8		 |$LN15@PrcmContex|
  017e8	00000000	 DCD         |OALCPURestoreContext|
  017ec		 |$M47704|

			 ENDP  ; |PrcmContextRestoreInit|

	EXPORT	|PrcmContextRestore|

  00088			 AREA	 |.pdata|, PDATA
|$T47718| DCD	|$LN5@PrcmContex@2|
	DCD	0x40002c01
; Function compile flags: /Odtp

  017ec			 AREA	 |.text|, CODE, ARM

  017ec		 |PrcmContextRestore| PROC

; 888  : {

  017ec		 |$LN5@PrcmContex@2|
  017ec	e52de004	 str         lr, [sp, #-4]!
  017f0		 |$M47715|

; 889  : 
; 890  : #pragma warning (push)
; 891  : #pragma warning (disable:4152) //disable warning that prevents using function pointers as data pointers
; 892  :     memcpy(fnCpuStart, OALCPUStart, (UINT)OALCPUEnd - (UINT)OALCPUStart);

  017f0	e59f20a0	 ldr         r2, [pc, #0xA0]
  017f4	e59f3098	 ldr         r3, [pc, #0x98]
  017f8	e0422003	 sub         r2, r2, r3
  017fc	e59f1090	 ldr         r1, [pc, #0x90]
  01800	e59f3088	 ldr         r3, [pc, #0x88]
  01804	e5930000	 ldr         r0, [r3]
  01808	eb000000	 bl          memcpy

; 893  : #pragma warning (pop)
; 894  : 
; 895  :     OUTREG32(&g_pPrcmCm->pOMAP_CORE_CM->CM_CLKSTCTRL_CORE,
; 896  :         INREG32(&g_pPrcmRestore->CM_CLKSTCTRL_CORE)
; 897  :         );

  0180c	e59f3078	 ldr         r3, [pc, #0x78]
  01810	e5933000	 ldr         r3, [r3]
  01814	e283303c	 add         r3, r3, #0x3C
  01818	e5932000	 ldr         r2, [r3]
  0181c	e59f3064	 ldr         r3, [pc, #0x64]
  01820	e5933000	 ldr         r3, [r3]
  01824	e2833004	 add         r3, r3, #4
  01828	e5933000	 ldr         r3, [r3]
  0182c	e2833048	 add         r3, r3, #0x48
  01830	e5832000	 str         r2, [r3]

; 898  : 
; 899  :     OUTREG32(&g_pPrcmCm->pOMAP_MPU_CM->CM_CLKSTCTRL_MPU,
; 900  :         INREG32(&g_pPrcmRestore->CM_CLKSTCTRL_MPU)
; 901  :         );

  01834	e59f3050	 ldr         r3, [pc, #0x50]
  01838	e5933000	 ldr         r3, [r3]
  0183c	e2833038	 add         r3, r3, #0x38
  01840	e5932000	 ldr         r2, [r3]
  01844	e59f303c	 ldr         r3, [pc, #0x3C]
  01848	e5933000	 ldr         r3, [r3]
  0184c	e2833014	 add         r3, r3, #0x14
  01850	e5933000	 ldr         r3, [r3]
  01854	e2833048	 add         r3, r3, #0x48
  01858	e5832000	 str         r2, [r3]

; 902  : 
; 903  :    OUTREG32(&g_pPrcmCm->pOMAP_WKUP_CM->CM_CLKSEL_WKUP,
; 904  :         INREG32(&g_pPrcmRestore->CM_CLKSEL_WKUP)
; 905  :         );

  0185c	e59f3028	 ldr         r3, [pc, #0x28]
  01860	e5933000	 ldr         r3, [r3]
  01864	e283300c	 add         r3, r3, #0xC
  01868	e5932000	 ldr         r2, [r3]
  0186c	e59f3014	 ldr         r3, [pc, #0x14]
  01870	e5933000	 ldr         r3, [r3]
  01874	e5933000	 ldr         r3, [r3]
  01878	e2833040	 add         r3, r3, #0x40
  0187c	e5832000	 str         r2, [r3]

; 906  : }

  01880	e49de004	 ldr         lr, [sp], #4
  01884	e12fff1e	 bx          lr
  01888		 |$LN6@PrcmContex@2|
  01888		 |$LN7@PrcmContex@2|
  01888	00000000	 DCD         |g_pPrcmCm|
  0188c		 |$LN8@PrcmContex@2|
  0188c	00000000	 DCD         |g_pPrcmRestore|
  01890		 |$LN9@PrcmContex@2|
  01890	00000000	 DCD         |fnCpuStart|
  01894		 |$LN10@PrcmContex@2|
  01894	00000000	 DCD         |OALCPUStart|
  01898		 |$LN11@PrcmContex@2|
  01898	00000000	 DCD         |OALCPUEnd|
  0189c		 |$M47716|

			 ENDP  ; |PrcmContextRestore|

	EXPORT	|PrcmSuspend|
	IMPORT	|OALRestoreAllVfpNeonRegisters|
	IMPORT	|OALTimerStart|
	IMPORT	|PrcmProcessPostMpuWakeup|
	IMPORT	|OALWakeupLatency_PopState|
	IMPORT	|PrcmRegsSnapshot|
	IMPORT	|PrcmSaveRefCounts|
	IMPORT	|OALWakeupLatency_SaveSnapshot|
	IMPORT	|g_PrcmDebugSuspendResume|
	IMPORT	|OALWakeupLatency_PushState|
	IMPORT	|OALContextSave|
	IMPORT	|OALWakeupLatency_IsChipOff|
	IMPORT	|OALWakeupLatency_GetSuspendState|
	IMPORT	|PrcmDeviceEnableClocksKernel|
	IMPORT	|OALTimerSetReg|
	IMPORT	|g_oalTimerIrq|
	IMPORT	|OALSaveAllVfpNeonRegisters|

  00090			 AREA	 |.pdata|, PDATA
|$T47729| DCD	|$LN10@PrcmSuspen|
	DCD	0x40012502
; Function compile flags: /Odtp

  0189c			 AREA	 |.text|, CODE, ARM

  0189c		 |PrcmSuspend| PROC

; 919  : {

  0189c		 |$LN10@PrcmSuspen|
  0189c	e52de004	 str         lr, [sp, #-4]!
  018a0	e24dd030	 sub         sp, sp, #0x30
  018a4		 |$M47726|

; 920  :     DWORD latencyState;
; 921  :     UINT32 prevCoreState;
; 922  :     UINT32 prevMpuState;
; 923  :     UINT32 prevPerState;
; 924  :     UINT32 prevMpuPerNeonDssState;
; 925  :     UINT32 prevCoreCamUsbSgxState;
; 926  :     
; 927  :     UINT32 irq = (UINT32) OAL_INTR_IRQ_UNDEFINED;

  018a4	e3e03000	 mvn         r3, #0
  018a8	e58d3008	 str         r3, [sp, #8]

; 928  :     BOOL isTimerIntrPending = FALSE;

  018ac	e3a03000	 mov         r3, #0
  018b0	e58d3000	 str         r3, [sp]

; 929  :     
; 930  : 	OALSaveAllVfpNeonRegisters(VfpNeonSave);

  018b4	e59f0454	 ldr         r0, [pc, #0x454]
  018b8	eb000000	 bl          OALSaveAllVfpNeonRegisters

; 931  : 
; 932  :     //--------------------------------------------------------------------------
; 933  :     // perform power down sequence
; 934  :     //--------------------------------------------------------------------------
; 935  : 
; 936  :     // Disable match interrupt
; 937  :     irq = INREG32(&g_pIntr->pICLRegs->INTC_SIR_IRQ);

  018bc	e59f3464	 ldr         r3, [pc, #0x464]
  018c0	e5933000	 ldr         r3, [r3]
  018c4	e5933000	 ldr         r3, [r3]
  018c8	e2833040	 add         r3, r3, #0x40
  018cc	e5933000	 ldr         r3, [r3]
  018d0	e58d3008	 str         r3, [sp, #8]

; 938  :     if (irq == g_oalTimerIrq)

  018d4	e59d2008	 ldr         r2, [sp, #8]
  018d8	e59f344c	 ldr         r3, [pc, #0x44C]
  018dc	e5933000	 ldr         r3, [r3]
  018e0	e1520003	 cmp         r2, r3
  018e4	1a000011	 bne         |$LN5@PrcmSuspen|

; 939  :     {
; 940  :         isTimerIntrPending = TRUE;           

  018e8	e3a03001	 mov         r3, #1
  018ec	e58d3000	 str         r3, [sp]

; 941  :         OALTimerSetReg(&g_pTimerRegs->TISR, GPTIMER_TIER_MATCH);

  018f0	e3a01001	 mov         r1, #1
  018f4	e59f3418	 ldr         r3, [pc, #0x418]
  018f8	e5933000	 ldr         r3, [r3]
  018fc	e2830018	 add         r0, r3, #0x18
  01900	eb000000	 bl          OALTimerSetReg

; 942  :         OUTREG32(&g_pIntr->pICLRegs->INTC_CONTROL, IC_CNTL_NEW_IRQ);

  01904	e59f341c	 ldr         r3, [pc, #0x41C]
  01908	e5933000	 ldr         r3, [r3]
  0190c	e5933000	 ldr         r3, [r3]
  01910	e2832048	 add         r2, r3, #0x48
  01914	e3a03001	 mov         r3, #1
  01918	e5823000	 str         r3, [r2]

; 943  :         OALTimerSetReg(&g_pTimerRegs->TIER, 0);

  0191c	e3a01000	 mov         r1, #0
  01920	e59f33ec	 ldr         r3, [pc, #0x3EC]
  01924	e5933000	 ldr         r3, [r3]
  01928	e283001c	 add         r0, r3, #0x1C
  0192c	eb000000	 bl          OALTimerSetReg
  01930		 |$LN5@PrcmSuspen|

; 944  :     }
; 945  : 
; 946  :     PrcmDeviceEnableClocksKernel(OMAP_DEVICE_GPTIMER1, FALSE);

  01930	e3a01000	 mov         r1, #0
  01934	e3a00024	 mov         r0, #0x24
  01938	eb000000	 bl          PrcmDeviceEnableClocksKernel

; 947  : 
; 948  : 	// clear previous power state registers
; 949  :     OUTREG32(&g_pPrcmPrm->pOMAP_MPU_PRM->PM_PREPWSTST_MPU, 0);

  0193c	e59f33d4	 ldr         r3, [pc, #0x3D4]
  01940	e5933000	 ldr         r3, [r3]
  01944	e2833014	 add         r3, r3, #0x14
  01948	e5933000	 ldr         r3, [r3]
  0194c	e28320e8	 add         r2, r3, #0xE8
  01950	e3a03000	 mov         r3, #0
  01954	e5823000	 str         r3, [r2]

; 950  :     OUTREG32(&g_pPrcmPrm->pOMAP_CORE_PRM->PM_PREPWSTST_CORE, 0);

  01958	e59f33b8	 ldr         r3, [pc, #0x3B8]
  0195c	e5933000	 ldr         r3, [r3]
  01960	e2833004	 add         r3, r3, #4
  01964	e5933000	 ldr         r3, [r3]
  01968	e28320e8	 add         r2, r3, #0xE8
  0196c	e3a03000	 mov         r3, #0
  01970	e5823000	 str         r3, [r2]

; 951  :     OUTREG32(&g_pPrcmPrm->pOMAP_PER_PRM->PM_PREPWSTST_PER, 0);

  01974	e59f339c	 ldr         r3, [pc, #0x39C]
  01978	e5933000	 ldr         r3, [r3]
  0197c	e2833008	 add         r3, r3, #8
  01980	e5933000	 ldr         r3, [r3]
  01984	e28320e8	 add         r2, r3, #0xE8
  01988	e3a03000	 mov         r3, #0
  0198c	e5823000	 str         r3, [r2]

; 952  :     OUTREG32(&g_pPrcmPrm->pOMAP_NEON_PRM->PM_PREPWSTST_NEON, 0);

  01990	e59f3380	 ldr         r3, [pc, #0x380]
  01994	e5933000	 ldr         r3, [r3]
  01998	e283301c	 add         r3, r3, #0x1C
  0199c	e5933000	 ldr         r3, [r3]
  019a0	e28320e8	 add         r2, r3, #0xE8
  019a4	e3a03000	 mov         r3, #0
  019a8	e5823000	 str         r3, [r2]

; 953  :     OUTREG32(&g_pPrcmPrm->pOMAP_DSS_PRM->PM_PREPWSTST_DSS, 0);

  019ac	e59f3364	 ldr         r3, [pc, #0x364]
  019b0	e5933000	 ldr         r3, [r3]
  019b4	e2833018	 add         r3, r3, #0x18
  019b8	e5933000	 ldr         r3, [r3]
  019bc	e28320e8	 add         r2, r3, #0xE8
  019c0	e3a03000	 mov         r3, #0
  019c4	e5823000	 str         r3, [r2]

; 954  :     OUTREG32(&g_pPrcmPrm->pOMAP_CAM_PRM->PM_PREPWSTST_CAM, 0);

  019c8	e59f3348	 ldr         r3, [pc, #0x348]
  019cc	e5933000	 ldr         r3, [r3]
  019d0	e2833024	 add         r3, r3, #0x24
  019d4	e5933000	 ldr         r3, [r3]
  019d8	e28320e8	 add         r2, r3, #0xE8
  019dc	e3a03000	 mov         r3, #0
  019e0	e5823000	 str         r3, [r2]

; 955  :     OUTREG32(&g_pPrcmPrm->pOMAP_USBHOST_PRM->PM_PREPWSTST_USBHOST, 0);

  019e4	e59f332c	 ldr         r3, [pc, #0x32C]
  019e8	e5933000	 ldr         r3, [r3]
  019ec	e283300c	 add         r3, r3, #0xC
  019f0	e5933000	 ldr         r3, [r3]
  019f4	e28320e8	 add         r2, r3, #0xE8
  019f8	e3a03000	 mov         r3, #0
  019fc	e5823000	 str         r3, [r2]

; 956  :     OUTREG32(&g_pPrcmPrm->pOMAP_SGX_PRM->PM_PREPWSTST_SGX, 0);

  01a00	e59f3310	 ldr         r3, [pc, #0x310]
  01a04	e5933000	 ldr         r3, [r3]
  01a08	e2833028	 add         r3, r3, #0x28
  01a0c	e5933000	 ldr         r3, [r3]
  01a10	e28320e8	 add         r2, r3, #0xE8
  01a14	e3a03000	 mov         r3, #0
  01a18	e5823000	 str         r3, [r2]

; 957  : 
; 958  :     // use the latency module to transition to a valid sleep state
; 959  :     latencyState = OALWakeupLatency_GetSuspendState();

  01a1c	eb000000	 bl          OALWakeupLatency_GetSuspendState
  01a20	e58d0020	 str         r0, [sp, #0x20]
  01a24	e59d3020	 ldr         r3, [sp, #0x20]
  01a28	e58d3018	 str         r3, [sp, #0x18]

; 960  :     if (OALWakeupLatency_IsChipOff(latencyState))

  01a2c	e59d0018	 ldr         r0, [sp, #0x18]
  01a30	eb000000	 bl          OALWakeupLatency_IsChipOff
  01a34	e58d0024	 str         r0, [sp, #0x24]
  01a38	e59d3024	 ldr         r3, [sp, #0x24]
  01a3c	e3530000	 cmp         r3, #0
  01a40	0a000005	 beq         |$LN4@PrcmSuspen|

; 961  :         {
; 962  :         if (!OALContextSave())

  01a44	eb000000	 bl          OALContextSave
  01a48	e58d0028	 str         r0, [sp, #0x28]
  01a4c	e59d3028	 ldr         r3, [sp, #0x28]
  01a50	e3530000	 cmp         r3, #0
  01a54	1a000000	 bne         |$LN3@PrcmSuspen|

; 963  :             {
; 964  :             // wake-up will fail so just return
; 965  :             goto cleanUp;

  01a58	ea000095	 b           |$cleanUp$47411|
  01a5c		 |$LN3@PrcmSuspen|
  01a5c		 |$LN4@PrcmSuspen|

; 966  :             }
; 967  :         }
; 968  :     OALWakeupLatency_PushState(latencyState);

  01a5c	e59d0018	 ldr         r0, [sp, #0x18]
  01a60	eb000000	 bl          OALWakeupLatency_PushState

; 969  : 
; 970  : 
; 971  :     // Move SoC/CPU to idle mode
; 972  :     
; 973  : 
; 974  : #ifndef SHIP_BUILD
; 975  :     if (g_PrcmDebugSuspendResume)

  01a64	e59f32b8	 ldr         r3, [pc, #0x2B8]
  01a68	e5933000	 ldr         r3, [r3]
  01a6c	e3530000	 cmp         r3, #0
  01a70	0a000002	 beq         |$LN2@PrcmSuspen|

; 976  :     {
; 977  :         OALWakeupLatency_SaveSnapshot();

  01a74	eb000000	 bl          OALWakeupLatency_SaveSnapshot

; 978  :         PrcmSaveRefCounts();

  01a78	eb000000	 bl          PrcmSaveRefCounts

; 979  :         PrcmRegsSnapshot();

  01a7c	eb000000	 bl          PrcmRegsSnapshot
  01a80		 |$LN2@PrcmSuspen|

; 980  : 	}
; 981  : #endif
; 982  : 		
; 983  :     PrcmDeviceEnableClocksKernel(OMAP_DEVICE_OMAPCTRL, FALSE);

  01a80	e3a01000	 mov         r1, #0
  01a84	e3a00004	 mov         r0, #4
  01a88	eb000000	 bl          PrcmDeviceEnableClocksKernel

; 984  : 
; 985  :     // Move SoC/CPU to idle mode (suspend)
; 986  :     fnOALCPUIdle(g_pCPUInfo);

  01a8c	e59f328c	 ldr         r3, [pc, #0x28C]
  01a90	e5930000	 ldr         r0, [r3]
  01a94	e59f3280	 ldr         r3, [pc, #0x280]
  01a98	e5933000	 ldr         r3, [r3]
  01a9c	e1a0e00f	 mov         lr, pc
  01aa0	e12fff13	 bx          r3

; 987  : 
; 988  :     // resume starts here...
; 989  :     PrcmDeviceEnableClocksKernel(OMAP_DEVICE_OMAPCTRL, TRUE);

  01aa4	e3a01001	 mov         r1, #1
  01aa8	e3a00004	 mov         r0, #4
  01aac	eb000000	 bl          PrcmDeviceEnableClocksKernel

; 990  : 
; 991  :     OALWakeupLatency_PopState();

  01ab0	eb000000	 bl          OALWakeupLatency_PopState

; 992  : 
; 993  :     prevMpuState = INREG32(&g_pPrcmPrm->pOMAP_MPU_PRM->PM_PREPWSTST_MPU);

  01ab4	e59f325c	 ldr         r3, [pc, #0x25C]
  01ab8	e5933000	 ldr         r3, [r3]
  01abc	e2833014	 add         r3, r3, #0x14
  01ac0	e5933000	 ldr         r3, [r3]
  01ac4	e28330e8	 add         r3, r3, #0xE8
  01ac8	e5933000	 ldr         r3, [r3]
  01acc	e58d3014	 str         r3, [sp, #0x14]

; 994  :     prevCoreState = INREG32(&g_pPrcmPrm->pOMAP_CORE_PRM->PM_PREPWSTST_CORE);

  01ad0	e59f3240	 ldr         r3, [pc, #0x240]
  01ad4	e5933000	 ldr         r3, [r3]
  01ad8	e2833004	 add         r3, r3, #4
  01adc	e5933000	 ldr         r3, [r3]
  01ae0	e28330e8	 add         r3, r3, #0xE8
  01ae4	e5933000	 ldr         r3, [r3]
  01ae8	e58d300c	 str         r3, [sp, #0xC]

; 995  :     prevPerState = INREG32(&g_pPrcmPrm->pOMAP_PER_PRM->PM_PREPWSTST_PER);

  01aec	e59f3224	 ldr         r3, [pc, #0x224]
  01af0	e5933000	 ldr         r3, [r3]
  01af4	e2833008	 add         r3, r3, #8
  01af8	e5933000	 ldr         r3, [r3]
  01afc	e28330e8	 add         r3, r3, #0xE8
  01b00	e5933000	 ldr         r3, [r3]
  01b04	e58d3010	 str         r3, [sp, #0x10]

; 996  : 
; 997  :     prevMpuPerNeonDssState =  (prevMpuState & 0xFF);

  01b08	e59d3014	 ldr         r3, [sp, #0x14]
  01b0c	e20330ff	 and         r3, r3, #0xFF
  01b10	e58d301c	 str         r3, [sp, #0x1C]

; 998  :     prevMpuPerNeonDssState |= ((INREG32(&g_pPrcmPrm->pOMAP_PER_PRM->PM_PREPWSTST_PER) & 0xFF) << 8);    

  01b14	e59f31fc	 ldr         r3, [pc, #0x1FC]
  01b18	e5933000	 ldr         r3, [r3]
  01b1c	e2833008	 add         r3, r3, #8
  01b20	e5933000	 ldr         r3, [r3]
  01b24	e28330e8	 add         r3, r3, #0xE8
  01b28	e5933000	 ldr         r3, [r3]
  01b2c	e20330ff	 and         r3, r3, #0xFF
  01b30	e1a02403	 mov         r2, r3, lsl #8
  01b34	e59d301c	 ldr         r3, [sp, #0x1C]
  01b38	e1833002	 orr         r3, r3, r2
  01b3c	e58d301c	 str         r3, [sp, #0x1C]

; 999  :     prevMpuPerNeonDssState |= ((INREG32(&g_pPrcmPrm->pOMAP_NEON_PRM->PM_PREPWSTST_NEON) & 0xFF) << 16);    

  01b40	e59f31d0	 ldr         r3, [pc, #0x1D0]
  01b44	e5933000	 ldr         r3, [r3]
  01b48	e283301c	 add         r3, r3, #0x1C
  01b4c	e5933000	 ldr         r3, [r3]
  01b50	e28330e8	 add         r3, r3, #0xE8
  01b54	e5933000	 ldr         r3, [r3]
  01b58	e20330ff	 and         r3, r3, #0xFF
  01b5c	e1a02803	 mov         r2, r3, lsl #16
  01b60	e59d301c	 ldr         r3, [sp, #0x1C]
  01b64	e1833002	 orr         r3, r3, r2
  01b68	e58d301c	 str         r3, [sp, #0x1C]

; 1000 :     prevMpuPerNeonDssState |= ((INREG32(&g_pPrcmPrm->pOMAP_DSS_PRM->PM_PREPWSTST_DSS) & 0xFF) << 24);    

  01b6c	e59f31a4	 ldr         r3, [pc, #0x1A4]
  01b70	e5933000	 ldr         r3, [r3]
  01b74	e2833018	 add         r3, r3, #0x18
  01b78	e5933000	 ldr         r3, [r3]
  01b7c	e28330e8	 add         r3, r3, #0xE8
  01b80	e5933000	 ldr         r3, [r3]
  01b84	e20330ff	 and         r3, r3, #0xFF
  01b88	e1a02c03	 mov         r2, r3, lsl #24
  01b8c	e59d301c	 ldr         r3, [sp, #0x1C]
  01b90	e1833002	 orr         r3, r3, r2
  01b94	e58d301c	 str         r3, [sp, #0x1C]

; 1001 : 
; 1002 :     prevCoreCamUsbSgxState = (prevCoreState & 0xFF);

  01b98	e59d300c	 ldr         r3, [sp, #0xC]
  01b9c	e20330ff	 and         r3, r3, #0xFF
  01ba0	e58d3004	 str         r3, [sp, #4]

; 1003 :     prevCoreCamUsbSgxState |= ((INREG32(&g_pPrcmPrm->pOMAP_CAM_PRM->PM_PREPWSTST_CAM) & 0xFF) << 8);    

  01ba4	e59f316c	 ldr         r3, [pc, #0x16C]
  01ba8	e5933000	 ldr         r3, [r3]
  01bac	e2833024	 add         r3, r3, #0x24
  01bb0	e5933000	 ldr         r3, [r3]
  01bb4	e28330e8	 add         r3, r3, #0xE8
  01bb8	e5933000	 ldr         r3, [r3]
  01bbc	e20330ff	 and         r3, r3, #0xFF
  01bc0	e1a02403	 mov         r2, r3, lsl #8
  01bc4	e59d3004	 ldr         r3, [sp, #4]
  01bc8	e1833002	 orr         r3, r3, r2
  01bcc	e58d3004	 str         r3, [sp, #4]

; 1004 :     prevCoreCamUsbSgxState |= ((INREG32(&g_pPrcmPrm->pOMAP_USBHOST_PRM->PM_PREPWSTST_USBHOST) & 0xFF) << 16);    

  01bd0	e59f3140	 ldr         r3, [pc, #0x140]
  01bd4	e5933000	 ldr         r3, [r3]
  01bd8	e283300c	 add         r3, r3, #0xC
  01bdc	e5933000	 ldr         r3, [r3]
  01be0	e28330e8	 add         r3, r3, #0xE8
  01be4	e5933000	 ldr         r3, [r3]
  01be8	e20330ff	 and         r3, r3, #0xFF
  01bec	e1a02803	 mov         r2, r3, lsl #16
  01bf0	e59d3004	 ldr         r3, [sp, #4]
  01bf4	e1833002	 orr         r3, r3, r2
  01bf8	e58d3004	 str         r3, [sp, #4]

; 1005 :     prevCoreCamUsbSgxState |= ((INREG32(&g_pPrcmPrm->pOMAP_SGX_PRM->PM_PREPWSTST_SGX) & 0xFF) << 24);    

  01bfc	e59f3114	 ldr         r3, [pc, #0x114]
  01c00	e5933000	 ldr         r3, [r3]
  01c04	e2833028	 add         r3, r3, #0x28
  01c08	e5933000	 ldr         r3, [r3]
  01c0c	e28330e8	 add         r3, r3, #0xE8
  01c10	e5933000	 ldr         r3, [r3]
  01c14	e20330ff	 and         r3, r3, #0xFF
  01c18	e1a02c03	 mov         r2, r3, lsl #24
  01c1c	e59d3004	 ldr         r3, [sp, #4]
  01c20	e1833002	 orr         r3, r3, r2
  01c24	e58d3004	 str         r3, [sp, #4]

; 1006 :     
; 1007 : 
; 1008 :     OALContextRestore(prevMpuState, prevCoreState, prevPerState);

  01c28	e59d2010	 ldr         r2, [sp, #0x10]
  01c2c	e59d100c	 ldr         r1, [sp, #0xC]
  01c30	e59d0014	 ldr         r0, [sp, #0x14]
  01c34	eb000000	 bl          OALContextRestore

; 1009 : 
; 1010 :     PrcmProcessPostMpuWakeup();

  01c38	eb000000	 bl          PrcmProcessPostMpuWakeup

; 1011 : 
; 1012 :     OALLED(LED_IDX_MPU_PREV_STATE, INREG32(&g_pPrcmPrm->pOMAP_MPU_PRM->PM_PREPWSTST_MPU));

  01c3c	e59f30d4	 ldr         r3, [pc, #0xD4]
  01c40	e5933000	 ldr         r3, [r3]
  01c44	e2833014	 add         r3, r3, #0x14
  01c48	e5933000	 ldr         r3, [r3]
  01c4c	e28330e8	 add         r3, r3, #0xE8
  01c50	e5931000	 ldr         r1, [r3]
  01c54	e3a00018	 mov         r0, #0x18
  01c58	eb000000	 bl          OEMWriteDebugLED

; 1013 :     OALLED(LED_IDX_CORE_PREV_STATE, INREG32(&g_pPrcmPrm->pOMAP_CORE_PRM->PM_PREPWSTST_CORE));

  01c5c	e59f30b4	 ldr         r3, [pc, #0xB4]
  01c60	e5933000	 ldr         r3, [r3]
  01c64	e2833004	 add         r3, r3, #4
  01c68	e5933000	 ldr         r3, [r3]
  01c6c	e28330e8	 add         r3, r3, #0xE8
  01c70	e5931000	 ldr         r1, [r3]
  01c74	e3a0001a	 mov         r0, #0x1A
  01c78	eb000000	 bl          OEMWriteDebugLED

; 1014 :     OALLED(LED_IDX_PER_PREV_STATE, INREG32(&g_pPrcmPrm->pOMAP_PER_PRM->PM_PREPWSTST_PER));

  01c7c	e59f3094	 ldr         r3, [pc, #0x94]
  01c80	e5933000	 ldr         r3, [r3]
  01c84	e2833008	 add         r3, r3, #8
  01c88	e5933000	 ldr         r3, [r3]
  01c8c	e28330e8	 add         r3, r3, #0xE8
  01c90	e5931000	 ldr         r1, [r3]
  01c94	e3a00019	 mov         r0, #0x19
  01c98	eb000000	 bl          OEMWriteDebugLED

; 1015 :     OALLED(LED_IDX_CORE_CAM_USB_SGX_PREV_STATE, prevCoreCamUsbSgxState);

  01c9c	e59d1004	 ldr         r1, [sp, #4]
  01ca0	e3a00002	 mov         r0, #2
  01ca4	eb000000	 bl          OEMWriteDebugLED

; 1016 :     OALLED(LED_IDX_MPU_PER_NEON_DSS_PREV_STATE, prevMpuPerNeonDssState);

  01ca8	e59d101c	 ldr         r1, [sp, #0x1C]
  01cac	e3a00003	 mov         r0, #3
  01cb0	eb000000	 bl          OEMWriteDebugLED
  01cb4		 |$cleanUp$47411|

; 1017 : 
; 1018 : cleanUp:
; 1019 : 
; 1020 :     // restart GPTIMER1
; 1021 :     PrcmDeviceEnableClocksKernel(OMAP_DEVICE_GPTIMER1, TRUE);

  01cb4	e3a01001	 mov         r1, #1
  01cb8	e3a00024	 mov         r0, #0x24
  01cbc	eb000000	 bl          PrcmDeviceEnableClocksKernel

; 1022 :     
; 1023 :     if (isTimerIntrPending)

  01cc0	e59d3000	 ldr         r3, [sp]
  01cc4	e3530000	 cmp         r3, #0
  01cc8	0a00000a	 beq         |$LN1@PrcmSuspen|

; 1024 :         OALTimerSetReg(&g_pTimerRegs->TMAR, OALTimerGetReg(&g_pTimerRegs->TCRR)+2);

  01ccc	e59f3040	 ldr         r3, [pc, #0x40]
  01cd0	e5933000	 ldr         r3, [r3]
  01cd4	e2830028	 add         r0, r3, #0x28
  01cd8	eb000000	 bl          OALTimerGetReg
  01cdc	e58d002c	 str         r0, [sp, #0x2C]
  01ce0	e59d302c	 ldr         r3, [sp, #0x2C]
  01ce4	e2831002	 add         r1, r3, #2
  01ce8	e59f3024	 ldr         r3, [pc, #0x24]
  01cec	e5933000	 ldr         r3, [r3]
  01cf0	e2830038	 add         r0, r3, #0x38
  01cf4	eb000000	 bl          OALTimerSetReg
  01cf8		 |$LN1@PrcmSuspen|

; 1025 : 	
; 1026 :     OALTimerStart();

  01cf8	eb000000	 bl          OALTimerStart

; 1027 : 	
; 1028 :     // UNDONE:
; 1029 :     //   Need to update curridlehigh and curridlelow to track cpu loads
; 1030 : 
; 1031 : 	OALRestoreAllVfpNeonRegisters(VfpNeonSave);

  01cfc	e59f000c	 ldr         r0, [pc, #0xC]
  01d00	eb000000	 bl          OALRestoreAllVfpNeonRegisters

; 1032 : 
; 1033 : }

  01d04	e28dd030	 add         sp, sp, #0x30
  01d08	e49de004	 ldr         lr, [sp], #4
  01d0c	e12fff1e	 bx          lr
  01d10		 |$LN11@PrcmSuspen|
  01d10		 |$LN12@PrcmSuspen|
  01d10	00000000	 DCD         |VfpNeonSave|
  01d14		 |$LN13@PrcmSuspen|
  01d14	00000000	 DCD         |g_pTimerRegs|
  01d18		 |$LN14@PrcmSuspen|
  01d18	00000000	 DCD         |g_pPrcmPrm|
  01d1c		 |$LN15@PrcmSuspen|
  01d1c	00000000	 DCD         |fnOALCPUIdle|
  01d20		 |$LN16@PrcmSuspen|
  01d20	00000000	 DCD         |g_pCPUInfo|
  01d24		 |$LN17@PrcmSuspen|
  01d24	00000000	 DCD         |g_PrcmDebugSuspendResume|
  01d28		 |$LN18@PrcmSuspen|
  01d28	00000000	 DCD         |g_pIntr|
  01d2c		 |$LN19@PrcmSuspen|
  01d2c	00000000	 DCD         |g_oalTimerIrq|
  01d30		 |$M47727|

			 ENDP  ; |PrcmSuspend|

	EXPORT	|??_C@_1GO@KIJCCOCF@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAG?$AAe?$AAt?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAM?$AAa?$AAn?$AAa@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FM@ELGNEBJK@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAG?$AAe?$AAt?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAM?$AAa?$AAn?$AAa@| [ DATA ] ; `string'
	EXPORT	|OALIoCtlPrcmDeviceGetDeviceManagementTable|
	IMPORT	|PrcmClockGetSystemClockFrequency|
	IMPORT	|OALMux_UpdateOnDeviceStateChange|
	IMPORT	|PrcmDeviceGetContextState|
	IMPORT	|PrcmDeviceEnableAutoIdle|
	IMPORT	|PrcmDeviceSetSourceClocks|
	IMPORT	|PrcmDeviceEnableFClock|
	IMPORT	|PrcmDeviceEnableIClock|
	IMPORT	|PrcmDeviceEnableClocks|

  00098			 AREA	 |.pdata|, PDATA
|$T47748| DCD	|$LN12@OALIoCtlPr|
	DCD	0x40006604

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GO@KIJCCOCF@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAG?$AAe?$AAt?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAM?$AAa?$AAn?$AAa@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "o", 0x0, "C"
	DCB	0x0, "t", 0x0, "l", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m"
	DCB	0x0, "D", 0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e"
	DCB	0x0, "G", 0x0, "e", 0x0, "t", 0x0, "D", 0x0, "e", 0x0, "v"
	DCB	0x0, "i", 0x0, "c", 0x0, "e", 0x0, "M", 0x0, "a", 0x0, "n"
	DCB	0x0, "a", 0x0, "g", 0x0, "e", 0x0, "m", 0x0, "e", 0x0, "n"
	DCB	0x0, "t", 0x0, "T", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e"
	DCB	0x0, "(", 0x0, "r", 0x0, "c", 0x0, " ", 0x0, "=", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FM@ELGNEBJK@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAG?$AAe?$AAt?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAM?$AAa?$AAn?$AAa@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "o", 0x0, "C"
	DCB	0x0, "t", 0x0, "l", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m"
	DCB	0x0, "D", 0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e"
	DCB	0x0, "G", 0x0, "e", 0x0, "t", 0x0, "D", 0x0, "e", 0x0, "v"
	DCB	0x0, "i", 0x0, "c", 0x0, "e", 0x0, "M", 0x0, "a", 0x0, "n"
	DCB	0x0, "a", 0x0, "g", 0x0, "e", 0x0, "m", 0x0, "e", 0x0, "n"
	DCB	0x0, "t", 0x0, "T", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  01d30			 AREA	 |.text|, CODE, ARM

  01d30		 |OALIoCtlPrcmDeviceGetDeviceManagementTable| PROC

; 1048 : {

  01d30		 |$LN12@OALIoCtlPr|
  01d30	e1a0c00d	 mov         r12, sp
  01d34	e92d000f	 stmdb       sp!, {r0 - r3}
  01d38	e92d5000	 stmdb       sp!, {r12, lr}
  01d3c	e24dd014	 sub         sp, sp, #0x14
  01d40		 |$M47745|

; 1049 :     BOOL rc = FALSE;

  01d40	e3a03000	 mov         r3, #0
  01d44	e58d3004	 str         r3, [sp, #4]

; 1050 :     OMAP_DEVCLKMGMT_FNTABLE *pfnTbl;
; 1051 : 
; 1052 :     UNREFERENCED_PARAMETER(inSize);
; 1053 :     UNREFERENCED_PARAMETER(pInBuffer);
; 1054 :     UNREFERENCED_PARAMETER(code);
; 1055 : 
; 1056 :     OALMSG(OAL_IOCTL&&OAL_FUNC, (L"+OALIoCtlPrcmDeviceGetDeviceManagementTable\r\n"));

  01d48	e59f3150	 ldr         r3, [pc, #0x150]
  01d4c	e5933440	 ldr         r3, [r3, #0x440]
  01d50	e3130a01	 tst         r3, #1, 20
  01d54	0a000008	 beq         |$LN6@OALIoCtlPr|
  01d58	e59f3140	 ldr         r3, [pc, #0x140]
  01d5c	e5933440	 ldr         r3, [r3, #0x440]
  01d60	e3130004	 tst         r3, #4
  01d64	0a000004	 beq         |$LN6@OALIoCtlPr|
  01d68	e59f0154	 ldr         r0, [pc, #0x154]
  01d6c	eb000000	 bl          NKDbgPrintfW
  01d70	e3a03001	 mov         r3, #1
  01d74	e58d300c	 str         r3, [sp, #0xC]
  01d78	ea000001	 b           |$LN7@OALIoCtlPr|
  01d7c		 |$LN6@OALIoCtlPr|
  01d7c	e3a03000	 mov         r3, #0
  01d80	e58d300c	 str         r3, [sp, #0xC]
  01d84		 |$LN7@OALIoCtlPr|

; 1057 :     if (pOutBuffer == NULL || outSize < sizeof(OMAP_DEVCLKMGMT_FNTABLE))

  01d84	e59d3028	 ldr         r3, [sp, #0x28]
  01d88	e3530000	 cmp         r3, #0
  01d8c	0a000002	 beq         |$LN2@OALIoCtlPr|
  01d90	e59d302c	 ldr         r3, [sp, #0x2C]
  01d94	e3530020	 cmp         r3, #0x20
  01d98	2a000000	 bcs         |$LN3@OALIoCtlPr|
  01d9c		 |$LN2@OALIoCtlPr|

; 1058 :         {
; 1059 :         goto cleanUp;

  01d9c	ea000028	 b           |$cleanUp$47447|
  01da0		 |$LN3@OALIoCtlPr|

; 1060 :         }
; 1061 : 
; 1062 :     // update return information
; 1063 :     //
; 1064 :     if (pOutSize != NULL) *pOutSize = sizeof(OMAP_DEVCLKMGMT_FNTABLE);

  01da0	e59d3030	 ldr         r3, [sp, #0x30]
  01da4	e3530000	 cmp         r3, #0
  01da8	0a000002	 beq         |$LN1@OALIoCtlPr|
  01dac	e59d2030	 ldr         r2, [sp, #0x30]
  01db0	e3a03020	 mov         r3, #0x20
  01db4	e5823000	 str         r3, [r2]
  01db8		 |$LN1@OALIoCtlPr|

; 1065 : 
; 1066 :     // update function pointers
; 1067 :     //
; 1068 :     pfnTbl = (OMAP_DEVCLKMGMT_FNTABLE*)pOutBuffer;    

  01db8	e59d3028	 ldr         r3, [sp, #0x28]
  01dbc	e58d3000	 str         r3, [sp]

; 1069 :     pfnTbl->pfnEnableDeviceClocks= PrcmDeviceEnableClocks;

  01dc0	e59f20f8	 ldr         r2, [pc, #0xF8]
  01dc4	e59d3000	 ldr         r3, [sp]
  01dc8	e5832000	 str         r2, [r3]

; 1070 :     pfnTbl->pfnEnableDeviceIClock= PrcmDeviceEnableIClock;

  01dcc	e59d3000	 ldr         r3, [sp]
  01dd0	e2832004	 add         r2, r3, #4
  01dd4	e59f30e0	 ldr         r3, [pc, #0xE0]
  01dd8	e5823000	 str         r3, [r2]

; 1071 :     pfnTbl->pfnEnableDeviceFClock= PrcmDeviceEnableFClock;

  01ddc	e59d3000	 ldr         r3, [sp]
  01de0	e2832008	 add         r2, r3, #8
  01de4	e59f30cc	 ldr         r3, [pc, #0xCC]
  01de8	e5823000	 str         r3, [r2]

; 1072 :     pfnTbl->pfnSetSourceDeviceClocks = PrcmDeviceSetSourceClocks;

  01dec	e59d3000	 ldr         r3, [sp]
  01df0	e2832010	 add         r2, r3, #0x10
  01df4	e59f30b8	 ldr         r3, [pc, #0xB8]
  01df8	e5823000	 str         r3, [r2]

; 1073 :     pfnTbl->pfnEnableDeviceClockAutoIdle = PrcmDeviceEnableAutoIdle;

  01dfc	e59d3000	 ldr         r3, [sp]
  01e00	e283200c	 add         r2, r3, #0xC
  01e04	e59f30a4	 ldr         r3, [pc, #0xA4]
  01e08	e5823000	 str         r3, [r2]

; 1074 :     pfnTbl->pfnGetDeviceContextState = PrcmDeviceGetContextState;

  01e0c	e59d3000	 ldr         r3, [sp]
  01e10	e2832014	 add         r2, r3, #0x14
  01e14	e59f3090	 ldr         r3, [pc, #0x90]
  01e18	e5823000	 str         r3, [r2]

; 1075 :     pfnTbl->pfnUpdateOnDeviceStateChange = OALMux_UpdateOnDeviceStateChange;

  01e1c	e59d3000	 ldr         r3, [sp]
  01e20	e2832018	 add         r2, r3, #0x18
  01e24	e59f307c	 ldr         r3, [pc, #0x7C]
  01e28	e5823000	 str         r3, [r2]

; 1076 :     pfnTbl->pfnGetSystemClockFrequency = PrcmClockGetSystemClockFrequency;

  01e2c	e59d3000	 ldr         r3, [sp]
  01e30	e283201c	 add         r2, r3, #0x1C
  01e34	e59f3068	 ldr         r3, [pc, #0x68]
  01e38	e5823000	 str         r3, [r2]

; 1077 : 
; 1078 :     rc = TRUE;

  01e3c	e3a03001	 mov         r3, #1
  01e40	e58d3004	 str         r3, [sp, #4]
  01e44		 |$cleanUp$47447|

; 1079 : 
; 1080 : cleanUp:
; 1081 :     OALMSG(OAL_INTR&&OAL_FUNC, (L"-OALIoCtlPrcmDeviceGetDeviceManagementTable(rc = %d)\r\n", rc));

  01e44	e59f3054	 ldr         r3, [pc, #0x54]
  01e48	e5933440	 ldr         r3, [r3, #0x440]
  01e4c	e3130901	 tst         r3, #1, 18
  01e50	0a000009	 beq         |$LN8@OALIoCtlPr|
  01e54	e59f3044	 ldr         r3, [pc, #0x44]
  01e58	e5933440	 ldr         r3, [r3, #0x440]
  01e5c	e3130004	 tst         r3, #4
  01e60	0a000005	 beq         |$LN8@OALIoCtlPr|
  01e64	e59d1004	 ldr         r1, [sp, #4]
  01e68	e59f002c	 ldr         r0, [pc, #0x2C]
  01e6c	eb000000	 bl          NKDbgPrintfW
  01e70	e3a03001	 mov         r3, #1
  01e74	e58d3010	 str         r3, [sp, #0x10]
  01e78	ea000001	 b           |$LN9@OALIoCtlPr|
  01e7c		 |$LN8@OALIoCtlPr|
  01e7c	e3a03000	 mov         r3, #0
  01e80	e58d3010	 str         r3, [sp, #0x10]
  01e84		 |$LN9@OALIoCtlPr|

; 1082 :     return rc;

  01e84	e59d3004	 ldr         r3, [sp, #4]
  01e88	e58d3008	 str         r3, [sp, #8]

; 1083 : }

  01e8c	e59d0008	 ldr         r0, [sp, #8]
  01e90	e28dd014	 add         sp, sp, #0x14
  01e94	e89d6000	 ldmia       sp, {sp, lr}
  01e98	e12fff1e	 bx          lr
  01e9c		 |$LN13@OALIoCtlPr|
  01e9c		 |$LN14@OALIoCtlPr|
  01e9c	00000000	 DCD         |??_C@_1GO@KIJCCOCF@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAG?$AAe?$AAt?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAM?$AAa?$AAn?$AAa@|
  01ea0		 |$LN15@OALIoCtlPr|
  01ea0	00000000	 DCD         |dpCurSettings|
  01ea4		 |$LN16@OALIoCtlPr|
  01ea4	00000000	 DCD         |PrcmClockGetSystemClockFrequency|
  01ea8		 |$LN17@OALIoCtlPr|
  01ea8	00000000	 DCD         |OALMux_UpdateOnDeviceStateChange|
  01eac		 |$LN18@OALIoCtlPr|
  01eac	00000000	 DCD         |PrcmDeviceGetContextState|
  01eb0		 |$LN19@OALIoCtlPr|
  01eb0	00000000	 DCD         |PrcmDeviceEnableAutoIdle|
  01eb4		 |$LN20@OALIoCtlPr|
  01eb4	00000000	 DCD         |PrcmDeviceSetSourceClocks|
  01eb8		 |$LN21@OALIoCtlPr|
  01eb8	00000000	 DCD         |PrcmDeviceEnableFClock|
  01ebc		 |$LN22@OALIoCtlPr|
  01ebc	00000000	 DCD         |PrcmDeviceEnableIClock|
  01ec0		 |$LN23@OALIoCtlPr|
  01ec0	00000000	 DCD         |PrcmDeviceEnableClocks|
  01ec4		 |$LN24@OALIoCtlPr|
  01ec4	00000000	 DCD         |??_C@_1FM@ELGNEBJK@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAG?$AAe?$AAt?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAM?$AAa?$AAn?$AAa@|
  01ec8		 |$M47746|

			 ENDP  ; |OALIoCtlPrcmDeviceGetDeviceManagementTable|

	END
