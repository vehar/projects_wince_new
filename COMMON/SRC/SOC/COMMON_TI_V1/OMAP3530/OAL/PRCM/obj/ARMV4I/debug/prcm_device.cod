; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\OMAP3530\OAL\PRCM\prcm_device.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|_PrcmDeviceSetSourceClock_DSS|
	EXPORT	|_PrcmDeviceEnableFClock_DSS|
	EXPORT	|_PrcmDeviceEnableIClock_DSS|
	EXPORT	|_PrcmDeviceSetSourceClock_USB|
	EXPORT	|_PrcmDeviceEnableFClock_USB|
	EXPORT	|_PrcmDeviceEnableIClock_USB|
	EXPORT	|_PrcmDeviceSetSourceClock|
	EXPORT	|_PrcmDeviceEnableAutoIdle|
	EXPORT	|_PrcmDeviceEnableFClock|
	EXPORT	|_PrcmDeviceEnableIClock|
	EXPORT	|_autoIdle_D2D| [ DATA ]
	EXPORT	|_autoIdle_SSI| [ DATA ]
	EXPORT	|_autoIdle_HDQ| [ DATA ]
	EXPORT	|_autoIdle_ICR| [ DATA ]
	EXPORT	|_autoIdle_I2C1| [ DATA ]
	EXPORT	|_autoIdle_I2C2| [ DATA ]
	EXPORT	|_autoIdle_I2C3| [ DATA ]
	EXPORT	|_autoIdle_MMC1| [ DATA ]
	EXPORT	|_autoIdle_MMC2| [ DATA ]
	EXPORT	|_autoIdle_MMC3| [ DATA ]
	EXPORT	|_autoIdle_AES2| [ DATA ]
	EXPORT	|_autoIdle_DES2| [ DATA ]
	EXPORT	|_autoIdle_UART1| [ DATA ]
	EXPORT	|_autoIdle_UART2| [ DATA ]
	EXPORT	|_autoIdle_MSPRO| [ DATA ]
	EXPORT	|_autoIdle_SHA12| [ DATA ]
	EXPORT	|_autoIdle_MCBSP1| [ DATA ]
	EXPORT	|_autoIdle_MCBSP5| [ DATA ]
	EXPORT	|_autoIdle_MCSPI1| [ DATA ]
	EXPORT	|_autoIdle_MCSPI2| [ DATA ]
	EXPORT	|_autoIdle_MCSPI3| [ DATA ]
	EXPORT	|_autoIdle_MCSPI4| [ DATA ]
	EXPORT	|_autoIdle_GPT10| [ DATA ]
	EXPORT	|_autoIdle_GPT11| [ DATA ]
	EXPORT	|_autoIdle_OMAPCTRL| [ DATA ]
	EXPORT	|_autoIdle_HSOTGUSB| [ DATA ]
	EXPORT	|_autoIdle_MAILBOXES| [ DATA ]
	EXPORT	|_autoIdle_PKA| [ DATA ]
	EXPORT	|_autoIdle_RNG| [ DATA ]
	EXPORT	|_autoIdle_AES1| [ DATA ]
	EXPORT	|_autoIdle_DES1| [ DATA ]
	EXPORT	|_autoIdle_SHA11| [ DATA ]
	EXPORT	|_autoIdle_USBTLL| [ DATA ]
	EXPORT	|_autoIdle_GPT1| [ DATA ]
	EXPORT	|_autoIdle_GPT12| [ DATA ]
	EXPORT	|_autoIdle_32KSYNC| [ DATA ]
	EXPORT	|_autoIdle_GPIO1| [ DATA ]
	EXPORT	|_autoIdle_WDT1| [ DATA ]
	EXPORT	|_autoIdle_WDT2| [ DATA ]
	EXPORT	|_autoIdle_USIM| [ DATA ]
	EXPORT	|_autoIdle_WDT3| [ DATA ]
	EXPORT	|_autoIdle_GPT2| [ DATA ]
	EXPORT	|_autoIdle_GPT3| [ DATA ]
	EXPORT	|_autoIdle_GPT4| [ DATA ]
	EXPORT	|_autoIdle_GPT5| [ DATA ]
	EXPORT	|_autoIdle_GPT6| [ DATA ]
	EXPORT	|_autoIdle_GPT7| [ DATA ]
	EXPORT	|_autoIdle_GPT8| [ DATA ]
	EXPORT	|_autoIdle_GPT9| [ DATA ]
	EXPORT	|_autoIdle_UART3| [ DATA ]
	EXPORT	|_autoIdle_GPIO2| [ DATA ]
	EXPORT	|_autoIdle_GPIO3| [ DATA ]
	EXPORT	|_autoIdle_GPIO4| [ DATA ]
	EXPORT	|_autoIdle_GPIO5| [ DATA ]
	EXPORT	|_autoIdle_GPIO6| [ DATA ]
	EXPORT	|_autoIdle_MCBSP2| [ DATA ]
	EXPORT	|_autoIdle_MCBSP3| [ DATA ]
	EXPORT	|_autoIdle_MCBSP4| [ DATA ]
	EXPORT	|_autoIdle_UART4| [ DATA ]
	EXPORT	|_autoIdle_DSS| [ DATA ]
	EXPORT	|_autoIdle_CAM| [ DATA ]
	EXPORT	|_autoIdle_USBHOST| [ DATA ]
	EXPORT	|_idleStat_D2D| [ DATA ]
	EXPORT	|_idleStat_SSI| [ DATA ]
	EXPORT	|_idleStat_HDQ| [ DATA ]
	EXPORT	|_idleStat_ICR| [ DATA ]
	EXPORT	|_idleStat_SDRC| [ DATA ]
	EXPORT	|_idleStat_I2C1| [ DATA ]
	EXPORT	|_idleStat_I2C2| [ DATA ]
	EXPORT	|_idleStat_I2C3| [ DATA ]
	EXPORT	|_idleStat_MMC1| [ DATA ]
	EXPORT	|_idleStat_MMC2| [ DATA ]
	EXPORT	|_idleStat_MMC3| [ DATA ]
	EXPORT	|_idleStat_AES2| [ DATA ]
	EXPORT	|_idleStat_DES2| [ DATA ]
	EXPORT	|_idleStat_UART1| [ DATA ]
	EXPORT	|_idleStat_UART2| [ DATA ]
	EXPORT	|_idleStat_MSPRO| [ DATA ]
	EXPORT	|_idleStat_SHA12| [ DATA ]
	EXPORT	|_idleStat_MCBSP1| [ DATA ]
	EXPORT	|_idleStat_MCBSP5| [ DATA ]
	EXPORT	|_idleStat_MCSPI1| [ DATA ]
	EXPORT	|_idleStat_MCSPI2| [ DATA ]
	EXPORT	|_idleStat_MCSPI3| [ DATA ]
	EXPORT	|_idleStat_MCSPI4| [ DATA ]
	EXPORT	|_idleStat_GPT10| [ DATA ]
	EXPORT	|_idleStat_GPT11| [ DATA ]
	EXPORT	|_idleStat_HSOTGUSB| [ DATA ]
	EXPORT	|_idleStat_OMAPCTRL| [ DATA ]
	EXPORT	|_idleStat_MAILBOXES| [ DATA ]
	EXPORT	|_idleStat_PKA| [ DATA ]
	EXPORT	|_idleStat_RNG| [ DATA ]
	EXPORT	|_idleStat_AES1| [ DATA ]
	EXPORT	|_idleStat_DES1| [ DATA ]
	EXPORT	|_idleStat_SHA11| [ DATA ]
	EXPORT	|_idleStat_USBTLL| [ DATA ]
	EXPORT	|_idleStat_CPEFUSE| [ DATA ]
	EXPORT	|_idleStat_GPT1| [ DATA ]
	EXPORT	|_idleStat_GPT12| [ DATA ]
	EXPORT	|_idleStat_32KSYNC| [ DATA ]
	EXPORT	|_idleStat_GPIO1| [ DATA ]
	EXPORT	|_idleStat_WDT1| [ DATA ]
	EXPORT	|_idleStat_WDT2| [ DATA ]
	EXPORT	|_idleStat_USIM| [ DATA ]
	EXPORT	|_idleStat_SR1| [ DATA ]
	EXPORT	|_idleStat_SR2| [ DATA ]
	EXPORT	|_idleStat_WDT3| [ DATA ]
	EXPORT	|_idleStat_UART3| [ DATA ]
	EXPORT	|_idleStat_GPIO2| [ DATA ]
	EXPORT	|_idleStat_GPIO3| [ DATA ]
	EXPORT	|_idleStat_GPIO4| [ DATA ]
	EXPORT	|_idleStat_GPIO5| [ DATA ]
	EXPORT	|_idleStat_GPIO6| [ DATA ]
	EXPORT	|_idleStat_MCBSP2| [ DATA ]
	EXPORT	|_idleStat_MCBSP3| [ DATA ]
	EXPORT	|_idleStat_MCBSP4| [ DATA ]
	EXPORT	|_idleStat_GPT2| [ DATA ]
	EXPORT	|_idleStat_GPT3| [ DATA ]
	EXPORT	|_idleStat_GPT4| [ DATA ]
	EXPORT	|_idleStat_GPT5| [ DATA ]
	EXPORT	|_idleStat_GPT6| [ DATA ]
	EXPORT	|_idleStat_GPT7| [ DATA ]
	EXPORT	|_idleStat_GPT8| [ DATA ]
	EXPORT	|_idleStat_GPT9| [ DATA ]
	EXPORT	|_idleStat_UART4| [ DATA ]
	EXPORT	|_idleStat_DSS| [ DATA ]
	EXPORT	|_idleStat_CAM| [ DATA ]
	EXPORT	|_idleStat_SGX| [ DATA ]
	EXPORT	|_idleStat_IVA2| [ DATA ]
	EXPORT	|_idleStat_USBHOST| [ DATA ]
	EXPORT	|_iclk_D2D| [ DATA ]
	EXPORT	|_iclk_SSI| [ DATA ]
	EXPORT	|_iclk_HDQ| [ DATA ]
	EXPORT	|_iclk_ICR| [ DATA ]
	EXPORT	|_iclk_SDRC| [ DATA ]
	EXPORT	|_iclk_I2C1| [ DATA ]
	EXPORT	|_iclk_I2C2| [ DATA ]
	EXPORT	|_iclk_I2C3| [ DATA ]
	EXPORT	|_iclk_MMC1| [ DATA ]
	EXPORT	|_iclk_MMC2| [ DATA ]
	EXPORT	|_iclk_MMC3| [ DATA ]
	EXPORT	|_iclk_AES2| [ DATA ]
	EXPORT	|_iclk_DES2| [ DATA ]
	EXPORT	|_iclk_UART1| [ DATA ]
	EXPORT	|_iclk_UART2| [ DATA ]
	EXPORT	|_iclk_MSPRO| [ DATA ]
	EXPORT	|_iclk_SHA12| [ DATA ]
	EXPORT	|_iclk_MCBSP1| [ DATA ]
	EXPORT	|_iclk_MCBSP5| [ DATA ]
	EXPORT	|_iclk_MCSPI1| [ DATA ]
	EXPORT	|_iclk_MCSPI2| [ DATA ]
	EXPORT	|_iclk_MCSPI3| [ DATA ]
	EXPORT	|_iclk_MCSPI4| [ DATA ]
	EXPORT	|_iclk_GPT10| [ DATA ]
	EXPORT	|_iclk_GPT11| [ DATA ]
	EXPORT	|_iclk_OMAPCTRL| [ DATA ]
	EXPORT	|_iclk_HSOTGUSB| [ DATA ]
	EXPORT	|_iclk_MAILBOXES| [ DATA ]
	EXPORT	|_iclk_PKA| [ DATA ]
	EXPORT	|_iclk_RNG| [ DATA ]
	EXPORT	|_iclk_AES1| [ DATA ]
	EXPORT	|_iclk_DES1| [ DATA ]
	EXPORT	|_iclk_SHA11| [ DATA ]
	EXPORT	|_iclk_USBTLL| [ DATA ]
	EXPORT	|_iclk_VRFB| [ DATA ]
	EXPORT	|_iclk_GPT1| [ DATA ]
	EXPORT	|_iclk_GPT12| [ DATA ]
	EXPORT	|_iclk_32KSYNC| [ DATA ]
	EXPORT	|_iclk_GPIO1| [ DATA ]
	EXPORT	|_iclk_WDT1| [ DATA ]
	EXPORT	|_iclk_WDT2| [ DATA ]
	EXPORT	|_iclk_USIM| [ DATA ]
	EXPORT	|_iclk_WDT3| [ DATA ]
	EXPORT	|_iclk_GPT2| [ DATA ]
	EXPORT	|_iclk_GPT3| [ DATA ]
	EXPORT	|_iclk_GPT4| [ DATA ]
	EXPORT	|_iclk_GPT5| [ DATA ]
	EXPORT	|_iclk_GPT6| [ DATA ]
	EXPORT	|_iclk_GPT7| [ DATA ]
	EXPORT	|_iclk_GPT8| [ DATA ]
	EXPORT	|_iclk_GPT9| [ DATA ]
	EXPORT	|_iclk_UART3| [ DATA ]
	EXPORT	|_iclk_GPIO2| [ DATA ]
	EXPORT	|_iclk_GPIO3| [ DATA ]
	EXPORT	|_iclk_GPIO4| [ DATA ]
	EXPORT	|_iclk_GPIO5| [ DATA ]
	EXPORT	|_iclk_GPIO6| [ DATA ]
	EXPORT	|_iclk_MCBSP2| [ DATA ]
	EXPORT	|_iclk_MCBSP3| [ DATA ]
	EXPORT	|_iclk_MCBSP4| [ DATA ]
	EXPORT	|_iclk_UART4| [ DATA ]
	EXPORT	|_iclk_DSS| [ DATA ]
	EXPORT	|_iclk_CAM| [ DATA ]
	EXPORT	|_iclk_IVA2| [ DATA ]
	EXPORT	|_iclk_SGX| [ DATA ]
	EXPORT	|_iclk_USBHOST| [ DATA ]
	EXPORT	|_iclk_USBHOST1| [ DATA ]
	EXPORT	|_iclk_USBHOST2| [ DATA ]
	EXPORT	|_iclk_USBHOST3| [ DATA ]
	EXPORT	|_fclk_D2D| [ DATA ]
	EXPORT	|_fclk_SSI| [ DATA ]
	EXPORT	|_fclk_HDQ| [ DATA ]
	EXPORT	|_fclk_I2C1| [ DATA ]
	EXPORT	|_fclk_I2C2| [ DATA ]
	EXPORT	|_fclk_I2C3| [ DATA ]
	EXPORT	|_fclk_MMC1| [ DATA ]
	EXPORT	|_fclk_MMC2| [ DATA ]
	EXPORT	|_fclk_MMC3| [ DATA ]
	EXPORT	|_fclk_UART1| [ DATA ]
	EXPORT	|_fclk_UART2| [ DATA ]
	EXPORT	|_fclk_MSPRO| [ DATA ]
	EXPORT	|_fclk_MCBSP1| [ DATA ]
	EXPORT	|_fclk_MCBSP5| [ DATA ]
	EXPORT	|_fclk_MCSPI1| [ DATA ]
	EXPORT	|_fclk_MCSPI2| [ DATA ]
	EXPORT	|_fclk_MCSPI3| [ DATA ]
	EXPORT	|_fclk_MCSPI4| [ DATA ]
	EXPORT	|_fclk_GPT10| [ DATA ]
	EXPORT	|_fclk_GPT11| [ DATA ]
	EXPORT	|_fclk_USBTLL| [ DATA ]
	EXPORT	|_fclk_CPEFUSE| [ DATA ]
	EXPORT	|_fclk_TS| [ DATA ]
	EXPORT	|_fclk_GPT1| [ DATA ]
	EXPORT	|_fclk_GPIO1| [ DATA ]
	EXPORT	|_fclk_WDT2| [ DATA ]
	EXPORT	|_fclk_USIM| [ DATA ]
	EXPORT	|_fclk_SR1| [ DATA ]
	EXPORT	|_fclk_SR2| [ DATA ]
	EXPORT	|_fclk_WDT3| [ DATA ]
	EXPORT	|_fclk_UART3| [ DATA ]
	EXPORT	|_fclk_GPIO2| [ DATA ]
	EXPORT	|_fclk_GPIO3| [ DATA ]
	EXPORT	|_fclk_GPIO4| [ DATA ]
	EXPORT	|_fclk_GPIO5| [ DATA ]
	EXPORT	|_fclk_GPIO6| [ DATA ]
	EXPORT	|_fclk_MCBSP2| [ DATA ]
	EXPORT	|_fclk_MCBSP3| [ DATA ]
	EXPORT	|_fclk_MCBSP4| [ DATA ]
	EXPORT	|_fclk_GPT2| [ DATA ]
	EXPORT	|_fclk_GPT3| [ DATA ]
	EXPORT	|_fclk_GPT4| [ DATA ]
	EXPORT	|_fclk_GPT5| [ DATA ]
	EXPORT	|_fclk_GPT6| [ DATA ]
	EXPORT	|_fclk_GPT7| [ DATA ]
	EXPORT	|_fclk_GPT8| [ DATA ]
	EXPORT	|_fclk_GPT9| [ DATA ]
	EXPORT	|_fclk_UART4| [ DATA ]
	EXPORT	|_fclk_DSS| [ DATA ]
	EXPORT	|_fclk_DSS1| [ DATA ]
	EXPORT	|_fclk_DSS2| [ DATA ]
	EXPORT	|_fclk_TVOUT| [ DATA ]
	EXPORT	|_fclk_CAM| [ DATA ]
	EXPORT	|_fclk_CSI2| [ DATA ]
	EXPORT	|_fclk_3D| [ DATA ]
	EXPORT	|_fclk_SGX| [ DATA ]
	EXPORT	|_fclk_IVA2| [ DATA ]
	EXPORT	|_fclk_HSUSB2| [ DATA ]
	EXPORT	|_fclk_HSUSB1| [ DATA ]
	EXPORT	|_fclk_USBHOST1| [ DATA ]
	EXPORT	|_fclk_USBHOST2| [ DATA ]
	EXPORT	|_fclk_USBHOST3| [ DATA ]
	EXPORT	|_wken_D2D| [ DATA ]
	EXPORT	|_wken_I2C1| [ DATA ]
	EXPORT	|_wken_I2C2| [ DATA ]
	EXPORT	|_wken_I2C3| [ DATA ]
	EXPORT	|_wken_MMC1| [ DATA ]
	EXPORT	|_wken_MMC2| [ DATA ]
	EXPORT	|_wken_MMC3| [ DATA ]
	EXPORT	|_wken_UART1| [ DATA ]
	EXPORT	|_wken_UART2| [ DATA ]
	EXPORT	|_wken_MCBSP1| [ DATA ]
	EXPORT	|_wken_MCBSP5| [ DATA ]
	EXPORT	|_wken_MCSPI1| [ DATA ]
	EXPORT	|_wken_MCSPI2| [ DATA ]
	EXPORT	|_wken_MCSPI3| [ DATA ]
	EXPORT	|_wken_MCSPI4| [ DATA ]
	EXPORT	|_wken_GPT10| [ DATA ]
	EXPORT	|_wken_GPT11| [ DATA ]
	EXPORT	|_wken_HSOTGUSB| [ DATA ]
	EXPORT	|_wken_USBTLL| [ DATA ]
	EXPORT	|_wken_GPT1| [ DATA ]
	EXPORT	|_wken_GPIO1| [ DATA ]
	EXPORT	|_wken_SR1| [ DATA ]
	EXPORT	|_wken_SR2| [ DATA ]
	EXPORT	|_wken_IO| [ DATA ]
	EXPORT	|_wken_USIM| [ DATA ]
	EXPORT	|_wken_UART3| [ DATA ]
	EXPORT	|_wken_GPIO2| [ DATA ]
	EXPORT	|_wken_GPIO3| [ DATA ]
	EXPORT	|_wken_GPIO4| [ DATA ]
	EXPORT	|_wken_GPIO5| [ DATA ]
	EXPORT	|_wken_GPIO6| [ DATA ]
	EXPORT	|_wken_MCBSP2| [ DATA ]
	EXPORT	|_wken_MCBSP3| [ DATA ]
	EXPORT	|_wken_MCBSP4| [ DATA ]
	EXPORT	|_wken_GPT2| [ DATA ]
	EXPORT	|_wken_GPT3| [ DATA ]
	EXPORT	|_wken_GPT4| [ DATA ]
	EXPORT	|_wken_GPT5| [ DATA ]
	EXPORT	|_wken_GPT6| [ DATA ]
	EXPORT	|_wken_GPT7| [ DATA ]
	EXPORT	|_wken_GPT8| [ DATA ]
	EXPORT	|_wken_GPT9| [ DATA ]
	EXPORT	|_wken_UART4| [ DATA ]
	EXPORT	|_wken_DSS| [ DATA ]
	EXPORT	|_wken_USBHOST| [ DATA ]
	EXPORT	|s_rgDeviceLookupTable| [ DATA ]

  00000			 AREA	 |.bss|, NOINIT
|_fclk_USBHOST1| % 0x10
|_fclk_USBHOST2| % 0x10
|_fclk_USBHOST3| % 0x10
|s_rgActiveDomainDeviceCount| % 0x34

  00000			 AREA	 |.data|, DATA
|_SR_SourceClock| DCD 0x1
	DCD	0x13
|_USIM_SourceClock| DCD 0x1
	DCD	0x13
|_CPEFUSE_SourceClock| DCD 0x1
	DCD	0x12
|_SSI_SourceClock| DCD 0x2
	DCD	0x38
	DCD	0x39
|_MCBSP1_SourceClock| DCD 0x1
	DCD	0x55
|_MCBSP2_SourceClock| DCD 0x1
	DCD	0x56
|_MCBSP3_SourceClock| DCD 0x1
	DCD	0x57
|_MCBSP4_SourceClock| DCD 0x1
	DCD	0x58
|_MCBSP5_SourceClock| DCD 0x1
	DCD	0x59
|_MMC1_SourceClock| DCD 0x2
	DCD	0x46
	DCD	0x1d
|_MMC2_SourceClock| DCD 0x2
	DCD	0x46
	DCD	0x1d
|_MMC3_SourceClock| DCD 0x2
	DCD	0x46
	DCD	0x1d
|_GPT1_SourceClock| DCD 0x1
	DCD	0x4a
|_GPT2_SourceClock| DCD 0x1
	DCD	0x4b
|_GPT3_SourceClock| DCD 0x1
	DCD	0x4c
|_GPT4_SourceClock| DCD 0x1
	DCD	0x4d
|_GPT5_SourceClock| DCD 0x1
	DCD	0x4e
|_GPT6_SourceClock| DCD 0x1
	DCD	0x4f
|_GPT7_SourceClock| DCD 0x1
	DCD	0x50
|_GPT8_SourceClock| DCD 0x1
	DCD	0x51
|_GPT9_SourceClock| DCD 0x1
	DCD	0x52
|_GPT10_SourceClock| DCD 0x1
	DCD	0x53
|_GPT11_SourceClock| DCD 0x1
	DCD	0x54
|_GPT12_SourceClock| DCD 0x1
	DCD	0xe
|_DSS1_SourceClock| DCD 0x1
	DCD	0x7
|_DSS2_SourceClock| DCD 0x1
	DCD	0x1a
|_SGX_SourceClock| DCD 0x1
	DCD	0x49
|_CSI2_SourceClock| DCD 0x1
	DCD	0x3c
|_CAM_SourceClock| DCD 0x2
	DCD	0x32
	DCD	0x8
|_TV_SourceClock| DCD 0x2
	DCD	0x42
	DCD	0x3b
|_DSS_SourceClock| DCD 0x2
	DCD	0x7
	DCD	0x1a
|_USBOTG_SourceClock| DCD 0x3
	DCD	0x11
	DCD	0x43
	DCD	0x3e
|_USBHOST1_SourceClock| DCD 0x4
	DCD	0x3e
	DCD	0x34
	DCD	0x35
	DCD	0x43
|_USBHOST2_SourceClock| DCD 0x4
	DCD	0x3e
	DCD	0x34
	DCD	0x35
	DCD	0x43
|_USBHOST3_SourceClock| DCD 0x4
	DCD	0x3e
	DCD	0x34
	DCD	0x35
	DCD	0x43
|_32KWakeup_SourceClock| DCD 0x1
	DCD	0x1e
|_PER_48M_SourceClock| DCD 0x1
	DCD	0x3f
|_PER_32K_SourceClock| DCD 0x1
	DCD	0x1f
|_COREL3_SourceClock| DCD 0x1
	DCD	0x29
|_COREL4_SourceClock| DCD 0x1
	DCD	0x24
|_120M_SourceClock| DCD 0x1
	DCD	0xa
|_96M_SourceClock| DCD 0x1
	DCD	0x46
|_48M_SourceClock| DCD 0x1
	DCD	0x47
|_12M_SourceClock| DCD 0x1
	DCD	0x40
|_32K_SourceClock| DCD 0x1
	DCD	0xb
|_autoIdle_D2D| DCD 0x0
	DCD	0x8
	DCD	0x30
|_autoIdle_SSI| DCD 0x0
	DCD	0x1
	DCD	0x30
|_autoIdle_HDQ| DCD 0x0
	DCD	0x400000
	DCD	0x30
|_autoIdle_ICR| DCD 0x0
	DCD	0x20000000
	DCD	0x30
|_autoIdle_I2C1| DCD 0x0
	DCD	0x8000
	DCD	0x30
|_autoIdle_I2C2| DCD 0x0
	DCD	0x10000
	DCD	0x30
|_autoIdle_I2C3| DCD 0x0
	DCD	0x20000
	DCD	0x30
|_autoIdle_MMC1| DCD 0x0
	DCD	0x1000000
	DCD	0x30
|_autoIdle_MMC2| DCD 0x0
	DCD	0x2000000
	DCD	0x30
|_autoIdle_MMC3| DCD 0x0
	DCD	0x40000000
	DCD	0x30
|_autoIdle_AES2| DCD 0x0
	DCD	0x10000000
	DCD	0x30
|_autoIdle_DES2| DCD 0x0
	DCD	0x4000000
	DCD	0x30
|_autoIdle_UART1| DCD 0x0
	DCD	0x2000
	DCD	0x30
|_autoIdle_UART2| DCD 0x0
	DCD	0x4000
	DCD	0x30
|_autoIdle_MSPRO| DCD 0x0
	DCD	0x800000
	DCD	0x30
|_autoIdle_SHA12| DCD 0x0
	DCD	0x8000000
	DCD	0x30
|_autoIdle_MCBSP1| DCD 0x0
	DCD	0x200
	DCD	0x30
|_autoIdle_MCBSP5| DCD 0x0
	DCD	0x400
	DCD	0x30
|_autoIdle_MCSPI1| DCD 0x0
	DCD	0x40000
	DCD	0x30
|_autoIdle_MCSPI2| DCD 0x0
	DCD	0x80000
	DCD	0x30
|_autoIdle_MCSPI3| DCD 0x0
	DCD	0x100000
	DCD	0x30
|_autoIdle_MCSPI4| DCD 0x0
	DCD	0x200000
	DCD	0x30
|_autoIdle_GPT10| DCD 0x0
	DCD	0x800
	DCD	0x30
|_autoIdle_GPT11| DCD 0x0
	DCD	0x1000
	DCD	0x30
|_autoIdle_OMAPCTRL| DCD 0x0
	DCD	0x40
	DCD	0x30
|_autoIdle_HSOTGUSB| DCD 0x0
	DCD	0x10
	DCD	0x30
|_autoIdle_MAILBOXES| DCD 0x0
	DCD	0x80
	DCD	0x30
|_autoIdle_PKA| DCD 0x0
	DCD	0x10
	DCD	0x34
|_autoIdle_RNG| DCD 0x0
	DCD	0x4
	DCD	0x34
|_autoIdle_AES1| DCD 0x0
	DCD	0x8
	DCD	0x34
|_autoIdle_DES1| DCD 0x0
	DCD	0x1
	DCD	0x34
|_autoIdle_SHA11| DCD 0x0
	DCD	0x2
	DCD	0x34
|_autoIdle_USBTLL| DCD 0x0
	DCD	0x4
	DCD	0x38
|_autoIdle_GPT1| DCD 0x0
	DCD	0x1
	DCD	0x30
|_autoIdle_GPT12| DCD 0x0
	DCD	0x2
	DCD	0x30
|_autoIdle_32KSYNC| DCD 0x0
	DCD	0x4
	DCD	0x30
|_autoIdle_GPIO1| DCD 0x0
	DCD	0x8
	DCD	0x30
|_autoIdle_WDT1| DCD 0x0
	DCD	0x10
	DCD	0x30
|_autoIdle_WDT2| DCD 0x0
	DCD	0x20
	DCD	0x30
|_autoIdle_USIM| DCD 0x0
	DCD	0x200
	DCD	0x30
|_autoIdle_WDT3| DCD 0x0
	DCD	0x1000
	DCD	0x30
|_autoIdle_GPT2| DCD 0x0
	DCD	0x8
	DCD	0x30
|_autoIdle_GPT3| DCD 0x0
	DCD	0x10
	DCD	0x30
|_autoIdle_GPT4| DCD 0x0
	DCD	0x20
	DCD	0x30
|_autoIdle_GPT5| DCD 0x0
	DCD	0x40
	DCD	0x30
|_autoIdle_GPT6| DCD 0x0
	DCD	0x80
	DCD	0x30
|_autoIdle_GPT7| DCD 0x0
	DCD	0x100
	DCD	0x30
|_autoIdle_GPT8| DCD 0x0
	DCD	0x200
	DCD	0x30
|_autoIdle_GPT9| DCD 0x0
	DCD	0x400
	DCD	0x30
|_autoIdle_UART3| DCD 0x0
	DCD	0x800
	DCD	0x30
|_autoIdle_GPIO2| DCD 0x0
	DCD	0x2000
	DCD	0x30
|_autoIdle_GPIO3| DCD 0x0
	DCD	0x4000
	DCD	0x30
|_autoIdle_GPIO4| DCD 0x0
	DCD	0x8000
	DCD	0x30
|_autoIdle_GPIO5| DCD 0x0
	DCD	0x10000
	DCD	0x30
|_autoIdle_GPIO6| DCD 0x0
	DCD	0x20000
	DCD	0x30
|_autoIdle_MCBSP2| DCD 0x0
	DCD	0x1
	DCD	0x30
|_autoIdle_MCBSP3| DCD 0x0
	DCD	0x2
	DCD	0x30
|_autoIdle_MCBSP4| DCD 0x0
	DCD	0x4
	DCD	0x30
|_autoIdle_UART4| DCD 0x0
	DCD	0x40000
	DCD	0x30
|_autoIdle_DSS| DCD 0x0
	DCD	0x1
	DCD	0x30
|_autoIdle_CAM| DCD 0x0
	DCD	0x1
	DCD	0x30
|_autoIdle_USBHOST| DCD 0x0
	DCD	0x1
	DCD	0x30
|_idleStat_D2D| DCD 0x8
	DCD	0x20
|_idleStat_SSI| DCD 0x1
	DCD	0x20
|_idleStat_HDQ| DCD 0x400000
	DCD	0x20
|_idleStat_ICR| DCD 0x20000000
	DCD	0x20
|_idleStat_SDRC| DCD 0x2
	DCD	0x20
|_idleStat_I2C1| DCD 0x8000
	DCD	0x20
|_idleStat_I2C2| DCD 0x10000
	DCD	0x20
|_idleStat_I2C3| DCD 0x20000
	DCD	0x20
|_idleStat_MMC1| DCD 0x1000000
	DCD	0x20
|_idleStat_MMC2| DCD 0x2000000
	DCD	0x20
|_idleStat_MMC3| DCD 0x40000000
	DCD	0x20
|_idleStat_AES2| DCD 0x10000000
	DCD	0x20
|_idleStat_DES2| DCD 0x4000000
	DCD	0x20
|_idleStat_UART1| DCD 0x2000
	DCD	0x20
|_idleStat_UART2| DCD 0x4000
	DCD	0x20
|_idleStat_MSPRO| DCD 0x800000
	DCD	0x20
|_idleStat_SHA12| DCD 0x8000000
	DCD	0x20
|_idleStat_MCBSP1| DCD 0x200
	DCD	0x20
|_idleStat_MCBSP5| DCD 0x400
	DCD	0x20
|_idleStat_MCSPI1| DCD 0x40000
	DCD	0x20
|_idleStat_MCSPI2| DCD 0x80000
	DCD	0x20
|_idleStat_MCSPI3| DCD 0x100000
	DCD	0x20
|_idleStat_MCSPI4| DCD 0x200000
	DCD	0x20
|_idleStat_GPT10| DCD 0x800
	DCD	0x20
|_idleStat_GPT11| DCD 0x1000
	DCD	0x20
|_idleStat_HSOTGUSB| DCD 0x20
	DCD	0x20
|_idleStat_OMAPCTRL| DCD 0x40
	DCD	0x20
|_idleStat_MAILBOXES| DCD 0x80
	DCD	0x20
|_idleStat_PKA| DCD 0x10
	DCD	0x24
|_idleStat_RNG| DCD 0x4
	DCD	0x24
|_idleStat_AES1| DCD 0x8
	DCD	0x24
|_idleStat_DES1| DCD 0x1
	DCD	0x24
|_idleStat_SHA11| DCD 0x2
	DCD	0x24
|_idleStat_USBTLL| DCD 0x4
	DCD	0x28
|_idleStat_CPEFUSE| DCD 0x1
	DCD	0x28
|_idleStat_GPT1| DCD 0x1
	DCD	0x20
|_idleStat_GPT12| DCD 0x2
	DCD	0x20
|_idleStat_32KSYNC| DCD 0x4
	DCD	0x20
|_idleStat_GPIO1| DCD 0x8
	DCD	0x20
|_idleStat_WDT1| DCD 0x10
	DCD	0x20
|_idleStat_WDT2| DCD 0x20
	DCD	0x20
|_idleStat_USIM| DCD 0x200
	DCD	0x20
|_idleStat_SR1| DCD 0x40
	DCD	0x20
|_idleStat_SR2| DCD 0x80
	DCD	0x20
|_idleStat_WDT3| DCD 0x1000
	DCD	0x20
|_idleStat_UART3| DCD 0x800
	DCD	0x20
|_idleStat_GPIO2| DCD 0x2000
	DCD	0x20
|_idleStat_GPIO3| DCD 0x4000
	DCD	0x20
|_idleStat_GPIO4| DCD 0x8000
	DCD	0x20
|_idleStat_GPIO5| DCD 0x10000
	DCD	0x20
|_idleStat_GPIO6| DCD 0x20000
	DCD	0x20
|_idleStat_MCBSP2| DCD 0x1
	DCD	0x20
|_idleStat_MCBSP3| DCD 0x2
	DCD	0x20
|_idleStat_MCBSP4| DCD 0x4
	DCD	0x20
|_idleStat_GPT2| DCD 0x8
	DCD	0x20
|_idleStat_GPT3| DCD 0x10
	DCD	0x20
|_idleStat_GPT4| DCD 0x20
	DCD	0x20
|_idleStat_GPT5| DCD 0x40
	DCD	0x20
|_idleStat_GPT6| DCD 0x80
	DCD	0x20
|_idleStat_GPT7| DCD 0x100
	DCD	0x20
|_idleStat_GPT8| DCD 0x200
	DCD	0x20
|_idleStat_GPT9| DCD 0x400
	DCD	0x20
|_idleStat_UART4| DCD 0x40000
	DCD	0x20
|_idleStat_DSS| DCD 0x2
	DCD	0x20
|_idleStat_CAM| DCD 0x1
	DCD	0x20
|_idleStat_SGX| DCD 0x1
	DCD	0x20
|_idleStat_IVA2| DCD 0x1
	DCD	0x20
|_idleStat_USBHOST| DCD 0x2
	DCD	0x20
|_iclk_D2D| DCD	0x0
	DCD	0x8
	DCD	0x10
	DCD	0x0
|_iclk_SSI| DCD	0x0
	DCD	0x1
	DCD	0x10
	DCD	0x0
|_iclk_HDQ| DCD	0x0
	DCD	0x400000
	DCD	0x10
	DCD	0x0
|_iclk_ICR| DCD	0x0
	DCD	0x20000000
	DCD	0x10
	DCD	0x0
|_iclk_SDRC| DCD 0x0
	DCD	0x2
	DCD	0x10
	DCD	0x0
|_iclk_I2C1| DCD 0x0
	DCD	0x8000
	DCD	0x10
	DCD	0x0
|_iclk_I2C2| DCD 0x0
	DCD	0x10000
	DCD	0x10
	DCD	0x0
|_iclk_I2C3| DCD 0x0
	DCD	0x20000
	DCD	0x10
	DCD	0x0
|_iclk_MMC1| DCD 0x0
	DCD	0x1000000
	DCD	0x10
	DCD	0x0
|_iclk_MMC2| DCD 0x0
	DCD	0x2000000
	DCD	0x10
	DCD	0x0
|_iclk_MMC3| DCD 0x0
	DCD	0x40000000
	DCD	0x10
	DCD	0x0
|_iclk_AES2| DCD 0x0
	DCD	0x10000000
	DCD	0x10
	DCD	0x0
|_iclk_DES2| DCD 0x0
	DCD	0x4000000
	DCD	0x10
	DCD	0x0
|_iclk_UART1| DCD 0x0
	DCD	0x2000
	DCD	0x10
	DCD	0x0
|_iclk_UART2| DCD 0x0
	DCD	0x4000
	DCD	0x10
	DCD	0x0
|_iclk_MSPRO| DCD 0x0
	DCD	0x800000
	DCD	0x10
	DCD	0x0
|_iclk_SHA12| DCD 0x0
	DCD	0x8000000
	DCD	0x10
	DCD	0x0
|_iclk_MCBSP1| DCD 0x0
	DCD	0x200
	DCD	0x10
	DCD	0x0
|_iclk_MCBSP5| DCD 0x0
	DCD	0x400
	DCD	0x10
	DCD	0x0
|_iclk_MCSPI1| DCD 0x0
	DCD	0x40000
	DCD	0x10
	DCD	0x0
|_iclk_MCSPI2| DCD 0x0
	DCD	0x80000
	DCD	0x10
	DCD	0x0
|_iclk_MCSPI3| DCD 0x0
	DCD	0x100000
	DCD	0x10
	DCD	0x0
|_iclk_MCSPI4| DCD 0x0
	DCD	0x200000
	DCD	0x10
	DCD	0x0
|_iclk_GPT10| DCD 0x0
	DCD	0x800
	DCD	0x10
	DCD	0x0
|_iclk_GPT11| DCD 0x0
	DCD	0x1000
	DCD	0x10
	DCD	0x0
|_iclk_OMAPCTRL| DCD 0x0
	DCD	0x40
	DCD	0x10
	DCD	0x0
|_iclk_HSOTGUSB| DCD 0x0
	DCD	0x10
	DCD	0x10
	DCD	0x0
|_iclk_MAILBOXES| DCD 0x0
	DCD	0x80
	DCD	0x10
	DCD	0x0
|_iclk_PKA| DCD	0x0
	DCD	0x10
	DCD	0x14
	DCD	0x0
|_iclk_RNG| DCD	0x0
	DCD	0x4
	DCD	0x14
	DCD	0x0
|_iclk_AES1| DCD 0x0
	DCD	0x8
	DCD	0x14
	DCD	0x0
|_iclk_DES1| DCD 0x0
	DCD	0x1
	DCD	0x14
	DCD	0x0
|_iclk_SHA11| DCD 0x0
	DCD	0x2
	DCD	0x14
	DCD	0x0
|_iclk_USBTLL| DCD 0x0
	DCD	0x4
	DCD	0x18
	DCD	0x0
|_iclk_VRFB| DCD 0x0
	DCD	0x10000
	DCD	0x18
	DCD	0x1
|_iclk_GPT1| DCD 0x0
	DCD	0x1
	DCD	0x10
	DCD	0x0
|_iclk_GPT12| DCD 0x0
	DCD	0x2
	DCD	0x10
	DCD	0x0
|_iclk_32KSYNC| DCD 0x0
	DCD	0x4
	DCD	0x10
	DCD	0x0
|_iclk_GPIO1| DCD 0x0
	DCD	0x8
	DCD	0x10
	DCD	0x0
|_iclk_WDT1| DCD 0x0
	DCD	0x10
	DCD	0x10
	DCD	0x0
|_iclk_WDT2| DCD 0x0
	DCD	0x20
	DCD	0x10
	DCD	0x0
|_iclk_USIM| DCD 0x0
	DCD	0x200
	DCD	0x10
	DCD	0x0
|_iclk_WDT3| DCD 0x0
	DCD	0x1000
	DCD	0x10
	DCD	0x0
|_iclk_GPT2| DCD 0x0
	DCD	0x8
	DCD	0x10
	DCD	0x0
|_iclk_GPT3| DCD 0x0
	DCD	0x10
	DCD	0x10
	DCD	0x0
|_iclk_GPT4| DCD 0x0
	DCD	0x20
	DCD	0x10
	DCD	0x0
|_iclk_GPT5| DCD 0x0
	DCD	0x40
	DCD	0x10
	DCD	0x0
|_iclk_GPT6| DCD 0x0
	DCD	0x80
	DCD	0x10
	DCD	0x0
|_iclk_GPT7| DCD 0x0
	DCD	0x100
	DCD	0x10
	DCD	0x0
|_iclk_GPT8| DCD 0x0
	DCD	0x200
	DCD	0x10
	DCD	0x0
|_iclk_GPT9| DCD 0x0
	DCD	0x400
	DCD	0x10
	DCD	0x0
|_iclk_UART3| DCD 0x0
	DCD	0x800
	DCD	0x10
	DCD	0x0
|_iclk_GPIO2| DCD 0x0
	DCD	0x2000
	DCD	0x10
	DCD	0x0
|_iclk_GPIO3| DCD 0x0
	DCD	0x4000
	DCD	0x10
	DCD	0x0
|_iclk_GPIO4| DCD 0x0
	DCD	0x8000
	DCD	0x10
	DCD	0x0
|_iclk_GPIO5| DCD 0x0
	DCD	0x10000
	DCD	0x10
	DCD	0x0
|_iclk_GPIO6| DCD 0x0
	DCD	0x20000
	DCD	0x10
	DCD	0x0
|_iclk_MCBSP2| DCD 0x0
	DCD	0x1
	DCD	0x10
	DCD	0x0
|_iclk_MCBSP3| DCD 0x0
	DCD	0x2
	DCD	0x10
	DCD	0x0
|_iclk_MCBSP4| DCD 0x0
	DCD	0x4
	DCD	0x10
	DCD	0x0
|_iclk_UART4| DCD 0x0
	DCD	0x40000
	DCD	0x10
	DCD	0x0
|_iclk_DSS| DCD	0x0
	DCD	0x1
	DCD	0x10
	DCD	0x0
|_iclk_CAM| DCD	0x0
	DCD	0x1
	DCD	0x10
	DCD	0x0
|_iclk_IVA2| DCD 0x0
	DCD	0x10000
	DCD	0x10
	DCD	0x1
|_iclk_SGX| DCD	0x0
	DCD	0x1
	DCD	0x10
	DCD	0x0
|_iclk_USBHOST| DCD 0x0
	DCD	0x1
	DCD	0x10
	DCD	0x0
|_iclk_USBHOST1| DCD 0x0
	DCD	0x0
	DCD	0x10
	DCD	0x0
|_iclk_USBHOST2| DCD 0x0
	DCD	0x0
	DCD	0x10
	DCD	0x0
|_iclk_USBHOST3| DCD 0x0
	DCD	0x0
	DCD	0x10
	DCD	0x0
|_fclk_D2D| DCD	0x0
	DCD	0x8
	DCD	0x0
	DCD	0x0
|_fclk_SSI| DCD	0x0
	DCD	0x1
	DCD	0x0
	DCD	0x0
|_fclk_HDQ| DCD	0x0
	DCD	0x400000
	DCD	0x0
	DCD	0x0
|_fclk_I2C1| DCD 0x0
	DCD	0x8000
	DCD	0x0
	DCD	0x0
|_fclk_I2C2| DCD 0x0
	DCD	0x10000
	DCD	0x0
	DCD	0x0
|_fclk_I2C3| DCD 0x0
	DCD	0x20000
	DCD	0x0
	DCD	0x0
|_fclk_MMC1| DCD 0x0
	DCD	0x1000000
	DCD	0x0
	DCD	0x0
|_fclk_MMC2| DCD 0x0
	DCD	0x2000000
	DCD	0x0
	DCD	0x0
|_fclk_MMC3| DCD 0x0
	DCD	0x40000000
	DCD	0x0
	DCD	0x0
|_fclk_UART1| DCD 0x0
	DCD	0x2000
	DCD	0x0
	DCD	0x0
|_fclk_UART2| DCD 0x0
	DCD	0x4000
	DCD	0x0
	DCD	0x0
|_fclk_MSPRO| DCD 0x0
	DCD	0x800000
	DCD	0x0
	DCD	0x0
|_fclk_MCBSP1| DCD 0x0
	DCD	0x200
	DCD	0x0
	DCD	0x0
|_fclk_MCBSP5| DCD 0x0
	DCD	0x400
	DCD	0x0
	DCD	0x0
|_fclk_MCSPI1| DCD 0x0
	DCD	0x40000
	DCD	0x0
	DCD	0x0
|_fclk_MCSPI2| DCD 0x0
	DCD	0x80000
	DCD	0x0
	DCD	0x0
|_fclk_MCSPI3| DCD 0x0
	DCD	0x100000
	DCD	0x0
	DCD	0x0
|_fclk_MCSPI4| DCD 0x0
	DCD	0x200000
	DCD	0x0
	DCD	0x0
|_fclk_GPT10| DCD 0x0
	DCD	0x800
	DCD	0x0
	DCD	0x0
|_fclk_GPT11| DCD 0x0
	DCD	0x1000
	DCD	0x0
	DCD	0x0
|_fclk_USBTLL| DCD 0x0
	DCD	0x4
	DCD	0x8
	DCD	0x0
|_fclk_CPEFUSE| DCD 0x0
	DCD	0x1
	DCD	0x8
	DCD	0x0
|_fclk_TS| DCD	0x0
	DCD	0x2
	DCD	0x8
	DCD	0x0
|_fclk_GPT1| DCD 0x0
	DCD	0x1
	DCD	0x0
	DCD	0x0
|_fclk_GPIO1| DCD 0x0
	DCD	0x8
	DCD	0x0
	DCD	0x0
|_fclk_WDT2| DCD 0x0
	DCD	0x20
	DCD	0x0
	DCD	0x0
|_fclk_USIM| DCD 0x0
	DCD	0x200
	DCD	0x0
	DCD	0x0
|_fclk_SR1| DCD	0x0
	DCD	0x40
	DCD	0x0
	DCD	0x0
|_fclk_SR2| DCD	0x0
	DCD	0x80
	DCD	0x0
	DCD	0x0
|_fclk_WDT3| DCD 0x0
	DCD	0x1000
	DCD	0x0
	DCD	0x0
|_fclk_UART3| DCD 0x0
	DCD	0x800
	DCD	0x0
	DCD	0x0
|_fclk_GPIO2| DCD 0x0
	DCD	0x2000
	DCD	0x0
	DCD	0x0
|_fclk_GPIO3| DCD 0x0
	DCD	0x4000
	DCD	0x0
	DCD	0x0
|_fclk_GPIO4| DCD 0x0
	DCD	0x8000
	DCD	0x0
	DCD	0x0
|_fclk_GPIO5| DCD 0x0
	DCD	0x10000
	DCD	0x0
	DCD	0x0
|_fclk_GPIO6| DCD 0x0
	DCD	0x20000
	DCD	0x0
	DCD	0x0
|_fclk_MCBSP2| DCD 0x0
	DCD	0x1
	DCD	0x0
	DCD	0x0
|_fclk_MCBSP3| DCD 0x0
	DCD	0x2
	DCD	0x0
	DCD	0x0
|_fclk_MCBSP4| DCD 0x0
	DCD	0x4
	DCD	0x0
	DCD	0x0
|_fclk_GPT2| DCD 0x0
	DCD	0x8
	DCD	0x0
	DCD	0x0
|_fclk_GPT3| DCD 0x0
	DCD	0x10
	DCD	0x0
	DCD	0x0
|_fclk_GPT4| DCD 0x0
	DCD	0x20
	DCD	0x0
	DCD	0x0
|_fclk_GPT5| DCD 0x0
	DCD	0x40
	DCD	0x0
	DCD	0x0
|_fclk_GPT6| DCD 0x0
	DCD	0x80
	DCD	0x0
	DCD	0x0
|_fclk_GPT7| DCD 0x0
	DCD	0x100
	DCD	0x0
	DCD	0x0
|_fclk_GPT8| DCD 0x0
	DCD	0x200
	DCD	0x0
	DCD	0x0
|_fclk_GPT9| DCD 0x0
	DCD	0x400
	DCD	0x0
	DCD	0x0
|_fclk_UART4| DCD 0x0
	DCD	0x40000
	DCD	0x0
	DCD	0x0
|_fclk_DSS| DCD	0x0
	DCD	0x1
	DCD	0x0
	DCD	0x0
|_fclk_DSS1| DCD 0x0
	DCD	0x1
	DCD	0x0
	DCD	0x0
|_fclk_DSS2| DCD 0x0
	DCD	0x2
	DCD	0x0
	DCD	0x0
|_fclk_TVOUT| DCD 0x0
	DCD	0x4
	DCD	0x0
	DCD	0x0
|_fclk_CAM| DCD	0x0
	DCD	0x1
	DCD	0x0
	DCD	0x0
|_fclk_CSI2| DCD 0x0
	DCD	0x2
	DCD	0x0
	DCD	0x0
|_fclk_3D| DCD	0x0
	DCD	0x4
	DCD	0x0
	DCD	0x0
|_fclk_SGX| DCD	0x0
	DCD	0x2
	DCD	0x0
	DCD	0x0
|_fclk_IVA2| DCD 0x0
	DCD	0x1
	DCD	0x0
	DCD	0x0
|_fclk_HSUSB2| DCD 0x0
	DCD	0x2
	DCD	0x0
	DCD	0x0
|_fclk_HSUSB1| DCD 0x0
	DCD	0x1
	DCD	0x0
	DCD	0x0
|_wken_D2D| DCD	0x8
	DCD	0xa0
|_wken_I2C1| DCD 0x8000
	DCD	0xa0
|_wken_I2C2| DCD 0x10000
	DCD	0xa0
|_wken_I2C3| DCD 0x20000
	DCD	0xa0
|_wken_MMC1| DCD 0x1000000
	DCD	0xa0
|_wken_MMC2| DCD 0x2000000
	DCD	0xa0
|_wken_MMC3| DCD 0x40000000
	DCD	0xa0
|_wken_UART1| DCD 0x2000
	DCD	0xa0
|_wken_UART2| DCD 0x4000
	DCD	0xa0
|_wken_MCBSP1| DCD 0x200
	DCD	0xa0
|_wken_MCBSP5| DCD 0x400
	DCD	0xa0
|_wken_MCSPI1| DCD 0x40000
	DCD	0xa0
|_wken_MCSPI2| DCD 0x80000
	DCD	0xa0
|_wken_MCSPI3| DCD 0x100000
	DCD	0xa0
|_wken_MCSPI4| DCD 0x200000
	DCD	0xa0
|_wken_GPT10| DCD 0x800
	DCD	0xa0
|_wken_GPT11| DCD 0x1000
	DCD	0xa0
|_wken_HSOTGUSB| DCD 0x10
	DCD	0xa0
|_wken_USBTLL| DCD 0x4
	DCD	0xf0
|_wken_GPT1| DCD 0x1
	DCD	0xa0
|_wken_GPIO1| DCD 0x8
	DCD	0xa0
|_wken_SR1| DCD	0x40
	DCD	0xa0
|_wken_SR2| DCD	0x80
	DCD	0xa0
|_wken_IO| DCD	0x100
	DCD	0xa0
|_wken_USIM| DCD 0x200
	DCD	0xa0
|_wken_UART3| DCD 0x800
	DCD	0xa0
|_wken_GPIO2| DCD 0x2000
	DCD	0xa0
|_wken_GPIO3| DCD 0x4000
	DCD	0xa0
|_wken_GPIO4| DCD 0x8000
	DCD	0xa0
|_wken_GPIO5| DCD 0x10000
	DCD	0xa0
|_wken_GPIO6| DCD 0x20000
	DCD	0xa0
|_wken_MCBSP2| DCD 0x1
	DCD	0xa0
|_wken_MCBSP3| DCD 0x2
	DCD	0xa0
|_wken_MCBSP4| DCD 0x4
	DCD	0xa0
|_wken_GPT2| DCD 0x8
	DCD	0xa0
|_wken_GPT3| DCD 0x10
	DCD	0xa0
|_wken_GPT4| DCD 0x20
	DCD	0xa0
|_wken_GPT5| DCD 0x40
	DCD	0xa0
|_wken_GPT6| DCD 0x80
	DCD	0xa0
|_wken_GPT7| DCD 0x100
	DCD	0xa0
|_wken_GPT8| DCD 0x200
	DCD	0xa0
|_wken_GPT9| DCD 0x400
	DCD	0xa0
|_wken_UART4| DCD 0x40000
	DCD	0xa0
|_wken_DSS| DCD	0x1
	DCD	0xa0
|_wken_USBHOST| DCD 0x1
	DCD	0xa0
|s_rgDeviceLookupTable| DCD 0x1
	DCD	|_fclk_SSI|
	DCD	|_iclk_SSI|
	DCD	0x0
	DCD	|_idleStat_SSI|
	DCD	|_autoIdle_SSI|
	DCD	|_SSI_SourceClock|
	DCD	0x1
	DCD	0x0
	DCD	|_iclk_SDRC|
	DCD	0x0
	DCD	|_idleStat_SDRC|
	DCD	0x0
	DCD	|_COREL3_SourceClock|
	DCD	0x1
	DCD	|_fclk_D2D|
	DCD	|_iclk_D2D|
	DCD	|_wken_D2D|
	DCD	|_idleStat_D2D|
	DCD	|_autoIdle_D2D|
	DCD	0x0
	DCD	0x1
	DCD	0x0
	DCD	|_iclk_HSOTGUSB|
	DCD	|_wken_HSOTGUSB|
	DCD	|_idleStat_HSOTGUSB|
	DCD	|_autoIdle_HSOTGUSB|
	DCD	|_USBOTG_SourceClock|
	DCD	0x1
	DCD	0x0
	DCD	|_iclk_OMAPCTRL|
	DCD	0x0
	DCD	|_idleStat_OMAPCTRL|
	DCD	|_autoIdle_OMAPCTRL|
	DCD	|_COREL4_SourceClock|
	DCD	0x1
	DCD	0x0
	DCD	|_iclk_MAILBOXES|
	DCD	0x0
	DCD	|_idleStat_MAILBOXES|
	DCD	|_autoIdle_MAILBOXES|
	DCD	|_COREL4_SourceClock|
	DCD	0x1
	DCD	|_fclk_MCBSP1|
	DCD	|_iclk_MCBSP1|
	DCD	|_wken_MCBSP1|
	DCD	|_idleStat_MCBSP1|
	DCD	|_autoIdle_MCBSP1|
	DCD	|_MCBSP1_SourceClock|
	DCD	0x1
	DCD	|_fclk_MCBSP5|
	DCD	|_iclk_MCBSP5|
	DCD	|_wken_MCBSP5|
	DCD	|_idleStat_MCBSP5|
	DCD	|_autoIdle_MCBSP5|
	DCD	|_MCBSP5_SourceClock|
	DCD	0x1
	DCD	|_fclk_GPT10|
	DCD	|_iclk_GPT10|
	DCD	|_wken_GPT10|
	DCD	|_idleStat_GPT10|
	DCD	|_autoIdle_GPT10|
	DCD	|_GPT10_SourceClock|
	DCD	0x1
	DCD	|_fclk_GPT11|
	DCD	|_iclk_GPT11|
	DCD	|_wken_GPT11|
	DCD	|_idleStat_GPT11|
	DCD	|_autoIdle_GPT11|
	DCD	|_GPT11_SourceClock|
	DCD	0x1
	DCD	|_fclk_UART1|
	DCD	|_iclk_UART1|
	DCD	|_wken_UART1|
	DCD	|_idleStat_UART1|
	DCD	|_autoIdle_UART1|
	DCD	|_48M_SourceClock|
	DCD	0x1
	DCD	|_fclk_UART2|
	DCD	|_iclk_UART2|
	DCD	|_wken_UART2|
	DCD	|_idleStat_UART2|
	DCD	|_autoIdle_UART2|
	DCD	|_48M_SourceClock|
	DCD	0x1
	DCD	|_fclk_I2C1|
	DCD	|_iclk_I2C1|
	DCD	|_wken_I2C1|
	DCD	|_idleStat_I2C1|
	DCD	|_autoIdle_I2C1|
	DCD	|_96M_SourceClock|
	DCD	0x1
	DCD	|_fclk_I2C2|
	DCD	|_iclk_I2C2|
	DCD	|_wken_I2C2|
	DCD	|_idleStat_I2C2|
	DCD	|_autoIdle_I2C2|
	DCD	|_96M_SourceClock|
	DCD	0x1
	DCD	|_fclk_I2C3|
	DCD	|_iclk_I2C3|
	DCD	|_wken_I2C3|
	DCD	|_idleStat_I2C3|
	DCD	|_autoIdle_I2C3|
	DCD	|_96M_SourceClock|
	DCD	0x1
	DCD	|_fclk_MCSPI1|
	DCD	|_iclk_MCSPI1|
	DCD	|_wken_MCSPI1|
	DCD	|_idleStat_MCSPI1|
	DCD	|_autoIdle_MCSPI1|
	DCD	|_48M_SourceClock|
	DCD	0x1
	DCD	|_fclk_MCSPI2|
	DCD	|_iclk_MCSPI2|
	DCD	|_wken_MCSPI2|
	DCD	|_idleStat_MCSPI2|
	DCD	|_autoIdle_MCSPI2|
	DCD	|_48M_SourceClock|
	DCD	0x1
	DCD	|_fclk_MCSPI3|
	DCD	|_iclk_MCSPI3|
	DCD	|_wken_MCSPI3|
	DCD	|_idleStat_MCSPI3|
	DCD	|_autoIdle_MCSPI3|
	DCD	|_48M_SourceClock|
	DCD	0x1
	DCD	|_fclk_MCSPI4|
	DCD	|_iclk_MCSPI4|
	DCD	|_wken_MCSPI4|
	DCD	|_idleStat_MCSPI4|
	DCD	|_autoIdle_MCSPI4|
	DCD	|_48M_SourceClock|
	DCD	0x1
	DCD	|_fclk_HDQ|
	DCD	|_iclk_HDQ|
	DCD	0x0
	DCD	|_idleStat_HDQ|
	DCD	|_autoIdle_HDQ|
	DCD	|_12M_SourceClock|
	DCD	0x1
	DCD	|_fclk_MSPRO|
	DCD	|_iclk_MSPRO|
	DCD	0x0
	DCD	|_idleStat_MSPRO|
	DCD	|_autoIdle_MSPRO|
	DCD	|_96M_SourceClock|
	DCD	0x1
	DCD	|_fclk_MMC1|
	DCD	|_iclk_MMC1|
	DCD	|_wken_MMC1|
	DCD	|_idleStat_MMC1|
	DCD	|_autoIdle_MMC1|
	DCD	|_MMC1_SourceClock|
	DCD	0x1
	DCD	|_fclk_MMC2|
	DCD	|_iclk_MMC2|
	DCD	|_wken_MMC2|
	DCD	|_idleStat_MMC2|
	DCD	|_autoIdle_MMC2|
	DCD	|_MMC2_SourceClock|
	DCD	0x1
	DCD	|_fclk_MMC3|
	DCD	|_iclk_MMC3|
	DCD	|_wken_MMC3|
	DCD	|_idleStat_MMC3|
	DCD	|_autoIdle_MMC3|
	DCD	|_MMC3_SourceClock|
	DCD	0x1
	DCD	0x0
	DCD	|_iclk_DES2|
	DCD	0x0
	DCD	|_idleStat_DES2|
	DCD	|_autoIdle_DES2|
	DCD	0x0
	DCD	0x1
	DCD	0x0
	DCD	|_iclk_SHA12|
	DCD	0x0
	DCD	|_idleStat_SHA12|
	DCD	|_autoIdle_SHA12|
	DCD	0x0
	DCD	0x1
	DCD	0x0
	DCD	|_iclk_AES2|
	DCD	0x0
	DCD	|_idleStat_AES2|
	DCD	|_autoIdle_AES2|
	DCD	0x0
	DCD	0x1
	DCD	0x0
	DCD	|_iclk_ICR|
	DCD	0x0
	DCD	|_idleStat_ICR|
	DCD	|_autoIdle_ICR|
	DCD	0x0
	DCD	0x1
	DCD	0x0
	DCD	|_iclk_DES1|
	DCD	0x0
	DCD	|_idleStat_DES1|
	DCD	|_autoIdle_DES1|
	DCD	0x0
	DCD	0x1
	DCD	0x0
	DCD	|_iclk_SHA11|
	DCD	0x0
	DCD	|_idleStat_SHA11|
	DCD	|_autoIdle_SHA11|
	DCD	0x0
	DCD	0x1
	DCD	0x0
	DCD	|_iclk_RNG|
	DCD	0x0
	DCD	|_idleStat_RNG|
	DCD	|_autoIdle_RNG|
	DCD	0x0
	DCD	0x1
	DCD	0x0
	DCD	|_iclk_AES1|
	DCD	0x0
	DCD	|_idleStat_AES1|
	DCD	|_autoIdle_AES1|
	DCD	0x0
	DCD	0x1
	DCD	0x0
	DCD	|_iclk_PKA|
	DCD	0x0
	DCD	|_idleStat_PKA|
	DCD	|_autoIdle_PKA|
	DCD	0x0
	DCD	0x1
	DCD	|_fclk_USBTLL|
	DCD	|_iclk_USBTLL|
	DCD	|_wken_USBTLL|
	DCD	|_idleStat_USBTLL|
	DCD	|_autoIdle_USBTLL|
	DCD	|_120M_SourceClock|
	DCD	0x1
	DCD	|_fclk_TS|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x1
	DCD	|_fclk_CPEFUSE|
	DCD	0x0
	DCD	0x0
	DCD	|_idleStat_CPEFUSE|
	DCD	0x0
	DCD	|_CPEFUSE_SourceClock|
	DCD	0x0
	DCD	|_fclk_GPT1|
	DCD	|_iclk_GPT1|
	DCD	|_wken_GPT1|
	DCD	|_idleStat_GPT1|
	DCD	|_autoIdle_GPT1|
	DCD	|_GPT1_SourceClock|
	DCD	0x0
	DCD	0x0
	DCD	|_iclk_GPT12|
	DCD	0x0
	DCD	|_idleStat_GPT12|
	DCD	|_autoIdle_GPT12|
	DCD	|_GPT12_SourceClock|
	DCD	0x0
	DCD	0x0
	DCD	|_iclk_32KSYNC|
	DCD	0x0
	DCD	|_idleStat_32KSYNC|
	DCD	|_autoIdle_32KSYNC|
	DCD	|_32K_SourceClock|
	DCD	0x0
	DCD	0x0
	DCD	|_iclk_WDT1|
	DCD	0x0
	DCD	|_idleStat_WDT1|
	DCD	|_autoIdle_WDT1|
	DCD	|_32K_SourceClock|
	DCD	0x0
	DCD	|_fclk_WDT2|
	DCD	|_iclk_WDT2|
	DCD	0x0
	DCD	|_idleStat_WDT2|
	DCD	|_autoIdle_WDT2|
	DCD	|_32KWakeup_SourceClock|
	DCD	0x0
	DCD	|_fclk_GPIO1|
	DCD	|_iclk_GPIO1|
	DCD	|_wken_GPIO1|
	DCD	|_idleStat_GPIO1|
	DCD	|_autoIdle_GPIO1|
	DCD	|_32KWakeup_SourceClock|
	DCD	0x0
	DCD	|_fclk_SR1|
	DCD	0x0
	DCD	|_wken_SR1|
	DCD	|_idleStat_SR1|
	DCD	0x0
	DCD	|_SR_SourceClock|
	DCD	0x0
	DCD	|_fclk_SR2|
	DCD	0x0
	DCD	|_wken_SR2|
	DCD	|_idleStat_SR2|
	DCD	0x0
	DCD	|_SR_SourceClock|
	DCD	0x0
	DCD	|_fclk_USIM|
	DCD	|_iclk_USIM|
	DCD	|_wken_USIM|
	DCD	|_idleStat_USIM|
	DCD	|_autoIdle_USIM|
	DCD	|_USIM_SourceClock|
	DCD	0x2
	DCD	|_fclk_GPIO2|
	DCD	|_iclk_GPIO2|
	DCD	|_wken_GPIO2|
	DCD	|_idleStat_GPIO2|
	DCD	|_autoIdle_GPIO2|
	DCD	|_PER_32K_SourceClock|
	DCD	0x2
	DCD	|_fclk_GPIO3|
	DCD	|_iclk_GPIO3|
	DCD	|_wken_GPIO3|
	DCD	|_idleStat_GPIO3|
	DCD	|_autoIdle_GPIO3|
	DCD	|_PER_32K_SourceClock|
	DCD	0x2
	DCD	|_fclk_GPIO4|
	DCD	|_iclk_GPIO4|
	DCD	|_wken_GPIO4|
	DCD	|_idleStat_GPIO4|
	DCD	|_autoIdle_GPIO4|
	DCD	|_PER_32K_SourceClock|
	DCD	0x2
	DCD	|_fclk_GPIO5|
	DCD	|_iclk_GPIO5|
	DCD	|_wken_GPIO5|
	DCD	|_idleStat_GPIO5|
	DCD	|_autoIdle_GPIO5|
	DCD	|_PER_32K_SourceClock|
	DCD	0x2
	DCD	|_fclk_GPIO6|
	DCD	|_iclk_GPIO6|
	DCD	|_wken_GPIO6|
	DCD	|_idleStat_GPIO6|
	DCD	|_autoIdle_GPIO6|
	DCD	|_PER_32K_SourceClock|
	DCD	0x2
	DCD	|_fclk_MCBSP2|
	DCD	|_iclk_MCBSP2|
	DCD	|_wken_MCBSP2|
	DCD	|_idleStat_MCBSP2|
	DCD	|_autoIdle_MCBSP2|
	DCD	|_MCBSP2_SourceClock|
	DCD	0x2
	DCD	|_fclk_MCBSP3|
	DCD	|_iclk_MCBSP3|
	DCD	|_wken_MCBSP3|
	DCD	|_idleStat_MCBSP3|
	DCD	|_autoIdle_MCBSP3|
	DCD	|_MCBSP3_SourceClock|
	DCD	0x2
	DCD	|_fclk_MCBSP4|
	DCD	|_iclk_MCBSP4|
	DCD	|_wken_MCBSP4|
	DCD	|_idleStat_MCBSP4|
	DCD	|_autoIdle_MCBSP4|
	DCD	|_MCBSP4_SourceClock|
	DCD	0x2
	DCD	|_fclk_GPT2|
	DCD	|_iclk_GPT2|
	DCD	|_wken_GPT2|
	DCD	|_idleStat_GPT2|
	DCD	|_autoIdle_GPT2|
	DCD	|_GPT2_SourceClock|
	DCD	0x2
	DCD	|_fclk_GPT3|
	DCD	|_iclk_GPT3|
	DCD	|_wken_GPT3|
	DCD	|_idleStat_GPT3|
	DCD	|_autoIdle_GPT3|
	DCD	|_GPT3_SourceClock|
	DCD	0x2
	DCD	|_fclk_GPT4|
	DCD	|_iclk_GPT4|
	DCD	|_wken_GPT4|
	DCD	|_idleStat_GPT4|
	DCD	|_autoIdle_GPT4|
	DCD	|_GPT4_SourceClock|
	DCD	0x2
	DCD	|_fclk_GPT5|
	DCD	|_iclk_GPT5|
	DCD	|_wken_GPT5|
	DCD	|_idleStat_GPT5|
	DCD	|_autoIdle_GPT5|
	DCD	|_GPT5_SourceClock|
	DCD	0x2
	DCD	|_fclk_GPT6|
	DCD	|_iclk_GPT6|
	DCD	|_wken_GPT6|
	DCD	|_idleStat_GPT6|
	DCD	|_autoIdle_GPT6|
	DCD	|_GPT6_SourceClock|
	DCD	0x2
	DCD	|_fclk_GPT7|
	DCD	|_iclk_GPT7|
	DCD	|_wken_GPT7|
	DCD	|_idleStat_GPT7|
	DCD	|_autoIdle_GPT7|
	DCD	|_GPT7_SourceClock|
	DCD	0x2
	DCD	|_fclk_GPT8|
	DCD	|_iclk_GPT8|
	DCD	|_wken_GPT8|
	DCD	|_idleStat_GPT8|
	DCD	|_autoIdle_GPT8|
	DCD	|_GPT8_SourceClock|
	DCD	0x2
	DCD	|_fclk_GPT9|
	DCD	|_iclk_GPT9|
	DCD	|_wken_GPT9|
	DCD	|_idleStat_GPT9|
	DCD	|_autoIdle_GPT9|
	DCD	|_GPT9_SourceClock|
	DCD	0x2
	DCD	|_fclk_UART3|
	DCD	|_iclk_UART3|
	DCD	|_wken_UART3|
	DCD	|_idleStat_UART3|
	DCD	|_autoIdle_UART3|
	DCD	|_PER_48M_SourceClock|
	DCD	0x2
	DCD	|_fclk_WDT3|
	DCD	|_iclk_WDT3|
	DCD	0x0
	DCD	|_idleStat_WDT3|
	DCD	|_autoIdle_WDT3|
	DCD	|_PER_32K_SourceClock|
	DCD	0x6
	DCD	|_fclk_DSS|
	DCD	|_iclk_DSS|
	DCD	|_wken_DSS|
	DCD	|_idleStat_DSS|
	DCD	|_autoIdle_DSS|
	DCD	|_DSS_SourceClock|
	DCD	0x6
	DCD	|_fclk_DSS1|
	DCD	|_iclk_DSS|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	|_DSS1_SourceClock|
	DCD	0x6
	DCD	|_fclk_DSS2|
	DCD	|_iclk_DSS|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	|_DSS2_SourceClock|
	DCD	0x6
	DCD	|_fclk_TVOUT|
	DCD	|_iclk_DSS|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	|_TV_SourceClock|
	DCD	0x9
	DCD	|_fclk_CAM|
	DCD	|_iclk_CAM|
	DCD	0x0
	DCD	|_idleStat_CAM|
	DCD	|_autoIdle_CAM|
	DCD	|_CAM_SourceClock|
	DCD	0x9
	DCD	|_fclk_CSI2|
	DCD	|_iclk_CAM|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	|_CSI2_SourceClock|
	DCD	0x8
	DCD	|_fclk_IVA2|
	DCD	|_iclk_IVA2|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0xa
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0xa
	DCD	|_fclk_3D|
	DCD	|_iclk_SGX|
	DCD	0x0
	DCD	|_idleStat_SGX|
	DCD	0x0
	DCD	0x0
	DCD	0xa
	DCD	|_fclk_SGX|
	DCD	|_iclk_SGX|
	DCD	0x0
	DCD	|_idleStat_SGX|
	DCD	0x0
	DCD	|_SGX_SourceClock|
	DCD	0x3
	DCD	|_fclk_HSUSB1|
	DCD	|_iclk_USBHOST|
	DCD	|_wken_USBHOST|
	DCD	|_idleStat_USBHOST|
	DCD	|_autoIdle_USBHOST|
	DCD	0x0
	DCD	0x3
	DCD	|_fclk_HSUSB2|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x3
	DCD	|_fclk_USBHOST1|
	DCD	|_iclk_USBHOST1|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	|_USBHOST1_SourceClock|
	DCD	0x3
	DCD	|_fclk_USBHOST2|
	DCD	|_iclk_USBHOST2|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	|_USBHOST2_SourceClock|
	DCD	0x3
	DCD	|_fclk_USBHOST3|
	DCD	|_iclk_USBHOST3|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	|_USBHOST3_SourceClock|
	DCD	0x1
	DCD	0x0
	DCD	|_iclk_VRFB|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x2
	DCD	|_fclk_UART4|
	DCD	|_iclk_UART4|
	DCD	|_wken_UART4|
	DCD	|_idleStat_UART4|
	DCD	|_autoIdle_UART4|
	DCD	|_PER_48M_SourceClock|
|s_rgClockManagementRoutines| DCD |_PrcmDeviceEnableIClock|
	DCD	|_PrcmDeviceEnableFClock|
	DCD	|_PrcmDeviceEnableAutoIdle|
	DCD	|_PrcmDeviceSetSourceClock|
	DCD	|_PrcmDeviceEnableIClock|
	DCD	|_PrcmDeviceEnableFClock|
	DCD	|_PrcmDeviceEnableAutoIdle|
	DCD	|_PrcmDeviceSetSourceClock|
	DCD	|_PrcmDeviceEnableIClock|
	DCD	|_PrcmDeviceEnableFClock|
	DCD	|_PrcmDeviceEnableAutoIdle|
	DCD	|_PrcmDeviceSetSourceClock|
	DCD	|_PrcmDeviceEnableIClock_USB|
	DCD	|_PrcmDeviceEnableFClock_USB|
	DCD	|_PrcmDeviceEnableAutoIdle|
	DCD	|_PrcmDeviceSetSourceClock_USB|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	|_PrcmDeviceEnableIClock_DSS|
	DCD	|_PrcmDeviceEnableFClock_DSS|
	DCD	|_PrcmDeviceEnableAutoIdle|
	DCD	|_PrcmDeviceSetSourceClock_DSS|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	|_PrcmDeviceEnableFClock|
	DCD	0x0
	DCD	0x0
	DCD	|_PrcmDeviceEnableIClock|
	DCD	|_PrcmDeviceEnableFClock|
	DCD	|_PrcmDeviceEnableAutoIdle|
	DCD	|_PrcmDeviceSetSourceClock|
	DCD	|_PrcmDeviceEnableIClock|
	DCD	|_PrcmDeviceEnableFClock|
	DCD	0x0
	DCD	|_PrcmDeviceSetSourceClock|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|??_C@_1EI@DMKFONCI@?$AA?9?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAH?$AAw?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAA?$AAu?$AAt?$AAo?$AAi?$AAd?$AAl?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FC@JFJNOCNE@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAH?$AAw?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAA?$AAu?$AAt?$AAo?$AAi?$AAd?$AAl?$AAe?$AA?$CI?$AAd?$AAe?$AAv@| [ DATA ] ; `string'
	EXPORT	|_PrcmDeviceHwUpdateAutoidle|
	IMPORT	|GetCmRegisterSet|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|dpCurSettings|
	IMPORT	|g_bSingleThreaded|

  00000			 AREA	 |.pdata|, PDATA
|$T48770| DCD	|$LN14@PrcmDevice|
	DCD	0x40007504
; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\oal\prcm\prcm_device.c

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EI@DMKFONCI@?$AA?9?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAH?$AAw?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAA?$AAu?$AAt?$AAo?$AAi?$AAd?$AAl?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF@| DCB "-"
	DCB	0x0, "_", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D"
	DCB	0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "H"
	DCB	0x0, "w", 0x0, "U", 0x0, "p", 0x0, "d", 0x0, "a", 0x0, "t"
	DCB	0x0, "e", 0x0, "A", 0x0, "u", 0x0, "t", 0x0, "o", 0x0, "i"
	DCB	0x0, "d", 0x0, "l", 0x0, "e", 0x0, "(", 0x0, ")", 0x0, "="
	DCB	0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FC@JFJNOCNE@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAH?$AAw?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAA?$AAu?$AAt?$AAo?$AAi?$AAd?$AAl?$AAe?$AA?$CI?$AAd?$AAe?$AAv@| DCB "+"
	DCB	0x0, "_", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D"
	DCB	0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "H"
	DCB	0x0, "w", 0x0, "U", 0x0, "p", 0x0, "d", 0x0, "a", 0x0, "t"
	DCB	0x0, "e", 0x0, "A", 0x0, "u", 0x0, "t", 0x0, "o", 0x0, "i"
	DCB	0x0, "d", 0x0, "l", 0x0, "e", 0x0, "(", 0x0, "d", 0x0, "e"
	DCB	0x0, "v", 0x0, "I", 0x0, "d", 0x0, "=", 0x0, "%", 0x0, "d"
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |_PrcmDeviceHwUpdateAutoidle| PROC

; 181  : {

  00000		 |$LN14@PrcmDevice|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd020	 sub         sp, sp, #0x20
  00010		 |$M48767|

; 182  :     UINT mask;
; 183  :     BOOL rc = TRUE;  

  00010	e3a03001	 mov         r3, #1
  00014	e58d3000	 str         r3, [sp]

; 184  :     OMAP_CM_REGS *pPrcmCm;
; 185  :     volatile unsigned int *pautoidle;
; 186  :     if (!g_bSingleThreaded)

  00018	e59f31a8	 ldr         r3, [pc, #0x1A8]
  0001c	e5933000	 ldr         r3, [r3]
  00020	e3530000	 cmp         r3, #0
  00024	1a00000b	 bne         |$LN5@PrcmDevice|

; 187  :         OALMSG(OAL_FUNC, (L"+_PrcmDeviceHwUpdateAutoidle(devId=%d)\r\n", devId));

  00028	e59f3194	 ldr         r3, [pc, #0x194]
  0002c	e5933440	 ldr         r3, [r3, #0x440]
  00030	e3130004	 tst         r3, #4
  00034	0a000005	 beq         |$LN8@PrcmDevice|
  00038	e59d1028	 ldr         r1, [sp, #0x28]
  0003c	e59f018c	 ldr         r0, [pc, #0x18C]
  00040	eb000000	 bl          NKDbgPrintfW
  00044	e3a03001	 mov         r3, #1
  00048	e58d3014	 str         r3, [sp, #0x14]
  0004c	ea000001	 b           |$LN9@PrcmDevice|
  00050		 |$LN8@PrcmDevice|
  00050	e3a03000	 mov         r3, #0
  00054	e58d3014	 str         r3, [sp, #0x14]
  00058		 |$LN9@PrcmDevice|
  00058		 |$LN5@PrcmDevice|

; 188  : 
; 189  :     SPECIAL_DEBUG_MESSAGE(_PrcmDeviceHwUpdateAutoidle, devId)
; 190  : 
; 191  :     if (s_rgDeviceLookupTable[devId].pautoidle == NULL) goto cleanUp;

  00058	e59d1028	 ldr         r1, [sp, #0x28]
  0005c	e3a0301c	 mov         r3, #0x1C
  00060	e0020391	 mul         r2, r1, r3
  00064	e59f3160	 ldr         r3, [pc, #0x160]
  00068	e0833002	 add         r3, r3, r2
  0006c	e2833014	 add         r3, r3, #0x14
  00070	e5933000	 ldr         r3, [r3]
  00074	e3530000	 cmp         r3, #0
  00078	1a000000	 bne         |$LN4@PrcmDevice|
  0007c	ea000039	 b           |$cleanUp$48114|
  00080		 |$LN4@PrcmDevice|

; 192  : 
; 193  :     mask = s_rgDeviceLookupTable[devId].pautoidle->mask;

  00080	e59d1028	 ldr         r1, [sp, #0x28]
  00084	e3a0301c	 mov         r3, #0x1C
  00088	e0020391	 mul         r2, r1, r3
  0008c	e59f3138	 ldr         r3, [pc, #0x138]
  00090	e0833002	 add         r3, r3, r2
  00094	e2833014	 add         r3, r3, #0x14
  00098	e5933000	 ldr         r3, [r3]
  0009c	e2833004	 add         r3, r3, #4
  000a0	e5933000	 ldr         r3, [r3]
  000a4	e58d3008	 str         r3, [sp, #8]

; 194  :     pPrcmCm = GetCmRegisterSet(s_rgDeviceLookupTable[devId].powerDomain);

  000a8	e59d1028	 ldr         r1, [sp, #0x28]
  000ac	e3a0301c	 mov         r3, #0x1C
  000b0	e0020391	 mul         r2, r1, r3
  000b4	e59f3110	 ldr         r3, [pc, #0x110]
  000b8	e0833002	 add         r3, r3, r2
  000bc	e5930000	 ldr         r0, [r3]
  000c0	eb000000	 bl          GetCmRegisterSet
  000c4	e58d0018	 str         r0, [sp, #0x18]
  000c8	e59d3018	 ldr         r3, [sp, #0x18]
  000cc	e58d3004	 str         r3, [sp, #4]

; 195  :     pautoidle = (volatile unsigned int*)((UCHAR*)pPrcmCm + s_rgDeviceLookupTable[devId].pautoidle->offset);

  000d0	e59d1028	 ldr         r1, [sp, #0x28]
  000d4	e3a0301c	 mov         r3, #0x1C
  000d8	e0020391	 mul         r2, r1, r3
  000dc	e59f30e8	 ldr         r3, [pc, #0xE8]
  000e0	e0833002	 add         r3, r3, r2
  000e4	e2833014	 add         r3, r3, #0x14
  000e8	e5933000	 ldr         r3, [r3]
  000ec	e2833008	 add         r3, r3, #8
  000f0	e59d2004	 ldr         r2, [sp, #4]
  000f4	e5933000	 ldr         r3, [r3]
  000f8	e0823003	 add         r3, r2, r3
  000fc	e58d300c	 str         r3, [sp, #0xC]

; 196  : 
; 197  :     if (s_rgDeviceLookupTable[devId].pautoidle->enabled == TRUE)

  00100	e59d1028	 ldr         r1, [sp, #0x28]
  00104	e3a0301c	 mov         r3, #0x1C
  00108	e0020391	 mul         r2, r1, r3
  0010c	e59f30b8	 ldr         r3, [pc, #0xB8]
  00110	e0833002	 add         r3, r3, r2
  00114	e2833014	 add         r3, r3, #0x14
  00118	e5933000	 ldr         r3, [r3]
  0011c	e5933000	 ldr         r3, [r3]
  00120	e3530001	 cmp         r3, #1
  00124	1a000006	 bne         |$LN3@PrcmDevice|

; 198  :         {
; 199  :         SETREG32(pautoidle, mask);

  00128	e59d300c	 ldr         r3, [sp, #0xC]
  0012c	e5932000	 ldr         r2, [r3]
  00130	e59d3008	 ldr         r3, [sp, #8]
  00134	e1822003	 orr         r2, r2, r3
  00138	e59d300c	 ldr         r3, [sp, #0xC]
  0013c	e5832000	 str         r2, [r3]

; 200  :         }
; 201  :     else

  00140	ea000006	 b           |$LN2@PrcmDevice|
  00144		 |$LN3@PrcmDevice|

; 202  :         {
; 203  :         CLRREG32(pautoidle, mask);

  00144	e59d3008	 ldr         r3, [sp, #8]
  00148	e1e02003	 mvn         r2, r3
  0014c	e59d300c	 ldr         r3, [sp, #0xC]
  00150	e5933000	 ldr         r3, [r3]
  00154	e0032002	 and         r2, r3, r2
  00158	e59d300c	 ldr         r3, [sp, #0xC]
  0015c	e5832000	 str         r2, [r3]
  00160		 |$LN2@PrcmDevice|

; 204  :         }
; 205  :     
; 206  :     SPECIAL_DEBUG_MESSAGE_DONE(_PrcmDeviceHwUpdateAutoidle, devId)
; 207  :     rc = TRUE;

  00160	e3a03001	 mov         r3, #1
  00164	e58d3000	 str         r3, [sp]
  00168		 |$cleanUp$48114|

; 208  : 
; 209  : cleanUp:
; 210  :     if (!g_bSingleThreaded)

  00168	e59f3058	 ldr         r3, [pc, #0x58]
  0016c	e5933000	 ldr         r3, [r3]
  00170	e3530000	 cmp         r3, #0
  00174	1a00000b	 bne         |$LN1@PrcmDevice|

; 211  :         OALMSG(OAL_FUNC, (L"-_PrcmDeviceHwUpdateAutoidle()=%d\r\n", rc));

  00178	e59f3044	 ldr         r3, [pc, #0x44]
  0017c	e5933440	 ldr         r3, [r3, #0x440]
  00180	e3130004	 tst         r3, #4
  00184	0a000005	 beq         |$LN10@PrcmDevice|
  00188	e59d1000	 ldr         r1, [sp]
  0018c	e59f002c	 ldr         r0, [pc, #0x2C]
  00190	eb000000	 bl          NKDbgPrintfW
  00194	e3a03001	 mov         r3, #1
  00198	e58d301c	 str         r3, [sp, #0x1C]
  0019c	ea000001	 b           |$LN11@PrcmDevice|
  001a0		 |$LN10@PrcmDevice|
  001a0	e3a03000	 mov         r3, #0
  001a4	e58d301c	 str         r3, [sp, #0x1C]
  001a8		 |$LN11@PrcmDevice|
  001a8		 |$LN1@PrcmDevice|

; 212  :     return rc;

  001a8	e59d3000	 ldr         r3, [sp]
  001ac	e58d3010	 str         r3, [sp, #0x10]

; 213  : }

  001b0	e59d0010	 ldr         r0, [sp, #0x10]
  001b4	e28dd020	 add         sp, sp, #0x20
  001b8	e89d6000	 ldmia       sp, {sp, lr}
  001bc	e12fff1e	 bx          lr
  001c0		 |$LN15@PrcmDevice|
  001c0		 |$LN16@PrcmDevice|
  001c0	00000000	 DCD         |??_C@_1EI@DMKFONCI@?$AA?9?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAH?$AAw?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAA?$AAu?$AAt?$AAo?$AAi?$AAd?$AAl?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF@|
  001c4		 |$LN17@PrcmDevice|
  001c4	00000000	 DCD         |dpCurSettings|
  001c8		 |$LN18@PrcmDevice|
  001c8	00000000	 DCD         |g_bSingleThreaded|
  001cc		 |$LN19@PrcmDevice|
  001cc	00000000	 DCD         |s_rgDeviceLookupTable|
  001d0		 |$LN20@PrcmDevice|
  001d0	00000000	 DCD         |??_C@_1FC@JFJNOCNE@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAH?$AAw?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAA?$AAu?$AAt?$AAo?$AAi?$AAd?$AAl?$AAe?$AA?$CI?$AAd?$AAe?$AAv@|
  001d4		 |$M48768|

			 ENDP  ; |_PrcmDeviceHwUpdateAutoidle|

	EXPORT	|??_C@_1EE@DHLHDFDF@?$AA?9?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAA?$AAu?$AAt?$AAo?$AAI?$AAd?$AAl?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FG@JDCJJDME@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAA?$AAu?$AAt?$AAo?$AAI?$AAd?$AAl?$AAe?$AA?$CI?$AAd?$AAe?$AAv?$AAI?$AAd@| [ DATA ] ; `string'

  00008			 AREA	 |.pdata|, PDATA
|$T48786| DCD	|$LN12@PrcmDevice@2|
	DCD	0x40004804

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EE@DHLHDFDF@?$AA?9?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAA?$AAu?$AAt?$AAo?$AAI?$AAd?$AAl?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN@| DCB "-"
	DCB	0x0, "_", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D"
	DCB	0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "E"
	DCB	0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, "A"
	DCB	0x0, "u", 0x0, "t", 0x0, "o", 0x0, "I", 0x0, "d", 0x0, "l"
	DCB	0x0, "e", 0x0, "(", 0x0, ")", 0x0, "=", 0x0, "%", 0x0, "d"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FG@JDCJJDME@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAA?$AAu?$AAt?$AAo?$AAI?$AAd?$AAl?$AAe?$AA?$CI?$AAd?$AAe?$AAv?$AAI?$AAd@| DCB "+"
	DCB	0x0, "_", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D"
	DCB	0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "E"
	DCB	0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, "A"
	DCB	0x0, "u", 0x0, "t", 0x0, "o", 0x0, "I", 0x0, "d", 0x0, "l"
	DCB	0x0, "e", 0x0, "(", 0x0, "d", 0x0, "e", 0x0, "v", 0x0, "I"
	DCB	0x0, "d", 0x0, "=", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Odtp

  001d4			 AREA	 |.text|, CODE, ARM

  001d4		 |_PrcmDeviceEnableAutoIdle| PROC

; 226  : {

  001d4		 |$LN12@PrcmDevice@2|
  001d4	e1a0c00d	 mov         r12, sp
  001d8	e92d0003	 stmdb       sp!, {r0, r1}
  001dc	e92d5000	 stmdb       sp!, {r12, lr}
  001e0	e24dd010	 sub         sp, sp, #0x10
  001e4		 |$M48783|

; 227  :     BOOL rc = TRUE;    

  001e4	e3a03001	 mov         r3, #1
  001e8	e58d3000	 str         r3, [sp]

; 228  :     if (!g_bSingleThreaded)

  001ec	e59f30f4	 ldr         r3, [pc, #0xF4]
  001f0	e5933000	 ldr         r3, [r3]
  001f4	e3530000	 cmp         r3, #0
  001f8	1a00000c	 bne         |$LN3@PrcmDevice@2|

; 229  :         OALMSG(OAL_FUNC, (L"+_PrcmDeviceEnableAutoIdle(devId=%d, %d)\r\n", devId, bEnable));

  001fc	e59f30e0	 ldr         r3, [pc, #0xE0]
  00200	e5933440	 ldr         r3, [r3, #0x440]
  00204	e3130004	 tst         r3, #4
  00208	0a000006	 beq         |$LN6@PrcmDevice@2|
  0020c	e59d201c	 ldr         r2, [sp, #0x1C]
  00210	e59d1018	 ldr         r1, [sp, #0x18]
  00214	e59f00d4	 ldr         r0, [pc, #0xD4]
  00218	eb000000	 bl          NKDbgPrintfW
  0021c	e3a03001	 mov         r3, #1
  00220	e58d3008	 str         r3, [sp, #8]
  00224	ea000001	 b           |$LN7@PrcmDevice@2|
  00228		 |$LN6@PrcmDevice@2|
  00228	e3a03000	 mov         r3, #0
  0022c	e58d3008	 str         r3, [sp, #8]
  00230		 |$LN7@PrcmDevice@2|
  00230		 |$LN3@PrcmDevice@2|

; 230  : 
; 231  :     SPECIAL_DEBUG_MESSAGE2(_PrcmDeviceEnableAutoIdle, devId, bEnable)
; 232  : 
; 233  :     // update flag
; 234  :     if (s_rgDeviceLookupTable[devId].pautoidle)

  00230	e59d1018	 ldr         r1, [sp, #0x18]
  00234	e3a0301c	 mov         r3, #0x1C
  00238	e0020391	 mul         r2, r1, r3
  0023c	e59f30a8	 ldr         r3, [pc, #0xA8]
  00240	e0833002	 add         r3, r3, r2
  00244	e2833014	 add         r3, r3, #0x14
  00248	e5933000	 ldr         r3, [r3]
  0024c	e3530000	 cmp         r3, #0
  00250	0a00000a	 beq         |$LN2@PrcmDevice@2|

; 235  :         {
; 236  :         s_rgDeviceLookupTable[devId].pautoidle->enabled = bEnable;

  00254	e59d1018	 ldr         r1, [sp, #0x18]
  00258	e3a0301c	 mov         r3, #0x1C
  0025c	e0020391	 mul         r2, r1, r3
  00260	e59f3084	 ldr         r3, [pc, #0x84]
  00264	e0833002	 add         r3, r3, r2
  00268	e2833014	 add         r3, r3, #0x14
  0026c	e5932000	 ldr         r2, [r3]
  00270	e59d301c	 ldr         r3, [sp, #0x1C]
  00274	e5823000	 str         r3, [r2]

; 237  :         _PrcmDeviceHwUpdateAutoidle(devId);

  00278	e59d0018	 ldr         r0, [sp, #0x18]
  0027c	eb000000	 bl          _PrcmDeviceHwUpdateAutoidle
  00280		 |$LN2@PrcmDevice@2|

; 238  :         }
; 239  :     rc = TRUE;

  00280	e3a03001	 mov         r3, #1
  00284	e58d3000	 str         r3, [sp]

; 240  :     
; 241  :     SPECIAL_DEBUG_MESSAGE_DONE(_PrcmDeviceEnableAutoIdle, devId)
; 242  : 
; 243  :     if (!g_bSingleThreaded)

  00288	e59f3058	 ldr         r3, [pc, #0x58]
  0028c	e5933000	 ldr         r3, [r3]
  00290	e3530000	 cmp         r3, #0
  00294	1a00000b	 bne         |$LN1@PrcmDevice@2|

; 244  :         OALMSG(OAL_FUNC, (L"-_PrcmDeviceEnableAutoIdle()=%d\r\n", rc));

  00298	e59f3044	 ldr         r3, [pc, #0x44]
  0029c	e5933440	 ldr         r3, [r3, #0x440]
  002a0	e3130004	 tst         r3, #4
  002a4	0a000005	 beq         |$LN8@PrcmDevice@2|
  002a8	e59d1000	 ldr         r1, [sp]
  002ac	e59f002c	 ldr         r0, [pc, #0x2C]
  002b0	eb000000	 bl          NKDbgPrintfW
  002b4	e3a03001	 mov         r3, #1
  002b8	e58d300c	 str         r3, [sp, #0xC]
  002bc	ea000001	 b           |$LN9@PrcmDevice@2|
  002c0		 |$LN8@PrcmDevice@2|
  002c0	e3a03000	 mov         r3, #0
  002c4	e58d300c	 str         r3, [sp, #0xC]
  002c8		 |$LN9@PrcmDevice@2|
  002c8		 |$LN1@PrcmDevice@2|

; 245  :     return rc;

  002c8	e59d3000	 ldr         r3, [sp]
  002cc	e58d3004	 str         r3, [sp, #4]

; 246  : }

  002d0	e59d0004	 ldr         r0, [sp, #4]
  002d4	e28dd010	 add         sp, sp, #0x10
  002d8	e89d6000	 ldmia       sp, {sp, lr}
  002dc	e12fff1e	 bx          lr
  002e0		 |$LN13@PrcmDevice@2|
  002e0		 |$LN14@PrcmDevice@2|
  002e0	00000000	 DCD         |??_C@_1EE@DHLHDFDF@?$AA?9?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAA?$AAu?$AAt?$AAo?$AAI?$AAd?$AAl?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN@|
  002e4		 |$LN15@PrcmDevice@2|
  002e4	00000000	 DCD         |dpCurSettings|
  002e8		 |$LN16@PrcmDevice@2|
  002e8	00000000	 DCD         |g_bSingleThreaded|
  002ec		 |$LN17@PrcmDevice@2|
  002ec	00000000	 DCD         |s_rgDeviceLookupTable|
  002f0		 |$LN18@PrcmDevice@2|
  002f0	00000000	 DCD         |??_C@_1FG@JDCJJDME@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAA?$AAu?$AAt?$AAo?$AAI?$AAd?$AAl?$AAe?$AA?$CI?$AAd?$AAe?$AAv?$AAI?$AAd@|
  002f4		 |$M48784|

			 ENDP  ; |_PrcmDeviceEnableAutoIdle|

	EXPORT	|??_C@_1EO@BLAPGCDC@?$AA?9?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAW?$AAa?$AAi?$AAt?$AAF?$AAo?$AAr?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAA?$AAc?$AAc?$AAe?$AAs?$AAs?$AA?$CI@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FI@NMFDDLHH@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAW?$AAa?$AAi?$AAt?$AAF?$AAo?$AAr?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAA?$AAc?$AAc?$AAe?$AAs?$AAs?$AA?$CI@| [ DATA ] ; `string'
	EXPORT	|_PrcmDeviceWaitForDeviceAccess|
	IMPORT	|OALStall|

  00010			 AREA	 |.pdata|, PDATA
|$T48802| DCD	|$LN16@PrcmDevice@3|
	DCD	0x40005f04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EO@BLAPGCDC@?$AA?9?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAW?$AAa?$AAi?$AAt?$AAF?$AAo?$AAr?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAA?$AAc?$AAc?$AAe?$AAs?$AAs?$AA?$CI@| DCB "-"
	DCB	0x0, "_", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D"
	DCB	0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "W"
	DCB	0x0, "a", 0x0, "i", 0x0, "t", 0x0, "F", 0x0, "o", 0x0, "r"
	DCB	0x0, "D", 0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e"
	DCB	0x0, "A", 0x0, "c", 0x0, "c", 0x0, "e", 0x0, "s", 0x0, "s"
	DCB	0x0, "(", 0x0, ")", 0x0, "=", 0x0, "%", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FI@NMFDDLHH@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAW?$AAa?$AAi?$AAt?$AAF?$AAo?$AAr?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAA?$AAc?$AAc?$AAe?$AAs?$AAs?$AA?$CI@| DCB "+"
	DCB	0x0, "_", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D"
	DCB	0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "W"
	DCB	0x0, "a", 0x0, "i", 0x0, "t", 0x0, "F", 0x0, "o", 0x0, "r"
	DCB	0x0, "D", 0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e"
	DCB	0x0, "A", 0x0, "c", 0x0, "c", 0x0, "e", 0x0, "s", 0x0, "s"
	DCB	0x0, "(", 0x0, "d", 0x0, "e", 0x0, "v", 0x0, "I", 0x0, "d"
	DCB	0x0, "=", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  002f4			 AREA	 |.text|, CODE, ARM

  002f4		 |_PrcmDeviceWaitForDeviceAccess| PROC

; 289  : {

  002f4		 |$LN16@PrcmDevice@3|
  002f4	e1a0c00d	 mov         r12, sp
  002f8	e92d0001	 stmdb       sp!, {r0}
  002fc	e92d5000	 stmdb       sp!, {r12, lr}
  00300	e24dd024	 sub         sp, sp, #0x24
  00304		 |$M48799|

; 290  :     int i;
; 291  :     UINT mask;
; 292  :     OMAP_CM_REGS *pPrcmCm;
; 293  :     volatile unsigned int *pidle;
; 294  :     DeviceLookupEntry const *pEntry = &s_rgDeviceLookupTable[devId];    

  00304	e59d102c	 ldr         r1, [sp, #0x2C]
  00308	e3a0301c	 mov         r3, #0x1C
  0030c	e0020391	 mul         r2, r1, r3
  00310	e59f3154	 ldr         r3, [pc, #0x154]
  00314	e0833002	 add         r3, r3, r2
  00318	e58d3000	 str         r3, [sp]

; 295  :     if (!g_bSingleThreaded)

  0031c	e59f3140	 ldr         r3, [pc, #0x140]
  00320	e5933000	 ldr         r3, [r3]
  00324	e3530000	 cmp         r3, #0
  00328	1a00000b	 bne         |$LN7@PrcmDevice@3|

; 296  :         OALMSG(OAL_FUNC, (L"+_PrcmDeviceWaitForDeviceAccess(devId=%d)\r\n", devId));

  0032c	e59f312c	 ldr         r3, [pc, #0x12C]
  00330	e5933440	 ldr         r3, [r3, #0x440]
  00334	e3130004	 tst         r3, #4
  00338	0a000005	 beq         |$LN10@PrcmDevice@3|
  0033c	e59d102c	 ldr         r1, [sp, #0x2C]
  00340	e59f0120	 ldr         r0, [pc, #0x120]
  00344	eb000000	 bl          NKDbgPrintfW
  00348	e3a03001	 mov         r3, #1
  0034c	e58d3018	 str         r3, [sp, #0x18]
  00350	ea000001	 b           |$LN11@PrcmDevice@3|
  00354		 |$LN10@PrcmDevice@3|
  00354	e3a03000	 mov         r3, #0
  00358	e58d3018	 str         r3, [sp, #0x18]
  0035c		 |$LN11@PrcmDevice@3|
  0035c		 |$LN7@PrcmDevice@3|

; 297  : 
; 298  :     SPECIAL_DEBUG_MESSAGE(_PrcmDeviceWaitForDeviceAccess, devId)
; 299  : 
; 300  :     if (pEntry->pidlestatus != NULL)

  0035c	e59d3000	 ldr         r3, [sp]
  00360	e2833010	 add         r3, r3, #0x10
  00364	e5933000	 ldr         r3, [r3]
  00368	e3530000	 cmp         r3, #0
  0036c	0a000024	 beq         |$LN6@PrcmDevice@3|

; 301  :         {
; 302  :         mask = pEntry->pidlestatus->mask;    

  00370	e59d3000	 ldr         r3, [sp]
  00374	e2833010	 add         r3, r3, #0x10
  00378	e5933000	 ldr         r3, [r3]
  0037c	e5933000	 ldr         r3, [r3]
  00380	e58d300c	 str         r3, [sp, #0xC]

; 303  :         pPrcmCm = GetCmRegisterSet(pEntry->powerDomain);

  00384	e59d3000	 ldr         r3, [sp]
  00388	e5930000	 ldr         r0, [r3]
  0038c	eb000000	 bl          GetCmRegisterSet
  00390	e58d001c	 str         r0, [sp, #0x1C]
  00394	e59d301c	 ldr         r3, [sp, #0x1C]
  00398	e58d3008	 str         r3, [sp, #8]

; 304  :         pidle = (volatile unsigned int*)((UCHAR*)pPrcmCm + pEntry->pidlestatus->offset);  

  0039c	e59d3000	 ldr         r3, [sp]
  003a0	e2833010	 add         r3, r3, #0x10
  003a4	e5933000	 ldr         r3, [r3]
  003a8	e2833004	 add         r3, r3, #4
  003ac	e59d2008	 ldr         r2, [sp, #8]
  003b0	e5933000	 ldr         r3, [r3]
  003b4	e0823003	 add         r3, r2, r3
  003b8	e58d3010	 str         r3, [sp, #0x10]

; 305  :         for (i = 0; i < MAX_IDLESTATUS_LOOP; ++i)

  003bc	e3a03000	 mov         r3, #0
  003c0	e58d3004	 str         r3, [sp, #4]
  003c4	ea000002	 b           |$LN5@PrcmDevice@3|
  003c8		 |$LN4@PrcmDevice@3|
  003c8	e59d3004	 ldr         r3, [sp, #4]
  003cc	e2833001	 add         r3, r3, #1
  003d0	e58d3004	 str         r3, [sp, #4]
  003d4		 |$LN5@PrcmDevice@3|
  003d4	e59d3004	 ldr         r3, [sp, #4]
  003d8	e3530a01	 cmp         r3, #1, 20
  003dc	aa000008	 bge         |$LN3@PrcmDevice@3|

; 306  :             {
; 307  :             if ((INREG32(pidle) & mask) == 0) break;

  003e0	e59d3010	 ldr         r3, [sp, #0x10]
  003e4	e5932000	 ldr         r2, [r3]
  003e8	e59d300c	 ldr         r3, [sp, #0xC]
  003ec	e1120003	 tst         r2, r3
  003f0	1a000000	 bne         |$LN2@PrcmDevice@3|
  003f4	ea000002	 b           |$LN3@PrcmDevice@3|
  003f8		 |$LN2@PrcmDevice@3|

; 308  :             OALStall(1);

  003f8	e3a00001	 mov         r0, #1
  003fc	eb000000	 bl          OALStall

; 309  :             }

  00400	eafffff0	 b           |$LN4@PrcmDevice@3|
  00404		 |$LN3@PrcmDevice@3|
  00404		 |$LN6@PrcmDevice@3|

; 310  :         }
; 311  :     
; 312  :     SPECIAL_DEBUG_MESSAGE_DONE(_PrcmDeviceWaitForDeviceAccess, devId)
; 313  : 
; 314  :     if (!g_bSingleThreaded)

  00404	e59f3058	 ldr         r3, [pc, #0x58]
  00408	e5933000	 ldr         r3, [r3]
  0040c	e3530000	 cmp         r3, #0
  00410	1a00000b	 bne         |$LN1@PrcmDevice@3|

; 315  :         OALMSG(OAL_FUNC, (L"-_PrcmDeviceWaitForDeviceAccess()=%d\r\n", TRUE));

  00414	e59f3044	 ldr         r3, [pc, #0x44]
  00418	e5933440	 ldr         r3, [r3, #0x440]
  0041c	e3130004	 tst         r3, #4
  00420	0a000005	 beq         |$LN12@PrcmDevice@3|
  00424	e3a01001	 mov         r1, #1
  00428	e59f002c	 ldr         r0, [pc, #0x2C]
  0042c	eb000000	 bl          NKDbgPrintfW
  00430	e3a03001	 mov         r3, #1
  00434	e58d3020	 str         r3, [sp, #0x20]
  00438	ea000001	 b           |$LN13@PrcmDevice@3|
  0043c		 |$LN12@PrcmDevice@3|
  0043c	e3a03000	 mov         r3, #0
  00440	e58d3020	 str         r3, [sp, #0x20]
  00444		 |$LN13@PrcmDevice@3|
  00444		 |$LN1@PrcmDevice@3|

; 316  :     return TRUE;

  00444	e3a03001	 mov         r3, #1
  00448	e58d3014	 str         r3, [sp, #0x14]

; 317  : }

  0044c	e59d0014	 ldr         r0, [sp, #0x14]
  00450	e28dd024	 add         sp, sp, #0x24
  00454	e89d6000	 ldmia       sp, {sp, lr}
  00458	e12fff1e	 bx          lr
  0045c		 |$LN17@PrcmDevice@3|
  0045c		 |$LN18@PrcmDevice@3|
  0045c	00000000	 DCD         |??_C@_1EO@BLAPGCDC@?$AA?9?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAW?$AAa?$AAi?$AAt?$AAF?$AAo?$AAr?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAA?$AAc?$AAc?$AAe?$AAs?$AAs?$AA?$CI@|
  00460		 |$LN19@PrcmDevice@3|
  00460	00000000	 DCD         |dpCurSettings|
  00464		 |$LN20@PrcmDevice@3|
  00464	00000000	 DCD         |g_bSingleThreaded|
  00468		 |$LN21@PrcmDevice@3|
  00468	00000000	 DCD         |??_C@_1FI@NMFDDLHH@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAW?$AAa?$AAi?$AAt?$AAF?$AAo?$AAr?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAA?$AAc?$AAc?$AAe?$AAs?$AAs?$AA?$CI@|
  0046c		 |$LN22@PrcmDevice@3|
  0046c	00000000	 DCD         |s_rgDeviceLookupTable|
  00470		 |$M48800|

			 ENDP  ; |_PrcmDeviceWaitForDeviceAccess|

	EXPORT	|??_C@_1EA@CPOENIOI@?$AA?9?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAW?$AAa?$AAk?$AAe?$AAU?$AAp?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EK@NOGBCNIM@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAW?$AAa?$AAk?$AAe?$AAU?$AAp?$AA?$CI?$AAd?$AAe?$AAv?$AAI?$AAd?$AA?$DN?$AA?$CF@| [ DATA ] ; `string'
	EXPORT	|_PrcmDeviceEnableWakeUp|
	IMPORT	|GetPrmRegisterSet|

  00018			 AREA	 |.pdata|, PDATA
|$T48818| DCD	|$LN14@PrcmDevice@4|
	DCD	0x40005e04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@CPOENIOI@?$AA?9?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAW?$AAa?$AAk?$AAe?$AAU?$AAp?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "_", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D"
	DCB	0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "E"
	DCB	0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, "W"
	DCB	0x0, "a", 0x0, "k", 0x0, "e", 0x0, "U", 0x0, "p", 0x0, "("
	DCB	0x0, ")", 0x0, "=", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EK@NOGBCNIM@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAW?$AAa?$AAk?$AAe?$AAU?$AAp?$AA?$CI?$AAd?$AAe?$AAv?$AAI?$AAd?$AA?$DN?$AA?$CF@| DCB "+"
	DCB	0x0, "_", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D"
	DCB	0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "E"
	DCB	0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, "W"
	DCB	0x0, "a", 0x0, "k", 0x0, "e", 0x0, "U", 0x0, "p", 0x0, "("
	DCB	0x0, "d", 0x0, "e", 0x0, "v", 0x0, "I", 0x0, "d", 0x0, "="
	DCB	0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Odtp

  00470			 AREA	 |.text|, CODE, ARM

  00470		 |_PrcmDeviceEnableWakeUp| PROC

; 330  : {

  00470		 |$LN14@PrcmDevice@4|
  00470	e1a0c00d	 mov         r12, sp
  00474	e92d0003	 stmdb       sp!, {r0, r1}
  00478	e92d5000	 stmdb       sp!, {r12, lr}
  0047c	e24dd020	 sub         sp, sp, #0x20
  00480		 |$M48815|

; 331  :     UINT mask;
; 332  :     OMAP_PRM_REGS *pPrcmPrm;
; 333  :     volatile unsigned int *pwken;
; 334  :     DeviceLookupEntry const *pEntry = &s_rgDeviceLookupTable[devId];

  00480	e59d1028	 ldr         r1, [sp, #0x28]
  00484	e3a0301c	 mov         r3, #0x1C
  00488	e0020391	 mul         r2, r1, r3
  0048c	e59f3150	 ldr         r3, [pc, #0x150]
  00490	e0833002	 add         r3, r3, r2
  00494	e58d3000	 str         r3, [sp]

; 335  :     if (!g_bSingleThreaded)

  00498	e59f313c	 ldr         r3, [pc, #0x13C]
  0049c	e5933000	 ldr         r3, [r3]
  004a0	e3530000	 cmp         r3, #0
  004a4	1a00000b	 bne         |$LN5@PrcmDevice@4|

; 336  :         OALMSG(OAL_FUNC, (L"+_PrcmDeviceEnableWakeUp(devId=%d)\r\n", devId));

  004a8	e59f3128	 ldr         r3, [pc, #0x128]
  004ac	e5933440	 ldr         r3, [r3, #0x440]
  004b0	e3130004	 tst         r3, #4
  004b4	0a000005	 beq         |$LN8@PrcmDevice@4|
  004b8	e59d1028	 ldr         r1, [sp, #0x28]
  004bc	e59f011c	 ldr         r0, [pc, #0x11C]
  004c0	eb000000	 bl          NKDbgPrintfW
  004c4	e3a03001	 mov         r3, #1
  004c8	e58d3014	 str         r3, [sp, #0x14]
  004cc	ea000001	 b           |$LN9@PrcmDevice@4|
  004d0		 |$LN8@PrcmDevice@4|
  004d0	e3a03000	 mov         r3, #0
  004d4	e58d3014	 str         r3, [sp, #0x14]
  004d8		 |$LN9@PrcmDevice@4|
  004d8		 |$LN5@PrcmDevice@4|

; 337  : 
; 338  :     SPECIAL_DEBUG_MESSAGE2(_PrcmDeviceEnableWakeUp, devId, bEnable)
; 339  : 
; 340  :     // check if device is wakeup capable
; 341  :     if (pEntry->pwken != NULL)

  004d8	e59d3000	 ldr         r3, [sp]
  004dc	e283300c	 add         r3, r3, #0xC
  004e0	e5933000	 ldr         r3, [r3]
  004e4	e3530000	 cmp         r3, #0
  004e8	0a000023	 beq         |$LN4@PrcmDevice@4|

; 342  :         {
; 343  :         // initialize variables
; 344  :         mask = pEntry->pwken->mask;    

  004ec	e59d3000	 ldr         r3, [sp]
  004f0	e283300c	 add         r3, r3, #0xC
  004f4	e5933000	 ldr         r3, [r3]
  004f8	e5933000	 ldr         r3, [r3]
  004fc	e58d3004	 str         r3, [sp, #4]

; 345  :         pPrcmPrm = GetPrmRegisterSet(pEntry->powerDomain);

  00500	e59d3000	 ldr         r3, [sp]
  00504	e5930000	 ldr         r0, [r3]
  00508	eb000000	 bl          GetPrmRegisterSet
  0050c	e58d0018	 str         r0, [sp, #0x18]
  00510	e59d3018	 ldr         r3, [sp, #0x18]
  00514	e58d3008	 str         r3, [sp, #8]

; 346  :         pwken = (volatile unsigned int*)((UCHAR*)pPrcmPrm + pEntry->pwken->offset);

  00518	e59d3000	 ldr         r3, [sp]
  0051c	e283300c	 add         r3, r3, #0xC
  00520	e5933000	 ldr         r3, [r3]
  00524	e2833004	 add         r3, r3, #4
  00528	e59d2008	 ldr         r2, [sp, #8]
  0052c	e5933000	 ldr         r3, [r3]
  00530	e0823003	 add         r3, r2, r3
  00534	e58d300c	 str         r3, [sp, #0xC]

; 347  :         
; 348  :         if (bEnable) 

  00538	e59d302c	 ldr         r3, [sp, #0x2C]
  0053c	e3530000	 cmp         r3, #0
  00540	0a000006	 beq         |$LN3@PrcmDevice@4|

; 349  :             {
; 350  :             SETREG32(pwken, mask);

  00544	e59d300c	 ldr         r3, [sp, #0xC]
  00548	e5932000	 ldr         r2, [r3]
  0054c	e59d3004	 ldr         r3, [sp, #4]
  00550	e1822003	 orr         r2, r2, r3
  00554	e59d300c	 ldr         r3, [sp, #0xC]
  00558	e5832000	 str         r2, [r3]

; 351  :             }
; 352  :         else

  0055c	ea000006	 b           |$LN2@PrcmDevice@4|
  00560		 |$LN3@PrcmDevice@4|

; 353  :             {
; 354  :             CLRREG32(pwken, mask);

  00560	e59d3004	 ldr         r3, [sp, #4]
  00564	e1e02003	 mvn         r2, r3
  00568	e59d300c	 ldr         r3, [sp, #0xC]
  0056c	e5933000	 ldr         r3, [r3]
  00570	e0032002	 and         r2, r3, r2
  00574	e59d300c	 ldr         r3, [sp, #0xC]
  00578	e5832000	 str         r2, [r3]
  0057c		 |$LN2@PrcmDevice@4|
  0057c		 |$LN4@PrcmDevice@4|

; 355  :             }
; 356  :         }
; 357  : 
; 358  :     SPECIAL_DEBUG_MESSAGE_DONE(_PrcmDeviceEnableWakeUp, devId)
; 359  : 
; 360  :     if (!g_bSingleThreaded)

  0057c	e59f3058	 ldr         r3, [pc, #0x58]
  00580	e5933000	 ldr         r3, [r3]
  00584	e3530000	 cmp         r3, #0
  00588	1a00000b	 bne         |$LN1@PrcmDevice@4|

; 361  :         OALMSG(OAL_FUNC, (L"-_PrcmDeviceEnableWakeUp()=%d\r\n", TRUE));

  0058c	e59f3044	 ldr         r3, [pc, #0x44]
  00590	e5933440	 ldr         r3, [r3, #0x440]
  00594	e3130004	 tst         r3, #4
  00598	0a000005	 beq         |$LN10@PrcmDevice@4|
  0059c	e3a01001	 mov         r1, #1
  005a0	e59f002c	 ldr         r0, [pc, #0x2C]
  005a4	eb000000	 bl          NKDbgPrintfW
  005a8	e3a03001	 mov         r3, #1
  005ac	e58d301c	 str         r3, [sp, #0x1C]
  005b0	ea000001	 b           |$LN11@PrcmDevice@4|
  005b4		 |$LN10@PrcmDevice@4|
  005b4	e3a03000	 mov         r3, #0
  005b8	e58d301c	 str         r3, [sp, #0x1C]
  005bc		 |$LN11@PrcmDevice@4|
  005bc		 |$LN1@PrcmDevice@4|

; 362  :     return TRUE;

  005bc	e3a03001	 mov         r3, #1
  005c0	e58d3010	 str         r3, [sp, #0x10]

; 363  : }

  005c4	e59d0010	 ldr         r0, [sp, #0x10]
  005c8	e28dd020	 add         sp, sp, #0x20
  005cc	e89d6000	 ldmia       sp, {sp, lr}
  005d0	e12fff1e	 bx          lr
  005d4		 |$LN15@PrcmDevice@4|
  005d4		 |$LN16@PrcmDevice@4|
  005d4	00000000	 DCD         |??_C@_1EA@CPOENIOI@?$AA?9?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAW?$AAa?$AAk?$AAe?$AAU?$AAp?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  005d8		 |$LN17@PrcmDevice@4|
  005d8	00000000	 DCD         |dpCurSettings|
  005dc		 |$LN18@PrcmDevice@4|
  005dc	00000000	 DCD         |g_bSingleThreaded|
  005e0		 |$LN19@PrcmDevice@4|
  005e0	00000000	 DCD         |??_C@_1EK@NOGBCNIM@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAW?$AAa?$AAk?$AAe?$AAU?$AAp?$AA?$CI?$AAd?$AAe?$AAv?$AAI?$AAd?$AA?$DN?$AA?$CF@|
  005e4		 |$LN20@PrcmDevice@4|
  005e4	00000000	 DCD         |s_rgDeviceLookupTable|
  005e8		 |$M48816|

			 ENDP  ; |_PrcmDeviceEnableWakeUp|

	EXPORT	|??_C@_1EA@KEPHJOIB@?$AA?9?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAF?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FC@GCMBLELH@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAF?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?$CI?$AAd?$AAe?$AAv?$AAI?$AAd?$AA?$DN?$AA?$CF@| [ DATA ] ; `string'
	IMPORT	|OALWakeupLatency_DeviceEnabled|

  00020			 AREA	 |.pdata|, PDATA
|$T48834| DCD	|$LN14@PrcmDevice@5|
	DCD	0x40006304

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@KEPHJOIB@?$AA?9?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAF?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "_", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D"
	DCB	0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "E"
	DCB	0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, "F"
	DCB	0x0, "C", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, "("
	DCB	0x0, ")", 0x0, "=", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FC@GCMBLELH@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAF?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?$CI?$AAd?$AAe?$AAv?$AAI?$AAd?$AA?$DN?$AA?$CF@| DCB "+"
	DCB	0x0, "_", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D"
	DCB	0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "E"
	DCB	0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, "F"
	DCB	0x0, "C", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, "("
	DCB	0x0, "d", 0x0, "e", 0x0, "v", 0x0, "I", 0x0, "d", 0x0, "="
	DCB	0x0, "%", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  005e8			 AREA	 |.text|, CODE, ARM

  005e8		 |_PrcmDeviceEnableFClock| PROC

; 376  : {

  005e8		 |$LN14@PrcmDevice@5|
  005e8	e1a0c00d	 mov         r12, sp
  005ec	e92d0003	 stmdb       sp!, {r0, r1}
  005f0	e92d5000	 stmdb       sp!, {r12, lr}
  005f4	e24dd020	 sub         sp, sp, #0x20
  005f8		 |$M48831|

; 377  :     UINT mask;
; 378  :     OMAP_CM_REGS *pPrcmCm;
; 379  :     volatile unsigned int *pfclken;
; 380  :     DeviceLookupEntry const *pEntry = &s_rgDeviceLookupTable[devId]; 

  005f8	e59d1028	 ldr         r1, [sp, #0x28]
  005fc	e3a0301c	 mov         r3, #0x1C
  00600	e0020391	 mul         r2, r1, r3
  00604	e59f3164	 ldr         r3, [pc, #0x164]
  00608	e0833002	 add         r3, r3, r2
  0060c	e58d3004	 str         r3, [sp, #4]

; 381  :     if (!g_bSingleThreaded)

  00610	e59f3150	 ldr         r3, [pc, #0x150]
  00614	e5933000	 ldr         r3, [r3]
  00618	e3530000	 cmp         r3, #0
  0061c	1a00000c	 bne         |$LN5@PrcmDevice@5|

; 382  :         OALMSG(OAL_FUNC, (L"+_PrcmDeviceEnableFClock(devId=%d, %d)\r\n", devId, bEnable));

  00620	e59f313c	 ldr         r3, [pc, #0x13C]
  00624	e5933440	 ldr         r3, [r3, #0x440]
  00628	e3130004	 tst         r3, #4
  0062c	0a000006	 beq         |$LN8@PrcmDevice@5|
  00630	e59d202c	 ldr         r2, [sp, #0x2C]
  00634	e59d1028	 ldr         r1, [sp, #0x28]
  00638	e59f012c	 ldr         r0, [pc, #0x12C]
  0063c	eb000000	 bl          NKDbgPrintfW
  00640	e3a03001	 mov         r3, #1
  00644	e58d3014	 str         r3, [sp, #0x14]
  00648	ea000001	 b           |$LN9@PrcmDevice@5|
  0064c		 |$LN8@PrcmDevice@5|
  0064c	e3a03000	 mov         r3, #0
  00650	e58d3014	 str         r3, [sp, #0x14]
  00654		 |$LN9@PrcmDevice@5|
  00654		 |$LN5@PrcmDevice@5|

; 383  : 
; 384  :     SPECIAL_DEBUG_MESSAGE2(_PrcmDeviceEnableFClock, devId, bEnable)
; 385  : 
; 386  :     if (pEntry->pfclk != NULL)

  00654	e59d3004	 ldr         r3, [sp, #4]
  00658	e2833004	 add         r3, r3, #4
  0065c	e5933000	 ldr         r3, [r3]
  00660	e3530000	 cmp         r3, #0
  00664	0a000027	 beq         |$LN4@PrcmDevice@5|

; 387  :         {    
; 388  :         mask = pEntry->pfclk->mask;    

  00668	e59d3004	 ldr         r3, [sp, #4]
  0066c	e2833004	 add         r3, r3, #4
  00670	e5933000	 ldr         r3, [r3]
  00674	e2833004	 add         r3, r3, #4
  00678	e5933000	 ldr         r3, [r3]
  0067c	e58d300c	 str         r3, [sp, #0xC]

; 389  :         pPrcmCm = GetCmRegisterSet(pEntry->powerDomain);

  00680	e59d3004	 ldr         r3, [sp, #4]
  00684	e5930000	 ldr         r0, [r3]
  00688	eb000000	 bl          GetCmRegisterSet
  0068c	e58d0018	 str         r0, [sp, #0x18]
  00690	e59d3018	 ldr         r3, [sp, #0x18]
  00694	e58d3008	 str         r3, [sp, #8]

; 390  :         pfclken = (volatile unsigned int*)((UCHAR*)pPrcmCm + pEntry->pfclk->offset);

  00698	e59d3004	 ldr         r3, [sp, #4]
  0069c	e2833004	 add         r3, r3, #4
  006a0	e5933000	 ldr         r3, [r3]
  006a4	e2833008	 add         r3, r3, #8
  006a8	e59d2008	 ldr         r2, [sp, #8]
  006ac	e5933000	 ldr         r3, [r3]
  006b0	e0823003	 add         r3, r2, r3
  006b4	e58d3000	 str         r3, [sp]

; 391  :         
; 392  :         if (bEnable != FALSE)

  006b8	e59d302c	 ldr         r3, [sp, #0x2C]
  006bc	e3530000	 cmp         r3, #0
  006c0	0a000006	 beq         |$LN3@PrcmDevice@5|

; 393  :             {
; 394  :             SETREG32(pfclken, mask);

  006c4	e59d3000	 ldr         r3, [sp]
  006c8	e5932000	 ldr         r2, [r3]
  006cc	e59d300c	 ldr         r3, [sp, #0xC]
  006d0	e1822003	 orr         r2, r2, r3
  006d4	e59d3000	 ldr         r3, [sp]
  006d8	e5832000	 str         r2, [r3]

; 395  :             }
; 396  :         else

  006dc	ea000006	 b           |$LN2@PrcmDevice@5|
  006e0		 |$LN3@PrcmDevice@5|

; 397  :             {
; 398  :             CLRREG32(pfclken, mask);

  006e0	e59d300c	 ldr         r3, [sp, #0xC]
  006e4	e1e02003	 mvn         r2, r3
  006e8	e59d3000	 ldr         r3, [sp]
  006ec	e5933000	 ldr         r3, [r3]
  006f0	e0032002	 and         r2, r3, r2
  006f4	e59d3000	 ldr         r3, [sp]
  006f8	e5832000	 str         r2, [r3]
  006fc		 |$LN2@PrcmDevice@5|

; 399  :             }
; 400  : 
; 401  :         // notify oal of device activity for wakeup latency management
; 402  :         OALWakeupLatency_DeviceEnabled(devId, bEnable);

  006fc	e59d102c	 ldr         r1, [sp, #0x2C]
  00700	e59d0028	 ldr         r0, [sp, #0x28]
  00704	eb000000	 bl          OALWakeupLatency_DeviceEnabled
  00708		 |$LN4@PrcmDevice@5|

; 403  :         }
; 404  :     
; 405  :     SPECIAL_DEBUG_MESSAGE_DONE(_PrcmDeviceEnableFClock, devId)
; 406  : 
; 407  :     if (!g_bSingleThreaded)

  00708	e59f3058	 ldr         r3, [pc, #0x58]
  0070c	e5933000	 ldr         r3, [r3]
  00710	e3530000	 cmp         r3, #0
  00714	1a00000b	 bne         |$LN1@PrcmDevice@5|

; 408  :         OALMSG(OAL_FUNC, (L"-_PrcmDeviceEnableFClock()=%d\r\n", TRUE));

  00718	e59f3044	 ldr         r3, [pc, #0x44]
  0071c	e5933440	 ldr         r3, [r3, #0x440]
  00720	e3130004	 tst         r3, #4
  00724	0a000005	 beq         |$LN10@PrcmDevice@5|
  00728	e3a01001	 mov         r1, #1
  0072c	e59f002c	 ldr         r0, [pc, #0x2C]
  00730	eb000000	 bl          NKDbgPrintfW
  00734	e3a03001	 mov         r3, #1
  00738	e58d301c	 str         r3, [sp, #0x1C]
  0073c	ea000001	 b           |$LN11@PrcmDevice@5|
  00740		 |$LN10@PrcmDevice@5|
  00740	e3a03000	 mov         r3, #0
  00744	e58d301c	 str         r3, [sp, #0x1C]
  00748		 |$LN11@PrcmDevice@5|
  00748		 |$LN1@PrcmDevice@5|

; 409  :     return TRUE;

  00748	e3a03001	 mov         r3, #1
  0074c	e58d3010	 str         r3, [sp, #0x10]

; 410  : }

  00750	e59d0010	 ldr         r0, [sp, #0x10]
  00754	e28dd020	 add         sp, sp, #0x20
  00758	e89d6000	 ldmia       sp, {sp, lr}
  0075c	e12fff1e	 bx          lr
  00760		 |$LN15@PrcmDevice@5|
  00760		 |$LN16@PrcmDevice@5|
  00760	00000000	 DCD         |??_C@_1EA@KEPHJOIB@?$AA?9?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAF?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  00764		 |$LN17@PrcmDevice@5|
  00764	00000000	 DCD         |dpCurSettings|
  00768		 |$LN18@PrcmDevice@5|
  00768	00000000	 DCD         |g_bSingleThreaded|
  0076c		 |$LN19@PrcmDevice@5|
  0076c	00000000	 DCD         |??_C@_1FC@GCMBLELH@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAF?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?$CI?$AAd?$AAe?$AAv?$AAI?$AAd?$AA?$DN?$AA?$CF@|
  00770		 |$LN20@PrcmDevice@5|
  00770	00000000	 DCD         |s_rgDeviceLookupTable|
  00774		 |$M48832|

			 ENDP  ; |_PrcmDeviceEnableFClock|

	EXPORT	|??_C@_1EI@GJAPLPDB@?$AA?9?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAF?$AAC?$AAl?$AAo?$AAc?$AAk?$AA_?$AAD?$AAS?$AAS?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF@| [ DATA ] ; `string'
	EXPORT	|PrcmDeviceEnableFClock|
	EXPORT	|??_C@_1FC@FIOCBMFC@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAF?$AAC?$AAl?$AAo?$AAc?$AAk?$AA_?$AAD?$AAS?$AAS?$AA?$CI?$AAd?$AAe?$AAv@| [ DATA ] ; `string'
	IMPORT	|g_pPrcmCm|

  00028			 AREA	 |.pdata|, PDATA
|$T48856| DCD	|$LN38@PrcmDevice@6|
	DCD	0x4000af04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EI@GJAPLPDB@?$AA?9?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAF?$AAC?$AAl?$AAo?$AAc?$AAk?$AA_?$AAD?$AAS?$AAS?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF@| DCB "-"
	DCB	0x0, "_", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D"
	DCB	0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "E"
	DCB	0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, "F"
	DCB	0x0, "C", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, "_"
	DCB	0x0, "D", 0x0, "S", 0x0, "S", 0x0, "(", 0x0, ")", 0x0, "="
	DCB	0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FC@FIOCBMFC@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAF?$AAC?$AAl?$AAo?$AAc?$AAk?$AA_?$AAD?$AAS?$AAS?$AA?$CI?$AAd?$AAe?$AAv@| DCB "+"
	DCB	0x0, "_", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D"
	DCB	0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "E"
	DCB	0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, "F"
	DCB	0x0, "C", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, "_"
	DCB	0x0, "D", 0x0, "S", 0x0, "S", 0x0, "(", 0x0, "d", 0x0, "e"
	DCB	0x0, "v", 0x0, "I", 0x0, "d", 0x0, "=", 0x0, "%", 0x0, "d"
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  00774			 AREA	 |.text|, CODE, ARM

  00774		 |_PrcmDeviceEnableFClock_DSS| PROC

; 423  : {

  00774		 |$LN38@PrcmDevice@6|
  00774	e1a0c00d	 mov         r12, sp
  00778	e92d0003	 stmdb       sp!, {r0, r1}
  0077c	e92d5000	 stmdb       sp!, {r12, lr}
  00780	e24dd02c	 sub         sp, sp, #0x2C
  00784		 |$M48853|

; 424  :     UINT i;
; 425  :     UINT mask;
; 426  :     BOOL rc = TRUE;

  00784	e3a03001	 mov         r3, #1
  00788	e58d3004	 str         r3, [sp, #4]

; 427  :     SourceDeviceClocks_t *pSrcClocks;
; 428  :     volatile unsigned int *pfclken;
; 429  :     DeviceLookupEntry const *pEntry = &s_rgDeviceLookupTable[devId]; 

  0078c	e59d1034	 ldr         r1, [sp, #0x34]
  00790	e3a0301c	 mov         r3, #0x1C
  00794	e0020391	 mul         r2, r1, r3
  00798	e59f328c	 ldr         r3, [pc, #0x28C]
  0079c	e0833002	 add         r3, r3, r2
  007a0	e58d3008	 str         r3, [sp, #8]

; 430  :     if (!g_bSingleThreaded)

  007a4	e59f3274	 ldr         r3, [pc, #0x274]
  007a8	e5933000	 ldr         r3, [r3]
  007ac	e3530000	 cmp         r3, #0
  007b0	1a00000b	 bne         |$LN23@PrcmDevice@6|

; 431  :         OALMSG(OAL_FUNC, (L"+_PrcmDeviceEnableFClock_DSS(devId=%d)\r\n", devId));

  007b4	e59f3260	 ldr         r3, [pc, #0x260]
  007b8	e5933440	 ldr         r3, [r3, #0x440]
  007bc	e3130004	 tst         r3, #4
  007c0	0a000005	 beq         |$LN26@PrcmDevice@6|
  007c4	e59d1034	 ldr         r1, [sp, #0x34]
  007c8	e59f0258	 ldr         r0, [pc, #0x258]
  007cc	eb000000	 bl          NKDbgPrintfW
  007d0	e3a03001	 mov         r3, #1
  007d4	e58d301c	 str         r3, [sp, #0x1C]
  007d8	ea000001	 b           |$LN27@PrcmDevice@6|
  007dc		 |$LN26@PrcmDevice@6|
  007dc	e3a03000	 mov         r3, #0
  007e0	e58d301c	 str         r3, [sp, #0x1C]
  007e4		 |$LN27@PrcmDevice@6|
  007e4		 |$LN23@PrcmDevice@6|

; 432  :       
; 433  :     SPECIAL_DEBUG_MESSAGE2(_PrcmDeviceEnableFClock_DSS, devId, bEnable)
; 434  : 
; 435  :     pfclken = &g_pPrcmCm->pOMAP_DSS_CM->CM_FCLKEN_DSS;    

  007e4	e59f3238	 ldr         r3, [pc, #0x238]
  007e8	e5933000	 ldr         r3, [r3]
  007ec	e2833018	 add         r3, r3, #0x18
  007f0	e5933000	 ldr         r3, [r3]
  007f4	e58d3000	 str         r3, [sp]

; 436  :     pSrcClocks = pEntry->pSrcClocks;

  007f8	e59d3008	 ldr         r3, [sp, #8]
  007fc	e2833018	 add         r3, r3, #0x18
  00800	e5933000	 ldr         r3, [r3]
  00804	e58d3014	 str         r3, [sp, #0x14]

; 437  : 
; 438  :     // NOTE:
; 439  :     //   Disabling DSS1 and/or DSS2 may potential shutdown a clock that
; 440  :     // is mapped OMAP_DEVICE_DSS.  For right now caller must be cautious
; 441  :     // not to disable dss1 and/or dss2 while dss is enabled.
; 442  :     //
; 443  : 
; 444  :     mask = INREG32(pfclken);

  00808	e59d3000	 ldr         r3, [sp]
  0080c	e5933000	 ldr         r3, [r3]
  00810	e58d3010	 str         r3, [sp, #0x10]

; 445  :     switch (devId)

  00814	e59d3034	 ldr         r3, [sp, #0x34]
  00818	e58d3020	 str         r3, [sp, #0x20]
  0081c	e59d3020	 ldr         r3, [sp, #0x20]
  00820	e243303f	 sub         r3, r3, #0x3F
  00824	e58d3020	 str         r3, [sp, #0x20]
  00828	e59d3020	 ldr         r3, [sp, #0x20]
  0082c	e3530003	 cmp         r3, #3
  00830	8a00005c	 bhi         |$LN2@PrcmDevice@6|
  00834	e59d2020	 ldr         r2, [sp, #0x20]
  00838	e1a03102	 mov         r3, r2, lsl #2
  0083c	e083300f	 add         r3, r3, pc
  00840	e5933004	 ldr         r3, [r3, #4]
  00844	e08ff003	 add         pc, pc, r3
  00848		 |$LN31@PrcmDevice@6|
  00848		 |$LN30@PrcmDevice@6|
  00848		 |$LN32@PrcmDevice@6|
  00848	000000c0	 DCD         0xc0
  0084c		 |$LN33@PrcmDevice@6|
  0084c	0000000c	 DCD         0xc
  00850		 |$LN34@PrcmDevice@6|
  00850	00000048	 DCD         0x48
  00854		 |$LN35@PrcmDevice@6|
  00854	00000084	 DCD         0x84
  00858		 |$LN20@PrcmDevice@6|

; 446  :         {
; 447  :         case OMAP_DEVICE_DSS1:
; 448  :             if (bEnable == TRUE)

  00858	e59d3038	 ldr         r3, [sp, #0x38]
  0085c	e3530001	 cmp         r3, #1
  00860	1a000003	 bne         |$LN19@PrcmDevice@6|

; 449  :                 mask |= CM_CLKEN_DSS1;

  00864	e59d3010	 ldr         r3, [sp, #0x10]
  00868	e3833001	 orr         r3, r3, #1
  0086c	e58d3010	 str         r3, [sp, #0x10]

; 450  :             else

  00870	ea000003	 b           |$LN18@PrcmDevice@6|
  00874		 |$LN19@PrcmDevice@6|

; 451  :                 mask &= ~CM_CLKEN_DSS1;

  00874	e59d2010	 ldr         r2, [sp, #0x10]
  00878	e3e03001	 mvn         r3, #1
  0087c	e0023003	 and         r3, r2, r3
  00880	e58d3010	 str         r3, [sp, #0x10]
  00884		 |$LN18@PrcmDevice@6|

; 452  :             OUTREG32(pfclken, mask);

  00884	e59d2010	 ldr         r2, [sp, #0x10]
  00888	e59d3000	 ldr         r3, [sp]
  0088c	e5832000	 str         r2, [r3]

; 453  :             break;

  00890	ea000047	 b           |$LN21@PrcmDevice@6|
  00894		 |$LN17@PrcmDevice@6|

; 454  : 
; 455  :         case OMAP_DEVICE_DSS2:
; 456  :             if (bEnable == TRUE)

  00894	e59d3038	 ldr         r3, [sp, #0x38]
  00898	e3530001	 cmp         r3, #1
  0089c	1a000003	 bne         |$LN16@PrcmDevice@6|

; 457  :                 mask |= CM_CLKEN_DSS2;

  008a0	e59d3010	 ldr         r3, [sp, #0x10]
  008a4	e3833002	 orr         r3, r3, #2
  008a8	e58d3010	 str         r3, [sp, #0x10]

; 458  :             else

  008ac	ea000003	 b           |$LN15@PrcmDevice@6|
  008b0		 |$LN16@PrcmDevice@6|

; 459  :                 mask &= ~CM_CLKEN_DSS2;

  008b0	e59d2010	 ldr         r2, [sp, #0x10]
  008b4	e3e03002	 mvn         r3, #2
  008b8	e0023003	 and         r3, r2, r3
  008bc	e58d3010	 str         r3, [sp, #0x10]
  008c0		 |$LN15@PrcmDevice@6|

; 460  :             OUTREG32(pfclken, mask);

  008c0	e59d2010	 ldr         r2, [sp, #0x10]
  008c4	e59d3000	 ldr         r3, [sp]
  008c8	e5832000	 str         r2, [r3]

; 461  :             break;

  008cc	ea000038	 b           |$LN21@PrcmDevice@6|
  008d0		 |$LN14@PrcmDevice@6|

; 462  : 
; 463  :         case OMAP_DEVICE_TVOUT:
; 464  :             if (bEnable == TRUE)

  008d0	e59d3038	 ldr         r3, [sp, #0x38]
  008d4	e3530001	 cmp         r3, #1
  008d8	1a000003	 bne         |$LN13@PrcmDevice@6|

; 465  :                 mask |= CM_CLKEN_TV;

  008dc	e59d3010	 ldr         r3, [sp, #0x10]
  008e0	e3833004	 orr         r3, r3, #4
  008e4	e58d3010	 str         r3, [sp, #0x10]

; 466  :             else

  008e8	ea000003	 b           |$LN12@PrcmDevice@6|
  008ec		 |$LN13@PrcmDevice@6|

; 467  :                 mask &= ~CM_CLKEN_TV;

  008ec	e59d2010	 ldr         r2, [sp, #0x10]
  008f0	e3e03004	 mvn         r3, #4
  008f4	e0023003	 and         r3, r2, r3
  008f8	e58d3010	 str         r3, [sp, #0x10]
  008fc		 |$LN12@PrcmDevice@6|

; 468  :             OUTREG32(pfclken, mask);

  008fc	e59d2010	 ldr         r2, [sp, #0x10]
  00900	e59d3000	 ldr         r3, [sp]
  00904	e5832000	 str         r2, [r3]

; 469  :             break;

  00908	ea000029	 b           |$LN21@PrcmDevice@6|
  0090c		 |$LN11@PrcmDevice@6|

; 470  : 
; 471  :         case OMAP_DEVICE_DSS:
; 472  :             for (i = 0; i < pSrcClocks->size; ++i)

  0090c	e3a03000	 mov         r3, #0
  00910	e58d300c	 str         r3, [sp, #0xC]
  00914	ea000002	 b           |$LN10@PrcmDevice@6|
  00918		 |$LN9@PrcmDevice@6|
  00918	e59d300c	 ldr         r3, [sp, #0xC]
  0091c	e2833001	 add         r3, r3, #1
  00920	e58d300c	 str         r3, [sp, #0xC]
  00924		 |$LN10@PrcmDevice@6|
  00924	e59d200c	 ldr         r2, [sp, #0xC]
  00928	e59d3014	 ldr         r3, [sp, #0x14]
  0092c	e5933000	 ldr         r3, [r3]
  00930	e1520003	 cmp         r2, r3
  00934	2a00001a	 bcs         |$LN8@PrcmDevice@6|

; 473  :                 {
; 474  :                 switch (pSrcClocks->rgSourceClocks[i])

  00938	e59d3014	 ldr         r3, [sp, #0x14]
  0093c	e2831004	 add         r1, r3, #4
  00940	e59d200c	 ldr         r2, [sp, #0xC]
  00944	e3a03004	 mov         r3, #4
  00948	e0030392	 mul         r3, r2, r3
  0094c	e0813003	 add         r3, r1, r3
  00950	e5933000	 ldr         r3, [r3]
  00954	e58d3024	 str         r3, [sp, #0x24]
  00958	e59d3024	 ldr         r3, [sp, #0x24]
  0095c	e3530007	 cmp         r3, #7
  00960	0a000003	 beq         |$LN5@PrcmDevice@6|
  00964	e59d3024	 ldr         r3, [sp, #0x24]
  00968	e353001a	 cmp         r3, #0x1A
  0096c	0a000004	 beq         |$LN4@PrcmDevice@6|
  00970	ea000007	 b           |$LN3@PrcmDevice@6|
  00974		 |$LN5@PrcmDevice@6|

; 475  :                     {
; 476  :                     case kDSS1_ALWON_FCLK:
; 477  :                         PrcmDeviceEnableFClock(OMAP_DEVICE_DSS1, bEnable);

  00974	e59d1038	 ldr         r1, [sp, #0x38]
  00978	e3a00040	 mov         r0, #0x40
  0097c	eb000000	 bl          PrcmDeviceEnableFClock

; 478  :                         break;

  00980	ea000006	 b           |$LN6@PrcmDevice@6|
  00984		 |$LN4@PrcmDevice@6|

; 479  : 
; 480  :                     case kDSS2_ALWON_FCLK:
; 481  :                         PrcmDeviceEnableFClock(OMAP_DEVICE_DSS2, bEnable);

  00984	e59d1038	 ldr         r1, [sp, #0x38]
  00988	e3a00041	 mov         r0, #0x41
  0098c	eb000000	 bl          PrcmDeviceEnableFClock

; 482  :                         break;

  00990	ea000002	 b           |$LN6@PrcmDevice@6|
  00994		 |$LN3@PrcmDevice@6|

; 483  : 
; 484  :                     default:
; 485  :                         rc = FALSE;

  00994	e3a03000	 mov         r3, #0
  00998	e58d3004	 str         r3, [sp, #4]

; 486  :                         goto cleanUp;

  0099c	ea000007	 b           |$cleanUp$48283|
  009a0		 |$LN6@PrcmDevice@6|

; 487  :                     }        
; 488  :                 }

  009a0	eaffffdc	 b           |$LN9@PrcmDevice@6|
  009a4		 |$LN8@PrcmDevice@6|

; 489  :             break;

  009a4	ea000002	 b           |$LN21@PrcmDevice@6|
  009a8		 |$LN2@PrcmDevice@6|

; 490  :             
; 491  :         default:
; 492  :             rc = FALSE;

  009a8	e3a03000	 mov         r3, #0
  009ac	e58d3004	 str         r3, [sp, #4]

; 493  :             goto cleanUp;

  009b0	ea000002	 b           |$cleanUp$48283|
  009b4		 |$LN21@PrcmDevice@6|

; 494  :         }
; 495  : 
; 496  :     // notify oal of device activity for wakeup latency management
; 497  :     OALWakeupLatency_DeviceEnabled(devId, bEnable);

  009b4	e59d1038	 ldr         r1, [sp, #0x38]
  009b8	e59d0034	 ldr         r0, [sp, #0x34]
  009bc	eb000000	 bl          OALWakeupLatency_DeviceEnabled
  009c0		 |$cleanUp$48283|

; 498  : 
; 499  :     SPECIAL_DEBUG_MESSAGE_DONE(_PrcmDeviceEnableFClock_DSS, devId)
; 500  : 
; 501  : cleanUp:    
; 502  :     if (!g_bSingleThreaded)

  009c0	e59f3058	 ldr         r3, [pc, #0x58]
  009c4	e5933000	 ldr         r3, [r3]
  009c8	e3530000	 cmp         r3, #0
  009cc	1a00000b	 bne         |$LN1@PrcmDevice@6|

; 503  :         OALMSG(OAL_FUNC, (L"-_PrcmDeviceEnableFClock_DSS()=%d\r\n", rc));

  009d0	e59f3044	 ldr         r3, [pc, #0x44]
  009d4	e5933440	 ldr         r3, [r3, #0x440]
  009d8	e3130004	 tst         r3, #4
  009dc	0a000005	 beq         |$LN28@PrcmDevice@6|
  009e0	e59d1004	 ldr         r1, [sp, #4]
  009e4	e59f002c	 ldr         r0, [pc, #0x2C]
  009e8	eb000000	 bl          NKDbgPrintfW
  009ec	e3a03001	 mov         r3, #1
  009f0	e58d3028	 str         r3, [sp, #0x28]
  009f4	ea000001	 b           |$LN29@PrcmDevice@6|
  009f8		 |$LN28@PrcmDevice@6|
  009f8	e3a03000	 mov         r3, #0
  009fc	e58d3028	 str         r3, [sp, #0x28]
  00a00		 |$LN29@PrcmDevice@6|
  00a00		 |$LN1@PrcmDevice@6|

; 504  :     return rc;

  00a00	e59d3004	 ldr         r3, [sp, #4]
  00a04	e58d3018	 str         r3, [sp, #0x18]

; 505  : }

  00a08	e59d0018	 ldr         r0, [sp, #0x18]
  00a0c	e28dd02c	 add         sp, sp, #0x2C
  00a10	e89d6000	 ldmia       sp, {sp, lr}
  00a14	e12fff1e	 bx          lr
  00a18		 |$LN39@PrcmDevice@6|
  00a18		 |$LN40@PrcmDevice@6|
  00a18	00000000	 DCD         |??_C@_1EI@GJAPLPDB@?$AA?9?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAF?$AAC?$AAl?$AAo?$AAc?$AAk?$AA_?$AAD?$AAS?$AAS?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF@|
  00a1c		 |$LN41@PrcmDevice@6|
  00a1c	00000000	 DCD         |dpCurSettings|
  00a20		 |$LN42@PrcmDevice@6|
  00a20	00000000	 DCD         |g_bSingleThreaded|
  00a24		 |$LN43@PrcmDevice@6|
  00a24	00000000	 DCD         |g_pPrcmCm|
  00a28		 |$LN44@PrcmDevice@6|
  00a28	00000000	 DCD         |??_C@_1FC@FIOCBMFC@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAF?$AAC?$AAl?$AAo?$AAc?$AAk?$AA_?$AAD?$AAS?$AAS?$AA?$CI?$AAd?$AAe?$AAv@|
  00a2c		 |$LN45@PrcmDevice@6|
  00a2c	00000000	 DCD         |s_rgDeviceLookupTable|
  00a30		 |$M48854|

			 ENDP  ; |_PrcmDeviceEnableFClock_DSS|

	EXPORT	|??_C@_1EI@BGCBHLEJ@?$AA?9?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAF?$AAC?$AAl?$AAo?$AAc?$AAk?$AA_?$AAU?$AAS?$AAB?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FC@KOILFLNM@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAF?$AAC?$AAl?$AAo?$AAc?$AAk?$AA_?$AAU?$AAS?$AAB?$AA?$CI?$AAd?$AAe?$AAv@| [ DATA ] ; `string'

  00030			 AREA	 |.pdata|, PDATA
|$T48880| DCD	|$LN24@PrcmDevice@7|
	DCD	0x40006704

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EI@BGCBHLEJ@?$AA?9?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAF?$AAC?$AAl?$AAo?$AAc?$AAk?$AA_?$AAU?$AAS?$AAB?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF@| DCB "-"
	DCB	0x0, "_", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D"
	DCB	0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "E"
	DCB	0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, "F"
	DCB	0x0, "C", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, "_"
	DCB	0x0, "U", 0x0, "S", 0x0, "B", 0x0, "(", 0x0, ")", 0x0, "="
	DCB	0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FC@KOILFLNM@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAF?$AAC?$AAl?$AAo?$AAc?$AAk?$AA_?$AAU?$AAS?$AAB?$AA?$CI?$AAd?$AAe?$AAv@| DCB "+"
	DCB	0x0, "_", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D"
	DCB	0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "E"
	DCB	0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, "F"
	DCB	0x0, "C", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, "_"
	DCB	0x0, "U", 0x0, "S", 0x0, "B", 0x0, "(", 0x0, "d", 0x0, "e"
	DCB	0x0, "v", 0x0, "I", 0x0, "d", 0x0, "=", 0x0, "%", 0x0, "d"
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  00a30			 AREA	 |.text|, CODE, ARM

  00a30		 |_PrcmDeviceEnableFClock_USB| PROC

; 518  : {

  00a30		 |$LN24@PrcmDevice@7|
  00a30	e1a0c00d	 mov         r12, sp
  00a34	e92d0003	 stmdb       sp!, {r0, r1}
  00a38	e92d5000	 stmdb       sp!, {r12, lr}
  00a3c	e24dd018	 sub         sp, sp, #0x18
  00a40		 |$M48877|

; 519  :     BOOL rc = FALSE;

  00a40	e3a03000	 mov         r3, #0
  00a44	e58d3000	 str         r3, [sp]

; 520  :     DeviceLookupEntry const *pEntry;
; 521  :     if (!g_bSingleThreaded)

  00a48	e59f3170	 ldr         r3, [pc, #0x170]
  00a4c	e5933000	 ldr         r3, [r3]
  00a50	e3530000	 cmp         r3, #0
  00a54	1a00000b	 bne         |$LN8@PrcmDevice@7|

; 522  :         OALMSG(OAL_FUNC, (L"+_PrcmDeviceEnableFClock_USB(devId=%d)\r\n", devId));

  00a58	e59f315c	 ldr         r3, [pc, #0x15C]
  00a5c	e5933440	 ldr         r3, [r3, #0x440]
  00a60	e3130004	 tst         r3, #4
  00a64	0a000005	 beq         |$LN11@PrcmDevice@7|
  00a68	e59d1020	 ldr         r1, [sp, #0x20]
  00a6c	e59f0154	 ldr         r0, [pc, #0x154]
  00a70	eb000000	 bl          NKDbgPrintfW
  00a74	e3a03001	 mov         r3, #1
  00a78	e58d300c	 str         r3, [sp, #0xC]
  00a7c	ea000001	 b           |$LN12@PrcmDevice@7|
  00a80		 |$LN11@PrcmDevice@7|
  00a80	e3a03000	 mov         r3, #0
  00a84	e58d300c	 str         r3, [sp, #0xC]
  00a88		 |$LN12@PrcmDevice@7|
  00a88		 |$LN8@PrcmDevice@7|

; 523  : 
; 524  :     SPECIAL_DEBUG_MESSAGE2(_PrcmDeviceEnableFClock_USB, devId, bEnable)
; 525  : 
; 526  :     // determine which fclk to enable/disable
; 527  :     pEntry = &s_rgDeviceLookupTable[devId];

  00a88	e59d1020	 ldr         r1, [sp, #0x20]
  00a8c	e3a0301c	 mov         r3, #0x1C
  00a90	e0020391	 mul         r2, r1, r3
  00a94	e59f3128	 ldr         r3, [pc, #0x128]
  00a98	e0833002	 add         r3, r3, r2
  00a9c	e58d3004	 str         r3, [sp, #4]

; 528  :     switch (devId)

  00aa0	e59d3020	 ldr         r3, [sp, #0x20]
  00aa4	e58d3010	 str         r3, [sp, #0x10]
  00aa8	e59d3010	 ldr         r3, [sp, #0x10]
  00aac	e2433049	 sub         r3, r3, #0x49
  00ab0	e58d3010	 str         r3, [sp, #0x10]
  00ab4	e59d3010	 ldr         r3, [sp, #0x10]
  00ab8	e3530004	 cmp         r3, #4
  00abc	8a000021	 bhi         |$LN2@PrcmDevice@7|
  00ac0	e59d2010	 ldr         r2, [sp, #0x10]
  00ac4	e1a03102	 mov         r3, r2, lsl #2
  00ac8	e083300f	 add         r3, r3, pc
  00acc	e5933004	 ldr         r3, [r3, #4]
  00ad0	e08ff003	 add         pc, pc, r3
  00ad4		 |$LN16@PrcmDevice@7|
  00ad4		 |$LN15@PrcmDevice@7|
  00ad4		 |$LN17@PrcmDevice@7|
  00ad4	00000010	 DCD         0x10
  00ad8		 |$LN18@PrcmDevice@7|
  00ad8	00000010	 DCD         0x10
  00adc		 |$LN19@PrcmDevice@7|
  00adc	00000020	 DCD         0x20
  00ae0		 |$LN20@PrcmDevice@7|
  00ae0	00000020	 DCD         0x20
  00ae4		 |$LN21@PrcmDevice@7|
  00ae4	00000020	 DCD         0x20
  00ae8		 |$LN5@PrcmDevice@7|

; 529  :         {
; 530  :         case OMAP_DEVICE_HSUSB1:    // 48MHz FCLK
; 531  :         case OMAP_DEVICE_HSUSB2:    // 120MHz FCLK
; 532  :             // when these device IDs are used, gate final clock
; 533  :             _PrcmDeviceEnableFClock(devId, bEnable);

  00ae8	e59d1024	 ldr         r1, [sp, #0x24]
  00aec	e59d0020	 ldr         r0, [sp, #0x20]
  00af0	eb000000	 bl          _PrcmDeviceEnableFClock

; 534  :             break; 

  00af4	ea000014	 b           |$LN6@PrcmDevice@7|
  00af8		 |$LN4@PrcmDevice@7|

; 535  : 
; 536  :         case OMAP_DEVICE_USBHOST1:
; 537  :         case OMAP_DEVICE_USBHOST2:
; 538  :         case OMAP_DEVICE_USBHOST3:
; 539  :             // when these device IDs are used, gate entire clock tree
; 540  :             // USB host has 2 FCLKs, 120MHz and 48MHz
; 541  :             // always gate 48MHz FCLK
; 542  :             PrcmDeviceEnableFClock(OMAP_DEVICE_HSUSB1, bEnable);

  00af8	e59d1024	 ldr         r1, [sp, #0x24]
  00afc	e3a00049	 mov         r0, #0x49
  00b00	eb000000	 bl          PrcmDeviceEnableFClock

; 543  :             // if 120MHz FCLK is included in soruce clocks list, gate it as well
; 544  :             if (pEntry->pSrcClocks->size == 4 &&
; 545  :                 pEntry->pSrcClocks->rgSourceClocks[3] == kUSBHOST_120M_FCLK)

  00b04	e59d3004	 ldr         r3, [sp, #4]
  00b08	e2833018	 add         r3, r3, #0x18
  00b0c	e5933000	 ldr         r3, [r3]
  00b10	e5933000	 ldr         r3, [r3]
  00b14	e3530004	 cmp         r3, #4
  00b18	1a000009	 bne         |$LN3@PrcmDevice@7|
  00b1c	e59d3004	 ldr         r3, [sp, #4]
  00b20	e2833018	 add         r3, r3, #0x18
  00b24	e5933000	 ldr         r3, [r3]
  00b28	e2833010	 add         r3, r3, #0x10
  00b2c	e5933000	 ldr         r3, [r3]
  00b30	e3530043	 cmp         r3, #0x43
  00b34	1a000002	 bne         |$LN3@PrcmDevice@7|

; 546  :                 {
; 547  :                 // also gate 120MHz FCLK
; 548  :                 PrcmDeviceEnableFClock(OMAP_DEVICE_HSUSB2, bEnable);

  00b38	e59d1024	 ldr         r1, [sp, #0x24]
  00b3c	e3a0004a	 mov         r0, #0x4A
  00b40	eb000000	 bl          PrcmDeviceEnableFClock
  00b44		 |$LN3@PrcmDevice@7|

; 549  :                 }
; 550  :             break;

  00b44	ea000000	 b           |$LN6@PrcmDevice@7|
  00b48		 |$LN2@PrcmDevice@7|

; 551  :             
; 552  :         default:
; 553  :             goto cleanUp;

  00b48	ea000004	 b           |$cleanUp$48306|
  00b4c		 |$LN6@PrcmDevice@7|

; 554  :         }
; 555  :     
; 556  :     // notify oal of device activity for wakeup latency management
; 557  :     OALWakeupLatency_DeviceEnabled(devId, bEnable);

  00b4c	e59d1024	 ldr         r1, [sp, #0x24]
  00b50	e59d0020	 ldr         r0, [sp, #0x20]
  00b54	eb000000	 bl          OALWakeupLatency_DeviceEnabled

; 558  :     rc = TRUE;

  00b58	e3a03001	 mov         r3, #1
  00b5c	e58d3000	 str         r3, [sp]
  00b60		 |$cleanUp$48306|

; 559  : 
; 560  :     SPECIAL_DEBUG_MESSAGE_DONE(_PrcmDeviceEnableFClock_USB, devId)
; 561  : 
; 562  : cleanUp:    
; 563  :     if (!g_bSingleThreaded)

  00b60	e59f3058	 ldr         r3, [pc, #0x58]
  00b64	e5933000	 ldr         r3, [r3]
  00b68	e3530000	 cmp         r3, #0
  00b6c	1a00000b	 bne         |$LN1@PrcmDevice@7|

; 564  :         OALMSG(OAL_FUNC, (L"-_PrcmDeviceEnableFClock_USB()=%d\r\n", rc));

  00b70	e59f3044	 ldr         r3, [pc, #0x44]
  00b74	e5933440	 ldr         r3, [r3, #0x440]
  00b78	e3130004	 tst         r3, #4
  00b7c	0a000005	 beq         |$LN13@PrcmDevice@7|
  00b80	e59d1000	 ldr         r1, [sp]
  00b84	e59f002c	 ldr         r0, [pc, #0x2C]
  00b88	eb000000	 bl          NKDbgPrintfW
  00b8c	e3a03001	 mov         r3, #1
  00b90	e58d3014	 str         r3, [sp, #0x14]
  00b94	ea000001	 b           |$LN14@PrcmDevice@7|
  00b98		 |$LN13@PrcmDevice@7|
  00b98	e3a03000	 mov         r3, #0
  00b9c	e58d3014	 str         r3, [sp, #0x14]
  00ba0		 |$LN14@PrcmDevice@7|
  00ba0		 |$LN1@PrcmDevice@7|

; 565  :     return rc;

  00ba0	e59d3000	 ldr         r3, [sp]
  00ba4	e58d3008	 str         r3, [sp, #8]

; 566  : }

  00ba8	e59d0008	 ldr         r0, [sp, #8]
  00bac	e28dd018	 add         sp, sp, #0x18
  00bb0	e89d6000	 ldmia       sp, {sp, lr}
  00bb4	e12fff1e	 bx          lr
  00bb8		 |$LN25@PrcmDevice@7|
  00bb8		 |$LN26@PrcmDevice@7|
  00bb8	00000000	 DCD         |??_C@_1EI@BGCBHLEJ@?$AA?9?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAF?$AAC?$AAl?$AAo?$AAc?$AAk?$AA_?$AAU?$AAS?$AAB?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF@|
  00bbc		 |$LN27@PrcmDevice@7|
  00bbc	00000000	 DCD         |dpCurSettings|
  00bc0		 |$LN28@PrcmDevice@7|
  00bc0	00000000	 DCD         |g_bSingleThreaded|
  00bc4		 |$LN29@PrcmDevice@7|
  00bc4	00000000	 DCD         |s_rgDeviceLookupTable|
  00bc8		 |$LN30@PrcmDevice@7|
  00bc8	00000000	 DCD         |??_C@_1FC@KOILFLNM@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAF?$AAC?$AAl?$AAo?$AAc?$AAk?$AA_?$AAU?$AAS?$AAB?$AA?$CI?$AAd?$AAe?$AAv@|
  00bcc		 |$M48878|

			 ENDP  ; |_PrcmDeviceEnableFClock_USB|

	EXPORT	|??_C@_1EA@KNFBIFDK@?$AA?9?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FC@IOGCKABF@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?$CI?$AAd?$AAe?$AAv?$AAI?$AAd?$AA?$DN?$AA?$CF@| [ DATA ] ; `string'

  00038			 AREA	 |.pdata|, PDATA
|$T48896| DCD	|$LN15@PrcmDevice@8|
	DCD	0x40006d04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@KNFBIFDK@?$AA?9?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "_", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D"
	DCB	0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "E"
	DCB	0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, "I"
	DCB	0x0, "C", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, "("
	DCB	0x0, ")", 0x0, "=", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FC@IOGCKABF@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?$CI?$AAd?$AAe?$AAv?$AAI?$AAd?$AA?$DN?$AA?$CF@| DCB "+"
	DCB	0x0, "_", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D"
	DCB	0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "E"
	DCB	0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, "I"
	DCB	0x0, "C", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, "("
	DCB	0x0, "d", 0x0, "e", 0x0, "v", 0x0, "I", 0x0, "d", 0x0, "="
	DCB	0x0, "%", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  00bcc			 AREA	 |.text|, CODE, ARM

  00bcc		 |_PrcmDeviceEnableIClock| PROC

; 579  : {

  00bcc		 |$LN15@PrcmDevice@8|
  00bcc	e1a0c00d	 mov         r12, sp
  00bd0	e92d0003	 stmdb       sp!, {r0, r1}
  00bd4	e92d5000	 stmdb       sp!, {r12, lr}
  00bd8	e24dd020	 sub         sp, sp, #0x20
  00bdc		 |$M48893|

; 580  :     UINT mask;
; 581  :     OMAP_CM_REGS *pPrcmCm;
; 582  :     volatile unsigned int *piclken;
; 583  :     DeviceLookupEntry const *pEntry = &s_rgDeviceLookupTable[devId];    

  00bdc	e59d1028	 ldr         r1, [sp, #0x28]
  00be0	e3a0301c	 mov         r3, #0x1C
  00be4	e0020391	 mul         r2, r1, r3
  00be8	e59f318c	 ldr         r3, [pc, #0x18C]
  00bec	e0833002	 add         r3, r3, r2
  00bf0	e58d3000	 str         r3, [sp]

; 584  :     if (!g_bSingleThreaded)

  00bf4	e59f3178	 ldr         r3, [pc, #0x178]
  00bf8	e5933000	 ldr         r3, [r3]
  00bfc	e3530000	 cmp         r3, #0
  00c00	1a00000c	 bne         |$LN6@PrcmDevice@8|

; 585  :         OALMSG(OAL_FUNC, (L"+_PrcmDeviceEnableIClock(devId=%d, %d)\r\n", devId, bEnable));

  00c04	e59f3164	 ldr         r3, [pc, #0x164]
  00c08	e5933440	 ldr         r3, [r3, #0x440]
  00c0c	e3130004	 tst         r3, #4
  00c10	0a000006	 beq         |$LN9@PrcmDevice@8|
  00c14	e59d202c	 ldr         r2, [sp, #0x2C]
  00c18	e59d1028	 ldr         r1, [sp, #0x28]
  00c1c	e59f0154	 ldr         r0, [pc, #0x154]
  00c20	eb000000	 bl          NKDbgPrintfW
  00c24	e3a03001	 mov         r3, #1
  00c28	e58d3014	 str         r3, [sp, #0x14]
  00c2c	ea000001	 b           |$LN10@PrcmDevice@8|
  00c30		 |$LN9@PrcmDevice@8|
  00c30	e3a03000	 mov         r3, #0
  00c34	e58d3014	 str         r3, [sp, #0x14]
  00c38		 |$LN10@PrcmDevice@8|
  00c38		 |$LN6@PrcmDevice@8|

; 586  : 
; 587  :     SPECIAL_DEBUG_MESSAGE2(_PrcmDeviceEnableIClock, devId, bEnable)
; 588  : 
; 589  :     if (pEntry->piclk != NULL)

  00c38	e59d3000	 ldr         r3, [sp]
  00c3c	e2833008	 add         r3, r3, #8
  00c40	e5933000	 ldr         r3, [r3]
  00c44	e3530000	 cmp         r3, #0
  00c48	0a000031	 beq         |$LN5@PrcmDevice@8|

; 590  :         {
; 591  :         mask = pEntry->piclk->mask;    

  00c4c	e59d3000	 ldr         r3, [sp]
  00c50	e2833008	 add         r3, r3, #8
  00c54	e5933000	 ldr         r3, [r3]
  00c58	e2833004	 add         r3, r3, #4
  00c5c	e5933000	 ldr         r3, [r3]
  00c60	e58d300c	 str         r3, [sp, #0xC]

; 592  :         pPrcmCm = GetCmRegisterSet(pEntry->powerDomain);

  00c64	e59d3000	 ldr         r3, [sp]
  00c68	e5930000	 ldr         r0, [r3]
  00c6c	eb000000	 bl          GetCmRegisterSet
  00c70	e58d0018	 str         r0, [sp, #0x18]
  00c74	e59d3018	 ldr         r3, [sp, #0x18]
  00c78	e58d3008	 str         r3, [sp, #8]

; 593  :         piclken = (volatile unsigned int*)((UCHAR*)pPrcmCm + pEntry->piclk->offset);        

  00c7c	e59d3000	 ldr         r3, [sp]
  00c80	e2833008	 add         r3, r3, #8
  00c84	e5933000	 ldr         r3, [r3]
  00c88	e2833008	 add         r3, r3, #8
  00c8c	e59d2008	 ldr         r2, [sp, #8]
  00c90	e5933000	 ldr         r3, [r3]
  00c94	e0823003	 add         r3, r2, r3
  00c98	e58d3004	 str         r3, [sp, #4]

; 594  : 
; 595  :         if (bEnable != FALSE)

  00c9c	e59d302c	 ldr         r3, [sp, #0x2C]
  00ca0	e3530000	 cmp         r3, #0
  00ca4	0a000010	 beq         |$LN4@PrcmDevice@8|

; 596  :             {
; 597  :             _PrcmDeviceAddrefDeviceDomain(pEntry->powerDomain);

  00ca8	e59d3000	 ldr         r3, [sp]
  00cac	e5930000	 ldr         r0, [r3]
  00cb0	eb000000	 bl          _PrcmDeviceAddrefDeviceDomain

; 598  :             SETREG32(piclken, mask);

  00cb4	e59d3004	 ldr         r3, [sp, #4]
  00cb8	e5932000	 ldr         r2, [r3]
  00cbc	e59d300c	 ldr         r3, [sp, #0xC]
  00cc0	e1822003	 orr         r2, r2, r3
  00cc4	e59d3004	 ldr         r3, [sp, #4]
  00cc8	e5832000	 str         r2, [r3]

; 599  :             
; 600  :             // wait until device is accessible
; 601  :             if (pEntry->pidlestatus != NULL)

  00ccc	e59d3000	 ldr         r3, [sp]
  00cd0	e2833010	 add         r3, r3, #0x10
  00cd4	e5933000	 ldr         r3, [r3]
  00cd8	e3530000	 cmp         r3, #0
  00cdc	0a000001	 beq         |$LN3@PrcmDevice@8|

; 602  :                 {
; 603  :                 _PrcmDeviceWaitForDeviceAccess(devId);

  00ce0	e59d0028	 ldr         r0, [sp, #0x28]
  00ce4	eb000000	 bl          _PrcmDeviceWaitForDeviceAccess
  00ce8		 |$LN3@PrcmDevice@8|

; 604  :                 }
; 605  :             }
; 606  :         else

  00ce8	ea000009	 b           |$LN2@PrcmDevice@8|
  00cec		 |$LN4@PrcmDevice@8|

; 607  :             {
; 608  :             CLRREG32(piclken, mask);

  00cec	e59d300c	 ldr         r3, [sp, #0xC]
  00cf0	e1e02003	 mvn         r2, r3
  00cf4	e59d3004	 ldr         r3, [sp, #4]
  00cf8	e5933000	 ldr         r3, [r3]
  00cfc	e0032002	 and         r2, r3, r2
  00d00	e59d3004	 ldr         r3, [sp, #4]
  00d04	e5832000	 str         r2, [r3]

; 609  :             _PrcmDeviceReleaseDeviceDomain(pEntry->powerDomain);

  00d08	e59d3000	 ldr         r3, [sp]
  00d0c	e5930000	 ldr         r0, [r3]
  00d10	eb000000	 bl          _PrcmDeviceReleaseDeviceDomain
  00d14		 |$LN2@PrcmDevice@8|
  00d14		 |$LN5@PrcmDevice@8|

; 610  :             }    
; 611  :         }
; 612  : 
; 613  :     SPECIAL_DEBUG_MESSAGE_DONE(_PrcmDeviceEnableIClock, devId)
; 614  : 
; 615  :     if (!g_bSingleThreaded)

  00d14	e59f3058	 ldr         r3, [pc, #0x58]
  00d18	e5933000	 ldr         r3, [r3]
  00d1c	e3530000	 cmp         r3, #0
  00d20	1a00000b	 bne         |$LN1@PrcmDevice@8|

; 616  :         OALMSG(OAL_FUNC, (L"-_PrcmDeviceEnableIClock()=%d\r\n", TRUE));

  00d24	e59f3044	 ldr         r3, [pc, #0x44]
  00d28	e5933440	 ldr         r3, [r3, #0x440]
  00d2c	e3130004	 tst         r3, #4
  00d30	0a000005	 beq         |$LN11@PrcmDevice@8|
  00d34	e3a01001	 mov         r1, #1
  00d38	e59f002c	 ldr         r0, [pc, #0x2C]
  00d3c	eb000000	 bl          NKDbgPrintfW
  00d40	e3a03001	 mov         r3, #1
  00d44	e58d301c	 str         r3, [sp, #0x1C]
  00d48	ea000001	 b           |$LN12@PrcmDevice@8|
  00d4c		 |$LN11@PrcmDevice@8|
  00d4c	e3a03000	 mov         r3, #0
  00d50	e58d301c	 str         r3, [sp, #0x1C]
  00d54		 |$LN12@PrcmDevice@8|
  00d54		 |$LN1@PrcmDevice@8|

; 617  :     return TRUE;

  00d54	e3a03001	 mov         r3, #1
  00d58	e58d3010	 str         r3, [sp, #0x10]

; 618  : }

  00d5c	e59d0010	 ldr         r0, [sp, #0x10]
  00d60	e28dd020	 add         sp, sp, #0x20
  00d64	e89d6000	 ldmia       sp, {sp, lr}
  00d68	e12fff1e	 bx          lr
  00d6c		 |$LN16@PrcmDevice@8|
  00d6c		 |$LN17@PrcmDevice@8|
  00d6c	00000000	 DCD         |??_C@_1EA@KNFBIFDK@?$AA?9?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  00d70		 |$LN18@PrcmDevice@8|
  00d70	00000000	 DCD         |dpCurSettings|
  00d74		 |$LN19@PrcmDevice@8|
  00d74	00000000	 DCD         |g_bSingleThreaded|
  00d78		 |$LN20@PrcmDevice@8|
  00d78	00000000	 DCD         |??_C@_1FC@IOGCKABF@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?$CI?$AAd?$AAe?$AAv?$AAI?$AAd?$AA?$DN?$AA?$CF@|
  00d7c		 |$LN21@PrcmDevice@8|
  00d7c	00000000	 DCD         |s_rgDeviceLookupTable|
  00d80		 |$M48894|

			 ENDP  ; |_PrcmDeviceEnableIClock|

	EXPORT	|Unlock|
	EXPORT	|Lock|
	IMPORT	|PrcmDomainSetClockState|
	IMPORT	|PrcmDomainSetWakeupDependency|
	IMPORT	|PrcmDomainSetSleepDependency|
	IMPORT	|s_rgClockDomainDependency|

  00040			 AREA	 |.pdata|, PDATA
|$T48907| DCD	|$LN8@PrcmDevice@9|
	DCD	0x40004c03
; Function compile flags: /Odtp

  00d80			 AREA	 |.text|, CODE, ARM

  00d80		 |_PrcmDeviceAddrefDeviceDomain| PROC

; 90   : {

  00d80		 |$LN8@PrcmDevice@9|
  00d80	e1a0c00d	 mov         r12, sp
  00d84	e92d0001	 stmdb       sp!, {r0}
  00d88	e92d5000	 stmdb       sp!, {r12, lr}
  00d8c		 |$M48904|

; 91   :     // UNDONE:
; 92   :     //  Potential deadlock
; 93   :     //
; 94   :     Lock(Mutex_DeviceClock);

  00d8c	e3a00000	 mov         r0, #0
  00d90	eb000000	 bl          Lock

; 95   :     s_rgActiveDomainDeviceCount[powerDomain]++;

  00d94	e59d1008	 ldr         r1, [sp, #8]
  00d98	e3a03004	 mov         r3, #4
  00d9c	e0020391	 mul         r2, r1, r3
  00da0	e59f3104	 ldr         r3, [pc, #0x104]
  00da4	e0833002	 add         r3, r3, r2
  00da8	e5933000	 ldr         r3, [r3]
  00dac	e2830001	 add         r0, r3, #1
  00db0	e59d1008	 ldr         r1, [sp, #8]
  00db4	e3a03004	 mov         r3, #4
  00db8	e0020391	 mul         r2, r1, r3
  00dbc	e59f30e8	 ldr         r3, [pc, #0xE8]
  00dc0	e0833002	 add         r3, r3, r2
  00dc4	e5830000	 str         r0, [r3]

; 96   :     if (s_rgActiveDomainDeviceCount[powerDomain] == 1)

  00dc8	e59d1008	 ldr         r1, [sp, #8]
  00dcc	e3a03004	 mov         r3, #4
  00dd0	e0020391	 mul         r2, r1, r3
  00dd4	e59f30d0	 ldr         r3, [pc, #0xD0]
  00dd8	e0833002	 add         r3, r3, r2
  00ddc	e5933000	 ldr         r3, [r3]
  00de0	e3530001	 cmp         r3, #1
  00de4	1a00002b	 bne         |$LN3@PrcmDevice@9|

; 97   :         {
; 98   :         if ((s_rgClockDomainDependency[powerDomain].requiredSleepDependency & WKDEP_EN_MPU) == 0)

  00de8	e59d1008	 ldr         r1, [sp, #8]
  00dec	e3a0300c	 mov         r3, #0xC
  00df0	e0020391	 mul         r2, r1, r3
  00df4	e59f30ac	 ldr         r3, [pc, #0xAC]
  00df8	e0833002	 add         r3, r3, r2
  00dfc	e2833008	 add         r3, r3, #8
  00e00	e5933000	 ldr         r3, [r3]
  00e04	e3130002	 tst         r3, #2
  00e08	1a000003	 bne         |$LN2@PrcmDevice@9|

; 99   :             {
; 100  :             // if sleep dependency is dynamic then associate sleep dependency
; 101  :             PrcmDomainSetSleepDependency(powerDomain, WKDEP_EN_MPU, TRUE);

  00e0c	e3a02001	 mov         r2, #1
  00e10	e3a01002	 mov         r1, #2
  00e14	e59d0008	 ldr         r0, [sp, #8]
  00e18	eb000000	 bl          PrcmDomainSetSleepDependency
  00e1c		 |$LN2@PrcmDevice@9|

; 102  :             }
; 103  : 
; 104  :         // check if domain dependency is fixed or not
; 105  :         if ((s_rgClockDomainDependency[powerDomain].requiredWakeupDependency & WKDEP_EN_MPU) == 0)

  00e1c	e59d1008	 ldr         r1, [sp, #8]
  00e20	e3a0300c	 mov         r3, #0xC
  00e24	e0020391	 mul         r2, r1, r3
  00e28	e59f3078	 ldr         r3, [pc, #0x78]
  00e2c	e0833002	 add         r3, r3, r2
  00e30	e2833004	 add         r3, r3, #4
  00e34	e5933000	 ldr         r3, [r3]
  00e38	e3130002	 tst         r3, #2
  00e3c	1a000015	 bne         |$LN1@PrcmDevice@9|

; 106  :             {
; 107  :             // if wake-up dependency is dynamic then associate wake-up dependency
; 108  :             PrcmDomainSetWakeupDependency(powerDomain, WKDEP_EN_MPU, TRUE);

  00e40	e3a02001	 mov         r2, #1
  00e44	e3a01002	 mov         r1, #2
  00e48	e59d0008	 ldr         r0, [sp, #8]
  00e4c	eb000000	 bl          PrcmDomainSetWakeupDependency

; 109  : 
; 110  :             // generate a software supervised wake-up to enable clock domain
; 111  :             PrcmDomainSetClockState(powerDomain,
; 112  :                             s_rgClockDomainDependency[powerDomain].clockDomain,
; 113  :                             CLKSTCTRL_WAKEUP
; 114  :                             );

  00e50	e3a02002	 mov         r2, #2
  00e54	e59d0008	 ldr         r0, [sp, #8]
  00e58	e3a0300c	 mov         r3, #0xC
  00e5c	e0010390	 mul         r1, r0, r3
  00e60	e59f3040	 ldr         r3, [pc, #0x40]
  00e64	e0833001	 add         r3, r3, r1
  00e68	e5931000	 ldr         r1, [r3]
  00e6c	e59d0008	 ldr         r0, [sp, #8]
  00e70	eb000000	 bl          PrcmDomainSetClockState

; 115  : 
; 116  :             PrcmDomainSetClockState(powerDomain,
; 117  :                             s_rgClockDomainDependency[powerDomain].clockDomain,
; 118  :                             CLKSTCTRL_AUTOMATIC
; 119  :                             );

  00e74	e3a02003	 mov         r2, #3
  00e78	e59d0008	 ldr         r0, [sp, #8]
  00e7c	e3a0300c	 mov         r3, #0xC
  00e80	e0010390	 mul         r1, r0, r3
  00e84	e59f301c	 ldr         r3, [pc, #0x1C]
  00e88	e0833001	 add         r3, r3, r1
  00e8c	e5931000	 ldr         r1, [r3]
  00e90	e59d0008	 ldr         r0, [sp, #8]
  00e94	eb000000	 bl          PrcmDomainSetClockState
  00e98		 |$LN1@PrcmDevice@9|
  00e98		 |$LN3@PrcmDevice@9|

; 120  :             }
; 121  :         }
; 122  :     Unlock(Mutex_DeviceClock);    

  00e98	e3a00000	 mov         r0, #0
  00e9c	eb000000	 bl          Unlock

; 123  : }

  00ea0	e89d6000	 ldmia       sp, {sp, lr}
  00ea4	e12fff1e	 bx          lr
  00ea8		 |$LN9@PrcmDevice@9|
  00ea8		 |$LN10@PrcmDevice@9|
  00ea8	00000000	 DCD         |s_rgClockDomainDependency|
  00eac		 |$LN11@PrcmDevice@9|
  00eac	00000000	 DCD         |s_rgActiveDomainDeviceCount|
  00eb0		 |$M48905|

			 ENDP  ; |_PrcmDeviceAddrefDeviceDomain|

	IMPORT	|EnterCriticalSection|
	IMPORT	|g_rgPrcmMutex|
	IMPORT	|g_PrcmPostInit|
; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\oal\prcm\prcm_priv.h

  00000			 AREA	 |.pdata|, PDATA
|$T48915| DCD	|$LN6@Lock|
	DCD	0x40001603
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Lock|	 PROC

; 266  : {

  00000		 |$LN6@Lock|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M48912|

; 267  :     if (g_PrcmPostInit && !g_bSingleThreaded) 

  0000c	e59f3040	 ldr         r3, [pc, #0x40]
  00010	e5933000	 ldr         r3, [r3]
  00014	e3530000	 cmp         r3, #0
  00018	0a000009	 beq         |$LN1@Lock|
  0001c	e59f302c	 ldr         r3, [pc, #0x2C]
  00020	e5933000	 ldr         r3, [r3]
  00024	e3530000	 cmp         r3, #0
  00028	1a000005	 bne         |$LN1@Lock|

; 268  :         {
; 269  :         EnterCriticalSection(&g_rgPrcmMutex[mutexId]);

  0002c	e59d1008	 ldr         r1, [sp, #8]
  00030	e3a03014	 mov         r3, #0x14
  00034	e0020391	 mul         r2, r1, r3
  00038	e59f300c	 ldr         r3, [pc, #0xC]
  0003c	e0830002	 add         r0, r3, r2
  00040	eb000000	 bl          EnterCriticalSection
  00044		 |$LN1@Lock|

; 270  :         }
; 271  : }

  00044	e89d6000	 ldmia       sp, {sp, lr}
  00048	e12fff1e	 bx          lr
  0004c		 |$LN7@Lock|
  0004c		 |$LN8@Lock|
  0004c	00000000	 DCD         |g_rgPrcmMutex|
  00050		 |$LN9@Lock|
  00050	00000000	 DCD         |g_bSingleThreaded|
  00054		 |$LN10@Lock|
  00054	00000000	 DCD         |g_PrcmPostInit|
  00058		 |$M48913|

			 ENDP  ; |Lock|

	IMPORT	|LeaveCriticalSection|

  00000			 AREA	 |.pdata|, PDATA
|$T48926| DCD	|$LN6@Unlock|
	DCD	0x40001603
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Unlock| PROC

; 277  : {

  00000		 |$LN6@Unlock|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M48923|

; 278  :     if (g_PrcmPostInit && !g_bSingleThreaded)

  0000c	e59f3040	 ldr         r3, [pc, #0x40]
  00010	e5933000	 ldr         r3, [r3]
  00014	e3530000	 cmp         r3, #0
  00018	0a000009	 beq         |$LN1@Unlock|
  0001c	e59f302c	 ldr         r3, [pc, #0x2C]
  00020	e5933000	 ldr         r3, [r3]
  00024	e3530000	 cmp         r3, #0
  00028	1a000005	 bne         |$LN1@Unlock|

; 279  :         {
; 280  :         LeaveCriticalSection(&g_rgPrcmMutex[mutexId]);

  0002c	e59d1008	 ldr         r1, [sp, #8]
  00030	e3a03014	 mov         r3, #0x14
  00034	e0020391	 mul         r2, r1, r3
  00038	e59f300c	 ldr         r3, [pc, #0xC]
  0003c	e0830002	 add         r0, r3, r2
  00040	eb000000	 bl          LeaveCriticalSection
  00044		 |$LN1@Unlock|

; 281  :         }
; 282  : }

  00044	e89d6000	 ldmia       sp, {sp, lr}
  00048	e12fff1e	 bx          lr
  0004c		 |$LN7@Unlock|
  0004c		 |$LN8@Unlock|
  0004c	00000000	 DCD         |g_rgPrcmMutex|
  00050		 |$LN9@Unlock|
  00050	00000000	 DCD         |g_bSingleThreaded|
  00054		 |$LN10@Unlock|
  00054	00000000	 DCD         |g_PrcmPostInit|
  00058		 |$M48924|

			 ENDP  ; |Unlock|


  00048			 AREA	 |.pdata|, PDATA
|$T48937| DCD	|$LN9@PrcmDevice@10|
	DCD	0x40005403
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\oal\prcm\prcm_device.c

  00eb0			 AREA	 |.text|, CODE, ARM

  00eb0		 |_PrcmDeviceReleaseDeviceDomain| PROC

; 134  : {

  00eb0		 |$LN9@PrcmDevice@10|
  00eb0	e1a0c00d	 mov         r12, sp
  00eb4	e92d0001	 stmdb       sp!, {r0}
  00eb8	e92d5000	 stmdb       sp!, {r12, lr}
  00ebc		 |$M48934|

; 135  :     // UNDONE:
; 136  :     //  Potential deadlock
; 137  :     //
; 138  :     Lock(Mutex_DeviceClock);

  00ebc	e3a00000	 mov         r0, #0
  00ec0	eb000000	 bl          Lock

; 139  :     if (s_rgActiveDomainDeviceCount[powerDomain] != 0)

  00ec4	e59d1008	 ldr         r1, [sp, #8]
  00ec8	e3a03004	 mov         r3, #4
  00ecc	e0020391	 mul         r2, r1, r3
  00ed0	e59f3124	 ldr         r3, [pc, #0x124]
  00ed4	e0833002	 add         r3, r3, r2
  00ed8	e5933000	 ldr         r3, [r3]
  00edc	e3530000	 cmp         r3, #0
  00ee0	0a000040	 beq         |$LN4@PrcmDevice@10|

; 140  :         {
; 141  :         s_rgActiveDomainDeviceCount[powerDomain]--;

  00ee4	e59d1008	 ldr         r1, [sp, #8]
  00ee8	e3a03004	 mov         r3, #4
  00eec	e0020391	 mul         r2, r1, r3
  00ef0	e59f3104	 ldr         r3, [pc, #0x104]
  00ef4	e0833002	 add         r3, r3, r2
  00ef8	e5933000	 ldr         r3, [r3]
  00efc	e2430001	 sub         r0, r3, #1
  00f00	e59d1008	 ldr         r1, [sp, #8]
  00f04	e3a03004	 mov         r3, #4
  00f08	e0020391	 mul         r2, r1, r3
  00f0c	e59f30e8	 ldr         r3, [pc, #0xE8]
  00f10	e0833002	 add         r3, r3, r2
  00f14	e5830000	 str         r0, [r3]

; 142  :         if (s_rgActiveDomainDeviceCount[powerDomain] == 0)

  00f18	e59d1008	 ldr         r1, [sp, #8]
  00f1c	e3a03004	 mov         r3, #4
  00f20	e0020391	 mul         r2, r1, r3
  00f24	e59f30d0	 ldr         r3, [pc, #0xD0]
  00f28	e0833002	 add         r3, r3, r2
  00f2c	e5933000	 ldr         r3, [r3]
  00f30	e3530000	 cmp         r3, #0
  00f34	1a00002b	 bne         |$LN3@PrcmDevice@10|

; 143  :             {
; 144  :             if ((s_rgClockDomainDependency[powerDomain].requiredWakeupDependency & WKDEP_EN_MPU) == 0)

  00f38	e59d1008	 ldr         r1, [sp, #8]
  00f3c	e3a0300c	 mov         r3, #0xC
  00f40	e0020391	 mul         r2, r1, r3
  00f44	e59f30ac	 ldr         r3, [pc, #0xAC]
  00f48	e0833002	 add         r3, r3, r2
  00f4c	e2833004	 add         r3, r3, #4
  00f50	e5933000	 ldr         r3, [r3]
  00f54	e3130002	 tst         r3, #2
  00f58	1a000003	 bne         |$LN2@PrcmDevice@10|

; 145  :                 {
; 146  :                 // if wake-up dependency is dynamic then dis-associate wake-up dependency
; 147  :                 PrcmDomainSetWakeupDependency(powerDomain, WKDEP_EN_MPU, FALSE);

  00f5c	e3a02000	 mov         r2, #0
  00f60	e3a01002	 mov         r1, #2
  00f64	e59d0008	 ldr         r0, [sp, #8]
  00f68	eb000000	 bl          PrcmDomainSetWakeupDependency
  00f6c		 |$LN2@PrcmDevice@10|

; 148  :                 }
; 149  : 
; 150  :             if ((s_rgClockDomainDependency[powerDomain].requiredSleepDependency & WKDEP_EN_MPU) == 0)

  00f6c	e59d1008	 ldr         r1, [sp, #8]
  00f70	e3a0300c	 mov         r3, #0xC
  00f74	e0020391	 mul         r2, r1, r3
  00f78	e59f3078	 ldr         r3, [pc, #0x78]
  00f7c	e0833002	 add         r3, r3, r2
  00f80	e2833008	 add         r3, r3, #8
  00f84	e5933000	 ldr         r3, [r3]
  00f88	e3130002	 tst         r3, #2
  00f8c	1a000015	 bne         |$LN1@PrcmDevice@10|

; 151  :                 {
; 152  :                 // if sleep dependency is dynamic then dis-associate sleep dependency
; 153  :                 PrcmDomainSetSleepDependency(powerDomain, WKDEP_EN_MPU, FALSE);

  00f90	e3a02000	 mov         r2, #0
  00f94	e3a01002	 mov         r1, #2
  00f98	e59d0008	 ldr         r0, [sp, #8]
  00f9c	eb000000	 bl          PrcmDomainSetSleepDependency

; 154  : 
; 155  :                 // generate a software supervised sleep to disable clock domain
; 156  :                 PrcmDomainSetClockState(powerDomain,
; 157  :                                 s_rgClockDomainDependency[powerDomain].clockDomain,
; 158  :                                 CLKSTCTRL_SLEEP
; 159  :                                 );

  00fa0	e3a02001	 mov         r2, #1
  00fa4	e59d0008	 ldr         r0, [sp, #8]
  00fa8	e3a0300c	 mov         r3, #0xC
  00fac	e0010390	 mul         r1, r0, r3
  00fb0	e59f3040	 ldr         r3, [pc, #0x40]
  00fb4	e0833001	 add         r3, r3, r1
  00fb8	e5931000	 ldr         r1, [r3]
  00fbc	e59d0008	 ldr         r0, [sp, #8]
  00fc0	eb000000	 bl          PrcmDomainSetClockState

; 160  : 
; 161  :                 PrcmDomainSetClockState(powerDomain,
; 162  :                                 s_rgClockDomainDependency[powerDomain].clockDomain,
; 163  :                                 CLKSTCTRL_AUTOMATIC
; 164  :                                 );

  00fc4	e3a02003	 mov         r2, #3
  00fc8	e59d0008	 ldr         r0, [sp, #8]
  00fcc	e3a0300c	 mov         r3, #0xC
  00fd0	e0010390	 mul         r1, r0, r3
  00fd4	e59f301c	 ldr         r3, [pc, #0x1C]
  00fd8	e0833001	 add         r3, r3, r1
  00fdc	e5931000	 ldr         r1, [r3]
  00fe0	e59d0008	 ldr         r0, [sp, #8]
  00fe4	eb000000	 bl          PrcmDomainSetClockState
  00fe8		 |$LN1@PrcmDevice@10|
  00fe8		 |$LN3@PrcmDevice@10|
  00fe8		 |$LN4@PrcmDevice@10|

; 165  :                 }
; 166  :             }
; 167  :         }
; 168  :     Unlock(Mutex_DeviceClock); 

  00fe8	e3a00000	 mov         r0, #0
  00fec	eb000000	 bl          Unlock

; 169  : }

  00ff0	e89d6000	 ldmia       sp, {sp, lr}
  00ff4	e12fff1e	 bx          lr
  00ff8		 |$LN10@PrcmDevice@10|
  00ff8		 |$LN11@PrcmDevice@10|
  00ff8	00000000	 DCD         |s_rgClockDomainDependency|
  00ffc		 |$LN12@PrcmDevice@10|
  00ffc	00000000	 DCD         |s_rgActiveDomainDeviceCount|
  01000		 |$M48935|

			 ENDP  ; |_PrcmDeviceReleaseDeviceDomain|

	EXPORT	|??_C@_1EI@EFBPCNHG@?$AA?9?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAC?$AAl?$AAo?$AAc?$AAk?$AA_?$AAD?$AAS?$AAS?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FC@LEEBAIPA@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAC?$AAl?$AAo?$AAc?$AAk?$AA_?$AAD?$AAS?$AAS?$AA?$CI?$AAd?$AAe?$AAv@| [ DATA ] ; `string'

  00050			 AREA	 |.pdata|, PDATA
|$T48950| DCD	|$LN15@PrcmDevice@11|
	DCD	0x40007604

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EI@EFBPCNHG@?$AA?9?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAC?$AAl?$AAo?$AAc?$AAk?$AA_?$AAD?$AAS?$AAS?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF@| DCB "-"
	DCB	0x0, "_", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D"
	DCB	0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "E"
	DCB	0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, "I"
	DCB	0x0, "C", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, "_"
	DCB	0x0, "D", 0x0, "S", 0x0, "S", 0x0, "(", 0x0, ")", 0x0, "="
	DCB	0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FC@LEEBAIPA@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAC?$AAl?$AAo?$AAc?$AAk?$AA_?$AAD?$AAS?$AAS?$AA?$CI?$AAd?$AAe?$AAv@| DCB "+"
	DCB	0x0, "_", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D"
	DCB	0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "E"
	DCB	0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, "I"
	DCB	0x0, "C", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, "_"
	DCB	0x0, "D", 0x0, "S", 0x0, "S", 0x0, "(", 0x0, "d", 0x0, "e"
	DCB	0x0, "v", 0x0, "I", 0x0, "d", 0x0, "=", 0x0, "%", 0x0, "d"
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  01000			 AREA	 |.text|, CODE, ARM

  01000		 |_PrcmDeviceEnableIClock_DSS| PROC

; 631  : {

  01000		 |$LN15@PrcmDevice@11|
  01000	e1a0c00d	 mov         r12, sp
  01004	e92d0003	 stmdb       sp!, {r0, r1}
  01008	e92d5000	 stmdb       sp!, {r12, lr}
  0100c	e24dd024	 sub         sp, sp, #0x24
  01010		 |$M48947|

; 632  :     UINT mask;
; 633  :     BOOL rc = TRUE;       

  01010	e3a03001	 mov         r3, #1
  01014	e58d3000	 str         r3, [sp]

; 634  :     OMAP_CM_REGS *pPrcmCm;    
; 635  :     volatile unsigned int *piclken;
; 636  :     DeviceLookupEntry const *pEntry = &s_rgDeviceLookupTable[devId];

  01018	e59d102c	 ldr         r1, [sp, #0x2C]
  0101c	e3a0301c	 mov         r3, #0x1C
  01020	e0020391	 mul         r2, r1, r3
  01024	e59f31a8	 ldr         r3, [pc, #0x1A8]
  01028	e0833002	 add         r3, r3, r2
  0102c	e58d3004	 str         r3, [sp, #4]

; 637  :     if (!g_bSingleThreaded)

  01030	e59f3194	 ldr         r3, [pc, #0x194]
  01034	e5933000	 ldr         r3, [r3]
  01038	e3530000	 cmp         r3, #0
  0103c	1a00000b	 bne         |$LN6@PrcmDevice@11|

; 638  :         OALMSG(OAL_FUNC, (L"+_PrcmDeviceEnableIClock_DSS(devId=%d)\r\n", devId));

  01040	e59f3180	 ldr         r3, [pc, #0x180]
  01044	e5933440	 ldr         r3, [r3, #0x440]
  01048	e3130004	 tst         r3, #4
  0104c	0a000005	 beq         |$LN9@PrcmDevice@11|
  01050	e59d102c	 ldr         r1, [sp, #0x2C]
  01054	e59f0174	 ldr         r0, [pc, #0x174]
  01058	eb000000	 bl          NKDbgPrintfW
  0105c	e3a03001	 mov         r3, #1
  01060	e58d3018	 str         r3, [sp, #0x18]
  01064	ea000001	 b           |$LN10@PrcmDevice@11|
  01068		 |$LN9@PrcmDevice@11|
  01068	e3a03000	 mov         r3, #0
  0106c	e58d3018	 str         r3, [sp, #0x18]
  01070		 |$LN10@PrcmDevice@11|
  01070		 |$LN6@PrcmDevice@11|

; 639  : 
; 640  :     SPECIAL_DEBUG_MESSAGE2(_PrcmDeviceEnableIClock_DSS, devId, bEnable)
; 641  : 
; 642  :     if (pEntry->piclk != NULL)

  01070	e59d3004	 ldr         r3, [sp, #4]
  01074	e2833008	 add         r3, r3, #8
  01078	e5933000	 ldr         r3, [r3]
  0107c	e3530000	 cmp         r3, #0
  01080	0a000039	 beq         |$LN5@PrcmDevice@11|

; 643  :         {
; 644  :         mask = pEntry->piclk->mask;    

  01084	e59d3004	 ldr         r3, [sp, #4]
  01088	e2833008	 add         r3, r3, #8
  0108c	e5933000	 ldr         r3, [r3]
  01090	e2833004	 add         r3, r3, #4
  01094	e5933000	 ldr         r3, [r3]
  01098	e58d3010	 str         r3, [sp, #0x10]

; 645  :         pPrcmCm = GetCmRegisterSet(pEntry->powerDomain);

  0109c	e59d3004	 ldr         r3, [sp, #4]
  010a0	e5930000	 ldr         r0, [r3]
  010a4	eb000000	 bl          GetCmRegisterSet
  010a8	e58d001c	 str         r0, [sp, #0x1C]
  010ac	e59d301c	 ldr         r3, [sp, #0x1C]
  010b0	e58d300c	 str         r3, [sp, #0xC]

; 646  :         piclken = (volatile unsigned int*)((UCHAR*)pPrcmCm + pEntry->piclk->offset);

  010b4	e59d3004	 ldr         r3, [sp, #4]
  010b8	e2833008	 add         r3, r3, #8
  010bc	e5933000	 ldr         r3, [r3]
  010c0	e2833008	 add         r3, r3, #8
  010c4	e59d200c	 ldr         r2, [sp, #0xC]
  010c8	e5933000	 ldr         r3, [r3]
  010cc	e0823003	 add         r3, r2, r3
  010d0	e58d3008	 str         r3, [sp, #8]

; 647  :     
; 648  :         if (bEnable != FALSE)

  010d4	e59d3030	 ldr         r3, [sp, #0x30]
  010d8	e3530000	 cmp         r3, #0
  010dc	0a000018	 beq         |$LN4@PrcmDevice@11|

; 649  :             {
; 650  :             _PrcmDeviceAddrefDeviceDomain(pEntry->powerDomain);

  010e0	e59d3004	 ldr         r3, [sp, #4]
  010e4	e5930000	 ldr         r0, [r3]
  010e8	eb000000	 bl          _PrcmDeviceAddrefDeviceDomain

; 651  :             SETREG32(piclken, mask);

  010ec	e59d3008	 ldr         r3, [sp, #8]
  010f0	e5932000	 ldr         r2, [r3]
  010f4	e59d3010	 ldr         r3, [sp, #0x10]
  010f8	e1822003	 orr         r2, r2, r3
  010fc	e59d3008	 ldr         r3, [sp, #8]
  01100	e5832000	 str         r2, [r3]

; 652  :             
; 653  :             // wait until device is accessible
; 654  :             if (pEntry->pidlestatus != NULL)

  01104	e59d3004	 ldr         r3, [sp, #4]
  01108	e2833010	 add         r3, r3, #0x10
  0110c	e5933000	 ldr         r3, [r3]
  01110	e3530000	 cmp         r3, #0
  01114	0a000009	 beq         |$LN3@PrcmDevice@11|

; 655  :                 {
; 656  :                 PrcmDomainSetClockState(POWERDOMAIN_DSS, 
; 657  :                         CLOCKDOMAIN_DSS, 
; 658  :                         CLKSTCTRL_WAKEUP
; 659  :                         );

  01118	e3a02002	 mov         r2, #2
  0111c	e3a01006	 mov         r1, #6
  01120	e3a00006	 mov         r0, #6
  01124	eb000000	 bl          PrcmDomainSetClockState

; 660  :                 _PrcmDeviceWaitForDeviceAccess(devId);

  01128	e59d002c	 ldr         r0, [sp, #0x2C]
  0112c	eb000000	 bl          _PrcmDeviceWaitForDeviceAccess

; 661  :                 PrcmDomainSetClockState(POWERDOMAIN_DSS, 
; 662  :                         CLOCKDOMAIN_DSS, 
; 663  :                         CLKSTCTRL_AUTOMATIC
; 664  :                         );

  01130	e3a02003	 mov         r2, #3
  01134	e3a01006	 mov         r1, #6
  01138	e3a00006	 mov         r0, #6
  0113c	eb000000	 bl          PrcmDomainSetClockState
  01140		 |$LN3@PrcmDevice@11|

; 665  :                 }
; 666  :             }
; 667  :         else

  01140	ea000009	 b           |$LN2@PrcmDevice@11|
  01144		 |$LN4@PrcmDevice@11|

; 668  :             {
; 669  :             CLRREG32(piclken, mask);

  01144	e59d3010	 ldr         r3, [sp, #0x10]
  01148	e1e02003	 mvn         r2, r3
  0114c	e59d3008	 ldr         r3, [sp, #8]
  01150	e5933000	 ldr         r3, [r3]
  01154	e0032002	 and         r2, r3, r2
  01158	e59d3008	 ldr         r3, [sp, #8]
  0115c	e5832000	 str         r2, [r3]

; 670  :             _PrcmDeviceReleaseDeviceDomain(pEntry->powerDomain);

  01160	e59d3004	 ldr         r3, [sp, #4]
  01164	e5930000	 ldr         r0, [r3]
  01168	eb000000	 bl          _PrcmDeviceReleaseDeviceDomain
  0116c		 |$LN2@PrcmDevice@11|
  0116c		 |$LN5@PrcmDevice@11|

; 671  :             }    
; 672  :         }
; 673  : 
; 674  :     SPECIAL_DEBUG_MESSAGE_DONE(_PrcmDeviceEnableIClock_DSS, devId)
; 675  : 
; 676  :     if (!g_bSingleThreaded)

  0116c	e59f3058	 ldr         r3, [pc, #0x58]
  01170	e5933000	 ldr         r3, [r3]
  01174	e3530000	 cmp         r3, #0
  01178	1a00000b	 bne         |$LN1@PrcmDevice@11|

; 677  :         OALMSG(OAL_FUNC, (L"-_PrcmDeviceEnableIClock_DSS()=%d\r\n", rc));

  0117c	e59f3044	 ldr         r3, [pc, #0x44]
  01180	e5933440	 ldr         r3, [r3, #0x440]
  01184	e3130004	 tst         r3, #4
  01188	0a000005	 beq         |$LN11@PrcmDevice@11|
  0118c	e59d1000	 ldr         r1, [sp]
  01190	e59f002c	 ldr         r0, [pc, #0x2C]
  01194	eb000000	 bl          NKDbgPrintfW
  01198	e3a03001	 mov         r3, #1
  0119c	e58d3020	 str         r3, [sp, #0x20]
  011a0	ea000001	 b           |$LN12@PrcmDevice@11|
  011a4		 |$LN11@PrcmDevice@11|
  011a4	e3a03000	 mov         r3, #0
  011a8	e58d3020	 str         r3, [sp, #0x20]
  011ac		 |$LN12@PrcmDevice@11|
  011ac		 |$LN1@PrcmDevice@11|

; 678  :     return rc;

  011ac	e59d3000	 ldr         r3, [sp]
  011b0	e58d3014	 str         r3, [sp, #0x14]

; 679  : }

  011b4	e59d0014	 ldr         r0, [sp, #0x14]
  011b8	e28dd024	 add         sp, sp, #0x24
  011bc	e89d6000	 ldmia       sp, {sp, lr}
  011c0	e12fff1e	 bx          lr
  011c4		 |$LN16@PrcmDevice@11|
  011c4		 |$LN17@PrcmDevice@11|
  011c4	00000000	 DCD         |??_C@_1EI@EFBPCNHG@?$AA?9?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAC?$AAl?$AAo?$AAc?$AAk?$AA_?$AAD?$AAS?$AAS?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF@|
  011c8		 |$LN18@PrcmDevice@11|
  011c8	00000000	 DCD         |dpCurSettings|
  011cc		 |$LN19@PrcmDevice@11|
  011cc	00000000	 DCD         |g_bSingleThreaded|
  011d0		 |$LN20@PrcmDevice@11|
  011d0	00000000	 DCD         |??_C@_1FC@LEEBAIPA@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAC?$AAl?$AAo?$AAc?$AAk?$AA_?$AAD?$AAS?$AAS?$AA?$CI?$AAd?$AAe?$AAv@|
  011d4		 |$LN21@PrcmDevice@11|
  011d4	00000000	 DCD         |s_rgDeviceLookupTable|
  011d8		 |$M48948|

			 ENDP  ; |_PrcmDeviceEnableIClock_DSS|

	EXPORT	|??_C@_1EI@DKDBOJAO@?$AA?9?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAC?$AAl?$AAo?$AAc?$AAk?$AA_?$AAU?$AAS?$AAB?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF@| [ DATA ] ; `string'
	EXPORT	|PrcmDeviceEnableIClock|
	EXPORT	|??_C@_1FC@ECCIEPHO@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAC?$AAl?$AAo?$AAc?$AAk?$AA_?$AAU?$AAS?$AAB?$AA?$CI?$AAd?$AAe?$AAv@| [ DATA ] ; `string'

  00058			 AREA	 |.pdata|, PDATA
|$T48973| DCD	|$LN23@PrcmDevice@12|
	DCD	0x40005404

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EI@DKDBOJAO@?$AA?9?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAC?$AAl?$AAo?$AAc?$AAk?$AA_?$AAU?$AAS?$AAB?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF@| DCB "-"
	DCB	0x0, "_", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D"
	DCB	0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "E"
	DCB	0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, "I"
	DCB	0x0, "C", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, "_"
	DCB	0x0, "U", 0x0, "S", 0x0, "B", 0x0, "(", 0x0, ")", 0x0, "="
	DCB	0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FC@ECCIEPHO@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAC?$AAl?$AAo?$AAc?$AAk?$AA_?$AAU?$AAS?$AAB?$AA?$CI?$AAd?$AAe?$AAv@| DCB "+"
	DCB	0x0, "_", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D"
	DCB	0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "E"
	DCB	0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, "I"
	DCB	0x0, "C", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, "_"
	DCB	0x0, "U", 0x0, "S", 0x0, "B", 0x0, "(", 0x0, "d", 0x0, "e"
	DCB	0x0, "v", 0x0, "I", 0x0, "d", 0x0, "=", 0x0, "%", 0x0, "d"
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  011d8			 AREA	 |.text|, CODE, ARM

  011d8		 |_PrcmDeviceEnableIClock_USB| PROC

; 692  : {

  011d8		 |$LN23@PrcmDevice@12|
  011d8	e1a0c00d	 mov         r12, sp
  011dc	e92d0003	 stmdb       sp!, {r0, r1}
  011e0	e92d5000	 stmdb       sp!, {r12, lr}
  011e4	e24dd018	 sub         sp, sp, #0x18
  011e8		 |$M48970|

; 693  :     BOOL rc = FALSE;

  011e8	e3a03000	 mov         r3, #0
  011ec	e58d3000	 str         r3, [sp]

; 694  :     DeviceLookupEntry const *pEntry;
; 695  :     if (!g_bSingleThreaded)

  011f0	e59f3124	 ldr         r3, [pc, #0x124]
  011f4	e5933000	 ldr         r3, [r3]
  011f8	e3530000	 cmp         r3, #0
  011fc	1a00000b	 bne         |$LN7@PrcmDevice@12|

; 696  :         OALMSG(OAL_FUNC, (L"+_PrcmDeviceEnableIClock_USB(devId=%d)\r\n", devId));

  01200	e59f3110	 ldr         r3, [pc, #0x110]
  01204	e5933440	 ldr         r3, [r3, #0x440]
  01208	e3130004	 tst         r3, #4
  0120c	0a000005	 beq         |$LN10@PrcmDevice@12|
  01210	e59d1020	 ldr         r1, [sp, #0x20]
  01214	e59f0108	 ldr         r0, [pc, #0x108]
  01218	eb000000	 bl          NKDbgPrintfW
  0121c	e3a03001	 mov         r3, #1
  01220	e58d300c	 str         r3, [sp, #0xC]
  01224	ea000001	 b           |$LN11@PrcmDevice@12|
  01228		 |$LN10@PrcmDevice@12|
  01228	e3a03000	 mov         r3, #0
  0122c	e58d300c	 str         r3, [sp, #0xC]
  01230		 |$LN11@PrcmDevice@12|
  01230		 |$LN7@PrcmDevice@12|

; 697  : 
; 698  :     SPECIAL_DEBUG_MESSAGE2(_PrcmDeviceEnableIClock_USB, devId, bEnable)
; 699  : 
; 700  :     // determine which iclk to enable/disable
; 701  :     pEntry = &s_rgDeviceLookupTable[devId];

  01230	e59d1020	 ldr         r1, [sp, #0x20]
  01234	e3a0301c	 mov         r3, #0x1C
  01238	e0020391	 mul         r2, r1, r3
  0123c	e59f30dc	 ldr         r3, [pc, #0xDC]
  01240	e0833002	 add         r3, r3, r2
  01244	e58d3004	 str         r3, [sp, #4]

; 702  :     switch (devId)

  01248	e59d3020	 ldr         r3, [sp, #0x20]
  0124c	e58d3010	 str         r3, [sp, #0x10]
  01250	e59d3010	 ldr         r3, [sp, #0x10]
  01254	e2433049	 sub         r3, r3, #0x49
  01258	e58d3010	 str         r3, [sp, #0x10]
  0125c	e59d3010	 ldr         r3, [sp, #0x10]
  01260	e3530004	 cmp         r3, #4
  01264	8a000011	 bhi         |$LN2@PrcmDevice@12|
  01268	e59d2010	 ldr         r2, [sp, #0x10]
  0126c	e1a03102	 mov         r3, r2, lsl #2
  01270	e083300f	 add         r3, r3, pc
  01274	e5933004	 ldr         r3, [r3, #4]
  01278	e08ff003	 add         pc, pc, r3
  0127c		 |$LN15@PrcmDevice@12|
  0127c		 |$LN14@PrcmDevice@12|
  0127c		 |$LN16@PrcmDevice@12|
  0127c	00000010	 DCD         0x10
  01280		 |$LN17@PrcmDevice@12|
  01280	00000010	 DCD         0x10
  01284		 |$LN18@PrcmDevice@12|
  01284	00000020	 DCD         0x20
  01288		 |$LN19@PrcmDevice@12|
  01288	00000020	 DCD         0x20
  0128c		 |$LN20@PrcmDevice@12|
  0128c	00000020	 DCD         0x20
  01290		 |$LN4@PrcmDevice@12|

; 703  :         {
; 704  :         case OMAP_DEVICE_HSUSB1:
; 705  :         case OMAP_DEVICE_HSUSB2:
; 706  :             // when these device IDs are used, just gate final clock
; 707  :             _PrcmDeviceEnableIClock(devId, bEnable);

  01290	e59d1024	 ldr         r1, [sp, #0x24]
  01294	e59d0020	 ldr         r0, [sp, #0x20]
  01298	eb000000	 bl          _PrcmDeviceEnableIClock

; 708  :             break; 

  0129c	ea000004	 b           |$LN5@PrcmDevice@12|
  012a0		 |$LN3@PrcmDevice@12|

; 709  : 
; 710  :         case OMAP_DEVICE_USBHOST1:
; 711  :         case OMAP_DEVICE_USBHOST2:
; 712  :         case OMAP_DEVICE_USBHOST3:
; 713  : #if 0
; 714  :             // Enable USB HOST hardware context save/restore for ES3.1
; 715  :             if (!bEnable && IS_SILICON_ES3_1())
; 716  :                 {
; 717  :                 PrcmDomainSetMemoryState(POWERDOMAIN_USBHOST, 
; 718  :                                             SAVEANDRESTORE,
; 719  :                                             SAVEANDRESTORE
; 720  :                                             );
; 721  :                 }
; 722  : #endif            
; 723  :             PrcmDeviceEnableIClock(OMAP_DEVICE_HSUSB1, bEnable);

  012a0	e59d1024	 ldr         r1, [sp, #0x24]
  012a4	e3a00049	 mov         r0, #0x49
  012a8	eb000000	 bl          PrcmDeviceEnableIClock

; 724  :             break;

  012ac	ea000000	 b           |$LN5@PrcmDevice@12|
  012b0		 |$LN2@PrcmDevice@12|

; 725  :             
; 726  :         default:
; 727  :             goto cleanUp;

  012b0	ea000001	 b           |$cleanUp$48386|
  012b4		 |$LN5@PrcmDevice@12|

; 728  :         }
; 729  :     
; 730  :     rc = TRUE;

  012b4	e3a03001	 mov         r3, #1
  012b8	e58d3000	 str         r3, [sp]
  012bc		 |$cleanUp$48386|

; 731  : 
; 732  :     SPECIAL_DEBUG_MESSAGE_DONE(_PrcmDeviceEnableIClock_USB, devId)
; 733  : 
; 734  : cleanUp:    
; 735  :     if (!g_bSingleThreaded)

  012bc	e59f3058	 ldr         r3, [pc, #0x58]
  012c0	e5933000	 ldr         r3, [r3]
  012c4	e3530000	 cmp         r3, #0
  012c8	1a00000b	 bne         |$LN1@PrcmDevice@12|

; 736  :         OALMSG(OAL_FUNC, (L"-_PrcmDeviceEnableIClock_USB()=%d\r\n", rc));

  012cc	e59f3044	 ldr         r3, [pc, #0x44]
  012d0	e5933440	 ldr         r3, [r3, #0x440]
  012d4	e3130004	 tst         r3, #4
  012d8	0a000005	 beq         |$LN12@PrcmDevice@12|
  012dc	e59d1000	 ldr         r1, [sp]
  012e0	e59f002c	 ldr         r0, [pc, #0x2C]
  012e4	eb000000	 bl          NKDbgPrintfW
  012e8	e3a03001	 mov         r3, #1
  012ec	e58d3014	 str         r3, [sp, #0x14]
  012f0	ea000001	 b           |$LN13@PrcmDevice@12|
  012f4		 |$LN12@PrcmDevice@12|
  012f4	e3a03000	 mov         r3, #0
  012f8	e58d3014	 str         r3, [sp, #0x14]
  012fc		 |$LN13@PrcmDevice@12|
  012fc		 |$LN1@PrcmDevice@12|

; 737  :     return rc;

  012fc	e59d3000	 ldr         r3, [sp]
  01300	e58d3008	 str         r3, [sp, #8]

; 738  : }

  01304	e59d0008	 ldr         r0, [sp, #8]
  01308	e28dd018	 add         sp, sp, #0x18
  0130c	e89d6000	 ldmia       sp, {sp, lr}
  01310	e12fff1e	 bx          lr
  01314		 |$LN24@PrcmDevice@12|
  01314		 |$LN25@PrcmDevice@12|
  01314	00000000	 DCD         |??_C@_1EI@DKDBOJAO@?$AA?9?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAC?$AAl?$AAo?$AAc?$AAk?$AA_?$AAU?$AAS?$AAB?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF@|
  01318		 |$LN26@PrcmDevice@12|
  01318	00000000	 DCD         |dpCurSettings|
  0131c		 |$LN27@PrcmDevice@12|
  0131c	00000000	 DCD         |g_bSingleThreaded|
  01320		 |$LN28@PrcmDevice@12|
  01320	00000000	 DCD         |s_rgDeviceLookupTable|
  01324		 |$LN29@PrcmDevice@12|
  01324	00000000	 DCD         |??_C@_1FC@ECCIEPHO@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAC?$AAl?$AAo?$AAc?$AAk?$AA_?$AAU?$AAS?$AAB?$AA?$CI?$AAd?$AAe?$AAv@|
  01328		 |$M48971|

			 ENDP  ; |_PrcmDeviceEnableIClock_USB|

	EXPORT	|??_C@_1EE@HJAJMPDD@?$AA?9?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAS?$AAe?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EO@LHILKJLD@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAS?$AAe?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?$CI?$AAd?$AAe?$AAv?$AAI?$AAd@| [ DATA ] ; `string'
	IMPORT	|PrcmClockSetParent|

  00060			 AREA	 |.pdata|, PDATA
|$T48989| DCD	|$LN11@PrcmDevice@13|
	DCD	0x40004204

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EE@HJAJMPDD@?$AA?9?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAS?$AAe?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN@| DCB "-"
	DCB	0x0, "_", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D"
	DCB	0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "S"
	DCB	0x0, "e", 0x0, "t", 0x0, "S", 0x0, "o", 0x0, "u", 0x0, "r"
	DCB	0x0, "c", 0x0, "e", 0x0, "C", 0x0, "l", 0x0, "o", 0x0, "c"
	DCB	0x0, "k", 0x0, "(", 0x0, ")", 0x0, "=", 0x0, "%", 0x0, "d"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EO@LHILKJLD@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAS?$AAe?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?$CI?$AAd?$AAe?$AAv?$AAI?$AAd@| DCB "+"
	DCB	0x0, "_", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D"
	DCB	0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "S"
	DCB	0x0, "e", 0x0, "t", 0x0, "S", 0x0, "o", 0x0, "u", 0x0, "r"
	DCB	0x0, "c", 0x0, "e", 0x0, "C", 0x0, "l", 0x0, "o", 0x0, "c"
	DCB	0x0, "k", 0x0, "(", 0x0, "d", 0x0, "e", 0x0, "v", 0x0, "I"
	DCB	0x0, "d", 0x0, "=", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  01328			 AREA	 |.text|, CODE, ARM

  01328		 |_PrcmDeviceSetSourceClock| PROC

; 752  : {

  01328		 |$LN11@PrcmDevice@13|
  01328	e1a0c00d	 mov         r12, sp
  0132c	e92d0007	 stmdb       sp!, {r0 - r2}
  01330	e92d5000	 stmdb       sp!, {r12, lr}
  01334	e24dd018	 sub         sp, sp, #0x18
  01338		 |$M48986|

; 753  :     BOOL rc = FALSE;

  01338	e3a03000	 mov         r3, #0
  0133c	e58d3000	 str         r3, [sp]

; 754  :     SourceDeviceClocks_t *pSrcClocks;
; 755  : 
; 756  :     UNREFERENCED_PARAMETER(count);
; 757  : 
; 758  :     if (!g_bSingleThreaded)

  01340	e59f30dc	 ldr         r3, [pc, #0xDC]
  01344	e5933000	 ldr         r3, [r3]
  01348	e3530000	 cmp         r3, #0
  0134c	1a00000b	 bne         |$LN2@PrcmDevice@13|

; 759  :         OALMSG(OAL_FUNC, (L"+_PrcmDeviceSetSourceClock(devId=%d)\r\n", devId));

  01350	e59f30c8	 ldr         r3, [pc, #0xC8]
  01354	e5933440	 ldr         r3, [r3, #0x440]
  01358	e3130004	 tst         r3, #4
  0135c	0a000005	 beq         |$LN5@PrcmDevice@13|
  01360	e59d1020	 ldr         r1, [sp, #0x20]
  01364	e59f00c0	 ldr         r0, [pc, #0xC0]
  01368	eb000000	 bl          NKDbgPrintfW
  0136c	e3a03001	 mov         r3, #1
  01370	e58d300c	 str         r3, [sp, #0xC]
  01374	ea000001	 b           |$LN6@PrcmDevice@13|
  01378		 |$LN5@PrcmDevice@13|
  01378	e3a03000	 mov         r3, #0
  0137c	e58d300c	 str         r3, [sp, #0xC]
  01380		 |$LN6@PrcmDevice@13|
  01380		 |$LN2@PrcmDevice@13|

; 760  : 
; 761  :     pSrcClocks = s_rgDeviceLookupTable[devId].pSrcClocks;    

  01380	e59d1020	 ldr         r1, [sp, #0x20]
  01384	e3a0301c	 mov         r3, #0x1C
  01388	e0020391	 mul         r2, r1, r3
  0138c	e59f3094	 ldr         r3, [pc, #0x94]
  01390	e0833002	 add         r3, r3, r2
  01394	e2833018	 add         r3, r3, #0x18
  01398	e5933000	 ldr         r3, [r3]
  0139c	e58d3004	 str         r3, [sp, #4]

; 762  :     rc = PrcmClockSetParent(pSrcClocks->rgSourceClocks[0], rgClocks[0]);

  013a0	e59d3028	 ldr         r3, [sp, #0x28]
  013a4	e5931000	 ldr         r1, [r3]
  013a8	e59d3004	 ldr         r3, [sp, #4]
  013ac	e2833004	 add         r3, r3, #4
  013b0	e5930000	 ldr         r0, [r3]
  013b4	eb000000	 bl          PrcmClockSetParent
  013b8	e58d0010	 str         r0, [sp, #0x10]
  013bc	e59d3010	 ldr         r3, [sp, #0x10]
  013c0	e58d3000	 str         r3, [sp]

; 763  :     
; 764  :     if (!g_bSingleThreaded)

  013c4	e59f3058	 ldr         r3, [pc, #0x58]
  013c8	e5933000	 ldr         r3, [r3]
  013cc	e3530000	 cmp         r3, #0
  013d0	1a00000b	 bne         |$LN1@PrcmDevice@13|

; 765  :         OALMSG(OAL_FUNC, (L"-_PrcmDeviceSetSourceClock()=%d\r\n", rc));

  013d4	e59f3044	 ldr         r3, [pc, #0x44]
  013d8	e5933440	 ldr         r3, [r3, #0x440]
  013dc	e3130004	 tst         r3, #4
  013e0	0a000005	 beq         |$LN7@PrcmDevice@13|
  013e4	e59d1000	 ldr         r1, [sp]
  013e8	e59f002c	 ldr         r0, [pc, #0x2C]
  013ec	eb000000	 bl          NKDbgPrintfW
  013f0	e3a03001	 mov         r3, #1
  013f4	e58d3014	 str         r3, [sp, #0x14]
  013f8	ea000001	 b           |$LN8@PrcmDevice@13|
  013fc		 |$LN7@PrcmDevice@13|
  013fc	e3a03000	 mov         r3, #0
  01400	e58d3014	 str         r3, [sp, #0x14]
  01404		 |$LN8@PrcmDevice@13|
  01404		 |$LN1@PrcmDevice@13|

; 766  :     return rc;

  01404	e59d3000	 ldr         r3, [sp]
  01408	e58d3008	 str         r3, [sp, #8]

; 767  : }

  0140c	e59d0008	 ldr         r0, [sp, #8]
  01410	e28dd018	 add         sp, sp, #0x18
  01414	e89d6000	 ldmia       sp, {sp, lr}
  01418	e12fff1e	 bx          lr
  0141c		 |$LN12@PrcmDevice@13|
  0141c		 |$LN13@PrcmDevice@13|
  0141c	00000000	 DCD         |??_C@_1EE@HJAJMPDD@?$AA?9?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAS?$AAe?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN@|
  01420		 |$LN14@PrcmDevice@13|
  01420	00000000	 DCD         |dpCurSettings|
  01424		 |$LN15@PrcmDevice@13|
  01424	00000000	 DCD         |g_bSingleThreaded|
  01428		 |$LN16@PrcmDevice@13|
  01428	00000000	 DCD         |s_rgDeviceLookupTable|
  0142c		 |$LN17@PrcmDevice@13|
  0142c	00000000	 DCD         |??_C@_1EO@LHILKJLD@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAS?$AAe?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?$CI?$AAd?$AAe?$AAv?$AAI?$AAd@|
  01430		 |$M48987|

			 ENDP  ; |_PrcmDeviceSetSourceClock|

	EXPORT	|??_C@_1EM@CGIDEPGJ@?$AA?9?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAS?$AAe?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAC?$AAl?$AAo?$AAc?$AAk?$AA_?$AAD?$AAS?$AAS?$AA?$CI?$AA?$CJ@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FG@OBINGANC@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAS?$AAe?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAC?$AAl?$AAo?$AAc?$AAk?$AA_?$AAD?$AAS?$AAS?$AA?$CI?$AAd@| [ DATA ] ; `string'

  00068			 AREA	 |.pdata|, PDATA
|$T49005| DCD	|$LN31@PrcmDevice@14|
	DCD	0x4000b604

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EM@CGIDEPGJ@?$AA?9?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAS?$AAe?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAC?$AAl?$AAo?$AAc?$AAk?$AA_?$AAD?$AAS?$AAS?$AA?$CI?$AA?$CJ@| DCB "-"
	DCB	0x0, "_", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D"
	DCB	0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "S"
	DCB	0x0, "e", 0x0, "t", 0x0, "S", 0x0, "o", 0x0, "u", 0x0, "r"
	DCB	0x0, "c", 0x0, "e", 0x0, "C", 0x0, "l", 0x0, "o", 0x0, "c"
	DCB	0x0, "k", 0x0, "_", 0x0, "D", 0x0, "S", 0x0, "S", 0x0, "("
	DCB	0x0, ")", 0x0, "=", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FG@OBINGANC@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAS?$AAe?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAC?$AAl?$AAo?$AAc?$AAk?$AA_?$AAD?$AAS?$AAS?$AA?$CI?$AAd@| DCB "+"
	DCB	0x0, "_", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D"
	DCB	0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "S"
	DCB	0x0, "e", 0x0, "t", 0x0, "S", 0x0, "o", 0x0, "u", 0x0, "r"
	DCB	0x0, "c", 0x0, "e", 0x0, "C", 0x0, "l", 0x0, "o", 0x0, "c"
	DCB	0x0, "k", 0x0, "_", 0x0, "D", 0x0, "S", 0x0, "S", 0x0, "("
	DCB	0x0, "d", 0x0, "e", 0x0, "v", 0x0, "I", 0x0, "d", 0x0, "="
	DCB	0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Odtp

  01430			 AREA	 |.text|, CODE, ARM

  01430		 |_PrcmDeviceSetSourceClock_DSS| PROC

; 781  : {

  01430		 |$LN31@PrcmDevice@14|
  01430	e1a0c00d	 mov         r12, sp
  01434	e92d0007	 stmdb       sp!, {r0 - r2}
  01438	e92d5000	 stmdb       sp!, {r12, lr}
  0143c	e24dd030	 sub         sp, sp, #0x30
  01440		 |$M49002|

; 782  :     UINT i;
; 783  : //    UINT val;
; 784  :     BOOL rc = FALSE;

  01440	e3a03000	 mov         r3, #0
  01444	e58d3008	 str         r3, [sp, #8]

; 785  :     BOOL bDss1 = FALSE;

  01448	e3a03000	 mov         r3, #0
  0144c	e58d3014	 str         r3, [sp, #0x14]

; 786  :     BOOL bDss2 = FALSE;    

  01450	e3a03000	 mov         r3, #0
  01454	e58d3000	 str         r3, [sp]

; 787  :     BOOL bCurrentDss1 = FALSE;

  01458	e3a03000	 mov         r3, #0
  0145c	e58d3010	 str         r3, [sp, #0x10]

; 788  :     BOOL bCurrentDss2 = FALSE;

  01460	e3a03000	 mov         r3, #0
  01464	e58d3004	 str         r3, [sp, #4]

; 789  : 
; 790  :     SourceDeviceClocks_t *pSrcClocks;
; 791  :     
; 792  :     if (!g_bSingleThreaded)

  01468	e59f328c	 ldr         r3, [pc, #0x28C]
  0146c	e5933000	 ldr         r3, [r3]
  01470	e3530000	 cmp         r3, #0
  01474	1a00000b	 bne         |$LN22@PrcmDevice@14|

; 793  :         OALMSG(OAL_FUNC, (L"+_PrcmDeviceSetSourceClock_DSS(devId=%d)\r\n", devId));

  01478	e59f3278	 ldr         r3, [pc, #0x278]
  0147c	e5933440	 ldr         r3, [r3, #0x440]
  01480	e3130004	 tst         r3, #4
  01484	0a000005	 beq         |$LN25@PrcmDevice@14|
  01488	e59d1038	 ldr         r1, [sp, #0x38]
  0148c	e59f0270	 ldr         r0, [pc, #0x270]
  01490	eb000000	 bl          NKDbgPrintfW
  01494	e3a03001	 mov         r3, #1
  01498	e58d3020	 str         r3, [sp, #0x20]
  0149c	ea000001	 b           |$LN26@PrcmDevice@14|
  014a0		 |$LN25@PrcmDevice@14|
  014a0	e3a03000	 mov         r3, #0
  014a4	e58d3020	 str         r3, [sp, #0x20]
  014a8		 |$LN26@PrcmDevice@14|
  014a8		 |$LN22@PrcmDevice@14|

; 794  : 
; 795  :     SPECIAL_DEBUG_MESSAGE(_PrcmDeviceSetSourceClock_DSS, devId)
; 796  : 
; 797  :     if (devId != OMAP_DEVICE_DSS) goto cleanUp;

  014a8	e59d3038	 ldr         r3, [sp, #0x38]
  014ac	e353003f	 cmp         r3, #0x3F
  014b0	0a000000	 beq         |$LN21@PrcmDevice@14|
  014b4	ea000078	 b           |$cleanUp$48423|
  014b8		 |$LN21@PrcmDevice@14|

; 798  : 
; 799  :     pSrcClocks = s_rgDeviceLookupTable[devId].pSrcClocks;

  014b8	e59d1038	 ldr         r1, [sp, #0x38]
  014bc	e3a0301c	 mov         r3, #0x1C
  014c0	e0020391	 mul         r2, r1, r3
  014c4	e59f3234	 ldr         r3, [pc, #0x234]
  014c8	e0833002	 add         r3, r3, r2
  014cc	e2833018	 add         r3, r3, #0x18
  014d0	e5933000	 ldr         r3, [r3]
  014d4	e58d3018	 str         r3, [sp, #0x18]

; 800  : 
; 801  :     for (i = 0; i < count; ++i)

  014d8	e3a03000	 mov         r3, #0
  014dc	e58d300c	 str         r3, [sp, #0xC]
  014e0	ea000002	 b           |$LN20@PrcmDevice@14|
  014e4		 |$LN19@PrcmDevice@14|
  014e4	e59d300c	 ldr         r3, [sp, #0xC]
  014e8	e2833001	 add         r3, r3, #1
  014ec	e58d300c	 str         r3, [sp, #0xC]
  014f0		 |$LN20@PrcmDevice@14|
  014f0	e59d200c	 ldr         r2, [sp, #0xC]
  014f4	e59d303c	 ldr         r3, [sp, #0x3C]
  014f8	e1520003	 cmp         r2, r3
  014fc	2a00002b	 bcs         |$LN18@PrcmDevice@14|

; 802  :         {
; 803  :         switch (rgClocks[i])

  01500	e59d100c	 ldr         r1, [sp, #0xC]
  01504	e3a03004	 mov         r3, #4
  01508	e0020391	 mul         r2, r1, r3
  0150c	e59d3040	 ldr         r3, [sp, #0x40]
  01510	e0833002	 add         r3, r3, r2
  01514	e5933000	 ldr         r3, [r3]
  01518	e58d3024	 str         r3, [sp, #0x24]
  0151c	e59d3024	 ldr         r3, [sp, #0x24]
  01520	e3530007	 cmp         r3, #7
  01524	0a000003	 beq         |$LN15@PrcmDevice@14|
  01528	e59d3024	 ldr         r3, [sp, #0x24]
  0152c	e353001a	 cmp         r3, #0x1A
  01530	0a000003	 beq         |$LN14@PrcmDevice@14|
  01534	ea000005	 b           |$LN13@PrcmDevice@14|
  01538		 |$LN15@PrcmDevice@14|

; 804  :             {
; 805  :             case kDSS1_ALWON_FCLK:
; 806  :                 bDss1 = TRUE;

  01538	e3a03001	 mov         r3, #1
  0153c	e58d3014	 str         r3, [sp, #0x14]

; 807  :                 break;

  01540	ea000003	 b           |$LN16@PrcmDevice@14|
  01544		 |$LN14@PrcmDevice@14|

; 808  : 
; 809  :             case kDSS2_ALWON_FCLK:
; 810  :                 bDss2 = TRUE;

  01544	e3a03001	 mov         r3, #1
  01548	e58d3000	 str         r3, [sp]

; 811  :                 break;

  0154c	ea000000	 b           |$LN16@PrcmDevice@14|
  01550		 |$LN13@PrcmDevice@14|

; 812  : 
; 813  :             default:
; 814  :                 goto cleanUp;

  01550	ea000051	 b           |$cleanUp$48423|
  01554		 |$LN16@PrcmDevice@14|

; 815  :             }        
; 816  : 
; 817  :         switch (pSrcClocks->rgSourceClocks[i])

  01554	e59d3018	 ldr         r3, [sp, #0x18]
  01558	e2831004	 add         r1, r3, #4
  0155c	e59d200c	 ldr         r2, [sp, #0xC]
  01560	e3a03004	 mov         r3, #4
  01564	e0030392	 mul         r3, r2, r3
  01568	e0813003	 add         r3, r1, r3
  0156c	e5933000	 ldr         r3, [r3]
  01570	e58d3028	 str         r3, [sp, #0x28]
  01574	e59d3028	 ldr         r3, [sp, #0x28]
  01578	e3530007	 cmp         r3, #7
  0157c	0a000003	 beq         |$LN10@PrcmDevice@14|
  01580	e59d3028	 ldr         r3, [sp, #0x28]
  01584	e353001a	 cmp         r3, #0x1A
  01588	0a000003	 beq         |$LN9@PrcmDevice@14|
  0158c	ea000005	 b           |$LN8@PrcmDevice@14|
  01590		 |$LN10@PrcmDevice@14|

; 818  :             {
; 819  :             case kDSS1_ALWON_FCLK:
; 820  :                 bCurrentDss1 = TRUE;

  01590	e3a03001	 mov         r3, #1
  01594	e58d3010	 str         r3, [sp, #0x10]

; 821  :                 break;

  01598	ea000003	 b           |$LN11@PrcmDevice@14|
  0159c		 |$LN9@PrcmDevice@14|

; 822  : 
; 823  :             case kDSS2_ALWON_FCLK:
; 824  :                 bCurrentDss2 = TRUE;

  0159c	e3a03001	 mov         r3, #1
  015a0	e58d3004	 str         r3, [sp, #4]

; 825  :                 break;

  015a4	ea000000	 b           |$LN11@PrcmDevice@14|
  015a8		 |$LN8@PrcmDevice@14|

; 826  : 
; 827  :             default:
; 828  :                 goto cleanUp;

  015a8	ea00003b	 b           |$cleanUp$48423|
  015ac		 |$LN11@PrcmDevice@14|

; 829  :             }        
; 830  :         }

  015ac	eaffffcc	 b           |$LN19@PrcmDevice@14|
  015b0		 |$LN18@PrcmDevice@14|

; 831  : 
; 832  :     i = 0;

  015b0	e3a03000	 mov         r3, #0
  015b4	e58d300c	 str         r3, [sp, #0xC]

; 833  :     if (bDss1 == TRUE) 

  015b8	e59d3014	 ldr         r3, [sp, #0x14]
  015bc	e3530001	 cmp         r3, #1
  015c0	1a00000a	 bne         |$LN7@PrcmDevice@14|

; 834  : 	    pSrcClocks->rgSourceClocks[i++] = kDSS1_ALWON_FCLK;

  015c4	e59d3018	 ldr         r3, [sp, #0x18]
  015c8	e2831004	 add         r1, r3, #4
  015cc	e59d200c	 ldr         r2, [sp, #0xC]
  015d0	e3a03004	 mov         r3, #4
  015d4	e0030392	 mul         r3, r2, r3
  015d8	e0812003	 add         r2, r1, r3
  015dc	e3a03007	 mov         r3, #7
  015e0	e5823000	 str         r3, [r2]
  015e4	e59d300c	 ldr         r3, [sp, #0xC]
  015e8	e2833001	 add         r3, r3, #1
  015ec	e58d300c	 str         r3, [sp, #0xC]
  015f0		 |$LN7@PrcmDevice@14|

; 835  : 
; 836  :     if (bDss2 == TRUE) 

  015f0	e59d3000	 ldr         r3, [sp]
  015f4	e3530001	 cmp         r3, #1
  015f8	1a00000a	 bne         |$LN6@PrcmDevice@14|

; 837  : 	    pSrcClocks->rgSourceClocks[i++] = kDSS2_ALWON_FCLK;

  015fc	e59d3018	 ldr         r3, [sp, #0x18]
  01600	e2831004	 add         r1, r3, #4
  01604	e59d200c	 ldr         r2, [sp, #0xC]
  01608	e3a03004	 mov         r3, #4
  0160c	e0030392	 mul         r3, r2, r3
  01610	e0812003	 add         r2, r1, r3
  01614	e3a0301a	 mov         r3, #0x1A
  01618	e5823000	 str         r3, [r2]
  0161c	e59d300c	 ldr         r3, [sp, #0xC]
  01620	e2833001	 add         r3, r3, #1
  01624	e58d300c	 str         r3, [sp, #0xC]
  01628		 |$LN6@PrcmDevice@14|

; 838  : 
; 839  :     if (i > 0)

  01628	e59d300c	 ldr         r3, [sp, #0xC]
  0162c	e3530000	 cmp         r3, #0
  01630	9a000019	 bls         |$LN5@PrcmDevice@14|

; 840  : 	    {
; 841  :         if (s_rgDeviceLookupTable[devId].pfclk->refCount > 0)

  01634	e59d1038	 ldr         r1, [sp, #0x38]
  01638	e3a0301c	 mov         r3, #0x1C
  0163c	e0020391	 mul         r2, r1, r3
  01640	e59f30b8	 ldr         r3, [pc, #0xB8]
  01644	e0833002	 add         r3, r3, r2
  01648	e2833004	 add         r3, r3, #4
  0164c	e5933000	 ldr         r3, [r3]
  01650	e5933000	 ldr         r3, [r3]
  01654	e3530000	 cmp         r3, #0
  01658	da00000d	 ble         |$LN4@PrcmDevice@14|

; 842  : 	        {
; 843  :             if (bCurrentDss1 != bDss1)

  0165c	e59d2010	 ldr         r2, [sp, #0x10]
  01660	e59d3014	 ldr         r3, [sp, #0x14]
  01664	e1520003	 cmp         r2, r3
  01668	0a000002	 beq         |$LN3@PrcmDevice@14|

; 844  :                 PrcmDeviceEnableFClock(OMAP_DEVICE_DSS1, bDss1);

  0166c	e59d1014	 ldr         r1, [sp, #0x14]
  01670	e3a00040	 mov         r0, #0x40
  01674	eb000000	 bl          PrcmDeviceEnableFClock
  01678		 |$LN3@PrcmDevice@14|

; 845  : 
; 846  :     	    if (bCurrentDss2 != bDss2)

  01678	e59d2004	 ldr         r2, [sp, #4]
  0167c	e59d3000	 ldr         r3, [sp]
  01680	e1520003	 cmp         r2, r3
  01684	0a000002	 beq         |$LN2@PrcmDevice@14|

; 847  :                 PrcmDeviceEnableFClock(OMAP_DEVICE_DSS2, bDss2);

  01688	e59d1000	 ldr         r1, [sp]
  0168c	e3a00041	 mov         r0, #0x41
  01690	eb000000	 bl          PrcmDeviceEnableFClock
  01694		 |$LN2@PrcmDevice@14|
  01694		 |$LN4@PrcmDevice@14|

; 848  :             }
; 849  :     	rc = TRUE;

  01694	e3a03001	 mov         r3, #1
  01698	e58d3008	 str         r3, [sp, #8]
  0169c		 |$LN5@PrcmDevice@14|
  0169c		 |$cleanUp$48423|

; 850  : 	    }
; 851  : 			
; 852  : /*
; 853  :     i = 0;
; 854  :     pSrcClocks = s_rgDeviceLookupTable[devId].pSrcClocks;
; 855  :     if (bDss1 == TRUE) pSrcClocks->rgSourceClocks[i++] = kDSS1_ALWON_FCLK;
; 856  :     if (bDss2 == TRUE) pSrcClocks->rgSourceClocks[i++] = kDSS2_ALWON_FCLK;
; 857  : 
; 858  :     if (i > 0)
; 859  :         {
; 860  :         // update source clock count
; 861  :         pSrcClocks->size = i;
; 862  :         
; 863  :         // update clocks
; 864  :         if (s_rgDeviceLookupTable[devId].pfclk->refCount > 0)
; 865  :             {
; 866  :             // enable both clocks
; 867  :             val = INREG32(&g_pPrcmCm->pOMAP_DSS_CM->CM_FCLKEN_DSS);
; 868  :             OUTREG32(&g_pPrcmCm->pOMAP_DSS_CM->CM_FCLKEN_DSS, val | CM_CLKEN_DSS_MASK);
; 869  :             
; 870  :             val &= ~CM_CLKEN_DSS_MASK;
; 871  :             for (i = 0; i < pSrcClocks->size; ++i)
; 872  :                 {
; 873  :                 switch (pSrcClocks->rgSourceClocks[i])
; 874  :                     {
; 875  :                     case kDSS1_ALWON_FCLK:
; 876  :                         val |= CM_CLKEN_DSS1;
; 877  :                         break;
; 878  : 
; 879  :                     case kDSS2_ALWON_FCLK:
; 880  :                         val |= CM_CLKEN_DSS2;
; 881  :                         break;
; 882  :                     }
; 883  :                 }
; 884  : 
; 885  :             // enable the requested source clock(s)
; 886  :             OUTREG32(&g_pPrcmCm->pOMAP_DSS_CM->CM_FCLKEN_DSS, val);
; 887  :             rc = TRUE;
; 888  :             }
; 889  :         else
; 890  :             {
; 891  :             rc = TRUE;
; 892  :             }
; 893  :         }
; 894  : */
; 895  :     
; 896  :     SPECIAL_DEBUG_MESSAGE_DONE(_PrcmDeviceSetSourceClock_DSS, devId)
; 897  : 
; 898  : cleanUp:    
; 899  :     if (!g_bSingleThreaded)

  0169c	e59f3058	 ldr         r3, [pc, #0x58]
  016a0	e5933000	 ldr         r3, [r3]
  016a4	e3530000	 cmp         r3, #0
  016a8	1a00000b	 bne         |$LN1@PrcmDevice@14|

; 900  :         OALMSG(OAL_FUNC, (L"-_PrcmDeviceSetSourceClock_DSS()=%d\r\n", rc));

  016ac	e59f3044	 ldr         r3, [pc, #0x44]
  016b0	e5933440	 ldr         r3, [r3, #0x440]
  016b4	e3130004	 tst         r3, #4
  016b8	0a000005	 beq         |$LN27@PrcmDevice@14|
  016bc	e59d1008	 ldr         r1, [sp, #8]
  016c0	e59f002c	 ldr         r0, [pc, #0x2C]
  016c4	eb000000	 bl          NKDbgPrintfW
  016c8	e3a03001	 mov         r3, #1
  016cc	e58d302c	 str         r3, [sp, #0x2C]
  016d0	ea000001	 b           |$LN28@PrcmDevice@14|
  016d4		 |$LN27@PrcmDevice@14|
  016d4	e3a03000	 mov         r3, #0
  016d8	e58d302c	 str         r3, [sp, #0x2C]
  016dc		 |$LN28@PrcmDevice@14|
  016dc		 |$LN1@PrcmDevice@14|

; 901  :     return rc;

  016dc	e59d3008	 ldr         r3, [sp, #8]
  016e0	e58d301c	 str         r3, [sp, #0x1C]

; 902  : }

  016e4	e59d001c	 ldr         r0, [sp, #0x1C]
  016e8	e28dd030	 add         sp, sp, #0x30
  016ec	e89d6000	 ldmia       sp, {sp, lr}
  016f0	e12fff1e	 bx          lr
  016f4		 |$LN32@PrcmDevice@14|
  016f4		 |$LN33@PrcmDevice@14|
  016f4	00000000	 DCD         |??_C@_1EM@CGIDEPGJ@?$AA?9?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAS?$AAe?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAC?$AAl?$AAo?$AAc?$AAk?$AA_?$AAD?$AAS?$AAS?$AA?$CI?$AA?$CJ@|
  016f8		 |$LN34@PrcmDevice@14|
  016f8	00000000	 DCD         |dpCurSettings|
  016fc		 |$LN35@PrcmDevice@14|
  016fc	00000000	 DCD         |g_bSingleThreaded|
  01700		 |$LN36@PrcmDevice@14|
  01700	00000000	 DCD         |s_rgDeviceLookupTable|
  01704		 |$LN37@PrcmDevice@14|
  01704	00000000	 DCD         |??_C@_1FG@OBINGANC@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAS?$AAe?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAC?$AAl?$AAo?$AAc?$AAk?$AA_?$AAD?$AAS?$AAS?$AA?$CI?$AAd@|
  01708		 |$M49003|

			 ENDP  ; |_PrcmDeviceSetSourceClock_DSS|


  00070			 AREA	 |.pdata|, PDATA
|$T49017| DCD	|$LN16@PrcmDevice@15|
	DCD	0x40006104
; Function compile flags: /Odtp

  01708			 AREA	 |.text|, CODE, ARM

  01708		 |_PrcmDeviceSetSourceClock_USB| PROC

; 917  : {

  01708		 |$LN16@PrcmDevice@15|
  01708	e1a0c00d	 mov         r12, sp
  0170c	e92d0007	 stmdb       sp!, {r0 - r2}
  01710	e92d5000	 stmdb       sp!, {r12, lr}
  01714	e24dd010	 sub         sp, sp, #0x10
  01718		 |$M49014|

; 918  :     BOOL rc = FALSE;

  01718	e3a03000	 mov         r3, #0
  0171c	e58d3000	 str         r3, [sp]

; 919  :     DeviceLookupEntry const *pEntry;
; 920  : 
; 921  :     SPECIAL_DEBUG_MESSAGE(_PrcmDeviceSetSourceClock_USB, devId)
; 922  : 
; 923  :     // validate parameters
; 924  :     if (count > 1) goto cleanUp;

  01720	e59d301c	 ldr         r3, [sp, #0x1C]
  01724	e3530001	 cmp         r3, #1
  01728	9a000000	 bls         |$LN11@PrcmDevice@15|
  0172c	ea00004f	 b           |$cleanUp$48460|
  01730		 |$LN11@PrcmDevice@15|

; 925  :     if (rgClocks[0] != kUSBHOST_120M_FCLK && rgClocks[0] != kUSBHOST_48M_FCLK) goto cleanUp;

  01730	e59d3020	 ldr         r3, [sp, #0x20]
  01734	e5933000	 ldr         r3, [r3]
  01738	e3530043	 cmp         r3, #0x43
  0173c	0a000004	 beq         |$LN10@PrcmDevice@15|
  01740	e59d3020	 ldr         r3, [sp, #0x20]
  01744	e5933000	 ldr         r3, [r3]
  01748	e353003e	 cmp         r3, #0x3E
  0174c	0a000000	 beq         |$LN10@PrcmDevice@15|
  01750	ea000046	 b           |$cleanUp$48460|
  01754		 |$LN10@PrcmDevice@15|

; 926  : 
; 927  :     // get current source clock/fclk information
; 928  :     pEntry = &s_rgDeviceLookupTable[devId];

  01754	e59d1018	 ldr         r1, [sp, #0x18]
  01758	e3a0301c	 mov         r3, #0x1C
  0175c	e0020391	 mul         r2, r1, r3
  01760	e59f3120	 ldr         r3, [pc, #0x120]
  01764	e0833002	 add         r3, r3, r2
  01768	e58d3004	 str         r3, [sp, #4]

; 929  :     switch (devId)

  0176c	e59d3018	 ldr         r3, [sp, #0x18]
  01770	e58d300c	 str         r3, [sp, #0xC]
  01774	e59d300c	 ldr         r3, [sp, #0xC]
  01778	e353004b	 cmp         r3, #0x4B
  0177c	3a000038	 bcc         |$LN1@PrcmDevice@15|
  01780	e59d300c	 ldr         r3, [sp, #0xC]
  01784	e353004d	 cmp         r3, #0x4D
  01788	9a000000	 bls         |$LN7@PrcmDevice@15|
  0178c	ea000034	 b           |$LN1@PrcmDevice@15|
  01790		 |$LN7@PrcmDevice@15|

; 930  :         {
; 931  :         case OMAP_DEVICE_USBHOST1:
; 932  :         case OMAP_DEVICE_USBHOST2:
; 933  :         case OMAP_DEVICE_USBHOST3:
; 934  :             // check source clock to see if it is already on the source clocks list
; 935  :             if (pEntry->pSrcClocks->rgSourceClocks[3] == (SourceClock_e) rgClocks[0])

  01790	e59d3004	 ldr         r3, [sp, #4]
  01794	e2833018	 add         r3, r3, #0x18
  01798	e5933000	 ldr         r3, [r3]
  0179c	e2833010	 add         r3, r3, #0x10
  017a0	e5932000	 ldr         r2, [r3]
  017a4	e59d3020	 ldr         r3, [sp, #0x20]
  017a8	e5933000	 ldr         r3, [r3]
  017ac	e1520003	 cmp         r2, r3
  017b0	1a000002	 bne         |$LN6@PrcmDevice@15|

; 936  :                 {
; 937  :                 rc = TRUE;

  017b4	e3a03001	 mov         r3, #1
  017b8	e58d3000	 str         r3, [sp]

; 938  :                 goto cleanUp;                

  017bc	ea00002b	 b           |$cleanUp$48460|
  017c0		 |$LN6@PrcmDevice@15|

; 939  :                 }
; 940  : 
; 941  :             // update new fclk
; 942  :             pEntry->pSrcClocks->rgSourceClocks[3] = rgClocks[0];

  017c0	e59d3004	 ldr         r3, [sp, #4]
  017c4	e2833018	 add         r3, r3, #0x18
  017c8	e5933000	 ldr         r3, [r3]
  017cc	e2832010	 add         r2, r3, #0x10
  017d0	e59d3020	 ldr         r3, [sp, #0x20]
  017d4	e5933000	 ldr         r3, [r3]
  017d8	e5823000	 str         r3, [r2]

; 943  :             if (rgClocks[0] == kUSBHOST_120M_FCLK)

  017dc	e59d3020	 ldr         r3, [sp, #0x20]
  017e0	e5933000	 ldr         r3, [r3]
  017e4	e3530043	 cmp         r3, #0x43
  017e8	1a00000e	 bne         |$LN5@PrcmDevice@15|

; 944  :                 {
; 945  :                 pEntry->pSrcClocks->size = 4;

  017ec	e59d3004	 ldr         r3, [sp, #4]
  017f0	e2833018	 add         r3, r3, #0x18
  017f4	e5932000	 ldr         r2, [r3]
  017f8	e3a03004	 mov         r3, #4
  017fc	e5823000	 str         r3, [r2]

; 946  :                 if (pEntry->pfclk->refCount > 0)

  01800	e59d3004	 ldr         r3, [sp, #4]
  01804	e2833004	 add         r3, r3, #4
  01808	e5933000	 ldr         r3, [r3]
  0180c	e5933000	 ldr         r3, [r3]
  01810	e3530000	 cmp         r3, #0
  01814	da000002	 ble         |$LN4@PrcmDevice@15|

; 947  :                     {
; 948  :                     PrcmDeviceEnableFClock(OMAP_DEVICE_HSUSB2, TRUE);

  01818	e3a01001	 mov         r1, #1
  0181c	e3a0004a	 mov         r0, #0x4A
  01820	eb000000	 bl          PrcmDeviceEnableFClock
  01824		 |$LN4@PrcmDevice@15|

; 949  :                     }
; 950  :                 }
; 951  :             else

  01824	ea00000d	 b           |$LN3@PrcmDevice@15|
  01828		 |$LN5@PrcmDevice@15|

; 952  :                 {
; 953  :                 pEntry->pSrcClocks->size = 3;

  01828	e59d3004	 ldr         r3, [sp, #4]
  0182c	e2833018	 add         r3, r3, #0x18
  01830	e5932000	 ldr         r2, [r3]
  01834	e3a03003	 mov         r3, #3
  01838	e5823000	 str         r3, [r2]

; 954  :                 if (pEntry->pfclk->refCount > 0)

  0183c	e59d3004	 ldr         r3, [sp, #4]
  01840	e2833004	 add         r3, r3, #4
  01844	e5933000	 ldr         r3, [r3]
  01848	e5933000	 ldr         r3, [r3]
  0184c	e3530000	 cmp         r3, #0
  01850	da000002	 ble         |$LN2@PrcmDevice@15|

; 955  :                     {
; 956  :                     PrcmDeviceEnableFClock(OMAP_DEVICE_HSUSB2, FALSE);

  01854	e3a01000	 mov         r1, #0
  01858	e3a0004a	 mov         r0, #0x4A
  0185c	eb000000	 bl          PrcmDeviceEnableFClock
  01860		 |$LN2@PrcmDevice@15|
  01860		 |$LN3@PrcmDevice@15|

; 957  :                     }
; 958  :                 }
; 959  :             break;

  01860	ea000000	 b           |$LN8@PrcmDevice@15|
  01864		 |$LN1@PrcmDevice@15|

; 960  :             
; 961  :         default:
; 962  :             goto cleanUp;

  01864	ea000001	 b           |$cleanUp$48460|
  01868		 |$LN8@PrcmDevice@15|

; 963  :         }
; 964  : 
; 965  :     rc = TRUE;

  01868	e3a03001	 mov         r3, #1
  0186c	e58d3000	 str         r3, [sp]
  01870		 |$cleanUp$48460|

; 966  :     
; 967  :     SPECIAL_DEBUG_MESSAGE_DONE(_PrcmDeviceSetSourceClock_USB, devId)
; 968  : 
; 969  : cleanUp:
; 970  :     return rc;

  01870	e59d3000	 ldr         r3, [sp]
  01874	e58d3008	 str         r3, [sp, #8]

; 971  : }

  01878	e59d0008	 ldr         r0, [sp, #8]
  0187c	e28dd010	 add         sp, sp, #0x10
  01880	e89d6000	 ldmia       sp, {sp, lr}
  01884	e12fff1e	 bx          lr
  01888		 |$LN17@PrcmDevice@15|
  01888		 |$LN18@PrcmDevice@15|
  01888	00000000	 DCD         |s_rgDeviceLookupTable|
  0188c		 |$M49015|

			 ENDP  ; |_PrcmDeviceSetSourceClock_USB|

	EXPORT	|??_C@_1EE@JHHLFMG@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAG?$AAe?$AAt?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAd?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EO@HBNBPEKM@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAG?$AAe?$AAt?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAd?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AAd?$AAe?$AAv?$AAI?$AAd@| [ DATA ] ; `string'
	EXPORT	|PrcmDeviceGetEnabledState|

  00078			 AREA	 |.pdata|, PDATA
|$T49031| DCD	|$LN15@PrcmDevice@16|
	DCD	0x40005504

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EE@JHHLFMG@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAG?$AAe?$AAt?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAd?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN@| DCB "-"
	DCB	0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D", 0x0, "e"
	DCB	0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "G", 0x0, "e"
	DCB	0x0, "t", 0x0, "E", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l"
	DCB	0x0, "e", 0x0, "d", 0x0, "S", 0x0, "t", 0x0, "a", 0x0, "t"
	DCB	0x0, "e", 0x0, "(", 0x0, ")", 0x0, "=", 0x0, "%", 0x0, "d"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EO@HBNBPEKM@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAG?$AAe?$AAt?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAd?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AAd?$AAe?$AAv?$AAI?$AAd@| DCB "+"
	DCB	0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D", 0x0, "e"
	DCB	0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "G", 0x0, "e"
	DCB	0x0, "t", 0x0, "E", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l"
	DCB	0x0, "e", 0x0, "d", 0x0, "S", 0x0, "t", 0x0, "a", 0x0, "t"
	DCB	0x0, "e", 0x0, "(", 0x0, "d", 0x0, "e", 0x0, "v", 0x0, "I"
	DCB	0x0, "d", 0x0, "=", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  0188c			 AREA	 |.text|, CODE, ARM

  0188c		 |PrcmDeviceGetEnabledState| PROC

; 984  : {

  0188c		 |$LN15@PrcmDevice@16|
  0188c	e1a0c00d	 mov         r12, sp
  01890	e92d0003	 stmdb       sp!, {r0, r1}
  01894	e92d5000	 stmdb       sp!, {r12, lr}
  01898	e24dd014	 sub         sp, sp, #0x14
  0189c		 |$M49028|

; 985  :     BOOL rc = FALSE;

  0189c	e3a03000	 mov         r3, #0
  018a0	e58d3000	 str         r3, [sp]

; 986  :     if (!g_bSingleThreaded)

  018a4	e59f3128	 ldr         r3, [pc, #0x128]
  018a8	e5933000	 ldr         r3, [r3]
  018ac	e3530000	 cmp         r3, #0
  018b0	1a00000b	 bne         |$LN4@PrcmDevice@16|

; 987  :         OALMSG(OAL_FUNC, (L"+PrcmDeviceGetEnabledState(devId=%d)\r\n", devId));

  018b4	e59f3114	 ldr         r3, [pc, #0x114]
  018b8	e5933440	 ldr         r3, [r3, #0x440]
  018bc	e3130004	 tst         r3, #4
  018c0	0a000005	 beq         |$LN7@PrcmDevice@16|
  018c4	e59d101c	 ldr         r1, [sp, #0x1C]
  018c8	e59f010c	 ldr         r0, [pc, #0x10C]
  018cc	eb000000	 bl          NKDbgPrintfW
  018d0	e3a03001	 mov         r3, #1
  018d4	e58d3008	 str         r3, [sp, #8]
  018d8	ea000001	 b           |$LN8@PrcmDevice@16|
  018dc		 |$LN7@PrcmDevice@16|
  018dc	e3a03000	 mov         r3, #0
  018e0	e58d3008	 str         r3, [sp, #8]
  018e4		 |$LN8@PrcmDevice@16|
  018e4		 |$LN4@PrcmDevice@16|

; 988  : 
; 989  :     if (devId >= OMAP_DEVICE_GENERIC) goto cleanUp;

  018e4	e59d301c	 ldr         r3, [sp, #0x1C]
  018e8	e3530050	 cmp         r3, #0x50
  018ec	3a000000	 bcc         |$LN3@PrcmDevice@16|
  018f0	ea00001f	 b           |$cleanUp$48484|
  018f4		 |$LN3@PrcmDevice@16|

; 990  : 
; 991  :     SPECIAL_DEBUG_MESSAGE(PrcmDeviceGetEnabledState, devId)
; 992  : 
; 993  :     *pbEnable = FALSE;

  018f4	e59d2020	 ldr         r2, [sp, #0x20]
  018f8	e3a03000	 mov         r3, #0
  018fc	e5823000	 str         r3, [r2]

; 994  :     if (s_rgDeviceLookupTable[devId].pfclk != NULL)

  01900	e59d101c	 ldr         r1, [sp, #0x1C]
  01904	e3a0301c	 mov         r3, #0x1C
  01908	e0020391	 mul         r2, r1, r3
  0190c	e59f30c4	 ldr         r3, [pc, #0xC4]
  01910	e0833002	 add         r3, r3, r2
  01914	e2833004	 add         r3, r3, #4
  01918	e5933000	 ldr         r3, [r3]
  0191c	e3530000	 cmp         r3, #0
  01920	0a000011	 beq         |$LN2@PrcmDevice@16|

; 995  :         {
; 996  :         *pbEnable = s_rgDeviceLookupTable[devId].pfclk->refCount != 0;

  01924	e59d101c	 ldr         r1, [sp, #0x1C]
  01928	e3a0301c	 mov         r3, #0x1C
  0192c	e0020391	 mul         r2, r1, r3
  01930	e59f30a0	 ldr         r3, [pc, #0xA0]
  01934	e0833002	 add         r3, r3, r2
  01938	e2833004	 add         r3, r3, #4
  0193c	e5933000	 ldr         r3, [r3]
  01940	e5933000	 ldr         r3, [r3]
  01944	e3530000	 cmp         r3, #0
  01948	0a000002	 beq         |$LN9@PrcmDevice@16|
  0194c	e3a03001	 mov         r3, #1
  01950	e58d300c	 str         r3, [sp, #0xC]
  01954	ea000001	 b           |$LN10@PrcmDevice@16|
  01958		 |$LN9@PrcmDevice@16|
  01958	e3a03000	 mov         r3, #0
  0195c	e58d300c	 str         r3, [sp, #0xC]
  01960		 |$LN10@PrcmDevice@16|
  01960	e59d200c	 ldr         r2, [sp, #0xC]
  01964	e59d3020	 ldr         r3, [sp, #0x20]
  01968	e5832000	 str         r2, [r3]
  0196c		 |$LN2@PrcmDevice@16|

; 997  :         }
; 998  :     
; 999  :     rc = TRUE;

  0196c	e3a03001	 mov         r3, #1
  01970	e58d3000	 str         r3, [sp]
  01974		 |$cleanUp$48484|

; 1000 : 
; 1001 :     SPECIAL_DEBUG_MESSAGE_DONE(PrcmDeviceGetEnabledState, devId)
; 1002 : 
; 1003 : cleanUp:
; 1004 :     if (!g_bSingleThreaded)

  01974	e59f3058	 ldr         r3, [pc, #0x58]
  01978	e5933000	 ldr         r3, [r3]
  0197c	e3530000	 cmp         r3, #0
  01980	1a00000b	 bne         |$LN1@PrcmDevice@16|

; 1005 :         OALMSG(OAL_FUNC, (L"-PrcmDeviceGetEnabledState()=%d\r\n", rc));

  01984	e59f3044	 ldr         r3, [pc, #0x44]
  01988	e5933440	 ldr         r3, [r3, #0x440]
  0198c	e3130004	 tst         r3, #4
  01990	0a000005	 beq         |$LN11@PrcmDevice@16|
  01994	e59d1000	 ldr         r1, [sp]
  01998	e59f002c	 ldr         r0, [pc, #0x2C]
  0199c	eb000000	 bl          NKDbgPrintfW
  019a0	e3a03001	 mov         r3, #1
  019a4	e58d3010	 str         r3, [sp, #0x10]
  019a8	ea000001	 b           |$LN12@PrcmDevice@16|
  019ac		 |$LN11@PrcmDevice@16|
  019ac	e3a03000	 mov         r3, #0
  019b0	e58d3010	 str         r3, [sp, #0x10]
  019b4		 |$LN12@PrcmDevice@16|
  019b4		 |$LN1@PrcmDevice@16|

; 1006 :     return rc;

  019b4	e59d3000	 ldr         r3, [sp]
  019b8	e58d3004	 str         r3, [sp, #4]

; 1007 : }

  019bc	e59d0004	 ldr         r0, [sp, #4]
  019c0	e28dd014	 add         sp, sp, #0x14
  019c4	e89d6000	 ldmia       sp, {sp, lr}
  019c8	e12fff1e	 bx          lr
  019cc		 |$LN16@PrcmDevice@16|
  019cc		 |$LN17@PrcmDevice@16|
  019cc	00000000	 DCD         |??_C@_1EE@JHHLFMG@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAG?$AAe?$AAt?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAd?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN@|
  019d0		 |$LN18@PrcmDevice@16|
  019d0	00000000	 DCD         |dpCurSettings|
  019d4		 |$LN19@PrcmDevice@16|
  019d4	00000000	 DCD         |g_bSingleThreaded|
  019d8		 |$LN20@PrcmDevice@16|
  019d8	00000000	 DCD         |s_rgDeviceLookupTable|
  019dc		 |$LN21@PrcmDevice@16|
  019dc	00000000	 DCD         |??_C@_1EO@HBNBPEKM@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAG?$AAe?$AAt?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAd?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AAd?$AAe?$AAv?$AAI?$AAd@|
  019e0		 |$M49029|

			 ENDP  ; |PrcmDeviceGetEnabledState|

	EXPORT	|??_C@_1EG@DAEKPJBG@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAG?$AAe?$AAt?$AAA?$AAu?$AAt?$AAo?$AAI?$AAd?$AAl?$AAe?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FA@BNNNADLI@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAG?$AAe?$AAt?$AAA?$AAu?$AAt?$AAo?$AAI?$AAd?$AAl?$AAe?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AAd?$AAe?$AAv?$AAI@| [ DATA ] ; `string'
	EXPORT	|PrcmDeviceGetAutoIdleState|

  00080			 AREA	 |.pdata|, PDATA
|$T49047| DCD	|$LN13@PrcmDevice@17|
	DCD	0x40004d04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EG@DAEKPJBG@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAG?$AAe?$AAt?$AAA?$AAu?$AAt?$AAo?$AAI?$AAd?$AAl?$AAe?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd@| DCB "-"
	DCB	0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D", 0x0, "e"
	DCB	0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "G", 0x0, "e"
	DCB	0x0, "t", 0x0, "A", 0x0, "u", 0x0, "t", 0x0, "o", 0x0, "I"
	DCB	0x0, "d", 0x0, "l", 0x0, "e", 0x0, "S", 0x0, "t", 0x0, "a"
	DCB	0x0, "t", 0x0, "e", 0x0, "(", 0x0, ")", 0x0, "=", 0x0, "%"
	DCB	0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FA@BNNNADLI@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAG?$AAe?$AAt?$AAA?$AAu?$AAt?$AAo?$AAI?$AAd?$AAl?$AAe?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AAd?$AAe?$AAv?$AAI@| DCB "+"
	DCB	0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D", 0x0, "e"
	DCB	0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "G", 0x0, "e"
	DCB	0x0, "t", 0x0, "A", 0x0, "u", 0x0, "t", 0x0, "o", 0x0, "I"
	DCB	0x0, "d", 0x0, "l", 0x0, "e", 0x0, "S", 0x0, "t", 0x0, "a"
	DCB	0x0, "t", 0x0, "e", 0x0, "(", 0x0, "d", 0x0, "e", 0x0, "v"
	DCB	0x0, "I", 0x0, "d", 0x0, "=", 0x0, "%", 0x0, "d", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  019e0			 AREA	 |.text|, CODE, ARM

  019e0		 |PrcmDeviceGetAutoIdleState| PROC

; 1021 : {

  019e0		 |$LN13@PrcmDevice@17|
  019e0	e1a0c00d	 mov         r12, sp
  019e4	e92d0003	 stmdb       sp!, {r0, r1}
  019e8	e92d5000	 stmdb       sp!, {r12, lr}
  019ec	e24dd010	 sub         sp, sp, #0x10
  019f0		 |$M49044|

; 1022 :     BOOL rc = FALSE;

  019f0	e3a03000	 mov         r3, #0
  019f4	e58d3000	 str         r3, [sp]

; 1023 :     if (!g_bSingleThreaded)

  019f8	e59f3108	 ldr         r3, [pc, #0x108]
  019fc	e5933000	 ldr         r3, [r3]
  01a00	e3530000	 cmp         r3, #0
  01a04	1a00000b	 bne         |$LN4@PrcmDevice@17|

; 1024 :         OALMSG(OAL_FUNC, (L"+PrcmDeviceGetAutoIdleState(devId=%d)\r\n", devId));

  01a08	e59f30f4	 ldr         r3, [pc, #0xF4]
  01a0c	e5933440	 ldr         r3, [r3, #0x440]
  01a10	e3130004	 tst         r3, #4
  01a14	0a000005	 beq         |$LN7@PrcmDevice@17|
  01a18	e59d1018	 ldr         r1, [sp, #0x18]
  01a1c	e59f00ec	 ldr         r0, [pc, #0xEC]
  01a20	eb000000	 bl          NKDbgPrintfW
  01a24	e3a03001	 mov         r3, #1
  01a28	e58d3008	 str         r3, [sp, #8]
  01a2c	ea000001	 b           |$LN8@PrcmDevice@17|
  01a30		 |$LN7@PrcmDevice@17|
  01a30	e3a03000	 mov         r3, #0
  01a34	e58d3008	 str         r3, [sp, #8]
  01a38		 |$LN8@PrcmDevice@17|
  01a38		 |$LN4@PrcmDevice@17|

; 1025 : 
; 1026 :     SPECIAL_DEBUG_MESSAGE(PrcmDeviceGetAutoIdleState, devId)
; 1027 : 
; 1028 :     if (devId >= OMAP_DEVICE_GENERIC) goto cleanUp;

  01a38	e59d3018	 ldr         r3, [sp, #0x18]
  01a3c	e3530050	 cmp         r3, #0x50
  01a40	3a000000	 bcc         |$LN3@PrcmDevice@17|
  01a44	ea000017	 b           |$cleanUp$48500|
  01a48		 |$LN3@PrcmDevice@17|

; 1029 : 
; 1030 :     *pbEnable = FALSE;

  01a48	e59d201c	 ldr         r2, [sp, #0x1C]
  01a4c	e3a03000	 mov         r3, #0
  01a50	e5823000	 str         r3, [r2]

; 1031 :     if (s_rgDeviceLookupTable[devId].pautoidle != NULL)

  01a54	e59d1018	 ldr         r1, [sp, #0x18]
  01a58	e3a0301c	 mov         r3, #0x1C
  01a5c	e0020391	 mul         r2, r1, r3
  01a60	e59f30a4	 ldr         r3, [pc, #0xA4]
  01a64	e0833002	 add         r3, r3, r2
  01a68	e2833014	 add         r3, r3, #0x14
  01a6c	e5933000	 ldr         r3, [r3]
  01a70	e3530000	 cmp         r3, #0
  01a74	0a000009	 beq         |$LN2@PrcmDevice@17|

; 1032 :         {
; 1033 :         *pbEnable = s_rgDeviceLookupTable[devId].pautoidle->enabled;

  01a78	e59d1018	 ldr         r1, [sp, #0x18]
  01a7c	e3a0301c	 mov         r3, #0x1C
  01a80	e0020391	 mul         r2, r1, r3
  01a84	e59f3080	 ldr         r3, [pc, #0x80]
  01a88	e0833002	 add         r3, r3, r2
  01a8c	e2833014	 add         r3, r3, #0x14
  01a90	e5933000	 ldr         r3, [r3]
  01a94	e5932000	 ldr         r2, [r3]
  01a98	e59d301c	 ldr         r3, [sp, #0x1C]
  01a9c	e5832000	 str         r2, [r3]
  01aa0		 |$LN2@PrcmDevice@17|

; 1034 :         }
; 1035 :     
; 1036 :     rc = TRUE;

  01aa0	e3a03001	 mov         r3, #1
  01aa4	e58d3000	 str         r3, [sp]
  01aa8		 |$cleanUp$48500|

; 1037 : 
; 1038 :     SPECIAL_DEBUG_MESSAGE_DONE(PrcmDeviceGetAutoIdleState, devId)
; 1039 : 
; 1040 : cleanUp:
; 1041 :     if (!g_bSingleThreaded)

  01aa8	e59f3058	 ldr         r3, [pc, #0x58]
  01aac	e5933000	 ldr         r3, [r3]
  01ab0	e3530000	 cmp         r3, #0
  01ab4	1a00000b	 bne         |$LN1@PrcmDevice@17|

; 1042 :         OALMSG(OAL_FUNC, (L"-PrcmDeviceGetAutoIdleState()=%d\r\n", rc));

  01ab8	e59f3044	 ldr         r3, [pc, #0x44]
  01abc	e5933440	 ldr         r3, [r3, #0x440]
  01ac0	e3130004	 tst         r3, #4
  01ac4	0a000005	 beq         |$LN9@PrcmDevice@17|
  01ac8	e59d1000	 ldr         r1, [sp]
  01acc	e59f002c	 ldr         r0, [pc, #0x2C]
  01ad0	eb000000	 bl          NKDbgPrintfW
  01ad4	e3a03001	 mov         r3, #1
  01ad8	e58d300c	 str         r3, [sp, #0xC]
  01adc	ea000001	 b           |$LN10@PrcmDevice@17|
  01ae0		 |$LN9@PrcmDevice@17|
  01ae0	e3a03000	 mov         r3, #0
  01ae4	e58d300c	 str         r3, [sp, #0xC]
  01ae8		 |$LN10@PrcmDevice@17|
  01ae8		 |$LN1@PrcmDevice@17|

; 1043 :     return rc;

  01ae8	e59d3000	 ldr         r3, [sp]
  01aec	e58d3004	 str         r3, [sp, #4]

; 1044 : }   

  01af0	e59d0004	 ldr         r0, [sp, #4]
  01af4	e28dd010	 add         sp, sp, #0x10
  01af8	e89d6000	 ldmia       sp, {sp, lr}
  01afc	e12fff1e	 bx          lr
  01b00		 |$LN14@PrcmDevice@17|
  01b00		 |$LN15@PrcmDevice@17|
  01b00	00000000	 DCD         |??_C@_1EG@DAEKPJBG@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAG?$AAe?$AAt?$AAA?$AAu?$AAt?$AAo?$AAI?$AAd?$AAl?$AAe?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd@|
  01b04		 |$LN16@PrcmDevice@17|
  01b04	00000000	 DCD         |dpCurSettings|
  01b08		 |$LN17@PrcmDevice@17|
  01b08	00000000	 DCD         |g_bSingleThreaded|
  01b0c		 |$LN18@PrcmDevice@17|
  01b0c	00000000	 DCD         |s_rgDeviceLookupTable|
  01b10		 |$LN19@PrcmDevice@17|
  01b10	00000000	 DCD         |??_C@_1FA@BNNNADLI@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAG?$AAe?$AAt?$AAA?$AAu?$AAt?$AAo?$AAI?$AAd?$AAl?$AAe?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AAd?$AAe?$AAv?$AAI@|
  01b14		 |$M49045|

			 ENDP  ; |PrcmDeviceGetAutoIdleState|

	EXPORT	|PrcmDeviceSetSourceClocks|
	EXPORT	|SelectSourceClocks|

  00088			 AREA	 |.pdata|, PDATA
|$T49059| DCD	|$LN5@SelectSour|
	DCD	0x40000f04
; Function compile flags: /Odtp

  01b14			 AREA	 |.text|, CODE, ARM

  01b14		 |SelectSourceClocks| PROC

; 1054 : {

  01b14		 |$LN5@SelectSour|
  01b14	e1a0c00d	 mov         r12, sp
  01b18	e92d0007	 stmdb       sp!, {r0 - r2}
  01b1c	e92d5000	 stmdb       sp!, {r12, lr}
  01b20	e24dd008	 sub         sp, sp, #8
  01b24		 |$M49056|

; 1055 :     return PrcmDeviceSetSourceClocks(devID,count,clockID);

  01b24	e59d2018	 ldr         r2, [sp, #0x18]
  01b28	e59d1014	 ldr         r1, [sp, #0x14]
  01b2c	e59d0010	 ldr         r0, [sp, #0x10]
  01b30	eb000000	 bl          PrcmDeviceSetSourceClocks
  01b34	e58d0004	 str         r0, [sp, #4]
  01b38	e59d3004	 ldr         r3, [sp, #4]
  01b3c	e58d3000	 str         r3, [sp]

; 1056 : }

  01b40	e59d0000	 ldr         r0, [sp]
  01b44	e28dd008	 add         sp, sp, #8
  01b48	e89d6000	 ldmia       sp, {sp, lr}
  01b4c	e12fff1e	 bx          lr
  01b50		 |$M49057|

			 ENDP  ; |SelectSourceClocks|

	EXPORT	|??_C@_1EE@MKDIBCEI@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAS?$AAe?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAC?$AAl?$AAo?$AAc?$AAk?$AAs?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EO@EJAHHGM@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAS?$AAe?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAC?$AAl?$AAo?$AAc?$AAk?$AAs?$AA?$CI?$AAd?$AAe?$AAv?$AAI?$AAd@| [ DATA ] ; `string'

  00090			 AREA	 |.pdata|, PDATA
|$T49069| DCD	|$LN13@PrcmDevice@18|
	DCD	0x40006504

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EE@MKDIBCEI@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAS?$AAe?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAC?$AAl?$AAo?$AAc?$AAk?$AAs?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN@| DCB "-"
	DCB	0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D", 0x0, "e"
	DCB	0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "S", 0x0, "e"
	DCB	0x0, "t", 0x0, "S", 0x0, "o", 0x0, "u", 0x0, "r", 0x0, "c"
	DCB	0x0, "e", 0x0, "C", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k"
	DCB	0x0, "s", 0x0, "(", 0x0, ")", 0x0, "=", 0x0, "%", 0x0, "d"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EO@EJAHHGM@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAS?$AAe?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAC?$AAl?$AAo?$AAc?$AAk?$AAs?$AA?$CI?$AAd?$AAe?$AAv?$AAI?$AAd@| DCB "+"
	DCB	0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D", 0x0, "e"
	DCB	0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "S", 0x0, "e"
	DCB	0x0, "t", 0x0, "S", 0x0, "o", 0x0, "u", 0x0, "r", 0x0, "c"
	DCB	0x0, "e", 0x0, "C", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k"
	DCB	0x0, "s", 0x0, "(", 0x0, "d", 0x0, "e", 0x0, "v", 0x0, "I"
	DCB	0x0, "d", 0x0, "=", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  01b50			 AREA	 |.text|, CODE, ARM

  01b50		 |PrcmDeviceSetSourceClocks| PROC

; 1070 : {

  01b50		 |$LN13@PrcmDevice@18|
  01b50	e1a0c00d	 mov         r12, sp
  01b54	e92d0007	 stmdb       sp!, {r0 - r2}
  01b58	e92d5010	 stmdb       sp!, {r4, r12, lr}
  01b5c	e24dd014	 sub         sp, sp, #0x14
  01b60		 |$M49066|

; 1071 :     BOOL rc = FALSE;

  01b60	e3a03000	 mov         r3, #0
  01b64	e58d3000	 str         r3, [sp]

; 1072 :     if (!g_bSingleThreaded)

  01b68	e59f3164	 ldr         r3, [pc, #0x164]
  01b6c	e5933000	 ldr         r3, [r3]
  01b70	e3530000	 cmp         r3, #0
  01b74	1a00000b	 bne         |$LN4@PrcmDevice@18|

; 1073 :         OALMSG(OAL_FUNC, (L"+PrcmDeviceSetSourceClocks(devId=%d)\r\n", devId));

  01b78	e59f3150	 ldr         r3, [pc, #0x150]
  01b7c	e5933440	 ldr         r3, [r3, #0x440]
  01b80	e3130004	 tst         r3, #4
  01b84	0a000005	 beq         |$LN7@PrcmDevice@18|
  01b88	e59d1020	 ldr         r1, [sp, #0x20]
  01b8c	e59f014c	 ldr         r0, [pc, #0x14C]
  01b90	eb000000	 bl          NKDbgPrintfW
  01b94	e3a03001	 mov         r3, #1
  01b98	e58d3008	 str         r3, [sp, #8]
  01b9c	ea000001	 b           |$LN8@PrcmDevice@18|
  01ba0		 |$LN7@PrcmDevice@18|
  01ba0	e3a03000	 mov         r3, #0
  01ba4	e58d3008	 str         r3, [sp, #8]
  01ba8		 |$LN8@PrcmDevice@18|
  01ba8		 |$LN4@PrcmDevice@18|

; 1074 : 
; 1075 :     SPECIAL_DEBUG_MESSAGE(PrcmDeviceSetSourceClocks, devId)
; 1076 : 
; 1077 :     if (devId >= OMAP_DEVICE_GENERIC) goto cleanUp;

  01ba8	e59d3020	 ldr         r3, [sp, #0x20]
  01bac	e3530050	 cmp         r3, #0x50
  01bb0	3a000000	 bcc         |$LN3@PrcmDevice@18|
  01bb4	ea00002e	 b           |$cleanUp$48526|
  01bb8		 |$LN3@PrcmDevice@18|

; 1078 : 
; 1079 :     Lock(Mutex_DeviceClock);

  01bb8	e3a00000	 mov         r0, #0
  01bbc	eb000000	 bl          Lock

; 1080 :     if (s_rgDeviceLookupTable[devId].pSrcClocks != NULL &&
; 1081 :         s_rgClockManagementRoutines[s_rgDeviceLookupTable[devId].powerDomain].PrcmSetSourceDeviceClock)

  01bc0	e59d1020	 ldr         r1, [sp, #0x20]
  01bc4	e3a0301c	 mov         r3, #0x1C
  01bc8	e0020391	 mul         r2, r1, r3
  01bcc	e59f3108	 ldr         r3, [pc, #0x108]
  01bd0	e0833002	 add         r3, r3, r2
  01bd4	e2833018	 add         r3, r3, #0x18
  01bd8	e5933000	 ldr         r3, [r3]
  01bdc	e3530000	 cmp         r3, #0
  01be0	0a000021	 beq         |$LN2@PrcmDevice@18|
  01be4	e59d1020	 ldr         r1, [sp, #0x20]
  01be8	e3a0301c	 mov         r3, #0x1C
  01bec	e0020391	 mul         r2, r1, r3
  01bf0	e59f30e4	 ldr         r3, [pc, #0xE4]
  01bf4	e0833002	 add         r3, r3, r2
  01bf8	e5931000	 ldr         r1, [r3]
  01bfc	e3a03010	 mov         r3, #0x10
  01c00	e0020391	 mul         r2, r1, r3
  01c04	e59f30cc	 ldr         r3, [pc, #0xCC]
  01c08	e0833002	 add         r3, r3, r2
  01c0c	e283300c	 add         r3, r3, #0xC
  01c10	e5933000	 ldr         r3, [r3]
  01c14	e3530000	 cmp         r3, #0
  01c18	0a000013	 beq         |$LN2@PrcmDevice@18|

; 1082 :         {
; 1083 :         rc = s_rgClockManagementRoutines[s_rgDeviceLookupTable[devId].powerDomain].PrcmSetSourceDeviceClock(devId, count, rgClocks);

  01c1c	e59d2028	 ldr         r2, [sp, #0x28]
  01c20	e59d1024	 ldr         r1, [sp, #0x24]
  01c24	e59d0020	 ldr         r0, [sp, #0x20]
  01c28	e59d4020	 ldr         r4, [sp, #0x20]
  01c2c	e3a0301c	 mov         r3, #0x1C
  01c30	e00e0394	 mul         lr, r4, r3
  01c34	e59f30a0	 ldr         r3, [pc, #0xA0]
  01c38	e083300e	 add         r3, r3, lr
  01c3c	e5934000	 ldr         r4, [r3]
  01c40	e3a03010	 mov         r3, #0x10
  01c44	e00e0394	 mul         lr, r4, r3
  01c48	e59f3088	 ldr         r3, [pc, #0x88]
  01c4c	e083300e	 add         r3, r3, lr
  01c50	e283300c	 add         r3, r3, #0xC
  01c54	e5933000	 ldr         r3, [r3]
  01c58	e1a0e00f	 mov         lr, pc
  01c5c	e12fff13	 bx          r3
  01c60	e58d000c	 str         r0, [sp, #0xC]
  01c64	e59d300c	 ldr         r3, [sp, #0xC]
  01c68	e58d3000	 str         r3, [sp]
  01c6c		 |$LN2@PrcmDevice@18|

; 1084 :         }
; 1085 :     Unlock(Mutex_DeviceClock);    

  01c6c	e3a00000	 mov         r0, #0
  01c70	eb000000	 bl          Unlock
  01c74		 |$cleanUp$48526|

; 1086 :     
; 1087 :     SPECIAL_DEBUG_MESSAGE_DONE(PrcmDeviceSetSourceClocks, devId)
; 1088 : 
; 1089 : cleanUp:
; 1090 :     if (!g_bSingleThreaded)

  01c74	e59f3058	 ldr         r3, [pc, #0x58]
  01c78	e5933000	 ldr         r3, [r3]
  01c7c	e3530000	 cmp         r3, #0
  01c80	1a00000b	 bne         |$LN1@PrcmDevice@18|

; 1091 :         OALMSG(OAL_FUNC, (L"-PrcmDeviceSetSourceClocks()=%d\r\n", rc));

  01c84	e59f3044	 ldr         r3, [pc, #0x44]
  01c88	e5933440	 ldr         r3, [r3, #0x440]
  01c8c	e3130004	 tst         r3, #4
  01c90	0a000005	 beq         |$LN9@PrcmDevice@18|
  01c94	e59d1000	 ldr         r1, [sp]
  01c98	e59f002c	 ldr         r0, [pc, #0x2C]
  01c9c	eb000000	 bl          NKDbgPrintfW
  01ca0	e3a03001	 mov         r3, #1
  01ca4	e58d3010	 str         r3, [sp, #0x10]
  01ca8	ea000001	 b           |$LN10@PrcmDevice@18|
  01cac		 |$LN9@PrcmDevice@18|
  01cac	e3a03000	 mov         r3, #0
  01cb0	e58d3010	 str         r3, [sp, #0x10]
  01cb4		 |$LN10@PrcmDevice@18|
  01cb4		 |$LN1@PrcmDevice@18|

; 1092 :     return rc;

  01cb4	e59d3000	 ldr         r3, [sp]
  01cb8	e58d3004	 str         r3, [sp, #4]

; 1093 : }   

  01cbc	e59d0004	 ldr         r0, [sp, #4]
  01cc0	e28dd014	 add         sp, sp, #0x14
  01cc4	e89d6010	 ldmia       sp, {r4, sp, lr}
  01cc8	e12fff1e	 bx          lr
  01ccc		 |$LN14@PrcmDevice@18|
  01ccc		 |$LN15@PrcmDevice@18|
  01ccc	00000000	 DCD         |??_C@_1EE@MKDIBCEI@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAS?$AAe?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAC?$AAl?$AAo?$AAc?$AAk?$AAs?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN@|
  01cd0		 |$LN16@PrcmDevice@18|
  01cd0	00000000	 DCD         |dpCurSettings|
  01cd4		 |$LN17@PrcmDevice@18|
  01cd4	00000000	 DCD         |g_bSingleThreaded|
  01cd8		 |$LN18@PrcmDevice@18|
  01cd8	00000000	 DCD         |s_rgClockManagementRoutines|
  01cdc		 |$LN19@PrcmDevice@18|
  01cdc	00000000	 DCD         |s_rgDeviceLookupTable|
  01ce0		 |$LN20@PrcmDevice@18|
  01ce0	00000000	 DCD         |??_C@_1EO@EJAHHGM@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAS?$AAe?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAC?$AAl?$AAo?$AAc?$AAk?$AAs?$AA?$CI?$AAd?$AAe?$AAv?$AAI?$AAd@|
  01ce4		 |$M49067|

			 ENDP  ; |PrcmDeviceSetSourceClocks|

	EXPORT	|??_C@_1DO@HIGIHNHE@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FE@KMJFBHPK@?$AA?5?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$CF?$AAs?$AAu?$AAp?$AAd?$AAa?$AAt?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1M@JKENIMHM@?$AAs?$AAk?$AAi?$AAp?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_11LOCGONAA@?$AA?$AA@| [ DATA ]	; `string'
	EXPORT	|??_C@_1FA@FIBGHEOF@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?$CI?$AAd?$AAe?$AAv?$AAI?$AAd?$AA?$DN?$AA?$CF?$AAd@| [ DATA ] ; `string'
	IMPORT	|InterlockedDecrement|
	IMPORT	|InterlockedIncrement|

  00098			 AREA	 |.pdata|, PDATA
|$T49090| DCD	|$LN27@PrcmDevice@19|
	DCD	0x4000ce04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@HIGIHNHE@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D", 0x0, "e"
	DCB	0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "E", 0x0, "n"
	DCB	0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, "I", 0x0, "C"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, "(", 0x0, ")"
	DCB	0x0, "=", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FE@KMJFBHPK@?$AA?5?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$CF?$AAs?$AAu?$AAp?$AAd?$AAa?$AAt?$AAe@| DCB " "
	DCB	0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D", 0x0, "e"
	DCB	0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "E", 0x0, "n"
	DCB	0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, "I", 0x0, "C"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, " ", 0x0, "%"
	DCB	0x0, "s", 0x0, "u", 0x0, "p", 0x0, "d", 0x0, "a", 0x0, "t"
	DCB	0x0, "e", 0x0, " ", 0x0, "c", 0x0, "l", 0x0, "o", 0x0, "c"
	DCB	0x0, "k", 0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@JKENIMHM@?$AAs?$AAk?$AAi?$AAp?$AA?5?$AA?$AA@| DCB "s", 0x0, "k", 0x0
	DCB	"i", 0x0, "p", 0x0, " ", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_11LOCGONAA@?$AA?$AA@| DCB 0x0, 0x0		; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FA@FIBGHEOF@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?$CI?$AAd?$AAe?$AAv?$AAI?$AAd?$AA?$DN?$AA?$CF?$AAd@| DCB "+"
	DCB	0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D", 0x0, "e"
	DCB	0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "E", 0x0, "n"
	DCB	0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, "I", 0x0, "C"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, "(", 0x0, "d"
	DCB	0x0, "e", 0x0, "v", 0x0, "I", 0x0, "d", 0x0, "=", 0x0, "%"
	DCB	0x0, "d", 0x0, ",", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  01ce4			 AREA	 |.text|, CODE, ARM

  01ce4		 |PrcmDeviceEnableIClock| PROC

; 1107 : {

  01ce4		 |$LN27@PrcmDevice@19|
  01ce4	e1a0c00d	 mov         r12, sp
  01ce8	e92d0003	 stmdb       sp!, {r0, r1}
  01cec	e92d5000	 stmdb       sp!, {r12, lr}
  01cf0	e24dd028	 sub         sp, sp, #0x28
  01cf4		 |$M49087|

; 1108 :     BOOL rc = TRUE;

  01cf4	e3a03001	 mov         r3, #1
  01cf8	e58d3000	 str         r3, [sp]

; 1109 :     BOOL bUpdateClocks = FALSE;

  01cfc	e3a03000	 mov         r3, #0
  01d00	e58d3004	 str         r3, [sp, #4]

; 1110 :     if (!g_bSingleThreaded)

  01d04	e59f32f4	 ldr         r3, [pc, #0x2F4]
  01d08	e5933000	 ldr         r3, [r3]
  01d0c	e3530000	 cmp         r3, #0
  01d10	1a00000c	 bne         |$LN14@PrcmDevice@19|

; 1111 :         OALMSG(OAL_FUNC, (L"+PrcmDeviceEnableIClock(devId=%d, %d)\r\n", devId, bEnable));

  01d14	e59f32e0	 ldr         r3, [pc, #0x2E0]
  01d18	e5933440	 ldr         r3, [r3, #0x440]
  01d1c	e3130004	 tst         r3, #4
  01d20	0a000006	 beq         |$LN17@PrcmDevice@19|
  01d24	e59d2034	 ldr         r2, [sp, #0x34]
  01d28	e59d1030	 ldr         r1, [sp, #0x30]
  01d2c	e59f02e4	 ldr         r0, [pc, #0x2E4]
  01d30	eb000000	 bl          NKDbgPrintfW
  01d34	e3a03001	 mov         r3, #1
  01d38	e58d300c	 str         r3, [sp, #0xC]
  01d3c	ea000001	 b           |$LN18@PrcmDevice@19|
  01d40		 |$LN17@PrcmDevice@19|
  01d40	e3a03000	 mov         r3, #0
  01d44	e58d300c	 str         r3, [sp, #0xC]
  01d48		 |$LN18@PrcmDevice@19|
  01d48		 |$LN14@PrcmDevice@19|

; 1112 : 
; 1113 :     SPECIAL_DEBUG_MESSAGE2(PrcmDeviceEnableIClock, devId, bEnable)
; 1114 : 
; 1115 :     if (devId >= OMAP_DEVICE_GENERIC) goto cleanUp;

  01d48	e59d3030	 ldr         r3, [sp, #0x30]
  01d4c	e3530050	 cmp         r3, #0x50
  01d50	3a000000	 bcc         |$LN13@PrcmDevice@19|
  01d54	ea000091	 b           |$cleanUp$48543|
  01d58		 |$LN13@PrcmDevice@19|

; 1116 :     if (s_rgDeviceLookupTable[devId].piclk == NULL) goto cleanUp;

  01d58	e59d1030	 ldr         r1, [sp, #0x30]
  01d5c	e3a0301c	 mov         r3, #0x1C
  01d60	e0020391	 mul         r2, r1, r3
  01d64	e59f329c	 ldr         r3, [pc, #0x29C]
  01d68	e0833002	 add         r3, r3, r2
  01d6c	e2833008	 add         r3, r3, #8
  01d70	e5933000	 ldr         r3, [r3]
  01d74	e3530000	 cmp         r3, #0
  01d78	1a000000	 bne         |$LN12@PrcmDevice@19|
  01d7c	ea000087	 b           |$cleanUp$48543|
  01d80		 |$LN12@PrcmDevice@19|

; 1117 : 
; 1118 :     if (bEnable != FALSE)

  01d80	e59d3034	 ldr         r3, [sp, #0x34]
  01d84	e3530000	 cmp         r3, #0
  01d88	0a00000e	 beq         |$LN11@PrcmDevice@19|

; 1119 :         {
; 1120 :         if (InterlockedIncrement(&s_rgDeviceLookupTable[devId].piclk->refCount) == 1)

  01d8c	e59d1030	 ldr         r1, [sp, #0x30]
  01d90	e3a0301c	 mov         r3, #0x1C
  01d94	e0020391	 mul         r2, r1, r3
  01d98	e59f3268	 ldr         r3, [pc, #0x268]
  01d9c	e0833002	 add         r3, r3, r2
  01da0	e2833008	 add         r3, r3, #8
  01da4	e5930000	 ldr         r0, [r3]
  01da8	eb000000	 bl          InterlockedIncrement
  01dac	e58d0010	 str         r0, [sp, #0x10]
  01db0	e59d3010	 ldr         r3, [sp, #0x10]
  01db4	e3530001	 cmp         r3, #1
  01db8	1a000001	 bne         |$LN10@PrcmDevice@19|

; 1121 :             {
; 1122 :             bUpdateClocks = TRUE;

  01dbc	e3a03001	 mov         r3, #1
  01dc0	e58d3004	 str         r3, [sp, #4]
  01dc4		 |$LN10@PrcmDevice@19|

; 1123 :             }

  01dc4	ea000017	 b           |$LN9@PrcmDevice@19|
  01dc8		 |$LN11@PrcmDevice@19|

; 1124 :         }
; 1125 :     else if (s_rgDeviceLookupTable[devId].piclk->refCount > 0)

  01dc8	e59d1030	 ldr         r1, [sp, #0x30]
  01dcc	e3a0301c	 mov         r3, #0x1C
  01dd0	e0020391	 mul         r2, r1, r3
  01dd4	e59f322c	 ldr         r3, [pc, #0x22C]
  01dd8	e0833002	 add         r3, r3, r2
  01ddc	e2833008	 add         r3, r3, #8
  01de0	e5933000	 ldr         r3, [r3]
  01de4	e5933000	 ldr         r3, [r3]
  01de8	e3530000	 cmp         r3, #0
  01dec	da00000d	 ble         |$LN8@PrcmDevice@19|

; 1126 :         {
; 1127 :         if (InterlockedDecrement(&s_rgDeviceLookupTable[devId].piclk->refCount) == 0)

  01df0	e59d1030	 ldr         r1, [sp, #0x30]
  01df4	e3a0301c	 mov         r3, #0x1C
  01df8	e0020391	 mul         r2, r1, r3
  01dfc	e59f3204	 ldr         r3, [pc, #0x204]
  01e00	e0833002	 add         r3, r3, r2
  01e04	e2833008	 add         r3, r3, #8
  01e08	e5930000	 ldr         r0, [r3]
  01e0c	eb000000	 bl          InterlockedDecrement
  01e10	e58d0014	 str         r0, [sp, #0x14]
  01e14	e59d3014	 ldr         r3, [sp, #0x14]
  01e18	e3530000	 cmp         r3, #0
  01e1c	1a000001	 bne         |$LN7@PrcmDevice@19|

; 1128 :             {
; 1129 :             bUpdateClocks = TRUE;

  01e20	e3a03001	 mov         r3, #1
  01e24	e58d3004	 str         r3, [sp, #4]
  01e28		 |$LN7@PrcmDevice@19|
  01e28		 |$LN8@PrcmDevice@19|
  01e28		 |$LN9@PrcmDevice@19|

; 1130 :             }
; 1131 :         }
; 1132 : 
; 1133 :     if (!g_bSingleThreaded)

  01e28	e59f31d0	 ldr         r3, [pc, #0x1D0]
  01e2c	e5933000	 ldr         r3, [r3]
  01e30	e3530000	 cmp         r3, #0
  01e34	1a000013	 bne         |$LN6@PrcmDevice@19|

; 1134 :         OALMSG(OAL_FUNC, (L" PrcmDeviceEnableIClock %supdate clocks\r\n", bUpdateClocks ? L"" : L"skip "));

  01e38	e59f31bc	 ldr         r3, [pc, #0x1BC]
  01e3c	e5933440	 ldr         r3, [r3, #0x440]
  01e40	e3130004	 tst         r3, #4
  01e44	0a00000d	 beq         |$LN21@PrcmDevice@19|
  01e48	e59d3004	 ldr         r3, [sp, #4]
  01e4c	e3530000	 cmp         r3, #0
  01e50	0a000002	 beq         |$LN19@PrcmDevice@19|
  01e54	e59f31b8	 ldr         r3, [pc, #0x1B8]
  01e58	e58d3018	 str         r3, [sp, #0x18]
  01e5c	ea000001	 b           |$LN20@PrcmDevice@19|
  01e60		 |$LN19@PrcmDevice@19|
  01e60	e59f31a8	 ldr         r3, [pc, #0x1A8]
  01e64	e58d3018	 str         r3, [sp, #0x18]
  01e68		 |$LN20@PrcmDevice@19|
  01e68	e59d1018	 ldr         r1, [sp, #0x18]
  01e6c	e59f0198	 ldr         r0, [pc, #0x198]
  01e70	eb000000	 bl          NKDbgPrintfW
  01e74	e3a03001	 mov         r3, #1
  01e78	e58d301c	 str         r3, [sp, #0x1C]
  01e7c	ea000001	 b           |$LN22@PrcmDevice@19|
  01e80		 |$LN21@PrcmDevice@19|
  01e80	e3a03000	 mov         r3, #0
  01e84	e58d301c	 str         r3, [sp, #0x1C]
  01e88		 |$LN22@PrcmDevice@19|
  01e88		 |$LN6@PrcmDevice@19|

; 1135 :     // update hardware if clock is being enabled and it's not a virtual bit
; 1136 :     if (bUpdateClocks == TRUE && s_rgDeviceLookupTable[devId].piclk->bVirtual == FALSE)

  01e88	e59d3004	 ldr         r3, [sp, #4]
  01e8c	e3530001	 cmp         r3, #1
  01e90	1a000042	 bne         |$LN5@PrcmDevice@19|
  01e94	e59d1030	 ldr         r1, [sp, #0x30]
  01e98	e3a0301c	 mov         r3, #0x1C
  01e9c	e0020391	 mul         r2, r1, r3
  01ea0	e59f3160	 ldr         r3, [pc, #0x160]
  01ea4	e0833002	 add         r3, r3, r2
  01ea8	e2833008	 add         r3, r3, #8
  01eac	e5933000	 ldr         r3, [r3]
  01eb0	e283300c	 add         r3, r3, #0xC
  01eb4	e5933000	 ldr         r3, [r3]
  01eb8	e3530000	 cmp         r3, #0
  01ebc	1a000037	 bne         |$LN5@PrcmDevice@19|

; 1137 :         {
; 1138 :         Lock(Mutex_DeviceClock);

  01ec0	e3a00000	 mov         r0, #0
  01ec4	eb000000	 bl          Lock

; 1139 :         if (bEnable)

  01ec8	e59d3034	 ldr         r3, [sp, #0x34]
  01ecc	e3530000	 cmp         r3, #0
  01ed0	0a000007	 beq         |$LN4@PrcmDevice@19|

; 1140 :             {
; 1141 :             _PrcmDeviceAddrefDeviceDomain(s_rgDeviceLookupTable[devId].powerDomain);

  01ed4	e59d1030	 ldr         r1, [sp, #0x30]
  01ed8	e3a0301c	 mov         r3, #0x1C
  01edc	e0020391	 mul         r2, r1, r3
  01ee0	e59f3120	 ldr         r3, [pc, #0x120]
  01ee4	e0833002	 add         r3, r3, r2
  01ee8	e5930000	 ldr         r0, [r3]
  01eec	eb000000	 bl          _PrcmDeviceAddrefDeviceDomain

; 1142 :             }
; 1143 :         else

  01ef0	ea000006	 b           |$LN3@PrcmDevice@19|
  01ef4		 |$LN4@PrcmDevice@19|

; 1144 :             {
; 1145 :             _PrcmDeviceReleaseDeviceDomain(s_rgDeviceLookupTable[devId].powerDomain);

  01ef4	e59d1030	 ldr         r1, [sp, #0x30]
  01ef8	e3a0301c	 mov         r3, #0x1C
  01efc	e0020391	 mul         r2, r1, r3
  01f00	e59f3100	 ldr         r3, [pc, #0x100]
  01f04	e0833002	 add         r3, r3, r2
  01f08	e5930000	 ldr         r0, [r3]
  01f0c	eb000000	 bl          _PrcmDeviceReleaseDeviceDomain
  01f10		 |$LN3@PrcmDevice@19|

; 1146 :             }
; 1147 :         
; 1148 :         _PrcmDeviceEnableWakeUp(devId, bEnable);

  01f10	e59d1034	 ldr         r1, [sp, #0x34]
  01f14	e59d0030	 ldr         r0, [sp, #0x30]
  01f18	eb000000	 bl          _PrcmDeviceEnableWakeUp

; 1149 :         if (s_rgClockManagementRoutines[s_rgDeviceLookupTable[devId].powerDomain].PrcmDeviceEnableIClock)

  01f1c	e59d1030	 ldr         r1, [sp, #0x30]
  01f20	e3a0301c	 mov         r3, #0x1C
  01f24	e0020391	 mul         r2, r1, r3
  01f28	e59f30d8	 ldr         r3, [pc, #0xD8]
  01f2c	e0833002	 add         r3, r3, r2
  01f30	e5931000	 ldr         r1, [r3]
  01f34	e3a03010	 mov         r3, #0x10
  01f38	e0020391	 mul         r2, r1, r3
  01f3c	e59f30c0	 ldr         r3, [pc, #0xC0]
  01f40	e0833002	 add         r3, r3, r2
  01f44	e5933000	 ldr         r3, [r3]
  01f48	e3530000	 cmp         r3, #0
  01f4c	0a000011	 beq         |$LN2@PrcmDevice@19|

; 1150 :             {
; 1151 :             rc = s_rgClockManagementRoutines[s_rgDeviceLookupTable[devId].powerDomain].PrcmDeviceEnableIClock(devId, bEnable);

  01f50	e59d1034	 ldr         r1, [sp, #0x34]
  01f54	e59d0030	 ldr         r0, [sp, #0x30]
  01f58	e59de030	 ldr         lr, [sp, #0x30]
  01f5c	e3a0301c	 mov         r3, #0x1C
  01f60	e002039e	 mul         r2, lr, r3
  01f64	e59f309c	 ldr         r3, [pc, #0x9C]
  01f68	e0833002	 add         r3, r3, r2
  01f6c	e593e000	 ldr         lr, [r3]
  01f70	e3a03010	 mov         r3, #0x10
  01f74	e002039e	 mul         r2, lr, r3
  01f78	e59f3084	 ldr         r3, [pc, #0x84]
  01f7c	e0833002	 add         r3, r3, r2
  01f80	e5933000	 ldr         r3, [r3]
  01f84	e1a0e00f	 mov         lr, pc
  01f88	e12fff13	 bx          r3
  01f8c	e58d0020	 str         r0, [sp, #0x20]
  01f90	e59d3020	 ldr         r3, [sp, #0x20]
  01f94	e58d3000	 str         r3, [sp]
  01f98		 |$LN2@PrcmDevice@19|

; 1152 :             }
; 1153 :         Unlock(Mutex_DeviceClock);

  01f98	e3a00000	 mov         r0, #0
  01f9c	eb000000	 bl          Unlock
  01fa0		 |$LN5@PrcmDevice@19|
  01fa0		 |$cleanUp$48543|

; 1154 :         }
; 1155 : 
; 1156 :     SPECIAL_DEBUG_MESSAGE_DONE(PrcmDeviceEnableIClock, devId)
; 1157 : 
; 1158 : cleanUp:
; 1159 :     if (!g_bSingleThreaded)

  01fa0	e59f3058	 ldr         r3, [pc, #0x58]
  01fa4	e5933000	 ldr         r3, [r3]
  01fa8	e3530000	 cmp         r3, #0
  01fac	1a00000b	 bne         |$LN1@PrcmDevice@19|

; 1160 :         OALMSG(OAL_FUNC, (L"-PrcmDeviceEnableIClock()=%d\r\n", rc));

  01fb0	e59f3044	 ldr         r3, [pc, #0x44]
  01fb4	e5933440	 ldr         r3, [r3, #0x440]
  01fb8	e3130004	 tst         r3, #4
  01fbc	0a000005	 beq         |$LN23@PrcmDevice@19|
  01fc0	e59d1000	 ldr         r1, [sp]
  01fc4	e59f002c	 ldr         r0, [pc, #0x2C]
  01fc8	eb000000	 bl          NKDbgPrintfW
  01fcc	e3a03001	 mov         r3, #1
  01fd0	e58d3024	 str         r3, [sp, #0x24]
  01fd4	ea000001	 b           |$LN24@PrcmDevice@19|
  01fd8		 |$LN23@PrcmDevice@19|
  01fd8	e3a03000	 mov         r3, #0
  01fdc	e58d3024	 str         r3, [sp, #0x24]
  01fe0		 |$LN24@PrcmDevice@19|
  01fe0		 |$LN1@PrcmDevice@19|

; 1161 : 
; 1162 :     return rc;

  01fe0	e59d3000	 ldr         r3, [sp]
  01fe4	e58d3008	 str         r3, [sp, #8]

; 1163 : }

  01fe8	e59d0008	 ldr         r0, [sp, #8]
  01fec	e28dd028	 add         sp, sp, #0x28
  01ff0	e89d6000	 ldmia       sp, {sp, lr}
  01ff4	e12fff1e	 bx          lr
  01ff8		 |$LN28@PrcmDevice@19|
  01ff8		 |$LN29@PrcmDevice@19|
  01ff8	00000000	 DCD         |??_C@_1DO@HIGIHNHE@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  01ffc		 |$LN30@PrcmDevice@19|
  01ffc	00000000	 DCD         |dpCurSettings|
  02000		 |$LN31@PrcmDevice@19|
  02000	00000000	 DCD         |g_bSingleThreaded|
  02004		 |$LN32@PrcmDevice@19|
  02004	00000000	 DCD         |s_rgClockManagementRoutines|
  02008		 |$LN33@PrcmDevice@19|
  02008	00000000	 DCD         |s_rgDeviceLookupTable|
  0200c		 |$LN34@PrcmDevice@19|
  0200c	00000000	 DCD         |??_C@_1FE@KMJFBHPK@?$AA?5?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$CF?$AAs?$AAu?$AAp?$AAd?$AAa?$AAt?$AAe@|
  02010		 |$LN35@PrcmDevice@19|
  02010	00000000	 DCD         |??_C@_1M@JKENIMHM@?$AAs?$AAk?$AAi?$AAp?$AA?5?$AA?$AA@|
  02014		 |$LN36@PrcmDevice@19|
  02014	00000000	 DCD         |??_C@_11LOCGONAA@?$AA?$AA@|
  02018		 |$LN37@PrcmDevice@19|
  02018	00000000	 DCD         |??_C@_1FA@FIBGHEOF@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?$CI?$AAd?$AAe?$AAv?$AAI?$AAd?$AA?$DN?$AA?$CF?$AAd@|
  0201c		 |$M49088|

			 ENDP  ; |PrcmDeviceEnableIClock|

	EXPORT	|??_C@_1DO@HBMOGGMP@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAF?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|_PrcmUpdateDeviceClockSource|
	EXPORT	|??_C@_1FE@HMEOIMKB@?$AA?5?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAF?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$CF?$AAs?$AAu?$AAp?$AAd?$AAa?$AAt?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FA@LELFGAEH@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAF?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?$CI?$AAd?$AAe?$AAv?$AAI?$AAd?$AA?$DN?$AA?$CF?$AAd@| [ DATA ] ; `string'
	IMPORT	|PrcmDomainUpdateRefCount|

  000a0			 AREA	 |.pdata|, PDATA
|$T49114| DCD	|$LN27@PrcmDevice@20|
	DCD	0x4000dd04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@HBMOGGMP@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAF?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D", 0x0, "e"
	DCB	0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "E", 0x0, "n"
	DCB	0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, "F", 0x0, "C"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, "(", 0x0, ")"
	DCB	0x0, "=", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FE@HMEOIMKB@?$AA?5?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAF?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$CF?$AAs?$AAu?$AAp?$AAd?$AAa?$AAt?$AAe@| DCB " "
	DCB	0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D", 0x0, "e"
	DCB	0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "E", 0x0, "n"
	DCB	0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, "F", 0x0, "C"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, " ", 0x0, "%"
	DCB	0x0, "s", 0x0, "u", 0x0, "p", 0x0, "d", 0x0, "a", 0x0, "t"
	DCB	0x0, "e", 0x0, " ", 0x0, "c", 0x0, "l", 0x0, "o", 0x0, "c"
	DCB	0x0, "k", 0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FA@LELFGAEH@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAF?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?$CI?$AAd?$AAe?$AAv?$AAI?$AAd?$AA?$DN?$AA?$CF?$AAd@| DCB "+"
	DCB	0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D", 0x0, "e"
	DCB	0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "E", 0x0, "n"
	DCB	0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, "F", 0x0, "C"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, "(", 0x0, "d"
	DCB	0x0, "e", 0x0, "v", 0x0, "I", 0x0, "d", 0x0, "=", 0x0, "%"
	DCB	0x0, "d", 0x0, ",", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  0201c			 AREA	 |.text|, CODE, ARM

  0201c		 |PrcmDeviceEnableFClock| PROC

; 1176 : {

  0201c		 |$LN27@PrcmDevice@20|
  0201c	e1a0c00d	 mov         r12, sp
  02020	e92d0003	 stmdb       sp!, {r0, r1}
  02024	e92d5000	 stmdb       sp!, {r12, lr}
  02028	e24dd028	 sub         sp, sp, #0x28
  0202c		 |$M49111|

; 1177 :     BOOL rc = TRUE;

  0202c	e3a03001	 mov         r3, #1
  02030	e58d3000	 str         r3, [sp]

; 1178 :     BOOL bUpdateClocks = FALSE;

  02034	e3a03000	 mov         r3, #0
  02038	e58d3004	 str         r3, [sp, #4]

; 1179 :     if (!g_bSingleThreaded)

  0203c	e59f3330	 ldr         r3, [pc, #0x330]
  02040	e5933000	 ldr         r3, [r3]
  02044	e3530000	 cmp         r3, #0
  02048	1a00000c	 bne         |$LN14@PrcmDevice@20|

; 1180 :         OALMSG(OAL_FUNC, (L"+PrcmDeviceEnableFClock(devId=%d, %d)\r\n", devId, bEnable));

  0204c	e59f331c	 ldr         r3, [pc, #0x31C]
  02050	e5933440	 ldr         r3, [r3, #0x440]
  02054	e3130004	 tst         r3, #4
  02058	0a000006	 beq         |$LN17@PrcmDevice@20|
  0205c	e59d2034	 ldr         r2, [sp, #0x34]
  02060	e59d1030	 ldr         r1, [sp, #0x30]
  02064	e59f0320	 ldr         r0, [pc, #0x320]
  02068	eb000000	 bl          NKDbgPrintfW
  0206c	e3a03001	 mov         r3, #1
  02070	e58d300c	 str         r3, [sp, #0xC]
  02074	ea000001	 b           |$LN18@PrcmDevice@20|
  02078		 |$LN17@PrcmDevice@20|
  02078	e3a03000	 mov         r3, #0
  0207c	e58d300c	 str         r3, [sp, #0xC]
  02080		 |$LN18@PrcmDevice@20|
  02080		 |$LN14@PrcmDevice@20|

; 1181 : 
; 1182 :     SPECIAL_DEBUG_MESSAGE2(PrcmDeviceEnableFClock, devId, bEnable)
; 1183 : 
; 1184 :     if (devId >= OMAP_DEVICE_GENERIC) goto cleanUp;

  02080	e59d3030	 ldr         r3, [sp, #0x30]
  02084	e3530050	 cmp         r3, #0x50
  02088	3a000000	 bcc         |$LN13@PrcmDevice@20|
  0208c	ea0000a0	 b           |$cleanUp$48574|
  02090		 |$LN13@PrcmDevice@20|

; 1185 :     // update autoidle for device
; 1186 :     _PrcmDeviceHwUpdateAutoidle(devId);

  02090	e59d0030	 ldr         r0, [sp, #0x30]
  02094	eb000000	 bl          _PrcmDeviceHwUpdateAutoidle

; 1187 :     
; 1188 :     if (s_rgDeviceLookupTable[devId].pfclk == NULL) goto cleanUp;

  02098	e59d1030	 ldr         r1, [sp, #0x30]
  0209c	e3a0301c	 mov         r3, #0x1C
  020a0	e0020391	 mul         r2, r1, r3
  020a4	e59f32cc	 ldr         r3, [pc, #0x2CC]
  020a8	e0833002	 add         r3, r3, r2
  020ac	e2833004	 add         r3, r3, #4
  020b0	e5933000	 ldr         r3, [r3]
  020b4	e3530000	 cmp         r3, #0
  020b8	1a000000	 bne         |$LN12@PrcmDevice@20|
  020bc	ea000094	 b           |$cleanUp$48574|
  020c0		 |$LN12@PrcmDevice@20|

; 1189 : 
; 1190 :     if (bEnable != FALSE)

  020c0	e59d3034	 ldr         r3, [sp, #0x34]
  020c4	e3530000	 cmp         r3, #0
  020c8	0a00000e	 beq         |$LN11@PrcmDevice@20|

; 1191 :         {
; 1192 :         if (InterlockedIncrement(&s_rgDeviceLookupTable[devId].pfclk->refCount) == 1 )

  020cc	e59d1030	 ldr         r1, [sp, #0x30]
  020d0	e3a0301c	 mov         r3, #0x1C
  020d4	e0020391	 mul         r2, r1, r3
  020d8	e59f3298	 ldr         r3, [pc, #0x298]
  020dc	e0833002	 add         r3, r3, r2
  020e0	e2833004	 add         r3, r3, #4
  020e4	e5930000	 ldr         r0, [r3]
  020e8	eb000000	 bl          InterlockedIncrement
  020ec	e58d0010	 str         r0, [sp, #0x10]
  020f0	e59d3010	 ldr         r3, [sp, #0x10]
  020f4	e3530001	 cmp         r3, #1
  020f8	1a000001	 bne         |$LN10@PrcmDevice@20|

; 1193 :             {
; 1194 :             bUpdateClocks = TRUE;

  020fc	e3a03001	 mov         r3, #1
  02100	e58d3004	 str         r3, [sp, #4]
  02104		 |$LN10@PrcmDevice@20|

; 1195 :             }

  02104	ea000017	 b           |$LN9@PrcmDevice@20|
  02108		 |$LN11@PrcmDevice@20|

; 1196 :         }
; 1197 :     else if (s_rgDeviceLookupTable[devId].pfclk->refCount > 0)

  02108	e59d1030	 ldr         r1, [sp, #0x30]
  0210c	e3a0301c	 mov         r3, #0x1C
  02110	e0020391	 mul         r2, r1, r3
  02114	e59f325c	 ldr         r3, [pc, #0x25C]
  02118	e0833002	 add         r3, r3, r2
  0211c	e2833004	 add         r3, r3, #4
  02120	e5933000	 ldr         r3, [r3]
  02124	e5933000	 ldr         r3, [r3]
  02128	e3530000	 cmp         r3, #0
  0212c	da00000d	 ble         |$LN8@PrcmDevice@20|

; 1198 :         {
; 1199 :         if (InterlockedDecrement(&s_rgDeviceLookupTable[devId].pfclk->refCount) == 0)

  02130	e59d1030	 ldr         r1, [sp, #0x30]
  02134	e3a0301c	 mov         r3, #0x1C
  02138	e0020391	 mul         r2, r1, r3
  0213c	e59f3234	 ldr         r3, [pc, #0x234]
  02140	e0833002	 add         r3, r3, r2
  02144	e2833004	 add         r3, r3, #4
  02148	e5930000	 ldr         r0, [r3]
  0214c	eb000000	 bl          InterlockedDecrement
  02150	e58d0014	 str         r0, [sp, #0x14]
  02154	e59d3014	 ldr         r3, [sp, #0x14]
  02158	e3530000	 cmp         r3, #0
  0215c	1a000001	 bne         |$LN7@PrcmDevice@20|

; 1200 :             {
; 1201 :             bUpdateClocks = TRUE;

  02160	e3a03001	 mov         r3, #1
  02164	e58d3004	 str         r3, [sp, #4]
  02168		 |$LN7@PrcmDevice@20|
  02168		 |$LN8@PrcmDevice@20|
  02168		 |$LN9@PrcmDevice@20|

; 1202 :             }
; 1203 :         }
; 1204 :     
; 1205 :     if (!g_bSingleThreaded)

  02168	e59f3204	 ldr         r3, [pc, #0x204]
  0216c	e5933000	 ldr         r3, [r3]
  02170	e3530000	 cmp         r3, #0
  02174	1a000013	 bne         |$LN6@PrcmDevice@20|

; 1206 :         OALMSG(OAL_FUNC, (L" PrcmDeviceEnableFClock %supdate clocks\r\n", bUpdateClocks ? L"" : L"skip "));

  02178	e59f31f0	 ldr         r3, [pc, #0x1F0]
  0217c	e5933440	 ldr         r3, [r3, #0x440]
  02180	e3130004	 tst         r3, #4
  02184	0a00000d	 beq         |$LN21@PrcmDevice@20|
  02188	e59d3004	 ldr         r3, [sp, #4]
  0218c	e3530000	 cmp         r3, #0
  02190	0a000002	 beq         |$LN19@PrcmDevice@20|
  02194	e59f31ec	 ldr         r3, [pc, #0x1EC]
  02198	e58d3018	 str         r3, [sp, #0x18]
  0219c	ea000001	 b           |$LN20@PrcmDevice@20|
  021a0		 |$LN19@PrcmDevice@20|
  021a0	e59f31dc	 ldr         r3, [pc, #0x1DC]
  021a4	e58d3018	 str         r3, [sp, #0x18]
  021a8		 |$LN20@PrcmDevice@20|
  021a8	e59d1018	 ldr         r1, [sp, #0x18]
  021ac	e59f01cc	 ldr         r0, [pc, #0x1CC]
  021b0	eb000000	 bl          NKDbgPrintfW
  021b4	e3a03001	 mov         r3, #1
  021b8	e58d301c	 str         r3, [sp, #0x1C]
  021bc	ea000001	 b           |$LN22@PrcmDevice@20|
  021c0		 |$LN21@PrcmDevice@20|
  021c0	e3a03000	 mov         r3, #0
  021c4	e58d301c	 str         r3, [sp, #0x1C]
  021c8		 |$LN22@PrcmDevice@20|
  021c8		 |$LN6@PrcmDevice@20|

; 1207 :     // update hardware if clock is being enabled and it's not a virtual bit
; 1208 :     if (bUpdateClocks == TRUE && s_rgDeviceLookupTable[devId].pfclk->bVirtual == FALSE)

  021c8	e59d3004	 ldr         r3, [sp, #4]
  021cc	e3530001	 cmp         r3, #1
  021d0	1a00004f	 bne         |$LN5@PrcmDevice@20|
  021d4	e59d1030	 ldr         r1, [sp, #0x30]
  021d8	e3a0301c	 mov         r3, #0x1C
  021dc	e0020391	 mul         r2, r1, r3
  021e0	e59f3190	 ldr         r3, [pc, #0x190]
  021e4	e0833002	 add         r3, r3, r2
  021e8	e2833004	 add         r3, r3, #4
  021ec	e5933000	 ldr         r3, [r3]
  021f0	e283300c	 add         r3, r3, #0xC
  021f4	e5933000	 ldr         r3, [r3]
  021f8	e3530000	 cmp         r3, #0
  021fc	1a000044	 bne         |$LN5@PrcmDevice@20|

; 1209 :         {
; 1210 :         Lock(Mutex_DeviceClock);

  02200	e3a00000	 mov         r0, #0
  02204	eb000000	 bl          Lock

; 1211 :         if (bEnable)

  02208	e59d3034	 ldr         r3, [sp, #0x34]
  0220c	e3530000	 cmp         r3, #0
  02210	0a000008	 beq         |$LN4@PrcmDevice@20|

; 1212 :             {
; 1213 :             SPECIAL_DEBUG_MESSAGE2(_PrcmUpdateDeviceClockSource enable, devId, bEnable)
; 1214 :             _PrcmUpdateDeviceClockSource(s_rgDeviceLookupTable[devId].pSrcClocks, bEnable);

  02214	e59d1034	 ldr         r1, [sp, #0x34]
  02218	e59d0030	 ldr         r0, [sp, #0x30]
  0221c	e3a0301c	 mov         r3, #0x1C
  02220	e0020390	 mul         r2, r0, r3
  02224	e59f314c	 ldr         r3, [pc, #0x14C]
  02228	e0833002	 add         r3, r3, r2
  0222c	e2833018	 add         r3, r3, #0x18
  02230	e5930000	 ldr         r0, [r3]
  02234	eb000000	 bl          _PrcmUpdateDeviceClockSource
  02238		 |$LN4@PrcmDevice@20|

; 1215 :             }
; 1216 :         
; 1217 :         if (s_rgClockManagementRoutines[s_rgDeviceLookupTable[devId].powerDomain].PrcmDeviceEnableFClock)

  02238	e59d1030	 ldr         r1, [sp, #0x30]
  0223c	e3a0301c	 mov         r3, #0x1C
  02240	e0020391	 mul         r2, r1, r3
  02244	e59f312c	 ldr         r3, [pc, #0x12C]
  02248	e0833002	 add         r3, r3, r2
  0224c	e5931000	 ldr         r1, [r3]
  02250	e3a03010	 mov         r3, #0x10
  02254	e0020391	 mul         r2, r1, r3
  02258	e59f311c	 ldr         r3, [pc, #0x11C]
  0225c	e0833002	 add         r3, r3, r2
  02260	e2833004	 add         r3, r3, #4
  02264	e5933000	 ldr         r3, [r3]
  02268	e3530000	 cmp         r3, #0
  0226c	0a000012	 beq         |$LN3@PrcmDevice@20|

; 1218 :             {
; 1219 :             rc = s_rgClockManagementRoutines[s_rgDeviceLookupTable[devId].powerDomain].PrcmDeviceEnableFClock(devId, bEnable);

  02270	e59d1034	 ldr         r1, [sp, #0x34]
  02274	e59d0030	 ldr         r0, [sp, #0x30]
  02278	e59de030	 ldr         lr, [sp, #0x30]
  0227c	e3a0301c	 mov         r3, #0x1C
  02280	e002039e	 mul         r2, lr, r3
  02284	e59f30ec	 ldr         r3, [pc, #0xEC]
  02288	e0833002	 add         r3, r3, r2
  0228c	e593e000	 ldr         lr, [r3]
  02290	e3a03010	 mov         r3, #0x10
  02294	e002039e	 mul         r2, lr, r3
  02298	e59f30dc	 ldr         r3, [pc, #0xDC]
  0229c	e0833002	 add         r3, r3, r2
  022a0	e2833004	 add         r3, r3, #4
  022a4	e5933000	 ldr         r3, [r3]
  022a8	e1a0e00f	 mov         lr, pc
  022ac	e12fff13	 bx          r3
  022b0	e58d0020	 str         r0, [sp, #0x20]
  022b4	e59d3020	 ldr         r3, [sp, #0x20]
  022b8	e58d3000	 str         r3, [sp]
  022bc		 |$LN3@PrcmDevice@20|

; 1220 :             }
; 1221 :         
; 1222 :         if (!bEnable)

  022bc	e59d3034	 ldr         r3, [sp, #0x34]
  022c0	e3530000	 cmp         r3, #0
  022c4	1a000008	 bne         |$LN2@PrcmDevice@20|

; 1223 :             {
; 1224 :             SPECIAL_DEBUG_MESSAGE2(_PrcmUpdateDeviceClockSource disable, devId, bEnable)
; 1225 :             _PrcmUpdateDeviceClockSource(s_rgDeviceLookupTable[devId].pSrcClocks, bEnable);

  022c8	e59d1034	 ldr         r1, [sp, #0x34]
  022cc	e59d0030	 ldr         r0, [sp, #0x30]
  022d0	e3a0301c	 mov         r3, #0x1C
  022d4	e0020390	 mul         r2, r0, r3
  022d8	e59f3098	 ldr         r3, [pc, #0x98]
  022dc	e0833002	 add         r3, r3, r2
  022e0	e2833018	 add         r3, r3, #0x18
  022e4	e5930000	 ldr         r0, [r3]
  022e8	eb000000	 bl          _PrcmUpdateDeviceClockSource
  022ec		 |$LN2@PrcmDevice@20|

; 1226 :             }
; 1227 :         PrcmDomainUpdateRefCount(s_rgDeviceLookupTable[devId].powerDomain, bEnable);

  022ec	e59d1034	 ldr         r1, [sp, #0x34]
  022f0	e59d0030	 ldr         r0, [sp, #0x30]
  022f4	e3a0301c	 mov         r3, #0x1C
  022f8	e0020390	 mul         r2, r0, r3
  022fc	e59f3074	 ldr         r3, [pc, #0x74]
  02300	e0833002	 add         r3, r3, r2
  02304	e5930000	 ldr         r0, [r3]
  02308	eb000000	 bl          PrcmDomainUpdateRefCount

; 1228 :         Unlock(Mutex_DeviceClock);

  0230c	e3a00000	 mov         r0, #0
  02310	eb000000	 bl          Unlock
  02314		 |$LN5@PrcmDevice@20|
  02314		 |$cleanUp$48574|

; 1229 :         }
; 1230 : 
; 1231 :     SPECIAL_DEBUG_MESSAGE_DONE(PrcmDeviceEnableFClock, devId)
; 1232 : 
; 1233 : cleanUp:
; 1234 :     if (!g_bSingleThreaded)

  02314	e59f3058	 ldr         r3, [pc, #0x58]
  02318	e5933000	 ldr         r3, [r3]
  0231c	e3530000	 cmp         r3, #0
  02320	1a00000b	 bne         |$LN1@PrcmDevice@20|

; 1235 :         OALMSG(OAL_FUNC, (L"-PrcmDeviceEnableFClock()=%d\r\n", rc));

  02324	e59f3044	 ldr         r3, [pc, #0x44]
  02328	e5933440	 ldr         r3, [r3, #0x440]
  0232c	e3130004	 tst         r3, #4
  02330	0a000005	 beq         |$LN23@PrcmDevice@20|
  02334	e59d1000	 ldr         r1, [sp]
  02338	e59f002c	 ldr         r0, [pc, #0x2C]
  0233c	eb000000	 bl          NKDbgPrintfW
  02340	e3a03001	 mov         r3, #1
  02344	e58d3024	 str         r3, [sp, #0x24]
  02348	ea000001	 b           |$LN24@PrcmDevice@20|
  0234c		 |$LN23@PrcmDevice@20|
  0234c	e3a03000	 mov         r3, #0
  02350	e58d3024	 str         r3, [sp, #0x24]
  02354		 |$LN24@PrcmDevice@20|
  02354		 |$LN1@PrcmDevice@20|

; 1236 : 
; 1237 :     return rc;

  02354	e59d3000	 ldr         r3, [sp]
  02358	e58d3008	 str         r3, [sp, #8]

; 1238 : }

  0235c	e59d0008	 ldr         r0, [sp, #8]
  02360	e28dd028	 add         sp, sp, #0x28
  02364	e89d6000	 ldmia       sp, {sp, lr}
  02368	e12fff1e	 bx          lr
  0236c		 |$LN28@PrcmDevice@20|
  0236c		 |$LN29@PrcmDevice@20|
  0236c	00000000	 DCD         |??_C@_1DO@HBMOGGMP@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAF?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  02370		 |$LN30@PrcmDevice@20|
  02370	00000000	 DCD         |dpCurSettings|
  02374		 |$LN31@PrcmDevice@20|
  02374	00000000	 DCD         |g_bSingleThreaded|
  02378		 |$LN32@PrcmDevice@20|
  02378	00000000	 DCD         |s_rgDeviceLookupTable|
  0237c		 |$LN33@PrcmDevice@20|
  0237c	00000000	 DCD         |s_rgClockManagementRoutines|
  02380		 |$LN34@PrcmDevice@20|
  02380	00000000	 DCD         |??_C@_1FE@HMEOIMKB@?$AA?5?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAF?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$CF?$AAs?$AAu?$AAp?$AAd?$AAa?$AAt?$AAe@|
  02384		 |$LN35@PrcmDevice@20|
  02384	00000000	 DCD         |??_C@_1M@JKENIMHM@?$AAs?$AAk?$AAi?$AAp?$AA?5?$AA?$AA@|
  02388		 |$LN36@PrcmDevice@20|
  02388	00000000	 DCD         |??_C@_11LOCGONAA@?$AA?$AA@|
  0238c		 |$LN37@PrcmDevice@20|
  0238c	00000000	 DCD         |??_C@_1FA@LELFGAEH@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAF?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?$CI?$AAd?$AAe?$AAv?$AAI?$AAd?$AA?$DN?$AA?$CF?$AAd@|
  02390		 |$M49112|

			 ENDP  ; |PrcmDeviceEnableFClock|

	EXPORT	|??_C@_1EE@LKHHNJGE@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAC?$AAl?$AAo?$AAc?$AAk?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?$CI?$AA?$CJ?$AA?$AN@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HO@BDPNINII@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAC?$AAl?$AAo?$AAc?$AAk?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?$CI?$AAp?$AAS@| [ DATA ] ; `string'
	IMPORT	|ClockUpdateParentClock|

  00000			 AREA	 |.pdata|, PDATA
|$T49133| DCD	|$LN15@PrcmUpdate|
	DCD	0x40004404

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EE@LKHHNJGE@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAC?$AAl?$AAo?$AAc?$AAk?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?$CI?$AA?$CJ?$AA?$AN@| DCB "+"
	DCB	0x0, "_", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "U"
	DCB	0x0, "p", 0x0, "d", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, "D"
	DCB	0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "C"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, "S", 0x0, "o"
	DCB	0x0, "u", 0x0, "r", 0x0, "c", 0x0, "e", 0x0, "(", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HO@BDPNINII@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAC?$AAl?$AAo?$AAc?$AAk?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?$CI?$AAp?$AAS@| DCB "+"
	DCB	0x0, "_", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "U"
	DCB	0x0, "p", 0x0, "d", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, "D"
	DCB	0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "C"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, "S", 0x0, "o"
	DCB	0x0, "u", 0x0, "r", 0x0, "c", 0x0, "e", 0x0, "(", 0x0, "p"
	DCB	0x0, "S", 0x0, "r", 0x0, "c", 0x0, "C", 0x0, "l", 0x0, "o"
	DCB	0x0, "c", 0x0, "k", 0x0, "s", 0x0, "=", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, ",", 0x0, " "
	DCB	0x0, "b", 0x0, "E", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l"
	DCB	0x0, "e", 0x0, "=", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |_PrcmUpdateDeviceClockSource| PROC

; 260  : {

  00000		 |$LN15@PrcmUpdate|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd00c	 sub         sp, sp, #0xC
  00010		 |$M49130|

; 261  :     DWORD i;
; 262  :     if (!g_bSingleThreaded)

  00010	e59f30f0	 ldr         r3, [pc, #0xF0]
  00014	e5933000	 ldr         r3, [r3]
  00018	e3530000	 cmp         r3, #0
  0001c	1a00000c	 bne         |$LN6@PrcmUpdate|

; 263  :         OALMSG(OAL_FUNC, (L"+_PrcmUpdateDeviceClockSource"
; 264  :             L"(pSrcClocks=0x%08X, bEnable=%d)\r\n", pSrcClocks, bEnable)
; 265  :             );

  00020	e59f30dc	 ldr         r3, [pc, #0xDC]
  00024	e5933440	 ldr         r3, [r3, #0x440]
  00028	e3130004	 tst         r3, #4
  0002c	0a000006	 beq         |$LN9@PrcmUpdate|
  00030	e59d2018	 ldr         r2, [sp, #0x18]
  00034	e59d1014	 ldr         r1, [sp, #0x14]
  00038	e59f00cc	 ldr         r0, [pc, #0xCC]
  0003c	eb000000	 bl          NKDbgPrintfW
  00040	e3a03001	 mov         r3, #1
  00044	e58d3004	 str         r3, [sp, #4]
  00048	ea000001	 b           |$LN10@PrcmUpdate|
  0004c		 |$LN9@PrcmUpdate|
  0004c	e3a03000	 mov         r3, #0
  00050	e58d3004	 str         r3, [sp, #4]
  00054		 |$LN10@PrcmUpdate|
  00054		 |$LN6@PrcmUpdate|

; 266  :     
; 267  :     if (pSrcClocks == NULL) return;

  00054	e59d3014	 ldr         r3, [sp, #0x14]
  00058	e3530000	 cmp         r3, #0
  0005c	1a000000	 bne         |$LN5@PrcmUpdate|
  00060	ea000023	 b           |$LN7@PrcmUpdate|
  00064		 |$LN5@PrcmUpdate|

; 268  : 
; 269  :     for (i = 0; i < pSrcClocks->size; ++i)

  00064	e3a03000	 mov         r3, #0
  00068	e58d3000	 str         r3, [sp]
  0006c	ea000002	 b           |$LN4@PrcmUpdate|
  00070		 |$LN3@PrcmUpdate|
  00070	e59d3000	 ldr         r3, [sp]
  00074	e2833001	 add         r3, r3, #1
  00078	e58d3000	 str         r3, [sp]
  0007c		 |$LN4@PrcmUpdate|
  0007c	e59d2000	 ldr         r2, [sp]
  00080	e59d3014	 ldr         r3, [sp, #0x14]
  00084	e5933000	 ldr         r3, [r3]
  00088	e1520003	 cmp         r2, r3
  0008c	2a000009	 bcs         |$LN2@PrcmUpdate|

; 270  :         {
; 271  :         ClockUpdateParentClock(pSrcClocks->rgSourceClocks[i], bEnable);

  00090	e59d1018	 ldr         r1, [sp, #0x18]
  00094	e59d3014	 ldr         r3, [sp, #0x14]
  00098	e2830004	 add         r0, r3, #4
  0009c	e59d2000	 ldr         r2, [sp]
  000a0	e3a03004	 mov         r3, #4
  000a4	e0030392	 mul         r3, r2, r3
  000a8	e0803003	 add         r3, r0, r3
  000ac	e5930000	 ldr         r0, [r3]
  000b0	eb000000	 bl          ClockUpdateParentClock

; 272  :         }

  000b4	eaffffed	 b           |$LN3@PrcmUpdate|
  000b8		 |$LN2@PrcmUpdate|

; 273  : 
; 274  :     if (!g_bSingleThreaded)

  000b8	e59f3048	 ldr         r3, [pc, #0x48]
  000bc	e5933000	 ldr         r3, [r3]
  000c0	e3530000	 cmp         r3, #0
  000c4	1a00000a	 bne         |$LN1@PrcmUpdate|

; 275  :         OALMSG(OAL_FUNC, (L"+_PrcmUpdateDeviceClockSource()\r\n"));

  000c8	e59f3034	 ldr         r3, [pc, #0x34]
  000cc	e5933440	 ldr         r3, [r3, #0x440]
  000d0	e3130004	 tst         r3, #4
  000d4	0a000004	 beq         |$LN11@PrcmUpdate|
  000d8	e59f0020	 ldr         r0, [pc, #0x20]
  000dc	eb000000	 bl          NKDbgPrintfW
  000e0	e3a03001	 mov         r3, #1
  000e4	e58d3008	 str         r3, [sp, #8]
  000e8	ea000001	 b           |$LN12@PrcmUpdate|
  000ec		 |$LN11@PrcmUpdate|
  000ec	e3a03000	 mov         r3, #0
  000f0	e58d3008	 str         r3, [sp, #8]
  000f4		 |$LN12@PrcmUpdate|
  000f4		 |$LN1@PrcmUpdate|
  000f4		 |$LN7@PrcmUpdate|

; 276  : }

  000f4	e28dd00c	 add         sp, sp, #0xC
  000f8	e89d6000	 ldmia       sp, {sp, lr}
  000fc	e12fff1e	 bx          lr
  00100		 |$LN16@PrcmUpdate|
  00100		 |$LN17@PrcmUpdate|
  00100	00000000	 DCD         |??_C@_1EE@LKHHNJGE@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAC?$AAl?$AAo?$AAc?$AAk?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?$CI?$AA?$CJ?$AA?$AN@|
  00104		 |$LN18@PrcmUpdate|
  00104	00000000	 DCD         |dpCurSettings|
  00108		 |$LN19@PrcmUpdate|
  00108	00000000	 DCD         |g_bSingleThreaded|
  0010c		 |$LN20@PrcmUpdate|
  0010c	00000000	 DCD         |??_C@_1HO@BDPNINII@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAC?$AAl?$AAo?$AAc?$AAk?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?$CI?$AAp?$AAS@|
  00110		 |$M49131|

			 ENDP  ; |_PrcmUpdateDeviceClockSource|

	EXPORT	|PrcmDeviceEnableClocks|
	EXPORT	|EnableDeviceClocks|

  000a8			 AREA	 |.pdata|, PDATA
|$T49146| DCD	|$LN5@EnableDevi|
	DCD	0x40000e04
; Function compile flags: /Odtp

  02390			 AREA	 |.text|, CODE, ARM

  02390		 |EnableDeviceClocks| PROC

; 1244 : {

  02390		 |$LN5@EnableDevi|
  02390	e1a0c00d	 mov         r12, sp
  02394	e92d0003	 stmdb       sp!, {r0, r1}
  02398	e92d5000	 stmdb       sp!, {r12, lr}
  0239c	e24dd008	 sub         sp, sp, #8
  023a0		 |$M49143|

; 1245 :     return PrcmDeviceEnableClocks(devID,bEnable);

  023a0	e59d1014	 ldr         r1, [sp, #0x14]
  023a4	e59d0010	 ldr         r0, [sp, #0x10]
  023a8	eb000000	 bl          PrcmDeviceEnableClocks
  023ac	e58d0004	 str         r0, [sp, #4]
  023b0	e59d3004	 ldr         r3, [sp, #4]
  023b4	e58d3000	 str         r3, [sp]

; 1246 : }

  023b8	e59d0000	 ldr         r0, [sp]
  023bc	e28dd008	 add         sp, sp, #8
  023c0	e89d6000	 ldmia       sp, {sp, lr}
  023c4	e12fff1e	 bx          lr
  023c8		 |$M49144|

			 ENDP  ; |EnableDeviceClocks|

	IMPORT	|OALMux_UpdateOnDeviceStateChange|

  000b0			 AREA	 |.pdata|, PDATA
|$T49156| DCD	|$LN9@PrcmDevice@21|
	DCD	0x40002e04
; Function compile flags: /Odtp

  023c8			 AREA	 |.text|, CODE, ARM

  023c8		 |PrcmDeviceEnableClocks| PROC

; 1258 : {

  023c8		 |$LN9@PrcmDevice@21|
  023c8	e1a0c00d	 mov         r12, sp
  023cc	e92d0003	 stmdb       sp!, {r0, r1}
  023d0	e92d5000	 stmdb       sp!, {r12, lr}
  023d4	e24dd014	 sub         sp, sp, #0x14
  023d8		 |$M49153|

; 1259 :     UINT oldState = bEnable ? D4 : D0;

  023d8	e59d3020	 ldr         r3, [sp, #0x20]
  023dc	e3530000	 cmp         r3, #0
  023e0	0a000002	 beq         |$LN3@PrcmDevice@21|
  023e4	e3a03004	 mov         r3, #4
  023e8	e58d300c	 str         r3, [sp, #0xC]
  023ec	ea000001	 b           |$LN4@PrcmDevice@21|
  023f0		 |$LN3@PrcmDevice@21|
  023f0	e3a03000	 mov         r3, #0
  023f4	e58d300c	 str         r3, [sp, #0xC]
  023f8		 |$LN4@PrcmDevice@21|
  023f8	e59d300c	 ldr         r3, [sp, #0xC]
  023fc	e58d3000	 str         r3, [sp]

; 1260 :     UINT newState = bEnable ? D0 : D4;

  02400	e59d3020	 ldr         r3, [sp, #0x20]
  02404	e3530000	 cmp         r3, #0
  02408	0a000002	 beq         |$LN5@PrcmDevice@21|
  0240c	e3a03000	 mov         r3, #0
  02410	e58d3010	 str         r3, [sp, #0x10]
  02414	ea000001	 b           |$LN6@PrcmDevice@21|
  02418		 |$LN5@PrcmDevice@21|
  02418	e3a03004	 mov         r3, #4
  0241c	e58d3010	 str         r3, [sp, #0x10]
  02420		 |$LN6@PrcmDevice@21|
  02420	e59d3010	 ldr         r3, [sp, #0x10]
  02424	e58d3004	 str         r3, [sp, #4]

; 1261 :     SPECIAL_DEBUG_MESSAGE2(PrcmDeviceEnableClocks, devId, bEnable)
; 1262 : 
; 1263 :     OALMux_UpdateOnDeviceStateChange(devId, oldState, newState, TRUE);

  02428	e3a03001	 mov         r3, #1
  0242c	e59d2004	 ldr         r2, [sp, #4]
  02430	e59d1000	 ldr         r1, [sp]
  02434	e59d001c	 ldr         r0, [sp, #0x1C]
  02438	eb000000	 bl          OALMux_UpdateOnDeviceStateChange

; 1264 : 
; 1265 :     PrcmDeviceEnableFClock(devId, bEnable);

  0243c	e59d1020	 ldr         r1, [sp, #0x20]
  02440	e59d001c	 ldr         r0, [sp, #0x1C]
  02444	eb000000	 bl          PrcmDeviceEnableFClock

; 1266 :     PrcmDeviceEnableIClock(devId, bEnable);

  02448	e59d1020	 ldr         r1, [sp, #0x20]
  0244c	e59d001c	 ldr         r0, [sp, #0x1C]
  02450	eb000000	 bl          PrcmDeviceEnableIClock

; 1267 : 
; 1268 :     OALMux_UpdateOnDeviceStateChange(devId, oldState, newState, FALSE);

  02454	e3a03000	 mov         r3, #0
  02458	e59d2004	 ldr         r2, [sp, #4]
  0245c	e59d1000	 ldr         r1, [sp]
  02460	e59d001c	 ldr         r0, [sp, #0x1C]
  02464	eb000000	 bl          OALMux_UpdateOnDeviceStateChange

; 1269 : 
; 1270 :     return TRUE;

  02468	e3a03001	 mov         r3, #1
  0246c	e58d3008	 str         r3, [sp, #8]

; 1271 : }

  02470	e59d0008	 ldr         r0, [sp, #8]
  02474	e28dd014	 add         sp, sp, #0x14
  02478	e89d6000	 ldmia       sp, {sp, lr}
  0247c	e12fff1e	 bx          lr
  02480		 |$M49154|

			 ENDP  ; |PrcmDeviceEnableClocks|

	EXPORT	|PrcmDeviceEnableClocksKernel|

  000b8			 AREA	 |.pdata|, PDATA
|$T49166| DCD	|$LN9@PrcmDevice@22|
	DCD	0x40003504
; Function compile flags: /Odtp

  02480			 AREA	 |.text|, CODE, ARM

  02480		 |PrcmDeviceEnableClocksKernel| PROC

; 1284 : {

  02480		 |$LN9@PrcmDevice@22|
  02480	e1a0c00d	 mov         r12, sp
  02484	e92d0003	 stmdb       sp!, {r0, r1}
  02488	e92d5000	 stmdb       sp!, {r12, lr}
  0248c	e24dd014	 sub         sp, sp, #0x14
  02490		 |$M49163|

; 1285 :     UINT oldState = bEnable ? D4 : D0;

  02490	e59d3020	 ldr         r3, [sp, #0x20]
  02494	e3530000	 cmp         r3, #0
  02498	0a000002	 beq         |$LN3@PrcmDevice@22|
  0249c	e3a03004	 mov         r3, #4
  024a0	e58d300c	 str         r3, [sp, #0xC]
  024a4	ea000001	 b           |$LN4@PrcmDevice@22|
  024a8		 |$LN3@PrcmDevice@22|
  024a8	e3a03000	 mov         r3, #0
  024ac	e58d300c	 str         r3, [sp, #0xC]
  024b0		 |$LN4@PrcmDevice@22|
  024b0	e59d300c	 ldr         r3, [sp, #0xC]
  024b4	e58d3000	 str         r3, [sp]

; 1286 :     UINT newState = bEnable ? D0 : D4;

  024b8	e59d3020	 ldr         r3, [sp, #0x20]
  024bc	e3530000	 cmp         r3, #0
  024c0	0a000002	 beq         |$LN5@PrcmDevice@22|
  024c4	e3a03000	 mov         r3, #0
  024c8	e58d3010	 str         r3, [sp, #0x10]
  024cc	ea000001	 b           |$LN6@PrcmDevice@22|
  024d0		 |$LN5@PrcmDevice@22|
  024d0	e3a03004	 mov         r3, #4
  024d4	e58d3010	 str         r3, [sp, #0x10]
  024d8		 |$LN6@PrcmDevice@22|
  024d8	e59d3010	 ldr         r3, [sp, #0x10]
  024dc	e58d3004	 str         r3, [sp, #4]

; 1287 :     g_bSingleThreaded = TRUE;

  024e0	e59f2068	 ldr         r2, [pc, #0x68]
  024e4	e3a03001	 mov         r3, #1
  024e8	e5823000	 str         r3, [r2]

; 1288 :     OALMux_UpdateOnDeviceStateChange(devId, oldState, newState, TRUE);

  024ec	e3a03001	 mov         r3, #1
  024f0	e59d2004	 ldr         r2, [sp, #4]
  024f4	e59d1000	 ldr         r1, [sp]
  024f8	e59d001c	 ldr         r0, [sp, #0x1C]
  024fc	eb000000	 bl          OALMux_UpdateOnDeviceStateChange

; 1289 :     PrcmDeviceEnableFClock(devId, bEnable);

  02500	e59d1020	 ldr         r1, [sp, #0x20]
  02504	e59d001c	 ldr         r0, [sp, #0x1C]
  02508	eb000000	 bl          PrcmDeviceEnableFClock

; 1290 :     PrcmDeviceEnableIClock(devId, bEnable);

  0250c	e59d1020	 ldr         r1, [sp, #0x20]
  02510	e59d001c	 ldr         r0, [sp, #0x1C]
  02514	eb000000	 bl          PrcmDeviceEnableIClock

; 1291 :     OALMux_UpdateOnDeviceStateChange(devId, oldState, newState, FALSE);

  02518	e3a03000	 mov         r3, #0
  0251c	e59d2004	 ldr         r2, [sp, #4]
  02520	e59d1000	 ldr         r1, [sp]
  02524	e59d001c	 ldr         r0, [sp, #0x1C]
  02528	eb000000	 bl          OALMux_UpdateOnDeviceStateChange

; 1292 :     g_bSingleThreaded = FALSE;

  0252c	e59f201c	 ldr         r2, [pc, #0x1C]
  02530	e3a03000	 mov         r3, #0
  02534	e5823000	 str         r3, [r2]

; 1293 :     return TRUE;

  02538	e3a03001	 mov         r3, #1
  0253c	e58d3008	 str         r3, [sp, #8]

; 1294 : }

  02540	e59d0008	 ldr         r0, [sp, #8]
  02544	e28dd014	 add         sp, sp, #0x14
  02548	e89d6000	 ldmia       sp, {sp, lr}
  0254c	e12fff1e	 bx          lr
  02550		 |$LN10@PrcmDevice@22|
  02550		 |$LN11@PrcmDevice@22|
  02550	00000000	 DCD         |g_bSingleThreaded|
  02554		 |$M49164|

			 ENDP  ; |PrcmDeviceEnableClocksKernel|

	EXPORT	|??_C@_1EC@PJGJDLC@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAA?$AAu?$AAt?$AAo?$AAI?$AAd?$AAl?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FE@LLCMNDJM@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAA?$AAu?$AAt?$AAo?$AAI?$AAd?$AAl?$AAe?$AA?$CI?$AAd?$AAe?$AAv?$AAI?$AAd?$AA?$DN@| [ DATA ] ; `string'
	EXPORT	|PrcmDeviceEnableAutoIdle|

  000c0			 AREA	 |.pdata|, PDATA
|$T49178| DCD	|$LN14@PrcmDevice@23|
	DCD	0x40006604

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EC@PJGJDLC@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAA?$AAu?$AAt?$AAo?$AAI?$AAd?$AAl?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6@| DCB "-"
	DCB	0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D", 0x0, "e"
	DCB	0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "E", 0x0, "n"
	DCB	0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, "A", 0x0, "u"
	DCB	0x0, "t", 0x0, "o", 0x0, "I", 0x0, "d", 0x0, "l", 0x0, "e"
	DCB	0x0, "(", 0x0, ")", 0x0, "=", 0x0, "%", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FE@LLCMNDJM@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAA?$AAu?$AAt?$AAo?$AAI?$AAd?$AAl?$AAe?$AA?$CI?$AAd?$AAe?$AAv?$AAI?$AAd?$AA?$DN@| DCB "+"
	DCB	0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D", 0x0, "e"
	DCB	0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "E", 0x0, "n"
	DCB	0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, "A", 0x0, "u"
	DCB	0x0, "t", 0x0, "o", 0x0, "I", 0x0, "d", 0x0, "l", 0x0, "e"
	DCB	0x0, "(", 0x0, "d", 0x0, "e", 0x0, "v", 0x0, "I", 0x0, "d"
	DCB	0x0, "=", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  02554			 AREA	 |.text|, CODE, ARM

  02554		 |PrcmDeviceEnableAutoIdle| PROC

; 1308 : {

  02554		 |$LN14@PrcmDevice@23|
  02554	e1a0c00d	 mov         r12, sp
  02558	e92d0003	 stmdb       sp!, {r0, r1}
  0255c	e92d5000	 stmdb       sp!, {r12, lr}
  02560	e24dd014	 sub         sp, sp, #0x14
  02564		 |$M49175|

; 1309 :     BOOL rc = TRUE;

  02564	e3a03001	 mov         r3, #1
  02568	e58d3000	 str         r3, [sp]

; 1310 :     if (!g_bSingleThreaded)

  0256c	e59f3168	 ldr         r3, [pc, #0x168]
  02570	e5933000	 ldr         r3, [r3]
  02574	e3530000	 cmp         r3, #0
  02578	1a00000c	 bne         |$LN5@PrcmDevice@23|

; 1311 :         OALMSG(OAL_FUNC, (L"+PrcmDeviceEnableAutoIdle(devId=%d, %d)\r\n", devId, bEnable));

  0257c	e59f3154	 ldr         r3, [pc, #0x154]
  02580	e5933440	 ldr         r3, [r3, #0x440]
  02584	e3130004	 tst         r3, #4
  02588	0a000006	 beq         |$LN8@PrcmDevice@23|
  0258c	e59d2020	 ldr         r2, [sp, #0x20]
  02590	e59d101c	 ldr         r1, [sp, #0x1C]
  02594	e59f014c	 ldr         r0, [pc, #0x14C]
  02598	eb000000	 bl          NKDbgPrintfW
  0259c	e3a03001	 mov         r3, #1
  025a0	e58d3008	 str         r3, [sp, #8]
  025a4	ea000001	 b           |$LN9@PrcmDevice@23|
  025a8		 |$LN8@PrcmDevice@23|
  025a8	e3a03000	 mov         r3, #0
  025ac	e58d3008	 str         r3, [sp, #8]
  025b0		 |$LN9@PrcmDevice@23|
  025b0		 |$LN5@PrcmDevice@23|

; 1312 : 
; 1313 :     SPECIAL_DEBUG_MESSAGE2(PrcmDeviceEnableAutoIdle, devId, bEnable)
; 1314 : 
; 1315 :     if (devId >= OMAP_DEVICE_GENERIC) goto cleanUp;

  025b0	e59d301c	 ldr         r3, [sp, #0x1C]
  025b4	e3530050	 cmp         r3, #0x50
  025b8	3a000000	 bcc         |$LN4@PrcmDevice@23|
  025bc	ea00002e	 b           |$cleanUp$48622|
  025c0		 |$LN4@PrcmDevice@23|

; 1316 :     if (s_rgDeviceLookupTable[devId].pautoidle == NULL) goto cleanUp;

  025c0	e59d101c	 ldr         r1, [sp, #0x1C]
  025c4	e3a0301c	 mov         r3, #0x1C
  025c8	e0020391	 mul         r2, r1, r3
  025cc	e59f3110	 ldr         r3, [pc, #0x110]
  025d0	e0833002	 add         r3, r3, r2
  025d4	e2833014	 add         r3, r3, #0x14
  025d8	e5933000	 ldr         r3, [r3]
  025dc	e3530000	 cmp         r3, #0
  025e0	1a000000	 bne         |$LN3@PrcmDevice@23|
  025e4	ea000024	 b           |$cleanUp$48622|
  025e8		 |$LN3@PrcmDevice@23|

; 1317 : 
; 1318 :     if (s_rgClockManagementRoutines[s_rgDeviceLookupTable[devId].powerDomain].PrcmDeviceEnableAutoIdle)

  025e8	e59d101c	 ldr         r1, [sp, #0x1C]
  025ec	e3a0301c	 mov         r3, #0x1C
  025f0	e0020391	 mul         r2, r1, r3
  025f4	e59f30e8	 ldr         r3, [pc, #0xE8]
  025f8	e0833002	 add         r3, r3, r2
  025fc	e5931000	 ldr         r1, [r3]
  02600	e3a03010	 mov         r3, #0x10
  02604	e0020391	 mul         r2, r1, r3
  02608	e59f30d0	 ldr         r3, [pc, #0xD0]
  0260c	e0833002	 add         r3, r3, r2
  02610	e2833008	 add         r3, r3, #8
  02614	e5933000	 ldr         r3, [r3]
  02618	e3530000	 cmp         r3, #0
  0261c	0a000016	 beq         |$LN2@PrcmDevice@23|

; 1319 :         {
; 1320 :         Lock(Mutex_DeviceClock);

  02620	e3a00000	 mov         r0, #0
  02624	eb000000	 bl          Lock

; 1321 :         rc = s_rgClockManagementRoutines[s_rgDeviceLookupTable[devId].powerDomain].PrcmDeviceEnableAutoIdle(devId, bEnable);

  02628	e59d1020	 ldr         r1, [sp, #0x20]
  0262c	e59d001c	 ldr         r0, [sp, #0x1C]
  02630	e59de01c	 ldr         lr, [sp, #0x1C]
  02634	e3a0301c	 mov         r3, #0x1C
  02638	e002039e	 mul         r2, lr, r3
  0263c	e59f30a0	 ldr         r3, [pc, #0xA0]
  02640	e0833002	 add         r3, r3, r2
  02644	e593e000	 ldr         lr, [r3]
  02648	e3a03010	 mov         r3, #0x10
  0264c	e002039e	 mul         r2, lr, r3
  02650	e59f3088	 ldr         r3, [pc, #0x88]
  02654	e0833002	 add         r3, r3, r2
  02658	e2833008	 add         r3, r3, #8
  0265c	e5933000	 ldr         r3, [r3]
  02660	e1a0e00f	 mov         lr, pc
  02664	e12fff13	 bx          r3
  02668	e58d000c	 str         r0, [sp, #0xC]
  0266c	e59d300c	 ldr         r3, [sp, #0xC]
  02670	e58d3000	 str         r3, [sp]

; 1322 :         Unlock(Mutex_DeviceClock);

  02674	e3a00000	 mov         r0, #0
  02678	eb000000	 bl          Unlock
  0267c		 |$LN2@PrcmDevice@23|
  0267c		 |$cleanUp$48622|

; 1323 :         }
; 1324 : 
; 1325 :     SPECIAL_DEBUG_MESSAGE_DONE(PrcmDeviceEnableAutoIdle, devId)
; 1326 : 
; 1327 : cleanUp:
; 1328 :     if (!g_bSingleThreaded)

  0267c	e59f3058	 ldr         r3, [pc, #0x58]
  02680	e5933000	 ldr         r3, [r3]
  02684	e3530000	 cmp         r3, #0
  02688	1a00000b	 bne         |$LN1@PrcmDevice@23|

; 1329 :         OALMSG(OAL_FUNC, (L"-PrcmDeviceEnableAutoIdle()=%d\r\n", rc));

  0268c	e59f3044	 ldr         r3, [pc, #0x44]
  02690	e5933440	 ldr         r3, [r3, #0x440]
  02694	e3130004	 tst         r3, #4
  02698	0a000005	 beq         |$LN10@PrcmDevice@23|
  0269c	e59d1000	 ldr         r1, [sp]
  026a0	e59f002c	 ldr         r0, [pc, #0x2C]
  026a4	eb000000	 bl          NKDbgPrintfW
  026a8	e3a03001	 mov         r3, #1
  026ac	e58d3010	 str         r3, [sp, #0x10]
  026b0	ea000001	 b           |$LN11@PrcmDevice@23|
  026b4		 |$LN10@PrcmDevice@23|
  026b4	e3a03000	 mov         r3, #0
  026b8	e58d3010	 str         r3, [sp, #0x10]
  026bc		 |$LN11@PrcmDevice@23|
  026bc		 |$LN1@PrcmDevice@23|

; 1330 :     return rc;

  026bc	e59d3000	 ldr         r3, [sp]
  026c0	e58d3004	 str         r3, [sp, #4]

; 1331 : }    

  026c4	e59d0004	 ldr         r0, [sp, #4]
  026c8	e28dd014	 add         sp, sp, #0x14
  026cc	e89d6000	 ldmia       sp, {sp, lr}
  026d0	e12fff1e	 bx          lr
  026d4		 |$LN15@PrcmDevice@23|
  026d4		 |$LN16@PrcmDevice@23|
  026d4	00000000	 DCD         |??_C@_1EC@PJGJDLC@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAA?$AAu?$AAt?$AAo?$AAI?$AAd?$AAl?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6@|
  026d8		 |$LN17@PrcmDevice@23|
  026d8	00000000	 DCD         |dpCurSettings|
  026dc		 |$LN18@PrcmDevice@23|
  026dc	00000000	 DCD         |g_bSingleThreaded|
  026e0		 |$LN19@PrcmDevice@23|
  026e0	00000000	 DCD         |s_rgClockManagementRoutines|
  026e4		 |$LN20@PrcmDevice@23|
  026e4	00000000	 DCD         |s_rgDeviceLookupTable|
  026e8		 |$LN21@PrcmDevice@23|
  026e8	00000000	 DCD         |??_C@_1FE@LLCMNDJM@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAA?$AAu?$AAt?$AAo?$AAI?$AAd?$AAl?$AAe?$AA?$CI?$AAd?$AAe?$AAv?$AAI?$AAd?$AA?$DN@|
  026ec		 |$M49176|

			 ENDP  ; |PrcmDeviceEnableAutoIdle|

	EXPORT	|??_C@_1EE@IPMFOJGB@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAG?$AAe?$AAt?$AAC?$AAo?$AAn?$AAt?$AAe?$AAx?$AAt?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EO@NBCGFJHE@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAG?$AAe?$AAt?$AAC?$AAo?$AAn?$AAt?$AAe?$AAx?$AAt?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AAd?$AAe?$AAv?$AAI?$AAd@| [ DATA ] ; `string'
	EXPORT	|PrcmDeviceGetContextState|
	IMPORT	|DomainGetDeviceContextState|

  000c8			 AREA	 |.pdata|, PDATA
|$T49195| DCD	|$LN11@PrcmDevice@24|
	DCD	0x40004704

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EE@IPMFOJGB@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAG?$AAe?$AAt?$AAC?$AAo?$AAn?$AAt?$AAe?$AAx?$AAt?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN@| DCB "-"
	DCB	0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D", 0x0, "e"
	DCB	0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "G", 0x0, "e"
	DCB	0x0, "t", 0x0, "C", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "e"
	DCB	0x0, "x", 0x0, "t", 0x0, "S", 0x0, "t", 0x0, "a", 0x0, "t"
	DCB	0x0, "e", 0x0, "(", 0x0, ")", 0x0, "=", 0x0, "%", 0x0, "d"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EO@NBCGFJHE@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAG?$AAe?$AAt?$AAC?$AAo?$AAn?$AAt?$AAe?$AAx?$AAt?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AAd?$AAe?$AAv?$AAI?$AAd@| DCB "+"
	DCB	0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D", 0x0, "e"
	DCB	0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "G", 0x0, "e"
	DCB	0x0, "t", 0x0, "C", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "e"
	DCB	0x0, "x", 0x0, "t", 0x0, "S", 0x0, "t", 0x0, "a", 0x0, "t"
	DCB	0x0, "e", 0x0, "(", 0x0, "d", 0x0, "e", 0x0, "v", 0x0, "I"
	DCB	0x0, "d", 0x0, "=", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  026ec			 AREA	 |.text|, CODE, ARM

  026ec		 |PrcmDeviceGetContextState| PROC

; 1348 : {

  026ec		 |$LN11@PrcmDevice@24|
  026ec	e1a0c00d	 mov         r12, sp
  026f0	e92d0003	 stmdb       sp!, {r0, r1}
  026f4	e92d5000	 stmdb       sp!, {r12, lr}
  026f8	e24dd014	 sub         sp, sp, #0x14
  026fc		 |$M49192|

; 1349 :     BOOL rc = TRUE;

  026fc	e3a03001	 mov         r3, #1
  02700	e58d3000	 str         r3, [sp]

; 1350 :     OALMSG(OAL_FUNC, (L"+PrcmDeviceGetContextState(devId=%d)\r\n", devId));

  02704	e59f30f0	 ldr         r3, [pc, #0xF0]
  02708	e5933440	 ldr         r3, [r3, #0x440]
  0270c	e3130004	 tst         r3, #4
  02710	0a000005	 beq         |$LN5@PrcmDevice@24|
  02714	e59d101c	 ldr         r1, [sp, #0x1C]
  02718	e59f00e4	 ldr         r0, [pc, #0xE4]
  0271c	eb000000	 bl          NKDbgPrintfW
  02720	e3a03001	 mov         r3, #1
  02724	e58d3008	 str         r3, [sp, #8]
  02728	ea000001	 b           |$LN6@PrcmDevice@24|
  0272c		 |$LN5@PrcmDevice@24|
  0272c	e3a03000	 mov         r3, #0
  02730	e58d3008	 str         r3, [sp, #8]
  02734		 |$LN6@PrcmDevice@24|

; 1351 : 
; 1352 :     if (devId >= OMAP_DEVICE_GENERIC) goto cleanUp;

  02734	e59d301c	 ldr         r3, [sp, #0x1C]
  02738	e3530050	 cmp         r3, #0x50
  0273c	3a000000	 bcc         |$LN2@PrcmDevice@24|
  02740	ea00001a	 b           |$cleanUp$48638|
  02744		 |$LN2@PrcmDevice@24|

; 1353 : 
; 1354 :     if (s_rgDeviceLookupTable[devId].piclk != NULL)

  02744	e59d101c	 ldr         r1, [sp, #0x1C]
  02748	e3a0301c	 mov         r3, #0x1C
  0274c	e0020391	 mul         r2, r1, r3
  02750	e59f30a8	 ldr         r3, [pc, #0xA8]
  02754	e0833002	 add         r3, r3, r2
  02758	e2833008	 add         r3, r3, #8
  0275c	e5933000	 ldr         r3, [r3]
  02760	e3530000	 cmp         r3, #0
  02764	0a000011	 beq         |$LN1@PrcmDevice@24|

; 1355 :         {
; 1356 :         rc = DomainGetDeviceContextState(s_rgDeviceLookupTable[devId].powerDomain,
; 1357 :                 s_rgDeviceLookupTable[devId].piclk,
; 1358 :                 bSet
; 1359 :                 );

  02768	e59d2020	 ldr         r2, [sp, #0x20]
  0276c	e59d001c	 ldr         r0, [sp, #0x1C]
  02770	e3a0301c	 mov         r3, #0x1C
  02774	e0010390	 mul         r1, r0, r3
  02778	e59f3080	 ldr         r3, [pc, #0x80]
  0277c	e0833001	 add         r3, r3, r1
  02780	e2833008	 add         r3, r3, #8
  02784	e5931000	 ldr         r1, [r3]
  02788	e59de01c	 ldr         lr, [sp, #0x1C]
  0278c	e3a0301c	 mov         r3, #0x1C
  02790	e000039e	 mul         r0, lr, r3
  02794	e59f3064	 ldr         r3, [pc, #0x64]
  02798	e0833000	 add         r3, r3, r0
  0279c	e5930000	 ldr         r0, [r3]
  027a0	eb000000	 bl          DomainGetDeviceContextState
  027a4	e58d000c	 str         r0, [sp, #0xC]
  027a8	e59d300c	 ldr         r3, [sp, #0xC]
  027ac	e58d3000	 str         r3, [sp]
  027b0		 |$LN1@PrcmDevice@24|
  027b0		 |$cleanUp$48638|

; 1360 :         }
; 1361 : 
; 1362 : cleanUp:
; 1363 :     OALMSG(OAL_FUNC, (L"-PrcmDeviceGetContextState()=%d\r\n", rc));

  027b0	e59f3044	 ldr         r3, [pc, #0x44]
  027b4	e5933440	 ldr         r3, [r3, #0x440]
  027b8	e3130004	 tst         r3, #4
  027bc	0a000005	 beq         |$LN7@PrcmDevice@24|
  027c0	e59d1000	 ldr         r1, [sp]
  027c4	e59f002c	 ldr         r0, [pc, #0x2C]
  027c8	eb000000	 bl          NKDbgPrintfW
  027cc	e3a03001	 mov         r3, #1
  027d0	e58d3010	 str         r3, [sp, #0x10]
  027d4	ea000001	 b           |$LN8@PrcmDevice@24|
  027d8		 |$LN7@PrcmDevice@24|
  027d8	e3a03000	 mov         r3, #0
  027dc	e58d3010	 str         r3, [sp, #0x10]
  027e0		 |$LN8@PrcmDevice@24|

; 1364 :     return rc;

  027e0	e59d3000	 ldr         r3, [sp]
  027e4	e58d3004	 str         r3, [sp, #4]

; 1365 : }

  027e8	e59d0004	 ldr         r0, [sp, #4]
  027ec	e28dd014	 add         sp, sp, #0x14
  027f0	e89d6000	 ldmia       sp, {sp, lr}
  027f4	e12fff1e	 bx          lr
  027f8		 |$LN12@PrcmDevice@24|
  027f8		 |$LN13@PrcmDevice@24|
  027f8	00000000	 DCD         |??_C@_1EE@IPMFOJGB@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAG?$AAe?$AAt?$AAC?$AAo?$AAn?$AAt?$AAe?$AAx?$AAt?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN@|
  027fc		 |$LN14@PrcmDevice@24|
  027fc	00000000	 DCD         |dpCurSettings|
  02800		 |$LN15@PrcmDevice@24|
  02800	00000000	 DCD         |s_rgDeviceLookupTable|
  02804		 |$LN16@PrcmDevice@24|
  02804	00000000	 DCD         |??_C@_1EO@NBCGFJHE@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAG?$AAe?$AAt?$AAC?$AAo?$AAn?$AAt?$AAe?$AAx?$AAt?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AAd?$AAe?$AAv?$AAI?$AAd@|
  02808		 |$M49193|

			 ENDP  ; |PrcmDeviceGetContextState|

	EXPORT	|??_C@_1EK@DOOJMPPH@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAG?$AAe?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAC?$AAl?$AAo?$AAc?$AAk?$AAI?$AAn?$AAf?$AAo?$AA?$CI?$AA?$CJ?$AA?$DN@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FE@KDICNDAA@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAG?$AAe?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAC?$AAl?$AAo?$AAc?$AAk?$AAI?$AAn?$AAf?$AAo?$AA?$CI?$AAd?$AAe@| [ DATA ] ; `string'
	EXPORT	|PrcmDeviceGetSourceClockInfo|
	IMPORT	|PrcmClockGetParentClockRefcount|

  000d0			 AREA	 |.pdata|, PDATA
|$T49210| DCD	|$LN16@PrcmDevice@25|
	DCD	0x40008b04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EK@DOOJMPPH@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAG?$AAe?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAC?$AAl?$AAo?$AAc?$AAk?$AAI?$AAn?$AAf?$AAo?$AA?$CI?$AA?$CJ?$AA?$DN@| DCB "-"
	DCB	0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D", 0x0, "e"
	DCB	0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "G", 0x0, "e"
	DCB	0x0, "t", 0x0, "S", 0x0, "o", 0x0, "u", 0x0, "r", 0x0, "c"
	DCB	0x0, "e", 0x0, "C", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k"
	DCB	0x0, "I", 0x0, "n", 0x0, "f", 0x0, "o", 0x0, "(", 0x0, ")"
	DCB	0x0, "=", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FE@KDICNDAA@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAG?$AAe?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAC?$AAl?$AAo?$AAc?$AAk?$AAI?$AAn?$AAf?$AAo?$AA?$CI?$AAd?$AAe@| DCB "+"
	DCB	0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D", 0x0, "e"
	DCB	0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "G", 0x0, "e"
	DCB	0x0, "t", 0x0, "S", 0x0, "o", 0x0, "u", 0x0, "r", 0x0, "c"
	DCB	0x0, "e", 0x0, "C", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k"
	DCB	0x0, "I", 0x0, "n", 0x0, "f", 0x0, "o", 0x0, "(", 0x0, "d"
	DCB	0x0, "e", 0x0, "v", 0x0, "I", 0x0, "d", 0x0, "=", 0x0, "%"
	DCB	0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  02808			 AREA	 |.text|, CODE, ARM

  02808		 |PrcmDeviceGetSourceClockInfo| PROC

; 1379 : {

  02808		 |$LN16@PrcmDevice@25|
  02808	e1a0c00d	 mov         r12, sp
  0280c	e92d0003	 stmdb       sp!, {r0, r1}
  02810	e92d5000	 stmdb       sp!, {r12, lr}
  02814	e24dd014	 sub         sp, sp, #0x14
  02818		 |$M49207|

; 1380 :     UINT i;
; 1381 :     BOOL rc = FALSE;

  02818	e3a03000	 mov         r3, #0
  0281c	e58d3000	 str         r3, [sp]

; 1382 :     if (!g_bSingleThreaded)

  02820	e59f3200	 ldr         r3, [pc, #0x200]
  02824	e5933000	 ldr         r3, [r3]
  02828	e3530000	 cmp         r3, #0
  0282c	1a00000b	 bne         |$LN7@PrcmDevice@25|

; 1383 :         OALMSG(OAL_FUNC, (L"+PrcmDeviceGetSourceClockInfo(devId=%d)\r\n", devId));

  02830	e59f31ec	 ldr         r3, [pc, #0x1EC]
  02834	e5933440	 ldr         r3, [r3, #0x440]
  02838	e3130004	 tst         r3, #4
  0283c	0a000005	 beq         |$LN10@PrcmDevice@25|
  02840	e59d101c	 ldr         r1, [sp, #0x1C]
  02844	e59f01e4	 ldr         r0, [pc, #0x1E4]
  02848	eb000000	 bl          NKDbgPrintfW
  0284c	e3a03001	 mov         r3, #1
  02850	e58d300c	 str         r3, [sp, #0xC]
  02854	ea000001	 b           |$LN11@PrcmDevice@25|
  02858		 |$LN10@PrcmDevice@25|
  02858	e3a03000	 mov         r3, #0
  0285c	e58d300c	 str         r3, [sp, #0xC]
  02860		 |$LN11@PrcmDevice@25|
  02860		 |$LN7@PrcmDevice@25|

; 1384 : 
; 1385 :     SPECIAL_DEBUG_MESSAGE(PrcmDeviceGetSourceClockInfo, devId)
; 1386 : 
; 1387 :     if (devId >= OMAP_DEVICE_GENERIC) goto cleanUp;

  02860	e59d301c	 ldr         r3, [sp, #0x1C]
  02864	e3530050	 cmp         r3, #0x50
  02868	3a000000	 bcc         |$LN6@PrcmDevice@25|
  0286c	ea000055	 b           |$cleanUp$48654|
  02870		 |$LN6@PrcmDevice@25|

; 1388 :     
; 1389 :     if (s_rgDeviceLookupTable[devId].pSrcClocks == NULL) goto cleanUp;

  02870	e59d101c	 ldr         r1, [sp, #0x1C]
  02874	e3a0301c	 mov         r3, #0x1C
  02878	e0020391	 mul         r2, r1, r3
  0287c	e59f31a8	 ldr         r3, [pc, #0x1A8]
  02880	e0833002	 add         r3, r3, r2
  02884	e2833018	 add         r3, r3, #0x18
  02888	e5933000	 ldr         r3, [r3]
  0288c	e3530000	 cmp         r3, #0
  02890	1a000000	 bne         |$LN5@PrcmDevice@25|
  02894	ea00004b	 b           |$cleanUp$48654|
  02898		 |$LN5@PrcmDevice@25|

; 1390 :     
; 1391 :     pInfo->count = s_rgDeviceLookupTable[devId].pSrcClocks->size;

  02898	e59d101c	 ldr         r1, [sp, #0x1C]
  0289c	e3a0301c	 mov         r3, #0x1C
  028a0	e0020391	 mul         r2, r1, r3
  028a4	e59f3180	 ldr         r3, [pc, #0x180]
  028a8	e0833002	 add         r3, r3, r2
  028ac	e2833018	 add         r3, r3, #0x18
  028b0	e5933000	 ldr         r3, [r3]
  028b4	e5932000	 ldr         r2, [r3]
  028b8	e59d3020	 ldr         r3, [sp, #0x20]
  028bc	e5832000	 str         r2, [r3]

; 1392 :     for (i = 0; i < pInfo->count; ++i)

  028c0	e3a03000	 mov         r3, #0
  028c4	e58d3004	 str         r3, [sp, #4]
  028c8	ea000002	 b           |$LN4@PrcmDevice@25|
  028cc		 |$LN3@PrcmDevice@25|
  028cc	e59d3004	 ldr         r3, [sp, #4]
  028d0	e2833001	 add         r3, r3, #1
  028d4	e58d3004	 str         r3, [sp, #4]
  028d8		 |$LN4@PrcmDevice@25|
  028d8	e59d2004	 ldr         r2, [sp, #4]
  028dc	e59d3020	 ldr         r3, [sp, #0x20]
  028e0	e5933000	 ldr         r3, [r3]
  028e4	e1520003	 cmp         r2, r3
  028e8	2a000034	 bcs         |$LN2@PrcmDevice@25|

; 1393 :         {
; 1394 :         pInfo->rgSourceClocks[i].nLevel = 1;

  028ec	e59d3020	 ldr         r3, [sp, #0x20]
  028f0	e2831004	 add         r1, r3, #4
  028f4	e59d2004	 ldr         r2, [sp, #4]
  028f8	e3a0300c	 mov         r3, #0xC
  028fc	e0030392	 mul         r3, r2, r3
  02900	e0813003	 add         r3, r1, r3
  02904	e2832004	 add         r2, r3, #4
  02908	e3a03001	 mov         r3, #1
  0290c	e5823000	 str         r3, [r2]

; 1395 :         pInfo->rgSourceClocks[i].clockId = s_rgDeviceLookupTable[devId].pSrcClocks->rgSourceClocks[i];

  02910	e59d101c	 ldr         r1, [sp, #0x1C]
  02914	e3a0301c	 mov         r3, #0x1C
  02918	e0020391	 mul         r2, r1, r3
  0291c	e59f3108	 ldr         r3, [pc, #0x108]
  02920	e0833002	 add         r3, r3, r2
  02924	e2833018	 add         r3, r3, #0x18
  02928	e5933000	 ldr         r3, [r3]
  0292c	e2831004	 add         r1, r3, #4
  02930	e59d2004	 ldr         r2, [sp, #4]
  02934	e3a03004	 mov         r3, #4
  02938	e0030392	 mul         r3, r2, r3
  0293c	e0810003	 add         r0, r1, r3
  02940	e59d3020	 ldr         r3, [sp, #0x20]
  02944	e2831004	 add         r1, r3, #4
  02948	e59d2004	 ldr         r2, [sp, #4]
  0294c	e3a0300c	 mov         r3, #0xC
  02950	e0030392	 mul         r3, r2, r3
  02954	e0812003	 add         r2, r1, r3
  02958	e5903000	 ldr         r3, [r0]
  0295c	e5823000	 str         r3, [r2]

; 1396 :         PrcmClockGetParentClockRefcount(pInfo->rgSourceClocks[i].clockId, 
; 1397 :             pInfo->rgSourceClocks[i].nLevel, 
; 1398 :             &pInfo->rgSourceClocks[i].refCount
; 1399 :             );

  02960	e59d3020	 ldr         r3, [sp, #0x20]
  02964	e2831004	 add         r1, r3, #4
  02968	e59d2004	 ldr         r2, [sp, #4]
  0296c	e3a0300c	 mov         r3, #0xC
  02970	e0030392	 mul         r3, r2, r3
  02974	e0813003	 add         r3, r1, r3
  02978	e2832008	 add         r2, r3, #8
  0297c	e59d3020	 ldr         r3, [sp, #0x20]
  02980	e2830004	 add         r0, r3, #4
  02984	e59d1004	 ldr         r1, [sp, #4]
  02988	e3a0300c	 mov         r3, #0xC
  0298c	e0030391	 mul         r3, r1, r3
  02990	e0803003	 add         r3, r0, r3
  02994	e2833004	 add         r3, r3, #4
  02998	e5931000	 ldr         r1, [r3]
  0299c	e59d3020	 ldr         r3, [sp, #0x20]
  029a0	e283e004	 add         lr, r3, #4
  029a4	e59d0004	 ldr         r0, [sp, #4]
  029a8	e3a0300c	 mov         r3, #0xC
  029ac	e0030390	 mul         r3, r0, r3
  029b0	e08e3003	 add         r3, lr, r3
  029b4	e5930000	 ldr         r0, [r3]
  029b8	eb000000	 bl          PrcmClockGetParentClockRefcount

; 1400 :         }

  029bc	eaffffc2	 b           |$LN3@PrcmDevice@25|
  029c0		 |$LN2@PrcmDevice@25|

; 1401 : 
; 1402 :     rc = TRUE;

  029c0	e3a03001	 mov         r3, #1
  029c4	e58d3000	 str         r3, [sp]
  029c8		 |$cleanUp$48654|

; 1403 : 
; 1404 :     SPECIAL_DEBUG_MESSAGE_DONE(PrcmDeviceGetSourceClockInfo, devId)
; 1405 : 
; 1406 : cleanUp:
; 1407 :     if (!g_bSingleThreaded)

  029c8	e59f3058	 ldr         r3, [pc, #0x58]
  029cc	e5933000	 ldr         r3, [r3]
  029d0	e3530000	 cmp         r3, #0
  029d4	1a00000b	 bne         |$LN1@PrcmDevice@25|

; 1408 :         OALMSG(OAL_FUNC, (L"-PrcmDeviceGetSourceClockInfo()=%d\r\n", rc));

  029d8	e59f3044	 ldr         r3, [pc, #0x44]
  029dc	e5933440	 ldr         r3, [r3, #0x440]
  029e0	e3130004	 tst         r3, #4
  029e4	0a000005	 beq         |$LN12@PrcmDevice@25|
  029e8	e59d1000	 ldr         r1, [sp]
  029ec	e59f002c	 ldr         r0, [pc, #0x2C]
  029f0	eb000000	 bl          NKDbgPrintfW
  029f4	e3a03001	 mov         r3, #1
  029f8	e58d3010	 str         r3, [sp, #0x10]
  029fc	ea000001	 b           |$LN13@PrcmDevice@25|
  02a00		 |$LN12@PrcmDevice@25|
  02a00	e3a03000	 mov         r3, #0
  02a04	e58d3010	 str         r3, [sp, #0x10]
  02a08		 |$LN13@PrcmDevice@25|
  02a08		 |$LN1@PrcmDevice@25|

; 1409 :     return rc;

  02a08	e59d3000	 ldr         r3, [sp]
  02a0c	e58d3008	 str         r3, [sp, #8]

; 1410 : }

  02a10	e59d0008	 ldr         r0, [sp, #8]
  02a14	e28dd014	 add         sp, sp, #0x14
  02a18	e89d6000	 ldmia       sp, {sp, lr}
  02a1c	e12fff1e	 bx          lr
  02a20		 |$LN17@PrcmDevice@25|
  02a20		 |$LN18@PrcmDevice@25|
  02a20	00000000	 DCD         |??_C@_1EK@DOOJMPPH@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAG?$AAe?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAC?$AAl?$AAo?$AAc?$AAk?$AAI?$AAn?$AAf?$AAo?$AA?$CI?$AA?$CJ?$AA?$DN@|
  02a24		 |$LN19@PrcmDevice@25|
  02a24	00000000	 DCD         |dpCurSettings|
  02a28		 |$LN20@PrcmDevice@25|
  02a28	00000000	 DCD         |g_bSingleThreaded|
  02a2c		 |$LN21@PrcmDevice@25|
  02a2c	00000000	 DCD         |s_rgDeviceLookupTable|
  02a30		 |$LN22@PrcmDevice@25|
  02a30	00000000	 DCD         |??_C@_1FE@KDICNDAA@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAG?$AAe?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAC?$AAl?$AAo?$AAc?$AAk?$AAI?$AAn?$AAf?$AAo?$AA?$CI?$AAd?$AAe@|
  02a34		 |$M49208|

			 ENDP  ; |PrcmDeviceGetSourceClockInfo|

	EXPORT	|??_C@_1CM@JHENNHB@?$AA?9?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CM@PFIEEMDN@?$AA?$CL?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|DeviceInitialize|

  000d8			 AREA	 |.pdata|, PDATA
|$T49226| DCD	|$LN22@DeviceInit|
	DCD	0x4000b802

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@JHENNHB@?$AA?9?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "D", 0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e"
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a"
	DCB	0x0, "l", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, "(", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@PFIEEMDN@?$AA?$CL?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "D", 0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e"
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a"
	DCB	0x0, "l", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, "(", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  02a34			 AREA	 |.text|, CODE, ARM

  02a34		 |DeviceInitialize| PROC

; 1415 : {

  02a34		 |$LN22@DeviceInit|
  02a34	e52de004	 str         lr, [sp, #-4]!
  02a38	e24dd01c	 sub         sp, sp, #0x1C
  02a3c		 |$M49223|

; 1416 :     unsigned int i;
; 1417 :     OMAP_CM_REGS *pPrcmCm;
; 1418 :     volatile unsigned int *preg;
; 1419 :     
; 1420 :     if (!g_bSingleThreaded)

  02a3c	e59f32c4	 ldr         r3, [pc, #0x2C4]
  02a40	e5933000	 ldr         r3, [r3]
  02a44	e3530000	 cmp         r3, #0
  02a48	1a00000a	 bne         |$LN13@DeviceInit|

; 1421 :         OALMSG(OAL_FUNC, (L"+DeviceInitialize()\r\n"));

  02a4c	e59f32b0	 ldr         r3, [pc, #0x2B0]
  02a50	e5933440	 ldr         r3, [r3, #0x440]
  02a54	e3130004	 tst         r3, #4
  02a58	0a000004	 beq         |$LN16@DeviceInit|
  02a5c	e59f02ac	 ldr         r0, [pc, #0x2AC]
  02a60	eb000000	 bl          NKDbgPrintfW
  02a64	e3a03001	 mov         r3, #1
  02a68	e58d3010	 str         r3, [sp, #0x10]
  02a6c	ea000001	 b           |$LN17@DeviceInit|
  02a70		 |$LN16@DeviceInit|
  02a70	e3a03000	 mov         r3, #0
  02a74	e58d3010	 str         r3, [sp, #0x10]
  02a78		 |$LN17@DeviceInit|
  02a78		 |$LN13@DeviceInit|

; 1422 : 
; 1423 :     // iterate through all devices and update its state information
; 1424 :     for (i = 0; i < OMAP_DEVICE_COUNT - 1; ++i)

  02a78	e3a03000	 mov         r3, #0
  02a7c	e58d3004	 str         r3, [sp, #4]
  02a80	ea000002	 b           |$LN12@DeviceInit|
  02a84		 |$LN11@DeviceInit|
  02a84	e59d3004	 ldr         r3, [sp, #4]
  02a88	e2833001	 add         r3, r3, #1
  02a8c	e58d3004	 str         r3, [sp, #4]
  02a90		 |$LN12@DeviceInit|
  02a90	e59d3004	 ldr         r3, [sp, #4]
  02a94	e3530050	 cmp         r3, #0x50
  02a98	2a000083	 bcs         |$LN10@DeviceInit|

; 1425 :         {
; 1426 :         pPrcmCm = GetCmRegisterSet(s_rgDeviceLookupTable[i].powerDomain);

  02a9c	e59d1004	 ldr         r1, [sp, #4]
  02aa0	e3a0301c	 mov         r3, #0x1C
  02aa4	e0020391	 mul         r2, r1, r3
  02aa8	e59f325c	 ldr         r3, [pc, #0x25C]
  02aac	e0833002	 add         r3, r3, r2
  02ab0	e5930000	 ldr         r0, [r3]
  02ab4	eb000000	 bl          GetCmRegisterSet
  02ab8	e58d0014	 str         r0, [sp, #0x14]
  02abc	e59d3014	 ldr         r3, [sp, #0x14]
  02ac0	e58d3008	 str         r3, [sp, #8]

; 1427 : 
; 1428 :         // update autoidle information
; 1429 :         if (s_rgDeviceLookupTable[i].pautoidle != NULL)

  02ac4	e59d1004	 ldr         r1, [sp, #4]
  02ac8	e3a0301c	 mov         r3, #0x1C
  02acc	e0020391	 mul         r2, r1, r3
  02ad0	e59f3234	 ldr         r3, [pc, #0x234]
  02ad4	e0833002	 add         r3, r3, r2
  02ad8	e2833014	 add         r3, r3, #0x14
  02adc	e5933000	 ldr         r3, [r3]
  02ae0	e3530000	 cmp         r3, #0
  02ae4	0a00001b	 beq         |$LN9@DeviceInit|

; 1430 :             {
; 1431 :             preg = (volatile unsigned int*)((UCHAR*)pPrcmCm + s_rgDeviceLookupTable[i].pautoidle->offset);

  02ae8	e59d1004	 ldr         r1, [sp, #4]
  02aec	e3a0301c	 mov         r3, #0x1C
  02af0	e0020391	 mul         r2, r1, r3
  02af4	e59f3210	 ldr         r3, [pc, #0x210]
  02af8	e0833002	 add         r3, r3, r2
  02afc	e2833014	 add         r3, r3, #0x14
  02b00	e5933000	 ldr         r3, [r3]
  02b04	e2833008	 add         r3, r3, #8
  02b08	e59d2008	 ldr         r2, [sp, #8]
  02b0c	e5933000	 ldr         r3, [r3]
  02b10	e0823003	 add         r3, r2, r3
  02b14	e58d3000	 str         r3, [sp]

; 1432 :             if (INREG32(preg) & s_rgDeviceLookupTable[i].pautoidle->mask)

  02b18	e59d1004	 ldr         r1, [sp, #4]
  02b1c	e3a0301c	 mov         r3, #0x1C
  02b20	e0020391	 mul         r2, r1, r3
  02b24	e59f31e0	 ldr         r3, [pc, #0x1E0]
  02b28	e0833002	 add         r3, r3, r2
  02b2c	e2833014	 add         r3, r3, #0x14
  02b30	e5933000	 ldr         r3, [r3]
  02b34	e2831004	 add         r1, r3, #4
  02b38	e59d3000	 ldr         r3, [sp]
  02b3c	e5932000	 ldr         r2, [r3]
  02b40	e5913000	 ldr         r3, [r1]
  02b44	e1120003	 tst         r2, r3
  02b48	0a000002	 beq         |$LN8@DeviceInit|

; 1433 :                 {
; 1434 :                 PrcmDeviceEnableAutoIdle(i, TRUE);

  02b4c	e3a01001	 mov         r1, #1
  02b50	e59d0004	 ldr         r0, [sp, #4]
  02b54	eb000000	 bl          PrcmDeviceEnableAutoIdle
  02b58		 |$LN8@DeviceInit|
  02b58		 |$LN9@DeviceInit|

; 1435 :                 }            
; 1436 :             }
; 1437 :         
; 1438 :         //Avoid reference counting DSS device to keep bootloader screen on all the way
; 1439 :         //to the display driver initialization
; 1440 :         if(i == OMAP_DEVICE_DSS || i == OMAP_DEVICE_DSS1 || i == OMAP_DEVICE_DSS2)

  02b58	e59d3004	 ldr         r3, [sp, #4]
  02b5c	e353003f	 cmp         r3, #0x3F
  02b60	0a000005	 beq         |$LN6@DeviceInit|
  02b64	e59d3004	 ldr         r3, [sp, #4]
  02b68	e3530040	 cmp         r3, #0x40
  02b6c	0a000002	 beq         |$LN6@DeviceInit|
  02b70	e59d3004	 ldr         r3, [sp, #4]
  02b74	e3530041	 cmp         r3, #0x41
  02b78	1a000000	 bne         |$LN7@DeviceInit|
  02b7c		 |$LN6@DeviceInit|

; 1441 :             {
; 1442 :             continue;

  02b7c	eaffffc0	 b           |$LN11@DeviceInit|
  02b80		 |$LN7@DeviceInit|

; 1443 :             }
; 1444 : 
; 1445 :         // update functional clock information
; 1446 :         if (s_rgDeviceLookupTable[i].pfclk != NULL)

  02b80	e59d1004	 ldr         r1, [sp, #4]
  02b84	e3a0301c	 mov         r3, #0x1C
  02b88	e0020391	 mul         r2, r1, r3
  02b8c	e59f3178	 ldr         r3, [pc, #0x178]
  02b90	e0833002	 add         r3, r3, r2
  02b94	e2833004	 add         r3, r3, #4
  02b98	e5933000	 ldr         r3, [r3]
  02b9c	e3530000	 cmp         r3, #0
  02ba0	0a00001b	 beq         |$LN5@DeviceInit|

; 1447 :             {
; 1448 :             preg = (volatile unsigned int*)((UCHAR*)pPrcmCm + s_rgDeviceLookupTable[i].pfclk->offset);

  02ba4	e59d1004	 ldr         r1, [sp, #4]
  02ba8	e3a0301c	 mov         r3, #0x1C
  02bac	e0020391	 mul         r2, r1, r3
  02bb0	e59f3154	 ldr         r3, [pc, #0x154]
  02bb4	e0833002	 add         r3, r3, r2
  02bb8	e2833004	 add         r3, r3, #4
  02bbc	e5933000	 ldr         r3, [r3]
  02bc0	e2833008	 add         r3, r3, #8
  02bc4	e59d2008	 ldr         r2, [sp, #8]
  02bc8	e5933000	 ldr         r3, [r3]
  02bcc	e0823003	 add         r3, r2, r3
  02bd0	e58d3000	 str         r3, [sp]

; 1449 :             if (INREG32(preg) & s_rgDeviceLookupTable[i].pfclk->mask)

  02bd4	e59d1004	 ldr         r1, [sp, #4]
  02bd8	e3a0301c	 mov         r3, #0x1C
  02bdc	e0020391	 mul         r2, r1, r3
  02be0	e59f3124	 ldr         r3, [pc, #0x124]
  02be4	e0833002	 add         r3, r3, r2
  02be8	e2833004	 add         r3, r3, #4
  02bec	e5933000	 ldr         r3, [r3]
  02bf0	e2831004	 add         r1, r3, #4
  02bf4	e59d3000	 ldr         r3, [sp]
  02bf8	e5932000	 ldr         r2, [r3]
  02bfc	e5913000	 ldr         r3, [r1]
  02c00	e1120003	 tst         r2, r3
  02c04	0a000002	 beq         |$LN4@DeviceInit|

; 1450 :                 {
; 1451 :                 PrcmDeviceEnableFClock(i, TRUE);

  02c08	e3a01001	 mov         r1, #1
  02c0c	e59d0004	 ldr         r0, [sp, #4]
  02c10	eb000000	 bl          PrcmDeviceEnableFClock
  02c14		 |$LN4@DeviceInit|
  02c14		 |$LN5@DeviceInit|

; 1452 :                 }            
; 1453 :             }
; 1454 : 
; 1455 :         // update inteface clock information
; 1456 :         if (s_rgDeviceLookupTable[i].piclk != NULL)

  02c14	e59d1004	 ldr         r1, [sp, #4]
  02c18	e3a0301c	 mov         r3, #0x1C
  02c1c	e0020391	 mul         r2, r1, r3
  02c20	e59f30e4	 ldr         r3, [pc, #0xE4]
  02c24	e0833002	 add         r3, r3, r2
  02c28	e2833008	 add         r3, r3, #8
  02c2c	e5933000	 ldr         r3, [r3]
  02c30	e3530000	 cmp         r3, #0
  02c34	0a00001b	 beq         |$LN3@DeviceInit|

; 1457 :             {
; 1458 :             preg = (volatile unsigned int*)((UCHAR*)pPrcmCm + s_rgDeviceLookupTable[i].piclk->offset);

  02c38	e59d1004	 ldr         r1, [sp, #4]
  02c3c	e3a0301c	 mov         r3, #0x1C
  02c40	e0020391	 mul         r2, r1, r3
  02c44	e59f30c0	 ldr         r3, [pc, #0xC0]
  02c48	e0833002	 add         r3, r3, r2
  02c4c	e2833008	 add         r3, r3, #8
  02c50	e5933000	 ldr         r3, [r3]
  02c54	e2833008	 add         r3, r3, #8
  02c58	e59d2008	 ldr         r2, [sp, #8]
  02c5c	e5933000	 ldr         r3, [r3]
  02c60	e0823003	 add         r3, r2, r3
  02c64	e58d3000	 str         r3, [sp]

; 1459 :             if (INREG32(preg) & s_rgDeviceLookupTable[i].piclk->mask)

  02c68	e59d1004	 ldr         r1, [sp, #4]
  02c6c	e3a0301c	 mov         r3, #0x1C
  02c70	e0020391	 mul         r2, r1, r3
  02c74	e59f3090	 ldr         r3, [pc, #0x90]
  02c78	e0833002	 add         r3, r3, r2
  02c7c	e2833008	 add         r3, r3, #8
  02c80	e5933000	 ldr         r3, [r3]
  02c84	e2831004	 add         r1, r3, #4
  02c88	e59d3000	 ldr         r3, [sp]
  02c8c	e5932000	 ldr         r2, [r3]
  02c90	e5913000	 ldr         r3, [r1]
  02c94	e1120003	 tst         r2, r3
  02c98	0a000002	 beq         |$LN2@DeviceInit|

; 1460 :                 {
; 1461 :                 PrcmDeviceEnableIClock(i, TRUE);

  02c9c	e3a01001	 mov         r1, #1
  02ca0	e59d0004	 ldr         r0, [sp, #4]
  02ca4	eb000000	 bl          PrcmDeviceEnableIClock
  02ca8		 |$LN2@DeviceInit|
  02ca8		 |$LN3@DeviceInit|

; 1462 :                 }            
; 1463 :             }
; 1464 :         }

  02ca8	eaffff75	 b           |$LN11@DeviceInit|
  02cac		 |$LN10@DeviceInit|

; 1465 : 
; 1466 : #if 0
; 1467 :     {   // Enable the save and restore mechanism for the USB Host device
; 1468 :         OMAP_PRCM_USBHOST_PRM_REGS *pOMAP_PRCM_USBHOST_PRM_REGS;
; 1469 :         OMAP_PRCM_CORE_PRM_REGS *pOMAP_PRCM_CORE_PRM_REGS;
; 1470 :         PHYSICAL_ADDRESS pa;
; 1471 : 
; 1472 :         pa.QuadPart = OMAP_PRCM_USBHOST_PRM_REGS_PA;
; 1473 :         pOMAP_PRCM_USBHOST_PRM_REGS = (OMAP_PRCM_USBHOST_PRM_REGS *)MmMapIoSpace(pa, sizeof(OMAP_PRCM_USBHOST_PRM_REGS), FALSE);
; 1474 :         
; 1475 :         pa.QuadPart = OMAP_PRCM_CORE_PRM_REGS_PA;
; 1476 :         pOMAP_PRCM_CORE_PRM_REGS = (OMAP_PRCM_CORE_PRM_REGS *)MmMapIoSpace(pa, sizeof(OMAP_PRCM_CORE_PRM_REGS), FALSE);
; 1477 :         
; 1478 :         /* 0x4830 74E0 bit4 ASAVEANDRESTORE for USBHOST enable Save and Restore mechanism */
; 1479 :         pOMAP_PRCM_USBHOST_PRM_REGS->PM_PWSTCTRL_USBHOST |= (0x01 << 4); //SAVEANDRESTORE
; 1480 : 
; 1481 :         /* 0x4830 6AE0 bit4 ASAVEANDRESTORE for USBTLL enable Save and Restore mechanism */
; 1482 :         pOMAP_PRCM_CORE_PRM_REGS->PM_PWSTCTRL_CORE |= (0x01 << 4); //SAVEANDRESTORE
; 1483 : 
; 1484 :         MmUnmapIoSpace(pOMAP_PRCM_USBHOST_PRM_REGS, sizeof(OMAP_PRCM_USBHOST_PRM_REGS));
; 1485 :         MmUnmapIoSpace(pOMAP_PRCM_CORE_PRM_REGS, sizeof(OMAP_PRCM_CORE_PRM_REGS));
; 1486 :     }
; 1487 : #endif
; 1488 :     if (!g_bSingleThreaded)

  02cac	e59f3054	 ldr         r3, [pc, #0x54]
  02cb0	e5933000	 ldr         r3, [r3]
  02cb4	e3530000	 cmp         r3, #0
  02cb8	1a00000a	 bne         |$LN1@DeviceInit|

; 1489 :         OALMSG(OAL_FUNC, (L"-DeviceInitialize()\r\n"));

  02cbc	e59f3040	 ldr         r3, [pc, #0x40]
  02cc0	e5933440	 ldr         r3, [r3, #0x440]
  02cc4	e3130004	 tst         r3, #4
  02cc8	0a000004	 beq         |$LN18@DeviceInit|
  02ccc	e59f002c	 ldr         r0, [pc, #0x2C]
  02cd0	eb000000	 bl          NKDbgPrintfW
  02cd4	e3a03001	 mov         r3, #1
  02cd8	e58d3018	 str         r3, [sp, #0x18]
  02cdc	ea000001	 b           |$LN19@DeviceInit|
  02ce0		 |$LN18@DeviceInit|
  02ce0	e3a03000	 mov         r3, #0
  02ce4	e58d3018	 str         r3, [sp, #0x18]
  02ce8		 |$LN19@DeviceInit|
  02ce8		 |$LN1@DeviceInit|

; 1490 : 
; 1491 :     return TRUE;

  02ce8	e3a03001	 mov         r3, #1
  02cec	e58d300c	 str         r3, [sp, #0xC]

; 1492 : }

  02cf0	e59d000c	 ldr         r0, [sp, #0xC]
  02cf4	e28dd01c	 add         sp, sp, #0x1C
  02cf8	e49de004	 ldr         lr, [sp], #4
  02cfc	e12fff1e	 bx          lr
  02d00		 |$LN23@DeviceInit|
  02d00		 |$LN24@DeviceInit|
  02d00	00000000	 DCD         |??_C@_1CM@JHENNHB@?$AA?9?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  02d04		 |$LN25@DeviceInit|
  02d04	00000000	 DCD         |dpCurSettings|
  02d08		 |$LN26@DeviceInit|
  02d08	00000000	 DCD         |g_bSingleThreaded|
  02d0c		 |$LN27@DeviceInit|
  02d0c	00000000	 DCD         |s_rgDeviceLookupTable|
  02d10		 |$LN28@DeviceInit|
  02d10	00000000	 DCD         |??_C@_1CM@PFIEEMDN@?$AA?$CL?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  02d14		 |$M49224|

			 ENDP  ; |DeviceInitialize|

	END
