; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\OMAP3530\SDHC\sdhc.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|SocSdhcDevconf|
	IMPORT	|OALStall|
	IMPORT	|OALPAtoVA|
	IMPORT	|m_dwCPURev|

  00000			 AREA	 |.pdata|, PDATA
|$T46280| DCD	|$LN17@SocSdhcDev|
	DCD	0x40007504
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\sdhc\sdhc.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SocSdhcDevconf| PROC

; 36   : {

  00000		 |$LN17@SocSdhcDev|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd010	 sub         sp, sp, #0x10
  00010		 |$M46277|

; 37   :     OMAP_SYSC_GENERAL_REGS* pSyscGeneralRegs = NULL;

  00010	e3a03000	 mov         r3, #0
  00014	e58d3004	 str         r3, [sp, #4]

; 38   : 	DWORD dwCPURev = (DWORD)CPU_REVISION_UNKNOWN;

  00018	e3e03000	 mvn         r3, #0
  0001c	e58d3000	 str         r3, [sp]

; 39   : 
; 40   : #ifdef BOOT_MODE
; 41   : 	dwCPURev = m_dwCPURev;

  00020	e59f31a8	 ldr         r3, [pc, #0x1A8]
  00024	e5933000	 ldr         r3, [r3]
  00028	e58d3000	 str         r3, [sp]

; 42   :     pSyscGeneralRegs = OALPAtoUA(OMAP_SYSC_GENERAL_REGS_PA);

  0002c	e3a01000	 mov         r1, #0
  00030	e59f0194	 ldr         r0, [pc, #0x194]
  00034	eb000000	 bl          OALPAtoVA
  00038	e58d000c	 str         r0, [sp, #0xC]
  0003c	e59d300c	 ldr         r3, [sp, #0xC]
  00040	e58d3004	 str         r3, [sp, #4]

; 43   : #else
; 44   : 	
; 45   : 	PHYSICAL_ADDRESS pa;
; 46   : 	pa.QuadPart = (LONGLONG)OMAP_SYSC_GENERAL_REGS_PA;
; 47   : 
; 48   : 	// Retrieve CPU revision
; 49   : 	KernelIoControl(IOCTL_HAL_GET_CPUREVISION, NULL, 0, &dwCPURev, sizeof(dwCPURev), NULL);
; 50   : 
; 51   : 	// Map the System Control Module registers
; 52   : 	pSyscGeneralRegs = (OMAP_SYSC_GENERAL_REGS*)MmMapIoSpace(pa, sizeof(OMAP_SYSC_GENERAL_REGS), FALSE);
; 53   : 	if (pSyscGeneralRegs == NULL)
; 54   : 	{
; 55   : 		return;
; 56   : 	}
; 57   : #endif
; 58   :  
; 59   :     // prepare power change
; 60   :     if (dwSlot == MMCSLOT_1)

  00044	e59d3018	 ldr         r3, [sp, #0x18]
  00048	e3530001	 cmp         r3, #1
  0004c	1a000008	 bne         |$LN12@SocSdhcDev|

; 61   :     {
; 62   :         // Make sure VDDS stable bit is cleared before enabling the power for slot1
; 63   : 		CLRREG32(&pSyscGeneralRegs->CONTROL_PBIAS_LITE, (PBIASLITEVMODE0|PBIASLITEPWRDNZ0));

  00050	e59d3004	 ldr         r3, [sp, #4]
  00054	e2833e2b	 add         r3, r3, #0x2B, 28
  00058	e5932000	 ldr         r2, [r3]
  0005c	e3e03003	 mvn         r3, #3
  00060	e0022003	 and         r2, r2, r3
  00064	e59d3004	 ldr         r3, [sp, #4]
  00068	e2833e2b	 add         r3, r3, #0x2B, 28
  0006c	e5832000	 str         r2, [r3]
  00070	ea000012	 b           |$LN11@SocSdhcDev|
  00074		 |$LN12@SocSdhcDev|

; 64   :     } 
; 65   :     else if (dwSlot == MMCSLOT_2)

  00074	e59d3018	 ldr         r3, [sp, #0x18]
  00078	e3530002	 cmp         r3, #2
  0007c	1a00000f	 bne         |$LN10@SocSdhcDev|

; 66   :     {
; 67   : 		CLRREG32(&pSyscGeneralRegs->CONTROL_PBIAS_LITE, PBIASLITEPWRDNZ0);

  00080	e59d3004	 ldr         r3, [sp, #4]
  00084	e2833e2b	 add         r3, r3, #0x2B, 28
  00088	e5932000	 ldr         r2, [r3]
  0008c	e3e03002	 mvn         r3, #2
  00090	e0022003	 and         r2, r2, r3
  00094	e59d3004	 ldr         r3, [sp, #4]
  00098	e2833e2b	 add         r3, r3, #0x2B, 28
  0009c	e5832000	 str         r2, [r3]

; 68   : 		CLRREG32(&pSyscGeneralRegs->CONTROL_DEVCONF1, DEVCONF1_MMCSDIO2ADPCLKISEL);

  000a0	e59d3004	 ldr         r3, [sp, #4]
  000a4	e2833068	 add         r3, r3, #0x68
  000a8	e5932000	 ldr         r2, [r3]
  000ac	e3e03040	 mvn         r3, #0x40
  000b0	e0022003	 and         r2, r2, r3
  000b4	e59d3004	 ldr         r3, [sp, #4]
  000b8	e2833068	 add         r3, r3, #0x68
  000bc	e5832000	 str         r2, [r3]
  000c0		 |$LN10@SocSdhcDev|
  000c0		 |$LN11@SocSdhcDev|

; 69   :     }
; 70   : 
; 71   :     // post power change    
; 72   :     if (dwSlot == MMCSLOT_1)

  000c0	e59d3018	 ldr         r3, [sp, #0x18]
  000c4	e3530001	 cmp         r3, #1
  000c8	1a000028	 bne         |$LN9@SocSdhcDev|

; 73   :     {
; 74   :         UINT32 dwPBiasValue = DEFAULT_PBIAS_VALUE;

  000cc	e3a03003	 mov         r3, #3
  000d0	e58d3008	 str         r3, [sp, #8]

; 75   : 
; 76   :         if (dwCPURev == 1)   // ES 1.0

  000d4	e59d3000	 ldr         r3, [sp]
  000d8	e3530001	 cmp         r3, #1
  000dc	1a000002	 bne         |$LN8@SocSdhcDev|

; 77   : 		{
; 78   :             dwPBiasValue = (PBIASLITEVMODE0|PBIASLITEPWRDNZ0);

  000e0	e3a03003	 mov         r3, #3
  000e4	e58d3008	 str         r3, [sp, #8]
  000e8	ea00000d	 b           |$LN7@SocSdhcDev|
  000ec		 |$LN8@SocSdhcDev|

; 79   : 		}
; 80   :         else if (dwCPURev == 2) // ES 2.0

  000ec	e59d3000	 ldr         r3, [sp]
  000f0	e3530002	 cmp         r3, #2
  000f4	1a000002	 bne         |$LN6@SocSdhcDev|

; 81   : 		{
; 82   :             dwPBiasValue = PBIASLITEPWRDNZ0;

  000f8	e3a03002	 mov         r3, #2
  000fc	e58d3008	 str         r3, [sp, #8]
  00100	ea000007	 b           |$LN5@SocSdhcDev|
  00104		 |$LN6@SocSdhcDev|

; 83   : 		}
; 84   :         else if (dwCPURev == 3) // ES 2.1

  00104	e59d3000	 ldr         r3, [sp]
  00108	e3530003	 cmp         r3, #3
  0010c	1a000002	 bne         |$LN4@SocSdhcDev|

; 85   : 		{
; 86   : #ifdef MMCHS1_LOW_VOLTAGE
; 87   :             dwPBiasValue = PBIASLITEPWRDNZ0;
; 88   : #else
; 89   : 			dwPBiasValue = (PBIASLITEVMODE0|PBIASLITEPWRDNZ0);

  00110	e3a03003	 mov         r3, #3
  00114	e58d3008	 str         r3, [sp, #8]

; 90   : #endif
; 91   : 		}
; 92   :         else

  00118	ea000001	 b           |$LN3@SocSdhcDev|
  0011c		 |$LN4@SocSdhcDev|

; 93   : 		{
; 94   :             dwPBiasValue = DEFAULT_PBIAS_VALUE;

  0011c	e3a03003	 mov         r3, #3
  00120	e58d3008	 str         r3, [sp, #8]
  00124		 |$LN3@SocSdhcDev|
  00124		 |$LN5@SocSdhcDev|
  00124		 |$LN7@SocSdhcDev|

; 95   : 		}
; 96   : 
; 97   : #ifdef BOOT_MODE
; 98   :         OALStall(100 * 1000);

  00124	e3a00b61	 mov         r0, #0x61, 22
  00128	e3800e2a	 orr         r0, r0, #0x2A, 28
  0012c	eb000000	 bl          OALStall

; 99   : #else
; 100  : 		Sleep(100);	
; 101  : #endif
; 102  :         // Workaround to make the MMC slot 1 work
; 103  : 		SETREG32(&pSyscGeneralRegs->CONTROL_PBIAS_LITE, dwPBiasValue);

  00130	e59d3004	 ldr         r3, [sp, #4]
  00134	e2833e2b	 add         r3, r3, #0x2B, 28
  00138	e5932000	 ldr         r2, [r3]
  0013c	e59d3008	 ldr         r3, [sp, #8]
  00140	e1822003	 orr         r2, r2, r3
  00144	e59d3004	 ldr         r3, [sp, #4]
  00148	e2833e2b	 add         r3, r3, #0x2B, 28
  0014c	e5832000	 str         r2, [r3]

; 104  : 		SETREG32(&pSyscGeneralRegs->CONTROL_DEVCONF1, (1 << 24));	// Undocumented bit in the datasheet

  00150	e59d3004	 ldr         r3, [sp, #4]
  00154	e2833068	 add         r3, r3, #0x68
  00158	e5933000	 ldr         r3, [r3]
  0015c	e3832401	 orr         r2, r3, #1, 8
  00160	e59d3004	 ldr         r3, [sp, #4]
  00164	e2833068	 add         r3, r3, #0x68
  00168	e5832000	 str         r2, [r3]
  0016c	ea000013	 b           |$LN2@SocSdhcDev|
  00170		 |$LN9@SocSdhcDev|

; 105  :     }
; 106  :     else if (dwSlot == MMCSLOT_2)

  00170	e59d3018	 ldr         r3, [sp, #0x18]
  00174	e3530002	 cmp         r3, #2
  00178	1a000010	 bne         |$LN1@SocSdhcDev|

; 107  :     {
; 108  : #ifdef BOOT_MODE
; 109  :         OALStall(100 * 1000);

  0017c	e3a00b61	 mov         r0, #0x61, 22
  00180	e3800e2a	 orr         r0, r0, #0x2A, 28
  00184	eb000000	 bl          OALStall

; 110  : #else
; 111  : 		Sleep(100);	
; 112  : #endif
; 113  : 		SETREG32(&pSyscGeneralRegs->CONTROL_PBIAS_LITE, PBIASLITEPWRDNZ0);

  00188	e59d3004	 ldr         r3, [sp, #4]
  0018c	e2833e2b	 add         r3, r3, #0x2B, 28
  00190	e5933000	 ldr         r3, [r3]
  00194	e3832002	 orr         r2, r3, #2
  00198	e59d3004	 ldr         r3, [sp, #4]
  0019c	e2833e2b	 add         r3, r3, #0x2B, 28
  001a0	e5832000	 str         r2, [r3]

; 114  : 		SETREG32(&pSyscGeneralRegs->CONTROL_DEVCONF1, DEVCONF1_MMCSDIO2ADPCLKISEL);

  001a4	e59d3004	 ldr         r3, [sp, #4]
  001a8	e2833068	 add         r3, r3, #0x68
  001ac	e5933000	 ldr         r3, [r3]
  001b0	e3832040	 orr         r2, r3, #0x40
  001b4	e59d3004	 ldr         r3, [sp, #4]
  001b8	e2833068	 add         r3, r3, #0x68
  001bc	e5832000	 str         r2, [r3]
  001c0		 |$LN1@SocSdhcDev|
  001c0		 |$LN2@SocSdhcDev|

; 115  :     }
; 116  : 
; 117  : #ifndef BOOT_MODE
; 118  :     MmUnmapIoSpace((PVOID)pSyscGeneralRegs, sizeof(OMAP_SYSC_GENERAL_REGS));
; 119  : #endif
; 120  : }

  001c0	e28dd010	 add         sp, sp, #0x10
  001c4	e89d6000	 ldmia       sp, {sp, lr}
  001c8	e12fff1e	 bx          lr
  001cc		 |$LN18@SocSdhcDev|
  001cc		 |$LN19@SocSdhcDev|
  001cc	48002270	 DCD         0x48002270
  001d0		 |$LN20@SocSdhcDev|
  001d0	00000000	 DCD         |m_dwCPURev|
  001d4		 |$M46278|

			 ENDP  ; |SocSdhcDevconf|

	END
