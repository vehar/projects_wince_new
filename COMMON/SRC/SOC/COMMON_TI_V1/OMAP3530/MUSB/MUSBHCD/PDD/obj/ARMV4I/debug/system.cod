; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\OMAP3530\MUSB\MUSBHCD\PDD\system.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|maxPower| [ DATA ]
	EXPORT	|gc_MUsbFuncs| [ DATA ]
	EXPORT	|dwMaxCurrent| [ DATA ]
	IMPORT	|Host_ProcessDMA|
	IMPORT	|Host_Suspend|
	IMPORT	|Host_Disconnect|
	IMPORT	|Host_Connect|
	IMPORT	|Host_ProcessEPxTx|
	IMPORT	|Host_ProcessEPxRx|
	IMPORT	|Host_ProcessEP0|
	IMPORT	|Host_ResumeIRQ|

  00000			 AREA	 |.data|, DATA
|maxPower| DCD	0x64
|gc_MUsbFuncs| DCD 0x0
	DCD	|Host_ResumeIRQ|
	DCD	|Host_ProcessEP0|
	DCD	|Host_ProcessEPxRx|
	DCD	|Host_ProcessEPxTx|
	DCD	|Host_Connect|
	DCD	|Host_Disconnect|
	DCD	|Host_Suspend|
	DCD	|Host_ProcessDMA|
|dwMaxCurrent| DCD 0x64
	EXPORT	|HcdPdd_DllMain|

  00000			 AREA	 |.pdata|, PDATA
|$T41385| DCD	|$LN5@HcdPdd_Dll|
	DCD	0x40001004
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\musb\musbhcd\pdd\system.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |HcdPdd_DllMain| PROC

; 85   : {

  00000		 |$LN5@HcdPdd_Dll|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0007	 stmdb       sp!, {r0 - r2}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M41382|

; 86   :     UnusedParameter(hinstDLL);

  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e58d300c	 str         r3, [sp, #0xC]

; 87   :     UnusedParameter(dwReason);

  00018	e59d3010	 ldr         r3, [sp, #0x10]
  0001c	e58d3010	 str         r3, [sp, #0x10]

; 88   :     UnusedParameter(lpvReserved);

  00020	e59d3014	 ldr         r3, [sp, #0x14]
  00024	e58d3014	 str         r3, [sp, #0x14]

; 89   : 
; 90   :     return TRUE;

  00028	e3a03001	 mov         r3, #1
  0002c	e58d3000	 str         r3, [sp]

; 91   : }

  00030	e59d0000	 ldr         r0, [sp]
  00034	e28dd004	 add         sp, sp, #4
  00038	e89d6000	 ldmia       sp, {sp, lr}
  0003c	e12fff1e	 bx          lr
  00040		 |$M41383|

			 ENDP  ; |HcdPdd_DllMain|

	EXPORT	|??_C@_1CK@HFBAGCKA@?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAe?$AAM?$AAH?$AAD?$AAR?$AAC?$AAC?$AAa?$AAr?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|ConfigureMHDRCCard|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|dpCurSettings|

  00008			 AREA	 |.pdata|, PDATA
|$T41393| DCD	|$LN7@ConfigureM|
	DCD	0x40001704

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CK@HFBAGCKA@?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAe?$AAM?$AAH?$AAD?$AAR?$AAC?$AAC?$AAa?$AAr?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "C"
	DCB	0x0, "o", 0x0, "n", 0x0, "f", 0x0, "i", 0x0, "g", 0x0, "u"
	DCB	0x0, "r", 0x0, "e", 0x0, "M", 0x0, "H", 0x0, "D", 0x0, "R"
	DCB	0x0, "C", 0x0, "C", 0x0, "a", 0x0, "r", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  00040			 AREA	 |.text|, CODE, ARM

  00040		 |ConfigureMHDRCCard| PROC

; 174  : {

  00040		 |$LN7@ConfigureM|
  00040	e1a0c00d	 mov         r12, sp
  00044	e92d0001	 stmdb       sp!, {r0}
  00048	e92d5000	 stmdb       sp!, {r12, lr}
  0004c	e24dd008	 sub         sp, sp, #8
  00050		 |$M41390|

; 175  : 	UNREFERENCED_PARAMETER(pPddObject);
; 176  : 
; 177  :     DEBUGMSG(ZONE_FUNCTION, (TEXT("ConfigureMHDRCCard\r\n")));

  00050	e59f3040	 ldr         r3, [pc, #0x40]
  00054	e5933440	 ldr         r3, [r3, #0x440]
  00058	e3130040	 tst         r3, #0x40
  0005c	0a000004	 beq         |$LN3@ConfigureM|
  00060	e59f002c	 ldr         r0, [pc, #0x2C]
  00064	eb000000	 bl          NKDbgPrintfW
  00068	e3a03001	 mov         r3, #1
  0006c	e58d3004	 str         r3, [sp, #4]
  00070	ea000001	 b           |$LN4@ConfigureM|
  00074		 |$LN3@ConfigureM|
  00074	e3a03000	 mov         r3, #0
  00078	e58d3004	 str         r3, [sp, #4]
  0007c		 |$LN4@ConfigureM|

; 178  :     return TRUE;

  0007c	e3a03001	 mov         r3, #1
  00080	e58d3000	 str         r3, [sp]

; 179  : }

  00084	e59d0000	 ldr         r0, [sp]
  00088	e28dd008	 add         sp, sp, #8
  0008c	e89d6000	 ldmia       sp, {sp, lr}
  00090	e12fff1e	 bx          lr
  00094		 |$LN8@ConfigureM|
  00094		 |$LN9@ConfigureM|
  00094	00000000	 DCD         |??_C@_1CK@HFBAGCKA@?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAe?$AAM?$AAH?$AAD?$AAR?$AAC?$AAC?$AAa?$AAr?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  00098		 |$LN10@ConfigureM|
  00098	00000000	 DCD         |dpCurSettings|
  0009c		 |$M41391|

			 ENDP  ; |ConfigureMHDRCCard|

	EXPORT	|??_C@_1EG@LDGJFIDD@?$AAP?$AAr?$AAe?$AAD?$AAm?$AAa?$AAA?$AAc?$AAt?$AAi?$AAv?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?$CI?$AA?$CJ?$AA?5?$AAw?$AAi?$AAt?$AAh?$AA?5?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$CF?$AAd@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FK@OIJFDOEO@?$AA?$CK?$AA?$CK?$AA?$CK?$AA?5?$AAD?$AAV?$AAF?$AAS?$AA?5?$AAi?$AAn?$AA?5?$AAp?$AAr?$AAo?$AAg?$AAr?$AAe?$AAs?$AAs?$AA?5?$AAw?$AAa?$AAi?$AAt?$AA?5?$AAb?$AAe?$AAf?$AAo?$AAr?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@JKCCBCLM@?$AA?$CL?$AAP?$AAr?$AAe?$AAD?$AAm?$AAa?$AAA?$AAc?$AAt?$AAi?$AAv?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|HcdPdd_PreTransferActivation|
	IMPORT	|LeaveCriticalSection|
	IMPORT	|InterlockedIncrement|
	IMPORT	|WaitForSingleObject|
	IMPORT	|EnterCriticalSection|

  00010			 AREA	 |.pdata|, PDATA
|$T41408| DCD	|$LN16@HcdPdd_Pre|
	DCD	0x40005c04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EG@LDGJFIDD@?$AAP?$AAr?$AAe?$AAD?$AAm?$AAa?$AAA?$AAc?$AAt?$AAi?$AAv?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?$CI?$AA?$CJ?$AA?5?$AAw?$AAi?$AAt?$AAh?$AA?5?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$CF?$AAd@| DCB "P"
	DCB	0x0, "r", 0x0, "e", 0x0, "D", 0x0, "m", 0x0, "a", 0x0, "A"
	DCB	0x0, "c", 0x0, "t", 0x0, "i", 0x0, "v", 0x0, "a", 0x0, "t"
	DCB	0x0, "i", 0x0, "o", 0x0, "n", 0x0, "(", 0x0, ")", 0x0, " "
	DCB	0x0, "w", 0x0, "i", 0x0, "t", 0x0, "h", 0x0, " ", 0x0, "c"
	DCB	0x0, "o", 0x0, "u", 0x0, "n", 0x0, "t", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FK@OIJFDOEO@?$AA?$CK?$AA?$CK?$AA?$CK?$AA?5?$AAD?$AAV?$AAF?$AAS?$AA?5?$AAi?$AAn?$AA?5?$AAp?$AAr?$AAo?$AAg?$AAr?$AAe?$AAs?$AAs?$AA?5?$AAw?$AAa?$AAi?$AAt?$AA?5?$AAb?$AAe?$AAf?$AAo?$AAr?$AAe@| DCB "*"
	DCB	0x0, "*", 0x0, "*", 0x0, " ", 0x0, "D", 0x0, "V", 0x0, "F"
	DCB	0x0, "S", 0x0, " ", 0x0, "i", 0x0, "n", 0x0, " ", 0x0, "p"
	DCB	0x0, "r", 0x0, "o", 0x0, "g", 0x0, "r", 0x0, "e", 0x0, "s"
	DCB	0x0, "s", 0x0, " ", 0x0, "w", 0x0, "a", 0x0, "i", 0x0, "t"
	DCB	0x0, " ", 0x0, "b", 0x0, "e", 0x0, "f", 0x0, "o", 0x0, "r"
	DCB	0x0, "e", 0x0, " ", 0x0, "d", 0x0, "o", 0x0, "i", 0x0, "n"
	DCB	0x0, "g", 0x0, " ", 0x0, "D", 0x0, "M", 0x0, "A", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@JKCCBCLM@?$AA?$CL?$AAP?$AAr?$AAe?$AAD?$AAm?$AAa?$AAA?$AAc?$AAt?$AAi?$AAv?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "P", 0x0, "r", 0x0, "e", 0x0, "D", 0x0, "m", 0x0, "a"
	DCB	0x0, "A", 0x0, "c", 0x0, "t", 0x0, "i", 0x0, "v", 0x0, "a"
	DCB	0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  0009c			 AREA	 |.text|, CODE, ARM

  0009c		 |HcdPdd_PreTransferActivation| PROC

; 396  : {    

  0009c		 |$LN16@HcdPdd_Pre|
  0009c	e1a0c00d	 mov         r12, sp
  000a0	e92d0001	 stmdb       sp!, {r0}
  000a4	e92d5000	 stmdb       sp!, {r12, lr}
  000a8	e24dd01c	 sub         sp, sp, #0x1C
  000ac		 |$M41405|

; 397  :     BOOL retVal=TRUE;

  000ac	e3a03001	 mov         r3, #1
  000b0	e58d3000	 str         r3, [sp]

; 398  :     DEBUGMSG(ZONE_FUNCTION, (
; 399  :         L"+PreDmaActivation\r\n"
; 400  :     ));

  000b4	e59f3144	 ldr         r3, [pc, #0x144]
  000b8	e5933440	 ldr         r3, [r3, #0x440]
  000bc	e3130040	 tst         r3, #0x40
  000c0	0a000004	 beq         |$LN8@HcdPdd_Pre|
  000c4	e59f013c	 ldr         r0, [pc, #0x13C]
  000c8	eb000000	 bl          NKDbgPrintfW
  000cc	e3a03001	 mov         r3, #1
  000d0	e58d300c	 str         r3, [sp, #0xC]
  000d4	ea000001	 b           |$LN9@HcdPdd_Pre|
  000d8		 |$LN8@HcdPdd_Pre|
  000d8	e3a03000	 mov         r3, #0
  000dc	e58d300c	 str         r3, [sp, #0xC]
  000e0		 |$LN9@HcdPdd_Pre|
  000e0		 |$LN5@HcdPdd_Pre|

; 401  : 
; 402  :     for (;;)
; 403  :     {
; 404  :     
; 405  :         // this operation needs to be atomic to handle a corner case
; 406  :         EnterCriticalSection(&pPdd->csDVFS);

  000e0	e59d3024	 ldr         r3, [sp, #0x24]
  000e4	e2830e27	 add         r0, r3, #0x27, 28
  000e8	eb000000	 bl          EnterCriticalSection

; 407  :         
; 408  :         // check and wait for DVFS activity to complete
; 409  :         if (pPdd->bDVFSActive == TRUE)

  000ec	e59d3024	 ldr         r3, [sp, #0x24]
  000f0	e2833e26	 add         r3, r3, #0x26, 28
  000f4	e5933000	 ldr         r3, [r3]
  000f8	e3530001	 cmp         r3, #1
  000fc	1a00001f	 bne         |$LN3@HcdPdd_Pre|

; 410  :         {
; 411  :             DWORD dwRet;
; 412  : 
; 413  :             DEBUGMSG(ZONE_FUNCTION, (L"*** DVFS in progress wait before doing DMA\r\n"));

  00100	e59f30f8	 ldr         r3, [pc, #0xF8]
  00104	e5933440	 ldr         r3, [r3, #0x440]
  00108	e3130040	 tst         r3, #0x40
  0010c	0a000004	 beq         |$LN10@HcdPdd_Pre|
  00110	e59f00ec	 ldr         r0, [pc, #0xEC]
  00114	eb000000	 bl          NKDbgPrintfW
  00118	e3a03001	 mov         r3, #1
  0011c	e58d3010	 str         r3, [sp, #0x10]
  00120	ea000001	 b           |$LN11@HcdPdd_Pre|
  00124		 |$LN10@HcdPdd_Pre|
  00124	e3a03000	 mov         r3, #0
  00128	e58d3010	 str         r3, [sp, #0x10]
  0012c		 |$LN11@HcdPdd_Pre|

; 414  :             dwRet = WaitForSingleObject(pPdd->hDVFSActivityEvent, 0);

  0012c	e3a01000	 mov         r1, #0
  00130	e59d3024	 ldr         r3, [sp, #0x24]
  00134	e2833f9b	 add         r3, r3, #0x9B, 30
  00138	e5930000	 ldr         r0, [r3]
  0013c	eb000000	 bl          WaitForSingleObject
  00140	e58d0014	 str         r0, [sp, #0x14]
  00144	e59d3014	 ldr         r3, [sp, #0x14]
  00148	e58d3004	 str         r3, [sp, #4]

; 415  :             if (dwRet != WAIT_TIMEOUT)

  0014c	e59d2004	 ldr         r2, [sp, #4]
  00150	e3a03c01	 mov         r3, #1, 24
  00154	e3833002	 orr         r3, r3, #2
  00158	e1520003	 cmp         r2, r3
  0015c	0a000006	 beq         |$LN2@HcdPdd_Pre|

; 416  :             {
; 417  :                 InterlockedIncrement(&pPdd->nActiveDmaCount);

  00160	e59d3024	 ldr         r3, [sp, #0x24]
  00164	e2830f99	 add         r0, r3, #0x99, 30
  00168	eb000000	 bl          InterlockedIncrement

; 418  :                 LeaveCriticalSection(&pPdd->csDVFS);

  0016c	e59d3024	 ldr         r3, [sp, #0x24]
  00170	e2830e27	 add         r0, r3, #0x27, 28
  00174	eb000000	 bl          LeaveCriticalSection

; 419  :                 break;

  00178	ea00000b	 b           |$LN4@HcdPdd_Pre|
  0017c		 |$LN2@HcdPdd_Pre|

; 420  :             }
; 421  :         }
; 422  :         else

  0017c	ea000006	 b           |$LN1@HcdPdd_Pre|
  00180		 |$LN3@HcdPdd_Pre|

; 423  :         {
; 424  :             InterlockedIncrement(&pPdd->nActiveDmaCount);

  00180	e59d3024	 ldr         r3, [sp, #0x24]
  00184	e2830f99	 add         r0, r3, #0x99, 30
  00188	eb000000	 bl          InterlockedIncrement

; 425  :             LeaveCriticalSection(&pPdd->csDVFS);

  0018c	e59d3024	 ldr         r3, [sp, #0x24]
  00190	e2830e27	 add         r0, r3, #0x27, 28
  00194	eb000000	 bl          LeaveCriticalSection

; 426  :             break;

  00198	ea000003	 b           |$LN4@HcdPdd_Pre|
  0019c		 |$LN1@HcdPdd_Pre|

; 427  :         }
; 428  :         LeaveCriticalSection(&pPdd->csDVFS);  // hDVFSActivityEvent not signaled

  0019c	e59d3024	 ldr         r3, [sp, #0x24]
  001a0	e2830e27	 add         r0, r3, #0x27, 28
  001a4	eb000000	 bl          LeaveCriticalSection

; 429  : 
; 430  :     }

  001a8	eaffffcc	 b           |$LN5@HcdPdd_Pre|
  001ac		 |$LN4@HcdPdd_Pre|

; 431  : 
; 432  :     DEBUGMSG(ZONE_HCD, (
; 433  :         L"PreDmaActivation() with count %d\r\n", pPdd->nActiveDmaCount
; 434  :         ));

  001ac	e59f304c	 ldr         r3, [pc, #0x4C]
  001b0	e5933440	 ldr         r3, [r3, #0x440]
  001b4	e3130001	 tst         r3, #1
  001b8	0a000007	 beq         |$LN12@HcdPdd_Pre|
  001bc	e59d3024	 ldr         r3, [sp, #0x24]
  001c0	e2833f99	 add         r3, r3, #0x99, 30
  001c4	e5931000	 ldr         r1, [r3]
  001c8	e59f002c	 ldr         r0, [pc, #0x2C]
  001cc	eb000000	 bl          NKDbgPrintfW
  001d0	e3a03001	 mov         r3, #1
  001d4	e58d3018	 str         r3, [sp, #0x18]
  001d8	ea000001	 b           |$LN13@HcdPdd_Pre|
  001dc		 |$LN12@HcdPdd_Pre|
  001dc	e3a03000	 mov         r3, #0
  001e0	e58d3018	 str         r3, [sp, #0x18]
  001e4		 |$LN13@HcdPdd_Pre|

; 435  : 
; 436  :     return retVal;

  001e4	e59d3000	 ldr         r3, [sp]
  001e8	e58d3008	 str         r3, [sp, #8]

; 437  : }

  001ec	e59d0008	 ldr         r0, [sp, #8]
  001f0	e28dd01c	 add         sp, sp, #0x1C
  001f4	e89d6000	 ldmia       sp, {sp, lr}
  001f8	e12fff1e	 bx          lr
  001fc		 |$LN17@HcdPdd_Pre|
  001fc		 |$LN18@HcdPdd_Pre|
  001fc	00000000	 DCD         |??_C@_1EG@LDGJFIDD@?$AAP?$AAr?$AAe?$AAD?$AAm?$AAa?$AAA?$AAc?$AAt?$AAi?$AAv?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?$CI?$AA?$CJ?$AA?5?$AAw?$AAi?$AAt?$AAh?$AA?5?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$CF?$AAd@|
  00200		 |$LN19@HcdPdd_Pre|
  00200	00000000	 DCD         |dpCurSettings|
  00204		 |$LN20@HcdPdd_Pre|
  00204	00000000	 DCD         |??_C@_1FK@OIJFDOEO@?$AA?$CK?$AA?$CK?$AA?$CK?$AA?5?$AAD?$AAV?$AAF?$AAS?$AA?5?$AAi?$AAn?$AA?5?$AAp?$AAr?$AAo?$AAg?$AAr?$AAe?$AAs?$AAs?$AA?5?$AAw?$AAa?$AAi?$AAt?$AA?5?$AAb?$AAe?$AAf?$AAo?$AAr?$AAe@|
  00208		 |$LN21@HcdPdd_Pre|
  00208	00000000	 DCD         |??_C@_1CI@JKCCBCLM@?$AA?$CL?$AAP?$AAr?$AAe?$AAD?$AAm?$AAa?$AAA?$AAc?$AAt?$AAi?$AAv?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?$AN?$AA?6?$AA?$AA@|
  0020c		 |$M41406|

			 ENDP  ; |HcdPdd_PreTransferActivation|

	EXPORT	|??_C@_1EM@KFLDAMCC@?$AAP?$AAo?$AAs?$AAt?$AAD?$AAm?$AAa?$AAD?$AAe?$AAa?$AAc?$AAt?$AAi?$AAv?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?$CI?$AA?$CJ?$AA?5?$AAw?$AAi?$AAt?$AAh?$AA?5?$AAc?$AAo?$AAu?$AAn?$AAt@| [ DATA ] ; `string'
	EXPORT	|SetEvent|
	EXPORT	|??_C@_1GC@PCKBFPD@?$AA?$CK?$AA?$CK?$AA?$CK?$AAU?$AAS?$AAB?$AAH?$AAC?$AAD?$AA?3?$AAf?$AAi?$AAn?$AAi?$AAs?$AAh?$AAe?$AAd?$AA?5?$AAa?$AAl?$AAl?$AA?5?$AAD?$AAm?$AAa?$AA?8?$AAs?$AA?5?$AAs?$AAe?$AAt@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1KM@IONPKELJ@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CO@KOCODIMP@?$AA?$CL?$AAP?$AAo?$AAs?$AAt?$AAD?$AAm?$AAa?$AAD?$AAe?$AAa?$AAc?$AAt?$AAi?$AAv?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|HcdPdd_PostTransferDeactivation|
	IMPORT	|InterlockedDecrement|

  00018			 AREA	 |.pdata|, PDATA
|$T41426| DCD	|$LN14@HcdPdd_Pos|
	DCD	0x40005a04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EM@KFLDAMCC@?$AAP?$AAo?$AAs?$AAt?$AAD?$AAm?$AAa?$AAD?$AAe?$AAa?$AAc?$AAt?$AAi?$AAv?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?$CI?$AA?$CJ?$AA?5?$AAw?$AAi?$AAt?$AAh?$AA?5?$AAc?$AAo?$AAu?$AAn?$AAt@| DCB "P"
	DCB	0x0, "o", 0x0, "s", 0x0, "t", 0x0, "D", 0x0, "m", 0x0, "a"
	DCB	0x0, "D", 0x0, "e", 0x0, "a", 0x0, "c", 0x0, "t", 0x0, "i"
	DCB	0x0, "v", 0x0, "a", 0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n"
	DCB	0x0, "(", 0x0, ")", 0x0, " ", 0x0, "w", 0x0, "i", 0x0, "t"
	DCB	0x0, "h", 0x0, " ", 0x0, "c", 0x0, "o", 0x0, "u", 0x0, "n"
	DCB	0x0, "t", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GC@PCKBFPD@?$AA?$CK?$AA?$CK?$AA?$CK?$AAU?$AAS?$AAB?$AAH?$AAC?$AAD?$AA?3?$AAf?$AAi?$AAn?$AAi?$AAs?$AAh?$AAe?$AAd?$AA?5?$AAa?$AAl?$AAl?$AA?5?$AAD?$AAm?$AAa?$AA?8?$AAs?$AA?5?$AAs?$AAe?$AAt@| DCB "*"
	DCB	0x0, "*", 0x0, "*", 0x0, "U", 0x0, "S", 0x0, "B", 0x0, "H"
	DCB	0x0, "C", 0x0, "D", 0x0, ":", 0x0, "f", 0x0, "i", 0x0, "n"
	DCB	0x0, "i", 0x0, "s", 0x0, "h", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "a", 0x0, "l", 0x0, "l", 0x0, " ", 0x0, "D", 0x0, "m"
	DCB	0x0, "a", 0x0, "'", 0x0, "s", 0x0, " ", 0x0, "s", 0x0, "e"
	DCB	0x0, "t", 0x0, " ", 0x0, "h", 0x0, "D", 0x0, "V", 0x0, "F"
	DCB	0x0, "S", 0x0, "A", 0x0, "c", 0x0, "k", 0x0, "E", 0x0, "v"
	DCB	0x0, "e", 0x0, "n", 0x0, "t", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@| DCB "%"
	DCB	0x0, "s", 0x0, ":", 0x0, " ", 0x0, "D", 0x0, "E", 0x0, "B"
	DCB	0x0, "U", 0x0, "G", 0x0, "C", 0x0, "H", 0x0, "K", 0x0, " "
	DCB	0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "i", 0x0, "n", 0x0, " ", 0x0, "f", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, " ", 0x0, "%", 0x0, "s", 0x0, " "
	DCB	0x0, "a", 0x0, "t", 0x0, " ", 0x0, "l", 0x0, "i", 0x0, "n"
	DCB	0x0, "e", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@| DCB "U", 0x0
	DCB	"n", 0x0, "k", 0x0, "n", 0x0, "o", 0x0, "w", 0x0, "n", 0x0
	DCB	0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KM@IONPKELJ@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@| DCB "C"
	DCB	0x0, ":", 0x0, "\\", 0x0, "W", 0x0, "I", 0x0, "N", 0x0, "C"
	DCB	0x0, "E", 0x0, "6", 0x0, "0", 0x0, "0", 0x0, "\\", 0x0, "P"
	DCB	0x0, "L", 0x0, "A", 0x0, "T", 0x0, "F", 0x0, "O", 0x0, "R"
	DCB	0x0, "M", 0x0, "\\", 0x0, "C", 0x0, "O", 0x0, "M", 0x0, "M"
	DCB	0x0, "O", 0x0, "N", 0x0, "\\", 0x0, "S", 0x0, "R", 0x0, "C"
	DCB	0x0, "\\", 0x0, "S", 0x0, "O", 0x0, "C", 0x0, "\\", 0x0, "C"
	DCB	0x0, "O", 0x0, "M", 0x0, "M", 0x0, "O", 0x0, "N", 0x0, "_"
	DCB	0x0, "T", 0x0, "I", 0x0, "_", 0x0, "V", 0x0, "1", 0x0, "\\"
	DCB	0x0, "O", 0x0, "M", 0x0, "A", 0x0, "P", 0x0, "3", 0x0, "5"
	DCB	0x0, "3", 0x0, "0", 0x0, "\\", 0x0, "M", 0x0, "U", 0x0, "S"
	DCB	0x0, "B", 0x0, "\\", 0x0, "M", 0x0, "U", 0x0, "S", 0x0, "B"
	DCB	0x0, "H", 0x0, "C", 0x0, "D", 0x0, "\\", 0x0, "P", 0x0, "D"
	DCB	0x0, "D", 0x0, "\\", 0x0, ".", 0x0, "\\", 0x0, "s", 0x0, "y"
	DCB	0x0, "s", 0x0, "t", 0x0, "e", 0x0, "m", 0x0, ".", 0x0, "c"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@KOCODIMP@?$AA?$CL?$AAP?$AAo?$AAs?$AAt?$AAD?$AAm?$AAa?$AAD?$AAe?$AAa?$AAc?$AAt?$AAi?$AAv?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "P", 0x0, "o", 0x0, "s", 0x0, "t", 0x0, "D", 0x0, "m"
	DCB	0x0, "a", 0x0, "D", 0x0, "e", 0x0, "a", 0x0, "c", 0x0, "t"
	DCB	0x0, "i", 0x0, "v", 0x0, "a", 0x0, "t", 0x0, "i", 0x0, "o"
	DCB	0x0, "n", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  0020c			 AREA	 |.text|, CODE, ARM

  0020c		 |HcdPdd_PostTransferDeactivation| PROC

; 447  : {

  0020c		 |$LN14@HcdPdd_Pos|
  0020c	e1a0c00d	 mov         r12, sp
  00210	e92d0001	 stmdb       sp!, {r0}
  00214	e92d5000	 stmdb       sp!, {r12, lr}
  00218	e24dd010	 sub         sp, sp, #0x10
  0021c		 |$M41423|

; 448  :         
; 449  :     DEBUGMSG(ZONE_HCD, (
; 450  :         L"+PostDmaDeactivation\r\n"
; 451  :     ));

  0021c	e59f3138	 ldr         r3, [pc, #0x138]
  00220	e5933440	 ldr         r3, [r3, #0x440]
  00224	e3130001	 tst         r3, #1
  00228	0a000004	 beq         |$LN4@HcdPdd_Pos|
  0022c	e59f013c	 ldr         r0, [pc, #0x13C]
  00230	eb000000	 bl          NKDbgPrintfW
  00234	e3a03001	 mov         r3, #1
  00238	e58d3000	 str         r3, [sp]
  0023c	ea000001	 b           |$LN5@HcdPdd_Pos|
  00240		 |$LN4@HcdPdd_Pos|
  00240	e3a03000	 mov         r3, #0
  00244	e58d3000	 str         r3, [sp]
  00248		 |$LN5@HcdPdd_Pos|

; 452  :     
; 453  :     ASSERT(pPdd->nActiveDmaCount > 0);

  00248	e59d3018	 ldr         r3, [sp, #0x18]
  0024c	e2833f99	 add         r3, r3, #0x99, 30
  00250	e5933000	 ldr         r3, [r3]
  00254	e3530000	 cmp         r3, #0
  00258	da000002	 ble         |$LN6@HcdPdd_Pos|
  0025c	e3a03001	 mov         r3, #1
  00260	e58d3004	 str         r3, [sp, #4]
  00264	ea000008	 b           |$LN7@HcdPdd_Pos|
  00268		 |$LN6@HcdPdd_Pos|
  00268	e3a03c01	 mov         r3, #1, 24
  0026c	e38330c5	 orr         r3, r3, #0xC5
  00270	e59f20f4	 ldr         r2, [pc, #0xF4]
  00274	e59f10ec	 ldr         r1, [pc, #0xEC]
  00278	e59f00e4	 ldr         r0, [pc, #0xE4]
  0027c	eb000000	 bl          NKDbgPrintfW
  00280	e6000010	 __debugbreak_ce
  00284	e3a03000	 mov         r3, #0
  00288	e58d3004	 str         r3, [sp, #4]
  0028c		 |$LN7@HcdPdd_Pos|

; 454  : 
; 455  :     // this operation needs to be atomic to handle a corner case
; 456  :     EnterCriticalSection(&pPdd->csDVFS);

  0028c	e59d3018	 ldr         r3, [sp, #0x18]
  00290	e2830e27	 add         r0, r3, #0x27, 28
  00294	eb000000	 bl          EnterCriticalSection

; 457  :     
; 458  :     // check if all dma's are inactive and signal ack event if so
; 459  :     InterlockedDecrement(&pPdd->nActiveDmaCount);

  00298	e59d3018	 ldr         r3, [sp, #0x18]
  0029c	e2830f99	 add         r0, r3, #0x99, 30
  002a0	eb000000	 bl          InterlockedDecrement

; 460  :     if (pPdd->bDVFSActive == TRUE && pPdd->nActiveDmaCount <= 0)

  002a4	e59d3018	 ldr         r3, [sp, #0x18]
  002a8	e2833e26	 add         r3, r3, #0x26, 28
  002ac	e5933000	 ldr         r3, [r3]
  002b0	e3530001	 cmp         r3, #1
  002b4	1a000013	 bne         |$LN1@HcdPdd_Pos|
  002b8	e59d3018	 ldr         r3, [sp, #0x18]
  002bc	e2833f99	 add         r3, r3, #0x99, 30
  002c0	e5933000	 ldr         r3, [r3]
  002c4	e3530000	 cmp         r3, #0
  002c8	ca00000e	 bgt         |$LN1@HcdPdd_Pos|

; 461  :         {
; 462  :         DEBUGMSG(ZONE_HCD, (L"***USBHCD:finished all Dma's set hDVFSAckEvent\r\n"));

  002cc	e59f3088	 ldr         r3, [pc, #0x88]
  002d0	e5933440	 ldr         r3, [r3, #0x440]
  002d4	e3130001	 tst         r3, #1
  002d8	0a000004	 beq         |$LN8@HcdPdd_Pos|
  002dc	e59f007c	 ldr         r0, [pc, #0x7C]
  002e0	eb000000	 bl          NKDbgPrintfW
  002e4	e3a03001	 mov         r3, #1
  002e8	e58d3008	 str         r3, [sp, #8]
  002ec	ea000001	 b           |$LN9@HcdPdd_Pos|
  002f0		 |$LN8@HcdPdd_Pos|
  002f0	e3a03000	 mov         r3, #0
  002f4	e58d3008	 str         r3, [sp, #8]
  002f8		 |$LN9@HcdPdd_Pos|

; 463  :         SetEvent(pPdd->hDVFSAckEvent);

  002f8	e59d3018	 ldr         r3, [sp, #0x18]
  002fc	e2833f9a	 add         r3, r3, #0x9A, 30
  00300	e5930000	 ldr         r0, [r3]
  00304	eb000000	 bl          SetEvent
  00308		 |$LN1@HcdPdd_Pos|

; 464  :         }
; 465  : 
; 466  :     LeaveCriticalSection(&pPdd->csDVFS);

  00308	e59d3018	 ldr         r3, [sp, #0x18]
  0030c	e2830e27	 add         r0, r3, #0x27, 28
  00310	eb000000	 bl          LeaveCriticalSection

; 467  : 
; 468  :     DEBUGMSG(ZONE_HCD, (
; 469  :         L"PostDmaDeactivation() with count %d\r\n", pPdd->nActiveDmaCount
; 470  :         ));

  00314	e59f3040	 ldr         r3, [pc, #0x40]
  00318	e5933440	 ldr         r3, [r3, #0x440]
  0031c	e3130001	 tst         r3, #1
  00320	0a000007	 beq         |$LN10@HcdPdd_Pos|
  00324	e59d3018	 ldr         r3, [sp, #0x18]
  00328	e2833f99	 add         r3, r3, #0x99, 30
  0032c	e5931000	 ldr         r1, [r3]
  00330	e59f0020	 ldr         r0, [pc, #0x20]
  00334	eb000000	 bl          NKDbgPrintfW
  00338	e3a03001	 mov         r3, #1
  0033c	e58d300c	 str         r3, [sp, #0xC]
  00340	ea000001	 b           |$LN11@HcdPdd_Pos|
  00344		 |$LN10@HcdPdd_Pos|
  00344	e3a03000	 mov         r3, #0
  00348	e58d300c	 str         r3, [sp, #0xC]
  0034c		 |$LN11@HcdPdd_Pos|

; 471  : }

  0034c	e28dd010	 add         sp, sp, #0x10
  00350	e89d6000	 ldmia       sp, {sp, lr}
  00354	e12fff1e	 bx          lr
  00358		 |$LN15@HcdPdd_Pos|
  00358		 |$LN16@HcdPdd_Pos|
  00358	00000000	 DCD         |??_C@_1EM@KFLDAMCC@?$AAP?$AAo?$AAs?$AAt?$AAD?$AAm?$AAa?$AAD?$AAe?$AAa?$AAc?$AAt?$AAi?$AAv?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?$CI?$AA?$CJ?$AA?5?$AAw?$AAi?$AAt?$AAh?$AA?5?$AAc?$AAo?$AAu?$AAn?$AAt@|
  0035c		 |$LN17@HcdPdd_Pos|
  0035c	00000000	 DCD         |dpCurSettings|
  00360		 |$LN18@HcdPdd_Pos|
  00360	00000000	 DCD         |??_C@_1GC@PCKBFPD@?$AA?$CK?$AA?$CK?$AA?$CK?$AAU?$AAS?$AAB?$AAH?$AAC?$AAD?$AA?3?$AAf?$AAi?$AAn?$AAi?$AAs?$AAh?$AAe?$AAd?$AA?5?$AAa?$AAl?$AAl?$AA?5?$AAD?$AAm?$AAa?$AA?8?$AAs?$AA?5?$AAs?$AAe?$AAt@|
  00364		 |$LN19@HcdPdd_Pos|
  00364	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  00368		 |$LN20@HcdPdd_Pos|
  00368	00000000	 DCD         |??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@|
  0036c		 |$LN21@HcdPdd_Pos|
  0036c	00000000	 DCD         |??_C@_1KM@IONPKELJ@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  00370		 |$LN22@HcdPdd_Pos|
  00370	00000000	 DCD         |??_C@_1CO@KOCODIMP@?$AA?$CL?$AAP?$AAo?$AAs?$AAt?$AAD?$AAm?$AAa?$AAD?$AAe?$AAa?$AAc?$AAt?$AAi?$AAv?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?$AN?$AA?6?$AA?$AA@|
  00374		 |$M41424|

			 ENDP  ; |HcdPdd_PostTransferDeactivation|

	IMPORT	|EventModify|
; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T41440| DCD	|$LN5@SetEvent|
	DCD	0x40000e04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SetEvent| PROC

; 235  : _inline BOOL SetEvent(HANDLE h) {

  00000		 |$LN5@SetEvent|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd008	 sub         sp, sp, #8
  00010		 |$M41437|

; 236  : 	return EventModify(h,EVENT_SET);

  00010	e3a01003	 mov         r1, #3
  00014	e59d0010	 ldr         r0, [sp, #0x10]
  00018	eb000000	 bl          EventModify
  0001c	e58d0004	 str         r0, [sp, #4]
  00020	e59d3004	 ldr         r3, [sp, #4]
  00024	e58d3000	 str         r3, [sp]

; 237  : }

  00028	e59d0000	 ldr         r0, [sp]
  0002c	e28dd008	 add         sp, sp, #8
  00030	e89d6000	 ldmia       sp, {sp, lr}
  00034	e12fff1e	 bx          lr
  00038		 |$M41438|

			 ENDP  ; |SetEvent|

	EXPORT	|??_C@_1BO@OMPMGKJK@?$AAH?$AAc?$AAd?$AAP?$AAd?$AAd?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?9?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FG@KIICLDGL@?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAi?$AAn?$AA?5?$AAp?$AAe?$AAr?$AAf?$AAo?$AAr?$AAm?$AAi?$AAn?$AAg?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAa?$AAt?$AAt?$AAa?$AAc?$AAh?$AA?5?$AAp@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DG@PIDKFHDH@?$AAF?$AAa?$AAi?$AAl?$AAu?$AAr?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAO?$AAT?$AAG?$AAA?$AAt?$AAt?$AAa?$AAc?$AAh?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BE@JNKHMKGH@?$AAO?$AAT?$AAG?$AAA?$AAt?$AAt?$AAa?$AAc?$AAh?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DK@FDGIEPDF@?$AAF?$AAa?$AAi?$AAl?$AAu?$AAr?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAO?$AAT?$AAG?$AAU?$AAS?$AAB?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BI@KEGLAEOK@?$AAO?$AAT?$AAG?$AAU?$AAS?$AAB?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CK@HNFDCIIG@?$AAF?$AAa?$AAi?$AAl?$AAu?$AAr?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAl?$AAo?$AAa?$AAd?$AA?5?$AA?$CF?$AAs?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CC@PKGPLCAL@?$AAo?$AAm?$AAa?$AAp?$AA_?$AAm?$AAu?$AAs?$AAb?$AAo?$AAt?$AAg?$AA?4?$AAd?$AAl?$AAl?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FC@NNHMAEDC@?$AAH?$AAc?$AAd?$AAP?$AAd?$AAd?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?5?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAp?$AAP?$AAd?$AAd@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BO@CKJDGDBN@?$AAH?$AAc?$AAd?$AAP?$AAd?$AAd?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?$CL?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|HcdPdd_Init|
	IMPORT	|free|
	IMPORT	|DeleteCriticalSection|
	IMPORT	|CloseBusAccessHandle|
	IMPORT	|GetProcAddressW|
	IMPORT	|GetModuleHandleW|
	IMPORT	|CreateBusAccessHandle|
	IMPORT	|g_dwContext|
	IMPORT	|InitializeCriticalSection|
	IMPORT	|malloc|

  00020			 AREA	 |.pdata|, PDATA
|$T41462| DCD	|$LN28@HcdPdd_Ini|
	DCD	0x4000ed04
; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\musb\musbhcd\pdd\system.c

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@OMPMGKJK@?$AAH?$AAc?$AAd?$AAP?$AAd?$AAd?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?9?$AA?$AN?$AA?6?$AA?$AA@| DCB "H"
	DCB	0x0, "c", 0x0, "d", 0x0, "P", 0x0, "d", 0x0, "d", 0x0, "_"
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "-", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FG@KIICLDGL@?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAi?$AAn?$AA?5?$AAp?$AAe?$AAr?$AAf?$AAo?$AAr?$AAm?$AAi?$AAn?$AAg?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAa?$AAt?$AAt?$AAa?$AAc?$AAh?$AA?5?$AAp@| DCB "E"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "i"
	DCB	0x0, "n", 0x0, " ", 0x0, "p", 0x0, "e", 0x0, "r", 0x0, "f"
	DCB	0x0, "o", 0x0, "r", 0x0, "m", 0x0, "i", 0x0, "n", 0x0, "g"
	DCB	0x0, " ", 0x0, "t", 0x0, "h", 0x0, "e", 0x0, " ", 0x0, "a"
	DCB	0x0, "t", 0x0, "t", 0x0, "a", 0x0, "c", 0x0, "h", 0x0, " "
	DCB	0x0, "p", 0x0, "r", 0x0, "o", 0x0, "c", 0x0, "e", 0x0, "d"
	DCB	0x0, "u", 0x0, "r", 0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DG@PIDKFHDH@?$AAF?$AAa?$AAi?$AAl?$AAu?$AAr?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAO?$AAT?$AAG?$AAA?$AAt?$AAt?$AAa?$AAc?$AAh?$AA?$AN?$AA?6?$AA?$AA@| DCB "F"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, "u", 0x0, "r", 0x0, "e"
	DCB	0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "g", 0x0, "e"
	DCB	0x0, "t", 0x0, " ", 0x0, "O", 0x0, "T", 0x0, "G", 0x0, "A"
	DCB	0x0, "t", 0x0, "t", 0x0, "a", 0x0, "c", 0x0, "h", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BE@JNKHMKGH@?$AAO?$AAT?$AAG?$AAA?$AAt?$AAt?$AAa?$AAc?$AAh?$AA?$AA@| DCB "O"
	DCB	0x0, "T", 0x0, "G", 0x0, "A", 0x0, "t", 0x0, "t", 0x0, "a"
	DCB	0x0, "c", 0x0, "h", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DK@FDGIEPDF@?$AAF?$AAa?$AAi?$AAl?$AAu?$AAr?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAO?$AAT?$AAG?$AAU?$AAS?$AAB?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?$AN?$AA?6?$AA?$AA@| DCB "F"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, "u", 0x0, "r", 0x0, "e"
	DCB	0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "g", 0x0, "e"
	DCB	0x0, "t", 0x0, " ", 0x0, "O", 0x0, "T", 0x0, "G", 0x0, "U"
	DCB	0x0, "S", 0x0, "B", 0x0, "C", 0x0, "l", 0x0, "o", 0x0, "c"
	DCB	0x0, "k", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BI@KEGLAEOK@?$AAO?$AAT?$AAG?$AAU?$AAS?$AAB?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?$AA@| DCB "O"
	DCB	0x0, "T", 0x0, "G", 0x0, "U", 0x0, "S", 0x0, "B", 0x0, "C"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CK@HNFDCIIG@?$AAF?$AAa?$AAi?$AAl?$AAu?$AAr?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAl?$AAo?$AAa?$AAd?$AA?5?$AA?$CF?$AAs?$AA?$AN?$AA?6?$AA?$AA@| DCB "F"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, "u", 0x0, "r", 0x0, "e"
	DCB	0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "l", 0x0, "o"
	DCB	0x0, "a", 0x0, "d", 0x0, " ", 0x0, "%", 0x0, "s", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CC@PKGPLCAL@?$AAo?$AAm?$AAa?$AAp?$AA_?$AAm?$AAu?$AAs?$AAb?$AAo?$AAt?$AAg?$AA?4?$AAd?$AAl?$AAl?$AA?$AA@| DCB "o"
	DCB	0x0, "m", 0x0, "a", 0x0, "p", 0x0, "_", 0x0, "m", 0x0, "u"
	DCB	0x0, "s", 0x0, "b", 0x0, "o", 0x0, "t", 0x0, "g", 0x0, "."
	DCB	0x0, "d", 0x0, "l", 0x0, "l", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FC@NNHMAEDC@?$AAH?$AAc?$AAd?$AAP?$AAd?$AAd?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?5?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAp?$AAP?$AAd?$AAd@| DCB "H"
	DCB	0x0, "c", 0x0, "d", 0x0, "P", 0x0, "d", 0x0, "d", 0x0, "_"
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, " ", 0x0, "c"
	DCB	0x0, "a", 0x0, "n", 0x0, "n", 0x0, "o", 0x0, "t", 0x0, " "
	DCB	0x0, "a", 0x0, "l", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a"
	DCB	0x0, "t", 0x0, "e", 0x0, " ", 0x0, "p", 0x0, "P", 0x0, "d"
	DCB	0x0, "d", 0x0, "O", 0x0, "b", 0x0, "j", 0x0, "e", 0x0, "c"
	DCB	0x0, "t", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@CKJDGDBN@?$AAH?$AAc?$AAd?$AAP?$AAd?$AAd?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?$CL?$AA?$AN?$AA?6?$AA?$AA@| DCB "H"
	DCB	0x0, "c", 0x0, "d", 0x0, "P", 0x0, "d", 0x0, "d", 0x0, "_"
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "+", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  00374			 AREA	 |.text|, CODE, ARM

  00374		 |HcdPdd_Init| PROC

; 493  : {

  00374		 |$LN28@HcdPdd_Ini|
  00374	e1a0c00d	 mov         r12, sp
  00378	e92d0001	 stmdb       sp!, {r0}
  0037c	e92d5000	 stmdb       sp!, {r12, lr}
  00380	e24dd050	 sub         sp, sp, #0x50
  00384		 |$M41459|

; 494  :     SMHCDPdd *  pPddObject = malloc(sizeof(SMHCDPdd));

  00384	e3a00fa2	 mov         r0, #0xA2, 30
  00388	eb000000	 bl          malloc
  0038c	e58d0018	 str         r0, [sp, #0x18]
  00390	e59d3018	 ldr         r3, [sp, #0x18]
  00394	e58d3000	 str         r3, [sp]

; 495  :     BOOL        fRet = FALSE;

  00398	e3a03000	 mov         r3, #0
  0039c	e58d300c	 str         r3, [sp, #0xC]

; 496  :     HMODULE m_hOTGInstance;
; 497  :     LPMUSB_ATTACH_PROC lphAttachProc;
; 498  :     PHSMUSB_T pOTG;
; 499  : 
; 500  : 
; 501  :     DEBUGMSG(ZONE_FUNCTION, (TEXT("HcdPdd_Init+\r\n")));

  003a0	e59f3350	 ldr         r3, [pc, #0x350]
  003a4	e5933440	 ldr         r3, [r3, #0x440]
  003a8	e3130040	 tst         r3, #0x40
  003ac	0a000004	 beq         |$LN12@HcdPdd_Ini|
  003b0	e59f036c	 ldr         r0, [pc, #0x36C]
  003b4	eb000000	 bl          NKDbgPrintfW
  003b8	e3a03001	 mov         r3, #1
  003bc	e58d301c	 str         r3, [sp, #0x1C]
  003c0	ea000001	 b           |$LN13@HcdPdd_Ini|
  003c4		 |$LN12@HcdPdd_Ini|
  003c4	e3a03000	 mov         r3, #0
  003c8	e58d301c	 str         r3, [sp, #0x1C]
  003cc		 |$LN13@HcdPdd_Ini|

; 502  :     if (pPddObject) {

  003cc	e59d3000	 ldr         r3, [sp]
  003d0	e3530000	 cmp         r3, #0
  003d4	0a00001d	 beq         |$LN9@HcdPdd_Ini|

; 503  :         pPddObject->pvVirtualAddress = NULL;

  003d8	e59d3000	 ldr         r3, [sp]
  003dc	e2832008	 add         r2, r3, #8
  003e0	e3a03000	 mov         r3, #0
  003e4	e5823000	 str         r3, [r2]

; 504  :         InitializeCriticalSection(&pPddObject->csPdd);

  003e8	e59d3000	 ldr         r3, [sp]
  003ec	e2830f8d	 add         r0, r3, #0x8D, 30
  003f0	eb000000	 bl          InitializeCriticalSection

; 505  :         pPddObject->IsrHandle = NULL;

  003f4	e59d3000	 ldr         r3, [sp]
  003f8	e2832f92	 add         r2, r3, #0x92, 30
  003fc	e3a03000	 mov         r3, #0
  00400	e5823000	 str         r3, [r2]

; 506  :         pPddObject->hParentBusHandle = CreateBusAccessHandle((LPCWSTR)g_dwContext); 

  00404	e59f3314	 ldr         r3, [pc, #0x314]
  00408	e5930000	 ldr         r0, [r3]
  0040c	eb000000	 bl          CreateBusAccessHandle
  00410	e58d0020	 str         r0, [sp, #0x20]
  00414	e59d3000	 ldr         r3, [sp]
  00418	e2832f93	 add         r2, r3, #0x93, 30
  0041c	e59d3020	 ldr         r3, [sp, #0x20]
  00420	e5823000	 str         r3, [r2]

; 507  :         
; 508  :         fRet = InitializeMHDRC(pPddObject, (LPCWSTR)dwContext);

  00424	e59d1058	 ldr         r1, [sp, #0x58]
  00428	e59d0000	 ldr         r0, [sp]
  0042c	eb000000	 bl          InitializeMHDRC
  00430	e58d0024	 str         r0, [sp, #0x24]
  00434	e59d3024	 ldr         r3, [sp, #0x24]
  00438	e58d300c	 str         r3, [sp, #0xC]

; 509  :         if (!fRet)

  0043c	e59d300c	 ldr         r3, [sp, #0xC]
  00440	e3530000	 cmp         r3, #0
  00444	1a000000	 bne         |$LN8@HcdPdd_Ini|

; 510  :             goto END;

  00448	ea000082	 b           |$END$41219|
  0044c		 |$LN8@HcdPdd_Ini|

; 511  :     }
; 512  :     else

  0044c	ea00000b	 b           |$LN7@HcdPdd_Ini|
  00450		 |$LN9@HcdPdd_Ini|

; 513  :     {
; 514  :         DEBUGMSG(ZONE_WARNING, (TEXT("HcdPdd_Init cannot allocate pPddObject\r\n")));

  00450	e59f32a0	 ldr         r3, [pc, #0x2A0]
  00454	e5933440	 ldr         r3, [r3, #0x440]
  00458	e3130a02	 tst         r3, #2, 20
  0045c	0a000004	 beq         |$LN14@HcdPdd_Ini|
  00460	e59f02b4	 ldr         r0, [pc, #0x2B4]
  00464	eb000000	 bl          NKDbgPrintfW
  00468	e3a03001	 mov         r3, #1
  0046c	e58d3028	 str         r3, [sp, #0x28]
  00470	ea000001	 b           |$LN15@HcdPdd_Ini|
  00474		 |$LN14@HcdPdd_Ini|
  00474	e3a03000	 mov         r3, #0
  00478	e58d3028	 str         r3, [sp, #0x28]
  0047c		 |$LN15@HcdPdd_Ini|

; 515  :         goto END;

  0047c	ea000075	 b           |$END$41219|
  00480		 |$LN7@HcdPdd_Ini|

; 516  :     }
; 517  : 
; 518  : 
; 519  :    InitializeCriticalSection(&pPddObject->csDVFS);

  00480	e59d3000	 ldr         r3, [sp]
  00484	e2830e27	 add         r0, r3, #0x27, 28
  00488	eb000000	 bl          InitializeCriticalSection

; 520  : 
; 521  :     // initialize dvfs variables
; 522  :     pPddObject->bDVFSActive = FALSE;

  0048c	e59d3000	 ldr         r3, [sp]
  00490	e2832e26	 add         r2, r3, #0x26, 28
  00494	e3a03000	 mov         r3, #0
  00498	e5823000	 str         r3, [r2]

; 523  :     pPddObject->nActiveDmaCount = 0;

  0049c	e59d3000	 ldr         r3, [sp]
  004a0	e2832f99	 add         r2, r3, #0x99, 30
  004a4	e3a03000	 mov         r3, #0
  004a8	e5823000	 str         r3, [r2]

; 524  :     pPddObject->hDVFSAckEvent = NULL;

  004ac	e59d3000	 ldr         r3, [sp]
  004b0	e2832f9a	 add         r2, r3, #0x9A, 30
  004b4	e3a03000	 mov         r3, #0
  004b8	e5823000	 str         r3, [r2]

; 525  :     pPddObject->hDVFSActivityEvent = NULL;    

  004bc	e59d3000	 ldr         r3, [sp]
  004c0	e2832f9b	 add         r2, r3, #0x9B, 30
  004c4	e3a03000	 mov         r3, #0
  004c8	e5823000	 str         r3, [r2]

; 526  : 
; 527  :     // Now we need to register for the OTG to acknowledge it is ready.
; 528  :     // Get the OTG module handle
; 529  :     m_hOTGInstance = GetModuleHandle(OTG_DRIVER);

  004cc	e59f0244	 ldr         r0, [pc, #0x244]
  004d0	eb000000	 bl          GetModuleHandleW
  004d4	e58d002c	 str         r0, [sp, #0x2C]
  004d8	e59d302c	 ldr         r3, [sp, #0x2C]
  004dc	e58d3010	 str         r3, [sp, #0x10]

; 530  :     if (m_hOTGInstance == NULL)

  004e0	e59d3010	 ldr         r3, [sp, #0x10]
  004e4	e3530000	 cmp         r3, #0
  004e8	1a00000c	 bne         |$LN6@HcdPdd_Ini|

; 531  :     {
; 532  :         DEBUGMSG(ZONE_ERROR, (TEXT("Failure to load %s\r\n"), OTG_DRIVER));

  004ec	e59f3204	 ldr         r3, [pc, #0x204]
  004f0	e5933440	 ldr         r3, [r3, #0x440]
  004f4	e3130901	 tst         r3, #1, 18
  004f8	0a000005	 beq         |$LN16@HcdPdd_Ini|
  004fc	e59f1214	 ldr         r1, [pc, #0x214]
  00500	e59f020c	 ldr         r0, [pc, #0x20C]
  00504	eb000000	 bl          NKDbgPrintfW
  00508	e3a03001	 mov         r3, #1
  0050c	e58d3030	 str         r3, [sp, #0x30]
  00510	ea000001	 b           |$LN17@HcdPdd_Ini|
  00514		 |$LN16@HcdPdd_Ini|
  00514	e3a03000	 mov         r3, #0
  00518	e58d3030	 str         r3, [sp, #0x30]
  0051c		 |$LN17@HcdPdd_Ini|

; 533  :         goto END;

  0051c	ea00004d	 b           |$END$41219|
  00520		 |$LN6@HcdPdd_Ini|

; 534  :     }
; 535  : 
; 536  :     pPddObject->m_lpUSBClockProc = (LPMUSB_USBCLOCK_PROC)GetProcAddress(m_hOTGInstance, TEXT("OTGUSBClock"));

  00520	e59f11e8	 ldr         r1, [pc, #0x1E8]
  00524	e59d0010	 ldr         r0, [sp, #0x10]
  00528	eb000000	 bl          GetProcAddressW
  0052c	e58d0034	 str         r0, [sp, #0x34]
  00530	e59d3000	 ldr         r3, [sp]
  00534	e2832f96	 add         r2, r3, #0x96, 30
  00538	e59d3034	 ldr         r3, [sp, #0x34]
  0053c	e5823000	 str         r3, [r2]

; 537  :     if (pPddObject->m_lpUSBClockProc == NULL)

  00540	e59d3000	 ldr         r3, [sp]
  00544	e2833f96	 add         r3, r3, #0x96, 30
  00548	e5933000	 ldr         r3, [r3]
  0054c	e3530000	 cmp         r3, #0
  00550	1a00000b	 bne         |$LN5@HcdPdd_Ini|

; 538  :     {
; 539  :         DEBUGMSG(ZONE_ERROR, (TEXT("Failure to get OTGUSBClock\r\n")));

  00554	e59f319c	 ldr         r3, [pc, #0x19C]
  00558	e5933440	 ldr         r3, [r3, #0x440]
  0055c	e3130901	 tst         r3, #1, 18
  00560	0a000004	 beq         |$LN18@HcdPdd_Ini|
  00564	e59f01a0	 ldr         r0, [pc, #0x1A0]
  00568	eb000000	 bl          NKDbgPrintfW
  0056c	e3a03001	 mov         r3, #1
  00570	e58d3038	 str         r3, [sp, #0x38]
  00574	ea000001	 b           |$LN19@HcdPdd_Ini|
  00578		 |$LN18@HcdPdd_Ini|
  00578	e3a03000	 mov         r3, #0
  0057c	e58d3038	 str         r3, [sp, #0x38]
  00580		 |$LN19@HcdPdd_Ini|

; 540  :         goto END;

  00580	ea000034	 b           |$END$41219|
  00584		 |$LN5@HcdPdd_Ini|

; 541  :     }
; 542  : 
; 543  :     lphAttachProc = (LPMUSB_ATTACH_PROC)GetProcAddress(m_hOTGInstance, TEXT("OTGAttach"));

  00584	e59f117c	 ldr         r1, [pc, #0x17C]
  00588	e59d0010	 ldr         r0, [sp, #0x10]
  0058c	eb000000	 bl          GetProcAddressW
  00590	e58d003c	 str         r0, [sp, #0x3C]
  00594	e59d303c	 ldr         r3, [sp, #0x3C]
  00598	e58d3008	 str         r3, [sp, #8]

; 544  :     if (lphAttachProc == NULL)

  0059c	e59d3008	 ldr         r3, [sp, #8]
  005a0	e3530000	 cmp         r3, #0
  005a4	1a00000b	 bne         |$LN4@HcdPdd_Ini|

; 545  :     {
; 546  :         DEBUGMSG(ZONE_ERROR, (TEXT("Failure to get OTGAttach\r\n")));

  005a8	e59f3148	 ldr         r3, [pc, #0x148]
  005ac	e5933440	 ldr         r3, [r3, #0x440]
  005b0	e3130901	 tst         r3, #1, 18
  005b4	0a000004	 beq         |$LN20@HcdPdd_Ini|
  005b8	e59f0144	 ldr         r0, [pc, #0x144]
  005bc	eb000000	 bl          NKDbgPrintfW
  005c0	e3a03001	 mov         r3, #1
  005c4	e58d3040	 str         r3, [sp, #0x40]
  005c8	ea000001	 b           |$LN21@HcdPdd_Ini|
  005cc		 |$LN20@HcdPdd_Ini|
  005cc	e3a03000	 mov         r3, #0
  005d0	e58d3040	 str         r3, [sp, #0x40]
  005d4		 |$LN21@HcdPdd_Ini|

; 547  :         goto END;

  005d4	ea00001f	 b           |$END$41219|
  005d8		 |$LN4@HcdPdd_Ini|

; 548  :     }
; 549  : 
; 550  :     fRet = (*lphAttachProc)(&gc_MUsbFuncs, HOST_MODE, (LPLPVOID)&pOTG);

  005d8	e28d2004	 add         r2, sp, #4
  005dc	e3a01002	 mov         r1, #2
  005e0	e59f0118	 ldr         r0, [pc, #0x118]
  005e4	e59d3008	 ldr         r3, [sp, #8]
  005e8	e1a0e00f	 mov         lr, pc
  005ec	e12fff13	 bx          r3
  005f0	e58d0044	 str         r0, [sp, #0x44]
  005f4	e59d3044	 ldr         r3, [sp, #0x44]
  005f8	e58d300c	 str         r3, [sp, #0xC]

; 551  :     if (fRet == FALSE)

  005fc	e59d300c	 ldr         r3, [sp, #0xC]
  00600	e3530000	 cmp         r3, #0
  00604	1a00000b	 bne         |$LN3@HcdPdd_Ini|

; 552  :     {
; 553  :         DEBUGMSG(ZONE_ERROR, (TEXT("Error in performing the attach procedure\r\n")));

  00608	e59f30e8	 ldr         r3, [pc, #0xE8]
  0060c	e5933440	 ldr         r3, [r3, #0x440]
  00610	e3130901	 tst         r3, #1, 18
  00614	0a000004	 beq         |$LN22@HcdPdd_Ini|
  00618	e59f00dc	 ldr         r0, [pc, #0xDC]
  0061c	eb000000	 bl          NKDbgPrintfW
  00620	e3a03001	 mov         r3, #1
  00624	e58d3048	 str         r3, [sp, #0x48]
  00628	ea000001	 b           |$LN23@HcdPdd_Ini|
  0062c		 |$LN22@HcdPdd_Ini|
  0062c	e3a03000	 mov         r3, #0
  00630	e58d3048	 str         r3, [sp, #0x48]
  00634		 |$LN23@HcdPdd_Ini|

; 554  :         goto END;

  00634	ea000007	 b           |$END$41219|
  00638		 |$LN3@HcdPdd_Ini|

; 555  :     }
; 556  : 
; 557  :     pOTG->pContext[HOST_MODE-1] = pPddObject;

  00638	e59d3004	 ldr         r3, [sp, #4]
  0063c	e2832014	 add         r2, r3, #0x14
  00640	e59d3000	 ldr         r3, [sp]
  00644	e5823000	 str         r3, [r2]

; 558  : 
; 559  :     SetEvent(pOTG->hReadyEvents[HOST_MODE-1]);

  00648	e59d3004	 ldr         r3, [sp, #4]
  0064c	e2833004	 add         r3, r3, #4
  00650	e5930000	 ldr         r0, [r3]
  00654	eb000000	 bl          SetEvent
  00658		 |$END$41219|

; 560  : END:
; 561  :     if(!fRet)

  00658	e59d300c	 ldr         r3, [sp, #0xC]
  0065c	e3530000	 cmp         r3, #0
  00660	1a000012	 bne         |$LN2@HcdPdd_Ini|

; 562  :     {
; 563  :         if (pPddObject && pPddObject->hParentBusHandle)

  00664	e59d3000	 ldr         r3, [sp]
  00668	e3530000	 cmp         r3, #0
  0066c	0a000008	 beq         |$LN1@HcdPdd_Ini|
  00670	e59d3000	 ldr         r3, [sp]
  00674	e2833f93	 add         r3, r3, #0x93, 30
  00678	e5933000	 ldr         r3, [r3]
  0067c	e3530000	 cmp         r3, #0
  00680	0a000003	 beq         |$LN1@HcdPdd_Ini|

; 564  :              CloseBusAccessHandle(pPddObject->hParentBusHandle);

  00684	e59d3000	 ldr         r3, [sp]
  00688	e2833f93	 add         r3, r3, #0x93, 30
  0068c	e5930000	 ldr         r0, [r3]
  00690	eb000000	 bl          CloseBusAccessHandle
  00694		 |$LN1@HcdPdd_Ini|

; 565  :             
; 566  :         DeleteCriticalSection(&pPddObject->csPdd);

  00694	e59d3000	 ldr         r3, [sp]
  00698	e2830f8d	 add         r0, r3, #0x8D, 30
  0069c	eb000000	 bl          DeleteCriticalSection

; 567  :         free(pPddObject);

  006a0	e59d0000	 ldr         r0, [sp]
  006a4	eb000000	 bl          free

; 568  :         pPddObject = NULL;

  006a8	e3a03000	 mov         r3, #0
  006ac	e58d3000	 str         r3, [sp]
  006b0		 |$LN2@HcdPdd_Ini|

; 569  :     }
; 570  :     
; 571  :     DEBUGMSG(ZONE_FUNCTION, (TEXT("HcdPdd_Init-\r\n")));

  006b0	e59f3040	 ldr         r3, [pc, #0x40]
  006b4	e5933440	 ldr         r3, [r3, #0x440]
  006b8	e3130040	 tst         r3, #0x40
  006bc	0a000004	 beq         |$LN24@HcdPdd_Ini|
  006c0	e59f002c	 ldr         r0, [pc, #0x2C]
  006c4	eb000000	 bl          NKDbgPrintfW
  006c8	e3a03001	 mov         r3, #1
  006cc	e58d304c	 str         r3, [sp, #0x4C]
  006d0	ea000001	 b           |$LN25@HcdPdd_Ini|
  006d4		 |$LN24@HcdPdd_Ini|
  006d4	e3a03000	 mov         r3, #0
  006d8	e58d304c	 str         r3, [sp, #0x4C]
  006dc		 |$LN25@HcdPdd_Ini|

; 572  :     return (DWORD)pPddObject;

  006dc	e59d3000	 ldr         r3, [sp]
  006e0	e58d3014	 str         r3, [sp, #0x14]

; 573  : }

  006e4	e59d0014	 ldr         r0, [sp, #0x14]
  006e8	e28dd050	 add         sp, sp, #0x50
  006ec	e89d6000	 ldmia       sp, {sp, lr}
  006f0	e12fff1e	 bx          lr
  006f4		 |$LN29@HcdPdd_Ini|
  006f4		 |$LN30@HcdPdd_Ini|
  006f4	00000000	 DCD         |??_C@_1BO@OMPMGKJK@?$AAH?$AAc?$AAd?$AAP?$AAd?$AAd?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?9?$AA?$AN?$AA?6?$AA?$AA@|
  006f8		 |$LN31@HcdPdd_Ini|
  006f8	00000000	 DCD         |dpCurSettings|
  006fc		 |$LN32@HcdPdd_Ini|
  006fc	00000000	 DCD         |??_C@_1FG@KIICLDGL@?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAi?$AAn?$AA?5?$AAp?$AAe?$AAr?$AAf?$AAo?$AAr?$AAm?$AAi?$AAn?$AAg?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAa?$AAt?$AAt?$AAa?$AAc?$AAh?$AA?5?$AAp@|
  00700		 |$LN33@HcdPdd_Ini|
  00700	00000000	 DCD         |gc_MUsbFuncs|
  00704		 |$LN34@HcdPdd_Ini|
  00704	00000000	 DCD         |??_C@_1DG@PIDKFHDH@?$AAF?$AAa?$AAi?$AAl?$AAu?$AAr?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAO?$AAT?$AAG?$AAA?$AAt?$AAt?$AAa?$AAc?$AAh?$AA?$AN?$AA?6?$AA?$AA@|
  00708		 |$LN35@HcdPdd_Ini|
  00708	00000000	 DCD         |??_C@_1BE@JNKHMKGH@?$AAO?$AAT?$AAG?$AAA?$AAt?$AAt?$AAa?$AAc?$AAh?$AA?$AA@|
  0070c		 |$LN36@HcdPdd_Ini|
  0070c	00000000	 DCD         |??_C@_1DK@FDGIEPDF@?$AAF?$AAa?$AAi?$AAl?$AAu?$AAr?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAO?$AAT?$AAG?$AAU?$AAS?$AAB?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?$AN?$AA?6?$AA?$AA@|
  00710		 |$LN37@HcdPdd_Ini|
  00710	00000000	 DCD         |??_C@_1BI@KEGLAEOK@?$AAO?$AAT?$AAG?$AAU?$AAS?$AAB?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?$AA@|
  00714		 |$LN38@HcdPdd_Ini|
  00714	00000000	 DCD         |??_C@_1CK@HNFDCIIG@?$AAF?$AAa?$AAi?$AAl?$AAu?$AAr?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAl?$AAo?$AAa?$AAd?$AA?5?$AA?$CF?$AAs?$AA?$AN?$AA?6?$AA?$AA@|
  00718		 |$LN39@HcdPdd_Ini|
  00718	00000000	 DCD         |??_C@_1CC@PKGPLCAL@?$AAo?$AAm?$AAa?$AAp?$AA_?$AAm?$AAu?$AAs?$AAb?$AAo?$AAt?$AAg?$AA?4?$AAd?$AAl?$AAl?$AA?$AA@|
  0071c		 |$LN40@HcdPdd_Ini|
  0071c	00000000	 DCD         |??_C@_1FC@NNHMAEDC@?$AAH?$AAc?$AAd?$AAP?$AAd?$AAd?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?5?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAp?$AAP?$AAd?$AAd@|
  00720		 |$LN41@HcdPdd_Ini|
  00720	00000000	 DCD         |g_dwContext|
  00724		 |$LN42@HcdPdd_Ini|
  00724	00000000	 DCD         |??_C@_1BO@CKJDGDBN@?$AAH?$AAc?$AAd?$AAP?$AAd?$AAd?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?$CL?$AA?$AN?$AA?6?$AA?$AA@|
  00728		 |$M41460|

			 ENDP  ; |HcdPdd_Init|

	EXPORT	|??_C@_1DE@LNAEAKE@?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAM?$AAH?$AAD?$AAR?$AAC?$AA?5?$AAs?$AAu?$AAc?$AAc?$AAe?$AAs?$AAs?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GG@HOEIJGCH@?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAM?$AAH?$AAD?$AAR?$AAC?$AA?5?$AAw?$AAi?$AAt?$AAh?$AA?5?$AAB?$AAa?$AAs?$AAe?$AA?$CI?$AA0?$AAx?$AA?$CF?$AAx?$AA?$CJ?$AA?0@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FM@GHLEONEH@?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAM?$AAH?$AAD?$AAR?$AAC?$AA?5?$AAp?$AAP?$AAd?$AAd?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$FL?$AA0?$AAx?$AA?$CF?$AAx?$AA?$FN@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BE@EKANOLAD@?$AAD?$AAV?$AAF?$AAS?$AAO?$AAr?$AAd?$AAe?$AAr?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CA@DBOEKBJB@?$AAD?$AAM?$AAA?$AA?5?$AAM?$AAo?$AAd?$AAe?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CG@KIHPOOGP@?$AAD?$AAM?$AAA?$AA?5?$AAS?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_17PKGAGD@?$AAD?$AAm?$AAa?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IO@JBDPHJFL@?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAM?$AAH?$AAD?$AAR?$AAC?$AA?3?$AAD?$AAD?$AAK?$AAR?$AAe?$AAg?$AA_?$AAG?$AAe?$AAt?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HI@GNKIDNAF@?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAM?$AAH?$AAD?$AAR?$AAC?$AA?3?$AAG?$AAe?$AAt?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AAC?$AAo?$AAn?$AAf?$AAi@| [ DATA ] ; `string'
	IMPORT	|HalFreeCommonBuffer|
	IMPORT	|HcdMdd_DestroyMemoryObject|
	IMPORT	|HcdMdd_DestroyHcdObject|
	IMPORT	|FreeIntChainHandler|
	IMPORT	|RegCloseKey|
	IMPORT	|wcsncpy|
	IMPORT	|HcdMdd_CreateHcdObject|
	IMPORT	|HcdMdd_CreateMemoryObject|
	IMPORT	|HalAllocateCommonBuffer|
	IMPORT	|RegQueryValueExW|
	IMPORT	|DDKReg_GetWindowInfo|
	IMPORT	|RegOpenKeyExW|
	IMPORT	|__rt_udiv|

  00028			 AREA	 |.pdata|, PDATA
|$T41507| DCD	|$LN41@Initialize|
	DCD	0x4001b004

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DE@LNAEAKE@?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAM?$AAH?$AAD?$AAR?$AAC?$AA?5?$AAs?$AAu?$AAc?$AAc?$AAe?$AAs?$AAs?$AA?$AN?$AA?6?$AA?$AA@| DCB "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a", 0x0, "l"
	DCB	0x0, "i", 0x0, "z", 0x0, "e", 0x0, "M", 0x0, "H", 0x0, "D"
	DCB	0x0, "R", 0x0, "C", 0x0, " ", 0x0, "s", 0x0, "u", 0x0, "c"
	DCB	0x0, "c", 0x0, "e", 0x0, "s", 0x0, "s", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GG@HOEIJGCH@?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAM?$AAH?$AAD?$AAR?$AAC?$AA?5?$AAw?$AAi?$AAt?$AAh?$AA?5?$AAB?$AAa?$AAs?$AAe?$AA?$CI?$AA0?$AAx?$AA?$CF?$AAx?$AA?$CJ?$AA?0@| DCB "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a", 0x0, "l"
	DCB	0x0, "i", 0x0, "z", 0x0, "e", 0x0, "M", 0x0, "H", 0x0, "D"
	DCB	0x0, "R", 0x0, "C", 0x0, " ", 0x0, "w", 0x0, "i", 0x0, "t"
	DCB	0x0, "h", 0x0, " ", 0x0, "B", 0x0, "a", 0x0, "s", 0x0, "e"
	DCB	0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, ")"
	DCB	0x0, ",", 0x0, " ", 0x0, "M", 0x0, "d", 0x0, "d", 0x0, "O"
	DCB	0x0, "b", 0x0, "j", 0x0, "e", 0x0, "c", 0x0, "t", 0x0, "("
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FM@GHLEONEH@?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAM?$AAH?$AAD?$AAR?$AAC?$AA?5?$AAp?$AAP?$AAd?$AAd?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$FL?$AA0?$AAx?$AA?$CF?$AAx?$AA?$FN@| DCB "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a", 0x0, "l"
	DCB	0x0, "i", 0x0, "z", 0x0, "e", 0x0, "M", 0x0, "H", 0x0, "D"
	DCB	0x0, "R", 0x0, "C", 0x0, " ", 0x0, "p", 0x0, "P", 0x0, "d"
	DCB	0x0, "d", 0x0, "O", 0x0, "b", 0x0, "j", 0x0, "e", 0x0, "c"
	DCB	0x0, "t", 0x0, "[", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x"
	DCB	0x0, "]", 0x0, ",", 0x0, " ", 0x0, "o", 0x0, "r", 0x0, "d"
	DCB	0x0, "e", 0x0, "r", 0x0, "[", 0x0, "%", 0x0, "d", 0x0, "]"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BE@EKANOLAD@?$AAD?$AAV?$AAF?$AAS?$AAO?$AAr?$AAd?$AAe?$AAr?$AA?$AA@| DCB "D"
	DCB	0x0, "V", 0x0, "F", 0x0, "S", 0x0, "O", 0x0, "r", 0x0, "d"
	DCB	0x0, "e", 0x0, "r", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CA@DBOEKBJB@?$AAD?$AAM?$AAA?$AA?5?$AAM?$AAo?$AAd?$AAe?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "D"
	DCB	0x0, "M", 0x0, "A", 0x0, " ", 0x0, "M", 0x0, "o", 0x0, "d"
	DCB	0x0, "e", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CG@KIHPOOGP@?$AAD?$AAM?$AAA?$AA?5?$AAS?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "D"
	DCB	0x0, "M", 0x0, "A", 0x0, " ", 0x0, "S", 0x0, "u", 0x0, "p"
	DCB	0x0, "p", 0x0, "o", 0x0, "r", 0x0, "t", 0x0, " ", 0x0, "="
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_17PKGAGD@?$AAD?$AAm?$AAa?$AA?$AA@| DCB "D", 0x0, "m", 0x0, "a", 0x0
	DCB	0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IO@JBDPHJFL@?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAM?$AAH?$AAD?$AAR?$AAC?$AA?3?$AAD?$AAD?$AAK?$AAR?$AAe?$AAg?$AA_?$AAG?$AAe?$AAt?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw@| DCB "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a", 0x0, "l"
	DCB	0x0, "i", 0x0, "z", 0x0, "e", 0x0, "M", 0x0, "H", 0x0, "D"
	DCB	0x0, "R", 0x0, "C", 0x0, ":", 0x0, "D", 0x0, "D", 0x0, "K"
	DCB	0x0, "R", 0x0, "e", 0x0, "g", 0x0, "_", 0x0, "G", 0x0, "e"
	DCB	0x0, "t", 0x0, "W", 0x0, "i", 0x0, "n", 0x0, "d", 0x0, "o"
	DCB	0x0, "w", 0x0, "I", 0x0, "n", 0x0, "f", 0x0, "o", 0x0, " "
	DCB	0x0, "o", 0x0, "r", 0x0, " ", 0x0, " ", 0x0, "D", 0x0, "D"
	DCB	0x0, "K", 0x0, "R", 0x0, "e", 0x0, "g", 0x0, "_", 0x0, "G"
	DCB	0x0, "e", 0x0, "t", 0x0, "W", 0x0, "i", 0x0, "n", 0x0, "d"
	DCB	0x0, "o", 0x0, "w", 0x0, "I", 0x0, "n", 0x0, "f", 0x0, "o"
	DCB	0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e"
	DCB	0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HI@GNKIDNAF@?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAM?$AAH?$AAD?$AAR?$AAC?$AA?3?$AAG?$AAe?$AAt?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AAC?$AAo?$AAn?$AAf?$AAi@| DCB "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a", 0x0, "l"
	DCB	0x0, "i", 0x0, "z", 0x0, "e", 0x0, "M", 0x0, "H", 0x0, "D"
	DCB	0x0, "R", 0x0, "C", 0x0, ":", 0x0, "G", 0x0, "e", 0x0, "t"
	DCB	0x0, "R", 0x0, "e", 0x0, "g", 0x0, "i", 0x0, "s", 0x0, "t"
	DCB	0x0, "r", 0x0, "y", 0x0, "C", 0x0, "o", 0x0, "n", 0x0, "f"
	DCB	0x0, "i", 0x0, "g", 0x0, " ", 0x0, "R", 0x0, "e", 0x0, "g"
	DCB	0x0, "O", 0x0, "p", 0x0, "e", 0x0, "n", 0x0, "K", 0x0, "e"
	DCB	0x0, "y", 0x0, "E", 0x0, "x", 0x0, "(", 0x0, "%", 0x0, "s"
	DCB	0x0, ")", 0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l"
	DCB	0x0, "e", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  00728			 AREA	 |.text|, CODE, ARM

  00728		 |InitializeMHDRC| PROC

; 203  : {     

  00728		 |$LN41@Initialize|
  00728	e1a0c00d	 mov         r12, sp
  0072c	e92d0003	 stmdb       sp!, {r0, r1}
  00730	e92d5000	 stmdb       sp!, {r12, lr}
  00734	e24ddf45	 sub         sp, sp, #0x45, 30
  00738		 |$M41504|

; 204  :     BOOL fResult = FALSE;

  00738	e3a03000	 mov         r3, #0
  0073c	e58d3084	 str         r3, [sp, #0x84]

; 205  :     LPVOID pobMem = NULL;

  00740	e3a03000	 mov         r3, #0
  00744	e58d308c	 str         r3, [sp, #0x8C]

; 206  :     LPVOID pobMHCD = NULL;

  00748	e3a03000	 mov         r3, #0
  0074c	e58d3080	 str         r3, [sp, #0x80]

; 207  :     DWORD dwHPPhysicalMemSize = 0;

  00750	e3a03000	 mov         r3, #0
  00754	e58d3088	 str         r3, [sp, #0x88]

; 208  :     HKEY    hKey;
; 209  :     DDKWINDOWINFO dwi;
; 210  : 
; 211  :     if (RegOpenKeyEx(HKEY_LOCAL_MACHINE,szDriverRegKey,0,0,&hKey)!= ERROR_SUCCESS) {

  00758	e28d307c	 add         r3, sp, #0x7C
  0075c	e58d3000	 str         r3, [sp]
  00760	e3a03000	 mov         r3, #0
  00764	e3a02000	 mov         r2, #0
  00768	e59d1120	 ldr         r1, [sp, #0x120]
  0076c	e3a0010a	 mov         r0, #0xA, 2
  00770	eb000000	 bl          RegOpenKeyExW
  00774	e58d00cc	 str         r0, [sp, #0xCC]
  00778	e59d30cc	 ldr         r3, [sp, #0xCC]
  0077c	e3530000	 cmp         r3, #0
  00780	0a00000e	 beq         |$LN20@Initialize|

; 212  :         DEBUGMSG(ZONE_ERROR,(TEXT("InitializeMHDRC:GetRegistryConfig RegOpenKeyEx(%s) failed\r\n"),
; 213  :                              szDriverRegKey));

  00784	e59f3634	 ldr         r3, [pc, #0x634]
  00788	e5933440	 ldr         r3, [r3, #0x440]
  0078c	e3130901	 tst         r3, #1, 18
  00790	0a000005	 beq         |$LN23@Initialize|
  00794	e59d1120	 ldr         r1, [sp, #0x120]
  00798	e59f0644	 ldr         r0, [pc, #0x644]
  0079c	eb000000	 bl          NKDbgPrintfW
  007a0	e3a03001	 mov         r3, #1
  007a4	e58d30d0	 str         r3, [sp, #0xD0]
  007a8	ea000001	 b           |$LN24@Initialize|
  007ac		 |$LN23@Initialize|
  007ac	e3a03000	 mov         r3, #0
  007b0	e58d30d0	 str         r3, [sp, #0xD0]
  007b4		 |$LN24@Initialize|

; 214  :         return FALSE;

  007b4	e3a03000	 mov         r3, #0
  007b8	e58d30ac	 str         r3, [sp, #0xAC]
  007bc	ea00017a	 b           |$LN21@Initialize|
  007c0		 |$LN20@Initialize|

; 215  :     }
; 216  : 
; 217  :     dwi.cbSize=sizeof(dwi);

  007c0	e3a03074	 mov         r3, #0x74
  007c4	e58d3008	 str         r3, [sp, #8]

; 218  :     if ( DDKReg_GetWindowInfo(hKey, &dwi ) !=ERROR_SUCCESS) {

  007c8	e28d1008	 add         r1, sp, #8
  007cc	e59d007c	 ldr         r0, [sp, #0x7C]
  007d0	eb000000	 bl          DDKReg_GetWindowInfo
  007d4	e58d00d4	 str         r0, [sp, #0xD4]
  007d8	e59d30d4	 ldr         r3, [sp, #0xD4]
  007dc	e3530000	 cmp         r3, #0
  007e0	0a00000b	 beq         |$LN19@Initialize|

; 219  :         DEBUGMSG(ZONE_ERROR,(TEXT("InitializeMHDRC:DDKReg_GetWindowInfo or  DDKReg_GetWindowInfo failed\r\n")));

  007e4	e59f35d4	 ldr         r3, [pc, #0x5D4]
  007e8	e5933440	 ldr         r3, [r3, #0x440]
  007ec	e3130901	 tst         r3, #1, 18
  007f0	0a000004	 beq         |$LN25@Initialize|
  007f4	e59f05e4	 ldr         r0, [pc, #0x5E4]
  007f8	eb000000	 bl          NKDbgPrintfW
  007fc	e3a03001	 mov         r3, #1
  00800	e58d30d8	 str         r3, [sp, #0xD8]
  00804	ea000001	 b           |$LN26@Initialize|
  00808		 |$LN25@Initialize|
  00808	e3a03000	 mov         r3, #0
  0080c	e58d30d8	 str         r3, [sp, #0xD8]
  00810		 |$LN26@Initialize|

; 220  :         goto InitializeMHDRC_Error;

  00810	ea000125	 b           |$InitializeMHDRC_Error$41078|
  00814		 |$LN19@Initialize|

; 221  :     }
; 222  :     
; 223  : 	fResult = ConfigureMHDRCCard(pPddObject);

  00814	e59d011c	 ldr         r0, [sp, #0x11C]
  00818	eb000000	 bl          ConfigureMHDRCCard
  0081c	e58d00dc	 str         r0, [sp, #0xDC]
  00820	e59d30dc	 ldr         r3, [sp, #0xDC]
  00824	e58d3084	 str         r3, [sp, #0x84]

; 224  :     if (!fResult) {

  00828	e59d3084	 ldr         r3, [sp, #0x84]
  0082c	e3530000	 cmp         r3, #0
  00830	1a000000	 bne         |$LN18@Initialize|

; 225  :         goto InitializeMHDRC_Error;

  00834	ea00011c	 b           |$InitializeMHDRC_Error$41078|
  00838		 |$LN18@Initialize|

; 226  :     }
; 227  : 
; 228  :     pPddObject->bDMASupport = FALSE;

  00838	e59d311c	 ldr         r3, [sp, #0x11C]
  0083c	e2832e25	 add         r2, r3, #0x25, 28
  00840	e3a03000	 mov         r3, #0
  00844	e5823000	 str         r3, [r2]

; 229  :     if ( hKey!=NULL)  {

  00848	e59d307c	 ldr         r3, [sp, #0x7C]
  0084c	e3530000	 cmp         r3, #0
  00850	0a00001a	 beq         |$LN17@Initialize|

; 230  :         DWORD dwDMA;
; 231  :         DWORD dwType;
; 232  :         DWORD dwLength = sizeof(DWORD);

  00854	e3a03004	 mov         r3, #4
  00858	e58d3094	 str         r3, [sp, #0x94]

; 233  :         if (RegQueryValueEx(hKey, HCD_DMA_SUPPORT, 0, &dwType, (PUCHAR)&dwDMA, &dwLength) == ERROR_SUCCESS)

  0085c	e28d3094	 add         r3, sp, #0x94
  00860	e58d3004	 str         r3, [sp, #4]
  00864	e28d3098	 add         r3, sp, #0x98
  00868	e58d3000	 str         r3, [sp]
  0086c	e28d3090	 add         r3, sp, #0x90
  00870	e3a02000	 mov         r2, #0
  00874	e59f1560	 ldr         r1, [pc, #0x560]
  00878	e59d007c	 ldr         r0, [sp, #0x7C]
  0087c	eb000000	 bl          RegQueryValueExW
  00880	e58d00e0	 str         r0, [sp, #0xE0]
  00884	e59d30e0	 ldr         r3, [sp, #0xE0]
  00888	e3530000	 cmp         r3, #0
  0088c	1a00000b	 bne         |$LN16@Initialize|

; 234  :             pPddObject->bDMASupport = ((dwDMA == 0)? FALSE: TRUE);

  00890	e59d3098	 ldr         r3, [sp, #0x98]
  00894	e3530000	 cmp         r3, #0
  00898	1a000002	 bne         |$LN27@Initialize|
  0089c	e3a03000	 mov         r3, #0
  008a0	e58d30e4	 str         r3, [sp, #0xE4]
  008a4	ea000001	 b           |$LN28@Initialize|
  008a8		 |$LN27@Initialize|
  008a8	e3a03001	 mov         r3, #1
  008ac	e58d30e4	 str         r3, [sp, #0xE4]
  008b0		 |$LN28@Initialize|
  008b0	e59d311c	 ldr         r3, [sp, #0x11C]
  008b4	e2832e25	 add         r2, r3, #0x25, 28
  008b8	e59d30e4	 ldr         r3, [sp, #0xE4]
  008bc	e5823000	 str         r3, [r2]
  008c0		 |$LN16@Initialize|
  008c0		 |$LN17@Initialize|

; 235  :     }
; 236  : 
; 237  :     DEBUGMSG(ZONE_VERBOSE, (TEXT("DMA Support = %d\r\n"), pPddObject->bDMASupport));

  008c0	e59f34f8	 ldr         r3, [pc, #0x4F8]
  008c4	e5933440	 ldr         r3, [r3, #0x440]
  008c8	e3130a01	 tst         r3, #1, 20
  008cc	0a000007	 beq         |$LN29@Initialize|
  008d0	e59d311c	 ldr         r3, [sp, #0x11C]
  008d4	e2833e25	 add         r3, r3, #0x25, 28
  008d8	e5931000	 ldr         r1, [r3]
  008dc	e59f04f4	 ldr         r0, [pc, #0x4F4]
  008e0	eb000000	 bl          NKDbgPrintfW
  008e4	e3a03001	 mov         r3, #1
  008e8	e58d30e8	 str         r3, [sp, #0xE8]
  008ec	ea000001	 b           |$LN30@Initialize|
  008f0		 |$LN29@Initialize|
  008f0	e3a03000	 mov         r3, #0
  008f4	e58d30e8	 str         r3, [sp, #0xE8]
  008f8		 |$LN30@Initialize|

; 238  : #if 0
; 239  :     RETAILMSG(1, (TEXT("Force DMA support to 0\r\n")));
; 240  :     pPddObject->bDMASupport = 0;
; 241  : #endif
; 242  :     pPddObject->dwDMAMode = 1;

  008f8	e59d311c	 ldr         r3, [sp, #0x11C]
  008fc	e2832f95	 add         r2, r3, #0x95, 30
  00900	e3a03001	 mov         r3, #1
  00904	e5823000	 str         r3, [r2]

; 243  :     DEBUGMSG(ZONE_VERBOSE, (TEXT("DMA Mode = %d\r\n"), pPddObject->dwDMAMode));

  00908	e59f34b0	 ldr         r3, [pc, #0x4B0]
  0090c	e5933440	 ldr         r3, [r3, #0x440]
  00910	e3130a01	 tst         r3, #1, 20
  00914	0a000007	 beq         |$LN31@Initialize|
  00918	e59d311c	 ldr         r3, [sp, #0x11C]
  0091c	e2833f95	 add         r3, r3, #0x95, 30
  00920	e5931000	 ldr         r1, [r3]
  00924	e59f04a8	 ldr         r0, [pc, #0x4A8]
  00928	eb000000	 bl          NKDbgPrintfW
  0092c	e3a03001	 mov         r3, #1
  00930	e58d30ec	 str         r3, [sp, #0xEC]
  00934	ea000001	 b           |$LN32@Initialize|
  00938		 |$LN31@Initialize|
  00938	e3a03000	 mov         r3, #0
  0093c	e58d30ec	 str         r3, [sp, #0xEC]
  00940		 |$LN32@Initialize|

; 244  : 
; 245  : 
; 246  :     pPddObject->nDVFSOrder = 150;

  00940	e59d311c	 ldr         r3, [sp, #0x11C]
  00944	e2832f97	 add         r2, r3, #0x97, 30
  00948	e3a03096	 mov         r3, #0x96
  0094c	e5823000	 str         r3, [r2]

; 247  :     if ( hKey!=NULL)  {

  00950	e59d307c	 ldr         r3, [sp, #0x7C]
  00954	e3530000	 cmp         r3, #0
  00958	0a000017	 beq         |$LN15@Initialize|

; 248  :         DWORD dwDVFSOrder = 0;

  0095c	e3a03000	 mov         r3, #0
  00960	e58d30a4	 str         r3, [sp, #0xA4]

; 249  :         DWORD dwType;
; 250  :         DWORD dwLength = sizeof(DWORD);

  00964	e3a03004	 mov         r3, #4
  00968	e58d30a0	 str         r3, [sp, #0xA0]

; 251  :         if (RegQueryValueEx(hKey, HCD_DVFS_ORDER, 0, &dwType, (PUCHAR)&dwDVFSOrder, &dwLength) == ERROR_SUCCESS)

  0096c	e28d30a0	 add         r3, sp, #0xA0
  00970	e58d3004	 str         r3, [sp, #4]
  00974	e28d30a4	 add         r3, sp, #0xA4
  00978	e58d3000	 str         r3, [sp]
  0097c	e28d309c	 add         r3, sp, #0x9C
  00980	e3a02000	 mov         r2, #0
  00984	e59f1444	 ldr         r1, [pc, #0x444]
  00988	e59d007c	 ldr         r0, [sp, #0x7C]
  0098c	eb000000	 bl          RegQueryValueExW
  00990	e58d00f0	 str         r0, [sp, #0xF0]
  00994	e59d30f0	 ldr         r3, [sp, #0xF0]
  00998	e3530000	 cmp         r3, #0
  0099c	1a000006	 bne         |$LN14@Initialize|

; 252  :             if (dwDVFSOrder != 0)

  009a0	e59d30a4	 ldr         r3, [sp, #0xA4]
  009a4	e3530000	 cmp         r3, #0
  009a8	0a000003	 beq         |$LN13@Initialize|

; 253  :                 pPddObject->nDVFSOrder = dwDVFSOrder;

  009ac	e59d311c	 ldr         r3, [sp, #0x11C]
  009b0	e2832f97	 add         r2, r3, #0x97, 30
  009b4	e59d30a4	 ldr         r3, [sp, #0xA4]
  009b8	e5823000	 str         r3, [r2]
  009bc		 |$LN13@Initialize|
  009bc		 |$LN14@Initialize|
  009bc		 |$LN15@Initialize|

; 254  :     }
; 255  :     DEBUGMSG(ZONE_VERBOSE, (TEXT("InitializeMHDRC pPddObject[0x%x], order[%d]\r\n"), pPddObject, pPddObject->nDVFSOrder));

  009bc	e59f33fc	 ldr         r3, [pc, #0x3FC]
  009c0	e5933440	 ldr         r3, [r3, #0x440]
  009c4	e3130a01	 tst         r3, #1, 20
  009c8	0a000008	 beq         |$LN33@Initialize|
  009cc	e59d311c	 ldr         r3, [sp, #0x11C]
  009d0	e2833f97	 add         r3, r3, #0x97, 30
  009d4	e5932000	 ldr         r2, [r3]
  009d8	e59d111c	 ldr         r1, [sp, #0x11C]
  009dc	e59f03e8	 ldr         r0, [pc, #0x3E8]
  009e0	eb000000	 bl          NKDbgPrintfW
  009e4	e3a03001	 mov         r3, #1
  009e8	e58d30f4	 str         r3, [sp, #0xF4]
  009ec	ea000001	 b           |$LN34@Initialize|
  009f0		 |$LN33@Initialize|
  009f0	e3a03000	 mov         r3, #0
  009f4	e58d30f4	 str         r3, [sp, #0xF4]
  009f8		 |$LN34@Initialize|

; 256  : 
; 257  :     // get max current that can be supplied to devices inserted into the OTG port
; 258  :     GetRegistryMaxPower(szDriverRegKey, &dwMaxCurrent);

  009f8	e59f13c8	 ldr         r1, [pc, #0x3C8]
  009fc	e59d0120	 ldr         r0, [sp, #0x120]
  00a00	eb000000	 bl          GetRegistryMaxPower

; 259  : 
; 260  :     // The PDD can supply a buffer of contiguous physical memory here, or can let the 
; 261  :     // MDD try to allocate the memory from system RAM.  We will use the HalAllocateCommonBuffer()
; 262  :     // API to allocate the memory and bus controller physical addresses and pass this information
; 263  :     // into the MDD.
; 264  :     if (GetRegistryPhysicalMemSize(szDriverRegKey,&pPddObject->dwPhysicalMemSize)) {

  00a04	e59d311c	 ldr         r3, [sp, #0x11C]
  00a08	e283100c	 add         r1, r3, #0xC
  00a0c	e59d0120	 ldr         r0, [sp, #0x120]
  00a10	eb000000	 bl          GetRegistryPhysicalMemSize
  00a14	e58d00f8	 str         r0, [sp, #0xF8]
  00a18	e59d30f8	 ldr         r3, [sp, #0xF8]
  00a1c	e3530000	 cmp         r3, #0
  00a20	0a000024	 beq         |$LN12@Initialize|

; 265  :         // A quarter for High priority Memory.
; 266  :         dwHPPhysicalMemSize = pPddObject->dwPhysicalMemSize/4;

  00a24	e59d311c	 ldr         r3, [sp, #0x11C]
  00a28	e283300c	 add         r3, r3, #0xC
  00a2c	e5931000	 ldr         r1, [r3]
  00a30	e3a00004	 mov         r0, #4
  00a34	eb000000	 bl          __rt_udiv
  00a38	e58d0088	 str         r0, [sp, #0x88]

; 267  :         // Align with page size.        
; 268  :         pPddObject->dwPhysicalMemSize = (pPddObject->dwPhysicalMemSize + PAGE_SIZE -1) & ~(PAGE_SIZE -1);

  00a3c	e59d311c	 ldr         r3, [sp, #0x11C]
  00a40	e283200c	 add         r2, r3, #0xC
  00a44	e3e03b0d	 mvn         r3, #0xD, 22
  00a48	e22330fb	 eor         r3, r3, #0xFB
  00a4c	e5922000	 ldr         r2, [r2]
  00a50	e5933000	 ldr         r3, [r3]
  00a54	e0823003	 add         r3, r2, r3
  00a58	e2432001	 sub         r2, r3, #1
  00a5c	e3e03b0d	 mvn         r3, #0xD, 22
  00a60	e22330fb	 eor         r3, r3, #0xFB
  00a64	e5933000	 ldr         r3, [r3]
  00a68	e2433001	 sub         r3, r3, #1
  00a6c	e1e03003	 mvn         r3, r3
  00a70	e0022003	 and         r2, r2, r3
  00a74	e59d311c	 ldr         r3, [sp, #0x11C]
  00a78	e283300c	 add         r3, r3, #0xC
  00a7c	e5832000	 str         r2, [r3]

; 269  :         dwHPPhysicalMemSize = ((dwHPPhysicalMemSize +  PAGE_SIZE -1) & ~(PAGE_SIZE -1));

  00a80	e3e03b0d	 mvn         r3, #0xD, 22
  00a84	e22330fb	 eor         r3, r3, #0xFB
  00a88	e59d2088	 ldr         r2, [sp, #0x88]
  00a8c	e5933000	 ldr         r3, [r3]
  00a90	e0823003	 add         r3, r2, r3
  00a94	e2432001	 sub         r2, r3, #1
  00a98	e3e03b0d	 mvn         r3, #0xD, 22
  00a9c	e22330fb	 eor         r3, r3, #0xFB
  00aa0	e5933000	 ldr         r3, [r3]
  00aa4	e2433001	 sub         r3, r3, #1
  00aa8	e1e03003	 mvn         r3, r3
  00aac	e0023003	 and         r3, r2, r3
  00ab0	e58d3088	 str         r3, [sp, #0x88]

; 270  :     }
; 271  :     else 

  00ab4	ea000003	 b           |$LN11@Initialize|
  00ab8		 |$LN12@Initialize|

; 272  :         pPddObject->dwPhysicalMemSize=0;

  00ab8	e59d311c	 ldr         r3, [sp, #0x11C]
  00abc	e283200c	 add         r2, r3, #0xC
  00ac0	e3a03000	 mov         r3, #0
  00ac4	e5823000	 str         r3, [r2]
  00ac8		 |$LN11@Initialize|

; 273  :     
; 274  :     if (pPddObject->dwPhysicalMemSize<gcTotalAvailablePhysicalMemory) { // Setup Minimun requirement.

  00ac8	e59d311c	 ldr         r3, [sp, #0x11C]
  00acc	e283300c	 add         r3, r3, #0xC
  00ad0	e5933000	 ldr         r3, [r3]
  00ad4	e3530802	 cmp         r3, #2, 16
  00ad8	2a000005	 bcs         |$LN10@Initialize|

; 275  :         pPddObject->dwPhysicalMemSize = gcTotalAvailablePhysicalMemory;

  00adc	e59d311c	 ldr         r3, [sp, #0x11C]
  00ae0	e283200c	 add         r2, r3, #0xC
  00ae4	e3a03802	 mov         r3, #2, 16
  00ae8	e5823000	 str         r3, [r2]

; 276  :         dwHPPhysicalMemSize = gcHighPriorityPhysicalMemory;

  00aec	e3a03902	 mov         r3, #2, 18
  00af0	e58d3088	 str         r3, [sp, #0x88]
  00af4		 |$LN10@Initialize|

; 277  :     }
; 278  : 
; 279  :     pPddObject->AdapterObject.ObjectSize = sizeof(DMA_ADAPTER_OBJECT);

  00af4	e59d311c	 ldr         r3, [sp, #0x11C]
  00af8	e2832018	 add         r2, r3, #0x18
  00afc	e3a0300c	 mov         r3, #0xC
  00b00	e1c230b0	 strh        r3, [r2]

; 280  :     pPddObject->AdapterObject.InterfaceType = dwi.dwInterfaceType;

  00b04	e59d311c	 ldr         r3, [sp, #0x11C]
  00b08	e283201c	 add         r2, r3, #0x1C
  00b0c	e59d3010	 ldr         r3, [sp, #0x10]
  00b10	e5823000	 str         r3, [r2]

; 281  :     pPddObject->AdapterObject.BusNumber = dwi.dwBusNumber;

  00b14	e59d311c	 ldr         r3, [sp, #0x11C]
  00b18	e2832020	 add         r2, r3, #0x20
  00b1c	e59d300c	 ldr         r3, [sp, #0xC]
  00b20	e5823000	 str         r3, [r2]

; 282  :     if ((pPddObject->pvVirtualAddress = HalAllocateCommonBuffer(&pPddObject->AdapterObject, pPddObject->dwPhysicalMemSize, &pPddObject->LogicalAddress, FALSE)) == NULL) {

  00b24	e3a03000	 mov         r3, #0
  00b28	e59d211c	 ldr         r2, [sp, #0x11C]
  00b2c	e2822010	 add         r2, r2, #0x10
  00b30	e59d111c	 ldr         r1, [sp, #0x11C]
  00b34	e281100c	 add         r1, r1, #0xC
  00b38	e5911000	 ldr         r1, [r1]
  00b3c	e59d011c	 ldr         r0, [sp, #0x11C]
  00b40	e2800018	 add         r0, r0, #0x18
  00b44	eb000000	 bl          HalAllocateCommonBuffer
  00b48	e58d00fc	 str         r0, [sp, #0xFC]
  00b4c	e59d311c	 ldr         r3, [sp, #0x11C]
  00b50	e2832008	 add         r2, r3, #8
  00b54	e59d30fc	 ldr         r3, [sp, #0xFC]
  00b58	e5823000	 str         r3, [r2]
  00b5c	e59d311c	 ldr         r3, [sp, #0x11C]
  00b60	e2833008	 add         r3, r3, #8
  00b64	e5933000	 ldr         r3, [r3]
  00b68	e3530000	 cmp         r3, #0
  00b6c	1a000000	 bne         |$LN9@Initialize|

; 283  :         goto InitializeMHDRC_Error;

  00b70	ea00004d	 b           |$InitializeMHDRC_Error$41078|
  00b74		 |$LN9@Initialize|

; 284  :     }
; 285  : 
; 286  : 	pobMem = HcdMdd_CreateMemoryObject(pPddObject->dwPhysicalMemSize, dwHPPhysicalMemSize, (PUCHAR) pPddObject->pvVirtualAddress, (PUCHAR) pPddObject->LogicalAddress.LowPart);

  00b74	e59d311c	 ldr         r3, [sp, #0x11C]
  00b78	e2833010	 add         r3, r3, #0x10
  00b7c	e5933000	 ldr         r3, [r3]
  00b80	e59d211c	 ldr         r2, [sp, #0x11C]
  00b84	e2822008	 add         r2, r2, #8
  00b88	e5922000	 ldr         r2, [r2]
  00b8c	e59d1088	 ldr         r1, [sp, #0x88]
  00b90	e59d011c	 ldr         r0, [sp, #0x11C]
  00b94	e280000c	 add         r0, r0, #0xC
  00b98	e5900000	 ldr         r0, [r0]
  00b9c	eb000000	 bl          HcdMdd_CreateMemoryObject
  00ba0	e58d0100	 str         r0, [sp, #0x100]
  00ba4	e59d3100	 ldr         r3, [sp, #0x100]
  00ba8	e58d308c	 str         r3, [sp, #0x8C]

; 287  :     if (!pobMem) {

  00bac	e59d308c	 ldr         r3, [sp, #0x8C]
  00bb0	e3530000	 cmp         r3, #0
  00bb4	1a000000	 bne         |$LN8@Initialize|

; 288  :         goto InitializeMHDRC_Error;

  00bb8	ea00003b	 b           |$InitializeMHDRC_Error$41078|
  00bbc		 |$LN8@Initialize|

; 289  :     }
; 290  : 
; 291  : 	pobMHCD = HcdMdd_CreateHcdObject(pPddObject, pobMem, szDriverRegKey, 0x00, 0x00);

  00bbc	e3a03000	 mov         r3, #0
  00bc0	e58d3000	 str         r3, [sp]
  00bc4	e3a03000	 mov         r3, #0
  00bc8	e59d2120	 ldr         r2, [sp, #0x120]
  00bcc	e59d108c	 ldr         r1, [sp, #0x8C]
  00bd0	e59d011c	 ldr         r0, [sp, #0x11C]
  00bd4	eb000000	 bl          HcdMdd_CreateHcdObject
  00bd8	e58d0104	 str         r0, [sp, #0x104]
  00bdc	e59d3104	 ldr         r3, [sp, #0x104]
  00be0	e58d3080	 str         r3, [sp, #0x80]

; 292  :     if (!pobMHCD) {

  00be4	e59d3080	 ldr         r3, [sp, #0x80]
  00be8	e3530000	 cmp         r3, #0
  00bec	1a000000	 bne         |$LN7@Initialize|

; 293  :         goto InitializeMHDRC_Error;

  00bf0	ea00002d	 b           |$InitializeMHDRC_Error$41078|
  00bf4		 |$LN7@Initialize|

; 294  :     }
; 295  : 
; 296  :     pPddObject->lpvMemoryObject = pobMem;

  00bf4	e59d208c	 ldr         r2, [sp, #0x8C]
  00bf8	e59d311c	 ldr         r3, [sp, #0x11C]
  00bfc	e5832000	 str         r2, [r3]

; 297  :     pPddObject->lpvMHCDMddObject = pobMHCD;

  00c00	e59d311c	 ldr         r3, [sp, #0x11C]
  00c04	e2832004	 add         r2, r3, #4
  00c08	e59d3080	 ldr         r3, [sp, #0x80]
  00c0c	e5823000	 str         r3, [r2]

; 298  :     DEBUGMSG(ZONE_VERBOSE, (TEXT("InitializeMHDRC with Base(0x%x), MddObject(0x%x)\r\n"), pPddObject, pPddObject->lpvMHCDMddObject));

  00c10	e59f31a8	 ldr         r3, [pc, #0x1A8]
  00c14	e5933440	 ldr         r3, [r3, #0x440]
  00c18	e3130a01	 tst         r3, #1, 20
  00c1c	0a000008	 beq         |$LN35@Initialize|
  00c20	e59d311c	 ldr         r3, [sp, #0x11C]
  00c24	e2833004	 add         r3, r3, #4
  00c28	e5932000	 ldr         r2, [r3]
  00c2c	e59d111c	 ldr         r1, [sp, #0x11C]
  00c30	e59f018c	 ldr         r0, [pc, #0x18C]
  00c34	eb000000	 bl          NKDbgPrintfW
  00c38	e3a03001	 mov         r3, #1
  00c3c	e58d3108	 str         r3, [sp, #0x108]
  00c40	ea000001	 b           |$LN36@Initialize|
  00c44		 |$LN35@Initialize|
  00c44	e3a03000	 mov         r3, #0
  00c48	e58d3108	 str         r3, [sp, #0x108]
  00c4c		 |$LN36@Initialize|

; 299  :     _tcsncpy(pPddObject->szDriverRegKey, szDriverRegKey, MAX_PATH);    

  00c4c	e3a02f41	 mov         r2, #0x41, 30
  00c50	e59d1120	 ldr         r1, [sp, #0x120]
  00c54	e59d311c	 ldr         r3, [sp, #0x11C]
  00c58	e2830024	 add         r0, r3, #0x24
  00c5c	eb000000	 bl          wcsncpy

; 300  :     
; 301  :     if ( hKey!=NULL)  {

  00c60	e59d307c	 ldr         r3, [sp, #0x7C]
  00c64	e3530000	 cmp         r3, #0
  00c68	0a000001	 beq         |$LN6@Initialize|

; 302  :         RegCloseKey(hKey);

  00c6c	e59d007c	 ldr         r0, [sp, #0x7C]
  00c70	eb000000	 bl          RegCloseKey
  00c74		 |$LN6@Initialize|

; 303  :     }
; 304  : 
; 305  :     DEBUGMSG(ZONE_VERBOSE, (TEXT("InitializeMHDRC success\r\n")));

  00c74	e59f3144	 ldr         r3, [pc, #0x144]
  00c78	e5933440	 ldr         r3, [r3, #0x440]
  00c7c	e3130a01	 tst         r3, #1, 20
  00c80	0a000004	 beq         |$LN37@Initialize|
  00c84	e59f0130	 ldr         r0, [pc, #0x130]
  00c88	eb000000	 bl          NKDbgPrintfW
  00c8c	e3a03001	 mov         r3, #1
  00c90	e58d310c	 str         r3, [sp, #0x10C]
  00c94	ea000001	 b           |$LN38@Initialize|
  00c98		 |$LN37@Initialize|
  00c98	e3a03000	 mov         r3, #0
  00c9c	e58d310c	 str         r3, [sp, #0x10C]
  00ca0		 |$LN38@Initialize|

; 306  :     return TRUE;

  00ca0	e3a03001	 mov         r3, #1
  00ca4	e58d30ac	 str         r3, [sp, #0xAC]
  00ca8	ea00003f	 b           |$LN21@Initialize|
  00cac		 |$InitializeMHDRC_Error$41078|

; 307  : 
; 308  : InitializeMHDRC_Error:
; 309  :     if (pPddObject->IsrHandle) {

  00cac	e59d311c	 ldr         r3, [sp, #0x11C]
  00cb0	e2833f92	 add         r3, r3, #0x92, 30
  00cb4	e5933000	 ldr         r3, [r3]
  00cb8	e3530000	 cmp         r3, #0
  00cbc	0a000007	 beq         |$LN5@Initialize|

; 310  :         FreeIntChainHandler(pPddObject->IsrHandle);

  00cc0	e59d311c	 ldr         r3, [sp, #0x11C]
  00cc4	e2833f92	 add         r3, r3, #0x92, 30
  00cc8	e5930000	 ldr         r0, [r3]
  00ccc	eb000000	 bl          FreeIntChainHandler

; 311  :         pPddObject->IsrHandle = NULL;

  00cd0	e59d311c	 ldr         r3, [sp, #0x11C]
  00cd4	e2832f92	 add         r2, r3, #0x92, 30
  00cd8	e3a03000	 mov         r3, #0
  00cdc	e5823000	 str         r3, [r2]
  00ce0		 |$LN5@Initialize|

; 312  :     }
; 313  :     
; 314  :     if (pobMHCD)

  00ce0	e59d3080	 ldr         r3, [sp, #0x80]
  00ce4	e3530000	 cmp         r3, #0
  00ce8	0a000001	 beq         |$LN4@Initialize|

; 315  :         HcdMdd_DestroyHcdObject(pobMHCD);

  00cec	e59d0080	 ldr         r0, [sp, #0x80]
  00cf0	eb000000	 bl          HcdMdd_DestroyHcdObject
  00cf4		 |$LN4@Initialize|

; 316  :     if (pobMem)

  00cf4	e59d308c	 ldr         r3, [sp, #0x8C]
  00cf8	e3530000	 cmp         r3, #0
  00cfc	0a000001	 beq         |$LN3@Initialize|

; 317  :         HcdMdd_DestroyMemoryObject(pobMem);

  00d00	e59d008c	 ldr         r0, [sp, #0x8C]
  00d04	eb000000	 bl          HcdMdd_DestroyMemoryObject
  00d08		 |$LN3@Initialize|

; 318  :     if(pPddObject->pvVirtualAddress)

  00d08	e59d311c	 ldr         r3, [sp, #0x11C]
  00d0c	e2833008	 add         r3, r3, #8
  00d10	e5933000	 ldr         r3, [r3]
  00d14	e3530000	 cmp         r3, #0
  00d18	0a000011	 beq         |$LN2@Initialize|

; 319  :         HalFreeCommonBuffer(&pPddObject->AdapterObject, pPddObject->dwPhysicalMemSize, pPddObject->LogicalAddress, pPddObject->pvVirtualAddress, FALSE);

  00d1c	e3a03000	 mov         r3, #0
  00d20	e58d3004	 str         r3, [sp, #4]
  00d24	e59d311c	 ldr         r3, [sp, #0x11C]
  00d28	e2833008	 add         r3, r3, #8
  00d2c	e5933000	 ldr         r3, [r3]
  00d30	e58d3000	 str         r3, [sp]
  00d34	e59d311c	 ldr         r3, [sp, #0x11C]
  00d38	e2833010	 add         r3, r3, #0x10
  00d3c	e58d3110	 str         r3, [sp, #0x110]
  00d40	e59d3110	 ldr         r3, [sp, #0x110]
  00d44	e5932000	 ldr         r2, [r3]
  00d48	e5933004	 ldr         r3, [r3, #4]
  00d4c	e59d111c	 ldr         r1, [sp, #0x11C]
  00d50	e281100c	 add         r1, r1, #0xC
  00d54	e5911000	 ldr         r1, [r1]
  00d58	e59d011c	 ldr         r0, [sp, #0x11C]
  00d5c	e2800018	 add         r0, r0, #0x18
  00d60	eb000000	 bl          HalFreeCommonBuffer
  00d64		 |$LN2@Initialize|

; 320  : 
; 321  :     pPddObject->lpvMemoryObject = NULL;

  00d64	e59d211c	 ldr         r2, [sp, #0x11C]
  00d68	e3a03000	 mov         r3, #0
  00d6c	e5823000	 str         r3, [r2]

; 322  :     pPddObject->lpvMHCDMddObject = NULL;

  00d70	e59d311c	 ldr         r3, [sp, #0x11C]
  00d74	e2832004	 add         r2, r3, #4
  00d78	e3a03000	 mov         r3, #0
  00d7c	e5823000	 str         r3, [r2]

; 323  :     pPddObject->pvVirtualAddress = NULL;

  00d80	e59d311c	 ldr         r3, [sp, #0x11C]
  00d84	e2832008	 add         r2, r3, #8
  00d88	e3a03000	 mov         r3, #0
  00d8c	e5823000	 str         r3, [r2]

; 324  :     if ( hKey!=NULL) 

  00d90	e59d307c	 ldr         r3, [sp, #0x7C]
  00d94	e3530000	 cmp         r3, #0
  00d98	0a000001	 beq         |$LN1@Initialize|

; 325  :         RegCloseKey(hKey);

  00d9c	e59d007c	 ldr         r0, [sp, #0x7C]
  00da0	eb000000	 bl          RegCloseKey
  00da4		 |$LN1@Initialize|

; 326  : 
; 327  :     return FALSE;

  00da4	e3a03000	 mov         r3, #0
  00da8	e58d30ac	 str         r3, [sp, #0xAC]
  00dac		 |$LN21@Initialize|

; 328  : }

  00dac	e59d00ac	 ldr         r0, [sp, #0xAC]
  00db0	e28ddf45	 add         sp, sp, #0x45, 30
  00db4	e89d6000	 ldmia       sp, {sp, lr}
  00db8	e12fff1e	 bx          lr
  00dbc		 |$LN42@Initialize|
  00dbc		 |$LN43@Initialize|
  00dbc	00000000	 DCD         |??_C@_1DE@LNAEAKE@?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAM?$AAH?$AAD?$AAR?$AAC?$AA?5?$AAs?$AAu?$AAc?$AAc?$AAe?$AAs?$AAs?$AA?$AN?$AA?6?$AA?$AA@|
  00dc0		 |$LN44@Initialize|
  00dc0	00000000	 DCD         |dpCurSettings|
  00dc4		 |$LN45@Initialize|
  00dc4	00000000	 DCD         |??_C@_1GG@HOEIJGCH@?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAM?$AAH?$AAD?$AAR?$AAC?$AA?5?$AAw?$AAi?$AAt?$AAh?$AA?5?$AAB?$AAa?$AAs?$AAe?$AA?$CI?$AA0?$AAx?$AA?$CF?$AAx?$AA?$CJ?$AA?0@|
  00dc8		 |$LN46@Initialize|
  00dc8	00000000	 DCD         |dwMaxCurrent|
  00dcc		 |$LN47@Initialize|
  00dcc	00000000	 DCD         |??_C@_1FM@GHLEONEH@?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAM?$AAH?$AAD?$AAR?$AAC?$AA?5?$AAp?$AAP?$AAd?$AAd?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$FL?$AA0?$AAx?$AA?$CF?$AAx?$AA?$FN@|
  00dd0		 |$LN48@Initialize|
  00dd0	00000000	 DCD         |??_C@_1BE@EKANOLAD@?$AAD?$AAV?$AAF?$AAS?$AAO?$AAr?$AAd?$AAe?$AAr?$AA?$AA@|
  00dd4		 |$LN49@Initialize|
  00dd4	00000000	 DCD         |??_C@_1CA@DBOEKBJB@?$AAD?$AAM?$AAA?$AA?5?$AAM?$AAo?$AAd?$AAe?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  00dd8		 |$LN50@Initialize|
  00dd8	00000000	 DCD         |??_C@_1CG@KIHPOOGP@?$AAD?$AAM?$AAA?$AA?5?$AAS?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  00ddc		 |$LN51@Initialize|
  00ddc	00000000	 DCD         |??_C@_17PKGAGD@?$AAD?$AAm?$AAa?$AA?$AA@|
  00de0		 |$LN52@Initialize|
  00de0	00000000	 DCD         |??_C@_1IO@JBDPHJFL@?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAM?$AAH?$AAD?$AAR?$AAC?$AA?3?$AAD?$AAD?$AAK?$AAR?$AAe?$AAg?$AA_?$AAG?$AAe?$AAt?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw@|
  00de4		 |$LN53@Initialize|
  00de4	00000000	 DCD         |??_C@_1HI@GNKIDNAF@?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAM?$AAH?$AAD?$AAR?$AAC?$AA?3?$AAG?$AAe?$AAt?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AAC?$AAo?$AAn?$AAf?$AAi@|
  00de8		 |$M41505|

			 ENDP  ; |InitializeMHDRC|

	EXPORT	|??_C@_1CC@NPEFILDH@?$AAP?$AAh?$AAy?$AAs?$AAi?$AAc?$AAa?$AAl?$AAP?$AAa?$AAg?$AAe?$AAS?$AAi?$AAz?$AAe?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GK@FOJFGKHH@?$AA?$CB?$AAE?$AAH?$AAC?$AAD?$AA?3?$AAG?$AAe?$AAt?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AA?5?$AAR?$AAe?$AAg?$AAO?$AAp?$AAe?$AAn?$AAK@| [ DATA ] ; `string'

  00030			 AREA	 |.pdata|, PDATA
|$T41530| DCD	|$LN10@GetRegistr|
	DCD	0x40004704

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CC@NPEFILDH@?$AAP?$AAh?$AAy?$AAs?$AAi?$AAc?$AAa?$AAl?$AAP?$AAa?$AAg?$AAe?$AAS?$AAi?$AAz?$AAe?$AA?$AA@| DCB "P"
	DCB	0x0, "h", 0x0, "y", 0x0, "s", 0x0, "i", 0x0, "c", 0x0, "a"
	DCB	0x0, "l", 0x0, "P", 0x0, "a", 0x0, "g", 0x0, "e", 0x0, "S"
	DCB	0x0, "i", 0x0, "z", 0x0, "e", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GK@FOJFGKHH@?$AA?$CB?$AAE?$AAH?$AAC?$AAD?$AA?3?$AAG?$AAe?$AAt?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AA?5?$AAR?$AAe?$AAg?$AAO?$AAp?$AAe?$AAn?$AAK@| DCB "!"
	DCB	0x0, "E", 0x0, "H", 0x0, "C", 0x0, "D", 0x0, ":", 0x0, "G"
	DCB	0x0, "e", 0x0, "t", 0x0, "R", 0x0, "e", 0x0, "g", 0x0, "i"
	DCB	0x0, "s", 0x0, "t", 0x0, "r", 0x0, "y", 0x0, "C", 0x0, "o"
	DCB	0x0, "n", 0x0, "f", 0x0, "i", 0x0, "g", 0x0, " ", 0x0, "R"
	DCB	0x0, "e", 0x0, "g", 0x0, "O", 0x0, "p", 0x0, "e", 0x0, "n"
	DCB	0x0, "K", 0x0, "e", 0x0, "y", 0x0, "E", 0x0, "x", 0x0, "("
	DCB	0x0, "%", 0x0, "s", 0x0, ")", 0x0, " ", 0x0, "f", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  00de8			 AREA	 |.text|, CODE, ARM

  00de8		 |GetRegistryPhysicalMemSize| PROC

; 96   : {

  00de8		 |$LN10@GetRegistr|
  00de8	e1a0c00d	 mov         r12, sp
  00dec	e92d0003	 stmdb       sp!, {r0, r1}
  00df0	e92d5000	 stmdb       sp!, {r12, lr}
  00df4	e24dd03c	 sub         sp, sp, #0x3C
  00df8		 |$M41527|

; 97   :     HKEY hKey;
; 98   :     DWORD dwData;
; 99   :     DWORD dwSize;
; 100  :     DWORD dwType;
; 101  :     BOOL  fRet=FALSE;

  00df8	e3a03000	 mov         r3, #0
  00dfc	e58d301c	 str         r3, [sp, #0x1C]

; 102  :     DWORD dwRet;
; 103  :     // Open key
; 104  :     dwRet = RegOpenKeyEx(HKEY_LOCAL_MACHINE,RegKeyPath,0,0,&hKey);

  00e00	e28d3018	 add         r3, sp, #0x18
  00e04	e58d3000	 str         r3, [sp]
  00e08	e3a03000	 mov         r3, #0
  00e0c	e3a02000	 mov         r2, #0
  00e10	e59d1044	 ldr         r1, [sp, #0x44]
  00e14	e3a0010a	 mov         r0, #0xA, 2
  00e18	eb000000	 bl          RegOpenKeyExW
  00e1c	e58d0030	 str         r0, [sp, #0x30]
  00e20	e59d3030	 ldr         r3, [sp, #0x30]
  00e24	e58d3008	 str         r3, [sp, #8]

; 105  :     if (dwRet != ERROR_SUCCESS) {

  00e28	e59d3008	 ldr         r3, [sp, #8]
  00e2c	e3530000	 cmp         r3, #0
  00e30	0a00000f	 beq         |$LN3@GetRegistr|

; 106  :         DEBUGMSG(ZONE_ERROR,(TEXT("!EHCD:GetRegistryConfig RegOpenKeyEx(%s) failed %d\r\n"),
; 107  :                              RegKeyPath, dwRet));

  00e34	e59f30c4	 ldr         r3, [pc, #0xC4]
  00e38	e5933440	 ldr         r3, [r3, #0x440]
  00e3c	e3130901	 tst         r3, #1, 18
  00e40	0a000006	 beq         |$LN6@GetRegistr|
  00e44	e59d2008	 ldr         r2, [sp, #8]
  00e48	e59d1044	 ldr         r1, [sp, #0x44]
  00e4c	e59f00a8	 ldr         r0, [pc, #0xA8]
  00e50	eb000000	 bl          NKDbgPrintfW
  00e54	e3a03001	 mov         r3, #1
  00e58	e58d3034	 str         r3, [sp, #0x34]
  00e5c	ea000001	 b           |$LN7@GetRegistr|
  00e60		 |$LN6@GetRegistr|
  00e60	e3a03000	 mov         r3, #0
  00e64	e58d3034	 str         r3, [sp, #0x34]
  00e68		 |$LN7@GetRegistr|

; 108  :         return FALSE;

  00e68	e3a03000	 mov         r3, #0
  00e6c	e58d3024	 str         r3, [sp, #0x24]
  00e70	ea00001c	 b           |$LN4@GetRegistr|
  00e74		 |$LN3@GetRegistr|

; 109  :     }
; 110  : 
; 111  :     // Read base address, range from registry and determine IOSpace
; 112  :     dwSize = sizeof(dwData);

  00e74	e3a03004	 mov         r3, #4
  00e78	e58d3014	 str         r3, [sp, #0x14]

; 113  :     dwRet = RegQueryValueEx(hKey, REG_PHYSICAL_PAGE_SIZE, 0, &dwType, (PUCHAR)&dwData, &dwSize);

  00e7c	e28d3014	 add         r3, sp, #0x14
  00e80	e58d3004	 str         r3, [sp, #4]
  00e84	e28d3010	 add         r3, sp, #0x10
  00e88	e58d3000	 str         r3, [sp]
  00e8c	e28d300c	 add         r3, sp, #0xC
  00e90	e3a02000	 mov         r2, #0
  00e94	e59f105c	 ldr         r1, [pc, #0x5C]
  00e98	e59d0018	 ldr         r0, [sp, #0x18]
  00e9c	eb000000	 bl          RegQueryValueExW
  00ea0	e58d0038	 str         r0, [sp, #0x38]
  00ea4	e59d3038	 ldr         r3, [sp, #0x38]
  00ea8	e58d3008	 str         r3, [sp, #8]

; 114  :     if (dwRet == ERROR_SUCCESS) {

  00eac	e59d3008	 ldr         r3, [sp, #8]
  00eb0	e3530000	 cmp         r3, #0
  00eb4	1a000007	 bne         |$LN2@GetRegistr|

; 115  :         if (lpdwPhyscialMemSize)

  00eb8	e59d3048	 ldr         r3, [sp, #0x48]
  00ebc	e3530000	 cmp         r3, #0
  00ec0	0a000002	 beq         |$LN1@GetRegistr|

; 116  :             *lpdwPhyscialMemSize = dwData;

  00ec4	e59d2010	 ldr         r2, [sp, #0x10]
  00ec8	e59d3048	 ldr         r3, [sp, #0x48]
  00ecc	e5832000	 str         r2, [r3]
  00ed0		 |$LN1@GetRegistr|

; 117  :         fRet=TRUE;

  00ed0	e3a03001	 mov         r3, #1
  00ed4	e58d301c	 str         r3, [sp, #0x1C]
  00ed8		 |$LN2@GetRegistr|

; 118  :     }
; 119  :     RegCloseKey(hKey);

  00ed8	e59d0018	 ldr         r0, [sp, #0x18]
  00edc	eb000000	 bl          RegCloseKey

; 120  :     return fRet;

  00ee0	e59d301c	 ldr         r3, [sp, #0x1C]
  00ee4	e58d3024	 str         r3, [sp, #0x24]
  00ee8		 |$LN4@GetRegistr|

; 121  : }

  00ee8	e59d0024	 ldr         r0, [sp, #0x24]
  00eec	e28dd03c	 add         sp, sp, #0x3C
  00ef0	e89d6000	 ldmia       sp, {sp, lr}
  00ef4	e12fff1e	 bx          lr
  00ef8		 |$LN11@GetRegistr|
  00ef8		 |$LN12@GetRegistr|
  00ef8	00000000	 DCD         |??_C@_1CC@NPEFILDH@?$AAP?$AAh?$AAy?$AAs?$AAi?$AAc?$AAa?$AAl?$AAP?$AAa?$AAg?$AAe?$AAS?$AAi?$AAz?$AAe?$AA?$AA@|
  00efc		 |$LN13@GetRegistr|
  00efc	00000000	 DCD         |??_C@_1GK@FOJFGKHH@?$AA?$CB?$AAE?$AAH?$AAC?$AAD?$AA?3?$AAG?$AAe?$AAt?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AA?5?$AAR?$AAe?$AAg?$AAO?$AAp?$AAe?$AAn?$AAK@|
  00f00		 |$LN14@GetRegistr|
  00f00	00000000	 DCD         |dpCurSettings|
  00f04		 |$M41528|

			 ENDP  ; |GetRegistryPhysicalMemSize|

	EXPORT	|??_C@_1BG@OGBHGPNH@?$AAM?$AAa?$AAx?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@| [ DATA ] ; `string'

  00038			 AREA	 |.pdata|, PDATA
|$T41545| DCD	|$LN10@GetRegistr@2|
	DCD	0x40004704

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BG@OGBHGPNH@?$AAM?$AAa?$AAx?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@| DCB "M"
	DCB	0x0, "a", 0x0, "x", 0x0, "C", 0x0, "u", 0x0, "r", 0x0, "r"
	DCB	0x0, "e", 0x0, "n", 0x0, "t", 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  00f04			 AREA	 |.text|, CODE, ARM

  00f04		 |GetRegistryMaxPower| PROC

; 127  : {

  00f04		 |$LN10@GetRegistr@2|
  00f04	e1a0c00d	 mov         r12, sp
  00f08	e92d0003	 stmdb       sp!, {r0, r1}
  00f0c	e92d5000	 stmdb       sp!, {r12, lr}
  00f10	e24dd03c	 sub         sp, sp, #0x3C
  00f14		 |$M41542|

; 128  :     HKEY hKey;
; 129  :     DWORD dwData;
; 130  :     DWORD dwSize;
; 131  :     DWORD dwType;
; 132  :     BOOL  fRet=FALSE;

  00f14	e3a03000	 mov         r3, #0
  00f18	e58d301c	 str         r3, [sp, #0x1C]

; 133  :     DWORD dwRet;
; 134  :     // Open key
; 135  :     dwRet = RegOpenKeyEx(HKEY_LOCAL_MACHINE,RegKeyPath,0,0,&hKey);

  00f1c	e28d3018	 add         r3, sp, #0x18
  00f20	e58d3000	 str         r3, [sp]
  00f24	e3a03000	 mov         r3, #0
  00f28	e3a02000	 mov         r2, #0
  00f2c	e59d1044	 ldr         r1, [sp, #0x44]
  00f30	e3a0010a	 mov         r0, #0xA, 2
  00f34	eb000000	 bl          RegOpenKeyExW
  00f38	e58d0030	 str         r0, [sp, #0x30]
  00f3c	e59d3030	 ldr         r3, [sp, #0x30]
  00f40	e58d3008	 str         r3, [sp, #8]

; 136  :     if (dwRet != ERROR_SUCCESS) {

  00f44	e59d3008	 ldr         r3, [sp, #8]
  00f48	e3530000	 cmp         r3, #0
  00f4c	0a00000f	 beq         |$LN3@GetRegistr@2|

; 137  :         DEBUGMSG(ZONE_ERROR,(TEXT("!EHCD:GetRegistryConfig RegOpenKeyEx(%s) failed %d\r\n"),
; 138  :                              RegKeyPath, dwRet));

  00f50	e59f30c4	 ldr         r3, [pc, #0xC4]
  00f54	e5933440	 ldr         r3, [r3, #0x440]
  00f58	e3130901	 tst         r3, #1, 18
  00f5c	0a000006	 beq         |$LN6@GetRegistr@2|
  00f60	e59d2008	 ldr         r2, [sp, #8]
  00f64	e59d1044	 ldr         r1, [sp, #0x44]
  00f68	e59f00a8	 ldr         r0, [pc, #0xA8]
  00f6c	eb000000	 bl          NKDbgPrintfW
  00f70	e3a03001	 mov         r3, #1
  00f74	e58d3034	 str         r3, [sp, #0x34]
  00f78	ea000001	 b           |$LN7@GetRegistr@2|
  00f7c		 |$LN6@GetRegistr@2|
  00f7c	e3a03000	 mov         r3, #0
  00f80	e58d3034	 str         r3, [sp, #0x34]
  00f84		 |$LN7@GetRegistr@2|

; 139  :         return FALSE;

  00f84	e3a03000	 mov         r3, #0
  00f88	e58d3024	 str         r3, [sp, #0x24]
  00f8c	ea00001c	 b           |$LN4@GetRegistr@2|
  00f90		 |$LN3@GetRegistr@2|

; 140  :     }
; 141  : 
; 142  :     // Read base address, range from registry and determine IOSpace
; 143  :     dwSize = sizeof(dwData);

  00f90	e3a03004	 mov         r3, #4
  00f94	e58d3014	 str         r3, [sp, #0x14]

; 144  :     dwRet = RegQueryValueEx(hKey, REG_MAX_CURRENT, 0, &dwType, (PUCHAR)&dwData, &dwSize);

  00f98	e28d3014	 add         r3, sp, #0x14
  00f9c	e58d3004	 str         r3, [sp, #4]
  00fa0	e28d3010	 add         r3, sp, #0x10
  00fa4	e58d3000	 str         r3, [sp]
  00fa8	e28d300c	 add         r3, sp, #0xC
  00fac	e3a02000	 mov         r2, #0
  00fb0	e59f105c	 ldr         r1, [pc, #0x5C]
  00fb4	e59d0018	 ldr         r0, [sp, #0x18]
  00fb8	eb000000	 bl          RegQueryValueExW
  00fbc	e58d0038	 str         r0, [sp, #0x38]
  00fc0	e59d3038	 ldr         r3, [sp, #0x38]
  00fc4	e58d3008	 str         r3, [sp, #8]

; 145  :     if (dwRet == ERROR_SUCCESS) {

  00fc8	e59d3008	 ldr         r3, [sp, #8]
  00fcc	e3530000	 cmp         r3, #0
  00fd0	1a000007	 bne         |$LN2@GetRegistr@2|

; 146  :         if (lpdwMaxCurrent)

  00fd4	e59d3048	 ldr         r3, [sp, #0x48]
  00fd8	e3530000	 cmp         r3, #0
  00fdc	0a000002	 beq         |$LN1@GetRegistr@2|

; 147  :             *lpdwMaxCurrent = dwData;

  00fe0	e59d2010	 ldr         r2, [sp, #0x10]
  00fe4	e59d3048	 ldr         r3, [sp, #0x48]
  00fe8	e5832000	 str         r2, [r3]
  00fec		 |$LN1@GetRegistr@2|

; 148  :         fRet=TRUE;

  00fec	e3a03001	 mov         r3, #1
  00ff0	e58d301c	 str         r3, [sp, #0x1C]
  00ff4		 |$LN2@GetRegistr@2|

; 149  :     }
; 150  :     RegCloseKey(hKey);

  00ff4	e59d0018	 ldr         r0, [sp, #0x18]
  00ff8	eb000000	 bl          RegCloseKey

; 151  :     return fRet;

  00ffc	e59d301c	 ldr         r3, [sp, #0x1C]
  01000	e58d3024	 str         r3, [sp, #0x24]
  01004		 |$LN4@GetRegistr@2|

; 152  : }

  01004	e59d0024	 ldr         r0, [sp, #0x24]
  01008	e28dd03c	 add         sp, sp, #0x3C
  0100c	e89d6000	 ldmia       sp, {sp, lr}
  01010	e12fff1e	 bx          lr
  01014		 |$LN11@GetRegistr@2|
  01014		 |$LN12@GetRegistr@2|
  01014	00000000	 DCD         |??_C@_1BG@OGBHGPNH@?$AAM?$AAa?$AAx?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$AA@|
  01018		 |$LN13@GetRegistr@2|
  01018	00000000	 DCD         |??_C@_1GK@FOJFGKHH@?$AA?$CB?$AAE?$AAH?$AAC?$AAD?$AA?3?$AAG?$AAe?$AAt?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AA?5?$AAR?$AAe?$AAg?$AAO?$AAp?$AAe?$AAn?$AAK@|
  0101c		 |$LN14@GetRegistr@2|
  0101c	00000000	 DCD         |dpCurSettings|
  01020		 |$M41543|

			 ENDP  ; |GetRegistryMaxPower|

	EXPORT	|HcdPdd_CheckConfigPower|

  00040			 AREA	 |.pdata|, PDATA
|$T41557| DCD	|$LN7@HcdPdd_Che|
	DCD	0x40001704
; Function compile flags: /Odtp

  01020			 AREA	 |.text|, CODE, ARM

  01020		 |HcdPdd_CheckConfigPower| PROC

; 599  : {

  01020		 |$LN7@HcdPdd_Che|
  01020	e1a0c00d	 mov         r12, sp
  01024	e92d0007	 stmdb       sp!, {r0 - r2}
  01028	e92d5000	 stmdb       sp!, {r12, lr}
  0102c	e24dd008	 sub         sp, sp, #8
  01030		 |$M41554|

; 600  : 	UNREFERENCED_PARAMETER(bPort);
; 601  : 
; 602  :     return ((dwCfgPower + dwTotalPower) > dwMaxCurrent) ? FALSE : TRUE;

  01030	e59d2014	 ldr         r2, [sp, #0x14]
  01034	e59d3018	 ldr         r3, [sp, #0x18]
  01038	e0822003	 add         r2, r2, r3
  0103c	e59f3034	 ldr         r3, [pc, #0x34]
  01040	e5933000	 ldr         r3, [r3]
  01044	e1520003	 cmp         r2, r3
  01048	9a000002	 bls         |$LN3@HcdPdd_Che|
  0104c	e3a03000	 mov         r3, #0
  01050	e58d3004	 str         r3, [sp, #4]
  01054	ea000001	 b           |$LN4@HcdPdd_Che|
  01058		 |$LN3@HcdPdd_Che|
  01058	e3a03001	 mov         r3, #1
  0105c	e58d3004	 str         r3, [sp, #4]
  01060		 |$LN4@HcdPdd_Che|
  01060	e59d3004	 ldr         r3, [sp, #4]
  01064	e58d3000	 str         r3, [sp]

; 603  : }

  01068	e59d0000	 ldr         r0, [sp]
  0106c	e28dd008	 add         sp, sp, #8
  01070	e89d6000	 ldmia       sp, {sp, lr}
  01074	e12fff1e	 bx          lr
  01078		 |$LN8@HcdPdd_Che|
  01078		 |$LN9@HcdPdd_Che|
  01078	00000000	 DCD         |dwMaxCurrent|
  0107c		 |$M41555|

			 ENDP  ; |HcdPdd_CheckConfigPower|

	EXPORT	|HcdPdd_PowerUp|

  00048			 AREA	 |.pdata|, PDATA
|$T41564| DCD	|$LN5@HcdPdd_Pow|
	DCD	0x40000503
; Function compile flags: /Odtp

  0107c			 AREA	 |.text|, CODE, ARM

  0107c		 |HcdPdd_PowerUp| PROC

; 621  : {

  0107c		 |$LN5@HcdPdd_Pow|
  0107c	e1a0c00d	 mov         r12, sp
  01080	e92d0001	 stmdb       sp!, {r0}
  01084	e92d5000	 stmdb       sp!, {r12, lr}
  01088		 |$M41561|

; 622  : #if 0
; 623  :     SMHCDPdd * pPddObject = (SMHCDPdd *)hDeviceContext;
; 624  :     HcdMdd_PowerUp(pPddObject->lpvMHCDMddObject);
; 625  : #else
; 626  : 	UNREFERENCED_PARAMETER(hDeviceContext);
; 627  : #endif
; 628  :     return;
; 629  : }

  01088	e89d6000	 ldmia       sp, {sp, lr}
  0108c	e12fff1e	 bx          lr
  01090		 |$M41562|

			 ENDP  ; |HcdPdd_PowerUp|

	EXPORT	|HcdPdd_PowerDown|

  00050			 AREA	 |.pdata|, PDATA
|$T41569| DCD	|$LN5@HcdPdd_Pow@2|
	DCD	0x40000503
; Function compile flags: /Odtp

  01090			 AREA	 |.text|, CODE, ARM

  01090		 |HcdPdd_PowerDown| PROC

; 647  : {

  01090		 |$LN5@HcdPdd_Pow@2|
  01090	e1a0c00d	 mov         r12, sp
  01094	e92d0001	 stmdb       sp!, {r0}
  01098	e92d5000	 stmdb       sp!, {r12, lr}
  0109c		 |$M41566|

; 648  : #if 0
; 649  :     SMHCDPdd * pPddObject = (SMHCDPdd *)hDeviceContext;
; 650  :     HcdMdd_PowerDown(pPddObject->lpvMHCDMddObject);
; 651  : #else
; 652  : 	UNREFERENCED_PARAMETER(hDeviceContext);
; 653  : #endif
; 654  :     return;
; 655  : }

  0109c	e89d6000	 ldmia       sp, {sp, lr}
  010a0	e12fff1e	 bx          lr
  010a4		 |$M41567|

			 ENDP  ; |HcdPdd_PowerDown|

	EXPORT	|HcdPdd_Deinit|

  00058			 AREA	 |.pdata|, PDATA
|$T41577| DCD	|$LN8@HcdPdd_Dei|
	DCD	0x40003504
; Function compile flags: /Odtp

  010a4			 AREA	 |.text|, CODE, ARM

  010a4		 |HcdPdd_Deinit| PROC

; 673  : {

  010a4		 |$LN8@HcdPdd_Dei|
  010a4	e1a0c00d	 mov         r12, sp
  010a8	e92d0001	 stmdb       sp!, {r0}
  010ac	e92d5000	 stmdb       sp!, {r12, lr}
  010b0	e24dd01c	 sub         sp, sp, #0x1C
  010b4		 |$M41574|

; 674  :     SMHCDPdd * pPddObject = (SMHCDPdd *)hDeviceContext;

  010b4	e59d3024	 ldr         r3, [sp, #0x24]
  010b8	e58d3008	 str         r3, [sp, #8]

; 675  : 
; 676  :     if(pPddObject->lpvMHCDMddObject)

  010bc	e59d3008	 ldr         r3, [sp, #8]
  010c0	e2833004	 add         r3, r3, #4
  010c4	e5933000	 ldr         r3, [r3]
  010c8	e3530000	 cmp         r3, #0
  010cc	0a000003	 beq         |$LN3@HcdPdd_Dei|

; 677  :         HcdMdd_DestroyHcdObject(pPddObject->lpvMHCDMddObject);

  010d0	e59d3008	 ldr         r3, [sp, #8]
  010d4	e2833004	 add         r3, r3, #4
  010d8	e5930000	 ldr         r0, [r3]
  010dc	eb000000	 bl          HcdMdd_DestroyHcdObject
  010e0		 |$LN3@HcdPdd_Dei|

; 678  :     if(pPddObject->lpvMemoryObject)

  010e0	e59d3008	 ldr         r3, [sp, #8]
  010e4	e5933000	 ldr         r3, [r3]
  010e8	e3530000	 cmp         r3, #0
  010ec	0a000002	 beq         |$LN2@HcdPdd_Dei|

; 679  :         HcdMdd_DestroyMemoryObject(pPddObject->lpvMemoryObject);

  010f0	e59d3008	 ldr         r3, [sp, #8]
  010f4	e5930000	 ldr         r0, [r3]
  010f8	eb000000	 bl          HcdMdd_DestroyMemoryObject
  010fc		 |$LN2@HcdPdd_Dei|

; 680  :     if(pPddObject->pvVirtualAddress)

  010fc	e59d3008	 ldr         r3, [sp, #8]
  01100	e2833008	 add         r3, r3, #8
  01104	e5933000	 ldr         r3, [r3]
  01108	e3530000	 cmp         r3, #0
  0110c	0a000011	 beq         |$LN1@HcdPdd_Dei|

; 681  :         HalFreeCommonBuffer(&pPddObject->AdapterObject, pPddObject->dwPhysicalMemSize, pPddObject->LogicalAddress, pPddObject->pvVirtualAddress, FALSE);

  01110	e3a03000	 mov         r3, #0
  01114	e58d3004	 str         r3, [sp, #4]
  01118	e59d3008	 ldr         r3, [sp, #8]
  0111c	e2833008	 add         r3, r3, #8
  01120	e5933000	 ldr         r3, [r3]
  01124	e58d3000	 str         r3, [sp]
  01128	e59d3008	 ldr         r3, [sp, #8]
  0112c	e2833010	 add         r3, r3, #0x10
  01130	e58d3018	 str         r3, [sp, #0x18]
  01134	e59d3018	 ldr         r3, [sp, #0x18]
  01138	e5932000	 ldr         r2, [r3]
  0113c	e5933004	 ldr         r3, [r3, #4]
  01140	e59d1008	 ldr         r1, [sp, #8]
  01144	e281100c	 add         r1, r1, #0xC
  01148	e5911000	 ldr         r1, [r1]
  0114c	e59d0008	 ldr         r0, [sp, #8]
  01150	e2800018	 add         r0, r0, #0x18
  01154	eb000000	 bl          HalFreeCommonBuffer
  01158		 |$LN1@HcdPdd_Dei|

; 682  : 
; 683  :     free(pPddObject);

  01158	e59d0008	 ldr         r0, [sp, #8]
  0115c	eb000000	 bl          free

; 684  :     return TRUE;

  01160	e3a03001	 mov         r3, #1
  01164	e58d3014	 str         r3, [sp, #0x14]

; 685  :     
; 686  : }

  01168	e59d0014	 ldr         r0, [sp, #0x14]
  0116c	e28dd01c	 add         sp, sp, #0x1C
  01170	e89d6000	 ldmia       sp, {sp, lr}
  01174	e12fff1e	 bx          lr
  01178		 |$M41575|

			 ENDP  ; |HcdPdd_Deinit|

	EXPORT	|HcdPdd_Open|

  00060			 AREA	 |.pdata|, PDATA
|$T41583| DCD	|$LN5@HcdPdd_Ope|
	DCD	0x40000e04
; Function compile flags: /Odtp

  01178			 AREA	 |.text|, CODE, ARM

  01178		 |HcdPdd_Open| PROC

; 707  : {    

  01178		 |$LN5@HcdPdd_Ope|
  01178	e1a0c00d	 mov         r12, sp
  0117c	e92d0007	 stmdb       sp!, {r0 - r2}
  01180	e92d5000	 stmdb       sp!, {r12, lr}
  01184	e24dd004	 sub         sp, sp, #4
  01188		 |$M41580|

; 708  :     UnusedParameter(AccessCode);

  01188	e59d3010	 ldr         r3, [sp, #0x10]
  0118c	e58d3010	 str         r3, [sp, #0x10]

; 709  :     UnusedParameter(ShareMode);

  01190	e59d3014	 ldr         r3, [sp, #0x14]
  01194	e58d3014	 str         r3, [sp, #0x14]

; 710  : 
; 711  :     return hDeviceContext; // we can be opened, but only once!

  01198	e59d300c	 ldr         r3, [sp, #0xC]
  0119c	e58d3000	 str         r3, [sp]

; 712  : }

  011a0	e59d0000	 ldr         r0, [sp]
  011a4	e28dd004	 add         sp, sp, #4
  011a8	e89d6000	 ldmia       sp, {sp, lr}
  011ac	e12fff1e	 bx          lr
  011b0		 |$M41581|

			 ENDP  ; |HcdPdd_Open|

	EXPORT	|HcdPdd_Close|

  00068			 AREA	 |.pdata|, PDATA
|$T41589| DCD	|$LN5@HcdPdd_Clo|
	DCD	0x40000c04
; Function compile flags: /Odtp

  011b0			 AREA	 |.text|, CODE, ARM

  011b0		 |HcdPdd_Close| PROC

; 730  : {

  011b0		 |$LN5@HcdPdd_Clo|
  011b0	e1a0c00d	 mov         r12, sp
  011b4	e92d0001	 stmdb       sp!, {r0}
  011b8	e92d5000	 stmdb       sp!, {r12, lr}
  011bc	e24dd004	 sub         sp, sp, #4
  011c0		 |$M41586|

; 731  :     UnusedParameter(hOpenContext);

  011c0	e59d300c	 ldr         r3, [sp, #0xC]
  011c4	e58d300c	 str         r3, [sp, #0xC]

; 732  : 
; 733  :     return TRUE;

  011c8	e3a03001	 mov         r3, #1
  011cc	e58d3000	 str         r3, [sp]

; 734  : }

  011d0	e59d0000	 ldr         r0, [sp]
  011d4	e28dd004	 add         sp, sp, #4
  011d8	e89d6000	 ldmia       sp, {sp, lr}
  011dc	e12fff1e	 bx          lr
  011e0		 |$M41587|

			 ENDP  ; |HcdPdd_Close|

	EXPORT	|HcdPdd_Read|

  00070			 AREA	 |.pdata|, PDATA
|$T41595| DCD	|$LN5@HcdPdd_Rea|
	DCD	0x40001004
; Function compile flags: /Odtp

  011e0			 AREA	 |.text|, CODE, ARM

  011e0		 |HcdPdd_Read| PROC

; 754  : {

  011e0		 |$LN5@HcdPdd_Rea|
  011e0	e1a0c00d	 mov         r12, sp
  011e4	e92d0007	 stmdb       sp!, {r0 - r2}
  011e8	e92d5000	 stmdb       sp!, {r12, lr}
  011ec	e24dd004	 sub         sp, sp, #4
  011f0		 |$M41592|

; 755  :     UnusedParameter(hOpenContext);

  011f0	e59d300c	 ldr         r3, [sp, #0xC]
  011f4	e58d300c	 str         r3, [sp, #0xC]

; 756  :     UnusedParameter(pBuffer);

  011f8	e59d3010	 ldr         r3, [sp, #0x10]
  011fc	e58d3010	 str         r3, [sp, #0x10]

; 757  :     UnusedParameter(Count);

  01200	e59d3014	 ldr         r3, [sp, #0x14]
  01204	e58d3014	 str         r3, [sp, #0x14]

; 758  : 
; 759  :     return (DWORD)-1; // an error occured

  01208	e3e03000	 mvn         r3, #0
  0120c	e58d3000	 str         r3, [sp]

; 760  : }

  01210	e59d0000	 ldr         r0, [sp]
  01214	e28dd004	 add         sp, sp, #4
  01218	e89d6000	 ldmia       sp, {sp, lr}
  0121c	e12fff1e	 bx          lr
  01220		 |$M41593|

			 ENDP  ; |HcdPdd_Read|

	EXPORT	|HcdPdd_Write|

  00078			 AREA	 |.pdata|, PDATA
|$T41601| DCD	|$LN5@HcdPdd_Wri|
	DCD	0x40001004
; Function compile flags: /Odtp

  01220			 AREA	 |.text|, CODE, ARM

  01220		 |HcdPdd_Write| PROC

; 781  : {

  01220		 |$LN5@HcdPdd_Wri|
  01220	e1a0c00d	 mov         r12, sp
  01224	e92d0007	 stmdb       sp!, {r0 - r2}
  01228	e92d5000	 stmdb       sp!, {r12, lr}
  0122c	e24dd004	 sub         sp, sp, #4
  01230		 |$M41598|

; 782  :     UnusedParameter(hOpenContext);

  01230	e59d300c	 ldr         r3, [sp, #0xC]
  01234	e58d300c	 str         r3, [sp, #0xC]

; 783  :     UnusedParameter(pSourceBytes);

  01238	e59d3010	 ldr         r3, [sp, #0x10]
  0123c	e58d3010	 str         r3, [sp, #0x10]

; 784  :     UnusedParameter(NumberOfBytes);

  01240	e59d3014	 ldr         r3, [sp, #0x14]
  01244	e58d3014	 str         r3, [sp, #0x14]

; 785  : 
; 786  :     return (DWORD)-1;

  01248	e3e03000	 mvn         r3, #0
  0124c	e58d3000	 str         r3, [sp]

; 787  : }

  01250	e59d0000	 ldr         r0, [sp]
  01254	e28dd004	 add         sp, sp, #4
  01258	e89d6000	 ldmia       sp, {sp, lr}
  0125c	e12fff1e	 bx          lr
  01260		 |$M41599|

			 ENDP  ; |HcdPdd_Write|

	EXPORT	|HcdPdd_Seek|

  00080			 AREA	 |.pdata|, PDATA
|$T41607| DCD	|$LN5@HcdPdd_See|
	DCD	0x40001004
; Function compile flags: /Odtp

  01260			 AREA	 |.text|, CODE, ARM

  01260		 |HcdPdd_Seek| PROC

; 805  : {

  01260		 |$LN5@HcdPdd_See|
  01260	e1a0c00d	 mov         r12, sp
  01264	e92d0007	 stmdb       sp!, {r0 - r2}
  01268	e92d5000	 stmdb       sp!, {r12, lr}
  0126c	e24dd004	 sub         sp, sp, #4
  01270		 |$M41604|

; 806  :     UnusedParameter(hOpenContext);

  01270	e59d300c	 ldr         r3, [sp, #0xC]
  01274	e58d300c	 str         r3, [sp, #0xC]

; 807  :     UnusedParameter(Amount);

  01278	e59d3010	 ldr         r3, [sp, #0x10]
  0127c	e58d3010	 str         r3, [sp, #0x10]

; 808  :     UnusedParameter(Type);

  01280	e59d3014	 ldr         r3, [sp, #0x14]
  01284	e58d3014	 str         r3, [sp, #0x14]

; 809  : 
; 810  :     return (DWORD)-1;

  01288	e3e03000	 mvn         r3, #0
  0128c	e58d3000	 str         r3, [sp]

; 811  : }

  01290	e59d0000	 ldr         r0, [sp]
  01294	e28dd004	 add         sp, sp, #4
  01298	e89d6000	 ldmia       sp, {sp, lr}
  0129c	e12fff1e	 bx          lr
  012a0		 |$M41605|

			 ENDP  ; |HcdPdd_Seek|

	EXPORT	|??_C@_1EO@PFJEBOMF@?$AAH?$AAc?$AAd?$AAP?$AAd?$AAd?$AA_?$AAI?$AAO?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?5?$AAw?$AAi?$AAt?$AAh?$AA?5?$AAc?$AAo?$AAn?$AAt?$AAe?$AAx?$AAt?$AA?5?$AA?$CI?$AA0@| [ DATA ] ; `string'
	EXPORT	|HcdPdd_IOControl|

  00088			 AREA	 |.pdata|, PDATA
|$T41615| DCD	|$LN10@HcdPdd_IOC|
	DCD	0x40001a04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EO@PFJEBOMF@?$AAH?$AAc?$AAd?$AAP?$AAd?$AAd?$AA_?$AAI?$AAO?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?5?$AAw?$AAi?$AAt?$AAh?$AA?5?$AAc?$AAo?$AAn?$AAt?$AAe?$AAx?$AAt?$AA?5?$AA?$CI?$AA0@| DCB "H"
	DCB	0x0, "c", 0x0, "d", 0x0, "P", 0x0, "d", 0x0, "d", 0x0, "_"
	DCB	0x0, "I", 0x0, "O", 0x0, "C", 0x0, "o", 0x0, "n", 0x0, "t"
	DCB	0x0, "r", 0x0, "o", 0x0, "l", 0x0, " ", 0x0, "w", 0x0, "i"
	DCB	0x0, "t", 0x0, "h", 0x0, " ", 0x0, "c", 0x0, "o", 0x0, "n"
	DCB	0x0, "t", 0x0, "e", 0x0, "x", 0x0, "t", 0x0, " ", 0x0, "("
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  012a0			 AREA	 |.text|, CODE, ARM

  012a0		 |HcdPdd_IOControl| PROC

; 830  : {

  012a0		 |$LN10@HcdPdd_IOC|
  012a0	e1a0c00d	 mov         r12, sp
  012a4	e92d000f	 stmdb       sp!, {r0 - r3}
  012a8	e92d5000	 stmdb       sp!, {r12, lr}
  012ac	e24dd00c	 sub         sp, sp, #0xC
  012b0		 |$M41612|

; 831  :     BOOL rc = FALSE;

  012b0	e3a03000	 mov         r3, #0
  012b4	e58d3000	 str         r3, [sp]

; 832  : 
; 833  : 	UNREFERENCED_PARAMETER(pdwActualOut);
; 834  : 	UNREFERENCED_PARAMETER(dwLenOut);
; 835  : 	UNREFERENCED_PARAMETER(pBufOut);
; 836  : 	UNREFERENCED_PARAMETER(dwLenIn);
; 837  : 	UNREFERENCED_PARAMETER(pBufIn);
; 838  : 	UNREFERENCED_PARAMETER(context);
; 839  : 
; 840  :     DEBUGMSG(ZONE_FUNCTION, (L"HcdPdd_IOControl with context (0x%x)\r\n", context));

  012b8	e59f3044	 ldr         r3, [pc, #0x44]
  012bc	e5933440	 ldr         r3, [r3, #0x440]
  012c0	e3130040	 tst         r3, #0x40
  012c4	0a000005	 beq         |$LN6@HcdPdd_IOC|
  012c8	e59d1014	 ldr         r1, [sp, #0x14]
  012cc	e59f002c	 ldr         r0, [pc, #0x2C]
  012d0	eb000000	 bl          NKDbgPrintfW
  012d4	e3a03001	 mov         r3, #1
  012d8	e58d3008	 str         r3, [sp, #8]
  012dc	ea000001	 b           |$LN7@HcdPdd_IOC|
  012e0		 |$LN6@HcdPdd_IOC|
  012e0	e3a03000	 mov         r3, #0
  012e4	e58d3008	 str         r3, [sp, #8]
  012e8		 |$LN7@HcdPdd_IOC|

; 841  : 
; 842  :     switch (dwCode)
; 843  :         {
; 844  :         case IOCTL_DVFS_OPPNOTIFY:
; 845  :             break;
; 846  : #if 0        
; 847  :         case IOCTL_DVFS_OPMNOTIFY:
; 848  :         {
; 849  :             IOCTL_DVFS_OPMNOTIFY_IN *pData =(IOCTL_DVFS_OPMNOTIFY_IN*)pBufIn;
; 850  :             
; 851  :             DEBUGMSG(ZONE_FUNCTION, (L"HcdPdd: received dvfs notification (%d)\r\n",
; 852  :                 pData->notification)
; 853  :                 );
; 854  :             
; 855  :             // this operation should be atomic to handle a corner case
; 856  :             EnterCriticalSection(&pPdd->csDVFS);
; 857  :             
; 858  :             // signal dvfs thread to stall SDRAM access
; 859  :             if (pData->notification == kPreNotice)
; 860  :             {
; 861  :                 pPdd->bDVFSActive = TRUE;
; 862  :                 HcdMdd_SignalExternalHub(pPdd->lpvMHCDMddObject);
; 863  :                 
; 864  :                 // check and halt dma if active
; 865  :                 //
; 866  :                 DEBUGMSG(ZONE_FUNCTION, (L"HcdPdd: Halting DMA for DVFS, "
; 867  :                     L"active dma count=%d\r\n",
; 868  :                     pPdd->nActiveDmaCount)
; 869  :                     );
; 870  :                 CheckAndHaltAllDma(pPdd, TRUE);
; 871  :                 DEBUGMSG(ZONE_FUNCTION, (L"HcdPdd: Pre-DVFS transition done\r\n"));
; 872  :             }
; 873  :             else if (pData->notification == kPostNotice)
; 874  :             {
; 875  :                 pPdd->bDVFSActive = FALSE;
; 876  :                 
; 877  :                 DEBUGMSG(ZONE_FUNCTION, (L"HcdPdd: continuing DMA for DVFS\r\n"));
; 878  :                 CheckAndHaltAllDma(pPdd, FALSE);
; 879  :                 DEBUGMSG(ZONE_FUNCTION, (L"HcdPdd: Post-DVFS transition done\r\n"));
; 880  :             }
; 881  :             LeaveCriticalSection(&pPdd->csDVFS);
; 882  :             rc = TRUE;
; 883  :         }
; 884  :             break;
; 885  : 
; 886  :         case IOCTL_DVFS_INITINFO:
; 887  :         {
; 888  :             IOCTL_DVFS_INITINFO_OUT *pInitInfo =(IOCTL_DVFS_INITINFO_OUT*)pBufOut;
; 889  :             pInitInfo->notifyMode = kAsynchronous;
; 890  :             pInitInfo->notifyOrder = pPdd->nDVFSOrder;
; 891  :             RETAILMSG(1, (TEXT("HSUSBHCD::DVFS_INITINFO return order %d\r\n"), pPdd->nDVFSOrder));
; 892  :             rc = TRUE;
; 893  :         }
; 894  :             break;
; 895  :         
; 896  :         case IOCTL_DVFS_OPMINFO:
; 897  :         {
; 898  :             IOCTL_DVFS_OPMINFO_IN *pData =(IOCTL_DVFS_OPMINFO_IN*)pBufIn;
; 899  :             CopyDVFSHandles(pPdd, pData->processId, 
; 900  :                 pData->hAckEvent, pData->hOpmEvent
; 901  :                 );
; 902  :             RETAILMSG(1, (TEXT("HSUSBHCD::DVFS_OPMINFO\r\n")));
; 903  :             rc = TRUE;
; 904  :         }
; 905  :             break;
; 906  : 
; 907  :         case IOCTL_DVFS_DETACH:
; 908  :         {
; 909  :             // close all handles
; 910  :             if (pPdd->hDVFSAckEvent != NULL)
; 911  :             {
; 912  :                 CloseHandle(pPdd->hDVFSAckEvent);
; 913  :                 pPdd->hDVFSAckEvent = NULL;
; 914  :             }
; 915  :             
; 916  :             if (pPdd->hDVFSActivityEvent!= NULL)
; 917  :             {
; 918  :                 CloseHandle(pPdd->hDVFSActivityEvent);
; 919  :                 pPdd->hDVFSActivityEvent = NULL;
; 920  :             }
; 921  :             rc = TRUE;
; 922  :         }
; 923  :             break;
; 924  : 
; 925  :         case IOCTL_DVFS_HALTMODE:
; 926  :         {
; 927  :             if (pPdd->bDVFSActive == FALSE)
; 928  :             {                
; 929  :                 IOCTL_DVFS_HALTMODE_IN *pData =(IOCTL_DVFS_HALTMODE_IN*)pBufIn;
; 930  :                 pPdd->rxHaltMode = pData->rxMode;
; 931  :                 pPdd->txHaltMode = pData->txMode;
; 932  :                 rc = TRUE;
; 933  :             }
; 934  :             break;
; 935  :         }
; 936  : #endif        
; 937  :         }
; 938  :     return rc;

  012e8	e59d3000	 ldr         r3, [sp]
  012ec	e58d3004	 str         r3, [sp, #4]

; 939  : }

  012f0	e59d0004	 ldr         r0, [sp, #4]
  012f4	e28dd00c	 add         sp, sp, #0xC
  012f8	e89d6000	 ldmia       sp, {sp, lr}
  012fc	e12fff1e	 bx          lr
  01300		 |$LN11@HcdPdd_IOC|
  01300		 |$LN12@HcdPdd_IOC|
  01300	00000000	 DCD         |??_C@_1EO@PFJEBOMF@?$AAH?$AAc?$AAd?$AAP?$AAd?$AAd?$AA_?$AAI?$AAO?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?5?$AAw?$AAi?$AAt?$AAh?$AA?5?$AAc?$AAo?$AAn?$AAt?$AAe?$AAx?$AAt?$AA?5?$AA?$CI?$AA0@|
  01304		 |$LN13@HcdPdd_IOC|
  01304	00000000	 DCD         |dpCurSettings|
  01308		 |$M41613|

			 ENDP  ; |HcdPdd_IOControl|

	EXPORT	|HcdPdd_InitiatePowerUp|

  00090			 AREA	 |.pdata|, PDATA
|$T41623| DCD	|$LN5@HcdPdd_Ini@2|
	DCD	0x40000503
; Function compile flags: /Odtp

  01308			 AREA	 |.text|, CODE, ARM

  01308		 |HcdPdd_InitiatePowerUp| PROC

; 961  : {

  01308		 |$LN5@HcdPdd_Ini@2|
  01308	e1a0c00d	 mov         r12, sp
  0130c	e92d0001	 stmdb       sp!, {r0}
  01310	e92d5000	 stmdb       sp!, {r12, lr}
  01314		 |$M41620|

; 962  : 	UNREFERENCED_PARAMETER(hDeviceContext);
; 963  : }

  01314	e89d6000	 ldmia       sp, {sp, lr}
  01318	e12fff1e	 bx          lr
  0131c		 |$M41621|

			 ENDP  ; |HcdPdd_InitiatePowerUp|

	END
