; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\OMAP3530\MUSB\MUSBHCD\MUSBMHDRC\usb2lib.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|?m_lRef@USB2lib@@0JA| [ DATA ]		; USB2lib::m_lRef
	EXPORT	|?CMASKS@USB2lib@@0PAEA| [ DATA ]	; USB2lib::CMASKS

  00000			 AREA	 |.bss|, NOINIT
|?m_lRef@USB2lib@@0JA| % 0x4				; USB2lib::m_lRef

  00000			 AREA	 |.data|, DATA
|?CMASKS@USB2lib@@0PAEA| DCB 0x1c			; USB2lib::CMASKS
	DCB	0x38
	DCB	0x70
	DCB	0xe0
	DCB	0xc1
	DCB	0x83
	DCB	0x7
	DCB	0xe
	EXPORT	|??0TransactionTrasnlate@@QAA@EEQAXPAV0@@Z| ; TransactionTrasnlate::TransactionTrasnlate

  00000			 AREA	 |.pdata|, PDATA
|$T32694| DCD	|$LN8@Transactio|
	DCD	0x40003704
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\musb\musbhcd\musbmhdrc\usb2lib.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0TransactionTrasnlate@@QAA@EEQAXPAV0@@Z| PROC ; TransactionTrasnlate::TransactionTrasnlate

; 43   : {

  00000		 |$LN8@Transactio|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d000f	 stmdb       sp!, {r0 - r3}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd008	 sub         sp, sp, #8
  00010		 |$M32691|
  00010	e5dd2014	 ldrb        r2, [sp, #0x14]
  00014	e59d3010	 ldr         r3, [sp, #0x10]
  00018	e5c32000	 strb        r2, [r3]
  0001c	e59d3010	 ldr         r3, [sp, #0x10]
  00020	e2832001	 add         r2, r3, #1
  00024	e5dd3018	 ldrb        r3, [sp, #0x18]
  00028	e5c23000	 strb        r3, [r2]
  0002c	e59d3010	 ldr         r3, [sp, #0x10]
  00030	e2832004	 add         r2, r3, #4
  00034	e59d301c	 ldr         r3, [sp, #0x1C]
  00038	e5823000	 str         r3, [r2]

; 44   :     m_pNextTT =  pNextTT;

  0003c	e59d3010	 ldr         r3, [sp, #0x10]
  00040	e283200c	 add         r2, r3, #0xC
  00044	e59d3020	 ldr         r3, [sp, #0x20]
  00048	e5823000	 str         r3, [r2]

; 45   :     m_dwThink_time =1;

  0004c	e59d3010	 ldr         r3, [sp, #0x10]
  00050	e2832008	 add         r2, r3, #8
  00054	e3a03001	 mov         r3, #1
  00058	e5823000	 str         r3, [r2]

; 46   :     for (DWORD dwIndex=0; dwIndex<MAXFRAMES; dwIndex++) {

  0005c	e3a03000	 mov         r3, #0
  00060	e58d3000	 str         r3, [sp]
  00064	ea000002	 b           |$LN3@Transactio|
  00068		 |$LN2@Transactio|
  00068	e59d3000	 ldr         r3, [sp]
  0006c	e2833001	 add         r3, r3, #1
  00070	e58d3000	 str         r3, [sp]
  00074		 |$LN3@Transactio|
  00074	e59d3000	 ldr         r3, [sp]
  00078	e3530020	 cmp         r3, #0x20
  0007c	2a000010	 bcs         |$LN1@Transactio|

; 47   :         TT_frame[dwIndex]=NULL;

  00080	e59d3010	 ldr         r3, [sp, #0x10]
  00084	e2831010	 add         r1, r3, #0x10
  00088	e59d2000	 ldr         r2, [sp]
  0008c	e3a03004	 mov         r3, #4
  00090	e0030392	 mul         r3, r2, r3
  00094	e0812003	 add         r2, r1, r3
  00098	e3a03000	 mov         r3, #0
  0009c	e5823000	 str         r3, [r2]

; 48   :         frame_budget[dwIndex].time_used=0;;

  000a0	e59d3010	 ldr         r3, [sp, #0x10]
  000a4	e2831090	 add         r1, r3, #0x90
  000a8	e59d2000	 ldr         r2, [sp]
  000ac	e3a03004	 mov         r3, #4
  000b0	e0030392	 mul         r3, r2, r3
  000b4	e0812003	 add         r2, r1, r3
  000b8	e3a03000	 mov         r3, #0
  000bc	e5823000	 str         r3, [r2]
  000c0	eaffffe8	 b           |$LN2@Transactio|
  000c4		 |$LN1@Transactio|

; 49   :     }
; 50   : }

  000c4	e59d3010	 ldr         r3, [sp, #0x10]
  000c8	e58d3004	 str         r3, [sp, #4]
  000cc	e59d0004	 ldr         r0, [sp, #4]
  000d0	e28dd008	 add         sp, sp, #8
  000d4	e89d6000	 ldmia       sp, {sp, lr}
  000d8	e12fff1e	 bx          lr
  000dc		 |$M32692|

			 ENDP  ; |??0TransactionTrasnlate@@QAA@EEQAXPAV0@@Z|, TransactionTrasnlate::TransactionTrasnlate

	EXPORT	|??1TransactionTrasnlate@@QAA@XZ|	; TransactionTrasnlate::~TransactionTrasnlate
	IMPORT	|??3@YAXPAX@Z|				; operator delete

  00008			 AREA	 |.pdata|, PDATA
|$T32700| DCD	|$LN9@Transactio@2|
	DCD	0x40002d04
; Function compile flags: /Odtp

  000dc			 AREA	 |.text|, CODE, ARM

  000dc		 |??1TransactionTrasnlate@@QAA@XZ| PROC	; TransactionTrasnlate::~TransactionTrasnlate

; 52   : {

  000dc		 |$LN9@Transactio@2|
  000dc	e1a0c00d	 mov         r12, sp
  000e0	e92d0001	 stmdb       sp!, {r0}
  000e4	e92d5000	 stmdb       sp!, {r12, lr}
  000e8	e24dd010	 sub         sp, sp, #0x10
  000ec		 |$M32697|

; 53   :     for (DWORD dwIndex=0; dwIndex<MAXFRAMES; dwIndex++) {

  000ec	e3a03000	 mov         r3, #0
  000f0	e58d3000	 str         r3, [sp]
  000f4	ea000002	 b           |$LN4@Transactio@2|
  000f8		 |$LN3@Transactio@2|
  000f8	e59d3000	 ldr         r3, [sp]
  000fc	e2833001	 add         r3, r3, #1
  00100	e58d3000	 str         r3, [sp]
  00104		 |$LN4@Transactio@2|
  00104	e59d3000	 ldr         r3, [sp]
  00108	e3530020	 cmp         r3, #0x20
  0010c	2a00001c	 bcs         |$LN2@Transactio@2|

; 54   :         LPEndpointBugetList pCurList = TT_frame[dwIndex];

  00110	e59d3018	 ldr         r3, [sp, #0x18]
  00114	e2831010	 add         r1, r3, #0x10
  00118	e59d2000	 ldr         r2, [sp]
  0011c	e3a03004	 mov         r3, #4
  00120	e0030392	 mul         r3, r2, r3
  00124	e0813003	 add         r3, r1, r3
  00128	e5933000	 ldr         r3, [r3]
  0012c	e58d3004	 str         r3, [sp, #4]

; 55   :         if (pCurList!=NULL) {

  00130	e59d3004	 ldr         r3, [sp, #4]
  00134	e3530000	 cmp         r3, #0
  00138	0a000008	 beq         |$LN1@Transactio@2|

; 56   :             LPEndpointBugetList pNextList = pCurList ->pNextEndpt;

  0013c	e59d3004	 ldr         r3, [sp, #4]
  00140	e5933000	 ldr         r3, [r3]
  00144	e58d3008	 str         r3, [sp, #8]

; 57   :             delete pCurList;

  00148	e59d3004	 ldr         r3, [sp, #4]
  0014c	e58d300c	 str         r3, [sp, #0xC]
  00150	e59d000c	 ldr         r0, [sp, #0xC]
  00154	eb000000	 bl          |??3@YAXPAX@Z|

; 58   :             pCurList = pNextList;

  00158	e59d3008	 ldr         r3, [sp, #8]
  0015c	e58d3004	 str         r3, [sp, #4]
  00160		 |$LN1@Transactio@2|

; 59   :         }
; 60   :         TT_frame[dwIndex]=NULL;

  00160	e59d3018	 ldr         r3, [sp, #0x18]
  00164	e2831010	 add         r1, r3, #0x10
  00168	e59d2000	 ldr         r2, [sp]
  0016c	e3a03004	 mov         r3, #4
  00170	e0030392	 mul         r3, r2, r3
  00174	e0812003	 add         r2, r1, r3
  00178	e3a03000	 mov         r3, #0
  0017c	e5823000	 str         r3, [r2]
  00180	eaffffdc	 b           |$LN3@Transactio@2|
  00184		 |$LN2@Transactio@2|

; 61   :     }
; 62   : };

  00184	e28dd010	 add         sp, sp, #0x10
  00188	e89d6000	 ldmia       sp, {sp, lr}
  0018c	e12fff1e	 bx          lr
  00190		 |$M32698|

			 ENDP  ; |??1TransactionTrasnlate@@QAA@XZ|, TransactionTrasnlate::~TransactionTrasnlate

	EXPORT	|?RemoveEp@TransactionTrasnlate@@AAAHKPAU_EndpointBuget@@@Z| ; TransactionTrasnlate::RemoveEp
	EXPORT	|?InsertEp@TransactionTrasnlate@@AAAHKPAU_EndpointBuget@@@Z| ; TransactionTrasnlate::InsertEp
	EXPORT	|?FindBestTimeSlot@TransactionTrasnlate@@AAAHGGPAU_ENDPOINTBUGETLIST@@PAK@Z| ; TransactionTrasnlate::FindBestTimeSlot
	EXPORT	|??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1LO@DIADDDPC@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@| [ DATA ] ; `string'
	EXPORT	|?AddedEp@TransactionTrasnlate@@QAAHPAU_EndpointBuget@@@Z| ; TransactionTrasnlate::AddedEp
	IMPORT	|NKDbgPrintfW|

  00010			 AREA	 |.pdata|, PDATA
|$T32719| DCD	|$LN45@AddedEp|
	DCD	0x40017204

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@| DCB "%"
	DCB	0x0, "s", 0x0, ":", 0x0, " ", 0x0, "D", 0x0, "E", 0x0, "B"
	DCB	0x0, "U", 0x0, "G", 0x0, "C", 0x0, "H", 0x0, "K", 0x0, " "
	DCB	0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "i", 0x0, "n", 0x0, " ", 0x0, "f", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, " ", 0x0, "%", 0x0, "s", 0x0, " "
	DCB	0x0, "a", 0x0, "t", 0x0, " ", 0x0, "l", 0x0, "i", 0x0, "n"
	DCB	0x0, "e", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@| DCB "U", 0x0
	DCB	"n", 0x0, "k", 0x0, "n", 0x0, "o", 0x0, "w", 0x0, "n", 0x0
	DCB	0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1LO@DIADDDPC@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@| DCB "C"
	DCB	0x0, ":", 0x0, "\\", 0x0, "W", 0x0, "I", 0x0, "N", 0x0, "C"
	DCB	0x0, "E", 0x0, "6", 0x0, "0", 0x0, "0", 0x0, "\\", 0x0, "P"
	DCB	0x0, "L", 0x0, "A", 0x0, "T", 0x0, "F", 0x0, "O", 0x0, "R"
	DCB	0x0, "M", 0x0, "\\", 0x0, "C", 0x0, "O", 0x0, "M", 0x0, "M"
	DCB	0x0, "O", 0x0, "N", 0x0, "\\", 0x0, "S", 0x0, "R", 0x0, "C"
	DCB	0x0, "\\", 0x0, "S", 0x0, "O", 0x0, "C", 0x0, "\\", 0x0, "C"
	DCB	0x0, "O", 0x0, "M", 0x0, "M", 0x0, "O", 0x0, "N", 0x0, "_"
	DCB	0x0, "T", 0x0, "I", 0x0, "_", 0x0, "V", 0x0, "1", 0x0, "\\"
	DCB	0x0, "O", 0x0, "M", 0x0, "A", 0x0, "P", 0x0, "3", 0x0, "5"
	DCB	0x0, "3", 0x0, "0", 0x0, "\\", 0x0, "M", 0x0, "U", 0x0, "S"
	DCB	0x0, "B", 0x0, "\\", 0x0, "M", 0x0, "U", 0x0, "S", 0x0, "B"
	DCB	0x0, "H", 0x0, "C", 0x0, "D", 0x0, "\\", 0x0, "M", 0x0, "U"
	DCB	0x0, "S", 0x0, "B", 0x0, "M", 0x0, "H", 0x0, "D", 0x0, "R"
	DCB	0x0, "C", 0x0, "\\", 0x0, ".", 0x0, "\\", 0x0, "u", 0x0, "s"
	DCB	0x0, "b", 0x0, "2", 0x0, "l", 0x0, "i", 0x0, "b", 0x0, "."
	DCB	0x0, "c", 0x0, "p", 0x0, "p", 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  00190			 AREA	 |.text|, CODE, ARM

  00190		 |?AddedEp@TransactionTrasnlate@@QAAHPAU_EndpointBuget@@@Z| PROC ; TransactionTrasnlate::AddedEp

; 64   : {

  00190		 |$LN45@AddedEp|
  00190	e1a0c00d	 mov         r12, sp
  00194	e92d0003	 stmdb       sp!, {r0, r1}
  00198	e92d5000	 stmdb       sp!, {r12, lr}
  0019c	e24dd048	 sub         sp, sp, #0x48
  001a0		 |$M32716|

; 65   :     BOOL bReturn = TRUE;

  001a0	e3a03001	 mov         r3, #1
  001a4	e58d3004	 str         r3, [sp, #4]

; 66   :     if (ep) {

  001a8	e59d3054	 ldr         r3, [sp, #0x54]
  001ac	e3530000	 cmp         r3, #0
  001b0	0a000151	 beq         |$LN28@AddedEp|

; 67   :        // split or nonsplit FS/LS speed allocation
; 68   :         // classic allocation
; 69   :         // split allocation
; 70   :         unsigned int min_used = frame_budget[0].time_used;

  001b4	e59d3050	 ldr         r3, [sp, #0x50]
  001b8	e2833090	 add         r3, r3, #0x90
  001bc	e5933000	 ldr         r3, [r3]
  001c0	e58d3008	 str         r3, [sp, #8]

; 71   : 
; 72   :         if (ep->period > MAXFRAMES)

  001c4	e59d3054	 ldr         r3, [sp, #0x54]
  001c8	e2833002	 add         r3, r3, #2
  001cc	e1d330b0	 ldrh        r3, [r3]
  001d0	e3530020	 cmp         r3, #0x20
  001d4	da000004	 ble         |$LN27@AddedEp|

; 73   :             ep->actual_period = MAXFRAMES;

  001d8	e59d3054	 ldr         r3, [sp, #0x54]
  001dc	e2832010	 add         r2, r3, #0x10
  001e0	e3a03020	 mov         r3, #0x20
  001e4	e1c230b0	 strh        r3, [r2]

; 74   :         else

  001e8	ea000005	 b           |$LN26@AddedEp|
  001ec		 |$LN27@AddedEp|

; 75   :             ep->actual_period = ep->period;

  001ec	e59d3054	 ldr         r3, [sp, #0x54]
  001f0	e2831002	 add         r1, r3, #2
  001f4	e59d3054	 ldr         r3, [sp, #0x54]
  001f8	e2832010	 add         r2, r3, #0x10
  001fc	e1d130b0	 ldrh        r3, [r1]
  00200	e1c230b0	 strh        r3, [r2]
  00204		 |$LN26@AddedEp|

; 76   : 
; 77   :         // Look at all candidate frames for this period to find the one with min
; 78   :         // allocated bus time.  
; 79   :         //
; 80   :         for (unsigned int i=1; i < ep->actual_period ; i++) {

  00204	e3a03001	 mov         r3, #1
  00208	e58d3014	 str         r3, [sp, #0x14]
  0020c	ea000002	 b           |$LN25@AddedEp|
  00210		 |$LN24@AddedEp|
  00210	e59d3014	 ldr         r3, [sp, #0x14]
  00214	e2833001	 add         r3, r3, #1
  00218	e58d3014	 str         r3, [sp, #0x14]
  0021c		 |$LN25@AddedEp|
  0021c	e59d3054	 ldr         r3, [sp, #0x54]
  00220	e2833010	 add         r3, r3, #0x10
  00224	e1d320b0	 ldrh        r2, [r3]
  00228	e59d3014	 ldr         r3, [sp, #0x14]
  0022c	e1530002	 cmp         r3, r2
  00230	2a000017	 bcs         |$LN23@AddedEp|

; 81   :             if (frame_budget[i].time_used < min_used) {

  00234	e59d3050	 ldr         r3, [sp, #0x50]
  00238	e2831090	 add         r1, r3, #0x90
  0023c	e59d2014	 ldr         r2, [sp, #0x14]
  00240	e3a03004	 mov         r3, #4
  00244	e0030392	 mul         r3, r2, r3
  00248	e0813003	 add         r3, r1, r3
  0024c	e5932000	 ldr         r2, [r3]
  00250	e59d3008	 ldr         r3, [sp, #8]
  00254	e1520003	 cmp         r2, r3
  00258	2a00000c	 bcs         |$LN22@AddedEp|

; 82   :                 min_used = frame_budget[i].time_used;

  0025c	e59d3050	 ldr         r3, [sp, #0x50]
  00260	e2831090	 add         r1, r3, #0x90
  00264	e59d2014	 ldr         r2, [sp, #0x14]
  00268	e3a03004	 mov         r3, #4
  0026c	e0030392	 mul         r3, r2, r3
  00270	e0813003	 add         r3, r1, r3
  00274	e5933000	 ldr         r3, [r3]
  00278	e58d3008	 str         r3, [sp, #8]

; 83   :                 ep->start_frame = (UCHAR)i;

  0027c	e59d3014	 ldr         r3, [sp, #0x14]
  00280	e20320ff	 and         r2, r3, #0xFF
  00284	e59d3054	 ldr         r3, [sp, #0x54]
  00288	e2833012	 add         r3, r3, #0x12
  0028c	e5c32000	 strb        r2, [r3]
  00290		 |$LN22@AddedEp|

; 84   :             }
; 85   :         }

  00290	eaffffde	 b           |$LN24@AddedEp|
  00294		 |$LN23@AddedEp|

; 86   :         //***
; 87   :         //*** 2. Calculate classic time required
; 88   :         //***
; 89   : 
; 90   :         // Calculate classic overhead
; 91   :         DWORD overhead;
; 92   :         if (ep->ep_type == isoch) {

  00294	e59d3054	 ldr         r3, [sp, #0x54]
  00298	e2833004	 add         r3, r3, #4
  0029c	e5933000	 ldr         r3, [r3]
  002a0	e3530003	 cmp         r3, #3
  002a4	1a00001a	 bne         |$LN21@AddedEp|

; 93   :             if (ep->speed == FSSPEED)

  002a8	e59d3054	 ldr         r3, [sp, #0x54]
  002ac	e283300a	 add         r3, r3, #0xA
  002b0	e5d33000	 ldrb        r3, [r3]
  002b4	e3530001	 cmp         r3, #1
  002b8	1a000005	 bne         |$LN20@AddedEp|

; 94   :                 overhead = FS_ISOCH_OVERHEAD + m_dwThink_time;

  002bc	e59d3050	 ldr         r3, [sp, #0x50]
  002c0	e2833008	 add         r3, r3, #8
  002c4	e5933000	 ldr         r3, [r3]
  002c8	e2833009	 add         r3, r3, #9
  002cc	e58d3010	 str         r3, [sp, #0x10]

; 95   :             else {

  002d0	ea00000e	 b           |$LN19@AddedEp|
  002d4		 |$LN20@AddedEp|

; 96   :                 ASSERT(FALSE);

  002d4	ea000002	 b           |$LN31@AddedEp|
  002d8	e3a03001	 mov         r3, #1
  002dc	e58d3028	 str         r3, [sp, #0x28]
  002e0	ea000007	 b           |$LN32@AddedEp|
  002e4		 |$LN31@AddedEp|
  002e4	e3a03060	 mov         r3, #0x60
  002e8	e59f2464	 ldr         r2, [pc, #0x464]
  002ec	e59f145c	 ldr         r1, [pc, #0x45C]
  002f0	e59f0454	 ldr         r0, [pc, #0x454]
  002f4	eb000000	 bl          NKDbgPrintfW
  002f8	e6000010	 __debugbreak_ce
  002fc	e3a03000	 mov         r3, #0
  00300	e58d3028	 str         r3, [sp, #0x28]
  00304		 |$LN32@AddedEp|

; 97   :                 return FALSE;

  00304	e3a03000	 mov         r3, #0
  00308	e58d3020	 str         r3, [sp, #0x20]
  0030c	ea00010a	 b           |$LN29@AddedEp|
  00310		 |$LN19@AddedEp|

; 98   :             }
; 99   :         } 
; 100  :         else  { // interrupt

  00310	ea00000f	 b           |$LN18@AddedEp|
  00314		 |$LN21@AddedEp|

; 101  :             if (ep->speed == FSSPEED)

  00314	e59d3054	 ldr         r3, [sp, #0x54]
  00318	e283300a	 add         r3, r3, #0xA
  0031c	e5d33000	 ldrb        r3, [r3]
  00320	e3530001	 cmp         r3, #1
  00324	1a000005	 bne         |$LN17@AddedEp|

; 102  :                 overhead = FS_INT_OVERHEAD + m_dwThink_time;

  00328	e59d3050	 ldr         r3, [sp, #0x50]
  0032c	e2833008	 add         r3, r3, #8
  00330	e5933000	 ldr         r3, [r3]
  00334	e283300d	 add         r3, r3, #0xD
  00338	e58d3010	 str         r3, [sp, #0x10]

; 103  :             else

  0033c	ea000004	 b           |$LN16@AddedEp|
  00340		 |$LN17@AddedEp|

; 104  :                 overhead = LS_INT_OVERHEAD + m_dwThink_time;

  00340	e59d3050	 ldr         r3, [sp, #0x50]
  00344	e2833008	 add         r3, r3, #8
  00348	e5933000	 ldr         r3, [r3]
  0034c	e2833075	 add         r3, r3, #0x75
  00350	e58d3010	 str         r3, [sp, #0x10]
  00354		 |$LN16@AddedEp|
  00354		 |$LN18@AddedEp|

; 105  :         }
; 106  : 
; 107  :         // Classic bus time, NOT including bitstuffing overhead (in FS byte times) since we do best case budget
; 108  :         ep->calc_bus_time = (USHORT)(ep->max_packet * (ep->speed!=LSSPEED?1:8) + overhead);

  00354	e59d3054	 ldr         r3, [sp, #0x54]
  00358	e283300a	 add         r3, r3, #0xA
  0035c	e5d33000	 ldrb        r3, [r3]
  00360	e3530000	 cmp         r3, #0
  00364	0a000002	 beq         |$LN33@AddedEp|
  00368	e3a03001	 mov         r3, #1
  0036c	e58d302c	 str         r3, [sp, #0x2C]
  00370	ea000001	 b           |$LN34@AddedEp|
  00374		 |$LN33@AddedEp|
  00374	e3a03008	 mov         r3, #8
  00378	e58d302c	 str         r3, [sp, #0x2C]
  0037c		 |$LN34@AddedEp|
  0037c	e59d3054	 ldr         r3, [sp, #0x54]
  00380	e1d330b0	 ldrh        r3, [r3]
  00384	e1a01003	 mov         r1, r3
  00388	e59d302c	 ldr         r3, [sp, #0x2C]
  0038c	e0020391	 mul         r2, r1, r3
  00390	e59d3010	 ldr         r3, [sp, #0x10]
  00394	e0823003	 add         r3, r2, r3
  00398	e1a02803	 mov         r2, r3, lsl #16
  0039c	e1a02822	 mov         r2, r2, lsr #16
  003a0	e59d3054	 ldr         r3, [sp, #0x54]
  003a4	e283300c	 add         r3, r3, #0xC
  003a8	e1c320b0	 strh        r2, [r3]

; 109  : 
; 110  :         USHORT latest_start = FS_SOF + HUB_FS_ADJ;  // initial start time must be after the SOF transaction

  003ac	e3a03024	 mov         r3, #0x24
  003b0	e1cd30bc	 strh        r3, [sp, #0xC]

; 111  : 
; 112  :         for (i=0; ep->start_frame + i < MAXFRAMES && bReturn==TRUE; i += ep->actual_period) {

  003b4	e3a03000	 mov         r3, #0
  003b8	e58d3014	 str         r3, [sp, #0x14]
  003bc	ea000005	 b           |$LN15@AddedEp|
  003c0		 |$LN14@AddedEp|
  003c0	e59d3054	 ldr         r3, [sp, #0x54]
  003c4	e2833010	 add         r3, r3, #0x10
  003c8	e1d320b0	 ldrh        r2, [r3]
  003cc	e59d3014	 ldr         r3, [sp, #0x14]
  003d0	e0833002	 add         r3, r3, r2
  003d4	e58d3014	 str         r3, [sp, #0x14]
  003d8		 |$LN15@AddedEp|
  003d8	e59d3054	 ldr         r3, [sp, #0x54]
  003dc	e2833012	 add         r3, r3, #0x12
  003e0	e5d32000	 ldrb        r2, [r3]
  003e4	e59d3014	 ldr         r3, [sp, #0x14]
  003e8	e0823003	 add         r3, r2, r3
  003ec	e3530020	 cmp         r3, #0x20
  003f0	2a000047	 bcs         |$LN13@AddedEp|
  003f4	e59d3004	 ldr         r3, [sp, #4]
  003f8	e3530001	 cmp         r3, #1
  003fc	1a000044	 bne         |$LN13@AddedEp|

; 113  :             DWORD t=0;

  00400	e3a03000	 mov         r3, #0
  00404	e58d3018	 str         r3, [sp, #0x18]

; 114  :             if (FindBestTimeSlot(latest_start,ep->calc_bus_time,TT_frame[ep->start_frame + i],&t)) {

  00408	e28d3018	 add         r3, sp, #0x18
  0040c	e58d3000	 str         r3, [sp]
  00410	e59d3050	 ldr         r3, [sp, #0x50]
  00414	e2831010	 add         r1, r3, #0x10
  00418	e59d3054	 ldr         r3, [sp, #0x54]
  0041c	e2833012	 add         r3, r3, #0x12
  00420	e5d32000	 ldrb        r2, [r3]
  00424	e59d3014	 ldr         r3, [sp, #0x14]
  00428	e0822003	 add         r2, r2, r3
  0042c	e3a03004	 mov         r3, #4
  00430	e0030392	 mul         r3, r2, r3
  00434	e0813003	 add         r3, r1, r3
  00438	e5933000	 ldr         r3, [r3]
  0043c	e59d2054	 ldr         r2, [sp, #0x54]
  00440	e282200c	 add         r2, r2, #0xC
  00444	e1d220b0	 ldrh        r2, [r2]
  00448	e1dd10bc	 ldrh        r1, [sp, #0xC]
  0044c	e59d0050	 ldr         r0, [sp, #0x50]
  00450	eb000000	 bl          |?FindBestTimeSlot@TransactionTrasnlate@@AAAHGGPAU_ENDPOINTBUGETLIST@@PAK@Z|
  00454	e58d0030	 str         r0, [sp, #0x30]
  00458	e59d3030	 ldr         r3, [sp, #0x30]
  0045c	e3530000	 cmp         r3, #0
  00460	0a000017	 beq         |$LN12@AddedEp|

; 115  :                 ASSERT(t>=latest_start);

  00464	e1dd20bc	 ldrh        r2, [sp, #0xC]
  00468	e59d3018	 ldr         r3, [sp, #0x18]
  0046c	e1530002	 cmp         r3, r2
  00470	3a000002	 bcc         |$LN35@AddedEp|
  00474	e3a03001	 mov         r3, #1
  00478	e58d3034	 str         r3, [sp, #0x34]
  0047c	ea000007	 b           |$LN36@AddedEp|
  00480		 |$LN35@AddedEp|
  00480	e3a03073	 mov         r3, #0x73
  00484	e59f22c8	 ldr         r2, [pc, #0x2C8]
  00488	e59f12c0	 ldr         r1, [pc, #0x2C0]
  0048c	e59f02b8	 ldr         r0, [pc, #0x2B8]
  00490	eb000000	 bl          NKDbgPrintfW
  00494	e6000010	 __debugbreak_ce
  00498	e3a03000	 mov         r3, #0
  0049c	e58d3034	 str         r3, [sp, #0x34]
  004a0		 |$LN36@AddedEp|

; 116  :                 // update latest start time as required
; 117  :                 if (t > latest_start)

  004a0	e1dd20bc	 ldrh        r2, [sp, #0xC]
  004a4	e59d3018	 ldr         r3, [sp, #0x18]
  004a8	e1530002	 cmp         r3, r2
  004ac	9a000003	 bls         |$LN11@AddedEp|

; 118  :                     latest_start = (USHORT)t;

  004b0	e59d3018	 ldr         r3, [sp, #0x18]
  004b4	e1a03803	 mov         r3, r3, lsl #16
  004b8	e1a03823	 mov         r3, r3, lsr #16
  004bc	e1cd30bc	 strh        r3, [sp, #0xC]
  004c0		 |$LN11@AddedEp|

; 119  :             }
; 120  :             else { // Runout the slot this one.

  004c0	ea000012	 b           |$LN10@AddedEp|
  004c4		 |$LN12@AddedEp|

; 121  :                 ASSERT(FALSE);

  004c4	ea000002	 b           |$LN37@AddedEp|
  004c8	e3a03001	 mov         r3, #1
  004cc	e58d3038	 str         r3, [sp, #0x38]
  004d0	ea000007	 b           |$LN38@AddedEp|
  004d4		 |$LN37@AddedEp|
  004d4	e3a03079	 mov         r3, #0x79
  004d8	e59f2274	 ldr         r2, [pc, #0x274]
  004dc	e59f126c	 ldr         r1, [pc, #0x26C]
  004e0	e59f0264	 ldr         r0, [pc, #0x264]
  004e4	eb000000	 bl          NKDbgPrintfW
  004e8	e6000010	 __debugbreak_ce
  004ec	e3a03000	 mov         r3, #0
  004f0	e58d3038	 str         r3, [sp, #0x38]
  004f4		 |$LN38@AddedEp|

; 122  :                 ep->calc_bus_time = 0;

  004f4	e59d3054	 ldr         r3, [sp, #0x54]
  004f8	e283200c	 add         r2, r3, #0xC
  004fc	e3a03000	 mov         r3, #0
  00500	e1c230b0	 strh        r3, [r2]

; 123  :                 bReturn= FALSE;

  00504	e3a03000	 mov         r3, #0
  00508	e58d3004	 str         r3, [sp, #4]

; 124  :                 break;

  0050c	ea000000	 b           |$LN13@AddedEp|
  00510		 |$LN10@AddedEp|

; 125  :             }
; 126  :         } // end of for loop looking for latest start time

  00510	eaffffaa	 b           |$LN14@AddedEp|
  00514		 |$LN13@AddedEp|

; 127  : 
; 128  :         if (bReturn==TRUE) {

  00514	e59d3004	 ldr         r3, [sp, #4]
  00518	e3530001	 cmp         r3, #1
  0051c	1a000076	 bne         |$LN9@AddedEp|

; 129  :             // Set the start time for the new endpoint
; 130  :             ep->start_time = latest_start;

  00520	e59d3054	 ldr         r3, [sp, #0x54]
  00524	e283200e	 add         r2, r3, #0xE
  00528	e1dd30bc	 ldrh        r3, [sp, #0xC]
  0052c	e1c230b0	 strh        r3, [r2]

; 131  : 
; 132  :             if ((ep->start_time + ep->calc_bus_time) > FS_MAX_PERIODIC_ALLOCATION)  {

  00530	e59d3054	 ldr         r3, [sp, #0x54]
  00534	e283300e	 add         r3, r3, #0xE
  00538	e1d330b0	 ldrh        r3, [r3]
  0053c	e1a02003	 mov         r2, r3
  00540	e59d3054	 ldr         r3, [sp, #0x54]
  00544	e283300c	 add         r3, r3, #0xC
  00548	e1d330b0	 ldrh        r3, [r3]
  0054c	e0822003	 add         r2, r2, r3
  00550	e3a03b01	 mov         r3, #1, 22
  00554	e3833085	 orr         r3, r3, #0x85
  00558	e1520003	 cmp         r2, r3
  0055c	da000006	 ble         |$LN8@AddedEp|

; 133  :             //      error("start time %d past end of frame", ep->start_time + ep->calc_bus_time);
; 134  :                 ep->calc_bus_time = 0;

  00560	e59d3054	 ldr         r3, [sp, #0x54]
  00564	e283200c	 add         r2, r3, #0xC
  00568	e3a03000	 mov         r3, #0
  0056c	e1c230b0	 strh        r3, [r2]

; 135  :                 return FALSE;

  00570	e3a03000	 mov         r3, #0
  00574	e58d3020	 str         r3, [sp, #0x20]
  00578	ea00006f	 b           |$LN29@AddedEp|
  0057c		 |$LN8@AddedEp|

; 136  :             }
; 137  :             BOOL bRet=TRUE;

  0057c	e3a03001	 mov         r3, #1
  00580	e58d301c	 str         r3, [sp, #0x1C]

; 138  :             for (i=0; ep->start_frame + i < MAXFRAMES; i += ep->actual_period) {

  00584	e3a03000	 mov         r3, #0
  00588	e58d3014	 str         r3, [sp, #0x14]
  0058c	ea000005	 b           |$LN7@AddedEp|
  00590		 |$LN6@AddedEp|
  00590	e59d3054	 ldr         r3, [sp, #0x54]
  00594	e2833010	 add         r3, r3, #0x10
  00598	e1d320b0	 ldrh        r2, [r3]
  0059c	e59d3014	 ldr         r3, [sp, #0x14]
  005a0	e0833002	 add         r3, r3, r2
  005a4	e58d3014	 str         r3, [sp, #0x14]
  005a8		 |$LN7@AddedEp|
  005a8	e59d3054	 ldr         r3, [sp, #0x54]
  005ac	e2833012	 add         r3, r3, #0x12
  005b0	e5d32000	 ldrb        r2, [r3]
  005b4	e59d3014	 ldr         r3, [sp, #0x14]
  005b8	e0823003	 add         r3, r2, r3
  005bc	e3530020	 cmp         r3, #0x20
  005c0	2a000025	 bcs         |$LN5@AddedEp|

; 139  :                 bRet &= InsertEp(ep->start_frame + i, ep);

  005c4	e59d2054	 ldr         r2, [sp, #0x54]
  005c8	e59d3054	 ldr         r3, [sp, #0x54]
  005cc	e2833012	 add         r3, r3, #0x12
  005d0	e5d31000	 ldrb        r1, [r3]
  005d4	e59d3014	 ldr         r3, [sp, #0x14]
  005d8	e0811003	 add         r1, r1, r3
  005dc	e59d0050	 ldr         r0, [sp, #0x50]
  005e0	eb000000	 bl          |?InsertEp@TransactionTrasnlate@@AAAHKPAU_EndpointBuget@@@Z|
  005e4	e58d003c	 str         r0, [sp, #0x3C]
  005e8	e59d201c	 ldr         r2, [sp, #0x1C]
  005ec	e59d303c	 ldr         r3, [sp, #0x3C]
  005f0	e0023003	 and         r3, r2, r3
  005f4	e58d301c	 str         r3, [sp, #0x1C]

; 140  :                 ASSERT(bRet==TRUE);

  005f8	e59d301c	 ldr         r3, [sp, #0x1C]
  005fc	e3530001	 cmp         r3, #1
  00600	1a000002	 bne         |$LN39@AddedEp|
  00604	e3a03001	 mov         r3, #1
  00608	e58d3040	 str         r3, [sp, #0x40]
  0060c	ea000007	 b           |$LN40@AddedEp|
  00610		 |$LN39@AddedEp|
  00610	e3a0308c	 mov         r3, #0x8C
  00614	e59f2138	 ldr         r2, [pc, #0x138]
  00618	e59f1130	 ldr         r1, [pc, #0x130]
  0061c	e59f0128	 ldr         r0, [pc, #0x128]
  00620	eb000000	 bl          NKDbgPrintfW
  00624	e6000010	 __debugbreak_ce
  00628	e3a03000	 mov         r3, #0
  0062c	e58d3040	 str         r3, [sp, #0x40]
  00630		 |$LN40@AddedEp|

; 141  :                 frame_budget[0].time_used += ep->calc_bus_time;

  00630	e59d3050	 ldr         r3, [sp, #0x50]
  00634	e2831090	 add         r1, r3, #0x90
  00638	e59d3054	 ldr         r3, [sp, #0x54]
  0063c	e283300c	 add         r3, r3, #0xC
  00640	e1d320b0	 ldrh        r2, [r3]
  00644	e5913000	 ldr         r3, [r1]
  00648	e0832002	 add         r2, r3, r2
  0064c	e59d3050	 ldr         r3, [sp, #0x50]
  00650	e2833090	 add         r3, r3, #0x90
  00654	e5832000	 str         r2, [r3]

; 142  :             }

  00658	eaffffcc	 b           |$LN6@AddedEp|
  0065c		 |$LN5@AddedEp|

; 143  :             if (bRet == FALSE) {

  0065c	e59d301c	 ldr         r3, [sp, #0x1C]
  00660	e3530000	 cmp         r3, #0
  00664	1a000022	 bne         |$LN4@AddedEp|

; 144  :                 for (i=0; ep->start_frame + i < MAXFRAMES; i += ep->actual_period) {

  00668	e3a03000	 mov         r3, #0
  0066c	e58d3014	 str         r3, [sp, #0x14]
  00670	ea000005	 b           |$LN3@AddedEp|
  00674		 |$LN2@AddedEp|
  00674	e59d3054	 ldr         r3, [sp, #0x54]
  00678	e2833010	 add         r3, r3, #0x10
  0067c	e1d320b0	 ldrh        r2, [r3]
  00680	e59d3014	 ldr         r3, [sp, #0x14]
  00684	e0833002	 add         r3, r3, r2
  00688	e58d3014	 str         r3, [sp, #0x14]
  0068c		 |$LN3@AddedEp|
  0068c	e59d3054	 ldr         r3, [sp, #0x54]
  00690	e2833012	 add         r3, r3, #0x12
  00694	e5d32000	 ldrb        r2, [r3]
  00698	e59d3014	 ldr         r3, [sp, #0x14]
  0069c	e0823003	 add         r3, r2, r3
  006a0	e3530020	 cmp         r3, #0x20
  006a4	2a000012	 bcs         |$LN1@AddedEp|

; 145  :                     RemoveEp(ep->start_frame + i, ep);

  006a8	e59d2054	 ldr         r2, [sp, #0x54]
  006ac	e59d3054	 ldr         r3, [sp, #0x54]
  006b0	e2833012	 add         r3, r3, #0x12
  006b4	e5d31000	 ldrb        r1, [r3]
  006b8	e59d3014	 ldr         r3, [sp, #0x14]
  006bc	e0811003	 add         r1, r1, r3
  006c0	e59d0050	 ldr         r0, [sp, #0x50]
  006c4	eb000000	 bl          |?RemoveEp@TransactionTrasnlate@@AAAHKPAU_EndpointBuget@@@Z|

; 146  :                     frame_budget[0].time_used -= ep->calc_bus_time;

  006c8	e59d3050	 ldr         r3, [sp, #0x50]
  006cc	e2831090	 add         r1, r3, #0x90
  006d0	e59d3054	 ldr         r3, [sp, #0x54]
  006d4	e283300c	 add         r3, r3, #0xC
  006d8	e1d320b0	 ldrh        r2, [r3]
  006dc	e5913000	 ldr         r3, [r1]
  006e0	e0432002	 sub         r2, r3, r2
  006e4	e59d3050	 ldr         r3, [sp, #0x50]
  006e8	e2833090	 add         r3, r3, #0x90
  006ec	e5832000	 str         r2, [r3]

; 147  :                 }

  006f0	eaffffdf	 b           |$LN2@AddedEp|
  006f4		 |$LN1@AddedEp|
  006f4		 |$LN4@AddedEp|

; 148  :             }
; 149  :             bReturn = bRet;

  006f4	e59d301c	 ldr         r3, [sp, #0x1C]
  006f8	e58d3004	 str         r3, [sp, #4]
  006fc		 |$LN9@AddedEp|
  006fc		 |$LN28@AddedEp|

; 150  :         }
; 151  : 
; 152  :     }
; 153  :     ASSERT(bReturn);

  006fc	e59d3004	 ldr         r3, [sp, #4]
  00700	e3530000	 cmp         r3, #0
  00704	0a000002	 beq         |$LN41@AddedEp|
  00708	e3a03001	 mov         r3, #1
  0070c	e58d3044	 str         r3, [sp, #0x44]
  00710	ea000007	 b           |$LN42@AddedEp|
  00714		 |$LN41@AddedEp|
  00714	e3a03099	 mov         r3, #0x99
  00718	e59f2034	 ldr         r2, [pc, #0x34]
  0071c	e59f102c	 ldr         r1, [pc, #0x2C]
  00720	e59f0024	 ldr         r0, [pc, #0x24]
  00724	eb000000	 bl          NKDbgPrintfW
  00728	e6000010	 __debugbreak_ce
  0072c	e3a03000	 mov         r3, #0
  00730	e58d3044	 str         r3, [sp, #0x44]
  00734		 |$LN42@AddedEp|

; 154  :     return bReturn;

  00734	e59d3004	 ldr         r3, [sp, #4]
  00738	e58d3020	 str         r3, [sp, #0x20]
  0073c		 |$LN29@AddedEp|

; 155  : }

  0073c	e59d0020	 ldr         r0, [sp, #0x20]
  00740	e28dd048	 add         sp, sp, #0x48
  00744	e89d6000	 ldmia       sp, {sp, lr}
  00748	e12fff1e	 bx          lr
  0074c		 |$LN46@AddedEp|
  0074c		 |$LN47@AddedEp|
  0074c	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  00750		 |$LN48@AddedEp|
  00750	00000000	 DCD         |??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@|
  00754		 |$LN49@AddedEp|
  00754	00000000	 DCD         |??_C@_1LO@DIADDDPC@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  00758		 |$M32717|

			 ENDP  ; |?AddedEp@TransactionTrasnlate@@QAAHPAU_EndpointBuget@@@Z|, TransactionTrasnlate::AddedEp

	EXPORT	|?DeletedEp@TransactionTrasnlate@@QAAHPAU_EndpointBuget@@@Z| ; TransactionTrasnlate::DeletedEp

  00018			 AREA	 |.pdata|, PDATA
|$T32731| DCD	|$LN12@DeletedEp|
	DCD	0x40004504
; Function compile flags: /Odtp

  00758			 AREA	 |.text|, CODE, ARM

  00758		 |?DeletedEp@TransactionTrasnlate@@QAAHPAU_EndpointBuget@@@Z| PROC ; TransactionTrasnlate::DeletedEp

; 157  : {

  00758		 |$LN12@DeletedEp|
  00758	e1a0c00d	 mov         r12, sp
  0075c	e92d0003	 stmdb       sp!, {r0, r1}
  00760	e92d5000	 stmdb       sp!, {r12, lr}
  00764	e24dd014	 sub         sp, sp, #0x14
  00768		 |$M32728|

; 158  :     BOOL bReturn = TRUE;

  00768	e3a03001	 mov         r3, #1
  0076c	e58d3000	 str         r3, [sp]

; 159  :     for (unsigned int i=0; ep->start_frame + i < MAXFRAMES; i += ep->actual_period) {

  00770	e3a03000	 mov         r3, #0
  00774	e58d3004	 str         r3, [sp, #4]
  00778	ea000005	 b           |$LN5@DeletedEp|
  0077c		 |$LN4@DeletedEp|
  0077c	e59d3020	 ldr         r3, [sp, #0x20]
  00780	e2833010	 add         r3, r3, #0x10
  00784	e1d320b0	 ldrh        r2, [r3]
  00788	e59d3004	 ldr         r3, [sp, #4]
  0078c	e0833002	 add         r3, r3, r2
  00790	e58d3004	 str         r3, [sp, #4]
  00794		 |$LN5@DeletedEp|
  00794	e59d3020	 ldr         r3, [sp, #0x20]
  00798	e2833012	 add         r3, r3, #0x12
  0079c	e5d32000	 ldrb        r2, [r3]
  007a0	e59d3004	 ldr         r3, [sp, #4]
  007a4	e0823003	 add         r3, r2, r3
  007a8	e3530020	 cmp         r3, #0x20
  007ac	2a000025	 bcs         |$LN3@DeletedEp|

; 160  :         if (RemoveEp(ep->start_frame + i, ep))

  007b0	e59d2020	 ldr         r2, [sp, #0x20]
  007b4	e59d3020	 ldr         r3, [sp, #0x20]
  007b8	e2833012	 add         r3, r3, #0x12
  007bc	e5d31000	 ldrb        r1, [r3]
  007c0	e59d3004	 ldr         r3, [sp, #4]
  007c4	e0811003	 add         r1, r1, r3
  007c8	e59d001c	 ldr         r0, [sp, #0x1C]
  007cc	eb000000	 bl          |?RemoveEp@TransactionTrasnlate@@AAAHKPAU_EndpointBuget@@@Z|
  007d0	e58d000c	 str         r0, [sp, #0xC]
  007d4	e59d300c	 ldr         r3, [sp, #0xC]
  007d8	e3530000	 cmp         r3, #0
  007dc	0a00000a	 beq         |$LN2@DeletedEp|

; 161  :             frame_budget[0].time_used -= ep->calc_bus_time;

  007e0	e59d301c	 ldr         r3, [sp, #0x1C]
  007e4	e2831090	 add         r1, r3, #0x90
  007e8	e59d3020	 ldr         r3, [sp, #0x20]
  007ec	e283300c	 add         r3, r3, #0xC
  007f0	e1d320b0	 ldrh        r2, [r3]
  007f4	e5913000	 ldr         r3, [r1]
  007f8	e0432002	 sub         r2, r3, r2
  007fc	e59d301c	 ldr         r3, [sp, #0x1C]
  00800	e2833090	 add         r3, r3, #0x90
  00804	e5832000	 str         r2, [r3]

; 162  :         else{

  00808	ea00000d	 b           |$LN1@DeletedEp|
  0080c		 |$LN2@DeletedEp|

; 163  :             ASSERT(FALSE);

  0080c	ea000002	 b           |$LN8@DeletedEp|
  00810	e3a03001	 mov         r3, #1
  00814	e58d3010	 str         r3, [sp, #0x10]
  00818	ea000007	 b           |$LN9@DeletedEp|
  0081c		 |$LN8@DeletedEp|
  0081c	e3a030a3	 mov         r3, #0xA3
  00820	e59f2040	 ldr         r2, [pc, #0x40]
  00824	e59f1038	 ldr         r1, [pc, #0x38]
  00828	e59f0030	 ldr         r0, [pc, #0x30]
  0082c	eb000000	 bl          NKDbgPrintfW
  00830	e6000010	 __debugbreak_ce
  00834	e3a03000	 mov         r3, #0
  00838	e58d3010	 str         r3, [sp, #0x10]
  0083c		 |$LN9@DeletedEp|

; 164  :             bReturn=FALSE;

  0083c	e3a03000	 mov         r3, #0
  00840	e58d3000	 str         r3, [sp]
  00844		 |$LN1@DeletedEp|

; 165  :         }
; 166  :     }

  00844	eaffffcc	 b           |$LN4@DeletedEp|
  00848		 |$LN3@DeletedEp|

; 167  :     return bReturn;    

  00848	e59d3000	 ldr         r3, [sp]
  0084c	e58d3008	 str         r3, [sp, #8]

; 168  : }

  00850	e59d0008	 ldr         r0, [sp, #8]
  00854	e28dd014	 add         sp, sp, #0x14
  00858	e89d6000	 ldmia       sp, {sp, lr}
  0085c	e12fff1e	 bx          lr
  00860		 |$LN13@DeletedEp|
  00860		 |$LN14@DeletedEp|
  00860	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  00864		 |$LN15@DeletedEp|
  00864	00000000	 DCD         |??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@|
  00868		 |$LN16@DeletedEp|
  00868	00000000	 DCD         |??_C@_1LO@DIADDDPC@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  0086c		 |$M32729|

			 ENDP  ; |?DeletedEp@TransactionTrasnlate@@QAAHPAU_EndpointBuget@@@Z|, TransactionTrasnlate::DeletedEp


  00020			 AREA	 |.pdata|, PDATA
|$T32741| DCD	|$LN11@FindBestTi|
	DCD	0x40003a04
; Function compile flags: /Odtp

  0086c			 AREA	 |.text|, CODE, ARM

  0086c		 |?FindBestTimeSlot@TransactionTrasnlate@@AAAHGGPAU_ENDPOINTBUGETLIST@@PAK@Z| PROC ; TransactionTrasnlate::FindBestTimeSlot

; 171  : {

  0086c		 |$LN11@FindBestTi|
  0086c	e1a0c00d	 mov         r12, sp
  00870	e92d000f	 stmdb       sp!, {r0 - r3}
  00874	e92d5000	 stmdb       sp!, {r12, lr}
  00878	e24dd004	 sub         sp, sp, #4
  0087c		 |$M32738|
  0087c		 |$LN6@FindBestTi|

; 172  :     while (lpList) {

  0087c	e59d3018	 ldr         r3, [sp, #0x18]
  00880	e3530000	 cmp         r3, #0
  00884	0a000029	 beq         |$LN5@FindBestTi|

; 173  :         // Check this is no overlap.
; 174  :         if (lpList->endpt.start_time  >= start_time +  time_duration) { // Empty Slot has been found.

  00888	e59d3018	 ldr         r3, [sp, #0x18]
  0088c	e2833012	 add         r3, r3, #0x12
  00890	e1d330b0	 ldrh        r3, [r3]
  00894	e1a01003	 mov         r1, r3
  00898	e1dd31b0	 ldrh        r3, [sp, #0x10]
  0089c	e1a02003	 mov         r2, r3
  008a0	e1dd31b4	 ldrh        r3, [sp, #0x14]
  008a4	e0823003	 add         r3, r2, r3
  008a8	e1510003	 cmp         r1, r3
  008ac	ba000001	 blt         |$LN4@FindBestTi|
  008b0	ea00001e	 b           |$LN5@FindBestTi|

; 175  :             break;

  008b4	ea00001c	 b           |$LN3@FindBestTi|
  008b8		 |$LN4@FindBestTi|

; 176  :         }
; 177  :         else if (lpList->endpt.start_time +  lpList->endpt.calc_bus_time <= start_time) { // Have not reach yet . Continue

  008b8	e59d3018	 ldr         r3, [sp, #0x18]
  008bc	e2833012	 add         r3, r3, #0x12
  008c0	e1d330b0	 ldrh        r3, [r3]
  008c4	e1a02003	 mov         r2, r3
  008c8	e59d3018	 ldr         r3, [sp, #0x18]
  008cc	e2833010	 add         r3, r3, #0x10
  008d0	e1d330b0	 ldrh        r3, [r3]
  008d4	e0822003	 add         r2, r2, r3
  008d8	e1dd31b0	 ldrh        r3, [sp, #0x10]
  008dc	e1520003	 cmp         r2, r3
  008e0	ca000003	 bgt         |$LN2@FindBestTi|

; 178  :             lpList = lpList ->pNextEndpt;

  008e4	e59d3018	 ldr         r3, [sp, #0x18]
  008e8	e5933000	 ldr         r3, [r3]
  008ec	e58d3018	 str         r3, [sp, #0x18]

; 179  :         }
; 180  :         else { // We have overlap. Let us move slot later.

  008f0	ea00000d	 b           |$LN1@FindBestTi|
  008f4		 |$LN2@FindBestTi|

; 181  :             start_time = lpList->endpt.start_time +  lpList->endpt.calc_bus_time;

  008f4	e59d3018	 ldr         r3, [sp, #0x18]
  008f8	e2833012	 add         r3, r3, #0x12
  008fc	e1d330b0	 ldrh        r3, [r3]
  00900	e1a02003	 mov         r2, r3
  00904	e59d3018	 ldr         r3, [sp, #0x18]
  00908	e2833010	 add         r3, r3, #0x10
  0090c	e1d330b0	 ldrh        r3, [r3]
  00910	e0823003	 add         r3, r2, r3
  00914	e1a03803	 mov         r3, r3, lsl #16
  00918	e1a03823	 mov         r3, r3, lsr #16
  0091c	e1cd31b0	 strh        r3, [sp, #0x10]

; 182  :             lpList =  lpList ->pNextEndpt;

  00920	e59d3018	 ldr         r3, [sp, #0x18]
  00924	e5933000	 ldr         r3, [r3]
  00928	e58d3018	 str         r3, [sp, #0x18]
  0092c		 |$LN1@FindBestTi|
  0092c		 |$LN3@FindBestTi|

; 183  :         }
; 184  :     }

  0092c	eaffffd2	 b           |$LN6@FindBestTi|
  00930		 |$LN5@FindBestTi|

; 185  :     *pdwReturn = start_time;

  00930	e1dd21b0	 ldrh        r2, [sp, #0x10]
  00934	e59d301c	 ldr         r3, [sp, #0x1C]
  00938	e5832000	 str         r2, [r3]

; 186  :     return TRUE;

  0093c	e3a03001	 mov         r3, #1
  00940	e58d3000	 str         r3, [sp]

; 187  : }

  00944	e59d0000	 ldr         r0, [sp]
  00948	e28dd004	 add         sp, sp, #4
  0094c	e89d6000	 ldmia       sp, {sp, lr}
  00950	e12fff1e	 bx          lr
  00954		 |$M32739|

			 ENDP  ; |?FindBestTimeSlot@TransactionTrasnlate@@AAAHGGPAU_ENDPOINTBUGETLIST@@PAK@Z|, TransactionTrasnlate::FindBestTimeSlot

	IMPORT	|??2@YAPAXI@Z|				; operator new
	IMPORT	|memcpy|

  00028			 AREA	 |.pdata|, PDATA
|$T32754| DCD	|$LN22@InsertEp|
	DCD	0x40009b04
; Function compile flags: /Odtp

  00954			 AREA	 |.text|, CODE, ARM

  00954		 |?InsertEp@TransactionTrasnlate@@AAAHKPAU_EndpointBuget@@@Z| PROC ; TransactionTrasnlate::InsertEp

; 189  : {

  00954		 |$LN22@InsertEp|
  00954	e1a0c00d	 mov         r12, sp
  00958	e92d0007	 stmdb       sp!, {r0 - r2}
  0095c	e92d5000	 stmdb       sp!, {r12, lr}
  00960	e24dd028	 sub         sp, sp, #0x28
  00964		 |$M32751|

; 190  :     if (frameIndex>=MAXFRAMES || ep == NULL) {

  00964	e59d3034	 ldr         r3, [sp, #0x34]
  00968	e3530020	 cmp         r3, #0x20
  0096c	2a000002	 bcs         |$LN12@InsertEp|
  00970	e59d3038	 ldr         r3, [sp, #0x38]
  00974	e3530000	 cmp         r3, #0
  00978	1a00000e	 bne         |$LN13@InsertEp|
  0097c		 |$LN12@InsertEp|

; 191  :         ASSERT(FALSE);

  0097c	ea000002	 b           |$LN16@InsertEp|
  00980	e3a03001	 mov         r3, #1
  00984	e58d301c	 str         r3, [sp, #0x1C]
  00988	ea000007	 b           |$LN17@InsertEp|
  0098c		 |$LN16@InsertEp|
  0098c	e3a030bf	 mov         r3, #0xBF
  00990	e59f2224	 ldr         r2, [pc, #0x224]
  00994	e59f121c	 ldr         r1, [pc, #0x21C]
  00998	e59f0214	 ldr         r0, [pc, #0x214]
  0099c	eb000000	 bl          NKDbgPrintfW
  009a0	e6000010	 __debugbreak_ce
  009a4	e3a03000	 mov         r3, #0
  009a8	e58d301c	 str         r3, [sp, #0x1C]
  009ac		 |$LN17@InsertEp|

; 192  :         return FALSE;

  009ac	e3a03000	 mov         r3, #0
  009b0	e58d3018	 str         r3, [sp, #0x18]
  009b4	ea00007a	 b           |$LN14@InsertEp|
  009b8		 |$LN13@InsertEp|

; 193  :     }
; 194  :     BOOL bReturn = FALSE;

  009b8	e3a03000	 mov         r3, #0
  009bc	e58d3004	 str         r3, [sp, #4]

; 195  :     EndpointBugetList * pNewEpList = new EndpointBugetList;

  009c0	e3a0001c	 mov         r0, #0x1C
  009c4	eb000000	 bl          |??2@YAPAXI@Z|
  009c8	e58d0020	 str         r0, [sp, #0x20]
  009cc	e59d3020	 ldr         r3, [sp, #0x20]
  009d0	e58d3010	 str         r3, [sp, #0x10]
  009d4	e59d3010	 ldr         r3, [sp, #0x10]
  009d8	e58d3000	 str         r3, [sp]

; 196  :     if (pNewEpList) {

  009dc	e59d3000	 ldr         r3, [sp]
  009e0	e3530000	 cmp         r3, #0
  009e4	0a00006c	 beq         |$LN11@InsertEp|

; 197  :         pNewEpList->endpt = *ep;

  009e8	e59d1038	 ldr         r1, [sp, #0x38]
  009ec	e59d3000	 ldr         r3, [sp]
  009f0	e2830004	 add         r0, r3, #4
  009f4	e3a02018	 mov         r2, #0x18
  009f8	eb000000	 bl          memcpy

; 198  :         // find out where is not
; 199  :         EndpointBugetList * pPrevNode=NULL;

  009fc	e3a03000	 mov         r3, #0
  00a00	e58d3008	 str         r3, [sp, #8]

; 200  :         EndpointBugetList * pCurNode = TT_frame[frameIndex];

  00a04	e59d3030	 ldr         r3, [sp, #0x30]
  00a08	e2831010	 add         r1, r3, #0x10
  00a0c	e59d2034	 ldr         r2, [sp, #0x34]
  00a10	e3a03004	 mov         r3, #4
  00a14	e0030392	 mul         r3, r2, r3
  00a18	e0813003	 add         r3, r1, r3
  00a1c	e5933000	 ldr         r3, [r3]
  00a20	e58d300c	 str         r3, [sp, #0xC]

; 201  :         bReturn = TRUE;

  00a24	e3a03001	 mov         r3, #1
  00a28	e58d3004	 str         r3, [sp, #4]
  00a2c		 |$LN10@InsertEp|

; 202  :         while (pCurNode) {

  00a2c	e59d300c	 ldr         r3, [sp, #0xC]
  00a30	e3530000	 cmp         r3, #0
  00a34	0a000034	 beq         |$LN9@InsertEp|

; 203  :             if (pCurNode->endpt.start_time +  pCurNode->endpt.calc_bus_time <= ep->start_time) { // Continue

  00a38	e59d300c	 ldr         r3, [sp, #0xC]
  00a3c	e2833012	 add         r3, r3, #0x12
  00a40	e1d330b0	 ldrh        r3, [r3]
  00a44	e1a02003	 mov         r2, r3
  00a48	e59d300c	 ldr         r3, [sp, #0xC]
  00a4c	e2833010	 add         r3, r3, #0x10
  00a50	e1d330b0	 ldrh        r3, [r3]
  00a54	e0822003	 add         r2, r2, r3
  00a58	e59d3038	 ldr         r3, [sp, #0x38]
  00a5c	e283300e	 add         r3, r3, #0xE
  00a60	e1d330b0	 ldrh        r3, [r3]
  00a64	e1520003	 cmp         r2, r3
  00a68	ca000005	 bgt         |$LN8@InsertEp|

; 204  :                 pPrevNode = pCurNode;

  00a6c	e59d300c	 ldr         r3, [sp, #0xC]
  00a70	e58d3008	 str         r3, [sp, #8]

; 205  :                 pCurNode =pCurNode->pNextEndpt;

  00a74	e59d300c	 ldr         r3, [sp, #0xC]
  00a78	e5933000	 ldr         r3, [r3]
  00a7c	e58d300c	 str         r3, [sp, #0xC]
  00a80	ea000020	 b           |$LN7@InsertEp|
  00a84		 |$LN8@InsertEp|

; 206  :             }
; 207  :             else if (pCurNode->endpt.start_time >= ep->start_time+ep->calc_bus_time) { // Find hole

  00a84	e59d300c	 ldr         r3, [sp, #0xC]
  00a88	e2833012	 add         r3, r3, #0x12
  00a8c	e1d330b0	 ldrh        r3, [r3]
  00a90	e1a01003	 mov         r1, r3
  00a94	e59d3038	 ldr         r3, [sp, #0x38]
  00a98	e283300e	 add         r3, r3, #0xE
  00a9c	e1d330b0	 ldrh        r3, [r3]
  00aa0	e1a02003	 mov         r2, r3
  00aa4	e59d3038	 ldr         r3, [sp, #0x38]
  00aa8	e283300c	 add         r3, r3, #0xC
  00aac	e1d330b0	 ldrh        r3, [r3]
  00ab0	e0823003	 add         r3, r2, r3
  00ab4	e1510003	 cmp         r1, r3
  00ab8	ba000003	 blt         |$LN6@InsertEp|

; 208  :                 bReturn=TRUE;

  00abc	e3a03001	 mov         r3, #1
  00ac0	e58d3004	 str         r3, [sp, #4]

; 209  :                 break;

  00ac4	ea000010	 b           |$LN9@InsertEp|

; 210  :             }
; 211  :             else {// This is really bad. Someone try to inserted something that has overlap.

  00ac8	ea00000e	 b           |$LN5@InsertEp|
  00acc		 |$LN6@InsertEp|

; 212  :                 ASSERT(FALSE);

  00acc	ea000002	 b           |$LN18@InsertEp|
  00ad0	e3a03001	 mov         r3, #1
  00ad4	e58d3024	 str         r3, [sp, #0x24]
  00ad8	ea000007	 b           |$LN19@InsertEp|
  00adc		 |$LN18@InsertEp|
  00adc	e3a030d4	 mov         r3, #0xD4
  00ae0	e59f20d4	 ldr         r2, [pc, #0xD4]
  00ae4	e59f10cc	 ldr         r1, [pc, #0xCC]
  00ae8	e59f00c4	 ldr         r0, [pc, #0xC4]
  00aec	eb000000	 bl          NKDbgPrintfW
  00af0	e6000010	 __debugbreak_ce
  00af4	e3a03000	 mov         r3, #0
  00af8	e58d3024	 str         r3, [sp, #0x24]
  00afc		 |$LN19@InsertEp|

; 213  :                 bReturn = FALSE;

  00afc	e3a03000	 mov         r3, #0
  00b00	e58d3004	 str         r3, [sp, #4]

; 214  :                 break;

  00b04	ea000000	 b           |$LN9@InsertEp|
  00b08		 |$LN5@InsertEp|
  00b08		 |$LN7@InsertEp|

; 215  :             }
; 216  :         }

  00b08	eaffffc7	 b           |$LN10@InsertEp|
  00b0c		 |$LN9@InsertEp|

; 217  :         if (bReturn) { // We reached last one.

  00b0c	e59d3004	 ldr         r3, [sp, #4]
  00b10	e3530000	 cmp         r3, #0
  00b14	0a00001c	 beq         |$LN4@InsertEp|

; 218  :             if (pPrevNode) { // Not first.

  00b18	e59d3008	 ldr         r3, [sp, #8]
  00b1c	e3530000	 cmp         r3, #0
  00b20	0a000007	 beq         |$LN3@InsertEp|

; 219  :                 pNewEpList->pNextEndpt = pPrevNode ->pNextEndpt;

  00b24	e59d3008	 ldr         r3, [sp, #8]
  00b28	e5932000	 ldr         r2, [r3]
  00b2c	e59d3000	 ldr         r3, [sp]
  00b30	e5832000	 str         r2, [r3]

; 220  :                 pPrevNode->pNextEndpt = pNewEpList;

  00b34	e59d2000	 ldr         r2, [sp]
  00b38	e59d3008	 ldr         r3, [sp, #8]
  00b3c	e5832000	 str         r2, [r3]

; 221  :             } else { // This is first.

  00b40	ea000010	 b           |$LN2@InsertEp|
  00b44		 |$LN3@InsertEp|

; 222  :                 pNewEpList->pNextEndpt = TT_frame[frameIndex];

  00b44	e59d3030	 ldr         r3, [sp, #0x30]
  00b48	e2831010	 add         r1, r3, #0x10
  00b4c	e59d2034	 ldr         r2, [sp, #0x34]
  00b50	e3a03004	 mov         r3, #4
  00b54	e0030392	 mul         r3, r2, r3
  00b58	e0813003	 add         r3, r1, r3
  00b5c	e5932000	 ldr         r2, [r3]
  00b60	e59d3000	 ldr         r3, [sp]
  00b64	e5832000	 str         r2, [r3]

; 223  :                 TT_frame[frameIndex] = pNewEpList;

  00b68	e59d3030	 ldr         r3, [sp, #0x30]
  00b6c	e2831010	 add         r1, r3, #0x10
  00b70	e59d2034	 ldr         r2, [sp, #0x34]
  00b74	e3a03004	 mov         r3, #4
  00b78	e0030392	 mul         r3, r2, r3
  00b7c	e0812003	 add         r2, r1, r3
  00b80	e59d3000	 ldr         r3, [sp]
  00b84	e5823000	 str         r3, [r2]
  00b88		 |$LN2@InsertEp|

; 224  :             }
; 225  :         }
; 226  :         else // Fails we have to clean it.

  00b88	ea000003	 b           |$LN1@InsertEp|
  00b8c		 |$LN4@InsertEp|

; 227  :             delete pNewEpList;

  00b8c	e59d3000	 ldr         r3, [sp]
  00b90	e58d3014	 str         r3, [sp, #0x14]
  00b94	e59d0014	 ldr         r0, [sp, #0x14]
  00b98	eb000000	 bl          |??3@YAXPAX@Z|
  00b9c		 |$LN1@InsertEp|
  00b9c		 |$LN11@InsertEp|

; 228  :     }
; 229  :     return bReturn;

  00b9c	e59d3004	 ldr         r3, [sp, #4]
  00ba0	e58d3018	 str         r3, [sp, #0x18]
  00ba4		 |$LN14@InsertEp|

; 230  : };

  00ba4	e59d0018	 ldr         r0, [sp, #0x18]
  00ba8	e28dd028	 add         sp, sp, #0x28
  00bac	e89d6000	 ldmia       sp, {sp, lr}
  00bb0	e12fff1e	 bx          lr
  00bb4		 |$LN23@InsertEp|
  00bb4		 |$LN24@InsertEp|
  00bb4	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  00bb8		 |$LN25@InsertEp|
  00bb8	00000000	 DCD         |??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@|
  00bbc		 |$LN26@InsertEp|
  00bbc	00000000	 DCD         |??_C@_1LO@DIADDDPC@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  00bc0		 |$M32752|

			 ENDP  ; |?InsertEp@TransactionTrasnlate@@AAAHKPAU_EndpointBuget@@@Z|, TransactionTrasnlate::InsertEp


  00030			 AREA	 |.pdata|, PDATA
|$T32769| DCD	|$LN21@RemoveEp|
	DCD	0x40008704
; Function compile flags: /Odtp

  00bc0			 AREA	 |.text|, CODE, ARM

  00bc0		 |?RemoveEp@TransactionTrasnlate@@AAAHKPAU_EndpointBuget@@@Z| PROC ; TransactionTrasnlate::RemoveEp

; 232  : {

  00bc0		 |$LN21@RemoveEp|
  00bc0	e1a0c00d	 mov         r12, sp
  00bc4	e92d0007	 stmdb       sp!, {r0 - r2}
  00bc8	e92d5000	 stmdb       sp!, {r12, lr}
  00bcc	e24dd01c	 sub         sp, sp, #0x1C
  00bd0		 |$M32766|

; 233  :     if (frameIndex>=MAXFRAMES || ep == NULL) {

  00bd0	e59d3028	 ldr         r3, [sp, #0x28]
  00bd4	e3530020	 cmp         r3, #0x20
  00bd8	2a000002	 bcs         |$LN11@RemoveEp|
  00bdc	e59d302c	 ldr         r3, [sp, #0x2C]
  00be0	e3530000	 cmp         r3, #0
  00be4	1a00000e	 bne         |$LN12@RemoveEp|
  00be8		 |$LN11@RemoveEp|

; 234  :         ASSERT(FALSE);

  00be8	ea000002	 b           |$LN15@RemoveEp|
  00bec	e3a03001	 mov         r3, #1
  00bf0	e58d3014	 str         r3, [sp, #0x14]
  00bf4	ea000007	 b           |$LN16@RemoveEp|
  00bf8		 |$LN15@RemoveEp|
  00bf8	e3a030ea	 mov         r3, #0xEA
  00bfc	e59f21d4	 ldr         r2, [pc, #0x1D4]
  00c00	e59f11cc	 ldr         r1, [pc, #0x1CC]
  00c04	e59f01c4	 ldr         r0, [pc, #0x1C4]
  00c08	eb000000	 bl          NKDbgPrintfW
  00c0c	e6000010	 __debugbreak_ce
  00c10	e3a03000	 mov         r3, #0
  00c14	e58d3014	 str         r3, [sp, #0x14]
  00c18		 |$LN16@RemoveEp|

; 235  :         return FALSE;

  00c18	e3a03000	 mov         r3, #0
  00c1c	e58d3010	 str         r3, [sp, #0x10]
  00c20	ea000066	 b           |$LN13@RemoveEp|
  00c24		 |$LN12@RemoveEp|

; 236  :     }
; 237  :     BOOL bReturn=FALSE;

  00c24	e3a03000	 mov         r3, #0
  00c28	e58d3000	 str         r3, [sp]

; 238  :     EndpointBugetList * pPrevNode=NULL;

  00c2c	e3a03000	 mov         r3, #0
  00c30	e58d3004	 str         r3, [sp, #4]

; 239  :     EndpointBugetList * pCurNode = TT_frame[frameIndex];

  00c34	e59d3024	 ldr         r3, [sp, #0x24]
  00c38	e2831010	 add         r1, r3, #0x10
  00c3c	e59d2028	 ldr         r2, [sp, #0x28]
  00c40	e3a03004	 mov         r3, #4
  00c44	e0030392	 mul         r3, r2, r3
  00c48	e0813003	 add         r3, r1, r3
  00c4c	e5933000	 ldr         r3, [r3]
  00c50	e58d3008	 str         r3, [sp, #8]
  00c54		 |$LN10@RemoveEp|

; 240  :     while (pCurNode) {

  00c54	e59d3008	 ldr         r3, [sp, #8]
  00c58	e3530000	 cmp         r3, #0
  00c5c	0a00002c	 beq         |$LN9@RemoveEp|

; 241  :         if (pCurNode->endpt.start_time +  pCurNode->endpt.calc_bus_time <= ep->start_time) { // Continue

  00c60	e59d3008	 ldr         r3, [sp, #8]
  00c64	e2833012	 add         r3, r3, #0x12
  00c68	e1d330b0	 ldrh        r3, [r3]
  00c6c	e1a02003	 mov         r2, r3
  00c70	e59d3008	 ldr         r3, [sp, #8]
  00c74	e2833010	 add         r3, r3, #0x10
  00c78	e1d330b0	 ldrh        r3, [r3]
  00c7c	e0822003	 add         r2, r2, r3
  00c80	e59d302c	 ldr         r3, [sp, #0x2C]
  00c84	e283300e	 add         r3, r3, #0xE
  00c88	e1d330b0	 ldrh        r3, [r3]
  00c8c	e1520003	 cmp         r2, r3
  00c90	ca000005	 bgt         |$LN8@RemoveEp|

; 242  :             pPrevNode = pCurNode;

  00c94	e59d3008	 ldr         r3, [sp, #8]
  00c98	e58d3004	 str         r3, [sp, #4]

; 243  :             pCurNode =pCurNode->pNextEndpt;

  00c9c	e59d3008	 ldr         r3, [sp, #8]
  00ca0	e5933000	 ldr         r3, [r3]
  00ca4	e58d3008	 str         r3, [sp, #8]
  00ca8	ea000018	 b           |$LN7@RemoveEp|
  00cac		 |$LN8@RemoveEp|

; 244  :         }
; 245  :         else if ( pCurNode->endpt.start_time == ep->start_time && pCurNode->endpt.calc_bus_time == ep->calc_bus_time) {

  00cac	e59d3008	 ldr         r3, [sp, #8]
  00cb0	e2833012	 add         r3, r3, #0x12
  00cb4	e1d330b0	 ldrh        r3, [r3]
  00cb8	e1a02003	 mov         r2, r3
  00cbc	e59d302c	 ldr         r3, [sp, #0x2C]
  00cc0	e283300e	 add         r3, r3, #0xE
  00cc4	e1d330b0	 ldrh        r3, [r3]
  00cc8	e1520003	 cmp         r2, r3
  00ccc	1a00000c	 bne         |$LN6@RemoveEp|
  00cd0	e59d3008	 ldr         r3, [sp, #8]
  00cd4	e2833010	 add         r3, r3, #0x10
  00cd8	e1d330b0	 ldrh        r3, [r3]
  00cdc	e1a02003	 mov         r2, r3
  00ce0	e59d302c	 ldr         r3, [sp, #0x2C]
  00ce4	e283300c	 add         r3, r3, #0xC
  00ce8	e1d330b0	 ldrh        r3, [r3]
  00cec	e1520003	 cmp         r2, r3
  00cf0	1a000003	 bne         |$LN6@RemoveEp|

; 246  :             bReturn=TRUE;

  00cf4	e3a03001	 mov         r3, #1
  00cf8	e58d3000	 str         r3, [sp]

; 247  :             break;

  00cfc	ea000004	 b           |$LN9@RemoveEp|

; 248  :         }
; 249  :         else { // Either overlap or behind, We can not find this one.

  00d00	ea000002	 b           |$LN5@RemoveEp|
  00d04		 |$LN6@RemoveEp|

; 250  :             bReturn=FALSE;

  00d04	e3a03000	 mov         r3, #0
  00d08	e58d3000	 str         r3, [sp]

; 251  :             break;            

  00d0c	ea000000	 b           |$LN9@RemoveEp|
  00d10		 |$LN5@RemoveEp|
  00d10		 |$LN7@RemoveEp|

; 252  :         }
; 253  :     };

  00d10	eaffffcf	 b           |$LN10@RemoveEp|
  00d14		 |$LN9@RemoveEp|

; 254  :     if (bReturn == TRUE && pCurNode!=NULL) {

  00d14	e59d3000	 ldr         r3, [sp]
  00d18	e3530001	 cmp         r3, #1
  00d1c	1a000018	 bne         |$LN4@RemoveEp|
  00d20	e59d3008	 ldr         r3, [sp, #8]
  00d24	e3530000	 cmp         r3, #0
  00d28	0a000015	 beq         |$LN4@RemoveEp|

; 255  :         if (pPrevNode) // Not first one.

  00d2c	e59d3004	 ldr         r3, [sp, #4]
  00d30	e3530000	 cmp         r3, #0
  00d34	0a000004	 beq         |$LN3@RemoveEp|

; 256  :             pPrevNode->pNextEndpt=pCurNode->pNextEndpt;

  00d38	e59d3008	 ldr         r3, [sp, #8]
  00d3c	e5932000	 ldr         r2, [r3]
  00d40	e59d3004	 ldr         r3, [sp, #4]
  00d44	e5832000	 str         r2, [r3]

; 257  :         else

  00d48	ea000008	 b           |$LN2@RemoveEp|
  00d4c		 |$LN3@RemoveEp|

; 258  :             TT_frame[frameIndex]= pCurNode->pNextEndpt;

  00d4c	e59d3024	 ldr         r3, [sp, #0x24]
  00d50	e2831010	 add         r1, r3, #0x10
  00d54	e59d2028	 ldr         r2, [sp, #0x28]
  00d58	e3a03004	 mov         r3, #4
  00d5c	e0030392	 mul         r3, r2, r3
  00d60	e0812003	 add         r2, r1, r3
  00d64	e59d3008	 ldr         r3, [sp, #8]
  00d68	e5933000	 ldr         r3, [r3]
  00d6c	e5823000	 str         r3, [r2]
  00d70		 |$LN2@RemoveEp|

; 259  :         delete pCurNode;

  00d70	e59d3008	 ldr         r3, [sp, #8]
  00d74	e58d300c	 str         r3, [sp, #0xC]
  00d78	e59d000c	 ldr         r0, [sp, #0xC]
  00d7c	eb000000	 bl          |??3@YAXPAX@Z|

; 260  :     }
; 261  :     else

  00d80	ea00000c	 b           |$LN1@RemoveEp|
  00d84		 |$LN4@RemoveEp|

; 262  :         ASSERT(FALSE);

  00d84	ea000002	 b           |$LN17@RemoveEp|
  00d88	e3a03001	 mov         r3, #1
  00d8c	e58d3018	 str         r3, [sp, #0x18]
  00d90	ea000008	 b           |$LN18@RemoveEp|
  00d94		 |$LN17@RemoveEp|
  00d94	e3a03c01	 mov         r3, #1, 24
  00d98	e3833006	 orr         r3, r3, #6
  00d9c	e59f2034	 ldr         r2, [pc, #0x34]
  00da0	e59f102c	 ldr         r1, [pc, #0x2C]
  00da4	e59f0024	 ldr         r0, [pc, #0x24]
  00da8	eb000000	 bl          NKDbgPrintfW
  00dac	e6000010	 __debugbreak_ce
  00db0	e3a03000	 mov         r3, #0
  00db4	e58d3018	 str         r3, [sp, #0x18]
  00db8		 |$LN18@RemoveEp|
  00db8		 |$LN1@RemoveEp|

; 263  :     return bReturn;

  00db8	e59d3000	 ldr         r3, [sp]
  00dbc	e58d3010	 str         r3, [sp, #0x10]
  00dc0		 |$LN13@RemoveEp|

; 264  : 
; 265  : }

  00dc0	e59d0010	 ldr         r0, [sp, #0x10]
  00dc4	e28dd01c	 add         sp, sp, #0x1C
  00dc8	e89d6000	 ldmia       sp, {sp, lr}
  00dcc	e12fff1e	 bx          lr
  00dd0		 |$LN22@RemoveEp|
  00dd0		 |$LN23@RemoveEp|
  00dd0	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  00dd4		 |$LN24@RemoveEp|
  00dd4	00000000	 DCD         |??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@|
  00dd8		 |$LN25@RemoveEp|
  00dd8	00000000	 DCD         |??_C@_1LO@DIADDDPC@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  00ddc		 |$M32767|

			 ENDP  ; |?RemoveEp@TransactionTrasnlate@@AAAHKPAU_EndpointBuget@@@Z|, TransactionTrasnlate::RemoveEp

	EXPORT	|?Unlock@LockObject@@QAAXXZ|		; LockObject::Unlock
	EXPORT	|?Lock@LockObject@@QAAXXZ|		; LockObject::Lock
	EXPORT	|??0LockObject@@QAA@XZ|			; LockObject::LockObject
	EXPORT	|??0USB2lib@@QAA@XZ|			; USB2lib::USB2lib

  00038			 AREA	 |.pdata|, PDATA
|$T32779| DCD	|$LN11@USB2lib|
	DCD	0x40004204
; Function compile flags: /Odtp

  00ddc			 AREA	 |.text|, CODE, ARM

  00ddc		 |??0USB2lib@@QAA@XZ| PROC		; USB2lib::USB2lib

; 268  : {

  00ddc		 |$LN11@USB2lib|
  00ddc	e1a0c00d	 mov         r12, sp
  00de0	e92d0001	 stmdb       sp!, {r0}
  00de4	e92d5000	 stmdb       sp!, {r12, lr}
  00de8	e24dd010	 sub         sp, sp, #0x10
  00dec		 |$M32776|
  00dec	e59d0018	 ldr         r0, [sp, #0x18]
  00df0	eb000000	 bl          |??0LockObject@@QAA@XZ|
  00df4	e58d000c	 str         r0, [sp, #0xC]

; 269  :     // allocate at TT to test with
; 270  :     //myHC.tthead = (PTT) malloc(sizeof(TT));
; 271  :     Lock();

  00df8	e59d0018	 ldr         r0, [sp, #0x18]
  00dfc	eb000000	 bl          |?Lock@LockObject@@QAAXXZ|

; 272  :     pTTRoot = NULL;

  00e00	e59d3018	 ldr         r3, [sp, #0x18]
  00e04	e2832014	 add         r2, r3, #0x14
  00e08	e3a03000	 mov         r3, #0
  00e0c	e5823000	 str         r3, [r2]

; 273  :     thinktime = HS_HC_THINK_TIME;

  00e10	e59d3018	 ldr         r3, [sp, #0x18]
  00e14	e2832018	 add         r2, r3, #0x18
  00e18	e3a03064	 mov         r3, #0x64
  00e1c	e5823000	 str         r3, [r2]

; 274  :     allocation_limit = HS_MAX_PERIODIC_ALLOCATION;

  00e20	e59d3018	 ldr         r3, [sp, #0x18]
  00e24	e283201c	 add         r2, r3, #0x1C
  00e28	e3a03c1b	 mov         r3, #0x1B, 24
  00e2c	e3833058	 orr         r3, r3, #0x58
  00e30	e5823000	 str         r3, [r2]

; 275  :     speed = HSSPEED;

  00e34	e59d3018	 ldr         r3, [sp, #0x18]
  00e38	e2832020	 add         r2, r3, #0x20
  00e3c	e3a03002	 mov         r3, #2
  00e40	e5823000	 str         r3, [r2]

; 276  : 
; 277  :     for (int i=0; i<MAXFRAMES; i++) {

  00e44	e3a03000	 mov         r3, #0
  00e48	e58d3000	 str         r3, [sp]
  00e4c	ea000002	 b           |$LN6@USB2lib|
  00e50		 |$LN5@USB2lib|
  00e50	e59d3000	 ldr         r3, [sp]
  00e54	e2833001	 add         r3, r3, #1
  00e58	e58d3000	 str         r3, [sp]
  00e5c		 |$LN6@USB2lib|
  00e5c	e59d3000	 ldr         r3, [sp]
  00e60	e3530020	 cmp         r3, #0x20
  00e64	aa000016	 bge         |$LN4@USB2lib|

; 278  :         for (int j=0; j < MICROFRAMES_PER_FRAME; j++) {

  00e68	e3a03000	 mov         r3, #0
  00e6c	e58d3004	 str         r3, [sp, #4]
  00e70	ea000002	 b           |$LN3@USB2lib|
  00e74		 |$LN2@USB2lib|
  00e74	e59d3004	 ldr         r3, [sp, #4]
  00e78	e2833001	 add         r3, r3, #1
  00e7c	e58d3004	 str         r3, [sp, #4]
  00e80		 |$LN3@USB2lib|
  00e80	e59d3004	 ldr         r3, [sp, #4]
  00e84	e3530008	 cmp         r3, #8
  00e88	aa00000c	 bge         |$LN1@USB2lib|

; 279  :             HS_microframe_info[i][j].time_used = 0;

  00e8c	e59d3018	 ldr         r3, [sp, #0x18]
  00e90	e2831024	 add         r1, r3, #0x24
  00e94	e59d2000	 ldr         r2, [sp]
  00e98	e3a03020	 mov         r3, #0x20
  00e9c	e0030392	 mul         r3, r2, r3
  00ea0	e0811003	 add         r1, r1, r3
  00ea4	e59d2004	 ldr         r2, [sp, #4]
  00ea8	e3a03004	 mov         r3, #4
  00eac	e0030392	 mul         r3, r2, r3
  00eb0	e0812003	 add         r2, r1, r3
  00eb4	e3a03000	 mov         r3, #0
  00eb8	e5823000	 str         r3, [r2]

; 280  :         }

  00ebc	eaffffec	 b           |$LN2@USB2lib|
  00ec0		 |$LN1@USB2lib|

; 281  :     }

  00ec0	eaffffe2	 b           |$LN5@USB2lib|
  00ec4		 |$LN4@USB2lib|

; 282  :     Unlock();

  00ec4	e59d0018	 ldr         r0, [sp, #0x18]
  00ec8	eb000000	 bl          |?Unlock@LockObject@@QAAXXZ|

; 283  : }

  00ecc	e59d3018	 ldr         r3, [sp, #0x18]
  00ed0	e58d3008	 str         r3, [sp, #8]
  00ed4	e59d0008	 ldr         r0, [sp, #8]
  00ed8	e28dd010	 add         sp, sp, #0x10
  00edc	e89d6000	 ldmia       sp, {sp, lr}
  00ee0	e12fff1e	 bx          lr
  00ee4		 |$M32777|

			 ENDP  ; |??0USB2lib@@QAA@XZ|, USB2lib::USB2lib

	IMPORT	|InitializeCriticalSection|
; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\musb\musbhcd\usb2com\sync.hpp

  00000			 AREA	 |.pdata|, PDATA
|$T32785| DCD	|$LN5@LockObject|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0LockObject@@QAA@XZ| PROC		; LockObject::LockObject

; 71   :     LockObject() { InitializeCriticalSection(&m_CSection); };

  00000		 |$LN5@LockObject|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M32782|
  00010	e59d000c	 ldr         r0, [sp, #0xC]
  00014	eb000000	 bl          InitializeCriticalSection
  00018	e59d300c	 ldr         r3, [sp, #0xC]
  0001c	e58d3000	 str         r3, [sp]
  00020	e59d0000	 ldr         r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M32783|

			 ENDP  ; |??0LockObject@@QAA@XZ|, LockObject::LockObject

	IMPORT	|EnterCriticalSection|

  00000			 AREA	 |.pdata|, PDATA
|$T32792| DCD	|$LN5@Lock|
	DCD	0x40000703
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Lock@LockObject@@QAAXXZ| PROC	; LockObject::Lock

; 73   :     void Lock(void) { EnterCriticalSection(&m_CSection); };

  00000		 |$LN5@Lock|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M32789|
  0000c	e59d0008	 ldr         r0, [sp, #8]
  00010	eb000000	 bl          EnterCriticalSection
  00014	e89d6000	 ldmia       sp, {sp, lr}
  00018	e12fff1e	 bx          lr
  0001c		 |$M32790|

			 ENDP  ; |?Lock@LockObject@@QAAXXZ|, LockObject::Lock

	IMPORT	|LeaveCriticalSection|

  00000			 AREA	 |.pdata|, PDATA
|$T32799| DCD	|$LN5@Unlock|
	DCD	0x40000703
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Unlock@LockObject@@QAAXXZ| PROC	; LockObject::Unlock

; 74   :     void Unlock(void) {LeaveCriticalSection( &m_CSection); };

  00000		 |$LN5@Unlock|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M32796|
  0000c	e59d0008	 ldr         r0, [sp, #8]
  00010	eb000000	 bl          LeaveCriticalSection
  00014	e89d6000	 ldmia       sp, {sp, lr}
  00018	e12fff1e	 bx          lr
  0001c		 |$M32797|

			 ENDP  ; |?Unlock@LockObject@@QAAXXZ|, LockObject::Unlock

	EXPORT	|??1LockObject@@QAA@XZ|			; LockObject::~LockObject
	EXPORT	|??_GTransactionTrasnlate@@QAAPAXI@Z|	; TransactionTrasnlate::`scalar deleting destructor'
	EXPORT	|?GetNextTT@TransactionTrasnlate@@QAAPAV1@XZ| ; TransactionTrasnlate::GetNextTT
	EXPORT	|??1USB2lib@@QAA@XZ|			; USB2lib::~USB2lib

  00040			 AREA	 |.pdata|, PDATA
|$T32810| DCD	|$LN9@USB2lib@2|
	DCD	0x40002c04
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\musb\musbhcd\musbmhdrc\usb2lib.cpp

  00ee4			 AREA	 |.text|, CODE, ARM

  00ee4		 |??1USB2lib@@QAA@XZ| PROC		; USB2lib::~USB2lib

; 285  : {

  00ee4		 |$LN9@USB2lib@2|
  00ee4	e1a0c00d	 mov         r12, sp
  00ee8	e92d0001	 stmdb       sp!, {r0}
  00eec	e92d5000	 stmdb       sp!, {r12, lr}
  00ef0	e24dd01c	 sub         sp, sp, #0x1C
  00ef4		 |$M32807|

; 286  :     Lock();

  00ef4	e59d0024	 ldr         r0, [sp, #0x24]
  00ef8	eb000000	 bl          |?Lock@LockObject@@QAAXXZ|

; 287  :     TransactionTrasnlate * pCurTT= pTTRoot;

  00efc	e59d3024	 ldr         r3, [sp, #0x24]
  00f00	e2833014	 add         r3, r3, #0x14
  00f04	e5933000	 ldr         r3, [r3]
  00f08	e58d3000	 str         r3, [sp]
  00f0c		 |$LN2@USB2lib@2|

; 288  :     while (pCurTT) {

  00f0c	e59d3000	 ldr         r3, [sp]
  00f10	e3530000	 cmp         r3, #0
  00f14	0a000017	 beq         |$LN1@USB2lib@2|

; 289  :         TransactionTrasnlate * pNextTT = pCurTT->GetNextTT();

  00f18	e59d0000	 ldr         r0, [sp]
  00f1c	eb000000	 bl          |?GetNextTT@TransactionTrasnlate@@QAAPAV1@XZ|
  00f20	e58d0010	 str         r0, [sp, #0x10]
  00f24	e59d3010	 ldr         r3, [sp, #0x10]
  00f28	e58d3004	 str         r3, [sp, #4]

; 290  :         delete pCurTT;

  00f2c	e59d3000	 ldr         r3, [sp]
  00f30	e58d300c	 str         r3, [sp, #0xC]
  00f34	e59d300c	 ldr         r3, [sp, #0xC]
  00f38	e58d3008	 str         r3, [sp, #8]
  00f3c	e59d3008	 ldr         r3, [sp, #8]
  00f40	e3530000	 cmp         r3, #0
  00f44	0a000006	 beq         |$LN5@USB2lib@2|
  00f48	e3a01001	 mov         r1, #1
  00f4c	e59d0008	 ldr         r0, [sp, #8]
  00f50	eb000000	 bl          |??_GTransactionTrasnlate@@QAAPAXI@Z|
  00f54	e58d0014	 str         r0, [sp, #0x14]
  00f58	e59d3014	 ldr         r3, [sp, #0x14]
  00f5c	e58d3018	 str         r3, [sp, #0x18]
  00f60	ea000001	 b           |$LN6@USB2lib@2|
  00f64		 |$LN5@USB2lib@2|
  00f64	e3a03000	 mov         r3, #0
  00f68	e58d3018	 str         r3, [sp, #0x18]
  00f6c		 |$LN6@USB2lib@2|

; 291  :         pCurTT = pNextTT;

  00f6c	e59d3004	 ldr         r3, [sp, #4]
  00f70	e58d3000	 str         r3, [sp]

; 292  :     }

  00f74	eaffffe4	 b           |$LN2@USB2lib@2|
  00f78		 |$LN1@USB2lib@2|

; 293  :     Unlock();

  00f78	e59d0024	 ldr         r0, [sp, #0x24]
  00f7c	eb000000	 bl          |?Unlock@LockObject@@QAAXXZ|

; 294  : }

  00f80	e59d0024	 ldr         r0, [sp, #0x24]
  00f84	eb000000	 bl          |??1LockObject@@QAA@XZ|
  00f88	e28dd01c	 add         sp, sp, #0x1C
  00f8c	e89d6000	 ldmia       sp, {sp, lr}
  00f90	e12fff1e	 bx          lr
  00f94		 |$M32808|

			 ENDP  ; |??1USB2lib@@QAA@XZ|, USB2lib::~USB2lib

	IMPORT	|DeleteCriticalSection|
; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\musb\musbhcd\usb2com\sync.hpp

  00000			 AREA	 |.pdata|, PDATA
|$T32815| DCD	|$LN5@LockObject@2|
	DCD	0x40000703
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??1LockObject@@QAA@XZ| PROC		; LockObject::~LockObject

; 72   :     ~LockObject() { DeleteCriticalSection( &m_CSection); };

  00000		 |$LN5@LockObject@2|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M32812|
  0000c	e59d0008	 ldr         r0, [sp, #8]
  00010	eb000000	 bl          DeleteCriticalSection
  00014	e89d6000	 ldmia       sp, {sp, lr}
  00018	e12fff1e	 bx          lr
  0001c		 |$M32813|

			 ENDP  ; |??1LockObject@@QAA@XZ|, LockObject::~LockObject

; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\musb\musbhcd\musbmhdrc\usb2lib.h

  00000			 AREA	 |.pdata|, PDATA
|$T32823| DCD	|$LN5@GetNextTT|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetNextTT@TransactionTrasnlate@@QAAPAV1@XZ| PROC ; TransactionTrasnlate::GetNextTT

; 162  :     TransactionTrasnlate * GetNextTT() { return  m_pNextTT; };

  00000		 |$LN5@GetNextTT|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M32820|
  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e283300c	 add         r3, r3, #0xC
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3000	 str         r3, [sp]
  00020	e59d0000	 ldr         r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M32821|

			 ENDP  ; |?GetNextTT@TransactionTrasnlate@@QAAPAV1@XZ|, TransactionTrasnlate::GetNextTT


  00000			 AREA	 |.pdata|, PDATA
|$T32831| DCD	|$LN6@scalar|
	DCD	0x40001104
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??_GTransactionTrasnlate@@QAAPAXI@Z| PROC ; TransactionTrasnlate::`scalar deleting destructor'
  00000		 |$LN6@scalar|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M32828|
  00010	e59d000c	 ldr         r0, [sp, #0xC]
  00014	eb000000	 bl          |??1TransactionTrasnlate@@QAA@XZ|
  00018	e59d3010	 ldr         r3, [sp, #0x10]
  0001c	e3130001	 tst         r3, #1
  00020	0a000001	 beq         |$LN1@scalar|
  00024	e59d000c	 ldr         r0, [sp, #0xC]
  00028	eb000000	 bl          |??3@YAXPAX@Z|
  0002c		 |$LN1@scalar|
  0002c	e59d300c	 ldr         r3, [sp, #0xC]
  00030	e58d3000	 str         r3, [sp]
  00034	e59d0000	 ldr         r0, [sp]
  00038	e28dd004	 add         sp, sp, #4
  0003c	e89d6000	 ldmia       sp, {sp, lr}
  00040	e12fff1e	 bx          lr
  00044		 |$M32829|

			 ENDP  ; |??_GTransactionTrasnlate@@QAAPAXI@Z|, TransactionTrasnlate::`scalar deleting destructor'

	EXPORT	|?GetTT@USB2lib@@QAAPAVTransactionTrasnlate@@EEH@Z| ; USB2lib::GetTT
	EXPORT	|?AddedTt@USB2lib@@QAAHEE@Z|		; USB2lib::AddedTt

  00048			 AREA	 |.pdata|, PDATA
|$T32843| DCD	|$LN10@AddedTt|
	DCD	0x40003e04
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\musb\musbhcd\musbmhdrc\usb2lib.cpp

  00f94			 AREA	 |.text|, CODE, ARM

  00f94		 |?AddedTt@USB2lib@@QAAHEE@Z| PROC	; USB2lib::AddedTt

; 297  : {

  00f94		 |$LN10@AddedTt|
  00f94	e1a0c00d	 mov         r12, sp
  00f98	e92d0007	 stmdb       sp!, {r0 - r2}
  00f9c	e92d5000	 stmdb       sp!, {r12, lr}
  00fa0	e24dd028	 sub         sp, sp, #0x28
  00fa4		 |$M32840|

; 298  :     BOOL bReturn = FALSE;

  00fa4	e3a03000	 mov         r3, #0
  00fa8	e58d3004	 str         r3, [sp, #4]

; 299  :     Lock();

  00fac	e59d0030	 ldr         r0, [sp, #0x30]
  00fb0	eb000000	 bl          |?Lock@LockObject@@QAAXXZ|

; 300  :     if (GetTT( uHubAddress,uPort, TRUE) == NULL) {//Verify

  00fb4	e3a03001	 mov         r3, #1
  00fb8	e5dd2038	 ldrb        r2, [sp, #0x38]
  00fbc	e5dd1034	 ldrb        r1, [sp, #0x34]
  00fc0	e59d0030	 ldr         r0, [sp, #0x30]
  00fc4	eb000000	 bl          |?GetTT@USB2lib@@QAAPAVTransactionTrasnlate@@EEH@Z|
  00fc8	e58d0018	 str         r0, [sp, #0x18]
  00fcc	e59d3018	 ldr         r3, [sp, #0x18]
  00fd0	e3530000	 cmp         r3, #0
  00fd4	1a000022	 bne         |$LN3@AddedTt|

; 301  :         TransactionTrasnlate * pNewTT = new TransactionTrasnlate(uHubAddress,uPort, pTTRoot);

  00fd8	e3a00e11	 mov         r0, #0x11, 28
  00fdc	eb000000	 bl          |??2@YAPAXI@Z|
  00fe0	e58d001c	 str         r0, [sp, #0x1C]
  00fe4	e59d301c	 ldr         r3, [sp, #0x1C]
  00fe8	e58d300c	 str         r3, [sp, #0xC]
  00fec	e59d300c	 ldr         r3, [sp, #0xC]
  00ff0	e3530000	 cmp         r3, #0
  00ff4	0a00000c	 beq         |$LN6@AddedTt|
  00ff8	e3a03000	 mov         r3, #0
  00ffc	e58d3000	 str         r3, [sp]
  01000	e59d3030	 ldr         r3, [sp, #0x30]
  01004	e2833014	 add         r3, r3, #0x14
  01008	e5933000	 ldr         r3, [r3]
  0100c	e5dd2038	 ldrb        r2, [sp, #0x38]
  01010	e5dd1034	 ldrb        r1, [sp, #0x34]
  01014	e59d000c	 ldr         r0, [sp, #0xC]
  01018	eb000000	 bl          |??0TransactionTrasnlate@@QAA@EEQAXPAV0@@Z|
  0101c	e58d0020	 str         r0, [sp, #0x20]
  01020	e59d3020	 ldr         r3, [sp, #0x20]
  01024	e58d3024	 str         r3, [sp, #0x24]
  01028	ea000001	 b           |$LN7@AddedTt|
  0102c		 |$LN6@AddedTt|
  0102c	e3a03000	 mov         r3, #0
  01030	e58d3024	 str         r3, [sp, #0x24]
  01034		 |$LN7@AddedTt|
  01034	e59d3024	 ldr         r3, [sp, #0x24]
  01038	e58d3008	 str         r3, [sp, #8]

; 302  :         if ( pNewTT) {

  0103c	e59d3008	 ldr         r3, [sp, #8]
  01040	e3530000	 cmp         r3, #0
  01044	0a000005	 beq         |$LN2@AddedTt|

; 303  :             pTTRoot=pNewTT;

  01048	e59d3030	 ldr         r3, [sp, #0x30]
  0104c	e2832014	 add         r2, r3, #0x14
  01050	e59d3008	 ldr         r3, [sp, #8]
  01054	e5823000	 str         r3, [r2]

; 304  :             bReturn=TRUE;

  01058	e3a03001	 mov         r3, #1
  0105c	e58d3004	 str         r3, [sp, #4]
  01060		 |$LN2@AddedTt|

; 305  :         }
; 306  :     }
; 307  :     else

  01060	ea000001	 b           |$LN1@AddedTt|
  01064		 |$LN3@AddedTt|

; 308  :         bReturn=TRUE;

  01064	e3a03001	 mov         r3, #1
  01068	e58d3004	 str         r3, [sp, #4]
  0106c		 |$LN1@AddedTt|

; 309  :     Unlock();

  0106c	e59d0030	 ldr         r0, [sp, #0x30]
  01070	eb000000	 bl          |?Unlock@LockObject@@QAAXXZ|

; 310  :     return bReturn;

  01074	e59d3004	 ldr         r3, [sp, #4]
  01078	e58d3014	 str         r3, [sp, #0x14]

; 311  :         
; 312  : }

  0107c	e59d0014	 ldr         r0, [sp, #0x14]
  01080	e28dd028	 add         sp, sp, #0x28
  01084	e89d6000	 ldmia       sp, {sp, lr}
  01088	e12fff1e	 bx          lr
  0108c		 |$M32841|

			 ENDP  ; |?AddedTt@USB2lib@@QAAHEE@Z|, USB2lib::AddedTt

	EXPORT	|?SetNextTT@TransactionTrasnlate@@QAAPAV1@PAV1@@Z| ; TransactionTrasnlate::SetNextTT
	EXPORT	|?GetHubPort@TransactionTrasnlate@@QAAEXZ| ; TransactionTrasnlate::GetHubPort
	EXPORT	|?GetHubAddress@TransactionTrasnlate@@QAAEXZ| ; TransactionTrasnlate::GetHubAddress
	EXPORT	|?DeleteTt@USB2lib@@QAAHEEH@Z|		; USB2lib::DeleteTt

  00050			 AREA	 |.pdata|, PDATA
|$T32857| DCD	|$LN16@DeleteTt|
	DCD	0x40006904
; Function compile flags: /Odtp

  0108c			 AREA	 |.text|, CODE, ARM

  0108c		 |?DeleteTt@USB2lib@@QAAHEEH@Z| PROC	; USB2lib::DeleteTt

; 314  : {

  0108c		 |$LN16@DeleteTt|
  0108c	e1a0c00d	 mov         r12, sp
  01090	e92d000f	 stmdb       sp!, {r0 - r3}
  01094	e92d5000	 stmdb       sp!, {r12, lr}
  01098	e24dd040	 sub         sp, sp, #0x40
  0109c		 |$M32854|

; 315  : 	UNREFERENCED_PARAMETER(ttContext);
; 316  : 	
; 317  : 	BOOL bReturn = FALSE;

  0109c	e3a03000	 mov         r3, #0
  010a0	e58d3008	 str         r3, [sp, #8]

; 318  :     Lock();

  010a4	e59d0048	 ldr         r0, [sp, #0x48]
  010a8	eb000000	 bl          |?Lock@LockObject@@QAAXXZ|

; 319  :     TransactionTrasnlate * pPrevTT= NULL;

  010ac	e3a03000	 mov         r3, #0
  010b0	e58d3000	 str         r3, [sp]

; 320  :     TransactionTrasnlate * pCurTT = pTTRoot;

  010b4	e59d3048	 ldr         r3, [sp, #0x48]
  010b8	e2833014	 add         r3, r3, #0x14
  010bc	e5933000	 ldr         r3, [r3]
  010c0	e58d3004	 str         r3, [sp, #4]
  010c4		 |$LN7@DeleteTt|

; 321  : 
; 322  :     while ( pCurTT!=NULL ) {

  010c4	e59d3004	 ldr         r3, [sp, #4]
  010c8	e3530000	 cmp         r3, #0
  010cc	0a000019	 beq         |$LN6@DeleteTt|

; 323  :         if (pCurTT->GetHubAddress()==uHubAddress && pCurTT->GetHubPort() == uPort)

  010d0	e59d0004	 ldr         r0, [sp, #4]
  010d4	eb000000	 bl          |?GetHubAddress@TransactionTrasnlate@@QAAEXZ|
  010d8	e5cd0020	 strb        r0, [sp, #0x20]
  010dc	e5dd3020	 ldrb        r3, [sp, #0x20]
  010e0	e1a02003	 mov         r2, r3
  010e4	e5dd304c	 ldrb        r3, [sp, #0x4C]
  010e8	e1520003	 cmp         r2, r3
  010ec	1a000009	 bne         |$LN5@DeleteTt|
  010f0	e59d0004	 ldr         r0, [sp, #4]
  010f4	eb000000	 bl          |?GetHubPort@TransactionTrasnlate@@QAAEXZ|
  010f8	e5cd0021	 strb        r0, [sp, #0x21]
  010fc	e5dd3021	 ldrb        r3, [sp, #0x21]
  01100	e1a02003	 mov         r2, r3
  01104	e5dd3050	 ldrb        r3, [sp, #0x50]
  01108	e1520003	 cmp         r2, r3
  0110c	1a000001	 bne         |$LN5@DeleteTt|

; 324  :             break;

  01110	ea000008	 b           |$LN6@DeleteTt|

; 325  :         else {

  01114	ea000006	 b           |$LN4@DeleteTt|
  01118		 |$LN5@DeleteTt|

; 326  :             pPrevTT = pCurTT;

  01118	e59d3004	 ldr         r3, [sp, #4]
  0111c	e58d3000	 str         r3, [sp]

; 327  :             pCurTT = pCurTT->GetNextTT();

  01120	e59d0004	 ldr         r0, [sp, #4]
  01124	eb000000	 bl          |?GetNextTT@TransactionTrasnlate@@QAAPAV1@XZ|
  01128	e58d0024	 str         r0, [sp, #0x24]
  0112c	e59d3024	 ldr         r3, [sp, #0x24]
  01130	e58d3004	 str         r3, [sp, #4]
  01134		 |$LN4@DeleteTt|

; 328  :         }
; 329  :     }

  01134	eaffffe2	 b           |$LN7@DeleteTt|
  01138		 |$LN6@DeleteTt|

; 330  :     if (pCurTT) { // We found one matched.

  01138	e59d3004	 ldr         r3, [sp, #4]
  0113c	e3530000	 cmp         r3, #0
  01140	0a000032	 beq         |$LN3@DeleteTt|

; 331  :         if (pPrevTT) { // Not First One.

  01144	e59d3000	 ldr         r3, [sp]
  01148	e3530000	 cmp         r3, #0
  0114c	0a000016	 beq         |$LN2@DeleteTt|

; 332  :             pPrevTT ->SetNextTT(pCurTT->GetNextTT());

  01150	e59d0004	 ldr         r0, [sp, #4]
  01154	eb000000	 bl          |?GetNextTT@TransactionTrasnlate@@QAAPAV1@XZ|
  01158	e58d0028	 str         r0, [sp, #0x28]
  0115c	e59d1028	 ldr         r1, [sp, #0x28]
  01160	e59d0000	 ldr         r0, [sp]
  01164	eb000000	 bl          |?SetNextTT@TransactionTrasnlate@@QAAPAV1@PAV1@@Z|

; 333  :             delete pCurTT;

  01168	e59d3004	 ldr         r3, [sp, #4]
  0116c	e58d3010	 str         r3, [sp, #0x10]
  01170	e59d3010	 ldr         r3, [sp, #0x10]
  01174	e58d300c	 str         r3, [sp, #0xC]
  01178	e59d300c	 ldr         r3, [sp, #0xC]
  0117c	e3530000	 cmp         r3, #0
  01180	0a000006	 beq         |$LN10@DeleteTt|
  01184	e3a01001	 mov         r1, #1
  01188	e59d000c	 ldr         r0, [sp, #0xC]
  0118c	eb000000	 bl          |??_GTransactionTrasnlate@@QAAPAXI@Z|
  01190	e58d002c	 str         r0, [sp, #0x2C]
  01194	e59d302c	 ldr         r3, [sp, #0x2C]
  01198	e58d3030	 str         r3, [sp, #0x30]
  0119c	ea000001	 b           |$LN11@DeleteTt|
  011a0		 |$LN10@DeleteTt|
  011a0	e3a03000	 mov         r3, #0
  011a4	e58d3030	 str         r3, [sp, #0x30]
  011a8		 |$LN11@DeleteTt|

; 334  :         }
; 335  :         else { // First one

  011a8	ea000016	 b           |$LN1@DeleteTt|
  011ac		 |$LN2@DeleteTt|

; 336  :             pTTRoot = pCurTT->GetNextTT();

  011ac	e59d0004	 ldr         r0, [sp, #4]
  011b0	eb000000	 bl          |?GetNextTT@TransactionTrasnlate@@QAAPAV1@XZ|
  011b4	e58d0034	 str         r0, [sp, #0x34]
  011b8	e59d3048	 ldr         r3, [sp, #0x48]
  011bc	e2832014	 add         r2, r3, #0x14
  011c0	e59d3034	 ldr         r3, [sp, #0x34]
  011c4	e5823000	 str         r3, [r2]

; 337  :             delete pCurTT;

  011c8	e59d3004	 ldr         r3, [sp, #4]
  011cc	e58d3018	 str         r3, [sp, #0x18]
  011d0	e59d3018	 ldr         r3, [sp, #0x18]
  011d4	e58d3014	 str         r3, [sp, #0x14]
  011d8	e59d3014	 ldr         r3, [sp, #0x14]
  011dc	e3530000	 cmp         r3, #0
  011e0	0a000006	 beq         |$LN12@DeleteTt|
  011e4	e3a01001	 mov         r1, #1
  011e8	e59d0014	 ldr         r0, [sp, #0x14]
  011ec	eb000000	 bl          |??_GTransactionTrasnlate@@QAAPAXI@Z|
  011f0	e58d0038	 str         r0, [sp, #0x38]
  011f4	e59d3038	 ldr         r3, [sp, #0x38]
  011f8	e58d303c	 str         r3, [sp, #0x3C]
  011fc	ea000001	 b           |$LN13@DeleteTt|
  01200		 |$LN12@DeleteTt|
  01200	e3a03000	 mov         r3, #0
  01204	e58d303c	 str         r3, [sp, #0x3C]
  01208		 |$LN13@DeleteTt|
  01208		 |$LN1@DeleteTt|

; 338  :         }
; 339  :         bReturn=TRUE;

  01208	e3a03001	 mov         r3, #1
  0120c	e58d3008	 str         r3, [sp, #8]
  01210		 |$LN3@DeleteTt|

; 340  :      }
; 341  :     Unlock();

  01210	e59d0048	 ldr         r0, [sp, #0x48]
  01214	eb000000	 bl          |?Unlock@LockObject@@QAAXXZ|

; 342  :     return bReturn;

  01218	e59d3008	 ldr         r3, [sp, #8]
  0121c	e58d301c	 str         r3, [sp, #0x1C]

; 343  : }

  01220	e59d001c	 ldr         r0, [sp, #0x1C]
  01224	e28dd040	 add         sp, sp, #0x40
  01228	e89d6000	 ldmia       sp, {sp, lr}
  0122c	e12fff1e	 bx          lr
  01230		 |$M32855|

			 ENDP  ; |?DeleteTt@USB2lib@@QAAHEEH@Z|, USB2lib::DeleteTt

; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\musb\musbhcd\musbmhdrc\usb2lib.h

  00000			 AREA	 |.pdata|, PDATA
|$T32863| DCD	|$LN5@GetHubAddr|
	DCD	0x40000b04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetHubAddress@TransactionTrasnlate@@QAAEXZ| PROC ; TransactionTrasnlate::GetHubAddress

; 152  :     UCHAR GetHubAddress() { return m_uHubAddress; };

  00000		 |$LN5@GetHubAddr|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M32860|
  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e5d33000	 ldrb        r3, [r3]
  00018	e5cd3000	 strb        r3, [sp]
  0001c	e5dd0000	 ldrb        r0, [sp]
  00020	e28dd004	 add         sp, sp, #4
  00024	e89d6000	 ldmia       sp, {sp, lr}
  00028	e12fff1e	 bx          lr
  0002c		 |$M32861|

			 ENDP  ; |?GetHubAddress@TransactionTrasnlate@@QAAEXZ|, TransactionTrasnlate::GetHubAddress


  00000			 AREA	 |.pdata|, PDATA
|$T32871| DCD	|$LN5@GetHubPort|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetHubPort@TransactionTrasnlate@@QAAEXZ| PROC ; TransactionTrasnlate::GetHubPort

; 153  :     UCHAR GetHubPort() { return m_uPort; };

  00000		 |$LN5@GetHubPort|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M32868|
  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e2833001	 add         r3, r3, #1
  00018	e5d33000	 ldrb        r3, [r3]
  0001c	e5cd3000	 strb        r3, [sp]
  00020	e5dd0000	 ldrb        r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M32869|

			 ENDP  ; |?GetHubPort@TransactionTrasnlate@@QAAEXZ|, TransactionTrasnlate::GetHubPort


  00000			 AREA	 |.pdata|, PDATA
|$T32879| DCD	|$LN5@SetNextTT|
	DCD	0x40001204
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetNextTT@TransactionTrasnlate@@QAAPAV1@PAV1@@Z| PROC ; TransactionTrasnlate::SetNextTT

; 157  :     TransactionTrasnlate * SetNextTT(TransactionTrasnlate * pNextTT) { 

  00000		 |$LN5@SetNextTT|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd008	 sub         sp, sp, #8
  00010		 |$M32876|

; 158  :         TransactionTrasnlate * pReturn = m_pNextTT;

  00010	e59d3010	 ldr         r3, [sp, #0x10]
  00014	e283300c	 add         r3, r3, #0xC
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3000	 str         r3, [sp]

; 159  :         m_pNextTT = pNextTT;

  00020	e59d3010	 ldr         r3, [sp, #0x10]
  00024	e283200c	 add         r2, r3, #0xC
  00028	e59d3014	 ldr         r3, [sp, #0x14]
  0002c	e5823000	 str         r3, [r2]

; 160  :         return  pReturn;

  00030	e59d3000	 ldr         r3, [sp]
  00034	e58d3004	 str         r3, [sp, #4]

; 161  :     }

  00038	e59d0004	 ldr         r0, [sp, #4]
  0003c	e28dd008	 add         sp, sp, #8
  00040	e89d6000	 ldmia       sp, {sp, lr}
  00044	e12fff1e	 bx          lr
  00048		 |$M32877|

			 ENDP  ; |?SetNextTT@TransactionTrasnlate@@QAAPAV1@PAV1@@Z|, TransactionTrasnlate::SetNextTT


  00058			 AREA	 |.pdata|, PDATA
|$T32887| DCD	|$LN9@GetTT|
	DCD	0x40002d04
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\musb\musbhcd\musbmhdrc\usb2lib.cpp

  01230			 AREA	 |.text|, CODE, ARM

  01230		 |?GetTT@USB2lib@@QAAPAVTransactionTrasnlate@@EEH@Z| PROC ; USB2lib::GetTT

; 345  : {

  01230		 |$LN9@GetTT|
  01230	e1a0c00d	 mov         r12, sp
  01234	e92d000f	 stmdb       sp!, {r0 - r3}
  01238	e92d5000	 stmdb       sp!, {r12, lr}
  0123c	e24dd010	 sub         sp, sp, #0x10
  01240		 |$M32884|

; 346  : 	UNREFERENCED_PARAMETER(pContext);
; 347  : 
; 348  :     Lock();

  01240	e59d0018	 ldr         r0, [sp, #0x18]
  01244	eb000000	 bl          |?Lock@LockObject@@QAAXXZ|

; 349  :     TransactionTrasnlate * pFoundTT = pTTRoot;

  01248	e59d3018	 ldr         r3, [sp, #0x18]
  0124c	e2833014	 add         r3, r3, #0x14
  01250	e5933000	 ldr         r3, [r3]
  01254	e58d3000	 str         r3, [sp]
  01258		 |$LN4@GetTT|

; 350  :     while (pFoundTT) {

  01258	e59d3000	 ldr         r3, [sp]
  0125c	e3530000	 cmp         r3, #0
  01260	0a000017	 beq         |$LN3@GetTT|

; 351  :         if (pFoundTT->GetHubAddress() == uHubAddress && pFoundTT->GetHubPort() == uHubPort)

  01264	e59d0000	 ldr         r0, [sp]
  01268	eb000000	 bl          |?GetHubAddress@TransactionTrasnlate@@QAAEXZ|
  0126c	e5cd0008	 strb        r0, [sp, #8]
  01270	e5dd3008	 ldrb        r3, [sp, #8]
  01274	e1a02003	 mov         r2, r3
  01278	e5dd301c	 ldrb        r3, [sp, #0x1C]
  0127c	e1520003	 cmp         r2, r3
  01280	1a000009	 bne         |$LN2@GetTT|
  01284	e59d0000	 ldr         r0, [sp]
  01288	eb000000	 bl          |?GetHubPort@TransactionTrasnlate@@QAAEXZ|
  0128c	e5cd0009	 strb        r0, [sp, #9]
  01290	e5dd3009	 ldrb        r3, [sp, #9]
  01294	e1a02003	 mov         r2, r3
  01298	e5dd3020	 ldrb        r3, [sp, #0x20]
  0129c	e1520003	 cmp         r2, r3
  012a0	1a000001	 bne         |$LN2@GetTT|

; 352  :             break;

  012a4	ea000006	 b           |$LN3@GetTT|

; 353  :         else

  012a8	ea000004	 b           |$LN1@GetTT|
  012ac		 |$LN2@GetTT|

; 354  :             pFoundTT = pFoundTT->GetNextTT();

  012ac	e59d0000	 ldr         r0, [sp]
  012b0	eb000000	 bl          |?GetNextTT@TransactionTrasnlate@@QAAPAV1@XZ|
  012b4	e58d000c	 str         r0, [sp, #0xC]
  012b8	e59d300c	 ldr         r3, [sp, #0xC]
  012bc	e58d3000	 str         r3, [sp]
  012c0		 |$LN1@GetTT|

; 355  :     }

  012c0	eaffffe4	 b           |$LN4@GetTT|
  012c4		 |$LN3@GetTT|

; 356  :     Unlock();

  012c4	e59d0018	 ldr         r0, [sp, #0x18]
  012c8	eb000000	 bl          |?Unlock@LockObject@@QAAXXZ|

; 357  :     return pFoundTT;

  012cc	e59d3000	 ldr         r3, [sp]
  012d0	e58d3004	 str         r3, [sp, #4]

; 358  : }

  012d4	e59d0004	 ldr         r0, [sp, #4]
  012d8	e28dd010	 add         sp, sp, #0x10
  012dc	e89d6000	 ldmia       sp, {sp, lr}
  012e0	e12fff1e	 bx          lr
  012e4		 |$M32885|

			 ENDP  ; |?GetTT@USB2lib@@QAAPAVTransactionTrasnlate@@EEH@Z|, USB2lib::GetTT

	EXPORT	|?Add_bitstuff@USB2lib@@ABAII@Z|	; USB2lib::Add_bitstuff

  00060			 AREA	 |.pdata|, PDATA
|$T32893| DCD	|$LN5@Add_bitstu|
	DCD	0x40000d04
; Function compile flags: /Odtp

  012e4			 AREA	 |.text|, CODE, ARM

  012e4		 |?Add_bitstuff@USB2lib@@ABAII@Z| PROC	; USB2lib::Add_bitstuff

; 361  : {

  012e4		 |$LN5@Add_bitstu|
  012e4	e1a0c00d	 mov         r12, sp
  012e8	e92d0003	 stmdb       sp!, {r0, r1}
  012ec	e92d5000	 stmdb       sp!, {r12, lr}
  012f0	e24dd004	 sub         sp, sp, #4
  012f4		 |$M32890|

; 362  :     // Bit stuffing is 16.6666% extra.
; 363  :     // But we'll calculate bitstuffing as 16% extra with an add of a 4bit
; 364  :     // shift (i.e.  value + value/16) to avoid floats.
; 365  :     return (bus_time + (bus_time>>4));

  012f4	e59d3010	 ldr         r3, [sp, #0x10]
  012f8	e1a02223	 mov         r2, r3, lsr #4
  012fc	e59d3010	 ldr         r3, [sp, #0x10]
  01300	e0833002	 add         r3, r3, r2
  01304	e58d3000	 str         r3, [sp]

; 366  : }

  01308	e59d0000	 ldr         r0, [sp]
  0130c	e28dd004	 add         sp, sp, #4
  01310	e89d6000	 ldmia       sp, {sp, lr}
  01314	e12fff1e	 bx          lr
  01318		 |$M32891|

			 ENDP  ; |?Add_bitstuff@USB2lib@@ABAII@Z|, USB2lib::Add_bitstuff

	EXPORT	|?Compute_nonsplit_overhead@USB2lib@@AAAHPAU_EndpointBuget@@@Z| ; USB2lib::Compute_nonsplit_overhead

  00068			 AREA	 |.pdata|, PDATA
|$T32899| DCD	|$LN17@Compute_no|
	DCD	0x40005504
; Function compile flags: /Odtp

  01318			 AREA	 |.text|, CODE, ARM

  01318		 |?Compute_nonsplit_overhead@USB2lib@@AAAHPAU_EndpointBuget@@@Z| PROC ; USB2lib::Compute_nonsplit_overhead

; 375  : {

  01318		 |$LN17@Compute_no|
  01318	e1a0c00d	 mov         r12, sp
  0131c	e92d0003	 stmdb       sp!, {r0, r1}
  01320	e92d5000	 stmdb       sp!, {r12, lr}
  01324	e24dd004	 sub         sp, sp, #4
  01328		 |$M32896|

; 376  :     if (ep->speed == HSSPEED)

  01328	e59d3010	 ldr         r3, [sp, #0x10]
  0132c	e283300a	 add         r3, r3, #0xA
  01330	e5d33000	 ldrb        r3, [r3]
  01334	e3530002	 cmp         r3, #2
  01338	1a00002a	 bne         |$LN12@Compute_no|

; 377  :     {
; 378  :         if (ep->direction == OUTDIR)

  0133c	e59d3010	 ldr         r3, [sp, #0x10]
  01340	e2833009	 add         r3, r3, #9
  01344	e5d33000	 ldrb        r3, [r3]
  01348	e3530001	 cmp         r3, #1
  0134c	1a000012	 bne         |$LN11@Compute_no|

; 379  :         {
; 380  :             if (ep->ep_type == isoch)

  01350	e59d3010	 ldr         r3, [sp, #0x10]
  01354	e2833004	 add         r3, r3, #4
  01358	e5933000	 ldr         r3, [r3]
  0135c	e3530003	 cmp         r3, #3
  01360	1a000006	 bne         |$LN10@Compute_no|

; 381  :             {
; 382  :                 return HS_TOKEN_SAME_OVERHEAD + HS_DATA_SAME_OVERHEAD + thinktime;

  01364	e59d300c	 ldr         r3, [sp, #0xC]
  01368	e2833018	 add         r3, r3, #0x18
  0136c	e5933000	 ldr         r3, [r3]
  01370	e2833026	 add         r3, r3, #0x26
  01374	e58d3000	 str         r3, [sp]
  01378	ea000037	 b           |$LN13@Compute_no|

; 383  :             } else // interrupt

  0137c	ea000005	 b           |$LN9@Compute_no|
  01380		 |$LN10@Compute_no|

; 384  :             {
; 385  :                 return HS_TOKEN_SAME_OVERHEAD + HS_DATA_SAME_OVERHEAD +
; 386  :                     HS_HANDSHAKE_OVERHEAD + thinktime;

  01380	e59d300c	 ldr         r3, [sp, #0xC]
  01384	e2833018	 add         r3, r3, #0x18
  01388	e5933000	 ldr         r3, [r3]
  0138c	e283302d	 add         r3, r3, #0x2D
  01390	e58d3000	 str         r3, [sp]
  01394	ea000030	 b           |$LN13@Compute_no|
  01398		 |$LN9@Compute_no|

; 387  :             }
; 388  :         } else

  01398	ea000011	 b           |$LN8@Compute_no|
  0139c		 |$LN11@Compute_no|

; 389  :         { // IN
; 390  :             if (ep->ep_type == isoch)

  0139c	e59d3010	 ldr         r3, [sp, #0x10]
  013a0	e2833004	 add         r3, r3, #4
  013a4	e5933000	 ldr         r3, [r3]
  013a8	e3530003	 cmp         r3, #3
  013ac	1a000006	 bne         |$LN7@Compute_no|

; 391  :             {
; 392  :                 return HS_TOKEN_TURN_OVERHEAD + HS_DATA_TURN_OVERHEAD + thinktime;

  013b0	e59d300c	 ldr         r3, [sp, #0xC]
  013b4	e2833018	 add         r3, r3, #0x18
  013b8	e5933000	 ldr         r3, [r3]
  013bc	e2833012	 add         r3, r3, #0x12
  013c0	e58d3000	 str         r3, [sp]
  013c4	ea000024	 b           |$LN13@Compute_no|

; 393  :                 
; 394  :             } else // interrupt

  013c8	ea000005	 b           |$LN6@Compute_no|
  013cc		 |$LN7@Compute_no|

; 395  :             {
; 396  :                 return HS_TOKEN_TURN_OVERHEAD + HS_DATA_TURN_OVERHEAD +
; 397  :                     HS_HANDSHAKE_OVERHEAD + thinktime;

  013cc	e59d300c	 ldr         r3, [sp, #0xC]
  013d0	e2833018	 add         r3, r3, #0x18
  013d4	e5933000	 ldr         r3, [r3]
  013d8	e2833019	 add         r3, r3, #0x19
  013dc	e58d3000	 str         r3, [sp]
  013e0	ea00001d	 b           |$LN13@Compute_no|
  013e4		 |$LN6@Compute_no|
  013e4		 |$LN8@Compute_no|

; 398  :             }
; 399  :         }  // end of IN overhead calculations

  013e4	ea00001c	 b           |$LN5@Compute_no|
  013e8		 |$LN12@Compute_no|

; 400  :     } else  if (ep->speed == FSSPEED)

  013e8	e59d3010	 ldr         r3, [sp, #0x10]
  013ec	e283300a	 add         r3, r3, #0xA
  013f0	e5d33000	 ldrb        r3, [r3]
  013f4	e3530001	 cmp         r3, #1
  013f8	1a000012	 bne         |$LN4@Compute_no|

; 401  :     {
; 402  :         if (ep->ep_type == isoch)

  013fc	e59d3010	 ldr         r3, [sp, #0x10]
  01400	e2833004	 add         r3, r3, #4
  01404	e5933000	 ldr         r3, [r3]
  01408	e3530003	 cmp         r3, #3
  0140c	1a000006	 bne         |$LN3@Compute_no|

; 403  :         {
; 404  :             return FS_ISOCH_OVERHEAD + thinktime;

  01410	e59d300c	 ldr         r3, [sp, #0xC]
  01414	e2833018	 add         r3, r3, #0x18
  01418	e5933000	 ldr         r3, [r3]
  0141c	e2833009	 add         r3, r3, #9
  01420	e58d3000	 str         r3, [sp]
  01424	ea00000c	 b           |$LN13@Compute_no|

; 405  :         } else // interrupt

  01428	ea000005	 b           |$LN2@Compute_no|
  0142c		 |$LN3@Compute_no|

; 406  :         {
; 407  :             return FS_INT_OVERHEAD + thinktime;

  0142c	e59d300c	 ldr         r3, [sp, #0xC]
  01430	e2833018	 add         r3, r3, #0x18
  01434	e5933000	 ldr         r3, [r3]
  01438	e283300d	 add         r3, r3, #0xD
  0143c	e58d3000	 str         r3, [sp]
  01440	ea000005	 b           |$LN13@Compute_no|
  01444		 |$LN2@Compute_no|

; 408  :         }
; 409  :     } else  // LS

  01444	ea000004	 b           |$LN1@Compute_no|
  01448		 |$LN4@Compute_no|

; 410  :     {
; 411  :         return LS_INT_OVERHEAD + thinktime;

  01448	e59d300c	 ldr         r3, [sp, #0xC]
  0144c	e2833018	 add         r3, r3, #0x18
  01450	e5933000	 ldr         r3, [r3]
  01454	e2833075	 add         r3, r3, #0x75
  01458	e58d3000	 str         r3, [sp]
  0145c		 |$LN1@Compute_no|
  0145c		 |$LN5@Compute_no|
  0145c		 |$LN13@Compute_no|

; 412  :     }
; 413  : }

  0145c	e59d0000	 ldr         r0, [sp]
  01460	e28dd004	 add         sp, sp, #4
  01464	e89d6000	 ldmia       sp, {sp, lr}
  01468	e12fff1e	 bx          lr
  0146c		 |$M32897|

			 ENDP  ; |?Compute_nonsplit_overhead@USB2lib@@AAAHPAU_EndpointBuget@@@Z|, USB2lib::Compute_nonsplit_overhead

	EXPORT	|??_C@_1DK@LALOJPCH@?$AAe?$AAn?$AAd?$AAp?$AAo?$AAi?$AAn?$AAt?$AA?5?$AAa?$AAl?$AAr?$AAe?$AAa?$AAd?$AAy?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|?AllocUsb2BusTime@USB2lib@@QAAHEEHPAU_EndpointBuget@@@Z| ; USB2lib::AllocUsb2BusTime
	IMPORT	|__rt_sdiv|
	IMPORT	|__rt_udiv|

  00070			 AREA	 |.pdata|, PDATA
|$T32911| DCD	|$LN42@AllocUsb2B|
	DCD	0x40020204

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DK@LALOJPCH@?$AAe?$AAn?$AAd?$AAp?$AAo?$AAi?$AAn?$AAt?$AA?5?$AAa?$AAl?$AAr?$AAe?$AAa?$AAd?$AAy?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "e"
	DCB	0x0, "n", 0x0, "d", 0x0, "p", 0x0, "o", 0x0, "i", 0x0, "n"
	DCB	0x0, "t", 0x0, " ", 0x0, "a", 0x0, "l", 0x0, "r", 0x0, "e"
	DCB	0x0, "a", 0x0, "d", 0x0, "y", 0x0, " ", 0x0, "a", 0x0, "l"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  0146c			 AREA	 |.text|, CODE, ARM

  0146c		 |?AllocUsb2BusTime@USB2lib@@QAAHEEHPAU_EndpointBuget@@@Z| PROC ; USB2lib::AllocUsb2BusTime

; 416  : {

  0146c		 |$LN42@AllocUsb2B|
  0146c	e1a0c00d	 mov         r12, sp
  01470	e92d000f	 stmdb       sp!, {r0 - r3}
  01474	e92d5030	 stmdb       sp!, {r4, r5, r12, lr}
  01478	e24dd034	 sub         sp, sp, #0x34
  0147c		 |$M32908|

; 417  :     int retv;
; 418  :     unsigned   changed_eps, i, min_used;
; 419  :     //PEndpoint curr_ep, last_ep, p;
; 420  : 
; 421  :     changed_eps = 0;

  0147c	e3a03000	 mov         r3, #0
  01480	e58d3014	 str         r3, [sp, #0x14]

; 422  : 
; 423  :     retv = 1;

  01484	e3a03001	 mov         r3, #1
  01488	e58d300c	 str         r3, [sp, #0xC]

; 424  :     Lock();

  0148c	e59d0044	 ldr         r0, [sp, #0x44]
  01490	eb000000	 bl          |?Lock@LockObject@@QAAXXZ|

; 425  :     // OVERVIEW of algorithm steps:
; 426  :     //  1. Determine starting frame # for period
; 427  :     //  2. Calculate classic time required
; 428  :     //  3. For all period frames, find the latest starting time so we can check the classic allocation later
; 429  :     //  4. Process each frame data structure for endpoint period in budget window
; 430  :     //  5.   Now check allocation for each frame using shift adjustment based on latest start time
; 431  :     //  6a.  Now move isoch endpoints, insert new isoch and then move interrupt endpoints
; 432  :     //  6b.  Now insert new interrupt and move rest of interrupt endpoints
; 433  :     //  7.   Allocate HS bus time
; 434  :     //  8.   Allocate classic bus time
; 435  : 
; 436  : 
; 437  :     //***
; 438  :     //*** 1. Determine starting frame # for period
; 439  :     //***
; 440  : 
; 441  : 
; 442  : 
; 443  :     // Also remember the maximum frame time allocation since it will be used to pass the allocation check.
; 444  : 
; 445  :     // Find starting frame number for reasonable balance of all classic frames
; 446  : 
; 447  :     ep->start_frame = 0;

  01494	e59d3054	 ldr         r3, [sp, #0x54]
  01498	e2832012	 add         r2, r3, #0x12
  0149c	e3a03000	 mov         r3, #0
  014a0	e5c23000	 strb        r3, [r2]

; 448  :     ep->start_microframe = 0;

  014a4	e59d3054	 ldr         r3, [sp, #0x54]
  014a8	e2832013	 add         r2, r3, #0x13
  014ac	e3a03000	 mov         r3, #0
  014b0	e5c23000	 strb        r3, [r2]

; 449  :     ep->num_completes = 0;

  014b4	e59d3054	 ldr         r3, [sp, #0x54]
  014b8	e2832015	 add         r2, r3, #0x15
  014bc	e3a03000	 mov         r3, #0
  014c0	e5c23000	 strb        r3, [r2]

; 450  :     ep->num_starts = 0;

  014c4	e59d3054	 ldr         r3, [sp, #0x54]
  014c8	e2832014	 add         r2, r3, #0x14
  014cc	e3a03000	 mov         r3, #0
  014d0	e5c23000	 strb        r3, [r2]

; 451  : 
; 452  :     // check that this endpoint isn't already allocated
; 453  :     if (ep->calc_bus_time)

  014d4	e59d3054	 ldr         r3, [sp, #0x54]
  014d8	e283300c	 add         r3, r3, #0xC
  014dc	e1d330b0	 ldrh        r3, [r3]
  014e0	e3530000	 cmp         r3, #0
  014e4	0a000017	 beq         |$LN33@AllocUsb2B|

; 454  :     {
; 455  :         DEBUGMSG(1,(TEXT("endpoint already allocated\r\n")));

  014e8	e59f0780	 ldr         r0, [pc, #0x780]
  014ec	eb000000	 bl          NKDbgPrintfW
  014f0	e3a03001	 mov         r3, #1
  014f4	e58d301c	 str         r3, [sp, #0x1C]
  014f8	ea000001	 b           |$LN37@AllocUsb2B|
  014fc	e3a03000	 mov         r3, #0
  01500	e58d301c	 str         r3, [sp, #0x1C]
  01504		 |$LN37@AllocUsb2B|

; 456  :         ASSERT(FALSE);

  01504	ea000002	 b           |$LN38@AllocUsb2B|
  01508	e3a03001	 mov         r3, #1
  0150c	e58d3020	 str         r3, [sp, #0x20]
  01510	ea000007	 b           |$LN39@AllocUsb2B|
  01514		 |$LN38@AllocUsb2B|
  01514	e3a03f72	 mov         r3, #0x72, 30
  01518	e59f274c	 ldr         r2, [pc, #0x74C]
  0151c	e59f1744	 ldr         r1, [pc, #0x744]
  01520	e59f073c	 ldr         r0, [pc, #0x73C]
  01524	eb000000	 bl          NKDbgPrintfW
  01528	e6000010	 __debugbreak_ce
  0152c	e3a03000	 mov         r3, #0
  01530	e58d3020	 str         r3, [sp, #0x20]
  01534		 |$LN39@AllocUsb2B|

; 457  :         Unlock();

  01534	e59d0044	 ldr         r0, [sp, #0x44]
  01538	eb000000	 bl          |?Unlock@LockObject@@QAAXXZ|

; 458  :         return 0;

  0153c	e3a03000	 mov         r3, #0
  01540	e58d3018	 str         r3, [sp, #0x18]
  01544	ea0001c2	 b           |$LN34@AllocUsb2B|
  01548		 |$LN33@AllocUsb2B|

; 459  :     }
; 460  : 
; 461  :     // handle nonsplit HS allocation
; 462  :     if (ep->speed == HSSPEED) {

  01548	e59d3054	 ldr         r3, [sp, #0x54]
  0154c	e283300a	 add         r3, r3, #0xA
  01550	e5d33000	 ldrb        r3, [r3]
  01554	e3530002	 cmp         r3, #2
  01558	1a0000ef	 bne         |$LN32@AllocUsb2B|

; 463  : 
; 464  :         min_used = HS_microframe_info[0][0].time_used;

  0155c	e59d3044	 ldr         r3, [sp, #0x44]
  01560	e2833024	 add         r3, r3, #0x24
  01564	e5933000	 ldr         r3, [r3]
  01568	e58d3008	 str         r3, [sp, #8]

; 465  : 
; 466  :         if (ep->period > MAXFRAMES*MICROFRAMES_PER_FRAME)

  0156c	e59d3054	 ldr         r3, [sp, #0x54]
  01570	e2833002	 add         r3, r3, #2
  01574	e1d330b0	 ldrh        r3, [r3]
  01578	e3530c01	 cmp         r3, #1, 24
  0157c	da000004	 ble         |$LN31@AllocUsb2B|

; 467  :             ep->actual_period = MAXFRAMES*MICROFRAMES_PER_FRAME;

  01580	e59d3054	 ldr         r3, [sp, #0x54]
  01584	e2832010	 add         r2, r3, #0x10
  01588	e3a03c01	 mov         r3, #1, 24
  0158c	e1c230b0	 strh        r3, [r2]

; 468  :         else

  01590	ea000005	 b           |$LN30@AllocUsb2B|
  01594		 |$LN31@AllocUsb2B|

; 469  :             ep->actual_period = ep->period;

  01594	e59d3054	 ldr         r3, [sp, #0x54]
  01598	e2831002	 add         r1, r3, #2
  0159c	e59d3054	 ldr         r3, [sp, #0x54]
  015a0	e2832010	 add         r2, r3, #0x10
  015a4	e1d130b0	 ldrh        r3, [r1]
  015a8	e1c230b0	 strh        r3, [r2]
  015ac		 |$LN30@AllocUsb2B|

; 470  : 
; 471  :         // Look at all candidate frames for this period to find the one with min
; 472  :         // allocated bus time.  
; 473  :         //
; 474  :         for (i=1; i < ep->actual_period; i++){

  015ac	e3a03001	 mov         r3, #1
  015b0	e58d3000	 str         r3, [sp]
  015b4	ea000002	 b           |$LN29@AllocUsb2B|
  015b8		 |$LN28@AllocUsb2B|
  015b8	e59d3000	 ldr         r3, [sp]
  015bc	e2833001	 add         r3, r3, #1
  015c0	e58d3000	 str         r3, [sp]
  015c4		 |$LN29@AllocUsb2B|
  015c4	e59d3054	 ldr         r3, [sp, #0x54]
  015c8	e2833010	 add         r3, r3, #0x10
  015cc	e1d320b0	 ldrh        r2, [r3]
  015d0	e59d3000	 ldr         r3, [sp]
  015d4	e1530002	 cmp         r3, r2
  015d8	2a000031	 bcs         |$LN27@AllocUsb2B|

; 475  :             if (HS_microframe_info[i/MICROFRAMES_PER_FRAME][i % MICROFRAMES_PER_FRAME].time_used < min_used)

  015dc	e59d3044	 ldr         r3, [sp, #0x44]
  015e0	e2834024	 add         r4, r3, #0x24
  015e4	e59d1000	 ldr         r1, [sp]
  015e8	e3a00008	 mov         r0, #8
  015ec	eb000000	 bl          __rt_udiv
  015f0	e3a03020	 mov         r3, #0x20
  015f4	e0030390	 mul         r3, r0, r3
  015f8	e0844003	 add         r4, r4, r3
  015fc	e59d1000	 ldr         r1, [sp]
  01600	e3a00008	 mov         r0, #8
  01604	eb000000	 bl          __rt_udiv
  01608	e3a03004	 mov         r3, #4
  0160c	e0030391	 mul         r3, r1, r3
  01610	e0843003	 add         r3, r4, r3
  01614	e5932000	 ldr         r2, [r3]
  01618	e59d3008	 ldr         r3, [sp, #8]
  0161c	e1520003	 cmp         r2, r3
  01620	2a00001e	 bcs         |$LN26@AllocUsb2B|

; 476  :             {
; 477  :                 min_used = HS_microframe_info[i/MICROFRAMES_PER_FRAME][i % MICROFRAMES_PER_FRAME].time_used;

  01624	e59d3044	 ldr         r3, [sp, #0x44]
  01628	e2834024	 add         r4, r3, #0x24
  0162c	e59d1000	 ldr         r1, [sp]
  01630	e3a00008	 mov         r0, #8
  01634	eb000000	 bl          __rt_udiv
  01638	e3a03020	 mov         r3, #0x20
  0163c	e0030390	 mul         r3, r0, r3
  01640	e0844003	 add         r4, r4, r3
  01644	e59d1000	 ldr         r1, [sp]
  01648	e3a00008	 mov         r0, #8
  0164c	eb000000	 bl          __rt_udiv
  01650	e3a03004	 mov         r3, #4
  01654	e0030391	 mul         r3, r1, r3
  01658	e0843003	 add         r3, r4, r3
  0165c	e5933000	 ldr         r3, [r3]
  01660	e58d3008	 str         r3, [sp, #8]

; 478  :                 ep->start_frame = (UCHAR)(i / MICROFRAMES_PER_FRAME);

  01664	e59d1000	 ldr         r1, [sp]
  01668	e3a00008	 mov         r0, #8
  0166c	eb000000	 bl          __rt_udiv
  01670	e20020ff	 and         r2, r0, #0xFF
  01674	e59d3054	 ldr         r3, [sp, #0x54]
  01678	e2833012	 add         r3, r3, #0x12
  0167c	e5c32000	 strb        r2, [r3]

; 479  :                 ep->start_microframe = (UCHAR)(i % MICROFRAMES_PER_FRAME);

  01680	e59d1000	 ldr         r1, [sp]
  01684	e3a00008	 mov         r0, #8
  01688	eb000000	 bl          __rt_udiv
  0168c	e1a02c01	 mov         r2, r1, lsl #24
  01690	e1a02c42	 mov         r2, r2, asr #24
  01694	e59d3054	 ldr         r3, [sp, #0x54]
  01698	e2833013	 add         r3, r3, #0x13
  0169c	e5c32000	 strb        r2, [r3]
  016a0		 |$LN26@AllocUsb2B|

; 480  :             }
; 481  :         }

  016a0	eaffffc4	 b           |$LN28@AllocUsb2B|
  016a4		 |$LN27@AllocUsb2B|

; 482  : 
; 483  :         // compute and allocate HS bandwidth
; 484  :         ep->calc_bus_time = (USHORT)(Compute_nonsplit_overhead(ep) + Add_bitstuff(ep->max_packet));

  016a4	e59d1054	 ldr         r1, [sp, #0x54]
  016a8	e59d0044	 ldr         r0, [sp, #0x44]
  016ac	eb000000	 bl          |?Compute_nonsplit_overhead@USB2lib@@AAAHPAU_EndpointBuget@@@Z|
  016b0	e58d0024	 str         r0, [sp, #0x24]
  016b4	e59d3054	 ldr         r3, [sp, #0x54]
  016b8	e1d310b0	 ldrh        r1, [r3]
  016bc	e59d0044	 ldr         r0, [sp, #0x44]
  016c0	eb000000	 bl          |?Add_bitstuff@USB2lib@@ABAII@Z|
  016c4	e58d0028	 str         r0, [sp, #0x28]
  016c8	e59d2024	 ldr         r2, [sp, #0x24]
  016cc	e59d3028	 ldr         r3, [sp, #0x28]
  016d0	e0823003	 add         r3, r2, r3
  016d4	e1a02803	 mov         r2, r3, lsl #16
  016d8	e1a02822	 mov         r2, r2, lsr #16
  016dc	e59d3054	 ldr         r3, [sp, #0x54]
  016e0	e283300c	 add         r3, r3, #0xC
  016e4	e1c320b0	 strh        r2, [r3]

; 485  :         for (i = (ep->start_frame*MICROFRAMES_PER_FRAME) + ep->start_microframe;

  016e8	e59d3054	 ldr         r3, [sp, #0x54]
  016ec	e2833012	 add         r3, r3, #0x12
  016f0	e5d33000	 ldrb        r3, [r3]
  016f4	e1a01003	 mov         r1, r3
  016f8	e3a03008	 mov         r3, #8
  016fc	e0020391	 mul         r2, r1, r3
  01700	e59d3054	 ldr         r3, [sp, #0x54]
  01704	e2833013	 add         r3, r3, #0x13
  01708	e1d330d0	 ldrsb       r3, [r3]
  0170c	e0823003	 add         r3, r2, r3
  01710	e58d3000	 str         r3, [sp]

; 486  :                 i < MAXFRAMES*MICROFRAMES_PER_FRAME;

  01714	ea000005	 b           |$LN25@AllocUsb2B|
  01718		 |$LN24@AllocUsb2B|

; 487  :                 i += ep->actual_period){

  01718	e59d3054	 ldr         r3, [sp, #0x54]
  0171c	e2833010	 add         r3, r3, #0x10
  01720	e1d320b0	 ldrh        r2, [r3]
  01724	e59d3000	 ldr         r3, [sp]
  01728	e0833002	 add         r3, r3, r2
  0172c	e58d3000	 str         r3, [sp]
  01730		 |$LN25@AllocUsb2B|
  01730	e59d3000	 ldr         r3, [sp]
  01734	e3530c01	 cmp         r3, #1, 24
  01738	2a000037	 bcs         |$LN23@AllocUsb2B|

; 488  :             HS_microframe_info[i/MICROFRAMES_PER_FRAME][i % MICROFRAMES_PER_FRAME].time_used +=ep->calc_bus_time;

  0173c	e59d3044	 ldr         r3, [sp, #0x44]
  01740	e2834024	 add         r4, r3, #0x24
  01744	e59d1000	 ldr         r1, [sp]
  01748	e3a00008	 mov         r0, #8
  0174c	eb000000	 bl          __rt_udiv
  01750	e3a03020	 mov         r3, #0x20
  01754	e0030390	 mul         r3, r0, r3
  01758	e0844003	 add         r4, r4, r3
  0175c	e59d1000	 ldr         r1, [sp]
  01760	e3a00008	 mov         r0, #8
  01764	eb000000	 bl          __rt_udiv
  01768	e3a03004	 mov         r3, #4
  0176c	e0030391	 mul         r3, r1, r3
  01770	e0841003	 add         r1, r4, r3
  01774	e59d3054	 ldr         r3, [sp, #0x54]
  01778	e283300c	 add         r3, r3, #0xC
  0177c	e1d320b0	 ldrh        r2, [r3]
  01780	e5913000	 ldr         r3, [r1]
  01784	e0835002	 add         r5, r3, r2
  01788	e59d1000	 ldr         r1, [sp]
  0178c	e3a00008	 mov         r0, #8
  01790	eb000000	 bl          __rt_udiv
  01794	e3a03004	 mov         r3, #4
  01798	e0040391	 mul         r4, r1, r3
  0179c	e59d1000	 ldr         r1, [sp]
  017a0	e3a00008	 mov         r0, #8
  017a4	eb000000	 bl          __rt_udiv
  017a8	e3a03020	 mov         r3, #0x20
  017ac	e0020390	 mul         r2, r0, r3
  017b0	e59d3044	 ldr         r3, [sp, #0x44]
  017b4	e2833024	 add         r3, r3, #0x24
  017b8	e0833002	 add         r3, r3, r2
  017bc	e0833004	 add         r3, r3, r4
  017c0	e5835000	 str         r5, [r3]

; 489  :             if (HS_microframe_info[i/MICROFRAMES_PER_FRAME][i % MICROFRAMES_PER_FRAME].time_used >HS_MAX_PERIODIC_ALLOCATION)

  017c4	e59d3044	 ldr         r3, [sp, #0x44]
  017c8	e2834024	 add         r4, r3, #0x24
  017cc	e59d1000	 ldr         r1, [sp]
  017d0	e3a00008	 mov         r0, #8
  017d4	eb000000	 bl          __rt_udiv
  017d8	e3a03020	 mov         r3, #0x20
  017dc	e0030390	 mul         r3, r0, r3
  017e0	e0844003	 add         r4, r4, r3
  017e4	e59d1000	 ldr         r1, [sp]
  017e8	e3a00008	 mov         r0, #8
  017ec	eb000000	 bl          __rt_udiv
  017f0	e3a03004	 mov         r3, #4
  017f4	e0030391	 mul         r3, r1, r3
  017f8	e0843003	 add         r3, r4, r3
  017fc	e5932000	 ldr         r2, [r3]
  01800	e3a03c1b	 mov         r3, #0x1B, 24
  01804	e3833058	 orr         r3, r3, #0x58
  01808	e1520003	 cmp         r2, r3
  0180c	9a000001	 bls         |$LN22@AllocUsb2B|

; 490  :                 retv = 0;

  01810	e3a03000	 mov         r3, #0
  01814	e58d300c	 str         r3, [sp, #0xC]
  01818		 |$LN22@AllocUsb2B|

; 491  :         }

  01818	eaffffbe	 b           |$LN24@AllocUsb2B|
  0181c		 |$LN23@AllocUsb2B|

; 492  :         if (! retv)  // if allocation failed, deallocate

  0181c	e59d300c	 ldr         r3, [sp, #0xC]
  01820	e3530000	 cmp         r3, #0
  01824	1a000037	 bne         |$LN21@AllocUsb2B|

; 493  :         {
; 494  :             for (i = (ep->start_frame*MICROFRAMES_PER_FRAME) + ep->start_microframe;

  01828	e59d3054	 ldr         r3, [sp, #0x54]
  0182c	e2833012	 add         r3, r3, #0x12
  01830	e5d33000	 ldrb        r3, [r3]
  01834	e1a01003	 mov         r1, r3
  01838	e3a03008	 mov         r3, #8
  0183c	e0020391	 mul         r2, r1, r3
  01840	e59d3054	 ldr         r3, [sp, #0x54]
  01844	e2833013	 add         r3, r3, #0x13
  01848	e1d330d0	 ldrsb       r3, [r3]
  0184c	e0823003	 add         r3, r2, r3
  01850	e58d3000	 str         r3, [sp]

; 495  :                     i < MAXFRAMES*MICROFRAMES_PER_FRAME;

  01854	ea000005	 b           |$LN20@AllocUsb2B|
  01858		 |$LN19@AllocUsb2B|

; 496  :                     i += ep->actual_period){

  01858	e59d3054	 ldr         r3, [sp, #0x54]
  0185c	e2833010	 add         r3, r3, #0x10
  01860	e1d320b0	 ldrh        r2, [r3]
  01864	e59d3000	 ldr         r3, [sp]
  01868	e0833002	 add         r3, r3, r2
  0186c	e58d3000	 str         r3, [sp]
  01870		 |$LN20@AllocUsb2B|
  01870	e59d3000	 ldr         r3, [sp]
  01874	e3530c01	 cmp         r3, #1, 24
  01878	2a000022	 bcs         |$LN18@AllocUsb2B|

; 497  :                 HS_microframe_info[i/MICROFRAMES_PER_FRAME][i % MICROFRAMES_PER_FRAME].time_used -= ep->calc_bus_time;

  0187c	e59d3044	 ldr         r3, [sp, #0x44]
  01880	e2834024	 add         r4, r3, #0x24
  01884	e59d1000	 ldr         r1, [sp]
  01888	e3a00008	 mov         r0, #8
  0188c	eb000000	 bl          __rt_udiv
  01890	e3a03020	 mov         r3, #0x20
  01894	e0030390	 mul         r3, r0, r3
  01898	e0844003	 add         r4, r4, r3
  0189c	e59d1000	 ldr         r1, [sp]
  018a0	e3a00008	 mov         r0, #8
  018a4	eb000000	 bl          __rt_udiv
  018a8	e3a03004	 mov         r3, #4
  018ac	e0030391	 mul         r3, r1, r3
  018b0	e0841003	 add         r1, r4, r3
  018b4	e59d3054	 ldr         r3, [sp, #0x54]
  018b8	e283300c	 add         r3, r3, #0xC
  018bc	e1d320b0	 ldrh        r2, [r3]
  018c0	e5913000	 ldr         r3, [r1]
  018c4	e0435002	 sub         r5, r3, r2
  018c8	e59d1000	 ldr         r1, [sp]
  018cc	e3a00008	 mov         r0, #8
  018d0	eb000000	 bl          __rt_udiv
  018d4	e3a03004	 mov         r3, #4
  018d8	e0040391	 mul         r4, r1, r3
  018dc	e59d1000	 ldr         r1, [sp]
  018e0	e3a00008	 mov         r0, #8
  018e4	eb000000	 bl          __rt_udiv
  018e8	e3a03020	 mov         r3, #0x20
  018ec	e0020390	 mul         r2, r0, r3
  018f0	e59d3044	 ldr         r3, [sp, #0x44]
  018f4	e2833024	 add         r3, r3, #0x24
  018f8	e0833002	 add         r3, r3, r2
  018fc	e0833004	 add         r3, r3, r4
  01900	e5835000	 str         r5, [r3]

; 498  :             }

  01904	eaffffd3	 b           |$LN19@AllocUsb2B|
  01908		 |$LN18@AllocUsb2B|
  01908		 |$LN21@AllocUsb2B|

; 499  :         }
; 500  :         Unlock();

  01908	e59d0044	 ldr         r0, [sp, #0x44]
  0190c	eb000000	 bl          |?Unlock@LockObject@@QAAXXZ|

; 501  :         return retv;

  01910	e59d300c	 ldr         r3, [sp, #0xC]
  01914	e58d3018	 str         r3, [sp, #0x18]
  01918	ea0000cd	 b           |$LN34@AllocUsb2B|
  0191c		 |$LN32@AllocUsb2B|

; 502  :     }
; 503  :     
; 504  :  
; 505  :     // above handles all speeds, the rest of this code is for split transaction processing
; 506  : 
; 507  :     //***
; 508  :     //*** 2. Calculate classic time required
; 509  :     //***
; 510  :     TransactionTrasnlate * pTT=GetTT( uHubAddress,uHubPort,ttContext);

  0191c	e59d3050	 ldr         r3, [sp, #0x50]
  01920	e5dd204c	 ldrb        r2, [sp, #0x4C]
  01924	e5dd1048	 ldrb        r1, [sp, #0x48]
  01928	e59d0044	 ldr         r0, [sp, #0x44]
  0192c	eb000000	 bl          |?GetTT@USB2lib@@QAAPAVTransactionTrasnlate@@EEH@Z|
  01930	e58d002c	 str         r0, [sp, #0x2C]
  01934	e59d302c	 ldr         r3, [sp, #0x2C]
  01938	e58d3010	 str         r3, [sp, #0x10]

; 511  :     if (pTT== NULL || pTT->AddedEp(ep)!=TRUE) {

  0193c	e59d3010	 ldr         r3, [sp, #0x10]
  01940	e3530000	 cmp         r3, #0
  01944	0a000006	 beq         |$LN16@AllocUsb2B|
  01948	e59d1054	 ldr         r1, [sp, #0x54]
  0194c	e59d0010	 ldr         r0, [sp, #0x10]
  01950	eb000000	 bl          |?AddedEp@TransactionTrasnlate@@QAAHPAU_EndpointBuget@@@Z|
  01954	e58d0030	 str         r0, [sp, #0x30]
  01958	e59d3030	 ldr         r3, [sp, #0x30]
  0195c	e3530001	 cmp         r3, #1
  01960	0a000004	 beq         |$LN17@AllocUsb2B|
  01964		 |$LN16@AllocUsb2B|

; 512  :         Unlock();

  01964	e59d0044	 ldr         r0, [sp, #0x44]
  01968	eb000000	 bl          |?Unlock@LockObject@@QAAXXZ|

; 513  :         return 0;

  0196c	e3a03000	 mov         r3, #0
  01970	e58d3018	 str         r3, [sp, #0x18]
  01974	ea0000b6	 b           |$LN34@AllocUsb2B|
  01978		 |$LN17@AllocUsb2B|

; 514  :     }
; 515  :     
; 516  :     if ((ep->start_time + ep->calc_bus_time) > FS_MAX_PERIODIC_ALLOCATION)

  01978	e59d3054	 ldr         r3, [sp, #0x54]
  0197c	e283300e	 add         r3, r3, #0xE
  01980	e1d330b0	 ldrh        r3, [r3]
  01984	e1a02003	 mov         r2, r3
  01988	e59d3054	 ldr         r3, [sp, #0x54]
  0198c	e283300c	 add         r3, r3, #0xC
  01990	e1d330b0	 ldrh        r3, [r3]
  01994	e0822003	 add         r2, r2, r3
  01998	e3a03b01	 mov         r3, #1, 22
  0199c	e3833085	 orr         r3, r3, #0x85
  019a0	e1520003	 cmp         r2, r3
  019a4	da000008	 ble         |$LN15@AllocUsb2B|

; 517  :     {
; 518  : //      error("start time %d past end of frame", ep->start_time + ep->calc_bus_time);
; 519  :         ep->calc_bus_time = 0;

  019a8	e59d3054	 ldr         r3, [sp, #0x54]
  019ac	e283200c	 add         r2, r3, #0xC
  019b0	e3a03000	 mov         r3, #0
  019b4	e1c230b0	 strh        r3, [r2]

; 520  :         Unlock();

  019b8	e59d0044	 ldr         r0, [sp, #0x44]
  019bc	eb000000	 bl          |?Unlock@LockObject@@QAAXXZ|

; 521  :         return 0;

  019c0	e3a03000	 mov         r3, #0
  019c4	e58d3018	 str         r3, [sp, #0x18]
  019c8	ea0000a1	 b           |$LN34@AllocUsb2B|
  019cc		 |$LN15@AllocUsb2B|

; 522  :     }
; 523  : 
; 524  :     ep->start_microframe = (CHAR)((ep->start_time /  FS_BYTES_PER_MICROFRAME) - 1);

  019cc	e59d3054	 ldr         r3, [sp, #0x54]
  019d0	e283300e	 add         r3, r3, #0xE
  019d4	e1d330b0	 ldrh        r3, [r3]
  019d8	e1a01003	 mov         r1, r3
  019dc	e3a000bc	 mov         r0, #0xBC
  019e0	eb000000	 bl          __rt_sdiv
  019e4	e2403001	 sub         r3, r0, #1
  019e8	e1a02c03	 mov         r2, r3, lsl #24
  019ec	e1a02c42	 mov         r2, r2, asr #24
  019f0	e59d3054	 ldr         r3, [sp, #0x54]
  019f4	e2833013	 add         r3, r3, #0x13
  019f8	e5c32000	 strb        r2, [r3]

; 525  :     UCHAR lastcs = (UCHAR)(( (ep->start_time + ep->calc_bus_time) / FS_BYTES_PER_MICROFRAME) + 1);

  019fc	e59d3054	 ldr         r3, [sp, #0x54]
  01a00	e283300e	 add         r3, r3, #0xE
  01a04	e1d330b0	 ldrh        r3, [r3]
  01a08	e1a02003	 mov         r2, r3
  01a0c	e59d3054	 ldr         r3, [sp, #0x54]
  01a10	e283300c	 add         r3, r3, #0xC
  01a14	e1d330b0	 ldrh        r3, [r3]
  01a18	e0821003	 add         r1, r2, r3
  01a1c	e3a000bc	 mov         r0, #0xBC
  01a20	eb000000	 bl          __rt_sdiv
  01a24	e2803001	 add         r3, r0, #1
  01a28	e20330ff	 and         r3, r3, #0xFF
  01a2c	e5cd3004	 strb        r3, [sp, #4]

; 526  : 
; 527  :     // determine number of splits (starts and completes)
; 528  :     if (ep->direction == OUTDIR) {

  01a30	e59d3054	 ldr         r3, [sp, #0x54]
  01a34	e2833009	 add         r3, r3, #9
  01a38	e5d33000	 ldrb        r3, [r3]
  01a3c	e3530001	 cmp         r3, #1
  01a40	1a00002a	 bne         |$LN14@AllocUsb2B|

; 529  :         if (ep->ep_type == isoch)

  01a44	e59d3054	 ldr         r3, [sp, #0x54]
  01a48	e2833004	 add         r3, r3, #4
  01a4c	e5933000	 ldr         r3, [r3]
  01a50	e3530003	 cmp         r3, #3
  01a54	1a00000e	 bne         |$LN13@AllocUsb2B|

; 530  :         {
; 531  :             ep->num_starts = (UCHAR)((ep->max_packet / FS_BYTES_PER_MICROFRAME) + 1);

  01a58	e59d3054	 ldr         r3, [sp, #0x54]
  01a5c	e1d330b0	 ldrh        r3, [r3]
  01a60	e1a01003	 mov         r1, r3
  01a64	e3a000bc	 mov         r0, #0xBC
  01a68	eb000000	 bl          __rt_sdiv
  01a6c	e2803001	 add         r3, r0, #1
  01a70	e20320ff	 and         r2, r3, #0xFF
  01a74	e59d3054	 ldr         r3, [sp, #0x54]
  01a78	e2833014	 add         r3, r3, #0x14
  01a7c	e5c32000	 strb        r2, [r3]

; 532  :             ep->num_completes = 0;

  01a80	e59d3054	 ldr         r3, [sp, #0x54]
  01a84	e2832015	 add         r2, r3, #0x15
  01a88	e3a03000	 mov         r3, #0
  01a8c	e5c23000	 strb        r3, [r2]

; 533  :         } else // interrupt

  01a90	ea000015	 b           |$LN12@AllocUsb2B|
  01a94		 |$LN13@AllocUsb2B|

; 534  :         {
; 535  :             ep->num_starts = 1;

  01a94	e59d3054	 ldr         r3, [sp, #0x54]
  01a98	e2832014	 add         r2, r3, #0x14
  01a9c	e3a03001	 mov         r3, #1
  01aa0	e5c23000	 strb        r3, [r2]

; 536  :             ep->num_completes = 2;

  01aa4	e59d3054	 ldr         r3, [sp, #0x54]
  01aa8	e2832015	 add         r2, r3, #0x15
  01aac	e3a03002	 mov         r3, #2
  01ab0	e5c23000	 strb        r3, [r2]

; 537  :             if (ep->start_microframe + 1 < 6)

  01ab4	e59d3054	 ldr         r3, [sp, #0x54]
  01ab8	e2833013	 add         r3, r3, #0x13
  01abc	e1d330d0	 ldrsb       r3, [r3]
  01ac0	e2833001	 add         r3, r3, #1
  01ac4	e3530006	 cmp         r3, #6
  01ac8	aa000007	 bge         |$LN11@AllocUsb2B|

; 538  :                 ep->num_completes++;

  01acc	e59d3054	 ldr         r3, [sp, #0x54]
  01ad0	e2833015	 add         r3, r3, #0x15
  01ad4	e5d33000	 ldrb        r3, [r3]
  01ad8	e2833001	 add         r3, r3, #1
  01adc	e20320ff	 and         r2, r3, #0xFF
  01ae0	e59d3054	 ldr         r3, [sp, #0x54]
  01ae4	e2833015	 add         r3, r3, #0x15
  01ae8	e5c32000	 strb        r2, [r3]
  01aec		 |$LN11@AllocUsb2B|
  01aec		 |$LN12@AllocUsb2B|

; 539  :         }
; 540  :     } else { // IN

  01aec	ea000054	 b           |$LN10@AllocUsb2B|
  01af0		 |$LN14@AllocUsb2B|

; 541  :         if (ep->ep_type == isoch) {

  01af0	e59d3054	 ldr         r3, [sp, #0x54]
  01af4	e2833004	 add         r3, r3, #4
  01af8	e5933000	 ldr         r3, [r3]
  01afc	e3530003	 cmp         r3, #3
  01b00	1a000039	 bne         |$LN9@AllocUsb2B|

; 542  :             ep->num_starts = 1;

  01b04	e59d3054	 ldr         r3, [sp, #0x54]
  01b08	e2832014	 add         r2, r3, #0x14
  01b0c	e3a03001	 mov         r3, #1
  01b10	e5c23000	 strb        r3, [r2]

; 543  :             ep->num_completes = lastcs - (ep->start_microframe + 1);

  01b14	e5dd3004	 ldrb        r3, [sp, #4]
  01b18	e1a02003	 mov         r2, r3
  01b1c	e59d3054	 ldr         r3, [sp, #0x54]
  01b20	e2833013	 add         r3, r3, #0x13
  01b24	e1d330d0	 ldrsb       r3, [r3]
  01b28	e2833001	 add         r3, r3, #1
  01b2c	e0423003	 sub         r3, r2, r3
  01b30	e20320ff	 and         r2, r3, #0xFF
  01b34	e59d3054	 ldr         r3, [sp, #0x54]
  01b38	e2833015	 add         r3, r3, #0x15
  01b3c	e5c32000	 strb        r2, [r3]

; 544  :             if (lastcs <= 6)

  01b40	e5dd3004	 ldrb        r3, [sp, #4]
  01b44	e3530006	 cmp         r3, #6
  01b48	ca000016	 bgt         |$LN8@AllocUsb2B|

; 545  :             {
; 546  :                 if ((ep->start_microframe + 1) == 0)

  01b4c	e59d3054	 ldr         r3, [sp, #0x54]
  01b50	e2833013	 add         r3, r3, #0x13
  01b54	e1d330d0	 ldrsb       r3, [r3]
  01b58	e2933001	 adds        r3, r3, #1
  01b5c	1a000008	 bne         |$LN7@AllocUsb2B|

; 547  :                     ep->num_completes++;

  01b60	e59d3054	 ldr         r3, [sp, #0x54]
  01b64	e2833015	 add         r3, r3, #0x15
  01b68	e5d33000	 ldrb        r3, [r3]
  01b6c	e2833001	 add         r3, r3, #1
  01b70	e20320ff	 and         r2, r3, #0xFF
  01b74	e59d3054	 ldr         r3, [sp, #0x54]
  01b78	e2833015	 add         r3, r3, #0x15
  01b7c	e5c32000	 strb        r2, [r3]

; 548  :                 else

  01b80	ea000007	 b           |$LN6@AllocUsb2B|
  01b84		 |$LN7@AllocUsb2B|

; 549  :                     ep->num_completes += 2;  // this can cause one CS to be in the next frame

  01b84	e59d3054	 ldr         r3, [sp, #0x54]
  01b88	e2833015	 add         r3, r3, #0x15
  01b8c	e5d33000	 ldrb        r3, [r3]
  01b90	e2831002	 add         r1, r3, #2
  01b94	e59d3054	 ldr         r3, [sp, #0x54]
  01b98	e2832015	 add         r2, r3, #0x15
  01b9c	e20130ff	 and         r3, r1, #0xFF
  01ba0	e5c23000	 strb        r3, [r2]
  01ba4		 |$LN6@AllocUsb2B|
  01ba4	ea00000f	 b           |$LN5@AllocUsb2B|
  01ba8		 |$LN8@AllocUsb2B|

; 550  :             }
; 551  :             else if (lastcs == 7)

  01ba8	e5dd3004	 ldrb        r3, [sp, #4]
  01bac	e3530007	 cmp         r3, #7
  01bb0	1a00000c	 bne         |$LN4@AllocUsb2B|

; 552  :             {
; 553  :                 if ((ep->start_microframe + 1) != 0)

  01bb4	e59d3054	 ldr         r3, [sp, #0x54]
  01bb8	e2833013	 add         r3, r3, #0x13
  01bbc	e1d330d0	 ldrsb       r3, [r3]
  01bc0	e2933001	 adds        r3, r3, #1
  01bc4	0a000007	 beq         |$LN3@AllocUsb2B|

; 554  :                     ep->num_completes++;  // only one more CS if late in the frame.

  01bc8	e59d3054	 ldr         r3, [sp, #0x54]
  01bcc	e2833015	 add         r3, r3, #0x15
  01bd0	e5d33000	 ldrb        r3, [r3]
  01bd4	e2833001	 add         r3, r3, #1
  01bd8	e20320ff	 and         r2, r3, #0xFF
  01bdc	e59d3054	 ldr         r3, [sp, #0x54]
  01be0	e2833015	 add         r3, r3, #0x15
  01be4	e5c32000	 strb        r2, [r3]
  01be8		 |$LN3@AllocUsb2B|
  01be8		 |$LN4@AllocUsb2B|
  01be8		 |$LN5@AllocUsb2B|

; 555  :             }
; 556  : 
; 557  :         } else // interrupt

  01be8	ea000015	 b           |$LN2@AllocUsb2B|
  01bec		 |$LN9@AllocUsb2B|

; 558  :         {
; 559  :             ep->num_starts = 1;

  01bec	e59d3054	 ldr         r3, [sp, #0x54]
  01bf0	e2832014	 add         r2, r3, #0x14
  01bf4	e3a03001	 mov         r3, #1
  01bf8	e5c23000	 strb        r3, [r2]

; 560  :             ep->num_completes = 2;

  01bfc	e59d3054	 ldr         r3, [sp, #0x54]
  01c00	e2832015	 add         r2, r3, #0x15
  01c04	e3a03002	 mov         r3, #2
  01c08	e5c23000	 strb        r3, [r2]

; 561  :             if (ep->start_microframe + 1 < 6)

  01c0c	e59d3054	 ldr         r3, [sp, #0x54]
  01c10	e2833013	 add         r3, r3, #0x13
  01c14	e1d330d0	 ldrsb       r3, [r3]
  01c18	e2833001	 add         r3, r3, #1
  01c1c	e3530006	 cmp         r3, #6
  01c20	aa000007	 bge         |$LN1@AllocUsb2B|

; 562  :                 ep->num_completes++;

  01c24	e59d3054	 ldr         r3, [sp, #0x54]
  01c28	e2833015	 add         r3, r3, #0x15
  01c2c	e5d33000	 ldrb        r3, [r3]
  01c30	e2833001	 add         r3, r3, #1
  01c34	e20320ff	 and         r2, r3, #0xFF
  01c38	e59d3054	 ldr         r3, [sp, #0x54]
  01c3c	e2833015	 add         r3, r3, #0x15
  01c40	e5c32000	 strb        r2, [r3]
  01c44		 |$LN1@AllocUsb2B|
  01c44		 |$LN2@AllocUsb2B|
  01c44		 |$LN10@AllocUsb2B|

; 563  :         }
; 564  :     }  // end of IN
; 565  :     Unlock();

  01c44	e59d0044	 ldr         r0, [sp, #0x44]
  01c48	eb000000	 bl          |?Unlock@LockObject@@QAAXXZ|

; 566  :     return retv;

  01c4c	e59d300c	 ldr         r3, [sp, #0xC]
  01c50	e58d3018	 str         r3, [sp, #0x18]
  01c54		 |$LN34@AllocUsb2B|

; 567  : }

  01c54	e59d0018	 ldr         r0, [sp, #0x18]
  01c58	e28dd034	 add         sp, sp, #0x34
  01c5c	e89d6030	 ldmia       sp, {r4, r5, sp, lr}
  01c60	e12fff1e	 bx          lr
  01c64		 |$LN43@AllocUsb2B|
  01c64		 |$LN44@AllocUsb2B|
  01c64	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  01c68		 |$LN45@AllocUsb2B|
  01c68	00000000	 DCD         |??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@|
  01c6c		 |$LN46@AllocUsb2B|
  01c6c	00000000	 DCD         |??_C@_1LO@DIADDDPC@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  01c70		 |$LN47@AllocUsb2B|
  01c70	00000000	 DCD         |??_C@_1DK@LALOJPCH@?$AAe?$AAn?$AAd?$AAp?$AAo?$AAi?$AAn?$AAt?$AA?5?$AAa?$AAl?$AAr?$AAe?$AAa?$AAd?$AAy?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  01c74		 |$M32909|

			 ENDP  ; |?AllocUsb2BusTime@USB2lib@@QAAHEEHPAU_EndpointBuget@@@Z|, USB2lib::AllocUsb2BusTime

	EXPORT	|?FreeUsb2BusTime@USB2lib@@QAAXEEHPAU_EndpointBuget@@@Z| ; USB2lib::FreeUsb2BusTime

  00078			 AREA	 |.pdata|, PDATA
|$T32923| DCD	|$LN16@FreeUsb2Bu|
	DCD	0x40009404
; Function compile flags: /Odtp

  01c74			 AREA	 |.text|, CODE, ARM

  01c74		 |?FreeUsb2BusTime@USB2lib@@QAAXEEHPAU_EndpointBuget@@@Z| PROC ; USB2lib::FreeUsb2BusTime

; 570  : {

  01c74		 |$LN16@FreeUsb2Bu|
  01c74	e1a0c00d	 mov         r12, sp
  01c78	e92d000f	 stmdb       sp!, {r0 - r3}
  01c7c	e92d5030	 stmdb       sp!, {r4, r5, r12, lr}
  01c80	e24dd010	 sub         sp, sp, #0x10
  01c84		 |$M32920|

; 571  :     Lock();

  01c84	e59d0020	 ldr         r0, [sp, #0x20]
  01c88	eb000000	 bl          |?Lock@LockObject@@QAAXXZ|

; 572  :     if (ep && ep->calc_bus_time!=0){

  01c8c	e59d3030	 ldr         r3, [sp, #0x30]
  01c90	e3530000	 cmp         r3, #0
  01c94	0a000082	 beq         |$LN9@FreeUsb2Bu|
  01c98	e59d3030	 ldr         r3, [sp, #0x30]
  01c9c	e283300c	 add         r3, r3, #0xC
  01ca0	e1d330b0	 ldrh        r3, [r3]
  01ca4	e3530000	 cmp         r3, #0
  01ca8	0a00007d	 beq         |$LN9@FreeUsb2Bu|

; 573  :     // handle nonsplit HS allocation
; 574  :         if (ep->speed == HSSPEED) {

  01cac	e59d3030	 ldr         r3, [sp, #0x30]
  01cb0	e283300a	 add         r3, r3, #0xA
  01cb4	e5d33000	 ldrb        r3, [r3]
  01cb8	e3530002	 cmp         r3, #2
  01cbc	1a00006a	 bne         |$LN8@FreeUsb2Bu|

; 575  :             for (DWORD i = (ep->start_frame*MICROFRAMES_PER_FRAME) + ep->start_microframe;

  01cc0	e59d3030	 ldr         r3, [sp, #0x30]
  01cc4	e2833012	 add         r3, r3, #0x12
  01cc8	e5d33000	 ldrb        r3, [r3]
  01ccc	e1a01003	 mov         r1, r3
  01cd0	e3a03008	 mov         r3, #8
  01cd4	e0020391	 mul         r2, r1, r3
  01cd8	e59d3030	 ldr         r3, [sp, #0x30]
  01cdc	e2833013	 add         r3, r3, #0x13
  01ce0	e1d330d0	 ldrsb       r3, [r3]
  01ce4	e0823003	 add         r3, r2, r3
  01ce8	e58d3000	 str         r3, [sp]

; 576  :                    i < MAXFRAMES*MICROFRAMES_PER_FRAME;

  01cec	ea000005	 b           |$LN7@FreeUsb2Bu|
  01cf0		 |$LN6@FreeUsb2Bu|

; 577  :                    i += ep->actual_period){

  01cf0	e59d3030	 ldr         r3, [sp, #0x30]
  01cf4	e2833010	 add         r3, r3, #0x10
  01cf8	e1d320b0	 ldrh        r2, [r3]
  01cfc	e59d3000	 ldr         r3, [sp]
  01d00	e0833002	 add         r3, r3, r2
  01d04	e58d3000	 str         r3, [sp]
  01d08		 |$LN7@FreeUsb2Bu|
  01d08	e59d3000	 ldr         r3, [sp]
  01d0c	e3530c01	 cmp         r3, #1, 24
  01d10	2a000054	 bcs         |$LN5@FreeUsb2Bu|

; 578  :                 if (HS_microframe_info[i/MICROFRAMES_PER_FRAME][i % MICROFRAMES_PER_FRAME].time_used >= ep->calc_bus_time)

  01d14	e59d3020	 ldr         r3, [sp, #0x20]
  01d18	e2834024	 add         r4, r3, #0x24
  01d1c	e59d1000	 ldr         r1, [sp]
  01d20	e3a00008	 mov         r0, #8
  01d24	eb000000	 bl          __rt_udiv
  01d28	e3a03020	 mov         r3, #0x20
  01d2c	e0030390	 mul         r3, r0, r3
  01d30	e0844003	 add         r4, r4, r3
  01d34	e59d1000	 ldr         r1, [sp]
  01d38	e3a00008	 mov         r0, #8
  01d3c	eb000000	 bl          __rt_udiv
  01d40	e3a03004	 mov         r3, #4
  01d44	e0030391	 mul         r3, r1, r3
  01d48	e0841003	 add         r1, r4, r3
  01d4c	e59d3030	 ldr         r3, [sp, #0x30]
  01d50	e283300c	 add         r3, r3, #0xC
  01d54	e1d320b0	 ldrh        r2, [r3]
  01d58	e5913000	 ldr         r3, [r1]
  01d5c	e1530002	 cmp         r3, r2
  01d60	3a000022	 bcc         |$LN4@FreeUsb2Bu|

; 579  :                     HS_microframe_info[i/MICROFRAMES_PER_FRAME][i % MICROFRAMES_PER_FRAME].time_used -= ep->calc_bus_time;

  01d64	e59d3020	 ldr         r3, [sp, #0x20]
  01d68	e2834024	 add         r4, r3, #0x24
  01d6c	e59d1000	 ldr         r1, [sp]
  01d70	e3a00008	 mov         r0, #8
  01d74	eb000000	 bl          __rt_udiv
  01d78	e3a03020	 mov         r3, #0x20
  01d7c	e0030390	 mul         r3, r0, r3
  01d80	e0844003	 add         r4, r4, r3
  01d84	e59d1000	 ldr         r1, [sp]
  01d88	e3a00008	 mov         r0, #8
  01d8c	eb000000	 bl          __rt_udiv
  01d90	e3a03004	 mov         r3, #4
  01d94	e0030391	 mul         r3, r1, r3
  01d98	e0841003	 add         r1, r4, r3
  01d9c	e59d3030	 ldr         r3, [sp, #0x30]
  01da0	e283300c	 add         r3, r3, #0xC
  01da4	e1d320b0	 ldrh        r2, [r3]
  01da8	e5913000	 ldr         r3, [r1]
  01dac	e0435002	 sub         r5, r3, r2
  01db0	e59d1000	 ldr         r1, [sp]
  01db4	e3a00008	 mov         r0, #8
  01db8	eb000000	 bl          __rt_udiv
  01dbc	e3a03004	 mov         r3, #4
  01dc0	e0040391	 mul         r4, r1, r3
  01dc4	e59d1000	 ldr         r1, [sp]
  01dc8	e3a00008	 mov         r0, #8
  01dcc	eb000000	 bl          __rt_udiv
  01dd0	e3a03020	 mov         r3, #0x20
  01dd4	e0020390	 mul         r2, r0, r3
  01dd8	e59d3020	 ldr         r3, [sp, #0x20]
  01ddc	e2833024	 add         r3, r3, #0x24
  01de0	e0833002	 add         r3, r3, r2
  01de4	e0833004	 add         r3, r3, r4
  01de8	e5835000	 str         r5, [r3]

; 580  :                 else {

  01dec	ea00001c	 b           |$LN3@FreeUsb2Bu|
  01df0		 |$LN4@FreeUsb2Bu|

; 581  :                     ASSERT(FALSE);

  01df0	ea000002	 b           |$LN12@FreeUsb2Bu|
  01df4	e3a03001	 mov         r3, #1
  01df8	e58d3008	 str         r3, [sp, #8]
  01dfc	ea000008	 b           |$LN13@FreeUsb2Bu|
  01e00		 |$LN12@FreeUsb2Bu|
  01e00	e3a03c02	 mov         r3, #2, 24
  01e04	e3833045	 orr         r3, r3, #0x45
  01e08	e59f20b0	 ldr         r2, [pc, #0xB0]
  01e0c	e59f10a8	 ldr         r1, [pc, #0xA8]
  01e10	e59f00a0	 ldr         r0, [pc, #0xA0]
  01e14	eb000000	 bl          NKDbgPrintfW
  01e18	e6000010	 __debugbreak_ce
  01e1c	e3a03000	 mov         r3, #0
  01e20	e58d3008	 str         r3, [sp, #8]
  01e24		 |$LN13@FreeUsb2Bu|

; 582  :                     HS_microframe_info[i/MICROFRAMES_PER_FRAME][i % MICROFRAMES_PER_FRAME].time_used =0;

  01e24	e59d3020	 ldr         r3, [sp, #0x20]
  01e28	e2834024	 add         r4, r3, #0x24
  01e2c	e59d1000	 ldr         r1, [sp]
  01e30	e3a00008	 mov         r0, #8
  01e34	eb000000	 bl          __rt_udiv
  01e38	e3a03020	 mov         r3, #0x20
  01e3c	e0030390	 mul         r3, r0, r3
  01e40	e0844003	 add         r4, r4, r3
  01e44	e59d1000	 ldr         r1, [sp]
  01e48	e3a00008	 mov         r0, #8
  01e4c	eb000000	 bl          __rt_udiv
  01e50	e3a03004	 mov         r3, #4
  01e54	e0030391	 mul         r3, r1, r3
  01e58	e0842003	 add         r2, r4, r3
  01e5c	e3a03000	 mov         r3, #0
  01e60	e5823000	 str         r3, [r2]
  01e64		 |$LN3@FreeUsb2Bu|

; 583  :                 }
; 584  :             }

  01e64	eaffffa1	 b           |$LN6@FreeUsb2Bu|
  01e68		 |$LN5@FreeUsb2Bu|

; 585  :         }
; 586  :         else {

  01e68	ea00000d	 b           |$LN2@FreeUsb2Bu|
  01e6c		 |$LN8@FreeUsb2Bu|

; 587  :             TransactionTrasnlate * pTT=GetTT( uHubAddress,uHubPort,ttContext);

  01e6c	e59d302c	 ldr         r3, [sp, #0x2C]
  01e70	e5dd2028	 ldrb        r2, [sp, #0x28]
  01e74	e5dd1024	 ldrb        r1, [sp, #0x24]
  01e78	e59d0020	 ldr         r0, [sp, #0x20]
  01e7c	eb000000	 bl          |?GetTT@USB2lib@@QAAPAVTransactionTrasnlate@@EEH@Z|
  01e80	e58d000c	 str         r0, [sp, #0xC]
  01e84	e59d300c	 ldr         r3, [sp, #0xC]
  01e88	e58d3004	 str         r3, [sp, #4]

; 588  :             if (pTT!=NULL)

  01e8c	e59d3004	 ldr         r3, [sp, #4]
  01e90	e3530000	 cmp         r3, #0
  01e94	0a000002	 beq         |$LN1@FreeUsb2Bu|

; 589  :                 pTT->DeletedEp(ep);

  01e98	e59d1030	 ldr         r1, [sp, #0x30]
  01e9c	e59d0004	 ldr         r0, [sp, #4]
  01ea0	eb000000	 bl          |?DeletedEp@TransactionTrasnlate@@QAAHPAU_EndpointBuget@@@Z|
  01ea4		 |$LN1@FreeUsb2Bu|
  01ea4		 |$LN2@FreeUsb2Bu|
  01ea4		 |$LN9@FreeUsb2Bu|

; 590  :         }
; 591  :      }
; 592  :     Unlock();

  01ea4	e59d0020	 ldr         r0, [sp, #0x20]
  01ea8	eb000000	 bl          |?Unlock@LockObject@@QAAXXZ|

; 593  : }

  01eac	e28dd010	 add         sp, sp, #0x10
  01eb0	e89d6030	 ldmia       sp, {r4, r5, sp, lr}
  01eb4	e12fff1e	 bx          lr
  01eb8		 |$LN17@FreeUsb2Bu|
  01eb8		 |$LN18@FreeUsb2Bu|
  01eb8	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  01ebc		 |$LN19@FreeUsb2Bu|
  01ebc	00000000	 DCD         |??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@|
  01ec0		 |$LN20@FreeUsb2Bu|
  01ec0	00000000	 DCD         |??_C@_1LO@DIADDDPC@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  01ec4		 |$M32921|

			 ENDP  ; |?FreeUsb2BusTime@USB2lib@@QAAXEEHPAU_EndpointBuget@@@Z|, USB2lib::FreeUsb2BusTime

	EXPORT	|?ConvertBtoHFrame@USB2lib@@AAAXEEPAE0@Z| ; USB2lib::ConvertBtoHFrame
	EXPORT	|?GetSMASK@USB2lib@@QAAEPAU_EndpointBuget@@@Z| ; USB2lib::GetSMASK

  00080			 AREA	 |.pdata|, PDATA
|$T32934| DCD	|$LN10@GetSMASK|
	DCD	0x40004004
; Function compile flags: /Odtp

  01ec4			 AREA	 |.text|, CODE, ARM

  01ec4		 |?GetSMASK@USB2lib@@QAAEPAU_EndpointBuget@@@Z| PROC ; USB2lib::GetSMASK

; 597  : {

  01ec4		 |$LN10@GetSMASK|
  01ec4	e1a0c00d	 mov         r12, sp
  01ec8	e92d0003	 stmdb       sp!, {r0, r1}
  01ecc	e92d5000	 stmdb       sp!, {r12, lr}
  01ed0	e24dd018	 sub         sp, sp, #0x18
  01ed4		 |$M32931|

; 598  :     UCHAR       tmp = 0;

  01ed4	e3a03000	 mov         r3, #0
  01ed8	e5cd3004	 strb        r3, [sp, #4]

; 599  : 
; 600  : 
; 601  :     if(Ep->speed == HSSPEED) {

  01edc	e59d3024	 ldr         r3, [sp, #0x24]
  01ee0	e283300a	 add         r3, r3, #0xA
  01ee4	e5d33000	 ldrb        r3, [r3]
  01ee8	e3530002	 cmp         r3, #2
  01eec	1a000009	 bne         |$LN5@GetSMASK|

; 602  : //DBGPRINT(("in GetSMASK StartUFrame on High Speed Endpoint = 0x%x\n", Ep->start_microframe));
; 603  :         tmp |= 1 << Ep->start_microframe;

  01ef0	e59d3024	 ldr         r3, [sp, #0x24]
  01ef4	e2833013	 add         r3, r3, #0x13
  01ef8	e1d320d0	 ldrsb       r2, [r3]
  01efc	e3a03001	 mov         r3, #1
  01f00	e1a02213	 mov         r2, r3, lsl r2
  01f04	e5dd3004	 ldrb        r3, [sp, #4]
  01f08	e1833002	 orr         r3, r3, r2
  01f0c	e20330ff	 and         r3, r3, #0xFF
  01f10	e5cd3004	 strb        r3, [sp, #4]

; 604  :     } else {

  01f14	ea000024	 b           |$LN4@GetSMASK|
  01f18		 |$LN5@GetSMASK|

; 605  :         ULONG       ilop;
; 606  :         UCHAR       HFrame;         // H (Host) frame for endpoint
; 607  :         UCHAR       HUFrame;        // H (Host) micro frame for endpoint
; 608  :         // For Full and Low Speed Endpoints 
; 609  :         // the budgeter returns a bframe. Convert to HUFrame to get SMASK
; 610  :         ConvertBtoHFrame((UCHAR)Ep->start_frame, (UCHAR)Ep->start_microframe, &HFrame, &HUFrame);

  01f18	e28d300c	 add         r3, sp, #0xC
  01f1c	e58d3000	 str         r3, [sp]
  01f20	e28d3005	 add         r3, sp, #5
  01f24	e59d2024	 ldr         r2, [sp, #0x24]
  01f28	e2822013	 add         r2, r2, #0x13
  01f2c	e1d220d0	 ldrsb       r2, [r2]
  01f30	e20220ff	 and         r2, r2, #0xFF
  01f34	e59d1024	 ldr         r1, [sp, #0x24]
  01f38	e2811012	 add         r1, r1, #0x12
  01f3c	e5d11000	 ldrb        r1, [r1]
  01f40	e59d0020	 ldr         r0, [sp, #0x20]
  01f44	eb000000	 bl          |?ConvertBtoHFrame@USB2lib@@AAAXEEPAE0@Z|

; 611  : 
; 612  :         for(ilop = 0; ilop < Ep->num_starts; ilop++) {

  01f48	e3a03000	 mov         r3, #0
  01f4c	e58d3008	 str         r3, [sp, #8]
  01f50	ea000002	 b           |$LN3@GetSMASK|
  01f54		 |$LN2@GetSMASK|
  01f54	e59d3008	 ldr         r3, [sp, #8]
  01f58	e2833001	 add         r3, r3, #1
  01f5c	e58d3008	 str         r3, [sp, #8]
  01f60		 |$LN3@GetSMASK|
  01f60	e59d3024	 ldr         r3, [sp, #0x24]
  01f64	e2833014	 add         r3, r3, #0x14
  01f68	e5d32000	 ldrb        r2, [r3]
  01f6c	e59d3008	 ldr         r3, [sp, #8]
  01f70	e1530002	 cmp         r3, r2
  01f74	2a00000c	 bcs         |$LN1@GetSMASK|

; 613  :             tmp |= 1 << HUFrame++;

  01f78	e5dd300c	 ldrb        r3, [sp, #0xC]
  01f7c	e1a02003	 mov         r2, r3
  01f80	e3a03001	 mov         r3, #1
  01f84	e1a02213	 mov         r2, r3, lsl r2
  01f88	e5dd3004	 ldrb        r3, [sp, #4]
  01f8c	e1833002	 orr         r3, r3, r2
  01f90	e20330ff	 and         r3, r3, #0xFF
  01f94	e5cd3004	 strb        r3, [sp, #4]
  01f98	e5dd300c	 ldrb        r3, [sp, #0xC]
  01f9c	e2833001	 add         r3, r3, #1
  01fa0	e20330ff	 and         r3, r3, #0xFF
  01fa4	e5cd300c	 strb        r3, [sp, #0xC]

; 614  :         }

  01fa8	eaffffe9	 b           |$LN2@GetSMASK|
  01fac		 |$LN1@GetSMASK|
  01fac		 |$LN4@GetSMASK|

; 615  :     }
; 616  : 
; 617  :     return tmp;

  01fac	e5dd3004	 ldrb        r3, [sp, #4]
  01fb0	e5cd3014	 strb        r3, [sp, #0x14]

; 618  : };

  01fb4	e5dd0014	 ldrb        r0, [sp, #0x14]
  01fb8	e28dd018	 add         sp, sp, #0x18
  01fbc	e89d6000	 ldmia       sp, {sp, lr}
  01fc0	e12fff1e	 bx          lr
  01fc4		 |$M32932|

			 ENDP  ; |?GetSMASK@USB2lib@@QAAEPAU_EndpointBuget@@@Z|, USB2lib::GetSMASK

	EXPORT	|?GetCMASK@USB2lib@@QAAEPAU_EndpointBuget@@@Z| ; USB2lib::GetCMASK

  00088			 AREA	 |.pdata|, PDATA
|$T32942| DCD	|$LN16@GetCMASK|
	DCD	0x40007204
; Function compile flags: /Odtp

  01fc4			 AREA	 |.text|, CODE, ARM

  01fc4		 |?GetCMASK@USB2lib@@QAAEPAU_EndpointBuget@@@Z| PROC ; USB2lib::GetCMASK

; 633  : {

  01fc4		 |$LN16@GetCMASK|
  01fc4	e1a0c00d	 mov         r12, sp
  01fc8	e92d0003	 stmdb       sp!, {r0, r1}
  01fcc	e92d5000	 stmdb       sp!, {r12, lr}
  01fd0	e24dd01c	 sub         sp, sp, #0x1C
  01fd4		 |$M32939|

; 634  : 
; 635  :     if(Ep->speed == HSSPEED) {

  01fd4	e59d3028	 ldr         r3, [sp, #0x28]
  01fd8	e283300a	 add         r3, r3, #0xA
  01fdc	e5d33000	 ldrb        r3, [r3]
  01fe0	e3530002	 cmp         r3, #2
  01fe4	1a000003	 bne         |$LN11@GetCMASK|

; 636  :         return 0;

  01fe8	e3a03000	 mov         r3, #0
  01fec	e5cd3010	 strb        r3, [sp, #0x10]
  01ff0	ea000060	 b           |$LN12@GetCMASK|
  01ff4	ea00005f	 b           |$LN10@GetCMASK|
  01ff8		 |$LN11@GetCMASK|

; 637  :     } else if(Ep->ep_type == interrupt) {

  01ff8	e59d3028	 ldr         r3, [sp, #0x28]
  01ffc	e2833004	 add         r3, r3, #4
  02000	e5933000	 ldr         r3, [r3]
  02004	e3530002	 cmp         r3, #2
  02008	1a000013	 bne         |$LN9@GetCMASK|

; 638  :         UCHAR       HFrame;         // H (Host) frame for endpoint
; 639  :         UCHAR       HUFrame;        // H (Host) micro frame for endpoint
; 640  : 
; 641  :         ConvertBtoHFrame((UCHAR)Ep->start_frame, (UCHAR)Ep->start_microframe, 
; 642  :             &HFrame, &HUFrame);

  0200c	e28d3005	 add         r3, sp, #5
  02010	e58d3000	 str         r3, [sp]
  02014	e28d3004	 add         r3, sp, #4
  02018	e59d2028	 ldr         r2, [sp, #0x28]
  0201c	e2822013	 add         r2, r2, #0x13
  02020	e1d220d0	 ldrsb       r2, [r2]
  02024	e20220ff	 and         r2, r2, #0xFF
  02028	e59d1028	 ldr         r1, [sp, #0x28]
  0202c	e2811012	 add         r1, r1, #0x12
  02030	e5d11000	 ldrb        r1, [r1]
  02034	e59d0024	 ldr         r0, [sp, #0x24]
  02038	eb000000	 bl          |?ConvertBtoHFrame@USB2lib@@AAAXEEPAE0@Z|

; 643  : 
; 644  :         return CMASKS[HUFrame];

  0203c	e5dd3005	 ldrb        r3, [sp, #5]
  02040	e1a02003	 mov         r2, r3
  02044	e59f313c	 ldr         r3, [pc, #0x13C]
  02048	e0833002	 add         r3, r3, r2
  0204c	e5d33000	 ldrb        r3, [r3]
  02050	e5cd3010	 strb        r3, [sp, #0x10]
  02054	ea000047	 b           |$LN12@GetCMASK|

; 645  :     } else {

  02058	ea000046	 b           |$LN8@GetCMASK|
  0205c		 |$LN9@GetCMASK|

; 646  :         // Split ISO!
; 647  :         UCHAR       HFrame;         // H (Host) frame for endpoint
; 648  :         UCHAR       HUFrame;        // H (Host) micro frame for endpoint
; 649  :         UCHAR       tmp = 0;

  0205c	e3a03000	 mov         r3, #0
  02060	e5cd300d	 strb        r3, [sp, #0xD]

; 650  :         ULONG       NumCompletes;
; 651  : 
; 652  :         if(Ep->direction == OUTDIR) {

  02064	e59d3028	 ldr         r3, [sp, #0x28]
  02068	e2833009	 add         r3, r3, #9
  0206c	e5d33000	 ldrb        r3, [r3]
  02070	e3530001	 cmp         r3, #1
  02074	1a000002	 bne         |$LN7@GetCMASK|

; 653  :             // Split iso out -- NO complete splits
; 654  :             return 0;

  02078	e3a03000	 mov         r3, #0
  0207c	e5cd3010	 strb        r3, [sp, #0x10]
  02080	ea00003c	 b           |$LN12@GetCMASK|
  02084		 |$LN7@GetCMASK|

; 655  :         }
; 656  :         ConvertBtoHFrame((UCHAR)Ep->start_frame, (UCHAR)Ep->start_microframe, 
; 657  :             &HFrame, &HUFrame);

  02084	e28d300e	 add         r3, sp, #0xE
  02088	e58d3000	 str         r3, [sp]
  0208c	e28d300c	 add         r3, sp, #0xC
  02090	e59d2028	 ldr         r2, [sp, #0x28]
  02094	e2822013	 add         r2, r2, #0x13
  02098	e1d220d0	 ldrsb       r2, [r2]
  0209c	e20220ff	 and         r2, r2, #0xFF
  020a0	e59d1028	 ldr         r1, [sp, #0x28]
  020a4	e2811012	 add         r1, r1, #0x12
  020a8	e5d11000	 ldrb        r1, [r1]
  020ac	e59d0024	 ldr         r0, [sp, #0x24]
  020b0	eb000000	 bl          |?ConvertBtoHFrame@USB2lib@@AAAXEEPAE0@Z|

; 658  : 
; 659  :         HUFrame += 2;  

  020b4	e5dd300e	 ldrb        r3, [sp, #0xE]
  020b8	e2833002	 add         r3, r3, #2
  020bc	e20330ff	 and         r3, r3, #0xFF
  020c0	e5cd300e	 strb        r3, [sp, #0xE]

; 660  :         NumCompletes = Ep->num_completes;

  020c4	e59d3028	 ldr         r3, [sp, #0x28]
  020c8	e2833015	 add         r3, r3, #0x15
  020cc	e5d33000	 ldrb        r3, [r3]
  020d0	e58d3008	 str         r3, [sp, #8]
  020d4	ea000003	 b           |$LN6@GetCMASK|
  020d8		 |$LN5@GetCMASK|

; 661  : 
; 662  :         //      ASSERT(NumCompletes > 0);
; 663  : 
; 664  :         //
; 665  :         //  Set all CMASKS bits to be set at the end of the frame
; 666  :         // 
; 667  :         for(;  HUFrame < 8; HUFrame++) {

  020d8	e5dd300e	 ldrb        r3, [sp, #0xE]
  020dc	e2833001	 add         r3, r3, #1
  020e0	e20330ff	 and         r3, r3, #0xFF
  020e4	e5cd300e	 strb        r3, [sp, #0xE]
  020e8		 |$LN6@GetCMASK|
  020e8	e5dd300e	 ldrb        r3, [sp, #0xE]
  020ec	e3530008	 cmp         r3, #8
  020f0	aa00000f	 bge         |$LN4@GetCMASK|

; 668  :             tmp |= 1 <<  HUFrame;

  020f4	e5dd300e	 ldrb        r3, [sp, #0xE]
  020f8	e1a02003	 mov         r2, r3
  020fc	e3a03001	 mov         r3, #1
  02100	e1a02213	 mov         r2, r3, lsl r2
  02104	e5dd300d	 ldrb        r3, [sp, #0xD]
  02108	e1833002	 orr         r3, r3, r2
  0210c	e20330ff	 and         r3, r3, #0xFF
  02110	e5cd300d	 strb        r3, [sp, #0xD]

; 669  :             NumCompletes--; 

  02114	e59d3008	 ldr         r3, [sp, #8]
  02118	e2433001	 sub         r3, r3, #1
  0211c	e58d3008	 str         r3, [sp, #8]

; 670  :             if(!NumCompletes){

  02120	e59d3008	 ldr         r3, [sp, #8]
  02124	e3530000	 cmp         r3, #0
  02128	1a000000	 bne         |$LN3@GetCMASK|

; 671  :                 break;

  0212c	ea000000	 b           |$LN4@GetCMASK|
  02130		 |$LN3@GetCMASK|

; 672  :             }
; 673  :         }

  02130	eaffffe8	 b           |$LN5@GetCMASK|
  02134		 |$LN4@GetCMASK|
  02134		 |$LN2@GetCMASK|

; 674  : 
; 675  :         //
; 676  :         // Now set all CMASKS bits to be set at the end of the 
; 677  :         // frame I.E. for the next frame wrap condition
; 678  :         // 
; 679  :         while(NumCompletes) {

  02134	e59d3008	 ldr         r3, [sp, #8]
  02138	e3530000	 cmp         r3, #0
  0213c	0a00000b	 beq         |$LN1@GetCMASK|

; 680  :             tmp |= 1 << (HUFrame - 8); 

  02140	e5dd300e	 ldrb        r3, [sp, #0xE]
  02144	e2432008	 sub         r2, r3, #8
  02148	e3a03001	 mov         r3, #1
  0214c	e1a02213	 mov         r2, r3, lsl r2
  02150	e5dd300d	 ldrb        r3, [sp, #0xD]
  02154	e1833002	 orr         r3, r3, r2
  02158	e20330ff	 and         r3, r3, #0xFF
  0215c	e5cd300d	 strb        r3, [sp, #0xD]

; 681  :             NumCompletes--;

  02160	e59d3008	 ldr         r3, [sp, #8]
  02164	e2433001	 sub         r3, r3, #1
  02168	e58d3008	 str         r3, [sp, #8]

; 682  :         }

  0216c	eafffff0	 b           |$LN2@GetCMASK|
  02170		 |$LN1@GetCMASK|

; 683  : 
; 684  : //DBGPRINT(("in GetCMASK HFRAME = 0x%x HUFRAME 0x%x\n", HFrame, HUFrame));
; 685  :         return tmp;

  02170	e5dd300d	 ldrb        r3, [sp, #0xD]
  02174	e5cd3010	 strb        r3, [sp, #0x10]
  02178		 |$LN8@GetCMASK|
  02178		 |$LN10@GetCMASK|
  02178		 |$LN12@GetCMASK|

; 686  :     }
; 687  : }

  02178	e5dd0010	 ldrb        r0, [sp, #0x10]
  0217c	e28dd01c	 add         sp, sp, #0x1C
  02180	e89d6000	 ldmia       sp, {sp, lr}
  02184	e12fff1e	 bx          lr
  02188		 |$LN17@GetCMASK|
  02188		 |$LN18@GetCMASK|
  02188	00000000	 DCD         |?CMASKS@USB2lib@@0PAEA|
  0218c		 |$M32940|

			 ENDP  ; |?GetCMASK@USB2lib@@QAAEPAU_EndpointBuget@@@Z|, USB2lib::GetCMASK


  00090			 AREA	 |.pdata|, PDATA
|$T32949| DCD	|$LN8@ConvertBto|
	DCD	0x40002703
; Function compile flags: /Odtp

  0218c			 AREA	 |.text|, CODE, ARM

  0218c		 |?ConvertBtoHFrame@USB2lib@@AAAXEEPAE0@Z| PROC ; USB2lib::ConvertBtoHFrame

; 690  : {

  0218c		 |$LN8@ConvertBto|
  0218c	e1a0c00d	 mov         r12, sp
  02190	e92d000f	 stmdb       sp!, {r0 - r3}
  02194	e92d5000	 stmdb       sp!, {r12, lr}
  02198		 |$M32946|

; 691  :     // The budgeter returns funky values that we have to convert to something
; 692  :     // that the host controller understands.
; 693  :     // If bus micro frame is -1, that means that the start split is scheduled 
; 694  :     // in the last microframe of the previous bus frame.
; 695  :     // to convert to hframes, you simply change the microframe to 0 and 
; 696  :     // keep the bus frame (see one of the tables in the host controller spec 
; 697  :     // eg 4-17.
; 698  :     if(BUFrame == 0xFF) {

  02198	e5dd3010	 ldrb        r3, [sp, #0x10]
  0219c	e35300ff	 cmp         r3, #0xFF
  021a0	1a000005	 bne         |$LN3@ConvertBto|

; 699  :         *HUFrame = 0;

  021a4	e59d2018	 ldr         r2, [sp, #0x18]
  021a8	e3a03000	 mov         r3, #0
  021ac	e5c23000	 strb        r3, [r2]

; 700  :         *HFrame = BFrame;

  021b0	e5dd200c	 ldrb        r2, [sp, #0xC]
  021b4	e59d3014	 ldr         r3, [sp, #0x14]
  021b8	e5c32000	 strb        r2, [r3]
  021bc		 |$LN3@ConvertBto|

; 701  :     }
; 702  :         
; 703  :     // if the budgeter returns a value in the range from 0-6
; 704  :     // we simply add one to the bus micro frame to get the host 
; 705  :     // microframe
; 706  :     if(BUFrame >= 0 && BUFrame <= 6) {

  021bc	e5dd3010	 ldrb        r3, [sp, #0x10]
  021c0	e3530000	 cmp         r3, #0
  021c4	4a00000a	 bmi         |$LN2@ConvertBto|
  021c8	e5dd3010	 ldrb        r3, [sp, #0x10]
  021cc	e3530006	 cmp         r3, #6
  021d0	ca000007	 bgt         |$LN2@ConvertBto|

; 707  :         *HUFrame = BUFrame + 1;

  021d4	e5dd3010	 ldrb        r3, [sp, #0x10]
  021d8	e2833001	 add         r3, r3, #1
  021dc	e20320ff	 and         r2, r3, #0xFF
  021e0	e59d3018	 ldr         r3, [sp, #0x18]
  021e4	e5c32000	 strb        r2, [r3]

; 708  :         *HFrame = BFrame;

  021e8	e5dd200c	 ldrb        r2, [sp, #0xC]
  021ec	e59d3014	 ldr         r3, [sp, #0x14]
  021f0	e5c32000	 strb        r2, [r3]
  021f4		 |$LN2@ConvertBto|

; 709  :     }
; 710  : 
; 711  :     // if the budgeter returns a value of 7 for the bframe
; 712  :     // then the HUframe = 0 and the HUframe = buframe +1
; 713  :     if(BUFrame == 7) {

  021f4	e5dd3010	 ldrb        r3, [sp, #0x10]
  021f8	e3530007	 cmp         r3, #7
  021fc	1a000007	 bne         |$LN1@ConvertBto|

; 714  :         *HUFrame = 0;

  02200	e59d2018	 ldr         r2, [sp, #0x18]
  02204	e3a03000	 mov         r3, #0
  02208	e5c23000	 strb        r3, [r2]

; 715  :         *HFrame = BFrame + 1;

  0220c	e5dd300c	 ldrb        r3, [sp, #0xC]
  02210	e2833001	 add         r3, r3, #1
  02214	e20320ff	 and         r2, r3, #0xFF
  02218	e59d3014	 ldr         r3, [sp, #0x14]
  0221c	e5c32000	 strb        r2, [r3]
  02220		 |$LN1@ConvertBto|

; 716  :     }
; 717  : }

  02220	e89d6000	 ldmia       sp, {sp, lr}
  02224	e12fff1e	 bx          lr
  02228		 |$M32947|

			 ENDP  ; |?ConvertBtoHFrame@USB2lib@@AAAXEEPAE0@Z|, USB2lib::ConvertBtoHFrame

	END
