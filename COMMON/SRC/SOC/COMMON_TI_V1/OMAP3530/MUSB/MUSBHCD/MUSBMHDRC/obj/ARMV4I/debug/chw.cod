; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\OMAP3530\MUSB\MUSBHCD\MUSBMHDRC\chw.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|??_C@_1DK@JPBDFEOB@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAI?$AAN?$AAV?$AAA?$AAL?$AAI?$AAD?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DE@IMCKALLA@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAD?$AAO?$AAN?$AAE?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DI@CEGNOBAM@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAF?$AAA?$AAI?$AAL?$AAE?$AAD?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HO@PGHDEMEK@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAI?$AAG?$AAN?$AAA?$AAL?$AA_?$AAN?$AAE?$AAW?$AA_@| [ DATA ] ; `string'
	EXPORT	|??_C@_1II@FBBOBKGN@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAI?$AAN?$AAS?$AAE?$AAR?$AAT?$AA_?$AAN?$AAE?$AAW?$AA_@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FC@LCLFDJDO@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAC?$AAR?$AAE?$AAA?$AAT?$AAE?$AA_?$AAN?$AAE?$AAW?$AA_@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EI@COKEBMOE@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAC?$AAR?$AAE?$AAA?$AAT?$AAE?$AA_?$AAN?$AAE?$AAW?$AA_@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GG@HPGGGHKI@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAC?$AAH?$AAE?$AAD?$AAU?$AAL?$AAI?$AAN?$AAG?$AA_@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HG@KPBCOGEF@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAC?$AAH?$AAE?$AAD?$AAU?$AAL?$AAI?$AAN?$AAG?$AA_@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FG@CFFAAPDL@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAC?$AAH?$AAE?$AAD?$AAU?$AAL?$AAI?$AAN?$AAG?$AA_@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GA@NDHJOKMM@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAD?$AAE?$AAT?$AAE?$AAR?$AAM?$AAI?$AAN?$AAE?$AA_?$AAC@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GM@JADKDKDC@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAC?$AAH?$AAE?$AAD?$AAU?$AAL?$AAI?$AAN?$AAG?$AA_@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HM@NPLCKJLH@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAC?$AAH?$AAE?$AAD?$AAU?$AAL?$AAI?$AAN?$AAG?$AA_@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HE@MEMGEMJJ@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAE?$AAT?$AAU?$AAP?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GM@BCHKIAPP@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAC?$AAH?$AAE?$AAD?$AAU?$AAL?$AAI?$AAN?$AAG?$AA_@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HM@FNPCBDHK@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAC?$AAH?$AAE?$AAD?$AAU?$AAL?$AAI?$AAN?$AAG?$AA_@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EI@BBOOKHNN@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAL?$AAE?$AAA?$AAV?$AAE?$AA_?$AAA?$AAD?$AAD?$AAR?$AAE@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FI@LGLHPFAK@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAC?$AAH?$AAE?$AAD?$AAU?$AAL?$AAI?$AAN?$AAG?$AA_@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HG@BLNLBKIO@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAC?$AAH?$AAE?$AAD?$AAU?$AAL?$AAI?$AAN?$AAG?$AA_@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FG@NMCKCJLL@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAR?$AAE?$AAS?$AAE?$AAT?$AA_?$AAA?$AAN?$AAD?$AA_?$AAE@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EI@KNOIBOPH@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAU?$AAS?$AAI?$AAN?$AAG?$AA_?$AAA?$AAD?$AAD?$AAR?$AAE@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FI@COMJHLEF@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAO?$AAP?$AAE?$AAN?$AAI?$AAN?$AAG?$AA_?$AAE?$AAN?$AAD@| [ DATA ] ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|dummpDesc| DCB	0x7
	DCB	0x5
	DCB	0xff
	DCB	0x3
	DCW	0x8
	DCB	0x1

  00000			 AREA	 |.data|, DATA
|cszCfgStateStrings| DCD |??_C@_1FI@COMJHLEF@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAO?$AAP?$AAE?$AAN?$AAI?$AAN?$AAG?$AA_?$AAE?$AAN?$AAD@|
	DCD	|??_C@_1EI@KNOIBOPH@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAU?$AAS?$AAI?$AAN?$AAG?$AA_?$AAA?$AAD?$AAD?$AAR?$AAE@|
	DCD	|??_C@_1FG@NMCKCJLL@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAR?$AAE?$AAS?$AAE?$AAT?$AA_?$AAA?$AAN?$AAD?$AA_?$AAE@|
	DCD	|??_C@_1HG@BLNLBKIO@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAC?$AAH?$AAE?$AAD?$AAU?$AAL?$AAI?$AAN?$AAG?$AA_@|
	DCD	|??_C@_1FI@LGLHPFAK@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAC?$AAH?$AAE?$AAD?$AAU?$AAL?$AAI?$AAN?$AAG?$AA_@|
	DCD	|??_C@_1EI@BBOOKHNN@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAL?$AAE?$AAA?$AAV?$AAE?$AA_?$AAA?$AAD?$AAD?$AAR?$AAE@|
	DCD	|??_C@_1HM@FNPCBDHK@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAC?$AAH?$AAE?$AAD?$AAU?$AAL?$AAI?$AAN?$AAG?$AA_@|
	DCD	|??_C@_1GM@BCHKIAPP@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAC?$AAH?$AAE?$AAD?$AAU?$AAL?$AAI?$AAN?$AAG?$AA_@|
	DCD	|??_C@_1HE@MEMGEMJJ@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAE?$AAT?$AAU?$AAP?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI@|
	DCD	|??_C@_1HM@NPLCKJLH@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAC?$AAH?$AAE?$AAD?$AAU?$AAL?$AAI?$AAN?$AAG?$AA_@|
	DCD	|??_C@_1GM@JADKDKDC@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAC?$AAH?$AAE?$AAD?$AAU?$AAL?$AAI?$AAN?$AAG?$AA_@|
	DCD	|??_C@_1GA@NDHJOKMM@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAD?$AAE?$AAT?$AAE?$AAR?$AAM?$AAI?$AAN?$AAE?$AA_?$AAC@|
	DCD	|??_C@_1FG@CFFAAPDL@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAC?$AAH?$AAE?$AAD?$AAU?$AAL?$AAI?$AAN?$AAG?$AA_@|
	DCD	|??_C@_1HG@KPBCOGEF@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAC?$AAH?$AAE?$AAD?$AAU?$AAL?$AAI?$AAN?$AAG?$AA_@|
	DCD	|??_C@_1GG@HPGGGHKI@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAC?$AAH?$AAE?$AAD?$AAU?$AAL?$AAI?$AAN?$AAG?$AA_@|
	DCD	|??_C@_1EI@COKEBMOE@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAC?$AAR?$AAE?$AAA?$AAT?$AAE?$AA_?$AAN?$AAE?$AAW?$AA_@|
	DCD	|??_C@_1FC@LCLFDJDO@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAC?$AAR?$AAE?$AAA?$AAT?$AAE?$AA_?$AAN?$AAE?$AAW?$AA_@|
	DCD	|??_C@_1II@FBBOBKGN@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAI?$AAN?$AAS?$AAE?$AAR?$AAT?$AA_?$AAN?$AAE?$AAW?$AA_@|
	DCD	|??_C@_1HO@PGHDEMEK@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAI?$AAG?$AAN?$AAA?$AAL?$AA_?$AAN?$AAE?$AAW?$AA_@|
	DCD	|??_C@_1DI@CEGNOBAM@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAF?$AAA?$AAI?$AAL?$AAE?$AAD?$AA?$AA@|
	DCD	|??_C@_1DE@IMCKALLA@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAD?$AAO?$AAN?$AAE?$AA?$AA@|
	DCD	|??_C@_1DK@JPBDFEOB@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAI?$AAN?$AAV?$AAA?$AAL?$AAI?$AAD?$AA?$AA@|

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DK@JPBDFEOB@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAI?$AAN?$AAV?$AAA?$AAL?$AAI?$AAD?$AA?$AA@| DCB "D"
	DCB	0x0, "E", 0x0, "V", 0x0, "I", 0x0, "C", 0x0, "E", 0x0, "_"
	DCB	0x0, "C", 0x0, "O", 0x0, "N", 0x0, "F", 0x0, "I", 0x0, "G"
	DCB	0x0, "_", 0x0, "S", 0x0, "T", 0x0, "A", 0x0, "T", 0x0, "U"
	DCB	0x0, "S", 0x0, "_", 0x0, "I", 0x0, "N", 0x0, "V", 0x0, "A"
	DCB	0x0, "L", 0x0, "I", 0x0, "D", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DE@IMCKALLA@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAD?$AAO?$AAN?$AAE?$AA?$AA@| DCB "D"
	DCB	0x0, "E", 0x0, "V", 0x0, "I", 0x0, "C", 0x0, "E", 0x0, "_"
	DCB	0x0, "C", 0x0, "O", 0x0, "N", 0x0, "F", 0x0, "I", 0x0, "G"
	DCB	0x0, "_", 0x0, "S", 0x0, "T", 0x0, "A", 0x0, "T", 0x0, "U"
	DCB	0x0, "S", 0x0, "_", 0x0, "D", 0x0, "O", 0x0, "N", 0x0, "E"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DI@CEGNOBAM@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAF?$AAA?$AAI?$AAL?$AAE?$AAD?$AA?$AA@| DCB "D"
	DCB	0x0, "E", 0x0, "V", 0x0, "I", 0x0, "C", 0x0, "E", 0x0, "_"
	DCB	0x0, "C", 0x0, "O", 0x0, "N", 0x0, "F", 0x0, "I", 0x0, "G"
	DCB	0x0, "_", 0x0, "S", 0x0, "T", 0x0, "A", 0x0, "T", 0x0, "U"
	DCB	0x0, "S", 0x0, "_", 0x0, "F", 0x0, "A", 0x0, "I", 0x0, "L"
	DCB	0x0, "E", 0x0, "D", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HO@PGHDEMEK@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAI?$AAG?$AAN?$AAA?$AAL?$AA_?$AAN?$AAE?$AAW?$AA_@| DCB "D"
	DCB	0x0, "E", 0x0, "V", 0x0, "I", 0x0, "C", 0x0, "E", 0x0, "_"
	DCB	0x0, "C", 0x0, "O", 0x0, "N", 0x0, "F", 0x0, "I", 0x0, "G"
	DCB	0x0, "_", 0x0, "S", 0x0, "T", 0x0, "A", 0x0, "T", 0x0, "U"
	DCB	0x0, "S", 0x0, "_", 0x0, "S", 0x0, "I", 0x0, "G", 0x0, "N"
	DCB	0x0, "A", 0x0, "L", 0x0, "_", 0x0, "N", 0x0, "E", 0x0, "W"
	DCB	0x0, "_", 0x0, "D", 0x0, "E", 0x0, "V", 0x0, "I", 0x0, "C"
	DCB	0x0, "E", 0x0, "_", 0x0, "E", 0x0, "N", 0x0, "T", 0x0, "E"
	DCB	0x0, "R", 0x0, "_", 0x0, "O", 0x0, "P", 0x0, "E", 0x0, "R"
	DCB	0x0, "A", 0x0, "T", 0x0, "I", 0x0, "O", 0x0, "N", 0x0, "A"
	DCB	0x0, "L", 0x0, "_", 0x0, "S", 0x0, "T", 0x0, "A", 0x0, "T"
	DCB	0x0, "E", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1II@FBBOBKGN@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAI?$AAN?$AAS?$AAE?$AAR?$AAT?$AA_?$AAN?$AAE?$AAW?$AA_@| DCB "D"
	DCB	0x0, "E", 0x0, "V", 0x0, "I", 0x0, "C", 0x0, "E", 0x0, "_"
	DCB	0x0, "C", 0x0, "O", 0x0, "N", 0x0, "F", 0x0, "I", 0x0, "G"
	DCB	0x0, "_", 0x0, "S", 0x0, "T", 0x0, "A", 0x0, "T", 0x0, "U"
	DCB	0x0, "S", 0x0, "_", 0x0, "I", 0x0, "N", 0x0, "S", 0x0, "E"
	DCB	0x0, "R", 0x0, "T", 0x0, "_", 0x0, "N", 0x0, "E", 0x0, "W"
	DCB	0x0, "_", 0x0, "D", 0x0, "E", 0x0, "V", 0x0, "I", 0x0, "C"
	DCB	0x0, "E", 0x0, "_", 0x0, "I", 0x0, "N", 0x0, "T", 0x0, "O"
	DCB	0x0, "_", 0x0, "U", 0x0, "P", 0x0, "S", 0x0, "T", 0x0, "R"
	DCB	0x0, "E", 0x0, "A", 0x0, "M", 0x0, "_", 0x0, "H", 0x0, "U"
	DCB	0x0, "B", 0x0, "_", 0x0, "P", 0x0, "O", 0x0, "R", 0x0, "T"
	DCB	0x0, "_", 0x0, "A", 0x0, "R", 0x0, "R", 0x0, "A", 0x0, "Y"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FC@LCLFDJDO@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAC?$AAR?$AAE?$AAA?$AAT?$AAE?$AA_?$AAN?$AAE?$AAW?$AA_@| DCB "D"
	DCB	0x0, "E", 0x0, "V", 0x0, "I", 0x0, "C", 0x0, "E", 0x0, "_"
	DCB	0x0, "C", 0x0, "O", 0x0, "N", 0x0, "F", 0x0, "I", 0x0, "G"
	DCB	0x0, "_", 0x0, "S", 0x0, "T", 0x0, "A", 0x0, "T", 0x0, "U"
	DCB	0x0, "S", 0x0, "_", 0x0, "C", 0x0, "R", 0x0, "E", 0x0, "A"
	DCB	0x0, "T", 0x0, "E", 0x0, "_", 0x0, "N", 0x0, "E", 0x0, "W"
	DCB	0x0, "_", 0x0, "F", 0x0, "U", 0x0, "N", 0x0, "C", 0x0, "T"
	DCB	0x0, "I", 0x0, "O", 0x0, "N", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EI@COKEBMOE@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAC?$AAR?$AAE?$AAA?$AAT?$AAE?$AA_?$AAN?$AAE?$AAW?$AA_@| DCB "D"
	DCB	0x0, "E", 0x0, "V", 0x0, "I", 0x0, "C", 0x0, "E", 0x0, "_"
	DCB	0x0, "C", 0x0, "O", 0x0, "N", 0x0, "F", 0x0, "I", 0x0, "G"
	DCB	0x0, "_", 0x0, "S", 0x0, "T", 0x0, "A", 0x0, "T", 0x0, "U"
	DCB	0x0, "S", 0x0, "_", 0x0, "C", 0x0, "R", 0x0, "E", 0x0, "A"
	DCB	0x0, "T", 0x0, "E", 0x0, "_", 0x0, "N", 0x0, "E", 0x0, "W"
	DCB	0x0, "_", 0x0, "H", 0x0, "U", 0x0, "B", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GG@HPGGGHKI@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAC?$AAH?$AAE?$AAD?$AAU?$AAL?$AAI?$AAN?$AAG?$AA_@| DCB "D"
	DCB	0x0, "E", 0x0, "V", 0x0, "I", 0x0, "C", 0x0, "E", 0x0, "_"
	DCB	0x0, "C", 0x0, "O", 0x0, "N", 0x0, "F", 0x0, "I", 0x0, "G"
	DCB	0x0, "_", 0x0, "S", 0x0, "T", 0x0, "A", 0x0, "T", 0x0, "U"
	DCB	0x0, "S", 0x0, "_", 0x0, "S", 0x0, "C", 0x0, "H", 0x0, "E"
	DCB	0x0, "D", 0x0, "U", 0x0, "L", 0x0, "I", 0x0, "N", 0x0, "G"
	DCB	0x0, "_", 0x0, "G", 0x0, "E", 0x0, "T", 0x0, "_", 0x0, "H"
	DCB	0x0, "U", 0x0, "B", 0x0, "_", 0x0, "D", 0x0, "E", 0x0, "S"
	DCB	0x0, "C", 0x0, "R", 0x0, "I", 0x0, "P", 0x0, "T", 0x0, "O"
	DCB	0x0, "R", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HG@KPBCOGEF@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAC?$AAH?$AAE?$AAD?$AAU?$AAL?$AAI?$AAN?$AAG?$AA_@| DCB "D"
	DCB	0x0, "E", 0x0, "V", 0x0, "I", 0x0, "C", 0x0, "E", 0x0, "_"
	DCB	0x0, "C", 0x0, "O", 0x0, "N", 0x0, "F", 0x0, "I", 0x0, "G"
	DCB	0x0, "_", 0x0, "S", 0x0, "T", 0x0, "A", 0x0, "T", 0x0, "U"
	DCB	0x0, "S", 0x0, "_", 0x0, "S", 0x0, "C", 0x0, "H", 0x0, "E"
	DCB	0x0, "D", 0x0, "U", 0x0, "L", 0x0, "I", 0x0, "N", 0x0, "G"
	DCB	0x0, "_", 0x0, "G", 0x0, "E", 0x0, "T", 0x0, "_", 0x0, "I"
	DCB	0x0, "N", 0x0, "I", 0x0, "T", 0x0, "I", 0x0, "A", 0x0, "L"
	DCB	0x0, "_", 0x0, "H", 0x0, "U", 0x0, "B", 0x0, "_", 0x0, "D"
	DCB	0x0, "E", 0x0, "S", 0x0, "C", 0x0, "R", 0x0, "I", 0x0, "P"
	DCB	0x0, "T", 0x0, "O", 0x0, "R", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FG@CFFAAPDL@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAC?$AAH?$AAE?$AAD?$AAU?$AAL?$AAI?$AAN?$AAG?$AA_@| DCB "D"
	DCB	0x0, "E", 0x0, "V", 0x0, "I", 0x0, "C", 0x0, "E", 0x0, "_"
	DCB	0x0, "C", 0x0, "O", 0x0, "N", 0x0, "F", 0x0, "I", 0x0, "G"
	DCB	0x0, "_", 0x0, "S", 0x0, "T", 0x0, "A", 0x0, "T", 0x0, "U"
	DCB	0x0, "S", 0x0, "_", 0x0, "S", 0x0, "C", 0x0, "H", 0x0, "E"
	DCB	0x0, "D", 0x0, "U", 0x0, "L", 0x0, "I", 0x0, "N", 0x0, "G"
	DCB	0x0, "_", 0x0, "S", 0x0, "E", 0x0, "T", 0x0, "_", 0x0, "C"
	DCB	0x0, "O", 0x0, "N", 0x0, "F", 0x0, "I", 0x0, "G", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GA@NDHJOKMM@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAD?$AAE?$AAT?$AAE?$AAR?$AAM?$AAI?$AAN?$AAE?$AA_?$AAC@| DCB "D"
	DCB	0x0, "E", 0x0, "V", 0x0, "I", 0x0, "C", 0x0, "E", 0x0, "_"
	DCB	0x0, "C", 0x0, "O", 0x0, "N", 0x0, "F", 0x0, "I", 0x0, "G"
	DCB	0x0, "_", 0x0, "S", 0x0, "T", 0x0, "A", 0x0, "T", 0x0, "U"
	DCB	0x0, "S", 0x0, "_", 0x0, "D", 0x0, "E", 0x0, "T", 0x0, "E"
	DCB	0x0, "R", 0x0, "M", 0x0, "I", 0x0, "N", 0x0, "E", 0x0, "_"
	DCB	0x0, "C", 0x0, "O", 0x0, "N", 0x0, "F", 0x0, "I", 0x0, "G"
	DCB	0x0, "_", 0x0, "T", 0x0, "O", 0x0, "_", 0x0, "C", 0x0, "H"
	DCB	0x0, "O", 0x0, "O", 0x0, "S", 0x0, "E", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GM@JADKDKDC@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAC?$AAH?$AAE?$AAD?$AAU?$AAL?$AAI?$AAN?$AAG?$AA_@| DCB "D"
	DCB	0x0, "E", 0x0, "V", 0x0, "I", 0x0, "C", 0x0, "E", 0x0, "_"
	DCB	0x0, "C", 0x0, "O", 0x0, "N", 0x0, "F", 0x0, "I", 0x0, "G"
	DCB	0x0, "_", 0x0, "S", 0x0, "T", 0x0, "A", 0x0, "T", 0x0, "U"
	DCB	0x0, "S", 0x0, "_", 0x0, "S", 0x0, "C", 0x0, "H", 0x0, "E"
	DCB	0x0, "D", 0x0, "U", 0x0, "L", 0x0, "I", 0x0, "N", 0x0, "G"
	DCB	0x0, "_", 0x0, "G", 0x0, "E", 0x0, "T", 0x0, "_", 0x0, "C"
	DCB	0x0, "O", 0x0, "N", 0x0, "F", 0x0, "I", 0x0, "G", 0x0, "_"
	DCB	0x0, "D", 0x0, "E", 0x0, "S", 0x0, "C", 0x0, "R", 0x0, "I"
	DCB	0x0, "P", 0x0, "T", 0x0, "O", 0x0, "R", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HM@NPLCKJLH@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAC?$AAH?$AAE?$AAD?$AAU?$AAL?$AAI?$AAN?$AAG?$AA_@| DCB "D"
	DCB	0x0, "E", 0x0, "V", 0x0, "I", 0x0, "C", 0x0, "E", 0x0, "_"
	DCB	0x0, "C", 0x0, "O", 0x0, "N", 0x0, "F", 0x0, "I", 0x0, "G"
	DCB	0x0, "_", 0x0, "S", 0x0, "T", 0x0, "A", 0x0, "T", 0x0, "U"
	DCB	0x0, "S", 0x0, "_", 0x0, "S", 0x0, "C", 0x0, "H", 0x0, "E"
	DCB	0x0, "D", 0x0, "U", 0x0, "L", 0x0, "I", 0x0, "N", 0x0, "G"
	DCB	0x0, "_", 0x0, "G", 0x0, "E", 0x0, "T", 0x0, "_", 0x0, "I"
	DCB	0x0, "N", 0x0, "I", 0x0, "T", 0x0, "I", 0x0, "A", 0x0, "L"
	DCB	0x0, "_", 0x0, "C", 0x0, "O", 0x0, "N", 0x0, "F", 0x0, "I"
	DCB	0x0, "G", 0x0, "_", 0x0, "D", 0x0, "E", 0x0, "S", 0x0, "C"
	DCB	0x0, "R", 0x0, "I", 0x0, "P", 0x0, "T", 0x0, "O", 0x0, "R"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HE@MEMGEMJJ@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAE?$AAT?$AAU?$AAP?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI@| DCB "D"
	DCB	0x0, "E", 0x0, "V", 0x0, "I", 0x0, "C", 0x0, "E", 0x0, "_"
	DCB	0x0, "C", 0x0, "O", 0x0, "N", 0x0, "F", 0x0, "I", 0x0, "G"
	DCB	0x0, "_", 0x0, "S", 0x0, "T", 0x0, "A", 0x0, "T", 0x0, "U"
	DCB	0x0, "S", 0x0, "_", 0x0, "S", 0x0, "E", 0x0, "T", 0x0, "U"
	DCB	0x0, "P", 0x0, "_", 0x0, "C", 0x0, "O", 0x0, "N", 0x0, "F"
	DCB	0x0, "I", 0x0, "G", 0x0, "U", 0x0, "R", 0x0, "A", 0x0, "T"
	DCB	0x0, "I", 0x0, "O", 0x0, "N", 0x0, "_", 0x0, "D", 0x0, "E"
	DCB	0x0, "S", 0x0, "C", 0x0, "R", 0x0, "I", 0x0, "P", 0x0, "T"
	DCB	0x0, "O", 0x0, "R", 0x0, "_", 0x0, "A", 0x0, "R", 0x0, "R"
	DCB	0x0, "A", 0x0, "Y", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GM@BCHKIAPP@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAC?$AAH?$AAE?$AAD?$AAU?$AAL?$AAI?$AAN?$AAG?$AA_@| DCB "D"
	DCB	0x0, "E", 0x0, "V", 0x0, "I", 0x0, "C", 0x0, "E", 0x0, "_"
	DCB	0x0, "C", 0x0, "O", 0x0, "N", 0x0, "F", 0x0, "I", 0x0, "G"
	DCB	0x0, "_", 0x0, "S", 0x0, "T", 0x0, "A", 0x0, "T", 0x0, "U"
	DCB	0x0, "S", 0x0, "_", 0x0, "S", 0x0, "C", 0x0, "H", 0x0, "E"
	DCB	0x0, "D", 0x0, "U", 0x0, "L", 0x0, "I", 0x0, "N", 0x0, "G"
	DCB	0x0, "_", 0x0, "G", 0x0, "E", 0x0, "T", 0x0, "_", 0x0, "D"
	DCB	0x0, "E", 0x0, "V", 0x0, "I", 0x0, "C", 0x0, "E", 0x0, "_"
	DCB	0x0, "D", 0x0, "E", 0x0, "S", 0x0, "C", 0x0, "R", 0x0, "I"
	DCB	0x0, "P", 0x0, "T", 0x0, "O", 0x0, "R", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HM@FNPCBDHK@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAC?$AAH?$AAE?$AAD?$AAU?$AAL?$AAI?$AAN?$AAG?$AA_@| DCB "D"
	DCB	0x0, "E", 0x0, "V", 0x0, "I", 0x0, "C", 0x0, "E", 0x0, "_"
	DCB	0x0, "C", 0x0, "O", 0x0, "N", 0x0, "F", 0x0, "I", 0x0, "G"
	DCB	0x0, "_", 0x0, "S", 0x0, "T", 0x0, "A", 0x0, "T", 0x0, "U"
	DCB	0x0, "S", 0x0, "_", 0x0, "S", 0x0, "C", 0x0, "H", 0x0, "E"
	DCB	0x0, "D", 0x0, "U", 0x0, "L", 0x0, "I", 0x0, "N", 0x0, "G"
	DCB	0x0, "_", 0x0, "G", 0x0, "E", 0x0, "T", 0x0, "_", 0x0, "I"
	DCB	0x0, "N", 0x0, "I", 0x0, "T", 0x0, "I", 0x0, "A", 0x0, "L"
	DCB	0x0, "_", 0x0, "D", 0x0, "E", 0x0, "V", 0x0, "I", 0x0, "C"
	DCB	0x0, "E", 0x0, "_", 0x0, "D", 0x0, "E", 0x0, "S", 0x0, "C"
	DCB	0x0, "R", 0x0, "I", 0x0, "P", 0x0, "T", 0x0, "O", 0x0, "R"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EI@BBOOKHNN@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAL?$AAE?$AAA?$AAV?$AAE?$AA_?$AAA?$AAD?$AAD?$AAR?$AAE@| DCB "D"
	DCB	0x0, "E", 0x0, "V", 0x0, "I", 0x0, "C", 0x0, "E", 0x0, "_"
	DCB	0x0, "C", 0x0, "O", 0x0, "N", 0x0, "F", 0x0, "I", 0x0, "G"
	DCB	0x0, "_", 0x0, "S", 0x0, "T", 0x0, "A", 0x0, "T", 0x0, "U"
	DCB	0x0, "S", 0x0, "_", 0x0, "L", 0x0, "E", 0x0, "A", 0x0, "V"
	DCB	0x0, "E", 0x0, "_", 0x0, "A", 0x0, "D", 0x0, "D", 0x0, "R"
	DCB	0x0, "E", 0x0, "S", 0x0, "S", 0x0, "0", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FI@LGLHPFAK@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAC?$AAH?$AAE?$AAD?$AAU?$AAL?$AAI?$AAN?$AAG?$AA_@| DCB "D"
	DCB	0x0, "E", 0x0, "V", 0x0, "I", 0x0, "C", 0x0, "E", 0x0, "_"
	DCB	0x0, "C", 0x0, "O", 0x0, "N", 0x0, "F", 0x0, "I", 0x0, "G"
	DCB	0x0, "_", 0x0, "S", 0x0, "T", 0x0, "A", 0x0, "T", 0x0, "U"
	DCB	0x0, "S", 0x0, "_", 0x0, "S", 0x0, "C", 0x0, "H", 0x0, "E"
	DCB	0x0, "D", 0x0, "U", 0x0, "L", 0x0, "I", 0x0, "N", 0x0, "G"
	DCB	0x0, "_", 0x0, "S", 0x0, "E", 0x0, "T", 0x0, "_", 0x0, "A"
	DCB	0x0, "D", 0x0, "D", 0x0, "R", 0x0, "E", 0x0, "S", 0x0, "S"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HG@BLNLBKIO@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAC?$AAH?$AAE?$AAD?$AAU?$AAL?$AAI?$AAN?$AAG?$AA_@| DCB "D"
	DCB	0x0, "E", 0x0, "V", 0x0, "I", 0x0, "C", 0x0, "E", 0x0, "_"
	DCB	0x0, "C", 0x0, "O", 0x0, "N", 0x0, "F", 0x0, "I", 0x0, "G"
	DCB	0x0, "_", 0x0, "S", 0x0, "T", 0x0, "A", 0x0, "T", 0x0, "U"
	DCB	0x0, "S", 0x0, "_", 0x0, "S", 0x0, "C", 0x0, "H", 0x0, "E"
	DCB	0x0, "D", 0x0, "U", 0x0, "L", 0x0, "I", 0x0, "N", 0x0, "G"
	DCB	0x0, "_", 0x0, "G", 0x0, "E", 0x0, "T", 0x0, "_", 0x0, "D"
	DCB	0x0, "E", 0x0, "V", 0x0, "I", 0x0, "C", 0x0, "E", 0x0, "_"
	DCB	0x0, "D", 0x0, "E", 0x0, "S", 0x0, "C", 0x0, "R", 0x0, "I"
	DCB	0x0, "P", 0x0, "T", 0x0, "O", 0x0, "R", 0x0, "_", 0x0, "T"
	DCB	0x0, "E", 0x0, "S", 0x0, "T", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FG@NMCKCJLL@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAR?$AAE?$AAS?$AAE?$AAT?$AA_?$AAA?$AAN?$AAD?$AA_?$AAE@| DCB "D"
	DCB	0x0, "E", 0x0, "V", 0x0, "I", 0x0, "C", 0x0, "E", 0x0, "_"
	DCB	0x0, "C", 0x0, "O", 0x0, "N", 0x0, "F", 0x0, "I", 0x0, "G"
	DCB	0x0, "_", 0x0, "S", 0x0, "T", 0x0, "A", 0x0, "T", 0x0, "U"
	DCB	0x0, "S", 0x0, "_", 0x0, "R", 0x0, "E", 0x0, "S", 0x0, "E"
	DCB	0x0, "T", 0x0, "_", 0x0, "A", 0x0, "N", 0x0, "D", 0x0, "_"
	DCB	0x0, "E", 0x0, "N", 0x0, "A", 0x0, "B", 0x0, "L", 0x0, "E"
	DCB	0x0, "_", 0x0, "P", 0x0, "O", 0x0, "R", 0x0, "T", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EI@KNOIBOPH@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAU?$AAS?$AAI?$AAN?$AAG?$AA_?$AAA?$AAD?$AAD?$AAR?$AAE@| DCB "D"
	DCB	0x0, "E", 0x0, "V", 0x0, "I", 0x0, "C", 0x0, "E", 0x0, "_"
	DCB	0x0, "C", 0x0, "O", 0x0, "N", 0x0, "F", 0x0, "I", 0x0, "G"
	DCB	0x0, "_", 0x0, "S", 0x0, "T", 0x0, "A", 0x0, "T", 0x0, "U"
	DCB	0x0, "S", 0x0, "_", 0x0, "U", 0x0, "S", 0x0, "I", 0x0, "N"
	DCB	0x0, "G", 0x0, "_", 0x0, "A", 0x0, "D", 0x0, "D", 0x0, "R"
	DCB	0x0, "E", 0x0, "S", 0x0, "S", 0x0, "0", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FI@COMJHLEF@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAO?$AAP?$AAE?$AAN?$AAI?$AAN?$AAG?$AA_?$AAE?$AAN?$AAD@| DCB "D"
	DCB	0x0, "E", 0x0, "V", 0x0, "I", 0x0, "C", 0x0, "E", 0x0, "_"
	DCB	0x0, "C", 0x0, "O", 0x0, "N", 0x0, "F", 0x0, "I", 0x0, "G"
	DCB	0x0, "_", 0x0, "S", 0x0, "T", 0x0, "A", 0x0, "T", 0x0, "U"
	DCB	0x0, "S", 0x0, "_", 0x0, "O", 0x0, "P", 0x0, "E", 0x0, "N"
	DCB	0x0, "I", 0x0, "N", 0x0, "G", 0x0, "_", 0x0, "E", 0x0, "N"
	DCB	0x0, "D", 0x0, "P", 0x0, "O", 0x0, "I", 0x0, "N", 0x0, "T"
	DCB	0x0, "0", 0x0, "_", 0x0, "P", 0x0, "I", 0x0, "P", 0x0, "E"
	DCB	0x0, 0x0, 0x0				; `string'
	EXPORT	|??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1LG@MDHHEHIE@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@| [ DATA ] ; `string'
	EXPORT	|??_7CDummyPipe@@6B@| [ DATA ]		; CDummyPipe::`vftable'
	EXPORT	|??0CDummyPipe@@QAA@QAVCPhysMem@@@Z|	; CDummyPipe::CDummyPipe
	EXPORT	|?OpenPipe@CDummyPipe@@UAA?AW4HCD_REQUEST_STATUS@@XZ| ; CDummyPipe::OpenPipe
	EXPORT	|?ClosePipe@CDummyPipe@@UAA?AW4HCD_REQUEST_STATUS@@XZ| ; CDummyPipe::ClosePipe
	EXPORT	|?IssueTransfer@CDummyPipe@@UAA?AW4HCD_REQUEST_STATUS@@EQ6AKPAX@ZQAXKQBXKKQBKK2K3QAK5QAH55@Z| ; CDummyPipe::IssueTransfer
	EXPORT	|?AbortTransfer@CDummyPipe@@UAA?AW4HCD_REQUEST_STATUS@@Q6AKPAX@ZQAXPBX@Z| ; CDummyPipe::AbortTransfer
	EXPORT	|?IsPipeHalted@CDummyPipe@@UAA?AW4HCD_REQUEST_STATUS@@QAH@Z| ; CDummyPipe::IsPipeHalted
	EXPORT	|?ClearHaltedFlag@CDummyPipe@@UAAXXZ|	; CDummyPipe::ClearHaltedFlag
	EXPORT	|?ChangeMaxPacketSize@CPipeAbs@@UAAXG@Z| ; CPipeAbs::ChangeMaxPacketSize
	EXPORT	|?SetReservedDeviceAddr@CPipe@@UAAHE@Z|	; CPipe::SetReservedDeviceAddr
	EXPORT	|?GetReservedDeviceAddr@CPipe@@UAAEXZ|	; CPipe::GetReservedDeviceAddr
	EXPORT	|?GetCPhysMem@CDummyPipe@@UAAPAVCPhysMem@@XZ| ; CDummyPipe::GetCPhysMem
	EXPORT	|?ScheduleTransfer@CDummyPipe@@EAA?AW4HCD_REQUEST_STATUS@@XZ| ; CDummyPipe::ScheduleTransfer
	EXPORT	|?CheckForDoneTransfers@CDummyPipe@@MAAHXZ| ; CDummyPipe::CheckForDoneTransfers
	EXPORT	|?ProcessEP@CDummyPipe@@MAAHKH@Z|	; CDummyPipe::ProcessEP
	EXPORT	|?GetPipeType@CDummyPipe@@MBAPBGXZ|	; CDummyPipe::GetPipeType
	EXPORT	|?AreTransferParametersValid@CDummyPipe@@MBAHPBUSTRANSFER@@@Z| ; CDummyPipe::AreTransferParametersValid
	IMPORT	|NKDbgPrintfW|
	IMPORT	|??0CPipe@@QAA@QBU_USB_ENDPOINT_DESCRIPTOR@@HHEEEHQAVCMhcd@@@Z| ; CPipe::CPipe
	IMPORT	|??_ECDummyPipe@@UAAPAXI@Z|, WEAK |??_GCDummyPipe@@UAAPAXI@Z| ; CDummyPipe::`vector deleting destructor', CDummyPipe::`scalar deleting destructor'
	IMPORT	|?ResetEndPoint@CPipe@@UAAXXZ|		; CPipe::ResetEndPoint
	IMPORT	|_purecall|

  00000			 AREA	 |.pdata|, PDATA
|$T44236| DCD	|$LN7@CDummyPipe|
	DCD	0x40003e04
; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\musb\musbhcd\musbmhdrc\chw.cpp

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@| DCB "%"
	DCB	0x0, "s", 0x0, ":", 0x0, " ", 0x0, "D", 0x0, "E", 0x0, "B"
	DCB	0x0, "U", 0x0, "G", 0x0, "C", 0x0, "H", 0x0, "K", 0x0, " "
	DCB	0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "i", 0x0, "n", 0x0, " ", 0x0, "f", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, " ", 0x0, "%", 0x0, "s", 0x0, " "
	DCB	0x0, "a", 0x0, "t", 0x0, " ", 0x0, "l", 0x0, "i", 0x0, "n"
	DCB	0x0, "e", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@| DCB "U", 0x0
	DCB	"n", 0x0, "k", 0x0, "n", 0x0, "o", 0x0, "w", 0x0, "n", 0x0
	DCB	0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1LG@MDHHEHIE@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@| DCB "C"
	DCB	0x0, ":", 0x0, "\\", 0x0, "W", 0x0, "I", 0x0, "N", 0x0, "C"
	DCB	0x0, "E", 0x0, "6", 0x0, "0", 0x0, "0", 0x0, "\\", 0x0, "P"
	DCB	0x0, "L", 0x0, "A", 0x0, "T", 0x0, "F", 0x0, "O", 0x0, "R"
	DCB	0x0, "M", 0x0, "\\", 0x0, "C", 0x0, "O", 0x0, "M", 0x0, "M"
	DCB	0x0, "O", 0x0, "N", 0x0, "\\", 0x0, "S", 0x0, "R", 0x0, "C"
	DCB	0x0, "\\", 0x0, "S", 0x0, "O", 0x0, "C", 0x0, "\\", 0x0, "C"
	DCB	0x0, "O", 0x0, "M", 0x0, "M", 0x0, "O", 0x0, "N", 0x0, "_"
	DCB	0x0, "T", 0x0, "I", 0x0, "_", 0x0, "V", 0x0, "1", 0x0, "\\"
	DCB	0x0, "O", 0x0, "M", 0x0, "A", 0x0, "P", 0x0, "3", 0x0, "5"
	DCB	0x0, "3", 0x0, "0", 0x0, "\\", 0x0, "M", 0x0, "U", 0x0, "S"
	DCB	0x0, "B", 0x0, "\\", 0x0, "M", 0x0, "U", 0x0, "S", 0x0, "B"
	DCB	0x0, "H", 0x0, "C", 0x0, "D", 0x0, "\\", 0x0, "M", 0x0, "U"
	DCB	0x0, "S", 0x0, "B", 0x0, "M", 0x0, "H", 0x0, "D", 0x0, "R"
	DCB	0x0, "C", 0x0, "\\", 0x0, ".", 0x0, "\\", 0x0, "c", 0x0, "h"
	DCB	0x0, "w", 0x0, ".", 0x0, "c", 0x0, "p", 0x0, "p", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_7CDummyPipe@@6B@| DCD |??_ECDummyPipe@@UAAPAXI@Z|	; CDummyPipe::`vftable'
	DCD	|?OpenPipe@CDummyPipe@@UAA?AW4HCD_REQUEST_STATUS@@XZ|
	DCD	|?ClosePipe@CDummyPipe@@UAA?AW4HCD_REQUEST_STATUS@@XZ|
	DCD	|?IssueTransfer@CDummyPipe@@UAA?AW4HCD_REQUEST_STATUS@@EQ6AKPAX@ZQAXKQBXKKQBKK2K3QAK5QAH55@Z|
	DCD	|?AbortTransfer@CDummyPipe@@UAA?AW4HCD_REQUEST_STATUS@@Q6AKPAX@ZQAXPBX@Z|
	DCD	|?IsPipeHalted@CDummyPipe@@UAA?AW4HCD_REQUEST_STATUS@@QAH@Z|
	DCD	|?ClearHaltedFlag@CDummyPipe@@UAAXXZ|
	DCD	|?ResetEndPoint@CPipe@@UAAXXZ|
	DCD	|?ChangeMaxPacketSize@CPipeAbs@@UAAXG@Z|
	DCD	|?SetReservedDeviceAddr@CPipe@@UAAHE@Z|
	DCD	|?GetReservedDeviceAddr@CPipe@@UAAEXZ|
	DCD	|?GetCPhysMem@CDummyPipe@@UAAPAVCPhysMem@@XZ|
	DCD	|?ScheduleTransfer@CDummyPipe@@EAA?AW4HCD_REQUEST_STATUS@@XZ|
	DCD	|?CheckForDoneTransfers@CDummyPipe@@MAAHXZ|
	DCD	|?ProcessEP@CDummyPipe@@MAAHKH@Z|
	DCD	|_purecall|
	DCD	|?GetPipeType@CDummyPipe@@MBAPBGXZ|
	DCD	|_purecall|
	DCD	|?AreTransferParametersValid@CDummyPipe@@MBAHPBUSTRANSFER@@@Z|
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0CDummyPipe@@QAA@QAVCPhysMem@@@Z| PROC ; CDummyPipe::CDummyPipe

; 82   : {

  00000		 |$LN7@CDummyPipe|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd034	 sub         sp, sp, #0x34
  00010		 |$M44233|
  00010	e3a03000	 mov         r3, #0
  00014	e58d3010	 str         r3, [sp, #0x10]
  00018	e3a03000	 mov         r3, #0
  0001c	e58d300c	 str         r3, [sp, #0xC]
  00020	e3a030ff	 mov         r3, #0xFF
  00024	e58d3008	 str         r3, [sp, #8]
  00028	e3a030ff	 mov         r3, #0xFF
  0002c	e58d3004	 str         r3, [sp, #4]
  00030	e3a030ff	 mov         r3, #0xFF
  00034	e58d3000	 str         r3, [sp]
  00038	e3a03001	 mov         r3, #1
  0003c	e3a02000	 mov         r2, #0
  00040	e59f10ac	 ldr         r1, [pc, #0xAC]
  00044	e59d003c	 ldr         r0, [sp, #0x3C]
  00048	eb000000	 bl          |??0CPipe@@QAA@QBU_USB_ENDPOINT_DESCRIPTOR@@HHEEEHQAVCMhcd@@@Z|
  0004c	e58d002c	 str         r0, [sp, #0x2C]
  00050	e59f2098	 ldr         r2, [pc, #0x98]
  00054	e59d303c	 ldr         r3, [sp, #0x3C]
  00058	e5832000	 str         r2, [r3]
  0005c	e59d303c	 ldr         r3, [sp, #0x3C]
  00060	e2832064	 add         r2, r3, #0x64
  00064	e59d3040	 ldr         r3, [sp, #0x40]
  00068	e5823000	 str         r3, [r2]

; 83   :     ASSERT( m_pCPhysMem!=NULL);

  0006c	e59d303c	 ldr         r3, [sp, #0x3C]
  00070	e2833064	 add         r3, r3, #0x64
  00074	e5933000	 ldr         r3, [r3]
  00078	e3530000	 cmp         r3, #0
  0007c	0a000002	 beq         |$LN3@CDummyPipe|
  00080	e3a03001	 mov         r3, #1
  00084	e58d3030	 str         r3, [sp, #0x30]
  00088	ea000007	 b           |$LN4@CDummyPipe|
  0008c		 |$LN3@CDummyPipe|
  0008c	e3a03053	 mov         r3, #0x53
  00090	e59f2054	 ldr         r2, [pc, #0x54]
  00094	e59f104c	 ldr         r1, [pc, #0x4C]
  00098	e59f0044	 ldr         r0, [pc, #0x44]
  0009c	eb000000	 bl          NKDbgPrintfW
  000a0	e6000010	 __debugbreak_ce
  000a4	e3a03000	 mov         r3, #0
  000a8	e58d3030	 str         r3, [sp, #0x30]
  000ac		 |$LN4@CDummyPipe|

; 84   :     m_bFrameSMask = 0xff;

  000ac	e59d303c	 ldr         r3, [sp, #0x3C]
  000b0	e283201d	 add         r2, r3, #0x1D
  000b4	e3a030ff	 mov         r3, #0xFF
  000b8	e5c23000	 strb        r3, [r2]

; 85   :     m_bFrameCMask = 0;

  000bc	e59d303c	 ldr         r3, [sp, #0x3C]
  000c0	e283201e	 add         r2, r3, #0x1E
  000c4	e3a03000	 mov         r3, #0
  000c8	e5c23000	 strb        r3, [r2]

; 86   : 
; 87   : };

  000cc	e59d303c	 ldr         r3, [sp, #0x3C]
  000d0	e58d3028	 str         r3, [sp, #0x28]
  000d4	e59d0028	 ldr         r0, [sp, #0x28]
  000d8	e28dd034	 add         sp, sp, #0x34
  000dc	e89d6000	 ldmia       sp, {sp, lr}
  000e0	e12fff1e	 bx          lr
  000e4		 |$LN8@CDummyPipe|
  000e4		 |$LN9@CDummyPipe|
  000e4	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  000e8		 |$LN10@CDummyPipe|
  000e8	00000000	 DCD         |??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@|
  000ec		 |$LN11@CDummyPipe|
  000ec	00000000	 DCD         |??_C@_1LG@MDHHEHIE@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  000f0		 |$LN12@CDummyPipe|
  000f0	00000000	 DCD         |??_7CDummyPipe@@6B@|
  000f4		 |$LN13@CDummyPipe|
  000f4	00000000	 DCD         |dummpDesc|
  000f8		 |$M44234|

			 ENDP  ; |??0CDummyPipe@@QAA@QAVCPhysMem@@@Z|, CDummyPipe::CDummyPipe

	EXPORT	|??_C@_1LG@KDGDMGLF@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAp?$AAl?$AAa?$AAt?$AAf?$AAo?$AAr?$AAm?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@| [ DATA ] ; `string'
; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\musb\musbhcd\usb2com\pipeabs.hpp

  00000			 AREA	 |.pdata|, PDATA
|$T44249| DCD	|$LN7@ChangeMaxP|
	DCD	0x40001604

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1LG@KDGDMGLF@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAp?$AAl?$AAa?$AAt?$AAf?$AAo?$AAr?$AAm?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@| DCB "C"
	DCB	0x0, ":", 0x0, "\\", 0x0, "W", 0x0, "I", 0x0, "N", 0x0, "C"
	DCB	0x0, "E", 0x0, "6", 0x0, "0", 0x0, "0", 0x0, "\\", 0x0, "p"
	DCB	0x0, "l", 0x0, "a", 0x0, "t", 0x0, "f", 0x0, "o", 0x0, "r"
	DCB	0x0, "m", 0x0, "\\", 0x0, "C", 0x0, "O", 0x0, "M", 0x0, "M"
	DCB	0x0, "O", 0x0, "N", 0x0, "\\", 0x0, "S", 0x0, "R", 0x0, "C"
	DCB	0x0, "\\", 0x0, "S", 0x0, "O", 0x0, "C", 0x0, "\\", 0x0, "C"
	DCB	0x0, "O", 0x0, "M", 0x0, "M", 0x0, "O", 0x0, "N", 0x0, "_"
	DCB	0x0, "T", 0x0, "I", 0x0, "_", 0x0, "V", 0x0, "1", 0x0, "\\"
	DCB	0x0, "O", 0x0, "M", 0x0, "A", 0x0, "P", 0x0, "3", 0x0, "5"
	DCB	0x0, "3", 0x0, "0", 0x0, "\\", 0x0, "M", 0x0, "U", 0x0, "S"
	DCB	0x0, "B", 0x0, "\\", 0x0, "M", 0x0, "U", 0x0, "S", 0x0, "B"
	DCB	0x0, "H", 0x0, "C", 0x0, "D", 0x0, "\\", 0x0, "U", 0x0, "S"
	DCB	0x0, "B", 0x0, "2", 0x0, "C", 0x0, "O", 0x0, "M", 0x0, "\\"
	DCB	0x0, "p", 0x0, "i", 0x0, "p", 0x0, "e", 0x0, "a", 0x0, "b"
	DCB	0x0, "s", 0x0, ".", 0x0, "h", 0x0, "p", 0x0, "p", 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ChangeMaxPacketSize@CPipeAbs@@UAAXG@Z| PROC ; CPipeAbs::ChangeMaxPacketSize

; 61   :     virtual void ChangeMaxPacketSize( IN const USHORT ) {ASSERT(FALSE);}; // only available for Controller endpoint

  00000		 |$LN7@ChangeMaxP|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M44246|
  00010	ea000002	 b           |$LN3@ChangeMaxP|
  00014	e3a03001	 mov         r3, #1
  00018	e58d3000	 str         r3, [sp]
  0001c	ea000007	 b           |$LN4@ChangeMaxP|
  00020		 |$LN3@ChangeMaxP|
  00020	e3a0303d	 mov         r3, #0x3D
  00024	e59f2028	 ldr         r2, [pc, #0x28]
  00028	e59f1020	 ldr         r1, [pc, #0x20]
  0002c	e59f0018	 ldr         r0, [pc, #0x18]
  00030	eb000000	 bl          NKDbgPrintfW
  00034	e6000010	 __debugbreak_ce
  00038	e3a03000	 mov         r3, #0
  0003c	e58d3000	 str         r3, [sp]
  00040		 |$LN4@ChangeMaxP|
  00040	e28dd004	 add         sp, sp, #4
  00044	e89d6000	 ldmia       sp, {sp, lr}
  00048	e12fff1e	 bx          lr
  0004c		 |$LN8@ChangeMaxP|
  0004c		 |$LN9@ChangeMaxP|
  0004c	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  00050		 |$LN10@ChangeMaxP|
  00050	00000000	 DCD         |??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@|
  00054		 |$LN11@ChangeMaxP|
  00054	00000000	 DCD         |??_C@_1LG@KDGDMGLF@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAp?$AAl?$AAa?$AAt?$AAf?$AAo?$AAr?$AAm?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  00058		 |$M44247|

			 ENDP  ; |?ChangeMaxPacketSize@CPipeAbs@@UAAXG@Z|, CPipeAbs::ChangeMaxPacketSize

; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\musb\musbhcd\musbmhdrc\cpipe.h

  00000			 AREA	 |.pdata|, PDATA
|$T44261| DCD	|$LN5@SetReserve|
	DCD	0x40000e04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetReservedDeviceAddr@CPipe@@UAAHE@Z| PROC ; CPipe::SetReservedDeviceAddr

; 99   :     BOOL  SetReservedDeviceAddr(UCHAR bReservedDeviceAddr) { m_bReservedDeviceAddr = bReservedDeviceAddr; return TRUE;};

  00000		 |$LN5@SetReserve|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M44258|
  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e283201c	 add         r2, r3, #0x1C
  00018	e5dd3010	 ldrb        r3, [sp, #0x10]
  0001c	e5c23000	 strb        r3, [r2]
  00020	e3a03001	 mov         r3, #1
  00024	e58d3000	 str         r3, [sp]
  00028	e59d0000	 ldr         r0, [sp]
  0002c	e28dd004	 add         sp, sp, #4
  00030	e89d6000	 ldmia       sp, {sp, lr}
  00034	e12fff1e	 bx          lr
  00038		 |$M44259|

			 ENDP  ; |?SetReservedDeviceAddr@CPipe@@UAAHE@Z|, CPipe::SetReservedDeviceAddr


  00000			 AREA	 |.pdata|, PDATA
|$T44269| DCD	|$LN5@GetReserve|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetReservedDeviceAddr@CPipe@@UAAEXZ| PROC ; CPipe::GetReservedDeviceAddr

; 100  :     UCHAR GetReservedDeviceAddr() { return m_bReservedDeviceAddr;};

  00000		 |$LN5@GetReserve|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M44266|
  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e283301c	 add         r3, r3, #0x1C
  00018	e5d33000	 ldrb        r3, [r3]
  0001c	e5cd3000	 strb        r3, [sp]
  00020	e5dd0000	 ldrb        r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M44267|

			 ENDP  ; |?GetReservedDeviceAddr@CPipe@@UAAEXZ|, CPipe::GetReservedDeviceAddr

; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\musb\musbhcd\musbmhdrc\chw.h

  00000			 AREA	 |.pdata|, PDATA
|$T44277| DCD	|$LN5@IssueTrans|
	DCD	0x40000a04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?IssueTransfer@CDummyPipe@@UAA?AW4HCD_REQUEST_STATUS@@EQ6AKPAX@ZQAXKQBXKKQBKK2K3QAK5QAH55@Z| PROC ; CDummyPipe::IssueTransfer

; 102  :         { return requestFailed;};

  00000		 |$LN5@IssueTrans|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d000f	 stmdb       sp!, {r0 - r3}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M44274|
  00010	e3a03000	 mov         r3, #0
  00014	e58d3000	 str         r3, [sp]
  00018	e59d0000	 ldr         r0, [sp]
  0001c	e28dd004	 add         sp, sp, #4
  00020	e89d6000	 ldmia       sp, {sp, lr}
  00024	e12fff1e	 bx          lr
  00028		 |$M44275|

			 ENDP  ; |?IssueTransfer@CDummyPipe@@UAA?AW4HCD_REQUEST_STATUS@@EQ6AKPAX@ZQAXKQBXKKQBKK2K3QAK5QAH55@Z|, CDummyPipe::IssueTransfer


  00000			 AREA	 |.pdata|, PDATA
|$T44285| DCD	|$LN5@OpenPipe|
	DCD	0x40000a04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?OpenPipe@CDummyPipe@@UAA?AW4HCD_REQUEST_STATUS@@XZ| PROC ; CDummyPipe::OpenPipe

; 105  :         { return requestFailed;};

  00000		 |$LN5@OpenPipe|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M44282|
  00010	e3a03000	 mov         r3, #0
  00014	e58d3000	 str         r3, [sp]
  00018	e59d0000	 ldr         r0, [sp]
  0001c	e28dd004	 add         sp, sp, #4
  00020	e89d6000	 ldmia       sp, {sp, lr}
  00024	e12fff1e	 bx          lr
  00028		 |$M44283|

			 ENDP  ; |?OpenPipe@CDummyPipe@@UAA?AW4HCD_REQUEST_STATUS@@XZ|, CDummyPipe::OpenPipe


  00000			 AREA	 |.pdata|, PDATA
|$T44293| DCD	|$LN5@ClosePipe|
	DCD	0x40000a04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ClosePipe@CDummyPipe@@UAA?AW4HCD_REQUEST_STATUS@@XZ| PROC ; CDummyPipe::ClosePipe

; 108  :         { return requestFailed;};

  00000		 |$LN5@ClosePipe|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M44290|
  00010	e3a03000	 mov         r3, #0
  00014	e58d3000	 str         r3, [sp]
  00018	e59d0000	 ldr         r0, [sp]
  0001c	e28dd004	 add         sp, sp, #4
  00020	e89d6000	 ldmia       sp, {sp, lr}
  00024	e12fff1e	 bx          lr
  00028		 |$M44291|

			 ENDP  ; |?ClosePipe@CDummyPipe@@UAA?AW4HCD_REQUEST_STATUS@@XZ|, CDummyPipe::ClosePipe

	EXPORT	|??_C@_1BA@NBFKLKJD@?$AA?4?$AA?2?$AAc?$AAh?$AAw?$AA?4?$AAh?$AA?$AA@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T44303| DCD	|$LN7@IsPipeHalt|
	DCD	0x40001904

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@NBFKLKJD@?$AA?4?$AA?2?$AAc?$AAh?$AAw?$AA?4?$AAh?$AA?$AA@| DCB "."
	DCB	0x0, "\\", 0x0, "c", 0x0, "h", 0x0, "w", 0x0, ".", 0x0, "h"
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?IsPipeHalted@CDummyPipe@@UAA?AW4HCD_REQUEST_STATUS@@QAH@Z| PROC ; CDummyPipe::IsPipeHalted

; 111  :         {   

  00000		 |$LN7@IsPipeHalt|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd008	 sub         sp, sp, #8
  00010		 |$M44300|

; 112  :             ASSERT(FALSE);

  00010	ea000002	 b           |$LN3@IsPipeHalt|
  00014	e3a03001	 mov         r3, #1
  00018	e58d3004	 str         r3, [sp, #4]
  0001c	ea000007	 b           |$LN4@IsPipeHalt|
  00020		 |$LN3@IsPipeHalt|
  00020	e3a03070	 mov         r3, #0x70
  00024	e59f2034	 ldr         r2, [pc, #0x34]
  00028	e59f102c	 ldr         r1, [pc, #0x2C]
  0002c	e59f0024	 ldr         r0, [pc, #0x24]
  00030	eb000000	 bl          NKDbgPrintfW
  00034	e6000010	 __debugbreak_ce
  00038	e3a03000	 mov         r3, #0
  0003c	e58d3004	 str         r3, [sp, #4]
  00040		 |$LN4@IsPipeHalt|

; 113  :             return requestFailed;

  00040	e3a03000	 mov         r3, #0
  00044	e58d3000	 str         r3, [sp]

; 114  :         };

  00048	e59d0000	 ldr         r0, [sp]
  0004c	e28dd008	 add         sp, sp, #8
  00050	e89d6000	 ldmia       sp, {sp, lr}
  00054	e12fff1e	 bx          lr
  00058		 |$LN8@IsPipeHalt|
  00058		 |$LN9@IsPipeHalt|
  00058	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  0005c		 |$LN10@IsPipeHalt|
  0005c	00000000	 DCD         |??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@|
  00060		 |$LN11@IsPipeHalt|
  00060	00000000	 DCD         |??_C@_1BA@NBFKLKJD@?$AA?4?$AA?2?$AAc?$AAh?$AAw?$AA?4?$AAh?$AA?$AA@|
  00064		 |$M44301|

			 ENDP  ; |?IsPipeHalted@CDummyPipe@@UAA?AW4HCD_REQUEST_STATUS@@QAH@Z|, CDummyPipe::IsPipeHalted


  00000			 AREA	 |.pdata|, PDATA
|$T44314| DCD	|$LN5@ClearHalte|
	DCD	0x40000503
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ClearHaltedFlag@CDummyPipe@@UAAXXZ| PROC ; CDummyPipe::ClearHaltedFlag

; 116  :     virtual void ClearHaltedFlag( void ) {;};    

  00000		 |$LN5@ClearHalte|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M44311|
  0000c	e89d6000	 ldmia       sp, {sp, lr}
  00010	e12fff1e	 bx          lr
  00014		 |$M44312|

			 ENDP  ; |?ClearHaltedFlag@CDummyPipe@@UAAXXZ|, CDummyPipe::ClearHaltedFlag


  00000			 AREA	 |.pdata|, PDATA
|$T44322| DCD	|$LN5@AbortTrans|
	DCD	0x40000a04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?AbortTransfer@CDummyPipe@@UAA?AW4HCD_REQUEST_STATUS@@Q6AKPAX@ZQAXPBX@Z| PROC ; CDummyPipe::AbortTransfer

; 122  :         {return requestFailed;};

  00000		 |$LN5@AbortTrans|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d000f	 stmdb       sp!, {r0 - r3}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M44319|
  00010	e3a03000	 mov         r3, #0
  00014	e58d3000	 str         r3, [sp]
  00018	e59d0000	 ldr         r0, [sp]
  0001c	e28dd004	 add         sp, sp, #4
  00020	e89d6000	 ldmia       sp, {sp, lr}
  00024	e12fff1e	 bx          lr
  00028		 |$M44320|

			 ENDP  ; |?AbortTransfer@CDummyPipe@@UAA?AW4HCD_REQUEST_STATUS@@Q6AKPAX@ZQAXPBX@Z|, CDummyPipe::AbortTransfer


  00000			 AREA	 |.pdata|, PDATA
|$T44330| DCD	|$LN5@GetCPhysMe|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetCPhysMem@CDummyPipe@@UAAPAVCPhysMem@@XZ| PROC ; CDummyPipe::GetCPhysMem

; 127  :     virtual CPhysMem * GetCPhysMem() {return m_pCPhysMem;};

  00000		 |$LN5@GetCPhysMe|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M44327|
  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e2833064	 add         r3, r3, #0x64
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3000	 str         r3, [sp]
  00020	e59d0000	 ldr         r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M44328|

			 ENDP  ; |?GetCPhysMem@CDummyPipe@@UAAPAVCPhysMem@@XZ|, CDummyPipe::GetCPhysMem


  00000			 AREA	 |.pdata|, PDATA
|$T44338| DCD	|$LN5@ScheduleTr|
	DCD	0x40000a04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ScheduleTransfer@CDummyPipe@@EAA?AW4HCD_REQUEST_STATUS@@XZ| PROC ; CDummyPipe::ScheduleTransfer

; 134  :     HCD_REQUEST_STATUS  ScheduleTransfer( void ) { return requestFailed;};

  00000		 |$LN5@ScheduleTr|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M44335|
  00010	e3a03000	 mov         r3, #0
  00014	e58d3000	 str         r3, [sp]
  00018	e59d0000	 ldr         r0, [sp]
  0001c	e28dd004	 add         sp, sp, #4
  00020	e89d6000	 ldmia       sp, {sp, lr}
  00024	e12fff1e	 bx          lr
  00028		 |$M44336|

			 ENDP  ; |?ScheduleTransfer@CDummyPipe@@EAA?AW4HCD_REQUEST_STATUS@@XZ|, CDummyPipe::ScheduleTransfer

	EXPORT	|?cszPipeType@?1??GetPipeType@CDummyPipe@@MBAPBGXZ@4PBGB| [ DATA ] ; `CDummyPipe::GetPipeType'::`2'::cszPipeType
	EXPORT	|??_C@_1M@EOJMLNDL@?$AAD?$AAu?$AAm?$AAm?$AAy?$AA?$AA@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T44346| DCD	|$LN5@GetPipeTyp|
	DCD	0x40000c04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@EOJMLNDL@?$AAD?$AAu?$AAm?$AAm?$AAy?$AA?$AA@| DCB "D", 0x0, "u", 0x0
	DCB	"m", 0x0, "m", 0x0, "y", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.data|, DATA
|?cszPipeType@?1??GetPipeType@CDummyPipe@@MBAPBGXZ@4PBGB| DCD |??_C@_1M@EOJMLNDL@?$AAD?$AAu?$AAm?$AAm?$AAy?$AA?$AA@| ; `CDummyPipe::GetPipeType'::`2'::cszPipeType
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetPipeType@CDummyPipe@@MBAPBGXZ| PROC ; CDummyPipe::GetPipeType

; 146  :     {

  00000		 |$LN5@GetPipeTyp|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M44343|

; 147  :         static const TCHAR* cszPipeType = TEXT("Dummy");
; 148  :         return cszPipeType;

  00010	e59f3014	 ldr         r3, [pc, #0x14]
  00014	e5933000	 ldr         r3, [r3]
  00018	e58d3000	 str         r3, [sp]

; 149  :     }

  0001c	e59d0000	 ldr         r0, [sp]
  00020	e28dd004	 add         sp, sp, #4
  00024	e89d6000	 ldmia       sp, {sp, lr}
  00028	e12fff1e	 bx          lr
  0002c		 |$LN6@GetPipeTyp|
  0002c		 |$LN7@GetPipeTyp|
  0002c	00000000	 DCD         |?cszPipeType@?1??GetPipeType@CDummyPipe@@MBAPBGXZ@4PBGB|
  00030		 |$M44344|

			 ENDP  ; |?GetPipeType@CDummyPipe@@MBAPBGXZ|, CDummyPipe::GetPipeType


  00000			 AREA	 |.pdata|, PDATA
|$T44356| DCD	|$LN5@AreTransfe|
	DCD	0x40000a04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?AreTransferParametersValid@CDummyPipe@@MBAHPBUSTRANSFER@@@Z| PROC ; CDummyPipe::AreTransferParametersValid

; 152  :     virtual BOOL    AreTransferParametersValid( const STransfer * /*pTransfer = NULL*/ )  const { return FALSE;};

  00000		 |$LN5@AreTransfe|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M44353|
  00010	e3a03000	 mov         r3, #0
  00014	e58d3000	 str         r3, [sp]
  00018	e59d0000	 ldr         r0, [sp]
  0001c	e28dd004	 add         sp, sp, #4
  00020	e89d6000	 ldmia       sp, {sp, lr}
  00024	e12fff1e	 bx          lr
  00028		 |$M44354|

			 ENDP  ; |?AreTransferParametersValid@CDummyPipe@@MBAHPBUSTRANSFER@@@Z|, CDummyPipe::AreTransferParametersValid


  00000			 AREA	 |.pdata|, PDATA
|$T44364| DCD	|$LN5@CheckForDo|
	DCD	0x40000a04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?CheckForDoneTransfers@CDummyPipe@@MAAHXZ| PROC ; CDummyPipe::CheckForDoneTransfers

; 154  :     BOOL    CheckForDoneTransfers( void) { return FALSE; };

  00000		 |$LN5@CheckForDo|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M44361|
  00010	e3a03000	 mov         r3, #0
  00014	e58d3000	 str         r3, [sp]
  00018	e59d0000	 ldr         r0, [sp]
  0001c	e28dd004	 add         sp, sp, #4
  00020	e89d6000	 ldmia       sp, {sp, lr}
  00024	e12fff1e	 bx          lr
  00028		 |$M44362|

			 ENDP  ; |?CheckForDoneTransfers@CDummyPipe@@MAAHXZ|, CDummyPipe::CheckForDoneTransfers


  00000			 AREA	 |.pdata|, PDATA
|$T44372| DCD	|$LN5@ProcessEP|
	DCD	0x40000a04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ProcessEP@CDummyPipe@@MAAHKH@Z| PROC	; CDummyPipe::ProcessEP

; 156  :     {

  00000		 |$LN5@ProcessEP|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0007	 stmdb       sp!, {r0 - r2}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M44369|

; 157  :         UNREFERENCED_PARAMETER(isDMA);
; 158  :         UNREFERENCED_PARAMETER(dwStatus); 
; 159  :         return FALSE; 

  00010	e3a03000	 mov         r3, #0
  00014	e58d3000	 str         r3, [sp]

; 160  :     };

  00018	e59d0000	 ldr         r0, [sp]
  0001c	e28dd004	 add         sp, sp, #4
  00020	e89d6000	 ldmia       sp, {sp, lr}
  00024	e12fff1e	 bx          lr
  00028		 |$M44370|

			 ENDP  ; |?ProcessEP@CDummyPipe@@MAAHKH@Z|, CDummyPipe::ProcessEP

	EXPORT	|??1CDummyPipe@@UAA@XZ|			; CDummyPipe::~CDummyPipe
	IMPORT	|??3@YAXPAX@Z|				; operator delete

  00000			 AREA	 |.pdata|, PDATA
|$T44380| DCD	|$LN6@scalar|
	DCD	0x40001104
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??_GCDummyPipe@@UAAPAXI@Z| PROC	; CDummyPipe::`scalar deleting destructor'
  00000		 |$LN6@scalar|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M44377|
  00010	e59d000c	 ldr         r0, [sp, #0xC]
  00014	eb000000	 bl          |??1CDummyPipe@@UAA@XZ|
  00018	e59d3010	 ldr         r3, [sp, #0x10]
  0001c	e3130001	 tst         r3, #1
  00020	0a000001	 beq         |$LN1@scalar|
  00024	e59d000c	 ldr         r0, [sp, #0xC]
  00028	eb000000	 bl          |??3@YAXPAX@Z|
  0002c		 |$LN1@scalar|
  0002c	e59d300c	 ldr         r3, [sp, #0xC]
  00030	e58d3000	 str         r3, [sp]
  00034	e59d0000	 ldr         r0, [sp]
  00038	e28dd004	 add         sp, sp, #4
  0003c	e89d6000	 ldmia       sp, {sp, lr}
  00040	e12fff1e	 bx          lr
  00044		 |$M44378|

			 ENDP  ; |??_GCDummyPipe@@UAAPAXI@Z|, CDummyPipe::`scalar deleting destructor'

	IMPORT	|??1CPipe@@UAA@XZ|			; CPipe::~CPipe

  00000			 AREA	 |.pdata|, PDATA
|$T44387| DCD	|$LN5@CDummyPipe@2|
	DCD	0x40000b03
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??1CDummyPipe@@UAA@XZ| PROC		; CDummyPipe::~CDummyPipe

; 80   :     virtual ~CDummyPipe() {;};

  00000		 |$LN5@CDummyPipe@2|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M44384|
  0000c	e59f2014	 ldr         r2, [pc, #0x14]
  00010	e59d3008	 ldr         r3, [sp, #8]
  00014	e5832000	 str         r2, [r3]
  00018	e59d0008	 ldr         r0, [sp, #8]
  0001c	eb000000	 bl          |??1CPipe@@UAA@XZ|
  00020	e89d6000	 ldmia       sp, {sp, lr}
  00024	e12fff1e	 bx          lr
  00028		 |$LN6@CDummyPipe@2|
  00028		 |$LN7@CDummyPipe@2|
  00028	00000000	 DCD         |??_7CDummyPipe@@6B@|
  0002c		 |$M44385|

			 ENDP  ; |??1CDummyPipe@@UAA@XZ|, CDummyPipe::~CDummyPipe

	EXPORT	|??_C@_1IE@FLPBCPAJ@?$AA?9?$AAC?$AAP?$AAi?$AAp?$AAe?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?4?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAi@| [ DATA ] ; `string'
	EXPORT	|?CheckForDoneTransfersThreadStub@CBusyPipeList@@CAKPAX@Z| ; CBusyPipeList::CheckForDoneTransfersThreadStub
	EXPORT	|??_C@_1IC@BKOJKGJB@?$AA?9?$AAC?$AAP?$AAi?$AAp?$AAe?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?4?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAi@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CO@JGKEOBPL@?$AAC?$AAB?$AAu?$AAs?$AAy?$AAP?$AAi?$AAp?$AAe?$AAL?$AAi?$AAs?$AAt?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AA?$CL?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|?Init@CBusyPipeList@@QAAHXZ|		; CBusyPipeList::Init
	IMPORT	|CeSetThreadPriority|
	IMPORT	|g_IstThreadPriority|
	IMPORT	|CreateThread|
	IMPORT	|CreateEventW|
	IMPORT	|dpCurSettings|

  00008			 AREA	 |.pdata|, PDATA
|$T44405| DCD	|$LN19@Init|
	DCD	0x4000a504
; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\musb\musbhcd\musbmhdrc\chw.cpp

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IE@FLPBCPAJ@?$AA?9?$AAC?$AAP?$AAi?$AAp?$AAe?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?4?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAi@| DCB "-"
	DCB	0x0, "C", 0x0, "P", 0x0, "i", 0x0, "p", 0x0, "e", 0x0, ":"
	DCB	0x0, ":", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i"
	DCB	0x0, "a", 0x0, "l", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, "."
	DCB	0x0, " ", 0x0, "E", 0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r"
	DCB	0x0, " ", 0x0, "c", 0x0, "r", 0x0, "e", 0x0, "a", 0x0, "t"
	DCB	0x0, "i", 0x0, "n", 0x0, "g", 0x0, " ", 0x0, "p", 0x0, "r"
	DCB	0x0, "o", 0x0, "c", 0x0, "e", 0x0, "s", 0x0, "s", 0x0, " "
	DCB	0x0, "d", 0x0, "o", 0x0, "n", 0x0, "e", 0x0, " ", 0x0, "t"
	DCB	0x0, "r", 0x0, "a", 0x0, "n", 0x0, "s", 0x0, "f", 0x0, "e"
	DCB	0x0, "r", 0x0, "s", 0x0, " ", 0x0, "t", 0x0, "h", 0x0, "r"
	DCB	0x0, "e", 0x0, "a", 0x0, "d", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IC@BKOJKGJB@?$AA?9?$AAC?$AAP?$AAi?$AAp?$AAe?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?4?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAi@| DCB "-"
	DCB	0x0, "C", 0x0, "P", 0x0, "i", 0x0, "p", 0x0, "e", 0x0, ":"
	DCB	0x0, ":", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i"
	DCB	0x0, "a", 0x0, "l", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, "."
	DCB	0x0, " ", 0x0, "E", 0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r"
	DCB	0x0, " ", 0x0, "c", 0x0, "r", 0x0, "e", 0x0, "a", 0x0, "t"
	DCB	0x0, "i", 0x0, "n", 0x0, "g", 0x0, " ", 0x0, "p", 0x0, "r"
	DCB	0x0, "o", 0x0, "c", 0x0, "e", 0x0, "s", 0x0, "s", 0x0, " "
	DCB	0x0, "d", 0x0, "o", 0x0, "n", 0x0, "e", 0x0, " ", 0x0, "t"
	DCB	0x0, "r", 0x0, "a", 0x0, "n", 0x0, "s", 0x0, "f", 0x0, "e"
	DCB	0x0, "r", 0x0, "s", 0x0, " ", 0x0, "e", 0x0, "v", 0x0, "e"
	DCB	0x0, "n", 0x0, "t", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@JGKEOBPL@?$AAC?$AAB?$AAu?$AAs?$AAy?$AAP?$AAi?$AAp?$AAe?$AAL?$AAi?$AAs?$AAt?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AA?$CL?$AA?$AN?$AA?6?$AA?$AA@| DCB "C"
	DCB	0x0, "B", 0x0, "u", 0x0, "s", 0x0, "y", 0x0, "P", 0x0, "i"
	DCB	0x0, "p", 0x0, "e", 0x0, "L", 0x0, "i", 0x0, "s", 0x0, "t"
	DCB	0x0, ":", 0x0, ":", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t"
	DCB	0x0, "+", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  000f8			 AREA	 |.text|, CODE, ARM

  000f8		 |?Init@CBusyPipeList@@QAAHXZ| PROC	; CBusyPipeList::Init

; 104  : {

  000f8		 |$LN19@Init|
  000f8	e1a0c00d	 mov         r12, sp
  000fc	e92d0001	 stmdb       sp!, {r0}
  00100	e92d5000	 stmdb       sp!, {r12, lr}
  00104	e24dd02c	 sub         sp, sp, #0x2C
  00108		 |$M44402|

; 105  :     int i;
; 106  :     DEBUGMSG(ZONE_PIPE, (TEXT("CBusyPipeList::Init+\r\n")));

  00108	e59f326c	 ldr         r3, [pc, #0x26C]
  0010c	e5933440	 ldr         r3, [r3, #0x440]
  00110	e3130080	 tst         r3, #0x80
  00114	0a000004	 beq         |$LN11@Init|
  00118	e59f0268	 ldr         r0, [pc, #0x268]
  0011c	eb000000	 bl          NKDbgPrintfW
  00120	e3a03001	 mov         r3, #1
  00124	e58d3018	 str         r3, [sp, #0x18]
  00128	ea000001	 b           |$LN12@Init|
  0012c		 |$LN11@Init|
  0012c	e3a03000	 mov         r3, #0
  00130	e58d3018	 str         r3, [sp, #0x18]
  00134		 |$LN12@Init|

; 107  :     m_fCheckTransferThreadClosing=FALSE;     

  00134	e59d3034	 ldr         r3, [sp, #0x34]
  00138	e28320b8	 add         r2, r3, #0xB8
  0013c	e3a03000	 mov         r3, #0
  00140	e5823000	 str         r3, [r2]

; 108  :     m_pBusyPipeList = NULL;

  00144	e59d3034	 ldr         r3, [sp, #0x34]
  00148	e28320cc	 add         r2, r3, #0xCC
  0014c	e3a03000	 mov         r3, #0
  00150	e5823000	 str         r3, [r2]

; 109  : #ifdef DEBUG
; 110  :     m_debug_numItemsOnBusyPipeList = 0;

  00154	e59d3034	 ldr         r3, [sp, #0x34]
  00158	e28320d4	 add         r2, r3, #0xD4
  0015c	e3a03000	 mov         r3, #0
  00160	e5823000	 str         r3, [r2]

; 111  : #endif
; 112  :     // In order to identify which endpoint , we need to find out which endpoint is receiving
; 113  :     // intr.
; 114  : 
; 115  :     // Create endpoint update event
; 116  :     m_hUpdateEPEvent = CreateEvent( NULL, FALSE, FALSE, NULL );    

  00164	e3a03000	 mov         r3, #0
  00168	e3a02000	 mov         r2, #0
  0016c	e3a01000	 mov         r1, #0
  00170	e3a00000	 mov         r0, #0
  00174	eb000000	 bl          CreateEventW
  00178	e58d001c	 str         r0, [sp, #0x1C]
  0017c	e59d3034	 ldr         r3, [sp, #0x34]
  00180	e28320c4	 add         r2, r3, #0xC4
  00184	e59d301c	 ldr         r3, [sp, #0x1C]
  00188	e5823000	 str         r3, [r2]

; 117  :     if ( m_hUpdateEPEvent == NULL ) {    

  0018c	e59d3034	 ldr         r3, [sp, #0x34]
  00190	e28330c4	 add         r3, r3, #0xC4
  00194	e5933000	 ldr         r3, [r3]
  00198	e3530000	 cmp         r3, #0
  0019c	1a00000d	 bne         |$LN8@Init|

; 118  :         DEBUGMSG(ZONE_ERROR, (TEXT("-CPipe::Initialize. Error creating process done transfers event\n")));            

  001a0	e59f31d4	 ldr         r3, [pc, #0x1D4]
  001a4	e5933440	 ldr         r3, [r3, #0x440]
  001a8	e3130901	 tst         r3, #1, 18
  001ac	0a000004	 beq         |$LN13@Init|
  001b0	e59f01cc	 ldr         r0, [pc, #0x1CC]
  001b4	eb000000	 bl          NKDbgPrintfW
  001b8	e3a03001	 mov         r3, #1
  001bc	e58d3020	 str         r3, [sp, #0x20]
  001c0	ea000001	 b           |$LN14@Init|
  001c4		 |$LN13@Init|
  001c4	e3a03000	 mov         r3, #0
  001c8	e58d3020	 str         r3, [sp, #0x20]
  001cc		 |$LN14@Init|

; 119  :         return FALSE;

  001cc	e3a03000	 mov         r3, #0
  001d0	e58d300c	 str         r3, [sp, #0xC]
  001d4	ea000062	 b           |$LN9@Init|
  001d8		 |$LN8@Init|

; 120  :     }
; 121  :   
; 122  :     // set up our thread to check for done transfers
; 123  :     // currently, the context passed to CheckForDoneTransfersThread is ignored
; 124  :     m_hCheckForDoneTransfersThread = CreateThread( 0, 0, CheckForDoneTransfersThreadStub, (PVOID)this, 0, NULL );

  001d8	e3a03000	 mov         r3, #0
  001dc	e58d3004	 str         r3, [sp, #4]
  001e0	e3a03000	 mov         r3, #0
  001e4	e58d3000	 str         r3, [sp]
  001e8	e59d3034	 ldr         r3, [sp, #0x34]
  001ec	e59f218c	 ldr         r2, [pc, #0x18C]
  001f0	e3a01000	 mov         r1, #0
  001f4	e3a00000	 mov         r0, #0
  001f8	eb000000	 bl          CreateThread
  001fc	e58d0024	 str         r0, [sp, #0x24]
  00200	e59d3034	 ldr         r3, [sp, #0x34]
  00204	e28320c8	 add         r2, r3, #0xC8
  00208	e59d3024	 ldr         r3, [sp, #0x24]
  0020c	e5823000	 str         r3, [r2]

; 125  :     if ( m_hCheckForDoneTransfersThread == NULL ) {

  00210	e59d3034	 ldr         r3, [sp, #0x34]
  00214	e28330c8	 add         r3, r3, #0xC8
  00218	e5933000	 ldr         r3, [r3]
  0021c	e3530000	 cmp         r3, #0
  00220	1a00000d	 bne         |$LN7@Init|

; 126  :         DEBUGMSG(ZONE_ERROR, (TEXT("-CPipe::Initialize. Error creating process done transfers thread\n")));

  00224	e59f3150	 ldr         r3, [pc, #0x150]
  00228	e5933440	 ldr         r3, [r3, #0x440]
  0022c	e3130901	 tst         r3, #1, 18
  00230	0a000004	 beq         |$LN15@Init|
  00234	e59f013c	 ldr         r0, [pc, #0x13C]
  00238	eb000000	 bl          NKDbgPrintfW
  0023c	e3a03001	 mov         r3, #1
  00240	e58d3028	 str         r3, [sp, #0x28]
  00244	ea000001	 b           |$LN16@Init|
  00248		 |$LN15@Init|
  00248	e3a03000	 mov         r3, #0
  0024c	e58d3028	 str         r3, [sp, #0x28]
  00250		 |$LN16@Init|

; 127  :         return FALSE;

  00250	e3a03000	 mov         r3, #0
  00254	e58d300c	 str         r3, [sp, #0xC]
  00258	ea000041	 b           |$LN9@Init|
  0025c		 |$LN7@Init|

; 128  :     }
; 129  :     CeSetThreadPriority( m_hCheckForDoneTransfersThread, g_IstThreadPriority + RELATIVE_PRIO_CHECKDONE );

  0025c	e59f3110	 ldr         r3, [pc, #0x110]
  00260	e5933000	 ldr         r3, [r3]
  00264	e2431001	 sub         r1, r3, #1
  00268	e59d3034	 ldr         r3, [sp, #0x34]
  0026c	e28330c8	 add         r3, r3, #0xC8
  00270	e5930000	 ldr         r0, [r3]
  00274	eb000000	 bl          CeSetThreadPriority

; 130  : 
; 131  :     m_hEP0CheckForDoneTransfersEvent = NULL;            

  00278	e59d3034	 ldr         r3, [sp, #0x34]
  0027c	e28320bc	 add         r2, r3, #0xBC
  00280	e3a03000	 mov         r3, #0
  00284	e5823000	 str         r3, [r2]

; 132  :     m_PipeListInfoEP0CheckForDoneTransfersCount = NULL;

  00288	e59d3034	 ldr         r3, [sp, #0x34]
  0028c	e28320c0	 add         r2, r3, #0xC0
  00290	e3a03000	 mov         r3, #0
  00294	e5823000	 str         r3, [r2]

; 133  :     
; 134  :     for (i = 0; i < HOST_MAX_EPNUM; i++)

  00298	e3a03000	 mov         r3, #0
  0029c	e58d3008	 str         r3, [sp, #8]
  002a0	ea000002	 b           |$LN6@Init|
  002a4		 |$LN5@Init|
  002a4	e59d3008	 ldr         r3, [sp, #8]
  002a8	e2833001	 add         r3, r3, #1
  002ac	e58d3008	 str         r3, [sp, #8]
  002b0		 |$LN6@Init|
  002b0	e59d3008	 ldr         r3, [sp, #8]
  002b4	e3530010	 cmp         r3, #0x10
  002b8	aa000011	 bge         |$LN4@Init|

; 135  :     {
; 136  :         m_hEP2Handles[i][DIR_IN] = NULL;

  002bc	e59d3034	 ldr         r3, [sp, #0x34]
  002c0	e2831014	 add         r1, r3, #0x14
  002c4	e59d2008	 ldr         r2, [sp, #8]
  002c8	e3a03008	 mov         r3, #8
  002cc	e0030392	 mul         r3, r2, r3
  002d0	e0812003	 add         r2, r1, r3
  002d4	e3a03000	 mov         r3, #0
  002d8	e5823000	 str         r3, [r2]

; 137  :         m_hEP2Handles[i][DIR_OUT] = NULL;

  002dc	e59d3034	 ldr         r3, [sp, #0x34]
  002e0	e2831014	 add         r1, r3, #0x14
  002e4	e59d2008	 ldr         r2, [sp, #8]
  002e8	e3a03008	 mov         r3, #8
  002ec	e0030392	 mul         r3, r2, r3
  002f0	e0813003	 add         r3, r1, r3
  002f4	e2832004	 add         r2, r3, #4
  002f8	e3a03000	 mov         r3, #0
  002fc	e5823000	 str         r3, [r2]

; 138  :     }

  00300	eaffffe7	 b           |$LN5@Init|
  00304		 |$LN4@Init|

; 139  : 
; 140  :     for (i = 0; i < DMA_MAX_CHANNEL; i++)

  00304	e3a03000	 mov         r3, #0
  00308	e58d3008	 str         r3, [sp, #8]
  0030c	ea000002	 b           |$LN3@Init|
  00310		 |$LN2@Init|
  00310	e59d3008	 ldr         r3, [sp, #8]
  00314	e2833001	 add         r3, r3, #1
  00318	e58d3008	 str         r3, [sp, #8]
  0031c		 |$LN3@Init|
  0031c	e59d3008	 ldr         r3, [sp, #8]
  00320	e3530008	 cmp         r3, #8
  00324	aa000008	 bge         |$LN1@Init|

; 141  :     {
; 142  :         m_hDMA2Handles[i] = NULL;

  00328	e59d3034	 ldr         r3, [sp, #0x34]
  0032c	e2831094	 add         r1, r3, #0x94
  00330	e59d2008	 ldr         r2, [sp, #8]
  00334	e3a03004	 mov         r3, #4
  00338	e0030392	 mul         r3, r2, r3
  0033c	e0812003	 add         r2, r1, r3
  00340	e3a03000	 mov         r3, #0
  00344	e5823000	 str         r3, [r2]

; 143  :     }

  00348	eafffff0	 b           |$LN2@Init|
  0034c		 |$LN1@Init|

; 144  : 
; 145  :     m_SignalDisconnectACK = TRUE;

  0034c	e59d3034	 ldr         r3, [sp, #0x34]
  00350	e28320d0	 add         r2, r3, #0xD0
  00354	e3a03001	 mov         r3, #1
  00358	e5823000	 str         r3, [r2]

; 146  :     return TRUE;

  0035c	e3a03001	 mov         r3, #1
  00360	e58d300c	 str         r3, [sp, #0xC]
  00364		 |$LN9@Init|

; 147  : 
; 148  : }

  00364	e59d000c	 ldr         r0, [sp, #0xC]
  00368	e28dd02c	 add         sp, sp, #0x2C
  0036c	e89d6000	 ldmia       sp, {sp, lr}
  00370	e12fff1e	 bx          lr
  00374		 |$LN20@Init|
  00374		 |$LN21@Init|
  00374	00000000	 DCD         |g_IstThreadPriority|
  00378		 |$LN22@Init|
  00378	00000000	 DCD         |??_C@_1IE@FLPBCPAJ@?$AA?9?$AAC?$AAP?$AAi?$AAp?$AAe?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?4?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAi@|
  0037c		 |$LN23@Init|
  0037c	00000000	 DCD         |dpCurSettings|
  00380		 |$LN24@Init|
  00380	00000000	 DCD         |?CheckForDoneTransfersThreadStub@CBusyPipeList@@CAKPAX@Z|
  00384		 |$LN25@Init|
  00384	00000000	 DCD         |??_C@_1IC@BKOJKGJB@?$AA?9?$AAC?$AAP?$AAi?$AAp?$AAe?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?4?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAi@|
  00388		 |$LN26@Init|
  00388	00000000	 DCD         |??_C@_1CO@JGKEOBPL@?$AAC?$AAB?$AAu?$AAs?$AAy?$AAP?$AAi?$AAp?$AAe?$AAL?$AAi?$AAs?$AAt?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AA?$CL?$AA?$AN?$AA?6?$AA?$AA@|
  0038c		 |$M44403|

			 ENDP  ; |?Init@CBusyPipeList@@QAAHXZ|, CBusyPipeList::Init

	EXPORT	|SetEvent|
	EXPORT	|?DeInit@CBusyPipeList@@QAAXXZ|		; CBusyPipeList::DeInit
	IMPORT	|CloseHandle|
	IMPORT	|TerminateThread|
	IMPORT	|WaitForSingleObject|

  00010			 AREA	 |.pdata|, PDATA
|$T44419| DCD	|$LN11@DeInit|
	DCD	0x40005a04
; Function compile flags: /Odtp

  0038c			 AREA	 |.text|, CODE, ARM

  0038c		 |?DeInit@CBusyPipeList@@QAAXXZ| PROC	; CBusyPipeList::DeInit

; 150  : {

  0038c		 |$LN11@DeInit|
  0038c	e1a0c00d	 mov         r12, sp
  00390	e92d0001	 stmdb       sp!, {r0}
  00394	e92d5000	 stmdb       sp!, {r12, lr}
  00398	e24dd00c	 sub         sp, sp, #0xC
  0039c		 |$M44416|

; 151  :     m_fCheckTransferThreadClosing=TRUE;  

  0039c	e59d3014	 ldr         r3, [sp, #0x14]
  003a0	e28320b8	 add         r2, r3, #0xB8
  003a4	e3a03001	 mov         r3, #1
  003a8	e5823000	 str         r3, [r2]

; 152  :     // We just check Update EP
; 153  :     if ( m_hUpdateEPEvent != NULL ) {

  003ac	e59d3014	 ldr         r3, [sp, #0x14]
  003b0	e28330c4	 add         r3, r3, #0xC4
  003b4	e5933000	 ldr         r3, [r3]
  003b8	e3530000	 cmp         r3, #0
  003bc	0a000035	 beq         |$LN4@DeInit|

; 154  :        SetEvent(m_hUpdateEPEvent);

  003c0	e59d3014	 ldr         r3, [sp, #0x14]
  003c4	e28330c4	 add         r3, r3, #0xC4
  003c8	e5930000	 ldr         r0, [r3]
  003cc	eb000000	 bl          SetEvent

; 155  :        if ( m_hCheckForDoneTransfersThread ) {

  003d0	e59d3014	 ldr         r3, [sp, #0x14]
  003d4	e28330c8	 add         r3, r3, #0xC8
  003d8	e5933000	 ldr         r3, [r3]
  003dc	e3530000	 cmp         r3, #0
  003e0	0a000024	 beq         |$LN3@DeInit|

; 156  :            DWORD dwWaitReturn = WaitForSingleObject( m_hCheckForDoneTransfersThread, 5000 );

  003e4	e3a01c13	 mov         r1, #0x13, 24
  003e8	e3811088	 orr         r1, r1, #0x88
  003ec	e59d3014	 ldr         r3, [sp, #0x14]
  003f0	e28330c8	 add         r3, r3, #0xC8
  003f4	e5930000	 ldr         r0, [r3]
  003f8	eb000000	 bl          WaitForSingleObject
  003fc	e58d0004	 str         r0, [sp, #4]
  00400	e59d3004	 ldr         r3, [sp, #4]
  00404	e58d3000	 str         r3, [sp]

; 157  :            if ( dwWaitReturn != WAIT_OBJECT_0 ) {

  00408	e59d3000	 ldr         r3, [sp]
  0040c	e3530000	 cmp         r3, #0
  00410	0a000010	 beq         |$LN2@DeInit|

; 158  :                 DEBUGCHK( 0 ); // check why thread is blocked

  00414	ea000002	 b           |$LN7@DeInit|
  00418	e3a03001	 mov         r3, #1
  0041c	e58d3008	 str         r3, [sp, #8]
  00420	ea000007	 b           |$LN8@DeInit|
  00424		 |$LN7@DeInit|
  00424	e3a0309e	 mov         r3, #0x9E
  00428	e59f20c0	 ldr         r2, [pc, #0xC0]
  0042c	e59f10b8	 ldr         r1, [pc, #0xB8]
  00430	e59f00b0	 ldr         r0, [pc, #0xB0]
  00434	eb000000	 bl          NKDbgPrintfW
  00438	e6000010	 __debugbreak_ce
  0043c	e3a03000	 mov         r3, #0
  00440	e58d3008	 str         r3, [sp, #8]
  00444		 |$LN8@DeInit|

; 159  : #pragma prefast(suppress: 258, "Try to recover gracefully from a pathological failure")
; 160  :                 TerminateThread( m_hCheckForDoneTransfersThread, DWORD(-1) );

  00444	e3e01000	 mvn         r1, #0
  00448	e59d3014	 ldr         r3, [sp, #0x14]
  0044c	e28330c8	 add         r3, r3, #0xC8
  00450	e5930000	 ldr         r0, [r3]
  00454	eb000000	 bl          TerminateThread
  00458		 |$LN2@DeInit|

; 161  :            }
; 162  :            CloseHandle( m_hCheckForDoneTransfersThread );

  00458	e59d3014	 ldr         r3, [sp, #0x14]
  0045c	e28330c8	 add         r3, r3, #0xC8
  00460	e5930000	 ldr         r0, [r3]
  00464	eb000000	 bl          CloseHandle

; 163  :            m_hCheckForDoneTransfersThread = NULL;

  00468	e59d3014	 ldr         r3, [sp, #0x14]
  0046c	e28320c8	 add         r2, r3, #0xC8
  00470	e3a03000	 mov         r3, #0
  00474	e5823000	 str         r3, [r2]
  00478		 |$LN3@DeInit|

; 164  :         }
; 165  :         CloseHandle( m_hUpdateEPEvent);

  00478	e59d3014	 ldr         r3, [sp, #0x14]
  0047c	e28330c4	 add         r3, r3, #0xC4
  00480	e5930000	 ldr         r0, [r3]
  00484	eb000000	 bl          CloseHandle

; 166  :         m_hUpdateEPEvent = NULL;

  00488	e59d3014	 ldr         r3, [sp, #0x14]
  0048c	e28320c4	 add         r2, r3, #0xC4
  00490	e3a03000	 mov         r3, #0
  00494	e5823000	 str         r3, [r2]
  00498		 |$LN4@DeInit|

; 167  :     }
; 168  : 
; 169  :     if (m_hEP0CheckForDoneTransfersEvent)

  00498	e59d3014	 ldr         r3, [sp, #0x14]
  0049c	e28330bc	 add         r3, r3, #0xBC
  004a0	e5933000	 ldr         r3, [r3]
  004a4	e3530000	 cmp         r3, #0
  004a8	0a00000b	 beq         |$LN1@DeInit|

; 170  :     {
; 171  :         CloseHandle(m_hEP0CheckForDoneTransfersEvent);

  004ac	e59d3014	 ldr         r3, [sp, #0x14]
  004b0	e28330bc	 add         r3, r3, #0xBC
  004b4	e5930000	 ldr         r0, [r3]
  004b8	eb000000	 bl          CloseHandle

; 172  :         m_hEP0CheckForDoneTransfersEvent = NULL;            

  004bc	e59d3014	 ldr         r3, [sp, #0x14]
  004c0	e28320bc	 add         r2, r3, #0xBC
  004c4	e3a03000	 mov         r3, #0
  004c8	e5823000	 str         r3, [r2]

; 173  :         m_PipeListInfoEP0CheckForDoneTransfersCount = NULL;

  004cc	e59d3014	 ldr         r3, [sp, #0x14]
  004d0	e28320c0	 add         r2, r3, #0xC0
  004d4	e3a03000	 mov         r3, #0
  004d8	e5823000	 str         r3, [r2]
  004dc		 |$LN1@DeInit|

; 174  :     }        
; 175  : }

  004dc	e28dd00c	 add         sp, sp, #0xC
  004e0	e89d6000	 ldmia       sp, {sp, lr}
  004e4	e12fff1e	 bx          lr
  004e8		 |$LN12@DeInit|
  004e8		 |$LN13@DeInit|
  004e8	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  004ec		 |$LN14@DeInit|
  004ec	00000000	 DCD         |dpCurSettings|
  004f0		 |$LN15@DeInit|
  004f0	00000000	 DCD         |??_C@_1LG@MDHHEHIE@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  004f4		 |$M44417|

			 ENDP  ; |?DeInit@CBusyPipeList@@QAAXXZ|, CBusyPipeList::DeInit

	IMPORT	|EventModify|
; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T44429| DCD	|$LN5@SetEvent|
	DCD	0x40000e04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SetEvent| PROC

; 235  : _inline BOOL SetEvent(HANDLE h) {

  00000		 |$LN5@SetEvent|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd008	 sub         sp, sp, #8
  00010		 |$M44426|

; 236  : 	return EventModify(h,EVENT_SET);

  00010	e3a01003	 mov         r1, #3
  00014	e59d0010	 ldr         r0, [sp, #0x10]
  00018	eb000000	 bl          EventModify
  0001c	e58d0004	 str         r0, [sp, #4]
  00020	e59d3004	 ldr         r3, [sp, #4]
  00024	e58d3000	 str         r3, [sp]

; 237  : }

  00028	e59d0000	 ldr         r0, [sp]
  0002c	e28dd008	 add         sp, sp, #8
  00030	e89d6000	 ldmia       sp, {sp, lr}
  00034	e12fff1e	 bx          lr
  00038		 |$M44427|

			 ENDP  ; |SetEvent|

	EXPORT	|??_C@_1GK@NPNBIHGK@?$AAC?$AAB?$AAu?$AAs?$AAy?$AAP?$AAi?$AAp?$AAe?$AAL?$AAi?$AAs?$AAt?$AA?3?$AA?3?$AAS?$AAi?$AAg?$AAn?$AAa?$AAl?$AAC?$AAh?$AAe?$AAc?$AAk?$AAF?$AAo?$AAr?$AAD?$AAo?$AAn@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DK@PFCAADOE@?$AAR?$AAe?$AAl?$AAe?$AAa?$AAs?$AAe?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAc?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|?SignalCheckForDoneDMA@CBusyPipeList@@QAAHE@Z| ; CBusyPipeList::SignalCheckForDoneDMA

  00018			 AREA	 |.pdata|, PDATA
|$T44443| DCD	|$LN12@SignalChec|
	DCD	0x40005904
; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\musb\musbhcd\musbmhdrc\chw.cpp

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GK@NPNBIHGK@?$AAC?$AAB?$AAu?$AAs?$AAy?$AAP?$AAi?$AAp?$AAe?$AAL?$AAi?$AAs?$AAt?$AA?3?$AA?3?$AAS?$AAi?$AAg?$AAn?$AAa?$AAl?$AAC?$AAh?$AAe?$AAc?$AAk?$AAF?$AAo?$AAr?$AAD?$AAo?$AAn@| DCB "C"
	DCB	0x0, "B", 0x0, "u", 0x0, "s", 0x0, "y", 0x0, "P", 0x0, "i"
	DCB	0x0, "p", 0x0, "e", 0x0, "L", 0x0, "i", 0x0, "s", 0x0, "t"
	DCB	0x0, ":", 0x0, ":", 0x0, "S", 0x0, "i", 0x0, "g", 0x0, "n"
	DCB	0x0, "a", 0x0, "l", 0x0, "C", 0x0, "h", 0x0, "e", 0x0, "c"
	DCB	0x0, "k", 0x0, "F", 0x0, "o", 0x0, "r", 0x0, "D", 0x0, "o"
	DCB	0x0, "n", 0x0, "e", 0x0, "D", 0x0, "M", 0x0, "A", 0x0, " "
	DCB	0x0, "a", 0x0, "t", 0x0, " ", 0x0, "c", 0x0, "h", 0x0, "a"
	DCB	0x0, "n", 0x0, "n", 0x0, "e", 0x0, "l", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DK@PFCAADOE@?$AAR?$AAe?$AAl?$AAe?$AAa?$AAs?$AAe?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAc?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "R"
	DCB	0x0, "e", 0x0, "l", 0x0, "e", 0x0, "a", 0x0, "s", 0x0, "e"
	DCB	0x0, " ", 0x0, "D", 0x0, "M", 0x0, "A", 0x0, " ", 0x0, "f"
	DCB	0x0, "o", 0x0, "r", 0x0, " ", 0x0, "c", 0x0, "h", 0x0, "a"
	DCB	0x0, "n", 0x0, "n", 0x0, "e", 0x0, "l", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  004f4			 AREA	 |.text|, CODE, ARM

  004f4		 |?SignalCheckForDoneDMA@CBusyPipeList@@QAAHE@Z| PROC ; CBusyPipeList::SignalCheckForDoneDMA

; 193  : {    

  004f4		 |$LN12@SignalChec|
  004f4	e1a0c00d	 mov         r12, sp
  004f8	e92d0003	 stmdb       sp!, {r0, r1}
  004fc	e92d5000	 stmdb       sp!, {r12, lr}
  00500	e24dd010	 sub         sp, sp, #0x10
  00504		 |$M44440|

; 194  :     if (m_hDMA2Handles[channel])

  00504	e59d3018	 ldr         r3, [sp, #0x18]
  00508	e2831094	 add         r1, r3, #0x94
  0050c	e5dd301c	 ldrb        r3, [sp, #0x1C]
  00510	e1a02003	 mov         r2, r3
  00514	e3a03004	 mov         r3, #4
  00518	e0030392	 mul         r3, r2, r3
  0051c	e0813003	 add         r3, r1, r3
  00520	e5933000	 ldr         r3, [r3]
  00524	e3530000	 cmp         r3, #0
  00528	0a00003f	 beq         |$LN1@SignalChec|

; 195  :     {        
; 196  :         DEBUGMSG(ZONE_PIPE, (TEXT("Release DMA for channel %d\r\n"), channel));

  0052c	e59f3114	 ldr         r3, [pc, #0x114]
  00530	e5933440	 ldr         r3, [r3, #0x440]
  00534	e3130080	 tst         r3, #0x80
  00538	0a000006	 beq         |$LN4@SignalChec|
  0053c	e5dd301c	 ldrb        r3, [sp, #0x1C]
  00540	e1a01003	 mov         r1, r3
  00544	e59f0108	 ldr         r0, [pc, #0x108]
  00548	eb000000	 bl          NKDbgPrintfW
  0054c	e3a03001	 mov         r3, #1
  00550	e58d3004	 str         r3, [sp, #4]
  00554	ea000001	 b           |$LN5@SignalChec|
  00558		 |$LN4@SignalChec|
  00558	e3a03000	 mov         r3, #0
  0055c	e58d3004	 str         r3, [sp, #4]
  00560		 |$LN5@SignalChec|

; 197  :         DEBUGCHK( m_hDMA2Handles[channel] && m_hCheckForDoneTransfersThread );

  00560	e59d3018	 ldr         r3, [sp, #0x18]
  00564	e2831094	 add         r1, r3, #0x94
  00568	e5dd301c	 ldrb        r3, [sp, #0x1C]
  0056c	e1a02003	 mov         r2, r3
  00570	e3a03004	 mov         r3, #4
  00574	e0030392	 mul         r3, r2, r3
  00578	e0813003	 add         r3, r1, r3
  0057c	e5933000	 ldr         r3, [r3]
  00580	e3530000	 cmp         r3, #0
  00584	0a000007	 beq         |$LN6@SignalChec|
  00588	e59d3018	 ldr         r3, [sp, #0x18]
  0058c	e28330c8	 add         r3, r3, #0xC8
  00590	e5933000	 ldr         r3, [r3]
  00594	e3530000	 cmp         r3, #0
  00598	0a000002	 beq         |$LN6@SignalChec|
  0059c	e3a03001	 mov         r3, #1
  005a0	e58d3008	 str         r3, [sp, #8]
  005a4	ea000007	 b           |$LN7@SignalChec|
  005a8		 |$LN6@SignalChec|
  005a8	e3a030c5	 mov         r3, #0xC5
  005ac	e59f209c	 ldr         r2, [pc, #0x9C]
  005b0	e59f1090	 ldr         r1, [pc, #0x90]
  005b4	e59f0090	 ldr         r0, [pc, #0x90]
  005b8	eb000000	 bl          NKDbgPrintfW
  005bc	e6000010	 __debugbreak_ce
  005c0	e3a03000	 mov         r3, #0
  005c4	e58d3008	 str         r3, [sp, #8]
  005c8		 |$LN7@SignalChec|

; 198  :         DEBUGMSG(ZONE_PIPE, (TEXT("CBusyPipeList::SignalCheckForDoneDMA at channel %d\r\n"), channel));

  005c8	e59f3078	 ldr         r3, [pc, #0x78]
  005cc	e5933440	 ldr         r3, [r3, #0x440]
  005d0	e3130080	 tst         r3, #0x80
  005d4	0a000006	 beq         |$LN8@SignalChec|
  005d8	e5dd301c	 ldrb        r3, [sp, #0x1C]
  005dc	e1a01003	 mov         r1, r3
  005e0	e59f005c	 ldr         r0, [pc, #0x5C]
  005e4	eb000000	 bl          NKDbgPrintfW
  005e8	e3a03001	 mov         r3, #1
  005ec	e58d300c	 str         r3, [sp, #0xC]
  005f0	ea000001	 b           |$LN9@SignalChec|
  005f4		 |$LN8@SignalChec|
  005f4	e3a03000	 mov         r3, #0
  005f8	e58d300c	 str         r3, [sp, #0xC]
  005fc		 |$LN9@SignalChec|

; 199  :         SetEvent( m_hDMA2Handles[channel]);

  005fc	e59d3018	 ldr         r3, [sp, #0x18]
  00600	e2831094	 add         r1, r3, #0x94
  00604	e5dd301c	 ldrb        r3, [sp, #0x1C]
  00608	e1a02003	 mov         r2, r3
  0060c	e3a03004	 mov         r3, #4
  00610	e0030392	 mul         r3, r2, r3
  00614	e0813003	 add         r3, r1, r3
  00618	e5930000	 ldr         r0, [r3]
  0061c	eb000000	 bl          SetEvent

; 200  :         return TRUE;

  00620	e3a03001	 mov         r3, #1
  00624	e58d3000	 str         r3, [sp]
  00628	ea000001	 b           |$LN2@SignalChec|
  0062c		 |$LN1@SignalChec|

; 201  :     }
; 202  :     return FALSE;

  0062c	e3a03000	 mov         r3, #0
  00630	e58d3000	 str         r3, [sp]
  00634		 |$LN2@SignalChec|

; 203  : }

  00634	e59d0000	 ldr         r0, [sp]
  00638	e28dd010	 add         sp, sp, #0x10
  0063c	e89d6000	 ldmia       sp, {sp, lr}
  00640	e12fff1e	 bx          lr
  00644		 |$LN13@SignalChec|
  00644		 |$LN14@SignalChec|
  00644	00000000	 DCD         |??_C@_1GK@NPNBIHGK@?$AAC?$AAB?$AAu?$AAs?$AAy?$AAP?$AAi?$AAp?$AAe?$AAL?$AAi?$AAs?$AAt?$AA?3?$AA?3?$AAS?$AAi?$AAg?$AAn?$AAa?$AAl?$AAC?$AAh?$AAe?$AAc?$AAk?$AAF?$AAo?$AAr?$AAD?$AAo?$AAn@|
  00648		 |$LN15@SignalChec|
  00648	00000000	 DCD         |dpCurSettings|
  0064c		 |$LN16@SignalChec|
  0064c	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  00650		 |$LN17@SignalChec|
  00650	00000000	 DCD         |??_C@_1LG@MDHHEHIE@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  00654		 |$LN18@SignalChec|
  00654	00000000	 DCD         |??_C@_1DK@PFCAADOE@?$AAR?$AAe?$AAl?$AAe?$AAa?$AAs?$AAe?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAc?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  00658		 |$M44441|

			 ENDP  ; |?SignalCheckForDoneDMA@CBusyPipeList@@QAAHE@Z|, CBusyPipeList::SignalCheckForDoneDMA

	EXPORT	|??_C@_1HI@LLHIFNHB@?$AAC?$AAB?$AAu?$AAs?$AAy?$AAP?$AAi?$AAp?$AAe?$AAL?$AAi?$AAs?$AAt?$AA?3?$AA?3?$AAS?$AAi?$AAg?$AAn?$AAa?$AAl?$AAC?$AAh?$AAe?$AAc?$AAk?$AAF?$AAo?$AAr?$AAD?$AAo?$AAn@| [ DATA ] ; `string'
	EXPORT	|?SignalCheckForDoneTransfers@CBusyPipeList@@QAAXEE@Z| ; CBusyPipeList::SignalCheckForDoneTransfers

  00020			 AREA	 |.pdata|, PDATA
|$T44456| DCD	|$LN8@SignalChec@2|
	DCD	0x40003504

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HI@LLHIFNHB@?$AAC?$AAB?$AAu?$AAs?$AAy?$AAP?$AAi?$AAp?$AAe?$AAL?$AAi?$AAs?$AAt?$AA?3?$AA?3?$AAS?$AAi?$AAg?$AAn?$AAa?$AAl?$AAC?$AAh?$AAe?$AAc?$AAk?$AAF?$AAo?$AAr?$AAD?$AAo?$AAn@| DCB "C"
	DCB	0x0, "B", 0x0, "u", 0x0, "s", 0x0, "y", 0x0, "P", 0x0, "i"
	DCB	0x0, "p", 0x0, "e", 0x0, "L", 0x0, "i", 0x0, "s", 0x0, "t"
	DCB	0x0, ":", 0x0, ":", 0x0, "S", 0x0, "i", 0x0, "g", 0x0, "n"
	DCB	0x0, "a", 0x0, "l", 0x0, "C", 0x0, "h", 0x0, "e", 0x0, "c"
	DCB	0x0, "k", 0x0, "F", 0x0, "o", 0x0, "r", 0x0, "D", 0x0, "o"
	DCB	0x0, "n", 0x0, "e", 0x0, "T", 0x0, "r", 0x0, "a", 0x0, "n"
	DCB	0x0, "s", 0x0, "f", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, "a"
	DCB	0x0, "t", 0x0, " ", 0x0, "e", 0x0, "p", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, " ", 0x0, "O", 0x0, "U", 0x0, "T", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  00658			 AREA	 |.text|, CODE, ARM

  00658		 |?SignalCheckForDoneTransfers@CBusyPipeList@@QAAXEE@Z| PROC ; CBusyPipeList::SignalCheckForDoneTransfers

; 223  : {    

  00658		 |$LN8@SignalChec@2|
  00658	e1a0c00d	 mov         r12, sp
  0065c	e92d0007	 stmdb       sp!, {r0 - r2}
  00660	e92d5000	 stmdb       sp!, {r12, lr}
  00664	e24dd004	 sub         sp, sp, #4
  00668		 |$M44453|

; 224  :     if (m_hEP2Handles[USB_ENDPOINT(endpoint)][ucIsOut])

  00668	e59d300c	 ldr         r3, [sp, #0xC]
  0066c	e2831014	 add         r1, r3, #0x14
  00670	e5dd3010	 ldrb        r3, [sp, #0x10]
  00674	e203200f	 and         r2, r3, #0xF
  00678	e3a03008	 mov         r3, #8
  0067c	e0030392	 mul         r3, r2, r3
  00680	e0811003	 add         r1, r1, r3
  00684	e5dd3014	 ldrb        r3, [sp, #0x14]
  00688	e1a02003	 mov         r2, r3
  0068c	e3a03004	 mov         r3, #4
  00690	e0030392	 mul         r3, r2, r3
  00694	e0813003	 add         r3, r1, r3
  00698	e5933000	 ldr         r3, [r3]
  0069c	e3530000	 cmp         r3, #0
  006a0	0a00001c	 beq         |$LN1@SignalChec@2|

; 225  :     {       
; 226  :         DEBUGMSG(ZONE_PIPE, (TEXT("CBusyPipeList::SignalCheckForDoneTransfer at ep %d OUT %d\r\n"), endpoint, ucIsOut));

  006a4	e59f307c	 ldr         r3, [pc, #0x7C]
  006a8	e5933440	 ldr         r3, [r3, #0x440]
  006ac	e3130080	 tst         r3, #0x80
  006b0	0a000008	 beq         |$LN4@SignalChec@2|
  006b4	e5dd3014	 ldrb        r3, [sp, #0x14]
  006b8	e1a02003	 mov         r2, r3
  006bc	e5dd3010	 ldrb        r3, [sp, #0x10]
  006c0	e1a01003	 mov         r1, r3
  006c4	e59f0058	 ldr         r0, [pc, #0x58]
  006c8	eb000000	 bl          NKDbgPrintfW
  006cc	e3a03001	 mov         r3, #1
  006d0	e58d3000	 str         r3, [sp]
  006d4	ea000001	 b           |$LN5@SignalChec@2|
  006d8		 |$LN4@SignalChec@2|
  006d8	e3a03000	 mov         r3, #0
  006dc	e58d3000	 str         r3, [sp]
  006e0		 |$LN5@SignalChec@2|

; 227  :         SetEvent( m_hEP2Handles[USB_ENDPOINT(endpoint)][ucIsOut]);

  006e0	e59d300c	 ldr         r3, [sp, #0xC]
  006e4	e2831014	 add         r1, r3, #0x14
  006e8	e5dd3010	 ldrb        r3, [sp, #0x10]
  006ec	e203200f	 and         r2, r3, #0xF
  006f0	e3a03008	 mov         r3, #8
  006f4	e0030392	 mul         r3, r2, r3
  006f8	e0811003	 add         r1, r1, r3
  006fc	e5dd3014	 ldrb        r3, [sp, #0x14]
  00700	e1a02003	 mov         r2, r3
  00704	e3a03004	 mov         r3, #4
  00708	e0030392	 mul         r3, r2, r3
  0070c	e0813003	 add         r3, r1, r3
  00710	e5930000	 ldr         r0, [r3]
  00714	eb000000	 bl          SetEvent
  00718		 |$LN1@SignalChec@2|

; 228  :     }
; 229  : }

  00718	e28dd004	 add         sp, sp, #4
  0071c	e89d6000	 ldmia       sp, {sp, lr}
  00720	e12fff1e	 bx          lr
  00724		 |$LN9@SignalChec@2|
  00724		 |$LN10@SignalChec@2|
  00724	00000000	 DCD         |??_C@_1HI@LLHIFNHB@?$AAC?$AAB?$AAu?$AAs?$AAy?$AAP?$AAi?$AAp?$AAe?$AAL?$AAi?$AAs?$AAt?$AA?3?$AA?3?$AAS?$AAi?$AAg?$AAn?$AAa?$AAl?$AAC?$AAh?$AAe?$AAc?$AAk?$AAF?$AAo?$AAr?$AAD?$AAo?$AAn@|
  00728		 |$LN11@SignalChec@2|
  00728	00000000	 DCD         |dpCurSettings|
  0072c		 |$M44454|

			 ENDP  ; |?SignalCheckForDoneTransfers@CBusyPipeList@@QAAXEE@Z|, CBusyPipeList::SignalCheckForDoneTransfers

	EXPORT	|?CheckForDoneTransfersThread@CBusyPipeList@@AAAKXZ| ; CBusyPipeList::CheckForDoneTransfersThread

  00028			 AREA	 |.pdata|, PDATA
|$T44465| DCD	|$LN5@CheckForDo@2|
	DCD	0x40000d04
; Function compile flags: /Odtp

  0072c			 AREA	 |.text|, CODE, ARM

  0072c		 |?CheckForDoneTransfersThreadStub@CBusyPipeList@@CAKPAX@Z| PROC ; CBusyPipeList::CheckForDoneTransfersThreadStub

; 232  : {

  0072c		 |$LN5@CheckForDo@2|
  0072c	e1a0c00d	 mov         r12, sp
  00730	e92d0001	 stmdb       sp!, {r0}
  00734	e92d5000	 stmdb       sp!, {r12, lr}
  00738	e24dd008	 sub         sp, sp, #8
  0073c		 |$M44462|

; 233  :     return ((CBusyPipeList *)pContext)->CheckForDoneTransfersThread( );

  0073c	e59d0010	 ldr         r0, [sp, #0x10]
  00740	eb000000	 bl          |?CheckForDoneTransfersThread@CBusyPipeList@@AAAKXZ|
  00744	e58d0004	 str         r0, [sp, #4]
  00748	e59d3004	 ldr         r3, [sp, #4]
  0074c	e58d3000	 str         r3, [sp]

; 234  : }

  00750	e59d0000	 ldr         r0, [sp]
  00754	e28dd008	 add         sp, sp, #8
  00758	e89d6000	 ldmia       sp, {sp, lr}
  0075c	e12fff1e	 bx          lr
  00760		 |$M44463|

			 ENDP  ; |?CheckForDoneTransfersThreadStub@CBusyPipeList@@CAKPAX@Z|, CBusyPipeList::CheckForDoneTransfersThreadStub

	EXPORT	|??_C@_1EK@LNDAMOBI@?$AA?9?$AAC?$AAP?$AAi?$AAp?$AAe?$AA?3?$AA?3?$AAC?$AAh?$AAe?$AAc?$AAk?$AAF?$AAo?$AAr?$AAD?$AAo?$AAn?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AAs?$AAT?$AAh?$AAr@| [ DATA ] ; `string'
	EXPORT	|?Unlock@LockObject@@QAAXXZ|		; LockObject::Unlock
	EXPORT	|??_C@_1EO@LLHJNIHP@?$AAC?$AAB?$AAu?$AAs?$AAy?$AAP?$AAi?$AAp?$AAe?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?$DN?$AA?$DO?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAE?$AAP?$AA?5?$AA?$CF?$AAd?$AA?5?$AAd?$AAi@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FE@EILBAGEJ@?$AAW?$AAr?$AAo?$AAn?$AAg?$AA?$CB?$AA?$CB?$AA?5?$AAE?$AAP?$AA0?$AA?5?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAh?$AAa?$AAv?$AAe?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAi?$AAn?$AAt?$AAe@| [ DATA ] ; `string'
	EXPORT	|?Lock@LockObject@@QAAXXZ|		; LockObject::Lock
	EXPORT	|??_C@_1HG@BKBLMCFH@?$AAC?$AAB?$AAu?$AAs?$AAy?$AAP?$AAi?$AAp?$AAe?$AAL?$AAi?$AAs?$AAt?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAs?$AAi?$AAg?$AAn?$AAa?$AAl?$AA?5?$AAe?$AAv?$AAt?$AA?5?$AA?$CF?$AAd?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FC@BHIGJHFM@?$AAC?$AAB?$AAu?$AAs?$AAy?$AAP?$AAi?$AAp?$AAe?$AAL?$AA?5?$AAi?$AAs?$AAt?$AA?3?$AA?3?$AAT?$AAo?$AAt?$AAa?$AAl?$AA?5?$AAn?$AAo?$AA?5?$AAo?$AAf?$AA?5?$AAe?$AAv?$AAe?$AAn@| [ DATA ] ; `string'
	EXPORT	|?GetDMATransferEvent@CPipe@@QAAPAXXZ|	; CPipe::GetDMATransferEvent
	EXPORT	|??_C@_1FC@LEJEANKP@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$CB?$AA?$CB?$AA?$CB?$AA?5?$AAN?$AAo?$AA?5?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AA?5?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAE@| [ DATA ] ; `string'
	EXPORT	|?GetEPTransferEvent@CPipe@@QAAPAXXZ|	; CPipe::GetEPTransferEvent
	EXPORT	|??_C@_1EK@INBPCFHL@?$AAW?$AAa?$AAr?$AAn?$AAi?$AAn?$AAg?$AA?$CB?$AA?$CB?$AA?$CB?$AA?5?$AAE?$AAn?$AAd?$AAP?$AAo?$AAi?$AAn?$AAt?$AA?5?$AA0?$AA?5?$AA?$DN?$AA?$DO?$AA?5?$AAn?$AAo?$AA?5?$AAh?$AAa?$AAn?$AAd@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CM@NIMGLIGF@?$AAE?$AAP?$AA?5?$AA0?$AA?5?$AAh?$AAa?$AAs?$AA?5?$AAb?$AAe?$AAe?$AAn?$AA?5?$AAs?$AAe?$AAt?$AAu?$AAp?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|?GetEndptDescriptor@CPipe@@QAA?AU_USB_ENDPOINT_DESCRIPTOR@@XZ| ; CPipe::GetEndptDescriptor
	EXPORT	|??_C@_1HA@CCFMMEKO@?$AAW?$AAa?$AAi?$AAt?$AAF?$AAo?$AAr?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?5?$AAi?$AAn?$AA?5?$AAB?$AAu?$AAs?$AAy?$AAP?$AAi@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EK@IDADIDAB@?$AA?$CL?$AAC?$AAP?$AAi?$AAp?$AAe?$AA?3?$AA?3?$AAC?$AAh?$AAe?$AAc?$AAk?$AAF?$AAo?$AAr?$AAD?$AAo?$AAn?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AAs?$AAT?$AAh?$AAr@| [ DATA ] ; `string'
	IMPORT	|GetLastError|
	IMPORT	|WaitForMultipleObjects|

  00030			 AREA	 |.pdata|, PDATA
|$T44501| DCD	|$LN62@CheckForDo@3|
	DCD	0x40026e04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EK@LNDAMOBI@?$AA?9?$AAC?$AAP?$AAi?$AAp?$AAe?$AA?3?$AA?3?$AAC?$AAh?$AAe?$AAc?$AAk?$AAF?$AAo?$AAr?$AAD?$AAo?$AAn?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AAs?$AAT?$AAh?$AAr@| DCB "-"
	DCB	0x0, "C", 0x0, "P", 0x0, "i", 0x0, "p", 0x0, "e", 0x0, ":"
	DCB	0x0, ":", 0x0, "C", 0x0, "h", 0x0, "e", 0x0, "c", 0x0, "k"
	DCB	0x0, "F", 0x0, "o", 0x0, "r", 0x0, "D", 0x0, "o", 0x0, "n"
	DCB	0x0, "e", 0x0, "T", 0x0, "r", 0x0, "a", 0x0, "n", 0x0, "s"
	DCB	0x0, "f", 0x0, "e", 0x0, "r", 0x0, "s", 0x0, "T", 0x0, "h"
	DCB	0x0, "r", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EO@LLHJNIHP@?$AAC?$AAB?$AAu?$AAs?$AAy?$AAP?$AAi?$AAp?$AAe?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?$DN?$AA?$DO?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAE?$AAP?$AA?5?$AA?$CF?$AAd?$AA?5?$AAd?$AAi@| DCB "C"
	DCB	0x0, "B", 0x0, "u", 0x0, "s", 0x0, "y", 0x0, "P", 0x0, "i"
	DCB	0x0, "p", 0x0, "e", 0x0, "T", 0x0, "h", 0x0, "r", 0x0, "e"
	DCB	0x0, "a", 0x0, "d", 0x0, "=", 0x0, ">", 0x0, "P", 0x0, "r"
	DCB	0x0, "o", 0x0, "c", 0x0, "e", 0x0, "s", 0x0, "s", 0x0, "E"
	DCB	0x0, "P", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, "d"
	DCB	0x0, "i", 0x0, "r", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FE@EILBAGEJ@?$AAW?$AAr?$AAo?$AAn?$AAg?$AA?$CB?$AA?$CB?$AA?5?$AAE?$AAP?$AA0?$AA?5?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAh?$AAa?$AAv?$AAe?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAi?$AAn?$AAt?$AAe@| DCB "W"
	DCB	0x0, "r", 0x0, "o", 0x0, "n", 0x0, "g", 0x0, "!", 0x0, "!"
	DCB	0x0, " ", 0x0, "E", 0x0, "P", 0x0, "0", 0x0, " ", 0x0, "c"
	DCB	0x0, "a", 0x0, "n", 0x0, "n", 0x0, "o", 0x0, "t", 0x0, " "
	DCB	0x0, "h", 0x0, "a", 0x0, "v", 0x0, "e", 0x0, " ", 0x0, "D"
	DCB	0x0, "M", 0x0, "A", 0x0, " ", 0x0, "i", 0x0, "n", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t"
	DCB	0x0, "!", 0x0, "!", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HG@BKBLMCFH@?$AAC?$AAB?$AAu?$AAs?$AAy?$AAP?$AAi?$AAp?$AAe?$AAL?$AAi?$AAs?$AAt?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAs?$AAi?$AAg?$AAn?$AAa?$AAl?$AA?5?$AAe?$AAv?$AAt?$AA?5?$AA?$CF?$AAd?$AA?5@| DCB "C"
	DCB	0x0, "B", 0x0, "u", 0x0, "s", 0x0, "y", 0x0, "P", 0x0, "i"
	DCB	0x0, "p", 0x0, "e", 0x0, "L", 0x0, "i", 0x0, "s", 0x0, "t"
	DCB	0x0, " ", 0x0, "g", 0x0, "e", 0x0, "t", 0x0, " ", 0x0, "s"
	DCB	0x0, "i", 0x0, "g", 0x0, "n", 0x0, "a", 0x0, "l", 0x0, " "
	DCB	0x0, "e", 0x0, "v", 0x0, "t", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, " ", 0x0, "E", 0x0, "P", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "x", 0x0, " ", 0x0, "s", 0x0, "i", 0x0, "g"
	DCB	0x0, "n", 0x0, "a", 0x0, "l", 0x0, ",", 0x0, " ", 0x0, "D"
	DCB	0x0, "M", 0x0, "A", 0x0, " ", 0x0, "(", 0x0, "%", 0x0, "d"
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FC@BHIGJHFM@?$AAC?$AAB?$AAu?$AAs?$AAy?$AAP?$AAi?$AAp?$AAe?$AAL?$AA?5?$AAi?$AAs?$AAt?$AA?3?$AA?3?$AAT?$AAo?$AAt?$AAa?$AAl?$AA?5?$AAn?$AAo?$AA?5?$AAo?$AAf?$AA?5?$AAe?$AAv?$AAe?$AAn@| DCB "C"
	DCB	0x0, "B", 0x0, "u", 0x0, "s", 0x0, "y", 0x0, "P", 0x0, "i"
	DCB	0x0, "p", 0x0, "e", 0x0, "L", 0x0, " ", 0x0, "i", 0x0, "s"
	DCB	0x0, "t", 0x0, ":", 0x0, ":", 0x0, "T", 0x0, "o", 0x0, "t"
	DCB	0x0, "a", 0x0, "l", 0x0, " ", 0x0, "n", 0x0, "o", 0x0, " "
	DCB	0x0, "o", 0x0, "f", 0x0, " ", 0x0, "e", 0x0, "v", 0x0, "e"
	DCB	0x0, "n", 0x0, "t", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FC@LEJEANKP@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$CB?$AA?$CB?$AA?$CB?$AA?5?$AAN?$AAo?$AA?5?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AA?5?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAE@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, "!", 0x0, "!"
	DCB	0x0, "!", 0x0, " ", 0x0, "N", 0x0, "o", 0x0, " ", 0x0, "T"
	DCB	0x0, "r", 0x0, "a", 0x0, "n", 0x0, "s", 0x0, "f", 0x0, "e"
	DCB	0x0, "r", 0x0, " ", 0x0, "E", 0x0, "v", 0x0, "e", 0x0, "n"
	DCB	0x0, "t", 0x0, " ", 0x0, "f", 0x0, "o", 0x0, "r", 0x0, " "
	DCB	0x0, "E", 0x0, "P", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EK@INBPCFHL@?$AAW?$AAa?$AAr?$AAn?$AAi?$AAn?$AAg?$AA?$CB?$AA?$CB?$AA?$CB?$AA?5?$AAE?$AAn?$AAd?$AAP?$AAo?$AAi?$AAn?$AAt?$AA?5?$AA0?$AA?5?$AA?$DN?$AA?$DO?$AA?5?$AAn?$AAo?$AA?5?$AAh?$AAa?$AAn?$AAd@| DCB "W"
	DCB	0x0, "a", 0x0, "r", 0x0, "n", 0x0, "i", 0x0, "n", 0x0, "g"
	DCB	0x0, "!", 0x0, "!", 0x0, "!", 0x0, " ", 0x0, "E", 0x0, "n"
	DCB	0x0, "d", 0x0, "P", 0x0, "o", 0x0, "i", 0x0, "n", 0x0, "t"
	DCB	0x0, " ", 0x0, "0", 0x0, " ", 0x0, "=", 0x0, ">", 0x0, " "
	DCB	0x0, "n", 0x0, "o", 0x0, " ", 0x0, "h", 0x0, "a", 0x0, "n"
	DCB	0x0, "d", 0x0, "l", 0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@NIMGLIGF@?$AAE?$AAP?$AA?5?$AA0?$AA?5?$AAh?$AAa?$AAs?$AA?5?$AAb?$AAe?$AAe?$AAn?$AA?5?$AAs?$AAe?$AAt?$AAu?$AAp?$AA?$AN?$AA?6?$AA?$AA@| DCB "E"
	DCB	0x0, "P", 0x0, " ", 0x0, "0", 0x0, " ", 0x0, "h", 0x0, "a"
	DCB	0x0, "s", 0x0, " ", 0x0, "b", 0x0, "e", 0x0, "e", 0x0, "n"
	DCB	0x0, " ", 0x0, "s", 0x0, "e", 0x0, "t", 0x0, "u", 0x0, "p"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HA@CCFMMEKO@?$AAW?$AAa?$AAi?$AAt?$AAF?$AAo?$AAr?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?5?$AAi?$AAn?$AA?5?$AAB?$AAu?$AAs?$AAy?$AAP?$AAi@| DCB "W"
	DCB	0x0, "a", 0x0, "i", 0x0, "t", 0x0, "F", 0x0, "o", 0x0, "r"
	DCB	0x0, "M", 0x0, "u", 0x0, "l", 0x0, "t", 0x0, "i", 0x0, "p"
	DCB	0x0, "l", 0x0, "e", 0x0, "O", 0x0, "b", 0x0, "j", 0x0, "e"
	DCB	0x0, "c", 0x0, "t", 0x0, "s", 0x0, " ", 0x0, "i", 0x0, "n"
	DCB	0x0, " ", 0x0, "B", 0x0, "u", 0x0, "s", 0x0, "y", 0x0, "P"
	DCB	0x0, "i", 0x0, "p", 0x0, "e", 0x0, " ", 0x0, "f", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "w"
	DCB	0x0, "i", 0x0, "t", 0x0, "h", 0x0, " ", 0x0, "e", 0x0, "r"
	DCB	0x0, "r", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EK@IDADIDAB@?$AA?$CL?$AAC?$AAP?$AAi?$AAp?$AAe?$AA?3?$AA?3?$AAC?$AAh?$AAe?$AAc?$AAk?$AAF?$AAo?$AAr?$AAD?$AAo?$AAn?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AAs?$AAT?$AAh?$AAr@| DCB "+"
	DCB	0x0, "C", 0x0, "P", 0x0, "i", 0x0, "p", 0x0, "e", 0x0, ":"
	DCB	0x0, ":", 0x0, "C", 0x0, "h", 0x0, "e", 0x0, "c", 0x0, "k"
	DCB	0x0, "F", 0x0, "o", 0x0, "r", 0x0, "D", 0x0, "o", 0x0, "n"
	DCB	0x0, "e", 0x0, "T", 0x0, "r", 0x0, "a", 0x0, "n", 0x0, "s"
	DCB	0x0, "f", 0x0, "e", 0x0, "r", 0x0, "s", 0x0, "T", 0x0, "h"
	DCB	0x0, "r", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Odtp

  00760			 AREA	 |.text|, CODE, ARM

  00760		 |?CheckForDoneTransfersThread@CBusyPipeList@@AAAKXZ| PROC ; CBusyPipeList::CheckForDoneTransfersThread

; 249  : {

  00760		 |$LN62@CheckForDo@3|
  00760	e1a0c00d	 mov         r12, sp
  00764	e92d0001	 stmdb       sp!, {r0}
  00768	e92d5000	 stmdb       sp!, {r12, lr}
  0076c	e24ddfcf	 sub         sp, sp, #0xCF, 30
  00770		 |$M44498|

; 250  :     DWORD timeout = INFINITE;

  00770	e3e03000	 mvn         r3, #0
  00774	e58d3294	 str         r3, [sp, #0x294]

; 251  :     DWORD dwErr = 0;

  00778	e3a03000	 mov         r3, #0
  0077c	e58d328c	 str         r3, [sp, #0x28C]

; 252  :     EVENT_INFO EventInfoObj[HOST_MAX_EP+1+DMA_MAX_CHANNEL];
; 253  :     HANDLE hWaitHandle[HOST_MAX_EP+2+DMA_MAX_CHANNEL];
; 254  :     DWORD hCount;    
; 255  : 
; 256  :     DEBUGMSG( ZONE_TRANSFER && ZONE_VERBOSE, (TEXT("+CPipe::CheckForDoneTransfersThread\n")) );

  00780	e59f3968	 ldr         r3, [pc, #0x968]
  00784	e5933440	 ldr         r3, [r3, #0x440]
  00788	e3130c01	 tst         r3, #1, 24
  0078c	0a000008	 beq         |$LN31@CheckForDo@3|
  00790	e59f3958	 ldr         r3, [pc, #0x958]
  00794	e5933440	 ldr         r3, [r3, #0x440]
  00798	e3130a01	 tst         r3, #1, 20
  0079c	0a000004	 beq         |$LN31@CheckForDo@3|
  007a0	e59f096c	 ldr         r0, [pc, #0x96C]
  007a4	eb000000	 bl          NKDbgPrintfW
  007a8	e3a03001	 mov         r3, #1
  007ac	e58d32d4	 str         r3, [sp, #0x2D4]
  007b0	ea000001	 b           |$LN32@CheckForDo@3|
  007b4		 |$LN31@CheckForDo@3|
  007b4	e3a03000	 mov         r3, #0
  007b8	e58d32d4	 str         r3, [sp, #0x2D4]
  007bc		 |$LN32@CheckForDo@3|

; 257  :     
; 258  :     PPIPE_LIST_ELEMENT pCurrent = NULL;

  007bc	e3a03000	 mov         r3, #0
  007c0	e58d3290	 str         r3, [sp, #0x290]

; 259  :        
; 260  :     int i = 0;

  007c4	e3a03000	 mov         r3, #0
  007c8	e58d3284	 str         r3, [sp, #0x284]

; 261  :     for (i = 0; i < HOST_MAX_EP+1+DMA_MAX_CHANNEL; i++)

  007cc	e3a03000	 mov         r3, #0
  007d0	e58d3284	 str         r3, [sp, #0x284]
  007d4	ea000002	 b           |$LN28@CheckForDo@3|
  007d8		 |$LN27@CheckForDo@3|
  007d8	e59d3284	 ldr         r3, [sp, #0x284]
  007dc	e2833001	 add         r3, r3, #1
  007e0	e58d3284	 str         r3, [sp, #0x284]
  007e4		 |$LN28@CheckForDo@3|
  007e4	e59d3284	 ldr         r3, [sp, #0x284]
  007e8	e3530028	 cmp         r3, #0x28
  007ec	aa00001f	 bge         |$LN26@CheckForDo@3|

; 262  :     {
; 263  :         EventInfoObj[i].pPipe = NULL;

  007f0	e59d1284	 ldr         r1, [sp, #0x284]
  007f4	e3a0300c	 mov         r3, #0xC
  007f8	e0020391	 mul         r2, r1, r3
  007fc	e28d30a4	 add         r3, sp, #0xA4
  00800	e0833002	 add         r3, r3, r2
  00804	e2832004	 add         r2, r3, #4
  00808	e3a03000	 mov         r3, #0
  0080c	e5823000	 str         r3, [r2]

; 264  :         EventInfoObj[i].IsDMA = FALSE;

  00810	e59d1284	 ldr         r1, [sp, #0x284]
  00814	e3a0300c	 mov         r3, #0xC
  00818	e0020391	 mul         r2, r1, r3
  0081c	e28d30a4	 add         r3, sp, #0xA4
  00820	e0832002	 add         r2, r3, r2
  00824	e3a03000	 mov         r3, #0
  00828	e5823000	 str         r3, [r2]

; 265  :         EventInfoObj[i].ucReservedDeviceAddr = 0xff;

  0082c	e59d1284	 ldr         r1, [sp, #0x284]
  00830	e3a0300c	 mov         r3, #0xC
  00834	e0020391	 mul         r2, r1, r3
  00838	e28d30a4	 add         r3, sp, #0xA4
  0083c	e0833002	 add         r3, r3, r2
  00840	e2832008	 add         r2, r3, #8
  00844	e3a030ff	 mov         r3, #0xFF
  00848	e5c23000	 strb        r3, [r2]

; 266  :         EventInfoObj[i].ucDeviceEndPoint = 0xff;

  0084c	e59d1284	 ldr         r1, [sp, #0x284]
  00850	e3a0300c	 mov         r3, #0xC
  00854	e0020391	 mul         r2, r1, r3
  00858	e28d30a4	 add         r3, sp, #0xA4
  0085c	e0833002	 add         r3, r3, r2
  00860	e2832009	 add         r2, r3, #9
  00864	e3a030ff	 mov         r3, #0xFF
  00868	e5c23000	 strb        r3, [r2]

; 267  :     }    

  0086c	eaffffd9	 b           |$LN27@CheckForDo@3|
  00870		 |$LN26@CheckForDo@3|

; 268  :     
; 269  :     // First add the EP Update Event into the hWaitHandle first.
; 270  :     hWaitHandle[0] = m_hUpdateEPEvent;

  00870	e59d3344	 ldr         r3, [sp, #0x344]
  00874	e28330c4	 add         r3, r3, #0xC4
  00878	e5933000	 ldr         r3, [r3]
  0087c	e58d3000	 str         r3, [sp]

; 271  :     
; 272  :     hCount = 1;

  00880	e3a03001	 mov         r3, #1
  00884	e58d3288	 str         r3, [sp, #0x288]
  00888		 |$LN59@CheckForDo@3|
  00888		 |$LN25@CheckForDo@3|

; 273  : 
; 274  :     while ( !m_fCheckTransferThreadClosing ) {

  00888	e59d3344	 ldr         r3, [sp, #0x344]
  0088c	e28330b8	 add         r3, r3, #0xB8
  00890	e5933000	 ldr         r3, [r3]
  00894	e3530000	 cmp         r3, #0
  00898	1a0001fe	 bne         |$LN24@CheckForDo@3|

; 275  :         UCHAR signal_evt;
; 276  :         CPipe * pSignalPipe;
; 277  :         BOOL  signal_isDMA;        
; 278  :         UCHAR signal_ep;
; 279  : 
; 280  :         // Wait for any of the endpoint generate interrupt.        
; 281  :         dwErr = WaitForMultipleObjects(hCount, hWaitHandle, FALSE, timeout);        

  0089c	e59d3294	 ldr         r3, [sp, #0x294]
  008a0	e3a02000	 mov         r2, #0
  008a4	e28d1000	 add         r1, sp, #0
  008a8	e59d0288	 ldr         r0, [sp, #0x288]
  008ac	eb000000	 bl          WaitForMultipleObjects
  008b0	e58d02d8	 str         r0, [sp, #0x2D8]
  008b4	e59d32d8	 ldr         r3, [sp, #0x2D8]
  008b8	e58d328c	 str         r3, [sp, #0x28C]

; 282  : 
; 283  :         // Receive either timeout or event signal
; 284  :         if (( m_fCheckTransferThreadClosing ) || (dwErr == WAIT_FAILED))

  008bc	e59d3344	 ldr         r3, [sp, #0x344]
  008c0	e28330b8	 add         r3, r3, #0xB8
  008c4	e5933000	 ldr         r3, [r3]
  008c8	e3530000	 cmp         r3, #0
  008cc	1a000002	 bne         |$LN22@CheckForDo@3|
  008d0	e59d328c	 ldr         r3, [sp, #0x28C]
  008d4	e3730001	 cmn         r3, #1
  008d8	1a00000e	 bne         |$LN23@CheckForDo@3|
  008dc		 |$LN22@CheckForDo@3|

; 285  :         {
; 286  :             DEBUGMSG(ZONE_ERROR, (TEXT("WaitForMultipleObjects in BusyPipe failed with err %d\r\n"),
; 287  :                 GetLastError()));

  008dc	e59f380c	 ldr         r3, [pc, #0x80C]
  008e0	e5933440	 ldr         r3, [r3, #0x440]
  008e4	e3130901	 tst         r3, #1, 18
  008e8	0a000007	 beq         |$LN33@CheckForDo@3|
  008ec	eb000000	 bl          GetLastError
  008f0	e58d02dc	 str         r0, [sp, #0x2DC]
  008f4	e59d12dc	 ldr         r1, [sp, #0x2DC]
  008f8	e59f0810	 ldr         r0, [pc, #0x810]
  008fc	eb000000	 bl          NKDbgPrintfW
  00900	e3a03001	 mov         r3, #1
  00904	e58d32e0	 str         r3, [sp, #0x2E0]
  00908	ea000001	 b           |$LN34@CheckForDo@3|
  0090c		 |$LN33@CheckForDo@3|
  0090c	e3a03000	 mov         r3, #0
  00910	e58d32e0	 str         r3, [sp, #0x2E0]
  00914		 |$LN34@CheckForDo@3|

; 288  :             break;

  00914	ea0001df	 b           |$LN24@CheckForDo@3|
  00918		 |$LN23@CheckForDo@3|

; 289  :         }
; 290  : 
; 291  :         if (dwErr == WAIT_OBJECT_0)

  00918	e59d328c	 ldr         r3, [sp, #0x28C]
  0091c	e3530000	 cmp         r3, #0
  00920	1a000116	 bne         |$LN21@CheckForDo@3|

; 292  :         {                          
; 293  :             DWORD dwCurEPSetList = 0;

  00924	e3a03000	 mov         r3, #0
  00928	e58d32a8	 str         r3, [sp, #0x2A8]

; 294  :             pCurrent = m_pBusyPipeList;                        

  0092c	e59d3344	 ldr         r3, [sp, #0x344]
  00930	e28330cc	 add         r3, r3, #0xCC
  00934	e5933000	 ldr         r3, [r3]
  00938	e58d3290	 str         r3, [sp, #0x290]

; 295  :             hCount = 1;

  0093c	e3a03001	 mov         r3, #1
  00940	e58d3288	 str         r3, [sp, #0x288]
  00944		 |$LN20@CheckForDo@3|

; 296  :             while (pCurrent != NULL)

  00944	e59d3290	 ldr         r3, [sp, #0x290]
  00948	e3530000	 cmp         r3, #0
  0094c	0a0000fe	 beq         |$LN19@CheckForDo@3|

; 297  :             {
; 298  :                 USB_ENDPOINT_DESCRIPTOR endptDesc = pCurrent->pPipe->GetEndptDescriptor();            

  00950	e28d1e2b	 add         r1, sp, #0x2B, 28
  00954	e59d3290	 ldr         r3, [sp, #0x290]
  00958	e5930000	 ldr         r0, [r3]
  0095c	eb000000	 bl          |?GetEndptDescriptor@CPipe@@QAA?AU_USB_ENDPOINT_DESCRIPTOR@@XZ|

; 299  :                 UCHAR endpoint = USB_ENDPOINT(endptDesc.bEndpointAddress);

  00960	e5dd32b2	 ldrb        r3, [sp, #0x2B2]
  00964	e203300f	 and         r3, r3, #0xF
  00968	e20330ff	 and         r3, r3, #0xFF
  0096c	e5cd32ac	 strb        r3, [sp, #0x2AC]

; 300  :                 // Re-assign the handle onto the hWaitHandle
; 301  :                 // hWaitHandle[0] is always there, so, we don't need to 
; 302  :                 // worry about that.
; 303  :                 if (endpoint == 0)

  00970	e5dd32ac	 ldrb        r3, [sp, #0x2AC]
  00974	e3530000	 cmp         r3, #0
  00978	1a000066	 bne         |$LN18@CheckForDo@3|

; 304  :                 {                   
; 305  :                     DWORD EPSet = dwCurEPSetList & 1;                    

  0097c	e59d32a8	 ldr         r3, [sp, #0x2A8]
  00980	e2033001	 and         r3, r3, #1
  00984	e58d32b8	 str         r3, [sp, #0x2B8]

; 306  :                     if ((m_hEP0CheckForDoneTransfersEvent) && (EPSet == 0))

  00988	e59d3344	 ldr         r3, [sp, #0x344]
  0098c	e28330bc	 add         r3, r3, #0xBC
  00990	e5933000	 ldr         r3, [r3]
  00994	e3530000	 cmp         r3, #0
  00998	0a000047	 beq         |$LN17@CheckForDo@3|
  0099c	e59d32b8	 ldr         r3, [sp, #0x2B8]
  009a0	e3530000	 cmp         r3, #0
  009a4	1a000044	 bne         |$LN17@CheckForDo@3|

; 307  :                     {
; 308  :                         hWaitHandle[hCount] = m_hEP0CheckForDoneTransfersEvent;

  009a8	e59d3344	 ldr         r3, [sp, #0x344]
  009ac	e28300bc	 add         r0, r3, #0xBC
  009b0	e59d1288	 ldr         r1, [sp, #0x288]
  009b4	e3a03004	 mov         r3, #4
  009b8	e0020391	 mul         r2, r1, r3
  009bc	e28d3000	 add         r3, sp, #0
  009c0	e0832002	 add         r2, r3, r2
  009c4	e5903000	 ldr         r3, [r0]
  009c8	e5823000	 str         r3, [r2]

; 309  :                         EventInfoObj[hCount].pPipe = NULL;

  009cc	e59d1288	 ldr         r1, [sp, #0x288]
  009d0	e3a0300c	 mov         r3, #0xC
  009d4	e0020391	 mul         r2, r1, r3
  009d8	e28d30a4	 add         r3, sp, #0xA4
  009dc	e0833002	 add         r3, r3, r2
  009e0	e2832004	 add         r2, r3, #4
  009e4	e3a03000	 mov         r3, #0
  009e8	e5823000	 str         r3, [r2]

; 310  :                         EventInfoObj[hCount].IsDMA = FALSE;

  009ec	e59d1288	 ldr         r1, [sp, #0x288]
  009f0	e3a0300c	 mov         r3, #0xC
  009f4	e0020391	 mul         r2, r1, r3
  009f8	e28d30a4	 add         r3, sp, #0xA4
  009fc	e0832002	 add         r2, r3, r2
  00a00	e3a03000	 mov         r3, #0
  00a04	e5823000	 str         r3, [r2]

; 311  :                         EventInfoObj[hCount].ucReservedDeviceAddr = pCurrent->pPipe->GetReservedDeviceAddr();

  00a08	e59d3290	 ldr         r3, [sp, #0x290]
  00a0c	e5932000	 ldr         r2, [r3]
  00a10	e59d3290	 ldr         r3, [sp, #0x290]
  00a14	e5930000	 ldr         r0, [r3]
  00a18	e5923000	 ldr         r3, [r2]
  00a1c	e2833028	 add         r3, r3, #0x28
  00a20	e5933000	 ldr         r3, [r3]
  00a24	e1a0e00f	 mov         lr, pc
  00a28	e12fff13	 bx          r3
  00a2c	e5cd02e4	 strb        r0, [sp, #0x2E4]
  00a30	e59d1288	 ldr         r1, [sp, #0x288]
  00a34	e3a0300c	 mov         r3, #0xC
  00a38	e0020391	 mul         r2, r1, r3
  00a3c	e28d30a4	 add         r3, sp, #0xA4
  00a40	e0833002	 add         r3, r3, r2
  00a44	e2832008	 add         r2, r3, #8
  00a48	e5dd32e4	 ldrb        r3, [sp, #0x2E4]
  00a4c	e5c23000	 strb        r3, [r2]

; 312  :                         EventInfoObj[hCount].ucDeviceEndPoint = endptDesc.bEndpointAddress;

  00a50	e59d1288	 ldr         r1, [sp, #0x288]
  00a54	e3a0300c	 mov         r3, #0xC
  00a58	e0020391	 mul         r2, r1, r3
  00a5c	e28d30a4	 add         r3, sp, #0xA4
  00a60	e0833002	 add         r3, r3, r2
  00a64	e2832009	 add         r2, r3, #9
  00a68	e5dd32b2	 ldrb        r3, [sp, #0x2B2]
  00a6c	e5c23000	 strb        r3, [r2]

; 313  :                         m_hEP2Handles[0][DIR_IN] = m_hEP2Handles[0][DIR_OUT] = m_hEP0CheckForDoneTransfersEvent;

  00a70	e59d3344	 ldr         r3, [sp, #0x344]
  00a74	e28310bc	 add         r1, r3, #0xBC
  00a78	e59d3344	 ldr         r3, [sp, #0x344]
  00a7c	e2832018	 add         r2, r3, #0x18
  00a80	e5913000	 ldr         r3, [r1]
  00a84	e5823000	 str         r3, [r2]
  00a88	e59d3344	 ldr         r3, [sp, #0x344]
  00a8c	e2831018	 add         r1, r3, #0x18
  00a90	e59d3344	 ldr         r3, [sp, #0x344]
  00a94	e2832014	 add         r2, r3, #0x14
  00a98	e5913000	 ldr         r3, [r1]
  00a9c	e5823000	 str         r3, [r2]

; 314  :                         dwCurEPSetList |= 1;

  00aa0	e59d32a8	 ldr         r3, [sp, #0x2A8]
  00aa4	e3833001	 orr         r3, r3, #1
  00aa8	e58d32a8	 str         r3, [sp, #0x2A8]

; 315  :                         hCount++;

  00aac	e59d3288	 ldr         r3, [sp, #0x288]
  00ab0	e2833001	 add         r3, r3, #1
  00ab4	e58d3288	 str         r3, [sp, #0x288]
  00ab8	ea000015	 b           |$LN16@CheckForDo@3|
  00abc		 |$LN17@CheckForDo@3|

; 316  :                     }
; 317  :                     else if (EPSet != 0)

  00abc	e59d32b8	 ldr         r3, [sp, #0x2B8]
  00ac0	e3530000	 cmp         r3, #0
  00ac4	0a000007	 beq         |$LN15@CheckForDo@3|

; 318  :                         DEBUGMSG(1, (TEXT("EP 0 has been setup\r\n")));

  00ac8	e59f063c	 ldr         r0, [pc, #0x63C]
  00acc	eb000000	 bl          NKDbgPrintfW
  00ad0	e3a03001	 mov         r3, #1
  00ad4	e58d32e8	 str         r3, [sp, #0x2E8]
  00ad8	ea000001	 b           |$LN36@CheckForDo@3|
  00adc	e3a03000	 mov         r3, #0
  00ae0	e58d32e8	 str         r3, [sp, #0x2E8]
  00ae4		 |$LN36@CheckForDo@3|

; 319  :                     else

  00ae4	ea00000a	 b           |$LN14@CheckForDo@3|
  00ae8		 |$LN15@CheckForDo@3|

; 320  :                         DEBUGMSG(ZONE_WARNING, (TEXT("Warning!!! EndPoint 0 => no handle\r\n")));

  00ae8	e59f3600	 ldr         r3, [pc, #0x600]
  00aec	e5933440	 ldr         r3, [r3, #0x440]
  00af0	e3130a02	 tst         r3, #2, 20
  00af4	0a000004	 beq         |$LN37@CheckForDo@3|
  00af8	e59f0608	 ldr         r0, [pc, #0x608]
  00afc	eb000000	 bl          NKDbgPrintfW
  00b00	e3a03001	 mov         r3, #1
  00b04	e58d32ec	 str         r3, [sp, #0x2EC]
  00b08	ea000001	 b           |$LN38@CheckForDo@3|
  00b0c		 |$LN37@CheckForDo@3|
  00b0c	e3a03000	 mov         r3, #0
  00b10	e58d32ec	 str         r3, [sp, #0x2EC]
  00b14		 |$LN38@CheckForDo@3|
  00b14		 |$LN14@CheckForDo@3|
  00b14		 |$LN16@CheckForDo@3|

; 321  :                                                 
; 322  :                 }
; 323  :                 else // Non-endpoint 0

  00b14	ea000087	 b           |$LN13@CheckForDo@3|
  00b18		 |$LN18@CheckForDo@3|

; 324  :                 {
; 325  :                     // For the rest of the non-control pipe, just
; 326  :                     // register the handle associated with the pipe.
; 327  :                     if (!pCurrent->pPipe->GetEPTransferEvent())

  00b18	e59d3290	 ldr         r3, [sp, #0x290]
  00b1c	e5930000	 ldr         r0, [r3]
  00b20	eb000000	 bl          |?GetEPTransferEvent@CPipe@@QAAPAXXZ|
  00b24	e58d02f0	 str         r0, [sp, #0x2F0]
  00b28	e59d32f0	 ldr         r3, [sp, #0x2F0]
  00b2c	e3530000	 cmp         r3, #0
  00b30	1a000009	 bne         |$LN12@CheckForDo@3|

; 328  :                         DEBUGMSG(1, (TEXT("ERROR!!! No Transfer Event for EP 0x%x\r\n"), endpoint));

  00b34	e5dd32ac	 ldrb        r3, [sp, #0x2AC]
  00b38	e1a01003	 mov         r1, r3
  00b3c	e59f05c0	 ldr         r0, [pc, #0x5C0]
  00b40	eb000000	 bl          NKDbgPrintfW
  00b44	e3a03001	 mov         r3, #1
  00b48	e58d32f4	 str         r3, [sp, #0x2F4]
  00b4c	ea000001	 b           |$LN40@CheckForDo@3|
  00b50	e3a03000	 mov         r3, #0
  00b54	e58d32f4	 str         r3, [sp, #0x2F4]
  00b58		 |$LN40@CheckForDo@3|

; 329  :                     else

  00b58	ea000037	 b           |$LN11@CheckForDo@3|
  00b5c		 |$LN12@CheckForDo@3|

; 330  :                     {
; 331  :                         hWaitHandle[hCount] = pCurrent->pPipe->GetEPTransferEvent();

  00b5c	e59d3290	 ldr         r3, [sp, #0x290]
  00b60	e5930000	 ldr         r0, [r3]
  00b64	eb000000	 bl          |?GetEPTransferEvent@CPipe@@QAAPAXXZ|
  00b68	e58d02f8	 str         r0, [sp, #0x2F8]
  00b6c	e59d1288	 ldr         r1, [sp, #0x288]
  00b70	e3a03004	 mov         r3, #4
  00b74	e0020391	 mul         r2, r1, r3
  00b78	e28d3000	 add         r3, sp, #0
  00b7c	e0832002	 add         r2, r3, r2
  00b80	e59d32f8	 ldr         r3, [sp, #0x2F8]
  00b84	e5823000	 str         r3, [r2]

; 332  :                         EventInfoObj[hCount].pPipe = pCurrent->pPipe;

  00b88	e59d1288	 ldr         r1, [sp, #0x288]
  00b8c	e3a0300c	 mov         r3, #0xC
  00b90	e0020391	 mul         r2, r1, r3
  00b94	e28d30a4	 add         r3, sp, #0xA4
  00b98	e0833002	 add         r3, r3, r2
  00b9c	e2832004	 add         r2, r3, #4
  00ba0	e59d3290	 ldr         r3, [sp, #0x290]
  00ba4	e5933000	 ldr         r3, [r3]
  00ba8	e5823000	 str         r3, [r2]

; 333  :                         EventInfoObj[hCount].IsDMA = FALSE;

  00bac	e59d1288	 ldr         r1, [sp, #0x288]
  00bb0	e3a0300c	 mov         r3, #0xC
  00bb4	e0020391	 mul         r2, r1, r3
  00bb8	e28d30a4	 add         r3, sp, #0xA4
  00bbc	e0832002	 add         r2, r3, r2
  00bc0	e3a03000	 mov         r3, #0
  00bc4	e5823000	 str         r3, [r2]

; 334  :                         EventInfoObj[hCount].ucReservedDeviceAddr = pCurrent->pPipe->GetReservedDeviceAddr();

  00bc8	e59d3290	 ldr         r3, [sp, #0x290]
  00bcc	e5932000	 ldr         r2, [r3]
  00bd0	e59d3290	 ldr         r3, [sp, #0x290]
  00bd4	e5930000	 ldr         r0, [r3]
  00bd8	e5923000	 ldr         r3, [r2]
  00bdc	e2833028	 add         r3, r3, #0x28
  00be0	e5933000	 ldr         r3, [r3]
  00be4	e1a0e00f	 mov         lr, pc
  00be8	e12fff13	 bx          r3
  00bec	e5cd02fc	 strb        r0, [sp, #0x2FC]
  00bf0	e59d1288	 ldr         r1, [sp, #0x288]
  00bf4	e3a0300c	 mov         r3, #0xC
  00bf8	e0020391	 mul         r2, r1, r3
  00bfc	e28d30a4	 add         r3, sp, #0xA4
  00c00	e0833002	 add         r3, r3, r2
  00c04	e2832008	 add         r2, r3, #8
  00c08	e5dd32fc	 ldrb        r3, [sp, #0x2FC]
  00c0c	e5c23000	 strb        r3, [r2]

; 335  :                         EventInfoObj[hCount].ucDeviceEndPoint = endptDesc.bEndpointAddress;

  00c10	e59d1288	 ldr         r1, [sp, #0x288]
  00c14	e3a0300c	 mov         r3, #0xC
  00c18	e0020391	 mul         r2, r1, r3
  00c1c	e28d30a4	 add         r3, sp, #0xA4
  00c20	e0833002	 add         r3, r3, r2
  00c24	e2832009	 add         r2, r3, #9
  00c28	e5dd32b2	 ldrb        r3, [sp, #0x2B2]
  00c2c	e5c23000	 strb        r3, [r2]

; 336  :                         hCount++;

  00c30	e59d3288	 ldr         r3, [sp, #0x288]
  00c34	e2833001	 add         r3, r3, #1
  00c38	e58d3288	 str         r3, [sp, #0x288]
  00c3c		 |$LN11@CheckForDo@3|

; 337  :                     }
; 338  : 
; 339  :                     // Finally do the DMA event
; 340  :                     if (pCurrent->pPipe->GetDMATransferEvent())

  00c3c	e59d3290	 ldr         r3, [sp, #0x290]
  00c40	e5930000	 ldr         r0, [r3]
  00c44	eb000000	 bl          |?GetDMATransferEvent@CPipe@@QAAPAXXZ|
  00c48	e58d0300	 str         r0, [sp, #0x300]
  00c4c	e59d3300	 ldr         r3, [sp, #0x300]
  00c50	e3530000	 cmp         r3, #0
  00c54	0a000037	 beq         |$LN10@CheckForDo@3|

; 341  :                     {
; 342  :                         hWaitHandle[hCount] = pCurrent->pPipe->GetDMATransferEvent();

  00c58	e59d3290	 ldr         r3, [sp, #0x290]
  00c5c	e5930000	 ldr         r0, [r3]
  00c60	eb000000	 bl          |?GetDMATransferEvent@CPipe@@QAAPAXXZ|
  00c64	e58d0304	 str         r0, [sp, #0x304]
  00c68	e59d1288	 ldr         r1, [sp, #0x288]
  00c6c	e3a03004	 mov         r3, #4
  00c70	e0020391	 mul         r2, r1, r3
  00c74	e28d3000	 add         r3, sp, #0
  00c78	e0832002	 add         r2, r3, r2
  00c7c	e59d3304	 ldr         r3, [sp, #0x304]
  00c80	e5823000	 str         r3, [r2]

; 343  :                         EventInfoObj[hCount].pPipe = pCurrent->pPipe;

  00c84	e59d1288	 ldr         r1, [sp, #0x288]
  00c88	e3a0300c	 mov         r3, #0xC
  00c8c	e0020391	 mul         r2, r1, r3
  00c90	e28d30a4	 add         r3, sp, #0xA4
  00c94	e0833002	 add         r3, r3, r2
  00c98	e2832004	 add         r2, r3, #4
  00c9c	e59d3290	 ldr         r3, [sp, #0x290]
  00ca0	e5933000	 ldr         r3, [r3]
  00ca4	e5823000	 str         r3, [r2]

; 344  :                         EventInfoObj[hCount].IsDMA = TRUE;

  00ca8	e59d1288	 ldr         r1, [sp, #0x288]
  00cac	e3a0300c	 mov         r3, #0xC
  00cb0	e0020391	 mul         r2, r1, r3
  00cb4	e28d30a4	 add         r3, sp, #0xA4
  00cb8	e0832002	 add         r2, r3, r2
  00cbc	e3a03001	 mov         r3, #1
  00cc0	e5823000	 str         r3, [r2]

; 345  :                         EventInfoObj[hCount].ucReservedDeviceAddr = pCurrent->pPipe->GetReservedDeviceAddr();

  00cc4	e59d3290	 ldr         r3, [sp, #0x290]
  00cc8	e5932000	 ldr         r2, [r3]
  00ccc	e59d3290	 ldr         r3, [sp, #0x290]
  00cd0	e5930000	 ldr         r0, [r3]
  00cd4	e5923000	 ldr         r3, [r2]
  00cd8	e2833028	 add         r3, r3, #0x28
  00cdc	e5933000	 ldr         r3, [r3]
  00ce0	e1a0e00f	 mov         lr, pc
  00ce4	e12fff13	 bx          r3
  00ce8	e5cd0308	 strb        r0, [sp, #0x308]
  00cec	e59d1288	 ldr         r1, [sp, #0x288]
  00cf0	e3a0300c	 mov         r3, #0xC
  00cf4	e0020391	 mul         r2, r1, r3
  00cf8	e28d30a4	 add         r3, sp, #0xA4
  00cfc	e0833002	 add         r3, r3, r2
  00d00	e2832008	 add         r2, r3, #8
  00d04	e5dd3308	 ldrb        r3, [sp, #0x308]
  00d08	e5c23000	 strb        r3, [r2]

; 346  :                         EventInfoObj[hCount].ucDeviceEndPoint = endptDesc.bEndpointAddress;

  00d0c	e59d1288	 ldr         r1, [sp, #0x288]
  00d10	e3a0300c	 mov         r3, #0xC
  00d14	e0020391	 mul         r2, r1, r3
  00d18	e28d30a4	 add         r3, sp, #0xA4
  00d1c	e0833002	 add         r3, r3, r2
  00d20	e2832009	 add         r2, r3, #9
  00d24	e5dd32b2	 ldrb        r3, [sp, #0x2B2]
  00d28	e5c23000	 strb        r3, [r2]

; 347  :                         hCount++;

  00d2c	e59d3288	 ldr         r3, [sp, #0x288]
  00d30	e2833001	 add         r3, r3, #1
  00d34	e58d3288	 str         r3, [sp, #0x288]
  00d38		 |$LN10@CheckForDo@3|
  00d38		 |$LN13@CheckForDo@3|

; 348  :                     }
; 349  :                 }              
; 350  : 
; 351  :                 pCurrent = pCurrent->pNext;

  00d38	e59d3290	 ldr         r3, [sp, #0x290]
  00d3c	e2833004	 add         r3, r3, #4
  00d40	e5933000	 ldr         r3, [r3]
  00d44	e58d3290	 str         r3, [sp, #0x290]

; 352  :             }            

  00d48	eafffefd	 b           |$LN20@CheckForDo@3|
  00d4c		 |$LN19@CheckForDo@3|

; 353  :             DEBUGMSG(ZONE_PIPE, (TEXT("CBusyPipeL ist::Total no of event = %d\r\n"), hCount));

  00d4c	e59f339c	 ldr         r3, [pc, #0x39C]
  00d50	e5933440	 ldr         r3, [r3, #0x440]
  00d54	e3130080	 tst         r3, #0x80
  00d58	0a000005	 beq         |$LN41@CheckForDo@3|
  00d5c	e59d1288	 ldr         r1, [sp, #0x288]
  00d60	e59f0398	 ldr         r0, [pc, #0x398]
  00d64	eb000000	 bl          NKDbgPrintfW
  00d68	e3a03001	 mov         r3, #1
  00d6c	e58d330c	 str         r3, [sp, #0x30C]
  00d70	ea000001	 b           |$LN42@CheckForDo@3|
  00d74		 |$LN41@CheckForDo@3|
  00d74	e3a03000	 mov         r3, #0
  00d78	e58d330c	 str         r3, [sp, #0x30C]
  00d7c		 |$LN42@CheckForDo@3|

; 354  :             continue;

  00d7c	eafffec1	 b           |$LN25@CheckForDo@3|
  00d80		 |$LN21@CheckForDo@3|

; 355  :         }
; 356  : 
; 357  :         signal_evt = (UCHAR)(dwErr - WAIT_OBJECT_0);

  00d80	e59d328c	 ldr         r3, [sp, #0x28C]
  00d84	e20330ff	 and         r3, r3, #0xFF
  00d88	e5cd32a4	 strb        r3, [sp, #0x2A4]

; 358  :         // Find out which pipe corresponding to
; 359  :         pSignalPipe = EventInfoObj[signal_evt].pPipe;

  00d8c	e5dd32a4	 ldrb        r3, [sp, #0x2A4]
  00d90	e1a01003	 mov         r1, r3
  00d94	e3a0300c	 mov         r3, #0xC
  00d98	e0020391	 mul         r2, r1, r3
  00d9c	e28d30a4	 add         r3, sp, #0xA4
  00da0	e0833002	 add         r3, r3, r2
  00da4	e2833004	 add         r3, r3, #4
  00da8	e5933000	 ldr         r3, [r3]
  00dac	e58d32a0	 str         r3, [sp, #0x2A0]

; 360  :         // Is this DMA signal?
; 361  :         signal_isDMA = EventInfoObj[signal_evt].IsDMA;

  00db0	e5dd32a4	 ldrb        r3, [sp, #0x2A4]
  00db4	e1a01003	 mov         r1, r3
  00db8	e3a0300c	 mov         r3, #0xC
  00dbc	e0020391	 mul         r2, r1, r3
  00dc0	e28d30a4	 add         r3, sp, #0xA4
  00dc4	e0833002	 add         r3, r3, r2
  00dc8	e5933000	 ldr         r3, [r3]
  00dcc	e58d329c	 str         r3, [sp, #0x29C]

; 362  : 
; 363  :         signal_ep = USB_ENDPOINT(EventInfoObj[signal_evt].ucDeviceEndPoint);

  00dd0	e5dd32a4	 ldrb        r3, [sp, #0x2A4]
  00dd4	e1a01003	 mov         r1, r3
  00dd8	e3a0300c	 mov         r3, #0xC
  00ddc	e0020391	 mul         r2, r1, r3
  00de0	e28d30a4	 add         r3, sp, #0xA4
  00de4	e0833002	 add         r3, r3, r2
  00de8	e2833009	 add         r3, r3, #9
  00dec	e5d33000	 ldrb        r3, [r3]
  00df0	e203300f	 and         r3, r3, #0xF
  00df4	e20330ff	 and         r3, r3, #0xFF
  00df8	e5cd3298	 strb        r3, [sp, #0x298]

; 364  : 
; 365  : 
; 366  :         DEBUGMSG(ZONE_TRANSFER, (TEXT("CBusyPipeList get signal evt %d EP 0x%x signal, DMA (%d)\r\n"), 
; 367  :             signal_evt, ((signal_ep ==0)? 0:(pSignalPipe->GetEndptDescriptor()).bEndpointAddress), 
; 368  :             signal_isDMA));

  00dfc	e59f32ec	 ldr         r3, [pc, #0x2EC]
  00e00	e5933440	 ldr         r3, [r3, #0x440]
  00e04	e3130c01	 tst         r3, #1, 24
  00e08	0a000015	 beq         |$LN45@CheckForDo@3|
  00e0c	e5dd3298	 ldrb        r3, [sp, #0x298]
  00e10	e3530000	 cmp         r3, #0
  00e14	1a000002	 bne         |$LN43@CheckForDo@3|
  00e18	e3a03000	 mov         r3, #0
  00e1c	e58d3310	 str         r3, [sp, #0x310]
  00e20	ea000007	 b           |$LN44@CheckForDo@3|
  00e24		 |$LN43@CheckForDo@3|
  00e24	e28d1fb2	 add         r1, sp, #0xB2, 30
  00e28	e59d02a0	 ldr         r0, [sp, #0x2A0]
  00e2c	eb000000	 bl          |?GetEndptDescriptor@CPipe@@QAA?AU_USB_ENDPOINT_DESCRIPTOR@@XZ|
  00e30	e58d0314	 str         r0, [sp, #0x314]
  00e34	e59d3314	 ldr         r3, [sp, #0x314]
  00e38	e2833002	 add         r3, r3, #2
  00e3c	e5d33000	 ldrb        r3, [r3]
  00e40	e58d3310	 str         r3, [sp, #0x310]
  00e44		 |$LN44@CheckForDo@3|
  00e44	e59d329c	 ldr         r3, [sp, #0x29C]
  00e48	e59d2310	 ldr         r2, [sp, #0x310]
  00e4c	e5dd12a4	 ldrb        r1, [sp, #0x2A4]
  00e50	e59f02a4	 ldr         r0, [pc, #0x2A4]
  00e54	eb000000	 bl          NKDbgPrintfW
  00e58	e3a03001	 mov         r3, #1
  00e5c	e58d3318	 str         r3, [sp, #0x318]
  00e60	ea000001	 b           |$LN46@CheckForDo@3|
  00e64		 |$LN45@CheckForDo@3|
  00e64	e3a03000	 mov         r3, #0
  00e68	e58d3318	 str         r3, [sp, #0x318]
  00e6c		 |$LN46@CheckForDo@3|

; 369  :        
; 370  :         Lock();

  00e6c	e59d0344	 ldr         r0, [sp, #0x344]
  00e70	eb000000	 bl          |?Lock@LockObject@@QAAXXZ|

; 371  :         pCurrent = m_pBusyPipeList;

  00e74	e59d3344	 ldr         r3, [sp, #0x344]
  00e78	e28330cc	 add         r3, r3, #0xCC
  00e7c	e5933000	 ldr         r3, [r3]
  00e80	e58d3290	 str         r3, [sp, #0x290]
  00e84		 |$LN9@CheckForDo@3|

; 372  :              
; 373  :         while ( pCurrent != NULL ) {            

  00e84	e59d3290	 ldr         r3, [sp, #0x290]
  00e88	e3530000	 cmp         r3, #0
  00e8c	0a00007e	 beq         |$LN8@CheckForDo@3|

; 374  : #ifdef DEBUG
; 375  :             USB_ENDPOINT_DESCRIPTOR endptDesc = pCurrent->pPipe->GetEndptDescriptor();

  00e90	e28d1faf	 add         r1, sp, #0xAF, 30
  00e94	e59d3290	 ldr         r3, [sp, #0x290]
  00e98	e5930000	 ldr         r0, [r3]
  00e9c	eb000000	 bl          |?GetEndptDescriptor@CPipe@@QAA?AU_USB_ENDPOINT_DESCRIPTOR@@XZ|

; 376  : #endif
; 377  :             BOOL match = FALSE;

  00ea0	e3a03000	 mov         r3, #0
  00ea4	e58d32c4	 str         r3, [sp, #0x2C4]

; 378  :             // Find out which actual data is being transferred.
; 379  :             // We need to check the endpoint and also the status.
; 380  : 
; 381  :             // Need to find out which actual pipe is sending 
; 382  :             // as there are now more than 1 pipes in same endpoint
; 383  :             if (!signal_isDMA)

  00ea8	e59d329c	 ldr         r3, [sp, #0x29C]
  00eac	e3530000	 cmp         r3, #0
  00eb0	1a00002b	 bne         |$LN7@CheckForDo@3|

; 384  :             {
; 385  :                 if (signal_ep != 0)

  00eb4	e5dd3298	 ldrb        r3, [sp, #0x298]
  00eb8	e3530000	 cmp         r3, #0
  00ebc	0a00000c	 beq         |$LN6@CheckForDo@3|

; 386  :                     match = (pCurrent->pPipe == pSignalPipe);

  00ec0	e59d3290	 ldr         r3, [sp, #0x290]
  00ec4	e5932000	 ldr         r2, [r3]
  00ec8	e59d32a0	 ldr         r3, [sp, #0x2A0]
  00ecc	e1520003	 cmp         r2, r3
  00ed0	1a000002	 bne         |$LN47@CheckForDo@3|
  00ed4	e3a03001	 mov         r3, #1
  00ed8	e58d331c	 str         r3, [sp, #0x31C]
  00edc	ea000001	 b           |$LN48@CheckForDo@3|
  00ee0		 |$LN47@CheckForDo@3|
  00ee0	e3a03000	 mov         r3, #0
  00ee4	e58d331c	 str         r3, [sp, #0x31C]
  00ee8		 |$LN48@CheckForDo@3|
  00ee8	e59d331c	 ldr         r3, [sp, #0x31C]
  00eec	e58d32c4	 str         r3, [sp, #0x2C4]

; 387  :                 else

  00ef0	ea00001a	 b           |$LN5@CheckForDo@3|
  00ef4		 |$LN6@CheckForDo@3|

; 388  :                     match = pCurrent->pPipe->m_pCMhcd->IsDeviceLockEP0(pCurrent->pPipe->GetReservedDeviceAddr());

  00ef4	e59d3290	 ldr         r3, [sp, #0x290]
  00ef8	e5932000	 ldr         r2, [r3]
  00efc	e59d3290	 ldr         r3, [sp, #0x290]
  00f00	e5930000	 ldr         r0, [r3]
  00f04	e5923000	 ldr         r3, [r2]
  00f08	e2833028	 add         r3, r3, #0x28
  00f0c	e5933000	 ldr         r3, [r3]
  00f10	e1a0e00f	 mov         lr, pc
  00f14	e12fff13	 bx          r3
  00f18	e5cd0320	 strb        r0, [sp, #0x320]
  00f1c	e5dd1320	 ldrb        r1, [sp, #0x320]
  00f20	e59d3290	 ldr         r3, [sp, #0x290]
  00f24	e5933000	 ldr         r3, [r3]
  00f28	e283300c	 add         r3, r3, #0xC
  00f2c	e5932000	 ldr         r2, [r3]
  00f30	e59d3290	 ldr         r3, [sp, #0x290]
  00f34	e5933000	 ldr         r3, [r3]
  00f38	e283300c	 add         r3, r3, #0xC
  00f3c	e5930000	 ldr         r0, [r3]
  00f40	e5923000	 ldr         r3, [r2]
  00f44	e283307c	 add         r3, r3, #0x7C
  00f48	e5933000	 ldr         r3, [r3]
  00f4c	e1a0e00f	 mov         lr, pc
  00f50	e12fff13	 bx          r3
  00f54	e58d0324	 str         r0, [sp, #0x324]
  00f58	e59d3324	 ldr         r3, [sp, #0x324]
  00f5c	e58d32c4	 str         r3, [sp, #0x2C4]
  00f60		 |$LN5@CheckForDo@3|

; 389  :             }
; 390  :             else

  00f60	ea000016	 b           |$LN4@CheckForDo@3|
  00f64		 |$LN7@CheckForDo@3|

; 391  :             {
; 392  :                 if (signal_ep == 0)

  00f64	e5dd3298	 ldrb        r3, [sp, #0x298]
  00f68	e3530000	 cmp         r3, #0
  00f6c	1a000007	 bne         |$LN3@CheckForDo@3|

; 393  :                     DEBUGMSG(1, (TEXT("Wrong!! EP0 cannot have DMA interrupt!!\r\n")));

  00f70	e59f0180	 ldr         r0, [pc, #0x180]
  00f74	eb000000	 bl          NKDbgPrintfW
  00f78	e3a03001	 mov         r3, #1
  00f7c	e58d3328	 str         r3, [sp, #0x328]
  00f80	ea000001	 b           |$LN50@CheckForDo@3|
  00f84	e3a03000	 mov         r3, #0
  00f88	e58d3328	 str         r3, [sp, #0x328]
  00f8c		 |$LN50@CheckForDo@3|

; 394  :                 else

  00f8c	ea00000b	 b           |$LN2@CheckForDo@3|
  00f90		 |$LN3@CheckForDo@3|

; 395  :                     match = (pCurrent->pPipe == pSignalPipe);

  00f90	e59d3290	 ldr         r3, [sp, #0x290]
  00f94	e5932000	 ldr         r2, [r3]
  00f98	e59d32a0	 ldr         r3, [sp, #0x2A0]
  00f9c	e1520003	 cmp         r2, r3
  00fa0	1a000002	 bne         |$LN51@CheckForDo@3|
  00fa4	e3a03001	 mov         r3, #1
  00fa8	e58d332c	 str         r3, [sp, #0x32C]
  00fac	ea000001	 b           |$LN52@CheckForDo@3|
  00fb0		 |$LN51@CheckForDo@3|
  00fb0	e3a03000	 mov         r3, #0
  00fb4	e58d332c	 str         r3, [sp, #0x32C]
  00fb8		 |$LN52@CheckForDo@3|
  00fb8	e59d332c	 ldr         r3, [sp, #0x32C]
  00fbc	e58d32c4	 str         r3, [sp, #0x2C4]
  00fc0		 |$LN2@CheckForDo@3|
  00fc0		 |$LN4@CheckForDo@3|

; 396  :             }
; 397  : 
; 398  :             if (match)

  00fc0	e59d32c4	 ldr         r3, [sp, #0x2C4]
  00fc4	e3530000	 cmp         r3, #0
  00fc8	0a00002a	 beq         |$LN1@CheckForDo@3|

; 399  :             {
; 400  :                 // We don't need to loop through, just check                
; 401  :                 DEBUGMSG(ZONE_TRANSFER, (TEXT("CBusyPipeThread=>ProcessEP %d dir %d\r\n"), 
; 402  :                     USB_ENDPOINT(endptDesc.bEndpointAddress), USB_ENDPOINT_DIRECTION_OUT(endptDesc.bEndpointAddress)));

  00fcc	e59f311c	 ldr         r3, [pc, #0x11C]
  00fd0	e5933440	 ldr         r3, [r3, #0x440]
  00fd4	e3130c01	 tst         r3, #1, 24
  00fd8	0a00000f	 beq         |$LN55@CheckForDo@3|
  00fdc	e5dd32be	 ldrb        r3, [sp, #0x2BE]
  00fe0	e3130080	 tst         r3, #0x80
  00fe4	1a000002	 bne         |$LN53@CheckForDo@3|
  00fe8	e3a03001	 mov         r3, #1
  00fec	e58d3330	 str         r3, [sp, #0x330]
  00ff0	ea000001	 b           |$LN54@CheckForDo@3|
  00ff4		 |$LN53@CheckForDo@3|
  00ff4	e3a03000	 mov         r3, #0
  00ff8	e58d3330	 str         r3, [sp, #0x330]
  00ffc		 |$LN54@CheckForDo@3|
  00ffc	e59d2330	 ldr         r2, [sp, #0x330]
  01000	e5dd32be	 ldrb        r3, [sp, #0x2BE]
  01004	e203100f	 and         r1, r3, #0xF
  01008	e59f00e4	 ldr         r0, [pc, #0xE4]
  0100c	eb000000	 bl          NKDbgPrintfW
  01010	e3a03001	 mov         r3, #1
  01014	e58d3334	 str         r3, [sp, #0x334]
  01018	ea000001	 b           |$LN56@CheckForDo@3|
  0101c		 |$LN55@CheckForDo@3|
  0101c	e3a03000	 mov         r3, #0
  01020	e58d3334	 str         r3, [sp, #0x334]
  01024		 |$LN56@CheckForDo@3|

; 403  :                 pCurrent->pPipe->ProcessEP(STATUS_PROCESS_INTR, signal_isDMA);

  01024	e59d229c	 ldr         r2, [sp, #0x29C]
  01028	e3a01000	 mov         r1, #0
  0102c	e59d3290	 ldr         r3, [sp, #0x290]
  01030	e593e000	 ldr         lr, [r3]
  01034	e59d3290	 ldr         r3, [sp, #0x290]
  01038	e5930000	 ldr         r0, [r3]
  0103c	e59e3000	 ldr         r3, [lr]
  01040	e2833038	 add         r3, r3, #0x38
  01044	e5933000	 ldr         r3, [r3]
  01048	e1a0e00f	 mov         lr, pc
  0104c	e12fff13	 bx          r3

; 404  :                 pCurrent->pPipe->CheckForDoneTransfers();

  01050	e59d3290	 ldr         r3, [sp, #0x290]
  01054	e5932000	 ldr         r2, [r3]
  01058	e59d3290	 ldr         r3, [sp, #0x290]
  0105c	e5930000	 ldr         r0, [r3]
  01060	e5923000	 ldr         r3, [r2]
  01064	e2833034	 add         r3, r3, #0x34
  01068	e5933000	 ldr         r3, [r3]
  0106c	e1a0e00f	 mov         lr, pc
  01070	e12fff13	 bx          r3

; 405  :                 break;

  01074	ea000004	 b           |$LN8@CheckForDo@3|
  01078		 |$LN1@CheckForDo@3|

; 406  :             }         
; 407  :             pCurrent = pCurrent->pNext;

  01078	e59d3290	 ldr         r3, [sp, #0x290]
  0107c	e2833004	 add         r3, r3, #4
  01080	e5933000	 ldr         r3, [r3]
  01084	e58d3290	 str         r3, [sp, #0x290]

; 408  :         }        

  01088	eaffff7d	 b           |$LN9@CheckForDo@3|
  0108c		 |$LN8@CheckForDo@3|

; 409  :         Unlock();

  0108c	e59d0344	 ldr         r0, [sp, #0x344]
  01090	eb000000	 bl          |?Unlock@LockObject@@QAAXXZ|

; 410  :     }

  01094	eafffdfb	 b           |$LN59@CheckForDo@3|
  01098		 |$LN24@CheckForDo@3|

; 411  :     DEBUGMSG( ZONE_TRANSFER && ZONE_VERBOSE, (TEXT("-CPipe::CheckForDoneTransfersThread\n")) );

  01098	e59f3050	 ldr         r3, [pc, #0x50]
  0109c	e5933440	 ldr         r3, [r3, #0x440]
  010a0	e3130c01	 tst         r3, #1, 24
  010a4	0a000008	 beq         |$LN57@CheckForDo@3|
  010a8	e59f3040	 ldr         r3, [pc, #0x40]
  010ac	e5933440	 ldr         r3, [r3, #0x440]
  010b0	e3130a01	 tst         r3, #1, 20
  010b4	0a000004	 beq         |$LN57@CheckForDo@3|
  010b8	e59f002c	 ldr         r0, [pc, #0x2C]
  010bc	eb000000	 bl          NKDbgPrintfW
  010c0	e3a03001	 mov         r3, #1
  010c4	e58d3338	 str         r3, [sp, #0x338]
  010c8	ea000001	 b           |$LN58@CheckForDo@3|
  010cc		 |$LN57@CheckForDo@3|
  010cc	e3a03000	 mov         r3, #0
  010d0	e58d3338	 str         r3, [sp, #0x338]
  010d4		 |$LN58@CheckForDo@3|

; 412  :     return 0;

  010d4	e3a03000	 mov         r3, #0
  010d8	e58d32d0	 str         r3, [sp, #0x2D0]

; 413  : }

  010dc	e59d02d0	 ldr         r0, [sp, #0x2D0]
  010e0	e28ddfcf	 add         sp, sp, #0xCF, 30
  010e4	e89d6000	 ldmia       sp, {sp, lr}
  010e8	e12fff1e	 bx          lr
  010ec		 |$LN63@CheckForDo@3|
  010ec		 |$LN64@CheckForDo@3|
  010ec	00000000	 DCD         |??_C@_1EK@LNDAMOBI@?$AA?9?$AAC?$AAP?$AAi?$AAp?$AAe?$AA?3?$AA?3?$AAC?$AAh?$AAe?$AAc?$AAk?$AAF?$AAo?$AAr?$AAD?$AAo?$AAn?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AAs?$AAT?$AAh?$AAr@|
  010f0		 |$LN65@CheckForDo@3|
  010f0	00000000	 DCD         |dpCurSettings|
  010f4		 |$LN66@CheckForDo@3|
  010f4	00000000	 DCD         |??_C@_1EO@LLHJNIHP@?$AAC?$AAB?$AAu?$AAs?$AAy?$AAP?$AAi?$AAp?$AAe?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?$DN?$AA?$DO?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAE?$AAP?$AA?5?$AA?$CF?$AAd?$AA?5?$AAd?$AAi@|
  010f8		 |$LN67@CheckForDo@3|
  010f8	00000000	 DCD         |??_C@_1FE@EILBAGEJ@?$AAW?$AAr?$AAo?$AAn?$AAg?$AA?$CB?$AA?$CB?$AA?5?$AAE?$AAP?$AA0?$AA?5?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAh?$AAa?$AAv?$AAe?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAi?$AAn?$AAt?$AAe@|
  010fc		 |$LN68@CheckForDo@3|
  010fc	00000000	 DCD         |??_C@_1HG@BKBLMCFH@?$AAC?$AAB?$AAu?$AAs?$AAy?$AAP?$AAi?$AAp?$AAe?$AAL?$AAi?$AAs?$AAt?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAs?$AAi?$AAg?$AAn?$AAa?$AAl?$AA?5?$AAe?$AAv?$AAt?$AA?5?$AA?$CF?$AAd?$AA?5@|
  01100		 |$LN69@CheckForDo@3|
  01100	00000000	 DCD         |??_C@_1FC@BHIGJHFM@?$AAC?$AAB?$AAu?$AAs?$AAy?$AAP?$AAi?$AAp?$AAe?$AAL?$AA?5?$AAi?$AAs?$AAt?$AA?3?$AA?3?$AAT?$AAo?$AAt?$AAa?$AAl?$AA?5?$AAn?$AAo?$AA?5?$AAo?$AAf?$AA?5?$AAe?$AAv?$AAe?$AAn@|
  01104		 |$LN70@CheckForDo@3|
  01104	00000000	 DCD         |??_C@_1FC@LEJEANKP@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$CB?$AA?$CB?$AA?$CB?$AA?5?$AAN?$AAo?$AA?5?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AA?5?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAE@|
  01108		 |$LN71@CheckForDo@3|
  01108	00000000	 DCD         |??_C@_1EK@INBPCFHL@?$AAW?$AAa?$AAr?$AAn?$AAi?$AAn?$AAg?$AA?$CB?$AA?$CB?$AA?$CB?$AA?5?$AAE?$AAn?$AAd?$AAP?$AAo?$AAi?$AAn?$AAt?$AA?5?$AA0?$AA?5?$AA?$DN?$AA?$DO?$AA?5?$AAn?$AAo?$AA?5?$AAh?$AAa?$AAn?$AAd@|
  0110c		 |$LN72@CheckForDo@3|
  0110c	00000000	 DCD         |??_C@_1CM@NIMGLIGF@?$AAE?$AAP?$AA?5?$AA0?$AA?5?$AAh?$AAa?$AAs?$AA?5?$AAb?$AAe?$AAe?$AAn?$AA?5?$AAs?$AAe?$AAt?$AAu?$AAp?$AA?$AN?$AA?6?$AA?$AA@|
  01110		 |$LN73@CheckForDo@3|
  01110	00000000	 DCD         |??_C@_1HA@CCFMMEKO@?$AAW?$AAa?$AAi?$AAt?$AAF?$AAo?$AAr?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?5?$AAi?$AAn?$AA?5?$AAB?$AAu?$AAs?$AAy?$AAP?$AAi@|
  01114		 |$LN74@CheckForDo@3|
  01114	00000000	 DCD         |??_C@_1EK@IDADIDAB@?$AA?$CL?$AAC?$AAP?$AAi?$AAp?$AAe?$AA?3?$AA?3?$AAC?$AAh?$AAe?$AAc?$AAk?$AAF?$AAo?$AAr?$AAD?$AAo?$AAn?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AAs?$AAT?$AAh?$AAr@|
  01118		 |$M44499|

			 ENDP  ; |?CheckForDoneTransfersThread@CBusyPipeList@@AAAKXZ|, CBusyPipeList::CheckForDoneTransfersThread

	IMPORT	|EnterCriticalSection|
; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\musb\musbhcd\usb2com\sync.hpp

  00000			 AREA	 |.pdata|, PDATA
|$T44518| DCD	|$LN5@Lock|
	DCD	0x40000703
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Lock@LockObject@@QAAXXZ| PROC	; LockObject::Lock

; 73   :     void Lock(void) { EnterCriticalSection(&m_CSection); };

  00000		 |$LN5@Lock|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M44515|
  0000c	e59d0008	 ldr         r0, [sp, #8]
  00010	eb000000	 bl          EnterCriticalSection
  00014	e89d6000	 ldmia       sp, {sp, lr}
  00018	e12fff1e	 bx          lr
  0001c		 |$M44516|

			 ENDP  ; |?Lock@LockObject@@QAAXXZ|, LockObject::Lock

	IMPORT	|LeaveCriticalSection|

  00000			 AREA	 |.pdata|, PDATA
|$T44525| DCD	|$LN5@Unlock|
	DCD	0x40000703
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Unlock@LockObject@@QAAXXZ| PROC	; LockObject::Unlock

; 74   :     void Unlock(void) {LeaveCriticalSection( &m_CSection); };

  00000		 |$LN5@Unlock|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M44522|
  0000c	e59d0008	 ldr         r0, [sp, #8]
  00010	eb000000	 bl          LeaveCriticalSection
  00014	e89d6000	 ldmia       sp, {sp, lr}
  00018	e12fff1e	 bx          lr
  0001c		 |$M44523|

			 ENDP  ; |?Unlock@LockObject@@QAAXXZ|, LockObject::Unlock

	IMPORT	|memcpy|
; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\musb\musbhcd\musbmhdrc\cpipe.h

  00000			 AREA	 |.pdata|, PDATA
|$T44534| DCD	|$LN5@GetEndptDe|
	DCD	0x40000f04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetEndptDescriptor@CPipe@@QAA?AU_USB_ENDPOINT_DESCRIPTOR@@XZ| PROC ; CPipe::GetEndptDescriptor

; 96   :     USB_ENDPOINT_DESCRIPTOR GetEndptDescriptor() { return m_usbEndpointDescriptor;};

  00000		 |$LN5@GetEndptDe|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M44531|
  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e2831034	 add         r1, r3, #0x34
  00018	e59d0010	 ldr         r0, [sp, #0x10]
  0001c	e3a02007	 mov         r2, #7
  00020	eb000000	 bl          memcpy
  00024	e59d3010	 ldr         r3, [sp, #0x10]
  00028	e58d3000	 str         r3, [sp]
  0002c	e59d0000	 ldr         r0, [sp]
  00030	e28dd004	 add         sp, sp, #4
  00034	e89d6000	 ldmia       sp, {sp, lr}
  00038	e12fff1e	 bx          lr
  0003c		 |$M44532|

			 ENDP  ; |?GetEndptDescriptor@CPipe@@QAA?AU_USB_ENDPOINT_DESCRIPTOR@@XZ|, CPipe::GetEndptDescriptor


  00000			 AREA	 |.pdata|, PDATA
|$T44542| DCD	|$LN5@GetEPTrans|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetEPTransferEvent@CPipe@@QAAPAXXZ| PROC ; CPipe::GetEPTransferEvent

; 108  :     HANDLE  GetEPTransferEvent(void) { return m_hEPTransferEvent;};

  00000		 |$LN5@GetEPTrans|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M44539|
  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e283305c	 add         r3, r3, #0x5C
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3000	 str         r3, [sp]
  00020	e59d0000	 ldr         r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M44540|

			 ENDP  ; |?GetEPTransferEvent@CPipe@@QAAPAXXZ|, CPipe::GetEPTransferEvent


  00000			 AREA	 |.pdata|, PDATA
|$T44550| DCD	|$LN5@GetDMATran|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetDMATransferEvent@CPipe@@QAAPAXXZ| PROC ; CPipe::GetDMATransferEvent

; 109  :     HANDLE  GetDMATransferEvent(void) { return m_hDMATransferEvent;};

  00000		 |$LN5@GetDMATran|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M44547|
  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e2833060	 add         r3, r3, #0x60
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3000	 str         r3, [sp]
  00020	e59d0000	 ldr         r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M44548|

			 ENDP  ; |?GetDMATransferEvent@CPipe@@QAAPAXXZ|, CPipe::GetDMATransferEvent

	EXPORT	|??_C@_1JE@HACIKLJN@?$AA?9?$AAC?$AAP?$AAi?$AAp?$AAe?$AA?3?$AA?3?$AAA?$AAd?$AAd?$AAT?$AAo?$AAB?$AAu?$AAs?$AAy?$AAP?$AAi?$AAp?$AAe?$AAL?$AAi?$AAs?$AAt?$AA?5?$AA?9?$AA?5?$AAn?$AAe?$AAw?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FE@GAOFKIHD@?$AAA?$AAd?$AAd?$AAB?$AAu?$AAs?$AAy?$AAP?$AAi?$AAp?$AAe?$AAL?$AAi?$AAs?$AAt?$AA?5?$AAl?$AAe?$AAa?$AAv?$AAi?$AAn?$AAg?$AA?5?$AAE?$AAP?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AAc@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FO@GFHDEABA@?$AAC?$AAB?$AAu?$AAs?$AAy?$AAP?$AAi?$AAp?$AAe?$AAL?$AAi?$AAs?$AAt?$AA?5?$AAE?$AAP?$AA?5?$AA?$CF?$AAd?$AA?5?$AA?0?$AA?5?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AAh?$AAa?$AAs?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FA@FBAOJCJF@?$AAC?$AAB?$AAu?$AAs?$AAy?$AAP?$AAi?$AAp?$AAe?$AAL?$AAi?$AAs?$AAt?$AA?9?$AA?5?$AAC?$AAr?$AAe?$AAa?$AAt?$AAe?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAu@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DM@CNDIBALH@?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAE?$AAP?$AA?5?$AA?$CF?$AAd?$AA?5?$AAh?$AAa?$AAs?$AA?5?$AAb?$AAe?$AAe?$AAn?$AA?5?$AAa?$AAd?$AAd?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IK@EGDMDFJN@?$AAC?$AAB?$AAu?$AAs?$AAy?$AAP?$AAi?$AAp?$AAe?$AAL?$AAi?$AAs?$AAt?$AA?3?$AA?3?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AA?9?$AA?5?$AAE?$AAP?$AA?5?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FG@IEGGHBLE@?$AAA?$AAd?$AAd?$AAT?$AAo?$AAB?$AAu?$AAs?$AAy?$AAP?$AAi?$AAp?$AAe?$AAL?$AAi?$AAs?$AAt?$AA?5?$AAw?$AAi?$AAt?$AAh?$AA?5?$AAE?$AAP?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AAd?$AAe@| [ DATA ] ; `string'
	EXPORT	|?SetMappedEndPoint@CPipe@@QAAXE@Z|	; CPipe::SetMappedEndPoint
	EXPORT	|??_C@_1GO@GIOMNAAN@?$AA?$CL?$AAC?$AAP?$AAi?$AAp?$AAe?$AA?3?$AA?3?$AAA?$AAd?$AAd?$AAT?$AAo?$AAB?$AAu?$AAs?$AAy?$AAP?$AAi?$AAp?$AAe?$AAL?$AAi?$AAs?$AAt?$AA?5?$AA?9?$AA?5?$AAn?$AAe?$AAw?$AA?5@| [ DATA ] ; `string'
	EXPORT	|?AddToBusyPipeList@CBusyPipeList@@QAAHQAVCPipe@@H@Z| ; CBusyPipeList::AddToBusyPipeList
	IMPORT	|??2@YAPAXI@Z|				; operator new

  00038			 AREA	 |.pdata|, PDATA
|$T44584| DCD	|$LN52@AddToBusyP|
	DCD	0x4001c204
; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\musb\musbhcd\musbmhdrc\chw.cpp

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JE@HACIKLJN@?$AA?9?$AAC?$AAP?$AAi?$AAp?$AAe?$AA?3?$AA?3?$AAA?$AAd?$AAd?$AAT?$AAo?$AAB?$AAu?$AAs?$AAy?$AAP?$AAi?$AAp?$AAe?$AAL?$AAi?$AAs?$AAt?$AA?5?$AA?9?$AA?5?$AAn?$AAe?$AAw?$AA?5@| DCB "-"
	DCB	0x0, "C", 0x0, "P", 0x0, "i", 0x0, "p", 0x0, "e", 0x0, ":"
	DCB	0x0, ":", 0x0, "A", 0x0, "d", 0x0, "d", 0x0, "T", 0x0, "o"
	DCB	0x0, "B", 0x0, "u", 0x0, "s", 0x0, "y", 0x0, "P", 0x0, "i"
	DCB	0x0, "p", 0x0, "e", 0x0, "L", 0x0, "i", 0x0, "s", 0x0, "t"
	DCB	0x0, " ", 0x0, "-", 0x0, " ", 0x0, "n", 0x0, "e", 0x0, "w"
	DCB	0x0, " ", 0x0, "p", 0x0, "i", 0x0, "p", 0x0, "e", 0x0, "("
	DCB	0x0, "%", 0x0, "s", 0x0, ")", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "p", 0x0, "r"
	DCB	0x0, "i", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " "
	DCB	0x0, "r", 0x0, "e", 0x0, "t", 0x0, "u", 0x0, "r", 0x0, "n"
	DCB	0x0, "i", 0x0, "n", 0x0, "g", 0x0, " ", 0x0, "B", 0x0, "O"
	DCB	0x0, "O", 0x0, "L", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FE@GAOFKIHD@?$AAA?$AAd?$AAd?$AAB?$AAu?$AAs?$AAy?$AAP?$AAi?$AAp?$AAe?$AAL?$AAi?$AAs?$AAt?$AA?5?$AAl?$AAe?$AAa?$AAv?$AAi?$AAn?$AAg?$AA?5?$AAE?$AAP?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AAc@| DCB "A"
	DCB	0x0, "d", 0x0, "d", 0x0, "B", 0x0, "u", 0x0, "s", 0x0, "y"
	DCB	0x0, "P", 0x0, "i", 0x0, "p", 0x0, "e", 0x0, "L", 0x0, "i"
	DCB	0x0, "s", 0x0, "t", 0x0, " ", 0x0, "l", 0x0, "e", 0x0, "a"
	DCB	0x0, "v", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, " ", 0x0, "E"
	DCB	0x0, "P", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " "
	DCB	0x0, "c", 0x0, "o", 0x0, "u", 0x0, "n", 0x0, "t", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FO@GFHDEABA@?$AAC?$AAB?$AAu?$AAs?$AAy?$AAP?$AAi?$AAp?$AAe?$AAL?$AAi?$AAs?$AAt?$AA?5?$AAE?$AAP?$AA?5?$AA?$CF?$AAd?$AA?5?$AA?0?$AA?5?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AAh?$AAa?$AAs?$AA?5@| DCB "C"
	DCB	0x0, "B", 0x0, "u", 0x0, "s", 0x0, "y", 0x0, "P", 0x0, "i"
	DCB	0x0, "p", 0x0, "e", 0x0, "L", 0x0, "i", 0x0, "s", 0x0, "t"
	DCB	0x0, " ", 0x0, "E", 0x0, "P", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, " ", 0x0, ",", 0x0, " ", 0x0, "i", 0x0, "n", 0x0, "d"
	DCB	0x0, "e", 0x0, "x", 0x0, " ", 0x0, "h", 0x0, "a", 0x0, "s"
	DCB	0x0, " ", 0x0, "o", 0x0, "r", 0x0, "p", 0x0, "h", 0x0, "a"
	DCB	0x0, "n", 0x0, " ", 0x0, "c", 0x0, "o", 0x0, "u", 0x0, "n"
	DCB	0x0, "t", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FA@FBAOJCJF@?$AAC?$AAB?$AAu?$AAs?$AAy?$AAP?$AAi?$AAp?$AAe?$AAL?$AAi?$AAs?$AAt?$AA?9?$AA?5?$AAC?$AAr?$AAe?$AAa?$AAt?$AAe?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAu@| DCB "C"
	DCB	0x0, "B", 0x0, "u", 0x0, "s", 0x0, "y", 0x0, "P", 0x0, "i"
	DCB	0x0, "p", 0x0, "e", 0x0, "L", 0x0, "i", 0x0, "s", 0x0, "t"
	DCB	0x0, "-", 0x0, " ", 0x0, "C", 0x0, "r", 0x0, "e", 0x0, "a"
	DCB	0x0, "t", 0x0, "e", 0x0, "E", 0x0, "v", 0x0, "e", 0x0, "n"
	DCB	0x0, "t", 0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l"
	DCB	0x0, "u", 0x0, "r", 0x0, "e", 0x0, "!", 0x0, "!", 0x0, "!"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@CNDIBALH@?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAE?$AAP?$AA?5?$AA?$CF?$AAd?$AA?5?$AAh?$AAa?$AAs?$AA?5?$AAb?$AAe?$AAe?$AAn?$AA?5?$AAa?$AAd?$AAd?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "D"
	DCB	0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, " "
	DCB	0x0, "E", 0x0, "P", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, " "
	DCB	0x0, "h", 0x0, "a", 0x0, "s", 0x0, " ", 0x0, "b", 0x0, "e"
	DCB	0x0, "e", 0x0, "n", 0x0, " ", 0x0, "a", 0x0, "d", 0x0, "d"
	DCB	0x0, "e", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IK@EGDMDFJN@?$AAC?$AAB?$AAu?$AAs?$AAy?$AAP?$AAi?$AAp?$AAe?$AAL?$AAi?$AAs?$AAt?$AA?3?$AA?3?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AA?9?$AA?5?$AAE?$AAP?$AA?5?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe@| DCB "C"
	DCB	0x0, "B", 0x0, "u", 0x0, "s", 0x0, "y", 0x0, "P", 0x0, "i"
	DCB	0x0, "p", 0x0, "e", 0x0, "L", 0x0, "i", 0x0, "s", 0x0, "t"
	DCB	0x0, ":", 0x0, ":", 0x0, "E", 0x0, "R", 0x0, "R", 0x0, "O"
	DCB	0x0, "R", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "E", 0x0, "P"
	DCB	0x0, " ", 0x0, "H", 0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l"
	DCB	0x0, "e", 0x0, " ", 0x0, "h", 0x0, "a", 0x0, "s", 0x0, " "
	DCB	0x0, "b", 0x0, "e", 0x0, "e", 0x0, "n", 0x0, " ", 0x0, "c"
	DCB	0x0, "r", 0x0, "e", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "b", 0x0, "u", 0x0, "t", 0x0, " ", 0x0, "c"
	DCB	0x0, "o", 0x0, "u", 0x0, "n", 0x0, "t", 0x0, " ", 0x0, "i"
	DCB	0x0, "s", 0x0, " ", 0x0, "n", 0x0, "o", 0x0, "t", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FG@IEGGHBLE@?$AAA?$AAd?$AAd?$AAT?$AAo?$AAB?$AAu?$AAs?$AAy?$AAP?$AAi?$AAp?$AAe?$AAL?$AAi?$AAs?$AAt?$AA?5?$AAw?$AAi?$AAt?$AAh?$AA?5?$AAE?$AAP?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AAd?$AAe@| DCB "A"
	DCB	0x0, "d", 0x0, "d", 0x0, "T", 0x0, "o", 0x0, "B", 0x0, "u"
	DCB	0x0, "s", 0x0, "y", 0x0, "P", 0x0, "i", 0x0, "p", 0x0, "e"
	DCB	0x0, "L", 0x0, "i", 0x0, "s", 0x0, "t", 0x0, " ", 0x0, "w"
	DCB	0x0, "i", 0x0, "t", 0x0, "h", 0x0, " ", 0x0, "E", 0x0, "P"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "d"
	DCB	0x0, "e", 0x0, "v", 0x0, "a", 0x0, "d", 0x0, "d", 0x0, "r"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GO@GIOMNAAN@?$AA?$CL?$AAC?$AAP?$AAi?$AAp?$AAe?$AA?3?$AA?3?$AAA?$AAd?$AAd?$AAT?$AAo?$AAB?$AAu?$AAs?$AAy?$AAP?$AAi?$AAp?$AAe?$AAL?$AAi?$AAs?$AAt?$AA?5?$AA?9?$AA?5?$AAn?$AAe?$AAw?$AA?5@| DCB "+"
	DCB	0x0, "C", 0x0, "P", 0x0, "i", 0x0, "p", 0x0, "e", 0x0, ":"
	DCB	0x0, ":", 0x0, "A", 0x0, "d", 0x0, "d", 0x0, "T", 0x0, "o"
	DCB	0x0, "B", 0x0, "u", 0x0, "s", 0x0, "y", 0x0, "P", 0x0, "i"
	DCB	0x0, "p", 0x0, "e", 0x0, "L", 0x0, "i", 0x0, "s", 0x0, "t"
	DCB	0x0, " ", 0x0, "-", 0x0, " ", 0x0, "n", 0x0, "e", 0x0, "w"
	DCB	0x0, " ", 0x0, "p", 0x0, "i", 0x0, "p", 0x0, "e", 0x0, "("
	DCB	0x0, "%", 0x0, "s", 0x0, ")", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "p", 0x0, "r"
	DCB	0x0, "i", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Odtp

  01118			 AREA	 |.text|, CODE, ARM

  01118		 |?AddToBusyPipeList@CBusyPipeList@@QAAHQAVCPipe@@H@Z| PROC ; CBusyPipeList::AddToBusyPipeList

; 433  : {

  01118		 |$LN52@AddToBusyP|
  01118	e1a0c00d	 mov         r12, sp
  0111c	e92d0007	 stmdb       sp!, {r0 - r2}
  01120	e92d5000	 stmdb       sp!, {r12, lr}
  01124	e24dd09c	 sub         sp, sp, #0x9C
  01128		 |$M44581|

; 434  :     DEBUGMSG( ZONE_PIPE, (TEXT("+CPipe::AddToBusyPipeList - new pipe(%s) 0x%x, pri %d\n"), pPipe->GetPipeType(), pPipe, fHighPriority ));    

  01128	e59f36c8	 ldr         r3, [pc, #0x6C8]
  0112c	e5933440	 ldr         r3, [r3, #0x440]
  01130	e3130080	 tst         r3, #0x80
  01134	0a00000f	 beq         |$LN28@AddToBusyP|
  01138	e59d30a8	 ldr         r3, [sp, #0xA8]
  0113c	e5933000	 ldr         r3, [r3]
  01140	e2833040	 add         r3, r3, #0x40
  01144	e59d00a8	 ldr         r0, [sp, #0xA8]
  01148	e5933000	 ldr         r3, [r3]
  0114c	e1a0e00f	 mov         lr, pc
  01150	e12fff13	 bx          r3
  01154	e58d0048	 str         r0, [sp, #0x48]
  01158	e59d30ac	 ldr         r3, [sp, #0xAC]
  0115c	e59d20a8	 ldr         r2, [sp, #0xA8]
  01160	e59d1048	 ldr         r1, [sp, #0x48]
  01164	e59f06b0	 ldr         r0, [pc, #0x6B0]
  01168	eb000000	 bl          NKDbgPrintfW
  0116c	e3a03001	 mov         r3, #1
  01170	e58d304c	 str         r3, [sp, #0x4C]
  01174	ea000001	 b           |$LN29@AddToBusyP|
  01178		 |$LN28@AddToBusyP|
  01178	e3a03000	 mov         r3, #0
  0117c	e58d304c	 str         r3, [sp, #0x4C]
  01180		 |$LN29@AddToBusyP|

; 435  :     PREFAST_DEBUGCHK( pPipe != NULL );

  01180	e59d30a8	 ldr         r3, [sp, #0xA8]
  01184	e3530000	 cmp         r3, #0
  01188	0a000002	 beq         |$LN30@AddToBusyP|
  0118c	e3a03001	 mov         r3, #1
  01190	e58d3050	 str         r3, [sp, #0x50]
  01194	ea000008	 b           |$LN31@AddToBusyP|
  01198		 |$LN30@AddToBusyP|
  01198	e3a03c01	 mov         r3, #1, 24
  0119c	e38330b3	 orr         r3, r3, #0xB3
  011a0	e59f2670	 ldr         r2, [pc, #0x670]
  011a4	e59f164c	 ldr         r1, [pc, #0x64C]
  011a8	e59f0664	 ldr         r0, [pc, #0x664]
  011ac	eb000000	 bl          NKDbgPrintfW
  011b0	e6000010	 __debugbreak_ce
  011b4	e3a03000	 mov         r3, #0
  011b8	e58d3050	 str         r3, [sp, #0x50]
  011bc		 |$LN31@AddToBusyP|

; 436  :     BOOL fSuccess = FALSE;

  011bc	e3a03000	 mov         r3, #0
  011c0	e58d3004	 str         r3, [sp, #4]

; 437  : 
; 438  :     // make sure there nothing on the pipe already (it only gets officially added after this function succeeds).
; 439  :     Lock();

  011c4	e59d00a4	 ldr         r0, [sp, #0xA4]
  011c8	eb000000	 bl          |?Lock@LockObject@@QAAXXZ|

; 440  : #ifdef DEBUG
; 441  : {
; 442  :     // make sure this pipe isn't already in the list. That should never happen.
; 443  :     // also check that our m_debug_numItemsOnBusyPipeList is correct
; 444  :     PPIPE_LIST_ELEMENT pBusy = m_pBusyPipeList;

  011cc	e59d30a4	 ldr         r3, [sp, #0xA4]
  011d0	e28330cc	 add         r3, r3, #0xCC
  011d4	e5933000	 ldr         r3, [r3]
  011d8	e58d301c	 str         r3, [sp, #0x1C]

; 445  :     int count = 0;

  011dc	e3a03000	 mov         r3, #0
  011e0	e58d3018	 str         r3, [sp, #0x18]
  011e4		 |$LN25@AddToBusyP|

; 446  :     while ( pBusy != NULL ) {

  011e4	e59d301c	 ldr         r3, [sp, #0x1C]
  011e8	e3530000	 cmp         r3, #0
  011ec	0a00001b	 beq         |$LN24@AddToBusyP|

; 447  :         DEBUGCHK( pBusy->pPipe != NULL &&
; 448  :                   pBusy->pPipe != pPipe );

  011f0	e59d301c	 ldr         r3, [sp, #0x1C]
  011f4	e5933000	 ldr         r3, [r3]
  011f8	e3530000	 cmp         r3, #0
  011fc	0a000007	 beq         |$LN32@AddToBusyP|
  01200	e59d301c	 ldr         r3, [sp, #0x1C]
  01204	e5932000	 ldr         r2, [r3]
  01208	e59d30a8	 ldr         r3, [sp, #0xA8]
  0120c	e1520003	 cmp         r2, r3
  01210	0a000002	 beq         |$LN32@AddToBusyP|
  01214	e3a03001	 mov         r3, #1
  01218	e58d3054	 str         r3, [sp, #0x54]
  0121c	ea000007	 b           |$LN33@AddToBusyP|
  01220		 |$LN32@AddToBusyP|
  01220	e3a03d07	 mov         r3, #7, 26
  01224	e59f25ec	 ldr         r2, [pc, #0x5EC]
  01228	e59f15c8	 ldr         r1, [pc, #0x5C8]
  0122c	e59f05e0	 ldr         r0, [pc, #0x5E0]
  01230	eb000000	 bl          NKDbgPrintfW
  01234	e6000010	 __debugbreak_ce
  01238	e3a03000	 mov         r3, #0
  0123c	e58d3054	 str         r3, [sp, #0x54]
  01240		 |$LN33@AddToBusyP|

; 449  :         pBusy = pBusy->pNext;

  01240	e59d301c	 ldr         r3, [sp, #0x1C]
  01244	e2833004	 add         r3, r3, #4
  01248	e5933000	 ldr         r3, [r3]
  0124c	e58d301c	 str         r3, [sp, #0x1C]

; 450  :         count++;

  01250	e59d3018	 ldr         r3, [sp, #0x18]
  01254	e2833001	 add         r3, r3, #1
  01258	e58d3018	 str         r3, [sp, #0x18]

; 451  :     }

  0125c	eaffffe0	 b           |$LN25@AddToBusyP|
  01260		 |$LN24@AddToBusyP|

; 452  :     DEBUGCHK( m_debug_numItemsOnBusyPipeList == count );

  01260	e59d30a4	 ldr         r3, [sp, #0xA4]
  01264	e28330d4	 add         r3, r3, #0xD4
  01268	e5932000	 ldr         r2, [r3]
  0126c	e59d3018	 ldr         r3, [sp, #0x18]
  01270	e1520003	 cmp         r2, r3
  01274	1a000002	 bne         |$LN34@AddToBusyP|
  01278	e3a03001	 mov         r3, #1
  0127c	e58d3058	 str         r3, [sp, #0x58]
  01280	ea000007	 b           |$LN35@AddToBusyP|
  01284		 |$LN34@AddToBusyP|
  01284	e3a03f71	 mov         r3, #0x71, 30
  01288	e59f2588	 ldr         r2, [pc, #0x588]
  0128c	e59f1564	 ldr         r1, [pc, #0x564]
  01290	e59f057c	 ldr         r0, [pc, #0x57C]
  01294	eb000000	 bl          NKDbgPrintfW
  01298	e6000010	 __debugbreak_ce
  0129c	e3a03000	 mov         r3, #0
  012a0	e58d3058	 str         r3, [sp, #0x58]
  012a4		 |$LN35@AddToBusyP|

; 453  : }
; 454  : #endif // DEBUG
; 455  :     
; 456  :     PPIPE_LIST_ELEMENT pNewBusyElement = new PIPE_LIST_ELEMENT;

  012a4	e3a00008	 mov         r0, #8
  012a8	eb000000	 bl          |??2@YAPAXI@Z|
  012ac	e58d005c	 str         r0, [sp, #0x5C]
  012b0	e59d305c	 ldr         r3, [sp, #0x5C]
  012b4	e58d3034	 str         r3, [sp, #0x34]
  012b8	e59d3034	 ldr         r3, [sp, #0x34]
  012bc	e58d300c	 str         r3, [sp, #0xC]

; 457  :     if ( pNewBusyElement != NULL ) {

  012c0	e59d300c	 ldr         r3, [sp, #0xC]
  012c4	e3530000	 cmp         r3, #0
  012c8	0a000034	 beq         |$LN23@AddToBusyP|

; 458  :         pNewBusyElement->pPipe = pPipe;

  012cc	e59d20a8	 ldr         r2, [sp, #0xA8]
  012d0	e59d300c	 ldr         r3, [sp, #0xC]
  012d4	e5832000	 str         r2, [r3]

; 459  :         if ( fHighPriority || m_pBusyPipeList == NULL ) {

  012d8	e59d30ac	 ldr         r3, [sp, #0xAC]
  012dc	e3530000	 cmp         r3, #0
  012e0	1a000004	 bne         |$LN21@AddToBusyP|
  012e4	e59d30a4	 ldr         r3, [sp, #0xA4]
  012e8	e28330cc	 add         r3, r3, #0xCC
  012ec	e5933000	 ldr         r3, [r3]
  012f0	e3530000	 cmp         r3, #0
  012f4	1a00000a	 bne         |$LN22@AddToBusyP|
  012f8		 |$LN21@AddToBusyP|

; 460  :             // add pipe to start of list
; 461  :             pNewBusyElement->pNext = m_pBusyPipeList;

  012f8	e59d30a4	 ldr         r3, [sp, #0xA4]
  012fc	e28310cc	 add         r1, r3, #0xCC
  01300	e59d300c	 ldr         r3, [sp, #0xC]
  01304	e2832004	 add         r2, r3, #4
  01308	e5913000	 ldr         r3, [r1]
  0130c	e5823000	 str         r3, [r2]

; 462  :             m_pBusyPipeList = pNewBusyElement;

  01310	e59d30a4	 ldr         r3, [sp, #0xA4]
  01314	e28320cc	 add         r2, r3, #0xCC
  01318	e59d300c	 ldr         r3, [sp, #0xC]
  0131c	e5823000	 str         r3, [r2]

; 463  :         } else {

  01320	ea000015	 b           |$LN20@AddToBusyP|
  01324		 |$LN22@AddToBusyP|

; 464  :             // add pipe to end of list
; 465  :             PPIPE_LIST_ELEMENT pLastElement = m_pBusyPipeList;

  01324	e59d30a4	 ldr         r3, [sp, #0xA4]
  01328	e28330cc	 add         r3, r3, #0xCC
  0132c	e5933000	 ldr         r3, [r3]
  01330	e58d3020	 str         r3, [sp, #0x20]
  01334		 |$LN19@AddToBusyP|

; 466  :             while ( pLastElement->pNext != NULL ) {

  01334	e59d3020	 ldr         r3, [sp, #0x20]
  01338	e2833004	 add         r3, r3, #4
  0133c	e5933000	 ldr         r3, [r3]
  01340	e3530000	 cmp         r3, #0
  01344	0a000004	 beq         |$LN18@AddToBusyP|

; 467  :                 pLastElement = pLastElement->pNext;

  01348	e59d3020	 ldr         r3, [sp, #0x20]
  0134c	e2833004	 add         r3, r3, #4
  01350	e5933000	 ldr         r3, [r3]
  01354	e58d3020	 str         r3, [sp, #0x20]

; 468  :             }

  01358	eafffff5	 b           |$LN19@AddToBusyP|
  0135c		 |$LN18@AddToBusyP|

; 469  :             pNewBusyElement->pNext = NULL;

  0135c	e59d300c	 ldr         r3, [sp, #0xC]
  01360	e2832004	 add         r2, r3, #4
  01364	e3a03000	 mov         r3, #0
  01368	e5823000	 str         r3, [r2]

; 470  :             pLastElement->pNext = pNewBusyElement;

  0136c	e59d3020	 ldr         r3, [sp, #0x20]
  01370	e2832004	 add         r2, r3, #4
  01374	e59d300c	 ldr         r3, [sp, #0xC]
  01378	e5823000	 str         r3, [r2]
  0137c		 |$LN20@AddToBusyP|

; 471  :         }
; 472  :         fSuccess = TRUE;

  0137c	e3a03001	 mov         r3, #1
  01380	e58d3004	 str         r3, [sp, #4]

; 473  :     #ifdef DEBUG
; 474  :         m_debug_numItemsOnBusyPipeList++;

  01384	e59d30a4	 ldr         r3, [sp, #0xA4]
  01388	e28330d4	 add         r3, r3, #0xD4
  0138c	e5933000	 ldr         r3, [r3]
  01390	e2832001	 add         r2, r3, #1
  01394	e59d30a4	 ldr         r3, [sp, #0xA4]
  01398	e28330d4	 add         r3, r3, #0xD4
  0139c	e5832000	 str         r2, [r3]
  013a0		 |$LN23@AddToBusyP|

; 475  :     #endif // DEBUG
; 476  :     }
; 477  : 
; 478  :     // Finally check if endpoint 0, register it.
; 479  :     USB_ENDPOINT_DESCRIPTOR endptDesc = pPipe->GetEndptDescriptor();

  013a0	e28d1010	 add         r1, sp, #0x10
  013a4	e59d00a8	 ldr         r0, [sp, #0xA8]
  013a8	eb000000	 bl          |?GetEndptDescriptor@CPipe@@QAA?AU_USB_ENDPOINT_DESCRIPTOR@@XZ|

; 480  :     UCHAR endpoint = USB_ENDPOINT(endptDesc.bEndpointAddress);

  013ac	e5dd3012	 ldrb        r3, [sp, #0x12]
  013b0	e203300f	 and         r3, r3, #0xF
  013b4	e20330ff	 and         r3, r3, #0xFF
  013b8	e5cd3008	 strb        r3, [sp, #8]

; 481  :         
; 482  :     if (endpoint == 0)

  013bc	e5dd3008	 ldrb        r3, [sp, #8]
  013c0	e3530000	 cmp         r3, #0
  013c4	1a0000e6	 bne         |$LN17@AddToBusyP|

; 483  :     {
; 484  : 
; 485  :         pPipe->SetMappedEndPoint(0);

  013c8	e3a01000	 mov         r1, #0
  013cc	e59d00a8	 ldr         r0, [sp, #0xA8]
  013d0	eb000000	 bl          |?SetMappedEndPoint@CPipe@@QAAXE@Z|

; 486  : 
; 487  :         DEBUGMSG(ZONE_PIPE|ZONE_DEBUG, (TEXT("AddToBusyPipeList with EP %d, devaddr %d\r\n"), endpoint, pPipe->GetReservedDeviceAddr()));

  013d4	e59f341c	 ldr         r3, [pc, #0x41C]
  013d8	e5933440	 ldr         r3, [r3, #0x440]
  013dc	e3130080	 tst         r3, #0x80
  013e0	0a000010	 beq         |$LN36@AddToBusyP|
  013e4	e59d30a8	 ldr         r3, [sp, #0xA8]
  013e8	e5933000	 ldr         r3, [r3]
  013ec	e2833028	 add         r3, r3, #0x28
  013f0	e59d00a8	 ldr         r0, [sp, #0xA8]
  013f4	e5933000	 ldr         r3, [r3]
  013f8	e1a0e00f	 mov         lr, pc
  013fc	e12fff13	 bx          r3
  01400	e5cd0060	 strb        r0, [sp, #0x60]
  01404	e5dd3060	 ldrb        r3, [sp, #0x60]
  01408	e1a02003	 mov         r2, r3
  0140c	e5dd3008	 ldrb        r3, [sp, #8]
  01410	e1a01003	 mov         r1, r3
  01414	e59f03f4	 ldr         r0, [pc, #0x3F4]
  01418	eb000000	 bl          NKDbgPrintfW
  0141c	e3a03001	 mov         r3, #1
  01420	e58d3064	 str         r3, [sp, #0x64]
  01424	ea000001	 b           |$LN37@AddToBusyP|
  01428		 |$LN36@AddToBusyP|
  01428	e3a03000	 mov         r3, #0
  0142c	e58d3064	 str         r3, [sp, #0x64]
  01430		 |$LN37@AddToBusyP|

; 488  :             
; 489  :         if (m_hEP0CheckForDoneTransfersEvent)

  01430	e59d30a4	 ldr         r3, [sp, #0xA4]
  01434	e28330bc	 add         r3, r3, #0xBC
  01438	e5933000	 ldr         r3, [r3]
  0143c	e3530000	 cmp         r3, #0
  01440	0a00005e	 beq         |$LN16@AddToBusyP|

; 490  :         {
; 491  :             if (m_PipeListInfoEP0CheckForDoneTransfersCount == NULL)

  01444	e59d30a4	 ldr         r3, [sp, #0xA4]
  01448	e28330c0	 add         r3, r3, #0xC0
  0144c	e5933000	 ldr         r3, [r3]
  01450	e3530000	 cmp         r3, #0
  01454	1a00000b	 bne         |$LN15@AddToBusyP|

; 492  :                 DEBUGMSG(ZONE_ERROR, (TEXT("CBusyPipeList::ERROR - EP Handle has been created but count is not\r\n")));

  01458	e59f3398	 ldr         r3, [pc, #0x398]
  0145c	e5933440	 ldr         r3, [r3, #0x440]
  01460	e3130901	 tst         r3, #1, 18
  01464	0a000004	 beq         |$LN38@AddToBusyP|
  01468	e59f039c	 ldr         r0, [pc, #0x39C]
  0146c	eb000000	 bl          NKDbgPrintfW
  01470	e3a03001	 mov         r3, #1
  01474	e58d3068	 str         r3, [sp, #0x68]
  01478	ea000001	 b           |$LN39@AddToBusyP|
  0147c		 |$LN38@AddToBusyP|
  0147c	e3a03000	 mov         r3, #0
  01480	e58d3068	 str         r3, [sp, #0x68]
  01484		 |$LN39@AddToBusyP|

; 493  :             else

  01484	ea00004c	 b           |$LN14@AddToBusyP|
  01488		 |$LN15@AddToBusyP|

; 494  :             {
; 495  :                 PPIPE_LIST_INFO pLast = NULL;

  01488	e3a03000	 mov         r3, #0
  0148c	e58d3030	 str         r3, [sp, #0x30]

; 496  :                 PPIPE_LIST_INFO pTemp = m_PipeListInfoEP0CheckForDoneTransfersCount;                

  01490	e59d30a4	 ldr         r3, [sp, #0xA4]
  01494	e28330c0	 add         r3, r3, #0xC0
  01498	e5933000	 ldr         r3, [r3]
  0149c	e58d302c	 str         r3, [sp, #0x2C]
  014a0		 |$LN13@AddToBusyP|

; 497  :                 while (pTemp != NULL)

  014a0	e59d302c	 ldr         r3, [sp, #0x2C]
  014a4	e3530000	 cmp         r3, #0
  014a8	0a00001e	 beq         |$LN12@AddToBusyP|

; 498  :                 {
; 499  :                     if (pTemp->deviceAddr == pPipe->GetReservedDeviceAddr())

  014ac	e59d30a8	 ldr         r3, [sp, #0xA8]
  014b0	e5933000	 ldr         r3, [r3]
  014b4	e2833028	 add         r3, r3, #0x28
  014b8	e59d00a8	 ldr         r0, [sp, #0xA8]
  014bc	e5933000	 ldr         r3, [r3]
  014c0	e1a0e00f	 mov         lr, pc
  014c4	e12fff13	 bx          r3
  014c8	e5cd006c	 strb        r0, [sp, #0x6C]
  014cc	e59d302c	 ldr         r3, [sp, #0x2C]
  014d0	e5d33000	 ldrb        r3, [r3]
  014d4	e1a02003	 mov         r2, r3
  014d8	e5dd306c	 ldrb        r3, [sp, #0x6C]
  014dc	e1520003	 cmp         r2, r3
  014e0	1a000009	 bne         |$LN11@AddToBusyP|

; 500  :                     {
; 501  :                         DEBUGMSG(1, (TEXT("Device EP %d has been added\r\n"), endpoint));

  014e4	e5dd3008	 ldrb        r3, [sp, #8]
  014e8	e1a01003	 mov         r1, r3
  014ec	e59f0314	 ldr         r0, [pc, #0x314]
  014f0	eb000000	 bl          NKDbgPrintfW
  014f4	e3a03001	 mov         r3, #1
  014f8	e58d3070	 str         r3, [sp, #0x70]
  014fc	ea000001	 b           |$LN41@AddToBusyP|
  01500	e3a03000	 mov         r3, #0
  01504	e58d3070	 str         r3, [sp, #0x70]
  01508		 |$LN41@AddToBusyP|

; 502  :                         break;

  01508	ea000006	 b           |$LN12@AddToBusyP|
  0150c		 |$LN11@AddToBusyP|

; 503  :                     }
; 504  :                     pLast = pTemp;

  0150c	e59d302c	 ldr         r3, [sp, #0x2C]
  01510	e58d3030	 str         r3, [sp, #0x30]

; 505  :                     pTemp = pTemp->pNext;

  01514	e59d302c	 ldr         r3, [sp, #0x2C]
  01518	e2833004	 add         r3, r3, #4
  0151c	e5933000	 ldr         r3, [r3]
  01520	e58d302c	 str         r3, [sp, #0x2C]

; 506  :                 }

  01524	eaffffdd	 b           |$LN13@AddToBusyP|
  01528		 |$LN12@AddToBusyP|

; 507  : 
; 508  :                 if (pTemp == NULL)

  01528	e59d302c	 ldr         r3, [sp, #0x2C]
  0152c	e3530000	 cmp         r3, #0
  01530	1a000021	 bne         |$LN10@AddToBusyP|

; 509  :                 {
; 510  :                     pTemp = new PIPE_LIST_INFO;

  01534	e3a00008	 mov         r0, #8
  01538	eb000000	 bl          |??2@YAPAXI@Z|
  0153c	e58d0074	 str         r0, [sp, #0x74]
  01540	e59d3074	 ldr         r3, [sp, #0x74]
  01544	e58d3038	 str         r3, [sp, #0x38]
  01548	e59d3038	 ldr         r3, [sp, #0x38]
  0154c	e58d302c	 str         r3, [sp, #0x2C]

; 511  :                     pTemp->deviceAddr = pPipe->GetReservedDeviceAddr();

  01550	e59d30a8	 ldr         r3, [sp, #0xA8]
  01554	e5933000	 ldr         r3, [r3]
  01558	e2833028	 add         r3, r3, #0x28
  0155c	e59d00a8	 ldr         r0, [sp, #0xA8]
  01560	e5933000	 ldr         r3, [r3]
  01564	e1a0e00f	 mov         lr, pc
  01568	e12fff13	 bx          r3
  0156c	e5cd0078	 strb        r0, [sp, #0x78]
  01570	e5dd2078	 ldrb        r2, [sp, #0x78]
  01574	e59d302c	 ldr         r3, [sp, #0x2C]
  01578	e5c32000	 strb        r2, [r3]

; 512  :                     pTemp->pNext = NULL;

  0157c	e59d302c	 ldr         r3, [sp, #0x2C]
  01580	e2832004	 add         r2, r3, #4
  01584	e3a03000	 mov         r3, #0
  01588	e5823000	 str         r3, [r2]

; 513  :                     if (pLast == NULL) // Head should not happen here, anyway.

  0158c	e59d3030	 ldr         r3, [sp, #0x30]
  01590	e3530000	 cmp         r3, #0
  01594	1a000004	 bne         |$LN9@AddToBusyP|

; 514  :                         m_PipeListInfoEP0CheckForDoneTransfersCount = pTemp;

  01598	e59d30a4	 ldr         r3, [sp, #0xA4]
  0159c	e28320c0	 add         r2, r3, #0xC0
  015a0	e59d302c	 ldr         r3, [sp, #0x2C]
  015a4	e5823000	 str         r3, [r2]

; 515  :                     else

  015a8	ea000003	 b           |$LN8@AddToBusyP|
  015ac		 |$LN9@AddToBusyP|

; 516  :                         pLast->pNext = pTemp;

  015ac	e59d3030	 ldr         r3, [sp, #0x30]
  015b0	e2832004	 add         r2, r3, #4
  015b4	e59d302c	 ldr         r3, [sp, #0x2C]
  015b8	e5823000	 str         r3, [r2]
  015bc		 |$LN8@AddToBusyP|
  015bc		 |$LN10@AddToBusyP|
  015bc		 |$LN14@AddToBusyP|

; 517  :                 }
; 518  :             }
; 519  :         }
; 520  :         else // if m_hEP0CheckForDoneTransfersEvent is not created yet

  015bc	ea000049	 b           |$LN7@AddToBusyP|
  015c0		 |$LN16@AddToBusyP|

; 521  :         {
; 522  :             m_hEP0CheckForDoneTransfersEvent = CreateEvent( NULL, FALSE, FALSE, NULL );  

  015c0	e3a03000	 mov         r3, #0
  015c4	e3a02000	 mov         r2, #0
  015c8	e3a01000	 mov         r1, #0
  015cc	e3a00000	 mov         r0, #0
  015d0	eb000000	 bl          CreateEventW
  015d4	e58d007c	 str         r0, [sp, #0x7C]
  015d8	e59d30a4	 ldr         r3, [sp, #0xA4]
  015dc	e28320bc	 add         r2, r3, #0xBC
  015e0	e59d307c	 ldr         r3, [sp, #0x7C]
  015e4	e5823000	 str         r3, [r2]

; 523  :             if (m_hEP0CheckForDoneTransfersEvent == NULL)

  015e8	e59d30a4	 ldr         r3, [sp, #0xA4]
  015ec	e28330bc	 add         r3, r3, #0xBC
  015f0	e5933000	 ldr         r3, [r3]
  015f4	e3530000	 cmp         r3, #0
  015f8	1a00000b	 bne         |$LN6@AddToBusyP|

; 524  :                 DEBUGMSG(ZONE_ERROR, (TEXT("CBusyPipeList- CreateEvent failure!!!\r\n")));

  015fc	e59f31f4	 ldr         r3, [pc, #0x1F4]
  01600	e5933440	 ldr         r3, [r3, #0x440]
  01604	e3130901	 tst         r3, #1, 18
  01608	0a000004	 beq         |$LN42@AddToBusyP|
  0160c	e59f01f0	 ldr         r0, [pc, #0x1F0]
  01610	eb000000	 bl          NKDbgPrintfW
  01614	e3a03001	 mov         r3, #1
  01618	e58d3080	 str         r3, [sp, #0x80]
  0161c	ea000001	 b           |$LN43@AddToBusyP|
  01620		 |$LN42@AddToBusyP|
  01620	e3a03000	 mov         r3, #0
  01624	e58d3080	 str         r3, [sp, #0x80]
  01628		 |$LN43@AddToBusyP|

; 525  :             else

  01628	ea00002e	 b           |$LN5@AddToBusyP|
  0162c		 |$LN6@AddToBusyP|

; 526  :             {
; 527  :                 if (m_PipeListInfoEP0CheckForDoneTransfersCount != NULL)

  0162c	e59d30a4	 ldr         r3, [sp, #0xA4]
  01630	e28330c0	 add         r3, r3, #0xC0
  01634	e5933000	 ldr         r3, [r3]
  01638	e3530000	 cmp         r3, #0
  0163c	0a00000d	 beq         |$LN4@AddToBusyP|

; 528  :                     DEBUGMSG(ZONE_ERROR, (TEXT("CBusyPipeList EP %d , index has orphan count\r\n"), 
; 529  :                         endpoint));

  01640	e59f31b0	 ldr         r3, [pc, #0x1B0]
  01644	e5933440	 ldr         r3, [r3, #0x440]
  01648	e3130901	 tst         r3, #1, 18
  0164c	0a000006	 beq         |$LN44@AddToBusyP|
  01650	e5dd3008	 ldrb        r3, [sp, #8]
  01654	e1a01003	 mov         r1, r3
  01658	e59f01a0	 ldr         r0, [pc, #0x1A0]
  0165c	eb000000	 bl          NKDbgPrintfW
  01660	e3a03001	 mov         r3, #1
  01664	e58d3084	 str         r3, [sp, #0x84]
  01668	ea000001	 b           |$LN45@AddToBusyP|
  0166c		 |$LN44@AddToBusyP|
  0166c	e3a03000	 mov         r3, #0
  01670	e58d3084	 str         r3, [sp, #0x84]
  01674		 |$LN45@AddToBusyP|

; 530  :                 else

  01674	ea00001b	 b           |$LN3@AddToBusyP|
  01678		 |$LN4@AddToBusyP|

; 531  :                 {
; 532  :                     m_PipeListInfoEP0CheckForDoneTransfersCount = new PIPE_LIST_INFO;

  01678	e3a00008	 mov         r0, #8
  0167c	eb000000	 bl          |??2@YAPAXI@Z|
  01680	e58d0088	 str         r0, [sp, #0x88]
  01684	e59d3088	 ldr         r3, [sp, #0x88]
  01688	e58d303c	 str         r3, [sp, #0x3C]
  0168c	e59d30a4	 ldr         r3, [sp, #0xA4]
  01690	e28320c0	 add         r2, r3, #0xC0
  01694	e59d303c	 ldr         r3, [sp, #0x3C]
  01698	e5823000	 str         r3, [r2]

; 533  :                     m_PipeListInfoEP0CheckForDoneTransfersCount->deviceAddr = pPipe->GetReservedDeviceAddr();

  0169c	e59d30a8	 ldr         r3, [sp, #0xA8]
  016a0	e5933000	 ldr         r3, [r3]
  016a4	e2833028	 add         r3, r3, #0x28
  016a8	e59d00a8	 ldr         r0, [sp, #0xA8]
  016ac	e5933000	 ldr         r3, [r3]
  016b0	e1a0e00f	 mov         lr, pc
  016b4	e12fff13	 bx          r3
  016b8	e5cd008c	 strb        r0, [sp, #0x8C]
  016bc	e59d30a4	 ldr         r3, [sp, #0xA4]
  016c0	e28330c0	 add         r3, r3, #0xC0
  016c4	e5932000	 ldr         r2, [r3]
  016c8	e5dd308c	 ldrb        r3, [sp, #0x8C]
  016cc	e5c23000	 strb        r3, [r2]

; 534  :                     m_PipeListInfoEP0CheckForDoneTransfersCount->pNext = NULL;

  016d0	e59d30a4	 ldr         r3, [sp, #0xA4]
  016d4	e28330c0	 add         r3, r3, #0xC0
  016d8	e5933000	 ldr         r3, [r3]
  016dc	e2832004	 add         r2, r3, #4
  016e0	e3a03000	 mov         r3, #0
  016e4	e5823000	 str         r3, [r2]
  016e8		 |$LN3@AddToBusyP|
  016e8		 |$LN5@AddToBusyP|
  016e8		 |$LN7@AddToBusyP|

; 535  :                 }
; 536  :             }
; 537  :         } // end the else case.
; 538  :         
; 539  : 
; 540  : #ifdef DEBUG
; 541  :         int count = 0;

  016e8	e3a03000	 mov         r3, #0
  016ec	e58d3024	 str         r3, [sp, #0x24]

; 542  :         PPIPE_LIST_INFO pList = m_PipeListInfoEP0CheckForDoneTransfersCount;

  016f0	e59d30a4	 ldr         r3, [sp, #0xA4]
  016f4	e28330c0	 add         r3, r3, #0xC0
  016f8	e5933000	 ldr         r3, [r3]
  016fc	e58d3028	 str         r3, [sp, #0x28]
  01700		 |$LN2@AddToBusyP|

; 543  :         while (pList != NULL)

  01700	e59d3028	 ldr         r3, [sp, #0x28]
  01704	e3530000	 cmp         r3, #0
  01708	0a000007	 beq         |$LN1@AddToBusyP|

; 544  :         {
; 545  :             count++;

  0170c	e59d3024	 ldr         r3, [sp, #0x24]
  01710	e2833001	 add         r3, r3, #1
  01714	e58d3024	 str         r3, [sp, #0x24]

; 546  :             pList = pList->pNext;

  01718	e59d3028	 ldr         r3, [sp, #0x28]
  0171c	e2833004	 add         r3, r3, #4
  01720	e5933000	 ldr         r3, [r3]
  01724	e58d3028	 str         r3, [sp, #0x28]

; 547  :         }

  01728	eafffff4	 b           |$LN2@AddToBusyP|
  0172c		 |$LN1@AddToBusyP|

; 548  : 
; 549  :         DEBUGMSG(ZONE_PIPE|ZONE_DEBUG, (TEXT("AddBusyPipeList leaving EP %d, count %d\r\n"),
; 550  :             endpoint, count));

  0172c	e59f30c4	 ldr         r3, [pc, #0xC4]
  01730	e5933440	 ldr         r3, [r3, #0x440]
  01734	e3130080	 tst         r3, #0x80
  01738	0a000007	 beq         |$LN46@AddToBusyP|
  0173c	e59d2024	 ldr         r2, [sp, #0x24]
  01740	e5dd3008	 ldrb        r3, [sp, #8]
  01744	e1a01003	 mov         r1, r3
  01748	e59f00ac	 ldr         r0, [pc, #0xAC]
  0174c	eb000000	 bl          NKDbgPrintfW
  01750	e3a03001	 mov         r3, #1
  01754	e58d3090	 str         r3, [sp, #0x90]
  01758	ea000001	 b           |$LN47@AddToBusyP|
  0175c		 |$LN46@AddToBusyP|
  0175c	e3a03000	 mov         r3, #0
  01760	e58d3090	 str         r3, [sp, #0x90]
  01764		 |$LN47@AddToBusyP|
  01764		 |$LN17@AddToBusyP|

; 551  : #endif
; 552  :     }  // if (endpoint == 0)
; 553  :     SetEvent(m_hUpdateEPEvent); 

  01764	e59d30a4	 ldr         r3, [sp, #0xA4]
  01768	e28330c4	 add         r3, r3, #0xC4
  0176c	e5930000	 ldr         r0, [r3]
  01770	eb000000	 bl          SetEvent

; 554  :     
; 555  :     Unlock();

  01774	e59d00a4	 ldr         r0, [sp, #0xA4]
  01778	eb000000	 bl          |?Unlock@LockObject@@QAAXXZ|

; 556  :     DEBUGMSG( ZONE_PIPE, (TEXT("-CPipe::AddToBusyPipeList - new pipe(%s) 0x%x, pri %d, returning BOOL %d\n"), pPipe->GetPipeType(), pPipe, fHighPriority, fSuccess) );    

  0177c	e59f3074	 ldr         r3, [pc, #0x74]
  01780	e5933440	 ldr         r3, [r3, #0x440]
  01784	e3130080	 tst         r3, #0x80
  01788	0a000011	 beq         |$LN48@AddToBusyP|
  0178c	e59d30a8	 ldr         r3, [sp, #0xA8]
  01790	e5933000	 ldr         r3, [r3]
  01794	e2833040	 add         r3, r3, #0x40
  01798	e59d00a8	 ldr         r0, [sp, #0xA8]
  0179c	e5933000	 ldr         r3, [r3]
  017a0	e1a0e00f	 mov         lr, pc
  017a4	e12fff13	 bx          r3
  017a8	e58d0094	 str         r0, [sp, #0x94]
  017ac	e59d3004	 ldr         r3, [sp, #4]
  017b0	e58d3000	 str         r3, [sp]
  017b4	e59d30ac	 ldr         r3, [sp, #0xAC]
  017b8	e59d20a8	 ldr         r2, [sp, #0xA8]
  017bc	e59d1094	 ldr         r1, [sp, #0x94]
  017c0	e59f002c	 ldr         r0, [pc, #0x2C]
  017c4	eb000000	 bl          NKDbgPrintfW
  017c8	e3a03001	 mov         r3, #1
  017cc	e58d3098	 str         r3, [sp, #0x98]
  017d0	ea000001	 b           |$LN49@AddToBusyP|
  017d4		 |$LN48@AddToBusyP|
  017d4	e3a03000	 mov         r3, #0
  017d8	e58d3098	 str         r3, [sp, #0x98]
  017dc		 |$LN49@AddToBusyP|

; 557  :     return fSuccess;

  017dc	e59d3004	 ldr         r3, [sp, #4]
  017e0	e58d3044	 str         r3, [sp, #0x44]

; 558  : }

  017e4	e59d0044	 ldr         r0, [sp, #0x44]
  017e8	e28dd09c	 add         sp, sp, #0x9C
  017ec	e89d6000	 ldmia       sp, {sp, lr}
  017f0	e12fff1e	 bx          lr
  017f4		 |$LN53@AddToBusyP|
  017f4		 |$LN54@AddToBusyP|
  017f4	00000000	 DCD         |??_C@_1JE@HACIKLJN@?$AA?9?$AAC?$AAP?$AAi?$AAp?$AAe?$AA?3?$AA?3?$AAA?$AAd?$AAd?$AAT?$AAo?$AAB?$AAu?$AAs?$AAy?$AAP?$AAi?$AAp?$AAe?$AAL?$AAi?$AAs?$AAt?$AA?5?$AA?9?$AA?5?$AAn?$AAe?$AAw?$AA?5@|
  017f8		 |$LN55@AddToBusyP|
  017f8	00000000	 DCD         |dpCurSettings|
  017fc		 |$LN56@AddToBusyP|
  017fc	00000000	 DCD         |??_C@_1FE@GAOFKIHD@?$AAA?$AAd?$AAd?$AAB?$AAu?$AAs?$AAy?$AAP?$AAi?$AAp?$AAe?$AAL?$AAi?$AAs?$AAt?$AA?5?$AAl?$AAe?$AAa?$AAv?$AAi?$AAn?$AAg?$AA?5?$AAE?$AAP?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AAc@|
  01800		 |$LN57@AddToBusyP|
  01800	00000000	 DCD         |??_C@_1FO@GFHDEABA@?$AAC?$AAB?$AAu?$AAs?$AAy?$AAP?$AAi?$AAp?$AAe?$AAL?$AAi?$AAs?$AAt?$AA?5?$AAE?$AAP?$AA?5?$AA?$CF?$AAd?$AA?5?$AA?0?$AA?5?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AAh?$AAa?$AAs?$AA?5@|
  01804		 |$LN58@AddToBusyP|
  01804	00000000	 DCD         |??_C@_1FA@FBAOJCJF@?$AAC?$AAB?$AAu?$AAs?$AAy?$AAP?$AAi?$AAp?$AAe?$AAL?$AAi?$AAs?$AAt?$AA?9?$AA?5?$AAC?$AAr?$AAe?$AAa?$AAt?$AAe?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAu@|
  01808		 |$LN59@AddToBusyP|
  01808	00000000	 DCD         |??_C@_1DM@CNDIBALH@?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAE?$AAP?$AA?5?$AA?$CF?$AAd?$AA?5?$AAh?$AAa?$AAs?$AA?5?$AAb?$AAe?$AAe?$AAn?$AA?5?$AAa?$AAd?$AAd?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  0180c		 |$LN60@AddToBusyP|
  0180c	00000000	 DCD         |??_C@_1IK@EGDMDFJN@?$AAC?$AAB?$AAu?$AAs?$AAy?$AAP?$AAi?$AAp?$AAe?$AAL?$AAi?$AAs?$AAt?$AA?3?$AA?3?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AA?9?$AA?5?$AAE?$AAP?$AA?5?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe@|
  01810		 |$LN61@AddToBusyP|
  01810	00000000	 DCD         |??_C@_1FG@IEGGHBLE@?$AAA?$AAd?$AAd?$AAT?$AAo?$AAB?$AAu?$AAs?$AAy?$AAP?$AAi?$AAp?$AAe?$AAL?$AAi?$AAs?$AAt?$AA?5?$AAw?$AAi?$AAt?$AAh?$AA?5?$AAE?$AAP?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AAd?$AAe@|
  01814		 |$LN62@AddToBusyP|
  01814	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  01818		 |$LN63@AddToBusyP|
  01818	00000000	 DCD         |??_C@_1LG@MDHHEHIE@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  0181c		 |$LN64@AddToBusyP|
  0181c	00000000	 DCD         |??_C@_1GO@GIOMNAAN@?$AA?$CL?$AAC?$AAP?$AAi?$AAp?$AAe?$AA?3?$AA?3?$AAA?$AAd?$AAd?$AAT?$AAo?$AAB?$AAu?$AAs?$AAy?$AAP?$AAi?$AAp?$AAe?$AAL?$AAi?$AAs?$AAt?$AA?5?$AA?9?$AA?5?$AAn?$AAe?$AAw?$AA?5@|
  01820		 |$M44582|

			 ENDP  ; |?AddToBusyPipeList@CBusyPipeList@@QAAHQAVCPipe@@H@Z|, CBusyPipeList::AddToBusyPipeList

; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\musb\musbhcd\musbmhdrc\cpipe.h

  00000			 AREA	 |.pdata|, PDATA
|$T44601| DCD	|$LN5@SetMappedE|
	DCD	0x40000903
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetMappedEndPoint@CPipe@@QAAXE@Z| PROC ; CPipe::SetMappedEndPoint

; 104  :     void    SetMappedEndPoint(UCHAR mappedEP) { m_mappedEndpoint = mappedEP;};

  00000		 |$LN5@SetMappedE|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M44598|
  0000c	e59d3008	 ldr         r3, [sp, #8]
  00010	e2832058	 add         r2, r3, #0x58
  00014	e5dd300c	 ldrb        r3, [sp, #0xC]
  00018	e5c23000	 strb        r3, [r2]
  0001c	e89d6000	 ldmia       sp, {sp, lr}
  00020	e12fff1e	 bx          lr
  00024		 |$M44599|

			 ENDP  ; |?SetMappedEndPoint@CPipe@@QAAXE@Z|, CPipe::SetMappedEndPoint

	EXPORT	|??_C@_1DK@NDCEEEDC@?$AAS?$AAi?$AAg?$AAn?$AAa?$AAl?$AA?5?$AAD?$AAi?$AAs?$AAc?$AAo?$AAn?$AAn?$AAe?$AAc?$AAt?$AA?5?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAe?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|?SignalDisconnectComplete@CBusyPipeList@@QAAHPAX@Z| ; CBusyPipeList::SignalDisconnectComplete

  00040			 AREA	 |.pdata|, PDATA
|$T44611| DCD	|$LN8@SignalDisc|
	DCD	0x40003704
; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\musb\musbhcd\musbmhdrc\chw.cpp

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DK@NDCEEEDC@?$AAS?$AAi?$AAg?$AAn?$AAa?$AAl?$AA?5?$AAD?$AAi?$AAs?$AAc?$AAo?$AAn?$AAn?$AAe?$AAc?$AAt?$AA?5?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAe?$AA?$AN?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "i", 0x0, "g", 0x0, "n", 0x0, "a", 0x0, "l", 0x0, " "
	DCB	0x0, "D", 0x0, "i", 0x0, "s", 0x0, "c", 0x0, "o", 0x0, "n"
	DCB	0x0, "n", 0x0, "e", 0x0, "c", 0x0, "t", 0x0, " ", 0x0, "C"
	DCB	0x0, "o", 0x0, "m", 0x0, "p", 0x0, "l", 0x0, "e", 0x0, "t"
	DCB	0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  01820			 AREA	 |.text|, CODE, ARM

  01820		 |?SignalDisconnectComplete@CBusyPipeList@@QAAHPAX@Z| PROC ; CBusyPipeList::SignalDisconnectComplete

; 568  : {

  01820		 |$LN8@SignalDisc|
  01820	e1a0c00d	 mov         r12, sp
  01824	e92d0003	 stmdb       sp!, {r0, r1}
  01828	e92d5000	 stmdb       sp!, {r12, lr}
  0182c	e24dd00c	 sub         sp, sp, #0xC
  01830		 |$M44608|

; 569  :     PHSMUSB_T pOTG = (PHSMUSB_T)(pContext);

  01830	e59d3018	 ldr         r3, [sp, #0x18]
  01834	e58d3000	 str         r3, [sp]

; 570  :     
; 571  :     if ((m_pBusyPipeList == NULL) && (m_PipeListInfoEP0CheckForDoneTransfersCount == NULL) && (!m_SignalDisconnectACK))

  01838	e59d3014	 ldr         r3, [sp, #0x14]
  0183c	e28330cc	 add         r3, r3, #0xCC
  01840	e5933000	 ldr         r3, [r3]
  01844	e3530000	 cmp         r3, #0
  01848	1a000024	 bne         |$LN1@SignalDisc|
  0184c	e59d3014	 ldr         r3, [sp, #0x14]
  01850	e28330c0	 add         r3, r3, #0xC0
  01854	e5933000	 ldr         r3, [r3]
  01858	e3530000	 cmp         r3, #0
  0185c	1a00001f	 bne         |$LN1@SignalDisc|
  01860	e59d3014	 ldr         r3, [sp, #0x14]
  01864	e28330d0	 add         r3, r3, #0xD0
  01868	e5933000	 ldr         r3, [r3]
  0186c	e3530000	 cmp         r3, #0
  01870	1a00001a	 bne         |$LN1@SignalDisc|

; 572  :     {
; 573  :         {
; 574  :             m_SignalDisconnectACK = TRUE;        

  01874	e59d3014	 ldr         r3, [sp, #0x14]
  01878	e28320d0	 add         r2, r3, #0xD0
  0187c	e3a03001	 mov         r3, #1
  01880	e5823000	 str         r3, [r2]

; 575  :             pOTG->connect_status |= CONN_DC;

  01884	e59d3000	 ldr         r3, [sp]
  01888	e283304c	 add         r3, r3, #0x4C
  0188c	e5d33000	 ldrb        r3, [r3]
  01890	e3831004	 orr         r1, r3, #4
  01894	e59d3000	 ldr         r3, [sp]
  01898	e283204c	 add         r2, r3, #0x4C
  0189c	e20130ff	 and         r3, r1, #0xFF
  018a0	e5c23000	 strb        r3, [r2]

; 576  :             DEBUGMSG(ZONE_DEBUG, (TEXT("Signal Disconnect Complete\r\n")));

  018a4	ea000004	 b           |$LN4@SignalDisc|
  018a8	e59f0048	 ldr         r0, [pc, #0x48]
  018ac	eb000000	 bl          NKDbgPrintfW
  018b0	e3a03001	 mov         r3, #1
  018b4	e58d3008	 str         r3, [sp, #8]
  018b8	ea000001	 b           |$LN5@SignalDisc|
  018bc		 |$LN4@SignalDisc|
  018bc	e3a03000	 mov         r3, #0
  018c0	e58d3008	 str         r3, [sp, #8]
  018c4		 |$LN5@SignalDisc|

; 577  :             SetEvent(pOTG->hSysIntrEvent);

  018c4	e59d3000	 ldr         r3, [sp]
  018c8	e2833054	 add         r3, r3, #0x54
  018cc	e5930000	 ldr         r0, [r3]
  018d0	eb000000	 bl          SetEvent

; 578  :             return TRUE;

  018d4	e3a03001	 mov         r3, #1
  018d8	e58d3004	 str         r3, [sp, #4]
  018dc	ea000001	 b           |$LN2@SignalDisc|
  018e0		 |$LN1@SignalDisc|

; 579  :         }
; 580  :     }
; 581  : 
; 582  :     return FALSE;

  018e0	e3a03000	 mov         r3, #0
  018e4	e58d3004	 str         r3, [sp, #4]
  018e8		 |$LN2@SignalDisc|

; 583  : }

  018e8	e59d0004	 ldr         r0, [sp, #4]
  018ec	e28dd00c	 add         sp, sp, #0xC
  018f0	e89d6000	 ldmia       sp, {sp, lr}
  018f4	e12fff1e	 bx          lr
  018f8		 |$LN9@SignalDisc|
  018f8		 |$LN10@SignalDisc|
  018f8	00000000	 DCD         |??_C@_1DK@NDCEEEDC@?$AAS?$AAi?$AAg?$AAn?$AAa?$AAl?$AA?5?$AAD?$AAi?$AAs?$AAc?$AAo?$AAn?$AAn?$AAe?$AAc?$AAt?$AA?5?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAe?$AA?$AN?$AA?6?$AA?$AA@|
  018fc		 |$M44609|

			 ENDP  ; |?SignalDisconnectComplete@CBusyPipeList@@QAAHPAX@Z|, CBusyPipeList::SignalDisconnectComplete

	EXPORT	|??_C@_1II@EJJGOKNM@?$AA?9?$AAC?$AAP?$AAi?$AAp?$AAe?$AA?3?$AA?3?$AAR?$AAe?$AAm?$AAo?$AAv?$AAe?$AAF?$AAr?$AAo?$AAm?$AAB?$AAu?$AAs?$AAy?$AAP?$AAi?$AAp?$AAe?$AAL?$AAi?$AAs?$AAt?$AA?0?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GO@FIBOHGHG@?$AA?9?$AAC?$AAP?$AAi?$AAp?$AAe?$AA?3?$AA?3?$AAR?$AAe?$AAm?$AAo?$AAv?$AAe?$AAF?$AAr?$AAo?$AAm?$AAB?$AAu?$AAs?$AAy?$AAP?$AAi?$AAp?$AAe?$AAL?$AAi?$AAs?$AAt?$AA?0?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EM@EAPCEMMD@?$AAR?$AAe?$AAm?$AAo?$AAv?$AAe?$AAF?$AAr?$AAo?$AAm?$AAB?$AAu?$AAs?$AAy?$AAP?$AAi?$AAp?$AAe?$AAL?$AAi?$AAs?$AAt?$AA?3?$AA?5?$AAR?$AAe?$AAl?$AAe?$AAa?$AAs?$AAe?$AA?5@| [ DATA ] ; `string'
	EXPORT	|?ReleasePhysicalEndPoint@CHW@@QAAHPAVCPipe@@HH@Z| ; CHW::ReleasePhysicalEndPoint
	EXPORT	|?ReleaseDMAChannel@CHW@@QAAHPAVCPipe@@E@Z| ; CHW::ReleaseDMAChannel
	EXPORT	|?DeviceInfo2Channel@CHW@@QAAEPAVCPipe@@@Z| ; CHW::DeviceInfo2Channel
	EXPORT	|??_C@_1FK@BDFKKKJB@?$AAR?$AAe?$AAm?$AAo?$AAv?$AAe?$AAB?$AAu?$AAs?$AAy?$AAP?$AAi?$AAp?$AAe?$AAL?$AAi?$AAs?$AAt?$AA?5?$AAl?$AAe?$AAa?$AAv?$AAi?$AAn?$AAg?$AA?5?$AAE?$AAP?$AA?5?$AA?$CF?$AAd@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EA@IGJIIECK@?$AAR?$AAe?$AAm?$AAo?$AAv?$AAe?$AAB?$AAu?$AAs?$AAy?$AAP?$AAi?$AAp?$AAe?$AAL?$AAi?$AAs?$AAt?$AA?5?$AAc?$AAl?$AAe?$AAa?$AAn?$AA?5?$AAE?$AAP?$AA?5?$AA0?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EO@KNHALPPJ@?$AAR?$AAe?$AAm?$AAo?$AAv?$AAe?$AAB?$AAu?$AAs?$AAy?$AAP?$AAi?$AAp?$AAe?$AAL?$AAi?$AAs?$AAt?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAE?$AAP?$AA?5?$AA?$CF?$AAd?$AA?5?$AA?5?$AA?9?$AAc@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FK@EGINPODO@?$AAW?$AAa?$AAr?$AAn?$AAi?$AAn?$AAg?$AA?$CB?$AA?5?$AAN?$AAo?$AAt?$AA?5?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAf?$AAi?$AAn?$AAd?$AA?5?$AAE?$AAP?$AA?5?$AA?$CF?$AAd?$AA?0@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FE@EGNIIPLM@?$AAR?$AAe?$AAm?$AAo?$AAv?$AAe?$AAF?$AAr?$AAo?$AAm?$AAB?$AAu?$AAs?$AAy?$AAP?$AAi?$AAp?$AAe?$AAL?$AAi?$AAs?$AAt?$AA?5?$AAf?$AAo?$AAu?$AAn?$AAd?$AA?5?$AAt?$AAh?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GA@FEGEHGAJ@?$AA?$CL?$AAC?$AAP?$AAi?$AAp?$AAe?$AA?3?$AA?3?$AAR?$AAe?$AAm?$AAo?$AAv?$AAe?$AAF?$AAr?$AAo?$AAm?$AAB?$AAu?$AAs?$AAy?$AAP?$AAi?$AAp?$AAe?$AAL?$AAi?$AAs?$AAt?$AA?5?$AA?9@| [ DATA ] ; `string'
	EXPORT	|?RemoveFromBusyPipeList@CBusyPipeList@@QAAXQAVCPipe@@@Z| ; CBusyPipeList::RemoveFromBusyPipeList

  00048			 AREA	 |.pdata|, PDATA
|$T44649| DCD	|$LN53@RemoveFrom|
	DCD	0x4001e104

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1II@EJJGOKNM@?$AA?9?$AAC?$AAP?$AAi?$AAp?$AAe?$AA?3?$AA?3?$AAR?$AAe?$AAm?$AAo?$AAv?$AAe?$AAF?$AAr?$AAo?$AAm?$AAB?$AAu?$AAs?$AAy?$AAP?$AAi?$AAp?$AAe?$AAL?$AAi?$AAs?$AAt?$AA?0?$AA?5@| DCB "-"
	DCB	0x0, "C", 0x0, "P", 0x0, "i", 0x0, "p", 0x0, "e", 0x0, ":"
	DCB	0x0, ":", 0x0, "R", 0x0, "e", 0x0, "m", 0x0, "o", 0x0, "v"
	DCB	0x0, "e", 0x0, "F", 0x0, "r", 0x0, "o", 0x0, "m", 0x0, "B"
	DCB	0x0, "u", 0x0, "s", 0x0, "y", 0x0, "P", 0x0, "i", 0x0, "p"
	DCB	0x0, "e", 0x0, "L", 0x0, "i", 0x0, "s", 0x0, "t", 0x0, ","
	DCB	0x0, " ", 0x0, "p", 0x0, "i", 0x0, "p", 0x0, "e", 0x0, "("
	DCB	0x0, "%", 0x0, "s", 0x0, ")", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "x", 0x0, " ", 0x0, "w", 0x0, "a", 0x0, "s"
	DCB	0x0, " ", 0x0, "n", 0x0, "o", 0x0, "t", 0x0, " ", 0x0, "o"
	DCB	0x0, "n", 0x0, " ", 0x0, "b", 0x0, "u", 0x0, "s", 0x0, "y"
	DCB	0x0, " ", 0x0, "l", 0x0, "i", 0x0, "s", 0x0, "t", 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GO@FIBOHGHG@?$AA?9?$AAC?$AAP?$AAi?$AAp?$AAe?$AA?3?$AA?3?$AAR?$AAe?$AAm?$AAo?$AAv?$AAe?$AAF?$AAr?$AAo?$AAm?$AAB?$AAu?$AAs?$AAy?$AAP?$AAi?$AAp?$AAe?$AAL?$AAi?$AAs?$AAt?$AA?0?$AA?5@| DCB "-"
	DCB	0x0, "C", 0x0, "P", 0x0, "i", 0x0, "p", 0x0, "e", 0x0, ":"
	DCB	0x0, ":", 0x0, "R", 0x0, "e", 0x0, "m", 0x0, "o", 0x0, "v"
	DCB	0x0, "e", 0x0, "F", 0x0, "r", 0x0, "o", 0x0, "m", 0x0, "B"
	DCB	0x0, "u", 0x0, "s", 0x0, "y", 0x0, "P", 0x0, "i", 0x0, "p"
	DCB	0x0, "e", 0x0, "L", 0x0, "i", 0x0, "s", 0x0, "t", 0x0, ","
	DCB	0x0, " ", 0x0, "r", 0x0, "e", 0x0, "m", 0x0, "o", 0x0, "v"
	DCB	0x0, "e", 0x0, "d", 0x0, " ", 0x0, "p", 0x0, "i", 0x0, "p"
	DCB	0x0, "e", 0x0, "(", 0x0, "%", 0x0, "s", 0x0, ")", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EM@EAPCEMMD@?$AAR?$AAe?$AAm?$AAo?$AAv?$AAe?$AAF?$AAr?$AAo?$AAm?$AAB?$AAu?$AAs?$AAy?$AAP?$AAi?$AAp?$AAe?$AAL?$AAi?$AAs?$AAt?$AA?3?$AA?5?$AAR?$AAe?$AAl?$AAe?$AAa?$AAs?$AAe?$AA?5@| DCB "R"
	DCB	0x0, "e", 0x0, "m", 0x0, "o", 0x0, "v", 0x0, "e", 0x0, "F"
	DCB	0x0, "r", 0x0, "o", 0x0, "m", 0x0, "B", 0x0, "u", 0x0, "s"
	DCB	0x0, "y", 0x0, "P", 0x0, "i", 0x0, "p", 0x0, "e", 0x0, "L"
	DCB	0x0, "i", 0x0, "s", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "R"
	DCB	0x0, "e", 0x0, "l", 0x0, "e", 0x0, "a", 0x0, "s", 0x0, "e"
	DCB	0x0, " ", 0x0, "a", 0x0, "l", 0x0, "l", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FK@BDFKKKJB@?$AAR?$AAe?$AAm?$AAo?$AAv?$AAe?$AAB?$AAu?$AAs?$AAy?$AAP?$AAi?$AAp?$AAe?$AAL?$AAi?$AAs?$AAt?$AA?5?$AAl?$AAe?$AAa?$AAv?$AAi?$AAn?$AAg?$AA?5?$AAE?$AAP?$AA?5?$AA?$CF?$AAd@| DCB "R"
	DCB	0x0, "e", 0x0, "m", 0x0, "o", 0x0, "v", 0x0, "e", 0x0, "B"
	DCB	0x0, "u", 0x0, "s", 0x0, "y", 0x0, "P", 0x0, "i", 0x0, "p"
	DCB	0x0, "e", 0x0, "L", 0x0, "i", 0x0, "s", 0x0, "t", 0x0, " "
	DCB	0x0, "l", 0x0, "e", 0x0, "a", 0x0, "v", 0x0, "i", 0x0, "n"
	DCB	0x0, "g", 0x0, " ", 0x0, "E", 0x0, "P", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, ",", 0x0, " ", 0x0, "c", 0x0, "o", 0x0, "u"
	DCB	0x0, "n", 0x0, "t", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@IGJIIECK@?$AAR?$AAe?$AAm?$AAo?$AAv?$AAe?$AAB?$AAu?$AAs?$AAy?$AAP?$AAi?$AAp?$AAe?$AAL?$AAi?$AAs?$AAt?$AA?5?$AAc?$AAl?$AAe?$AAa?$AAn?$AA?5?$AAE?$AAP?$AA?5?$AA0?$AA?$AN?$AA?6?$AA?$AA@| DCB "R"
	DCB	0x0, "e", 0x0, "m", 0x0, "o", 0x0, "v", 0x0, "e", 0x0, "B"
	DCB	0x0, "u", 0x0, "s", 0x0, "y", 0x0, "P", 0x0, "i", 0x0, "p"
	DCB	0x0, "e", 0x0, "L", 0x0, "i", 0x0, "s", 0x0, "t", 0x0, " "
	DCB	0x0, "c", 0x0, "l", 0x0, "e", 0x0, "a", 0x0, "n", 0x0, " "
	DCB	0x0, "E", 0x0, "P", 0x0, " ", 0x0, "0", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EO@KNHALPPJ@?$AAR?$AAe?$AAm?$AAo?$AAv?$AAe?$AAB?$AAu?$AAs?$AAy?$AAP?$AAi?$AAp?$AAe?$AAL?$AAi?$AAs?$AAt?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAE?$AAP?$AA?5?$AA?$CF?$AAd?$AA?5?$AA?5?$AA?9?$AAc@| DCB "R"
	DCB	0x0, "e", 0x0, "m", 0x0, "o", 0x0, "v", 0x0, "e", 0x0, "B"
	DCB	0x0, "u", 0x0, "s", 0x0, "y", 0x0, "P", 0x0, "i", 0x0, "p"
	DCB	0x0, "e", 0x0, "L", 0x0, "i", 0x0, "s", 0x0, "t", 0x0, " "
	DCB	0x0, "f", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "E", 0x0, "P"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, " ", 0x0, "-"
	DCB	0x0, "c", 0x0, "l", 0x0, "e", 0x0, "a", 0x0, "r", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FK@EGINPODO@?$AAW?$AAa?$AAr?$AAn?$AAi?$AAn?$AAg?$AA?$CB?$AA?5?$AAN?$AAo?$AAt?$AA?5?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAf?$AAi?$AAn?$AAd?$AA?5?$AAE?$AAP?$AA?5?$AA?$CF?$AAd?$AA?0@| DCB "W"
	DCB	0x0, "a", 0x0, "r", 0x0, "n", 0x0, "i", 0x0, "n", 0x0, "g"
	DCB	0x0, "!", 0x0, " ", 0x0, "N", 0x0, "o", 0x0, "t", 0x0, " "
	DCB	0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, " ", 0x0, "t"
	DCB	0x0, "o", 0x0, " ", 0x0, "f", 0x0, "i", 0x0, "n", 0x0, "d"
	DCB	0x0, " ", 0x0, "E", 0x0, "P", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, ",", 0x0, "D", 0x0, "e", 0x0, "v", 0x0, "A", 0x0, "d"
	DCB	0x0, "d", 0x0, "r", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FE@EGNIIPLM@?$AAR?$AAe?$AAm?$AAo?$AAv?$AAe?$AAF?$AAr?$AAo?$AAm?$AAB?$AAu?$AAs?$AAy?$AAP?$AAi?$AAp?$AAe?$AAL?$AAi?$AAs?$AAt?$AA?5?$AAf?$AAo?$AAu?$AAn?$AAd?$AA?5?$AAt?$AAh?$AAe@| DCB "R"
	DCB	0x0, "e", 0x0, "m", 0x0, "o", 0x0, "v", 0x0, "e", 0x0, "F"
	DCB	0x0, "r", 0x0, "o", 0x0, "m", 0x0, "B", 0x0, "u", 0x0, "s"
	DCB	0x0, "y", 0x0, "P", 0x0, "i", 0x0, "p", 0x0, "e", 0x0, "L"
	DCB	0x0, "i", 0x0, "s", 0x0, "t", 0x0, " ", 0x0, "f", 0x0, "o"
	DCB	0x0, "u", 0x0, "n", 0x0, "d", 0x0, " ", 0x0, "t", 0x0, "h"
	DCB	0x0, "e", 0x0, " ", 0x0, "d", 0x0, "e", 0x0, "v", 0x0, "i"
	DCB	0x0, "c", 0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GA@FEGEHGAJ@?$AA?$CL?$AAC?$AAP?$AAi?$AAp?$AAe?$AA?3?$AA?3?$AAR?$AAe?$AAm?$AAo?$AAv?$AAe?$AAF?$AAr?$AAo?$AAm?$AAB?$AAu?$AAs?$AAy?$AAP?$AAi?$AAp?$AAe?$AAL?$AAi?$AAs?$AAt?$AA?5?$AA?9@| DCB "+"
	DCB	0x0, "C", 0x0, "P", 0x0, "i", 0x0, "p", 0x0, "e", 0x0, ":"
	DCB	0x0, ":", 0x0, "R", 0x0, "e", 0x0, "m", 0x0, "o", 0x0, "v"
	DCB	0x0, "e", 0x0, "F", 0x0, "r", 0x0, "o", 0x0, "m", 0x0, "B"
	DCB	0x0, "u", 0x0, "s", 0x0, "y", 0x0, "P", 0x0, "i", 0x0, "p"
	DCB	0x0, "e", 0x0, "L", 0x0, "i", 0x0, "s", 0x0, "t", 0x0, " "
	DCB	0x0, "-", 0x0, " ", 0x0, "p", 0x0, "i", 0x0, "p", 0x0, "e"
	DCB	0x0, "(", 0x0, "%", 0x0, "s", 0x0, ")", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  018fc			 AREA	 |.text|, CODE, ARM

  018fc		 |?RemoveFromBusyPipeList@CBusyPipeList@@QAAXQAVCPipe@@@Z| PROC ; CBusyPipeList::RemoveFromBusyPipeList

; 599  : {

  018fc		 |$LN53@RemoveFrom|
  018fc	e1a0c00d	 mov         r12, sp
  01900	e92d0003	 stmdb       sp!, {r0, r1}
  01904	e92d5000	 stmdb       sp!, {r12, lr}
  01908	e24dd094	 sub         sp, sp, #0x94
  0190c		 |$M44646|

; 600  :     DEBUGMSG( ZONE_PIPE && ZONE_VERBOSE, (TEXT("+CPipe::RemoveFromBusyPipeList - pipe(%s) 0x%x\n"), pPipe->GetPipeType(), pPipe ) );    

  0190c	e59f3740	 ldr         r3, [pc, #0x740]
  01910	e5933440	 ldr         r3, [r3, #0x440]
  01914	e3130080	 tst         r3, #0x80
  01918	0a000012	 beq         |$LN23@RemoveFrom|
  0191c	e59f3730	 ldr         r3, [pc, #0x730]
  01920	e5933440	 ldr         r3, [r3, #0x440]
  01924	e3130a01	 tst         r3, #1, 20
  01928	0a00000e	 beq         |$LN23@RemoveFrom|
  0192c	e59d30a0	 ldr         r3, [sp, #0xA0]
  01930	e5933000	 ldr         r3, [r3]
  01934	e2833040	 add         r3, r3, #0x40
  01938	e59d00a0	 ldr         r0, [sp, #0xA0]
  0193c	e5933000	 ldr         r3, [r3]
  01940	e1a0e00f	 mov         lr, pc
  01944	e12fff13	 bx          r3
  01948	e58d0044	 str         r0, [sp, #0x44]
  0194c	e59d20a0	 ldr         r2, [sp, #0xA0]
  01950	e59d1044	 ldr         r1, [sp, #0x44]
  01954	e59f0720	 ldr         r0, [pc, #0x720]
  01958	eb000000	 bl          NKDbgPrintfW
  0195c	e3a03001	 mov         r3, #1
  01960	e58d3048	 str         r3, [sp, #0x48]
  01964	ea000001	 b           |$LN24@RemoveFrom|
  01968		 |$LN23@RemoveFrom|
  01968	e3a03000	 mov         r3, #0
  0196c	e58d3048	 str         r3, [sp, #0x48]
  01970		 |$LN24@RemoveFrom|

; 601  :     Lock();

  01970	e59d009c	 ldr         r0, [sp, #0x9C]
  01974	eb000000	 bl          |?Lock@LockObject@@QAAXXZ|

; 602  : #ifdef DEBUG
; 603  :     BOOL debug_fRemovedPipe = FALSE;

  01978	e3a03000	 mov         r3, #0
  0197c	e58d3004	 str         r3, [sp, #4]

; 604  :     {
; 605  :         // check m_debug_numItemsOnBusyPipeList
; 606  :         PPIPE_LIST_ELEMENT pBusy = m_pBusyPipeList;

  01980	e59d309c	 ldr         r3, [sp, #0x9C]
  01984	e28330cc	 add         r3, r3, #0xCC
  01988	e5933000	 ldr         r3, [r3]
  0198c	e58d301c	 str         r3, [sp, #0x1C]

; 607  :         int count = 0;

  01990	e3a03000	 mov         r3, #0
  01994	e58d3018	 str         r3, [sp, #0x18]
  01998		 |$LN20@RemoveFrom|

; 608  :         while ( pBusy != NULL ) {

  01998	e59d301c	 ldr         r3, [sp, #0x1C]
  0199c	e3530000	 cmp         r3, #0
  019a0	0a000017	 beq         |$LN19@RemoveFrom|

; 609  :             DEBUGCHK( pBusy->pPipe != NULL );

  019a4	e59d301c	 ldr         r3, [sp, #0x1C]
  019a8	e5933000	 ldr         r3, [r3]
  019ac	e3530000	 cmp         r3, #0
  019b0	0a000002	 beq         |$LN25@RemoveFrom|
  019b4	e3a03001	 mov         r3, #1
  019b8	e58d304c	 str         r3, [sp, #0x4C]
  019bc	ea000008	 b           |$LN26@RemoveFrom|
  019c0		 |$LN25@RemoveFrom|
  019c0	e3a03c02	 mov         r3, #2, 24
  019c4	e3833061	 orr         r3, r3, #0x61
  019c8	e59f26a8	 ldr         r2, [pc, #0x6A8]
  019cc	e59f1680	 ldr         r1, [pc, #0x680]
  019d0	e59f069c	 ldr         r0, [pc, #0x69C]
  019d4	eb000000	 bl          NKDbgPrintfW
  019d8	e6000010	 __debugbreak_ce
  019dc	e3a03000	 mov         r3, #0
  019e0	e58d304c	 str         r3, [sp, #0x4C]
  019e4		 |$LN26@RemoveFrom|

; 610  :             pBusy = pBusy->pNext;

  019e4	e59d301c	 ldr         r3, [sp, #0x1C]
  019e8	e2833004	 add         r3, r3, #4
  019ec	e5933000	 ldr         r3, [r3]
  019f0	e58d301c	 str         r3, [sp, #0x1C]

; 611  :             count++;

  019f4	e59d3018	 ldr         r3, [sp, #0x18]
  019f8	e2833001	 add         r3, r3, #1
  019fc	e58d3018	 str         r3, [sp, #0x18]

; 612  :         }

  01a00	eaffffe4	 b           |$LN20@RemoveFrom|
  01a04		 |$LN19@RemoveFrom|

; 613  :         DEBUGCHK( m_debug_numItemsOnBusyPipeList == count );

  01a04	e59d309c	 ldr         r3, [sp, #0x9C]
  01a08	e28330d4	 add         r3, r3, #0xD4
  01a0c	e5932000	 ldr         r2, [r3]
  01a10	e59d3018	 ldr         r3, [sp, #0x18]
  01a14	e1520003	 cmp         r2, r3
  01a18	1a000002	 bne         |$LN27@RemoveFrom|
  01a1c	e3a03001	 mov         r3, #1
  01a20	e58d3050	 str         r3, [sp, #0x50]
  01a24	ea000008	 b           |$LN28@RemoveFrom|
  01a28		 |$LN27@RemoveFrom|
  01a28	e3a03c02	 mov         r3, #2, 24
  01a2c	e3833065	 orr         r3, r3, #0x65
  01a30	e59f2640	 ldr         r2, [pc, #0x640]
  01a34	e59f1618	 ldr         r1, [pc, #0x618]
  01a38	e59f0634	 ldr         r0, [pc, #0x634]
  01a3c	eb000000	 bl          NKDbgPrintfW
  01a40	e6000010	 __debugbreak_ce
  01a44	e3a03000	 mov         r3, #0
  01a48	e58d3050	 str         r3, [sp, #0x50]
  01a4c		 |$LN28@RemoveFrom|

; 614  :     }
; 615  : #endif // DEBUG
; 616  :     PPIPE_LIST_ELEMENT pPrev = NULL;

  01a4c	e3a03000	 mov         r3, #0
  01a50	e58d3000	 str         r3, [sp]

; 617  :     PPIPE_LIST_ELEMENT pCurrent = m_pBusyPipeList;

  01a54	e59d309c	 ldr         r3, [sp, #0x9C]
  01a58	e28330cc	 add         r3, r3, #0xCC
  01a5c	e5933000	 ldr         r3, [r3]
  01a60	e58d3014	 str         r3, [sp, #0x14]

; 618  :     USB_ENDPOINT_DESCRIPTOR endptDesc = pPipe->GetEndptDescriptor();

  01a64	e28d100c	 add         r1, sp, #0xC
  01a68	e59d00a0	 ldr         r0, [sp, #0xA0]
  01a6c	eb000000	 bl          |?GetEndptDescriptor@CPipe@@QAA?AU_USB_ENDPOINT_DESCRIPTOR@@XZ|

; 619  :     UCHAR endpoint = USB_ENDPOINT(endptDesc.bEndpointAddress);

  01a70	e5dd300e	 ldrb        r3, [sp, #0xE]
  01a74	e203300f	 and         r3, r3, #0xF
  01a78	e20330ff	 and         r3, r3, #0xFF
  01a7c	e5cd3008	 strb        r3, [sp, #8]
  01a80		 |$LN18@RemoveFrom|

; 620  : 
; 621  :     while ( pCurrent != NULL ) {

  01a80	e59d3014	 ldr         r3, [sp, #0x14]
  01a84	e3530000	 cmp         r3, #0
  01a88	0a000065	 beq         |$LN17@RemoveFrom|

; 622  :         if ( pCurrent->pPipe == pPipe ) {

  01a8c	e59d3014	 ldr         r3, [sp, #0x14]
  01a90	e5932000	 ldr         r2, [r3]
  01a94	e59d30a0	 ldr         r3, [sp, #0xA0]
  01a98	e1520003	 cmp         r2, r3
  01a9c	1a000059	 bne         |$LN16@RemoveFrom|

; 623  :             // Remove item from the linked list
; 624  :             if ( pCurrent == m_pBusyPipeList ) {

  01aa0	e59d309c	 ldr         r3, [sp, #0x9C]
  01aa4	e28330cc	 add         r3, r3, #0xCC
  01aa8	e59d2014	 ldr         r2, [sp, #0x14]
  01aac	e5933000	 ldr         r3, [r3]
  01ab0	e1520003	 cmp         r2, r3
  01ab4	1a000017	 bne         |$LN15@RemoveFrom|

; 625  :                 DEBUGCHK( pPrev == NULL );

  01ab8	e59d3000	 ldr         r3, [sp]
  01abc	e3530000	 cmp         r3, #0
  01ac0	1a000002	 bne         |$LN29@RemoveFrom|
  01ac4	e3a03001	 mov         r3, #1
  01ac8	e58d3054	 str         r3, [sp, #0x54]
  01acc	ea000008	 b           |$LN30@RemoveFrom|
  01ad0		 |$LN29@RemoveFrom|
  01ad0	e3a03c02	 mov         r3, #2, 24
  01ad4	e3833071	 orr         r3, r3, #0x71
  01ad8	e59f2598	 ldr         r2, [pc, #0x598]
  01adc	e59f1570	 ldr         r1, [pc, #0x570]
  01ae0	e59f058c	 ldr         r0, [pc, #0x58C]
  01ae4	eb000000	 bl          NKDbgPrintfW
  01ae8	e6000010	 __debugbreak_ce
  01aec	e3a03000	 mov         r3, #0
  01af0	e58d3054	 str         r3, [sp, #0x54]
  01af4		 |$LN30@RemoveFrom|

; 626  :                 m_pBusyPipeList = m_pBusyPipeList->pNext;

  01af4	e59d309c	 ldr         r3, [sp, #0x9C]
  01af8	e28330cc	 add         r3, r3, #0xCC
  01afc	e5933000	 ldr         r3, [r3]
  01b00	e2831004	 add         r1, r3, #4
  01b04	e59d309c	 ldr         r3, [sp, #0x9C]
  01b08	e28320cc	 add         r2, r3, #0xCC
  01b0c	e5913000	 ldr         r3, [r1]
  01b10	e5823000	 str         r3, [r2]

; 627  :             } else {

  01b14	ea00001a	 b           |$LN14@RemoveFrom|
  01b18		 |$LN15@RemoveFrom|

; 628  :                 DEBUGCHK( pPrev != NULL &&
; 629  :                           pPrev->pNext == pCurrent );

  01b18	e59d3000	 ldr         r3, [sp]
  01b1c	e3530000	 cmp         r3, #0
  01b20	0a000008	 beq         |$LN31@RemoveFrom|
  01b24	e59d3000	 ldr         r3, [sp]
  01b28	e2833004	 add         r3, r3, #4
  01b2c	e5932000	 ldr         r2, [r3]
  01b30	e59d3014	 ldr         r3, [sp, #0x14]
  01b34	e1520003	 cmp         r2, r3
  01b38	1a000002	 bne         |$LN31@RemoveFrom|
  01b3c	e3a03001	 mov         r3, #1
  01b40	e58d3058	 str         r3, [sp, #0x58]
  01b44	ea000008	 b           |$LN32@RemoveFrom|
  01b48		 |$LN31@RemoveFrom|
  01b48	e3a03c02	 mov         r3, #2, 24
  01b4c	e3833075	 orr         r3, r3, #0x75
  01b50	e59f2520	 ldr         r2, [pc, #0x520]
  01b54	e59f14f8	 ldr         r1, [pc, #0x4F8]
  01b58	e59f0514	 ldr         r0, [pc, #0x514]
  01b5c	eb000000	 bl          NKDbgPrintfW
  01b60	e6000010	 __debugbreak_ce
  01b64	e3a03000	 mov         r3, #0
  01b68	e58d3058	 str         r3, [sp, #0x58]
  01b6c		 |$LN32@RemoveFrom|

; 630  :                 pPrev->pNext = pCurrent->pNext;

  01b6c	e59d3014	 ldr         r3, [sp, #0x14]
  01b70	e2831004	 add         r1, r3, #4
  01b74	e59d3000	 ldr         r3, [sp]
  01b78	e2832004	 add         r2, r3, #4
  01b7c	e5913000	 ldr         r3, [r1]
  01b80	e5823000	 str         r3, [r2]
  01b84		 |$LN14@RemoveFrom|

; 631  :             }
; 632  :             delete pCurrent;

  01b84	e59d3014	 ldr         r3, [sp, #0x14]
  01b88	e58d3038	 str         r3, [sp, #0x38]
  01b8c	e59d0038	 ldr         r0, [sp, #0x38]
  01b90	eb000000	 bl          |??3@YAXPAX@Z|

; 633  :             pCurrent = NULL;

  01b94	e3a03000	 mov         r3, #0
  01b98	e58d3014	 str         r3, [sp, #0x14]

; 634  :         #ifdef DEBUG
; 635  :             debug_fRemovedPipe = TRUE;

  01b9c	e3a03001	 mov         r3, #1
  01ba0	e58d3004	 str         r3, [sp, #4]

; 636  :             DEBUGCHK( --m_debug_numItemsOnBusyPipeList >= 0 );

  01ba4	e59d309c	 ldr         r3, [sp, #0x9C]
  01ba8	e28330d4	 add         r3, r3, #0xD4
  01bac	e5933000	 ldr         r3, [r3]
  01bb0	e2432001	 sub         r2, r3, #1
  01bb4	e59d309c	 ldr         r3, [sp, #0x9C]
  01bb8	e28330d4	 add         r3, r3, #0xD4
  01bbc	e5832000	 str         r2, [r3]
  01bc0	e59d309c	 ldr         r3, [sp, #0x9C]
  01bc4	e28330d4	 add         r3, r3, #0xD4
  01bc8	e5933000	 ldr         r3, [r3]
  01bcc	e3530000	 cmp         r3, #0
  01bd0	ba000002	 blt         |$LN33@RemoveFrom|
  01bd4	e3a03001	 mov         r3, #1
  01bd8	e58d305c	 str         r3, [sp, #0x5C]
  01bdc	ea000007	 b           |$LN34@RemoveFrom|
  01be0		 |$LN33@RemoveFrom|
  01be0	e3a03f9f	 mov         r3, #0x9F, 30
  01be4	e59f248c	 ldr         r2, [pc, #0x48C]
  01be8	e59f1464	 ldr         r1, [pc, #0x464]
  01bec	e59f0480	 ldr         r0, [pc, #0x480]
  01bf0	eb000000	 bl          NKDbgPrintfW
  01bf4	e6000010	 __debugbreak_ce
  01bf8	e3a03000	 mov         r3, #0
  01bfc	e58d305c	 str         r3, [sp, #0x5C]
  01c00		 |$LN34@RemoveFrom|

; 637  :         #endif // DEBUG
; 638  :             break;

  01c00	ea000007	 b           |$LN17@RemoveFrom|

; 639  :         } else {

  01c04	ea000005	 b           |$LN13@RemoveFrom|
  01c08		 |$LN16@RemoveFrom|

; 640  :             // Check next item
; 641  :             pPrev = pCurrent;

  01c08	e59d3014	 ldr         r3, [sp, #0x14]
  01c0c	e58d3000	 str         r3, [sp]

; 642  :             pCurrent = pPrev->pNext;

  01c10	e59d3000	 ldr         r3, [sp]
  01c14	e2833004	 add         r3, r3, #4
  01c18	e5933000	 ldr         r3, [r3]
  01c1c	e58d3014	 str         r3, [sp, #0x14]
  01c20		 |$LN13@RemoveFrom|

; 643  :         }
; 644  :     }

  01c20	eaffff96	 b           |$LN18@RemoveFrom|
  01c24		 |$LN17@RemoveFrom|

; 645  : 
; 646  :     // Finally, close the handle and notify the removal 
; 647  :     if (endpoint == 0)

  01c24	e5dd3008	 ldrb        r3, [sp, #8]
  01c28	e3530000	 cmp         r3, #0
  01c2c	1a0000a6	 bne         |$LN12@RemoveFrom|

; 648  :     {
; 649  :         BOOL fFound = FALSE;

  01c30	e3a03000	 mov         r3, #0
  01c34	e58d3020	 str         r3, [sp, #0x20]

; 650  :         PPIPE_LIST_INFO pListTemp = m_PipeListInfoEP0CheckForDoneTransfersCount;

  01c38	e59d309c	 ldr         r3, [sp, #0x9C]
  01c3c	e28330c0	 add         r3, r3, #0xC0
  01c40	e5933000	 ldr         r3, [r3]
  01c44	e58d3030	 str         r3, [sp, #0x30]

; 651  :         PPIPE_LIST_INFO pListPrev;
; 652  : 
; 653  :         pListPrev = pListTemp;

  01c48	e59d3030	 ldr         r3, [sp, #0x30]
  01c4c	e58d3028	 str         r3, [sp, #0x28]
  01c50		 |$LN11@RemoveFrom|

; 654  :         while (pListTemp != NULL)

  01c50	e59d3030	 ldr         r3, [sp, #0x30]
  01c54	e3530000	 cmp         r3, #0
  01c58	0a000039	 beq         |$LN10@RemoveFrom|

; 655  :         {
; 656  :             if (pListTemp->deviceAddr == pPipe->GetReservedDeviceAddr())

  01c5c	e59d30a0	 ldr         r3, [sp, #0xA0]
  01c60	e5933000	 ldr         r3, [r3]
  01c64	e2833028	 add         r3, r3, #0x28
  01c68	e59d00a0	 ldr         r0, [sp, #0xA0]
  01c6c	e5933000	 ldr         r3, [r3]
  01c70	e1a0e00f	 mov         lr, pc
  01c74	e12fff13	 bx          r3
  01c78	e5cd0060	 strb        r0, [sp, #0x60]
  01c7c	e59d3030	 ldr         r3, [sp, #0x30]
  01c80	e5d33000	 ldrb        r3, [r3]
  01c84	e1a02003	 mov         r2, r3
  01c88	e5dd3060	 ldrb        r3, [sp, #0x60]
  01c8c	e1520003	 cmp         r2, r3
  01c90	1a000024	 bne         |$LN9@RemoveFrom|

; 657  :             {
; 658  :                 fFound = TRUE;

  01c94	e3a03001	 mov         r3, #1
  01c98	e58d3020	 str         r3, [sp, #0x20]

; 659  :                 DEBUGMSG(ZONE_PIPE|ZONE_DEBUG, (TEXT("RemoveFromBusyPipeList found the device\r\n")));

  01c9c	e59f33b0	 ldr         r3, [pc, #0x3B0]
  01ca0	e5933440	 ldr         r3, [r3, #0x440]
  01ca4	e3130080	 tst         r3, #0x80
  01ca8	0a000004	 beq         |$LN35@RemoveFrom|
  01cac	e59f03bc	 ldr         r0, [pc, #0x3BC]
  01cb0	eb000000	 bl          NKDbgPrintfW
  01cb4	e3a03001	 mov         r3, #1
  01cb8	e58d3064	 str         r3, [sp, #0x64]
  01cbc	ea000001	 b           |$LN36@RemoveFrom|
  01cc0		 |$LN35@RemoveFrom|
  01cc0	e3a03000	 mov         r3, #0
  01cc4	e58d3064	 str         r3, [sp, #0x64]
  01cc8		 |$LN36@RemoveFrom|

; 660  :                 if (pListPrev == pListTemp) // head

  01cc8	e59d2028	 ldr         r2, [sp, #0x28]
  01ccc	e59d3030	 ldr         r3, [sp, #0x30]
  01cd0	e1520003	 cmp         r2, r3
  01cd4	1a000008	 bne         |$LN8@RemoveFrom|

; 661  :                 {
; 662  :                     delete pListTemp;

  01cd8	e59d3030	 ldr         r3, [sp, #0x30]
  01cdc	e58d303c	 str         r3, [sp, #0x3C]
  01ce0	e59d003c	 ldr         r0, [sp, #0x3C]
  01ce4	eb000000	 bl          |??3@YAXPAX@Z|

; 663  :                     m_PipeListInfoEP0CheckForDoneTransfersCount = NULL;

  01ce8	e59d309c	 ldr         r3, [sp, #0x9C]
  01cec	e28320c0	 add         r2, r3, #0xC0
  01cf0	e3a03000	 mov         r3, #0
  01cf4	e5823000	 str         r3, [r2]

; 664  :                 }
; 665  :                 else

  01cf8	ea000009	 b           |$LN7@RemoveFrom|
  01cfc		 |$LN8@RemoveFrom|

; 666  :                 {
; 667  :                     pListPrev->pNext = pListTemp->pNext;

  01cfc	e59d3030	 ldr         r3, [sp, #0x30]
  01d00	e2831004	 add         r1, r3, #4
  01d04	e59d3028	 ldr         r3, [sp, #0x28]
  01d08	e2832004	 add         r2, r3, #4
  01d0c	e5913000	 ldr         r3, [r1]
  01d10	e5823000	 str         r3, [r2]

; 668  :                     delete pListTemp;

  01d14	e59d3030	 ldr         r3, [sp, #0x30]
  01d18	e58d3040	 str         r3, [sp, #0x40]
  01d1c	e59d0040	 ldr         r0, [sp, #0x40]
  01d20	eb000000	 bl          |??3@YAXPAX@Z|
  01d24		 |$LN7@RemoveFrom|

; 669  :                 }
; 670  :                 break;

  01d24	ea000006	 b           |$LN10@RemoveFrom|
  01d28		 |$LN9@RemoveFrom|

; 671  :             }
; 672  :             pListPrev = pListTemp;

  01d28	e59d3030	 ldr         r3, [sp, #0x30]
  01d2c	e58d3028	 str         r3, [sp, #0x28]

; 673  :             pListTemp = pListTemp->pNext;   

  01d30	e59d3030	 ldr         r3, [sp, #0x30]
  01d34	e2833004	 add         r3, r3, #4
  01d38	e5933000	 ldr         r3, [r3]
  01d3c	e58d3030	 str         r3, [sp, #0x30]

; 674  :         } // end while (pListTemp != NULL)

  01d40	eaffffc2	 b           |$LN11@RemoveFrom|
  01d44		 |$LN10@RemoveFrom|

; 675  : 
; 676  :         if (fFound == FALSE)

  01d44	e59d3020	 ldr         r3, [sp, #0x20]
  01d48	e3530000	 cmp         r3, #0
  01d4c	1a000016	 bne         |$LN6@RemoveFrom|

; 677  :             DEBUGMSG(ZONE_PIPE, (TEXT("Warning! Not able to find EP %d,DevAddr %d\r\n"),
; 678  :                 endpoint, pPipe->GetReservedDeviceAddr()));

  01d50	e59f32fc	 ldr         r3, [pc, #0x2FC]
  01d54	e5933440	 ldr         r3, [r3, #0x440]
  01d58	e3130080	 tst         r3, #0x80
  01d5c	0a000010	 beq         |$LN37@RemoveFrom|
  01d60	e59d30a0	 ldr         r3, [sp, #0xA0]
  01d64	e5933000	 ldr         r3, [r3]
  01d68	e2833028	 add         r3, r3, #0x28
  01d6c	e59d00a0	 ldr         r0, [sp, #0xA0]
  01d70	e5933000	 ldr         r3, [r3]
  01d74	e1a0e00f	 mov         lr, pc
  01d78	e12fff13	 bx          r3
  01d7c	e5cd0068	 strb        r0, [sp, #0x68]
  01d80	e5dd3068	 ldrb        r3, [sp, #0x68]
  01d84	e1a02003	 mov         r2, r3
  01d88	e5dd3008	 ldrb        r3, [sp, #8]
  01d8c	e1a01003	 mov         r1, r3
  01d90	e59f02d4	 ldr         r0, [pc, #0x2D4]
  01d94	eb000000	 bl          NKDbgPrintfW
  01d98	e3a03001	 mov         r3, #1
  01d9c	e58d306c	 str         r3, [sp, #0x6C]
  01da0	ea000001	 b           |$LN38@RemoveFrom|
  01da4		 |$LN37@RemoveFrom|
  01da4	e3a03000	 mov         r3, #0
  01da8	e58d306c	 str         r3, [sp, #0x6C]
  01dac		 |$LN38@RemoveFrom|
  01dac		 |$LN6@RemoveFrom|

; 679  : 
; 680  : 
; 681  :         if (m_PipeListInfoEP0CheckForDoneTransfersCount == NULL)

  01dac	e59d309c	 ldr         r3, [sp, #0x9C]
  01db0	e28330c0	 add         r3, r3, #0xC0
  01db4	e5933000	 ldr         r3, [r3]
  01db8	e3530000	 cmp         r3, #0
  01dbc	1a000022	 bne         |$LN5@RemoveFrom|

; 682  :         {
; 683  :             DEBUGMSG(ZONE_PIPE|ZONE_DEBUG, (TEXT("RemoveBusyPipeList for EP %d  -clear\r\n"),
; 684  :                 endpoint));

  01dc0	e59f328c	 ldr         r3, [pc, #0x28C]
  01dc4	e5933440	 ldr         r3, [r3, #0x440]
  01dc8	e3130080	 tst         r3, #0x80
  01dcc	0a000006	 beq         |$LN39@RemoveFrom|
  01dd0	e5dd3008	 ldrb        r3, [sp, #8]
  01dd4	e1a01003	 mov         r1, r3
  01dd8	e59f0288	 ldr         r0, [pc, #0x288]
  01ddc	eb000000	 bl          NKDbgPrintfW
  01de0	e3a03001	 mov         r3, #1
  01de4	e58d3070	 str         r3, [sp, #0x70]
  01de8	ea000001	 b           |$LN40@RemoveFrom|
  01dec		 |$LN39@RemoveFrom|
  01dec	e3a03000	 mov         r3, #0
  01df0	e58d3070	 str         r3, [sp, #0x70]
  01df4		 |$LN40@RemoveFrom|

; 685  :             if (USB_ENDPOINT(endpoint) == 0)

  01df4	e5dd3008	 ldrb        r3, [sp, #8]
  01df8	e313000f	 tst         r3, #0xF
  01dfc	1a00000a	 bne         |$LN4@RemoveFrom|

; 686  :                 DEBUGMSG(ZONE_PIPE, (TEXT("RemoveBusyPipeList clean EP 0\r\n")));

  01e00	e59f324c	 ldr         r3, [pc, #0x24C]
  01e04	e5933440	 ldr         r3, [r3, #0x440]
  01e08	e3130080	 tst         r3, #0x80
  01e0c	0a000004	 beq         |$LN41@RemoveFrom|
  01e10	e59f024c	 ldr         r0, [pc, #0x24C]
  01e14	eb000000	 bl          NKDbgPrintfW
  01e18	e3a03001	 mov         r3, #1
  01e1c	e58d3074	 str         r3, [sp, #0x74]
  01e20	ea000001	 b           |$LN42@RemoveFrom|
  01e24		 |$LN41@RemoveFrom|
  01e24	e3a03000	 mov         r3, #0
  01e28	e58d3074	 str         r3, [sp, #0x74]
  01e2c		 |$LN42@RemoveFrom|
  01e2c		 |$LN4@RemoveFrom|

; 687  :             CloseHandle(m_hEP0CheckForDoneTransfersEvent);

  01e2c	e59d309c	 ldr         r3, [sp, #0x9C]
  01e30	e28330bc	 add         r3, r3, #0xBC
  01e34	e5930000	 ldr         r0, [r3]
  01e38	eb000000	 bl          CloseHandle

; 688  :             m_hEP0CheckForDoneTransfersEvent = NULL;

  01e3c	e59d309c	 ldr         r3, [sp, #0x9C]
  01e40	e28320bc	 add         r2, r3, #0xBC
  01e44	e3a03000	 mov         r3, #0
  01e48	e5823000	 str         r3, [r2]
  01e4c		 |$LN5@RemoveFrom|

; 689  :         }
; 690  : 
; 691  : #ifdef DEBUG
; 692  :         int count = 0;

  01e4c	e3a03000	 mov         r3, #0
  01e50	e58d3024	 str         r3, [sp, #0x24]

; 693  :         PPIPE_LIST_INFO pList = m_PipeListInfoEP0CheckForDoneTransfersCount;

  01e54	e59d309c	 ldr         r3, [sp, #0x9C]
  01e58	e28330c0	 add         r3, r3, #0xC0
  01e5c	e5933000	 ldr         r3, [r3]
  01e60	e58d302c	 str         r3, [sp, #0x2C]
  01e64		 |$LN3@RemoveFrom|

; 694  :         while (pList != NULL)

  01e64	e59d302c	 ldr         r3, [sp, #0x2C]
  01e68	e3530000	 cmp         r3, #0
  01e6c	0a000007	 beq         |$LN2@RemoveFrom|

; 695  :         {
; 696  :             count++;

  01e70	e59d3024	 ldr         r3, [sp, #0x24]
  01e74	e2833001	 add         r3, r3, #1
  01e78	e58d3024	 str         r3, [sp, #0x24]

; 697  :             pList = pList->pNext;

  01e7c	e59d302c	 ldr         r3, [sp, #0x2C]
  01e80	e2833004	 add         r3, r3, #4
  01e84	e5933000	 ldr         r3, [r3]
  01e88	e58d302c	 str         r3, [sp, #0x2C]

; 698  :         }

  01e8c	eafffff4	 b           |$LN3@RemoveFrom|
  01e90		 |$LN2@RemoveFrom|

; 699  : 
; 700  :         DEBUGMSG(ZONE_PIPE|ZONE_DEBUG, (TEXT("RemoveBusyPipeList leaving EP %d, count %d\r\n"),
; 701  :             endpoint, count));

  01e90	e59f31bc	 ldr         r3, [pc, #0x1BC]
  01e94	e5933440	 ldr         r3, [r3, #0x440]
  01e98	e3130080	 tst         r3, #0x80
  01e9c	0a000007	 beq         |$LN43@RemoveFrom|
  01ea0	e59d2024	 ldr         r2, [sp, #0x24]
  01ea4	e5dd3008	 ldrb        r3, [sp, #8]
  01ea8	e1a01003	 mov         r1, r3
  01eac	e59f01ac	 ldr         r0, [pc, #0x1AC]
  01eb0	eb000000	 bl          NKDbgPrintfW
  01eb4	e3a03001	 mov         r3, #1
  01eb8	e58d3078	 str         r3, [sp, #0x78]
  01ebc	ea000001	 b           |$LN44@RemoveFrom|
  01ec0		 |$LN43@RemoveFrom|
  01ec0	e3a03000	 mov         r3, #0
  01ec4	e58d3078	 str         r3, [sp, #0x78]
  01ec8		 |$LN44@RemoveFrom|

; 702  : #endif
; 703  :     } // if (endpoint == 0)
; 704  :     else

  01ec8	ea00001f	 b           |$LN1@RemoveFrom|
  01ecc		 |$LN12@RemoveFrom|

; 705  :     {        
; 706  :         UCHAR channel = pPipe->m_pCMhcd->DeviceInfo2Channel(pPipe);                

  01ecc	e59d10a0	 ldr         r1, [sp, #0xA0]
  01ed0	e59d30a0	 ldr         r3, [sp, #0xA0]
  01ed4	e283300c	 add         r3, r3, #0xC
  01ed8	e5930000	 ldr         r0, [r3]
  01edc	eb000000	 bl          |?DeviceInfo2Channel@CHW@@QAAEPAVCPipe@@@Z|
  01ee0	e5cd007c	 strb        r0, [sp, #0x7C]
  01ee4	e5dd307c	 ldrb        r3, [sp, #0x7C]
  01ee8	e5cd3034	 strb        r3, [sp, #0x34]

; 707  :         pPipe->m_pCMhcd->ReleaseDMAChannel(pPipe, channel);

  01eec	e5dd2034	 ldrb        r2, [sp, #0x34]
  01ef0	e59d10a0	 ldr         r1, [sp, #0xA0]
  01ef4	e59d30a0	 ldr         r3, [sp, #0xA0]
  01ef8	e283300c	 add         r3, r3, #0xC
  01efc	e5930000	 ldr         r0, [r3]
  01f00	eb000000	 bl          |?ReleaseDMAChannel@CHW@@QAAHPAVCPipe@@E@Z|

; 708  :         pPipe->m_pCMhcd->ReleasePhysicalEndPoint(pPipe, TRUE, TRUE);

  01f04	e3a03001	 mov         r3, #1
  01f08	e3a02001	 mov         r2, #1
  01f0c	e59d10a0	 ldr         r1, [sp, #0xA0]
  01f10	e59d00a0	 ldr         r0, [sp, #0xA0]
  01f14	e280000c	 add         r0, r0, #0xC
  01f18	e5900000	 ldr         r0, [r0]
  01f1c	eb000000	 bl          |?ReleasePhysicalEndPoint@CHW@@QAAHPAVCPipe@@HH@Z|

; 709  :         DEBUGMSG(ZONE_PIPE, (TEXT("RemoveFromBusyPipeList: Release all\r\n")));

  01f20	e59f312c	 ldr         r3, [pc, #0x12C]
  01f24	e5933440	 ldr         r3, [r3, #0x440]
  01f28	e3130080	 tst         r3, #0x80
  01f2c	0a000004	 beq         |$LN45@RemoveFrom|
  01f30	e59f0124	 ldr         r0, [pc, #0x124]
  01f34	eb000000	 bl          NKDbgPrintfW
  01f38	e3a03001	 mov         r3, #1
  01f3c	e58d3080	 str         r3, [sp, #0x80]
  01f40	ea000001	 b           |$LN46@RemoveFrom|
  01f44		 |$LN45@RemoveFrom|
  01f44	e3a03000	 mov         r3, #0
  01f48	e58d3080	 str         r3, [sp, #0x80]
  01f4c		 |$LN46@RemoveFrom|
  01f4c		 |$LN1@RemoveFrom|

; 710  :     }
; 711  : 
; 712  :     SetEvent(m_hUpdateEPEvent);

  01f4c	e59d309c	 ldr         r3, [sp, #0x9C]
  01f50	e28330c4	 add         r3, r3, #0xC4
  01f54	e5930000	 ldr         r0, [r3]
  01f58	eb000000	 bl          SetEvent

; 713  :         
; 714  :     Unlock();    

  01f5c	e59d009c	 ldr         r0, [sp, #0x9C]
  01f60	eb000000	 bl          |?Unlock@LockObject@@QAAXXZ|

; 715  :     DEBUGMSG( ZONE_PIPE && ZONE_VERBOSE && debug_fRemovedPipe, (TEXT("-CPipe::RemoveFromBusyPipeList, removed pipe(%s) 0x%x\n"), pPipe->GetPipeType(), pPipe));

  01f64	e59f30e8	 ldr         r3, [pc, #0xE8]
  01f68	e5933440	 ldr         r3, [r3, #0x440]
  01f6c	e3130080	 tst         r3, #0x80
  01f70	0a000015	 beq         |$LN47@RemoveFrom|
  01f74	e59f30d8	 ldr         r3, [pc, #0xD8]
  01f78	e5933440	 ldr         r3, [r3, #0x440]
  01f7c	e3130a01	 tst         r3, #1, 20
  01f80	0a000011	 beq         |$LN47@RemoveFrom|
  01f84	e59d3004	 ldr         r3, [sp, #4]
  01f88	e3530000	 cmp         r3, #0
  01f8c	0a00000e	 beq         |$LN47@RemoveFrom|
  01f90	e59d30a0	 ldr         r3, [sp, #0xA0]
  01f94	e5933000	 ldr         r3, [r3]
  01f98	e2833040	 add         r3, r3, #0x40
  01f9c	e59d00a0	 ldr         r0, [sp, #0xA0]
  01fa0	e5933000	 ldr         r3, [r3]
  01fa4	e1a0e00f	 mov         lr, pc
  01fa8	e12fff13	 bx          r3
  01fac	e58d0084	 str         r0, [sp, #0x84]
  01fb0	e59d20a0	 ldr         r2, [sp, #0xA0]
  01fb4	e59d1084	 ldr         r1, [sp, #0x84]
  01fb8	e59f0098	 ldr         r0, [pc, #0x98]
  01fbc	eb000000	 bl          NKDbgPrintfW
  01fc0	e3a03001	 mov         r3, #1
  01fc4	e58d3088	 str         r3, [sp, #0x88]
  01fc8	ea000001	 b           |$LN48@RemoveFrom|
  01fcc		 |$LN47@RemoveFrom|
  01fcc	e3a03000	 mov         r3, #0
  01fd0	e58d3088	 str         r3, [sp, #0x88]
  01fd4		 |$LN48@RemoveFrom|

; 716  :     DEBUGMSG( ZONE_PIPE && ZONE_VERBOSE && !debug_fRemovedPipe, (TEXT("-CPipe::RemoveFromBusyPipeList, pipe(%s) 0x%x was not on busy list\n"), pPipe->GetPipeType(), pPipe ));

  01fd4	e59f3078	 ldr         r3, [pc, #0x78]
  01fd8	e5933440	 ldr         r3, [r3, #0x440]
  01fdc	e3130080	 tst         r3, #0x80
  01fe0	0a000015	 beq         |$LN49@RemoveFrom|
  01fe4	e59f3068	 ldr         r3, [pc, #0x68]
  01fe8	e5933440	 ldr         r3, [r3, #0x440]
  01fec	e3130a01	 tst         r3, #1, 20
  01ff0	0a000011	 beq         |$LN49@RemoveFrom|
  01ff4	e59d3004	 ldr         r3, [sp, #4]
  01ff8	e3530000	 cmp         r3, #0
  01ffc	1a00000e	 bne         |$LN49@RemoveFrom|
  02000	e59d30a0	 ldr         r3, [sp, #0xA0]
  02004	e5933000	 ldr         r3, [r3]
  02008	e2833040	 add         r3, r3, #0x40
  0200c	e59d00a0	 ldr         r0, [sp, #0xA0]
  02010	e5933000	 ldr         r3, [r3]
  02014	e1a0e00f	 mov         lr, pc
  02018	e12fff13	 bx          r3
  0201c	e58d008c	 str         r0, [sp, #0x8C]
  02020	e59d20a0	 ldr         r2, [sp, #0xA0]
  02024	e59d108c	 ldr         r1, [sp, #0x8C]
  02028	e59f0020	 ldr         r0, [pc, #0x20]
  0202c	eb000000	 bl          NKDbgPrintfW
  02030	e3a03001	 mov         r3, #1
  02034	e58d3090	 str         r3, [sp, #0x90]
  02038	ea000001	 b           |$LN50@RemoveFrom|
  0203c		 |$LN49@RemoveFrom|
  0203c	e3a03000	 mov         r3, #0
  02040	e58d3090	 str         r3, [sp, #0x90]
  02044		 |$LN50@RemoveFrom|

; 717  : }

  02044	e28dd094	 add         sp, sp, #0x94
  02048	e89d6000	 ldmia       sp, {sp, lr}
  0204c	e12fff1e	 bx          lr
  02050		 |$LN54@RemoveFrom|
  02050		 |$LN55@RemoveFrom|
  02050	00000000	 DCD         |??_C@_1II@EJJGOKNM@?$AA?9?$AAC?$AAP?$AAi?$AAp?$AAe?$AA?3?$AA?3?$AAR?$AAe?$AAm?$AAo?$AAv?$AAe?$AAF?$AAr?$AAo?$AAm?$AAB?$AAu?$AAs?$AAy?$AAP?$AAi?$AAp?$AAe?$AAL?$AAi?$AAs?$AAt?$AA?0?$AA?5@|
  02054		 |$LN56@RemoveFrom|
  02054	00000000	 DCD         |dpCurSettings|
  02058		 |$LN57@RemoveFrom|
  02058	00000000	 DCD         |??_C@_1GO@FIBOHGHG@?$AA?9?$AAC?$AAP?$AAi?$AAp?$AAe?$AA?3?$AA?3?$AAR?$AAe?$AAm?$AAo?$AAv?$AAe?$AAF?$AAr?$AAo?$AAm?$AAB?$AAu?$AAs?$AAy?$AAP?$AAi?$AAp?$AAe?$AAL?$AAi?$AAs?$AAt?$AA?0?$AA?5@|
  0205c		 |$LN58@RemoveFrom|
  0205c	00000000	 DCD         |??_C@_1EM@EAPCEMMD@?$AAR?$AAe?$AAm?$AAo?$AAv?$AAe?$AAF?$AAr?$AAo?$AAm?$AAB?$AAu?$AAs?$AAy?$AAP?$AAi?$AAp?$AAe?$AAL?$AAi?$AAs?$AAt?$AA?3?$AA?5?$AAR?$AAe?$AAl?$AAe?$AAa?$AAs?$AAe?$AA?5@|
  02060		 |$LN59@RemoveFrom|
  02060	00000000	 DCD         |??_C@_1FK@BDFKKKJB@?$AAR?$AAe?$AAm?$AAo?$AAv?$AAe?$AAB?$AAu?$AAs?$AAy?$AAP?$AAi?$AAp?$AAe?$AAL?$AAi?$AAs?$AAt?$AA?5?$AAl?$AAe?$AAa?$AAv?$AAi?$AAn?$AAg?$AA?5?$AAE?$AAP?$AA?5?$AA?$CF?$AAd@|
  02064		 |$LN60@RemoveFrom|
  02064	00000000	 DCD         |??_C@_1EA@IGJIIECK@?$AAR?$AAe?$AAm?$AAo?$AAv?$AAe?$AAB?$AAu?$AAs?$AAy?$AAP?$AAi?$AAp?$AAe?$AAL?$AAi?$AAs?$AAt?$AA?5?$AAc?$AAl?$AAe?$AAa?$AAn?$AA?5?$AAE?$AAP?$AA?5?$AA0?$AA?$AN?$AA?6?$AA?$AA@|
  02068		 |$LN61@RemoveFrom|
  02068	00000000	 DCD         |??_C@_1EO@KNHALPPJ@?$AAR?$AAe?$AAm?$AAo?$AAv?$AAe?$AAB?$AAu?$AAs?$AAy?$AAP?$AAi?$AAp?$AAe?$AAL?$AAi?$AAs?$AAt?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAE?$AAP?$AA?5?$AA?$CF?$AAd?$AA?5?$AA?5?$AA?9?$AAc@|
  0206c		 |$LN62@RemoveFrom|
  0206c	00000000	 DCD         |??_C@_1FK@EGINPODO@?$AAW?$AAa?$AAr?$AAn?$AAi?$AAn?$AAg?$AA?$CB?$AA?5?$AAN?$AAo?$AAt?$AA?5?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAf?$AAi?$AAn?$AAd?$AA?5?$AAE?$AAP?$AA?5?$AA?$CF?$AAd?$AA?0@|
  02070		 |$LN63@RemoveFrom|
  02070	00000000	 DCD         |??_C@_1FE@EGNIIPLM@?$AAR?$AAe?$AAm?$AAo?$AAv?$AAe?$AAF?$AAr?$AAo?$AAm?$AAB?$AAu?$AAs?$AAy?$AAP?$AAi?$AAp?$AAe?$AAL?$AAi?$AAs?$AAt?$AA?5?$AAf?$AAo?$AAu?$AAn?$AAd?$AA?5?$AAt?$AAh?$AAe@|
  02074		 |$LN64@RemoveFrom|
  02074	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  02078		 |$LN65@RemoveFrom|
  02078	00000000	 DCD         |??_C@_1LG@MDHHEHIE@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  0207c		 |$LN66@RemoveFrom|
  0207c	00000000	 DCD         |??_C@_1GA@FEGEHGAJ@?$AA?$CL?$AAC?$AAP?$AAi?$AAp?$AAe?$AA?3?$AA?3?$AAR?$AAe?$AAm?$AAo?$AAv?$AAe?$AAF?$AAr?$AAo?$AAm?$AAB?$AAu?$AAs?$AAy?$AAP?$AAi?$AAp?$AAe?$AAL?$AAi?$AAs?$AAt?$AA?5?$AA?9@|
  02080		 |$M44647|

			 ENDP  ; |?RemoveFromBusyPipeList@CBusyPipeList@@QAAXQAVCPipe@@@Z|, CBusyPipeList::RemoveFromBusyPipeList

	EXPORT	|??0CBusyPipeList@@QAA@K@Z|		; CBusyPipeList::CBusyPipeList
	EXPORT	|??_7CHW@@6B@| [ DATA ]			; CHW::`vftable'
	EXPORT	|??0CHW@@QAA@QAVCPhysMem@@PAXK@Z|	; CHW::CHW
	EXPORT	|?SignalHubChangeEvent@CHW@@UAAHH@Z|	; CHW::SignalHubChangeEvent
	EXPORT	|?PowerMgmtCallback@CHW@@UAAXH@Z|	; CHW::PowerMgmtCallback
	EXPORT	|?DidPortStatusChange@CHW@@UAAHE@Z|	; CHW::DidPortStatusChange
	EXPORT	|?GetPortStatus@CHW@@UAAHEAAU_USB_HUB_AND_PORT_STATUS@@@Z| ; CHW::GetPortStatus
	EXPORT	|?RootHubFeature@CHW@@UAAHEEG@Z|	; CHW::RootHubFeature
	EXPORT	|?ResetAndEnablePort@CHW@@UAAHE@Z|	; CHW::ResetAndEnablePort
	EXPORT	|?DisablePort@CHW@@UAAXE@Z|		; CHW::DisablePort
	EXPORT	|?WaitForPortStatusChange@CHW@@UAAHPAX@Z| ; CHW::WaitForPortStatusChange
	EXPORT	|?SuspendHC@CHcd@@UAAHXZ|		; CHcd::SuspendHC
	EXPORT	|?InitFIFO@CHW@@UAAHQAVCPipe@@@Z|	; CHW::InitFIFO
	EXPORT	|?UpdateDataToggle@CHW@@UAAHQAVCPipe@@HH@Z| ; CHW::UpdateDataToggle
	EXPORT	|?SetSignalDisconnectACK@CHW@@UAAXH@Z|	; CHW::SetSignalDisconnectACK
	EXPORT	|?ConfigEP@CHW@@UAAHQBU_USB_ENDPOINT_DESCRIPTOR@@EEEEHEH@Z| ; CHW::ConfigEP
	EXPORT	|?ProcessTD@CHW@@UAAHEPAX@Z|		; CHW::ProcessTD
	EXPORT	|?SendOutDMA@CHW@@UAAHEPAX@Z|		; CHW::SendOutDMA
	EXPORT	|?WriteFIFO@CHW@@UAAHPAXE0K@Z|		; CHW::WriteFIFO
	EXPORT	|?ReadFIFO@CHW@@UAAKPAXE0KPAH@Z|	; CHW::ReadFIFO
	EXPORT	|?WriteDMA@CHW@@UAAHPAXEE0KK0@Z|	; CHW::WriteDMA
	EXPORT	|?SetDeviceAddress@CHW@@UAAXEEEEE@Z|	; CHW::SetDeviceAddress
	EXPORT	|?IsHostConnect@CHW@@UAAHXZ|		; CHW::IsHostConnect
	EXPORT	|?IsDMASupport@CHW@@UAAHXZ|		; CHW::IsDMASupport
	EXPORT	|?GetDMAMode@CHW@@UAAKXZ|		; CHW::GetDMAMode
	EXPORT	|?LockEP0@CHW@@UAAHE@Z|			; CHW::LockEP0
	EXPORT	|?UnlockEP0@CHW@@UAAXE@Z|		; CHW::UnlockEP0
	EXPORT	|?IsDeviceLockEP0@CHW@@UAAHE@Z|		; CHW::IsDeviceLockEP0
	EXPORT	|?GetFrameNumber@CHW@@UAAHPAK@Z|	; CHW::GetFrameNumber
	EXPORT	|?GetFrameLength@CHW@@UAAHPAG@Z|	; CHW::GetFrameLength
	EXPORT	|?SetFrameLength@CHW@@UAAHPAXG@Z|	; CHW::SetFrameLength
	EXPORT	|?StopAdjustingFrame@CHW@@UAAHXZ|	; CHW::StopAdjustingFrame
	EXPORT	|?SignalHubStatusChange@CHcd@@UAAXXZ|	; CHcd::SignalHubStatusChange
	EXPORT	|?ResumeNotification@CHcd@@MAAHXZ|	; CHcd::ResumeNotification
	EXPORT	|?Initialize@CHW@@UAAHXZ|		; CHW::Initialize
	EXPORT	|?DeInitialize@CHW@@UAAXXZ|		; CHW::DeInitialize
	EXPORT	|?SignalCheckForDoneTransfers@CHW@@UAAXEE@Z| ; CHW::SignalCheckForDoneTransfers
	EXPORT	|?SignalCheckForDoneDMA@CHW@@UAAXE@Z|	; CHW::SignalCheckForDoneDMA
	IMPORT	|InitializeCriticalSection|
	IMPORT	|??0CHcd@@QAA@XZ|			; CHcd::CHcd
	IMPORT	|??_ECHW@@UAAPAXI@Z|, WEAK |??_GCHW@@UAAPAXI@Z| ; CHW::`vector deleting destructor', CHW::`scalar deleting destructor'
	IMPORT	|?DisableDevice@CHcd@@UAAHIH@Z|		; CHcd::DisableDevice
	IMPORT	|?SuspendResume@CHcd@@UAAHIH@Z|		; CHcd::SuspendResume

  00050			 AREA	 |.pdata|, PDATA
|$T44668| DCD	|$LN11@CHW|
	DCD	0x40009704

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_7CHW@@6B@| DCD |_purecall|				; CHW::`vftable'
	DCD	|_purecall|
	DCD	|??_ECHW@@UAAPAXI@Z|
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|?SignalHubChangeEvent@CHW@@UAAHH@Z|
	DCD	|?PowerMgmtCallback@CHW@@UAAXH@Z|
	DCD	|?DisableDevice@CHcd@@UAAHIH@Z|
	DCD	|?SuspendResume@CHcd@@UAAHIH@Z|
	DCD	|?DidPortStatusChange@CHW@@UAAHE@Z|
	DCD	|?GetPortStatus@CHW@@UAAHEAAU_USB_HUB_AND_PORT_STATUS@@@Z|
	DCD	|?RootHubFeature@CHW@@UAAHEEG@Z|
	DCD	|?ResetAndEnablePort@CHW@@UAAHE@Z|
	DCD	|?DisablePort@CHW@@UAAXE@Z|
	DCD	|?WaitForPortStatusChange@CHW@@UAAHPAX@Z|
	DCD	|?SuspendHC@CHcd@@UAAHXZ|
	DCD	|?InitFIFO@CHW@@UAAHQAVCPipe@@@Z|
	DCD	|?UpdateDataToggle@CHW@@UAAHQAVCPipe@@HH@Z|
	DCD	|?SetSignalDisconnectACK@CHW@@UAAXH@Z|
	DCD	|?ConfigEP@CHW@@UAAHQBU_USB_ENDPOINT_DESCRIPTOR@@EEEEHEH@Z|
	DCD	|?ProcessTD@CHW@@UAAHEPAX@Z|
	DCD	|?SendOutDMA@CHW@@UAAHEPAX@Z|
	DCD	|?WriteFIFO@CHW@@UAAHPAXE0K@Z|
	DCD	|?ReadFIFO@CHW@@UAAKPAXE0KPAH@Z|
	DCD	|?WriteDMA@CHW@@UAAHPAXEE0KK0@Z|
	DCD	|?SetDeviceAddress@CHW@@UAAXEEEEE@Z|
	DCD	|?IsHostConnect@CHW@@UAAHXZ|
	DCD	|?IsDMASupport@CHW@@UAAHXZ|
	DCD	|?GetDMAMode@CHW@@UAAKXZ|
	DCD	|?LockEP0@CHW@@UAAHE@Z|
	DCD	|?UnlockEP0@CHW@@UAAXE@Z|
	DCD	|?IsDeviceLockEP0@CHW@@UAAHE@Z|
	DCD	|?GetFrameNumber@CHW@@UAAHPAK@Z|
	DCD	|?GetFrameLength@CHW@@UAAHPAG@Z|
	DCD	|?SetFrameLength@CHW@@UAAHPAXG@Z|
	DCD	|?StopAdjustingFrame@CHW@@UAAHXZ|
	DCD	|?SignalHubStatusChange@CHcd@@UAAXXZ|
	DCD	|?ResumeNotification@CHcd@@MAAHXZ|
	DCD	|?Initialize@CHW@@UAAHXZ|
	DCD	|?DeInitialize@CHW@@UAAXXZ|
	DCD	|?SignalCheckForDoneTransfers@CHW@@UAAXEE@Z|
	DCD	|?SignalCheckForDoneDMA@CHW@@UAAXE@Z|
; Function compile flags: /Odtp

  02080			 AREA	 |.text|, CODE, ARM

  02080		 |??0CHW@@QAA@QAVCPhysMem@@PAXK@Z| PROC	; CHW::CHW

; 725  : {    

  02080		 |$LN11@CHW|
  02080	e1a0c00d	 mov         r12, sp
  02084	e92d000f	 stmdb       sp!, {r0 - r3}
  02088	e92d5000	 stmdb       sp!, {r12, lr}
  0208c	e24dd014	 sub         sp, sp, #0x14
  02090		 |$M44665|
  02090	e59d001c	 ldr         r0, [sp, #0x1C]
  02094	eb000000	 bl          |??0CHcd@@QAA@XZ|
  02098	e58d0008	 str         r0, [sp, #8]
  0209c	e59f2234	 ldr         r2, [pc, #0x234]
  020a0	e59d301c	 ldr         r3, [sp, #0x1C]
  020a4	e5832000	 str         r2, [r3]
  020a8	e3a01b01	 mov         r1, #1, 22
  020ac	e59d301c	 ldr         r3, [sp, #0x1C]
  020b0	e28300c4	 add         r0, r3, #0xC4
  020b4	eb000000	 bl          |??0CBusyPipeList@@QAA@K@Z|
  020b8	e58d000c	 str         r0, [sp, #0xC]

; 726  :     int i; 
; 727  : // definitions for static variables    
; 728  :     g_fPowerUpFlag = FALSE;

  020bc	e59d301c	 ldr         r3, [sp, #0x1C]
  020c0	e2832fa9	 add         r2, r3, #0xA9, 30
  020c4	e3a03000	 mov         r3, #0
  020c8	e5823000	 str         r3, [r2]

; 729  :     g_fPowerResuming = FALSE;

  020cc	e59d301c	 ldr         r3, [sp, #0x1C]
  020d0	e2832faa	 add         r2, r3, #0xAA, 30
  020d4	e3a03000	 mov         r3, #0
  020d8	e5823000	 str         r3, [r2]

; 730  :     dwSysIntr = 1;//Verify

  020dc	e3a03001	 mov         r3, #1
  020e0	e58d3028	 str         r3, [sp, #0x28]

; 731  :     //m_pHcd = pHcd;
; 732  :     m_pMem = pCPhysMem;

  020e4	e59d301c	 ldr         r3, [sp, #0x1C]
  020e8	e2832fa7	 add         r2, r3, #0xA7, 30
  020ec	e59d3020	 ldr         r3, [sp, #0x20]
  020f0	e5823000	 str         r3, [r2]

; 733  :     m_pPddContext = pvUhcdPddObject;

  020f4	e59d301c	 ldr         r3, [sp, #0x1C]
  020f8	e2832e2a	 add         r2, r3, #0x2A, 28
  020fc	e59d3024	 ldr         r3, [sp, #0x24]
  02100	e5823000	 str         r3, [r2]

; 734  :     //m_FrameListMask = FRAME_LIST_SIZE-1;  
; 735  :     m_hUsbHubConnectEvent = NULL;

  02104	e59d301c	 ldr         r3, [sp, #0x1C]
  02108	e2832e1b	 add         r2, r3, #0x1B, 28
  0210c	e3a03000	 mov         r3, #0
  02110	e5823000	 str         r3, [r2]

; 736  :     m_hUsbHubDisconnectEvent = NULL;

  02114	e59d301c	 ldr         r3, [sp, #0x1C]
  02118	e2832f6d	 add         r2, r3, #0x6D, 30
  0211c	e3a03000	 mov         r3, #0
  02120	e5823000	 str         r3, [r2]

; 737  : 
; 738  :     m_intr_rx_avail = 0;

  02124	e59d301c	 ldr         r3, [sp, #0x1C]
  02128	e2833c02	 add         r3, r3, #2, 24
  0212c	e2832082	 add         r2, r3, #0x82
  02130	e3a03000	 mov         r3, #0
  02134	e1c230b0	 strh        r3, [r2]

; 739  :     m_bDoResume=FALSE;

  02138	e59d301c	 ldr         r3, [sp, #0x1C]
  0213c	e2832f6f	 add         r2, r3, #0x6F, 30
  02140	e3a03000	 mov         r3, #0
  02144	e5823000	 str         r3, [r2]

; 740  :     m_NumOfPort = 1; // Hardcoded as this point

  02148	e59d301c	 ldr         r3, [sp, #0x1C]
  0214c	e28320c0	 add         r2, r3, #0xC0
  02150	e3a03001	 mov         r3, #1
  02154	e5823000	 str         r3, [r2]

; 741  :     InitializeCriticalSection( &m_csFrameCounter );

  02158	e59d301c	 ldr         r3, [sp, #0x1C]
  0215c	e2830f67	 add         r0, r3, #0x67, 30
  02160	eb000000	 bl          InitializeCriticalSection

; 742  :     InitializeCriticalSection(&m_csDMAChannel);

  02164	e59d301c	 ldr         r3, [sp, #0x1C]
  02168	e2830e1d	 add         r0, r3, #0x1D, 28
  0216c	eb000000	 bl          InitializeCriticalSection

; 743  :     InitializeCriticalSection(&m_csEndPoint);

  02170	e59d301c	 ldr         r3, [sp, #0x1C]
  02174	e2830f9b	 add         r0, r3, #0x9B, 30
  02178	eb000000	 bl          InitializeCriticalSection

; 744  :     m_hLockDMAAccess = CreateEvent(NULL, FALSE, TRUE, NULL);    

  0217c	e3a03000	 mov         r3, #0
  02180	e3a02001	 mov         r2, #1
  02184	e3a01000	 mov         r1, #0
  02188	e3a00000	 mov         r0, #0
  0218c	eb000000	 bl          CreateEventW
  02190	e58d0010	 str         r0, [sp, #0x10]
  02194	e59d301c	 ldr         r3, [sp, #0x1C]
  02198	e2832f79	 add         r2, r3, #0x79, 30
  0219c	e59d3010	 ldr         r3, [sp, #0x10]
  021a0	e5823000	 str         r3, [r2]

; 745  :     for (i = 0; i < MAX_DMA_CHANNEL; i++)

  021a4	e3a03000	 mov         r3, #0
  021a8	e58d3000	 str         r3, [sp]
  021ac	ea000002	 b           |$LN6@CHW|
  021b0		 |$LN5@CHW|
  021b0	e59d3000	 ldr         r3, [sp]
  021b4	e2833001	 add         r3, r3, #1
  021b8	e58d3000	 str         r3, [sp]
  021bc		 |$LN6@CHW|
  021bc	e59d3000	 ldr         r3, [sp]
  021c0	e3530008	 cmp         r3, #8
  021c4	aa000008	 bge         |$LN4@CHW|

; 746  :         m_DMAChannel[i] = 0xff;     

  021c8	e59d301c	 ldr         r3, [sp, #0x1C]
  021cc	e2831d07	 add         r1, r3, #7, 26
  021d0	e59d2000	 ldr         r2, [sp]
  021d4	e3a03002	 mov         r3, #2
  021d8	e0030392	 mul         r3, r2, r3
  021dc	e0812003	 add         r2, r1, r3
  021e0	e3a030ff	 mov         r3, #0xFF
  021e4	e1c230b0	 strh        r3, [r2]
  021e8	eafffff0	 b           |$LN5@CHW|
  021ec		 |$LN4@CHW|

; 747  :     for (i = 0; i < HOST_MAX_EPNUM; i++)

  021ec	e3a03000	 mov         r3, #0
  021f0	e58d3000	 str         r3, [sp]
  021f4	ea000002	 b           |$LN3@CHW|
  021f8		 |$LN2@CHW|
  021f8	e59d3000	 ldr         r3, [sp]
  021fc	e2833001	 add         r3, r3, #1
  02200	e58d3000	 str         r3, [sp]
  02204		 |$LN3@CHW|
  02204	e59d3000	 ldr         r3, [sp]
  02208	e3530010	 cmp         r3, #0x10
  0220c	aa000027	 bge         |$LN1@CHW|

; 748  :     {
; 749  :         m_EndPoint[i][DIR_IN].usDeviceInfo = 0xffff;

  02210	e59d301c	 ldr         r3, [sp, #0x1C]
  02214	e2831f7a	 add         r1, r3, #0x7A, 30
  02218	e59d2000	 ldr         r2, [sp]
  0221c	e3a03008	 mov         r3, #8
  02220	e0030392	 mul         r3, r2, r3
  02224	e0813003	 add         r3, r1, r3
  02228	e2832002	 add         r2, r3, #2
  0222c	e3a03cff	 mov         r3, #0xFF, 24
  02230	e38330ff	 orr         r3, r3, #0xFF
  02234	e1c230b0	 strh        r3, [r2]

; 750  :         m_EndPoint[i][DIR_OUT].usDeviceInfo = 0xffff;

  02238	e59d301c	 ldr         r3, [sp, #0x1C]
  0223c	e2831f7a	 add         r1, r3, #0x7A, 30
  02240	e59d2000	 ldr         r2, [sp]
  02244	e3a03008	 mov         r3, #8
  02248	e0030392	 mul         r3, r2, r3
  0224c	e0813003	 add         r3, r1, r3
  02250	e2832006	 add         r2, r3, #6
  02254	e3a03cff	 mov         r3, #0xFF, 24
  02258	e38330ff	 orr         r3, r3, #0xFF
  0225c	e1c230b0	 strh        r3, [r2]

; 751  :         m_EndPoint[i][DIR_IN].usPrevDevInfo = 0xffff;

  02260	e59d301c	 ldr         r3, [sp, #0x1C]
  02264	e2831f7a	 add         r1, r3, #0x7A, 30
  02268	e59d2000	 ldr         r2, [sp]
  0226c	e3a03008	 mov         r3, #8
  02270	e0030392	 mul         r3, r2, r3
  02274	e0812003	 add         r2, r1, r3
  02278	e3a03cff	 mov         r3, #0xFF, 24
  0227c	e38330ff	 orr         r3, r3, #0xFF
  02280	e1c230b0	 strh        r3, [r2]

; 752  :         m_EndPoint[i][DIR_OUT].usPrevDevInfo = 0xffff;

  02284	e59d301c	 ldr         r3, [sp, #0x1C]
  02288	e2831f7a	 add         r1, r3, #0x7A, 30
  0228c	e59d2000	 ldr         r2, [sp]
  02290	e3a03008	 mov         r3, #8
  02294	e0030392	 mul         r3, r2, r3
  02298	e0813003	 add         r3, r1, r3
  0229c	e2832004	 add         r2, r3, #4
  022a0	e3a03cff	 mov         r3, #0xFF, 24
  022a4	e38330ff	 orr         r3, r3, #0xFF
  022a8	e1c230b0	 strh        r3, [r2]

; 753  :     }

  022ac	eaffffd1	 b           |$LN2@CHW|
  022b0		 |$LN1@CHW|

; 754  : 
; 755  :     m_EndPointInUseCount = 0;

  022b0	e59d301c	 ldr         r3, [sp, #0x1C]
  022b4	e2832f9a	 add         r2, r3, #0x9A, 30
  022b8	e3a03000	 mov         r3, #0
  022bc	e5823000	 str         r3, [r2]

; 756  : }

  022c0	e59d301c	 ldr         r3, [sp, #0x1C]
  022c4	e58d3004	 str         r3, [sp, #4]
  022c8	e59d0004	 ldr         r0, [sp, #4]
  022cc	e28dd014	 add         sp, sp, #0x14
  022d0	e89d6000	 ldmia       sp, {sp, lr}
  022d4	e12fff1e	 bx          lr
  022d8		 |$LN12@CHW|
  022d8		 |$LN13@CHW|
  022d8	00000000	 DCD         |??_7CHW@@6B@|
  022dc		 |$M44666|

			 ENDP  ; |??0CHW@@QAA@QAVCPhysMem@@PAXK@Z|, CHW::CHW

; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\musb\musbhcd\usb2com\hcd.hpp

  00000			 AREA	 |.pdata|, PDATA
|$T44676| DCD	|$LN5@SuspendHC|
	DCD	0x40000a04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SuspendHC@CHcd@@UAAHXZ| PROC		; CHcd::SuspendHC

; 118  :     virtual BOOL    SuspendHC() { return FALSE; }; // Default does not support it function.

  00000		 |$LN5@SuspendHC|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M44673|
  00010	e3a03000	 mov         r3, #0
  00014	e58d3000	 str         r3, [sp]
  00018	e59d0000	 ldr         r0, [sp]
  0001c	e28dd004	 add         sp, sp, #4
  00020	e89d6000	 ldmia       sp, {sp, lr}
  00024	e12fff1e	 bx          lr
  00028		 |$M44674|

			 ENDP  ; |?SuspendHC@CHcd@@UAAHXZ|, CHcd::SuspendHC


  00000			 AREA	 |.pdata|, PDATA
|$T44683| DCD	|$LN6@SignalHubS|
	DCD	0x40001503
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SignalHubStatusChange@CHcd@@UAAXXZ| PROC ; CHcd::SignalHubStatusChange

; 159  :     virtual void SignalHubStatusChange() {

  00000		 |$LN6@SignalHubS|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M44680|

; 160  :         if (m_pCRootHub!=NULL)

  0000c	e59d3008	 ldr         r3, [sp, #8]
  00010	e28330b0	 add         r3, r3, #0xB0
  00014	e5933000	 ldr         r3, [r3]
  00018	e3530000	 cmp         r3, #0
  0001c	0a00000a	 beq         |$LN1@SignalHubS|

; 161  :             m_pCRootHub->SignalHubStatusChange();

  00020	e59d3008	 ldr         r3, [sp, #8]
  00024	e28330b0	 add         r3, r3, #0xB0
  00028	e5932000	 ldr         r2, [r3]
  0002c	e59d3008	 ldr         r3, [sp, #8]
  00030	e28330b0	 add         r3, r3, #0xB0
  00034	e5930000	 ldr         r0, [r3]
  00038	e5923000	 ldr         r3, [r2]
  0003c	e2833044	 add         r3, r3, #0x44
  00040	e5933000	 ldr         r3, [r3]
  00044	e1a0e00f	 mov         lr, pc
  00048	e12fff13	 bx          r3
  0004c		 |$LN1@SignalHubS|

; 162  :     }

  0004c	e89d6000	 ldmia       sp, {sp, lr}
  00050	e12fff1e	 bx          lr
  00054		 |$M44681|

			 ENDP  ; |?SignalHubStatusChange@CHcd@@UAAXXZ|, CHcd::SignalHubStatusChange


  00000			 AREA	 |.pdata|, PDATA
|$T44691| DCD	|$LN6@ResumeNoti|
	DCD	0x40003d04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ResumeNotification@CHcd@@MAAHXZ| PROC ; CHcd::ResumeNotification

; 167  :     virtual BOOL ResumeNotification ()  {

  00000		 |$LN6@ResumeNoti|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd00c	 sub         sp, sp, #0xC
  00010		 |$M44688|

; 168  :         Lock();

  00010	e59d3014	 ldr         r3, [sp, #0x14]
  00014	e2830090	 add         r0, r3, #0x90
  00018	eb000000	 bl          |?Lock@LockObject@@QAAXXZ|

; 169  :         BOOL fReturn = FALSE;

  0001c	e3a03000	 mov         r3, #0
  00020	e58d3000	 str         r3, [sp]

; 170  :         if (m_pCRootHub) {

  00024	e59d3014	 ldr         r3, [sp, #0x14]
  00028	e28330b0	 add         r3, r3, #0xB0
  0002c	e5933000	 ldr         r3, [r3]
  00030	e3530000	 cmp         r3, #0
  00034	0a000025	 beq         |$LN1@ResumeNoti|

; 171  :             fReturn = m_pCRootHub->ResumeNotification();

  00038	e59d3014	 ldr         r3, [sp, #0x14]
  0003c	e28330b0	 add         r3, r3, #0xB0
  00040	e5932000	 ldr         r2, [r3]
  00044	e59d3014	 ldr         r3, [sp, #0x14]
  00048	e28330b0	 add         r3, r3, #0xB0
  0004c	e5930000	 ldr         r0, [r3]
  00050	e5923000	 ldr         r3, [r2]
  00054	e2833028	 add         r3, r3, #0x28
  00058	e5933000	 ldr         r3, [r3]
  0005c	e1a0e00f	 mov         lr, pc
  00060	e12fff13	 bx          r3
  00064	e58d0008	 str         r0, [sp, #8]
  00068	e59d3008	 ldr         r3, [sp, #8]
  0006c	e58d3000	 str         r3, [sp]

; 172  :             m_pCRootHub->NotifyOnSuspendedResumed(FALSE);

  00070	e3a01000	 mov         r1, #0
  00074	e59d3014	 ldr         r3, [sp, #0x14]
  00078	e28330b0	 add         r3, r3, #0xB0
  0007c	e5932000	 ldr         r2, [r3]
  00080	e59d3014	 ldr         r3, [sp, #0x14]
  00084	e28330b0	 add         r3, r3, #0xB0
  00088	e5930000	 ldr         r0, [r3]
  0008c	e5923000	 ldr         r3, [r2]
  00090	e283302c	 add         r3, r3, #0x2C
  00094	e5933000	 ldr         r3, [r3]
  00098	e1a0e00f	 mov         lr, pc
  0009c	e12fff13	 bx          r3

; 173  :             m_pCRootHub->NotifyOnSuspendedResumed(TRUE);

  000a0	e3a01001	 mov         r1, #1
  000a4	e59d3014	 ldr         r3, [sp, #0x14]
  000a8	e28330b0	 add         r3, r3, #0xB0
  000ac	e5932000	 ldr         r2, [r3]
  000b0	e59d3014	 ldr         r3, [sp, #0x14]
  000b4	e28330b0	 add         r3, r3, #0xB0
  000b8	e5930000	 ldr         r0, [r3]
  000bc	e5923000	 ldr         r3, [r2]
  000c0	e283302c	 add         r3, r3, #0x2C
  000c4	e5933000	 ldr         r3, [r3]
  000c8	e1a0e00f	 mov         lr, pc
  000cc	e12fff13	 bx          r3
  000d0		 |$LN1@ResumeNoti|

; 174  :         }
; 175  :         Unlock();

  000d0	e59d3014	 ldr         r3, [sp, #0x14]
  000d4	e2830090	 add         r0, r3, #0x90
  000d8	eb000000	 bl          |?Unlock@LockObject@@QAAXXZ|

; 176  :         return fReturn;

  000dc	e59d3000	 ldr         r3, [sp]
  000e0	e58d3004	 str         r3, [sp, #4]

; 177  :     }

  000e4	e59d0004	 ldr         r0, [sp, #4]
  000e8	e28dd00c	 add         sp, sp, #0xC
  000ec	e89d6000	 ldmia       sp, {sp, lr}
  000f0	e12fff1e	 bx          lr
  000f4		 |$M44689|

			 ENDP  ; |?ResumeNotification@CHcd@@MAAHXZ|, CHcd::ResumeNotification

	EXPORT	|??0LockObject@@QAA@XZ|			; LockObject::LockObject
; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\musb\musbhcd\musbmhdrc\chw.h

  00000			 AREA	 |.pdata|, PDATA
|$T44699| DCD	|$LN5@CBusyPipeL|
	DCD	0x40001104
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0CBusyPipeList@@QAA@K@Z| PROC	; CBusyPipeList::CBusyPipeList

; 179  :     CBusyPipeList(DWORD dwFrameSize) { m_FrameListSize=dwFrameSize;};

  00000		 |$LN5@CBusyPipeL|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd008	 sub         sp, sp, #8
  00010		 |$M44696|
  00010	e59d0010	 ldr         r0, [sp, #0x10]
  00014	eb000000	 bl          |??0LockObject@@QAA@XZ|
  00018	e58d0004	 str         r0, [sp, #4]
  0001c	e59d3010	 ldr         r3, [sp, #0x10]
  00020	e28320b4	 add         r2, r3, #0xB4
  00024	e59d3014	 ldr         r3, [sp, #0x14]
  00028	e5823000	 str         r3, [r2]
  0002c	e59d3010	 ldr         r3, [sp, #0x10]
  00030	e58d3000	 str         r3, [sp]
  00034	e59d0000	 ldr         r0, [sp]
  00038	e28dd008	 add         sp, sp, #8
  0003c	e89d6000	 ldmia       sp, {sp, lr}
  00040	e12fff1e	 bx          lr
  00044		 |$M44697|

			 ENDP  ; |??0CBusyPipeList@@QAA@K@Z|, CBusyPipeList::CBusyPipeList

; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\musb\musbhcd\usb2com\sync.hpp

  00000			 AREA	 |.pdata|, PDATA
|$T44707| DCD	|$LN5@LockObject|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0LockObject@@QAA@XZ| PROC		; LockObject::LockObject

; 71   :     LockObject() { InitializeCriticalSection(&m_CSection); };

  00000		 |$LN5@LockObject|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M44704|
  00010	e59d000c	 ldr         r0, [sp, #0xC]
  00014	eb000000	 bl          InitializeCriticalSection
  00018	e59d300c	 ldr         r3, [sp, #0xC]
  0001c	e58d3000	 str         r3, [sp]
  00020	e59d0000	 ldr         r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M44705|

			 ENDP  ; |??0LockObject@@QAA@XZ|, LockObject::LockObject

; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\musb\musbhcd\musbmhdrc\chw.h

  00000			 AREA	 |.pdata|, PDATA
|$T44714| DCD	|$LN5@SignalChec@3|
	DCD	0x40000a03
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SignalCheckForDoneTransfers@CHW@@UAAXEE@Z| PROC ; CHW::SignalCheckForDoneTransfers

; 233  :     virtual void    SignalCheckForDoneTransfers( IN const UCHAR endpoint, IN const UCHAR ucIsOut ) { 

  00000		 |$LN5@SignalChec@3|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0007	 stmdb       sp!, {r0 - r2}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M44711|

; 234  :             m_cBusyPipeList.SignalCheckForDoneTransfers(endpoint, ucIsOut);

  0000c	e5dd2010	 ldrb        r2, [sp, #0x10]
  00010	e5dd100c	 ldrb        r1, [sp, #0xC]
  00014	e59d3008	 ldr         r3, [sp, #8]
  00018	e28300c4	 add         r0, r3, #0xC4
  0001c	eb000000	 bl          |?SignalCheckForDoneTransfers@CBusyPipeList@@QAAXEE@Z|

; 235  :         };

  00020	e89d6000	 ldmia       sp, {sp, lr}
  00024	e12fff1e	 bx          lr
  00028		 |$M44712|

			 ENDP  ; |?SignalCheckForDoneTransfers@CHW@@UAAXEE@Z|, CHW::SignalCheckForDoneTransfers


  00000			 AREA	 |.pdata|, PDATA
|$T44721| DCD	|$LN5@SignalChec@4|
	DCD	0x40000903
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SignalCheckForDoneDMA@CHW@@UAAXE@Z| PROC ; CHW::SignalCheckForDoneDMA

; 237  :     virtual void    SignalCheckForDoneDMA( IN const UCHAR channel ) { 

  00000		 |$LN5@SignalChec@4|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M44718|

; 238  :             m_cBusyPipeList.SignalCheckForDoneDMA(channel);

  0000c	e5dd100c	 ldrb        r1, [sp, #0xC]
  00010	e59d3008	 ldr         r3, [sp, #8]
  00014	e28300c4	 add         r0, r3, #0xC4
  00018	eb000000	 bl          |?SignalCheckForDoneDMA@CBusyPipeList@@QAAHE@Z|

; 239  :         };

  0001c	e89d6000	 ldmia       sp, {sp, lr}
  00020	e12fff1e	 bx          lr
  00024		 |$M44719|

			 ENDP  ; |?SignalCheckForDoneDMA@CHW@@UAAXE@Z|, CHW::SignalCheckForDoneDMA

	EXPORT	|?SetSignalDisconnectACK@CBusyPipeList@@QAAXH@Z| ; CBusyPipeList::SetSignalDisconnectACK

  00000			 AREA	 |.pdata|, PDATA
|$T44728| DCD	|$LN5@SetSignalD|
	DCD	0x40000903
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetSignalDisconnectACK@CHW@@UAAXH@Z| PROC ; CHW::SetSignalDisconnectACK

; 367  :     void    SetSignalDisconnectACK(BOOL fAck) { m_cBusyPipeList.SetSignalDisconnectACK(fAck); };

  00000		 |$LN5@SetSignalD|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M44725|
  0000c	e59d100c	 ldr         r1, [sp, #0xC]
  00010	e59d3008	 ldr         r3, [sp, #8]
  00014	e28300c4	 add         r0, r3, #0xC4
  00018	eb000000	 bl          |?SetSignalDisconnectACK@CBusyPipeList@@QAAXH@Z|
  0001c	e89d6000	 ldmia       sp, {sp, lr}
  00020	e12fff1e	 bx          lr
  00024		 |$M44726|

			 ENDP  ; |?SetSignalDisconnectACK@CHW@@UAAXH@Z|, CHW::SetSignalDisconnectACK


  00000			 AREA	 |.pdata|, PDATA
|$T44735| DCD	|$LN5@SetSignalD@2|
	DCD	0x40000903
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetSignalDisconnectACK@CBusyPipeList@@QAAXH@Z| PROC ; CBusyPipeList::SetSignalDisconnectACK

; 190  :     void    SetSignalDisconnectACK(BOOL fAck) { m_SignalDisconnectACK = fAck;};

  00000		 |$LN5@SetSignalD@2|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M44732|
  0000c	e59d3008	 ldr         r3, [sp, #8]
  00010	e28320d0	 add         r2, r3, #0xD0
  00014	e59d300c	 ldr         r3, [sp, #0xC]
  00018	e5823000	 str         r3, [r2]
  0001c	e89d6000	 ldmia       sp, {sp, lr}
  00020	e12fff1e	 bx          lr
  00024		 |$M44733|

			 ENDP  ; |?SetSignalDisconnectACK@CBusyPipeList@@QAAXH@Z|, CBusyPipeList::SetSignalDisconnectACK

	EXPORT	|??1CHW@@UAA@XZ|			; CHW::~CHW

  00000			 AREA	 |.pdata|, PDATA
|$T44743| DCD	|$LN6@scalar@2|
	DCD	0x40001104
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??_GCHW@@UAAPAXI@Z| PROC		; CHW::`scalar deleting destructor'
  00000		 |$LN6@scalar@2|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M44740|
  00010	e59d000c	 ldr         r0, [sp, #0xC]
  00014	eb000000	 bl          |??1CHW@@UAA@XZ|
  00018	e59d3010	 ldr         r3, [sp, #0x10]
  0001c	e3130001	 tst         r3, #1
  00020	0a000001	 beq         |$LN1@scalar@2|
  00024	e59d000c	 ldr         r0, [sp, #0xC]
  00028	eb000000	 bl          |??3@YAXPAX@Z|
  0002c		 |$LN1@scalar@2|
  0002c	e59d300c	 ldr         r3, [sp, #0xC]
  00030	e58d3000	 str         r3, [sp]
  00034	e59d0000	 ldr         r0, [sp]
  00038	e28dd004	 add         sp, sp, #4
  0003c	e89d6000	 ldmia       sp, {sp, lr}
  00040	e12fff1e	 bx          lr
  00044		 |$M44741|

			 ENDP  ; |??_GCHW@@UAAPAXI@Z|, CHW::`scalar deleting destructor'

	EXPORT	|??1CBusyPipeList@@QAA@XZ|		; CBusyPipeList::~CBusyPipeList
	IMPORT	|??1CHcd@@UAA@XZ|			; CHcd::~CHcd
	IMPORT	|DeleteCriticalSection|

  00058			 AREA	 |.pdata|, PDATA
|$T44750| DCD	|$LN5@CHW@2|
	DCD	0x40001303
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\musb\musbhcd\musbmhdrc\chw.cpp

  022dc			 AREA	 |.text|, CODE, ARM

  022dc		 |??1CHW@@UAA@XZ| PROC			; CHW::~CHW

; 758  : {

  022dc		 |$LN5@CHW@2|
  022dc	e1a0c00d	 mov         r12, sp
  022e0	e92d0001	 stmdb       sp!, {r0}
  022e4	e92d5000	 stmdb       sp!, {r12, lr}
  022e8		 |$M44747|
  022e8	e59f2034	 ldr         r2, [pc, #0x34]
  022ec	e59d3008	 ldr         r3, [sp, #8]
  022f0	e5832000	 str         r2, [r3]

; 759  :     DeInitialize();

  022f4	e59d0008	 ldr         r0, [sp, #8]
  022f8	eb000000	 bl          |?DeInitialize@CHW@@UAAXXZ|

; 760  :     DeleteCriticalSection( &m_csFrameCounter );

  022fc	e59d3008	 ldr         r3, [sp, #8]
  02300	e2830f67	 add         r0, r3, #0x67, 30
  02304	eb000000	 bl          DeleteCriticalSection

; 761  : }

  02308	e59d3008	 ldr         r3, [sp, #8]
  0230c	e28300c4	 add         r0, r3, #0xC4
  02310	eb000000	 bl          |??1CBusyPipeList@@QAA@XZ|
  02314	e59d0008	 ldr         r0, [sp, #8]
  02318	eb000000	 bl          |??1CHcd@@UAA@XZ|
  0231c	e89d6000	 ldmia       sp, {sp, lr}
  02320	e12fff1e	 bx          lr
  02324		 |$LN6@CHW@2|
  02324		 |$LN7@CHW@2|
  02324	00000000	 DCD         |??_7CHW@@6B@|
  02328		 |$M44748|

			 ENDP  ; |??1CHW@@UAA@XZ|, CHW::~CHW

	EXPORT	|??1LockObject@@QAA@XZ|			; LockObject::~LockObject
; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\musb\musbhcd\musbmhdrc\chw.h

  00000			 AREA	 |.pdata|, PDATA
|$T44757| DCD	|$LN5@CBusyPipeL@2|
	DCD	0x40000903
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??1CBusyPipeList@@QAA@XZ| PROC	; CBusyPipeList::~CBusyPipeList

; 180  :     ~CBusyPipeList() {DeInit();};

  00000		 |$LN5@CBusyPipeL@2|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M44754|
  0000c	e59d0008	 ldr         r0, [sp, #8]
  00010	eb000000	 bl          |?DeInit@CBusyPipeList@@QAAXXZ|
  00014	e59d0008	 ldr         r0, [sp, #8]
  00018	eb000000	 bl          |??1LockObject@@QAA@XZ|
  0001c	e89d6000	 ldmia       sp, {sp, lr}
  00020	e12fff1e	 bx          lr
  00024		 |$M44755|

			 ENDP  ; |??1CBusyPipeList@@QAA@XZ|, CBusyPipeList::~CBusyPipeList

; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\musb\musbhcd\usb2com\sync.hpp

  00000			 AREA	 |.pdata|, PDATA
|$T44764| DCD	|$LN5@LockObject@2|
	DCD	0x40000703
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??1LockObject@@QAA@XZ| PROC		; LockObject::~LockObject

; 72   :     ~LockObject() { DeleteCriticalSection( &m_CSection); };

  00000		 |$LN5@LockObject@2|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M44761|
  0000c	e59d0008	 ldr         r0, [sp, #8]
  00010	eb000000	 bl          DeleteCriticalSection
  00014	e89d6000	 ldmia       sp, {sp, lr}
  00018	e12fff1e	 bx          lr
  0001c		 |$M44762|

			 ENDP  ; |??1LockObject@@QAA@XZ|, LockObject::~LockObject

	EXPORT	|??_C@_1FG@LGOCOJPG@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?5?$AA?9?$AA?5?$AAs?$AAi?$AAg?$AAn?$AAa?$AAl?$AAl?$AAi?$AAn?$AAg?$AA?5?$AAg?$AAl?$AAo@| [ DATA ] ; `string'
	EXPORT	|??_C@_1JC@OFBFENBJ@?$AA?9?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?5?$AA?9?$AA?5?$AAz?$AAe?$AAr?$AAo?$AA?5?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CE@HIKDPBAB@?$AA?$CL?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00060			 AREA	 |.pdata|, PDATA
|$T44780| DCD	|$LN14@Initialize|
	DCD	0x40006c04
; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\musb\musbhcd\musbmhdrc\chw.cpp

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FG@LGOCOJPG@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?5?$AA?9?$AA?5?$AAs?$AAi?$AAg?$AAn?$AAa?$AAl?$AAl?$AAi?$AAn?$AAg?$AA?5?$AAg?$AAl?$AAo@| DCB "C"
	DCB	0x0, "H", 0x0, "W", 0x0, ":", 0x0, ":", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a", 0x0, "l", 0x0, "i"
	DCB	0x0, "z", 0x0, "e", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "s"
	DCB	0x0, "i", 0x0, "g", 0x0, "n", 0x0, "a", 0x0, "l", 0x0, "l"
	DCB	0x0, "i", 0x0, "n", 0x0, "g", 0x0, " ", 0x0, "g", 0x0, "l"
	DCB	0x0, "o", 0x0, "b", 0x0, "a", 0x0, "l", 0x0, " ", 0x0, "r"
	DCB	0x0, "e", 0x0, "s", 0x0, "e", 0x0, "t", 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JC@OFBFENBJ@?$AA?9?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?5?$AA?9?$AA?5?$AAz?$AAe?$AAr?$AAo?$AA?5?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr@| DCB "-"
	DCB	0x0, "C", 0x0, "H", 0x0, "W", 0x0, ":", 0x0, ":", 0x0, "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a", 0x0, "l"
	DCB	0x0, "i", 0x0, "z", 0x0, "e", 0x0, " ", 0x0, "-", 0x0, " "
	DCB	0x0, "z", 0x0, "e", 0x0, "r", 0x0, "o", 0x0, " ", 0x0, "R"
	DCB	0x0, "e", 0x0, "g", 0x0, "i", 0x0, "s", 0x0, "t", 0x0, "e"
	DCB	0x0, "r", 0x0, " ", 0x0, "B", 0x0, "a", 0x0, "s", 0x0, "e"
	DCB	0x0, " ", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "C", 0x0, "e"
	DCB	0x0, "r", 0x0, "i", 0x0, "o", 0x0, "d", 0x0, "i", 0x0, "c"
	DCB	0x0, "M", 0x0, "g", 0x0, "r", 0x0, " ", 0x0, "o", 0x0, "r"
	DCB	0x0, " ", 0x0, "C", 0x0, "A", 0x0, "s", 0x0, "y", 0x0, "n"
	DCB	0x0, "c", 0x0, "M", 0x0, "g", 0x0, "r", 0x0, " ", 0x0, "f"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, "s", 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@HIKDPBAB@?$AA?$CL?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "C", 0x0, "H", 0x0, "W", 0x0, ":", 0x0, ":", 0x0, "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a", 0x0, "l"
	DCB	0x0, "i", 0x0, "z", 0x0, "e", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  02328			 AREA	 |.text|, CODE, ARM

  02328		 |?Initialize@CHW@@UAAHXZ| PROC		; CHW::Initialize

; 783  : {   

  02328		 |$LN14@Initialize|
  02328	e1a0c00d	 mov         r12, sp
  0232c	e92d0001	 stmdb       sp!, {r0}
  02330	e92d5000	 stmdb       sp!, {r12, lr}
  02334	e24dd020	 sub         sp, sp, #0x20
  02338		 |$M44777|

; 784  :     DEBUGMSG( ZONE_INIT, (TEXT("+CHW::Initialize\n")));

  02338	e59f3180	 ldr         r3, [pc, #0x180]
  0233c	e5933440	 ldr         r3, [r3, #0x440]
  02340	e3130002	 tst         r3, #2
  02344	0a000004	 beq         |$LN4@Initialize|
  02348	e59f0184	 ldr         r0, [pc, #0x184]
  0234c	eb000000	 bl          NKDbgPrintfW
  02350	e3a03001	 mov         r3, #1
  02354	e58d3004	 str         r3, [sp, #4]
  02358	ea000001	 b           |$LN5@Initialize|
  0235c		 |$LN4@Initialize|
  0235c	e3a03000	 mov         r3, #0
  02360	e58d3004	 str         r3, [sp, #4]
  02364		 |$LN5@Initialize|

; 785  : 
; 786  :     // set up the frame list area.
; 787  :     if (m_cBusyPipeList.Init()==FALSE) {

  02364	e59d3028	 ldr         r3, [sp, #0x28]
  02368	e28300c4	 add         r0, r3, #0xC4
  0236c	eb000000	 bl          |?Init@CBusyPipeList@@QAAHXZ|
  02370	e58d0008	 str         r0, [sp, #8]
  02374	e59d3008	 ldr         r3, [sp, #8]
  02378	e3530000	 cmp         r3, #0
  0237c	1a00001a	 bne         |$LN1@Initialize|

; 788  :         DEBUGMSG( ZONE_ERROR, (TEXT("-CHW::Initialize - zero Register Base or CeriodicMgr or CAsyncMgr fails\n")));

  02380	e59f3138	 ldr         r3, [pc, #0x138]
  02384	e5933440	 ldr         r3, [r3, #0x440]
  02388	e3130901	 tst         r3, #1, 18
  0238c	0a000004	 beq         |$LN6@Initialize|
  02390	e59f0138	 ldr         r0, [pc, #0x138]
  02394	eb000000	 bl          NKDbgPrintfW
  02398	e3a03001	 mov         r3, #1
  0239c	e58d300c	 str         r3, [sp, #0xC]
  023a0	ea000001	 b           |$LN7@Initialize|
  023a4		 |$LN6@Initialize|
  023a4	e3a03000	 mov         r3, #0
  023a8	e58d300c	 str         r3, [sp, #0xC]
  023ac		 |$LN7@Initialize|

; 789  :         ASSERT(FALSE);

  023ac	ea000002	 b           |$LN8@Initialize|
  023b0	e3a03001	 mov         r3, #1
  023b4	e58d3010	 str         r3, [sp, #0x10]
  023b8	ea000008	 b           |$LN9@Initialize|
  023bc		 |$LN8@Initialize|
  023bc	e3a03c03	 mov         r3, #3, 24
  023c0	e3833015	 orr         r3, r3, #0x15
  023c4	e59f2100	 ldr         r2, [pc, #0x100]
  023c8	e59f10f8	 ldr         r1, [pc, #0xF8]
  023cc	e59f00f0	 ldr         r0, [pc, #0xF0]
  023d0	eb000000	 bl          NKDbgPrintfW
  023d4	e6000010	 __debugbreak_ce
  023d8	e3a03000	 mov         r3, #0
  023dc	e58d3010	 str         r3, [sp, #0x10]
  023e0		 |$LN9@Initialize|

; 790  :         return FALSE;

  023e0	e3a03000	 mov         r3, #0
  023e4	e58d3000	 str         r3, [sp]
  023e8	ea00002f	 b           |$LN2@Initialize|
  023ec		 |$LN1@Initialize|

; 791  :     }
; 792  :     m_hUsbHubConnectEvent = CreateEvent( NULL, FALSE, FALSE, NULL );    

  023ec	e3a03000	 mov         r3, #0
  023f0	e3a02000	 mov         r2, #0
  023f4	e3a01000	 mov         r1, #0
  023f8	e3a00000	 mov         r0, #0
  023fc	eb000000	 bl          CreateEventW
  02400	e58d0014	 str         r0, [sp, #0x14]
  02404	e59d3028	 ldr         r3, [sp, #0x28]
  02408	e2832e1b	 add         r2, r3, #0x1B, 28
  0240c	e59d3014	 ldr         r3, [sp, #0x14]
  02410	e5823000	 str         r3, [r2]

; 793  :     m_hUsbHubDisconnectEvent = CreateEvent( NULL, FALSE, FALSE, NULL );    

  02414	e3a03000	 mov         r3, #0
  02418	e3a02000	 mov         r2, #0
  0241c	e3a01000	 mov         r1, #0
  02420	e3a00000	 mov         r0, #0
  02424	eb000000	 bl          CreateEventW
  02428	e58d0018	 str         r0, [sp, #0x18]
  0242c	e59d3028	 ldr         r3, [sp, #0x28]
  02430	e2832f6d	 add         r2, r3, #0x6D, 30
  02434	e59d3018	 ldr         r3, [sp, #0x18]
  02438	e5823000	 str         r3, [r2]

; 794  :     InitializeCriticalSection(&m_LockEP0DeviceAddress.hLockCS);    

  0243c	e59d3028	 ldr         r3, [sp, #0x28]
  02440	e2830fa2	 add         r0, r3, #0xA2, 30
  02444	eb000000	 bl          InitializeCriticalSection

; 795  :     m_LockEP0DeviceAddress.ucLockEP = 0xff;

  02448	e59d3028	 ldr         r3, [sp, #0x28]
  0244c	e2832fa1	 add         r2, r3, #0xA1, 30
  02450	e3a030ff	 mov         r3, #0xFF
  02454	e5c23000	 strb        r3, [r2]

; 796  : 
; 797  :     DEBUGMSG(ZONE_INIT && ZONE_REGISTERS, (TEXT("CHW::Initialize - signalling global reset\n")));    

  02458	e59f3060	 ldr         r3, [pc, #0x60]
  0245c	e5933440	 ldr         r3, [r3, #0x440]
  02460	e3130002	 tst         r3, #2
  02464	0a000008	 beq         |$LN10@Initialize|
  02468	e59f3050	 ldr         r3, [pc, #0x50]
  0246c	e5933440	 ldr         r3, [r3, #0x440]
  02470	e3130004	 tst         r3, #4
  02474	0a000004	 beq         |$LN10@Initialize|
  02478	e59f003c	 ldr         r0, [pc, #0x3C]
  0247c	eb000000	 bl          NKDbgPrintfW
  02480	e3a03001	 mov         r3, #1
  02484	e58d301c	 str         r3, [sp, #0x1C]
  02488	ea000001	 b           |$LN11@Initialize|
  0248c		 |$LN10@Initialize|
  0248c	e3a03000	 mov         r3, #0
  02490	e58d301c	 str         r3, [sp, #0x1C]
  02494		 |$LN11@Initialize|

; 798  :     m_fifo_avail_addr = 0;    

  02494	e59d3028	 ldr         r3, [sp, #0x28]
  02498	e2832d0a	 add         r2, r3, #0xA, 26
  0249c	e3a03000	 mov         r3, #0
  024a0	e1c230b0	 strh        r3, [r2]

; 799  : 
; 800  :     return TRUE;

  024a4	e3a03001	 mov         r3, #1
  024a8	e58d3000	 str         r3, [sp]
  024ac		 |$LN2@Initialize|

; 801  : }

  024ac	e59d0000	 ldr         r0, [sp]
  024b0	e28dd020	 add         sp, sp, #0x20
  024b4	e89d6000	 ldmia       sp, {sp, lr}
  024b8	e12fff1e	 bx          lr
  024bc		 |$LN15@Initialize|
  024bc		 |$LN16@Initialize|
  024bc	00000000	 DCD         |??_C@_1FG@LGOCOJPG@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?5?$AA?9?$AA?5?$AAs?$AAi?$AAg?$AAn?$AAa?$AAl?$AAl?$AAi?$AAn?$AAg?$AA?5?$AAg?$AAl?$AAo@|
  024c0		 |$LN17@Initialize|
  024c0	00000000	 DCD         |dpCurSettings|
  024c4		 |$LN18@Initialize|
  024c4	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  024c8		 |$LN19@Initialize|
  024c8	00000000	 DCD         |??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@|
  024cc		 |$LN20@Initialize|
  024cc	00000000	 DCD         |??_C@_1LG@MDHHEHIE@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  024d0		 |$LN21@Initialize|
  024d0	00000000	 DCD         |??_C@_1JC@OFBFENBJ@?$AA?9?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?5?$AA?9?$AA?5?$AAz?$AAe?$AAr?$AAo?$AA?5?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr@|
  024d4		 |$LN22@Initialize|
  024d4	00000000	 DCD         |??_C@_1CE@HIKDPBAB@?$AA?$CL?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?6?$AA?$AA@|
  024d8		 |$M44778|

			 ENDP  ; |?Initialize@CHW@@UAAHXZ|, CHW::Initialize


  00068			 AREA	 |.pdata|, PDATA
|$T44793| DCD	|$LN5@DeInitiali|
	DCD	0x40000803
; Function compile flags: /Odtp

  024d8			 AREA	 |.text|, CODE, ARM

  024d8		 |?DeInitialize@CHW@@UAAXXZ| PROC	; CHW::DeInitialize

; 815  : {

  024d8		 |$LN5@DeInitiali|
  024d8	e1a0c00d	 mov         r12, sp
  024dc	e92d0001	 stmdb       sp!, {r0}
  024e0	e92d5000	 stmdb       sp!, {r12, lr}
  024e4		 |$M44790|

; 816  :    // Stop The Controller.
; 817  :     {
; 818  :         // Stop USB Controller
; 819  :     }
; 820  :     m_cBusyPipeList.DeInit();

  024e4	e59d3008	 ldr         r3, [sp, #8]
  024e8	e28300c4	 add         r0, r3, #0xC4
  024ec	eb000000	 bl          |?DeInit@CBusyPipeList@@QAAXXZ|

; 821  : }

  024f0	e89d6000	 ldmia       sp, {sp, lr}
  024f4	e12fff1e	 bx          lr
  024f8		 |$M44791|

			 ENDP  ; |?DeInitialize@CHW@@UAAXXZ|, CHW::DeInitialize

	EXPORT	|??_C@_1GE@MLJIHIHN@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAE?$AAn?$AAt?$AAe?$AAr?$AAO?$AAp?$AAe?$AAr?$AAa?$AAt?$AAi?$AAo?$AAn?$AAa?$AAl?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?5?$AA?9?$AA?5?$AAc?$AAl?$AAe@| [ DATA ] ; `string'
	EXPORT	|?EnterOperationalState@CHW@@QAAXXZ|	; CHW::EnterOperationalState

  00070			 AREA	 |.pdata|, PDATA
|$T44800| DCD	|$LN7@EnterOpera|
	DCD	0x40001c04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GE@MLJIHIHN@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAE?$AAn?$AAt?$AAe?$AAr?$AAO?$AAp?$AAe?$AAr?$AAa?$AAt?$AAi?$AAo?$AAn?$AAa?$AAl?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?5?$AA?9?$AA?5?$AAc?$AAl?$AAe@| DCB "C"
	DCB	0x0, "H", 0x0, "W", 0x0, ":", 0x0, ":", 0x0, "E", 0x0, "n"
	DCB	0x0, "t", 0x0, "e", 0x0, "r", 0x0, "O", 0x0, "p", 0x0, "e"
	DCB	0x0, "r", 0x0, "a", 0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n"
	DCB	0x0, "a", 0x0, "l", 0x0, "S", 0x0, "t", 0x0, "a", 0x0, "t"
	DCB	0x0, "e", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "c", 0x0, "l"
	DCB	0x0, "e", 0x0, "a", 0x0, "r", 0x0, "i", 0x0, "n", 0x0, "g"
	DCB	0x0, " ", 0x0, "s", 0x0, "t", 0x0, "a", 0x0, "t", 0x0, "u"
	DCB	0x0, "s", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "g", 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  024f8			 AREA	 |.text|, CODE, ARM

  024f8		 |?EnterOperationalState@CHW@@QAAXXZ| PROC ; CHW::EnterOperationalState

; 838  : {

  024f8		 |$LN7@EnterOpera|
  024f8	e1a0c00d	 mov         r12, sp
  024fc	e92d0001	 stmdb       sp!, {r0}
  02500	e92d5000	 stmdb       sp!, {r12, lr}
  02504	e24dd004	 sub         sp, sp, #4
  02508		 |$M44797|

; 839  :     
; 840  :     DEBUGMSG(ZONE_INIT && ZONE_REGISTERS && ZONE_VERBOSE, (TEXT("CHW::EnterOperationalState - clearing status reg\n")));

  02508	e59f3054	 ldr         r3, [pc, #0x54]
  0250c	e5933440	 ldr         r3, [r3, #0x440]
  02510	e3130002	 tst         r3, #2
  02514	0a00000c	 beq         |$LN3@EnterOpera|
  02518	e59f3044	 ldr         r3, [pc, #0x44]
  0251c	e5933440	 ldr         r3, [r3, #0x440]
  02520	e3130004	 tst         r3, #4
  02524	0a000008	 beq         |$LN3@EnterOpera|
  02528	e59f3034	 ldr         r3, [pc, #0x34]
  0252c	e5933440	 ldr         r3, [r3, #0x440]
  02530	e3130a01	 tst         r3, #1, 20
  02534	0a000004	 beq         |$LN3@EnterOpera|
  02538	e59f0020	 ldr         r0, [pc, #0x20]
  0253c	eb000000	 bl          NKDbgPrintfW
  02540	e3a03001	 mov         r3, #1
  02544	e58d3000	 str         r3, [sp]
  02548	ea000001	 b           |$LN4@EnterOpera|
  0254c		 |$LN3@EnterOpera|
  0254c	e3a03000	 mov         r3, #0
  02550	e58d3000	 str         r3, [sp]
  02554		 |$LN4@EnterOpera|

; 841  : 
; 842  : }

  02554	e28dd004	 add         sp, sp, #4
  02558	e89d6000	 ldmia       sp, {sp, lr}
  0255c	e12fff1e	 bx          lr
  02560		 |$LN8@EnterOpera|
  02560		 |$LN9@EnterOpera|
  02560	00000000	 DCD         |??_C@_1GE@MLJIHIHN@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAE?$AAn?$AAt?$AAe?$AAr?$AAO?$AAp?$AAe?$AAr?$AAa?$AAt?$AAi?$AAo?$AAn?$AAa?$AAl?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?5?$AA?9?$AA?5?$AAc?$AAl?$AAe@|
  02564		 |$LN10@EnterOpera|
  02564	00000000	 DCD         |dpCurSettings|
  02568		 |$M44798|

			 ENDP  ; |?EnterOperationalState@CHW@@QAAXXZ|, CHW::EnterOperationalState

	EXPORT	|?GetOTGContext@CHcd@@QAAPAXXZ|		; CHcd::GetOTGContext

  00078			 AREA	 |.pdata|, PDATA
|$T44809| DCD	|$LN6@GetFrameNu|
	DCD	0x40002104
; Function compile flags: /Odtp

  02568			 AREA	 |.text|, CODE, ARM

  02568		 |?GetFrameNumber@CHW@@UAAHPAK@Z| PROC	; CHW::GetFrameNumber

; 855  : {

  02568		 |$LN6@GetFrameNu|
  02568	e1a0c00d	 mov         r12, sp
  0256c	e92d0003	 stmdb       sp!, {r0, r1}
  02570	e92d5000	 stmdb       sp!, {r12, lr}
  02574	e24dd00c	 sub         sp, sp, #0xC
  02578		 |$M44806|

; 856  :     PHSMUSB_T pOTG = (PHSMUSB_T)GetOTGContext();

  02578	e59d0014	 ldr         r0, [sp, #0x14]
  0257c	eb000000	 bl          |?GetOTGContext@CHcd@@QAAPAXXZ|
  02580	e58d0008	 str         r0, [sp, #8]
  02584	e59d3008	 ldr         r3, [sp, #8]
  02588	e58d3000	 str         r3, [sp]

; 857  :     if (pOTG == NULL)

  0258c	e59d3000	 ldr         r3, [sp]
  02590	e3530000	 cmp         r3, #0
  02594	1a000002	 bne         |$LN1@GetFrameNu|

; 858  :         return FALSE;

  02598	e3a03000	 mov         r3, #0
  0259c	e58d3004	 str         r3, [sp, #4]
  025a0	ea00000d	 b           |$LN2@GetFrameNu|
  025a4		 |$LN1@GetFrameNu|

; 859  : 
; 860  :     *lpdwFrameNumber = INREG16(&pOTG->pUsbGenRegs->Frame);

  025a4	e59d3000	 ldr         r3, [sp]
  025a8	e2833020	 add         r3, r3, #0x20
  025ac	e5933000	 ldr         r3, [r3]
  025b0	e283100c	 add         r1, r3, #0xC
  025b4	e5d13001	 ldrb        r3, [r1, #1]
  025b8	e1a03403	 mov         r3, r3, lsl #8
  025bc	e1a02803	 mov         r2, r3, lsl #16
  025c0	e1a02822	 mov         r2, r2, lsr #16
  025c4	e5d13000	 ldrb        r3, [r1]
  025c8	e1832002	 orr         r2, r3, r2
  025cc	e59d3018	 ldr         r3, [sp, #0x18]
  025d0	e5832000	 str         r2, [r3]

; 861  :     return TRUE;

  025d4	e3a03001	 mov         r3, #1
  025d8	e58d3004	 str         r3, [sp, #4]
  025dc		 |$LN2@GetFrameNu|

; 862  : }

  025dc	e59d0004	 ldr         r0, [sp, #4]
  025e0	e28dd00c	 add         sp, sp, #0xC
  025e4	e89d6000	 ldmia       sp, {sp, lr}
  025e8	e12fff1e	 bx          lr
  025ec		 |$M44807|

			 ENDP  ; |?GetFrameNumber@CHW@@UAAHPAK@Z|, CHW::GetFrameNumber

; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\musb\musbhcd\usb2com\hcd.hpp

  00000			 AREA	 |.pdata|, PDATA
|$T44815| DCD	|$LN5@GetOTGCont|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetOTGContext@CHcd@@QAAPAXXZ| PROC	; CHcd::GetOTGContext

; 121  :     PVOID   GetOTGContext() { return m_pOTG;};

  00000		 |$LN5@GetOTGCont|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M44812|
  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e28330b4	 add         r3, r3, #0xB4
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3000	 str         r3, [sp]
  00020	e59d0000	 ldr         r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M44813|

			 ENDP  ; |?GetOTGContext@CHcd@@QAAPAXXZ|, CHcd::GetOTGContext


  00080			 AREA	 |.pdata|, PDATA
|$T44823| DCD	|$LN5@GetFrameLe|
	DCD	0x40000e04
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\musb\musbhcd\musbmhdrc\chw.cpp

  025ec			 AREA	 |.text|, CODE, ARM

  025ec		 |?GetFrameLength@CHW@@UAAHPAG@Z| PROC	; CHW::GetFrameLength

; 876  : {

  025ec		 |$LN5@GetFrameLe|
  025ec	e1a0c00d	 mov         r12, sp
  025f0	e92d0003	 stmdb       sp!, {r0, r1}
  025f4	e92d5000	 stmdb       sp!, {r12, lr}
  025f8	e24dd004	 sub         sp, sp, #4
  025fc		 |$M44820|

; 877  :     *lpuFrameLength=60000; // same as EHCI

  025fc	e59d2010	 ldr         r2, [sp, #0x10]
  02600	e3a03cea	 mov         r3, #0xEA, 24
  02604	e3833060	 orr         r3, r3, #0x60
  02608	e1c230b0	 strh        r3, [r2]

; 878  :     return TRUE;

  0260c	e3a03001	 mov         r3, #1
  02610	e58d3000	 str         r3, [sp]

; 879  : }

  02614	e59d0000	 ldr         r0, [sp]
  02618	e28dd004	 add         sp, sp, #4
  0261c	e89d6000	 ldmia       sp, {sp, lr}
  02620	e12fff1e	 bx          lr
  02624		 |$M44821|

			 ENDP  ; |?GetFrameLength@CHW@@UAAHPAG@Z|, CHW::GetFrameLength


  00088			 AREA	 |.pdata|, PDATA
|$T44829| DCD	|$LN5@SetFrameLe|
	DCD	0x40000c04
; Function compile flags: /Odtp

  02624			 AREA	 |.text|, CODE, ARM

  02624		 |?SetFrameLength@CHW@@UAAHPAXG@Z| PROC	; CHW::SetFrameLength

; 896  : {

  02624		 |$LN5@SetFrameLe|
  02624	e1a0c00d	 mov         r12, sp
  02628	e92d0007	 stmdb       sp!, {r0 - r2}
  0262c	e92d5000	 stmdb       sp!, {r12, lr}
  02630	e24dd008	 sub         sp, sp, #8
  02634		 |$M44826|

; 897  :     BOOL fSuccess = FALSE;

  02634	e3a03000	 mov         r3, #0
  02638	e58d3000	 str         r3, [sp]

; 898  : 
; 899  :     // to prevent multiple threads from simultaneously adjusting the
; 900  :     // frame length, InterlockedTestExchange is used. This is
; 901  :     // cheaper than using a critical section.
; 902  :     return fSuccess;

  0263c	e59d3000	 ldr         r3, [sp]
  02640	e58d3004	 str         r3, [sp, #4]

; 903  : }

  02644	e59d0004	 ldr         r0, [sp, #4]
  02648	e28dd008	 add         sp, sp, #8
  0264c	e89d6000	 ldmia       sp, {sp, lr}
  02650	e12fff1e	 bx          lr
  02654		 |$M44827|

			 ENDP  ; |?SetFrameLength@CHW@@UAAHPAXG@Z|, CHW::SetFrameLength


  00090			 AREA	 |.pdata|, PDATA
|$T44835| DCD	|$LN5@StopAdjust|
	DCD	0x40000a04
; Function compile flags: /Odtp

  02654			 AREA	 |.text|, CODE, ARM

  02654		 |?StopAdjustingFrame@CHW@@UAAHXZ| PROC	; CHW::StopAdjustingFrame

; 916  : {

  02654		 |$LN5@StopAdjust|
  02654	e1a0c00d	 mov         r12, sp
  02658	e92d0001	 stmdb       sp!, {r0}
  0265c	e92d5000	 stmdb       sp!, {r12, lr}
  02660	e24dd004	 sub         sp, sp, #4
  02664		 |$M44832|

; 917  :     return TRUE;

  02664	e3a03001	 mov         r3, #1
  02668	e58d3000	 str         r3, [sp]

; 918  : }

  0266c	e59d0000	 ldr         r0, [sp]
  02670	e28dd004	 add         sp, sp, #4
  02674	e89d6000	 ldmia       sp, {sp, lr}
  02678	e12fff1e	 bx          lr
  0267c		 |$M44833|

			 ENDP  ; |?StopAdjustingFrame@CHW@@UAAHXZ|, CHW::StopAdjustingFrame

	EXPORT	|?CeResumeThread@CHW@@AAAKXZ|		; CHW::CeResumeThread
	EXPORT	|?CeResumeThreadStub@CHW@@CAKPAX@Z|	; CHW::CeResumeThreadStub

  00098			 AREA	 |.pdata|, PDATA
|$T44841| DCD	|$LN5@CeResumeTh|
	DCD	0x40000d04
; Function compile flags: /Odtp

  0267c			 AREA	 |.text|, CODE, ARM

  0267c		 |?CeResumeThreadStub@CHW@@CAKPAX@Z| PROC ; CHW::CeResumeThreadStub

; 920  : {

  0267c		 |$LN5@CeResumeTh|
  0267c	e1a0c00d	 mov         r12, sp
  02680	e92d0001	 stmdb       sp!, {r0}
  02684	e92d5000	 stmdb       sp!, {r12, lr}
  02688	e24dd008	 sub         sp, sp, #8
  0268c		 |$M44838|

; 921  :     return ((CHW *)context)->CeResumeThread ( );

  0268c	e59d0010	 ldr         r0, [sp, #0x10]
  02690	eb000000	 bl          |?CeResumeThread@CHW@@AAAKXZ|
  02694	e58d0004	 str         r0, [sp, #4]
  02698	e59d3004	 ldr         r3, [sp, #4]
  0269c	e58d3000	 str         r3, [sp]

; 922  : }

  026a0	e59d0000	 ldr         r0, [sp]
  026a4	e28dd008	 add         sp, sp, #8
  026a8	e89d6000	 ldmia       sp, {sp, lr}
  026ac	e12fff1e	 bx          lr
  026b0		 |$M44839|

			 ENDP  ; |?CeResumeThreadStub@CHW@@CAKPAX@Z|, CHW::CeResumeThreadStub

	EXPORT	|??_C@_1GK@GGOFBDKF@?$AAU?$AAS?$AAB?$AA?5?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAr?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAH?$AAC?$AAD?$AA?5?$AAa?$AAt?$AA?5?$AAC?$AAE?$AA?5@| [ DATA ] ; `string'
	IMPORT	|Sleep|

  000a0			 AREA	 |.pdata|, PDATA
|$T44853| DCD	|$LN15@CeResumeTh@2|
	DCD	0x40006e04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GK@GGOFBDKF@?$AAU?$AAS?$AAB?$AA?5?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAr?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAH?$AAC?$AAD?$AA?5?$AAa?$AAt?$AA?5?$AAC?$AAE?$AA?5@| DCB "U"
	DCB	0x0, "S", 0x0, "B", 0x0, " ", 0x0, "c", 0x0, "a", 0x0, "n"
	DCB	0x0, "n", 0x0, "o", 0x0, "t", 0x0, " ", 0x0, "r", 0x0, "e"
	DCB	0x0, "i", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, " ", 0x0, "t"
	DCB	0x0, "h", 0x0, "e", 0x0, " ", 0x0, "H", 0x0, "C", 0x0, "D"
	DCB	0x0, " ", 0x0, "a", 0x0, "t", 0x0, " ", 0x0, "C", 0x0, "E"
	DCB	0x0, " ", 0x0, "r", 0x0, "e", 0x0, "s", 0x0, "u", 0x0, "m"
	DCB	0x0, "e", 0x0, ";", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "t"
	DCB	0x0, "r", 0x0, "y", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, "."
	DCB	0x0, ".", 0x0, ".", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  026b0			 AREA	 |.text|, CODE, ARM

  026b0		 |?CeResumeThread@CHW@@AAAKXZ| PROC	; CHW::CeResumeThread

; 942  : {

  026b0		 |$LN15@CeResumeTh@2|
  026b0	e1a0c00d	 mov         r12, sp
  026b4	e92d0001	 stmdb       sp!, {r0}
  026b8	e92d5000	 stmdb       sp!, {r12, lr}
  026bc	e24dd014	 sub         sp, sp, #0x14
  026c0		 |$M44850|

; 943  :     // reconstruct the objects at the same addresses where they were before;
; 944  :     // this allows us not to have to alert the PDD that the addresses have changed.
; 945  : 
; 946  :     DEBUGCHK( g_fPowerResuming == FALSE );

  026c0	e59d301c	 ldr         r3, [sp, #0x1C]
  026c4	e2833faa	 add         r3, r3, #0xAA, 30
  026c8	e5933000	 ldr         r3, [r3]
  026cc	e3530000	 cmp         r3, #0
  026d0	1a000002	 bne         |$LN7@CeResumeTh@2|
  026d4	e3a03001	 mov         r3, #1
  026d8	e58d3004	 str         r3, [sp, #4]
  026dc	ea000008	 b           |$LN8@CeResumeTh@2|
  026e0		 |$LN7@CeResumeTh@2|
  026e0	e3a03c03	 mov         r3, #3, 24
  026e4	e38330b2	 orr         r3, r3, #0xB2
  026e8	e59f2174	 ldr         r2, [pc, #0x174]
  026ec	e59f1164	 ldr         r1, [pc, #0x164]
  026f0	e59f0164	 ldr         r0, [pc, #0x164]
  026f4	eb000000	 bl          NKDbgPrintfW
  026f8	e6000010	 __debugbreak_ce
  026fc	e3a03000	 mov         r3, #0
  02700	e58d3004	 str         r3, [sp, #4]
  02704		 |$LN8@CeResumeTh@2|

; 947  : 
; 948  :     // order is important! resuming indicates that the hcd object is temporarily invalid
; 949  :     // while powerup simply signals that a powerup event has occurred. once the powerup
; 950  :     // flag is cleared, we will repeat this whole sequence should it get resignalled.
; 951  :     g_fPowerUpFlag = FALSE;

  02704	e59d301c	 ldr         r3, [sp, #0x1C]
  02708	e2832fa9	 add         r2, r3, #0xA9, 30
  0270c	e3a03000	 mov         r3, #0
  02710	e5823000	 str         r3, [r2]

; 952  :     g_fPowerResuming = TRUE;

  02714	e59d301c	 ldr         r3, [sp, #0x1C]
  02718	e2832faa	 add         r2, r3, #0xAA, 30
  0271c	e3a03001	 mov         r3, #1
  02720	e5823000	 str         r3, [r2]

; 953  : 
; 954  :     DeviceDeInitialize();

  02724	e59d301c	 ldr         r3, [sp, #0x1C]
  02728	e5933000	 ldr         r3, [r3]
  0272c	e2833010	 add         r3, r3, #0x10
  02730	e59d001c	 ldr         r0, [sp, #0x1C]
  02734	e5933000	 ldr         r3, [r3]
  02738	e1a0e00f	 mov         lr, pc
  0273c	e12fff13	 bx          r3
  02740		 |$LN4@CeResumeTh@2|

; 955  :     for(;;) {  // breaks out upon successful reinit of the object
; 956  : 
; 957  :         if (DeviceInitialize())

  02740	e59d301c	 ldr         r3, [sp, #0x1C]
  02744	e5933000	 ldr         r3, [r3]
  02748	e283300c	 add         r3, r3, #0xC
  0274c	e59d001c	 ldr         r0, [sp, #0x1C]
  02750	e5933000	 ldr         r3, [r3]
  02754	e1a0e00f	 mov         lr, pc
  02758	e12fff13	 bx          r3
  0275c	e58d0008	 str         r0, [sp, #8]
  02760	e59d3008	 ldr         r3, [sp, #8]
  02764	e3530000	 cmp         r3, #0
  02768	0a000000	 beq         |$LN2@CeResumeTh@2|

; 958  :             break;

  0276c	ea000021	 b           |$LN3@CeResumeTh@2|
  02770		 |$LN2@CeResumeTh@2|

; 959  :         // getting here means we couldn't reinit the HCD object!
; 960  :         ASSERT(FALSE);

  02770	ea000002	 b           |$LN9@CeResumeTh@2|
  02774	e3a03001	 mov         r3, #1
  02778	e58d300c	 str         r3, [sp, #0xC]
  0277c	ea000007	 b           |$LN10@CeResumeTh@2|
  02780		 |$LN9@CeResumeTh@2|
  02780	e3a03d0f	 mov         r3, #0xF, 26
  02784	e59f20d8	 ldr         r2, [pc, #0xD8]
  02788	e59f10d0	 ldr         r1, [pc, #0xD0]
  0278c	e59f00c8	 ldr         r0, [pc, #0xC8]
  02790	eb000000	 bl          NKDbgPrintfW
  02794	e6000010	 __debugbreak_ce
  02798	e3a03000	 mov         r3, #0
  0279c	e58d300c	 str         r3, [sp, #0xC]
  027a0		 |$LN10@CeResumeTh@2|

; 961  :         DEBUGMSG(ZONE_ERROR, (TEXT("USB cannot reinit the HCD at CE resume; retrying...\n")));

  027a0	e59f30b0	 ldr         r3, [pc, #0xB0]
  027a4	e5933440	 ldr         r3, [r3, #0x440]
  027a8	e3130901	 tst         r3, #1, 18
  027ac	0a000004	 beq         |$LN11@CeResumeTh@2|
  027b0	e59f009c	 ldr         r0, [pc, #0x9C]
  027b4	eb000000	 bl          NKDbgPrintfW
  027b8	e3a03001	 mov         r3, #1
  027bc	e58d3010	 str         r3, [sp, #0x10]
  027c0	ea000001	 b           |$LN12@CeResumeTh@2|
  027c4		 |$LN11@CeResumeTh@2|
  027c4	e3a03000	 mov         r3, #0
  027c8	e58d3010	 str         r3, [sp, #0x10]
  027cc		 |$LN12@CeResumeTh@2|

; 962  :         DeviceDeInitialize();

  027cc	e59d301c	 ldr         r3, [sp, #0x1C]
  027d0	e5933000	 ldr         r3, [r3]
  027d4	e2833010	 add         r3, r3, #0x10
  027d8	e59d001c	 ldr         r0, [sp, #0x1C]
  027dc	e5933000	 ldr         r3, [r3]
  027e0	e1a0e00f	 mov         lr, pc
  027e4	e12fff13	 bx          r3

; 963  :         Sleep(15000);

  027e8	e3a00c3a	 mov         r0, #0x3A, 24
  027ec	e3800098	 orr         r0, r0, #0x98
  027f0	eb000000	 bl          Sleep

; 964  :     }

  027f4	eaffffd1	 b           |$LN4@CeResumeTh@2|
  027f8		 |$LN3@CeResumeTh@2|

; 965  : 
; 966  :     // the hcd object is valid again. if a power event occurred between the two flag
; 967  :     // assignments above then the IST will reinitiate this sequence.
; 968  :     g_fPowerResuming = FALSE;

  027f8	e59d301c	 ldr         r3, [sp, #0x1C]
  027fc	e2832faa	 add         r2, r3, #0xAA, 30
  02800	e3a03000	 mov         r3, #0
  02804	e5823000	 str         r3, [r2]

; 969  :     if (g_fPowerUpFlag)

  02808	e59d301c	 ldr         r3, [sp, #0x1C]
  0280c	e2833fa9	 add         r3, r3, #0xA9, 30
  02810	e5933000	 ldr         r3, [r3]
  02814	e3530000	 cmp         r3, #0
  02818	0a000007	 beq         |$LN1@CeResumeTh@2|

; 970  :         PowerMgmtCallback(TRUE);

  0281c	e3a01001	 mov         r1, #1
  02820	e59d301c	 ldr         r3, [sp, #0x1C]
  02824	e5933000	 ldr         r3, [r3]
  02828	e2833018	 add         r3, r3, #0x18
  0282c	e59d001c	 ldr         r0, [sp, #0x1C]
  02830	e5933000	 ldr         r3, [r3]
  02834	e1a0e00f	 mov         lr, pc
  02838	e12fff13	 bx          r3
  0283c		 |$LN1@CeResumeTh@2|

; 971  :     
; 972  :     return 0;

  0283c	e3a03000	 mov         r3, #0
  02840	e58d3000	 str         r3, [sp]

; 973  : }

  02844	e59d0000	 ldr         r0, [sp]
  02848	e28dd014	 add         sp, sp, #0x14
  0284c	e89d6000	 ldmia       sp, {sp, lr}
  02850	e12fff1e	 bx          lr
  02854		 |$LN16@CeResumeTh@2|
  02854		 |$LN17@CeResumeTh@2|
  02854	00000000	 DCD         |??_C@_1GK@GGOFBDKF@?$AAU?$AAS?$AAB?$AA?5?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAr?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAH?$AAC?$AAD?$AA?5?$AAa?$AAt?$AA?5?$AAC?$AAE?$AA?5@|
  02858		 |$LN18@CeResumeTh@2|
  02858	00000000	 DCD         |dpCurSettings|
  0285c		 |$LN19@CeResumeTh@2|
  0285c	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  02860		 |$LN20@CeResumeTh@2|
  02860	00000000	 DCD         |??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@|
  02864		 |$LN21@CeResumeTh@2|
  02864	00000000	 DCD         |??_C@_1LG@MDHHEHIE@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  02868		 |$M44851|

			 ENDP  ; |?CeResumeThread@CHW@@AAAKXZ|, CHW::CeResumeThread

	EXPORT	|??_C@_1DA@LCABANPH@?$AAC?$AAo?$AAn?$AAn?$AAe?$AAc?$AAt?$AA?5?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CM@CMCFEGOH@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAP?$AAo?$AAr?$AAt?$AAS?$AAp?$AAe?$AAe?$AAd?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAs?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_15HEIOHGBB@?$AAH?$AAS?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_15EOIEBHGB@?$AAF?$AAS?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_15OPBPDEAH@?$AAL?$AAS?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CK@OCOCBJAD@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAD?$AAe?$AAv?$AAC?$AAt?$AAl?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@IAMAIDG@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FA@HGGGCNPM@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAD?$AAi?$AAd?$AAP?$AAo?$AAr?$AAt?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AAC?$AAh?$AAa?$AAn?$AAg?$AAe?$AA?3?$AA?5?$AAA?$AAf?$AAt?$AAe?$AAr?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CO@GCBJFEHN@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAB?$AA4?$AA?5?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EO@BCJPEHIC@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAD?$AAi?$AAd?$AAP?$AAo?$AAr?$AAt?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AAC?$AAh?$AAa?$AAn?$AAg?$AAe?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAp?$AAo?$AAr@| [ DATA ] ; `string'

  000a8			 AREA	 |.pdata|, PDATA
|$T44885| DCD	|$LN31@DidPortSta|
	DCD	0x4000ca04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@LCABANPH@?$AAC?$AAo?$AAn?$AAn?$AAe?$AAc?$AAt?$AA?5?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "C"
	DCB	0x0, "o", 0x0, "n", 0x0, "n", 0x0, "e", 0x0, "c", 0x0, "t"
	DCB	0x0, " ", 0x0, "S", 0x0, "t", 0x0, "a", 0x0, "t", 0x0, "u"
	DCB	0x0, "s", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@CMCFEGOH@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAP?$AAo?$AAr?$AAt?$AAS?$AAp?$AAe?$AAe?$AAd?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAs?$AA?$AN?$AA?6?$AA?$AA@| DCB "C"
	DCB	0x0, "H", 0x0, "W", 0x0, ":", 0x0, ":", 0x0, "P", 0x0, "o"
	DCB	0x0, "r", 0x0, "t", 0x0, "S", 0x0, "p", 0x0, "e", 0x0, "e"
	DCB	0x0, "d", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%", 0x0, "s"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_15HEIOHGBB@?$AAH?$AAS?$AA?$AA@| DCB "H", 0x0, "S", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_15EOIEBHGB@?$AAF?$AAS?$AA?$AA@| DCB "F", 0x0, "S", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_15OPBPDEAH@?$AAL?$AAS?$AA?$AA@| DCB "L", 0x0, "S", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CK@OCOCBJAD@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAD?$AAe?$AAv?$AAC?$AAt?$AAl?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "C"
	DCB	0x0, "H", 0x0, "W", 0x0, ":", 0x0, ":", 0x0, "D", 0x0, "e"
	DCB	0x0, "v", 0x0, "C", 0x0, "t", 0x0, "l", 0x0, " ", 0x0, "="
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@IAMAIDG@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "C"
	DCB	0x0, "H", 0x0, "W", 0x0, ":", 0x0, ":", 0x0, "P", 0x0, "o"
	DCB	0x0, "w", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, "=", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FA@HGGGCNPM@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAD?$AAi?$AAd?$AAP?$AAo?$AAr?$AAt?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AAC?$AAh?$AAa?$AAn?$AAg?$AAe?$AA?3?$AA?5?$AAA?$AAf?$AAt?$AAe?$AAr?$AA?5@| DCB "C"
	DCB	0x0, "H", 0x0, "W", 0x0, ":", 0x0, ":", 0x0, "D", 0x0, "i"
	DCB	0x0, "d", 0x0, "P", 0x0, "o", 0x0, "r", 0x0, "t", 0x0, "S"
	DCB	0x0, "t", 0x0, "a", 0x0, "t", 0x0, "u", 0x0, "s", 0x0, "C"
	DCB	0x0, "h", 0x0, "a", 0x0, "n", 0x0, "g", 0x0, "e", 0x0, ":"
	DCB	0x0, " ", 0x0, "A", 0x0, "f", 0x0, "t", 0x0, "e", 0x0, "r"
	DCB	0x0, " ", 0x0, "r", 0x0, "e", 0x0, "s", 0x0, "e", 0x0, "t"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@GCBJFEHN@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAB?$AA4?$AA?5?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "C"
	DCB	0x0, "H", 0x0, "W", 0x0, ":", 0x0, ":", 0x0, "B", 0x0, "4"
	DCB	0x0, " ", 0x0, "P", 0x0, "o", 0x0, "w", 0x0, "e", 0x0, "r"
	DCB	0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EO@BCJPEHIC@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAD?$AAi?$AAd?$AAP?$AAo?$AAr?$AAt?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AAC?$AAh?$AAa?$AAn?$AAg?$AAe?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAp?$AAo?$AAr@| DCB "C"
	DCB	0x0, "H", 0x0, "W", 0x0, ":", 0x0, ":", 0x0, "D", 0x0, "i"
	DCB	0x0, "d", 0x0, "P", 0x0, "o", 0x0, "r", 0x0, "t", 0x0, "S"
	DCB	0x0, "t", 0x0, "a", 0x0, "t", 0x0, "u", 0x0, "s", 0x0, "C"
	DCB	0x0, "h", 0x0, "a", 0x0, "n", 0x0, "g", 0x0, "e", 0x0, " "
	DCB	0x0, "f", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "p", 0x0, "o"
	DCB	0x0, "r", 0x0, "t", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  02868			 AREA	 |.text|, CODE, ARM

  02868		 |?DidPortStatusChange@CHW@@UAAHE@Z| PROC ; CHW::DidPortStatusChange

; 986  : {

  02868		 |$LN31@DidPortSta|
  02868	e1a0c00d	 mov         r12, sp
  0286c	e92d0003	 stmdb       sp!, {r0, r1}
  02870	e92d5000	 stmdb       sp!, {r12, lr}
  02874	e24dd038	 sub         sp, sp, #0x38
  02878		 |$M44882|

; 987  :     PHSMUSB_T pOTG;
; 988  :     DWORD PortSpeed = 0x00; // 0x01 - LS, 0x10 - FS, 0x11 - HS

  02878	e3a03000	 mov         r3, #0
  0287c	e58d3000	 str         r3, [sp]

; 989  :     // port == specifies root hub itself, whose status never changes
; 990  :     if ( port > 0 ) {

  02880	e5dd3044	 ldrb        r3, [sp, #0x44]
  02884	e3530000	 cmp         r3, #0
  02888	da0000af	 ble         |$LN6@DidPortSta|

; 991  :         DEBUGMSG(ZONE_VERBOSE, (TEXT("CHW::DidPortStatusChange for port %d\r\n"), port));

  0288c	e59f32d4	 ldr         r3, [pc, #0x2D4]
  02890	e5933440	 ldr         r3, [r3, #0x440]
  02894	e3130a01	 tst         r3, #1, 20
  02898	0a000006	 beq         |$LN9@DidPortSta|
  0289c	e5dd3044	 ldrb        r3, [sp, #0x44]
  028a0	e1a01003	 mov         r1, r3
  028a4	e59f02e0	 ldr         r0, [pc, #0x2E0]
  028a8	eb000000	 bl          NKDbgPrintfW
  028ac	e3a03001	 mov         r3, #1
  028b0	e58d300c	 str         r3, [sp, #0xC]
  028b4	ea000001	 b           |$LN10@DidPortSta|
  028b8		 |$LN9@DidPortSta|
  028b8	e3a03000	 mov         r3, #0
  028bc	e58d300c	 str         r3, [sp, #0xC]
  028c0		 |$LN10@DidPortSta|

; 992  :         // Reset the port now and make sure it is okay
; 993  :         pOTG = (PHSMUSB_T)GetOTGContext();

  028c0	e59d0040	 ldr         r0, [sp, #0x40]
  028c4	eb000000	 bl          |?GetOTGContext@CHcd@@QAAPAXXZ|
  028c8	e58d0010	 str         r0, [sp, #0x10]
  028cc	e59d3010	 ldr         r3, [sp, #0x10]
  028d0	e58d3004	 str         r3, [sp, #4]

; 994  :         if (pOTG == NULL)

  028d4	e59d3004	 ldr         r3, [sp, #4]
  028d8	e3530000	 cmp         r3, #0
  028dc	1a000002	 bne         |$LN5@DidPortSta|

; 995  :             return FALSE;

  028e0	e3a03000	 mov         r3, #0
  028e4	e58d3008	 str         r3, [sp, #8]
  028e8	ea000099	 b           |$LN7@DidPortSta|
  028ec		 |$LN5@DidPortSta|

; 996  : 
; 997  :         DEBUGMSG(ZONE_HCD, (TEXT("CHW::B4 Power = 0x%x\r\n"), pOTG->pUsbGenRegs->Power));

  028ec	e59f3274	 ldr         r3, [pc, #0x274]
  028f0	e5933440	 ldr         r3, [r3, #0x440]
  028f4	e3130001	 tst         r3, #1
  028f8	0a00000a	 beq         |$LN11@DidPortSta|
  028fc	e59d3004	 ldr         r3, [sp, #4]
  02900	e2833020	 add         r3, r3, #0x20
  02904	e5933000	 ldr         r3, [r3]
  02908	e2833001	 add         r3, r3, #1
  0290c	e5d33000	 ldrb        r3, [r3]
  02910	e1a01003	 mov         r1, r3
  02914	e59f026c	 ldr         r0, [pc, #0x26C]
  02918	eb000000	 bl          NKDbgPrintfW
  0291c	e3a03001	 mov         r3, #1
  02920	e58d3014	 str         r3, [sp, #0x14]
  02924	ea000001	 b           |$LN12@DidPortSta|
  02928		 |$LN11@DidPortSta|
  02928	e3a03000	 mov         r3, #0
  0292c	e58d3014	 str         r3, [sp, #0x14]
  02930		 |$LN12@DidPortSta|

; 998  :         ResetAndEnablePort(port);

  02930	e5dd1044	 ldrb        r1, [sp, #0x44]
  02934	e59d3040	 ldr         r3, [sp, #0x40]
  02938	e5933000	 ldr         r3, [r3]
  0293c	e2833030	 add         r3, r3, #0x30
  02940	e59d0040	 ldr         r0, [sp, #0x40]
  02944	e5933000	 ldr         r3, [r3]
  02948	e1a0e00f	 mov         lr, pc
  0294c	e12fff13	 bx          r3

; 999  :         DEBUGMSG(ZONE_HCD, (TEXT("CHW::DidPortStatusChange: After reset\r\n")));

  02950	e59f3210	 ldr         r3, [pc, #0x210]
  02954	e5933440	 ldr         r3, [r3, #0x440]
  02958	e3130001	 tst         r3, #1
  0295c	0a000004	 beq         |$LN13@DidPortSta|
  02960	e59f021c	 ldr         r0, [pc, #0x21C]
  02964	eb000000	 bl          NKDbgPrintfW
  02968	e3a03001	 mov         r3, #1
  0296c	e58d3018	 str         r3, [sp, #0x18]
  02970	ea000001	 b           |$LN14@DidPortSta|
  02974		 |$LN13@DidPortSta|
  02974	e3a03000	 mov         r3, #0
  02978	e58d3018	 str         r3, [sp, #0x18]
  0297c		 |$LN14@DidPortSta|

; 1000 :         DEBUGMSG(ZONE_HCD, (TEXT("CHW::Power = 0x%x\r\n"), INREG8(&pOTG->pUsbGenRegs->Power)));

  0297c	e59f31e4	 ldr         r3, [pc, #0x1E4]
  02980	e5933440	 ldr         r3, [r3, #0x440]
  02984	e3130001	 tst         r3, #1
  02988	0a00000a	 beq         |$LN15@DidPortSta|
  0298c	e59d3004	 ldr         r3, [sp, #4]
  02990	e2833020	 add         r3, r3, #0x20
  02994	e5933000	 ldr         r3, [r3]
  02998	e2833001	 add         r3, r3, #1
  0299c	e5d33000	 ldrb        r3, [r3]
  029a0	e1a01003	 mov         r1, r3
  029a4	e59f01d4	 ldr         r0, [pc, #0x1D4]
  029a8	eb000000	 bl          NKDbgPrintfW
  029ac	e3a03001	 mov         r3, #1
  029b0	e58d301c	 str         r3, [sp, #0x1C]
  029b4	ea000001	 b           |$LN16@DidPortSta|
  029b8		 |$LN15@DidPortSta|
  029b8	e3a03000	 mov         r3, #0
  029bc	e58d301c	 str         r3, [sp, #0x1C]
  029c0		 |$LN16@DidPortSta|

; 1001 :         DEBUGMSG(ZONE_HCD, (TEXT("CHW::DevCtl = 0x%x\r\n"), INREG8(&pOTG->pUsbGenRegs->DevCtl)));

  029c0	e59f31a0	 ldr         r3, [pc, #0x1A0]
  029c4	e5933440	 ldr         r3, [r3, #0x440]
  029c8	e3130001	 tst         r3, #1
  029cc	0a00000a	 beq         |$LN17@DidPortSta|
  029d0	e59d3004	 ldr         r3, [sp, #4]
  029d4	e2833020	 add         r3, r3, #0x20
  029d8	e5933000	 ldr         r3, [r3]
  029dc	e2833060	 add         r3, r3, #0x60
  029e0	e5d33000	 ldrb        r3, [r3]
  029e4	e1a01003	 mov         r1, r3
  029e8	e59f018c	 ldr         r0, [pc, #0x18C]
  029ec	eb000000	 bl          NKDbgPrintfW
  029f0	e3a03001	 mov         r3, #1
  029f4	e58d3020	 str         r3, [sp, #0x20]
  029f8	ea000001	 b           |$LN18@DidPortSta|
  029fc		 |$LN17@DidPortSta|
  029fc	e3a03000	 mov         r3, #0
  02a00	e58d3020	 str         r3, [sp, #0x20]
  02a04		 |$LN18@DidPortSta|

; 1002 :         if (INREG8(&pOTG->pUsbGenRegs->DevCtl) & DEVCTL_LSDEV)

  02a04	e59d3004	 ldr         r3, [sp, #4]
  02a08	e2833020	 add         r3, r3, #0x20
  02a0c	e5933000	 ldr         r3, [r3]
  02a10	e2833060	 add         r3, r3, #0x60
  02a14	e5d33000	 ldrb        r3, [r3]
  02a18	e3130020	 tst         r3, #0x20
  02a1c	0a000002	 beq         |$LN4@DidPortSta|

; 1003 :             PortSpeed = 0x01;

  02a20	e3a03001	 mov         r3, #1
  02a24	e58d3000	 str         r3, [sp]
  02a28	ea000014	 b           |$LN3@DidPortSta|
  02a2c		 |$LN4@DidPortSta|

; 1004 :         else if (INREG8(&pOTG->pUsbGenRegs->DevCtl) & DEVCTL_FSDEV) 

  02a2c	e59d3004	 ldr         r3, [sp, #4]
  02a30	e2833020	 add         r3, r3, #0x20
  02a34	e5933000	 ldr         r3, [r3]
  02a38	e2833060	 add         r3, r3, #0x60
  02a3c	e5d33000	 ldrb        r3, [r3]
  02a40	e3130040	 tst         r3, #0x40
  02a44	0a00000d	 beq         |$LN2@DidPortSta|

; 1005 :             PortSpeed = ((INREG8(&pOTG->pUsbGenRegs->Power) & POWER_HSMODE)? 0x11: 0x10);               

  02a48	e59d3004	 ldr         r3, [sp, #4]
  02a4c	e2833020	 add         r3, r3, #0x20
  02a50	e5933000	 ldr         r3, [r3]
  02a54	e2833001	 add         r3, r3, #1
  02a58	e5d33000	 ldrb        r3, [r3]
  02a5c	e3130010	 tst         r3, #0x10
  02a60	0a000002	 beq         |$LN19@DidPortSta|
  02a64	e3a03011	 mov         r3, #0x11
  02a68	e58d3024	 str         r3, [sp, #0x24]
  02a6c	ea000001	 b           |$LN20@DidPortSta|
  02a70		 |$LN19@DidPortSta|
  02a70	e3a03010	 mov         r3, #0x10
  02a74	e58d3024	 str         r3, [sp, #0x24]
  02a78		 |$LN20@DidPortSta|
  02a78	e59d3024	 ldr         r3, [sp, #0x24]
  02a7c	e58d3000	 str         r3, [sp]
  02a80		 |$LN2@DidPortSta|
  02a80		 |$LN3@DidPortSta|

; 1006 : 
; 1007 :         DEBUGMSG(ZONE_HCD, (TEXT("CHW::PortSpeed = %s\r\n"), 
; 1008 :             ((PortSpeed == 0x01)? TEXT("LS"): ((PortSpeed == 0x10)? TEXT("FS"): TEXT("HS")))));

  02a80	e59f30e0	 ldr         r3, [pc, #0xE0]
  02a84	e5933440	 ldr         r3, [r3, #0x440]
  02a88	e3130001	 tst         r3, #1
  02a8c	0a000015	 beq         |$LN25@DidPortSta|
  02a90	e59d3000	 ldr         r3, [sp]
  02a94	e3530001	 cmp         r3, #1
  02a98	1a000002	 bne         |$LN23@DidPortSta|
  02a9c	e59f30d4	 ldr         r3, [pc, #0xD4]
  02aa0	e58d3028	 str         r3, [sp, #0x28]
  02aa4	ea000009	 b           |$LN24@DidPortSta|
  02aa8		 |$LN23@DidPortSta|
  02aa8	e59d3000	 ldr         r3, [sp]
  02aac	e3530010	 cmp         r3, #0x10
  02ab0	1a000002	 bne         |$LN21@DidPortSta|
  02ab4	e59f30b8	 ldr         r3, [pc, #0xB8]
  02ab8	e58d302c	 str         r3, [sp, #0x2C]
  02abc	ea000001	 b           |$LN22@DidPortSta|
  02ac0		 |$LN21@DidPortSta|
  02ac0	e59f30a8	 ldr         r3, [pc, #0xA8]
  02ac4	e58d302c	 str         r3, [sp, #0x2C]
  02ac8		 |$LN22@DidPortSta|
  02ac8	e59d302c	 ldr         r3, [sp, #0x2C]
  02acc	e58d3028	 str         r3, [sp, #0x28]
  02ad0		 |$LN24@DidPortSta|
  02ad0	e59d1028	 ldr         r1, [sp, #0x28]
  02ad4	e59f0090	 ldr         r0, [pc, #0x90]
  02ad8	eb000000	 bl          NKDbgPrintfW
  02adc	e3a03001	 mov         r3, #1
  02ae0	e58d3030	 str         r3, [sp, #0x30]
  02ae4	ea000001	 b           |$LN26@DidPortSta|
  02ae8		 |$LN25@DidPortSta|
  02ae8	e3a03000	 mov         r3, #0
  02aec	e58d3030	 str         r3, [sp, #0x30]
  02af0		 |$LN26@DidPortSta|

; 1009 : 
; 1010 :         // Now testing and see the connect status
; 1011 :         DEBUGMSG(ZONE_HCD, (TEXT("Connect Status = 0x%x\r\n"), pOTG->connect_status));

  02af0	e59f3070	 ldr         r3, [pc, #0x70]
  02af4	e5933440	 ldr         r3, [r3, #0x440]
  02af8	e3130001	 tst         r3, #1
  02afc	0a000008	 beq         |$LN27@DidPortSta|
  02b00	e59d3004	 ldr         r3, [sp, #4]
  02b04	e283304c	 add         r3, r3, #0x4C
  02b08	e5d33000	 ldrb        r3, [r3]
  02b0c	e1a01003	 mov         r1, r3
  02b10	e59f004c	 ldr         r0, [pc, #0x4C]
  02b14	eb000000	 bl          NKDbgPrintfW
  02b18	e3a03001	 mov         r3, #1
  02b1c	e58d3034	 str         r3, [sp, #0x34]
  02b20	ea000001	 b           |$LN28@DidPortSta|
  02b24		 |$LN27@DidPortSta|
  02b24	e3a03000	 mov         r3, #0
  02b28	e58d3034	 str         r3, [sp, #0x34]
  02b2c		 |$LN28@DidPortSta|

; 1012 :         if (pOTG->connect_status & CONN_CSC)

  02b2c	e59d3004	 ldr         r3, [sp, #4]
  02b30	e283304c	 add         r3, r3, #0x4C
  02b34	e5d33000	 ldrb        r3, [r3]
  02b38	e3130002	 tst         r3, #2
  02b3c	0a000002	 beq         |$LN1@DidPortSta|

; 1013 :             return TRUE;

  02b40	e3a03001	 mov         r3, #1
  02b44	e58d3008	 str         r3, [sp, #8]
  02b48	ea000001	 b           |$LN7@DidPortSta|
  02b4c		 |$LN1@DidPortSta|
  02b4c		 |$LN6@DidPortSta|

; 1014 :     }
; 1015 :     return FALSE;

  02b4c	e3a03000	 mov         r3, #0
  02b50	e58d3008	 str         r3, [sp, #8]
  02b54		 |$LN7@DidPortSta|

; 1016 : }

  02b54	e59d0008	 ldr         r0, [sp, #8]
  02b58	e28dd038	 add         sp, sp, #0x38
  02b5c	e89d6000	 ldmia       sp, {sp, lr}
  02b60	e12fff1e	 bx          lr
  02b64		 |$LN32@DidPortSta|
  02b64		 |$LN33@DidPortSta|
  02b64	00000000	 DCD         |??_C@_1DA@LCABANPH@?$AAC?$AAo?$AAn?$AAn?$AAe?$AAc?$AAt?$AA?5?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  02b68		 |$LN34@DidPortSta|
  02b68	00000000	 DCD         |dpCurSettings|
  02b6c		 |$LN35@DidPortSta|
  02b6c	00000000	 DCD         |??_C@_1CM@CMCFEGOH@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAP?$AAo?$AAr?$AAt?$AAS?$AAp?$AAe?$AAe?$AAd?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAs?$AA?$AN?$AA?6?$AA?$AA@|
  02b70		 |$LN36@DidPortSta|
  02b70	00000000	 DCD         |??_C@_15HEIOHGBB@?$AAH?$AAS?$AA?$AA@|
  02b74		 |$LN37@DidPortSta|
  02b74	00000000	 DCD         |??_C@_15EOIEBHGB@?$AAF?$AAS?$AA?$AA@|
  02b78		 |$LN38@DidPortSta|
  02b78	00000000	 DCD         |??_C@_15OPBPDEAH@?$AAL?$AAS?$AA?$AA@|
  02b7c		 |$LN39@DidPortSta|
  02b7c	00000000	 DCD         |??_C@_1CK@OCOCBJAD@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAD?$AAe?$AAv?$AAC?$AAt?$AAl?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  02b80		 |$LN40@DidPortSta|
  02b80	00000000	 DCD         |??_C@_1CI@IAMAIDG@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  02b84		 |$LN41@DidPortSta|
  02b84	00000000	 DCD         |??_C@_1FA@HGGGCNPM@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAD?$AAi?$AAd?$AAP?$AAo?$AAr?$AAt?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AAC?$AAh?$AAa?$AAn?$AAg?$AAe?$AA?3?$AA?5?$AAA?$AAf?$AAt?$AAe?$AAr?$AA?5@|
  02b88		 |$LN42@DidPortSta|
  02b88	00000000	 DCD         |??_C@_1CO@GCBJFEHN@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAB?$AA4?$AA?5?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  02b8c		 |$LN43@DidPortSta|
  02b8c	00000000	 DCD         |??_C@_1EO@BCJPEHIC@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAD?$AAi?$AAd?$AAP?$AAo?$AAr?$AAt?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AAC?$AAh?$AAa?$AAn?$AAg?$AAe?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAp?$AAo?$AAr@|
  02b90		 |$M44883|

			 ENDP  ; |?DidPortStatusChange@CHW@@UAAHE@Z|, CHW::DidPortStatusChange

	EXPORT	|??_C@_1EC@GCIIHFBN@?$AAG?$AAe?$AAt?$AAP?$AAo?$AAr?$AAt?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?5?$AAw?$AAi?$AAt?$AAh?$AA?5?$AAp?$AAO?$AAT?$AAG?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AN?$AA?6@| [ DATA ] ; `string'
	IMPORT	|memset|

  000b0			 AREA	 |.pdata|, PDATA
|$T44921| DCD	|$LN26@GetPortSta|
	DCD	0x40012d04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EC@GCIIHFBN@?$AAG?$AAe?$AAt?$AAP?$AAo?$AAr?$AAt?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?5?$AAw?$AAi?$AAt?$AAh?$AA?5?$AAp?$AAO?$AAT?$AAG?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AN?$AA?6@| DCB "G"
	DCB	0x0, "e", 0x0, "t", 0x0, "P", 0x0, "o", 0x0, "r", 0x0, "t"
	DCB	0x0, "S", 0x0, "t", 0x0, "a", 0x0, "t", 0x0, "u", 0x0, "s"
	DCB	0x0, " ", 0x0, "w", 0x0, "i", 0x0, "t", 0x0, "h", 0x0, " "
	DCB	0x0, "p", 0x0, "O", 0x0, "T", 0x0, "G", 0x0, " ", 0x0, "f"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  02b90			 AREA	 |.text|, CODE, ARM

  02b90		 |?GetPortStatus@CHW@@UAAHEAAU_USB_HUB_AND_PORT_STATUS@@@Z| PROC ; CHW::GetPortStatus

; 1033 : {

  02b90		 |$LN26@GetPortSta|
  02b90	e1a0c00d	 mov         r12, sp
  02b94	e92d0007	 stmdb       sp!, {r0 - r2}
  02b98	e92d5000	 stmdb       sp!, {r12, lr}
  02b9c	e24dd030	 sub         sp, sp, #0x30
  02ba0		 |$M44918|

; 1034 :     PHSMUSB_T pOTG = (PHSMUSB_T)GetOTGContext();

  02ba0	e59d0038	 ldr         r0, [sp, #0x38]
  02ba4	eb000000	 bl          |?GetOTGContext@CHcd@@QAAPAXXZ|
  02ba8	e58d0008	 str         r0, [sp, #8]
  02bac	e59d3008	 ldr         r3, [sp, #8]
  02bb0	e58d3000	 str         r3, [sp]

; 1035 :     if (pOTG == NULL)

  02bb4	e59d3000	 ldr         r3, [sp]
  02bb8	e3530000	 cmp         r3, #0
  02bbc	1a00000d	 bne         |$LN3@GetPortSta|

; 1036 :     {
; 1037 :         DEBUGMSG(ZONE_ERROR, (TEXT("GetPortStatus with pOTG failed\r\n")));

  02bc0	e59f3470	 ldr         r3, [pc, #0x470]
  02bc4	e5933440	 ldr         r3, [r3, #0x440]
  02bc8	e3130901	 tst         r3, #1, 18
  02bcc	0a000004	 beq         |$LN6@GetPortSta|
  02bd0	e59f0468	 ldr         r0, [pc, #0x468]
  02bd4	eb000000	 bl          NKDbgPrintfW
  02bd8	e3a03001	 mov         r3, #1
  02bdc	e58d300c	 str         r3, [sp, #0xC]
  02be0	ea000001	 b           |$LN7@GetPortSta|
  02be4		 |$LN6@GetPortSta|
  02be4	e3a03000	 mov         r3, #0
  02be8	e58d300c	 str         r3, [sp, #0xC]
  02bec		 |$LN7@GetPortSta|

; 1038 :         return FALSE;

  02bec	e3a03000	 mov         r3, #0
  02bf0	e58d3004	 str         r3, [sp, #4]
  02bf4	ea00010a	 b           |$LN4@GetPortSta|
  02bf8		 |$LN3@GetPortSta|

; 1039 :     }
; 1040 :     memset( &rStatus, 0, sizeof( USB_HUB_AND_PORT_STATUS ) );

  02bf8	e3a02004	 mov         r2, #4
  02bfc	e3a01000	 mov         r1, #0
  02c00	e59d0040	 ldr         r0, [sp, #0x40]
  02c04	eb000000	 bl          memset

; 1041 :     if ( port > 0 ) {

  02c08	e5dd303c	 ldrb        r3, [sp, #0x3C]
  02c0c	e3530000	 cmp         r3, #0
  02c10	da0000a6	 ble         |$LN2@GetPortSta|

; 1042 :         // request refers to a root hub port
; 1043 :        
; 1044 :         // read the port status register
; 1045 :         rStatus.change.port.ConnectStatusChange = ((pOTG->connect_status & CONN_CSC)? 1:0);

  02c14	e59d3000	 ldr         r3, [sp]
  02c18	e283304c	 add         r3, r3, #0x4C
  02c1c	e5d33000	 ldrb        r3, [r3]
  02c20	e3130002	 tst         r3, #2
  02c24	0a000002	 beq         |$LN8@GetPortSta|
  02c28	e3a03001	 mov         r3, #1
  02c2c	e58d3010	 str         r3, [sp, #0x10]
  02c30	ea000001	 b           |$LN9@GetPortSta|
  02c34		 |$LN8@GetPortSta|
  02c34	e3a03000	 mov         r3, #0
  02c38	e58d3010	 str         r3, [sp, #0x10]
  02c3c		 |$LN9@GetPortSta|
  02c3c	e59d3010	 ldr         r3, [sp, #0x10]
  02c40	e1a01803	 mov         r1, r3, lsl #16
  02c44	e1a01821	 mov         r1, r1, lsr #16
  02c48	e59d3040	 ldr         r3, [sp, #0x40]
  02c4c	e2833002	 add         r3, r3, #2
  02c50	e1d320b0	 ldrh        r2, [r3]
  02c54	e3e03001	 mvn         r3, #1
  02c58	e0022003	 and         r2, r2, r3
  02c5c	e2013001	 and         r3, r1, #1
  02c60	e1823003	 orr         r3, r2, r3
  02c64	e1a02803	 mov         r2, r3, lsl #16
  02c68	e1a02822	 mov         r2, r2, lsr #16
  02c6c	e59d3040	 ldr         r3, [sp, #0x40]
  02c70	e2833002	 add         r3, r3, #2
  02c74	e1c320b0	 strh        r2, [r3]

; 1046 :         rStatus.change.port.PortEnableChange = 0;

  02c78	e59d3040	 ldr         r3, [sp, #0x40]
  02c7c	e2833002	 add         r3, r3, #2
  02c80	e1d320b0	 ldrh        r2, [r3]
  02c84	e3a03cff	 mov         r3, #0xFF, 24
  02c88	e38330fd	 orr         r3, r3, #0xFD
  02c8c	e0022003	 and         r2, r2, r3
  02c90	e59d3040	 ldr         r3, [sp, #0x40]
  02c94	e2833002	 add         r3, r3, #2
  02c98	e1c320b0	 strh        r2, [r3]

; 1047 :         rStatus.change.port.OverCurrentChange = 0;

  02c9c	e59d3040	 ldr         r3, [sp, #0x40]
  02ca0	e2833002	 add         r3, r3, #2
  02ca4	e1d320b0	 ldrh        r2, [r3]
  02ca8	e3a03cff	 mov         r3, #0xFF, 24
  02cac	e38330f7	 orr         r3, r3, #0xF7
  02cb0	e0022003	 and         r2, r2, r3
  02cb4	e59d3040	 ldr         r3, [sp, #0x40]
  02cb8	e2833002	 add         r3, r3, #2
  02cbc	e1c320b0	 strh        r2, [r3]

; 1048 :         rStatus.status.port.DeviceIsLowSpeed = (INREG8(&pOTG->pUsbGenRegs->DevCtl) & DEVCTL_LSDEV);

  02cc0	e59d3000	 ldr         r3, [sp]
  02cc4	e2833020	 add         r3, r3, #0x20
  02cc8	e5933000	 ldr         r3, [r3]
  02ccc	e2833060	 add         r3, r3, #0x60
  02cd0	e5d33000	 ldrb        r3, [r3]
  02cd4	e2033020	 and         r3, r3, #0x20
  02cd8	e1a01803	 mov         r1, r3, lsl #16
  02cdc	e1a01821	 mov         r1, r1, lsr #16
  02ce0	e59d3040	 ldr         r3, [sp, #0x40]
  02ce4	e1d320b0	 ldrh        r2, [r3]
  02ce8	e3e03c02	 mvn         r3, #2, 24
  02cec	e0022003	 and         r2, r2, r3
  02cf0	e2013001	 and         r3, r1, #1
  02cf4	e1a03483	 mov         r3, r3, lsl #9
  02cf8	e1823003	 orr         r3, r2, r3
  02cfc	e1a02803	 mov         r2, r3, lsl #16
  02d00	e1a02822	 mov         r2, r2, lsr #16
  02d04	e59d3040	 ldr         r3, [sp, #0x40]
  02d08	e1c320b0	 strh        r2, [r3]

; 1049 :         rStatus.status.port.DeviceIsHighSpeed = ((INREG8(&pOTG->pUsbGenRegs->Power) & POWER_HSMODE)? 1:0) ;

  02d0c	e59d3000	 ldr         r3, [sp]
  02d10	e2833020	 add         r3, r3, #0x20
  02d14	e5933000	 ldr         r3, [r3]
  02d18	e2833001	 add         r3, r3, #1
  02d1c	e5d33000	 ldrb        r3, [r3]
  02d20	e3130010	 tst         r3, #0x10
  02d24	0a000002	 beq         |$LN10@GetPortSta|
  02d28	e3a03001	 mov         r3, #1
  02d2c	e58d3014	 str         r3, [sp, #0x14]
  02d30	ea000001	 b           |$LN11@GetPortSta|
  02d34		 |$LN10@GetPortSta|
  02d34	e3a03000	 mov         r3, #0
  02d38	e58d3014	 str         r3, [sp, #0x14]
  02d3c		 |$LN11@GetPortSta|
  02d3c	e59d3014	 ldr         r3, [sp, #0x14]
  02d40	e1a01803	 mov         r1, r3, lsl #16
  02d44	e1a01821	 mov         r1, r1, lsr #16
  02d48	e59d3040	 ldr         r3, [sp, #0x40]
  02d4c	e1d320b0	 ldrh        r2, [r3]
  02d50	e3e03b01	 mvn         r3, #1, 22
  02d54	e0022003	 and         r2, r2, r3
  02d58	e2013001	 and         r3, r1, #1
  02d5c	e1a03503	 mov         r3, r3, lsl #10
  02d60	e1823003	 orr         r3, r2, r3
  02d64	e1a02803	 mov         r2, r3, lsl #16
  02d68	e1a02822	 mov         r2, r2, lsr #16
  02d6c	e59d3040	 ldr         r3, [sp, #0x40]
  02d70	e1c320b0	 strh        r2, [r3]

; 1050 :         rStatus.status.port.PortConnected = ((pOTG->connect_status & CONN_CCS)?1:0);

  02d74	e59d3000	 ldr         r3, [sp]
  02d78	e283304c	 add         r3, r3, #0x4C
  02d7c	e5d33000	 ldrb        r3, [r3]
  02d80	e3130001	 tst         r3, #1
  02d84	0a000002	 beq         |$LN12@GetPortSta|
  02d88	e3a03001	 mov         r3, #1
  02d8c	e58d3018	 str         r3, [sp, #0x18]
  02d90	ea000001	 b           |$LN13@GetPortSta|
  02d94		 |$LN12@GetPortSta|
  02d94	e3a03000	 mov         r3, #0
  02d98	e58d3018	 str         r3, [sp, #0x18]
  02d9c		 |$LN13@GetPortSta|
  02d9c	e59d3018	 ldr         r3, [sp, #0x18]
  02da0	e1a01803	 mov         r1, r3, lsl #16
  02da4	e1a01821	 mov         r1, r1, lsr #16
  02da8	e59d3040	 ldr         r3, [sp, #0x40]
  02dac	e1d320b0	 ldrh        r2, [r3]
  02db0	e3e03001	 mvn         r3, #1
  02db4	e0022003	 and         r2, r2, r3
  02db8	e2013001	 and         r3, r1, #1
  02dbc	e1823003	 orr         r3, r2, r3
  02dc0	e1a02803	 mov         r2, r3, lsl #16
  02dc4	e1a02822	 mov         r2, r2, lsr #16
  02dc8	e59d3040	 ldr         r3, [sp, #0x40]
  02dcc	e1c320b0	 strh        r2, [r3]

; 1051 :         rStatus.status.port.PortEnabled = 1;

  02dd0	e59d3040	 ldr         r3, [sp, #0x40]
  02dd4	e1d330b0	 ldrh        r3, [r3]
  02dd8	e3832002	 orr         r2, r3, #2
  02ddc	e59d3040	 ldr         r3, [sp, #0x40]
  02de0	e1c320b0	 strh        r2, [r3]

; 1052 :         rStatus.status.port.PortOverCurrent = 0;

  02de4	e59d3040	 ldr         r3, [sp, #0x40]
  02de8	e1d320b0	 ldrh        r2, [r3]
  02dec	e3a03cff	 mov         r3, #0xFF, 24
  02df0	e38330f7	 orr         r3, r3, #0xF7
  02df4	e0022003	 and         r2, r2, r3
  02df8	e59d3040	 ldr         r3, [sp, #0x40]
  02dfc	e1c320b0	 strh        r2, [r3]

; 1053 :         rStatus.status.port.PortPower = 1;

  02e00	e59d3040	 ldr         r3, [sp, #0x40]
  02e04	e1d330b0	 ldrh        r3, [r3]
  02e08	e3832c01	 orr         r2, r3, #1, 24
  02e0c	e59d3040	 ldr         r3, [sp, #0x40]
  02e10	e1c320b0	 strh        r2, [r3]

; 1054 :         rStatus.status.port.PortReset = INREG8(&pOTG->pUsbGenRegs->Power) & POWER_RESET;

  02e14	e59d3000	 ldr         r3, [sp]
  02e18	e2833020	 add         r3, r3, #0x20
  02e1c	e5933000	 ldr         r3, [r3]
  02e20	e2833001	 add         r3, r3, #1
  02e24	e5d33000	 ldrb        r3, [r3]
  02e28	e2033008	 and         r3, r3, #8
  02e2c	e1a01803	 mov         r1, r3, lsl #16
  02e30	e1a01821	 mov         r1, r1, lsr #16
  02e34	e59d3040	 ldr         r3, [sp, #0x40]
  02e38	e1d320b0	 ldrh        r2, [r3]
  02e3c	e3e03010	 mvn         r3, #0x10
  02e40	e0022003	 and         r2, r2, r3
  02e44	e2013001	 and         r3, r1, #1
  02e48	e1a03203	 mov         r3, r3, lsl #4
  02e4c	e1823003	 orr         r3, r2, r3
  02e50	e1a02803	 mov         r2, r3, lsl #16
  02e54	e1a02822	 mov         r2, r2, lsr #16
  02e58	e59d3040	 ldr         r3, [sp, #0x40]
  02e5c	e1c320b0	 strh        r2, [r3]

; 1055 :         rStatus.status.port.PortSuspended =  INREG8(&pOTG->pUsbGenRegs->Power) & POWER_SUSPENDM;

  02e60	e59d3000	 ldr         r3, [sp]
  02e64	e2833020	 add         r3, r3, #0x20
  02e68	e5933000	 ldr         r3, [r3]
  02e6c	e2833001	 add         r3, r3, #1
  02e70	e5d33000	 ldrb        r3, [r3]
  02e74	e2033002	 and         r3, r3, #2
  02e78	e1a01803	 mov         r1, r3, lsl #16
  02e7c	e1a01821	 mov         r1, r1, lsr #16
  02e80	e59d3040	 ldr         r3, [sp, #0x40]
  02e84	e1d320b0	 ldrh        r2, [r3]
  02e88	e3e03004	 mvn         r3, #4
  02e8c	e0022003	 and         r2, r2, r3
  02e90	e2013001	 and         r3, r1, #1
  02e94	e1a03103	 mov         r3, r3, lsl #2
  02e98	e1823003	 orr         r3, r2, r3
  02e9c	e1a02803	 mov         r2, r3, lsl #16
  02ea0	e1a02822	 mov         r2, r2, lsr #16
  02ea4	e59d3040	 ldr         r3, [sp, #0x40]
  02ea8	e1c320b0	 strh        r2, [r3]

; 1056 :     }
; 1057 : #ifdef DEBUG
; 1058 :     else {

  02eac	ea00005a	 b           |$LN1@GetPortSta|
  02eb0		 |$LN2@GetPortSta|

; 1059 :         // request is to Hub. rStatus was already memset to 0 above.
; 1060 :         DEBUGCHK( port == 0 );

  02eb0	e5dd303c	 ldrb        r3, [sp, #0x3C]
  02eb4	e3530000	 cmp         r3, #0
  02eb8	1a000002	 bne         |$LN14@GetPortSta|
  02ebc	e3a03001	 mov         r3, #1
  02ec0	e58d301c	 str         r3, [sp, #0x1C]
  02ec4	ea000008	 b           |$LN15@GetPortSta|
  02ec8		 |$LN14@GetPortSta|
  02ec8	e3a03b01	 mov         r3, #1, 22
  02ecc	e3833024	 orr         r3, r3, #0x24
  02ed0	e59f2164	 ldr         r2, [pc, #0x164]
  02ed4	e59f115c	 ldr         r1, [pc, #0x15C]
  02ed8	e59f0154	 ldr         r0, [pc, #0x154]
  02edc	eb000000	 bl          NKDbgPrintfW
  02ee0	e6000010	 __debugbreak_ce
  02ee4	e3a03000	 mov         r3, #0
  02ee8	e58d301c	 str         r3, [sp, #0x1C]
  02eec		 |$LN15@GetPortSta|

; 1061 :         // local power supply good
; 1062 :         DEBUGCHK( rStatus.status.hub.LocalPowerStatus == 0 );

  02eec	e59d3040	 ldr         r3, [sp, #0x40]
  02ef0	e1d330b0	 ldrh        r3, [r3]
  02ef4	e2033001	 and         r3, r3, #1
  02ef8	e3530000	 cmp         r3, #0
  02efc	1a000002	 bne         |$LN16@GetPortSta|
  02f00	e3a03001	 mov         r3, #1
  02f04	e58d3020	 str         r3, [sp, #0x20]
  02f08	ea000008	 b           |$LN17@GetPortSta|
  02f0c		 |$LN16@GetPortSta|
  02f0c	e3a03b01	 mov         r3, #1, 22
  02f10	e3833026	 orr         r3, r3, #0x26
  02f14	e59f2120	 ldr         r2, [pc, #0x120]
  02f18	e59f1118	 ldr         r1, [pc, #0x118]
  02f1c	e59f0110	 ldr         r0, [pc, #0x110]
  02f20	eb000000	 bl          NKDbgPrintfW
  02f24	e6000010	 __debugbreak_ce
  02f28	e3a03000	 mov         r3, #0
  02f2c	e58d3020	 str         r3, [sp, #0x20]
  02f30		 |$LN17@GetPortSta|

; 1063 :         // no over current condition
; 1064 :         DEBUGCHK( rStatus.status.hub.OverCurrentIndicator == 0 );

  02f30	e59d3040	 ldr         r3, [sp, #0x40]
  02f34	e1d330b0	 ldrh        r3, [r3]
  02f38	e1a03f03	 mov         r3, r3, lsl #30
  02f3c	e1a03fa3	 mov         r3, r3, lsr #31
  02f40	e1a03803	 mov         r3, r3, lsl #16
  02f44	e1a03823	 mov         r3, r3, lsr #16
  02f48	e3530000	 cmp         r3, #0
  02f4c	1a000002	 bne         |$LN18@GetPortSta|
  02f50	e3a03001	 mov         r3, #1
  02f54	e58d3024	 str         r3, [sp, #0x24]
  02f58	ea000008	 b           |$LN19@GetPortSta|
  02f5c		 |$LN18@GetPortSta|
  02f5c	e3a03b01	 mov         r3, #1, 22
  02f60	e3833028	 orr         r3, r3, #0x28
  02f64	e59f20d0	 ldr         r2, [pc, #0xD0]
  02f68	e59f10c8	 ldr         r1, [pc, #0xC8]
  02f6c	e59f00c0	 ldr         r0, [pc, #0xC0]
  02f70	eb000000	 bl          NKDbgPrintfW
  02f74	e6000010	 __debugbreak_ce
  02f78	e3a03000	 mov         r3, #0
  02f7c	e58d3024	 str         r3, [sp, #0x24]
  02f80		 |$LN19@GetPortSta|

; 1065 :         // no change in power supply status
; 1066 :         DEBUGCHK( rStatus.change.hub.LocalPowerChange == 0 );

  02f80	e59d3040	 ldr         r3, [sp, #0x40]
  02f84	e2833002	 add         r3, r3, #2
  02f88	e1d330b0	 ldrh        r3, [r3]
  02f8c	e2033001	 and         r3, r3, #1
  02f90	e3530000	 cmp         r3, #0
  02f94	1a000002	 bne         |$LN20@GetPortSta|
  02f98	e3a03001	 mov         r3, #1
  02f9c	e58d3028	 str         r3, [sp, #0x28]
  02fa0	ea000008	 b           |$LN21@GetPortSta|
  02fa4		 |$LN20@GetPortSta|
  02fa4	e3a03b01	 mov         r3, #1, 22
  02fa8	e383302a	 orr         r3, r3, #0x2A
  02fac	e59f2088	 ldr         r2, [pc, #0x88]
  02fb0	e59f1080	 ldr         r1, [pc, #0x80]
  02fb4	e59f0078	 ldr         r0, [pc, #0x78]
  02fb8	eb000000	 bl          NKDbgPrintfW
  02fbc	e6000010	 __debugbreak_ce
  02fc0	e3a03000	 mov         r3, #0
  02fc4	e58d3028	 str         r3, [sp, #0x28]
  02fc8		 |$LN21@GetPortSta|

; 1067 :         // no change in over current status
; 1068 :         DEBUGCHK( rStatus.change.hub.OverCurrentIndicatorChange == 0 );

  02fc8	e59d3040	 ldr         r3, [sp, #0x40]
  02fcc	e2833002	 add         r3, r3, #2
  02fd0	e1d330b0	 ldrh        r3, [r3]
  02fd4	e1a03f03	 mov         r3, r3, lsl #30
  02fd8	e1a03fa3	 mov         r3, r3, lsr #31
  02fdc	e1a03803	 mov         r3, r3, lsl #16
  02fe0	e1a03823	 mov         r3, r3, lsr #16
  02fe4	e3530000	 cmp         r3, #0
  02fe8	1a000002	 bne         |$LN22@GetPortSta|
  02fec	e3a03001	 mov         r3, #1
  02ff0	e58d302c	 str         r3, [sp, #0x2C]
  02ff4	ea000008	 b           |$LN23@GetPortSta|
  02ff8		 |$LN22@GetPortSta|
  02ff8	e3a03b01	 mov         r3, #1, 22
  02ffc	e383302c	 orr         r3, r3, #0x2C
  03000	e59f2034	 ldr         r2, [pc, #0x34]
  03004	e59f102c	 ldr         r1, [pc, #0x2C]
  03008	e59f0024	 ldr         r0, [pc, #0x24]
  0300c	eb000000	 bl          NKDbgPrintfW
  03010	e6000010	 __debugbreak_ce
  03014	e3a03000	 mov         r3, #0
  03018	e58d302c	 str         r3, [sp, #0x2C]
  0301c		 |$LN23@GetPortSta|
  0301c		 |$LN1@GetPortSta|

; 1069 :     }
; 1070 : #endif // DEBUG
; 1071 : 
; 1072 :     return TRUE;

  0301c	e3a03001	 mov         r3, #1
  03020	e58d3004	 str         r3, [sp, #4]
  03024		 |$LN4@GetPortSta|

; 1073 : }

  03024	e59d0004	 ldr         r0, [sp, #4]
  03028	e28dd030	 add         sp, sp, #0x30
  0302c	e89d6000	 ldmia       sp, {sp, lr}
  03030	e12fff1e	 bx          lr
  03034		 |$LN27@GetPortSta|
  03034		 |$LN28@GetPortSta|
  03034	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  03038		 |$LN29@GetPortSta|
  03038	00000000	 DCD         |dpCurSettings|
  0303c		 |$LN30@GetPortSta|
  0303c	00000000	 DCD         |??_C@_1LG@MDHHEHIE@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  03040		 |$LN31@GetPortSta|
  03040	00000000	 DCD         |??_C@_1EC@GCIIHFBN@?$AAG?$AAe?$AAt?$AAP?$AAo?$AAr?$AAt?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?5?$AAw?$AAi?$AAt?$AAh?$AA?5?$AAp?$AAO?$AAT?$AAG?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AN?$AA?6@|
  03044		 |$M44919|

			 ENDP  ; |?GetPortStatus@CHW@@UAAHEAAU_USB_HUB_AND_PORT_STATUS@@@Z|, CHW::GetPortStatus

	EXPORT	|??_C@_1EI@DJMHFJBK@?$AAU?$AAS?$AAB?$AA_?$AAH?$AAU?$AAB?$AA_?$AAF?$AAE?$AAA?$AAT?$AAU?$AAR?$AAE?$AA_?$AAC?$AA_?$AAP?$AAO?$AAR?$AAT?$AA_?$AAC?$AAO?$AAN?$AAN?$AAE?$AAC?$AAT?$AAI?$AAO@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EM@COHIHNIF@?$AAC?$AAL?$AAE?$AAA?$AAR?$AA?3?$AA?5?$AAU?$AAS?$AAB?$AA_?$AAH?$AAU?$AAB?$AA_?$AAF?$AAE?$AAA?$AAT?$AAU?$AAR?$AAE?$AA_?$AAP?$AAO?$AAR?$AAT?$AA_?$AAS?$AAU?$AAS?$AAP@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EK@GJLPCKKD@?$AAC?$AAL?$AAE?$AAA?$AAR?$AA?3?$AA?5?$AAU?$AAS?$AAB?$AA_?$AAH?$AAU?$AAB?$AA_?$AAF?$AAE?$AAA?$AAT?$AAU?$AAR?$AAE?$AA_?$AAP?$AAO?$AAR?$AAT?$AA_?$AAE?$AAN?$AAA?$AAB@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DK@HOHFMIJM@?$AAU?$AAS?$AAB?$AA_?$AAH?$AAU?$AAB?$AA_?$AAF?$AAE?$AAA?$AAT?$AAU?$AAR?$AAE?$AA_?$AAP?$AAO?$AAR?$AAT?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DO@MKEJBJAC@?$AAU?$AAS?$AAB?$AA_?$AAH?$AAU?$AAB?$AA_?$AAF?$AAE?$AAA?$AAT?$AAU?$AAR?$AAE?$AA_?$AAP?$AAO?$AAR?$AAT?$AA_?$AAS?$AAU?$AAS?$AAP?$AAE?$AAN?$AAD?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DK@OOILAFJM@?$AAU?$AAS?$AAB?$AA_?$AAH?$AAU?$AAB?$AA_?$AAF?$AAE?$AAA?$AAT?$AAU?$AAR?$AAE?$AA_?$AAP?$AAO?$AAR?$AAT?$AA_?$AAR?$AAE?$AAS?$AAE?$AAT?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GG@BABJJCEJ@?$AAS?$AAe?$AAt?$AAO?$AAr?$AAC?$AAl?$AAe?$AAa?$AAr?$AAF?$AAe?$AAa?$AAt?$AAu?$AAr?$AAe?$AA?$CI?$AA0?$AAx?$AA?$CF?$AAx?$AA?$CJ?$AA?0?$AA?5?$AAf?$AAe?$AAa?$AAt?$AAu?$AAr?$AAe@| [ DATA ] ; `string'

  000b8			 AREA	 |.pdata|, PDATA
|$T44948| DCD	|$LN37@RootHubFea|
	DCD	0x4000b904

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EI@DJMHFJBK@?$AAU?$AAS?$AAB?$AA_?$AAH?$AAU?$AAB?$AA_?$AAF?$AAE?$AAA?$AAT?$AAU?$AAR?$AAE?$AA_?$AAC?$AA_?$AAP?$AAO?$AAR?$AAT?$AA_?$AAC?$AAO?$AAN?$AAN?$AAE?$AAC?$AAT?$AAI?$AAO@| DCB "U"
	DCB	0x0, "S", 0x0, "B", 0x0, "_", 0x0, "H", 0x0, "U", 0x0, "B"
	DCB	0x0, "_", 0x0, "F", 0x0, "E", 0x0, "A", 0x0, "T", 0x0, "U"
	DCB	0x0, "R", 0x0, "E", 0x0, "_", 0x0, "C", 0x0, "_", 0x0, "P"
	DCB	0x0, "O", 0x0, "R", 0x0, "T", 0x0, "_", 0x0, "C", 0x0, "O"
	DCB	0x0, "N", 0x0, "N", 0x0, "E", 0x0, "C", 0x0, "T", 0x0, "I"
	DCB	0x0, "O", 0x0, "N", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EM@COHIHNIF@?$AAC?$AAL?$AAE?$AAA?$AAR?$AA?3?$AA?5?$AAU?$AAS?$AAB?$AA_?$AAH?$AAU?$AAB?$AA_?$AAF?$AAE?$AAA?$AAT?$AAU?$AAR?$AAE?$AA_?$AAP?$AAO?$AAR?$AAT?$AA_?$AAS?$AAU?$AAS?$AAP@| DCB "C"
	DCB	0x0, "L", 0x0, "E", 0x0, "A", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "U", 0x0, "S", 0x0, "B", 0x0, "_", 0x0, "H", 0x0, "U"
	DCB	0x0, "B", 0x0, "_", 0x0, "F", 0x0, "E", 0x0, "A", 0x0, "T"
	DCB	0x0, "U", 0x0, "R", 0x0, "E", 0x0, "_", 0x0, "P", 0x0, "O"
	DCB	0x0, "R", 0x0, "T", 0x0, "_", 0x0, "S", 0x0, "U", 0x0, "S"
	DCB	0x0, "P", 0x0, "E", 0x0, "N", 0x0, "D", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EK@GJLPCKKD@?$AAC?$AAL?$AAE?$AAA?$AAR?$AA?3?$AA?5?$AAU?$AAS?$AAB?$AA_?$AAH?$AAU?$AAB?$AA_?$AAF?$AAE?$AAA?$AAT?$AAU?$AAR?$AAE?$AA_?$AAP?$AAO?$AAR?$AAT?$AA_?$AAE?$AAN?$AAA?$AAB@| DCB "C"
	DCB	0x0, "L", 0x0, "E", 0x0, "A", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "U", 0x0, "S", 0x0, "B", 0x0, "_", 0x0, "H", 0x0, "U"
	DCB	0x0, "B", 0x0, "_", 0x0, "F", 0x0, "E", 0x0, "A", 0x0, "T"
	DCB	0x0, "U", 0x0, "R", 0x0, "E", 0x0, "_", 0x0, "P", 0x0, "O"
	DCB	0x0, "R", 0x0, "T", 0x0, "_", 0x0, "E", 0x0, "N", 0x0, "A"
	DCB	0x0, "B", 0x0, "L", 0x0, "E", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DK@HOHFMIJM@?$AAU?$AAS?$AAB?$AA_?$AAH?$AAU?$AAB?$AA_?$AAF?$AAE?$AAA?$AAT?$AAU?$AAR?$AAE?$AA_?$AAP?$AAO?$AAR?$AAT?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA?$AN?$AA?6?$AA?$AA@| DCB "U"
	DCB	0x0, "S", 0x0, "B", 0x0, "_", 0x0, "H", 0x0, "U", 0x0, "B"
	DCB	0x0, "_", 0x0, "F", 0x0, "E", 0x0, "A", 0x0, "T", 0x0, "U"
	DCB	0x0, "R", 0x0, "E", 0x0, "_", 0x0, "P", 0x0, "O", 0x0, "R"
	DCB	0x0, "T", 0x0, "_", 0x0, "P", 0x0, "O", 0x0, "W", 0x0, "E"
	DCB	0x0, "R", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@MKEJBJAC@?$AAU?$AAS?$AAB?$AA_?$AAH?$AAU?$AAB?$AA_?$AAF?$AAE?$AAA?$AAT?$AAU?$AAR?$AAE?$AA_?$AAP?$AAO?$AAR?$AAT?$AA_?$AAS?$AAU?$AAS?$AAP?$AAE?$AAN?$AAD?$AA?$AN?$AA?6?$AA?$AA@| DCB "U"
	DCB	0x0, "S", 0x0, "B", 0x0, "_", 0x0, "H", 0x0, "U", 0x0, "B"
	DCB	0x0, "_", 0x0, "F", 0x0, "E", 0x0, "A", 0x0, "T", 0x0, "U"
	DCB	0x0, "R", 0x0, "E", 0x0, "_", 0x0, "P", 0x0, "O", 0x0, "R"
	DCB	0x0, "T", 0x0, "_", 0x0, "S", 0x0, "U", 0x0, "S", 0x0, "P"
	DCB	0x0, "E", 0x0, "N", 0x0, "D", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DK@OOILAFJM@?$AAU?$AAS?$AAB?$AA_?$AAH?$AAU?$AAB?$AA_?$AAF?$AAE?$AAA?$AAT?$AAU?$AAR?$AAE?$AA_?$AAP?$AAO?$AAR?$AAT?$AA_?$AAR?$AAE?$AAS?$AAE?$AAT?$AA?$AN?$AA?6?$AA?$AA@| DCB "U"
	DCB	0x0, "S", 0x0, "B", 0x0, "_", 0x0, "H", 0x0, "U", 0x0, "B"
	DCB	0x0, "_", 0x0, "F", 0x0, "E", 0x0, "A", 0x0, "T", 0x0, "U"
	DCB	0x0, "R", 0x0, "E", 0x0, "_", 0x0, "P", 0x0, "O", 0x0, "R"
	DCB	0x0, "T", 0x0, "_", 0x0, "R", 0x0, "E", 0x0, "S", 0x0, "E"
	DCB	0x0, "T", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GG@BABJJCEJ@?$AAS?$AAe?$AAt?$AAO?$AAr?$AAC?$AAl?$AAe?$AAa?$AAr?$AAF?$AAe?$AAa?$AAt?$AAu?$AAr?$AAe?$AA?$CI?$AA0?$AAx?$AA?$CF?$AAx?$AA?$CJ?$AA?0?$AA?5?$AAf?$AAe?$AAa?$AAt?$AAu?$AAr?$AAe@| DCB "S"
	DCB	0x0, "e", 0x0, "t", 0x0, "O", 0x0, "r", 0x0, "C", 0x0, "l"
	DCB	0x0, "e", 0x0, "a", 0x0, "r", 0x0, "F", 0x0, "e", 0x0, "a"
	DCB	0x0, "t", 0x0, "u", 0x0, "r", 0x0, "e", 0x0, "(", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "x", 0x0, ")", 0x0, ",", 0x0, " "
	DCB	0x0, "f", 0x0, "e", 0x0, "a", 0x0, "t", 0x0, "u", 0x0, "r"
	DCB	0x0, "e", 0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x"
	DCB	0x0, ")", 0x0, ",", 0x0, " ", 0x0, "p", 0x0, "o", 0x0, "r"
	DCB	0x0, "t", 0x0, "(", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  03044			 AREA	 |.text|, CODE, ARM

  03044		 |?RootHubFeature@CHW@@UAAHEEG@Z| PROC	; CHW::RootHubFeature

; 1091 : {

  03044		 |$LN37@RootHubFea|
  03044	e1a0c00d	 mov         r12, sp
  03048	e92d000f	 stmdb       sp!, {r0 - r3}
  0304c	e92d5000	 stmdb       sp!, {r12, lr}
  03050	e24dd034	 sub         sp, sp, #0x34
  03054		 |$M44945|

; 1092 :     PHSMUSB_T pOTG = (PHSMUSB_T)GetOTGContext();

  03054	e59d003c	 ldr         r0, [sp, #0x3C]
  03058	eb000000	 bl          |?GetOTGContext@CHcd@@QAAPAXXZ|
  0305c	e58d0008	 str         r0, [sp, #8]
  03060	e59d3008	 ldr         r3, [sp, #8]
  03064	e58d3000	 str         r3, [sp]

; 1093 :     if (pOTG == NULL)

  03068	e59d3000	 ldr         r3, [sp]
  0306c	e3530000	 cmp         r3, #0
  03070	1a00000d	 bne         |$LN16@RootHubFea|

; 1094 :     {
; 1095 :         DEBUGMSG(ZONE_HCD, (TEXT("GetPortStatus with pOTG failed\r\n")));

  03074	e59f328c	 ldr         r3, [pc, #0x28C]
  03078	e5933440	 ldr         r3, [r3, #0x440]
  0307c	e3130001	 tst         r3, #1
  03080	0a000004	 beq         |$LN19@RootHubFea|
  03084	e59f0298	 ldr         r0, [pc, #0x298]
  03088	eb000000	 bl          NKDbgPrintfW
  0308c	e3a03001	 mov         r3, #1
  03090	e58d300c	 str         r3, [sp, #0xC]
  03094	ea000001	 b           |$LN20@RootHubFea|
  03098		 |$LN19@RootHubFea|
  03098	e3a03000	 mov         r3, #0
  0309c	e58d300c	 str         r3, [sp, #0xC]
  030a0		 |$LN20@RootHubFea|

; 1096 :         return FALSE;

  030a0	e3a03000	 mov         r3, #0
  030a4	e58d3004	 str         r3, [sp, #4]
  030a8	ea000091	 b           |$LN17@RootHubFea|
  030ac		 |$LN16@RootHubFea|

; 1097 :     }
; 1098 : 
; 1099 :     if (port == 0) {

  030ac	e5dd3040	 ldrb        r3, [sp, #0x40]
  030b0	e3530000	 cmp         r3, #0
  030b4	1a000002	 bne         |$LN15@RootHubFea|

; 1100 :         // request is to Hub but...
; 1101 :         // uhci has no way to tweak features for the root hub.
; 1102 :         return FALSE;

  030b8	e3a03000	 mov         r3, #0
  030bc	e58d3004	 str         r3, [sp, #4]
  030c0	ea00008b	 b           |$LN17@RootHubFea|
  030c4		 |$LN15@RootHubFea|

; 1103 :     }
; 1104 : 
; 1105 :     DEBUGMSG(ZONE_HCD, (TEXT("SetOrClearFeature(0x%x), feature(0x%x), port(%d)\r\n"), setOrClearFeature, feature, port));

  030c4	e59f323c	 ldr         r3, [pc, #0x23C]
  030c8	e5933440	 ldr         r3, [r3, #0x440]
  030cc	e3130001	 tst         r3, #1
  030d0	0a000007	 beq         |$LN21@RootHubFea|
  030d4	e5dd3040	 ldrb        r3, [sp, #0x40]
  030d8	e1dd24b8	 ldrh        r2, [sp, #0x48]
  030dc	e5dd1044	 ldrb        r1, [sp, #0x44]
  030e0	e59f0238	 ldr         r0, [pc, #0x238]
  030e4	eb000000	 bl          NKDbgPrintfW
  030e8	e3a03001	 mov         r3, #1
  030ec	e58d3010	 str         r3, [sp, #0x10]
  030f0	ea000001	 b           |$LN22@RootHubFea|
  030f4		 |$LN21@RootHubFea|
  030f4	e3a03000	 mov         r3, #0
  030f8	e58d3010	 str         r3, [sp, #0x10]
  030fc		 |$LN22@RootHubFea|

; 1106 :     // mask the change bits because we write 1 to them to clear them //      
; 1107 :     if (setOrClearFeature == USB_REQUEST_SET_FEATURE)

  030fc	e5dd3044	 ldrb        r3, [sp, #0x44]
  03100	e3530003	 cmp         r3, #3
  03104	1a00003b	 bne         |$LN14@RootHubFea|

; 1108 :     {
; 1109 :         switch (feature) {

  03108	e1dd34b8	 ldrh        r3, [sp, #0x48]
  0310c	e58d3014	 str         r3, [sp, #0x14]
  03110	e59d3014	 ldr         r3, [sp, #0x14]
  03114	e3530002	 cmp         r3, #2
  03118	0a00001a	 beq         |$LN10@RootHubFea|
  0311c	e59d3014	 ldr         r3, [sp, #0x14]
  03120	e3530004	 cmp         r3, #4
  03124	0a000003	 beq         |$LN11@RootHubFea|
  03128	e59d3014	 ldr         r3, [sp, #0x14]
  0312c	e3530008	 cmp         r3, #8
  03130	0a000020	 beq         |$LN9@RootHubFea|
  03134	ea00002b	 b           |$LN8@RootHubFea|
  03138		 |$LN11@RootHubFea|

; 1110 :             case USB_HUB_FEATURE_PORT_RESET:            
; 1111 :                 DEBUGMSG(ZONE_HCD, (TEXT("USB_HUB_FEATURE_PORT_RESET\r\n")));

  03138	e59f31c8	 ldr         r3, [pc, #0x1C8]
  0313c	e5933440	 ldr         r3, [r3, #0x440]
  03140	e3130001	 tst         r3, #1
  03144	0a000004	 beq         |$LN23@RootHubFea|
  03148	e59f01cc	 ldr         r0, [pc, #0x1CC]
  0314c	eb000000	 bl          NKDbgPrintfW
  03150	e3a03001	 mov         r3, #1
  03154	e58d3018	 str         r3, [sp, #0x18]
  03158	ea000001	 b           |$LN24@RootHubFea|
  0315c		 |$LN23@RootHubFea|
  0315c	e3a03000	 mov         r3, #0
  03160	e58d3018	 str         r3, [sp, #0x18]
  03164		 |$LN24@RootHubFea|

; 1112 :                 ResetAndEnablePort(1);

  03164	e3a01001	 mov         r1, #1
  03168	e59d303c	 ldr         r3, [sp, #0x3C]
  0316c	e5933000	 ldr         r3, [r3]
  03170	e2833030	 add         r3, r3, #0x30
  03174	e59d003c	 ldr         r0, [sp, #0x3C]
  03178	e5933000	 ldr         r3, [r3]
  0317c	e1a0e00f	 mov         lr, pc
  03180	e12fff13	 bx          r3

; 1113 :                 break;

  03184	ea00001a	 b           |$LN12@RootHubFea|
  03188		 |$LN10@RootHubFea|

; 1114 :             case USB_HUB_FEATURE_PORT_SUSPEND:            
; 1115 :                 DEBUGMSG(ZONE_HCD, (TEXT("USB_HUB_FEATURE_PORT_SUSPEND\r\n")));

  03188	e59f3178	 ldr         r3, [pc, #0x178]
  0318c	e5933440	 ldr         r3, [r3, #0x440]
  03190	e3130001	 tst         r3, #1
  03194	0a000004	 beq         |$LN25@RootHubFea|
  03198	e59f0178	 ldr         r0, [pc, #0x178]
  0319c	eb000000	 bl          NKDbgPrintfW
  031a0	e3a03001	 mov         r3, #1
  031a4	e58d301c	 str         r3, [sp, #0x1C]
  031a8	ea000001	 b           |$LN26@RootHubFea|
  031ac		 |$LN25@RootHubFea|
  031ac	e3a03000	 mov         r3, #0
  031b0	e58d301c	 str         r3, [sp, #0x1C]
  031b4		 |$LN26@RootHubFea|

; 1116 :                 break;

  031b4	ea00000e	 b           |$LN12@RootHubFea|
  031b8		 |$LN9@RootHubFea|

; 1117 :             case USB_HUB_FEATURE_PORT_POWER:            
; 1118 :                 DEBUGMSG(ZONE_HCD, (TEXT("USB_HUB_FEATURE_PORT_POWER\r\n")));

  031b8	e59f3148	 ldr         r3, [pc, #0x148]
  031bc	e5933440	 ldr         r3, [r3, #0x440]
  031c0	e3130001	 tst         r3, #1
  031c4	0a000004	 beq         |$LN27@RootHubFea|
  031c8	e59f0144	 ldr         r0, [pc, #0x144]
  031cc	eb000000	 bl          NKDbgPrintfW
  031d0	e3a03001	 mov         r3, #1
  031d4	e58d3020	 str         r3, [sp, #0x20]
  031d8	ea000001	 b           |$LN28@RootHubFea|
  031dc		 |$LN27@RootHubFea|
  031dc	e3a03000	 mov         r3, #0
  031e0	e58d3020	 str         r3, [sp, #0x20]
  031e4		 |$LN28@RootHubFea|

; 1119 :                 break;

  031e4	ea000002	 b           |$LN12@RootHubFea|
  031e8		 |$LN8@RootHubFea|

; 1120 :             default: return FALSE;

  031e8	e3a03000	 mov         r3, #0
  031ec	e58d3004	 str         r3, [sp, #4]
  031f0	ea00003f	 b           |$LN17@RootHubFea|
  031f4		 |$LN12@RootHubFea|

; 1121 :         }
; 1122 :     }
; 1123 :     else

  031f4	ea00003c	 b           |$LN7@RootHubFea|
  031f8		 |$LN14@RootHubFea|

; 1124 :     {
; 1125 :         switch (feature) {

  031f8	e1dd34b8	 ldrh        r3, [sp, #0x48]
  031fc	e58d3024	 str         r3, [sp, #0x24]
  03200	e59d3024	 ldr         r3, [sp, #0x24]
  03204	e3530001	 cmp         r3, #1
  03208	0a000006	 beq         |$LN4@RootHubFea|
  0320c	e59d3024	 ldr         r3, [sp, #0x24]
  03210	e3530002	 cmp         r3, #2
  03214	0a00000f	 beq         |$LN3@RootHubFea|
  03218	e59d3024	 ldr         r3, [sp, #0x24]
  0321c	e3530010	 cmp         r3, #0x10
  03220	0a000018	 beq         |$LN2@RootHubFea|
  03224	ea00002d	 b           |$LN1@RootHubFea|
  03228		 |$LN4@RootHubFea|

; 1126 :             case USB_HUB_FEATURE_PORT_ENABLE:
; 1127 :                 DEBUGMSG(ZONE_HCD, (TEXT("CLEAR: USB_HUB_FEATURE_PORT_ENABLE\r\n")));

  03228	e59f30d8	 ldr         r3, [pc, #0xD8]
  0322c	e5933440	 ldr         r3, [r3, #0x440]
  03230	e3130001	 tst         r3, #1
  03234	0a000004	 beq         |$LN29@RootHubFea|
  03238	e59f00d0	 ldr         r0, [pc, #0xD0]
  0323c	eb000000	 bl          NKDbgPrintfW
  03240	e3a03001	 mov         r3, #1
  03244	e58d3028	 str         r3, [sp, #0x28]
  03248	ea000001	 b           |$LN30@RootHubFea|
  0324c		 |$LN29@RootHubFea|
  0324c	e3a03000	 mov         r3, #0
  03250	e58d3028	 str         r3, [sp, #0x28]
  03254		 |$LN30@RootHubFea|

; 1128 :                 break;

  03254	ea000024	 b           |$LN5@RootHubFea|
  03258		 |$LN3@RootHubFea|

; 1129 :             case USB_HUB_FEATURE_PORT_SUSPEND:    
; 1130 :                 DEBUGMSG(ZONE_HCD, (TEXT("CLEAR: USB_HUB_FEATURE_PORT_SUSPEND\r\n")));

  03258	e59f30a8	 ldr         r3, [pc, #0xA8]
  0325c	e5933440	 ldr         r3, [r3, #0x440]
  03260	e3130001	 tst         r3, #1
  03264	0a000004	 beq         |$LN31@RootHubFea|
  03268	e59f009c	 ldr         r0, [pc, #0x9C]
  0326c	eb000000	 bl          NKDbgPrintfW
  03270	e3a03001	 mov         r3, #1
  03274	e58d302c	 str         r3, [sp, #0x2C]
  03278	ea000001	 b           |$LN32@RootHubFea|
  0327c		 |$LN31@RootHubFea|
  0327c	e3a03000	 mov         r3, #0
  03280	e58d302c	 str         r3, [sp, #0x2C]
  03284		 |$LN32@RootHubFea|

; 1131 :                 break;

  03284	ea000018	 b           |$LN5@RootHubFea|
  03288		 |$LN2@RootHubFea|

; 1132 :             case USB_HUB_FEATURE_C_PORT_CONNECTION:       
; 1133 :                     // I think it should be done by critical section or function pointer in OTG side
; 1134 :                 DEBUGMSG(ZONE_HCD, (TEXT("USB_HUB_FEATURE_C_PORT_CONNECTION\r\n")));

  03288	e59f3078	 ldr         r3, [pc, #0x78]
  0328c	e5933440	 ldr         r3, [r3, #0x440]
  03290	e3130001	 tst         r3, #1
  03294	0a000004	 beq         |$LN33@RootHubFea|
  03298	e59f0064	 ldr         r0, [pc, #0x64]
  0329c	eb000000	 bl          NKDbgPrintfW
  032a0	e3a03001	 mov         r3, #1
  032a4	e58d3030	 str         r3, [sp, #0x30]
  032a8	ea000001	 b           |$LN34@RootHubFea|
  032ac		 |$LN33@RootHubFea|
  032ac	e3a03000	 mov         r3, #0
  032b0	e58d3030	 str         r3, [sp, #0x30]
  032b4		 |$LN34@RootHubFea|

; 1135 :                 pOTG->connect_status &= ~CONN_CSC; // clear the connect status change

  032b4	e59d3000	 ldr         r3, [sp]
  032b8	e283304c	 add         r3, r3, #0x4C
  032bc	e5d33000	 ldrb        r3, [r3]
  032c0	e1a02003	 mov         r2, r3
  032c4	e3e03002	 mvn         r3, #2
  032c8	e0021003	 and         r1, r2, r3
  032cc	e59d3000	 ldr         r3, [sp]
  032d0	e283204c	 add         r2, r3, #0x4C
  032d4	e20130ff	 and         r3, r1, #0xFF
  032d8	e5c23000	 strb        r3, [r2]

; 1136 :                 break;

  032dc	ea000002	 b           |$LN5@RootHubFea|
  032e0		 |$LN1@RootHubFea|

; 1137 :             case USB_HUB_FEATURE_C_PORT_ENABLE:           
; 1138 :             case USB_HUB_FEATURE_C_PORT_RESET:            
; 1139 :             case USB_HUB_FEATURE_C_PORT_SUSPEND:
; 1140 :             case USB_HUB_FEATURE_C_PORT_OVER_CURRENT:
; 1141 :             case USB_HUB_FEATURE_PORT_POWER:
; 1142 :             default: return FALSE;

  032e0	e3a03000	 mov         r3, #0
  032e4	e58d3004	 str         r3, [sp, #4]
  032e8	ea000001	 b           |$LN17@RootHubFea|
  032ec		 |$LN5@RootHubFea|
  032ec		 |$LN7@RootHubFea|

; 1143 :         }
; 1144 :     }
; 1145 :     return TRUE;

  032ec	e3a03001	 mov         r3, #1
  032f0	e58d3004	 str         r3, [sp, #4]
  032f4		 |$LN17@RootHubFea|

; 1146 : }

  032f4	e59d0004	 ldr         r0, [sp, #4]
  032f8	e28dd034	 add         sp, sp, #0x34
  032fc	e89d6000	 ldmia       sp, {sp, lr}
  03300	e12fff1e	 bx          lr
  03304		 |$LN38@RootHubFea|
  03304		 |$LN39@RootHubFea|
  03304	00000000	 DCD         |??_C@_1EI@DJMHFJBK@?$AAU?$AAS?$AAB?$AA_?$AAH?$AAU?$AAB?$AA_?$AAF?$AAE?$AAA?$AAT?$AAU?$AAR?$AAE?$AA_?$AAC?$AA_?$AAP?$AAO?$AAR?$AAT?$AA_?$AAC?$AAO?$AAN?$AAN?$AAE?$AAC?$AAT?$AAI?$AAO@|
  03308		 |$LN40@RootHubFea|
  03308	00000000	 DCD         |dpCurSettings|
  0330c		 |$LN41@RootHubFea|
  0330c	00000000	 DCD         |??_C@_1EM@COHIHNIF@?$AAC?$AAL?$AAE?$AAA?$AAR?$AA?3?$AA?5?$AAU?$AAS?$AAB?$AA_?$AAH?$AAU?$AAB?$AA_?$AAF?$AAE?$AAA?$AAT?$AAU?$AAR?$AAE?$AA_?$AAP?$AAO?$AAR?$AAT?$AA_?$AAS?$AAU?$AAS?$AAP@|
  03310		 |$LN42@RootHubFea|
  03310	00000000	 DCD         |??_C@_1EK@GJLPCKKD@?$AAC?$AAL?$AAE?$AAA?$AAR?$AA?3?$AA?5?$AAU?$AAS?$AAB?$AA_?$AAH?$AAU?$AAB?$AA_?$AAF?$AAE?$AAA?$AAT?$AAU?$AAR?$AAE?$AA_?$AAP?$AAO?$AAR?$AAT?$AA_?$AAE?$AAN?$AAA?$AAB@|
  03314		 |$LN43@RootHubFea|
  03314	00000000	 DCD         |??_C@_1DK@HOHFMIJM@?$AAU?$AAS?$AAB?$AA_?$AAH?$AAU?$AAB?$AA_?$AAF?$AAE?$AAA?$AAT?$AAU?$AAR?$AAE?$AA_?$AAP?$AAO?$AAR?$AAT?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA?$AN?$AA?6?$AA?$AA@|
  03318		 |$LN44@RootHubFea|
  03318	00000000	 DCD         |??_C@_1DO@MKEJBJAC@?$AAU?$AAS?$AAB?$AA_?$AAH?$AAU?$AAB?$AA_?$AAF?$AAE?$AAA?$AAT?$AAU?$AAR?$AAE?$AA_?$AAP?$AAO?$AAR?$AAT?$AA_?$AAS?$AAU?$AAS?$AAP?$AAE?$AAN?$AAD?$AA?$AN?$AA?6?$AA?$AA@|
  0331c		 |$LN45@RootHubFea|
  0331c	00000000	 DCD         |??_C@_1DK@OOILAFJM@?$AAU?$AAS?$AAB?$AA_?$AAH?$AAU?$AAB?$AA_?$AAF?$AAE?$AAA?$AAT?$AAU?$AAR?$AAE?$AA_?$AAP?$AAO?$AAR?$AAT?$AA_?$AAR?$AAE?$AAS?$AAE?$AAT?$AA?$AN?$AA?6?$AA?$AA@|
  03320		 |$LN46@RootHubFea|
  03320	00000000	 DCD         |??_C@_1GG@BABJJCEJ@?$AAS?$AAe?$AAt?$AAO?$AAr?$AAC?$AAl?$AAe?$AAa?$AAr?$AAF?$AAe?$AAa?$AAt?$AAu?$AAr?$AAe?$AA?$CI?$AA0?$AAx?$AA?$CF?$AAx?$AA?$CJ?$AA?0?$AA?5?$AAf?$AAe?$AAa?$AAt?$AAu?$AAr?$AAe@|
  03324		 |$LN47@RootHubFea|
  03324	00000000	 DCD         |??_C@_1EC@GCIIHFBN@?$AAG?$AAe?$AAt?$AAP?$AAo?$AAr?$AAt?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?5?$AAw?$AAi?$AAt?$AAh?$AA?5?$AAp?$AAO?$AAT?$AAG?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AN?$AA?6@|
  03328		 |$M44946|

			 ENDP  ; |?RootHubFeature@CHW@@UAAHEEG@Z|, CHW::RootHubFeature

	EXPORT	|??_C@_1DC@DDLKFDF@?$AAR?$AAe?$AAs?$AAe?$AAt?$AAA?$AAn?$AAd?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAP?$AAo?$AAr?$AAt?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  000c0			 AREA	 |.pdata|, PDATA
|$T44966| DCD	|$LN9@ResetAndEn|
	DCD	0x40004704

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DC@DDLKFDF@?$AAR?$AAe?$AAs?$AAe?$AAt?$AAA?$AAn?$AAd?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAP?$AAo?$AAr?$AAt?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "R"
	DCB	0x0, "e", 0x0, "s", 0x0, "e", 0x0, "t", 0x0, "A", 0x0, "n"
	DCB	0x0, "d", 0x0, "E", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l"
	DCB	0x0, "e", 0x0, "P", 0x0, "o", 0x0, "r", 0x0, "t", 0x0, "("
	DCB	0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Odtp

  03328			 AREA	 |.text|, CODE, ARM

  03328		 |?ResetAndEnablePort@CHW@@UAAHE@Z| PROC ; CHW::ResetAndEnablePort

; 1164 : {

  03328		 |$LN9@ResetAndEn|
  03328	e1a0c00d	 mov         r12, sp
  0332c	e92d0003	 stmdb       sp!, {r0, r1}
  03330	e92d5000	 stmdb       sp!, {r12, lr}
  03334	e24dd014	 sub         sp, sp, #0x14
  03338		 |$M44963|

; 1165 :     BOOL fSuccess = TRUE;

  03338	e3a03001	 mov         r3, #1
  0333c	e58d3000	 str         r3, [sp]

; 1166 :     PHSMUSB_T pOTG = (PHSMUSB_T)GetOTGContext();

  03340	e59d001c	 ldr         r0, [sp, #0x1C]
  03344	eb000000	 bl          |?GetOTGContext@CHcd@@QAAPAXXZ|
  03348	e58d000c	 str         r0, [sp, #0xC]
  0334c	e59d300c	 ldr         r3, [sp, #0xC]
  03350	e58d3004	 str         r3, [sp, #4]

; 1167 :     if (pOTG == NULL)

  03354	e59d3004	 ldr         r3, [sp, #4]
  03358	e3530000	 cmp         r3, #0
  0335c	1a000002	 bne         |$LN2@ResetAndEn|

; 1168 :         return FALSE;

  03360	e3a03000	 mov         r3, #0
  03364	e58d3008	 str         r3, [sp, #8]
  03368	ea00002f	 b           |$LN3@ResetAndEn|
  0336c		 |$LN2@ResetAndEn|

; 1169 : 
; 1170 :     DEBUGMSG(ZONE_HCD, (TEXT("ResetAndEnablePort(%d)\r\n"), port));        

  0336c	e59f30cc	 ldr         r3, [pc, #0xCC]
  03370	e5933440	 ldr         r3, [r3, #0x440]
  03374	e3130001	 tst         r3, #1
  03378	0a000006	 beq         |$LN5@ResetAndEn|
  0337c	e5dd3020	 ldrb        r3, [sp, #0x20]
  03380	e1a01003	 mov         r1, r3
  03384	e59f00b0	 ldr         r0, [pc, #0xB0]
  03388	eb000000	 bl          NKDbgPrintfW
  0338c	e3a03001	 mov         r3, #1
  03390	e58d3010	 str         r3, [sp, #0x10]
  03394	ea000001	 b           |$LN6@ResetAndEn|
  03398		 |$LN5@ResetAndEn|
  03398	e3a03000	 mov         r3, #0
  0339c	e58d3010	 str         r3, [sp, #0x10]
  033a0		 |$LN6@ResetAndEn|

; 1171 :         // USB 1.1 spec, 7.1.7.3 - device may take up to 10 ms
; 1172 :         // to recover after reset is removed
; 1173 :         //Do a reset now no matter what
; 1174 :     if (port > 0)

  033a0	e5dd3020	 ldrb        r3, [sp, #0x20]
  033a4	e3530000	 cmp         r3, #0
  033a8	da00001b	 ble         |$LN1@ResetAndEn|

; 1175 :     {
; 1176 :         // We do the Power |= POWER_RESET
; 1177 :         SETREG8(&pOTG->pUsbGenRegs->Power, POWER_RESET);

  033ac	e59d3004	 ldr         r3, [sp, #4]
  033b0	e2833020	 add         r3, r3, #0x20
  033b4	e5933000	 ldr         r3, [r3]
  033b8	e2833001	 add         r3, r3, #1
  033bc	e5d33000	 ldrb        r3, [r3]
  033c0	e3833008	 orr         r3, r3, #8
  033c4	e20320ff	 and         r2, r3, #0xFF
  033c8	e59d3004	 ldr         r3, [sp, #4]
  033cc	e2833020	 add         r3, r3, #0x20
  033d0	e5933000	 ldr         r3, [r3]
  033d4	e2833001	 add         r3, r3, #1
  033d8	e5c32000	 strb        r2, [r3]

; 1178 :         Sleep(50); // Sleep for 50ms after reset as request

  033dc	e3a00032	 mov         r0, #0x32
  033e0	eb000000	 bl          Sleep

; 1179 :         // We do the Power &= ~POWER_RESET
; 1180 :         CLRREG8(&pOTG->pUsbGenRegs->Power, POWER_RESET);

  033e4	e59d3004	 ldr         r3, [sp, #4]
  033e8	e2833020	 add         r3, r3, #0x20
  033ec	e5933000	 ldr         r3, [r3]
  033f0	e2833001	 add         r3, r3, #1
  033f4	e5d33000	 ldrb        r3, [r3]
  033f8	e1a02003	 mov         r2, r3
  033fc	e3e03008	 mvn         r3, #8
  03400	e0023003	 and         r3, r2, r3
  03404	e20320ff	 and         r2, r3, #0xFF
  03408	e59d3004	 ldr         r3, [sp, #4]
  0340c	e2833020	 add         r3, r3, #0x20
  03410	e5933000	 ldr         r3, [r3]
  03414	e2833001	 add         r3, r3, #1
  03418	e5c32000	 strb        r2, [r3]
  0341c		 |$LN1@ResetAndEn|

; 1181 :     }
; 1182 : 
; 1183 :     Sleep( 10 );

  0341c	e3a0000a	 mov         r0, #0xA
  03420	eb000000	 bl          Sleep

; 1184 :   
; 1185 : 
; 1186 :     return fSuccess;

  03424	e59d3000	 ldr         r3, [sp]
  03428	e58d3008	 str         r3, [sp, #8]
  0342c		 |$LN3@ResetAndEn|

; 1187 : }

  0342c	e59d0008	 ldr         r0, [sp, #8]
  03430	e28dd014	 add         sp, sp, #0x14
  03434	e89d6000	 ldmia       sp, {sp, lr}
  03438	e12fff1e	 bx          lr
  0343c		 |$LN10@ResetAndEn|
  0343c		 |$LN11@ResetAndEn|
  0343c	00000000	 DCD         |??_C@_1DC@DDLKFDF@?$AAR?$AAe?$AAs?$AAe?$AAt?$AAA?$AAn?$AAd?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAP?$AAo?$AAr?$AAt?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  03440		 |$LN12@ResetAndEn|
  03440	00000000	 DCD         |dpCurSettings|
  03444		 |$M44964|

			 ENDP  ; |?ResetAndEnablePort@CHW@@UAAHE@Z|, CHW::ResetAndEnablePort

	EXPORT	|??_C@_1CM@OHNCCEL@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAP?$AAo?$AAr?$AAt?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  000c8			 AREA	 |.pdata|, PDATA
|$T44976| DCD	|$LN7@DisablePor|
	DCD	0x40001604

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@OHNCCEL@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAP?$AAo?$AAr?$AAt?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "C"
	DCB	0x0, "H", 0x0, "W", 0x0, ":", 0x0, ":", 0x0, "D", 0x0, "i"
	DCB	0x0, "s", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, "P"
	DCB	0x0, "o", 0x0, "r", 0x0, "t", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  03444			 AREA	 |.text|, CODE, ARM

  03444		 |?DisablePort@CHW@@UAAXE@Z| PROC	; CHW::DisablePort

; 1199 : {

  03444		 |$LN7@DisablePor|
  03444	e1a0c00d	 mov         r12, sp
  03448	e92d0003	 stmdb       sp!, {r0, r1}
  0344c	e92d5000	 stmdb       sp!, {r12, lr}
  03450	e24dd004	 sub         sp, sp, #4
  03454		 |$M44973|

; 1200 : #if 0
; 1201 :     PORTSC portSC=Read_PORTSC(port);;
; 1202 :     // no point doing any work unless the port is enabled
; 1203 :     if ( portSC.bit.Power && portSC.bit.Owner==0 && portSC.bit.Enabled ) {
; 1204 :         // clear port enabled bit and enabled change bit,
; 1205 :         // but don't alter the connect status change bit,
; 1206 :         // which is write-clear.
; 1207 :         portSC.bit.Enabled=0;
; 1208 :         portSC.bit.ConnectStatusChange=0;
; 1209 :         portSC.bit.EnableChange=1;
; 1210 :         portSC.bit.OverCurrentChange=0;        
; 1211 :         Write_PORTSC( port, portSC );
; 1212 : 
; 1213 :         // disable port can take some time to act, because
; 1214 :         // a USB request may have been in progress on the port.
; 1215 :         Sleep( 10 );
; 1216 :     }
; 1217 : #else
; 1218 : #ifdef DEBUG
; 1219 :     DEBUGMSG(ZONE_HCD, (TEXT("CHW::DisablePort %d\r\n"), port));

  03454	e59f303c	 ldr         r3, [pc, #0x3C]
  03458	e5933440	 ldr         r3, [r3, #0x440]
  0345c	e3130001	 tst         r3, #1
  03460	0a000006	 beq         |$LN3@DisablePor|
  03464	e5dd3010	 ldrb        r3, [sp, #0x10]
  03468	e1a01003	 mov         r1, r3
  0346c	e59f0020	 ldr         r0, [pc, #0x20]
  03470	eb000000	 bl          NKDbgPrintfW
  03474	e3a03001	 mov         r3, #1
  03478	e58d3000	 str         r3, [sp]
  0347c	ea000001	 b           |$LN4@DisablePor|
  03480		 |$LN3@DisablePor|
  03480	e3a03000	 mov         r3, #0
  03484	e58d3000	 str         r3, [sp]
  03488		 |$LN4@DisablePor|

; 1220 : #else
; 1221 :     UNREFERENCED_PARAMETER(port);
; 1222 : #endif
; 1223 : #endif
; 1224 : }

  03488	e28dd004	 add         sp, sp, #4
  0348c	e89d6000	 ldmia       sp, {sp, lr}
  03490	e12fff1e	 bx          lr
  03494		 |$LN8@DisablePor|
  03494		 |$LN9@DisablePor|
  03494	00000000	 DCD         |??_C@_1CM@OHNCCEL@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAP?$AAo?$AAr?$AAt?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  03498		 |$LN10@DisablePor|
  03498	00000000	 DCD         |dpCurSettings|
  0349c		 |$M44974|

			 ENDP  ; |?DisablePort@CHW@@UAAXE@Z|, CHW::DisablePort

	EXPORT	|?SignalDisconnectComplete@CHW@@QAAHXZ|	; CHW::SignalDisconnectComplete
	EXPORT	|??_C@_1DE@IAAFAKLF@?$AAR?$AAo?$AAo?$AAt?$AAH?$AAU?$AAB?$AA?3?$AAP?$AAo?$AAr?$AAt?$AA?$FL?$AA?$CF?$AAd?$AA?$FN?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DO@KFHGNHPP@?$AAR?$AAo?$AAo?$AAt?$AAH?$AAU?$AAB?$AA?3?$AA?3?$AAp?$AAp?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAP?$AAo?$AAr?$AAt?$AA?5?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|?GetDeviceOnPort@CHub@@QAAPAPAVCDevice@@XZ| ; CHub::GetDeviceOnPort
	EXPORT	|??_C@_1DA@BCICOLEB@?$AAR?$AAo?$AAo?$AAt?$AAH?$AAU?$AAB?$AA?3?$AAN?$AAo?$AAO?$AAf?$AAP?$AAo?$AAr?$AAt?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|?GetNumberOfPort@CHub@@QAAHXZ|		; CHub::GetNumberOfPort
	EXPORT	|??_C@_1CA@BLJPLCPF@?$AAR?$AAo?$AAo?$AAt?$AAH?$AAU?$AAB?$AA?3?$AA?3?$AAN?$AAU?$AAL?$AAL?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|?GetRootHub@CHcd@@QAAPAVCRootHub@@XZ|	; CHcd::GetRootHub

  00000			 AREA	 |.bss|, NOINIT
|?bDisconnect@?1??WaitForPortStatusChange@CHW@@UAAHPAX@Z@4HA| % 0x4 ; `CHW::WaitForPortStatusChange'::`2'::bDisconnect

  000d0			 AREA	 |.pdata|, PDATA
|$T44993| DCD	|$LN32@WaitForPor|
	DCD	0x4000ce04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DE@IAAFAKLF@?$AAR?$AAo?$AAo?$AAt?$AAH?$AAU?$AAB?$AA?3?$AAP?$AAo?$AAr?$AAt?$AA?$FL?$AA?$CF?$AAd?$AA?$FN?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "R"
	DCB	0x0, "o", 0x0, "o", 0x0, "t", 0x0, "H", 0x0, "U", 0x0, "B"
	DCB	0x0, ":", 0x0, "P", 0x0, "o", 0x0, "r", 0x0, "t", 0x0, "["
	DCB	0x0, "%", 0x0, "d", 0x0, "]", 0x0, " ", 0x0, "=", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@KFHGNHPP@?$AAR?$AAo?$AAo?$AAt?$AAH?$AAU?$AAB?$AA?3?$AA?3?$AAp?$AAp?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAP?$AAo?$AAr?$AAt?$AA?5?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AN?$AA?6?$AA?$AA@| DCB "R"
	DCB	0x0, "o", 0x0, "o", 0x0, "t", 0x0, "H", 0x0, "U", 0x0, "B"
	DCB	0x0, ":", 0x0, ":", 0x0, "p", 0x0, "p", 0x0, "D", 0x0, "e"
	DCB	0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "P", 0x0, "o"
	DCB	0x0, "r", 0x0, "t", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "N"
	DCB	0x0, "U", 0x0, "L", 0x0, "L", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@BCICOLEB@?$AAR?$AAo?$AAo?$AAt?$AAH?$AAU?$AAB?$AA?3?$AAN?$AAo?$AAO?$AAf?$AAP?$AAo?$AAr?$AAt?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "R"
	DCB	0x0, "o", 0x0, "o", 0x0, "t", 0x0, "H", 0x0, "U", 0x0, "B"
	DCB	0x0, ":", 0x0, "N", 0x0, "o", 0x0, "O", 0x0, "f", 0x0, "P"
	DCB	0x0, "o", 0x0, "r", 0x0, "t", 0x0, " ", 0x0, "=", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CA@BLJPLCPF@?$AAR?$AAo?$AAo?$AAt?$AAH?$AAU?$AAB?$AA?3?$AA?3?$AAN?$AAU?$AAL?$AAL?$AA?$AN?$AA?6?$AA?$AA@| DCB "R"
	DCB	0x0, "o", 0x0, "o", 0x0, "t", 0x0, "H", 0x0, "U", 0x0, "B"
	DCB	0x0, ":", 0x0, ":", 0x0, "N", 0x0, "U", 0x0, "L", 0x0, "L"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  0349c			 AREA	 |.text|, CODE, ARM

  0349c		 |?WaitForPortStatusChange@CHW@@UAAHPAX@Z| PROC ; CHW::WaitForPortStatusChange

; 1226 : {

  0349c		 |$LN32@WaitForPor|
  0349c	e1a0c00d	 mov         r12, sp
  034a0	e92d0003	 stmdb       sp!, {r0, r1}
  034a4	e92d5000	 stmdb       sp!, {r12, lr}
  034a8	e24dd05c	 sub         sp, sp, #0x5C
  034ac		 |$M44990|

; 1227 :     DWORD dwErr;
; 1228 :     DWORD timeout = 500;

  034ac	e3a03f7d	 mov         r3, #0x7D, 30
  034b0	e58d3004	 str         r3, [sp, #4]

; 1229 :     static BOOL bDisconnect = FALSE;
; 1230 :     if ((m_hUsbHubDisconnectEvent) && (m_hUsbHubConnectEvent)) {

  034b4	e59d3064	 ldr         r3, [sp, #0x64]
  034b8	e2833f6d	 add         r3, r3, #0x6D, 30
  034bc	e5933000	 ldr         r3, [r3]
  034c0	e3530000	 cmp         r3, #0
  034c4	0a0000b6	 beq         |$LN19@WaitForPor|
  034c8	e59d3064	 ldr         r3, [sp, #0x64]
  034cc	e2833e1b	 add         r3, r3, #0x1B, 28
  034d0	e5933000	 ldr         r3, [r3]
  034d4	e3530000	 cmp         r3, #0
  034d8	0a0000b1	 beq         |$LN19@WaitForPor|
  034dc		 |$LN18@WaitForPor|

; 1231 :        for(;;)
; 1232 :        {           
; 1233 :             if (m_hHubChanged!=NULL) {

  034dc	e59d3068	 ldr         r3, [sp, #0x68]
  034e0	e3530000	 cmp         r3, #0
  034e4	0a000012	 beq         |$LN16@WaitForPor|

; 1234 :                 HANDLE hArray[3];
; 1235 :                 hArray[0]=m_hUsbHubConnectEvent;

  034e8	e59d3064	 ldr         r3, [sp, #0x64]
  034ec	e2833e1b	 add         r3, r3, #0x1B, 28
  034f0	e5933000	 ldr         r3, [r3]
  034f4	e58d3008	 str         r3, [sp, #8]

; 1236 :                 hArray[1]=m_hUsbHubDisconnectEvent;

  034f8	e59d3064	 ldr         r3, [sp, #0x64]
  034fc	e2833f6d	 add         r3, r3, #0x6D, 30
  03500	e5933000	 ldr         r3, [r3]
  03504	e58d300c	 str         r3, [sp, #0xC]

; 1237 :                 hArray[2]=m_hHubChanged;

  03508	e59d3068	 ldr         r3, [sp, #0x68]
  0350c	e58d3010	 str         r3, [sp, #0x10]

; 1238 :                 dwErr = WaitForMultipleObjects(3,hArray,FALSE,timeout);

  03510	e59d3004	 ldr         r3, [sp, #4]
  03514	e3a02000	 mov         r2, #0
  03518	e28d1008	 add         r1, sp, #8
  0351c	e3a00003	 mov         r0, #3
  03520	eb000000	 bl          WaitForMultipleObjects
  03524	e58d0038	 str         r0, [sp, #0x38]
  03528	e59d3038	 ldr         r3, [sp, #0x38]
  0352c	e58d3000	 str         r3, [sp]

; 1239 :             }
; 1240 :             else

  03530	ea00000f	 b           |$LN15@WaitForPor|
  03534		 |$LN16@WaitForPor|

; 1241 :             {
; 1242 :                 HANDLE hArray[2];
; 1243 :                 hArray[0] = m_hUsbHubConnectEvent;

  03534	e59d3064	 ldr         r3, [sp, #0x64]
  03538	e2833e1b	 add         r3, r3, #0x1B, 28
  0353c	e5933000	 ldr         r3, [r3]
  03540	e58d3014	 str         r3, [sp, #0x14]

; 1244 :                 hArray[1] = m_hUsbHubDisconnectEvent;

  03544	e59d3064	 ldr         r3, [sp, #0x64]
  03548	e2833f6d	 add         r3, r3, #0x6D, 30
  0354c	e5933000	 ldr         r3, [r3]
  03550	e58d3018	 str         r3, [sp, #0x18]

; 1245 :                 dwErr = WaitForMultipleObjects(2, hArray, FALSE,timeout);

  03554	e59d3004	 ldr         r3, [sp, #4]
  03558	e3a02000	 mov         r2, #0
  0355c	e28d1014	 add         r1, sp, #0x14
  03560	e3a00002	 mov         r0, #2
  03564	eb000000	 bl          WaitForMultipleObjects
  03568	e58d003c	 str         r0, [sp, #0x3C]
  0356c	e59d303c	 ldr         r3, [sp, #0x3C]
  03570	e58d3000	 str         r3, [sp]
  03574		 |$LN15@WaitForPor|

; 1246 :             }
; 1247 :             if (dwErr == WAIT_OBJECT_0+1)

  03574	e59d3000	 ldr         r3, [sp]
  03578	e3530001	 cmp         r3, #1
  0357c	1a000003	 bne         |$LN14@WaitForPor|

; 1248 :                 bDisconnect = TRUE;

  03580	e59f2234	 ldr         r2, [pc, #0x234]
  03584	e3a03001	 mov         r3, #1
  03588	e5823000	 str         r3, [r2]
  0358c	ea00007b	 b           |$LN13@WaitForPor|
  03590		 |$LN14@WaitForPor|

; 1249 :             else if (dwErr == WAIT_TIMEOUT) 

  03590	e59d2000	 ldr         r2, [sp]
  03594	e3a03c01	 mov         r3, #1, 24
  03598	e3833002	 orr         r3, r3, #2
  0359c	e1520003	 cmp         r2, r3
  035a0	1a000076	 bne         |$LN12@WaitForPor|

; 1250 :             {
; 1251 :                 BOOL bSignalDetach = FALSE;

  035a4	e3a03000	 mov         r3, #0
  035a8	e58d301c	 str         r3, [sp, #0x1C]

; 1252 :                 CRootHub *pRootHub = GetRootHub();

  035ac	e59d0064	 ldr         r0, [sp, #0x64]
  035b0	eb000000	 bl          |?GetRootHub@CHcd@@QAAPAVCRootHub@@XZ|
  035b4	e58d0040	 str         r0, [sp, #0x40]
  035b8	e59d3040	 ldr         r3, [sp, #0x40]
  035bc	e58d3020	 str         r3, [sp, #0x20]

; 1253 :                 if (pRootHub == NULL)

  035c0	e59d3020	 ldr         r3, [sp, #0x20]
  035c4	e3530000	 cmp         r3, #0
  035c8	1a000009	 bne         |$LN11@WaitForPor|

; 1254 :                 {                    
; 1255 :                     DEBUGMSG(1, (TEXT("RootHUB::NULL\r\n")));

  035cc	e59f01fc	 ldr         r0, [pc, #0x1FC]
  035d0	eb000000	 bl          NKDbgPrintfW
  035d4	e3a03001	 mov         r3, #1
  035d8	e58d3044	 str         r3, [sp, #0x44]
  035dc	ea000001	 b           |$LN23@WaitForPor|
  035e0	e3a03000	 mov         r3, #0
  035e4	e58d3044	 str         r3, [sp, #0x44]
  035e8		 |$LN23@WaitForPor|

; 1256 :                     bSignalDetach = TRUE;

  035e8	e3a03001	 mov         r3, #1
  035ec	e58d301c	 str         r3, [sp, #0x1C]

; 1257 :                 }
; 1258 :                 else 

  035f0	ea000062	 b           |$LN10@WaitForPor|
  035f4		 |$LN11@WaitForPor|

; 1259 :                 {
; 1260 :                     CDevice ** ppDevicePort;
; 1261 :                     int port = pRootHub->GetNumberOfPort();             

  035f4	e59d0020	 ldr         r0, [sp, #0x20]
  035f8	eb000000	 bl          |?GetNumberOfPort@CHub@@QAAHXZ|
  035fc	e58d0048	 str         r0, [sp, #0x48]
  03600	e59d3048	 ldr         r3, [sp, #0x48]
  03604	e58d3024	 str         r3, [sp, #0x24]

; 1262 :                     DEBUGMSG(ZONE_HCD, (TEXT("RootHUB:NoOfPort = %d\r\n"), port));

  03608	e59f31b4	 ldr         r3, [pc, #0x1B4]
  0360c	e5933440	 ldr         r3, [r3, #0x440]
  03610	e3130001	 tst         r3, #1
  03614	0a000005	 beq         |$LN24@WaitForPor|
  03618	e59d1024	 ldr         r1, [sp, #0x24]
  0361c	e59f01a8	 ldr         r0, [pc, #0x1A8]
  03620	eb000000	 bl          NKDbgPrintfW
  03624	e3a03001	 mov         r3, #1
  03628	e58d304c	 str         r3, [sp, #0x4C]
  0362c	ea000001	 b           |$LN25@WaitForPor|
  03630		 |$LN24@WaitForPor|
  03630	e3a03000	 mov         r3, #0
  03634	e58d304c	 str         r3, [sp, #0x4C]
  03638		 |$LN25@WaitForPor|

; 1263 :                     ppDevicePort = pRootHub->GetDeviceOnPort();

  03638	e59d0020	 ldr         r0, [sp, #0x20]
  0363c	eb000000	 bl          |?GetDeviceOnPort@CHub@@QAAPAPAVCDevice@@XZ|
  03640	e58d0050	 str         r0, [sp, #0x50]
  03644	e59d3050	 ldr         r3, [sp, #0x50]
  03648	e58d3028	 str         r3, [sp, #0x28]

; 1264 :                     if (ppDevicePort == NULL)

  0364c	e59d3028	 ldr         r3, [sp, #0x28]
  03650	e3530000	 cmp         r3, #0
  03654	1a000009	 bne         |$LN9@WaitForPor|

; 1265 :                     {         
; 1266 :                         DEBUGMSG(1, (TEXT("RootHUB::ppDevicePort = NULL\r\n")));

  03658	e59f0168	 ldr         r0, [pc, #0x168]
  0365c	eb000000	 bl          NKDbgPrintfW
  03660	e3a03001	 mov         r3, #1
  03664	e58d3054	 str         r3, [sp, #0x54]
  03668	ea000001	 b           |$LN27@WaitForPor|
  0366c	e3a03000	 mov         r3, #0
  03670	e58d3054	 str         r3, [sp, #0x54]
  03674		 |$LN27@WaitForPor|

; 1267 :                         bSignalDetach = TRUE;

  03674	e3a03001	 mov         r3, #1
  03678	e58d301c	 str         r3, [sp, #0x1C]

; 1268 :                     }
; 1269 :                     else

  0367c	ea000031	 b           |$LN8@WaitForPor|
  03680		 |$LN9@WaitForPor|

; 1270 :                     {
; 1271 :                         int i = 0;

  03680	e3a03000	 mov         r3, #0
  03684	e58d302c	 str         r3, [sp, #0x2C]

; 1272 :                         int no_device = 0;

  03688	e3a03000	 mov         r3, #0
  0368c	e58d3030	 str         r3, [sp, #0x30]

; 1273 :                         for (i = 0; i < port; i++)

  03690	e3a03000	 mov         r3, #0
  03694	e58d302c	 str         r3, [sp, #0x2C]
  03698	ea000002	 b           |$LN7@WaitForPor|
  0369c		 |$LN6@WaitForPor|
  0369c	e59d302c	 ldr         r3, [sp, #0x2C]
  036a0	e2833001	 add         r3, r3, #1
  036a4	e58d302c	 str         r3, [sp, #0x2C]
  036a8		 |$LN7@WaitForPor|
  036a8	e59d202c	 ldr         r2, [sp, #0x2C]
  036ac	e59d3024	 ldr         r3, [sp, #0x24]
  036b0	e1520003	 cmp         r2, r3
  036b4	aa00001d	 bge         |$LN5@WaitForPor|

; 1274 :                         {
; 1275 :                             DEBUGMSG(ZONE_HCD, (TEXT("RootHUB:Port[%d] = 0x%x\r\n"), i, ppDevicePort[i]));                                    

  036b8	e59f3104	 ldr         r3, [pc, #0x104]
  036bc	e5933440	 ldr         r3, [r3, #0x440]
  036c0	e3130001	 tst         r3, #1
  036c4	0a00000b	 beq         |$LN28@WaitForPor|
  036c8	e59d102c	 ldr         r1, [sp, #0x2C]
  036cc	e3a03004	 mov         r3, #4
  036d0	e0020391	 mul         r2, r1, r3
  036d4	e59d3028	 ldr         r3, [sp, #0x28]
  036d8	e0833002	 add         r3, r3, r2
  036dc	e5932000	 ldr         r2, [r3]
  036e0	e59d102c	 ldr         r1, [sp, #0x2C]
  036e4	e59f00d4	 ldr         r0, [pc, #0xD4]
  036e8	eb000000	 bl          NKDbgPrintfW
  036ec	e3a03001	 mov         r3, #1
  036f0	e58d3058	 str         r3, [sp, #0x58]
  036f4	ea000001	 b           |$LN29@WaitForPor|
  036f8		 |$LN28@WaitForPor|
  036f8	e3a03000	 mov         r3, #0
  036fc	e58d3058	 str         r3, [sp, #0x58]
  03700		 |$LN29@WaitForPor|

; 1276 :                             if (ppDevicePort[i] == NULL)

  03700	e59d102c	 ldr         r1, [sp, #0x2C]
  03704	e3a03004	 mov         r3, #4
  03708	e0020391	 mul         r2, r1, r3
  0370c	e59d3028	 ldr         r3, [sp, #0x28]
  03710	e0833002	 add         r3, r3, r2
  03714	e5933000	 ldr         r3, [r3]
  03718	e3530000	 cmp         r3, #0
  0371c	1a000002	 bne         |$LN4@WaitForPor|

; 1277 :                                 no_device++;

  03720	e59d3030	 ldr         r3, [sp, #0x30]
  03724	e2833001	 add         r3, r3, #1
  03728	e58d3030	 str         r3, [sp, #0x30]
  0372c		 |$LN4@WaitForPor|

; 1278 :                         }

  0372c	eaffffda	 b           |$LN6@WaitForPor|
  03730		 |$LN5@WaitForPor|

; 1279 :                         if (no_device == port)

  03730	e59d2030	 ldr         r2, [sp, #0x30]
  03734	e59d3024	 ldr         r3, [sp, #0x24]
  03738	e1520003	 cmp         r2, r3
  0373c	1a000001	 bne         |$LN3@WaitForPor|

; 1280 :                             bSignalDetach = TRUE;

  03740	e3a03001	 mov         r3, #1
  03744	e58d301c	 str         r3, [sp, #0x1C]
  03748		 |$LN3@WaitForPor|
  03748		 |$LN8@WaitForPor|

; 1281 :                     }
; 1282 : 
; 1283 :                     if ((bSignalDetach) && (bDisconnect))

  03748	e59d301c	 ldr         r3, [sp, #0x1C]
  0374c	e3530000	 cmp         r3, #0
  03750	0a000008	 beq         |$LN2@WaitForPor|
  03754	e59f3060	 ldr         r3, [pc, #0x60]
  03758	e5933000	 ldr         r3, [r3]
  0375c	e3530000	 cmp         r3, #0
  03760	0a000004	 beq         |$LN2@WaitForPor|

; 1284 :                     {
; 1285 :                         bDisconnect = FALSE;

  03764	e59f2050	 ldr         r2, [pc, #0x50]
  03768	e3a03000	 mov         r3, #0
  0376c	e5823000	 str         r3, [r2]

; 1286 :                         SignalDisconnectComplete();

  03770	e59d0064	 ldr         r0, [sp, #0x64]
  03774	eb000000	 bl          |?SignalDisconnectComplete@CHW@@QAAHXZ|
  03778		 |$LN2@WaitForPor|

; 1287 :                     }
; 1288 :                     timeout = INFINITE;

  03778	e3e03000	 mvn         r3, #0
  0377c	e58d3004	 str         r3, [sp, #4]
  03780		 |$LN10@WaitForPor|
  03780		 |$LN12@WaitForPor|
  03780		 |$LN13@WaitForPor|

; 1289 :                 }
; 1290 :             }
; 1291 : 
; 1292 :             if (dwErr != WAIT_TIMEOUT)

  03780	e59d2000	 ldr         r2, [sp]
  03784	e3a03c01	 mov         r3, #1, 24
  03788	e3833002	 orr         r3, r3, #2
  0378c	e1520003	 cmp         r2, r3
  03790	0a000002	 beq         |$LN1@WaitForPor|

; 1293 :                 return TRUE;

  03794	e3a03001	 mov         r3, #1
  03798	e58d3034	 str         r3, [sp, #0x34]
  0379c	ea000002	 b           |$LN20@WaitForPor|
  037a0		 |$LN1@WaitForPor|

; 1294 :        }

  037a0	eaffff4d	 b           |$LN18@WaitForPor|
  037a4		 |$LN19@WaitForPor|

; 1295 :     }    
; 1296 :     return FALSE;

  037a4	e3a03000	 mov         r3, #0
  037a8	e58d3034	 str         r3, [sp, #0x34]
  037ac		 |$LN20@WaitForPor|

; 1297 : }

  037ac	e59d0034	 ldr         r0, [sp, #0x34]
  037b0	e28dd05c	 add         sp, sp, #0x5C
  037b4	e89d6000	 ldmia       sp, {sp, lr}
  037b8	e12fff1e	 bx          lr
  037bc		 |$LN33@WaitForPor|
  037bc		 |$LN34@WaitForPor|
  037bc	00000000	 DCD         |?bDisconnect@?1??WaitForPortStatusChange@CHW@@UAAHPAX@Z@4HA|
  037c0		 |$LN35@WaitForPor|
  037c0	00000000	 DCD         |??_C@_1DE@IAAFAKLF@?$AAR?$AAo?$AAo?$AAt?$AAH?$AAU?$AAB?$AA?3?$AAP?$AAo?$AAr?$AAt?$AA?$FL?$AA?$CF?$AAd?$AA?$FN?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  037c4		 |$LN36@WaitForPor|
  037c4	00000000	 DCD         |dpCurSettings|
  037c8		 |$LN37@WaitForPor|
  037c8	00000000	 DCD         |??_C@_1DO@KFHGNHPP@?$AAR?$AAo?$AAo?$AAt?$AAH?$AAU?$AAB?$AA?3?$AA?3?$AAp?$AAp?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAP?$AAo?$AAr?$AAt?$AA?5?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AN?$AA?6?$AA?$AA@|
  037cc		 |$LN38@WaitForPor|
  037cc	00000000	 DCD         |??_C@_1DA@BCICOLEB@?$AAR?$AAo?$AAo?$AAt?$AAH?$AAU?$AAB?$AA?3?$AAN?$AAo?$AAO?$AAf?$AAP?$AAo?$AAr?$AAt?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  037d0		 |$LN39@WaitForPor|
  037d0	00000000	 DCD         |??_C@_1CA@BLJPLCPF@?$AAR?$AAo?$AAo?$AAt?$AAH?$AAU?$AAB?$AA?3?$AA?3?$AAN?$AAU?$AAL?$AAL?$AA?$AN?$AA?6?$AA?$AA@|
  037d4		 |$M44991|

			 ENDP  ; |?WaitForPortStatusChange@CHW@@UAAHPAX@Z|, CHW::WaitForPortStatusChange

; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\musb\musbhcd\usb2com\cdevice.hpp

  00000			 AREA	 |.pdata|, PDATA
|$T45007| DCD	|$LN5@GetNumberO|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetNumberOfPort@CHub@@QAAHXZ| PROC	; CHub::GetNumberOfPort

; 433  :     int         GetNumberOfPort() { return m_usbHubDescriptor.bNumberOfPorts;};

  00000		 |$LN5@GetNumberO|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M45004|
  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e283306a	 add         r3, r3, #0x6A
  00018	e5d33000	 ldrb        r3, [r3]
  0001c	e58d3000	 str         r3, [sp]
  00020	e59d0000	 ldr         r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M45005|

			 ENDP  ; |?GetNumberOfPort@CHub@@QAAHXZ|, CHub::GetNumberOfPort


  00000			 AREA	 |.pdata|, PDATA
|$T45015| DCD	|$LN5@GetDeviceO|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetDeviceOnPort@CHub@@QAAPAPAVCDevice@@XZ| PROC ; CHub::GetDeviceOnPort

; 434  :     CDevice**   GetDeviceOnPort() { return m_ppCDeviceOnPort; };    

  00000		 |$LN5@GetDeviceO|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M45012|
  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e28330b0	 add         r3, r3, #0xB0
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3000	 str         r3, [sp]
  00020	e59d0000	 ldr         r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M45013|

			 ENDP  ; |?GetDeviceOnPort@CHub@@QAAPAPAVCDevice@@XZ|, CHub::GetDeviceOnPort

; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\musb\musbhcd\usb2com\hcd.hpp

  00000			 AREA	 |.pdata|, PDATA
|$T45023| DCD	|$LN5@GetRootHub|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetRootHub@CHcd@@QAAPAVCRootHub@@XZ| PROC ; CHcd::GetRootHub

; 100  :     CRootHub* GetRootHub() { return m_pCRootHub;};

  00000		 |$LN5@GetRootHub|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M45020|
  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e28330b0	 add         r3, r3, #0xB0
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3000	 str         r3, [sp]
  00020	e59d0000	 ldr         r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M45021|

			 ENDP  ; |?GetRootHub@CHcd@@QAAPAVCRootHub@@XZ|, CHcd::GetRootHub

; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\musb\musbhcd\musbmhdrc\chw.h

  00000			 AREA	 |.pdata|, PDATA
|$T45031| DCD	|$LN5@SignalDisc@2|
	DCD	0x40001204
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SignalDisconnectComplete@CHW@@QAAHXZ| PROC ; CHW::SignalDisconnectComplete

; 386  :     BOOL SignalDisconnectComplete(void) { return (m_cBusyPipeList.SignalDisconnectComplete(GetOTGContext()));};

  00000		 |$LN5@SignalDisc@2|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd00c	 sub         sp, sp, #0xC
  00010		 |$M45028|
  00010	e59d0014	 ldr         r0, [sp, #0x14]
  00014	eb000000	 bl          |?GetOTGContext@CHcd@@QAAPAXXZ|
  00018	e58d0004	 str         r0, [sp, #4]
  0001c	e59d1004	 ldr         r1, [sp, #4]
  00020	e59d3014	 ldr         r3, [sp, #0x14]
  00024	e28300c4	 add         r0, r3, #0xC4
  00028	eb000000	 bl          |?SignalDisconnectComplete@CBusyPipeList@@QAAHPAX@Z|
  0002c	e58d0008	 str         r0, [sp, #8]
  00030	e59d3008	 ldr         r3, [sp, #8]
  00034	e58d3000	 str         r3, [sp]
  00038	e59d0000	 ldr         r0, [sp]
  0003c	e28dd00c	 add         sp, sp, #0xC
  00040	e89d6000	 ldmia       sp, {sp, lr}
  00044	e12fff1e	 bx          lr
  00048		 |$M45029|

			 ENDP  ; |?SignalDisconnectComplete@CHW@@QAAHXZ|, CHW::SignalDisconnectComplete

	EXPORT	|??_C@_1HK@DMCNNPNM@?$AAA?$AAc?$AAq?$AAu?$AAi?$AAr?$AAe?$AAD?$AAM?$AAA?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?3?$AAe?$AAp?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AAd?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5@| [ DATA ] ; `string'
	EXPORT	|?AcquireDMAChannel@CHW@@QAAEPAVCPipe@@@Z| ; CHW::AcquireDMAChannel
	IMPORT	|HcdPdd_PreTransferActivation|
	IMPORT	|__rt_sdiv|
; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\musb\musbhcd\musbmhdrc\chw.cpp

  00000			 AREA	 |.bss|, NOINIT
|?next_availDMA@?1??AcquireDMAChannel@CHW@@QAAEPAVCPipe@@@Z@4HA| % 0x4 ; `CHW::AcquireDMAChannel'::`2'::next_availDMA

  000d8			 AREA	 |.pdata|, PDATA
|$T45045| DCD	|$LN19@AcquireDMA|
	DCD	0x4000bc04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HK@DMCNNPNM@?$AAA?$AAc?$AAq?$AAu?$AAi?$AAr?$AAe?$AAD?$AAM?$AAA?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?3?$AAe?$AAp?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AAd?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5@| DCB "A"
	DCB	0x0, "c", 0x0, "q", 0x0, "u", 0x0, "i", 0x0, "r", 0x0, "e"
	DCB	0x0, "D", 0x0, "M", 0x0, "A", 0x0, "C", 0x0, "h", 0x0, "a"
	DCB	0x0, "n", 0x0, "n", 0x0, "e", 0x0, "l", 0x0, ":", 0x0, "e"
	DCB	0x0, "p", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " "
	DCB	0x0, "d", 0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, "c", 0x0, "h"
	DCB	0x0, "a", 0x0, "n", 0x0, "n", 0x0, "e", 0x0, "l", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, " ", 0x0, "v", 0x0, "a", 0x0, "l"
	DCB	0x0, "u", 0x0, "e", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Odtp

  037d4			 AREA	 |.text|, CODE, ARM

  037d4		 |?AcquireDMAChannel@CHW@@QAAEPAVCPipe@@@Z| PROC ; CHW::AcquireDMAChannel

; 1307 : {

  037d4		 |$LN19@AcquireDMA|
  037d4	e1a0c00d	 mov         r12, sp
  037d8	e92d0003	 stmdb       sp!, {r0, r1}
  037dc	e92d5000	 stmdb       sp!, {r12, lr}
  037e0	e24dd048	 sub         sp, sp, #0x48
  037e4		 |$M45042|

; 1308 :     int i;
; 1309 :     PHSMUSB_T pOTG = (PHSMUSB_T)pPipe->m_pCMhcd->GetOTGContext();

  037e4	e59d3054	 ldr         r3, [sp, #0x54]
  037e8	e283300c	 add         r3, r3, #0xC
  037ec	e5930000	 ldr         r0, [r3]
  037f0	eb000000	 bl          |?GetOTGContext@CHcd@@QAAPAXXZ|
  037f4	e58d0030	 str         r0, [sp, #0x30]
  037f8	e59d3030	 ldr         r3, [sp, #0x30]
  037fc	e58d301c	 str         r3, [sp, #0x1C]

; 1310 :     USB_ENDPOINT_DESCRIPTOR endptDesc = pPipe->GetEndptDescriptor();

  03800	e28d1020	 add         r1, sp, #0x20
  03804	e59d0054	 ldr         r0, [sp, #0x54]
  03808	eb000000	 bl          |?GetEndptDescriptor@CPipe@@QAA?AU_USB_ENDPOINT_DESCRIPTOR@@XZ|

; 1311 :     USHORT deviceInfo = ((pPipe->GetReservedDeviceAddr() << 8)| (endptDesc.bEndpointAddress & 0xff));

  0380c	e59d3054	 ldr         r3, [sp, #0x54]
  03810	e5933000	 ldr         r3, [r3]
  03814	e2833028	 add         r3, r3, #0x28
  03818	e59d0054	 ldr         r0, [sp, #0x54]
  0381c	e5933000	 ldr         r3, [r3]
  03820	e1a0e00f	 mov         lr, pc
  03824	e12fff13	 bx          r3
  03828	e5cd0034	 strb        r0, [sp, #0x34]
  0382c	e5dd3034	 ldrb        r3, [sp, #0x34]
  03830	e1a02403	 mov         r2, r3, lsl #8
  03834	e5dd3022	 ldrb        r3, [sp, #0x22]
  03838	e20330ff	 and         r3, r3, #0xFF
  0383c	e1823003	 orr         r3, r2, r3
  03840	e1a03803	 mov         r3, r3, lsl #16
  03844	e1a03823	 mov         r3, r3, lsr #16
  03848	e1cd30b4	 strh        r3, [sp, #4]

; 1312 :     UCHAR channel = 0xff;

  0384c	e3a030ff	 mov         r3, #0xFF
  03850	e5cd3018	 strb        r3, [sp, #0x18]

; 1313 :     UCHAR avail_channel = 0xff;

  03854	e3a030ff	 mov         r3, #0xFF
  03858	e5cd300c	 strb        r3, [sp, #0xC]

; 1314 :     BOOL  fNewChannel = FALSE;

  0385c	e3a03000	 mov         r3, #0
  03860	e58d3010	 str         r3, [sp, #0x10]

; 1315 :     static int next_availDMA = 0;    
; 1316 : 
; 1317 : #ifdef DEBUG
; 1318 : 	UCHAR endpoint = USB_ENDPOINT(endptDesc.bEndpointAddress);

  03864	e5dd3022	 ldrb        r3, [sp, #0x22]
  03868	e203300f	 and         r3, r3, #0xF
  0386c	e20330ff	 and         r3, r3, #0xFF
  03870	e5cd3006	 strb        r3, [sp, #6]

; 1319 : #endif
; 1320 : 
; 1321 :     int start = next_availDMA;

  03874	e59f3244	 ldr         r3, [pc, #0x244]
  03878	e5933000	 ldr         r3, [r3]
  0387c	e58d3014	 str         r3, [sp, #0x14]

; 1322 :     i = start;

  03880	e59d3014	 ldr         r3, [sp, #0x14]
  03884	e58d3008	 str         r3, [sp, #8]

; 1323 :     EnterCriticalSection(&m_csDMAChannel);

  03888	e59d3050	 ldr         r3, [sp, #0x50]
  0388c	e2830e1d	 add         r0, r3, #0x1D, 28
  03890	eb000000	 bl          EnterCriticalSection
  03894		 |$LN10@AcquireDMA|

; 1324 :     for (;;)
; 1325 :     {
; 1326 :         if (m_DMAChannel[i] == deviceInfo)

  03894	e59d3050	 ldr         r3, [sp, #0x50]
  03898	e2831d07	 add         r1, r3, #7, 26
  0389c	e59d2008	 ldr         r2, [sp, #8]
  038a0	e3a03002	 mov         r3, #2
  038a4	e0030392	 mul         r3, r2, r3
  038a8	e0813003	 add         r3, r1, r3
  038ac	e1d330b0	 ldrh        r3, [r3]
  038b0	e1a02003	 mov         r2, r3
  038b4	e1dd30b4	 ldrh        r3, [sp, #4]
  038b8	e1520003	 cmp         r2, r3
  038bc	1a000004	 bne         |$LN8@AcquireDMA|

; 1327 :         {
; 1328 :             channel = (UCHAR)i;

  038c0	e59d3008	 ldr         r3, [sp, #8]
  038c4	e20330ff	 and         r3, r3, #0xFF
  038c8	e5cd3018	 strb        r3, [sp, #0x18]
  038cc	ea00001a	 b           |$LN9@AcquireDMA|

; 1329 :             break;

  038d0	ea00000e	 b           |$LN7@AcquireDMA|
  038d4		 |$LN8@AcquireDMA|

; 1330 :         }
; 1331 :         else if ((m_DMAChannel[i] == 0xff) && (avail_channel == 0xff))

  038d4	e59d3050	 ldr         r3, [sp, #0x50]
  038d8	e2831d07	 add         r1, r3, #7, 26
  038dc	e59d2008	 ldr         r2, [sp, #8]
  038e0	e3a03002	 mov         r3, #2
  038e4	e0030392	 mul         r3, r2, r3
  038e8	e0813003	 add         r3, r1, r3
  038ec	e1d330b0	 ldrh        r3, [r3]
  038f0	e35300ff	 cmp         r3, #0xFF
  038f4	1a000005	 bne         |$LN6@AcquireDMA|
  038f8	e5dd300c	 ldrb        r3, [sp, #0xC]
  038fc	e35300ff	 cmp         r3, #0xFF
  03900	1a000002	 bne         |$LN6@AcquireDMA|

; 1332 :             avail_channel = (UCHAR)i;

  03904	e59d3008	 ldr         r3, [sp, #8]
  03908	e20330ff	 and         r3, r3, #0xFF
  0390c	e5cd300c	 strb        r3, [sp, #0xC]
  03910		 |$LN6@AcquireDMA|
  03910		 |$LN7@AcquireDMA|

; 1333 : 
; 1334 :         i = (i+1)%MAX_DMA_CHANNEL;

  03910	e59d3008	 ldr         r3, [sp, #8]
  03914	e2831001	 add         r1, r3, #1
  03918	e3a00008	 mov         r0, #8
  0391c	eb000000	 bl          __rt_sdiv
  03920	e58d1008	 str         r1, [sp, #8]

; 1335 :         if (i == start)

  03924	e59d2008	 ldr         r2, [sp, #8]
  03928	e59d3014	 ldr         r3, [sp, #0x14]
  0392c	e1520003	 cmp         r2, r3
  03930	1a000000	 bne         |$LN5@AcquireDMA|

; 1336 :             break;

  03934	ea000000	 b           |$LN9@AcquireDMA|
  03938		 |$LN5@AcquireDMA|

; 1337 :     }

  03938	eaffffd5	 b           |$LN10@AcquireDMA|
  0393c		 |$LN9@AcquireDMA|

; 1338 : 
; 1339 :     if (channel == 0xff)

  0393c	e5dd3018	 ldrb        r3, [sp, #0x18]
  03940	e35300ff	 cmp         r3, #0xFF
  03944	1a000015	 bne         |$LN4@AcquireDMA|

; 1340 :     {
; 1341 :         channel = avail_channel;

  03948	e5dd300c	 ldrb        r3, [sp, #0xC]
  0394c	e5cd3018	 strb        r3, [sp, #0x18]

; 1342 :         if (avail_channel != 0xff)

  03950	e5dd300c	 ldrb        r3, [sp, #0xC]
  03954	e35300ff	 cmp         r3, #0xFF
  03958	0a000010	 beq         |$LN3@AcquireDMA|

; 1343 :         {
; 1344 :             m_DMAChannel[avail_channel] = deviceInfo;

  0395c	e59d3050	 ldr         r3, [sp, #0x50]
  03960	e2831d07	 add         r1, r3, #7, 26
  03964	e5dd300c	 ldrb        r3, [sp, #0xC]
  03968	e1a02003	 mov         r2, r3
  0396c	e3a03002	 mov         r3, #2
  03970	e0030392	 mul         r3, r2, r3
  03974	e0812003	 add         r2, r1, r3
  03978	e1dd30b4	 ldrh        r3, [sp, #4]
  0397c	e1c230b0	 strh        r3, [r2]

; 1345 :             next_availDMA = (avail_channel+1)%MAX_DMA_CHANNEL;

  03980	e5dd300c	 ldrb        r3, [sp, #0xC]
  03984	e2831001	 add         r1, r3, #1
  03988	e3a00008	 mov         r0, #8
  0398c	eb000000	 bl          __rt_sdiv
  03990	e59f3128	 ldr         r3, [pc, #0x128]
  03994	e5831000	 str         r1, [r3]

; 1346 :             fNewChannel = TRUE;

  03998	e3a03001	 mov         r3, #1
  0399c	e58d3010	 str         r3, [sp, #0x10]
  039a0		 |$LN3@AcquireDMA|
  039a0		 |$LN4@AcquireDMA|

; 1347 :         }
; 1348 :     }
; 1349 : 
; 1350 :     if (avail_channel != 0xff)

  039a0	e5dd300c	 ldrb        r3, [sp, #0xC]
  039a4	e35300ff	 cmp         r3, #0xFF
  039a8	0a00000b	 beq         |$LN2@AcquireDMA|

; 1351 :     {
; 1352 :         // Finally set the m_hEP2Handles 
; 1353 :         m_cBusyPipeList.m_hDMA2Handles[channel] = pPipe->GetDMATransferEvent();        

  039ac	e59d0054	 ldr         r0, [sp, #0x54]
  039b0	eb000000	 bl          |?GetDMATransferEvent@CPipe@@QAAPAXXZ|
  039b4	e58d0038	 str         r0, [sp, #0x38]
  039b8	e59d3050	 ldr         r3, [sp, #0x50]
  039bc	e2831f56	 add         r1, r3, #0x56, 30
  039c0	e5dd3018	 ldrb        r3, [sp, #0x18]
  039c4	e1a02003	 mov         r2, r3
  039c8	e3a03004	 mov         r3, #4
  039cc	e0030392	 mul         r3, r2, r3
  039d0	e0812003	 add         r2, r1, r3
  039d4	e59d3038	 ldr         r3, [sp, #0x38]
  039d8	e5823000	 str         r3, [r2]
  039dc		 |$LN2@AcquireDMA|

; 1354 :     }
; 1355 : 
; 1356 :     if (fNewChannel)

  039dc	e59d3010	 ldr         r3, [sp, #0x10]
  039e0	e3530000	 cmp         r3, #0
  039e4	0a000003	 beq         |$LN1@AcquireDMA|

; 1357 :         HcdPdd_PreTransferActivation((SMHCDPdd *)pOTG->pContext[HOST_MODE-1]);

  039e8	e59d301c	 ldr         r3, [sp, #0x1C]
  039ec	e2833014	 add         r3, r3, #0x14
  039f0	e5930000	 ldr         r0, [r3]
  039f4	eb000000	 bl          HcdPdd_PreTransferActivation
  039f8		 |$LN1@AcquireDMA|

; 1358 : 
; 1359 :     LeaveCriticalSection(&m_csDMAChannel);

  039f8	e59d3050	 ldr         r3, [sp, #0x50]
  039fc	e2830e1d	 add         r0, r3, #0x1D, 28
  03a00	eb000000	 bl          LeaveCriticalSection

; 1360 :            
; 1361 :     DEBUGMSG(ZONE_HCD|ZONE_DEBUG, (TEXT("AcquireDMAChannel:ep %d, device %d channel %d value = 0x%x\r\n"),
; 1362 :         endpoint, pPipe->GetReservedDeviceAddr(), channel, ((channel == 0xff)?0x00:m_DMAChannel[channel])));

  03a04	e59f30b0	 ldr         r3, [pc, #0xB0]
  03a08	e5933440	 ldr         r3, [r3, #0x440]
  03a0c	e3130001	 tst         r3, #1
  03a10	0a000020	 beq         |$LN15@AcquireDMA|
  03a14	e5dd3018	 ldrb        r3, [sp, #0x18]
  03a18	e35300ff	 cmp         r3, #0xFF
  03a1c	1a000002	 bne         |$LN13@AcquireDMA|
  03a20	e3a03000	 mov         r3, #0
  03a24	e58d303c	 str         r3, [sp, #0x3C]
  03a28	ea000008	 b           |$LN14@AcquireDMA|
  03a2c		 |$LN13@AcquireDMA|
  03a2c	e59d3050	 ldr         r3, [sp, #0x50]
  03a30	e2831d07	 add         r1, r3, #7, 26
  03a34	e5dd3018	 ldrb        r3, [sp, #0x18]
  03a38	e1a02003	 mov         r2, r3
  03a3c	e3a03002	 mov         r3, #2
  03a40	e0030392	 mul         r3, r2, r3
  03a44	e0813003	 add         r3, r1, r3
  03a48	e1d330b0	 ldrh        r3, [r3]
  03a4c	e58d303c	 str         r3, [sp, #0x3C]
  03a50		 |$LN14@AcquireDMA|
  03a50	e59d3054	 ldr         r3, [sp, #0x54]
  03a54	e5933000	 ldr         r3, [r3]
  03a58	e2833028	 add         r3, r3, #0x28
  03a5c	e59d0054	 ldr         r0, [sp, #0x54]
  03a60	e5933000	 ldr         r3, [r3]
  03a64	e1a0e00f	 mov         lr, pc
  03a68	e12fff13	 bx          r3
  03a6c	e5cd0040	 strb        r0, [sp, #0x40]
  03a70	e59d303c	 ldr         r3, [sp, #0x3C]
  03a74	e58d3000	 str         r3, [sp]
  03a78	e5dd3018	 ldrb        r3, [sp, #0x18]
  03a7c	e5dd2040	 ldrb        r2, [sp, #0x40]
  03a80	e5dd1006	 ldrb        r1, [sp, #6]
  03a84	e59f002c	 ldr         r0, [pc, #0x2C]
  03a88	eb000000	 bl          NKDbgPrintfW
  03a8c	e3a03001	 mov         r3, #1
  03a90	e58d3044	 str         r3, [sp, #0x44]
  03a94	ea000001	 b           |$LN16@AcquireDMA|
  03a98		 |$LN15@AcquireDMA|
  03a98	e3a03000	 mov         r3, #0
  03a9c	e58d3044	 str         r3, [sp, #0x44]
  03aa0		 |$LN16@AcquireDMA|

; 1363 : 
; 1364 : 
; 1365 :     return channel;

  03aa0	e5dd3018	 ldrb        r3, [sp, #0x18]
  03aa4	e5cd302c	 strb        r3, [sp, #0x2C]

; 1366 : }

  03aa8	e5dd002c	 ldrb        r0, [sp, #0x2C]
  03aac	e28dd048	 add         sp, sp, #0x48
  03ab0	e89d6000	 ldmia       sp, {sp, lr}
  03ab4	e12fff1e	 bx          lr
  03ab8		 |$LN20@AcquireDMA|
  03ab8		 |$LN21@AcquireDMA|
  03ab8	00000000	 DCD         |??_C@_1HK@DMCNNPNM@?$AAA?$AAc?$AAq?$AAu?$AAi?$AAr?$AAe?$AAD?$AAM?$AAA?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?3?$AAe?$AAp?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AAd?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5@|
  03abc		 |$LN22@AcquireDMA|
  03abc	00000000	 DCD         |dpCurSettings|
  03ac0		 |$LN23@AcquireDMA|
  03ac0	00000000	 DCD         |?next_availDMA@?1??AcquireDMAChannel@CHW@@QAAEPAVCPipe@@@Z@4HA|
  03ac4		 |$M45043|

			 ENDP  ; |?AcquireDMAChannel@CHW@@QAAEPAVCPipe@@@Z|, CHW::AcquireDMAChannel

	EXPORT	|?Channel2DeviceInfo@CHW@@QAAGE@Z|	; CHW::Channel2DeviceInfo

  000e0			 AREA	 |.pdata|, PDATA
|$T45056| DCD	|$LN5@Channel2De|
	DCD	0x40001104
; Function compile flags: /Odtp

  03ac4			 AREA	 |.text|, CODE, ARM

  03ac4		 |?Channel2DeviceInfo@CHW@@QAAGE@Z| PROC ; CHW::Channel2DeviceInfo

; 1376 : {

  03ac4		 |$LN5@Channel2De|
  03ac4	e1a0c00d	 mov         r12, sp
  03ac8	e92d0003	 stmdb       sp!, {r0, r1}
  03acc	e92d5000	 stmdb       sp!, {r12, lr}
  03ad0	e24dd004	 sub         sp, sp, #4
  03ad4		 |$M45053|

; 1377 :     return m_DMAChannel[channel];

  03ad4	e59d300c	 ldr         r3, [sp, #0xC]
  03ad8	e2831d07	 add         r1, r3, #7, 26
  03adc	e5dd3010	 ldrb        r3, [sp, #0x10]
  03ae0	e1a02003	 mov         r2, r3
  03ae4	e3a03002	 mov         r3, #2
  03ae8	e0030392	 mul         r3, r2, r3
  03aec	e0813003	 add         r3, r1, r3
  03af0	e1d330b0	 ldrh        r3, [r3]
  03af4	e1cd30b0	 strh        r3, [sp]

; 1378 : }

  03af8	e1dd00b0	 ldrh        r0, [sp]
  03afc	e28dd004	 add         sp, sp, #4
  03b00	e89d6000	 ldmia       sp, {sp, lr}
  03b04	e12fff1e	 bx          lr
  03b08		 |$M45054|

			 ENDP  ; |?Channel2DeviceInfo@CHW@@QAAGE@Z|, CHW::Channel2DeviceInfo


  000e8			 AREA	 |.pdata|, PDATA
|$T45062| DCD	|$LN9@DeviceInfo|
	DCD	0x40003f04
; Function compile flags: /Odtp

  03b08			 AREA	 |.text|, CODE, ARM

  03b08		 |?DeviceInfo2Channel@CHW@@QAAEPAVCPipe@@@Z| PROC ; CHW::DeviceInfo2Channel

; 1387 : {

  03b08		 |$LN9@DeviceInfo|
  03b08	e1a0c00d	 mov         r12, sp
  03b0c	e92d0003	 stmdb       sp!, {r0, r1}
  03b10	e92d5000	 stmdb       sp!, {r12, lr}
  03b14	e24dd018	 sub         sp, sp, #0x18
  03b18		 |$M45059|

; 1388 :     int i; 
; 1389 :     USB_ENDPOINT_DESCRIPTOR endptDesc = pPipe->GetEndptDescriptor();

  03b18	e28d1008	 add         r1, sp, #8
  03b1c	e59d0024	 ldr         r0, [sp, #0x24]
  03b20	eb000000	 bl          |?GetEndptDescriptor@CPipe@@QAA?AU_USB_ENDPOINT_DESCRIPTOR@@XZ|

; 1390 :     USHORT deviceInfo = ((pPipe->GetReservedDeviceAddr() << 8)| (endptDesc.bEndpointAddress & 0xff));

  03b24	e59d3024	 ldr         r3, [sp, #0x24]
  03b28	e5933000	 ldr         r3, [r3]
  03b2c	e2833028	 add         r3, r3, #0x28
  03b30	e59d0024	 ldr         r0, [sp, #0x24]
  03b34	e5933000	 ldr         r3, [r3]
  03b38	e1a0e00f	 mov         lr, pc
  03b3c	e12fff13	 bx          r3
  03b40	e5cd0014	 strb        r0, [sp, #0x14]
  03b44	e5dd3014	 ldrb        r3, [sp, #0x14]
  03b48	e1a02403	 mov         r2, r3, lsl #8
  03b4c	e5dd300a	 ldrb        r3, [sp, #0xA]
  03b50	e20330ff	 and         r3, r3, #0xFF
  03b54	e1823003	 orr         r3, r2, r3
  03b58	e1a03803	 mov         r3, r3, lsl #16
  03b5c	e1a03823	 mov         r3, r3, lsr #16
  03b60	e1cd30b0	 strh        r3, [sp]

; 1391 : 
; 1392 :     EnterCriticalSection(&m_csDMAChannel);

  03b64	e59d3020	 ldr         r3, [sp, #0x20]
  03b68	e2830e1d	 add         r0, r3, #0x1D, 28
  03b6c	eb000000	 bl          EnterCriticalSection

; 1393 :     for (i = 0; i < DMA_MAX_CHANNEL; i++)

  03b70	e3a03000	 mov         r3, #0
  03b74	e58d3004	 str         r3, [sp, #4]
  03b78	ea000002	 b           |$LN4@DeviceInfo|
  03b7c		 |$LN3@DeviceInfo|
  03b7c	e59d3004	 ldr         r3, [sp, #4]
  03b80	e2833001	 add         r3, r3, #1
  03b84	e58d3004	 str         r3, [sp, #4]
  03b88		 |$LN4@DeviceInfo|
  03b88	e59d3004	 ldr         r3, [sp, #4]
  03b8c	e3530008	 cmp         r3, #8
  03b90	aa000012	 bge         |$LN2@DeviceInfo|

; 1394 :     {
; 1395 :         if (m_DMAChannel[i] == deviceInfo)

  03b94	e59d3020	 ldr         r3, [sp, #0x20]
  03b98	e2831d07	 add         r1, r3, #7, 26
  03b9c	e59d2004	 ldr         r2, [sp, #4]
  03ba0	e3a03002	 mov         r3, #2
  03ba4	e0030392	 mul         r3, r2, r3
  03ba8	e0813003	 add         r3, r1, r3
  03bac	e1d330b0	 ldrh        r3, [r3]
  03bb0	e1a02003	 mov         r2, r3
  03bb4	e1dd30b0	 ldrh        r3, [sp]
  03bb8	e1520003	 cmp         r2, r3
  03bbc	1a000006	 bne         |$LN1@DeviceInfo|

; 1396 :         {
; 1397 :             LeaveCriticalSection(&m_csDMAChannel);

  03bc0	e59d3020	 ldr         r3, [sp, #0x20]
  03bc4	e2830e1d	 add         r0, r3, #0x1D, 28
  03bc8	eb000000	 bl          LeaveCriticalSection

; 1398 :             return (UCHAR)i;

  03bcc	e59d3004	 ldr         r3, [sp, #4]
  03bd0	e20330ff	 and         r3, r3, #0xFF
  03bd4	e5cd3010	 strb        r3, [sp, #0x10]
  03bd8	ea000005	 b           |$LN5@DeviceInfo|
  03bdc		 |$LN1@DeviceInfo|

; 1399 :         }
; 1400 :     }

  03bdc	eaffffe6	 b           |$LN3@DeviceInfo|
  03be0		 |$LN2@DeviceInfo|

; 1401 :     
; 1402 :     LeaveCriticalSection(&m_csDMAChannel);

  03be0	e59d3020	 ldr         r3, [sp, #0x20]
  03be4	e2830e1d	 add         r0, r3, #0x1D, 28
  03be8	eb000000	 bl          LeaveCriticalSection

; 1403 :     return 0xff;

  03bec	e3a030ff	 mov         r3, #0xFF
  03bf0	e5cd3010	 strb        r3, [sp, #0x10]
  03bf4		 |$LN5@DeviceInfo|

; 1404 : }

  03bf4	e5dd0010	 ldrb        r0, [sp, #0x10]
  03bf8	e28dd018	 add         sp, sp, #0x18
  03bfc	e89d6000	 ldmia       sp, {sp, lr}
  03c00	e12fff1e	 bx          lr
  03c04		 |$M45060|

			 ENDP  ; |?DeviceInfo2Channel@CHW@@QAAEPAVCPipe@@@Z|, CHW::DeviceInfo2Channel

	EXPORT	|?ClearDMAChannel@CHW@@QAAHE@Z|		; CHW::ClearDMAChannel
	IMPORT	|HcdPdd_PostTransferDeactivation|

  000f0			 AREA	 |.pdata|, PDATA
|$T45068| DCD	|$LN7@ReleaseDMA|
	DCD	0x40003904
; Function compile flags: /Odtp

  03c04			 AREA	 |.text|, CODE, ARM

  03c04		 |?ReleaseDMAChannel@CHW@@QAAHPAVCPipe@@E@Z| PROC ; CHW::ReleaseDMAChannel

; 1413 : {

  03c04		 |$LN7@ReleaseDMA|
  03c04	e1a0c00d	 mov         r12, sp
  03c08	e92d0007	 stmdb       sp!, {r0 - r2}
  03c0c	e92d5000	 stmdb       sp!, {r12, lr}
  03c10	e24dd00c	 sub         sp, sp, #0xC
  03c14		 |$M45065|

; 1414 :     PHSMUSB_T pOTG;
; 1415 :     if ((channel < 0)|| (channel >= DMA_MAX_CHANNEL))

  03c14	e5dd301c	 ldrb        r3, [sp, #0x1C]
  03c18	e3530000	 cmp         r3, #0
  03c1c	4a000002	 bmi         |$LN1@ReleaseDMA|
  03c20	e5dd301c	 ldrb        r3, [sp, #0x1C]
  03c24	e3530008	 cmp         r3, #8
  03c28	ba000002	 blt         |$LN2@ReleaseDMA|
  03c2c		 |$LN1@ReleaseDMA|

; 1416 :         return TRUE;

  03c2c	e3a03001	 mov         r3, #1
  03c30	e58d3004	 str         r3, [sp, #4]
  03c34	ea000027	 b           |$LN3@ReleaseDMA|
  03c38		 |$LN2@ReleaseDMA|

; 1417 :     
; 1418 :     pOTG = (PHSMUSB_T)pPipe->m_pCMhcd->GetOTGContext();    

  03c38	e59d3018	 ldr         r3, [sp, #0x18]
  03c3c	e283300c	 add         r3, r3, #0xC
  03c40	e5930000	 ldr         r0, [r3]
  03c44	eb000000	 bl          |?GetOTGContext@CHcd@@QAAPAXXZ|
  03c48	e58d0008	 str         r0, [sp, #8]
  03c4c	e59d3008	 ldr         r3, [sp, #8]
  03c50	e58d3000	 str         r3, [sp]

; 1419 :     EnterCriticalSection(&m_csDMAChannel);

  03c54	e59d3014	 ldr         r3, [sp, #0x14]
  03c58	e2830e1d	 add         r0, r3, #0x1D, 28
  03c5c	eb000000	 bl          EnterCriticalSection

; 1420 :     ClearDMAChannel(channel);

  03c60	e5dd101c	 ldrb        r1, [sp, #0x1C]
  03c64	e59d0014	 ldr         r0, [sp, #0x14]
  03c68	eb000000	 bl          |?ClearDMAChannel@CHW@@QAAHE@Z|

; 1421 :     m_DMAChannel[channel] = 0xff;     

  03c6c	e59d3014	 ldr         r3, [sp, #0x14]
  03c70	e2831d07	 add         r1, r3, #7, 26
  03c74	e5dd301c	 ldrb        r3, [sp, #0x1C]
  03c78	e1a02003	 mov         r2, r3
  03c7c	e3a03002	 mov         r3, #2
  03c80	e0030392	 mul         r3, r2, r3
  03c84	e0812003	 add         r2, r1, r3
  03c88	e3a030ff	 mov         r3, #0xFF
  03c8c	e1c230b0	 strh        r3, [r2]

; 1422 :     m_cBusyPipeList.m_hDMA2Handles[channel] = NULL;

  03c90	e59d3014	 ldr         r3, [sp, #0x14]
  03c94	e2831f56	 add         r1, r3, #0x56, 30
  03c98	e5dd301c	 ldrb        r3, [sp, #0x1C]
  03c9c	e1a02003	 mov         r2, r3
  03ca0	e3a03004	 mov         r3, #4
  03ca4	e0030392	 mul         r3, r2, r3
  03ca8	e0812003	 add         r2, r1, r3
  03cac	e3a03000	 mov         r3, #0
  03cb0	e5823000	 str         r3, [r2]

; 1423 :     LeaveCriticalSection(&m_csDMAChannel);

  03cb4	e59d3014	 ldr         r3, [sp, #0x14]
  03cb8	e2830e1d	 add         r0, r3, #0x1D, 28
  03cbc	eb000000	 bl          LeaveCriticalSection

; 1424 :   
; 1425 :     HcdPdd_PostTransferDeactivation((SMHCDPdd *)pOTG->pContext[HOST_MODE-1]);

  03cc0	e59d3000	 ldr         r3, [sp]
  03cc4	e2833014	 add         r3, r3, #0x14
  03cc8	e5930000	 ldr         r0, [r3]
  03ccc	eb000000	 bl          HcdPdd_PostTransferDeactivation

; 1426 : 
; 1427 :     return TRUE;

  03cd0	e3a03001	 mov         r3, #1
  03cd4	e58d3004	 str         r3, [sp, #4]
  03cd8		 |$LN3@ReleaseDMA|

; 1428 : }

  03cd8	e59d0004	 ldr         r0, [sp, #4]
  03cdc	e28dd00c	 add         sp, sp, #0xC
  03ce0	e89d6000	 ldmia       sp, {sp, lr}
  03ce4	e12fff1e	 bx          lr
  03ce8		 |$M45066|

			 ENDP  ; |?ReleaseDMAChannel@CHW@@QAAHPAVCPipe@@E@Z|, CHW::ReleaseDMAChannel

	EXPORT	|??_C@_1CC@NLOOOCJA@?$AAR?$AAx?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BO@NJBFBELE@?$AAR?$AAx?$AAC?$AAS?$AAR?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CC@OLNNCHHB@?$AAD?$AAu?$AAm?$AAp?$AAC?$AAS?$AAR?$AA?3?$AA?5?$AAE?$AAP?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CO@DMFPBMHN@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAE?$AAP?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|?DumpRxCSR@CHW@@QAAXE@Z|		; CHW::DumpRxCSR

  000f8			 AREA	 |.pdata|, PDATA
|$T45081| DCD	|$LN14@DumpRxCSR|
	DCD	0x40006a04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CC@NLOOOCJA@?$AAR?$AAx?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "R"
	DCB	0x0, "x", 0x0, "C", 0x0, "o", 0x0, "u", 0x0, "n", 0x0, "t"
	DCB	0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@NJBFBELE@?$AAR?$AAx?$AAC?$AAS?$AAR?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "R"
	DCB	0x0, "x", 0x0, "C", 0x0, "S", 0x0, "R", 0x0, " ", 0x0, "="
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CC@OLNNCHHB@?$AAD?$AAu?$AAm?$AAp?$AAC?$AAS?$AAR?$AA?3?$AA?5?$AAE?$AAP?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "D"
	DCB	0x0, "u", 0x0, "m", 0x0, "p", 0x0, "C", 0x0, "S", 0x0, "R"
	DCB	0x0, ":", 0x0, " ", 0x0, "E", 0x0, "P", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@DMFPBMHN@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAE?$AAP?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "C"
	DCB	0x0, "H", 0x0, "W", 0x0, ":", 0x0, ":", 0x0, "C", 0x0, "o"
	DCB	0x0, "n", 0x0, "f", 0x0, "i", 0x0, "g", 0x0, "E", 0x0, "P"
	DCB	0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e"
	DCB	0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  03ce8			 AREA	 |.text|, CODE, ARM

  03ce8		 |?DumpRxCSR@CHW@@QAAXE@Z| PROC		; CHW::DumpRxCSR

; 1432 : {

  03ce8		 |$LN14@DumpRxCSR|
  03ce8	e1a0c00d	 mov         r12, sp
  03cec	e92d0003	 stmdb       sp!, {r0, r1}
  03cf0	e92d5000	 stmdb       sp!, {r12, lr}
  03cf4	e24dd01c	 sub         sp, sp, #0x1C
  03cf8		 |$M45078|

; 1433 :     PHSMUSB_T pOTG;        
; 1434 :     UCHAR csrIndex = INDEX(endpoint);    

  03cf8	e5dd3028	 ldrb        r3, [sp, #0x28]
  03cfc	e203300f	 and         r3, r3, #0xF
  03d00	e20330ff	 and         r3, r3, #0xFF
  03d04	e5cd3000	 strb        r3, [sp]

; 1435 : 
; 1436 :     pOTG = (PHSMUSB_T)GetOTGContext();

  03d08	e59d0024	 ldr         r0, [sp, #0x24]
  03d0c	eb000000	 bl          |?GetOTGContext@CHcd@@QAAPAXXZ|
  03d10	e58d0008	 str         r0, [sp, #8]
  03d14	e59d3008	 ldr         r3, [sp, #8]
  03d18	e58d3004	 str         r3, [sp, #4]

; 1437 :     if (pOTG == NULL)

  03d1c	e59d3004	 ldr         r3, [sp, #4]
  03d20	e3530000	 cmp         r3, #0
  03d24	1a00000b	 bne         |$LN1@DumpRxCSR|

; 1438 :     {
; 1439 :         DEBUGMSG(ZONE_ERROR, (TEXT("CHW::ConfigEP failed\r\n")));

  03d28	e59f315c	 ldr         r3, [pc, #0x15C]
  03d2c	e5933440	 ldr         r3, [r3, #0x440]
  03d30	e3130901	 tst         r3, #1, 18
  03d34	0a000004	 beq         |$LN4@DumpRxCSR|
  03d38	e59f0148	 ldr         r0, [pc, #0x148]
  03d3c	eb000000	 bl          NKDbgPrintfW
  03d40	e3a03001	 mov         r3, #1
  03d44	e58d300c	 str         r3, [sp, #0xC]
  03d48	ea000001	 b           |$LN5@DumpRxCSR|
  03d4c		 |$LN4@DumpRxCSR|
  03d4c	e3a03000	 mov         r3, #0
  03d50	e58d300c	 str         r3, [sp, #0xC]
  03d54		 |$LN5@DumpRxCSR|

; 1440 :         return;

  03d54	ea000045	 b           |$LN2@DumpRxCSR|
  03d58		 |$LN1@DumpRxCSR|

; 1441 :     }  
; 1442 :     DEBUGMSG(ZONE_DEBUG, (TEXT("DumpCSR: EP %d\r\n"), endpoint));

  03d58	ea000006	 b           |$LN6@DumpRxCSR|
  03d5c	e5dd3028	 ldrb        r3, [sp, #0x28]
  03d60	e1a01003	 mov         r1, r3
  03d64	e59f0118	 ldr         r0, [pc, #0x118]
  03d68	eb000000	 bl          NKDbgPrintfW
  03d6c	e3a03001	 mov         r3, #1
  03d70	e58d3010	 str         r3, [sp, #0x10]
  03d74	ea000001	 b           |$LN7@DumpRxCSR|
  03d78		 |$LN6@DumpRxCSR|
  03d78	e3a03000	 mov         r3, #0
  03d7c	e58d3010	 str         r3, [sp, #0x10]
  03d80		 |$LN7@DumpRxCSR|

; 1443 :     EnterCriticalSection(&pOTG->regCS); 

  03d80	e59d3004	 ldr         r3, [sp, #4]
  03d84	e2830038	 add         r0, r3, #0x38
  03d88	eb000000	 bl          EnterCriticalSection

; 1444 :     OUTREG8(&pOTG->pUsbGenRegs->Index, csrIndex);

  03d8c	e59d3004	 ldr         r3, [sp, #4]
  03d90	e2833020	 add         r3, r3, #0x20
  03d94	e5933000	 ldr         r3, [r3]
  03d98	e283200e	 add         r2, r3, #0xE
  03d9c	e5dd3000	 ldrb        r3, [sp]
  03da0	e5c23000	 strb        r3, [r2]

; 1445 :     
; 1446 :     DEBUGMSG(ZONE_DEBUG, (TEXT("RxCSR = 0x%x\r\n"), INREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].RxCSR)));

  03da4	ea000014	 b           |$LN8@DumpRxCSR|
  03da8	e59d3004	 ldr         r3, [sp, #4]
  03dac	e283001c	 add         r0, r3, #0x1C
  03db0	e5dd3000	 ldrb        r3, [sp]
  03db4	e1a01003	 mov         r1, r3
  03db8	e3a03010	 mov         r3, #0x10
  03dbc	e0020391	 mul         r2, r1, r3
  03dc0	e5903000	 ldr         r3, [r0]
  03dc4	e0833002	 add         r3, r3, r2
  03dc8	e2831006	 add         r1, r3, #6
  03dcc	e5d13001	 ldrb        r3, [r1, #1]
  03dd0	e1a03403	 mov         r3, r3, lsl #8
  03dd4	e1a02803	 mov         r2, r3, lsl #16
  03dd8	e1a02822	 mov         r2, r2, lsr #16
  03ddc	e5d13000	 ldrb        r3, [r1]
  03de0	e1833002	 orr         r3, r3, r2
  03de4	e1a01003	 mov         r1, r3
  03de8	e59f0090	 ldr         r0, [pc, #0x90]
  03dec	eb000000	 bl          NKDbgPrintfW
  03df0	e3a03001	 mov         r3, #1
  03df4	e58d3014	 str         r3, [sp, #0x14]
  03df8	ea000001	 b           |$LN9@DumpRxCSR|
  03dfc		 |$LN8@DumpRxCSR|
  03dfc	e3a03000	 mov         r3, #0
  03e00	e58d3014	 str         r3, [sp, #0x14]
  03e04		 |$LN9@DumpRxCSR|

; 1447 :     DEBUGMSG(ZONE_DEBUG, (TEXT("RxCount = 0x%x\r\n"), INREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].Count.RxCount)));

  03e04	ea000014	 b           |$LN10@DumpRxCSR|
  03e08	e59d3004	 ldr         r3, [sp, #4]
  03e0c	e283001c	 add         r0, r3, #0x1C
  03e10	e5dd3000	 ldrb        r3, [sp]
  03e14	e1a01003	 mov         r1, r3
  03e18	e3a03010	 mov         r3, #0x10
  03e1c	e0020391	 mul         r2, r1, r3
  03e20	e5903000	 ldr         r3, [r0]
  03e24	e0833002	 add         r3, r3, r2
  03e28	e2831008	 add         r1, r3, #8
  03e2c	e5d13001	 ldrb        r3, [r1, #1]
  03e30	e1a03403	 mov         r3, r3, lsl #8
  03e34	e1a02803	 mov         r2, r3, lsl #16
  03e38	e1a02822	 mov         r2, r2, lsr #16
  03e3c	e5d13000	 ldrb        r3, [r1]
  03e40	e1833002	 orr         r3, r3, r2
  03e44	e1a01003	 mov         r1, r3
  03e48	e59f002c	 ldr         r0, [pc, #0x2C]
  03e4c	eb000000	 bl          NKDbgPrintfW
  03e50	e3a03001	 mov         r3, #1
  03e54	e58d3018	 str         r3, [sp, #0x18]
  03e58	ea000001	 b           |$LN11@DumpRxCSR|
  03e5c		 |$LN10@DumpRxCSR|
  03e5c	e3a03000	 mov         r3, #0
  03e60	e58d3018	 str         r3, [sp, #0x18]
  03e64		 |$LN11@DumpRxCSR|

; 1448 : 
; 1449 :     LeaveCriticalSection(&pOTG->regCS);    

  03e64	e59d3004	 ldr         r3, [sp, #4]
  03e68	e2830038	 add         r0, r3, #0x38
  03e6c	eb000000	 bl          LeaveCriticalSection
  03e70		 |$LN2@DumpRxCSR|

; 1450 : }

  03e70	e28dd01c	 add         sp, sp, #0x1C
  03e74	e89d6000	 ldmia       sp, {sp, lr}
  03e78	e12fff1e	 bx          lr
  03e7c		 |$LN15@DumpRxCSR|
  03e7c		 |$LN16@DumpRxCSR|
  03e7c	00000000	 DCD         |??_C@_1CC@NLOOOCJA@?$AAR?$AAx?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  03e80		 |$LN17@DumpRxCSR|
  03e80	00000000	 DCD         |??_C@_1BO@NJBFBELE@?$AAR?$AAx?$AAC?$AAS?$AAR?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  03e84		 |$LN18@DumpRxCSR|
  03e84	00000000	 DCD         |??_C@_1CC@OLNNCHHB@?$AAD?$AAu?$AAm?$AAp?$AAC?$AAS?$AAR?$AA?3?$AA?5?$AAE?$AAP?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  03e88		 |$LN19@DumpRxCSR|
  03e88	00000000	 DCD         |??_C@_1CO@DMFPBMHN@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAE?$AAP?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  03e8c		 |$LN20@DumpRxCSR|
  03e8c	00000000	 DCD         |dpCurSettings|
  03e90		 |$M45079|

			 ENDP  ; |?DumpRxCSR@CHW@@QAAXE@Z|, CHW::DumpRxCSR

	EXPORT	|??_C@_1IA@KNBFMBJK@?$AAA?$AAc?$AAq?$AAu?$AAi?$AAr?$AAe?$AAP?$AAh?$AAy?$AAs?$AAi?$AAc?$AAa?$AAl?$AAE?$AAP?$AA?$CI?$AAe?$AAp?$AA?$FL?$AA?$CF?$AAd?$AA?$FN?$AA?0?$AA?5?$AAd?$AAe?$AAv?$AAi?$AAc?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DE@OFOMOBKP@?$AAF?$AAA?$AAI?$AAL?$AAE?$AAD?$AA?5?$AAT?$AAO?$AA?5?$AAG?$AAE?$AAT?$AA?5?$AAT?$AAH?$AAE?$AA?5?$AAE?$AAP?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1II@OPHGDPCE@?$AAA?$AAc?$AAq?$AAu?$AAi?$AAr?$AAe?$AAP?$AAh?$AAy?$AAs?$AAi?$AAc?$AAa?$AAl?$AAE?$AAn?$AAd?$AAP?$AAo?$AAi?$AAn?$AAt?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAE?$AAP?$AA?5?$AA0@| [ DATA ] ; `string'
	EXPORT	|??_C@_15BNKBCKPG@?$AAI?$AAN?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_17HCEMPBGG@?$AAO?$AAU?$AAT?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|?AcquirePhysicalEndPoint@CHW@@QAAEPAVCPipe@@@Z| ; CHW::AcquirePhysicalEndPoint

  00100			 AREA	 |.pdata|, PDATA
|$T45108| DCD	|$LN34@AcquirePhy|
	DCD	0x40018004

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IA@KNBFMBJK@?$AAA?$AAc?$AAq?$AAu?$AAi?$AAr?$AAe?$AAP?$AAh?$AAy?$AAs?$AAi?$AAc?$AAa?$AAl?$AAE?$AAP?$AA?$CI?$AAe?$AAp?$AA?$FL?$AA?$CF?$AAd?$AA?$FN?$AA?0?$AA?5?$AAd?$AAe?$AAv?$AAi?$AAc?$AAe@| DCB "A"
	DCB	0x0, "c", 0x0, "q", 0x0, "u", 0x0, "i", 0x0, "r", 0x0, "e"
	DCB	0x0, "P", 0x0, "h", 0x0, "y", 0x0, "s", 0x0, "i", 0x0, "c"
	DCB	0x0, "a", 0x0, "l", 0x0, "E", 0x0, "P", 0x0, "(", 0x0, "e"
	DCB	0x0, "p", 0x0, "[", 0x0, "%", 0x0, "d", 0x0, "]", 0x0, ","
	DCB	0x0, " ", 0x0, "d", 0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c"
	DCB	0x0, "e", 0x0, "[", 0x0, "%", 0x0, "d", 0x0, "]", 0x0, ")"
	DCB	0x0, " ", 0x0, "(", 0x0, "%", 0x0, "s", 0x0, ")", 0x0, " "
	DCB	0x0, "v", 0x0, "a", 0x0, "l", 0x0, "u", 0x0, "e", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, ",", 0x0, " "
	DCB	0x0, "M", 0x0, "E", 0x0, "P", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DE@OFOMOBKP@?$AAF?$AAA?$AAI?$AAL?$AAE?$AAD?$AA?5?$AAT?$AAO?$AA?5?$AAG?$AAE?$AAT?$AA?5?$AAT?$AAH?$AAE?$AA?5?$AAE?$AAP?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@| DCB "F"
	DCB	0x0, "A", 0x0, "I", 0x0, "L", 0x0, "E", 0x0, "D", 0x0, " "
	DCB	0x0, "T", 0x0, "O", 0x0, " ", 0x0, "G", 0x0, "E", 0x0, "T"
	DCB	0x0, " ", 0x0, "T", 0x0, "H", 0x0, "E", 0x0, " ", 0x0, "E"
	DCB	0x0, "P", 0x0, "!", 0x0, "!", 0x0, "!", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1II@OPHGDPCE@?$AAA?$AAc?$AAq?$AAu?$AAi?$AAr?$AAe?$AAP?$AAh?$AAy?$AAs?$AAi?$AAc?$AAa?$AAl?$AAE?$AAn?$AAd?$AAP?$AAo?$AAi?$AAn?$AAt?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAE?$AAP?$AA?5?$AA0@| DCB "A"
	DCB	0x0, "c", 0x0, "q", 0x0, "u", 0x0, "i", 0x0, "r", 0x0, "e"
	DCB	0x0, "P", 0x0, "h", 0x0, "y", 0x0, "s", 0x0, "i", 0x0, "c"
	DCB	0x0, "a", 0x0, "l", 0x0, "E", 0x0, "n", 0x0, "d", 0x0, "P"
	DCB	0x0, "o", 0x0, "i", 0x0, "n", 0x0, "t", 0x0, " ", 0x0, "f"
	DCB	0x0, "o", 0x0, "r", 0x0, " ", 0x0, "E", 0x0, "P", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, " ", 0x0, "D"
	DCB	0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, " ", 0x0, "-"
	DCB	0x0, ">", 0x0, " ", 0x0, "M", 0x0, "a", 0x0, "p", 0x0, "p"
	DCB	0x0, "e", 0x0, "d", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, " "
	DCB	0x0, "[", 0x0, "%", 0x0, "s", 0x0, "]", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_15BNKBCKPG@?$AAI?$AAN?$AA?$AA@| DCB "I", 0x0, "N", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_17HCEMPBGG@?$AAO?$AAU?$AAT?$AA?$AA@| DCB "O", 0x0, "U", 0x0, "T", 0x0
	DCB	0x0, 0x0				; `string'

  00000			 AREA	 |.data|, DATA
|?next_assigned_EP@?1??AcquirePhysicalEndPoint@CHW@@QAAEPAVCPipe@@@Z@4PAHA| DCD 0x1 ; `CHW::AcquirePhysicalEndPoint'::`2'::next_assigned_EP
	DCD	0x1
; Function compile flags: /Odtp

  03e90			 AREA	 |.text|, CODE, ARM

  03e90		 |?AcquirePhysicalEndPoint@CHW@@QAAEPAVCPipe@@@Z| PROC ; CHW::AcquirePhysicalEndPoint

; 1460 : {

  03e90		 |$LN34@AcquirePhy|
  03e90	e1a0c00d	 mov         r12, sp
  03e94	e92d0003	 stmdb       sp!, {r0, r1}
  03e98	e92d5000	 stmdb       sp!, {r12, lr}
  03e9c	e24dd05c	 sub         sp, sp, #0x5C
  03ea0		 |$M45105|

; 1461 :     int i;    
; 1462 :     USB_ENDPOINT_DESCRIPTOR endptDesc = pPipe->GetEndptDescriptor();

  03ea0	e28d101c	 add         r1, sp, #0x1C
  03ea4	e59d0068	 ldr         r0, [sp, #0x68]
  03ea8	eb000000	 bl          |?GetEndptDescriptor@CPipe@@QAA?AU_USB_ENDPOINT_DESCRIPTOR@@XZ|

; 1463 :     UCHAR endpoint = USB_ENDPOINT(endptDesc.bEndpointAddress);

  03eac	e5dd301e	 ldrb        r3, [sp, #0x1E]
  03eb0	e203300f	 and         r3, r3, #0xF
  03eb4	e20330ff	 and         r3, r3, #0xFF
  03eb8	e5cd300a	 strb        r3, [sp, #0xA]

; 1464 :     UCHAR isOut = USB_ENDPOINT_DIRECTION_OUT(endptDesc.bEndpointAddress)?1:0;    

  03ebc	e5dd301e	 ldrb        r3, [sp, #0x1E]
  03ec0	e3130080	 tst         r3, #0x80
  03ec4	1a000002	 bne         |$LN20@AcquirePhy|
  03ec8	e3a03001	 mov         r3, #1
  03ecc	e58d3034	 str         r3, [sp, #0x34]
  03ed0	ea000001	 b           |$LN21@AcquirePhy|
  03ed4		 |$LN20@AcquirePhy|
  03ed4	e3a03000	 mov         r3, #0
  03ed8	e58d3034	 str         r3, [sp, #0x34]
  03edc		 |$LN21@AcquirePhy|
  03edc	e59d3034	 ldr         r3, [sp, #0x34]
  03ee0	e20330ff	 and         r3, r3, #0xFF
  03ee4	e5cd3019	 strb        r3, [sp, #0x19]

; 1465 :     UCHAR mappedEP = 0xff;

  03ee8	e3a030ff	 mov         r3, #0xFF
  03eec	e5cd3023	 strb        r3, [sp, #0x23]

; 1466 :     UCHAR avail_EP = 0xff;

  03ef0	e3a030ff	 mov         r3, #0xFF
  03ef4	e5cd3010	 strb        r3, [sp, #0x10]

; 1467 :     UCHAR reuse_EP = 0xff;

  03ef8	e3a030ff	 mov         r3, #0xFF
  03efc	e5cd3018	 strb        r3, [sp, #0x18]

; 1468 :     USHORT deviceInfo = ((pPipe->GetReservedDeviceAddr() << 8)| (endptDesc.bEndpointAddress & 0xff));

  03f00	e59d3068	 ldr         r3, [sp, #0x68]
  03f04	e5933000	 ldr         r3, [r3]
  03f08	e2833028	 add         r3, r3, #0x28
  03f0c	e59d0068	 ldr         r0, [sp, #0x68]
  03f10	e5933000	 ldr         r3, [r3]
  03f14	e1a0e00f	 mov         lr, pc
  03f18	e12fff13	 bx          r3
  03f1c	e5cd0038	 strb        r0, [sp, #0x38]
  03f20	e5dd3038	 ldrb        r3, [sp, #0x38]
  03f24	e1a02403	 mov         r2, r3, lsl #8
  03f28	e5dd301e	 ldrb        r3, [sp, #0x1E]
  03f2c	e20330ff	 and         r3, r3, #0xFF
  03f30	e1823003	 orr         r3, r2, r3
  03f34	e1a03803	 mov         r3, r3, lsl #16
  03f38	e1a03823	 mov         r3, r3, lsr #16
  03f3c	e1cd30b8	 strh        r3, [sp, #8]

; 1469 : 
; 1470 :     // Try to implement a circular queue and see if it can get improved.
; 1471 :     static int next_assigned_EP[2] = {1,1}; // {IN, OUT}
; 1472 : 
; 1473 :     if (USB_ENDPOINT(endpoint) == 0)

  03f40	e5dd300a	 ldrb        r3, [sp, #0xA]
  03f44	e313000f	 tst         r3, #0xF
  03f48	1a000015	 bne         |$LN17@AcquirePhy|

; 1474 :     {
; 1475 :         for (i = 0; i < MAX_DIR; i++)

  03f4c	e3a03000	 mov         r3, #0
  03f50	e58d300c	 str         r3, [sp, #0xC]
  03f54	ea000002	 b           |$LN16@AcquirePhy|
  03f58		 |$LN15@AcquirePhy|
  03f58	e59d300c	 ldr         r3, [sp, #0xC]
  03f5c	e2833001	 add         r3, r3, #1
  03f60	e58d300c	 str         r3, [sp, #0xC]
  03f64		 |$LN16@AcquirePhy|
  03f64	e59d300c	 ldr         r3, [sp, #0xC]
  03f68	e3530002	 cmp         r3, #2
  03f6c	aa000009	 bge         |$LN14@AcquirePhy|

; 1476 :         {            
; 1477 :             m_EndPoint[0][i].usDeviceInfo = deviceInfo;

  03f70	e59d3064	 ldr         r3, [sp, #0x64]
  03f74	e2831f7a	 add         r1, r3, #0x7A, 30
  03f78	e59d200c	 ldr         r2, [sp, #0xC]
  03f7c	e3a03004	 mov         r3, #4
  03f80	e0030392	 mul         r3, r2, r3
  03f84	e0813003	 add         r3, r1, r3
  03f88	e2832002	 add         r2, r3, #2
  03f8c	e1dd30b8	 ldrh        r3, [sp, #8]
  03f90	e1c230b0	 strh        r3, [r2]

; 1478 :             // No need to update the m_hEP2Handles
; 1479 :         }

  03f94	eaffffef	 b           |$LN15@AcquirePhy|
  03f98		 |$LN14@AcquirePhy|

; 1480 :         return 0;

  03f98	e3a03000	 mov         r3, #0
  03f9c	e5cd3024	 strb        r3, [sp, #0x24]
  03fa0	ea00012f	 b           |$LN18@AcquirePhy|
  03fa4		 |$LN17@AcquirePhy|

; 1481 :     }
; 1482 : 
; 1483 :     EnterCriticalSection(&m_csEndPoint);

  03fa4	e59d3064	 ldr         r3, [sp, #0x64]
  03fa8	e2830f9b	 add         r0, r3, #0x9B, 30
  03fac	eb000000	 bl          EnterCriticalSection

; 1484 :     i = next_assigned_EP[isOut];

  03fb0	e5dd3019	 ldrb        r3, [sp, #0x19]
  03fb4	e1a01003	 mov         r1, r3
  03fb8	e3a03004	 mov         r3, #4
  03fbc	e0020391	 mul         r2, r1, r3
  03fc0	e59f34c4	 ldr         r3, [pc, #0x4C4]
  03fc4	e0833002	 add         r3, r3, r2
  03fc8	e5933000	 ldr         r3, [r3]
  03fcc	e58d300c	 str         r3, [sp, #0xC]

; 1485 :     int start = i;

  03fd0	e59d300c	 ldr         r3, [sp, #0xC]
  03fd4	e58d3014	 str         r3, [sp, #0x14]
  03fd8		 |$LN13@AcquirePhy|

; 1486 : 
; 1487 :     for (;;)
; 1488 :     {
; 1489 :         if (m_EndPoint[i][isOut].usDeviceInfo == deviceInfo)

  03fd8	e59d3064	 ldr         r3, [sp, #0x64]
  03fdc	e2831f7a	 add         r1, r3, #0x7A, 30
  03fe0	e59d200c	 ldr         r2, [sp, #0xC]
  03fe4	e3a03008	 mov         r3, #8
  03fe8	e0030392	 mul         r3, r2, r3
  03fec	e0811003	 add         r1, r1, r3
  03ff0	e5dd3019	 ldrb        r3, [sp, #0x19]
  03ff4	e1a02003	 mov         r2, r3
  03ff8	e3a03004	 mov         r3, #4
  03ffc	e0030392	 mul         r3, r2, r3
  04000	e0813003	 add         r3, r1, r3
  04004	e2833002	 add         r3, r3, #2
  04008	e1d330b0	 ldrh        r3, [r3]
  0400c	e1a02003	 mov         r2, r3
  04010	e1dd30b8	 ldrh        r3, [sp, #8]
  04014	e1520003	 cmp         r2, r3
  04018	1a000004	 bne         |$LN11@AcquirePhy|

; 1490 :         {
; 1491 :             mappedEP = (UCHAR)i;

  0401c	e59d300c	 ldr         r3, [sp, #0xC]
  04020	e20330ff	 and         r3, r3, #0xFF
  04024	e5cd3023	 strb        r3, [sp, #0x23]

; 1492 :             break;

  04028	ea000052	 b           |$LN12@AcquirePhy|

; 1493 :         }        
; 1494 :         else if ((m_EndPoint[i][isOut].usDeviceInfo == 0xffff) && (reuse_EP == 0xff) &&

  0402c	ea000043	 b           |$LN10@AcquirePhy|
  04030		 |$LN11@AcquirePhy|

; 1495 :             (m_EndPoint[i][isOut].usPrevDevInfo == deviceInfo))

  04030	e59d3064	 ldr         r3, [sp, #0x64]
  04034	e2831f7a	 add         r1, r3, #0x7A, 30
  04038	e59d200c	 ldr         r2, [sp, #0xC]
  0403c	e3a03008	 mov         r3, #8
  04040	e0030392	 mul         r3, r2, r3
  04044	e0811003	 add         r1, r1, r3
  04048	e5dd3019	 ldrb        r3, [sp, #0x19]
  0404c	e1a02003	 mov         r2, r3
  04050	e3a03004	 mov         r3, #4
  04054	e0030392	 mul         r3, r2, r3
  04058	e0813003	 add         r3, r1, r3
  0405c	e2833002	 add         r3, r3, #2
  04060	e1d330b0	 ldrh        r3, [r3]
  04064	e1a02003	 mov         r2, r3
  04068	e3a03cff	 mov         r3, #0xFF, 24
  0406c	e38330ff	 orr         r3, r3, #0xFF
  04070	e1520003	 cmp         r2, r3
  04074	1a000019	 bne         |$LN9@AcquirePhy|
  04078	e5dd3018	 ldrb        r3, [sp, #0x18]
  0407c	e35300ff	 cmp         r3, #0xFF
  04080	1a000016	 bne         |$LN9@AcquirePhy|
  04084	e59d3064	 ldr         r3, [sp, #0x64]
  04088	e2831f7a	 add         r1, r3, #0x7A, 30
  0408c	e59d200c	 ldr         r2, [sp, #0xC]
  04090	e3a03008	 mov         r3, #8
  04094	e0030392	 mul         r3, r2, r3
  04098	e0811003	 add         r1, r1, r3
  0409c	e5dd3019	 ldrb        r3, [sp, #0x19]
  040a0	e1a02003	 mov         r2, r3
  040a4	e3a03004	 mov         r3, #4
  040a8	e0030392	 mul         r3, r2, r3
  040ac	e0813003	 add         r3, r1, r3
  040b0	e1d330b0	 ldrh        r3, [r3]
  040b4	e1a02003	 mov         r2, r3
  040b8	e1dd30b8	 ldrh        r3, [sp, #8]
  040bc	e1520003	 cmp         r2, r3
  040c0	1a000006	 bne         |$LN9@AcquirePhy|

; 1496 :         {
; 1497 :             avail_EP = (UCHAR)i;

  040c4	e59d300c	 ldr         r3, [sp, #0xC]
  040c8	e20330ff	 and         r3, r3, #0xFF
  040cc	e5cd3010	 strb        r3, [sp, #0x10]

; 1498 :             reuse_EP = (UCHAR)i;

  040d0	e59d300c	 ldr         r3, [sp, #0xC]
  040d4	e20330ff	 and         r3, r3, #0xFF
  040d8	e5cd3018	 strb        r3, [sp, #0x18]
  040dc	ea000017	 b           |$LN8@AcquirePhy|
  040e0		 |$LN9@AcquirePhy|

; 1499 :         }
; 1500 :         else if ((m_EndPoint[i][isOut].usDeviceInfo == 0xffff) && (avail_EP == 0xff))

  040e0	e59d3064	 ldr         r3, [sp, #0x64]
  040e4	e2831f7a	 add         r1, r3, #0x7A, 30
  040e8	e59d200c	 ldr         r2, [sp, #0xC]
  040ec	e3a03008	 mov         r3, #8
  040f0	e0030392	 mul         r3, r2, r3
  040f4	e0811003	 add         r1, r1, r3
  040f8	e5dd3019	 ldrb        r3, [sp, #0x19]
  040fc	e1a02003	 mov         r2, r3
  04100	e3a03004	 mov         r3, #4
  04104	e0030392	 mul         r3, r2, r3
  04108	e0813003	 add         r3, r1, r3
  0410c	e2833002	 add         r3, r3, #2
  04110	e1d330b0	 ldrh        r3, [r3]
  04114	e1a02003	 mov         r2, r3
  04118	e3a03cff	 mov         r3, #0xFF, 24
  0411c	e38330ff	 orr         r3, r3, #0xFF
  04120	e1520003	 cmp         r2, r3
  04124	1a000005	 bne         |$LN7@AcquirePhy|
  04128	e5dd3010	 ldrb        r3, [sp, #0x10]
  0412c	e35300ff	 cmp         r3, #0xFF
  04130	1a000002	 bne         |$LN7@AcquirePhy|

; 1501 :         {         
; 1502 :             avail_EP = (UCHAR)i;

  04134	e59d300c	 ldr         r3, [sp, #0xC]
  04138	e20330ff	 and         r3, r3, #0xFF
  0413c	e5cd3010	 strb        r3, [sp, #0x10]
  04140		 |$LN7@AcquirePhy|
  04140		 |$LN8@AcquirePhy|
  04140		 |$LN10@AcquirePhy|

; 1503 :         }  
; 1504 :         
; 1505 :         i++;

  04140	e59d300c	 ldr         r3, [sp, #0xC]
  04144	e2833001	 add         r3, r3, #1
  04148	e58d300c	 str         r3, [sp, #0xC]

; 1506 :         if (i >= HOST_MAX_EPNUM)

  0414c	e59d300c	 ldr         r3, [sp, #0xC]
  04150	e3530010	 cmp         r3, #0x10
  04154	ba000001	 blt         |$LN6@AcquirePhy|

; 1507 :             i = 1;

  04158	e3a03001	 mov         r3, #1
  0415c	e58d300c	 str         r3, [sp, #0xC]
  04160		 |$LN6@AcquirePhy|

; 1508 : 
; 1509 :         if (i == start)

  04160	e59d200c	 ldr         r2, [sp, #0xC]
  04164	e59d3014	 ldr         r3, [sp, #0x14]
  04168	e1520003	 cmp         r2, r3
  0416c	1a000000	 bne         |$LN5@AcquirePhy|

; 1510 :             break;

  04170	ea000000	 b           |$LN12@AcquirePhy|
  04174		 |$LN5@AcquirePhy|

; 1511 :     }

  04174	eaffff97	 b           |$LN13@AcquirePhy|
  04178		 |$LN12@AcquirePhy|

; 1512 :     
; 1513 :     if (mappedEP == 0xff)

  04178	e5dd3023	 ldrb        r3, [sp, #0x23]
  0417c	e35300ff	 cmp         r3, #0xFF
  04180	1a00007c	 bne         |$LN4@AcquirePhy|

; 1514 :     {
; 1515 :         mappedEP = avail_EP;        

  04184	e5dd3010	 ldrb        r3, [sp, #0x10]
  04188	e5cd3023	 strb        r3, [sp, #0x23]

; 1516 :         if (avail_EP != 0xff)

  0418c	e5dd3010	 ldrb        r3, [sp, #0x10]
  04190	e35300ff	 cmp         r3, #0xFF
  04194	0a00006d	 beq         |$LN3@AcquirePhy|

; 1517 :         {
; 1518 :             next_assigned_EP[isOut] = mappedEP;

  04198	e5dd3023	 ldrb        r3, [sp, #0x23]
  0419c	e1a00003	 mov         r0, r3
  041a0	e5dd3019	 ldrb        r3, [sp, #0x19]
  041a4	e1a01003	 mov         r1, r3
  041a8	e3a03004	 mov         r3, #4
  041ac	e0020391	 mul         r2, r1, r3
  041b0	e59f32d4	 ldr         r3, [pc, #0x2D4]
  041b4	e0833002	 add         r3, r3, r2
  041b8	e5830000	 str         r0, [r3]

; 1519 :             next_assigned_EP[isOut]++;

  041bc	e5dd3019	 ldrb        r3, [sp, #0x19]
  041c0	e1a01003	 mov         r1, r3
  041c4	e3a03004	 mov         r3, #4
  041c8	e0020391	 mul         r2, r1, r3
  041cc	e59f32b8	 ldr         r3, [pc, #0x2B8]
  041d0	e0833002	 add         r3, r3, r2
  041d4	e5933000	 ldr         r3, [r3]
  041d8	e2830001	 add         r0, r3, #1
  041dc	e5dd3019	 ldrb        r3, [sp, #0x19]
  041e0	e1a01003	 mov         r1, r3
  041e4	e3a03004	 mov         r3, #4
  041e8	e0020391	 mul         r2, r1, r3
  041ec	e59f3298	 ldr         r3, [pc, #0x298]
  041f0	e0833002	 add         r3, r3, r2
  041f4	e5830000	 str         r0, [r3]

; 1520 :             if (next_assigned_EP[isOut] >= HOST_MAX_EPNUM)

  041f8	e5dd3019	 ldrb        r3, [sp, #0x19]
  041fc	e1a01003	 mov         r1, r3
  04200	e3a03004	 mov         r3, #4
  04204	e0020391	 mul         r2, r1, r3
  04208	e59f327c	 ldr         r3, [pc, #0x27C]
  0420c	e0833002	 add         r3, r3, r2
  04210	e5933000	 ldr         r3, [r3]
  04214	e3530010	 cmp         r3, #0x10
  04218	ba000007	 blt         |$LN2@AcquirePhy|

; 1521 :                 next_assigned_EP[isOut] = 1;

  0421c	e5dd3019	 ldrb        r3, [sp, #0x19]
  04220	e1a01003	 mov         r1, r3
  04224	e3a03004	 mov         r3, #4
  04228	e0020391	 mul         r2, r1, r3
  0422c	e59f3258	 ldr         r3, [pc, #0x258]
  04230	e0832002	 add         r2, r3, r2
  04234	e3a03001	 mov         r3, #1
  04238	e5823000	 str         r3, [r2]
  0423c		 |$LN2@AcquirePhy|

; 1522 :             m_EndPoint[avail_EP][isOut].usDeviceInfo = deviceInfo;

  0423c	e59d3064	 ldr         r3, [sp, #0x64]
  04240	e2831f7a	 add         r1, r3, #0x7A, 30
  04244	e5dd3010	 ldrb        r3, [sp, #0x10]
  04248	e1a02003	 mov         r2, r3
  0424c	e3a03008	 mov         r3, #8
  04250	e0030392	 mul         r3, r2, r3
  04254	e0811003	 add         r1, r1, r3
  04258	e5dd3019	 ldrb        r3, [sp, #0x19]
  0425c	e1a02003	 mov         r2, r3
  04260	e3a03004	 mov         r3, #4
  04264	e0030392	 mul         r3, r2, r3
  04268	e0813003	 add         r3, r1, r3
  0426c	e2832002	 add         r2, r3, #2
  04270	e1dd30b8	 ldrh        r3, [sp, #8]
  04274	e1c230b0	 strh        r3, [r2]

; 1523 :             m_EndPoint[avail_EP][isOut].usPrevDevInfo = deviceInfo;

  04278	e59d3064	 ldr         r3, [sp, #0x64]
  0427c	e2831f7a	 add         r1, r3, #0x7A, 30
  04280	e5dd3010	 ldrb        r3, [sp, #0x10]
  04284	e1a02003	 mov         r2, r3
  04288	e3a03008	 mov         r3, #8
  0428c	e0030392	 mul         r3, r2, r3
  04290	e0811003	 add         r1, r1, r3
  04294	e5dd3019	 ldrb        r3, [sp, #0x19]
  04298	e1a02003	 mov         r2, r3
  0429c	e3a03004	 mov         r3, #4
  042a0	e0030392	 mul         r3, r2, r3
  042a4	e0812003	 add         r2, r1, r3
  042a8	e1dd30b8	 ldrh        r3, [sp, #8]
  042ac	e1c230b0	 strh        r3, [r2]

; 1524 :             m_EndPointInUseCount++;

  042b0	e59d3064	 ldr         r3, [sp, #0x64]
  042b4	e2833f9a	 add         r3, r3, #0x9A, 30
  042b8	e5933000	 ldr         r3, [r3]
  042bc	e2832001	 add         r2, r3, #1
  042c0	e59d3064	 ldr         r3, [sp, #0x64]
  042c4	e2833f9a	 add         r3, r3, #0x9A, 30
  042c8	e5832000	 str         r2, [r3]

; 1525 :             DEBUGMSG(ZONE_HCD, (TEXT("AcquirePhysicalEndPoint for EP 0x%x Device 0x%x -> Mapped %d [%s]\r\n"),
; 1526 :                 endptDesc.bEndpointAddress, pPipe->GetReservedDeviceAddr(), mappedEP, isOut?TEXT("OUT"):TEXT("IN")));

  042cc	e59f31ac	 ldr         r3, [pc, #0x1AC]
  042d0	e5933440	 ldr         r3, [r3, #0x440]
  042d4	e3130001	 tst         r3, #1
  042d8	0a000019	 beq         |$LN24@AcquirePhy|
  042dc	e5dd3019	 ldrb        r3, [sp, #0x19]
  042e0	e3530000	 cmp         r3, #0
  042e4	0a000002	 beq         |$LN22@AcquirePhy|
  042e8	e59f318c	 ldr         r3, [pc, #0x18C]
  042ec	e58d303c	 str         r3, [sp, #0x3C]
  042f0	ea000001	 b           |$LN23@AcquirePhy|
  042f4		 |$LN22@AcquirePhy|
  042f4	e59f317c	 ldr         r3, [pc, #0x17C]
  042f8	e58d303c	 str         r3, [sp, #0x3C]
  042fc		 |$LN23@AcquirePhy|
  042fc	e59d3068	 ldr         r3, [sp, #0x68]
  04300	e5933000	 ldr         r3, [r3]
  04304	e2833028	 add         r3, r3, #0x28
  04308	e59d0068	 ldr         r0, [sp, #0x68]
  0430c	e5933000	 ldr         r3, [r3]
  04310	e1a0e00f	 mov         lr, pc
  04314	e12fff13	 bx          r3
  04318	e5cd0040	 strb        r0, [sp, #0x40]
  0431c	e59d303c	 ldr         r3, [sp, #0x3C]
  04320	e58d3000	 str         r3, [sp]
  04324	e5dd3023	 ldrb        r3, [sp, #0x23]
  04328	e5dd2040	 ldrb        r2, [sp, #0x40]
  0432c	e5dd101e	 ldrb        r1, [sp, #0x1E]
  04330	e59f0150	 ldr         r0, [pc, #0x150]
  04334	eb000000	 bl          NKDbgPrintfW
  04338	e3a03001	 mov         r3, #1
  0433c	e58d3044	 str         r3, [sp, #0x44]
  04340	ea000001	 b           |$LN25@AcquirePhy|
  04344		 |$LN24@AcquirePhy|
  04344	e3a03000	 mov         r3, #0
  04348	e58d3044	 str         r3, [sp, #0x44]
  0434c		 |$LN25@AcquirePhy|

; 1527 :         }
; 1528 :         else

  0434c	ea000009	 b           |$LN1@AcquirePhy|
  04350		 |$LN3@AcquirePhy|

; 1529 :         {
; 1530 :             RETAILMSG(1, (TEXT("FAILED TO GET THE EP!!!\r\n")));

  04350	e59f012c	 ldr         r0, [pc, #0x12C]
  04354	eb000000	 bl          NKDbgPrintfW
  04358	e3a03001	 mov         r3, #1
  0435c	e58d3048	 str         r3, [sp, #0x48]
  04360	ea000001	 b           |$LN27@AcquirePhy|
  04364	e3a03000	 mov         r3, #0
  04368	e58d3048	 str         r3, [sp, #0x48]
  0436c		 |$LN27@AcquirePhy|

; 1531 :             return 0xff;

  0436c	e3a030ff	 mov         r3, #0xFF
  04370	e5cd3024	 strb        r3, [sp, #0x24]
  04374	ea00003a	 b           |$LN18@AcquirePhy|
  04378		 |$LN1@AcquirePhy|
  04378		 |$LN4@AcquirePhy|

; 1532 :         }
; 1533 : 
; 1534 :     }
; 1535 : 
; 1536 :     // Finally set the m_hEP2Handles 
; 1537 :     m_cBusyPipeList.m_hEP2Handles[mappedEP][isOut] = pPipe->GetEPTransferEvent();

  04378	e59d0068	 ldr         r0, [sp, #0x68]
  0437c	eb000000	 bl          |?GetEPTransferEvent@CPipe@@QAAPAXXZ|
  04380	e58d004c	 str         r0, [sp, #0x4C]
  04384	e59d3064	 ldr         r3, [sp, #0x64]
  04388	e28310d8	 add         r1, r3, #0xD8
  0438c	e5dd3023	 ldrb        r3, [sp, #0x23]
  04390	e1a02003	 mov         r2, r3
  04394	e3a03008	 mov         r3, #8
  04398	e0030392	 mul         r3, r2, r3
  0439c	e0811003	 add         r1, r1, r3
  043a0	e5dd3019	 ldrb        r3, [sp, #0x19]
  043a4	e1a02003	 mov         r2, r3
  043a8	e3a03004	 mov         r3, #4
  043ac	e0030392	 mul         r3, r2, r3
  043b0	e0812003	 add         r2, r1, r3
  043b4	e59d304c	 ldr         r3, [sp, #0x4C]
  043b8	e5823000	 str         r3, [r2]

; 1538 :     pPipe->SetMappedEndPoint(mappedEP);

  043bc	e5dd1023	 ldrb        r1, [sp, #0x23]
  043c0	e59d0068	 ldr         r0, [sp, #0x68]
  043c4	eb000000	 bl          |?SetMappedEndPoint@CPipe@@QAAXE@Z|

; 1539 : 
; 1540 :     LeaveCriticalSection(&m_csEndPoint);

  043c8	e59d3064	 ldr         r3, [sp, #0x64]
  043cc	e2830f9b	 add         r0, r3, #0x9B, 30
  043d0	eb000000	 bl          LeaveCriticalSection

; 1541 :     DEBUGMSG(ZONE_HCD, (TEXT("AcquirePhysicalEP(ep[%d], device[%d]) (%s) value 0x%x, MEP %d\r\n"),
; 1542 :         endpoint, pPipe->GetReservedDeviceAddr(), isOut? TEXT("OUT"):TEXT("IN"), deviceInfo, mappedEP));

  043d4	e59f30a4	 ldr         r3, [pc, #0xA4]
  043d8	e5933440	 ldr         r3, [r3, #0x440]
  043dc	e3130001	 tst         r3, #1
  043e0	0a00001b	 beq         |$LN30@AcquirePhy|
  043e4	e5dd3019	 ldrb        r3, [sp, #0x19]
  043e8	e3530000	 cmp         r3, #0
  043ec	0a000002	 beq         |$LN28@AcquirePhy|
  043f0	e59f3084	 ldr         r3, [pc, #0x84]
  043f4	e58d3050	 str         r3, [sp, #0x50]
  043f8	ea000001	 b           |$LN29@AcquirePhy|
  043fc		 |$LN28@AcquirePhy|
  043fc	e59f3074	 ldr         r3, [pc, #0x74]
  04400	e58d3050	 str         r3, [sp, #0x50]
  04404		 |$LN29@AcquirePhy|
  04404	e59d3068	 ldr         r3, [sp, #0x68]
  04408	e5933000	 ldr         r3, [r3]
  0440c	e2833028	 add         r3, r3, #0x28
  04410	e59d0068	 ldr         r0, [sp, #0x68]
  04414	e5933000	 ldr         r3, [r3]
  04418	e1a0e00f	 mov         lr, pc
  0441c	e12fff13	 bx          r3
  04420	e5cd0054	 strb        r0, [sp, #0x54]
  04424	e5dd3023	 ldrb        r3, [sp, #0x23]
  04428	e58d3004	 str         r3, [sp, #4]
  0442c	e1dd30b8	 ldrh        r3, [sp, #8]
  04430	e58d3000	 str         r3, [sp]
  04434	e59d3050	 ldr         r3, [sp, #0x50]
  04438	e5dd2054	 ldrb        r2, [sp, #0x54]
  0443c	e5dd100a	 ldrb        r1, [sp, #0xA]
  04440	e59f002c	 ldr         r0, [pc, #0x2C]
  04444	eb000000	 bl          NKDbgPrintfW
  04448	e3a03001	 mov         r3, #1
  0444c	e58d3058	 str         r3, [sp, #0x58]
  04450	ea000001	 b           |$LN31@AcquirePhy|
  04454		 |$LN30@AcquirePhy|
  04454	e3a03000	 mov         r3, #0
  04458	e58d3058	 str         r3, [sp, #0x58]
  0445c		 |$LN31@AcquirePhy|

; 1543 :     return mappedEP;

  0445c	e5dd3023	 ldrb        r3, [sp, #0x23]
  04460	e5cd3024	 strb        r3, [sp, #0x24]
  04464		 |$LN18@AcquirePhy|

; 1544 : }

  04464	e5dd0024	 ldrb        r0, [sp, #0x24]
  04468	e28dd05c	 add         sp, sp, #0x5C
  0446c	e89d6000	 ldmia       sp, {sp, lr}
  04470	e12fff1e	 bx          lr
  04474		 |$LN35@AcquirePhy|
  04474		 |$LN36@AcquirePhy|
  04474	00000000	 DCD         |??_C@_1IA@KNBFMBJK@?$AAA?$AAc?$AAq?$AAu?$AAi?$AAr?$AAe?$AAP?$AAh?$AAy?$AAs?$AAi?$AAc?$AAa?$AAl?$AAE?$AAP?$AA?$CI?$AAe?$AAp?$AA?$FL?$AA?$CF?$AAd?$AA?$FN?$AA?0?$AA?5?$AAd?$AAe?$AAv?$AAi?$AAc?$AAe@|
  04478		 |$LN37@AcquirePhy|
  04478	00000000	 DCD         |??_C@_15BNKBCKPG@?$AAI?$AAN?$AA?$AA@|
  0447c		 |$LN38@AcquirePhy|
  0447c	00000000	 DCD         |??_C@_17HCEMPBGG@?$AAO?$AAU?$AAT?$AA?$AA@|
  04480		 |$LN39@AcquirePhy|
  04480	00000000	 DCD         |dpCurSettings|
  04484		 |$LN40@AcquirePhy|
  04484	00000000	 DCD         |??_C@_1DE@OFOMOBKP@?$AAF?$AAA?$AAI?$AAL?$AAE?$AAD?$AA?5?$AAT?$AAO?$AA?5?$AAG?$AAE?$AAT?$AA?5?$AAT?$AAH?$AAE?$AA?5?$AAE?$AAP?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@|
  04488		 |$LN41@AcquirePhy|
  04488	00000000	 DCD         |??_C@_1II@OPHGDPCE@?$AAA?$AAc?$AAq?$AAu?$AAi?$AAr?$AAe?$AAP?$AAh?$AAy?$AAs?$AAi?$AAc?$AAa?$AAl?$AAE?$AAn?$AAd?$AAP?$AAo?$AAi?$AAn?$AAt?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAE?$AAP?$AA?5?$AA0@|
  0448c		 |$LN42@AcquirePhy|
  0448c	00000000	 DCD         |?next_assigned_EP@?1??AcquirePhysicalEndPoint@CHW@@QAAEPAVCPipe@@@Z@4PAHA|
  04490		 |$M45106|

			 ENDP  ; |?AcquirePhysicalEndPoint@CHW@@QAAEPAVCPipe@@@Z|, CHW::AcquirePhysicalEndPoint

	EXPORT	|??_C@_1II@BAJELDOI@?$AAR?$AAe?$AAl?$AAe?$AAa?$AAs?$AAe?$AAP?$AAh?$AAy?$AAs?$AAi?$AAc?$AAa?$AAl?$AAE?$AAn?$AAd?$AAP?$AAo?$AAi?$AAn?$AAt?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAE?$AAP?$AA?5?$AA0@| [ DATA ] ; `string'
	EXPORT	|?GetMappedEndPoint@CPipe@@QAAEXZ|	; CPipe::GetMappedEndPoint

  00108			 AREA	 |.pdata|, PDATA
|$T45129| DCD	|$LN19@ReleasePhy|
	DCD	0x40016a04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1II@BAJELDOI@?$AAR?$AAe?$AAl?$AAe?$AAa?$AAs?$AAe?$AAP?$AAh?$AAy?$AAs?$AAi?$AAc?$AAa?$AAl?$AAE?$AAn?$AAd?$AAP?$AAo?$AAi?$AAn?$AAt?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAE?$AAP?$AA?5?$AA0@| DCB "R"
	DCB	0x0, "e", 0x0, "l", 0x0, "e", 0x0, "a", 0x0, "s", 0x0, "e"
	DCB	0x0, "P", 0x0, "h", 0x0, "y", 0x0, "s", 0x0, "i", 0x0, "c"
	DCB	0x0, "a", 0x0, "l", 0x0, "E", 0x0, "n", 0x0, "d", 0x0, "P"
	DCB	0x0, "o", 0x0, "i", 0x0, "n", 0x0, "t", 0x0, " ", 0x0, "f"
	DCB	0x0, "o", 0x0, "r", 0x0, " ", 0x0, "E", 0x0, "P", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, " ", 0x0, "D"
	DCB	0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, " ", 0x0, "-"
	DCB	0x0, ">", 0x0, " ", 0x0, "M", 0x0, "a", 0x0, "p", 0x0, "p"
	DCB	0x0, "e", 0x0, "d", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, " "
	DCB	0x0, "[", 0x0, "%", 0x0, "s", 0x0, "]", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  04490			 AREA	 |.text|, CODE, ARM

  04490		 |?ReleasePhysicalEndPoint@CHW@@QAAHPAVCPipe@@HH@Z| PROC ; CHW::ReleasePhysicalEndPoint

; 1554 : {

  04490		 |$LN19@ReleasePhy|
  04490	e1a0c00d	 mov         r12, sp
  04494	e92d000f	 stmdb       sp!, {r0 - r3}
  04498	e92d5000	 stmdb       sp!, {r12, lr}
  0449c	e24dd03c	 sub         sp, sp, #0x3C
  044a0		 |$M45126|

; 1555 :     UCHAR mappedEP = pPipe->GetMappedEndPoint();

  044a0	e59d0048	 ldr         r0, [sp, #0x48]
  044a4	eb000000	 bl          |?GetMappedEndPoint@CPipe@@QAAEXZ|
  044a8	e5cd0024	 strb        r0, [sp, #0x24]
  044ac	e5dd3024	 ldrb        r3, [sp, #0x24]
  044b0	e5cd300f	 strb        r3, [sp, #0xF]

; 1556 :     USB_ENDPOINT_DESCRIPTOR endptDesc = pPipe->GetEndptDescriptor();

  044b4	e28d1008	 add         r1, sp, #8
  044b8	e59d0048	 ldr         r0, [sp, #0x48]
  044bc	eb000000	 bl          |?GetEndptDescriptor@CPipe@@QAA?AU_USB_ENDPOINT_DESCRIPTOR@@XZ|

; 1557 :     UCHAR isOut = USB_ENDPOINT_DIRECTION_OUT(endptDesc.bEndpointAddress)?1:0;

  044c0	e5dd300a	 ldrb        r3, [sp, #0xA]
  044c4	e3130080	 tst         r3, #0x80
  044c8	1a000002	 bne         |$LN11@ReleasePhy|
  044cc	e3a03001	 mov         r3, #1
  044d0	e58d3028	 str         r3, [sp, #0x28]
  044d4	ea000001	 b           |$LN12@ReleasePhy|
  044d8		 |$LN11@ReleasePhy|
  044d8	e3a03000	 mov         r3, #0
  044dc	e58d3028	 str         r3, [sp, #0x28]
  044e0		 |$LN12@ReleasePhy|
  044e0	e59d3028	 ldr         r3, [sp, #0x28]
  044e4	e20330ff	 and         r3, r3, #0xFF
  044e8	e5cd3004	 strb        r3, [sp, #4]

; 1558 : 
; 1559 :     // Avoid Crash situation
; 1560 :     if ((mappedEP <= 0) || (mappedEP >= HOST_MAX_EPNUM))

  044ec	e5dd300f	 ldrb        r3, [sp, #0xF]
  044f0	e3530000	 cmp         r3, #0
  044f4	da000002	 ble         |$LN7@ReleasePhy|
  044f8	e5dd300f	 ldrb        r3, [sp, #0xF]
  044fc	e3530010	 cmp         r3, #0x10
  04500	ba000002	 blt         |$LN8@ReleasePhy|
  04504		 |$LN7@ReleasePhy|

; 1561 :         return TRUE;

  04504	e3a03001	 mov         r3, #1
  04508	e58d301c	 str         r3, [sp, #0x1C]
  0450c	ea000142	 b           |$LN9@ReleasePhy|
  04510		 |$LN8@ReleasePhy|

; 1562 :         
; 1563 :     EnterCriticalSection(&m_csEndPoint);

  04510	e59d3044	 ldr         r3, [sp, #0x44]
  04514	e2830f9b	 add         r0, r3, #0x9B, 30
  04518	eb000000	 bl          EnterCriticalSection

; 1564 : 
; 1565 :     // Currently release it only if it is very busy.    
; 1566 :     if ((m_EndPointInUseCount >= 1) || (fForce))

  0451c	e59d3044	 ldr         r3, [sp, #0x44]
  04520	e2833f9a	 add         r3, r3, #0x9A, 30
  04524	e5933000	 ldr         r3, [r3]
  04528	e3530001	 cmp         r3, #1
  0452c	2a000002	 bcs         |$LN5@ReleasePhy|
  04530	e59d304c	 ldr         r3, [sp, #0x4C]
  04534	e3530000	 cmp         r3, #0
  04538	0a000132	 beq         |$LN6@ReleasePhy|
  0453c		 |$LN5@ReleasePhy|

; 1567 :     {
; 1568 :         PHSMUSB_T pOTG;               
; 1569 :         pOTG = (PHSMUSB_T)GetOTGContext();

  0453c	e59d0044	 ldr         r0, [sp, #0x44]
  04540	eb000000	 bl          |?GetOTGContext@CHcd@@QAAPAXXZ|
  04544	e58d002c	 str         r0, [sp, #0x2C]
  04548	e59d302c	 ldr         r3, [sp, #0x2C]
  0454c	e58d3010	 str         r3, [sp, #0x10]

; 1570 : 
; 1571 :         m_EndPoint[mappedEP][isOut].usDeviceInfo = 0xffff;

  04550	e59d3044	 ldr         r3, [sp, #0x44]
  04554	e2831f7a	 add         r1, r3, #0x7A, 30
  04558	e5dd300f	 ldrb        r3, [sp, #0xF]
  0455c	e1a02003	 mov         r2, r3
  04560	e3a03008	 mov         r3, #8
  04564	e0030392	 mul         r3, r2, r3
  04568	e0811003	 add         r1, r1, r3
  0456c	e5dd3004	 ldrb        r3, [sp, #4]
  04570	e1a02003	 mov         r2, r3
  04574	e3a03004	 mov         r3, #4
  04578	e0030392	 mul         r3, r2, r3
  0457c	e0813003	 add         r3, r1, r3
  04580	e2832002	 add         r2, r3, #2
  04584	e3a03cff	 mov         r3, #0xFF, 24
  04588	e38330ff	 orr         r3, r3, #0xFF
  0458c	e1c230b0	 strh        r3, [r2]

; 1572 :         if (fClearAll)

  04590	e59d3050	 ldr         r3, [sp, #0x50]
  04594	e3530000	 cmp         r3, #0
  04598	0a00000e	 beq         |$LN4@ReleasePhy|

; 1573 :             m_EndPoint[mappedEP][isOut].usPrevDevInfo = 0xffff;

  0459c	e59d3044	 ldr         r3, [sp, #0x44]
  045a0	e2831f7a	 add         r1, r3, #0x7A, 30
  045a4	e5dd300f	 ldrb        r3, [sp, #0xF]
  045a8	e1a02003	 mov         r2, r3
  045ac	e3a03008	 mov         r3, #8
  045b0	e0030392	 mul         r3, r2, r3
  045b4	e0811003	 add         r1, r1, r3
  045b8	e5dd3004	 ldrb        r3, [sp, #4]
  045bc	e1a02003	 mov         r2, r3
  045c0	e3a03004	 mov         r3, #4
  045c4	e0030392	 mul         r3, r2, r3
  045c8	e0812003	 add         r2, r1, r3
  045cc	e3a03cff	 mov         r3, #0xFF, 24
  045d0	e38330ff	 orr         r3, r3, #0xFF
  045d4	e1c230b0	 strh        r3, [r2]
  045d8		 |$LN4@ReleasePhy|

; 1574 :         m_EndPointInUseCount--;

  045d8	e59d3044	 ldr         r3, [sp, #0x44]
  045dc	e2833f9a	 add         r3, r3, #0x9A, 30
  045e0	e5933000	 ldr         r3, [r3]
  045e4	e2432001	 sub         r2, r3, #1
  045e8	e59d3044	 ldr         r3, [sp, #0x44]
  045ec	e2833f9a	 add         r3, r3, #0x9A, 30
  045f0	e5832000	 str         r2, [r3]

; 1575 :         m_cBusyPipeList.m_hEP2Handles[mappedEP][isOut] = NULL;

  045f4	e59d3044	 ldr         r3, [sp, #0x44]
  045f8	e28310d8	 add         r1, r3, #0xD8
  045fc	e5dd300f	 ldrb        r3, [sp, #0xF]
  04600	e1a02003	 mov         r2, r3
  04604	e3a03008	 mov         r3, #8
  04608	e0030392	 mul         r3, r2, r3
  0460c	e0811003	 add         r1, r1, r3
  04610	e5dd3004	 ldrb        r3, [sp, #4]
  04614	e1a02003	 mov         r2, r3
  04618	e3a03004	 mov         r3, #4
  0461c	e0030392	 mul         r3, r2, r3
  04620	e0812003	 add         r2, r1, r3
  04624	e3a03000	 mov         r3, #0
  04628	e5823000	 str         r3, [r2]

; 1576 :         pPipe->SetMappedEndPoint(0xff);

  0462c	e3a010ff	 mov         r1, #0xFF
  04630	e59d0048	 ldr         r0, [sp, #0x48]
  04634	eb000000	 bl          |?SetMappedEndPoint@CPipe@@QAAXE@Z|

; 1577 :         if (pOTG != NULL)

  04638	e59d3010	 ldr         r3, [sp, #0x10]
  0463c	e3530000	 cmp         r3, #0
  04640	0a0000d3	 beq         |$LN3@ReleasePhy|

; 1578 :         {
; 1579 :             EnterCriticalSection(&pOTG->regCS); 

  04644	e59d3010	 ldr         r3, [sp, #0x10]
  04648	e2830038	 add         r0, r3, #0x38
  0464c	eb000000	 bl          EnterCriticalSection

; 1580 :             OUTREG8(&pOTG->pUsbGenRegs->Index, USB_ENDPOINT(mappedEP));

  04650	e5dd300f	 ldrb        r3, [sp, #0xF]
  04654	e203300f	 and         r3, r3, #0xF
  04658	e20320ff	 and         r2, r3, #0xFF
  0465c	e59d3010	 ldr         r3, [sp, #0x10]
  04660	e2833020	 add         r3, r3, #0x20
  04664	e5933000	 ldr         r3, [r3]
  04668	e283300e	 add         r3, r3, #0xE
  0466c	e5c32000	 strb        r2, [r3]

; 1581 :             // Flush the endpoint
; 1582 :             if (isOut)

  04670	e5dd3004	 ldrb        r3, [sp, #4]
  04674	e3530000	 cmp         r3, #0
  04678	0a000061	 beq         |$LN2@ReleasePhy|

; 1583 :             {
; 1584 :                 SETREG16(&pOTG->pUsbCsrRegs->ep[USB_ENDPOINT(mappedEP)].CSR.TxCSR, TXCSR_H_FlushFIFO);

  0467c	e59d3010	 ldr         r3, [sp, #0x10]
  04680	e283001c	 add         r0, r3, #0x1C
  04684	e5dd300f	 ldrb        r3, [sp, #0xF]
  04688	e203100f	 and         r1, r3, #0xF
  0468c	e3a03010	 mov         r3, #0x10
  04690	e0020391	 mul         r2, r1, r3
  04694	e5903000	 ldr         r3, [r0]
  04698	e0833002	 add         r3, r3, r2
  0469c	e2831002	 add         r1, r3, #2
  046a0	e5d13001	 ldrb        r3, [r1, #1]
  046a4	e1a03403	 mov         r3, r3, lsl #8
  046a8	e1a02803	 mov         r2, r3, lsl #16
  046ac	e1a02822	 mov         r2, r2, lsr #16
  046b0	e5d13000	 ldrb        r3, [r1]
  046b4	e1833002	 orr         r3, r3, r2
  046b8	e3833008	 orr         r3, r3, #8
  046bc	e1a0e803	 mov         lr, r3, lsl #16
  046c0	e1a0e82e	 mov         lr, lr, lsr #16
  046c4	e59d3010	 ldr         r3, [sp, #0x10]
  046c8	e283001c	 add         r0, r3, #0x1C
  046cc	e5dd300f	 ldrb        r3, [sp, #0xF]
  046d0	e203100f	 and         r1, r3, #0xF
  046d4	e3a03010	 mov         r3, #0x10
  046d8	e0020391	 mul         r2, r1, r3
  046dc	e5903000	 ldr         r3, [r0]
  046e0	e0833002	 add         r3, r3, r2
  046e4	e2832002	 add         r2, r3, #2
  046e8	e1a0300e	 mov         r3, lr
  046ec	e5c23000	 strb        r3, [r2]
  046f0	e1a03423	 mov         r3, r3, lsr #8
  046f4	e5c23001	 strb        r3, [r2, #1]

; 1585 :                 SETREG16(&pOTG->pUsbCsrRegs->ep[USB_ENDPOINT(mappedEP)].CSR.TxCSR, TXCSR_H_FlushFIFO);

  046f8	e59d3010	 ldr         r3, [sp, #0x10]
  046fc	e283001c	 add         r0, r3, #0x1C
  04700	e5dd300f	 ldrb        r3, [sp, #0xF]
  04704	e203100f	 and         r1, r3, #0xF
  04708	e3a03010	 mov         r3, #0x10
  0470c	e0020391	 mul         r2, r1, r3
  04710	e5903000	 ldr         r3, [r0]
  04714	e0833002	 add         r3, r3, r2
  04718	e2831002	 add         r1, r3, #2
  0471c	e5d13001	 ldrb        r3, [r1, #1]
  04720	e1a03403	 mov         r3, r3, lsl #8
  04724	e1a02803	 mov         r2, r3, lsl #16
  04728	e1a02822	 mov         r2, r2, lsr #16
  0472c	e5d13000	 ldrb        r3, [r1]
  04730	e1833002	 orr         r3, r3, r2
  04734	e3833008	 orr         r3, r3, #8
  04738	e1a0e803	 mov         lr, r3, lsl #16
  0473c	e1a0e82e	 mov         lr, lr, lsr #16
  04740	e59d3010	 ldr         r3, [sp, #0x10]
  04744	e283001c	 add         r0, r3, #0x1C
  04748	e5dd300f	 ldrb        r3, [sp, #0xF]
  0474c	e203100f	 and         r1, r3, #0xF
  04750	e3a03010	 mov         r3, #0x10
  04754	e0020391	 mul         r2, r1, r3
  04758	e5903000	 ldr         r3, [r0]
  0475c	e0833002	 add         r3, r3, r2
  04760	e2832002	 add         r2, r3, #2
  04764	e1a0300e	 mov         r3, lr
  04768	e5c23000	 strb        r3, [r2]
  0476c	e1a03423	 mov         r3, r3, lsr #8
  04770	e5c23001	 strb        r3, [r2, #1]

; 1586 : 
; 1587 :                 DWORD txcsr = (TXCSR_H_AutoSet|TXCSR_H_DMAReqEn|TXCSR_H_FrcDataTog|TXCSR_H_Mode);

  04774	e3a03b2e	 mov         r3, #0x2E, 22
  04778	e58d3014	 str         r3, [sp, #0x14]

; 1588 :                 CLRREG16(&pOTG->pUsbCsrRegs->ep[USB_ENDPOINT(mappedEP)].CSR.TxCSR, txcsr);

  0477c	e59d3010	 ldr         r3, [sp, #0x10]
  04780	e283001c	 add         r0, r3, #0x1C
  04784	e5dd300f	 ldrb        r3, [sp, #0xF]
  04788	e203100f	 and         r1, r3, #0xF
  0478c	e3a03010	 mov         r3, #0x10
  04790	e0020391	 mul         r2, r1, r3
  04794	e5903000	 ldr         r3, [r0]
  04798	e0833002	 add         r3, r3, r2
  0479c	e2831002	 add         r1, r3, #2
  047a0	e5d13001	 ldrb        r3, [r1, #1]
  047a4	e1a03403	 mov         r3, r3, lsl #8
  047a8	e1a02803	 mov         r2, r3, lsl #16
  047ac	e1a02822	 mov         r2, r2, lsr #16
  047b0	e5d13000	 ldrb        r3, [r1]
  047b4	e1832002	 orr         r2, r3, r2
  047b8	e59d3014	 ldr         r3, [sp, #0x14]
  047bc	e1e03003	 mvn         r3, r3
  047c0	e0023003	 and         r3, r2, r3
  047c4	e1a0e803	 mov         lr, r3, lsl #16
  047c8	e1a0e82e	 mov         lr, lr, lsr #16
  047cc	e59d3010	 ldr         r3, [sp, #0x10]
  047d0	e283001c	 add         r0, r3, #0x1C
  047d4	e5dd300f	 ldrb        r3, [sp, #0xF]
  047d8	e203100f	 and         r1, r3, #0xF
  047dc	e3a03010	 mov         r3, #0x10
  047e0	e0020391	 mul         r2, r1, r3
  047e4	e5903000	 ldr         r3, [r0]
  047e8	e0833002	 add         r3, r3, r2
  047ec	e2832002	 add         r2, r3, #2
  047f0	e1a0300e	 mov         r3, lr
  047f4	e5c23000	 strb        r3, [r2]
  047f8	e1a03423	 mov         r3, r3, lsr #8
  047fc	e5c23001	 strb        r3, [r2, #1]

; 1589 : 
; 1590 :             }
; 1591 :             else

  04800	ea000060	 b           |$LN1@ReleasePhy|
  04804		 |$LN2@ReleasePhy|

; 1592 :             {
; 1593 :                 SETREG16(&pOTG->pUsbCsrRegs->ep[USB_ENDPOINT(mappedEP)].RxCSR, RXCSR_H_FlushFIFO);            

  04804	e59d3010	 ldr         r3, [sp, #0x10]
  04808	e283001c	 add         r0, r3, #0x1C
  0480c	e5dd300f	 ldrb        r3, [sp, #0xF]
  04810	e203100f	 and         r1, r3, #0xF
  04814	e3a03010	 mov         r3, #0x10
  04818	e0020391	 mul         r2, r1, r3
  0481c	e5903000	 ldr         r3, [r0]
  04820	e0833002	 add         r3, r3, r2
  04824	e2831006	 add         r1, r3, #6
  04828	e5d13001	 ldrb        r3, [r1, #1]
  0482c	e1a03403	 mov         r3, r3, lsl #8
  04830	e1a02803	 mov         r2, r3, lsl #16
  04834	e1a02822	 mov         r2, r2, lsr #16
  04838	e5d13000	 ldrb        r3, [r1]
  0483c	e1833002	 orr         r3, r3, r2
  04840	e3833010	 orr         r3, r3, #0x10
  04844	e1a0e803	 mov         lr, r3, lsl #16
  04848	e1a0e82e	 mov         lr, lr, lsr #16
  0484c	e59d3010	 ldr         r3, [sp, #0x10]
  04850	e283001c	 add         r0, r3, #0x1C
  04854	e5dd300f	 ldrb        r3, [sp, #0xF]
  04858	e203100f	 and         r1, r3, #0xF
  0485c	e3a03010	 mov         r3, #0x10
  04860	e0020391	 mul         r2, r1, r3
  04864	e5903000	 ldr         r3, [r0]
  04868	e0833002	 add         r3, r3, r2
  0486c	e2832006	 add         r2, r3, #6
  04870	e1a0300e	 mov         r3, lr
  04874	e5c23000	 strb        r3, [r2]
  04878	e1a03423	 mov         r3, r3, lsr #8
  0487c	e5c23001	 strb        r3, [r2, #1]

; 1594 :                 SETREG16(&pOTG->pUsbCsrRegs->ep[USB_ENDPOINT(mappedEP)].RxCSR, RXCSR_H_FlushFIFO);            

  04880	e59d3010	 ldr         r3, [sp, #0x10]
  04884	e283001c	 add         r0, r3, #0x1C
  04888	e5dd300f	 ldrb        r3, [sp, #0xF]
  0488c	e203100f	 and         r1, r3, #0xF
  04890	e3a03010	 mov         r3, #0x10
  04894	e0020391	 mul         r2, r1, r3
  04898	e5903000	 ldr         r3, [r0]
  0489c	e0833002	 add         r3, r3, r2
  048a0	e2831006	 add         r1, r3, #6
  048a4	e5d13001	 ldrb        r3, [r1, #1]
  048a8	e1a03403	 mov         r3, r3, lsl #8
  048ac	e1a02803	 mov         r2, r3, lsl #16
  048b0	e1a02822	 mov         r2, r2, lsr #16
  048b4	e5d13000	 ldrb        r3, [r1]
  048b8	e1833002	 orr         r3, r3, r2
  048bc	e3833010	 orr         r3, r3, #0x10
  048c0	e1a0e803	 mov         lr, r3, lsl #16
  048c4	e1a0e82e	 mov         lr, lr, lsr #16
  048c8	e59d3010	 ldr         r3, [sp, #0x10]
  048cc	e283001c	 add         r0, r3, #0x1C
  048d0	e5dd300f	 ldrb        r3, [sp, #0xF]
  048d4	e203100f	 and         r1, r3, #0xF
  048d8	e3a03010	 mov         r3, #0x10
  048dc	e0020391	 mul         r2, r1, r3
  048e0	e5903000	 ldr         r3, [r0]
  048e4	e0833002	 add         r3, r3, r2
  048e8	e2832006	 add         r2, r3, #6
  048ec	e1a0300e	 mov         r3, lr
  048f0	e5c23000	 strb        r3, [r2]
  048f4	e1a03423	 mov         r3, r3, lsr #8
  048f8	e5c23001	 strb        r3, [r2, #1]

; 1595 : 
; 1596 :                 DWORD rxcsr = (RXCSR_H_AutoClr|RXCSR_H_AutoReq|RXCSR_H_DMAReqEn);

  048fc	e3a03a0e	 mov         r3, #0xE, 20
  04900	e58d3018	 str         r3, [sp, #0x18]

; 1597 :                 CLRREG16(&pOTG->pUsbCsrRegs->ep[USB_ENDPOINT(mappedEP)].RxCSR, rxcsr);

  04904	e59d3010	 ldr         r3, [sp, #0x10]
  04908	e283001c	 add         r0, r3, #0x1C
  0490c	e5dd300f	 ldrb        r3, [sp, #0xF]
  04910	e203100f	 and         r1, r3, #0xF
  04914	e3a03010	 mov         r3, #0x10
  04918	e0020391	 mul         r2, r1, r3
  0491c	e5903000	 ldr         r3, [r0]
  04920	e0833002	 add         r3, r3, r2
  04924	e2831006	 add         r1, r3, #6
  04928	e5d13001	 ldrb        r3, [r1, #1]
  0492c	e1a03403	 mov         r3, r3, lsl #8
  04930	e1a02803	 mov         r2, r3, lsl #16
  04934	e1a02822	 mov         r2, r2, lsr #16
  04938	e5d13000	 ldrb        r3, [r1]
  0493c	e1832002	 orr         r2, r3, r2
  04940	e59d3018	 ldr         r3, [sp, #0x18]
  04944	e1e03003	 mvn         r3, r3
  04948	e0023003	 and         r3, r2, r3
  0494c	e1a0e803	 mov         lr, r3, lsl #16
  04950	e1a0e82e	 mov         lr, lr, lsr #16
  04954	e59d3010	 ldr         r3, [sp, #0x10]
  04958	e283001c	 add         r0, r3, #0x1C
  0495c	e5dd300f	 ldrb        r3, [sp, #0xF]
  04960	e203100f	 and         r1, r3, #0xF
  04964	e3a03010	 mov         r3, #0x10
  04968	e0020391	 mul         r2, r1, r3
  0496c	e5903000	 ldr         r3, [r0]
  04970	e0833002	 add         r3, r3, r2
  04974	e2832006	 add         r2, r3, #6
  04978	e1a0300e	 mov         r3, lr
  0497c	e5c23000	 strb        r3, [r2]
  04980	e1a03423	 mov         r3, r3, lsr #8
  04984	e5c23001	 strb        r3, [r2, #1]
  04988		 |$LN1@ReleasePhy|

; 1598 :             }
; 1599 :             LeaveCriticalSection(&pOTG->regCS); 

  04988	e59d3010	 ldr         r3, [sp, #0x10]
  0498c	e2830038	 add         r0, r3, #0x38
  04990	eb000000	 bl          LeaveCriticalSection
  04994		 |$LN3@ReleasePhy|

; 1600 :         }
; 1601 : 
; 1602 :             DEBUGMSG(ZONE_DEBUG, (TEXT("ReleasePhysicalEndPoint for EP 0x%x Device 0x%x -> Mapped %d [%s]\r\n"),
; 1603 :             endptDesc.bEndpointAddress, pPipe->GetReservedDeviceAddr(), mappedEP, isOut?TEXT("OUT"):TEXT("IN")));

  04994	ea000019	 b           |$LN15@ReleasePhy|
  04998	e5dd3004	 ldrb        r3, [sp, #4]
  0499c	e3530000	 cmp         r3, #0
  049a0	0a000002	 beq         |$LN13@ReleasePhy|
  049a4	e59f3088	 ldr         r3, [pc, #0x88]
  049a8	e58d3030	 str         r3, [sp, #0x30]
  049ac	ea000001	 b           |$LN14@ReleasePhy|
  049b0		 |$LN13@ReleasePhy|
  049b0	e59f3078	 ldr         r3, [pc, #0x78]
  049b4	e58d3030	 str         r3, [sp, #0x30]
  049b8		 |$LN14@ReleasePhy|
  049b8	e59d3048	 ldr         r3, [sp, #0x48]
  049bc	e5933000	 ldr         r3, [r3]
  049c0	e2833028	 add         r3, r3, #0x28
  049c4	e59d0048	 ldr         r0, [sp, #0x48]
  049c8	e5933000	 ldr         r3, [r3]
  049cc	e1a0e00f	 mov         lr, pc
  049d0	e12fff13	 bx          r3
  049d4	e5cd0034	 strb        r0, [sp, #0x34]
  049d8	e59d3030	 ldr         r3, [sp, #0x30]
  049dc	e58d3000	 str         r3, [sp]
  049e0	e5dd300f	 ldrb        r3, [sp, #0xF]
  049e4	e5dd2034	 ldrb        r2, [sp, #0x34]
  049e8	e5dd100a	 ldrb        r1, [sp, #0xA]
  049ec	e59f0038	 ldr         r0, [pc, #0x38]
  049f0	eb000000	 bl          NKDbgPrintfW
  049f4	e3a03001	 mov         r3, #1
  049f8	e58d3038	 str         r3, [sp, #0x38]
  049fc	ea000001	 b           |$LN16@ReleasePhy|
  04a00		 |$LN15@ReleasePhy|
  04a00	e3a03000	 mov         r3, #0
  04a04	e58d3038	 str         r3, [sp, #0x38]
  04a08		 |$LN16@ReleasePhy|
  04a08		 |$LN6@ReleasePhy|

; 1604 :     }
; 1605 : 
; 1606 :     LeaveCriticalSection(&m_csEndPoint);

  04a08	e59d3044	 ldr         r3, [sp, #0x44]
  04a0c	e2830f9b	 add         r0, r3, #0x9B, 30
  04a10	eb000000	 bl          LeaveCriticalSection

; 1607 :     return TRUE;

  04a14	e3a03001	 mov         r3, #1
  04a18	e58d301c	 str         r3, [sp, #0x1C]
  04a1c		 |$LN9@ReleasePhy|

; 1608 : }

  04a1c	e59d001c	 ldr         r0, [sp, #0x1C]
  04a20	e28dd03c	 add         sp, sp, #0x3C
  04a24	e89d6000	 ldmia       sp, {sp, lr}
  04a28	e12fff1e	 bx          lr
  04a2c		 |$LN20@ReleasePhy|
  04a2c		 |$LN21@ReleasePhy|
  04a2c	00000000	 DCD         |??_C@_1II@BAJELDOI@?$AAR?$AAe?$AAl?$AAe?$AAa?$AAs?$AAe?$AAP?$AAh?$AAy?$AAs?$AAi?$AAc?$AAa?$AAl?$AAE?$AAn?$AAd?$AAP?$AAo?$AAi?$AAn?$AAt?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAE?$AAP?$AA?5?$AA0@|
  04a30		 |$LN22@ReleasePhy|
  04a30	00000000	 DCD         |??_C@_15BNKBCKPG@?$AAI?$AAN?$AA?$AA@|
  04a34		 |$LN23@ReleasePhy|
  04a34	00000000	 DCD         |??_C@_17HCEMPBGG@?$AAO?$AAU?$AAT?$AA?$AA@|
  04a38		 |$M45127|

			 ENDP  ; |?ReleasePhysicalEndPoint@CHW@@QAAHPAVCPipe@@HH@Z|, CHW::ReleasePhysicalEndPoint

; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\musb\musbhcd\musbmhdrc\cpipe.h

  00000			 AREA	 |.pdata|, PDATA
|$T45139| DCD	|$LN5@GetMappedE|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetMappedEndPoint@CPipe@@QAAEXZ| PROC ; CPipe::GetMappedEndPoint

; 103  :     UCHAR   GetMappedEndPoint(void) { return m_mappedEndpoint; };

  00000		 |$LN5@GetMappedE|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M45136|
  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e2833058	 add         r3, r3, #0x58
  00018	e5d33000	 ldrb        r3, [r3]
  0001c	e5cd3000	 strb        r3, [sp]
  00020	e5dd0000	 ldrb        r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M45137|

			 ENDP  ; |?GetMappedEndPoint@CPipe@@QAAEXZ|, CPipe::GetMappedEndPoint

	EXPORT	|??_C@_1IC@FMFDLJKG@?$AAG?$AAe?$AAt?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAT?$AAo?$AAg?$AAg?$AAl?$AAe?$AA?5?$AAb?$AAi?$AAt?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAm?$AAa?$AAp?$AAp?$AAe?$AAd?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EE@EMOOPEAM@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAG?$AAe?$AAt?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAT?$AAo?$AAg?$AAg?$AAl?$AAe?$AAB?$AAi?$AAt?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AN@| [ DATA ] ; `string'
	EXPORT	|?GetCurrentToggleBit@CHW@@QAAEEE@Z|	; CHW::GetCurrentToggleBit

  00110			 AREA	 |.pdata|, PDATA
|$T45155| DCD	|$LN16@GetCurrent|
	DCD	0x40006804
; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\musb\musbhcd\musbmhdrc\chw.cpp

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IC@FMFDLJKG@?$AAG?$AAe?$AAt?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAT?$AAo?$AAg?$AAg?$AAl?$AAe?$AA?5?$AAb?$AAi?$AAt?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAm?$AAa?$AAp?$AAp?$AAe?$AAd?$AA?5@| DCB "G"
	DCB	0x0, "e", 0x0, "t", 0x0, "C", 0x0, "u", 0x0, "r", 0x0, "r"
	DCB	0x0, "e", 0x0, "n", 0x0, "t", 0x0, "T", 0x0, "o", 0x0, "g"
	DCB	0x0, "g", 0x0, "l", 0x0, "e", 0x0, " ", 0x0, "b", 0x0, "i"
	DCB	0x0, "t", 0x0, " ", 0x0, "f", 0x0, "o", 0x0, "r", 0x0, " "
	DCB	0x0, "m", 0x0, "a", 0x0, "p", 0x0, "p", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "E", 0x0, "P", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, " ", 0x0, "(", 0x0, "%", 0x0, "s", 0x0, ")", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "D", 0x0, "a", 0x0, "t", 0x0, "a"
	DCB	0x0, "T", 0x0, "o", 0x0, "g", 0x0, "g", 0x0, "l", 0x0, "e"
	DCB	0x0, " ", 0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x"
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EE@EMOOPEAM@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAG?$AAe?$AAt?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAT?$AAo?$AAg?$AAg?$AAl?$AAe?$AAB?$AAi?$AAt?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AN@| DCB "C"
	DCB	0x0, "H", 0x0, "W", 0x0, ":", 0x0, ":", 0x0, "G", 0x0, "e"
	DCB	0x0, "t", 0x0, "C", 0x0, "u", 0x0, "r", 0x0, "r", 0x0, "e"
	DCB	0x0, "n", 0x0, "t", 0x0, "T", 0x0, "o", 0x0, "g", 0x0, "g"
	DCB	0x0, "l", 0x0, "e", 0x0, "B", 0x0, "i", 0x0, "t", 0x0, " "
	DCB	0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  04a38			 AREA	 |.text|, CODE, ARM

  04a38		 |?GetCurrentToggleBit@CHW@@QAAEEE@Z| PROC ; CHW::GetCurrentToggleBit

; 1617 : {

  04a38		 |$LN16@GetCurrent|
  04a38	e1a0c00d	 mov         r12, sp
  04a3c	e92d0007	 stmdb       sp!, {r0 - r2}
  04a40	e92d5000	 stmdb       sp!, {r12, lr}
  04a44	e24dd020	 sub         sp, sp, #0x20
  04a48		 |$M45152|

; 1618 :     DWORD DataToggle;
; 1619 :     PHSMUSB_T pOTG;        
; 1620 : 
; 1621 :     pOTG = (PHSMUSB_T)GetOTGContext();

  04a48	e59d0028	 ldr         r0, [sp, #0x28]
  04a4c	eb000000	 bl          |?GetOTGContext@CHcd@@QAAPAXXZ|
  04a50	e58d000c	 str         r0, [sp, #0xC]
  04a54	e59d300c	 ldr         r3, [sp, #0xC]
  04a58	e58d3004	 str         r3, [sp, #4]

; 1622 :     if (pOTG == NULL)

  04a5c	e59d3004	 ldr         r3, [sp, #4]
  04a60	e3530000	 cmp         r3, #0
  04a64	1a00000d	 bne         |$LN3@GetCurrent|

; 1623 :     {
; 1624 :         DEBUGMSG(ZONE_ERROR, (TEXT("CHW::GetCurrentToggleBit failed\r\n")));

  04a68	e59f3164	 ldr         r3, [pc, #0x164]
  04a6c	e5933440	 ldr         r3, [r3, #0x440]
  04a70	e3130901	 tst         r3, #1, 18
  04a74	0a000004	 beq         |$LN6@GetCurrent|
  04a78	e59f0150	 ldr         r0, [pc, #0x150]
  04a7c	eb000000	 bl          NKDbgPrintfW
  04a80	e3a03001	 mov         r3, #1
  04a84	e58d3010	 str         r3, [sp, #0x10]
  04a88	ea000001	 b           |$LN7@GetCurrent|
  04a8c		 |$LN6@GetCurrent|
  04a8c	e3a03000	 mov         r3, #0
  04a90	e58d3010	 str         r3, [sp, #0x10]
  04a94		 |$LN7@GetCurrent|

; 1625 :         return 0xff;

  04a94	e3a030ff	 mov         r3, #0xFF
  04a98	e5cd3008	 strb        r3, [sp, #8]
  04a9c	ea000044	 b           |$LN4@GetCurrent|
  04aa0		 |$LN3@GetCurrent|

; 1626 :     }  
; 1627 : 
; 1628 :     if (isIn)

  04aa0	e5dd3030	 ldrb        r3, [sp, #0x30]
  04aa4	e3530000	 cmp         r3, #0
  04aa8	0a000011	 beq         |$LN2@GetCurrent|

; 1629 :     {
; 1630 :         DataToggle = (INREG16(&pOTG->pUsbCsrRegs->ep[USB_ENDPOINT(mappedEP)].RxCSR) & RXCSR_H_DataToggle);

  04aac	e59d3004	 ldr         r3, [sp, #4]
  04ab0	e283001c	 add         r0, r3, #0x1C
  04ab4	e5dd302c	 ldrb        r3, [sp, #0x2C]
  04ab8	e203100f	 and         r1, r3, #0xF
  04abc	e3a03010	 mov         r3, #0x10
  04ac0	e0020391	 mul         r2, r1, r3
  04ac4	e5903000	 ldr         r3, [r0]
  04ac8	e0833002	 add         r3, r3, r2
  04acc	e2831006	 add         r1, r3, #6
  04ad0	e5d13001	 ldrb        r3, [r1, #1]
  04ad4	e1a03403	 mov         r3, r3, lsl #8
  04ad8	e1a02803	 mov         r2, r3, lsl #16
  04adc	e1a02822	 mov         r2, r2, lsr #16
  04ae0	e5d13000	 ldrb        r3, [r1]
  04ae4	e1833002	 orr         r3, r3, r2
  04ae8	e2033c02	 and         r3, r3, #2, 24
  04aec	e58d3000	 str         r3, [sp]

; 1631 :     }
; 1632 :     else

  04af0	ea000010	 b           |$LN1@GetCurrent|
  04af4		 |$LN2@GetCurrent|

; 1633 :     {
; 1634 :         DataToggle = (INREG16(&pOTG->pUsbCsrRegs->ep[USB_ENDPOINT(mappedEP)].CSR.TxCSR) & TXCSR_H_DataToggle);

  04af4	e59d3004	 ldr         r3, [sp, #4]
  04af8	e283001c	 add         r0, r3, #0x1C
  04afc	e5dd302c	 ldrb        r3, [sp, #0x2C]
  04b00	e203100f	 and         r1, r3, #0xF
  04b04	e3a03010	 mov         r3, #0x10
  04b08	e0020391	 mul         r2, r1, r3
  04b0c	e5903000	 ldr         r3, [r0]
  04b10	e0833002	 add         r3, r3, r2
  04b14	e2831002	 add         r1, r3, #2
  04b18	e5d13001	 ldrb        r3, [r1, #1]
  04b1c	e1a03403	 mov         r3, r3, lsl #8
  04b20	e1a02803	 mov         r2, r3, lsl #16
  04b24	e1a02822	 mov         r2, r2, lsr #16
  04b28	e5d13000	 ldrb        r3, [r1]
  04b2c	e1833002	 orr         r3, r3, r2
  04b30	e2033c01	 and         r3, r3, #1, 24
  04b34	e58d3000	 str         r3, [sp]
  04b38		 |$LN1@GetCurrent|

; 1635 : 
; 1636 :     }
; 1637 : 
; 1638 :     DEBUGMSG(ZONE_DEBUG, (TEXT("GetCurrentToggle bit for mapped EP %d (%s) = DataToggle (0x%x)\r\n"),
; 1639 :         USB_ENDPOINT(mappedEP), isIn? TEXT("IN"):TEXT("OUT"), DataToggle));

  04b38	ea000010	 b           |$LN10@GetCurrent|
  04b3c	e5dd3030	 ldrb        r3, [sp, #0x30]
  04b40	e3530000	 cmp         r3, #0
  04b44	0a000002	 beq         |$LN8@GetCurrent|
  04b48	e59f307c	 ldr         r3, [pc, #0x7C]
  04b4c	e58d3014	 str         r3, [sp, #0x14]
  04b50	ea000001	 b           |$LN9@GetCurrent|
  04b54		 |$LN8@GetCurrent|
  04b54	e59f306c	 ldr         r3, [pc, #0x6C]
  04b58	e58d3014	 str         r3, [sp, #0x14]
  04b5c		 |$LN9@GetCurrent|
  04b5c	e59d3000	 ldr         r3, [sp]
  04b60	e59d2014	 ldr         r2, [sp, #0x14]
  04b64	e5dd102c	 ldrb        r1, [sp, #0x2C]
  04b68	e201100f	 and         r1, r1, #0xF
  04b6c	e59f0050	 ldr         r0, [pc, #0x50]
  04b70	eb000000	 bl          NKDbgPrintfW
  04b74	e3a03001	 mov         r3, #1
  04b78	e58d3018	 str         r3, [sp, #0x18]
  04b7c	ea000001	 b           |$LN11@GetCurrent|
  04b80		 |$LN10@GetCurrent|
  04b80	e3a03000	 mov         r3, #0
  04b84	e58d3018	 str         r3, [sp, #0x18]
  04b88		 |$LN11@GetCurrent|

; 1640 : 
; 1641 :     return ((DataToggle != 0)? 1: 0);

  04b88	e59d3000	 ldr         r3, [sp]
  04b8c	e3530000	 cmp         r3, #0
  04b90	0a000002	 beq         |$LN12@GetCurrent|
  04b94	e3a03001	 mov         r3, #1
  04b98	e58d301c	 str         r3, [sp, #0x1C]
  04b9c	ea000001	 b           |$LN13@GetCurrent|
  04ba0		 |$LN12@GetCurrent|
  04ba0	e3a03000	 mov         r3, #0
  04ba4	e58d301c	 str         r3, [sp, #0x1C]
  04ba8		 |$LN13@GetCurrent|
  04ba8	e59d301c	 ldr         r3, [sp, #0x1C]
  04bac	e20330ff	 and         r3, r3, #0xFF
  04bb0	e5cd3008	 strb        r3, [sp, #8]
  04bb4		 |$LN4@GetCurrent|

; 1642 : }

  04bb4	e5dd0008	 ldrb        r0, [sp, #8]
  04bb8	e28dd020	 add         sp, sp, #0x20
  04bbc	e89d6000	 ldmia       sp, {sp, lr}
  04bc0	e12fff1e	 bx          lr
  04bc4		 |$LN17@GetCurrent|
  04bc4		 |$LN18@GetCurrent|
  04bc4	00000000	 DCD         |??_C@_1IC@FMFDLJKG@?$AAG?$AAe?$AAt?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAT?$AAo?$AAg?$AAg?$AAl?$AAe?$AA?5?$AAb?$AAi?$AAt?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAm?$AAa?$AAp?$AAp?$AAe?$AAd?$AA?5@|
  04bc8		 |$LN19@GetCurrent|
  04bc8	00000000	 DCD         |??_C@_17HCEMPBGG@?$AAO?$AAU?$AAT?$AA?$AA@|
  04bcc		 |$LN20@GetCurrent|
  04bcc	00000000	 DCD         |??_C@_15BNKBCKPG@?$AAI?$AAN?$AA?$AA@|
  04bd0		 |$LN21@GetCurrent|
  04bd0	00000000	 DCD         |??_C@_1EE@EMOOPEAM@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAG?$AAe?$AAt?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAT?$AAo?$AAg?$AAg?$AAl?$AAe?$AAB?$AAi?$AAt?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AN@|
  04bd4		 |$LN22@GetCurrent|
  04bd4	00000000	 DCD         |dpCurSettings|
  04bd8		 |$M45153|

			 ENDP  ; |?GetCurrentToggleBit@CHW@@QAAEEE@Z|, CHW::GetCurrentToggleBit


  00118			 AREA	 |.pdata|, PDATA
|$T45167| DCD	|$LN7@SignalHubC|
	DCD	0x40001604
; Function compile flags: /Odtp

  04bd8			 AREA	 |.text|, CODE, ARM

  04bd8		 |?SignalHubChangeEvent@CHW@@UAAHH@Z| PROC ; CHW::SignalHubChangeEvent

; 1649 : {

  04bd8		 |$LN7@SignalHubC|
  04bd8	e1a0c00d	 mov         r12, sp
  04bdc	e92d0003	 stmdb       sp!, {r0, r1}
  04be0	e92d5000	 stmdb       sp!, {r12, lr}
  04be4	e24dd004	 sub         sp, sp, #4
  04be8		 |$M45164|

; 1650 :     if (fConnect)

  04be8	e59d3010	 ldr         r3, [sp, #0x10]
  04bec	e3530000	 cmp         r3, #0
  04bf0	0a000004	 beq         |$LN2@SignalHubC|

; 1651 :         SetEvent(m_hUsbHubConnectEvent); 

  04bf4	e59d300c	 ldr         r3, [sp, #0xC]
  04bf8	e2833e1b	 add         r3, r3, #0x1B, 28
  04bfc	e5930000	 ldr         r0, [r3]
  04c00	eb000000	 bl          SetEvent

; 1652 :     else

  04c04	ea000003	 b           |$LN1@SignalHubC|
  04c08		 |$LN2@SignalHubC|

; 1653 :         SetEvent(m_hUsbHubDisconnectEvent);

  04c08	e59d300c	 ldr         r3, [sp, #0xC]
  04c0c	e2833f6d	 add         r3, r3, #0x6D, 30
  04c10	e5930000	 ldr         r0, [r3]
  04c14	eb000000	 bl          SetEvent
  04c18		 |$LN1@SignalHubC|

; 1654 :     return TRUE;

  04c18	e3a03001	 mov         r3, #1
  04c1c	e58d3000	 str         r3, [sp]

; 1655 : };

  04c20	e59d0000	 ldr         r0, [sp]
  04c24	e28dd004	 add         sp, sp, #4
  04c28	e89d6000	 ldmia       sp, {sp, lr}
  04c2c	e12fff1e	 bx          lr
  04c30		 |$M45165|

			 ENDP  ; |?SignalHubChangeEvent@CHW@@UAAHH@Z|, CHW::SignalHubChangeEvent

	EXPORT	|??_C@_1EK@NCGOACGE@?$AAS?$AAe?$AAt?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAS?$AAy?$AAs?$AAI?$AAn?$AAt?$AAr?$AA?5?$AA0?$AAx@| [ DATA ] ; `string'
	EXPORT	|?ResumeHostController@CHW@@AAAXXZ|	; CHW::ResumeHostController
	EXPORT	|?SuspendHostController@CHW@@AAAXXZ|	; CHW::SuspendHostController
	EXPORT	|??_C@_1DA@DOEFGKM@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAP?$AAo?$AAw?$AAe?$AAr?$AAM?$AAg?$AAm?$AAt?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|SetInterruptEvent|

  00120			 AREA	 |.pdata|, PDATA
|$T45176| DCD	|$LN15@PowerMgmtC|
	DCD	0x40005404

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EK@NCGOACGE@?$AAS?$AAe?$AAt?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAS?$AAy?$AAs?$AAI?$AAn?$AAt?$AAr?$AA?5?$AA0?$AAx@| DCB "S"
	DCB	0x0, "e", 0x0, "t", 0x0, "I", 0x0, "n", 0x0, "t", 0x0, "e"
	DCB	0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t", 0x0, "E"
	DCB	0x0, "v", 0x0, "e", 0x0, "n", 0x0, "t", 0x0, " ", 0x0, "f"
	DCB	0x0, "o", 0x0, "r", 0x0, " ", 0x0, "S", 0x0, "y", 0x0, "s"
	DCB	0x0, "I", 0x0, "n", 0x0, "t", 0x0, "r", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@DOEFGKM@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAP?$AAo?$AAw?$AAe?$AAr?$AAM?$AAg?$AAm?$AAt?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "C"
	DCB	0x0, "H", 0x0, "W", 0x0, ":", 0x0, ":", 0x0, "P", 0x0, "o"
	DCB	0x0, "w", 0x0, "e", 0x0, "r", 0x0, "M", 0x0, "g", 0x0, "m"
	DCB	0x0, "t", 0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l"
	DCB	0x0, "e", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  04c30			 AREA	 |.text|, CODE, ARM

  04c30		 |?PowerMgmtCallback@CHW@@UAAXH@Z| PROC	; CHW::PowerMgmtCallback

; 1669 : {

  04c30		 |$LN15@PowerMgmtC|
  04c30	e1a0c00d	 mov         r12, sp
  04c34	e92d0003	 stmdb       sp!, {r0, r1}
  04c38	e92d5000	 stmdb       sp!, {r12, lr}
  04c3c	e24dd014	 sub         sp, sp, #0x14
  04c40		 |$M45173|

; 1670 : 
; 1671 :     PHSMUSB_T pOTG;            
; 1672 : 
; 1673 :     pOTG = (PHSMUSB_T)GetOTGContext();

  04c40	e59d001c	 ldr         r0, [sp, #0x1C]
  04c44	eb000000	 bl          |?GetOTGContext@CHcd@@QAAPAXXZ|
  04c48	e58d0008	 str         r0, [sp, #8]
  04c4c	e59d3008	 ldr         r3, [sp, #8]
  04c50	e58d3000	 str         r3, [sp]

; 1674 :     if (pOTG == NULL)

  04c54	e59d3000	 ldr         r3, [sp]
  04c58	e3530000	 cmp         r3, #0
  04c5c	1a00000b	 bne         |$LN6@PowerMgmtC|

; 1675 :     {
; 1676 :         DEBUGMSG(ZONE_ERROR, (TEXT("CHW::PowerMgmt failed\r\n")));

  04c60	e59f3114	 ldr         r3, [pc, #0x114]
  04c64	e5933440	 ldr         r3, [r3, #0x440]
  04c68	e3130901	 tst         r3, #1, 18
  04c6c	0a000004	 beq         |$LN9@PowerMgmtC|
  04c70	e59f0100	 ldr         r0, [pc, #0x100]
  04c74	eb000000	 bl          NKDbgPrintfW
  04c78	e3a03001	 mov         r3, #1
  04c7c	e58d300c	 str         r3, [sp, #0xC]
  04c80	ea000001	 b           |$LN10@PowerMgmtC|
  04c84		 |$LN9@PowerMgmtC|
  04c84	e3a03000	 mov         r3, #0
  04c88	e58d300c	 str         r3, [sp, #0xC]
  04c8c		 |$LN10@PowerMgmtC|

; 1677 :         return;

  04c8c	ea000035	 b           |$LN7@PowerMgmtC|
  04c90		 |$LN6@PowerMgmtC|

; 1678 :     }  
; 1679 : 
; 1680 :     if (pOTG->operateMode != HOST_MODE)

  04c90	e59d3000	 ldr         r3, [sp]
  04c94	e2833035	 add         r3, r3, #0x35
  04c98	e5d33000	 ldrb        r3, [r3]
  04c9c	e3530002	 cmp         r3, #2
  04ca0	0a000000	 beq         |$LN5@PowerMgmtC|

; 1681 :         return;

  04ca4	ea00002f	 b           |$LN7@PowerMgmtC|
  04ca8		 |$LN5@PowerMgmtC|

; 1682 : 
; 1683 :     SMHCDPdd *pPdd = (SMHCDPdd *)pOTG->pContext[HOST_MODE-1];

  04ca8	e59d3000	 ldr         r3, [sp]
  04cac	e2833014	 add         r3, r3, #0x14
  04cb0	e5933000	 ldr         r3, [r3]
  04cb4	e58d3004	 str         r3, [sp, #4]

; 1684 :     if ( fOff )

  04cb8	e59d3020	 ldr         r3, [sp, #0x20]
  04cbc	e3530000	 cmp         r3, #0
  04cc0	0a00000d	 beq         |$LN4@PowerMgmtC|

; 1685 :     {
; 1686 :         SuspendHostController();

  04cc4	e59d001c	 ldr         r0, [sp, #0x1C]
  04cc8	eb000000	 bl          |?SuspendHostController@CHW@@AAAXXZ|

; 1687 :         if (pPdd->m_lpUSBClockProc)

  04ccc	e59d3004	 ldr         r3, [sp, #4]
  04cd0	e2833f96	 add         r3, r3, #0x96, 30
  04cd4	e5933000	 ldr         r3, [r3]
  04cd8	e3530000	 cmp         r3, #0
  04cdc	0a000005	 beq         |$LN3@PowerMgmtC|

; 1688 :             pPdd->m_lpUSBClockProc(FALSE);        

  04ce0	e3a00000	 mov         r0, #0
  04ce4	e59d3004	 ldr         r3, [sp, #4]
  04ce8	e2833f96	 add         r3, r3, #0x96, 30
  04cec	e5933000	 ldr         r3, [r3]
  04cf0	e1a0e00f	 mov         lr, pc
  04cf4	e12fff13	 bx          r3
  04cf8		 |$LN3@PowerMgmtC|

; 1689 :     }
; 1690 :     else

  04cf8	ea00001a	 b           |$LN2@PowerMgmtC|
  04cfc		 |$LN4@PowerMgmtC|

; 1691 :     {   // resuming...
; 1692 :         if (pPdd->m_lpUSBClockProc)

  04cfc	e59d3004	 ldr         r3, [sp, #4]
  04d00	e2833f96	 add         r3, r3, #0x96, 30
  04d04	e5933000	 ldr         r3, [r3]
  04d08	e3530000	 cmp         r3, #0
  04d0c	0a000005	 beq         |$LN1@PowerMgmtC|

; 1693 :             pPdd->m_lpUSBClockProc(TRUE);

  04d10	e3a00001	 mov         r0, #1
  04d14	e59d3004	 ldr         r3, [sp, #4]
  04d18	e2833f96	 add         r3, r3, #0x96, 30
  04d1c	e5933000	 ldr         r3, [r3]
  04d20	e1a0e00f	 mov         lr, pc
  04d24	e12fff13	 bx          r3
  04d28		 |$LN1@PowerMgmtC|

; 1694 :         ResumeHostController();

  04d28	e59d001c	 ldr         r0, [sp, #0x1C]
  04d2c	eb000000	 bl          |?ResumeHostController@CHW@@AAAXXZ|

; 1695 :         DEBUGMSG(1, (TEXT("SetInterruptEvent for SysIntr 0x%x\r\n"), pOTG->dwSysIntr));

  04d30	e59d3000	 ldr         r3, [sp]
  04d34	e2833050	 add         r3, r3, #0x50
  04d38	e5931000	 ldr         r1, [r3]
  04d3c	e59f0030	 ldr         r0, [pc, #0x30]
  04d40	eb000000	 bl          NKDbgPrintfW
  04d44	e3a03001	 mov         r3, #1
  04d48	e58d3010	 str         r3, [sp, #0x10]
  04d4c	ea000001	 b           |$LN12@PowerMgmtC|
  04d50	e3a03000	 mov         r3, #0
  04d54	e58d3010	 str         r3, [sp, #0x10]
  04d58		 |$LN12@PowerMgmtC|

; 1696 :         SetInterruptEvent(pOTG->dwSysIntr);

  04d58	e59d3000	 ldr         r3, [sp]
  04d5c	e2833050	 add         r3, r3, #0x50
  04d60	e5930000	 ldr         r0, [r3]
  04d64	eb000000	 bl          SetInterruptEvent
  04d68		 |$LN2@PowerMgmtC|
  04d68		 |$LN7@PowerMgmtC|

; 1697 :     }
; 1698 :     
; 1699 :     return;
; 1700 : }

  04d68	e28dd014	 add         sp, sp, #0x14
  04d6c	e89d6000	 ldmia       sp, {sp, lr}
  04d70	e12fff1e	 bx          lr
  04d74		 |$LN16@PowerMgmtC|
  04d74		 |$LN17@PowerMgmtC|
  04d74	00000000	 DCD         |??_C@_1EK@NCGOACGE@?$AAS?$AAe?$AAt?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAS?$AAy?$AAs?$AAI?$AAn?$AAt?$AAr?$AA?5?$AA0?$AAx@|
  04d78		 |$LN18@PowerMgmtC|
  04d78	00000000	 DCD         |??_C@_1DA@DOEFGKM@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAP?$AAo?$AAw?$AAe?$AAr?$AAM?$AAg?$AAm?$AAt?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  04d7c		 |$LN19@PowerMgmtC|
  04d7c	00000000	 DCD         |dpCurSettings|
  04d80		 |$M45174|

			 ENDP  ; |?PowerMgmtCallback@CHW@@UAAXH@Z|, CHW::PowerMgmtCallback

	EXPORT	|??_C@_1DM@HBJCDAAN@?$AA?9?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAS?$AAu?$AAs?$AAp?$AAe?$AAn?$AAd?$AAH?$AAo?$AAs?$AAt?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DM@KCOIBNOM@?$AA?$CL?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAS?$AAu?$AAs?$AAp?$AAe?$AAn?$AAd?$AAH?$AAo?$AAs?$AAt?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00128			 AREA	 |.pdata|, PDATA
|$T45189| DCD	|$LN9@SuspendHos|
	DCD	0x40001904

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@HBJCDAAN@?$AA?9?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAS?$AAu?$AAs?$AAp?$AAe?$AAn?$AAd?$AAH?$AAo?$AAs?$AAt?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "C", 0x0, "H", 0x0, "W", 0x0, ":", 0x0, ":", 0x0, "S"
	DCB	0x0, "u", 0x0, "s", 0x0, "p", 0x0, "e", 0x0, "n", 0x0, "d"
	DCB	0x0, "H", 0x0, "o", 0x0, "s", 0x0, "t", 0x0, "C", 0x0, "o"
	DCB	0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o", 0x0, "l", 0x0, "l"
	DCB	0x0, "e", 0x0, "r", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@KCOIBNOM@?$AA?$CL?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAS?$AAu?$AAs?$AAp?$AAe?$AAn?$AAd?$AAH?$AAo?$AAs?$AAt?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "C", 0x0, "H", 0x0, "W", 0x0, ":", 0x0, ":", 0x0, "S"
	DCB	0x0, "u", 0x0, "s", 0x0, "p", 0x0, "e", 0x0, "n", 0x0, "d"
	DCB	0x0, "H", 0x0, "o", 0x0, "s", 0x0, "t", 0x0, "C", 0x0, "o"
	DCB	0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o", 0x0, "l", 0x0, "l"
	DCB	0x0, "e", 0x0, "r", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  04d80			 AREA	 |.text|, CODE, ARM

  04d80		 |?SuspendHostController@CHW@@AAAXXZ| PROC ; CHW::SuspendHostController

; 1702 : {

  04d80		 |$LN9@SuspendHos|
  04d80	e1a0c00d	 mov         r12, sp
  04d84	e92d0001	 stmdb       sp!, {r0}
  04d88	e92d5000	 stmdb       sp!, {r12, lr}
  04d8c	e24dd008	 sub         sp, sp, #8
  04d90		 |$M45186|

; 1703 :     DEBUGMSG(ZONE_DEBUG, (TEXT("+CHW::SuspendHostController\r\n")));

  04d90	ea000004	 b           |$LN3@SuspendHos|
  04d94	e59f0044	 ldr         r0, [pc, #0x44]
  04d98	eb000000	 bl          NKDbgPrintfW
  04d9c	e3a03001	 mov         r3, #1
  04da0	e58d3000	 str         r3, [sp]
  04da4	ea000001	 b           |$LN4@SuspendHos|
  04da8		 |$LN3@SuspendHos|
  04da8	e3a03000	 mov         r3, #0
  04dac	e58d3000	 str         r3, [sp]
  04db0		 |$LN4@SuspendHos|

; 1704 :     // Clock must have started already.
; 1705 :     // Procedure to do:
; 1706 :     // (1) Set the Suspend Bit on the Power D0
; 1707 :     // (2) Stop the USB Clock 
; 1708 : #if 0
; 1709 :     PHSMUSB_T pOTG;        
; 1710 : 
; 1711 :     pOTG = (PHSMUSB_T)GetOTGContext();
; 1712 :     if (pOTG == NULL)
; 1713 :     {
; 1714 :         DEBUGMSG(ZONE_ERROR, (TEXT("CHW::SuspendHostController failed\r\n")));
; 1715 :         return;
; 1716 :     }  
; 1717 : 
; 1718 :     //pOTG->dwPwrMgmt = MODE_SYSTEM_SUSPEND;
; 1719 :     // Clear the DEVCTL_SESSION at this point
; 1720 :     // This is to avoid the activation of HNP during suspend which does not suppose to do.    
; 1721 :     //CLRREG8(&pOTG->pUsbGenRegs->DevCtl, DEVCTL_SESSION);
; 1722 :     //SETREG8(&pOTG->pUsbGenRegs->Power, POWER_SUSPENDM);
; 1723 : 
; 1724 :     //Keep the transceiver on during system suspend and when a USB device is attached
; 1725 :     //SETREG8(&pOTG->pUsbGenRegs->Power, POWER_EN_SUSPENDM);
; 1726 : #endif
; 1727 :     DEBUGMSG(ZONE_DEBUG, (TEXT("-CHW::SuspendHostController\r\n")));

  04db0	ea000004	 b           |$LN5@SuspendHos|
  04db4	e59f0020	 ldr         r0, [pc, #0x20]
  04db8	eb000000	 bl          NKDbgPrintfW
  04dbc	e3a03001	 mov         r3, #1
  04dc0	e58d3004	 str         r3, [sp, #4]
  04dc4	ea000001	 b           |$LN6@SuspendHos|
  04dc8		 |$LN5@SuspendHos|
  04dc8	e3a03000	 mov         r3, #0
  04dcc	e58d3004	 str         r3, [sp, #4]
  04dd0		 |$LN6@SuspendHos|

; 1728 : }

  04dd0	e28dd008	 add         sp, sp, #8
  04dd4	e89d6000	 ldmia       sp, {sp, lr}
  04dd8	e12fff1e	 bx          lr
  04ddc		 |$LN10@SuspendHos|
  04ddc		 |$LN11@SuspendHos|
  04ddc	00000000	 DCD         |??_C@_1DM@HBJCDAAN@?$AA?9?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAS?$AAu?$AAs?$AAp?$AAe?$AAn?$AAd?$AAH?$AAo?$AAs?$AAt?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@|
  04de0		 |$LN12@SuspendHos|
  04de0	00000000	 DCD         |??_C@_1DM@KCOIBNOM@?$AA?$CL?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAS?$AAu?$AAs?$AAp?$AAe?$AAn?$AAd?$AAH?$AAo?$AAs?$AAt?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@|
  04de4		 |$M45187|

			 ENDP  ; |?SuspendHostController@CHW@@AAAXXZ|, CHW::SuspendHostController


  00130			 AREA	 |.pdata|, PDATA
|$T45197| DCD	|$LN5@ResumeHost|
	DCD	0x40000503
; Function compile flags: /Odtp

  04de4			 AREA	 |.text|, CODE, ARM

  04de4		 |?ResumeHostController@CHW@@AAAXXZ| PROC ; CHW::ResumeHostController

; 1731 : {

  04de4		 |$LN5@ResumeHost|
  04de4	e1a0c00d	 mov         r12, sp
  04de8	e92d0001	 stmdb       sp!, {r0}
  04dec	e92d5000	 stmdb       sp!, {r12, lr}
  04df0		 |$M45194|

; 1732 : #if 0
; 1733 :     PHSMUSB_T pOTG;        
; 1734 : 
; 1735 :     pOTG = (PHSMUSB_T)GetOTGContext();
; 1736 :     if (pOTG == NULL)
; 1737 :     {
; 1738 :         DEBUGMSG(ZONE_ERROR, (TEXT("CHW::ResumeHostController failed\r\n")));
; 1739 :         return;
; 1740 :     }  
; 1741 : 
; 1742 :     DEBUGMSG(ZONE_DEBUG, (TEXT("CHW::ResumeHostController\r\n")));
; 1743 :     pOTG->dwPwrMgmt = MODE_SYSTEM_RESUME;
; 1744 :     SETREG8(&pOTG->pUsbGenRegs->Power, POWER_RESUME);
; 1745 : #endif
; 1746 : }

  04df0	e89d6000	 ldmia       sp, {sp, lr}
  04df4	e12fff1e	 bx          lr
  04df8		 |$M45195|

			 ENDP  ; |?ResumeHostController@CHW@@AAAXXZ|, CHW::ResumeHostController

	EXPORT	|??_C@_1LI@PFBIJODG@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAS?$AAe?$AAt?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?$CI?$AAe?$AAp?$AA?$CI?$AA0?$AAx?$AA?$CF?$AAx?$AA?$CJ?$AA?0?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HO@LIAJBLEO@?$AAS?$AAe?$AAt?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?5?$AAD?$AAe?$AAv?$AAA?$AAd?$AAd?$AAr?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?0?$AA?5?$AAH@| [ DATA ] ; `string'

  00138			 AREA	 |.pdata|, PDATA
|$T45208| DCD	|$LN13@SetDeviceA|
	DCD	0x4000b304

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1LI@PFBIJODG@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAS?$AAe?$AAt?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?$CI?$AAe?$AAp?$AA?$CI?$AA0?$AAx?$AA?$CF?$AAx?$AA?$CJ?$AA?0?$AA?5@| DCB "C"
	DCB	0x0, "H", 0x0, "W", 0x0, ":", 0x0, ":", 0x0, "S", 0x0, "e"
	DCB	0x0, "t", 0x0, "D", 0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c"
	DCB	0x0, "e", 0x0, "A", 0x0, "d", 0x0, "d", 0x0, "r", 0x0, "e"
	DCB	0x0, "s", 0x0, "s", 0x0, "(", 0x0, "e", 0x0, "p", 0x0, "("
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, ")", 0x0, ","
	DCB	0x0, " ", 0x0, "d", 0x0, "e", 0x0, "v", 0x0, " ", 0x0, "a"
	DCB	0x0, "d", 0x0, "d", 0x0, "r", 0x0, "(", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "x", 0x0, ")", 0x0, ",", 0x0, " ", 0x0, "h"
	DCB	0x0, "u", 0x0, "b", 0x0, " ", 0x0, "a", 0x0, "d", 0x0, "d"
	DCB	0x0, "r", 0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x"
	DCB	0x0, ")", 0x0, ",", 0x0, " ", 0x0, "p", 0x0, "o", 0x0, "r"
	DCB	0x0, "t", 0x0, " ", 0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "x", 0x0, ")", 0x0, ")", 0x0, ",", 0x0, " ", 0x0, "i"
	DCB	0x0, "n", 0x0, "d", 0x0, "e", 0x0, "x", 0x0, "(", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "x", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HO@LIAJBLEO@?$AAS?$AAe?$AAt?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?5?$AAD?$AAe?$AAv?$AAA?$AAd?$AAd?$AAr?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?0?$AA?5?$AAH@| DCB "S"
	DCB	0x0, "e", 0x0, "t", 0x0, "D", 0x0, "e", 0x0, "v", 0x0, "i"
	DCB	0x0, "c", 0x0, "e", 0x0, "A", 0x0, "d", 0x0, "d", 0x0, "r"
	DCB	0x0, "e", 0x0, "s", 0x0, "s", 0x0, " ", 0x0, "D", 0x0, "e"
	DCB	0x0, "v", 0x0, "A", 0x0, "d", 0x0, "d", 0x0, "r", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, ",", 0x0, " "
	DCB	0x0, "H", 0x0, "u", 0x0, "b", 0x0, "A", 0x0, "d", 0x0, "d"
	DCB	0x0, "r", 0x0, "e", 0x0, "s", 0x0, "s", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "H"
	DCB	0x0, "u", 0x0, "b", 0x0, "P", 0x0, "o", 0x0, "r", 0x0, "t"
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  04df8			 AREA	 |.text|, CODE, ARM

  04df8		 |?SetDeviceAddress@CHW@@UAAXEEEEE@Z| PROC ; CHW::SetDeviceAddress

; 1756 : {

  04df8		 |$LN13@SetDeviceA|
  04df8	e1a0c00d	 mov         r12, sp
  04dfc	e92d000f	 stmdb       sp!, {r0 - r3}
  04e00	e92d5000	 stmdb       sp!, {r12, lr}
  04e04	e24dd020	 sub         sp, sp, #0x20
  04e08		 |$M45205|

; 1757 :     PHSMUSB_T pOTG;
; 1758 :     pOTG = (PHSMUSB_T)GetOTGContext();    

  04e08	e59d0028	 ldr         r0, [sp, #0x28]
  04e0c	eb000000	 bl          |?GetOTGContext@CHcd@@QAAPAXXZ|
  04e10	e58d0014	 str         r0, [sp, #0x14]
  04e14	e59d3014	 ldr         r3, [sp, #0x14]
  04e18	e58d3008	 str         r3, [sp, #8]

; 1759 : 
; 1760 :     OUTREG8(&pOTG->pUsbGenRegs->Index, USB_ENDPOINT(mappedEP));

  04e1c	e5dd302c	 ldrb        r3, [sp, #0x2C]
  04e20	e203300f	 and         r3, r3, #0xF
  04e24	e20320ff	 and         r2, r3, #0xFF
  04e28	e59d3008	 ldr         r3, [sp, #8]
  04e2c	e2833020	 add         r3, r3, #0x20
  04e30	e5933000	 ldr         r3, [r3]
  04e34	e283300e	 add         r3, r3, #0xE
  04e38	e5c32000	 strb        r2, [r3]

; 1761 :     //OUTREG8(&pOTG->pUsbGenRegs->FAddr, ucAddress);
; 1762 : 
; 1763 :     DEBUGMSG(ZONE_HCD, (TEXT("SetDeviceAddress DevAddr 0x%x, HubAddress 0x%x, HubPort 0x%x\r\n"),
; 1764 :         ucDevAddress, ucHubAddress, ucHubPort));

  04e3c	e59f3278	 ldr         r3, [pc, #0x278]
  04e40	e5933440	 ldr         r3, [r3, #0x440]
  04e44	e3130001	 tst         r3, #1
  04e48	0a000007	 beq         |$LN7@SetDeviceA|
  04e4c	e5dd3038	 ldrb        r3, [sp, #0x38]
  04e50	e5dd2034	 ldrb        r2, [sp, #0x34]
  04e54	e5dd1030	 ldrb        r1, [sp, #0x30]
  04e58	e59f0260	 ldr         r0, [pc, #0x260]
  04e5c	eb000000	 bl          NKDbgPrintfW
  04e60	e3a03001	 mov         r3, #1
  04e64	e58d3018	 str         r3, [sp, #0x18]
  04e68	ea000001	 b           |$LN8@SetDeviceA|
  04e6c		 |$LN7@SetDeviceA|
  04e6c	e3a03000	 mov         r3, #0
  04e70	e58d3018	 str         r3, [sp, #0x18]
  04e74		 |$LN8@SetDeviceA|

; 1765 : 
; 1766 :     if (USB_ENDPOINT(mappedEP) == 0)

  04e74	e5dd302c	 ldrb        r3, [sp, #0x2C]
  04e78	e313000f	 tst         r3, #0xF
  04e7c	1a000028	 bne         |$LN4@SetDeviceA|

; 1767 :     {
; 1768 :         OUTREG8(&pOTG->pUsbGenRegs->ep[0].TxFuncAddr, ucDevAddress);

  04e80	e59d3008	 ldr         r3, [sp, #8]
  04e84	e2833020	 add         r3, r3, #0x20
  04e88	e5933000	 ldr         r3, [r3]
  04e8c	e2832080	 add         r2, r3, #0x80
  04e90	e5dd3030	 ldrb        r3, [sp, #0x30]
  04e94	e5c23000	 strb        r3, [r2]

; 1769 :         OUTREG8(&pOTG->pUsbGenRegs->ep[0].RxFuncAddr, ucDevAddress);

  04e98	e59d3008	 ldr         r3, [sp, #8]
  04e9c	e2833020	 add         r3, r3, #0x20
  04ea0	e5933000	 ldr         r3, [r3]
  04ea4	e2832084	 add         r2, r3, #0x84
  04ea8	e5dd3030	 ldrb        r3, [sp, #0x30]
  04eac	e5c23000	 strb        r3, [r2]

; 1770 : 
; 1771 :         OUTREG8(&pOTG->pUsbGenRegs->ep[0].TxHubAddr, 0x80|ucHubAddress);

  04eb0	e5dd3034	 ldrb        r3, [sp, #0x34]
  04eb4	e3833080	 orr         r3, r3, #0x80
  04eb8	e20320ff	 and         r2, r3, #0xFF
  04ebc	e59d3008	 ldr         r3, [sp, #8]
  04ec0	e2833020	 add         r3, r3, #0x20
  04ec4	e5933000	 ldr         r3, [r3]
  04ec8	e2833082	 add         r3, r3, #0x82
  04ecc	e5c32000	 strb        r2, [r3]

; 1772 :         OUTREG8(&pOTG->pUsbGenRegs->ep[0].RxHubAddr, 0x80|ucHubAddress);

  04ed0	e5dd3034	 ldrb        r3, [sp, #0x34]
  04ed4	e3833080	 orr         r3, r3, #0x80
  04ed8	e20320ff	 and         r2, r3, #0xFF
  04edc	e59d3008	 ldr         r3, [sp, #8]
  04ee0	e2833020	 add         r3, r3, #0x20
  04ee4	e5933000	 ldr         r3, [r3]
  04ee8	e2833086	 add         r3, r3, #0x86
  04eec	e5c32000	 strb        r2, [r3]

; 1773 : 
; 1774 :         OUTREG8(&pOTG->pUsbGenRegs->ep[0].TxHubPort, ucHubPort);

  04ef0	e59d3008	 ldr         r3, [sp, #8]
  04ef4	e2833020	 add         r3, r3, #0x20
  04ef8	e5933000	 ldr         r3, [r3]
  04efc	e2832083	 add         r2, r3, #0x83
  04f00	e5dd3038	 ldrb        r3, [sp, #0x38]
  04f04	e5c23000	 strb        r3, [r2]

; 1775 :         OUTREG8(&pOTG->pUsbGenRegs->ep[0].RxHubPort, ucHubPort);

  04f08	e59d3008	 ldr         r3, [sp, #8]
  04f0c	e2833020	 add         r3, r3, #0x20
  04f10	e5933000	 ldr         r3, [r3]
  04f14	e2832087	 add         r2, r3, #0x87
  04f18	e5dd3038	 ldrb        r3, [sp, #0x38]
  04f1c	e5c23000	 strb        r3, [r2]

; 1776 : 
; 1777 : 
; 1778 :     }
; 1779 :     else 

  04f20	ea00004e	 b           |$LN3@SetDeviceA|
  04f24		 |$LN4@SetDeviceA|

; 1780 :     {
; 1781 :         if (outdir) // OUT

  04f24	e5dd303c	 ldrb        r3, [sp, #0x3C]
  04f28	e3530000	 cmp         r3, #0
  04f2c	0a000025	 beq         |$LN2@SetDeviceA|

; 1782 :         {
; 1783 :             OUTREG8(&pOTG->pUsbGenRegs->ep[INDEX(mappedEP)].TxFuncAddr, ucDevAddress);

  04f30	e59d3008	 ldr         r3, [sp, #8]
  04f34	e2833020	 add         r3, r3, #0x20
  04f38	e5933000	 ldr         r3, [r3]
  04f3c	e2831080	 add         r1, r3, #0x80
  04f40	e5dd302c	 ldrb        r3, [sp, #0x2C]
  04f44	e203200f	 and         r2, r3, #0xF
  04f48	e3a03008	 mov         r3, #8
  04f4c	e0030392	 mul         r3, r2, r3
  04f50	e0812003	 add         r2, r1, r3
  04f54	e5dd3030	 ldrb        r3, [sp, #0x30]
  04f58	e5c23000	 strb        r3, [r2]

; 1784 :             OUTREG8(&pOTG->pUsbGenRegs->ep[INDEX(mappedEP)].TxHubAddr, 0x80|ucHubAddress);

  04f5c	e5dd3034	 ldrb        r3, [sp, #0x34]
  04f60	e3833080	 orr         r3, r3, #0x80
  04f64	e20300ff	 and         r0, r3, #0xFF
  04f68	e59d3008	 ldr         r3, [sp, #8]
  04f6c	e2833020	 add         r3, r3, #0x20
  04f70	e5933000	 ldr         r3, [r3]
  04f74	e2831080	 add         r1, r3, #0x80
  04f78	e5dd302c	 ldrb        r3, [sp, #0x2C]
  04f7c	e203200f	 and         r2, r3, #0xF
  04f80	e3a03008	 mov         r3, #8
  04f84	e0030392	 mul         r3, r2, r3
  04f88	e0813003	 add         r3, r1, r3
  04f8c	e2833002	 add         r3, r3, #2
  04f90	e5c30000	 strb        r0, [r3]

; 1785 :             OUTREG8(&pOTG->pUsbGenRegs->ep[INDEX(mappedEP)].TxHubPort, ucHubPort);

  04f94	e59d3008	 ldr         r3, [sp, #8]
  04f98	e2833020	 add         r3, r3, #0x20
  04f9c	e5933000	 ldr         r3, [r3]
  04fa0	e2831080	 add         r1, r3, #0x80
  04fa4	e5dd302c	 ldrb        r3, [sp, #0x2C]
  04fa8	e203200f	 and         r2, r3, #0xF
  04fac	e3a03008	 mov         r3, #8
  04fb0	e0030392	 mul         r3, r2, r3
  04fb4	e0813003	 add         r3, r1, r3
  04fb8	e2832003	 add         r2, r3, #3
  04fbc	e5dd3038	 ldrb        r3, [sp, #0x38]
  04fc0	e5c23000	 strb        r3, [r2]

; 1786 :         }
; 1787 :         else

  04fc4	ea000025	 b           |$LN1@SetDeviceA|
  04fc8		 |$LN2@SetDeviceA|

; 1788 :         {
; 1789 :             OUTREG8(&pOTG->pUsbGenRegs->ep[INDEX(mappedEP)].RxFuncAddr, ucDevAddress);

  04fc8	e59d3008	 ldr         r3, [sp, #8]
  04fcc	e2833020	 add         r3, r3, #0x20
  04fd0	e5933000	 ldr         r3, [r3]
  04fd4	e2831080	 add         r1, r3, #0x80
  04fd8	e5dd302c	 ldrb        r3, [sp, #0x2C]
  04fdc	e203200f	 and         r2, r3, #0xF
  04fe0	e3a03008	 mov         r3, #8
  04fe4	e0030392	 mul         r3, r2, r3
  04fe8	e0813003	 add         r3, r1, r3
  04fec	e2832004	 add         r2, r3, #4
  04ff0	e5dd3030	 ldrb        r3, [sp, #0x30]
  04ff4	e5c23000	 strb        r3, [r2]

; 1790 :             OUTREG8(&pOTG->pUsbGenRegs->ep[INDEX(mappedEP)].RxHubAddr, 0x80|ucHubAddress);

  04ff8	e5dd3034	 ldrb        r3, [sp, #0x34]
  04ffc	e3833080	 orr         r3, r3, #0x80
  05000	e20300ff	 and         r0, r3, #0xFF
  05004	e59d3008	 ldr         r3, [sp, #8]
  05008	e2833020	 add         r3, r3, #0x20
  0500c	e5933000	 ldr         r3, [r3]
  05010	e2831080	 add         r1, r3, #0x80
  05014	e5dd302c	 ldrb        r3, [sp, #0x2C]
  05018	e203200f	 and         r2, r3, #0xF
  0501c	e3a03008	 mov         r3, #8
  05020	e0030392	 mul         r3, r2, r3
  05024	e0813003	 add         r3, r1, r3
  05028	e2833006	 add         r3, r3, #6
  0502c	e5c30000	 strb        r0, [r3]

; 1791 :             OUTREG8(&pOTG->pUsbGenRegs->ep[INDEX(mappedEP)].RxHubPort, ucHubPort);

  05030	e59d3008	 ldr         r3, [sp, #8]
  05034	e2833020	 add         r3, r3, #0x20
  05038	e5933000	 ldr         r3, [r3]
  0503c	e2831080	 add         r1, r3, #0x80
  05040	e5dd302c	 ldrb        r3, [sp, #0x2C]
  05044	e203200f	 and         r2, r3, #0xF
  05048	e3a03008	 mov         r3, #8
  0504c	e0030392	 mul         r3, r2, r3
  05050	e0813003	 add         r3, r1, r3
  05054	e2832007	 add         r2, r3, #7
  05058	e5dd3038	 ldrb        r3, [sp, #0x38]
  0505c	e5c23000	 strb        r3, [r2]
  05060		 |$LN1@SetDeviceA|
  05060		 |$LN3@SetDeviceA|

; 1792 : 
; 1793 :         }
; 1794 :     }
; 1795 :     DEBUGMSG(ZONE_HCD, (TEXT("CHW::SetDeviceAddress(ep(0x%x), dev addr(0x%x), hub addr(0x%x), port (0x%x)), index(0x%x)\r\n"), mappedEP, ucDevAddress, ucHubAddress, ucHubPort, INDEX(mappedEP)));

  05060	e59f3054	 ldr         r3, [pc, #0x54]
  05064	e5933440	 ldr         r3, [r3, #0x440]
  05068	e3130001	 tst         r3, #1
  0506c	0a00000c	 beq         |$LN9@SetDeviceA|
  05070	e5dd302c	 ldrb        r3, [sp, #0x2C]
  05074	e203300f	 and         r3, r3, #0xF
  05078	e58d3004	 str         r3, [sp, #4]
  0507c	e5dd3038	 ldrb        r3, [sp, #0x38]
  05080	e58d3000	 str         r3, [sp]
  05084	e5dd3034	 ldrb        r3, [sp, #0x34]
  05088	e5dd2030	 ldrb        r2, [sp, #0x30]
  0508c	e5dd102c	 ldrb        r1, [sp, #0x2C]
  05090	e59f0020	 ldr         r0, [pc, #0x20]
  05094	eb000000	 bl          NKDbgPrintfW
  05098	e3a03001	 mov         r3, #1
  0509c	e58d301c	 str         r3, [sp, #0x1C]
  050a0	ea000001	 b           |$LN10@SetDeviceA|
  050a4		 |$LN9@SetDeviceA|
  050a4	e3a03000	 mov         r3, #0
  050a8	e58d301c	 str         r3, [sp, #0x1C]
  050ac		 |$LN10@SetDeviceA|

; 1796 : }

  050ac	e28dd020	 add         sp, sp, #0x20
  050b0	e89d6000	 ldmia       sp, {sp, lr}
  050b4	e12fff1e	 bx          lr
  050b8		 |$LN14@SetDeviceA|
  050b8		 |$LN15@SetDeviceA|
  050b8	00000000	 DCD         |??_C@_1LI@PFBIJODG@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAS?$AAe?$AAt?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?$CI?$AAe?$AAp?$AA?$CI?$AA0?$AAx?$AA?$CF?$AAx?$AA?$CJ?$AA?0?$AA?5@|
  050bc		 |$LN16@SetDeviceA|
  050bc	00000000	 DCD         |dpCurSettings|
  050c0		 |$LN17@SetDeviceA|
  050c0	00000000	 DCD         |??_C@_1HO@LIAJBLEO@?$AAS?$AAe?$AAt?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?5?$AAD?$AAe?$AAv?$AAA?$AAd?$AAd?$AAr?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?0?$AA?5?$AAH@|
  050c4		 |$M45206|

			 ENDP  ; |?SetDeviceAddress@CHW@@UAAXEEEEE@Z|, CHW::SetDeviceAddress

	EXPORT	|??_C@_1DG@NLJPJEOI@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAI?$AAs?$AAD?$AAM?$AAA?$AAS?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00140			 AREA	 |.pdata|, PDATA
|$T45220| DCD	|$LN8@IsDMASuppo|
	DCD	0x40002804

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DG@NLJPJEOI@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAI?$AAs?$AAD?$AAM?$AAA?$AAS?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "C"
	DCB	0x0, "H", 0x0, "W", 0x0, ":", 0x0, ":", 0x0, "I", 0x0, "s"
	DCB	0x0, "D", 0x0, "M", 0x0, "A", 0x0, "S", 0x0, "u", 0x0, "p"
	DCB	0x0, "p", 0x0, "o", 0x0, "r", 0x0, "t", 0x0, " ", 0x0, "f"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  050c4			 AREA	 |.text|, CODE, ARM

  050c4		 |?IsDMASupport@CHW@@UAAHXZ| PROC	; CHW::IsDMASupport

; 1798 : {

  050c4		 |$LN8@IsDMASuppo|
  050c4	e1a0c00d	 mov         r12, sp
  050c8	e92d0001	 stmdb       sp!, {r0}
  050cc	e92d5000	 stmdb       sp!, {r12, lr}
  050d0	e24dd014	 sub         sp, sp, #0x14
  050d4		 |$M45217|

; 1799 :     PHSMUSB_T pOTG;        
; 1800 :     pOTG = (PHSMUSB_T)GetOTGContext();

  050d4	e59d001c	 ldr         r0, [sp, #0x1C]
  050d8	eb000000	 bl          |?GetOTGContext@CHcd@@QAAPAXXZ|
  050dc	e58d000c	 str         r0, [sp, #0xC]
  050e0	e59d300c	 ldr         r3, [sp, #0xC]
  050e4	e58d3000	 str         r3, [sp]

; 1801 :     if (pOTG == NULL)

  050e8	e59d3000	 ldr         r3, [sp]
  050ec	e3530000	 cmp         r3, #0
  050f0	1a00000d	 bne         |$LN1@IsDMASuppo|

; 1802 :     {
; 1803 :         DEBUGMSG(ZONE_ERROR, (TEXT("CHW::IsDMASupport failed\r\n")));

  050f4	e59f3064	 ldr         r3, [pc, #0x64]
  050f8	e5933440	 ldr         r3, [r3, #0x440]
  050fc	e3130901	 tst         r3, #1, 18
  05100	0a000004	 beq         |$LN4@IsDMASuppo|
  05104	e59f0050	 ldr         r0, [pc, #0x50]
  05108	eb000000	 bl          NKDbgPrintfW
  0510c	e3a03001	 mov         r3, #1
  05110	e58d3010	 str         r3, [sp, #0x10]
  05114	ea000001	 b           |$LN5@IsDMASuppo|
  05118		 |$LN4@IsDMASuppo|
  05118	e3a03000	 mov         r3, #0
  0511c	e58d3010	 str         r3, [sp, #0x10]
  05120		 |$LN5@IsDMASuppo|

; 1804 :         return FALSE;

  05120	e3a03000	 mov         r3, #0
  05124	e58d3008	 str         r3, [sp, #8]
  05128	ea000007	 b           |$LN2@IsDMASuppo|
  0512c		 |$LN1@IsDMASuppo|

; 1805 :     }
; 1806 : 
; 1807 :     SMHCDPdd * pPdd = (SMHCDPdd *)pOTG->pContext[HOST_MODE-1];

  0512c	e59d3000	 ldr         r3, [sp]
  05130	e2833014	 add         r3, r3, #0x14
  05134	e5933000	 ldr         r3, [r3]
  05138	e58d3004	 str         r3, [sp, #4]

; 1808 : 
; 1809 :     return (pPdd->bDMASupport);

  0513c	e59d3004	 ldr         r3, [sp, #4]
  05140	e2833e25	 add         r3, r3, #0x25, 28
  05144	e5933000	 ldr         r3, [r3]
  05148	e58d3008	 str         r3, [sp, #8]
  0514c		 |$LN2@IsDMASuppo|

; 1810 : }

  0514c	e59d0008	 ldr         r0, [sp, #8]
  05150	e28dd014	 add         sp, sp, #0x14
  05154	e89d6000	 ldmia       sp, {sp, lr}
  05158	e12fff1e	 bx          lr
  0515c		 |$LN9@IsDMASuppo|
  0515c		 |$LN10@IsDMASuppo|
  0515c	00000000	 DCD         |??_C@_1DG@NLJPJEOI@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAI?$AAs?$AAD?$AAM?$AAA?$AAS?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  05160		 |$LN11@IsDMASuppo|
  05160	00000000	 DCD         |dpCurSettings|
  05164		 |$M45218|

			 ENDP  ; |?IsDMASupport@CHW@@UAAHXZ|, CHW::IsDMASupport

	EXPORT	|??_C@_1DC@PMFPEAGO@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAG?$AAe?$AAt?$AAD?$AAM?$AAA?$AAM?$AAo?$AAd?$AAe?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00148			 AREA	 |.pdata|, PDATA
|$T45231| DCD	|$LN8@GetDMAMode|
	DCD	0x40002804

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DC@PMFPEAGO@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAG?$AAe?$AAt?$AAD?$AAM?$AAA?$AAM?$AAo?$AAd?$AAe?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "C"
	DCB	0x0, "H", 0x0, "W", 0x0, ":", 0x0, ":", 0x0, "G", 0x0, "e"
	DCB	0x0, "t", 0x0, "D", 0x0, "M", 0x0, "A", 0x0, "M", 0x0, "o"
	DCB	0x0, "d", 0x0, "e", 0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Odtp

  05164			 AREA	 |.text|, CODE, ARM

  05164		 |?GetDMAMode@CHW@@UAAKXZ| PROC		; CHW::GetDMAMode

; 1813 : {

  05164		 |$LN8@GetDMAMode|
  05164	e1a0c00d	 mov         r12, sp
  05168	e92d0001	 stmdb       sp!, {r0}
  0516c	e92d5000	 stmdb       sp!, {r12, lr}
  05170	e24dd014	 sub         sp, sp, #0x14
  05174		 |$M45228|

; 1814 :     PHSMUSB_T pOTG;        
; 1815 :     pOTG = (PHSMUSB_T)GetOTGContext();

  05174	e59d001c	 ldr         r0, [sp, #0x1C]
  05178	eb000000	 bl          |?GetOTGContext@CHcd@@QAAPAXXZ|
  0517c	e58d000c	 str         r0, [sp, #0xC]
  05180	e59d300c	 ldr         r3, [sp, #0xC]
  05184	e58d3000	 str         r3, [sp]

; 1816 :     if (pOTG == NULL)

  05188	e59d3000	 ldr         r3, [sp]
  0518c	e3530000	 cmp         r3, #0
  05190	1a00000d	 bne         |$LN1@GetDMAMode|

; 1817 :     {
; 1818 :         DEBUGMSG(ZONE_ERROR, (TEXT("CHW::GetDMAMode failed\r\n")));

  05194	e59f3064	 ldr         r3, [pc, #0x64]
  05198	e5933440	 ldr         r3, [r3, #0x440]
  0519c	e3130901	 tst         r3, #1, 18
  051a0	0a000004	 beq         |$LN4@GetDMAMode|
  051a4	e59f0050	 ldr         r0, [pc, #0x50]
  051a8	eb000000	 bl          NKDbgPrintfW
  051ac	e3a03001	 mov         r3, #1
  051b0	e58d3010	 str         r3, [sp, #0x10]
  051b4	ea000001	 b           |$LN5@GetDMAMode|
  051b8		 |$LN4@GetDMAMode|
  051b8	e3a03000	 mov         r3, #0
  051bc	e58d3010	 str         r3, [sp, #0x10]
  051c0		 |$LN5@GetDMAMode|

; 1819 :         return FALSE;

  051c0	e3a03000	 mov         r3, #0
  051c4	e58d3008	 str         r3, [sp, #8]
  051c8	ea000007	 b           |$LN2@GetDMAMode|
  051cc		 |$LN1@GetDMAMode|

; 1820 :     }
; 1821 : 
; 1822 :     SMHCDPdd * pPdd = (SMHCDPdd *)pOTG->pContext[HOST_MODE-1];

  051cc	e59d3000	 ldr         r3, [sp]
  051d0	e2833014	 add         r3, r3, #0x14
  051d4	e5933000	 ldr         r3, [r3]
  051d8	e58d3004	 str         r3, [sp, #4]

; 1823 : 
; 1824 :     return (pPdd->dwDMAMode);

  051dc	e59d3004	 ldr         r3, [sp, #4]
  051e0	e2833f95	 add         r3, r3, #0x95, 30
  051e4	e5933000	 ldr         r3, [r3]
  051e8	e58d3008	 str         r3, [sp, #8]
  051ec		 |$LN2@GetDMAMode|

; 1825 : }

  051ec	e59d0008	 ldr         r0, [sp, #8]
  051f0	e28dd014	 add         sp, sp, #0x14
  051f4	e89d6000	 ldmia       sp, {sp, lr}
  051f8	e12fff1e	 bx          lr
  051fc		 |$LN9@GetDMAMode|
  051fc		 |$LN10@GetDMAMode|
  051fc	00000000	 DCD         |??_C@_1DC@PMFPEAGO@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAG?$AAe?$AAt?$AAD?$AAM?$AAA?$AAM?$AAo?$AAd?$AAe?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  05200		 |$LN11@GetDMAMode|
  05200	00000000	 DCD         |dpCurSettings|
  05204		 |$M45229|

			 ENDP  ; |?GetDMAMode@CHW@@UAAKXZ|, CHW::GetDMAMode

	EXPORT	|??_C@_1DK@BAMGKKEN@?$AAI?$AAs?$AAH?$AAo?$AAs?$AAt?$AAC?$AAo?$AAn?$AAn?$AAe?$AAc?$AAt?$AA?5?$AAr?$AAe?$AAt?$AAu?$AAr?$AAn?$AA?5?$AAF?$AAA?$AAL?$AAS?$AAE?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EK@BPHCMOPN@?$AAI?$AAs?$AAH?$AAo?$AAs?$AAt?$AAC?$AAo?$AAn?$AAn?$AAe?$AAc?$AAt?$AA?5?$AAr?$AAe?$AAt?$AAu?$AAr?$AAn?$AA?5?$AAd?$AAe?$AAv?$AAc?$AAt?$AAl?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DI@KFHAPFCA@?$AAI?$AAs?$AAH?$AAo?$AAs?$AAt?$AAC?$AAo?$AAn?$AAn?$AAe?$AAc?$AAt?$AA?5?$AAr?$AAe?$AAt?$AAu?$AAr?$AAn?$AA?5?$AAT?$AAR?$AAU?$AAE?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DI@OOEDILNI@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAI?$AAs?$AAH?$AAo?$AAs?$AAt?$AAC?$AAo?$AAn?$AAn?$AAe?$AAc?$AAt?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00150			 AREA	 |.pdata|, PDATA
|$T45248| DCD	|$LN15@IsHostConn|
	DCD	0x40005404

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DK@BAMGKKEN@?$AAI?$AAs?$AAH?$AAo?$AAs?$AAt?$AAC?$AAo?$AAn?$AAn?$AAe?$AAc?$AAt?$AA?5?$AAr?$AAe?$AAt?$AAu?$AAr?$AAn?$AA?5?$AAF?$AAA?$AAL?$AAS?$AAE?$AA?$AN?$AA?6?$AA?$AA@| DCB "I"
	DCB	0x0, "s", 0x0, "H", 0x0, "o", 0x0, "s", 0x0, "t", 0x0, "C"
	DCB	0x0, "o", 0x0, "n", 0x0, "n", 0x0, "e", 0x0, "c", 0x0, "t"
	DCB	0x0, " ", 0x0, "r", 0x0, "e", 0x0, "t", 0x0, "u", 0x0, "r"
	DCB	0x0, "n", 0x0, " ", 0x0, "F", 0x0, "A", 0x0, "L", 0x0, "S"
	DCB	0x0, "E", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EK@BPHCMOPN@?$AAI?$AAs?$AAH?$AAo?$AAs?$AAt?$AAC?$AAo?$AAn?$AAn?$AAe?$AAc?$AAt?$AA?5?$AAr?$AAe?$AAt?$AAu?$AAr?$AAn?$AA?5?$AAd?$AAe?$AAv?$AAc?$AAt?$AAl?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx@| DCB "I"
	DCB	0x0, "s", 0x0, "H", 0x0, "o", 0x0, "s", 0x0, "t", 0x0, "C"
	DCB	0x0, "o", 0x0, "n", 0x0, "n", 0x0, "e", 0x0, "c", 0x0, "t"
	DCB	0x0, " ", 0x0, "r", 0x0, "e", 0x0, "t", 0x0, "u", 0x0, "r"
	DCB	0x0, "n", 0x0, " ", 0x0, "d", 0x0, "e", 0x0, "v", 0x0, "c"
	DCB	0x0, "t", 0x0, "l", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DI@KFHAPFCA@?$AAI?$AAs?$AAH?$AAo?$AAs?$AAt?$AAC?$AAo?$AAn?$AAn?$AAe?$AAc?$AAt?$AA?5?$AAr?$AAe?$AAt?$AAu?$AAr?$AAn?$AA?5?$AAT?$AAR?$AAU?$AAE?$AA?$AN?$AA?6?$AA?$AA@| DCB "I"
	DCB	0x0, "s", 0x0, "H", 0x0, "o", 0x0, "s", 0x0, "t", 0x0, "C"
	DCB	0x0, "o", 0x0, "n", 0x0, "n", 0x0, "e", 0x0, "c", 0x0, "t"
	DCB	0x0, " ", 0x0, "r", 0x0, "e", 0x0, "t", 0x0, "u", 0x0, "r"
	DCB	0x0, "n", 0x0, " ", 0x0, "T", 0x0, "R", 0x0, "U", 0x0, "E"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DI@OOEDILNI@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAI?$AAs?$AAH?$AAo?$AAs?$AAt?$AAC?$AAo?$AAn?$AAn?$AAe?$AAc?$AAt?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "C"
	DCB	0x0, "H", 0x0, "W", 0x0, ":", 0x0, ":", 0x0, "I", 0x0, "s"
	DCB	0x0, "H", 0x0, "o", 0x0, "s", 0x0, "t", 0x0, "C", 0x0, "o"
	DCB	0x0, "n", 0x0, "n", 0x0, "e", 0x0, "c", 0x0, "t", 0x0, " "
	DCB	0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  05204			 AREA	 |.text|, CODE, ARM

  05204		 |?IsHostConnect@CHW@@UAAHXZ| PROC	; CHW::IsHostConnect

; 1834 : {

  05204		 |$LN15@IsHostConn|
  05204	e1a0c00d	 mov         r12, sp
  05208	e92d0001	 stmdb       sp!, {r0}
  0520c	e92d5000	 stmdb       sp!, {r12, lr}
  05210	e24dd020	 sub         sp, sp, #0x20
  05214		 |$M45245|

; 1835 :     PHSMUSB_T pOTG;    
; 1836 :     pOTG = (PHSMUSB_T)GetOTGContext();

  05214	e59d0028	 ldr         r0, [sp, #0x28]
  05218	eb000000	 bl          |?GetOTGContext@CHcd@@QAAPAXXZ|
  0521c	e58d000c	 str         r0, [sp, #0xC]
  05220	e59d300c	 ldr         r3, [sp, #0xC]
  05224	e58d3004	 str         r3, [sp, #4]

; 1837 :     if (pOTG == NULL)

  05228	e59d3004	 ldr         r3, [sp, #4]
  0522c	e3530000	 cmp         r3, #0
  05230	1a00000d	 bne         |$LN2@IsHostConn|

; 1838 :     {
; 1839 :         DEBUGMSG(ZONE_HCD, (TEXT("CHW::IsHostConnect failed\r\n")));

  05234	e59f3108	 ldr         r3, [pc, #0x108]
  05238	e5933440	 ldr         r3, [r3, #0x440]
  0523c	e3130001	 tst         r3, #1
  05240	0a000004	 beq         |$LN5@IsHostConn|
  05244	e59f0104	 ldr         r0, [pc, #0x104]
  05248	eb000000	 bl          NKDbgPrintfW
  0524c	e3a03001	 mov         r3, #1
  05250	e58d3010	 str         r3, [sp, #0x10]
  05254	ea000001	 b           |$LN6@IsHostConn|
  05258		 |$LN5@IsHostConn|
  05258	e3a03000	 mov         r3, #0
  0525c	e58d3010	 str         r3, [sp, #0x10]
  05260		 |$LN6@IsHostConn|

; 1840 :         return FALSE;

  05260	e3a03000	 mov         r3, #0
  05264	e58d3008	 str         r3, [sp, #8]
  05268	ea000030	 b           |$LN3@IsHostConn|
  0526c		 |$LN2@IsHostConn|

; 1841 :     }
; 1842 : 
; 1843 :     UCHAR devctl = INREG8(&pOTG->pUsbGenRegs->DevCtl);

  0526c	e59d3004	 ldr         r3, [sp, #4]
  05270	e2833020	 add         r3, r3, #0x20
  05274	e5933000	 ldr         r3, [r3]
  05278	e2833060	 add         r3, r3, #0x60
  0527c	e5d33000	 ldrb        r3, [r3]
  05280	e5cd3000	 strb        r3, [sp]

; 1844 :     if ((devctl & DEVCTL_SESSION) && (devctl & DEVCTL_HOSTMODE))

  05284	e5dd3000	 ldrb        r3, [sp]
  05288	e3130001	 tst         r3, #1
  0528c	0a000010	 beq         |$LN1@IsHostConn|
  05290	e5dd3000	 ldrb        r3, [sp]
  05294	e3130004	 tst         r3, #4
  05298	0a00000d	 beq         |$LN1@IsHostConn|

; 1845 :     {
; 1846 :         DEBUGMSG(ZONE_HCD, (TEXT("IsHostConnect return TRUE\r\n")));

  0529c	e59f30a0	 ldr         r3, [pc, #0xA0]
  052a0	e5933440	 ldr         r3, [r3, #0x440]
  052a4	e3130001	 tst         r3, #1
  052a8	0a000004	 beq         |$LN7@IsHostConn|
  052ac	e59f0098	 ldr         r0, [pc, #0x98]
  052b0	eb000000	 bl          NKDbgPrintfW
  052b4	e3a03001	 mov         r3, #1
  052b8	e58d3014	 str         r3, [sp, #0x14]
  052bc	ea000001	 b           |$LN8@IsHostConn|
  052c0		 |$LN7@IsHostConn|
  052c0	e3a03000	 mov         r3, #0
  052c4	e58d3014	 str         r3, [sp, #0x14]
  052c8		 |$LN8@IsHostConn|

; 1847 :         return TRUE;

  052c8	e3a03001	 mov         r3, #1
  052cc	e58d3008	 str         r3, [sp, #8]
  052d0	ea000016	 b           |$LN3@IsHostConn|
  052d4		 |$LN1@IsHostConn|

; 1848 :     }
; 1849 : 
; 1850 :     DEBUGMSG(ZONE_DEBUG, (TEXT("IsHostConnect return devctl = 0x%x\r\n"), devctl));

  052d4	ea000006	 b           |$LN9@IsHostConn|
  052d8	e5dd3000	 ldrb        r3, [sp]
  052dc	e1a01003	 mov         r1, r3
  052e0	e59f0060	 ldr         r0, [pc, #0x60]
  052e4	eb000000	 bl          NKDbgPrintfW
  052e8	e3a03001	 mov         r3, #1
  052ec	e58d3018	 str         r3, [sp, #0x18]
  052f0	ea000001	 b           |$LN10@IsHostConn|
  052f4		 |$LN9@IsHostConn|
  052f4	e3a03000	 mov         r3, #0
  052f8	e58d3018	 str         r3, [sp, #0x18]
  052fc		 |$LN10@IsHostConn|

; 1851 :     DEBUGMSG(ZONE_HCD, (TEXT("IsHostConnect return FALSE\r\n")));

  052fc	e59f3040	 ldr         r3, [pc, #0x40]
  05300	e5933440	 ldr         r3, [r3, #0x440]
  05304	e3130001	 tst         r3, #1
  05308	0a000004	 beq         |$LN11@IsHostConn|
  0530c	e59f002c	 ldr         r0, [pc, #0x2C]
  05310	eb000000	 bl          NKDbgPrintfW
  05314	e3a03001	 mov         r3, #1
  05318	e58d301c	 str         r3, [sp, #0x1C]
  0531c	ea000001	 b           |$LN12@IsHostConn|
  05320		 |$LN11@IsHostConn|
  05320	e3a03000	 mov         r3, #0
  05324	e58d301c	 str         r3, [sp, #0x1C]
  05328		 |$LN12@IsHostConn|

; 1852 :     return FALSE;

  05328	e3a03000	 mov         r3, #0
  0532c	e58d3008	 str         r3, [sp, #8]
  05330		 |$LN3@IsHostConn|

; 1853 : }

  05330	e59d0008	 ldr         r0, [sp, #8]
  05334	e28dd020	 add         sp, sp, #0x20
  05338	e89d6000	 ldmia       sp, {sp, lr}
  0533c	e12fff1e	 bx          lr
  05340		 |$LN16@IsHostConn|
  05340		 |$LN17@IsHostConn|
  05340	00000000	 DCD         |??_C@_1DK@BAMGKKEN@?$AAI?$AAs?$AAH?$AAo?$AAs?$AAt?$AAC?$AAo?$AAn?$AAn?$AAe?$AAc?$AAt?$AA?5?$AAr?$AAe?$AAt?$AAu?$AAr?$AAn?$AA?5?$AAF?$AAA?$AAL?$AAS?$AAE?$AA?$AN?$AA?6?$AA?$AA@|
  05344		 |$LN18@IsHostConn|
  05344	00000000	 DCD         |dpCurSettings|
  05348		 |$LN19@IsHostConn|
  05348	00000000	 DCD         |??_C@_1EK@BPHCMOPN@?$AAI?$AAs?$AAH?$AAo?$AAs?$AAt?$AAC?$AAo?$AAn?$AAn?$AAe?$AAc?$AAt?$AA?5?$AAr?$AAe?$AAt?$AAu?$AAr?$AAn?$AA?5?$AAd?$AAe?$AAv?$AAc?$AAt?$AAl?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx@|
  0534c		 |$LN20@IsHostConn|
  0534c	00000000	 DCD         |??_C@_1DI@KFHAPFCA@?$AAI?$AAs?$AAH?$AAo?$AAs?$AAt?$AAC?$AAo?$AAn?$AAn?$AAe?$AAc?$AAt?$AA?5?$AAr?$AAe?$AAt?$AAu?$AAr?$AAn?$AA?5?$AAT?$AAR?$AAU?$AAE?$AA?$AN?$AA?6?$AA?$AA@|
  05350		 |$LN21@IsHostConn|
  05350	00000000	 DCD         |??_C@_1DI@OOEDILNI@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAI?$AAs?$AAH?$AAo?$AAs?$AAt?$AAC?$AAo?$AAn?$AAn?$AAe?$AAc?$AAt?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  05354		 |$M45246|

			 ENDP  ; |?IsHostConnect@CHW@@UAAHXZ|, CHW::IsHostConnect

	EXPORT	|??_C@_1DO@GJNGPFGA@?$AAF?$AAa?$AAi?$AAl?$AAu?$AAr?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAr?$AAe?$AAs?$AAt?$AAo?$AAr?$AAe?$AA?5?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAe?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DK@BBPJADEL@?$AAG?$AAe?$AAt?$AAR?$AAx?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAe?$AAn?$AAd?$AAp?$AAo?$AAi?$AAn?$AAt?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|?GetRxCount@CHW@@QAAKPAXE@Z|		; CHW::GetRxCount

  00158			 AREA	 |.pdata|, PDATA
|$T45264| DCD	|$LN12@GetRxCount|
	DCD	0x40005c04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@GJNGPFGA@?$AAF?$AAa?$AAi?$AAl?$AAu?$AAr?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAr?$AAe?$AAs?$AAt?$AAo?$AAr?$AAe?$AA?5?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAe?$AA?$AN?$AA?6?$AA?$AA@| DCB "F"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, "u", 0x0, "r", 0x0, "e"
	DCB	0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "r", 0x0, "e"
	DCB	0x0, "s", 0x0, "t", 0x0, "o", 0x0, "r", 0x0, "e", 0x0, " "
	DCB	0x0, "c", 0x0, "o", 0x0, "n", 0x0, "f", 0x0, "i", 0x0, "g"
	DCB	0x0, "u", 0x0, "r", 0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DK@BBPJADEL@?$AAG?$AAe?$AAt?$AAR?$AAx?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAe?$AAn?$AAd?$AAp?$AAo?$AAi?$AAn?$AAt?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "G"
	DCB	0x0, "e", 0x0, "t", 0x0, "R", 0x0, "x", 0x0, "C", 0x0, "o"
	DCB	0x0, "u", 0x0, "n", 0x0, "t", 0x0, " ", 0x0, "f", 0x0, "o"
	DCB	0x0, "r", 0x0, " ", 0x0, "e", 0x0, "n", 0x0, "d", 0x0, "p"
	DCB	0x0, "o", 0x0, "i", 0x0, "n", 0x0, "t", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  05354			 AREA	 |.text|, CODE, ARM

  05354		 |?GetRxCount@CHW@@QAAKPAXE@Z| PROC	; CHW::GetRxCount

; 1857 : {

  05354		 |$LN12@GetRxCount|
  05354	e1a0c00d	 mov         r12, sp
  05358	e92d0007	 stmdb       sp!, {r0 - r2}
  0535c	e92d5000	 stmdb       sp!, {r12, lr}
  05360	e24dd018	 sub         sp, sp, #0x18
  05364		 |$M45261|

; 1858 :     PHSMUSB_T pOTG = (PHSMUSB_T)(pContext);

  05364	e59d3024	 ldr         r3, [sp, #0x24]
  05368	e58d3008	 str         r3, [sp, #8]

; 1859 :     UCHAR csrIndex = INDEX(endpoint);

  0536c	e5dd3028	 ldrb        r3, [sp, #0x28]
  05370	e203300f	 and         r3, r3, #0xF
  05374	e20330ff	 and         r3, r3, #0xFF
  05378	e5cd3004	 strb        r3, [sp, #4]

; 1860 :     DWORD dwCount;
; 1861 :     DEBUGMSG(ZONE_HCD, (TEXT("GetRxCount for endpoint %d\r\n"), endpoint));

  0537c	e59f3138	 ldr         r3, [pc, #0x138]
  05380	e5933440	 ldr         r3, [r3, #0x440]
  05384	e3130001	 tst         r3, #1
  05388	0a000006	 beq         |$LN6@GetRxCount|
  0538c	e5dd3028	 ldrb        r3, [sp, #0x28]
  05390	e1a01003	 mov         r1, r3
  05394	e59f0124	 ldr         r0, [pc, #0x124]
  05398	eb000000	 bl          NKDbgPrintfW
  0539c	e3a03001	 mov         r3, #1
  053a0	e58d3010	 str         r3, [sp, #0x10]
  053a4	ea000001	 b           |$LN7@GetRxCount|
  053a8		 |$LN6@GetRxCount|
  053a8	e3a03000	 mov         r3, #0
  053ac	e58d3010	 str         r3, [sp, #0x10]
  053b0		 |$LN7@GetRxCount|

; 1862 :     if (pOTG == NULL)

  053b0	e59d3008	 ldr         r3, [sp, #8]
  053b4	e3530000	 cmp         r3, #0
  053b8	1a00000d	 bne         |$LN3@GetRxCount|

; 1863 :     {
; 1864 :         DEBUGMSG(ZONE_ERROR, (TEXT("Failure to restore configure\r\n")));

  053bc	e59f30f8	 ldr         r3, [pc, #0xF8]
  053c0	e5933440	 ldr         r3, [r3, #0x440]
  053c4	e3130901	 tst         r3, #1, 18
  053c8	0a000004	 beq         |$LN8@GetRxCount|
  053cc	e59f00e4	 ldr         r0, [pc, #0xE4]
  053d0	eb000000	 bl          NKDbgPrintfW
  053d4	e3a03001	 mov         r3, #1
  053d8	e58d3014	 str         r3, [sp, #0x14]
  053dc	ea000001	 b           |$LN9@GetRxCount|
  053e0		 |$LN8@GetRxCount|
  053e0	e3a03000	 mov         r3, #0
  053e4	e58d3014	 str         r3, [sp, #0x14]
  053e8		 |$LN9@GetRxCount|

; 1865 :         return 0;

  053e8	e3a03000	 mov         r3, #0
  053ec	e58d300c	 str         r3, [sp, #0xC]
  053f0	ea00002c	 b           |$LN4@GetRxCount|
  053f4		 |$LN3@GetRxCount|

; 1866 :     }
; 1867 : 
; 1868 :     // Set the Index Register
; 1869 :     EnterCriticalSection(&pOTG->regCS); 

  053f4	e59d3008	 ldr         r3, [sp, #8]
  053f8	e2830038	 add         r0, r3, #0x38
  053fc	eb000000	 bl          EnterCriticalSection

; 1870 :     OUTREG8(&pOTG->pUsbGenRegs->Index, csrIndex);

  05400	e59d3008	 ldr         r3, [sp, #8]
  05404	e2833020	 add         r3, r3, #0x20
  05408	e5933000	 ldr         r3, [r3]
  0540c	e283200e	 add         r2, r3, #0xE
  05410	e5dd3004	 ldrb        r3, [sp, #4]
  05414	e5c23000	 strb        r3, [r2]

; 1871 :     if (USB_ENDPOINT(endpoint) != 0)

  05418	e5dd3028	 ldrb        r3, [sp, #0x28]
  0541c	e313000f	 tst         r3, #0xF
  05420	0a000010	 beq         |$LN2@GetRxCount|

; 1872 :         dwCount = INREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].Count.RxCount);

  05424	e59d3008	 ldr         r3, [sp, #8]
  05428	e283001c	 add         r0, r3, #0x1C
  0542c	e5dd3004	 ldrb        r3, [sp, #4]
  05430	e1a01003	 mov         r1, r3
  05434	e3a03010	 mov         r3, #0x10
  05438	e0020391	 mul         r2, r1, r3
  0543c	e5903000	 ldr         r3, [r0]
  05440	e0833002	 add         r3, r3, r2
  05444	e2831008	 add         r1, r3, #8
  05448	e5d13001	 ldrb        r3, [r1, #1]
  0544c	e1a03403	 mov         r3, r3, lsl #8
  05450	e1a02803	 mov         r2, r3, lsl #16
  05454	e1a02822	 mov         r2, r2, lsr #16
  05458	e5d13000	 ldrb        r3, [r1]
  0545c	e1833002	 orr         r3, r3, r2
  05460	e58d3000	 str         r3, [sp]

; 1873 :     else

  05464	ea00000a	 b           |$LN1@GetRxCount|
  05468		 |$LN2@GetRxCount|

; 1874 :         dwCount = INREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].Count.Count0);

  05468	e59d3008	 ldr         r3, [sp, #8]
  0546c	e283001c	 add         r0, r3, #0x1C
  05470	e5dd3004	 ldrb        r3, [sp, #4]
  05474	e1a01003	 mov         r1, r3
  05478	e3a03010	 mov         r3, #0x10
  0547c	e0020391	 mul         r2, r1, r3
  05480	e5903000	 ldr         r3, [r0]
  05484	e0833002	 add         r3, r3, r2
  05488	e2833008	 add         r3, r3, #8
  0548c	e1d330b0	 ldrh        r3, [r3]
  05490	e58d3000	 str         r3, [sp]
  05494		 |$LN1@GetRxCount|

; 1875 :     
; 1876 :     LeaveCriticalSection(&pOTG->regCS);    

  05494	e59d3008	 ldr         r3, [sp, #8]
  05498	e2830038	 add         r0, r3, #0x38
  0549c	eb000000	 bl          LeaveCriticalSection

; 1877 :     return dwCount;

  054a0	e59d3000	 ldr         r3, [sp]
  054a4	e58d300c	 str         r3, [sp, #0xC]
  054a8		 |$LN4@GetRxCount|

; 1878 : }

  054a8	e59d000c	 ldr         r0, [sp, #0xC]
  054ac	e28dd018	 add         sp, sp, #0x18
  054b0	e89d6000	 ldmia       sp, {sp, lr}
  054b4	e12fff1e	 bx          lr
  054b8		 |$LN13@GetRxCount|
  054b8		 |$LN14@GetRxCount|
  054b8	00000000	 DCD         |??_C@_1DO@GJNGPFGA@?$AAF?$AAa?$AAi?$AAl?$AAu?$AAr?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAr?$AAe?$AAs?$AAt?$AAo?$AAr?$AAe?$AA?5?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAe?$AA?$AN?$AA?6?$AA?$AA@|
  054bc		 |$LN15@GetRxCount|
  054bc	00000000	 DCD         |dpCurSettings|
  054c0		 |$LN16@GetRxCount|
  054c0	00000000	 DCD         |??_C@_1DK@BBPJADEL@?$AAG?$AAe?$AAt?$AAR?$AAx?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAe?$AAn?$AAd?$AAp?$AAo?$AAi?$AAn?$AAt?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  054c4		 |$M45262|

			 ENDP  ; |?GetRxCount@CHW@@QAAKPAXE@Z|, CHW::GetRxCount

	EXPORT	|??_C@_1DA@MKPOBGHE@?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAN?$AAo?$AAt?$AA?5?$AAR?$AAe?$AAs?$AAp?$AAo?$AAn?$AAd?$AAi?$AAn?$AAg?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EC@CIFJCIIN@?$AA?$CL?$AAC?$AAh?$AAe?$AAc?$AAk?$AAD?$AAM?$AAA?$AAR?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAc?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6@| [ DATA ] ; `string'
	EXPORT	|?CheckDMAResult@CHW@@QAAKPAXE@Z|	; CHW::CheckDMAResult

  00160			 AREA	 |.pdata|, PDATA
|$T45280| DCD	|$LN13@CheckDMARe|
	DCD	0x40004704

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@MKPOBGHE@?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAN?$AAo?$AAt?$AA?5?$AAR?$AAe?$AAs?$AAp?$AAo?$AAn?$AAd?$AAi?$AAn?$AAg?$AA?$AN?$AA?6?$AA?$AA@| DCB "D"
	DCB	0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, " "
	DCB	0x0, "N", 0x0, "o", 0x0, "t", 0x0, " ", 0x0, "R", 0x0, "e"
	DCB	0x0, "s", 0x0, "p", 0x0, "o", 0x0, "n", 0x0, "d", 0x0, "i"
	DCB	0x0, "n", 0x0, "g", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EC@CIFJCIIN@?$AA?$CL?$AAC?$AAh?$AAe?$AAc?$AAk?$AAD?$AAM?$AAA?$AAR?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAc?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6@| DCB "+"
	DCB	0x0, "C", 0x0, "h", 0x0, "e", 0x0, "c", 0x0, "k", 0x0, "D"
	DCB	0x0, "M", 0x0, "A", 0x0, "R", 0x0, "e", 0x0, "s", 0x0, "u"
	DCB	0x0, "l", 0x0, "t", 0x0, " ", 0x0, "f", 0x0, "o", 0x0, "r"
	DCB	0x0, " ", 0x0, "c", 0x0, "h", 0x0, "a", 0x0, "n", 0x0, "n"
	DCB	0x0, "e", 0x0, "l", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  054c4			 AREA	 |.text|, CODE, ARM

  054c4		 |?CheckDMAResult@CHW@@QAAKPAXE@Z| PROC	; CHW::CheckDMAResult

; 1884 : {

  054c4		 |$LN13@CheckDMARe|
  054c4	e1a0c00d	 mov         r12, sp
  054c8	e92d0007	 stmdb       sp!, {r0 - r2}
  054cc	e92d5000	 stmdb       sp!, {r12, lr}
  054d0	e24dd01c	 sub         sp, sp, #0x1C
  054d4		 |$M45277|

; 1885 :     PHSMUSB_T pOTG = (PHSMUSB_T)(pContext);

  054d4	e59d3028	 ldr         r3, [sp, #0x28]
  054d8	e58d3004	 str         r3, [sp, #4]

; 1886 :     DWORD dmacntl;
; 1887 :     DWORD dwError = USB_NO_ERROR;

  054dc	e3a03000	 mov         r3, #0
  054e0	e58d3008	 str         r3, [sp, #8]

; 1888 :     DEBUGMSG(ZONE_HCD, (TEXT("+CheckDMAResult for channel %d\r\n"), channel));

  054e4	e59f30ec	 ldr         r3, [pc, #0xEC]
  054e8	e5933440	 ldr         r3, [r3, #0x440]
  054ec	e3130001	 tst         r3, #1
  054f0	0a000006	 beq         |$LN5@CheckDMARe|
  054f4	e5dd302c	 ldrb        r3, [sp, #0x2C]
  054f8	e1a01003	 mov         r1, r3
  054fc	e59f00d8	 ldr         r0, [pc, #0xD8]
  05500	eb000000	 bl          NKDbgPrintfW
  05504	e3a03001	 mov         r3, #1
  05508	e58d3010	 str         r3, [sp, #0x10]
  0550c	ea000001	 b           |$LN6@CheckDMARe|
  05510		 |$LN5@CheckDMARe|
  05510	e3a03000	 mov         r3, #0
  05514	e58d3010	 str         r3, [sp, #0x10]
  05518		 |$LN6@CheckDMARe|

; 1889 :     if (pOTG == NULL)

  05518	e59d3004	 ldr         r3, [sp, #4]
  0551c	e3530000	 cmp         r3, #0
  05520	1a00000d	 bne         |$LN2@CheckDMARe|

; 1890 :     {
; 1891 :         DEBUGMSG(ZONE_ERROR, (TEXT("Failure to restore configure\r\n")));

  05524	e59f30ac	 ldr         r3, [pc, #0xAC]
  05528	e5933440	 ldr         r3, [r3, #0x440]
  0552c	e3130901	 tst         r3, #1, 18
  05530	0a000004	 beq         |$LN7@CheckDMARe|
  05534	e59f0098	 ldr         r0, [pc, #0x98]
  05538	eb000000	 bl          NKDbgPrintfW
  0553c	e3a03001	 mov         r3, #1
  05540	e58d3014	 str         r3, [sp, #0x14]
  05544	ea000001	 b           |$LN8@CheckDMARe|
  05548		 |$LN7@CheckDMARe|
  05548	e3a03000	 mov         r3, #0
  0554c	e58d3014	 str         r3, [sp, #0x14]
  05550		 |$LN8@CheckDMARe|

; 1892 :         return FALSE;

  05550	e3a03000	 mov         r3, #0
  05554	e58d300c	 str         r3, [sp, #0xC]
  05558	ea000018	 b           |$LN3@CheckDMARe|
  0555c		 |$LN2@CheckDMARe|

; 1893 :     }
; 1894 :     dmacntl = INREG32(&pOTG->pUsbDmaRegs->dma[channel].Cntl);

  0555c	e59d3004	 ldr         r3, [sp, #4]
  05560	e2833024	 add         r3, r3, #0x24
  05564	e5933000	 ldr         r3, [r3]
  05568	e2831004	 add         r1, r3, #4
  0556c	e5dd302c	 ldrb        r3, [sp, #0x2C]
  05570	e1a02003	 mov         r2, r3
  05574	e3a03010	 mov         r3, #0x10
  05578	e0030392	 mul         r3, r2, r3
  0557c	e0813003	 add         r3, r1, r3
  05580	e5933000	 ldr         r3, [r3]
  05584	e58d3000	 str         r3, [sp]

; 1895 : 
; 1896 :     if (dmacntl & DMA_CNTL_BusError)

  05588	e59d3000	 ldr         r3, [sp]
  0558c	e3130c01	 tst         r3, #1, 24
  05590	0a000008	 beq         |$LN1@CheckDMARe|

; 1897 :     {
; 1898 :         RETAILMSG(1, (TEXT("Device Not Responding\r\n")));

  05594	e59f0034	 ldr         r0, [pc, #0x34]
  05598	eb000000	 bl          NKDbgPrintfW
  0559c	e3a03001	 mov         r3, #1
  055a0	e58d3018	 str         r3, [sp, #0x18]
  055a4	ea000001	 b           |$LN10@CheckDMARe|
  055a8	e3a03000	 mov         r3, #0
  055ac	e58d3018	 str         r3, [sp, #0x18]
  055b0		 |$LN10@CheckDMARe|

; 1899 :         dwError = USB_DEVICE_NOT_RESPONDING_ERROR;

  055b0	e3a03005	 mov         r3, #5
  055b4	e58d3008	 str         r3, [sp, #8]
  055b8		 |$LN1@CheckDMARe|

; 1900 :     }
; 1901 : 
; 1902 :     return dwError;

  055b8	e59d3008	 ldr         r3, [sp, #8]
  055bc	e58d300c	 str         r3, [sp, #0xC]
  055c0		 |$LN3@CheckDMARe|

; 1903 : }

  055c0	e59d000c	 ldr         r0, [sp, #0xC]
  055c4	e28dd01c	 add         sp, sp, #0x1C
  055c8	e89d6000	 ldmia       sp, {sp, lr}
  055cc	e12fff1e	 bx          lr
  055d0		 |$LN14@CheckDMARe|
  055d0		 |$LN15@CheckDMARe|
  055d0	00000000	 DCD         |??_C@_1DA@MKPOBGHE@?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAN?$AAo?$AAt?$AA?5?$AAR?$AAe?$AAs?$AAp?$AAo?$AAn?$AAd?$AAi?$AAn?$AAg?$AA?$AN?$AA?6?$AA?$AA@|
  055d4		 |$LN16@CheckDMARe|
  055d4	00000000	 DCD         |??_C@_1DO@GJNGPFGA@?$AAF?$AAa?$AAi?$AAl?$AAu?$AAr?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAr?$AAe?$AAs?$AAt?$AAo?$AAr?$AAe?$AA?5?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAe?$AA?$AN?$AA?6?$AA?$AA@|
  055d8		 |$LN17@CheckDMARe|
  055d8	00000000	 DCD         |dpCurSettings|
  055dc		 |$LN18@CheckDMARe|
  055dc	00000000	 DCD         |??_C@_1EC@CIFJCIIN@?$AA?$CL?$AAC?$AAh?$AAe?$AAc?$AAk?$AAD?$AAM?$AAA?$AAR?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAc?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6@|
  055e0		 |$M45278|

			 ENDP  ; |?CheckDMAResult@CHW@@QAAKPAXE@Z|, CHW::CheckDMAResult

	EXPORT	|?RestoreRxConfig@CHW@@QAAHPAXE@Z|	; CHW::RestoreRxConfig

  00168			 AREA	 |.pdata|, PDATA
|$T45293| DCD	|$LN8@RestoreRxC|
	DCD	0x40005504
; Function compile flags: /Odtp

  055e0			 AREA	 |.text|, CODE, ARM

  055e0		 |?RestoreRxConfig@CHW@@QAAHPAXE@Z| PROC ; CHW::RestoreRxConfig

; 1910 : {

  055e0		 |$LN8@RestoreRxC|
  055e0	e1a0c00d	 mov         r12, sp
  055e4	e92d0007	 stmdb       sp!, {r0 - r2}
  055e8	e92d5000	 stmdb       sp!, {r12, lr}
  055ec	e24dd014	 sub         sp, sp, #0x14
  055f0		 |$M45290|

; 1911 :     PHSMUSB_T pOTG = (PHSMUSB_T)(pContext);

  055f0	e59d3020	 ldr         r3, [sp, #0x20]
  055f4	e58d3004	 str         r3, [sp, #4]

; 1912 :     USHORT rxcsr = 0;

  055f8	e3a03000	 mov         r3, #0
  055fc	e1cd30b8	 strh        r3, [sp, #8]

; 1913 :     UCHAR csrIndex = INDEX(endpoint);    

  05600	e5dd3024	 ldrb        r3, [sp, #0x24]
  05604	e203300f	 and         r3, r3, #0xF
  05608	e20330ff	 and         r3, r3, #0xFF
  0560c	e5cd3000	 strb        r3, [sp]

; 1914 :     if (pOTG == NULL)

  05610	e59d3004	 ldr         r3, [sp, #4]
  05614	e3530000	 cmp         r3, #0
  05618	1a00000d	 bne         |$LN1@RestoreRxC|

; 1915 :     {
; 1916 :         DEBUGMSG(ZONE_ERROR, (TEXT("Failure to restore configure\r\n")));

  0561c	e59f310c	 ldr         r3, [pc, #0x10C]
  05620	e5933440	 ldr         r3, [r3, #0x440]
  05624	e3130901	 tst         r3, #1, 18
  05628	0a000004	 beq         |$LN4@RestoreRxC|
  0562c	e59f00f8	 ldr         r0, [pc, #0xF8]
  05630	eb000000	 bl          NKDbgPrintfW
  05634	e3a03001	 mov         r3, #1
  05638	e58d3010	 str         r3, [sp, #0x10]
  0563c	ea000001	 b           |$LN5@RestoreRxC|
  05640		 |$LN4@RestoreRxC|
  05640	e3a03000	 mov         r3, #0
  05644	e58d3010	 str         r3, [sp, #0x10]
  05648		 |$LN5@RestoreRxC|

; 1917 :         return FALSE;

  05648	e3a03000	 mov         r3, #0
  0564c	e58d300c	 str         r3, [sp, #0xC]
  05650	ea000031	 b           |$LN2@RestoreRxC|
  05654		 |$LN1@RestoreRxC|

; 1918 :     }
; 1919 : 
; 1920 :     // Set the Index Register
; 1921 :     EnterCriticalSection(&pOTG->regCS); 

  05654	e59d3004	 ldr         r3, [sp, #4]
  05658	e2830038	 add         r0, r3, #0x38
  0565c	eb000000	 bl          EnterCriticalSection

; 1922 :     OUTREG8(&pOTG->pUsbGenRegs->Index, csrIndex);

  05660	e59d3004	 ldr         r3, [sp, #4]
  05664	e2833020	 add         r3, r3, #0x20
  05668	e5933000	 ldr         r3, [r3]
  0566c	e283200e	 add         r2, r3, #0xE
  05670	e5dd3000	 ldrb        r3, [sp]
  05674	e5c23000	 strb        r3, [r2]

; 1923 : 
; 1924 :     rxcsr = (RXCSR_H_AutoClr|RXCSR_H_AutoReq|RXCSR_H_DMAReqEn);

  05678	e3a03a0e	 mov         r3, #0xE, 20
  0567c	e1cd30b8	 strh        r3, [sp, #8]

; 1925 :     CLRREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].RxCSR, rxcsr);

  05680	e59d3004	 ldr         r3, [sp, #4]
  05684	e283001c	 add         r0, r3, #0x1C
  05688	e5dd3000	 ldrb        r3, [sp]
  0568c	e1a01003	 mov         r1, r3
  05690	e3a03010	 mov         r3, #0x10
  05694	e0020391	 mul         r2, r1, r3
  05698	e5903000	 ldr         r3, [r0]
  0569c	e0833002	 add         r3, r3, r2
  056a0	e2831006	 add         r1, r3, #6
  056a4	e5d13001	 ldrb        r3, [r1, #1]
  056a8	e1a03403	 mov         r3, r3, lsl #8
  056ac	e1a02803	 mov         r2, r3, lsl #16
  056b0	e1a02822	 mov         r2, r2, lsr #16
  056b4	e5d13000	 ldrb        r3, [r1]
  056b8	e1833002	 orr         r3, r3, r2
  056bc	e1a02003	 mov         r2, r3
  056c0	e1dd30b8	 ldrh        r3, [sp, #8]
  056c4	e1e03003	 mvn         r3, r3
  056c8	e0023003	 and         r3, r2, r3
  056cc	e1a0e803	 mov         lr, r3, lsl #16
  056d0	e1a0e82e	 mov         lr, lr, lsr #16
  056d4	e59d3004	 ldr         r3, [sp, #4]
  056d8	e283001c	 add         r0, r3, #0x1C
  056dc	e5dd3000	 ldrb        r3, [sp]
  056e0	e1a01003	 mov         r1, r3
  056e4	e3a03010	 mov         r3, #0x10
  056e8	e0020391	 mul         r2, r1, r3
  056ec	e5903000	 ldr         r3, [r0]
  056f0	e0833002	 add         r3, r3, r2
  056f4	e2832006	 add         r2, r3, #6
  056f8	e1a0300e	 mov         r3, lr
  056fc	e5c23000	 strb        r3, [r2]
  05700	e1a03423	 mov         r3, r3, lsr #8
  05704	e5c23001	 strb        r3, [r2, #1]

; 1926 :     LeaveCriticalSection(&pOTG->regCS);    

  05708	e59d3004	 ldr         r3, [sp, #4]
  0570c	e2830038	 add         r0, r3, #0x38
  05710	eb000000	 bl          LeaveCriticalSection

; 1927 :     return TRUE;

  05714	e3a03001	 mov         r3, #1
  05718	e58d300c	 str         r3, [sp, #0xC]
  0571c		 |$LN2@RestoreRxC|

; 1928 : }

  0571c	e59d000c	 ldr         r0, [sp, #0xC]
  05720	e28dd014	 add         sp, sp, #0x14
  05724	e89d6000	 ldmia       sp, {sp, lr}
  05728	e12fff1e	 bx          lr
  0572c		 |$LN9@RestoreRxC|
  0572c		 |$LN10@RestoreRxC|
  0572c	00000000	 DCD         |??_C@_1DO@GJNGPFGA@?$AAF?$AAa?$AAi?$AAl?$AAu?$AAr?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAr?$AAe?$AAs?$AAt?$AAo?$AAr?$AAe?$AA?5?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAe?$AA?$AN?$AA?6?$AA?$AA@|
  05730		 |$LN11@RestoreRxC|
  05730	00000000	 DCD         |dpCurSettings|
  05734		 |$M45291|

			 ENDP  ; |?RestoreRxConfig@CHW@@QAAHPAXE@Z|, CHW::RestoreRxConfig

	EXPORT	|??_C@_1JM@IGINDEAP@?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAD?$AAa?$AAt?$AAa?$AAT?$AAo?$AAg?$AAg?$AAl?$AAe?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAE?$AAP?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?5?$AA?$CI?$AAm?$AAa@| [ DATA ] ; `string'
	IMPORT	|?GetDataToggle@CPipe@@QAAEXZ|		; CPipe::GetDataToggle
	IMPORT	|?IsDataToggle@CPipe@@QAAHXZ|		; CPipe::IsDataToggle

  00170			 AREA	 |.pdata|, PDATA
|$T45313| DCD	|$LN32@UpdateData|
	DCD	0x4001b504

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JM@IGINDEAP@?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAD?$AAa?$AAt?$AAa?$AAT?$AAo?$AAg?$AAg?$AAl?$AAe?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAE?$AAP?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?5?$AA?$CI?$AAm?$AAa@| DCB "U"
	DCB	0x0, "p", 0x0, "d", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, "D"
	DCB	0x0, "a", 0x0, "t", 0x0, "a", 0x0, "T", 0x0, "o", 0x0, "g"
	DCB	0x0, "g", 0x0, "l", 0x0, "e", 0x0, " ", 0x0, "f", 0x0, "o"
	DCB	0x0, "r", 0x0, " ", 0x0, "E", 0x0, "P", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "x", 0x0, " ", 0x0, "(", 0x0, "m"
	DCB	0x0, "a", 0x0, "p", 0x0, "p", 0x0, "e", 0x0, "d", 0x0, "E"
	DCB	0x0, "P", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x"
	DCB	0x0, ")", 0x0, " ", 0x0, "D", 0x0, "e", 0x0, "v", 0x0, "i"
	DCB	0x0, "c", 0x0, "e", 0x0, "A", 0x0, "d", 0x0, "d", 0x0, "r"
	DCB	0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, ")"
	DCB	0x0, "=", 0x0, ">", 0x0, " ", 0x0, "R", 0x0, "x", 0x0, "C"
	DCB	0x0, "S", 0x0, "R", 0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "x", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  05734			 AREA	 |.text|, CODE, ARM

  05734		 |?UpdateDataToggle@CHW@@UAAHQAVCPipe@@HH@Z| PROC ; CHW::UpdateDataToggle

; 1941 : {

  05734		 |$LN32@UpdateData|
  05734	e1a0c00d	 mov         r12, sp
  05738	e92d000f	 stmdb       sp!, {r0 - r3}
  0573c	e92d5000	 stmdb       sp!, {r12, lr}
  05740	e24dd050	 sub         sp, sp, #0x50
  05744		 |$M45310|

; 1942 :     PHSMUSB_T pOTG;    
; 1943 : 
; 1944 :     pOTG = (PHSMUSB_T)GetOTGContext();

  05744	e59d0058	 ldr         r0, [sp, #0x58]
  05748	eb000000	 bl          |?GetOTGContext@CHcd@@QAAPAXXZ|
  0574c	e58d002c	 str         r0, [sp, #0x2C]
  05750	e59d302c	 ldr         r3, [sp, #0x2C]
  05754	e58d3008	 str         r3, [sp, #8]

; 1945 :     if (pOTG == NULL)

  05758	e59d3008	 ldr         r3, [sp, #8]
  0575c	e3530000	 cmp         r3, #0
  05760	1a00000d	 bne         |$LN17@UpdateData|

; 1946 :     {
; 1947 :         DEBUGMSG(ZONE_ERROR, (TEXT("CHW::ConfigEP failed\r\n")));

  05764	e59f3698	 ldr         r3, [pc, #0x698]
  05768	e5933440	 ldr         r3, [r3, #0x440]
  0576c	e3130901	 tst         r3, #1, 18
  05770	0a000004	 beq         |$LN20@UpdateData|
  05774	e59f0684	 ldr         r0, [pc, #0x684]
  05778	eb000000	 bl          NKDbgPrintfW
  0577c	e3a03001	 mov         r3, #1
  05780	e58d3030	 str         r3, [sp, #0x30]
  05784	ea000001	 b           |$LN21@UpdateData|
  05788		 |$LN20@UpdateData|
  05788	e3a03000	 mov         r3, #0
  0578c	e58d3030	 str         r3, [sp, #0x30]
  05790		 |$LN21@UpdateData|

; 1948 :         return FALSE;

  05790	e3a03000	 mov         r3, #0
  05794	e58d3024	 str         r3, [sp, #0x24]
  05798	ea000193	 b           |$LN18@UpdateData|
  0579c		 |$LN17@UpdateData|

; 1949 :     }  
; 1950 : 
; 1951 :     USB_ENDPOINT_DESCRIPTOR endptDesc = pPipe->GetEndptDescriptor();

  0579c	e28d100c	 add         r1, sp, #0xC
  057a0	e59d005c	 ldr         r0, [sp, #0x5C]
  057a4	eb000000	 bl          |?GetEndptDescriptor@CPipe@@QAA?AU_USB_ENDPOINT_DESCRIPTOR@@XZ|

; 1952 :     UCHAR endpoint = USB_ENDPOINT(endptDesc.bEndpointAddress);

  057a8	e5dd300e	 ldrb        r3, [sp, #0xE]
  057ac	e203300f	 and         r3, r3, #0xF
  057b0	e20330ff	 and         r3, r3, #0xFF
  057b4	e5cd3005	 strb        r3, [sp, #5]

; 1953 :     UCHAR mappedEP = pPipe->GetMappedEndPoint();

  057b8	e59d005c	 ldr         r0, [sp, #0x5C]
  057bc	eb000000	 bl          |?GetMappedEndPoint@CPipe@@QAAEXZ|
  057c0	e5cd0034	 strb        r0, [sp, #0x34]
  057c4	e5dd3034	 ldrb        r3, [sp, #0x34]
  057c8	e5cd3013	 strb        r3, [sp, #0x13]

; 1954 :     UCHAR outdir   = USB_ENDPOINT_DIRECTION_OUT(endptDesc.bEndpointAddress);

  057cc	e5dd300e	 ldrb        r3, [sp, #0xE]
  057d0	e3130080	 tst         r3, #0x80
  057d4	1a000002	 bne         |$LN22@UpdateData|
  057d8	e3a03001	 mov         r3, #1
  057dc	e5cd3035	 strb        r3, [sp, #0x35]
  057e0	ea000001	 b           |$LN23@UpdateData|
  057e4		 |$LN22@UpdateData|
  057e4	e3a03000	 mov         r3, #0
  057e8	e5cd3035	 strb        r3, [sp, #0x35]
  057ec		 |$LN23@UpdateData|
  057ec	e5dd3035	 ldrb        r3, [sp, #0x35]
  057f0	e5cd3004	 strb        r3, [sp, #4]

; 1955 : 
; 1956 : 
; 1957 :     EnterCriticalSection(&pOTG->regCS);

  057f4	e59d3008	 ldr         r3, [sp, #8]
  057f8	e2830038	 add         r0, r3, #0x38
  057fc	eb000000	 bl          EnterCriticalSection

; 1958 :     // Set the Index Register
; 1959 :     OUTREG8(&pOTG->pUsbGenRegs->Index, USB_ENDPOINT(mappedEP));

  05800	e5dd3013	 ldrb        r3, [sp, #0x13]
  05804	e203300f	 and         r3, r3, #0xF
  05808	e20320ff	 and         r2, r3, #0xFF
  0580c	e59d3008	 ldr         r3, [sp, #8]
  05810	e2833020	 add         r3, r3, #0x20
  05814	e5933000	 ldr         r3, [r3]
  05818	e283300e	 add         r3, r3, #0xE
  0581c	e5c32000	 strb        r2, [r3]

; 1960 : 
; 1961 :     if (!pPipe->IsDataToggle())

  05820	e59d005c	 ldr         r0, [sp, #0x5C]
  05824	eb000000	 bl          |?IsDataToggle@CPipe@@QAAHXZ|
  05828	e58d0038	 str         r0, [sp, #0x38]
  0582c	e59d3038	 ldr         r3, [sp, #0x38]
  05830	e3530000	 cmp         r3, #0
  05834	1a000005	 bne         |$LN16@UpdateData|

; 1962 :     {
; 1963 :         LeaveCriticalSection(&pOTG->regCS);

  05838	e59d3008	 ldr         r3, [sp, #8]
  0583c	e2830038	 add         r0, r3, #0x38
  05840	eb000000	 bl          LeaveCriticalSection

; 1964 :         return TRUE;

  05844	e3a03001	 mov         r3, #1
  05848	e58d3024	 str         r3, [sp, #0x24]
  0584c	ea000166	 b           |$LN18@UpdateData|
  05850		 |$LN16@UpdateData|

; 1965 :     }
; 1966 : 
; 1967 :     if (endpoint != 0)

  05850	e5dd3005	 ldrb        r3, [sp, #5]
  05854	e3530000	 cmp         r3, #0
  05858	0a00015e	 beq         |$LN15@UpdateData|

; 1968 :     {
; 1969 :         if (outdir)

  0585c	e5dd3004	 ldrb        r3, [sp, #4]
  05860	e3530000	 cmp         r3, #0
  05864	0a00009c	 beq         |$LN14@UpdateData|

; 1970 :         {
; 1971 :             if (fResetDataToggle)

  05868	e59d3060	 ldr         r3, [sp, #0x60]
  0586c	e3530000	 cmp         r3, #0
  05870	0a00002c	 beq         |$LN13@UpdateData|

; 1972 :             {
; 1973 :                 OUTREG16(&pOTG->pUsbCsrRegs->ep[USB_ENDPOINT(mappedEP)].CSR.TxCSR, 0);

  05874	e59d3008	 ldr         r3, [sp, #8]
  05878	e283001c	 add         r0, r3, #0x1C
  0587c	e5dd3013	 ldrb        r3, [sp, #0x13]
  05880	e203100f	 and         r1, r3, #0xF
  05884	e3a03010	 mov         r3, #0x10
  05888	e0020391	 mul         r2, r1, r3
  0588c	e5903000	 ldr         r3, [r0]
  05890	e0833002	 add         r3, r3, r2
  05894	e2832002	 add         r2, r3, #2
  05898	e3a03000	 mov         r3, #0
  0589c	e5c23000	 strb        r3, [r2]
  058a0	e1a03423	 mov         r3, r3, lsr #8
  058a4	e5c23001	 strb        r3, [r2, #1]

; 1974 :                 SETREG16(&pOTG->pUsbCsrRegs->ep[USB_ENDPOINT(mappedEP)].CSR.TxCSR,
; 1975 :                     TXCSR_H_ClrDataTog|TXCSR_H_FlushFIFO);

  058a8	e59d3008	 ldr         r3, [sp, #8]
  058ac	e283001c	 add         r0, r3, #0x1C
  058b0	e5dd3013	 ldrb        r3, [sp, #0x13]
  058b4	e203100f	 and         r1, r3, #0xF
  058b8	e3a03010	 mov         r3, #0x10
  058bc	e0020391	 mul         r2, r1, r3
  058c0	e5903000	 ldr         r3, [r0]
  058c4	e0833002	 add         r3, r3, r2
  058c8	e2831002	 add         r1, r3, #2
  058cc	e5d13001	 ldrb        r3, [r1, #1]
  058d0	e1a03403	 mov         r3, r3, lsl #8
  058d4	e1a02803	 mov         r2, r3, lsl #16
  058d8	e1a02822	 mov         r2, r2, lsr #16
  058dc	e5d13000	 ldrb        r3, [r1]
  058e0	e1833002	 orr         r3, r3, r2
  058e4	e3833048	 orr         r3, r3, #0x48
  058e8	e1a0e803	 mov         lr, r3, lsl #16
  058ec	e1a0e82e	 mov         lr, lr, lsr #16
  058f0	e59d3008	 ldr         r3, [sp, #8]
  058f4	e283001c	 add         r0, r3, #0x1C
  058f8	e5dd3013	 ldrb        r3, [sp, #0x13]
  058fc	e203100f	 and         r1, r3, #0xF
  05900	e3a03010	 mov         r3, #0x10
  05904	e0020391	 mul         r2, r1, r3
  05908	e5903000	 ldr         r3, [r0]
  0590c	e0833002	 add         r3, r3, r2
  05910	e2832002	 add         r2, r3, #2
  05914	e1a0300e	 mov         r3, lr
  05918	e5c23000	 strb        r3, [r2]
  0591c	e1a03423	 mov         r3, r3, lsr #8
  05920	e5c23001	 strb        r3, [r2, #1]
  05924	ea00006b	 b           |$LN12@UpdateData|
  05928		 |$LN13@UpdateData|

; 1976 :             }
; 1977 :             else if (fUpdateDataToggle)

  05928	e59d3064	 ldr         r3, [sp, #0x64]
  0592c	e3530000	 cmp         r3, #0
  05930	0a000068	 beq         |$LN11@UpdateData|

; 1978 :             {
; 1979 :                 DWORD dwDataToggle = (INREG16(&pOTG->pUsbCsrRegs->ep[USB_ENDPOINT(mappedEP)].CSR.TxCSR) & TXCSR_H_DataToggle);

  05934	e59d3008	 ldr         r3, [sp, #8]
  05938	e283001c	 add         r0, r3, #0x1C
  0593c	e5dd3013	 ldrb        r3, [sp, #0x13]
  05940	e203100f	 and         r1, r3, #0xF
  05944	e3a03010	 mov         r3, #0x10
  05948	e0020391	 mul         r2, r1, r3
  0594c	e5903000	 ldr         r3, [r0]
  05950	e0833002	 add         r3, r3, r2
  05954	e2831002	 add         r1, r3, #2
  05958	e5d13001	 ldrb        r3, [r1, #1]
  0595c	e1a03403	 mov         r3, r3, lsl #8
  05960	e1a02803	 mov         r2, r3, lsl #16
  05964	e1a02822	 mov         r2, r2, lsr #16
  05968	e5d13000	 ldrb        r3, [r1]
  0596c	e1833002	 orr         r3, r3, r2
  05970	e2033c01	 and         r3, r3, #1, 24
  05974	e58d3018	 str         r3, [sp, #0x18]

; 1980 :                 UCHAR ucNextDataToggle = ((dwDataToggle != 0)? 1: 0);

  05978	e59d3018	 ldr         r3, [sp, #0x18]
  0597c	e3530000	 cmp         r3, #0
  05980	0a000002	 beq         |$LN24@UpdateData|
  05984	e3a03001	 mov         r3, #1
  05988	e58d303c	 str         r3, [sp, #0x3C]
  0598c	ea000001	 b           |$LN25@UpdateData|
  05990		 |$LN24@UpdateData|
  05990	e3a03000	 mov         r3, #0
  05994	e58d303c	 str         r3, [sp, #0x3C]
  05998		 |$LN25@UpdateData|
  05998	e59d303c	 ldr         r3, [sp, #0x3C]
  0599c	e20330ff	 and         r3, r3, #0xFF
  059a0	e5cd3014	 strb        r3, [sp, #0x14]

; 1981 :                 if (pPipe->GetDataToggle() != ucNextDataToggle)

  059a4	e59d005c	 ldr         r0, [sp, #0x5C]
  059a8	eb000000	 bl          |?GetDataToggle@CPipe@@QAAEXZ|
  059ac	e5cd0040	 strb        r0, [sp, #0x40]
  059b0	e5dd3040	 ldrb        r3, [sp, #0x40]
  059b4	e1a02003	 mov         r2, r3
  059b8	e5dd3014	 ldrb        r3, [sp, #0x14]
  059bc	e1520003	 cmp         r2, r3
  059c0	0a000044	 beq         |$LN10@UpdateData|

; 1982 :                 {
; 1983 :                     if (pPipe->GetDataToggle() == 0)                    

  059c4	e59d005c	 ldr         r0, [sp, #0x5C]
  059c8	eb000000	 bl          |?GetDataToggle@CPipe@@QAAEXZ|
  059cc	e5cd0041	 strb        r0, [sp, #0x41]
  059d0	e5dd3041	 ldrb        r3, [sp, #0x41]
  059d4	e3530000	 cmp         r3, #0
  059d8	1a00001f	 bne         |$LN9@UpdateData|

; 1984 :                         SETREG16(&pOTG->pUsbCsrRegs->ep[USB_ENDPOINT(mappedEP)].CSR.TxCSR, TXCSR_H_ClrDataTog);

  059dc	e59d3008	 ldr         r3, [sp, #8]
  059e0	e283001c	 add         r0, r3, #0x1C
  059e4	e5dd3013	 ldrb        r3, [sp, #0x13]
  059e8	e203100f	 and         r1, r3, #0xF
  059ec	e3a03010	 mov         r3, #0x10
  059f0	e0020391	 mul         r2, r1, r3
  059f4	e5903000	 ldr         r3, [r0]
  059f8	e0833002	 add         r3, r3, r2
  059fc	e2831002	 add         r1, r3, #2
  05a00	e5d13001	 ldrb        r3, [r1, #1]
  05a04	e1a03403	 mov         r3, r3, lsl #8
  05a08	e1a02803	 mov         r2, r3, lsl #16
  05a0c	e1a02822	 mov         r2, r2, lsr #16
  05a10	e5d13000	 ldrb        r3, [r1]
  05a14	e1833002	 orr         r3, r3, r2
  05a18	e3833040	 orr         r3, r3, #0x40
  05a1c	e1a0e803	 mov         lr, r3, lsl #16
  05a20	e1a0e82e	 mov         lr, lr, lsr #16
  05a24	e59d3008	 ldr         r3, [sp, #8]
  05a28	e283001c	 add         r0, r3, #0x1C
  05a2c	e5dd3013	 ldrb        r3, [sp, #0x13]
  05a30	e203100f	 and         r1, r3, #0xF
  05a34	e3a03010	 mov         r3, #0x10
  05a38	e0020391	 mul         r2, r1, r3
  05a3c	e5903000	 ldr         r3, [r0]
  05a40	e0833002	 add         r3, r3, r2
  05a44	e2832002	 add         r2, r3, #2
  05a48	e1a0300e	 mov         r3, lr
  05a4c	e5c23000	 strb        r3, [r2]
  05a50	e1a03423	 mov         r3, r3, lsr #8
  05a54	e5c23001	 strb        r3, [r2, #1]

; 1985 :                     else

  05a58	ea00001e	 b           |$LN8@UpdateData|
  05a5c		 |$LN9@UpdateData|

; 1986 :                         SETREG16(&pOTG->pUsbCsrRegs->ep[USB_ENDPOINT(mappedEP)].CSR.TxCSR, 
; 1987 :                             TXCSR_H_DataTogWrEn|TXCSR_H_DataToggle);

  05a5c	e59d3008	 ldr         r3, [sp, #8]
  05a60	e283001c	 add         r0, r3, #0x1C
  05a64	e5dd3013	 ldrb        r3, [sp, #0x13]
  05a68	e203100f	 and         r1, r3, #0xF
  05a6c	e3a03010	 mov         r3, #0x10
  05a70	e0020391	 mul         r2, r1, r3
  05a74	e5903000	 ldr         r3, [r0]
  05a78	e0833002	 add         r3, r3, r2
  05a7c	e2831002	 add         r1, r3, #2
  05a80	e5d13001	 ldrb        r3, [r1, #1]
  05a84	e1a03403	 mov         r3, r3, lsl #8
  05a88	e1a02803	 mov         r2, r3, lsl #16
  05a8c	e1a02822	 mov         r2, r2, lsr #16
  05a90	e5d13000	 ldrb        r3, [r1]
  05a94	e1833002	 orr         r3, r3, r2
  05a98	e3833c03	 orr         r3, r3, #3, 24
  05a9c	e1a0e803	 mov         lr, r3, lsl #16
  05aa0	e1a0e82e	 mov         lr, lr, lsr #16
  05aa4	e59d3008	 ldr         r3, [sp, #8]
  05aa8	e283001c	 add         r0, r3, #0x1C
  05aac	e5dd3013	 ldrb        r3, [sp, #0x13]
  05ab0	e203100f	 and         r1, r3, #0xF
  05ab4	e3a03010	 mov         r3, #0x10
  05ab8	e0020391	 mul         r2, r1, r3
  05abc	e5903000	 ldr         r3, [r0]
  05ac0	e0833002	 add         r3, r3, r2
  05ac4	e2832002	 add         r2, r3, #2
  05ac8	e1a0300e	 mov         r3, lr
  05acc	e5c23000	 strb        r3, [r2]
  05ad0	e1a03423	 mov         r3, r3, lsr #8
  05ad4	e5c23001	 strb        r3, [r2, #1]
  05ad8		 |$LN8@UpdateData|
  05ad8		 |$LN10@UpdateData|
  05ad8		 |$LN11@UpdateData|
  05ad8		 |$LN12@UpdateData|

; 1988 :                 }
; 1989 :             }
; 1990 : 
; 1991 :         }
; 1992 :         else

  05ad8	ea0000be	 b           |$LN7@UpdateData|
  05adc		 |$LN14@UpdateData|

; 1993 :         {
; 1994 :             if (fResetDataToggle)

  05adc	e59d3060	 ldr         r3, [sp, #0x60]
  05ae0	e3530000	 cmp         r3, #0
  05ae4	0a00002c	 beq         |$LN6@UpdateData|

; 1995 :             {
; 1996 :                 OUTREG16(&pOTG->pUsbCsrRegs->ep[USB_ENDPOINT(mappedEP)].RxCSR, 0);

  05ae8	e59d3008	 ldr         r3, [sp, #8]
  05aec	e283001c	 add         r0, r3, #0x1C
  05af0	e5dd3013	 ldrb        r3, [sp, #0x13]
  05af4	e203100f	 and         r1, r3, #0xF
  05af8	e3a03010	 mov         r3, #0x10
  05afc	e0020391	 mul         r2, r1, r3
  05b00	e5903000	 ldr         r3, [r0]
  05b04	e0833002	 add         r3, r3, r2
  05b08	e2832006	 add         r2, r3, #6
  05b0c	e3a03000	 mov         r3, #0
  05b10	e5c23000	 strb        r3, [r2]
  05b14	e1a03423	 mov         r3, r3, lsr #8
  05b18	e5c23001	 strb        r3, [r2, #1]

; 1997 :                 SETREG16(&pOTG->pUsbCsrRegs->ep[USB_ENDPOINT(mappedEP)].RxCSR, 
; 1998 :                     RXCSR_H_ClrDataTog|RXCSR_H_FlushFIFO);

  05b1c	e59d3008	 ldr         r3, [sp, #8]
  05b20	e283001c	 add         r0, r3, #0x1C
  05b24	e5dd3013	 ldrb        r3, [sp, #0x13]
  05b28	e203100f	 and         r1, r3, #0xF
  05b2c	e3a03010	 mov         r3, #0x10
  05b30	e0020391	 mul         r2, r1, r3
  05b34	e5903000	 ldr         r3, [r0]
  05b38	e0833002	 add         r3, r3, r2
  05b3c	e2831006	 add         r1, r3, #6
  05b40	e5d13001	 ldrb        r3, [r1, #1]
  05b44	e1a03403	 mov         r3, r3, lsl #8
  05b48	e1a02803	 mov         r2, r3, lsl #16
  05b4c	e1a02822	 mov         r2, r2, lsr #16
  05b50	e5d13000	 ldrb        r3, [r1]
  05b54	e1833002	 orr         r3, r3, r2
  05b58	e3833090	 orr         r3, r3, #0x90
  05b5c	e1a0e803	 mov         lr, r3, lsl #16
  05b60	e1a0e82e	 mov         lr, lr, lsr #16
  05b64	e59d3008	 ldr         r3, [sp, #8]
  05b68	e283001c	 add         r0, r3, #0x1C
  05b6c	e5dd3013	 ldrb        r3, [sp, #0x13]
  05b70	e203100f	 and         r1, r3, #0xF
  05b74	e3a03010	 mov         r3, #0x10
  05b78	e0020391	 mul         r2, r1, r3
  05b7c	e5903000	 ldr         r3, [r0]
  05b80	e0833002	 add         r3, r3, r2
  05b84	e2832006	 add         r2, r3, #6
  05b88	e1a0300e	 mov         r3, lr
  05b8c	e5c23000	 strb        r3, [r2]
  05b90	e1a03423	 mov         r3, r3, lsr #8
  05b94	e5c23001	 strb        r3, [r2, #1]
  05b98	ea00008e	 b           |$LN5@UpdateData|
  05b9c		 |$LN6@UpdateData|

; 1999 :             }
; 2000 :             else if (fUpdateDataToggle)

  05b9c	e59d3064	 ldr         r3, [sp, #0x64]
  05ba0	e3530000	 cmp         r3, #0
  05ba4	0a00008b	 beq         |$LN4@UpdateData|

; 2001 :             {
; 2002 :                 DWORD dwDataToggle = (INREG16(&pOTG->pUsbCsrRegs->ep[USB_ENDPOINT(mappedEP)].RxCSR) & RXCSR_H_DataToggle);

  05ba8	e59d3008	 ldr         r3, [sp, #8]
  05bac	e283001c	 add         r0, r3, #0x1C
  05bb0	e5dd3013	 ldrb        r3, [sp, #0x13]
  05bb4	e203100f	 and         r1, r3, #0xF
  05bb8	e3a03010	 mov         r3, #0x10
  05bbc	e0020391	 mul         r2, r1, r3
  05bc0	e5903000	 ldr         r3, [r0]
  05bc4	e0833002	 add         r3, r3, r2
  05bc8	e2831006	 add         r1, r3, #6
  05bcc	e5d13001	 ldrb        r3, [r1, #1]
  05bd0	e1a03403	 mov         r3, r3, lsl #8
  05bd4	e1a02803	 mov         r2, r3, lsl #16
  05bd8	e1a02822	 mov         r2, r2, lsr #16
  05bdc	e5d13000	 ldrb        r3, [r1]
  05be0	e1833002	 orr         r3, r3, r2
  05be4	e2033c02	 and         r3, r3, #2, 24
  05be8	e58d3020	 str         r3, [sp, #0x20]

; 2003 :                 UCHAR ucNextDataToggle = ((dwDataToggle != 0)? 1: 0);

  05bec	e59d3020	 ldr         r3, [sp, #0x20]
  05bf0	e3530000	 cmp         r3, #0
  05bf4	0a000002	 beq         |$LN26@UpdateData|
  05bf8	e3a03001	 mov         r3, #1
  05bfc	e58d3044	 str         r3, [sp, #0x44]
  05c00	ea000001	 b           |$LN27@UpdateData|
  05c04		 |$LN26@UpdateData|
  05c04	e3a03000	 mov         r3, #0
  05c08	e58d3044	 str         r3, [sp, #0x44]
  05c0c		 |$LN27@UpdateData|
  05c0c	e59d3044	 ldr         r3, [sp, #0x44]
  05c10	e20330ff	 and         r3, r3, #0xFF
  05c14	e5cd301c	 strb        r3, [sp, #0x1C]

; 2004 :                 if (pPipe->GetDataToggle() != ucNextDataToggle)

  05c18	e59d005c	 ldr         r0, [sp, #0x5C]
  05c1c	eb000000	 bl          |?GetDataToggle@CPipe@@QAAEXZ|
  05c20	e5cd0048	 strb        r0, [sp, #0x48]
  05c24	e5dd3048	 ldrb        r3, [sp, #0x48]
  05c28	e1a02003	 mov         r2, r3
  05c2c	e5dd301c	 ldrb        r3, [sp, #0x1C]
  05c30	e1520003	 cmp         r2, r3
  05c34	0a000067	 beq         |$LN3@UpdateData|

; 2005 :                 {
; 2006 :                     if (pPipe->GetDataToggle() == 0)

  05c38	e59d005c	 ldr         r0, [sp, #0x5C]
  05c3c	eb000000	 bl          |?GetDataToggle@CPipe@@QAAEXZ|
  05c40	e5cd0049	 strb        r0, [sp, #0x49]
  05c44	e5dd3049	 ldrb        r3, [sp, #0x49]
  05c48	e3530000	 cmp         r3, #0
  05c4c	1a00001f	 bne         |$LN2@UpdateData|

; 2007 :                         SETREG16(&pOTG->pUsbCsrRegs->ep[USB_ENDPOINT(mappedEP)].RxCSR, RXCSR_H_ClrDataTog);

  05c50	e59d3008	 ldr         r3, [sp, #8]
  05c54	e283001c	 add         r0, r3, #0x1C
  05c58	e5dd3013	 ldrb        r3, [sp, #0x13]
  05c5c	e203100f	 and         r1, r3, #0xF
  05c60	e3a03010	 mov         r3, #0x10
  05c64	e0020391	 mul         r2, r1, r3
  05c68	e5903000	 ldr         r3, [r0]
  05c6c	e0833002	 add         r3, r3, r2
  05c70	e2831006	 add         r1, r3, #6
  05c74	e5d13001	 ldrb        r3, [r1, #1]
  05c78	e1a03403	 mov         r3, r3, lsl #8
  05c7c	e1a02803	 mov         r2, r3, lsl #16
  05c80	e1a02822	 mov         r2, r2, lsr #16
  05c84	e5d13000	 ldrb        r3, [r1]
  05c88	e1833002	 orr         r3, r3, r2
  05c8c	e3833080	 orr         r3, r3, #0x80
  05c90	e1a0e803	 mov         lr, r3, lsl #16
  05c94	e1a0e82e	 mov         lr, lr, lsr #16
  05c98	e59d3008	 ldr         r3, [sp, #8]
  05c9c	e283001c	 add         r0, r3, #0x1C
  05ca0	e5dd3013	 ldrb        r3, [sp, #0x13]
  05ca4	e203100f	 and         r1, r3, #0xF
  05ca8	e3a03010	 mov         r3, #0x10
  05cac	e0020391	 mul         r2, r1, r3
  05cb0	e5903000	 ldr         r3, [r0]
  05cb4	e0833002	 add         r3, r3, r2
  05cb8	e2832006	 add         r2, r3, #6
  05cbc	e1a0300e	 mov         r3, lr
  05cc0	e5c23000	 strb        r3, [r2]
  05cc4	e1a03423	 mov         r3, r3, lsr #8
  05cc8	e5c23001	 strb        r3, [r2, #1]

; 2008 :                     else

  05ccc	ea00001e	 b           |$LN1@UpdateData|
  05cd0		 |$LN2@UpdateData|

; 2009 :                         SETREG16(&pOTG->pUsbCsrRegs->ep[USB_ENDPOINT(mappedEP)].RxCSR, 
; 2010 :                             RXCSR_H_DataTogWrEn|RXCSR_H_DataToggle);

  05cd0	e59d3008	 ldr         r3, [sp, #8]
  05cd4	e283001c	 add         r0, r3, #0x1C
  05cd8	e5dd3013	 ldrb        r3, [sp, #0x13]
  05cdc	e203100f	 and         r1, r3, #0xF
  05ce0	e3a03010	 mov         r3, #0x10
  05ce4	e0020391	 mul         r2, r1, r3
  05ce8	e5903000	 ldr         r3, [r0]
  05cec	e0833002	 add         r3, r3, r2
  05cf0	e2831006	 add         r1, r3, #6
  05cf4	e5d13001	 ldrb        r3, [r1, #1]
  05cf8	e1a03403	 mov         r3, r3, lsl #8
  05cfc	e1a02803	 mov         r2, r3, lsl #16
  05d00	e1a02822	 mov         r2, r2, lsr #16
  05d04	e5d13000	 ldrb        r3, [r1]
  05d08	e1833002	 orr         r3, r3, r2
  05d0c	e3833c06	 orr         r3, r3, #6, 24
  05d10	e1a0e803	 mov         lr, r3, lsl #16
  05d14	e1a0e82e	 mov         lr, lr, lsr #16
  05d18	e59d3008	 ldr         r3, [sp, #8]
  05d1c	e283001c	 add         r0, r3, #0x1C
  05d20	e5dd3013	 ldrb        r3, [sp, #0x13]
  05d24	e203100f	 and         r1, r3, #0xF
  05d28	e3a03010	 mov         r3, #0x10
  05d2c	e0020391	 mul         r2, r1, r3
  05d30	e5903000	 ldr         r3, [r0]
  05d34	e0833002	 add         r3, r3, r2
  05d38	e2832006	 add         r2, r3, #6
  05d3c	e1a0300e	 mov         r3, lr
  05d40	e5c23000	 strb        r3, [r2]
  05d44	e1a03423	 mov         r3, r3, lsr #8
  05d48	e5c23001	 strb        r3, [r2, #1]
  05d4c		 |$LN1@UpdateData|

; 2011 :                         DEBUGMSG(ZONE_DEBUG, (TEXT("UpdateDataToggle for EP 0x%x (mappedEP 0x%x) DeviceAddr(0x%x)=> RxCSR(0x%x)\r\n"),
; 2012 :                         endpoint, mappedEP, pPipe->GetReservedDeviceAddr(), INREG16(&pOTG->pUsbCsrRegs->ep[USB_ENDPOINT(mappedEP)].RxCSR)));

  05d4c	ea00001f	 b           |$LN28@UpdateData|
  05d50	e59d305c	 ldr         r3, [sp, #0x5C]
  05d54	e5933000	 ldr         r3, [r3]
  05d58	e2833028	 add         r3, r3, #0x28
  05d5c	e59d005c	 ldr         r0, [sp, #0x5C]
  05d60	e5933000	 ldr         r3, [r3]
  05d64	e1a0e00f	 mov         lr, pc
  05d68	e12fff13	 bx          r3
  05d6c	e5cd004a	 strb        r0, [sp, #0x4A]
  05d70	e59d3008	 ldr         r3, [sp, #8]
  05d74	e283001c	 add         r0, r3, #0x1C
  05d78	e5dd3013	 ldrb        r3, [sp, #0x13]
  05d7c	e203100f	 and         r1, r3, #0xF
  05d80	e3a03010	 mov         r3, #0x10
  05d84	e0020391	 mul         r2, r1, r3
  05d88	e5903000	 ldr         r3, [r0]
  05d8c	e0833002	 add         r3, r3, r2
  05d90	e2831006	 add         r1, r3, #6
  05d94	e5d13001	 ldrb        r3, [r1, #1]
  05d98	e1a03403	 mov         r3, r3, lsl #8
  05d9c	e1a02803	 mov         r2, r3, lsl #16
  05da0	e1a02822	 mov         r2, r2, lsr #16
  05da4	e5d13000	 ldrb        r3, [r1]
  05da8	e1833002	 orr         r3, r3, r2
  05dac	e58d3000	 str         r3, [sp]
  05db0	e5dd304a	 ldrb        r3, [sp, #0x4A]
  05db4	e5dd2013	 ldrb        r2, [sp, #0x13]
  05db8	e5dd1005	 ldrb        r1, [sp, #5]
  05dbc	e59f0038	 ldr         r0, [pc, #0x38]
  05dc0	eb000000	 bl          NKDbgPrintfW
  05dc4	e3a03001	 mov         r3, #1
  05dc8	e58d304c	 str         r3, [sp, #0x4C]
  05dcc	ea000001	 b           |$LN29@UpdateData|
  05dd0		 |$LN28@UpdateData|
  05dd0	e3a03000	 mov         r3, #0
  05dd4	e58d304c	 str         r3, [sp, #0x4C]
  05dd8		 |$LN29@UpdateData|
  05dd8		 |$LN3@UpdateData|
  05dd8		 |$LN4@UpdateData|
  05dd8		 |$LN5@UpdateData|
  05dd8		 |$LN7@UpdateData|
  05dd8		 |$LN15@UpdateData|

; 2013 : 
; 2014 :                 }
; 2015 :             }
; 2016 : 
; 2017 :         }
; 2018 :     }
; 2019 :     
; 2020 :     LeaveCriticalSection(&pOTG->regCS);

  05dd8	e59d3008	 ldr         r3, [sp, #8]
  05ddc	e2830038	 add         r0, r3, #0x38
  05de0	eb000000	 bl          LeaveCriticalSection

; 2021 :     return TRUE;

  05de4	e3a03001	 mov         r3, #1
  05de8	e58d3024	 str         r3, [sp, #0x24]
  05dec		 |$LN18@UpdateData|

; 2022 : }

  05dec	e59d0024	 ldr         r0, [sp, #0x24]
  05df0	e28dd050	 add         sp, sp, #0x50
  05df4	e89d6000	 ldmia       sp, {sp, lr}
  05df8	e12fff1e	 bx          lr
  05dfc		 |$LN33@UpdateData|
  05dfc		 |$LN34@UpdateData|
  05dfc	00000000	 DCD         |??_C@_1JM@IGINDEAP@?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAD?$AAa?$AAt?$AAa?$AAT?$AAo?$AAg?$AAg?$AAl?$AAe?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAE?$AAP?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?5?$AA?$CI?$AAm?$AAa@|
  05e00		 |$LN35@UpdateData|
  05e00	00000000	 DCD         |??_C@_1CO@DMFPBMHN@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAE?$AAP?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  05e04		 |$LN36@UpdateData|
  05e04	00000000	 DCD         |dpCurSettings|
  05e08		 |$M45311|

			 ENDP  ; |?UpdateDataToggle@CHW@@UAAHQAVCPipe@@HH@Z|, CHW::UpdateDataToggle

	EXPORT	|??_C@_1BO@FAFHFOIE@?$AAT?$AAx?$AAC?$AAS?$AAR?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CE@PLGFCKPI@?$AAT?$AAx?$AAF?$AAI?$AAF?$AAO?$AAs?$AAz?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CE@DCKFNNAE@?$AAR?$AAx?$AAF?$AAI?$AAF?$AAO?$AAs?$AAz?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@DIOBNJOI@?$AAT?$AAx?$AAF?$AAI?$AAF?$AAO?$AAA?$AAd?$AAd?$AAr?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@GNJILIPI@?$AAR?$AAx?$AAF?$AAI?$AAF?$AAO?$AAA?$AAd?$AAd?$AAr?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GC@PPAIPBKJ@?$AAF?$AAI?$AAF?$AAO?$AA?5?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?5?$AAs?$AAe?$AAt?$AAu?$AAp?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAd?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAe?$AAp@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DK@MOCPDLFF@?$AAF?$AAi?$AAf?$AAo?$AA?5?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00178			 AREA	 |.pdata|, PDATA
|$T45345| DCD	|$LN35@InitFIFO|
	DCD	0x40015904

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@FAFHFOIE@?$AAT?$AAx?$AAC?$AAS?$AAR?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "T"
	DCB	0x0, "x", 0x0, "C", 0x0, "S", 0x0, "R", 0x0, " ", 0x0, "="
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@PLGFCKPI@?$AAT?$AAx?$AAF?$AAI?$AAF?$AAO?$AAs?$AAz?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "T"
	DCB	0x0, "x", 0x0, "F", 0x0, "I", 0x0, "F", 0x0, "O", 0x0, "s"
	DCB	0x0, "z", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@DCKFNNAE@?$AAR?$AAx?$AAF?$AAI?$AAF?$AAO?$AAs?$AAz?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "R"
	DCB	0x0, "x", 0x0, "F", 0x0, "I", 0x0, "F", 0x0, "O", 0x0, "s"
	DCB	0x0, "z", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@DIOBNJOI@?$AAT?$AAx?$AAF?$AAI?$AAF?$AAO?$AAA?$AAd?$AAd?$AAr?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "T"
	DCB	0x0, "x", 0x0, "F", 0x0, "I", 0x0, "F", 0x0, "O", 0x0, "A"
	DCB	0x0, "d", 0x0, "d", 0x0, "r", 0x0, " ", 0x0, "=", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@GNJILIPI@?$AAR?$AAx?$AAF?$AAI?$AAF?$AAO?$AAA?$AAd?$AAd?$AAr?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "R"
	DCB	0x0, "x", 0x0, "F", 0x0, "I", 0x0, "F", 0x0, "O", 0x0, "A"
	DCB	0x0, "d", 0x0, "d", 0x0, "r", 0x0, " ", 0x0, "=", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GC@PPAIPBKJ@?$AAF?$AAI?$AAF?$AAO?$AA?5?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?5?$AAs?$AAe?$AAt?$AAu?$AAp?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAd?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAe?$AAp@| DCB "F"
	DCB	0x0, "I", 0x0, "F", 0x0, "O", 0x0, " ", 0x0, "A", 0x0, "d"
	DCB	0x0, "d", 0x0, "r", 0x0, "e", 0x0, "s", 0x0, "s", 0x0, " "
	DCB	0x0, "s", 0x0, "e", 0x0, "t", 0x0, "u", 0x0, "p", 0x0, " "
	DCB	0x0, "f", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "d", 0x0, "e"
	DCB	0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, " ", 0x0, "e"
	DCB	0x0, "p", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " "
	DCB	0x0, "m", 0x0, "a", 0x0, "p", 0x0, "p", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DK@MOCPDLFF@?$AAF?$AAi?$AAf?$AAo?$AA?5?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "F"
	DCB	0x0, "i", 0x0, "f", 0x0, "o", 0x0, " ", 0x0, "s", 0x0, "i"
	DCB	0x0, "z", 0x0, "e", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, ",", 0x0, " ", 0x0, "i", 0x0, "n", 0x0, "d"
	DCB	0x0, "e", 0x0, "x", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  05e08			 AREA	 |.text|, CODE, ARM

  05e08		 |?InitFIFO@CHW@@UAAHQAVCPipe@@@Z| PROC	; CHW::InitFIFO

; 2033 : {

  05e08		 |$LN35@InitFIFO|
  05e08	e1a0c00d	 mov         r12, sp
  05e0c	e92d0003	 stmdb       sp!, {r0, r1}
  05e10	e92d5000	 stmdb       sp!, {r12, lr}
  05e14	e24dd05c	 sub         sp, sp, #0x5C
  05e18		 |$M45342|

; 2034 :     PHSMUSB_T pOTG;    
; 2035 :     int i;
; 2036 : 
; 2037 :     pOTG = (PHSMUSB_T)GetOTGContext();

  05e18	e59d0064	 ldr         r0, [sp, #0x64]
  05e1c	eb000000	 bl          |?GetOTGContext@CHcd@@QAAPAXXZ|
  05e20	e58d002c	 str         r0, [sp, #0x2C]
  05e24	e59d302c	 ldr         r3, [sp, #0x2C]
  05e28	e58d3014	 str         r3, [sp, #0x14]

; 2038 :     if (pOTG == NULL)

  05e2c	e59d3014	 ldr         r3, [sp, #0x14]
  05e30	e3530000	 cmp         r3, #0
  05e34	1a00000d	 bne         |$LN8@InitFIFO|

; 2039 :     {
; 2040 :         DEBUGMSG(ZONE_ERROR, (TEXT("CHW::ConfigEP failed\r\n")));

  05e38	e59f3524	 ldr         r3, [pc, #0x524]
  05e3c	e5933440	 ldr         r3, [r3, #0x440]
  05e40	e3130901	 tst         r3, #1, 18
  05e44	0a000004	 beq         |$LN11@InitFIFO|
  05e48	e59f0518	 ldr         r0, [pc, #0x518]
  05e4c	eb000000	 bl          NKDbgPrintfW
  05e50	e3a03001	 mov         r3, #1
  05e54	e58d3030	 str         r3, [sp, #0x30]
  05e58	ea000001	 b           |$LN12@InitFIFO|
  05e5c		 |$LN11@InitFIFO|
  05e5c	e3a03000	 mov         r3, #0
  05e60	e58d3030	 str         r3, [sp, #0x30]
  05e64		 |$LN12@InitFIFO|

; 2041 :         return FALSE;

  05e64	e3a03000	 mov         r3, #0
  05e68	e58d3028	 str         r3, [sp, #0x28]
  05e6c	ea000130	 b           |$LN9@InitFIFO|
  05e70		 |$LN8@InitFIFO|

; 2042 :     }  
; 2043 : 
; 2044 :     USB_ENDPOINT_DESCRIPTOR endptDesc = pPipe->GetEndptDescriptor();

  05e70	e28d1018	 add         r1, sp, #0x18
  05e74	e59d0068	 ldr         r0, [sp, #0x68]
  05e78	eb000000	 bl          |?GetEndptDescriptor@CPipe@@QAA?AU_USB_ENDPOINT_DESCRIPTOR@@XZ|

; 2045 :     UCHAR endpoint = USB_ENDPOINT(endptDesc.bEndpointAddress);

  05e7c	e5dd301a	 ldrb        r3, [sp, #0x1A]
  05e80	e203300f	 and         r3, r3, #0xF
  05e84	e20330ff	 and         r3, r3, #0xFF
  05e88	e5cd3009	 strb        r3, [sp, #9]

; 2046 :     UCHAR mappedEP = pPipe->GetMappedEndPoint();

  05e8c	e59d0068	 ldr         r0, [sp, #0x68]
  05e90	eb000000	 bl          |?GetMappedEndPoint@CPipe@@QAAEXZ|
  05e94	e5cd0034	 strb        r0, [sp, #0x34]
  05e98	e5dd3034	 ldrb        r3, [sp, #0x34]
  05e9c	e5cd3024	 strb        r3, [sp, #0x24]

; 2047 :     UCHAR outdir   = USB_ENDPOINT_DIRECTION_OUT(endptDesc.bEndpointAddress);

  05ea0	e5dd301a	 ldrb        r3, [sp, #0x1A]
  05ea4	e3130080	 tst         r3, #0x80
  05ea8	1a000002	 bne         |$LN13@InitFIFO|
  05eac	e3a03001	 mov         r3, #1
  05eb0	e5cd3035	 strb        r3, [sp, #0x35]
  05eb4	ea000001	 b           |$LN14@InitFIFO|
  05eb8		 |$LN13@InitFIFO|
  05eb8	e3a03000	 mov         r3, #0
  05ebc	e5cd3035	 strb        r3, [sp, #0x35]
  05ec0		 |$LN14@InitFIFO|
  05ec0	e5dd3035	 ldrb        r3, [sp, #0x35]
  05ec4	e5cd3008	 strb        r3, [sp, #8]

; 2048 : 
; 2049 : 
; 2050 :     EnterCriticalSection(&pOTG->regCS);

  05ec8	e59d3014	 ldr         r3, [sp, #0x14]
  05ecc	e2830038	 add         r0, r3, #0x38
  05ed0	eb000000	 bl          EnterCriticalSection

; 2051 :     // Set the Index Register
; 2052 :     OUTREG8(&pOTG->pUsbGenRegs->Index, USB_ENDPOINT(mappedEP));

  05ed4	e5dd3024	 ldrb        r3, [sp, #0x24]
  05ed8	e203300f	 and         r3, r3, #0xF
  05edc	e20320ff	 and         r2, r3, #0xFF
  05ee0	e59d3014	 ldr         r3, [sp, #0x14]
  05ee4	e2833020	 add         r3, r3, #0x20
  05ee8	e5933000	 ldr         r3, [r3]
  05eec	e283300e	 add         r3, r3, #0xE
  05ef0	e5c32000	 strb        r2, [r3]

; 2053 : 
; 2054 :     USHORT size			  = max(endptDesc.wMaxPacketSize, 8);    

  05ef4	e1dd31bc	 ldrh        r3, [sp, #0x1C]
  05ef8	e3530008	 cmp         r3, #8
  05efc	da000002	 ble         |$LN15@InitFIFO|
  05f00	e1dd31bc	 ldrh        r3, [sp, #0x1C]
  05f04	e58d3038	 str         r3, [sp, #0x38]
  05f08	ea000001	 b           |$LN16@InitFIFO|
  05f0c		 |$LN15@InitFIFO|
  05f0c	e3a03008	 mov         r3, #8
  05f10	e58d3038	 str         r3, [sp, #0x38]
  05f14		 |$LN16@InitFIFO|
  05f14	e59d3038	 ldr         r3, [sp, #0x38]
  05f18	e1a03803	 mov         r3, r3, lsl #16
  05f1c	e1a03823	 mov         r3, r3, lsr #16
  05f20	e1cd31b0	 strh        r3, [sp, #0x10]

; 2055 :     DWORD pwr_of_two	  = size>>3;

  05f24	e1dd31b0	 ldrh        r3, [sp, #0x10]
  05f28	e1a031c3	 mov         r3, r3, asr #3
  05f2c	e58d3000	 str         r3, [sp]

; 2056 :     DWORD fifo_size_index = 0;

  05f30	e3a03000	 mov         r3, #0
  05f34	e58d3020	 str         r3, [sp, #0x20]

; 2057 :     // To avoid the change dynamically, each endpoint has been reserved for
; 2058 :     // max packet size *2 
; 2059 :     DWORD fifo_addr_index = (1024*USB_ENDPOINT(mappedEP))>>3;         

  05f38	e5dd3024	 ldrb        r3, [sp, #0x24]
  05f3c	e203200f	 and         r2, r3, #0xF
  05f40	e3a03b01	 mov         r3, #1, 22
  05f44	e0030392	 mul         r3, r2, r3
  05f48	e1a031c3	 mov         r3, r3, asr #3
  05f4c	e58d3004	 str         r3, [sp, #4]

; 2060 :     
; 2061 :     i = 0;

  05f50	e3a03000	 mov         r3, #0
  05f54	e58d300c	 str         r3, [sp, #0xC]
  05f58		 |$LN7@InitFIFO|

; 2062 :     while (i < 10 ) // max = 4096 i.e. i = 9

  05f58	e59d300c	 ldr         r3, [sp, #0xC]
  05f5c	e353000a	 cmp         r3, #0xA
  05f60	aa00000c	 bge         |$LN6@InitFIFO|

; 2063 :     {
; 2064 :         if (pwr_of_two & (1<<i)) 

  05f64	e59d200c	 ldr         r2, [sp, #0xC]
  05f68	e3a03001	 mov         r3, #1
  05f6c	e1a02213	 mov         r2, r3, lsl r2
  05f70	e59d3000	 ldr         r3, [sp]
  05f74	e1130002	 tst         r3, r2
  05f78	0a000002	 beq         |$LN5@InitFIFO|

; 2065 :         {
; 2066 :             fifo_size_index = i;

  05f7c	e59d300c	 ldr         r3, [sp, #0xC]
  05f80	e58d3020	 str         r3, [sp, #0x20]

; 2067 :             break;

  05f84	ea000003	 b           |$LN6@InitFIFO|
  05f88		 |$LN5@InitFIFO|

; 2068 :         }        
; 2069 :         i++;

  05f88	e59d300c	 ldr         r3, [sp, #0xC]
  05f8c	e2833001	 add         r3, r3, #1
  05f90	e58d300c	 str         r3, [sp, #0xC]

; 2070 :     }

  05f94	eaffffef	 b           |$LN7@InitFIFO|
  05f98		 |$LN6@InitFIFO|

; 2071 : 
; 2072 :     DEBUGMSG(ZONE_HCD|ZONE_DEBUG, (TEXT("Fifo size = %d, index = %d\r\n"), size, fifo_size_index));

  05f98	e59f33c4	 ldr         r3, [pc, #0x3C4]
  05f9c	e5933440	 ldr         r3, [r3, #0x440]
  05fa0	e3130001	 tst         r3, #1
  05fa4	0a000007	 beq         |$LN17@InitFIFO|
  05fa8	e59d2020	 ldr         r2, [sp, #0x20]
  05fac	e1dd31b0	 ldrh        r3, [sp, #0x10]
  05fb0	e1a01003	 mov         r1, r3
  05fb4	e59f03a4	 ldr         r0, [pc, #0x3A4]
  05fb8	eb000000	 bl          NKDbgPrintfW
  05fbc	e3a03001	 mov         r3, #1
  05fc0	e58d303c	 str         r3, [sp, #0x3C]
  05fc4	ea000001	 b           |$LN18@InitFIFO|
  05fc8		 |$LN17@InitFIFO|
  05fc8	e3a03000	 mov         r3, #0
  05fcc	e58d303c	 str         r3, [sp, #0x3C]
  05fd0		 |$LN18@InitFIFO|

; 2073 :     if (endpoint != 0)

  05fd0	e5dd3009	 ldrb        r3, [sp, #9]
  05fd4	e3530000	 cmp         r3, #0
  05fd8	0a000029	 beq         |$LN4@InitFIFO|

; 2074 :     {
; 2075 :         if (outdir)

  05fdc	e5dd3008	 ldrb        r3, [sp, #8]
  05fe0	e3530000	 cmp         r3, #0
  05fe4	0a000013	 beq         |$LN3@InitFIFO|

; 2076 :         {
; 2077 :             OUTREG8(&pOTG->pUsbGenRegs->TxFIFOsz, fifo_size_index);

  05fe8	e59d3020	 ldr         r3, [sp, #0x20]
  05fec	e20320ff	 and         r2, r3, #0xFF
  05ff0	e59d3014	 ldr         r3, [sp, #0x14]
  05ff4	e2833020	 add         r3, r3, #0x20
  05ff8	e5933000	 ldr         r3, [r3]
  05ffc	e2833062	 add         r3, r3, #0x62
  06000	e5c32000	 strb        r2, [r3]

; 2078 :             // Add index 512 = 4096 bytes for seperate the addr from Rx
; 2079 :             OUTREG16(&pOTG->pUsbGenRegs->TxFIFOadd, fifo_addr_index+0x40);                        

  06004	e59d3004	 ldr         r3, [sp, #4]
  06008	e2833040	 add         r3, r3, #0x40
  0600c	e1a01803	 mov         r1, r3, lsl #16
  06010	e1a01821	 mov         r1, r1, lsr #16
  06014	e59d3014	 ldr         r3, [sp, #0x14]
  06018	e2833020	 add         r3, r3, #0x20
  0601c	e5933000	 ldr         r3, [r3]
  06020	e2832064	 add         r2, r3, #0x64
  06024	e1a03001	 mov         r3, r1
  06028	e5c23000	 strb        r3, [r2]
  0602c	e1a03423	 mov         r3, r3, lsr #8
  06030	e5c23001	 strb        r3, [r2, #1]

; 2080 :         }
; 2081 :         else

  06034	ea000011	 b           |$LN2@InitFIFO|
  06038		 |$LN3@InitFIFO|

; 2082 :         {
; 2083 :             OUTREG8(&pOTG->pUsbGenRegs->RxFIFOsz, fifo_size_index);

  06038	e59d3020	 ldr         r3, [sp, #0x20]
  0603c	e20320ff	 and         r2, r3, #0xFF
  06040	e59d3014	 ldr         r3, [sp, #0x14]
  06044	e2833020	 add         r3, r3, #0x20
  06048	e5933000	 ldr         r3, [r3]
  0604c	e2833063	 add         r3, r3, #0x63
  06050	e5c32000	 strb        r2, [r3]

; 2084 :             OUTREG16(&pOTG->pUsbGenRegs->RxFIFOadd, fifo_addr_index);            

  06054	e59d3004	 ldr         r3, [sp, #4]
  06058	e1a01803	 mov         r1, r3, lsl #16
  0605c	e1a01821	 mov         r1, r1, lsr #16
  06060	e59d3014	 ldr         r3, [sp, #0x14]
  06064	e2833020	 add         r3, r3, #0x20
  06068	e5933000	 ldr         r3, [r3]
  0606c	e2832066	 add         r2, r3, #0x66
  06070	e1a03001	 mov         r3, r1
  06074	e5c23000	 strb        r3, [r2]
  06078	e1a03423	 mov         r3, r3, lsr #8
  0607c	e5c23001	 strb        r3, [r2, #1]
  06080		 |$LN2@InitFIFO|

; 2085 : 
; 2086 :         }
; 2087 :     }
; 2088 :     else

  06080	ea000028	 b           |$LN1@InitFIFO|
  06084		 |$LN4@InitFIFO|

; 2089 :     {
; 2090 :         // endpoint 0, set the FIFO size to be 64 bytes
; 2091 :         OUTREG8(&pOTG->pUsbGenRegs->TxFIFOsz, fifo_size_index);

  06084	e59d3020	 ldr         r3, [sp, #0x20]
  06088	e20320ff	 and         r2, r3, #0xFF
  0608c	e59d3014	 ldr         r3, [sp, #0x14]
  06090	e2833020	 add         r3, r3, #0x20
  06094	e5933000	 ldr         r3, [r3]
  06098	e2833062	 add         r3, r3, #0x62
  0609c	e5c32000	 strb        r2, [r3]

; 2092 :         OUTREG16(&pOTG->pUsbGenRegs->TxFIFOadd, fifo_addr_index);

  060a0	e59d3004	 ldr         r3, [sp, #4]
  060a4	e1a01803	 mov         r1, r3, lsl #16
  060a8	e1a01821	 mov         r1, r1, lsr #16
  060ac	e59d3014	 ldr         r3, [sp, #0x14]
  060b0	e2833020	 add         r3, r3, #0x20
  060b4	e5933000	 ldr         r3, [r3]
  060b8	e2832064	 add         r2, r3, #0x64
  060bc	e1a03001	 mov         r3, r1
  060c0	e5c23000	 strb        r3, [r2]
  060c4	e1a03423	 mov         r3, r3, lsr #8
  060c8	e5c23001	 strb        r3, [r2, #1]

; 2093 :         fifo_addr_index = fifo_addr_index + (size>>3);

  060cc	e1dd31b0	 ldrh        r3, [sp, #0x10]
  060d0	e1a021c3	 mov         r2, r3, asr #3
  060d4	e59d3004	 ldr         r3, [sp, #4]
  060d8	e0833002	 add         r3, r3, r2
  060dc	e58d3004	 str         r3, [sp, #4]

; 2094 : 
; 2095 :         OUTREG8(&pOTG->pUsbGenRegs->RxFIFOsz, fifo_size_index);        

  060e0	e59d3020	 ldr         r3, [sp, #0x20]
  060e4	e20320ff	 and         r2, r3, #0xFF
  060e8	e59d3014	 ldr         r3, [sp, #0x14]
  060ec	e2833020	 add         r3, r3, #0x20
  060f0	e5933000	 ldr         r3, [r3]
  060f4	e2833063	 add         r3, r3, #0x63
  060f8	e5c32000	 strb        r2, [r3]

; 2096 :         OUTREG16(&pOTG->pUsbGenRegs->RxFIFOadd, fifo_addr_index);            

  060fc	e59d3004	 ldr         r3, [sp, #4]
  06100	e1a01803	 mov         r1, r3, lsl #16
  06104	e1a01821	 mov         r1, r1, lsr #16
  06108	e59d3014	 ldr         r3, [sp, #0x14]
  0610c	e2833020	 add         r3, r3, #0x20
  06110	e5933000	 ldr         r3, [r3]
  06114	e2832066	 add         r2, r3, #0x66
  06118	e1a03001	 mov         r3, r1
  0611c	e5c23000	 strb        r3, [r2]
  06120	e1a03423	 mov         r3, r3, lsr #8
  06124	e5c23001	 strb        r3, [r2, #1]
  06128		 |$LN1@InitFIFO|

; 2097 :     }
; 2098 : 
; 2099 :     DEBUGMSG(ZONE_DEBUG, (TEXT("FIFO Address setup for device ep %d, mapped %d\r\n"), endpoint, USB_ENDPOINT(mappedEP)));

  06128	ea000008	 b           |$LN19@InitFIFO|
  0612c	e5dd3024	 ldrb        r3, [sp, #0x24]
  06130	e203200f	 and         r2, r3, #0xF
  06134	e5dd3009	 ldrb        r3, [sp, #9]
  06138	e1a01003	 mov         r1, r3
  0613c	e59f0218	 ldr         r0, [pc, #0x218]
  06140	eb000000	 bl          NKDbgPrintfW
  06144	e3a03001	 mov         r3, #1
  06148	e58d3040	 str         r3, [sp, #0x40]
  0614c	ea000001	 b           |$LN20@InitFIFO|
  06150		 |$LN19@InitFIFO|
  06150	e3a03000	 mov         r3, #0
  06154	e58d3040	 str         r3, [sp, #0x40]
  06158		 |$LN20@InitFIFO|

; 2100 :     DEBUGMSG(ZONE_DEBUG, (TEXT("RxFIFOAddr = 0x%x\r\n"), INREG16(&pOTG->pUsbGenRegs->RxFIFOadd)));

  06158	ea00000f	 b           |$LN21@InitFIFO|
  0615c	e59d3014	 ldr         r3, [sp, #0x14]
  06160	e2833020	 add         r3, r3, #0x20
  06164	e5933000	 ldr         r3, [r3]
  06168	e2831066	 add         r1, r3, #0x66
  0616c	e5d13001	 ldrb        r3, [r1, #1]
  06170	e1a03403	 mov         r3, r3, lsl #8
  06174	e1a02803	 mov         r2, r3, lsl #16
  06178	e1a02822	 mov         r2, r2, lsr #16
  0617c	e5d13000	 ldrb        r3, [r1]
  06180	e1833002	 orr         r3, r3, r2
  06184	e1a01003	 mov         r1, r3
  06188	e59f01c8	 ldr         r0, [pc, #0x1C8]
  0618c	eb000000	 bl          NKDbgPrintfW
  06190	e3a03001	 mov         r3, #1
  06194	e58d3044	 str         r3, [sp, #0x44]
  06198	ea000001	 b           |$LN22@InitFIFO|
  0619c		 |$LN21@InitFIFO|
  0619c	e3a03000	 mov         r3, #0
  061a0	e58d3044	 str         r3, [sp, #0x44]
  061a4		 |$LN22@InitFIFO|

; 2101 :     DEBUGMSG(ZONE_DEBUG, (TEXT("TxFIFOAddr = 0x%x\r\n"), INREG16(&pOTG->pUsbGenRegs->TxFIFOadd)));

  061a4	ea00000f	 b           |$LN23@InitFIFO|
  061a8	e59d3014	 ldr         r3, [sp, #0x14]
  061ac	e2833020	 add         r3, r3, #0x20
  061b0	e5933000	 ldr         r3, [r3]
  061b4	e2831064	 add         r1, r3, #0x64
  061b8	e5d13001	 ldrb        r3, [r1, #1]
  061bc	e1a03403	 mov         r3, r3, lsl #8
  061c0	e1a02803	 mov         r2, r3, lsl #16
  061c4	e1a02822	 mov         r2, r2, lsr #16
  061c8	e5d13000	 ldrb        r3, [r1]
  061cc	e1833002	 orr         r3, r3, r2
  061d0	e1a01003	 mov         r1, r3
  061d4	e59f0178	 ldr         r0, [pc, #0x178]
  061d8	eb000000	 bl          NKDbgPrintfW
  061dc	e3a03001	 mov         r3, #1
  061e0	e58d3048	 str         r3, [sp, #0x48]
  061e4	ea000001	 b           |$LN24@InitFIFO|
  061e8		 |$LN23@InitFIFO|
  061e8	e3a03000	 mov         r3, #0
  061ec	e58d3048	 str         r3, [sp, #0x48]
  061f0		 |$LN24@InitFIFO|

; 2102 :     DEBUGMSG(ZONE_DEBUG, (TEXT("RxFIFOsz = 0x%x\r\n"), INREG8(&pOTG->pUsbGenRegs->RxFIFOsz)));

  061f0	ea00000a	 b           |$LN25@InitFIFO|
  061f4	e59d3014	 ldr         r3, [sp, #0x14]
  061f8	e2833020	 add         r3, r3, #0x20
  061fc	e5933000	 ldr         r3, [r3]
  06200	e2833063	 add         r3, r3, #0x63
  06204	e5d33000	 ldrb        r3, [r3]
  06208	e1a01003	 mov         r1, r3
  0620c	e59f013c	 ldr         r0, [pc, #0x13C]
  06210	eb000000	 bl          NKDbgPrintfW
  06214	e3a03001	 mov         r3, #1
  06218	e58d304c	 str         r3, [sp, #0x4C]
  0621c	ea000001	 b           |$LN26@InitFIFO|
  06220		 |$LN25@InitFIFO|
  06220	e3a03000	 mov         r3, #0
  06224	e58d304c	 str         r3, [sp, #0x4C]
  06228		 |$LN26@InitFIFO|

; 2103 :     DEBUGMSG(ZONE_DEBUG, (TEXT("TxFIFOsz = 0x%x\r\n"), INREG8(&pOTG->pUsbGenRegs->TxFIFOsz)));

  06228	ea00000a	 b           |$LN27@InitFIFO|
  0622c	e59d3014	 ldr         r3, [sp, #0x14]
  06230	e2833020	 add         r3, r3, #0x20
  06234	e5933000	 ldr         r3, [r3]
  06238	e2833062	 add         r3, r3, #0x62
  0623c	e5d33000	 ldrb        r3, [r3]
  06240	e1a01003	 mov         r1, r3
  06244	e59f0100	 ldr         r0, [pc, #0x100]
  06248	eb000000	 bl          NKDbgPrintfW
  0624c	e3a03001	 mov         r3, #1
  06250	e58d3050	 str         r3, [sp, #0x50]
  06254	ea000001	 b           |$LN28@InitFIFO|
  06258		 |$LN27@InitFIFO|
  06258	e3a03000	 mov         r3, #0
  0625c	e58d3050	 str         r3, [sp, #0x50]
  06260		 |$LN28@InitFIFO|

; 2104 :     DEBUGMSG(ZONE_DEBUG, (TEXT("RxCSR = 0x%x\r\n"),INREG16(&pOTG->pUsbCsrRegs->ep[USB_ENDPOINT(mappedEP)].RxCSR)));

  06260	ea000014	 b           |$LN29@InitFIFO|
  06264	e59d3014	 ldr         r3, [sp, #0x14]
  06268	e283001c	 add         r0, r3, #0x1C
  0626c	e5dd3024	 ldrb        r3, [sp, #0x24]
  06270	e203100f	 and         r1, r3, #0xF
  06274	e3a03010	 mov         r3, #0x10
  06278	e0020391	 mul         r2, r1, r3
  0627c	e5903000	 ldr         r3, [r0]
  06280	e0833002	 add         r3, r3, r2
  06284	e2831006	 add         r1, r3, #6
  06288	e5d13001	 ldrb        r3, [r1, #1]
  0628c	e1a03403	 mov         r3, r3, lsl #8
  06290	e1a02803	 mov         r2, r3, lsl #16
  06294	e1a02822	 mov         r2, r2, lsr #16
  06298	e5d13000	 ldrb        r3, [r1]
  0629c	e1833002	 orr         r3, r3, r2
  062a0	e1a01003	 mov         r1, r3
  062a4	e59f009c	 ldr         r0, [pc, #0x9C]
  062a8	eb000000	 bl          NKDbgPrintfW
  062ac	e3a03001	 mov         r3, #1
  062b0	e58d3054	 str         r3, [sp, #0x54]
  062b4	ea000001	 b           |$LN30@InitFIFO|
  062b8		 |$LN29@InitFIFO|
  062b8	e3a03000	 mov         r3, #0
  062bc	e58d3054	 str         r3, [sp, #0x54]
  062c0		 |$LN30@InitFIFO|

; 2105 :     DEBUGMSG(ZONE_DEBUG, (TEXT("TxCSR = 0x%x\r\n"),INREG16(&pOTG->pUsbCsrRegs->ep[USB_ENDPOINT(mappedEP)].CSR.TxCSR)));

  062c0	ea000014	 b           |$LN31@InitFIFO|
  062c4	e59d3014	 ldr         r3, [sp, #0x14]
  062c8	e283001c	 add         r0, r3, #0x1C
  062cc	e5dd3024	 ldrb        r3, [sp, #0x24]
  062d0	e203100f	 and         r1, r3, #0xF
  062d4	e3a03010	 mov         r3, #0x10
  062d8	e0020391	 mul         r2, r1, r3
  062dc	e5903000	 ldr         r3, [r0]
  062e0	e0833002	 add         r3, r3, r2
  062e4	e2831002	 add         r1, r3, #2
  062e8	e5d13001	 ldrb        r3, [r1, #1]
  062ec	e1a03403	 mov         r3, r3, lsl #8
  062f0	e1a02803	 mov         r2, r3, lsl #16
  062f4	e1a02822	 mov         r2, r2, lsr #16
  062f8	e5d13000	 ldrb        r3, [r1]
  062fc	e1833002	 orr         r3, r3, r2
  06300	e1a01003	 mov         r1, r3
  06304	e59f0038	 ldr         r0, [pc, #0x38]
  06308	eb000000	 bl          NKDbgPrintfW
  0630c	e3a03001	 mov         r3, #1
  06310	e58d3058	 str         r3, [sp, #0x58]
  06314	ea000001	 b           |$LN32@InitFIFO|
  06318		 |$LN31@InitFIFO|
  06318	e3a03000	 mov         r3, #0
  0631c	e58d3058	 str         r3, [sp, #0x58]
  06320		 |$LN32@InitFIFO|

; 2106 :     
; 2107 :     LeaveCriticalSection(&pOTG->regCS);

  06320	e59d3014	 ldr         r3, [sp, #0x14]
  06324	e2830038	 add         r0, r3, #0x38
  06328	eb000000	 bl          LeaveCriticalSection

; 2108 :     return TRUE;

  0632c	e3a03001	 mov         r3, #1
  06330	e58d3028	 str         r3, [sp, #0x28]
  06334		 |$LN9@InitFIFO|

; 2109 : }

  06334	e59d0028	 ldr         r0, [sp, #0x28]
  06338	e28dd05c	 add         sp, sp, #0x5C
  0633c	e89d6000	 ldmia       sp, {sp, lr}
  06340	e12fff1e	 bx          lr
  06344		 |$LN36@InitFIFO|
  06344		 |$LN37@InitFIFO|
  06344	00000000	 DCD         |??_C@_1BO@FAFHFOIE@?$AAT?$AAx?$AAC?$AAS?$AAR?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  06348		 |$LN38@InitFIFO|
  06348	00000000	 DCD         |??_C@_1BO@NJBFBELE@?$AAR?$AAx?$AAC?$AAS?$AAR?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  0634c		 |$LN39@InitFIFO|
  0634c	00000000	 DCD         |??_C@_1CE@PLGFCKPI@?$AAT?$AAx?$AAF?$AAI?$AAF?$AAO?$AAs?$AAz?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  06350		 |$LN40@InitFIFO|
  06350	00000000	 DCD         |??_C@_1CE@DCKFNNAE@?$AAR?$AAx?$AAF?$AAI?$AAF?$AAO?$AAs?$AAz?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  06354		 |$LN41@InitFIFO|
  06354	00000000	 DCD         |??_C@_1CI@DIOBNJOI@?$AAT?$AAx?$AAF?$AAI?$AAF?$AAO?$AAA?$AAd?$AAd?$AAr?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  06358		 |$LN42@InitFIFO|
  06358	00000000	 DCD         |??_C@_1CI@GNJILIPI@?$AAR?$AAx?$AAF?$AAI?$AAF?$AAO?$AAA?$AAd?$AAd?$AAr?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  0635c		 |$LN43@InitFIFO|
  0635c	00000000	 DCD         |??_C@_1GC@PPAIPBKJ@?$AAF?$AAI?$AAF?$AAO?$AA?5?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?5?$AAs?$AAe?$AAt?$AAu?$AAp?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAd?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAe?$AAp@|
  06360		 |$LN44@InitFIFO|
  06360	00000000	 DCD         |??_C@_1DK@MOCPDLFF@?$AAF?$AAi?$AAf?$AAo?$AA?5?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  06364		 |$LN45@InitFIFO|
  06364	00000000	 DCD         |dpCurSettings|
  06368		 |$LN46@InitFIFO|
  06368	00000000	 DCD         |??_C@_1CO@DMFPBMHN@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAE?$AAP?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  0636c		 |$M45343|

			 ENDP  ; |?InitFIFO@CHW@@UAAHQAVCPipe@@@Z|, CHW::InitFIFO

	EXPORT	|??_C@_1FG@LOOHOAMO@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAE?$AAP?$AA?5?$AA?9?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAt@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HC@KFNJCPAA@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAE?$AAP?$AA?5?$AA?9?$AA?5?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?5?$AAE?$AAP?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DE@NNMMHILM@?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAE?$AAP?$AA?3?$AA?5?$AAR?$AAx?$AAM?$AAa?$AAx?$AAP?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FC@KBBKEMLI@?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAE?$AAP?$AA?3?$AA?5?$AAE?$AAP?$AA0?$AA?5?$AAw?$AAi?$AAt?$AAh?$AA?5?$AAb?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DC@ILIGFAJI@?$AAS?$AAp?$AAe?$AAe?$AAd?$AA?5?$AAo?$AAf?$AA?5?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CE@KJGCHIKP@?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAD?$AAa?$AAt?$AAa?$AA?$DN?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BM@CMOKIKNH@?$AAC?$AAS?$AAR?$AA0?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EI@LDDKLJLD@?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAe?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAs?$AAp?$AAe?$AAe?$AAd?$AA?5?$AAo?$AAf?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAd?$AAe?$AAv?$AAi?$AAc@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HG@LKILFIHC@?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAE?$AAP?$AA?5?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AAM?$AAo?$AAd?$AAe?$AA?$CI?$AA0?$AAx?$AA?$CF?$AAx?$AA?$CJ?$AA?0?$AA?5?$AAE?$AAP?$AA?$CI@| [ DATA ] ; `string'

  00180			 AREA	 |.pdata|, PDATA
|$T45393| DCD	|$LN48@ConfigEP|
	DCD	0x4002d004

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FG@LOOHOAMO@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAE?$AAP?$AA?5?$AA?9?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAt@| DCB "C"
	DCB	0x0, "H", 0x0, "W", 0x0, ":", 0x0, ":", 0x0, "C", 0x0, "o"
	DCB	0x0, "n", 0x0, "f", 0x0, "i", 0x0, "g", 0x0, "E", 0x0, "P"
	DCB	0x0, " ", 0x0, "-", 0x0, " ", 0x0, "n", 0x0, "o", 0x0, "t"
	DCB	0x0, " ", 0x0, "s", 0x0, "u", 0x0, "p", 0x0, "p", 0x0, "o"
	DCB	0x0, "r", 0x0, "t", 0x0, " ", 0x0, "o", 0x0, "f", 0x0, " "
	DCB	0x0, "t", 0x0, "h", 0x0, "i", 0x0, "s", 0x0, " ", 0x0, "t"
	DCB	0x0, "y", 0x0, "p", 0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HC@KFNJCPAA@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAE?$AAP?$AA?5?$AA?9?$AA?5?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?5?$AAE?$AAP?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?5@| DCB "C"
	DCB	0x0, "H", 0x0, "W", 0x0, ":", 0x0, ":", 0x0, "C", 0x0, "o"
	DCB	0x0, "n", 0x0, "f", 0x0, "i", 0x0, "g", 0x0, "E", 0x0, "P"
	DCB	0x0, " ", 0x0, "-", 0x0, " ", 0x0, "C", 0x0, "o", 0x0, "n"
	DCB	0x0, "t", 0x0, "r", 0x0, "o", 0x0, "l", 0x0, " ", 0x0, "E"
	DCB	0x0, "P", 0x0, " ", 0x0, "(", 0x0, "%", 0x0, "d", 0x0, ")"
	DCB	0x0, " ", 0x0, "c", 0x0, "a", 0x0, "n", 0x0, " ", 0x0, "o"
	DCB	0x0, "n", 0x0, "l", 0x0, "y", 0x0, " ", 0x0, "h", 0x0, "a"
	DCB	0x0, "p", 0x0, "p", 0x0, "e", 0x0, "n", 0x0, " ", 0x0, "i"
	DCB	0x0, "n", 0x0, " ", 0x0, "E", 0x0, "P", 0x0, "0", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DE@NNMMHILM@?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAE?$AAP?$AA?3?$AA?5?$AAR?$AAx?$AAM?$AAa?$AAx?$AAP?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "C"
	DCB	0x0, "o", 0x0, "n", 0x0, "f", 0x0, "i", 0x0, "g", 0x0, "E"
	DCB	0x0, "P", 0x0, ":", 0x0, " ", 0x0, "R", 0x0, "x", 0x0, "M"
	DCB	0x0, "a", 0x0, "x", 0x0, "P", 0x0, " ", 0x0, "=", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FC@KBBKEMLI@?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAE?$AAP?$AA?3?$AA?5?$AAE?$AAP?$AA0?$AA?5?$AAw?$AAi?$AAt?$AAh?$AA?5?$AAb?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs@| DCB "C"
	DCB	0x0, "o", 0x0, "n", 0x0, "f", 0x0, "i", 0x0, "g", 0x0, "E"
	DCB	0x0, "P", 0x0, ":", 0x0, " ", 0x0, "E", 0x0, "P", 0x0, "0"
	DCB	0x0, " ", 0x0, "w", 0x0, "i", 0x0, "t", 0x0, "h", 0x0, " "
	DCB	0x0, "b", 0x0, "D", 0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c"
	DCB	0x0, "e", 0x0, "A", 0x0, "d", 0x0, "d", 0x0, "r", 0x0, "e"
	DCB	0x0, "s", 0x0, "s", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DC@ILIGFAJI@?$AAS?$AAp?$AAe?$AAe?$AAd?$AA?5?$AAo?$AAf?$AA?5?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "p", 0x0, "e", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "o"
	DCB	0x0, "f", 0x0, " ", 0x0, "D", 0x0, "e", 0x0, "v", 0x0, "i"
	DCB	0x0, "c", 0x0, "e", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@KJGCHIKP@?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAD?$AAa?$AAt?$AAa?$AA?$DN?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "C"
	DCB	0x0, "o", 0x0, "n", 0x0, "f", 0x0, "i", 0x0, "g", 0x0, "D"
	DCB	0x0, "a", 0x0, "t", 0x0, "a", 0x0, "=", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@CMOKIKNH@?$AAC?$AAS?$AAR?$AA0?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "C"
	DCB	0x0, "S", 0x0, "R", 0x0, "0", 0x0, " ", 0x0, "=", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EI@LDDKLJLD@?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAe?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAs?$AAp?$AAe?$AAe?$AAd?$AA?5?$AAo?$AAf?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAd?$AAe?$AAv?$AAi?$AAc@| DCB "C"
	DCB	0x0, "o", 0x0, "n", 0x0, "f", 0x0, "i", 0x0, "g", 0x0, "u"
	DCB	0x0, "r", 0x0, "e", 0x0, " ", 0x0, "t", 0x0, "h", 0x0, "e"
	DCB	0x0, " ", 0x0, "s", 0x0, "p", 0x0, "e", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "o", 0x0, "f", 0x0, " ", 0x0, "t", 0x0, "h"
	DCB	0x0, "e", 0x0, " ", 0x0, "d", 0x0, "e", 0x0, "v", 0x0, "i"
	DCB	0x0, "c", 0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HG@LKILFIHC@?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAE?$AAP?$AA?5?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AAM?$AAo?$AAd?$AAe?$AA?$CI?$AA0?$AAx?$AA?$CF?$AAx?$AA?$CJ?$AA?0?$AA?5?$AAE?$AAP?$AA?$CI@| DCB "C"
	DCB	0x0, "o", 0x0, "n", 0x0, "f", 0x0, "i", 0x0, "g", 0x0, "E"
	DCB	0x0, "P", 0x0, " ", 0x0, "T", 0x0, "r", 0x0, "a", 0x0, "n"
	DCB	0x0, "s", 0x0, "f", 0x0, "e", 0x0, "r", 0x0, "M", 0x0, "o"
	DCB	0x0, "d", 0x0, "e", 0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "x", 0x0, ")", 0x0, ",", 0x0, " ", 0x0, "E", 0x0, "P"
	DCB	0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, ")"
	DCB	0x0, ",", 0x0, " ", 0x0, "D", 0x0, "e", 0x0, "v", 0x0, "("
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, ")", 0x0, ","
	DCB	0x0, " ", 0x0, "D", 0x0, "I", 0x0, "R", 0x0, ":", 0x0, "%"
	DCB	0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  0636c			 AREA	 |.text|, CODE, ARM

  0636c		 |?ConfigEP@CHW@@UAAHQBU_USB_ENDPOINT_DESCRIPTOR@@EEEEHEH@Z| PROC ; CHW::ConfigEP

; 2125 : {

  0636c		 |$LN48@ConfigEP|
  0636c	e1a0c00d	 mov         r12, sp
  06370	e92d000f	 stmdb       sp!, {r0 - r3}
  06374	e92d5010	 stmdb       sp!, {r4, r12, lr}
  06378	e24dd070	 sub         sp, sp, #0x70
  0637c		 |$M45390|

; 2126 :     PHSMUSB_T pOTG;
; 2127 :     UCHAR endpoint;
; 2128 :     UCHAR protocol;
; 2129 :     UCHAR outdir;
; 2130 :     UCHAR csrIndex;    
; 2131 :     pOTG = (PHSMUSB_T)GetOTGContext();

  0637c	e59d007c	 ldr         r0, [sp, #0x7C]
  06380	eb000000	 bl          |?GetOTGContext@CHcd@@QAAPAXXZ|
  06384	e58d0038	 str         r0, [sp, #0x38]
  06388	e59d3038	 ldr         r3, [sp, #0x38]
  0638c	e58d300c	 str         r3, [sp, #0xC]

; 2132 :     if (pOTG == NULL)

  06390	e59d300c	 ldr         r3, [sp, #0xC]
  06394	e3530000	 cmp         r3, #0
  06398	1a00000d	 bne         |$LN19@ConfigEP|

; 2133 :     {
; 2134 :         DEBUGMSG(ZONE_ERROR, (TEXT("CHW::ConfigEP failed\r\n")));

  0639c	e59f3adc	 ldr         r3, [pc, #0xADC]
  063a0	e5933440	 ldr         r3, [r3, #0x440]
  063a4	e3130901	 tst         r3, #1, 18
  063a8	0a000004	 beq         |$LN22@ConfigEP|
  063ac	e59f0af4	 ldr         r0, [pc, #0xAF4]
  063b0	eb000000	 bl          NKDbgPrintfW
  063b4	e3a03001	 mov         r3, #1
  063b8	e58d303c	 str         r3, [sp, #0x3C]
  063bc	ea000001	 b           |$LN23@ConfigEP|
  063c0		 |$LN22@ConfigEP|
  063c0	e3a03000	 mov         r3, #0
  063c4	e58d303c	 str         r3, [sp, #0x3C]
  063c8		 |$LN23@ConfigEP|

; 2135 :         return FALSE;

  063c8	e3a03000	 mov         r3, #0
  063cc	e58d3018	 str         r3, [sp, #0x18]
  063d0	ea0002a4	 b           |$LN20@ConfigEP|
  063d4		 |$LN19@ConfigEP|

; 2136 :     }
; 2137 : 
; 2138 :     endpoint = USB_ENDPOINT(lpEndpointDescriptor->bEndpointAddress);

  063d4	e59d3080	 ldr         r3, [sp, #0x80]
  063d8	e2833002	 add         r3, r3, #2
  063dc	e5d33000	 ldrb        r3, [r3]
  063e0	e203300f	 and         r3, r3, #0xF
  063e4	e20330ff	 and         r3, r3, #0xFF
  063e8	e5cd3009	 strb        r3, [sp, #9]

; 2139 :     protocol = lpEndpointDescriptor->bmAttributes & USB_ENDPOINT_TYPE_MASK;

  063ec	e59d3080	 ldr         r3, [sp, #0x80]
  063f0	e2833003	 add         r3, r3, #3
  063f4	e5d33000	 ldrb        r3, [r3]
  063f8	e2033003	 and         r3, r3, #3
  063fc	e20330ff	 and         r3, r3, #0xFF
  06400	e5cd300b	 strb        r3, [sp, #0xB]

; 2140 :     outdir = USB_ENDPOINT_DIRECTION_OUT(lpEndpointDescriptor->bEndpointAddress);

  06404	e59d3080	 ldr         r3, [sp, #0x80]
  06408	e2833002	 add         r3, r3, #2
  0640c	e5d33000	 ldrb        r3, [r3]
  06410	e3130080	 tst         r3, #0x80
  06414	1a000002	 bne         |$LN24@ConfigEP|
  06418	e3a03001	 mov         r3, #1
  0641c	e5cd3040	 strb        r3, [sp, #0x40]
  06420	ea000001	 b           |$LN25@ConfigEP|
  06424		 |$LN24@ConfigEP|
  06424	e3a03000	 mov         r3, #0
  06428	e5cd3040	 strb        r3, [sp, #0x40]
  0642c		 |$LN25@ConfigEP|
  0642c	e5dd3040	 ldrb        r3, [sp, #0x40]
  06430	e5cd3008	 strb        r3, [sp, #8]

; 2141 :   
; 2142 :     DEBUGMSG(ZONE_HCD, (TEXT("ConfigEP TransferMode(0x%x), EP(0x%x), Dev(0x%x), DIR:%s\r\n"),
; 2143 :         transferMode, endpoint, bDeviceAddress, outdir?(TEXT("OUT")):(TEXT("IN"))));

  06434	e59f3a44	 ldr         r3, [pc, #0xA44]
  06438	e5933440	 ldr         r3, [r3, #0x440]
  0643c	e3130001	 tst         r3, #1
  06440	0a000011	 beq         |$LN28@ConfigEP|
  06444	e5dd3008	 ldrb        r3, [sp, #8]
  06448	e3530000	 cmp         r3, #0
  0644c	0a000002	 beq         |$LN26@ConfigEP|
  06450	e59f3a4c	 ldr         r3, [pc, #0xA4C]
  06454	e58d3044	 str         r3, [sp, #0x44]
  06458	ea000001	 b           |$LN27@ConfigEP|
  0645c		 |$LN26@ConfigEP|
  0645c	e59f3a3c	 ldr         r3, [pc, #0xA3C]
  06460	e58d3044	 str         r3, [sp, #0x44]
  06464		 |$LN27@ConfigEP|
  06464	e59d3044	 ldr         r3, [sp, #0x44]
  06468	e58d3000	 str         r3, [sp]
  0646c	e5dd3088	 ldrb        r3, [sp, #0x88]
  06470	e5dd2009	 ldrb        r2, [sp, #9]
  06474	e5dd1098	 ldrb        r1, [sp, #0x98]
  06478	e59f0a1c	 ldr         r0, [pc, #0xA1C]
  0647c	eb000000	 bl          NKDbgPrintfW
  06480	e3a03001	 mov         r3, #1
  06484	e58d3048	 str         r3, [sp, #0x48]
  06488	ea000001	 b           |$LN29@ConfigEP|
  0648c		 |$LN28@ConfigEP|
  0648c	e3a03000	 mov         r3, #0
  06490	e58d3048	 str         r3, [sp, #0x48]
  06494		 |$LN29@ConfigEP|

; 2144 : 
; 2145 :     // Set the Index Register
; 2146 :     EnterCriticalSection(&pOTG->regCS); 

  06494	e59d300c	 ldr         r3, [sp, #0xC]
  06498	e2830038	 add         r0, r3, #0x38
  0649c	eb000000	 bl          EnterCriticalSection

; 2147 :     OUTREG8(&pOTG->pUsbGenRegs->Index, INDEX(mappedEP));    

  064a0	e5dd3084	 ldrb        r3, [sp, #0x84]
  064a4	e203300f	 and         r3, r3, #0xF
  064a8	e20320ff	 and         r2, r3, #0xFF
  064ac	e59d300c	 ldr         r3, [sp, #0xC]
  064b0	e2833020	 add         r3, r3, #0x20
  064b4	e5933000	 ldr         r3, [r3]
  064b8	e283300e	 add         r3, r3, #0xE
  064bc	e5c32000	 strb        r2, [r3]

; 2148 : 
; 2149 :     if (endpoint == 0) // Endpoint 0, there is no need to do any configuration

  064c0	e5dd3009	 ldrb        r3, [sp, #9]
  064c4	e3530000	 cmp         r3, #0
  064c8	1a000061	 bne         |$LN18@ConfigEP|

; 2150 :     {
; 2151 :         DEBUGMSG(ZONE_HCD, (TEXT("Configure the speed of the device\r\n")));

  064cc	e59f39ac	 ldr         r3, [pc, #0x9AC]
  064d0	e5933440	 ldr         r3, [r3, #0x440]
  064d4	e3130001	 tst         r3, #1
  064d8	0a000004	 beq         |$LN30@ConfigEP|
  064dc	e59f09b4	 ldr         r0, [pc, #0x9B4]
  064e0	eb000000	 bl          NKDbgPrintfW
  064e4	e3a03001	 mov         r3, #1
  064e8	e58d304c	 str         r3, [sp, #0x4C]
  064ec	ea000001	 b           |$LN31@ConfigEP|
  064f0		 |$LN30@ConfigEP|
  064f0	e3a03000	 mov         r3, #0
  064f4	e58d304c	 str         r3, [sp, #0x4C]
  064f8		 |$LN31@ConfigEP|

; 2152 :         DEBUGMSG(ZONE_HCD, (TEXT("CSR0 = 0x%x\r\n"), pOTG->pUsbCsrRegs->ep[0].CSR.CSR0));

  064f8	e59f3980	 ldr         r3, [pc, #0x980]
  064fc	e5933440	 ldr         r3, [r3, #0x440]
  06500	e3130001	 tst         r3, #1
  06504	0a00000f	 beq         |$LN32@ConfigEP|
  06508	e59d300c	 ldr         r3, [sp, #0xC]
  0650c	e283301c	 add         r3, r3, #0x1C
  06510	e5933000	 ldr         r3, [r3]
  06514	e2831002	 add         r1, r3, #2
  06518	e5d13001	 ldrb        r3, [r1, #1]
  0651c	e1a03403	 mov         r3, r3, lsl #8
  06520	e1a02803	 mov         r2, r3, lsl #16
  06524	e1a02822	 mov         r2, r2, lsr #16
  06528	e5d13000	 ldrb        r3, [r1]
  0652c	e1833002	 orr         r3, r3, r2
  06530	e1a01003	 mov         r1, r3
  06534	e59f0958	 ldr         r0, [pc, #0x958]
  06538	eb000000	 bl          NKDbgPrintfW
  0653c	e3a03001	 mov         r3, #1
  06540	e58d3050	 str         r3, [sp, #0x50]
  06544	ea000001	 b           |$LN33@ConfigEP|
  06548		 |$LN32@ConfigEP|
  06548	e3a03000	 mov         r3, #0
  0654c	e58d3050	 str         r3, [sp, #0x50]
  06550		 |$LN33@ConfigEP|

; 2153 :         DEBUGMSG(ZONE_HCD, (TEXT("ConfigData=0x%x\r\n"), pOTG->pUsbCsrRegs->ep[0].Config.ConfigData));

  06550	e59f3928	 ldr         r3, [pc, #0x928]
  06554	e5933440	 ldr         r3, [r3, #0x440]
  06558	e3130001	 tst         r3, #1
  0655c	0a00000a	 beq         |$LN34@ConfigEP|
  06560	e59d300c	 ldr         r3, [sp, #0xC]
  06564	e283301c	 add         r3, r3, #0x1C
  06568	e5933000	 ldr         r3, [r3]
  0656c	e283300f	 add         r3, r3, #0xF
  06570	e5d33000	 ldrb        r3, [r3]
  06574	e1a01003	 mov         r1, r3
  06578	e59f0910	 ldr         r0, [pc, #0x910]
  0657c	eb000000	 bl          NKDbgPrintfW
  06580	e3a03001	 mov         r3, #1
  06584	e58d3054	 str         r3, [sp, #0x54]
  06588	ea000001	 b           |$LN35@ConfigEP|
  0658c		 |$LN34@ConfigEP|
  0658c	e3a03000	 mov         r3, #0
  06590	e58d3054	 str         r3, [sp, #0x54]
  06594		 |$LN35@ConfigEP|

; 2154 :         DEBUGMSG(ZONE_HCD, (TEXT("Speed of Device = 0x%x\r\n"), speed));

  06594	e59f38e4	 ldr         r3, [pc, #0x8E4]
  06598	e5933440	 ldr         r3, [r3, #0x440]
  0659c	e3130001	 tst         r3, #1
  065a0	0a000005	 beq         |$LN36@ConfigEP|
  065a4	e59d1094	 ldr         r1, [sp, #0x94]
  065a8	e59f08dc	 ldr         r0, [pc, #0x8DC]
  065ac	eb000000	 bl          NKDbgPrintfW
  065b0	e3a03001	 mov         r3, #1
  065b4	e58d3058	 str         r3, [sp, #0x58]
  065b8	ea000001	 b           |$LN37@ConfigEP|
  065bc		 |$LN36@ConfigEP|
  065bc	e3a03000	 mov         r3, #0
  065c0	e58d3058	 str         r3, [sp, #0x58]
  065c4		 |$LN37@ConfigEP|

; 2155 :         DEBUGMSG(ZONE_HCD, (TEXT("ConfigEP: EP0 with bDeviceAddress = %d\r\n"), bDeviceAddress));

  065c4	e59f38b4	 ldr         r3, [pc, #0x8B4]
  065c8	e5933440	 ldr         r3, [r3, #0x440]
  065cc	e3130001	 tst         r3, #1
  065d0	0a000006	 beq         |$LN38@ConfigEP|
  065d4	e5dd3088	 ldrb        r3, [sp, #0x88]
  065d8	e1a01003	 mov         r1, r3
  065dc	e59f08a4	 ldr         r0, [pc, #0x8A4]
  065e0	eb000000	 bl          NKDbgPrintfW
  065e4	e3a03001	 mov         r3, #1
  065e8	e58d305c	 str         r3, [sp, #0x5C]
  065ec	ea000001	 b           |$LN39@ConfigEP|
  065f0		 |$LN38@ConfigEP|
  065f0	e3a03000	 mov         r3, #0
  065f4	e58d305c	 str         r3, [sp, #0x5C]
  065f8		 |$LN39@ConfigEP|

; 2156 :         // Set the speed 
; 2157 :         OUTREG8(&pOTG->pUsbCsrRegs->ep[0].Type.Type0, (speed << 6));

  065f8	e59d3094	 ldr         r3, [sp, #0x94]
  065fc	e1a03303	 mov         r3, r3, lsl #6
  06600	e20320ff	 and         r2, r3, #0xFF
  06604	e59d300c	 ldr         r3, [sp, #0xC]
  06608	e283301c	 add         r3, r3, #0x1C
  0660c	e5933000	 ldr         r3, [r3]
  06610	e283300a	 add         r3, r3, #0xA
  06614	e5c32000	 strb        r2, [r3]

; 2158 :         SetDeviceAddress(mappedEP, bDeviceAddress, bHubAddress, bHubPort, outdir);

  06618	e5dd3008	 ldrb        r3, [sp, #8]
  0661c	e58d3004	 str         r3, [sp, #4]
  06620	e5dd3090	 ldrb        r3, [sp, #0x90]
  06624	e58d3000	 str         r3, [sp]
  06628	e5dd308c	 ldrb        r3, [sp, #0x8C]
  0662c	e5dd2088	 ldrb        r2, [sp, #0x88]
  06630	e5dd1084	 ldrb        r1, [sp, #0x84]
  06634	e59d007c	 ldr         r0, [sp, #0x7C]
  06638	e5900000	 ldr         r0, [r0]
  0663c	e280e064	 add         lr, r0, #0x64
  06640	e59d007c	 ldr         r0, [sp, #0x7C]
  06644	e59e4000	 ldr         r4, [lr]
  06648	e1a0e00f	 mov         lr, pc
  0664c	e12fff14	 bx          r4

; 2159 :     }
; 2160 :     else

  06650	ea0001ff	 b           |$LN17@ConfigEP|
  06654		 |$LN18@ConfigEP|

; 2161 :     {
; 2162 :         csrIndex = INDEX(mappedEP);

  06654	e5dd3084	 ldrb        r3, [sp, #0x84]
  06658	e203300f	 and         r3, r3, #0xF
  0665c	e20330ff	 and         r3, r3, #0xFF
  06660	e5cd300a	 strb        r3, [sp, #0xA]

; 2163 :         // 1. Setup RxType or TxType
; 2164 :         // 2. Setup RxMaxP or TxMaxP
; 2165 :         // 3. Setup Interval
; 2166 :         // 4. Setup RxCSR or TxCSR - data toggle bit
; 2167 :         // 5. Check and see if flush is required
; 2168 :         // 6. Set the TxFuncAddr/RxFuncAddr
; 2169 :         switch (protocol)

  06664	e5dd300b	 ldrb        r3, [sp, #0xB]
  06668	e58d3060	 str         r3, [sp, #0x60]
  0666c	e59d3060	 ldr         r3, [sp, #0x60]
  06670	e3530000	 cmp         r3, #0
  06674	0a0001e1	 beq         |$LN2@ConfigEP|
  06678	e59d3060	 ldr         r3, [sp, #0x60]
  0667c	e3530001	 cmp         r3, #1
  06680	da0001ec	 ble         |$LN1@ConfigEP|
  06684	e59d3060	 ldr         r3, [sp, #0x60]
  06688	e3530003	 cmp         r3, #3
  0668c	da000000	 ble         |$LN14@ConfigEP|
  06690	ea0001e8	 b           |$LN1@ConfigEP|
  06694		 |$LN14@ConfigEP|

; 2170 :         {
; 2171 :         case (USB_ENDPOINT_TYPE_BULK):
; 2172 :         case (USB_ENDPOINT_TYPE_INTERRUPT):
; 2173 :             {
; 2174 :                 if (outdir)

  06694	e5dd3008	 ldrb        r3, [sp, #8]
  06698	e3530000	 cmp         r3, #0
  0669c	0a0000f0	 beq         |$LN13@ConfigEP|

; 2175 :                 {
; 2176 :                     USHORT txcsr;
; 2177 :                     // step 1
; 2178 :                     UCHAR txtype = (UCHAR)RxTxTYPE(speed, protocol, endpoint);

  066a0	e59d3094	 ldr         r3, [sp, #0x94]
  066a4	e1a03303	 mov         r3, r3, lsl #6
  066a8	e20320c0	 and         r2, r3, #0xC0
  066ac	e5dd300b	 ldrb        r3, [sp, #0xB]
  066b0	e1a03203	 mov         r3, r3, lsl #4
  066b4	e2033030	 and         r3, r3, #0x30
  066b8	e1822003	 orr         r2, r2, r3
  066bc	e5dd3009	 ldrb        r3, [sp, #9]
  066c0	e203300f	 and         r3, r3, #0xF
  066c4	e1823003	 orr         r3, r2, r3
  066c8	e20330ff	 and         r3, r3, #0xFF
  066cc	e5cd3010	 strb        r3, [sp, #0x10]

; 2179 :                     OUTREG8(&pOTG->pUsbCsrRegs->ep[csrIndex].Type.TxType, txtype);

  066d0	e59d300c	 ldr         r3, [sp, #0xC]
  066d4	e283001c	 add         r0, r3, #0x1C
  066d8	e5dd300a	 ldrb        r3, [sp, #0xA]
  066dc	e1a01003	 mov         r1, r3
  066e0	e3a03010	 mov         r3, #0x10
  066e4	e0020391	 mul         r2, r1, r3
  066e8	e5903000	 ldr         r3, [r0]
  066ec	e0833002	 add         r3, r3, r2
  066f0	e283200a	 add         r2, r3, #0xA
  066f4	e5dd3010	 ldrb        r3, [sp, #0x10]
  066f8	e5c23000	 strb        r3, [r2]

; 2180 : 
; 2181 :                     // step 2                                        
; 2182 :                     OUTREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].TxMaxP, lpEndpointDescriptor->wMaxPacketSize);

  066fc	e59d3080	 ldr         r3, [sp, #0x80]
  06700	e283e004	 add         lr, r3, #4
  06704	e59d300c	 ldr         r3, [sp, #0xC]
  06708	e283001c	 add         r0, r3, #0x1C
  0670c	e5dd300a	 ldrb        r3, [sp, #0xA]
  06710	e1a01003	 mov         r1, r3
  06714	e3a03010	 mov         r3, #0x10
  06718	e0020391	 mul         r2, r1, r3
  0671c	e5903000	 ldr         r3, [r0]
  06720	e0831002	 add         r1, r3, r2
  06724	e5de3001	 ldrb        r3, [lr, #1]
  06728	e1a03403	 mov         r3, r3, lsl #8
  0672c	e1a02803	 mov         r2, r3, lsl #16
  06730	e1a02822	 mov         r2, r2, lsr #16
  06734	e5de3000	 ldrb        r3, [lr]
  06738	e1833002	 orr         r3, r3, r2
  0673c	e5c13000	 strb        r3, [r1]
  06740	e1a03423	 mov         r3, r3, lsr #8
  06744	e5c13001	 strb        r3, [r1, #1]

; 2183 : 
; 2184 :                     // step 3 - set to 0 at this point, should change later
; 2185 :                     if (protocol == USB_ENDPOINT_TYPE_BULK)

  06748	e5dd300b	 ldrb        r3, [sp, #0xB]
  0674c	e3530002	 cmp         r3, #2
  06750	1a00000b	 bne         |$LN12@ConfigEP|

; 2186 :                         OUTREG8(&pOTG->pUsbCsrRegs->ep[csrIndex].timeout.TxInterval, 0);

  06754	e59d300c	 ldr         r3, [sp, #0xC]
  06758	e283001c	 add         r0, r3, #0x1C
  0675c	e5dd300a	 ldrb        r3, [sp, #0xA]
  06760	e1a01003	 mov         r1, r3
  06764	e3a03010	 mov         r3, #0x10
  06768	e0020391	 mul         r2, r1, r3
  0676c	e5903000	 ldr         r3, [r0]
  06770	e0833002	 add         r3, r3, r2
  06774	e283200b	 add         r2, r3, #0xB
  06778	e3a03000	 mov         r3, #0
  0677c	e5c23000	 strb        r3, [r2]

; 2187 :                     else

  06780	ea00000c	 b           |$LN11@ConfigEP|
  06784		 |$LN12@ConfigEP|

; 2188 :                         OUTREG8(&pOTG->pUsbCsrRegs->ep[csrIndex].timeout.TxInterval, lpEndpointDescriptor->bInterval);

  06784	e59d3080	 ldr         r3, [sp, #0x80]
  06788	e283e006	 add         lr, r3, #6
  0678c	e59d300c	 ldr         r3, [sp, #0xC]
  06790	e283001c	 add         r0, r3, #0x1C
  06794	e5dd300a	 ldrb        r3, [sp, #0xA]
  06798	e1a01003	 mov         r1, r3
  0679c	e3a03010	 mov         r3, #0x10
  067a0	e0020391	 mul         r2, r1, r3
  067a4	e5903000	 ldr         r3, [r0]
  067a8	e0833002	 add         r3, r3, r2
  067ac	e283200b	 add         r2, r3, #0xB
  067b0	e5de3000	 ldrb        r3, [lr]
  067b4	e5c23000	 strb        r3, [r2]
  067b8		 |$LN11@ConfigEP|

; 2189 : 
; 2190 :                     // step 4                     
; 2191 :                     // clear AutoSet, DMAReqEn, FrcDataTog
; 2192 :                     txcsr = (TXCSR_H_AutoSet|TXCSR_H_DMAReqEn|TXCSR_H_FrcDataTog|TXCSR_H_Mode);

  067b8	e3a03b2e	 mov         r3, #0x2E, 22
  067bc	e1cd31b2	 strh        r3, [sp, #0x12]

; 2193 :                     CLRREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].CSR.TxCSR, txcsr);

  067c0	e59d300c	 ldr         r3, [sp, #0xC]
  067c4	e283001c	 add         r0, r3, #0x1C
  067c8	e5dd300a	 ldrb        r3, [sp, #0xA]
  067cc	e1a01003	 mov         r1, r3
  067d0	e3a03010	 mov         r3, #0x10
  067d4	e0020391	 mul         r2, r1, r3
  067d8	e5903000	 ldr         r3, [r0]
  067dc	e0833002	 add         r3, r3, r2
  067e0	e2831002	 add         r1, r3, #2
  067e4	e5d13001	 ldrb        r3, [r1, #1]
  067e8	e1a03403	 mov         r3, r3, lsl #8
  067ec	e1a02803	 mov         r2, r3, lsl #16
  067f0	e1a02822	 mov         r2, r2, lsr #16
  067f4	e5d13000	 ldrb        r3, [r1]
  067f8	e1833002	 orr         r3, r3, r2
  067fc	e1a02003	 mov         r2, r3
  06800	e1dd31b2	 ldrh        r3, [sp, #0x12]
  06804	e1e03003	 mvn         r3, r3
  06808	e0023003	 and         r3, r2, r3
  0680c	e1a0e803	 mov         lr, r3, lsl #16
  06810	e1a0e82e	 mov         lr, lr, lsr #16
  06814	e59d300c	 ldr         r3, [sp, #0xC]
  06818	e283001c	 add         r0, r3, #0x1C
  0681c	e5dd300a	 ldrb        r3, [sp, #0xA]
  06820	e1a01003	 mov         r1, r3
  06824	e3a03010	 mov         r3, #0x10
  06828	e0020391	 mul         r2, r1, r3
  0682c	e5903000	 ldr         r3, [r0]
  06830	e0833002	 add         r3, r3, r2
  06834	e2832002	 add         r2, r3, #2
  06838	e1a0300e	 mov         r3, lr
  0683c	e5c23000	 strb        r3, [r2]
  06840	e1a03423	 mov         r3, r3, lsr #8
  06844	e5c23001	 strb        r3, [r2, #1]

; 2194 : 
; 2195 :                     // if DMA enable, set the AutoSet = 1, DMAReqEnab = 1
; 2196 :                     if (transferMode != TRANSFER_FIFO)

  06848	e5dd3098	 ldrb        r3, [sp, #0x98]
  0684c	e3530000	 cmp         r3, #0
  06850	0a000022	 beq         |$LN10@ConfigEP|

; 2197 :                     {
; 2198 :                         txcsr = (TXCSR_H_AutoSet|TXCSR_H_DMAReqEn|TXCSR_H_DMAReqMode);

  06854	e3a03b25	 mov         r3, #0x25, 22
  06858	e1cd31b2	 strh        r3, [sp, #0x12]

; 2199 :                         SETREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].CSR.TxCSR, txcsr);

  0685c	e59d300c	 ldr         r3, [sp, #0xC]
  06860	e283001c	 add         r0, r3, #0x1C
  06864	e5dd300a	 ldrb        r3, [sp, #0xA]
  06868	e1a01003	 mov         r1, r3
  0686c	e3a03010	 mov         r3, #0x10
  06870	e0020391	 mul         r2, r1, r3
  06874	e5903000	 ldr         r3, [r0]
  06878	e0833002	 add         r3, r3, r2
  0687c	e2831002	 add         r1, r3, #2
  06880	e5d13001	 ldrb        r3, [r1, #1]
  06884	e1a03403	 mov         r3, r3, lsl #8
  06888	e1a02803	 mov         r2, r3, lsl #16
  0688c	e1a02822	 mov         r2, r2, lsr #16
  06890	e5d13000	 ldrb        r3, [r1]
  06894	e1833002	 orr         r3, r3, r2
  06898	e1a02003	 mov         r2, r3
  0689c	e1dd31b2	 ldrh        r3, [sp, #0x12]
  068a0	e1823003	 orr         r3, r2, r3
  068a4	e1a0e803	 mov         lr, r3, lsl #16
  068a8	e1a0e82e	 mov         lr, lr, lsr #16
  068ac	e59d300c	 ldr         r3, [sp, #0xC]
  068b0	e283001c	 add         r0, r3, #0x1C
  068b4	e5dd300a	 ldrb        r3, [sp, #0xA]
  068b8	e1a01003	 mov         r1, r3
  068bc	e3a03010	 mov         r3, #0x10
  068c0	e0020391	 mul         r2, r1, r3
  068c4	e5903000	 ldr         r3, [r0]
  068c8	e0833002	 add         r3, r3, r2
  068cc	e2832002	 add         r2, r3, #2
  068d0	e1a0300e	 mov         r3, lr
  068d4	e5c23000	 strb        r3, [r2]
  068d8	e1a03423	 mov         r3, r3, lsr #8
  068dc	e5c23001	 strb        r3, [r2, #1]
  068e0		 |$LN10@ConfigEP|

; 2200 :                     }
; 2201 : 
; 2202 :                     // set the mode, clr data tog
; 2203 :                     if (bClrTog)

  068e0	e59d309c	 ldr         r3, [sp, #0x9C]
  068e4	e3530000	 cmp         r3, #0
  068e8	0a00001e	 beq         |$LN9@ConfigEP|

; 2204 :                         SETREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].CSR.TxCSR, TXCSR_H_ClrDataTog);

  068ec	e59d300c	 ldr         r3, [sp, #0xC]
  068f0	e283001c	 add         r0, r3, #0x1C
  068f4	e5dd300a	 ldrb        r3, [sp, #0xA]
  068f8	e1a01003	 mov         r1, r3
  068fc	e3a03010	 mov         r3, #0x10
  06900	e0020391	 mul         r2, r1, r3
  06904	e5903000	 ldr         r3, [r0]
  06908	e0833002	 add         r3, r3, r2
  0690c	e2831002	 add         r1, r3, #2
  06910	e5d13001	 ldrb        r3, [r1, #1]
  06914	e1a03403	 mov         r3, r3, lsl #8
  06918	e1a02803	 mov         r2, r3, lsl #16
  0691c	e1a02822	 mov         r2, r2, lsr #16
  06920	e5d13000	 ldrb        r3, [r1]
  06924	e1833002	 orr         r3, r3, r2
  06928	e3833040	 orr         r3, r3, #0x40
  0692c	e1a0e803	 mov         lr, r3, lsl #16
  06930	e1a0e82e	 mov         lr, lr, lsr #16
  06934	e59d300c	 ldr         r3, [sp, #0xC]
  06938	e283001c	 add         r0, r3, #0x1C
  0693c	e5dd300a	 ldrb        r3, [sp, #0xA]
  06940	e1a01003	 mov         r1, r3
  06944	e3a03010	 mov         r3, #0x10
  06948	e0020391	 mul         r2, r1, r3
  0694c	e5903000	 ldr         r3, [r0]
  06950	e0833002	 add         r3, r3, r2
  06954	e2832002	 add         r2, r3, #2
  06958	e1a0300e	 mov         r3, lr
  0695c	e5c23000	 strb        r3, [r2]
  06960	e1a03423	 mov         r3, r3, lsr #8
  06964	e5c23001	 strb        r3, [r2, #1]
  06968		 |$LN9@ConfigEP|

; 2205 : 
; 2206 :                     // step 5
; 2207 :                     if (INREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].CSR.TxCSR) & TXCSR_H_FIFONotEmpty)

  06968	e59d300c	 ldr         r3, [sp, #0xC]
  0696c	e283001c	 add         r0, r3, #0x1C
  06970	e5dd300a	 ldrb        r3, [sp, #0xA]
  06974	e1a01003	 mov         r1, r3
  06978	e3a03010	 mov         r3, #0x10
  0697c	e0020391	 mul         r2, r1, r3
  06980	e5903000	 ldr         r3, [r0]
  06984	e0833002	 add         r3, r3, r2
  06988	e2831002	 add         r1, r3, #2
  0698c	e5d13001	 ldrb        r3, [r1, #1]
  06990	e1a03403	 mov         r3, r3, lsl #8
  06994	e1a02803	 mov         r2, r3, lsl #16
  06998	e1a02822	 mov         r2, r2, lsr #16
  0699c	e5d13000	 ldrb        r3, [r1]
  069a0	e1833002	 orr         r3, r3, r2
  069a4	e3130002	 tst         r3, #2
  069a8	0a00001e	 beq         |$LN8@ConfigEP|

; 2208 :                     {
; 2209 :                         // Need to check if double buffering, if so, do twice.
; 2210 :                         SETREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].CSR.TxCSR, TXCSR_H_FlushFIFO);

  069ac	e59d300c	 ldr         r3, [sp, #0xC]
  069b0	e283001c	 add         r0, r3, #0x1C
  069b4	e5dd300a	 ldrb        r3, [sp, #0xA]
  069b8	e1a01003	 mov         r1, r3
  069bc	e3a03010	 mov         r3, #0x10
  069c0	e0020391	 mul         r2, r1, r3
  069c4	e5903000	 ldr         r3, [r0]
  069c8	e0833002	 add         r3, r3, r2
  069cc	e2831002	 add         r1, r3, #2
  069d0	e5d13001	 ldrb        r3, [r1, #1]
  069d4	e1a03403	 mov         r3, r3, lsl #8
  069d8	e1a02803	 mov         r2, r3, lsl #16
  069dc	e1a02822	 mov         r2, r2, lsr #16
  069e0	e5d13000	 ldrb        r3, [r1]
  069e4	e1833002	 orr         r3, r3, r2
  069e8	e3833008	 orr         r3, r3, #8
  069ec	e1a0e803	 mov         lr, r3, lsl #16
  069f0	e1a0e82e	 mov         lr, lr, lsr #16
  069f4	e59d300c	 ldr         r3, [sp, #0xC]
  069f8	e283001c	 add         r0, r3, #0x1C
  069fc	e5dd300a	 ldrb        r3, [sp, #0xA]
  06a00	e1a01003	 mov         r1, r3
  06a04	e3a03010	 mov         r3, #0x10
  06a08	e0020391	 mul         r2, r1, r3
  06a0c	e5903000	 ldr         r3, [r0]
  06a10	e0833002	 add         r3, r3, r2
  06a14	e2832002	 add         r2, r3, #2
  06a18	e1a0300e	 mov         r3, lr
  06a1c	e5c23000	 strb        r3, [r2]
  06a20	e1a03423	 mov         r3, r3, lsr #8
  06a24	e5c23001	 strb        r3, [r2, #1]
  06a28		 |$LN8@ConfigEP|

; 2211 :                     }
; 2212 : 
; 2213 :                     // Step 6
; 2214 :                     SetDeviceAddress(mappedEP, bDeviceAddress , bHubAddress, bHubPort, outdir);

  06a28	e5dd3008	 ldrb        r3, [sp, #8]
  06a2c	e58d3004	 str         r3, [sp, #4]
  06a30	e5dd3090	 ldrb        r3, [sp, #0x90]
  06a34	e58d3000	 str         r3, [sp]
  06a38	e5dd308c	 ldrb        r3, [sp, #0x8C]
  06a3c	e5dd2088	 ldrb        r2, [sp, #0x88]
  06a40	e5dd1084	 ldrb        r1, [sp, #0x84]
  06a44	e59d007c	 ldr         r0, [sp, #0x7C]
  06a48	e5900000	 ldr         r0, [r0]
  06a4c	e280e064	 add         lr, r0, #0x64
  06a50	e59d007c	 ldr         r0, [sp, #0x7C]
  06a54	e59e4000	 ldr         r4, [lr]
  06a58	e1a0e00f	 mov         lr, pc
  06a5c	e12fff14	 bx          r4

; 2215 :                     
; 2216 :                 }
; 2217 :                 else

  06a60	ea0000e5	 b           |$LN7@ConfigEP|
  06a64		 |$LN13@ConfigEP|

; 2218 :                 {
; 2219 :                     USHORT  rxcsr;
; 2220 :                     
; 2221 :                     // step 0, clear the mode if set in order to enable Rx mode
; 2222 :                     //CLRREG16(&pOTG->pUsbGenRegs->INDEX_REG.hIndex.CSR.TxCSR, TXCSR_H_Mode);
; 2223 :                     //OUTREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].CSR.TxCSR, 0);
; 2224 :                     
; 2225 :                     // step 1
; 2226 :                     UCHAR rxtype = (UCHAR)RxTxTYPE(speed, protocol, endpoint);

  06a64	e59d3094	 ldr         r3, [sp, #0x94]
  06a68	e1a03303	 mov         r3, r3, lsl #6
  06a6c	e20320c0	 and         r2, r3, #0xC0
  06a70	e5dd300b	 ldrb        r3, [sp, #0xB]
  06a74	e1a03203	 mov         r3, r3, lsl #4
  06a78	e2033030	 and         r3, r3, #0x30
  06a7c	e1822003	 orr         r2, r2, r3
  06a80	e5dd3009	 ldrb        r3, [sp, #9]
  06a84	e203300f	 and         r3, r3, #0xF
  06a88	e1823003	 orr         r3, r2, r3
  06a8c	e20330ff	 and         r3, r3, #0xFF
  06a90	e5cd3014	 strb        r3, [sp, #0x14]

; 2227 :                     OUTREG8(&pOTG->pUsbCsrRegs->ep[csrIndex].RxType, rxtype);

  06a94	e59d300c	 ldr         r3, [sp, #0xC]
  06a98	e283001c	 add         r0, r3, #0x1C
  06a9c	e5dd300a	 ldrb        r3, [sp, #0xA]
  06aa0	e1a01003	 mov         r1, r3
  06aa4	e3a03010	 mov         r3, #0x10
  06aa8	e0020391	 mul         r2, r1, r3
  06aac	e5903000	 ldr         r3, [r0]
  06ab0	e0833002	 add         r3, r3, r2
  06ab4	e283200c	 add         r2, r3, #0xC
  06ab8	e5dd3014	 ldrb        r3, [sp, #0x14]
  06abc	e5c23000	 strb        r3, [r2]

; 2228 : 
; 2229 :                     // step 2                    
; 2230 :                     OUTREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].RxMaxP, lpEndpointDescriptor->wMaxPacketSize);

  06ac0	e59d3080	 ldr         r3, [sp, #0x80]
  06ac4	e283e004	 add         lr, r3, #4
  06ac8	e59d300c	 ldr         r3, [sp, #0xC]
  06acc	e283001c	 add         r0, r3, #0x1C
  06ad0	e5dd300a	 ldrb        r3, [sp, #0xA]
  06ad4	e1a01003	 mov         r1, r3
  06ad8	e3a03010	 mov         r3, #0x10
  06adc	e0020391	 mul         r2, r1, r3
  06ae0	e5903000	 ldr         r3, [r0]
  06ae4	e0833002	 add         r3, r3, r2
  06ae8	e2831004	 add         r1, r3, #4
  06aec	e5de3001	 ldrb        r3, [lr, #1]
  06af0	e1a03403	 mov         r3, r3, lsl #8
  06af4	e1a02803	 mov         r2, r3, lsl #16
  06af8	e1a02822	 mov         r2, r2, lsr #16
  06afc	e5de3000	 ldrb        r3, [lr]
  06b00	e1833002	 orr         r3, r3, r2
  06b04	e5c13000	 strb        r3, [r1]
  06b08	e1a03423	 mov         r3, r3, lsr #8
  06b0c	e5c13001	 strb        r3, [r1, #1]

; 2231 :                     DEBUGMSG(ZONE_HCD, (TEXT("ConfigEP: RxMaxP = 0x%x\r\n"), INREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].RxMaxP)));

  06b10	e59f3368	 ldr         r3, [pc, #0x368]
  06b14	e5933440	 ldr         r3, [r3, #0x440]
  06b18	e3130001	 tst         r3, #1
  06b1c	0a000014	 beq         |$LN40@ConfigEP|
  06b20	e59d300c	 ldr         r3, [sp, #0xC]
  06b24	e283001c	 add         r0, r3, #0x1C
  06b28	e5dd300a	 ldrb        r3, [sp, #0xA]
  06b2c	e1a01003	 mov         r1, r3
  06b30	e3a03010	 mov         r3, #0x10
  06b34	e0020391	 mul         r2, r1, r3
  06b38	e5903000	 ldr         r3, [r0]
  06b3c	e0833002	 add         r3, r3, r2
  06b40	e2831004	 add         r1, r3, #4
  06b44	e5d13001	 ldrb        r3, [r1, #1]
  06b48	e1a03403	 mov         r3, r3, lsl #8
  06b4c	e1a02803	 mov         r2, r3, lsl #16
  06b50	e1a02822	 mov         r2, r2, lsr #16
  06b54	e5d13000	 ldrb        r3, [r1]
  06b58	e1833002	 orr         r3, r3, r2
  06b5c	e1a01003	 mov         r1, r3
  06b60	e59f031c	 ldr         r0, [pc, #0x31C]
  06b64	eb000000	 bl          NKDbgPrintfW
  06b68	e3a03001	 mov         r3, #1
  06b6c	e58d3064	 str         r3, [sp, #0x64]
  06b70	ea000001	 b           |$LN41@ConfigEP|
  06b74		 |$LN40@ConfigEP|
  06b74	e3a03000	 mov         r3, #0
  06b78	e58d3064	 str         r3, [sp, #0x64]
  06b7c		 |$LN41@ConfigEP|

; 2232 : 
; 2233 :                     // step 3 - set to 0 at this point, should change later
; 2234 :                     if (protocol == USB_ENDPOINT_TYPE_BULK)

  06b7c	e5dd300b	 ldrb        r3, [sp, #0xB]
  06b80	e3530002	 cmp         r3, #2
  06b84	1a00000b	 bne         |$LN6@ConfigEP|

; 2235 :                         OUTREG8(&pOTG->pUsbCsrRegs->ep[csrIndex].RxInterval, 0);

  06b88	e59d300c	 ldr         r3, [sp, #0xC]
  06b8c	e283001c	 add         r0, r3, #0x1C
  06b90	e5dd300a	 ldrb        r3, [sp, #0xA]
  06b94	e1a01003	 mov         r1, r3
  06b98	e3a03010	 mov         r3, #0x10
  06b9c	e0020391	 mul         r2, r1, r3
  06ba0	e5903000	 ldr         r3, [r0]
  06ba4	e0833002	 add         r3, r3, r2
  06ba8	e283200d	 add         r2, r3, #0xD
  06bac	e3a03000	 mov         r3, #0
  06bb0	e5c23000	 strb        r3, [r2]

; 2236 :                     else

  06bb4	ea00000c	 b           |$LN5@ConfigEP|
  06bb8		 |$LN6@ConfigEP|

; 2237 :                         OUTREG8(&pOTG->pUsbCsrRegs->ep[csrIndex].RxInterval, lpEndpointDescriptor->bInterval);

  06bb8	e59d3080	 ldr         r3, [sp, #0x80]
  06bbc	e283e006	 add         lr, r3, #6
  06bc0	e59d300c	 ldr         r3, [sp, #0xC]
  06bc4	e283001c	 add         r0, r3, #0x1C
  06bc8	e5dd300a	 ldrb        r3, [sp, #0xA]
  06bcc	e1a01003	 mov         r1, r3
  06bd0	e3a03010	 mov         r3, #0x10
  06bd4	e0020391	 mul         r2, r1, r3
  06bd8	e5903000	 ldr         r3, [r0]
  06bdc	e0833002	 add         r3, r3, r2
  06be0	e283200d	 add         r2, r3, #0xD
  06be4	e5de3000	 ldrb        r3, [lr]
  06be8	e5c23000	 strb        r3, [r2]
  06bec		 |$LN5@ConfigEP|

; 2238 : 
; 2239 :                     // step 4                     
; 2240 :                     // clear AutoClr, AutoReq, DMAReqMode,DMAReqEn
; 2241 :                     rxcsr = (RXCSR_H_AutoClr|RXCSR_H_AutoReq|RXCSR_H_DMAReqEn);

  06bec	e3a03a0e	 mov         r3, #0xE, 20
  06bf0	e1cd31b6	 strh        r3, [sp, #0x16]

; 2242 : 
; 2243 :                     CLRREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].RxCSR, rxcsr);

  06bf4	e59d300c	 ldr         r3, [sp, #0xC]
  06bf8	e283001c	 add         r0, r3, #0x1C
  06bfc	e5dd300a	 ldrb        r3, [sp, #0xA]
  06c00	e1a01003	 mov         r1, r3
  06c04	e3a03010	 mov         r3, #0x10
  06c08	e0020391	 mul         r2, r1, r3
  06c0c	e5903000	 ldr         r3, [r0]
  06c10	e0833002	 add         r3, r3, r2
  06c14	e2831006	 add         r1, r3, #6
  06c18	e5d13001	 ldrb        r3, [r1, #1]
  06c1c	e1a03403	 mov         r3, r3, lsl #8
  06c20	e1a02803	 mov         r2, r3, lsl #16
  06c24	e1a02822	 mov         r2, r2, lsr #16
  06c28	e5d13000	 ldrb        r3, [r1]
  06c2c	e1833002	 orr         r3, r3, r2
  06c30	e1a02003	 mov         r2, r3
  06c34	e1dd31b6	 ldrh        r3, [sp, #0x16]
  06c38	e1e03003	 mvn         r3, r3
  06c3c	e0023003	 and         r3, r2, r3
  06c40	e1a0e803	 mov         lr, r3, lsl #16
  06c44	e1a0e82e	 mov         lr, lr, lsr #16
  06c48	e59d300c	 ldr         r3, [sp, #0xC]
  06c4c	e283001c	 add         r0, r3, #0x1C
  06c50	e5dd300a	 ldrb        r3, [sp, #0xA]
  06c54	e1a01003	 mov         r1, r3
  06c58	e3a03010	 mov         r3, #0x10
  06c5c	e0020391	 mul         r2, r1, r3
  06c60	e5903000	 ldr         r3, [r0]
  06c64	e0833002	 add         r3, r3, r2
  06c68	e2832006	 add         r2, r3, #6
  06c6c	e1a0300e	 mov         r3, lr
  06c70	e5c23000	 strb        r3, [r2]
  06c74	e1a03423	 mov         r3, r3, lsr #8
  06c78	e5c23001	 strb        r3, [r2, #1]

; 2244 :                     // set data toggle bit
; 2245 :                     if (bClrTog)

  06c7c	e59d309c	 ldr         r3, [sp, #0x9C]
  06c80	e3530000	 cmp         r3, #0
  06c84	0a00001e	 beq         |$LN4@ConfigEP|

; 2246 :                         SETREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].RxCSR, RXCSR_H_ClrDataTog);

  06c88	e59d300c	 ldr         r3, [sp, #0xC]
  06c8c	e283001c	 add         r0, r3, #0x1C
  06c90	e5dd300a	 ldrb        r3, [sp, #0xA]
  06c94	e1a01003	 mov         r1, r3
  06c98	e3a03010	 mov         r3, #0x10
  06c9c	e0020391	 mul         r2, r1, r3
  06ca0	e5903000	 ldr         r3, [r0]
  06ca4	e0833002	 add         r3, r3, r2
  06ca8	e2831006	 add         r1, r3, #6
  06cac	e5d13001	 ldrb        r3, [r1, #1]
  06cb0	e1a03403	 mov         r3, r3, lsl #8
  06cb4	e1a02803	 mov         r2, r3, lsl #16
  06cb8	e1a02822	 mov         r2, r2, lsr #16
  06cbc	e5d13000	 ldrb        r3, [r1]
  06cc0	e1833002	 orr         r3, r3, r2
  06cc4	e3833080	 orr         r3, r3, #0x80
  06cc8	e1a0e803	 mov         lr, r3, lsl #16
  06ccc	e1a0e82e	 mov         lr, lr, lsr #16
  06cd0	e59d300c	 ldr         r3, [sp, #0xC]
  06cd4	e283001c	 add         r0, r3, #0x1C
  06cd8	e5dd300a	 ldrb        r3, [sp, #0xA]
  06cdc	e1a01003	 mov         r1, r3
  06ce0	e3a03010	 mov         r3, #0x10
  06ce4	e0020391	 mul         r2, r1, r3
  06ce8	e5903000	 ldr         r3, [r0]
  06cec	e0833002	 add         r3, r3, r2
  06cf0	e2832006	 add         r2, r3, #6
  06cf4	e1a0300e	 mov         r3, lr
  06cf8	e5c23000	 strb        r3, [r2]
  06cfc	e1a03423	 mov         r3, r3, lsr #8
  06d00	e5c23001	 strb        r3, [r2, #1]
  06d04		 |$LN4@ConfigEP|

; 2247 : 
; 2248 :                                         
; 2249 :                     // step 5
; 2250 :                     if (INREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].RxCSR) & RXCSR_H_RxPktRdy)

  06d04	e59d300c	 ldr         r3, [sp, #0xC]
  06d08	e283001c	 add         r0, r3, #0x1C
  06d0c	e5dd300a	 ldrb        r3, [sp, #0xA]
  06d10	e1a01003	 mov         r1, r3
  06d14	e3a03010	 mov         r3, #0x10
  06d18	e0020391	 mul         r2, r1, r3
  06d1c	e5903000	 ldr         r3, [r0]
  06d20	e0833002	 add         r3, r3, r2
  06d24	e2831006	 add         r1, r3, #6
  06d28	e5d13001	 ldrb        r3, [r1, #1]
  06d2c	e1a03403	 mov         r3, r3, lsl #8
  06d30	e1a02803	 mov         r2, r3, lsl #16
  06d34	e1a02822	 mov         r2, r2, lsr #16
  06d38	e5d13000	 ldrb        r3, [r1]
  06d3c	e1833002	 orr         r3, r3, r2
  06d40	e3130001	 tst         r3, #1
  06d44	0a00001e	 beq         |$LN3@ConfigEP|

; 2251 :                     {
; 2252 :                         // Need to check if double buffering, if so, do twice.
; 2253 :                         SETREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].RxCSR, RXCSR_H_FlushFIFO);

  06d48	e59d300c	 ldr         r3, [sp, #0xC]
  06d4c	e283001c	 add         r0, r3, #0x1C
  06d50	e5dd300a	 ldrb        r3, [sp, #0xA]
  06d54	e1a01003	 mov         r1, r3
  06d58	e3a03010	 mov         r3, #0x10
  06d5c	e0020391	 mul         r2, r1, r3
  06d60	e5903000	 ldr         r3, [r0]
  06d64	e0833002	 add         r3, r3, r2
  06d68	e2831006	 add         r1, r3, #6
  06d6c	e5d13001	 ldrb        r3, [r1, #1]
  06d70	e1a03403	 mov         r3, r3, lsl #8
  06d74	e1a02803	 mov         r2, r3, lsl #16
  06d78	e1a02822	 mov         r2, r2, lsr #16
  06d7c	e5d13000	 ldrb        r3, [r1]
  06d80	e1833002	 orr         r3, r3, r2
  06d84	e3833010	 orr         r3, r3, #0x10
  06d88	e1a0e803	 mov         lr, r3, lsl #16
  06d8c	e1a0e82e	 mov         lr, lr, lsr #16
  06d90	e59d300c	 ldr         r3, [sp, #0xC]
  06d94	e283001c	 add         r0, r3, #0x1C
  06d98	e5dd300a	 ldrb        r3, [sp, #0xA]
  06d9c	e1a01003	 mov         r1, r3
  06da0	e3a03010	 mov         r3, #0x10
  06da4	e0020391	 mul         r2, r1, r3
  06da8	e5903000	 ldr         r3, [r0]
  06dac	e0833002	 add         r3, r3, r2
  06db0	e2832006	 add         r2, r3, #6
  06db4	e1a0300e	 mov         r3, lr
  06db8	e5c23000	 strb        r3, [r2]
  06dbc	e1a03423	 mov         r3, r3, lsr #8
  06dc0	e5c23001	 strb        r3, [r2, #1]
  06dc4		 |$LN3@ConfigEP|

; 2254 :                     }                    
; 2255 : 
; 2256 :                     // Step 6
; 2257 :                     SetDeviceAddress(mappedEP, bDeviceAddress, bHubAddress, bHubPort, outdir);

  06dc4	e5dd3008	 ldrb        r3, [sp, #8]
  06dc8	e58d3004	 str         r3, [sp, #4]
  06dcc	e5dd3090	 ldrb        r3, [sp, #0x90]
  06dd0	e58d3000	 str         r3, [sp]
  06dd4	e5dd308c	 ldrb        r3, [sp, #0x8C]
  06dd8	e5dd2088	 ldrb        r2, [sp, #0x88]
  06ddc	e5dd1084	 ldrb        r1, [sp, #0x84]
  06de0	e59d007c	 ldr         r0, [sp, #0x7C]
  06de4	e5900000	 ldr         r0, [r0]
  06de8	e280e064	 add         lr, r0, #0x64
  06dec	e59d007c	 ldr         r0, [sp, #0x7C]
  06df0	e59e4000	 ldr         r4, [lr]
  06df4	e1a0e00f	 mov         lr, pc
  06df8	e12fff14	 bx          r4
  06dfc		 |$LN7@ConfigEP|

; 2258 :                 }
; 2259 :             }
; 2260 :             break;

  06dfc	ea000014	 b           |$LN15@ConfigEP|
  06e00		 |$LN2@ConfigEP|

; 2261 :         case (USB_ENDPOINT_TYPE_CONTROL):
; 2262 :             DEBUGMSG(ZONE_ERROR, (TEXT("CHW::ConfigEP - Control EP (%d) can only happen in EP0\r\n"), endpoint));

  06e00	e59f3078	 ldr         r3, [pc, #0x78]
  06e04	e5933440	 ldr         r3, [r3, #0x440]
  06e08	e3130901	 tst         r3, #1, 18
  06e0c	0a000006	 beq         |$LN42@ConfigEP|
  06e10	e5dd3009	 ldrb        r3, [sp, #9]
  06e14	e1a01003	 mov         r1, r3
  06e18	e59f005c	 ldr         r0, [pc, #0x5C]
  06e1c	eb000000	 bl          NKDbgPrintfW
  06e20	e3a03001	 mov         r3, #1
  06e24	e58d3068	 str         r3, [sp, #0x68]
  06e28	ea000001	 b           |$LN43@ConfigEP|
  06e2c		 |$LN42@ConfigEP|
  06e2c	e3a03000	 mov         r3, #0
  06e30	e58d3068	 str         r3, [sp, #0x68]
  06e34		 |$LN43@ConfigEP|

; 2263 :             break;

  06e34	ea000006	 b           |$LN15@ConfigEP|
  06e38		 |$LN1@ConfigEP|

; 2264 :         case (USB_ENDPOINT_TYPE_ISOCHRONOUS):
; 2265 :         default:
; 2266 :             RETAILMSG(1, (TEXT("CHW::ConfigEP - not support of this type\r\n")));

  06e38	e59f0038	 ldr         r0, [pc, #0x38]
  06e3c	eb000000	 bl          NKDbgPrintfW
  06e40	e3a03001	 mov         r3, #1
  06e44	e58d306c	 str         r3, [sp, #0x6C]
  06e48	ea000001	 b           |$LN45@ConfigEP|
  06e4c	e3a03000	 mov         r3, #0
  06e50	e58d306c	 str         r3, [sp, #0x6C]
  06e54		 |$LN45@ConfigEP|
  06e54		 |$LN15@ConfigEP|
  06e54		 |$LN17@ConfigEP|

; 2267 :             break;
; 2268 :         }
; 2269 :     }
; 2270 : 
; 2271 :     LeaveCriticalSection(&pOTG->regCS);    

  06e54	e59d300c	 ldr         r3, [sp, #0xC]
  06e58	e2830038	 add         r0, r3, #0x38
  06e5c	eb000000	 bl          LeaveCriticalSection

; 2272 :     return TRUE;

  06e60	e3a03001	 mov         r3, #1
  06e64	e58d3018	 str         r3, [sp, #0x18]
  06e68		 |$LN20@ConfigEP|

; 2273 : 
; 2274 : }

  06e68	e59d0018	 ldr         r0, [sp, #0x18]
  06e6c	e28dd070	 add         sp, sp, #0x70
  06e70	e89d6010	 ldmia       sp, {r4, sp, lr}
  06e74	e12fff1e	 bx          lr
  06e78		 |$LN49@ConfigEP|
  06e78		 |$LN50@ConfigEP|
  06e78	00000000	 DCD         |??_C@_1FG@LOOHOAMO@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAE?$AAP?$AA?5?$AA?9?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAt@|
  06e7c		 |$LN51@ConfigEP|
  06e7c	00000000	 DCD         |??_C@_1HC@KFNJCPAA@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAE?$AAP?$AA?5?$AA?9?$AA?5?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?5?$AAE?$AAP?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?5@|
  06e80		 |$LN52@ConfigEP|
  06e80	00000000	 DCD         |dpCurSettings|
  06e84		 |$LN53@ConfigEP|
  06e84	00000000	 DCD         |??_C@_1DE@NNMMHILM@?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAE?$AAP?$AA?3?$AA?5?$AAR?$AAx?$AAM?$AAa?$AAx?$AAP?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  06e88		 |$LN54@ConfigEP|
  06e88	00000000	 DCD         |??_C@_1FC@KBBKEMLI@?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAE?$AAP?$AA?3?$AA?5?$AAE?$AAP?$AA0?$AA?5?$AAw?$AAi?$AAt?$AAh?$AA?5?$AAb?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs@|
  06e8c		 |$LN55@ConfigEP|
  06e8c	00000000	 DCD         |??_C@_1DC@ILIGFAJI@?$AAS?$AAp?$AAe?$AAe?$AAd?$AA?5?$AAo?$AAf?$AA?5?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  06e90		 |$LN56@ConfigEP|
  06e90	00000000	 DCD         |??_C@_1CE@KJGCHIKP@?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAD?$AAa?$AAt?$AAa?$AA?$DN?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  06e94		 |$LN57@ConfigEP|
  06e94	00000000	 DCD         |??_C@_1BM@CMOKIKNH@?$AAC?$AAS?$AAR?$AA0?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  06e98		 |$LN58@ConfigEP|
  06e98	00000000	 DCD         |??_C@_1EI@LDDKLJLD@?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAe?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAs?$AAp?$AAe?$AAe?$AAd?$AA?5?$AAo?$AAf?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAd?$AAe?$AAv?$AAi?$AAc@|
  06e9c		 |$LN59@ConfigEP|
  06e9c	00000000	 DCD         |??_C@_1HG@LKILFIHC@?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAE?$AAP?$AA?5?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AAM?$AAo?$AAd?$AAe?$AA?$CI?$AA0?$AAx?$AA?$CF?$AAx?$AA?$CJ?$AA?0?$AA?5?$AAE?$AAP?$AA?$CI@|
  06ea0		 |$LN60@ConfigEP|
  06ea0	00000000	 DCD         |??_C@_15BNKBCKPG@?$AAI?$AAN?$AA?$AA@|
  06ea4		 |$LN61@ConfigEP|
  06ea4	00000000	 DCD         |??_C@_17HCEMPBGG@?$AAO?$AAU?$AAT?$AA?$AA@|
  06ea8		 |$LN62@ConfigEP|
  06ea8	00000000	 DCD         |??_C@_1CO@DMFPBMHN@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAE?$AAP?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  06eac		 |$M45391|

			 ENDP  ; |?ConfigEP@CHW@@UAAHQBU_USB_ENDPOINT_DESCRIPTOR@@EEEEHEH@Z|, CHW::ConfigEP

	EXPORT	|??_C@_1DG@ECBNBIKH@?$AAP?$AAr?$AAi?$AAn?$AAt?$AA?5?$AAR?$AAx?$AAC?$AAS?$AAR?$AA?3?$AA?$CF?$AAx?$AA?5?$AAT?$AAx?$AAC?$AAS?$AAR?$AA?3?$AA?$CF?$AAx?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|?PrintRxTxCSR@CHW@@QAAXE@Z|		; CHW::PrintRxTxCSR

  00188			 AREA	 |.pdata|, PDATA
|$T45414| DCD	|$LN7@PrintRxTxC|
	DCD	0x40004e04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DG@ECBNBIKH@?$AAP?$AAr?$AAi?$AAn?$AAt?$AA?5?$AAR?$AAx?$AAC?$AAS?$AAR?$AA?3?$AA?$CF?$AAx?$AA?5?$AAT?$AAx?$AAC?$AAS?$AAR?$AA?3?$AA?$CF?$AAx?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| DCB "P"
	DCB	0x0, "r", 0x0, "i", 0x0, "n", 0x0, "t", 0x0, " ", 0x0, "R"
	DCB	0x0, "x", 0x0, "C", 0x0, "S", 0x0, "R", 0x0, ":", 0x0, "%"
	DCB	0x0, "x", 0x0, " ", 0x0, "T", 0x0, "x", 0x0, "C", 0x0, "S"
	DCB	0x0, "R", 0x0, ":", 0x0, "%", 0x0, "x", 0x0, " ", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  06eac			 AREA	 |.text|, CODE, ARM

  06eac		 |?PrintRxTxCSR@CHW@@QAAXE@Z| PROC	; CHW::PrintRxTxCSR

; 2276 : {

  06eac		 |$LN7@PrintRxTxC|
  06eac	e1a0c00d	 mov         r12, sp
  06eb0	e92d0003	 stmdb       sp!, {r0, r1}
  06eb4	e92d5000	 stmdb       sp!, {r12, lr}
  06eb8	e24dd014	 sub         sp, sp, #0x14
  06ebc		 |$M45411|

; 2277 :     PHSMUSB_T pOTG = (PHSMUSB_T)GetOTGContext();

  06ebc	e59d001c	 ldr         r0, [sp, #0x1C]
  06ec0	eb000000	 bl          |?GetOTGContext@CHcd@@QAAPAXXZ|
  06ec4	e58d000c	 str         r0, [sp, #0xC]
  06ec8	e59d300c	 ldr         r3, [sp, #0xC]
  06ecc	e58d3004	 str         r3, [sp, #4]

; 2278 :     UCHAR csrIndex = INDEX(MappedEP);

  06ed0	e5dd3020	 ldrb        r3, [sp, #0x20]
  06ed4	e203300f	 and         r3, r3, #0xF
  06ed8	e20330ff	 and         r3, r3, #0xFF
  06edc	e5cd3002	 strb        r3, [sp, #2]

; 2279 :     USHORT reg1 = 0;

  06ee0	e3a03000	 mov         r3, #0
  06ee4	e1cd30b8	 strh        r3, [sp, #8]

; 2280 :     USHORT reg2 = 0;

  06ee8	e3a03000	 mov         r3, #0
  06eec	e1cd30b0	 strh        r3, [sp]

; 2281 :     EnterCriticalSection(&pOTG->regCS);

  06ef0	e59d3004	 ldr         r3, [sp, #4]
  06ef4	e2830038	 add         r0, r3, #0x38
  06ef8	eb000000	 bl          EnterCriticalSection

; 2282 :     OUTREG8(&pOTG->pUsbGenRegs->Index, INDEX(MappedEP));

  06efc	e5dd3020	 ldrb        r3, [sp, #0x20]
  06f00	e203300f	 and         r3, r3, #0xF
  06f04	e20320ff	 and         r2, r3, #0xFF
  06f08	e59d3004	 ldr         r3, [sp, #4]
  06f0c	e2833020	 add         r3, r3, #0x20
  06f10	e5933000	 ldr         r3, [r3]
  06f14	e283300e	 add         r3, r3, #0xE
  06f18	e5c32000	 strb        r2, [r3]

; 2283 :     reg2 = INREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].CSR.TxCSR);

  06f1c	e59d3004	 ldr         r3, [sp, #4]
  06f20	e283001c	 add         r0, r3, #0x1C
  06f24	e5dd3002	 ldrb        r3, [sp, #2]
  06f28	e1a01003	 mov         r1, r3
  06f2c	e3a03010	 mov         r3, #0x10
  06f30	e0020391	 mul         r2, r1, r3
  06f34	e5903000	 ldr         r3, [r0]
  06f38	e0833002	 add         r3, r3, r2
  06f3c	e2831002	 add         r1, r3, #2
  06f40	e5d13001	 ldrb        r3, [r1, #1]
  06f44	e1a03403	 mov         r3, r3, lsl #8
  06f48	e1a02803	 mov         r2, r3, lsl #16
  06f4c	e1a02822	 mov         r2, r2, lsr #16
  06f50	e5d13000	 ldrb        r3, [r1]
  06f54	e1833002	 orr         r3, r3, r2
  06f58	e1cd30b0	 strh        r3, [sp]

; 2284 :     reg1 = INREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].RxCSR);

  06f5c	e59d3004	 ldr         r3, [sp, #4]
  06f60	e283001c	 add         r0, r3, #0x1C
  06f64	e5dd3002	 ldrb        r3, [sp, #2]
  06f68	e1a01003	 mov         r1, r3
  06f6c	e3a03010	 mov         r3, #0x10
  06f70	e0020391	 mul         r2, r1, r3
  06f74	e5903000	 ldr         r3, [r0]
  06f78	e0833002	 add         r3, r3, r2
  06f7c	e2831006	 add         r1, r3, #6
  06f80	e5d13001	 ldrb        r3, [r1, #1]
  06f84	e1a03403	 mov         r3, r3, lsl #8
  06f88	e1a02803	 mov         r2, r3, lsl #16
  06f8c	e1a02822	 mov         r2, r2, lsr #16
  06f90	e5d13000	 ldrb        r3, [r1]
  06f94	e1833002	 orr         r3, r3, r2
  06f98	e1cd30b8	 strh        r3, [sp, #8]

; 2285 :     RETAILMSG(1, (TEXT("Print RxCSR:%x TxCSR:%x \r\n"),reg1,reg2));

  06f9c	e1dd30b0	 ldrh        r3, [sp]
  06fa0	e1a02003	 mov         r2, r3
  06fa4	e1dd30b8	 ldrh        r3, [sp, #8]
  06fa8	e1a01003	 mov         r1, r3
  06fac	e59f002c	 ldr         r0, [pc, #0x2C]
  06fb0	eb000000	 bl          NKDbgPrintfW
  06fb4	e3a03001	 mov         r3, #1
  06fb8	e58d3010	 str         r3, [sp, #0x10]
  06fbc	ea000001	 b           |$LN4@PrintRxTxC|
  06fc0	e3a03000	 mov         r3, #0
  06fc4	e58d3010	 str         r3, [sp, #0x10]
  06fc8		 |$LN4@PrintRxTxC|

; 2286 :     LeaveCriticalSection(&pOTG->regCS);

  06fc8	e59d3004	 ldr         r3, [sp, #4]
  06fcc	e2830038	 add         r0, r3, #0x38
  06fd0	eb000000	 bl          LeaveCriticalSection

; 2287 : }

  06fd4	e28dd014	 add         sp, sp, #0x14
  06fd8	e89d6000	 ldmia       sp, {sp, lr}
  06fdc	e12fff1e	 bx          lr
  06fe0		 |$LN8@PrintRxTxC|
  06fe0		 |$LN9@PrintRxTxC|
  06fe0	00000000	 DCD         |??_C@_1DG@ECBNBIKH@?$AAP?$AAr?$AAi?$AAn?$AAt?$AA?5?$AAR?$AAx?$AAC?$AAS?$AAR?$AA?3?$AA?$CF?$AAx?$AA?5?$AAT?$AAx?$AAC?$AAS?$AAR?$AA?3?$AA?$CF?$AAx?$AA?5?$AA?$AN?$AA?6?$AA?$AA@|
  06fe4		 |$M45412|

			 ENDP  ; |?PrintRxTxCSR@CHW@@QAAXE@Z|, CHW::PrintRxTxCSR

	EXPORT	|??_C@_1EG@PLHCCOK@?$AAT?$AAx?$AAC?$AAS?$AAR?$AA_?$AAH?$AA_?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAa?$AAt?$AA?5?$AAE?$AAP?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AAc?$AAl?$AAe?$AAa?$AAr?$AA?5?$AAi?$AAt@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CM@EHMOJMHC@?$AAT?$AAx?$AAC?$AAS?$AAR?$AA?5?$AAT?$AAx?$AAS?$AAt?$AAa?$AAl?$AAl?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CG@HEKDHLPK@?$AAC?$AAS?$AAR?$AA0?$AA?5?$AAN?$AAA?$AAK?$AA?5?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|?CheckTxCSR@CHW@@QAAKE@Z|		; CHW::CheckTxCSR

  00190			 AREA	 |.pdata|, PDATA
|$T45428| DCD	|$LN19@CheckTxCSR|
	DCD	0x40012804

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EG@PLHCCOK@?$AAT?$AAx?$AAC?$AAS?$AAR?$AA_?$AAH?$AA_?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAa?$AAt?$AA?5?$AAE?$AAP?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AAc?$AAl?$AAe?$AAa?$AAr?$AA?5?$AAi?$AAt@| DCB "T"
	DCB	0x0, "x", 0x0, "C", 0x0, "S", 0x0, "R", 0x0, "_", 0x0, "H"
	DCB	0x0, "_", 0x0, "E", 0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r"
	DCB	0x0, " ", 0x0, "a", 0x0, "t", 0x0, " ", 0x0, "E", 0x0, "P"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "c"
	DCB	0x0, "l", 0x0, "e", 0x0, "a", 0x0, "r", 0x0, " ", 0x0, "i"
	DCB	0x0, "t", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@EHMOJMHC@?$AAT?$AAx?$AAC?$AAS?$AAR?$AA?5?$AAT?$AAx?$AAS?$AAt?$AAa?$AAl?$AAl?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?$AN?$AA?6?$AA?$AA@| DCB "T"
	DCB	0x0, "x", 0x0, "C", 0x0, "S", 0x0, "R", 0x0, " ", 0x0, "T"
	DCB	0x0, "x", 0x0, "S", 0x0, "t", 0x0, "a", 0x0, "l", 0x0, "l"
	DCB	0x0, " ", 0x0, "E", 0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CG@HEKDHLPK@?$AAC?$AAS?$AAR?$AA0?$AA?5?$AAN?$AAA?$AAK?$AA?5?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$AN?$AA?6?$AA?$AA@| DCB "C"
	DCB	0x0, "S", 0x0, "R", 0x0, "0", 0x0, " ", 0x0, "N", 0x0, "A"
	DCB	0x0, "K", 0x0, " ", 0x0, "T", 0x0, "i", 0x0, "m", 0x0, "e"
	DCB	0x0, "o", 0x0, "u", 0x0, "t", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Odtp

  06fe4			 AREA	 |.text|, CODE, ARM

  06fe4		 |?CheckTxCSR@CHW@@QAAKE@Z| PROC	; CHW::CheckTxCSR

; 2291 : {

  06fe4		 |$LN19@CheckTxCSR|
  06fe4	e1a0c00d	 mov         r12, sp
  06fe8	e92d0003	 stmdb       sp!, {r0, r1}
  06fec	e92d5000	 stmdb       sp!, {r12, lr}
  06ff0	e24dd020	 sub         sp, sp, #0x20
  06ff4		 |$M45425|

; 2292 :     PHSMUSB_T pOTG = (PHSMUSB_T)GetOTGContext();

  06ff4	e59d0028	 ldr         r0, [sp, #0x28]
  06ff8	eb000000	 bl          |?GetOTGContext@CHcd@@QAAPAXXZ|
  06ffc	e58d0010	 str         r0, [sp, #0x10]
  07000	e59d3010	 ldr         r3, [sp, #0x10]
  07004	e58d3004	 str         r3, [sp, #4]

; 2293 :     UCHAR csrIndex = INDEX(MappedEP);

  07008	e5dd302c	 ldrb        r3, [sp, #0x2C]
  0700c	e203300f	 and         r3, r3, #0xF
  07010	e20330ff	 and         r3, r3, #0xFF
  07014	e5cd3000	 strb        r3, [sp]

; 2294 : 
; 2295 :     EnterCriticalSection(&pOTG->regCS);

  07018	e59d3004	 ldr         r3, [sp, #4]
  0701c	e2830038	 add         r0, r3, #0x38
  07020	eb000000	 bl          EnterCriticalSection

; 2296 :     OUTREG8(&pOTG->pUsbGenRegs->Index, INDEX(MappedEP));

  07024	e5dd302c	 ldrb        r3, [sp, #0x2C]
  07028	e203300f	 and         r3, r3, #0xF
  0702c	e20320ff	 and         r2, r3, #0xFF
  07030	e59d3004	 ldr         r3, [sp, #4]
  07034	e2833020	 add         r3, r3, #0x20
  07038	e5933000	 ldr         r3, [r3]
  0703c	e283300e	 add         r3, r3, #0xE
  07040	e5c32000	 strb        r2, [r3]

; 2297 :     // First check if RxPktRdy bit is set
; 2298 :     // Read the total no of bytes available
; 2299 :     if (USB_ENDPOINT(MappedEP) == 0) // Endpoint 0, read the COUNT0

  07044	e5dd302c	 ldrb        r3, [sp, #0x2C]
  07048	e313000f	 tst         r3, #0xF
  0704c	1a000041	 bne         |$LN8@CheckTxCSR|

; 2300 :     {
; 2301 :         USHORT reg = INREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].CSR.CSR0);

  07050	e59d3004	 ldr         r3, [sp, #4]
  07054	e283001c	 add         r0, r3, #0x1C
  07058	e5dd3000	 ldrb        r3, [sp]
  0705c	e1a01003	 mov         r1, r3
  07060	e3a03010	 mov         r3, #0x10
  07064	e0020391	 mul         r2, r1, r3
  07068	e5903000	 ldr         r3, [r0]
  0706c	e0833002	 add         r3, r3, r2
  07070	e2831002	 add         r1, r3, #2
  07074	e5d13001	 ldrb        r3, [r1, #1]
  07078	e1a03403	 mov         r3, r3, lsl #8
  0707c	e1a02803	 mov         r2, r3, lsl #16
  07080	e1a02822	 mov         r2, r2, lsr #16
  07084	e5d13000	 ldrb        r3, [r1]
  07088	e1833002	 orr         r3, r3, r2
  0708c	e1cd30b8	 strh        r3, [sp, #8]

; 2302 :         if (reg & CSR0_H_NAKTimeout)

  07090	e1dd30b8	 ldrh        r3, [sp, #8]
  07094	e3130080	 tst         r3, #0x80
  07098	0a00002d	 beq         |$LN7@CheckTxCSR|

; 2303 :         {
; 2304 :             RETAILMSG(1, (TEXT("CSR0 NAK Timeout\r\n")));

  0709c	e59f03dc	 ldr         r0, [pc, #0x3DC]
  070a0	eb000000	 bl          NKDbgPrintfW
  070a4	e3a03001	 mov         r3, #1
  070a8	e58d3014	 str         r3, [sp, #0x14]
  070ac	ea000001	 b           |$LN12@CheckTxCSR|
  070b0	e3a03000	 mov         r3, #0
  070b4	e58d3014	 str         r3, [sp, #0x14]
  070b8		 |$LN12@CheckTxCSR|

; 2305 :             CLRREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].CSR.CSR0, CSR0_H_NAKTimeout);

  070b8	e59d3004	 ldr         r3, [sp, #4]
  070bc	e283001c	 add         r0, r3, #0x1C
  070c0	e5dd3000	 ldrb        r3, [sp]
  070c4	e1a01003	 mov         r1, r3
  070c8	e3a03010	 mov         r3, #0x10
  070cc	e0020391	 mul         r2, r1, r3
  070d0	e5903000	 ldr         r3, [r0]
  070d4	e0833002	 add         r3, r3, r2
  070d8	e2831002	 add         r1, r3, #2
  070dc	e5d13001	 ldrb        r3, [r1, #1]
  070e0	e1a03403	 mov         r3, r3, lsl #8
  070e4	e1a02803	 mov         r2, r3, lsl #16
  070e8	e1a02822	 mov         r2, r2, lsr #16
  070ec	e5d13000	 ldrb        r3, [r1]
  070f0	e1833002	 orr         r3, r3, r2
  070f4	e1a02003	 mov         r2, r3
  070f8	e3e03080	 mvn         r3, #0x80
  070fc	e0023003	 and         r3, r2, r3
  07100	e1a0e803	 mov         lr, r3, lsl #16
  07104	e1a0e82e	 mov         lr, lr, lsr #16
  07108	e59d3004	 ldr         r3, [sp, #4]
  0710c	e283001c	 add         r0, r3, #0x1C
  07110	e5dd3000	 ldrb        r3, [sp]
  07114	e1a01003	 mov         r1, r3
  07118	e3a03010	 mov         r3, #0x10
  0711c	e0020391	 mul         r2, r1, r3
  07120	e5903000	 ldr         r3, [r0]
  07124	e0833002	 add         r3, r3, r2
  07128	e2832002	 add         r2, r3, #2
  0712c	e1a0300e	 mov         r3, lr
  07130	e5c23000	 strb        r3, [r2]
  07134	e1a03423	 mov         r3, r3, lsr #8
  07138	e5c23001	 strb        r3, [r2, #1]

; 2306 :             // Set the ReqPkt again and see            
; 2307 :             LeaveCriticalSection(&pOTG->regCS);

  0713c	e59d3004	 ldr         r3, [sp, #4]
  07140	e2830038	 add         r0, r3, #0x38
  07144	eb000000	 bl          LeaveCriticalSection

; 2308 :             return USB_DEVICE_NOT_RESPONDING_ERROR;

  07148	e3a03005	 mov         r3, #5
  0714c	e58d300c	 str         r3, [sp, #0xC]
  07150	ea0000c4	 b           |$LN9@CheckTxCSR|
  07154		 |$LN7@CheckTxCSR|

; 2309 :         }
; 2310 :     }
; 2311 :     else

  07154	ea0000be	 b           |$LN6@CheckTxCSR|
  07158		 |$LN8@CheckTxCSR|

; 2312 :     {
; 2313 :         USHORT reg = INREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].CSR.TxCSR);

  07158	e59d3004	 ldr         r3, [sp, #4]
  0715c	e283001c	 add         r0, r3, #0x1C
  07160	e5dd3000	 ldrb        r3, [sp]
  07164	e1a01003	 mov         r1, r3
  07168	e3a03010	 mov         r3, #0x10
  0716c	e0020391	 mul         r2, r1, r3
  07170	e5903000	 ldr         r3, [r0]
  07174	e0833002	 add         r3, r3, r2
  07178	e2831002	 add         r1, r3, #2
  0717c	e5d13001	 ldrb        r3, [r1, #1]
  07180	e1a03403	 mov         r3, r3, lsl #8
  07184	e1a02803	 mov         r2, r3, lsl #16
  07188	e1a02822	 mov         r2, r2, lsr #16
  0718c	e5d13000	 ldrb        r3, [r1]
  07190	e1833002	 orr         r3, r3, r2
  07194	e1cd30ba	 strh        r3, [sp, #0xA]

; 2314 :         if (reg & TXCSR_H_NAKTimeout)

  07198	e1dd30ba	 ldrh        r3, [sp, #0xA]
  0719c	e3130080	 tst         r3, #0x80
  071a0	0a000027	 beq         |$LN5@CheckTxCSR|

; 2315 :         {
; 2316 :             CLRREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].CSR.TxCSR, TXCSR_H_NAKTimeout);

  071a4	e59d3004	 ldr         r3, [sp, #4]
  071a8	e283001c	 add         r0, r3, #0x1C
  071ac	e5dd3000	 ldrb        r3, [sp]
  071b0	e1a01003	 mov         r1, r3
  071b4	e3a03010	 mov         r3, #0x10
  071b8	e0020391	 mul         r2, r1, r3
  071bc	e5903000	 ldr         r3, [r0]
  071c0	e0833002	 add         r3, r3, r2
  071c4	e2831002	 add         r1, r3, #2
  071c8	e5d13001	 ldrb        r3, [r1, #1]
  071cc	e1a03403	 mov         r3, r3, lsl #8
  071d0	e1a02803	 mov         r2, r3, lsl #16
  071d4	e1a02822	 mov         r2, r2, lsr #16
  071d8	e5d13000	 ldrb        r3, [r1]
  071dc	e1833002	 orr         r3, r3, r2
  071e0	e1a02003	 mov         r2, r3
  071e4	e3e03080	 mvn         r3, #0x80
  071e8	e0023003	 and         r3, r2, r3
  071ec	e1a0e803	 mov         lr, r3, lsl #16
  071f0	e1a0e82e	 mov         lr, lr, lsr #16
  071f4	e59d3004	 ldr         r3, [sp, #4]
  071f8	e283001c	 add         r0, r3, #0x1C
  071fc	e5dd3000	 ldrb        r3, [sp]
  07200	e1a01003	 mov         r1, r3
  07204	e3a03010	 mov         r3, #0x10
  07208	e0020391	 mul         r2, r1, r3
  0720c	e5903000	 ldr         r3, [r0]
  07210	e0833002	 add         r3, r3, r2
  07214	e2832002	 add         r2, r3, #2
  07218	e1a0300e	 mov         r3, lr
  0721c	e5c23000	 strb        r3, [r2]
  07220	e1a03423	 mov         r3, r3, lsr #8
  07224	e5c23001	 strb        r3, [r2, #1]

; 2317 :             LeaveCriticalSection(&pOTG->regCS);

  07228	e59d3004	 ldr         r3, [sp, #4]
  0722c	e2830038	 add         r0, r3, #0x38
  07230	eb000000	 bl          LeaveCriticalSection

; 2318 :             return USB_DEVICE_NOT_RESPONDING_ERROR;

  07234	e3a03005	 mov         r3, #5
  07238	e58d300c	 str         r3, [sp, #0xC]
  0723c	ea000089	 b           |$LN9@CheckTxCSR|
  07240	ea000083	 b           |$LN4@CheckTxCSR|
  07244		 |$LN5@CheckTxCSR|

; 2319 :         }
; 2320 :         else if (reg & TXCSR_H_RxStall)

  07244	e1dd30ba	 ldrh        r3, [sp, #0xA]
  07248	e3130020	 tst         r3, #0x20
  0724c	0a00004d	 beq         |$LN3@CheckTxCSR|

; 2321 :         {
; 2322 :             RETAILMSG(1, (TEXT("TxCSR TxStall Error\r\n")));

  07250	e59f0224	 ldr         r0, [pc, #0x224]
  07254	eb000000	 bl          NKDbgPrintfW
  07258	e3a03001	 mov         r3, #1
  0725c	e58d3018	 str         r3, [sp, #0x18]
  07260	ea000001	 b           |$LN14@CheckTxCSR|
  07264	e3a03000	 mov         r3, #0
  07268	e58d3018	 str         r3, [sp, #0x18]
  0726c		 |$LN14@CheckTxCSR|

; 2323 :             // Not sure if it should clear in here            
; 2324 :             CLRREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].CSR.TxCSR, TXCSR_H_RxStall);

  0726c	e59d3004	 ldr         r3, [sp, #4]
  07270	e283001c	 add         r0, r3, #0x1C
  07274	e5dd3000	 ldrb        r3, [sp]
  07278	e1a01003	 mov         r1, r3
  0727c	e3a03010	 mov         r3, #0x10
  07280	e0020391	 mul         r2, r1, r3
  07284	e5903000	 ldr         r3, [r0]
  07288	e0833002	 add         r3, r3, r2
  0728c	e2831002	 add         r1, r3, #2
  07290	e5d13001	 ldrb        r3, [r1, #1]
  07294	e1a03403	 mov         r3, r3, lsl #8
  07298	e1a02803	 mov         r2, r3, lsl #16
  0729c	e1a02822	 mov         r2, r2, lsr #16
  072a0	e5d13000	 ldrb        r3, [r1]
  072a4	e1833002	 orr         r3, r3, r2
  072a8	e1a02003	 mov         r2, r3
  072ac	e3e03020	 mvn         r3, #0x20
  072b0	e0023003	 and         r3, r2, r3
  072b4	e1a0e803	 mov         lr, r3, lsl #16
  072b8	e1a0e82e	 mov         lr, lr, lsr #16
  072bc	e59d3004	 ldr         r3, [sp, #4]
  072c0	e283001c	 add         r0, r3, #0x1C
  072c4	e5dd3000	 ldrb        r3, [sp]
  072c8	e1a01003	 mov         r1, r3
  072cc	e3a03010	 mov         r3, #0x10
  072d0	e0020391	 mul         r2, r1, r3
  072d4	e5903000	 ldr         r3, [r0]
  072d8	e0833002	 add         r3, r3, r2
  072dc	e2832002	 add         r2, r3, #2
  072e0	e1a0300e	 mov         r3, lr
  072e4	e5c23000	 strb        r3, [r2]
  072e8	e1a03423	 mov         r3, r3, lsr #8
  072ec	e5c23001	 strb        r3, [r2, #1]

; 2325 :             SETREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].CSR.TxCSR, TXCSR_H_ClrDataTog);

  072f0	e59d3004	 ldr         r3, [sp, #4]
  072f4	e283001c	 add         r0, r3, #0x1C
  072f8	e5dd3000	 ldrb        r3, [sp]
  072fc	e1a01003	 mov         r1, r3
  07300	e3a03010	 mov         r3, #0x10
  07304	e0020391	 mul         r2, r1, r3
  07308	e5903000	 ldr         r3, [r0]
  0730c	e0833002	 add         r3, r3, r2
  07310	e2831002	 add         r1, r3, #2
  07314	e5d13001	 ldrb        r3, [r1, #1]
  07318	e1a03403	 mov         r3, r3, lsl #8
  0731c	e1a02803	 mov         r2, r3, lsl #16
  07320	e1a02822	 mov         r2, r2, lsr #16
  07324	e5d13000	 ldrb        r3, [r1]
  07328	e1833002	 orr         r3, r3, r2
  0732c	e3833040	 orr         r3, r3, #0x40
  07330	e1a0e803	 mov         lr, r3, lsl #16
  07334	e1a0e82e	 mov         lr, lr, lsr #16
  07338	e59d3004	 ldr         r3, [sp, #4]
  0733c	e283001c	 add         r0, r3, #0x1C
  07340	e5dd3000	 ldrb        r3, [sp]
  07344	e1a01003	 mov         r1, r3
  07348	e3a03010	 mov         r3, #0x10
  0734c	e0020391	 mul         r2, r1, r3
  07350	e5903000	 ldr         r3, [r0]
  07354	e0833002	 add         r3, r3, r2
  07358	e2832002	 add         r2, r3, #2
  0735c	e1a0300e	 mov         r3, lr
  07360	e5c23000	 strb        r3, [r2]
  07364	e1a03423	 mov         r3, r3, lsr #8
  07368	e5c23001	 strb        r3, [r2, #1]

; 2326 :             LeaveCriticalSection(&pOTG->regCS);

  0736c	e59d3004	 ldr         r3, [sp, #4]
  07370	e2830038	 add         r0, r3, #0x38
  07374	eb000000	 bl          LeaveCriticalSection

; 2327 :             return USB_STALL_ERROR;

  07378	e3a03004	 mov         r3, #4
  0737c	e58d300c	 str         r3, [sp, #0xC]
  07380	ea000038	 b           |$LN9@CheckTxCSR|
  07384	ea000032	 b           |$LN2@CheckTxCSR|
  07388		 |$LN3@CheckTxCSR|

; 2328 :         }
; 2329 :         else if (reg & TXCSR_H_Error)

  07388	e1dd30ba	 ldrh        r3, [sp, #0xA]
  0738c	e3130004	 tst         r3, #4
  07390	0a00002f	 beq         |$LN1@CheckTxCSR|

; 2330 :         {
; 2331 :             RETAILMSG(1, (TEXT("TxCSR_H_Error at EP %d, clear it\r\n"), csrIndex));

  07394	e5dd3000	 ldrb        r3, [sp]
  07398	e1a01003	 mov         r1, r3
  0739c	e59f00d4	 ldr         r0, [pc, #0xD4]
  073a0	eb000000	 bl          NKDbgPrintfW
  073a4	e3a03001	 mov         r3, #1
  073a8	e58d301c	 str         r3, [sp, #0x1C]
  073ac	ea000001	 b           |$LN16@CheckTxCSR|
  073b0	e3a03000	 mov         r3, #0
  073b4	e58d301c	 str         r3, [sp, #0x1C]
  073b8		 |$LN16@CheckTxCSR|

; 2332 :             CLRREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].CSR.TxCSR, TXCSR_H_Error);

  073b8	e59d3004	 ldr         r3, [sp, #4]
  073bc	e283001c	 add         r0, r3, #0x1C
  073c0	e5dd3000	 ldrb        r3, [sp]
  073c4	e1a01003	 mov         r1, r3
  073c8	e3a03010	 mov         r3, #0x10
  073cc	e0020391	 mul         r2, r1, r3
  073d0	e5903000	 ldr         r3, [r0]
  073d4	e0833002	 add         r3, r3, r2
  073d8	e2831002	 add         r1, r3, #2
  073dc	e5d13001	 ldrb        r3, [r1, #1]
  073e0	e1a03403	 mov         r3, r3, lsl #8
  073e4	e1a02803	 mov         r2, r3, lsl #16
  073e8	e1a02822	 mov         r2, r2, lsr #16
  073ec	e5d13000	 ldrb        r3, [r1]
  073f0	e1833002	 orr         r3, r3, r2
  073f4	e1a02003	 mov         r2, r3
  073f8	e3e03004	 mvn         r3, #4
  073fc	e0023003	 and         r3, r2, r3
  07400	e1a0e803	 mov         lr, r3, lsl #16
  07404	e1a0e82e	 mov         lr, lr, lsr #16
  07408	e59d3004	 ldr         r3, [sp, #4]
  0740c	e283001c	 add         r0, r3, #0x1C
  07410	e5dd3000	 ldrb        r3, [sp]
  07414	e1a01003	 mov         r1, r3
  07418	e3a03010	 mov         r3, #0x10
  0741c	e0020391	 mul         r2, r1, r3
  07420	e5903000	 ldr         r3, [r0]
  07424	e0833002	 add         r3, r3, r2
  07428	e2832002	 add         r2, r3, #2
  0742c	e1a0300e	 mov         r3, lr
  07430	e5c23000	 strb        r3, [r2]
  07434	e1a03423	 mov         r3, r3, lsr #8
  07438	e5c23001	 strb        r3, [r2, #1]

; 2333 :             LeaveCriticalSection(&pOTG->regCS);

  0743c	e59d3004	 ldr         r3, [sp, #4]
  07440	e2830038	 add         r0, r3, #0x38
  07444	eb000000	 bl          LeaveCriticalSection

; 2334 :             return USB_DEVICE_NOT_RESPONDING_ERROR;

  07448	e3a03005	 mov         r3, #5
  0744c	e58d300c	 str         r3, [sp, #0xC]
  07450	ea000004	 b           |$LN9@CheckTxCSR|
  07454		 |$LN1@CheckTxCSR|
  07454		 |$LN2@CheckTxCSR|
  07454		 |$LN4@CheckTxCSR|
  07454		 |$LN6@CheckTxCSR|

; 2335 :         }
; 2336 : 
; 2337 :     }
; 2338 :     LeaveCriticalSection(&pOTG->regCS);

  07454	e59d3004	 ldr         r3, [sp, #4]
  07458	e2830038	 add         r0, r3, #0x38
  0745c	eb000000	 bl          LeaveCriticalSection

; 2339 :     return USB_NO_ERROR;

  07460	e3a03000	 mov         r3, #0
  07464	e58d300c	 str         r3, [sp, #0xC]
  07468		 |$LN9@CheckTxCSR|

; 2340 : }

  07468	e59d000c	 ldr         r0, [sp, #0xC]
  0746c	e28dd020	 add         sp, sp, #0x20
  07470	e89d6000	 ldmia       sp, {sp, lr}
  07474	e12fff1e	 bx          lr
  07478		 |$LN20@CheckTxCSR|
  07478		 |$LN21@CheckTxCSR|
  07478	00000000	 DCD         |??_C@_1EG@PLHCCOK@?$AAT?$AAx?$AAC?$AAS?$AAR?$AA_?$AAH?$AA_?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAa?$AAt?$AA?5?$AAE?$AAP?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AAc?$AAl?$AAe?$AAa?$AAr?$AA?5?$AAi?$AAt@|
  0747c		 |$LN22@CheckTxCSR|
  0747c	00000000	 DCD         |??_C@_1CM@EHMOJMHC@?$AAT?$AAx?$AAC?$AAS?$AAR?$AA?5?$AAT?$AAx?$AAS?$AAt?$AAa?$AAl?$AAl?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?$AN?$AA?6?$AA?$AA@|
  07480		 |$LN23@CheckTxCSR|
  07480	00000000	 DCD         |??_C@_1CG@HEKDHLPK@?$AAC?$AAS?$AAR?$AA0?$AA?5?$AAN?$AAA?$AAK?$AA?5?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$AN?$AA?6?$AA?$AA@|
  07484		 |$M45426|

			 ENDP  ; |?CheckTxCSR@CHW@@QAAKE@Z|, CHW::CheckTxCSR

	EXPORT	|??_C@_1DO@BOLHOPCB@?$AAR?$AAx?$AAC?$AAS?$AAR?$AA?5?$AAR?$AAx?$AAS?$AAt?$AAa?$AAl?$AAl?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAa?$AAt?$AA?5?$AAe?$AAp?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BK@BOEDCOMO@?$AAN?$AAA?$AAK?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CA@DFGPJAME@?$AAE?$AAP?$AAI?$AAN?$AAF?$AAO?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CG@MPMMBINL@?$AAR?$AAx?$AAF?$AAI?$AAF?$AAO?$AAa?$AAd?$AAd?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CG@FEBMBIBF@?$AAT?$AAx?$AAF?$AAI?$AAF?$AAO?$AAa?$AAd?$AAd?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CE@MMHDCDHO@?$AAR?$AAx?$AAF?$AAI?$AAF?$AAO?$AAS?$AAz?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CE@FLDNEIC@?$AAT?$AAx?$AAF?$AAI?$AAF?$AAO?$AAS?$AAz?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CE@KCNNGIAN@?$AAF?$AAI?$AAF?$AAO?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CA@NLAFCFEK@?$AAR?$AAx?$AAM?$AAa?$AAx?$AAP?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@FBGKBILJ@?$AAR?$AAx?$AAI?$AAn?$AAt?$AAe?$AAr?$AAv?$AAa?$AAl?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CA@ILNHIEFH@?$AAR?$AAx?$AAT?$AAy?$AAp?$AAe?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HE@PPBFEKOG@?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?5?$AAp?$AAu?$AAr?$AAp?$AAo?$AAs?$AAe?$AA?0?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAF?$AAI?$AAF?$AAO?$AA?5?$AAa?$AAn?$AAd@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EG@DJCLFNB@?$AAR?$AAx?$AAC?$AAS?$AAR?$AA_?$AAH?$AA_?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAa?$AAt?$AA?5?$AAE?$AAP?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AAc?$AAl?$AAe?$AAa?$AAr?$AA?5?$AAi?$AAt@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@JBMIEODM@?$AAC?$AAh?$AAe?$AAc?$AAk?$AAR?$AAx?$AAC?$AAS?$AAR?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CK@CCMLIFMF@?$AAC?$AAS?$AAR?$AA0?$AA?5?$AAR?$AAx?$AAS?$AAt?$AAa?$AAl?$AAl?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CE@NCLPFOEK@?$AAC?$AAS?$AAR?$AA0?$AA?5?$AAH?$AAa?$AAl?$AAt?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|?CheckRxCSR@CHW@@QAAKE@Z|		; CHW::CheckRxCSR

  00198			 AREA	 |.pdata|, PDATA
|$T45472| DCD	|$LN49@CheckRxCSR|
	DCD	0x40023904

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@BOLHOPCB@?$AAR?$AAx?$AAC?$AAS?$AAR?$AA?5?$AAR?$AAx?$AAS?$AAt?$AAa?$AAl?$AAl?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAa?$AAt?$AA?5?$AAe?$AAp?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "R"
	DCB	0x0, "x", 0x0, "C", 0x0, "S", 0x0, "R", 0x0, " ", 0x0, "R"
	DCB	0x0, "x", 0x0, "S", 0x0, "t", 0x0, "a", 0x0, "l", 0x0, "l"
	DCB	0x0, " ", 0x0, "E", 0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r"
	DCB	0x0, " ", 0x0, "a", 0x0, "t", 0x0, " ", 0x0, "e", 0x0, "p"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BK@BOEDCOMO@?$AAN?$AAA?$AAK?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$AN?$AA?6?$AA?$AA@| DCB "N"
	DCB	0x0, "A", 0x0, "K", 0x0, "T", 0x0, "i", 0x0, "m", 0x0, "e"
	DCB	0x0, "o", 0x0, "u", 0x0, "t", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CA@DFGPJAME@?$AAE?$AAP?$AAI?$AAN?$AAF?$AAO?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "E"
	DCB	0x0, "P", 0x0, "I", 0x0, "N", 0x0, "F", 0x0, "O", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CG@MPMMBINL@?$AAR?$AAx?$AAF?$AAI?$AAF?$AAO?$AAa?$AAd?$AAd?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "R"
	DCB	0x0, "x", 0x0, "F", 0x0, "I", 0x0, "F", 0x0, "O", 0x0, "a"
	DCB	0x0, "d", 0x0, "d", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CG@FEBMBIBF@?$AAT?$AAx?$AAF?$AAI?$AAF?$AAO?$AAa?$AAd?$AAd?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "T"
	DCB	0x0, "x", 0x0, "F", 0x0, "I", 0x0, "F", 0x0, "O", 0x0, "a"
	DCB	0x0, "d", 0x0, "d", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@MMHDCDHO@?$AAR?$AAx?$AAF?$AAI?$AAF?$AAO?$AAS?$AAz?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "R"
	DCB	0x0, "x", 0x0, "F", 0x0, "I", 0x0, "F", 0x0, "O", 0x0, "S"
	DCB	0x0, "z", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@FLDNEIC@?$AAT?$AAx?$AAF?$AAI?$AAF?$AAO?$AAS?$AAz?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "T"
	DCB	0x0, "x", 0x0, "F", 0x0, "I", 0x0, "F", 0x0, "O", 0x0, "S"
	DCB	0x0, "z", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@KCNNGIAN@?$AAF?$AAI?$AAF?$AAO?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "F"
	DCB	0x0, "I", 0x0, "F", 0x0, "O", 0x0, "S", 0x0, "i", 0x0, "z"
	DCB	0x0, "e", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CA@NLAFCFEK@?$AAR?$AAx?$AAM?$AAa?$AAx?$AAP?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "R"
	DCB	0x0, "x", 0x0, "M", 0x0, "a", 0x0, "x", 0x0, "P", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@FBGKBILJ@?$AAR?$AAx?$AAI?$AAn?$AAt?$AAe?$AAr?$AAv?$AAa?$AAl?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "R"
	DCB	0x0, "x", 0x0, "I", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r"
	DCB	0x0, "v", 0x0, "a", 0x0, "l", 0x0, " ", 0x0, "=", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CA@ILNHIEFH@?$AAR?$AAx?$AAT?$AAy?$AAp?$AAe?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "R"
	DCB	0x0, "x", 0x0, "T", 0x0, "y", 0x0, "p", 0x0, "e", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HE@PPBFEKOG@?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?5?$AAp?$AAu?$AAr?$AAp?$AAo?$AAs?$AAe?$AA?0?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAF?$AAI?$AAF?$AAO?$AA?5?$AAa?$AAn?$AAd@| DCB "D"
	DCB	0x0, "e", 0x0, "b", 0x0, "u", 0x0, "g", 0x0, " ", 0x0, "p"
	DCB	0x0, "u", 0x0, "r", 0x0, "p", 0x0, "o", 0x0, "s", 0x0, "e"
	DCB	0x0, ",", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "a", 0x0, "d"
	DCB	0x0, " ", 0x0, "t", 0x0, "h", 0x0, "e", 0x0, " ", 0x0, "F"
	DCB	0x0, "I", 0x0, "F", 0x0, "O", 0x0, " ", 0x0, "a", 0x0, "n"
	DCB	0x0, "d", 0x0, " ", 0x0, "s", 0x0, "e", 0x0, "e", 0x0, " "
	DCB	0x0, "w", 0x0, "h", 0x0, "a", 0x0, "t", 0x0, " ", 0x0, "i"
	DCB	0x0, "t", 0x0, " ", 0x0, "i", 0x0, "s", 0x0, " ", 0x0, "="
	DCB	0x0, ">", 0x0, " ", 0x0, "h", 0x0, "a", 0x0, "c", 0x0, "k"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EG@DJCLFNB@?$AAR?$AAx?$AAC?$AAS?$AAR?$AA_?$AAH?$AA_?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAa?$AAt?$AA?5?$AAE?$AAP?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AAc?$AAl?$AAe?$AAa?$AAr?$AA?5?$AAi?$AAt@| DCB "R"
	DCB	0x0, "x", 0x0, "C", 0x0, "S", 0x0, "R", 0x0, "_", 0x0, "H"
	DCB	0x0, "_", 0x0, "E", 0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r"
	DCB	0x0, " ", 0x0, "a", 0x0, "t", 0x0, " ", 0x0, "E", 0x0, "P"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "c"
	DCB	0x0, "l", 0x0, "e", 0x0, "a", 0x0, "r", 0x0, " ", 0x0, "i"
	DCB	0x0, "t", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@JBMIEODM@?$AAC?$AAh?$AAe?$AAc?$AAk?$AAR?$AAx?$AAC?$AAS?$AAR?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "C"
	DCB	0x0, "h", 0x0, "e", 0x0, "c", 0x0, "k", 0x0, "R", 0x0, "x"
	DCB	0x0, "C", 0x0, "S", 0x0, "R", 0x0, " ", 0x0, "=", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CK@CCMLIFMF@?$AAC?$AAS?$AAR?$AA0?$AA?5?$AAR?$AAx?$AAS?$AAt?$AAa?$AAl?$AAl?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?$AN?$AA?6?$AA?$AA@| DCB "C"
	DCB	0x0, "S", 0x0, "R", 0x0, "0", 0x0, " ", 0x0, "R", 0x0, "x"
	DCB	0x0, "S", 0x0, "t", 0x0, "a", 0x0, "l", 0x0, "l", 0x0, " "
	DCB	0x0, "E", 0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@NCLPFOEK@?$AAC?$AAS?$AAR?$AA0?$AA?5?$AAH?$AAa?$AAl?$AAt?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?$AN?$AA?6?$AA?$AA@| DCB "C"
	DCB	0x0, "S", 0x0, "R", 0x0, "0", 0x0, " ", 0x0, "H", 0x0, "a"
	DCB	0x0, "l", 0x0, "t", 0x0, " ", 0x0, "E", 0x0, "r", 0x0, "r"
	DCB	0x0, "o", 0x0, "r", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  07484			 AREA	 |.text|, CODE, ARM

  07484		 |?CheckRxCSR@CHW@@QAAKE@Z| PROC	; CHW::CheckRxCSR

; 2343 : {

  07484		 |$LN49@CheckRxCSR|
  07484	e1a0c00d	 mov         r12, sp
  07488	e92d0003	 stmdb       sp!, {r0, r1}
  0748c	e92d5000	 stmdb       sp!, {r12, lr}
  07490	e24dd058	 sub         sp, sp, #0x58
  07494		 |$M45469|

; 2344 :     PHSMUSB_T pOTG = (PHSMUSB_T)GetOTGContext();

  07494	e59d0060	 ldr         r0, [sp, #0x60]
  07498	eb000000	 bl          |?GetOTGContext@CHcd@@QAAPAXXZ|
  0749c	e58d0010	 str         r0, [sp, #0x10]
  074a0	e59d3010	 ldr         r3, [sp, #0x10]
  074a4	e58d3004	 str         r3, [sp, #4]

; 2345 :     UCHAR csrIndex = INDEX(MappedEP);

  074a8	e5dd3064	 ldrb        r3, [sp, #0x64]
  074ac	e203300f	 and         r3, r3, #0xF
  074b0	e20330ff	 and         r3, r3, #0xFF
  074b4	e5cd3000	 strb        r3, [sp]

; 2346 : 
; 2347 :     EnterCriticalSection(&pOTG->regCS);

  074b8	e59d3004	 ldr         r3, [sp, #4]
  074bc	e2830038	 add         r0, r3, #0x38
  074c0	eb000000	 bl          EnterCriticalSection

; 2348 :     OUTREG8(&pOTG->pUsbGenRegs->Index, INDEX(MappedEP));

  074c4	e5dd3064	 ldrb        r3, [sp, #0x64]
  074c8	e203300f	 and         r3, r3, #0xF
  074cc	e20320ff	 and         r2, r3, #0xFF
  074d0	e59d3004	 ldr         r3, [sp, #4]
  074d4	e2833020	 add         r3, r3, #0x20
  074d8	e5933000	 ldr         r3, [r3]
  074dc	e283300e	 add         r3, r3, #0xE
  074e0	e5c32000	 strb        r2, [r3]

; 2349 :     // First check if RxPktRdy bit is set
; 2350 :     // Read the total no of bytes available
; 2351 :     if (USB_ENDPOINT(MappedEP) == 0) // Endpoint 0, read the COUNT0

  074e4	e5dd3064	 ldrb        r3, [sp, #0x64]
  074e8	e313000f	 tst         r3, #0xF
  074ec	1a000073	 bne         |$LN10@CheckRxCSR|

; 2352 :     {
; 2353 :         USHORT reg = INREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].CSR.CSR0);

  074f0	e59d3004	 ldr         r3, [sp, #4]
  074f4	e283001c	 add         r0, r3, #0x1C
  074f8	e5dd3000	 ldrb        r3, [sp]
  074fc	e1a01003	 mov         r1, r3
  07500	e3a03010	 mov         r3, #0x10
  07504	e0020391	 mul         r2, r1, r3
  07508	e5903000	 ldr         r3, [r0]
  0750c	e0833002	 add         r3, r3, r2
  07510	e2831002	 add         r1, r3, #2
  07514	e5d13001	 ldrb        r3, [r1, #1]
  07518	e1a03403	 mov         r3, r3, lsl #8
  0751c	e1a02803	 mov         r2, r3, lsl #16
  07520	e1a02822	 mov         r2, r2, lsr #16
  07524	e5d13000	 ldrb        r3, [r1]
  07528	e1833002	 orr         r3, r3, r2
  0752c	e1cd30b8	 strh        r3, [sp, #8]

; 2354 :         if (reg & CSR0_H_Error)

  07530	e1dd30b8	 ldrh        r3, [sp, #8]
  07534	e3130010	 tst         r3, #0x10
  07538	0a00002e	 beq         |$LN9@CheckRxCSR|

; 2355 :         {
; 2356 :             RETAILMSG(1, (TEXT("CSR0 Halt Error\r\n")));

  0753c	e59f0820	 ldr         r0, [pc, #0x820]
  07540	eb000000	 bl          NKDbgPrintfW
  07544	e3a03001	 mov         r3, #1
  07548	e58d3014	 str         r3, [sp, #0x14]
  0754c	ea000001	 b           |$LN14@CheckRxCSR|
  07550	e3a03000	 mov         r3, #0
  07554	e58d3014	 str         r3, [sp, #0x14]
  07558		 |$LN14@CheckRxCSR|

; 2357 :             CLRREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].CSR.CSR0, CSR0_H_Error);

  07558	e59d3004	 ldr         r3, [sp, #4]
  0755c	e283001c	 add         r0, r3, #0x1C
  07560	e5dd3000	 ldrb        r3, [sp]
  07564	e1a01003	 mov         r1, r3
  07568	e3a03010	 mov         r3, #0x10
  0756c	e0020391	 mul         r2, r1, r3
  07570	e5903000	 ldr         r3, [r0]
  07574	e0833002	 add         r3, r3, r2
  07578	e2831002	 add         r1, r3, #2
  0757c	e5d13001	 ldrb        r3, [r1, #1]
  07580	e1a03403	 mov         r3, r3, lsl #8
  07584	e1a02803	 mov         r2, r3, lsl #16
  07588	e1a02822	 mov         r2, r2, lsr #16
  0758c	e5d13000	 ldrb        r3, [r1]
  07590	e1833002	 orr         r3, r3, r2
  07594	e1a02003	 mov         r2, r3
  07598	e3e03010	 mvn         r3, #0x10
  0759c	e0023003	 and         r3, r2, r3
  075a0	e1a0e803	 mov         lr, r3, lsl #16
  075a4	e1a0e82e	 mov         lr, lr, lsr #16
  075a8	e59d3004	 ldr         r3, [sp, #4]
  075ac	e283001c	 add         r0, r3, #0x1C
  075b0	e5dd3000	 ldrb        r3, [sp]
  075b4	e1a01003	 mov         r1, r3
  075b8	e3a03010	 mov         r3, #0x10
  075bc	e0020391	 mul         r2, r1, r3
  075c0	e5903000	 ldr         r3, [r0]
  075c4	e0833002	 add         r3, r3, r2
  075c8	e2832002	 add         r2, r3, #2
  075cc	e1a0300e	 mov         r3, lr
  075d0	e5c23000	 strb        r3, [r2]
  075d4	e1a03423	 mov         r3, r3, lsr #8
  075d8	e5c23001	 strb        r3, [r2, #1]

; 2358 :             // Set the ReqPkt again and see            
; 2359 :             LeaveCriticalSection(&pOTG->regCS);

  075dc	e59d3004	 ldr         r3, [sp, #4]
  075e0	e2830038	 add         r0, r3, #0x38
  075e4	eb000000	 bl          LeaveCriticalSection

; 2360 :             return USB_DEVICE_NOT_RESPONDING_ERROR;

  075e8	e3a03005	 mov         r3, #5
  075ec	e58d300c	 str         r3, [sp, #0xC]
  075f0	ea0001c6	 b           |$LN11@CheckRxCSR|
  075f4	ea000030	 b           |$LN8@CheckRxCSR|
  075f8		 |$LN9@CheckRxCSR|

; 2361 :         }
; 2362 :         else if (reg & CSR0_H_RxStall)

  075f8	e1dd30b8	 ldrh        r3, [sp, #8]
  075fc	e3130004	 tst         r3, #4
  07600	0a00002d	 beq         |$LN7@CheckRxCSR|

; 2363 :         {
; 2364 :             RETAILMSG(1, (TEXT("CSR0 RxStall Error\r\n")));

  07604	e59f0754	 ldr         r0, [pc, #0x754]
  07608	eb000000	 bl          NKDbgPrintfW
  0760c	e3a03001	 mov         r3, #1
  07610	e58d3018	 str         r3, [sp, #0x18]
  07614	ea000001	 b           |$LN16@CheckRxCSR|
  07618	e3a03000	 mov         r3, #0
  0761c	e58d3018	 str         r3, [sp, #0x18]
  07620		 |$LN16@CheckRxCSR|

; 2365 :             // Not sure if it should clear in here            
; 2366 :             CLRREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].CSR.CSR0, CSR0_H_RxStall);

  07620	e59d3004	 ldr         r3, [sp, #4]
  07624	e283001c	 add         r0, r3, #0x1C
  07628	e5dd3000	 ldrb        r3, [sp]
  0762c	e1a01003	 mov         r1, r3
  07630	e3a03010	 mov         r3, #0x10
  07634	e0020391	 mul         r2, r1, r3
  07638	e5903000	 ldr         r3, [r0]
  0763c	e0833002	 add         r3, r3, r2
  07640	e2831002	 add         r1, r3, #2
  07644	e5d13001	 ldrb        r3, [r1, #1]
  07648	e1a03403	 mov         r3, r3, lsl #8
  0764c	e1a02803	 mov         r2, r3, lsl #16
  07650	e1a02822	 mov         r2, r2, lsr #16
  07654	e5d13000	 ldrb        r3, [r1]
  07658	e1833002	 orr         r3, r3, r2
  0765c	e1a02003	 mov         r2, r3
  07660	e3e03004	 mvn         r3, #4
  07664	e0023003	 and         r3, r2, r3
  07668	e1a0e803	 mov         lr, r3, lsl #16
  0766c	e1a0e82e	 mov         lr, lr, lsr #16
  07670	e59d3004	 ldr         r3, [sp, #4]
  07674	e283001c	 add         r0, r3, #0x1C
  07678	e5dd3000	 ldrb        r3, [sp]
  0767c	e1a01003	 mov         r1, r3
  07680	e3a03010	 mov         r3, #0x10
  07684	e0020391	 mul         r2, r1, r3
  07688	e5903000	 ldr         r3, [r0]
  0768c	e0833002	 add         r3, r3, r2
  07690	e2832002	 add         r2, r3, #2
  07694	e1a0300e	 mov         r3, lr
  07698	e5c23000	 strb        r3, [r2]
  0769c	e1a03423	 mov         r3, r3, lsr #8
  076a0	e5c23001	 strb        r3, [r2, #1]

; 2367 :             LeaveCriticalSection(&pOTG->regCS);

  076a4	e59d3004	 ldr         r3, [sp, #4]
  076a8	e2830038	 add         r0, r3, #0x38
  076ac	eb000000	 bl          LeaveCriticalSection

; 2368 :             return USB_STALL_ERROR;

  076b0	e3a03004	 mov         r3, #4
  076b4	e58d300c	 str         r3, [sp, #0xC]
  076b8	ea000194	 b           |$LN11@CheckRxCSR|
  076bc		 |$LN7@CheckRxCSR|
  076bc		 |$LN8@CheckRxCSR|

; 2369 :         }        
; 2370 :     }
; 2371 :     else

  076bc	ea00018e	 b           |$LN6@CheckRxCSR|
  076c0		 |$LN10@CheckRxCSR|

; 2372 :     {
; 2373 :         USHORT reg = INREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].RxCSR);        

  076c0	e59d3004	 ldr         r3, [sp, #4]
  076c4	e283001c	 add         r0, r3, #0x1C
  076c8	e5dd3000	 ldrb        r3, [sp]
  076cc	e1a01003	 mov         r1, r3
  076d0	e3a03010	 mov         r3, #0x10
  076d4	e0020391	 mul         r2, r1, r3
  076d8	e5903000	 ldr         r3, [r0]
  076dc	e0833002	 add         r3, r3, r2
  076e0	e2831006	 add         r1, r3, #6
  076e4	e5d13001	 ldrb        r3, [r1, #1]
  076e8	e1a03403	 mov         r3, r3, lsl #8
  076ec	e1a02803	 mov         r2, r3, lsl #16
  076f0	e1a02822	 mov         r2, r2, lsr #16
  076f4	e5d13000	 ldrb        r3, [r1]
  076f8	e1833002	 orr         r3, r3, r2
  076fc	e1cd30ba	 strh        r3, [sp, #0xA]

; 2374 :         DEBUGMSG(ZONE_HCD, (TEXT("CheckRxCSR = 0x%x\r\n"), reg));

  07700	e59f361c	 ldr         r3, [pc, #0x61C]
  07704	e5933440	 ldr         r3, [r3, #0x440]
  07708	e3130001	 tst         r3, #1
  0770c	0a000006	 beq         |$LN17@CheckRxCSR|
  07710	e1dd30ba	 ldrh        r3, [sp, #0xA]
  07714	e1a01003	 mov         r1, r3
  07718	e59f063c	 ldr         r0, [pc, #0x63C]
  0771c	eb000000	 bl          NKDbgPrintfW
  07720	e3a03001	 mov         r3, #1
  07724	e58d301c	 str         r3, [sp, #0x1C]
  07728	ea000001	 b           |$LN18@CheckRxCSR|
  0772c		 |$LN17@CheckRxCSR|
  0772c	e3a03000	 mov         r3, #0
  07730	e58d301c	 str         r3, [sp, #0x1C]
  07734		 |$LN18@CheckRxCSR|

; 2375 :         if (reg & RXCSR_H_Error)

  07734	e1dd30ba	 ldrh        r3, [sp, #0xA]
  07738	e3130004	 tst         r3, #4
  0773c	0a0000e6	 beq         |$LN5@CheckRxCSR|

; 2376 :         {
; 2377 :             RETAILMSG(1, (TEXT("RxCSR_H_Error at EP %d, clear it\r\n"), csrIndex));

  07740	e5dd3000	 ldrb        r3, [sp]
  07744	e1a01003	 mov         r1, r3
  07748	e59f0608	 ldr         r0, [pc, #0x608]
  0774c	eb000000	 bl          NKDbgPrintfW
  07750	e3a03001	 mov         r3, #1
  07754	e58d3020	 str         r3, [sp, #0x20]
  07758	ea000001	 b           |$LN20@CheckRxCSR|
  0775c	e3a03000	 mov         r3, #0
  07760	e58d3020	 str         r3, [sp, #0x20]
  07764		 |$LN20@CheckRxCSR|

; 2378 :             RETAILMSG(1, (TEXT("Debug purpose, read the FIFO and see what it is => hack\r\n")));

  07764	e59f05e8	 ldr         r0, [pc, #0x5E8]
  07768	eb000000	 bl          NKDbgPrintfW
  0776c	e3a03001	 mov         r3, #1
  07770	e58d3024	 str         r3, [sp, #0x24]
  07774	ea000001	 b           |$LN22@CheckRxCSR|
  07778	e3a03000	 mov         r3, #0
  0777c	e58d3024	 str         r3, [sp, #0x24]
  07780		 |$LN22@CheckRxCSR|

; 2379 :             CLRREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].RxCSR, RXCSR_H_Error);

  07780	e59d3004	 ldr         r3, [sp, #4]
  07784	e283001c	 add         r0, r3, #0x1C
  07788	e5dd3000	 ldrb        r3, [sp]
  0778c	e1a01003	 mov         r1, r3
  07790	e3a03010	 mov         r3, #0x10
  07794	e0020391	 mul         r2, r1, r3
  07798	e5903000	 ldr         r3, [r0]
  0779c	e0833002	 add         r3, r3, r2
  077a0	e2831006	 add         r1, r3, #6
  077a4	e5d13001	 ldrb        r3, [r1, #1]
  077a8	e1a03403	 mov         r3, r3, lsl #8
  077ac	e1a02803	 mov         r2, r3, lsl #16
  077b0	e1a02822	 mov         r2, r2, lsr #16
  077b4	e5d13000	 ldrb        r3, [r1]
  077b8	e1833002	 orr         r3, r3, r2
  077bc	e1a02003	 mov         r2, r3
  077c0	e3e03004	 mvn         r3, #4
  077c4	e0023003	 and         r3, r2, r3
  077c8	e1a0e803	 mov         lr, r3, lsl #16
  077cc	e1a0e82e	 mov         lr, lr, lsr #16
  077d0	e59d3004	 ldr         r3, [sp, #4]
  077d4	e283001c	 add         r0, r3, #0x1C
  077d8	e5dd3000	 ldrb        r3, [sp]
  077dc	e1a01003	 mov         r1, r3
  077e0	e3a03010	 mov         r3, #0x10
  077e4	e0020391	 mul         r2, r1, r3
  077e8	e5903000	 ldr         r3, [r0]
  077ec	e0833002	 add         r3, r3, r2
  077f0	e2832006	 add         r2, r3, #6
  077f4	e1a0300e	 mov         r3, lr
  077f8	e5c23000	 strb        r3, [r2]
  077fc	e1a03423	 mov         r3, r3, lsr #8
  07800	e5c23001	 strb        r3, [r2, #1]

; 2380 :             RETAILMSG(1, (TEXT("RxType = 0x%x\r\n"), INREG8(&pOTG->pUsbCsrRegs->ep[csrIndex].RxType)));

  07804	e59d3004	 ldr         r3, [sp, #4]
  07808	e283001c	 add         r0, r3, #0x1C
  0780c	e5dd3000	 ldrb        r3, [sp]
  07810	e1a01003	 mov         r1, r3
  07814	e3a03010	 mov         r3, #0x10
  07818	e0020391	 mul         r2, r1, r3
  0781c	e5903000	 ldr         r3, [r0]
  07820	e0833002	 add         r3, r3, r2
  07824	e283300c	 add         r3, r3, #0xC
  07828	e5d33000	 ldrb        r3, [r3]
  0782c	e1a01003	 mov         r1, r3
  07830	e59f0518	 ldr         r0, [pc, #0x518]
  07834	eb000000	 bl          NKDbgPrintfW
  07838	e3a03001	 mov         r3, #1
  0783c	e58d3028	 str         r3, [sp, #0x28]
  07840	ea000001	 b           |$LN24@CheckRxCSR|
  07844	e3a03000	 mov         r3, #0
  07848	e58d3028	 str         r3, [sp, #0x28]
  0784c		 |$LN24@CheckRxCSR|

; 2381 :             RETAILMSG(1, (TEXT("RxInterval = 0x%x\r\n"), INREG8(&pOTG->pUsbCsrRegs->ep[csrIndex].RxInterval)));

  0784c	e59d3004	 ldr         r3, [sp, #4]
  07850	e283001c	 add         r0, r3, #0x1C
  07854	e5dd3000	 ldrb        r3, [sp]
  07858	e1a01003	 mov         r1, r3
  0785c	e3a03010	 mov         r3, #0x10
  07860	e0020391	 mul         r2, r1, r3
  07864	e5903000	 ldr         r3, [r0]
  07868	e0833002	 add         r3, r3, r2
  0786c	e283300d	 add         r3, r3, #0xD
  07870	e5d33000	 ldrb        r3, [r3]
  07874	e1a01003	 mov         r1, r3
  07878	e59f04cc	 ldr         r0, [pc, #0x4CC]
  0787c	eb000000	 bl          NKDbgPrintfW
  07880	e3a03001	 mov         r3, #1
  07884	e58d302c	 str         r3, [sp, #0x2C]
  07888	ea000001	 b           |$LN26@CheckRxCSR|
  0788c	e3a03000	 mov         r3, #0
  07890	e58d302c	 str         r3, [sp, #0x2C]
  07894		 |$LN26@CheckRxCSR|

; 2382 :             RETAILMSG(1, (TEXT("RxMaxP = 0x%x\r\n"), INREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].RxMaxP)));

  07894	e59d3004	 ldr         r3, [sp, #4]
  07898	e283001c	 add         r0, r3, #0x1C
  0789c	e5dd3000	 ldrb        r3, [sp]
  078a0	e1a01003	 mov         r1, r3
  078a4	e3a03010	 mov         r3, #0x10
  078a8	e0020391	 mul         r2, r1, r3
  078ac	e5903000	 ldr         r3, [r0]
  078b0	e0833002	 add         r3, r3, r2
  078b4	e2831004	 add         r1, r3, #4
  078b8	e5d13001	 ldrb        r3, [r1, #1]
  078bc	e1a03403	 mov         r3, r3, lsl #8
  078c0	e1a02803	 mov         r2, r3, lsl #16
  078c4	e1a02822	 mov         r2, r2, lsr #16
  078c8	e5d13000	 ldrb        r3, [r1]
  078cc	e1833002	 orr         r3, r3, r2
  078d0	e1a01003	 mov         r1, r3
  078d4	e59f046c	 ldr         r0, [pc, #0x46C]
  078d8	eb000000	 bl          NKDbgPrintfW
  078dc	e3a03001	 mov         r3, #1
  078e0	e58d3030	 str         r3, [sp, #0x30]
  078e4	ea000001	 b           |$LN28@CheckRxCSR|
  078e8	e3a03000	 mov         r3, #0
  078ec	e58d3030	 str         r3, [sp, #0x30]
  078f0		 |$LN28@CheckRxCSR|

; 2383 :             RETAILMSG(1, (TEXT("RxCount = 0x%x\r\n"), INREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].Count.RxCount)));

  078f0	e59d3004	 ldr         r3, [sp, #4]
  078f4	e283001c	 add         r0, r3, #0x1C
  078f8	e5dd3000	 ldrb        r3, [sp]
  078fc	e1a01003	 mov         r1, r3
  07900	e3a03010	 mov         r3, #0x10
  07904	e0020391	 mul         r2, r1, r3
  07908	e5903000	 ldr         r3, [r0]
  0790c	e0833002	 add         r3, r3, r2
  07910	e2831008	 add         r1, r3, #8
  07914	e5d13001	 ldrb        r3, [r1, #1]
  07918	e1a03403	 mov         r3, r3, lsl #8
  0791c	e1a02803	 mov         r2, r3, lsl #16
  07920	e1a02822	 mov         r2, r2, lsr #16
  07924	e5d13000	 ldrb        r3, [r1]
  07928	e1833002	 orr         r3, r3, r2
  0792c	e1a01003	 mov         r1, r3
  07930	e59f040c	 ldr         r0, [pc, #0x40C]
  07934	eb000000	 bl          NKDbgPrintfW
  07938	e3a03001	 mov         r3, #1
  0793c	e58d3034	 str         r3, [sp, #0x34]
  07940	ea000001	 b           |$LN30@CheckRxCSR|
  07944	e3a03000	 mov         r3, #0
  07948	e58d3034	 str         r3, [sp, #0x34]
  0794c		 |$LN30@CheckRxCSR|

; 2384 :             RETAILMSG(1, (TEXT("FIFOSize = 0x%x\r\n"), INREG8(&pOTG->pUsbCsrRegs->ep[csrIndex].Config.FIFOSize)));            

  0794c	e59d3004	 ldr         r3, [sp, #4]
  07950	e283001c	 add         r0, r3, #0x1C
  07954	e5dd3000	 ldrb        r3, [sp]
  07958	e1a01003	 mov         r1, r3
  0795c	e3a03010	 mov         r3, #0x10
  07960	e0020391	 mul         r2, r1, r3
  07964	e5903000	 ldr         r3, [r0]
  07968	e0833002	 add         r3, r3, r2
  0796c	e283300f	 add         r3, r3, #0xF
  07970	e5d33000	 ldrb        r3, [r3]
  07974	e1a01003	 mov         r1, r3
  07978	e59f03c0	 ldr         r0, [pc, #0x3C0]
  0797c	eb000000	 bl          NKDbgPrintfW
  07980	e3a03001	 mov         r3, #1
  07984	e58d3038	 str         r3, [sp, #0x38]
  07988	ea000001	 b           |$LN32@CheckRxCSR|
  0798c	e3a03000	 mov         r3, #0
  07990	e58d3038	 str         r3, [sp, #0x38]
  07994		 |$LN32@CheckRxCSR|

; 2385 :             RETAILMSG(1, (TEXT("TxFIFOSz = 0x%x\r\n"), INREG8(&pOTG->pUsbGenRegs->TxFIFOsz)));

  07994	e59d3004	 ldr         r3, [sp, #4]
  07998	e2833020	 add         r3, r3, #0x20
  0799c	e5933000	 ldr         r3, [r3]
  079a0	e2833062	 add         r3, r3, #0x62
  079a4	e5d33000	 ldrb        r3, [r3]
  079a8	e1a01003	 mov         r1, r3
  079ac	e59f0388	 ldr         r0, [pc, #0x388]
  079b0	eb000000	 bl          NKDbgPrintfW
  079b4	e3a03001	 mov         r3, #1
  079b8	e58d303c	 str         r3, [sp, #0x3C]
  079bc	ea000001	 b           |$LN34@CheckRxCSR|
  079c0	e3a03000	 mov         r3, #0
  079c4	e58d303c	 str         r3, [sp, #0x3C]
  079c8		 |$LN34@CheckRxCSR|

; 2386 :             RETAILMSG(1, (TEXT("RxFIFOSz = 0x%x\r\n"), INREG8(&pOTG->pUsbGenRegs->RxFIFOsz)));

  079c8	e59d3004	 ldr         r3, [sp, #4]
  079cc	e2833020	 add         r3, r3, #0x20
  079d0	e5933000	 ldr         r3, [r3]
  079d4	e2833063	 add         r3, r3, #0x63
  079d8	e5d33000	 ldrb        r3, [r3]
  079dc	e1a01003	 mov         r1, r3
  079e0	e59f0350	 ldr         r0, [pc, #0x350]
  079e4	eb000000	 bl          NKDbgPrintfW
  079e8	e3a03001	 mov         r3, #1
  079ec	e58d3040	 str         r3, [sp, #0x40]
  079f0	ea000001	 b           |$LN36@CheckRxCSR|
  079f4	e3a03000	 mov         r3, #0
  079f8	e58d3040	 str         r3, [sp, #0x40]
  079fc		 |$LN36@CheckRxCSR|

; 2387 :             RETAILMSG(1, (TEXT("TxFIFOadd = 0x%x\r\n"), INREG16(&pOTG->pUsbGenRegs->TxFIFOadd)));

  079fc	e59d3004	 ldr         r3, [sp, #4]
  07a00	e2833020	 add         r3, r3, #0x20
  07a04	e5933000	 ldr         r3, [r3]
  07a08	e2831064	 add         r1, r3, #0x64
  07a0c	e5d13001	 ldrb        r3, [r1, #1]
  07a10	e1a03403	 mov         r3, r3, lsl #8
  07a14	e1a02803	 mov         r2, r3, lsl #16
  07a18	e1a02822	 mov         r2, r2, lsr #16
  07a1c	e5d13000	 ldrb        r3, [r1]
  07a20	e1833002	 orr         r3, r3, r2
  07a24	e1a01003	 mov         r1, r3
  07a28	e59f0304	 ldr         r0, [pc, #0x304]
  07a2c	eb000000	 bl          NKDbgPrintfW
  07a30	e3a03001	 mov         r3, #1
  07a34	e58d3044	 str         r3, [sp, #0x44]
  07a38	ea000001	 b           |$LN38@CheckRxCSR|
  07a3c	e3a03000	 mov         r3, #0
  07a40	e58d3044	 str         r3, [sp, #0x44]
  07a44		 |$LN38@CheckRxCSR|

; 2388 :             RETAILMSG(1, (TEXT("RxFIFOadd = 0x%x\r\n"), INREG16(&pOTG->pUsbGenRegs->RxFIFOadd)));

  07a44	e59d3004	 ldr         r3, [sp, #4]
  07a48	e2833020	 add         r3, r3, #0x20
  07a4c	e5933000	 ldr         r3, [r3]
  07a50	e2831066	 add         r1, r3, #0x66
  07a54	e5d13001	 ldrb        r3, [r1, #1]
  07a58	e1a03403	 mov         r3, r3, lsl #8
  07a5c	e1a02803	 mov         r2, r3, lsl #16
  07a60	e1a02822	 mov         r2, r2, lsr #16
  07a64	e5d13000	 ldrb        r3, [r1]
  07a68	e1833002	 orr         r3, r3, r2
  07a6c	e1a01003	 mov         r1, r3
  07a70	e59f02b8	 ldr         r0, [pc, #0x2B8]
  07a74	eb000000	 bl          NKDbgPrintfW
  07a78	e3a03001	 mov         r3, #1
  07a7c	e58d3048	 str         r3, [sp, #0x48]
  07a80	ea000001	 b           |$LN40@CheckRxCSR|
  07a84	e3a03000	 mov         r3, #0
  07a88	e58d3048	 str         r3, [sp, #0x48]
  07a8c		 |$LN40@CheckRxCSR|

; 2389 :             RETAILMSG(1, (TEXT("EPINFO = 0x%x\r\n"), INREG8(&pOTG->pUsbGenRegs->EPInfo)));

  07a8c	e59d3004	 ldr         r3, [sp, #4]
  07a90	e2833020	 add         r3, r3, #0x20
  07a94	e5933000	 ldr         r3, [r3]
  07a98	e2833078	 add         r3, r3, #0x78
  07a9c	e5d33000	 ldrb        r3, [r3]
  07aa0	e1a01003	 mov         r1, r3
  07aa4	e59f0280	 ldr         r0, [pc, #0x280]
  07aa8	eb000000	 bl          NKDbgPrintfW
  07aac	e3a03001	 mov         r3, #1
  07ab0	e58d304c	 str         r3, [sp, #0x4C]
  07ab4	ea000001	 b           |$LN42@CheckRxCSR|
  07ab8	e3a03000	 mov         r3, #0
  07abc	e58d304c	 str         r3, [sp, #0x4C]
  07ac0		 |$LN42@CheckRxCSR|

; 2390 : 
; 2391 :             LeaveCriticalSection(&pOTG->regCS);

  07ac0	e59d3004	 ldr         r3, [sp, #4]
  07ac4	e2830038	 add         r0, r3, #0x38
  07ac8	eb000000	 bl          LeaveCriticalSection

; 2392 :             return USB_DEVICE_NOT_RESPONDING_ERROR;

  07acc	e3a03005	 mov         r3, #5
  07ad0	e58d300c	 str         r3, [sp, #0xC]
  07ad4	ea00008d	 b           |$LN11@CheckRxCSR|
  07ad8	ea000087	 b           |$LN4@CheckRxCSR|
  07adc		 |$LN5@CheckRxCSR|

; 2393 :         }
; 2394 :         else if (reg & RXCSR_H_NAKTimeout)

  07adc	e1dd30ba	 ldrh        r3, [sp, #0xA]
  07ae0	e3130008	 tst         r3, #8
  07ae4	0a00002e	 beq         |$LN3@CheckRxCSR|

; 2395 :         {           
; 2396 :             CLRREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].RxCSR, RXCSR_H_NAKTimeout|RXCSR_H_ReqPkt);

  07ae8	e59d3004	 ldr         r3, [sp, #4]
  07aec	e283001c	 add         r0, r3, #0x1C
  07af0	e5dd3000	 ldrb        r3, [sp]
  07af4	e1a01003	 mov         r1, r3
  07af8	e3a03010	 mov         r3, #0x10
  07afc	e0020391	 mul         r2, r1, r3
  07b00	e5903000	 ldr         r3, [r0]
  07b04	e0833002	 add         r3, r3, r2
  07b08	e2831006	 add         r1, r3, #6
  07b0c	e5d13001	 ldrb        r3, [r1, #1]
  07b10	e1a03403	 mov         r3, r3, lsl #8
  07b14	e1a02803	 mov         r2, r3, lsl #16
  07b18	e1a02822	 mov         r2, r2, lsr #16
  07b1c	e5d13000	 ldrb        r3, [r1]
  07b20	e1833002	 orr         r3, r3, r2
  07b24	e1a02003	 mov         r2, r3
  07b28	e3e03028	 mvn         r3, #0x28
  07b2c	e0023003	 and         r3, r2, r3
  07b30	e1a0e803	 mov         lr, r3, lsl #16
  07b34	e1a0e82e	 mov         lr, lr, lsr #16
  07b38	e59d3004	 ldr         r3, [sp, #4]
  07b3c	e283001c	 add         r0, r3, #0x1C
  07b40	e5dd3000	 ldrb        r3, [sp]
  07b44	e1a01003	 mov         r1, r3
  07b48	e3a03010	 mov         r3, #0x10
  07b4c	e0020391	 mul         r2, r1, r3
  07b50	e5903000	 ldr         r3, [r0]
  07b54	e0833002	 add         r3, r3, r2
  07b58	e2832006	 add         r2, r3, #6
  07b5c	e1a0300e	 mov         r3, lr
  07b60	e5c23000	 strb        r3, [r2]
  07b64	e1a03423	 mov         r3, r3, lsr #8
  07b68	e5c23001	 strb        r3, [r2, #1]

; 2397 :             RETAILMSG(1, (TEXT("NAKTimeout\r\n")));

  07b6c	e59f01b4	 ldr         r0, [pc, #0x1B4]
  07b70	eb000000	 bl          NKDbgPrintfW
  07b74	e3a03001	 mov         r3, #1
  07b78	e58d3050	 str         r3, [sp, #0x50]
  07b7c	ea000001	 b           |$LN44@CheckRxCSR|
  07b80	e3a03000	 mov         r3, #0
  07b84	e58d3050	 str         r3, [sp, #0x50]
  07b88		 |$LN44@CheckRxCSR|

; 2398 :             LeaveCriticalSection(&pOTG->regCS);

  07b88	e59d3004	 ldr         r3, [sp, #4]
  07b8c	e2830038	 add         r0, r3, #0x38
  07b90	eb000000	 bl          LeaveCriticalSection

; 2399 :             return USB_DEVICE_NOT_RESPONDING_ERROR;

  07b94	e3a03005	 mov         r3, #5
  07b98	e58d300c	 str         r3, [sp, #0xC]
  07b9c	ea00005b	 b           |$LN11@CheckRxCSR|
  07ba0	ea000055	 b           |$LN2@CheckRxCSR|
  07ba4		 |$LN3@CheckRxCSR|

; 2400 :         }
; 2401 :         else if (reg & RXCSR_H_RxStall)

  07ba4	e1dd30ba	 ldrh        r3, [sp, #0xA]
  07ba8	e3130040	 tst         r3, #0x40
  07bac	0a000052	 beq         |$LN1@CheckRxCSR|

; 2402 :         {
; 2403 :             DEBUGMSG(ZONE_ERROR, (TEXT("RxCSR RxStall Error at ep %d\r\n"), csrIndex));

  07bb0	e59f316c	 ldr         r3, [pc, #0x16C]
  07bb4	e5933440	 ldr         r3, [r3, #0x440]
  07bb8	e3130901	 tst         r3, #1, 18
  07bbc	0a000006	 beq         |$LN45@CheckRxCSR|
  07bc0	e5dd3000	 ldrb        r3, [sp]
  07bc4	e1a01003	 mov         r1, r3
  07bc8	e59f0150	 ldr         r0, [pc, #0x150]
  07bcc	eb000000	 bl          NKDbgPrintfW
  07bd0	e3a03001	 mov         r3, #1
  07bd4	e58d3054	 str         r3, [sp, #0x54]
  07bd8	ea000001	 b           |$LN46@CheckRxCSR|
  07bdc		 |$LN45@CheckRxCSR|
  07bdc	e3a03000	 mov         r3, #0
  07be0	e58d3054	 str         r3, [sp, #0x54]
  07be4		 |$LN46@CheckRxCSR|

; 2404 :             // Not sure if it should clear in here            
; 2405 :             CLRREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].RxCSR, RXCSR_H_RxStall);

  07be4	e59d3004	 ldr         r3, [sp, #4]
  07be8	e283001c	 add         r0, r3, #0x1C
  07bec	e5dd3000	 ldrb        r3, [sp]
  07bf0	e1a01003	 mov         r1, r3
  07bf4	e3a03010	 mov         r3, #0x10
  07bf8	e0020391	 mul         r2, r1, r3
  07bfc	e5903000	 ldr         r3, [r0]
  07c00	e0833002	 add         r3, r3, r2
  07c04	e2831006	 add         r1, r3, #6
  07c08	e5d13001	 ldrb        r3, [r1, #1]
  07c0c	e1a03403	 mov         r3, r3, lsl #8
  07c10	e1a02803	 mov         r2, r3, lsl #16
  07c14	e1a02822	 mov         r2, r2, lsr #16
  07c18	e5d13000	 ldrb        r3, [r1]
  07c1c	e1833002	 orr         r3, r3, r2
  07c20	e1a02003	 mov         r2, r3
  07c24	e3e03040	 mvn         r3, #0x40
  07c28	e0023003	 and         r3, r2, r3
  07c2c	e1a0e803	 mov         lr, r3, lsl #16
  07c30	e1a0e82e	 mov         lr, lr, lsr #16
  07c34	e59d3004	 ldr         r3, [sp, #4]
  07c38	e283001c	 add         r0, r3, #0x1C
  07c3c	e5dd3000	 ldrb        r3, [sp]
  07c40	e1a01003	 mov         r1, r3
  07c44	e3a03010	 mov         r3, #0x10
  07c48	e0020391	 mul         r2, r1, r3
  07c4c	e5903000	 ldr         r3, [r0]
  07c50	e0833002	 add         r3, r3, r2
  07c54	e2832006	 add         r2, r3, #6
  07c58	e1a0300e	 mov         r3, lr
  07c5c	e5c23000	 strb        r3, [r2]
  07c60	e1a03423	 mov         r3, r3, lsr #8
  07c64	e5c23001	 strb        r3, [r2, #1]

; 2406 :             SETREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].RxCSR, RXCSR_H_ClrDataTog);

  07c68	e59d3004	 ldr         r3, [sp, #4]
  07c6c	e283001c	 add         r0, r3, #0x1C
  07c70	e5dd3000	 ldrb        r3, [sp]
  07c74	e1a01003	 mov         r1, r3
  07c78	e3a03010	 mov         r3, #0x10
  07c7c	e0020391	 mul         r2, r1, r3
  07c80	e5903000	 ldr         r3, [r0]
  07c84	e0833002	 add         r3, r3, r2
  07c88	e2831006	 add         r1, r3, #6
  07c8c	e5d13001	 ldrb        r3, [r1, #1]
  07c90	e1a03403	 mov         r3, r3, lsl #8
  07c94	e1a02803	 mov         r2, r3, lsl #16
  07c98	e1a02822	 mov         r2, r2, lsr #16
  07c9c	e5d13000	 ldrb        r3, [r1]
  07ca0	e1833002	 orr         r3, r3, r2
  07ca4	e3833080	 orr         r3, r3, #0x80
  07ca8	e1a0e803	 mov         lr, r3, lsl #16
  07cac	e1a0e82e	 mov         lr, lr, lsr #16
  07cb0	e59d3004	 ldr         r3, [sp, #4]
  07cb4	e283001c	 add         r0, r3, #0x1C
  07cb8	e5dd3000	 ldrb        r3, [sp]
  07cbc	e1a01003	 mov         r1, r3
  07cc0	e3a03010	 mov         r3, #0x10
  07cc4	e0020391	 mul         r2, r1, r3
  07cc8	e5903000	 ldr         r3, [r0]
  07ccc	e0833002	 add         r3, r3, r2
  07cd0	e2832006	 add         r2, r3, #6
  07cd4	e1a0300e	 mov         r3, lr
  07cd8	e5c23000	 strb        r3, [r2]
  07cdc	e1a03423	 mov         r3, r3, lsr #8
  07ce0	e5c23001	 strb        r3, [r2, #1]

; 2407 :             LeaveCriticalSection(&pOTG->regCS);

  07ce4	e59d3004	 ldr         r3, [sp, #4]
  07ce8	e2830038	 add         r0, r3, #0x38
  07cec	eb000000	 bl          LeaveCriticalSection

; 2408 :             return USB_STALL_ERROR;

  07cf0	e3a03004	 mov         r3, #4
  07cf4	e58d300c	 str         r3, [sp, #0xC]
  07cf8	ea000004	 b           |$LN11@CheckRxCSR|
  07cfc		 |$LN1@CheckRxCSR|
  07cfc		 |$LN2@CheckRxCSR|
  07cfc		 |$LN4@CheckRxCSR|
  07cfc		 |$LN6@CheckRxCSR|

; 2409 :         }
; 2410 :     }
; 2411 :     LeaveCriticalSection(&pOTG->regCS);

  07cfc	e59d3004	 ldr         r3, [sp, #4]
  07d00	e2830038	 add         r0, r3, #0x38
  07d04	eb000000	 bl          LeaveCriticalSection

; 2412 :     return USB_NO_ERROR;

  07d08	e3a03000	 mov         r3, #0
  07d0c	e58d300c	 str         r3, [sp, #0xC]
  07d10		 |$LN11@CheckRxCSR|

; 2413 : }

  07d10	e59d000c	 ldr         r0, [sp, #0xC]
  07d14	e28dd058	 add         sp, sp, #0x58
  07d18	e89d6000	 ldmia       sp, {sp, lr}
  07d1c	e12fff1e	 bx          lr
  07d20		 |$LN50@CheckRxCSR|
  07d20		 |$LN51@CheckRxCSR|
  07d20	00000000	 DCD         |??_C@_1DO@BOLHOPCB@?$AAR?$AAx?$AAC?$AAS?$AAR?$AA?5?$AAR?$AAx?$AAS?$AAt?$AAa?$AAl?$AAl?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAa?$AAt?$AA?5?$AAe?$AAp?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  07d24		 |$LN52@CheckRxCSR|
  07d24	00000000	 DCD         |dpCurSettings|
  07d28		 |$LN53@CheckRxCSR|
  07d28	00000000	 DCD         |??_C@_1BK@BOEDCOMO@?$AAN?$AAA?$AAK?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$AN?$AA?6?$AA?$AA@|
  07d2c		 |$LN54@CheckRxCSR|
  07d2c	00000000	 DCD         |??_C@_1CA@DFGPJAME@?$AAE?$AAP?$AAI?$AAN?$AAF?$AAO?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  07d30		 |$LN55@CheckRxCSR|
  07d30	00000000	 DCD         |??_C@_1CG@MPMMBINL@?$AAR?$AAx?$AAF?$AAI?$AAF?$AAO?$AAa?$AAd?$AAd?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  07d34		 |$LN56@CheckRxCSR|
  07d34	00000000	 DCD         |??_C@_1CG@FEBMBIBF@?$AAT?$AAx?$AAF?$AAI?$AAF?$AAO?$AAa?$AAd?$AAd?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  07d38		 |$LN57@CheckRxCSR|
  07d38	00000000	 DCD         |??_C@_1CE@MMHDCDHO@?$AAR?$AAx?$AAF?$AAI?$AAF?$AAO?$AAS?$AAz?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  07d3c		 |$LN58@CheckRxCSR|
  07d3c	00000000	 DCD         |??_C@_1CE@FLDNEIC@?$AAT?$AAx?$AAF?$AAI?$AAF?$AAO?$AAS?$AAz?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  07d40		 |$LN59@CheckRxCSR|
  07d40	00000000	 DCD         |??_C@_1CE@KCNNGIAN@?$AAF?$AAI?$AAF?$AAO?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  07d44		 |$LN60@CheckRxCSR|
  07d44	00000000	 DCD         |??_C@_1CC@NLOOOCJA@?$AAR?$AAx?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  07d48		 |$LN61@CheckRxCSR|
  07d48	00000000	 DCD         |??_C@_1CA@NLAFCFEK@?$AAR?$AAx?$AAM?$AAa?$AAx?$AAP?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  07d4c		 |$LN62@CheckRxCSR|
  07d4c	00000000	 DCD         |??_C@_1CI@FBGKBILJ@?$AAR?$AAx?$AAI?$AAn?$AAt?$AAe?$AAr?$AAv?$AAa?$AAl?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  07d50		 |$LN63@CheckRxCSR|
  07d50	00000000	 DCD         |??_C@_1CA@ILNHIEFH@?$AAR?$AAx?$AAT?$AAy?$AAp?$AAe?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  07d54		 |$LN64@CheckRxCSR|
  07d54	00000000	 DCD         |??_C@_1HE@PPBFEKOG@?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?5?$AAp?$AAu?$AAr?$AAp?$AAo?$AAs?$AAe?$AA?0?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAF?$AAI?$AAF?$AAO?$AA?5?$AAa?$AAn?$AAd@|
  07d58		 |$LN65@CheckRxCSR|
  07d58	00000000	 DCD         |??_C@_1EG@DJCLFNB@?$AAR?$AAx?$AAC?$AAS?$AAR?$AA_?$AAH?$AA_?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAa?$AAt?$AA?5?$AAE?$AAP?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AAc?$AAl?$AAe?$AAa?$AAr?$AA?5?$AAi?$AAt@|
  07d5c		 |$LN66@CheckRxCSR|
  07d5c	00000000	 DCD         |??_C@_1CI@JBMIEODM@?$AAC?$AAh?$AAe?$AAc?$AAk?$AAR?$AAx?$AAC?$AAS?$AAR?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  07d60		 |$LN67@CheckRxCSR|
  07d60	00000000	 DCD         |??_C@_1CK@CCMLIFMF@?$AAC?$AAS?$AAR?$AA0?$AA?5?$AAR?$AAx?$AAS?$AAt?$AAa?$AAl?$AAl?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?$AN?$AA?6?$AA?$AA@|
  07d64		 |$LN68@CheckRxCSR|
  07d64	00000000	 DCD         |??_C@_1CE@NCLPFOEK@?$AAC?$AAS?$AAR?$AA0?$AA?5?$AAH?$AAa?$AAl?$AAt?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?$AN?$AA?6?$AA?$AA@|
  07d68		 |$M45470|

			 ENDP  ; |?CheckRxCSR@CHW@@QAAKE@Z|, CHW::CheckRxCSR

	EXPORT	|?ProcessDMAChannel@CHW@@QAAHPAXEEH0KK@Z| ; CHW::ProcessDMAChannel
	EXPORT	|?SetCurTfrSize@CQTD@@QAAXK@Z|		; CQTD::SetCurTfrSize
	EXPORT	|?SetStatus@CQTD@@QAAXK@Z|		; CQTD::SetStatus
	EXPORT	|??_C@_1GK@LEKNDAOH@?$AAR?$AAe?$AAa?$AAd?$AAD?$AAM?$AAA?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?3?$AA?5?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?$DN?$AA0?$AAx?$AA?$CF?$AAx?$AA?0?$AA?5?$AAm?$AAa?$AAx?$AAp?$AAa?$AAc?$AAk@| [ DATA ] ; `string'
	EXPORT	|?SetRxDataAvail@CHW@@QAAXE@Z|		; CHW::SetRxDataAvail
	EXPORT	|??_C@_1DM@NJMLNKGC@?$AAA?$AAs?$AAs?$AAu?$AAm?$AAe?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAn?$AAe?$AAx?$AAt?$AA?5?$AAd?$AAa?$AAt?$AAa?$AA?5?$AAa?$AAr?$AAr?$AAi?$AAv?$AAe?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EO@MCGBNCKK@?$AAW?$AAa?$AAr?$AAn?$AAi?$AAn?$AAg?$AA?$CB?$AA?$CB?$AA?$CB?$AA?5?$AAN?$AAo?$AAt?$AA?5?$AAe?$AAn?$AAo?$AAu?$AAg?$AAh?$AA?5?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?5?$AAs?$AAi?$AAz@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BK@KBIGIHKK@?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?5?$AAh?$AAe?$AAr?$AAe?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FI@MCGAOEPM@?$AAR?$AAe?$AAa?$AAd?$AAD?$AAM?$AAA?$AA?5?$AAw?$AAi?$AAt?$AAh?$AA?5?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DN?$AA?5?$AA0?$AA?0?$AA?5?$AAw?$AAi?$AAt?$AAh?$AA?5?$AAR?$AAx?$AAC@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GO@KEJCKFIF@?$AAR?$AAe?$AAa?$AAd?$AAD?$AAM?$AAA?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAw?$AAi?$AAt?$AAh?$AA?5?$AAT?$AAo?$AAt?$AAT?$AAf?$AAr?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DN@| [ DATA ] ; `string'
	EXPORT	|?GetDataSize@CQTD@@QAAKXZ|		; CQTD::GetDataSize
	EXPORT	|?GetTotTfrSize@CQTD@@QAAKXZ|		; CQTD::GetTotTfrSize
	EXPORT	|?ReadDMA@CHW@@QAAKPAXEE0KKPAVCQTD@@@Z|	; CHW::ReadDMA

  001a0			 AREA	 |.pdata|, PDATA
|$T45514| DCD	|$LN24@ReadDMA|
	DCD	0x40011204

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GK@LEKNDAOH@?$AAR?$AAe?$AAa?$AAd?$AAD?$AAM?$AAA?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?3?$AA?5?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?$DN?$AA0?$AAx?$AA?$CF?$AAx?$AA?0?$AA?5?$AAm?$AAa?$AAx?$AAp?$AAa?$AAc?$AAk@| DCB "R"
	DCB	0x0, "e", 0x0, "a", 0x0, "d", 0x0, "D", 0x0, "M", 0x0, "A"
	DCB	0x0, "(", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, ":", 0x0, " "
	DCB	0x0, "c", 0x0, "o", 0x0, "u", 0x0, "n", 0x0, "t", 0x0, "="
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, ",", 0x0, " "
	DCB	0x0, "m", 0x0, "a", 0x0, "x", 0x0, "p", 0x0, "a", 0x0, "c"
	DCB	0x0, "k", 0x0, "e", 0x0, "t", 0x0, "=", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "s", 0x0, "i"
	DCB	0x0, "z", 0x0, "e", 0x0, "=", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@NJMLNKGC@?$AAA?$AAs?$AAs?$AAu?$AAm?$AAe?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAn?$AAe?$AAx?$AAt?$AA?5?$AAd?$AAa?$AAt?$AAa?$AA?5?$AAa?$AAr?$AAr?$AAi?$AAv?$AAe?$AA?$AN?$AA?6?$AA?$AA@| DCB "A"
	DCB	0x0, "s", 0x0, "s", 0x0, "u", 0x0, "m", 0x0, "e", 0x0, " "
	DCB	0x0, "t", 0x0, "h", 0x0, "e", 0x0, " ", 0x0, "n", 0x0, "e"
	DCB	0x0, "x", 0x0, "t", 0x0, " ", 0x0, "d", 0x0, "a", 0x0, "t"
	DCB	0x0, "a", 0x0, " ", 0x0, "a", 0x0, "r", 0x0, "r", 0x0, "i"
	DCB	0x0, "v", 0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EO@MCGBNCKK@?$AAW?$AAa?$AAr?$AAn?$AAi?$AAn?$AAg?$AA?$CB?$AA?$CB?$AA?$CB?$AA?5?$AAN?$AAo?$AAt?$AA?5?$AAe?$AAn?$AAo?$AAu?$AAg?$AAh?$AA?5?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?5?$AAs?$AAi?$AAz@| DCB "W"
	DCB	0x0, "a", 0x0, "r", 0x0, "n", 0x0, "i", 0x0, "n", 0x0, "g"
	DCB	0x0, "!", 0x0, "!", 0x0, "!", 0x0, " ", 0x0, "N", 0x0, "o"
	DCB	0x0, "t", 0x0, " ", 0x0, "e", 0x0, "n", 0x0, "o", 0x0, "u"
	DCB	0x0, "g", 0x0, "h", 0x0, " ", 0x0, "b", 0x0, "u", 0x0, "f"
	DCB	0x0, "f", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, "s", 0x0, "i"
	DCB	0x0, "z", 0x0, "e", 0x0, "!", 0x0, "!", 0x0, "!", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BK@KBIGIHKK@?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?5?$AAh?$AAe?$AAr?$AAe?$AA?$AN?$AA?6?$AA?$AA@| DCB "D"
	DCB	0x0, "e", 0x0, "b", 0x0, "u", 0x0, "g", 0x0, " ", 0x0, "h"
	DCB	0x0, "e", 0x0, "r", 0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FI@MCGAOEPM@?$AAR?$AAe?$AAa?$AAd?$AAD?$AAM?$AAA?$AA?5?$AAw?$AAi?$AAt?$AAh?$AA?5?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DN?$AA?5?$AA0?$AA?0?$AA?5?$AAw?$AAi?$AAt?$AAh?$AA?5?$AAR?$AAx?$AAC@| DCB "R"
	DCB	0x0, "e", 0x0, "a", 0x0, "d", 0x0, "D", 0x0, "M", 0x0, "A"
	DCB	0x0, " ", 0x0, "w", 0x0, "i", 0x0, "t", 0x0, "h", 0x0, " "
	DCB	0x0, "c", 0x0, "o", 0x0, "u", 0x0, "n", 0x0, "t", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "0", 0x0, ",", 0x0, " ", 0x0, "w"
	DCB	0x0, "i", 0x0, "t", 0x0, "h", 0x0, " ", 0x0, "R", 0x0, "x"
	DCB	0x0, "C", 0x0, "S", 0x0, "R", 0x0, " ", 0x0, "=", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GO@KEJCKFIF@?$AAR?$AAe?$AAa?$AAd?$AAD?$AAM?$AAA?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAw?$AAi?$AAt?$AAh?$AA?5?$AAT?$AAo?$AAt?$AAT?$AAf?$AAr?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DN@| DCB "R"
	DCB	0x0, "e", 0x0, "a", 0x0, "d", 0x0, "D", 0x0, "M", 0x0, "A"
	DCB	0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e"
	DCB	0x0, "d", 0x0, " ", 0x0, "w", 0x0, "i", 0x0, "t", 0x0, "h"
	DCB	0x0, " ", 0x0, "T", 0x0, "o", 0x0, "t", 0x0, "T", 0x0, "f"
	DCB	0x0, "r", 0x0, "S", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x"
	DCB	0x0, ",", 0x0, " ", 0x0, "B", 0x0, "u", 0x0, "f", 0x0, "f"
	DCB	0x0, "e", 0x0, "r", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Odtp

  07d68			 AREA	 |.text|, CODE, ARM

  07d68		 |?ReadDMA@CHW@@QAAKPAXEE0KKPAVCQTD@@@Z| PROC ; CHW::ReadDMA

; 2417 : {

  07d68		 |$LN24@ReadDMA|
  07d68	e1a0c00d	 mov         r12, sp
  07d6c	e92d000f	 stmdb       sp!, {r0 - r3}
  07d70	e92d5000	 stmdb       sp!, {r12, lr}
  07d74	e24dd064	 sub         sp, sp, #0x64
  07d78		 |$M45511|

; 2418 :     PHSMUSB_T pOTG = (PHSMUSB_T)(pContext);

  07d78	e59d3070	 ldr         r3, [sp, #0x70]
  07d7c	e58d3018	 str         r3, [sp, #0x18]

; 2419 :     USHORT rxcsr;    
; 2420 :     UCHAR  mode = 0;

  07d80	e3a03000	 mov         r3, #0
  07d84	e5cd3014	 strb        r3, [sp, #0x14]

; 2421 :     DWORD  dwCount = 0;

  07d88	e3a03000	 mov         r3, #0
  07d8c	e58d3010	 str         r3, [sp, #0x10]

; 2422 :     DWORD  dwReadSize = 0;    

  07d90	e3a03000	 mov         r3, #0
  07d94	e58d3020	 str         r3, [sp, #0x20]

; 2423 :     UCHAR csrIndex = INDEX(endpoint);    

  07d98	e5dd3074	 ldrb        r3, [sp, #0x74]
  07d9c	e203300f	 and         r3, r3, #0xF
  07da0	e20330ff	 and         r3, r3, #0xFF
  07da4	e5cd3015	 strb        r3, [sp, #0x15]

; 2424 :     EnterCriticalSection(&pOTG->regCS);

  07da8	e59d3018	 ldr         r3, [sp, #0x18]
  07dac	e2830038	 add         r0, r3, #0x38
  07db0	eb000000	 bl          EnterCriticalSection

; 2425 :     OUTREG8(&pOTG->pUsbGenRegs->Index, INDEX(endpoint));

  07db4	e5dd3074	 ldrb        r3, [sp, #0x74]
  07db8	e203300f	 and         r3, r3, #0xF
  07dbc	e20320ff	 and         r2, r3, #0xFF
  07dc0	e59d3018	 ldr         r3, [sp, #0x18]
  07dc4	e2833020	 add         r3, r3, #0x20
  07dc8	e5933000	 ldr         r3, [r3]
  07dcc	e283300e	 add         r3, r3, #0xE
  07dd0	e5c32000	 strb        r2, [r3]

; 2426 : 
; 2427 :     
; 2428 : 
; 2429 :     dwCount = INREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].Count.RxCount);

  07dd4	e59d3018	 ldr         r3, [sp, #0x18]
  07dd8	e283001c	 add         r0, r3, #0x1C
  07ddc	e5dd3015	 ldrb        r3, [sp, #0x15]
  07de0	e1a01003	 mov         r1, r3
  07de4	e3a03010	 mov         r3, #0x10
  07de8	e0020391	 mul         r2, r1, r3
  07dec	e5903000	 ldr         r3, [r0]
  07df0	e0833002	 add         r3, r3, r2
  07df4	e2831008	 add         r1, r3, #8
  07df8	e5d13001	 ldrb        r3, [r1, #1]
  07dfc	e1a03403	 mov         r3, r3, lsl #8
  07e00	e1a02803	 mov         r2, r3, lsl #16
  07e04	e1a02822	 mov         r2, r2, lsr #16
  07e08	e5d13000	 ldrb        r3, [r1]
  07e0c	e1833002	 orr         r3, r3, r2
  07e10	e58d3010	 str         r3, [sp, #0x10]

; 2430 : 
; 2431 : #ifndef SHIP_BUILD
; 2432 :     if (dwCount == 0) 

  07e14	e59d3010	 ldr         r3, [sp, #0x10]
  07e18	e3530000	 cmp         r3, #0
  07e1c	1a00002e	 bne         |$LN7@ReadDMA|

; 2433 :     {
; 2434 :         DWORD cbStart = pCurTD->GetTotTfrSize();

  07e20	e59d0088	 ldr         r0, [sp, #0x88]
  07e24	eb000000	 bl          |?GetTotTfrSize@CQTD@@QAAKXZ|
  07e28	e58d0044	 str         r0, [sp, #0x44]
  07e2c	e59d3044	 ldr         r3, [sp, #0x44]
  07e30	e58d3024	 str         r3, [sp, #0x24]

; 2435 :         RETAILMSG(1, (TEXT("ReadDMA failed with TotTfrSize = 0x%x, Buffer = 0x%x\r\n"), cbStart, pCurTD->GetDataSize()));

  07e34	e59d0088	 ldr         r0, [sp, #0x88]
  07e38	eb000000	 bl          |?GetDataSize@CQTD@@QAAKXZ|
  07e3c	e58d0048	 str         r0, [sp, #0x48]
  07e40	e59d2048	 ldr         r2, [sp, #0x48]
  07e44	e59d1024	 ldr         r1, [sp, #0x24]
  07e48	e59f035c	 ldr         r0, [pc, #0x35C]
  07e4c	eb000000	 bl          NKDbgPrintfW
  07e50	e3a03001	 mov         r3, #1
  07e54	e58d304c	 str         r3, [sp, #0x4C]
  07e58	ea000001	 b           |$LN11@ReadDMA|
  07e5c	e3a03000	 mov         r3, #0
  07e60	e58d304c	 str         r3, [sp, #0x4C]
  07e64		 |$LN11@ReadDMA|

; 2436 :         memdump(pvData, (USHORT)cbStart, 0);
; 2437 :         RETAILMSG(1, (TEXT("ReadDMA with count = 0, with RxCSR = 0x%x\r\n"), INREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].RxCSR)));

  07e64	e59d3018	 ldr         r3, [sp, #0x18]
  07e68	e283001c	 add         r0, r3, #0x1C
  07e6c	e5dd3015	 ldrb        r3, [sp, #0x15]
  07e70	e1a01003	 mov         r1, r3
  07e74	e3a03010	 mov         r3, #0x10
  07e78	e0020391	 mul         r2, r1, r3
  07e7c	e5903000	 ldr         r3, [r0]
  07e80	e0833002	 add         r3, r3, r2
  07e84	e2831006	 add         r1, r3, #6
  07e88	e5d13001	 ldrb        r3, [r1, #1]
  07e8c	e1a03403	 mov         r3, r3, lsl #8
  07e90	e1a02803	 mov         r2, r3, lsl #16
  07e94	e1a02822	 mov         r2, r2, lsr #16
  07e98	e5d13000	 ldrb        r3, [r1]
  07e9c	e1833002	 orr         r3, r3, r2
  07ea0	e1a01003	 mov         r1, r3
  07ea4	e59f02fc	 ldr         r0, [pc, #0x2FC]
  07ea8	eb000000	 bl          NKDbgPrintfW
  07eac	e3a03001	 mov         r3, #1
  07eb0	e58d3050	 str         r3, [sp, #0x50]
  07eb4	ea000001	 b           |$LN13@ReadDMA|
  07eb8	e3a03000	 mov         r3, #0
  07ebc	e58d3050	 str         r3, [sp, #0x50]
  07ec0		 |$LN13@ReadDMA|

; 2438 :         // Dump the data
; 2439 :         RETAILMSG(1, (TEXT("Debug here\r\n")));

  07ec0	e59f02dc	 ldr         r0, [pc, #0x2DC]
  07ec4	eb000000	 bl          NKDbgPrintfW
  07ec8	e3a03001	 mov         r3, #1
  07ecc	e58d3054	 str         r3, [sp, #0x54]
  07ed0	ea000001	 b           |$LN15@ReadDMA|
  07ed4	e3a03000	 mov         r3, #0
  07ed8	e58d3054	 str         r3, [sp, #0x54]
  07edc		 |$LN15@ReadDMA|
  07edc		 |$LN7@ReadDMA|

; 2440 :         // Force dwCount = dwMaxPacket
; 2441 :         //dwCount = dwMaxPacket;
; 2442 :     }
; 2443 : #endif
; 2444 : 
; 2445 :     if (size < dwCount)

  07edc	e59d2080	 ldr         r2, [sp, #0x80]
  07ee0	e59d3010	 ldr         r3, [sp, #0x10]
  07ee4	e1520003	 cmp         r2, r3
  07ee8	2a000028	 bcs         |$LN6@ReadDMA|

; 2446 :     {
; 2447 :         DWORD dwErr = USB_CLIENT_BUFFER_ERROR;

  07eec	e3a03f41	 mov         r3, #0x41, 30
  07ef0	e58d3028	 str         r3, [sp, #0x28]

; 2448 : 
; 2449 :         // We need to ack back to MDD the failure
; 2450 :         DEBUGMSG(ZONE_WARNING, (TEXT("Warning!!! Not enough buffer size!!!\r\n")));

  07ef4	e59f329c	 ldr         r3, [pc, #0x29C]
  07ef8	e5933440	 ldr         r3, [r3, #0x440]
  07efc	e3130a02	 tst         r3, #2, 20
  07f00	0a000004	 beq         |$LN16@ReadDMA|
  07f04	e59f0294	 ldr         r0, [pc, #0x294]
  07f08	eb000000	 bl          NKDbgPrintfW
  07f0c	e3a03001	 mov         r3, #1
  07f10	e58d3058	 str         r3, [sp, #0x58]
  07f14	ea000001	 b           |$LN17@ReadDMA|
  07f18		 |$LN16@ReadDMA|
  07f18	e3a03000	 mov         r3, #0
  07f1c	e58d3058	 str         r3, [sp, #0x58]
  07f20		 |$LN17@ReadDMA|

; 2451 :         dwCount = size;                

  07f20	e59d3080	 ldr         r3, [sp, #0x80]
  07f24	e58d3010	 str         r3, [sp, #0x10]

; 2452 :         if (size == 0)

  07f28	e59d3080	 ldr         r3, [sp, #0x80]
  07f2c	e3530000	 cmp         r3, #0
  07f30	1a00000e	 bne         |$LN5@ReadDMA|

; 2453 :         {
; 2454 :             RETAILMSG(1, (TEXT("Assume the next data arrive\r\n")));

  07f34	e59f0260	 ldr         r0, [pc, #0x260]
  07f38	eb000000	 bl          NKDbgPrintfW
  07f3c	e3a03001	 mov         r3, #1
  07f40	e58d305c	 str         r3, [sp, #0x5C]
  07f44	ea000001	 b           |$LN19@ReadDMA|
  07f48	e3a03000	 mov         r3, #0
  07f4c	e58d305c	 str         r3, [sp, #0x5C]
  07f50		 |$LN19@ReadDMA|

; 2455 :             SetRxDataAvail(USB_ENDPOINT(endpoint));

  07f50	e5dd3074	 ldrb        r3, [sp, #0x74]
  07f54	e203300f	 and         r3, r3, #0xF
  07f58	e20310ff	 and         r1, r3, #0xFF
  07f5c	e59d006c	 ldr         r0, [sp, #0x6C]
  07f60	eb000000	 bl          |?SetRxDataAvail@CHW@@QAAXE@Z|

; 2456 :             dwErr = USB_NO_ERROR;

  07f64	e3a03000	 mov         r3, #0
  07f68	e58d3028	 str         r3, [sp, #0x28]

; 2457 :         }
; 2458 :         else

  07f6c	ea000001	 b           |$LN4@ReadDMA|
  07f70		 |$LN5@ReadDMA|

; 2459 :             dwErr = USB_CLIENT_BUFFER_ERROR;

  07f70	e3a03f41	 mov         r3, #0x41, 30
  07f74	e58d3028	 str         r3, [sp, #0x28]
  07f78		 |$LN4@ReadDMA|

; 2460 :         LeaveCriticalSection(&pOTG->regCS);

  07f78	e59d3018	 ldr         r3, [sp, #0x18]
  07f7c	e2830038	 add         r0, r3, #0x38
  07f80	eb000000	 bl          LeaveCriticalSection

; 2461 : 
; 2462 :         // Using ReadFIFO to clear up the FIFO
; 2463 :         return dwErr;

  07f84	e59d3028	 ldr         r3, [sp, #0x28]
  07f88	e58d302c	 str         r3, [sp, #0x2C]
  07f8c	ea00007c	 b           |$LN8@ReadDMA|
  07f90		 |$LN6@ReadDMA|

; 2464 :     }
; 2465 :         
; 2466 :     if ((dwCount >= dwMaxPacket) && (size > dwCount))   

  07f90	e59d2010	 ldr         r2, [sp, #0x10]
  07f94	e59d3084	 ldr         r3, [sp, #0x84]
  07f98	e1520003	 cmp         r2, r3
  07f9c	3a000005	 bcc         |$LN3@ReadDMA|
  07fa0	e59d2080	 ldr         r2, [sp, #0x80]
  07fa4	e59d3010	 ldr         r3, [sp, #0x10]
  07fa8	e1520003	 cmp         r2, r3
  07fac	9a000001	 bls         |$LN3@ReadDMA|

; 2467 :         mode = 1;

  07fb0	e3a03001	 mov         r3, #1
  07fb4	e5cd3014	 strb        r3, [sp, #0x14]
  07fb8		 |$LN3@ReadDMA|

; 2468 :     
; 2469 :     DEBUGMSG(ZONE_TRANSFER|ZONE_HCD, (TEXT("ReadDMA(%d): count=0x%x, maxpacket=0x%x, size=0x%x\r\n"), 
; 2470 :         mode, dwCount, dwMaxPacket, size));

  07fb8	e59f31d8	 ldr         r3, [pc, #0x1D8]
  07fbc	e5933440	 ldr         r3, [r3, #0x440]
  07fc0	e2032c01	 and         r2, r3, #1, 24
  07fc4	e59f31cc	 ldr         r3, [pc, #0x1CC]
  07fc8	e5933440	 ldr         r3, [r3, #0x440]
  07fcc	e2033001	 and         r3, r3, #1
  07fd0	e1923003	 orrs        r3, r2, r3
  07fd4	0a000009	 beq         |$LN20@ReadDMA|
  07fd8	e59d3080	 ldr         r3, [sp, #0x80]
  07fdc	e58d3000	 str         r3, [sp]
  07fe0	e59d3084	 ldr         r3, [sp, #0x84]
  07fe4	e59d2010	 ldr         r2, [sp, #0x10]
  07fe8	e5dd1014	 ldrb        r1, [sp, #0x14]
  07fec	e59f01a0	 ldr         r0, [pc, #0x1A0]
  07ff0	eb000000	 bl          NKDbgPrintfW
  07ff4	e3a03001	 mov         r3, #1
  07ff8	e58d3060	 str         r3, [sp, #0x60]
  07ffc	ea000001	 b           |$LN21@ReadDMA|
  08000		 |$LN20@ReadDMA|
  08000	e3a03000	 mov         r3, #0
  08004	e58d3060	 str         r3, [sp, #0x60]
  08008		 |$LN21@ReadDMA|

; 2471 :     // First clear the REQPKT
; 2472 :     rxcsr = INREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].RxCSR); 

  08008	e59d3018	 ldr         r3, [sp, #0x18]
  0800c	e283001c	 add         r0, r3, #0x1C
  08010	e5dd3015	 ldrb        r3, [sp, #0x15]
  08014	e1a01003	 mov         r1, r3
  08018	e3a03010	 mov         r3, #0x10
  0801c	e0020391	 mul         r2, r1, r3
  08020	e5903000	 ldr         r3, [r0]
  08024	e0833002	 add         r3, r3, r2
  08028	e2831006	 add         r1, r3, #6
  0802c	e5d13001	 ldrb        r3, [r1, #1]
  08030	e1a03403	 mov         r3, r3, lsl #8
  08034	e1a02803	 mov         r2, r3, lsl #16
  08038	e1a02822	 mov         r2, r2, lsr #16
  0803c	e5d13000	 ldrb        r3, [r1]
  08040	e1833002	 orr         r3, r3, r2
  08044	e1cd31bc	 strh        r3, [sp, #0x1C]

; 2473 :     rxcsr &= ~(RXCSR_H_ReqPkt);

  08048	e1dd31bc	 ldrh        r3, [sp, #0x1C]
  0804c	e1a02003	 mov         r2, r3
  08050	e3e03020	 mvn         r3, #0x20
  08054	e0023003	 and         r3, r2, r3
  08058	e1a03803	 mov         r3, r3, lsl #16
  0805c	e1a03823	 mov         r3, r3, lsr #16
  08060	e1cd31bc	 strh        r3, [sp, #0x1C]

; 2474 :     
; 2475 :     if (mode == 0)

  08064	e5dd3014	 ldrb        r3, [sp, #0x14]
  08068	e3530000	 cmp         r3, #0
  0806c	1a000011	 bne         |$LN2@ReadDMA|

; 2476 :     {
; 2477 :         dwReadSize = dwCount;

  08070	e59d3010	 ldr         r3, [sp, #0x10]
  08074	e58d3020	 str         r3, [sp, #0x20]

; 2478 :         rxcsr &= ~(RXCSR_H_AutoReq);

  08078	e1dd31bc	 ldrh        r3, [sp, #0x1C]
  0807c	e1a02003	 mov         r2, r3
  08080	e3e03901	 mvn         r3, #1, 18
  08084	e0023003	 and         r3, r2, r3
  08088	e1a03803	 mov         r3, r3, lsl #16
  0808c	e1a03823	 mov         r3, r3, lsr #16
  08090	e1cd31bc	 strh        r3, [sp, #0x1C]

; 2479 :         rxcsr |= (RXCSR_H_AutoClr| RXCSR_H_DMAReqEn);

  08094	e1dd31bc	 ldrh        r3, [sp, #0x1C]
  08098	e3833a0a	 orr         r3, r3, #0xA, 20
  0809c	e1a03803	 mov         r3, r3, lsl #16
  080a0	e1a03823	 mov         r3, r3, lsr #16
  080a4	e1cd31bc	 strh        r3, [sp, #0x1C]

; 2480 :         pCurTD->SetStatus(STATUS_WAIT_DMA_0_RD_FIFO_COMPLETE);

  080a8	e3a0100a	 mov         r1, #0xA
  080ac	e59d0088	 ldr         r0, [sp, #0x88]
  080b0	eb000000	 bl          |?SetStatus@CQTD@@QAAXK@Z|

; 2481 :     }
; 2482 :     else

  080b4	ea000010	 b           |$LN1@ReadDMA|
  080b8		 |$LN2@ReadDMA|

; 2483 :     {
; 2484 :         dwReadSize = size;

  080b8	e59d3080	 ldr         r3, [sp, #0x80]
  080bc	e58d3020	 str         r3, [sp, #0x20]

; 2485 :         rxcsr &= ~(RXCSR_H_DMAReqMode);

  080c0	e1dd31bc	 ldrh        r3, [sp, #0x1C]
  080c4	e1a02003	 mov         r2, r3
  080c8	e3e03b02	 mvn         r3, #2, 22
  080cc	e0023003	 and         r3, r2, r3
  080d0	e1a03803	 mov         r3, r3, lsl #16
  080d4	e1a03823	 mov         r3, r3, lsr #16
  080d8	e1cd31bc	 strh        r3, [sp, #0x1C]

; 2486 :         rxcsr |= (RXCSR_H_AutoReq| RXCSR_H_AutoClr|RXCSR_H_DMAReqEn);

  080dc	e1dd31bc	 ldrh        r3, [sp, #0x1C]
  080e0	e3833a0e	 orr         r3, r3, #0xE, 20
  080e4	e1a03803	 mov         r3, r3, lsl #16
  080e8	e1a03823	 mov         r3, r3, lsr #16
  080ec	e1cd31bc	 strh        r3, [sp, #0x1C]

; 2487 :         pCurTD->SetStatus(STATUS_WAIT_DMA_1_RD_FIFO_COMPLETE);

  080f0	e3a0100b	 mov         r1, #0xB
  080f4	e59d0088	 ldr         r0, [sp, #0x88]
  080f8	eb000000	 bl          |?SetStatus@CQTD@@QAAXK@Z|
  080fc		 |$LN1@ReadDMA|

; 2488 :     }
; 2489 :     OUTREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].RxCSR, rxcsr);

  080fc	e59d3018	 ldr         r3, [sp, #0x18]
  08100	e283001c	 add         r0, r3, #0x1C
  08104	e5dd3015	 ldrb        r3, [sp, #0x15]
  08108	e1a01003	 mov         r1, r3
  0810c	e3a03010	 mov         r3, #0x10
  08110	e0020391	 mul         r2, r1, r3
  08114	e5903000	 ldr         r3, [r0]
  08118	e0833002	 add         r3, r3, r2
  0811c	e2832006	 add         r2, r3, #6
  08120	e1dd31bc	 ldrh        r3, [sp, #0x1C]
  08124	e5c23000	 strb        r3, [r2]
  08128	e1a03423	 mov         r3, r3, lsr #8
  0812c	e5c23001	 strb        r3, [r2, #1]

; 2490 :     LeaveCriticalSection(&pOTG->regCS);

  08130	e59d3018	 ldr         r3, [sp, #0x18]
  08134	e2830038	 add         r0, r3, #0x38
  08138	eb000000	 bl          LeaveCriticalSection

; 2491 :         
; 2492 :     pCurTD->SetCurTfrSize(dwReadSize);    

  0813c	e59d1020	 ldr         r1, [sp, #0x20]
  08140	e59d0088	 ldr         r0, [sp, #0x88]
  08144	eb000000	 bl          |?SetCurTfrSize@CQTD@@QAAXK@Z|

; 2493 :     ProcessDMAChannel((void *)pOTG, endpoint, channel, FALSE, pBuff, dwReadSize, dwMaxPacket);

  08148	e59d3084	 ldr         r3, [sp, #0x84]
  0814c	e58d300c	 str         r3, [sp, #0xC]
  08150	e59d3020	 ldr         r3, [sp, #0x20]
  08154	e58d3008	 str         r3, [sp, #8]
  08158	e59d307c	 ldr         r3, [sp, #0x7C]
  0815c	e58d3004	 str         r3, [sp, #4]
  08160	e3a03000	 mov         r3, #0
  08164	e58d3000	 str         r3, [sp]
  08168	e5dd3078	 ldrb        r3, [sp, #0x78]
  0816c	e5dd2074	 ldrb        r2, [sp, #0x74]
  08170	e59d1018	 ldr         r1, [sp, #0x18]
  08174	e59d006c	 ldr         r0, [sp, #0x6C]
  08178	eb000000	 bl          |?ProcessDMAChannel@CHW@@QAAHPAXEEH0KK@Z|

; 2494 :     
; 2495 :     return dwReadSize;

  0817c	e59d3020	 ldr         r3, [sp, #0x20]
  08180	e58d302c	 str         r3, [sp, #0x2C]
  08184		 |$LN8@ReadDMA|

; 2496 : }

  08184	e59d002c	 ldr         r0, [sp, #0x2C]
  08188	e28dd064	 add         sp, sp, #0x64
  0818c	e89d6000	 ldmia       sp, {sp, lr}
  08190	e12fff1e	 bx          lr
  08194		 |$LN25@ReadDMA|
  08194		 |$LN26@ReadDMA|
  08194	00000000	 DCD         |??_C@_1GK@LEKNDAOH@?$AAR?$AAe?$AAa?$AAd?$AAD?$AAM?$AAA?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?3?$AA?5?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?$DN?$AA0?$AAx?$AA?$CF?$AAx?$AA?0?$AA?5?$AAm?$AAa?$AAx?$AAp?$AAa?$AAc?$AAk@|
  08198		 |$LN27@ReadDMA|
  08198	00000000	 DCD         |dpCurSettings|
  0819c		 |$LN28@ReadDMA|
  0819c	00000000	 DCD         |??_C@_1DM@NJMLNKGC@?$AAA?$AAs?$AAs?$AAu?$AAm?$AAe?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAn?$AAe?$AAx?$AAt?$AA?5?$AAd?$AAa?$AAt?$AAa?$AA?5?$AAa?$AAr?$AAr?$AAi?$AAv?$AAe?$AA?$AN?$AA?6?$AA?$AA@|
  081a0		 |$LN29@ReadDMA|
  081a0	00000000	 DCD         |??_C@_1EO@MCGBNCKK@?$AAW?$AAa?$AAr?$AAn?$AAi?$AAn?$AAg?$AA?$CB?$AA?$CB?$AA?$CB?$AA?5?$AAN?$AAo?$AAt?$AA?5?$AAe?$AAn?$AAo?$AAu?$AAg?$AAh?$AA?5?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?5?$AAs?$AAi?$AAz@|
  081a4		 |$LN30@ReadDMA|
  081a4	00000000	 DCD         |??_C@_1BK@KBIGIHKK@?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?5?$AAh?$AAe?$AAr?$AAe?$AA?$AN?$AA?6?$AA?$AA@|
  081a8		 |$LN31@ReadDMA|
  081a8	00000000	 DCD         |??_C@_1FI@MCGAOEPM@?$AAR?$AAe?$AAa?$AAd?$AAD?$AAM?$AAA?$AA?5?$AAw?$AAi?$AAt?$AAh?$AA?5?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DN?$AA?5?$AA0?$AA?0?$AA?5?$AAw?$AAi?$AAt?$AAh?$AA?5?$AAR?$AAx?$AAC@|
  081ac		 |$LN32@ReadDMA|
  081ac	00000000	 DCD         |??_C@_1GO@KEJCKFIF@?$AAR?$AAe?$AAa?$AAd?$AAD?$AAM?$AAA?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAw?$AAi?$AAt?$AAh?$AA?5?$AAT?$AAo?$AAt?$AAT?$AAf?$AAr?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DN@|
  081b0		 |$M45512|

			 ENDP  ; |?ReadDMA@CHW@@QAAKPAXEE0KKPAVCQTD@@@Z|, CHW::ReadDMA

; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\musb\musbhcd\musbmhdrc\ctd.h

  00000			 AREA	 |.pdata|, PDATA
|$T45527| DCD	|$LN5@SetStatus|
	DCD	0x40000903
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetStatus@CQTD@@QAAXK@Z| PROC	; CQTD::SetStatus

; 85   :     void SetStatus(DWORD status) { m_dwStatus = status;};

  00000		 |$LN5@SetStatus|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M45524|
  0000c	e59d3008	 ldr         r3, [sp, #8]
  00010	e2832028	 add         r2, r3, #0x28
  00014	e59d300c	 ldr         r3, [sp, #0xC]
  00018	e5823000	 str         r3, [r2]
  0001c	e89d6000	 ldmia       sp, {sp, lr}
  00020	e12fff1e	 bx          lr
  00024		 |$M45525|

			 ENDP  ; |?SetStatus@CQTD@@QAAXK@Z|, CQTD::SetStatus


  00000			 AREA	 |.pdata|, PDATA
|$T45534| DCD	|$LN5@SetCurTfrS|
	DCD	0x40000903
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetCurTfrSize@CQTD@@QAAXK@Z| PROC	; CQTD::SetCurTfrSize

; 87   :     void SetCurTfrSize(DWORD size) { m_cbCurTransferred = size;};

  00000		 |$LN5@SetCurTfrS|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M45531|
  0000c	e59d3008	 ldr         r3, [sp, #8]
  00010	e2832020	 add         r2, r3, #0x20
  00014	e59d300c	 ldr         r3, [sp, #0xC]
  00018	e5823000	 str         r3, [r2]
  0001c	e89d6000	 ldmia       sp, {sp, lr}
  00020	e12fff1e	 bx          lr
  00024		 |$M45532|

			 ENDP  ; |?SetCurTfrSize@CQTD@@QAAXK@Z|, CQTD::SetCurTfrSize


  00000			 AREA	 |.pdata|, PDATA
|$T45542| DCD	|$LN5@GetDataSiz|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetDataSize@CQTD@@QAAKXZ| PROC	; CQTD::GetDataSize

; 93   :     DWORD GetDataSize() { return m_cbData; };

  00000		 |$LN5@GetDataSiz|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M45539|
  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e2833018	 add         r3, r3, #0x18
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3000	 str         r3, [sp]
  00020	e59d0000	 ldr         r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M45540|

			 ENDP  ; |?GetDataSize@CQTD@@QAAKXZ|, CQTD::GetDataSize


  00000			 AREA	 |.pdata|, PDATA
|$T45550| DCD	|$LN5@GetTotTfrS|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetTotTfrSize@CQTD@@QAAKXZ| PROC	; CQTD::GetTotTfrSize

; 96   :     DWORD GetTotTfrSize() { return m_cbTransferred; };

  00000		 |$LN5@GetTotTfrS|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M45547|
  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e283301c	 add         r3, r3, #0x1C
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3000	 str         r3, [sp]
  00020	e59d0000	 ldr         r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M45548|

			 ENDP  ; |?GetTotTfrSize@CQTD@@QAAKXZ|, CQTD::GetTotTfrSize

; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\musb\musbhcd\musbmhdrc\chw.h

  00000			 AREA	 |.pdata|, PDATA
|$T45557| DCD	|$LN5@SetRxDataA|
	DCD	0x40001403
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetRxDataAvail@CHW@@QAAXE@Z| PROC	; CHW::SetRxDataAvail

; 387  :     void SetRxDataAvail(UCHAR endpoint) { m_intr_rx_avail |= (1<<endpoint);};

  00000		 |$LN5@SetRxDataA|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M45554|
  0000c	e59d3008	 ldr         r3, [sp, #8]
  00010	e2833c02	 add         r3, r3, #2, 24
  00014	e2831082	 add         r1, r3, #0x82
  00018	e5dd300c	 ldrb        r3, [sp, #0xC]
  0001c	e1a02003	 mov         r2, r3
  00020	e3a03001	 mov         r3, #1
  00024	e1a02213	 mov         r2, r3, lsl r2
  00028	e1d130b0	 ldrh        r3, [r1]
  0002c	e1831002	 orr         r1, r3, r2
  00030	e59d3008	 ldr         r3, [sp, #8]
  00034	e2833c02	 add         r3, r3, #2, 24
  00038	e2832082	 add         r2, r3, #0x82
  0003c	e1a03801	 mov         r3, r1, lsl #16
  00040	e1a03823	 mov         r3, r3, lsr #16
  00044	e1c230b0	 strh        r3, [r2]
  00048	e89d6000	 ldmia       sp, {sp, lr}
  0004c	e12fff1e	 bx          lr
  00050		 |$M45555|

			 ENDP  ; |?SetRxDataAvail@CHW@@QAAXE@Z|, CHW::SetRxDataAvail

	EXPORT	|??_C@_1DM@OEEGCANF@?$AAR?$AAe?$AAa?$AAd?$AAF?$AAI?$AAF?$AAO?$AA?5?$AAU?$AAS?$AAB?$AA?5?$AAN?$AAo?$AAt?$AA?5?$AAR?$AAe?$AAs?$AAp?$AAo?$AAn?$AAd?$AAi?$AAn?$AAg?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EA@HHCJHPPM@?$AAR?$AAe?$AAa?$AAd?$AAF?$AAI?$AAF?$AAO?$AA?5?$AAC?$AAr?$AAi?$AAt?$AAi?$AAc?$AAa?$AAl?$AAS?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?3?$AA?5?$AAO?$AAU?$AAT?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GC@EHKOAKKD@?$AAW?$AAa?$AAr?$AAn?$AAi?$AAn?$AAg?$AA?$CB?$AA?$CB?$AA?$CB?$AA?5?$AAN?$AAo?$AAt?$AA?5?$AAe?$AAn?$AAo?$AAu?$AAg?$AAh?$AA?5?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?5?$AAs?$AAi?$AAz@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DO@HINEMHDL@?$AAR?$AAe?$AAa?$AAd?$AAF?$AAI?$AAF?$AAO?$AA?5?$AAd?$AAw?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?$DN?$AA?$CF?$AAd?$AA?0?$AA?5?$AAs?$AAi?$AAz?$AAe?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|__rt_udiv|

  001a8			 AREA	 |.pdata|, PDATA
|$T45576| DCD	|$LN30@ReadFIFO|
	DCD	0x40010e04
; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\musb\musbhcd\musbmhdrc\chw.cpp

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@OEEGCANF@?$AAR?$AAe?$AAa?$AAd?$AAF?$AAI?$AAF?$AAO?$AA?5?$AAU?$AAS?$AAB?$AA?5?$AAN?$AAo?$AAt?$AA?5?$AAR?$AAe?$AAs?$AAp?$AAo?$AAn?$AAd?$AAi?$AAn?$AAg?$AA?$AN?$AA?6?$AA?$AA@| DCB "R"
	DCB	0x0, "e", 0x0, "a", 0x0, "d", 0x0, "F", 0x0, "I", 0x0, "F"
	DCB	0x0, "O", 0x0, " ", 0x0, "U", 0x0, "S", 0x0, "B", 0x0, " "
	DCB	0x0, "N", 0x0, "o", 0x0, "t", 0x0, " ", 0x0, "R", 0x0, "e"
	DCB	0x0, "s", 0x0, "p", 0x0, "o", 0x0, "n", 0x0, "d", 0x0, "i"
	DCB	0x0, "n", 0x0, "g", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@HHCJHPPM@?$AAR?$AAe?$AAa?$AAd?$AAF?$AAI?$AAF?$AAO?$AA?5?$AAC?$AAr?$AAi?$AAt?$AAi?$AAc?$AAa?$AAl?$AAS?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?3?$AA?5?$AAO?$AAU?$AAT?$AA?$AN?$AA?6?$AA?$AA@| DCB "R"
	DCB	0x0, "e", 0x0, "a", 0x0, "d", 0x0, "F", 0x0, "I", 0x0, "F"
	DCB	0x0, "O", 0x0, " ", 0x0, "C", 0x0, "r", 0x0, "i", 0x0, "t"
	DCB	0x0, "i", 0x0, "c", 0x0, "a", 0x0, "l", 0x0, "S", 0x0, "e"
	DCB	0x0, "c", 0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, ":"
	DCB	0x0, " ", 0x0, "O", 0x0, "U", 0x0, "T", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GC@EHKOAKKD@?$AAW?$AAa?$AAr?$AAn?$AAi?$AAn?$AAg?$AA?$CB?$AA?$CB?$AA?$CB?$AA?5?$AAN?$AAo?$AAt?$AA?5?$AAe?$AAn?$AAo?$AAu?$AAg?$AAh?$AA?5?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?5?$AAs?$AAi?$AAz@| DCB "W"
	DCB	0x0, "a", 0x0, "r", 0x0, "n", 0x0, "i", 0x0, "n", 0x0, "g"
	DCB	0x0, "!", 0x0, "!", 0x0, "!", 0x0, " ", 0x0, "N", 0x0, "o"
	DCB	0x0, "t", 0x0, " ", 0x0, "e", 0x0, "n", 0x0, "o", 0x0, "u"
	DCB	0x0, "g", 0x0, "h", 0x0, " ", 0x0, "b", 0x0, "u", 0x0, "f"
	DCB	0x0, "f", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, "s", 0x0, "i"
	DCB	0x0, "z", 0x0, "e", 0x0, ".", 0x0, " ", 0x0, "N", 0x0, "e"
	DCB	0x0, "e", 0x0, "d", 0x0, " ", 0x0, "t", 0x0, "o", 0x0, " "
	DCB	0x0, "f", 0x0, "i", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@HINEMHDL@?$AAR?$AAe?$AAa?$AAd?$AAF?$AAI?$AAF?$AAO?$AA?5?$AAd?$AAw?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?$DN?$AA?$CF?$AAd?$AA?0?$AA?5?$AAs?$AAi?$AAz?$AAe?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "R"
	DCB	0x0, "e", 0x0, "a", 0x0, "d", 0x0, "F", 0x0, "I", 0x0, "F"
	DCB	0x0, "O", 0x0, " ", 0x0, "d", 0x0, "w", 0x0, "C", 0x0, "o"
	DCB	0x0, "u", 0x0, "n", 0x0, "t", 0x0, "=", 0x0, "%", 0x0, "d"
	DCB	0x0, ",", 0x0, " ", 0x0, "s", 0x0, "i", 0x0, "z", 0x0, "e"
	DCB	0x0, "=", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Odtp

  081b0			 AREA	 |.text|, CODE, ARM

  081b0		 |?ReadFIFO@CHW@@UAAKPAXE0KPAH@Z| PROC	; CHW::ReadFIFO

; 2500 : {

  081b0		 |$LN30@ReadFIFO|
  081b0	e1a0c00d	 mov         r12, sp
  081b4	e92d000f	 stmdb       sp!, {r0 - r3}
  081b8	e92d5000	 stmdb       sp!, {r12, lr}
  081bc	e24dd048	 sub         sp, sp, #0x48
  081c0		 |$M45573|

; 2501 :     PHSMUSB_T pOTG = (PHSMUSB_T)(pContext);

  081c0	e59d3054	 ldr         r3, [sp, #0x54]
  081c4	e58d3010	 str         r3, [sp, #0x10]

; 2502 :     DWORD total = 0;

  081c8	e3a03000	 mov         r3, #0
  081cc	e58d300c	 str         r3, [sp, #0xC]

; 2503 :     DWORD remain = 0;

  081d0	e3a03000	 mov         r3, #0
  081d4	e58d3004	 str         r3, [sp, #4]

; 2504 :     DWORD dwCount = 0;    

  081d8	e3a03000	 mov         r3, #0
  081dc	e58d3000	 str         r3, [sp]

; 2505 :     DWORD dwRead = 0;    

  081e0	e3a03000	 mov         r3, #0
  081e4	e58d3014	 str         r3, [sp, #0x14]

; 2506 :     UCHAR csrIndex;
; 2507 :     // To be implemented
; 2508 :     // First set the index register 
; 2509 :     *pRet = -1;

  081e8	e59d2064	 ldr         r2, [sp, #0x64]
  081ec	e3e03000	 mvn         r3, #0
  081f0	e5823000	 str         r3, [r2]

; 2510 :     EnterCriticalSection(&pOTG->regCS);

  081f4	e59d3010	 ldr         r3, [sp, #0x10]
  081f8	e2830038	 add         r0, r3, #0x38
  081fc	eb000000	 bl          EnterCriticalSection

; 2511 :     OUTREG8(&pOTG->pUsbGenRegs->Index, INDEX(endpoint));

  08200	e5dd3058	 ldrb        r3, [sp, #0x58]
  08204	e203300f	 and         r3, r3, #0xF
  08208	e20320ff	 and         r2, r3, #0xFF
  0820c	e59d3010	 ldr         r3, [sp, #0x10]
  08210	e2833020	 add         r3, r3, #0x20
  08214	e5933000	 ldr         r3, [r3]
  08218	e283300e	 add         r3, r3, #0xE
  0821c	e5c32000	 strb        r2, [r3]

; 2512 :     csrIndex = INDEX(endpoint);

  08220	e5dd3058	 ldrb        r3, [sp, #0x58]
  08224	e203300f	 and         r3, r3, #0xF
  08228	e20330ff	 and         r3, r3, #0xFF
  0822c	e5cd3008	 strb        r3, [sp, #8]

; 2513 :     if (USB_ENDPOINT(endpoint) == 0) 

  08230	e5dd3058	 ldrb        r3, [sp, #0x58]
  08234	e313000f	 tst         r3, #0xF
  08238	1a00001e	 bne         |$LN15@ReadFIFO|

; 2514 :     {
; 2515 :         USHORT reg = INREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].CSR.CSR0);

  0823c	e59d3010	 ldr         r3, [sp, #0x10]
  08240	e283001c	 add         r0, r3, #0x1C
  08244	e5dd3008	 ldrb        r3, [sp, #8]
  08248	e1a01003	 mov         r1, r3
  0824c	e3a03010	 mov         r3, #0x10
  08250	e0020391	 mul         r2, r1, r3
  08254	e5903000	 ldr         r3, [r0]
  08258	e0833002	 add         r3, r3, r2
  0825c	e2831002	 add         r1, r3, #2
  08260	e5d13001	 ldrb        r3, [r1, #1]
  08264	e1a03403	 mov         r3, r3, lsl #8
  08268	e1a02803	 mov         r2, r3, lsl #16
  0826c	e1a02822	 mov         r2, r2, lsr #16
  08270	e5d13000	 ldrb        r3, [r1]
  08274	e1833002	 orr         r3, r3, r2
  08278	e1cd31b8	 strh        r3, [sp, #0x18]

; 2516 :         if(reg & CSR0_H_RxPktRdy) 

  0827c	e1dd31b8	 ldrh        r3, [sp, #0x18]
  08280	e3130001	 tst         r3, #1
  08284	0a00000a	 beq         |$LN14@ReadFIFO|

; 2517 :             dwCount = INREG8(&pOTG->pUsbCsrRegs->ep[csrIndex].Count.Count0);            

  08288	e59d3010	 ldr         r3, [sp, #0x10]
  0828c	e283001c	 add         r0, r3, #0x1C
  08290	e5dd3008	 ldrb        r3, [sp, #8]
  08294	e1a01003	 mov         r1, r3
  08298	e3a03010	 mov         r3, #0x10
  0829c	e0020391	 mul         r2, r1, r3
  082a0	e5903000	 ldr         r3, [r0]
  082a4	e0833002	 add         r3, r3, r2
  082a8	e2833008	 add         r3, r3, #8
  082ac	e5d33000	 ldrb        r3, [r3]
  082b0	e58d3000	 str         r3, [sp]
  082b4		 |$LN14@ReadFIFO|

; 2518 :     }
; 2519 :     else

  082b4	ea000022	 b           |$LN13@ReadFIFO|
  082b8		 |$LN15@ReadFIFO|

; 2520 :     {
; 2521 :         USHORT reg = INREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].RxCSR);

  082b8	e59d3010	 ldr         r3, [sp, #0x10]
  082bc	e283001c	 add         r0, r3, #0x1C
  082c0	e5dd3008	 ldrb        r3, [sp, #8]
  082c4	e1a01003	 mov         r1, r3
  082c8	e3a03010	 mov         r3, #0x10
  082cc	e0020391	 mul         r2, r1, r3
  082d0	e5903000	 ldr         r3, [r0]
  082d4	e0833002	 add         r3, r3, r2
  082d8	e2831006	 add         r1, r3, #6
  082dc	e5d13001	 ldrb        r3, [r1, #1]
  082e0	e1a03403	 mov         r3, r3, lsl #8
  082e4	e1a02803	 mov         r2, r3, lsl #16
  082e8	e1a02822	 mov         r2, r2, lsr #16
  082ec	e5d13000	 ldrb        r3, [r1]
  082f0	e1833002	 orr         r3, r3, r2
  082f4	e1cd31ba	 strh        r3, [sp, #0x1A]

; 2522 :         if (reg & RXCSR_H_RxPktRdy)

  082f8	e1dd31ba	 ldrh        r3, [sp, #0x1A]
  082fc	e3130001	 tst         r3, #1
  08300	0a00000f	 beq         |$LN12@ReadFIFO|

; 2523 :             dwCount = INREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].Count.RxCount);

  08304	e59d3010	 ldr         r3, [sp, #0x10]
  08308	e283001c	 add         r0, r3, #0x1C
  0830c	e5dd3008	 ldrb        r3, [sp, #8]
  08310	e1a01003	 mov         r1, r3
  08314	e3a03010	 mov         r3, #0x10
  08318	e0020391	 mul         r2, r1, r3
  0831c	e5903000	 ldr         r3, [r0]
  08320	e0833002	 add         r3, r3, r2
  08324	e2831008	 add         r1, r3, #8
  08328	e5d13001	 ldrb        r3, [r1, #1]
  0832c	e1a03403	 mov         r3, r3, lsl #8
  08330	e1a02803	 mov         r2, r3, lsl #16
  08334	e1a02822	 mov         r2, r2, lsr #16
  08338	e5d13000	 ldrb        r3, [r1]
  0833c	e1833002	 orr         r3, r3, r2
  08340	e58d3000	 str         r3, [sp]
  08344		 |$LN12@ReadFIFO|
  08344		 |$LN13@ReadFIFO|

; 2524 :     }
; 2525 : 
; 2526 :     DEBUGMSG(ZONE_TRANSFER, (TEXT("ReadFIFO dwCount=%d, size=%d\r\n"), dwCount, size));

  08344	e59f3298	 ldr         r3, [pc, #0x298]
  08348	e5933440	 ldr         r3, [r3, #0x440]
  0834c	e3130c01	 tst         r3, #1, 24
  08350	0a000006	 beq         |$LN18@ReadFIFO|
  08354	e59d2060	 ldr         r2, [sp, #0x60]
  08358	e59d1000	 ldr         r1, [sp]
  0835c	e59f027c	 ldr         r0, [pc, #0x27C]
  08360	eb000000	 bl          NKDbgPrintfW
  08364	e3a03001	 mov         r3, #1
  08368	e58d3034	 str         r3, [sp, #0x34]
  0836c	ea000001	 b           |$LN19@ReadFIFO|
  08370		 |$LN18@ReadFIFO|
  08370	e3a03000	 mov         r3, #0
  08374	e58d3034	 str         r3, [sp, #0x34]
  08378		 |$LN19@ReadFIFO|

; 2527 :     if (dwCount > size) 

  08378	e59d2000	 ldr         r2, [sp]
  0837c	e59d3060	 ldr         r3, [sp, #0x60]
  08380	e1520003	 cmp         r2, r3
  08384	9a00002c	 bls         |$LN11@ReadFIFO|

; 2528 :     { 
; 2529 :         DWORD dwErr = USB_CLIENT_BUFFER_ERROR;

  08388	e3a03f41	 mov         r3, #0x41, 30
  0838c	e58d301c	 str         r3, [sp, #0x1C]

; 2530 :         RETAILMSG(1, (TEXT("Warning!!! Not enough buffer size. Need to fix\r\n")));

  08390	e59f0244	 ldr         r0, [pc, #0x244]
  08394	eb000000	 bl          NKDbgPrintfW
  08398	e3a03001	 mov         r3, #1
  0839c	e58d3038	 str         r3, [sp, #0x38]
  083a0	ea000001	 b           |$LN21@ReadFIFO|
  083a4	e3a03000	 mov         r3, #0
  083a8	e58d3038	 str         r3, [sp, #0x38]
  083ac		 |$LN21@ReadFIFO|

; 2531 :         RETAILMSG(1, (TEXT("ReadFIFO CriticalSection: OUT\r\n")));

  083ac	e59f0224	 ldr         r0, [pc, #0x224]
  083b0	eb000000	 bl          NKDbgPrintfW
  083b4	e3a03001	 mov         r3, #1
  083b8	e58d303c	 str         r3, [sp, #0x3C]
  083bc	ea000001	 b           |$LN23@ReadFIFO|
  083c0	e3a03000	 mov         r3, #0
  083c4	e58d303c	 str         r3, [sp, #0x3C]
  083c8		 |$LN23@ReadFIFO|

; 2532 :         if (size == 0)

  083c8	e59d3060	 ldr         r3, [sp, #0x60]
  083cc	e3530000	 cmp         r3, #0
  083d0	1a000011	 bne         |$LN10@ReadFIFO|

; 2533 :         {
; 2534 :             RETAILMSG(1, (TEXT("Assume the next data arrive\r\n")));

  083d4	e59f01f8	 ldr         r0, [pc, #0x1F8]
  083d8	eb000000	 bl          NKDbgPrintfW
  083dc	e3a03001	 mov         r3, #1
  083e0	e58d3040	 str         r3, [sp, #0x40]
  083e4	ea000001	 b           |$LN25@ReadFIFO|
  083e8	e3a03000	 mov         r3, #0
  083ec	e58d3040	 str         r3, [sp, #0x40]
  083f0		 |$LN25@ReadFIFO|

; 2535 :             SetRxDataAvail(USB_ENDPOINT(endpoint));

  083f0	e5dd3058	 ldrb        r3, [sp, #0x58]
  083f4	e203300f	 and         r3, r3, #0xF
  083f8	e20310ff	 and         r1, r3, #0xFF
  083fc	e59d0050	 ldr         r0, [sp, #0x50]
  08400	eb000000	 bl          |?SetRxDataAvail@CHW@@QAAXE@Z|

; 2536 :             *pRet = 0;

  08404	e59d2064	 ldr         r2, [sp, #0x64]
  08408	e3a03000	 mov         r3, #0
  0840c	e5823000	 str         r3, [r2]

; 2537 :             dwErr = USB_NO_ERROR;

  08410	e3a03000	 mov         r3, #0
  08414	e58d301c	 str         r3, [sp, #0x1C]

; 2538 :         }
; 2539 :         else

  08418	ea000001	 b           |$LN9@ReadFIFO|
  0841c		 |$LN10@ReadFIFO|

; 2540 :             dwErr = USB_CLIENT_BUFFER_ERROR;

  0841c	e3a03f41	 mov         r3, #0x41, 30
  08420	e58d301c	 str         r3, [sp, #0x1C]
  08424		 |$LN9@ReadFIFO|

; 2541 :         LeaveCriticalSection(&pOTG->regCS);

  08424	e59d3010	 ldr         r3, [sp, #0x10]
  08428	e2830038	 add         r0, r3, #0x38
  0842c	eb000000	 bl          LeaveCriticalSection

; 2542 :         return dwErr;

  08430	e59d301c	 ldr         r3, [sp, #0x1C]
  08434	e58d3030	 str         r3, [sp, #0x30]
  08438	ea000060	 b           |$LN16@ReadFIFO|
  0843c		 |$LN11@ReadFIFO|

; 2543 :     }
; 2544 :     // Read the data with dwCount
; 2545 :     if (dwCount != 0)  // In case of IN data arrive

  0843c	e59d3000	 ldr         r3, [sp]
  08440	e3530000	 cmp         r3, #0
  08444	0a00004e	 beq         |$LN8@ReadFIFO|

; 2546 :     {
; 2547 :         DWORD i = 0;

  08448	e3a03000	 mov         r3, #0
  0844c	e58d3024	 str         r3, [sp, #0x24]

; 2548 :         DWORD *pData = (DWORD *)pBuff;        

  08450	e59d305c	 ldr         r3, [sp, #0x5C]
  08454	e58d3020	 str         r3, [sp, #0x20]

; 2549 :         total = dwCount/4;

  08458	e59d1000	 ldr         r1, [sp]
  0845c	e3a00004	 mov         r0, #4
  08460	eb000000	 bl          __rt_udiv
  08464	e58d000c	 str         r0, [sp, #0xC]

; 2550 :         remain = dwCount%4;

  08468	e59d1000	 ldr         r1, [sp]
  0846c	e3a00004	 mov         r0, #4
  08470	eb000000	 bl          __rt_udiv
  08474	e58d1004	 str         r1, [sp, #4]

; 2551 : 
; 2552 : 		// this is 32-bit align
; 2553 : 		for (i = 0; i < total; i++)

  08478	e3a03000	 mov         r3, #0
  0847c	e58d3024	 str         r3, [sp, #0x24]
  08480	ea000002	 b           |$LN7@ReadFIFO|
  08484		 |$LN6@ReadFIFO|
  08484	e59d3024	 ldr         r3, [sp, #0x24]
  08488	e2833001	 add         r3, r3, #1
  0848c	e58d3024	 str         r3, [sp, #0x24]
  08490		 |$LN7@ReadFIFO|
  08490	e59d2024	 ldr         r2, [sp, #0x24]
  08494	e59d300c	 ldr         r3, [sp, #0xC]
  08498	e1520003	 cmp         r2, r3
  0849c	2a000012	 bcs         |$LN5@ReadFIFO|

; 2554 : 		{
; 2555 : 			*pData++ = INREG32(&pOTG->pUsbGenRegs->fifo[csrIndex]);

  084a0	e59d3010	 ldr         r3, [sp, #0x10]
  084a4	e2833020	 add         r3, r3, #0x20
  084a8	e5933000	 ldr         r3, [r3]
  084ac	e2831020	 add         r1, r3, #0x20
  084b0	e5dd3008	 ldrb        r3, [sp, #8]
  084b4	e1a02003	 mov         r2, r3
  084b8	e3a03004	 mov         r3, #4
  084bc	e0030392	 mul         r3, r2, r3
  084c0	e0813003	 add         r3, r1, r3
  084c4	e5932000	 ldr         r2, [r3]
  084c8	e59d3020	 ldr         r3, [sp, #0x20]
  084cc	e5832000	 str         r2, [r3]
  084d0	e59d3020	 ldr         r3, [sp, #0x20]
  084d4	e2833004	 add         r3, r3, #4
  084d8	e58d3020	 str         r3, [sp, #0x20]

; 2556 : 			dwRead = dwRead + 4;

  084dc	e59d3014	 ldr         r3, [sp, #0x14]
  084e0	e2833004	 add         r3, r3, #4
  084e4	e58d3014	 str         r3, [sp, #0x14]

; 2557 : 		}

  084e8	eaffffe5	 b           |$LN6@ReadFIFO|
  084ec		 |$LN5@ReadFIFO|

; 2558 : 	        
; 2559 : 		// Set the pByte equal to the last bytes of data being transferred
; 2560 : 		if (remain != 0)

  084ec	e59d3004	 ldr         r3, [sp, #4]
  084f0	e3530000	 cmp         r3, #0
  084f4	0a000021	 beq         |$LN4@ReadFIFO|

; 2561 : 		{
; 2562 : 			UCHAR* pUCHAR = (UCHAR*) pData;

  084f8	e59d3020	 ldr         r3, [sp, #0x20]
  084fc	e58d302c	 str         r3, [sp, #0x2C]

; 2563 : 			DWORD dwTemp = INREG32(&pOTG->pUsbGenRegs->fifo[csrIndex]);

  08500	e59d3010	 ldr         r3, [sp, #0x10]
  08504	e2833020	 add         r3, r3, #0x20
  08508	e5933000	 ldr         r3, [r3]
  0850c	e2831020	 add         r1, r3, #0x20
  08510	e5dd3008	 ldrb        r3, [sp, #8]
  08514	e1a02003	 mov         r2, r3
  08518	e3a03004	 mov         r3, #4
  0851c	e0030392	 mul         r3, r2, r3
  08520	e0813003	 add         r3, r1, r3
  08524	e5933000	 ldr         r3, [r3]
  08528	e58d3028	 str         r3, [sp, #0x28]
  0852c		 |$LN3@ReadFIFO|

; 2564 : 	        
; 2565 : 			while (remain--)

  0852c	e59d3004	 ldr         r3, [sp, #4]
  08530	e3530000	 cmp         r3, #0
  08534	e59d3004	 ldr         r3, [sp, #4]
  08538	e2433001	 sub         r3, r3, #1
  0853c	e58d3004	 str         r3, [sp, #4]
  08540	0a00000e	 beq         |$LN2@ReadFIFO|

; 2566 : 			{
; 2567 : 				*pUCHAR++ = (UCHAR) (dwTemp & 0xFF);

  08544	e59d3028	 ldr         r3, [sp, #0x28]
  08548	e20330ff	 and         r3, r3, #0xFF
  0854c	e20320ff	 and         r2, r3, #0xFF
  08550	e59d302c	 ldr         r3, [sp, #0x2C]
  08554	e5c32000	 strb        r2, [r3]
  08558	e59d302c	 ldr         r3, [sp, #0x2C]
  0855c	e2833001	 add         r3, r3, #1
  08560	e58d302c	 str         r3, [sp, #0x2C]

; 2568 : 				dwTemp>>=8;

  08564	e59d3028	 ldr         r3, [sp, #0x28]
  08568	e1a03423	 mov         r3, r3, lsr #8
  0856c	e58d3028	 str         r3, [sp, #0x28]

; 2569 : 				dwRead++;

  08570	e59d3014	 ldr         r3, [sp, #0x14]
  08574	e2833001	 add         r3, r3, #1
  08578	e58d3014	 str         r3, [sp, #0x14]

; 2570 : 			}

  0857c	eaffffea	 b           |$LN3@ReadFIFO|
  08580		 |$LN2@ReadFIFO|
  08580		 |$LN4@ReadFIFO|

; 2571 : 		}
; 2572 :     }
; 2573 :     else

  08580	ea000006	 b           |$LN1@ReadFIFO|
  08584		 |$LN8@ReadFIFO|

; 2574 :     {
; 2575 :         RETAILMSG(1, (TEXT("ReadFIFO USB Not Responding\r\n")));

  08584	e59f0044	 ldr         r0, [pc, #0x44]
  08588	eb000000	 bl          NKDbgPrintfW
  0858c	e3a03001	 mov         r3, #1
  08590	e58d3044	 str         r3, [sp, #0x44]
  08594	ea000001	 b           |$LN27@ReadFIFO|
  08598	e3a03000	 mov         r3, #0
  0859c	e58d3044	 str         r3, [sp, #0x44]
  085a0		 |$LN27@ReadFIFO|
  085a0		 |$LN1@ReadFIFO|

; 2576 : //        return USB_DEVICE_NOT_RESPONDING_ERROR;
; 2577 :     }
; 2578 : 
; 2579 : #if 0
; 2580 :     {
; 2581 :         DWORD i = 0;
; 2582 :         UCHAR *pByte = (UCHAR *)pBuff;
; 2583 :         RETAILMSG(1, (TEXT("Receive total of %d byte\r\n"), dwRead));
; 2584 :         for (i = 0; i < dwRead; i++)
; 2585 :             RETAILMSG(1, (TEXT("0x%x "), *(pByte+i)));
; 2586 :         RETAILMSG(1, (TEXT("\r\n")));
; 2587 :     }
; 2588 : #endif    
; 2589 :     *pRet = dwRead;

  085a0	e59d2014	 ldr         r2, [sp, #0x14]
  085a4	e59d3064	 ldr         r3, [sp, #0x64]
  085a8	e5832000	 str         r2, [r3]

; 2590 :     LeaveCriticalSection(&pOTG->regCS);

  085ac	e59d3010	 ldr         r3, [sp, #0x10]
  085b0	e2830038	 add         r0, r3, #0x38
  085b4	eb000000	 bl          LeaveCriticalSection

; 2591 :     return USB_NO_ERROR;

  085b8	e3a03000	 mov         r3, #0
  085bc	e58d3030	 str         r3, [sp, #0x30]
  085c0		 |$LN16@ReadFIFO|

; 2592 : }

  085c0	e59d0030	 ldr         r0, [sp, #0x30]
  085c4	e28dd048	 add         sp, sp, #0x48
  085c8	e89d6000	 ldmia       sp, {sp, lr}
  085cc	e12fff1e	 bx          lr
  085d0		 |$LN31@ReadFIFO|
  085d0		 |$LN32@ReadFIFO|
  085d0	00000000	 DCD         |??_C@_1DM@OEEGCANF@?$AAR?$AAe?$AAa?$AAd?$AAF?$AAI?$AAF?$AAO?$AA?5?$AAU?$AAS?$AAB?$AA?5?$AAN?$AAo?$AAt?$AA?5?$AAR?$AAe?$AAs?$AAp?$AAo?$AAn?$AAd?$AAi?$AAn?$AAg?$AA?$AN?$AA?6?$AA?$AA@|
  085d4		 |$LN33@ReadFIFO|
  085d4	00000000	 DCD         |??_C@_1DM@NJMLNKGC@?$AAA?$AAs?$AAs?$AAu?$AAm?$AAe?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAn?$AAe?$AAx?$AAt?$AA?5?$AAd?$AAa?$AAt?$AAa?$AA?5?$AAa?$AAr?$AAr?$AAi?$AAv?$AAe?$AA?$AN?$AA?6?$AA?$AA@|
  085d8		 |$LN34@ReadFIFO|
  085d8	00000000	 DCD         |??_C@_1EA@HHCJHPPM@?$AAR?$AAe?$AAa?$AAd?$AAF?$AAI?$AAF?$AAO?$AA?5?$AAC?$AAr?$AAi?$AAt?$AAi?$AAc?$AAa?$AAl?$AAS?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?3?$AA?5?$AAO?$AAU?$AAT?$AA?$AN?$AA?6?$AA?$AA@|
  085dc		 |$LN35@ReadFIFO|
  085dc	00000000	 DCD         |??_C@_1GC@EHKOAKKD@?$AAW?$AAa?$AAr?$AAn?$AAi?$AAn?$AAg?$AA?$CB?$AA?$CB?$AA?$CB?$AA?5?$AAN?$AAo?$AAt?$AA?5?$AAe?$AAn?$AAo?$AAu?$AAg?$AAh?$AA?5?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?5?$AAs?$AAi?$AAz@|
  085e0		 |$LN36@ReadFIFO|
  085e0	00000000	 DCD         |??_C@_1DO@HINEMHDL@?$AAR?$AAe?$AAa?$AAd?$AAF?$AAI?$AAF?$AAO?$AA?5?$AAd?$AAw?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?$DN?$AA?$CF?$AAd?$AA?0?$AA?5?$AAs?$AAi?$AAz?$AAe?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  085e4		 |$LN37@ReadFIFO|
  085e4	00000000	 DCD         |dpCurSettings|
  085e8		 |$M45574|

			 ENDP  ; |?ReadFIFO@CHW@@UAAKPAXE0KPAH@Z|, CHW::ReadFIFO

	EXPORT	|??_C@_1EA@JGLCNLGH@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAC?$AAl?$AAe?$AAa?$AAr?$AAD?$AAM?$AAA?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  001b0			 AREA	 |.pdata|, PDATA
|$T45591| DCD	|$LN8@ClearDMACh|
	DCD	0x40004804

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@JGLCNLGH@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAC?$AAl?$AAe?$AAa?$AAr?$AAD?$AAM?$AAA?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "F"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "t", 0x0, "o", 0x0, " ", 0x0, "C", 0x0, "l", 0x0, "e"
	DCB	0x0, "a", 0x0, "r", 0x0, "D", 0x0, "M", 0x0, "A", 0x0, "C"
	DCB	0x0, "h", 0x0, "a", 0x0, "n", 0x0, "n", 0x0, "e", 0x0, "l"
	DCB	0x0, "(", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  085e8			 AREA	 |.text|, CODE, ARM

  085e8		 |?ClearDMAChannel@CHW@@QAAHE@Z| PROC	; CHW::ClearDMAChannel

; 2595 : {

  085e8		 |$LN8@ClearDMACh|
  085e8	e1a0c00d	 mov         r12, sp
  085ec	e92d0003	 stmdb       sp!, {r0, r1}
  085f0	e92d5000	 stmdb       sp!, {r12, lr}
  085f4	e24dd010	 sub         sp, sp, #0x10
  085f8		 |$M45588|

; 2596 :     PHSMUSB_T pOTG;
; 2597 :     pOTG = (PHSMUSB_T)GetOTGContext();

  085f8	e59d0018	 ldr         r0, [sp, #0x18]
  085fc	eb000000	 bl          |?GetOTGContext@CHcd@@QAAPAXXZ|
  08600	e58d0008	 str         r0, [sp, #8]
  08604	e59d3008	 ldr         r3, [sp, #8]
  08608	e58d3000	 str         r3, [sp]

; 2598 :     if (pOTG == NULL)

  0860c	e59d3000	 ldr         r3, [sp]
  08610	e3530000	 cmp         r3, #0
  08614	1a00000b	 bne         |$LN1@ClearDMACh|

; 2599 :     {
; 2600 :         RETAILMSG(1, (TEXT("Failed to ClearDMAChannel(%d)\r\n"), channel));

  08618	e5dd301c	 ldrb        r3, [sp, #0x1C]
  0861c	e1a01003	 mov         r1, r3
  08620	e59f00dc	 ldr         r0, [pc, #0xDC]
  08624	eb000000	 bl          NKDbgPrintfW
  08628	e3a03001	 mov         r3, #1
  0862c	e58d300c	 str         r3, [sp, #0xC]
  08630	ea000001	 b           |$LN5@ClearDMACh|
  08634	e3a03000	 mov         r3, #0
  08638	e58d300c	 str         r3, [sp, #0xC]
  0863c		 |$LN5@ClearDMACh|

; 2601 :         return FALSE;

  0863c	e3a03000	 mov         r3, #0
  08640	e58d3004	 str         r3, [sp, #4]
  08644	ea00002a	 b           |$LN2@ClearDMACh|
  08648		 |$LN1@ClearDMACh|

; 2602 :     }
; 2603 : 
; 2604 :     EnterCriticalSection(&m_csDMAChannel);

  08648	e59d3018	 ldr         r3, [sp, #0x18]
  0864c	e2830e1d	 add         r0, r3, #0x1D, 28
  08650	eb000000	 bl          EnterCriticalSection

; 2605 :     // Write Control
; 2606 :     OUTREG32(&pOTG->pUsbDmaRegs->dma[channel].Cntl, (DWORD)0x00);

  08654	e59d3000	 ldr         r3, [sp]
  08658	e2833024	 add         r3, r3, #0x24
  0865c	e5933000	 ldr         r3, [r3]
  08660	e2831004	 add         r1, r3, #4
  08664	e5dd301c	 ldrb        r3, [sp, #0x1C]
  08668	e1a02003	 mov         r2, r3
  0866c	e3a03010	 mov         r3, #0x10
  08670	e0030392	 mul         r3, r2, r3
  08674	e0812003	 add         r2, r1, r3
  08678	e3a03000	 mov         r3, #0
  0867c	e5823000	 str         r3, [r2]

; 2607 : 
; 2608 :     OUTREG32(&pOTG->pUsbDmaRegs->dma[channel].Addr, (DWORD)0x00);

  08680	e59d3000	 ldr         r3, [sp]
  08684	e2833024	 add         r3, r3, #0x24
  08688	e5933000	 ldr         r3, [r3]
  0868c	e2831004	 add         r1, r3, #4
  08690	e5dd301c	 ldrb        r3, [sp, #0x1C]
  08694	e1a02003	 mov         r2, r3
  08698	e3a03010	 mov         r3, #0x10
  0869c	e0030392	 mul         r3, r2, r3
  086a0	e0813003	 add         r3, r1, r3
  086a4	e2832004	 add         r2, r3, #4
  086a8	e3a03000	 mov         r3, #0
  086ac	e5823000	 str         r3, [r2]

; 2609 :     // Write count
; 2610 :     OUTREG32(&pOTG->pUsbDmaRegs->dma[channel].Count, (DWORD)0x00);

  086b0	e59d3000	 ldr         r3, [sp]
  086b4	e2833024	 add         r3, r3, #0x24
  086b8	e5933000	 ldr         r3, [r3]
  086bc	e2831004	 add         r1, r3, #4
  086c0	e5dd301c	 ldrb        r3, [sp, #0x1C]
  086c4	e1a02003	 mov         r2, r3
  086c8	e3a03010	 mov         r3, #0x10
  086cc	e0030392	 mul         r3, r2, r3
  086d0	e0813003	 add         r3, r1, r3
  086d4	e2832008	 add         r2, r3, #8
  086d8	e3a03000	 mov         r3, #0
  086dc	e5823000	 str         r3, [r2]

; 2611 :     LeaveCriticalSection(&m_csDMAChannel);

  086e0	e59d3018	 ldr         r3, [sp, #0x18]
  086e4	e2830e1d	 add         r0, r3, #0x1D, 28
  086e8	eb000000	 bl          LeaveCriticalSection

; 2612 : 
; 2613 :     return TRUE;

  086ec	e3a03001	 mov         r3, #1
  086f0	e58d3004	 str         r3, [sp, #4]
  086f4		 |$LN2@ClearDMACh|

; 2614 : }

  086f4	e59d0004	 ldr         r0, [sp, #4]
  086f8	e28dd010	 add         sp, sp, #0x10
  086fc	e89d6000	 ldmia       sp, {sp, lr}
  08700	e12fff1e	 bx          lr
  08704		 |$LN9@ClearDMACh|
  08704		 |$LN10@ClearDMACh|
  08704	00000000	 DCD         |??_C@_1EA@JGLCNLGH@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAC?$AAl?$AAe?$AAa?$AAr?$AAD?$AAM?$AAA?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  08708		 |$M45589|

			 ENDP  ; |?ClearDMAChannel@CHW@@QAAHE@Z|, CHW::ClearDMAChannel

	EXPORT	|??_C@_1DM@CJOPDGB@?$AAD?$AAM?$AAA?$AA?5?$AAE?$AAP?$AA?5?$AA?$CF?$AAd?$AA?5?$AAf?$AAr?$AAo?$AAm?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?5?$AAt?$AAo?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IA@LCNDFBMF@?$AAD?$AAM?$AAA?$AA?5?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?0?$AA?5?$AAA?$AAd?$AAd?$AAr?$AA?5?$AA?$CI?$AA0?$AAx?$AA?$CF?$AAx?$AA?$CJ?$AA?0?$AA?5?$AAC?$AAo@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CC@MMPOJBNP@?$AAD?$AAM?$AAA?$AA?5?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  001b8			 AREA	 |.pdata|, PDATA
|$T45607| DCD	|$LN19@ProcessDMA|
	DCD	0x4000bc04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@CJOPDGB@?$AAD?$AAM?$AAA?$AA?5?$AAE?$AAP?$AA?5?$AA?$CF?$AAd?$AA?5?$AAf?$AAr?$AAo?$AAm?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?5?$AAt?$AAo?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "D"
	DCB	0x0, "M", 0x0, "A", 0x0, " ", 0x0, "E", 0x0, "P", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, " ", 0x0, "f", 0x0, "r", 0x0, "o"
	DCB	0x0, "m", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x"
	DCB	0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IA@LCNDFBMF@?$AAD?$AAM?$AAA?$AA?5?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?0?$AA?5?$AAA?$AAd?$AAd?$AAr?$AA?5?$AA?$CI?$AA0?$AAx?$AA?$CF?$AAx?$AA?$CJ?$AA?0?$AA?5?$AAC?$AAo@| DCB "D"
	DCB	0x0, "M", 0x0, "A", 0x0, " ", 0x0, "C", 0x0, "h", 0x0, "a"
	DCB	0x0, "n", 0x0, "n", 0x0, "e", 0x0, "l", 0x0, "(", 0x0, "%"
	DCB	0x0, "d", 0x0, ")", 0x0, ",", 0x0, " ", 0x0, "A", 0x0, "d"
	DCB	0x0, "d", 0x0, "r", 0x0, " ", 0x0, "(", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "x", 0x0, ")", 0x0, ",", 0x0, " ", 0x0, "C"
	DCB	0x0, "o", 0x0, "u", 0x0, "n", 0x0, "t", 0x0, " ", 0x0, "("
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, ")", 0x0, ","
	DCB	0x0, " ", 0x0, "C", 0x0, "n", 0x0, "t", 0x0, "l", 0x0, "("
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, ")", 0x0, ","
	DCB	0x0, " ", 0x0, "e", 0x0, "p", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CC@MMPOJBNP@?$AAD?$AAM?$AAA?$AA?5?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "D"
	DCB	0x0, "M", 0x0, "A", 0x0, " ", 0x0, "C", 0x0, "h", 0x0, "a"
	DCB	0x0, "n", 0x0, "n", 0x0, "e", 0x0, "l", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  08708			 AREA	 |.text|, CODE, ARM

  08708		 |?ProcessDMAChannel@CHW@@QAAHPAXEEH0KK@Z| PROC ; CHW::ProcessDMAChannel

; 2618 : {

  08708		 |$LN19@ProcessDMA|
  08708	e1a0c00d	 mov         r12, sp
  0870c	e92d000f	 stmdb       sp!, {r0 - r3}
  08710	e92d5000	 stmdb       sp!, {r12, lr}
  08714	e24dd028	 sub         sp, sp, #0x28
  08718		 |$M45604|

; 2619 :     PHSMUSB_T pOTG = (PHSMUSB_T)(pContext);

  08718	e59d3034	 ldr         r3, [sp, #0x34]
  0871c	e58d300c	 str         r3, [sp, #0xC]

; 2620 :     DWORD dmacntl = 0;

  08720	e3a03000	 mov         r3, #0
  08724	e58d3008	 str         r3, [sp, #8]

; 2621 : 
; 2622 :     EnterCriticalSection(&m_csDMAChannel);

  08728	e59d3030	 ldr         r3, [sp, #0x30]
  0872c	e2830e1d	 add         r0, r3, #0x1D, 28
  08730	eb000000	 bl          EnterCriticalSection

; 2623 :     OUTREG32(&pOTG->pUsbDmaRegs->dma[channel].Cntl, (DWORD)0x00);

  08734	e59d300c	 ldr         r3, [sp, #0xC]
  08738	e2833024	 add         r3, r3, #0x24
  0873c	e5933000	 ldr         r3, [r3]
  08740	e2831004	 add         r1, r3, #4
  08744	e5dd303c	 ldrb        r3, [sp, #0x3C]
  08748	e1a02003	 mov         r2, r3
  0874c	e3a03010	 mov         r3, #0x10
  08750	e0030392	 mul         r3, r2, r3
  08754	e0812003	 add         r2, r1, r3
  08758	e3a03000	 mov         r3, #0
  0875c	e5823000	 str         r3, [r2]

; 2624 : 
; 2625 :     OUTREG32(&pOTG->pUsbDmaRegs->dma[channel].Addr, (DWORD)0x00);

  08760	e59d300c	 ldr         r3, [sp, #0xC]
  08764	e2833024	 add         r3, r3, #0x24
  08768	e5933000	 ldr         r3, [r3]
  0876c	e2831004	 add         r1, r3, #4
  08770	e5dd303c	 ldrb        r3, [sp, #0x3C]
  08774	e1a02003	 mov         r2, r3
  08778	e3a03010	 mov         r3, #0x10
  0877c	e0030392	 mul         r3, r2, r3
  08780	e0813003	 add         r3, r1, r3
  08784	e2832004	 add         r2, r3, #4
  08788	e3a03000	 mov         r3, #0
  0878c	e5823000	 str         r3, [r2]

; 2626 :     // Write count
; 2627 :     OUTREG32(&pOTG->pUsbDmaRegs->dma[channel].Count, (DWORD)0x00);

  08790	e59d300c	 ldr         r3, [sp, #0xC]
  08794	e2833024	 add         r3, r3, #0x24
  08798	e5933000	 ldr         r3, [r3]
  0879c	e2831004	 add         r1, r3, #4
  087a0	e5dd303c	 ldrb        r3, [sp, #0x3C]
  087a4	e1a02003	 mov         r2, r3
  087a8	e3a03010	 mov         r3, #0x10
  087ac	e0030392	 mul         r3, r2, r3
  087b0	e0813003	 add         r3, r1, r3
  087b4	e2832008	 add         r2, r3, #8
  087b8	e3a03000	 mov         r3, #0
  087bc	e5823000	 str         r3, [r2]

; 2628 : 
; 2629 :     //  Now actual configure the DMA channel
; 2630 :     //  DMA Mode (D2)
; 2631 :     if (size > dwMaxPacket)

  087c0	e59d2048	 ldr         r2, [sp, #0x48]
  087c4	e59d304c	 ldr         r3, [sp, #0x4C]
  087c8	e1520003	 cmp         r2, r3
  087cc	9a000002	 bls         |$LN8@ProcessDMA|

; 2632 :         dmacntl |= DMA_CNTL_DMAMode;

  087d0	e59d3008	 ldr         r3, [sp, #8]
  087d4	e3833004	 orr         r3, r3, #4
  087d8	e58d3008	 str         r3, [sp, #8]
  087dc		 |$LN8@ProcessDMA|

; 2633 : 
; 2634 :     //  Burst Mode (D10-9)
; 2635 :     if (dwMaxPacket >= 64)

  087dc	e59d304c	 ldr         r3, [sp, #0x4C]
  087e0	e3530040	 cmp         r3, #0x40
  087e4	3a000003	 bcc         |$LN7@ProcessDMA|

; 2636 :         dmacntl |= BURSTMODE_INCR16;

  087e8	e59d3008	 ldr         r3, [sp, #8]
  087ec	e3833c06	 orr         r3, r3, #6, 24
  087f0	e58d3008	 str         r3, [sp, #8]
  087f4	ea00000f	 b           |$LN6@ProcessDMA|
  087f8		 |$LN7@ProcessDMA|

; 2637 :     else if (dwMaxPacket >= 32)

  087f8	e59d304c	 ldr         r3, [sp, #0x4C]
  087fc	e3530020	 cmp         r3, #0x20
  08800	3a000003	 bcc         |$LN5@ProcessDMA|

; 2638 :         dmacntl |= BURSTMODE_INCR8;

  08804	e59d3008	 ldr         r3, [sp, #8]
  08808	e3833b01	 orr         r3, r3, #1, 22
  0880c	e58d3008	 str         r3, [sp, #8]
  08810	ea000008	 b           |$LN4@ProcessDMA|
  08814		 |$LN5@ProcessDMA|

; 2639 :     else if (dwMaxPacket >= 16)

  08814	e59d304c	 ldr         r3, [sp, #0x4C]
  08818	e3530010	 cmp         r3, #0x10
  0881c	3a000003	 bcc         |$LN3@ProcessDMA|

; 2640 :         dmacntl |= BURSTMODE_INCR4;

  08820	e59d3008	 ldr         r3, [sp, #8]
  08824	e3833c02	 orr         r3, r3, #2, 24
  08828	e58d3008	 str         r3, [sp, #8]

; 2641 :     else

  0882c	ea000001	 b           |$LN2@ProcessDMA|
  08830		 |$LN3@ProcessDMA|

; 2642 :         dmacntl |= BURSTMODE_UNSPEC;

  08830	e59d3008	 ldr         r3, [sp, #8]
  08834	e58d3008	 str         r3, [sp, #8]
  08838		 |$LN2@ProcessDMA|
  08838		 |$LN4@ProcessDMA|
  08838		 |$LN6@ProcessDMA|

; 2643 : 
; 2644 :     //  Direction (D1) - for sure it is Tx endpoint
; 2645 :     //  Interrupt Enable (D3)
; 2646 :     //  Enable DMA (D0)
; 2647 :     dmacntl |= (DMA_CNTL_Enable|DMA_CNTL_InterruptEnable);

  08838	e59d3008	 ldr         r3, [sp, #8]
  0883c	e3833009	 orr         r3, r3, #9
  08840	e58d3008	 str         r3, [sp, #8]

; 2648 :     if (IsTx)

  08844	e59d3040	 ldr         r3, [sp, #0x40]
  08848	e3530000	 cmp         r3, #0
  0884c	0a000002	 beq         |$LN1@ProcessDMA|

; 2649 :         dmacntl |= DMA_CNTL_Direction;

  08850	e59d3008	 ldr         r3, [sp, #8]
  08854	e3833002	 orr         r3, r3, #2
  08858	e58d3008	 str         r3, [sp, #8]
  0885c		 |$LN1@ProcessDMA|

; 2650 : 
; 2651 :     //  Set endpoint number
; 2652 :     dmacntl |= (INDEX(endpoint) << 4);

  0885c	e5dd3038	 ldrb        r3, [sp, #0x38]
  08860	e203300f	 and         r3, r3, #0xF
  08864	e1a02203	 mov         r2, r3, lsl #4
  08868	e59d3008	 ldr         r3, [sp, #8]
  0886c	e1833002	 orr         r3, r3, r2
  08870	e58d3008	 str         r3, [sp, #8]

; 2653 : 
; 2654 :     DEBUGMSG(ZONE_HCD, (TEXT("DMA Channel %d\r\n"), channel));

  08874	e59f3170	 ldr         r3, [pc, #0x170]
  08878	e5933440	 ldr         r3, [r3, #0x440]
  0887c	e3130001	 tst         r3, #1
  08880	0a000006	 beq         |$LN11@ProcessDMA|
  08884	e5dd303c	 ldrb        r3, [sp, #0x3C]
  08888	e1a01003	 mov         r1, r3
  0888c	e59f0160	 ldr         r0, [pc, #0x160]
  08890	eb000000	 bl          NKDbgPrintfW
  08894	e3a03001	 mov         r3, #1
  08898	e58d301c	 str         r3, [sp, #0x1C]
  0889c	ea000001	 b           |$LN12@ProcessDMA|
  088a0		 |$LN11@ProcessDMA|
  088a0	e3a03000	 mov         r3, #0
  088a4	e58d301c	 str         r3, [sp, #0x1C]
  088a8		 |$LN12@ProcessDMA|

; 2655 :     DEBUGMSG(ZONE_HCD, (TEXT("DMA Channel(%d), Addr (0x%x), Count (0x%x), Cntl(0x%x), ep %d\r\n"),
; 2656 :         channel, (DWORD)ppData, size, dmacntl, INDEX(endpoint)));

  088a8	e59f313c	 ldr         r3, [pc, #0x13C]
  088ac	e5933440	 ldr         r3, [r3, #0x440]
  088b0	e3130001	 tst         r3, #1
  088b4	0a00000c	 beq         |$LN13@ProcessDMA|
  088b8	e5dd3038	 ldrb        r3, [sp, #0x38]
  088bc	e203300f	 and         r3, r3, #0xF
  088c0	e58d3004	 str         r3, [sp, #4]
  088c4	e59d3008	 ldr         r3, [sp, #8]
  088c8	e58d3000	 str         r3, [sp]
  088cc	e59d3048	 ldr         r3, [sp, #0x48]
  088d0	e59d2044	 ldr         r2, [sp, #0x44]
  088d4	e5dd103c	 ldrb        r1, [sp, #0x3C]
  088d8	e59f0110	 ldr         r0, [pc, #0x110]
  088dc	eb000000	 bl          NKDbgPrintfW
  088e0	e3a03001	 mov         r3, #1
  088e4	e58d3020	 str         r3, [sp, #0x20]
  088e8	ea000001	 b           |$LN14@ProcessDMA|
  088ec		 |$LN13@ProcessDMA|
  088ec	e3a03000	 mov         r3, #0
  088f0	e58d3020	 str         r3, [sp, #0x20]
  088f4		 |$LN14@ProcessDMA|

; 2657 :     DEBUGMSG(ZONE_HCD, (TEXT("DMA EP %d from 0x%x to 0x%x\r\n"), INDEX(endpoint), (DWORD)ppData, (DWORD)ppData+size));

  088f4	e59f30f0	 ldr         r3, [pc, #0xF0]
  088f8	e5933440	 ldr         r3, [r3, #0x440]
  088fc	e3130001	 tst         r3, #1
  08900	0a00000a	 beq         |$LN15@ProcessDMA|
  08904	e59d2044	 ldr         r2, [sp, #0x44]
  08908	e59d3048	 ldr         r3, [sp, #0x48]
  0890c	e0823003	 add         r3, r2, r3
  08910	e59d2044	 ldr         r2, [sp, #0x44]
  08914	e5dd1038	 ldrb        r1, [sp, #0x38]
  08918	e201100f	 and         r1, r1, #0xF
  0891c	e59f00c4	 ldr         r0, [pc, #0xC4]
  08920	eb000000	 bl          NKDbgPrintfW
  08924	e3a03001	 mov         r3, #1
  08928	e58d3024	 str         r3, [sp, #0x24]
  0892c	ea000001	 b           |$LN16@ProcessDMA|
  08930		 |$LN15@ProcessDMA|
  08930	e3a03000	 mov         r3, #0
  08934	e58d3024	 str         r3, [sp, #0x24]
  08938		 |$LN16@ProcessDMA|

; 2658 : 
; 2659 :     // Write address
; 2660 :     OUTREG32(&pOTG->pUsbDmaRegs->dma[channel].Addr, (DWORD)ppData);

  08938	e59d300c	 ldr         r3, [sp, #0xC]
  0893c	e2833024	 add         r3, r3, #0x24
  08940	e5933000	 ldr         r3, [r3]
  08944	e2831004	 add         r1, r3, #4
  08948	e5dd303c	 ldrb        r3, [sp, #0x3C]
  0894c	e1a02003	 mov         r2, r3
  08950	e3a03010	 mov         r3, #0x10
  08954	e0030392	 mul         r3, r2, r3
  08958	e0813003	 add         r3, r1, r3
  0895c	e2832004	 add         r2, r3, #4
  08960	e59d3044	 ldr         r3, [sp, #0x44]
  08964	e5823000	 str         r3, [r2]

; 2661 : 
; 2662 :     // Write count
; 2663 :     OUTREG32(&pOTG->pUsbDmaRegs->dma[channel].Count, (DWORD)size);

  08968	e59d300c	 ldr         r3, [sp, #0xC]
  0896c	e2833024	 add         r3, r3, #0x24
  08970	e5933000	 ldr         r3, [r3]
  08974	e2831004	 add         r1, r3, #4
  08978	e5dd303c	 ldrb        r3, [sp, #0x3C]
  0897c	e1a02003	 mov         r2, r3
  08980	e3a03010	 mov         r3, #0x10
  08984	e0030392	 mul         r3, r2, r3
  08988	e0813003	 add         r3, r1, r3
  0898c	e2832008	 add         r2, r3, #8
  08990	e59d3048	 ldr         r3, [sp, #0x48]
  08994	e5823000	 str         r3, [r2]

; 2664 : 
; 2665 :     // Write Control
; 2666 :     OUTREG32(&pOTG->pUsbDmaRegs->dma[channel].Cntl, (DWORD)dmacntl);

  08998	e59d300c	 ldr         r3, [sp, #0xC]
  0899c	e2833024	 add         r3, r3, #0x24
  089a0	e5933000	 ldr         r3, [r3]
  089a4	e2831004	 add         r1, r3, #4
  089a8	e5dd303c	 ldrb        r3, [sp, #0x3C]
  089ac	e1a02003	 mov         r2, r3
  089b0	e3a03010	 mov         r3, #0x10
  089b4	e0030392	 mul         r3, r2, r3
  089b8	e0812003	 add         r2, r1, r3
  089bc	e59d3008	 ldr         r3, [sp, #8]
  089c0	e5823000	 str         r3, [r2]

; 2667 :     LeaveCriticalSection(&m_csDMAChannel);

  089c4	e59d3030	 ldr         r3, [sp, #0x30]
  089c8	e2830e1d	 add         r0, r3, #0x1D, 28
  089cc	eb000000	 bl          LeaveCriticalSection

; 2668 : 
; 2669 :     return TRUE;

  089d0	e3a03001	 mov         r3, #1
  089d4	e58d3018	 str         r3, [sp, #0x18]

; 2670 : }

  089d8	e59d0018	 ldr         r0, [sp, #0x18]
  089dc	e28dd028	 add         sp, sp, #0x28
  089e0	e89d6000	 ldmia       sp, {sp, lr}
  089e4	e12fff1e	 bx          lr
  089e8		 |$LN20@ProcessDMA|
  089e8		 |$LN21@ProcessDMA|
  089e8	00000000	 DCD         |??_C@_1DM@CJOPDGB@?$AAD?$AAM?$AAA?$AA?5?$AAE?$AAP?$AA?5?$AA?$CF?$AAd?$AA?5?$AAf?$AAr?$AAo?$AAm?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?5?$AAt?$AAo?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  089ec		 |$LN22@ProcessDMA|
  089ec	00000000	 DCD         |dpCurSettings|
  089f0		 |$LN23@ProcessDMA|
  089f0	00000000	 DCD         |??_C@_1IA@LCNDFBMF@?$AAD?$AAM?$AAA?$AA?5?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?0?$AA?5?$AAA?$AAd?$AAd?$AAr?$AA?5?$AA?$CI?$AA0?$AAx?$AA?$CF?$AAx?$AA?$CJ?$AA?0?$AA?5?$AAC?$AAo@|
  089f4		 |$LN24@ProcessDMA|
  089f4	00000000	 DCD         |??_C@_1CC@MMPOJBNP@?$AAD?$AAM?$AAA?$AA?5?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  089f8		 |$M45605|

			 ENDP  ; |?ProcessDMAChannel@CHW@@QAAHPAXEEH0KK@Z|, CHW::ProcessDMAChannel

	EXPORT	|?GetTransferMode@CPipe@@QAAEXZ|	; CPipe::GetTransferMode
	EXPORT	|??_C@_1EM@HHDMHCCB@?$AAW?$AAr?$AAi?$AAt?$AAe?$AAD?$AAM?$AAA?$AA?3?$AA?5?$AAm?$AAa?$AAx?$AAp?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?$DN?$AA0?$AAx?$AA?$CF?$AAx?$AA?0?$AA?5?$AAs?$AAi?$AAz?$AAe?$AA?$DN?$AA0@| [ DATA ] ; `string'
	EXPORT	|?GetPipe@CQH@@QAAPAVCPipe@@XZ|		; CQH::GetPipe
	EXPORT	|?GetQH@CQTD@@QAAPAVCQH@@XZ|		; CQTD::GetQH

  001c0			 AREA	 |.pdata|, PDATA
|$T45624| DCD	|$LN14@WriteDMA|
	DCD	0x4000e204

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EM@HHDMHCCB@?$AAW?$AAr?$AAi?$AAt?$AAe?$AAD?$AAM?$AAA?$AA?3?$AA?5?$AAm?$AAa?$AAx?$AAp?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?$DN?$AA0?$AAx?$AA?$CF?$AAx?$AA?0?$AA?5?$AAs?$AAi?$AAz?$AAe?$AA?$DN?$AA0@| DCB "W"
	DCB	0x0, "r", 0x0, "i", 0x0, "t", 0x0, "e", 0x0, "D", 0x0, "M"
	DCB	0x0, "A", 0x0, ":", 0x0, " ", 0x0, "m", 0x0, "a", 0x0, "x"
	DCB	0x0, "p", 0x0, "a", 0x0, "c", 0x0, "k", 0x0, "e", 0x0, "t"
	DCB	0x0, "=", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, ","
	DCB	0x0, " ", 0x0, "s", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, "="
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  089f8			 AREA	 |.text|, CODE, ARM

  089f8		 |?WriteDMA@CHW@@UAAHPAXEE0KK0@Z| PROC	; CHW::WriteDMA

; 2674 : {

  089f8		 |$LN14@WriteDMA|
  089f8	e1a0c00d	 mov         r12, sp
  089fc	e92d000f	 stmdb       sp!, {r0 - r3}
  08a00	e92d5000	 stmdb       sp!, {r12, lr}
  08a04	e24dd048	 sub         sp, sp, #0x48
  08a08		 |$M45621|

; 2675 :     PHSMUSB_T pOTG = (PHSMUSB_T)pContext;

  08a08	e59d3054	 ldr         r3, [sp, #0x54]
  08a0c	e58d301c	 str         r3, [sp, #0x1C]

; 2676 :     CQTD *pQTD = (CQTD *)pData;

  08a10	e59d306c	 ldr         r3, [sp, #0x6C]
  08a14	e58d3014	 str         r3, [sp, #0x14]

; 2677 :     CPipe *pPipe = pQTD->GetQH()->GetPipe();        

  08a18	e59d0014	 ldr         r0, [sp, #0x14]
  08a1c	eb000000	 bl          |?GetQH@CQTD@@QAAPAVCQH@@XZ|
  08a20	e58d0034	 str         r0, [sp, #0x34]
  08a24	e59d0034	 ldr         r0, [sp, #0x34]
  08a28	eb000000	 bl          |?GetPipe@CQH@@QAAPAVCPipe@@XZ|
  08a2c	e58d0038	 str         r0, [sp, #0x38]
  08a30	e59d3038	 ldr         r3, [sp, #0x38]
  08a34	e58d3010	 str         r3, [sp, #0x10]

; 2678 :     UCHAR csrIndex = INDEX(endpoint);

  08a38	e5dd3058	 ldrb        r3, [sp, #0x58]
  08a3c	e203300f	 and         r3, r3, #0xF
  08a40	e20330ff	 and         r3, r3, #0xFF
  08a44	e5cd301a	 strb        r3, [sp, #0x1A]

; 2679 :     USHORT txcsr;    
; 2680 :     
; 2681 :     DEBUGMSG(ZONE_TRANSFER|ZONE_HCD, (TEXT("WriteDMA: maxpacket=0x%x, size=0x%x\r\n"), 
; 2682 :         dwMaxPacket, size));

  08a48	e59f332c	 ldr         r3, [pc, #0x32C]
  08a4c	e5933440	 ldr         r3, [r3, #0x440]
  08a50	e2032c01	 and         r2, r3, #1, 24
  08a54	e59f3320	 ldr         r3, [pc, #0x320]
  08a58	e5933440	 ldr         r3, [r3, #0x440]
  08a5c	e2033001	 and         r3, r3, #1
  08a60	e1923003	 orrs        r3, r2, r3
  08a64	0a000006	 beq         |$LN10@WriteDMA|
  08a68	e59d2064	 ldr         r2, [sp, #0x64]
  08a6c	e59d1068	 ldr         r1, [sp, #0x68]
  08a70	e59f0300	 ldr         r0, [pc, #0x300]
  08a74	eb000000	 bl          NKDbgPrintfW
  08a78	e3a03001	 mov         r3, #1
  08a7c	e58d303c	 str         r3, [sp, #0x3C]
  08a80	ea000001	 b           |$LN11@WriteDMA|
  08a84		 |$LN10@WriteDMA|
  08a84	e3a03000	 mov         r3, #0
  08a88	e58d303c	 str         r3, [sp, #0x3C]
  08a8c		 |$LN11@WriteDMA|

; 2683 : 
; 2684 :     EnterCriticalSection(&pOTG->regCS);

  08a8c	e59d301c	 ldr         r3, [sp, #0x1C]
  08a90	e2830038	 add         r0, r3, #0x38
  08a94	eb000000	 bl          EnterCriticalSection

; 2685 :     // First configure the mode
; 2686 :     OUTREG8(&pOTG->pUsbGenRegs->Index, INDEX(endpoint));    

  08a98	e5dd3058	 ldrb        r3, [sp, #0x58]
  08a9c	e203300f	 and         r3, r3, #0xF
  08aa0	e20320ff	 and         r2, r3, #0xFF
  08aa4	e59d301c	 ldr         r3, [sp, #0x1C]
  08aa8	e2833020	 add         r3, r3, #0x20
  08aac	e5933000	 ldr         r3, [r3]
  08ab0	e283300e	 add         r3, r3, #0xE
  08ab4	e5c32000	 strb        r2, [r3]

; 2687 :     txcsr = INREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].CSR.TxCSR);

  08ab8	e59d301c	 ldr         r3, [sp, #0x1C]
  08abc	e283001c	 add         r0, r3, #0x1C
  08ac0	e5dd301a	 ldrb        r3, [sp, #0x1A]
  08ac4	e1a01003	 mov         r1, r3
  08ac8	e3a03010	 mov         r3, #0x10
  08acc	e0020391	 mul         r2, r1, r3
  08ad0	e5903000	 ldr         r3, [r0]
  08ad4	e0833002	 add         r3, r3, r2
  08ad8	e2831002	 add         r1, r3, #2
  08adc	e5d13001	 ldrb        r3, [r1, #1]
  08ae0	e1a03403	 mov         r3, r3, lsl #8
  08ae4	e1a02803	 mov         r2, r3, lsl #16
  08ae8	e1a02822	 mov         r2, r2, lsr #16
  08aec	e5d13000	 ldrb        r3, [r1]
  08af0	e1833002	 orr         r3, r3, r2
  08af4	e1cd31b8	 strh        r3, [sp, #0x18]

; 2688 : 
; 2689 :     txcsr &= ~(TXCSR_H_AutoSet|TXCSR_H_DMAReqMode|TXCSR_H_DMAReqEn);

  08af8	e1dd31b8	 ldrh        r3, [sp, #0x18]
  08afc	e1a02003	 mov         r2, r3
  08b00	e3e03b25	 mvn         r3, #0x25, 22
  08b04	e0023003	 and         r3, r2, r3
  08b08	e1a03803	 mov         r3, r3, lsl #16
  08b0c	e1a03823	 mov         r3, r3, lsr #16
  08b10	e1cd31b8	 strh        r3, [sp, #0x18]

; 2690 :     txcsr |= TXCSR_H_Mode;

  08b14	e1dd31b8	 ldrh        r3, [sp, #0x18]
  08b18	e3833a02	 orr         r3, r3, #2, 20
  08b1c	e1a03803	 mov         r3, r3, lsl #16
  08b20	e1a03823	 mov         r3, r3, lsr #16
  08b24	e1cd31b8	 strh        r3, [sp, #0x18]

; 2691 :     OUTREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].CSR.TxCSR, txcsr);

  08b28	e59d301c	 ldr         r3, [sp, #0x1C]
  08b2c	e283001c	 add         r0, r3, #0x1C
  08b30	e5dd301a	 ldrb        r3, [sp, #0x1A]
  08b34	e1a01003	 mov         r1, r3
  08b38	e3a03010	 mov         r3, #0x10
  08b3c	e0020391	 mul         r2, r1, r3
  08b40	e5903000	 ldr         r3, [r0]
  08b44	e0833002	 add         r3, r3, r2
  08b48	e2832002	 add         r2, r3, #2
  08b4c	e1dd31b8	 ldrh        r3, [sp, #0x18]
  08b50	e5c23000	 strb        r3, [r2]
  08b54	e1a03423	 mov         r3, r3, lsr #8
  08b58	e5c23001	 strb        r3, [r2, #1]

; 2692 : 
; 2693 :     txcsr = INREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].CSR.TxCSR);    

  08b5c	e59d301c	 ldr         r3, [sp, #0x1C]
  08b60	e283001c	 add         r0, r3, #0x1C
  08b64	e5dd301a	 ldrb        r3, [sp, #0x1A]
  08b68	e1a01003	 mov         r1, r3
  08b6c	e3a03010	 mov         r3, #0x10
  08b70	e0020391	 mul         r2, r1, r3
  08b74	e5903000	 ldr         r3, [r0]
  08b78	e0833002	 add         r3, r3, r2
  08b7c	e2831002	 add         r1, r3, #2
  08b80	e5d13001	 ldrb        r3, [r1, #1]
  08b84	e1a03403	 mov         r3, r3, lsl #8
  08b88	e1a02803	 mov         r2, r3, lsl #16
  08b8c	e1a02822	 mov         r2, r2, lsr #16
  08b90	e5d13000	 ldrb        r3, [r1]
  08b94	e1833002	 orr         r3, r3, r2
  08b98	e1cd31b8	 strh        r3, [sp, #0x18]

; 2694 :     
; 2695 :     if(txcsr & TXCSR_H_RxStall)

  08b9c	e1dd31b8	 ldrh        r3, [sp, #0x18]
  08ba0	e3130020	 tst         r3, #0x20
  08ba4	0a000020	 beq         |$LN7@WriteDMA|

; 2696 :     {
; 2697 :        CLRREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].CSR.TxCSR, TXCSR_H_RxStall);

  08ba8	e59d301c	 ldr         r3, [sp, #0x1C]
  08bac	e283001c	 add         r0, r3, #0x1C
  08bb0	e5dd301a	 ldrb        r3, [sp, #0x1A]
  08bb4	e1a01003	 mov         r1, r3
  08bb8	e3a03010	 mov         r3, #0x10
  08bbc	e0020391	 mul         r2, r1, r3
  08bc0	e5903000	 ldr         r3, [r0]
  08bc4	e0833002	 add         r3, r3, r2
  08bc8	e2831002	 add         r1, r3, #2
  08bcc	e5d13001	 ldrb        r3, [r1, #1]
  08bd0	e1a03403	 mov         r3, r3, lsl #8
  08bd4	e1a02803	 mov         r2, r3, lsl #16
  08bd8	e1a02822	 mov         r2, r2, lsr #16
  08bdc	e5d13000	 ldrb        r3, [r1]
  08be0	e1833002	 orr         r3, r3, r2
  08be4	e1a02003	 mov         r2, r3
  08be8	e3e03020	 mvn         r3, #0x20
  08bec	e0023003	 and         r3, r2, r3
  08bf0	e1a0e803	 mov         lr, r3, lsl #16
  08bf4	e1a0e82e	 mov         lr, lr, lsr #16
  08bf8	e59d301c	 ldr         r3, [sp, #0x1C]
  08bfc	e283001c	 add         r0, r3, #0x1C
  08c00	e5dd301a	 ldrb        r3, [sp, #0x1A]
  08c04	e1a01003	 mov         r1, r3
  08c08	e3a03010	 mov         r3, #0x10
  08c0c	e0020391	 mul         r2, r1, r3
  08c10	e5903000	 ldr         r3, [r0]
  08c14	e0833002	 add         r3, r3, r2
  08c18	e2832002	 add         r2, r3, #2
  08c1c	e1a0300e	 mov         r3, lr
  08c20	e5c23000	 strb        r3, [r2]
  08c24	e1a03423	 mov         r3, r3, lsr #8
  08c28	e5c23001	 strb        r3, [r2, #1]
  08c2c		 |$LN7@WriteDMA|

; 2698 :     }
; 2699 : 
; 2700 :     if (size <= dwMaxPacket)

  08c2c	e59d2064	 ldr         r2, [sp, #0x64]
  08c30	e59d3068	 ldr         r3, [sp, #0x68]
  08c34	e1520003	 cmp         r2, r3
  08c38	8a000019	 bhi         |$LN6@WriteDMA|

; 2701 :     {
; 2702 :         // Disable autoset
; 2703 :         txcsr &= ~(TXCSR_H_AutoSet|TXCSR_H_DMAReqMode);

  08c3c	e1dd31b8	 ldrh        r3, [sp, #0x18]
  08c40	e1a02003	 mov         r2, r3
  08c44	e3e03b21	 mvn         r3, #0x21, 22
  08c48	e0023003	 and         r3, r2, r3
  08c4c	e1a03803	 mov         r3, r3, lsl #16
  08c50	e1a03823	 mov         r3, r3, lsr #16
  08c54	e1cd31b8	 strh        r3, [sp, #0x18]

; 2704 :         txcsr |= TXCSR_H_DMAReqEn;        

  08c58	e1dd31b8	 ldrh        r3, [sp, #0x18]
  08c5c	e3833a01	 orr         r3, r3, #1, 20
  08c60	e1a03803	 mov         r3, r3, lsl #16
  08c64	e1a03823	 mov         r3, r3, lsr #16
  08c68	e1cd31b8	 strh        r3, [sp, #0x18]

; 2705 :         if (pPipe->GetTransferMode() == TRANSFER_DMA0)

  08c6c	e59d0010	 ldr         r0, [sp, #0x10]
  08c70	eb000000	 bl          |?GetTransferMode@CPipe@@QAAEXZ|
  08c74	e5cd0040	 strb        r0, [sp, #0x40]
  08c78	e5dd3040	 ldrb        r3, [sp, #0x40]
  08c7c	e3530001	 cmp         r3, #1
  08c80	1a000003	 bne         |$LN5@WriteDMA|

; 2706 :             pQTD->SetStatus(STATUS_WAIT_DMA_WR_RESPONSE);

  08c84	e3a01007	 mov         r1, #7
  08c88	e59d0014	 ldr         r0, [sp, #0x14]
  08c8c	eb000000	 bl          |?SetStatus@CQTD@@QAAXK@Z|

; 2707 :         else

  08c90	ea000002	 b           |$LN4@WriteDMA|
  08c94		 |$LN5@WriteDMA|

; 2708 :             pQTD->SetStatus(STATUS_WAIT_DMA_WR_2_FIFO_TXPKT_NOTRDY);

  08c94	e3a01009	 mov         r1, #9
  08c98	e59d0014	 ldr         r0, [sp, #0x14]
  08c9c	eb000000	 bl          |?SetStatus@CQTD@@QAAXK@Z|
  08ca0		 |$LN4@WriteDMA|

; 2709 :     }
; 2710 :     else

  08ca0	ea000010	 b           |$LN3@WriteDMA|
  08ca4		 |$LN6@WriteDMA|

; 2711 :     {
; 2712 :         txcsr |= (TXCSR_H_AutoSet|TXCSR_H_DMAReqMode|TXCSR_H_DMAReqEn);

  08ca4	e1dd31b8	 ldrh        r3, [sp, #0x18]
  08ca8	e3833b25	 orr         r3, r3, #0x25, 22
  08cac	e1a03803	 mov         r3, r3, lsl #16
  08cb0	e1a03823	 mov         r3, r3, lsr #16
  08cb4	e1cd31b8	 strh        r3, [sp, #0x18]

; 2713 :         // Last Packet is Maxpacket size
; 2714 :         if (size % dwMaxPacket == 0)

  08cb8	e59d1064	 ldr         r1, [sp, #0x64]
  08cbc	e59d0068	 ldr         r0, [sp, #0x68]
  08cc0	eb000000	 bl          __rt_udiv
  08cc4	e3510000	 cmp         r1, #0
  08cc8	1a000003	 bne         |$LN2@WriteDMA|

; 2715 :             pQTD->SetStatus(STATUS_WAIT_DMA_WR_2_FIFO_TXPKT_RDY);

  08ccc	e3a01008	 mov         r1, #8
  08cd0	e59d0014	 ldr         r0, [sp, #0x14]
  08cd4	eb000000	 bl          |?SetStatus@CQTD@@QAAXK@Z|

; 2716 :         else // you still need to set the TxPktRdy one more time

  08cd8	ea000002	 b           |$LN1@WriteDMA|
  08cdc		 |$LN2@WriteDMA|

; 2717 :             pQTD->SetStatus(STATUS_WAIT_DMA_WR_2_FIFO_TXPKT_NOTRDY);

  08cdc	e3a01009	 mov         r1, #9
  08ce0	e59d0014	 ldr         r0, [sp, #0x14]
  08ce4	eb000000	 bl          |?SetStatus@CQTD@@QAAXK@Z|
  08ce8		 |$LN1@WriteDMA|
  08ce8		 |$LN3@WriteDMA|

; 2718 :             
; 2719 :     }
; 2720 : 
; 2721 :     OUTREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].CSR.TxCSR, txcsr);

  08ce8	e59d301c	 ldr         r3, [sp, #0x1C]
  08cec	e283001c	 add         r0, r3, #0x1C
  08cf0	e5dd301a	 ldrb        r3, [sp, #0x1A]
  08cf4	e1a01003	 mov         r1, r3
  08cf8	e3a03010	 mov         r3, #0x10
  08cfc	e0020391	 mul         r2, r1, r3
  08d00	e5903000	 ldr         r3, [r0]
  08d04	e0833002	 add         r3, r3, r2
  08d08	e2832002	 add         r2, r3, #2
  08d0c	e1dd31b8	 ldrh        r3, [sp, #0x18]
  08d10	e5c23000	 strb        r3, [r2]
  08d14	e1a03423	 mov         r3, r3, lsr #8
  08d18	e5c23001	 strb        r3, [r2, #1]

; 2722 : 
; 2723 :     LeaveCriticalSection(&pOTG->regCS);

  08d1c	e59d301c	 ldr         r3, [sp, #0x1C]
  08d20	e2830038	 add         r0, r3, #0x38
  08d24	eb000000	 bl          LeaveCriticalSection

; 2724 :     return(ProcessDMAChannel((void *)pOTG, endpoint, channel, TRUE, ppData, size, dwMaxPacket));

  08d28	e59d3068	 ldr         r3, [sp, #0x68]
  08d2c	e58d300c	 str         r3, [sp, #0xC]
  08d30	e59d3064	 ldr         r3, [sp, #0x64]
  08d34	e58d3008	 str         r3, [sp, #8]
  08d38	e59d3060	 ldr         r3, [sp, #0x60]
  08d3c	e58d3004	 str         r3, [sp, #4]
  08d40	e3a03001	 mov         r3, #1
  08d44	e58d3000	 str         r3, [sp]
  08d48	e5dd305c	 ldrb        r3, [sp, #0x5C]
  08d4c	e5dd2058	 ldrb        r2, [sp, #0x58]
  08d50	e59d101c	 ldr         r1, [sp, #0x1C]
  08d54	e59d0050	 ldr         r0, [sp, #0x50]
  08d58	eb000000	 bl          |?ProcessDMAChannel@CHW@@QAAHPAXEEH0KK@Z|
  08d5c	e58d0044	 str         r0, [sp, #0x44]
  08d60	e59d3044	 ldr         r3, [sp, #0x44]
  08d64	e58d3030	 str         r3, [sp, #0x30]

; 2725 :     
; 2726 : }

  08d68	e59d0030	 ldr         r0, [sp, #0x30]
  08d6c	e28dd048	 add         sp, sp, #0x48
  08d70	e89d6000	 ldmia       sp, {sp, lr}
  08d74	e12fff1e	 bx          lr
  08d78		 |$LN15@WriteDMA|
  08d78		 |$LN16@WriteDMA|
  08d78	00000000	 DCD         |??_C@_1EM@HHDMHCCB@?$AAW?$AAr?$AAi?$AAt?$AAe?$AAD?$AAM?$AAA?$AA?3?$AA?5?$AAm?$AAa?$AAx?$AAp?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?$DN?$AA0?$AAx?$AA?$CF?$AAx?$AA?0?$AA?5?$AAs?$AAi?$AAz?$AAe?$AA?$DN?$AA0@|
  08d7c		 |$LN17@WriteDMA|
  08d7c	00000000	 DCD         |dpCurSettings|
  08d80		 |$M45622|

			 ENDP  ; |?WriteDMA@CHW@@UAAHPAXEE0KK0@Z|, CHW::WriteDMA

; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\musb\musbhcd\musbmhdrc\ctd.h

  00000			 AREA	 |.pdata|, PDATA
|$T45633| DCD	|$LN5@GetQH|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetQH@CQTD@@QAAPAVCQH@@XZ| PROC	; CQTD::GetQH

; 103  :     CQH *GetQH() { return m_pQh;};

  00000		 |$LN5@GetQH|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M45630|
  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e2833004	 add         r3, r3, #4
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3000	 str         r3, [sp]
  00020	e59d0000	 ldr         r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M45631|

			 ENDP  ; |?GetQH@CQTD@@QAAPAVCQH@@XZ|, CQTD::GetQH


  00000			 AREA	 |.pdata|, PDATA
|$T45641| DCD	|$LN5@GetPipe|
	DCD	0x40000b04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetPipe@CQH@@QAAPAVCPipe@@XZ| PROC	; CQH::GetPipe

; 156  :     CPipe *GetPipe() { return m_pPipe;};

  00000		 |$LN5@GetPipe|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M45638|
  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e5933000	 ldr         r3, [r3]
  00018	e58d3000	 str         r3, [sp]
  0001c	e59d0000	 ldr         r0, [sp]
  00020	e28dd004	 add         sp, sp, #4
  00024	e89d6000	 ldmia       sp, {sp, lr}
  00028	e12fff1e	 bx          lr
  0002c		 |$M45639|

			 ENDP  ; |?GetPipe@CQH@@QAAPAVCPipe@@XZ|, CQH::GetPipe

; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\musb\musbhcd\musbmhdrc\cpipe.h

  00000			 AREA	 |.pdata|, PDATA
|$T45649| DCD	|$LN5@GetTransfe|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetTransferMode@CPipe@@QAAEXZ| PROC	; CPipe::GetTransferMode

; 110  :     UCHAR   GetTransferMode(void) { return m_ucTransferMode;};

  00000		 |$LN5@GetTransfe|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M45646|
  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e2833014	 add         r3, r3, #0x14
  00018	e5d33000	 ldrb        r3, [r3]
  0001c	e5cd3000	 strb        r3, [sp]
  00020	e5dd0000	 ldrb        r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M45647|

			 ENDP  ; |?GetTransferMode@CPipe@@QAAEXZ|, CPipe::GetTransferMode

	EXPORT	|??_C@_1GK@LINCOMEM@?$AAW?$AAr?$AAi?$AAt?$AAe?$AAF?$AAI?$AAF?$AAO?$AA?3?$AA?5?$AAt?$AAo?$AAt?$AAa?$AAl?$AA?5?$AA?$CI?$AA0?$AAx?$AA?$CF?$AAx?$AA?$CJ?$AA?0?$AA?5?$AAr?$AAe?$AAm?$AAa?$AAi?$AAn?$AA?5@| [ DATA ] ; `string'

  001c8			 AREA	 |.pdata|, PDATA
|$T45659| DCD	|$LN14@WriteFIFO|
	DCD	0x40007804
; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\musb\musbhcd\musbmhdrc\chw.cpp

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GK@LINCOMEM@?$AAW?$AAr?$AAi?$AAt?$AAe?$AAF?$AAI?$AAF?$AAO?$AA?3?$AA?5?$AAt?$AAo?$AAt?$AAa?$AAl?$AA?5?$AA?$CI?$AA0?$AAx?$AA?$CF?$AAx?$AA?$CJ?$AA?0?$AA?5?$AAr?$AAe?$AAm?$AAa?$AAi?$AAn?$AA?5@| DCB "W"
	DCB	0x0, "r", 0x0, "i", 0x0, "t", 0x0, "e", 0x0, "F", 0x0, "I"
	DCB	0x0, "F", 0x0, "O", 0x0, ":", 0x0, " ", 0x0, "t", 0x0, "o"
	DCB	0x0, "t", 0x0, "a", 0x0, "l", 0x0, " ", 0x0, "(", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "x", 0x0, ")", 0x0, ",", 0x0, " "
	DCB	0x0, "r", 0x0, "e", 0x0, "m", 0x0, "a", 0x0, "i", 0x0, "n"
	DCB	0x0, " ", 0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x"
	DCB	0x0, ")", 0x0, ",", 0x0, " ", 0x0, "s", 0x0, "i", 0x0, "z"
	DCB	0x0, "e", 0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x"
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  08d80			 AREA	 |.text|, CODE, ARM

  08d80		 |?WriteFIFO@CHW@@UAAHPAXE0K@Z| PROC	; CHW::WriteFIFO

; 2729 : {

  08d80		 |$LN14@WriteFIFO|
  08d80	e1a0c00d	 mov         r12, sp
  08d84	e92d000f	 stmdb       sp!, {r0 - r3}
  08d88	e92d5000	 stmdb       sp!, {r12, lr}
  08d8c	e24dd024	 sub         sp, sp, #0x24
  08d90		 |$M45656|

; 2730 :     PHSMUSB_T pOTG = (PHSMUSB_T)pContext;

  08d90	e59d3030	 ldr         r3, [sp, #0x30]
  08d94	e58d3014	 str         r3, [sp, #0x14]

; 2731 :     int total  = size/4;

  08d98	e59d103c	 ldr         r1, [sp, #0x3C]
  08d9c	e3a00004	 mov         r0, #4
  08da0	eb000000	 bl          __rt_udiv
  08da4	e58d0010	 str         r0, [sp, #0x10]

; 2732 :     int remain = size%4;

  08da8	e59d103c	 ldr         r1, [sp, #0x3C]
  08dac	e3a00004	 mov         r0, #4
  08db0	eb000000	 bl          __rt_udiv
  08db4	e58d1008	 str         r1, [sp, #8]

; 2733 :     int i;
; 2734 :     DWORD *pDword = (DWORD *)pData;

  08db8	e59d3038	 ldr         r3, [sp, #0x38]
  08dbc	e58d3004	 str         r3, [sp, #4]

; 2735 :     UCHAR csrIndex;
; 2736 : 
; 2737 :     //memdump((uchar *)pData, (USHORT)size, 0);
; 2738 :     // Critical section would be handled outside
; 2739 :     DEBUGMSG(ZONE_HCD, (TEXT("WriteFIFO: total (0x%x), remain (0x%x), size(0x%x)\r\n"), total, remain, size));

  08dc0	e59f3194	 ldr         r3, [pc, #0x194]
  08dc4	e5933440	 ldr         r3, [r3, #0x440]
  08dc8	e3130001	 tst         r3, #1
  08dcc	0a000007	 beq         |$LN10@WriteFIFO|
  08dd0	e59d303c	 ldr         r3, [sp, #0x3C]
  08dd4	e59d2008	 ldr         r2, [sp, #8]
  08dd8	e59d1010	 ldr         r1, [sp, #0x10]
  08ddc	e59f0174	 ldr         r0, [pc, #0x174]
  08de0	eb000000	 bl          NKDbgPrintfW
  08de4	e3a03001	 mov         r3, #1
  08de8	e58d3020	 str         r3, [sp, #0x20]
  08dec	ea000001	 b           |$LN11@WriteFIFO|
  08df0		 |$LN10@WriteFIFO|
  08df0	e3a03000	 mov         r3, #0
  08df4	e58d3020	 str         r3, [sp, #0x20]
  08df8		 |$LN11@WriteFIFO|

; 2740 :     // Set Index register again
; 2741 :     OUTREG8(&pOTG->pUsbGenRegs->Index, INDEX(endpoint));

  08df8	e5dd3034	 ldrb        r3, [sp, #0x34]
  08dfc	e203300f	 and         r3, r3, #0xF
  08e00	e20320ff	 and         r2, r3, #0xFF
  08e04	e59d3014	 ldr         r3, [sp, #0x14]
  08e08	e2833020	 add         r3, r3, #0x20
  08e0c	e5933000	 ldr         r3, [r3]
  08e10	e283300e	 add         r3, r3, #0xE
  08e14	e5c32000	 strb        r2, [r3]

; 2742 :     csrIndex = INDEX(endpoint);

  08e18	e5dd3034	 ldrb        r3, [sp, #0x34]
  08e1c	e203300f	 and         r3, r3, #0xF
  08e20	e20330ff	 and         r3, r3, #0xFF
  08e24	e5cd300c	 strb        r3, [sp, #0xC]

; 2743 : 
; 2744 :     // Zero-length data transferred
; 2745 :     if (size == 0)

  08e28	e59d303c	 ldr         r3, [sp, #0x3C]
  08e2c	e3530000	 cmp         r3, #0
  08e30	1a000002	 bne         |$LN7@WriteFIFO|

; 2746 :         return TRUE;

  08e34	e3a03001	 mov         r3, #1
  08e38	e58d301c	 str         r3, [sp, #0x1C]
  08e3c	ea000041	 b           |$LN8@WriteFIFO|
  08e40		 |$LN7@WriteFIFO|

; 2747 : 
; 2748 :     // this is 32-bit align
; 2749 :     for (i = 0; i < total; i++)

  08e40	e3a03000	 mov         r3, #0
  08e44	e58d3000	 str         r3, [sp]
  08e48	ea000002	 b           |$LN6@WriteFIFO|
  08e4c		 |$LN5@WriteFIFO|
  08e4c	e59d3000	 ldr         r3, [sp]
  08e50	e2833001	 add         r3, r3, #1
  08e54	e58d3000	 str         r3, [sp]
  08e58		 |$LN6@WriteFIFO|
  08e58	e59d2000	 ldr         r2, [sp]
  08e5c	e59d3010	 ldr         r3, [sp, #0x10]
  08e60	e1520003	 cmp         r2, r3
  08e64	aa00000f	 bge         |$LN4@WriteFIFO|

; 2750 :     {
; 2751 :         OUTREG32(&pOTG->pUsbGenRegs->fifo[csrIndex], *pDword++);

  08e68	e59d3014	 ldr         r3, [sp, #0x14]
  08e6c	e2833020	 add         r3, r3, #0x20
  08e70	e5933000	 ldr         r3, [r3]
  08e74	e2831020	 add         r1, r3, #0x20
  08e78	e5dd300c	 ldrb        r3, [sp, #0xC]
  08e7c	e1a02003	 mov         r2, r3
  08e80	e3a03004	 mov         r3, #4
  08e84	e0030392	 mul         r3, r2, r3
  08e88	e0812003	 add         r2, r1, r3
  08e8c	e59d3004	 ldr         r3, [sp, #4]
  08e90	e5933000	 ldr         r3, [r3]
  08e94	e5823000	 str         r3, [r2]
  08e98	e59d3004	 ldr         r3, [sp, #4]
  08e9c	e2833004	 add         r3, r3, #4
  08ea0	e58d3004	 str         r3, [sp, #4]

; 2752 :     }

  08ea4	eaffffe8	 b           |$LN5@WriteFIFO|
  08ea8		 |$LN4@WriteFIFO|

; 2753 : 
; 2754 :     if (remain != 0)

  08ea8	e59d3008	 ldr         r3, [sp, #8]
  08eac	e3530000	 cmp         r3, #0
  08eb0	0a000022	 beq         |$LN3@WriteFIFO|

; 2755 :     {
; 2756 :         // Pointer to the first byte of data
; 2757 :         USHORT *pWORD =(USHORT *)pDword;

  08eb4	e59d3004	 ldr         r3, [sp, #4]
  08eb8	e58d3018	 str         r3, [sp, #0x18]

; 2758 : 
; 2759 :         // Finally if there is remain
; 2760 :         if (remain & 0x2)  // either 2 or 3

  08ebc	e59d3008	 ldr         r3, [sp, #8]
  08ec0	e3130002	 tst         r3, #2
  08ec4	0a00000e	 beq         |$LN2@WriteFIFO|

; 2761 :         {
; 2762 :             // Write 2 bytes to there
; 2763 :             OUTREG16(&pOTG->pUsbGenRegs->fifo[csrIndex], *pWORD++);        

  08ec8	e59d3014	 ldr         r3, [sp, #0x14]
  08ecc	e2833020	 add         r3, r3, #0x20
  08ed0	e5933000	 ldr         r3, [r3]
  08ed4	e2831020	 add         r1, r3, #0x20
  08ed8	e5dd300c	 ldrb        r3, [sp, #0xC]
  08edc	e1a02003	 mov         r2, r3
  08ee0	e3a03004	 mov         r3, #4
  08ee4	e0030392	 mul         r3, r2, r3
  08ee8	e0812003	 add         r2, r1, r3
  08eec	e59d3018	 ldr         r3, [sp, #0x18]
  08ef0	e1d330b0	 ldrh        r3, [r3]
  08ef4	e1c230b0	 strh        r3, [r2]
  08ef8	e59d3018	 ldr         r3, [sp, #0x18]
  08efc	e2833002	 add         r3, r3, #2
  08f00	e58d3018	 str         r3, [sp, #0x18]
  08f04		 |$LN2@WriteFIFO|

; 2764 :         }
; 2765 : 
; 2766 :         if (remain & 0x1)

  08f04	e59d3008	 ldr         r3, [sp, #8]
  08f08	e3130001	 tst         r3, #1
  08f0c	0a00000b	 beq         |$LN1@WriteFIFO|

; 2767 :         {
; 2768 :             // Write 1 byte to there
; 2769 :             OUTREG8(&pOTG->pUsbGenRegs->fifo[csrIndex], *((UCHAR*)pWORD));

  08f10	e59d3014	 ldr         r3, [sp, #0x14]
  08f14	e2833020	 add         r3, r3, #0x20
  08f18	e5933000	 ldr         r3, [r3]
  08f1c	e2831020	 add         r1, r3, #0x20
  08f20	e5dd300c	 ldrb        r3, [sp, #0xC]
  08f24	e1a02003	 mov         r2, r3
  08f28	e3a03004	 mov         r3, #4
  08f2c	e0030392	 mul         r3, r2, r3
  08f30	e0812003	 add         r2, r1, r3
  08f34	e59d3018	 ldr         r3, [sp, #0x18]
  08f38	e5d33000	 ldrb        r3, [r3]
  08f3c	e5c23000	 strb        r3, [r2]
  08f40		 |$LN1@WriteFIFO|
  08f40		 |$LN3@WriteFIFO|

; 2770 :         }
; 2771 :     }
; 2772 : 
; 2773 : 	return TRUE;       

  08f40	e3a03001	 mov         r3, #1
  08f44	e58d301c	 str         r3, [sp, #0x1C]
  08f48		 |$LN8@WriteFIFO|

; 2774 : }

  08f48	e59d001c	 ldr         r0, [sp, #0x1C]
  08f4c	e28dd024	 add         sp, sp, #0x24
  08f50	e89d6000	 ldmia       sp, {sp, lr}
  08f54	e12fff1e	 bx          lr
  08f58		 |$LN15@WriteFIFO|
  08f58		 |$LN16@WriteFIFO|
  08f58	00000000	 DCD         |??_C@_1GK@LINCOMEM@?$AAW?$AAr?$AAi?$AAt?$AAe?$AAF?$AAI?$AAF?$AAO?$AA?3?$AA?5?$AAt?$AAo?$AAt?$AAa?$AAl?$AA?5?$AA?$CI?$AA0?$AAx?$AA?$CF?$AAx?$AA?$CJ?$AA?0?$AA?5?$AAr?$AAe?$AAm?$AAa?$AAi?$AAn?$AA?5@|
  08f5c		 |$LN17@WriteFIFO|
  08f5c	00000000	 DCD         |dpCurSettings|
  08f60		 |$M45657|

			 ENDP  ; |?WriteFIFO@CHW@@UAAHPAXE0K@Z|, CHW::WriteFIFO

	EXPORT	|??_C@_1FE@PICCLBBN@?$AAS?$AAe?$AAn?$AAd?$AAO?$AAu?$AAt?$AAD?$AAM?$AAA?$AA?5?$AAa?$AAt?$AA?5?$AAe?$AAp?$AA?5?$AA?$CF?$AAd?$AA?5?$AA?$CI?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?5?$AAT@| [ DATA ] ; `string'
	EXPORT	|??_C@_1LA@EPJGEBGA@?$AA?$FL?$AAD?$AAa?$AAt?$AAa?$AAT?$AAo?$AAg?$AAg?$AAl?$AAe?$AA?$FN?$AA?3?$AAS?$AAe?$AAn?$AAd?$AAO?$AAu?$AAt?$AAD?$AAM?$AAA?$AA?3?$AAD?$AAa?$AAt?$AAa?$AA?5?$AAO?$AAU?$AAT@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EI@KCPHDJG@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAF?$AAI?$AAF?$AAO?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAe?$AAp?$AA?5?$AA?$CF@| [ DATA ] ; `string'

  001d0			 AREA	 |.pdata|, PDATA
|$T45674| DCD	|$LN12@SendOutDMA|
	DCD	0x40009c04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FE@PICCLBBN@?$AAS?$AAe?$AAn?$AAd?$AAO?$AAu?$AAt?$AAD?$AAM?$AAA?$AA?5?$AAa?$AAt?$AA?5?$AAe?$AAp?$AA?5?$AA?$CF?$AAd?$AA?5?$AA?$CI?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?5?$AAT@| DCB "S"
	DCB	0x0, "e", 0x0, "n", 0x0, "d", 0x0, "O", 0x0, "u", 0x0, "t"
	DCB	0x0, "D", 0x0, "M", 0x0, "A", 0x0, " ", 0x0, "a", 0x0, "t"
	DCB	0x0, " ", 0x0, "e", 0x0, "p", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, " ", 0x0, "(", 0x0, "i", 0x0, "n", 0x0, "d", 0x0, "e"
	DCB	0x0, "x", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, " "
	DCB	0x0, "T", 0x0, "x", 0x0, "P", 0x0, "k", 0x0, "t", 0x0, "R"
	DCB	0x0, "d", 0x0, "y", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1LA@EPJGEBGA@?$AA?$FL?$AAD?$AAa?$AAt?$AAa?$AAT?$AAo?$AAg?$AAg?$AAl?$AAe?$AA?$FN?$AA?3?$AAS?$AAe?$AAn?$AAd?$AAO?$AAu?$AAt?$AAD?$AAM?$AAA?$AA?3?$AAD?$AAa?$AAt?$AAa?$AA?5?$AAO?$AAU?$AAT@| DCB "["
	DCB	0x0, "D", 0x0, "a", 0x0, "t", 0x0, "a", 0x0, "T", 0x0, "o"
	DCB	0x0, "g", 0x0, "g", 0x0, "l", 0x0, "e", 0x0, "]", 0x0, ":"
	DCB	0x0, "S", 0x0, "e", 0x0, "n", 0x0, "d", 0x0, "O", 0x0, "u"
	DCB	0x0, "t", 0x0, "D", 0x0, "M", 0x0, "A", 0x0, ":", 0x0, "D"
	DCB	0x0, "a", 0x0, "t", 0x0, "a", 0x0, " ", 0x0, "O", 0x0, "U"
	DCB	0x0, "T", 0x0, " ", 0x0, "T", 0x0, "r", 0x0, "a", 0x0, "s"
	DCB	0x0, "a", 0x0, "c", 0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n"
	DCB	0x0, " ", 0x0, "o", 0x0, "n", 0x0, " ", 0x0, "E", 0x0, "P"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, "D", 0x0, "e"
	DCB	0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, " ", 0x0, "A"
	DCB	0x0, "d", 0x0, "d", 0x0, "r", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, " ", 0x0, "D", 0x0, "a", 0x0, "t", 0x0, "a", 0x0, "T"
	DCB	0x0, "o", 0x0, "g", 0x0, "g", 0x0, "l", 0x0, "e", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EI@KCPHDJG@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAF?$AAI?$AAF?$AAO?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAe?$AAp?$AA?5?$AA?$CF@| DCB "F"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "t", 0x0, "o", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "a"
	DCB	0x0, "d", 0x0, " ", 0x0, "t", 0x0, "h", 0x0, "e", 0x0, " "
	DCB	0x0, "F", 0x0, "I", 0x0, "F", 0x0, "O", 0x0, " ", 0x0, "f"
	DCB	0x0, "o", 0x0, "r", 0x0, " ", 0x0, "e", 0x0, "p", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  08f60			 AREA	 |.text|, CODE, ARM

  08f60		 |?SendOutDMA@CHW@@UAAHEPAX@Z| PROC	; CHW::SendOutDMA

; 2782 : {

  08f60		 |$LN12@SendOutDMA|
  08f60	e1a0c00d	 mov         r12, sp
  08f64	e92d0007	 stmdb       sp!, {r0 - r2}
  08f68	e92d5000	 stmdb       sp!, {r12, lr}
  08f6c	e24dd038	 sub         sp, sp, #0x38
  08f70		 |$M45671|

; 2783 :     CQTD *pQTD = (CQTD *)pData;

  08f70	e59d3048	 ldr         r3, [sp, #0x48]
  08f74	e58d3004	 str         r3, [sp, #4]

; 2784 :     PHSMUSB_T pOTG;    
; 2785 :     BOOL    bResult = FALSE;

  08f78	e3a03000	 mov         r3, #0
  08f7c	e58d3014	 str         r3, [sp, #0x14]

; 2786 :     UCHAR   csrIndex;
; 2787 : 
; 2788 : #ifdef DEBUG
; 2789 :     CPipe *pPipe = pQTD->GetQH()->GetPipe();  

  08f80	e59d0004	 ldr         r0, [sp, #4]
  08f84	eb000000	 bl          |?GetQH@CQTD@@QAAPAVCQH@@XZ|
  08f88	e58d001c	 str         r0, [sp, #0x1C]
  08f8c	e59d001c	 ldr         r0, [sp, #0x1C]
  08f90	eb000000	 bl          |?GetPipe@CQH@@QAAPAVCPipe@@XZ|
  08f94	e58d0020	 str         r0, [sp, #0x20]
  08f98	e59d3020	 ldr         r3, [sp, #0x20]
  08f9c	e58d3000	 str         r3, [sp]

; 2790 : #endif
; 2791 : 
; 2792 :     pOTG = (PHSMUSB_T)GetOTGContext();

  08fa0	e59d0040	 ldr         r0, [sp, #0x40]
  08fa4	eb000000	 bl          |?GetOTGContext@CHcd@@QAAPAXXZ|
  08fa8	e58d0024	 str         r0, [sp, #0x24]
  08fac	e59d3024	 ldr         r3, [sp, #0x24]
  08fb0	e58d3010	 str         r3, [sp, #0x10]

; 2793 :     if (pOTG == NULL)

  08fb4	e59d3010	 ldr         r3, [sp, #0x10]
  08fb8	e3530000	 cmp         r3, #0
  08fbc	1a00000f	 bne         |$LN1@SendOutDMA|

; 2794 :     {
; 2795 :         DEBUGMSG(ZONE_ERROR, (TEXT("Failed to read the FIFO for ep %d\r\n"), endpoint));

  08fc0	e59f31fc	 ldr         r3, [pc, #0x1FC]
  08fc4	e5933440	 ldr         r3, [r3, #0x440]
  08fc8	e3130901	 tst         r3, #1, 18
  08fcc	0a000006	 beq         |$LN4@SendOutDMA|
  08fd0	e5dd3044	 ldrb        r3, [sp, #0x44]
  08fd4	e1a01003	 mov         r1, r3
  08fd8	e59f01ec	 ldr         r0, [pc, #0x1EC]
  08fdc	eb000000	 bl          NKDbgPrintfW
  08fe0	e3a03001	 mov         r3, #1
  08fe4	e58d3028	 str         r3, [sp, #0x28]
  08fe8	ea000001	 b           |$LN5@SendOutDMA|
  08fec		 |$LN4@SendOutDMA|
  08fec	e3a03000	 mov         r3, #0
  08ff0	e58d3028	 str         r3, [sp, #0x28]
  08ff4		 |$LN5@SendOutDMA|

; 2796 :         return bResult;

  08ff4	e59d3014	 ldr         r3, [sp, #0x14]
  08ff8	e58d3018	 str         r3, [sp, #0x18]
  08ffc	ea00006b	 b           |$LN2@SendOutDMA|
  09000		 |$LN1@SendOutDMA|

; 2797 :     }
; 2798 :         
; 2799 :     // Set Index Register
; 2800 :     EnterCriticalSection(&pOTG->regCS);    

  09000	e59d3010	 ldr         r3, [sp, #0x10]
  09004	e2830038	 add         r0, r3, #0x38
  09008	eb000000	 bl          EnterCriticalSection

; 2801 :     OUTREG8(&pOTG->pUsbGenRegs->Index, INDEX(endpoint));

  0900c	e5dd3044	 ldrb        r3, [sp, #0x44]
  09010	e203300f	 and         r3, r3, #0xF
  09014	e20320ff	 and         r2, r3, #0xFF
  09018	e59d3010	 ldr         r3, [sp, #0x10]
  0901c	e2833020	 add         r3, r3, #0x20
  09020	e5933000	 ldr         r3, [r3]
  09024	e283300e	 add         r3, r3, #0xE
  09028	e5c32000	 strb        r2, [r3]

; 2802 :     csrIndex = INDEX(endpoint);

  0902c	e5dd3044	 ldrb        r3, [sp, #0x44]
  09030	e203300f	 and         r3, r3, #0xF
  09034	e20330ff	 and         r3, r3, #0xFF
  09038	e5cd300c	 strb        r3, [sp, #0xC]

; 2803 : 
; 2804 : #ifdef DEBUG
; 2805 :     DWORD DataToggle = (INREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].CSR.TxCSR) & TXCSR_H_DataToggle);

  0903c	e59d3010	 ldr         r3, [sp, #0x10]
  09040	e283001c	 add         r0, r3, #0x1C
  09044	e5dd300c	 ldrb        r3, [sp, #0xC]
  09048	e1a01003	 mov         r1, r3
  0904c	e3a03010	 mov         r3, #0x10
  09050	e0020391	 mul         r2, r1, r3
  09054	e5903000	 ldr         r3, [r0]
  09058	e0833002	 add         r3, r3, r2
  0905c	e2831002	 add         r1, r3, #2
  09060	e5d13001	 ldrb        r3, [r1, #1]
  09064	e1a03403	 mov         r3, r3, lsl #8
  09068	e1a02803	 mov         r2, r3, lsl #16
  0906c	e1a02822	 mov         r2, r2, lsr #16
  09070	e5d13000	 ldrb        r3, [r1]
  09074	e1833002	 orr         r3, r3, r2
  09078	e2033c01	 and         r3, r3, #1, 24
  0907c	e58d3008	 str         r3, [sp, #8]

; 2806 :     DEBUGMSG(ZONE_HCD|0, (TEXT("[DataToggle]:SendOutDMA:Data OUT Trasaction on EP %d Device Addr %d DataToggle = 0x%x\r\n"), 
; 2807 :                 csrIndex, pPipe->GetReservedDeviceAddr(), DataToggle));

  09080	e59f313c	 ldr         r3, [pc, #0x13C]
  09084	e5933440	 ldr         r3, [r3, #0x440]
  09088	e3130001	 tst         r3, #1
  0908c	0a00000f	 beq         |$LN6@SendOutDMA|
  09090	e59d3000	 ldr         r3, [sp]
  09094	e5933000	 ldr         r3, [r3]
  09098	e2833028	 add         r3, r3, #0x28
  0909c	e59d0000	 ldr         r0, [sp]
  090a0	e5933000	 ldr         r3, [r3]
  090a4	e1a0e00f	 mov         lr, pc
  090a8	e12fff13	 bx          r3
  090ac	e5cd002c	 strb        r0, [sp, #0x2C]
  090b0	e59d3008	 ldr         r3, [sp, #8]
  090b4	e5dd202c	 ldrb        r2, [sp, #0x2C]
  090b8	e5dd100c	 ldrb        r1, [sp, #0xC]
  090bc	e59f0104	 ldr         r0, [pc, #0x104]
  090c0	eb000000	 bl          NKDbgPrintfW
  090c4	e3a03001	 mov         r3, #1
  090c8	e58d3030	 str         r3, [sp, #0x30]
  090cc	ea000001	 b           |$LN7@SendOutDMA|
  090d0		 |$LN6@SendOutDMA|
  090d0	e3a03000	 mov         r3, #0
  090d4	e58d3030	 str         r3, [sp, #0x30]
  090d8		 |$LN7@SendOutDMA|

; 2808 : #endif
; 2809 : 
; 2810 :     // 2. Set the SetupPkt & TxPtRdy bits
; 2811 :     SETREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].CSR.TxCSR, TXCSR_H_TxPktRdy);

  090d8	e59d3010	 ldr         r3, [sp, #0x10]
  090dc	e283001c	 add         r0, r3, #0x1C
  090e0	e5dd300c	 ldrb        r3, [sp, #0xC]
  090e4	e1a01003	 mov         r1, r3
  090e8	e3a03010	 mov         r3, #0x10
  090ec	e0020391	 mul         r2, r1, r3
  090f0	e5903000	 ldr         r3, [r0]
  090f4	e0833002	 add         r3, r3, r2
  090f8	e2831002	 add         r1, r3, #2
  090fc	e5d13001	 ldrb        r3, [r1, #1]
  09100	e1a03403	 mov         r3, r3, lsl #8
  09104	e1a02803	 mov         r2, r3, lsl #16
  09108	e1a02822	 mov         r2, r2, lsr #16
  0910c	e5d13000	 ldrb        r3, [r1]
  09110	e1833002	 orr         r3, r3, r2
  09114	e3833001	 orr         r3, r3, #1
  09118	e1a0e803	 mov         lr, r3, lsl #16
  0911c	e1a0e82e	 mov         lr, lr, lsr #16
  09120	e59d3010	 ldr         r3, [sp, #0x10]
  09124	e283001c	 add         r0, r3, #0x1C
  09128	e5dd300c	 ldrb        r3, [sp, #0xC]
  0912c	e1a01003	 mov         r1, r3
  09130	e3a03010	 mov         r3, #0x10
  09134	e0020391	 mul         r2, r1, r3
  09138	e5903000	 ldr         r3, [r0]
  0913c	e0833002	 add         r3, r3, r2
  09140	e2832002	 add         r2, r3, #2
  09144	e1a0300e	 mov         r3, lr
  09148	e5c23000	 strb        r3, [r2]
  0914c	e1a03423	 mov         r3, r3, lsr #8
  09150	e5c23001	 strb        r3, [r2, #1]

; 2812 :     
; 2813 :     DEBUGMSG(ZONE_HCD|ZONE_DEBUG, (TEXT("SendOutDMA at ep %d (index %d) TxPktRdy\r\n"), endpoint, csrIndex));

  09154	e59f3068	 ldr         r3, [pc, #0x68]
  09158	e5933440	 ldr         r3, [r3, #0x440]
  0915c	e3130001	 tst         r3, #1
  09160	0a000008	 beq         |$LN8@SendOutDMA|
  09164	e5dd300c	 ldrb        r3, [sp, #0xC]
  09168	e1a02003	 mov         r2, r3
  0916c	e5dd3044	 ldrb        r3, [sp, #0x44]
  09170	e1a01003	 mov         r1, r3
  09174	e59f0044	 ldr         r0, [pc, #0x44]
  09178	eb000000	 bl          NKDbgPrintfW
  0917c	e3a03001	 mov         r3, #1
  09180	e58d3034	 str         r3, [sp, #0x34]
  09184	ea000001	 b           |$LN9@SendOutDMA|
  09188		 |$LN8@SendOutDMA|
  09188	e3a03000	 mov         r3, #0
  0918c	e58d3034	 str         r3, [sp, #0x34]
  09190		 |$LN9@SendOutDMA|

; 2814 : 
; 2815 :     // 3. Wait for transfer interrupt signal
; 2816 :     pQTD->SetStatus(STATUS_WAIT_RESPONSE);            

  09190	e3a01003	 mov         r1, #3
  09194	e59d0004	 ldr         r0, [sp, #4]
  09198	eb000000	 bl          |?SetStatus@CQTD@@QAAXK@Z|

; 2817 :     LeaveCriticalSection(&pOTG->regCS);

  0919c	e59d3010	 ldr         r3, [sp, #0x10]
  091a0	e2830038	 add         r0, r3, #0x38
  091a4	eb000000	 bl          LeaveCriticalSection

; 2818 : 
; 2819 :     return TRUE;

  091a8	e3a03001	 mov         r3, #1
  091ac	e58d3018	 str         r3, [sp, #0x18]
  091b0		 |$LN2@SendOutDMA|

; 2820 : 
; 2821 : }

  091b0	e59d0018	 ldr         r0, [sp, #0x18]
  091b4	e28dd038	 add         sp, sp, #0x38
  091b8	e89d6000	 ldmia       sp, {sp, lr}
  091bc	e12fff1e	 bx          lr
  091c0		 |$LN13@SendOutDMA|
  091c0		 |$LN14@SendOutDMA|
  091c0	00000000	 DCD         |??_C@_1FE@PICCLBBN@?$AAS?$AAe?$AAn?$AAd?$AAO?$AAu?$AAt?$AAD?$AAM?$AAA?$AA?5?$AAa?$AAt?$AA?5?$AAe?$AAp?$AA?5?$AA?$CF?$AAd?$AA?5?$AA?$CI?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?5?$AAT@|
  091c4		 |$LN15@SendOutDMA|
  091c4	00000000	 DCD         |dpCurSettings|
  091c8		 |$LN16@SendOutDMA|
  091c8	00000000	 DCD         |??_C@_1LA@EPJGEBGA@?$AA?$FL?$AAD?$AAa?$AAt?$AAa?$AAT?$AAo?$AAg?$AAg?$AAl?$AAe?$AA?$FN?$AA?3?$AAS?$AAe?$AAn?$AAd?$AAO?$AAu?$AAt?$AAD?$AAM?$AAA?$AA?3?$AAD?$AAa?$AAt?$AAa?$AA?5?$AAO?$AAU?$AAT@|
  091cc		 |$LN17@SendOutDMA|
  091cc	00000000	 DCD         |??_C@_1EI@KCPHDJG@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAF?$AAI?$AAF?$AAO?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAe?$AAp?$AA?5?$AA?$CF@|
  091d0		 |$M45672|

			 ENDP  ; |?SendOutDMA@CHW@@UAAHEPAX@Z|, CHW::SendOutDMA

	EXPORT	|??_C@_1KK@GEMENNGO@?$AA?$FL?$AAD?$AAa?$AAt?$AAa?$AAT?$AAo?$AAg?$AAg?$AAl?$AAe?$AA?$FN?$AA?3?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?3?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?5?$AAI?$AAN?$AA?5?$AAT@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CO@MJLAGBNE@?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AA?5?$AAT?$AAD?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAI?$AAN?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HK@FIIANMKL@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAT?$AAD?$AA?3?$AA?5?$AAT?$AAI?$AAM?$AAE?$AAO?$AAU?$AAT?$AA?5?$AAS?$AAe?$AAn?$AAd?$AAi?$AAn?$AAg?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EK@DODDBDFL@?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?5?$AAO?$AAU?$AAT?$AA?5?$AAd?$AAa?$AAt?$AAa?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAe?$AAp?$AA?5?$AA?$CF?$AAd?$AA?5?$AAs?$AAi?$AAz?$AAe?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1KK@FOIFGAOM@?$AA?$FL?$AAD?$AAa?$AAt?$AAa?$AAT?$AAo?$AAg?$AAg?$AAl?$AAe?$AA?$FN?$AA?3?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?3?$AAD?$AAa?$AAt?$AAa?$AA?5?$AAO?$AAU?$AAT?$AA?5?$AAT?$AAr@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FM@MEOLIMCM@?$AAD?$AAa?$AAt?$AAa?$AA?5?$AAO?$AAU?$AAT?$AA?5?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?5?$AAr?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAe?$AAd?$AA?5?$AAw?$AAi?$AAt?$AAh?$AA?5?$AAT@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FK@MIONNJHP@?$AAD?$AAa?$AAt?$AAa?$AA?5?$AAO?$AAU?$AAT?$AA?5?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?5?$AAr?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAe?$AAd?$AA?5?$AAw?$AAi?$AAt?$AAh?$AA?5?$AAC@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EI@MNPANNOD@?$AAS?$AAo?$AAm?$AAe?$AAt?$AAh?$AAi?$AAn?$AAg?$AA?5?$AAw?$AAr?$AAo?$AAn?$AAg?$AA?5?$AAw?$AAi?$AAt?$AAh?$AA?5?$AAs?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?5?$AA?$CF?$AAd?$AA?$CB?$AA?$CB@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HO@FBBOJPEG@?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAT?$AAD?$AA?3?$AA?3?$AAW?$AAr?$AAi?$AAt?$AAe?$AAD?$AAM?$AAA?$AA?5?$AAa?$AAt?$AA?5?$AAe?$AAp?$AA?5?$AA?$CF?$AAd?$AA?5?$AA?$CI?$AAm?$AAa@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GG@IBBFPGMN@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAc?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?0?$AA?5?$AAg@| [ DATA ] ; `string'
	EXPORT	|?GetStatus@CQTD@@QAAKXZ|		; CQTD::GetStatus
	EXPORT	|??_C@_1HA@MMCAFFPC@?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?5?$AAO?$AAU?$AAT?$AA?5?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAT?$AAD?$AA?5?$AAE?$AAP?$AA?5?$AA?$CF?$AAd?$AA?5?$AAD?$AAe?$AAv?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FK@BIHNGMAC@?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AA?5?$AAT?$AAD?$AA_?$AAD?$AAA?$AAT?$AAA?$AA_?$AAO?$AAU?$AAT?$AA?5?$AAa?$AAt?$AA?5?$AAe?$AAn?$AAd?$AAp?$AAo?$AAi?$AAn?$AAt?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DO@CEKBGLO@?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?5?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAe?$AAp?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|?GetPacketSize@CQTD@@QAAKXZ|		; CQTD::GetPacketSize
	EXPORT	|?GetPAData@CQTD@@QAAKXZ|		; CQTD::GetPAData
	EXPORT	|??_C@_1JK@PFLBOLA@?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?5?$AAO?$AAU?$AAT?$AA?5?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAE?$AAP?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1KI@BLJPJKNI@?$AA?$FL?$AAD?$AAa?$AAt?$AAa?$AAT?$AAo?$AAg?$AAg?$AAl?$AAe?$AA?$FN?$AA?3?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?3?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?5?$AAO?$AAU?$AAT?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DA@NHEDHPKL@?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AA?5?$AAT?$AAD?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAO?$AAU?$AAT?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IO@EELFMDPD@?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?5?$AAI?$AAN?$AA?5?$AAd?$AAa?$AAt?$AAa?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAE?$AAP?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AAi?$AAn?$AAd?$AAe?$AAx@| [ DATA ] ; `string'
	EXPORT	|??_C@_1MO@KNEDNIIL@?$AA?$FL?$AAD?$AAa?$AAt?$AAa?$AAT?$AAo?$AAg?$AAg?$AAl?$AAe?$AA?$FN?$AA?3?$AA?5?$AAS?$AAe?$AAt?$AA?5?$AAE?$AAP?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$CI?$AAm?$AAa?$AAp?$AAp?$AAe?$AAd@| [ DATA ] ; `string'
	EXPORT	|??_C@_1KA@NGIJGLJ@?$AA?$FL?$AAD?$AAa?$AAt?$AAa?$AAT?$AAo?$AAg?$AAg?$AAl?$AAe?$AA?$FN?$AA?3?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?3?$AAI?$AAN?$AA?5?$AAT?$AAr?$AAa?$AAn?$AAs?$AAa?$AAc?$AAt@| [ DATA ] ; `string'
	EXPORT	|??_C@_1KI@FPCMPAKP@?$AA?$FL?$AAD?$AAa?$AAt?$AAa?$AAT?$AAo?$AAg?$AAg?$AAl?$AAe?$AA?$FN?$AA?3?$AA?5?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?3?$AAD?$AAa?$AAt?$AAa?$AA?5?$AAI?$AAN?$AA?5?$AAT?$AAr@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EM@CHCHNIDI@?$AAN?$AAo?$AA?5?$AAd?$AAa?$AAt?$AAa?$AA?5?$AAa?$AAv?$AAa?$AAi?$AAl?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAw?$AAi?$AAt?$AAh?$AA?5?$AAR?$AAx?$AAC?$AAS?$AAR?$AA?5?$AA?$DN?$AA?5?$AA0@| [ DATA ] ; `string'
	EXPORT	|Host_ProcessEPxRx|
	EXPORT	|?ClrRxDataAvail@CHW@@QAAXE@Z|		; CHW::ClrRxDataAvail
	EXPORT	|?GetRxDataAvail@CHW@@QAAHE@Z|		; CHW::GetRxDataAvail
	EXPORT	|??_C@_1JI@GNAAFJLD@?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?5?$AAI?$AAN?$AA?5?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAE?$AAP?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AAD@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FE@GGAEHKGN@?$AAS?$AAe?$AAt?$AAu?$AAp?$AA?5?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?5?$AAr?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAe?$AAd?$AA?5?$AAw?$AAi?$AAt?$AAh?$AA?5?$AAC?$AAS?$AAR?$AA0@| [ DATA ] ; `string'
	EXPORT	|??_C@_1KK@JIIGGFAO@?$AA?$FL?$AAD?$AAa?$AAt?$AAa?$AAT?$AAo?$AAg?$AAg?$AAl?$AAe?$AA?$FN?$AA?3?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?3?$AAS?$AAe?$AAt?$AAu?$AAp?$AA?5?$AAO?$AAU?$AAT?$AA?5?$AAT@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HC@DMLGCNLE@?$AAW?$AAa?$AAr?$AAn?$AAi?$AAn?$AAg?$AA?$CB?$AA?$CB?$AA?5?$AAS?$AAe?$AAt?$AAu?$AAp?$AA?5?$AAD?$AAa?$AAt?$AAa?$AA?5?$AAi?$AAs?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AA8?$AA?5?$AAb?$AAy@| [ DATA ] ; `string'
	EXPORT	|?GetVAData@CQTD@@QAAKXZ|		; CQTD::GetVAData
	EXPORT	|??_C@_1EK@IEBKKGBL@?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?5?$AAP?$AAi?$AAp?$AAe?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAe?$AAp?$AA?5?$AA?$CF?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAu?$AAp?$AAp?$AAo@| [ DATA ] ; `string'
	EXPORT	|?GetTDType@CQTD@@QAAKXZ|		; CQTD::GetTDType

  001d8			 AREA	 |.pdata|, PDATA
|$T45771| DCD	|$LN121@ProcessTD|
	DCD	0x40075904

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KK@GEMENNGO@?$AA?$FL?$AAD?$AAa?$AAt?$AAa?$AAT?$AAo?$AAg?$AAg?$AAl?$AAe?$AA?$FN?$AA?3?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?3?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?5?$AAI?$AAN?$AA?5?$AAT@| DCB "["
	DCB	0x0, "D", 0x0, "a", 0x0, "t", 0x0, "a", 0x0, "T", 0x0, "o"
	DCB	0x0, "g", 0x0, "g", 0x0, "l", 0x0, "e", 0x0, "]", 0x0, ":"
	DCB	0x0, "R", 0x0, "e", 0x0, "q", 0x0, "u", 0x0, "e", 0x0, "s"
	DCB	0x0, "t", 0x0, ":", 0x0, "S", 0x0, "t", 0x0, "a", 0x0, "t"
	DCB	0x0, "u", 0x0, "s", 0x0, " ", 0x0, "I", 0x0, "N", 0x0, " "
	DCB	0x0, "T", 0x0, "r", 0x0, "a", 0x0, "s", 0x0, "a", 0x0, "c"
	DCB	0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, " ", 0x0, "o"
	DCB	0x0, "n", 0x0, " ", 0x0, "E", 0x0, "P", 0x0, " ", 0x0, "0"
	DCB	0x0, " ", 0x0, "D", 0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c"
	DCB	0x0, "e", 0x0, " ", 0x0, "A", 0x0, "d", 0x0, "d", 0x0, "r"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, "D", 0x0, "a"
	DCB	0x0, "t", 0x0, "a", 0x0, "T", 0x0, "o", 0x0, "g", 0x0, "g"
	DCB	0x0, "l", 0x0, "e", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@MJLAGBNE@?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AA?5?$AAT?$AAD?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAI?$AAN?$AA?$AN?$AA?6?$AA?$AA@| DCB "P"
	DCB	0x0, "r", 0x0, "o", 0x0, "c", 0x0, "e", 0x0, "s", 0x0, "s"
	DCB	0x0, " ", 0x0, "T", 0x0, "D", 0x0, "_", 0x0, "S", 0x0, "T"
	DCB	0x0, "A", 0x0, "T", 0x0, "U", 0x0, "S", 0x0, "_", 0x0, "I"
	DCB	0x0, "N", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HK@FIIANMKL@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAT?$AAD?$AA?3?$AA?5?$AAT?$AAI?$AAM?$AAE?$AAO?$AAU?$AAT?$AA?5?$AAS?$AAe?$AAn?$AAd?$AAi?$AAn?$AAg?$AA?5@| DCB "C"
	DCB	0x0, "H", 0x0, "W", 0x0, ":", 0x0, ":", 0x0, "P", 0x0, "r"
	DCB	0x0, "o", 0x0, "c", 0x0, "e", 0x0, "s", 0x0, "s", 0x0, "T"
	DCB	0x0, "D", 0x0, ":", 0x0, " ", 0x0, "T", 0x0, "I", 0x0, "M"
	DCB	0x0, "E", 0x0, "O", 0x0, "U", 0x0, "T", 0x0, " ", 0x0, "S"
	DCB	0x0, "e", 0x0, "n", 0x0, "d", 0x0, "i", 0x0, "n", 0x0, "g"
	DCB	0x0, " ", 0x0, "Z", 0x0, "E", 0x0, "R", 0x0, "O", 0x0, "_"
	DCB	0x0, "L", 0x0, "E", 0x0, "N", 0x0, "G", 0x0, "T", 0x0, "H"
	DCB	0x0, " ", 0x0, "P", 0x0, "A", 0x0, "C", 0x0, "K", 0x0, "E"
	DCB	0x0, "T", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "4", 0x0, "X", 0x0, ";", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EK@DODDBDFL@?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?5?$AAO?$AAU?$AAT?$AA?5?$AAd?$AAa?$AAt?$AAa?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAe?$AAp?$AA?5?$AA?$CF?$AAd?$AA?5?$AAs?$AAi?$AAz?$AAe?$AA?5@| DCB "R"
	DCB	0x0, "e", 0x0, "q", 0x0, "u", 0x0, "e", 0x0, "s", 0x0, "t"
	DCB	0x0, " ", 0x0, "O", 0x0, "U", 0x0, "T", 0x0, " ", 0x0, "d"
	DCB	0x0, "a", 0x0, "t", 0x0, "a", 0x0, " ", 0x0, "f", 0x0, "o"
	DCB	0x0, "r", 0x0, " ", 0x0, "e", 0x0, "p", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, " ", 0x0, "s", 0x0, "i", 0x0, "z", 0x0, "e"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KK@FOIFGAOM@?$AA?$FL?$AAD?$AAa?$AAt?$AAa?$AAT?$AAo?$AAg?$AAg?$AAl?$AAe?$AA?$FN?$AA?3?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?3?$AAD?$AAa?$AAt?$AAa?$AA?5?$AAO?$AAU?$AAT?$AA?5?$AAT?$AAr@| DCB "["
	DCB	0x0, "D", 0x0, "a", 0x0, "t", 0x0, "a", 0x0, "T", 0x0, "o"
	DCB	0x0, "g", 0x0, "g", 0x0, "l", 0x0, "e", 0x0, "]", 0x0, ":"
	DCB	0x0, "R", 0x0, "e", 0x0, "q", 0x0, "u", 0x0, "e", 0x0, "s"
	DCB	0x0, "t", 0x0, ":", 0x0, "D", 0x0, "a", 0x0, "t", 0x0, "a"
	DCB	0x0, " ", 0x0, "O", 0x0, "U", 0x0, "T", 0x0, " ", 0x0, "T"
	DCB	0x0, "r", 0x0, "a", 0x0, "s", 0x0, "a", 0x0, "c", 0x0, "t"
	DCB	0x0, "i", 0x0, "o", 0x0, "n", 0x0, " ", 0x0, "o", 0x0, "n"
	DCB	0x0, " ", 0x0, "E", 0x0, "P", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, " ", 0x0, "D", 0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c"
	DCB	0x0, "e", 0x0, " ", 0x0, "A", 0x0, "d", 0x0, "d", 0x0, "r"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, "D", 0x0, "a"
	DCB	0x0, "t", 0x0, "a", 0x0, "T", 0x0, "o", 0x0, "g", 0x0, "g"
	DCB	0x0, "l", 0x0, "e", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FM@MEOLIMCM@?$AAD?$AAa?$AAt?$AAa?$AA?5?$AAO?$AAU?$AAT?$AA?5?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?5?$AAr?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAe?$AAd?$AA?5?$AAw?$AAi?$AAt?$AAh?$AA?5?$AAT@| DCB "D"
	DCB	0x0, "a", 0x0, "t", 0x0, "a", 0x0, " ", 0x0, "O", 0x0, "U"
	DCB	0x0, "T", 0x0, " ", 0x0, "P", 0x0, "a", 0x0, "c", 0x0, "k"
	DCB	0x0, "e", 0x0, "t", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "q"
	DCB	0x0, "u", 0x0, "e", 0x0, "s", 0x0, "t", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "w", 0x0, "i", 0x0, "t", 0x0, "h", 0x0, " "
	DCB	0x0, "T", 0x0, "x", 0x0, "C", 0x0, "S", 0x0, "R", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FK@MIONNJHP@?$AAD?$AAa?$AAt?$AAa?$AA?5?$AAO?$AAU?$AAT?$AA?5?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?5?$AAr?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAe?$AAd?$AA?5?$AAw?$AAi?$AAt?$AAh?$AA?5?$AAC@| DCB "D"
	DCB	0x0, "a", 0x0, "t", 0x0, "a", 0x0, " ", 0x0, "O", 0x0, "U"
	DCB	0x0, "T", 0x0, " ", 0x0, "P", 0x0, "a", 0x0, "c", 0x0, "k"
	DCB	0x0, "e", 0x0, "t", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "q"
	DCB	0x0, "u", 0x0, "e", 0x0, "s", 0x0, "t", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "w", 0x0, "i", 0x0, "t", 0x0, "h", 0x0, " "
	DCB	0x0, "C", 0x0, "S", 0x0, "R", 0x0, "0", 0x0, " ", 0x0, "="
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EI@MNPANNOD@?$AAS?$AAo?$AAm?$AAe?$AAt?$AAh?$AAi?$AAn?$AAg?$AA?5?$AAw?$AAr?$AAo?$AAn?$AAg?$AA?5?$AAw?$AAi?$AAt?$AAh?$AA?5?$AAs?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?5?$AA?$CF?$AAd?$AA?$CB?$AA?$CB@| DCB "S"
	DCB	0x0, "o", 0x0, "m", 0x0, "e", 0x0, "t", 0x0, "h", 0x0, "i"
	DCB	0x0, "n", 0x0, "g", 0x0, " ", 0x0, "w", 0x0, "r", 0x0, "o"
	DCB	0x0, "n", 0x0, "g", 0x0, " ", 0x0, "w", 0x0, "i", 0x0, "t"
	DCB	0x0, "h", 0x0, " ", 0x0, "s", 0x0, "t", 0x0, "a", 0x0, "t"
	DCB	0x0, "u", 0x0, "s", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, "!"
	DCB	0x0, "!", 0x0, "!", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HO@FBBOJPEG@?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAT?$AAD?$AA?3?$AA?3?$AAW?$AAr?$AAi?$AAt?$AAe?$AAD?$AAM?$AAA?$AA?5?$AAa?$AAt?$AA?5?$AAe?$AAp?$AA?5?$AA?$CF?$AAd?$AA?5?$AA?$CI?$AAm?$AAa@| DCB "P"
	DCB	0x0, "r", 0x0, "o", 0x0, "c", 0x0, "e", 0x0, "s", 0x0, "s"
	DCB	0x0, "T", 0x0, "D", 0x0, ":", 0x0, ":", 0x0, "W", 0x0, "r"
	DCB	0x0, "i", 0x0, "t", 0x0, "e", 0x0, "D", 0x0, "M", 0x0, "A"
	DCB	0x0, " ", 0x0, "a", 0x0, "t", 0x0, " ", 0x0, "e", 0x0, "p"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, "(", 0x0, "m"
	DCB	0x0, "a", 0x0, "p", 0x0, "p", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, ")", 0x0, ",", 0x0, " ", 0x0, "s"
	DCB	0x0, "i", 0x0, "z", 0x0, "e", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, " ", 0x0, "c", 0x0, "h", 0x0, "a", 0x0, "n", 0x0, "n"
	DCB	0x0, "e", 0x0, "l", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GG@IBBFPGMN@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAc?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?0?$AA?5?$AAg@| DCB "F"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "t", 0x0, "o", 0x0, " ", 0x0, "g", 0x0, "e", 0x0, "t"
	DCB	0x0, " ", 0x0, "t", 0x0, "h", 0x0, "e", 0x0, " ", 0x0, "D"
	DCB	0x0, "M", 0x0, "A", 0x0, " ", 0x0, "c", 0x0, "h", 0x0, "a"
	DCB	0x0, "n", 0x0, "n", 0x0, "e", 0x0, "l", 0x0, ",", 0x0, " "
	DCB	0x0, "g", 0x0, "o", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "t"
	DCB	0x0, "o", 0x0, " ", 0x0, "F", 0x0, "I", 0x0, "F", 0x0, "O"
	DCB	0x0, " ", 0x0, "m", 0x0, "o", 0x0, "d", 0x0, "e", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HA@MMCAFFPC@?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?5?$AAO?$AAU?$AAT?$AA?5?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAT?$AAD?$AA?5?$AAE?$AAP?$AA?5?$AA?$CF?$AAd?$AA?5?$AAD?$AAe?$AAv?$AA?5@| DCB "R"
	DCB	0x0, "e", 0x0, "q", 0x0, "u", 0x0, "e", 0x0, "s", 0x0, "t"
	DCB	0x0, " ", 0x0, "O", 0x0, "U", 0x0, "T", 0x0, " ", 0x0, "P"
	DCB	0x0, "r", 0x0, "o", 0x0, "c", 0x0, "e", 0x0, "s", 0x0, "s"
	DCB	0x0, "T", 0x0, "D", 0x0, " ", 0x0, "E", 0x0, "P", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, " ", 0x0, "D", 0x0, "e", 0x0, "v"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, "d", 0x0, "a"
	DCB	0x0, "t", 0x0, "a", 0x0, " ", 0x0, "T", 0x0, "o", 0x0, "g"
	DCB	0x0, "g", 0x0, "l", 0x0, "e", 0x0, " ", 0x0, "=", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FK@BIHNGMAC@?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AA?5?$AAT?$AAD?$AA_?$AAD?$AAA?$AAT?$AAA?$AA_?$AAO?$AAU?$AAT?$AA?5?$AAa?$AAt?$AA?5?$AAe?$AAn?$AAd?$AAp?$AAo?$AAi?$AAn?$AAt?$AA?5@| DCB "P"
	DCB	0x0, "r", 0x0, "o", 0x0, "c", 0x0, "e", 0x0, "s", 0x0, "s"
	DCB	0x0, " ", 0x0, "T", 0x0, "D", 0x0, "_", 0x0, "D", 0x0, "A"
	DCB	0x0, "T", 0x0, "A", 0x0, "_", 0x0, "O", 0x0, "U", 0x0, "T"
	DCB	0x0, " ", 0x0, "a", 0x0, "t", 0x0, " ", 0x0, "e", 0x0, "n"
	DCB	0x0, "d", 0x0, "p", 0x0, "o", 0x0, "i", 0x0, "n", 0x0, "t"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, "s", 0x0, "i"
	DCB	0x0, "z", 0x0, "e", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@CEKBGLO@?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?5?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAe?$AAp?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "P"
	DCB	0x0, "a", 0x0, "c", 0x0, "k", 0x0, "e", 0x0, "t", 0x0, " "
	DCB	0x0, "S", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, " ", 0x0, "="
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, " "
	DCB	0x0, "f", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "e", 0x0, "p"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JK@PFLBOLA@?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?5?$AAO?$AAU?$AAT?$AA?5?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAE?$AAP?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5@| DCB "R"
	DCB	0x0, "e", 0x0, "q", 0x0, "u", 0x0, "e", 0x0, "s", 0x0, "t"
	DCB	0x0, " ", 0x0, "O", 0x0, "U", 0x0, "T", 0x0, " ", 0x0, "T"
	DCB	0x0, "r", 0x0, "a", 0x0, "n", 0x0, "s", 0x0, "f", 0x0, "e"
	DCB	0x0, "r", 0x0, " ", 0x0, "f", 0x0, "o", 0x0, "r", 0x0, " "
	DCB	0x0, "E", 0x0, "P", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ","
	DCB	0x0, " ", 0x0, "s", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, " ", 0x0, "M", 0x0, "a", 0x0, "p"
	DCB	0x0, "p", 0x0, "e", 0x0, "d", 0x0, "E", 0x0, "P", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "D", 0x0, "e"
	DCB	0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, ",", 0x0, " ", 0x0, "T", 0x0, "x", 0x0, "C"
	DCB	0x0, "S", 0x0, "R", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KI@BLJPJKNI@?$AA?$FL?$AAD?$AAa?$AAt?$AAa?$AAT?$AAo?$AAg?$AAg?$AAl?$AAe?$AA?$FN?$AA?3?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?3?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?5?$AAO?$AAU?$AAT?$AA?5@| DCB "["
	DCB	0x0, "D", 0x0, "a", 0x0, "t", 0x0, "a", 0x0, "T", 0x0, "o"
	DCB	0x0, "g", 0x0, "g", 0x0, "l", 0x0, "e", 0x0, "]", 0x0, ":"
	DCB	0x0, "R", 0x0, "e", 0x0, "q", 0x0, "u", 0x0, "e", 0x0, "s"
	DCB	0x0, "t", 0x0, ":", 0x0, "S", 0x0, "t", 0x0, "a", 0x0, "t"
	DCB	0x0, "u", 0x0, "s", 0x0, " ", 0x0, "O", 0x0, "U", 0x0, "T"
	DCB	0x0, " ", 0x0, "T", 0x0, "r", 0x0, "a", 0x0, "s", 0x0, "a"
	DCB	0x0, "c", 0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, " "
	DCB	0x0, "o", 0x0, "n", 0x0, " ", 0x0, "E", 0x0, "P", 0x0, " "
	DCB	0x0, "0", 0x0, " ", 0x0, "D", 0x0, "e", 0x0, "v", 0x0, "i"
	DCB	0x0, "c", 0x0, "e", 0x0, " ", 0x0, "A", 0x0, "d", 0x0, "d"
	DCB	0x0, "r", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, "D"
	DCB	0x0, "a", 0x0, "t", 0x0, "a", 0x0, "T", 0x0, "o", 0x0, "g"
	DCB	0x0, "g", 0x0, "l", 0x0, "e", 0x0, " ", 0x0, "=", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@NHEDHPKL@?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AA?5?$AAT?$AAD?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAO?$AAU?$AAT?$AA?$AN?$AA?6?$AA?$AA@| DCB "P"
	DCB	0x0, "r", 0x0, "o", 0x0, "c", 0x0, "e", 0x0, "s", 0x0, "s"
	DCB	0x0, " ", 0x0, "T", 0x0, "D", 0x0, "_", 0x0, "S", 0x0, "T"
	DCB	0x0, "A", 0x0, "T", 0x0, "U", 0x0, "S", 0x0, "_", 0x0, "O"
	DCB	0x0, "U", 0x0, "T", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IO@EELFMDPD@?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?5?$AAI?$AAN?$AA?5?$AAd?$AAa?$AAt?$AAa?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAE?$AAP?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AAi?$AAn?$AAd?$AAe?$AAx@| DCB "R"
	DCB	0x0, "e", 0x0, "q", 0x0, "u", 0x0, "e", 0x0, "s", 0x0, "t"
	DCB	0x0, " ", 0x0, "I", 0x0, "N", 0x0, " ", 0x0, "d", 0x0, "a"
	DCB	0x0, "t", 0x0, "a", 0x0, " ", 0x0, "f", 0x0, "o", 0x0, "r"
	DCB	0x0, " ", 0x0, "E", 0x0, "P", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, ",", 0x0, " ", 0x0, "i", 0x0, "n", 0x0, "d", 0x0, "e"
	DCB	0x0, "x", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " "
	DCB	0x0, "M", 0x0, "a", 0x0, "p", 0x0, "p", 0x0, "e", 0x0, "d"
	DCB	0x0, "E", 0x0, "P", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, " "
	DCB	0x0, "D", 0x0, "e", 0x0, "v", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, ",", 0x0, " ", 0x0, "T", 0x0, "o", 0x0, "g", 0x0, "g"
	DCB	0x0, "l", 0x0, "e", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1MO@KNEDNIIL@?$AA?$FL?$AAD?$AAa?$AAt?$AAa?$AAT?$AAo?$AAg?$AAg?$AAl?$AAe?$AA?$FN?$AA?3?$AA?5?$AAS?$AAe?$AAt?$AA?5?$AAE?$AAP?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$CI?$AAm?$AAa?$AAp?$AAp?$AAe?$AAd@| DCB "["
	DCB	0x0, "D", 0x0, "a", 0x0, "t", 0x0, "a", 0x0, "T", 0x0, "o"
	DCB	0x0, "g", 0x0, "g", 0x0, "l", 0x0, "e", 0x0, "]", 0x0, ":"
	DCB	0x0, " ", 0x0, "S", 0x0, "e", 0x0, "t", 0x0, " ", 0x0, "E"
	DCB	0x0, "P", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x"
	DCB	0x0, "(", 0x0, "m", 0x0, "a", 0x0, "p", 0x0, "p", 0x0, "e"
	DCB	0x0, "d", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x"
	DCB	0x0, ")", 0x0, " ", 0x0, "D", 0x0, "e", 0x0, "v", 0x0, "i"
	DCB	0x0, "c", 0x0, "e", 0x0, "A", 0x0, "d", 0x0, "d", 0x0, "r"
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, " "
	DCB	0x0, "S", 0x0, "u", 0x0, "g", 0x0, "g", 0x0, "e", 0x0, "s"
	DCB	0x0, "t", 0x0, " ", 0x0, "D", 0x0, "a", 0x0, "t", 0x0, "a"
	DCB	0x0, "T", 0x0, "o", 0x0, "g", 0x0, "g", 0x0, "l", 0x0, "e"
	DCB	0x0, "=", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "A"
	DCB	0x0, "c", 0x0, "t", 0x0, "u", 0x0, "a", 0x0, "l", 0x0, " "
	DCB	0x0, "D", 0x0, "a", 0x0, "t", 0x0, "a", 0x0, "T", 0x0, "o"
	DCB	0x0, "g", 0x0, "g", 0x0, "l", 0x0, "e", 0x0, "=", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KA@NGIJGLJ@?$AA?$FL?$AAD?$AAa?$AAt?$AAa?$AAT?$AAo?$AAg?$AAg?$AAl?$AAe?$AA?$FN?$AA?3?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?3?$AAI?$AAN?$AA?5?$AAT?$AAr?$AAa?$AAn?$AAs?$AAa?$AAc?$AAt@| DCB "["
	DCB	0x0, "D", 0x0, "a", 0x0, "t", 0x0, "a", 0x0, "T", 0x0, "o"
	DCB	0x0, "g", 0x0, "g", 0x0, "l", 0x0, "e", 0x0, "]", 0x0, ":"
	DCB	0x0, "R", 0x0, "e", 0x0, "q", 0x0, "u", 0x0, "e", 0x0, "s"
	DCB	0x0, "t", 0x0, ":", 0x0, "I", 0x0, "N", 0x0, " ", 0x0, "T"
	DCB	0x0, "r", 0x0, "a", 0x0, "n", 0x0, "s", 0x0, "a", 0x0, "c"
	DCB	0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, " ", 0x0, "o"
	DCB	0x0, "n", 0x0, " ", 0x0, "E", 0x0, "P", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, " ", 0x0, "D", 0x0, "e", 0x0, "v", 0x0, "i"
	DCB	0x0, "c", 0x0, "e", 0x0, " ", 0x0, "A", 0x0, "d", 0x0, "d"
	DCB	0x0, "r", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, "D"
	DCB	0x0, "a", 0x0, "t", 0x0, "a", 0x0, "T", 0x0, "o", 0x0, "g"
	DCB	0x0, "g", 0x0, "l", 0x0, "e", 0x0, " ", 0x0, "=", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KI@FPCMPAKP@?$AA?$FL?$AAD?$AAa?$AAt?$AAa?$AAT?$AAo?$AAg?$AAg?$AAl?$AAe?$AA?$FN?$AA?3?$AA?5?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?3?$AAD?$AAa?$AAt?$AAa?$AA?5?$AAI?$AAN?$AA?5?$AAT?$AAr@| DCB "["
	DCB	0x0, "D", 0x0, "a", 0x0, "t", 0x0, "a", 0x0, "T", 0x0, "o"
	DCB	0x0, "g", 0x0, "g", 0x0, "l", 0x0, "e", 0x0, "]", 0x0, ":"
	DCB	0x0, " ", 0x0, "R", 0x0, "e", 0x0, "q", 0x0, "u", 0x0, "e"
	DCB	0x0, "s", 0x0, "t", 0x0, ":", 0x0, "D", 0x0, "a", 0x0, "t"
	DCB	0x0, "a", 0x0, " ", 0x0, "I", 0x0, "N", 0x0, " ", 0x0, "T"
	DCB	0x0, "r", 0x0, "a", 0x0, "s", 0x0, "a", 0x0, "c", 0x0, "t"
	DCB	0x0, "i", 0x0, "o", 0x0, "n", 0x0, " ", 0x0, "o", 0x0, "n"
	DCB	0x0, " ", 0x0, "E", 0x0, "P", 0x0, " ", 0x0, "0", 0x0, " "
	DCB	0x0, "D", 0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e"
	DCB	0x0, " ", 0x0, "A", 0x0, "d", 0x0, "d", 0x0, "r", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, " ", 0x0, "D", 0x0, "a", 0x0, "t"
	DCB	0x0, "a", 0x0, "T", 0x0, "o", 0x0, "g", 0x0, "g", 0x0, "l"
	DCB	0x0, "e", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EM@CHCHNIDI@?$AAN?$AAo?$AA?5?$AAd?$AAa?$AAt?$AAa?$AA?5?$AAa?$AAv?$AAa?$AAi?$AAl?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAw?$AAi?$AAt?$AAh?$AA?5?$AAR?$AAx?$AAC?$AAS?$AAR?$AA?5?$AA?$DN?$AA?5?$AA0@| DCB "N"
	DCB	0x0, "o", 0x0, " ", 0x0, "d", 0x0, "a", 0x0, "t", 0x0, "a"
	DCB	0x0, " ", 0x0, "a", 0x0, "v", 0x0, "a", 0x0, "i", 0x0, "l"
	DCB	0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, " ", 0x0, "w"
	DCB	0x0, "i", 0x0, "t", 0x0, "h", 0x0, " ", 0x0, "R", 0x0, "x"
	DCB	0x0, "C", 0x0, "S", 0x0, "R", 0x0, " ", 0x0, "=", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JI@GNAAFJLD@?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?5?$AAI?$AAN?$AA?5?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAE?$AAP?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AAD@| DCB "R"
	DCB	0x0, "e", 0x0, "q", 0x0, "u", 0x0, "e", 0x0, "s", 0x0, "t"
	DCB	0x0, " ", 0x0, "I", 0x0, "N", 0x0, " ", 0x0, "T", 0x0, "r"
	DCB	0x0, "a", 0x0, "n", 0x0, "s", 0x0, "f", 0x0, "e", 0x0, "r"
	DCB	0x0, " ", 0x0, "f", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "E"
	DCB	0x0, "P", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " "
	DCB	0x0, "D", 0x0, "e", 0x0, "v", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, " ", 0x0, "s", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "P", 0x0, "i"
	DCB	0x0, "p", 0x0, "e", 0x0, "M", 0x0, "a", 0x0, "p", 0x0, "p"
	DCB	0x0, "e", 0x0, "d", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ","
	DCB	0x0, " ", 0x0, "R", 0x0, "x", 0x0, "C", 0x0, "S", 0x0, "R"
	DCB	0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FE@GGAEHKGN@?$AAS?$AAe?$AAt?$AAu?$AAp?$AA?5?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?5?$AAr?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAe?$AAd?$AA?5?$AAw?$AAi?$AAt?$AAh?$AA?5?$AAC?$AAS?$AAR?$AA0@| DCB "S"
	DCB	0x0, "e", 0x0, "t", 0x0, "u", 0x0, "p", 0x0, " ", 0x0, "P"
	DCB	0x0, "a", 0x0, "c", 0x0, "k", 0x0, "e", 0x0, "t", 0x0, " "
	DCB	0x0, "r", 0x0, "e", 0x0, "q", 0x0, "u", 0x0, "e", 0x0, "s"
	DCB	0x0, "t", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "w", 0x0, "i"
	DCB	0x0, "t", 0x0, "h", 0x0, " ", 0x0, "C", 0x0, "S", 0x0, "R"
	DCB	0x0, "0", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KK@JIIGGFAO@?$AA?$FL?$AAD?$AAa?$AAt?$AAa?$AAT?$AAo?$AAg?$AAg?$AAl?$AAe?$AA?$FN?$AA?3?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?3?$AAS?$AAe?$AAt?$AAu?$AAp?$AA?5?$AAO?$AAU?$AAT?$AA?5?$AAT@| DCB "["
	DCB	0x0, "D", 0x0, "a", 0x0, "t", 0x0, "a", 0x0, "T", 0x0, "o"
	DCB	0x0, "g", 0x0, "g", 0x0, "l", 0x0, "e", 0x0, "]", 0x0, ":"
	DCB	0x0, "R", 0x0, "e", 0x0, "q", 0x0, "u", 0x0, "e", 0x0, "s"
	DCB	0x0, "t", 0x0, ":", 0x0, "S", 0x0, "e", 0x0, "t", 0x0, "u"
	DCB	0x0, "p", 0x0, " ", 0x0, "O", 0x0, "U", 0x0, "T", 0x0, " "
	DCB	0x0, "T", 0x0, "r", 0x0, "a", 0x0, "s", 0x0, "a", 0x0, "c"
	DCB	0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, " ", 0x0, "o"
	DCB	0x0, "n", 0x0, " ", 0x0, "E", 0x0, "P", 0x0, " ", 0x0, "0"
	DCB	0x0, " ", 0x0, "D", 0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c"
	DCB	0x0, "e", 0x0, " ", 0x0, "A", 0x0, "d", 0x0, "d", 0x0, "r"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, "D", 0x0, "a"
	DCB	0x0, "t", 0x0, "a", 0x0, "T", 0x0, "o", 0x0, "g", 0x0, "g"
	DCB	0x0, "l", 0x0, "e", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HC@DMLGCNLE@?$AAW?$AAa?$AAr?$AAn?$AAi?$AAn?$AAg?$AA?$CB?$AA?$CB?$AA?5?$AAS?$AAe?$AAt?$AAu?$AAp?$AA?5?$AAD?$AAa?$AAt?$AAa?$AA?5?$AAi?$AAs?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AA8?$AA?5?$AAb?$AAy@| DCB "W"
	DCB	0x0, "a", 0x0, "r", 0x0, "n", 0x0, "i", 0x0, "n", 0x0, "g"
	DCB	0x0, "!", 0x0, "!", 0x0, " ", 0x0, "S", 0x0, "e", 0x0, "t"
	DCB	0x0, "u", 0x0, "p", 0x0, " ", 0x0, "D", 0x0, "a", 0x0, "t"
	DCB	0x0, "a", 0x0, " ", 0x0, "i", 0x0, "s", 0x0, " ", 0x0, "n"
	DCB	0x0, "o", 0x0, "t", 0x0, " ", 0x0, "8", 0x0, " ", 0x0, "b"
	DCB	0x0, "y", 0x0, "t", 0x0, "e", 0x0, "s", 0x0, ",", 0x0, " "
	DCB	0x0, "i", 0x0, "t", 0x0, " ", 0x0, "i", 0x0, "s", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, " ", 0x0, "b", 0x0, "y", 0x0, "t"
	DCB	0x0, "e", 0x0, "s", 0x0, "!", 0x0, "!", 0x0, "!", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EK@IEBKKGBL@?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?5?$AAP?$AAi?$AAp?$AAe?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAe?$AAp?$AA?5?$AA?$CF?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAu?$AAp?$AAp?$AAo@| DCB "C"
	DCB	0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o", 0x0, "l"
	DCB	0x0, " ", 0x0, "P", 0x0, "i", 0x0, "p", 0x0, "e", 0x0, " "
	DCB	0x0, "f", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "e", 0x0, "p"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, "n", 0x0, "o"
	DCB	0x0, "t", 0x0, " ", 0x0, "s", 0x0, "u", 0x0, "p", 0x0, "p"
	DCB	0x0, "o", 0x0, "r", 0x0, "t", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Odtp

  091d0			 AREA	 |.text|, CODE, ARM

  091d0		 |?ProcessTD@CHW@@UAAHEPAX@Z| PROC	; CHW::ProcessTD

; 2832 : {

  091d0		 |$LN121@ProcessTD|
  091d0	e1a0c00d	 mov         r12, sp
  091d4	e92d0007	 stmdb       sp!, {r0 - r2}
  091d8	e92d5010	 stmdb       sp!, {r4, r12, lr}
  091dc	e24ddf7d	 sub         sp, sp, #0x7D, 30
  091e0		 |$M45768|

; 2833 :     CQTD *pQTD = (CQTD *)pData;

  091e0	e59d3208	 ldr         r3, [sp, #0x208]
  091e4	e58d3018	 str         r3, [sp, #0x18]

; 2834 :     CPipe *pPipe = pQTD->GetQH()->GetPipe();        

  091e8	e59d0018	 ldr         r0, [sp, #0x18]
  091ec	eb000000	 bl          |?GetQH@CQTD@@QAAPAVCQH@@XZ|
  091f0	e58d00c4	 str         r0, [sp, #0xC4]
  091f4	e59d00c4	 ldr         r0, [sp, #0xC4]
  091f8	eb000000	 bl          |?GetPipe@CQH@@QAAPAVCPipe@@XZ|
  091fc	e58d00c8	 str         r0, [sp, #0xC8]
  09200	e59d30c8	 ldr         r3, [sp, #0xC8]
  09204	e58d3014	 str         r3, [sp, #0x14]

; 2835 :     PHSMUSB_T pOTG;
; 2836 :     DWORD dwType;
; 2837 :     BOOL    bResult = FALSE;

  09208	e3a03000	 mov         r3, #0
  0920c	e58d3024	 str         r3, [sp, #0x24]

; 2838 :     UCHAR   csrIndex;
; 2839 :     
; 2840 :     pOTG = (PHSMUSB_T)GetOTGContext();

  09210	e59d0200	 ldr         r0, [sp, #0x200]
  09214	eb000000	 bl          |?GetOTGContext@CHcd@@QAAPAXXZ|
  09218	e58d00cc	 str         r0, [sp, #0xCC]
  0921c	e59d30cc	 ldr         r3, [sp, #0xCC]
  09220	e58d3020	 str         r3, [sp, #0x20]

; 2841 :     if (pOTG == NULL)

  09224	e59d3020	 ldr         r3, [sp, #0x20]
  09228	e3530000	 cmp         r3, #0
  0922c	1a00000f	 bne         |$LN45@ProcessTD|

; 2842 :     {
; 2843 :         DEBUGMSG(ZONE_ERROR, (TEXT("Failed to read the FIFO for ep %d\r\n"), endpoint));

  09230	e59f3c38	 ldr         r3, [pc, #0xC38]
  09234	e5933440	 ldr         r3, [r3, #0x440]
  09238	e3130901	 tst         r3, #1, 18
  0923c	0a000006	 beq         |$LN48@ProcessTD|
  09240	e5dd3204	 ldrb        r3, [sp, #0x204]
  09244	e1a01003	 mov         r1, r3
  09248	e59f0c4c	 ldr         r0, [pc, #0xC4C]
  0924c	eb000000	 bl          NKDbgPrintfW
  09250	e3a03001	 mov         r3, #1
  09254	e58d30d0	 str         r3, [sp, #0xD0]
  09258	ea000001	 b           |$LN49@ProcessTD|
  0925c		 |$LN48@ProcessTD|
  0925c	e3a03000	 mov         r3, #0
  09260	e58d30d0	 str         r3, [sp, #0xD0]
  09264		 |$LN49@ProcessTD|

; 2844 :         return bResult;

  09264	e59d3024	 ldr         r3, [sp, #0x24]
  09268	e58d3084	 str         r3, [sp, #0x84]
  0926c	ea00071b	 b           |$LN46@ProcessTD|
  09270		 |$LN45@ProcessTD|

; 2845 :     }
; 2846 : 
; 2847 :     dwType = pQTD->GetTDType();

  09270	e59d0018	 ldr         r0, [sp, #0x18]
  09274	eb000000	 bl          |?GetTDType@CQTD@@QAAKXZ|
  09278	e58d00d4	 str         r0, [sp, #0xD4]
  0927c	e59d30d4	 ldr         r3, [sp, #0xD4]
  09280	e58d3010	 str         r3, [sp, #0x10]

; 2848 :         
; 2849 :     
; 2850 :     switch(dwType) 

  09284	e59d3010	 ldr         r3, [sp, #0x10]
  09288	e58d30d8	 str         r3, [sp, #0xD8]
  0928c	e59d30d8	 ldr         r3, [sp, #0xD8]
  09290	e2433001	 sub         r3, r3, #1
  09294	e58d30d8	 str         r3, [sp, #0xD8]
  09298	e59d30d8	 ldr         r3, [sp, #0xD8]
  0929c	e3530004	 cmp         r3, #4
  092a0	8a00070c	 bhi         |$LN1@ProcessTD|
  092a4	e59d20d8	 ldr         r2, [sp, #0xD8]
  092a8	e1a03102	 mov         r3, r2, lsl #2
  092ac	e083300f	 add         r3, r3, pc
  092b0	e5933004	 ldr         r3, [r3, #4]
  092b4	e08ff003	 add         pc, pc, r3
  092b8		 |$LN113@ProcessTD|
  092b8		 |$LN112@ProcessTD|
  092b8		 |$LN114@ProcessTD|
  092b8	00000010	 DCD         0x10
  092bc		 |$LN115@ProcessTD|
  092bc	0000039c	 DCD         0x39c
  092c0		 |$LN116@ProcessTD|
  092c0	00000e14	 DCD         0xe14
  092c4		 |$LN117@ProcessTD|
  092c4	000019ac	 DCD         0x19ac
  092c8		 |$LN118@ProcessTD|
  092c8	00000b4c	 DCD         0xb4c
  092cc		 |$LN42@ProcessTD|

; 2851 :     {
; 2852 :     case (TD_SETUP):
; 2853 :         if (endpoint != 0) 

  092cc	e5dd3204	 ldrb        r3, [sp, #0x204]
  092d0	e3530000	 cmp         r3, #0
  092d4	0a00000f	 beq         |$LN41@ProcessTD|

; 2854 :         {
; 2855 :             DEBUGMSG(ZONE_ERROR, (TEXT("Control Pipe for ep %d not support\r\n"), endpoint));

  092d8	e59f3b90	 ldr         r3, [pc, #0xB90]
  092dc	e5933440	 ldr         r3, [r3, #0x440]
  092e0	e3130901	 tst         r3, #1, 18
  092e4	0a000006	 beq         |$LN50@ProcessTD|
  092e8	e5dd3204	 ldrb        r3, [sp, #0x204]
  092ec	e1a01003	 mov         r1, r3
  092f0	e59f0b74	 ldr         r0, [pc, #0xB74]
  092f4	eb000000	 bl          NKDbgPrintfW
  092f8	e3a03001	 mov         r3, #1
  092fc	e58d30dc	 str         r3, [sp, #0xDC]
  09300	ea000001	 b           |$LN51@ProcessTD|
  09304		 |$LN50@ProcessTD|
  09304	e3a03000	 mov         r3, #0
  09308	e58d30dc	 str         r3, [sp, #0xDC]
  0930c		 |$LN51@ProcessTD|

; 2856 :             bResult = FALSE;

  0930c	e3a03000	 mov         r3, #0
  09310	e58d3024	 str         r3, [sp, #0x24]

; 2857 :         }
; 2858 :         else

  09314	ea0000ce	 b           |$LN40@ProcessTD|
  09318		 |$LN41@ProcessTD|

; 2859 :         {
; 2860 :                         
; 2861 :             // 1. Load 8 bytes of data into FIFO
; 2862 :             // 1.a. Get the virtual address of buffer and corresponding start address (must be 0)
; 2863 :             UCHAR *pvData = (UCHAR *)pQTD->GetVAData();

  09318	e59d0018	 ldr         r0, [sp, #0x18]
  0931c	eb000000	 bl          |?GetVAData@CQTD@@QAAKXZ|
  09320	e58d00e0	 str         r0, [sp, #0xE0]
  09324	e59d30e0	 ldr         r3, [sp, #0xE0]
  09328	e58d3030	 str         r3, [sp, #0x30]

; 2864 :             DWORD cbStart = pQTD->GetTotTfrSize();

  0932c	e59d0018	 ldr         r0, [sp, #0x18]
  09330	eb000000	 bl          |?GetTotTfrSize@CQTD@@QAAKXZ|
  09334	e58d00e4	 str         r0, [sp, #0xE4]
  09338	e59d30e4	 ldr         r3, [sp, #0xE4]
  0933c	e58d3028	 str         r3, [sp, #0x28]

; 2865 :             DWORD cbTemp = cbStart;

  09340	e59d3028	 ldr         r3, [sp, #0x28]
  09344	e58d302c	 str         r3, [sp, #0x2C]

; 2866 :             DWORD cbToTransfer = pQTD->GetDataSize() - cbStart;

  09348	e59d0018	 ldr         r0, [sp, #0x18]
  0934c	eb000000	 bl          |?GetDataSize@CQTD@@QAAKXZ|
  09350	e58d00e8	 str         r0, [sp, #0xE8]
  09354	e59d20e8	 ldr         r2, [sp, #0xE8]
  09358	e59d3028	 ldr         r3, [sp, #0x28]
  0935c	e0423003	 sub         r3, r2, r3
  09360	e58d3034	 str         r3, [sp, #0x34]

; 2867 : 
; 2868 :             // 1.b. Check the size, if not equal to 8 bytes, warning!!!
; 2869 :             if (cbToTransfer != 8)

  09364	e59d3034	 ldr         r3, [sp, #0x34]
  09368	e3530008	 cmp         r3, #8
  0936c	0a00000e	 beq         |$LN39@ProcessTD|

; 2870 :                 DEBUGMSG(ZONE_ERROR, (TEXT("Warning!! Setup Data is not 8 bytes, it is %d bytes!!!\r\n"), pQTD->GetDataSize()));

  09370	e59f3af8	 ldr         r3, [pc, #0xAF8]
  09374	e5933440	 ldr         r3, [r3, #0x440]
  09378	e3130901	 tst         r3, #1, 18
  0937c	0a000008	 beq         |$LN52@ProcessTD|
  09380	e59d0018	 ldr         r0, [sp, #0x18]
  09384	eb000000	 bl          |?GetDataSize@CQTD@@QAAKXZ|
  09388	e58d00ec	 str         r0, [sp, #0xEC]
  0938c	e59d10ec	 ldr         r1, [sp, #0xEC]
  09390	e59f0b00	 ldr         r0, [pc, #0xB00]
  09394	eb000000	 bl          NKDbgPrintfW
  09398	e3a03001	 mov         r3, #1
  0939c	e58d30f0	 str         r3, [sp, #0xF0]
  093a0	ea000001	 b           |$LN53@ProcessTD|
  093a4		 |$LN52@ProcessTD|
  093a4	e3a03000	 mov         r3, #0
  093a8	e58d30f0	 str         r3, [sp, #0xF0]
  093ac		 |$LN53@ProcessTD|
  093ac		 |$LN39@ProcessTD|

; 2871 :             
; 2872 :             // Set Index Register
; 2873 :             EnterCriticalSection(&pOTG->regCS);    

  093ac	e59d3020	 ldr         r3, [sp, #0x20]
  093b0	e2830038	 add         r0, r3, #0x38
  093b4	eb000000	 bl          EnterCriticalSection

; 2874 :             OUTREG8(&pOTG->pUsbGenRegs->Index, INDEX(endpoint));

  093b8	e5dd3204	 ldrb        r3, [sp, #0x204]
  093bc	e203300f	 and         r3, r3, #0xF
  093c0	e20320ff	 and         r2, r3, #0xFF
  093c4	e59d3020	 ldr         r3, [sp, #0x20]
  093c8	e2833020	 add         r3, r3, #0x20
  093cc	e5933000	 ldr         r3, [r3]
  093d0	e283300e	 add         r3, r3, #0xE
  093d4	e5c32000	 strb        r2, [r3]

; 2875 :             csrIndex = INDEX(endpoint);

  093d8	e5dd3204	 ldrb        r3, [sp, #0x204]
  093dc	e203300f	 and         r3, r3, #0xF
  093e0	e20330ff	 and         r3, r3, #0xFF
  093e4	e5cd301c	 strb        r3, [sp, #0x1C]

; 2876 :             
; 2877 :             memdump((UCHAR *)(pvData+cbTemp), 8, 0);
; 2878 :             // 1.c Now put 8 bytes data into FIFO for ep 0            
; 2879 :             WriteFIFO((void *)pOTG, 0, (DWORD *)(pvData+cbTemp), 8);                      

  093e8	e3a03008	 mov         r3, #8
  093ec	e58d3000	 str         r3, [sp]
  093f0	e59d2030	 ldr         r2, [sp, #0x30]
  093f4	e59d302c	 ldr         r3, [sp, #0x2C]
  093f8	e0823003	 add         r3, r2, r3
  093fc	e3a02000	 mov         r2, #0
  09400	e59d1020	 ldr         r1, [sp, #0x20]
  09404	e59d0200	 ldr         r0, [sp, #0x200]
  09408	e5900000	 ldr         r0, [r0]
  0940c	e280e058	 add         lr, r0, #0x58
  09410	e59d0200	 ldr         r0, [sp, #0x200]
  09414	e59e4000	 ldr         r4, [lr]
  09418	e1a0e00f	 mov         lr, pc
  0941c	e12fff14	 bx          r4

; 2880 : 
; 2881 :             // Set current tfr size
; 2882 :             pQTD->SetCurTfrSize(8);

  09420	e3a01008	 mov         r1, #8
  09424	e59d0018	 ldr         r0, [sp, #0x18]
  09428	eb000000	 bl          |?SetCurTfrSize@CQTD@@QAAXK@Z|

; 2883 : 
; 2884 :             // 1.d Clear anything before access - as it has some invalid IN transaction from analyzer
; 2885 :             CLRREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].CSR.CSR0, CSR0_H_RxPktRdy|CSR0_H_ReqPkt|CSR0_H_StatusPkt);

  0942c	e59d3020	 ldr         r3, [sp, #0x20]
  09430	e283001c	 add         r0, r3, #0x1C
  09434	e5dd301c	 ldrb        r3, [sp, #0x1C]
  09438	e1a01003	 mov         r1, r3
  0943c	e3a03010	 mov         r3, #0x10
  09440	e0020391	 mul         r2, r1, r3
  09444	e5903000	 ldr         r3, [r0]
  09448	e0833002	 add         r3, r3, r2
  0944c	e2831002	 add         r1, r3, #2
  09450	e5d13001	 ldrb        r3, [r1, #1]
  09454	e1a03403	 mov         r3, r3, lsl #8
  09458	e1a02803	 mov         r2, r3, lsl #16
  0945c	e1a02822	 mov         r2, r2, lsr #16
  09460	e5d13000	 ldrb        r3, [r1]
  09464	e1833002	 orr         r3, r3, r2
  09468	e1a02003	 mov         r2, r3
  0946c	e3e03061	 mvn         r3, #0x61
  09470	e0023003	 and         r3, r2, r3
  09474	e1a0e803	 mov         lr, r3, lsl #16
  09478	e1a0e82e	 mov         lr, lr, lsr #16
  0947c	e59d3020	 ldr         r3, [sp, #0x20]
  09480	e283001c	 add         r0, r3, #0x1C
  09484	e5dd301c	 ldrb        r3, [sp, #0x1C]
  09488	e1a01003	 mov         r1, r3
  0948c	e3a03010	 mov         r3, #0x10
  09490	e0020391	 mul         r2, r1, r3
  09494	e5903000	 ldr         r3, [r0]
  09498	e0833002	 add         r3, r3, r2
  0949c	e2832002	 add         r2, r3, #2
  094a0	e1a0300e	 mov         r3, lr
  094a4	e5c23000	 strb        r3, [r2]
  094a8	e1a03423	 mov         r3, r3, lsr #8
  094ac	e5c23001	 strb        r3, [r2, #1]

; 2886 : 
; 2887 : #ifdef DEBUG
; 2888 :             {
; 2889 :                 DWORD DataToggle = (INREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].CSR.CSR0) & CSR0_H_DataToggle);

  094b0	e59d3020	 ldr         r3, [sp, #0x20]
  094b4	e283001c	 add         r0, r3, #0x1C
  094b8	e5dd301c	 ldrb        r3, [sp, #0x1C]
  094bc	e1a01003	 mov         r1, r3
  094c0	e3a03010	 mov         r3, #0x10
  094c4	e0020391	 mul         r2, r1, r3
  094c8	e5903000	 ldr         r3, [r0]
  094cc	e0833002	 add         r3, r3, r2
  094d0	e2831002	 add         r1, r3, #2
  094d4	e5d13001	 ldrb        r3, [r1, #1]
  094d8	e1a03403	 mov         r3, r3, lsl #8
  094dc	e1a02803	 mov         r2, r3, lsl #16
  094e0	e1a02822	 mov         r2, r2, lsr #16
  094e4	e5d13000	 ldrb        r3, [r1]
  094e8	e1833002	 orr         r3, r3, r2
  094ec	e2033c02	 and         r3, r3, #2, 24
  094f0	e58d3038	 str         r3, [sp, #0x38]

; 2890 :                 DEBUGMSG(ZONE_HCD, (TEXT("[DataToggle]:Request:Setup OUT Trasaction on EP 0 Device Addr %d DataToggle = 0x%x\r\n"), 
; 2891 :                         pPipe->GetReservedDeviceAddr(), DataToggle));

  094f4	e59f3974	 ldr         r3, [pc, #0x974]
  094f8	e5933440	 ldr         r3, [r3, #0x440]
  094fc	e3130001	 tst         r3, #1
  09500	0a00000f	 beq         |$LN54@ProcessTD|
  09504	e59d3014	 ldr         r3, [sp, #0x14]
  09508	e5933000	 ldr         r3, [r3]
  0950c	e2833028	 add         r3, r3, #0x28
  09510	e59d0014	 ldr         r0, [sp, #0x14]
  09514	e5933000	 ldr         r3, [r3]
  09518	e1a0e00f	 mov         lr, pc
  0951c	e12fff13	 bx          r3
  09520	e5cd00f4	 strb        r0, [sp, #0xF4]
  09524	e59d2038	 ldr         r2, [sp, #0x38]
  09528	e5dd30f4	 ldrb        r3, [sp, #0xF4]
  0952c	e1a01003	 mov         r1, r3
  09530	e59f095c	 ldr         r0, [pc, #0x95C]
  09534	eb000000	 bl          NKDbgPrintfW
  09538	e3a03001	 mov         r3, #1
  0953c	e58d30f8	 str         r3, [sp, #0xF8]
  09540	ea000001	 b           |$LN55@ProcessTD|
  09544		 |$LN54@ProcessTD|
  09544	e3a03000	 mov         r3, #0
  09548	e58d30f8	 str         r3, [sp, #0xF8]
  0954c		 |$LN55@ProcessTD|

; 2892 :             }
; 2893 : #endif
; 2894 : 
; 2895 :             // 2. Set the SetupPkt & TxPtRdy bits
; 2896 :             DEBUGMSG(ZONE_HCD, (TEXT("Setup Packet requested with CSR0 = 0x%x\r\n"), 
; 2897 :                 INREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].CSR.CSR0)));

  0954c	e59f391c	 ldr         r3, [pc, #0x91C]
  09550	e5933440	 ldr         r3, [r3, #0x440]
  09554	e3130001	 tst         r3, #1
  09558	0a000014	 beq         |$LN56@ProcessTD|
  0955c	e59d3020	 ldr         r3, [sp, #0x20]
  09560	e283001c	 add         r0, r3, #0x1C
  09564	e5dd301c	 ldrb        r3, [sp, #0x1C]
  09568	e1a01003	 mov         r1, r3
  0956c	e3a03010	 mov         r3, #0x10
  09570	e0020391	 mul         r2, r1, r3
  09574	e5903000	 ldr         r3, [r0]
  09578	e0833002	 add         r3, r3, r2
  0957c	e2831002	 add         r1, r3, #2
  09580	e5d13001	 ldrb        r3, [r1, #1]
  09584	e1a03403	 mov         r3, r3, lsl #8
  09588	e1a02803	 mov         r2, r3, lsl #16
  0958c	e1a02822	 mov         r2, r2, lsr #16
  09590	e5d13000	 ldrb        r3, [r1]
  09594	e1833002	 orr         r3, r3, r2
  09598	e1a01003	 mov         r1, r3
  0959c	e59f08ec	 ldr         r0, [pc, #0x8EC]
  095a0	eb000000	 bl          NKDbgPrintfW
  095a4	e3a03001	 mov         r3, #1
  095a8	e58d30fc	 str         r3, [sp, #0xFC]
  095ac	ea000001	 b           |$LN57@ProcessTD|
  095b0		 |$LN56@ProcessTD|
  095b0	e3a03000	 mov         r3, #0
  095b4	e58d30fc	 str         r3, [sp, #0xFC]
  095b8		 |$LN57@ProcessTD|

; 2898 :             SETREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].CSR.CSR0, (CSR0_H_SetupPkt|CSR0_H_TxPktRdy));

  095b8	e59d3020	 ldr         r3, [sp, #0x20]
  095bc	e283001c	 add         r0, r3, #0x1C
  095c0	e5dd301c	 ldrb        r3, [sp, #0x1C]
  095c4	e1a01003	 mov         r1, r3
  095c8	e3a03010	 mov         r3, #0x10
  095cc	e0020391	 mul         r2, r1, r3
  095d0	e5903000	 ldr         r3, [r0]
  095d4	e0833002	 add         r3, r3, r2
  095d8	e2831002	 add         r1, r3, #2
  095dc	e5d13001	 ldrb        r3, [r1, #1]
  095e0	e1a03403	 mov         r3, r3, lsl #8
  095e4	e1a02803	 mov         r2, r3, lsl #16
  095e8	e1a02822	 mov         r2, r2, lsr #16
  095ec	e5d13000	 ldrb        r3, [r1]
  095f0	e1833002	 orr         r3, r3, r2
  095f4	e383300a	 orr         r3, r3, #0xA
  095f8	e1a0e803	 mov         lr, r3, lsl #16
  095fc	e1a0e82e	 mov         lr, lr, lsr #16
  09600	e59d3020	 ldr         r3, [sp, #0x20]
  09604	e283001c	 add         r0, r3, #0x1C
  09608	e5dd301c	 ldrb        r3, [sp, #0x1C]
  0960c	e1a01003	 mov         r1, r3
  09610	e3a03010	 mov         r3, #0x10
  09614	e0020391	 mul         r2, r1, r3
  09618	e5903000	 ldr         r3, [r0]
  0961c	e0833002	 add         r3, r3, r2
  09620	e2832002	 add         r2, r3, #2
  09624	e1a0300e	 mov         r3, lr
  09628	e5c23000	 strb        r3, [r2]
  0962c	e1a03423	 mov         r3, r3, lsr #8
  09630	e5c23001	 strb        r3, [r2, #1]

; 2899 : 
; 2900 :             // 3. Wait for transfer interrupt signal
; 2901 :             pQTD->SetStatus(STATUS_WAIT_RESPONSE);            

  09634	e3a01003	 mov         r1, #3
  09638	e59d0018	 ldr         r0, [sp, #0x18]
  0963c	eb000000	 bl          |?SetStatus@CQTD@@QAAXK@Z|

; 2902 :             bResult = TRUE;

  09640	e3a03001	 mov         r3, #1
  09644	e58d3024	 str         r3, [sp, #0x24]

; 2903 :             LeaveCriticalSection(&pOTG->regCS);

  09648	e59d3020	 ldr         r3, [sp, #0x20]
  0964c	e2830038	 add         r0, r3, #0x38
  09650	eb000000	 bl          LeaveCriticalSection
  09654		 |$LN40@ProcessTD|

; 2904 :         }
; 2905 :         break;         

  09654	ea00061f	 b           |$LN43@ProcessTD|
  09658		 |$LN38@ProcessTD|

; 2906 : 
; 2907 :     case (TD_DATA_IN):
; 2908 :         {
; 2909 :             BOOL bRequestData = TRUE;

  09658	e3a03001	 mov         r3, #1
  0965c	e58d303c	 str         r3, [sp, #0x3C]

; 2910 : 
; 2911 :             DEBUGMSG(ZONE_HCD, (TEXT("Request IN Transfer for EP %d, Dev %d size %d, PipeMapped %d, RxCSR(0x%x)\r\n"),
; 2912 :                 INDEX(endpoint), pPipe->GetReservedDeviceAddr(), pQTD->GetDataSize() - pQTD->GetTotTfrSize(), USB_ENDPOINT(pPipe->GetMappedEndPoint()),
; 2913 :                 INREG16(&pOTG->pUsbCsrRegs->ep[INDEX(endpoint)].RxCSR)));

  09660	e59f3808	 ldr         r3, [pc, #0x808]
  09664	e5933440	 ldr         r3, [r3, #0x440]
  09668	e3130001	 tst         r3, #1
  0966c	0a00002e	 beq         |$LN58@ProcessTD|
  09670	e59d0014	 ldr         r0, [sp, #0x14]
  09674	eb000000	 bl          |?GetMappedEndPoint@CPipe@@QAAEXZ|
  09678	e5cd0100	 strb        r0, [sp, #0x100]
  0967c	e59d0018	 ldr         r0, [sp, #0x18]
  09680	eb000000	 bl          |?GetDataSize@CQTD@@QAAKXZ|
  09684	e58d0104	 str         r0, [sp, #0x104]
  09688	e59d0018	 ldr         r0, [sp, #0x18]
  0968c	eb000000	 bl          |?GetTotTfrSize@CQTD@@QAAKXZ|
  09690	e58d0108	 str         r0, [sp, #0x108]
  09694	e59d3014	 ldr         r3, [sp, #0x14]
  09698	e5933000	 ldr         r3, [r3]
  0969c	e2833028	 add         r3, r3, #0x28
  096a0	e59d0014	 ldr         r0, [sp, #0x14]
  096a4	e5933000	 ldr         r3, [r3]
  096a8	e1a0e00f	 mov         lr, pc
  096ac	e12fff13	 bx          r3
  096b0	e5cd010c	 strb        r0, [sp, #0x10C]
  096b4	e59d3020	 ldr         r3, [sp, #0x20]
  096b8	e283001c	 add         r0, r3, #0x1C
  096bc	e5dd3204	 ldrb        r3, [sp, #0x204]
  096c0	e203100f	 and         r1, r3, #0xF
  096c4	e3a03010	 mov         r3, #0x10
  096c8	e0020391	 mul         r2, r1, r3
  096cc	e5903000	 ldr         r3, [r0]
  096d0	e0833002	 add         r3, r3, r2
  096d4	e2831006	 add         r1, r3, #6
  096d8	e5d13001	 ldrb        r3, [r1, #1]
  096dc	e1a03403	 mov         r3, r3, lsl #8
  096e0	e1a02803	 mov         r2, r3, lsl #16
  096e4	e1a02822	 mov         r2, r2, lsr #16
  096e8	e5d13000	 ldrb        r3, [r1]
  096ec	e1833002	 orr         r3, r3, r2
  096f0	e58d3004	 str         r3, [sp, #4]
  096f4	e5dd3100	 ldrb        r3, [sp, #0x100]
  096f8	e203300f	 and         r3, r3, #0xF
  096fc	e58d3000	 str         r3, [sp]
  09700	e59d2104	 ldr         r2, [sp, #0x104]
  09704	e59d3108	 ldr         r3, [sp, #0x108]
  09708	e0423003	 sub         r3, r2, r3
  0970c	e5dd210c	 ldrb        r2, [sp, #0x10C]
  09710	e5dd1204	 ldrb        r1, [sp, #0x204]
  09714	e201100f	 and         r1, r1, #0xF
  09718	e59f076c	 ldr         r0, [pc, #0x76C]
  0971c	eb000000	 bl          NKDbgPrintfW
  09720	e3a03001	 mov         r3, #1
  09724	e58d3110	 str         r3, [sp, #0x110]
  09728	ea000001	 b           |$LN59@ProcessTD|
  0972c		 |$LN58@ProcessTD|
  0972c	e3a03000	 mov         r3, #0
  09730	e58d3110	 str         r3, [sp, #0x110]
  09734		 |$LN59@ProcessTD|

; 2914 : 
; 2915 :             // Check if there is any data already available
; 2916 :             if (GetRxDataAvail(USB_ENDPOINT(endpoint)))

  09734	e5dd3204	 ldrb        r3, [sp, #0x204]
  09738	e203300f	 and         r3, r3, #0xF
  0973c	e20310ff	 and         r1, r3, #0xFF
  09740	e59d0200	 ldr         r0, [sp, #0x200]
  09744	eb000000	 bl          |?GetRxDataAvail@CHW@@QAAHE@Z|
  09748	e58d0114	 str         r0, [sp, #0x114]
  0974c	e59d3114	 ldr         r3, [sp, #0x114]
  09750	e3530000	 cmp         r3, #0
  09754	0a000065	 beq         |$LN37@ProcessTD|

; 2917 :             {
; 2918 :                 pQTD->SetStatus(STATUS_WAIT_RESPONSE);            

  09758	e3a01003	 mov         r1, #3
  0975c	e59d0018	 ldr         r0, [sp, #0x18]
  09760	eb000000	 bl          |?SetStatus@CQTD@@QAAXK@Z|

; 2919 :                 // Set Index Register
; 2920 :                 EnterCriticalSection(&pOTG->regCS);    

  09764	e59d3020	 ldr         r3, [sp, #0x20]
  09768	e2830038	 add         r0, r3, #0x38
  0976c	eb000000	 bl          EnterCriticalSection

; 2921 :                 OUTREG8(&pOTG->pUsbGenRegs->Index, INDEX(endpoint));

  09770	e5dd3204	 ldrb        r3, [sp, #0x204]
  09774	e203300f	 and         r3, r3, #0xF
  09778	e20320ff	 and         r2, r3, #0xFF
  0977c	e59d3020	 ldr         r3, [sp, #0x20]
  09780	e2833020	 add         r3, r3, #0x20
  09784	e5933000	 ldr         r3, [r3]
  09788	e283300e	 add         r3, r3, #0xE
  0978c	e5c32000	 strb        r2, [r3]

; 2922 :                 csrIndex = INDEX(endpoint);

  09790	e5dd3204	 ldrb        r3, [sp, #0x204]
  09794	e203300f	 and         r3, r3, #0xF
  09798	e20330ff	 and         r3, r3, #0xFF
  0979c	e5cd301c	 strb        r3, [sp, #0x1C]

; 2923 : 
; 2924 :                 //Check if RxCount
; 2925 :                 DWORD dwTotal = INREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].Count.RxCount);

  097a0	e59d3020	 ldr         r3, [sp, #0x20]
  097a4	e283001c	 add         r0, r3, #0x1C
  097a8	e5dd301c	 ldrb        r3, [sp, #0x1C]
  097ac	e1a01003	 mov         r1, r3
  097b0	e3a03010	 mov         r3, #0x10
  097b4	e0020391	 mul         r2, r1, r3
  097b8	e5903000	 ldr         r3, [r0]
  097bc	e0833002	 add         r3, r3, r2
  097c0	e2831008	 add         r1, r3, #8
  097c4	e5d13001	 ldrb        r3, [r1, #1]
  097c8	e1a03403	 mov         r3, r3, lsl #8
  097cc	e1a02803	 mov         r2, r3, lsl #16
  097d0	e1a02822	 mov         r2, r2, lsr #16
  097d4	e5d13000	 ldrb        r3, [r1]
  097d8	e1833002	 orr         r3, r3, r2
  097dc	e58d3040	 str         r3, [sp, #0x40]

; 2926 :                 // We check the RxCount if it is smaller than data size since i found it sometimes,
; 2927 :                 // it gives weird values.
; 2928 :                 //RETAILMSG(1, (TEXT("ProcessTD:DataIN: RxDataAvail =%d, Count = %d, RxCSR = 0x%x\r\n"),
; 2929 :                 //      GetRxDataAvail(USB_ENDPOINT(endpoint)),
; 2930 :                 //      dwTotal,
; 2931 :                 //      INREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].RxCSR)));
; 2932 : 
; 2933 :                 if (((dwTotal > 0) && (dwTotal <= pQTD->GetDataSize())) &&
; 2934 :                     (INREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].RxCSR) & RXCSR_H_RxPktRdy))

  097e0	e59d3040	 ldr         r3, [sp, #0x40]
  097e4	e3530000	 cmp         r3, #0
  097e8	9a000023	 bls         |$LN36@ProcessTD|
  097ec	e59d0018	 ldr         r0, [sp, #0x18]
  097f0	eb000000	 bl          |?GetDataSize@CQTD@@QAAKXZ|
  097f4	e58d0118	 str         r0, [sp, #0x118]
  097f8	e59d2040	 ldr         r2, [sp, #0x40]
  097fc	e59d3118	 ldr         r3, [sp, #0x118]
  09800	e1520003	 cmp         r2, r3
  09804	8a00001c	 bhi         |$LN36@ProcessTD|
  09808	e59d3020	 ldr         r3, [sp, #0x20]
  0980c	e283001c	 add         r0, r3, #0x1C
  09810	e5dd301c	 ldrb        r3, [sp, #0x1C]
  09814	e1a01003	 mov         r1, r3
  09818	e3a03010	 mov         r3, #0x10
  0981c	e0020391	 mul         r2, r1, r3
  09820	e5903000	 ldr         r3, [r0]
  09824	e0833002	 add         r3, r3, r2
  09828	e2831006	 add         r1, r3, #6
  0982c	e5d13001	 ldrb        r3, [r1, #1]
  09830	e1a03403	 mov         r3, r3, lsl #8
  09834	e1a02803	 mov         r2, r3, lsl #16
  09838	e1a02822	 mov         r2, r2, lsr #16
  0983c	e5d13000	 ldrb        r3, [r1]
  09840	e1833002	 orr         r3, r3, r2
  09844	e3130001	 tst         r3, #1
  09848	0a00000b	 beq         |$LN36@ProcessTD|

; 2935 :                 {   
; 2936 :                     bRequestData = FALSE;

  0984c	e3a03000	 mov         r3, #0
  09850	e58d303c	 str         r3, [sp, #0x3C]

; 2937 :                     ClrRxDataAvail(USB_ENDPOINT(endpoint));

  09854	e5dd3204	 ldrb        r3, [sp, #0x204]
  09858	e203300f	 and         r3, r3, #0xF
  0985c	e20310ff	 and         r1, r3, #0xFF
  09860	e59d0200	 ldr         r0, [sp, #0x200]
  09864	eb000000	 bl          |?ClrRxDataAvail@CHW@@QAAXE@Z|

; 2938 :                     Host_ProcessEPxRx((PVOID)pOTG, USB_ENDPOINT(endpoint));                    

  09868	e5dd3204	 ldrb        r3, [sp, #0x204]
  0986c	e203100f	 and         r1, r3, #0xF
  09870	e59d0020	 ldr         r0, [sp, #0x20]
  09874	eb000000	 bl          Host_ProcessEPxRx
  09878	ea000019	 b           |$LN35@ProcessTD|
  0987c		 |$LN36@ProcessTD|

; 2939 :                 }
; 2940 :                 else if (dwTotal == 0)

  0987c	e59d3040	 ldr         r3, [sp, #0x40]
  09880	e3530000	 cmp         r3, #0
  09884	1a000016	 bne         |$LN34@ProcessTD|

; 2941 :                 {
; 2942 :                     RETAILMSG(1, (TEXT("No data available with RxCSR = 0x%x\r\n"),
; 2943 :                         INREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].RxCSR)));

  09888	e59d3020	 ldr         r3, [sp, #0x20]
  0988c	e283001c	 add         r0, r3, #0x1C
  09890	e5dd301c	 ldrb        r3, [sp, #0x1C]
  09894	e1a01003	 mov         r1, r3
  09898	e3a03010	 mov         r3, #0x10
  0989c	e0020391	 mul         r2, r1, r3
  098a0	e5903000	 ldr         r3, [r0]
  098a4	e0833002	 add         r3, r3, r2
  098a8	e2831006	 add         r1, r3, #6
  098ac	e5d13001	 ldrb        r3, [r1, #1]
  098b0	e1a03403	 mov         r3, r3, lsl #8
  098b4	e1a02803	 mov         r2, r3, lsl #16
  098b8	e1a02822	 mov         r2, r2, lsr #16
  098bc	e5d13000	 ldrb        r3, [r1]
  098c0	e1833002	 orr         r3, r3, r2
  098c4	e1a01003	 mov         r1, r3
  098c8	e59f05b8	 ldr         r0, [pc, #0x5B8]
  098cc	eb000000	 bl          NKDbgPrintfW
  098d0	e3a03001	 mov         r3, #1
  098d4	e58d311c	 str         r3, [sp, #0x11C]
  098d8	ea000001	 b           |$LN61@ProcessTD|
  098dc	e3a03000	 mov         r3, #0
  098e0	e58d311c	 str         r3, [sp, #0x11C]
  098e4		 |$LN61@ProcessTD|
  098e4		 |$LN34@ProcessTD|
  098e4		 |$LN35@ProcessTD|

; 2944 :                     //Sleep(1);
; 2945 :                 }
; 2946 : 
; 2947 :                 LeaveCriticalSection(&pOTG->regCS);

  098e4	e59d3020	 ldr         r3, [sp, #0x20]
  098e8	e2830038	 add         r0, r3, #0x38
  098ec	eb000000	 bl          LeaveCriticalSection
  098f0		 |$LN37@ProcessTD|

; 2948 :             }
; 2949 :         
; 2950 :             if (bRequestData)

  098f0	e59d303c	 ldr         r3, [sp, #0x3C]
  098f4	e3530000	 cmp         r3, #0
  098f8	0a000141	 beq         |$LN33@ProcessTD|

; 2951 :             {
; 2952 :                 // Set Index Register
; 2953 :                 EnterCriticalSection(&pOTG->regCS);    

  098fc	e59d3020	 ldr         r3, [sp, #0x20]
  09900	e2830038	 add         r0, r3, #0x38
  09904	eb000000	 bl          EnterCriticalSection

; 2954 :                 OUTREG8(&pOTG->pUsbGenRegs->Index, INDEX(endpoint));

  09908	e5dd3204	 ldrb        r3, [sp, #0x204]
  0990c	e203300f	 and         r3, r3, #0xF
  09910	e20320ff	 and         r2, r3, #0xFF
  09914	e59d3020	 ldr         r3, [sp, #0x20]
  09918	e2833020	 add         r3, r3, #0x20
  0991c	e5933000	 ldr         r3, [r3]
  09920	e283300e	 add         r3, r3, #0xE
  09924	e5c32000	 strb        r2, [r3]

; 2955 :                 csrIndex = INDEX(endpoint);

  09928	e5dd3204	 ldrb        r3, [sp, #0x204]
  0992c	e203300f	 and         r3, r3, #0xF
  09930	e20330ff	 and         r3, r3, #0xFF
  09934	e5cd301c	 strb        r3, [sp, #0x1C]

; 2956 : 
; 2957 :                 if (USB_ENDPOINT(endpoint) == 0)

  09938	e5dd3204	 ldrb        r3, [sp, #0x204]
  0993c	e313000f	 tst         r3, #0xF
  09940	1a000067	 bne         |$LN32@ProcessTD|

; 2958 :                 {               
; 2959 : #ifdef DEBUG
; 2960 :                     DWORD DataToggle = (INREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].CSR.CSR0) & CSR0_H_DataToggle);

  09944	e59d3020	 ldr         r3, [sp, #0x20]
  09948	e283001c	 add         r0, r3, #0x1C
  0994c	e5dd301c	 ldrb        r3, [sp, #0x1C]
  09950	e1a01003	 mov         r1, r3
  09954	e3a03010	 mov         r3, #0x10
  09958	e0020391	 mul         r2, r1, r3
  0995c	e5903000	 ldr         r3, [r0]
  09960	e0833002	 add         r3, r3, r2
  09964	e2831002	 add         r1, r3, #2
  09968	e5d13001	 ldrb        r3, [r1, #1]
  0996c	e1a03403	 mov         r3, r3, lsl #8
  09970	e1a02803	 mov         r2, r3, lsl #16
  09974	e1a02822	 mov         r2, r2, lsr #16
  09978	e5d13000	 ldrb        r3, [r1]
  0997c	e1833002	 orr         r3, r3, r2
  09980	e2033c02	 and         r3, r3, #2, 24
  09984	e58d3044	 str         r3, [sp, #0x44]

; 2961 :                     DEBUGMSG(ZONE_HCD, (TEXT("[DataToggle]: Request:Data IN Trasaction on EP 0 Device Addr %d DataToggle = 0x%x\r\n"), 
; 2962 :                         pPipe->GetReservedDeviceAddr(), DataToggle));

  09988	e59f34e0	 ldr         r3, [pc, #0x4E0]
  0998c	e5933440	 ldr         r3, [r3, #0x440]
  09990	e3130001	 tst         r3, #1
  09994	0a00000f	 beq         |$LN62@ProcessTD|
  09998	e59d3014	 ldr         r3, [sp, #0x14]
  0999c	e5933000	 ldr         r3, [r3]
  099a0	e2833028	 add         r3, r3, #0x28
  099a4	e59d0014	 ldr         r0, [sp, #0x14]
  099a8	e5933000	 ldr         r3, [r3]
  099ac	e1a0e00f	 mov         lr, pc
  099b0	e12fff13	 bx          r3
  099b4	e5cd0120	 strb        r0, [sp, #0x120]
  099b8	e59d2044	 ldr         r2, [sp, #0x44]
  099bc	e5dd3120	 ldrb        r3, [sp, #0x120]
  099c0	e1a01003	 mov         r1, r3
  099c4	e59f04b8	 ldr         r0, [pc, #0x4B8]
  099c8	eb000000	 bl          NKDbgPrintfW
  099cc	e3a03001	 mov         r3, #1
  099d0	e58d3124	 str         r3, [sp, #0x124]
  099d4	ea000001	 b           |$LN63@ProcessTD|
  099d8		 |$LN62@ProcessTD|
  099d8	e3a03000	 mov         r3, #0
  099dc	e58d3124	 str         r3, [sp, #0x124]
  099e0		 |$LN63@ProcessTD|

; 2963 : #endif
; 2964 :                     // 0. Clear anything before access - as it has some invalid IN transaction from analyzer
; 2965 :                     CLRREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].CSR.CSR0, CSR0_H_RxPktRdy|CSR0_H_StatusPkt|CSR0_H_SetupPkt);

  099e0	e59d3020	 ldr         r3, [sp, #0x20]
  099e4	e283001c	 add         r0, r3, #0x1C
  099e8	e5dd301c	 ldrb        r3, [sp, #0x1C]
  099ec	e1a01003	 mov         r1, r3
  099f0	e3a03010	 mov         r3, #0x10
  099f4	e0020391	 mul         r2, r1, r3
  099f8	e5903000	 ldr         r3, [r0]
  099fc	e0833002	 add         r3, r3, r2
  09a00	e2831002	 add         r1, r3, #2
  09a04	e5d13001	 ldrb        r3, [r1, #1]
  09a08	e1a03403	 mov         r3, r3, lsl #8
  09a0c	e1a02803	 mov         r2, r3, lsl #16
  09a10	e1a02822	 mov         r2, r2, lsr #16
  09a14	e5d13000	 ldrb        r3, [r1]
  09a18	e1833002	 orr         r3, r3, r2
  09a1c	e1a02003	 mov         r2, r3
  09a20	e3e03049	 mvn         r3, #0x49
  09a24	e0023003	 and         r3, r2, r3
  09a28	e1a0e803	 mov         lr, r3, lsl #16
  09a2c	e1a0e82e	 mov         lr, lr, lsr #16
  09a30	e59d3020	 ldr         r3, [sp, #0x20]
  09a34	e283001c	 add         r0, r3, #0x1C
  09a38	e5dd301c	 ldrb        r3, [sp, #0x1C]
  09a3c	e1a01003	 mov         r1, r3
  09a40	e3a03010	 mov         r3, #0x10
  09a44	e0020391	 mul         r2, r1, r3
  09a48	e5903000	 ldr         r3, [r0]
  09a4c	e0833002	 add         r3, r3, r2
  09a50	e2832002	 add         r2, r3, #2
  09a54	e1a0300e	 mov         r3, lr
  09a58	e5c23000	 strb        r3, [r2]
  09a5c	e1a03423	 mov         r3, r3, lsr #8
  09a60	e5c23001	 strb        r3, [r2, #1]

; 2966 :                     // 1. Set ReqPkt (CSR0.D5) = 1
; 2967 :                     SETREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].CSR.CSR0, CSR0_H_ReqPkt);

  09a64	e59d3020	 ldr         r3, [sp, #0x20]
  09a68	e283001c	 add         r0, r3, #0x1C
  09a6c	e5dd301c	 ldrb        r3, [sp, #0x1C]
  09a70	e1a01003	 mov         r1, r3
  09a74	e3a03010	 mov         r3, #0x10
  09a78	e0020391	 mul         r2, r1, r3
  09a7c	e5903000	 ldr         r3, [r0]
  09a80	e0833002	 add         r3, r3, r2
  09a84	e2831002	 add         r1, r3, #2
  09a88	e5d13001	 ldrb        r3, [r1, #1]
  09a8c	e1a03403	 mov         r3, r3, lsl #8
  09a90	e1a02803	 mov         r2, r3, lsl #16
  09a94	e1a02822	 mov         r2, r2, lsr #16
  09a98	e5d13000	 ldrb        r3, [r1]
  09a9c	e1833002	 orr         r3, r3, r2
  09aa0	e3833020	 orr         r3, r3, #0x20
  09aa4	e1a0e803	 mov         lr, r3, lsl #16
  09aa8	e1a0e82e	 mov         lr, lr, lsr #16
  09aac	e59d3020	 ldr         r3, [sp, #0x20]
  09ab0	e283001c	 add         r0, r3, #0x1C
  09ab4	e5dd301c	 ldrb        r3, [sp, #0x1C]
  09ab8	e1a01003	 mov         r1, r3
  09abc	e3a03010	 mov         r3, #0x10
  09ac0	e0020391	 mul         r2, r1, r3
  09ac4	e5903000	 ldr         r3, [r0]
  09ac8	e0833002	 add         r3, r3, r2
  09acc	e2832002	 add         r2, r3, #2
  09ad0	e1a0300e	 mov         r3, lr
  09ad4	e5c23000	 strb        r3, [r2]
  09ad8	e1a03423	 mov         r3, r3, lsr #8
  09adc	e5c23001	 strb        r3, [r2, #1]

; 2968 :                     
; 2969 :                 }
; 2970 :                 else

  09ae0	ea0000c4	 b           |$LN31@ProcessTD|
  09ae4		 |$LN32@ProcessTD|

; 2971 :                 {
; 2972 :                     // 0. Clear any thing before access - as it has some invalid IN transcation from analyzer
; 2973 :                     //CLRREG16(&pOTG->pUsbGenRegs->INDEX_REG.hIndex.RxCSR, RXCSR_H_RxPktRdy);
; 2974 :                     //RETAILMSG(1, (TEXT("Force Toggle to see\r\n")));
; 2975 :                     //SETREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].RxCSR, RXCSR_H_DataTogWrEn|RXCSR_H_DataToggle);
; 2976 : #ifdef DEBUG
; 2977 : 					DWORD DataToggle = (INREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].RxCSR) & RXCSR_H_DataToggle);

  09ae4	e59d3020	 ldr         r3, [sp, #0x20]
  09ae8	e283001c	 add         r0, r3, #0x1C
  09aec	e5dd301c	 ldrb        r3, [sp, #0x1C]
  09af0	e1a01003	 mov         r1, r3
  09af4	e3a03010	 mov         r3, #0x10
  09af8	e0020391	 mul         r2, r1, r3
  09afc	e5903000	 ldr         r3, [r0]
  09b00	e0833002	 add         r3, r3, r2
  09b04	e2831006	 add         r1, r3, #6
  09b08	e5d13001	 ldrb        r3, [r1, #1]
  09b0c	e1a03403	 mov         r3, r3, lsl #8
  09b10	e1a02803	 mov         r2, r3, lsl #16
  09b14	e1a02822	 mov         r2, r2, lsr #16
  09b18	e5d13000	 ldrb        r3, [r1]
  09b1c	e1833002	 orr         r3, r3, r2
  09b20	e2033c02	 and         r3, r3, #2, 24
  09b24	e58d3050	 str         r3, [sp, #0x50]

; 2978 :                     DEBUGMSG(ZONE_HCD, (TEXT("[DataToggle]:Request:IN Transaction on EP %d Device Addr %d DataToggle = 0x%x\r\n"),
; 2979 :                         csrIndex, pPipe->GetReservedDeviceAddr(), DataToggle));

  09b28	e59f3340	 ldr         r3, [pc, #0x340]
  09b2c	e5933440	 ldr         r3, [r3, #0x440]
  09b30	e3130001	 tst         r3, #1
  09b34	0a00000f	 beq         |$LN64@ProcessTD|
  09b38	e59d3014	 ldr         r3, [sp, #0x14]
  09b3c	e5933000	 ldr         r3, [r3]
  09b40	e2833028	 add         r3, r3, #0x28
  09b44	e59d0014	 ldr         r0, [sp, #0x14]
  09b48	e5933000	 ldr         r3, [r3]
  09b4c	e1a0e00f	 mov         lr, pc
  09b50	e12fff13	 bx          r3
  09b54	e5cd0128	 strb        r0, [sp, #0x128]
  09b58	e59d3050	 ldr         r3, [sp, #0x50]
  09b5c	e5dd2128	 ldrb        r2, [sp, #0x128]
  09b60	e5dd101c	 ldrb        r1, [sp, #0x1C]
  09b64	e59f0314	 ldr         r0, [pc, #0x314]
  09b68	eb000000	 bl          NKDbgPrintfW
  09b6c	e3a03001	 mov         r3, #1
  09b70	e58d312c	 str         r3, [sp, #0x12C]
  09b74	ea000001	 b           |$LN65@ProcessTD|
  09b78		 |$LN64@ProcessTD|
  09b78	e3a03000	 mov         r3, #0
  09b7c	e58d312c	 str         r3, [sp, #0x12C]
  09b80		 |$LN65@ProcessTD|

; 2980 : 
; 2981 :                     USB_ENDPOINT_DESCRIPTOR endpt = pPipe->GetEndptDescriptor();

  09b80	e28d1048	 add         r1, sp, #0x48
  09b84	e59d0014	 ldr         r0, [sp, #0x14]
  09b88	eb000000	 bl          |?GetEndptDescriptor@CPipe@@QAA?AU_USB_ENDPOINT_DESCRIPTOR@@XZ|

; 2982 :                     DEBUGMSG(ZONE_HCD, (TEXT("[DataToggle]: Set EP 0x%x(mapped 0x%x) DeviceAddr 0x%x Suggest DataToggle=%d, Actual DataToggle=0x%x\r\n"),
; 2983 :                         endpt.bEndpointAddress, pPipe->GetMappedEndPoint(), pPipe->GetReservedDeviceAddr(), pPipe->GetDataToggle(), DataToggle));

  09b8c	e59f32dc	 ldr         r3, [pc, #0x2DC]
  09b90	e5933440	 ldr         r3, [r3, #0x440]
  09b94	e3130001	 tst         r3, #1
  09b98	0a000019	 beq         |$LN66@ProcessTD|
  09b9c	e59d0014	 ldr         r0, [sp, #0x14]
  09ba0	eb000000	 bl          |?GetDataToggle@CPipe@@QAAEXZ|
  09ba4	e5cd0130	 strb        r0, [sp, #0x130]
  09ba8	e59d3014	 ldr         r3, [sp, #0x14]
  09bac	e5933000	 ldr         r3, [r3]
  09bb0	e2833028	 add         r3, r3, #0x28
  09bb4	e59d0014	 ldr         r0, [sp, #0x14]
  09bb8	e5933000	 ldr         r3, [r3]
  09bbc	e1a0e00f	 mov         lr, pc
  09bc0	e12fff13	 bx          r3
  09bc4	e5cd0131	 strb        r0, [sp, #0x131]
  09bc8	e59d0014	 ldr         r0, [sp, #0x14]
  09bcc	eb000000	 bl          |?GetMappedEndPoint@CPipe@@QAAEXZ|
  09bd0	e5cd0132	 strb        r0, [sp, #0x132]
  09bd4	e59d3050	 ldr         r3, [sp, #0x50]
  09bd8	e58d3004	 str         r3, [sp, #4]
  09bdc	e5dd3130	 ldrb        r3, [sp, #0x130]
  09be0	e58d3000	 str         r3, [sp]
  09be4	e5dd3131	 ldrb        r3, [sp, #0x131]
  09be8	e5dd2132	 ldrb        r2, [sp, #0x132]
  09bec	e5dd104a	 ldrb        r1, [sp, #0x4A]
  09bf0	e59f0284	 ldr         r0, [pc, #0x284]
  09bf4	eb000000	 bl          NKDbgPrintfW
  09bf8	e3a03001	 mov         r3, #1
  09bfc	e58d3134	 str         r3, [sp, #0x134]
  09c00	ea000001	 b           |$LN67@ProcessTD|
  09c04		 |$LN66@ProcessTD|
  09c04	e3a03000	 mov         r3, #0
  09c08	e58d3134	 str         r3, [sp, #0x134]
  09c0c		 |$LN67@ProcessTD|

; 2984 : #endif
; 2985 :                
; 2986 :                     //Don't know why it doesn't work: Need to Fix that
; 2987 :                     UpdateDataToggle(pPipe, FALSE, TRUE);                    

  09c0c	e3a03001	 mov         r3, #1
  09c10	e3a02000	 mov         r2, #0
  09c14	e59d1014	 ldr         r1, [sp, #0x14]
  09c18	e59d0200	 ldr         r0, [sp, #0x200]
  09c1c	e5900000	 ldr         r0, [r0]
  09c20	e280e044	 add         lr, r0, #0x44
  09c24	e59d0200	 ldr         r0, [sp, #0x200]
  09c28	e59e4000	 ldr         r4, [lr]
  09c2c	e1a0e00f	 mov         lr, pc
  09c30	e12fff14	 bx          r4

; 2988 :                     //UpdateDataToggle(pPipe, FALSE, FALSE);                    
; 2989 :                     // 1. Set ReqPkt (CSR0.D5) = 1
; 2990 :                     DEBUGMSG(ZONE_TRANSFER, (TEXT("Request IN data for EP %d, index %d, MappedEP %d Dev %d, Toggle 0x%x\r\n"), USB_ENDPOINT(endpoint), csrIndex,
; 2991 :                              USB_ENDPOINT(pPipe->GetMappedEndPoint()), pPipe->GetReservedDeviceAddr(), 
; 2992 :                              INREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].RxCSR) & RXCSR_H_DataToggle));

  09c34	e59f3234	 ldr         r3, [pc, #0x234]
  09c38	e5933440	 ldr         r3, [r3, #0x440]
  09c3c	e3130c01	 tst         r3, #1, 24
  09c40	0a000027	 beq         |$LN68@ProcessTD|
  09c44	e59d3014	 ldr         r3, [sp, #0x14]
  09c48	e5933000	 ldr         r3, [r3]
  09c4c	e2833028	 add         r3, r3, #0x28
  09c50	e59d0014	 ldr         r0, [sp, #0x14]
  09c54	e5933000	 ldr         r3, [r3]
  09c58	e1a0e00f	 mov         lr, pc
  09c5c	e12fff13	 bx          r3
  09c60	e5cd0138	 strb        r0, [sp, #0x138]
  09c64	e59d0014	 ldr         r0, [sp, #0x14]
  09c68	eb000000	 bl          |?GetMappedEndPoint@CPipe@@QAAEXZ|
  09c6c	e5cd0139	 strb        r0, [sp, #0x139]
  09c70	e59d3020	 ldr         r3, [sp, #0x20]
  09c74	e283001c	 add         r0, r3, #0x1C
  09c78	e5dd301c	 ldrb        r3, [sp, #0x1C]
  09c7c	e1a01003	 mov         r1, r3
  09c80	e3a03010	 mov         r3, #0x10
  09c84	e0020391	 mul         r2, r1, r3
  09c88	e5903000	 ldr         r3, [r0]
  09c8c	e0833002	 add         r3, r3, r2
  09c90	e2831006	 add         r1, r3, #6
  09c94	e5d13001	 ldrb        r3, [r1, #1]
  09c98	e1a03403	 mov         r3, r3, lsl #8
  09c9c	e1a02803	 mov         r2, r3, lsl #16
  09ca0	e1a02822	 mov         r2, r2, lsr #16
  09ca4	e5d13000	 ldrb        r3, [r1]
  09ca8	e1833002	 orr         r3, r3, r2
  09cac	e2033c02	 and         r3, r3, #2, 24
  09cb0	e58d3004	 str         r3, [sp, #4]
  09cb4	e5dd3138	 ldrb        r3, [sp, #0x138]
  09cb8	e58d3000	 str         r3, [sp]
  09cbc	e5dd3139	 ldrb        r3, [sp, #0x139]
  09cc0	e203300f	 and         r3, r3, #0xF
  09cc4	e5dd201c	 ldrb        r2, [sp, #0x1C]
  09cc8	e5dd1204	 ldrb        r1, [sp, #0x204]
  09ccc	e201100f	 and         r1, r1, #0xF
  09cd0	e59f01a0	 ldr         r0, [pc, #0x1A0]
  09cd4	eb000000	 bl          NKDbgPrintfW
  09cd8	e3a03001	 mov         r3, #1
  09cdc	e58d313c	 str         r3, [sp, #0x13C]
  09ce0	ea000001	 b           |$LN69@ProcessTD|
  09ce4		 |$LN68@ProcessTD|
  09ce4	e3a03000	 mov         r3, #0
  09ce8	e58d313c	 str         r3, [sp, #0x13C]
  09cec		 |$LN69@ProcessTD|

; 2993 :                     CLRREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].RxCSR, RXCSR_H_RxPktRdy);

  09cec	e59d3020	 ldr         r3, [sp, #0x20]
  09cf0	e283001c	 add         r0, r3, #0x1C
  09cf4	e5dd301c	 ldrb        r3, [sp, #0x1C]
  09cf8	e1a01003	 mov         r1, r3
  09cfc	e3a03010	 mov         r3, #0x10
  09d00	e0020391	 mul         r2, r1, r3
  09d04	e5903000	 ldr         r3, [r0]
  09d08	e0833002	 add         r3, r3, r2
  09d0c	e2831006	 add         r1, r3, #6
  09d10	e5d13001	 ldrb        r3, [r1, #1]
  09d14	e1a03403	 mov         r3, r3, lsl #8
  09d18	e1a02803	 mov         r2, r3, lsl #16
  09d1c	e1a02822	 mov         r2, r2, lsr #16
  09d20	e5d13000	 ldrb        r3, [r1]
  09d24	e1833002	 orr         r3, r3, r2
  09d28	e1a02003	 mov         r2, r3
  09d2c	e3e03001	 mvn         r3, #1
  09d30	e0023003	 and         r3, r2, r3
  09d34	e1a0e803	 mov         lr, r3, lsl #16
  09d38	e1a0e82e	 mov         lr, lr, lsr #16
  09d3c	e59d3020	 ldr         r3, [sp, #0x20]
  09d40	e283001c	 add         r0, r3, #0x1C
  09d44	e5dd301c	 ldrb        r3, [sp, #0x1C]
  09d48	e1a01003	 mov         r1, r3
  09d4c	e3a03010	 mov         r3, #0x10
  09d50	e0020391	 mul         r2, r1, r3
  09d54	e5903000	 ldr         r3, [r0]
  09d58	e0833002	 add         r3, r3, r2
  09d5c	e2832006	 add         r2, r3, #6
  09d60	e1a0300e	 mov         r3, lr
  09d64	e5c23000	 strb        r3, [r2]
  09d68	e1a03423	 mov         r3, r3, lsr #8
  09d6c	e5c23001	 strb        r3, [r2, #1]

; 2994 :                     SETREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].RxCSR, RXCSR_H_ReqPkt);

  09d70	e59d3020	 ldr         r3, [sp, #0x20]
  09d74	e283001c	 add         r0, r3, #0x1C
  09d78	e5dd301c	 ldrb        r3, [sp, #0x1C]
  09d7c	e1a01003	 mov         r1, r3
  09d80	e3a03010	 mov         r3, #0x10
  09d84	e0020391	 mul         r2, r1, r3
  09d88	e5903000	 ldr         r3, [r0]
  09d8c	e0833002	 add         r3, r3, r2
  09d90	e2831006	 add         r1, r3, #6
  09d94	e5d13001	 ldrb        r3, [r1, #1]
  09d98	e1a03403	 mov         r3, r3, lsl #8
  09d9c	e1a02803	 mov         r2, r3, lsl #16
  09da0	e1a02822	 mov         r2, r2, lsr #16
  09da4	e5d13000	 ldrb        r3, [r1]
  09da8	e1833002	 orr         r3, r3, r2
  09dac	e3833020	 orr         r3, r3, #0x20
  09db0	e1a0e803	 mov         lr, r3, lsl #16
  09db4	e1a0e82e	 mov         lr, lr, lsr #16
  09db8	e59d3020	 ldr         r3, [sp, #0x20]
  09dbc	e283001c	 add         r0, r3, #0x1C
  09dc0	e5dd301c	 ldrb        r3, [sp, #0x1C]
  09dc4	e1a01003	 mov         r1, r3
  09dc8	e3a03010	 mov         r3, #0x10
  09dcc	e0020391	 mul         r2, r1, r3
  09dd0	e5903000	 ldr         r3, [r0]
  09dd4	e0833002	 add         r3, r3, r2
  09dd8	e2832006	 add         r2, r3, #6
  09ddc	e1a0300e	 mov         r3, lr
  09de0	e5c23000	 strb        r3, [r2]
  09de4	e1a03423	 mov         r3, r3, lsr #8
  09de8	e5c23001	 strb        r3, [r2, #1]

; 2995 :                     pQTD->SetStatus(STATUS_WAIT_RESPONSE);                                

  09dec	e3a01003	 mov         r1, #3
  09df0	e59d0018	 ldr         r0, [sp, #0x18]
  09df4	eb000000	 bl          |?SetStatus@CQTD@@QAAXK@Z|
  09df8		 |$LN31@ProcessTD|

; 2996 :                 }                
; 2997 :                 LeaveCriticalSection(&pOTG->regCS);

  09df8	e59d3020	 ldr         r3, [sp, #0x20]
  09dfc	e2830038	 add         r0, r3, #0x38
  09e00	eb000000	 bl          LeaveCriticalSection
  09e04		 |$LN33@ProcessTD|

; 2998 :             }
; 2999 :         }
; 3000 :         break;

  09e04	ea000433	 b           |$LN43@ProcessTD|
  09e08		 |$LN30@ProcessTD|

; 3001 :     case (TD_STATUS_OUT):
; 3002 :         DEBUGMSG(ZONE_HCD, (TEXT("Process TD_STATUS_OUT\r\n")));

  09e08	e59f3060	 ldr         r3, [pc, #0x60]
  09e0c	e5933440	 ldr         r3, [r3, #0x440]
  09e10	e3130001	 tst         r3, #1
  09e14	0a000004	 beq         |$LN70@ProcessTD|
  09e18	e59f0054	 ldr         r0, [pc, #0x54]
  09e1c	eb000000	 bl          NKDbgPrintfW
  09e20	e3a03001	 mov         r3, #1
  09e24	e58d3140	 str         r3, [sp, #0x140]
  09e28	ea000001	 b           |$LN71@ProcessTD|
  09e2c		 |$LN70@ProcessTD|
  09e2c	e3a03000	 mov         r3, #0
  09e30	e58d3140	 str         r3, [sp, #0x140]
  09e34		 |$LN71@ProcessTD|

; 3003 :         if (endpoint != 0) 

  09e34	e5dd3204	 ldrb        r3, [sp, #0x204]
  09e38	e3530000	 cmp         r3, #0
  09e3c	0a00001c	 beq         |$LN29@ProcessTD|

; 3004 :         {
; 3005 :             DEBUGMSG(ZONE_ERROR, (TEXT("Control Pipe for ep %d not support\r\n"), endpoint));

  09e40	e59f3028	 ldr         r3, [pc, #0x28]
  09e44	e5933440	 ldr         r3, [r3, #0x440]
  09e48	e3130901	 tst         r3, #1, 18
  09e4c	0a000013	 beq         |$LN72@ProcessTD|
  09e50	e5dd3204	 ldrb        r3, [sp, #0x204]
  09e54	e1a01003	 mov         r1, r3
  09e58	e59f000c	 ldr         r0, [pc, #0xC]
  09e5c	eb000000	 bl          NKDbgPrintfW
  09e60	e3a03001	 mov         r3, #1
  09e64	e58d3144	 str         r3, [sp, #0x144]
  09e68	ea00000e	 b           |$LN73@ProcessTD|
  09e6c		 |$LN140@ProcessTD|
  09e6c		 |$LN141@ProcessTD|
  09e6c	00000000	 DCD         |??_C@_1EK@IEBKKGBL@?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?5?$AAP?$AAi?$AAp?$AAe?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAe?$AAp?$AA?5?$AA?$CF?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAu?$AAp?$AAp?$AAo@|
  09e70		 |$LN142@ProcessTD|
  09e70	00000000	 DCD         |dpCurSettings|
  09e74		 |$LN143@ProcessTD|
  09e74	00000000	 DCD         |??_C@_1DA@NHEDHPKL@?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AA?5?$AAT?$AAD?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAO?$AAU?$AAT?$AA?$AN?$AA?6?$AA?$AA@|
  09e78		 |$LN144@ProcessTD|
  09e78	00000000	 DCD         |??_C@_1IO@EELFMDPD@?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?5?$AAI?$AAN?$AA?5?$AAd?$AAa?$AAt?$AAa?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAE?$AAP?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AAi?$AAn?$AAd?$AAe?$AAx@|
  09e7c		 |$LN145@ProcessTD|
  09e7c	00000000	 DCD         |??_C@_1MO@KNEDNIIL@?$AA?$FL?$AAD?$AAa?$AAt?$AAa?$AAT?$AAo?$AAg?$AAg?$AAl?$AAe?$AA?$FN?$AA?3?$AA?5?$AAS?$AAe?$AAt?$AA?5?$AAE?$AAP?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$CI?$AAm?$AAa?$AAp?$AAp?$AAe?$AAd@|
  09e80		 |$LN146@ProcessTD|
  09e80	00000000	 DCD         |??_C@_1KA@NGIJGLJ@?$AA?$FL?$AAD?$AAa?$AAt?$AAa?$AAT?$AAo?$AAg?$AAg?$AAl?$AAe?$AA?$FN?$AA?3?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?3?$AAI?$AAN?$AA?5?$AAT?$AAr?$AAa?$AAn?$AAs?$AAa?$AAc?$AAt@|
  09e84		 |$LN147@ProcessTD|
  09e84	00000000	 DCD         |??_C@_1KI@FPCMPAKP@?$AA?$FL?$AAD?$AAa?$AAt?$AAa?$AAT?$AAo?$AAg?$AAg?$AAl?$AAe?$AA?$FN?$AA?3?$AA?5?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?3?$AAD?$AAa?$AAt?$AAa?$AA?5?$AAI?$AAN?$AA?5?$AAT?$AAr@|
  09e88		 |$LN148@ProcessTD|
  09e88	00000000	 DCD         |??_C@_1EM@CHCHNIDI@?$AAN?$AAo?$AA?5?$AAd?$AAa?$AAt?$AAa?$AA?5?$AAa?$AAv?$AAa?$AAi?$AAl?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAw?$AAi?$AAt?$AAh?$AA?5?$AAR?$AAx?$AAC?$AAS?$AAR?$AA?5?$AA?$DN?$AA?5?$AA0@|
  09e8c		 |$LN149@ProcessTD|
  09e8c	00000000	 DCD         |??_C@_1JI@GNAAFJLD@?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?5?$AAI?$AAN?$AA?5?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAE?$AAP?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AAD@|
  09e90		 |$LN150@ProcessTD|
  09e90	00000000	 DCD         |??_C@_1FE@GGAEHKGN@?$AAS?$AAe?$AAt?$AAu?$AAp?$AA?5?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?5?$AAr?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAe?$AAd?$AA?5?$AAw?$AAi?$AAt?$AAh?$AA?5?$AAC?$AAS?$AAR?$AA0@|
  09e94		 |$LN151@ProcessTD|
  09e94	00000000	 DCD         |??_C@_1KK@JIIGGFAO@?$AA?$FL?$AAD?$AAa?$AAt?$AAa?$AAT?$AAo?$AAg?$AAg?$AAl?$AAe?$AA?$FN?$AA?3?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?3?$AAS?$AAe?$AAt?$AAu?$AAp?$AA?5?$AAO?$AAU?$AAT?$AA?5?$AAT@|
  09e98		 |$LN152@ProcessTD|
  09e98	00000000	 DCD         |??_C@_1HC@DMLGCNLE@?$AAW?$AAa?$AAr?$AAn?$AAi?$AAn?$AAg?$AA?$CB?$AA?$CB?$AA?5?$AAS?$AAe?$AAt?$AAu?$AAp?$AA?5?$AAD?$AAa?$AAt?$AAa?$AA?5?$AAi?$AAs?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AA8?$AA?5?$AAb?$AAy@|
  09e9c		 |$LN153@ProcessTD|
  09e9c	00000000	 DCD         |??_C@_1EI@KCPHDJG@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAF?$AAI?$AAF?$AAO?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAe?$AAp?$AA?5?$AA?$CF@|
  09ea0		 |$LN72@ProcessTD|
  09ea0	e3a03000	 mov         r3, #0
  09ea4	e58d3144	 str         r3, [sp, #0x144]
  09ea8		 |$LN73@ProcessTD|

; 3006 :             bResult = FALSE;

  09ea8	e3a03000	 mov         r3, #0
  09eac	e58d3024	 str         r3, [sp, #0x24]

; 3007 :         }
; 3008 :         else

  09eb0	ea000085	 b           |$LN28@ProcessTD|
  09eb4		 |$LN29@ProcessTD|

; 3009 :         {
; 3010 :             // Set Index Register
; 3011 :             EnterCriticalSection(&pOTG->regCS);    

  09eb4	e59d3020	 ldr         r3, [sp, #0x20]
  09eb8	e2830038	 add         r0, r3, #0x38
  09ebc	eb000000	 bl          EnterCriticalSection

; 3012 :             OUTREG8(&pOTG->pUsbGenRegs->Index, INDEX(endpoint));

  09ec0	e5dd3204	 ldrb        r3, [sp, #0x204]
  09ec4	e203300f	 and         r3, r3, #0xF
  09ec8	e20320ff	 and         r2, r3, #0xFF
  09ecc	e59d3020	 ldr         r3, [sp, #0x20]
  09ed0	e2833020	 add         r3, r3, #0x20
  09ed4	e5933000	 ldr         r3, [r3]
  09ed8	e283300e	 add         r3, r3, #0xE
  09edc	e5c32000	 strb        r2, [r3]

; 3013 :             csrIndex = INDEX(endpoint);

  09ee0	e5dd3204	 ldrb        r3, [sp, #0x204]
  09ee4	e203300f	 and         r3, r3, #0xF
  09ee8	e20330ff	 and         r3, r3, #0xFF
  09eec	e5cd301c	 strb        r3, [sp, #0x1C]

; 3014 : 
; 3015 :             // 0. Clear any thing before access - as it has some invalid IN transcation from analyzer
; 3016 :             CLRREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].CSR.CSR0, CSR0_H_RxPktRdy|CSR0_H_ReqPkt|CSR0_H_SetupPkt);

  09ef0	e59d3020	 ldr         r3, [sp, #0x20]
  09ef4	e283001c	 add         r0, r3, #0x1C
  09ef8	e5dd301c	 ldrb        r3, [sp, #0x1C]
  09efc	e1a01003	 mov         r1, r3
  09f00	e3a03010	 mov         r3, #0x10
  09f04	e0020391	 mul         r2, r1, r3
  09f08	e5903000	 ldr         r3, [r0]
  09f0c	e0833002	 add         r3, r3, r2
  09f10	e2831002	 add         r1, r3, #2
  09f14	e5d13001	 ldrb        r3, [r1, #1]
  09f18	e1a03403	 mov         r3, r3, lsl #8
  09f1c	e1a02803	 mov         r2, r3, lsl #16
  09f20	e1a02822	 mov         r2, r2, lsr #16
  09f24	e5d13000	 ldrb        r3, [r1]
  09f28	e1833002	 orr         r3, r3, r2
  09f2c	e1a02003	 mov         r2, r3
  09f30	e3e03029	 mvn         r3, #0x29
  09f34	e0023003	 and         r3, r2, r3
  09f38	e1a0e803	 mov         lr, r3, lsl #16
  09f3c	e1a0e82e	 mov         lr, lr, lsr #16
  09f40	e59d3020	 ldr         r3, [sp, #0x20]
  09f44	e283001c	 add         r0, r3, #0x1C
  09f48	e5dd301c	 ldrb        r3, [sp, #0x1C]
  09f4c	e1a01003	 mov         r1, r3
  09f50	e3a03010	 mov         r3, #0x10
  09f54	e0020391	 mul         r2, r1, r3
  09f58	e5903000	 ldr         r3, [r0]
  09f5c	e0833002	 add         r3, r3, r2
  09f60	e2832002	 add         r2, r3, #2
  09f64	e1a0300e	 mov         r3, lr
  09f68	e5c23000	 strb        r3, [r2]
  09f6c	e1a03423	 mov         r3, r3, lsr #8
  09f70	e5c23001	 strb        r3, [r2, #1]

; 3017 : 
; 3018 :             {   
; 3019 :                 UCHAR DataToggle = 0;

  09f74	e3a03000	 mov         r3, #0
  09f78	e5cd3054	 strb        r3, [sp, #0x54]

; 3020 :                 if(INREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].CSR.CSR0) & CSR0_H_DataToggle)

  09f7c	e59d3020	 ldr         r3, [sp, #0x20]
  09f80	e283001c	 add         r0, r3, #0x1C
  09f84	e5dd301c	 ldrb        r3, [sp, #0x1C]
  09f88	e1a01003	 mov         r1, r3
  09f8c	e3a03010	 mov         r3, #0x10
  09f90	e0020391	 mul         r2, r1, r3
  09f94	e5903000	 ldr         r3, [r0]
  09f98	e0833002	 add         r3, r3, r2
  09f9c	e2831002	 add         r1, r3, #2
  09fa0	e5d13001	 ldrb        r3, [r1, #1]
  09fa4	e1a03403	 mov         r3, r3, lsl #8
  09fa8	e1a02803	 mov         r2, r3, lsl #16
  09fac	e1a02822	 mov         r2, r2, lsr #16
  09fb0	e5d13000	 ldrb        r3, [r1]
  09fb4	e1833002	 orr         r3, r3, r2
  09fb8	e3130c02	 tst         r3, #2, 24
  09fbc	0a000001	 beq         |$LN27@ProcessTD|

; 3021 :                     DataToggle = 1;//Verify

  09fc0	e3a03001	 mov         r3, #1
  09fc4	e5cd3054	 strb        r3, [sp, #0x54]
  09fc8		 |$LN27@ProcessTD|

; 3022 : 
; 3023 :                 //UCHAR DataToggle = (INREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].CSR.CSR0) & CSR0_H_DataToggle) >> CSR0_H_DataToggle;
; 3024 :                 DEBUGMSG(ZONE_HCD, (TEXT("[DataToggle]:Request:Status OUT Trasaction on EP 0 Device Addr %d DataToggle = %d\r\n"), 
; 3025 :                         pPipe->GetReservedDeviceAddr(), DataToggle));

  09fc8	e59f3f24	 ldr         r3, [pc, #0xF24]
  09fcc	e5933440	 ldr         r3, [r3, #0x440]
  09fd0	e3130001	 tst         r3, #1
  09fd4	0a000010	 beq         |$LN74@ProcessTD|
  09fd8	e59d3014	 ldr         r3, [sp, #0x14]
  09fdc	e5933000	 ldr         r3, [r3]
  09fe0	e2833028	 add         r3, r3, #0x28
  09fe4	e59d0014	 ldr         r0, [sp, #0x14]
  09fe8	e5933000	 ldr         r3, [r3]
  09fec	e1a0e00f	 mov         lr, pc
  09ff0	e12fff13	 bx          r3
  09ff4	e5cd0148	 strb        r0, [sp, #0x148]
  09ff8	e5dd3054	 ldrb        r3, [sp, #0x54]
  09ffc	e1a02003	 mov         r2, r3
  0a000	e5dd3148	 ldrb        r3, [sp, #0x148]
  0a004	e1a01003	 mov         r1, r3
  0a008	e59f0f20	 ldr         r0, [pc, #0xF20]
  0a00c	eb000000	 bl          NKDbgPrintfW
  0a010	e3a03001	 mov         r3, #1
  0a014	e58d314c	 str         r3, [sp, #0x14C]
  0a018	ea000001	 b           |$LN75@ProcessTD|
  0a01c		 |$LN74@ProcessTD|
  0a01c	e3a03000	 mov         r3, #0
  0a020	e58d314c	 str         r3, [sp, #0x14C]
  0a024		 |$LN75@ProcessTD|

; 3026 :             }
; 3027 : 
; 3028 :             pQTD->SetCurTfrSize(0);            

  0a024	e3a01000	 mov         r1, #0
  0a028	e59d0018	 ldr         r0, [sp, #0x18]
  0a02c	eb000000	 bl          |?SetCurTfrSize@CQTD@@QAAXK@Z|

; 3029 :             // 1. Set the StatusPkt, TxPktRdy
; 3030 :             SETREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].CSR.CSR0, (CSR0_H_StatusPkt|CSR0_H_TxPktRdy));            

  0a030	e59d3020	 ldr         r3, [sp, #0x20]
  0a034	e283001c	 add         r0, r3, #0x1C
  0a038	e5dd301c	 ldrb        r3, [sp, #0x1C]
  0a03c	e1a01003	 mov         r1, r3
  0a040	e3a03010	 mov         r3, #0x10
  0a044	e0020391	 mul         r2, r1, r3
  0a048	e5903000	 ldr         r3, [r0]
  0a04c	e0833002	 add         r3, r3, r2
  0a050	e2831002	 add         r1, r3, #2
  0a054	e5d13001	 ldrb        r3, [r1, #1]
  0a058	e1a03403	 mov         r3, r3, lsl #8
  0a05c	e1a02803	 mov         r2, r3, lsl #16
  0a060	e1a02822	 mov         r2, r2, lsr #16
  0a064	e5d13000	 ldrb        r3, [r1]
  0a068	e1833002	 orr         r3, r3, r2
  0a06c	e3833042	 orr         r3, r3, #0x42
  0a070	e1a0e803	 mov         lr, r3, lsl #16
  0a074	e1a0e82e	 mov         lr, lr, lsr #16
  0a078	e59d3020	 ldr         r3, [sp, #0x20]
  0a07c	e283001c	 add         r0, r3, #0x1C
  0a080	e5dd301c	 ldrb        r3, [sp, #0x1C]
  0a084	e1a01003	 mov         r1, r3
  0a088	e3a03010	 mov         r3, #0x10
  0a08c	e0020391	 mul         r2, r1, r3
  0a090	e5903000	 ldr         r3, [r0]
  0a094	e0833002	 add         r3, r3, r2
  0a098	e2832002	 add         r2, r3, #2
  0a09c	e1a0300e	 mov         r3, lr
  0a0a0	e5c23000	 strb        r3, [r2]
  0a0a4	e1a03423	 mov         r3, r3, lsr #8
  0a0a8	e5c23001	 strb        r3, [r2, #1]

; 3031 : 
; 3032 :             // 2. Wait for transfer interrupt signal
; 3033 :             pQTD->SetStatus(STATUS_WAIT_RESPONSE);

  0a0ac	e3a01003	 mov         r1, #3
  0a0b0	e59d0018	 ldr         r0, [sp, #0x18]
  0a0b4	eb000000	 bl          |?SetStatus@CQTD@@QAAXK@Z|

; 3034 :             LeaveCriticalSection(&pOTG->regCS);

  0a0b8	e59d3020	 ldr         r3, [sp, #0x20]
  0a0bc	e2830038	 add         r0, r3, #0x38
  0a0c0	eb000000	 bl          LeaveCriticalSection

; 3035 :             bResult = TRUE;

  0a0c4	e3a03001	 mov         r3, #1
  0a0c8	e58d3024	 str         r3, [sp, #0x24]
  0a0cc		 |$LN28@ProcessTD|

; 3036 :         }
; 3037 :         break;

  0a0cc	ea000381	 b           |$LN43@ProcessTD|
  0a0d0		 |$LN26@ProcessTD|

; 3038 :     case (TD_DATA_OUT):
; 3039 :         {
; 3040 :             // Set Index Register
; 3041 :             EnterCriticalSection(&pOTG->regCS);    

  0a0d0	e59d3020	 ldr         r3, [sp, #0x20]
  0a0d4	e2830038	 add         r0, r3, #0x38
  0a0d8	eb000000	 bl          EnterCriticalSection

; 3042 :             OUTREG8(&pOTG->pUsbGenRegs->Index, INDEX(endpoint));

  0a0dc	e5dd3204	 ldrb        r3, [sp, #0x204]
  0a0e0	e203300f	 and         r3, r3, #0xF
  0a0e4	e20320ff	 and         r2, r3, #0xFF
  0a0e8	e59d3020	 ldr         r3, [sp, #0x20]
  0a0ec	e2833020	 add         r3, r3, #0x20
  0a0f0	e5933000	 ldr         r3, [r3]
  0a0f4	e283300e	 add         r3, r3, #0xE
  0a0f8	e5c32000	 strb        r2, [r3]

; 3043 :             csrIndex = INDEX(endpoint);

  0a0fc	e5dd3204	 ldrb        r3, [sp, #0x204]
  0a100	e203300f	 and         r3, r3, #0xF
  0a104	e20330ff	 and         r3, r3, #0xFF
  0a108	e5cd301c	 strb        r3, [sp, #0x1C]

; 3044 : 
; 3045 :             DEBUGMSG(ZONE_TRANSFER, (TEXT("Request OUT Transfer for EP %d, size %d MappedEP %d, Device %d, TxCSR 0x%x\r\n"),
; 3046 :                 INDEX(endpoint), pQTD->GetDataSize() - pQTD->GetTotTfrSize(),  USB_ENDPOINT(pPipe->GetMappedEndPoint()),
; 3047 :                 pPipe->GetReservedDeviceAddr(), INREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].CSR.TxCSR)));

  0a10c	e59f3de0	 ldr         r3, [pc, #0xDE0]
  0a110	e5933440	 ldr         r3, [r3, #0x440]
  0a114	e3130c01	 tst         r3, #1, 24
  0a118	0a00002e	 beq         |$LN76@ProcessTD|
  0a11c	e59d3014	 ldr         r3, [sp, #0x14]
  0a120	e5933000	 ldr         r3, [r3]
  0a124	e2833028	 add         r3, r3, #0x28
  0a128	e59d0014	 ldr         r0, [sp, #0x14]
  0a12c	e5933000	 ldr         r3, [r3]
  0a130	e1a0e00f	 mov         lr, pc
  0a134	e12fff13	 bx          r3
  0a138	e5cd0150	 strb        r0, [sp, #0x150]
  0a13c	e59d0014	 ldr         r0, [sp, #0x14]
  0a140	eb000000	 bl          |?GetMappedEndPoint@CPipe@@QAAEXZ|
  0a144	e5cd0151	 strb        r0, [sp, #0x151]
  0a148	e59d0018	 ldr         r0, [sp, #0x18]
  0a14c	eb000000	 bl          |?GetDataSize@CQTD@@QAAKXZ|
  0a150	e58d0154	 str         r0, [sp, #0x154]
  0a154	e59d0018	 ldr         r0, [sp, #0x18]
  0a158	eb000000	 bl          |?GetTotTfrSize@CQTD@@QAAKXZ|
  0a15c	e58d0158	 str         r0, [sp, #0x158]
  0a160	e59d3020	 ldr         r3, [sp, #0x20]
  0a164	e283001c	 add         r0, r3, #0x1C
  0a168	e5dd301c	 ldrb        r3, [sp, #0x1C]
  0a16c	e1a01003	 mov         r1, r3
  0a170	e3a03010	 mov         r3, #0x10
  0a174	e0020391	 mul         r2, r1, r3
  0a178	e5903000	 ldr         r3, [r0]
  0a17c	e0833002	 add         r3, r3, r2
  0a180	e2831002	 add         r1, r3, #2
  0a184	e5d13001	 ldrb        r3, [r1, #1]
  0a188	e1a03403	 mov         r3, r3, lsl #8
  0a18c	e1a02803	 mov         r2, r3, lsl #16
  0a190	e1a02822	 mov         r2, r2, lsr #16
  0a194	e5d13000	 ldrb        r3, [r1]
  0a198	e1833002	 orr         r3, r3, r2
  0a19c	e58d3004	 str         r3, [sp, #4]
  0a1a0	e5dd3150	 ldrb        r3, [sp, #0x150]
  0a1a4	e58d3000	 str         r3, [sp]
  0a1a8	e5dd3151	 ldrb        r3, [sp, #0x151]
  0a1ac	e203300f	 and         r3, r3, #0xF
  0a1b0	e59d1154	 ldr         r1, [sp, #0x154]
  0a1b4	e59d2158	 ldr         r2, [sp, #0x158]
  0a1b8	e0412002	 sub         r2, r1, r2
  0a1bc	e5dd1204	 ldrb        r1, [sp, #0x204]
  0a1c0	e201100f	 and         r1, r1, #0xF
  0a1c4	e59f0d60	 ldr         r0, [pc, #0xD60]
  0a1c8	eb000000	 bl          NKDbgPrintfW
  0a1cc	e3a03001	 mov         r3, #1
  0a1d0	e58d315c	 str         r3, [sp, #0x15C]
  0a1d4	ea000001	 b           |$LN77@ProcessTD|
  0a1d8		 |$LN76@ProcessTD|
  0a1d8	e3a03000	 mov         r3, #0
  0a1dc	e58d315c	 str         r3, [sp, #0x15C]
  0a1e0		 |$LN77@ProcessTD|

; 3048 :             
; 3049 :             // 1. Load data into FIFO
; 3050 :             // 1.a. Get the virtual address of buffer and corresponding start address (must be 0)
; 3051 :             UCHAR *pvData = (UCHAR *)pQTD->GetVAData();

  0a1e0	e59d0018	 ldr         r0, [sp, #0x18]
  0a1e4	eb000000	 bl          |?GetVAData@CQTD@@QAAKXZ|
  0a1e8	e58d0160	 str         r0, [sp, #0x160]
  0a1ec	e59d3160	 ldr         r3, [sp, #0x160]
  0a1f0	e58d3064	 str         r3, [sp, #0x64]

; 3052 :             UCHAR *ppData = (UCHAR *)pQTD->GetPAData();

  0a1f4	e59d0018	 ldr         r0, [sp, #0x18]
  0a1f8	eb000000	 bl          |?GetPAData@CQTD@@QAAKXZ|
  0a1fc	e58d0164	 str         r0, [sp, #0x164]
  0a200	e59d3164	 ldr         r3, [sp, #0x164]
  0a204	e58d305c	 str         r3, [sp, #0x5C]

; 3053 :             DWORD cbStart = pQTD->GetTotTfrSize();

  0a208	e59d0018	 ldr         r0, [sp, #0x18]
  0a20c	eb000000	 bl          |?GetTotTfrSize@CQTD@@QAAKXZ|
  0a210	e58d0168	 str         r0, [sp, #0x168]
  0a214	e59d3168	 ldr         r3, [sp, #0x168]
  0a218	e58d3058	 str         r3, [sp, #0x58]

; 3054 :             DWORD cbTemp = cbStart;

  0a21c	e59d3058	 ldr         r3, [sp, #0x58]
  0a220	e58d3060	 str         r3, [sp, #0x60]

; 3055 :             DWORD dwPacketSize = pQTD->GetPacketSize();

  0a224	e59d0018	 ldr         r0, [sp, #0x18]
  0a228	eb000000	 bl          |?GetPacketSize@CQTD@@QAAKXZ|
  0a22c	e58d016c	 str         r0, [sp, #0x16C]
  0a230	e59d316c	 ldr         r3, [sp, #0x16C]
  0a234	e58d306c	 str         r3, [sp, #0x6C]

; 3056 :             DWORD cbToTransfer;            
; 3057 : 
; 3058 :             if (pPipe->GetTransferMode() == TRANSFER_DMA1)          

  0a238	e59d0014	 ldr         r0, [sp, #0x14]
  0a23c	eb000000	 bl          |?GetTransferMode@CPipe@@QAAEXZ|
  0a240	e5cd0170	 strb        r0, [sp, #0x170]
  0a244	e5dd3170	 ldrb        r3, [sp, #0x170]
  0a248	e3530002	 cmp         r3, #2
  0a24c	1a000007	 bne         |$LN25@ProcessTD|

; 3059 :             {
; 3060 :                 cbToTransfer = pQTD->GetDataSize() - cbStart;                          

  0a250	e59d0018	 ldr         r0, [sp, #0x18]
  0a254	eb000000	 bl          |?GetDataSize@CQTD@@QAAKXZ|
  0a258	e58d0174	 str         r0, [sp, #0x174]
  0a25c	e59d2174	 ldr         r2, [sp, #0x174]
  0a260	e59d3058	 ldr         r3, [sp, #0x58]
  0a264	e0423003	 sub         r3, r2, r3
  0a268	e58d3068	 str         r3, [sp, #0x68]

; 3061 :             }
; 3062 :             else

  0a26c	ea000014	 b           |$LN24@ProcessTD|
  0a270		 |$LN25@ProcessTD|

; 3063 :             {
; 3064 :                 cbToTransfer = min(pQTD->GetDataSize() - cbStart, dwPacketSize);                           

  0a270	e59d0018	 ldr         r0, [sp, #0x18]
  0a274	eb000000	 bl          |?GetDataSize@CQTD@@QAAKXZ|
  0a278	e58d0178	 str         r0, [sp, #0x178]
  0a27c	e59d2178	 ldr         r2, [sp, #0x178]
  0a280	e59d3058	 ldr         r3, [sp, #0x58]
  0a284	e0422003	 sub         r2, r2, r3
  0a288	e59d306c	 ldr         r3, [sp, #0x6C]
  0a28c	e1520003	 cmp         r2, r3
  0a290	2a000007	 bcs         |$LN78@ProcessTD|
  0a294	e59d0018	 ldr         r0, [sp, #0x18]
  0a298	eb000000	 bl          |?GetDataSize@CQTD@@QAAKXZ|
  0a29c	e58d017c	 str         r0, [sp, #0x17C]
  0a2a0	e59d217c	 ldr         r2, [sp, #0x17C]
  0a2a4	e59d3058	 ldr         r3, [sp, #0x58]
  0a2a8	e0423003	 sub         r3, r2, r3
  0a2ac	e58d3180	 str         r3, [sp, #0x180]
  0a2b0	ea000001	 b           |$LN79@ProcessTD|
  0a2b4		 |$LN78@ProcessTD|
  0a2b4	e59d306c	 ldr         r3, [sp, #0x6C]
  0a2b8	e58d3180	 str         r3, [sp, #0x180]
  0a2bc		 |$LN79@ProcessTD|
  0a2bc	e59d3180	 ldr         r3, [sp, #0x180]
  0a2c0	e58d3068	 str         r3, [sp, #0x68]
  0a2c4		 |$LN24@ProcessTD|

; 3065 :             }
; 3066 : 
; 3067 :             // We need to get the max packet size in here            
; 3068 :             DEBUGMSG( ZONE_HCD, (TEXT("Packet Size = 0x%x for ep %d\r\n"), dwPacketSize, endpoint));

  0a2c4	e59f3c28	 ldr         r3, [pc, #0xC28]
  0a2c8	e5933440	 ldr         r3, [r3, #0x440]
  0a2cc	e3130001	 tst         r3, #1
  0a2d0	0a000007	 beq         |$LN80@ProcessTD|
  0a2d4	e5dd3204	 ldrb        r3, [sp, #0x204]
  0a2d8	e1a02003	 mov         r2, r3
  0a2dc	e59d106c	 ldr         r1, [sp, #0x6C]
  0a2e0	e59f0c40	 ldr         r0, [pc, #0xC40]
  0a2e4	eb000000	 bl          NKDbgPrintfW
  0a2e8	e3a03001	 mov         r3, #1
  0a2ec	e58d3184	 str         r3, [sp, #0x184]
  0a2f0	ea000001	 b           |$LN81@ProcessTD|
  0a2f4		 |$LN80@ProcessTD|
  0a2f4	e3a03000	 mov         r3, #0
  0a2f8	e58d3184	 str         r3, [sp, #0x184]
  0a2fc		 |$LN81@ProcessTD|

; 3069 :             DEBUGMSG( ZONE_HCD, (TEXT("Process TD_DATA_OUT at endpoint %d size %d\r\n"), endpoint, cbToTransfer));

  0a2fc	e59f3bf0	 ldr         r3, [pc, #0xBF0]
  0a300	e5933440	 ldr         r3, [r3, #0x440]
  0a304	e3130001	 tst         r3, #1
  0a308	0a000007	 beq         |$LN82@ProcessTD|
  0a30c	e59d2068	 ldr         r2, [sp, #0x68]
  0a310	e5dd3204	 ldrb        r3, [sp, #0x204]
  0a314	e1a01003	 mov         r1, r3
  0a318	e59f0c04	 ldr         r0, [pc, #0xC04]
  0a31c	eb000000	 bl          NKDbgPrintfW
  0a320	e3a03001	 mov         r3, #1
  0a324	e58d3188	 str         r3, [sp, #0x188]
  0a328	ea000001	 b           |$LN83@ProcessTD|
  0a32c		 |$LN82@ProcessTD|
  0a32c	e3a03000	 mov         r3, #0
  0a330	e58d3188	 str         r3, [sp, #0x188]
  0a334		 |$LN83@ProcessTD|

; 3070 :             //memdump((UCHAR *)(pvData+cbTemp), (USHORT)cbToTransfer, 0);
; 3071 : 
; 3072 :             // 1.c Clear any thing before access - as it has some invalid OUT transcation from analyzer
; 3073 :             if (endpoint == 0)

  0a334	e5dd3204	 ldrb        r3, [sp, #0x204]
  0a338	e3530000	 cmp         r3, #0
  0a33c	1a000021	 bne         |$LN23@ProcessTD|

; 3074 :                 CLRREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].CSR.CSR0, CSR0_H_TxPktRdy);

  0a340	e59d3020	 ldr         r3, [sp, #0x20]
  0a344	e283001c	 add         r0, r3, #0x1C
  0a348	e5dd301c	 ldrb        r3, [sp, #0x1C]
  0a34c	e1a01003	 mov         r1, r3
  0a350	e3a03010	 mov         r3, #0x10
  0a354	e0020391	 mul         r2, r1, r3
  0a358	e5903000	 ldr         r3, [r0]
  0a35c	e0833002	 add         r3, r3, r2
  0a360	e2831002	 add         r1, r3, #2
  0a364	e5d13001	 ldrb        r3, [r1, #1]
  0a368	e1a03403	 mov         r3, r3, lsl #8
  0a36c	e1a02803	 mov         r2, r3, lsl #16
  0a370	e1a02822	 mov         r2, r2, lsr #16
  0a374	e5d13000	 ldrb        r3, [r1]
  0a378	e1833002	 orr         r3, r3, r2
  0a37c	e1a02003	 mov         r2, r3
  0a380	e3e03002	 mvn         r3, #2
  0a384	e0023003	 and         r3, r2, r3
  0a388	e1a0e803	 mov         lr, r3, lsl #16
  0a38c	e1a0e82e	 mov         lr, lr, lsr #16
  0a390	e59d3020	 ldr         r3, [sp, #0x20]
  0a394	e283001c	 add         r0, r3, #0x1C
  0a398	e5dd301c	 ldrb        r3, [sp, #0x1C]
  0a39c	e1a01003	 mov         r1, r3
  0a3a0	e3a03010	 mov         r3, #0x10
  0a3a4	e0020391	 mul         r2, r1, r3
  0a3a8	e5903000	 ldr         r3, [r0]
  0a3ac	e0833002	 add         r3, r3, r2
  0a3b0	e2832002	 add         r2, r3, #2
  0a3b4	e1a0300e	 mov         r3, lr
  0a3b8	e5c23000	 strb        r3, [r2]
  0a3bc	e1a03423	 mov         r3, r3, lsr #8
  0a3c0	e5c23001	 strb        r3, [r2, #1]

; 3075 :             else

  0a3c4	ea000020	 b           |$LN22@ProcessTD|
  0a3c8		 |$LN23@ProcessTD|

; 3076 :                 CLRREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].CSR.TxCSR, TXCSR_H_TxPktRdy);

  0a3c8	e59d3020	 ldr         r3, [sp, #0x20]
  0a3cc	e283001c	 add         r0, r3, #0x1C
  0a3d0	e5dd301c	 ldrb        r3, [sp, #0x1C]
  0a3d4	e1a01003	 mov         r1, r3
  0a3d8	e3a03010	 mov         r3, #0x10
  0a3dc	e0020391	 mul         r2, r1, r3
  0a3e0	e5903000	 ldr         r3, [r0]
  0a3e4	e0833002	 add         r3, r3, r2
  0a3e8	e2831002	 add         r1, r3, #2
  0a3ec	e5d13001	 ldrb        r3, [r1, #1]
  0a3f0	e1a03403	 mov         r3, r3, lsl #8
  0a3f4	e1a02803	 mov         r2, r3, lsl #16
  0a3f8	e1a02822	 mov         r2, r2, lsr #16
  0a3fc	e5d13000	 ldrb        r3, [r1]
  0a400	e1833002	 orr         r3, r3, r2
  0a404	e1a02003	 mov         r2, r3
  0a408	e3e03001	 mvn         r3, #1
  0a40c	e0023003	 and         r3, r2, r3
  0a410	e1a0e803	 mov         lr, r3, lsl #16
  0a414	e1a0e82e	 mov         lr, lr, lsr #16
  0a418	e59d3020	 ldr         r3, [sp, #0x20]
  0a41c	e283001c	 add         r0, r3, #0x1C
  0a420	e5dd301c	 ldrb        r3, [sp, #0x1C]
  0a424	e1a01003	 mov         r1, r3
  0a428	e3a03010	 mov         r3, #0x10
  0a42c	e0020391	 mul         r2, r1, r3
  0a430	e5903000	 ldr         r3, [r0]
  0a434	e0833002	 add         r3, r3, r2
  0a438	e2832002	 add         r2, r3, #2
  0a43c	e1a0300e	 mov         r3, lr
  0a440	e5c23000	 strb        r3, [r2]
  0a444	e1a03423	 mov         r3, r3, lsr #8
  0a448	e5c23001	 strb        r3, [r2, #1]
  0a44c		 |$LN22@ProcessTD|

; 3077 :             //SETREG16(&pOTG->pUsbGenRegs->INDEX_REG.hIndex.CSR.TxCSR, TXCSR_H_ClrDataTog);
; 3078 :             
; 3079 :             // 1.d Set the current size to be transferred.
; 3080 :             pQTD->SetCurTfrSize(cbToTransfer);

  0a44c	e59d1068	 ldr         r1, [sp, #0x68]
  0a450	e59d0018	 ldr         r0, [sp, #0x18]
  0a454	eb000000	 bl          |?SetCurTfrSize@CQTD@@QAAXK@Z|

; 3081 :             
; 3082 : 
; 3083 : //            UpdateDataToggle(pPipe, FALSE, TRUE);
; 3084 : 
; 3085 :             LeaveCriticalSection(&pOTG->regCS);

  0a458	e59d3020	 ldr         r3, [sp, #0x20]
  0a45c	e2830038	 add         r0, r3, #0x38
  0a460	eb000000	 bl          LeaveCriticalSection

; 3086 : 
; 3087 :             if (endpoint == 0)

  0a464	e5dd3204	 ldrb        r3, [sp, #0x204]
  0a468	e3530000	 cmp         r3, #0
  0a46c	1a000025	 bne         |$LN21@ProcessTD|

; 3088 :                 DEBUGMSG(ZONE_HCD, (TEXT("Request OUT ProcessTD EP %d Dev %d data Toggle = 0x%x\r\n"), 
; 3089 :                     endpoint, pPipe->GetReservedDeviceAddr(), INREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].CSR.CSR0) & CSR0_H_DataToggle));

  0a470	e59f3a7c	 ldr         r3, [pc, #0xA7C]
  0a474	e5933440	 ldr         r3, [r3, #0x440]
  0a478	e3130001	 tst         r3, #1
  0a47c	0a00001e	 beq         |$LN84@ProcessTD|
  0a480	e59d3014	 ldr         r3, [sp, #0x14]
  0a484	e5933000	 ldr         r3, [r3]
  0a488	e2833028	 add         r3, r3, #0x28
  0a48c	e59d0014	 ldr         r0, [sp, #0x14]
  0a490	e5933000	 ldr         r3, [r3]
  0a494	e1a0e00f	 mov         lr, pc
  0a498	e12fff13	 bx          r3
  0a49c	e5cd018c	 strb        r0, [sp, #0x18C]
  0a4a0	e59d3020	 ldr         r3, [sp, #0x20]
  0a4a4	e283001c	 add         r0, r3, #0x1C
  0a4a8	e5dd301c	 ldrb        r3, [sp, #0x1C]
  0a4ac	e1a01003	 mov         r1, r3
  0a4b0	e3a03010	 mov         r3, #0x10
  0a4b4	e0020391	 mul         r2, r1, r3
  0a4b8	e5903000	 ldr         r3, [r0]
  0a4bc	e0833002	 add         r3, r3, r2
  0a4c0	e2831002	 add         r1, r3, #2
  0a4c4	e5d13001	 ldrb        r3, [r1, #1]
  0a4c8	e1a03403	 mov         r3, r3, lsl #8
  0a4cc	e1a02803	 mov         r2, r3, lsl #16
  0a4d0	e1a02822	 mov         r2, r2, lsr #16
  0a4d4	e5d13000	 ldrb        r3, [r1]
  0a4d8	e1833002	 orr         r3, r3, r2
  0a4dc	e2033c02	 and         r3, r3, #2, 24
  0a4e0	e5dd218c	 ldrb        r2, [sp, #0x18C]
  0a4e4	e5dd1204	 ldrb        r1, [sp, #0x204]
  0a4e8	e59f0a30	 ldr         r0, [pc, #0xA30]
  0a4ec	eb000000	 bl          NKDbgPrintfW
  0a4f0	e3a03001	 mov         r3, #1
  0a4f4	e58d3190	 str         r3, [sp, #0x190]
  0a4f8	ea000001	 b           |$LN85@ProcessTD|
  0a4fc		 |$LN84@ProcessTD|
  0a4fc	e3a03000	 mov         r3, #0
  0a500	e58d3190	 str         r3, [sp, #0x190]
  0a504		 |$LN85@ProcessTD|

; 3090 :             else

  0a504	ea000024	 b           |$LN20@ProcessTD|
  0a508		 |$LN21@ProcessTD|

; 3091 :                 DEBUGMSG(ZONE_HCD, (TEXT("Request OUT ProcessTD EP %d Dev %d data Toggle = 0x%x\r\n"), 
; 3092 :                     endpoint, pPipe->GetReservedDeviceAddr(), INREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].CSR.TxCSR)& TXCSR_H_DataToggle));

  0a508	e59f39e4	 ldr         r3, [pc, #0x9E4]
  0a50c	e5933440	 ldr         r3, [r3, #0x440]
  0a510	e3130001	 tst         r3, #1
  0a514	0a00001e	 beq         |$LN86@ProcessTD|
  0a518	e59d3014	 ldr         r3, [sp, #0x14]
  0a51c	e5933000	 ldr         r3, [r3]
  0a520	e2833028	 add         r3, r3, #0x28
  0a524	e59d0014	 ldr         r0, [sp, #0x14]
  0a528	e5933000	 ldr         r3, [r3]
  0a52c	e1a0e00f	 mov         lr, pc
  0a530	e12fff13	 bx          r3
  0a534	e5cd0194	 strb        r0, [sp, #0x194]
  0a538	e59d3020	 ldr         r3, [sp, #0x20]
  0a53c	e283001c	 add         r0, r3, #0x1C
  0a540	e5dd301c	 ldrb        r3, [sp, #0x1C]
  0a544	e1a01003	 mov         r1, r3
  0a548	e3a03010	 mov         r3, #0x10
  0a54c	e0020391	 mul         r2, r1, r3
  0a550	e5903000	 ldr         r3, [r0]
  0a554	e0833002	 add         r3, r3, r2
  0a558	e2831002	 add         r1, r3, #2
  0a55c	e5d13001	 ldrb        r3, [r1, #1]
  0a560	e1a03403	 mov         r3, r3, lsl #8
  0a564	e1a02803	 mov         r2, r3, lsl #16
  0a568	e1a02822	 mov         r2, r2, lsr #16
  0a56c	e5d13000	 ldrb        r3, [r1]
  0a570	e1833002	 orr         r3, r3, r2
  0a574	e2033c01	 and         r3, r3, #1, 24
  0a578	e5dd2194	 ldrb        r2, [sp, #0x194]
  0a57c	e5dd1204	 ldrb        r1, [sp, #0x204]
  0a580	e59f0998	 ldr         r0, [pc, #0x998]
  0a584	eb000000	 bl          NKDbgPrintfW
  0a588	e3a03001	 mov         r3, #1
  0a58c	e58d3198	 str         r3, [sp, #0x198]
  0a590	ea000001	 b           |$LN87@ProcessTD|
  0a594		 |$LN86@ProcessTD|
  0a594	e3a03000	 mov         r3, #0
  0a598	e58d3198	 str         r3, [sp, #0x198]
  0a59c		 |$LN87@ProcessTD|
  0a59c		 |$LN20@ProcessTD|

; 3093 : 
; 3094 :             // Dump the TxCSR before out 
; 3095 :             // 1.e Now put data into FIFO for ep 
; 3096 :             if ((pPipe->GetTransferMode() != TRANSFER_FIFO) && (USB_ENDPOINT(endpoint) != 0) && (cbToTransfer != 0))

  0a59c	e59d0014	 ldr         r0, [sp, #0x14]
  0a5a0	eb000000	 bl          |?GetTransferMode@CPipe@@QAAEXZ|
  0a5a4	e5cd019c	 strb        r0, [sp, #0x19C]
  0a5a8	e5dd319c	 ldrb        r3, [sp, #0x19C]
  0a5ac	e3530000	 cmp         r3, #0
  0a5b0	0a000063	 beq         |$LN19@ProcessTD|
  0a5b4	e5dd3204	 ldrb        r3, [sp, #0x204]
  0a5b8	e313000f	 tst         r3, #0xF
  0a5bc	0a000060	 beq         |$LN19@ProcessTD|
  0a5c0	e59d3068	 ldr         r3, [sp, #0x68]
  0a5c4	e3530000	 cmp         r3, #0
  0a5c8	0a00005d	 beq         |$LN19@ProcessTD|

; 3097 :             {    
; 3098 :                 if (pQTD->GetStatus() == STATUS_PROCESS_DMA)

  0a5cc	e59d0018	 ldr         r0, [sp, #0x18]
  0a5d0	eb000000	 bl          |?GetStatus@CQTD@@QAAKXZ|
  0a5d4	e58d01a0	 str         r0, [sp, #0x1A0]
  0a5d8	e59d31a0	 ldr         r3, [sp, #0x1A0]
  0a5dc	e3530006	 cmp         r3, #6
  0a5e0	1a00004b	 bne         |$LN18@ProcessTD|

; 3099 :                 {                                    
; 3100 :                     UCHAR channel = pPipe->m_pCMhcd->AcquireDMAChannel(pPipe);

  0a5e4	e59d1014	 ldr         r1, [sp, #0x14]
  0a5e8	e59d3014	 ldr         r3, [sp, #0x14]
  0a5ec	e283300c	 add         r3, r3, #0xC
  0a5f0	e5930000	 ldr         r0, [r3]
  0a5f4	eb000000	 bl          |?AcquireDMAChannel@CHW@@QAAEPAVCPipe@@@Z|
  0a5f8	e5cd01a4	 strb        r0, [sp, #0x1A4]
  0a5fc	e5dd31a4	 ldrb        r3, [sp, #0x1A4]
  0a600	e5cd3070	 strb        r3, [sp, #0x70]

; 3101 :                     if (channel == 0xff)

  0a604	e5dd3070	 ldrb        r3, [sp, #0x70]
  0a608	e35300ff	 cmp         r3, #0xFF
  0a60c	1a000008	 bne         |$LN17@ProcessTD|

; 3102 :                     {
; 3103 :                         RETAILMSG(1, (TEXT("Failed to get the DMA channel, goto to FIFO mode\r\n")));

  0a610	e59f0904	 ldr         r0, [pc, #0x904]
  0a614	eb000000	 bl          NKDbgPrintfW
  0a618	e3a03001	 mov         r3, #1
  0a61c	e58d31a8	 str         r3, [sp, #0x1A8]
  0a620	ea000001	 b           |$LN89@ProcessTD|
  0a624	e3a03000	 mov         r3, #0
  0a628	e58d31a8	 str         r3, [sp, #0x1A8]
  0a62c		 |$LN89@ProcessTD|

; 3104 :                         goto PROCESS_WRITE_FIFO;

  0a62c	ea000044	 b           |$LN16@ProcessTD|
  0a630	ea000043	 b           |$PROCESS_WRITE_FIFO$43606|
  0a634		 |$LN17@ProcessTD|

; 3105 :                     }
; 3106 :                     UpdateDataToggle(pPipe, FALSE, TRUE);

  0a634	e3a03001	 mov         r3, #1
  0a638	e3a02000	 mov         r2, #0
  0a63c	e59d1014	 ldr         r1, [sp, #0x14]
  0a640	e59d0200	 ldr         r0, [sp, #0x200]
  0a644	e5900000	 ldr         r0, [r0]
  0a648	e280e044	 add         lr, r0, #0x44
  0a64c	e59d0200	 ldr         r0, [sp, #0x200]
  0a650	e59e4000	 ldr         r4, [lr]
  0a654	e1a0e00f	 mov         lr, pc
  0a658	e12fff14	 bx          r4

; 3107 : 					
; 3108 :                     DEBUGMSG(ZONE_TRANSFER, (TEXT("ProcessTD::WriteDMA at ep %d (mapped %d), size %d channel %d\r\n"), 
; 3109 :                         endpoint, pPipe->GetMappedEndPoint(), cbToTransfer, channel));                    

  0a65c	e59f3890	 ldr         r3, [pc, #0x890]
  0a660	e5933440	 ldr         r3, [r3, #0x440]
  0a664	e3130c01	 tst         r3, #1, 24
  0a668	0a00000c	 beq         |$LN90@ProcessTD|
  0a66c	e59d0014	 ldr         r0, [sp, #0x14]
  0a670	eb000000	 bl          |?GetMappedEndPoint@CPipe@@QAAEXZ|
  0a674	e5cd01ac	 strb        r0, [sp, #0x1AC]
  0a678	e5dd3070	 ldrb        r3, [sp, #0x70]
  0a67c	e58d3000	 str         r3, [sp]
  0a680	e59d3068	 ldr         r3, [sp, #0x68]
  0a684	e5dd21ac	 ldrb        r2, [sp, #0x1AC]
  0a688	e5dd1204	 ldrb        r1, [sp, #0x204]
  0a68c	e59f0884	 ldr         r0, [pc, #0x884]
  0a690	eb000000	 bl          NKDbgPrintfW
  0a694	e3a03001	 mov         r3, #1
  0a698	e58d31b0	 str         r3, [sp, #0x1B0]
  0a69c	ea000001	 b           |$LN91@ProcessTD|
  0a6a0		 |$LN90@ProcessTD|
  0a6a0	e3a03000	 mov         r3, #0
  0a6a4	e58d31b0	 str         r3, [sp, #0x1B0]
  0a6a8		 |$LN91@ProcessTD|

; 3110 :                     bResult = WriteDMA((void *)pOTG, pPipe->GetMappedEndPoint(), channel, (DWORD *)(ppData+cbTemp), 
; 3111 :                         cbToTransfer, dwPacketSize, (void *)pQTD);                                        

  0a6a8	e59d0014	 ldr         r0, [sp, #0x14]
  0a6ac	eb000000	 bl          |?GetMappedEndPoint@CPipe@@QAAEXZ|
  0a6b0	e5cd01b4	 strb        r0, [sp, #0x1B4]
  0a6b4	e59d3018	 ldr         r3, [sp, #0x18]
  0a6b8	e58d300c	 str         r3, [sp, #0xC]
  0a6bc	e59d306c	 ldr         r3, [sp, #0x6C]
  0a6c0	e58d3008	 str         r3, [sp, #8]
  0a6c4	e59d3068	 ldr         r3, [sp, #0x68]
  0a6c8	e58d3004	 str         r3, [sp, #4]
  0a6cc	e59d205c	 ldr         r2, [sp, #0x5C]
  0a6d0	e59d3060	 ldr         r3, [sp, #0x60]
  0a6d4	e0823003	 add         r3, r2, r3
  0a6d8	e58d3000	 str         r3, [sp]
  0a6dc	e5dd3070	 ldrb        r3, [sp, #0x70]
  0a6e0	e5dd21b4	 ldrb        r2, [sp, #0x1B4]
  0a6e4	e59d1020	 ldr         r1, [sp, #0x20]
  0a6e8	e59d0200	 ldr         r0, [sp, #0x200]
  0a6ec	e5900000	 ldr         r0, [r0]
  0a6f0	e280e060	 add         lr, r0, #0x60
  0a6f4	e59d0200	 ldr         r0, [sp, #0x200]
  0a6f8	e59e4000	 ldr         r4, [lr]
  0a6fc	e1a0e00f	 mov         lr, pc
  0a700	e12fff14	 bx          r4
  0a704	e58d01b8	 str         r0, [sp, #0x1B8]
  0a708	e59d31b8	 ldr         r3, [sp, #0x1B8]
  0a70c	e58d3024	 str         r3, [sp, #0x24]

; 3112 :                 }
; 3113 :                 else

  0a710	ea00000a	 b           |$LN15@ProcessTD|
  0a714		 |$LN18@ProcessTD|

; 3114 :                     RETAILMSG(1, (TEXT("Something wrong with status %d!!!\r\n"), pQTD->GetStatus()));

  0a714	e59d0018	 ldr         r0, [sp, #0x18]
  0a718	eb000000	 bl          |?GetStatus@CQTD@@QAAKXZ|
  0a71c	e58d01bc	 str         r0, [sp, #0x1BC]
  0a720	e59d11bc	 ldr         r1, [sp, #0x1BC]
  0a724	e59f07e8	 ldr         r0, [pc, #0x7E8]
  0a728	eb000000	 bl          NKDbgPrintfW
  0a72c	e3a03001	 mov         r3, #1
  0a730	e58d31c0	 str         r3, [sp, #0x1C0]
  0a734	ea000001	 b           |$LN93@ProcessTD|
  0a738	e3a03000	 mov         r3, #0
  0a73c	e58d31c0	 str         r3, [sp, #0x1C0]
  0a740		 |$LN93@ProcessTD|
  0a740		 |$LN15@ProcessTD|

; 3115 :             }
; 3116 :             else 

  0a740	ea000147	 b           |$LN14@ProcessTD|
  0a744		 |$LN19@ProcessTD|
  0a744		 |$LN16@ProcessTD|
  0a744		 |$PROCESS_WRITE_FIFO$43606|

; 3117 :             {                
; 3118 : PROCESS_WRITE_FIFO:
; 3119 :                 EnterCriticalSection(&pOTG->regCS);

  0a744	e59d3020	 ldr         r3, [sp, #0x20]
  0a748	e2830038	 add         r0, r3, #0x38
  0a74c	eb000000	 bl          EnterCriticalSection

; 3120 :                 WriteFIFO((void *)pOTG, endpoint, (DWORD *)(pvData+cbTemp), cbToTransfer);                      

  0a750	e59d3068	 ldr         r3, [sp, #0x68]
  0a754	e58d3000	 str         r3, [sp]
  0a758	e59d2064	 ldr         r2, [sp, #0x64]
  0a75c	e59d3060	 ldr         r3, [sp, #0x60]
  0a760	e0823003	 add         r3, r2, r3
  0a764	e5dd2204	 ldrb        r2, [sp, #0x204]
  0a768	e59d1020	 ldr         r1, [sp, #0x20]
  0a76c	e59d0200	 ldr         r0, [sp, #0x200]
  0a770	e5900000	 ldr         r0, [r0]
  0a774	e280e058	 add         lr, r0, #0x58
  0a778	e59d0200	 ldr         r0, [sp, #0x200]
  0a77c	e59e4000	 ldr         r4, [lr]
  0a780	e1a0e00f	 mov         lr, pc
  0a784	e12fff14	 bx          r4

; 3121 : 
; 3122 :                 // 2. Set the SetupPkt & TxPtRdy bits
; 3123 :                 if (endpoint == 0)

  0a788	e5dd3204	 ldrb        r3, [sp, #0x204]
  0a78c	e3530000	 cmp         r3, #0
  0a790	1a00001b	 bne         |$LN13@ProcessTD|

; 3124 :                     DEBUGMSG(ZONE_HCD, (TEXT("Data OUT Packet requested with CSR0 = 0x%x\r\n"), 
; 3125 :                         INREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].CSR.CSR0)));

  0a794	e59f3758	 ldr         r3, [pc, #0x758]
  0a798	e5933440	 ldr         r3, [r3, #0x440]
  0a79c	e3130001	 tst         r3, #1
  0a7a0	0a000014	 beq         |$LN94@ProcessTD|
  0a7a4	e59d3020	 ldr         r3, [sp, #0x20]
  0a7a8	e283001c	 add         r0, r3, #0x1C
  0a7ac	e5dd301c	 ldrb        r3, [sp, #0x1C]
  0a7b0	e1a01003	 mov         r1, r3
  0a7b4	e3a03010	 mov         r3, #0x10
  0a7b8	e0020391	 mul         r2, r1, r3
  0a7bc	e5903000	 ldr         r3, [r0]
  0a7c0	e0833002	 add         r3, r3, r2
  0a7c4	e2831002	 add         r1, r3, #2
  0a7c8	e5d13001	 ldrb        r3, [r1, #1]
  0a7cc	e1a03403	 mov         r3, r3, lsl #8
  0a7d0	e1a02803	 mov         r2, r3, lsl #16
  0a7d4	e1a02822	 mov         r2, r2, lsr #16
  0a7d8	e5d13000	 ldrb        r3, [r1]
  0a7dc	e1833002	 orr         r3, r3, r2
  0a7e0	e1a01003	 mov         r1, r3
  0a7e4	e59f0724	 ldr         r0, [pc, #0x724]
  0a7e8	eb000000	 bl          NKDbgPrintfW
  0a7ec	e3a03001	 mov         r3, #1
  0a7f0	e58d31c4	 str         r3, [sp, #0x1C4]
  0a7f4	ea000001	 b           |$LN95@ProcessTD|
  0a7f8		 |$LN94@ProcessTD|
  0a7f8	e3a03000	 mov         r3, #0
  0a7fc	e58d31c4	 str         r3, [sp, #0x1C4]
  0a800		 |$LN95@ProcessTD|

; 3126 :                 else

  0a800	ea00001a	 b           |$LN12@ProcessTD|
  0a804		 |$LN13@ProcessTD|

; 3127 :                     DEBUGMSG(ZONE_HCD, (TEXT("Data OUT Packet requested with TxCSR = 0x%x\r\n"), 
; 3128 :                         INREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].CSR.TxCSR)));

  0a804	e59f36e8	 ldr         r3, [pc, #0x6E8]
  0a808	e5933440	 ldr         r3, [r3, #0x440]
  0a80c	e3130001	 tst         r3, #1
  0a810	0a000014	 beq         |$LN96@ProcessTD|
  0a814	e59d3020	 ldr         r3, [sp, #0x20]
  0a818	e283001c	 add         r0, r3, #0x1C
  0a81c	e5dd301c	 ldrb        r3, [sp, #0x1C]
  0a820	e1a01003	 mov         r1, r3
  0a824	e3a03010	 mov         r3, #0x10
  0a828	e0020391	 mul         r2, r1, r3
  0a82c	e5903000	 ldr         r3, [r0]
  0a830	e0833002	 add         r3, r3, r2
  0a834	e2831002	 add         r1, r3, #2
  0a838	e5d13001	 ldrb        r3, [r1, #1]
  0a83c	e1a03403	 mov         r3, r3, lsl #8
  0a840	e1a02803	 mov         r2, r3, lsl #16
  0a844	e1a02822	 mov         r2, r2, lsr #16
  0a848	e5d13000	 ldrb        r3, [r1]
  0a84c	e1833002	 orr         r3, r3, r2
  0a850	e1a01003	 mov         r1, r3
  0a854	e59f06b0	 ldr         r0, [pc, #0x6B0]
  0a858	eb000000	 bl          NKDbgPrintfW
  0a85c	e3a03001	 mov         r3, #1
  0a860	e58d31c8	 str         r3, [sp, #0x1C8]
  0a864	ea000001	 b           |$LN97@ProcessTD|
  0a868		 |$LN96@ProcessTD|
  0a868	e3a03000	 mov         r3, #0
  0a86c	e58d31c8	 str         r3, [sp, #0x1C8]
  0a870		 |$LN97@ProcessTD|
  0a870		 |$LN12@ProcessTD|

; 3129 : 
; 3130 :                 if (endpoint == 0)

  0a870	e5dd3204	 ldrb        r3, [sp, #0x204]
  0a874	e3530000	 cmp         r3, #0
  0a878	1a000050	 bne         |$LN11@ProcessTD|

; 3131 :                 {
; 3132 : #ifdef DEBUG
; 3133 :                     DWORD DataToggle = (INREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].CSR.CSR0) & CSR0_H_DataToggle);

  0a87c	e59d3020	 ldr         r3, [sp, #0x20]
  0a880	e283001c	 add         r0, r3, #0x1C
  0a884	e5dd301c	 ldrb        r3, [sp, #0x1C]
  0a888	e1a01003	 mov         r1, r3
  0a88c	e3a03010	 mov         r3, #0x10
  0a890	e0020391	 mul         r2, r1, r3
  0a894	e5903000	 ldr         r3, [r0]
  0a898	e0833002	 add         r3, r3, r2
  0a89c	e2831002	 add         r1, r3, #2
  0a8a0	e5d13001	 ldrb        r3, [r1, #1]
  0a8a4	e1a03403	 mov         r3, r3, lsl #8
  0a8a8	e1a02803	 mov         r2, r3, lsl #16
  0a8ac	e1a02822	 mov         r2, r2, lsr #16
  0a8b0	e5d13000	 ldrb        r3, [r1]
  0a8b4	e1833002	 orr         r3, r3, r2
  0a8b8	e2033c02	 and         r3, r3, #2, 24
  0a8bc	e58d3074	 str         r3, [sp, #0x74]

; 3134 :                     DEBUGMSG(ZONE_HCD, (TEXT("[DataToggle]:Request:Data OUT Trasaction on EP %d Device Addr %d DataToggle = 0x%x\r\n"), 
; 3135 :                                 csrIndex, pPipe->GetReservedDeviceAddr(), DataToggle));

  0a8c0	e59f362c	 ldr         r3, [pc, #0x62C]
  0a8c4	e5933440	 ldr         r3, [r3, #0x440]
  0a8c8	e3130001	 tst         r3, #1
  0a8cc	0a00000f	 beq         |$LN98@ProcessTD|
  0a8d0	e59d3014	 ldr         r3, [sp, #0x14]
  0a8d4	e5933000	 ldr         r3, [r3]
  0a8d8	e2833028	 add         r3, r3, #0x28
  0a8dc	e59d0014	 ldr         r0, [sp, #0x14]
  0a8e0	e5933000	 ldr         r3, [r3]
  0a8e4	e1a0e00f	 mov         lr, pc
  0a8e8	e12fff13	 bx          r3
  0a8ec	e5cd01cc	 strb        r0, [sp, #0x1CC]
  0a8f0	e59d3074	 ldr         r3, [sp, #0x74]
  0a8f4	e5dd21cc	 ldrb        r2, [sp, #0x1CC]
  0a8f8	e5dd101c	 ldrb        r1, [sp, #0x1C]
  0a8fc	e59f0604	 ldr         r0, [pc, #0x604]
  0a900	eb000000	 bl          NKDbgPrintfW
  0a904	e3a03001	 mov         r3, #1
  0a908	e58d31d0	 str         r3, [sp, #0x1D0]
  0a90c	ea000001	 b           |$LN99@ProcessTD|
  0a910		 |$LN98@ProcessTD|
  0a910	e3a03000	 mov         r3, #0
  0a914	e58d31d0	 str         r3, [sp, #0x1D0]
  0a918		 |$LN99@ProcessTD|

; 3136 : #endif
; 3137 :                     UpdateDataToggle(pPipe, FALSE, TRUE);

  0a918	e3a03001	 mov         r3, #1
  0a91c	e3a02000	 mov         r2, #0
  0a920	e59d1014	 ldr         r1, [sp, #0x14]
  0a924	e59d0200	 ldr         r0, [sp, #0x200]
  0a928	e5900000	 ldr         r0, [r0]
  0a92c	e280e044	 add         lr, r0, #0x44
  0a930	e59d0200	 ldr         r0, [sp, #0x200]
  0a934	e59e4000	 ldr         r4, [lr]
  0a938	e1a0e00f	 mov         lr, pc
  0a93c	e12fff14	 bx          r4

; 3138 :                     SETREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].CSR.CSR0, CSR0_H_TxPktRdy);                

  0a940	e59d3020	 ldr         r3, [sp, #0x20]
  0a944	e283001c	 add         r0, r3, #0x1C
  0a948	e5dd301c	 ldrb        r3, [sp, #0x1C]
  0a94c	e1a01003	 mov         r1, r3
  0a950	e3a03010	 mov         r3, #0x10
  0a954	e0020391	 mul         r2, r1, r3
  0a958	e5903000	 ldr         r3, [r0]
  0a95c	e0833002	 add         r3, r3, r2
  0a960	e2831002	 add         r1, r3, #2
  0a964	e5d13001	 ldrb        r3, [r1, #1]
  0a968	e1a03403	 mov         r3, r3, lsl #8
  0a96c	e1a02803	 mov         r2, r3, lsl #16
  0a970	e1a02822	 mov         r2, r2, lsr #16
  0a974	e5d13000	 ldrb        r3, [r1]
  0a978	e1833002	 orr         r3, r3, r2
  0a97c	e3833002	 orr         r3, r3, #2
  0a980	e1a0e803	 mov         lr, r3, lsl #16
  0a984	e1a0e82e	 mov         lr, lr, lsr #16
  0a988	e59d3020	 ldr         r3, [sp, #0x20]
  0a98c	e283001c	 add         r0, r3, #0x1C
  0a990	e5dd301c	 ldrb        r3, [sp, #0x1C]
  0a994	e1a01003	 mov         r1, r3
  0a998	e3a03010	 mov         r3, #0x10
  0a99c	e0020391	 mul         r2, r1, r3
  0a9a0	e5903000	 ldr         r3, [r0]
  0a9a4	e0833002	 add         r3, r3, r2
  0a9a8	e2832002	 add         r2, r3, #2
  0a9ac	e1a0300e	 mov         r3, lr
  0a9b0	e5c23000	 strb        r3, [r2]
  0a9b4	e1a03423	 mov         r3, r3, lsr #8
  0a9b8	e5c23001	 strb        r3, [r2, #1]

; 3139 :                 }
; 3140 :                 else

  0a9bc	ea0000a3	 b           |$LN10@ProcessTD|
  0a9c0		 |$LN11@ProcessTD|

; 3141 :                 {                                        
; 3142 : #ifdef DEBUG
; 3143 :                     DWORD DataToggle = (INREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].CSR.TxCSR) & TXCSR_H_DataToggle);

  0a9c0	e59d3020	 ldr         r3, [sp, #0x20]
  0a9c4	e283001c	 add         r0, r3, #0x1C
  0a9c8	e5dd301c	 ldrb        r3, [sp, #0x1C]
  0a9cc	e1a01003	 mov         r1, r3
  0a9d0	e3a03010	 mov         r3, #0x10
  0a9d4	e0020391	 mul         r2, r1, r3
  0a9d8	e5903000	 ldr         r3, [r0]
  0a9dc	e0833002	 add         r3, r3, r2
  0a9e0	e2831002	 add         r1, r3, #2
  0a9e4	e5d13001	 ldrb        r3, [r1, #1]
  0a9e8	e1a03403	 mov         r3, r3, lsl #8
  0a9ec	e1a02803	 mov         r2, r3, lsl #16
  0a9f0	e1a02822	 mov         r2, r2, lsr #16
  0a9f4	e5d13000	 ldrb        r3, [r1]
  0a9f8	e1833002	 orr         r3, r3, r2
  0a9fc	e2033c01	 and         r3, r3, #1, 24
  0aa00	e58d3078	 str         r3, [sp, #0x78]

; 3144 :                     DEBUGMSG(ZONE_HCD, (TEXT("[DataToggle]:Request:Data OUT Trasaction on EP %d Device Addr %d DataToggle = 0x%x\r\n"), 
; 3145 :                                     csrIndex, pPipe->GetReservedDeviceAddr(), DataToggle));

  0aa04	e59f34e8	 ldr         r3, [pc, #0x4E8]
  0aa08	e5933440	 ldr         r3, [r3, #0x440]
  0aa0c	e3130001	 tst         r3, #1
  0aa10	0a00000f	 beq         |$LN100@ProcessTD|
  0aa14	e59d3014	 ldr         r3, [sp, #0x14]
  0aa18	e5933000	 ldr         r3, [r3]
  0aa1c	e2833028	 add         r3, r3, #0x28
  0aa20	e59d0014	 ldr         r0, [sp, #0x14]
  0aa24	e5933000	 ldr         r3, [r3]
  0aa28	e1a0e00f	 mov         lr, pc
  0aa2c	e12fff13	 bx          r3
  0aa30	e5cd01d4	 strb        r0, [sp, #0x1D4]
  0aa34	e59d3078	 ldr         r3, [sp, #0x78]
  0aa38	e5dd21d4	 ldrb        r2, [sp, #0x1D4]
  0aa3c	e5dd101c	 ldrb        r1, [sp, #0x1C]
  0aa40	e59f04c0	 ldr         r0, [pc, #0x4C0]
  0aa44	eb000000	 bl          NKDbgPrintfW
  0aa48	e3a03001	 mov         r3, #1
  0aa4c	e58d31d8	 str         r3, [sp, #0x1D8]
  0aa50	ea000001	 b           |$LN101@ProcessTD|
  0aa54		 |$LN100@ProcessTD|
  0aa54	e3a03000	 mov         r3, #0
  0aa58	e58d31d8	 str         r3, [sp, #0x1D8]
  0aa5c		 |$LN101@ProcessTD|

; 3146 : #endif
; 3147 :                     UpdateDataToggle(pPipe, FALSE, TRUE);

  0aa5c	e3a03001	 mov         r3, #1
  0aa60	e3a02000	 mov         r2, #0
  0aa64	e59d1014	 ldr         r1, [sp, #0x14]
  0aa68	e59d0200	 ldr         r0, [sp, #0x200]
  0aa6c	e5900000	 ldr         r0, [r0]
  0aa70	e280e044	 add         lr, r0, #0x44
  0aa74	e59d0200	 ldr         r0, [sp, #0x200]
  0aa78	e59e4000	 ldr         r4, [lr]
  0aa7c	e1a0e00f	 mov         lr, pc
  0aa80	e12fff14	 bx          r4

; 3148 :                     DEBUGMSG(ZONE_TRANSFER, (TEXT("Request OUT data for ep %d size %d\r\n"), csrIndex, cbToTransfer));

  0aa84	e59f3468	 ldr         r3, [pc, #0x468]
  0aa88	e5933440	 ldr         r3, [r3, #0x440]
  0aa8c	e3130c01	 tst         r3, #1, 24
  0aa90	0a000007	 beq         |$LN102@ProcessTD|
  0aa94	e59d2068	 ldr         r2, [sp, #0x68]
  0aa98	e5dd301c	 ldrb        r3, [sp, #0x1C]
  0aa9c	e1a01003	 mov         r1, r3
  0aaa0	e59f045c	 ldr         r0, [pc, #0x45C]
  0aaa4	eb000000	 bl          NKDbgPrintfW
  0aaa8	e3a03001	 mov         r3, #1
  0aaac	e58d31dc	 str         r3, [sp, #0x1DC]
  0aab0	ea000001	 b           |$LN103@ProcessTD|
  0aab4		 |$LN102@ProcessTD|
  0aab4	e3a03000	 mov         r3, #0
  0aab8	e58d31dc	 str         r3, [sp, #0x1DC]
  0aabc		 |$LN103@ProcessTD|

; 3149 :                     SETREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].CSR.TxCSR, TXCSR_H_TxPktRdy);                

  0aabc	e59d3020	 ldr         r3, [sp, #0x20]
  0aac0	e283001c	 add         r0, r3, #0x1C
  0aac4	e5dd301c	 ldrb        r3, [sp, #0x1C]
  0aac8	e1a01003	 mov         r1, r3
  0aacc	e3a03010	 mov         r3, #0x10
  0aad0	e0020391	 mul         r2, r1, r3
  0aad4	e5903000	 ldr         r3, [r0]
  0aad8	e0833002	 add         r3, r3, r2
  0aadc	e2831002	 add         r1, r3, #2
  0aae0	e5d13001	 ldrb        r3, [r1, #1]
  0aae4	e1a03403	 mov         r3, r3, lsl #8
  0aae8	e1a02803	 mov         r2, r3, lsl #16
  0aaec	e1a02822	 mov         r2, r2, lsr #16
  0aaf0	e5d13000	 ldrb        r3, [r1]
  0aaf4	e1833002	 orr         r3, r3, r2
  0aaf8	e3833001	 orr         r3, r3, #1
  0aafc	e1a0e803	 mov         lr, r3, lsl #16
  0ab00	e1a0e82e	 mov         lr, lr, lsr #16
  0ab04	e59d3020	 ldr         r3, [sp, #0x20]
  0ab08	e283001c	 add         r0, r3, #0x1C
  0ab0c	e5dd301c	 ldrb        r3, [sp, #0x1C]
  0ab10	e1a01003	 mov         r1, r3
  0ab14	e3a03010	 mov         r3, #0x10
  0ab18	e0020391	 mul         r2, r1, r3
  0ab1c	e5903000	 ldr         r3, [r0]
  0ab20	e0833002	 add         r3, r3, r2
  0ab24	e2832002	 add         r2, r3, #2
  0ab28	e1a0300e	 mov         r3, lr
  0ab2c	e5c23000	 strb        r3, [r2]
  0ab30	e1a03423	 mov         r3, r3, lsr #8
  0ab34	e5c23001	 strb        r3, [r2, #1]

; 3150 : #if 1
; 3151 :                     if (cbToTransfer > 0)                  

  0ab38	e59d3068	 ldr         r3, [sp, #0x68]
  0ab3c	e3530000	 cmp         r3, #0
  0ab40	9a000003	 bls         |$LN9@ProcessTD|

; 3152 :                         pQTD->SetStatus(STATUS_WAIT_RESPONSE);            

  0ab44	e3a01003	 mov         r1, #3
  0ab48	e59d0018	 ldr         r0, [sp, #0x18]
  0ab4c	eb000000	 bl          |?SetStatus@CQTD@@QAAXK@Z|

; 3153 :                     else

  0ab50	ea00003e	 b           |$LN8@ProcessTD|
  0ab54		 |$LN9@ProcessTD|

; 3154 :                     {
; 3155 :                         UINT32 timeout = 100000;

  0ab54	e3a03b61	 mov         r3, #0x61, 22
  0ab58	e3833e2a	 orr         r3, r3, #0x2A, 28
  0ab5c	e58d307c	 str         r3, [sp, #0x7C]
  0ab60		 |$LN7@ProcessTD|

; 3156 :                         while (INREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].CSR.TxCSR) & TXCSR_H_TxPktRdy && timeout-- > 0);

  0ab60	e59d3020	 ldr         r3, [sp, #0x20]
  0ab64	e283001c	 add         r0, r3, #0x1C
  0ab68	e5dd301c	 ldrb        r3, [sp, #0x1C]
  0ab6c	e1a01003	 mov         r1, r3
  0ab70	e3a03010	 mov         r3, #0x10
  0ab74	e0020391	 mul         r2, r1, r3
  0ab78	e5903000	 ldr         r3, [r0]
  0ab7c	e0833002	 add         r3, r3, r2
  0ab80	e2831002	 add         r1, r3, #2
  0ab84	e5d13001	 ldrb        r3, [r1, #1]
  0ab88	e1a03403	 mov         r3, r3, lsl #8
  0ab8c	e1a02803	 mov         r2, r3, lsl #16
  0ab90	e1a02822	 mov         r2, r2, lsr #16
  0ab94	e5d13000	 ldrb        r3, [r1]
  0ab98	e1833002	 orr         r3, r3, r2
  0ab9c	e3130001	 tst         r3, #1
  0aba0	0a000006	 beq         |$LN6@ProcessTD|
  0aba4	e59d307c	 ldr         r3, [sp, #0x7C]
  0aba8	e3530000	 cmp         r3, #0
  0abac	e59d307c	 ldr         r3, [sp, #0x7C]
  0abb0	e2433001	 sub         r3, r3, #1
  0abb4	e58d307c	 str         r3, [sp, #0x7C]
  0abb8	9a000000	 bls         |$LN6@ProcessTD|
  0abbc	eaffffe7	 b           |$LN7@ProcessTD|
  0abc0		 |$LN6@ProcessTD|

; 3157 : 
; 3158 :                         if (timeout == 0) {

  0abc0	e59d307c	 ldr         r3, [sp, #0x7C]
  0abc4	e3530000	 cmp         r3, #0
  0abc8	1a000016	 bne         |$LN5@ProcessTD|

; 3159 :                             RETAILMSG(1,(L"CHW::ProcessTD: TIMEOUT Sending ZERO_LENGTH PACKET 0x%04X;\r\n",
; 3160 :                             INREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].CSR.TxCSR)));

  0abcc	e59d3020	 ldr         r3, [sp, #0x20]
  0abd0	e283001c	 add         r0, r3, #0x1C
  0abd4	e5dd301c	 ldrb        r3, [sp, #0x1C]
  0abd8	e1a01003	 mov         r1, r3
  0abdc	e3a03010	 mov         r3, #0x10
  0abe0	e0020391	 mul         r2, r1, r3
  0abe4	e5903000	 ldr         r3, [r0]
  0abe8	e0833002	 add         r3, r3, r2
  0abec	e2831002	 add         r1, r3, #2
  0abf0	e5d13001	 ldrb        r3, [r1, #1]
  0abf4	e1a03403	 mov         r3, r3, lsl #8
  0abf8	e1a02803	 mov         r2, r3, lsl #16
  0abfc	e1a02822	 mov         r2, r2, lsr #16
  0ac00	e5d13000	 ldrb        r3, [r1]
  0ac04	e1833002	 orr         r3, r3, r2
  0ac08	e1a01003	 mov         r1, r3
  0ac0c	e59f02ec	 ldr         r0, [pc, #0x2EC]
  0ac10	eb000000	 bl          NKDbgPrintfW
  0ac14	e3a03001	 mov         r3, #1
  0ac18	e58d31e0	 str         r3, [sp, #0x1E0]
  0ac1c	ea000001	 b           |$LN105@ProcessTD|
  0ac20	e3a03000	 mov         r3, #0
  0ac24	e58d31e0	 str         r3, [sp, #0x1E0]
  0ac28		 |$LN105@ProcessTD|
  0ac28		 |$LN5@ProcessTD|

; 3161 :                         }
; 3162 : 					
; 3163 :                         pQTD->SetStatus(STATUS_COMPLETE);

  0ac28	e3a01011	 mov         r1, #0x11
  0ac2c	e59d0018	 ldr         r0, [sp, #0x18]
  0ac30	eb000000	 bl          |?SetStatus@CQTD@@QAAXK@Z|

; 3164 :                         pPipe->CheckForDoneTransfers();

  0ac34	e59d3014	 ldr         r3, [sp, #0x14]
  0ac38	e5933000	 ldr         r3, [r3]
  0ac3c	e2833034	 add         r3, r3, #0x34
  0ac40	e59d0014	 ldr         r0, [sp, #0x14]
  0ac44	e5933000	 ldr         r3, [r3]
  0ac48	e1a0e00f	 mov         lr, pc
  0ac4c	e12fff13	 bx          r3
  0ac50		 |$LN8@ProcessTD|
  0ac50		 |$LN10@ProcessTD|

; 3165 :                     }
; 3166 : #else
; 3167 :                     pQTD->SetStatus(STATUS_WAIT_RESPONSE);            
; 3168 : #endif
; 3169 : 
; 3170 :                 }
; 3171 : 
; 3172 :                 // 3. Wait for transfer interrupt signal                
; 3173 :                 LeaveCriticalSection(&pOTG->regCS);

  0ac50	e59d3020	 ldr         r3, [sp, #0x20]
  0ac54	e2830038	 add         r0, r3, #0x38
  0ac58	eb000000	 bl          LeaveCriticalSection

; 3174 :                 bResult = TRUE;

  0ac5c	e3a03001	 mov         r3, #1
  0ac60	e58d3024	 str         r3, [sp, #0x24]
  0ac64		 |$LN14@ProcessTD|

; 3175 :             }
; 3176 :         }
; 3177 :         break;

  0ac64	ea00009b	 b           |$LN43@ProcessTD|
  0ac68		 |$LN4@ProcessTD|

; 3178 : 
; 3179 :     case (TD_STATUS_IN):
; 3180 :         DEBUGMSG(ZONE_HCD, (TEXT("Process TD_STATUS_IN\r\n")));

  0ac68	e59f3284	 ldr         r3, [pc, #0x284]
  0ac6c	e5933440	 ldr         r3, [r3, #0x440]
  0ac70	e3130001	 tst         r3, #1
  0ac74	0a000004	 beq         |$LN106@ProcessTD|
  0ac78	e59f027c	 ldr         r0, [pc, #0x27C]
  0ac7c	eb000000	 bl          NKDbgPrintfW
  0ac80	e3a03001	 mov         r3, #1
  0ac84	e58d31e4	 str         r3, [sp, #0x1E4]
  0ac88	ea000001	 b           |$LN107@ProcessTD|
  0ac8c		 |$LN106@ProcessTD|
  0ac8c	e3a03000	 mov         r3, #0
  0ac90	e58d31e4	 str         r3, [sp, #0x1E4]
  0ac94		 |$LN107@ProcessTD|

; 3181 :         if (endpoint != 0) 

  0ac94	e5dd3204	 ldrb        r3, [sp, #0x204]
  0ac98	e3530000	 cmp         r3, #0
  0ac9c	0a00000f	 beq         |$LN3@ProcessTD|

; 3182 :         {
; 3183 :             DEBUGMSG(ZONE_ERROR, (TEXT("Control Pipe for ep %d not support\r\n"), endpoint));

  0aca0	e59f324c	 ldr         r3, [pc, #0x24C]
  0aca4	e5933440	 ldr         r3, [r3, #0x440]
  0aca8	e3130901	 tst         r3, #1, 18
  0acac	0a000006	 beq         |$LN108@ProcessTD|
  0acb0	e5dd3204	 ldrb        r3, [sp, #0x204]
  0acb4	e1a01003	 mov         r1, r3
  0acb8	e59f0238	 ldr         r0, [pc, #0x238]
  0acbc	eb000000	 bl          NKDbgPrintfW
  0acc0	e3a03001	 mov         r3, #1
  0acc4	e58d31e8	 str         r3, [sp, #0x1E8]
  0acc8	ea000001	 b           |$LN109@ProcessTD|
  0accc		 |$LN108@ProcessTD|
  0accc	e3a03000	 mov         r3, #0
  0acd0	e58d31e8	 str         r3, [sp, #0x1E8]
  0acd4		 |$LN109@ProcessTD|

; 3184 :             bResult = FALSE;

  0acd4	e3a03000	 mov         r3, #0
  0acd8	e58d3024	 str         r3, [sp, #0x24]

; 3185 :         }
; 3186 :         else

  0acdc	ea00007d	 b           |$LN2@ProcessTD|
  0ace0		 |$LN3@ProcessTD|

; 3187 :         {
; 3188 :             // Set Index Register
; 3189 :             EnterCriticalSection(&pOTG->regCS);    

  0ace0	e59d3020	 ldr         r3, [sp, #0x20]
  0ace4	e2830038	 add         r0, r3, #0x38
  0ace8	eb000000	 bl          EnterCriticalSection

; 3190 :             OUTREG8(&pOTG->pUsbGenRegs->Index, INDEX(endpoint));

  0acec	e5dd3204	 ldrb        r3, [sp, #0x204]
  0acf0	e203300f	 and         r3, r3, #0xF
  0acf4	e20320ff	 and         r2, r3, #0xFF
  0acf8	e59d3020	 ldr         r3, [sp, #0x20]
  0acfc	e2833020	 add         r3, r3, #0x20
  0ad00	e5933000	 ldr         r3, [r3]
  0ad04	e283300e	 add         r3, r3, #0xE
  0ad08	e5c32000	 strb        r2, [r3]

; 3191 :             csrIndex = INDEX(endpoint);

  0ad0c	e5dd3204	 ldrb        r3, [sp, #0x204]
  0ad10	e203300f	 and         r3, r3, #0xF
  0ad14	e20330ff	 and         r3, r3, #0xFF
  0ad18	e5cd301c	 strb        r3, [sp, #0x1C]

; 3192 : 
; 3193 :             // 0. Clear any thing before access - as it has some invalid IN transcation from analyzer
; 3194 :             CLRREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].CSR.CSR0, CSR0_H_RxPktRdy|CSR0_H_ReqPkt|CSR0_H_SetupPkt);

  0ad1c	e59d3020	 ldr         r3, [sp, #0x20]
  0ad20	e283001c	 add         r0, r3, #0x1C
  0ad24	e5dd301c	 ldrb        r3, [sp, #0x1C]
  0ad28	e1a01003	 mov         r1, r3
  0ad2c	e3a03010	 mov         r3, #0x10
  0ad30	e0020391	 mul         r2, r1, r3
  0ad34	e5903000	 ldr         r3, [r0]
  0ad38	e0833002	 add         r3, r3, r2
  0ad3c	e2831002	 add         r1, r3, #2
  0ad40	e5d13001	 ldrb        r3, [r1, #1]
  0ad44	e1a03403	 mov         r3, r3, lsl #8
  0ad48	e1a02803	 mov         r2, r3, lsl #16
  0ad4c	e1a02822	 mov         r2, r2, lsr #16
  0ad50	e5d13000	 ldrb        r3, [r1]
  0ad54	e1833002	 orr         r3, r3, r2
  0ad58	e1a02003	 mov         r2, r3
  0ad5c	e3e03029	 mvn         r3, #0x29
  0ad60	e0023003	 and         r3, r2, r3
  0ad64	e1a0e803	 mov         lr, r3, lsl #16
  0ad68	e1a0e82e	 mov         lr, lr, lsr #16
  0ad6c	e59d3020	 ldr         r3, [sp, #0x20]
  0ad70	e283001c	 add         r0, r3, #0x1C
  0ad74	e5dd301c	 ldrb        r3, [sp, #0x1C]
  0ad78	e1a01003	 mov         r1, r3
  0ad7c	e3a03010	 mov         r3, #0x10
  0ad80	e0020391	 mul         r2, r1, r3
  0ad84	e5903000	 ldr         r3, [r0]
  0ad88	e0833002	 add         r3, r3, r2
  0ad8c	e2832002	 add         r2, r3, #2
  0ad90	e1a0300e	 mov         r3, lr
  0ad94	e5c23000	 strb        r3, [r2]
  0ad98	e1a03423	 mov         r3, r3, lsr #8
  0ad9c	e5c23001	 strb        r3, [r2, #1]

; 3195 : 
; 3196 : #ifdef DEBUG
; 3197 :             {
; 3198 :                 DWORD DataToggle = (INREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].CSR.CSR0) & CSR0_H_DataToggle);

  0ada0	e59d3020	 ldr         r3, [sp, #0x20]
  0ada4	e283001c	 add         r0, r3, #0x1C
  0ada8	e5dd301c	 ldrb        r3, [sp, #0x1C]
  0adac	e1a01003	 mov         r1, r3
  0adb0	e3a03010	 mov         r3, #0x10
  0adb4	e0020391	 mul         r2, r1, r3
  0adb8	e5903000	 ldr         r3, [r0]
  0adbc	e0833002	 add         r3, r3, r2
  0adc0	e2831002	 add         r1, r3, #2
  0adc4	e5d13001	 ldrb        r3, [r1, #1]
  0adc8	e1a03403	 mov         r3, r3, lsl #8
  0adcc	e1a02803	 mov         r2, r3, lsl #16
  0add0	e1a02822	 mov         r2, r2, lsr #16
  0add4	e5d13000	 ldrb        r3, [r1]
  0add8	e1833002	 orr         r3, r3, r2
  0addc	e2033c02	 and         r3, r3, #2, 24
  0ade0	e58d3080	 str         r3, [sp, #0x80]

; 3199 :                 DEBUGMSG(ZONE_HCD, (TEXT("[DataToggle]:Request:Status IN Trasaction on EP 0 Device Addr %d DataToggle = 0x%x\r\n"), 
; 3200 :                         pPipe->GetReservedDeviceAddr(), DataToggle));

  0ade4	e59f3108	 ldr         r3, [pc, #0x108]
  0ade8	e5933440	 ldr         r3, [r3, #0x440]
  0adec	e3130001	 tst         r3, #1
  0adf0	0a00000f	 beq         |$LN110@ProcessTD|
  0adf4	e59d3014	 ldr         r3, [sp, #0x14]
  0adf8	e5933000	 ldr         r3, [r3]
  0adfc	e2833028	 add         r3, r3, #0x28
  0ae00	e59d0014	 ldr         r0, [sp, #0x14]
  0ae04	e5933000	 ldr         r3, [r3]
  0ae08	e1a0e00f	 mov         lr, pc
  0ae0c	e12fff13	 bx          r3
  0ae10	e5cd01ec	 strb        r0, [sp, #0x1EC]
  0ae14	e59d2080	 ldr         r2, [sp, #0x80]
  0ae18	e5dd31ec	 ldrb        r3, [sp, #0x1EC]
  0ae1c	e1a01003	 mov         r1, r3
  0ae20	e59f00c8	 ldr         r0, [pc, #0xC8]
  0ae24	eb000000	 bl          NKDbgPrintfW
  0ae28	e3a03001	 mov         r3, #1
  0ae2c	e58d31f0	 str         r3, [sp, #0x1F0]
  0ae30	ea000001	 b           |$LN111@ProcessTD|
  0ae34		 |$LN110@ProcessTD|
  0ae34	e3a03000	 mov         r3, #0
  0ae38	e58d31f0	 str         r3, [sp, #0x1F0]
  0ae3c		 |$LN111@ProcessTD|

; 3201 :             }
; 3202 : #endif
; 3203 : 
; 3204 :             // 1. Set the StatusPkt, TxPktRdy
; 3205 :             SETREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].CSR.CSR0, (CSR0_H_StatusPkt|CSR0_H_ReqPkt));            

  0ae3c	e59d3020	 ldr         r3, [sp, #0x20]
  0ae40	e283001c	 add         r0, r3, #0x1C
  0ae44	e5dd301c	 ldrb        r3, [sp, #0x1C]
  0ae48	e1a01003	 mov         r1, r3
  0ae4c	e3a03010	 mov         r3, #0x10
  0ae50	e0020391	 mul         r2, r1, r3
  0ae54	e5903000	 ldr         r3, [r0]
  0ae58	e0833002	 add         r3, r3, r2
  0ae5c	e2831002	 add         r1, r3, #2
  0ae60	e5d13001	 ldrb        r3, [r1, #1]
  0ae64	e1a03403	 mov         r3, r3, lsl #8
  0ae68	e1a02803	 mov         r2, r3, lsl #16
  0ae6c	e1a02822	 mov         r2, r2, lsr #16
  0ae70	e5d13000	 ldrb        r3, [r1]
  0ae74	e1833002	 orr         r3, r3, r2
  0ae78	e3833060	 orr         r3, r3, #0x60
  0ae7c	e1a0e803	 mov         lr, r3, lsl #16
  0ae80	e1a0e82e	 mov         lr, lr, lsr #16
  0ae84	e59d3020	 ldr         r3, [sp, #0x20]
  0ae88	e283001c	 add         r0, r3, #0x1C
  0ae8c	e5dd301c	 ldrb        r3, [sp, #0x1C]
  0ae90	e1a01003	 mov         r1, r3
  0ae94	e3a03010	 mov         r3, #0x10
  0ae98	e0020391	 mul         r2, r1, r3
  0ae9c	e5903000	 ldr         r3, [r0]
  0aea0	e0833002	 add         r3, r3, r2
  0aea4	e2832002	 add         r2, r3, #2
  0aea8	e1a0300e	 mov         r3, lr
  0aeac	e5c23000	 strb        r3, [r2]
  0aeb0	e1a03423	 mov         r3, r3, lsr #8
  0aeb4	e5c23001	 strb        r3, [r2, #1]

; 3206 : 
; 3207 :             // 2. Wait for transfer interrupt signal
; 3208 :             pQTD->SetStatus(STATUS_WAIT_RESPONSE);

  0aeb8	e3a01003	 mov         r1, #3
  0aebc	e59d0018	 ldr         r0, [sp, #0x18]
  0aec0	eb000000	 bl          |?SetStatus@CQTD@@QAAXK@Z|

; 3209 :             LeaveCriticalSection(&pOTG->regCS);

  0aec4	e59d3020	 ldr         r3, [sp, #0x20]
  0aec8	e2830038	 add         r0, r3, #0x38
  0aecc	eb000000	 bl          LeaveCriticalSection

; 3210 :             bResult = TRUE;

  0aed0	e3a03001	 mov         r3, #1
  0aed4	e58d3024	 str         r3, [sp, #0x24]
  0aed8		 |$LN2@ProcessTD|
  0aed8		 |$LN1@ProcessTD|
  0aed8		 |$LN43@ProcessTD|

; 3211 :         }
; 3212 : 
; 3213 :         break;
; 3214 :     
; 3215 :     default:
; 3216 :         break;
; 3217 :     }
; 3218 :                 
; 3219 :     return bResult;

  0aed8	e59d3024	 ldr         r3, [sp, #0x24]
  0aedc	e58d3084	 str         r3, [sp, #0x84]
  0aee0		 |$LN46@ProcessTD|

; 3220 : 
; 3221 : }

  0aee0	e59d0084	 ldr         r0, [sp, #0x84]
  0aee4	e28ddf7d	 add         sp, sp, #0x7D, 30
  0aee8	e89d6010	 ldmia       sp, {r4, sp, lr}
  0aeec	e12fff1e	 bx          lr
  0aef0		 |$LN122@ProcessTD|
  0aef0		 |$LN123@ProcessTD|
  0aef0	00000000	 DCD         |??_C@_1KK@GEMENNGO@?$AA?$FL?$AAD?$AAa?$AAt?$AAa?$AAT?$AAo?$AAg?$AAg?$AAl?$AAe?$AA?$FN?$AA?3?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?3?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?5?$AAI?$AAN?$AA?5?$AAT@|
  0aef4		 |$LN124@ProcessTD|
  0aef4	00000000	 DCD         |dpCurSettings|
  0aef8		 |$LN125@ProcessTD|
  0aef8	00000000	 DCD         |??_C@_1EK@IEBKKGBL@?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?5?$AAP?$AAi?$AAp?$AAe?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAe?$AAp?$AA?5?$AA?$CF?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAu?$AAp?$AAp?$AAo@|
  0aefc		 |$LN126@ProcessTD|
  0aefc	00000000	 DCD         |??_C@_1CO@MJLAGBNE@?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AA?5?$AAT?$AAD?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAI?$AAN?$AA?$AN?$AA?6?$AA?$AA@|
  0af00		 |$LN127@ProcessTD|
  0af00	00000000	 DCD         |??_C@_1HK@FIIANMKL@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAT?$AAD?$AA?3?$AA?5?$AAT?$AAI?$AAM?$AAE?$AAO?$AAU?$AAT?$AA?5?$AAS?$AAe?$AAn?$AAd?$AAi?$AAn?$AAg?$AA?5@|
  0af04		 |$LN128@ProcessTD|
  0af04	00000000	 DCD         |??_C@_1EK@DODDBDFL@?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?5?$AAO?$AAU?$AAT?$AA?5?$AAd?$AAa?$AAt?$AAa?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAe?$AAp?$AA?5?$AA?$CF?$AAd?$AA?5?$AAs?$AAi?$AAz?$AAe?$AA?5@|
  0af08		 |$LN129@ProcessTD|
  0af08	00000000	 DCD         |??_C@_1KK@FOIFGAOM@?$AA?$FL?$AAD?$AAa?$AAt?$AAa?$AAT?$AAo?$AAg?$AAg?$AAl?$AAe?$AA?$FN?$AA?3?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?3?$AAD?$AAa?$AAt?$AAa?$AA?5?$AAO?$AAU?$AAT?$AA?5?$AAT?$AAr@|
  0af0c		 |$LN130@ProcessTD|
  0af0c	00000000	 DCD         |??_C@_1FM@MEOLIMCM@?$AAD?$AAa?$AAt?$AAa?$AA?5?$AAO?$AAU?$AAT?$AA?5?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?5?$AAr?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAe?$AAd?$AA?5?$AAw?$AAi?$AAt?$AAh?$AA?5?$AAT@|
  0af10		 |$LN131@ProcessTD|
  0af10	00000000	 DCD         |??_C@_1FK@MIONNJHP@?$AAD?$AAa?$AAt?$AAa?$AA?5?$AAO?$AAU?$AAT?$AA?5?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?5?$AAr?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAe?$AAd?$AA?5?$AAw?$AAi?$AAt?$AAh?$AA?5?$AAC@|
  0af14		 |$LN132@ProcessTD|
  0af14	00000000	 DCD         |??_C@_1EI@MNPANNOD@?$AAS?$AAo?$AAm?$AAe?$AAt?$AAh?$AAi?$AAn?$AAg?$AA?5?$AAw?$AAr?$AAo?$AAn?$AAg?$AA?5?$AAw?$AAi?$AAt?$AAh?$AA?5?$AAs?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?5?$AA?$CF?$AAd?$AA?$CB?$AA?$CB@|
  0af18		 |$LN133@ProcessTD|
  0af18	00000000	 DCD         |??_C@_1HO@FBBOJPEG@?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAT?$AAD?$AA?3?$AA?3?$AAW?$AAr?$AAi?$AAt?$AAe?$AAD?$AAM?$AAA?$AA?5?$AAa?$AAt?$AA?5?$AAe?$AAp?$AA?5?$AA?$CF?$AAd?$AA?5?$AA?$CI?$AAm?$AAa@|
  0af1c		 |$LN134@ProcessTD|
  0af1c	00000000	 DCD         |??_C@_1GG@IBBFPGMN@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAc?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?0?$AA?5?$AAg@|
  0af20		 |$LN135@ProcessTD|
  0af20	00000000	 DCD         |??_C@_1HA@MMCAFFPC@?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?5?$AAO?$AAU?$AAT?$AA?5?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAT?$AAD?$AA?5?$AAE?$AAP?$AA?5?$AA?$CF?$AAd?$AA?5?$AAD?$AAe?$AAv?$AA?5@|
  0af24		 |$LN136@ProcessTD|
  0af24	00000000	 DCD         |??_C@_1FK@BIHNGMAC@?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AA?5?$AAT?$AAD?$AA_?$AAD?$AAA?$AAT?$AAA?$AA_?$AAO?$AAU?$AAT?$AA?5?$AAa?$AAt?$AA?5?$AAe?$AAn?$AAd?$AAp?$AAo?$AAi?$AAn?$AAt?$AA?5@|
  0af28		 |$LN137@ProcessTD|
  0af28	00000000	 DCD         |??_C@_1DO@CEKBGLO@?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?5?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAe?$AAp?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  0af2c		 |$LN138@ProcessTD|
  0af2c	00000000	 DCD         |??_C@_1JK@PFLBOLA@?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?5?$AAO?$AAU?$AAT?$AA?5?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAE?$AAP?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5@|
  0af30		 |$LN139@ProcessTD|
  0af30	00000000	 DCD         |??_C@_1KI@BLJPJKNI@?$AA?$FL?$AAD?$AAa?$AAt?$AAa?$AAT?$AAo?$AAg?$AAg?$AAl?$AAe?$AA?$FN?$AA?3?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?3?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?5?$AAO?$AAU?$AAT?$AA?5@|
  0af34		 |$M45769|

			 ENDP  ; |?ProcessTD@CHW@@UAAHEPAX@Z|, CHW::ProcessTD

; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\musb\musbhcd\musbmhdrc\ctd.h

  00000			 AREA	 |.pdata|, PDATA
|$T45809| DCD	|$LN5@GetStatus|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetStatus@CQTD@@QAAKXZ| PROC		; CQTD::GetStatus

; 90   :     DWORD GetStatus() { return m_dwStatus; };

  00000		 |$LN5@GetStatus|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M45806|
  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e2833028	 add         r3, r3, #0x28
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3000	 str         r3, [sp]
  00020	e59d0000	 ldr         r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M45807|

			 ENDP  ; |?GetStatus@CQTD@@QAAKXZ|, CQTD::GetStatus


  00000			 AREA	 |.pdata|, PDATA
|$T45817| DCD	|$LN5@GetTDType|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetTDType@CQTD@@QAAKXZ| PROC		; CQTD::GetTDType

; 92   :     DWORD GetTDType() { return m_dwTDType; };

  00000		 |$LN5@GetTDType|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M45814|
  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e283300c	 add         r3, r3, #0xC
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3000	 str         r3, [sp]
  00020	e59d0000	 ldr         r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M45815|

			 ENDP  ; |?GetTDType@CQTD@@QAAKXZ|, CQTD::GetTDType


  00000			 AREA	 |.pdata|, PDATA
|$T45825| DCD	|$LN5@GetPAData|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetPAData@CQTD@@QAAKXZ| PROC		; CQTD::GetPAData

; 94   :     DWORD GetPAData() { return m_dwPAData; };

  00000		 |$LN5@GetPAData|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M45822|
  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e2833010	 add         r3, r3, #0x10
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3000	 str         r3, [sp]
  00020	e59d0000	 ldr         r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M45823|

			 ENDP  ; |?GetPAData@CQTD@@QAAKXZ|, CQTD::GetPAData


  00000			 AREA	 |.pdata|, PDATA
|$T45833| DCD	|$LN5@GetVAData|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetVAData@CQTD@@QAAKXZ| PROC		; CQTD::GetVAData

; 95   :     DWORD GetVAData() { return m_dwVAData; };

  00000		 |$LN5@GetVAData|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M45830|
  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e2833014	 add         r3, r3, #0x14
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3000	 str         r3, [sp]
  00020	e59d0000	 ldr         r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M45831|

			 ENDP  ; |?GetVAData@CQTD@@QAAKXZ|, CQTD::GetVAData


  00000			 AREA	 |.pdata|, PDATA
|$T45841| DCD	|$LN5@GetPacketS|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetPacketSize@CQTD@@QAAKXZ| PROC	; CQTD::GetPacketSize

; 98   :     DWORD GetPacketSize() { return m_dwPacketSize;};    

  00000		 |$LN5@GetPacketS|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M45838|
  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e283302c	 add         r3, r3, #0x2C
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3000	 str         r3, [sp]
  00020	e59d0000	 ldr         r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M45839|

			 ENDP  ; |?GetPacketSize@CQTD@@QAAKXZ|, CQTD::GetPacketSize

; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\musb\musbhcd\musbmhdrc\chw.h

  00000			 AREA	 |.pdata|, PDATA
|$T45851| DCD	|$LN7@GetRxDataA|
	DCD	0x40001a04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetRxDataAvail@CHW@@QAAHE@Z| PROC	; CHW::GetRxDataAvail

; 388  :     BOOL GetRxDataAvail(UCHAR endpoint) { return ((m_intr_rx_avail & (1<<endpoint))? TRUE: FALSE);};

  00000		 |$LN7@GetRxDataA|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd008	 sub         sp, sp, #8
  00010		 |$M45848|
  00010	e59d3010	 ldr         r3, [sp, #0x10]
  00014	e2833c02	 add         r3, r3, #2, 24
  00018	e2833082	 add         r3, r3, #0x82
  0001c	e1d330b0	 ldrh        r3, [r3]
  00020	e1a01003	 mov         r1, r3
  00024	e5dd3014	 ldrb        r3, [sp, #0x14]
  00028	e1a02003	 mov         r2, r3
  0002c	e3a03001	 mov         r3, #1
  00030	e1a03213	 mov         r3, r3, lsl r2
  00034	e1110003	 tst         r1, r3
  00038	0a000002	 beq         |$LN3@GetRxDataA|
  0003c	e3a03001	 mov         r3, #1
  00040	e58d3004	 str         r3, [sp, #4]
  00044	ea000001	 b           |$LN4@GetRxDataA|
  00048		 |$LN3@GetRxDataA|
  00048	e3a03000	 mov         r3, #0
  0004c	e58d3004	 str         r3, [sp, #4]
  00050		 |$LN4@GetRxDataA|
  00050	e59d3004	 ldr         r3, [sp, #4]
  00054	e58d3000	 str         r3, [sp]
  00058	e59d0000	 ldr         r0, [sp]
  0005c	e28dd008	 add         sp, sp, #8
  00060	e89d6000	 ldmia       sp, {sp, lr}
  00064	e12fff1e	 bx          lr
  00068		 |$M45849|

			 ENDP  ; |?GetRxDataAvail@CHW@@QAAHE@Z|, CHW::GetRxDataAvail


  00000			 AREA	 |.pdata|, PDATA
|$T45858| DCD	|$LN5@ClrRxDataA|
	DCD	0x40001503
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ClrRxDataAvail@CHW@@QAAXE@Z| PROC	; CHW::ClrRxDataAvail

; 389  :     void ClrRxDataAvail(UCHAR endpoint) { (m_intr_rx_avail &=~(1<<endpoint));};    

  00000		 |$LN5@ClrRxDataA|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M45855|
  0000c	e59d3008	 ldr         r3, [sp, #8]
  00010	e2833c02	 add         r3, r3, #2, 24
  00014	e2831082	 add         r1, r3, #0x82
  00018	e5dd300c	 ldrb        r3, [sp, #0xC]
  0001c	e1a02003	 mov         r2, r3
  00020	e3a03001	 mov         r3, #1
  00024	e1a03213	 mov         r3, r3, lsl r2
  00028	e1e02003	 mvn         r2, r3
  0002c	e1d130b0	 ldrh        r3, [r1]
  00030	e0031002	 and         r1, r3, r2
  00034	e59d3008	 ldr         r3, [sp, #8]
  00038	e2833c02	 add         r3, r3, #2, 24
  0003c	e2832082	 add         r2, r3, #0x82
  00040	e1a03801	 mov         r3, r1, lsl #16
  00044	e1a03823	 mov         r3, r3, lsr #16
  00048	e1c230b0	 strh        r3, [r2]
  0004c	e89d6000	 ldmia       sp, {sp, lr}
  00050	e12fff1e	 bx          lr
  00054		 |$M45856|

			 ENDP  ; |?ClrRxDataAvail@CHW@@QAAXE@Z|, CHW::ClrRxDataAvail

	EXPORT	|?ResetEndPoint@CHW@@QAAXE@Z|		; CHW::ResetEndPoint

  001e0			 AREA	 |.pdata|, PDATA
|$T45867| DCD	|$LN8@ResetEndPo|
	DCD	0x40002a04
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\musb\musbhcd\musbmhdrc\chw.cpp

  0af34			 AREA	 |.text|, CODE, ARM

  0af34		 |?ResetEndPoint@CHW@@QAAXE@Z| PROC	; CHW::ResetEndPoint

; 3230 : {

  0af34		 |$LN8@ResetEndPo|
  0af34	e1a0c00d	 mov         r12, sp
  0af38	e92d0003	 stmdb       sp!, {r0, r1}
  0af3c	e92d5000	 stmdb       sp!, {r12, lr}
  0af40	e24dd018	 sub         sp, sp, #0x18
  0af44		 |$M45864|

; 3231 :     PHSMUSB_T pOTG;
; 3232 :     DWORD csrIndex;
; 3233 :     DWORD dir;
; 3234 :     UCHAR endpoint;
; 3235 : 
; 3236 :     pOTG = (PHSMUSB_T)GetOTGContext();

  0af44	e59d0020	 ldr         r0, [sp, #0x20]
  0af48	eb000000	 bl          |?GetOTGContext@CHcd@@QAAPAXXZ|
  0af4c	e58d0010	 str         r0, [sp, #0x10]
  0af50	e59d3010	 ldr         r3, [sp, #0x10]
  0af54	e58d3008	 str         r3, [sp, #8]

; 3237 :     if (pOTG == NULL)

  0af58	e59d3008	 ldr         r3, [sp, #8]
  0af5c	e3530000	 cmp         r3, #0
  0af60	1a000009	 bne         |$LN1@ResetEndPo|

; 3238 :     {
; 3239 :         RETAILMSG(1, (TEXT("Failed to read the FIFO for ep %d\r\n"), endpointAddress));

  0af64	e5dd3024	 ldrb        r3, [sp, #0x24]
  0af68	e1a01003	 mov         r1, r3
  0af6c	e59f0064	 ldr         r0, [pc, #0x64]
  0af70	eb000000	 bl          NKDbgPrintfW
  0af74	e3a03001	 mov         r3, #1
  0af78	e58d3014	 str         r3, [sp, #0x14]
  0af7c	ea000001	 b           |$LN5@ResetEndPo|
  0af80	e3a03000	 mov         r3, #0
  0af84	e58d3014	 str         r3, [sp, #0x14]
  0af88		 |$LN5@ResetEndPo|

; 3240 :         return;

  0af88	ea00000f	 b           |$LN2@ResetEndPo|
  0af8c		 |$LN1@ResetEndPo|

; 3241 :     }
; 3242 : 
; 3243 :     csrIndex = INDEX(endpointAddress);

  0af8c	e5dd3024	 ldrb        r3, [sp, #0x24]
  0af90	e203300f	 and         r3, r3, #0xF
  0af94	e58d3004	 str         r3, [sp, #4]

; 3244 :     dir = USB_ENDPOINT_DIRECTION_IN(endpointAddress);

  0af98	e5dd3024	 ldrb        r3, [sp, #0x24]
  0af9c	e2033080	 and         r3, r3, #0x80
  0afa0	e58d300c	 str         r3, [sp, #0xC]

; 3245 :     endpoint = USB_ENDPOINT(endpointAddress);

  0afa4	e5dd3024	 ldrb        r3, [sp, #0x24]
  0afa8	e203300f	 and         r3, r3, #0xF
  0afac	e20330ff	 and         r3, r3, #0xFF
  0afb0	e5cd3000	 strb        r3, [sp]

; 3246 : 
; 3247 :     EnterCriticalSection(&pOTG->regCS); 

  0afb4	e59d3008	 ldr         r3, [sp, #8]
  0afb8	e2830038	 add         r0, r3, #0x38
  0afbc	eb000000	 bl          EnterCriticalSection

; 3248 : #if 0
; 3249 :     OUTREG8(&pOTG->pUsbGenRegs->Index, INDEX(endpoint));
; 3250 : 
; 3251 :     DEBUGMSG(ZONE_DEBUG, (TEXT("CHW::ResetEndpoint at ep %d, dir IN %d, csrIndex %d\r\n"),
; 3252 :         endpoint, dir, csrIndex));
; 3253 :     if (USB_ENDPOINT(endpoint) == 0)
; 3254 :     {
; 3255 :         DEBUGMSG(ZONE_HCD, (TEXT("CSR0 register = 0x%x\r\n"), INREG16(&pOTG->pUsbCsrRegs->ep[0].CSR.CSR0)));
; 3256 :         SETREG16(&pOTG->pUsbCsrRegs->ep[0].CSR.CSR0, CSR0_H_FlushFIFO);
; 3257 :     }
; 3258 :     else {
; 3259 :         if (dir)
; 3260 :         {
; 3261 :             SETREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].RxCSR, RXCSR_H_FlushFIFO|RXCSR_H_ClrDataTog);
; 3262 :             CLRREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].RxCSR, RXCSR_H_ReqPkt);
; 3263 :             DEBUGMSG(ZONE_HCD, (TEXT("FlushFIFO::RXCSR (%d) register = 0x%x\r\n"), endpoint, 
; 3264 :                 INREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].RxCSR)));
; 3265 :             DEBUGMSG(ZONE_HCD, (TEXT("FlushFIFO: RxCount(0x%x)\r\n"), INREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].Count.RxCount)));
; 3266 : 
; 3267 : 
; 3268 :         }
; 3269 :         else
; 3270 :         {
; 3271 :             DEBUGMSG(ZONE_HCD, (TEXT("CHW::ResetEndPoint::FlushFIFO::TXCSR (%d) register = 0x%x\r\n"), endpoint, 
; 3272 :                 INREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].CSR.TxCSR)));
; 3273 :             SETREG16(&pOTG->pUsbCsrRegs->ep[csrIndex].CSR.TxCSR, TXCSR_H_FlushFIFO|TXCSR_H_ClrDataTog);
; 3274 :         }
; 3275 :     }
; 3276 : #endif    
; 3277 :     LeaveCriticalSection(&pOTG->regCS);

  0afc0	e59d3008	 ldr         r3, [sp, #8]
  0afc4	e2830038	 add         r0, r3, #0x38
  0afc8	eb000000	 bl          LeaveCriticalSection
  0afcc		 |$LN2@ResetEndPo|

; 3278 : }

  0afcc	e28dd018	 add         sp, sp, #0x18
  0afd0	e89d6000	 ldmia       sp, {sp, lr}
  0afd4	e12fff1e	 bx          lr
  0afd8		 |$LN9@ResetEndPo|
  0afd8		 |$LN10@ResetEndPo|
  0afd8	00000000	 DCD         |??_C@_1EI@KCPHDJG@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAF?$AAI?$AAF?$AAO?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAe?$AAp?$AA?5?$AA?$CF@|
  0afdc		 |$M45865|

			 ENDP  ; |?ResetEndPoint@CHW@@QAAXE@Z|, CHW::ResetEndPoint

	EXPORT	|??_C@_1EO@JGPNOOCC@?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?5?$AA?$CF?$AAd?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAe?$AAp?$AA?5?$AA0?$AA?5?$AA?5?$AAi?$AAs?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAu?$AAn?$AAl?$AAo@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CE@IAFJIEFJ@?$AAL?$AAo?$AAc?$AAk?$AAE?$AAP?$AA0?$AA?5?$AA?$DN?$AA?$DO?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  001e8			 AREA	 |.pdata|, PDATA
|$T45879| DCD	|$LN12@LockEP0|
	DCD	0x40004004

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EO@JGPNOOCC@?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?5?$AA?$CF?$AAd?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAe?$AAp?$AA?5?$AA0?$AA?5?$AA?5?$AAi?$AAs?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAu?$AAn?$AAl?$AAo@| DCB "A"
	DCB	0x0, "d", 0x0, "d", 0x0, "r", 0x0, "e", 0x0, "s", 0x0, "s"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, "f", 0x0, "o"
	DCB	0x0, "r", 0x0, " ", 0x0, "e", 0x0, "p", 0x0, " ", 0x0, "0"
	DCB	0x0, " ", 0x0, " ", 0x0, "i", 0x0, "s", 0x0, " ", 0x0, "n"
	DCB	0x0, "o", 0x0, "t", 0x0, " ", 0x0, "u", 0x0, "n", 0x0, "l"
	DCB	0x0, "o", 0x0, "c", 0x0, "k", 0x0, "e", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@IAFJIEFJ@?$AAL?$AAo?$AAc?$AAk?$AAE?$AAP?$AA0?$AA?5?$AA?$DN?$AA?$DO?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "L"
	DCB	0x0, "o", 0x0, "c", 0x0, "k", 0x0, "E", 0x0, "P", 0x0, "0"
	DCB	0x0, " ", 0x0, "=", 0x0, ">", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  0afdc			 AREA	 |.text|, CODE, ARM

  0afdc		 |?LockEP0@CHW@@UAAHE@Z| PROC		; CHW::LockEP0

; 3286 : {

  0afdc		 |$LN12@LockEP0|
  0afdc	e1a0c00d	 mov         r12, sp
  0afe0	e92d0003	 stmdb       sp!, {r0, r1}
  0afe4	e92d5000	 stmdb       sp!, {r12, lr}
  0afe8	e24dd010	 sub         sp, sp, #0x10
  0afec		 |$M45876|

; 3287 :     BOOL fLock = FALSE;

  0afec	e3a03000	 mov         r3, #0
  0aff0	e58d3000	 str         r3, [sp]

; 3288 : 
; 3289 :     DEBUGMSG(ZONE_HCD, (TEXT("LockEP0 => 0x%x\r\n"), address));

  0aff4	e59f30dc	 ldr         r3, [pc, #0xDC]
  0aff8	e5933440	 ldr         r3, [r3, #0x440]
  0affc	e3130001	 tst         r3, #1
  0b000	0a000006	 beq         |$LN6@LockEP0|
  0b004	e5dd301c	 ldrb        r3, [sp, #0x1C]
  0b008	e1a01003	 mov         r1, r3
  0b00c	e59f00c0	 ldr         r0, [pc, #0xC0]
  0b010	eb000000	 bl          NKDbgPrintfW
  0b014	e3a03001	 mov         r3, #1
  0b018	e58d3008	 str         r3, [sp, #8]
  0b01c	ea000001	 b           |$LN7@LockEP0|
  0b020		 |$LN6@LockEP0|
  0b020	e3a03000	 mov         r3, #0
  0b024	e58d3008	 str         r3, [sp, #8]
  0b028		 |$LN7@LockEP0|

; 3290 : 
; 3291 :     EnterCriticalSection(&m_LockEP0DeviceAddress.hLockCS);

  0b028	e59d3018	 ldr         r3, [sp, #0x18]
  0b02c	e2830fa2	 add         r0, r3, #0xA2, 30
  0b030	eb000000	 bl          EnterCriticalSection

; 3292 : 
; 3293 :     if (m_LockEP0DeviceAddress.ucLockEP == 0xFF)

  0b034	e59d3018	 ldr         r3, [sp, #0x18]
  0b038	e2833fa1	 add         r3, r3, #0xA1, 30
  0b03c	e5d33000	 ldrb        r3, [r3]
  0b040	e35300ff	 cmp         r3, #0xFF
  0b044	1a000006	 bne         |$LN3@LockEP0|

; 3294 :     {
; 3295 :         m_LockEP0DeviceAddress.ucLockEP = address;

  0b048	e59d3018	 ldr         r3, [sp, #0x18]
  0b04c	e2832fa1	 add         r2, r3, #0xA1, 30
  0b050	e5dd301c	 ldrb        r3, [sp, #0x1C]
  0b054	e5c23000	 strb        r3, [r2]

; 3296 :         fLock = TRUE;       

  0b058	e3a03001	 mov         r3, #1
  0b05c	e58d3000	 str         r3, [sp]
  0b060	ea000011	 b           |$LN2@LockEP0|
  0b064		 |$LN3@LockEP0|

; 3297 :     }
; 3298 :     else if (m_LockEP0DeviceAddress.ucLockEP == address)

  0b064	e59d3018	 ldr         r3, [sp, #0x18]
  0b068	e2833fa1	 add         r3, r3, #0xA1, 30
  0b06c	e5d33000	 ldrb        r3, [r3]
  0b070	e1a02003	 mov         r2, r3
  0b074	e5dd301c	 ldrb        r3, [sp, #0x1C]
  0b078	e1520003	 cmp         r2, r3
  0b07c	1a00000a	 bne         |$LN1@LockEP0|

; 3299 :     {
; 3300 :         DEBUGMSG(1, (TEXT("Address %d for ep 0  is not unlocked\r\n"), address));

  0b080	e5dd301c	 ldrb        r3, [sp, #0x1C]
  0b084	e1a01003	 mov         r1, r3
  0b088	e59f0040	 ldr         r0, [pc, #0x40]
  0b08c	eb000000	 bl          NKDbgPrintfW
  0b090	e3a03001	 mov         r3, #1
  0b094	e58d300c	 str         r3, [sp, #0xC]
  0b098	ea000001	 b           |$LN9@LockEP0|
  0b09c	e3a03000	 mov         r3, #0
  0b0a0	e58d300c	 str         r3, [sp, #0xC]
  0b0a4		 |$LN9@LockEP0|

; 3301 :         fLock = TRUE;

  0b0a4	e3a03001	 mov         r3, #1
  0b0a8	e58d3000	 str         r3, [sp]
  0b0ac		 |$LN1@LockEP0|
  0b0ac		 |$LN2@LockEP0|

; 3302 :     }    
; 3303 :     LeaveCriticalSection(&m_LockEP0DeviceAddress.hLockCS);

  0b0ac	e59d3018	 ldr         r3, [sp, #0x18]
  0b0b0	e2830fa2	 add         r0, r3, #0xA2, 30
  0b0b4	eb000000	 bl          LeaveCriticalSection

; 3304 :     return fLock;

  0b0b8	e59d3000	 ldr         r3, [sp]
  0b0bc	e58d3004	 str         r3, [sp, #4]

; 3305 : }

  0b0c0	e59d0004	 ldr         r0, [sp, #4]
  0b0c4	e28dd010	 add         sp, sp, #0x10
  0b0c8	e89d6000	 ldmia       sp, {sp, lr}
  0b0cc	e12fff1e	 bx          lr
  0b0d0		 |$LN13@LockEP0|
  0b0d0		 |$LN14@LockEP0|
  0b0d0	00000000	 DCD         |??_C@_1EO@JGPNOOCC@?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?5?$AA?$CF?$AAd?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAe?$AAp?$AA?5?$AA0?$AA?5?$AA?5?$AAi?$AAs?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAu?$AAn?$AAl?$AAo@|
  0b0d4		 |$LN15@LockEP0|
  0b0d4	00000000	 DCD         |??_C@_1CE@IAFJIEFJ@?$AAL?$AAo?$AAc?$AAk?$AAE?$AAP?$AA0?$AA?5?$AA?$DN?$AA?$DO?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  0b0d8		 |$LN16@LockEP0|
  0b0d8	00000000	 DCD         |dpCurSettings|
  0b0dc		 |$M45877|

			 ENDP  ; |?LockEP0@CHW@@UAAHE@Z|, CHW::LockEP0

	EXPORT	|??_C@_1GG@GJCBHNOH@?$AAC?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAu?$AAn?$AAl?$AAo?$AAc?$AAk?$AA?5?$AAa?$AAs?$AA?5?$AAu?$AAs?$AAe?$AAd?$AA?5?$AAb?$AAy?$AA?5?$AAo?$AAt?$AAh?$AAe?$AAr?$AA?5?$AAd@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@MKKCAHJF@?$AAU?$AAn?$AAL?$AAo?$AAc?$AAk?$AAE?$AAP?$AA0?$AA?5?$AA?$DN?$AA?$DO?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  001f0			 AREA	 |.pdata|, PDATA
|$T45892| DCD	|$LN11@UnlockEP0|
	DCD	0x40003204

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GG@GJCBHNOH@?$AAC?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAu?$AAn?$AAl?$AAo?$AAc?$AAk?$AA?5?$AAa?$AAs?$AA?5?$AAu?$AAs?$AAe?$AAd?$AA?5?$AAb?$AAy?$AA?5?$AAo?$AAt?$AAh?$AAe?$AAr?$AA?5?$AAd@| DCB "C"
	DCB	0x0, "a", 0x0, "n", 0x0, "n", 0x0, "o", 0x0, "t", 0x0, " "
	DCB	0x0, "u", 0x0, "n", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k"
	DCB	0x0, " ", 0x0, "a", 0x0, "s", 0x0, " ", 0x0, "u", 0x0, "s"
	DCB	0x0, "e", 0x0, "d", 0x0, " ", 0x0, "b", 0x0, "y", 0x0, " "
	DCB	0x0, "o", 0x0, "t", 0x0, "h", 0x0, "e", 0x0, "r", 0x0, " "
	DCB	0x0, "d", 0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e"
	DCB	0x0, " ", 0x0, "a", 0x0, "d", 0x0, "d", 0x0, "r", 0x0, "e"
	DCB	0x0, "s", 0x0, "s", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@MKKCAHJF@?$AAU?$AAn?$AAL?$AAo?$AAc?$AAk?$AAE?$AAP?$AA0?$AA?5?$AA?$DN?$AA?$DO?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "U"
	DCB	0x0, "n", 0x0, "L", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, "E"
	DCB	0x0, "P", 0x0, "0", 0x0, " ", 0x0, "=", 0x0, ">", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  0b0dc			 AREA	 |.text|, CODE, ARM

  0b0dc		 |?UnlockEP0@CHW@@UAAXE@Z| PROC		; CHW::UnlockEP0

; 3312 : {

  0b0dc		 |$LN11@UnlockEP0|
  0b0dc	e1a0c00d	 mov         r12, sp
  0b0e0	e92d0003	 stmdb       sp!, {r0, r1}
  0b0e4	e92d5000	 stmdb       sp!, {r12, lr}
  0b0e8	e24dd008	 sub         sp, sp, #8
  0b0ec		 |$M45889|

; 3313 :     DEBUGMSG(ZONE_HCD, (TEXT("UnLockEP0 => 0x%x\r\n"), address));

  0b0ec	e59f30ac	 ldr         r3, [pc, #0xAC]
  0b0f0	e5933440	 ldr         r3, [r3, #0x440]
  0b0f4	e3130001	 tst         r3, #1
  0b0f8	0a000006	 beq         |$LN5@UnlockEP0|
  0b0fc	e5dd3014	 ldrb        r3, [sp, #0x14]
  0b100	e1a01003	 mov         r1, r3
  0b104	e59f0090	 ldr         r0, [pc, #0x90]
  0b108	eb000000	 bl          NKDbgPrintfW
  0b10c	e3a03001	 mov         r3, #1
  0b110	e58d3000	 str         r3, [sp]
  0b114	ea000001	 b           |$LN6@UnlockEP0|
  0b118		 |$LN5@UnlockEP0|
  0b118	e3a03000	 mov         r3, #0
  0b11c	e58d3000	 str         r3, [sp]
  0b120		 |$LN6@UnlockEP0|

; 3314 :     EnterCriticalSection(&m_LockEP0DeviceAddress.hLockCS);

  0b120	e59d3010	 ldr         r3, [sp, #0x10]
  0b124	e2830fa2	 add         r0, r3, #0xA2, 30
  0b128	eb000000	 bl          EnterCriticalSection

; 3315 :     if (m_LockEP0DeviceAddress.ucLockEP == address)

  0b12c	e59d3010	 ldr         r3, [sp, #0x10]
  0b130	e2833fa1	 add         r3, r3, #0xA1, 30
  0b134	e5d33000	 ldrb        r3, [r3]
  0b138	e1a02003	 mov         r2, r3
  0b13c	e5dd3014	 ldrb        r3, [sp, #0x14]
  0b140	e1520003	 cmp         r2, r3
  0b144	1a000004	 bne         |$LN2@UnlockEP0|

; 3316 :         m_LockEP0DeviceAddress.ucLockEP = 0xFF;

  0b148	e59d3010	 ldr         r3, [sp, #0x10]
  0b14c	e2832fa1	 add         r2, r3, #0xA1, 30
  0b150	e3a030ff	 mov         r3, #0xFF
  0b154	e5c23000	 strb        r3, [r2]

; 3317 :     else

  0b158	ea000008	 b           |$LN1@UnlockEP0|
  0b15c		 |$LN2@UnlockEP0|

; 3318 :         DEBUGMSG(1, (TEXT("Cannot unlock as used by other device address %d\r\n"), address));

  0b15c	e5dd3014	 ldrb        r3, [sp, #0x14]
  0b160	e1a01003	 mov         r1, r3
  0b164	e59f002c	 ldr         r0, [pc, #0x2C]
  0b168	eb000000	 bl          NKDbgPrintfW
  0b16c	e3a03001	 mov         r3, #1
  0b170	e58d3004	 str         r3, [sp, #4]
  0b174	ea000001	 b           |$LN8@UnlockEP0|
  0b178	e3a03000	 mov         r3, #0
  0b17c	e58d3004	 str         r3, [sp, #4]
  0b180		 |$LN8@UnlockEP0|
  0b180		 |$LN1@UnlockEP0|

; 3319 :     LeaveCriticalSection(&m_LockEP0DeviceAddress.hLockCS);

  0b180	e59d3010	 ldr         r3, [sp, #0x10]
  0b184	e2830fa2	 add         r0, r3, #0xA2, 30
  0b188	eb000000	 bl          LeaveCriticalSection

; 3320 : }

  0b18c	e28dd008	 add         sp, sp, #8
  0b190	e89d6000	 ldmia       sp, {sp, lr}
  0b194	e12fff1e	 bx          lr
  0b198		 |$LN12@UnlockEP0|
  0b198		 |$LN13@UnlockEP0|
  0b198	00000000	 DCD         |??_C@_1GG@GJCBHNOH@?$AAC?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAu?$AAn?$AAl?$AAo?$AAc?$AAk?$AA?5?$AAa?$AAs?$AA?5?$AAu?$AAs?$AAe?$AAd?$AA?5?$AAb?$AAy?$AA?5?$AAo?$AAt?$AAh?$AAe?$AAr?$AA?5?$AAd@|
  0b19c		 |$LN14@UnlockEP0|
  0b19c	00000000	 DCD         |??_C@_1CI@MKKCAHJF@?$AAU?$AAn?$AAL?$AAo?$AAc?$AAk?$AAE?$AAP?$AA0?$AA?5?$AA?$DN?$AA?$DO?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  0b1a0		 |$LN15@UnlockEP0|
  0b1a0	00000000	 DCD         |dpCurSettings|
  0b1a4		 |$M45890|

			 ENDP  ; |?UnlockEP0@CHW@@UAAXE@Z|, CHW::UnlockEP0


  001f8			 AREA	 |.pdata|, PDATA
|$T45902| DCD	|$LN6@IsDeviceLo|
	DCD	0x40001404
; Function compile flags: /Odtp

  0b1a4			 AREA	 |.text|, CODE, ARM

  0b1a4		 |?IsDeviceLockEP0@CHW@@UAAHE@Z| PROC	; CHW::IsDeviceLockEP0

; 3323 : {

  0b1a4		 |$LN6@IsDeviceLo|
  0b1a4	e1a0c00d	 mov         r12, sp
  0b1a8	e92d0003	 stmdb       sp!, {r0, r1}
  0b1ac	e92d5000	 stmdb       sp!, {r12, lr}
  0b1b0	e24dd004	 sub         sp, sp, #4
  0b1b4		 |$M45899|

; 3324 :     if (m_LockEP0DeviceAddress.ucLockEP == address)

  0b1b4	e59d300c	 ldr         r3, [sp, #0xC]
  0b1b8	e2833fa1	 add         r3, r3, #0xA1, 30
  0b1bc	e5d33000	 ldrb        r3, [r3]
  0b1c0	e1a02003	 mov         r2, r3
  0b1c4	e5dd3010	 ldrb        r3, [sp, #0x10]
  0b1c8	e1520003	 cmp         r2, r3
  0b1cc	1a000002	 bne         |$LN1@IsDeviceLo|

; 3325 :         return TRUE;

  0b1d0	e3a03001	 mov         r3, #1
  0b1d4	e58d3000	 str         r3, [sp]
  0b1d8	ea000001	 b           |$LN2@IsDeviceLo|
  0b1dc		 |$LN1@IsDeviceLo|

; 3326 : 
; 3327 :     return FALSE;

  0b1dc	e3a03000	 mov         r3, #0
  0b1e0	e58d3000	 str         r3, [sp]
  0b1e4		 |$LN2@IsDeviceLo|

; 3328 : }

  0b1e4	e59d0000	 ldr         r0, [sp]
  0b1e8	e28dd004	 add         sp, sp, #4
  0b1ec	e89d6000	 ldmia       sp, {sp, lr}
  0b1f0	e12fff1e	 bx          lr
  0b1f4		 |$M45900|

			 ENDP  ; |?IsDeviceLockEP0@CHW@@UAAHE@Z|, CHW::IsDeviceLockEP0

	EXPORT	|??_C@_1CE@CLLFMJGJ@?$AA?$CL?$AAH?$AAo?$AAs?$AAt?$AA_?$AAR?$AAe?$AAs?$AAu?$AAm?$AAe?$AAI?$AAR?$AAQ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|Host_ResumeIRQ|

  00200			 AREA	 |.pdata|, PDATA
|$T45910| DCD	|$LN7@Host_Resum|
	DCD	0x40001304

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@CLLFMJGJ@?$AA?$CL?$AAH?$AAo?$AAs?$AAt?$AA_?$AAR?$AAe?$AAs?$AAu?$AAm?$AAe?$AAI?$AAR?$AAQ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "H", 0x0, "o", 0x0, "s", 0x0, "t", 0x0, "_", 0x0, "R"
	DCB	0x0, "e", 0x0, "s", 0x0, "u", 0x0, "m", 0x0, "e", 0x0, "I"
	DCB	0x0, "R", 0x0, "Q", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  0b1f4			 AREA	 |.text|, CODE, ARM

  0b1f4		 |Host_ResumeIRQ| PROC

; 3348 : {

  0b1f4		 |$LN7@Host_Resum|
  0b1f4	e1a0c00d	 mov         r12, sp
  0b1f8	e92d0001	 stmdb       sp!, {r0}
  0b1fc	e92d5000	 stmdb       sp!, {r12, lr}
  0b200	e24dd008	 sub         sp, sp, #8
  0b204		 |$M45907|

; 3349 :     UNREFERENCED_PARAMETER(pHSMUSBContext);
; 3350 :     DEBUGMSG(ZONE_DEBUG, (TEXT("+Host_ResumeIRQ\r\n")));

  0b204	ea000004	 b           |$LN3@Host_Resum|
  0b208	e59f002c	 ldr         r0, [pc, #0x2C]
  0b20c	eb000000	 bl          NKDbgPrintfW
  0b210	e3a03001	 mov         r3, #1
  0b214	e58d3004	 str         r3, [sp, #4]
  0b218	ea000001	 b           |$LN4@Host_Resum|
  0b21c		 |$LN3@Host_Resum|
  0b21c	e3a03000	 mov         r3, #0
  0b220	e58d3004	 str         r3, [sp, #4]
  0b224		 |$LN4@Host_Resum|

; 3351 :     return ERROR_SUCCESS;

  0b224	e3a03000	 mov         r3, #0
  0b228	e58d3000	 str         r3, [sp]

; 3352 : }

  0b22c	e59d0000	 ldr         r0, [sp]
  0b230	e28dd008	 add         sp, sp, #8
  0b234	e89d6000	 ldmia       sp, {sp, lr}
  0b238	e12fff1e	 bx          lr
  0b23c		 |$LN8@Host_Resum|
  0b23c		 |$LN9@Host_Resum|
  0b23c	00000000	 DCD         |??_C@_1CE@CLLFMJGJ@?$AA?$CL?$AAH?$AAo?$AAs?$AAt?$AA_?$AAR?$AAe?$AAs?$AAu?$AAm?$AAe?$AAI?$AAR?$AAQ?$AA?$AN?$AA?6?$AA?$AA@|
  0b240		 |$M45908|

			 ENDP  ; |Host_ResumeIRQ|

	EXPORT	|??_C@_1CK@BHAPCCP@?$AAH?$AAo?$AAs?$AAt?$AA_?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAE?$AAP?$AAx?$AAR?$AAx?$AA?9?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EG@DJAKKJPA@?$AAH?$AAo?$AAs?$AAt?$AA_?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAE?$AAP?$AAx?$AAR?$AAx?$AA?5?$AAe?$AAp?$AA?5?$AA?$CF?$AAd?$AA?5?$AAi?$AAn?$AAd?$AAx?$AA?5?$AA?$CF?$AAd?$AA?$CL@| [ DATA ] ; `string'

  00208			 AREA	 |.pdata|, PDATA
|$T45922| DCD	|$LN9@Host_Proce|
	DCD	0x40003d04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CK@BHAPCCP@?$AAH?$AAo?$AAs?$AAt?$AA_?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAE?$AAP?$AAx?$AAR?$AAx?$AA?9?$AA?$AN?$AA?6?$AA?$AA@| DCB "H"
	DCB	0x0, "o", 0x0, "s", 0x0, "t", 0x0, "_", 0x0, "P", 0x0, "r"
	DCB	0x0, "o", 0x0, "c", 0x0, "e", 0x0, "s", 0x0, "s", 0x0, "E"
	DCB	0x0, "P", 0x0, "x", 0x0, "R", 0x0, "x", 0x0, "-", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EG@DJAKKJPA@?$AAH?$AAo?$AAs?$AAt?$AA_?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAE?$AAP?$AAx?$AAR?$AAx?$AA?5?$AAe?$AAp?$AA?5?$AA?$CF?$AAd?$AA?5?$AAi?$AAn?$AAd?$AAx?$AA?5?$AA?$CF?$AAd?$AA?$CL@| DCB "H"
	DCB	0x0, "o", 0x0, "s", 0x0, "t", 0x0, "_", 0x0, "P", 0x0, "r"
	DCB	0x0, "o", 0x0, "c", 0x0, "e", 0x0, "s", 0x0, "s", 0x0, "E"
	DCB	0x0, "P", 0x0, "x", 0x0, "R", 0x0, "x", 0x0, " ", 0x0, "e"
	DCB	0x0, "p", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, "i"
	DCB	0x0, "n", 0x0, "d", 0x0, "x", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, "+", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  0b240			 AREA	 |.text|, CODE, ARM

  0b240		 |Host_ProcessEPxRx| PROC

; 3371 : {        

  0b240		 |$LN9@Host_Proce|
  0b240	e1a0c00d	 mov         r12, sp
  0b244	e92d0003	 stmdb       sp!, {r0, r1}
  0b248	e92d5000	 stmdb       sp!, {r12, lr}
  0b24c	e24dd018	 sub         sp, sp, #0x18
  0b250		 |$M45919|

; 3372 :     PHSMUSB_T pHsUsb = (PHSMUSB_T)pHSMUSBContext;

  0b250	e59d3020	 ldr         r3, [sp, #0x20]
  0b254	e58d3004	 str         r3, [sp, #4]

; 3373 :     SMHCDPdd * pPdd = (SMHCDPdd *)pHsUsb->pContext[HOST_MODE-1];

  0b258	e59d3004	 ldr         r3, [sp, #4]
  0b25c	e2833014	 add         r3, r3, #0x14
  0b260	e5933000	 ldr         r3, [r3]
  0b264	e58d3008	 str         r3, [sp, #8]

; 3374 :     CMhcd *pMhcd = (CMhcd *)pPdd->lpvMHCDMddObject;

  0b268	e59d3008	 ldr         r3, [sp, #8]
  0b26c	e2833004	 add         r3, r3, #4
  0b270	e5933000	 ldr         r3, [r3]
  0b274	e58d3000	 str         r3, [sp]

; 3375 : 
; 3376 :     DEBUGMSG(ZONE_TRANSFER|ZONE_HCD, (TEXT("Host_ProcessEPxRx ep %d indx %d+\r\n"), endpoint, R_RX_INDEX(endpoint)));

  0b278	e59f30ac	 ldr         r3, [pc, #0xAC]
  0b27c	e5933440	 ldr         r3, [r3, #0x440]
  0b280	e2032c01	 and         r2, r3, #1, 24
  0b284	e59f30a0	 ldr         r3, [pc, #0xA0]
  0b288	e5933440	 ldr         r3, [r3, #0x440]
  0b28c	e2033001	 and         r3, r3, #1
  0b290	e1923003	 orrs        r3, r2, r3
  0b294	0a000006	 beq         |$LN3@Host_Proce|
  0b298	e59d2024	 ldr         r2, [sp, #0x24]
  0b29c	e59d1024	 ldr         r1, [sp, #0x24]
  0b2a0	e59f0088	 ldr         r0, [pc, #0x88]
  0b2a4	eb000000	 bl          NKDbgPrintfW
  0b2a8	e3a03001	 mov         r3, #1
  0b2ac	e58d3010	 str         r3, [sp, #0x10]
  0b2b0	ea000001	 b           |$LN4@Host_Proce|
  0b2b4		 |$LN3@Host_Proce|
  0b2b4	e3a03000	 mov         r3, #0
  0b2b8	e58d3010	 str         r3, [sp, #0x10]
  0b2bc		 |$LN4@Host_Proce|

; 3377 :     
; 3378 :     pMhcd->SignalCheckForDoneTransfers((unsigned char)R_RX_INDEX(endpoint), 0);

  0b2bc	e3a02000	 mov         r2, #0
  0b2c0	e59d3024	 ldr         r3, [sp, #0x24]
  0b2c4	e20310ff	 and         r1, r3, #0xFF
  0b2c8	e59d3000	 ldr         r3, [sp]
  0b2cc	e5933000	 ldr         r3, [r3]
  0b2d0	e28330a0	 add         r3, r3, #0xA0
  0b2d4	e59d0000	 ldr         r0, [sp]
  0b2d8	e5933000	 ldr         r3, [r3]
  0b2dc	e1a0e00f	 mov         lr, pc
  0b2e0	e12fff13	 bx          r3

; 3379 :     DEBUGMSG(ZONE_HCD, (TEXT("Host_ProcessEPxRx-\r\n")));

  0b2e4	e59f3040	 ldr         r3, [pc, #0x40]
  0b2e8	e5933440	 ldr         r3, [r3, #0x440]
  0b2ec	e3130001	 tst         r3, #1
  0b2f0	0a000004	 beq         |$LN5@Host_Proce|
  0b2f4	e59f002c	 ldr         r0, [pc, #0x2C]
  0b2f8	eb000000	 bl          NKDbgPrintfW
  0b2fc	e3a03001	 mov         r3, #1
  0b300	e58d3014	 str         r3, [sp, #0x14]
  0b304	ea000001	 b           |$LN6@Host_Proce|
  0b308		 |$LN5@Host_Proce|
  0b308	e3a03000	 mov         r3, #0
  0b30c	e58d3014	 str         r3, [sp, #0x14]
  0b310		 |$LN6@Host_Proce|

; 3380 : 
; 3381 :     return ERROR_SUCCESS;

  0b310	e3a03000	 mov         r3, #0
  0b314	e58d300c	 str         r3, [sp, #0xC]

; 3382 : }

  0b318	e59d000c	 ldr         r0, [sp, #0xC]
  0b31c	e28dd018	 add         sp, sp, #0x18
  0b320	e89d6000	 ldmia       sp, {sp, lr}
  0b324	e12fff1e	 bx          lr
  0b328		 |$LN10@Host_Proce|
  0b328		 |$LN11@Host_Proce|
  0b328	00000000	 DCD         |??_C@_1CK@BHAPCCP@?$AAH?$AAo?$AAs?$AAt?$AA_?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAE?$AAP?$AAx?$AAR?$AAx?$AA?9?$AA?$AN?$AA?6?$AA?$AA@|
  0b32c		 |$LN12@Host_Proce|
  0b32c	00000000	 DCD         |dpCurSettings|
  0b330		 |$LN13@Host_Proce|
  0b330	00000000	 DCD         |??_C@_1EG@DJAKKJPA@?$AAH?$AAo?$AAs?$AAt?$AA_?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAE?$AAP?$AAx?$AAR?$AAx?$AA?5?$AAe?$AAp?$AA?5?$AA?$CF?$AAd?$AA?5?$AAi?$AAn?$AAd?$AAx?$AA?5?$AA?$CF?$AAd?$AA?$CL@|
  0b334		 |$M45920|

			 ENDP  ; |Host_ProcessEPxRx|

	EXPORT	|??_C@_1CK@OOENFHMP@?$AAH?$AAo?$AAs?$AAt?$AA_?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAE?$AAP?$AAx?$AAT?$AAx?$AA?9?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FC@LMINFKG@?$AAH?$AAo?$AAs?$AAt?$AA_?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAE?$AAP?$AAx?$AAT?$AAx?$AA?5?$AAm?$AAa?$AAp?$AAp?$AAe?$AAd?$AA?5?$AAe?$AAp?$AA?5?$AA?$CF?$AAd?$AA?5?$AAi@| [ DATA ] ; `string'
	EXPORT	|Host_ProcessEPxTx|

  00210			 AREA	 |.pdata|, PDATA
|$T45938| DCD	|$LN11@Host_Proce@2|
	DCD	0x40004a04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CK@OOENFHMP@?$AAH?$AAo?$AAs?$AAt?$AA_?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAE?$AAP?$AAx?$AAT?$AAx?$AA?9?$AA?$AN?$AA?6?$AA?$AA@| DCB "H"
	DCB	0x0, "o", 0x0, "s", 0x0, "t", 0x0, "_", 0x0, "P", 0x0, "r"
	DCB	0x0, "o", 0x0, "c", 0x0, "e", 0x0, "s", 0x0, "s", 0x0, "E"
	DCB	0x0, "P", 0x0, "x", 0x0, "T", 0x0, "x", 0x0, "-", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FC@LMINFKG@?$AAH?$AAo?$AAs?$AAt?$AA_?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAE?$AAP?$AAx?$AAT?$AAx?$AA?5?$AAm?$AAa?$AAp?$AAp?$AAe?$AAd?$AA?5?$AAe?$AAp?$AA?5?$AA?$CF?$AAd?$AA?5?$AAi@| DCB "H"
	DCB	0x0, "o", 0x0, "s", 0x0, "t", 0x0, "_", 0x0, "P", 0x0, "r"
	DCB	0x0, "o", 0x0, "c", 0x0, "e", 0x0, "s", 0x0, "s", 0x0, "E"
	DCB	0x0, "P", 0x0, "x", 0x0, "T", 0x0, "x", 0x0, " ", 0x0, "m"
	DCB	0x0, "a", 0x0, "p", 0x0, "p", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "e", 0x0, "p", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, " "
	DCB	0x0, "i", 0x0, "n", 0x0, "d", 0x0, "x", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  0b334			 AREA	 |.text|, CODE, ARM

  0b334		 |Host_ProcessEPxTx| PROC

; 3402 : {        

  0b334		 |$LN11@Host_Proce@2|
  0b334	e1a0c00d	 mov         r12, sp
  0b338	e92d0003	 stmdb       sp!, {r0, r1}
  0b33c	e92d5000	 stmdb       sp!, {r12, lr}
  0b340	e24dd01c	 sub         sp, sp, #0x1C
  0b344		 |$M45935|

; 3403 :     PHSMUSB_T pHsUsb = (PHSMUSB_T)pHSMUSBContext;

  0b344	e59d3024	 ldr         r3, [sp, #0x24]
  0b348	e58d3004	 str         r3, [sp, #4]

; 3404 :     SMHCDPdd * pPdd = (SMHCDPdd *)pHsUsb->pContext[HOST_MODE-1];

  0b34c	e59d3004	 ldr         r3, [sp, #4]
  0b350	e2833014	 add         r3, r3, #0x14
  0b354	e5933000	 ldr         r3, [r3]
  0b358	e58d3008	 str         r3, [sp, #8]

; 3405 :     CMhcd *pMhcd = (CMhcd *)pPdd->lpvMHCDMddObject;

  0b35c	e59d3008	 ldr         r3, [sp, #8]
  0b360	e2833004	 add         r3, r3, #4
  0b364	e5933000	 ldr         r3, [r3]
  0b368	e58d3000	 str         r3, [sp]

; 3406 : 
; 3407 :     DEBUGMSG(ZONE_TRANSFER|ZONE_HCD, (TEXT("Host_ProcessEPxTx mapped ep %d indx %d\r\n"), endpoint, R_TX_INDEX(endpoint)));

  0b36c	e59f30e0	 ldr         r3, [pc, #0xE0]
  0b370	e5933440	 ldr         r3, [r3, #0x440]
  0b374	e2032c01	 and         r2, r3, #1, 24
  0b378	e59f30d4	 ldr         r3, [pc, #0xD4]
  0b37c	e5933440	 ldr         r3, [r3, #0x440]
  0b380	e2033001	 and         r3, r3, #1
  0b384	e1923003	 orrs        r3, r2, r3
  0b388	0a000006	 beq         |$LN3@Host_Proce@2|
  0b38c	e59d2028	 ldr         r2, [sp, #0x28]
  0b390	e59d1028	 ldr         r1, [sp, #0x28]
  0b394	e59f00bc	 ldr         r0, [pc, #0xBC]
  0b398	eb000000	 bl          NKDbgPrintfW
  0b39c	e3a03001	 mov         r3, #1
  0b3a0	e58d3010	 str         r3, [sp, #0x10]
  0b3a4	ea000001	 b           |$LN4@Host_Proce@2|
  0b3a8		 |$LN3@Host_Proce@2|
  0b3a8	e3a03000	 mov         r3, #0
  0b3ac	e58d3010	 str         r3, [sp, #0x10]
  0b3b0		 |$LN4@Host_Proce@2|

; 3408 :     DEBUGMSG(ZONE_TRANSFER, (TEXT("Host_ProcessEPxTx mapped ep %d indx %d\r\n"), endpoint, R_TX_INDEX(endpoint)));

  0b3b0	e59f309c	 ldr         r3, [pc, #0x9C]
  0b3b4	e5933440	 ldr         r3, [r3, #0x440]
  0b3b8	e3130c01	 tst         r3, #1, 24
  0b3bc	0a000006	 beq         |$LN5@Host_Proce@2|
  0b3c0	e59d2028	 ldr         r2, [sp, #0x28]
  0b3c4	e59d1028	 ldr         r1, [sp, #0x28]
  0b3c8	e59f0088	 ldr         r0, [pc, #0x88]
  0b3cc	eb000000	 bl          NKDbgPrintfW
  0b3d0	e3a03001	 mov         r3, #1
  0b3d4	e58d3014	 str         r3, [sp, #0x14]
  0b3d8	ea000001	 b           |$LN6@Host_Proce@2|
  0b3dc		 |$LN5@Host_Proce@2|
  0b3dc	e3a03000	 mov         r3, #0
  0b3e0	e58d3014	 str         r3, [sp, #0x14]
  0b3e4		 |$LN6@Host_Proce@2|

; 3409 :     pMhcd->SignalCheckForDoneTransfers((unsigned char)R_TX_INDEX(endpoint), 1);

  0b3e4	e3a02001	 mov         r2, #1
  0b3e8	e59d3028	 ldr         r3, [sp, #0x28]
  0b3ec	e20310ff	 and         r1, r3, #0xFF
  0b3f0	e59d3000	 ldr         r3, [sp]
  0b3f4	e5933000	 ldr         r3, [r3]
  0b3f8	e28330a0	 add         r3, r3, #0xA0
  0b3fc	e59d0000	 ldr         r0, [sp]
  0b400	e5933000	 ldr         r3, [r3]
  0b404	e1a0e00f	 mov         lr, pc
  0b408	e12fff13	 bx          r3

; 3410 :     DEBUGMSG(ZONE_HCD, (TEXT("Host_ProcessEPxTx-\r\n")));

  0b40c	e59f3040	 ldr         r3, [pc, #0x40]
  0b410	e5933440	 ldr         r3, [r3, #0x440]
  0b414	e3130001	 tst         r3, #1
  0b418	0a000004	 beq         |$LN7@Host_Proce@2|
  0b41c	e59f002c	 ldr         r0, [pc, #0x2C]
  0b420	eb000000	 bl          NKDbgPrintfW
  0b424	e3a03001	 mov         r3, #1
  0b428	e58d3018	 str         r3, [sp, #0x18]
  0b42c	ea000001	 b           |$LN8@Host_Proce@2|
  0b430		 |$LN7@Host_Proce@2|
  0b430	e3a03000	 mov         r3, #0
  0b434	e58d3018	 str         r3, [sp, #0x18]
  0b438		 |$LN8@Host_Proce@2|

; 3411 : 
; 3412 :     return ERROR_SUCCESS;

  0b438	e3a03000	 mov         r3, #0
  0b43c	e58d300c	 str         r3, [sp, #0xC]

; 3413 : }

  0b440	e59d000c	 ldr         r0, [sp, #0xC]
  0b444	e28dd01c	 add         sp, sp, #0x1C
  0b448	e89d6000	 ldmia       sp, {sp, lr}
  0b44c	e12fff1e	 bx          lr
  0b450		 |$LN12@Host_Proce@2|
  0b450		 |$LN13@Host_Proce@2|
  0b450	00000000	 DCD         |??_C@_1CK@OOENFHMP@?$AAH?$AAo?$AAs?$AAt?$AA_?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAE?$AAP?$AAx?$AAT?$AAx?$AA?9?$AA?$AN?$AA?6?$AA?$AA@|
  0b454		 |$LN14@Host_Proce@2|
  0b454	00000000	 DCD         |dpCurSettings|
  0b458		 |$LN15@Host_Proce@2|
  0b458	00000000	 DCD         |??_C@_1FC@LMINFKG@?$AAH?$AAo?$AAs?$AAt?$AA_?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAE?$AAP?$AAx?$AAT?$AAx?$AA?5?$AAm?$AAa?$AAp?$AAp?$AAe?$AAd?$AA?5?$AAe?$AAp?$AA?5?$AA?$CF?$AAd?$AA?5?$AAi@|
  0b45c		 |$M45936|

			 ENDP  ; |Host_ProcessEPxTx|

	EXPORT	|Host_ProcessEP0|

  00218			 AREA	 |.pdata|, PDATA
|$T45948| DCD	|$LN5@Host_Proce@3|
	DCD	0x40000e04
; Function compile flags: /Odtp

  0b45c			 AREA	 |.text|, CODE, ARM

  0b45c		 |Host_ProcessEP0| PROC

; 3433 : {

  0b45c		 |$LN5@Host_Proce@3|
  0b45c	e1a0c00d	 mov         r12, sp
  0b460	e92d0001	 stmdb       sp!, {r0}
  0b464	e92d5000	 stmdb       sp!, {r12, lr}
  0b468	e24dd008	 sub         sp, sp, #8
  0b46c		 |$M45945|

; 3434 :     return Host_ProcessEPxTx(pHSMUSBContext, 0);

  0b46c	e3a01000	 mov         r1, #0
  0b470	e59d0010	 ldr         r0, [sp, #0x10]
  0b474	eb000000	 bl          Host_ProcessEPxTx
  0b478	e58d0004	 str         r0, [sp, #4]
  0b47c	e59d3004	 ldr         r3, [sp, #4]
  0b480	e58d3000	 str         r3, [sp]

; 3435 : }

  0b484	e59d0000	 ldr         r0, [sp]
  0b488	e28dd008	 add         sp, sp, #8
  0b48c	e89d6000	 ldmia       sp, {sp, lr}
  0b490	e12fff1e	 bx          lr
  0b494		 |$M45946|

			 ENDP  ; |Host_ProcessEP0|

	EXPORT	|??_C@_1BO@ELBMMLPK@?$AAH?$AAo?$AAs?$AAt?$AA_?$AAC?$AAo?$AAn?$AAn?$AAe?$AAc?$AAt?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|?SetOTGContext@CHcd@@QAAXPAX@Z|	; CHcd::SetOTGContext
	EXPORT	|Host_Connect|

  00220			 AREA	 |.pdata|, PDATA
|$T45956| DCD	|$LN7@Host_Conne|
	DCD	0x40003404

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@ELBMMLPK@?$AAH?$AAo?$AAs?$AAt?$AA_?$AAC?$AAo?$AAn?$AAn?$AAe?$AAc?$AAt?$AA?$AN?$AA?6?$AA?$AA@| DCB "H"
	DCB	0x0, "o", 0x0, "s", 0x0, "t", 0x0, "_", 0x0, "C", 0x0, "o"
	DCB	0x0, "n", 0x0, "n", 0x0, "e", 0x0, "c", 0x0, "t", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  0b494			 AREA	 |.text|, CODE, ARM

  0b494		 |Host_Connect| PROC

; 3454 : {

  0b494		 |$LN7@Host_Conne|
  0b494	e1a0c00d	 mov         r12, sp
  0b498	e92d0001	 stmdb       sp!, {r0}
  0b49c	e92d5000	 stmdb       sp!, {r12, lr}
  0b4a0	e24dd014	 sub         sp, sp, #0x14
  0b4a4		 |$M45953|

; 3455 :     PHSMUSB_T pHsUsb = (PHSMUSB_T)pHSMUSBContext;

  0b4a4	e59d301c	 ldr         r3, [sp, #0x1C]
  0b4a8	e58d3004	 str         r3, [sp, #4]

; 3456 :     SMHCDPdd * pPdd = (SMHCDPdd *)pHsUsb->pContext[HOST_MODE-1];

  0b4ac	e59d3004	 ldr         r3, [sp, #4]
  0b4b0	e2833014	 add         r3, r3, #0x14
  0b4b4	e5933000	 ldr         r3, [r3]
  0b4b8	e58d3008	 str         r3, [sp, #8]

; 3457 :     CHcd *pHcd = (CHcd *)pPdd->lpvMHCDMddObject;

  0b4bc	e59d3008	 ldr         r3, [sp, #8]
  0b4c0	e2833004	 add         r3, r3, #4
  0b4c4	e5933000	 ldr         r3, [r3]
  0b4c8	e58d3000	 str         r3, [sp]

; 3458 : 
; 3459 :     // This one should be set only on connect or it would have
; 3460 :     // racing condition causing access violation.
; 3461 :     pHcd->SetOTGContext(pHSMUSBContext);        

  0b4cc	e59d101c	 ldr         r1, [sp, #0x1C]
  0b4d0	e59d0000	 ldr         r0, [sp]
  0b4d4	eb000000	 bl          |?SetOTGContext@CHcd@@QAAXPAX@Z|

; 3462 :     pHcd->SetSignalDisconnectACK(FALSE);

  0b4d8	e3a01000	 mov         r1, #0
  0b4dc	e59d3000	 ldr         r3, [sp]
  0b4e0	e5933000	 ldr         r3, [r3]
  0b4e4	e2833048	 add         r3, r3, #0x48
  0b4e8	e59d0000	 ldr         r0, [sp]
  0b4ec	e5933000	 ldr         r3, [r3]
  0b4f0	e1a0e00f	 mov         lr, pc
  0b4f4	e12fff13	 bx          r3

; 3463 :     pHcd->SignalHubChangeEvent(TRUE);    

  0b4f8	e3a01001	 mov         r1, #1
  0b4fc	e59d3000	 ldr         r3, [sp]
  0b500	e5933000	 ldr         r3, [r3]
  0b504	e2833014	 add         r3, r3, #0x14
  0b508	e59d0000	 ldr         r0, [sp]
  0b50c	e5933000	 ldr         r3, [r3]
  0b510	e1a0e00f	 mov         lr, pc
  0b514	e12fff13	 bx          r3

; 3464 :     DEBUGMSG(ZONE_HCD, (TEXT("Host_Connect\r\n")));    

  0b518	e59f3040	 ldr         r3, [pc, #0x40]
  0b51c	e5933440	 ldr         r3, [r3, #0x440]
  0b520	e3130001	 tst         r3, #1
  0b524	0a000004	 beq         |$LN3@Host_Conne|
  0b528	e59f002c	 ldr         r0, [pc, #0x2C]
  0b52c	eb000000	 bl          NKDbgPrintfW
  0b530	e3a03001	 mov         r3, #1
  0b534	e58d3010	 str         r3, [sp, #0x10]
  0b538	ea000001	 b           |$LN4@Host_Conne|
  0b53c		 |$LN3@Host_Conne|
  0b53c	e3a03000	 mov         r3, #0
  0b540	e58d3010	 str         r3, [sp, #0x10]
  0b544		 |$LN4@Host_Conne|

; 3465 :     return ERROR_SUCCESS;

  0b544	e3a03000	 mov         r3, #0
  0b548	e58d300c	 str         r3, [sp, #0xC]

; 3466 : }

  0b54c	e59d000c	 ldr         r0, [sp, #0xC]
  0b550	e28dd014	 add         sp, sp, #0x14
  0b554	e89d6000	 ldmia       sp, {sp, lr}
  0b558	e12fff1e	 bx          lr
  0b55c		 |$LN8@Host_Conne|
  0b55c		 |$LN9@Host_Conne|
  0b55c	00000000	 DCD         |??_C@_1BO@ELBMMLPK@?$AAH?$AAo?$AAs?$AAt?$AA_?$AAC?$AAo?$AAn?$AAn?$AAe?$AAc?$AAt?$AA?$AN?$AA?6?$AA?$AA@|
  0b560		 |$LN10@Host_Conne|
  0b560	00000000	 DCD         |dpCurSettings|
  0b564		 |$M45954|

			 ENDP  ; |Host_Connect|

; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\musb\musbhcd\usb2com\hcd.hpp

  00000			 AREA	 |.pdata|, PDATA
|$T45964| DCD	|$LN5@SetOTGCont|
	DCD	0x40000903
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetOTGContext@CHcd@@QAAXPAX@Z| PROC	; CHcd::SetOTGContext

; 122  :     void    SetOTGContext(PVOID pOTG) { m_pOTG = pOTG;};    

  00000		 |$LN5@SetOTGCont|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M45961|
  0000c	e59d3008	 ldr         r3, [sp, #8]
  00010	e28320b4	 add         r2, r3, #0xB4
  00014	e59d300c	 ldr         r3, [sp, #0xC]
  00018	e5823000	 str         r3, [r2]
  0001c	e89d6000	 ldmia       sp, {sp, lr}
  00020	e12fff1e	 bx          lr
  00024		 |$M45962|

			 ENDP  ; |?SetOTGContext@CHcd@@QAAXPAX@Z|, CHcd::SetOTGContext

	EXPORT	|??_C@_1CE@JOIBOFFE@?$AAH?$AAo?$AAs?$AAt?$AA_?$AAD?$AAi?$AAs?$AAc?$AAo?$AAn?$AAn?$AAe?$AAc?$AAt?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|Host_Disconnect|

  00228			 AREA	 |.pdata|, PDATA
|$T45974| DCD	|$LN8@Host_Disco|
	DCD	0x40003304
; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\musb\musbhcd\musbmhdrc\chw.cpp

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@JOIBOFFE@?$AAH?$AAo?$AAs?$AAt?$AA_?$AAD?$AAi?$AAs?$AAc?$AAo?$AAn?$AAn?$AAe?$AAc?$AAt?$AA?$AN?$AA?6?$AA?$AA@| DCB "H"
	DCB	0x0, "o", 0x0, "s", 0x0, "t", 0x0, "_", 0x0, "D", 0x0, "i"
	DCB	0x0, "s", 0x0, "c", 0x0, "o", 0x0, "n", 0x0, "n", 0x0, "e"
	DCB	0x0, "c", 0x0, "t", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  0b564			 AREA	 |.text|, CODE, ARM

  0b564		 |Host_Disconnect| PROC

; 3485 : {

  0b564		 |$LN8@Host_Disco|
  0b564	e1a0c00d	 mov         r12, sp
  0b568	e92d0001	 stmdb       sp!, {r0}
  0b56c	e92d5000	 stmdb       sp!, {r12, lr}
  0b570	e24dd014	 sub         sp, sp, #0x14
  0b574		 |$M45971|

; 3486 :     PHSMUSB_T pHsUsb = (PHSMUSB_T)pHSMUSBContext;

  0b574	e59d301c	 ldr         r3, [sp, #0x1C]
  0b578	e58d3004	 str         r3, [sp, #4]

; 3487 :     SMHCDPdd * pPdd = (SMHCDPdd *)pHsUsb->pContext[HOST_MODE-1];

  0b57c	e59d3004	 ldr         r3, [sp, #4]
  0b580	e2833014	 add         r3, r3, #0x14
  0b584	e5933000	 ldr         r3, [r3]
  0b588	e58d3008	 str         r3, [sp, #8]

; 3488 :     CHcd *pHcd = (CHcd *)pPdd->lpvMHCDMddObject;

  0b58c	e59d3008	 ldr         r3, [sp, #8]
  0b590	e2833004	 add         r3, r3, #4
  0b594	e5933000	 ldr         r3, [r3]
  0b598	e58d3000	 str         r3, [sp]

; 3489 : 
; 3490 :     pHcd->SignalHubChangeEvent(FALSE);

  0b59c	e3a01000	 mov         r1, #0
  0b5a0	e59d3000	 ldr         r3, [sp]
  0b5a4	e5933000	 ldr         r3, [r3]
  0b5a8	e2833014	 add         r3, r3, #0x14
  0b5ac	e59d0000	 ldr         r0, [sp]
  0b5b0	e5933000	 ldr         r3, [r3]
  0b5b4	e1a0e00f	 mov         lr, pc
  0b5b8	e12fff13	 bx          r3

; 3491 : 
; 3492 :     if(pHcd->m_fHCDState == USBHCD_ACTIVE)

  0b5bc	e59d3000	 ldr         r3, [sp]
  0b5c0	e28330a4	 add         r3, r3, #0xA4
  0b5c4	e5933000	 ldr         r3, [r3]
  0b5c8	e3530001	 cmp         r3, #1
  0b5cc	1a000004	 bne         |$LN1@Host_Disco|

; 3493 :     {
; 3494 :         WaitForSingleObject(pHcd->m_hPowerDownEvent, INFINITE);

  0b5d0	e3e01000	 mvn         r1, #0
  0b5d4	e59d3000	 ldr         r3, [sp]
  0b5d8	e28330a8	 add         r3, r3, #0xA8
  0b5dc	e5930000	 ldr         r0, [r3]
  0b5e0	eb000000	 bl          WaitForSingleObject
  0b5e4		 |$LN1@Host_Disco|

; 3495 :     }
; 3496 :     // Jeffrey: HNP
; 3497 :     //pHsUsb->pUsbGenRegs->DevCtl &= ~DEVCTL_SESSION;
; 3498 :     DEBUGMSG(ZONE_HCD, (TEXT("Host_Disconnect\r\n")));

  0b5e4	e59f3040	 ldr         r3, [pc, #0x40]
  0b5e8	e5933440	 ldr         r3, [r3, #0x440]
  0b5ec	e3130001	 tst         r3, #1
  0b5f0	0a000004	 beq         |$LN4@Host_Disco|
  0b5f4	e59f002c	 ldr         r0, [pc, #0x2C]
  0b5f8	eb000000	 bl          NKDbgPrintfW
  0b5fc	e3a03001	 mov         r3, #1
  0b600	e58d3010	 str         r3, [sp, #0x10]
  0b604	ea000001	 b           |$LN5@Host_Disco|
  0b608		 |$LN4@Host_Disco|
  0b608	e3a03000	 mov         r3, #0
  0b60c	e58d3010	 str         r3, [sp, #0x10]
  0b610		 |$LN5@Host_Disco|

; 3499 :     
; 3500 :     return ERROR_SUCCESS;

  0b610	e3a03000	 mov         r3, #0
  0b614	e58d300c	 str         r3, [sp, #0xC]

; 3501 : }

  0b618	e59d000c	 ldr         r0, [sp, #0xC]
  0b61c	e28dd014	 add         sp, sp, #0x14
  0b620	e89d6000	 ldmia       sp, {sp, lr}
  0b624	e12fff1e	 bx          lr
  0b628		 |$LN9@Host_Disco|
  0b628		 |$LN10@Host_Disco|
  0b628	00000000	 DCD         |??_C@_1CE@JOIBOFFE@?$AAH?$AAo?$AAs?$AAt?$AA_?$AAD?$AAi?$AAs?$AAc?$AAo?$AAn?$AAn?$AAe?$AAc?$AAt?$AA?$AN?$AA?6?$AA?$AA@|
  0b62c		 |$LN11@Host_Disco|
  0b62c	00000000	 DCD         |dpCurSettings|
  0b630		 |$M45972|

			 ENDP  ; |Host_Disconnect|

	EXPORT	|Host_Suspend|

  00230			 AREA	 |.pdata|, PDATA
|$T45983| DCD	|$LN5@Host_Suspe|
	DCD	0x40000a04
; Function compile flags: /Odtp

  0b630			 AREA	 |.text|, CODE, ARM

  0b630		 |Host_Suspend| PROC

; 3519 : {

  0b630		 |$LN5@Host_Suspe|
  0b630	e1a0c00d	 mov         r12, sp
  0b634	e92d0001	 stmdb       sp!, {r0}
  0b638	e92d5000	 stmdb       sp!, {r12, lr}
  0b63c	e24dd004	 sub         sp, sp, #4
  0b640		 |$M45980|

; 3520 :     UNREFERENCED_PARAMETER(pHSMUSBContext);
; 3521 :     return ERROR_SUCCESS;

  0b640	e3a03000	 mov         r3, #0
  0b644	e58d3000	 str         r3, [sp]

; 3522 : }

  0b648	e59d0000	 ldr         r0, [sp]
  0b64c	e28dd004	 add         sp, sp, #4
  0b650	e89d6000	 ldmia       sp, {sp, lr}
  0b654	e12fff1e	 bx          lr
  0b658		 |$M45981|

			 ENDP  ; |Host_Suspend|

	EXPORT	|??_C@_1EE@GHOAIGII@?$AAH?$AAo?$AAs?$AAt?$AA_?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAD?$AAM?$AAA?$AA?5?$AAw?$AAi?$AAt?$AAh?$AA?5?$AAc?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?5?$AA?$CF?$AAd?$AA?$AN@| [ DATA ] ; `string'
	EXPORT	|Host_ProcessDMA|

  00238			 AREA	 |.pdata|, PDATA
|$T45991| DCD	|$LN7@Host_Proce@4|
	DCD	0x40002b04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EE@GHOAIGII@?$AAH?$AAo?$AAs?$AAt?$AA_?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAD?$AAM?$AAA?$AA?5?$AAw?$AAi?$AAt?$AAh?$AA?5?$AAc?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?5?$AA?$CF?$AAd?$AA?$AN@| DCB "H"
	DCB	0x0, "o", 0x0, "s", 0x0, "t", 0x0, "_", 0x0, "P", 0x0, "r"
	DCB	0x0, "o", 0x0, "c", 0x0, "e", 0x0, "s", 0x0, "s", 0x0, "D"
	DCB	0x0, "M", 0x0, "A", 0x0, " ", 0x0, "w", 0x0, "i", 0x0, "t"
	DCB	0x0, "h", 0x0, " ", 0x0, "c", 0x0, "h", 0x0, "a", 0x0, "n"
	DCB	0x0, "n", 0x0, "e", 0x0, "l", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  0b658			 AREA	 |.text|, CODE, ARM

  0b658		 |Host_ProcessDMA| PROC

; 3541 : {

  0b658		 |$LN7@Host_Proce@4|
  0b658	e1a0c00d	 mov         r12, sp
  0b65c	e92d0003	 stmdb       sp!, {r0, r1}
  0b660	e92d5000	 stmdb       sp!, {r12, lr}
  0b664	e24dd014	 sub         sp, sp, #0x14
  0b668		 |$M45988|

; 3542 :     PHSMUSB_T pHsUsb = (PHSMUSB_T)pContext;

  0b668	e59d301c	 ldr         r3, [sp, #0x1C]
  0b66c	e58d3004	 str         r3, [sp, #4]

; 3543 :     SMHCDPdd * pPdd = (SMHCDPdd *)pHsUsb->pContext[HOST_MODE-1];

  0b670	e59d3004	 ldr         r3, [sp, #4]
  0b674	e2833014	 add         r3, r3, #0x14
  0b678	e5933000	 ldr         r3, [r3]
  0b67c	e58d3008	 str         r3, [sp, #8]

; 3544 :     CMhcd *pMhcd = (CMhcd *)pPdd->lpvMHCDMddObject;

  0b680	e59d3008	 ldr         r3, [sp, #8]
  0b684	e2833004	 add         r3, r3, #4
  0b688	e5933000	 ldr         r3, [r3]
  0b68c	e58d3000	 str         r3, [sp]

; 3545 : 
; 3546 :     DEBUGMSG(ZONE_HCD, (TEXT("Host_ProcessDMA with channel %d\r\n"), channel));    

  0b690	e59f3068	 ldr         r3, [pc, #0x68]
  0b694	e5933440	 ldr         r3, [r3, #0x440]
  0b698	e3130001	 tst         r3, #1
  0b69c	0a000006	 beq         |$LN3@Host_Proce@4|
  0b6a0	e5dd3020	 ldrb        r3, [sp, #0x20]
  0b6a4	e1a01003	 mov         r1, r3
  0b6a8	e59f004c	 ldr         r0, [pc, #0x4C]
  0b6ac	eb000000	 bl          NKDbgPrintfW
  0b6b0	e3a03001	 mov         r3, #1
  0b6b4	e58d3010	 str         r3, [sp, #0x10]
  0b6b8	ea000001	 b           |$LN4@Host_Proce@4|
  0b6bc		 |$LN3@Host_Proce@4|
  0b6bc	e3a03000	 mov         r3, #0
  0b6c0	e58d3010	 str         r3, [sp, #0x10]
  0b6c4		 |$LN4@Host_Proce@4|

; 3547 :     // Not sure if we should use the SetEventData by accessing different bit for different endpoint
; 3548 :     // However, it would require some critical section handling.  Anyway, each pipe would have an associate 
; 3549 :     // DMA event handle and we can set the event with corresponding channel.    
; 3550 :     pMhcd->SignalCheckForDoneDMA(channel);

  0b6c4	e5dd1020	 ldrb        r1, [sp, #0x20]
  0b6c8	e59d3000	 ldr         r3, [sp]
  0b6cc	e5933000	 ldr         r3, [r3]
  0b6d0	e28330a4	 add         r3, r3, #0xA4
  0b6d4	e59d0000	 ldr         r0, [sp]
  0b6d8	e5933000	 ldr         r3, [r3]
  0b6dc	e1a0e00f	 mov         lr, pc
  0b6e0	e12fff13	 bx          r3

; 3551 :     return ERROR_SUCCESS;

  0b6e4	e3a03000	 mov         r3, #0
  0b6e8	e58d300c	 str         r3, [sp, #0xC]

; 3552 : }

  0b6ec	e59d000c	 ldr         r0, [sp, #0xC]
  0b6f0	e28dd014	 add         sp, sp, #0x14
  0b6f4	e89d6000	 ldmia       sp, {sp, lr}
  0b6f8	e12fff1e	 bx          lr
  0b6fc		 |$LN8@Host_Proce@4|
  0b6fc		 |$LN9@Host_Proce@4|
  0b6fc	00000000	 DCD         |??_C@_1EE@GHOAIGII@?$AAH?$AAo?$AAs?$AAt?$AA_?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAD?$AAM?$AAA?$AA?5?$AAw?$AAi?$AAt?$AAh?$AA?5?$AAc?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?5?$AA?$CF?$AAd?$AA?$AN@|
  0b700		 |$LN10@Host_Proce@4|
  0b700	00000000	 DCD         |dpCurSettings|
  0b704		 |$M45989|

			 ENDP  ; |Host_ProcessDMA|

	END
