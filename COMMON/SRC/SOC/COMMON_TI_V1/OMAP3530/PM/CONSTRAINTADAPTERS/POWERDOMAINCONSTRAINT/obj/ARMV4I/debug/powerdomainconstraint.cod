; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\OMAP3530\PM\CONSTRAINTADAPTERS\POWERDOMAINCONSTRAINT\powerdomainconstraint.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|?GetIndex@?$IndexList@K@@QAAPAKK@Z|	; IndexList<unsigned long>::GetIndex
	EXPORT	|?UpdatePowerDomainConstraint@PowerDomainConstraint@@MAAHK@Z| ; PowerDomainConstraint::UpdatePowerDomainConstraint

  00000			 AREA	 |.pdata|, PDATA
|$T38279| DCD	|$LN12@UpdatePowe|
	DCD	0x40004604
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\pm\constraintadapters\powerdomainconstraint\powerdomainconstraint.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?UpdatePowerDomainConstraint@PowerDomainConstraint@@MAAHK@Z| PROC ; PowerDomainConstraint::UpdatePowerDomainConstraint

; 50   : {

  00000		 |$LN12@UpdatePowe|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd014	 sub         sp, sp, #0x14
  00010		 |$M38276|

; 51   :     int i;
; 52   :     DWORD newState = (DWORD) PwrDeviceUnspecified;

  00010	e3e03000	 mvn         r3, #0
  00014	e58d3004	 str         r3, [sp, #4]

; 53   : 
; 54   :     UNREFERENCED_PARAMETER(idContext);
; 55   :     
; 56   :     // first check if there is a constraint being forced
; 57   :     if (m_powerDomainForce != -1)

  00018	e59d301c	 ldr         r3, [sp, #0x1C]
  0001c	e2833020	 add         r3, r3, #0x20
  00020	e5933000	 ldr         r3, [r3]
  00024	e3730001	 cmn         r3, #1
  00028	0a00000e	 beq         |$LN7@UpdatePowe|

; 58   :         {
; 59   :         DWORD *pDataNode;
; 60   :         pDataNode = m_IndexList.GetIndex(m_powerDomainForce);

  0002c	e59d301c	 ldr         r3, [sp, #0x1C]
  00030	e2833020	 add         r3, r3, #0x20
  00034	e5931000	 ldr         r1, [r3]
  00038	e59d301c	 ldr         r3, [sp, #0x1C]
  0003c	e2830028	 add         r0, r3, #0x28
  00040	eb000000	 bl          |?GetIndex@?$IndexList@K@@QAAPAKK@Z|
  00044	e58d0010	 str         r0, [sp, #0x10]
  00048	e59d3010	 ldr         r3, [sp, #0x10]
  0004c	e58d3008	 str         r3, [sp, #8]

; 61   :         if (pDataNode != NULL)

  00050	e59d3008	 ldr         r3, [sp, #8]
  00054	e3530000	 cmp         r3, #0
  00058	0a000002	 beq         |$LN6@UpdatePowe|

; 62   :             {
; 63   :             newState = *pDataNode;

  0005c	e59d3008	 ldr         r3, [sp, #8]
  00060	e5933000	 ldr         r3, [r3]
  00064	e58d3004	 str         r3, [sp, #4]
  00068		 |$LN6@UpdatePowe|
  00068		 |$LN7@UpdatePowe|

; 64   :             }
; 65   :         }
; 66   : 
; 67   :     // get highest operating mode if not forced
; 68   :     if (newState == PwrDeviceUnspecified)

  00068	e59d3004	 ldr         r3, [sp, #4]
  0006c	e3730001	 cmn         r3, #1
  00070	1a00001e	 bne         |$LN5@UpdatePowe|

; 69   :         {
; 70   :         newState = m_powerDomainFloor;

  00074	e59d301c	 ldr         r3, [sp, #0x1C]
  00078	e283301c	 add         r3, r3, #0x1C
  0007c	e5933000	 ldr         r3, [r3]
  00080	e58d3004	 str         r3, [sp, #4]

; 71   :         for (i = (signed)m_powerDomainCeiling; i <= (signed)m_powerDomainFloor; ++i)

  00084	e59d301c	 ldr         r3, [sp, #0x1C]
  00088	e2833018	 add         r3, r3, #0x18
  0008c	e5933000	 ldr         r3, [r3]
  00090	e58d3000	 str         r3, [sp]
  00094	ea000002	 b           |$LN4@UpdatePowe|
  00098		 |$LN3@UpdatePowe|
  00098	e59d3000	 ldr         r3, [sp]
  0009c	e2833001	 add         r3, r3, #1
  000a0	e58d3000	 str         r3, [sp]
  000a4		 |$LN4@UpdatePowe|
  000a4	e59d301c	 ldr         r3, [sp, #0x1C]
  000a8	e283301c	 add         r3, r3, #0x1C
  000ac	e59d2000	 ldr         r2, [sp]
  000b0	e5933000	 ldr         r3, [r3]
  000b4	e1520003	 cmp         r2, r3
  000b8	ca00000c	 bgt         |$LN2@UpdatePowe|

; 72   :             {
; 73   :             if (m_rgPowerDomainConstraints[i] > 0)

  000bc	e59d301c	 ldr         r3, [sp, #0x1C]
  000c0	e2831004	 add         r1, r3, #4
  000c4	e59d2000	 ldr         r2, [sp]
  000c8	e3a03004	 mov         r3, #4
  000cc	e0030392	 mul         r3, r2, r3
  000d0	e0813003	 add         r3, r1, r3
  000d4	e5933000	 ldr         r3, [r3]
  000d8	e3530000	 cmp         r3, #0
  000dc	9a000002	 bls         |$LN1@UpdatePowe|

; 74   :                 {
; 75   :                 newState = (DWORD)i;

  000e0	e59d3000	 ldr         r3, [sp]
  000e4	e58d3004	 str         r3, [sp, #4]

; 76   :                 break;

  000e8	ea000000	 b           |$LN2@UpdatePowe|
  000ec		 |$LN1@UpdatePowe|

; 77   :                 }
; 78   :             }

  000ec	eaffffe9	 b           |$LN3@UpdatePowe|
  000f0		 |$LN2@UpdatePowe|
  000f0		 |$LN5@UpdatePowe|

; 79   :         }
; 80   : 
; 81   :     // save new state
; 82   :     m_powerDomainCurrent = newState;

  000f0	e59d301c	 ldr         r3, [sp, #0x1C]
  000f4	e2832024	 add         r2, r3, #0x24
  000f8	e59d3004	 ldr         r3, [sp, #4]
  000fc	e5823000	 str         r3, [r2]

; 83   :         
; 84   :     return TRUE;

  00100	e3a03001	 mov         r3, #1
  00104	e58d300c	 str         r3, [sp, #0xC]

; 85   : }

  00108	e59d000c	 ldr         r0, [sp, #0xC]
  0010c	e28dd014	 add         sp, sp, #0x14
  00110	e89d6000	 ldmia       sp, {sp, lr}
  00114	e12fff1e	 bx          lr
  00118		 |$M38277|

			 ENDP  ; |?UpdatePowerDomainConstraint@PowerDomainConstraint@@MAAHK@Z|, PowerDomainConstraint::UpdatePowerDomainConstraint

	EXPORT	|??_C@_1M@KBPAKIPB@?$AAF?$AAl?$AAo?$AAo?$AAr?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BA@DJAHLPIB@?$AAC?$AAe?$AAi?$AAl?$AAi?$AAn?$AAg?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|?InitializePowerDomain@PowerDomainConstraint@@QAAHPBG@Z| ; PowerDomainConstraint::InitializePowerDomain
	IMPORT	|RegCloseKey|
	IMPORT	|RegQueryValueExW|
	IMPORT	|RegOpenKeyExW|

  00008			 AREA	 |.pdata|, PDATA
|$T38294| DCD	|$LN14@Initialize|
	DCD	0x40007304

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@KBPAKIPB@?$AAF?$AAl?$AAo?$AAo?$AAr?$AA?$AA@| DCB "F", 0x0, "l", 0x0
	DCB	"o", 0x0, "o", 0x0, "r", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@DJAHLPIB@?$AAC?$AAe?$AAi?$AAl?$AAi?$AAn?$AAg?$AA?$AA@| DCB "C", 0x0
	DCB	"e", 0x0, "i", 0x0, "l", 0x0, "i", 0x0, "n", 0x0, "g", 0x0
	DCB	0x0, 0x0				; `string'
; Function compile flags: /Odtp

  00118			 AREA	 |.text|, CODE, ARM

  00118		 |?InitializePowerDomain@PowerDomainConstraint@@QAAHPBG@Z| PROC ; PowerDomainConstraint::InitializePowerDomain

; 98   : {

  00118		 |$LN14@Initialize|
  00118	e1a0c00d	 mov         r12, sp
  0011c	e92d0003	 stmdb       sp!, {r0, r1}
  00120	e92d5000	 stmdb       sp!, {r12, lr}
  00124	e24dd044	 sub         sp, sp, #0x44
  00128		 |$M38291|

; 99   :     DWORD state;
; 100  :     DWORD size;
; 101  :     BOOL rc = TRUE;

  00128	e3a03001	 mov         r3, #1
  0012c	e58d3008	 str         r3, [sp, #8]

; 102  :     HKEY hKey = NULL;

  00130	e3a03000	 mov         r3, #0
  00134	e58d300c	 str         r3, [sp, #0xC]

; 103  : 
; 104  :     // read registry to get initialization information  
; 105  :     if (RegOpenKeyEx(HKEY_LOCAL_MACHINE, szContext, 0, 0, &hKey) != ERROR_SUCCESS)

  00138	e28d300c	 add         r3, sp, #0xC
  0013c	e58d3000	 str         r3, [sp]
  00140	e3a03000	 mov         r3, #0
  00144	e3a02000	 mov         r2, #0
  00148	e59d1050	 ldr         r1, [sp, #0x50]
  0014c	e3a0010a	 mov         r0, #0xA, 2
  00150	eb000000	 bl          RegOpenKeyExW
  00154	e58d0030	 str         r0, [sp, #0x30]
  00158	e59d3030	 ldr         r3, [sp, #0x30]
  0015c	e3530000	 cmp         r3, #0
  00160	0a000001	 beq         |$LN5@Initialize|
  00164	ea000056	 b           |$LN4@Initialize|

; 106  :         {
; 107  :         goto cleanUp;

  00168	ea000055	 b           |$cleanUp$37948|
  0016c		 |$LN5@Initialize|

; 108  :         }
; 109  :     
; 110  :     // get ceiling value
; 111  :     size = sizeof(DWORD);

  0016c	e3a03004	 mov         r3, #4
  00170	e58d3010	 str         r3, [sp, #0x10]

; 112  :     if (RegQueryValueEx(hKey, REGEDIT_POWERDOMAIN_CEILING, 0, 0, (BYTE*)&state, &size) == ERROR_SUCCESS)

  00174	e28d3010	 add         r3, sp, #0x10
  00178	e58d3004	 str         r3, [sp, #4]
  0017c	e28d3014	 add         r3, sp, #0x14
  00180	e58d3000	 str         r3, [sp]
  00184	e3a03000	 mov         r3, #0
  00188	e3a02000	 mov         r2, #0
  0018c	e59f114c	 ldr         r1, [pc, #0x14C]
  00190	e59d000c	 ldr         r0, [sp, #0xC]
  00194	eb000000	 bl          RegQueryValueExW
  00198	e58d0034	 str         r0, [sp, #0x34]
  0019c	e59d3034	 ldr         r3, [sp, #0x34]
  001a0	e3530000	 cmp         r3, #0
  001a4	1a000010	 bne         |$LN3@Initialize|

; 113  :         {
; 114  :         m_powerDomainCeiling = max(m_powerDomainCeiling, state);

  001a8	e59d304c	 ldr         r3, [sp, #0x4C]
  001ac	e2833018	 add         r3, r3, #0x18
  001b0	e5932000	 ldr         r2, [r3]
  001b4	e59d3014	 ldr         r3, [sp, #0x14]
  001b8	e1520003	 cmp         r2, r3
  001bc	9a000004	 bls         |$LN8@Initialize|
  001c0	e59d304c	 ldr         r3, [sp, #0x4C]
  001c4	e2833018	 add         r3, r3, #0x18
  001c8	e5933000	 ldr         r3, [r3]
  001cc	e58d3038	 str         r3, [sp, #0x38]
  001d0	ea000001	 b           |$LN9@Initialize|
  001d4		 |$LN8@Initialize|
  001d4	e59d3014	 ldr         r3, [sp, #0x14]
  001d8	e58d3038	 str         r3, [sp, #0x38]
  001dc		 |$LN9@Initialize|
  001dc	e59d304c	 ldr         r3, [sp, #0x4C]
  001e0	e2832018	 add         r2, r3, #0x18
  001e4	e59d3038	 ldr         r3, [sp, #0x38]
  001e8	e5823000	 str         r3, [r2]
  001ec		 |$LN3@Initialize|

; 115  :         }
; 116  :     
; 117  :     // get floor value
; 118  :     size = sizeof(DWORD);

  001ec	e3a03004	 mov         r3, #4
  001f0	e58d3010	 str         r3, [sp, #0x10]

; 119  :     if (RegQueryValueEx(hKey, REGEDIT_POWERDOMAIN_FLOOR, 0, 0, (BYTE*)&state, &size) == ERROR_SUCCESS)

  001f4	e28d3010	 add         r3, sp, #0x10
  001f8	e58d3004	 str         r3, [sp, #4]
  001fc	e28d3014	 add         r3, sp, #0x14
  00200	e58d3000	 str         r3, [sp]
  00204	e3a03000	 mov         r3, #0
  00208	e3a02000	 mov         r2, #0
  0020c	e59f10c8	 ldr         r1, [pc, #0xC8]
  00210	e59d000c	 ldr         r0, [sp, #0xC]
  00214	eb000000	 bl          RegQueryValueExW
  00218	e58d003c	 str         r0, [sp, #0x3C]
  0021c	e59d303c	 ldr         r3, [sp, #0x3C]
  00220	e3530000	 cmp         r3, #0
  00224	1a000010	 bne         |$LN2@Initialize|

; 120  :         {
; 121  :         m_powerDomainFloor = min(m_powerDomainFloor, state);

  00228	e59d304c	 ldr         r3, [sp, #0x4C]
  0022c	e283301c	 add         r3, r3, #0x1C
  00230	e5932000	 ldr         r2, [r3]
  00234	e59d3014	 ldr         r3, [sp, #0x14]
  00238	e1520003	 cmp         r2, r3
  0023c	2a000004	 bcs         |$LN10@Initialize|
  00240	e59d304c	 ldr         r3, [sp, #0x4C]
  00244	e283301c	 add         r3, r3, #0x1C
  00248	e5933000	 ldr         r3, [r3]
  0024c	e58d3040	 str         r3, [sp, #0x40]
  00250	ea000001	 b           |$LN11@Initialize|
  00254		 |$LN10@Initialize|
  00254	e59d3014	 ldr         r3, [sp, #0x14]
  00258	e58d3040	 str         r3, [sp, #0x40]
  0025c		 |$LN11@Initialize|
  0025c	e59d304c	 ldr         r3, [sp, #0x4C]
  00260	e283201c	 add         r2, r3, #0x1C
  00264	e59d3040	 ldr         r3, [sp, #0x40]
  00268	e5823000	 str         r3, [r2]
  0026c		 |$LN2@Initialize|

; 122  :         }
; 123  : 
; 124  :     // make sure floor (ex. D2) is not less than the ceiling (ex. D3)
; 125  :     if (m_powerDomainFloor < m_powerDomainCeiling)

  0026c	e59d304c	 ldr         r3, [sp, #0x4C]
  00270	e283201c	 add         r2, r3, #0x1C
  00274	e59d304c	 ldr         r3, [sp, #0x4C]
  00278	e2833018	 add         r3, r3, #0x18
  0027c	e5922000	 ldr         r2, [r2]
  00280	e5933000	 ldr         r3, [r3]
  00284	e1520003	 cmp         r2, r3
  00288	2a000005	 bcs         |$LN1@Initialize|

; 126  :         {
; 127  :         m_powerDomainCeiling = m_powerDomainFloor;

  0028c	e59d304c	 ldr         r3, [sp, #0x4C]
  00290	e283101c	 add         r1, r3, #0x1C
  00294	e59d304c	 ldr         r3, [sp, #0x4C]
  00298	e2832018	 add         r2, r3, #0x18
  0029c	e5913000	 ldr         r3, [r1]
  002a0	e5823000	 str         r3, [r2]
  002a4		 |$LN1@Initialize|

; 128  :         }
; 129  :  
; 130  :     m_powerDomainCurrent = m_powerDomainFloor;

  002a4	e59d304c	 ldr         r3, [sp, #0x4C]
  002a8	e283101c	 add         r1, r3, #0x1C
  002ac	e59d304c	 ldr         r3, [sp, #0x4C]
  002b0	e2832024	 add         r2, r3, #0x24
  002b4	e5913000	 ldr         r3, [r1]
  002b8	e5823000	 str         r3, [r2]

; 131  : 
; 132  :     RegCloseKey(hKey);

  002bc	e59d000c	 ldr         r0, [sp, #0xC]
  002c0	eb000000	 bl          RegCloseKey
  002c4		 |$LN4@Initialize|
  002c4		 |$cleanUp$37948|

; 133  : 
; 134  : cleanUp:
; 135  :     return rc;

  002c4	e59d3008	 ldr         r3, [sp, #8]
  002c8	e58d302c	 str         r3, [sp, #0x2C]

; 136  : } 

  002cc	e59d002c	 ldr         r0, [sp, #0x2C]
  002d0	e28dd044	 add         sp, sp, #0x44
  002d4	e89d6000	 ldmia       sp, {sp, lr}
  002d8	e12fff1e	 bx          lr
  002dc		 |$LN15@Initialize|
  002dc		 |$LN16@Initialize|
  002dc	00000000	 DCD         |??_C@_1M@KBPAKIPB@?$AAF?$AAl?$AAo?$AAo?$AAr?$AA?$AA@|
  002e0		 |$LN17@Initialize|
  002e0	00000000	 DCD         |??_C@_1BA@DJAHLPIB@?$AAC?$AAe?$AAi?$AAl?$AAi?$AAn?$AAg?$AA?$AA@|
  002e4		 |$M38292|

			 ENDP  ; |?InitializePowerDomain@PowerDomainConstraint@@QAAHPBG@Z|, PowerDomainConstraint::InitializePowerDomain

	EXPORT	|?Unlock@PowerDomainConstraint@@QAAXXZ|	; PowerDomainConstraint::Unlock
	EXPORT	|?Lock@PowerDomainConstraint@@QAAXXZ|	; PowerDomainConstraint::Lock
	EXPORT	|?MaxIndex@?$IndexList@K@@QAAKXZ|	; IndexList<unsigned long>::MaxIndex
	EXPORT	|?UpdatePowerDomainConstraint@PowerDomainConstraint@@QAAHPAXKKIK@Z| ; PowerDomainConstraint::UpdatePowerDomainConstraint

  00010			 AREA	 |.pdata|, PDATA
|$T38309| DCD	|$LN27@UpdatePowe@2|
	DCD	0x4000a804
; Function compile flags: /Odtp

  002e4			 AREA	 |.text|, CODE, ARM

  002e4		 |?UpdatePowerDomainConstraint@PowerDomainConstraint@@QAAHPAXKKIK@Z| PROC ; PowerDomainConstraint::UpdatePowerDomainConstraint

; 153  : {  

  002e4		 |$LN27@UpdatePowe@2|
  002e4	e1a0c00d	 mov         r12, sp
  002e8	e92d000f	 stmdb       sp!, {r0 - r3}
  002ec	e92d5000	 stmdb       sp!, {r12, lr}
  002f0	e24dd02c	 sub         sp, sp, #0x2C
  002f4		 |$M38306|

; 154  :     BOOL rc = FALSE;

  002f4	e3a03000	 mov         r3, #0
  002f8	e58d3004	 str         r3, [sp, #4]

; 155  :     DWORD *pDataNode;
; 156  :     DWORD id = (DWORD)hConstraintContext - 1;

  002fc	e59d3038	 ldr         r3, [sp, #0x38]
  00300	e2433001	 sub         r3, r3, #1
  00304	e58d3000	 str         r3, [sp]

; 157  :     
; 158  :     // validate parameters
; 159  :     if (size != sizeof(DWORD)) goto cleanUp;

  00308	e59d3044	 ldr         r3, [sp, #0x44]
  0030c	e3530004	 cmp         r3, #4
  00310	0a000001	 beq         |$LN16@UpdatePowe@2|
  00314	ea000094	 b           |$LN15@UpdatePowe@2|
  00318	ea000093	 b           |$cleanUp$37973|
  0031c		 |$LN16@UpdatePowe@2|

; 160  :     if (id > m_IndexList.MaxIndex()) goto cleanUp;

  0031c	e59d3034	 ldr         r3, [sp, #0x34]
  00320	e2830028	 add         r0, r3, #0x28
  00324	eb000000	 bl          |?MaxIndex@?$IndexList@K@@QAAKXZ|
  00328	e58d0010	 str         r0, [sp, #0x10]
  0032c	e59d2000	 ldr         r2, [sp]
  00330	e59d3010	 ldr         r3, [sp, #0x10]
  00334	e1520003	 cmp         r2, r3
  00338	9a000001	 bls         |$LN14@UpdatePowe@2|
  0033c	ea00008a	 b           |$LN13@UpdatePowe@2|
  00340	ea000089	 b           |$cleanUp$37973|
  00344		 |$LN14@UpdatePowe@2|

; 161  : 
; 162  :     // get data node
; 163  :     pDataNode = m_IndexList.GetIndex(id);

  00344	e59d1000	 ldr         r1, [sp]
  00348	e59d3034	 ldr         r3, [sp, #0x34]
  0034c	e2830028	 add         r0, r3, #0x28
  00350	eb000000	 bl          |?GetIndex@?$IndexList@K@@QAAPAKK@Z|
  00354	e58d0014	 str         r0, [sp, #0x14]
  00358	e59d3014	 ldr         r3, [sp, #0x14]
  0035c	e58d3008	 str         r3, [sp, #8]

; 164  :     if (pDataNode == NULL) goto cleanUp;

  00360	e59d3008	 ldr         r3, [sp, #8]
  00364	e3530000	 cmp         r3, #0
  00368	1a000001	 bne         |$LN12@UpdatePowe@2|
  0036c	ea00007e	 b           |$LN11@UpdatePowe@2|
  00370	ea00007d	 b           |$cleanUp$37973|
  00374		 |$LN12@UpdatePowe@2|

; 165  : 
; 166  :     // determine new state
; 167  :     if (CONSTRAINT_STATE_NULL == newState)

  00374	e59d3040	 ldr         r3, [sp, #0x40]
  00378	e3730801	 cmn         r3, #1, 16
  0037c	1a000002	 bne         |$LN10@UpdatePowe@2|

; 168  :         {
; 169  :         newState = (DWORD) PwrDeviceUnspecified;

  00380	e3e03000	 mvn         r3, #0
  00384	e58d3040	 str         r3, [sp, #0x40]
  00388	ea000032	 b           |$LN9@UpdatePowe@2|
  0038c		 |$LN10@UpdatePowe@2|

; 170  :         }
; 171  :     else if (CONSTRAINT_STATE_FLOOR == newState)

  0038c	e59d2040	 ldr         r2, [sp, #0x40]
  00390	e3e03cff	 mvn         r3, #0xFF, 24
  00394	e22330fe	 eor         r3, r3, #0xFE
  00398	e1520003	 cmp         r2, r3
  0039c	1a000004	 bne         |$LN8@UpdatePowe@2|

; 172  :         {
; 173  :         newState = m_powerDomainFloor;

  003a0	e59d3034	 ldr         r3, [sp, #0x34]
  003a4	e283301c	 add         r3, r3, #0x1C
  003a8	e5933000	 ldr         r3, [r3]
  003ac	e58d3040	 str         r3, [sp, #0x40]

; 174  :         }
; 175  :     else 

  003b0	ea000028	 b           |$LN7@UpdatePowe@2|
  003b4		 |$LN8@UpdatePowe@2|

; 176  :         {
; 177  :         newState = max(min(newState, m_powerDomainFloor), m_powerDomainCeiling);

  003b4	e59d3034	 ldr         r3, [sp, #0x34]
  003b8	e283301c	 add         r3, r3, #0x1C
  003bc	e59d2040	 ldr         r2, [sp, #0x40]
  003c0	e5933000	 ldr         r3, [r3]
  003c4	e1520003	 cmp         r2, r3
  003c8	2a000002	 bcs         |$LN19@UpdatePowe@2|
  003cc	e59d3040	 ldr         r3, [sp, #0x40]
  003d0	e58d3018	 str         r3, [sp, #0x18]
  003d4	ea000003	 b           |$LN20@UpdatePowe@2|
  003d8		 |$LN19@UpdatePowe@2|
  003d8	e59d3034	 ldr         r3, [sp, #0x34]
  003dc	e283301c	 add         r3, r3, #0x1C
  003e0	e5933000	 ldr         r3, [r3]
  003e4	e58d3018	 str         r3, [sp, #0x18]
  003e8		 |$LN20@UpdatePowe@2|
  003e8	e59d3034	 ldr         r3, [sp, #0x34]
  003ec	e2833018	 add         r3, r3, #0x18
  003f0	e59d2018	 ldr         r2, [sp, #0x18]
  003f4	e5933000	 ldr         r3, [r3]
  003f8	e1520003	 cmp         r2, r3
  003fc	9a00000f	 bls         |$LN23@UpdatePowe@2|
  00400	e59d3034	 ldr         r3, [sp, #0x34]
  00404	e283301c	 add         r3, r3, #0x1C
  00408	e59d2040	 ldr         r2, [sp, #0x40]
  0040c	e5933000	 ldr         r3, [r3]
  00410	e1520003	 cmp         r2, r3
  00414	2a000002	 bcs         |$LN21@UpdatePowe@2|
  00418	e59d3040	 ldr         r3, [sp, #0x40]
  0041c	e58d301c	 str         r3, [sp, #0x1C]
  00420	ea000003	 b           |$LN22@UpdatePowe@2|
  00424		 |$LN21@UpdatePowe@2|
  00424	e59d3034	 ldr         r3, [sp, #0x34]
  00428	e283301c	 add         r3, r3, #0x1C
  0042c	e5933000	 ldr         r3, [r3]
  00430	e58d301c	 str         r3, [sp, #0x1C]
  00434		 |$LN22@UpdatePowe@2|
  00434	e59d301c	 ldr         r3, [sp, #0x1C]
  00438	e58d3020	 str         r3, [sp, #0x20]
  0043c	ea000003	 b           |$LN24@UpdatePowe@2|
  00440		 |$LN23@UpdatePowe@2|
  00440	e59d3034	 ldr         r3, [sp, #0x34]
  00444	e2833018	 add         r3, r3, #0x18
  00448	e5933000	 ldr         r3, [r3]
  0044c	e58d3020	 str         r3, [sp, #0x20]
  00450		 |$LN24@UpdatePowe@2|
  00450	e59d3020	 ldr         r3, [sp, #0x20]
  00454	e58d3040	 str         r3, [sp, #0x40]
  00458		 |$LN7@UpdatePowe@2|
  00458		 |$LN9@UpdatePowe@2|

; 178  :         }
; 179  : 
; 180  :     // serialize access
; 181  :     Lock();

  00458	e59d0034	 ldr         r0, [sp, #0x34]
  0045c	eb000000	 bl          |?Lock@PowerDomainConstraint@@QAAXXZ|

; 182  :            
; 183  :     // process constraint message
; 184  :     switch (msg)

  00460	e59d303c	 ldr         r3, [sp, #0x3C]
  00464	e58d3024	 str         r3, [sp, #0x24]
  00468	e59d3024	 ldr         r3, [sp, #0x24]
  0046c	e3530001	 cmp         r3, #1
  00470	0a000007	 beq         |$LN3@UpdatePowe@2|
  00474	e59d3024	 ldr         r3, [sp, #0x24]
  00478	e3530102	 cmp         r3, #2, 2
  0047c	0a000000	 beq         |$LN4@UpdatePowe@2|
  00480	ea00002d	 b           |$LN5@UpdatePowe@2|
  00484		 |$LN4@UpdatePowe@2|

; 185  :         {
; 186  :         case POWERDOMAIN_FORCE:
; 187  :             m_powerDomainForce = id;

  00484	e59d3034	 ldr         r3, [sp, #0x34]
  00488	e2832020	 add         r2, r3, #0x20
  0048c	e59d3000	 ldr         r3, [sp]
  00490	e5823000	 str         r3, [r2]
  00494		 |$LN3@UpdatePowe@2|

; 188  : 
; 189  :             //fall-through
; 190  :             
; 191  :         case CONSTRAINT_MSG_POWERDOMAIN_REQUEST:
; 192  :             // update new constraint
; 193  :             if (*pDataNode != PwrDeviceUnspecified)

  00494	e59d3008	 ldr         r3, [sp, #8]
  00498	e5933000	 ldr         r3, [r3]
  0049c	e3730001	 cmn         r3, #1
  004a0	0a000010	 beq         |$LN2@UpdatePowe@2|

; 194  :                 {
; 195  :                 m_rgPowerDomainConstraints[*pDataNode] -= 1;

  004a4	e59d3034	 ldr         r3, [sp, #0x34]
  004a8	e2831004	 add         r1, r3, #4
  004ac	e59d3008	 ldr         r3, [sp, #8]
  004b0	e5932000	 ldr         r2, [r3]
  004b4	e3a03004	 mov         r3, #4
  004b8	e0030392	 mul         r3, r2, r3
  004bc	e0813003	 add         r3, r1, r3
  004c0	e5933000	 ldr         r3, [r3]
  004c4	e2430001	 sub         r0, r3, #1
  004c8	e59d3008	 ldr         r3, [sp, #8]
  004cc	e5931000	 ldr         r1, [r3]
  004d0	e3a03004	 mov         r3, #4
  004d4	e0020391	 mul         r2, r1, r3
  004d8	e59d3034	 ldr         r3, [sp, #0x34]
  004dc	e2833004	 add         r3, r3, #4
  004e0	e0833002	 add         r3, r3, r2
  004e4	e5830000	 str         r0, [r3]
  004e8		 |$LN2@UpdatePowe@2|

; 196  :                 }
; 197  : 
; 198  :             if (newState != PwrDeviceUnspecified)

  004e8	e59d3040	 ldr         r3, [sp, #0x40]
  004ec	e3730001	 cmn         r3, #1
  004f0	0a00000e	 beq         |$LN1@UpdatePowe@2|

; 199  :                 {
; 200  :                 m_rgPowerDomainConstraints[newState] += 1;

  004f4	e59d3034	 ldr         r3, [sp, #0x34]
  004f8	e2831004	 add         r1, r3, #4
  004fc	e59d2040	 ldr         r2, [sp, #0x40]
  00500	e3a03004	 mov         r3, #4
  00504	e0030392	 mul         r3, r2, r3
  00508	e0813003	 add         r3, r1, r3
  0050c	e5933000	 ldr         r3, [r3]
  00510	e2830001	 add         r0, r3, #1
  00514	e59d1040	 ldr         r1, [sp, #0x40]
  00518	e3a03004	 mov         r3, #4
  0051c	e0020391	 mul         r2, r1, r3
  00520	e59d3034	 ldr         r3, [sp, #0x34]
  00524	e2833004	 add         r3, r3, #4
  00528	e0833002	 add         r3, r3, r2
  0052c	e5830000	 str         r0, [r3]
  00530		 |$LN1@UpdatePowe@2|

; 201  :                 }
; 202  :             *pDataNode = newState;

  00530	e59d2040	 ldr         r2, [sp, #0x40]
  00534	e59d3008	 ldr         r3, [sp, #8]
  00538	e5832000	 str         r2, [r3]
  0053c		 |$LN5@UpdatePowe@2|

; 203  :             break;
; 204  :         }
; 205  :     
; 206  :     // update operating mode
; 207  :     rc = UpdatePowerDomainConstraint(
; 208  :             idContext
; 209  :             );

  0053c	e59d1048	 ldr         r1, [sp, #0x48]
  00540	e59d3034	 ldr         r3, [sp, #0x34]
  00544	e5933000	 ldr         r3, [r3]
  00548	e59d0034	 ldr         r0, [sp, #0x34]
  0054c	e5933000	 ldr         r3, [r3]
  00550	e1a0e00f	 mov         lr, pc
  00554	e12fff13	 bx          r3
  00558	e58d0028	 str         r0, [sp, #0x28]
  0055c	e59d3028	 ldr         r3, [sp, #0x28]
  00560	e58d3004	 str         r3, [sp, #4]

; 210  :     
; 211  :     Unlock();

  00564	e59d0034	 ldr         r0, [sp, #0x34]
  00568	eb000000	 bl          |?Unlock@PowerDomainConstraint@@QAAXXZ|
  0056c		 |$LN11@UpdatePowe@2|
  0056c		 |$LN13@UpdatePowe@2|
  0056c		 |$LN15@UpdatePowe@2|
  0056c		 |$cleanUp$37973|

; 212  : 
; 213  : cleanUp:
; 214  :     return rc;

  0056c	e59d3004	 ldr         r3, [sp, #4]
  00570	e58d300c	 str         r3, [sp, #0xC]

; 215  : } 

  00574	e59d000c	 ldr         r0, [sp, #0xC]
  00578	e28dd02c	 add         sp, sp, #0x2C
  0057c	e89d6000	 ldmia       sp, {sp, lr}
  00580	e12fff1e	 bx          lr
  00584		 |$M38307|

			 ENDP  ; |?UpdatePowerDomainConstraint@PowerDomainConstraint@@QAAHPAXKKIK@Z|, PowerDomainConstraint::UpdatePowerDomainConstraint

; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\pm\constraintadapters\powerdomainconstraint\powerdomainconstraint.h

  00000			 AREA	 |.pdata|, PDATA
|$T38314| DCD	|$LN5@Lock|
	DCD	0x40000503
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Lock@PowerDomainConstraint@@QAAXXZ| PROC ; PowerDomainConstraint::Lock

; 74   :     {

  00000		 |$LN5@Lock|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M38311|

; 75   :     }

  0000c	e89d6000	 ldmia       sp, {sp, lr}
  00010	e12fff1e	 bx          lr
  00014		 |$M38312|

			 ENDP  ; |?Lock@PowerDomainConstraint@@QAAXXZ|, PowerDomainConstraint::Lock


  00000			 AREA	 |.pdata|, PDATA
|$T38321| DCD	|$LN5@Unlock|
	DCD	0x40000503
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Unlock@PowerDomainConstraint@@QAAXXZ| PROC ; PowerDomainConstraint::Unlock

; 79   :     {

  00000		 |$LN5@Unlock|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M38318|

; 80   :     }

  0000c	e89d6000	 ldmia       sp, {sp, lr}
  00010	e12fff1e	 bx          lr
  00014		 |$M38319|

			 ENDP  ; |?Unlock@PowerDomainConstraint@@QAAXXZ|, PowerDomainConstraint::Unlock

	EXPORT	|?GetPowerDomainConstraint@PowerDomainConstraint@@QAAKXZ| ; PowerDomainConstraint::GetPowerDomainConstraint
	EXPORT	|?UpdatePowerDomainConstraint@MpuPowerDomainConstraint@@MAAHK@Z| ; MpuPowerDomainConstraint::UpdatePowerDomainConstraint
	IMPORT	|?NotifyDomainCallbacks@@YAXIIK@Z|	; NotifyDomainCallbacks

  00018			 AREA	 |.pdata|, PDATA
|$T38329| DCD	|$LN6@UpdatePowe@3|
	DCD	0x40002c04
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\pm\constraintadapters\powerdomainconstraint\powerdomainconstraint.cpp

  00584			 AREA	 |.text|, CODE, ARM

  00584		 |?UpdatePowerDomainConstraint@MpuPowerDomainConstraint@@MAAHK@Z| PROC ; MpuPowerDomainConstraint::UpdatePowerDomainConstraint

; 228  : {

  00584		 |$LN6@UpdatePowe@3|
  00584	e1a0c00d	 mov         r12, sp
  00588	e92d0003	 stmdb       sp!, {r0, r1}
  0058c	e92d5000	 stmdb       sp!, {r12, lr}
  00590	e24dd01c	 sub         sp, sp, #0x1C
  00594		 |$M38326|

; 229  :     BOOL rc = TRUE;

  00594	e3a03001	 mov         r3, #1
  00598	e58d3000	 str         r3, [sp]

; 230  :     DWORD powerDomainOld = GetPowerDomainConstraint();

  0059c	e59d0024	 ldr         r0, [sp, #0x24]
  005a0	eb000000	 bl          |?GetPowerDomainConstraint@PowerDomainConstraint@@QAAKXZ|
  005a4	e58d000c	 str         r0, [sp, #0xC]
  005a8	e59d300c	 ldr         r3, [sp, #0xC]
  005ac	e58d3004	 str         r3, [sp, #4]

; 231  : 
; 232  :     // determine new power domain state
; 233  :     PowerDomainConstraint::UpdatePowerDomainConstraint(idContext);

  005b0	e59d1028	 ldr         r1, [sp, #0x28]
  005b4	e59d0024	 ldr         r0, [sp, #0x24]
  005b8	eb000000	 bl          |?UpdatePowerDomainConstraint@PowerDomainConstraint@@MAAHK@Z|

; 234  : 
; 235  :     // private mapping to power domain state
; 236  :     if (powerDomainOld != GetPowerDomainConstraint())

  005bc	e59d0024	 ldr         r0, [sp, #0x24]
  005c0	eb000000	 bl          |?GetPowerDomainConstraint@PowerDomainConstraint@@QAAKXZ|
  005c4	e58d0010	 str         r0, [sp, #0x10]
  005c8	e59d2004	 ldr         r2, [sp, #4]
  005cc	e59d3010	 ldr         r3, [sp, #0x10]
  005d0	e1520003	 cmp         r2, r3
  005d4	0a000010	 beq         |$LN1@UpdatePowe@3|

; 237  :         {
; 238  :         rc = FlushDomainPowerState();

  005d8	e59d3024	 ldr         r3, [sp, #0x24]
  005dc	e5933000	 ldr         r3, [r3]
  005e0	e2833008	 add         r3, r3, #8
  005e4	e59d0024	 ldr         r0, [sp, #0x24]
  005e8	e5933000	 ldr         r3, [r3]
  005ec	e1a0e00f	 mov         lr, pc
  005f0	e12fff13	 bx          r3
  005f4	e58d0014	 str         r0, [sp, #0x14]
  005f8	e59d3014	 ldr         r3, [sp, #0x14]
  005fc	e58d3000	 str         r3, [sp]

; 239  : 
; 240  :         NotifyDomainCallbacks(POWERDOMAIN_MPU, 
; 241  :             GetPowerDomainConstraint(),
; 242  :             idContext
; 243  :             );

  00600	e59d0024	 ldr         r0, [sp, #0x24]
  00604	eb000000	 bl          |?GetPowerDomainConstraint@PowerDomainConstraint@@QAAKXZ|
  00608	e58d0018	 str         r0, [sp, #0x18]
  0060c	e59d2028	 ldr         r2, [sp, #0x28]
  00610	e59d1018	 ldr         r1, [sp, #0x18]
  00614	e3a00005	 mov         r0, #5
  00618	eb000000	 bl          |?NotifyDomainCallbacks@@YAXIIK@Z|
  0061c		 |$LN1@UpdatePowe@3|

; 244  :         }
; 245  : 
; 246  :     return rc;

  0061c	e59d3000	 ldr         r3, [sp]
  00620	e58d3008	 str         r3, [sp, #8]

; 247  : }

  00624	e59d0008	 ldr         r0, [sp, #8]
  00628	e28dd01c	 add         sp, sp, #0x1C
  0062c	e89d6000	 ldmia       sp, {sp, lr}
  00630	e12fff1e	 bx          lr
  00634		 |$M38327|

			 ENDP  ; |?UpdatePowerDomainConstraint@MpuPowerDomainConstraint@@MAAHK@Z|, MpuPowerDomainConstraint::UpdatePowerDomainConstraint

; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\pm\constraintadapters\powerdomainconstraint\powerdomainconstraint.h

  00000			 AREA	 |.pdata|, PDATA
|$T38335| DCD	|$LN5@GetPowerDo|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetPowerDomainConstraint@PowerDomainConstraint@@QAAKXZ| PROC ; PowerDomainConstraint::GetPowerDomainConstraint

; 84   :     {

  00000		 |$LN5@GetPowerDo|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M38332|

; 85   :         return m_powerDomainCurrent;

  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e2833024	 add         r3, r3, #0x24
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3000	 str         r3, [sp]

; 86   :     }

  00020	e59d0000	 ldr         r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M38333|

			 ENDP  ; |?GetPowerDomainConstraint@PowerDomainConstraint@@QAAKXZ|, PowerDomainConstraint::GetPowerDomainConstraint

	EXPORT	|?FlushDomainPowerState@MpuPowerDomainConstraint@@UAAHXZ| ; MpuPowerDomainConstraint::FlushDomainPowerState
	IMPORT	|KernelIoControl|

  00020			 AREA	 |.pdata|, PDATA
|$T38352| DCD	|$LN18@FlushDomai|
	DCD	0x40004004
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\pm\constraintadapters\powerdomainconstraint\powerdomainconstraint.cpp

  00634			 AREA	 |.text|, CODE, ARM

  00634		 |?FlushDomainPowerState@MpuPowerDomainConstraint@@UAAHXZ| PROC ; MpuPowerDomainConstraint::FlushDomainPowerState

; 259  : {

  00634		 |$LN18@FlushDomai|
  00634	e1a0c00d	 mov         r12, sp
  00638	e92d0001	 stmdb       sp!, {r0}
  0063c	e92d5000	 stmdb       sp!, {r12, lr}
  00640	e24dd034	 sub         sp, sp, #0x34
  00644		 |$M38349|

; 260  :     BOOL rc;
; 261  :     IOCTL_PRCM_DOMAIN_SET_POWERSTATE_IN domainPowerState;
; 262  : 
; 263  :     // initialize structure
; 264  :     domainPowerState.size = sizeof(IOCTL_PRCM_DOMAIN_SET_POWERSTATE_IN);

  00644	e3a03010	 mov         r3, #0x10
  00648	e58d300c	 str         r3, [sp, #0xC]

; 265  :     domainPowerState.powerDomain = POWERDOMAIN_MPU;

  0064c	e3a03005	 mov         r3, #5
  00650	e58d3010	 str         r3, [sp, #0x10]

; 266  :     
; 267  :     switch (GetPowerDomainConstraint())

  00654	e59d003c	 ldr         r0, [sp, #0x3C]
  00658	eb000000	 bl          |?GetPowerDomainConstraint@PowerDomainConstraint@@QAAKXZ|
  0065c	e58d0028	 str         r0, [sp, #0x28]
  00660	e59d3028	 ldr         r3, [sp, #0x28]
  00664	e58d302c	 str         r3, [sp, #0x2C]
  00668	e59d302c	 ldr         r3, [sp, #0x2C]
  0066c	e3530004	 cmp         r3, #4
  00670	8a00001c	 bhi         |$LN5@FlushDomai|
  00674	e59d202c	 ldr         r2, [sp, #0x2C]
  00678	e1a03102	 mov         r3, r2, lsl #2
  0067c	e083300f	 add         r3, r3, pc
  00680	e5933004	 ldr         r3, [r3, #4]
  00684	e08ff003	 add         pc, pc, r3
  00688		 |$LN10@FlushDomai|
  00688		 |$LN9@FlushDomai|
  00688		 |$LN11@FlushDomai|
  00688	00000010	 DCD         0x10
  0068c		 |$LN12@FlushDomai|
  0068c	00000010	 DCD         0x10
  00690		 |$LN13@FlushDomai|
  00690	00000024	 DCD         0x24
  00694		 |$LN14@FlushDomai|
  00694	00000038	 DCD         0x38
  00698		 |$LN15@FlushDomai|
  00698	0000004c	 DCD         0x4c
  0069c		 |$LN4@FlushDomai|

; 268  :         {
; 269  :         case D0:
; 270  :         case D1:
; 271  :             // set power domain to on
; 272  :             domainPowerState.powerState = POWERSTATE_ON;

  0069c	e3a03003	 mov         r3, #3
  006a0	e58d3014	 str         r3, [sp, #0x14]

; 273  :             domainPowerState.logicState = LOGICRETSTATE_LOGICRET_DOMAINRET;

  006a4	e3a03004	 mov         r3, #4
  006a8	e58d3018	 str         r3, [sp, #0x18]

; 274  :             break;

  006ac	ea00000d	 b           |$LN5@FlushDomai|
  006b0		 |$LN3@FlushDomai|

; 275  :             
; 276  :         case D2:
; 277  :             // set close switch retention
; 278  :             domainPowerState.powerState = POWERSTATE_RETENTION;

  006b0	e3a03001	 mov         r3, #1
  006b4	e58d3014	 str         r3, [sp, #0x14]

; 279  :             domainPowerState.logicState = LOGICRETSTATE_LOGICRET_DOMAINRET;

  006b8	e3a03004	 mov         r3, #4
  006bc	e58d3018	 str         r3, [sp, #0x18]

; 280  :             break;

  006c0	ea000008	 b           |$LN5@FlushDomai|
  006c4		 |$LN2@FlushDomai|

; 281  : 
; 282  :         case D3:
; 283  :             // set open switch retention
; 284  :             domainPowerState.powerState = POWERSTATE_RETENTION;

  006c4	e3a03001	 mov         r3, #1
  006c8	e58d3014	 str         r3, [sp, #0x14]

; 285  :             domainPowerState.logicState = LOGICRETSTATE_LOGICOFF_DOMAINRET;

  006cc	e3a03000	 mov         r3, #0
  006d0	e58d3018	 str         r3, [sp, #0x18]

; 286  :             break;

  006d4	ea000003	 b           |$LN5@FlushDomai|
  006d8		 |$LN1@FlushDomai|

; 287  : 
; 288  :         case D4:
; 289  :             // set power domain to off mode
; 290  :             domainPowerState.powerState = POWERSTATE_OFF;

  006d8	e3a03000	 mov         r3, #0
  006dc	e58d3014	 str         r3, [sp, #0x14]

; 291  :             domainPowerState.logicState = LOGICRETSTATE_LOGICOFF_DOMAINRET;

  006e0	e3a03000	 mov         r3, #0
  006e4	e58d3018	 str         r3, [sp, #0x18]
  006e8		 |$LN5@FlushDomai|

; 292  :             break;
; 293  :         }
; 294  :     
; 295  :     // send ioctl
; 296  :     rc = KernelIoControl(IOCTL_PRCM_DOMAIN_SET_POWERSTATE, &domainPowerState, 
; 297  :             sizeof(IOCTL_PRCM_DOMAIN_SET_POWERSTATE_IN), 0, 0, 0
; 298  :             );

  006e8	e3a03000	 mov         r3, #0
  006ec	e58d3004	 str         r3, [sp, #4]
  006f0	e3a03000	 mov         r3, #0
  006f4	e58d3000	 str         r3, [sp]
  006f8	e3a03000	 mov         r3, #0
  006fc	e3a02010	 mov         r2, #0x10
  00700	e28d100c	 add         r1, sp, #0xC
  00704	e59f0024	 ldr         r0, [pc, #0x24]
  00708	eb000000	 bl          KernelIoControl
  0070c	e58d0030	 str         r0, [sp, #0x30]
  00710	e59d3030	 ldr         r3, [sp, #0x30]
  00714	e58d3008	 str         r3, [sp, #8]

; 299  : 
; 300  :     return rc;

  00718	e59d3008	 ldr         r3, [sp, #8]
  0071c	e58d3024	 str         r3, [sp, #0x24]

; 301  : }

  00720	e59d0024	 ldr         r0, [sp, #0x24]
  00724	e28dd034	 add         sp, sp, #0x34
  00728	e89d6000	 ldmia       sp, {sp, lr}
  0072c	e12fff1e	 bx          lr
  00730		 |$LN19@FlushDomai|
  00730		 |$LN20@FlushDomai|
  00730	01f50fcc	 DCD         0x1f50fcc
  00734		 |$M38350|

			 ENDP  ; |?FlushDomainPowerState@MpuPowerDomainConstraint@@UAAHXZ|, MpuPowerDomainConstraint::FlushDomainPowerState

	EXPORT	|?UpdatePowerDomainConstraint@IvaPowerDomainConstraint@@MAAHK@Z| ; IvaPowerDomainConstraint::UpdatePowerDomainConstraint

  00028			 AREA	 |.pdata|, PDATA
|$T38360| DCD	|$LN6@UpdatePowe@4|
	DCD	0x40002c04
; Function compile flags: /Odtp

  00734			 AREA	 |.text|, CODE, ARM

  00734		 |?UpdatePowerDomainConstraint@IvaPowerDomainConstraint@@MAAHK@Z| PROC ; IvaPowerDomainConstraint::UpdatePowerDomainConstraint

; 314  : {

  00734		 |$LN6@UpdatePowe@4|
  00734	e1a0c00d	 mov         r12, sp
  00738	e92d0003	 stmdb       sp!, {r0, r1}
  0073c	e92d5000	 stmdb       sp!, {r12, lr}
  00740	e24dd01c	 sub         sp, sp, #0x1C
  00744		 |$M38357|

; 315  :     BOOL rc = TRUE;

  00744	e3a03001	 mov         r3, #1
  00748	e58d3000	 str         r3, [sp]

; 316  :     DWORD powerDomainOld = GetPowerDomainConstraint();

  0074c	e59d0024	 ldr         r0, [sp, #0x24]
  00750	eb000000	 bl          |?GetPowerDomainConstraint@PowerDomainConstraint@@QAAKXZ|
  00754	e58d000c	 str         r0, [sp, #0xC]
  00758	e59d300c	 ldr         r3, [sp, #0xC]
  0075c	e58d3004	 str         r3, [sp, #4]

; 317  : 
; 318  :     // determine new power domain state
; 319  :     PowerDomainConstraint::UpdatePowerDomainConstraint(idContext);

  00760	e59d1028	 ldr         r1, [sp, #0x28]
  00764	e59d0024	 ldr         r0, [sp, #0x24]
  00768	eb000000	 bl          |?UpdatePowerDomainConstraint@PowerDomainConstraint@@MAAHK@Z|

; 320  : 
; 321  :     // private mapping to power domain state
; 322  :     if (powerDomainOld != GetPowerDomainConstraint())

  0076c	e59d0024	 ldr         r0, [sp, #0x24]
  00770	eb000000	 bl          |?GetPowerDomainConstraint@PowerDomainConstraint@@QAAKXZ|
  00774	e58d0010	 str         r0, [sp, #0x10]
  00778	e59d2004	 ldr         r2, [sp, #4]
  0077c	e59d3010	 ldr         r3, [sp, #0x10]
  00780	e1520003	 cmp         r2, r3
  00784	0a000010	 beq         |$LN1@UpdatePowe@4|

; 323  :         {
; 324  :         rc = FlushDomainPowerState();

  00788	e59d3024	 ldr         r3, [sp, #0x24]
  0078c	e5933000	 ldr         r3, [r3]
  00790	e2833008	 add         r3, r3, #8
  00794	e59d0024	 ldr         r0, [sp, #0x24]
  00798	e5933000	 ldr         r3, [r3]
  0079c	e1a0e00f	 mov         lr, pc
  007a0	e12fff13	 bx          r3
  007a4	e58d0014	 str         r0, [sp, #0x14]
  007a8	e59d3014	 ldr         r3, [sp, #0x14]
  007ac	e58d3000	 str         r3, [sp]

; 325  : 
; 326  :         NotifyDomainCallbacks(POWERDOMAIN_IVA2, 
; 327  :             GetPowerDomainConstraint(),
; 328  :             idContext
; 329  :             );

  007b0	e59d0024	 ldr         r0, [sp, #0x24]
  007b4	eb000000	 bl          |?GetPowerDomainConstraint@PowerDomainConstraint@@QAAKXZ|
  007b8	e58d0018	 str         r0, [sp, #0x18]
  007bc	e59d2028	 ldr         r2, [sp, #0x28]
  007c0	e59d1018	 ldr         r1, [sp, #0x18]
  007c4	e3a00008	 mov         r0, #8
  007c8	eb000000	 bl          |?NotifyDomainCallbacks@@YAXIIK@Z|
  007cc		 |$LN1@UpdatePowe@4|

; 330  :         }
; 331  :                   
; 332  :     return rc;

  007cc	e59d3000	 ldr         r3, [sp]
  007d0	e58d3008	 str         r3, [sp, #8]

; 333  : }

  007d4	e59d0008	 ldr         r0, [sp, #8]
  007d8	e28dd01c	 add         sp, sp, #0x1C
  007dc	e89d6000	 ldmia       sp, {sp, lr}
  007e0	e12fff1e	 bx          lr
  007e4		 |$M38358|

			 ENDP  ; |?UpdatePowerDomainConstraint@IvaPowerDomainConstraint@@MAAHK@Z|, IvaPowerDomainConstraint::UpdatePowerDomainConstraint

	EXPORT	|?FlushDomainPowerState@IvaPowerDomainConstraint@@UAAHXZ| ; IvaPowerDomainConstraint::FlushDomainPowerState

  00030			 AREA	 |.pdata|, PDATA
|$T38375| DCD	|$LN18@FlushDomai@2|
	DCD	0x40004004
; Function compile flags: /Odtp

  007e4			 AREA	 |.text|, CODE, ARM

  007e4		 |?FlushDomainPowerState@IvaPowerDomainConstraint@@UAAHXZ| PROC ; IvaPowerDomainConstraint::FlushDomainPowerState

; 345  : {

  007e4		 |$LN18@FlushDomai@2|
  007e4	e1a0c00d	 mov         r12, sp
  007e8	e92d0001	 stmdb       sp!, {r0}
  007ec	e92d5000	 stmdb       sp!, {r12, lr}
  007f0	e24dd034	 sub         sp, sp, #0x34
  007f4		 |$M38372|

; 346  :     BOOL rc;
; 347  :     IOCTL_PRCM_DOMAIN_SET_POWERSTATE_IN domainPowerState;
; 348  : 
; 349  :     // initialize structure
; 350  :     domainPowerState.size = sizeof(IOCTL_PRCM_DOMAIN_SET_POWERSTATE_IN);

  007f4	e3a03010	 mov         r3, #0x10
  007f8	e58d300c	 str         r3, [sp, #0xC]

; 351  :     domainPowerState.powerDomain = POWERDOMAIN_IVA2;

  007fc	e3a03008	 mov         r3, #8
  00800	e58d3010	 str         r3, [sp, #0x10]

; 352  :     
; 353  :     switch (GetPowerDomainConstraint())

  00804	e59d003c	 ldr         r0, [sp, #0x3C]
  00808	eb000000	 bl          |?GetPowerDomainConstraint@PowerDomainConstraint@@QAAKXZ|
  0080c	e58d0028	 str         r0, [sp, #0x28]
  00810	e59d3028	 ldr         r3, [sp, #0x28]
  00814	e58d302c	 str         r3, [sp, #0x2C]
  00818	e59d302c	 ldr         r3, [sp, #0x2C]
  0081c	e3530004	 cmp         r3, #4
  00820	8a00001c	 bhi         |$LN5@FlushDomai@2|
  00824	e59d202c	 ldr         r2, [sp, #0x2C]
  00828	e1a03102	 mov         r3, r2, lsl #2
  0082c	e083300f	 add         r3, r3, pc
  00830	e5933004	 ldr         r3, [r3, #4]
  00834	e08ff003	 add         pc, pc, r3
  00838		 |$LN10@FlushDomai@2|
  00838		 |$LN9@FlushDomai@2|
  00838		 |$LN11@FlushDomai@2|
  00838	00000010	 DCD         0x10
  0083c		 |$LN12@FlushDomai@2|
  0083c	00000010	 DCD         0x10
  00840		 |$LN13@FlushDomai@2|
  00840	00000024	 DCD         0x24
  00844		 |$LN14@FlushDomai@2|
  00844	00000038	 DCD         0x38
  00848		 |$LN15@FlushDomai@2|
  00848	0000004c	 DCD         0x4c
  0084c		 |$LN4@FlushDomai@2|

; 354  :         {
; 355  :         case D0:
; 356  :         case D1:
; 357  :             // set power domain to on
; 358  :             domainPowerState.powerState = POWERSTATE_ON;

  0084c	e3a03003	 mov         r3, #3
  00850	e58d3014	 str         r3, [sp, #0x14]

; 359  :             domainPowerState.logicState = LOGICRETSTATE_LOGICRET_DOMAINRET;

  00854	e3a03004	 mov         r3, #4
  00858	e58d3018	 str         r3, [sp, #0x18]

; 360  :             break;

  0085c	ea00000d	 b           |$LN5@FlushDomai@2|
  00860		 |$LN3@FlushDomai@2|

; 361  :             
; 362  :         case D2:
; 363  :             // set close switch retention
; 364  :             domainPowerState.powerState = POWERSTATE_RETENTION;

  00860	e3a03001	 mov         r3, #1
  00864	e58d3014	 str         r3, [sp, #0x14]

; 365  :             domainPowerState.logicState = LOGICRETSTATE_LOGICRET_DOMAINRET;

  00868	e3a03004	 mov         r3, #4
  0086c	e58d3018	 str         r3, [sp, #0x18]

; 366  :             break;

  00870	ea000008	 b           |$LN5@FlushDomai@2|
  00874		 |$LN2@FlushDomai@2|

; 367  : 
; 368  :         case D3:
; 369  :             // set open switch retention
; 370  :             domainPowerState.powerState = POWERSTATE_RETENTION;

  00874	e3a03001	 mov         r3, #1
  00878	e58d3014	 str         r3, [sp, #0x14]

; 371  :             domainPowerState.logicState = LOGICRETSTATE_LOGICRET_DOMAINRET;

  0087c	e3a03004	 mov         r3, #4
  00880	e58d3018	 str         r3, [sp, #0x18]

; 372  :             break;

  00884	ea000003	 b           |$LN5@FlushDomai@2|
  00888		 |$LN1@FlushDomai@2|

; 373  : 
; 374  :         case D4:
; 375  :             // set power domain to off mode
; 376  :             domainPowerState.powerState = POWERSTATE_OFF;

  00888	e3a03000	 mov         r3, #0
  0088c	e58d3014	 str         r3, [sp, #0x14]

; 377  :             domainPowerState.logicState = LOGICRETSTATE_LOGICRET_DOMAINRET;

  00890	e3a03004	 mov         r3, #4
  00894	e58d3018	 str         r3, [sp, #0x18]
  00898		 |$LN5@FlushDomai@2|

; 378  :             break;
; 379  :         }
; 380  :     
; 381  :     // send ioctl
; 382  :     rc = KernelIoControl(IOCTL_PRCM_DOMAIN_SET_POWERSTATE, &domainPowerState, 
; 383  :             sizeof(IOCTL_PRCM_DOMAIN_SET_POWERSTATE_IN), 0, 0, 0
; 384  :             );

  00898	e3a03000	 mov         r3, #0
  0089c	e58d3004	 str         r3, [sp, #4]
  008a0	e3a03000	 mov         r3, #0
  008a4	e58d3000	 str         r3, [sp]
  008a8	e3a03000	 mov         r3, #0
  008ac	e3a02010	 mov         r2, #0x10
  008b0	e28d100c	 add         r1, sp, #0xC
  008b4	e59f0024	 ldr         r0, [pc, #0x24]
  008b8	eb000000	 bl          KernelIoControl
  008bc	e58d0030	 str         r0, [sp, #0x30]
  008c0	e59d3030	 ldr         r3, [sp, #0x30]
  008c4	e58d3008	 str         r3, [sp, #8]

; 385  : 
; 386  :     return rc;

  008c8	e59d3008	 ldr         r3, [sp, #8]
  008cc	e58d3024	 str         r3, [sp, #0x24]

; 387  : }

  008d0	e59d0024	 ldr         r0, [sp, #0x24]
  008d4	e28dd034	 add         sp, sp, #0x34
  008d8	e89d6000	 ldmia       sp, {sp, lr}
  008dc	e12fff1e	 bx          lr
  008e0		 |$LN19@FlushDomai@2|
  008e0		 |$LN20@FlushDomai@2|
  008e0	01f50fcc	 DCD         0x1f50fcc
  008e4		 |$M38373|

			 ENDP  ; |?FlushDomainPowerState@IvaPowerDomainConstraint@@UAAHXZ|, IvaPowerDomainConstraint::FlushDomainPowerState

	EXPORT	|?UpdatePowerDomainConstraint@CorePowerDomainConstraint@@MAAHK@Z| ; CorePowerDomainConstraint::UpdatePowerDomainConstraint

  00038			 AREA	 |.pdata|, PDATA
|$T38383| DCD	|$LN6@UpdatePowe@5|
	DCD	0x40002c04
; Function compile flags: /Odtp

  008e4			 AREA	 |.text|, CODE, ARM

  008e4		 |?UpdatePowerDomainConstraint@CorePowerDomainConstraint@@MAAHK@Z| PROC ; CorePowerDomainConstraint::UpdatePowerDomainConstraint

; 400  : {

  008e4		 |$LN6@UpdatePowe@5|
  008e4	e1a0c00d	 mov         r12, sp
  008e8	e92d0003	 stmdb       sp!, {r0, r1}
  008ec	e92d5000	 stmdb       sp!, {r12, lr}
  008f0	e24dd01c	 sub         sp, sp, #0x1C
  008f4		 |$M38380|

; 401  :     BOOL rc = TRUE;

  008f4	e3a03001	 mov         r3, #1
  008f8	e58d3000	 str         r3, [sp]

; 402  :     DWORD powerDomainOld = GetPowerDomainConstraint();

  008fc	e59d0024	 ldr         r0, [sp, #0x24]
  00900	eb000000	 bl          |?GetPowerDomainConstraint@PowerDomainConstraint@@QAAKXZ|
  00904	e58d000c	 str         r0, [sp, #0xC]
  00908	e59d300c	 ldr         r3, [sp, #0xC]
  0090c	e58d3004	 str         r3, [sp, #4]

; 403  : 
; 404  :     // determine new power domain state
; 405  :     PowerDomainConstraint::UpdatePowerDomainConstraint(idContext);

  00910	e59d1028	 ldr         r1, [sp, #0x28]
  00914	e59d0024	 ldr         r0, [sp, #0x24]
  00918	eb000000	 bl          |?UpdatePowerDomainConstraint@PowerDomainConstraint@@MAAHK@Z|

; 406  : 
; 407  :     // private mapping to power domain state
; 408  :     if (powerDomainOld != GetPowerDomainConstraint())

  0091c	e59d0024	 ldr         r0, [sp, #0x24]
  00920	eb000000	 bl          |?GetPowerDomainConstraint@PowerDomainConstraint@@QAAKXZ|
  00924	e58d0010	 str         r0, [sp, #0x10]
  00928	e59d2004	 ldr         r2, [sp, #4]
  0092c	e59d3010	 ldr         r3, [sp, #0x10]
  00930	e1520003	 cmp         r2, r3
  00934	0a000010	 beq         |$LN1@UpdatePowe@5|

; 409  :         {
; 410  :         rc = FlushDomainPowerState();

  00938	e59d3024	 ldr         r3, [sp, #0x24]
  0093c	e5933000	 ldr         r3, [r3]
  00940	e2833008	 add         r3, r3, #8
  00944	e59d0024	 ldr         r0, [sp, #0x24]
  00948	e5933000	 ldr         r3, [r3]
  0094c	e1a0e00f	 mov         lr, pc
  00950	e12fff13	 bx          r3
  00954	e58d0014	 str         r0, [sp, #0x14]
  00958	e59d3014	 ldr         r3, [sp, #0x14]
  0095c	e58d3000	 str         r3, [sp]

; 411  : 
; 412  :         NotifyDomainCallbacks(POWERDOMAIN_CORE, 
; 413  :             GetPowerDomainConstraint(),
; 414  :             idContext
; 415  :             );

  00960	e59d0024	 ldr         r0, [sp, #0x24]
  00964	eb000000	 bl          |?GetPowerDomainConstraint@PowerDomainConstraint@@QAAKXZ|
  00968	e58d0018	 str         r0, [sp, #0x18]
  0096c	e59d2028	 ldr         r2, [sp, #0x28]
  00970	e59d1018	 ldr         r1, [sp, #0x18]
  00974	e3a00001	 mov         r0, #1
  00978	eb000000	 bl          |?NotifyDomainCallbacks@@YAXIIK@Z|
  0097c		 |$LN1@UpdatePowe@5|

; 416  :         }
; 417  :                   
; 418  :     return rc;

  0097c	e59d3000	 ldr         r3, [sp]
  00980	e58d3008	 str         r3, [sp, #8]

; 419  : }

  00984	e59d0008	 ldr         r0, [sp, #8]
  00988	e28dd01c	 add         sp, sp, #0x1C
  0098c	e89d6000	 ldmia       sp, {sp, lr}
  00990	e12fff1e	 bx          lr
  00994		 |$M38381|

			 ENDP  ; |?UpdatePowerDomainConstraint@CorePowerDomainConstraint@@MAAHK@Z|, CorePowerDomainConstraint::UpdatePowerDomainConstraint

	EXPORT	|?FlushDomainPowerState@CorePowerDomainConstraint@@UAAHXZ| ; CorePowerDomainConstraint::FlushDomainPowerState

  00040			 AREA	 |.pdata|, PDATA
|$T38398| DCD	|$LN18@FlushDomai@3|
	DCD	0x40004004
; Function compile flags: /Odtp

  00994			 AREA	 |.text|, CODE, ARM

  00994		 |?FlushDomainPowerState@CorePowerDomainConstraint@@UAAHXZ| PROC ; CorePowerDomainConstraint::FlushDomainPowerState

; 431  : {   

  00994		 |$LN18@FlushDomai@3|
  00994	e1a0c00d	 mov         r12, sp
  00998	e92d0001	 stmdb       sp!, {r0}
  0099c	e92d5000	 stmdb       sp!, {r12, lr}
  009a0	e24dd034	 sub         sp, sp, #0x34
  009a4		 |$M38395|

; 432  :     BOOL rc;
; 433  :     IOCTL_PRCM_DOMAIN_SET_POWERSTATE_IN domainPowerState;
; 434  : 
; 435  :     // initialize structure
; 436  :     domainPowerState.size = sizeof(IOCTL_PRCM_DOMAIN_SET_POWERSTATE_IN);

  009a4	e3a03010	 mov         r3, #0x10
  009a8	e58d300c	 str         r3, [sp, #0xC]

; 437  :     domainPowerState.powerDomain = POWERDOMAIN_CORE;

  009ac	e3a03001	 mov         r3, #1
  009b0	e58d3010	 str         r3, [sp, #0x10]

; 438  :     
; 439  :     switch (GetPowerDomainConstraint())

  009b4	e59d003c	 ldr         r0, [sp, #0x3C]
  009b8	eb000000	 bl          |?GetPowerDomainConstraint@PowerDomainConstraint@@QAAKXZ|
  009bc	e58d0028	 str         r0, [sp, #0x28]
  009c0	e59d3028	 ldr         r3, [sp, #0x28]
  009c4	e58d302c	 str         r3, [sp, #0x2C]
  009c8	e59d302c	 ldr         r3, [sp, #0x2C]
  009cc	e3530004	 cmp         r3, #4
  009d0	8a00001c	 bhi         |$LN5@FlushDomai@3|
  009d4	e59d202c	 ldr         r2, [sp, #0x2C]
  009d8	e1a03102	 mov         r3, r2, lsl #2
  009dc	e083300f	 add         r3, r3, pc
  009e0	e5933004	 ldr         r3, [r3, #4]
  009e4	e08ff003	 add         pc, pc, r3
  009e8		 |$LN10@FlushDomai@3|
  009e8		 |$LN9@FlushDomai@3|
  009e8		 |$LN11@FlushDomai@3|
  009e8	00000010	 DCD         0x10
  009ec		 |$LN12@FlushDomai@3|
  009ec	00000010	 DCD         0x10
  009f0		 |$LN13@FlushDomai@3|
  009f0	00000024	 DCD         0x24
  009f4		 |$LN14@FlushDomai@3|
  009f4	00000038	 DCD         0x38
  009f8		 |$LN15@FlushDomai@3|
  009f8	0000004c	 DCD         0x4c
  009fc		 |$LN4@FlushDomai@3|

; 440  :         {
; 441  :         case D0:
; 442  :         case D1:
; 443  :             // set power domain to on
; 444  :             domainPowerState.powerState = POWERSTATE_ON;

  009fc	e3a03003	 mov         r3, #3
  00a00	e58d3014	 str         r3, [sp, #0x14]

; 445  :             domainPowerState.logicState = LOGICRETSTATE_LOGICRET_DOMAINRET;

  00a04	e3a03004	 mov         r3, #4
  00a08	e58d3018	 str         r3, [sp, #0x18]

; 446  :             break;

  00a0c	ea00000d	 b           |$LN5@FlushDomai@3|
  00a10		 |$LN3@FlushDomai@3|

; 447  :             
; 448  :         case D2:
; 449  :             // set close switch retention
; 450  :             domainPowerState.powerState = POWERSTATE_RETENTION;

  00a10	e3a03001	 mov         r3, #1
  00a14	e58d3014	 str         r3, [sp, #0x14]

; 451  :             domainPowerState.logicState = LOGICRETSTATE_LOGICRET_DOMAINRET;

  00a18	e3a03004	 mov         r3, #4
  00a1c	e58d3018	 str         r3, [sp, #0x18]

; 452  :             break;

  00a20	ea000008	 b           |$LN5@FlushDomai@3|
  00a24		 |$LN2@FlushDomai@3|

; 453  : 
; 454  :         case D3:
; 455  :             // set open switch retention
; 456  :             domainPowerState.powerState = POWERSTATE_RETENTION;

  00a24	e3a03001	 mov         r3, #1
  00a28	e58d3014	 str         r3, [sp, #0x14]

; 457  :             domainPowerState.logicState = LOGICRETSTATE_LOGICOFF_DOMAINRET;

  00a2c	e3a03000	 mov         r3, #0
  00a30	e58d3018	 str         r3, [sp, #0x18]

; 458  :             break;

  00a34	ea000003	 b           |$LN5@FlushDomai@3|
  00a38		 |$LN1@FlushDomai@3|

; 459  : 
; 460  :         case D4:
; 461  :             // set power domain to off mode
; 462  :             domainPowerState.powerState = POWERSTATE_OFF;

  00a38	e3a03000	 mov         r3, #0
  00a3c	e58d3014	 str         r3, [sp, #0x14]

; 463  :             domainPowerState.logicState = LOGICRETSTATE_LOGICOFF_DOMAINRET;

  00a40	e3a03000	 mov         r3, #0
  00a44	e58d3018	 str         r3, [sp, #0x18]
  00a48		 |$LN5@FlushDomai@3|

; 464  :             break;
; 465  :         }
; 466  :     
; 467  :     // send ioctl
; 468  :     rc = KernelIoControl(IOCTL_PRCM_DOMAIN_SET_POWERSTATE, &domainPowerState, 
; 469  :             sizeof(IOCTL_PRCM_DOMAIN_SET_POWERSTATE_IN), 0, 0, 0
; 470  :             );

  00a48	e3a03000	 mov         r3, #0
  00a4c	e58d3004	 str         r3, [sp, #4]
  00a50	e3a03000	 mov         r3, #0
  00a54	e58d3000	 str         r3, [sp]
  00a58	e3a03000	 mov         r3, #0
  00a5c	e3a02010	 mov         r2, #0x10
  00a60	e28d100c	 add         r1, sp, #0xC
  00a64	e59f0024	 ldr         r0, [pc, #0x24]
  00a68	eb000000	 bl          KernelIoControl
  00a6c	e58d0030	 str         r0, [sp, #0x30]
  00a70	e59d3030	 ldr         r3, [sp, #0x30]
  00a74	e58d3008	 str         r3, [sp, #8]

; 471  : 
; 472  :     return rc;

  00a78	e59d3008	 ldr         r3, [sp, #8]
  00a7c	e58d3024	 str         r3, [sp, #0x24]

; 473  : }

  00a80	e59d0024	 ldr         r0, [sp, #0x24]
  00a84	e28dd034	 add         sp, sp, #0x34
  00a88	e89d6000	 ldmia       sp, {sp, lr}
  00a8c	e12fff1e	 bx          lr
  00a90		 |$LN19@FlushDomai@3|
  00a90		 |$LN20@FlushDomai@3|
  00a90	01f50fcc	 DCD         0x1f50fcc
  00a94		 |$M38396|

			 ENDP  ; |?FlushDomainPowerState@CorePowerDomainConstraint@@UAAHXZ|, CorePowerDomainConstraint::FlushDomainPowerState

	EXPORT	|?UpdatePowerDomainConstraint@PeripheralPowerDomainConstraint@@MAAHK@Z| ; PeripheralPowerDomainConstraint::UpdatePowerDomainConstraint

  00048			 AREA	 |.pdata|, PDATA
|$T38406| DCD	|$LN6@UpdatePowe@6|
	DCD	0x40002c04
; Function compile flags: /Odtp

  00a94			 AREA	 |.text|, CODE, ARM

  00a94		 |?UpdatePowerDomainConstraint@PeripheralPowerDomainConstraint@@MAAHK@Z| PROC ; PeripheralPowerDomainConstraint::UpdatePowerDomainConstraint

; 486  : {

  00a94		 |$LN6@UpdatePowe@6|
  00a94	e1a0c00d	 mov         r12, sp
  00a98	e92d0003	 stmdb       sp!, {r0, r1}
  00a9c	e92d5000	 stmdb       sp!, {r12, lr}
  00aa0	e24dd01c	 sub         sp, sp, #0x1C
  00aa4		 |$M38403|

; 487  :     BOOL rc = TRUE;

  00aa4	e3a03001	 mov         r3, #1
  00aa8	e58d3000	 str         r3, [sp]

; 488  :     DWORD powerDomainOld = GetPowerDomainConstraint();

  00aac	e59d0024	 ldr         r0, [sp, #0x24]
  00ab0	eb000000	 bl          |?GetPowerDomainConstraint@PowerDomainConstraint@@QAAKXZ|
  00ab4	e58d000c	 str         r0, [sp, #0xC]
  00ab8	e59d300c	 ldr         r3, [sp, #0xC]
  00abc	e58d3004	 str         r3, [sp, #4]

; 489  : 
; 490  :     // determine new power domain state
; 491  :     PowerDomainConstraint::UpdatePowerDomainConstraint(idContext);

  00ac0	e59d1028	 ldr         r1, [sp, #0x28]
  00ac4	e59d0024	 ldr         r0, [sp, #0x24]
  00ac8	eb000000	 bl          |?UpdatePowerDomainConstraint@PowerDomainConstraint@@MAAHK@Z|

; 492  : 
; 493  :     // private mapping to power domain state
; 494  :     if (powerDomainOld != GetPowerDomainConstraint())

  00acc	e59d0024	 ldr         r0, [sp, #0x24]
  00ad0	eb000000	 bl          |?GetPowerDomainConstraint@PowerDomainConstraint@@QAAKXZ|
  00ad4	e58d0010	 str         r0, [sp, #0x10]
  00ad8	e59d2004	 ldr         r2, [sp, #4]
  00adc	e59d3010	 ldr         r3, [sp, #0x10]
  00ae0	e1520003	 cmp         r2, r3
  00ae4	0a000010	 beq         |$LN1@UpdatePowe@6|

; 495  :         {
; 496  :         rc = FlushDomainPowerState();

  00ae8	e59d3024	 ldr         r3, [sp, #0x24]
  00aec	e5933000	 ldr         r3, [r3]
  00af0	e2833008	 add         r3, r3, #8
  00af4	e59d0024	 ldr         r0, [sp, #0x24]
  00af8	e5933000	 ldr         r3, [r3]
  00afc	e1a0e00f	 mov         lr, pc
  00b00	e12fff13	 bx          r3
  00b04	e58d0014	 str         r0, [sp, #0x14]
  00b08	e59d3014	 ldr         r3, [sp, #0x14]
  00b0c	e58d3000	 str         r3, [sp]

; 497  : 
; 498  :         NotifyDomainCallbacks(POWERDOMAIN_PERIPHERAL, 
; 499  :             GetPowerDomainConstraint(),
; 500  :             idContext
; 501  :             );

  00b10	e59d0024	 ldr         r0, [sp, #0x24]
  00b14	eb000000	 bl          |?GetPowerDomainConstraint@PowerDomainConstraint@@QAAKXZ|
  00b18	e58d0018	 str         r0, [sp, #0x18]
  00b1c	e59d2028	 ldr         r2, [sp, #0x28]
  00b20	e59d1018	 ldr         r1, [sp, #0x18]
  00b24	e3a00002	 mov         r0, #2
  00b28	eb000000	 bl          |?NotifyDomainCallbacks@@YAXIIK@Z|
  00b2c		 |$LN1@UpdatePowe@6|

; 502  :         }
; 503  :                   
; 504  :     return rc;

  00b2c	e59d3000	 ldr         r3, [sp]
  00b30	e58d3008	 str         r3, [sp, #8]

; 505  : }

  00b34	e59d0008	 ldr         r0, [sp, #8]
  00b38	e28dd01c	 add         sp, sp, #0x1C
  00b3c	e89d6000	 ldmia       sp, {sp, lr}
  00b40	e12fff1e	 bx          lr
  00b44		 |$M38404|

			 ENDP  ; |?UpdatePowerDomainConstraint@PeripheralPowerDomainConstraint@@MAAHK@Z|, PeripheralPowerDomainConstraint::UpdatePowerDomainConstraint

	EXPORT	|?FlushDomainPowerState@PeripheralPowerDomainConstraint@@UAAHXZ| ; PeripheralPowerDomainConstraint::FlushDomainPowerState

  00050			 AREA	 |.pdata|, PDATA
|$T38421| DCD	|$LN17@FlushDomai@4|
	DCD	0x40003b04
; Function compile flags: /Odtp

  00b44			 AREA	 |.text|, CODE, ARM

  00b44		 |?FlushDomainPowerState@PeripheralPowerDomainConstraint@@UAAHXZ| PROC ; PeripheralPowerDomainConstraint::FlushDomainPowerState

; 517  : {

  00b44		 |$LN17@FlushDomai@4|
  00b44	e1a0c00d	 mov         r12, sp
  00b48	e92d0001	 stmdb       sp!, {r0}
  00b4c	e92d5000	 stmdb       sp!, {r12, lr}
  00b50	e24dd034	 sub         sp, sp, #0x34
  00b54		 |$M38418|

; 518  :     BOOL rc;
; 519  :     IOCTL_PRCM_DOMAIN_SET_POWERSTATE_IN domainPowerState;
; 520  : 
; 521  :     // initialize structure
; 522  :     domainPowerState.size = sizeof(IOCTL_PRCM_DOMAIN_SET_POWERSTATE_IN);

  00b54	e3a03010	 mov         r3, #0x10
  00b58	e58d300c	 str         r3, [sp, #0xC]

; 523  :     domainPowerState.powerDomain = POWERDOMAIN_PERIPHERAL;

  00b5c	e3a03002	 mov         r3, #2
  00b60	e58d3010	 str         r3, [sp, #0x10]

; 524  :     
; 525  :     switch (GetPowerDomainConstraint())

  00b64	e59d003c	 ldr         r0, [sp, #0x3C]
  00b68	eb000000	 bl          |?GetPowerDomainConstraint@PowerDomainConstraint@@QAAKXZ|
  00b6c	e58d0028	 str         r0, [sp, #0x28]
  00b70	e59d3028	 ldr         r3, [sp, #0x28]
  00b74	e58d302c	 str         r3, [sp, #0x2C]
  00b78	e59d302c	 ldr         r3, [sp, #0x2C]
  00b7c	e3530004	 cmp         r3, #4
  00b80	8a000017	 bhi         |$LN4@FlushDomai@4|
  00b84	e59d202c	 ldr         r2, [sp, #0x2C]
  00b88	e1a03102	 mov         r3, r2, lsl #2
  00b8c	e083300f	 add         r3, r3, pc
  00b90	e5933004	 ldr         r3, [r3, #4]
  00b94	e08ff003	 add         pc, pc, r3
  00b98		 |$LN9@FlushDomai@4|
  00b98		 |$LN8@FlushDomai@4|
  00b98		 |$LN10@FlushDomai@4|
  00b98	00000010	 DCD         0x10
  00b9c		 |$LN11@FlushDomai@4|
  00b9c	00000010	 DCD         0x10
  00ba0		 |$LN12@FlushDomai@4|
  00ba0	00000024	 DCD         0x24
  00ba4		 |$LN13@FlushDomai@4|
  00ba4	00000024	 DCD         0x24
  00ba8		 |$LN14@FlushDomai@4|
  00ba8	00000038	 DCD         0x38
  00bac		 |$LN3@FlushDomai@4|

; 526  :         {
; 527  :         case D0:
; 528  :         case D1:
; 529  :             // set power domain to on
; 530  :             domainPowerState.powerState = POWERSTATE_ON;

  00bac	e3a03003	 mov         r3, #3
  00bb0	e58d3014	 str         r3, [sp, #0x14]

; 531  :             domainPowerState.logicState = LOGICRETSTATE_LOGICRET_DOMAINRET;

  00bb4	e3a03004	 mov         r3, #4
  00bb8	e58d3018	 str         r3, [sp, #0x18]

; 532  :             break;

  00bbc	ea000008	 b           |$LN4@FlushDomai@4|
  00bc0		 |$LN2@FlushDomai@4|

; 533  :             
; 534  :         case D2:
; 535  :         case D3:
; 536  :             // set close switch retention
; 537  :             domainPowerState.powerState = POWERSTATE_RETENTION;

  00bc0	e3a03001	 mov         r3, #1
  00bc4	e58d3014	 str         r3, [sp, #0x14]

; 538  :             domainPowerState.logicState = LOGICRETSTATE_LOGICRET_DOMAINRET;

  00bc8	e3a03004	 mov         r3, #4
  00bcc	e58d3018	 str         r3, [sp, #0x18]

; 539  :             break;

  00bd0	ea000003	 b           |$LN4@FlushDomai@4|
  00bd4		 |$LN1@FlushDomai@4|

; 540  : 
; 541  :         case D4:
; 542  :             // set power domain to off mode
; 543  :             domainPowerState.powerState = POWERSTATE_OFF;

  00bd4	e3a03000	 mov         r3, #0
  00bd8	e58d3014	 str         r3, [sp, #0x14]

; 544  :             domainPowerState.logicState = LOGICRETSTATE_LOGICRET_DOMAINRET;

  00bdc	e3a03004	 mov         r3, #4
  00be0	e58d3018	 str         r3, [sp, #0x18]
  00be4		 |$LN4@FlushDomai@4|

; 545  :             break;
; 546  :         }
; 547  :     
; 548  :     // send ioctl
; 549  :     rc = KernelIoControl(IOCTL_PRCM_DOMAIN_SET_POWERSTATE, &domainPowerState, 
; 550  :             sizeof(IOCTL_PRCM_DOMAIN_SET_POWERSTATE_IN), 0, 0, 0
; 551  :             );

  00be4	e3a03000	 mov         r3, #0
  00be8	e58d3004	 str         r3, [sp, #4]
  00bec	e3a03000	 mov         r3, #0
  00bf0	e58d3000	 str         r3, [sp]
  00bf4	e3a03000	 mov         r3, #0
  00bf8	e3a02010	 mov         r2, #0x10
  00bfc	e28d100c	 add         r1, sp, #0xC
  00c00	e59f0024	 ldr         r0, [pc, #0x24]
  00c04	eb000000	 bl          KernelIoControl
  00c08	e58d0030	 str         r0, [sp, #0x30]
  00c0c	e59d3030	 ldr         r3, [sp, #0x30]
  00c10	e58d3008	 str         r3, [sp, #8]

; 552  : 
; 553  :     return rc;

  00c14	e59d3008	 ldr         r3, [sp, #8]
  00c18	e58d3024	 str         r3, [sp, #0x24]

; 554  : }

  00c1c	e59d0024	 ldr         r0, [sp, #0x24]
  00c20	e28dd034	 add         sp, sp, #0x34
  00c24	e89d6000	 ldmia       sp, {sp, lr}
  00c28	e12fff1e	 bx          lr
  00c2c		 |$LN18@FlushDomai@4|
  00c2c		 |$LN19@FlushDomai@4|
  00c2c	01f50fcc	 DCD         0x1f50fcc
  00c30		 |$M38419|

			 ENDP  ; |?FlushDomainPowerState@PeripheralPowerDomainConstraint@@UAAHXZ|, PeripheralPowerDomainConstraint::FlushDomainPowerState

	EXPORT	|?UpdatePowerDomainConstraint@DssPowerDomainConstraint@@MAAHK@Z| ; DssPowerDomainConstraint::UpdatePowerDomainConstraint

  00058			 AREA	 |.pdata|, PDATA
|$T38429| DCD	|$LN6@UpdatePowe@7|
	DCD	0x40002c04
; Function compile flags: /Odtp

  00c30			 AREA	 |.text|, CODE, ARM

  00c30		 |?UpdatePowerDomainConstraint@DssPowerDomainConstraint@@MAAHK@Z| PROC ; DssPowerDomainConstraint::UpdatePowerDomainConstraint

; 567  : {

  00c30		 |$LN6@UpdatePowe@7|
  00c30	e1a0c00d	 mov         r12, sp
  00c34	e92d0003	 stmdb       sp!, {r0, r1}
  00c38	e92d5000	 stmdb       sp!, {r12, lr}
  00c3c	e24dd01c	 sub         sp, sp, #0x1C
  00c40		 |$M38426|

; 568  :     BOOL rc = TRUE;

  00c40	e3a03001	 mov         r3, #1
  00c44	e58d3000	 str         r3, [sp]

; 569  :     DWORD powerDomainOld = GetPowerDomainConstraint();

  00c48	e59d0024	 ldr         r0, [sp, #0x24]
  00c4c	eb000000	 bl          |?GetPowerDomainConstraint@PowerDomainConstraint@@QAAKXZ|
  00c50	e58d000c	 str         r0, [sp, #0xC]
  00c54	e59d300c	 ldr         r3, [sp, #0xC]
  00c58	e58d3004	 str         r3, [sp, #4]

; 570  : 
; 571  :     // determine new power domain state
; 572  :     PowerDomainConstraint::UpdatePowerDomainConstraint(idContext);

  00c5c	e59d1028	 ldr         r1, [sp, #0x28]
  00c60	e59d0024	 ldr         r0, [sp, #0x24]
  00c64	eb000000	 bl          |?UpdatePowerDomainConstraint@PowerDomainConstraint@@MAAHK@Z|

; 573  : 
; 574  :     // private mapping to power domain state
; 575  :     if (powerDomainOld != GetPowerDomainConstraint())

  00c68	e59d0024	 ldr         r0, [sp, #0x24]
  00c6c	eb000000	 bl          |?GetPowerDomainConstraint@PowerDomainConstraint@@QAAKXZ|
  00c70	e58d0010	 str         r0, [sp, #0x10]
  00c74	e59d2004	 ldr         r2, [sp, #4]
  00c78	e59d3010	 ldr         r3, [sp, #0x10]
  00c7c	e1520003	 cmp         r2, r3
  00c80	0a000010	 beq         |$LN1@UpdatePowe@7|

; 576  :         {
; 577  :         rc = FlushDomainPowerState();

  00c84	e59d3024	 ldr         r3, [sp, #0x24]
  00c88	e5933000	 ldr         r3, [r3]
  00c8c	e2833008	 add         r3, r3, #8
  00c90	e59d0024	 ldr         r0, [sp, #0x24]
  00c94	e5933000	 ldr         r3, [r3]
  00c98	e1a0e00f	 mov         lr, pc
  00c9c	e12fff13	 bx          r3
  00ca0	e58d0014	 str         r0, [sp, #0x14]
  00ca4	e59d3014	 ldr         r3, [sp, #0x14]
  00ca8	e58d3000	 str         r3, [sp]

; 578  : 
; 579  :         NotifyDomainCallbacks(POWERDOMAIN_DSS, 
; 580  :             GetPowerDomainConstraint(),
; 581  :             idContext
; 582  :             );

  00cac	e59d0024	 ldr         r0, [sp, #0x24]
  00cb0	eb000000	 bl          |?GetPowerDomainConstraint@PowerDomainConstraint@@QAAKXZ|
  00cb4	e58d0018	 str         r0, [sp, #0x18]
  00cb8	e59d2028	 ldr         r2, [sp, #0x28]
  00cbc	e59d1018	 ldr         r1, [sp, #0x18]
  00cc0	e3a00006	 mov         r0, #6
  00cc4	eb000000	 bl          |?NotifyDomainCallbacks@@YAXIIK@Z|
  00cc8		 |$LN1@UpdatePowe@7|

; 583  :         }
; 584  : 
; 585  :     return rc;

  00cc8	e59d3000	 ldr         r3, [sp]
  00ccc	e58d3008	 str         r3, [sp, #8]

; 586  : }

  00cd0	e59d0008	 ldr         r0, [sp, #8]
  00cd4	e28dd01c	 add         sp, sp, #0x1C
  00cd8	e89d6000	 ldmia       sp, {sp, lr}
  00cdc	e12fff1e	 bx          lr
  00ce0		 |$M38427|

			 ENDP  ; |?UpdatePowerDomainConstraint@DssPowerDomainConstraint@@MAAHK@Z|, DssPowerDomainConstraint::UpdatePowerDomainConstraint

	EXPORT	|?FlushDomainPowerState@DssPowerDomainConstraint@@UAAHXZ| ; DssPowerDomainConstraint::FlushDomainPowerState

  00060			 AREA	 |.pdata|, PDATA
|$T38444| DCD	|$LN17@FlushDomai@5|
	DCD	0x40003b04
; Function compile flags: /Odtp

  00ce0			 AREA	 |.text|, CODE, ARM

  00ce0		 |?FlushDomainPowerState@DssPowerDomainConstraint@@UAAHXZ| PROC ; DssPowerDomainConstraint::FlushDomainPowerState

; 598  : {

  00ce0		 |$LN17@FlushDomai@5|
  00ce0	e1a0c00d	 mov         r12, sp
  00ce4	e92d0001	 stmdb       sp!, {r0}
  00ce8	e92d5000	 stmdb       sp!, {r12, lr}
  00cec	e24dd034	 sub         sp, sp, #0x34
  00cf0		 |$M38441|

; 599  :     BOOL rc;
; 600  :     IOCTL_PRCM_DOMAIN_SET_POWERSTATE_IN domainPowerState;
; 601  : 
; 602  :     // initialize structure
; 603  :     domainPowerState.size = sizeof(IOCTL_PRCM_DOMAIN_SET_POWERSTATE_IN);

  00cf0	e3a03010	 mov         r3, #0x10
  00cf4	e58d300c	 str         r3, [sp, #0xC]

; 604  :     domainPowerState.powerDomain = POWERDOMAIN_DSS;

  00cf8	e3a03006	 mov         r3, #6
  00cfc	e58d3010	 str         r3, [sp, #0x10]

; 605  :     
; 606  :     switch (GetPowerDomainConstraint())

  00d00	e59d003c	 ldr         r0, [sp, #0x3C]
  00d04	eb000000	 bl          |?GetPowerDomainConstraint@PowerDomainConstraint@@QAAKXZ|
  00d08	e58d0028	 str         r0, [sp, #0x28]
  00d0c	e59d3028	 ldr         r3, [sp, #0x28]
  00d10	e58d302c	 str         r3, [sp, #0x2C]
  00d14	e59d302c	 ldr         r3, [sp, #0x2C]
  00d18	e3530004	 cmp         r3, #4
  00d1c	8a000017	 bhi         |$LN4@FlushDomai@5|
  00d20	e59d202c	 ldr         r2, [sp, #0x2C]
  00d24	e1a03102	 mov         r3, r2, lsl #2
  00d28	e083300f	 add         r3, r3, pc
  00d2c	e5933004	 ldr         r3, [r3, #4]
  00d30	e08ff003	 add         pc, pc, r3
  00d34		 |$LN9@FlushDomai@5|
  00d34		 |$LN8@FlushDomai@5|
  00d34		 |$LN10@FlushDomai@5|
  00d34	00000010	 DCD         0x10
  00d38		 |$LN11@FlushDomai@5|
  00d38	00000010	 DCD         0x10
  00d3c		 |$LN12@FlushDomai@5|
  00d3c	00000024	 DCD         0x24
  00d40		 |$LN13@FlushDomai@5|
  00d40	00000024	 DCD         0x24
  00d44		 |$LN14@FlushDomai@5|
  00d44	00000038	 DCD         0x38
  00d48		 |$LN3@FlushDomai@5|

; 607  :         {
; 608  :         case D0:
; 609  :         case D1:
; 610  :             // set power domain to on
; 611  :             domainPowerState.powerState = POWERSTATE_ON;

  00d48	e3a03003	 mov         r3, #3
  00d4c	e58d3014	 str         r3, [sp, #0x14]

; 612  :             domainPowerState.logicState = LOGICRETSTATE_LOGICRET_DOMAINRET;

  00d50	e3a03004	 mov         r3, #4
  00d54	e58d3018	 str         r3, [sp, #0x18]

; 613  :             break;

  00d58	ea000008	 b           |$LN4@FlushDomai@5|
  00d5c		 |$LN2@FlushDomai@5|

; 614  :             
; 615  :         case D2:
; 616  :         case D3:
; 617  :             // set close switch retention
; 618  :             domainPowerState.powerState = POWERSTATE_RETENTION;

  00d5c	e3a03001	 mov         r3, #1
  00d60	e58d3014	 str         r3, [sp, #0x14]

; 619  :             domainPowerState.logicState = LOGICRETSTATE_LOGICRET_DOMAINRET;

  00d64	e3a03004	 mov         r3, #4
  00d68	e58d3018	 str         r3, [sp, #0x18]

; 620  :             break;

  00d6c	ea000003	 b           |$LN4@FlushDomai@5|
  00d70		 |$LN1@FlushDomai@5|

; 621  : 
; 622  :         case D4:
; 623  :             // set power domain to off mode
; 624  :             domainPowerState.powerState = POWERSTATE_OFF;

  00d70	e3a03000	 mov         r3, #0
  00d74	e58d3014	 str         r3, [sp, #0x14]

; 625  :             domainPowerState.logicState = LOGICRETSTATE_LOGICRET_DOMAINRET;

  00d78	e3a03004	 mov         r3, #4
  00d7c	e58d3018	 str         r3, [sp, #0x18]
  00d80		 |$LN4@FlushDomai@5|

; 626  :             break;
; 627  :         }
; 628  :     
; 629  :     // send ioctl
; 630  :     rc = KernelIoControl(IOCTL_PRCM_DOMAIN_SET_POWERSTATE, &domainPowerState, 
; 631  :             sizeof(IOCTL_PRCM_DOMAIN_SET_POWERSTATE_IN), 0, 0, 0
; 632  :             );

  00d80	e3a03000	 mov         r3, #0
  00d84	e58d3004	 str         r3, [sp, #4]
  00d88	e3a03000	 mov         r3, #0
  00d8c	e58d3000	 str         r3, [sp]
  00d90	e3a03000	 mov         r3, #0
  00d94	e3a02010	 mov         r2, #0x10
  00d98	e28d100c	 add         r1, sp, #0xC
  00d9c	e59f0024	 ldr         r0, [pc, #0x24]
  00da0	eb000000	 bl          KernelIoControl
  00da4	e58d0030	 str         r0, [sp, #0x30]
  00da8	e59d3030	 ldr         r3, [sp, #0x30]
  00dac	e58d3008	 str         r3, [sp, #8]

; 633  : 
; 634  :     return rc;

  00db0	e59d3008	 ldr         r3, [sp, #8]
  00db4	e58d3024	 str         r3, [sp, #0x24]

; 635  : }

  00db8	e59d0024	 ldr         r0, [sp, #0x24]
  00dbc	e28dd034	 add         sp, sp, #0x34
  00dc0	e89d6000	 ldmia       sp, {sp, lr}
  00dc4	e12fff1e	 bx          lr
  00dc8		 |$LN18@FlushDomai@5|
  00dc8		 |$LN19@FlushDomai@5|
  00dc8	01f50fcc	 DCD         0x1f50fcc
  00dcc		 |$M38442|

			 ENDP  ; |?FlushDomainPowerState@DssPowerDomainConstraint@@UAAHXZ|, DssPowerDomainConstraint::FlushDomainPowerState

	EXPORT	|?UpdatePowerDomainConstraint@SgxPowerDomainConstraint@@MAAHK@Z| ; SgxPowerDomainConstraint::UpdatePowerDomainConstraint

  00068			 AREA	 |.pdata|, PDATA
|$T38452| DCD	|$LN6@UpdatePowe@8|
	DCD	0x40002c04
; Function compile flags: /Odtp

  00dcc			 AREA	 |.text|, CODE, ARM

  00dcc		 |?UpdatePowerDomainConstraint@SgxPowerDomainConstraint@@MAAHK@Z| PROC ; SgxPowerDomainConstraint::UpdatePowerDomainConstraint

; 648  : {

  00dcc		 |$LN6@UpdatePowe@8|
  00dcc	e1a0c00d	 mov         r12, sp
  00dd0	e92d0003	 stmdb       sp!, {r0, r1}
  00dd4	e92d5000	 stmdb       sp!, {r12, lr}
  00dd8	e24dd01c	 sub         sp, sp, #0x1C
  00ddc		 |$M38449|

; 649  :     BOOL rc = TRUE;

  00ddc	e3a03001	 mov         r3, #1
  00de0	e58d3000	 str         r3, [sp]

; 650  :     DWORD powerDomainOld = GetPowerDomainConstraint();

  00de4	e59d0024	 ldr         r0, [sp, #0x24]
  00de8	eb000000	 bl          |?GetPowerDomainConstraint@PowerDomainConstraint@@QAAKXZ|
  00dec	e58d000c	 str         r0, [sp, #0xC]
  00df0	e59d300c	 ldr         r3, [sp, #0xC]
  00df4	e58d3004	 str         r3, [sp, #4]

; 651  : 
; 652  :     // determine new power domain state
; 653  :     PowerDomainConstraint::UpdatePowerDomainConstraint(idContext);

  00df8	e59d1028	 ldr         r1, [sp, #0x28]
  00dfc	e59d0024	 ldr         r0, [sp, #0x24]
  00e00	eb000000	 bl          |?UpdatePowerDomainConstraint@PowerDomainConstraint@@MAAHK@Z|

; 654  : 
; 655  :     // private mapping to power domain state
; 656  :     if (powerDomainOld != GetPowerDomainConstraint())

  00e04	e59d0024	 ldr         r0, [sp, #0x24]
  00e08	eb000000	 bl          |?GetPowerDomainConstraint@PowerDomainConstraint@@QAAKXZ|
  00e0c	e58d0010	 str         r0, [sp, #0x10]
  00e10	e59d2004	 ldr         r2, [sp, #4]
  00e14	e59d3010	 ldr         r3, [sp, #0x10]
  00e18	e1520003	 cmp         r2, r3
  00e1c	0a000010	 beq         |$LN1@UpdatePowe@8|

; 657  :         {
; 658  :         rc = FlushDomainPowerState();

  00e20	e59d3024	 ldr         r3, [sp, #0x24]
  00e24	e5933000	 ldr         r3, [r3]
  00e28	e2833008	 add         r3, r3, #8
  00e2c	e59d0024	 ldr         r0, [sp, #0x24]
  00e30	e5933000	 ldr         r3, [r3]
  00e34	e1a0e00f	 mov         lr, pc
  00e38	e12fff13	 bx          r3
  00e3c	e58d0014	 str         r0, [sp, #0x14]
  00e40	e59d3014	 ldr         r3, [sp, #0x14]
  00e44	e58d3000	 str         r3, [sp]

; 659  : 
; 660  :         NotifyDomainCallbacks(POWERDOMAIN_SGX, 
; 661  :             GetPowerDomainConstraint(),
; 662  :             idContext
; 663  :             );

  00e48	e59d0024	 ldr         r0, [sp, #0x24]
  00e4c	eb000000	 bl          |?GetPowerDomainConstraint@PowerDomainConstraint@@QAAKXZ|
  00e50	e58d0018	 str         r0, [sp, #0x18]
  00e54	e59d2028	 ldr         r2, [sp, #0x28]
  00e58	e59d1018	 ldr         r1, [sp, #0x18]
  00e5c	e3a0000a	 mov         r0, #0xA
  00e60	eb000000	 bl          |?NotifyDomainCallbacks@@YAXIIK@Z|
  00e64		 |$LN1@UpdatePowe@8|

; 664  :         }
; 665  :                   
; 666  :     return rc;

  00e64	e59d3000	 ldr         r3, [sp]
  00e68	e58d3008	 str         r3, [sp, #8]

; 667  : }

  00e6c	e59d0008	 ldr         r0, [sp, #8]
  00e70	e28dd01c	 add         sp, sp, #0x1C
  00e74	e89d6000	 ldmia       sp, {sp, lr}
  00e78	e12fff1e	 bx          lr
  00e7c		 |$M38450|

			 ENDP  ; |?UpdatePowerDomainConstraint@SgxPowerDomainConstraint@@MAAHK@Z|, SgxPowerDomainConstraint::UpdatePowerDomainConstraint

	EXPORT	|?FlushDomainPowerState@SgxPowerDomainConstraint@@UAAHXZ| ; SgxPowerDomainConstraint::FlushDomainPowerState

  00070			 AREA	 |.pdata|, PDATA
|$T38467| DCD	|$LN17@FlushDomai@6|
	DCD	0x40003b04
; Function compile flags: /Odtp

  00e7c			 AREA	 |.text|, CODE, ARM

  00e7c		 |?FlushDomainPowerState@SgxPowerDomainConstraint@@UAAHXZ| PROC ; SgxPowerDomainConstraint::FlushDomainPowerState

; 679  : {

  00e7c		 |$LN17@FlushDomai@6|
  00e7c	e1a0c00d	 mov         r12, sp
  00e80	e92d0001	 stmdb       sp!, {r0}
  00e84	e92d5000	 stmdb       sp!, {r12, lr}
  00e88	e24dd034	 sub         sp, sp, #0x34
  00e8c		 |$M38464|

; 680  :     BOOL rc;
; 681  :     IOCTL_PRCM_DOMAIN_SET_POWERSTATE_IN domainPowerState;
; 682  : 
; 683  :     // initialize structure
; 684  :     domainPowerState.size = sizeof(IOCTL_PRCM_DOMAIN_SET_POWERSTATE_IN);

  00e8c	e3a03010	 mov         r3, #0x10
  00e90	e58d300c	 str         r3, [sp, #0xC]

; 685  :     domainPowerState.powerDomain = POWERDOMAIN_SGX;

  00e94	e3a0300a	 mov         r3, #0xA
  00e98	e58d3010	 str         r3, [sp, #0x10]

; 686  :     
; 687  :     switch (GetPowerDomainConstraint())

  00e9c	e59d003c	 ldr         r0, [sp, #0x3C]
  00ea0	eb000000	 bl          |?GetPowerDomainConstraint@PowerDomainConstraint@@QAAKXZ|
  00ea4	e58d0028	 str         r0, [sp, #0x28]
  00ea8	e59d3028	 ldr         r3, [sp, #0x28]
  00eac	e58d302c	 str         r3, [sp, #0x2C]
  00eb0	e59d302c	 ldr         r3, [sp, #0x2C]
  00eb4	e3530004	 cmp         r3, #4
  00eb8	8a000017	 bhi         |$LN4@FlushDomai@6|
  00ebc	e59d202c	 ldr         r2, [sp, #0x2C]
  00ec0	e1a03102	 mov         r3, r2, lsl #2
  00ec4	e083300f	 add         r3, r3, pc
  00ec8	e5933004	 ldr         r3, [r3, #4]
  00ecc	e08ff003	 add         pc, pc, r3
  00ed0		 |$LN9@FlushDomai@6|
  00ed0		 |$LN8@FlushDomai@6|
  00ed0		 |$LN10@FlushDomai@6|
  00ed0	00000010	 DCD         0x10
  00ed4		 |$LN11@FlushDomai@6|
  00ed4	00000010	 DCD         0x10
  00ed8		 |$LN12@FlushDomai@6|
  00ed8	00000024	 DCD         0x24
  00edc		 |$LN13@FlushDomai@6|
  00edc	00000024	 DCD         0x24
  00ee0		 |$LN14@FlushDomai@6|
  00ee0	00000038	 DCD         0x38
  00ee4		 |$LN3@FlushDomai@6|

; 688  :         {
; 689  :         case D0:
; 690  :         case D1:
; 691  :             // set power domain to on
; 692  :             domainPowerState.powerState = POWERSTATE_ON;

  00ee4	e3a03003	 mov         r3, #3
  00ee8	e58d3014	 str         r3, [sp, #0x14]

; 693  :             domainPowerState.logicState = LOGICRETSTATE_LOGICRET_DOMAINRET;

  00eec	e3a03004	 mov         r3, #4
  00ef0	e58d3018	 str         r3, [sp, #0x18]

; 694  :             break;

  00ef4	ea000008	 b           |$LN4@FlushDomai@6|
  00ef8		 |$LN2@FlushDomai@6|

; 695  :             
; 696  :         case D2:
; 697  :         case D3:
; 698  :             // currently SGX doesn't support retention
; 699  :             domainPowerState.powerState = POWERSTATE_ON;

  00ef8	e3a03003	 mov         r3, #3
  00efc	e58d3014	 str         r3, [sp, #0x14]

; 700  :             domainPowerState.logicState = LOGICRETSTATE_LOGICRET_DOMAINRET;

  00f00	e3a03004	 mov         r3, #4
  00f04	e58d3018	 str         r3, [sp, #0x18]

; 701  :             break;

  00f08	ea000003	 b           |$LN4@FlushDomai@6|
  00f0c		 |$LN1@FlushDomai@6|

; 702  : 
; 703  :         case D4:
; 704  :             // set power domain to off mode
; 705  :             domainPowerState.powerState = POWERSTATE_OFF;

  00f0c	e3a03000	 mov         r3, #0
  00f10	e58d3014	 str         r3, [sp, #0x14]

; 706  :             domainPowerState.logicState = LOGICRETSTATE_LOGICRET_DOMAINRET;

  00f14	e3a03004	 mov         r3, #4
  00f18	e58d3018	 str         r3, [sp, #0x18]
  00f1c		 |$LN4@FlushDomai@6|

; 707  :             break;
; 708  :         }
; 709  :     
; 710  :     // send ioctl
; 711  :     rc = KernelIoControl(IOCTL_PRCM_DOMAIN_SET_POWERSTATE, &domainPowerState, 
; 712  :             sizeof(IOCTL_PRCM_DOMAIN_SET_POWERSTATE_IN), 0, 0, 0
; 713  :             );

  00f1c	e3a03000	 mov         r3, #0
  00f20	e58d3004	 str         r3, [sp, #4]
  00f24	e3a03000	 mov         r3, #0
  00f28	e58d3000	 str         r3, [sp]
  00f2c	e3a03000	 mov         r3, #0
  00f30	e3a02010	 mov         r2, #0x10
  00f34	e28d100c	 add         r1, sp, #0xC
  00f38	e59f0024	 ldr         r0, [pc, #0x24]
  00f3c	eb000000	 bl          KernelIoControl
  00f40	e58d0030	 str         r0, [sp, #0x30]
  00f44	e59d3030	 ldr         r3, [sp, #0x30]
  00f48	e58d3008	 str         r3, [sp, #8]

; 714  : 
; 715  :     return rc;

  00f4c	e59d3008	 ldr         r3, [sp, #8]
  00f50	e58d3024	 str         r3, [sp, #0x24]

; 716  : }

  00f54	e59d0024	 ldr         r0, [sp, #0x24]
  00f58	e28dd034	 add         sp, sp, #0x34
  00f5c	e89d6000	 ldmia       sp, {sp, lr}
  00f60	e12fff1e	 bx          lr
  00f64		 |$LN18@FlushDomai@6|
  00f64		 |$LN19@FlushDomai@6|
  00f64	01f50fcc	 DCD         0x1f50fcc
  00f68		 |$M38465|

			 ENDP  ; |?FlushDomainPowerState@SgxPowerDomainConstraint@@UAAHXZ|, SgxPowerDomainConstraint::FlushDomainPowerState

	EXPORT	|?UpdatePowerDomainConstraint@CameraPowerDomainConstraint@@MAAHK@Z| ; CameraPowerDomainConstraint::UpdatePowerDomainConstraint

  00078			 AREA	 |.pdata|, PDATA
|$T38475| DCD	|$LN6@UpdatePowe@9|
	DCD	0x40002c04
; Function compile flags: /Odtp

  00f68			 AREA	 |.text|, CODE, ARM

  00f68		 |?UpdatePowerDomainConstraint@CameraPowerDomainConstraint@@MAAHK@Z| PROC ; CameraPowerDomainConstraint::UpdatePowerDomainConstraint

; 729  : {

  00f68		 |$LN6@UpdatePowe@9|
  00f68	e1a0c00d	 mov         r12, sp
  00f6c	e92d0003	 stmdb       sp!, {r0, r1}
  00f70	e92d5000	 stmdb       sp!, {r12, lr}
  00f74	e24dd01c	 sub         sp, sp, #0x1C
  00f78		 |$M38472|

; 730  :     BOOL rc = TRUE;

  00f78	e3a03001	 mov         r3, #1
  00f7c	e58d3000	 str         r3, [sp]

; 731  :     DWORD powerDomainOld = GetPowerDomainConstraint();

  00f80	e59d0024	 ldr         r0, [sp, #0x24]
  00f84	eb000000	 bl          |?GetPowerDomainConstraint@PowerDomainConstraint@@QAAKXZ|
  00f88	e58d000c	 str         r0, [sp, #0xC]
  00f8c	e59d300c	 ldr         r3, [sp, #0xC]
  00f90	e58d3004	 str         r3, [sp, #4]

; 732  :     
; 733  :     // determine new power domain state
; 734  :     PowerDomainConstraint::UpdatePowerDomainConstraint(idContext);

  00f94	e59d1028	 ldr         r1, [sp, #0x28]
  00f98	e59d0024	 ldr         r0, [sp, #0x24]
  00f9c	eb000000	 bl          |?UpdatePowerDomainConstraint@PowerDomainConstraint@@MAAHK@Z|

; 735  : 
; 736  :     // private mapping to power domain state
; 737  :     if (powerDomainOld != GetPowerDomainConstraint())

  00fa0	e59d0024	 ldr         r0, [sp, #0x24]
  00fa4	eb000000	 bl          |?GetPowerDomainConstraint@PowerDomainConstraint@@QAAKXZ|
  00fa8	e58d0010	 str         r0, [sp, #0x10]
  00fac	e59d2004	 ldr         r2, [sp, #4]
  00fb0	e59d3010	 ldr         r3, [sp, #0x10]
  00fb4	e1520003	 cmp         r2, r3
  00fb8	0a000010	 beq         |$LN1@UpdatePowe@9|

; 738  :         {
; 739  :         rc = FlushDomainPowerState();

  00fbc	e59d3024	 ldr         r3, [sp, #0x24]
  00fc0	e5933000	 ldr         r3, [r3]
  00fc4	e2833008	 add         r3, r3, #8
  00fc8	e59d0024	 ldr         r0, [sp, #0x24]
  00fcc	e5933000	 ldr         r3, [r3]
  00fd0	e1a0e00f	 mov         lr, pc
  00fd4	e12fff13	 bx          r3
  00fd8	e58d0014	 str         r0, [sp, #0x14]
  00fdc	e59d3014	 ldr         r3, [sp, #0x14]
  00fe0	e58d3000	 str         r3, [sp]

; 740  :         
; 741  :         NotifyDomainCallbacks(POWERDOMAIN_CAMERA, 
; 742  :             GetPowerDomainConstraint(),
; 743  :             idContext
; 744  :             );                      

  00fe4	e59d0024	 ldr         r0, [sp, #0x24]
  00fe8	eb000000	 bl          |?GetPowerDomainConstraint@PowerDomainConstraint@@QAAKXZ|
  00fec	e58d0018	 str         r0, [sp, #0x18]
  00ff0	e59d2028	 ldr         r2, [sp, #0x28]
  00ff4	e59d1018	 ldr         r1, [sp, #0x18]
  00ff8	e3a00009	 mov         r0, #9
  00ffc	eb000000	 bl          |?NotifyDomainCallbacks@@YAXIIK@Z|
  01000		 |$LN1@UpdatePowe@9|

; 745  :         }
; 746  :    
; 747  :     return rc;

  01000	e59d3000	 ldr         r3, [sp]
  01004	e58d3008	 str         r3, [sp, #8]

; 748  : }

  01008	e59d0008	 ldr         r0, [sp, #8]
  0100c	e28dd01c	 add         sp, sp, #0x1C
  01010	e89d6000	 ldmia       sp, {sp, lr}
  01014	e12fff1e	 bx          lr
  01018		 |$M38473|

			 ENDP  ; |?UpdatePowerDomainConstraint@CameraPowerDomainConstraint@@MAAHK@Z|, CameraPowerDomainConstraint::UpdatePowerDomainConstraint

	EXPORT	|?FlushDomainPowerState@CameraPowerDomainConstraint@@UAAHXZ| ; CameraPowerDomainConstraint::FlushDomainPowerState

  00080			 AREA	 |.pdata|, PDATA
|$T38490| DCD	|$LN17@FlushDomai@7|
	DCD	0x40003b04
; Function compile flags: /Odtp

  01018			 AREA	 |.text|, CODE, ARM

  01018		 |?FlushDomainPowerState@CameraPowerDomainConstraint@@UAAHXZ| PROC ; CameraPowerDomainConstraint::FlushDomainPowerState

; 760  : {

  01018		 |$LN17@FlushDomai@7|
  01018	e1a0c00d	 mov         r12, sp
  0101c	e92d0001	 stmdb       sp!, {r0}
  01020	e92d5000	 stmdb       sp!, {r12, lr}
  01024	e24dd034	 sub         sp, sp, #0x34
  01028		 |$M38487|

; 761  :     BOOL rc;
; 762  :     IOCTL_PRCM_DOMAIN_SET_POWERSTATE_IN domainPowerState;
; 763  : 
; 764  :     // initialize structure
; 765  :     domainPowerState.size = sizeof(IOCTL_PRCM_DOMAIN_SET_POWERSTATE_IN);

  01028	e3a03010	 mov         r3, #0x10
  0102c	e58d300c	 str         r3, [sp, #0xC]

; 766  :     domainPowerState.powerDomain = POWERDOMAIN_CAMERA;

  01030	e3a03009	 mov         r3, #9
  01034	e58d3010	 str         r3, [sp, #0x10]

; 767  :     
; 768  :     switch (GetPowerDomainConstraint())

  01038	e59d003c	 ldr         r0, [sp, #0x3C]
  0103c	eb000000	 bl          |?GetPowerDomainConstraint@PowerDomainConstraint@@QAAKXZ|
  01040	e58d0028	 str         r0, [sp, #0x28]
  01044	e59d3028	 ldr         r3, [sp, #0x28]
  01048	e58d302c	 str         r3, [sp, #0x2C]
  0104c	e59d302c	 ldr         r3, [sp, #0x2C]
  01050	e3530004	 cmp         r3, #4
  01054	8a000017	 bhi         |$LN4@FlushDomai@7|
  01058	e59d202c	 ldr         r2, [sp, #0x2C]
  0105c	e1a03102	 mov         r3, r2, lsl #2
  01060	e083300f	 add         r3, r3, pc
  01064	e5933004	 ldr         r3, [r3, #4]
  01068	e08ff003	 add         pc, pc, r3
  0106c		 |$LN9@FlushDomai@7|
  0106c		 |$LN8@FlushDomai@7|
  0106c		 |$LN10@FlushDomai@7|
  0106c	00000010	 DCD         0x10
  01070		 |$LN11@FlushDomai@7|
  01070	00000010	 DCD         0x10
  01074		 |$LN12@FlushDomai@7|
  01074	00000024	 DCD         0x24
  01078		 |$LN13@FlushDomai@7|
  01078	00000024	 DCD         0x24
  0107c		 |$LN14@FlushDomai@7|
  0107c	00000038	 DCD         0x38
  01080		 |$LN3@FlushDomai@7|

; 769  :         {
; 770  :         case D0:
; 771  :         case D1:
; 772  :             // set power domain to on
; 773  :             domainPowerState.powerState = POWERSTATE_ON;

  01080	e3a03003	 mov         r3, #3
  01084	e58d3014	 str         r3, [sp, #0x14]

; 774  :             domainPowerState.logicState = LOGICRETSTATE_LOGICRET_DOMAINRET;

  01088	e3a03004	 mov         r3, #4
  0108c	e58d3018	 str         r3, [sp, #0x18]

; 775  :             break;

  01090	ea000008	 b           |$LN4@FlushDomai@7|
  01094		 |$LN2@FlushDomai@7|

; 776  :             
; 777  :         case D2:
; 778  :         case D3:
; 779  :             // camera only supports CSWR
; 780  :             domainPowerState.powerState = POWERSTATE_RETENTION;

  01094	e3a03001	 mov         r3, #1
  01098	e58d3014	 str         r3, [sp, #0x14]

; 781  :             domainPowerState.logicState = LOGICRETSTATE_LOGICRET_DOMAINRET;

  0109c	e3a03004	 mov         r3, #4
  010a0	e58d3018	 str         r3, [sp, #0x18]

; 782  :             break;

  010a4	ea000003	 b           |$LN4@FlushDomai@7|
  010a8		 |$LN1@FlushDomai@7|

; 783  : 
; 784  :         case D4:
; 785  :             // set power domain to off mode
; 786  :             domainPowerState.powerState = POWERSTATE_OFF;

  010a8	e3a03000	 mov         r3, #0
  010ac	e58d3014	 str         r3, [sp, #0x14]

; 787  :             domainPowerState.logicState = LOGICRETSTATE_LOGICRET_DOMAINRET;

  010b0	e3a03004	 mov         r3, #4
  010b4	e58d3018	 str         r3, [sp, #0x18]
  010b8		 |$LN4@FlushDomai@7|

; 788  :             break;
; 789  :         }
; 790  :     
; 791  :     // send ioctl
; 792  :     rc = KernelIoControl(IOCTL_PRCM_DOMAIN_SET_POWERSTATE, &domainPowerState, 
; 793  :             sizeof(IOCTL_PRCM_DOMAIN_SET_POWERSTATE_IN), 0, 0, 0
; 794  :             );

  010b8	e3a03000	 mov         r3, #0
  010bc	e58d3004	 str         r3, [sp, #4]
  010c0	e3a03000	 mov         r3, #0
  010c4	e58d3000	 str         r3, [sp]
  010c8	e3a03000	 mov         r3, #0
  010cc	e3a02010	 mov         r2, #0x10
  010d0	e28d100c	 add         r1, sp, #0xC
  010d4	e59f0024	 ldr         r0, [pc, #0x24]
  010d8	eb000000	 bl          KernelIoControl
  010dc	e58d0030	 str         r0, [sp, #0x30]
  010e0	e59d3030	 ldr         r3, [sp, #0x30]
  010e4	e58d3008	 str         r3, [sp, #8]

; 795  : 
; 796  :     return rc;

  010e8	e59d3008	 ldr         r3, [sp, #8]
  010ec	e58d3024	 str         r3, [sp, #0x24]

; 797  : }

  010f0	e59d0024	 ldr         r0, [sp, #0x24]
  010f4	e28dd034	 add         sp, sp, #0x34
  010f8	e89d6000	 ldmia       sp, {sp, lr}
  010fc	e12fff1e	 bx          lr
  01100		 |$LN18@FlushDomai@7|
  01100		 |$LN19@FlushDomai@7|
  01100	01f50fcc	 DCD         0x1f50fcc
  01104		 |$M38488|

			 ENDP  ; |?FlushDomainPowerState@CameraPowerDomainConstraint@@UAAHXZ|, CameraPowerDomainConstraint::FlushDomainPowerState

	EXPORT	|?UpdatePowerDomainConstraint@UsbHostPowerDomainConstraint@@MAAHK@Z| ; UsbHostPowerDomainConstraint::UpdatePowerDomainConstraint

  00088			 AREA	 |.pdata|, PDATA
|$T38498| DCD	|$LN6@UpdatePowe@10|
	DCD	0x40002c04
; Function compile flags: /Odtp

  01104			 AREA	 |.text|, CODE, ARM

  01104		 |?UpdatePowerDomainConstraint@UsbHostPowerDomainConstraint@@MAAHK@Z| PROC ; UsbHostPowerDomainConstraint::UpdatePowerDomainConstraint

; 810  : {

  01104		 |$LN6@UpdatePowe@10|
  01104	e1a0c00d	 mov         r12, sp
  01108	e92d0003	 stmdb       sp!, {r0, r1}
  0110c	e92d5000	 stmdb       sp!, {r12, lr}
  01110	e24dd01c	 sub         sp, sp, #0x1C
  01114		 |$M38495|

; 811  :     BOOL rc = TRUE;

  01114	e3a03001	 mov         r3, #1
  01118	e58d3000	 str         r3, [sp]

; 812  :     DWORD powerDomainOld = GetPowerDomainConstraint();

  0111c	e59d0024	 ldr         r0, [sp, #0x24]
  01120	eb000000	 bl          |?GetPowerDomainConstraint@PowerDomainConstraint@@QAAKXZ|
  01124	e58d000c	 str         r0, [sp, #0xC]
  01128	e59d300c	 ldr         r3, [sp, #0xC]
  0112c	e58d3004	 str         r3, [sp, #4]

; 813  : 
; 814  :     // determine new power domain state
; 815  :     PowerDomainConstraint::UpdatePowerDomainConstraint(idContext);

  01130	e59d1028	 ldr         r1, [sp, #0x28]
  01134	e59d0024	 ldr         r0, [sp, #0x24]
  01138	eb000000	 bl          |?UpdatePowerDomainConstraint@PowerDomainConstraint@@MAAHK@Z|

; 816  : 
; 817  :     // private mapping to power domain state
; 818  :     if (powerDomainOld != GetPowerDomainConstraint())

  0113c	e59d0024	 ldr         r0, [sp, #0x24]
  01140	eb000000	 bl          |?GetPowerDomainConstraint@PowerDomainConstraint@@QAAKXZ|
  01144	e58d0010	 str         r0, [sp, #0x10]
  01148	e59d2004	 ldr         r2, [sp, #4]
  0114c	e59d3010	 ldr         r3, [sp, #0x10]
  01150	e1520003	 cmp         r2, r3
  01154	0a000010	 beq         |$LN1@UpdatePowe@10|

; 819  :         {
; 820  :         rc = FlushDomainPowerState();

  01158	e59d3024	 ldr         r3, [sp, #0x24]
  0115c	e5933000	 ldr         r3, [r3]
  01160	e2833008	 add         r3, r3, #8
  01164	e59d0024	 ldr         r0, [sp, #0x24]
  01168	e5933000	 ldr         r3, [r3]
  0116c	e1a0e00f	 mov         lr, pc
  01170	e12fff13	 bx          r3
  01174	e58d0014	 str         r0, [sp, #0x14]
  01178	e59d3014	 ldr         r3, [sp, #0x14]
  0117c	e58d3000	 str         r3, [sp]

; 821  : 
; 822  :         NotifyDomainCallbacks(POWERDOMAIN_USBHOST, 
; 823  :             GetPowerDomainConstraint(),
; 824  :             idContext
; 825  :             );

  01180	e59d0024	 ldr         r0, [sp, #0x24]
  01184	eb000000	 bl          |?GetPowerDomainConstraint@PowerDomainConstraint@@QAAKXZ|
  01188	e58d0018	 str         r0, [sp, #0x18]
  0118c	e59d2028	 ldr         r2, [sp, #0x28]
  01190	e59d1018	 ldr         r1, [sp, #0x18]
  01194	e3a00003	 mov         r0, #3
  01198	eb000000	 bl          |?NotifyDomainCallbacks@@YAXIIK@Z|
  0119c		 |$LN1@UpdatePowe@10|

; 826  :         }
; 827  :                   
; 828  :     return rc;

  0119c	e59d3000	 ldr         r3, [sp]
  011a0	e58d3008	 str         r3, [sp, #8]

; 829  : }

  011a4	e59d0008	 ldr         r0, [sp, #8]
  011a8	e28dd01c	 add         sp, sp, #0x1C
  011ac	e89d6000	 ldmia       sp, {sp, lr}
  011b0	e12fff1e	 bx          lr
  011b4		 |$M38496|

			 ENDP  ; |?UpdatePowerDomainConstraint@UsbHostPowerDomainConstraint@@MAAHK@Z|, UsbHostPowerDomainConstraint::UpdatePowerDomainConstraint

	EXPORT	|?FlushDomainPowerState@UsbHostPowerDomainConstraint@@UAAHXZ| ; UsbHostPowerDomainConstraint::FlushDomainPowerState

  00090			 AREA	 |.pdata|, PDATA
|$T38513| DCD	|$LN17@FlushDomai@8|
	DCD	0x40003b04
; Function compile flags: /Odtp

  011b4			 AREA	 |.text|, CODE, ARM

  011b4		 |?FlushDomainPowerState@UsbHostPowerDomainConstraint@@UAAHXZ| PROC ; UsbHostPowerDomainConstraint::FlushDomainPowerState

; 841  : {

  011b4		 |$LN17@FlushDomai@8|
  011b4	e1a0c00d	 mov         r12, sp
  011b8	e92d0001	 stmdb       sp!, {r0}
  011bc	e92d5000	 stmdb       sp!, {r12, lr}
  011c0	e24dd034	 sub         sp, sp, #0x34
  011c4		 |$M38510|

; 842  :     BOOL rc;
; 843  :     IOCTL_PRCM_DOMAIN_SET_POWERSTATE_IN domainPowerState;
; 844  : 
; 845  :     // initialize structure
; 846  :     domainPowerState.size = sizeof(IOCTL_PRCM_DOMAIN_SET_POWERSTATE_IN);

  011c4	e3a03010	 mov         r3, #0x10
  011c8	e58d300c	 str         r3, [sp, #0xC]

; 847  :     domainPowerState.powerDomain = POWERDOMAIN_USBHOST;

  011cc	e3a03003	 mov         r3, #3
  011d0	e58d3010	 str         r3, [sp, #0x10]

; 848  :     
; 849  :     switch (GetPowerDomainConstraint())

  011d4	e59d003c	 ldr         r0, [sp, #0x3C]
  011d8	eb000000	 bl          |?GetPowerDomainConstraint@PowerDomainConstraint@@QAAKXZ|
  011dc	e58d0028	 str         r0, [sp, #0x28]
  011e0	e59d3028	 ldr         r3, [sp, #0x28]
  011e4	e58d302c	 str         r3, [sp, #0x2C]
  011e8	e59d302c	 ldr         r3, [sp, #0x2C]
  011ec	e3530004	 cmp         r3, #4
  011f0	8a000017	 bhi         |$LN4@FlushDomai@8|
  011f4	e59d202c	 ldr         r2, [sp, #0x2C]
  011f8	e1a03102	 mov         r3, r2, lsl #2
  011fc	e083300f	 add         r3, r3, pc
  01200	e5933004	 ldr         r3, [r3, #4]
  01204	e08ff003	 add         pc, pc, r3
  01208		 |$LN9@FlushDomai@8|
  01208		 |$LN8@FlushDomai@8|
  01208		 |$LN10@FlushDomai@8|
  01208	00000010	 DCD         0x10
  0120c		 |$LN11@FlushDomai@8|
  0120c	00000010	 DCD         0x10
  01210		 |$LN12@FlushDomai@8|
  01210	00000024	 DCD         0x24
  01214		 |$LN13@FlushDomai@8|
  01214	00000024	 DCD         0x24
  01218		 |$LN14@FlushDomai@8|
  01218	00000038	 DCD         0x38
  0121c		 |$LN3@FlushDomai@8|

; 850  :         {
; 851  :         case D0:
; 852  :         case D1:
; 853  :             // set power domain to on
; 854  :             domainPowerState.powerState = POWERSTATE_ON;

  0121c	e3a03003	 mov         r3, #3
  01220	e58d3014	 str         r3, [sp, #0x14]

; 855  :             domainPowerState.logicState = LOGICRETSTATE_LOGICRET_DOMAINRET;

  01224	e3a03004	 mov         r3, #4
  01228	e58d3018	 str         r3, [sp, #0x18]

; 856  :             break;

  0122c	ea000008	 b           |$LN4@FlushDomai@8|
  01230		 |$LN2@FlushDomai@8|

; 857  :             
; 858  :         case D2:
; 859  :         case D3:
; 860  :             // usbhost only supports CSWR
; 861  :             domainPowerState.powerState = POWERSTATE_RETENTION;

  01230	e3a03001	 mov         r3, #1
  01234	e58d3014	 str         r3, [sp, #0x14]

; 862  :             domainPowerState.logicState = LOGICRETSTATE_LOGICRET_DOMAINRET;

  01238	e3a03004	 mov         r3, #4
  0123c	e58d3018	 str         r3, [sp, #0x18]

; 863  :             break;

  01240	ea000003	 b           |$LN4@FlushDomai@8|
  01244		 |$LN1@FlushDomai@8|

; 864  : 
; 865  :         case D4:
; 866  :             // set power domain to off mode
; 867  :             domainPowerState.powerState = POWERSTATE_OFF;

  01244	e3a03000	 mov         r3, #0
  01248	e58d3014	 str         r3, [sp, #0x14]

; 868  :             domainPowerState.logicState = LOGICRETSTATE_LOGICRET_DOMAINRET;

  0124c	e3a03004	 mov         r3, #4
  01250	e58d3018	 str         r3, [sp, #0x18]
  01254		 |$LN4@FlushDomai@8|

; 869  :             break;
; 870  :         }
; 871  :     
; 872  :     // send ioctl
; 873  :     rc = KernelIoControl(IOCTL_PRCM_DOMAIN_SET_POWERSTATE, &domainPowerState, 
; 874  :             sizeof(IOCTL_PRCM_DOMAIN_SET_POWERSTATE_IN), 0, 0, 0
; 875  :             );

  01254	e3a03000	 mov         r3, #0
  01258	e58d3004	 str         r3, [sp, #4]
  0125c	e3a03000	 mov         r3, #0
  01260	e58d3000	 str         r3, [sp]
  01264	e3a03000	 mov         r3, #0
  01268	e3a02010	 mov         r2, #0x10
  0126c	e28d100c	 add         r1, sp, #0xC
  01270	e59f0024	 ldr         r0, [pc, #0x24]
  01274	eb000000	 bl          KernelIoControl
  01278	e58d0030	 str         r0, [sp, #0x30]
  0127c	e59d3030	 ldr         r3, [sp, #0x30]
  01280	e58d3008	 str         r3, [sp, #8]

; 876  : 
; 877  :     return rc;

  01284	e59d3008	 ldr         r3, [sp, #8]
  01288	e58d3024	 str         r3, [sp, #0x24]

; 878  : }

  0128c	e59d0024	 ldr         r0, [sp, #0x24]
  01290	e28dd034	 add         sp, sp, #0x34
  01294	e89d6000	 ldmia       sp, {sp, lr}
  01298	e12fff1e	 bx          lr
  0129c		 |$LN18@FlushDomai@8|
  0129c		 |$LN19@FlushDomai@8|
  0129c	01f50fcc	 DCD         0x1f50fcc
  012a0		 |$M38511|

			 ENDP  ; |?FlushDomainPowerState@UsbHostPowerDomainConstraint@@UAAHXZ|, UsbHostPowerDomainConstraint::FlushDomainPowerState

	EXPORT	|?UpdatePowerDomainConstraint@NeonPowerDomainConstraint@@MAAHK@Z| ; NeonPowerDomainConstraint::UpdatePowerDomainConstraint

  00098			 AREA	 |.pdata|, PDATA
|$T38521| DCD	|$LN6@UpdatePowe@11|
	DCD	0x40002c04
; Function compile flags: /Odtp

  012a0			 AREA	 |.text|, CODE, ARM

  012a0		 |?UpdatePowerDomainConstraint@NeonPowerDomainConstraint@@MAAHK@Z| PROC ; NeonPowerDomainConstraint::UpdatePowerDomainConstraint

; 891  : {

  012a0		 |$LN6@UpdatePowe@11|
  012a0	e1a0c00d	 mov         r12, sp
  012a4	e92d0003	 stmdb       sp!, {r0, r1}
  012a8	e92d5000	 stmdb       sp!, {r12, lr}
  012ac	e24dd01c	 sub         sp, sp, #0x1C
  012b0		 |$M38518|

; 892  :     BOOL rc = TRUE;

  012b0	e3a03001	 mov         r3, #1
  012b4	e58d3000	 str         r3, [sp]

; 893  :     DWORD powerDomainOld = GetPowerDomainConstraint();

  012b8	e59d0024	 ldr         r0, [sp, #0x24]
  012bc	eb000000	 bl          |?GetPowerDomainConstraint@PowerDomainConstraint@@QAAKXZ|
  012c0	e58d000c	 str         r0, [sp, #0xC]
  012c4	e59d300c	 ldr         r3, [sp, #0xC]
  012c8	e58d3004	 str         r3, [sp, #4]

; 894  : 
; 895  :     // determine new power domain state
; 896  :     PowerDomainConstraint::UpdatePowerDomainConstraint(idContext);

  012cc	e59d1028	 ldr         r1, [sp, #0x28]
  012d0	e59d0024	 ldr         r0, [sp, #0x24]
  012d4	eb000000	 bl          |?UpdatePowerDomainConstraint@PowerDomainConstraint@@MAAHK@Z|

; 897  : 
; 898  :     // private mapping to power domain state
; 899  :     if (powerDomainOld != GetPowerDomainConstraint())

  012d8	e59d0024	 ldr         r0, [sp, #0x24]
  012dc	eb000000	 bl          |?GetPowerDomainConstraint@PowerDomainConstraint@@QAAKXZ|
  012e0	e58d0010	 str         r0, [sp, #0x10]
  012e4	e59d2004	 ldr         r2, [sp, #4]
  012e8	e59d3010	 ldr         r3, [sp, #0x10]
  012ec	e1520003	 cmp         r2, r3
  012f0	0a000010	 beq         |$LN1@UpdatePowe@11|

; 900  :         {
; 901  :         rc = FlushDomainPowerState();

  012f4	e59d3024	 ldr         r3, [sp, #0x24]
  012f8	e5933000	 ldr         r3, [r3]
  012fc	e2833008	 add         r3, r3, #8
  01300	e59d0024	 ldr         r0, [sp, #0x24]
  01304	e5933000	 ldr         r3, [r3]
  01308	e1a0e00f	 mov         lr, pc
  0130c	e12fff13	 bx          r3
  01310	e58d0014	 str         r0, [sp, #0x14]
  01314	e59d3014	 ldr         r3, [sp, #0x14]
  01318	e58d3000	 str         r3, [sp]

; 902  : 
; 903  :         NotifyDomainCallbacks(POWERDOMAIN_NEON, 
; 904  :             GetPowerDomainConstraint(),
; 905  :             idContext
; 906  :             );

  0131c	e59d0024	 ldr         r0, [sp, #0x24]
  01320	eb000000	 bl          |?GetPowerDomainConstraint@PowerDomainConstraint@@QAAKXZ|
  01324	e58d0018	 str         r0, [sp, #0x18]
  01328	e59d2028	 ldr         r2, [sp, #0x28]
  0132c	e59d1018	 ldr         r1, [sp, #0x18]
  01330	e3a00007	 mov         r0, #7
  01334	eb000000	 bl          |?NotifyDomainCallbacks@@YAXIIK@Z|
  01338		 |$LN1@UpdatePowe@11|

; 907  :         }
; 908  :                   
; 909  :     return rc;

  01338	e59d3000	 ldr         r3, [sp]
  0133c	e58d3008	 str         r3, [sp, #8]

; 910  : }

  01340	e59d0008	 ldr         r0, [sp, #8]
  01344	e28dd01c	 add         sp, sp, #0x1C
  01348	e89d6000	 ldmia       sp, {sp, lr}
  0134c	e12fff1e	 bx          lr
  01350		 |$M38519|

			 ENDP  ; |?UpdatePowerDomainConstraint@NeonPowerDomainConstraint@@MAAHK@Z|, NeonPowerDomainConstraint::UpdatePowerDomainConstraint

	EXPORT	|?FlushDomainPowerState@NeonPowerDomainConstraint@@UAAHXZ| ; NeonPowerDomainConstraint::FlushDomainPowerState

  000a0			 AREA	 |.pdata|, PDATA
|$T38536| DCD	|$LN17@FlushDomai@9|
	DCD	0x40003b04
; Function compile flags: /Odtp

  01350			 AREA	 |.text|, CODE, ARM

  01350		 |?FlushDomainPowerState@NeonPowerDomainConstraint@@UAAHXZ| PROC ; NeonPowerDomainConstraint::FlushDomainPowerState

; 922  : {

  01350		 |$LN17@FlushDomai@9|
  01350	e1a0c00d	 mov         r12, sp
  01354	e92d0001	 stmdb       sp!, {r0}
  01358	e92d5000	 stmdb       sp!, {r12, lr}
  0135c	e24dd034	 sub         sp, sp, #0x34
  01360		 |$M38533|

; 923  :     BOOL rc;
; 924  :     IOCTL_PRCM_DOMAIN_SET_POWERSTATE_IN domainPowerState;
; 925  : 
; 926  :     // initialize structure
; 927  :     domainPowerState.size = sizeof(IOCTL_PRCM_DOMAIN_SET_POWERSTATE_IN);

  01360	e3a03010	 mov         r3, #0x10
  01364	e58d300c	 str         r3, [sp, #0xC]

; 928  :     domainPowerState.powerDomain = POWERDOMAIN_NEON;

  01368	e3a03007	 mov         r3, #7
  0136c	e58d3010	 str         r3, [sp, #0x10]

; 929  :     
; 930  :     switch (GetPowerDomainConstraint())

  01370	e59d003c	 ldr         r0, [sp, #0x3C]
  01374	eb000000	 bl          |?GetPowerDomainConstraint@PowerDomainConstraint@@QAAKXZ|
  01378	e58d0028	 str         r0, [sp, #0x28]
  0137c	e59d3028	 ldr         r3, [sp, #0x28]
  01380	e58d302c	 str         r3, [sp, #0x2C]
  01384	e59d302c	 ldr         r3, [sp, #0x2C]
  01388	e3530004	 cmp         r3, #4
  0138c	8a000017	 bhi         |$LN4@FlushDomai@9|
  01390	e59d202c	 ldr         r2, [sp, #0x2C]
  01394	e1a03102	 mov         r3, r2, lsl #2
  01398	e083300f	 add         r3, r3, pc
  0139c	e5933004	 ldr         r3, [r3, #4]
  013a0	e08ff003	 add         pc, pc, r3
  013a4		 |$LN9@FlushDomai@9|
  013a4		 |$LN8@FlushDomai@9|
  013a4		 |$LN10@FlushDomai@9|
  013a4	00000010	 DCD         0x10
  013a8		 |$LN11@FlushDomai@9|
  013a8	00000010	 DCD         0x10
  013ac		 |$LN12@FlushDomai@9|
  013ac	00000024	 DCD         0x24
  013b0		 |$LN13@FlushDomai@9|
  013b0	00000024	 DCD         0x24
  013b4		 |$LN14@FlushDomai@9|
  013b4	00000038	 DCD         0x38
  013b8		 |$LN3@FlushDomai@9|

; 931  :         {
; 932  :         case D0:
; 933  :         case D1:
; 934  :             // set power domain to on
; 935  :             domainPowerState.powerState = POWERSTATE_ON;

  013b8	e3a03003	 mov         r3, #3
  013bc	e58d3014	 str         r3, [sp, #0x14]

; 936  :             domainPowerState.logicState = LOGICRETSTATE_LOGICRET_DOMAINRET;

  013c0	e3a03004	 mov         r3, #4
  013c4	e58d3018	 str         r3, [sp, #0x18]

; 937  :             break;

  013c8	ea000008	 b           |$LN4@FlushDomai@9|
  013cc		 |$LN2@FlushDomai@9|

; 938  :             
; 939  :         case D2:
; 940  :         case D3:
; 941  :             // currently only supports CSWR
; 942  :             domainPowerState.powerState = POWERSTATE_RETENTION;

  013cc	e3a03001	 mov         r3, #1
  013d0	e58d3014	 str         r3, [sp, #0x14]

; 943  :             domainPowerState.logicState = LOGICRETSTATE_LOGICRET_DOMAINRET;

  013d4	e3a03004	 mov         r3, #4
  013d8	e58d3018	 str         r3, [sp, #0x18]

; 944  :             break;

  013dc	ea000003	 b           |$LN4@FlushDomai@9|
  013e0		 |$LN1@FlushDomai@9|

; 945  : 
; 946  :         case D4:
; 947  :             // set power domain to off mode
; 948  :             domainPowerState.powerState = POWERSTATE_OFF;

  013e0	e3a03000	 mov         r3, #0
  013e4	e58d3014	 str         r3, [sp, #0x14]

; 949  :             domainPowerState.logicState = LOGICRETSTATE_LOGICRET_DOMAINRET;

  013e8	e3a03004	 mov         r3, #4
  013ec	e58d3018	 str         r3, [sp, #0x18]
  013f0		 |$LN4@FlushDomai@9|

; 950  :             break;
; 951  :         }
; 952  :     
; 953  :     // send ioctl
; 954  :     rc = KernelIoControl(IOCTL_PRCM_DOMAIN_SET_POWERSTATE, &domainPowerState, 
; 955  :             sizeof(IOCTL_PRCM_DOMAIN_SET_POWERSTATE_IN), 0, 0, 0
; 956  :             );

  013f0	e3a03000	 mov         r3, #0
  013f4	e58d3004	 str         r3, [sp, #4]
  013f8	e3a03000	 mov         r3, #0
  013fc	e58d3000	 str         r3, [sp]
  01400	e3a03000	 mov         r3, #0
  01404	e3a02010	 mov         r2, #0x10
  01408	e28d100c	 add         r1, sp, #0xC
  0140c	e59f0024	 ldr         r0, [pc, #0x24]
  01410	eb000000	 bl          KernelIoControl
  01414	e58d0030	 str         r0, [sp, #0x30]
  01418	e59d3030	 ldr         r3, [sp, #0x30]
  0141c	e58d3008	 str         r3, [sp, #8]

; 957  : 
; 958  :     return rc;

  01420	e59d3008	 ldr         r3, [sp, #8]
  01424	e58d3024	 str         r3, [sp, #0x24]

; 959  : }

  01428	e59d0024	 ldr         r0, [sp, #0x24]
  0142c	e28dd034	 add         sp, sp, #0x34
  01430	e89d6000	 ldmia       sp, {sp, lr}
  01434	e12fff1e	 bx          lr
  01438		 |$LN18@FlushDomai@9|
  01438		 |$LN19@FlushDomai@9|
  01438	01f50fcc	 DCD         0x1f50fcc
  0143c		 |$M38534|

			 ENDP  ; |?FlushDomainPowerState@NeonPowerDomainConstraint@@UAAHXZ|, NeonPowerDomainConstraint::FlushDomainPowerState

; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\pm\inc\indexlist.h

  00000			 AREA	 |.pdata|, PDATA
|$T38544| DCD	|$LN5@MaxIndex|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?MaxIndex@?$IndexList@K@@QAAKXZ| PROC	; IndexList<unsigned long>::MaxIndex

; 76   :     {

  00000		 |$LN5@MaxIndex|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M38541|

; 77   :         return m_maxIndex;

  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e2833088	 add         r3, r3, #0x88
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3000	 str         r3, [sp]

; 78   :     }

  00020	e59d0000	 ldr         r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M38542|

			 ENDP  ; |?MaxIndex@?$IndexList@K@@QAAKXZ|, IndexList<unsigned long>::MaxIndex


  00000			 AREA	 |.pdata|, PDATA
|$T38554| DCD	|$LN10@GetIndex|
	DCD	0x40003304
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetIndex@?$IndexList@K@@QAAPAKK@Z| PROC ; IndexList<unsigned long>::GetIndex

; 142  :     {

  00000		 |$LN10@GetIndex|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd010	 sub         sp, sp, #0x10
  00010		 |$M38551|

; 143  :         IndexData *pCurrent;
; 144  :         DWORD chunkId = id >> 5;

  00010	e59d301c	 ldr         r3, [sp, #0x1C]
  00014	e1a032a3	 mov         r3, r3, lsr #5
  00018	e58d3000	 str         r3, [sp]

; 145  : 
; 146  :         // find chunk
; 147  :         pCurrent = &m_Head;

  0001c	e59d3018	 ldr         r3, [sp, #0x18]
  00020	e58d3004	 str         r3, [sp, #4]
  00024		 |$LN3@GetIndex|

; 148  :         while (chunkId)

  00024	e59d3000	 ldr         r3, [sp]
  00028	e3530000	 cmp         r3, #0
  0002c	0a00000c	 beq         |$LN2@GetIndex|

; 149  :             {
; 150  :             --chunkId;

  00030	e59d3000	 ldr         r3, [sp]
  00034	e2433001	 sub         r3, r3, #1
  00038	e58d3000	 str         r3, [sp]

; 151  :             pCurrent = pCurrent->pNext;

  0003c	e59d3004	 ldr         r3, [sp, #4]
  00040	e5933000	 ldr         r3, [r3]
  00044	e58d3004	 str         r3, [sp, #4]

; 152  :             if (pCurrent == NULL) return NULL;   

  00048	e59d3004	 ldr         r3, [sp, #4]
  0004c	e3530000	 cmp         r3, #0
  00050	1a000002	 bne         |$LN1@GetIndex|
  00054	e3a03000	 mov         r3, #0
  00058	e58d3008	 str         r3, [sp, #8]
  0005c	ea000016	 b           |$LN4@GetIndex|
  00060		 |$LN1@GetIndex|

; 153  :             }

  00060	eaffffef	 b           |$LN3@GetIndex|
  00064		 |$LN2@GetIndex|

; 154  : 
; 155  :         // clear mask
; 156  :         return (pCurrent->ffMask & (1 << (id & 0x1F))) ? 
; 157  :                     &(pCurrent->rgData[id & 0x1F]) : NULL;

  00064	e59d3004	 ldr         r3, [sp, #4]
  00068	e2831004	 add         r1, r3, #4
  0006c	e59d301c	 ldr         r3, [sp, #0x1C]
  00070	e203201f	 and         r2, r3, #0x1F
  00074	e3a03001	 mov         r3, #1
  00078	e1a02213	 mov         r2, r3, lsl r2
  0007c	e5913000	 ldr         r3, [r1]
  00080	e1130002	 tst         r3, r2
  00084	0a000008	 beq         |$LN6@GetIndex|
  00088	e59d3004	 ldr         r3, [sp, #4]
  0008c	e2831008	 add         r1, r3, #8
  00090	e59d301c	 ldr         r3, [sp, #0x1C]
  00094	e203201f	 and         r2, r3, #0x1F
  00098	e3a03004	 mov         r3, #4
  0009c	e0030392	 mul         r3, r2, r3
  000a0	e0813003	 add         r3, r1, r3
  000a4	e58d300c	 str         r3, [sp, #0xC]
  000a8	ea000001	 b           |$LN7@GetIndex|
  000ac		 |$LN6@GetIndex|
  000ac	e3a03000	 mov         r3, #0
  000b0	e58d300c	 str         r3, [sp, #0xC]
  000b4		 |$LN7@GetIndex|
  000b4	e59d300c	 ldr         r3, [sp, #0xC]
  000b8	e58d3008	 str         r3, [sp, #8]
  000bc		 |$LN4@GetIndex|

; 158  :     }

  000bc	e59d0008	 ldr         r0, [sp, #8]
  000c0	e28dd010	 add         sp, sp, #0x10
  000c4	e89d6000	 ldmia       sp, {sp, lr}
  000c8	e12fff1e	 bx          lr
  000cc		 |$M38552|

			 ENDP  ; |?GetIndex@?$IndexList@K@@QAAPAKK@Z|, IndexList<unsigned long>::GetIndex

	END
