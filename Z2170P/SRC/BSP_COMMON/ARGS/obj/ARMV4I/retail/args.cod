; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\Z2170P\SRC\BSP_COMMON\ARGS\args.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.bss|, NOINIT
|s_dwHWEntropy| % 0x8
|s_bInitialized| % 0x4

  00000			 AREA	 |.data|, DATA
|s_uuid| DCD	0x0
	DCW	0x3024
	DCW	0x801
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
|s_rndisMAC| DCB 0x0
	DCB	0x24
	DCB	0x30
	DCB	0xab
	DCB	0x12
	DCB	0x34

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|OALArgsQuery|
	EXPORT	|??_C@_1CI@CLMEBIJE@?$AA?$CL?$AAO?$AAA?$AAL?$AAA?$AAr?$AAg?$AAs?$AAQ?$AAu?$AAe?$AAr?$AAy?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|NKDbgPrintfW|
	IMPORT	|memcpy|
	IMPORT	|memset|
	IMPORT	|strlen|

  0000c			 AREA	 |.bss|, NOINIT
|s_deviceId| %	0x18
|s_deviceId| %	0x18
; File c:\wince600\platform\z2170p\src\bsp_common\args\args.c

  00000			 AREA	 |.pdata|, PDATA
|$T46815| DCD	|$LN34@OALArgsQue|
	DCD	0x40009201

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@CLMEBIJE@?$AA?$CL?$AAO?$AAA?$AAL?$AAA?$AAr?$AAg?$AAs?$AAQ?$AAu?$AAe?$AAr?$AAy?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "A", 0x0, "r", 0x0, "g"
	DCB	0x0, "s", 0x0, "Q", 0x0, "u", 0x0, "e", 0x0, "r", 0x0, "y"
	DCB	0x0, "(", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALArgsQuery| PROC

; 63   : {

  00000		 |$LN34@OALArgsQue|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004		 |$M46812|
  00004	e1a05000	 mov         r5, r0

; 64   :     VOID *pData = NULL;
; 65   :     BSP_ARGS *pArgs;
; 66   : 
; 67   :     //OALMSG(OAL_ARGS&&OAL_FUNC, (L"+OALArgsQuery(%d)\r\n", type));
; 68   :     OALMSG(1, (L"+OALArgsQuery(%d)\r\n", type));

  00008	e59f0234	 ldr         r0, [pc, #0x234]
  0000c	e1a01005	 mov         r1, r5
  00010	e3a04000	 mov         r4, #0
  00014	eb000000	 bl          NKDbgPrintfW

; 69   : 
; 70   :     // Get pointer to expected boot args location
; 71   :     pArgs = OALCAtoUA(IMAGE_SHARE_ARGS_CA);

  00018	e3a0820a	 mov         r8, #0xA, 4

; 72   : 
; 73   :     // Check if there is expected signature
; 74   : 	if ((pArgs->header.signature  != OAL_ARGS_SIGNATURE) ||
; 75   : 		(pArgs->header.oalVersion != OAL_ARGS_VERSION) ||
; 76   :         (pArgs->header.bspVersion != BSP_ARGS_VERSION))

  0001c	e5982000	 ldr         r2, [r8]
  00020	e59f3218	 ldr         r3, [pc, #0x218]
  00024	e1520003	 cmp         r2, r3
  00028	1a00007f	 bne         |$cleanUp$46743|
  0002c	e1d830b4	 ldrh        r3, [r8, #4]
  00030	e3530001	 cmp         r3, #1
  00034	1a00007c	 bne         |$cleanUp$46743|
  00038	e1d830b6	 ldrh        r3, [r8, #6]
  0003c	e3530001	 cmp         r3, #1
  00040	1a000079	 bne         |$cleanUp$46743|

; 77   :         goto cleanUp;
; 78   : 
; 79   :     //  Initialize settings
; 80   :     if( s_bInitialized == FALSE )

  00044	e59f71f0	 ldr         r7, [pc, #0x1F0]
  00048	e59f41e8	 ldr         r4, [pc, #0x1E8]
  0004c	e3a0920a	 mov         r9, #0xA, 4
  00050	e5973020	 ldr         r3, [r7, #0x20]
  00054	e3530000	 cmp         r3, #0
  00058	1a000034	 bne         |$LN22@OALArgsQue|

; 81   :     {
; 82   :         int     i, count;
; 83   :         UCHAR   val;
; 84   : 
; 85   :         // Copy prefix for DEVICEID    
; 86   :         count = strlen((char *)pArgs->DevicePrefix);

  0005c	e3890048	 orr         r0, r9, #0x48
  00060	eb000000	 bl          strlen
  00064	e1a06000	 mov         r6, r0

; 87   : 
; 88   :         if (count > sizeof(s_deviceId)-1) 

  00068	e3560017	 cmp         r6, #0x17

; 89   :         	count = sizeof(s_deviceId) -1;
; 90   :         memset(s_deviceId, 0, sizeof(s_deviceId));

  0006c	e3a02018	 mov         r2, #0x18
  00070	e3a01000	 mov         r1, #0
  00074	e1a00007	 mov         r0, r7
  00078	83a06017	 movhi       r6, #0x17
  0007c	eb000000	 bl          memset

; 91   :         memcpy(s_deviceId, pArgs->DevicePrefix, count);

  00080	e1a02006	 mov         r2, r6
  00084	e3891048	 orr         r1, r9, #0x48
  00088	e1a00007	 mov         r0, r7
  0008c	eb000000	 bl          memcpy
  00090	e3a01000	 mov         r1, #0
  00094		 |$LL20@OALArgsQue|

; 92   : 
; 93   :         // Append DeviceID as hex string
; 94   :         for( i = 0; i < 8 && (count < sizeof(s_deviceId) - 1); i++, count++)

  00094	e3560017	 cmp         r6, #0x17
  00098	2a00000b	 bcs         |$LN18@OALArgsQue|

; 95   :         {
; 96   :             val = (UCHAR)((pArgs->deviceID >> (28 - i*4)) & 0xF);

  0009c	e5982010	 ldr         r2, [r8, #0x10]
  000a0	e261301c	 rsb         r3, r1, #0x1C
  000a4	e2811004	 add         r1, r1, #4
  000a8	e1a03332	 mov         r3, r2, lsr r3
  000ac	e203300f	 and         r3, r3, #0xF

; 97   :             s_deviceId[count] = val < 10 ? '0' + val : 'A' + val - 10;

  000b0	e353000a	 cmp         r3, #0xA
  000b4	32833030	 addcc       r3, r3, #0x30
  000b8	22833037	 addcs       r3, r3, #0x37
  000bc	e7c63007	 strb        r3, [r6, +r7]
  000c0	e2866001	 add         r6, r6, #1
  000c4	e3510020	 cmp         r1, #0x20
  000c8	bafffff1	 blt         |$LL20@OALArgsQue|
  000cc		 |$LN18@OALArgsQue|

; 98   :         }
; 99   : 
; 100  :         //  Use DeviceID as last part of UUID
; 101  :         s_uuid.Data4[4] = (UCHAR)(pArgs->deviceID >> 24);

  000cc	e5d83013	 ldrb        r3, [r8, #0x13]

; 102  :         s_uuid.Data4[5] = (UCHAR)(pArgs->deviceID >> 16);
; 103  :         s_uuid.Data4[6] = (UCHAR)(pArgs->deviceID >> 8);
; 104  :         s_uuid.Data4[7] = (UCHAR)(pArgs->deviceID);
; 105  : 
; 106  :         //  Use DeviceID for HWEntropy value
; 107  :         s_dwHWEntropy[0] = pArgs->deviceID;
; 108  :         s_dwHWEntropy[1] = pArgs->deviceID ^ 0xFFFFFFFF;
; 109  : 
; 110  :         //  Use DeviceID for ActiveSync RNDIS MAC
; 111  :         s_rndisMAC[2] = (UCHAR) (pArgs->deviceID >> 24);
; 112  :         s_rndisMAC[3] = (UCHAR) (pArgs->deviceID >> 16);
; 113  :         s_rndisMAC[4] = (UCHAR) (pArgs->deviceID >> 8);
; 114  :         s_rndisMAC[5] = (UCHAR) (pArgs->deviceID);
; 115  : 
; 116  :         s_bInitialized = TRUE;

  000d0	e3a02001	 mov         r2, #1
  000d4	e5872020	 str         r2, [r7, #0x20]
  000d8	e5c4300c	 strb        r3, [r4, #0xC]
  000dc	e1d831b2	 ldrh        r3, [r8, #0x12]
  000e0	e5c4300d	 strb        r3, [r4, #0xD]
  000e4	e5983010	 ldr         r3, [r8, #0x10]
  000e8	e1a03423	 mov         r3, r3, lsr #8
  000ec	e5c4300e	 strb        r3, [r4, #0xE]
  000f0	e5983010	 ldr         r3, [r8, #0x10]
  000f4	e5c4300f	 strb        r3, [r4, #0xF]
  000f8	e5983010	 ldr         r3, [r8, #0x10]
  000fc	e5873018	 str         r3, [r7, #0x18]
  00100	e5983010	 ldr         r3, [r8, #0x10]
  00104	e1e03003	 mvn         r3, r3
  00108	e587301c	 str         r3, [r7, #0x1C]
  0010c	e5d83013	 ldrb        r3, [r8, #0x13]
  00110	e5c43012	 strb        r3, [r4, #0x12]
  00114	e1d831b2	 ldrh        r3, [r8, #0x12]
  00118	e5c43013	 strb        r3, [r4, #0x13]
  0011c	e5983010	 ldr         r3, [r8, #0x10]
  00120	e1a03423	 mov         r3, r3, lsr #8
  00124	e5c43014	 strb        r3, [r4, #0x14]
  00128	e5983010	 ldr         r3, [r8, #0x10]
  0012c	e5c43015	 strb        r3, [r4, #0x15]
  00130		 |$LN22@OALArgsQue|

; 117  :     }
; 118  : 
; 119  :     // Depending on required args
; 120  :     switch (type)

  00130	e3550044	 cmp         r5, #0x44
  00134	8a00001e	 bhi         |$LN29@OALArgsQue|
  00138	0a00001a	 beq         |$LN7@OALArgsQue|
  0013c	e3550001	 cmp         r5, #1
  00140	0a000016	 beq         |$LN12@OALArgsQue|
  00144	e3550002	 cmp         r5, #2
  00148	0a000011	 beq         |$LN14@OALArgsQue|
  0014c	e3550003	 cmp         r5, #3
  00150	0a000035	 beq         |$cleanUp$46743|
  00154	e3550005	 cmp         r5, #5
  00158	0a00000b	 beq         |$LN15@OALArgsQue|
  0015c	e3550040	 cmp         r5, #0x40
  00160	0a000007	 beq         |$LN13@OALArgsQue|
  00164	e3550041	 cmp         r5, #0x41
  00168	0a000003	 beq         |$LN9@OALArgsQue|
  0016c	e3550042	 cmp         r5, #0x42
  00170	1a00001b	 bne         |$LN1@OALArgsQue|

; 149  : 
; 150  :         case OAL_ARGS_QUERY_RNDISMAC:
; 151  :             pData = s_rndisMAC;

  00174	e2844010	 add         r4, r4, #0x10

; 152  :             break;

  00178	ea00002b	 b           |$cleanUp$46743|
  0017c		 |$LN9@OALArgsQue|

; 140  :             break;
; 141  :           
; 142  :         case OAL_ARGS_QUERY_UUID:
; 143  :             pData = &s_uuid;
; 144  :             break;
; 145  : 
; 146  :         case OAL_ARGS_QUERY_HWENTROPY:	// 65
; 147  :             pData = s_dwHWEntropy;

  0017c	e2874018	 add         r4, r7, #0x18

; 148  :             break;

  00180	ea000029	 b           |$cleanUp$46743|
  00184		 |$LN13@OALArgsQue|

; 129  : 
; 130  :         case OAL_ARGS_QUERY_COLDBOOT:	// 64
; 131  :             pData = &pArgs->coldBoot;

  00184	e3a042ca	 mov         r4, #0xCA, 4

; 132  :             break;

  00188	ea000027	 b           |$cleanUp$46743|
  0018c		 |$LN15@OALArgsQue|

; 121  :     {
; 122  :         case OAL_ARGS_QUERY_UPDATEMODE:
; 123  :             pData = &pArgs->updateMode;

  0018c	e3a0428a	 mov         r4, #0x8A, 4

; 124  :             break;

  00190	ea000025	 b           |$cleanUp$46743|
  00194		 |$LN14@OALArgsQue|
  00194	e3a0320a	 mov         r3, #0xA, 4

; 125  : 
; 126  :         case OAL_ARGS_QUERY_KITL:
; 127  :             pData = &pArgs->kitl;

  00198	e3834018	 orr         r4, r3, #0x18

; 128  :             break;

  0019c	ea000022	 b           |$cleanUp$46743|
  001a0		 |$LN12@OALArgsQue|

; 133  : 
; 134  :         case OAL_ARGS_QUERY_DEVID:
; 135  :             pData = s_deviceId;

  001a0	e1a04007	 mov         r4, r7

; 136  :             break;

  001a4	ea000020	 b           |$cleanUp$46743|
  001a8		 |$LN7@OALArgsQue|
  001a8	e3a0320a	 mov         r3, #0xA, 4

; 153  :             
; 154  :         case OAL_ARGS_QUERY_OALFLAGS:	// 68
; 155  :             pData = &pArgs->oalFlags;

  001ac	e3834044	 orr         r4, r3, #0x44

; 156  :             break;

  001b0	ea00001d	 b           |$cleanUp$46743|
  001b4		 |$LN29@OALArgsQue|

; 117  :     }
; 118  : 
; 119  :     // Depending on required args
; 120  :     switch (type)

  001b4	e3550046	 cmp         r5, #0x46
  001b8	0a00001a	 beq         |$LN11@OALArgsQue|
  001bc	e3550047	 cmp         r5, #0x47
  001c0	0a000015	 beq         |$LN6@OALArgsQue|
  001c4	e3550048	 cmp         r5, #0x48
  001c8	0a000010	 beq         |$LN5@OALArgsQue|
  001cc	e3550049	 cmp         r5, #0x49
  001d0	0a00000b	 beq         |$LN4@OALArgsQue|
  001d4	e355004a	 cmp         r5, #0x4A
  001d8	0a000006	 beq         |$LN3@OALArgsQue|
  001dc	e355004b	 cmp         r5, #0x4B
  001e0	0a000001	 beq         |$LN2@OALArgsQue|
  001e4		 |$LN1@OALArgsQue|

; 177  : 			
; 178  :         default:
; 179  :             pData = NULL;

  001e4	e3a04000	 mov         r4, #0

; 180  :             break;

  001e8	ea00000f	 b           |$cleanUp$46743|
  001ec		 |$LN2@OALArgsQue|
  001ec	e3a0320a	 mov         r3, #0xA, 4
  001f0	e383405a	 orr         r4, r3, #0x5A
  001f4	ea00000c	 b           |$cleanUp$46743|
  001f8		 |$LN3@OALArgsQue|

; 173  : 
; 174  : 		case OAL_ARGS_QUERY_SN:
; 175  : 			pData = &pArgs->SerialNumber;
; 176  : 			break;

  001f8	e3a0320a	 mov         r3, #0xA, 4
  001fc	e3834084	 orr         r4, r3, #0x84
  00200	ea000009	 b           |$cleanUp$46743|
  00204		 |$LN4@OALArgsQue|

; 169  :             
; 170  : 		case OAL_ARGS_QUERY_CALIBRATE:
; 171  : 			pData = &pArgs->CalibBuffer;
; 172  : 			break;

  00204	e3a0320a	 mov         r3, #0xA, 4
  00208	e3834080	 orr         r4, r3, #0x80
  0020c	ea000006	 b           |$cleanUp$46743|
  00210		 |$LN5@OALArgsQue|

; 165  : 
; 166  :         case OAL_ARGS_QUERY_OPP_MODE:	// 73
; 167  :             pData = &pArgs->opp_mode;
; 168  :             break;

  00210	e3a0320a	 mov         r3, #0xA, 4
  00214	e383407c	 orr         r4, r3, #0x7C
  00218	ea000003	 b           |$cleanUp$46743|
  0021c		 |$LN6@OALArgsQue|

; 157  : 
; 158  :         case OAL_ARGS_QUERY_DISP_RES:	// 71
; 159  :             pData = &pArgs->dispRes;
; 160  :             break;
; 161  : 
; 162  :         case OAL_ARGS_QUERY_ECC_TYPE:
; 163  :             pData = &pArgs->ECCtype;
; 164  :             break;

  0021c	e3a0320a	 mov         r3, #0xA, 4
  00220	e3834078	 orr         r4, r3, #0x78
  00224	ea000000	 b           |$cleanUp$46743|
  00228		 |$LN11@OALArgsQue|

; 137  : 			
; 138  :         case OAL_ARGS_QUERY_DEVICE_PREFIX:
; 139  :             pData = &pArgs->DevicePrefix;

  00228	e3894048	 orr         r4, r9, #0x48
  0022c		 |$cleanUp$46743|

; 181  :     }
; 182  : 
; 183  : cleanUp:
; 184  :     //OALMSG(OAL_ARGS&&OAL_FUNC, (L"-OALArgsQuery(pData = 0x%08x)\r\n", pData));
; 185  :     
; 186  :     return pData;
; 187  : }

  0022c	e1a00004	 mov         r0, r4
  00230	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  00234	e12fff1e	 bx          lr
  00238		 |$LN35@OALArgsQue|
  00238		 |$LN36@OALArgsQue|
  00238	00000000	 DCD         |s_uuid|
  0023c		 |$LN37@OALArgsQue|
  0023c	00000000	 DCD         |s_deviceId|
  00240		 |$LN38@OALArgsQue|
  00240	53475241	 DCD         0x53475241
  00244		 |$LN39@OALArgsQue|
  00244	00000000	 DCD         |??_C@_1CI@CLMEBIJE@?$AA?$CL?$AAO?$AAA?$AAL?$AAA?$AAr?$AAg?$AAs?$AAQ?$AAu?$AAe?$AAr?$AAy?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00248		 |$M46813|

			 ENDP  ; |OALArgsQuery|

	END
