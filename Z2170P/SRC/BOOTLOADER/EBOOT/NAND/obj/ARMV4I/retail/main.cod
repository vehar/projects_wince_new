; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\Z2170P\SRC\BOOTLOADER\EBOOT\main.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|??_C@_1BK@GNCICGCB@?$AAN?$AAK?$AA?5?$AAf?$AAr?$AAo?$AAm?$AA?5?$AAN?$AAA?$AAN?$AAD?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BK@NKDLNHPK@?$AAU?$AAS?$AAB?$AAF?$AAn?$AA?5?$AAR?$AAN?$AAD?$AAI?$AAS?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BI@OOCKPHGK@?$AAL?$AAA?$AAN?$AA9?$AA1?$AA1?$AA5?$AA?5?$AAM?$AAA?$AAC?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|g_kitlEthLan911x| [ DATA ]
	EXPORT	|g_kitlUsbRndis| [ DATA ]
	EXPORT	|g_kitlDevices| [ DATA ]
	EXPORT	|g_bootDevices| [ DATA ]
	EXPORT	|DefaultMacAddress| [ DATA ]
	EXPORT	|dwEbootECCtype| [ DATA ]
	EXPORT	|g_CPUFamily| [ DATA ]
	IMPORT	|RndisMulticastList|
	IMPORT	|RndisCurrentPacketFilter|
	IMPORT	|RndisDisableInts|
	IMPORT	|RndisEnableInts|
	IMPORT	|RndisEDbgGetFrame|
	IMPORT	|RndisEDbgSendFrame|
	IMPORT	|HostMiniInit|
	IMPORT	|LAN911XMulticastList|
	IMPORT	|LAN911XCurrentPacketFilter|
	IMPORT	|LAN911XDisableInts|
	IMPORT	|LAN911XEnableInts|
	IMPORT	|LAN911XGetFrame|
	IMPORT	|LAN911XSendFrame|
	IMPORT	|LAN911XInit|

  00000			 AREA	 |.data|, DATA
	 COMMON	|g_bootCfg|, 0x90

	 COMMON	|ghTwl|, 0x4

	 COMMON	|g_ecctype|, 0x1

	 COMMON	|g_eboot|, 0x148

	 COMMON	|gDevice_prefix|, 0x4


  00000			 AREA	 |.bss|, NOINIT
|g_CPUFamily| %	0x4

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BK@GNCICGCB@?$AAN?$AAK?$AA?5?$AAf?$AAr?$AAo?$AAm?$AA?5?$AAN?$AAA?$AAN?$AAD?$AA?$AA@| DCB "N"
	DCB	0x0, "K", 0x0, " ", 0x0, "f", 0x0, "r", 0x0, "o", 0x0, "m"
	DCB	0x0, " ", 0x0, "N", 0x0, "A", 0x0, "N", 0x0, "D", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BK@NKDLNHPK@?$AAU?$AAS?$AAB?$AAF?$AAn?$AA?5?$AAR?$AAN?$AAD?$AAI?$AAS?$AA?5?$AA?$AA@| DCB "U"
	DCB	0x0, "S", 0x0, "B", 0x0, "F", 0x0, "n", 0x0, " ", 0x0, "R"
	DCB	0x0, "N", 0x0, "D", 0x0, "I", 0x0, "S", 0x0, " ", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BI@OOCKPHGK@?$AAL?$AAA?$AAN?$AA9?$AA1?$AA1?$AA5?$AA?5?$AAM?$AAA?$AAC?$AA?$AA@| DCB "L"
	DCB	0x0, "A", 0x0, "N", 0x0, "9", 0x0, "1", 0x0, "1", 0x0, "5"
	DCB	0x0, " ", 0x0, "M", 0x0, "A", 0x0, "C", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.data|, DATA
|g_kitlEthLan911x| DCD |LAN911XInit|
	DCD	0x0
	DCD	0x0
	DCD	|LAN911XSendFrame|
	DCD	|LAN911XGetFrame|
	DCD	|LAN911XEnableInts|
	DCD	|LAN911XDisableInts|
	DCD	0x0
	DCD	0x0
	DCD	|LAN911XCurrentPacketFilter|
	DCD	|LAN911XMulticastList|
|g_kitlUsbRndis| DCD |HostMiniInit|
	DCD	0x0
	DCD	0x0
	DCD	|RndisEDbgSendFrame|
	DCD	|RndisEDbgGetFrame|
	DCD	|RndisEnableInts|
	DCD	|RndisDisableInts|
	DCD	0x0
	DCD	0x0
	DCD	|RndisCurrentPacketFilter|
	DCD	|RndisMulticastList|
|g_kitlDevices| DCD |??_C@_1BI@OOCKPHGK@?$AAL?$AAA?$AAN?$AA9?$AA1?$AA1?$AA5?$AA?5?$AAM?$AAA?$AAC?$AA?$AA@|
	DCD	0x0
	DCD	0x15000000
	DCD	0x0
	DCD	0x2
	DCD	|g_kitlEthLan911x|
	DCD	|??_C@_1BK@NKDLNHPK@?$AAU?$AAS?$AAB?$AAF?$AAn?$AA?5?$AAR?$AAN?$AAD?$AAI?$AAS?$AA?5?$AA?$AA@|
	DCD	0x0
	DCD	0x480ab000
	DCD	0x0
	DCD	0x2
	DCD	|g_kitlUsbRndis|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
|g_bootDevices| DCD |??_C@_1BI@OOCKPHGK@?$AAL?$AAA?$AAN?$AA9?$AA1?$AA1?$AA5?$AA?5?$AAM?$AAA?$AAC?$AA?$AA@|
	DCD	0x0
	DCD	0x15000000
	DCD	0x0
	DCD	0x2
	DCD	|g_kitlEthLan911x|
	DCD	|??_C@_1BK@NKDLNHPK@?$AAU?$AAS?$AAB?$AAF?$AAn?$AA?5?$AAR?$AAN?$AAD?$AAI?$AAS?$AA?5?$AA?$AA@|
	DCD	0x0
	DCD	0x480ab000
	DCD	0x0
	DCD	0x2
	DCD	|g_kitlUsbRndis|
	DCD	|??_C@_1BK@GNCICGCB@?$AAN?$AAK?$AA?5?$AAf?$AAr?$AAo?$AAm?$AA?5?$AAN?$AAA?$AAN?$AAD?$AA?$AA@|
	DCD	0x0
	DCD	0x8000020
	DCD	0x0
	DCD	0x3
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
|DefaultMacAddress| DCW 0x2020
	DCW	0x3040
	DCW	0x5060

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
|dwEbootECCtype| DCD 0xffffffff
	%	4
|?ebootPinMux_37XX@?1??OEMPlatformInit@@9@9| DCW 0x52	; `OEMPlatformInit'::`2'::ebootPinMux_37XX
	%	2
	DCD	0x0
	DCW	0x53
	%	2
	DCD	0x0
	DCW	0x54
	%	2
	DCD	0x0
	DCW	0x55
	%	2
	DCD	0x0
	DCW	0x5c
	%	2
	DCD	0x0
	DCW	0x5d
	%	2
	DCD	0x0
	DCW	0x5e
	%	2
	DCD	0x0
	DCW	0x5f
	%	2
	DCD	0x0
	DCW	0x60
	%	2
	DCD	0x0
	DCW	0x61
	%	2
	DCD	0x0
	DCW	0x62
	%	2
	DCD	0x0
	DCW	0x63
	%	2
	DCD	0x0
	DCW	0x64
	%	2
	DCD	0x0
	DCW	0x65
	%	2
	DCD	0x0
	DCW	0x66
	%	2
	DCD	0x0
	DCW	0x67
	%	2
	DCD	0x0
	DCW	0x68
	%	2
	DCD	0x18
	DCW	0x69
	%	2
	DCD	0x18
	DCW	0x6a
	%	2
	DCD	0x18
	DCW	0x6b
	%	2
	DCD	0x18
	DCW	0x6c
	%	2
	DCD	0x18
	DCW	0x6d
	%	2
	DCD	0x18
	DCW	0x51b
	%	2
	DCD	0x18
	DCW	0x51c
	%	2
	DCD	0x18
	DCW	0x51e
	%	2
	DCD	0x18
	DCW	0x51f
	%	2
	DCD	0x18
	DCW	0x520
	%	2
	DCD	0x18
	DCW	0x521
	%	2
	DCD	0x18
	DCW	0xd0
	%	2
	DCD	0x20
	DCW	0xac
	%	2
	DCD	0x20
	DCW	0xa5
	%	2
	DCD	0x20
	DCW	0x4c
	%	2
	DCD	0x20
	DCW	0x82
	%	2
	DCD	0x21
	DCW	0xad
	%	2
	DCD	0x20
	DCW	0xab
	%	2
	DCD	0x21
	DCW	0xaa
	%	2
	DCD	0x21
	DCW	0xa0
	%	2
	DCD	0x23
	DCW	0x9a
	%	2
	DCD	0x20
	DCW	0x2d8
	%	2
	DCD	0x20
	DCW	0x2d7
	%	2
	DCD	0x20
	DCW	0x25
	%	2
	DCD	0x20
	DCW	0x27
	%	2
	DCD	0x20
	DCW	0x28
	%	2
	DCD	0x20
	DCW	0x29
	%	2
	DCD	0x20
	DCW	0x2e
	%	2
	DCD	0x21
	DCW	0xba
	%	2
	DCD	0x7
	DCW	0xb9
	%	2
	DCD	0x1
	DCW	0xbb
	%	2
	DCD	0x1
	DCW	0xbc
	%	2
	DCD	0x1
	DCW	0xbd
	%	2
	DCD	0x1
	DCW	0xbe
	%	2
	DCD	0x1
	DCW	0xbf
	%	2
	DCD	0x1
	DCW	0xc0
	%	2
	DCD	0x1
	DCW	0xc1
	%	2
	DCD	0x1
	DCW	0xc2
	%	2
	DCD	0x1
	DCW	0xc3
	%	2
	DCD	0x1
	DCW	0xc4
	%	2
	DCD	0x1
	DCW	0xcf
	%	2
	DCD	0x20
	DCW	0xcd
	%	2
	DCD	0x20
	DCW	0xcc
	%	2
	DCD	0x20
	DCW	0xb3
	%	2
	DCD	0x20
	DCW	0xb1
	%	2
	DCD	0x21
	DCW	0xb0
	%	2
	DCD	0x20
	DCW	0xae
	%	2
	DCD	0x21
	DCW	0xaf
	%	2
	DCD	0x21
	DCW	0xc9
	%	2
	DCD	0x20
	DCW	0xca
	%	2
	DCD	0x21
	DCW	0xa6
	%	2
	DCD	0x0
	DCW	0xa9
	%	2
	DCD	0x7
	DCW	0xa7
	%	2
	DCD	0x0
	DCW	0xa8
	%	2
	DCD	0x7
	DCW	0xb2
	%	2
	DCD	0x20
	DCW	0x9e
	%	2
	DCD	0x20
	DCW	0x25
	%	2
	DCD	0x20
	DCW	0x9b
	%	2
	DCD	0x20
	DCW	0x2df
	%	2
	DCD	0x20
	DCW	0xffff
	%	2
	DCD	0x0
	IMPORT	|SOCSetPadConfig|
; File c:\wince600\platform\z2170p\src\inc\bsp_padcfg.h

  00000			 AREA	 |.pdata|, PDATA
|$T48148| DCD	|$LN9@ConfigureP|
	DCD	0x40001601
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |ConfigurePadArray| PROC

; 587  : {

  00000		 |$LN9@ConfigureP|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M48145|
  00004	e1a04000	 mov         r4, r0

; 588  :     int i=0;
; 589  :     while (padArray[i].padID != (UINT16) -1)

  00008	e1d420b0	 ldrh        r2, [r4]
  0000c	e3a03cff	 mov         r3, #0xFF, 24
  00010	e38350ff	 orr         r5, r3, #0xFF
  00014	e1520005	 cmp         r2, r5
  00018	e3a06000	 mov         r6, #0
  0001c	0a00000b	 beq         |$LN1@ConfigureP|
  00020	e3a01c7f	 mov         r1, #0x7F, 24
  00024	e38170ff	 orr         r7, r1, #0xFF
  00028	e1a03004	 mov         r3, r4
  0002c		 |$LL2@ConfigureP|

; 590  :     {
; 591  :         SOCSetPadConfig(padArray[i].padID,(UINT16) padArray[i].Cfg);

  0002c	e5933004	 ldr         r3, [r3, #4]
  00030	e1a00002	 mov         r0, r2
  00034	e0031007	 and         r1, r3, r7
  00038	eb000000	 bl          SOCSetPadConfig

; 592  :         i++;

  0003c	e2866001	 add         r6, r6, #1
  00040	e0843186	 add         r3, r4, r6, lsl #3
  00044	e1d320b0	 ldrh        r2, [r3]
  00048	e1520005	 cmp         r2, r5
  0004c	1afffff6	 bne         |$LL2@ConfigureP|
  00050		 |$LN1@ConfigureP|

; 593  :     }
; 594  : }

  00050	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00054	e12fff1e	 bx          lr
  00058		 |$M48146|

			 ENDP  ; |ConfigurePadArray|

	EXPORT	|BSPGpioInit|
	IMPORT	|BSPInsertGpioDevice|
	IMPORT	|Omap_Gpio|
	IMPORT	|Tps659xx_Gpio|
; File c:\wince600\platform\z2170p\src\bootloader\eboot\main.c

  00000			 AREA	 |.pdata|, PDATA
|$T48155| DCD	|$LN5@BSPGpioIni|
	DCD	0x40000d01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |BSPGpioInit| PROC

; 109  : {

  00000		 |$LN5@BSPGpioIni|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M48152|

; 110  :    BSPInsertGpioDevice(0,&Omap_Gpio,NULL);

  00004	e59f1024	 ldr         r1, [pc, #0x24]
  00008	e3a02000	 mov         r2, #0
  0000c	e3a00000	 mov         r0, #0
  00010	eb000000	 bl          BSPInsertGpioDevice

; 111  :    BSPInsertGpioDevice(TRITON_GPIO_PINID_START, &Tps659xx_Gpio, NULL);

  00014	e59f1010	 ldr         r1, [pc, #0x10]
  00018	e3a02000	 mov         r2, #0
  0001c	e3a00c01	 mov         r0, #1, 24
  00020	eb000000	 bl          BSPInsertGpioDevice

; 112  : }

  00024	e49de004	 ldr         lr, [sp], #4
  00028	e12fff1e	 bx          lr
  0002c		 |$LN6@BSPGpioIni|
  0002c		 |$LN7@BSPGpioIni|
  0002c	00000000	 DCD         |Tps659xx_Gpio|
  00030		 |$LN8@BSPGpioIni|
  00030	00000000	 DCD         |Omap_Gpio|
  00034		 |$M48153|

			 ENDP  ; |BSPGpioInit|

	EXPORT	|main|
	IMPORT	|BootloaderMain|
	IMPORT	|EnableDeviceClocks|
	IMPORT	|BSPGetDebugUARTConfig|

  00000			 AREA	 |.pdata|, PDATA
|$T48167| DCD	|$LN5@main|
	DCD	0x40000901
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |main|	 PROC

; 115  : {

  00000		 |$LN5@main|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M48164|

; 116  : 	//UINT32 CpuRevision;
; 117  : 	// Get CPU family
; 118  : 	//g_CPUFamily = CPU_FAMILY_OMAP35XX;
; 119  : 	//CpuRevision = Get_CPUVersion();
; 120  : 	//g_CPUFamily = CPU_FAMILY(CpuRevision);
; 121  :     EnableDeviceClocks(BSPGetDebugUARTConfig()->dev,TRUE);

  00004	eb000000	 bl          BSPGetDebugUARTConfig
  00008	e5900000	 ldr         r0, [r0]
  0000c	e3a01001	 mov         r1, #1
  00010	eb000000	 bl          EnableDeviceClocks

; 122  :     BootloaderMain();

  00014	eb000000	 bl          BootloaderMain

; 123  : }

  00018	e3a00000	 mov         r0, #0
  0001c	e49de004	 ldr         lr, [sp], #4
  00020	e12fff1e	 bx          lr
  00024		 |$M48165|

			 ENDP  ; |main|

	EXPORT	|OEMPlatformInit|
	EXPORT	|??_C@_1DO@MGHPPPEE@?$AAT?$AAP?$AAS?$AA6?$AA5?$AA9?$AAX?$AAX?$AA?5?$AAV?$AAe?$AAr?$AAs?$AAi?$AAo?$AAn?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA2?$AAx?$AA?5?$AA?$CI?$AA?$CF?$AAs?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1M@OIJGKENB@?$AAE?$AAS?$AA1?$AA?4?$AA3?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EE@KGKCAFPP@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAU?$AAn?$AAK?$AAn?$AAo?$AAw?$AAn?$AA?5?$AAC?$AAP?$AAU?$AA?5?$AAf?$AAa?$AAm?$AAi?$AAl?$AAy?$AA?3?$AA?$CF?$AAd?$AA?4?$AA?4?$AA?4?$AA?4?$AA?$AN@| [ DATA ] ; `string'
	EXPORT	|??_C@_08DGJGOJCE@EVM3530?9?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_07BFNEHID@Z2170P?9?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EA@CNLHEJHC@?$AAT?$AAI?$AA?5?$AAO?$AAM?$AAA?$AAP?$AA?$CF?$AAx?$AA?5?$AAV?$AAe?$AAr?$AAs?$AAi?$AAo?$AAn?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?5?$AA?$CI?$AA?$CF?$AAs?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1M@FACKMDLE@?$AAE?$AAS?$AA1?$AA?4?$AA2?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1M@ECJPGMFK@?$AAE?$AAS?$AA1?$AA?4?$AA1?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1M@LKGLCH@?$AAE?$AAS?$AA3?$AA?4?$AA1?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1M@LIAGAMEC@?$AAE?$AAS?$AA3?$AA?4?$AA0?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DO@OPHFFOFA@?$AAE?$AAS?$AA2?$AA?4?$AA1?$AA?0?$AA?5?$AAI?$AAD?$AA?5?$AAd?$AAe?$AAt?$AAe?$AAr?$AAm?$AAi?$AAn?$AAe?$AAd?$AA?5?$AAu?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAC?$AAR?$AAC?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DO@OONAPHOG@?$AAE?$AAS?$AA2?$AA?4?$AA0?$AA?0?$AA?5?$AAI?$AAD?$AA?5?$AAd?$AAe?$AAt?$AAe?$AAr?$AAm?$AAi?$AAn?$AAe?$AAd?$AA?5?$AAu?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAC?$AAR?$AAC?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1M@MMBAGLLJ@?$AAE?$AAS?$AA2?$AA?4?$AA1?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1M@HEKMAMNM@?$AAE?$AAS?$AA2?$AA?4?$AA0?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1M@PKCDALDP@?$AAE?$AAS?$AA1?$AA?4?$AA0?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CE@BJKKNCED@?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AA?5?$AAB?$AAa?$AAr?$AAc?$AAo?$AAd?$AAe?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_08KPKDLECG@18?321?304?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0M@PEJDHBGP@Jan?5?59?52014?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HG@KGFFNHHE@?$AAZ?$AAE?$AAB?$AAE?$AAX?$AA?5?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAC?$AAE?$AA?5?$AAE?$AAB?$AAO?$AAO?$AAT?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAZ?$AA?9?$AA2?$AA1?$AA7@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CC@DJCPIFGO@?$AAV?$AAe?$AAr?$AAs?$AAi?$AAo?$AAn?$AA?3?$AA?5?$AA0?$AA?4?$AA0?$AA?4?$AA1?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|TWLReadIDCode|
	IMPORT	|HotKeyInit|
	IMPORT	|GPIOSetBit|
	IMPORT	|GPIOSetMode|
	IMPORT	|GPIOClrBit|
	IMPORT	|GPIOOpen|
	IMPORT	|TWLOpen|
	IMPORT	|GPIOInit|
	IMPORT	|OALI2CInit|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|OALPAtoVA|
	IMPORT	|Get_CPUVersion|
	IMPORT	|OALLocalAllocInit|

  00004			 AREA	 |.bss|, NOINIT
|?allocationPool@?1??OEMPlatformInit@@9@9| % 0x200	; `OEMPlatformInit'::`2'::allocationPool
|?allocationPool@?1??OEMPlatformInit@@9@9| % 0x200	; `OEMPlatformInit'::`2'::allocationPool
; File c:\wince600\platform\z2170p\src\inc\bsp_padcfg.h

  00000			 AREA	 |.pdata|, PDATA
|$T48223| DCD	|$LN49@OEMPlatfor|
	DCD	0x40012102

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@MGHPPPEE@?$AAT?$AAP?$AAS?$AA6?$AA5?$AA9?$AAX?$AAX?$AA?5?$AAV?$AAe?$AAr?$AAs?$AAi?$AAo?$AAn?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA2?$AAx?$AA?5?$AA?$CI?$AA?$CF?$AAs?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "T"
	DCB	0x0, "P", 0x0, "S", 0x0, "6", 0x0, "5", 0x0, "9", 0x0, "X"
	DCB	0x0, "X", 0x0, " ", 0x0, "V", 0x0, "e", 0x0, "r", 0x0, "s"
	DCB	0x0, "i", 0x0, "o", 0x0, "n", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "2", 0x0, "x", 0x0, " ", 0x0, "("
	DCB	0x0, "%", 0x0, "s", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@OIJGKENB@?$AAE?$AAS?$AA1?$AA?4?$AA3?$AA?$AA@| DCB "E", 0x0, "S", 0x0
	DCB	"1", 0x0, ".", 0x0, "3", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EE@KGKCAFPP@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAU?$AAn?$AAK?$AAn?$AAo?$AAw?$AAn?$AA?5?$AAC?$AAP?$AAU?$AA?5?$AAf?$AAa?$AAm?$AAi?$AAl?$AAy?$AA?3?$AA?$CF?$AAd?$AA?4?$AA?4?$AA?4?$AA?4?$AA?$AN@| DCB "I"
	DCB	0x0, "N", 0x0, "F", 0x0, "O", 0x0, ":", 0x0, " ", 0x0, "U"
	DCB	0x0, "n", 0x0, "K", 0x0, "n", 0x0, "o", 0x0, "w", 0x0, "n"
	DCB	0x0, " ", 0x0, "C", 0x0, "P", 0x0, "U", 0x0, " ", 0x0, "f"
	DCB	0x0, "a", 0x0, "m", 0x0, "i", 0x0, "l", 0x0, "y", 0x0, ":"
	DCB	0x0, "%", 0x0, "d", 0x0, ".", 0x0, ".", 0x0, ".", 0x0, "."
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_08DGJGOJCE@EVM3530?9?$AA@| DCB "EVM3530-", 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_07BFNEHID@Z2170P?9?$AA@| DCB "Z2170P-", 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@CNLHEJHC@?$AAT?$AAI?$AA?5?$AAO?$AAM?$AAA?$AAP?$AA?$CF?$AAx?$AA?5?$AAV?$AAe?$AAr?$AAs?$AAi?$AAo?$AAn?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?5?$AA?$CI?$AA?$CF?$AAs?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "T"
	DCB	0x0, "I", 0x0, " ", 0x0, "O", 0x0, "M", 0x0, "A", 0x0, "P"
	DCB	0x0, "%", 0x0, "x", 0x0, " ", 0x0, "V", 0x0, "e", 0x0, "r"
	DCB	0x0, "s", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, " "
	DCB	0x0, "(", 0x0, "%", 0x0, "s", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@| DCB "U", 0x0
	DCB	"n", 0x0, "k", 0x0, "n", 0x0, "o", 0x0, "w", 0x0, "n", 0x0
	DCB	0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@FACKMDLE@?$AAE?$AAS?$AA1?$AA?4?$AA2?$AA?$AA@| DCB "E", 0x0, "S", 0x0
	DCB	"1", 0x0, ".", 0x0, "2", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@ECJPGMFK@?$AAE?$AAS?$AA1?$AA?4?$AA1?$AA?$AA@| DCB "E", 0x0, "S", 0x0
	DCB	"1", 0x0, ".", 0x0, "1", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@LKGLCH@?$AAE?$AAS?$AA3?$AA?4?$AA1?$AA?$AA@| DCB "E", 0x0, "S", 0x0
	DCB	"3", 0x0, ".", 0x0, "1", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@LIAGAMEC@?$AAE?$AAS?$AA3?$AA?4?$AA0?$AA?$AA@| DCB "E", 0x0, "S", 0x0
	DCB	"3", 0x0, ".", 0x0, "0", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@OPHFFOFA@?$AAE?$AAS?$AA2?$AA?4?$AA1?$AA?0?$AA?5?$AAI?$AAD?$AA?5?$AAd?$AAe?$AAt?$AAe?$AAr?$AAm?$AAi?$AAn?$AAe?$AAd?$AA?5?$AAu?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAC?$AAR?$AAC?$AA?$AA@| DCB "E"
	DCB	0x0, "S", 0x0, "2", 0x0, ".", 0x0, "1", 0x0, ",", 0x0, " "
	DCB	0x0, "I", 0x0, "D", 0x0, " ", 0x0, "d", 0x0, "e", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "m", 0x0, "i", 0x0, "n", 0x0, "e"
	DCB	0x0, "d", 0x0, " ", 0x0, "u", 0x0, "s", 0x0, "i", 0x0, "n"
	DCB	0x0, "g", 0x0, " ", 0x0, "C", 0x0, "R", 0x0, "C", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@OONAPHOG@?$AAE?$AAS?$AA2?$AA?4?$AA0?$AA?0?$AA?5?$AAI?$AAD?$AA?5?$AAd?$AAe?$AAt?$AAe?$AAr?$AAm?$AAi?$AAn?$AAe?$AAd?$AA?5?$AAu?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAC?$AAR?$AAC?$AA?$AA@| DCB "E"
	DCB	0x0, "S", 0x0, "2", 0x0, ".", 0x0, "0", 0x0, ",", 0x0, " "
	DCB	0x0, "I", 0x0, "D", 0x0, " ", 0x0, "d", 0x0, "e", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "m", 0x0, "i", 0x0, "n", 0x0, "e"
	DCB	0x0, "d", 0x0, " ", 0x0, "u", 0x0, "s", 0x0, "i", 0x0, "n"
	DCB	0x0, "g", 0x0, " ", 0x0, "C", 0x0, "R", 0x0, "C", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@MMBAGLLJ@?$AAE?$AAS?$AA2?$AA?4?$AA1?$AA?$AA@| DCB "E", 0x0, "S", 0x0
	DCB	"2", 0x0, ".", 0x0, "1", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@HEKMAMNM@?$AAE?$AAS?$AA2?$AA?4?$AA0?$AA?$AA@| DCB "E", 0x0, "S", 0x0
	DCB	"2", 0x0, ".", 0x0, "0", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@PKCDALDP@?$AAE?$AAS?$AA1?$AA?4?$AA0?$AA?$AA@| DCB "E", 0x0, "S", 0x0
	DCB	"1", 0x0, ".", 0x0, "0", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@BJKKNCED@?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AA?5?$AAB?$AAa?$AAr?$AAc?$AAo?$AAd?$AAe?$AA?$AN?$AA?6?$AA?$AA@| DCB "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a", 0x0, "l"
	DCB	0x0, " ", 0x0, "B", 0x0, "a", 0x0, "r", 0x0, "c", 0x0, "o"
	DCB	0x0, "d", 0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_08KPKDLECG@18?321?304?$AA@| DCB "18:21:04", 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0M@PEJDHBGP@Jan?5?59?52014?$AA@| DCB "Jan  9 2014", 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HG@KGFFNHHE@?$AAZ?$AAE?$AAB?$AAE?$AAX?$AA?5?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAC?$AAE?$AA?5?$AAE?$AAB?$AAO?$AAO?$AAT?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAZ?$AA?9?$AA2?$AA1?$AA7@| DCB "Z"
	DCB	0x0, "E", 0x0, "B", 0x0, "E", 0x0, "X", 0x0, " ", 0x0, "W"
	DCB	0x0, "i", 0x0, "n", 0x0, "d", 0x0, "o", 0x0, "w", 0x0, "s"
	DCB	0x0, " ", 0x0, "C", 0x0, "E", 0x0, " ", 0x0, "E", 0x0, "B"
	DCB	0x0, "O", 0x0, "O", 0x0, "T", 0x0, " ", 0x0, "f", 0x0, "o"
	DCB	0x0, "r", 0x0, " ", 0x0, "Z", 0x0, "-", 0x0, "2", 0x0, "1"
	DCB	0x0, "7", 0x0, "0", 0x0, "P", 0x0, " ", 0x0, "-", 0x0, " "
	DCB	0x0, "R", 0x0, "a", 0x0, "y", 0x0, 0xd, 0x0, 0xa, 0x0, "B"
	DCB	0x0, "u", 0x0, "i", 0x0, "l", 0x0, "t", 0x0, " ", 0x0, "%"
	DCB	0x0, "S", 0x0, " ", 0x0, "a", 0x0, "t", 0x0, " ", 0x0, "%"
	DCB	0x0, "S", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CC@DJCPIFGO@?$AAV?$AAe?$AAr?$AAs?$AAi?$AAo?$AAn?$AA?3?$AA?5?$AA0?$AA?4?$AA0?$AA?4?$AA1?$AA?$AN?$AA?6?$AA?$AA@| DCB "V"
	DCB	0x0, "e", 0x0, "r", 0x0, "s", 0x0, "i", 0x0, "o", 0x0, "n"
	DCB	0x0, ":", 0x0, " ", 0x0, "0", 0x0, ".", 0x0, "0", 0x0, "."
	DCB	0x0, "1", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy
; File c:\wince600\platform\z2170p\src\bootloader\eboot\main.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMPlatformInit| PROC

; 134  : {

  00000		 |$LN49@OEMPlatfor|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd008	 sub         sp, sp, #8
  00008		 |$M48220|

; 135  :     OMAP_GPTIMER_REGS *pTimerRegs;
; 136  :     UINT32 CpuRevision, version;
; 137  :     HANDLE hTwl, hGPIO;
; 138  :     static UCHAR allocationPool[512];
; 139  :     static const PAD_INFO ebootPinMux_37XX[] = {
; 140  :             DSS_PADS_37XX
; 141  :             GPIO_PADS_37XX
; 142  : 	     	USBOTG_PADS
; 143  : 	     	MCSPI1_EBOOT_PADS
; 144  :             MCSPI4_PADS                 //Ray 131119
; 145  :             I2C3_PADS                   //Ray 131128
; 146  :             UART1_PADS                  //Ray 131225
; 147  :             LED_PADS                    //Ray 131227
; 148  :             POWER_ON_PADS               //Ray 140109
; 149  :             END_OF_PAD_ARRAY
; 150  :     };
; 151  : 		
; 152  :     OALLocalAllocInit(allocationPool,sizeof(allocationPool));

  00008	e59f6460	 ldr         r6, [pc, #0x460]
  0000c	e3a01c02	 mov         r1, #2, 24
  00010	e1a00006	 mov         r0, r6
  00014	eb000000	 bl          OALLocalAllocInit

; 153  : 
; 154  :     // Get processor and companion chip versions
; 155  : 	g_CPUFamily = CPU_FAMILY_OMAP35XX;

  00018	e3a03000	 mov         r3, #0
  0001c	e5863200	 str         r3, [r6, #0x200]

; 156  :     CpuRevision = Get_CPUVersion();

  00020	eb000000	 bl          Get_CPUVersion
  00024	e1a07000	 mov         r7, r0

; 157  :     version = CPU_REVISION(CpuRevision);
; 158  :     g_CPUFamily = CPU_FAMILY(CpuRevision);

  00028	e1a03807	 mov         r3, r7, lsl #16
  0002c	e3a02312	 mov         r2, #0x12, 6
  00030	e1a03c23	 mov         r3, r3, lsr #24

; 159  : 
; 160  : 	// Set GPTIMER1 regs pointer
; 161  : 	pTimerRegs = OALPAtoUA(OMAP_GPTIMER1_REGS_PA);

  00034	e3a01000	 mov         r1, #0
  00038	e38209c6	 orr         r0, r2, #0xC6, 18
  0003c	e5863200	 str         r3, [r6, #0x200]
  00040	e20750ff	 and         r5, r7, #0xFF
  00044	eb000000	 bl          OALPAtoVA

; 162  : 	
; 163  : 	ConfigurePadArray(ebootPinMux_37XX);

  00048	e59f841c	 ldr         r8, [pc, #0x41C]
  0004c	e3a01c7f	 mov         r1, #0x7F, 24
  00050	e381a0ff	 orr         r10, r1, #0xFF
  00054	e2881008	 add         r1, r8, #8
  00058	e58d1000	 str         r1, [sp]
  0005c	e1a09000	 mov         r9, r0
  00060	e2881008	 add         r1, r8, #8
  00064	e59d8000	 ldr         r8, [sp]
  00068	e3a00cff	 mov         r0, #0xFF, 24
  0006c	e58d1004	 str         r1, [sp, #4]
  00070	e1a06001	 mov         r6, r1
  00074	e3a04000	 mov         r4, #0
  00078	e3a03000	 mov         r3, #0
  0007c	e3a02052	 mov         r2, #0x52
  00080	e380b0ff	 orr         r11, r0, #0xFF
  00084		 |$LL38@OEMPlatfor|
  00084	e0833008	 add         r3, r3, r8
  00088	e5933004	 ldr         r3, [r3, #4]
  0008c	e1a00002	 mov         r0, r2
  00090	e003100a	 and         r1, r3, r10
  00094	eb000000	 bl          SOCSetPadConfig
  00098	e2844001	 add         r4, r4, #1
  0009c	e1a03184	 mov         r3, r4, lsl #3
  000a0	e19320b6	 ldrh        r2, [r3, +r6]
  000a4	e152000b	 cmp         r2, r11
  000a8	1afffff5	 bne         |$LL38@OEMPlatfor|

; 164  : 	
; 165  : 	//Bootstrap message(1), Ray 131024
; 166  :     OALLog(L"ZEBEX Windows CE EBOOT for Z-2170P - Ray\r\nBuilt %S at %S\r\n", __DATE__, __TIME__ );  

  000ac	e59f23cc	 ldr         r2, [pc, #0x3CC]
  000b0	e59f13c4	 ldr         r1, [pc, #0x3C4]
  000b4	e59f03bc	 ldr         r0, [pc, #0x3BC]
  000b8	eb000000	 bl          NKDbgPrintfW

; 167  :     
; 168  : #if BUILDING_EBOOT_SD           //Bootstrap message(2), Ray
; 169  :     OALLog(L"Version: " BSP_EBLD_SD_VERSION_STRING L"\r\n");
; 170  : #else
; 171  : 	OALLog(L"Version: " BSP_EBLD_NAND_VERSION_STRING L"\r\n");

  000bc	e59f03b0	 ldr         r0, [pc, #0x3B0]
  000c0	eb000000	 bl          NKDbgPrintfW

; 172  : #endif
; 173  : 
; 174  :     // Soft reset GPTIMER1
; 175  :     OUTREG32(&pTimerRegs->TIOCP, SYSCONFIG_SOFTRESET);

  000c4	e3a03002	 mov         r3, #2
  000c8	e59f63a0	 ldr         r6, [pc, #0x3A0]
  000cc	e59f8398	 ldr         r8, [pc, #0x398]
  000d0	e5893010	 str         r3, [r9, #0x10]
  000d4		 |$LL6@OEMPlatfor|

; 176  :     // While until done
; 177  :     while ((INREG32(&pTimerRegs->TISTAT) & GPTIMER_TISTAT_RESETDONE) == 0)

  000d4	e5993014	 ldr         r3, [r9, #0x14]
  000d8	e3130001	 tst         r3, #1
  000dc	0afffffc	 beq         |$LL6@OEMPlatfor|

; 178  :     	;
; 179  :  
; 180  :     // Enable posted mode
; 181  :     OUTREG32(&pTimerRegs->TSICR, GPTIMER_TSICR_POSTED);

  000e0	e3a03004	 mov         r3, #4
  000e4	e5893040	 str         r3, [r9, #0x40]

; 182  :     // Start timer
; 183  :     OUTREG32(&pTimerRegs->TCLR, GPTIMER_TCLR_AR|GPTIMER_TCLR_ST);

  000e8	e3a03003	 mov         r3, #3

; 184  :     
; 185  : 	// Enable device clocks used by the bootloader
; 186  :     EnableDeviceClocks(OMAP_DEVICE_GPIO1,TRUE);

  000ec	e3a01001	 mov         r1, #1
  000f0	e3a00029	 mov         r0, #0x29
  000f4	e5893024	 str         r3, [r9, #0x24]
  000f8	eb000000	 bl          EnableDeviceClocks

; 187  :     EnableDeviceClocks(OMAP_DEVICE_GPIO2,TRUE);

  000fc	e3a01001	 mov         r1, #1
  00100	e3a0002d	 mov         r0, #0x2D
  00104	eb000000	 bl          EnableDeviceClocks

; 188  :     EnableDeviceClocks(OMAP_DEVICE_GPIO3,TRUE);

  00108	e3a01001	 mov         r1, #1
  0010c	e3a0002e	 mov         r0, #0x2E
  00110	eb000000	 bl          EnableDeviceClocks

; 189  :     EnableDeviceClocks(OMAP_DEVICE_GPIO4,TRUE);

  00114	e3a01001	 mov         r1, #1
  00118	e3a0002f	 mov         r0, #0x2F
  0011c	eb000000	 bl          EnableDeviceClocks

; 190  :     EnableDeviceClocks(OMAP_DEVICE_GPIO5,TRUE);

  00120	e3a01001	 mov         r1, #1
  00124	e3a00030	 mov         r0, #0x30
  00128	eb000000	 bl          EnableDeviceClocks

; 191  :     EnableDeviceClocks(OMAP_DEVICE_GPIO6,TRUE);

  0012c	e3a01001	 mov         r1, #1
  00130	e3a00031	 mov         r0, #0x31
  00134	eb000000	 bl          EnableDeviceClocks

; 192  :     
; 193  : 	EnableDeviceClocks(OMAP_DEVICE_MCSPI1,TRUE);

  00138	e3a01001	 mov         r1, #1
  0013c	e3a0000f	 mov         r0, #0xF
  00140	eb000000	 bl          EnableDeviceClocks

; 194  : 	EnableDeviceClocks(OMAP_DEVICE_UART1, TRUE); 

  00144	e3a01001	 mov         r1, #1
  00148	e3a0000a	 mov         r0, #0xA
  0014c	eb000000	 bl          EnableDeviceClocks

; 195  : 	
; 196  :     // configure i2c devices
; 197  :     OALI2CInit(OMAP_DEVICE_I2C1); // TPS65650_I2CCNTL

  00150	e3a0000c	 mov         r0, #0xC
  00154	eb000000	 bl          OALI2CInit

; 198  :     //OALI2CInit(OMAP_DEVICE_I2C2); // G-sensor for Z-2000
; 199  :     //OALI2CInit(OMAP_DEVICE_I2C3);   // BQ27510, Ray 131128 
; 200  :   
; 201  : 
; 202  :     GPIOInit();

  00158	eb000000	 bl          GPIOInit

; 203  :     // Note that T2 accesses must occur after I2C initialization
; 204  :     hTwl = TWLOpen();

  0015c	eb000000	 bl          TWLOpen
  00160	e1a09000	 mov         r9, r0

; 205  :     hGPIO = GPIOOpen(); 

  00164	eb000000	 bl          GPIOOpen

; 206  :    
; 207  :     //if( omap_mcspi_init() )
; 208  :     //	OALLog(L"omap_mcspi_init: success!!!\r\n");
; 209  :     	
; 210  :     // Clear Reset on ethernet controller        
; 211  :     //GPIOSetBit(hGPIO,LAN9115_RESET_GPIO);            
; 212  :     //GPIOSetMode(hGPIO, LAN9115_RESET_GPIO,GPIO_DIR_OUTPUT);
; 213  : 	// test GPIO 
; 214  : 	GPIOClrBit(hGPIO,15); // BT_EN

  00168	e3a0100f	 mov         r1, #0xF
  0016c	e1a04000	 mov         r4, r0
  00170	eb000000	 bl          GPIOClrBit

; 215  : 	GPIOSetMode(hGPIO, 15,GPIO_DIR_OUTPUT);

  00174	e3a02000	 mov         r2, #0
  00178	e3a0100f	 mov         r1, #0xF
  0017c	e1a00004	 mov         r0, r4
  00180	eb000000	 bl          GPIOSetMode

; 216  : 	GPIOClrBit(hGPIO,136); // VIBRATOR

  00184	e3a01088	 mov         r1, #0x88
  00188	e1a00004	 mov         r0, r4
  0018c	eb000000	 bl          GPIOClrBit

; 217  : 	GPIOSetMode(hGPIO, 136,GPIO_DIR_OUTPUT);

  00190	e3a02000	 mov         r2, #0
  00194	e3a01088	 mov         r1, #0x88
  00198	e1a00004	 mov         r0, r4
  0019c	eb000000	 bl          GPIOSetMode

; 218  :     GPIOClrBit(hGPIO,16); // WLAN_EN

  001a0	e3a01010	 mov         r1, #0x10
  001a4	e1a00004	 mov         r0, r4
  001a8	eb000000	 bl          GPIOClrBit

; 219  : 	GPIOSetMode(hGPIO, 16,GPIO_DIR_OUTPUT);

  001ac	e3a02000	 mov         r2, #0
  001b0	e3a01010	 mov         r1, #0x10
  001b4	e1a00004	 mov         r0, r4
  001b8	eb000000	 bl          GPIOSetMode

; 220  : 	//GPIOSetBit(hGPIO,15);     // test 
; 221  : 
; 222  :     GPIOClrBit(hGPIO, 155);                 

  001bc	e3a0109b	 mov         r1, #0x9B
  001c0	e1a00004	 mov         r0, r4
  001c4	eb000000	 bl          GPIOClrBit

; 223  :     GPIOSetMode(hGPIO, 155, GPIO_DIR_OUTPUT);           // Keypad_LED, Ray 131112 

  001c8	e3a02000	 mov         r2, #0
  001cc	e3a0109b	 mov         r1, #0x9B
  001d0	e1a00004	 mov         r0, r4
  001d4	eb000000	 bl          GPIOSetMode

; 224  :     GPIOClrBit(hGPIO, 160);                 

  001d8	e3a010a0	 mov         r1, #0xA0
  001dc	e1a00004	 mov         r0, r4
  001e0	eb000000	 bl          GPIOClrBit

; 225  :     GPIOSetMode(hGPIO, 160, GPIO_DIR_OUTPUT);           // BARCODE_LED, Ray 131227 

  001e4	e3a02000	 mov         r2, #0
  001e8	e3a010a0	 mov         r1, #0xA0
  001ec	e1a00004	 mov         r0, r4
  001f0	eb000000	 bl          GPIOSetMode

; 226  :     GPIOClrBit(hGPIO, 34);                  

  001f4	e3a01022	 mov         r1, #0x22
  001f8	e1a00004	 mov         r0, r4
  001fc	eb000000	 bl          GPIOClrBit

; 227  :     GPIOSetMode(hGPIO, 34, GPIO_DIR_OUTPUT);            // GREEN_LED, Ray 131227 

  00200	e3a02000	 mov         r2, #0
  00204	e3a01022	 mov         r1, #0x22
  00208	e1a00004	 mov         r0, r4
  0020c	eb000000	 bl          GPIOSetMode

; 228  :     GPIOClrBit(hGPIO, 140);                 

  00210	e3a0108c	 mov         r1, #0x8C
  00214	e1a00004	 mov         r0, r4
  00218	eb000000	 bl          GPIOClrBit

; 229  :     GPIOSetMode(hGPIO, 140, GPIO_DIR_OUTPUT);           // RED_LED, Ray 131227

  0021c	e3a02000	 mov         r2, #0
  00220	e3a0108c	 mov         r1, #0x8C
  00224	e1a00004	 mov         r0, r4
  00228	eb000000	 bl          GPIOSetMode

; 230  :     GPIOClrBit(hGPIO, 140);                 

  0022c	e3a0108c	 mov         r1, #0x8C
  00230	e1a00004	 mov         r0, r4
  00234	eb000000	 bl          GPIOClrBit

; 231  :     GPIOSetMode(hGPIO, 140, GPIO_DIR_OUTPUT);           // RED_LED, Ray 131227

  00238	e3a02000	 mov         r2, #0
  0023c	e3a0108c	 mov         r1, #0x8C
  00240	e1a00004	 mov         r0, r4
  00244	eb000000	 bl          GPIOSetMode

; 232  :     GPIOClrBit(hGPIO, 140);                 

  00248	e3a0108c	 mov         r1, #0x8C
  0024c	e1a00004	 mov         r0, r4
  00250	eb000000	 bl          GPIOClrBit

; 233  :     GPIOSetMode(hGPIO, 140, GPIO_DIR_OUTPUT);           // RED_LED, Ray 131227

  00254	e3a02000	 mov         r2, #0
  00258	e3a0108c	 mov         r1, #0x8C
  0025c	e1a00004	 mov         r0, r4
  00260	eb000000	 bl          GPIOSetMode

; 234  : 
; 235  :     GPIOClrBit(hGPIO,  EN_VIO_1V8_Z2170P);               

  00264	e3a01089	 mov         r1, #0x89
  00268	e1a00004	 mov         r0, r4
  0026c	eb000000	 bl          GPIOClrBit

; 236  :     GPIOSetMode(hGPIO, EN_VIO_1V8_Z2170P, GPIO_DIR_OUTPUT);      // Drive power 1.8, Ray 140109

  00270	e3a02000	 mov         r2, #0
  00274	e3a01089	 mov         r1, #0x89
  00278	e1a00004	 mov         r0, r4
  0027c	eb000000	 bl          GPIOSetMode

; 237  :     GPIOClrBit(hGPIO, EN_DC_3V3);               

  00280	e3a01017	 mov         r1, #0x17
  00284	e1a00004	 mov         r0, r4
  00288	eb000000	 bl          GPIOClrBit

; 238  :     GPIOSetMode(hGPIO, EN_DC_3V3 , GPIO_DIR_OUTPUT);           // Drive power 3.3, Ray 140109

  0028c	e3a02000	 mov         r2, #0
  00290	e3a01017	 mov         r1, #0x17
  00294	e1a00004	 mov         r0, r4
  00298	eb000000	 bl          GPIOSetMode

; 239  :     
; 240  :     GPIOSetMode(hGPIO, ENG_SET1_GPIO, GPIO_DIR_OUTPUT);  //barcode, Ray 131225     

  0029c	e3a02000	 mov         r2, #0
  002a0	e3a01098	 mov         r1, #0x98
  002a4	e1a00004	 mov         r0, r4
  002a8	eb000000	 bl          GPIOSetMode

; 241  :     GPIOSetBit(hGPIO, ENG_SET1_GPIO);

  002ac	e3a01098	 mov         r1, #0x98
  002b0	e1a00004	 mov         r0, r4
  002b4	eb000000	 bl          GPIOSetBit

; 242  :     GPIOSetMode(hGPIO, ENG_SET2_GPIO, GPIO_DIR_OUTPUT);       

  002b8	e3a02000	 mov         r2, #0
  002bc	e3a01099	 mov         r1, #0x99
  002c0	e1a00004	 mov         r0, r4
  002c4	eb000000	 bl          GPIOSetMode

; 243  :     GPIOSetBit(hGPIO, ENG_SET2_GPIO);

  002c8	e3a01099	 mov         r1, #0x99
  002cc	e1a00004	 mov         r0, r4
  002d0	eb000000	 bl          GPIOSetBit

; 244  : 
; 245  :     GPIOSetBit(hGPIO, EN_VIO_1V8_Z2170P); 

  002d4	e3a01089	 mov         r1, #0x89
  002d8	e1a00004	 mov         r0, r4
  002dc	eb000000	 bl          GPIOSetBit

; 246  :     GPIOSetBit(hGPIO, EN_DC_3V3 );

  002e0	e3a01017	 mov         r1, #0x17
  002e4	e1a00004	 mov         r0, r4
  002e8	eb000000	 bl          GPIOSetBit

; 247  :     
; 248  :     OALLog(L"Initial Barcode\r\n");

  002ec	e59f0174	 ldr         r0, [pc, #0x174]
  002f0	eb000000	 bl          NKDbgPrintfW

; 249  : 
; 250  :     /*GPIOClrBit(hGPIO, 184);               //I2C3_CLK, Ray 131129                  
; 251  :     GPIOSetMode(hGPIO, 184, GPIO_DIR_OUTPUT);
; 252  :     GPIOClrBit(hGPIO, 185);                 //I2C3_SDA, Ray 131129    
; 253  :     GPIOSetMode(hGPIO, 185, GPIO_DIR_OUTPUT);*/
; 254  :     //OALLog(L"\r\n >>>Set hGPIO: %x \r\n",hGPIO); 
; 255  :     
; 256  : 	HotKeyInit(hTwl);                       //HotKey Initial ,Ray

  002f4	e1a00009	 mov         r0, r9
  002f8	eb000000	 bl          HotKeyInit

; 257  :     ghTwl = hTwl;                           //assign give "ghTwl"           

  002fc	e59f3160	 ldr         r3, [pc, #0x160]

; 258  :     //OALLog(L"******hTwl: %X....\r\n", hTwl);      //address-1, Ray
; 259  : 
; 260  :     //Bootstrap message(3), Ray
; 261  :     OALLog(L"TI OMAP%x Version 0x%08x (%s)\r\n", CPU_ID(CpuRevision), CPU_REVISION(CpuRevision),        
; 262  :         version == CPU_FAMILY_35XX_REVISION_ES_1_0 ? L"ES1.0" :
; 263  :         version == CPU_FAMILY_35XX_REVISION_ES_2_0 ? L"ES2.0" :
; 264  :         version == CPU_FAMILY_35XX_REVISION_ES_2_1 ? L"ES2.1" :
; 265  :         version == CPU_FAMILY_35XX_REVISION_ES_2_0_CRC ? L"ES2.0, ID determined using CRC" :
; 266  :         version == CPU_FAMILY_35XX_REVISION_ES_2_1_CRC ? L"ES2.1, ID determined using CRC" :
; 267  :         version == CPU_FAMILY_35XX_REVISION_ES_3_0 ? L"ES3.0" :
; 268  :         version == CPU_FAMILY_35XX_REVISION_ES_3_1 ? L"ES3.1" : 
; 269  :         version == CPU_FAMILY_37XX_REVISION_ES_1_0? L"ES1.0" :
; 270  :         version == CPU_FAMILY_37XX_REVISION_ES_1_1? L"ES1.1" :
; 271  :         version == CPU_FAMILY_37XX_REVISION_ES_1_2? L"ES1.2" :
; 272  :         L"Unknown" );

  00300	e59f4158	 ldr         r4, [pc, #0x158]
  00304	e3550000	 cmp         r5, #0
  00308	e5839000	 str         r9, [r3]
  0030c	0a000013	 beq         |$LN44@OEMPlatfor|
  00310	e3550001	 cmp         r5, #1
  00314	059f3140	 ldreq       r3, [pc, #0x140]
  00318	0a000018	 beq         |$LN10@OEMPlatfor|
  0031c	e3550002	 cmp         r5, #2
  00320	059f3130	 ldreq       r3, [pc, #0x130]
  00324	0a000015	 beq         |$LN10@OEMPlatfor|
  00328	e3550003	 cmp         r5, #3
  0032c	059f3120	 ldreq       r3, [pc, #0x120]
  00330	0a000012	 beq         |$LN10@OEMPlatfor|
  00334	e3550004	 cmp         r5, #4
  00338	059f3110	 ldreq       r3, [pc, #0x110]
  0033c	0a00000f	 beq         |$LN10@OEMPlatfor|
  00340	e3550005	 cmp         r5, #5
  00344	059f3100	 ldreq       r3, [pc, #0x100]
  00348	0a00000c	 beq         |$LN10@OEMPlatfor|
  0034c	e3550006	 cmp         r5, #6
  00350	059f30f0	 ldreq       r3, [pc, #0xF0]
  00354	0a000009	 beq         |$LN10@OEMPlatfor|
  00358	e3550010	 cmp         r5, #0x10
  0035c	1a000001	 bne         |$LN13@OEMPlatfor|
  00360		 |$LN44@OEMPlatfor|
  00360	e1a03004	 mov         r3, r4
  00364	ea000005	 b           |$LN10@OEMPlatfor|
  00368		 |$LN13@OEMPlatfor|
  00368	e3550011	 cmp         r5, #0x11
  0036c	059f30bc	 ldreq       r3, [pc, #0xBC]
  00370	0a000002	 beq         |$LN10@OEMPlatfor|
  00374	e3550012	 cmp         r5, #0x12
  00378	059f30ac	 ldreq       r3, [pc, #0xAC]
  0037c	159f30a0	 ldrne       r3, [pc, #0xA0]
  00380		 |$LN10@OEMPlatfor|
  00380	e59f00bc	 ldr         r0, [pc, #0xBC]
  00384	e1a02005	 mov         r2, r5
  00388	e1a01827	 mov         r1, r7, lsr #16
  0038c	eb000000	 bl          NKDbgPrintfW

; 273  :         
; 274  :     /* Initialize Device Prefix */
; 275  :     if(g_CPUFamily == CPU_FAMILY_DM37XX)

  00390	e5963200	 ldr         r3, [r6, #0x200]
  00394	e3530001	 cmp         r3, #1

; 276  :     {
; 277  :         gDevice_prefix = BSP_DEVICE_37xx_PREFIX;

  00398	059f20a0	 ldreq       r2, [pc, #0xA0]
  0039c	0a000005	 beq         |$LN45@OEMPlatfor|

; 278  :     }
; 279  :     else if (g_CPUFamily == CPU_FAMILY_OMAP35XX)

  003a0	e5963200	 ldr         r3, [r6, #0x200]
  003a4	e3530000	 cmp         r3, #0

; 280  :     {
; 281  :         gDevice_prefix = BSP_DEVICE_35xx_PREFIX;
; 282  :     }
; 283  :     else
; 284  :     {
; 285  :         OALLog(L"INFO: UnKnown CPU family:%d....\r\n", g_CPUFamily);

  003a8	15961200	 ldrne       r1, [r6, #0x200]
  003ac	159f0088	 ldrne       r0, [pc, #0x88]
  003b0	1b000000	 blne        NKDbgPrintfW

; 286  :         gDevice_prefix = BSP_DEVICE_35xx_PREFIX;

  003b4	e59f207c	 ldr         r2, [pc, #0x7C]
  003b8		 |$LN45@OEMPlatfor|
  003b8	e59f3074	 ldr         r3, [pc, #0x74]

; 287  :     }
; 288  :     version = TWLReadIDCode(hTwl);

  003bc	e1a00009	 mov         r0, r9
  003c0	e5832000	 str         r2, [r3]
  003c4	eb000000	 bl          TWLReadIDCode
  003c8	e1b01000	 movs        r1, r0

; 289  : 
; 290  :     //Bootstrap message(4), Ray
; 291  :     OALLog(L"TPS659XX Version 0x%02x (%s)\r\n", version,
; 292  :         version == 0x00 ? L"ES1.0" : 
; 293  :         version == 0x10 ? L"ES1.1" : 
; 294  :         version == 0x20 ? L"ES1.2" : 
; 295  :         version == 0x30 ? L"ES1.3" : L"Unknown" );

  003cc	0a000008	 beq         |$LN30@OEMPlatfor|
  003d0	e3510010	 cmp         r1, #0x10
  003d4	059f4054	 ldreq       r4, [pc, #0x54]
  003d8	0a000005	 beq         |$LN30@OEMPlatfor|
  003dc	e3510020	 cmp         r1, #0x20
  003e0	059f4044	 ldreq       r4, [pc, #0x44]
  003e4	0a000002	 beq         |$LN30@OEMPlatfor|
  003e8	e3510030	 cmp         r1, #0x30
  003ec	059f4034	 ldreq       r4, [pc, #0x34]
  003f0	159f402c	 ldrne       r4, [pc, #0x2C]
  003f4		 |$LN30@OEMPlatfor|
  003f4	e59f0024	 ldr         r0, [pc, #0x24]
  003f8	e1a02004	 mov         r2, r4
  003fc	eb000000	 bl          NKDbgPrintfW

; 296  : 	
; 297  :     g_ecctype = (UCHAR)dwEbootECCtype;

  00400	e5982000	 ldr         r2, [r8]
  00404	e59f3010	 ldr         r3, [pc, #0x10]

; 298  : 
; 299  : 	//Bootstrap message(5), Ray
; 300  : 	//HotKeyFunction(hTwl);   // Function Locate is right? would to changes it.      
; 301  : 	//GPIOClrBit(hGPIO,15); // test high puls 20ms
; 302  :     // Done
; 303  :     return TRUE;

  00408	e3a00001	 mov         r0, #1
  0040c	e5c32000	 strb        r2, [r3]

; 304  : }

  00410	e28dd008	 add         sp, sp, #8
  00414	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00418	e12fff1e	 bx          lr
  0041c		 |$LN50@OEMPlatfor|
  0041c		 |$LN51@OEMPlatfor|
  0041c	00000000	 DCD         |g_ecctype|
  00420		 |$LN52@OEMPlatfor|
  00420	00000000	 DCD         |??_C@_1DO@MGHPPPEE@?$AAT?$AAP?$AAS?$AA6?$AA5?$AA9?$AAX?$AAX?$AA?5?$AAV?$AAe?$AAr?$AAs?$AAi?$AAo?$AAn?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA2?$AAx?$AA?5?$AA?$CI?$AA?$CF?$AAs?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00424		 |$LN53@OEMPlatfor|
  00424	00000000	 DCD         |??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@|
  00428		 |$LN54@OEMPlatfor|
  00428	00000000	 DCD         |??_C@_1M@OIJGKENB@?$AAE?$AAS?$AA1?$AA?4?$AA3?$AA?$AA@|
  0042c		 |$LN55@OEMPlatfor|
  0042c	00000000	 DCD         |??_C@_1M@FACKMDLE@?$AAE?$AAS?$AA1?$AA?4?$AA2?$AA?$AA@|
  00430		 |$LN56@OEMPlatfor|
  00430	00000000	 DCD         |??_C@_1M@ECJPGMFK@?$AAE?$AAS?$AA1?$AA?4?$AA1?$AA?$AA@|
  00434		 |$LN57@OEMPlatfor|
  00434	00000000	 DCD         |gDevice_prefix|
  00438		 |$LN58@OEMPlatfor|
  00438	00000000	 DCD         |??_C@_08DGJGOJCE@EVM3530?9?$AA@|
  0043c		 |$LN59@OEMPlatfor|
  0043c	00000000	 DCD         |??_C@_1EE@KGKCAFPP@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAU?$AAn?$AAK?$AAn?$AAo?$AAw?$AAn?$AA?5?$AAC?$AAP?$AAU?$AA?5?$AAf?$AAa?$AAm?$AAi?$AAl?$AAy?$AA?3?$AA?$CF?$AAd?$AA?4?$AA?4?$AA?4?$AA?4?$AA?$AN@|
  00440		 |$LN60@OEMPlatfor|
  00440	00000000	 DCD         |??_C@_07BFNEHID@Z2170P?9?$AA@|
  00444		 |$LN61@OEMPlatfor|
  00444	00000000	 DCD         |??_C@_1EA@CNLHEJHC@?$AAT?$AAI?$AA?5?$AAO?$AAM?$AAA?$AAP?$AA?$CF?$AAx?$AA?5?$AAV?$AAe?$AAr?$AAs?$AAi?$AAo?$AAn?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?5?$AA?$CI?$AA?$CF?$AAs?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00448		 |$LN62@OEMPlatfor|
  00448	00000000	 DCD         |??_C@_1M@LKGLCH@?$AAE?$AAS?$AA3?$AA?4?$AA1?$AA?$AA@|
  0044c		 |$LN63@OEMPlatfor|
  0044c	00000000	 DCD         |??_C@_1M@LIAGAMEC@?$AAE?$AAS?$AA3?$AA?4?$AA0?$AA?$AA@|
  00450		 |$LN64@OEMPlatfor|
  00450	00000000	 DCD         |??_C@_1DO@OPHFFOFA@?$AAE?$AAS?$AA2?$AA?4?$AA1?$AA?0?$AA?5?$AAI?$AAD?$AA?5?$AAd?$AAe?$AAt?$AAe?$AAr?$AAm?$AAi?$AAn?$AAe?$AAd?$AA?5?$AAu?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAC?$AAR?$AAC?$AA?$AA@|
  00454		 |$LN65@OEMPlatfor|
  00454	00000000	 DCD         |??_C@_1DO@OONAPHOG@?$AAE?$AAS?$AA2?$AA?4?$AA0?$AA?0?$AA?5?$AAI?$AAD?$AA?5?$AAd?$AAe?$AAt?$AAe?$AAr?$AAm?$AAi?$AAn?$AAe?$AAd?$AA?5?$AAu?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAC?$AAR?$AAC?$AA?$AA@|
  00458		 |$LN66@OEMPlatfor|
  00458	00000000	 DCD         |??_C@_1M@MMBAGLLJ@?$AAE?$AAS?$AA2?$AA?4?$AA1?$AA?$AA@|
  0045c		 |$LN67@OEMPlatfor|
  0045c	00000000	 DCD         |??_C@_1M@HEKMAMNM@?$AAE?$AAS?$AA2?$AA?4?$AA0?$AA?$AA@|
  00460		 |$LN68@OEMPlatfor|
  00460	00000000	 DCD         |??_C@_1M@PKCDALDP@?$AAE?$AAS?$AA1?$AA?4?$AA0?$AA?$AA@|
  00464		 |$LN69@OEMPlatfor|
  00464	00000000	 DCD         |ghTwl|
  00468		 |$LN70@OEMPlatfor|
  00468	00000000	 DCD         |??_C@_1CE@BJKKNCED@?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AA?5?$AAB?$AAa?$AAr?$AAc?$AAo?$AAd?$AAe?$AA?$AN?$AA?6?$AA?$AA@|
  0046c		 |$LN71@OEMPlatfor|
  0046c	00000000	 DCD         |dwEbootECCtype|
  00470		 |$LN72@OEMPlatfor|
  00470	00000000	 DCD         |?allocationPool@?1??OEMPlatformInit@@9@9|
  00474		 |$LN73@OEMPlatfor|
  00474	00000000	 DCD         |??_C@_1CC@DJCPIFGO@?$AAV?$AAe?$AAr?$AAs?$AAi?$AAo?$AAn?$AA?3?$AA?5?$AA0?$AA?4?$AA0?$AA?4?$AA1?$AA?$AN?$AA?6?$AA?$AA@|
  00478		 |$LN74@OEMPlatfor|
  00478	00000000	 DCD         |??_C@_1HG@KGFFNHHE@?$AAZ?$AAE?$AAB?$AAE?$AAX?$AA?5?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAC?$AAE?$AA?5?$AAE?$AAB?$AAO?$AAO?$AAT?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAZ?$AA?9?$AA2?$AA1?$AA7@|
  0047c		 |$LN75@OEMPlatfor|
  0047c	00000000	 DCD         |??_C@_0M@PEJDHBGP@Jan?5?59?52014?$AA@|
  00480		 |$LN76@OEMPlatfor|
  00480	00000000	 DCD         |??_C@_08KPKDLECG@18?321?304?$AA@|
  00484		 |$M48221|

			 ENDP  ; |OEMPlatformInit|

	EXPORT	|??_C@_1GG@GNNPKEFL@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAO?$AAE?$AAM?$AAP?$AAl?$AAa?$AAt?$AAf?$AAo?$AAr?$AAm?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?5?$AA?9?$AA?5?$AA?5?$AAD?$AAi?$AAs?$AAa?$AAb@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T48259| DCD	|$LN8@OEMPlatfor@2|
	DCD	0x40003c01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GG@GNNPKEFL@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAO?$AAE?$AAM?$AAP?$AAl?$AAa?$AAt?$AAf?$AAo?$AAr?$AAm?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?5?$AA?9?$AA?5?$AA?5?$AAD?$AAi?$AAs?$AAa?$AAb@| DCB "I"
	DCB	0x0, "N", 0x0, "F", 0x0, "O", 0x0, ":", 0x0, " ", 0x0, "O"
	DCB	0x0, "E", 0x0, "M", 0x0, "P", 0x0, "l", 0x0, "a", 0x0, "t"
	DCB	0x0, "f", 0x0, "o", 0x0, "r", 0x0, "m", 0x0, "D", 0x0, "e"
	DCB	0x0, "i", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, " ", 0x0, "-"
	DCB	0x0, " ", 0x0, " ", 0x0, "D", 0x0, "i", 0x0, "s", 0x0, "a"
	DCB	0x0, "b", 0x0, "l", 0x0, "e", 0x0, " ", 0x0, "d", 0x0, "e"
	DCB	0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, " ", 0x0, "c"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, "s", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMPlatformDeinit| PROC

; 311  : {

  00000		 |$LN8@OEMPlatfor@2|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M48256|
  00004	e3a03312	 mov         r3, #0x12, 6

; 312  :     OMAP_GPTIMER_REGS *pTimerRegs = OALPAtoUA(OMAP_GPTIMER1_REGS_PA);

  00008	e38309c6	 orr         r0, r3, #0xC6, 18
  0000c	e3a01000	 mov         r1, #0
  00010	eb000000	 bl          OALPAtoVA

; 313  : 
; 314  :     // Soft reset GPTIMER
; 315  :     OUTREG32(&pTimerRegs->TIOCP, SYSCONFIG_SOFTRESET);

  00014	e3a03002	 mov         r3, #2
  00018	e5803010	 str         r3, [r0, #0x10]
  0001c		 |$LL2@OEMPlatfor@2|

; 316  :     // While until done
; 317  :     while ((INREG32(&pTimerRegs->TISTAT) & GPTIMER_TISTAT_RESETDONE) == 0);

  0001c	e5903014	 ldr         r3, [r0, #0x14]
  00020	e3130001	 tst         r3, #1
  00024	0afffffc	 beq         |$LL2@OEMPlatfor@2|

; 318  : 
; 319  : 	// Disable device clocks that were used by the bootloader
; 320  : 	OALLog(L"INFO: OEMPlatformDeinit -  Disable device clocks\r\n");

  00028	e59f00bc	 ldr         r0, [pc, #0xBC]
  0002c	eb000000	 bl          NKDbgPrintfW

; 321  :     EnableDeviceClocks(OMAP_DEVICE_GPIO1, FALSE);

  00030	e3a01000	 mov         r1, #0
  00034	e3a00029	 mov         r0, #0x29
  00038	eb000000	 bl          EnableDeviceClocks

; 322  :     EnableDeviceClocks(OMAP_DEVICE_GPIO2, FALSE);

  0003c	e3a01000	 mov         r1, #0
  00040	e3a0002d	 mov         r0, #0x2D
  00044	eb000000	 bl          EnableDeviceClocks

; 323  :     EnableDeviceClocks(OMAP_DEVICE_GPIO3, FALSE);

  00048	e3a01000	 mov         r1, #0
  0004c	e3a0002e	 mov         r0, #0x2E
  00050	eb000000	 bl          EnableDeviceClocks

; 324  :     EnableDeviceClocks(OMAP_DEVICE_GPIO4, FALSE);

  00054	e3a01000	 mov         r1, #0
  00058	e3a0002f	 mov         r0, #0x2F
  0005c	eb000000	 bl          EnableDeviceClocks

; 325  :     EnableDeviceClocks(OMAP_DEVICE_GPIO5, FALSE);

  00060	e3a01000	 mov         r1, #0
  00064	e3a00030	 mov         r0, #0x30
  00068	eb000000	 bl          EnableDeviceClocks

; 326  :     EnableDeviceClocks(OMAP_DEVICE_GPIO6, FALSE);

  0006c	e3a01000	 mov         r1, #0
  00070	e3a00031	 mov         r0, #0x31
  00074	eb000000	 bl          EnableDeviceClocks

; 327  :     EnableDeviceClocks(OMAP_DEVICE_MCSPI1, FALSE);

  00078	e3a01000	 mov         r1, #0
  0007c	e3a0000f	 mov         r0, #0xF
  00080	eb000000	 bl          EnableDeviceClocks

; 328  :     EnableDeviceClocks(OMAP_DEVICE_GPTIMER2, FALSE);

  00084	e3a01000	 mov         r1, #0
  00088	e3a00035	 mov         r0, #0x35
  0008c	eb000000	 bl          EnableDeviceClocks

; 329  :     EnableDeviceClocks(OMAP_DEVICE_UART1, FALSE);

  00090	e3a01000	 mov         r1, #0
  00094	e3a0000a	 mov         r0, #0xA
  00098	eb000000	 bl          EnableDeviceClocks

; 330  : 	EnableDeviceClocks(OMAP_DEVICE_UART2, FALSE);

  0009c	e3a01000	 mov         r1, #0
  000a0	e3a0000b	 mov         r0, #0xB
  000a4	eb000000	 bl          EnableDeviceClocks

; 331  :     EnableDeviceClocks(OMAP_DEVICE_UART3, FALSE);

  000a8	e3a01000	 mov         r1, #0
  000ac	e3a0003d	 mov         r0, #0x3D
  000b0	eb000000	 bl          EnableDeviceClocks

; 332  :     EnableDeviceClocks(OMAP_DEVICE_MMC1, FALSE);

  000b4	e3a01000	 mov         r1, #0
  000b8	e3a00015	 mov         r0, #0x15
  000bc	eb000000	 bl          EnableDeviceClocks

; 333  :     EnableDeviceClocks(OMAP_DEVICE_MMC2, FALSE);

  000c0	e3a01000	 mov         r1, #0
  000c4	e3a00016	 mov         r0, #0x16
  000c8	eb000000	 bl          EnableDeviceClocks

; 334  :     EnableDeviceClocks(OMAP_DEVICE_I2C1, FALSE);

  000cc	e3a01000	 mov         r1, #0
  000d0	e3a0000c	 mov         r0, #0xC
  000d4	eb000000	 bl          EnableDeviceClocks

; 335  :     //EnableDeviceClocks(OMAP_DEVICE_I2C2,FALSE);
; 336  :     EnableDeviceClocks(OMAP_DEVICE_I2C3, FALSE); 

  000d8	e3a01000	 mov         r1, #0
  000dc	e3a0000e	 mov         r0, #0xE
  000e0	eb000000	 bl          EnableDeviceClocks

; 337  : }

  000e4	e49de004	 ldr         lr, [sp], #4
  000e8	e12fff1e	 bx          lr
  000ec		 |$LN9@OEMPlatfor@2|
  000ec		 |$LN10@OEMPlatfor@2|
  000ec	00000000	 DCD         |??_C@_1GG@GNNPKEFL@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAO?$AAE?$AAM?$AAP?$AAl?$AAa?$AAt?$AAf?$AAo?$AAr?$AAm?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?5?$AA?9?$AA?5?$AA?5?$AAD?$AAi?$AAs?$AAa?$AAb@|
  000f0		 |$M48257|

			 ENDP  ; |OEMPlatformDeinit|

	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|OEMMultiBinNotify|
	EXPORT	|??_C@_1CK@FDDKFJJE@?$AA?9?$AAO?$AAE?$AAM?$AAM?$AAu?$AAl?$AAt?$AAi?$AAB?$AAi?$AAn?$AAN?$AAo?$AAt?$AAi?$AAf?$AAy?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CG@JHMEBKAH@?$AAS?$AAp?$AAi?$AAn?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAe?$AAv?$AAe?$AAr?$AA?4?$AA?4?$AA?4?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DC@FNKKGJOD@?$AAD?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AAt?$AAy?$AAp?$AAe?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DM@CJMKOEPD@?$AAU?$AAn?$AAs?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAe?$AAd?$AA?5?$AAd?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AAe?$AAd?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_08CMMENMPK@logo?4nb0?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FC@BJIBFLEA@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAM?$AAu?$AAl?$AAt?$AAi?$AAX?$AAI?$AAP?$AA?5?$AAi?$AAm?$AAa?$AAg?$AAe?$AA?5?$AAi?$AAs?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAu?$AAp@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GG@NLHBBJNL@?$AA?$FL?$AA?$CF?$AAd?$AA?$FN?$AA?3?$AA?5?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?5?$AA?5?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$DN?$AA0?$AAx?$AA?$CF@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DK@OFMGKCPE@?$AAD?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AAi?$AAn?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?3?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HM@MNPMBDFE@?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9@| [ DATA ] ; `string'
	IMPORT	|dpCurSettings|
	IMPORT	|OALVAtoPA|
	IMPORT	|__GSHandlerCheck|
	IMPORT	|__security_cookie|
	IMPORT	|strncmp|
	IMPORT	|memset|
	IMPORT	|__security_check_cookie|

  00000			 AREA	 |.pdata|, PDATA
|$T48298| DCD	|$LN43@OEMMultiBi|
	DCD	0xc0009702

  00000			 AREA	 |.xdata|, DATA
|$T48294| DCD	0xffffffdc

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CK@FDDKFJJE@?$AA?9?$AAO?$AAE?$AAM?$AAM?$AAu?$AAl?$AAt?$AAi?$AAB?$AAi?$AAn?$AAN?$AAo?$AAt?$AAi?$AAf?$AAy?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "M", 0x0, "u", 0x0, "l"
	DCB	0x0, "t", 0x0, "i", 0x0, "B", 0x0, "i", 0x0, "n", 0x0, "N"
	DCB	0x0, "o", 0x0, "t", 0x0, "i", 0x0, "f", 0x0, "y", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CG@JHMEBKAH@?$AAS?$AAp?$AAi?$AAn?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAe?$AAv?$AAe?$AAr?$AA?4?$AA?4?$AA?4?$AA?$AN?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "p", 0x0, "i", 0x0, "n", 0x0, " ", 0x0, "f", 0x0, "o"
	DCB	0x0, "r", 0x0, " ", 0x0, "e", 0x0, "v", 0x0, "e", 0x0, "r"
	DCB	0x0, ".", 0x0, ".", 0x0, ".", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DC@FNKKGJOD@?$AAD?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AAt?$AAy?$AAp?$AAe?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "D"
	DCB	0x0, "o", 0x0, "w", 0x0, "n", 0x0, "l", 0x0, "o", 0x0, "a"
	DCB	0x0, "d", 0x0, " ", 0x0, "f", 0x0, "i", 0x0, "l", 0x0, "e"
	DCB	0x0, " ", 0x0, "t", 0x0, "y", 0x0, "p", 0x0, "e", 0x0, ":"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@CJMKOEPD@?$AAU?$AAn?$AAs?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAe?$AAd?$AA?5?$AAd?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AAe?$AAd?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?$AN?$AA?6?$AA?$AA@| DCB "U"
	DCB	0x0, "n", 0x0, "s", 0x0, "u", 0x0, "p", 0x0, "p", 0x0, "o"
	DCB	0x0, "r", 0x0, "t", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "d"
	DCB	0x0, "o", 0x0, "w", 0x0, "n", 0x0, "l", 0x0, "o", 0x0, "a"
	DCB	0x0, "d", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "f", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_08CMMENMPK@logo?4nb0?$AA@| DCB "logo.nb0", 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FC@BJIBFLEA@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAM?$AAu?$AAl?$AAt?$AAi?$AAX?$AAI?$AAP?$AA?5?$AAi?$AAm?$AAa?$AAg?$AAe?$AA?5?$AAi?$AAs?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAu?$AAp@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "M", 0x0, "u", 0x0, "l", 0x0, "t", 0x0, "i", 0x0, "X"
	DCB	0x0, "I", 0x0, "P", 0x0, " ", 0x0, "i", 0x0, "m", 0x0, "a"
	DCB	0x0, "g", 0x0, "e", 0x0, " ", 0x0, "i", 0x0, "s", 0x0, " "
	DCB	0x0, "n", 0x0, "o", 0x0, "t", 0x0, " ", 0x0, "s", 0x0, "u"
	DCB	0x0, "p", 0x0, "p", 0x0, "o", 0x0, "r", 0x0, "t", 0x0, "e"
	DCB	0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GG@NLHBBJNL@?$AA?$FL?$AA?$CF?$AAd?$AA?$FN?$AA?3?$AA?5?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?5?$AA?5?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$DN?$AA0?$AAx?$AA?$CF@| DCB "["
	DCB	0x0, "%", 0x0, "d", 0x0, "]", 0x0, ":", 0x0, " ", 0x0, "A"
	DCB	0x0, "d", 0x0, "d", 0x0, "r", 0x0, "e", 0x0, "s", 0x0, "s"
	DCB	0x0, "=", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "x", 0x0, " ", 0x0, " ", 0x0, "L", 0x0, "e", 0x0, "n"
	DCB	0x0, "g", 0x0, "t", 0x0, "h", 0x0, "=", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, " ", 0x0, " "
	DCB	0x0, "S", 0x0, "a", 0x0, "v", 0x0, "e", 0x0, "=", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DK@OFMGKCPE@?$AAD?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AAi?$AAn?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?3?$AA?$AN?$AA?6?$AA?$AA@| DCB "D"
	DCB	0x0, "o", 0x0, "w", 0x0, "n", 0x0, "l", 0x0, "o", 0x0, "a"
	DCB	0x0, "d", 0x0, " ", 0x0, "f", 0x0, "i", 0x0, "l", 0x0, "e"
	DCB	0x0, " ", 0x0, "i", 0x0, "n", 0x0, "f", 0x0, "o", 0x0, "r"
	DCB	0x0, "m", 0x0, "a", 0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n"
	DCB	0x0, ":", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HM@MNPMBDFE@?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9@| DCB "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T48294|

  00008		 |OEMMultiBinNotify| PROC

; 821  : {

  00008		 |$LN43@OEMMultiBi|
  00008	e92d47f0	 stmdb       sp!, {r4 - r10, lr}
  0000c	e24ddf43	 sub         sp, sp, #0x43, 30
  00010		 |$M48295|
  00010	e1a06000	 mov         r6, r0
  00014	e59f3244	 ldr         r3, [pc, #0x244]
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3108	 str         r3, [sp, #0x108]
  00020	e3a03102	 mov         r3, #2, 2

; 822  :     BOOL rc = FALSE;
; 823  :     UINT32 base = OALVAtoPA((UCHAR*)IMAGE_WINCE_CODE_CA);

  00024	e3830a02	 orr         r0, r3, #2, 20
  00028	eb000000	 bl          OALVAtoPA
  0002c	e1a0a000	 mov         r10, r0

; 824  :     UINT32 start, length;
; 825  :     UINT32 ix;
; 826  : 
; 827  :     //OALMSG(OAL_INFO, (L"+OEMMultiBinNotify(0x%08x -> %d)\r\n", pInfo, pInfo->dwNumRegions));
; 828  :     OALMSG(1, (L"Download file information:\r\n"));

  00030	e59f0224	 ldr         r0, [pc, #0x224]
  00034	eb000000	 bl          NKDbgPrintfW

; 829  :     OALMSG(1, (L"-----------------------------------------------------------\r\n"));

  00038	e59f0210	 ldr         r0, [pc, #0x210]
  0003c	eb000000	 bl          NKDbgPrintfW

; 830  : 
; 831  :     // Copy information to EBOOT structure and set also save address
; 832  :     g_eboot.numRegions = pInfo->dwNumRegions;

  00040	e59f5210	 ldr         r5, [pc, #0x210]
  00044	e5963000	 ldr         r3, [r6]

; 833  :     for (ix = 0; ix < pInfo->dwNumRegions; ix++)

  00048	e3a09000	 mov         r9, #0
  0004c	e5853008	 str         r3, [r5, #8]
  00050	e5963000	 ldr         r3, [r6]
  00054	e3530000	 cmp         r3, #0
  00058	9a000014	 bls         |$LN22@OEMMultiBi|

; 834  : 	{
; 835  :         g_eboot.region[ix].start = pInfo->Region[ix].dwRegionStart;

  0005c	e1a07005	 mov         r7, r5
  00060	e1a08006	 mov         r8, r6
  00064		 |$LL24@OEMMultiBi|
  00064	e5983004	 ldr         r3, [r8, #4]

; 836  :         g_eboot.region[ix].length = pInfo->Region[ix].dwRegionLength;
; 837  :         g_eboot.region[ix].base = base;
; 838  :         base += g_eboot.region[ix].length;
; 839  :         OALMSG(1, (L"[%d]: Address=0x%08x  Length=0x%08x  Save=0x%08x\r\n",
; 840  :             ix, g_eboot.region[ix].start, g_eboot.region[ix].length,g_eboot.region[ix].base));

  00068	e59f01e4	 ldr         r0, [pc, #0x1E4]
  0006c	e1a0e00a	 mov         lr, r10
  00070	e5873010	 str         r3, [r7, #0x10]
  00074	e5983008	 ldr         r3, [r8, #8]
  00078	e5972010	 ldr         r2, [r7, #0x10]
  0007c	e1a01009	 mov         r1, r9
  00080	e1a04003	 mov         r4, r3
  00084	e587a018	 str         r10, [r7, #0x18]
  00088	e08aa004	 add         r10, r10, r4
  0008c	e5873014	 str         r3, [r7, #0x14]
  00090	e58de000	 str         lr, [sp]
  00094	eb000000	 bl          NKDbgPrintfW
  00098	e5963000	 ldr         r3, [r6]
  0009c	e2899001	 add         r9, r9, #1
  000a0	e2888f43	 add         r8, r8, #0x43, 30
  000a4	e1590003	 cmp         r9, r3
  000a8	e287700c	 add         r7, r7, #0xC
  000ac	3affffec	 bcc         |$LL24@OEMMultiBi|
  000b0		 |$LN22@OEMMultiBi|

; 841  : 	}
; 842  :     OALMSG(1, (L"-----------------------------------------------------------\r\n"));

  000b0	e59f0198	 ldr         r0, [pc, #0x198]
  000b4	eb000000	 bl          NKDbgPrintfW

; 843  : 
; 844  : #ifndef IMGMULTIXIP
; 845  : 
; 846  :     //Determine type of image downloaded
; 847  :     if (g_eboot.numRegions > 1) 

  000b8	e5953008	 ldr         r3, [r5, #8]
  000bc	e3530001	 cmp         r3, #1
  000c0	9a000005	 bls         |$LN21@OEMMultiBi|

; 848  :     {
; 849  :         OALMSG(OAL_ERROR, (L"ERROR: MultiXIP image is not supported\r\n"));

  000c4	e59f3178	 ldr         r3, [pc, #0x178]
  000c8	e5933440	 ldr         r3, [r3, #0x440]
  000cc	e3130001	 tst         r3, #1
  000d0	0a000048	 beq         |$LN36@OEMMultiBi|
  000d4	e59f0170	 ldr         r0, [pc, #0x170]

; 850  :         goto cleanUp;

  000d8	ea000045	 b           |$LN38@OEMMultiBi|
  000dc		 |$LN21@OEMMultiBi|

; 851  :     }
; 852  : #endif
; 853  : 
; 854  :     base = g_eboot.region[0].base;
; 855  :     start = g_eboot.region[0].start;

  000dc	e5951010	 ldr         r1, [r5, #0x10]
  000e0	e3a03101	 mov         r3, #1, 2

; 856  :     length = g_eboot.region[0].length; 
; 857  :     
; 858  :     if (start == IMAGE_XLDR_CODE_PA)

  000e4	e3833602	 orr         r3, r3, #2, 12
  000e8	e1510003	 cmp         r1, r3
  000ec	e5950018	 ldr         r0, [r5, #0x18]
  000f0	e5954014	 ldr         r4, [r5, #0x14]

; 859  : 	{
; 860  :         g_eboot.type = DOWNLOAD_TYPE_XLDR;

  000f4	03a03003	 moveq       r3, #3
  000f8	0a00000e	 beq         |$LN40@OEMMultiBi|

; 861  :         memset(OALPAtoCA(base), 0xFF, length);

  000fc	e3a03487	 mov         r3, #0x87, 8

; 862  : 	} 
; 863  :     else if (start == IMAGE_EBOOT_CODE_CA)

  00100	e383360e	 orr         r3, r3, #0xE, 12
  00104	e1510003	 cmp         r1, r3

; 864  : 	{
; 865  :         g_eboot.type = DOWNLOAD_TYPE_EBOOT;

  00108	03a03004	 moveq       r3, #4
  0010c	0a000009	 beq         |$LN40@OEMMultiBi|

; 866  :         memset(OALPAtoCA(base), 0xFF, length);

  00110	e3a03103	 mov         r3, #3, 2

; 867  : 	}
; 868  :     else if (start == (IMAGE_WINCE_CODE_CA + NAND_ROMOFFSET))

  00114	e3833a02	 orr         r3, r3, #2, 20
  00118	e1510003	 cmp         r1, r3

; 869  : 	{
; 870  :         g_eboot.type = DOWNLOAD_TYPE_FLASHNAND;

  0011c	03a03006	 moveq       r3, #6
  00120	0a000004	 beq         |$LN40@OEMMultiBi|

; 871  :         memset(OALPAtoCA(base), 0xFF, length);

  00124	e3a0320e	 mov         r3, #0xE, 4

; 872  : 	} 
; 873  : #ifdef IMGMULTIXIP
; 874  :     else if (start == (IMAGE_WINCE_EXT_CA))
; 875  : 	{
; 876  :         g_eboot.type = DOWNLOAD_TYPE_EXT;
; 877  :         memset(OALPAtoCA(base), 0xFF, length);
; 878  : 	} 
; 879  : #endif	
; 880  :     else if (start == (IMAGE_WINCE_CODE_CA + NOR_ROMOFFSET))

  00128	e3833a02	 orr         r3, r3, #2, 20
  0012c	e1510003	 cmp         r1, r3
  00130	1a000007	 bne         |$LN14@OEMMultiBi|

; 881  : 	{
; 882  :         g_eboot.type = DOWNLOAD_TYPE_FLASHNOR;

  00134	e3a03007	 mov         r3, #7
  00138		 |$LN40@OEMMultiBi|

; 883  :         memset(OALPAtoCA(base), 0xFF, length);

  00138	e3a01001	 mov         r1, #1
  0013c	e5853004	 str         r3, [r5, #4]
  00140	eb000000	 bl          OALPAtoVA
  00144	e1a02004	 mov         r2, r4
  00148	e3a010ff	 mov         r1, #0xFF
  0014c	eb000000	 bl          memset
  00150	ea00002d	 b           |$LN4@OEMMultiBi|
  00154		 |$LN14@OEMMultiBi|

; 884  : 	} 
; 885  : 	else if (start == 0) // Probably a NB0 file, let's fint out

  00154	e3510000	 cmp         r1, #0
  00158	1a000029	 bne         |$LN12@OEMMultiBi|

; 886  : 	{
; 887  : 		// Convert the file name to lower case
; 888  : 		CHAR szFileName[MAX_PATH];
; 889  : 		int i = 0;
; 890  : 		int fileExtPos = 0;
; 891  : 
; 892  : 		while ((pInfo->Region[0].szFileName[i] != '\0') && (i < MAX_PATH))

  0015c	e1d630dc	 ldrsb       r3, [r6, #0xC]
  00160	e3a00000	 mov         r0, #0
  00164	e3530000	 cmp         r3, #0
  00168	0a00000f	 beq         |$LN37@OEMMultiBi|
  0016c	e28d3004	 add         r3, sp, #4
  00170	e0431006	 sub         r1, r3, r6
  00174	e1a02006	 mov         r2, r6
  00178		 |$LL11@OEMMultiBi|
  00178	e3500f41	 cmp         r0, #0x41, 30
  0017c	aa00000a	 bge         |$LN37@OEMMultiBi|

; 893  : 		{
; 894  : 			if((pInfo->Region[0].szFileName[i] >= 'A') && (pInfo->Region[0].szFileName[i] <= 'Z')) 

  00180	e1d230dc	 ldrsb       r3, [r2, #0xC]
  00184	e3530041	 cmp         r3, #0x41
  00188	ba000001	 blt         |$LN9@OEMMultiBi|
  0018c	e353005a	 cmp         r3, #0x5A

; 895  : 			{
; 896  : 				szFileName[i] = (pInfo->Region[0].szFileName[i] - 'A' + 'a'); 

  00190	d2833020	 addle       r3, r3, #0x20
  00194		 |$LN9@OEMMultiBi|

; 897  : 			}
; 898  : 			else
; 899  : 			{
; 900  : 				szFileName[i] = pInfo->Region[0].szFileName[i];

  00194	e7c13002	 strb        r3, [r1, +r2]

; 901  : 			}
; 902  : 
; 903  : 			// Keep track of file extension position
; 904  : 			if (szFileName[i] == '.')
; 905  : 			{
; 906  : 				fileExtPos = i;
; 907  : 			}
; 908  : 			i++;

  00198	e2822001	 add         r2, r2, #1
  0019c	e1d230dc	 ldrsb       r3, [r2, #0xC]
  001a0	e2800001	 add         r0, r0, #1
  001a4	e3530000	 cmp         r3, #0
  001a8	1afffff2	 bne         |$LL11@OEMMultiBi|
  001ac		 |$LN37@OEMMultiBi|

; 909  : 		}
; 910  : 
; 911  : 		// Copy string terminator as well
; 912  : 		szFileName[i] = pInfo->Region[0].szFileName[i];

  001ac	e0863000	 add         r3, r6, r0
  001b0	e1d320dc	 ldrsb       r2, [r3, #0xC]

; 913  : 
; 914  : 		// Check if we support this file
; 915  : 		if (strncmp(szFileName, LOGO_NB0_FILE, LOGO_NB0_FILE_LEN) == 0)

  001b4	e59f108c	 ldr         r1, [pc, #0x8C]
  001b8	e28d3004	 add         r3, sp, #4
  001bc	e7c02003	 strb        r2, [r0, +r3]
  001c0	e3a02008	 mov         r2, #8
  001c4	e28d0004	 add         r0, sp, #4
  001c8	eb000000	 bl          strncmp
  001cc	e3500000	 cmp         r0, #0

; 916  : 		{
; 917  : 			// Remap the start address to the correct NAND location of the logo
; 918  : 			g_eboot.region[0].start = IMAGE_XLDR_BOOTSEC_NAND_SIZE + IMAGE_EBOOT_BOOTSEC_NAND_SIZE;

  001d0	03a03703	 moveq       r3, #3, 14
  001d4	05853010	 streq       r3, [r5, #0x10]

; 919  : 			g_eboot.type = DOWNLOAD_TYPE_LOGO;

  001d8	03a03008	 moveq       r3, #8
  001dc	0a000009	 beq         |$LN39@OEMMultiBi|

; 920  : 		}
; 921  : 		else
; 922  : 		{
; 923  : 		    OALMSG(OAL_ERROR, (L"Unsupported downloaded file\r\n"));

  001e0	e59f305c	 ldr         r3, [pc, #0x5C]
  001e4	e5933440	 ldr         r3, [r3, #0x440]
  001e8	e3130001	 tst         r3, #1
  001ec	0a000001	 beq         |$LN36@OEMMultiBi|
  001f0	e59f0048	 ldr         r0, [pc, #0x48]
  001f4		 |$LN38@OEMMultiBi|
  001f4	eb000000	 bl          NKDbgPrintfW
  001f8		 |$LN36@OEMMultiBi|

; 933  :     
; 934  :     rc = TRUE;
; 935  : 
; 936  : cleanUp:
; 937  :     if (!rc) 
; 938  : 	{
; 939  :         OALMSG(1, (L"Spin for ever...\r\n"));

  001f8	e59f003c	 ldr         r0, [pc, #0x3C]
  001fc	eb000000	 bl          NKDbgPrintfW
  00200		 |$LL2@OEMMultiBi|

; 940  :         for(;;);

  00200	eafffffe	 b           |$LL2@OEMMultiBi|
  00204		 |$LN12@OEMMultiBi|

; 924  : 			goto cleanUp;
; 925  : 		}
; 926  : 	}
; 927  :     else 
; 928  : 	{
; 929  :         g_eboot.type = DOWNLOAD_TYPE_RAM; // 1

  00204	e3a03001	 mov         r3, #1
  00208		 |$LN39@OEMMultiBi|
  00208	e5853004	 str         r3, [r5, #4]
  0020c		 |$LN4@OEMMultiBi|
  0020c	e5951004	 ldr         r1, [r5, #4]

; 930  : 	}
; 931  : 
; 932  :     OALMSG(1, (L"Download file type: %d\r\n", g_eboot.type));

  00210	e59f0020	 ldr         r0, [pc, #0x20]
  00214	eb000000	 bl          NKDbgPrintfW

; 941  : 	}
; 942  :     OALMSG(1, (L"-OEMMultiBinNotify\r\n"));

  00218	e59f0014	 ldr         r0, [pc, #0x14]
  0021c		 |$cleanUp$47929|
  0021c	eb000000	 bl          NKDbgPrintfW
  00220	e59d0108	 ldr         r0, [sp, #0x108]
  00224	eb000000	 bl          __security_check_cookie

; 943  : }

  00228	e28ddf43	 add         sp, sp, #0x43, 30
  0022c	e8bd47f0	 ldmia       sp!, {r4 - r10, lr}
  00230	e12fff1e	 bx          lr
  00234		 |$LN44@OEMMultiBi|
  00234		 |$LN45@OEMMultiBi|
  00234	00000000	 DCD         |??_C@_1CK@FDDKFJJE@?$AA?9?$AAO?$AAE?$AAM?$AAM?$AAu?$AAl?$AAt?$AAi?$AAB?$AAi?$AAn?$AAN?$AAo?$AAt?$AAi?$AAf?$AAy?$AA?$AN?$AA?6?$AA?$AA@|
  00238		 |$LN46@OEMMultiBi|
  00238	00000000	 DCD         |??_C@_1DC@FNKKGJOD@?$AAD?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AAt?$AAy?$AAp?$AAe?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  0023c		 |$LN47@OEMMultiBi|
  0023c	00000000	 DCD         |??_C@_1CG@JHMEBKAH@?$AAS?$AAp?$AAi?$AAn?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAe?$AAv?$AAe?$AAr?$AA?4?$AA?4?$AA?4?$AA?$AN?$AA?6?$AA?$AA@|
  00240		 |$LN48@OEMMultiBi|
  00240	00000000	 DCD         |??_C@_1DM@CJMKOEPD@?$AAU?$AAn?$AAs?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAe?$AAd?$AA?5?$AAd?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AAe?$AAd?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?$AN?$AA?6?$AA?$AA@|
  00244		 |$LN49@OEMMultiBi|
  00244	00000000	 DCD         |dpCurSettings|
  00248		 |$LN50@OEMMultiBi|
  00248	00000000	 DCD         |??_C@_08CMMENMPK@logo?4nb0?$AA@|
  0024c		 |$LN51@OEMMultiBi|
  0024c	00000000	 DCD         |??_C@_1FC@BJIBFLEA@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAM?$AAu?$AAl?$AAt?$AAi?$AAX?$AAI?$AAP?$AA?5?$AAi?$AAm?$AAa?$AAg?$AAe?$AA?5?$AAi?$AAs?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAu?$AAp@|
  00250		 |$LN52@OEMMultiBi|
  00250	00000000	 DCD         |??_C@_1HM@MNPMBDFE@?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9@|
  00254		 |$LN53@OEMMultiBi|
  00254	00000000	 DCD         |??_C@_1GG@NLHBBJNL@?$AA?$FL?$AA?$CF?$AAd?$AA?$FN?$AA?3?$AA?5?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?5?$AA?5?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$DN?$AA0?$AAx?$AA?$CF@|
  00258		 |$LN54@OEMMultiBi|
  00258	00000000	 DCD         |g_eboot|
  0025c		 |$LN55@OEMMultiBi|
  0025c	00000000	 DCD         |??_C@_1DK@OFMGKCPE@?$AAD?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AAi?$AAn?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?3?$AA?$AN?$AA?6?$AA?$AA@|
  00260		 |$LN56@OEMMultiBi|
  00260	00000000	 DCD         |__security_cookie|
  00264		 |$M48296|

			 ENDP  ; |OEMMultiBinNotify|

	EXPORT	|OEMMapMemAddr|
	EXPORT	|??_C@_1GC@BMCFFGLH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAE?$AAM?$AAM?$AAa?$AAp?$AAM?$AAe?$AAm?$AAA?$AAd?$AAd?$AAr?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAd?$AAo@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T48326| DCD	|$LN14@OEMMapMemA|
	DCD	0x40002701

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GC@BMCFFGLH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAE?$AAM?$AAM?$AAa?$AAp?$AAM?$AAe?$AAm?$AAA?$AAd?$AAd?$AAr?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAd?$AAo@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "M", 0x0, "a", 0x0, "p"
	DCB	0x0, "M", 0x0, "e", 0x0, "m", 0x0, "A", 0x0, "d", 0x0, "d"
	DCB	0x0, "r", 0x0, ":", 0x0, " ", 0x0, "I", 0x0, "n", 0x0, "v"
	DCB	0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d", 0x0, " ", 0x0, "d"
	DCB	0x0, "o", 0x0, "w", 0x0, "n", 0x0, "l", 0x0, "o", 0x0, "a"
	DCB	0x0, "d", 0x0, " ", 0x0, "t", 0x0, "y", 0x0, "p", 0x0, "e"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMMapMemAddr| PROC

; 956  : {

  00000		 |$LN14@OEMMapMemA|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M48323|
  00004	e1a02001	 mov         r2, r1

; 957  :     UINT8 *pAddress = NULL;
; 958  : 
; 959  :     //OALMSG(1, (L"+OEMMapMemAddr(0x%08x, 0x%08x)\r\n", image, address));
; 960  :     //OALMSG(1, (L"+OEMMapMemAddr(g_eboot.type = 0x%08x)\r\n", g_eboot.type));
; 961  :     
; 962  :     switch (g_eboot.type) {

  00008	e59f3088	 ldr         r3, [pc, #0x88]
  0000c	e3a04000	 mov         r4, #0
  00010	e5931004	 ldr         r1, [r3, #4]
  00014	e3510001	 cmp         r1, #1
  00018	0a000018	 beq         |$LN4@OEMMapMemA|
  0001c	e3510002	 cmp         r1, #2
  00020	9a000007	 bls         |$LN1@OEMMapMemA|
  00024	e3510004	 cmp         r1, #4
  00028	9a000010	 bls         |$LN5@OEMMapMemA|
  0002c	e3510006	 cmp         r1, #6
  00030	0a00000c	 beq         |$LN3@OEMMapMemA|
  00034	e3510007	 cmp         r1, #7
  00038	0a000008	 beq         |$LN2@OEMMapMemA|
  0003c	e3510008	 cmp         r1, #8
  00040	0a00000a	 beq         |$LN5@OEMMapMemA|
  00044		 |$LN1@OEMMapMemA|

; 984  : 		
; 985  : #ifdef IMGMULTIXIP
; 986  : 	case DOWNLOAD_TYPE_EXT:
; 987  :         pAddress = (UINT8*) (address);
; 988  :         break;
; 989  : #endif
; 990  : 
; 991  :     default:
; 992  :         OALMSG(OAL_ERROR, (L"ERROR: OEMMapMemAddr: " L"Invalid download type %d\r\n", g_eboot.type
; 993  :         ));

  00044	e59f3048	 ldr         r3, [pc, #0x48]
  00048	e5933440	 ldr         r3, [r3, #0x440]
  0004c	e3130001	 tst         r3, #1
  00050	0a00000b	 beq         |$LN11@OEMMapMemA|
  00054	e59f0034	 ldr         r0, [pc, #0x34]
  00058	eb000000	 bl          NKDbgPrintfW
  0005c	ea000008	 b           |$LN11@OEMMapMemA|
  00060		 |$LN2@OEMMapMemA|

; 980  : 
; 981  : 	case DOWNLOAD_TYPE_FLASHNOR:
; 982  :         pAddress = (UINT8*) (address - NOR_ROMOFFSET);

  00060	e2424206	 sub         r4, r2, #6, 4

; 983  :         break;

  00064	ea000006	 b           |$LN11@OEMMapMemA|
  00068		 |$LN3@OEMMapMemA|

; 975  :         break;
; 976  : 
; 977  :     case DOWNLOAD_TYPE_FLASHNAND:
; 978  :         pAddress = (UINT8*) (address - NAND_ROMOFFSET);

  00068	e2424101	 sub         r4, r2, #1, 2

; 979  :         break;

  0006c	ea000004	 b           |$LN11@OEMMapMemA|
  00070		 |$LN5@OEMMapMemA|

; 963  : 
; 964  :         
; 965  :     case DOWNLOAD_TYPE_XLDR: // 3
; 966  :     case DOWNLOAD_TYPE_EBOOT:   
; 967  : 	case DOWNLOAD_TYPE_LOGO:
; 968  :         //  Map to scratch RAM prior to flashing
; 969  :         pAddress = (UINT8*)g_eboot.region[0].base + (address - image);

  00070	e5933018	 ldr         r3, [r3, #0x18]
  00074	e0433000	 sub         r3, r3, r0
  00078	e0834002	 add         r4, r3, r2

; 970  :         break;

  0007c	ea000000	 b           |$LN11@OEMMapMemA|
  00080		 |$LN4@OEMMapMemA|

; 971  : 
; 972  :     case DOWNLOAD_TYPE_RAM: // 1
; 973  :         //  RAM based NK.BIN and EBOOT.BIN files are given in virtual memory addresses
; 974  :         pAddress = (UINT8*)address;

  00080	e1a04002	 mov         r4, r2
  00084		 |$LN11@OEMMapMemA|

; 994  : 
; 995  :     }
; 996  : 
; 997  :     //OALMSGS(1, (L"-OEMMapMemAddr(pAddress = 0x%08x)\r\n", pAddress));
; 998  :     return pAddress;
; 999  : }

  00084	e1a00004	 mov         r0, r4
  00088	e8bd4010	 ldmia       sp!, {r4, lr}
  0008c	e12fff1e	 bx          lr
  00090		 |$LN15@OEMMapMemA|
  00090		 |$LN16@OEMMapMemA|
  00090	00000000	 DCD         |??_C@_1GC@BMCFFGLH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAE?$AAM?$AAM?$AAa?$AAp?$AAM?$AAe?$AAm?$AAA?$AAd?$AAd?$AAr?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAd?$AAo@|
  00094		 |$LN17@OEMMapMemA|
  00094	00000000	 DCD         |dpCurSettings|
  00098		 |$LN18@OEMMapMemA|
  00098	00000000	 DCD         |g_eboot|
  0009c		 |$M48324|

			 ENDP  ; |OEMMapMemAddr|

	EXPORT	|OEMIsFlashAddr|

  00000			 AREA	 |.pdata|, PDATA
|$T48340| DCD	|$LN9@OEMIsFlash|
	DCD	0x40000e00
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMIsFlashAddr| PROC

; 1012 : {

  00000		 |$LN9@OEMIsFlash|
  00000		 |$M48337|

; 1013 :     BOOL rc;
; 1014 : 
; 1015 : 	UNREFERENCED_PARAMETER(address);
; 1016 : 
; 1017 :     //OALMSG(OAL_INFO, (L"+OEMIsFlashAddr(0x%08x)\r\n", address));
; 1018 : 
; 1019 :     // Depending on download type
; 1020 :     switch (g_eboot.type)

  00000	e59f302c	 ldr         r3, [pc, #0x2C]
  00004	e5933004	 ldr         r3, [r3, #4]
  00008	e3530003	 cmp         r3, #3
  0000c	3a000006	 bcc         |$LN1@OEMIsFlash|
  00010	e3530004	 cmp         r3, #4
  00014	9a000002	 bls         |$LN2@OEMIsFlash|
  00018	e2433006	 sub         r3, r3, #6
  0001c	e3530003	 cmp         r3, #3
  00020	8a000001	 bhi         |$LN1@OEMIsFlash|
  00024		 |$LN2@OEMIsFlash|

; 1021 :         {
; 1022 :         case DOWNLOAD_TYPE_XLDR:
; 1023 :         case DOWNLOAD_TYPE_EBOOT:
; 1024 :         case DOWNLOAD_TYPE_LOGO:
; 1025 :         case DOWNLOAD_TYPE_FLASHNAND:
; 1026 :         case DOWNLOAD_TYPE_FLASHNOR:
; 1027 :         case DOWNLOAD_TYPE_EXT:
; 1028 :             rc = TRUE;

  00024	e3a00001	 mov         r0, #1

; 1032 :             break;
; 1033 :         }
; 1034 : 
; 1035 :     //OALMSG(OAL_INFO, (L"-OEMIsFlashAddr(rc = %d)\r\n", rc));
; 1036 :     return rc;
; 1037 : }

  00028	e12fff1e	 bx          lr
  0002c		 |$LN1@OEMIsFlash|

; 1029 :             break;
; 1030 :         default:
; 1031 :             rc = FALSE;

  0002c	e3a00000	 mov         r0, #0

; 1032 :             break;
; 1033 :         }
; 1034 : 
; 1035 :     //OALMSG(OAL_INFO, (L"-OEMIsFlashAddr(rc = %d)\r\n", rc));
; 1036 :     return rc;
; 1037 : }

  00030	e12fff1e	 bx          lr
  00034		 |$LN10@OEMIsFlash|
  00034		 |$LN11@OEMIsFlash|
  00034	00000000	 DCD         |g_eboot|
  00038		 |$M48338|

			 ENDP  ; |OEMIsFlashAddr|

	EXPORT	|OEMReadData|
	IMPORT	|BLEthReadData|

  00000			 AREA	 |.pdata|, PDATA
|$T48354| DCD	|$LN8@OEMReadDat|
	DCD	0x40000b01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMReadData| PROC

; 1047 : {

  00000		 |$LN8@OEMReadDat|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M48351|
  00004	e1a02000	 mov         r2, r0

; 1048 :     BOOL rc = FALSE;
; 1049 :     switch (g_eboot.bootDeviceType)

  00008	e59f3018	 ldr         r3, [pc, #0x18]
  0000c	e3a00000	 mov         r0, #0
  00010	e5933000	 ldr         r3, [r3]
  00014	e3530002	 cmp         r3, #2

; 1050 :         {
; 1051 :         #if BUILDING_EBOOT_SD
; 1052 :         case BOOT_SDCARD_TYPE: // 4
; 1053 :         	//OALMSG(1, (L"OEMReadData(size = 0x%x, pData = 0x%x)\r\n", size, pData));
; 1054 :             rc = BLSDCardReadData(size, pData);
; 1055 :             break;
; 1056 :         #endif
; 1057 :         case OAL_KITL_TYPE_ETH: // 2
; 1058 :             rc = BLEthReadData(size, pData);

  00018	01a00002	 moveq       r0, r2
  0001c	0b000000	 bleq        BLEthReadData

; 1059 :             break;
; 1060 :         }
; 1061 :     return rc;
; 1062 : }

  00020	e49de004	 ldr         lr, [sp], #4
  00024	e12fff1e	 bx          lr
  00028		 |$LN9@OEMReadDat|
  00028		 |$LN10@OEMReadDat|
  00028	00000000	 DCD         |g_eboot|
  0002c		 |$M48352|

			 ENDP  ; |OEMReadData|

	EXPORT	|OEMShowProgress|
	EXPORT	|??_C@_13JOFGPIOO@?$AA?4?$AA?$AA@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T48363| DCD	|$LN5@OEMShowPro@2|
	DCD	0x40000601

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_13JOFGPIOO@?$AA?4?$AA?$AA@| DCB ".", 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMShowProgress| PROC

; 1072 : {

  00000		 |$LN5@OEMShowPro@2|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M48360|

; 1073 :     UNREFERENCED_PARAMETER(packetNumber);
; 1074 :     RETAILMSG(1,(TEXT(".")));

  00004	e59f0008	 ldr         r0, [pc, #8]
  00008	eb000000	 bl          NKDbgPrintfW

; 1075 : }

  0000c	e49de004	 ldr         lr, [sp], #4
  00010	e12fff1e	 bx          lr
  00014		 |$LN6@OEMShowPro@2|
  00014		 |$LN7@OEMShowPro@2|
  00014	00000000	 DCD         |??_C@_13JOFGPIOO@?$AA?4?$AA?$AA@|
  00018		 |$M48361|

			 ENDP  ; |OEMShowProgress|

	EXPORT	|OALGetTickCount|

  00000			 AREA	 |.pdata|, PDATA
|$T48375| DCD	|$LN5@OALGetTick|
	DCD	0x40000901
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALGetTickCount| PROC

; 1082 : {

  00000		 |$LN5@OALGetTick|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M48372|
  00004	e3a03312	 mov         r3, #0x12, 6

; 1083 :     OMAP_GPTIMER_REGS *pGPTimerRegs = OALPAtoUA(OMAP_GPTIMER1_REGS_PA);

  00008	e38309c6	 orr         r0, r3, #0xC6, 18
  0000c	e3a01000	 mov         r1, #0
  00010	eb000000	 bl          OALPAtoVA

; 1084 :     return INREG32(&pGPTimerRegs->TCRR) >> 5;

  00014	e5903028	 ldr         r3, [r0, #0x28]
  00018	e1a002a3	 mov         r0, r3, lsr #5

; 1085 : }

  0001c	e49de004	 ldr         lr, [sp], #4
  00020	e12fff1e	 bx          lr
  00024		 |$M48373|

			 ENDP  ; |OALGetTickCount|

	EXPORT	|OEMKitlGetSecs|

  00000			 AREA	 |.pdata|, PDATA
|$T48389| DCD	|$LN7@OEMKitlGet|
	DCD	0x40000d01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMKitlGetSecs| PROC

; 1094 : {

  00000		 |$LN7@OEMKitlGet|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M48386|
  00004	e3a03312	 mov         r3, #0x12, 6

; 1095 :     return OALGetTickCount()/1000;

  00008	e38309c6	 orr         r0, r3, #0xC6, 18
  0000c	e3a01000	 mov         r1, #0
  00010	eb000000	 bl          OALPAtoVA
  00014	e5903028	 ldr         r3, [r0, #0x28]
  00018	e59f2010	 ldr         r2, [pc, #0x10]
  0001c	e1a012a3	 mov         r1, r3, lsr #5
  00020	e0823291	 umull       r3, r2, r1, r2
  00024	e1a00322	 mov         r0, r2, lsr #6

; 1096 : }

  00028	e49de004	 ldr         lr, [sp], #4
  0002c	e12fff1e	 bx          lr
  00030		 |$LN8@OEMKitlGet|
  00030		 |$LN9@OEMKitlGet|
  00030	10624dd3	 DCD         0x10624dd3
  00034		 |$M48387|

			 ENDP  ; |OEMKitlGetSecs|

	EXPORT	|GetDisplayResolutionFromBootArgs|

  00000			 AREA	 |.pdata|, PDATA
|$T48399| DCD	|$LN5@GetDisplay|
	DCD	0x40000500
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |GetDisplayResolutionFromBootArgs| PROC

; 1099 : {

  00000		 |$LN5@GetDisplay|
  00000		 |$M48396|

; 1100 :     *pDispRes=g_bootCfg.displayRes;

  00000	e59f3008	 ldr         r3, [pc, #8]
  00004	e593307c	 ldr         r3, [r3, #0x7C]
  00008	e5803000	 str         r3, [r0]

; 1101 : }

  0000c	e12fff1e	 bx          lr
  00010		 |$LN6@GetDisplay|
  00010		 |$LN7@GetDisplay|
  00010	00000000	 DCD         |g_bootCfg|
  00014		 |$M48397|

			 ENDP  ; |GetDisplayResolutionFromBootArgs|

	EXPORT	|IsDVIMode|

  00000			 AREA	 |.pdata|, PDATA
|$T48410| DCD	|$LN5@IsDVIMode|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |IsDVIMode| PROC

; 1104 : {

  00000		 |$LN5@IsDVIMode|
  00000		 |$M48407|

; 1105 :     /*DWORD dispRes;    
; 1106 :     GetDisplayResolutionFromBootArgs(&dispRes);
; 1107 :     if (dispRes==OMAP_LCD_DEFAULT)*/
; 1108 : 	return FALSE;

  00000	e3a00000	 mov         r0, #0

; 1109 :     //else
; 1110 : 	//return TRUE;        
; 1111 : }

  00004	e12fff1e	 bx          lr
  00008		 |$M48408|

			 ENDP  ; |IsDVIMode|

	EXPORT	|ConvertCAtoPA|

  00000			 AREA	 |.pdata|, PDATA
|$T48420| DCD	|$LN5@ConvertCAt|
	DCD	0x40000401
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |ConvertCAtoPA| PROC

; 1114 : {   

  00000		 |$LN5@ConvertCAt|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M48417|

; 1115 :     return OALVAtoPA(va);

  00004	eb000000	 bl          OALVAtoPA

; 1116 : }

  00008	e49de004	 ldr         lr, [sp], #4
  0000c	e12fff1e	 bx          lr
  00010		 |$M48418|

			 ENDP  ; |ConvertCAtoPA|

	EXPORT	|OEMPreDownload|
	EXPORT	|??_C@_1CM@LKNPOFLB@?$AAb?$AAo?$AAo?$AAt?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAT?$AAy?$AAp?$AAe?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@OKDMPKNO@?$AAL?$AAo?$AAg?$AAi?$AAc?$AAa?$AAl?$AAL?$AAo?$AAc?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DO@OPINKPO@?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?5?$AAs?$AAh?$AAa?$AAr?$AAe?$AA?5?$AAA?$AAR?$AAG?$AAS?$AA?5?$AA?9?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1KM@MLNPCLLF@?$AA?$AN?$AA?6?$AA?$DO?$AA?$DO?$AA?$DO?$AA?5?$AAF?$AAo?$AAr?$AAc?$AAi?$AAn?$AAg?$AA?5?$AAc?$AAo?$AAl?$AAd?$AA?5?$AAb?$AAo?$AAo?$AAt?$AA?5?$AA?$CI?$AAn?$AAo?$AAn?$AA?9?$AAp?$AAe?$AAr@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EA@EAGALJIK@?$AA?$AN?$AA?$DO?$AA?$DO?$AA?$DO?$AA?5?$AAN?$AAo?$AAw?$AA?5?$AAe?$AAn?$AAt?$AAr?$AAy?$AA?5?$AAc?$AAo?$AAl?$AAd?$AA?9?$AAr?$AAe?$AAs?$AAe?$AAt?$AA?4?$AA?4?$AA?4?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EA@JAEGLKFM@?$AA?$AN?$AA?$DO?$AA?$DO?$AA?$DO?$AA?5?$AAN?$AAo?$AAw?$AA?5?$AAe?$AAn?$AAt?$AAr?$AAy?$AA?5?$AAw?$AAa?$AAr?$AAm?$AA?9?$AAr?$AAe?$AAs?$AAe?$AAt?$AA?4?$AA?4?$AA?4?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DE@IDJEJNKG@?$AAC?$AAl?$AAe?$AAa?$AAr?$AA?5?$AAs?$AAh?$AAa?$AAr?$AAe?$AA?5?$AAA?$AAR?$AAG?$AAS?$AA?5?$AA?9?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_11LOCGONAA@?$AA?$AA@| [ DATA ]	; `string'
	EXPORT	|??_C@_1O@HJKNOJA@?$AAn?$AAk?$AA?4?$AAb?$AAi?$AAn?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EC@IFKCAMGN@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAS?$AAW?$AA4?$AA?5?$AAb?$AAo?$AAo?$AAt?$AA?5?$AAs?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA2?$AAx?$AA?$AN?$AA?6@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GC@MEIINOMM@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAB?$AAo?$AAo?$AAt?$AA?5?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AA?5?$AAw?$AAa?$AAs?$AAn?$AA?8?$AAt?$AA?5?$AAf?$AAo?$AAu?$AAn?$AAd?$AA?0?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EC@IBPJNEAL@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAB?$AAo?$AAo?$AAt?$AA?5?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAf?$AAo?$AAu?$AAn?$AAd?$AA?$AN?$AA?6@| [ DATA ] ; `string'
	IMPORT	|BLFlashDownload|
	IMPORT	|BLSDCardDownload|
	IMPORT	|BLMenu|
	IMPORT	|HotKeyColdReset|
	IMPORT	|BLReadBootCfg|
	IMPORT	|BLShowLogo|
	IMPORT	|g_pOEMMultiBINNotify|
	IMPORT	|wcscpy|
	IMPORT	|memcpy|

  00000			 AREA	 |.pdata|, PDATA
|$T48474| DCD	|$LN64@OEMPreDown|
	DCD	0x4000fa01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@LKNPOFLB@?$AAb?$AAo?$AAo?$AAt?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAT?$AAy?$AAp?$AAe?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "b"
	DCB	0x0, "o", 0x0, "o", 0x0, "t", 0x0, "D", 0x0, "e", 0x0, "v"
	DCB	0x0, "i", 0x0, "c", 0x0, "e", 0x0, "T", 0x0, "y", 0x0, "p"
	DCB	0x0, "e", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@OKDMPKNO@?$AAL?$AAo?$AAg?$AAi?$AAc?$AAa?$AAl?$AAL?$AAo?$AAc?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "L"
	DCB	0x0, "o", 0x0, "g", 0x0, "i", 0x0, "c", 0x0, "a", 0x0, "l"
	DCB	0x0, "L", 0x0, "o", 0x0, "c", 0x0, " ", 0x0, "=", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@OPINKPO@?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?5?$AAs?$AAh?$AAa?$AAr?$AAe?$AA?5?$AAA?$AAR?$AAG?$AAS?$AA?5?$AA?9?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a", 0x0, "l"
	DCB	0x0, "i", 0x0, "z", 0x0, "e", 0x0, " ", 0x0, "s", 0x0, "h"
	DCB	0x0, "a", 0x0, "r", 0x0, "e", 0x0, " ", 0x0, "A", 0x0, "R"
	DCB	0x0, "G", 0x0, "S", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KM@MLNPCLLF@?$AA?$AN?$AA?6?$AA?$DO?$AA?$DO?$AA?$DO?$AA?5?$AAF?$AAo?$AAr?$AAc?$AAi?$AAn?$AAg?$AA?5?$AAc?$AAo?$AAl?$AAd?$AA?5?$AAb?$AAo?$AAo?$AAt?$AA?5?$AA?$CI?$AAn?$AAo?$AAn?$AA?9?$AAp?$AAe?$AAr@| DCB 0xd
	DCB	0x0, 0xa, 0x0, ">", 0x0, ">", 0x0, ">", 0x0, " ", 0x0, "F"
	DCB	0x0, "o", 0x0, "r", 0x0, "c", 0x0, "i", 0x0, "n", 0x0, "g"
	DCB	0x0, " ", 0x0, "c", 0x0, "o", 0x0, "l", 0x0, "d", 0x0, " "
	DCB	0x0, "b", 0x0, "o", 0x0, "o", 0x0, "t", 0x0, " ", 0x0, "("
	DCB	0x0, "n", 0x0, "o", 0x0, "n", 0x0, "-", 0x0, "p", 0x0, "e"
	DCB	0x0, "r", 0x0, "s", 0x0, "i", 0x0, "s", 0x0, "t", 0x0, "e"
	DCB	0x0, "n", 0x0, "t", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "g"
	DCB	0x0, "i", 0x0, "s", 0x0, "t", 0x0, "r", 0x0, "y", 0x0, " "
	DCB	0x0, "a", 0x0, "n", 0x0, "d", 0x0, " ", 0x0, "o", 0x0, "t"
	DCB	0x0, "h", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, "d", 0x0, "a"
	DCB	0x0, "t", 0x0, "a", 0x0, " ", 0x0, "w", 0x0, "i", 0x0, "l"
	DCB	0x0, "l", 0x0, " ", 0x0, "b", 0x0, "e", 0x0, " ", 0x0, "w"
	DCB	0x0, "i", 0x0, "p", 0x0, "e", 0x0, "d", 0x0, ")", 0x0, " "
	DCB	0x0, "<", 0x0, "<", 0x0, "<", 0x0, " ", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@EAGALJIK@?$AA?$AN?$AA?$DO?$AA?$DO?$AA?$DO?$AA?5?$AAN?$AAo?$AAw?$AA?5?$AAe?$AAn?$AAt?$AAr?$AAy?$AA?5?$AAc?$AAo?$AAl?$AAd?$AA?9?$AAr?$AAe?$AAs?$AAe?$AAt?$AA?4?$AA?4?$AA?4?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| DCB 0xd
	DCB	0x0, ">", 0x0, ">", 0x0, ">", 0x0, " ", 0x0, "N", 0x0, "o"
	DCB	0x0, "w", 0x0, " ", 0x0, "e", 0x0, "n", 0x0, "t", 0x0, "r"
	DCB	0x0, "y", 0x0, " ", 0x0, "c", 0x0, "o", 0x0, "l", 0x0, "d"
	DCB	0x0, "-", 0x0, "r", 0x0, "e", 0x0, "s", 0x0, "e", 0x0, "t"
	DCB	0x0, ".", 0x0, ".", 0x0, ".", 0x0, " ", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@JAEGLKFM@?$AA?$AN?$AA?$DO?$AA?$DO?$AA?$DO?$AA?5?$AAN?$AAo?$AAw?$AA?5?$AAe?$AAn?$AAt?$AAr?$AAy?$AA?5?$AAw?$AAa?$AAr?$AAm?$AA?9?$AAr?$AAe?$AAs?$AAe?$AAt?$AA?4?$AA?4?$AA?4?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| DCB 0xd
	DCB	0x0, ">", 0x0, ">", 0x0, ">", 0x0, " ", 0x0, "N", 0x0, "o"
	DCB	0x0, "w", 0x0, " ", 0x0, "e", 0x0, "n", 0x0, "t", 0x0, "r"
	DCB	0x0, "y", 0x0, " ", 0x0, "w", 0x0, "a", 0x0, "r", 0x0, "m"
	DCB	0x0, "-", 0x0, "r", 0x0, "e", 0x0, "s", 0x0, "e", 0x0, "t"
	DCB	0x0, ".", 0x0, ".", 0x0, ".", 0x0, " ", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DE@IDJEJNKG@?$AAC?$AAl?$AAe?$AAa?$AAr?$AA?5?$AAs?$AAh?$AAa?$AAr?$AAe?$AA?5?$AAA?$AAR?$AAG?$AAS?$AA?5?$AA?9?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "C"
	DCB	0x0, "l", 0x0, "e", 0x0, "a", 0x0, "r", 0x0, " ", 0x0, "s"
	DCB	0x0, "h", 0x0, "a", 0x0, "r", 0x0, "e", 0x0, " ", 0x0, "A"
	DCB	0x0, "R", 0x0, "G", 0x0, "S", 0x0, " ", 0x0, "-", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_11LOCGONAA@?$AA?$AA@| DCB 0x0, 0x0		; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1O@HJKNOJA@?$AAn?$AAk?$AA?4?$AAb?$AAi?$AAn?$AA?$AA@| DCB "n", 0x0, "k"
	DCB	0x0, ".", 0x0, "b", 0x0, "i", 0x0, "n", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EC@IFKCAMGN@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAS?$AAW?$AA4?$AA?5?$AAb?$AAo?$AAo?$AAt?$AA?5?$AAs?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA2?$AAx?$AA?$AN?$AA?6@| DCB "I"
	DCB	0x0, "N", 0x0, "F", 0x0, "O", 0x0, ":", 0x0, " ", 0x0, "S"
	DCB	0x0, "W", 0x0, "4", 0x0, " ", 0x0, "b", 0x0, "o", 0x0, "o"
	DCB	0x0, "t", 0x0, " ", 0x0, "s", 0x0, "e", 0x0, "t", 0x0, "t"
	DCB	0x0, "i", 0x0, "n", 0x0, "g", 0x0, ":", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "2", 0x0, "x", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GC@MEIINOMM@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAB?$AAo?$AAo?$AAt?$AA?5?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AA?5?$AAw?$AAa?$AAs?$AAn?$AA?8?$AAt?$AA?5?$AAf?$AAo?$AAu?$AAn?$AAd?$AA?0?$AA?5@| DCB "W"
	DCB	0x0, "A", 0x0, "R", 0x0, "N", 0x0, ":", 0x0, " ", 0x0, "B"
	DCB	0x0, "o", 0x0, "o", 0x0, "t", 0x0, " ", 0x0, "c", 0x0, "o"
	DCB	0x0, "n", 0x0, "f", 0x0, "i", 0x0, "g", 0x0, " ", 0x0, "w"
	DCB	0x0, "a", 0x0, "s", 0x0, "n", 0x0, "'", 0x0, "t", 0x0, " "
	DCB	0x0, "f", 0x0, "o", 0x0, "u", 0x0, "n", 0x0, "d", 0x0, ","
	DCB	0x0, " ", 0x0, "u", 0x0, "s", 0x0, "i", 0x0, "n", 0x0, "g"
	DCB	0x0, " ", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "a", 0x0, "u"
	DCB	0x0, "l", 0x0, "t", 0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EC@IBPJNEAL@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAB?$AAo?$AAo?$AAt?$AA?5?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAf?$AAo?$AAu?$AAn?$AAd?$AA?$AN?$AA?6@| DCB "I"
	DCB	0x0, "N", 0x0, "F", 0x0, "O", 0x0, ":", 0x0, " ", 0x0, "B"
	DCB	0x0, "o", 0x0, "o", 0x0, "t", 0x0, " ", 0x0, "c", 0x0, "o"
	DCB	0x0, "n", 0x0, "f", 0x0, "i", 0x0, "g", 0x0, "u", 0x0, "r"
	DCB	0x0, "a", 0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, " "
	DCB	0x0, "f", 0x0, "o", 0x0, "u", 0x0, "n", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMPreDownload| PROC

; 446  : {

  00000		 |$LN64@OEMPreDown|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004		 |$M48471|

; 447  :     ULONG rc = (ULONG) BL_ERROR;
; 448  :     BSP_ARGS *pArgs = OALCAtoUA(IMAGE_SHARE_ARGS_CA);
; 449  :     BOOL bForceBootMenu;
; 450  :     OMAP_PRCM_GLOBAL_PRM_REGS * pPrmGlobal = OALPAtoUA(OMAP_PRCM_GLOBAL_PRM_REGS_PA);

  00004	e59f03d8	 ldr         r0, [pc, #0x3D8]
  00008	e3a01000	 mov         r1, #0
  0000c	e3a0b20a	 mov         r11, #0xA, 4
  00010	eb000000	 bl          OALPAtoVA
  00014	e1a08000	 mov         r8, r0

; 451  :     ULONG dwTemp;
; 452  :     UINT32 *pStatusControlAddr = OALPAtoUA(OMAP_STATUS_CONTROL_REGS_PA);

  00018	e59f03c0	 ldr         r0, [pc, #0x3C0]
  0001c	e3a01000	 mov         r1, #0
  00020	eb000000	 bl          OALPAtoVA

; 453  :     UINT32 dwSysBootCfg;
; 454  : #ifdef BUILDING_EBOOT_SD    
; 455  : 	//BYTE CalibBuffer[CALIBRATE_SIZE];
; 456  : #endif
; 457  : 
; 458  :     //OALLog(L"INFO: Predownload....%d...\r\n",sizeof(BSP_ARGS));
; 459  : 
; 460  :     // We need to support multi bin notify
; 461  :     g_pOEMMultiBINNotify = OEMMultiBinNotify;

  00024	e59f23b0	 ldr         r2, [pc, #0x3B0]
  00028	e59f33a8	 ldr         r3, [pc, #0x3A8]
  0002c	e1a07000	 mov         r7, r0
  00030	e5823000	 str         r3, [r2]

; 462  : 
; 463  :     // Ensure bootloader blocks are marked as reserved
; 464  : #ifdef BUILDING_EBOOT_SD // brian    
; 465  :     //BLReserveBootBlocks(); // brian
; 466  : #endif
; 467  : 	
; 468  : 	BLShowLogo(); // Ray 13115

  00034	eb000000	 bl          BLShowLogo

; 469  : 	
; 470  :     // Read saved configration      //Bootstrap message(LCD init after), Ray
; 471  :     if (BLReadBootCfg(&g_bootCfg) &&
; 472  :         (g_bootCfg.signature == BOOT_CFG_SIGNATURE) && (g_bootCfg.version == BOOT_CFG_VERSION))

  00038	e59f4394	 ldr         r4, [pc, #0x394]
  0003c	e1a00004	 mov         r0, r4
  00040	eb000000	 bl          BLReadBootCfg
  00044	e3a03302	 mov         r3, #2, 6
  00048	e59f9380	 ldr         r9, [pc, #0x380]
  0004c	e59f5378	 ldr         r5, [pc, #0x378]
  00050	e3836020	 orr         r6, r3, #0x20
  00054	e3500000	 cmp         r0, #0
  00058	0a000008	 beq         |$LN23@OEMPreDown|
  0005c	e5943000	 ldr         r3, [r4]
  00060	e1530005	 cmp         r3, r5
  00064	1a000005	 bne         |$LN23@OEMPreDown|
  00068	e5943004	 ldr         r3, [r4, #4]
  0006c	e3530002	 cmp         r3, #2
  00070	1a000002	 bne         |$LN23@OEMPreDown|

; 473  : 	{
; 474  :         OALLog(L"INFO: Boot configuration found\r\n");

  00074	e59f034c	 ldr         r0, [pc, #0x34C]
  00078	eb000000	 bl          NKDbgPrintfW

; 475  : 	}
; 476  :     else 

  0007c	ea000051	 b           |$LN22@OEMPreDown|
  00080		 |$LN23@OEMPreDown|

; 477  : 	{
; 478  :         OALLog(L"WARN: Boot config wasn't found, using defaults\r\n");

  00080	e59f033c	 ldr         r0, [pc, #0x33C]
  00084	eb000000	 bl          NKDbgPrintfW

; 479  :         memset(&g_bootCfg, 0, sizeof(g_bootCfg));

  00088	e3a02090	 mov         r2, #0x90
  0008c	e3a01000	 mov         r1, #0
  00090	e1a00004	 mov         r0, r4
  00094	eb000000	 bl          memset

; 480  : 		memcpy(&g_bootCfg.mac,DefaultMacAddress,sizeof(g_bootCfg.mac));

  00098	e2891060	 add         r1, r9, #0x60
  0009c	e2840076	 add         r0, r4, #0x76
  000a0	e3a02006	 mov         r2, #6
  000a4	eb000000	 bl          memcpy

; 481  :         g_bootCfg.signature = BOOT_CFG_SIGNATURE;
; 482  :         g_bootCfg.version = BOOT_CFG_VERSION;
; 483  : 
; 484  :         g_bootCfg.oalFlags = 0;
; 485  :         g_bootCfg.flashNKFlags = 0;
; 486  :         g_bootCfg.ECCtype =  (UCHAR)dwEbootECCtype;

  000a8	e59f3310	 ldr         r3, [pc, #0x310]

; 487  :         // To make it easier to select USB or EBOOT from menus when booting from SD card,
; 488  :         // preset the kitlFlags. This has no effect if booting from SD card.
; 489  :         g_bootCfg.kitlFlags = OAL_KITL_FLAGS_DHCP|OAL_KITL_FLAGS_ENABLED;
; 490  :         g_bootCfg.kitlFlags |= OAL_KITL_FLAGS_VMINI;
; 491  :         g_bootCfg.kitlFlags |= OAL_KITL_FLAGS_EXTNAME;
; 492  : 
; 493  :         //g_bootCfg.displayRes = OMAP_LCD_DEFAULT;
; 494  : 
; 495  :         
; 496  :         if(g_CPUFamily == CPU_FAMILY_DM37XX)

  000ac	e59f2308	 ldr         r2, [pc, #0x308]
  000b0	e3a01002	 mov         r1, #2
  000b4	e5933000	 ldr         r3, [r3]
  000b8	e5845000	 str         r5, [r4]
  000bc	e5922000	 ldr         r2, [r2]
  000c0	e3a00000	 mov         r0, #0
  000c4	e5841004	 str         r1, [r4, #4]
  000c8	e3a01000	 mov         r1, #0
  000cc	e5840034	 str         r0, [r4, #0x34]
  000d0	e5841080	 str         r1, [r4, #0x80]
  000d4	e5c43084	 strb        r3, [r4, #0x84]
  000d8	e3a0302d	 mov         r3, #0x2D
  000dc	e3520001	 cmp         r2, #1
  000e0	e5843030	 str         r3, [r4, #0x30]

; 497  :         {
; 498  :             g_bootCfg.opp_mode = BSP_OPM_SELECT_37XX-1;

  000e4	03a03003	 moveq       r3, #3

; 499  :         }
; 500  :         else
; 501  :         {
; 502  :             g_bootCfg.opp_mode = BSP_OPM_SELECT_35XX-1;

  000e8	13a03004	 movne       r3, #4
  000ec	e5843088	 str         r3, [r4, #0x88]

; 503  :         }
; 504  :         // select default boot device based on boot select switch setting
; 505  :         dwSysBootCfg = INREG32(pStatusControlAddr);

  000f0	e5973000	 ldr         r3, [r7]

; 506  :         OALLog(L"INFO: SW4 boot setting: 0x%02x\r\n", dwSysBootCfg & 0x3f);

  000f4	e59f02bc	 ldr         r0, [pc, #0x2BC]
  000f8	e203503f	 and         r5, r3, #0x3F
  000fc	e1a01005	 mov         r1, r5
  00100	eb000000	 bl          NKDbgPrintfW

; 507  : 
; 508  :         switch (dwSysBootCfg & 0x3f)

  00104	e3550024	 cmp         r5, #0x24
  00108	8a000012	 bhi         |$LN26@OEMPreDown|
  0010c	0a00001d	 beq         |$LN17@OEMPreDown|
  00110	e355001b	 cmp         r5, #0x1B
  00114	8a000015	 bhi         |$LN13@OEMPreDown|
  00118	e28f3004	 add         r3, pc, #4
  0011c	e7d33005	 ldrb        r3, [r3, +r5]
  00120	e08ff003	 add         pc, pc, r3
  00124		 |$LN33@OEMPreDown|
  00124		 |$LN32@OEMPreDown|
  00124		 |$LN34@OEMPreDown|
  00124	20ed		 DCB         0x20
  00125		 |$LN35@OEMPreDown|
  00125	18ed		 DCB         0x18
  00126		 |$LN36@OEMPreDown|
  00126	20ed		 DCB         0x20
  00127		 |$LN37@OEMPreDown|
  00127	48ed		 DCB         0x48
  00128		 |$LN38@OEMPreDown|
  00128	20ed		 DCB         0x20
  00129		 |$LN39@OEMPreDown|
  00129	48ed		 DCB         0x48
  0012a		 |$LN40@OEMPreDown|
  0012a	50ed		 DCB         0x50
  0012b		 |$LN41@OEMPreDown|
  0012b	48ed		 DCB         0x48
  0012c		 |$LN42@OEMPreDown|
  0012c	48ed		 DCB         0x48
  0012d		 |$LN43@OEMPreDown|
  0012d	48ed		 DCB         0x48
  0012e		 |$LN44@OEMPreDown|
  0012e	48ed		 DCB         0x48
  0012f		 |$LN45@OEMPreDown|
  0012f	48ed		 DCB         0x48
  00130		 |$LN46@OEMPreDown|
  00130	18ed		 DCB         0x18
  00131		 |$LN47@OEMPreDown|
  00131	48ed		 DCB         0x48
  00132		 |$LN48@OEMPreDown|
  00132	48ed		 DCB         0x48
  00133		 |$LN49@OEMPreDown|
  00133	48ed		 DCB         0x48
  00134		 |$LN50@OEMPreDown|
  00134	20ed		 DCB         0x20
  00135		 |$LN51@OEMPreDown|
  00135	48ed		 DCB         0x48
  00136		 |$LN52@OEMPreDown|
  00136	50ed		 DCB         0x50
  00137		 |$LN53@OEMPreDown|
  00137	48ed		 DCB         0x48
  00138		 |$LN54@OEMPreDown|
  00138	48ed		 DCB         0x48
  00139		 |$LN55@OEMPreDown|
  00139	18ed		 DCB         0x18
  0013a		 |$LN56@OEMPreDown|
  0013a	20ed		 DCB         0x20
  0013b		 |$LN57@OEMPreDown|
  0013b	48ed		 DCB         0x48
  0013c		 |$LN58@OEMPreDown|
  0013c	50ed		 DCB         0x50
  0013d		 |$LN59@OEMPreDown|
  0013d	48ed		 DCB         0x48
  0013e		 |$LN60@OEMPreDown|
  0013e	48ed		 DCB         0x48
  0013f		 |$LN61@OEMPreDown|
  0013f	18ed		 DCB         0x18
  00140		 |$LN15@OEMPreDown|

; 516  :             break;
; 517  :     
; 518  :     	case 0x2f: // brian
; 519  :         case 0x06:
; 520  :         case 0x12:
; 521  :         case 0x18:
; 522  :             // 1st boot device is MMC1 (SD Card Boot)
; 523  :             g_bootCfg.bootDevLoc.LogicalLoc = OMAP_MMCHS1_REGS_PA;
; 524  :             break;          
; 525  : 
; 526  :         case 0x01: 
; 527  :         case 0x0c: 
; 528  :         case 0x15: 
; 529  :         case 0x1b: 
; 530  :             // 1st boot device is NAND
; 531  :             g_bootCfg.bootDevLoc.LogicalLoc = BSP_NAND_REGS_PA + 0x20;

  00140	e5846010	 str         r6, [r4, #0x10]

; 532  :             break;

  00144	ea000013	 b           |$LN18@OEMPreDown|
  00148		 |$LN14@OEMPreDown|
  00148	e3a03303	 mov         r3, #3, 6

; 533  :             
; 534  :         case 0x00:
; 535  :         case 0x02:
; 536  :         case 0x04:
; 537  :         case 0x10:
; 538  :         case 0x16:
; 539  :             // 1st boot device is ONENAND
; 540  :             g_bootCfg.bootDevLoc.LogicalLoc = BSP_ONENAND_REGS_PA + 0x20;                       

  0014c	e3833020	 orr         r3, r3, #0x20
  00150	e5843010	 str         r3, [r4, #0x10]
  00154	ea00000f	 b           |$LN18@OEMPreDown|
  00158		 |$LN26@OEMPreDown|

; 507  : 
; 508  :         switch (dwSysBootCfg & 0x3f)

  00158	e3550026	 cmp         r5, #0x26
  0015c	0a000009	 beq         |$LN17@OEMPreDown|
  00160	e355002f	 cmp         r5, #0x2F
  00164	0a000003	 beq         |$LN16@OEMPreDown|
  00168	e355003b	 cmp         r5, #0x3B
  0016c	0a000005	 beq         |$LN17@OEMPreDown|
  00170		 |$LN13@OEMPreDown|

; 541  :             break;
; 542  : 
; 543  :         default:
; 544  :             // UART,  Ethernet Boot
; 545  :             g_bootCfg.bootDevLoc.LogicalLoc = BSP_NAND_REGS_PA + 0x20;;

  00170	e5846010	 str         r6, [r4, #0x10]

; 546  :             g_bootCfg.kitlDevLoc.LogicalLoc = BSP_NAND_REGS_PA + 0x20;;
; 547  :             break;

  00174	ea00000a	 b           |$LN30@OEMPreDown|
  00178		 |$LN16@OEMPreDown|
  00178	e3a03312	 mov         r3, #0x12, 6
  0017c	e3833927	 orr         r3, r3, #0x27, 18
  00180	e5843010	 str         r3, [r4, #0x10]
  00184	ea000003	 b           |$LN18@OEMPreDown|
  00188		 |$LN17@OEMPreDown|

; 509  :         {
; 510  :         case 0x24:
; 511  :         case 0x26:
; 512  :         case 0x3b:
; 513  :             // 1st boot device is USB
; 514  :             g_bootCfg.bootDevLoc.LogicalLoc = OMAP_USBHS_REGS_PA;

  00188	e3a03312	 mov         r3, #0x12, 6
  0018c	e3833aab	 orr         r3, r3, #0xAB, 20
  00190	e5843010	 str         r3, [r4, #0x10]

; 515  :             g_bootCfg.kitlDevLoc.LogicalLoc = OMAP_USBHS_REGS_PA;

  00194	e5843024	 str         r3, [r4, #0x24]
  00198		 |$LN18@OEMPreDown|

; 532  :             break;

  00198	e5943024	 ldr         r3, [r4, #0x24]

; 548  :         }            
; 549  :         if (g_bootCfg.kitlDevLoc.LogicalLoc == 0)

  0019c	e3530000	 cmp         r3, #0
  001a0	1a000000	 bne         |$LN12@OEMPreDown|
  001a4		 |$LN30@OEMPreDown|

; 550  :         {
; 551  :             g_bootCfg.kitlDevLoc.LogicalLoc = BSP_NAND_REGS_PA + 0x20;;

  001a4	e5846024	 str         r6, [r4, #0x24]
  001a8		 |$LN12@OEMPreDown|

; 552  :         }
; 553  :         //g_bootCfg.deviceID = 0;
; 554  :         wcscpy(g_bootCfg.SerialNumber, L"");

  001a8	e59f1204	 ldr         r1, [pc, #0x204]
  001ac	e2840038	 add         r0, r4, #0x38
  001b0	eb000000	 bl          wcscpy

; 555  :         g_bootCfg.osPartitionSize = IMAGE_WINCE_CODE_SIZE;
; 556  :         wcscpy(g_bootCfg.filename, L"nk.bin");

  001b4	e59f11f4	 ldr         r1, [pc, #0x1F4]
  001b8	e3a0350a	 mov         r3, #0xA, 10
  001bc	e284005c	 add         r0, r4, #0x5C
  001c0	e5843058	 str         r3, [r4, #0x58]
  001c4	eb000000	 bl          wcscpy
  001c8		 |$LN22@OEMPreDown|

; 557  : 	}
; 558  : 	g_bootCfg.displayRes = OMAP_LCD_DEFAULT;

  001c8	e3a03000	 mov         r3, #0

; 559  : 	
; 560  : 	// Initialize flash partitions if needed
; 561  : #ifdef BUILDING_EBOOT_SD // brian
; 562  :    //BLConfigureFlashPartitions(FALSE); //brian
; 563  : #endif
; 564  :     // Initialize ARGS structure
; 565  :     if ((pArgs->header.signature != OAL_ARGS_SIGNATURE) ||
; 566  :         (pArgs->header.oalVersion != OAL_ARGS_VERSION) ||
; 567  :         (pArgs->header.bspVersion != BSP_ARGS_VERSION))

  001cc	e59f51d8	 ldr         r5, [pc, #0x1D8]
  001d0	e584307c	 str         r3, [r4, #0x7C]
  001d4	e59b3000	 ldr         r3, [r11]
  001d8	e1530005	 cmp         r3, r5
  001dc	1a000005	 bne         |$LN10@OEMPreDown|
  001e0	e1db30b4	 ldrh        r3, [r11, #4]
  001e4	e3530001	 cmp         r3, #1
  001e8	1a000002	 bne         |$LN10@OEMPreDown|
  001ec	e1db30b6	 ldrh        r3, [r11, #6]
  001f0	e3530001	 cmp         r3, #1
  001f4	0a000006	 beq         |$LN11@OEMPreDown|
  001f8		 |$LN10@OEMPreDown|

; 568  : 	{
; 569  : 		OALLog(L"Clear share ARGS - 0x%x\r\n",IMAGE_SHARE_ARGS_CA);

  001f8	e59f01a8	 ldr         r0, [pc, #0x1A8]
  001fc	e3a01102	 mov         r1, #2, 2
  00200	eb000000	 bl          NKDbgPrintfW

; 570  : 		memset(pArgs, 0, IMAGE_SHARE_ARGS_SIZE);

  00204	e3a02a01	 mov         r2, #1, 20
  00208	e3a01000	 mov         r1, #0
  0020c	e3a0020a	 mov         r0, #0xA, 4
  00210	eb000000	 bl          memset
  00214		 |$LN11@OEMPreDown|

; 571  : 	}        
; 572  :     
; 573  :     // Save reset type  //Bootstrap message(final); Determine Clod or Warm Reset, Ray 131024
; 574  :     dwTemp = INREG32(&pPrmGlobal->PRM_RSTST);

  00214	e5983058	 ldr         r3, [r8, #0x58]

; 575  :     if (dwTemp & (GLOBALWARM_RST /* actually SW reset */ | EXTERNALWARM_RST))

  00218	e3a0a001	 mov         r10, #1
  0021c	e3a02000	 mov         r2, #0
  00220	e3130042	 tst         r3, #0x42
  00224	0a000003	 beq         |$LN9@OEMPreDown|

; 576  :     {
; 577  :         pArgs->coldBoot = FALSE;
; 578  :         OALLog(L"\r>>> Now entry warm-reset... \r\n");

  00228	e59f0174	 ldr         r0, [pc, #0x174]
  0022c	e58b200c	 str         r2, [r11, #0xC]
  00230	eb000000	 bl          NKDbgPrintfW

; 579  :     }
; 580  :     else

  00234	ea000007	 b           |$LN8@OEMPreDown|
  00238		 |$LN9@OEMPreDown|

; 581  :     {
; 582  :         pArgs->coldBoot = TRUE;
; 583  :         OALLog(L"\r\n>>> Forcing cold boot (non-persistent registry and other data will be wiped) <<< \r\n");

  00238	e59f0160	 ldr         r0, [pc, #0x160]
  0023c	e58ba00c	 str         r10, [r11, #0xC]
  00240	eb000000	 bl          NKDbgPrintfW

; 584  :         OALLog(L"\r>>> Now entry cold-reset... \r\n");

  00244	e59f0150	 ldr         r0, [pc, #0x150]
  00248	eb000000	 bl          NKDbgPrintfW

; 585  :         HotKeyColdReset(ghTwl);

  0024c	e59f3144	 ldr         r3, [pc, #0x144]
  00250	e5930000	 ldr         r0, [r3]
  00254	eb000000	 bl          HotKeyColdReset
  00258		 |$LN8@OEMPreDown|

; 586  :         //LLog(L"******hTwl: %X....\r\n", ghTwl);       //address-2, Ray
; 587  :     }
; 588  :     
; 589  :     // Don't force the boot menu, use default action unless user breaks
; 590  :     // into menu
; 591  :     bForceBootMenu = FALSE;

  00258	e59f7134	 ldr         r7, [pc, #0x134]
  0025c	e59f812c	 ldr         r8, [pc, #0x12C]
  00260	e3a00000	 mov         r0, #0
  00264		 |$retryBootMenu$47829|

; 592  :     
; 593  : retryBootMenu:
; 594  : 	// Call configuration menu
; 595  :     BLMenu(bForceBootMenu);

  00264	eb000000	 bl          BLMenu

; 596  :     
; 597  :     // Update ARGS structure if necessary
; 598  :     if ((pArgs->header.signature != OAL_ARGS_SIGNATURE) ||
; 599  :         (pArgs->header.oalVersion != OAL_ARGS_VERSION) || 
; 600  :         (pArgs->header.bspVersion != BSP_ARGS_VERSION))

  00268	e59b3000	 ldr         r3, [r11]
  0026c	e1530005	 cmp         r3, r5
  00270	1a000005	 bne         |$LN6@OEMPreDown|
  00274	e1db30b4	 ldrh        r3, [r11, #4]
  00278	e3530001	 cmp         r3, #1
  0027c	1a000002	 bne         |$LN6@OEMPreDown|
  00280	e1db30b6	 ldrh        r3, [r11, #6]
  00284	e3530001	 cmp         r3, #1
  00288	0a000023	 beq         |$LN7@OEMPreDown|
  0028c		 |$LN6@OEMPreDown|

; 601  : 	{
; 602  : 		OALLog(L"Initialize share ARGS - 0x%x\r\n",IMAGE_SHARE_ARGS_CA);

  0028c	e59f00f8	 ldr         r0, [pc, #0xF8]
  00290	e3a01102	 mov         r1, #2, 2
  00294	eb000000	 bl          NKDbgPrintfW

; 603  : 		//OALLog(L"Initialize share ARGS - %s\r\n",g_bootCfg.SerialNumber);
; 604  :         pArgs->header.signature = OAL_ARGS_SIGNATURE;

  00298	e58b5000	 str         r5, [r11]

; 605  :         pArgs->header.oalVersion = OAL_ARGS_VERSION;

  0029c	e1cba0b4	 strh        r10, [r11, #4]

; 606  :         pArgs->header.bspVersion = BSP_ARGS_VERSION;

  002a0	e1cba0b6	 strh        r10, [r11, #6]

; 607  :         pArgs->kitl.flags = g_bootCfg.kitlFlags;

  002a4	e5943030	 ldr         r3, [r4, #0x30]

; 608  :         pArgs->kitl.devLoc = g_bootCfg.kitlDevLoc;

  002a8	e284101c	 add         r1, r4, #0x1C
  002ac	e28b001c	 add         r0, r11, #0x1C
  002b0	e3a02014	 mov         r2, #0x14
  002b4	e58b3018	 str         r3, [r11, #0x18]
  002b8	eb000000	 bl          memcpy
  002bc	e3a0a20a	 mov         r10, #0xA, 4

; 609  :         //pArgs->kitl.ipAddress = g_bootCfg.ipAddress;
; 610  :         //pArgs->kitl.ipMask = g_bootCfg.ipMask;
; 611  :         //pArgs->kitl.ipRoute = g_bootCfg.ipRoute;
; 612  : 		memcpy(pArgs->kitl.mac,g_bootCfg.mac,sizeof(pArgs->kitl.mac)); 

  002c0	e38a0030	 orr         r0, r10, #0x30
  002c4	e2841076	 add         r1, r4, #0x76
  002c8	e3a02006	 mov         r2, #6
  002cc	eb000000	 bl          memcpy

; 613  :  	    pArgs->updateMode = FALSE;

  002d0	e3a03000	 mov         r3, #0
  002d4	e58b3008	 str         r3, [r11, #8]

; 614  :         //pArgs->deviceID = g_bootCfg.deviceID;
; 615  :         pArgs->oalFlags = g_bootCfg.oalFlags;

  002d8	e5943034	 ldr         r3, [r4, #0x34]

; 616  :         pArgs->dispRes = g_bootCfg.displayRes;
; 617  :         pArgs->ECCtype = g_bootCfg.ECCtype; 
; 618  :         pArgs->opp_mode = g_bootCfg.opp_mode;
; 619  :         memcpy(pArgs->DevicePrefix, gDevice_prefix, sizeof(pArgs->DevicePrefix));

  002dc	e38a0048	 orr         r0, r10, #0x48
  002e0	e3a02012	 mov         r2, #0x12
  002e4	e58b3044	 str         r3, [r11, #0x44]
  002e8	e594307c	 ldr         r3, [r4, #0x7C]
  002ec	e58b3078	 str         r3, [r11, #0x78]
  002f0	e5d43084	 ldrb        r3, [r4, #0x84]
  002f4	e58b307c	 str         r3, [r11, #0x7C]
  002f8	e5943088	 ldr         r3, [r4, #0x88]
  002fc	e58b3080	 str         r3, [r11, #0x80]
  00300	e5981000	 ldr         r1, [r8]
  00304	eb000000	 bl          memcpy

; 620  :         memcpy(pArgs->SerialNumber, g_bootCfg.SerialNumber, sizeof(pArgs->SerialNumber));

  00308	e38a005a	 orr         r0, r10, #0x5A
  0030c	e2841038	 add         r1, r4, #0x38
  00310	e3a0201e	 mov         r2, #0x1E
  00314	eb000000	 bl          memcpy
  00318	e3a0a001	 mov         r10, #1
  0031c		 |$LN7@OEMPreDown|

; 621  :         //memcpy((BYTE *)SERIAL_NUMBER_STORE_ADDR, g_bootCfg.SerialNumber, sizeof(g_bootCfg.SerialNumber));
; 622  :         //OALLog(L"Initialize share ARGS - %s\r\n",pArgs->SerialNumber);
; 623  : 	}  
; 624  :     
; 625  :     // Initialize display
; 626  : 	//BLShowLogo();	// cfg.c
; 627  : 	
; 628  : 	// Read touch Calibration data
; 629  : #ifdef BUILDING_EBOOT_SD
; 630  : 	/*memset(pArgs->CalibBuffer, 0, CALIBRATE_SIZE);
; 631  : 	if( BLSDCardReadCalibData(TOUCHCALIB_EBOOT_FILE, CalibBuffer, CALIBRATE_SIZE) )
; 632  : 	{
; 633  : 		//int i;
; 634  : 		memcpy(pArgs->CalibBuffer, CalibBuffer, CALIBRATE_SIZE);
; 635  : 		OALLog(L"BLSDCardReadCalibData: %d bytes\r\n", CalibBuffer[1]);
; 636  : 		//for( i=0 ; i<120 ; i++)
; 637  : 		//	OALLog(L"BLSDCardReadCalibData: %d = 0x%x\r\n", i, pArgs->CalibBuffer[i]);
; 638  : 	}*/
; 639  : 	
; 640  :     // Image download depends on protocol
; 641  : 	g_eboot.bootDeviceType = BOOT_SDCARD_TYPE;
; 642  : #else
; 643  : 	g_bootCfg.bootDevLoc.LogicalLoc = BSP_NAND_REGS_PA + 0x20;
; 644  : 	g_eboot.bootDeviceType = OAL_KITL_TYPE_FLASH;
; 645  : #endif
; 646  :     //g_eboot.bootDeviceType = OALKitlDeviceType(&g_bootCfg.bootDevLoc, g_bootDevices);
; 647  : 
; 648  : 	OALLog(L"bootDeviceType = %d\r\n", g_eboot.bootDeviceType);

  0031c	e59f0064	 ldr         r0, [pc, #0x64]
  00320	e3a03003	 mov         r3, #3
  00324	e3a01003	 mov         r1, #3
  00328	e5846010	 str         r6, [r4, #0x10]
  0032c	e5873000	 str         r3, [r7]
  00330	eb000000	 bl          NKDbgPrintfW

; 649  : 	OALLog(L"LogicalLoc = 0x%x\r\n", g_bootCfg.bootDevLoc.LogicalLoc);

  00334	e5941010	 ldr         r1, [r4, #0x10]
  00338	e59f0044	 ldr         r0, [pc, #0x44]
  0033c	eb000000	 bl          NKDbgPrintfW

; 650  : 	switch (g_eboot.bootDeviceType)

  00340	e5973000	 ldr         r3, [r7]
  00344	e3530003	 cmp         r3, #3
  00348	0a000004	 beq         |$LN2@OEMPreDown|
  0034c	e3530004	 cmp         r3, #4
  00350	1a000007	 bne         |$LN28@OEMPreDown|

; 651  : 	{
; 652  : 		case BOOT_SDCARD_TYPE: // 4
; 653  :             rc = BLSDCardDownload(g_bootCfg.filename); // \PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\BOOT\SDMEMORY

  00354	e284005c	 add         r0, r4, #0x5C
  00358	eb000000	 bl          BLSDCardDownload

; 654  :             break;

  0035c	ea000002	 b           |$LN4@OEMPreDown|
  00360		 |$LN2@OEMPreDown|

; 655  :         case OAL_KITL_TYPE_FLASH: // 3
; 656  :             rc = BLFlashDownload(&g_bootCfg, g_bootDevices);

  00360	e1a01009	 mov         r1, r9
  00364	e1a00004	 mov         r0, r4
  00368	eb000000	 bl          BLFlashDownload
  0036c		 |$LN4@OEMPreDown|

; 657  :             break;
; 658  :         //case OAL_KITL_TYPE_ETH:
; 659  :         //    rc = BLEthDownload(&g_bootCfg, g_bootDevices);
; 660  :         //    break;
; 661  : 	}
; 662  :         
; 663  : 	if (rc == BL_ERROR)

  0036c	e3700001	 cmn         r0, #1
  00370	1a000001	 bne         |$LN1@OEMPreDown|
  00374		 |$LN28@OEMPreDown|

; 664  :     {
; 665  :         // No automatic mode now, force the boot menu to appear
; 666  :         bForceBootMenu = TRUE;

  00374	e3a00001	 mov         r0, #1

; 667  :         goto retryBootMenu; 

  00378	eaffffb9	 b           |$retryBootMenu$47829|
  0037c		 |$LN1@OEMPreDown|

; 668  :     }   
; 669  :     
; 670  :     return rc;
; 671  : }

  0037c	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00380	e12fff1e	 bx          lr
  00384		 |$LN65@OEMPreDown|
  00384		 |$LN66@OEMPreDown|
  00384	00000000	 DCD         |??_C@_1CI@OKDMPKNO@?$AAL?$AAo?$AAg?$AAi?$AAc?$AAa?$AAl?$AAL?$AAo?$AAc?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  00388		 |$LN67@OEMPreDown|
  00388	00000000	 DCD         |??_C@_1CM@LKNPOFLB@?$AAb?$AAo?$AAo?$AAt?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAT?$AAy?$AAp?$AAe?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  0038c		 |$LN68@OEMPreDown|
  0038c	00000000	 DCD         |??_C@_1DO@OPINKPO@?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?5?$AAs?$AAh?$AAa?$AAr?$AAe?$AA?5?$AAA?$AAR?$AAG?$AAS?$AA?5?$AA?9?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  00390		 |$LN69@OEMPreDown|
  00390	00000000	 DCD         |gDevice_prefix|
  00394		 |$LN70@OEMPreDown|
  00394	00000000	 DCD         |g_eboot|
  00398		 |$LN71@OEMPreDown|
  00398	00000000	 DCD         |ghTwl|
  0039c		 |$LN72@OEMPreDown|
  0039c	00000000	 DCD         |??_C@_1EA@EAGALJIK@?$AA?$AN?$AA?$DO?$AA?$DO?$AA?$DO?$AA?5?$AAN?$AAo?$AAw?$AA?5?$AAe?$AAn?$AAt?$AAr?$AAy?$AA?5?$AAc?$AAo?$AAl?$AAd?$AA?9?$AAr?$AAe?$AAs?$AAe?$AAt?$AA?4?$AA?4?$AA?4?$AA?5?$AA?$AN?$AA?6?$AA?$AA@|
  003a0		 |$LN73@OEMPreDown|
  003a0	00000000	 DCD         |??_C@_1KM@MLNPCLLF@?$AA?$AN?$AA?6?$AA?$DO?$AA?$DO?$AA?$DO?$AA?5?$AAF?$AAo?$AAr?$AAc?$AAi?$AAn?$AAg?$AA?5?$AAc?$AAo?$AAl?$AAd?$AA?5?$AAb?$AAo?$AAo?$AAt?$AA?5?$AA?$CI?$AAn?$AAo?$AAn?$AA?9?$AAp?$AAe?$AAr@|
  003a4		 |$LN74@OEMPreDown|
  003a4	00000000	 DCD         |??_C@_1EA@JAEGLKFM@?$AA?$AN?$AA?$DO?$AA?$DO?$AA?$DO?$AA?5?$AAN?$AAo?$AAw?$AA?5?$AAe?$AAn?$AAt?$AAr?$AAy?$AA?5?$AAw?$AAa?$AAr?$AAm?$AA?9?$AAr?$AAe?$AAs?$AAe?$AAt?$AA?4?$AA?4?$AA?4?$AA?5?$AA?$AN?$AA?6?$AA?$AA@|
  003a8		 |$LN75@OEMPreDown|
  003a8	00000000	 DCD         |??_C@_1DE@IDJEJNKG@?$AAC?$AAl?$AAe?$AAa?$AAr?$AA?5?$AAs?$AAh?$AAa?$AAr?$AAe?$AA?5?$AAA?$AAR?$AAG?$AAS?$AA?5?$AA?9?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  003ac		 |$LN76@OEMPreDown|
  003ac	53475241	 DCD         0x53475241
  003b0		 |$LN77@OEMPreDown|
  003b0	00000000	 DCD         |??_C@_1O@HJKNOJA@?$AAn?$AAk?$AA?4?$AAb?$AAi?$AAn?$AA?$AA@|
  003b4		 |$LN78@OEMPreDown|
  003b4	00000000	 DCD         |??_C@_11LOCGONAA@?$AA?$AA@|
  003b8		 |$LN79@OEMPreDown|
  003b8	00000000	 DCD         |??_C@_1EC@IFKCAMGN@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAS?$AAW?$AA4?$AA?5?$AAb?$AAo?$AAo?$AAt?$AA?5?$AAs?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA2?$AAx?$AA?$AN?$AA?6@|
  003bc		 |$LN80@OEMPreDown|
  003bc	00000000	 DCD         |g_CPUFamily|
  003c0		 |$LN81@OEMPreDown|
  003c0	00000000	 DCD         |dwEbootECCtype|
  003c4		 |$LN82@OEMPreDown|
  003c4	00000000	 DCD         |??_C@_1GC@MEIINOMM@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAB?$AAo?$AAo?$AAt?$AA?5?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AA?5?$AAw?$AAa?$AAs?$AAn?$AA?8?$AAt?$AA?5?$AAf?$AAo?$AAu?$AAn?$AAd?$AA?0?$AA?5@|
  003c8		 |$LN83@OEMPreDown|
  003c8	00000000	 DCD         |??_C@_1EC@IBPJNEAL@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAB?$AAo?$AAo?$AAt?$AA?5?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAf?$AAo?$AAu?$AAn?$AAd?$AA?$AN?$AA?6@|
  003cc		 |$LN84@OEMPreDown|
  003cc	42434647	 DCD         0x42434647
  003d0		 |$LN85@OEMPreDown|
  003d0	00000000	 DCD         |g_bootDevices|
  003d4		 |$LN86@OEMPreDown|
  003d4	00000000	 DCD         |g_bootCfg|
  003d8		 |$LN87@OEMPreDown|
  003d8	00000000	 DCD         |OEMMultiBinNotify|
  003dc		 |$LN88@OEMPreDown|
  003dc	00000000	 DCD         |g_pOEMMultiBINNotify|
  003e0		 |$LN89@OEMPreDown|
  003e0	480022f0	 DCD         0x480022f0
  003e4		 |$LN90@OEMPreDown|
  003e4	48307200	 DCD         0x48307200
  003e8		 |$M48472|

			 ENDP  ; |OEMPreDownload|

	EXPORT	|OEMLaunch|
	EXPORT	|??_C@_1GI@OMOEGIPN@?$AAL?$AAa?$AAu?$AAn?$AAc?$AAh?$AA?5?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAC?$AAE?$AA?5?$AAi?$AAm?$AAa?$AAg?$AAe?$AA?5?$AAb?$AAy?$AA?5?$AAj?$AAu?$AAm?$AAp?$AAi@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HO@MGHNOKAM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAE?$AAM?$AAL?$AAa?$AAu?$AAn?$AAc?$AAh?$AA?3?$AA?5?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?5?$AAi?$AAm?$AAa?$AAg?$AAe?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GE@FBKDALPO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAE?$AAM?$AAL?$AAa?$AAu?$AAn?$AAc?$AAh?$AA?3?$AA?5?$AAF?$AAl?$AAa?$AAs?$AAh?$AA?5?$AAN?$AAK?$AA?4?$AAb?$AAi?$AAn?$AA?5?$AAf@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FC@IKOIDMGO@?$AAW?$AAr?$AAi?$AAt?$AAe?$AAF?$AAl?$AAa?$AAs?$AAh?$AAN?$AAK?$AA?3?$AA?5?$AAs?$AAt?$AAa?$AAr?$AAt?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?0?$AAs?$AAi?$AAz?$AAe?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HA@PPNIDEHG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAE?$AAM?$AAL?$AAa?$AAu?$AAn?$AAc?$AAh?$AA?3?$AA?5?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?5?$AAd?$AAo?$AAw?$AAn?$AAl?$AAo@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GA@LEGMELFL@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAX?$AAL?$AAD?$AAR?$AA?1?$AAE?$AAB?$AAO?$AAO?$AAT?$AA?1?$AAI?$AAP?$AAL?$AA?5?$AAd?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AAe?$AAd?$AA?0@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HA@LNJPPCBO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAE?$AAM?$AAL?$AAa?$AAu?$AAn?$AAc?$AAh?$AA?3?$AA?5?$AAI?$AAm?$AAa?$AAg?$AAe?$AA?5?$AAl?$AAo?$AAa?$AAd?$AA?5?$AAf?$AAr?$AAo@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GE@FFBNFJNC@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAS?$AAp?$AAl?$AAa?$AAs?$AAh?$AAc?$AAr?$AAe?$AAe?$AAn?$AA?5?$AAl?$AAo?$AAg?$AAo?$AA?5?$AAd?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GK@MMIDCEGF@?$AA?$CL?$AAO?$AAE?$AAM?$AAL?$AAa?$AAu?$AAn?$AAc?$AAh?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8@| [ DATA ] ; `string'
	IMPORT	|JumpTo|
	IMPORT	|ClearDisplayBuffer|
	IMPORT	|OEMDeinitDebugSerial|
	IMPORT	|WriteFlashNK|
	IMPORT	|BLEthConfig|

  00000			 AREA	 |.pdata|, PDATA
|$T48545| DCD	|$LN61@OEMLaunch|
	DCD	0x40008502

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GI@OMOEGIPN@?$AAL?$AAa?$AAu?$AAn?$AAc?$AAh?$AA?5?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAC?$AAE?$AA?5?$AAi?$AAm?$AAa?$AAg?$AAe?$AA?5?$AAb?$AAy?$AA?5?$AAj?$AAu?$AAm?$AAp?$AAi@| DCB "L"
	DCB	0x0, "a", 0x0, "u", 0x0, "n", 0x0, "c", 0x0, "h", 0x0, " "
	DCB	0x0, "W", 0x0, "i", 0x0, "n", 0x0, "d", 0x0, "o", 0x0, "w"
	DCB	0x0, "s", 0x0, " ", 0x0, "C", 0x0, "E", 0x0, " ", 0x0, "i"
	DCB	0x0, "m", 0x0, "a", 0x0, "g", 0x0, "e", 0x0, " ", 0x0, "b"
	DCB	0x0, "y", 0x0, " ", 0x0, "j", 0x0, "u", 0x0, "m", 0x0, "p"
	DCB	0x0, "i", 0x0, "n", 0x0, "g", 0x0, " ", 0x0, "t", 0x0, "o"
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "x", 0x0, ".", 0x0, ".", 0x0, ".", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HO@MGHNOKAM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAE?$AAM?$AAL?$AAa?$AAu?$AAn?$AAc?$AAh?$AA?3?$AA?5?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?5?$AAi?$AAm?$AAa?$AAg?$AAe?$AA?5@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "L", 0x0, "a", 0x0, "u"
	DCB	0x0, "n", 0x0, "c", 0x0, "h", 0x0, ":", 0x0, " ", 0x0, "U"
	DCB	0x0, "n", 0x0, "k", 0x0, "n", 0x0, "o", 0x0, "w", 0x0, "n"
	DCB	0x0, " ", 0x0, "i", 0x0, "m", 0x0, "a", 0x0, "g", 0x0, "e"
	DCB	0x0, " ", 0x0, "l", 0x0, "a", 0x0, "u", 0x0, "n", 0x0, "c"
	DCB	0x0, "h", 0x0, " ", 0x0, "a", 0x0, "d", 0x0, "d", 0x0, "r"
	DCB	0x0, "e", 0x0, "s", 0x0, "s", 0x0, ",", 0x0, " ", 0x0, "s"
	DCB	0x0, "p", 0x0, "i", 0x0, "n", 0x0, " ", 0x0, "f", 0x0, "o"
	DCB	0x0, "r", 0x0, "e", 0x0, "v", 0x0, "e", 0x0, "r", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GE@FBKDALPO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAE?$AAM?$AAL?$AAa?$AAu?$AAn?$AAc?$AAh?$AA?3?$AA?5?$AAF?$AAl?$AAa?$AAs?$AAh?$AA?5?$AAN?$AAK?$AA?4?$AAb?$AAi?$AAn?$AA?5?$AAf@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "L", 0x0, "a", 0x0, "u"
	DCB	0x0, "n", 0x0, "c", 0x0, "h", 0x0, ":", 0x0, " ", 0x0, "F"
	DCB	0x0, "l", 0x0, "a", 0x0, "s", 0x0, "h", 0x0, " ", 0x0, "N"
	DCB	0x0, "K", 0x0, ".", 0x0, "b", 0x0, "i", 0x0, "n", 0x0, " "
	DCB	0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, ",", 0x0, " ", 0x0, "s", 0x0, "t", 0x0, "a", 0x0, "r"
	DCB	0x0, "t", 0x0, "=", 0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FC@IKOIDMGO@?$AAW?$AAr?$AAi?$AAt?$AAe?$AAF?$AAl?$AAa?$AAs?$AAh?$AAN?$AAK?$AA?3?$AA?5?$AAs?$AAt?$AAa?$AAr?$AAt?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?0?$AAs?$AAi?$AAz?$AAe?$AA?5@| DCB "W"
	DCB	0x0, "r", 0x0, "i", 0x0, "t", 0x0, "e", 0x0, "F", 0x0, "l"
	DCB	0x0, "a", 0x0, "s", 0x0, "h", 0x0, "N", 0x0, "K", 0x0, ":"
	DCB	0x0, " ", 0x0, "s", 0x0, "t", 0x0, "a", 0x0, "r", 0x0, "t"
	DCB	0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "x", 0x0, ",", 0x0, "s", 0x0, "i", 0x0, "z", 0x0, "e"
	DCB	0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HA@PPNIDEHG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAE?$AAM?$AAL?$AAa?$AAu?$AAn?$AAc?$AAh?$AA?3?$AA?5?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?5?$AAd?$AAo?$AAw?$AAn?$AAl?$AAo@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "L", 0x0, "a", 0x0, "u"
	DCB	0x0, "n", 0x0, "c", 0x0, "h", 0x0, ":", 0x0, " ", 0x0, "U"
	DCB	0x0, "n", 0x0, "k", 0x0, "n", 0x0, "o", 0x0, "w", 0x0, "n"
	DCB	0x0, " ", 0x0, "d", 0x0, "o", 0x0, "w", 0x0, "n", 0x0, "l"
	DCB	0x0, "o", 0x0, "a", 0x0, "d", 0x0, " ", 0x0, "t", 0x0, "y"
	DCB	0x0, "p", 0x0, "e", 0x0, ",", 0x0, " ", 0x0, "s", 0x0, "p"
	DCB	0x0, "i", 0x0, "n", 0x0, " ", 0x0, "f", 0x0, "o", 0x0, "r"
	DCB	0x0, "e", 0x0, "v", 0x0, "e", 0x0, "r", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GA@LEGMELFL@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAX?$AAL?$AAD?$AAR?$AA?1?$AAE?$AAB?$AAO?$AAO?$AAT?$AA?1?$AAI?$AAP?$AAL?$AA?5?$AAd?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AAe?$AAd?$AA?0@| DCB "I"
	DCB	0x0, "N", 0x0, "F", 0x0, "O", 0x0, ":", 0x0, " ", 0x0, "X"
	DCB	0x0, "L", 0x0, "D", 0x0, "R", 0x0, "/", 0x0, "E", 0x0, "B"
	DCB	0x0, "O", 0x0, "O", 0x0, "T", 0x0, "/", 0x0, "I", 0x0, "P"
	DCB	0x0, "L", 0x0, " ", 0x0, "d", 0x0, "o", 0x0, "w", 0x0, "n"
	DCB	0x0, "l", 0x0, "o", 0x0, "a", 0x0, "d", 0x0, "e", 0x0, "d"
	DCB	0x0, ",", 0x0, " ", 0x0, "s", 0x0, "p", 0x0, "i", 0x0, "n"
	DCB	0x0, " ", 0x0, "f", 0x0, "o", 0x0, "r", 0x0, "e", 0x0, "v"
	DCB	0x0, "e", 0x0, "r", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HA@LNJPPCBO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAE?$AAM?$AAL?$AAa?$AAu?$AAn?$AAc?$AAh?$AA?3?$AA?5?$AAI?$AAm?$AAa?$AAg?$AAe?$AA?5?$AAl?$AAo?$AAa?$AAd?$AA?5?$AAf?$AAr?$AAo@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "L", 0x0, "a", 0x0, "u"
	DCB	0x0, "n", 0x0, "c", 0x0, "h", 0x0, ":", 0x0, " ", 0x0, "I"
	DCB	0x0, "m", 0x0, "a", 0x0, "g", 0x0, "e", 0x0, " ", 0x0, "l"
	DCB	0x0, "o", 0x0, "a", 0x0, "d", 0x0, " ", 0x0, "f", 0x0, "r"
	DCB	0x0, "o", 0x0, "m", 0x0, " ", 0x0, "f", 0x0, "l", 0x0, "a"
	DCB	0x0, "s", 0x0, "h", 0x0, " ", 0x0, "m", 0x0, "e", 0x0, "m"
	DCB	0x0, "o", 0x0, "r", 0x0, "y", 0x0, " ", 0x0, "f", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GE@FFBNFJNC@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAS?$AAp?$AAl?$AAa?$AAs?$AAh?$AAc?$AAr?$AAe?$AAe?$AAn?$AA?5?$AAl?$AAo?$AAg?$AAo?$AA?5?$AAd?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AAe@| DCB "I"
	DCB	0x0, "N", 0x0, "F", 0x0, "O", 0x0, ":", 0x0, " ", 0x0, "S"
	DCB	0x0, "p", 0x0, "l", 0x0, "a", 0x0, "s", 0x0, "h", 0x0, "c"
	DCB	0x0, "r", 0x0, "e", 0x0, "e", 0x0, "n", 0x0, " ", 0x0, "l"
	DCB	0x0, "o", 0x0, "g", 0x0, "o", 0x0, " ", 0x0, "d", 0x0, "o"
	DCB	0x0, "w", 0x0, "n", 0x0, "l", 0x0, "o", 0x0, "a", 0x0, "d"
	DCB	0x0, "e", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "s", 0x0, "p"
	DCB	0x0, "i", 0x0, "n", 0x0, " ", 0x0, "f", 0x0, "o", 0x0, "r"
	DCB	0x0, "e", 0x0, "v", 0x0, "e", 0x0, "r", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GK@MMIDCEGF@?$AA?$CL?$AAO?$AAE?$AAM?$AAL?$AAa?$AAu?$AAn?$AAc?$AAh?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8@| DCB "+"
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "L", 0x0, "a", 0x0, "u"
	DCB	0x0, "n", 0x0, "c", 0x0, "h", 0x0, "(", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ",", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x"
	DCB	0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, " ", 0x0, "-"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, "/", 0x0, "%", 0x0, "d"
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMLaunch| PROC

; 681  : {

  00000		 |$LN61@OEMLaunch|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004	e24dd00c	 sub         sp, sp, #0xC
  00008		 |$M48542|
  00008	e1a05003	 mov         r5, r3
  0000c	e1a08002	 mov         r8, r2
  00010	e1a09001	 mov         r9, r1
  00014	e1a06000	 mov         r6, r0

; 682  :     BSP_ARGS *pArgs = OALCAtoUA(IMAGE_SHARE_ARGS_CA);
; 683  : 
; 684  : 	UNREFERENCED_PARAMETER(size);
; 685  : 	UNREFERENCED_PARAMETER(pRomHeader);
; 686  : 
; 687  :     OALMSG(1, (L"+OEMLaunch(0x%08x, 0x%08x, 0x%08x, 0x%08x - %d/%d)\r\n", start, size,
; 688  :         launch, pRomHeader, g_eboot.bootDeviceType, g_eboot.type)); // OAL_INFO

  00018	e59f71f0	 ldr         r7, [pc, #0x1F0]
  0001c	e59f01e8	 ldr         r0, [pc, #0x1E8]
  00020	e1a03008	 mov         r3, r8
  00024	e5974004	 ldr         r4, [r7, #4]
  00028	e597e000	 ldr         lr, [r7]
  0002c	e1a02009	 mov         r2, r9
  00030	e1a01006	 mov         r1, r6
  00034	e58d4008	 str         r4, [sp, #8]
  00038	e58de004	 str         lr, [sp, #4]
  0003c	e58d5000	 str         r5, [sp]
  00040	eb000000	 bl          NKDbgPrintfW

; 689  : 
; 690  :     // Depending on protocol there can be some action required
; 691  :     switch (g_eboot.bootDeviceType)

  00044	e5973000	 ldr         r3, [r7]
  00048	e59f51b8	 ldr         r5, [pc, #0x1B8]
  0004c	e3530002	 cmp         r3, #2

; 776  :                     break;
; 777  : 			}
; 778  :             break;
; 779  : 
; 780  :         default:        
; 781  :             launch = g_eboot.launchAddress;
; 782  :             break;

  00050	1a000020	 bne         |$LN17@OEMLaunch|
  00054	e3a0020a	 mov         r0, #0xA, 4
  00058	eb000000	 bl          BLEthConfig
  0005c	e5973004	 ldr         r3, [r7, #4]
  00060	e3530001	 cmp         r3, #1
  00064	0a000029	 beq         |$LN16@OEMLaunch|

; 692  : 	{
; 693  : #if BUILDING_EBOOT_SD
; 694  :         case BOOT_SDCARD_TYPE: // 4
; 695  :             switch (g_eboot.type)
; 696  : 			{
; 697  : #if 0
; 698  : /*				case DOWNLOAD_TYPE_FLASHRAM:
; 699  :                     if (BLFlashDownload(&g_bootCfg, g_kitlDevices) != BL_JUMP)
; 700  : 					{
; 701  :                         OALMSG(OAL_ERROR, (L"ERROR: OEMLaunch: Image load from flash memory failed\r\n"));
; 702  :                         goto cleanUp;
; 703  : 					}
; 704  :                     launch = g_eboot.launchAddress;
; 705  :                     break;
; 706  : */
; 707  : #endif
; 708  :                 case DOWNLOAD_TYPE_RAM: // 1
; 709  :                     launch = (UINT32)OEMMapMemAddr(start, launch);
; 710  :                     break;
; 711  : 					
; 712  :                 case DOWNLOAD_TYPE_FLASHNAND: // 6
; 713  :                     if (BLFlashDownload(&g_bootCfg, g_kitlDevices) != BL_JUMP)
; 714  : 					{
; 715  :                         OALMSG(OAL_ERROR, (L"ERROR: OEMLaunch: Image load from flash memory failed\r\n"));
; 716  :                         goto cleanUp;
; 717  : 					}
; 718  :                     launch = g_eboot.launchAddress;
; 719  :                     break;
; 720  : 					
; 721  : #if 0
; 722  : /*				case DOWNLOAD_TYPE_EBOOT:
; 723  :                 case DOWNLOAD_TYPE_XLDR:
; 724  :                     OALMSG(OAL_INFO, (L"INFO: "
; 725  :                         L"XLDR/EBOOT/IPL downloaded, spin forever\r\n"
; 726  :                         ));
; 727  :                     while (TRUE);
; 728  :                     break;
; 729  : */
; 730  : #endif
; 731  :                 default:
; 732  :                     OALMSG(OAL_ERROR, (L"ERROR: OEMLaunch: Unknown download type, spin forever\r\n"));
; 733  :                     for(;;);
; 734  :                     break;
; 735  : 			}
; 736  :             break;
; 737  : 
; 738  : #endif
; 739  : 
; 740  :         case OAL_KITL_TYPE_ETH:
; 741  :             BLEthConfig(pArgs);
; 742  :             switch (g_eboot.type)

  00068	e3530002	 cmp         r3, #2
  0006c	9a000021	 bls         |$LN9@OEMLaunch|
  00070	e3530004	 cmp         r3, #4
  00074	9a000019	 bls         |$LN15@OEMLaunch|
  00078	e3530005	 cmp         r3, #5
  0007c	9a00001d	 bls         |$LN9@OEMLaunch|
  00080	e3530007	 cmp         r3, #7
  00084	9a000007	 bls         |$LN18@OEMLaunch|
  00088	e3530008	 cmp         r3, #8
  0008c	1a000019	 bne         |$LN9@OEMLaunch|

; 766  :                     break;
; 767  : 
; 768  : 				case DOWNLOAD_TYPE_LOGO:
; 769  :                     OALMSG(OAL_INFO, (L"INFO: Splashcreen logo downloaded, spin forever\r\n"));

  00090	e59f3158	 ldr         r3, [pc, #0x158]
  00094	e5933440	 ldr         r3, [r3, #0x440]
  00098	e3130008	 tst         r3, #8
  0009c	159f0160	 ldrne       r0, [pc, #0x160]
  000a0	1b000000	 blne        NKDbgPrintfW
  000a4		 |$LL11@OEMLaunch|

; 770  :                     for(;;);

  000a4	eafffffe	 b           |$LL11@OEMLaunch|
  000a8		 |$LN18@OEMLaunch|

; 743  : 			{
; 744  : #ifdef IMGMULTIXIP
; 745  :                 case DOWNLOAD_TYPE_EXT:
; 746  : #endif					
; 747  :                 case DOWNLOAD_TYPE_FLASHNAND:
; 748  : 				case DOWNLOAD_TYPE_FLASHNOR:
; 749  :                     if (BLFlashDownload(&g_bootCfg, g_kitlDevices) != BL_JUMP)

  000a8	e59f1150	 ldr         r1, [pc, #0x150]
  000ac	e1a00005	 mov         r0, r5
  000b0	eb000000	 bl          BLFlashDownload
  000b4	e3500001	 cmp         r0, #1
  000b8	0a000006	 beq         |$LN17@OEMLaunch|

; 750  :                         {
; 751  :                         OALMSG(OAL_ERROR, (L"ERROR: OEMLaunch: "
; 752  :                             L"Image load from flash memory failed\r\n"));

  000bc	e59f312c	 ldr         r3, [pc, #0x12C]
  000c0	e5933440	 ldr         r3, [r3, #0x440]
  000c4	e3130001	 tst         r3, #1
  000c8	0a000041	 beq         |$cleanUp$47869|
  000cc	e59f0128	 ldr         r0, [pc, #0x128]
  000d0	eb000000	 bl          NKDbgPrintfW

; 753  :                         goto cleanUp;

  000d4	ea00003e	 b           |$cleanUp$47869|
  000d8		 |$LN17@OEMLaunch|

; 754  :                         }
; 755  :                     launch = g_eboot.launchAddress;

  000d8	e597400c	 ldr         r4, [r7, #0xC]

; 756  :                     break;

  000dc	ea00000f	 b           |$LN19@OEMLaunch|
  000e0		 |$LN15@OEMLaunch|

; 760  :                     break;
; 761  : 
; 762  :                 case DOWNLOAD_TYPE_EBOOT:
; 763  :                 case DOWNLOAD_TYPE_XLDR:
; 764  :                     OALMSG(OAL_INFO, (L"INFO: XLDR/EBOOT/IPL downloaded, spin forever\r\n"));

  000e0	e59f3108	 ldr         r3, [pc, #0x108]
  000e4	e5933440	 ldr         r3, [r3, #0x440]
  000e8	e3130008	 tst         r3, #8
  000ec	159f0104	 ldrne       r0, [pc, #0x104]
  000f0	1b000000	 blne        NKDbgPrintfW
  000f4		 |$LL14@OEMLaunch|

; 765  :                     for(;;);

  000f4	eafffffe	 b           |$LL14@OEMLaunch|
  000f8		 |$LN9@OEMLaunch|

; 771  :                     break;
; 772  : 
; 773  :                 default:
; 774  :                     OALMSG(OAL_ERROR, (L"ERROR: OEMLaunch: Unknown download type, spin forever\r\n"));

  000f8	e59f30f0	 ldr         r3, [pc, #0xF0]
  000fc	e5933440	 ldr         r3, [r3, #0x440]
  00100	e3130001	 tst         r3, #1
  00104	159f00e8	 ldrne       r0, [pc, #0xE8]
  00108	1b000000	 blne        NKDbgPrintfW
  0010c		 |$LL8@OEMLaunch|

; 775  :                     for(;;);

  0010c	eafffffe	 b           |$LL8@OEMLaunch|
  00110		 |$LN16@OEMLaunch|

; 757  : 
; 758  :                 case DOWNLOAD_TYPE_RAM:
; 759  :                     launch = (UINT32)OEMMapMemAddr(start, launch);

  00110	e1a01008	 mov         r1, r8
  00114	e1a00006	 mov         r0, r6
  00118	eb000000	 bl          OEMMapMemAddr
  0011c	e1a04000	 mov         r4, r0
  00120		 |$LN19@OEMLaunch|

; 783  :         }
; 784  : 
; 785  : #ifndef BSP_NO_NAND_IN_SDBOOT
; 786  : 	/* if loading from NAND then do not need to flash NAND again */
; 787  :     if ((g_bootCfg.flashNKFlags & ENABLE_FLASH_NK) && (g_eboot.bootDeviceType != OAL_KITL_TYPE_FLASH) && 
; 788  : 	    (start != (IMAGE_WINCE_CODE_CA + NAND_ROMOFFSET)) && // 0x80002000 + 0x40000000
; 789  : 	    (start != (IMAGE_WINCE_CODE_CA + NOR_ROMOFFSET)))	 // 0x80002000 + 0x60000000

  00120	e5953080	 ldr         r3, [r5, #0x80]
  00124	e59f50c4	 ldr         r5, [pc, #0xC4]
  00128	e3130001	 tst         r3, #1
  0012c	0a000018	 beq         |$LN50@OEMLaunch|
  00130	e5973000	 ldr         r3, [r7]
  00134	e3530003	 cmp         r3, #3
  00138	0a000015	 beq         |$LN50@OEMLaunch|
  0013c	e3a03103	 mov         r3, #3, 2
  00140	e3833a02	 orr         r3, r3, #2, 20
  00144	e1560003	 cmp         r6, r3
  00148	0a000011	 beq         |$LN50@OEMLaunch|
  0014c	e3a0320e	 mov         r3, #0xE, 4
  00150	e3833a02	 orr         r3, r3, #2, 20
  00154	e1560003	 cmp         r6, r3
  00158	0a00000d	 beq         |$LN50@OEMLaunch|

; 790  : 	{
; 791  : 		OALMSG(1, (L"WriteFlashNK: start = 0x%x,size = 0x%x\r\n",start,size));	

  0015c	e59f0088	 ldr         r0, [pc, #0x88]
  00160	e1a02009	 mov         r2, r9
  00164	e1a01006	 mov         r1, r6
  00168	eb000000	 bl          NKDbgPrintfW

; 792  : 		if( !WriteFlashNK(start, size))

  0016c	e1a01009	 mov         r1, r9
  00170	e1a00006	 mov         r0, r6
  00174	eb000000	 bl          WriteFlashNK
  00178	e3500000	 cmp         r0, #0
  0017c	1a000004	 bne         |$LN50@OEMLaunch|

; 793  : 			OALMSG(OAL_ERROR, (L"ERROR: OEMLaunch: Flash NK.bin failed, start=%x\r\n", start));

  00180	e5953440	 ldr         r3, [r5, #0x440]
  00184	e3130001	 tst         r3, #1
  00188	159f0058	 ldrne       r0, [pc, #0x58]
  0018c	11a01006	 movne       r1, r6
  00190	1b000000	 blne        NKDbgPrintfW
  00194		 |$LN50@OEMLaunch|

; 794  : 	}
; 795  : #endif
; 796  : 
; 797  :     // Check if we get launch address
; 798  :     if (launch == (UINT32)INVALID_HANDLE_VALUE)

  00194	e3740001	 cmn         r4, #1
  00198	1a000004	 bne         |$LN1@OEMLaunch|
  0019c	e5953440	 ldr         r3, [r5, #0x440]

; 799  : 	{
; 800  :         OALMSG(OAL_ERROR, (L"ERROR: OEMLaunch: Unknown image launch address, spin forever\r\n"));

  001a0	e3130001	 tst         r3, #1
  001a4	159f0038	 ldrne       r0, [pc, #0x38]
  001a8	1b000000	 blne        NKDbgPrintfW
  001ac		 |$LL2@OEMLaunch|

; 801  :         for(;;);

  001ac	eafffffe	 b           |$LL2@OEMLaunch|
  001b0		 |$LN1@OEMLaunch|

; 802  : 	}        
; 803  : 
; 804  :     // Print message, flush caches and jump to image
; 805  :     OALLog(L"Launch Windows CE image by jumping to 0x%08x...\r\n\r\n", launch);

  001b0	e59f0028	 ldr         r0, [pc, #0x28]
  001b4	e1a01004	 mov         r1, r4
  001b8	eb000000	 bl          NKDbgPrintfW

; 806  : 
; 807  : 	OEMDeinitDebugSerial();

  001bc	eb000000	 bl          OEMDeinitDebugSerial

; 808  :     OEMPlatformDeinit();

  001c0	eb000000	 bl          OEMPlatformDeinit

; 809  :     ClearDisplayBuffer();

  001c4	eb000000	 bl          ClearDisplayBuffer

; 810  :     JumpTo(OALVAtoPA((UCHAR*)launch));

  001c8	e1a00004	 mov         r0, r4
  001cc	eb000000	 bl          OALVAtoPA
  001d0	eb000000	 bl          JumpTo
  001d4		 |$cleanUp$47869|

; 811  : 
; 812  : cleanUp:
; 813  :     return;
; 814  : }

  001d4	e28dd00c	 add         sp, sp, #0xC
  001d8	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  001dc	e12fff1e	 bx          lr
  001e0		 |$LN62@OEMLaunch|
  001e0		 |$LN63@OEMLaunch|
  001e0	00000000	 DCD         |??_C@_1GI@OMOEGIPN@?$AAL?$AAa?$AAu?$AAn?$AAc?$AAh?$AA?5?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAC?$AAE?$AA?5?$AAi?$AAm?$AAa?$AAg?$AAe?$AA?5?$AAb?$AAy?$AA?5?$AAj?$AAu?$AAm?$AAp?$AAi@|
  001e4		 |$LN64@OEMLaunch|
  001e4	00000000	 DCD         |??_C@_1HO@MGHNOKAM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAE?$AAM?$AAL?$AAa?$AAu?$AAn?$AAc?$AAh?$AA?3?$AA?5?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?5?$AAi?$AAm?$AAa?$AAg?$AAe?$AA?5@|
  001e8		 |$LN65@OEMLaunch|
  001e8	00000000	 DCD         |??_C@_1GE@FBKDALPO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAE?$AAM?$AAL?$AAa?$AAu?$AAn?$AAc?$AAh?$AA?3?$AA?5?$AAF?$AAl?$AAa?$AAs?$AAh?$AA?5?$AAN?$AAK?$AA?4?$AAb?$AAi?$AAn?$AA?5?$AAf@|
  001ec		 |$LN66@OEMLaunch|
  001ec	00000000	 DCD         |??_C@_1FC@IKOIDMGO@?$AAW?$AAr?$AAi?$AAt?$AAe?$AAF?$AAl?$AAa?$AAs?$AAh?$AAN?$AAK?$AA?3?$AA?5?$AAs?$AAt?$AAa?$AAr?$AAt?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?0?$AAs?$AAi?$AAz?$AAe?$AA?5@|
  001f0		 |$LN67@OEMLaunch|
  001f0	00000000	 DCD         |dpCurSettings|
  001f4		 |$LN68@OEMLaunch|
  001f4	00000000	 DCD         |??_C@_1HA@PPNIDEHG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAE?$AAM?$AAL?$AAa?$AAu?$AAn?$AAc?$AAh?$AA?3?$AA?5?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?5?$AAd?$AAo?$AAw?$AAn?$AAl?$AAo@|
  001f8		 |$LN69@OEMLaunch|
  001f8	00000000	 DCD         |??_C@_1GA@LEGMELFL@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAX?$AAL?$AAD?$AAR?$AA?1?$AAE?$AAB?$AAO?$AAO?$AAT?$AA?1?$AAI?$AAP?$AAL?$AA?5?$AAd?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AAe?$AAd?$AA?0@|
  001fc		 |$LN70@OEMLaunch|
  001fc	00000000	 DCD         |??_C@_1HA@LNJPPCBO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAE?$AAM?$AAL?$AAa?$AAu?$AAn?$AAc?$AAh?$AA?3?$AA?5?$AAI?$AAm?$AAa?$AAg?$AAe?$AA?5?$AAl?$AAo?$AAa?$AAd?$AA?5?$AAf?$AAr?$AAo@|
  00200		 |$LN71@OEMLaunch|
  00200	00000000	 DCD         |g_kitlDevices|
  00204		 |$LN72@OEMLaunch|
  00204	00000000	 DCD         |??_C@_1GE@FFBNFJNC@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAS?$AAp?$AAl?$AAa?$AAs?$AAh?$AAc?$AAr?$AAe?$AAe?$AAn?$AA?5?$AAl?$AAo?$AAg?$AAo?$AA?5?$AAd?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AAe@|
  00208		 |$LN73@OEMLaunch|
  00208	00000000	 DCD         |g_bootCfg|
  0020c		 |$LN74@OEMLaunch|
  0020c	00000000	 DCD         |??_C@_1GK@MMIDCEGF@?$AA?$CL?$AAO?$AAE?$AAM?$AAL?$AAa?$AAu?$AAn?$AAc?$AAh?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8@|
  00210		 |$LN75@OEMLaunch|
  00210	00000000	 DCD         |g_eboot|
  00214		 |$M48543|

			 ENDP  ; |OEMLaunch|

	END
