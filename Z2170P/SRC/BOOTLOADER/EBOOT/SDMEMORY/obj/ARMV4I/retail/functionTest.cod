; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\Z2170P\SRC\BOOTLOADER\EBOOT\functionTest.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|??_C@_1CE@DFLFAFMD@?$AAE?$AAx?$AAi?$AAt?$AA?5?$AAa?$AAn?$AAd?$AA?5?$AAC?$AAo?$AAn?$AAt?$AAi?$AAn?$AAu?$AAe?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CC@DJCNJJMD@?$AAB?$AAa?$AAr?$AAc?$AAo?$AAd?$AAe?$AA?5?$AAS?$AAc?$AAa?$AAn?$AAn?$AAi?$AAn?$AAg?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BM@FKKAMPJP@?$AAL?$AAE?$AAD?$AA?5?$AAI?$AAn?$AAd?$AAi?$AAc?$AAa?$AAt?$AAo?$AAr?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BK@KIOELMDE@?$AAB?$AAa?$AAt?$AAt?$AAe?$AAr?$AAy?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CC@BNGFPPEB@?$AAT?$AAo?$AAu?$AAc?$AAh?$AA?5?$AAP?$AAa?$AAn?$AAe?$AAl?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CM@GFKLDENM@?$AAK?$AAe?$AAy?$AAp?$AAa?$AAd?$AA?5?$AAB?$AAa?$AAc?$AAk?$AAl?$AAi?$AAg?$AAh?$AAt?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BE@DFLOJDLG@?$AAD?$AAR?$AAA?$AAM?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CG@MFOPBHMC@?$AAL?$AAC?$AAM?$AA?5?$AAB?$AAa?$AAc?$AAk?$AAl?$AAi?$AAg?$AAh?$AAt?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BK@FJOPBKKD@?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CE@NDBHKBD@?$AAA?$AAl?$AAl?$AA?5?$AAF?$AAu?$AAn?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|stall_1Sec| [ DATA ]
	EXPORT	|g_menu2170PTest| [ DATA ]
	EXPORT	|g_menuZ2000Test| [ DATA ]
	EXPORT	|pUartRegs| [ DATA ]

  00000			 AREA	 |.bss|, NOINIT
|pUartRegs| %	0x4

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@DFLFAFMD@?$AAE?$AAx?$AAi?$AAt?$AA?5?$AAa?$AAn?$AAd?$AA?5?$AAC?$AAo?$AAn?$AAt?$AAi?$AAn?$AAu?$AAe?$AA?$AA@| DCB "E"
	DCB	0x0, "x", 0x0, "i", 0x0, "t", 0x0, " ", 0x0, "a", 0x0, "n"
	DCB	0x0, "d", 0x0, " ", 0x0, "C", 0x0, "o", 0x0, "n", 0x0, "t"
	DCB	0x0, "i", 0x0, "n", 0x0, "u", 0x0, "e", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CC@DJCNJJMD@?$AAB?$AAa?$AAr?$AAc?$AAo?$AAd?$AAe?$AA?5?$AAS?$AAc?$AAa?$AAn?$AAn?$AAi?$AAn?$AAg?$AA?$AA@| DCB "B"
	DCB	0x0, "a", 0x0, "r", 0x0, "c", 0x0, "o", 0x0, "d", 0x0, "e"
	DCB	0x0, " ", 0x0, "S", 0x0, "c", 0x0, "a", 0x0, "n", 0x0, "n"
	DCB	0x0, "i", 0x0, "n", 0x0, "g", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@FKKAMPJP@?$AAL?$AAE?$AAD?$AA?5?$AAI?$AAn?$AAd?$AAi?$AAc?$AAa?$AAt?$AAo?$AAr?$AA?$AA@| DCB "L"
	DCB	0x0, "E", 0x0, "D", 0x0, " ", 0x0, "I", 0x0, "n", 0x0, "d"
	DCB	0x0, "i", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BK@KIOELMDE@?$AAB?$AAa?$AAt?$AAt?$AAe?$AAr?$AAy?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@| DCB "B"
	DCB	0x0, "a", 0x0, "t", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "y"
	DCB	0x0, " ", 0x0, "T", 0x0, "e", 0x0, "s", 0x0, "t", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CC@BNGFPPEB@?$AAT?$AAo?$AAu?$AAc?$AAh?$AA?5?$AAP?$AAa?$AAn?$AAe?$AAl?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@| DCB "T"
	DCB	0x0, "o", 0x0, "u", 0x0, "c", 0x0, "h", 0x0, " ", 0x0, "P"
	DCB	0x0, "a", 0x0, "n", 0x0, "e", 0x0, "l", 0x0, " ", 0x0, "T"
	DCB	0x0, "e", 0x0, "s", 0x0, "t", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@GFKLDENM@?$AAK?$AAe?$AAy?$AAp?$AAa?$AAd?$AA?5?$AAB?$AAa?$AAc?$AAk?$AAl?$AAi?$AAg?$AAh?$AAt?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@| DCB "K"
	DCB	0x0, "e", 0x0, "y", 0x0, "p", 0x0, "a", 0x0, "d", 0x0, " "
	DCB	0x0, "B", 0x0, "a", 0x0, "c", 0x0, "k", 0x0, "l", 0x0, "i"
	DCB	0x0, "g", 0x0, "h", 0x0, "t", 0x0, " ", 0x0, "T", 0x0, "e"
	DCB	0x0, "s", 0x0, "t", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BE@DFLOJDLG@?$AAD?$AAR?$AAA?$AAM?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@| DCB "D"
	DCB	0x0, "R", 0x0, "A", 0x0, "M", 0x0, " ", 0x0, "T", 0x0, "e"
	DCB	0x0, "s", 0x0, "t", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CG@MFOPBHMC@?$AAL?$AAC?$AAM?$AA?5?$AAB?$AAa?$AAc?$AAk?$AAl?$AAi?$AAg?$AAh?$AAt?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@| DCB "L"
	DCB	0x0, "C", 0x0, "M", 0x0, " ", 0x0, "B", 0x0, "a", 0x0, "c"
	DCB	0x0, "k", 0x0, "l", 0x0, "i", 0x0, "g", 0x0, "h", 0x0, "t"
	DCB	0x0, " ", 0x0, "T", 0x0, "e", 0x0, "s", 0x0, "t", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BK@FJOPBKKD@?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@| DCB "D"
	DCB	0x0, "i", 0x0, "s", 0x0, "p", 0x0, "l", 0x0, "a", 0x0, "y"
	DCB	0x0, " ", 0x0, "T", 0x0, "e", 0x0, "s", 0x0, "t", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@NDBHKBD@?$AAA?$AAl?$AAl?$AA?5?$AAF?$AAu?$AAn?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@| DCB "A"
	DCB	0x0, "l", 0x0, "l", 0x0, " ", 0x0, "F", 0x0, "u", 0x0, "n"
	DCB	0x0, "c", 0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, " "
	DCB	0x0, "T", 0x0, "e", 0x0, "s", 0x0, "t", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.data|, DATA
|stall_1Sec| DCD 0xf4240
	%	4
|g_menu2170PTest| DCW 0x31
	%	2
	DCD	|??_C@_1CE@NDBHKBD@?$AAA?$AAl?$AAl?$AA?5?$AAF?$AAu?$AAn?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@|
	DCD	|AllFunctionTest_Z2170P|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCW	0x32
	%	2
	DCD	|??_C@_1BK@FJOPBKKD@?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@|
	DCD	|DisplayTest_Z2170P|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCW	0x33
	%	2
	DCD	|??_C@_1CG@MFOPBHMC@?$AAL?$AAC?$AAM?$AA?5?$AAB?$AAa?$AAc?$AAk?$AAl?$AAi?$AAg?$AAh?$AAt?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@|
	DCD	|BkTest_Z2170P|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCW	0x34
	%	2
	DCD	|??_C@_1BE@DFLOJDLG@?$AAD?$AAR?$AAA?$AAM?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@|
	DCD	|DRAMTest_Z2170P|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCW	0x35
	%	2
	DCD	|??_C@_1CM@GFKLDENM@?$AAK?$AAe?$AAy?$AAp?$AAa?$AAd?$AA?5?$AAB?$AAa?$AAc?$AAk?$AAl?$AAi?$AAg?$AAh?$AAt?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@|
	DCD	|KeypadBkTest_Z2170P|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCW	0x36
	%	2
	DCD	|??_C@_1CC@BNGFPPEB@?$AAT?$AAo?$AAu?$AAc?$AAh?$AA?5?$AAP?$AAa?$AAn?$AAe?$AAl?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@|
	DCD	|TouchPanelTest_Z2170P|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCW	0x37
	%	2
	DCD	|??_C@_1BK@KIOELMDE@?$AAB?$AAa?$AAt?$AAt?$AAe?$AAr?$AAy?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@|
	DCD	|BatteryTest_Z2170P|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCW	0x38
	%	2
	DCD	|??_C@_1BM@FKKAMPJP@?$AAL?$AAE?$AAD?$AA?5?$AAI?$AAn?$AAd?$AAi?$AAc?$AAa?$AAt?$AAo?$AAr?$AA?$AA@|
	DCD	|LEDTest_Z2170P|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCW	0x39
	%	2
	DCD	|??_C@_1CC@DJCNJJMD@?$AAB?$AAa?$AAr?$AAc?$AAo?$AAd?$AAe?$AA?5?$AAS?$AAc?$AAa?$AAn?$AAn?$AAi?$AAn?$AAg?$AA?$AA@|
	DCD	|BarcodeTest_Z2170P|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCW	0x30
	%	2
	DCD	|??_C@_1CE@DFLFAFMD@?$AAE?$AAx?$AAi?$AAt?$AA?5?$AAa?$AAn?$AAd?$AA?5?$AAC?$AAo?$AAn?$AAt?$AAi?$AAn?$AAu?$AAe?$AA?$AA@|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCW	0x0
	%	2
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
|g_menuZ2000Test| DCW 0x31
	%	2
	DCD	|??_C@_1CE@NDBHKBD@?$AAA?$AAl?$AAl?$AA?5?$AAF?$AAu?$AAn?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@|
	DCD	|AllFunctionTest_Z2000|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCW	0x32
	%	2
	DCD	|??_C@_1BK@FJOPBKKD@?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@|
	DCD	|DisplayTest_Z2000|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCW	0x30
	%	2
	DCD	|??_C@_1CE@DFLFAFMD@?$AAE?$AAx?$AAi?$AAt?$AA?5?$AAa?$AAn?$AAd?$AA?5?$AAC?$AAo?$AAn?$AAt?$AAi?$AAn?$AAu?$AAe?$AA?$AA@|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCW	0x0
	%	2
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|??_C@_1CA@IPGENFE@?$AA?$AN?$AA?6?$AA?5?$AAR?$AAu?$AAn?$AAn?$AAi?$AAn?$AAg?$AA?4?$AA?4?$AA?4?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|DisplayShow|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|OALBLMenuHeader|
	IMPORT	|BLShowLogo|
; File c:\wince600\platform\z2170p\src\bootloader\eboot\functiontest.c

  00000			 AREA	 |.pdata|, PDATA
|$T47434| DCD	|$LN5@DisplayTes|
	DCD	0x40000b01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CA@IPGENFE@?$AA?$AN?$AA?6?$AA?5?$AAR?$AAu?$AAn?$AAn?$AAi?$AAn?$AAg?$AA?4?$AA?4?$AA?4?$AA?$AN?$AA?6?$AA?$AA@| DCB 0xd
	DCB	0x0, 0xa, 0x0, " ", 0x0, "R", 0x0, "u", 0x0, "n", 0x0, "n"
	DCB	0x0, "i", 0x0, "n", 0x0, "g", 0x0, ".", 0x0, ".", 0x0, "."
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DisplayTest_Z2170P| PROC

; 163  : {

  00000		 |$LN5@DisplayTes|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M47431|

; 164  :     BLShowLogo();

  00004	eb000000	 bl          BLShowLogo

; 165  :     OALBLMenuHeader(L"Display Test");

  00008	e59f0018	 ldr         r0, [pc, #0x18]
  0000c	eb000000	 bl          OALBLMenuHeader

; 166  : 	UNREFERENCED_PARAMETER(pMenu);
; 167  :     OALLog(L"\r\n Running...\r\n");

  00010	e59f000c	 ldr         r0, [pc, #0xC]
  00014	eb000000	 bl          NKDbgPrintfW

; 168  : 	//DisplayShow(BSP_Z2170P);
; 169  : 	DisplayShow();

  00018	eb000000	 bl          DisplayShow

; 170  : }

  0001c	e49de004	 ldr         lr, [sp], #4
  00020	e12fff1e	 bx          lr
  00024		 |$LN6@DisplayTes|
  00024		 |$LN7@DisplayTes|
  00024	00000000	 DCD         |??_C@_1CA@IPGENFE@?$AA?$AN?$AA?6?$AA?5?$AAR?$AAu?$AAn?$AAn?$AAi?$AAn?$AAg?$AA?4?$AA?4?$AA?4?$AA?$AN?$AA?6?$AA?$AA@|
  00028		 |$LN8@DisplayTes|
  00028	00000000	 DCD         |??_C@_1BK@FJOPBKKD@?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@|
  0002c		 |$M47432|

			 ENDP  ; |DisplayTest_Z2170P|

	EXPORT	|??_C@_1BA@POPOGCPP@?$AA?$AN?$AA?6?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_13BBDEGPLJ@?$AA?$CK?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CO@GBEKHDOH@?$AA?$AN?$AA?6?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?3?$AA?5?$AA0?$AAX?$AA?$CF?$AAX?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DE@LFDKHCLM@?$AA?$AN?$AA?6?$AA?5?$AA?$CB?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?5?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?3?$AA?5?$AA0?$AAX?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DE@KFOFBOBN@?$AA?$AN?$AA?6?$AA?5?$AA?$CB?$AAT?$AAe?$AAs?$AAt?$AA1?$AA?5?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?3?$AA?5?$AA0?$AAX?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DE@FOMMJKGJ@?$AA?$AN?$AA?6?$AA?5?$AA?$CB?$AAE?$AAn?$AAd?$AA?5?$AA?5?$AA?5?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?3?$AA?5?$AA0?$AAX?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FM@GKBCNJJJ@?$AA?$AN?$AA?6?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9@| [ DATA ] ; `string'
	EXPORT	|??_C@_15JNBOKNOG@?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|LcdStall|

  00000			 AREA	 |.pdata|, PDATA
|$T47448| DCD	|$LN13@DRAMTest_Z|
	DCD	0x40004001

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@POPOGCPP@?$AA?$AN?$AA?6?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB 0xd
	DCB	0x0, 0xa, 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_13BBDEGPLJ@?$AA?$CK?$AA?$AA@| DCB "*", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@GBEKHDOH@?$AA?$AN?$AA?6?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?3?$AA?5?$AA0?$AAX?$AA?$CF?$AAX?$AA?$AA@| DCB 0xd
	DCB	0x0, 0xa, 0x0, " ", 0x0, "E", 0x0, "r", 0x0, "r", 0x0, "o"
	DCB	0x0, "r", 0x0, " ", 0x0, "A", 0x0, "d", 0x0, "d", 0x0, "r"
	DCB	0x0, "e", 0x0, "s", 0x0, "s", 0x0, ":", 0x0, " ", 0x0, "0"
	DCB	0x0, "X", 0x0, "%", 0x0, "X", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DE@LFDKHCLM@?$AA?$AN?$AA?6?$AA?5?$AA?$CB?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?5?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?3?$AA?5?$AA0?$AAX?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AA@| DCB 0xd
	DCB	0x0, 0xa, 0x0, " ", 0x0, "!", 0x0, "S", 0x0, "t", 0x0, "a"
	DCB	0x0, "r", 0x0, "t", 0x0, " ", 0x0, "A", 0x0, "d", 0x0, "d"
	DCB	0x0, "r", 0x0, "e", 0x0, "s", 0x0, "s", 0x0, ":", 0x0, " "
	DCB	0x0, "0", 0x0, "X", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DE@KFOFBOBN@?$AA?$AN?$AA?6?$AA?5?$AA?$CB?$AAT?$AAe?$AAs?$AAt?$AA1?$AA?5?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?3?$AA?5?$AA0?$AAX?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AA@| DCB 0xd
	DCB	0x0, 0xa, 0x0, " ", 0x0, "!", 0x0, "T", 0x0, "e", 0x0, "s"
	DCB	0x0, "t", 0x0, "1", 0x0, " ", 0x0, "A", 0x0, "d", 0x0, "d"
	DCB	0x0, "r", 0x0, "e", 0x0, "s", 0x0, "s", 0x0, ":", 0x0, " "
	DCB	0x0, "0", 0x0, "X", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DE@FOMMJKGJ@?$AA?$AN?$AA?6?$AA?5?$AA?$CB?$AAE?$AAn?$AAd?$AA?5?$AA?5?$AA?5?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?3?$AA?5?$AA0?$AAX?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AA@| DCB 0xd
	DCB	0x0, 0xa, 0x0, " ", 0x0, "!", 0x0, "E", 0x0, "n", 0x0, "d"
	DCB	0x0, " ", 0x0, " ", 0x0, " ", 0x0, "A", 0x0, "d", 0x0, "d"
	DCB	0x0, "r", 0x0, "e", 0x0, "s", 0x0, "s", 0x0, ":", 0x0, " "
	DCB	0x0, "0", 0x0, "X", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FM@GKBCNJJJ@?$AA?$AN?$AA?6?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9@| DCB 0xd
	DCB	0x0, 0xa, 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_15JNBOKNOG@?$AA?$AN?$AA?6?$AA?$AA@| DCB 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DRAMTest_Z2170P| PROC

; 197  : {

  00000		 |$LN13@DRAMTest_Z|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004		 |$M47445|

; 198  :     ULONG  startAddress = IMAGE_SHARE_ARGS_CA;
; 199  :     ULONG  endAddress = startAddress|(256 *1024 *1024 -1); //endAddress = startAddress + size(256MB) 
; 200  :     ULONG   test1_Address = (startAddress|0x0000FFFF);      //
; 201  :     //ULONG   test2_Address = (startAddress|0x0FFFFF00);
; 202  :     //ULONG   ebootAddress = IMAGE_EBOOT_CODE_CA ;
; 203  :     ULONG   i, testAddress =  0xFFFFFFFF;
; 204  :     BYTE    value, temp, pattern = 0x1A; 
; 205  :     //ULONG   percentRange;
; 206  :     ULONG   percent;        
; 207  :  
; 208  :    
; 209  :     
; 210  : 	UNREFERENCED_PARAMETER(pMenu);
; 211  : 	OALBLMenuHeader(L"DRAM Test");

  00004	e59f00f0	 ldr         r0, [pc, #0xF0]
  00008	eb000000	 bl          OALBLMenuHeader

; 212  : 
; 213  : 	//percentRange = (endAddress - startAddress)/100;
; 214  :     OALLog(L"\r\n !Start Address: 0X%08X", (startAddress&testAddress));

  0000c	e59f00e4	 ldr         r0, [pc, #0xE4]
  00010	e3a01102	 mov         r1, #2, 2
  00014	eb000000	 bl          NKDbgPrintfW

; 215  :     OALLog(L"\r\n !Test1 Address: 0X%08X", (test1_Address&testAddress));

  00018	e59f00d4	 ldr         r0, [pc, #0xD4]
  0001c	e3e0347f	 mvn         r3, #0x7F, 8
  00020	e22318ff	 eor         r1, r3, #0xFF, 16
  00024	eb000000	 bl          NKDbgPrintfW

; 216  :     //OALLog(L"\r\n !Test2 Address: 0X%08X", (test2_Address&test));
; 217  :     OALLog(L"\r\n !End   Address: 0X%08X", (endAddress&testAddress));

  00028	e59f00c0	 ldr         r0, [pc, #0xC0]
  0002c	e3e01207	 mvn         r1, #7, 4
  00030	eb000000	 bl          NKDbgPrintfW

; 218  :     OALLog(L"\r\n------------------------------------------\n");

  00034	e59f00b0	 ldr         r0, [pc, #0xB0]
  00038	eb000000	 bl          NKDbgPrintfW

; 219  :   
; 220  : 	/*for(i=0, percent=0; i<(test1_Address - startAddress); i++)
; 221  : 	{
; 222  :         temp = *(volatile BYTE *)(startAddress + i);        //read data     ;temp(0x8000_0000) to get a address 
; 223  :         *(volatile BYTE *)(startAddress + i) = pattern;     //write pattern ;pattern write into address(1A) 
; 224  :         value = *(volatile BYTE *)(startAddress + i);       //read pattern  ;value == 1A, setup value
; 225  :         *(volatile BYTE *)(startAddress + i) = temp;        //store data
; 226  : 
; 227  :         if(value != pattern)                                //check value(in address value) equal pattern
; 228  :         {
; 229  :             OALLog(L"\r\n Error Address: 0X%X", startAddress+i);
; 230  :         }else{
; 231  :             percent++;
; 232  :             OALLog(L"\r\n Decoding Memoey percent: %d >>>  Address: 0X%X",percent, startAddress+i);   
; 233  :             //OALLog(L"\r\n Address: 0X%X", startAddress+i);
; 234  :         }
; 235  : 
; 236  :         if( (percent%10) == 0){
; 237  :             OALLog(L"\r\n-----------------------------------\n");
; 238  :             LcdStall(stall_1Sec); 
; 239  :         }
; 240  : 	}
; 241  :     OALLog(L"\r\n");
; 242  :     LcdStall(stall_1Sec*3);*/
; 243  : 
; 244  :     OALLog(L"\r\n");

  0003c	e59f0090	 ldr         r0, [pc, #0x90]
  00040	eb000000	 bl          NKDbgPrintfW
  00044	e3a03cff	 mov         r3, #0xFF, 24
  00048	e38350ff	 orr         r5, r3, #0xFF
  0004c	e3a03c03	 mov         r3, #3, 24
  00050	e59f7090	 ldr         r7, [pc, #0x90]
  00054	e59f8088	 ldr         r8, [pc, #0x88]
  00058	e38360ff	 orr         r6, r3, #0xFF
  0005c	e3a04102	 mov         r4, #2, 2
  00060	e3a0901a	 mov         r9, #0x1A
  00064		 |$LL6@DRAMTest_Z|

; 245  :     for(i=0, percent=1; i<(test1_Address - startAddress); i++, percent++)
; 246  : 	{
; 247  :         temp = *(volatile BYTE *)(startAddress + i);        //read data     ;temp(0x8000_0000) to get a address 

  00064	e5d42000	 ldrb        r2, [r4]

; 248  :         *(volatile BYTE *)(startAddress + i) = pattern;     //write pattern ;pattern write into address(1A) 

  00068	e5c49000	 strb        r9, [r4]

; 249  :         value = *(volatile BYTE *)(startAddress + i);       //read pattern  ;value == 1A, setup value

  0006c	e5d43000	 ldrb        r3, [r4]

; 250  :         *(volatile BYTE *)(startAddress + i) = temp;        //store data

  00070	e5c42000	 strb        r2, [r4]

; 251  :         
; 252  :         if(value != pattern)                                //check value(in address value) equal pattern

  00074	e353001a	 cmp         r3, #0x1A
  00078	0a000003	 beq         |$LN3@DRAMTest_Z|

; 253  :         {
; 254  :             OALLog(L"\r\n Error Address: 0X%X", startAddress+i);

  0007c	e59f005c	 ldr         r0, [pc, #0x5C]
  00080	e1a01004	 mov         r1, r4
  00084	eb000000	 bl          NKDbgPrintfW

; 255  :         }else{

  00088	ea000001	 b           |$LN2@DRAMTest_Z|
  0008c		 |$LN3@DRAMTest_Z|

; 256  :             OALLog(L"*");

  0008c	e59f0048	 ldr         r0, [pc, #0x48]
  00090	eb000000	 bl          NKDbgPrintfW
  00094		 |$LN2@DRAMTest_Z|

; 257  :             //percent++;
; 258  :             //OALLog(L"\r\n Decoding Memoey percent: %d >>>  Address: 0X%X",percent, test2_Address+i);   
; 259  :             //OALLog(L"\r\n Address: 0X%X", startAddress+i);
; 260  :         }
; 261  : 
; 262  :         if( (percent%1024) == 0){   //scan 1k show tip 

  00094	e2841106	 add         r1, r4, #6, 2
  00098	e1110006	 tst         r1, r6
  0009c	1a000005	 bne         |$LN5@DRAMTest_Z|

; 263  :             OALLog(L"\r\n %d\r\n",percent);

  000a0	e59f0030	 ldr         r0, [pc, #0x30]
  000a4	eb000000	 bl          NKDbgPrintfW

; 264  :             LcdStall(stall_1Sec/1000); 

  000a8	e5971000	 ldr         r1, [r7]
  000ac	e0832891	 umull       r2, r3, r1, r8
  000b0	e1a00323	 mov         r0, r3, lsr #6
  000b4	eb000000	 bl          LcdStall
  000b8		 |$LN5@DRAMTest_Z|
  000b8	e2844001	 add         r4, r4, #1
  000bc	e2555001	 subs        r5, r5, #1
  000c0	1affffe7	 bne         |$LL6@DRAMTest_Z|

; 265  :         }
; 266  : 	}
; 267  :     OALLog(L"\r\n");

  000c4	e59f0008	 ldr         r0, [pc, #8]
  000c8	eb000000	 bl          NKDbgPrintfW

; 268  : 
; 269  :     //LcdStall(stall_1Sec*3); 
; 270  :     
; 271  : 	/*for(i=0, Round=1; i<0xFF; i++)                         //Testing eboot, Ray  131113
; 272  :     {
; 273  :         if(i==65)
; 274  :         {
; 275  :             temp = *(volatile BYTE *)(startAddress + i);        //read data     ;temp(0x8000_0000) to get a address 
; 276  :             *(volatile BYTE *)(startAddress + i) = pattern;     //write pattern ;pattern write into address(1A) 
; 277  :             value = *(volatile BYTE *)(startAddress + i);       //read pattern  ;value == 1A, setup value
; 278  :             *(volatile BYTE *)(startAddress + i) = temp;        //store data   
; 279  :             if(value != pattern)                                //check value(in address value) equal pattern
; 280  :             {
; 281  :                 OALLog(L"\r\n Error Address: 0X%X", (ebootAddress+i));
; 282  :             }
; 283  :         }
; 284  : 
; 285  :         OALLog(L"\r\n Eboot Address: 0x%08x, Value = 0x%08x", (ebootAddress+i),*(volatile BYTE *)(ebootAddress+i));
; 286  :         
; 287  :         if((Round%16)== 0)
; 288  :         {
; 289  :             OALLog(L"\r\n Round %d",Round);
; 290  :             OALLog(L"\r\n---------------------\n"); 
; 291  :             Round++;
; 292  :         }
; 293  :     }*/
; 294  : }

  000cc	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  000d0	e12fff1e	 bx          lr
  000d4		 |$LN14@DRAMTest_Z|
  000d4		 |$LN15@DRAMTest_Z|
  000d4	00000000	 DCD         |??_C@_15JNBOKNOG@?$AA?$AN?$AA?6?$AA?$AA@|
  000d8		 |$LN16@DRAMTest_Z|
  000d8	00000000	 DCD         |??_C@_1BA@POPOGCPP@?$AA?$AN?$AA?6?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  000dc		 |$LN17@DRAMTest_Z|
  000dc	00000000	 DCD         |??_C@_13BBDEGPLJ@?$AA?$CK?$AA?$AA@|
  000e0		 |$LN18@DRAMTest_Z|
  000e0	00000000	 DCD         |??_C@_1CO@GBEKHDOH@?$AA?$AN?$AA?6?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?3?$AA?5?$AA0?$AAX?$AA?$CF?$AAX?$AA?$AA@|
  000e4		 |$LN19@DRAMTest_Z|
  000e4	10624dd3	 DCD         0x10624dd3
  000e8		 |$LN20@DRAMTest_Z|
  000e8	00000000	 DCD         |stall_1Sec|
  000ec		 |$LN21@DRAMTest_Z|
  000ec	00000000	 DCD         |??_C@_1FM@GKBCNJJJ@?$AA?$AN?$AA?6?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9@|
  000f0		 |$LN22@DRAMTest_Z|
  000f0	00000000	 DCD         |??_C@_1DE@FOMMJKGJ@?$AA?$AN?$AA?6?$AA?5?$AA?$CB?$AAE?$AAn?$AAd?$AA?5?$AA?5?$AA?5?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?3?$AA?5?$AA0?$AAX?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AA@|
  000f4		 |$LN23@DRAMTest_Z|
  000f4	00000000	 DCD         |??_C@_1DE@KFOFBOBN@?$AA?$AN?$AA?6?$AA?5?$AA?$CB?$AAT?$AAe?$AAs?$AAt?$AA1?$AA?5?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?3?$AA?5?$AA0?$AAX?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AA@|
  000f8		 |$LN24@DRAMTest_Z|
  000f8	00000000	 DCD         |??_C@_1DE@LFDKHCLM@?$AA?$AN?$AA?6?$AA?5?$AA?$CB?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?5?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?3?$AA?5?$AA0?$AAX?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AA@|
  000fc		 |$LN25@DRAMTest_Z|
  000fc	00000000	 DCD         |??_C@_1BE@DFLOJDLG@?$AAD?$AAR?$AAA?$AAM?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@|
  00100		 |$M47446|

			 ENDP  ; |DRAMTest_Z2170P|

	EXPORT	|??_C@_1EC@NLKOKMKL@?$AA?$AN?$AA?5?$AA?$CB?$AAN?$AAo?$AAw?$AA?5?$AAK?$AAe?$AAy?$AAp?$AAa?$AAd?$AA?5?$AAL?$AAE?$AAD?$AA?5?$AAf?$AAi?$AAr?$AAs?$AAt?$AA?5?$AAf?$AAl?$AAa?$AAs?$AAh?$AA?5?$AA?$AN?$AA?6@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EC@MFHKLEP@?$AA?$AN?$AA?5?$AA?$CB?$AAN?$AAo?$AAw?$AA?5?$AAK?$AAe?$AAy?$AAp?$AAa?$AAd?$AA?5?$AAL?$AAE?$AAD?$AA?5?$AAt?$AAw?$AAi?$AAc?$AAe?$AA?5?$AAf?$AAl?$AAa?$AAs?$AAh?$AA?5?$AA?$AN?$AA?6@| [ DATA ] ; `string'
	IMPORT	|GPIOClose|
	IMPORT	|LcdSleep|
	IMPORT	|GPIOSetBit|
	IMPORT	|GPIOClrBit|
	IMPORT	|GPIOOpen|

  00000			 AREA	 |.pdata|, PDATA
|$T47468| DCD	|$LN5@KeypadBkTe|
	DCD	0x40002601

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EC@NLKOKMKL@?$AA?$AN?$AA?5?$AA?$CB?$AAN?$AAo?$AAw?$AA?5?$AAK?$AAe?$AAy?$AAp?$AAa?$AAd?$AA?5?$AAL?$AAE?$AAD?$AA?5?$AAf?$AAi?$AAr?$AAs?$AAt?$AA?5?$AAf?$AAl?$AAa?$AAs?$AAh?$AA?5?$AA?$AN?$AA?6@| DCB 0xd
	DCB	0x0, " ", 0x0, "!", 0x0, "N", 0x0, "o", 0x0, "w", 0x0, " "
	DCB	0x0, "K", 0x0, "e", 0x0, "y", 0x0, "p", 0x0, "a", 0x0, "d"
	DCB	0x0, " ", 0x0, "L", 0x0, "E", 0x0, "D", 0x0, " ", 0x0, "f"
	DCB	0x0, "i", 0x0, "r", 0x0, "s", 0x0, "t", 0x0, " ", 0x0, "f"
	DCB	0x0, "l", 0x0, "a", 0x0, "s", 0x0, "h", 0x0, " ", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EC@MFHKLEP@?$AA?$AN?$AA?5?$AA?$CB?$AAN?$AAo?$AAw?$AA?5?$AAK?$AAe?$AAy?$AAp?$AAa?$AAd?$AA?5?$AAL?$AAE?$AAD?$AA?5?$AAt?$AAw?$AAi?$AAc?$AAe?$AA?5?$AAf?$AAl?$AAa?$AAs?$AAh?$AA?5?$AA?$AN?$AA?6@| DCB 0xd
	DCB	0x0, " ", 0x0, "!", 0x0, "N", 0x0, "o", 0x0, "w", 0x0, " "
	DCB	0x0, "K", 0x0, "e", 0x0, "y", 0x0, "p", 0x0, "a", 0x0, "d"
	DCB	0x0, " ", 0x0, "L", 0x0, "E", 0x0, "D", 0x0, " ", 0x0, "t"
	DCB	0x0, "w", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, " ", 0x0, "f"
	DCB	0x0, "l", 0x0, "a", 0x0, "s", 0x0, "h", 0x0, " ", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |KeypadBkTest_Z2170P| PROC

; 300  : {

  00000		 |$LN5@KeypadBkTe|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M47465|

; 301  : 	DWORD delay = 1000;
; 302  : 	HANDLE hGPIO;
; 303  : 	UNREFERENCED_PARAMETER(pMenu);
; 304  : 	OALBLMenuHeader(L"Keypad Backlight Test");

  00004	e59f0088	 ldr         r0, [pc, #0x88]
  00008	eb000000	 bl          OALBLMenuHeader

; 305  : 
; 306  :     hGPIO = GPIOOpen();

  0000c	eb000000	 bl          GPIOOpen

; 307  : 
; 308  :     GPIOClrBit(hGPIO, KP_LED_SET_GPIO);

  00010	e3a0109b	 mov         r1, #0x9B
  00014	e1a04000	 mov         r4, r0
  00018	eb000000	 bl          GPIOClrBit

; 309  :     LcdStall(1);

  0001c	e3a00001	 mov         r0, #1
  00020	eb000000	 bl          LcdStall

; 310  :     GPIOSetBit(hGPIO, KP_LED_SET_GPIO);

  00024	e3a0109b	 mov         r1, #0x9B
  00028	e1a00004	 mov         r0, r4
  0002c	eb000000	 bl          GPIOSetBit

; 311  :     OALLog(L"\r !Now Keypad LED first flash \r\n");

  00030	e59f0058	 ldr         r0, [pc, #0x58]
  00034	eb000000	 bl          NKDbgPrintfW

; 312  :     LcdSleep(delay*2);

  00038	e3a00e7d	 mov         r0, #0x7D, 28
  0003c	eb000000	 bl          LcdSleep

; 313  :     
; 314  :     
; 315  :     GPIOClrBit(hGPIO, KP_LED_SET_GPIO);

  00040	e3a0109b	 mov         r1, #0x9B
  00044	e1a00004	 mov         r0, r4
  00048	eb000000	 bl          GPIOClrBit

; 316  :     LcdStall(delay);

  0004c	e3a00ffa	 mov         r0, #0xFA, 30
  00050	eb000000	 bl          LcdStall

; 317  :     GPIOSetBit(hGPIO, KP_LED_SET_GPIO);

  00054	e3a0109b	 mov         r1, #0x9B
  00058	e1a00004	 mov         r0, r4
  0005c	eb000000	 bl          GPIOSetBit

; 318  :     OALLog(L"\r !Now Keypad LED twice flash \r\n");

  00060	e59f0024	 ldr         r0, [pc, #0x24]
  00064	eb000000	 bl          NKDbgPrintfW

; 319  :     LcdSleep(delay*2);

  00068	e3a00e7d	 mov         r0, #0x7D, 28
  0006c	eb000000	 bl          LcdSleep

; 320  : 
; 321  :     GPIOClrBit(hGPIO, KP_LED_SET_GPIO);

  00070	e3a0109b	 mov         r1, #0x9B
  00074	e1a00004	 mov         r0, r4
  00078	eb000000	 bl          GPIOClrBit

; 322  : 
; 323  :     GPIOClose(hGPIO);

  0007c	e1a00004	 mov         r0, r4
  00080	eb000000	 bl          GPIOClose

; 324  : 
; 325  : }

  00084	e8bd4010	 ldmia       sp!, {r4, lr}
  00088	e12fff1e	 bx          lr
  0008c		 |$LN6@KeypadBkTe|
  0008c		 |$LN7@KeypadBkTe|
  0008c	00000000	 DCD         |??_C@_1EC@MFHKLEP@?$AA?$AN?$AA?5?$AA?$CB?$AAN?$AAo?$AAw?$AA?5?$AAK?$AAe?$AAy?$AAp?$AAa?$AAd?$AA?5?$AAL?$AAE?$AAD?$AA?5?$AAt?$AAw?$AAi?$AAc?$AAe?$AA?5?$AAf?$AAl?$AAa?$AAs?$AAh?$AA?5?$AA?$AN?$AA?6@|
  00090		 |$LN8@KeypadBkTe|
  00090	00000000	 DCD         |??_C@_1EC@NLKOKMKL@?$AA?$AN?$AA?5?$AA?$CB?$AAN?$AAo?$AAw?$AA?5?$AAK?$AAe?$AAy?$AAp?$AAa?$AAd?$AA?5?$AAL?$AAE?$AAD?$AA?5?$AAf?$AAi?$AAr?$AAs?$AAt?$AA?5?$AAf?$AAl?$AAa?$AAs?$AAh?$AA?5?$AA?$AN?$AA?6@|
  00094		 |$LN9@KeypadBkTe|
  00094	00000000	 DCD         |??_C@_1CM@GFKLDENM@?$AAK?$AAe?$AAy?$AAp?$AAa?$AAd?$AA?5?$AAB?$AAa?$AAc?$AAk?$AAl?$AAi?$AAg?$AAh?$AAt?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@|
  00098		 |$M47466|

			 ENDP  ; |KeypadBkTest_Z2170P|

	EXPORT	|SetBacklight|
	EXPORT	|??_C@_1FE@PFEMMGFN@?$AA?$AN?$AA?5?$AA?$CB?$AAP?$AAl?$AAu?$AAs?$AA?5?$AAa?$AAf?$AAt?$AAe?$AAr?$AA?5?$AAb?$AAr?$AAi?$AAg?$AAh?$AAt?$AAn?$AAe?$AAs?$AAs?$AA?5?$AAs?$AAc?$AAa?$AAl?$AAe?$AA?5?$AAa@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T47484| DCD	|$LN12@SetBacklig|
	DCD	0x40004702

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FE@PFEMMGFN@?$AA?$AN?$AA?5?$AA?$CB?$AAP?$AAl?$AAu?$AAs?$AA?5?$AAa?$AAf?$AAt?$AAe?$AAr?$AA?5?$AAb?$AAr?$AAi?$AAg?$AAh?$AAt?$AAn?$AAe?$AAs?$AAs?$AA?5?$AAs?$AAc?$AAa?$AAl?$AAe?$AA?5?$AAa@| DCB 0xd
	DCB	0x0, " ", 0x0, "!", 0x0, "P", 0x0, "l", 0x0, "u", 0x0, "s"
	DCB	0x0, " ", 0x0, "a", 0x0, "f", 0x0, "t", 0x0, "e", 0x0, "r"
	DCB	0x0, " ", 0x0, "b", 0x0, "r", 0x0, "i", 0x0, "g", 0x0, "h"
	DCB	0x0, "t", 0x0, "n", 0x0, "e", 0x0, "s", 0x0, "s", 0x0, " "
	DCB	0x0, "s", 0x0, "c", 0x0, "a", 0x0, "l", 0x0, "e", 0x0, " "
	DCB	0x0, "a", 0x0, "t", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, " "
	DCB	0x0, "%", 0x0, "%", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SetBacklight| PROC

; 329  : {

  00000		 |$LN12@SetBacklig|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004	e24dd02c	 sub         sp, sp, #0x2C
  00008		 |$M47481|

; 330  :     HANDLE hGPIO;
; 331  :     //WCHAR key;
; 332  :     int i, value, k, scale = 0;    
; 333  :     int AAT3123Code[11] = { 1, 4 , 7, 10, 13, 16, 19, 22, 25, 28, 32};

  00008	e3a07019	 mov         r7, #0x19
  0000c	e3a03001	 mov         r3, #1
  00010	e3a02004	 mov         r2, #4
  00014	e3a01007	 mov         r1, #7
  00018	e3a0000a	 mov         r0, #0xA
  0001c	e3a0e00d	 mov         lr, #0xD
  00020	e3a04010	 mov         r4, #0x10
  00024	e3a05013	 mov         r5, #0x13
  00028	e3a06016	 mov         r6, #0x16
  0002c	e3a0801c	 mov         r8, #0x1C
  00030	e3a09020	 mov         r9, #0x20
  00034	e58d7020	 str         r7, [sp, #0x20]
  00038	e3a07000	 mov         r7, #0
  0003c	e58d3000	 str         r3, [sp]
  00040	e58d2004	 str         r2, [sp, #4]
  00044	e58d1008	 str         r1, [sp, #8]
  00048	e58d000c	 str         r0, [sp, #0xC]
  0004c	e58de010	 str         lr, [sp, #0x10]
  00050	e58d4014	 str         r4, [sp, #0x14]
  00054	e58d5018	 str         r5, [sp, #0x18]
  00058	e58d601c	 str         r6, [sp, #0x1C]
  0005c	e58d8024	 str         r8, [sp, #0x24]
  00060	e58d9028	 str         r9, [sp, #0x28]

; 334  :                           //0  10  20  30 40  50  60  70  80  90  100
; 335  :    
; 336  :     hGPIO = GPIOOpen();

  00064	eb000000	 bl          GPIOOpen

; 337  : 
; 338  :     GPIOClrBit(hGPIO, BK_SET_GPIO);

  00068	e3a0103d	 mov         r1, #0x3D
  0006c	e1a05000	 mov         r5, r0
  00070	eb000000	 bl          GPIOClrBit

; 339  :     LcdStall(stall_1Sec); 

  00074	e59f809c	 ldr         r8, [pc, #0x9C]
  00078	e5980000	 ldr         r0, [r8]
  0007c	eb000000	 bl          LcdStall

; 340  :             
; 341  :     for(i=1, k=0; i<=32; i++)

  00080	e3a04001	 mov         r4, #1
  00084	e28d6000	 add         r6, sp, #0
  00088		 |$LL5@SetBacklig|

; 342  :     {
; 343  :         if(i == (value = AAT3123Code[k]))

  00088	e5963000	 ldr         r3, [r6]

; 344  :         {
; 345  :             GPIOClrBit(hGPIO, BK_SET_GPIO);

  0008c	e3a0103d	 mov         r1, #0x3D
  00090	e1a00005	 mov         r0, r5
  00094	e1540003	 cmp         r4, r3
  00098	1a00000d	 bne         |$LN2@SetBacklig|
  0009c	eb000000	 bl          GPIOClrBit

; 346  :             LcdStall(1);

  000a0	e3a00001	 mov         r0, #1
  000a4	eb000000	 bl          LcdStall

; 347  :             GPIOSetBit(hGPIO, BK_SET_GPIO);

  000a8	e3a0103d	 mov         r1, #0x3D
  000ac	e1a00005	 mov         r0, r5
  000b0	eb000000	 bl          GPIOSetBit

; 348  :             LcdStall(stall_1Sec);

  000b4	e5980000	 ldr         r0, [r8]
  000b8	eb000000	 bl          LcdStall

; 349  :             OALLog(L"\r !Plus after brightness scale at %d %%\r\n",scale);

  000bc	e59f0050	 ldr         r0, [pc, #0x50]
  000c0	e1a01007	 mov         r1, r7
  000c4	eb000000	 bl          NKDbgPrintfW

; 350  :             scale+=10;

  000c8	e287700a	 add         r7, r7, #0xA

; 351  :             k++;

  000cc	e2866004	 add         r6, r6, #4

; 352  :         }else{

  000d0	ea000007	 b           |$LN4@SetBacklig|
  000d4		 |$LN2@SetBacklig|

; 353  :             GPIOClrBit(hGPIO, BK_SET_GPIO);

  000d4	eb000000	 bl          GPIOClrBit

; 354  :             LcdStall(1);

  000d8	e3a00001	 mov         r0, #1
  000dc	eb000000	 bl          LcdStall

; 355  :             GPIOSetBit(hGPIO, BK_SET_GPIO);

  000e0	e3a0103d	 mov         r1, #0x3D
  000e4	e1a00005	 mov         r0, r5
  000e8	eb000000	 bl          GPIOSetBit

; 356  :             LcdStall(1);

  000ec	e3a00001	 mov         r0, #1
  000f0	eb000000	 bl          LcdStall
  000f4		 |$LN4@SetBacklig|
  000f4	e2844001	 add         r4, r4, #1
  000f8	e3540020	 cmp         r4, #0x20
  000fc	daffffe1	 ble         |$LL5@SetBacklig|

; 357  :         }
; 358  :     }   
; 359  :     /*for (i=0; i<BK_EXIT; i++)
; 360  :     {
; 361  :         OALLog(L" [%d] %s\r\n", i+1, lcmBacklight[i].bkName);
; 362  : 	}
; 363  :     OALLog(L" [0] Exit and Continue\r\n");*/
; 364  : 
; 365  :     //OALLog(L"\r\n Selection : ");
; 366  : 
; 367  :     /*do{ 
; 368  :         key = OALBLMenuReadKey(TRUE);
; 369  :     }while(key < L'0' || key > L'0' + i);
; 370  :     // Show selection
; 371  : 	OALLog(L"%c\r\n", key);*/
; 372  : 	
; 373  :     /*switch(key)
; 374  :     {
; 375  :          case L'1':
; 376  :              GPIOClrBit(hGPIO, BK_SET_GPIO);
; 377  :              LcdStall(stall_1Sec); 
; 378  :             
; 379  :              for(i=1, k=0; i<=32; i++)
; 380  :              {
; 381  :                 if(i == (value = AAT3123Code[k]))
; 382  :                 {
; 383  :                     GPIOClrBit(hGPIO, BK_SET_GPIO);
; 384  :                     LcdStall(1);
; 385  :                     GPIOSetBit(hGPIO, BK_SET_GPIO);
; 386  :                     LcdStall(stall_1Sec);
; 387  :                     OALLog(L"\r !Plus after brightness scale at %d %%\r\n",scale);
; 388  :                     scale+=10;
; 389  :                     k++;
; 390  :                 }else{
; 391  :                     GPIOClrBit(hGPIO, BK_SET_GPIO);
; 392  :                     LcdStall(1);
; 393  :                     GPIOSetBit(hGPIO, BK_SET_GPIO);
; 394  :                     LcdStall(1);
; 395  :                 }
; 396  :             }
; 397  :             break;
; 398  :          case L'2':
; 399  :              for(i=1; i<=22; i++)
; 400  :              {
; 401  :                  GPIOClrBit(hGPIO, BK_SET_GPIO);
; 402  :                  LcdStall(1);
; 403  :                  GPIOSetBit(hGPIO, BK_SET_GPIO);
; 404  :                  LcdStall(1);
; 405  :              }
; 406  :              OALLog(L"\r !Now Backlight ON,default scale at 70%%\r\n");
; 407  :              break;
; 408  :          case L'3':
; 409  :              GPIOClrBit(hGPIO, BK_SET_GPIO);
; 410  :              LcdStall(1);
; 411  :              OALLog(L"\r !Now Backlight OFF\r\n");
; 412  :              break;
; 413  :     }*/
; 414  :     GPIOClose(hGPIO);

  00100	e1a00005	 mov         r0, r5
  00104	eb000000	 bl          GPIOClose

; 415  :     
; 416  :     //if (key == L'0') return;    
; 417  : }

  00108	e28dd02c	 add         sp, sp, #0x2C
  0010c	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  00110	e12fff1e	 bx          lr
  00114		 |$LN13@SetBacklig|
  00114		 |$LN14@SetBacklig|
  00114	00000000	 DCD         |??_C@_1FE@PFEMMGFN@?$AA?$AN?$AA?5?$AA?$CB?$AAP?$AAl?$AAu?$AAs?$AA?5?$AAa?$AAf?$AAt?$AAe?$AAr?$AA?5?$AAb?$AAr?$AAi?$AAg?$AAh?$AAt?$AAn?$AAe?$AAs?$AAs?$AA?5?$AAs?$AAc?$AAa?$AAl?$AAe?$AA?5?$AAa@|
  00118		 |$LN15@SetBacklig|
  00118	00000000	 DCD         |stall_1Sec|
  0011c		 |$M47482|

			 ENDP  ; |SetBacklight|

	EXPORT	|??_C@_1DG@MPNEEBCD@?$AA?$AN?$AA?5?$AAT?$AAo?$AAu?$AAc?$AAh?$AA?5?$AAP?$AAa?$AAn?$AAe?$AAl?$AA?5?$AAR?$AAu?$AAn?$AAn?$AAi?$AAn?$AAg?$AA?4?$AA?4?$AA?4?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CO@CGGKAMLC@?$AA?$AN?$AA?5?$AAT?$AAo?$AAu?$AAc?$AAh?$AA?5?$AAP?$AAa?$AAn?$AAe?$AAl?$AA?5?$AAE?$AAn?$AAd?$AA?4?$AA?4?$AA?4?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|tsc2046Test|

  00000			 AREA	 |.pdata|, PDATA
|$T47494| DCD	|$LN5@TouchPanel|
	DCD	0x40000d01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DG@MPNEEBCD@?$AA?$AN?$AA?5?$AAT?$AAo?$AAu?$AAc?$AAh?$AA?5?$AAP?$AAa?$AAn?$AAe?$AAl?$AA?5?$AAR?$AAu?$AAn?$AAn?$AAi?$AAn?$AAg?$AA?4?$AA?4?$AA?4?$AA?$AN?$AA?6?$AA?$AA@| DCB 0xd
	DCB	0x0, " ", 0x0, "T", 0x0, "o", 0x0, "u", 0x0, "c", 0x0, "h"
	DCB	0x0, " ", 0x0, "P", 0x0, "a", 0x0, "n", 0x0, "e", 0x0, "l"
	DCB	0x0, " ", 0x0, "R", 0x0, "u", 0x0, "n", 0x0, "n", 0x0, "i"
	DCB	0x0, "n", 0x0, "g", 0x0, ".", 0x0, ".", 0x0, ".", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@CGGKAMLC@?$AA?$AN?$AA?5?$AAT?$AAo?$AAu?$AAc?$AAh?$AA?5?$AAP?$AAa?$AAn?$AAe?$AAl?$AA?5?$AAE?$AAn?$AAd?$AA?4?$AA?4?$AA?4?$AA?$AN?$AA?6?$AA?$AA@| DCB 0xd
	DCB	0x0, " ", 0x0, "T", 0x0, "o", 0x0, "u", 0x0, "c", 0x0, "h"
	DCB	0x0, " ", 0x0, "P", 0x0, "a", 0x0, "n", 0x0, "e", 0x0, "l"
	DCB	0x0, " ", 0x0, "E", 0x0, "n", 0x0, "d", 0x0, ".", 0x0, "."
	DCB	0x0, ".", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |TouchPanelTest_Z2170P| PROC

; 424  : {

  00000		 |$LN5@TouchPanel|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M47491|

; 425  :     UNREFERENCED_PARAMETER(pMenu);
; 426  :     OALBLMenuHeader(L"Touch Panel Test");

  00004	e59f0024	 ldr         r0, [pc, #0x24]
  00008	eb000000	 bl          OALBLMenuHeader

; 427  :     
; 428  :     OALLog(L"\r Touch Panel Running...\r\n");  

  0000c	e59f0018	 ldr         r0, [pc, #0x18]
  00010	eb000000	 bl          NKDbgPrintfW

; 429  :     tsc2046Test();

  00014	eb000000	 bl          tsc2046Test

; 430  :     OALLog(L"\r Touch Panel End...\r\n");  

  00018	e59f0008	 ldr         r0, [pc, #8]
  0001c	eb000000	 bl          NKDbgPrintfW

; 431  : }

  00020	e49de004	 ldr         lr, [sp], #4
  00024	e12fff1e	 bx          lr
  00028		 |$LN6@TouchPanel|
  00028		 |$LN7@TouchPanel|
  00028	00000000	 DCD         |??_C@_1CO@CGGKAMLC@?$AA?$AN?$AA?5?$AAT?$AAo?$AAu?$AAc?$AAh?$AA?5?$AAP?$AAa?$AAn?$AAe?$AAl?$AA?5?$AAE?$AAn?$AAd?$AA?4?$AA?4?$AA?4?$AA?$AN?$AA?6?$AA?$AA@|
  0002c		 |$LN8@TouchPanel|
  0002c	00000000	 DCD         |??_C@_1DG@MPNEEBCD@?$AA?$AN?$AA?5?$AAT?$AAo?$AAu?$AAc?$AAh?$AA?5?$AAP?$AAa?$AAn?$AAe?$AAl?$AA?5?$AAR?$AAu?$AAn?$AAn?$AAi?$AAn?$AAg?$AA?4?$AA?4?$AA?4?$AA?$AN?$AA?6?$AA?$AA@|
  00030		 |$LN9@TouchPanel|
  00030	00000000	 DCD         |??_C@_1CC@BNGFPPEB@?$AAT?$AAo?$AAu?$AAc?$AAh?$AA?5?$AAP?$AAa?$AAn?$AAe?$AAl?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@|
  00034		 |$M47492|

			 ENDP  ; |TouchPanelTest_Z2170P|

	EXPORT	|I2C_Clk|

  00000			 AREA	 |.pdata|, PDATA
|$T47506| DCD	|$LN5@I2C_Clk|
	DCD	0x40000b01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |I2C_Clk| PROC

; 439  : {

  00000		 |$LN5@I2C_Clk|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M47503|
  00004	e1a04000	 mov         r4, r0

; 440  :     GPIOSetBit(hGPIO_I2C, I2C3_SCL_GPIO);  

  00008	e3a010b8	 mov         r1, #0xB8
  0000c	eb000000	 bl          GPIOSetBit

; 441  :     LcdStall(50);

  00010	e3a00032	 mov         r0, #0x32
  00014	eb000000	 bl          LcdStall

; 442  :     GPIOClrBit(hGPIO_I2C, I2C3_SCL_GPIO); 

  00018	e3a010b8	 mov         r1, #0xB8
  0001c	e1a00004	 mov         r0, r4
  00020	eb000000	 bl          GPIOClrBit

; 443  :     //LcdStall(50);
; 444  : }

  00024	e8bd4010	 ldmia       sp!, {r4, lr}
  00028	e12fff1e	 bx          lr
  0002c		 |$M47504|

			 ENDP  ; |I2C_Clk|

	EXPORT	|I2C_ACKnowledge|
	IMPORT	|GPIOGetBit|
	IMPORT	|GPIOSetMode|

  00000			 AREA	 |.pdata|, PDATA
|$T47514| DCD	|$LN5@I2C_ACKnow|
	DCD	0x40001c01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |I2C_ACKnowledge| PROC

; 449  : {

  00000		 |$LN5@I2C_ACKnow|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M47511|
  00004	e1a04000	 mov         r4, r0

; 450  : 
; 451  :     GPIOSetMode(hGPIO_I2C, I2C3_SDA_GPIO, GPIO_DIR_INPUT);      //Get slave a ACK value for SDA line  

  00008	e3a02001	 mov         r2, #1
  0000c	e3a010b9	 mov         r1, #0xB9
  00010	eb000000	 bl          GPIOSetMode

; 452  :     LcdStall(50);

  00014	e3a00032	 mov         r0, #0x32
  00018	eb000000	 bl          LcdStall

; 453  :     GPIOSetBit(hGPIO_I2C, I2C3_SCL_GPIO);

  0001c	e3a010b8	 mov         r1, #0xB8
  00020	e1a00004	 mov         r0, r4
  00024	eb000000	 bl          GPIOSetBit

; 454  :     LcdStall(50); 

  00028	e3a00032	 mov         r0, #0x32
  0002c	eb000000	 bl          LcdStall

; 455  :     GPIOGetBit(hGPIO_I2C, I2C3_SDA_GPIO); 

  00030	e3a010b9	 mov         r1, #0xB9
  00034	e1a00004	 mov         r0, r4
  00038	eb000000	 bl          GPIOGetBit

; 456  :     LcdStall(50);

  0003c	e3a00032	 mov         r0, #0x32
  00040	eb000000	 bl          LcdStall

; 457  : 
; 458  :     GPIOSetMode(hGPIO_I2C, I2C3_SDA_GPIO, GPIO_DIR_OUTPUT); 

  00044	e3a02000	 mov         r2, #0
  00048	e3a010b9	 mov         r1, #0xB9
  0004c	e1a00004	 mov         r0, r4
  00050	eb000000	 bl          GPIOSetMode

; 459  :     //LcdStall(50);
; 460  :     GPIOClrBit(hGPIO_I2C, I2C3_SCL_GPIO);   

  00054	e3a010b8	 mov         r1, #0xB8
  00058	e1a00004	 mov         r0, r4
  0005c	eb000000	 bl          GPIOClrBit

; 461  :     LcdStall(50);   

  00060	e3a00032	 mov         r0, #0x32
  00064	eb000000	 bl          LcdStall

; 462  :     //Doesnot Needs SDA Line falling time!!
; 463  :     /*GPIOClrBit(hGPIO_I2C, I2C3_SDA_GPIO); 
; 464  :     LcdStall(50);*/
; 465  : }

  00068	e8bd4010	 ldmia       sp!, {r4, lr}
  0006c	e12fff1e	 bx          lr
  00070		 |$M47512|

			 ENDP  ; |I2C_ACKnowledge|

	EXPORT	|I2C_ACKnowledge_READ|

  00000			 AREA	 |.pdata|, PDATA
|$T47522| DCD	|$LN5@I2C_ACKnow@2|
	DCD	0x40001201
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |I2C_ACKnowledge_READ| PROC

; 470  : {       

  00000		 |$LN5@I2C_ACKnow@2|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M47519|
  00004	e1a04000	 mov         r4, r0

; 471  : 
; 472  :     //GPIOSetMode(hGPIO_I2C, I2C3_SDA_GPIO, GPIO_DIR_INPUT);      //Get slave a ACK value for SDA line  
; 473  :     //LcdStall(50);
; 474  :     GPIOSetBit(hGPIO_I2C, I2C3_SCL_GPIO);

  00008	e3a010b8	 mov         r1, #0xB8
  0000c	eb000000	 bl          GPIOSetBit

; 475  :     LcdStall(50); 

  00010	e3a00032	 mov         r0, #0x32
  00014	eb000000	 bl          LcdStall

; 476  :     GPIOGetBit(hGPIO_I2C, I2C3_SDA_GPIO); 

  00018	e3a010b9	 mov         r1, #0xB9
  0001c	e1a00004	 mov         r0, r4
  00020	eb000000	 bl          GPIOGetBit

; 477  :     LcdStall(50);

  00024	e3a00032	 mov         r0, #0x32
  00028	eb000000	 bl          LcdStall

; 478  :     
; 479  :     //GPIOSetMode(hGPIO_I2C, I2C3_SDA_GPIO, GPIO_DIR_OUTPUT); 
; 480  :     //LcdStall(50);
; 481  :     GPIOClrBit(hGPIO_I2C, I2C3_SCL_GPIO);   

  0002c	e3a010b8	 mov         r1, #0xB8
  00030	e1a00004	 mov         r0, r4
  00034	eb000000	 bl          GPIOClrBit

; 482  :     LcdStall(50);         

  00038	e3a00032	 mov         r0, #0x32
  0003c	eb000000	 bl          LcdStall

; 483  : }

  00040	e8bd4010	 ldmia       sp!, {r4, lr}
  00044	e12fff1e	 bx          lr
  00048		 |$M47520|

			 ENDP  ; |I2C_ACKnowledge_READ|

	EXPORT	|I2C_Clk_READ|

  00000			 AREA	 |.pdata|, PDATA
|$T47533| DCD	|$LN5@I2C_Clk_RE|
	DCD	0x40001401
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |I2C_Clk_READ| PROC

; 488  : {

  00000		 |$LN5@I2C_Clk_RE|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M47530|
  00004	e1a05000	 mov         r5, r0

; 489  :     DWORD data=0;
; 490  :     
; 491  :     GPIOSetBit(hGPIO_I2C, I2C3_SCL_GPIO);

  00008	e3a010b8	 mov         r1, #0xB8
  0000c	eb000000	 bl          GPIOSetBit

; 492  :     LcdStall(50);

  00010	e3a00032	 mov         r0, #0x32
  00014	eb000000	 bl          LcdStall

; 493  :     data = GPIOGetBit(hGPIO_I2C, I2C3_SDA_GPIO); 

  00018	e3a010b9	 mov         r1, #0xB9
  0001c	e1a00005	 mov         r0, r5
  00020	eb000000	 bl          GPIOGetBit
  00024	e1a04000	 mov         r4, r0

; 494  :     LcdStall(10);

  00028	e3a0000a	 mov         r0, #0xA
  0002c	eb000000	 bl          LcdStall

; 495  :     
; 496  :     GPIOClrBit(hGPIO_I2C, I2C3_SCL_GPIO);   

  00030	e3a010b8	 mov         r1, #0xB8
  00034	e1a00005	 mov         r0, r5
  00038	eb000000	 bl          GPIOClrBit

; 497  :     LcdStall(50); 

  0003c	e3a00032	 mov         r0, #0x32
  00040	eb000000	 bl          LcdStall

; 498  :     
; 499  :     return (int)data;
; 500  : }

  00044	e1a00004	 mov         r0, r4
  00048	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  0004c	e12fff1e	 bx          lr
  00050		 |$M47531|

			 ENDP  ; |I2C_Clk_READ|

	EXPORT	|I2C_READ|

  00000			 AREA	 |.pdata|, PDATA
|$T47547| DCD	|$LN10@I2C_READ|
	DCD	0x40001b01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |I2C_READ| PROC

; 505  : {

  00000		 |$LN10@I2C_READ|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M47544|
  00004	e1a05000	 mov         r5, r0

; 506  :     int i, rx, value;
; 507  :     
; 508  :     GPIOSetMode(hGPIO_I2C, I2C3_SDA_GPIO, GPIO_DIR_INPUT);      //Get slave a ACK value for SDA line  

  00008	e3a02001	 mov         r2, #1
  0000c	e3a010b9	 mov         r1, #0xB9
  00010	eb000000	 bl          GPIOSetMode

; 509  :     LcdStall(50);

  00014	e3a00032	 mov         r0, #0x32
  00018	eb000000	 bl          LcdStall

; 510  :     for(i=7, value=0; i>=0; i--)

  0001c	e3a04007	 mov         r4, #7
  00020	e3a06000	 mov         r6, #0
  00024		 |$LL3@I2C_READ|

; 511  :     {
; 512  :         rx = I2C_Clk_READ(hGPIO_I2C); 

  00024	e1a00005	 mov         r0, r5
  00028	eb000000	 bl          I2C_Clk_READ

; 513  :         value += (rx<<i);

  0002c	e0866410	 add         r6, r6, r0, lsl r4
  00030	e2544001	 subs        r4, r4, #1
  00034	5afffffa	 bpl         |$LL3@I2C_READ|

; 514  :     }
; 515  :     
; 516  :     GPIOSetMode(hGPIO_I2C, I2C3_SDA_GPIO, GPIO_DIR_OUTPUT);      

  00038	e3a02000	 mov         r2, #0
  0003c	e3a010b9	 mov         r1, #0xB9
  00040	e1a00005	 mov         r0, r5
  00044	eb000000	 bl          GPIOSetMode

; 517  :     GPIOClrBit(hGPIO_I2C, I2C3_SCL_GPIO);    

  00048	e3a010b8	 mov         r1, #0xB8
  0004c	e1a00005	 mov         r0, r5
  00050	eb000000	 bl          GPIOClrBit

; 518  :     GPIOClrBit(hGPIO_I2C, I2C3_SDA_GPIO); 

  00054	e3a010b9	 mov         r1, #0xB9
  00058	e1a00005	 mov         r0, r5
  0005c	eb000000	 bl          GPIOClrBit

; 519  :     //LcdStall(50); 
; 520  :     
; 521  :     return value;
; 522  : }

  00060	e1a00006	 mov         r0, r6
  00064	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00068	e12fff1e	 bx          lr
  0006c		 |$M47545|

			 ENDP  ; |I2C_READ|

	EXPORT	|I2C_WRITE|

  00000			 AREA	 |.pdata|, PDATA
|$T47566| DCD	|$LN17@I2C_WRITE|
	DCD	0x40001a01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |I2C_WRITE| PROC

; 527  : {

  00000		 |$LN17@I2C_WRITE|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M47563|
  00004	e1a06001	 mov         r6, r1
  00008	e1a05000	 mov         r5, r0

; 528  :     int i;
; 529  :     for(i=7; i>=0; i--)

  0000c	e3a04007	 mov         r4, #7
  00010	e3a07001	 mov         r7, #1
  00014		 |$LL5@I2C_WRITE|

; 530  :     {
; 531  :         if( CMD&(1<<i) ){

  00014	e1160417	 tst         r6, r7, lsl r4

; 532  :             GPIOSetBit(hGPIO_I2C, I2C3_SDA_GPIO);  

  00018	e3a010b9	 mov         r1, #0xB9
  0001c	e1a00005	 mov         r0, r5
  00020	0a000001	 beq         |$LN2@I2C_WRITE|
  00024	eb000000	 bl          GPIOSetBit

; 533  :             LcdStall(50);
; 534  :             I2C_Clk(hGPIO_I2C);
; 535  :         }else{

  00028	ea000000	 b           |$LN14@I2C_WRITE|
  0002c		 |$LN2@I2C_WRITE|

; 536  :             GPIOClrBit(hGPIO_I2C, I2C3_SDA_GPIO);   

  0002c	eb000000	 bl          GPIOClrBit
  00030		 |$LN14@I2C_WRITE|

; 537  :             LcdStall(50);

  00030	e3a00032	 mov         r0, #0x32
  00034	eb000000	 bl          LcdStall

; 538  :             I2C_Clk(hGPIO_I2C);

  00038	e3a010b8	 mov         r1, #0xB8
  0003c	e1a00005	 mov         r0, r5
  00040	eb000000	 bl          GPIOSetBit
  00044	e3a00032	 mov         r0, #0x32
  00048	eb000000	 bl          LcdStall
  0004c	e3a010b8	 mov         r1, #0xB8
  00050	e1a00005	 mov         r0, r5
  00054	eb000000	 bl          GPIOClrBit
  00058	e2544001	 subs        r4, r4, #1
  0005c	5affffec	 bpl         |$LL5@I2C_WRITE|

; 539  :         }
; 540  :     }           
; 541  : }

  00060	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00064	e12fff1e	 bx          lr
  00068		 |$M47564|

			 ENDP  ; |I2C_WRITE|

	EXPORT	|I2C_setSlaveAddress_READ|

  00000			 AREA	 |.pdata|, PDATA
|$T47585| DCD	|$LN17@I2C_setSla|
	DCD	0x40001f01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |I2C_setSlaveAddress_READ| PROC

; 546  : {    

  00000		 |$LN17@I2C_setSla|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M47582|
  00004	e1a06001	 mov         r6, r1
  00008	e1a05000	 mov         r5, r0

; 547  :     int i; 
; 548  :     for(i=7; i >=0; i--)

  0000c	e3a04007	 mov         r4, #7
  00010	e3a07001	 mov         r7, #1
  00014		 |$LL5@I2C_setSla|

; 549  :     {         
; 550  :         if( addr&(1<<i) ){

  00014	e1160417	 tst         r6, r7, lsl r4

; 551  :             GPIOSetBit(hGPIO_I2C, I2C3_SDA_GPIO);  

  00018	e3a010b9	 mov         r1, #0xB9
  0001c	e1a00005	 mov         r0, r5
  00020	0a000001	 beq         |$LN2@I2C_setSla|
  00024	eb000000	 bl          GPIOSetBit

; 552  :             LcdStall(50);
; 553  :             I2C_Clk(hGPIO_I2C);
; 554  :         }else{

  00028	ea000000	 b           |$LN14@I2C_setSla|
  0002c		 |$LN2@I2C_setSla|

; 555  :             GPIOClrBit(hGPIO_I2C, I2C3_SDA_GPIO);   

  0002c	eb000000	 bl          GPIOClrBit
  00030		 |$LN14@I2C_setSla|

; 556  :             LcdStall(50);

  00030	e3a00032	 mov         r0, #0x32
  00034	eb000000	 bl          LcdStall

; 557  :             I2C_Clk(hGPIO_I2C);

  00038	e3a010b8	 mov         r1, #0xB8
  0003c	e1a00005	 mov         r0, r5
  00040	eb000000	 bl          GPIOSetBit
  00044	e3a00032	 mov         r0, #0x32
  00048	eb000000	 bl          LcdStall
  0004c	e3a010b8	 mov         r1, #0xB8
  00050	e1a00005	 mov         r0, r5
  00054	eb000000	 bl          GPIOClrBit
  00058	e2544001	 subs        r4, r4, #1
  0005c	5affffec	 bpl         |$LL5@I2C_setSla|

; 558  :         }
; 559  :     }
; 560  :     GPIOClrBit(hGPIO_I2C, I2C3_SDA_GPIO); 

  00060	e3a010b9	 mov         r1, #0xB9
  00064	e1a00005	 mov         r0, r5
  00068	eb000000	 bl          GPIOClrBit

; 561  :     LcdStall(50);

  0006c	e3a00032	 mov         r0, #0x32
  00070	eb000000	 bl          LcdStall

; 562  : }

  00074	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00078	e12fff1e	 bx          lr
  0007c		 |$M47583|

			 ENDP  ; |I2C_setSlaveAddress_READ|

	EXPORT	|I2C_setSlaveAddress|

  00000			 AREA	 |.pdata|, PDATA
|$T47604| DCD	|$LN17@I2C_setSla@2|
	DCD	0x40001a01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |I2C_setSlaveAddress| PROC

; 567  : {    

  00000		 |$LN17@I2C_setSla@2|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M47601|
  00004	e1a06001	 mov         r6, r1
  00008	e1a05000	 mov         r5, r0

; 568  :     int i;  
; 569  :     for(i=7; i >=0; i--)

  0000c	e3a04007	 mov         r4, #7
  00010	e3a07001	 mov         r7, #1
  00014		 |$LL5@I2C_setSla@2|

; 570  :     {         
; 571  :         if( addr&(1<<i) ){

  00014	e1160417	 tst         r6, r7, lsl r4

; 572  :             GPIOSetBit(hGPIO_I2C, I2C3_SDA_GPIO);  

  00018	e3a010b9	 mov         r1, #0xB9
  0001c	e1a00005	 mov         r0, r5
  00020	0a000001	 beq         |$LN2@I2C_setSla@2|
  00024	eb000000	 bl          GPIOSetBit

; 573  :             LcdStall(50);
; 574  :             I2C_Clk(hGPIO_I2C);
; 575  :         }else{

  00028	ea000000	 b           |$LN14@I2C_setSla@2|
  0002c		 |$LN2@I2C_setSla@2|

; 576  :             GPIOClrBit(hGPIO_I2C, I2C3_SDA_GPIO);   

  0002c	eb000000	 bl          GPIOClrBit
  00030		 |$LN14@I2C_setSla@2|

; 577  :             LcdStall(50);

  00030	e3a00032	 mov         r0, #0x32
  00034	eb000000	 bl          LcdStall

; 578  :             I2C_Clk(hGPIO_I2C);

  00038	e3a010b8	 mov         r1, #0xB8
  0003c	e1a00005	 mov         r0, r5
  00040	eb000000	 bl          GPIOSetBit
  00044	e3a00032	 mov         r0, #0x32
  00048	eb000000	 bl          LcdStall
  0004c	e3a010b8	 mov         r1, #0xB8
  00050	e1a00005	 mov         r0, r5
  00054	eb000000	 bl          GPIOClrBit
  00058	e2544001	 subs        r4, r4, #1
  0005c	5affffec	 bpl         |$LL5@I2C_setSla@2|

; 579  :         }
; 580  :     }  
; 581  : }

  00060	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00064	e12fff1e	 bx          lr
  00068		 |$M47602|

			 ENDP  ; |I2C_setSlaveAddress|

	EXPORT	|I2C_START|

  00000			 AREA	 |.pdata|, PDATA
|$T47612| DCD	|$LN5@I2C_START|
	DCD	0x40001701
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |I2C_START| PROC

; 586  : {

  00000		 |$LN5@I2C_START|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M47609|
  00004	e1a04000	 mov         r4, r0

; 587  :     GPIOSetBit(hGPIO_I2C, I2C3_SDA_GPIO);   //S1, SDA = High

  00008	e3a010b9	 mov         r1, #0xB9
  0000c	eb000000	 bl          GPIOSetBit

; 588  :     LcdStall(100);                          

  00010	e3a00064	 mov         r0, #0x64
  00014	eb000000	 bl          LcdStall

; 589  :     GPIOSetBit(hGPIO_I2C, I2C3_SCL_GPIO);   //S2, SCL = High ; kept high   

  00018	e3a010b8	 mov         r1, #0xB8
  0001c	e1a00004	 mov         r0, r4
  00020	eb000000	 bl          GPIOSetBit

; 590  :     LcdStall(100);

  00024	e3a00064	 mov         r0, #0x64
  00028	eb000000	 bl          LcdStall

; 591  :     
; 592  :     GPIOClrBit(hGPIO_I2C, I2C3_SDA_GPIO);   //S3, When SDA changes High -> Low , start bit generating

  0002c	e3a010b9	 mov         r1, #0xB9
  00030	e1a00004	 mov         r0, r4
  00034	eb000000	 bl          GPIOClrBit

; 593  :     LcdStall(50);                           

  00038	e3a00032	 mov         r0, #0x32
  0003c	eb000000	 bl          LcdStall

; 594  :     GPIOClrBit(hGPIO_I2C, I2C3_SCL_GPIO);   //S4, SCL = Low 

  00040	e3a010b8	 mov         r1, #0xB8
  00044	e1a00004	 mov         r0, r4
  00048	eb000000	 bl          GPIOClrBit

; 595  :     LcdStall(50);                          

  0004c	e3a00032	 mov         r0, #0x32
  00050	eb000000	 bl          LcdStall

; 596  : }

  00054	e8bd4010	 ldmia       sp!, {r4, lr}
  00058	e12fff1e	 bx          lr
  0005c		 |$M47610|

			 ENDP  ; |I2C_START|

	EXPORT	|I2C_STOP|

  00000			 AREA	 |.pdata|, PDATA
|$T47620| DCD	|$LN5@I2C_STOP|
	DCD	0x40001201
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |I2C_STOP| PROC

; 601  : {   

  00000		 |$LN5@I2C_STOP|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M47617|
  00004	e1a04000	 mov         r4, r0

; 602  :     //GPIOClrBit(hGPIO_I2C, I2C3_SCL_GPIO);
; 603  :     GPIOClrBit(hGPIO_I2C, I2C3_SDA_GPIO);   //P1

  00008	e3a010b9	 mov         r1, #0xB9
  0000c	eb000000	 bl          GPIOClrBit

; 604  :     LcdStall(50);

  00010	e3a00032	 mov         r0, #0x32
  00014	eb000000	 bl          LcdStall

; 605  :     GPIOSetBit(hGPIO_I2C, I2C3_SCL_GPIO);   //P2

  00018	e3a010b8	 mov         r1, #0xB8
  0001c	e1a00004	 mov         r0, r4
  00020	eb000000	 bl          GPIOSetBit

; 606  :     LcdStall(50);

  00024	e3a00032	 mov         r0, #0x32
  00028	eb000000	 bl          LcdStall

; 607  :     GPIOSetBit(hGPIO_I2C, I2C3_SDA_GPIO);   //P3

  0002c	e3a010b9	 mov         r1, #0xB9
  00030	e1a00004	 mov         r0, r4
  00034	eb000000	 bl          GPIOSetBit

; 608  :     LcdStall(50);    

  00038	e3a00032	 mov         r0, #0x32
  0003c	eb000000	 bl          LcdStall

; 609  : }

  00040	e8bd4010	 ldmia       sp!, {r4, lr}
  00044	e12fff1e	 bx          lr
  00048		 |$M47618|

			 ENDP  ; |I2C_STOP|

	EXPORT	|gaugeInformation|

  00000			 AREA	 |.pdata|, PDATA
|$T47639| DCD	|$LN13@gaugeInfor|
	DCD	0x40004a02
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |gaugeInformation| PROC

; 614  : {

  00000		 |$LN13@gaugeInfor|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004	e24dd040	 sub         sp, sp, #0x40
  00008		 |$M47636|
  00008	e1a04001	 mov         r4, r1
  0000c	e1a06000	 mov         r6, r0
  00010	e3a03a03	 mov         r3, #3, 20

; 615  :     int LSB = 0, MSB = 0; 
; 616  :     int i, temp, sum, a[16];
; 617  : 
; 618  :     LcdStall(12500);

  00014	e38300d4	 orr         r0, r3, #0xD4
  00018	eb000000	 bl          LcdStall

; 619  :     //*************************
; 620  :     I2C_START(hGPIO_I2C);  

  0001c	e1a00006	 mov         r0, r6
  00020	eb000000	 bl          I2C_START

; 621  :     I2C_setSlaveAddress(hGPIO_I2C, BQ27510_ADDRESS_WRITE);   //ADDR[7:1] + R/W[0] 

  00024	e3a010aa	 mov         r1, #0xAA
  00028	e1a00006	 mov         r0, r6
  0002c	eb000000	 bl          I2C_setSlaveAddress

; 622  :     LcdStall(100);    

  00030	e3a00064	 mov         r0, #0x64
  00034	eb000000	 bl          LcdStall

; 623  :     I2C_ACKnowledge(hGPIO_I2C);

  00038	e1a00006	 mov         r0, r6
  0003c	eb000000	 bl          I2C_ACKnowledge

; 624  :     
; 625  :     I2C_WRITE(hGPIO_I2C,  stdCMD);              //CMD[7:0]

  00040	e1a01004	 mov         r1, r4
  00044	e1a00006	 mov         r0, r6
  00048	eb000000	 bl          I2C_WRITE

; 626  :     //I2C_WRITE(hGPIO_I2C, bq27500CMD_VOLT_LSB);
; 627  :     LcdStall(300);                                          //100 200 500-ok 50, Maybe trouble        

  0004c	e3a00f4b	 mov         r0, #0x4B, 30
  00050	eb000000	 bl          LcdStall

; 628  :     I2C_ACKnowledge(hGPIO_I2C);

  00054	e1a00006	 mov         r0, r6
  00058	eb000000	 bl          I2C_ACKnowledge

; 629  :     //*************************
; 630  :      
; 631  :     //Sr
; 632  :     LcdStall(1000); 

  0005c	e3a00ffa	 mov         r0, #0xFA, 30
  00060	eb000000	 bl          LcdStall

; 633  : 
; 634  :     //*************************    
; 635  :     I2C_START(hGPIO_I2C);

  00064	e1a00006	 mov         r0, r6
  00068	eb000000	 bl          I2C_START

; 636  :     I2C_setSlaveAddress_READ(hGPIO_I2C, BQ27510_ADDRESS_READ);

  0006c	e3a010ab	 mov         r1, #0xAB
  00070	e1a00006	 mov         r0, r6
  00074	eb000000	 bl          I2C_setSlaveAddress_READ

; 637  :     LcdStall(300);  

  00078	e3a00f4b	 mov         r0, #0x4B, 30
  0007c	eb000000	 bl          LcdStall

; 638  :     I2C_ACKnowledge(hGPIO_I2C);

  00080	e1a00006	 mov         r0, r6
  00084	eb000000	 bl          I2C_ACKnowledge

; 639  : 
; 640  :     //prepare get Data LSB
; 641  :     LcdStall(300); 

  00088	e3a00f4b	 mov         r0, #0x4B, 30
  0008c	eb000000	 bl          LcdStall

; 642  :     LSB  = I2C_READ(hGPIO_I2C);

  00090	e1a00006	 mov         r0, r6
  00094	eb000000	 bl          I2C_READ
  00098	e1a05000	 mov         r5, r0

; 643  :     LcdStall(300);

  0009c	e3a00f4b	 mov         r0, #0x4B, 30
  000a0	eb000000	 bl          LcdStall

; 644  :     I2C_ACKnowledge_READ(hGPIO_I2C);

  000a4	e1a00006	 mov         r0, r6
  000a8	eb000000	 bl          I2C_ACKnowledge_READ

; 645  : 
; 646  :     //prepare get Data MSB
; 647  :     LcdStall(1000); 

  000ac	e3a00ffa	 mov         r0, #0xFA, 30
  000b0	eb000000	 bl          LcdStall

; 648  :     MSB = I2C_READ(hGPIO_I2C);

  000b4	e1a00006	 mov         r0, r6
  000b8	eb000000	 bl          I2C_READ
  000bc	e1a04000	 mov         r4, r0

; 649  :     LcdStall(300);

  000c0	e3a00f4b	 mov         r0, #0x4B, 30
  000c4	eb000000	 bl          LcdStall

; 650  :     I2C_ACKnowledge_READ(hGPIO_I2C);

  000c8	e1a00006	 mov         r0, r6
  000cc	eb000000	 bl          I2C_ACKnowledge_READ

; 651  :     LcdStall(500);

  000d0	e3a00f7d	 mov         r0, #0x7D, 30
  000d4	eb000000	 bl          LcdStall

; 652  :     I2C_STOP(hGPIO_I2C);

  000d8	e1a00006	 mov         r0, r6
  000dc	eb000000	 bl          I2C_STOP

; 653  :     //*************************
; 654  :     
; 655  :     //RETAILMSG(1, (L" ~Value = 0x%02x 0x%02x \r\n",MSB ,LSB));
; 656  : 
; 657  :     temp = (MSB<<8);
; 658  :     temp |= LSB;

  000e0	e185e404	 orr         lr, r5, r4, lsl #8

; 659  : 
; 660  :     for(i=0, sum=0; i<16; i++){

  000e4	e3a04001	 mov         r4, #1
  000e8	e3a05001	 mov         r5, #1
  000ec	e3a03000	 mov         r3, #0
  000f0	e3a00000	 mov         r0, #0
  000f4	e28d1000	 add         r1, sp, #0
  000f8		 |$LL5@gaugeInfor|

; 661  : 		if(i<8)

  000f8	e3530008	 cmp         r3, #8

; 662  : 			a[i] = temp & (1<<i);

  000fc	b00e2314	 andlt       r2, lr, r4, lsl r3

; 663  : 		else
; 664  : 			a[i] = temp & (1<<i);

  00100	a00e2315	 andge       r2, lr, r5, lsl r3
  00104	e2833001	 add         r3, r3, #1
  00108	e5812000	 str         r2, [r1]

; 665  : 			
; 666  : 		sum += a[i];

  0010c	e2811004	 add         r1, r1, #4
  00110	e3530010	 cmp         r3, #0x10
  00114	e0800002	 add         r0, r0, r2
  00118	bafffff6	 blt         |$LL5@gaugeInfor|

; 667  : 	}
; 668  :     return sum;
; 669  : }

  0011c	e28dd040	 add         sp, sp, #0x40
  00120	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00124	e12fff1e	 bx          lr
  00128		 |$M47637|

			 ENDP  ; |gaugeInformation|

	EXPORT	|InitI2CWithBQ27510|
	EXPORT	|??_C@_1FA@JMHKMEFE@?$AA?5?$AA?$HO?$AAR?$AAe?$AAp?$AAo?$AAr?$AAt?$AAs?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAd?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAt?$AAy?$AAp?$AAe?$AA?3?$AA0?$AAx?$AA?$CF?$AA0?$AA2?$AAX@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DO@OLEHJPML@?$AA?5?$AA?$HO?$AAB?$AAa?$AAt?$AAt?$AAe?$AAr?$AAy?$AA?5?$AAT?$AAe?$AAm?$AAp?$AAe?$AAr?$AAa?$AAt?$AAu?$AAr?$AAe?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?5?$AAC?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DK@NOEMNDJB@?$AA?5?$AA?$HO?$AAB?$AAa?$AAt?$AAt?$AAe?$AAr?$AAy?$AA?5?$AAV?$AAo?$AAl?$AAt?$AAa?$AAg?$AAe?$AAs?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?5?$AAm?$AAV?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GA@IBICOHAA@?$AA?5?$AA?$HO?$AAB?$AAa?$AAt?$AAt?$AAe?$AAr?$AAy?$AA?5?$AAN?$AAo?$AAm?$AAi?$AAn?$AAa?$AAl?$AA?5?$AAA?$AAv?$AAa?$AAi?$AAl?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAC?$AAa?$AAp?$AAa@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T47652| DCD	|$LN5@InitI2CWit|
	DCD	0x40008c01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FA@JMHKMEFE@?$AA?5?$AA?$HO?$AAR?$AAe?$AAp?$AAo?$AAr?$AAt?$AAs?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAd?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAt?$AAy?$AAp?$AAe?$AA?3?$AA0?$AAx?$AA?$CF?$AA0?$AA2?$AAX@| DCB " "
	DCB	0x0, "~", 0x0, "R", 0x0, "e", 0x0, "p", 0x0, "o", 0x0, "r"
	DCB	0x0, "t", 0x0, "s", 0x0, " ", 0x0, "t", 0x0, "h", 0x0, "e"
	DCB	0x0, " ", 0x0, "d", 0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c"
	DCB	0x0, "e", 0x0, " ", 0x0, "t", 0x0, "y", 0x0, "p", 0x0, "e"
	DCB	0x0, ":", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "2"
	DCB	0x0, "X", 0x0, "%", 0x0, "0", 0x0, "2", 0x0, "X", 0x0, " "
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@OLEHJPML@?$AA?5?$AA?$HO?$AAB?$AAa?$AAt?$AAt?$AAe?$AAr?$AAy?$AA?5?$AAT?$AAe?$AAm?$AAp?$AAe?$AAr?$AAa?$AAt?$AAu?$AAr?$AAe?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?5?$AAC?$AA?$AN?$AA?6?$AA?$AA@| DCB " "
	DCB	0x0, "~", 0x0, "B", 0x0, "a", 0x0, "t", 0x0, "t", 0x0, "e"
	DCB	0x0, "r", 0x0, "y", 0x0, " ", 0x0, "T", 0x0, "e", 0x0, "m"
	DCB	0x0, "p", 0x0, "e", 0x0, "r", 0x0, "a", 0x0, "t", 0x0, "u"
	DCB	0x0, "r", 0x0, "e", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, " ", 0x0, "C", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DK@NOEMNDJB@?$AA?5?$AA?$HO?$AAB?$AAa?$AAt?$AAt?$AAe?$AAr?$AAy?$AA?5?$AAV?$AAo?$AAl?$AAt?$AAa?$AAg?$AAe?$AAs?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?5?$AAm?$AAV?$AA?$AN?$AA?6?$AA?$AA@| DCB " "
	DCB	0x0, "~", 0x0, "B", 0x0, "a", 0x0, "t", 0x0, "t", 0x0, "e"
	DCB	0x0, "r", 0x0, "y", 0x0, " ", 0x0, "V", 0x0, "o", 0x0, "l"
	DCB	0x0, "t", 0x0, "a", 0x0, "g", 0x0, "e", 0x0, "s", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, "m"
	DCB	0x0, "V", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GA@IBICOHAA@?$AA?5?$AA?$HO?$AAB?$AAa?$AAt?$AAt?$AAe?$AAr?$AAy?$AA?5?$AAN?$AAo?$AAm?$AAi?$AAn?$AAa?$AAl?$AA?5?$AAA?$AAv?$AAa?$AAi?$AAl?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAC?$AAa?$AAp?$AAa@| DCB " "
	DCB	0x0, "~", 0x0, "B", 0x0, "a", 0x0, "t", 0x0, "t", 0x0, "e"
	DCB	0x0, "r", 0x0, "y", 0x0, " ", 0x0, "N", 0x0, "o", 0x0, "m"
	DCB	0x0, "i", 0x0, "n", 0x0, "a", 0x0, "l", 0x0, " ", 0x0, "A"
	DCB	0x0, "v", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "a", 0x0, "b"
	DCB	0x0, "l", 0x0, "e", 0x0, " ", 0x0, "C", 0x0, "a", 0x0, "p"
	DCB	0x0, "a", 0x0, "c", 0x0, "i", 0x0, "t", 0x0, "y", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, "m"
	DCB	0x0, "A", 0x0, "h", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |InitI2CWithBQ27510| PROC

; 674  : {

  00000		 |$LN5@InitI2CWit|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004		 |$M47649|
  00004	e1a09000	 mov         r9, r0

; 675  :     bq_dataram data;
; 676  :     int LSB = 0, MSB = 0; 
; 677  :     //int i, temp, sum, a[16];
; 678  :     
; 679  :     //*************************
; 680  :     I2C_START(hGPIO_I2C);  

  00008	eb000000	 bl          I2C_START

; 681  :     I2C_setSlaveAddress(hGPIO_I2C, BQ27510_ADDRESS_WRITE);   //ADDR[7:1] + R/W[0] 

  0000c	e3a010aa	 mov         r1, #0xAA
  00010	e1a00009	 mov         r0, r9
  00014	eb000000	 bl          I2C_setSlaveAddress

; 682  :     LcdStall(100);    

  00018	e3a00064	 mov         r0, #0x64
  0001c	eb000000	 bl          LcdStall

; 683  :     I2C_ACKnowledge(hGPIO_I2C);

  00020	e1a00009	 mov         r0, r9
  00024	eb000000	 bl          I2C_ACKnowledge

; 684  :     
; 685  :     I2C_WRITE(hGPIO_I2C,  bq27500CMD_CNTL_LSB);              //CMD[7:0] 

  00028	e3a01000	 mov         r1, #0
  0002c	e1a00009	 mov         r0, r9
  00030	eb000000	 bl          I2C_WRITE

; 686  :     LcdStall(300);                                          

  00034	e3a00f4b	 mov         r0, #0x4B, 30
  00038	eb000000	 bl          LcdStall

; 687  :     I2C_ACKnowledge(hGPIO_I2C);

  0003c	e1a00009	 mov         r0, r9
  00040	eb000000	 bl          I2C_ACKnowledge

; 688  : 
; 689  :     I2C_WRITE(hGPIO_I2C,  0x01);          

  00044	e3a01001	 mov         r1, #1
  00048	e1a00009	 mov         r0, r9
  0004c	eb000000	 bl          I2C_WRITE

; 690  :     LcdStall(300);                                                  

  00050	e3a00f4b	 mov         r0, #0x4B, 30
  00054	eb000000	 bl          LcdStall

; 691  :     I2C_ACKnowledge(hGPIO_I2C);

  00058	e1a00009	 mov         r0, r9
  0005c	eb000000	 bl          I2C_ACKnowledge

; 692  : 
; 693  :     I2C_WRITE(hGPIO_I2C,  0x00);          

  00060	e3a01000	 mov         r1, #0
  00064	e1a00009	 mov         r0, r9
  00068	eb000000	 bl          I2C_WRITE

; 694  :     LcdStall(300);                                                  

  0006c	e3a00f4b	 mov         r0, #0x4B, 30
  00070	eb000000	 bl          LcdStall

; 695  :     I2C_ACKnowledge(hGPIO_I2C);

  00074	e1a00009	 mov         r0, r9
  00078	eb000000	 bl          I2C_ACKnowledge

; 696  :     I2C_STOP(hGPIO_I2C);

  0007c	e1a00009	 mov         r0, r9
  00080	eb000000	 bl          I2C_STOP

; 697  :     //*************************
; 698  :     
; 699  :     LcdStall(1000); 

  00084	e3a00ffa	 mov         r0, #0xFA, 30
  00088	eb000000	 bl          LcdStall

; 700  :     //*************************    
; 701  :     I2C_START(hGPIO_I2C);                                    //Sr 

  0008c	e1a00009	 mov         r0, r9
  00090	eb000000	 bl          I2C_START

; 702  :     I2C_setSlaveAddress(hGPIO_I2C, BQ27510_ADDRESS_WRITE);   //ADDR[7:1] + R/W[0] 

  00094	e3a010aa	 mov         r1, #0xAA
  00098	e1a00009	 mov         r0, r9
  0009c	eb000000	 bl          I2C_setSlaveAddress

; 703  :     LcdStall(100);    

  000a0	e3a00064	 mov         r0, #0x64
  000a4	eb000000	 bl          LcdStall

; 704  :     I2C_ACKnowledge(hGPIO_I2C);

  000a8	e1a00009	 mov         r0, r9
  000ac	eb000000	 bl          I2C_ACKnowledge

; 705  :     
; 706  :     I2C_WRITE(hGPIO_I2C,  bq27500CMD_CNTL_LSB);              //CMD[7:0] 

  000b0	e3a01000	 mov         r1, #0
  000b4	e1a00009	 mov         r0, r9
  000b8	eb000000	 bl          I2C_WRITE

; 707  :     LcdStall(300);                                         

  000bc	e3a00f4b	 mov         r0, #0x4B, 30
  000c0	eb000000	 bl          LcdStall

; 708  :     I2C_ACKnowledge(hGPIO_I2C);

  000c4	e1a00009	 mov         r0, r9
  000c8	eb000000	 bl          I2C_ACKnowledge

; 709  : 
; 710  :     I2C_START(hGPIO_I2C);

  000cc	e1a00009	 mov         r0, r9
  000d0	eb000000	 bl          I2C_START

; 711  :     I2C_setSlaveAddress_READ(hGPIO_I2C, BQ27510_ADDRESS_READ);

  000d4	e3a010ab	 mov         r1, #0xAB
  000d8	e1a00009	 mov         r0, r9
  000dc	eb000000	 bl          I2C_setSlaveAddress_READ

; 712  :     LcdStall(300);  

  000e0	e3a00f4b	 mov         r0, #0x4B, 30
  000e4	eb000000	 bl          LcdStall

; 713  :     I2C_ACKnowledge(hGPIO_I2C);

  000e8	e1a00009	 mov         r0, r9
  000ec	eb000000	 bl          I2C_ACKnowledge

; 714  : 
; 715  :     //prepare get Data LSB
; 716  :     LcdStall(300); 

  000f0	e3a00f4b	 mov         r0, #0x4B, 30
  000f4	eb000000	 bl          LcdStall

; 717  :     LSB  = I2C_READ(hGPIO_I2C);

  000f8	e1a00009	 mov         r0, r9
  000fc	eb000000	 bl          I2C_READ
  00100	e1a08000	 mov         r8, r0

; 718  :     LcdStall(300);

  00104	e3a00f4b	 mov         r0, #0x4B, 30
  00108	eb000000	 bl          LcdStall

; 719  :     I2C_ACKnowledge_READ(hGPIO_I2C);

  0010c	e1a00009	 mov         r0, r9
  00110	eb000000	 bl          I2C_ACKnowledge_READ

; 720  : 
; 721  :     //prepare get Data MSB
; 722  :     LcdStall(1000); 

  00114	e3a00ffa	 mov         r0, #0xFA, 30
  00118	eb000000	 bl          LcdStall

; 723  :     MSB = I2C_READ(hGPIO_I2C);

  0011c	e1a00009	 mov         r0, r9
  00120	eb000000	 bl          I2C_READ
  00124	e1a07000	 mov         r7, r0

; 724  :     LcdStall(300);

  00128	e3a00f4b	 mov         r0, #0x4B, 30
  0012c	eb000000	 bl          LcdStall

; 725  :     I2C_ACKnowledge_READ(hGPIO_I2C);

  00130	e1a00009	 mov         r0, r9
  00134	eb000000	 bl          I2C_ACKnowledge_READ

; 726  :     LcdStall(500);

  00138	e3a00f7d	 mov         r0, #0x7D, 30
  0013c	eb000000	 bl          LcdStall

; 727  :     I2C_STOP(hGPIO_I2C);

  00140	e1a00009	 mov         r0, r9
  00144	eb000000	 bl          I2C_STOP

; 728  :     //*************************
; 729  :     
; 730  :     
; 731  :     I2C_START(hGPIO_I2C);

  00148	e1a00009	 mov         r0, r9
  0014c	eb000000	 bl          I2C_START

; 732  :     I2C_STOP(hGPIO_I2C);

  00150	e1a00009	 mov         r0, r9
  00154	eb000000	 bl          I2C_STOP

; 733  :     gaugeInformation(hGPIO_I2C,  0x00);         //This opreating means clean register

  00158	e3a01000	 mov         r1, #0
  0015c	e1a00009	 mov         r0, r9
  00160	eb000000	 bl          gaugeInformation

; 734  :     data.Temp =(short) gaugeInformation(hGPIO_I2C,  bq27500CMD_TEMP_LSB);

  00164	e3a01006	 mov         r1, #6
  00168	e1a00009	 mov         r0, r9
  0016c	eb000000	 bl          gaugeInformation
  00170	e1a03000	 mov         r3, r0

; 735  :     gaugeInformation(hGPIO_I2C,  0x00);

  00174	e1a06803	 mov         r6, r3, lsl #16
  00178	e1a00009	 mov         r0, r9
  0017c	e3a01000	 mov         r1, #0
  00180	e1a06846	 mov         r6, r6, asr #16
  00184	eb000000	 bl          gaugeInformation

; 736  :     data.Voltage =(short) gaugeInformation(hGPIO_I2C,  bq27500CMD_VOLT_LSB);

  00188	e3a01008	 mov         r1, #8
  0018c	e1a00009	 mov         r0, r9
  00190	eb000000	 bl          gaugeInformation
  00194	e1a05000	 mov         r5, r0

; 737  :     gaugeInformation(hGPIO_I2C,  0x00);

  00198	e1a00009	 mov         r0, r9
  0019c	e3a01000	 mov         r1, #0
  001a0	eb000000	 bl          gaugeInformation

; 738  :     data.NomAvailCap =(short) gaugeInformation(hGPIO_I2C,  bq27500CMD_NAC_LSB);

  001a4	e3a0100c	 mov         r1, #0xC
  001a8	e1a00009	 mov         r0, r9
  001ac	eb000000	 bl          gaugeInformation
  001b0	e1a04000	 mov         r4, r0

; 739  :     gaugeInformation(hGPIO_I2C,  0x00);

  001b4	e1a00009	 mov         r0, r9
  001b8	e3a01000	 mov         r1, #0
  001bc	eb000000	 bl          gaugeInformation

; 740  :     
; 741  :     OALLog(L" ~Reports the device type:0x%02X%02X \r\n",MSB ,LSB);

  001c0	e59f0064	 ldr         r0, [pc, #0x64]
  001c4	e1a02008	 mov         r2, r8
  001c8	e1a01007	 mov         r1, r7
  001cc	eb000000	 bl          NKDbgPrintfW

; 742  :     OALLog(L" ~Battery Temperature = %d C\r\n",(data.Temp/10)-273);

  001d0	e59f3050	 ldr         r3, [pc, #0x50]
  001d4	e3a02c01	 mov         r2, #1, 24
  001d8	e59f0044	 ldr         r0, [pc, #0x44]
  001dc	e0c3e396	 smull       lr, r3, r6, r3
  001e0	e3822011	 orr         r2, r2, #0x11
  001e4	e1a03143	 mov         r3, r3, asr #2
  001e8	e0833fa3	 add         r3, r3, r3, lsr #31
  001ec	e0431002	 sub         r1, r3, r2
  001f0	eb000000	 bl          NKDbgPrintfW

; 743  :     OALLog(L" ~Battery Voltages = %d mV\r\n",data.Voltage);

  001f4	e1a01805	 mov         r1, r5, lsl #16
  001f8	e59f0020	 ldr         r0, [pc, #0x20]
  001fc	e1a01841	 mov         r1, r1, asr #16
  00200	eb000000	 bl          NKDbgPrintfW

; 744  :     OALLog(L" ~Battery Nominal Available Capacity = %d mAh\r\n",data.NomAvailCap);

  00204	e59f0010	 ldr         r0, [pc, #0x10]
  00208	e1a01804	 mov         r1, r4, lsl #16
  0020c	e1a01841	 mov         r1, r1, asr #16
  00210	eb000000	 bl          NKDbgPrintfW

; 745  : }

  00214	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  00218	e12fff1e	 bx          lr
  0021c		 |$LN6@InitI2CWit|
  0021c		 |$LN7@InitI2CWit|
  0021c	00000000	 DCD         |??_C@_1GA@IBICOHAA@?$AA?5?$AA?$HO?$AAB?$AAa?$AAt?$AAt?$AAe?$AAr?$AAy?$AA?5?$AAN?$AAo?$AAm?$AAi?$AAn?$AAa?$AAl?$AA?5?$AAA?$AAv?$AAa?$AAi?$AAl?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAC?$AAa?$AAp?$AAa@|
  00220		 |$LN8@InitI2CWit|
  00220	00000000	 DCD         |??_C@_1DK@NOEMNDJB@?$AA?5?$AA?$HO?$AAB?$AAa?$AAt?$AAt?$AAe?$AAr?$AAy?$AA?5?$AAV?$AAo?$AAl?$AAt?$AAa?$AAg?$AAe?$AAs?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?5?$AAm?$AAV?$AA?$AN?$AA?6?$AA?$AA@|
  00224		 |$LN9@InitI2CWit|
  00224	00000000	 DCD         |??_C@_1DO@OLEHJPML@?$AA?5?$AA?$HO?$AAB?$AAa?$AAt?$AAt?$AAe?$AAr?$AAy?$AA?5?$AAT?$AAe?$AAm?$AAp?$AAe?$AAr?$AAa?$AAt?$AAu?$AAr?$AAe?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?5?$AAC?$AA?$AN?$AA?6?$AA?$AA@|
  00228		 |$LN10@InitI2CWit|
  00228	66666667	 DCD         0x66666667
  0022c		 |$LN11@InitI2CWit|
  0022c	00000000	 DCD         |??_C@_1FA@JMHKMEFE@?$AA?5?$AA?$HO?$AAR?$AAe?$AAp?$AAo?$AAr?$AAt?$AAs?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAd?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAt?$AAy?$AAp?$AAe?$AA?3?$AA0?$AAx?$AA?$CF?$AA0?$AA2?$AAX@|
  00230		 |$M47650|

			 ENDP  ; |InitI2CWithBQ27510|

	EXPORT	|??_C@_1FO@BKJKLBCH@?$AAS?$AAU?$AAC?$AAC?$AAE?$AAS?$AAS?$AA?3?$AA?5?$AAB?$AAQ?$AA2?$AA7?$AA5?$AA1?$AA0?$AA_?$AAi?$AAn?$AAi?$AAt?$AA?5?$AA?9?$AA?5?$AAO?$AAp?$AAe?$AAn?$AA?5?$AAI?$AA2?$AAC@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GC@GBHIDOHO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAB?$AAQ?$AA2?$AA7?$AA5?$AA1?$AA0?$AA_?$AAi?$AAn?$AAi?$AAt?$AA?5?$AA?9?$AA?5?$AAO?$AAp?$AAe?$AAn?$AA?5?$AAI?$AA2?$AAC?$AA?5?$AAd@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T47666| DCD	|$LN7@BatteryTes|
	DCD	0x40002301

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FO@BKJKLBCH@?$AAS?$AAU?$AAC?$AAC?$AAE?$AAS?$AAS?$AA?3?$AA?5?$AAB?$AAQ?$AA2?$AA7?$AA5?$AA1?$AA0?$AA_?$AAi?$AAn?$AAi?$AAt?$AA?5?$AA?9?$AA?5?$AAO?$AAp?$AAe?$AAn?$AA?5?$AAI?$AA2?$AAC@| DCB "S"
	DCB	0x0, "U", 0x0, "C", 0x0, "C", 0x0, "E", 0x0, "S", 0x0, "S"
	DCB	0x0, ":", 0x0, " ", 0x0, "B", 0x0, "Q", 0x0, "2", 0x0, "7"
	DCB	0x0, "5", 0x0, "1", 0x0, "0", 0x0, "_", 0x0, "i", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "O"
	DCB	0x0, "p", 0x0, "e", 0x0, "n", 0x0, " ", 0x0, "I", 0x0, "2"
	DCB	0x0, "C", 0x0, " ", 0x0, "d", 0x0, "e", 0x0, "v", 0x0, "i"
	DCB	0x0, "c", 0x0, "e", 0x0, " ", 0x0, "O", 0x0, "K", 0x0, "!"
	DCB	0x0, "!", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GC@GBHIDOHO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAB?$AAQ?$AA2?$AA7?$AA5?$AA1?$AA0?$AA_?$AAi?$AAn?$AAi?$AAt?$AA?5?$AA?9?$AA?5?$AAO?$AAp?$AAe?$AAn?$AA?5?$AAI?$AA2?$AAC?$AA?5?$AAd@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "B", 0x0, "Q", 0x0, "2", 0x0, "7", 0x0, "5", 0x0, "1"
	DCB	0x0, "0", 0x0, "_", 0x0, "i", 0x0, "n", 0x0, "i", 0x0, "t"
	DCB	0x0, " ", 0x0, "-", 0x0, " ", 0x0, "O", 0x0, "p", 0x0, "e"
	DCB	0x0, "n", 0x0, " ", 0x0, "I", 0x0, "2", 0x0, "C", 0x0, " "
	DCB	0x0, "d", 0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e"
	DCB	0x0, " ", 0x0, "F", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e"
	DCB	0x0, "d", 0x0, "!", 0x0, "!", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |BatteryTest_Z2170P| PROC

; 750  : {

  00000		 |$LN7@BatteryTes|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M47663|

; 751  :     HANDLE hGPIO_I2C;
; 752  :     
; 753  :     UNREFERENCED_PARAMETER(pMenu);
; 754  :     OALBLMenuHeader(L"Battery Test");

  00004	e59f007c	 ldr         r0, [pc, #0x7C]
  00008	eb000000	 bl          OALBLMenuHeader

; 755  :     
; 756  :     if((hGPIO_I2C = GPIOOpen()) == NULL) 

  0000c	eb000000	 bl          GPIOOpen
  00010	e1b04000	 movs        r4, r0
  00014	1a000003	 bne         |$LN2@BatteryTes|

; 757  : 	{
; 758  :         RETAILMSG(1,(L"ERROR: BQ27510_init - Open I2C device Failed!!\r\n"));

  00018	e59f0064	 ldr         r0, [pc, #0x64]
  0001c	eb000000	 bl          NKDbgPrintfW

; 772  : I2COpenFalse: 
; 773  :     return;    
; 774  : }

  00020	e8bd4010	 ldmia       sp!, {r4, lr}
  00024	e12fff1e	 bx          lr
  00028		 |$LN2@BatteryTes|

; 759  :         goto I2COpenFalse;
; 760  : 	}else{
; 761  :         RETAILMSG(1,(L"SUCCESS: BQ27510_init - Open I2C device OK!!\r\n"));

  00028	e59f0050	 ldr         r0, [pc, #0x50]
  0002c	eb000000	 bl          NKDbgPrintfW

; 762  : 	}
; 763  :     //OALLog(L"\r\n >>>Set hGPIO_I2C:%X \r\n",hGPIO_I2C);  
; 764  :     
; 765  :     GPIOClrBit(hGPIO_I2C,  184);  

  00030	e3a010b8	 mov         r1, #0xB8
  00034	e1a00004	 mov         r0, r4
  00038	eb000000	 bl          GPIOClrBit

; 766  :     GPIOSetMode(hGPIO_I2C, 184, GPIO_DIR_OUTPUT);   //I2C3_CLK, Ray 131129 

  0003c	e3a02000	 mov         r2, #0
  00040	e3a010b8	 mov         r1, #0xB8
  00044	e1a00004	 mov         r0, r4
  00048	eb000000	 bl          GPIOSetMode

; 767  :     GPIOClrBit(hGPIO_I2C,  185);

  0004c	e3a010b9	 mov         r1, #0xB9
  00050	e1a00004	 mov         r0, r4
  00054	eb000000	 bl          GPIOClrBit

; 768  :     GPIOSetMode(hGPIO_I2C, 185, GPIO_DIR_OUTPUT);   //I2C3_SDA, Ray 131129 

  00058	e3a02000	 mov         r2, #0
  0005c	e3a010b9	 mov         r1, #0xB9
  00060	e1a00004	 mov         r0, r4
  00064	eb000000	 bl          GPIOSetMode

; 769  :     
; 770  :     InitI2CWithBQ27510(hGPIO_I2C);

  00068	e1a00004	 mov         r0, r4
  0006c	eb000000	 bl          InitI2CWithBQ27510

; 771  :     GPIOClose(hGPIO_I2C);

  00070	e1a00004	 mov         r0, r4
  00074	eb000000	 bl          GPIOClose
  00078		 |$I2COpenFalse$47228|

; 772  : I2COpenFalse: 
; 773  :     return;    
; 774  : }

  00078	e8bd4010	 ldmia       sp!, {r4, lr}
  0007c	e12fff1e	 bx          lr
  00080		 |$LN8@BatteryTes|
  00080		 |$LN9@BatteryTes|
  00080	00000000	 DCD         |??_C@_1FO@BKJKLBCH@?$AAS?$AAU?$AAC?$AAC?$AAE?$AAS?$AAS?$AA?3?$AA?5?$AAB?$AAQ?$AA2?$AA7?$AA5?$AA1?$AA0?$AA_?$AAi?$AAn?$AAi?$AAt?$AA?5?$AA?9?$AA?5?$AAO?$AAp?$AAe?$AAn?$AA?5?$AAI?$AA2?$AAC@|
  00084		 |$LN10@BatteryTes|
  00084	00000000	 DCD         |??_C@_1GC@GBHIDOHO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAB?$AAQ?$AA2?$AA7?$AA5?$AA1?$AA0?$AA_?$AAi?$AAn?$AAi?$AAt?$AA?5?$AA?9?$AA?5?$AAO?$AAp?$AAe?$AAn?$AA?5?$AAI?$AA2?$AAC?$AA?5?$AAd@|
  00088		 |$LN11@BatteryTes|
  00088	00000000	 DCD         |??_C@_1BK@KIOELMDE@?$AAB?$AAa?$AAt?$AAt?$AAe?$AAr?$AAy?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@|
  0008c		 |$M47664|

			 ENDP  ; |BatteryTest_Z2170P|

	EXPORT	|??_C@_1CG@CDBIFFDJ@?$AAL?$AAE?$AAD?$AA?5?$AAI?$AAn?$AAd?$AAi?$AAc?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T47678| DCD	|$LN5@LEDTest_Z2|
	DCD	0x40003701

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CG@CDBIFFDJ@?$AAL?$AAE?$AAD?$AA?5?$AAI?$AAn?$AAd?$AAi?$AAc?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@| DCB "L"
	DCB	0x0, "E", 0x0, "D", 0x0, " ", 0x0, "I", 0x0, "n", 0x0, "d"
	DCB	0x0, "i", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, " ", 0x0, "T", 0x0, "e", 0x0, "s", 0x0, "t", 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |LEDTest_Z2170P| PROC

; 780  : {

  00000		 |$LN5@LEDTest_Z2|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M47675|

; 781  :     DWORD delay = 1000;
; 782  : //    int i;
; 783  : 	HANDLE hGPIO;
; 784  : 	UNREFERENCED_PARAMETER(pMenu);
; 785  : 	
; 786  : 	OALBLMenuHeader(L"LED Indicator Test");

  00004	e59f00cc	 ldr         r0, [pc, #0xCC]
  00008	eb000000	 bl          OALBLMenuHeader

; 787  :     hGPIO = GPIOOpen();

  0000c	eb000000	 bl          GPIOOpen

; 788  : 
; 789  : 
; 790  :     //for(i=0; i<2; i++){
; 791  :         GPIOClrBit(hGPIO, BARCODE_LED_SET_GPIO);

  00010	e3a010a0	 mov         r1, #0xA0
  00014	e1a04000	 mov         r4, r0
  00018	eb000000	 bl          GPIOClrBit

; 792  :         LcdStall(1);

  0001c	e3a00001	 mov         r0, #1
  00020	eb000000	 bl          LcdStall

; 793  :         GPIOSetBit(hGPIO, BARCODE_LED_SET_GPIO);

  00024	e3a010a0	 mov         r1, #0xA0
  00028	e1a00004	 mov         r0, r4
  0002c	eb000000	 bl          GPIOSetBit

; 794  :         LcdStall(delay);

  00030	e3a00ffa	 mov         r0, #0xFA, 30
  00034	eb000000	 bl          LcdStall

; 795  :         GPIOClrBit(hGPIO, BARCODE_LED_SET_GPIO);

  00038	e3a010a0	 mov         r1, #0xA0
  0003c	e1a00004	 mov         r0, r4
  00040	eb000000	 bl          GPIOClrBit
  00044	e3a03c0b	 mov         r3, #0xB, 24

; 796  :         LcdSleep(delay*3);

  00048	e38300b8	 orr         r0, r3, #0xB8
  0004c	eb000000	 bl          LcdSleep

; 797  : 
; 798  :         GPIOClrBit(hGPIO, GREEN_LED_SET_GPIO);

  00050	e3a01022	 mov         r1, #0x22
  00054	e1a00004	 mov         r0, r4
  00058	eb000000	 bl          GPIOClrBit

; 799  :         LcdStall(1);

  0005c	e3a00001	 mov         r0, #1
  00060	eb000000	 bl          LcdStall

; 800  :         GPIOSetBit(hGPIO, GREEN_LED_SET_GPIO);

  00064	e3a01022	 mov         r1, #0x22
  00068	e1a00004	 mov         r0, r4
  0006c	eb000000	 bl          GPIOSetBit

; 801  :         LcdStall(500);

  00070	e3a00f7d	 mov         r0, #0x7D, 30
  00074	eb000000	 bl          LcdStall

; 802  :         GPIOClrBit(hGPIO, GREEN_LED_SET_GPIO );

  00078	e3a01022	 mov         r1, #0x22
  0007c	e1a00004	 mov         r0, r4
  00080	eb000000	 bl          GPIOClrBit

; 803  :         LcdStall(1);

  00084	e3a00001	 mov         r0, #1
  00088	eb000000	 bl          LcdStall

; 804  :         
; 805  :         GPIOClrBit(hGPIO, RED_LED_SET_GPIO);

  0008c	e3a0108c	 mov         r1, #0x8C
  00090	e1a00004	 mov         r0, r4
  00094	eb000000	 bl          GPIOClrBit

; 806  :         LcdStall(1);

  00098	e3a00001	 mov         r0, #1
  0009c	eb000000	 bl          LcdStall

; 807  :         GPIOSetBit(hGPIO, RED_LED_SET_GPIO);

  000a0	e3a0108c	 mov         r1, #0x8C
  000a4	e1a00004	 mov         r0, r4
  000a8	eb000000	 bl          GPIOSetBit

; 808  :         LcdStall(500);

  000ac	e3a00f7d	 mov         r0, #0x7D, 30
  000b0	eb000000	 bl          LcdStall

; 809  :         GPIOClrBit(hGPIO, RED_LED_SET_GPIO);

  000b4	e3a0108c	 mov         r1, #0x8C
  000b8	e1a00004	 mov         r0, r4
  000bc	eb000000	 bl          GPIOClrBit

; 810  :         LcdStall(1);

  000c0	e3a00001	 mov         r0, #1
  000c4	eb000000	 bl          LcdStall

; 811  :     //}
; 812  : 
; 813  :     GPIOClose(hGPIO);

  000c8	e1a00004	 mov         r0, r4
  000cc	eb000000	 bl          GPIOClose

; 814  : }

  000d0	e8bd4010	 ldmia       sp!, {r4, lr}
  000d4	e12fff1e	 bx          lr
  000d8		 |$LN6@LEDTest_Z2|
  000d8		 |$LN7@LEDTest_Z2|
  000d8	00000000	 DCD         |??_C@_1CG@CDBIFFDJ@?$AAL?$AAE?$AAD?$AA?5?$AAI?$AAn?$AAd?$AAi?$AAc?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@|
  000dc		 |$M47676|

			 ENDP  ; |LEDTest_Z2170P|

	EXPORT	|BCRSetRTS|

  00000			 AREA	 |.pdata|, PDATA
|$T47690| DCD	|$LN7@BCRSetRTS|
	DCD	0x40000a00
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |BCRSetRTS| PROC

; 822  : {

  00000		 |$LN7@BCRSetRTS|
  00000		 |$M47687|
  00000	e3500000	 cmp         r0, #0

; 823  :     UINT bData = INREG8(&pUartRegs->MCR);

  00004	e59f3018	 ldr         r3, [pc, #0x18]
  00008	e5932000	 ldr         r2, [r3]
  0000c	e5d23010	 ldrb        r3, [r2, #0x10]

; 824  : 
; 825  :     if(bSet)
; 826  :         bData |= UART_MCR_RTS;

  00010	13833002	 orrne       r3, r3, #2

; 829  : 
; 830  :     OUTREG8(&pUartRegs->MCR, bData);      

  00014	15c23010	 strneb      r3, [r2, #0x10]

; 827  :     else
; 828  :         bData &= ~UART_MCR_RTS;

  00018	03c33002	 biceq       r3, r3, #2

; 829  : 
; 830  :     OUTREG8(&pUartRegs->MCR, bData);      

  0001c	05c23010	 streqb      r3, [r2, #0x10]

; 831  : }

  00020	e12fff1e	 bx          lr
  00024		 |$LN8@BCRSetRTS|
  00024		 |$LN9@BCRSetRTS|
  00024	00000000	 DCD         |pUartRegs|
  00028		 |$M47688|

			 ENDP  ; |BCRSetRTS|

	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|??_C@_1O@PBEKMGPM@?$AA?9?$AA?$DO?$AA?$CF?$AAs?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BE@NKOCEIML@?$AAC?$AAa?$AAn?$AAc?$AAe?$AAl?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EM@JHJPHIIM@?$AA?$AN?$AA?5?$AAS?$AAc?$AAa?$AAn?$AA?5?$AAM?$AAo?$AAd?$AAe?$AA?5?$AAk?$AAe?$AAy?$AA?5?$AA?8?$AA5?$AA?8?$AA?0?$AA?5?$AAi?$AAf?$AA?5?$AAC?$AAa?$AAn?$AAc?$AAe?$AAl?$AA?5?$AA?8@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CC@IPNDPEAJ@?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AA?5?$AAB?$AAa?$AAr?$AAc?$AAo?$AAd?$AAe?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|OALBLMenuReadKey|
	IMPORT	|EnableDeviceClocks|
	IMPORT	|OALPAtoVA|
	IMPORT	|GetAddressByDevice|
	IMPORT	|__GSHandlerCheck|
	IMPORT	|__security_cookie|
	IMPORT	|__security_check_cookie|

  00000			 AREA	 |.pdata|, PDATA
|$T47732| DCD	|$LN31@BarcodeTes|
	DCD	0xc000a702

  00000			 AREA	 |.xdata|, DATA
|$T47728| DCD	0xffffffe0

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1O@PBEKMGPM@?$AA?9?$AA?$DO?$AA?$CF?$AAs?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, ">", 0x0, "%", 0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BE@NKOCEIML@?$AAC?$AAa?$AAn?$AAc?$AAe?$AAl?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| DCB "C"
	DCB	0x0, "a", 0x0, "n", 0x0, "c", 0x0, "e", 0x0, "l", 0x0, " "
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EM@JHJPHIIM@?$AA?$AN?$AA?5?$AAS?$AAc?$AAa?$AAn?$AA?5?$AAM?$AAo?$AAd?$AAe?$AA?5?$AAk?$AAe?$AAy?$AA?5?$AA?8?$AA5?$AA?8?$AA?0?$AA?5?$AAi?$AAf?$AA?5?$AAC?$AAa?$AAn?$AAc?$AAe?$AAl?$AA?5?$AA?8@| DCB 0xd
	DCB	0x0, " ", 0x0, "S", 0x0, "c", 0x0, "a", 0x0, "n", 0x0, " "
	DCB	0x0, "M", 0x0, "o", 0x0, "d", 0x0, "e", 0x0, " ", 0x0, "k"
	DCB	0x0, "e", 0x0, "y", 0x0, " ", 0x0, "'", 0x0, "5", 0x0, "'"
	DCB	0x0, ",", 0x0, " ", 0x0, "i", 0x0, "f", 0x0, " ", 0x0, "C"
	DCB	0x0, "a", 0x0, "n", 0x0, "c", 0x0, "e", 0x0, "l", 0x0, " "
	DCB	0x0, "'", 0x0, "0", 0x0, "'", 0x0, ".", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CC@IPNDPEAJ@?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AA?5?$AAB?$AAa?$AAr?$AAc?$AAo?$AAd?$AAe?$AA?6?$AA?$AA@| DCB "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a", 0x0, "l"
	DCB	0x0, " ", 0x0, "B", 0x0, "a", 0x0, "r", 0x0, "c", 0x0, "o"
	DCB	0x0, "d", 0x0, "e", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T47728|

  00008		 |BarcodeTest_Z2170P| PROC

; 835  : {

  00008		 |$LN31@BarcodeTes|
  00008	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  0000c	e24dd068	 sub         sp, sp, #0x68
  00010		 |$M47729|
  00010	e59f3288	 ldr         r3, [pc, #0x288]
  00014	e5933000	 ldr         r3, [r3]
  00018	e58d3064	 str         r3, [sp, #0x64]

; 836  :     HANDLE  hGPIO;
; 837  :     UINT8   status, ch, running = 1;
; 838  :     int     count = 30, inNum = 0;
; 839  :     WCHAR   key, scan[50];
; 840  :        
; 841  : 	UNREFERENCED_PARAMETER(pMenu);	
; 842  : 	OALBLMenuHeader(L"LED Indicator Test");

  0001c	e59f0278	 ldr         r0, [pc, #0x278]
  00020	e3a0801e	 mov         r8, #0x1E
  00024	e3a06000	 mov         r6, #0
  00028	eb000000	 bl          OALBLMenuHeader

; 843  :     hGPIO = GPIOOpen();

  0002c	eb000000	 bl          GPIOOpen

; 844  :     
; 845  : 	//barcode, Ray 131225
; 846  :     GPIOSetMode(hGPIO, 148, GPIO_DIR_OUTPUT);       //uart1_tx

  00030	e3a02000	 mov         r2, #0
  00034	e3a01094	 mov         r1, #0x94
  00038	e1a05000	 mov         r5, r0
  0003c	eb000000	 bl          GPIOSetMode

; 847  :     GPIOSetBit(hGPIO, 148);

  00040	e3a01094	 mov         r1, #0x94
  00044	e1a00005	 mov         r0, r5
  00048	eb000000	 bl          GPIOSetBit

; 848  :     GPIOSetMode(hGPIO, 151, GPIO_DIR_INPUT);        //uart1_rx

  0004c	e3a02001	 mov         r2, #1
  00050	e3a01097	 mov         r1, #0x97
  00054	e1a00005	 mov         r0, r5
  00058	eb000000	 bl          GPIOSetMode

; 849  :     GPIOGetBit(hGPIO, 151);                 

  0005c	e3a01097	 mov         r1, #0x97
  00060	e1a00005	 mov         r0, r5
  00064	eb000000	 bl          GPIOGetBit

; 850  :     GPIOSetMode(hGPIO, 150, GPIO_DIR_INPUT);        //uart1_cts

  00068	e3a02001	 mov         r2, #1
  0006c	e3a01096	 mov         r1, #0x96
  00070	e1a00005	 mov         r0, r5
  00074	eb000000	 bl          GPIOSetMode

; 851  :     GPIOGetBit(hGPIO, 150);                

  00078	e3a01096	 mov         r1, #0x96
  0007c	e1a00005	 mov         r0, r5
  00080	eb000000	 bl          GPIOGetBit

; 852  :     GPIOSetMode(hGPIO, 149, GPIO_DIR_OUTPUT);       //uart1_rts    

  00084	e3a02000	 mov         r2, #0
  00088	e3a01095	 mov         r1, #0x95
  0008c	e1a00005	 mov         r0, r5
  00090	eb000000	 bl          GPIOSetMode

; 853  :     GPIOSetBit(hGPIO, 149);

  00094	e3a01095	 mov         r1, #0x95
  00098	e1a00005	 mov         r0, r5
  0009c	eb000000	 bl          GPIOSetBit

; 854  :     GPIOSetMode(hGPIO, ENG_SET1_GPIO, GPIO_DIR_OUTPUT);       //uart1_rts    

  000a0	e3a02000	 mov         r2, #0
  000a4	e3a01098	 mov         r1, #0x98
  000a8	e1a00005	 mov         r0, r5
  000ac	eb000000	 bl          GPIOSetMode

; 855  :     GPIOSetBit(hGPIO, ENG_SET1_GPIO);

  000b0	e3a01098	 mov         r1, #0x98
  000b4	e1a00005	 mov         r0, r5
  000b8	eb000000	 bl          GPIOSetBit

; 856  :     GPIOSetMode(hGPIO, ENG_SET2_GPIO, GPIO_DIR_OUTPUT);       //uart1_rts    

  000bc	e3a02000	 mov         r2, #0
  000c0	e3a01099	 mov         r1, #0x99
  000c4	e1a00005	 mov         r0, r5
  000c8	eb000000	 bl          GPIOSetMode

; 857  :     GPIOSetBit(hGPIO, ENG_SET2_GPIO);

  000cc	e3a01099	 mov         r1, #0x99
  000d0	e1a00005	 mov         r0, r5
  000d4	eb000000	 bl          GPIOSetBit

; 858  :     OALLog(L"Initial Barcode\n");

  000d8	e59f01b8	 ldr         r0, [pc, #0x1B8]
  000dc	eb000000	 bl          NKDbgPrintfW

; 859  : 	
; 860  :     
; 861  :     GPIOSetBit(hGPIO, BCR_ENG_PWEN);                //Power ON

  000e0	e3a01026	 mov         r1, #0x26
  000e4	e1a00005	 mov         r0, r5
  000e8	eb000000	 bl          GPIOSetBit

; 862  :     pUartRegs = OALPAtoUA(GetAddressByDevice(OMAP_DEVICE_UART1));

  000ec	e3a0000a	 mov         r0, #0xA
  000f0	eb000000	 bl          GetAddressByDevice
  000f4	e3a01000	 mov         r1, #0
  000f8	eb000000	 bl          OALPAtoVA
  000fc	e59f4190	 ldr         r4, [pc, #0x190]

; 863  :     EnableDeviceClocks(OMAP_DEVICE_UART1, TRUE);    

  00100	e3a01001	 mov         r1, #1
  00104	e5840000	 str         r0, [r4]
  00108	e3a0000a	 mov         r0, #0xA
  0010c	eb000000	 bl          EnableDeviceClocks

; 864  :     
; 865  :     // reset uart
; 866  : 	OUTREG8(&pUartRegs->SYSC, UART_SYSC_RST);

  00110	e5943000	 ldr         r3, [r4]
  00114	e3a02002	 mov         r2, #2
  00118	e5c32054	 strb        r2, [r3, #0x54]
  0011c	e5942000	 ldr         r2, [r4]
  00120		 |$LL10@BarcodeTes|

; 867  :     while ((INREG8(&pUartRegs->SYSS) & UART_SYSS_RST_DONE) == 0);

  00120	e5d23058	 ldrb        r3, [r2, #0x58]
  00124	e3130001	 tst         r3, #1
  00128	0afffffc	 beq         |$LL10@BarcodeTes|

; 868  : 
; 869  :     // Set baud rate
; 870  :     OUTREG8(&pUartRegs->LCR, UART_LCR_DLAB);    //Line control register, DIV_EN

  0012c	e3a03080	 mov         r3, #0x80
  00130	e5c2300c	 strb        r3, [r2, #0xC]

; 871  :     OUTREG8(&pUartRegs->DLL, 0x38);             //9.6kbps

  00134	e5943000	 ldr         r3, [r4]
  00138	e3a02038	 mov         r2, #0x38

; 872  :     OUTREG8(&pUartRegs->DLH, 0x01);

  0013c	e3a0e001	 mov         lr, #1
  00140	e5c32000	 strb        r2, [r3]
  00144	e5943000	 ldr         r3, [r4]

; 873  :     OUTREG8(&pUartRegs->LCR, 0x00);

  00148	e3a09000	 mov         r9, #0

; 874  : 
; 875  :     // 8 bit, 1 stop bit, no parity
; 876  :     OUTREG8(&pUartRegs->LCR, 0x03);

  0014c	e3a02003	 mov         r2, #3
  00150	e5c3e004	 strb        lr, [r3, #4]
  00154	e5943000	 ldr         r3, [r4]

; 877  :     // Enable FIFO
; 878  :     OUTREG8(&pUartRegs->FCR, UART_FCR_FIFO_EN);
; 879  :     OUTREG8(&pUartRegs->FCR, UART_FCR_FIFO_EN|UART_FCR_RX_FIFO_CLEAR|UART_FCR_TX_FIFO_CLEAR);

  00158	e3a01007	 mov         r1, #7

; 880  :     // Pool
; 881  :     OUTREG8(&pUartRegs->IER, 0);
; 882  :     // Set DTR/RTS signals
; 883  :     OUTREG8(&pUartRegs->MCR, 0); //UART_MCR_DTR|UART_MCR_RTS);
; 884  :     // Configuration complete so select UART 16x mode
; 885  : 	OUTREG8(&pUartRegs->MDR1, UART_MDR1_UART16);
; 886  :     BCRSetRTS(TRUE);
; 887  :     OALLog(L"\r Scan Mode key '5', if Cancel '0'.\r\n");

  0015c	e59f012c	 ldr         r0, [pc, #0x12C]
  00160	e5c3900c	 strb        r9, [r3, #0xC]
  00164	e5943000	 ldr         r3, [r4]
  00168	e5c3200c	 strb        r2, [r3, #0xC]
  0016c	e5943000	 ldr         r3, [r4]
  00170	e5c3e008	 strb        lr, [r3, #8]
  00174	e5943000	 ldr         r3, [r4]
  00178	e5c31008	 strb        r1, [r3, #8]
  0017c	e5943000	 ldr         r3, [r4]
  00180	e5c39004	 strb        r9, [r3, #4]
  00184	e5943000	 ldr         r3, [r4]
  00188	e5c39010	 strb        r9, [r3, #0x10]
  0018c	e5943000	 ldr         r3, [r4]
  00190	e5c39020	 strb        r9, [r3, #0x20]
  00194	e5942000	 ldr         r2, [r4]
  00198	e5d23010	 ldrb        r3, [r2, #0x10]
  0019c	e3833002	 orr         r3, r3, #2
  001a0	e5c23010	 strb        r3, [r2, #0x10]
  001a4	eb000000	 bl          NKDbgPrintfW
  001a8		 |$LL8@BarcodeTes|

; 888  :     
; 889  :     while(running)
; 890  :     {
; 891  :         key = OALBLMenuReadKey(TRUE);

  001a8	e3a00001	 mov         r0, #1
  001ac	eb000000	 bl          OALBLMenuReadKey
  001b0	e1a03800	 mov         r3, r0, lsl #16
  001b4	e1a03823	 mov         r3, r3, lsr #16

; 892  : 		if(key == L'0')             // ESC KEY

  001b8	e3530030	 cmp         r3, #0x30
  001bc	0a000025	 beq         |$LN24@BarcodeTes|

; 895  : 			break;
; 896  : 		}
; 897  : 		
; 898  : 		if(key == L'5')             // SCAN KEY

  001c0	e3530035	 cmp         r3, #0x35
  001c4	0a000002	 beq         |$LN25@BarcodeTes|

; 921  : 			}
; 922  : 			break;
; 923  : 		}
; 924  : 		LcdSleep(150);

  001c8	e3a00096	 mov         r0, #0x96
  001cc	eb000000	 bl          LcdSleep
  001d0	eafffff4	 b           |$LL8@BarcodeTes|
  001d4		 |$LN25@BarcodeTes|

; 899  : 		{
; 900  : 			GPIOClrBit(hGPIO, BCR_ENG_TRIG);

  001d4	e3a01024	 mov         r1, #0x24
  001d8	e1a00005	 mov         r0, r5
  001dc	eb000000	 bl          GPIOClrBit

; 901  : 			BCRSetRTS(FALSE);

  001e0	e5942000	 ldr         r2, [r4]

; 902  : 			LcdSleep(100);

  001e4	e3a00064	 mov         r0, #0x64
  001e8	e5d23010	 ldrb        r3, [r2, #0x10]
  001ec	e20330fd	 and         r3, r3, #0xFD
  001f0	e5c23010	 strb        r3, [r2, #0x10]
  001f4	eb000000	 bl          LcdSleep
  001f8	e28d7000	 add         r7, sp, #0
  001fc		 |$LL4@BarcodeTes|

; 903  : 			
; 904  : 			while( count-- )
; 905  : 			{
; 906  : 				status = INREG8(&pUartRegs->LSR);

  001fc	e5942000	 ldr         r2, [r4]

; 907  : 				if ((status & UART_LSR_RX_FIFO_E) != 0)
; 908  : 				{
; 909  : 					ch = INREG8(&pUartRegs->RHR);
; 910  : 					scan[inNum++] = ch;
; 911  : 					//OALLog(L" %c\r\n",ch);
; 912  : 				}
; 913  : 				LcdSleep(100);

  00200	e3a00064	 mov         r0, #0x64
  00204	e2488001	 sub         r8, r8, #1
  00208	e5d23014	 ldrb        r3, [r2, #0x14]
  0020c	e3130001	 tst         r3, #1
  00210	15d23000	 ldrneb      r3, [r2]
  00214	12866001	 addne       r6, r6, #1
  00218	10c730b2	 strneh      r3, [r7], #2
  0021c	eb000000	 bl          LcdSleep
  00220	e3580000	 cmp         r8, #0
  00224	1afffff4	 bne         |$LL4@BarcodeTes|

; 914  : 			}
; 915  : 			
; 916  : 			GPIOSetBit(hGPIO, BCR_ENG_TRIG);

  00228	e3a01024	 mov         r1, #0x24
  0022c	e1a00005	 mov         r0, r5
  00230	eb000000	 bl          GPIOSetBit

; 917  : 			if( inNum > 0 )

  00234	e3560000	 cmp         r6, #0
  00238	da000008	 ble         |$LN1@BarcodeTes|

; 918  : 			{
; 919  : 				scan[inNum] = '\0';
; 920  : 				OALLog(L"->%s\r\n",scan);

  0023c	e59f0048	 ldr         r0, [pc, #0x48]
  00240	e28d3000	 add         r3, sp, #0
  00244	e0833086	 add         r3, r3, r6, lsl #1
  00248	e28d1000	 add         r1, sp, #0
  0024c	e1c390b0	 strh        r9, [r3]
  00250	eb000000	 bl          NKDbgPrintfW
  00254	ea000001	 b           |$LN1@BarcodeTes|
  00258		 |$LN24@BarcodeTes|

; 893  : 		{
; 894  : 			OALLog(L"Cancel \r\n");

  00258	e59f0028	 ldr         r0, [pc, #0x28]
  0025c	eb000000	 bl          NKDbgPrintfW

; 918  : 			{
; 919  : 				scan[inNum] = '\0';
; 920  : 				OALLog(L"->%s\r\n",scan);

  00260		 |$LN1@BarcodeTes|

; 925  : 	}
; 926  : 	GPIOClrBit(hGPIO, BCR_ENG_PWEN);

  00260	e3a01026	 mov         r1, #0x26
  00264	e1a00005	 mov         r0, r5
  00268	eb000000	 bl          GPIOClrBit

; 927  : 	GPIOClose(hGPIO);

  0026c	e1a00005	 mov         r0, r5
  00270	eb000000	 bl          GPIOClose
  00274	e59d0064	 ldr         r0, [sp, #0x64]
  00278	eb000000	 bl          __security_check_cookie

; 928  : }

  0027c	e28dd068	 add         sp, sp, #0x68
  00280	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  00284	e12fff1e	 bx          lr
  00288		 |$LN32@BarcodeTes|
  00288		 |$LN33@BarcodeTes|
  00288	00000000	 DCD         |??_C@_1BE@NKOCEIML@?$AAC?$AAa?$AAn?$AAc?$AAe?$AAl?$AA?5?$AA?$AN?$AA?6?$AA?$AA@|
  0028c		 |$LN34@BarcodeTes|
  0028c	00000000	 DCD         |??_C@_1O@PBEKMGPM@?$AA?9?$AA?$DO?$AA?$CF?$AAs?$AA?$AN?$AA?6?$AA?$AA@|
  00290		 |$LN35@BarcodeTes|
  00290	00000000	 DCD         |??_C@_1EM@JHJPHIIM@?$AA?$AN?$AA?5?$AAS?$AAc?$AAa?$AAn?$AA?5?$AAM?$AAo?$AAd?$AAe?$AA?5?$AAk?$AAe?$AAy?$AA?5?$AA?8?$AA5?$AA?8?$AA?0?$AA?5?$AAi?$AAf?$AA?5?$AAC?$AAa?$AAn?$AAc?$AAe?$AAl?$AA?5?$AA?8@|
  00294		 |$LN36@BarcodeTes|
  00294	00000000	 DCD         |pUartRegs|
  00298		 |$LN37@BarcodeTes|
  00298	00000000	 DCD         |??_C@_1CC@IPNDPEAJ@?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AA?5?$AAB?$AAa?$AAr?$AAc?$AAo?$AAd?$AAe?$AA?6?$AA?$AA@|
  0029c		 |$LN38@BarcodeTes|
  0029c	00000000	 DCD         |??_C@_1CG@CDBIFFDJ@?$AAL?$AAE?$AAD?$AA?5?$AAI?$AAn?$AAd?$AAi?$AAc?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@|
  002a0		 |$LN39@BarcodeTes|
  002a0	00000000	 DCD         |__security_cookie|
  002a4		 |$M47730|

			 ENDP  ; |BarcodeTest_Z2170P|

	EXPORT	|??_C@_1EA@NHFEEJFC@?$AA?$AN?$AA?6?$AA?5?$AA?$DO?$AA?$DO?$AA?$DO?$AAA?$AAl?$AAl?$AA?5?$AAf?$AAu?$AAn?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAt?$AAe?$AAs?$AAt?$AAi?$AAn?$AAg?$AA?4?$AA?4?$AA?4?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DO@BGFONFOF@?$AA?$AN?$AA?6?$AA?5?$AA?$DO?$AA?$DO?$AA?$DO?$AAA?$AAl?$AAl?$AA?5?$AAf?$AAu?$AAn?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAt?$AAe?$AAs?$AAt?$AAe?$AAd?$AA?4?$AA?4?$AA?4?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T47748| DCD	|$LN5@AllFunctio|
	DCD	0x40000c01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@NHFEEJFC@?$AA?$AN?$AA?6?$AA?5?$AA?$DO?$AA?$DO?$AA?$DO?$AAA?$AAl?$AAl?$AA?5?$AAf?$AAu?$AAn?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAt?$AAe?$AAs?$AAt?$AAi?$AAn?$AAg?$AA?4?$AA?4?$AA?4?$AA?$AN?$AA?6?$AA?$AA@| DCB 0xd
	DCB	0x0, 0xa, 0x0, " ", 0x0, ">", 0x0, ">", 0x0, ">", 0x0, "A"
	DCB	0x0, "l", 0x0, "l", 0x0, " ", 0x0, "f", 0x0, "u", 0x0, "n"
	DCB	0x0, "c", 0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, " "
	DCB	0x0, "t", 0x0, "e", 0x0, "s", 0x0, "t", 0x0, "i", 0x0, "n"
	DCB	0x0, "g", 0x0, ".", 0x0, ".", 0x0, ".", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@BGFONFOF@?$AA?$AN?$AA?6?$AA?5?$AA?$DO?$AA?$DO?$AA?$DO?$AAA?$AAl?$AAl?$AA?5?$AAf?$AAu?$AAn?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAt?$AAe?$AAs?$AAt?$AAe?$AAd?$AA?4?$AA?4?$AA?4?$AA?$AN?$AA?6?$AA?$AA@| DCB 0xd
	DCB	0x0, 0xa, 0x0, " ", 0x0, ">", 0x0, ">", 0x0, ">", 0x0, "A"
	DCB	0x0, "l", 0x0, "l", 0x0, " ", 0x0, "f", 0x0, "u", 0x0, "n"
	DCB	0x0, "c", 0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, " "
	DCB	0x0, "t", 0x0, "e", 0x0, "s", 0x0, "t", 0x0, "e", 0x0, "d"
	DCB	0x0, ".", 0x0, ".", 0x0, ".", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |AllFunctionTest_Z2000| PROC

; 934  : {

  00000		 |$LN5@AllFunctio|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M47745|

; 935  :     //OAL_BLMENU_ITEM *ptr = NULL;
; 936  : 	//ALL Test
; 937  : 	UNREFERENCED_PARAMETER(pMenu);
; 938  : 	OALBLMenuHeader(L"All Function Test");

  00004	e59f0020	 ldr         r0, [pc, #0x20]
  00008	eb000000	 bl          OALBLMenuHeader

; 939  :     
; 940  :     OALLog(L"\r\n >>>All function testing...\r\n");    

  0000c	e59f0014	 ldr         r0, [pc, #0x14]
  00010	eb000000	 bl          NKDbgPrintfW

; 941  : 
; 942  : 	/*DisplayTest_Z2170P(ptr);
; 943  : 	LcdStall(stall_1Sec*3);                         //2
; 944  :   
; 945  : 	BkTest_Z2170P(ptr);
; 946  : 	LcdStall(stall_1Sec*3);                         //3
; 947  :          
; 948  : 	DRAMTest_Z2170P(ptr);                                  
; 949  : 	LcdStall(stall_1Sec*3);                         //4 
; 950  : 	   
; 951  : 	KeypadBkTest_Z2170P(ptr);                              
; 952  : 	LcdStall(stall_1Sec*3);                         //5 */
; 953  : 	OALLog(L"\r\n >>>All function tested...\r\n");

  00014	e59f0008	 ldr         r0, [pc, #8]
  00018	eb000000	 bl          NKDbgPrintfW

; 954  : }

  0001c	e49de004	 ldr         lr, [sp], #4
  00020	e12fff1e	 bx          lr
  00024		 |$LN6@AllFunctio|
  00024		 |$LN7@AllFunctio|
  00024	00000000	 DCD         |??_C@_1DO@BGFONFOF@?$AA?$AN?$AA?6?$AA?5?$AA?$DO?$AA?$DO?$AA?$DO?$AAA?$AAl?$AAl?$AA?5?$AAf?$AAu?$AAn?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAt?$AAe?$AAs?$AAt?$AAe?$AAd?$AA?4?$AA?4?$AA?4?$AA?$AN?$AA?6?$AA?$AA@|
  00028		 |$LN8@AllFunctio|
  00028	00000000	 DCD         |??_C@_1EA@NHFEEJFC@?$AA?$AN?$AA?6?$AA?5?$AA?$DO?$AA?$DO?$AA?$DO?$AAA?$AAl?$AAl?$AA?5?$AAf?$AAu?$AAn?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAt?$AAe?$AAs?$AAt?$AAi?$AAn?$AAg?$AA?4?$AA?4?$AA?4?$AA?$AN?$AA?6?$AA?$AA@|
  0002c		 |$LN9@AllFunctio|
  0002c	00000000	 DCD         |??_C@_1CE@NDBHKBD@?$AAA?$AAl?$AAl?$AA?5?$AAF?$AAu?$AAn?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@|
  00030		 |$M47746|

			 ENDP  ; |AllFunctionTest_Z2000|


  00000			 AREA	 |.pdata|, PDATA
|$T47759| DCD	|$LN5@DisplayTes@2|
	DCD	0x40000b01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DisplayTest_Z2000| PROC

; 960  : {

  00000		 |$LN5@DisplayTes@2|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M47756|

; 961  :     BLShowLogo();

  00004	eb000000	 bl          BLShowLogo

; 962  :     OALBLMenuHeader(L"Display Test");

  00008	e59f0018	 ldr         r0, [pc, #0x18]
  0000c	eb000000	 bl          OALBLMenuHeader

; 963  : 	UNREFERENCED_PARAMETER(pMenu);
; 964  :     OALLog(L"\r\n Running...\r\n");

  00010	e59f000c	 ldr         r0, [pc, #0xC]
  00014	eb000000	 bl          NKDbgPrintfW

; 965  : 	//DisplayShow(BSP_Z2000);
; 966  : 	DisplayShow();

  00018	eb000000	 bl          DisplayShow

; 967  : }

  0001c	e49de004	 ldr         lr, [sp], #4
  00020	e12fff1e	 bx          lr
  00024		 |$LN6@DisplayTes@2|
  00024		 |$LN7@DisplayTes@2|
  00024	00000000	 DCD         |??_C@_1CA@IPGENFE@?$AA?$AN?$AA?6?$AA?5?$AAR?$AAu?$AAn?$AAn?$AAi?$AAn?$AAg?$AA?4?$AA?4?$AA?4?$AA?$AN?$AA?6?$AA?$AA@|
  00028		 |$LN8@DisplayTes@2|
  00028	00000000	 DCD         |??_C@_1BK@FJOPBKKD@?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@|
  0002c		 |$M47757|

			 ENDP  ; |DisplayTest_Z2000|


  00000			 AREA	 |.pdata|, PDATA
|$T47769| DCD	|$LN5@BkTest_Z21|
	DCD	0x40000701
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |BkTest_Z2170P| PROC

; 176  : {

  00000		 |$LN5@BkTest_Z21|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M47766|

; 177  : 	OALBLMenuHeader(L"LCM Backlight Test");

  00004	e59f000c	 ldr         r0, [pc, #0xC]
  00008	eb000000	 bl          OALBLMenuHeader

; 178  : 	UNREFERENCED_PARAMETER(pMenu);
; 179  :     SetBacklight();

  0000c	eb000000	 bl          SetBacklight

; 180  : }

  00010	e49de004	 ldr         lr, [sp], #4
  00014	e12fff1e	 bx          lr
  00018		 |$LN6@BkTest_Z21|
  00018		 |$LN7@BkTest_Z21|
  00018	00000000	 DCD         |??_C@_1CG@MFOPBHMC@?$AAL?$AAC?$AAM?$AA?5?$AAB?$AAa?$AAc?$AAk?$AAl?$AAi?$AAg?$AAh?$AAt?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@|
  0001c		 |$M47767|

			 ENDP  ; |BkTest_Z2170P|


  00000			 AREA	 |.pdata|, PDATA
|$T47784| DCD	|$LN9@AllFunctio@2|
	DCD	0x40002a01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |AllFunctionTest_Z2170P| PROC

; 135  : {

  00000		 |$LN9@AllFunctio@2|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M47781|

; 136  :     OAL_BLMENU_ITEM *ptr = NULL;
; 137  : 	//ALL Test
; 138  : 	UNREFERENCED_PARAMETER(pMenu);
; 139  : 	OALBLMenuHeader(L"All Function Test");

  00004	e59f0098	 ldr         r0, [pc, #0x98]
  00008	eb000000	 bl          OALBLMenuHeader

; 140  :     
; 141  :     OALLog(L"\r\n >>>All function testing...\r\n");    

  0000c	e59f008c	 ldr         r0, [pc, #0x8C]
  00010	eb000000	 bl          NKDbgPrintfW

; 142  : 
; 143  : 	DisplayTest_Z2170P(ptr);

  00014	eb000000	 bl          BLShowLogo
  00018	e59f007c	 ldr         r0, [pc, #0x7C]
  0001c	eb000000	 bl          OALBLMenuHeader
  00020	e59f0070	 ldr         r0, [pc, #0x70]
  00024	eb000000	 bl          NKDbgPrintfW
  00028	eb000000	 bl          DisplayShow

; 144  : 	LcdStall(stall_1Sec*3);                         //2

  0002c	e59f4060	 ldr         r4, [pc, #0x60]
  00030	e5943000	 ldr         r3, [r4]
  00034	e0830083	 add         r0, r3, r3, lsl #1
  00038	eb000000	 bl          LcdStall

; 145  :   
; 146  : 	BkTest_Z2170P(ptr);

  0003c	e59f004c	 ldr         r0, [pc, #0x4C]
  00040	eb000000	 bl          OALBLMenuHeader
  00044	eb000000	 bl          SetBacklight

; 147  : 	LcdStall(stall_1Sec*3);                         //3

  00048	e5943000	 ldr         r3, [r4]
  0004c	e0830083	 add         r0, r3, r3, lsl #1
  00050	eb000000	 bl          LcdStall

; 148  :          
; 149  : 	DRAMTest_Z2170P(ptr);                                  

  00054	e3a00000	 mov         r0, #0
  00058	eb000000	 bl          DRAMTest_Z2170P

; 150  : 	LcdStall(stall_1Sec*3);                         //4 

  0005c	e5943000	 ldr         r3, [r4]
  00060	e0830083	 add         r0, r3, r3, lsl #1
  00064	eb000000	 bl          LcdStall

; 151  : 	   
; 152  : 	KeypadBkTest_Z2170P(ptr);                              

  00068	e3a00000	 mov         r0, #0
  0006c	eb000000	 bl          KeypadBkTest_Z2170P

; 153  : 	LcdStall(stall_1Sec*3);                         //5 

  00070	e5943000	 ldr         r3, [r4]
  00074	e0830083	 add         r0, r3, r3, lsl #1
  00078	eb000000	 bl          LcdStall

; 154  : 
; 155  : 	
; 156  : 	OALLog(L"\r\n >>>All function tested...\r\n");

  0007c	e59f0008	 ldr         r0, [pc, #8]
  00080	eb000000	 bl          NKDbgPrintfW

; 157  : }

  00084	e8bd4010	 ldmia       sp!, {r4, lr}
  00088	e12fff1e	 bx          lr
  0008c		 |$LN10@AllFunctio@2|
  0008c		 |$LN11@AllFunctio@2|
  0008c	00000000	 DCD         |??_C@_1DO@BGFONFOF@?$AA?$AN?$AA?6?$AA?5?$AA?$DO?$AA?$DO?$AA?$DO?$AAA?$AAl?$AAl?$AA?5?$AAf?$AAu?$AAn?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAt?$AAe?$AAs?$AAt?$AAe?$AAd?$AA?4?$AA?4?$AA?4?$AA?$AN?$AA?6?$AA?$AA@|
  00090		 |$LN12@AllFunctio@2|
  00090	00000000	 DCD         |??_C@_1CG@MFOPBHMC@?$AAL?$AAC?$AAM?$AA?5?$AAB?$AAa?$AAc?$AAk?$AAl?$AAi?$AAg?$AAh?$AAt?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@|
  00094		 |$LN13@AllFunctio@2|
  00094	00000000	 DCD         |stall_1Sec|
  00098		 |$LN14@AllFunctio@2|
  00098	00000000	 DCD         |??_C@_1CA@IPGENFE@?$AA?$AN?$AA?6?$AA?5?$AAR?$AAu?$AAn?$AAn?$AAi?$AAn?$AAg?$AA?4?$AA?4?$AA?4?$AA?$AN?$AA?6?$AA?$AA@|
  0009c		 |$LN15@AllFunctio@2|
  0009c	00000000	 DCD         |??_C@_1BK@FJOPBKKD@?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@|
  000a0		 |$LN16@AllFunctio@2|
  000a0	00000000	 DCD         |??_C@_1EA@NHFEEJFC@?$AA?$AN?$AA?6?$AA?5?$AA?$DO?$AA?$DO?$AA?$DO?$AAA?$AAl?$AAl?$AA?5?$AAf?$AAu?$AAn?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAt?$AAe?$AAs?$AAt?$AAi?$AAn?$AAg?$AA?4?$AA?4?$AA?4?$AA?$AN?$AA?6?$AA?$AA@|
  000a4		 |$LN17@AllFunctio@2|
  000a4	00000000	 DCD         |??_C@_1CE@NDBHKBD@?$AAA?$AAl?$AAl?$AA?5?$AAF?$AAu?$AAn?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@|
  000a8		 |$M47782|

			 ENDP  ; |AllFunctionTest_Z2170P|

	END
