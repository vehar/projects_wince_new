; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\Z2170P\SRC\BOOTLOADER\EBOOT\SDMEMORY\flash.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|g_ulFlashBase| [ DATA ]
	EXPORT	|g_ulFlashLengthBytes| [ DATA ]
	EXPORT	|g_ulBPartBase| [ DATA ]
	EXPORT	|g_ulBPartLengthBytes| [ DATA ]

  00000			 AREA	 |.bss|, NOINIT
|g_bpartBuffer| % 0x20a00

  00000			 AREA	 |.data|, DATA
	 COMMON	|s_binDio|, 0x10

|g_ulFlashBase| DCD 0x8000000
|g_ulFlashLengthBytes| DCD 0x2
|g_ulBPartBase| DCD |g_bpartBuffer|
|g_ulBPartLengthBytes| DCD 0x20a00

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|BLFlashDownload|
; File c:\wince600\platform\z2170p\src\bootloader\eboot\sdmemory\flash.c

  00000			 AREA	 |.pdata|, PDATA
|$T47795| DCD	|$LN5@BLFlashDow|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |BLFlashDownload| PROC

; 92   : {

  00000		 |$LN5@BLFlashDow|
  00000		 |$M47792|

; 93   :     UINT32 rc = (UINT32) BL_ERROR;
; 94   : 
; 95   :     UNREFERENCED_PARAMETER(pBootDevices);
; 96   : #ifndef BSP_NO_NAND_IN_SDBOOT
; 97   :     // We have do device initialization for some devices
; 98   :     switch (pConfig->bootDevLoc.IfcType)
; 99   :         {
; 100  :         case Internal:
; 101  :             switch (pConfig->bootDevLoc.LogicalLoc)
; 102  :                 {
; 103  :                 case BSP_NAND_REGS_PA + 0x20:
; 104  :                     rc = ReadFlashNK();
; 105  :                 break;
; 106  :                 }
; 107  :             break;
; 108  :         }
; 109  : #else
; 110  :     UNREFERENCED_PARAMETER(pConfig);
; 111  : #endif
; 112  :     return rc;

  00000	e3e00000	 mvn         r0, #0

; 113  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M47793|

			 ENDP  ; |BLFlashDownload|

	EXPORT	|OEMStartEraseFlash|

  00000			 AREA	 |.pdata|, PDATA
|$T47804| DCD	|$LN5@OEMStartEr|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMStartEraseFlash| PROC

; 123  : {

  00000		 |$LN5@OEMStartEr|
  00000		 |$M47801|

; 124  :     BOOL rc;
; 125  :     
; 126  :     UNREFERENCED_PARAMETER(address);
; 127  :     UNREFERENCED_PARAMETER(size);
; 128  :     
; 129  : #ifndef BSP_NO_NAND_IN_SDBOOT
; 130  :     rc = TRUE;
; 131  : 
; 132  :     OALMSG(OAL_FUNC, (L"+OEMStartEraseFlash(0x%08x, 0x%08x)\r\n", 
; 133  :                         address, size));
; 134  :     
; 135  :     OALMSG(OAL_FUNC, (L"-OEMStartEraseFlash(rc = %d)\r\n", rc));   
; 136  : #else   
; 137  :     rc = FALSE;    
; 138  : #endif	
; 139  : 
; 140  :     return rc;

  00000	e3a00000	 mov         r0, #0

; 141  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M47802|

			 ENDP  ; |OEMStartEraseFlash|

	EXPORT	|OEMContinueEraseFlash|

  00000			 AREA	 |.pdata|, PDATA
|$T47811| DCD	|$LN5@OEMContinu|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMContinueEraseFlash| PROC

; 152  : {

  00000		 |$LN5@OEMContinu|
  00000		 |$M47808|

; 153  : }

  00000	e12fff1e	 bx          lr
  00004		 |$M47809|

			 ENDP  ; |OEMContinueEraseFlash|

	EXPORT	|OEMFinishEraseFlash|

  00000			 AREA	 |.pdata|, PDATA
|$T47820| DCD	|$LN5@OEMFinishE|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMFinishEraseFlash| PROC

; 164  : {

  00000		 |$LN5@OEMFinishE|
  00000		 |$M47817|

; 165  :     BOOL rc = TRUE;
; 166  : 
; 167  :     return rc;

  00000	e3a00001	 mov         r0, #1

; 168  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M47818|

			 ENDP  ; |OEMFinishEraseFlash|

	EXPORT	|OEMWriteFlash|

  00000			 AREA	 |.pdata|, PDATA
|$T47829| DCD	|$LN5@OEMWriteFl|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMWriteFlash| PROC

; 179  : {

  00000		 |$LN5@OEMWriteFl|
  00000		 |$M47826|

; 180  : #ifndef BSP_NO_NAND_IN_SDBOOT
; 181  : 
; 182  :     BOOL rc;
; 183  :             
; 184  :     switch (g_eboot.type)
; 185  :         {
; 186  :         case DOWNLOAD_TYPE_XLDR:
; 187  :             rc = WriteFlashXLDR(address, size);
; 188  :             break;
; 189  :         case DOWNLOAD_TYPE_EBOOT:     //DOWNLOAD TYPE, it is define 4, Ray 13-09-13   
; 190  :             rc = WriteFlashEBOOT(address, size);
; 191  :             break;
; 192  : 		case DOWNLOAD_TYPE_LOGO:
; 193  :             rc = WriteFlashLogo(address, size);
; 194  : 			break;
; 195  :         case DOWNLOAD_TYPE_FLASHNAND:
; 196  :             rc = WriteFlashNK(address, size);
; 197  :             break;
; 198  : #ifdef IMGMULTIXIP
; 199  :         case DOWNLOAD_TYPE_EXT:
; 200  :             rc = WriteFlashEXT(address, size);
; 201  :             break;
; 202  : #endif			
; 203  :         default:
; 204  :             rc = FALSE;
; 205  :             break;
; 206  :         }
; 207  :     //rc = WriteFlashFromEBOOT(address, size);
; 208  :     return rc;
; 209  : 	
; 210  : #else
; 211  :     UNREFERENCED_PARAMETER(address);
; 212  :     UNREFERENCED_PARAMETER(size);
; 213  :     return FALSE;

  00000	e3a00000	 mov         r0, #0

; 214  : #endif
; 215  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M47827|

			 ENDP  ; |OEMWriteFlash|

	EXPORT	|WriteFlashNK|

  00000			 AREA	 |.pdata|, PDATA
|$T47838| DCD	|$LN5@WriteFlash|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |WriteFlashNK| PROC

; 220  : {

  00000		 |$LN5@WriteFlash|
  00000		 |$M47835|

; 221  : #ifndef BSP_NO_NAND_IN_SDBOOT
; 222  :     BOOL rc = FALSE;
; 223  :     BOOL bExt = FALSE;
; 224  :     HANDLE hPartition;
; 225  :     UCHAR *pData;
; 226  :     PCI_REG_INFO regInfo;
; 227  : 
; 228  :     memset(&regInfo, 0, sizeof(PCI_REG_INFO));
; 229  :     regInfo.MemBase.Num    = 1;
; 230  :     regInfo.MemLen.Num     = 1;
; 231  :     regInfo.MemBase.Reg[0] = g_ulFlashBase;
; 232  :     regInfo.MemLen.Reg[0]  = g_ulFlashLengthBytes;
; 233  : 
; 234  : 
; 235  :     // Get data location
; 236  :     pData = OEMMapMemAddr(address, address);
; 237  : #ifdef IMGMULTIXIP
; 238  :     // Checking if this is an EXT region
; 239  :     if((address == (IMAGE_WINCE_EXT_CA + NAND_ROMOFFSET)) || (address == IMAGE_WINCE_EXT_CA) )
; 240  :     {
; 241  :         bExt = TRUE;
; 242  :         OALLog(L"\r\nWriting EXT image to OS partition, address=%x, SIZE=%x\r\n", address, size);
; 243  :     }
; 244  :     else if ((address == (IMAGE_WINCE_CODE_CA + NAND_ROMOFFSET) )|| (address == IMAGE_WINCE_CODE_CA))
; 245  :     {
; 246  :         OALLog(L"\r\nWriting NK image to OS partition address=%x, SIZE=%x\r\n", address, size);
; 247  :     }
; 248  : #endif
; 249  : 
; 250  :     // Verify that we get CE image.
; 251  :     if (!VerifyImage(pData, NULL))
; 252  :         {
; 253  :         OALMSG(OAL_ERROR, (L"ERROR: OEMWriteFlash: "
; 254  :             L"NK image signature not found\r\n"
; 255  :             ));
; 256  :         rc = TRUE;
; 257  :         goto cleanUp;
; 258  :         }
; 259  : 
; 260  :     // Initialize boot partition library
; 261  :     if (!BP_Init((LPBYTE)g_ulBPartBase, g_ulBPartLengthBytes, NULL, &regInfo, NULL))
; 262  :     {
; 263  :         OALLog(L"WriteFlashNK: Error initializing bootpart library!!\r\n");
; 264  :         goto cleanUp;
; 265  :     }
; 266  :     
; 267  :     // Open partition based on region type 
; 268  :     hPartition = BP_OpenPartition((DWORD)NEXT_FREE_LOC, (DWORD)USE_REMAINING_SPACE, bExt ? PART_BINFS : PART_BOOTSECTION, FALSE, PART_OPEN_EXISTING);
; 269  :     if (hPartition == INVALID_HANDLE_VALUE)
; 270  :     {
; 271  :         OALMSG(OAL_ERROR, (L"ERROR: OS partition not found!\r\n"));
; 272  :         goto cleanUp;
; 273  :     }
; 274  :     
; 275  :     // Check length against size of partition
; 276  :     if (!BP_SetDataPointer(hPartition, size))
; 277  :     {
; 278  :         OALMSG(OAL_ERROR, (L"ERROR: OS partition too small!  Aborting...\r\n"));
; 279  :         goto cleanUp;
; 280  :     }
; 281  :     
; 282  :     // Write image to partition
; 283  :     BP_SetDataPointer(hPartition, 0);
; 284  :     if (!BP_WriteData(hPartition, pData, size))
; 285  :     {
; 286  :         OALMSG(OAL_ERROR, (L"ERROR: Failed writing to OS partition!\r\n"));
; 287  :         goto cleanUp;
; 288  :     }
; 289  :     
; 290  :     //OALLog(L"%s image written\r\n", bExt ? L"EXT" :L"nk");
; 291  : 
; 292  :     // Change boot device to NAND
; 293  :     g_bootCfg.bootDevLoc.IfcType = Internal;
; 294  :     g_bootCfg.bootDevLoc.LogicalLoc = BSP_NAND_REGS_PA + 0x20;
; 295  : 
; 296  :     // Done
; 297  :     rc = TRUE;
; 298  : 
; 299  : cleanUp:
; 300  :     return rc;
; 301  : #else
; 302  :     UNREFERENCED_PARAMETER(address);
; 303  :     UNREFERENCED_PARAMETER(size);
; 304  :     return TRUE;

  00000	e3a00001	 mov         r0, #1

; 305  : #endif
; 306  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M47836|

			 ENDP  ; |WriteFlashNK|

	EXPORT	|BLConfigureFlashPartitions|

  00000			 AREA	 |.pdata|, PDATA
|$T47847| DCD	|$LN5@BLConfigur|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |BLConfigureFlashPartitions| PROC

; 885  : {

  00000		 |$LN5@BLConfigur|
  00000		 |$M47844|

; 886  :     BOOL rc = FALSE;
; 887  : 	
; 888  : #ifndef BSP_NO_NAND_IN_SDBOOT
; 889  : 	
; 890  :     HANDLE hFMD;
; 891  :     PCI_REG_INFO regInfo;
; 892  :     FlashInfo flashInfo;
; 893  :     HANDLE hPartition;
; 894  :     PPARTENTRY pPartitionEntry;
; 895  :     DWORD dwBootPartitionSectorCount;
; 896  : 
; 897  : #ifdef IMGMULTIXIP
; 898  :     // Variable for sector count for the new BinFS region (EXT) 
; 899  :     DWORD dwExtPartitionSectorCount;
; 900  : #endif
; 901  : 
; 902  :     memset(&regInfo, 0, sizeof(PCI_REG_INFO));
; 903  :     regInfo.MemBase.Num    = 1;
; 904  :     regInfo.MemLen.Num     = 1;
; 905  :     regInfo.MemBase.Reg[0] = g_ulFlashBase;
; 906  :     
; 907  :     // Get flash info
; 908  :     hFMD = FMD_Init(NULL, &regInfo, NULL);
; 909  :     if (hFMD == NULL)
; 910  :         goto cleanUp;
; 911  : 
; 912  :     if (!FMD_GetInfo(&flashInfo))
; 913  :         goto cleanUp;
; 914  :     
; 915  :     FMD_Deinit(hFMD);
; 916  :     
; 917  :     // Initialize boot partition library
; 918  :     if (!BP_Init((LPBYTE)g_ulBPartBase, g_ulBPartLengthBytes, NULL, &regInfo, NULL))
; 919  :     {
; 920  :         OALLog(L"BLConfigureFlashPartitions: Error initializing bootpart library!!\r\n");
; 921  :         goto cleanUp;
; 922  :     }
; 923  :     
; 924  :     // Get boot partition size
; 925  :     // Ensure boot partition uses entire blocks with no space left over
; 926  :     // Round up to an even block size
; 927  :     dwBootPartitionSectorCount = ((g_bootCfg.osPartitionSize + (flashInfo.dwBytesPerBlock - 1))/ flashInfo.dwBytesPerBlock) * flashInfo.wSectorsPerBlock;
; 928  : 
; 929  :     // Reduce by one to account for MBR, which will be the first sector in non reserved area.
; 930  :     // This causes boot partition to end on a block boundary
; 931  :     dwBootPartitionSectorCount -= 1;
; 932  : 
; 933  : #ifdef IMGMULTIXIP
; 934  :     
; 935  :     // Calculation of the size for the EXT region
; 936  :     dwExtPartitionSectorCount = ((IMAGE_WINCE_EXT_SIZE + (flashInfo.dwBytesPerBlock - 1))/ flashInfo.dwBytesPerBlock) * flashInfo.wSectorsPerBlock;
; 937  : 
; 938  :     dwExtPartitionSectorCount -= 1;
; 939  : #endif
; 940  : 
; 941  :     // Check for existence and size of OS boot partition
; 942  :     hPartition = BP_OpenPartition((DWORD)NEXT_FREE_LOC, (DWORD)USE_REMAINING_SPACE, PART_BOOTSECTION, FALSE, PART_OPEN_EXISTING);
; 943  :     if (hPartition == INVALID_HANDLE_VALUE)
; 944  :         OALLog(L"OS partition does not exist!!\r\n");
; 945  :     else
; 946  :     {
; 947  :         pPartitionEntry = BP_GetPartitionInfo(hPartition);
; 948  :         if (dwBootPartitionSectorCount != pPartitionEntry->Part_TotalSectors)
; 949  :         {
; 950  :             OALLog(L"OS partition does not match configured size!!  Sector count expected: 0x%x, actual 0x%x\r\n", dwBootPartitionSectorCount, pPartitionEntry->Part_TotalSectors);
; 951  :             // Mark handle invalid to kick us into formatting code
; 952  :             hPartition = INVALID_HANDLE_VALUE;
; 953  :         }
; 954  :     }
; 955  :         
; 956  :     if ((hPartition == INVALID_HANDLE_VALUE) || (bForceEnable == TRUE))
; 957  :     {
; 958  :         // OS binary partition either does not exist or does not match configured size
; 959  :         OALLog(L"Formatting flash...\r\n");
; 960  :         // Create a new partion
; 961  :         // Can't just call BP_OpenPartition with PART_OPEN_ALWAYS because it will erase reserved 
; 962  :         // blocks (bootloader) if MBR doesn't exist.  Also, we want to ensure the boot partition
; 963  :         // is actually the first partition on the flash.  So do low level format here (note that 
; 964  :         // this destroys all other partitions on the device)
; 965  :         // Note, we're skipping the block check for speed reasons. Might not want this in a production device...
; 966  :         BP_LowLevelFormat (0, flashInfo.dwNumBlocks, FORMAT_SKIP_RESERVED|FORMAT_SKIP_BLOCK_CHECK);
; 967  :         // Create the OS partition
; 968  :         hPartition = BP_OpenPartition((DWORD)NEXT_FREE_LOC, dwBootPartitionSectorCount, PART_BOOTSECTION, FALSE, PART_CREATE_NEW);
; 969  :         if (hPartition == INVALID_HANDLE_VALUE)
; 970  :         {
; 971  :             OALLog(L"Error creating OS partition!!\r\n");
; 972  :             goto cleanUp;
; 973  :         }
; 974  :         OALLog(L"NK partition created\r\n");
; 975  : 		
; 976  : #ifdef IMGMULTIXIP
; 977  : 
; 978  :        // Creation of the BinFS partition
; 979  :        hPartition = BP_OpenPartition((DWORD)NEXT_FREE_LOC, dwExtPartitionSectorCount, PART_BINFS, FALSE, PART_CREATE_NEW);
; 980  :        if (hPartition == INVALID_HANDLE_VALUE)
; 981  :        {
; 982  :            OALLog(L"Error creating OS partition!!\r\n");
; 983  :            goto cleanUp;
; 984  :        }
; 985  :        OALLog(L"EXT partition created\r\n");
; 986  : #endif
; 987  : 
; 988  :         // Create FAT partition on remaining flash (can be automatically mounted)
; 989  :         hPartition = BP_OpenPartition((DWORD)NEXT_FREE_LOC, (DWORD)USE_REMAINING_SPACE, PART_DOS32, FALSE, PART_CREATE_NEW);
; 990  :         if (hPartition == INVALID_HANDLE_VALUE)
; 991  :         {
; 992  :             OALLog(L"Error creating file partition!!\r\n");
; 993  :             goto cleanUp;
; 994  :         }
; 995  :         OALLog(L"Flash format complete!\r\n");
; 996  :     }
; 997  :     
; 998  :     // Done
; 999  :     rc = TRUE;
; 1000 : 
; 1001 : cleanUp:
; 1002 : #else
; 1003 :     UNREFERENCED_PARAMETER(bForceEnable);
; 1004 : #endif
; 1005 :     return rc;

  00000	e3a00000	 mov         r0, #0

; 1006 : }

  00004	e12fff1e	 bx          lr
  00008		 |$M47845|

			 ENDP  ; |BLConfigureFlashPartitions|

	END
